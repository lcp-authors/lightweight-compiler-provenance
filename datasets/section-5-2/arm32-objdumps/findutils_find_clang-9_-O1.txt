
../repos/findutils/find/find:     file format elf32-littlearm


Disassembly of section .init:

00012438 <.init>:
   12438:	push	{r3, lr}
   1243c:	bl	12c3c <__assert_fail@plt+0x4c>
   12440:	pop	{r3, pc}

Disassembly of section .plt:

00012444 <pthread_mutex_unlock@plt-0x14>:
   12444:	push	{lr}		; (str lr, [sp, #-4]!)
   12448:	ldr	lr, [pc, #4]	; 12454 <pthread_mutex_unlock@plt-0x4>
   1244c:	add	lr, pc, lr
   12450:	ldr	pc, [lr, #8]!
   12454:	andeq	r2, r4, ip, lsr #23

00012458 <pthread_mutex_unlock@plt>:
   12458:	add	ip, pc, #0, 12
   1245c:	add	ip, ip, #270336	; 0x42000
   12460:	ldr	pc, [ip, #2988]!	; 0xbac

00012464 <fdopen@plt>:
   12464:	add	ip, pc, #0, 12
   12468:	add	ip, ip, #270336	; 0x42000
   1246c:	ldr	pc, [ip, #2980]!	; 0xba4

00012470 <fstatfs64@plt>:
   12470:	add	ip, pc, #0, 12
   12474:	add	ip, ip, #270336	; 0x42000
   12478:	ldr	pc, [ip, #2972]!	; 0xb9c

0001247c <calloc@plt>:
   1247c:	add	ip, pc, #0, 12
   12480:	add	ip, ip, #270336	; 0x42000
   12484:	ldr	pc, [ip, #2964]!	; 0xb94

00012488 <endgrent@plt>:
   12488:	add	ip, pc, #0, 12
   1248c:	add	ip, ip, #270336	; 0x42000
   12490:	ldr	pc, [ip, #2956]!	; 0xb8c

00012494 <wctype@plt>:
   12494:	add	ip, pc, #0, 12
   12498:	add	ip, ip, #270336	; 0x42000
   1249c:	ldr	pc, [ip, #2948]!	; 0xb84

000124a0 <gnu_dev_major@plt>:
   124a0:	add	ip, pc, #0, 12
   124a4:	add	ip, ip, #270336	; 0x42000
   124a8:	ldr	pc, [ip, #2940]!	; 0xb7c

000124ac <raise@plt>:
   124ac:	add	ip, pc, #0, 12
   124b0:	add	ip, ip, #270336	; 0x42000
   124b4:	ldr	pc, [ip, #2932]!	; 0xb74

000124b8 <wcrtomb@plt>:
   124b8:	add	ip, pc, #0, 12
   124bc:	add	ip, ip, #270336	; 0x42000
   124c0:	ldr	pc, [ip, #2924]!	; 0xb6c

000124c4 <gmtime_r@plt>:
   124c4:	add	ip, pc, #0, 12
   124c8:	add	ip, ip, #270336	; 0x42000
   124cc:	ldr	pc, [ip, #2916]!	; 0xb64

000124d0 <getpwnam@plt>:
   124d0:	add	ip, pc, #0, 12
   124d4:	add	ip, ip, #270336	; 0x42000
   124d8:	ldr	pc, [ip, #2908]!	; 0xb5c

000124dc <is_selinux_enabled@plt>:
   124dc:	add	ip, pc, #0, 12
   124e0:	add	ip, ip, #270336	; 0x42000
   124e4:	ldr	pc, [ip, #2900]!	; 0xb54

000124e8 <iswctype@plt>:
   124e8:	add	ip, pc, #0, 12
   124ec:	add	ip, ip, #270336	; 0x42000
   124f0:	ldr	pc, [ip, #2892]!	; 0xb4c

000124f4 <strcmp@plt>:
   124f4:	add	ip, pc, #0, 12
   124f8:	add	ip, ip, #270336	; 0x42000
   124fc:	ldr	pc, [ip, #2884]!	; 0xb44

00012500 <strtol@plt>:
   12500:	add	ip, pc, #0, 12
   12504:	add	ip, ip, #270336	; 0x42000
   12508:	ldr	pc, [ip, #2876]!	; 0xb3c

0001250c <getpwuid@plt>:
   1250c:	add	ip, pc, #0, 12
   12510:	add	ip, ip, #270336	; 0x42000
   12514:	ldr	pc, [ip, #2868]!	; 0xb34

00012518 <gnu_dev_makedev@plt>:
   12518:	add	ip, pc, #0, 12
   1251c:	add	ip, ip, #270336	; 0x42000
   12520:	ldr	pc, [ip, #2860]!	; 0xb2c

00012524 <printf@plt>:
   12524:	add	ip, pc, #0, 12
   12528:	add	ip, ip, #270336	; 0x42000
   1252c:	ldr	pc, [ip, #2852]!	; 0xb24

00012530 <gnu_dev_minor@plt>:
   12530:	add	ip, pc, #0, 12
   12534:	add	ip, ip, #270336	; 0x42000
   12538:	ldr	pc, [ip, #2844]!	; 0xb1c

0001253c <pthread_mutex_destroy@plt>:
   1253c:	add	ip, pc, #0, 12
   12540:	add	ip, ip, #270336	; 0x42000
   12544:	ldr	pc, [ip, #2836]!	; 0xb14

00012548 <mktime@plt>:
   12548:	add	ip, pc, #0, 12
   1254c:	add	ip, ip, #270336	; 0x42000
   12550:	ldr	pc, [ip, #2828]!	; 0xb0c

00012554 <fflush@plt>:
   12554:	add	ip, pc, #0, 12
   12558:	add	ip, ip, #270336	; 0x42000
   1255c:	ldr	pc, [ip, #2820]!	; 0xb04

00012560 <unlinkat@plt>:
   12560:	add	ip, pc, #0, 12
   12564:	add	ip, ip, #270336	; 0x42000
   12568:	ldr	pc, [ip, #2812]!	; 0xafc

0001256c <wcwidth@plt>:
   1256c:	add	ip, pc, #0, 12
   12570:	add	ip, ip, #270336	; 0x42000
   12574:	ldr	pc, [ip, #2804]!	; 0xaf4

00012578 <lsetfilecon@plt>:
   12578:	add	ip, pc, #0, 12
   1257c:	add	ip, ip, #270336	; 0x42000
   12580:	ldr	pc, [ip, #2796]!	; 0xaec

00012584 <memmove@plt>:
   12584:	add	ip, pc, #0, 12
   12588:	add	ip, ip, #270336	; 0x42000
   1258c:	ldr	pc, [ip, #2788]!	; 0xae4

00012590 <free@plt>:
   12590:	add	ip, pc, #0, 12
   12594:	add	ip, ip, #270336	; 0x42000
   12598:	ldr	pc, [ip, #2780]!	; 0xadc

0001259c <pthread_mutex_lock@plt>:
   1259c:	add	ip, pc, #0, 12
   125a0:	add	ip, ip, #270336	; 0x42000
   125a4:	ldr	pc, [ip, #2772]!	; 0xad4

000125a8 <faccessat@plt>:
   125a8:	add	ip, pc, #0, 12
   125ac:	add	ip, ip, #270336	; 0x42000
   125b0:	ldr	pc, [ip, #2764]!	; 0xacc

000125b4 <ferror@plt>:
   125b4:	add	ip, pc, #0, 12
   125b8:	add	ip, ip, #270336	; 0x42000
   125bc:	ldr	pc, [ip, #2756]!	; 0xac4

000125c0 <thrd_exit@plt>:
   125c0:	add	ip, pc, #0, 12
   125c4:	add	ip, ip, #270336	; 0x42000
   125c8:	ldr	pc, [ip, #2748]!	; 0xabc

000125cc <strndup@plt>:
   125cc:	add	ip, pc, #0, 12
   125d0:	add	ip, ip, #270336	; 0x42000
   125d4:	ldr	pc, [ip, #2740]!	; 0xab4

000125d8 <clock_gettime@plt>:
   125d8:	add	ip, pc, #0, 12
   125dc:	add	ip, ip, #270336	; 0x42000
   125e0:	ldr	pc, [ip, #2732]!	; 0xaac

000125e4 <_exit@plt>:
   125e4:	add	ip, pc, #0, 12
   125e8:	add	ip, ip, #270336	; 0x42000
   125ec:	ldr	pc, [ip, #2724]!	; 0xaa4

000125f0 <memcpy@plt>:
   125f0:	add	ip, pc, #0, 12
   125f4:	add	ip, ip, #270336	; 0x42000
   125f8:	ldr	pc, [ip, #2716]!	; 0xa9c

000125fc <execvp@plt>:
   125fc:	add	ip, pc, #0, 12
   12600:	add	ip, ip, #270336	; 0x42000
   12604:	ldr	pc, [ip, #2708]!	; 0xa94

00012608 <tolower@plt>:
   12608:	add	ip, pc, #0, 12
   1260c:	add	ip, ip, #270336	; 0x42000
   12610:	ldr	pc, [ip, #2700]!	; 0xa8c

00012614 <pthread_mutex_init@plt>:
   12614:	add	ip, pc, #0, 12
   12618:	add	ip, ip, #270336	; 0x42000
   1261c:	ldr	pc, [ip, #2692]!	; 0xa84

00012620 <towlower@plt>:
   12620:	add	ip, pc, #0, 12
   12624:	add	ip, ip, #270336	; 0x42000
   12628:	ldr	pc, [ip, #2684]!	; 0xa7c

0001262c <mbsinit@plt>:
   1262c:	add	ip, pc, #0, 12
   12630:	add	ip, ip, #270336	; 0x42000
   12634:	ldr	pc, [ip, #2676]!	; 0xa74

00012638 <signal@plt>:
   12638:	add	ip, pc, #0, 12
   1263c:	add	ip, ip, #270336	; 0x42000
   12640:	ldr	pc, [ip, #2668]!	; 0xa6c

00012644 <time@plt>:
   12644:	add	ip, pc, #0, 12
   12648:	add	ip, ip, #270336	; 0x42000
   1264c:	ldr	pc, [ip, #2660]!	; 0xa64

00012650 <memcmp@plt>:
   12650:	add	ip, pc, #0, 12
   12654:	add	ip, ip, #270336	; 0x42000
   12658:	ldr	pc, [ip, #2652]!	; 0xa5c

0001265c <uname@plt>:
   1265c:	add	ip, pc, #0, 12
   12660:	add	ip, ip, #270336	; 0x42000
   12664:	ldr	pc, [ip, #2644]!	; 0xa54

00012668 <ctime@plt>:
   12668:	add	ip, pc, #0, 12
   1266c:	add	ip, ip, #270336	; 0x42000
   12670:	ldr	pc, [ip, #2636]!	; 0xa4c

00012674 <dcgettext@plt>:
   12674:	add	ip, pc, #0, 12
   12678:	add	ip, ip, #270336	; 0x42000
   1267c:	ldr	pc, [ip, #2628]!	; 0xa44

00012680 <strdup@plt>:
   12680:	add	ip, pc, #0, 12
   12684:	add	ip, ip, #270336	; 0x42000
   12688:	ldr	pc, [ip, #2620]!	; 0xa3c

0001268c <sysconf@plt>:
   1268c:	add	ip, pc, #0, 12
   12690:	add	ip, ip, #270336	; 0x42000
   12694:	ldr	pc, [ip, #2612]!	; 0xa34

00012698 <getrlimit64@plt>:
   12698:	add	ip, pc, #0, 12
   1269c:	add	ip, ip, #270336	; 0x42000
   126a0:	ldr	pc, [ip, #2604]!	; 0xa2c

000126a4 <realloc@plt>:
   126a4:	add	ip, pc, #0, 12
   126a8:	add	ip, ip, #270336	; 0x42000
   126ac:	ldr	pc, [ip, #2596]!	; 0xa24

000126b0 <fgetfilecon@plt>:
   126b0:	add	ip, pc, #0, 12
   126b4:	add	ip, ip, #270336	; 0x42000
   126b8:	ldr	pc, [ip, #2588]!	; 0xa1c

000126bc <localtime_r@plt>:
   126bc:	add	ip, pc, #0, 12
   126c0:	add	ip, ip, #270336	; 0x42000
   126c4:	ldr	pc, [ip, #2580]!	; 0xa14

000126c8 <textdomain@plt>:
   126c8:	add	ip, pc, #0, 12
   126cc:	add	ip, ip, #270336	; 0x42000
   126d0:	ldr	pc, [ip, #2572]!	; 0xa0c

000126d4 <iswcntrl@plt>:
   126d4:	add	ip, pc, #0, 12
   126d8:	add	ip, ip, #270336	; 0x42000
   126dc:	ldr	pc, [ip, #2564]!	; 0xa04

000126e0 <chdir@plt>:
   126e0:	add	ip, pc, #0, 12
   126e4:	add	ip, ip, #270336	; 0x42000
   126e8:	ldr	pc, [ip, #2556]!	; 0x9fc

000126ec <__fxstatat64@plt>:
   126ec:	add	ip, pc, #0, 12
   126f0:	add	ip, ip, #270336	; 0x42000
   126f4:	ldr	pc, [ip, #2548]!	; 0x9f4

000126f8 <iswprint@plt>:
   126f8:	add	ip, pc, #0, 12
   126fc:	add	ip, ip, #270336	; 0x42000
   12700:	ldr	pc, [ip, #2540]!	; 0x9ec

00012704 <tzset@plt>:
   12704:	add	ip, pc, #0, 12
   12708:	add	ip, ip, #270336	; 0x42000
   1270c:	ldr	pc, [ip, #2532]!	; 0x9e4

00012710 <poll@plt>:
   12710:	add	ip, pc, #0, 12
   12714:	add	ip, ip, #270336	; 0x42000
   12718:	ldr	pc, [ip, #2524]!	; 0x9dc

0001271c <__fxstat64@plt>:
   1271c:	add	ip, pc, #0, 12
   12720:	add	ip, ip, #270336	; 0x42000
   12724:	ldr	pc, [ip, #2516]!	; 0x9d4

00012728 <fwrite@plt>:
   12728:	add	ip, pc, #0, 12
   1272c:	add	ip, ip, #270336	; 0x42000
   12730:	ldr	pc, [ip, #2508]!	; 0x9cc

00012734 <strcat@plt>:
   12734:	add	ip, pc, #0, 12
   12738:	add	ip, ip, #270336	; 0x42000
   1273c:	ldr	pc, [ip, #2500]!	; 0x9c4

00012740 <lseek64@plt>:
   12740:	add	ip, pc, #0, 12
   12744:	add	ip, ip, #270336	; 0x42000
   12748:	ldr	pc, [ip, #2492]!	; 0x9bc

0001274c <waitpid@plt>:
   1274c:	add	ip, pc, #0, 12
   12750:	add	ip, ip, #270336	; 0x42000
   12754:	ldr	pc, [ip, #2484]!	; 0x9b4

00012758 <__ctype_get_mb_cur_max@plt>:
   12758:	add	ip, pc, #0, 12
   1275c:	add	ip, ip, #270336	; 0x42000
   12760:	ldr	pc, [ip, #2476]!	; 0x9ac

00012764 <hasmntopt@plt>:
   12764:	add	ip, pc, #0, 12
   12768:	add	ip, ip, #270336	; 0x42000
   1276c:	ldr	pc, [ip, #2468]!	; 0x9a4

00012770 <strcpy@plt>:
   12770:	add	ip, pc, #0, 12
   12774:	add	ip, ip, #270336	; 0x42000
   12778:	ldr	pc, [ip, #2460]!	; 0x99c

0001277c <gettimeofday@plt>:
   1277c:	add	ip, pc, #0, 12
   12780:	add	ip, ip, #270336	; 0x42000
   12784:	ldr	pc, [ip, #2452]!	; 0x994

00012788 <__fpending@plt>:
   12788:	add	ip, pc, #0, 12
   1278c:	add	ip, ip, #270336	; 0x42000
   12790:	ldr	pc, [ip, #2444]!	; 0x98c

00012794 <ferror_unlocked@plt>:
   12794:	add	ip, pc, #0, 12
   12798:	add	ip, ip, #270336	; 0x42000
   1279c:	ldr	pc, [ip, #2436]!	; 0x984

000127a0 <mbrtowc@plt>:
   127a0:	add	ip, pc, #0, 12
   127a4:	add	ip, ip, #270336	; 0x42000
   127a8:	ldr	pc, [ip, #2428]!	; 0x97c

000127ac <strtok_r@plt>:
   127ac:	add	ip, pc, #0, 12
   127b0:	add	ip, ip, #270336	; 0x42000
   127b4:	ldr	pc, [ip, #2420]!	; 0x974

000127b8 <error@plt>:
   127b8:	add	ip, pc, #0, 12
   127bc:	add	ip, ip, #270336	; 0x42000
   127c0:	ldr	pc, [ip, #2412]!	; 0x96c

000127c4 <getmntent@plt>:
   127c4:	add	ip, pc, #0, 12
   127c8:	add	ip, ip, #270336	; 0x42000
   127cc:	ldr	pc, [ip, #2404]!	; 0x964

000127d0 <opendir@plt>:
   127d0:	add	ip, pc, #0, 12
   127d4:	add	ip, ip, #270336	; 0x42000
   127d8:	ldr	pc, [ip, #2396]!	; 0x95c

000127dc <fnmatch@plt>:
   127dc:	add	ip, pc, #0, 12
   127e0:	add	ip, ip, #270336	; 0x42000
   127e4:	ldr	pc, [ip, #2388]!	; 0x954

000127e8 <open64@plt>:
   127e8:	add	ip, pc, #0, 12
   127ec:	add	ip, ip, #270336	; 0x42000
   127f0:	ldr	pc, [ip, #2380]!	; 0x94c

000127f4 <getenv@plt>:
   127f4:	add	ip, pc, #0, 12
   127f8:	add	ip, ip, #270336	; 0x42000
   127fc:	ldr	pc, [ip, #2372]!	; 0x944

00012800 <lgetfilecon@plt>:
   12800:	add	ip, pc, #0, 12
   12804:	add	ip, ip, #270336	; 0x42000
   12808:	ldr	pc, [ip, #2364]!	; 0x93c

0001280c <malloc@plt>:
   1280c:	add	ip, pc, #0, 12
   12810:	add	ip, ip, #270336	; 0x42000
   12814:	ldr	pc, [ip, #2356]!	; 0x934

00012818 <__libc_start_main@plt>:
   12818:	add	ip, pc, #0, 12
   1281c:	add	ip, ip, #270336	; 0x42000
   12820:	ldr	pc, [ip, #2348]!	; 0x92c

00012824 <readlinkat@plt>:
   12824:	add	ip, pc, #0, 12
   12828:	add	ip, ip, #270336	; 0x42000
   1282c:	ldr	pc, [ip, #2340]!	; 0x924

00012830 <strftime@plt>:
   12830:	add	ip, pc, #0, 12
   12834:	add	ip, ip, #270336	; 0x42000
   12838:	ldr	pc, [ip, #2332]!	; 0x91c

0001283c <__freading@plt>:
   1283c:	add	ip, pc, #0, 12
   12840:	add	ip, ip, #270336	; 0x42000
   12844:	ldr	pc, [ip, #2324]!	; 0x914

00012848 <localtime@plt>:
   12848:	add	ip, pc, #0, 12
   1284c:	add	ip, ip, #270336	; 0x42000
   12850:	ldr	pc, [ip, #2316]!	; 0x90c

00012854 <modf@plt>:
   12854:	add	ip, pc, #0, 12
   12858:	add	ip, ip, #270336	; 0x42000
   1285c:	ldr	pc, [ip, #2308]!	; 0x904

00012860 <__gmon_start__@plt>:
   12860:	add	ip, pc, #0, 12
   12864:	add	ip, ip, #270336	; 0x42000
   12868:	ldr	pc, [ip, #2300]!	; 0x8fc

0001286c <__ctype_b_loc@plt>:
   1286c:	add	ip, pc, #0, 12
   12870:	add	ip, ip, #270336	; 0x42000
   12874:	ldr	pc, [ip, #2292]!	; 0x8f4

00012878 <getcwd@plt>:
   12878:	add	ip, pc, #0, 12
   1287c:	add	ip, ip, #270336	; 0x42000
   12880:	ldr	pc, [ip, #2284]!	; 0x8ec

00012884 <exit@plt>:
   12884:	add	ip, pc, #0, 12
   12888:	add	ip, ip, #270336	; 0x42000
   1288c:	ldr	pc, [ip, #2276]!	; 0x8e4

00012890 <feof@plt>:
   12890:	add	ip, pc, #0, 12
   12894:	add	ip, ip, #270336	; 0x42000
   12898:	ldr	pc, [ip, #2268]!	; 0x8dc

0001289c <getfilecon@plt>:
   1289c:	add	ip, pc, #0, 12
   128a0:	add	ip, ip, #270336	; 0x42000
   128a4:	ldr	pc, [ip, #2260]!	; 0x8d4

000128a8 <bcmp@plt>:
   128a8:	add	ip, pc, #0, 12
   128ac:	add	ip, ip, #270336	; 0x42000
   128b0:	ldr	pc, [ip, #2252]!	; 0x8cc

000128b4 <strtoul@plt>:
   128b4:	add	ip, pc, #0, 12
   128b8:	add	ip, ip, #270336	; 0x42000
   128bc:	ldr	pc, [ip, #2244]!	; 0x8c4

000128c0 <strlen@plt>:
   128c0:	add	ip, pc, #0, 12
   128c4:	add	ip, ip, #270336	; 0x42000
   128c8:	ldr	pc, [ip, #2236]!	; 0x8bc

000128cc <strchr@plt>:
   128cc:	add	ip, pc, #0, 12
   128d0:	add	ip, ip, #270336	; 0x42000
   128d4:	ldr	pc, [ip, #2228]!	; 0x8b4

000128d8 <setenv@plt>:
   128d8:	add	ip, pc, #0, 12
   128dc:	add	ip, ip, #270336	; 0x42000
   128e0:	ldr	pc, [ip, #2220]!	; 0x8ac

000128e4 <openat64@plt>:
   128e4:	add	ip, pc, #0, 12
   128e8:	add	ip, ip, #270336	; 0x42000
   128ec:	ldr	pc, [ip, #2212]!	; 0x8a4

000128f0 <memrchr@plt>:
   128f0:	add	ip, pc, #0, 12
   128f4:	add	ip, ip, #270336	; 0x42000
   128f8:	ldr	pc, [ip, #2204]!	; 0x89c

000128fc <fprintf@plt>:
   128fc:	add	ip, pc, #0, 12
   12900:	add	ip, ip, #270336	; 0x42000
   12904:	ldr	pc, [ip, #2196]!	; 0x894

00012908 <__errno_location@plt>:
   12908:	add	ip, pc, #0, 12
   1290c:	add	ip, ip, #270336	; 0x42000
   12910:	ldr	pc, [ip, #2188]!	; 0x88c

00012914 <iswalnum@plt>:
   12914:	add	ip, pc, #0, 12
   12918:	add	ip, ip, #270336	; 0x42000
   1291c:	ldr	pc, [ip, #2180]!	; 0x884

00012920 <snprintf@plt>:
   12920:	add	ip, pc, #0, 12
   12924:	add	ip, ip, #270336	; 0x42000
   12928:	ldr	pc, [ip, #2172]!	; 0x87c

0001292c <__cxa_atexit@plt>:
   1292c:	add	ip, pc, #0, 12
   12930:	add	ip, ip, #270336	; 0x42000
   12934:	ldr	pc, [ip, #2164]!	; 0x874

00012938 <memset@plt>:
   12938:	add	ip, pc, #0, 12
   1293c:	add	ip, ip, #270336	; 0x42000
   12940:	ldr	pc, [ip, #2156]!	; 0x86c

00012944 <bsearch@plt>:
   12944:	add	ip, pc, #0, 12
   12948:	add	ip, ip, #270336	; 0x42000
   1294c:	ldr	pc, [ip, #2148]!	; 0x864

00012950 <putchar@plt>:
   12950:	add	ip, pc, #0, 12
   12954:	add	ip, ip, #270336	; 0x42000
   12958:	ldr	pc, [ip, #2140]!	; 0x85c

0001295c <strncpy@plt>:
   1295c:	add	ip, pc, #0, 12
   12960:	add	ip, ip, #270336	; 0x42000
   12964:	ldr	pc, [ip, #2132]!	; 0x854

00012968 <pthread_mutexattr_gettype@plt>:
   12968:	add	ip, pc, #0, 12
   1296c:	add	ip, ip, #270336	; 0x42000
   12970:	ldr	pc, [ip, #2124]!	; 0x84c

00012974 <btowc@plt>:
   12974:	add	ip, pc, #0, 12
   12978:	add	ip, ip, #270336	; 0x42000
   1297c:	ldr	pc, [ip, #2116]!	; 0x844

00012980 <strtod@plt>:
   12980:	add	ip, pc, #0, 12
   12984:	add	ip, ip, #270336	; 0x42000
   12988:	ldr	pc, [ip, #2108]!	; 0x83c

0001298c <fileno@plt>:
   1298c:	add	ip, pc, #0, 12
   12990:	add	ip, ip, #270336	; 0x42000
   12994:	ldr	pc, [ip, #2100]!	; 0x834

00012998 <difftime@plt>:
   12998:	add	ip, pc, #0, 12
   1299c:	add	ip, ip, #270336	; 0x42000
   129a0:	ldr	pc, [ip, #2092]!	; 0x82c

000129a4 <strtoumax@plt>:
   129a4:	add	ip, pc, #0, 12
   129a8:	add	ip, ip, #270336	; 0x42000
   129ac:	ldr	pc, [ip, #2084]!	; 0x824

000129b0 <memchr@plt>:
   129b0:	add	ip, pc, #0, 12
   129b4:	add	ip, ip, #270336	; 0x42000
   129b8:	ldr	pc, [ip, #2076]!	; 0x81c

000129bc <setfilecon@plt>:
   129bc:	add	ip, pc, #0, 12
   129c0:	add	ip, ip, #270336	; 0x42000
   129c4:	ldr	pc, [ip, #2068]!	; 0x814

000129c8 <access@plt>:
   129c8:	add	ip, pc, #0, 12
   129cc:	add	ip, ip, #270336	; 0x42000
   129d0:	ldr	pc, [ip, #2060]!	; 0x80c

000129d4 <fclose@plt>:
   129d4:	add	ip, pc, #0, 12
   129d8:	add	ip, ip, #270336	; 0x42000
   129dc:	ldr	pc, [ip, #2052]!	; 0x804

000129e0 <strnlen@plt>:
   129e0:	add	ip, pc, #0, 12
   129e4:	add	ip, ip, #270336	; 0x42000
   129e8:	ldr	pc, [ip, #2044]!	; 0x7fc

000129ec <fseeko64@plt>:
   129ec:	add	ip, pc, #0, 12
   129f0:	add	ip, ip, #270336	; 0x42000
   129f4:	ldr	pc, [ip, #2036]!	; 0x7f4

000129f8 <endmntent@plt>:
   129f8:	add	ip, pc, #0, 12
   129fc:	add	ip, ip, #270336	; 0x42000
   12a00:	ldr	pc, [ip, #2028]!	; 0x7ec

00012a04 <fcntl64@plt>:
   12a04:	add	ip, pc, #0, 12
   12a08:	add	ip, ip, #270336	; 0x42000
   12a0c:	ldr	pc, [ip, #2020]!	; 0x7e4

00012a10 <rpmatch@plt>:
   12a10:	add	ip, pc, #0, 12
   12a14:	add	ip, ip, #270336	; 0x42000
   12a18:	ldr	pc, [ip, #2012]!	; 0x7dc

00012a1c <setlocale@plt>:
   12a1c:	add	ip, pc, #0, 12
   12a20:	add	ip, ip, #270336	; 0x42000
   12a24:	ldr	pc, [ip, #2004]!	; 0x7d4

00012a28 <fork@plt>:
   12a28:	add	ip, pc, #0, 12
   12a2c:	add	ip, ip, #270336	; 0x42000
   12a30:	ldr	pc, [ip, #1996]!	; 0x7cc

00012a34 <endpwent@plt>:
   12a34:	add	ip, pc, #0, 12
   12a38:	add	ip, ip, #270336	; 0x42000
   12a3c:	ldr	pc, [ip, #1988]!	; 0x7c4

00012a40 <toupper@plt>:
   12a40:	add	ip, pc, #0, 12
   12a44:	add	ip, ip, #270336	; 0x42000
   12a48:	ldr	pc, [ip, #1980]!	; 0x7bc

00012a4c <strrchr@plt>:
   12a4c:	add	ip, pc, #0, 12
   12a50:	add	ip, ip, #270336	; 0x42000
   12a54:	ldr	pc, [ip, #1972]!	; 0x7b4

00012a58 <vfprintf@plt>:
   12a58:	add	ip, pc, #0, 12
   12a5c:	add	ip, ip, #270336	; 0x42000
   12a60:	ldr	pc, [ip, #1964]!	; 0x7ac

00012a64 <nl_langinfo@plt>:
   12a64:	add	ip, pc, #0, 12
   12a68:	add	ip, ip, #270336	; 0x42000
   12a6c:	ldr	pc, [ip, #1956]!	; 0x7a4

00012a70 <fputc@plt>:
   12a70:	add	ip, pc, #0, 12
   12a74:	add	ip, ip, #270336	; 0x42000
   12a78:	ldr	pc, [ip, #1948]!	; 0x79c

00012a7c <sscanf@plt>:
   12a7c:	add	ip, pc, #0, 12
   12a80:	add	ip, ip, #270336	; 0x42000
   12a84:	ldr	pc, [ip, #1940]!	; 0x794

00012a88 <localeconv@plt>:
   12a88:	add	ip, pc, #0, 12
   12a8c:	add	ip, ip, #270336	; 0x42000
   12a90:	ldr	pc, [ip, #1932]!	; 0x78c

00012a94 <sprintf@plt>:
   12a94:	add	ip, pc, #0, 12
   12a98:	add	ip, ip, #270336	; 0x42000
   12a9c:	ldr	pc, [ip, #1924]!	; 0x784

00012aa0 <readdir64@plt>:
   12aa0:	add	ip, pc, #0, 12
   12aa4:	add	ip, ip, #270336	; 0x42000
   12aa8:	ldr	pc, [ip, #1916]!	; 0x77c

00012aac <fdopendir@plt>:
   12aac:	add	ip, pc, #0, 12
   12ab0:	add	ip, ip, #270336	; 0x42000
   12ab4:	ldr	pc, [ip, #1908]!	; 0x774

00012ab8 <timegm@plt>:
   12ab8:	add	ip, pc, #0, 12
   12abc:	add	ip, ip, #270336	; 0x42000
   12ac0:	ldr	pc, [ip, #1900]!	; 0x76c

00012ac4 <putc@plt>:
   12ac4:	add	ip, pc, #0, 12
   12ac8:	add	ip, ip, #270336	; 0x42000
   12acc:	ldr	pc, [ip, #1892]!	; 0x764

00012ad0 <dirfd@plt>:
   12ad0:	add	ip, pc, #0, 12
   12ad4:	add	ip, ip, #270336	; 0x42000
   12ad8:	ldr	pc, [ip, #1884]!	; 0x75c

00012adc <fchdir@plt>:
   12adc:	add	ip, pc, #0, 12
   12ae0:	add	ip, ip, #270336	; 0x42000
   12ae4:	ldr	pc, [ip, #1876]!	; 0x754

00012ae8 <fopen64@plt>:
   12ae8:	add	ip, pc, #0, 12
   12aec:	add	ip, ip, #270336	; 0x42000
   12af0:	ldr	pc, [ip, #1868]!	; 0x74c

00012af4 <qsort@plt>:
   12af4:	add	ip, pc, #0, 12
   12af8:	add	ip, ip, #270336	; 0x42000
   12afc:	ldr	pc, [ip, #1860]!	; 0x744

00012b00 <freecon@plt>:
   12b00:	add	ip, pc, #0, 12
   12b04:	add	ip, ip, #270336	; 0x42000
   12b08:	ldr	pc, [ip, #1852]!	; 0x73c

00012b0c <strpbrk@plt>:
   12b0c:	add	ip, pc, #0, 12
   12b10:	add	ip, ip, #270336	; 0x42000
   12b14:	ldr	pc, [ip, #1844]!	; 0x734

00012b18 <setmntent@plt>:
   12b18:	add	ip, pc, #0, 12
   12b1c:	add	ip, ip, #270336	; 0x42000
   12b20:	ldr	pc, [ip, #1836]!	; 0x72c

00012b24 <bindtextdomain@plt>:
   12b24:	add	ip, pc, #0, 12
   12b28:	add	ip, ip, #270336	; 0x42000
   12b2c:	ldr	pc, [ip, #1828]!	; 0x724

00012b30 <atof@plt>:
   12b30:	add	ip, pc, #0, 12
   12b34:	add	ip, ip, #270336	; 0x42000
   12b38:	ldr	pc, [ip, #1820]!	; 0x71c

00012b3c <getline@plt>:
   12b3c:	add	ip, pc, #0, 12
   12b40:	add	ip, ip, #270336	; 0x42000
   12b44:	ldr	pc, [ip, #1812]!	; 0x714

00012b48 <getdelim@plt>:
   12b48:	add	ip, pc, #0, 12
   12b4c:	add	ip, ip, #270336	; 0x42000
   12b50:	ldr	pc, [ip, #1804]!	; 0x70c

00012b54 <__xstat64@plt>:
   12b54:	add	ip, pc, #0, 12
   12b58:	add	ip, ip, #270336	; 0x42000
   12b5c:	ldr	pc, [ip, #1796]!	; 0x704

00012b60 <isatty@plt>:
   12b60:	add	ip, pc, #0, 12
   12b64:	add	ip, ip, #270336	; 0x42000
   12b68:	ldr	pc, [ip, #1788]!	; 0x6fc

00012b6c <unsetenv@plt>:
   12b6c:	add	ip, pc, #0, 12
   12b70:	add	ip, ip, #270336	; 0x42000
   12b74:	ldr	pc, [ip, #1780]!	; 0x6f4

00012b78 <towupper@plt>:
   12b78:	add	ip, pc, #0, 12
   12b7c:	add	ip, ip, #270336	; 0x42000
   12b80:	ldr	pc, [ip, #1772]!	; 0x6ec

00012b84 <fputs@plt>:
   12b84:	add	ip, pc, #0, 12
   12b88:	add	ip, ip, #270336	; 0x42000
   12b8c:	ldr	pc, [ip, #1764]!	; 0x6e4

00012b90 <strncmp@plt>:
   12b90:	add	ip, pc, #0, 12
   12b94:	add	ip, ip, #270336	; 0x42000
   12b98:	ldr	pc, [ip, #1756]!	; 0x6dc

00012b9c <abort@plt>:
   12b9c:	add	ip, pc, #0, 12
   12ba0:	add	ip, ip, #270336	; 0x42000
   12ba4:	ldr	pc, [ip, #1748]!	; 0x6d4

00012ba8 <close@plt>:
   12ba8:	add	ip, pc, #0, 12
   12bac:	add	ip, ip, #270336	; 0x42000
   12bb0:	ldr	pc, [ip, #1740]!	; 0x6cc

00012bb4 <__lxstat64@plt>:
   12bb4:	add	ip, pc, #0, 12
   12bb8:	add	ip, ip, #270336	; 0x42000
   12bbc:	ldr	pc, [ip, #1732]!	; 0x6c4

00012bc0 <closedir@plt>:
   12bc0:	add	ip, pc, #0, 12
   12bc4:	add	ip, ip, #270336	; 0x42000
   12bc8:	ldr	pc, [ip, #1724]!	; 0x6bc

00012bcc <getgrgid@plt>:
   12bcc:	add	ip, pc, #0, 12
   12bd0:	add	ip, ip, #270336	; 0x42000
   12bd4:	ldr	pc, [ip, #1716]!	; 0x6b4

00012bd8 <getgrnam@plt>:
   12bd8:	add	ip, pc, #0, 12
   12bdc:	add	ip, ip, #270336	; 0x42000
   12be0:	ldr	pc, [ip, #1708]!	; 0x6ac

00012be4 <strspn@plt>:
   12be4:	add	ip, pc, #0, 12
   12be8:	add	ip, ip, #270336	; 0x42000
   12bec:	ldr	pc, [ip, #1700]!	; 0x6a4

00012bf0 <__assert_fail@plt>:
   12bf0:	add	ip, pc, #0, 12
   12bf4:	add	ip, ip, #270336	; 0x42000
   12bf8:	ldr	pc, [ip, #1692]!	; 0x69c

Disassembly of section .text:

00012c00 <.text>:
   12c00:	mov	fp, #0
   12c04:	mov	lr, #0
   12c08:	pop	{r1}		; (ldr r1, [sp], #4)
   12c0c:	mov	r2, sp
   12c10:	push	{r2}		; (str r2, [sp, #-4]!)
   12c14:	push	{r0}		; (str r0, [sp, #-4]!)
   12c18:	ldr	ip, [pc, #16]	; 12c30 <__assert_fail@plt+0x40>
   12c1c:	push	{ip}		; (str ip, [sp, #-4]!)
   12c20:	ldr	r0, [pc, #12]	; 12c34 <__assert_fail@plt+0x44>
   12c24:	ldr	r3, [pc, #12]	; 12c38 <__assert_fail@plt+0x48>
   12c28:	bl	12818 <__libc_start_main@plt>
   12c2c:	bl	12b9c <abort@plt>
   12c30:	andeq	lr, r3, r8, ror #19
   12c34:	strdeq	r2, [r1], -r0
   12c38:	andeq	lr, r3, r8, lsl #19
   12c3c:	ldr	r3, [pc, #20]	; 12c58 <__assert_fail@plt+0x68>
   12c40:	ldr	r2, [pc, #20]	; 12c5c <__assert_fail@plt+0x6c>
   12c44:	add	r3, pc, r3
   12c48:	ldr	r2, [r3, r2]
   12c4c:	cmp	r2, #0
   12c50:	bxeq	lr
   12c54:	b	12860 <__gmon_start__@plt>
   12c58:			; <UNDEFINED> instruction: 0x000423b4
   12c5c:	muleq	r0, r8, r2
   12c60:	ldr	r0, [pc, #24]	; 12c80 <__assert_fail@plt+0x90>
   12c64:	ldr	r3, [pc, #24]	; 12c84 <__assert_fail@plt+0x94>
   12c68:	cmp	r3, r0
   12c6c:	bxeq	lr
   12c70:	ldr	r3, [pc, #16]	; 12c88 <__assert_fail@plt+0x98>
   12c74:	cmp	r3, #0
   12c78:	bxeq	lr
   12c7c:	bx	r3
   12c80:	andeq	r5, r5, r4, asr r5
   12c84:	andeq	r5, r5, r4, asr r5
   12c88:	andeq	r0, r0, r0
   12c8c:	ldr	r0, [pc, #36]	; 12cb8 <__assert_fail@plt+0xc8>
   12c90:	ldr	r1, [pc, #36]	; 12cbc <__assert_fail@plt+0xcc>
   12c94:	sub	r1, r1, r0
   12c98:	asr	r1, r1, #2
   12c9c:	add	r1, r1, r1, lsr #31
   12ca0:	asrs	r1, r1, #1
   12ca4:	bxeq	lr
   12ca8:	ldr	r3, [pc, #16]	; 12cc0 <__assert_fail@plt+0xd0>
   12cac:	cmp	r3, #0
   12cb0:	bxeq	lr
   12cb4:	bx	r3
   12cb8:	andeq	r5, r5, r4, asr r5
   12cbc:	andeq	r5, r5, r4, asr r5
   12cc0:	andeq	r0, r0, r0
   12cc4:	push	{r4, lr}
   12cc8:	ldr	r4, [pc, #24]	; 12ce8 <__assert_fail@plt+0xf8>
   12ccc:	ldrb	r3, [r4]
   12cd0:	cmp	r3, #0
   12cd4:	popne	{r4, pc}
   12cd8:	bl	12c60 <__assert_fail@plt+0x70>
   12cdc:	mov	r3, #1
   12ce0:	strb	r3, [r4]
   12ce4:	pop	{r4, pc}
   12ce8:	andeq	r5, r5, r8, ror r5
   12cec:	b	12c8c <__assert_fail@plt+0x9c>
   12cf0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12cf4:	add	fp, sp, #24
   12cf8:	mov	r4, r1
   12cfc:	mov	r5, r0
   12d00:	ldr	r0, [r1]
   12d04:	cmp	r0, #0
   12d08:	movweq	r0, #60012	; 0xea6c
   12d0c:	movteq	r0, #3
   12d10:	bl	28b38 <__assert_fail@plt+0x15f48>
   12d14:	bl	18570 <__assert_fail@plt+0x5980>
   12d18:	movw	r9, #24160	; 0x5e60
   12d1c:	movt	r9, #5
   12d20:	mov	r0, #0
   12d24:	strb	r0, [r9, #32]
   12d28:	str	r0, [r9, #28]
   12d2c:	strb	r0, [r9, #40]	; 0x28
   12d30:	mvn	r0, #99	; 0x63
   12d34:	str	r0, [r9, #16]
   12d38:	bl	204a4 <__assert_fail@plt+0xd8b4>
   12d3c:	cmp	r0, #0
   12d40:	beq	12d48 <__assert_fail@plt+0x158>
   12d44:	bl	20168 <__assert_fail@plt+0xd578>
   12d48:	movw	r0, #6726	; 0x1a46
   12d4c:	movt	r0, #4
   12d50:	bl	194d8 <__assert_fail@plt+0x68e8>
   12d54:	str	r0, [r9, #36]	; 0x24
   12d58:	cmp	r0, #0
   12d5c:	beq	12e48 <__assert_fail@plt+0x258>
   12d60:	movw	r6, #24204	; 0x5e8c
   12d64:	movt	r6, #5
   12d68:	mov	r0, r6
   12d6c:	bl	19090 <__assert_fail@plt+0x64a0>
   12d70:	movw	r1, #2407	; 0x967
   12d74:	movt	r1, #4
   12d78:	mov	r0, #6
   12d7c:	bl	12a1c <setlocale@plt>
   12d80:	movw	r7, #12725	; 0x31b5
   12d84:	movt	r7, #4
   12d88:	movw	r1, #60061	; 0xea9d
   12d8c:	movt	r1, #3
   12d90:	mov	r0, r7
   12d94:	bl	12b24 <bindtextdomain@plt>
   12d98:	mov	r0, r7
   12d9c:	bl	126c8 <textdomain@plt>
   12da0:	movw	r0, #7648	; 0x1de0
   12da4:	movt	r0, #2
   12da8:	bl	3e9ec <__assert_fail@plt+0x2bdfc>
   12dac:	cmp	r0, #0
   12db0:	bne	12e5c <__assert_fail@plt+0x26c>
   12db4:	mov	r0, r5
   12db8:	mov	r1, r4
   12dbc:	bl	18cb4 <__assert_fail@plt+0x60c4>
   12dc0:	mov	r7, r0
   12dc4:	ldr	r0, [r6, #44]	; 0x2c
   12dc8:	tst	r0, #2
   12dcc:	movwne	r1, #35332	; 0x8a04
   12dd0:	movtne	r1, #1
   12dd4:	strne	r1, [r6, #52]	; 0x34
   12dd8:	tst	r0, #128	; 0x80
   12ddc:	bne	12e1c <__assert_fail@plt+0x22c>
   12de0:	mov	r0, r5
   12de4:	mov	r1, r4
   12de8:	mov	r2, r7
   12dec:	bl	1632c <__assert_fail@plt+0x373c>
   12df0:	mov	r6, r0
   12df4:	sub	r0, r5, r7
   12df8:	add	r1, r4, r7, lsl #2
   12dfc:	bl	12e88 <__assert_fail@plt+0x298>
   12e00:	cmp	r0, #0
   12e04:	beq	12e14 <__assert_fail@plt+0x224>
   12e08:	mov	r0, r6
   12e0c:	bl	15528 <__assert_fail@plt+0x2938>
   12e10:	bl	18610 <__assert_fail@plt+0x5a20>
   12e14:	ldr	r0, [r9, #28]
   12e18:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12e1c:	movw	r0, #21864	; 0x5568
   12e20:	movt	r0, #5
   12e24:	ldr	r8, [r0]
   12e28:	add	r0, r6, #28
   12e2c:	bl	12668 <ctime@plt>
   12e30:	mov	r2, r0
   12e34:	movw	r1, #60120	; 0xead8
   12e38:	movt	r1, #3
   12e3c:	mov	r0, r8
   12e40:	bl	128fc <fprintf@plt>
   12e44:	b	12de0 <__assert_fail@plt+0x1f0>
   12e48:	bl	12908 <__errno_location@plt>
   12e4c:	ldr	r4, [r0]
   12e50:	movw	r1, #60017	; 0xea71
   12e54:	movt	r1, #3
   12e58:	b	12e6c <__assert_fail@plt+0x27c>
   12e5c:	bl	12908 <__errno_location@plt>
   12e60:	ldr	r4, [r0]
   12e64:	movw	r1, #60085	; 0xeab5
   12e68:	movt	r1, #3
   12e6c:	mov	r0, #0
   12e70:	mov	r2, #5
   12e74:	bl	12674 <dcgettext@plt>
   12e78:	mov	r2, r0
   12e7c:	mov	r0, #1
   12e80:	mov	r1, r4
   12e84:	bl	127b8 <error@plt>
   12e88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e8c:	add	fp, sp, #28
   12e90:	sub	sp, sp, #228	; 0xe4
   12e94:	mov	r4, r1
   12e98:	cmp	r0, #1
   12e9c:	blt	12eb4 <__assert_fail@plt+0x2c4>
   12ea0:	ldr	r0, [r4]
   12ea4:	mov	r1, #1
   12ea8:	bl	18c28 <__assert_fail@plt+0x6038>
   12eac:	eor	r0, r0, #1
   12eb0:	b	12eb8 <__assert_fail@plt+0x2c8>
   12eb4:	mov	r0, #0
   12eb8:	movw	sl, #24204	; 0x5e8c
   12ebc:	movt	sl, #5
   12ec0:	ldr	r5, [sl, #76]	; 0x4c
   12ec4:	cmp	r5, #0
   12ec8:	beq	12fac <__assert_fail@plt+0x3bc>
   12ecc:	cmp	r0, #0
   12ed0:	bne	1320c <__assert_fail@plt+0x61c>
   12ed4:	movw	r1, #2770	; 0xad2
   12ed8:	movt	r1, #4
   12edc:	mov	r0, r5
   12ee0:	bl	124f4 <strcmp@plt>
   12ee4:	cmp	r0, #0
   12ee8:	beq	12fdc <__assert_fail@plt+0x3ec>
   12eec:	mov	r0, #0
   12ef0:	mov	r1, r5
   12ef4:	bl	1939c <__assert_fail@plt+0x67ac>
   12ef8:	str	r0, [sp, #12]
   12efc:	ldr	r0, [sl, #76]	; 0x4c
   12f00:	movw	r1, #12892	; 0x325c
   12f04:	movt	r1, #4
   12f08:	bl	12ae8 <fopen64@plt>
   12f0c:	cmp	r0, #0
   12f10:	beq	132b0 <__assert_fail@plt+0x6c0>
   12f14:	mov	r5, r0
   12f18:	bl	1298c <fileno@plt>
   12f1c:	cmn	r0, #1
   12f20:	ble	132e0 <__assert_fail@plt+0x6f0>
   12f24:	mov	r4, r0
   12f28:	ldrb	r0, [sl, #80]	; 0x50
   12f2c:	cmp	r0, #0
   12f30:	beq	12f9c <__assert_fail@plt+0x3ac>
   12f34:	add	r1, sp, #120	; 0x78
   12f38:	mov	r0, r4
   12f3c:	bl	3ea14 <__assert_fail@plt+0x2be24>
   12f40:	cmp	r0, #0
   12f44:	bne	12f9c <__assert_fail@plt+0x3ac>
   12f48:	add	r1, sp, #16
   12f4c:	mov	r0, #0
   12f50:	bl	3ea14 <__assert_fail@plt+0x2be24>
   12f54:	cmp	r0, #0
   12f58:	bne	12f9c <__assert_fail@plt+0x3ac>
   12f5c:	ldr	r0, [sp, #112]	; 0x70
   12f60:	ldr	r1, [sp, #116]	; 0x74
   12f64:	ldr	r2, [sp, #216]	; 0xd8
   12f68:	ldr	r3, [sp, #220]	; 0xdc
   12f6c:	eor	r1, r3, r1
   12f70:	eor	r0, r2, r0
   12f74:	orrs	r0, r0, r1
   12f78:	bne	12f9c <__assert_fail@plt+0x3ac>
   12f7c:	ldr	r0, [sp, #16]
   12f80:	ldr	r1, [sp, #20]
   12f84:	ldr	r2, [sp, #120]	; 0x78
   12f88:	ldr	r3, [sp, #124]	; 0x7c
   12f8c:	eor	r1, r3, r1
   12f90:	eor	r0, r2, r0
   12f94:	orrs	r0, r0, r1
   12f98:	beq	1332c <__assert_fail@plt+0x73c>
   12f9c:	mov	r0, r4
   12fa0:	mov	r1, #1
   12fa4:	bl	21d54 <__assert_fail@plt+0xf164>
   12fa8:	b	13018 <__assert_fail@plt+0x428>
   12fac:	cmp	r0, #0
   12fb0:	beq	1319c <__assert_fail@plt+0x5ac>
   12fb4:	mov	r0, r4
   12fb8:	bl	21a08 <__assert_fail@plt+0xee18>
   12fbc:	mov	r6, r0
   12fc0:	mov	r0, #0
   12fc4:	str	r0, [sp, #12]
   12fc8:	mov	r0, #0
   12fcc:	str	r0, [sp, #8]
   12fd0:	cmp	r6, #0
   12fd4:	bne	13030 <__assert_fail@plt+0x440>
   12fd8:	b	13208 <__assert_fail@plt+0x618>
   12fdc:	ldrb	r0, [sl, #80]	; 0x50
   12fe0:	cmp	r0, #0
   12fe4:	bne	13300 <__assert_fail@plt+0x710>
   12fe8:	movw	r1, #60291	; 0xeb83
   12fec:	movt	r1, #3
   12ff0:	mov	r0, #0
   12ff4:	mov	r2, #5
   12ff8:	bl	12674 <dcgettext@plt>
   12ffc:	mov	r1, r0
   13000:	mov	r0, #0
   13004:	bl	1939c <__assert_fail@plt+0x67ac>
   13008:	str	r0, [sp, #12]
   1300c:	movw	r0, #21872	; 0x5570
   13010:	movt	r0, #5
   13014:	ldr	r5, [r0]
   13018:	str	r5, [sp, #8]
   1301c:	mov	r0, r5
   13020:	bl	21a38 <__assert_fail@plt+0xee48>
   13024:	mov	r6, r0
   13028:	cmp	r6, #0
   1302c:	beq	13208 <__assert_fail@plt+0x618>
   13030:	add	r1, sp, #120	; 0x78
   13034:	mov	r0, r6
   13038:	bl	21a70 <__assert_fail@plt+0xee80>
   1303c:	cmp	r0, #0
   13040:	beq	1313c <__assert_fail@plt+0x54c>
   13044:	mov	r9, r0
   13048:	mov	r4, #1
   1304c:	movw	r5, #24160	; 0x5e60
   13050:	movt	r5, #5
   13054:	add	r8, sp, #120	; 0x78
   13058:	mov	r7, #1
   1305c:	b	13094 <__assert_fail@plt+0x4a4>
   13060:	mov	r0, r9
   13064:	bl	128c0 <strlen@plt>
   13068:	str	r0, [r5, #20]
   1306c:	mov	r0, r9
   13070:	bl	13370 <__assert_fail@plt+0x780>
   13074:	cmp	r0, #0
   13078:	beq	131b4 <__assert_fail@plt+0x5c4>
   1307c:	mov	r0, r6
   13080:	mov	r1, r8
   13084:	bl	21a70 <__assert_fail@plt+0xee80>
   13088:	mov	r9, r0
   1308c:	cmp	r0, #0
   13090:	beq	13140 <__assert_fail@plt+0x550>
   13094:	ldr	r0, [sl, #76]	; 0x4c
   13098:	ldrb	r1, [r9]
   1309c:	cmp	r1, #0
   130a0:	beq	130c4 <__assert_fail@plt+0x4d4>
   130a4:	cmp	r0, #0
   130a8:	bne	13060 <__assert_fail@plt+0x470>
   130ac:	mov	r0, r9
   130b0:	mov	r1, #1
   130b4:	bl	18c28 <__assert_fail@plt+0x6038>
   130b8:	cmp	r0, #0
   130bc:	beq	13060 <__assert_fail@plt+0x470>
   130c0:	b	131b8 <__assert_fail@plt+0x5c8>
   130c4:	cmp	r0, #0
   130c8:	beq	1310c <__assert_fail@plt+0x51c>
   130cc:	mov	r0, r6
   130d0:	bl	21b28 <__assert_fail@plt+0xef38>
   130d4:	mov	r7, r0
   130d8:	mov	r0, #0
   130dc:	movw	r1, #60562	; 0xec92
   130e0:	movt	r1, #3
   130e4:	mov	r2, #5
   130e8:	bl	12674 <dcgettext@plt>
   130ec:	str	r7, [sp]
   130f0:	str	r0, [sp, #4]
   130f4:	mov	r0, #0
   130f8:	mov	r1, #0
   130fc:	movw	r2, #60551	; 0xec87
   13100:	movt	r2, #3
   13104:	ldr	r3, [sp, #12]
   13108:	b	1312c <__assert_fail@plt+0x53c>
   1310c:	mov	r0, #0
   13110:	mov	r1, r9
   13114:	bl	1939c <__assert_fail@plt+0x67ac>
   13118:	mov	r3, r0
   1311c:	mov	r0, #0
   13120:	mov	r1, #2
   13124:	movw	r2, #19695	; 0x4cef
   13128:	movt	r2, #4
   1312c:	bl	127b8 <error@plt>
   13130:	str	r4, [r5, #28]
   13134:	mov	r7, #0
   13138:	b	1307c <__assert_fail@plt+0x48c>
   1313c:	mov	r7, #1
   13140:	ldr	r0, [sp, #120]	; 0x78
   13144:	cmp	r0, #2
   13148:	beq	131b8 <__assert_fail@plt+0x5c8>
   1314c:	cmp	r0, #4
   13150:	bne	13200 <__assert_fail@plt+0x610>
   13154:	bl	12908 <__errno_location@plt>
   13158:	ldr	r4, [r0]
   1315c:	mov	r7, #0
   13160:	movw	r1, #60496	; 0xec50
   13164:	movt	r1, #3
   13168:	mov	r0, #0
   1316c:	mov	r2, #5
   13170:	bl	12674 <dcgettext@plt>
   13174:	mov	r2, r0
   13178:	mov	r0, #0
   1317c:	mov	r1, r4
   13180:	ldr	r3, [sp, #12]
   13184:	bl	127b8 <error@plt>
   13188:	movw	r0, #24160	; 0x5e60
   1318c:	movt	r0, #5
   13190:	mov	r1, #1
   13194:	str	r1, [r0, #28]
   13198:	b	131b8 <__assert_fail@plt+0x5c8>
   1319c:	mov	r0, #46	; 0x2e
   131a0:	strh	r0, [sp, #120]	; 0x78
   131a4:	add	r0, sp, #120	; 0x78
   131a8:	bl	13370 <__assert_fail@plt+0x780>
   131ac:	mov	r7, r0
   131b0:	b	131f4 <__assert_fail@plt+0x604>
   131b4:	mov	r7, #0
   131b8:	mov	r0, r6
   131bc:	bl	21b4c <__assert_fail@plt+0xef5c>
   131c0:	tst	r7, #1
   131c4:	ldrne	r0, [sl, #76]	; 0x4c
   131c8:	cmpne	r0, #0
   131cc:	beq	131f4 <__assert_fail@plt+0x604>
   131d0:	ldr	r4, [sp, #8]
   131d4:	mov	r0, r4
   131d8:	bl	125b4 <ferror@plt>
   131dc:	cmp	r0, #0
   131e0:	bne	13288 <__assert_fail@plt+0x698>
   131e4:	mov	r0, r4
   131e8:	bl	129d4 <fclose@plt>
   131ec:	cmp	r0, #0
   131f0:	bne	13288 <__assert_fail@plt+0x698>
   131f4:	and	r0, r7, #1
   131f8:	sub	sp, fp, #28
   131fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13200:	cmp	r0, #3
   13204:	bne	13268 <__assert_fail@plt+0x678>
   13208:	bl	2b9c4 <__assert_fail@plt+0x18dd4>
   1320c:	movw	r1, #60139	; 0xeaeb
   13210:	movt	r1, #3
   13214:	mov	r0, #0
   13218:	mov	r2, #5
   1321c:	bl	12674 <dcgettext@plt>
   13220:	mov	r5, r0
   13224:	ldr	r1, [r4]
   13228:	mov	r0, #0
   1322c:	bl	1939c <__assert_fail@plt+0x67ac>
   13230:	mov	r3, r0
   13234:	mov	r0, #0
   13238:	mov	r1, #0
   1323c:	mov	r2, r5
   13240:	bl	127b8 <error@plt>
   13244:	movw	r1, #60156	; 0xeafc
   13248:	movt	r1, #3
   1324c:	mov	r0, #0
   13250:	mov	r2, #5
   13254:	bl	12674 <dcgettext@plt>
   13258:	mov	r3, r0
   1325c:	movw	r2, #19695	; 0x4cef
   13260:	movt	r2, #4
   13264:	b	13320 <__assert_fail@plt+0x730>
   13268:	movw	r0, #60511	; 0xec5f
   1326c:	movt	r0, #3
   13270:	movw	r1, #60335	; 0xebaf
   13274:	movt	r1, #3
   13278:	movw	r3, #60345	; 0xebb9
   1327c:	movt	r3, #3
   13280:	movw	r2, #675	; 0x2a3
   13284:	bl	12bf0 <__assert_fail@plt>
   13288:	movw	r1, #60592	; 0xecb0
   1328c:	movt	r1, #3
   13290:	mov	r0, #0
   13294:	mov	r2, #5
   13298:	bl	12674 <dcgettext@plt>
   1329c:	mov	r2, r0
   132a0:	mov	r0, #1
   132a4:	mov	r1, #0
   132a8:	ldr	r3, [sp, #12]
   132ac:	bl	127b8 <error@plt>
   132b0:	bl	12908 <__errno_location@plt>
   132b4:	ldr	r4, [r0]
   132b8:	movw	r1, #60308	; 0xeb94
   132bc:	movt	r1, #3
   132c0:	mov	r0, #0
   132c4:	mov	r2, #5
   132c8:	bl	12674 <dcgettext@plt>
   132cc:	mov	r2, r0
   132d0:	mov	r0, #1
   132d4:	mov	r1, r4
   132d8:	ldr	r3, [sp, #12]
   132dc:	bl	127b8 <error@plt>
   132e0:	movw	r0, #60814	; 0xed8e
   132e4:	movt	r0, #3
   132e8:	movw	r1, #60335	; 0xebaf
   132ec:	movt	r1, #3
   132f0:	movw	r3, #60345	; 0xebb9
   132f4:	movt	r3, #3
   132f8:	movw	r2, #610	; 0x262
   132fc:	bl	12bf0 <__assert_fail@plt>
   13300:	movw	r1, #60207	; 0xeb2f
   13304:	movt	r1, #3
   13308:	mov	r0, #0
   1330c:	mov	r2, #5
   13310:	bl	12674 <dcgettext@plt>
   13314:	mov	r3, r0
   13318:	movw	r2, #17604	; 0x44c4
   1331c:	movt	r2, #4
   13320:	mov	r0, #1
   13324:	mov	r1, #0
   13328:	bl	127b8 <error@plt>
   1332c:	movw	r1, #60397	; 0xebed
   13330:	movt	r1, #3
   13334:	mov	r0, #0
   13338:	mov	r2, #5
   1333c:	bl	12674 <dcgettext@plt>
   13340:	mov	r3, r0
   13344:	ldr	r0, [sp, #12]
   13348:	str	r0, [sp]
   1334c:	movw	r2, #60389	; 0xebe5
   13350:	movt	r2, #3
   13354:	b	13320 <__assert_fail@plt+0x730>
   13358:	movw	r1, #21160	; 0x52a8
   1335c:	movt	r1, #5
   13360:	ldr	r1, [r1]
   13364:	str	r1, [r0]
   13368:	mov	r0, #1
   1336c:	bx	lr
   13370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13374:	add	fp, sp, #28
   13378:	sub	sp, sp, #12
   1337c:	mov	r8, r0
   13380:	bl	128c0 <strlen@plt>
   13384:	movw	sl, #24160	; 0x5e60
   13388:	movt	sl, #5
   1338c:	str	r0, [sl, #20]
   13390:	mvn	r0, #99	; 0x63
   13394:	bl	13570 <__assert_fail@plt+0x980>
   13398:	mov	r0, #0
   1339c:	str	r0, [sp, #8]
   133a0:	str	r8, [sp, #4]
   133a4:	movw	r1, #24204	; 0x5e8c
   133a8:	movt	r1, #5
   133ac:	ldr	r2, [r1, #48]	; 0x30
   133b0:	cmp	r2, #2
   133b4:	movw	r0, #21160	; 0x52a8
   133b8:	movt	r0, #5
   133bc:	bhi	133d8 <__assert_fail@plt+0x7e8>
   133c0:	movw	r3, #61476	; 0xf024
   133c4:	movt	r3, #3
   133c8:	ldr	r2, [r3, r2, lsl #2]
   133cc:	ldr	r3, [r0]
   133d0:	orr	r2, r3, r2
   133d4:	str	r2, [r0]
   133d8:	ldrb	r1, [r1, #13]
   133dc:	cmp	r1, #0
   133e0:	ldrne	r1, [r0]
   133e4:	orrne	r1, r1, #64	; 0x40
   133e8:	strne	r1, [r0]
   133ec:	ldr	r1, [r0]
   133f0:	add	r0, sp, #4
   133f4:	mov	r4, #0
   133f8:	mov	r2, #0
   133fc:	bl	2cba4 <__assert_fail@plt+0x19fb4>
   13400:	mov	r6, r0
   13404:	bl	12908 <__errno_location@plt>
   13408:	mov	r9, r0
   1340c:	cmp	r6, #0
   13410:	beq	134d0 <__assert_fail@plt+0x8e0>
   13414:	str	r4, [r9]
   13418:	mov	r0, r6
   1341c:	bl	2d504 <__assert_fail@plt+0x1a914>
   13420:	cmp	r0, #0
   13424:	beq	1349c <__assert_fail@plt+0x8ac>
   13428:	mov	r7, r0
   1342c:	mov	r4, #-2147483648	; 0x80000000
   13430:	mov	r5, #0
   13434:	b	1347c <__assert_fail@plt+0x88c>
   13438:	ldr	r4, [r7, #48]	; 0x30
   1343c:	strb	r5, [sl, #4]
   13440:	strb	r5, [sl, #40]	; 0x28
   13444:	ldr	r0, [r7, #80]	; 0x50
   13448:	str	r0, [sl, #8]
   1344c:	cmp	r0, #0
   13450:	movwne	r0, #1
   13454:	strb	r0, [sl, #5]
   13458:	mov	r0, r6
   1345c:	mov	r1, r7
   13460:	bl	13620 <__assert_fail@plt+0xa30>
   13464:	str	r5, [r9]
   13468:	mov	r0, r6
   1346c:	bl	2d504 <__assert_fail@plt+0x1a914>
   13470:	mov	r7, r0
   13474:	cmp	r0, #0
   13478:	beq	1349c <__assert_fail@plt+0x8ac>
   1347c:	ldrb	r0, [sl, #32]
   13480:	cmp	r0, #0
   13484:	beq	13438 <__assert_fail@plt+0x848>
   13488:	ldr	r0, [r7, #48]	; 0x30
   1348c:	cmp	r0, r4
   13490:	beq	13438 <__assert_fail@plt+0x848>
   13494:	bl	1842c <__assert_fail@plt+0x583c>
   13498:	b	13438 <__assert_fail@plt+0x848>
   1349c:	ldr	r7, [r9]
   134a0:	cmp	r7, #0
   134a4:	beq	13514 <__assert_fail@plt+0x924>
   134a8:	mov	r5, #0
   134ac:	mov	r0, #0
   134b0:	mov	r1, r8
   134b4:	bl	1939c <__assert_fail@plt+0x67ac>
   134b8:	mov	r3, r0
   134bc:	movw	r2, #60626	; 0xecd2
   134c0:	movt	r2, #3
   134c4:	mov	r0, #0
   134c8:	mov	r1, r7
   134cc:	b	13550 <__assert_fail@plt+0x960>
   134d0:	ldr	r5, [r9]
   134d4:	movw	r1, #60609	; 0xecc1
   134d8:	movt	r1, #3
   134dc:	mov	r0, #0
   134e0:	mov	r2, #5
   134e4:	bl	12674 <dcgettext@plt>
   134e8:	mov	r6, r0
   134ec:	mov	r0, #0
   134f0:	mov	r1, r8
   134f4:	bl	1939c <__assert_fail@plt+0x67ac>
   134f8:	mov	r3, r0
   134fc:	mov	r0, #0
   13500:	mov	r1, r5
   13504:	mov	r2, r6
   13508:	bl	127b8 <error@plt>
   1350c:	mov	r5, #1
   13510:	b	13554 <__assert_fail@plt+0x964>
   13514:	mov	r0, r6
   13518:	bl	2d370 <__assert_fail@plt+0x1a780>
   1351c:	cmp	r0, #0
   13520:	beq	13568 <__assert_fail@plt+0x978>
   13524:	ldr	r6, [r9]
   13528:	mov	r5, #0
   1352c:	movw	r1, #60684	; 0xed0c
   13530:	movt	r1, #3
   13534:	mov	r0, #0
   13538:	mov	r2, #5
   1353c:	bl	12674 <dcgettext@plt>
   13540:	mov	r2, r0
   13544:	mov	r0, #0
   13548:	mov	r1, r6
   1354c:	mov	r3, r8
   13550:	bl	127b8 <error@plt>
   13554:	mov	r0, #1
   13558:	str	r0, [sl, #28]
   1355c:	mov	r0, r5
   13560:	sub	sp, fp, #28
   13564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13568:	mov	r5, #1
   1356c:	b	1355c <__assert_fail@plt+0x96c>
   13570:	push	{r4, sl, fp, lr}
   13574:	add	fp, sp, #8
   13578:	movw	r1, #21160	; 0x52a8
   1357c:	movt	r1, #5
   13580:	ldrb	r1, [r1, #1]
   13584:	tst	r1, #2
   13588:	beq	135dc <__assert_fail@plt+0x9ec>
   1358c:	cmn	r0, #100	; 0x64
   13590:	beq	1359c <__assert_fail@plt+0x9ac>
   13594:	cmn	r0, #1
   13598:	ble	135e0 <__assert_fail@plt+0x9f0>
   1359c:	movw	r1, #24160	; 0x5e60
   135a0:	movt	r1, #5
   135a4:	str	r0, [r1, #16]
   135a8:	movw	r4, #21164	; 0x52ac
   135ac:	movt	r4, #5
   135b0:	ldr	r1, [r4]
   135b4:	cmn	r1, #1
   135b8:	popgt	{r4, sl, fp, pc}
   135bc:	cmn	r0, #100	; 0x64
   135c0:	bne	135cc <__assert_fail@plt+0x9dc>
   135c4:	mvn	r0, #99	; 0x63
   135c8:	b	135d8 <__assert_fail@plt+0x9e8>
   135cc:	cmp	r0, #0
   135d0:	bmi	13600 <__assert_fail@plt+0xa10>
   135d4:	bl	21db4 <__assert_fail@plt+0xf1c4>
   135d8:	str	r0, [r4]
   135dc:	pop	{r4, sl, fp, pc}
   135e0:	movw	r0, #60739	; 0xed43
   135e4:	movt	r0, #3
   135e8:	movw	r1, #60335	; 0xebaf
   135ec:	movt	r1, #3
   135f0:	movw	r3, #60773	; 0xed65
   135f4:	movt	r3, #3
   135f8:	mov	r2, #107	; 0x6b
   135fc:	bl	12bf0 <__assert_fail@plt>
   13600:	movw	r0, #60794	; 0xed7a
   13604:	movt	r0, #3
   13608:	movw	r1, #60335	; 0xebaf
   1360c:	movt	r1, #3
   13610:	movw	r3, #60773	; 0xed65
   13614:	movt	r3, #3
   13618:	mov	r2, #125	; 0x7d
   1361c:	bl	12bf0 <__assert_fail@plt>
   13620:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13624:	add	fp, sp, #28
   13628:	sub	sp, sp, #140	; 0x8c
   1362c:	mov	r4, r1
   13630:	mov	r5, r0
   13634:	movw	r7, #24204	; 0x5e8c
   13638:	movt	r7, #5
   1363c:	ldrb	r0, [r7, #44]	; 0x2c
   13640:	tst	r0, #4
   13644:	movw	r8, #21168	; 0x52b0
   13648:	movt	r8, #5
   1364c:	bne	139a0 <__assert_fail@plt+0xdb0>
   13650:	ldrh	r0, [r4, #56]	; 0x38
   13654:	cmp	r0, #6
   13658:	bne	13664 <__assert_fail@plt+0xa74>
   1365c:	bl	13b1c <__assert_fail@plt+0xf2c>
   13660:	b	1367c <__assert_fail@plt+0xa8c>
   13664:	ldr	r0, [r4, #48]	; 0x30
   13668:	cmp	r0, #0
   1366c:	beq	1365c <__assert_fail@plt+0xa6c>
   13670:	ldr	r1, [r8]
   13674:	cmp	r0, r1
   13678:	blgt	13b1c <__assert_fail@plt+0xf2c>
   1367c:	ldr	r0, [r5, #32]
   13680:	bl	13570 <__assert_fail@plt+0x980>
   13684:	ldr	r0, [r4, #48]	; 0x30
   13688:	str	r0, [r8]
   1368c:	ldrd	r2, [r4, #160]	; 0xa0
   13690:	str	r3, [sp, #132]	; 0x84
   13694:	str	r2, [sp, #128]	; 0x80
   13698:	ldrh	r1, [r4, #56]	; 0x38
   1369c:	sub	r1, r1, #2
   136a0:	cmp	r1, #11
   136a4:	bhi	13774 <__assert_fail@plt+0xb84>
   136a8:	add	r2, pc, #0
   136ac:	ldr	pc, [r2, r1, lsl #2]
   136b0:	andeq	r3, r1, r0, ror #13
   136b4:	andeq	r3, r1, r4, ror r7
   136b8:	andeq	r3, r1, r0, lsl #14
   136bc:	andeq	r3, r1, r4, ror r7
   136c0:	andeq	r3, r1, r4, ror r7
   136c4:	andeq	r3, r1, r4, asr #14
   136c8:	andeq	r3, r1, r4, ror r7
   136cc:	andeq	r3, r1, r4, ror r7
   136d0:	andeq	r3, r1, ip, lsl r7
   136d4:	andeq	r3, r1, r4, ror r7
   136d8:	andeq	r3, r1, r4, ror r7
   136dc:	andeq	r3, r1, r0, asr r7
   136e0:	mov	r0, r4
   136e4:	bl	13b5c <__assert_fail@plt+0xf6c>
   136e8:	movw	r0, #24160	; 0x5e60
   136ec:	movt	r0, #5
   136f0:	mov	r1, #1
   136f4:	str	r1, [r0, #28]
   136f8:	sub	sp, fp, #28
   136fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13700:	ldr	r1, [r4, #28]
   13704:	ldr	r0, [r4, #32]
   13708:	bl	18360 <__assert_fail@plt+0x5770>
   1370c:	ldrb	r0, [r7]
   13710:	cmp	r0, #0
   13714:	bne	13998 <__assert_fail@plt+0xda8>
   13718:	b	13774 <__assert_fail@plt+0xb84>
   1371c:	cmp	r0, #0
   13720:	beq	13744 <__assert_fail@plt+0xb54>
   13724:	ldr	r0, [r4, #24]
   13728:	bl	13c20 <__assert_fail@plt+0x1030>
   1372c:	cmp	r0, #0
   13730:	bne	13760 <__assert_fail@plt+0xb70>
   13734:	ldr	r1, [r4, #28]
   13738:	ldr	r0, [r4, #32]
   1373c:	bl	18360 <__assert_fail@plt+0x5770>
   13740:	b	13774 <__assert_fail@plt+0xb84>
   13744:	ldr	r1, [r4, #28]
   13748:	ldr	r0, [r4, #32]
   1374c:	b	13768 <__assert_fail@plt+0xb78>
   13750:	ldr	r0, [r4, #24]
   13754:	bl	13c20 <__assert_fail@plt+0x1030>
   13758:	cmp	r0, #0
   1375c:	beq	13774 <__assert_fail@plt+0xb84>
   13760:	ldr	r1, [r4, #28]
   13764:	mov	r0, #40	; 0x28
   13768:	bl	18360 <__assert_fail@plt+0x5770>
   1376c:	sub	sp, fp, #28
   13770:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13774:	ldrh	r1, [r4, #56]	; 0x38
   13778:	bic	r0, r1, #1
   1377c:	cmp	r0, #10
   13780:	bne	137b0 <__assert_fail@plt+0xbc0>
   13784:	movw	r0, #24160	; 0x5e60
   13788:	movt	r0, #5
   1378c:	ldrb	r2, [r0, #4]
   13790:	cmp	r2, #0
   13794:	bne	13a94 <__assert_fail@plt+0xea4>
   13798:	ldr	r0, [r0, #8]
   1379c:	cmp	r1, #11
   137a0:	cmpne	r0, #0
   137a4:	bne	13ab4 <__assert_fail@plt+0xec4>
   137a8:	str	r0, [sp, #28]
   137ac:	b	13830 <__assert_fail@plt+0xc40>
   137b0:	add	r1, r4, #64	; 0x40
   137b4:	movw	r6, #24160	; 0x5e60
   137b8:	movt	r6, #5
   137bc:	movw	r0, #257	; 0x101
   137c0:	strh	r0, [r6, #4]
   137c4:	add	r0, sp, #32
   137c8:	mov	r2, #104	; 0x68
   137cc:	bl	125f0 <memcpy@plt>
   137d0:	ldr	r0, [sp, #48]	; 0x30
   137d4:	str	r0, [r6, #8]
   137d8:	str	r0, [sp, #28]
   137dc:	cmp	r0, #0
   137e0:	beq	137f0 <__assert_fail@plt+0xc00>
   137e4:	ldr	r0, [r4, #48]	; 0x30
   137e8:	str	r0, [r6]
   137ec:	b	13848 <__assert_fail@plt+0xc58>
   137f0:	movw	r1, #61028	; 0xee64
   137f4:	movt	r1, #3
   137f8:	mov	r0, #0
   137fc:	mov	r2, #5
   13800:	bl	12674 <dcgettext@plt>
   13804:	mov	r6, r0
   13808:	ldr	r1, [r7, #72]	; 0x48
   1380c:	ldr	r2, [r4, #28]
   13810:	mov	r0, #0
   13814:	bl	2a088 <__assert_fail@plt+0x17498>
   13818:	mov	r3, r0
   1381c:	mov	r0, #0
   13820:	mov	r1, #0
   13824:	mov	r2, r6
   13828:	bl	127b8 <error@plt>
   1382c:	ldr	r0, [sp, #28]
   13830:	ldr	r1, [r4, #48]	; 0x30
   13834:	movw	r2, #24160	; 0x5e60
   13838:	movt	r2, #5
   1383c:	str	r1, [r2]
   13840:	cmp	r0, #0
   13844:	beq	1386c <__assert_fail@plt+0xc7c>
   13848:	ldr	r1, [r4, #28]
   1384c:	mov	r0, #0
   13850:	str	r0, [sp]
   13854:	add	r2, r4, #168	; 0xa8
   13858:	add	r0, sp, #28
   1385c:	add	r3, sp, #32
   13860:	bl	18af8 <__assert_fail@plt+0x5f08>
   13864:	cmp	r0, #0
   13868:	beq	13998 <__assert_fail@plt+0xda8>
   1386c:	ldrh	r0, [r4, #56]	; 0x38
   13870:	ldr	r1, [sp, #28]
   13874:	and	r1, r1, #61440	; 0xf000
   13878:	cmp	r1, #16384	; 0x4000
   1387c:	bne	138a4 <__assert_fail@plt+0xcb4>
   13880:	mov	r9, #1
   13884:	cmp	r0, #11
   13888:	bne	138c8 <__assert_fail@plt+0xcd8>
   1388c:	mov	r0, r5
   13890:	mov	r1, r4
   13894:	mov	r2, #1
   13898:	bl	2e7b4 <__assert_fail@plt+0x1bbc4>
   1389c:	sub	sp, fp, #28
   138a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138a4:	sub	r0, r0, #1
   138a8:	uxth	r1, r0
   138ac:	mov	r9, #0
   138b0:	cmp	r1, #6
   138b4:	bcs	138c8 <__assert_fail@plt+0xcd8>
   138b8:	sxth	r0, r0
   138bc:	movw	r1, #61488	; 0xf030
   138c0:	movt	r1, #3
   138c4:	ldr	r9, [r1, r0, lsl #2]
   138c8:	ldr	r1, [r7, #4]
   138cc:	mov	r0, #0
   138d0:	cmp	r1, #0
   138d4:	bmi	13908 <__assert_fail@plt+0xd18>
   138d8:	ldr	r2, [r4, #48]	; 0x30
   138dc:	cmp	r2, r1
   138e0:	blt	13908 <__assert_fail@plt+0xd18>
   138e4:	mov	r0, r5
   138e8:	mov	r1, r4
   138ec:	mov	r2, #4
   138f0:	bl	2e7b4 <__assert_fail@plt+0x1bbc4>
   138f4:	ldr	r1, [r7, #4]
   138f8:	ldr	r2, [r4, #48]	; 0x30
   138fc:	mov	r0, #0
   13900:	cmp	r2, r1
   13904:	movwgt	r0, #1
   13908:	ldrh	r1, [r4, #56]	; 0x38
   1390c:	subs	r2, r1, #6
   13910:	movwne	r2, #1
   13914:	ldrb	r3, [r7]
   13918:	clz	r3, r3
   1391c:	lsr	r3, r3, #5
   13920:	orr	r2, r2, r3
   13924:	sub	r1, r1, #1
   13928:	clz	r1, r1
   1392c:	lsr	r1, r1, #5
   13930:	and	r1, r1, r3
   13934:	eor	r1, r1, r2
   13938:	mov	r6, #1
   1393c:	cmp	r1, #1
   13940:	bne	13958 <__assert_fail@plt+0xd68>
   13944:	ldr	r1, [r7, #8]
   13948:	ldr	r2, [r4, #48]	; 0x30
   1394c:	cmp	r2, r1
   13950:	movwlt	r0, #1
   13954:	mov	r6, r0
   13958:	ldrb	r0, [r7, #44]	; 0x2c
   1395c:	tst	r0, #4
   13960:	bne	13a28 <__assert_fail@plt+0xe38>
   13964:	cmp	r6, #0
   13968:	bne	1397c <__assert_fail@plt+0xd8c>
   1396c:	add	r2, sp, #32
   13970:	mov	r0, r5
   13974:	mov	r1, r4
   13978:	bl	13c70 <__assert_fail@plt+0x1080>
   1397c:	ldrh	r0, [r4, #56]	; 0x38
   13980:	cmp	r0, #6
   13984:	bne	13998 <__assert_fail@plt+0xda8>
   13988:	movw	r0, #24160	; 0x5e60
   1398c:	movt	r0, #5
   13990:	mov	r1, #0
   13994:	strb	r1, [r0, #24]
   13998:	sub	sp, fp, #28
   1399c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139a0:	movw	r0, #21864	; 0x5568
   139a4:	movt	r0, #5
   139a8:	ldr	r0, [r0]
   139ac:	str	r0, [sp, #24]
   139b0:	ldr	r2, [r4, #28]
   139b4:	ldr	r1, [r7, #72]	; 0x48
   139b8:	mov	r0, #0
   139bc:	bl	2a088 <__assert_fail@plt+0x17498>
   139c0:	str	r0, [sp, #20]
   139c4:	ldrh	r0, [r4, #56]	; 0x38
   139c8:	bl	13ad4 <__assert_fail@plt+0xee4>
   139cc:	str	r0, [sp, #16]
   139d0:	ldr	r9, [r8]
   139d4:	ldr	r1, [r7, #72]	; 0x48
   139d8:	ldr	r2, [r4, #28]
   139dc:	ldr	sl, [r4, #48]	; 0x30
   139e0:	mov	r0, #1
   139e4:	bl	2a088 <__assert_fail@plt+0x17498>
   139e8:	mov	r6, r0
   139ec:	ldr	r1, [r7, #72]	; 0x48
   139f0:	ldr	r2, [r4, #24]
   139f4:	mov	r0, #2
   139f8:	bl	2a088 <__assert_fail@plt+0x17498>
   139fc:	str	sl, [sp]
   13a00:	str	r9, [sp, #4]
   13a04:	str	r6, [sp, #8]
   13a08:	str	r0, [sp, #12]
   13a0c:	movw	r1, #60822	; 0xed96
   13a10:	movt	r1, #3
   13a14:	ldr	r0, [sp, #24]
   13a18:	ldr	r2, [sp, #20]
   13a1c:	ldr	r3, [sp, #16]
   13a20:	bl	128fc <fprintf@plt>
   13a24:	b	13650 <__assert_fail@plt+0xa60>
   13a28:	movw	r0, #21864	; 0x5568
   13a2c:	movt	r0, #5
   13a30:	ldr	r8, [r0]
   13a34:	ldr	r2, [r4, #28]
   13a38:	ldr	r1, [r7, #72]	; 0x48
   13a3c:	mov	r0, #0
   13a40:	bl	2a088 <__assert_fail@plt+0x17498>
   13a44:	mov	r7, r0
   13a48:	ldrh	r0, [r4, #56]	; 0x38
   13a4c:	bl	13ad4 <__assert_fail@plt+0xee4>
   13a50:	mov	r3, r0
   13a54:	movw	r0, #24160	; 0x5e60
   13a58:	movt	r0, #5
   13a5c:	ldrb	r1, [r0, #4]
   13a60:	ldrb	r0, [r0, #5]
   13a64:	str	r9, [sp]
   13a68:	str	r6, [sp, #4]
   13a6c:	str	r1, [sp, #8]
   13a70:	str	r0, [sp, #12]
   13a74:	movw	r1, #61071	; 0xee8f
   13a78:	movt	r1, #3
   13a7c:	mov	r0, r8
   13a80:	mov	r2, r7
   13a84:	bl	128fc <fprintf@plt>
   13a88:	cmp	r6, #0
   13a8c:	bne	1397c <__assert_fail@plt+0xd8c>
   13a90:	b	1396c <__assert_fail@plt+0xd7c>
   13a94:	movw	r0, #60926	; 0xedfe
   13a98:	movt	r0, #3
   13a9c:	movw	r1, #60335	; 0xebaf
   13aa0:	movt	r1, #3
   13aa4:	movw	r3, #60943	; 0xee0f
   13aa8:	movt	r3, #3
   13aac:	mov	r2, #380	; 0x17c
   13ab0:	bl	12bf0 <__assert_fail@plt>
   13ab4:	movw	r0, #60983	; 0xee37
   13ab8:	movt	r0, #3
   13abc:	movw	r1, #60335	; 0xebaf
   13ac0:	movt	r1, #3
   13ac4:	movw	r3, #60943	; 0xee0f
   13ac8:	movt	r3, #3
   13acc:	movw	r2, #381	; 0x17d
   13ad0:	bl	12bf0 <__assert_fail@plt>
   13ad4:	push	{r4, sl, fp, lr}
   13ad8:	add	fp, sp, #8
   13adc:	mov	r2, r0
   13ae0:	sub	r0, r0, #1
   13ae4:	cmp	r0, #14
   13ae8:	bcs	13afc <__assert_fail@plt+0xf0c>
   13aec:	movw	r1, #61512	; 0xf048
   13af0:	movt	r1, #3
   13af4:	ldr	r0, [r1, r0, lsl #2]
   13af8:	pop	{r4, sl, fp, pc}
   13afc:	movw	r4, #21881	; 0x5579
   13b00:	movt	r4, #5
   13b04:	movw	r1, #61274	; 0xef5a
   13b08:	movt	r1, #3
   13b0c:	mov	r0, r4
   13b10:	bl	12a94 <sprintf@plt>
   13b14:	mov	r0, r4
   13b18:	pop	{r4, sl, fp, pc}
   13b1c:	push	{r4, sl, fp, lr}
   13b20:	add	fp, sp, #8
   13b24:	movw	r0, #21160	; 0x52a8
   13b28:	movt	r0, #5
   13b2c:	ldrb	r0, [r0, #1]
   13b30:	tst	r0, #2
   13b34:	beq	13b58 <__assert_fail@plt+0xf68>
   13b38:	movw	r4, #21164	; 0x52ac
   13b3c:	movt	r4, #5
   13b40:	ldr	r0, [r4]
   13b44:	cmp	r0, #0
   13b48:	bmi	13b58 <__assert_fail@plt+0xf68>
   13b4c:	bl	12ba8 <close@plt>
   13b50:	mvn	r0, #0
   13b54:	str	r0, [r4]
   13b58:	pop	{r4, sl, fp, pc}
   13b5c:	push	{r4, r5, r6, sl, fp, lr}
   13b60:	add	fp, sp, #16
   13b64:	sub	sp, sp, #8
   13b68:	mov	r4, r0
   13b6c:	ldr	r0, [r0, #80]	; 0x50
   13b70:	and	r0, r0, #61440	; 0xf000
   13b74:	cmp	r0, #40960	; 0xa000
   13b78:	bne	13bbc <__assert_fail@plt+0xfcc>
   13b7c:	movw	r1, #61279	; 0xef5f
   13b80:	movt	r1, #3
   13b84:	mov	r0, #0
   13b88:	mov	r2, #5
   13b8c:	bl	12674 <dcgettext@plt>
   13b90:	mov	r5, r0
   13b94:	ldr	r1, [r4, #28]
   13b98:	mov	r0, #0
   13b9c:	bl	1939c <__assert_fail@plt+0x67ac>
   13ba0:	mov	r3, r0
   13ba4:	mov	r0, #0
   13ba8:	mov	r1, #0
   13bac:	mov	r2, r5
   13bb0:	sub	sp, fp, #16
   13bb4:	pop	{r4, r5, r6, sl, fp, lr}
   13bb8:	b	127b8 <error@plt>
   13bbc:	movw	r1, #61400	; 0xefd8
   13bc0:	movt	r1, #3
   13bc4:	mov	r0, #0
   13bc8:	mov	r2, #5
   13bcc:	bl	12674 <dcgettext@plt>
   13bd0:	mov	r5, r0
   13bd4:	ldr	r1, [r4, #28]
   13bd8:	mov	r0, #0
   13bdc:	bl	1939c <__assert_fail@plt+0x67ac>
   13be0:	mov	r6, r0
   13be4:	movw	r0, #24204	; 0x5e8c
   13be8:	movt	r0, #5
   13bec:	ldr	r2, [r0, #72]	; 0x48
   13bf0:	ldr	r1, [r4]
   13bf4:	ldr	r0, [r1, #28]
   13bf8:	ldr	r1, [r1, #40]	; 0x28
   13bfc:	bl	13ce8 <__assert_fail@plt+0x10f8>
   13c00:	str	r0, [sp]
   13c04:	mov	r0, #0
   13c08:	mov	r1, #0
   13c0c:	mov	r2, r5
   13c10:	mov	r3, r6
   13c14:	bl	127b8 <error@plt>
   13c18:	sub	sp, fp, #16
   13c1c:	pop	{r4, r5, r6, sl, fp, pc}
   13c20:	push	{fp, lr}
   13c24:	mov	fp, sp
   13c28:	sub	sp, sp, #104	; 0x68
   13c2c:	movw	r1, #24204	; 0x5e8c
   13c30:	movt	r1, #5
   13c34:	ldr	r2, [r1, #52]	; 0x34
   13c38:	mov	r1, sp
   13c3c:	blx	r2
   13c40:	cmp	r0, #0
   13c44:	beq	13c64 <__assert_fail@plt+0x1074>
   13c48:	bl	12908 <__errno_location@plt>
   13c4c:	ldr	r0, [r0]
   13c50:	sub	r0, r0, #40	; 0x28
   13c54:	clz	r0, r0
   13c58:	lsr	r0, r0, #5
   13c5c:	mov	sp, fp
   13c60:	pop	{fp, pc}
   13c64:	mov	r0, #0
   13c68:	mov	sp, fp
   13c6c:	pop	{fp, pc}
   13c70:	push	{r4, r5, r6, r7, fp, lr}
   13c74:	add	fp, sp, #16
   13c78:	mov	r6, r2
   13c7c:	mov	r4, r1
   13c80:	mov	r5, r0
   13c84:	ldrh	r0, [r1, #56]	; 0x38
   13c88:	orr	r0, r0, #1
   13c8c:	subs	r0, r0, #11
   13c90:	movwne	r0, #1
   13c94:	movw	r7, #24160	; 0x5e60
   13c98:	movt	r7, #5
   13c9c:	strb	r0, [r7, #4]
   13ca0:	ldr	r0, [r1, #24]
   13ca4:	ldr	r1, [r5, #32]
   13ca8:	str	r0, [r7, #12]
   13cac:	str	r1, [r7, #16]
   13cb0:	bl	1603c <__assert_fail@plt+0x344c>
   13cb4:	mov	r2, r0
   13cb8:	ldr	r0, [r4, #28]
   13cbc:	mov	r1, r6
   13cc0:	bl	19234 <__assert_fail@plt+0x6644>
   13cc4:	ldrb	r0, [r7, #24]
   13cc8:	cmp	r0, #0
   13ccc:	beq	13ce4 <__assert_fail@plt+0x10f4>
   13cd0:	mov	r0, r5
   13cd4:	mov	r1, r4
   13cd8:	mov	r2, #4
   13cdc:	pop	{r4, r5, r6, r7, fp, lr}
   13ce0:	b	2e7b4 <__assert_fail@plt+0x1bbc4>
   13ce4:	pop	{r4, r5, r6, r7, fp, pc}
   13ce8:	mov	r3, r2
   13cec:	cmp	r1, #0
   13cf0:	beq	13d28 <__assert_fail@plt+0x1138>
   13cf4:	push	{r4, r5, r6, sl, fp, lr}
   13cf8:	add	fp, sp, #16
   13cfc:	mov	r4, r1
   13d00:	mov	r5, r0
   13d04:	ldrb	r6, [r0, r1]
   13d08:	mov	r0, #0
   13d0c:	strb	r0, [r5, r1]
   13d10:	mov	r0, #1
   13d14:	mov	r1, r3
   13d18:	mov	r2, r5
   13d1c:	bl	2a088 <__assert_fail@plt+0x17498>
   13d20:	strb	r6, [r5, r4]
   13d24:	pop	{r4, r5, r6, sl, fp, pc}
   13d28:	movw	r2, #2407	; 0x967
   13d2c:	movt	r2, #4
   13d30:	mov	r0, #1
   13d34:	mov	r1, r3
   13d38:	b	2a088 <__assert_fail@plt+0x17498>
   13d3c:	andeq	r0, r0, r0
   13d40:	push	{r4, sl, fp, lr}
   13d44:	add	fp, sp, #8
   13d48:	sub	sp, sp, #8
   13d4c:	mov	r4, r2
   13d50:	mov	r0, sp
   13d54:	bl	2b0e4 <__assert_fail@plt+0x184f4>
   13d58:	ldm	sp, {r0, r1}
   13d5c:	mov	r2, r4
   13d60:	mov	r3, #60	; 0x3c
   13d64:	bl	13d70 <__assert_fail@plt+0x1180>
   13d68:	sub	sp, fp, #8
   13d6c:	pop	{r4, sl, fp, pc}
   13d70:	push	{r4, sl, fp, lr}
   13d74:	add	fp, sp, #8
   13d78:	mov	r4, r3
   13d7c:	ldr	r3, [r2, #44]	; 0x2c
   13d80:	cmp	r3, #2
   13d84:	beq	13dc4 <__assert_fail@plt+0x11d4>
   13d88:	cmp	r3, #1
   13d8c:	beq	13db4 <__assert_fail@plt+0x11c4>
   13d90:	cmp	r3, #0
   13d94:	bne	13dfc <__assert_fail@plt+0x120c>
   13d98:	ldrd	r2, [r2, #48]	; 0x30
   13d9c:	bl	13ed4 <__assert_fail@plt+0x12e4>
   13da0:	mov	r1, r0
   13da4:	mov	r0, #0
   13da8:	cmp	r1, #0
   13dac:	movwgt	r0, #1
   13db0:	pop	{r4, sl, fp, pc}
   13db4:	ldrd	r2, [r2, #48]	; 0x30
   13db8:	bl	13ed4 <__assert_fail@plt+0x12e4>
   13dbc:	lsr	r0, r0, #31
   13dc0:	pop	{r4, sl, fp, pc}
   13dc4:	ldrd	r2, [r2, #48]	; 0x30
   13dc8:	bl	15770 <__assert_fail@plt+0x2b80>
   13dcc:	mov	r0, #0
   13dd0:	vmov	s2, r4
   13dd4:	vcvt.f64.s32	d16, s2
   13dd8:	vcmpe.f64	d0, d16
   13ddc:	vmrs	APSR_nzcv, fpscr
   13de0:	mov	r1, #0
   13de4:	movwls	r1, #1
   13de8:	vcmpe.f64	d0, #0.0
   13dec:	vmrs	APSR_nzcv, fpscr
   13df0:	movwgt	r0, #1
   13df4:	and	r0, r0, r1
   13df8:	pop	{r4, sl, fp, pc}
   13dfc:	movw	r0, #65169	; 0xfe91
   13e00:	movt	r0, #3
   13e04:	movw	r1, #61607	; 0xf0a7
   13e08:	movt	r1, #3
   13e0c:	movw	r3, #62586	; 0xf47a
   13e10:	movt	r3, #3
   13e14:	mov	r2, #138	; 0x8a
   13e18:	bl	12bf0 <__assert_fail@plt>
   13e1c:	push	{r4, r5, r6, sl, fp, lr}
   13e20:	add	fp, sp, #16
   13e24:	mov	r5, r2
   13e28:	mov	r4, r1
   13e2c:	mov	r6, r0
   13e30:	ldr	r2, [r2, #156]	; 0x9c
   13e34:	cmp	r2, #0
   13e38:	beq	13e50 <__assert_fail@plt+0x1260>
   13e3c:	mov	r0, r6
   13e40:	mov	r1, r4
   13e44:	bl	19234 <__assert_fail@plt+0x6644>
   13e48:	cmp	r0, #0
   13e4c:	beq	13e64 <__assert_fail@plt+0x1274>
   13e50:	ldr	r2, [r5, #160]	; 0xa0
   13e54:	mov	r0, r6
   13e58:	mov	r1, r4
   13e5c:	pop	{r4, r5, r6, sl, fp, lr}
   13e60:	b	19234 <__assert_fail@plt+0x6644>
   13e64:	mov	r0, #0
   13e68:	pop	{r4, r5, r6, sl, fp, pc}
   13e6c:	push	{r4, sl, fp, lr}
   13e70:	add	fp, sp, #8
   13e74:	sub	sp, sp, #8
   13e78:	ldr	r0, [r2, #44]	; 0x2c
   13e7c:	cmp	r0, #0
   13e80:	bne	13eb4 <__assert_fail@plt+0x12c4>
   13e84:	mov	r4, r2
   13e88:	mov	r0, sp
   13e8c:	bl	2b0e4 <__assert_fail@plt+0x184f4>
   13e90:	ldrd	r2, [r4, #48]	; 0x30
   13e94:	ldm	sp, {r0, r1}
   13e98:	bl	13ed4 <__assert_fail@plt+0x12e4>
   13e9c:	mov	r1, #0
   13ea0:	cmp	r0, #0
   13ea4:	movwgt	r1, #1
   13ea8:	mov	r0, r1
   13eac:	sub	sp, fp, #8
   13eb0:	pop	{r4, sl, fp, pc}
   13eb4:	movw	r0, #61568	; 0xf080
   13eb8:	movt	r0, #3
   13ebc:	movw	r1, #61607	; 0xf0a7
   13ec0:	movt	r1, #3
   13ec4:	movw	r3, #61614	; 0xf0ae
   13ec8:	movt	r3, #3
   13ecc:	mov	r2, #166	; 0xa6
   13ed0:	bl	12bf0 <__assert_fail@plt>
   13ed4:	cmp	r0, r2
   13ed8:	moveq	ip, #0
   13edc:	cmpeq	r1, r3
   13ee0:	beq	13f04 <__assert_fail@plt+0x1314>
   13ee4:	push	{fp, lr}
   13ee8:	mov	fp, sp
   13eec:	bl	15770 <__assert_fail@plt+0x2b80>
   13ef0:	mov	ip, #1
   13ef4:	vcmpe.f64	d0, #0.0
   13ef8:	vmrs	APSR_nzcv, fpscr
   13efc:	mvnmi	ip, #0
   13f00:	pop	{fp, lr}
   13f04:	mov	r0, ip
   13f08:	bx	lr
   13f0c:	push	{r4, sl, fp, lr}
   13f10:	add	fp, sp, #8
   13f14:	sub	sp, sp, #8
   13f18:	mov	r4, r2
   13f1c:	mov	r0, sp
   13f20:	bl	2b0e4 <__assert_fail@plt+0x184f4>
   13f24:	ldm	sp, {r0, r1}
   13f28:	movw	r3, #20864	; 0x5180
   13f2c:	movt	r3, #1
   13f30:	mov	r2, r4
   13f34:	bl	13d70 <__assert_fail@plt+0x1180>
   13f38:	sub	sp, fp, #8
   13f3c:	pop	{r4, sl, fp, pc}
   13f40:	mov	r0, #1
   13f44:	bx	lr
   13f48:	push	{r4, sl, fp, lr}
   13f4c:	add	fp, sp, #8
   13f50:	sub	sp, sp, #8
   13f54:	mov	r4, r2
   13f58:	mov	r0, sp
   13f5c:	bl	2b0f0 <__assert_fail@plt+0x18500>
   13f60:	ldm	sp, {r0, r1}
   13f64:	mov	r2, r4
   13f68:	mov	r3, #60	; 0x3c
   13f6c:	bl	13d70 <__assert_fail@plt+0x1180>
   13f70:	sub	sp, fp, #8
   13f74:	pop	{r4, sl, fp, pc}
   13f78:	push	{r4, sl, fp, lr}
   13f7c:	add	fp, sp, #8
   13f80:	sub	sp, sp, #8
   13f84:	ldr	r0, [r2, #44]	; 0x2c
   13f88:	cmp	r0, #0
   13f8c:	bne	13fc0 <__assert_fail@plt+0x13d0>
   13f90:	mov	r4, r2
   13f94:	mov	r0, sp
   13f98:	bl	2b0f0 <__assert_fail@plt+0x18500>
   13f9c:	ldrd	r2, [r4, #48]	; 0x30
   13fa0:	ldm	sp, {r0, r1}
   13fa4:	bl	13ed4 <__assert_fail@plt+0x12e4>
   13fa8:	mov	r1, #0
   13fac:	cmp	r0, #0
   13fb0:	movwgt	r1, #1
   13fb4:	mov	r0, r1
   13fb8:	sub	sp, fp, #8
   13fbc:	pop	{r4, sl, fp, pc}
   13fc0:	movw	r0, #61568	; 0xf080
   13fc4:	movt	r0, #3
   13fc8:	movw	r1, #61607	; 0xf0a7
   13fcc:	movt	r1, #3
   13fd0:	movw	r3, #61681	; 0xf0f1
   13fd4:	movt	r3, #3
   13fd8:	mov	r2, #199	; 0xc7
   13fdc:	bl	12bf0 <__assert_fail@plt>
   13fe0:	push	{r4, r5, r6, sl, fp, lr}
   13fe4:	add	fp, sp, #16
   13fe8:	mov	r5, r2
   13fec:	mov	r4, r1
   13ff0:	mov	r6, r0
   13ff4:	ldr	r2, [r2, #156]	; 0x9c
   13ff8:	cmp	r2, #0
   13ffc:	beq	1400c <__assert_fail@plt+0x141c>
   14000:	mov	r0, r6
   14004:	mov	r1, r4
   14008:	bl	19234 <__assert_fail@plt+0x6644>
   1400c:	ldr	r2, [r5, #160]	; 0xa0
   14010:	mov	r0, r6
   14014:	mov	r1, r4
   14018:	pop	{r4, r5, r6, sl, fp, lr}
   1401c:	b	19234 <__assert_fail@plt+0x6644>
   14020:	push	{r4, sl, fp, lr}
   14024:	add	fp, sp, #8
   14028:	sub	sp, sp, #8
   1402c:	mov	r4, r2
   14030:	mov	r0, sp
   14034:	bl	2b0f0 <__assert_fail@plt+0x18500>
   14038:	ldm	sp, {r0, r1}
   1403c:	movw	r3, #20864	; 0x5180
   14040:	movt	r3, #1
   14044:	mov	r2, r4
   14048:	bl	13d70 <__assert_fail@plt+0x1180>
   1404c:	sub	sp, fp, #8
   14050:	pop	{r4, sl, fp, pc}
   14054:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14058:	add	fp, sp, #24
   1405c:	mov	r6, r1
   14060:	mov	r8, r0
   14064:	movw	r5, #24160	; 0x5e60
   14068:	movt	r5, #5
   1406c:	ldr	r0, [r5, #12]
   14070:	movw	r1, #64572	; 0xfc3c
   14074:	movt	r1, #3
   14078:	bl	124f4 <strcmp@plt>
   1407c:	mov	r4, #1
   14080:	cmp	r0, #0
   14084:	beq	14168 <__assert_fail@plt+0x1578>
   14088:	ldrb	r0, [r5, #4]
   1408c:	cmp	r0, #0
   14090:	beq	140b0 <__assert_fail@plt+0x14c0>
   14094:	ldr	r0, [r6, #16]
   14098:	and	r0, r0, #61440	; 0xf000
   1409c:	sub	r0, r0, #16384	; 0x4000
   140a0:	clz	r0, r0
   140a4:	lsr	r0, r0, #5
   140a8:	lsl	r7, r0, #9
   140ac:	b	140b4 <__assert_fail@plt+0x14c4>
   140b0:	mov	r7, #0
   140b4:	mov	r0, r7
   140b8:	bl	14170 <__assert_fail@plt+0x1580>
   140bc:	cmp	r0, #0
   140c0:	bne	14168 <__assert_fail@plt+0x1578>
   140c4:	bl	12908 <__errno_location@plt>
   140c8:	mov	r6, r0
   140cc:	ldr	r0, [r0]
   140d0:	cmp	r0, #2
   140d4:	bne	140fc <__assert_fail@plt+0x150c>
   140d8:	movw	r1, #24204	; 0x5e8c
   140dc:	movt	r1, #5
   140e0:	ldrb	r1, [r1, #14]
   140e4:	cmp	r1, #0
   140e8:	beq	140fc <__assert_fail@plt+0x150c>
   140ec:	mov	r0, #0
   140f0:	str	r0, [r6]
   140f4:	mov	r0, r4
   140f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   140fc:	cmp	r7, #0
   14100:	cmpeq	r0, #21
   14104:	beq	14158 <__assert_fail@plt+0x1568>
   14108:	ldr	r6, [r6]
   1410c:	mov	r4, #0
   14110:	movw	r1, #61748	; 0xf134
   14114:	movt	r1, #3
   14118:	mov	r0, #0
   1411c:	mov	r2, #5
   14120:	bl	12674 <dcgettext@plt>
   14124:	mov	r7, r0
   14128:	mov	r0, #0
   1412c:	mov	r1, r8
   14130:	bl	1939c <__assert_fail@plt+0x67ac>
   14134:	mov	r3, r0
   14138:	mov	r0, #0
   1413c:	mov	r1, r6
   14140:	mov	r2, r7
   14144:	bl	127b8 <error@plt>
   14148:	mov	r0, #1
   1414c:	str	r0, [r5, #28]
   14150:	mov	r0, r4
   14154:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14158:	mov	r0, #512	; 0x200
   1415c:	bl	14170 <__assert_fail@plt+0x1580>
   14160:	cmp	r0, #0
   14164:	beq	14108 <__assert_fail@plt+0x1518>
   14168:	mov	r0, r4
   1416c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14170:	push	{fp, lr}
   14174:	mov	fp, sp
   14178:	mov	r2, r0
   1417c:	movw	r0, #24160	; 0x5e60
   14180:	movt	r0, #5
   14184:	ldr	r1, [r0, #12]
   14188:	ldr	r0, [r0, #16]
   1418c:	bl	12560 <unlinkat@plt>
   14190:	clz	r0, r0
   14194:	lsr	r0, r0, #5
   14198:	pop	{fp, pc}
   1419c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   141a0:	add	fp, sp, #24
   141a4:	mov	r8, r0
   141a8:	ldr	r0, [r1, #16]
   141ac:	and	r0, r0, #61440	; 0xf000
   141b0:	cmp	r0, #32768	; 0x8000
   141b4:	beq	1422c <__assert_fail@plt+0x163c>
   141b8:	mov	r4, #0
   141bc:	cmp	r0, #16384	; 0x4000
   141c0:	bne	1423c <__assert_fail@plt+0x164c>
   141c4:	bl	12908 <__errno_location@plt>
   141c8:	mov	r6, r0
   141cc:	mov	r4, #0
   141d0:	str	r4, [r0]
   141d4:	movw	r9, #24160	; 0x5e60
   141d8:	movt	r9, #5
   141dc:	ldr	r1, [r9, #12]
   141e0:	ldr	r0, [r9, #16]
   141e4:	movw	r2, #18688	; 0x4900
   141e8:	movt	r2, #10
   141ec:	bl	25648 <__assert_fail@plt+0x12a58>
   141f0:	cmn	r0, #1
   141f4:	ble	14280 <__assert_fail@plt+0x1690>
   141f8:	mov	r5, r0
   141fc:	bl	12aac <fdopendir@plt>
   14200:	cmp	r0, #0
   14204:	beq	14288 <__assert_fail@plt+0x1698>
   14208:	mov	r7, r0
   1420c:	mov	r0, #0
   14210:	str	r0, [r6]
   14214:	mov	r0, r7
   14218:	bl	12aa0 <readdir64@plt>
   1421c:	cmp	r0, #0
   14220:	beq	142cc <__assert_fail@plt+0x16dc>
   14224:	mov	r4, #0
   14228:	b	14254 <__assert_fail@plt+0x1664>
   1422c:	ldrd	r0, [r1, #48]	; 0x30
   14230:	orr	r0, r0, r1
   14234:	clz	r0, r0
   14238:	lsr	r4, r0, #5
   1423c:	mov	r0, r4
   14240:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14244:	mov	r0, r7
   14248:	bl	12aa0 <readdir64@plt>
   1424c:	cmp	r0, #0
   14250:	beq	142cc <__assert_fail@plt+0x16dc>
   14254:	ldrb	r1, [r0, #19]
   14258:	cmp	r1, #46	; 0x2e
   1425c:	bne	142d0 <__assert_fail@plt+0x16e0>
   14260:	ldrb	r1, [r0, #20]
   14264:	cmp	r1, #0
   14268:	beq	14244 <__assert_fail@plt+0x1654>
   1426c:	cmp	r1, #46	; 0x2e
   14270:	ldrbeq	r0, [r0, #21]
   14274:	cmpeq	r0, #0
   14278:	bne	142d0 <__assert_fail@plt+0x16e0>
   1427c:	b	14244 <__assert_fail@plt+0x1654>
   14280:	ldr	r5, [r6]
   14284:	b	14334 <__assert_fail@plt+0x1744>
   14288:	ldr	r6, [r6]
   1428c:	mov	r4, #0
   14290:	mov	r0, #0
   14294:	mov	r1, r8
   14298:	bl	1939c <__assert_fail@plt+0x67ac>
   1429c:	mov	r3, r0
   142a0:	movw	r2, #19695	; 0x4cef
   142a4:	movt	r2, #4
   142a8:	mov	r0, #0
   142ac:	mov	r1, r6
   142b0:	bl	127b8 <error@plt>
   142b4:	mov	r0, #1
   142b8:	str	r0, [r9, #28]
   142bc:	mov	r0, r5
   142c0:	bl	12ba8 <close@plt>
   142c4:	mov	r0, r4
   142c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   142cc:	mov	r4, #1
   142d0:	ldr	r5, [r6]
   142d4:	cmp	r5, #0
   142d8:	beq	1431c <__assert_fail@plt+0x172c>
   142dc:	mov	r4, #0
   142e0:	mov	r0, #0
   142e4:	mov	r1, r8
   142e8:	bl	1939c <__assert_fail@plt+0x67ac>
   142ec:	mov	r3, r0
   142f0:	movw	r2, #19695	; 0x4cef
   142f4:	movt	r2, #4
   142f8:	mov	r0, #0
   142fc:	mov	r1, r5
   14300:	bl	127b8 <error@plt>
   14304:	mov	r0, #1
   14308:	str	r0, [r9, #28]
   1430c:	mov	r0, r7
   14310:	bl	12bc0 <closedir@plt>
   14314:	mov	r0, r4
   14318:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1431c:	mov	r0, r7
   14320:	bl	12bc0 <closedir@plt>
   14324:	cmp	r0, #0
   14328:	beq	1423c <__assert_fail@plt+0x164c>
   1432c:	ldr	r5, [r6]
   14330:	mov	r4, #0
   14334:	mov	r0, #0
   14338:	mov	r1, r8
   1433c:	bl	1939c <__assert_fail@plt+0x67ac>
   14340:	mov	r3, r0
   14344:	movw	r2, #19695	; 0x4cef
   14348:	movt	r2, #4
   1434c:	mov	r0, #0
   14350:	mov	r1, r5
   14354:	bl	127b8 <error@plt>
   14358:	mov	r0, #1
   1435c:	str	r0, [r9, #28]
   14360:	mov	r0, r4
   14364:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14368:	b	157a8 <__assert_fail@plt+0x2bb8>
   1436c:	movw	r0, #24160	; 0x5e60
   14370:	movt	r0, #5
   14374:	ldr	r0, [r0, #12]
   14378:	b	157a8 <__assert_fail@plt+0x2bb8>
   1437c:	mov	r0, #0
   14380:	bx	lr
   14384:	push	{r4, r5, fp, lr}
   14388:	add	fp, sp, #8
   1438c:	sub	sp, sp, #16
   14390:	mov	ip, r1
   14394:	movw	r1, #24160	; 0x5e60
   14398:	movt	r1, #5
   1439c:	ldr	lr, [r1, #12]
   143a0:	ldr	r1, [r1, #16]
   143a4:	movw	r3, #24204	; 0x5e8c
   143a8:	movt	r3, #5
   143ac:	ldr	r4, [r3, #20]
   143b0:	ldr	r3, [r3, #40]	; 0x28
   143b4:	ldrb	r5, [r2, #32]
   143b8:	ldr	r2, [r2, #44]	; 0x2c
   143bc:	str	r4, [sp]
   143c0:	stmib	sp, {r3, r5}
   143c4:	str	r2, [sp, #12]
   143c8:	mov	r2, lr
   143cc:	mov	r3, ip
   143d0:	bl	207e0 <__assert_fail@plt+0xdbf0>
   143d4:	mov	r0, #1
   143d8:	sub	sp, fp, #8
   143dc:	pop	{r4, r5, fp, pc}
   143e0:	push	{fp, lr}
   143e4:	mov	fp, sp
   143e8:	sub	sp, sp, #8
   143ec:	ldrb	ip, [r2, #52]	; 0x34
   143f0:	ldr	r1, [r2, #56]	; 0x38
   143f4:	ldr	r2, [r2, #44]	; 0x2c
   143f8:	str	r0, [sp]
   143fc:	movw	r3, #17604	; 0x44c4
   14400:	movt	r3, #4
   14404:	mov	r0, r2
   14408:	mov	r2, ip
   1440c:	bl	211f0 <__assert_fail@plt+0xe600>
   14410:	mov	r0, #1
   14414:	mov	sp, fp
   14418:	pop	{fp, pc}
   1441c:	push	{r4, sl, fp, lr}
   14420:	add	fp, sp, #8
   14424:	ldr	r4, [r2, #44]	; 0x2c
   14428:	mov	r1, r4
   1442c:	bl	12b84 <fputs@plt>
   14430:	mov	r0, #0
   14434:	mov	r1, r4
   14438:	bl	12ac4 <putc@plt>
   1443c:	mov	r0, #1
   14440:	pop	{r4, sl, fp, pc}
   14444:	push	{r4, sl, fp, lr}
   14448:	add	fp, sp, #8
   1444c:	mov	r4, r2
   14450:	mov	r2, r0
   14454:	mov	r0, r1
   14458:	mov	r1, r2
   1445c:	bl	1b3b8 <__assert_fail@plt+0x87c8>
   14460:	ldr	r1, [r4, #40]	; 0x28
   14464:	bl	124f4 <strcmp@plt>
   14468:	clz	r0, r0
   1446c:	lsr	r0, r0, #5
   14470:	pop	{r4, sl, fp, pc}
   14474:	ldr	r0, [r2, #40]	; 0x28
   14478:	cmp	r0, #2
   1447c:	beq	144ac <__assert_fail@plt+0x18bc>
   14480:	cmp	r0, #1
   14484:	beq	144cc <__assert_fail@plt+0x18dc>
   14488:	cmp	r0, #0
   1448c:	bne	144c4 <__assert_fail@plt+0x18d4>
   14490:	ldr	r1, [r1, #28]
   14494:	ldrd	r2, [r2, #48]	; 0x30
   14498:	mov	r0, #1
   1449c:	subs	r1, r2, r1
   144a0:	sbcs	r1, r3, #0
   144a4:	bcs	144c4 <__assert_fail@plt+0x18d4>
   144a8:	bx	lr
   144ac:	ldr	r0, [r1, #28]
   144b0:	ldrd	r2, [r2, #48]	; 0x30
   144b4:	eor	r0, r2, r0
   144b8:	orrs	r0, r0, r3
   144bc:	mov	r0, #1
   144c0:	bxeq	lr
   144c4:	mov	r0, #0
   144c8:	bx	lr
   144cc:	ldrd	r2, [r2, #48]	; 0x30
   144d0:	ldr	r1, [r1, #28]
   144d4:	mov	r0, #1
   144d8:	subs	r1, r1, r2
   144dc:	rscs	r1, r3, #0
   144e0:	movcs	r0, #0
   144e4:	bx	lr
   144e8:	ldr	r0, [r1, #28]
   144ec:	ldr	r1, [r2, #40]	; 0x28
   144f0:	sub	r0, r1, r0
   144f4:	clz	r0, r0
   144f8:	lsr	r0, r0, #5
   144fc:	bx	lr
   14500:	mov	r3, #1
   14504:	b	14508 <__assert_fail@plt+0x1918>
   14508:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1450c:	add	fp, sp, #24
   14510:	mov	r8, r0
   14514:	ldr	r0, [r1, #16]
   14518:	and	r0, r0, #61440	; 0xf000
   1451c:	mov	r6, #0
   14520:	cmp	r0, #40960	; 0xa000
   14524:	bne	14598 <__assert_fail@plt+0x19a8>
   14528:	mov	r5, r3
   1452c:	mov	r7, r2
   14530:	movw	r6, #24160	; 0x5e60
   14534:	movt	r6, #5
   14538:	ldr	r1, [r6, #12]
   1453c:	ldr	r0, [r6, #16]
   14540:	bl	219d4 <__assert_fail@plt+0xede4>
   14544:	mov	r4, r0
   14548:	cmp	r0, #0
   1454c:	beq	14574 <__assert_fail@plt+0x1984>
   14550:	ldr	r0, [r7, #40]	; 0x28
   14554:	cmp	r5, #0
   14558:	movwne	r5, #16
   1455c:	mov	r1, r4
   14560:	mov	r2, r5
   14564:	bl	127dc <fnmatch@plt>
   14568:	clz	r0, r0
   1456c:	lsr	r6, r0, #5
   14570:	b	14590 <__assert_fail@plt+0x19a0>
   14574:	bl	12908 <__errno_location@plt>
   14578:	ldr	r0, [r0]
   1457c:	mov	r1, r8
   14580:	bl	18360 <__assert_fail@plt+0x5770>
   14584:	mov	r0, #1
   14588:	str	r0, [r6, #28]
   1458c:	mov	r6, #0
   14590:	mov	r0, r4
   14594:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   14598:	mov	r0, r6
   1459c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   145a0:	ldr	r1, [r2, #40]	; 0x28
   145a4:	mov	r2, #16
   145a8:	b	145ac <__assert_fail@plt+0x19bc>
   145ac:	push	{r4, r5, r6, sl, fp, lr}
   145b0:	add	fp, sp, #16
   145b4:	mov	r4, r2
   145b8:	mov	r5, r1
   145bc:	bl	21f60 <__assert_fail@plt+0xf370>
   145c0:	mov	r6, r0
   145c4:	bl	2207c <__assert_fail@plt+0xf48c>
   145c8:	mov	r0, r5
   145cc:	mov	r1, r6
   145d0:	mov	r2, r4
   145d4:	bl	127dc <fnmatch@plt>
   145d8:	mov	r4, r0
   145dc:	mov	r0, r6
   145e0:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   145e4:	clz	r0, r4
   145e8:	lsr	r0, r0, #5
   145ec:	pop	{r4, r5, r6, sl, fp, pc}
   145f0:	push	{r4, r5, fp, lr}
   145f4:	add	fp, sp, #8
   145f8:	ldr	r0, [r2, #40]	; 0x28
   145fc:	cmp	r0, #2
   14600:	beq	14630 <__assert_fail@plt+0x1a40>
   14604:	cmp	r0, #1
   14608:	beq	1465c <__assert_fail@plt+0x1a6c>
   1460c:	cmp	r0, #0
   14610:	bne	14654 <__assert_fail@plt+0x1a64>
   14614:	ldrd	r4, [r1, #96]	; 0x60
   14618:	ldrd	r2, [r2, #48]	; 0x30
   1461c:	mov	r0, #1
   14620:	subs	r1, r2, r4
   14624:	sbcs	r1, r3, r5
   14628:	bcs	14654 <__assert_fail@plt+0x1a64>
   1462c:	pop	{r4, r5, fp, pc}
   14630:	ldr	r0, [r2, #48]	; 0x30
   14634:	ldr	r3, [r2, #52]	; 0x34
   14638:	ldr	r2, [r1, #96]	; 0x60
   1463c:	ldr	r1, [r1, #100]	; 0x64
   14640:	eor	r1, r1, r3
   14644:	eor	r0, r2, r0
   14648:	orrs	r0, r0, r1
   1464c:	mov	r0, #1
   14650:	popeq	{r4, r5, fp, pc}
   14654:	mov	r0, #0
   14658:	pop	{r4, r5, fp, pc}
   1465c:	ldrd	r2, [r2, #48]	; 0x30
   14660:	ldrd	r4, [r1, #96]	; 0x60
   14664:	mov	r0, #1
   14668:	subs	r1, r4, r2
   1466c:	sbcs	r1, r5, r3
   14670:	movcs	r0, #0
   14674:	pop	{r4, r5, fp, pc}
   14678:	push	{fp, lr}
   1467c:	mov	fp, sp
   14680:	mov	r1, r0
   14684:	ldr	r0, [r2, #40]	; 0x28
   14688:	mov	r2, #16
   1468c:	bl	127dc <fnmatch@plt>
   14690:	clz	r0, r0
   14694:	lsr	r0, r0, #5
   14698:	pop	{fp, pc}
   1469c:	ldr	r0, [r2, #40]	; 0x28
   146a0:	cmp	r0, #2
   146a4:	beq	146d4 <__assert_fail@plt+0x1ae4>
   146a8:	cmp	r0, #1
   146ac:	beq	146f4 <__assert_fail@plt+0x1b04>
   146b0:	cmp	r0, #0
   146b4:	bne	146ec <__assert_fail@plt+0x1afc>
   146b8:	ldr	r1, [r1, #20]
   146bc:	ldrd	r2, [r2, #48]	; 0x30
   146c0:	mov	r0, #1
   146c4:	subs	r1, r2, r1
   146c8:	sbcs	r1, r3, #0
   146cc:	bcs	146ec <__assert_fail@plt+0x1afc>
   146d0:	bx	lr
   146d4:	ldr	r0, [r1, #20]
   146d8:	ldrd	r2, [r2, #48]	; 0x30
   146dc:	eor	r0, r2, r0
   146e0:	orrs	r0, r0, r3
   146e4:	mov	r0, #1
   146e8:	bxeq	lr
   146ec:	mov	r0, #0
   146f0:	bx	lr
   146f4:	ldrd	r2, [r2, #48]	; 0x30
   146f8:	ldr	r1, [r1, #20]
   146fc:	mov	r0, #1
   14700:	subs	r1, r1, r2
   14704:	rscs	r1, r3, #0
   14708:	movcs	r0, #0
   1470c:	bx	lr
   14710:	mov	r3, #0
   14714:	b	14508 <__assert_fail@plt+0x1918>
   14718:	push	{fp, lr}
   1471c:	mov	fp, sp
   14720:	bl	14384 <__assert_fail@plt+0x1794>
   14724:	mov	r0, #1
   14728:	pop	{fp, pc}
   1472c:	push	{r4, sl, fp, lr}
   14730:	add	fp, sp, #8
   14734:	sub	sp, sp, #8
   14738:	mov	r4, r2
   1473c:	mov	r0, sp
   14740:	bl	2b0fc <__assert_fail@plt+0x1850c>
   14744:	ldm	sp, {r0, r1}
   14748:	mov	r2, r4
   1474c:	mov	r3, #60	; 0x3c
   14750:	bl	13d70 <__assert_fail@plt+0x1180>
   14754:	sub	sp, fp, #8
   14758:	pop	{r4, sl, fp, pc}
   1475c:	push	{r4, sl, fp, lr}
   14760:	add	fp, sp, #8
   14764:	sub	sp, sp, #8
   14768:	mov	r4, r2
   1476c:	mov	r0, sp
   14770:	bl	2b0fc <__assert_fail@plt+0x1850c>
   14774:	ldm	sp, {r0, r1}
   14778:	movw	r3, #20864	; 0x5180
   1477c:	movt	r3, #1
   14780:	mov	r2, r4
   14784:	bl	13d70 <__assert_fail@plt+0x1180>
   14788:	sub	sp, fp, #8
   1478c:	pop	{r4, sl, fp, pc}
   14790:	ldr	r1, [r2, #40]	; 0x28
   14794:	mov	r2, #0
   14798:	b	145ac <__assert_fail@plt+0x19bc>
   1479c:	push	{fp, lr}
   147a0:	mov	fp, sp
   147a4:	ldr	r2, [r2, #160]	; 0xa0
   147a8:	bl	19234 <__assert_fail@plt+0x6644>
   147ac:	eor	r0, r0, #1
   147b0:	pop	{fp, pc}
   147b4:	push	{r4, sl, fp, lr}
   147b8:	add	fp, sp, #8
   147bc:	sub	sp, sp, #8
   147c0:	ldr	r0, [r2, #44]	; 0x2c
   147c4:	cmp	r0, #0
   147c8:	bne	147fc <__assert_fail@plt+0x1c0c>
   147cc:	mov	r4, r2
   147d0:	mov	r0, sp
   147d4:	bl	2b0fc <__assert_fail@plt+0x1850c>
   147d8:	ldrd	r2, [r4, #48]	; 0x30
   147dc:	ldm	sp, {r0, r1}
   147e0:	bl	13ed4 <__assert_fail@plt+0x12e4>
   147e4:	mov	r1, #0
   147e8:	cmp	r0, #0
   147ec:	movwgt	r1, #1
   147f0:	mov	r0, r1
   147f4:	sub	sp, fp, #8
   147f8:	pop	{r4, sl, fp, pc}
   147fc:	movw	r0, #61568	; 0xf080
   14800:	movt	r0, #3
   14804:	movw	r1, #61607	; 0xf0a7
   14808:	movt	r1, #3
   1480c:	movw	r3, #61765	; 0xf145
   14810:	movt	r3, #3
   14814:	movw	r2, #621	; 0x26d
   14818:	bl	12bf0 <__assert_fail@plt>
   1481c:	push	{r4, r5, r6, sl, fp, lr}
   14820:	add	fp, sp, #16
   14824:	sub	sp, sp, #8
   14828:	mov	r5, r0
   1482c:	ldr	r0, [r2, #44]	; 0x2c
   14830:	cmp	r0, #0
   14834:	bne	14910 <__assert_fail@plt+0x1d20>
   14838:	mov	r4, r2
   1483c:	ldr	r0, [r2, #40]	; 0x28
   14840:	cmp	r0, #4
   14844:	bhi	14930 <__assert_fail@plt+0x1d40>
   14848:	add	r2, pc, #0
   1484c:	ldr	pc, [r2, r0, lsl #2]
   14850:	andeq	r4, r1, r4, ror #16
   14854:			; <UNDEFINED> instruction: 0x000148b4
   14858:	andeq	r4, r1, r4, ror r8
   1485c:	andeq	r4, r1, r4, lsl #17
   14860:	andeq	r4, r1, r0, asr r9
   14864:	mov	r5, sp
   14868:	mov	r0, r5
   1486c:	bl	2b0e4 <__assert_fail@plt+0x184f4>
   14870:	b	14890 <__assert_fail@plt+0x1ca0>
   14874:	mov	r5, sp
   14878:	mov	r0, r5
   1487c:	bl	2b0f0 <__assert_fail@plt+0x18500>
   14880:	b	14890 <__assert_fail@plt+0x1ca0>
   14884:	mov	r5, sp
   14888:	mov	r0, r5
   1488c:	bl	2b0fc <__assert_fail@plt+0x1850c>
   14890:	ldm	r5, {r0, r1}
   14894:	ldrd	r2, [r4, #48]	; 0x30
   14898:	bl	13ed4 <__assert_fail@plt+0x12e4>
   1489c:	mov	r4, #0
   148a0:	cmp	r0, #0
   148a4:	movwgt	r4, #1
   148a8:	mov	r0, r4
   148ac:	sub	sp, fp, #16
   148b0:	pop	{r4, r5, r6, sl, fp, pc}
   148b4:	mov	r0, sp
   148b8:	bl	2b108 <__assert_fail@plt+0x18518>
   148bc:	ldr	r1, [sp, #4]
   148c0:	cmn	r1, #1
   148c4:	ble	148d0 <__assert_fail@plt+0x1ce0>
   148c8:	ldr	r0, [sp]
   148cc:	b	14894 <__assert_fail@plt+0x1ca4>
   148d0:	mov	r4, #0
   148d4:	movw	r1, #61940	; 0xf1f4
   148d8:	movt	r1, #3
   148dc:	mov	r0, #0
   148e0:	mov	r2, #5
   148e4:	bl	12674 <dcgettext@plt>
   148e8:	mov	r6, r0
   148ec:	mov	r0, #0
   148f0:	mov	r1, r5
   148f4:	bl	1939c <__assert_fail@plt+0x67ac>
   148f8:	mov	r3, r0
   148fc:	mov	r0, #0
   14900:	mov	r1, #0
   14904:	mov	r2, r6
   14908:	bl	127b8 <error@plt>
   1490c:	b	148a8 <__assert_fail@plt+0x1cb8>
   14910:	movw	r0, #61568	; 0xf080
   14914:	movt	r0, #3
   14918:	movw	r1, #61607	; 0xf0a7
   1491c:	movt	r1, #3
   14920:	movw	r3, #61831	; 0xf187
   14924:	movt	r3, #3
   14928:	movw	r2, #631	; 0x277
   1492c:	bl	12bf0 <__assert_fail@plt>
   14930:	movw	r0, #61988	; 0xf224
   14934:	movt	r0, #3
   14938:	movw	r1, #61607	; 0xf0a7
   1493c:	movt	r1, #3
   14940:	movw	r3, #61831	; 0xf187
   14944:	movt	r3, #3
   14948:	movw	r2, #667	; 0x29b
   1494c:	bl	12bf0 <__assert_fail@plt>
   14950:	movw	r0, #61899	; 0xf1cb
   14954:	movt	r0, #3
   14958:	movw	r1, #61607	; 0xf0a7
   1495c:	movt	r1, #3
   14960:	movw	r3, #61831	; 0xf187
   14964:	movt	r3, #3
   14968:	mov	r2, #636	; 0x27c
   1496c:	bl	12bf0 <__assert_fail@plt>
   14970:	push	{fp, lr}
   14974:	mov	fp, sp
   14978:	ldr	r0, [r1, #28]
   1497c:	bl	12bcc <getgrgid@plt>
   14980:	clz	r0, r0
   14984:	lsr	r0, r0, #5
   14988:	pop	{fp, pc}
   1498c:	push	{fp, lr}
   14990:	mov	fp, sp
   14994:	ldr	r0, [r1, #24]
   14998:	bl	1250c <getpwuid@plt>
   1499c:	clz	r0, r0
   149a0:	lsr	r0, r0, #5
   149a4:	pop	{fp, pc}
   149a8:	push	{r4, r5, r6, sl, fp, lr}
   149ac:	add	fp, sp, #16
   149b0:	mov	r4, r2
   149b4:	mov	r5, r1
   149b8:	mov	r6, r0
   149bc:	ldr	r0, [r2, #132]	; 0x84
   149c0:	ldr	r0, [r0]
   149c4:	mov	r1, r6
   149c8:	bl	149f0 <__assert_fail@plt+0x1e00>
   149cc:	cmp	r0, #0
   149d0:	beq	149e8 <__assert_fail@plt+0x1df8>
   149d4:	mov	r0, r6
   149d8:	mov	r1, r5
   149dc:	mov	r2, r4
   149e0:	pop	{r4, r5, r6, sl, fp, lr}
   149e4:	b	157a8 <__assert_fail@plt+0x2bb8>
   149e8:	mov	r0, #0
   149ec:	pop	{r4, r5, r6, sl, fp, pc}
   149f0:	push	{r4, r5, r6, r7, fp, lr}
   149f4:	add	fp, sp, #16
   149f8:	mov	r4, r1
   149fc:	mov	r5, r0
   14a00:	movw	r0, #21876	; 0x5574
   14a04:	movt	r0, #5
   14a08:	ldr	r0, [r0]
   14a0c:	bl	2ca6c <__assert_fail@plt+0x19e7c>
   14a10:	movw	r7, #21864	; 0x5568
   14a14:	movt	r7, #5
   14a18:	ldr	r6, [r7]
   14a1c:	movw	r1, #62656	; 0xf4c0
   14a20:	movt	r1, #3
   14a24:	mov	r0, #0
   14a28:	mov	r2, #5
   14a2c:	bl	12674 <dcgettext@plt>
   14a30:	mov	r1, r0
   14a34:	mov	r0, r6
   14a38:	mov	r2, r5
   14a3c:	mov	r3, r4
   14a40:	bl	128fc <fprintf@plt>
   14a44:	cmn	r0, #1
   14a48:	ble	14a5c <__assert_fail@plt+0x1e6c>
   14a4c:	ldr	r0, [r7]
   14a50:	bl	2ca6c <__assert_fail@plt+0x19e7c>
   14a54:	pop	{r4, r5, r6, r7, fp, lr}
   14a58:	b	2c47c <__assert_fail@plt+0x1988c>
   14a5c:	bl	12908 <__errno_location@plt>
   14a60:	ldr	r4, [r0]
   14a64:	movw	r1, #62673	; 0xf4d1
   14a68:	movt	r1, #3
   14a6c:	mov	r0, #0
   14a70:	mov	r2, #5
   14a74:	bl	12674 <dcgettext@plt>
   14a78:	mov	r2, r0
   14a7c:	mov	r0, #1
   14a80:	mov	r1, r4
   14a84:	bl	127b8 <error@plt>
   14a88:	push	{r4, r5, fp, lr}
   14a8c:	add	fp, sp, #8
   14a90:	mov	r4, r2
   14a94:	mov	r5, r1
   14a98:	mov	r1, r0
   14a9c:	ldr	r0, [r2, #132]	; 0x84
   14aa0:	ldr	r0, [r0]
   14aa4:	bl	149f0 <__assert_fail@plt+0x1e00>
   14aa8:	cmp	r0, #0
   14aac:	beq	14acc <__assert_fail@plt+0x1edc>
   14ab0:	movw	r0, #24160	; 0x5e60
   14ab4:	movt	r0, #5
   14ab8:	ldr	r0, [r0, #12]
   14abc:	mov	r1, r5
   14ac0:	mov	r2, r4
   14ac4:	pop	{r4, r5, fp, lr}
   14ac8:	b	157a8 <__assert_fail@plt+0x2bb8>
   14acc:	mov	r0, #0
   14ad0:	pop	{r4, r5, fp, pc}
   14ad4:	mov	r0, #1
   14ad8:	bx	lr
   14adc:	push	{r4, r5, r6, sl, fp, lr}
   14ae0:	add	fp, sp, #16
   14ae4:	mov	r5, r2
   14ae8:	mov	r4, r1
   14aec:	mov	r6, r0
   14af0:	ldr	r2, [r2, #156]	; 0x9c
   14af4:	cmp	r2, #0
   14af8:	beq	14b18 <__assert_fail@plt+0x1f28>
   14afc:	mov	r0, r6
   14b00:	mov	r1, r4
   14b04:	bl	19234 <__assert_fail@plt+0x6644>
   14b08:	cmp	r0, #0
   14b0c:	beq	14b18 <__assert_fail@plt+0x1f28>
   14b10:	mov	r0, #1
   14b14:	pop	{r4, r5, r6, sl, fp, pc}
   14b18:	ldr	r2, [r5, #160]	; 0xa0
   14b1c:	mov	r0, r6
   14b20:	mov	r1, r4
   14b24:	pop	{r4, r5, r6, sl, fp, lr}
   14b28:	b	19234 <__assert_fail@plt+0x6644>
   14b2c:	push	{fp, lr}
   14b30:	mov	fp, sp
   14b34:	mov	r1, r0
   14b38:	ldr	r0, [r2, #40]	; 0x28
   14b3c:	mov	r2, #0
   14b40:	bl	127dc <fnmatch@plt>
   14b44:	clz	r0, r0
   14b48:	lsr	r0, r0, #5
   14b4c:	pop	{fp, pc}
   14b50:	push	{fp, lr}
   14b54:	mov	fp, sp
   14b58:	ldr	r3, [r2, #40]!	; 0x28
   14b5c:	ldr	r0, [r1, #16]
   14b60:	and	r1, r0, #61440	; 0xf000
   14b64:	sub	r1, r1, #16384	; 0x4000
   14b68:	clz	r1, r1
   14b6c:	lsr	r1, r1, #5
   14b70:	add	r1, r2, r1, lsl #2
   14b74:	ldr	r1, [r1, #4]
   14b78:	cmp	r3, #2
   14b7c:	beq	14bac <__assert_fail@plt+0x1fbc>
   14b80:	cmp	r3, #1
   14b84:	beq	14b98 <__assert_fail@plt+0x1fa8>
   14b88:	cmp	r3, #0
   14b8c:	bne	14bc8 <__assert_fail@plt+0x1fd8>
   14b90:	and	r0, r1, r0
   14b94:	b	14bb0 <__assert_fail@plt+0x1fc0>
   14b98:	cmp	r1, #0
   14b9c:	beq	14bc0 <__assert_fail@plt+0x1fd0>
   14ba0:	ands	r0, r1, r0
   14ba4:	movwne	r0, #1
   14ba8:	pop	{fp, pc}
   14bac:	bfc	r0, #12, #20
   14bb0:	sub	r0, r0, r1
   14bb4:	clz	r0, r0
   14bb8:	lsr	r0, r0, #5
   14bbc:	pop	{fp, pc}
   14bc0:	mov	r0, #1
   14bc4:	pop	{fp, pc}
   14bc8:	bl	12b9c <abort@plt>
   14bcc:	push	{fp, lr}
   14bd0:	mov	fp, sp
   14bd4:	movw	r0, #24160	; 0x5e60
   14bd8:	movt	r0, #5
   14bdc:	ldr	r1, [r0, #12]
   14be0:	ldr	r0, [r0, #16]
   14be4:	mov	r2, #1
   14be8:	mov	r3, #0
   14bec:	bl	125a8 <faccessat@plt>
   14bf0:	clz	r0, r0
   14bf4:	lsr	r0, r0, #5
   14bf8:	pop	{fp, pc}
   14bfc:	push	{fp, lr}
   14c00:	mov	fp, sp
   14c04:	movw	r0, #24160	; 0x5e60
   14c08:	movt	r0, #5
   14c0c:	ldr	r1, [r0, #12]
   14c10:	ldr	r0, [r0, #16]
   14c14:	mov	r2, #4
   14c18:	mov	r3, #0
   14c1c:	bl	125a8 <faccessat@plt>
   14c20:	clz	r0, r0
   14c24:	lsr	r0, r0, #5
   14c28:	pop	{fp, pc}
   14c2c:	push	{fp, lr}
   14c30:	mov	fp, sp
   14c34:	movw	r0, #24160	; 0x5e60
   14c38:	movt	r0, #5
   14c3c:	ldr	r1, [r0, #12]
   14c40:	ldr	r0, [r0, #16]
   14c44:	mov	r2, #2
   14c48:	mov	r3, #0
   14c4c:	bl	125a8 <faccessat@plt>
   14c50:	clz	r0, r0
   14c54:	lsr	r0, r0, #5
   14c58:	pop	{fp, pc}
   14c5c:	push	{fp, lr}
   14c60:	mov	fp, sp
   14c64:	sub	sp, sp, #8
   14c68:	ldrb	ip, [r2, #52]	; 0x34
   14c6c:	ldr	r1, [r2, #56]	; 0x38
   14c70:	ldr	r2, [r2, #44]	; 0x2c
   14c74:	str	r0, [sp]
   14c78:	movw	r3, #17604	; 0x44c4
   14c7c:	movt	r3, #4
   14c80:	mov	r0, r2
   14c84:	mov	r2, ip
   14c88:	bl	211f0 <__assert_fail@plt+0xe600>
   14c8c:	mov	r0, #1
   14c90:	mov	sp, fp
   14c94:	pop	{fp, pc}
   14c98:	push	{fp, lr}
   14c9c:	mov	fp, sp
   14ca0:	bl	1441c <__assert_fail@plt+0x182c>
   14ca4:	mov	r0, #1
   14ca8:	pop	{fp, pc}
   14cac:	push	{fp, lr}
   14cb0:	mov	fp, sp
   14cb4:	movw	r0, #24204	; 0x5e8c
   14cb8:	movt	r0, #5
   14cbc:	ldrb	r0, [r0]
   14cc0:	cmp	r0, #0
   14cc4:	beq	14cf8 <__assert_fail@plt+0x2108>
   14cc8:	movw	r0, #24160	; 0x5e60
   14ccc:	movt	r0, #5
   14cd0:	ldrb	r2, [r0, #4]
   14cd4:	cmp	r2, #0
   14cd8:	beq	14d00 <__assert_fail@plt+0x2110>
   14cdc:	cmp	r1, #0
   14ce0:	beq	14cf8 <__assert_fail@plt+0x2108>
   14ce4:	ldr	r1, [r1, #16]
   14ce8:	and	r1, r1, #61440	; 0xf000
   14cec:	cmp	r1, #16384	; 0x4000
   14cf0:	moveq	r1, #1
   14cf4:	strbeq	r1, [r0, #24]
   14cf8:	mov	r0, #1
   14cfc:	pop	{fp, pc}
   14d00:	movw	r0, #60927	; 0xedff
   14d04:	movt	r0, #3
   14d08:	movw	r1, #61607	; 0xf0a7
   14d0c:	movt	r1, #3
   14d10:	movw	r3, #61998	; 0xf22e
   14d14:	movt	r3, #3
   14d18:	movw	r2, #853	; 0x355
   14d1c:	bl	12bf0 <__assert_fail@plt>
   14d20:	push	{fp, lr}
   14d24:	mov	fp, sp
   14d28:	bl	18610 <__assert_fail@plt+0x5a20>
   14d2c:	movw	r0, #24160	; 0x5e60
   14d30:	movt	r0, #5
   14d34:	ldr	r0, [r0, #28]
   14d38:	bl	12884 <exit@plt>
   14d3c:	push	{r4, r5, r6, sl, fp, lr}
   14d40:	add	fp, sp, #16
   14d44:	sub	sp, sp, #8
   14d48:	mov	r4, r2
   14d4c:	mov	r5, r0
   14d50:	bl	128c0 <strlen@plt>
   14d54:	mov	r6, r0
   14d58:	ldr	r0, [r4, #40]	; 0x28
   14d5c:	mov	r1, #0
   14d60:	str	r1, [sp]
   14d64:	mov	r1, r5
   14d68:	mov	r2, r6
   14d6c:	mov	r3, #0
   14d70:	bl	30bc8 <__assert_fail@plt+0x1dfd8>
   14d74:	sub	r0, r0, r6
   14d78:	clz	r0, r0
   14d7c:	lsr	r0, r0, #5
   14d80:	sub	sp, fp, #16
   14d84:	pop	{r4, r5, r6, sl, fp, pc}
   14d88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d8c:	add	fp, sp, #28
   14d90:	sub	sp, sp, #4
   14d94:	mov	sl, r2
   14d98:	ldrd	r8, [r1, #48]	; 0x30
   14d9c:	ldrd	r6, [r2, #40]	; 0x28
   14da0:	asr	r5, r7, #31
   14da4:	mov	r0, r8
   14da8:	mov	r1, r9
   14dac:	mov	r2, r7
   14db0:	mov	r3, r5
   14db4:	bl	3e700 <__assert_fail@plt+0x2bb10>
   14db8:	umull	r4, r2, r0, r7
   14dbc:	mla	r2, r0, r5, r2
   14dc0:	mla	r7, r1, r7, r2
   14dc4:	adds	r2, r0, #1
   14dc8:	adc	r3, r1, #0
   14dcc:	subs	r5, r8, r4
   14dd0:	sbc	r7, r9, r7
   14dd4:	orrs	r7, r5, r7
   14dd8:	moveq	r3, r1
   14ddc:	moveq	r2, r0
   14de0:	cmp	r6, #2
   14de4:	beq	14e14 <__assert_fail@plt+0x2224>
   14de8:	cmp	r6, #1
   14dec:	beq	14e38 <__assert_fail@plt+0x2248>
   14df0:	cmp	r6, #0
   14df4:	bne	14e2c <__assert_fail@plt+0x223c>
   14df8:	ldrd	r4, [sl, #48]	; 0x30
   14dfc:	mov	r0, #1
   14e00:	subs	r1, r4, r2
   14e04:	sbcs	r1, r5, r3
   14e08:	bcs	14e2c <__assert_fail@plt+0x223c>
   14e0c:	sub	sp, fp, #28
   14e10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e14:	ldrd	r0, [sl, #48]	; 0x30
   14e18:	eor	r1, r3, r1
   14e1c:	eor	r0, r2, r0
   14e20:	orrs	r0, r0, r1
   14e24:	mov	r0, #1
   14e28:	beq	14e0c <__assert_fail@plt+0x221c>
   14e2c:	mov	r0, #0
   14e30:	sub	sp, fp, #28
   14e34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e38:	ldrd	r4, [sl, #48]	; 0x30
   14e3c:	mov	r0, #1
   14e40:	subs	r1, r2, r4
   14e44:	sbcs	r1, r3, r5
   14e48:	movcs	r0, #0
   14e4c:	sub	sp, fp, #28
   14e50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e54:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14e58:	add	fp, sp, #24
   14e5c:	mov	r5, r2
   14e60:	mov	r4, r1
   14e64:	mov	r2, r0
   14e68:	mov	r6, r1
   14e6c:	ldr	r0, [r6, #96]!	; 0x60
   14e70:	ldr	r1, [r6, #4]
   14e74:	orrs	r3, r0, r1
   14e78:	add	r7, r5, #40	; 0x28
   14e7c:	beq	14e98 <__assert_fail@plt+0x22a8>
   14e80:	ldrd	r8, [r7]
   14e84:	eor	r1, r1, r9
   14e88:	eor	r0, r0, r8
   14e8c:	orrs	r0, r0, r1
   14e90:	mov	r0, #0
   14e94:	bne	14ef8 <__assert_fail@plt+0x2308>
   14e98:	movw	r0, #24160	; 0x5e60
   14e9c:	movt	r0, #5
   14ea0:	ldr	r1, [r0, #12]
   14ea4:	mov	r0, r2
   14ea8:	mov	r2, r4
   14eac:	bl	18274 <__assert_fail@plt+0x5684>
   14eb0:	mov	r1, r0
   14eb4:	mov	r0, #0
   14eb8:	cmp	r1, #0
   14ebc:	bne	14ef8 <__assert_fail@plt+0x2308>
   14ec0:	ldrd	r2, [r7]
   14ec4:	ldrd	r6, [r6]
   14ec8:	eor	r1, r7, r3
   14ecc:	eor	r2, r6, r2
   14ed0:	orrs	r1, r2, r1
   14ed4:	bne	14ef8 <__assert_fail@plt+0x2308>
   14ed8:	add	r0, r5, #48	; 0x30
   14edc:	ldrd	r0, [r0]
   14ee0:	ldrd	r2, [r4]
   14ee4:	eor	r1, r3, r1
   14ee8:	eor	r0, r2, r0
   14eec:	orr	r0, r0, r1
   14ef0:	clz	r0, r0
   14ef4:	lsr	r0, r0, #5
   14ef8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14efc:	mov	r0, #1
   14f00:	bx	lr
   14f04:	push	{fp, lr}
   14f08:	mov	fp, sp
   14f0c:	movw	ip, #24160	; 0x5e60
   14f10:	movt	ip, #5
   14f14:	ldrb	r0, [ip, #5]
   14f18:	cmp	r0, #0
   14f1c:	beq	14f90 <__assert_fail@plt+0x23a0>
   14f20:	ldr	r3, [ip, #8]
   14f24:	mov	r0, #0
   14f28:	cmp	r3, #0
   14f2c:	popeq	{fp, pc}
   14f30:	ldrb	r0, [ip, #4]
   14f34:	cmp	r0, #0
   14f38:	ldrne	r3, [r1, #16]
   14f3c:	and	r0, r3, #61440	; 0xf000
   14f40:	sub	r0, r0, #4096	; 0x1000
   14f44:	lsr	r1, r0, #14
   14f48:	cmp	r1, #2
   14f4c:	bhi	14f68 <__assert_fail@plt+0x2378>
   14f50:	lsr	r1, r0, #12
   14f54:	uxth	r3, r1
   14f58:	movw	ip, #2731	; 0xaab
   14f5c:	mov	r0, #1
   14f60:	tst	r0, ip, lsr r3
   14f64:	bne	14f70 <__assert_fail@plt+0x2380>
   14f68:	mov	r0, #0
   14f6c:	pop	{fp, pc}
   14f70:	movw	r3, #62712	; 0xf4f8
   14f74:	movt	r3, #3
   14f78:	ldr	r1, [r3, r1, lsl #2]
   14f7c:	add	r1, r2, r1
   14f80:	ldrb	r1, [r1, #40]	; 0x28
   14f84:	cmp	r1, #0
   14f88:	moveq	r0, #0
   14f8c:	pop	{fp, pc}
   14f90:	movw	r0, #62064	; 0xf270
   14f94:	movt	r0, #3
   14f98:	movw	r1, #61607	; 0xf0a7
   14f9c:	movt	r1, #3
   14fa0:	movw	r3, #62080	; 0xf280
   14fa4:	movt	r3, #3
   14fa8:	movw	r2, #977	; 0x3d1
   14fac:	bl	12bf0 <__assert_fail@plt>
   14fb0:	ldr	r0, [r2, #40]	; 0x28
   14fb4:	cmp	r0, #2
   14fb8:	beq	14fe8 <__assert_fail@plt+0x23f8>
   14fbc:	cmp	r0, #1
   14fc0:	beq	15008 <__assert_fail@plt+0x2418>
   14fc4:	cmp	r0, #0
   14fc8:	bne	15000 <__assert_fail@plt+0x2410>
   14fcc:	ldr	r1, [r1, #24]
   14fd0:	ldrd	r2, [r2, #48]	; 0x30
   14fd4:	mov	r0, #1
   14fd8:	subs	r1, r2, r1
   14fdc:	sbcs	r1, r3, #0
   14fe0:	bcs	15000 <__assert_fail@plt+0x2410>
   14fe4:	bx	lr
   14fe8:	ldr	r0, [r1, #24]
   14fec:	ldrd	r2, [r2, #48]	; 0x30
   14ff0:	eor	r0, r2, r0
   14ff4:	orrs	r0, r0, r3
   14ff8:	mov	r0, #1
   14ffc:	bxeq	lr
   15000:	mov	r0, #0
   15004:	bx	lr
   15008:	ldrd	r2, [r2, #48]	; 0x30
   1500c:	ldr	r1, [r1, #24]
   15010:	mov	r0, #1
   15014:	subs	r1, r1, r2
   15018:	rscs	r1, r3, #0
   1501c:	movcs	r0, #0
   15020:	bx	lr
   15024:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15028:	add	fp, sp, #24
   1502c:	sub	sp, sp, #8
   15030:	mov	r8, r2
   15034:	mov	r4, r1
   15038:	mov	r0, sp
   1503c:	bl	2b0e4 <__assert_fail@plt+0x184f4>
   15040:	ldm	sp, {r5, r6}
   15044:	mov	r0, sp
   15048:	mov	r1, r4
   1504c:	bl	2b0f0 <__assert_fail@plt+0x18500>
   15050:	ldr	r7, [sp]
   15054:	ldr	r4, [sp, #4]
   15058:	mov	r0, r5
   1505c:	mov	r1, r6
   15060:	mov	r2, r7
   15064:	mov	r3, r4
   15068:	bl	13ed4 <__assert_fail@plt+0x12e4>
   1506c:	cmp	r0, #0
   15070:	bmi	150a4 <__assert_fail@plt+0x24b4>
   15074:	subs	r1, r4, r6
   15078:	sub	r0, r7, r5
   1507c:	add	r0, r0, r1, asr #31
   15080:	movw	r2, #51712	; 0xca00
   15084:	movt	r2, #15258	; 0x3b9a
   15088:	addmi	r1, r1, r2
   1508c:	movw	r3, #20864	; 0x5180
   15090:	movt	r3, #1
   15094:	mov	r2, r8
   15098:	bl	13d70 <__assert_fail@plt+0x1180>
   1509c:	sub	sp, fp, #24
   150a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   150a4:	mov	r0, #0
   150a8:	sub	sp, fp, #24
   150ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   150b0:	ldr	r0, [r1, #24]
   150b4:	ldr	r1, [r2, #40]	; 0x28
   150b8:	sub	r0, r1, r0
   150bc:	clz	r0, r0
   150c0:	lsr	r0, r0, #5
   150c4:	bx	lr
   150c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   150cc:	add	fp, sp, #24
   150d0:	sub	sp, sp, #104	; 0x68
   150d4:	mov	r4, r2
   150d8:	mov	r8, r1
   150dc:	mov	r5, r0
   150e0:	bl	18abc <__assert_fail@plt+0x5ecc>
   150e4:	mov	r7, r0
   150e8:	mov	r6, sp
   150ec:	mov	r0, r6
   150f0:	bl	18270 <__assert_fail@plt+0x5680>
   150f4:	movw	r0, #35244	; 0x89ac
   150f8:	movt	r0, #1
   150fc:	movw	r2, #35116	; 0x892c
   15100:	movt	r2, #1
   15104:	cmp	r7, #0
   15108:	movne	r2, r0
   1510c:	movw	r7, #24160	; 0x5e60
   15110:	movt	r7, #5
   15114:	ldr	r0, [r7, #12]
   15118:	mov	r1, r6
   1511c:	blx	r2
   15120:	cmp	r0, #0
   15124:	beq	15188 <__assert_fail@plt+0x2598>
   15128:	bl	18abc <__assert_fail@plt+0x5ecc>
   1512c:	cmp	r0, #0
   15130:	beq	1514c <__assert_fail@plt+0x255c>
   15134:	bl	12908 <__errno_location@plt>
   15138:	ldr	r0, [r0]
   1513c:	cmp	r0, #2
   15140:	bne	1514c <__assert_fail@plt+0x255c>
   15144:	mov	r1, r8
   15148:	b	1518c <__assert_fail@plt+0x259c>
   1514c:	bl	12908 <__errno_location@plt>
   15150:	ldr	r6, [r0]
   15154:	mov	r4, #0
   15158:	mov	r0, #0
   1515c:	mov	r1, r5
   15160:	bl	1939c <__assert_fail@plt+0x67ac>
   15164:	mov	r3, r0
   15168:	movw	r2, #19695	; 0x4cef
   1516c:	movt	r2, #4
   15170:	mov	r0, #0
   15174:	mov	r1, r6
   15178:	bl	127b8 <error@plt>
   1517c:	mov	r0, #1
   15180:	str	r0, [r7, #28]
   15184:	b	15198 <__assert_fail@plt+0x25a8>
   15188:	mov	r1, sp
   1518c:	mov	r2, r4
   15190:	bl	14f04 <__assert_fail@plt+0x2314>
   15194:	mov	r4, r0
   15198:	mov	r0, r4
   1519c:	sub	sp, fp, #24
   151a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   151a4:	push	{r4, r5, r6, r7, fp, lr}
   151a8:	add	fp, sp, #16
   151ac:	sub	sp, sp, #8
   151b0:	mov	r5, r2
   151b4:	mov	r4, r0
   151b8:	movw	r0, #24204	; 0x5e8c
   151bc:	movt	r0, #5
   151c0:	ldr	r3, [r0, #64]	; 0x40
   151c4:	movw	r0, #24160	; 0x5e60
   151c8:	movt	r0, #5
   151cc:	ldr	r1, [r0, #12]
   151d0:	ldr	r0, [r0, #16]
   151d4:	add	r2, sp, #4
   151d8:	blx	r3
   151dc:	cmn	r0, #1
   151e0:	ble	1520c <__assert_fail@plt+0x261c>
   151e4:	ldr	r0, [r5, #40]	; 0x28
   151e8:	ldr	r1, [sp, #4]
   151ec:	mov	r2, #0
   151f0:	bl	127dc <fnmatch@plt>
   151f4:	mov	r4, r0
   151f8:	ldr	r0, [sp, #4]
   151fc:	bl	12b00 <freecon@plt>
   15200:	clz	r0, r4
   15204:	lsr	r5, r0, #5
   15208:	b	15250 <__assert_fail@plt+0x2660>
   1520c:	bl	12908 <__errno_location@plt>
   15210:	ldr	r6, [r0]
   15214:	mov	r5, #0
   15218:	movw	r1, #62145	; 0xf2c1
   1521c:	movt	r1, #3
   15220:	mov	r0, #0
   15224:	mov	r2, #5
   15228:	bl	12674 <dcgettext@plt>
   1522c:	mov	r7, r0
   15230:	mov	r0, #0
   15234:	mov	r1, r4
   15238:	bl	1939c <__assert_fail@plt+0x67ac>
   1523c:	mov	r3, r0
   15240:	mov	r0, #0
   15244:	mov	r1, r6
   15248:	mov	r2, r7
   1524c:	bl	127b8 <error@plt>
   15250:	mov	r0, r5
   15254:	sub	sp, fp, #16
   15258:	pop	{r4, r5, r6, r7, fp, pc}
   1525c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15260:	add	fp, sp, #24
   15264:	sub	sp, sp, #256	; 0x100
   15268:	mov	r4, r0
   1526c:	cmp	r1, #0
   15270:	beq	152ac <__assert_fail@plt+0x26bc>
   15274:	mov	r5, r1
   15278:	mov	r6, sp
   1527c:	movw	r7, #62167	; 0xf2d7
   15280:	movt	r7, #3
   15284:	ldr	r0, [r5, #4]
   15288:	mov	r1, r6
   1528c:	bl	152c0 <__assert_fail@plt+0x26d0>
   15290:	mov	r2, r0
   15294:	mov	r0, r4
   15298:	mov	r1, r7
   1529c:	bl	128fc <fprintf@plt>
   152a0:	ldr	r5, [r5, #152]	; 0x98
   152a4:	cmp	r5, #0
   152a8:	bne	15284 <__assert_fail@plt+0x2694>
   152ac:	mov	r0, #10
   152b0:	mov	r1, r4
   152b4:	bl	12a70 <fputc@plt>
   152b8:	sub	sp, fp, #24
   152bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   152c0:	push	{r4, sl, fp, lr}
   152c4:	add	fp, sp, #8
   152c8:	cmp	r0, #0
   152cc:	beq	1532c <__assert_fail@plt+0x273c>
   152d0:	mov	r4, r1
   152d4:	mov	r1, r0
   152d8:	mov	r0, r4
   152dc:	bl	12770 <strcpy@plt>
   152e0:	bl	128c0 <strlen@plt>
   152e4:	subs	r1, r0, #1
   152e8:	bmi	15318 <__assert_fail@plt+0x2728>
   152ec:	sub	r1, r4, #1
   152f0:	ldrb	r2, [r1, r0]
   152f4:	cmp	r2, #32
   152f8:	cmpne	r2, #9
   152fc:	bne	15318 <__assert_fail@plt+0x2728>
   15300:	sub	r2, r0, #1
   15304:	sub	r0, r0, #2
   15308:	cmn	r0, #1
   1530c:	mov	r0, r2
   15310:	bgt	152f0 <__assert_fail@plt+0x2700>
   15314:	b	1531c <__assert_fail@plt+0x272c>
   15318:	mov	r2, r0
   1531c:	mov	r0, #0
   15320:	strb	r0, [r4, r2]
   15324:	mov	r0, r4
   15328:	pop	{r4, sl, fp, pc}
   1532c:	mov	r4, #0
   15330:	mov	r0, r4
   15334:	pop	{r4, sl, fp, pc}
   15338:	cmp	r1, #0
   1533c:	bxeq	lr
   15340:	push	{r4, r5, fp, lr}
   15344:	add	fp, sp, #8
   15348:	sub	sp, sp, #8
   1534c:	mov	r5, r1
   15350:	mov	r4, r0
   15354:	ldr	r1, [r1, #156]	; 0x9c
   15358:	bl	1546c <__assert_fail@plt+0x287c>
   1535c:	ldrb	r0, [r5, #18]
   15360:	ldrb	r1, [r5, #19]
   15364:	ldrb	r2, [r5, #20]
   15368:	movw	ip, #2407	; 0x967
   1536c:	movt	ip, #4
   15370:	movw	r3, #62206	; 0xf2fe
   15374:	movt	r3, #3
   15378:	cmp	r2, #0
   1537c:	moveq	r3, ip
   15380:	str	r3, [sp]
   15384:	movw	r2, #62180	; 0xf2e4
   15388:	movt	r2, #3
   1538c:	cmp	r0, #0
   15390:	moveq	r2, ip
   15394:	movw	r3, #62193	; 0xf2f1
   15398:	movt	r3, #3
   1539c:	cmp	r1, #0
   153a0:	moveq	r3, ip
   153a4:	movw	r1, #62173	; 0xf2dd
   153a8:	movt	r1, #3
   153ac:	mov	r0, r4
   153b0:	bl	128fc <fprintf@plt>
   153b4:	mov	r0, r4
   153b8:	mov	r1, r5
   153bc:	bl	1600c <__assert_fail@plt+0x341c>
   153c0:	vldr	s0, [r5, #28]
   153c4:	vcvt.f64.f32	d16, s0
   153c8:	vmov	r2, r3, d16
   153cc:	movw	r1, #62219	; 0xf30b
   153d0:	movt	r1, #3
   153d4:	mov	r0, r4
   153d8:	bl	128fc <fprintf@plt>
   153dc:	movw	r0, #24204	; 0x5e8c
   153e0:	movt	r0, #5
   153e4:	ldrb	r0, [r0, #44]	; 0x2c
   153e8:	tst	r0, #64	; 0x40
   153ec:	beq	15458 <__assert_fail@plt+0x2868>
   153f0:	ldr	r3, [r5, #164]	; 0xa4
   153f4:	ldr	r2, [r5, #168]	; 0xa8
   153f8:	movw	r1, #62245	; 0xf325
   153fc:	movt	r1, #3
   15400:	mov	r0, r4
   15404:	bl	128fc <fprintf@plt>
   15408:	ldr	r0, [r5, #164]	; 0xa4
   1540c:	cmp	r0, #0
   15410:	beq	15440 <__assert_fail@plt+0x2850>
   15414:	vldr	s0, [r5, #168]	; 0xa8
   15418:	vmov	s2, r0
   1541c:	vcvt.f64.u32	d16, s2
   15420:	vcvt.f64.u32	d17, s0
   15424:	vdiv.f64	d16, d17, d16
   15428:	vmov	r2, r3, d16
   1542c:	movw	r1, #62272	; 0xf340
   15430:	movt	r1, #3
   15434:	mov	r0, r4
   15438:	bl	128fc <fprintf@plt>
   1543c:	b	15458 <__assert_fail@plt+0x2868>
   15440:	movw	r0, #62280	; 0xf348
   15444:	movt	r0, #3
   15448:	mov	r1, #4
   1544c:	mov	r2, #1
   15450:	mov	r3, r4
   15454:	bl	12728 <fwrite@plt>
   15458:	ldr	r1, [r5, #160]	; 0xa0
   1545c:	mov	r0, r4
   15460:	sub	sp, fp, #8
   15464:	pop	{r4, r5, fp, lr}
   15468:	b	1546c <__assert_fail@plt+0x287c>
   1546c:	push	{r4, r5, fp, lr}
   15470:	add	fp, sp, #8
   15474:	cmp	r1, #0
   15478:	popeq	{r4, r5, fp, pc}
   1547c:	mov	r5, r1
   15480:	mov	r4, r0
   15484:	movw	r0, #19164	; 0x4adc
   15488:	movt	r0, #1
   1548c:	movw	r1, #15900	; 0x3e1c
   15490:	movt	r1, #1
   15494:	ldr	r2, [r5]
   15498:	cmp	r2, r0
   1549c:	cmpne	r2, r1
   154a0:	bne	154c0 <__assert_fail@plt+0x28d0>
   154a4:	ldr	r2, [r5, #156]	; 0x9c
   154a8:	cmp	r2, #0
   154ac:	bne	154c0 <__assert_fail@plt+0x28d0>
   154b0:	ldr	r5, [r5, #160]	; 0xa0
   154b4:	cmp	r5, #0
   154b8:	bne	15494 <__assert_fail@plt+0x28a4>
   154bc:	pop	{r4, r5, fp, pc}
   154c0:	ldr	r0, [r5, #156]	; 0x9c
   154c4:	cmp	r0, #0
   154c8:	bne	154d8 <__assert_fail@plt+0x28e8>
   154cc:	ldr	r0, [r5, #160]	; 0xa0
   154d0:	cmp	r0, #0
   154d4:	beq	15518 <__assert_fail@plt+0x2928>
   154d8:	movw	r0, #62704	; 0xf4f0
   154dc:	movt	r0, #3
   154e0:	mov	r1, #3
   154e4:	mov	r2, #1
   154e8:	mov	r3, r4
   154ec:	bl	12728 <fwrite@plt>
   154f0:	mov	r0, r4
   154f4:	mov	r1, r5
   154f8:	bl	15338 <__assert_fail@plt+0x2748>
   154fc:	movw	r0, #62708	; 0xf4f4
   15500:	movt	r0, #3
   15504:	mov	r1, #3
   15508:	mov	r2, #1
   1550c:	mov	r3, r4
   15510:	pop	{r4, r5, fp, lr}
   15514:	b	12728 <fwrite@plt>
   15518:	mov	r0, r4
   1551c:	mov	r1, r5
   15520:	pop	{r4, r5, fp, lr}
   15524:	b	15338 <__assert_fail@plt+0x2748>
   15528:	push	{r4, r5, fp, lr}
   1552c:	add	fp, sp, #8
   15530:	mov	r4, r0
   15534:	movw	r0, #24204	; 0x5e8c
   15538:	movt	r0, #5
   1553c:	ldrb	r0, [r0, #44]	; 0x2c
   15540:	tst	r0, #64	; 0x40
   15544:	popeq	{r4, r5, fp, pc}
   15548:	movw	r5, #21864	; 0x5568
   1554c:	movt	r5, #5
   15550:	ldr	r3, [r5]
   15554:	movw	r0, #62285	; 0xf34d
   15558:	movt	r0, #3
   1555c:	mov	r1, #42	; 0x2a
   15560:	mov	r2, #1
   15564:	bl	12728 <fwrite@plt>
   15568:	ldr	r0, [r5]
   1556c:	mov	r1, r4
   15570:	bl	15338 <__assert_fail@plt+0x2748>
   15574:	ldr	r1, [r5]
   15578:	mov	r0, #10
   1557c:	pop	{r4, r5, fp, lr}
   15580:	b	12a70 <fputc@plt>
   15584:	push	{fp, lr}
   15588:	mov	fp, sp
   1558c:	cmp	r0, #0
   15590:	popeq	{fp, pc}
   15594:	movw	lr, #19628	; 0x4cac
   15598:	movt	lr, #1
   1559c:	movw	ip, #19744	; 0x4d20
   155a0:	movt	ip, #1
   155a4:	b	155b4 <__assert_fail@plt+0x29c4>
   155a8:	ldr	r0, [r0, #152]	; 0x98
   155ac:	cmp	r0, #0
   155b0:	beq	1566c <__assert_fail@plt+0x2a7c>
   155b4:	ldr	r3, [r0]
   155b8:	cmp	r3, #0
   155bc:	beq	15690 <__assert_fail@plt+0x2aa0>
   155c0:	ldr	r2, [r0, #172]	; 0xac
   155c4:	cmp	r2, #0
   155c8:	beq	156b0 <__assert_fail@plt+0x2ac0>
   155cc:	ldr	r1, [r2, #12]
   155d0:	cmp	r1, #0
   155d4:	cmpne	r1, r3
   155d8:	bne	15670 <__assert_fail@plt+0x2a80>
   155dc:	ldr	r1, [r2]
   155e0:	cmp	r1, #6
   155e4:	bhi	155a8 <__assert_fail@plt+0x29b8>
   155e8:	add	r2, pc, #0
   155ec:	ldr	pc, [r2, r1, lsl #2]
   155f0:	ldrdeq	r5, [r1], -r0
   155f4:	andeq	r5, r1, ip, lsl #12
   155f8:	strdeq	r5, [r1], -r0
   155fc:	andeq	r5, r1, ip, lsl #12
   15600:	andeq	r5, r1, ip, lsl #12
   15604:	andeq	r5, r1, ip, lsl #12
   15608:	andeq	r5, r1, r8, lsr #12
   1560c:	ldrb	r1, [r0, #17]
   15610:	cmp	r1, #0
   15614:	bne	15710 <__assert_fail@plt+0x2b20>
   15618:	ldrb	r1, [r0, #16]
   1561c:	cmp	r1, #0
   15620:	beq	155a8 <__assert_fail@plt+0x29b8>
   15624:	b	15730 <__assert_fail@plt+0x2b40>
   15628:	ldrb	r1, [r0, #16]
   1562c:	cmp	r1, #0
   15630:	beq	15750 <__assert_fail@plt+0x2b60>
   15634:	cmp	r3, lr
   15638:	cmpne	r3, ip
   1563c:	beq	155a8 <__assert_fail@plt+0x29b8>
   15640:	ldrb	r1, [r0, #17]
   15644:	cmp	r1, #0
   15648:	bne	155a8 <__assert_fail@plt+0x29b8>
   1564c:	movw	r0, #62549	; 0xf455
   15650:	movt	r0, #3
   15654:	movw	r1, #61607	; 0xf0a7
   15658:	movt	r1, #3
   1565c:	movw	r3, #62349	; 0xf38d
   15660:	movt	r3, #3
   15664:	movw	r2, #1349	; 0x545
   15668:	bl	12bf0 <__assert_fail@plt>
   1566c:	pop	{fp, pc}
   15670:	movw	r0, #62422	; 0xf3d6
   15674:	movt	r0, #3
   15678:	movw	r1, #61607	; 0xf0a7
   1567c:	movt	r1, #3
   15680:	movw	r3, #62349	; 0xf38d
   15684:	movt	r3, #3
   15688:	movw	r2, #1322	; 0x52a
   1568c:	bl	12bf0 <__assert_fail@plt>
   15690:	movw	r0, #62328	; 0xf378
   15694:	movt	r0, #3
   15698:	movw	r1, #61607	; 0xf0a7
   1569c:	movt	r1, #3
   156a0:	movw	r3, #62349	; 0xf38d
   156a4:	movt	r3, #3
   156a8:	movw	r2, #1310	; 0x51e
   156ac:	bl	12bf0 <__assert_fail@plt>
   156b0:	movw	r0, #62398	; 0xf3be
   156b4:	movt	r0, #3
   156b8:	movw	r1, #61607	; 0xf0a7
   156bc:	movt	r1, #3
   156c0:	movw	r3, #62349	; 0xf38d
   156c4:	movt	r3, #3
   156c8:	movw	r2, #1313	; 0x521
   156cc:	bl	12bf0 <__assert_fail@plt>
   156d0:	movw	r0, #62465	; 0xf401
   156d4:	movt	r0, #3
   156d8:	movw	r1, #61607	; 0xf0a7
   156dc:	movt	r1, #3
   156e0:	movw	r3, #62349	; 0xf38d
   156e4:	movt	r3, #3
   156e8:	movw	r2, #1338	; 0x53a
   156ec:	bl	12bf0 <__assert_fail@plt>
   156f0:	movw	r0, #62501	; 0xf425
   156f4:	movt	r0, #3
   156f8:	movw	r1, #61607	; 0xf0a7
   156fc:	movt	r1, #3
   15700:	movw	r3, #62349	; 0xf38d
   15704:	movt	r3, #3
   15708:	movw	r2, #1339	; 0x53b
   1570c:	bl	12bf0 <__assert_fail@plt>
   15710:	movw	r0, #62548	; 0xf454
   15714:	movt	r0, #3
   15718:	movw	r1, #61607	; 0xf0a7
   1571c:	movt	r1, #3
   15720:	movw	r3, #62349	; 0xf38d
   15724:	movt	r3, #3
   15728:	movw	r2, #1363	; 0x553
   1572c:	bl	12bf0 <__assert_fail@plt>
   15730:	movw	r0, #62569	; 0xf469
   15734:	movt	r0, #3
   15738:	movw	r1, #61607	; 0xf0a7
   1573c:	movt	r1, #3
   15740:	movw	r3, #62349	; 0xf38d
   15744:	movt	r3, #3
   15748:	movw	r2, #1364	; 0x554
   1574c:	bl	12bf0 <__assert_fail@plt>
   15750:	movw	r0, #62570	; 0xf46a
   15754:	movt	r0, #3
   15758:	movw	r1, #61607	; 0xf0a7
   1575c:	movt	r1, #3
   15760:	movw	r3, #62349	; 0xf38d
   15764:	movt	r3, #3
   15768:	movw	r2, #1343	; 0x53f
   1576c:	bl	12bf0 <__assert_fail@plt>
   15770:	push	{r4, r5, fp, lr}
   15774:	add	fp, sp, #8
   15778:	mov	r4, r3
   1577c:	mov	r5, r1
   15780:	mov	r1, r2
   15784:	bl	12998 <difftime@plt>
   15788:	vldr	d16, [pc, #16]	; 157a0 <__assert_fail@plt+0x2bb0>
   1578c:	sub	r0, r5, r4
   15790:	vmov	s2, r0
   15794:	vcvt.f64.s32	d17, s2
   15798:	vmla.f64	d0, d17, d16
   1579c:	pop	{r4, r5, fp, pc}
   157a0:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   157a4:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   157a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157ac:	add	fp, sp, #28
   157b0:	sub	sp, sp, #36	; 0x24
   157b4:	mov	r5, r2
   157b8:	mov	sl, r0
   157bc:	mov	r4, r2
   157c0:	ldr	r0, [r4], #40	; 0x28
   157c4:	bl	1936c <__assert_fail@plt+0x677c>
   157c8:	mov	r8, r0
   157cc:	cmp	r0, #0
   157d0:	beq	1581c <__assert_fail@plt+0x2c2c>
   157d4:	mov	r0, r4
   157d8:	bl	15a08 <__assert_fail@plt+0x2e18>
   157dc:	cmp	r0, #0
   157e0:	beq	159a8 <__assert_fail@plt+0x2db8>
   157e4:	movw	r0, #24160	; 0x5e60
   157e8:	movt	r0, #5
   157ec:	ldr	r0, [r0, #12]
   157f0:	bl	21f60 <__assert_fail@plt+0xf370>
   157f4:	mov	sl, r0
   157f8:	ldrb	r0, [r0]
   157fc:	movw	r7, #62825	; 0xf569
   15800:	movt	r7, #3
   15804:	subs	r0, r0, #47	; 0x2f
   15808:	moveq	r7, r0
   1580c:	movwne	r0, #1
   15810:	lsl	r6, r0, #1
   15814:	mov	r9, sl
   15818:	b	15840 <__assert_fail@plt+0x2c50>
   1581c:	movw	r0, #21896	; 0x5588
   15820:	movt	r0, #5
   15824:	ldr	r0, [r0]
   15828:	ldr	r1, [r5, #144]	; 0x90
   1582c:	mov	r9, #0
   15830:	cmp	r1, r0
   15834:	mov	r7, #0
   15838:	mov	r6, #0
   1583c:	bne	159e8 <__assert_fail@plt+0x2df8>
   15840:	ldrb	r0, [r4]
   15844:	cmp	r0, #0
   15848:	beq	158a4 <__assert_fail@plt+0x2cb4>
   1584c:	mov	r0, sl
   15850:	bl	128c0 <strlen@plt>
   15854:	mov	r1, #0
   15858:	str	r7, [sp]
   1585c:	str	r6, [sp, #4]
   15860:	str	r1, [sp, #8]
   15864:	add	r2, r4, #4
   15868:	add	r1, r5, #88	; 0x58
   1586c:	add	r3, r0, #1
   15870:	mov	r0, r2
   15874:	mov	r2, sl
   15878:	bl	1f62c <__assert_fail@plt+0xca3c>
   1587c:	ldr	r0, [r5, #116]	; 0x74
   15880:	cmp	r0, #0
   15884:	beq	15978 <__assert_fail@plt+0x2d88>
   15888:	movw	r0, #24160	; 0x5e60
   1588c:	movt	r0, #5
   15890:	mov	r4, #1
   15894:	strb	r4, [r0, #32]
   15898:	cmp	r9, #0
   1589c:	bne	1595c <__assert_fail@plt+0x2d6c>
   158a0:	b	1596c <__assert_fail@plt+0x2d7c>
   158a4:	str	r9, [sp, #20]
   158a8:	str	r8, [sp, #24]
   158ac:	add	r0, r5, #88	; 0x58
   158b0:	str	r0, [sp, #32]
   158b4:	add	r0, r4, #4
   158b8:	str	r0, [sp, #28]
   158bc:	ldr	r0, [r5, #136]	; 0x88
   158c0:	cmp	r0, #1
   158c4:	blt	15920 <__assert_fail@plt+0x2d30>
   158c8:	mov	r4, r7
   158cc:	mov	r9, #0
   158d0:	ldr	r0, [r5, #132]	; 0x84
   158d4:	ldr	r7, [r0, r9, lsl #2]
   158d8:	mov	r0, r7
   158dc:	bl	128c0 <strlen@plt>
   158e0:	mov	r8, r0
   158e4:	mov	r0, sl
   158e8:	bl	128c0 <strlen@plt>
   158ec:	stm	sp, {r4, r6, sl}
   158f0:	str	r0, [sp, #12]
   158f4:	mov	r0, #0
   158f8:	str	r0, [sp, #16]
   158fc:	ldr	r0, [sp, #28]
   15900:	ldr	r1, [sp, #32]
   15904:	mov	r2, r7
   15908:	mov	r3, r8
   1590c:	bl	1f488 <__assert_fail@plt+0xc898>
   15910:	add	r9, r9, #1
   15914:	ldr	r0, [r5, #136]	; 0x88
   15918:	cmp	r9, r0
   1591c:	blt	158d0 <__assert_fail@plt+0x2ce0>
   15920:	ldr	r0, [sp, #28]
   15924:	ldr	r1, [sp, #32]
   15928:	bl	1f84c <__assert_fail@plt+0xcc5c>
   1592c:	ldrh	r0, [r5, #148]	; 0x94
   15930:	bic	r0, r0, #128	; 0x80
   15934:	clz	r0, r0
   15938:	lsr	r4, r0, #5
   1593c:	ldr	r8, [sp, #24]
   15940:	cmp	r8, #0
   15944:	beq	15950 <__assert_fail@plt+0x2d60>
   15948:	ldr	r0, [r5, #144]	; 0x90
   1594c:	bl	2a7bc <__assert_fail@plt+0x17bcc>
   15950:	ldr	r9, [sp, #20]
   15954:	cmp	r9, #0
   15958:	beq	1596c <__assert_fail@plt+0x2d7c>
   1595c:	cmp	r8, #0
   15960:	beq	15988 <__assert_fail@plt+0x2d98>
   15964:	mov	r0, r9
   15968:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   1596c:	mov	r0, r4
   15970:	sub	sp, fp, #28
   15974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15978:	mov	r4, #1
   1597c:	cmp	r9, #0
   15980:	bne	1595c <__assert_fail@plt+0x2d6c>
   15984:	b	1596c <__assert_fail@plt+0x2d7c>
   15988:	movw	r0, #62938	; 0xf5da
   1598c:	movt	r0, #3
   15990:	movw	r1, #62861	; 0xf58d
   15994:	movt	r1, #3
   15998:	movw	r3, #62868	; 0xf594
   1599c:	movt	r3, #3
   159a0:	mov	r2, #208	; 0xd0
   159a4:	bl	12bf0 <__assert_fail@plt>
   159a8:	bl	12908 <__errno_location@plt>
   159ac:	ldr	r4, [r0]
   159b0:	movw	r1, #62760	; 0xf528
   159b4:	movt	r1, #3
   159b8:	mov	r0, #0
   159bc:	mov	r2, #5
   159c0:	bl	12674 <dcgettext@plt>
   159c4:	mov	r5, r0
   159c8:	mov	r0, #0
   159cc:	mov	r1, sl
   159d0:	bl	1939c <__assert_fail@plt+0x67ac>
   159d4:	mov	r3, r0
   159d8:	mov	r0, #1
   159dc:	mov	r1, r4
   159e0:	mov	r2, r5
   159e4:	bl	127b8 <error@plt>
   159e8:	movw	r0, #62828	; 0xf56c
   159ec:	movt	r0, #3
   159f0:	movw	r1, #62861	; 0xf58d
   159f4:	movt	r1, #3
   159f8:	movw	r3, #62868	; 0xf594
   159fc:	movt	r3, #3
   15a00:	mov	r2, #148	; 0x94
   15a04:	bl	12bf0 <__assert_fail@plt>
   15a08:	push	{r4, r5, r6, sl, fp, lr}
   15a0c:	add	fp, sp, #16
   15a10:	mov	r4, r0
   15a14:	ldr	r0, [r0, #76]	; 0x4c
   15a18:	cmp	r0, #0
   15a1c:	beq	15a28 <__assert_fail@plt+0x2e38>
   15a20:	mov	r0, #1
   15a24:	pop	{r4, r5, r6, sl, fp, pc}
   15a28:	movw	r6, #24160	; 0x5e60
   15a2c:	movt	r6, #5
   15a30:	ldr	r5, [r6, #12]
   15a34:	mov	r0, r5
   15a38:	mov	r1, #47	; 0x2f
   15a3c:	bl	128cc <strchr@plt>
   15a40:	cmp	r0, #0
   15a44:	beq	15a78 <__assert_fail@plt+0x2e88>
   15a48:	mov	r0, r5
   15a4c:	bl	2201c <__assert_fail@plt+0xf42c>
   15a50:	mov	r5, r0
   15a54:	ldr	r1, [r6, #16]
   15a58:	mov	r0, r4
   15a5c:	mov	r2, r5
   15a60:	bl	15f10 <__assert_fail@plt+0x3320>
   15a64:	mov	r4, r0
   15a68:	mov	r0, r5
   15a6c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   15a70:	mov	r0, r4
   15a74:	pop	{r4, r5, r6, sl, fp, pc}
   15a78:	ldr	r1, [r6, #16]
   15a7c:	movw	r2, #64572	; 0xfc3c
   15a80:	movt	r2, #3
   15a84:	mov	r0, r4
   15a88:	pop	{r4, r5, r6, sl, fp, lr}
   15a8c:	b	15f10 <__assert_fail@plt+0x3320>
   15a90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a94:	add	fp, sp, #28
   15a98:	sub	sp, sp, #4
   15a9c:	mov	r8, r3
   15aa0:	mov	r5, r1
   15aa4:	movw	r9, #24204	; 0x5e8c
   15aa8:	movt	r9, #5
   15aac:	ldrb	r0, [r9, #44]	; 0x2c
   15ab0:	tst	r0, #32
   15ab4:	movw	sl, #21864	; 0x5568
   15ab8:	movt	sl, #5
   15abc:	bne	15c4c <__assert_fail@plt+0x305c>
   15ac0:	movw	r0, #21876	; 0x5574
   15ac4:	movt	r0, #5
   15ac8:	ldr	r0, [r0]
   15acc:	bl	2ca6c <__assert_fail@plt+0x19e7c>
   15ad0:	ldr	r0, [sl]
   15ad4:	bl	2ca6c <__assert_fail@plt+0x19e7c>
   15ad8:	movw	r0, #21900	; 0x558c
   15adc:	movt	r0, #5
   15ae0:	ldrb	r1, [r0]
   15ae4:	cmp	r1, #0
   15ae8:	bne	15b00 <__assert_fail@plt+0x2f10>
   15aec:	mov	r1, #1
   15af0:	strb	r1, [r0]
   15af4:	mov	r0, #17
   15af8:	mov	r1, #0
   15afc:	bl	12638 <signal@plt>
   15b00:	bl	12a28 <fork@plt>
   15b04:	cmn	r0, #1
   15b08:	beq	15ce8 <__assert_fail@plt+0x30f8>
   15b0c:	mov	r6, r0
   15b10:	cmp	r0, #0
   15b14:	beq	15d14 <__assert_fail@plt+0x3124>
   15b18:	add	r7, r5, #108	; 0x6c
   15b1c:	mov	r0, r6
   15b20:	mov	r1, r7
   15b24:	mov	r2, #0
   15b28:	bl	1274c <waitpid@plt>
   15b2c:	cmn	r0, #1
   15b30:	bne	15b94 <__assert_fail@plt+0x2fa4>
   15b34:	bl	12908 <__errno_location@plt>
   15b38:	ldr	r4, [r0]
   15b3c:	cmp	r4, #4
   15b40:	beq	15b1c <__assert_fail@plt+0x2f2c>
   15b44:	mov	r6, #0
   15b48:	movw	r1, #63085	; 0xf66d
   15b4c:	movt	r1, #3
   15b50:	mov	r0, #0
   15b54:	mov	r2, #5
   15b58:	bl	12674 <dcgettext@plt>
   15b5c:	mov	r5, r0
   15b60:	ldr	r1, [r8]
   15b64:	mov	r0, #0
   15b68:	bl	1939c <__assert_fail@plt+0x67ac>
   15b6c:	mov	r3, r0
   15b70:	mov	r0, #0
   15b74:	mov	r1, r4
   15b78:	mov	r2, r5
   15b7c:	bl	127b8 <error@plt>
   15b80:	movw	r0, #24160	; 0x5e60
   15b84:	movt	r0, #5
   15b88:	mov	r1, #1
   15b8c:	str	r1, [r0, #28]
   15b90:	b	15c40 <__assert_fail@plt+0x3050>
   15b94:	ldr	r0, [r7]
   15b98:	mov	r1, #2130706432	; 0x7f000000
   15b9c:	and	r1, r1, r0, lsl #24
   15ba0:	add	r1, r1, #16777216	; 0x1000000
   15ba4:	cmp	r1, #33554432	; 0x2000000
   15ba8:	blt	15c08 <__assert_fail@plt+0x3018>
   15bac:	movw	r1, #63106	; 0xf682
   15bb0:	movt	r1, #3
   15bb4:	mov	r0, #0
   15bb8:	mov	r2, #5
   15bbc:	bl	12674 <dcgettext@plt>
   15bc0:	mov	r4, r0
   15bc4:	ldr	r1, [r9, #72]	; 0x48
   15bc8:	ldr	r2, [r8]
   15bcc:	mov	r0, #0
   15bd0:	bl	2a088 <__assert_fail@plt+0x17498>
   15bd4:	mov	r3, r0
   15bd8:	ldr	r0, [r5, #108]	; 0x6c
   15bdc:	and	r0, r0, #127	; 0x7f
   15be0:	str	r0, [sp]
   15be4:	mov	r0, #0
   15be8:	mov	r1, #0
   15bec:	mov	r2, r4
   15bf0:	bl	127b8 <error@plt>
   15bf4:	ldrb	r0, [r5]
   15bf8:	cmp	r0, #0
   15bfc:	bne	15c30 <__assert_fail@plt+0x3040>
   15c00:	mov	r6, #1
   15c04:	b	15c40 <__assert_fail@plt+0x3050>
   15c08:	ldrb	r1, [r9, #44]	; 0x2c
   15c0c:	ubfx	r4, r0, #8, #8
   15c10:	tst	r1, #32
   15c14:	bne	15ccc <__assert_fail@plt+0x30dc>
   15c18:	mov	r6, #1
   15c1c:	cmp	r4, #0
   15c20:	beq	15c40 <__assert_fail@plt+0x3050>
   15c24:	ldrb	r0, [r5]
   15c28:	cmp	r0, #0
   15c2c:	beq	15c40 <__assert_fail@plt+0x3050>
   15c30:	movw	r0, #24160	; 0x5e60
   15c34:	movt	r0, #5
   15c38:	mov	r6, #1
   15c3c:	str	r6, [r0, #28]
   15c40:	mov	r0, r6
   15c44:	sub	sp, fp, #28
   15c48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c4c:	ldr	r0, [r5, #48]	; 0x30
   15c50:	mov	r4, #0
   15c54:	subs	r2, r0, #1
   15c58:	sbc	r3, r4, #0
   15c5c:	ldr	r0, [sl]
   15c60:	movw	r1, #62944	; 0xf5e0
   15c64:	movt	r1, #3
   15c68:	bl	128fc <fprintf@plt>
   15c6c:	ldr	r6, [sl]
   15c70:	ldr	r0, [r5, #48]	; 0x30
   15c74:	cmp	r0, #1
   15c78:	beq	15cbc <__assert_fail@plt+0x30cc>
   15c7c:	movw	r7, #19694	; 0x4cee
   15c80:	movt	r7, #4
   15c84:	ldr	r0, [r5, #52]	; 0x34
   15c88:	ldr	r1, [r0, r4, lsl #2]
   15c8c:	mov	r0, #0
   15c90:	bl	1939c <__assert_fail@plt+0x67ac>
   15c94:	mov	r2, r0
   15c98:	mov	r0, r6
   15c9c:	mov	r1, r7
   15ca0:	bl	128fc <fprintf@plt>
   15ca4:	add	r4, r4, #1
   15ca8:	ldr	r6, [sl]
   15cac:	ldr	r0, [r5, #48]	; 0x30
   15cb0:	sub	r0, r0, #1
   15cb4:	cmp	r4, r0
   15cb8:	bcc	15c84 <__assert_fail@plt+0x3094>
   15cbc:	mov	r0, #10
   15cc0:	mov	r1, r6
   15cc4:	bl	12a70 <fputc@plt>
   15cc8:	b	15ac0 <__assert_fail@plt+0x2ed0>
   15ccc:	ldr	r0, [sl]
   15cd0:	movw	r1, #63133	; 0xf69d
   15cd4:	movt	r1, #3
   15cd8:	mov	r2, r6
   15cdc:	mov	r3, r4
   15ce0:	bl	128fc <fprintf@plt>
   15ce4:	b	15c18 <__assert_fail@plt+0x3028>
   15ce8:	bl	12908 <__errno_location@plt>
   15cec:	ldr	r4, [r0]
   15cf0:	movw	r1, #62986	; 0xf60a
   15cf4:	movt	r1, #3
   15cf8:	mov	r0, #0
   15cfc:	mov	r2, #5
   15d00:	bl	12674 <dcgettext@plt>
   15d04:	mov	r2, r0
   15d08:	mov	r0, #1
   15d0c:	mov	r1, r4
   15d10:	bl	127b8 <error@plt>
   15d14:	ldr	r1, [r5, #104]	; 0x68
   15d18:	cmp	r1, #0
   15d1c:	bne	15d40 <__assert_fail@plt+0x3150>
   15d20:	movw	r0, #62998	; 0xf616
   15d24:	movt	r0, #3
   15d28:	movw	r1, #62861	; 0xf58d
   15d2c:	movt	r1, #3
   15d30:	movw	r3, #63025	; 0xf631
   15d34:	movt	r3, #3
   15d38:	movw	r2, #321	; 0x141
   15d3c:	bl	12bf0 <__assert_fail@plt>
   15d40:	ldrb	r0, [r5, #100]	; 0x64
   15d44:	bl	15dc8 <__assert_fail@plt+0x31d8>
   15d48:	cmp	r0, #0
   15d4c:	beq	15d80 <__assert_fail@plt+0x3190>
   15d50:	bl	204a4 <__assert_fail@plt+0xd8b4>
   15d54:	cmp	r0, #0
   15d58:	beq	15d60 <__assert_fail@plt+0x3170>
   15d5c:	bl	204c4 <__assert_fail@plt+0xd8d4>
   15d60:	mov	r0, r8
   15d64:	bl	1fda8 <__assert_fail@plt+0xd1b8>
   15d68:	cmp	r0, #0
   15d6c:	beq	15d88 <__assert_fail@plt+0x3198>
   15d70:	bl	12908 <__errno_location@plt>
   15d74:	mov	r1, #7
   15d78:	str	r1, [r0]
   15d7c:	b	15d94 <__assert_fail@plt+0x31a4>
   15d80:	mov	r0, #1
   15d84:	bl	125e4 <_exit@plt>
   15d88:	ldr	r0, [r8]
   15d8c:	mov	r1, r8
   15d90:	bl	125fc <execvp@plt>
   15d94:	bl	12908 <__errno_location@plt>
   15d98:	ldr	r4, [r0]
   15d9c:	ldr	r1, [r8]
   15da0:	mov	r0, #0
   15da4:	bl	1939c <__assert_fail@plt+0x67ac>
   15da8:	mov	r3, r0
   15dac:	movw	r2, #19695	; 0x4cef
   15db0:	movt	r2, #4
   15db4:	mov	r0, #0
   15db8:	mov	r1, r4
   15dbc:	bl	127b8 <error@plt>
   15dc0:	mov	r0, #1
   15dc4:	bl	125e4 <_exit@plt>
   15dc8:	push	{r4, r5, r6, sl, fp, lr}
   15dcc:	add	fp, sp, #16
   15dd0:	sub	sp, sp, #24
   15dd4:	mov	r5, r1
   15dd8:	mov	r4, #1
   15ddc:	cmp	r0, #0
   15de0:	beq	15e84 <__assert_fail@plt+0x3294>
   15de4:	movw	r0, #63256	; 0xf718
   15de8:	movt	r0, #3
   15dec:	vldr	d16, [r0]
   15df0:	mov	r0, #108	; 0x6c
   15df4:	strh	r0, [sp, #16]
   15df8:	vstr	d16, [sp, #8]
   15dfc:	mov	r4, #0
   15e00:	mov	r0, #0
   15e04:	bl	12ba8 <close@plt>
   15e08:	cmn	r0, #1
   15e0c:	ble	15e58 <__assert_fail@plt+0x3268>
   15e10:	add	r0, sp, #8
   15e14:	mov	r1, #131072	; 0x20000
   15e18:	bl	220c0 <__assert_fail@plt+0xf4d0>
   15e1c:	mov	r4, #1
   15e20:	cmn	r0, #1
   15e24:	bgt	15e84 <__assert_fail@plt+0x3294>
   15e28:	bl	12908 <__errno_location@plt>
   15e2c:	ldr	r6, [r0]
   15e30:	add	r1, sp, #8
   15e34:	mov	r0, #0
   15e38:	bl	1939c <__assert_fail@plt+0x67ac>
   15e3c:	mov	r3, r0
   15e40:	movw	r2, #19695	; 0x4cef
   15e44:	movt	r2, #4
   15e48:	mov	r0, #0
   15e4c:	mov	r1, r6
   15e50:	bl	127b8 <error@plt>
   15e54:	b	15e84 <__assert_fail@plt+0x3294>
   15e58:	bl	12908 <__errno_location@plt>
   15e5c:	ldr	r6, [r0]
   15e60:	movw	r1, #63195	; 0xf6db
   15e64:	movt	r1, #3
   15e68:	mov	r0, #0
   15e6c:	mov	r2, #5
   15e70:	bl	12674 <dcgettext@plt>
   15e74:	mov	r2, r0
   15e78:	mov	r0, #0
   15e7c:	mov	r1, r6
   15e80:	bl	127b8 <error@plt>
   15e84:	mov	r0, r5
   15e88:	bl	2a7a0 <__assert_fail@plt+0x17bb0>
   15e8c:	cmp	r0, #0
   15e90:	beq	15f04 <__assert_fail@plt+0x3314>
   15e94:	bl	12908 <__errno_location@plt>
   15e98:	ldr	r6, [r0]
   15e9c:	mov	r4, #0
   15ea0:	movw	r1, #63223	; 0xf6f7
   15ea4:	movt	r1, #3
   15ea8:	mov	r0, #0
   15eac:	mov	r2, #5
   15eb0:	bl	12674 <dcgettext@plt>
   15eb4:	mov	r2, r0
   15eb8:	ldr	r0, [r5]
   15ebc:	cmn	r0, #1
   15ec0:	ble	15ed4 <__assert_fail@plt+0x32e4>
   15ec4:	movw	r3, #2407	; 0x967
   15ec8:	movt	r3, #4
   15ecc:	mov	r0, r3
   15ed0:	b	15ef4 <__assert_fail@plt+0x3304>
   15ed4:	ldr	r0, [r5, #4]
   15ed8:	movw	r1, #2407	; 0x967
   15edc:	movt	r1, #4
   15ee0:	movw	r3, #9952	; 0x26e0
   15ee4:	movt	r3, #4
   15ee8:	cmp	r0, #0
   15eec:	moveq	r3, r1
   15ef0:	moveq	r0, r1
   15ef4:	str	r0, [sp]
   15ef8:	mov	r0, #0
   15efc:	mov	r1, r6
   15f00:	bl	127b8 <error@plt>
   15f04:	mov	r0, r4
   15f08:	sub	sp, fp, #16
   15f0c:	pop	{r4, r5, r6, sl, fp, pc}
   15f10:	push	{r4, r5, r6, r7, fp, lr}
   15f14:	add	fp, sp, #16
   15f18:	mov	r5, r2
   15f1c:	mov	r6, r1
   15f20:	mov	r7, r0
   15f24:	mov	r0, #8
   15f28:	bl	2b63c <__assert_fail@plt+0x18a4c>
   15f2c:	str	r0, [r7, #104]	; 0x68
   15f30:	mov	r4, #0
   15f34:	str	r4, [r0, #4]
   15f38:	mov	r0, r6
   15f3c:	mov	r1, r5
   15f40:	mov	r2, #0
   15f44:	bl	25648 <__assert_fail@plt+0x12a58>
   15f48:	ldr	r1, [r7, #104]	; 0x68
   15f4c:	str	r0, [r1]
   15f50:	cmp	r0, #0
   15f54:	bmi	15f64 <__assert_fail@plt+0x3374>
   15f58:	mov	r4, #1
   15f5c:	mov	r1, #1
   15f60:	bl	21d54 <__assert_fail@plt+0xf164>
   15f64:	mov	r0, r4
   15f68:	pop	{r4, r5, r6, r7, fp, pc}
   15f6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15f70:	add	fp, sp, #24
   15f74:	mov	r4, r1
   15f78:	mov	r5, r0
   15f7c:	movw	r8, #21904	; 0x5590
   15f80:	movt	r8, #5
   15f84:	ldr	r0, [r8]
   15f88:	cmp	r1, #0
   15f8c:	movwne	r4, #16
   15f90:	cmp	r0, #0
   15f94:	beq	15fe4 <__assert_fail@plt+0x33f4>
   15f98:	ldr	r0, [r8]
   15f9c:	cmp	r0, #0
   15fa0:	beq	15fdc <__assert_fail@plt+0x33ec>
   15fa4:	mov	r7, #0
   15fa8:	movw	r6, #21908	; 0x5594
   15fac:	movt	r6, #5
   15fb0:	ldr	r0, [r6]
   15fb4:	ldr	r1, [r0, r7, lsl #2]
   15fb8:	mov	r0, r5
   15fbc:	mov	r2, r4
   15fc0:	bl	127dc <fnmatch@plt>
   15fc4:	cmp	r0, #0
   15fc8:	beq	16004 <__assert_fail@plt+0x3414>
   15fcc:	add	r7, r7, #1
   15fd0:	ldr	r0, [r8]
   15fd4:	cmp	r7, r0
   15fd8:	bcc	15fb0 <__assert_fail@plt+0x33c0>
   15fdc:	mov	r0, #0
   15fe0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15fe4:	movw	r1, #64572	; 0xfc3c
   15fe8:	movt	r1, #3
   15fec:	mov	r0, r5
   15ff0:	mov	r2, r4
   15ff4:	bl	127dc <fnmatch@plt>
   15ff8:	clz	r0, r0
   15ffc:	lsr	r0, r0, #5
   16000:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16004:	mov	r0, #1
   16008:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1600c:	mov	ip, r0
   16010:	ldr	r2, [r1, #4]
   16014:	ldr	r3, [r1, #36]	; 0x24
   16018:	cmp	r3, #0
   1601c:	beq	16030 <__assert_fail@plt+0x3440>
   16020:	movw	r1, #63266	; 0xf722
   16024:	movt	r1, #3
   16028:	mov	r0, ip
   1602c:	b	128fc <fprintf@plt>
   16030:	mov	r0, r2
   16034:	mov	r1, ip
   16038:	b	12b84 <fputs@plt>
   1603c:	movw	r0, #21912	; 0x5598
   16040:	movt	r0, #5
   16044:	ldr	r0, [r0]
   16048:	bx	lr
   1604c:	push	{r4, sl, fp, lr}
   16050:	add	fp, sp, #8
   16054:	vpush	{d8}
   16058:	cmp	r0, #0
   1605c:	beq	161b8 <__assert_fail@plt+0x35c8>
   16060:	mov	r4, r0
   16064:	ldr	r0, [r0, #160]	; 0xa0
   16068:	cmp	r0, #0
   1606c:	blne	1604c <__assert_fail@plt+0x345c>
   16070:	ldr	r0, [r4, #156]	; 0x9c
   16074:	cmp	r0, #0
   16078:	blne	1604c <__assert_fail@plt+0x345c>
   1607c:	ldr	r0, [r4, #8]
   16080:	cmp	r0, #5
   16084:	bhi	161d8 <__assert_fail@plt+0x35e8>
   16088:	add	r1, pc, #0
   1608c:	ldr	pc, [r1, r0, lsl #2]
   16090:	andeq	r6, r1, r8, lsr #1
   16094:	andeq	r6, r1, r4, ror #2
   16098:	andeq	r6, r1, r0, ror #1
   1609c:	andeq	r6, r1, r4, lsl r1
   160a0:	strdeq	r6, [r1], -r8
   160a4:	andeq	r6, r1, r8, lsl r2
   160a8:	ldr	r0, [r4, #160]	; 0xa0
   160ac:	cmp	r0, #0
   160b0:	bne	16238 <__assert_fail@plt+0x3648>
   160b4:	ldr	r0, [r4, #156]	; 0x9c
   160b8:	cmp	r0, #0
   160bc:	beq	1617c <__assert_fail@plt+0x358c>
   160c0:	movw	r0, #63410	; 0xf7b2
   160c4:	movt	r0, #3
   160c8:	movw	r1, #63282	; 0xf732
   160cc:	movt	r1, #3
   160d0:	movw	r3, #63289	; 0xf739
   160d4:	movt	r3, #3
   160d8:	movw	r2, #1170	; 0x492
   160dc:	bl	12bf0 <__assert_fail@plt>
   160e0:	ldr	r0, [r4]
   160e4:	movw	r1, #18332	; 0x479c
   160e8:	movt	r1, #1
   160ec:	cmp	r0, r1
   160f0:	bne	16258 <__assert_fail@plt+0x3668>
   160f4:	ldr	r0, [r4, #156]	; 0x9c
   160f8:	cmp	r0, #0
   160fc:	bne	16278 <__assert_fail@plt+0x3688>
   16100:	ldr	r0, [r4, #160]	; 0xa0
   16104:	vldr	s0, [r0, #28]
   16108:	vmov.f32	s2, #112	; 0x3f800000  1.0
   1610c:	vsub.f32	s0, s2, s0
   16110:	b	161ac <__assert_fail@plt+0x35bc>
   16114:	ldr	r0, [r4]
   16118:	movw	r1, #15900	; 0x3e1c
   1611c:	movt	r1, #1
   16120:	cmp	r0, r1
   16124:	beq	16188 <__assert_fail@plt+0x3598>
   16128:	movw	r1, #16352	; 0x3fe0
   1612c:	movt	r1, #1
   16130:	cmp	r0, r1
   16134:	beq	161a4 <__assert_fail@plt+0x35b4>
   16138:	movw	r1, #19164	; 0x4adc
   1613c:	movt	r1, #1
   16140:	cmp	r0, r1
   16144:	bne	162d8 <__assert_fail@plt+0x36e8>
   16148:	ldr	r0, [r4, #160]	; 0xa0
   1614c:	bl	162f8 <__assert_fail@plt+0x3708>
   16150:	vmov.f32	s16, s0
   16154:	ldr	r0, [r4, #156]	; 0x9c
   16158:	bl	162f8 <__assert_fail@plt+0x3708>
   1615c:	vadd.f32	s0, s16, s0
   16160:	b	161a8 <__assert_fail@plt+0x35b8>
   16164:	ldr	r0, [r4, #160]	; 0xa0
   16168:	cmp	r0, #0
   1616c:	bne	16298 <__assert_fail@plt+0x36a8>
   16170:	ldr	r0, [r4, #156]	; 0x9c
   16174:	cmp	r0, #0
   16178:	bne	162b8 <__assert_fail@plt+0x36c8>
   1617c:	vldr	s0, [r4, #28]
   16180:	vpop	{d8}
   16184:	pop	{r4, sl, fp, pc}
   16188:	ldr	r0, [r4, #160]	; 0xa0
   1618c:	bl	162f8 <__assert_fail@plt+0x3708>
   16190:	vmov.f32	s16, s0
   16194:	ldr	r0, [r4, #156]	; 0x9c
   16198:	bl	162f8 <__assert_fail@plt+0x3708>
   1619c:	vmul.f32	s0, s16, s0
   161a0:	b	161a8 <__assert_fail@plt+0x35b8>
   161a4:	vmov.f32	s0, #112	; 0x3f800000  1.0
   161a8:	bl	1630c <__assert_fail@plt+0x371c>
   161ac:	vstr	s0, [r4, #28]
   161b0:	vpop	{d8}
   161b4:	pop	{r4, sl, fp, pc}
   161b8:	movw	r0, #63272	; 0xf728
   161bc:	movt	r0, #3
   161c0:	movw	r1, #63282	; 0xf732
   161c4:	movt	r1, #3
   161c8:	movw	r3, #63289	; 0xf739
   161cc:	movt	r3, #3
   161d0:	movw	r2, #1156	; 0x484
   161d4:	bl	12bf0 <__assert_fail@plt>
   161d8:	movw	r0, #65169	; 0xfe91
   161dc:	movt	r0, #3
   161e0:	movw	r1, #63282	; 0xf732
   161e4:	movt	r1, #3
   161e8:	movw	r3, #63289	; 0xf739
   161ec:	movt	r3, #3
   161f0:	mov	r2, #1216	; 0x4c0
   161f4:	bl	12bf0 <__assert_fail@plt>
   161f8:	movw	r0, #63364	; 0xf784
   161fc:	movt	r0, #3
   16200:	movw	r1, #63282	; 0xf732
   16204:	movt	r1, #3
   16208:	movw	r3, #63289	; 0xf739
   1620c:	movt	r3, #3
   16210:	movw	r2, #1164	; 0x48c
   16214:	bl	12bf0 <__assert_fail@plt>
   16218:	movw	r0, #63339	; 0xf76b
   1621c:	movt	r0, #3
   16220:	movw	r1, #63282	; 0xf732
   16224:	movt	r1, #3
   16228:	movw	r3, #63289	; 0xf739
   1622c:	movt	r3, #3
   16230:	movw	r2, #1163	; 0x48b
   16234:	bl	12bf0 <__assert_fail@plt>
   16238:	movw	r0, #63388	; 0xf79c
   1623c:	movt	r0, #3
   16240:	movw	r1, #63282	; 0xf732
   16244:	movt	r1, #3
   16248:	movw	r3, #63289	; 0xf739
   1624c:	movt	r3, #3
   16250:	movw	r2, #1169	; 0x491
   16254:	bl	12bf0 <__assert_fail@plt>
   16258:	movw	r0, #63431	; 0xf7c7
   1625c:	movt	r0, #3
   16260:	movw	r1, #63282	; 0xf732
   16264:	movt	r1, #3
   16268:	movw	r3, #63289	; 0xf739
   1626c:	movt	r3, #3
   16270:	movw	r2, #1180	; 0x49c
   16274:	bl	12bf0 <__assert_fail@plt>
   16278:	movw	r0, #63410	; 0xf7b2
   1627c:	movt	r0, #3
   16280:	movw	r1, #63282	; 0xf732
   16284:	movt	r1, #3
   16288:	movw	r3, #63289	; 0xf739
   1628c:	movt	r3, #3
   16290:	movw	r2, #1181	; 0x49d
   16294:	bl	12bf0 <__assert_fail@plt>
   16298:	movw	r0, #63388	; 0xf79c
   1629c:	movt	r0, #3
   162a0:	movw	r1, #63282	; 0xf732
   162a4:	movt	r1, #3
   162a8:	movw	r3, #63289	; 0xf739
   162ac:	movt	r3, #3
   162b0:	movw	r2, #1174	; 0x496
   162b4:	bl	12bf0 <__assert_fail@plt>
   162b8:	movw	r0, #63410	; 0xf7b2
   162bc:	movt	r0, #3
   162c0:	movw	r1, #63282	; 0xf732
   162c4:	movt	r1, #3
   162c8:	movw	r3, #63289	; 0xf739
   162cc:	movt	r3, #3
   162d0:	movw	r2, #1175	; 0x497
   162d4:	bl	12bf0 <__assert_fail@plt>
   162d8:	movw	r0, #65169	; 0xfe91
   162dc:	movt	r0, #3
   162e0:	movw	r1, #63282	; 0xf732
   162e4:	movt	r1, #3
   162e8:	movw	r3, #63289	; 0xf739
   162ec:	movt	r3, #3
   162f0:	movw	r2, #1204	; 0x4b4
   162f4:	bl	12bf0 <__assert_fail@plt>
   162f8:	cmp	r0, #0
   162fc:	vldrne	s0, [r0, #28]
   16300:	bxne	lr
   16304:	vmov.f32	s0, #112	; 0x3f800000  1.0
   16308:	bx	lr
   1630c:	vldr	s2, [pc, #20]	; 16328 <__assert_fail@plt+0x3738>
   16310:	vmax.f32	d1, d0, d1
   16314:	vmov.f32	s4, #112	; 0x3f800000  1.0
   16318:	vcmpe.f32	s0, s4
   1631c:	vmrs	APSR_nzcv, fpscr
   16320:	vselgt.f32	s0, s4, s2
   16324:	bx	lr
   16328:	andeq	r0, r0, r0
   1632c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16330:	add	fp, sp, #28
   16334:	sub	sp, sp, #28
   16338:	mov	r4, r1
   1633c:	movw	r7, #21916	; 0x559c
   16340:	movt	r7, #5
   16344:	mov	r1, #0
   16348:	str	r1, [r7]
   1634c:	add	r1, r4, r2, lsl #2
   16350:	movw	r3, #21908	; 0x5594
   16354:	movt	r3, #5
   16358:	str	r1, [r3]
   1635c:	str	r0, [sp, #24]
   16360:	str	r2, [sp, #16]
   16364:	cmp	r0, r2
   16368:	ble	163ac <__assert_fail@plt+0x37bc>
   1636c:	ldr	r5, [sp, #24]
   16370:	movw	r6, #21904	; 0x5590
   16374:	movt	r6, #5
   16378:	ldr	r0, [r4, r2, lsl #2]
   1637c:	mov	r1, #1
   16380:	bl	18c28 <__assert_fail@plt+0x6038>
   16384:	cmp	r0, #0
   16388:	bne	163ac <__assert_fail@plt+0x37bc>
   1638c:	ldr	r0, [r6]
   16390:	add	r0, r0, #1
   16394:	str	r0, [r6]
   16398:	ldr	r0, [sp, #16]
   1639c:	add	r2, r0, #1
   163a0:	str	r2, [sp, #16]
   163a4:	cmp	r2, r5
   163a8:	blt	16378 <__assert_fail@plt+0x3788>
   163ac:	movw	r8, #10027	; 0x272b
   163b0:	movt	r8, #4
   163b4:	mov	r0, r8
   163b8:	bl	1b978 <__assert_fail@plt+0x8d88>
   163bc:	mov	r5, r0
   163c0:	movw	r0, #65249	; 0xfee1
   163c4:	movt	r0, #3
   163c8:	bl	1b978 <__assert_fail@plt+0x8d88>
   163cc:	mov	r6, r0
   163d0:	movw	r0, #63760	; 0xf910
   163d4:	movt	r0, #3
   163d8:	bl	1b978 <__assert_fail@plt+0x8d88>
   163dc:	cmp	r5, #0
   163e0:	beq	1686c <__assert_fail@plt+0x3c7c>
   163e4:	cmp	r6, #0
   163e8:	beq	1688c <__assert_fail@plt+0x3c9c>
   163ec:	str	r6, [sp, #8]
   163f0:	str	r0, [sp, #12]
   163f4:	cmp	r0, #0
   163f8:	beq	168ac <__assert_fail@plt+0x3cbc>
   163fc:	add	r2, sp, #24
   16400:	mov	r0, r5
   16404:	mov	r1, r4
   16408:	bl	1bb0c <__assert_fail@plt+0x8f1c>
   1640c:	movw	sl, #21920	; 0x55a0
   16410:	movt	sl, #5
   16414:	ldr	r2, [sl]
   16418:	str	r8, [r2, #4]
   1641c:	ldr	r3, [r7]
   16420:	mov	r0, #1
   16424:	strb	r0, [r3, #33]	; 0x21
   16428:	ldr	r1, [sp, #24]
   1642c:	mov	r0, r4
   16430:	bl	1b960 <__assert_fail@plt+0x8d70>
   16434:	ldr	r0, [sl]
   16438:	bl	15584 <__assert_fail@plt+0x2994>
   1643c:	ldr	r1, [sp, #24]
   16440:	ldr	r0, [sp, #16]
   16444:	cmp	r0, r1
   16448:	bge	16508 <__assert_fail@plt+0x3918>
   1644c:	mov	r8, #0
   16450:	b	16474 <__assert_fail@plt+0x3884>
   16454:	str	r8, [r0, #36]	; 0x24
   16458:	bl	15584 <__assert_fail@plt+0x2994>
   1645c:	ldr	r0, [r7]
   16460:	bl	15584 <__assert_fail@plt+0x2994>
   16464:	ldr	r1, [sp, #24]
   16468:	ldr	r0, [sp, #16]
   1646c:	cmp	r0, r1
   16470:	bge	16508 <__assert_fail@plt+0x3918>
   16474:	movw	r1, #24160	; 0x5e60
   16478:	movt	r1, #5
   1647c:	strb	r8, [r1, #40]	; 0x28
   16480:	ldr	r0, [r4, r0, lsl #2]
   16484:	mov	r1, #0
   16488:	bl	18c28 <__assert_fail@plt+0x6038>
   1648c:	cmp	r0, #0
   16490:	beq	16764 <__assert_fail@plt+0x3b74>
   16494:	ldr	r0, [sp, #16]
   16498:	ldr	r6, [r4, r0, lsl #2]
   1649c:	mov	r0, r6
   164a0:	bl	1b978 <__assert_fail@plt+0x8d88>
   164a4:	cmp	r0, #0
   164a8:	beq	167f8 <__assert_fail@plt+0x3c08>
   164ac:	mov	r5, r0
   164b0:	ldr	r0, [r0]
   164b4:	cmp	r0, #4
   164b8:	beq	164c8 <__assert_fail@plt+0x38d8>
   164bc:	ldr	r0, [sp, #16]
   164c0:	add	r0, r0, #1
   164c4:	str	r0, [sp, #16]
   164c8:	ldr	r3, [r5, #8]
   164cc:	ldr	r9, [sp, #16]
   164d0:	mov	r0, r5
   164d4:	mov	r1, r4
   164d8:	add	r2, sp, #16
   164dc:	blx	r3
   164e0:	cmp	r0, #0
   164e4:	beq	167dc <__assert_fail@plt+0x3bec>
   164e8:	ldr	r0, [sl]
   164ec:	str	r6, [r0, #4]
   164f0:	ldr	r1, [sp, #16]
   164f4:	cmp	r1, r9
   164f8:	beq	16454 <__assert_fail@plt+0x3864>
   164fc:	ldr	r1, [r4, r9, lsl #2]
   16500:	str	r1, [r0, #36]	; 0x24
   16504:	b	16458 <__assert_fail@plt+0x3868>
   16508:	ldr	r3, [r7]
   1650c:	ldr	r2, [sl]
   16510:	mov	r0, r4
   16514:	bl	1b974 <__assert_fail@plt+0x8d84>
   16518:	ldr	r0, [r7]
   1651c:	ldr	r1, [r0, #152]	; 0x98
   16520:	cmp	r1, #0
   16524:	beq	16590 <__assert_fail@plt+0x39a0>
   16528:	mov	r0, r1
   1652c:	bl	18bfc <__assert_fail@plt+0x600c>
   16530:	cmp	r0, #0
   16534:	beq	165d4 <__assert_fail@plt+0x39e4>
   16538:	add	r8, sp, #24
   1653c:	ldr	r0, [sp, #8]
   16540:	mov	r1, r4
   16544:	mov	r2, r8
   16548:	bl	1bad8 <__assert_fail@plt+0x8ee8>
   1654c:	ldr	r0, [sl]
   16550:	movw	r1, #65249	; 0xfee1
   16554:	movt	r1, #3
   16558:	str	r1, [r0, #4]
   1655c:	mov	r6, #1
   16560:	strb	r6, [r0, #33]	; 0x21
   16564:	bl	15584 <__assert_fail@plt+0x2994>
   16568:	ldr	r0, [sp, #12]
   1656c:	mov	r1, r4
   16570:	mov	r2, r8
   16574:	bl	1bb40 <__assert_fail@plt+0x8f50>
   16578:	ldr	r0, [sl]
   1657c:	movw	r1, #63759	; 0xf90f
   16580:	movt	r1, #3
   16584:	str	r1, [r0, #4]
   16588:	strb	r6, [r0, #33]	; 0x21
   1658c:	b	165c4 <__assert_fail@plt+0x39d4>
   16590:	str	r0, [sp, #20]
   16594:	ldr	r1, [r0, #152]	; 0x98
   16598:	str	r1, [r7]
   1659c:	str	r1, [sl]
   165a0:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   165a4:	add	r2, sp, #24
   165a8:	ldr	r0, [sp, #12]
   165ac:	mov	r1, r4
   165b0:	bl	1bb40 <__assert_fail@plt+0x8f50>
   165b4:	ldr	r0, [sl]
   165b8:	movw	r1, #63759	; 0xf90f
   165bc:	movt	r1, #3
   165c0:	str	r1, [r0, #4]
   165c4:	bl	15584 <__assert_fail@plt+0x2994>
   165c8:	ldr	r0, [r7]
   165cc:	bl	15584 <__assert_fail@plt+0x2994>
   165d0:	b	165f0 <__assert_fail@plt+0x3a00>
   165d4:	ldr	r0, [r7]
   165d8:	str	r0, [sp, #20]
   165dc:	ldr	r0, [r0, #152]	; 0x98
   165e0:	str	r0, [r7]
   165e4:	bl	15584 <__assert_fail@plt+0x2994>
   165e8:	ldr	r0, [sp, #20]
   165ec:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   165f0:	movw	r5, #24204	; 0x5e8c
   165f4:	movt	r5, #5
   165f8:	ldrb	r0, [r5, #44]	; 0x2c
   165fc:	tst	r0, #9
   16600:	bne	1669c <__assert_fail@plt+0x3aac>
   16604:	ldr	r0, [r7]
   16608:	bl	1b780 <__assert_fail@plt+0x8b90>
   1660c:	ldr	r0, [r7]
   16610:	bl	15584 <__assert_fail@plt+0x2994>
   16614:	ldr	r0, [r7]
   16618:	str	r0, [sp, #20]
   1661c:	add	r0, sp, #20
   16620:	mov	r1, #0
   16624:	mov	r2, #0
   16628:	bl	1693c <__assert_fail@plt+0x3d4c>
   1662c:	movw	r4, #21912	; 0x5598
   16630:	movt	r4, #5
   16634:	str	r0, [r4]
   16638:	bl	1604c <__assert_fail@plt+0x345c>
   1663c:	ldr	r6, [sp, #20]
   16640:	cmp	r6, #0
   16644:	bne	168cc <__assert_fail@plt+0x3cdc>
   16648:	ldrb	r0, [r5, #44]	; 0x2c
   1664c:	tst	r0, #9
   16650:	bne	166cc <__assert_fail@plt+0x3adc>
   16654:	ldr	r0, [r4]
   16658:	bl	16e50 <__assert_fail@plt+0x4260>
   1665c:	mov	r0, r4
   16660:	bl	16e84 <__assert_fail@plt+0x4294>
   16664:	ldr	r0, [r4]
   16668:	mov	r1, #1
   1666c:	bl	17218 <__assert_fail@plt+0x4628>
   16670:	ldr	r0, [r4]
   16674:	bl	172bc <__assert_fail@plt+0x46cc>
   16678:	ldr	r0, [r4]
   1667c:	mov	r1, #1
   16680:	bl	17218 <__assert_fail@plt+0x4628>
   16684:	ldrb	r0, [r5, #44]	; 0x2c
   16688:	tst	r0, #9
   1668c:	bne	16700 <__assert_fail@plt+0x3b10>
   16690:	ldr	r0, [r4]
   16694:	sub	sp, fp, #28
   16698:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1669c:	movw	r4, #21864	; 0x5568
   166a0:	movt	r4, #5
   166a4:	ldr	r3, [r4]
   166a8:	movw	r0, #63766	; 0xf916
   166ac:	movt	r0, #3
   166b0:	mov	r1, #16
   166b4:	mov	r2, #1
   166b8:	bl	12728 <fwrite@plt>
   166bc:	ldr	r0, [r4]
   166c0:	ldr	r1, [r7]
   166c4:	bl	1525c <__assert_fail@plt+0x266c>
   166c8:	b	16604 <__assert_fail@plt+0x3a14>
   166cc:	movw	r6, #21864	; 0x5568
   166d0:	movt	r6, #5
   166d4:	ldr	r3, [r6]
   166d8:	movw	r0, #65262	; 0xfeee
   166dc:	movt	r0, #3
   166e0:	mov	r1, #11
   166e4:	mov	r2, #1
   166e8:	bl	12728 <fwrite@plt>
   166ec:	ldr	r0, [r6]
   166f0:	ldr	r1, [r4]
   166f4:	mov	r2, #0
   166f8:	bl	16b70 <__assert_fail@plt+0x3f80>
   166fc:	b	16654 <__assert_fail@plt+0x3a64>
   16700:	movw	r5, #21864	; 0x5568
   16704:	movt	r5, #5
   16708:	ldr	r3, [r5]
   1670c:	movw	r0, #63842	; 0xf962
   16710:	movt	r0, #3
   16714:	mov	r1, #21
   16718:	mov	r2, #1
   1671c:	bl	12728 <fwrite@plt>
   16720:	ldr	r0, [r5]
   16724:	ldr	r1, [r4]
   16728:	mov	r2, #0
   1672c:	bl	16b70 <__assert_fail@plt+0x3f80>
   16730:	ldr	r3, [r5]
   16734:	movw	r0, #63864	; 0xf978
   16738:	movt	r0, #3
   1673c:	mov	r1, #24
   16740:	mov	r2, #1
   16744:	bl	12728 <fwrite@plt>
   16748:	ldr	r0, [r5]
   1674c:	ldr	r1, [r4]
   16750:	bl	15338 <__assert_fail@plt+0x2748>
   16754:	ldr	r1, [r5]
   16758:	mov	r0, #10
   1675c:	bl	12a70 <fputc@plt>
   16760:	b	16690 <__assert_fail@plt+0x3aa0>
   16764:	movw	r1, #63574	; 0xf856
   16768:	movt	r1, #3
   1676c:	mov	r0, #0
   16770:	mov	r2, #5
   16774:	bl	12674 <dcgettext@plt>
   16778:	mov	r2, r0
   1677c:	ldr	r0, [sp, #16]
   16780:	ldr	r3, [r4, r0, lsl #2]
   16784:	mov	r0, #0
   16788:	mov	r1, #0
   1678c:	bl	127b8 <error@plt>
   16790:	ldr	r0, [sp, #16]
   16794:	ldr	r0, [r4, r0, lsl #2]
   16798:	mov	r1, #0
   1679c:	bl	129c8 <access@plt>
   167a0:	cmp	r0, #0
   167a4:	bne	167d4 <__assert_fail@plt+0x3be4>
   167a8:	movw	r1, #63610	; 0xf87a
   167ac:	movt	r1, #3
   167b0:	mov	r0, #0
   167b4:	mov	r2, #5
   167b8:	bl	12674 <dcgettext@plt>
   167bc:	mov	r2, r0
   167c0:	ldr	r0, [sl]
   167c4:	ldr	r3, [r0, #4]
   167c8:	mov	r0, #0
   167cc:	mov	r1, #0
   167d0:	bl	127b8 <error@plt>
   167d4:	mov	r0, #1
   167d8:	bl	12884 <exit@plt>
   167dc:	ldr	r0, [sp, #16]
   167e0:	ldr	r1, [r4, r0, lsl #2]
   167e4:	cmp	r1, #0
   167e8:	bne	16820 <__assert_fail@plt+0x3c30>
   167ec:	movw	r1, #63734	; 0xf8f6
   167f0:	movt	r1, #3
   167f4:	b	16800 <__assert_fail@plt+0x3c10>
   167f8:	movw	r1, #63658	; 0xf8aa
   167fc:	movt	r1, #3
   16800:	mov	r0, #0
   16804:	mov	r2, #5
   16808:	bl	12674 <dcgettext@plt>
   1680c:	mov	r2, r0
   16810:	mov	r0, #1
   16814:	mov	r1, #0
   16818:	mov	r3, r6
   1681c:	bl	127b8 <error@plt>
   16820:	cmp	r0, r9
   16824:	ldreq	r0, [r5]
   16828:	cmpeq	r0, #4
   1682c:	beq	16860 <__assert_fail@plt+0x3c70>
   16830:	movw	r1, #63704	; 0xf8d8
   16834:	movt	r1, #3
   16838:	mov	r0, #0
   1683c:	mov	r2, #5
   16840:	bl	12674 <dcgettext@plt>
   16844:	mov	r2, r0
   16848:	ldr	r0, [sp, #16]
   1684c:	ldr	r3, [r4, r0, lsl #2]
   16850:	str	r6, [sp]
   16854:	mov	r0, #1
   16858:	mov	r1, #0
   1685c:	bl	127b8 <error@plt>
   16860:	movw	r1, #63681	; 0xf8c1
   16864:	movt	r1, #3
   16868:	b	16800 <__assert_fail@plt+0x3c10>
   1686c:	movw	r0, #63456	; 0xf7e0
   16870:	movt	r0, #3
   16874:	movw	r1, #63282	; 0xf732
   16878:	movt	r1, #3
   1687c:	movw	r3, #63475	; 0xf7f3
   16880:	movt	r3, #3
   16884:	movw	r2, #1270	; 0x4f6
   16888:	bl	12bf0 <__assert_fail@plt>
   1688c:	movw	r0, #63534	; 0xf82e
   16890:	movt	r0, #3
   16894:	movw	r1, #63282	; 0xf732
   16898:	movt	r1, #3
   1689c:	movw	r3, #63475	; 0xf7f3
   168a0:	movt	r3, #3
   168a4:	movw	r2, #1271	; 0x4f7
   168a8:	bl	12bf0 <__assert_fail@plt>
   168ac:	movw	r0, #63554	; 0xf842
   168b0:	movt	r0, #3
   168b4:	movw	r1, #63282	; 0xf732
   168b8:	movt	r1, #3
   168bc:	movw	r3, #63475	; 0xf7f3
   168c0:	movt	r3, #3
   168c4:	movw	r2, #1272	; 0x4f8
   168c8:	bl	12bf0 <__assert_fail@plt>
   168cc:	ldr	r0, [r6]
   168d0:	movw	r1, #16192	; 0x3f40
   168d4:	movt	r1, #1
   168d8:	cmp	r0, r1
   168dc:	bne	168ec <__assert_fail@plt+0x3cfc>
   168e0:	movw	r1, #64672	; 0xfca0
   168e4:	movt	r1, #3
   168e8:	b	16900 <__assert_fail@plt+0x3d10>
   168ec:	ldr	r0, [r6, #4]
   168f0:	cmp	r0, #0
   168f4:	bne	1691c <__assert_fail@plt+0x3d2c>
   168f8:	movw	r1, #63815	; 0xf947
   168fc:	movt	r1, #3
   16900:	mov	r0, #0
   16904:	mov	r2, #5
   16908:	bl	12674 <dcgettext@plt>
   1690c:	mov	r2, r0
   16910:	mov	r0, #1
   16914:	mov	r1, #0
   16918:	bl	127b8 <error@plt>
   1691c:	movw	r1, #63783	; 0xf927
   16920:	movt	r1, #3
   16924:	mov	r0, #0
   16928:	mov	r2, #5
   1692c:	bl	12674 <dcgettext@plt>
   16930:	mov	r2, r0
   16934:	ldr	r3, [r6, #4]
   16938:	b	16854 <__assert_fail@plt+0x3c64>
   1693c:	push	{r4, r5, r6, r7, fp, lr}
   16940:	add	fp, sp, #16
   16944:	ldr	r4, [r0]
   16948:	cmp	r4, #0
   1694c:	beq	16a4c <__assert_fail@plt+0x3e5c>
   16950:	mov	r5, r0
   16954:	ldr	r0, [r4, #8]
   16958:	cmp	r0, #5
   1695c:	bhi	16a58 <__assert_fail@plt+0x3e68>
   16960:	mov	r6, r1
   16964:	add	r1, pc, #0
   16968:	ldr	pc, [r1, r0, lsl #2]
   1696c:	andeq	r6, r1, ip, asr #20
   16970:	andeq	r6, r1, r4, lsl #19
   16974:	andeq	r6, r1, ip, lsl #19
   16978:	andeq	r6, r1, ip, ror sl
   1697c:			; <UNDEFINED> instruction: 0x000169b8
   16980:	andeq	r6, r1, r4, ror #20
   16984:	ldr	r0, [r4, #152]	; 0x98
   16988:	b	16a10 <__assert_fail@plt+0x3e20>
   1698c:	ldr	r0, [r4, #152]	; 0x98
   16990:	str	r0, [r5]
   16994:	mov	r0, r5
   16998:	mov	r1, #4
   1699c:	mov	r2, r4
   169a0:	bl	1693c <__assert_fail@plt+0x3d4c>
   169a4:	str	r0, [r4, #160]	; 0xa0
   169a8:	ldr	r0, [r5]
   169ac:	cmp	r0, #0
   169b0:	bne	16a1c <__assert_fail@plt+0x3e2c>
   169b4:	b	16a44 <__assert_fail@plt+0x3e54>
   169b8:	ldr	r0, [r4, #152]	; 0x98
   169bc:	cmp	r0, #0
   169c0:	beq	16a88 <__assert_fail@plt+0x3e98>
   169c4:	ldrb	r1, [r0, #33]	; 0x21
   169c8:	cmp	r1, #0
   169cc:	bne	16a88 <__assert_fail@plt+0x3e98>
   169d0:	str	r0, [r5]
   169d4:	ldr	r0, [r0, #8]
   169d8:	cmp	r0, #5
   169dc:	beq	16afc <__assert_fail@plt+0x3f0c>
   169e0:	mov	r0, r5
   169e4:	mov	r1, #0
   169e8:	mov	r2, r4
   169ec:	bl	1693c <__assert_fail@plt+0x3d4c>
   169f0:	mov	r4, r0
   169f4:	ldr	r0, [r5]
   169f8:	cmp	r0, #0
   169fc:	beq	16ab0 <__assert_fail@plt+0x3ec0>
   16a00:	ldr	r1, [r0, #8]
   16a04:	cmp	r1, #5
   16a08:	bne	16ab0 <__assert_fail@plt+0x3ec0>
   16a0c:	ldr	r0, [r0, #152]	; 0x98
   16a10:	str	r0, [r5]
   16a14:	cmp	r0, #0
   16a18:	beq	16a44 <__assert_fail@plt+0x3e54>
   16a1c:	ldr	r0, [r0, #12]
   16a20:	cmp	r0, r6
   16a24:	ble	16a44 <__assert_fail@plt+0x3e54>
   16a28:	mov	r0, r5
   16a2c:	mov	r1, r4
   16a30:	mov	r2, r6
   16a34:	bl	175dc <__assert_fail@plt+0x49ec>
   16a38:	mov	r4, r0
   16a3c:	cmp	r0, #0
   16a40:	beq	16a4c <__assert_fail@plt+0x3e5c>
   16a44:	mov	r0, r4
   16a48:	pop	{r4, r5, r6, r7, fp, pc}
   16a4c:	movw	r1, #64401	; 0xfb91
   16a50:	movt	r1, #3
   16a54:	b	16b10 <__assert_fail@plt+0x3f20>
   16a58:	movw	r1, #64940	; 0xfdac
   16a5c:	movt	r1, #3
   16a60:	b	16b10 <__assert_fail@plt+0x3f20>
   16a64:	mov	r7, r2
   16a68:	cmp	r2, #0
   16a6c:	bne	16abc <__assert_fail@plt+0x3ecc>
   16a70:	movw	r1, #64501	; 0xfbf5
   16a74:	movt	r1, #3
   16a78:	b	16a90 <__assert_fail@plt+0x3ea0>
   16a7c:	movw	r1, #64420	; 0xfba4
   16a80:	movt	r1, #3
   16a84:	b	16a90 <__assert_fail@plt+0x3ea0>
   16a88:	movw	r1, #64694	; 0xfcb6
   16a8c:	movt	r1, #3
   16a90:	mov	r0, #0
   16a94:	mov	r2, #5
   16a98:	bl	12674 <dcgettext@plt>
   16a9c:	mov	r2, r0
   16aa0:	ldr	r3, [r4, #4]
   16aa4:	mov	r0, #1
   16aa8:	mov	r1, #0
   16aac:	bl	127b8 <error@plt>
   16ab0:	movw	r1, #64859	; 0xfd5b
   16ab4:	movt	r1, #3
   16ab8:	b	16b10 <__assert_fail@plt+0x3f20>
   16abc:	ldr	r0, [r7, #8]
   16ac0:	bic	r0, r0, #1
   16ac4:	cmp	r0, #2
   16ac8:	bne	16ae4 <__assert_fail@plt+0x3ef4>
   16acc:	ldrb	r0, [r4, #33]	; 0x21
   16ad0:	cmp	r0, #0
   16ad4:	bne	16ae4 <__assert_fail@plt+0x3ef4>
   16ad8:	movw	r1, #64574	; 0xfc3e
   16adc:	movt	r1, #3
   16ae0:	b	16b34 <__assert_fail@plt+0x3f44>
   16ae4:	ldrb	r0, [r4, #33]	; 0x21
   16ae8:	cmp	r0, #0
   16aec:	bne	16b2c <__assert_fail@plt+0x3f3c>
   16af0:	movw	r1, #64652	; 0xfc8c
   16af4:	movt	r1, #3
   16af8:	b	16b10 <__assert_fail@plt+0x3f20>
   16afc:	ldrb	r0, [r4, #33]	; 0x21
   16b00:	cmp	r0, #0
   16b04:	bne	16b4c <__assert_fail@plt+0x3f5c>
   16b08:	movw	r1, #64804	; 0xfd24
   16b0c:	movt	r1, #3
   16b10:	mov	r0, #0
   16b14:	mov	r2, #5
   16b18:	bl	12674 <dcgettext@plt>
   16b1c:	mov	r2, r0
   16b20:	mov	r0, #1
   16b24:	mov	r1, #0
   16b28:	bl	127b8 <error@plt>
   16b2c:	movw	r1, #64618	; 0xfc6a
   16b30:	movt	r1, #3
   16b34:	mov	r0, #0
   16b38:	mov	r2, #5
   16b3c:	bl	12674 <dcgettext@plt>
   16b40:	mov	r2, r0
   16b44:	ldr	r3, [r7, #4]
   16b48:	b	16aa4 <__assert_fail@plt+0x3eb4>
   16b4c:	movw	r1, #64501	; 0xfbf5
   16b50:	movt	r1, #3
   16b54:	mov	r0, #0
   16b58:	mov	r2, #5
   16b5c:	bl	12674 <dcgettext@plt>
   16b60:	mov	r2, r0
   16b64:	ldr	r0, [r5]
   16b68:	ldr	r3, [r0, #4]
   16b6c:	b	16aa4 <__assert_fail@plt+0x3eb4>
   16b70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b74:	add	fp, sp, #28
   16b78:	sub	sp, sp, #12
   16b7c:	cmp	r1, #0
   16b80:	beq	16e18 <__assert_fail@plt+0x4228>
   16b84:	mov	sl, r2
   16b88:	mov	r6, r1
   16b8c:	mov	r4, r0
   16b90:	movw	r7, #64245	; 0xfaf5
   16b94:	movt	r7, #3
   16b98:	movw	r9, #2407	; 0x967
   16b9c:	movt	r9, #4
   16ba0:	cmp	sl, #1
   16ba4:	blt	16bc8 <__assert_fail@plt+0x3fd8>
   16ba8:	mov	r5, sl
   16bac:	mov	r0, r7
   16bb0:	mov	r1, #4
   16bb4:	mov	r2, #1
   16bb8:	mov	r3, r4
   16bbc:	bl	12728 <fwrite@plt>
   16bc0:	subs	r5, r5, #1
   16bc4:	bne	16bac <__assert_fail@plt+0x3fbc>
   16bc8:	movw	r0, #64250	; 0xfafa
   16bcc:	movt	r0, #3
   16bd0:	mov	r1, #6
   16bd4:	mov	r2, #1
   16bd8:	mov	r3, r4
   16bdc:	bl	12728 <fwrite@plt>
   16be0:	mov	r0, r4
   16be4:	mov	r1, r6
   16be8:	bl	1600c <__assert_fail@plt+0x341c>
   16bec:	ldrsh	r0, [r6, #8]
   16bf0:	bl	17514 <__assert_fail@plt+0x4924>
   16bf4:	mov	r8, r0
   16bf8:	ldrsh	r0, [r6, #12]
   16bfc:	bl	17558 <__assert_fail@plt+0x4968>
   16c00:	mov	r3, r0
   16c04:	mov	r0, r4
   16c08:	movw	r1, #64257	; 0xfb01
   16c0c:	movt	r1, #3
   16c10:	mov	r2, r8
   16c14:	bl	128fc <fprintf@plt>
   16c18:	ldr	r0, [r6, #24]
   16c1c:	bl	1759c <__assert_fail@plt+0x49ac>
   16c20:	mov	r2, r0
   16c24:	ldrb	r0, [r6, #16]
   16c28:	vldr	s0, [r6, #28]
   16c2c:	cmp	r0, #0
   16c30:	mov	r0, r9
   16c34:	movw	r1, #64323	; 0xfb43
   16c38:	movt	r1, #3
   16c3c:	moveq	r0, r1
   16c40:	vcvt.f64.f32	d16, s0
   16c44:	str	r0, [sp, #8]
   16c48:	vstr	d16, [sp]
   16c4c:	mov	r0, r4
   16c50:	movw	r1, #64275	; 0xfb13
   16c54:	movt	r1, #3
   16c58:	bl	128fc <fprintf@plt>
   16c5c:	ldrb	r0, [r6, #18]
   16c60:	cmp	r0, #0
   16c64:	bne	16c80 <__assert_fail@plt+0x4090>
   16c68:	ldrb	r0, [r6, #19]
   16c6c:	cmp	r0, #0
   16c70:	bne	16c80 <__assert_fail@plt+0x4090>
   16c74:	ldrb	r0, [r6, #20]
   16c78:	cmp	r0, #0
   16c7c:	beq	16d24 <__assert_fail@plt+0x4134>
   16c80:	movw	r0, #64327	; 0xfb47
   16c84:	movt	r0, #3
   16c88:	mov	r1, #6
   16c8c:	mov	r2, #1
   16c90:	mov	r3, r4
   16c94:	bl	12728 <fwrite@plt>
   16c98:	ldrb	r0, [r6, #18]
   16c9c:	cmp	r0, #0
   16ca0:	beq	16cc4 <__assert_fail@plt+0x40d4>
   16ca4:	mov	r5, #1
   16ca8:	movw	r0, #6572	; 0x19ac
   16cac:	movt	r0, #4
   16cb0:	mov	r1, #4
   16cb4:	mov	r2, #1
   16cb8:	mov	r3, r4
   16cbc:	bl	12728 <fwrite@plt>
   16cc0:	b	16cc8 <__assert_fail@plt+0x40d8>
   16cc4:	mov	r5, #0
   16cc8:	ldrb	r0, [r6, #20]
   16ccc:	cmp	r0, #0
   16cd0:	beq	16cf8 <__assert_fail@plt+0x4108>
   16cd4:	cmp	r5, #0
   16cd8:	movw	r2, #64342	; 0xfb56
   16cdc:	movt	r2, #3
   16ce0:	moveq	r2, r9
   16ce4:	mov	r0, r4
   16ce8:	movw	r1, #64334	; 0xfb4e
   16cec:	movt	r1, #3
   16cf0:	bl	128fc <fprintf@plt>
   16cf4:	mov	r5, #1
   16cf8:	ldrb	r0, [r6, #19]
   16cfc:	cmp	r0, #0
   16d00:	beq	16d24 <__assert_fail@plt+0x4134>
   16d04:	cmp	r5, #0
   16d08:	movw	r2, #64342	; 0xfb56
   16d0c:	movt	r2, #3
   16d10:	moveq	r2, r9
   16d14:	mov	r0, r4
   16d18:	movw	r1, #64344	; 0xfb58
   16d1c:	movt	r1, #3
   16d20:	bl	128fc <fprintf@plt>
   16d24:	mov	r0, #10
   16d28:	mov	r1, r4
   16d2c:	bl	12a70 <fputc@plt>
   16d30:	cmp	sl, #1
   16d34:	blt	16d58 <__assert_fail@plt+0x4168>
   16d38:	mov	r5, sl
   16d3c:	mov	r0, r7
   16d40:	mov	r1, #4
   16d44:	mov	r2, #1
   16d48:	mov	r3, r4
   16d4c:	bl	12728 <fwrite@plt>
   16d50:	subs	r5, r5, #1
   16d54:	bne	16d3c <__assert_fail@plt+0x414c>
   16d58:	ldr	r0, [r6, #156]	; 0x9c
   16d5c:	cmp	r0, #0
   16d60:	beq	16d98 <__assert_fail@plt+0x41a8>
   16d64:	movw	r0, #64365	; 0xfb6d
   16d68:	movt	r0, #3
   16d6c:	mov	r1, #6
   16d70:	mov	r2, #1
   16d74:	mov	r3, r4
   16d78:	bl	12728 <fwrite@plt>
   16d7c:	ldr	r1, [r6, #156]	; 0x9c
   16d80:	add	r2, sl, #1
   16d84:	mov	r0, r4
   16d88:	bl	16b70 <__assert_fail@plt+0x3f80>
   16d8c:	cmp	sl, #1
   16d90:	bge	16dc4 <__assert_fail@plt+0x41d4>
   16d94:	b	16de4 <__assert_fail@plt+0x41f4>
   16d98:	ldr	r0, [r6, #160]	; 0xa0
   16d9c:	cmp	r0, #0
   16da0:	beq	16e30 <__assert_fail@plt+0x4240>
   16da4:	movw	r0, #64372	; 0xfb74
   16da8:	movt	r0, #3
   16dac:	mov	r1, #9
   16db0:	mov	r2, #1
   16db4:	mov	r3, r4
   16db8:	bl	12728 <fwrite@plt>
   16dbc:	cmp	sl, #1
   16dc0:	blt	16de4 <__assert_fail@plt+0x41f4>
   16dc4:	mov	r5, sl
   16dc8:	mov	r0, r7
   16dcc:	mov	r1, #4
   16dd0:	mov	r2, #1
   16dd4:	mov	r3, r4
   16dd8:	bl	12728 <fwrite@plt>
   16ddc:	subs	r5, r5, #1
   16de0:	bne	16dc8 <__assert_fail@plt+0x41d8>
   16de4:	ldr	r0, [r6, #160]	; 0xa0
   16de8:	cmp	r0, #0
   16dec:	beq	16e20 <__assert_fail@plt+0x4230>
   16df0:	movw	r0, #64382	; 0xfb7e
   16df4:	movt	r0, #3
   16df8:	mov	r1, #7
   16dfc:	mov	r2, #1
   16e00:	mov	r3, r4
   16e04:	bl	12728 <fwrite@plt>
   16e08:	add	sl, sl, #1
   16e0c:	ldr	r6, [r6, #160]	; 0xa0
   16e10:	cmp	r6, #0
   16e14:	bne	16ba0 <__assert_fail@plt+0x3fb0>
   16e18:	sub	sp, fp, #28
   16e1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e20:	movw	r0, #64390	; 0xfb86
   16e24:	movt	r0, #3
   16e28:	mov	r1, #10
   16e2c:	b	16e3c <__assert_fail@plt+0x424c>
   16e30:	movw	r0, #64351	; 0xfb5f
   16e34:	movt	r0, #3
   16e38:	mov	r1, #13
   16e3c:	mov	r2, #1
   16e40:	mov	r3, r4
   16e44:	sub	sp, fp, #28
   16e48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e4c:	b	12728 <fwrite@plt>
   16e50:	cmp	r0, #0
   16e54:	bxeq	lr
   16e58:	push	{r4, sl, fp, lr}
   16e5c:	add	fp, sp, #8
   16e60:	mov	r4, r0
   16e64:	ldr	r0, [r0, #160]	; 0xa0
   16e68:	bl	16e50 <__assert_fail@plt+0x4260>
   16e6c:	ldr	r0, [r4, #156]	; 0x9c
   16e70:	bl	16e50 <__assert_fail@plt+0x4260>
   16e74:	mov	r0, r4
   16e78:	bl	176d4 <__assert_fail@plt+0x4ae4>
   16e7c:	str	r0, [r4, #24]
   16e80:	pop	{r4, sl, fp, pc}
   16e84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e88:	add	fp, sp, #28
   16e8c:	sub	sp, sp, #116	; 0x74
   16e90:	mov	r1, #0
   16e94:	str	r1, [fp, #-36]	; 0xffffffdc
   16e98:	str	r1, [fp, #-40]	; 0xffffffd8
   16e9c:	str	r1, [fp, #-44]	; 0xffffffd4
   16ea0:	str	r1, [fp, #-48]	; 0xffffffd0
   16ea4:	cmp	r0, #0
   16ea8:	beq	171b4 <__assert_fail@plt+0x45c4>
   16eac:	mov	r8, r0
   16eb0:	ldr	r0, [r0]
   16eb4:	cmp	r0, #0
   16eb8:	beq	171b4 <__assert_fail@plt+0x45c4>
   16ebc:	mov	r4, #0
   16ec0:	add	r5, sp, #8
   16ec4:	add	r0, r5, r4
   16ec8:	bl	178e0 <__assert_fail@plt+0x4cf0>
   16ecc:	add	r4, r4, #8
   16ed0:	cmp	r4, #88	; 0x58
   16ed4:	bne	16ec4 <__assert_fail@plt+0x42d4>
   16ed8:	ldr	r0, [r8]
   16edc:	mov	r1, r0
   16ee0:	ldr	r3, [r1, #156]!	; 0x9c
   16ee4:	cmp	r3, #0
   16ee8:	beq	16f10 <__assert_fail@plt+0x4320>
   16eec:	mov	r7, r0
   16ef0:	mov	r2, r1
   16ef4:	mov	r0, r3
   16ef8:	mov	r1, r3
   16efc:	ldr	r3, [r1, #156]!	; 0x9c
   16f00:	cmp	r3, #0
   16f04:	bne	16eec <__assert_fail@plt+0x42fc>
   16f08:	ldr	r1, [r7, #12]
   16f0c:	b	16f18 <__assert_fail@plt+0x4328>
   16f10:	mov	r1, #3
   16f14:	mov	r2, r8
   16f18:	ldr	r3, [r0, #8]
   16f1c:	cmp	r3, #3
   16f20:	blne	178f0 <__assert_fail@plt+0x4d00>
   16f24:	movw	r0, #24204	; 0x5e8c
   16f28:	movt	r0, #5
   16f2c:	ldrb	r0, [r0, #44]	; 0x2c
   16f30:	tst	r0, #9
   16f34:	bne	171c0 <__assert_fail@plt+0x45d0>
   16f38:	ldr	r0, [r8]
   16f3c:	cmp	r0, #0
   16f40:	beq	1718c <__assert_fail@plt+0x459c>
   16f44:	ldr	r1, [r0, #8]
   16f48:	cmp	r1, #3
   16f4c:	mov	r6, #0
   16f50:	ldreq	r6, [r0, #12]
   16f54:	ldr	r0, [r8]
   16f58:	cmp	r0, #0
   16f5c:	beq	1718c <__assert_fail@plt+0x459c>
   16f60:	mov	r1, #0
   16f64:	str	r1, [sp, #4]
   16f68:	b	16f78 <__assert_fail@plt+0x4388>
   16f6c:	ldr	r0, [r8, #156]!	; 0x9c
   16f70:	cmp	r0, #0
   16f74:	beq	1719c <__assert_fail@plt+0x45ac>
   16f78:	mov	r9, r8
   16f7c:	mov	r8, r0
   16f80:	ldr	r0, [r8, #8]
   16f84:	cmp	r0, #3
   16f88:	bne	16fac <__assert_fail@plt+0x43bc>
   16f8c:	ldr	r0, [r8, #12]
   16f90:	cmp	r0, r6
   16f94:	beq	16fac <__assert_fail@plt+0x43bc>
   16f98:	mov	r0, r8
   16f9c:	mov	r1, r6
   16fa0:	mov	r2, r9
   16fa4:	bl	178f0 <__assert_fail@plt+0x4d00>
   16fa8:	mov	r8, r0
   16fac:	mov	r4, r8
   16fb0:	ldr	sl, [r4, #160]!	; 0xa0
   16fb4:	ldr	r0, [sl, #8]
   16fb8:	cmp	r0, #2
   16fbc:	bcs	17138 <__assert_fail@plt+0x4548>
   16fc0:	cmp	r6, #1
   16fc4:	beq	1715c <__assert_fail@plt+0x456c>
   16fc8:	ldrb	r0, [sl, #16]
   16fcc:	cmp	r0, #0
   16fd0:	bne	1715c <__assert_fail@plt+0x456c>
   16fd4:	ldr	r7, [sl]
   16fd8:	mov	r0, sl
   16fdc:	bl	1799c <__assert_fail@plt+0x4dac>
   16fe0:	cmp	r0, #0
   16fe4:	beq	17054 <__assert_fail@plt+0x4464>
   16fe8:	movw	r0, #24204	; 0x5e8c
   16fec:	movt	r0, #5
   16ff0:	ldrb	r0, [r0, #44]	; 0x2c
   16ff4:	tst	r0, #8
   16ff8:	sub	r0, fp, #48	; 0x30
   16ffc:	beq	170cc <__assert_fail@plt+0x44dc>
   17000:	movw	r0, #24204	; 0x5e8c
   17004:	movt	r0, #5
   17008:	ldrh	r2, [r0, #68]	; 0x44
   1700c:	movw	r0, #21864	; 0x5568
   17010:	movt	r0, #5
   17014:	mov	r7, r0
   17018:	ldr	r0, [r0]
   1701c:	movw	r1, #65274	; 0xfefa
   17020:	movt	r1, #3
   17024:	bl	128fc <fprintf@plt>
   17028:	ldr	r0, [r7]
   1702c:	ldr	r1, [r4]
   17030:	bl	1600c <__assert_fail@plt+0x341c>
   17034:	ldr	r3, [r7]
   17038:	movw	r0, #65307	; 0xff1b
   1703c:	movt	r0, #3
   17040:	mov	r1, #16
   17044:	mov	r2, #1
   17048:	bl	12728 <fwrite@plt>
   1704c:	sub	r0, fp, #48	; 0x30
   17050:	b	170cc <__assert_fail@plt+0x44dc>
   17054:	movw	r0, #19772	; 0x4d3c
   17058:	movt	r0, #1
   1705c:	cmp	r7, r0
   17060:	sub	r0, fp, #40	; 0x28
   17064:	beq	170cc <__assert_fail@plt+0x44dc>
   17068:	movw	r0, #24204	; 0x5e8c
   1706c:	movt	r0, #5
   17070:	ldrh	r2, [r0, #68]	; 0x44
   17074:	cmp	r2, #2
   17078:	bcc	1715c <__assert_fail@plt+0x456c>
   1707c:	ldr	r0, [sl, #24]
   17080:	sub	r0, r0, #1
   17084:	cmp	r0, #1
   17088:	bhi	170a4 <__assert_fail@plt+0x44b4>
   1708c:	cmp	r2, #2
   17090:	bhi	170ac <__assert_fail@plt+0x44bc>
   17094:	ldrb	r0, [sl, #18]
   17098:	cmp	r0, #0
   1709c:	beq	170ac <__assert_fail@plt+0x44bc>
   170a0:	b	1715c <__assert_fail@plt+0x456c>
   170a4:	cmp	r2, #3
   170a8:	bcc	1715c <__assert_fail@plt+0x456c>
   170ac:	movw	r0, #24204	; 0x5e8c
   170b0:	movt	r0, #5
   170b4:	ldrb	r0, [r0, #44]	; 0x2c
   170b8:	tst	r0, #8
   170bc:	bne	170e8 <__assert_fail@plt+0x44f8>
   170c0:	ldr	r0, [r4]
   170c4:	ldr	r0, [r0, #24]
   170c8:	add	r0, r5, r0, lsl #3
   170cc:	mov	r1, r8
   170d0:	mov	r2, r9
   170d4:	bl	17a3c <__assert_fail@plt+0x4e4c>
   170d8:	ldr	r8, [r9]
   170dc:	cmp	r8, #0
   170e0:	bne	16f80 <__assert_fail@plt+0x4390>
   170e4:	b	17198 <__assert_fail@plt+0x45a8>
   170e8:	movw	r0, #21864	; 0x5568
   170ec:	movt	r0, #5
   170f0:	mov	r7, r0
   170f4:	ldr	r0, [r0]
   170f8:	movw	r1, #65324	; 0xff2c
   170fc:	movt	r1, #3
   17100:	bl	128fc <fprintf@plt>
   17104:	ldr	r0, [r7]
   17108:	ldr	r1, [r4]
   1710c:	bl	1600c <__assert_fail@plt+0x341c>
   17110:	ldr	sl, [r7]
   17114:	ldr	r0, [r4]
   17118:	ldr	r0, [r0, #24]
   1711c:	bl	1759c <__assert_fail@plt+0x49ac>
   17120:	mov	r2, r0
   17124:	mov	r0, sl
   17128:	movw	r1, #65354	; 0xff4a
   1712c:	movt	r1, #3
   17130:	bl	128fc <fprintf@plt>
   17134:	b	170c0 <__assert_fail@plt+0x44d0>
   17138:	beq	1714c <__assert_fail@plt+0x455c>
   1713c:	cmp	r0, #3
   17140:	bne	171f4 <__assert_fail@plt+0x4604>
   17144:	mov	r0, r4
   17148:	b	17150 <__assert_fail@plt+0x4560>
   1714c:	add	r0, sl, #160	; 0xa0
   17150:	bl	16e84 <__assert_fail@plt+0x4294>
   17154:	ldr	r1, [r4]
   17158:	strb	r0, [r1, #16]
   1715c:	ldr	r0, [r4]
   17160:	ldrb	r0, [r0, #16]
   17164:	cmp	r0, #0
   17168:	beq	16f6c <__assert_fail@plt+0x437c>
   1716c:	mov	r0, r5
   17170:	sub	r1, fp, #48	; 0x30
   17174:	sub	r2, fp, #40	; 0x28
   17178:	mov	r3, r9
   1717c:	bl	17a60 <__assert_fail@plt+0x4e70>
   17180:	mov	r0, #1
   17184:	str	r0, [sp, #4]
   17188:	b	16f6c <__assert_fail@plt+0x437c>
   1718c:	mov	r0, #0
   17190:	str	r0, [sp, #4]
   17194:	b	1719c <__assert_fail@plt+0x45ac>
   17198:	mov	r8, r9
   1719c:	add	r0, sp, #8
   171a0:	sub	r1, fp, #48	; 0x30
   171a4:	sub	r2, fp, #40	; 0x28
   171a8:	mov	r3, r8
   171ac:	bl	17a60 <__assert_fail@plt+0x4e70>
   171b0:	ldr	r1, [sp, #4]
   171b4:	and	r0, r1, #1
   171b8:	sub	sp, fp, #28
   171bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171c0:	movw	r4, #21864	; 0x5568
   171c4:	movt	r4, #5
   171c8:	ldr	r3, [r4]
   171cc:	movw	r0, #65251	; 0xfee3
   171d0:	movt	r0, #3
   171d4:	mov	r1, #22
   171d8:	mov	r2, #1
   171dc:	bl	12728 <fwrite@plt>
   171e0:	ldr	r0, [r4]
   171e4:	ldr	r1, [r8]
   171e8:	mov	r2, #0
   171ec:	bl	16b70 <__assert_fail@plt+0x3f80>
   171f0:	b	16f38 <__assert_fail@plt+0x4348>
   171f4:	movw	r1, #64940	; 0xfdac
   171f8:	movt	r1, #3
   171fc:	mov	r0, #0
   17200:	mov	r2, #5
   17204:	bl	12674 <dcgettext@plt>
   17208:	mov	r2, r0
   1720c:	mov	r0, #1
   17210:	mov	r1, #0
   17214:	bl	127b8 <error@plt>
   17218:	push	{r4, sl, fp, lr}
   1721c:	add	fp, sp, #8
   17220:	mov	r4, r0
   17224:	tst	r1, #1
   17228:	beq	17254 <__assert_fail@plt+0x4664>
   1722c:	b	17248 <__assert_fail@plt+0x4658>
   17230:	ldr	r4, [r4, #160]	; 0xa0
   17234:	mov	r1, #0
   17238:	cmp	r4, #0
   1723c:	beq	17278 <__assert_fail@plt+0x4688>
   17240:	tst	r1, #1
   17244:	beq	17254 <__assert_fail@plt+0x4664>
   17248:	ldr	r0, [r4, #8]
   1724c:	cmp	r0, #3
   17250:	bne	1729c <__assert_fail@plt+0x46ac>
   17254:	ldr	r0, [r4, #156]	; 0x9c
   17258:	cmp	r0, #0
   1725c:	beq	17230 <__assert_fail@plt+0x4640>
   17260:	ldr	r1, [r0, #8]
   17264:	cmp	r1, #3
   17268:	bne	1727c <__assert_fail@plt+0x468c>
   1726c:	mov	r1, #0
   17270:	bl	17218 <__assert_fail@plt+0x4628>
   17274:	b	17230 <__assert_fail@plt+0x4640>
   17278:	pop	{r4, sl, fp, pc}
   1727c:	movw	r0, #65501	; 0xffdd
   17280:	movt	r0, #3
   17284:	movw	r1, #63282	; 0xf732
   17288:	movt	r1, #3
   1728c:	movw	r3, #65449	; 0xffa9
   17290:	movt	r3, #3
   17294:	movw	r2, #1235	; 0x4d3
   17298:	bl	12bf0 <__assert_fail@plt>
   1729c:	movw	r0, #65430	; 0xff96
   172a0:	movt	r0, #3
   172a4:	movw	r1, #63282	; 0xf732
   172a8:	movt	r1, #3
   172ac:	movw	r3, #65449	; 0xffa9
   172b0:	movt	r3, #3
   172b4:	movw	r2, #1230	; 0x4ce
   172b8:	bl	12bf0 <__assert_fail@plt>
   172bc:	push	{r4, sl, fp, lr}
   172c0:	add	fp, sp, #8
   172c4:	cmp	r0, #0
   172c8:	popeq	{r4, sl, fp, pc}
   172cc:	mov	r4, r0
   172d0:	mov	r0, r4
   172d4:	bl	17c94 <__assert_fail@plt+0x50a4>
   172d8:	cmp	r0, #0
   172dc:	bne	172d0 <__assert_fail@plt+0x46e0>
   172e0:	ldr	r0, [r4, #156]	; 0x9c
   172e4:	bl	172bc <__assert_fail@plt+0x46cc>
   172e8:	ldr	r4, [r4, #160]	; 0xa0
   172ec:	cmp	r4, #0
   172f0:	bne	172d0 <__assert_fail@plt+0x46e0>
   172f4:	pop	{r4, sl, fp, pc}
   172f8:	push	{fp, lr}
   172fc:	mov	fp, sp
   17300:	bl	17314 <__assert_fail@plt+0x4724>
   17304:	cmp	r0, #0
   17308:	movne	r1, #0
   1730c:	strne	r1, [r0, #36]	; 0x24
   17310:	pop	{fp, pc}
   17314:	push	{r4, sl, fp, lr}
   17318:	add	fp, sp, #8
   1731c:	mov	r4, r0
   17320:	ldr	r0, [r0]
   17324:	cmp	r0, #2
   17328:	beq	173c4 <__assert_fail@plt+0x47d4>
   1732c:	cmp	r0, #0
   17330:	beq	173e4 <__assert_fail@plt+0x47f4>
   17334:	mov	r0, #176	; 0xb0
   17338:	bl	2b8ec <__assert_fail@plt+0x18cfc>
   1733c:	movw	r2, #21916	; 0x559c
   17340:	movt	r2, #5
   17344:	ldr	r1, [r2]
   17348:	cmp	r1, #0
   1734c:	movw	r1, #21920	; 0x55a0
   17350:	movt	r1, #5
   17354:	beq	17364 <__assert_fail@plt+0x4774>
   17358:	ldr	r2, [r1]
   1735c:	str	r0, [r2, #152]	; 0x98
   17360:	b	17368 <__assert_fail@plt+0x4778>
   17364:	str	r0, [r2]
   17368:	str	r0, [r1]
   1736c:	mov	r2, #0
   17370:	str	r2, [r0, #8]
   17374:	str	r2, [r0, #12]
   17378:	str	r4, [r0, #172]	; 0xac
   1737c:	ldr	r4, [r1]
   17380:	movw	r0, #63949	; 0xf9cd
   17384:	movt	r0, #3
   17388:	str	r0, [r4, #36]	; 0x24
   1738c:	mov	r0, #10
   17390:	movw	r1, #257	; 0x101
   17394:	strh	r1, [r4, #18]
   17398:	movw	r1, #24204	; 0x5e8c
   1739c:	movt	r1, #5
   173a0:	ldrb	r1, [r1, #15]
   173a4:	mov	r3, #1065353216	; 0x3f800000
   173a8:	str	r0, [r4, #24]
   173ac:	str	r3, [r4, #28]
   173b0:	strb	r1, [r4, #32]
   173b4:	mov	r0, r4
   173b8:	bl	17404 <__assert_fail@plt+0x4814>
   173bc:	mov	r0, r4
   173c0:	pop	{r4, sl, fp, pc}
   173c4:	movw	r0, #62511	; 0xf42f
   173c8:	movt	r0, #3
   173cc:	movw	r1, #63282	; 0xf732
   173d0:	movt	r1, #3
   173d4:	movw	r3, #63889	; 0xf991
   173d8:	movt	r3, #3
   173dc:	movw	r2, #1486	; 0x5ce
   173e0:	bl	12bf0 <__assert_fail@plt>
   173e4:	movw	r0, #62475	; 0xf40b
   173e8:	movt	r0, #3
   173ec:	movw	r1, #63282	; 0xf732
   173f0:	movt	r1, #3
   173f4:	movw	r3, #63889	; 0xf991
   173f8:	movt	r3, #3
   173fc:	movw	r2, #1485	; 0x5cd
   17400:	bl	12bf0 <__assert_fail@plt>
   17404:	mov	r1, #0
   17408:	str	r1, [r0, #164]	; 0xa4
   1740c:	str	r1, [r0, #168]	; 0xa8
   17410:	bx	lr
   17414:	push	{r4, r5, r6, sl, fp, lr}
   17418:	add	fp, sp, #16
   1741c:	mov	r4, r1
   17420:	mov	r5, r0
   17424:	movw	r6, #21924	; 0x55a4
   17428:	movt	r6, #5
   1742c:	ldr	r0, [r6]
   17430:	cmp	r0, #0
   17434:	bne	17450 <__assert_fail@plt+0x4860>
   17438:	movw	r0, #63980	; 0xf9ec
   1743c:	movt	r0, #3
   17440:	bl	1b978 <__assert_fail@plt+0x8d88>
   17444:	str	r0, [r6]
   17448:	cmp	r0, #0
   1744c:	beq	174f4 <__assert_fail@plt+0x4904>
   17450:	movw	r1, #21920	; 0x55a0
   17454:	movt	r1, #5
   17458:	ldr	r1, [r1]
   1745c:	cmp	r1, #0
   17460:	beq	174bc <__assert_fail@plt+0x48cc>
   17464:	ldr	r1, [r1, #8]
   17468:	cmp	r1, #1
   1746c:	cmpne	r1, #5
   17470:	bne	174b4 <__assert_fail@plt+0x48c4>
   17474:	bl	172f8 <__assert_fail@plt+0x4708>
   17478:	mov	r1, #0
   1747c:	str	r1, [r0, #36]	; 0x24
   17480:	str	r1, [r0, #40]	; 0x28
   17484:	mov	r2, #3
   17488:	movw	r3, #64125	; 0xfa7d
   1748c:	movt	r3, #3
   17490:	movw	r6, #15900	; 0x3e1c
   17494:	movt	r6, #1
   17498:	str	r6, [r0]
   1749c:	str	r3, [r0, #4]
   174a0:	str	r2, [r0, #8]
   174a4:	str	r2, [r0, #12]
   174a8:	str	r1, [r0, #16]
   174ac:	strb	r1, [r0, #20]
   174b0:	b	174bc <__assert_fail@plt+0x48cc>
   174b4:	cmp	r1, #0
   174b8:	beq	174d0 <__assert_fail@plt+0x48e0>
   174bc:	mov	r0, r5
   174c0:	bl	17314 <__assert_fail@plt+0x4724>
   174c4:	str	r5, [r0, #172]	; 0xac
   174c8:	str	r4, [r0, #36]	; 0x24
   174cc:	pop	{r4, r5, r6, sl, fp, pc}
   174d0:	movw	r1, #64083	; 0xfa53
   174d4:	movt	r1, #3
   174d8:	mov	r0, #0
   174dc:	mov	r2, #5
   174e0:	bl	12674 <dcgettext@plt>
   174e4:	mov	r2, r0
   174e8:	mov	r0, #1
   174ec:	mov	r1, #0
   174f0:	bl	127b8 <error@plt>
   174f4:	movw	r0, #63984	; 0xf9f0
   174f8:	movt	r0, #3
   174fc:	movw	r1, #63282	; 0xf732
   17500:	movt	r1, #3
   17504:	movw	r3, #64002	; 0xfa02
   17508:	movt	r3, #3
   1750c:	movw	r2, #1528	; 0x5f8
   17510:	bl	12bf0 <__assert_fail@plt>
   17514:	mov	r1, #0
   17518:	movw	r2, #424	; 0x1a8
   1751c:	movt	r2, #4
   17520:	uxth	r0, r0
   17524:	ldrh	r3, [r2]
   17528:	cmp	r3, r0
   1752c:	beq	17544 <__assert_fail@plt+0x4954>
   17530:	add	r2, r2, #8
   17534:	add	r1, r1, #1
   17538:	cmp	r1, #6
   1753c:	bne	17524 <__assert_fail@plt+0x4934>
   17540:	mov	r1, #6
   17544:	movw	r0, #424	; 0x1a8
   17548:	movt	r0, #4
   1754c:	add	r0, r0, r1, lsl #3
   17550:	ldr	r0, [r0, #4]
   17554:	bx	lr
   17558:	mov	r1, #0
   1755c:	movw	r2, #480	; 0x1e0
   17560:	movt	r2, #4
   17564:	uxth	r0, r0
   17568:	ldrh	r3, [r2]
   1756c:	cmp	r3, r0
   17570:	beq	17588 <__assert_fail@plt+0x4998>
   17574:	add	r2, r2, #8
   17578:	add	r1, r1, #1
   1757c:	cmp	r1, #6
   17580:	bne	17568 <__assert_fail@plt+0x4978>
   17584:	mov	r1, #6
   17588:	movw	r0, #480	; 0x1e0
   1758c:	movt	r0, #4
   17590:	add	r0, r0, r1, lsl #3
   17594:	ldr	r0, [r0, #4]
   17598:	bx	lr
   1759c:	mov	r1, r0
   175a0:	mov	r2, #0
   175a4:	movw	ip, #21172	; 0x52b4
   175a8:	movt	ip, #5
   175ac:	movw	r0, #388	; 0x184
   175b0:	movt	r0, #4
   175b4:	ldr	r3, [ip, r2, lsl #3]
   175b8:	cmp	r3, r1
   175bc:	beq	175d0 <__assert_fail@plt+0x49e0>
   175c0:	add	r2, r2, #1
   175c4:	cmp	r2, #11
   175c8:	bxeq	lr
   175cc:	b	175b4 <__assert_fail@plt+0x49c4>
   175d0:	add	r0, ip, r2, lsl #3
   175d4:	ldr	r0, [r0, #4]
   175d8:	bx	lr
   175dc:	push	{r4, r5, r6, sl, fp, lr}
   175e0:	add	fp, sp, #16
   175e4:	mov	r4, r0
   175e8:	ldr	r0, [r0]
   175ec:	mov	r6, #0
   175f0:	cmp	r0, #0
   175f4:	beq	1767c <__assert_fail@plt+0x4a8c>
   175f8:	ldr	r0, [r0, #8]
   175fc:	cmp	r0, #5
   17600:	beq	1767c <__assert_fail@plt+0x4a8c>
   17604:	mov	r5, r2
   17608:	ldr	r2, [r4]
   1760c:	mov	r6, r1
   17610:	cmp	r2, #0
   17614:	beq	1767c <__assert_fail@plt+0x4a8c>
   17618:	ldr	r0, [r2, #12]
   1761c:	cmp	r0, r5
   17620:	ble	1767c <__assert_fail@plt+0x4a8c>
   17624:	ldr	r0, [r2, #8]
   17628:	cmp	r0, #5
   1762c:	bhi	176a8 <__assert_fail@plt+0x4ab8>
   17630:	add	r1, pc, #0
   17634:	ldr	pc, [r1, r0, lsl #2]
   17638:	andeq	r7, r1, r4, lsl #13
   1763c:	andeq	r7, r1, r4, lsl #13
   17640:	andeq	r7, r1, r4, lsl #13
   17644:	andeq	r7, r1, r0, asr r6
   17648:	andeq	r7, r1, r4, lsl #13
   1764c:	andeq	r7, r1, ip, ror r6
   17650:	str	r6, [r2, #156]	; 0x9c
   17654:	ldr	r6, [r4]
   17658:	ldr	r0, [r6, #152]	; 0x98
   1765c:	str	r0, [r4]
   17660:	ldrsh	r1, [r6, #12]
   17664:	mov	r0, r4
   17668:	bl	1693c <__assert_fail@plt+0x3d4c>
   1766c:	str	r0, [r6, #160]	; 0xa0
   17670:	ldr	r2, [r4]
   17674:	cmp	r2, #0
   17678:	bne	17618 <__assert_fail@plt+0x4a28>
   1767c:	mov	r0, r6
   17680:	pop	{r4, r5, r6, sl, fp, pc}
   17684:	movw	r1, #64401	; 0xfb91
   17688:	movt	r1, #3
   1768c:	mov	r0, #0
   17690:	mov	r2, #5
   17694:	bl	12674 <dcgettext@plt>
   17698:	mov	r2, r0
   1769c:	mov	r0, #1
   176a0:	mov	r1, #0
   176a4:	bl	127b8 <error@plt>
   176a8:	movw	r1, #64973	; 0xfdcd
   176ac:	movt	r1, #3
   176b0:	mov	r0, #0
   176b4:	mov	r2, #5
   176b8:	bl	12674 <dcgettext@plt>
   176bc:	mov	r2, r0
   176c0:	ldr	r0, [r4]
   176c4:	ldr	r3, [r0, #8]
   176c8:	mov	r0, #1
   176cc:	mov	r1, #0
   176d0:	bl	127b8 <error@plt>
   176d4:	push	{r4, r5, r6, sl, fp, lr}
   176d8:	add	fp, sp, #16
   176dc:	sub	sp, sp, #16
   176e0:	mov	r5, r0
   176e4:	ldrb	r0, [r0, #18]
   176e8:	mov	r4, #3
   176ec:	cmp	r0, #0
   176f0:	bne	1770c <__assert_fail@plt+0x4b1c>
   176f4:	ldrb	r0, [r5, #20]
   176f8:	mov	r4, #1
   176fc:	cmp	r0, #0
   17700:	bne	1770c <__assert_fail@plt+0x4b1c>
   17704:	ldrb	r0, [r5, #19]
   17708:	lsl	r4, r0, #1
   1770c:	ldr	r0, [r5]
   17710:	movw	r1, #17256	; 0x4368
   17714:	movt	r1, #1
   17718:	cmp	r0, r1
   1771c:	movwne	r1, #17260	; 0x436c
   17720:	movtne	r1, #1
   17724:	cmpne	r0, r1
   17728:	bne	17740 <__assert_fail@plt+0x4b50>
   1772c:	ldrb	r1, [r5, #40]	; 0x28
   17730:	mov	r0, #7
   17734:	cmp	r1, #0
   17738:	movweq	r0, #8
   1773c:	b	17804 <__assert_fail@plt+0x4c14>
   17740:	movw	r1, #40628	; 0x9eb4
   17744:	movt	r1, #1
   17748:	cmp	r0, r1
   1774c:	beq	177d0 <__assert_fail@plt+0x4be0>
   17750:	movw	r6, #21928	; 0x55a8
   17754:	movt	r6, #5
   17758:	ldrb	r0, [r6]
   1775c:	cmp	r0, #0
   17760:	bne	17794 <__assert_fail@plt+0x4ba4>
   17764:	movw	r0, #21260	; 0x530c
   17768:	movt	r0, #5
   1776c:	movw	r3, #30764	; 0x782c
   17770:	movt	r3, #1
   17774:	mov	r1, #59	; 0x3b
   17778:	mov	r2, #8
   1777c:	bl	12af4 <qsort@plt>
   17780:	bl	17860 <__assert_fail@plt+0x4c70>
   17784:	cmp	r0, #0
   17788:	beq	17818 <__assert_fail@plt+0x4c28>
   1778c:	mov	r0, #1
   17790:	strb	r0, [r6]
   17794:	movw	r0, #30764	; 0x782c
   17798:	movt	r0, #1
   1779c:	ldr	r1, [r5]
   177a0:	str	r1, [sp, #8]
   177a4:	str	r0, [sp]
   177a8:	add	r0, sp, #8
   177ac:	movw	r1, #21260	; 0x530c
   177b0:	movt	r1, #5
   177b4:	mov	r2, #59	; 0x3b
   177b8:	mov	r3, #8
   177bc:	bl	12944 <bsearch@plt>
   177c0:	cmp	r0, #0
   177c4:	beq	177d8 <__assert_fail@plt+0x4be8>
   177c8:	ldr	r0, [r0, #4]
   177cc:	b	17804 <__assert_fail@plt+0x4c14>
   177d0:	ldr	r0, [r5, #24]
   177d4:	b	17804 <__assert_fail@plt+0x4c14>
   177d8:	movw	r1, #65047	; 0xfe17
   177dc:	movt	r1, #3
   177e0:	mov	r0, #0
   177e4:	mov	r2, #5
   177e8:	bl	12674 <dcgettext@plt>
   177ec:	mov	r2, r0
   177f0:	ldr	r3, [r5, #4]
   177f4:	mov	r0, #0
   177f8:	mov	r1, #0
   177fc:	bl	127b8 <error@plt>
   17800:	mov	r0, #10
   17804:	cmp	r0, r4
   17808:	movhi	r4, r0
   1780c:	mov	r0, r4
   17810:	sub	sp, fp, #16
   17814:	pop	{r4, r5, r6, sl, fp, pc}
   17818:	movw	r2, #65011	; 0xfdf3
   1781c:	movt	r2, #3
   17820:	mov	r0, #1
   17824:	mov	r1, #0
   17828:	bl	127b8 <error@plt>
   1782c:	push	{fp, lr}
   17830:	mov	fp, sp
   17834:	sub	sp, sp, #8
   17838:	ldr	r0, [r0]
   1783c:	str	r0, [sp, #4]
   17840:	ldr	r0, [r1]
   17844:	str	r0, [sp]
   17848:	add	r0, sp, #4
   1784c:	mov	r1, sp
   17850:	mov	r2, #4
   17854:	bl	12650 <memcmp@plt>
   17858:	mov	sp, fp
   1785c:	pop	{fp, pc}
   17860:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17864:	add	fp, sp, #24
   17868:	mov	r8, #0
   1786c:	movw	r7, #21260	; 0x530c
   17870:	movt	r7, #5
   17874:	mov	r4, #0
   17878:	add	r6, r7, r4
   1787c:	add	r5, r6, #8
   17880:	mov	r0, r5
   17884:	mov	r1, r6
   17888:	bl	1782c <__assert_fail@plt+0x4c3c>
   1788c:	cmp	r0, #0
   17890:	bmi	178b8 <__assert_fail@plt+0x4cc8>
   17894:	mov	r0, r6
   17898:	mov	r1, r5
   1789c:	bl	1782c <__assert_fail@plt+0x4c3c>
   178a0:	cmp	r0, #1
   178a4:	bge	178c0 <__assert_fail@plt+0x4cd0>
   178a8:	add	r4, r4, #8
   178ac:	cmp	r4, #464	; 0x1d0
   178b0:	bne	17878 <__assert_fail@plt+0x4c88>
   178b4:	mov	r8, #1
   178b8:	mov	r0, r8
   178bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   178c0:	movw	r0, #65159	; 0xfe87
   178c4:	movt	r0, #3
   178c8:	movw	r1, #63282	; 0xf732
   178cc:	movt	r1, #3
   178d0:	movw	r3, #65171	; 0xfe93
   178d4:	movt	r3, #3
   178d8:	movw	r2, #1013	; 0x3f5
   178dc:	bl	12bf0 <__assert_fail@plt>
   178e0:	mov	r1, #0
   178e4:	str	r1, [r0]
   178e8:	str	r1, [r0, #4]
   178ec:	bx	lr
   178f0:	push	{r4, r5, r6, r7, fp, lr}
   178f4:	add	fp, sp, #16
   178f8:	mov	r4, r2
   178fc:	mov	r7, r1
   17900:	mov	r5, r0
   17904:	mov	r0, #176	; 0xb0
   17908:	bl	2b8ec <__assert_fail@plt+0x18cfc>
   1790c:	mov	r6, r0
   17910:	mov	r0, #0
   17914:	str	r0, [r6, #24]
   17918:	mov	r0, #3
   1791c:	str	r0, [r6, #8]
   17920:	str	r7, [r6, #12]
   17924:	cmp	r7, #3
   17928:	beq	17958 <__assert_fail@plt+0x4d68>
   1792c:	cmp	r7, #2
   17930:	beq	1796c <__assert_fail@plt+0x4d7c>
   17934:	cmp	r7, #1
   17938:	bne	1798c <__assert_fail@plt+0x4d9c>
   1793c:	movw	r1, #64342	; 0xfb56
   17940:	movt	r1, #3
   17944:	vmov.f32	s0, #112	; 0x3f800000  1.0
   17948:	movw	r0, #16352	; 0x3fe0
   1794c:	movt	r0, #1
   17950:	strd	r0, [r6]
   17954:	b	17988 <__assert_fail@plt+0x4d98>
   17958:	movw	r1, #64125	; 0xfa7d
   1795c:	movt	r1, #3
   17960:	movw	r0, #15900	; 0x3e1c
   17964:	movt	r0, #1
   17968:	b	1797c <__assert_fail@plt+0x4d8c>
   1796c:	movw	r1, #65369	; 0xff59
   17970:	movt	r1, #3
   17974:	movw	r0, #19164	; 0x4adc
   17978:	movt	r0, #1
   1797c:	strd	r0, [r6]
   17980:	vldr	s0, [r5, #28]
   17984:	bl	1630c <__assert_fail@plt+0x371c>
   17988:	vstr	s0, [r6, #28]
   1798c:	str	r5, [r6, #160]	; 0xa0
   17990:	str	r6, [r4]
   17994:	mov	r0, r6
   17998:	pop	{r4, r5, r6, r7, fp, pc}
   1799c:	mov	r1, r0
   179a0:	ldr	r2, [r0]
   179a4:	mov	r0, #1
   179a8:	movw	r3, #18040	; 0x4678
   179ac:	movt	r3, #1
   179b0:	cmp	r2, r3
   179b4:	movwne	r3, #17824	; 0x45a0
   179b8:	movtne	r3, #1
   179bc:	cmpne	r2, r3
   179c0:	beq	17a38 <__assert_fail@plt+0x4e48>
   179c4:	movw	r3, #18320	; 0x4790
   179c8:	movt	r3, #1
   179cc:	cmp	r2, r3
   179d0:	movwne	r3, #19244	; 0x4b2c
   179d4:	movtne	r3, #1
   179d8:	cmpne	r2, r3
   179dc:	beq	17a38 <__assert_fail@plt+0x4e48>
   179e0:	movw	r0, #24204	; 0x5e8c
   179e4:	movt	r0, #5
   179e8:	ldrh	r3, [r0, #68]	; 0x44
   179ec:	mov	r0, #0
   179f0:	cmp	r3, #0
   179f4:	movwne	r3, #19164	; 0x4adc
   179f8:	movtne	r3, #1
   179fc:	cmpne	r2, r3
   17a00:	beq	17a38 <__assert_fail@plt+0x4e48>
   17a04:	movw	r3, #16352	; 0x3fe0
   17a08:	movt	r3, #1
   17a0c:	cmp	r2, r3
   17a10:	movwne	r3, #15900	; 0x3e1c
   17a14:	movtne	r3, #1
   17a18:	cmpne	r2, r3
   17a1c:	beq	17a38 <__assert_fail@plt+0x4e48>
   17a20:	movw	r3, #18332	; 0x479c
   17a24:	movt	r3, #1
   17a28:	cmp	r2, r3
   17a2c:	ldrne	r0, [r1, #24]
   17a30:	clzne	r0, r0
   17a34:	lsrne	r0, r0, #5
   17a38:	bx	lr
   17a3c:	ldr	r3, [r1, #156]	; 0x9c
   17a40:	str	r3, [r2]
   17a44:	ldr	r2, [r0]
   17a48:	str	r2, [r1, #156]	; 0x9c
   17a4c:	str	r1, [r0]
   17a50:	ldr	r2, [r0, #4]
   17a54:	cmp	r2, #0
   17a58:	streq	r1, [r0, #4]
   17a5c:	bx	lr
   17a60:	push	{r4, r5, r6, sl, fp, lr}
   17a64:	add	fp, sp, #16
   17a68:	mov	r4, r3
   17a6c:	mov	r6, r2
   17a70:	mov	r5, r0
   17a74:	mov	r0, r1
   17a78:	mov	r1, r3
   17a7c:	bl	17aac <__assert_fail@plt+0x4ebc>
   17a80:	mov	r0, r6
   17a84:	mov	r1, r4
   17a88:	bl	17aac <__assert_fail@plt+0x4ebc>
   17a8c:	mov	r6, #0
   17a90:	add	r0, r5, r6
   17a94:	mov	r1, r4
   17a98:	bl	17aac <__assert_fail@plt+0x4ebc>
   17a9c:	add	r6, r6, #8
   17aa0:	cmp	r6, #88	; 0x58
   17aa4:	bne	17a90 <__assert_fail@plt+0x4ea0>
   17aa8:	pop	{r4, r5, r6, sl, fp, pc}
   17aac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ab0:	add	fp, sp, #28
   17ab4:	sub	sp, sp, #12
   17ab8:	mov	r4, r0
   17abc:	ldr	r0, [r0]
   17ac0:	cmp	r0, #0
   17ac4:	beq	17bac <__assert_fail@plt+0x4fbc>
   17ac8:	mov	r9, r1
   17acc:	movw	r8, #24204	; 0x5e8c
   17ad0:	movt	r8, #5
   17ad4:	ldrb	r0, [r8, #44]	; 0x2c
   17ad8:	tst	r0, #8
   17adc:	bne	17bb4 <__assert_fail@plt+0x4fc4>
   17ae0:	ldr	r0, [r4]
   17ae4:	bl	1604c <__assert_fail@plt+0x345c>
   17ae8:	add	r0, sp, #4
   17aec:	bl	178e0 <__assert_fail@plt+0x4cf0>
   17af0:	ldr	r5, [r4]
   17af4:	cmp	r5, #0
   17af8:	beq	17b7c <__assert_fail@plt+0x4f8c>
   17afc:	ldr	r7, [sp, #8]
   17b00:	mov	sl, #0
   17b04:	b	17b28 <__assert_fail@plt+0x4f38>
   17b08:	ldr	r0, [sp, #4]
   17b0c:	str	r0, [r5, #156]	; 0x9c
   17b10:	str	r5, [sp, #4]
   17b14:	cmp	r7, #0
   17b18:	moveq	r7, r5
   17b1c:	ldr	r5, [r4]
   17b20:	cmp	r5, #0
   17b24:	beq	17b78 <__assert_fail@plt+0x4f88>
   17b28:	ldr	r0, [r5, #156]	; 0x9c
   17b2c:	str	r0, [r4]
   17b30:	str	sl, [r5, #156]	; 0x9c
   17b34:	ldr	r1, [sp, #4]
   17b38:	cmp	r1, #0
   17b3c:	beq	17b08 <__assert_fail@plt+0x4f18>
   17b40:	mov	r6, r1
   17b44:	ldr	r1, [r1, #12]
   17b48:	ldr	r0, [r6, #160]	; 0xa0
   17b4c:	subs	r2, r1, #2
   17b50:	movwne	r2, #1
   17b54:	ldr	r1, [r5, #160]	; 0xa0
   17b58:	bl	17c1c <__assert_fail@plt+0x502c>
   17b5c:	ldr	r1, [r6, #156]	; 0x9c
   17b60:	cmp	r0, #0
   17b64:	bmi	17b38 <__assert_fail@plt+0x4f48>
   17b68:	str	r1, [r5, #156]	; 0x9c
   17b6c:	str	r5, [r6, #156]	; 0x9c
   17b70:	cmp	r1, #0
   17b74:	b	17b18 <__assert_fail@plt+0x4f28>
   17b78:	str	r7, [sp, #8]
   17b7c:	ldrb	r0, [r8, #44]	; 0x2c
   17b80:	tst	r0, #8
   17b84:	bne	17be8 <__assert_fail@plt+0x4ff8>
   17b88:	ldr	r6, [sp, #4]
   17b8c:	mov	r0, r6
   17b90:	bl	1604c <__assert_fail@plt+0x345c>
   17b94:	ldr	r1, [sp, #8]
   17b98:	mov	r0, r6
   17b9c:	mov	r2, r9
   17ba0:	bl	17c84 <__assert_fail@plt+0x5094>
   17ba4:	mov	r0, r4
   17ba8:	bl	178e0 <__assert_fail@plt+0x4cf0>
   17bac:	sub	sp, fp, #28
   17bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17bb4:	movw	r5, #21864	; 0x5568
   17bb8:	movt	r5, #5
   17bbc:	ldr	r0, [r5]
   17bc0:	movw	r1, #65372	; 0xff5c
   17bc4:	movt	r1, #3
   17bc8:	movw	r2, #65377	; 0xff61
   17bcc:	movt	r2, #3
   17bd0:	bl	128fc <fprintf@plt>
   17bd4:	ldr	r0, [r5]
   17bd8:	ldr	r1, [r4]
   17bdc:	mov	r2, #2
   17be0:	bl	16b70 <__assert_fail@plt+0x3f80>
   17be4:	b	17ae0 <__assert_fail@plt+0x4ef0>
   17be8:	movw	r5, #21864	; 0x5568
   17bec:	movt	r5, #5
   17bf0:	ldr	r0, [r5]
   17bf4:	movw	r1, #65372	; 0xff5c
   17bf8:	movt	r1, #3
   17bfc:	movw	r2, #65404	; 0xff7c
   17c00:	movt	r2, #3
   17c04:	bl	128fc <fprintf@plt>
   17c08:	ldr	r0, [r5]
   17c0c:	ldr	r1, [sp, #4]
   17c10:	mov	r2, #2
   17c14:	bl	16b70 <__assert_fail@plt+0x3f80>
   17c18:	b	17b88 <__assert_fail@plt+0x4f98>
   17c1c:	mov	r3, r0
   17c20:	ldr	ip, [r1, #24]
   17c24:	ldr	r0, [r0, #24]
   17c28:	cmp	r0, ip
   17c2c:	bne	17c64 <__assert_fail@plt+0x5074>
   17c30:	mov	r0, #0
   17c34:	vldr	s0, [r1, #28]
   17c38:	vldr	s2, [r3, #28]
   17c3c:	vcmp.f32	s2, s0
   17c40:	vmrs	APSR_nzcv, fpscr
   17c44:	bxeq	lr
   17c48:	cmp	r2, #0
   17c4c:	beq	17c70 <__assert_fail@plt+0x5080>
   17c50:	mov	r0, #1
   17c54:	vcmpe.f32	s2, s0
   17c58:	vmrs	APSR_nzcv, fpscr
   17c5c:	mvnmi	r0, #0
   17c60:	bx	lr
   17c64:	mov	r0, #1
   17c68:	mvncc	r0, #0
   17c6c:	bx	lr
   17c70:	mvn	r0, #0
   17c74:	vcmpe.f32	s2, s0
   17c78:	vmrs	APSR_nzcv, fpscr
   17c7c:	movwmi	r0, #1
   17c80:	bx	lr
   17c84:	ldr	r3, [r2]
   17c88:	str	r3, [r1, #156]	; 0x9c
   17c8c:	str	r0, [r2]
   17c90:	bx	lr
   17c94:	push	{r4, r5, r6, sl, fp, lr}
   17c98:	add	fp, sp, #16
   17c9c:	vpush	{d8-d9}
   17ca0:	sub	sp, sp, #8
   17ca4:	mov	r4, r0
   17ca8:	ldr	r0, [r0, #8]
   17cac:	cmp	r0, #3
   17cb0:	bne	17d04 <__assert_fail@plt+0x5114>
   17cb4:	ldr	r0, [r4, #156]	; 0x9c
   17cb8:	movw	r2, #18
   17cbc:	movt	r2, #4
   17cc0:	cmp	r0, #0
   17cc4:	beq	17d0c <__assert_fail@plt+0x511c>
   17cc8:	ldr	r0, [r4, #160]	; 0xa0
   17ccc:	cmp	r0, #0
   17cd0:	beq	17d0c <__assert_fail@plt+0x511c>
   17cd4:	ldr	r0, [r4, #156]	; 0x9c
   17cd8:	ldr	r0, [r0, #160]	; 0xa0
   17cdc:	cmp	r0, #0
   17ce0:	beq	17d34 <__assert_fail@plt+0x5144>
   17ce4:	ldr	r6, [r4, #156]	; 0x9c
   17ce8:	ldr	r0, [r6, #160]	; 0xa0
   17cec:	bl	17ec0 <__assert_fail@plt+0x52d0>
   17cf0:	cmp	r0, #0
   17cf4:	beq	17d40 <__assert_fail@plt+0x5150>
   17cf8:	movw	r2, #69	; 0x45
   17cfc:	movt	r2, #4
   17d00:	b	17d0c <__assert_fail@plt+0x511c>
   17d04:	movw	r2, #65531	; 0xfffb
   17d08:	movt	r2, #3
   17d0c:	movw	r0, #24204	; 0x5e8c
   17d10:	movt	r0, #5
   17d14:	ldrb	r0, [r0, #44]	; 0x2c
   17d18:	mov	r5, #0
   17d1c:	tst	r0, #8
   17d20:	bne	17d5c <__assert_fail@plt+0x516c>
   17d24:	mov	r0, r5
   17d28:	sub	sp, fp, #32
   17d2c:	vpop	{d8-d9}
   17d30:	pop	{r4, r5, r6, sl, fp, pc}
   17d34:	movw	r2, #40	; 0x28
   17d38:	movt	r2, #4
   17d3c:	b	17d0c <__assert_fail@plt+0x511c>
   17d40:	ldr	r0, [r4, #160]	; 0xa0
   17d44:	bl	17ec0 <__assert_fail@plt+0x52d0>
   17d48:	cmp	r0, #0
   17d4c:	beq	17d8c <__assert_fail@plt+0x519c>
   17d50:	movw	r2, #99	; 0x63
   17d54:	movt	r2, #4
   17d58:	b	17d0c <__assert_fail@plt+0x511c>
   17d5c:	movw	r5, #21864	; 0x5568
   17d60:	movt	r5, #5
   17d64:	ldr	r0, [r5]
   17d68:	movw	r1, #305	; 0x131
   17d6c:	movt	r1, #4
   17d70:	bl	128fc <fprintf@plt>
   17d74:	ldr	r0, [r5]
   17d78:	mov	r5, #0
   17d7c:	mov	r1, r4
   17d80:	mov	r2, #0
   17d84:	bl	16b70 <__assert_fail@plt+0x3f80>
   17d88:	b	17d24 <__assert_fail@plt+0x5134>
   17d8c:	ldr	r0, [r6, #160]	; 0xa0
   17d90:	bl	17f0c <__assert_fail@plt+0x531c>
   17d94:	mov	r5, r0
   17d98:	ldr	r0, [r4, #160]	; 0xa0
   17d9c:	bl	17f0c <__assert_fail@plt+0x531c>
   17da0:	cmp	r5, r0
   17da4:	bge	17db4 <__assert_fail@plt+0x51c4>
   17da8:	movw	r2, #130	; 0x82
   17dac:	movt	r2, #4
   17db0:	b	17d0c <__assert_fail@plt+0x511c>
   17db4:	bne	17e30 <__assert_fail@plt+0x5240>
   17db8:	ldr	r0, [r6, #160]	; 0xa0
   17dbc:	ldr	r1, [r4, #160]	; 0xa0
   17dc0:	movw	r2, #24204	; 0x5e8c
   17dc4:	movt	r2, #5
   17dc8:	vldr	s16, [r1, #28]
   17dcc:	vldr	s18, [r0, #28]
   17dd0:	ldrb	r0, [r2, #44]	; 0x2c
   17dd4:	tst	r0, #8
   17dd8:	bne	17e94 <__assert_fail@plt+0x52a4>
   17ddc:	ldr	r0, [r4]
   17de0:	movw	r1, #19164	; 0x4adc
   17de4:	movt	r1, #1
   17de8:	cmp	r0, r1
   17dec:	beq	17e0c <__assert_fail@plt+0x521c>
   17df0:	movw	r1, #15900	; 0x3e1c
   17df4:	movt	r1, #1
   17df8:	cmp	r0, r1
   17dfc:	beq	17e24 <__assert_fail@plt+0x5234>
   17e00:	movw	r2, #262	; 0x106
   17e04:	movt	r2, #4
   17e08:	b	17d0c <__assert_fail@plt+0x511c>
   17e0c:	vcmpe.f32	s16, s18
   17e10:	vmrs	APSR_nzcv, fpscr
   17e14:	bmi	17e30 <__assert_fail@plt+0x5240>
   17e18:	movw	r2, #173	; 0xad
   17e1c:	movt	r2, #4
   17e20:	b	17d0c <__assert_fail@plt+0x511c>
   17e24:	vcmpe.f32	s16, s18
   17e28:	vmrs	APSR_nzcv, fpscr
   17e2c:	ble	17e54 <__assert_fail@plt+0x5264>
   17e30:	movw	r0, #24204	; 0x5e8c
   17e34:	movt	r0, #5
   17e38:	ldrb	r0, [r0, #44]	; 0x2c
   17e3c:	tst	r0, #8
   17e40:	bne	17e60 <__assert_fail@plt+0x5270>
   17e44:	mov	r0, r4
   17e48:	bl	17f50 <__assert_fail@plt+0x5360>
   17e4c:	mov	r5, #1
   17e50:	b	17d24 <__assert_fail@plt+0x5134>
   17e54:	movw	r2, #217	; 0xd9
   17e58:	movt	r2, #4
   17e5c:	b	17d0c <__assert_fail@plt+0x511c>
   17e60:	movw	r5, #21864	; 0x5568
   17e64:	movt	r5, #5
   17e68:	ldr	r3, [r5]
   17e6c:	movw	r0, #280	; 0x118
   17e70:	movt	r0, #4
   17e74:	mov	r1, #24
   17e78:	mov	r2, #1
   17e7c:	bl	12728 <fwrite@plt>
   17e80:	ldr	r0, [r5]
   17e84:	mov	r1, r4
   17e88:	mov	r2, #0
   17e8c:	bl	16b70 <__assert_fail@plt+0x3f80>
   17e90:	b	17e44 <__assert_fail@plt+0x5254>
   17e94:	movw	r0, #21864	; 0x5568
   17e98:	movt	r0, #5
   17e9c:	ldr	r0, [r0]
   17ea0:	vcvt.f64.f32	d16, s16
   17ea4:	vcvt.f64.f32	d17, s18
   17ea8:	vstr	d16, [sp]
   17eac:	vmov	r2, r3, d17
   17eb0:	movw	r1, #146	; 0x92
   17eb4:	movt	r1, #4
   17eb8:	bl	128fc <fprintf@plt>
   17ebc:	b	17ddc <__assert_fail@plt+0x51ec>
   17ec0:	push	{r4, r5, fp, lr}
   17ec4:	add	fp, sp, #8
   17ec8:	cmp	r0, #0
   17ecc:	beq	17f00 <__assert_fail@plt+0x5310>
   17ed0:	mov	r4, r0
   17ed4:	mov	r5, #1
   17ed8:	ldrb	r0, [r4, #16]
   17edc:	cmp	r0, #0
   17ee0:	bne	17f04 <__assert_fail@plt+0x5314>
   17ee4:	ldr	r0, [r4, #156]	; 0x9c
   17ee8:	bl	17ec0 <__assert_fail@plt+0x52d0>
   17eec:	cmp	r0, #0
   17ef0:	bne	17f04 <__assert_fail@plt+0x5314>
   17ef4:	ldr	r4, [r4, #160]	; 0xa0
   17ef8:	cmp	r4, #0
   17efc:	bne	17ed8 <__assert_fail@plt+0x52e8>
   17f00:	mov	r5, #0
   17f04:	mov	r0, r5
   17f08:	pop	{r4, r5, fp, pc}
   17f0c:	cmp	r0, #0
   17f10:	moveq	r0, #0
   17f14:	bxeq	lr
   17f18:	push	{r4, r5, fp, lr}
   17f1c:	add	fp, sp, #8
   17f20:	mov	r4, r0
   17f24:	ldr	r0, [r0, #156]	; 0x9c
   17f28:	bl	17f0c <__assert_fail@plt+0x531c>
   17f2c:	mov	r5, r0
   17f30:	ldr	r0, [r4, #160]	; 0xa0
   17f34:	bl	17f0c <__assert_fail@plt+0x531c>
   17f38:	cmp	r5, r0
   17f3c:	movhi	r0, r5
   17f40:	ldr	r1, [r4, #24]
   17f44:	cmp	r0, r1
   17f48:	movcc	r0, r1
   17f4c:	pop	{r4, r5, fp, pc}
   17f50:	ldr	r1, [r0, #156]	; 0x9c
   17f54:	ldr	r2, [r0, #160]	; 0xa0
   17f58:	ldr	r3, [r1, #160]	; 0xa0
   17f5c:	str	r2, [r1, #160]	; 0xa0
   17f60:	str	r3, [r0, #160]	; 0xa0
   17f64:	bx	lr
   17f68:	push	{r4, r5, fp, lr}
   17f6c:	add	fp, sp, #8
   17f70:	mov	r4, r1
   17f74:	mov	r5, r0
   17f78:	mov	r1, r2
   17f7c:	bl	17414 <__assert_fail@plt+0x4824>
   17f80:	str	r4, [r0]
   17f84:	ldr	r1, [r5, #4]
   17f88:	mov	r2, #1
   17f8c:	str	r2, [r0, #8]
   17f90:	mov	r2, #0
   17f94:	str	r2, [r0, #12]
   17f98:	str	r2, [r0, #40]	; 0x28
   17f9c:	str	r1, [r0, #4]
   17fa0:	pop	{r4, r5, fp, pc}
   17fa4:	push	{fp, lr}
   17fa8:	mov	fp, sp
   17fac:	mov	r2, r1
   17fb0:	ldr	r1, [r0, #12]
   17fb4:	cmp	r1, #0
   17fb8:	beq	17fc4 <__assert_fail@plt+0x53d4>
   17fbc:	pop	{fp, lr}
   17fc0:	b	17f68 <__assert_fail@plt+0x5378>
   17fc4:	movw	r0, #536	; 0x218
   17fc8:	movt	r0, #4
   17fcc:	movw	r1, #561	; 0x231
   17fd0:	movt	r1, #4
   17fd4:	movw	r3, #568	; 0x238
   17fd8:	movt	r3, #4
   17fdc:	mov	r2, #123	; 0x7b
   17fe0:	bl	12bf0 <__assert_fail@plt>
   17fe4:	mov	r1, #0
   17fe8:	b	17fa4 <__assert_fail@plt+0x53b4>
   17fec:	push	{fp, lr}
   17ff0:	mov	fp, sp
   17ff4:	cmp	r0, #0
   17ff8:	bne	18168 <__assert_fail@plt+0x5578>
   17ffc:	movw	r5, #21876	; 0x5574
   18000:	movt	r5, #5
   18004:	ldr	r4, [r5]
   18008:	movw	r1, #683	; 0x2ab
   1800c:	movt	r1, #4
   18010:	mov	r0, #0
   18014:	mov	r2, #5
   18018:	bl	12674 <dcgettext@plt>
   1801c:	mov	r1, r0
   18020:	movw	r6, #23844	; 0x5d24
   18024:	movt	r6, #5
   18028:	ldr	r2, [r6]
   1802c:	mov	r0, r4
   18030:	bl	128fc <fprintf@plt>
   18034:	movw	r1, #757	; 0x2f5
   18038:	movt	r1, #4
   1803c:	mov	r0, #0
   18040:	mov	r2, #5
   18044:	bl	12674 <dcgettext@plt>
   18048:	ldr	r1, [r5]
   1804c:	bl	12b84 <fputs@plt>
   18050:	movw	r1, #895	; 0x37f
   18054:	movt	r1, #4
   18058:	mov	r0, #0
   1805c:	mov	r2, #5
   18060:	bl	12674 <dcgettext@plt>
   18064:	ldr	r1, [r5]
   18068:	bl	12b84 <fputs@plt>
   1806c:	movw	r1, #1103	; 0x44f
   18070:	movt	r1, #4
   18074:	mov	r0, #0
   18078:	mov	r2, #5
   1807c:	bl	12674 <dcgettext@plt>
   18080:	ldr	r1, [r5]
   18084:	bl	12b84 <fputs@plt>
   18088:	movw	r1, #1188	; 0x4a4
   1808c:	movt	r1, #4
   18090:	mov	r0, #0
   18094:	mov	r2, #5
   18098:	bl	12674 <dcgettext@plt>
   1809c:	ldr	r1, [r5]
   180a0:	bl	12b84 <fputs@plt>
   180a4:	movw	r1, #1393	; 0x571
   180a8:	movt	r1, #4
   180ac:	mov	r0, #0
   180b0:	mov	r2, #5
   180b4:	bl	12674 <dcgettext@plt>
   180b8:	ldr	r1, [r5]
   180bc:	bl	12b84 <fputs@plt>
   180c0:	movw	r1, #1934	; 0x78e
   180c4:	movt	r1, #4
   180c8:	mov	r0, #0
   180cc:	mov	r2, #5
   180d0:	bl	12674 <dcgettext@plt>
   180d4:	ldr	r1, [r5]
   180d8:	bl	12b84 <fputs@plt>
   180dc:	movw	r1, #2190	; 0x88e
   180e0:	movt	r1, #4
   180e4:	mov	r0, #0
   180e8:	mov	r2, #5
   180ec:	bl	12674 <dcgettext@plt>
   180f0:	ldr	r1, [r5]
   180f4:	bl	12b84 <fputs@plt>
   180f8:	movw	r1, #2214	; 0x8a6
   180fc:	movt	r1, #4
   18100:	mov	r0, #0
   18104:	mov	r2, #5
   18108:	bl	12674 <dcgettext@plt>
   1810c:	ldr	r1, [r5]
   18110:	bl	12b84 <fputs@plt>
   18114:	movw	r1, #2273	; 0x8e1
   18118:	movt	r1, #4
   1811c:	mov	r0, #0
   18120:	mov	r2, #5
   18124:	bl	12674 <dcgettext@plt>
   18128:	ldr	r1, [r5]
   1812c:	bl	12b84 <fputs@plt>
   18130:	mov	r0, #0
   18134:	bl	181ac <__assert_fail@plt+0x55bc>
   18138:	movw	r1, #2342	; 0x926
   1813c:	movt	r1, #4
   18140:	mov	r0, #0
   18144:	mov	r2, #5
   18148:	bl	12674 <dcgettext@plt>
   1814c:	ldr	r1, [r5]
   18150:	bl	12b84 <fputs@plt>
   18154:	ldr	r0, [r5]
   18158:	ldr	r1, [r6]
   1815c:	bl	21968 <__assert_fail@plt+0xed78>
   18160:	mov	r0, #0
   18164:	bl	12884 <exit@plt>
   18168:	mov	r4, r0
   1816c:	movw	r0, #21864	; 0x5568
   18170:	movt	r0, #5
   18174:	ldr	r5, [r0]
   18178:	movw	r1, #644	; 0x284
   1817c:	movt	r1, #4
   18180:	mov	r0, #0
   18184:	mov	r2, #5
   18188:	bl	12674 <dcgettext@plt>
   1818c:	mov	r1, r0
   18190:	movw	r0, #23844	; 0x5d24
   18194:	movt	r0, #5
   18198:	ldr	r2, [r0]
   1819c:	mov	r0, r5
   181a0:	bl	128fc <fprintf@plt>
   181a4:	mov	r0, r4
   181a8:	bl	12884 <exit@plt>
   181ac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   181b0:	add	fp, sp, #24
   181b4:	mov	r4, r0
   181b8:	mov	r6, #0
   181bc:	movw	r1, #2991	; 0xbaf
   181c0:	movt	r1, #4
   181c4:	mov	r0, #0
   181c8:	mov	r2, #5
   181cc:	bl	12674 <dcgettext@plt>
   181d0:	movw	r5, #21876	; 0x5574
   181d4:	movt	r5, #5
   181d8:	ldr	r1, [r5]
   181dc:	bl	12b84 <fputs@plt>
   181e0:	cmp	r4, #0
   181e4:	beq	18220 <__assert_fail@plt+0x5630>
   181e8:	movw	r7, #4016	; 0xfb0
   181ec:	movt	r7, #4
   181f0:	movw	r4, #3016	; 0xbc8
   181f4:	movt	r4, #4
   181f8:	mov	r0, r7
   181fc:	ldr	r2, [r0, r6]!
   18200:	ldr	r3, [r0, #8]
   18204:	ldr	r0, [r5]
   18208:	mov	r1, r4
   1820c:	bl	128fc <fprintf@plt>
   18210:	add	r6, r6, #12
   18214:	cmp	r6, #108	; 0x6c
   18218:	bne	181f8 <__assert_fail@plt+0x5608>
   1821c:	b	1826c <__assert_fail@plt+0x567c>
   18220:	mov	r6, #0
   18224:	movw	r8, #2407	; 0x967
   18228:	movt	r8, #4
   1822c:	movw	r9, #3026	; 0xbd2
   18230:	movt	r9, #4
   18234:	movw	r7, #4016	; 0xfb0
   18238:	movt	r7, #4
   1823c:	movw	r4, #62175	; 0xf2df
   18240:	movt	r4, #3
   18244:	cmp	r6, #0
   18248:	mov	r2, r9
   1824c:	moveq	r2, r8
   18250:	ldr	r3, [r7, -r6]
   18254:	ldr	r0, [r5]
   18258:	mov	r1, r4
   1825c:	bl	128fc <fprintf@plt>
   18260:	sub	r6, r6, #12
   18264:	cmn	r6, #108	; 0x6c
   18268:	bne	18244 <__assert_fail@plt+0x5654>
   1826c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18270:	bx	lr
   18274:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18278:	add	fp, sp, #24
   1827c:	mov	r4, r2
   18280:	mov	r5, r0
   18284:	movw	r7, #24160	; 0x5e60
   18288:	movt	r7, #5
   1828c:	ldrb	r0, [r7, #4]
   18290:	cmp	r0, #0
   18294:	beq	182b0 <__assert_fail@plt+0x56c0>
   18298:	movw	r0, #257	; 0x101
   1829c:	strh	r0, [r7, #4]
   182a0:	ldr	r0, [r4, #16]
   182a4:	str	r0, [r7, #8]
   182a8:	mov	r0, #0
   182ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   182b0:	mov	r6, r1
   182b4:	movw	r8, #24204	; 0x5e8c
   182b8:	movt	r8, #5
   182bc:	ldr	r2, [r8, #52]	; 0x34
   182c0:	mov	r0, r1
   182c4:	mov	r1, r4
   182c8:	blx	r2
   182cc:	cmp	r0, #0
   182d0:	beq	1830c <__assert_fail@plt+0x571c>
   182d4:	ldrb	r0, [r8, #14]
   182d8:	cmp	r0, #0
   182dc:	beq	182f4 <__assert_fail@plt+0x5704>
   182e0:	bl	12908 <__errno_location@plt>
   182e4:	ldr	r1, [r0]
   182e8:	mvn	r0, #0
   182ec:	cmp	r1, #2
   182f0:	beq	18308 <__assert_fail@plt+0x5718>
   182f4:	bl	12908 <__errno_location@plt>
   182f8:	ldr	r0, [r0]
   182fc:	mov	r1, r5
   18300:	bl	18360 <__assert_fail@plt+0x5770>
   18304:	mvn	r0, #0
   18308:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1830c:	ldr	r0, [r4, #16]
   18310:	cmp	r0, #0
   18314:	bne	18298 <__assert_fail@plt+0x56a8>
   18318:	movw	r1, #61028	; 0xee64
   1831c:	movt	r1, #3
   18320:	mov	r0, #0
   18324:	mov	r2, #5
   18328:	bl	12674 <dcgettext@plt>
   1832c:	mov	r5, r0
   18330:	ldr	r1, [r8, #72]	; 0x48
   18334:	mov	r0, #0
   18338:	mov	r2, r6
   1833c:	bl	2a088 <__assert_fail@plt+0x17498>
   18340:	mov	r3, r0
   18344:	mov	r0, #0
   18348:	mov	r1, #0
   1834c:	mov	r2, r5
   18350:	bl	127b8 <error@plt>
   18354:	mov	r0, #1
   18358:	str	r0, [r7, #28]
   1835c:	b	18298 <__assert_fail@plt+0x56a8>
   18360:	mov	r3, r1
   18364:	mov	r1, r0
   18368:	mov	r0, #0
   1836c:	mov	r2, #1
   18370:	b	193b0 <__assert_fail@plt+0x67c0>
   18374:	push	{r4, sl, fp, lr}
   18378:	add	fp, sp, #8
   1837c:	vpush	{d8}
   18380:	sub	sp, sp, #392	; 0x188
   18384:	mov	r4, sp
   18388:	mov	r0, r4
   1838c:	bl	1265c <uname@plt>
   18390:	cmp	r0, #0
   18394:	beq	183a0 <__assert_fail@plt+0x57b0>
   18398:	mov	r0, #1
   1839c:	b	18418 <__assert_fail@plt+0x5828>
   183a0:	add	r0, r4, #130	; 0x82
   183a4:	bl	12b30 <atof@plt>
   183a8:	vmov.f64	d8, d0
   183ac:	movw	r0, #2408	; 0x968
   183b0:	movt	r0, #4
   183b4:	mov	r1, r4
   183b8:	mov	r2, #6
   183bc:	bl	128a8 <bcmp@plt>
   183c0:	vcvt.f32.f64	s16, d8
   183c4:	cmp	r0, #0
   183c8:	beq	18404 <__assert_fail@plt+0x5814>
   183cc:	movw	r0, #2414	; 0x96e
   183d0:	movt	r0, #4
   183d4:	mov	r1, sp
   183d8:	mov	r2, #8
   183dc:	bl	128a8 <bcmp@plt>
   183e0:	mov	r1, r0
   183e4:	vldr	s0, [pc, #56]	; 18424 <__assert_fail@plt+0x5834>
   183e8:	mov	r0, #0
   183ec:	vcmpe.f32	s16, s0
   183f0:	vmrs	APSR_nzcv, fpscr
   183f4:	movwge	r0, #1
   183f8:	cmp	r1, #0
   183fc:	movne	r0, #1
   18400:	b	18418 <__assert_fail@plt+0x5828>
   18404:	vldr	s0, [pc, #28]	; 18428 <__assert_fail@plt+0x5838>
   18408:	mov	r0, #0
   1840c:	vcmpe.f32	s16, s0
   18410:	vmrs	APSR_nzcv, fpscr
   18414:	movwge	r0, #1
   18418:	sub	sp, fp, #16
   1841c:	vpop	{d8}
   18420:	pop	{r4, sl, fp, pc}
   18424:	submi	r6, r6, r6, ror #12
   18428:	andmi	ip, ip, sp, asr #25
   1842c:	push	{r4, sl, fp, lr}
   18430:	add	fp, sp, #8
   18434:	movw	r4, #24160	; 0x5e60
   18438:	movt	r4, #5
   1843c:	ldrb	r0, [r4, #32]
   18440:	cmp	r0, #0
   18444:	popeq	{r4, sl, fp, pc}
   18448:	bl	1603c <__assert_fail@plt+0x344c>
   1844c:	bl	1845c <__assert_fail@plt+0x586c>
   18450:	mov	r0, #0
   18454:	strb	r0, [r4, #32]
   18458:	pop	{r4, sl, fp, pc}
   1845c:	push	{r4, r5, r6, r7, fp, lr}
   18460:	add	fp, sp, #16
   18464:	cmp	r0, #0
   18468:	beq	184dc <__assert_fail@plt+0x58ec>
   1846c:	mov	r4, r0
   18470:	movw	r5, #24160	; 0x5e60
   18474:	movt	r5, #5
   18478:	movw	r6, #17260	; 0x436c
   1847c:	movt	r6, #1
   18480:	movw	r7, #19080	; 0x4a88
   18484:	movt	r7, #1
   18488:	b	18498 <__assert_fail@plt+0x58a8>
   1848c:	ldr	r4, [r4, #160]	; 0xa0
   18490:	cmp	r4, #0
   18494:	beq	184dc <__assert_fail@plt+0x58ec>
   18498:	ldrb	r0, [r5, #32]
   1849c:	cmp	r0, #0
   184a0:	beq	184e0 <__assert_fail@plt+0x58f0>
   184a4:	ldr	r0, [r4, #156]	; 0x9c
   184a8:	bl	1845c <__assert_fail@plt+0x586c>
   184ac:	ldr	r0, [r4]
   184b0:	cmp	r0, r6
   184b4:	cmpne	r0, r7
   184b8:	bne	1848c <__assert_fail@plt+0x589c>
   184bc:	mov	r0, r4
   184c0:	ldrb	r1, [r0, #40]!	; 0x28
   184c4:	cmp	r1, #0
   184c8:	beq	1848c <__assert_fail@plt+0x589c>
   184cc:	ldr	r1, [r4, #116]	; 0x74
   184d0:	cmp	r1, #0
   184d4:	blne	19468 <__assert_fail@plt+0x6878>
   184d8:	b	1848c <__assert_fail@plt+0x589c>
   184dc:	pop	{r4, r5, r6, r7, fp, pc}
   184e0:	movw	r0, #3464	; 0xd88
   184e4:	movt	r0, #4
   184e8:	movw	r1, #561	; 0x231
   184ec:	movt	r1, #4
   184f0:	movw	r3, #3491	; 0xda3
   184f4:	movt	r3, #4
   184f8:	mov	r2, #396	; 0x18c
   184fc:	bl	12bf0 <__assert_fail@plt>
   18500:	push	{r4, r5, fp, lr}
   18504:	add	fp, sp, #8
   18508:	cmp	r0, #0
   1850c:	popeq	{r4, r5, fp, pc}
   18510:	mov	r4, r0
   18514:	movw	r5, #17256	; 0x4368
   18518:	movt	r5, #1
   1851c:	b	1852c <__assert_fail@plt+0x593c>
   18520:	ldr	r4, [r4, #160]	; 0xa0
   18524:	cmp	r4, #0
   18528:	beq	1856c <__assert_fail@plt+0x597c>
   1852c:	ldr	r0, [r4, #156]	; 0x9c
   18530:	bl	18500 <__assert_fail@plt+0x5910>
   18534:	ldr	r0, [r4]
   18538:	cmp	r0, r5
   1853c:	bne	18520 <__assert_fail@plt+0x5930>
   18540:	mov	r0, r4
   18544:	ldrb	r1, [r0, #40]!	; 0x28
   18548:	cmp	r1, #0
   1854c:	beq	18520 <__assert_fail@plt+0x5930>
   18550:	ldr	r1, [r4, #116]	; 0x74
   18554:	cmp	r1, #0
   18558:	beq	18520 <__assert_fail@plt+0x5930>
   1855c:	add	r0, r0, #4
   18560:	add	r1, r4, #88	; 0x58
   18564:	bl	1f84c <__assert_fail@plt+0xcc5c>
   18568:	b	18520 <__assert_fail@plt+0x5930>
   1856c:	pop	{r4, r5, fp, pc}
   18570:	push	{r4, r5, fp, lr}
   18574:	add	fp, sp, #8
   18578:	sub	sp, sp, #8
   1857c:	mov	r0, #8
   18580:	bl	2b63c <__assert_fail@plt+0x18a4c>
   18584:	movw	r5, #21896	; 0x5588
   18588:	movt	r5, #5
   1858c:	str	r0, [r5]
   18590:	bl	2a744 <__assert_fail@plt+0x17b54>
   18594:	cmp	r0, #0
   18598:	subeq	sp, fp, #8
   1859c:	popeq	{r4, r5, fp, pc}
   185a0:	bl	12908 <__errno_location@plt>
   185a4:	ldr	r4, [r0]
   185a8:	movw	r1, #2422	; 0x976
   185ac:	movt	r1, #4
   185b0:	mov	r0, #0
   185b4:	mov	r2, #5
   185b8:	bl	12674 <dcgettext@plt>
   185bc:	mov	r2, r0
   185c0:	ldr	r0, [r5]
   185c4:	ldr	r1, [r0]
   185c8:	cmn	r1, #1
   185cc:	bgt	185f4 <__assert_fail@plt+0x5a04>
   185d0:	ldr	r0, [r0, #4]
   185d4:	movw	r1, #2407	; 0x967
   185d8:	movt	r1, #4
   185dc:	movw	r3, #9952	; 0x26e0
   185e0:	movt	r3, #4
   185e4:	cmp	r0, #0
   185e8:	moveq	r3, r1
   185ec:	moveq	r0, r1
   185f0:	b	18600 <__assert_fail@plt+0x5a10>
   185f4:	movw	r3, #2407	; 0x967
   185f8:	movt	r3, #4
   185fc:	mov	r0, r3
   18600:	str	r0, [sp]
   18604:	mov	r0, #1
   18608:	mov	r1, r4
   1860c:	bl	127b8 <error@plt>
   18610:	push	{r4, sl, fp, lr}
   18614:	add	fp, sp, #8
   18618:	bl	1603c <__assert_fail@plt+0x344c>
   1861c:	cmp	r0, #0
   18620:	beq	1865c <__assert_fail@plt+0x5a6c>
   18624:	mov	r4, r0
   18628:	movw	r1, #34048	; 0x8500
   1862c:	movt	r1, #1
   18630:	bl	186b4 <__assert_fail@plt+0x5ac4>
   18634:	bl	1842c <__assert_fail@plt+0x583c>
   18638:	movw	r0, #24160	; 0x5e60
   1863c:	movt	r0, #5
   18640:	ldr	r0, [r0, #36]	; 0x24
   18644:	bl	19638 <__assert_fail@plt+0x6a48>
   18648:	movw	r1, #34540	; 0x86ec
   1864c:	movt	r1, #1
   18650:	mov	r0, r4
   18654:	bl	186b4 <__assert_fail@plt+0x5ac4>
   18658:	b	1866c <__assert_fail@plt+0x5a7c>
   1865c:	movw	r0, #24160	; 0x5e60
   18660:	movt	r0, #5
   18664:	ldr	r0, [r0, #36]	; 0x24
   18668:	bl	19638 <__assert_fail@plt+0x6a48>
   1866c:	bl	18738 <__assert_fail@plt+0x5b48>
   18670:	bl	204a4 <__assert_fail@plt+0xd8b4>
   18674:	cmp	r0, #0
   18678:	beq	18684 <__assert_fail@plt+0x5a94>
   1867c:	bl	204c4 <__assert_fail@plt+0xd8d4>
   18680:	bl	20474 <__assert_fail@plt+0xd884>
   18684:	movw	r0, #21876	; 0x5574
   18688:	movt	r0, #5
   1868c:	ldr	r0, [r0]
   18690:	bl	2ca6c <__assert_fail@plt+0x19e7c>
   18694:	cmn	r0, #1
   18698:	popne	{r4, sl, fp, pc}
   1869c:	bl	12908 <__errno_location@plt>
   186a0:	ldr	r0, [r0]
   186a4:	movw	r1, #2467	; 0x9a3
   186a8:	movt	r1, #4
   186ac:	pop	{r4, sl, fp, lr}
   186b0:	b	187f4 <__assert_fail@plt+0x5c04>
   186b4:	push	{r4, r5, fp, lr}
   186b8:	add	fp, sp, #8
   186bc:	mov	r4, r1
   186c0:	mov	r5, r0
   186c4:	ldr	r0, [r5, #156]	; 0x9c
   186c8:	cmp	r0, #0
   186cc:	movne	r1, r4
   186d0:	blne	186b4 <__assert_fail@plt+0x5ac4>
   186d4:	mov	r0, r5
   186d8:	blx	r4
   186dc:	ldr	r5, [r5, #160]	; 0xa0
   186e0:	cmp	r5, #0
   186e4:	bne	186c4 <__assert_fail@plt+0x5ad4>
   186e8:	pop	{r4, r5, fp, pc}
   186ec:	ldr	r1, [r0]
   186f0:	movw	r2, #17436	; 0x441c
   186f4:	movt	r2, #1
   186f8:	cmp	r1, r2
   186fc:	beq	1872c <__assert_fail@plt+0x5b3c>
   18700:	movw	r2, #17284	; 0x4384
   18704:	movt	r2, #1
   18708:	cmp	r1, r2
   1870c:	movwne	r2, #17376	; 0x43e0
   18710:	movtne	r2, #1
   18714:	cmpne	r1, r2
   18718:	beq	1872c <__assert_fail@plt+0x5b3c>
   1871c:	movw	r2, #40628	; 0x9eb4
   18720:	movt	r2, #1
   18724:	cmp	r1, r2
   18728:	bxne	lr
   1872c:	mov	r1, #0
   18730:	str	r1, [r0, #44]	; 0x2c
   18734:	bx	lr
   18738:	push	{r4, r5, fp, lr}
   1873c:	add	fp, sp, #8
   18740:	sub	sp, sp, #8
   18744:	movw	r5, #21896	; 0x5588
   18748:	movt	r5, #5
   1874c:	ldr	r0, [r5]
   18750:	bl	2a7a0 <__assert_fail@plt+0x17bb0>
   18754:	cmp	r0, #0
   18758:	bne	1877c <__assert_fail@plt+0x5b8c>
   1875c:	ldr	r0, [r5]
   18760:	bl	2a7bc <__assert_fail@plt+0x17bcc>
   18764:	ldr	r0, [r5]
   18768:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   1876c:	mov	r0, #0
   18770:	str	r0, [r5]
   18774:	sub	sp, fp, #8
   18778:	pop	{r4, r5, fp, pc}
   1877c:	bl	12908 <__errno_location@plt>
   18780:	ldr	r4, [r0]
   18784:	movw	r1, #3545	; 0xdd9
   18788:	movt	r1, #4
   1878c:	mov	r0, #0
   18790:	mov	r2, #5
   18794:	bl	12674 <dcgettext@plt>
   18798:	mov	r2, r0
   1879c:	ldr	r0, [r5]
   187a0:	ldr	r1, [r0]
   187a4:	cmn	r1, #1
   187a8:	bgt	187d0 <__assert_fail@plt+0x5be0>
   187ac:	ldr	r0, [r0, #4]
   187b0:	movw	r1, #2407	; 0x967
   187b4:	movt	r1, #4
   187b8:	movw	r3, #9952	; 0x26e0
   187bc:	movt	r3, #4
   187c0:	cmp	r0, #0
   187c4:	moveq	r3, r1
   187c8:	moveq	r0, r1
   187cc:	b	187dc <__assert_fail@plt+0x5bec>
   187d0:	movw	r3, #2407	; 0x967
   187d4:	movt	r3, #4
   187d8:	mov	r0, r3
   187dc:	str	r0, [sp]
   187e0:	mov	r0, #0
   187e4:	mov	r1, r4
   187e8:	bl	127b8 <error@plt>
   187ec:	mov	r0, #1
   187f0:	bl	125e4 <_exit@plt>
   187f4:	mov	r3, r1
   187f8:	mov	r1, r0
   187fc:	mov	r0, #0
   18800:	mov	r2, #0
   18804:	b	193b0 <__assert_fail@plt+0x67c0>
   18808:	push	{r4, r5, fp, lr}
   1880c:	add	fp, sp, #8
   18810:	mov	r4, r1
   18814:	mov	r5, r0
   18818:	movw	r1, #24160	; 0x5e60
   1881c:	movt	r1, #5
   18820:	ldr	r0, [r1, #16]
   18824:	cmn	r0, #100	; 0x64
   18828:	beq	18834 <__assert_fail@plt+0x5c44>
   1882c:	cmn	r0, #1
   18830:	ble	18888 <__assert_fail@plt+0x5c98>
   18834:	ldr	r1, [r1]
   18838:	cmp	r1, #0
   1883c:	beq	18854 <__assert_fail@plt+0x5c64>
   18840:	mov	r1, r5
   18844:	mov	r2, r4
   18848:	mov	r3, #256	; 0x100
   1884c:	pop	{r4, r5, fp, lr}
   18850:	b	3ea34 <__assert_fail@plt+0x2be44>
   18854:	mov	r1, r5
   18858:	mov	r2, r4
   1885c:	mov	r3, #0
   18860:	bl	3ea34 <__assert_fail@plt+0x2be44>
   18864:	cmp	r0, #0
   18868:	beq	18880 <__assert_fail@plt+0x5c90>
   1886c:	mov	r2, r0
   18870:	mov	r0, r5
   18874:	mov	r1, r4
   18878:	pop	{r4, r5, fp, lr}
   1887c:	b	188a8 <__assert_fail@plt+0x5cb8>
   18880:	mov	r0, #0
   18884:	pop	{r4, r5, fp, pc}
   18888:	movw	r0, #2483	; 0x9b3
   1888c:	movt	r0, #4
   18890:	movw	r1, #561	; 0x231
   18894:	movt	r1, #4
   18898:	movw	r3, #2505	; 0x9c9
   1889c:	movt	r3, #4
   188a0:	movw	r2, #605	; 0x25d
   188a4:	bl	12bf0 <__assert_fail@plt>
   188a8:	push	{r4, r5, r6, sl, fp, lr}
   188ac:	add	fp, sp, #16
   188b0:	mov	r6, r2
   188b4:	mov	r4, r1
   188b8:	mov	r5, r0
   188bc:	bl	12908 <__errno_location@plt>
   188c0:	ldr	r0, [r0]
   188c4:	cmp	r0, #20
   188c8:	cmpne	r0, #2
   188cc:	bne	18904 <__assert_fail@plt+0x5d14>
   188d0:	movw	r0, #24204	; 0x5e8c
   188d4:	movt	r0, #5
   188d8:	ldrb	r0, [r0, #44]	; 0x2c
   188dc:	tst	r0, #2
   188e0:	bne	1890c <__assert_fail@plt+0x5d1c>
   188e4:	movw	r0, #24160	; 0x5e60
   188e8:	movt	r0, #5
   188ec:	ldr	r0, [r0, #16]
   188f0:	mov	r1, r5
   188f4:	mov	r2, r4
   188f8:	mov	r3, #256	; 0x100
   188fc:	pop	{r4, r5, r6, sl, fp, lr}
   18900:	b	3ea34 <__assert_fail@plt+0x2be44>
   18904:	mov	r0, r6
   18908:	pop	{r4, r5, r6, sl, fp, pc}
   1890c:	movw	r0, #21864	; 0x5568
   18910:	movt	r0, #5
   18914:	ldr	r0, [r0]
   18918:	movw	r1, #3593	; 0xe09
   1891c:	movt	r1, #4
   18920:	mov	r2, r5
   18924:	bl	128fc <fprintf@plt>
   18928:	b	188e4 <__assert_fail@plt+0x5cf4>
   1892c:	push	{r4, r5, fp, lr}
   18930:	add	fp, sp, #8
   18934:	mov	r4, r1
   18938:	mov	r5, r0
   1893c:	movw	r0, #24160	; 0x5e60
   18940:	movt	r0, #5
   18944:	ldr	r0, [r0, #16]
   18948:	cmn	r0, #100	; 0x64
   1894c:	beq	18958 <__assert_fail@plt+0x5d68>
   18950:	cmn	r0, #1
   18954:	ble	1898c <__assert_fail@plt+0x5d9c>
   18958:	mov	r1, r5
   1895c:	mov	r2, r4
   18960:	mov	r3, #0
   18964:	bl	3ea34 <__assert_fail@plt+0x2be44>
   18968:	cmp	r0, #0
   1896c:	beq	18984 <__assert_fail@plt+0x5d94>
   18970:	mov	r2, r0
   18974:	mov	r0, r5
   18978:	mov	r1, r4
   1897c:	pop	{r4, r5, fp, lr}
   18980:	b	188a8 <__assert_fail@plt+0x5cb8>
   18984:	mov	r0, #0
   18988:	pop	{r4, r5, fp, pc}
   1898c:	movw	r0, #2483	; 0x9b3
   18990:	movt	r0, #4
   18994:	movw	r1, #561	; 0x231
   18998:	movt	r1, #4
   1899c:	movw	r3, #2551	; 0x9f7
   189a0:	movt	r3, #4
   189a4:	mov	r2, #636	; 0x27c
   189a8:	bl	12bf0 <__assert_fail@plt>
   189ac:	push	{fp, lr}
   189b0:	mov	fp, sp
   189b4:	mov	r2, r1
   189b8:	mov	r1, r0
   189bc:	movw	r0, #24160	; 0x5e60
   189c0:	movt	r0, #5
   189c4:	ldr	r0, [r0, #16]
   189c8:	cmn	r0, #1
   189cc:	bgt	189d8 <__assert_fail@plt+0x5de8>
   189d0:	cmn	r0, #100	; 0x64
   189d4:	bne	189e4 <__assert_fail@plt+0x5df4>
   189d8:	mov	r3, #256	; 0x100
   189dc:	pop	{fp, lr}
   189e0:	b	3ea34 <__assert_fail@plt+0x2be44>
   189e4:	movw	r0, #2597	; 0xa25
   189e8:	movt	r0, #4
   189ec:	movw	r1, #561	; 0x231
   189f0:	movt	r1, #4
   189f4:	movw	r3, #2653	; 0xa5d
   189f8:	movt	r3, #4
   189fc:	movw	r2, #653	; 0x28d
   18a00:	bl	12bf0 <__assert_fail@plt>
   18a04:	push	{r4, r5, fp, lr}
   18a08:	add	fp, sp, #8
   18a0c:	mov	r4, r1
   18a10:	mov	r5, r0
   18a14:	movw	r0, #21936	; 0x55b0
   18a18:	movt	r0, #5
   18a1c:	ldrd	r2, [r0]
   18a20:	adds	r2, r2, #1
   18a24:	adc	r3, r3, #0
   18a28:	strd	r2, [r0]
   18a2c:	movw	r0, #21864	; 0x5568
   18a30:	movt	r0, #5
   18a34:	ldr	r0, [r0]
   18a38:	movw	r1, #2699	; 0xa8b
   18a3c:	movt	r1, #4
   18a40:	mov	r2, r5
   18a44:	bl	128fc <fprintf@plt>
   18a48:	movw	r0, #24204	; 0x5e8c
   18a4c:	movt	r0, #5
   18a50:	ldr	r0, [r0, #48]	; 0x30
   18a54:	cmp	r0, #0
   18a58:	beq	18a8c <__assert_fail@plt+0x5e9c>
   18a5c:	cmp	r0, #2
   18a60:	beq	18a7c <__assert_fail@plt+0x5e8c>
   18a64:	cmp	r0, #1
   18a68:	bne	18a9c <__assert_fail@plt+0x5eac>
   18a6c:	mov	r0, r5
   18a70:	mov	r1, r4
   18a74:	pop	{r4, r5, fp, lr}
   18a78:	b	1892c <__assert_fail@plt+0x5d3c>
   18a7c:	mov	r0, r5
   18a80:	mov	r1, r4
   18a84:	pop	{r4, r5, fp, lr}
   18a88:	b	18808 <__assert_fail@plt+0x5c18>
   18a8c:	mov	r0, r5
   18a90:	mov	r1, r4
   18a94:	pop	{r4, r5, fp, lr}
   18a98:	b	189ac <__assert_fail@plt+0x5dbc>
   18a9c:	movw	r0, #65169	; 0xfe91
   18aa0:	movt	r0, #3
   18aa4:	movw	r1, #561	; 0x231
   18aa8:	movt	r1, #4
   18aac:	movw	r3, #2716	; 0xa9c
   18ab0:	movt	r3, #4
   18ab4:	movw	r2, #677	; 0x2a5
   18ab8:	bl	12bf0 <__assert_fail@plt>
   18abc:	movw	r0, #24204	; 0x5e8c
   18ac0:	movt	r0, #5
   18ac4:	ldr	r0, [r0, #48]	; 0x30
   18ac8:	cmp	r0, #1
   18acc:	moveq	r0, #1
   18ad0:	bxeq	lr
   18ad4:	cmp	r0, #2
   18ad8:	movne	r0, #0
   18adc:	bxne	lr
   18ae0:	movw	r0, #24160	; 0x5e60
   18ae4:	movt	r0, #5
   18ae8:	ldr	r0, [r0]
   18aec:	clz	r0, r0
   18af0:	lsr	r0, r0, #5
   18af4:	bx	lr
   18af8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18afc:	add	fp, sp, #24
   18b00:	mov	r8, r3
   18b04:	mov	r6, r2
   18b08:	mov	r7, r1
   18b0c:	mov	r5, r0
   18b10:	ldr	r4, [r0]
   18b14:	cmp	r4, #0
   18b18:	beq	18b90 <__assert_fail@plt+0x5fa0>
   18b1c:	and	r0, r4, #61440	; 0xf000
   18b20:	cmp	r0, #40960	; 0xa000
   18b24:	bne	18b74 <__assert_fail@plt+0x5f84>
   18b28:	bl	18abc <__assert_fail@plt+0x5ecc>
   18b2c:	cmp	r0, #0
   18b30:	beq	18b74 <__assert_fail@plt+0x5f84>
   18b34:	mov	r0, r7
   18b38:	mov	r1, r6
   18b3c:	mov	r2, r8
   18b40:	bl	18274 <__assert_fail@plt+0x5684>
   18b44:	mov	r1, r0
   18b48:	mov	r0, #0
   18b4c:	cmp	r1, #0
   18b50:	bne	18bd8 <__assert_fail@plt+0x5fe8>
   18b54:	ldr	r0, [r8, #16]
   18b58:	movw	r1, #24160	; 0x5e60
   18b5c:	movt	r1, #5
   18b60:	str	r0, [r1, #8]
   18b64:	str	r0, [r5]
   18b68:	mov	r0, #1
   18b6c:	strb	r0, [r1, #5]
   18b70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18b74:	movw	r1, #24160	; 0x5e60
   18b78:	movt	r1, #5
   18b7c:	str	r4, [r1, #8]
   18b80:	mov	r0, #1
   18b84:	strb	r0, [r1, #5]
   18b88:	str	r4, [r8, #16]
   18b8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18b90:	ldr	r0, [fp, #8]
   18b94:	cmp	r0, #0
   18b98:	beq	18bb8 <__assert_fail@plt+0x5fc8>
   18b9c:	movw	r0, #24160	; 0x5e60
   18ba0:	movt	r0, #5
   18ba4:	mov	r1, #0
   18ba8:	str	r1, [r0, #8]
   18bac:	strh	r1, [r0, #4]
   18bb0:	mov	r0, #1
   18bb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18bb8:	mov	r0, r7
   18bbc:	mov	r1, r6
   18bc0:	mov	r2, r8
   18bc4:	bl	18274 <__assert_fail@plt+0x5684>
   18bc8:	mov	r1, r0
   18bcc:	mov	r0, #0
   18bd0:	cmp	r1, #0
   18bd4:	beq	18bdc <__assert_fail@plt+0x5fec>
   18bd8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18bdc:	ldr	r1, [r8, #16]
   18be0:	str	r1, [r5]
   18be4:	movw	r2, #24160	; 0x5e60
   18be8:	movt	r2, #5
   18bec:	mov	r0, #1
   18bf0:	strb	r0, [r2, #5]
   18bf4:	str	r1, [r2, #8]
   18bf8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18bfc:	mov	r1, r0
   18c00:	mov	r0, #1
   18c04:	cmp	r1, #0
   18c08:	bxeq	lr
   18c0c:	ldrb	r2, [r1, #17]
   18c10:	cmp	r2, #0
   18c14:	bne	18c20 <__assert_fail@plt+0x6030>
   18c18:	ldr	r1, [r1, #152]	; 0x98
   18c1c:	b	18c04 <__assert_fail@plt+0x6014>
   18c20:	mov	r0, #0
   18c24:	bx	lr
   18c28:	mov	ip, r0
   18c2c:	ldrb	r0, [r0]
   18c30:	sub	r3, r0, #33	; 0x21
   18c34:	mov	r0, #0
   18c38:	cmp	r3, #12
   18c3c:	bxhi	lr
   18c40:	add	r2, pc, #0
   18c44:	ldr	pc, [r2, r3, lsl #2]
   18c48:	andeq	r8, r1, ip, ror ip
   18c4c:	andeq	r8, r1, r8, lsl #25
   18c50:	andeq	r8, r1, r8, lsl #25
   18c54:	andeq	r8, r1, r8, lsl #25
   18c58:	andeq	r8, r1, r8, lsl #25
   18c5c:	andeq	r8, r1, r8, lsl #25
   18c60:	andeq	r8, r1, r8, lsl #25
   18c64:	andeq	r8, r1, ip, ror ip
   18c68:	andeq	r8, r1, ip, lsl #25
   18c6c:	andeq	r8, r1, r8, lsl #25
   18c70:	andeq	r8, r1, r8, lsl #25
   18c74:	andeq	r8, r1, ip, lsl #25
   18c78:	andeq	r8, r1, r4, lsr #25
   18c7c:	ldrb	r0, [ip, #1]
   18c80:	clz	r0, r0
   18c84:	lsr	r0, r0, #5
   18c88:	bx	lr
   18c8c:	eor	r0, r1, #1
   18c90:	ldrb	r1, [ip, #1]
   18c94:	clz	r1, r1
   18c98:	lsr	r1, r1, #5
   18c9c:	and	r0, r1, r0
   18ca0:	bx	lr
   18ca4:	ldrb	r0, [ip, #1]
   18ca8:	cmp	r0, #0
   18cac:	movwne	r0, #1
   18cb0:	bx	lr
   18cb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18cb8:	add	fp, sp, #28
   18cbc:	sub	sp, sp, #4
   18cc0:	mov	r4, #1
   18cc4:	cmp	r0, #2
   18cc8:	blt	18dcc <__assert_fail@plt+0x61dc>
   18ccc:	mov	r5, r1
   18cd0:	mov	r6, r0
   18cd4:	mov	r4, #1
   18cd8:	movw	r7, #2760	; 0xac8
   18cdc:	movt	r7, #4
   18ce0:	movw	r8, #2763	; 0xacb
   18ce4:	movt	r8, #4
   18ce8:	movw	r9, #2766	; 0xace
   18cec:	movt	r9, #4
   18cf0:	b	18d08 <__assert_fail@plt+0x6118>
   18cf4:	mov	r0, #2
   18cf8:	bl	1b818 <__assert_fail@plt+0x8c28>
   18cfc:	add	r4, r4, #1
   18d00:	cmp	r4, r6
   18d04:	bge	18dcc <__assert_fail@plt+0x61dc>
   18d08:	ldr	sl, [r5, r4, lsl #2]
   18d0c:	mov	r0, r7
   18d10:	mov	r1, sl
   18d14:	bl	124f4 <strcmp@plt>
   18d18:	cmp	r0, #0
   18d1c:	beq	18cf4 <__assert_fail@plt+0x6104>
   18d20:	mov	r0, r8
   18d24:	mov	r1, sl
   18d28:	bl	124f4 <strcmp@plt>
   18d2c:	cmp	r0, #0
   18d30:	beq	18da0 <__assert_fail@plt+0x61b0>
   18d34:	mov	r0, r9
   18d38:	mov	r1, sl
   18d3c:	bl	124f4 <strcmp@plt>
   18d40:	cmp	r0, #0
   18d44:	beq	18da8 <__assert_fail@plt+0x61b8>
   18d48:	movw	r0, #2769	; 0xad1
   18d4c:	movt	r0, #4
   18d50:	mov	r1, sl
   18d54:	bl	124f4 <strcmp@plt>
   18d58:	cmp	r0, #0
   18d5c:	beq	18dc8 <__assert_fail@plt+0x61d8>
   18d60:	movw	r0, #2772	; 0xad4
   18d64:	movt	r0, #4
   18d68:	mov	r1, sl
   18d6c:	bl	124f4 <strcmp@plt>
   18d70:	cmp	r0, #0
   18d74:	beq	18db0 <__assert_fail@plt+0x61c0>
   18d78:	movw	r0, #3835	; 0xefb
   18d7c:	movt	r0, #4
   18d80:	mov	r1, sl
   18d84:	mov	r2, #2
   18d88:	bl	12b90 <strncmp@plt>
   18d8c:	cmp	r0, #0
   18d90:	bne	18dcc <__assert_fail@plt+0x61dc>
   18d94:	add	r0, sl, #2
   18d98:	bl	18f3c <__assert_fail@plt+0x634c>
   18d9c:	b	18cfc <__assert_fail@plt+0x610c>
   18da0:	mov	r0, #1
   18da4:	b	18cf8 <__assert_fail@plt+0x6108>
   18da8:	mov	r0, #0
   18dac:	b	18cf8 <__assert_fail@plt+0x6108>
   18db0:	add	r4, r4, #1
   18db4:	cmp	r4, r6
   18db8:	bge	18dd8 <__assert_fail@plt+0x61e8>
   18dbc:	ldr	r0, [r5, r4, lsl #2]
   18dc0:	bl	18e04 <__assert_fail@plt+0x6214>
   18dc4:	b	18cfc <__assert_fail@plt+0x610c>
   18dc8:	add	r4, r4, #1
   18dcc:	mov	r0, r4
   18dd0:	sub	sp, fp, #28
   18dd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18dd8:	movw	r1, #2775	; 0xad7
   18ddc:	movt	r1, #4
   18de0:	mov	r0, #0
   18de4:	mov	r2, #5
   18de8:	bl	12674 <dcgettext@plt>
   18dec:	mov	r2, r0
   18df0:	mov	r0, #0
   18df4:	mov	r1, #0
   18df8:	bl	127b8 <error@plt>
   18dfc:	mov	r0, #1
   18e00:	bl	17fec <__assert_fail@plt+0x53fc>
   18e04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e08:	add	fp, sp, #28
   18e0c:	sub	sp, sp, #12
   18e10:	mov	r9, r0
   18e14:	mov	r0, #0
   18e18:	str	r0, [sp, #8]
   18e1c:	mov	r0, #44	; 0x2c
   18e20:	strh	r0, [sp, #6]
   18e24:	add	r1, sp, #6
   18e28:	add	r2, sp, #8
   18e2c:	mov	r0, r9
   18e30:	bl	127ac <strtok_r@plt>
   18e34:	cmp	r0, #0
   18e38:	beq	18f10 <__assert_fail@plt+0x6320>
   18e3c:	mov	r7, r0
   18e40:	movw	r5, #4016	; 0xfb0
   18e44:	movt	r5, #4
   18e48:	movw	r4, #24204	; 0x5e8c
   18e4c:	movt	r4, #5
   18e50:	add	sl, sp, #6
   18e54:	add	r6, sp, #8
   18e58:	b	18e8c <__assert_fail@plt+0x629c>
   18e5c:	add	r0, r5, r8
   18e60:	ldr	r0, [r0, #4]
   18e64:	ldr	r1, [r4, #44]	; 0x2c
   18e68:	orr	r0, r1, r0
   18e6c:	str	r0, [r4, #44]	; 0x2c
   18e70:	mov	r0, #0
   18e74:	mov	r1, sl
   18e78:	mov	r2, r6
   18e7c:	bl	127ac <strtok_r@plt>
   18e80:	mov	r7, r0
   18e84:	cmp	r0, #0
   18e88:	beq	18ef0 <__assert_fail@plt+0x6300>
   18e8c:	mov	r8, #0
   18e90:	ldr	r0, [r5, r8]
   18e94:	mov	r1, r7
   18e98:	bl	124f4 <strcmp@plt>
   18e9c:	cmp	r0, #0
   18ea0:	beq	18e5c <__assert_fail@plt+0x626c>
   18ea4:	add	r8, r8, #12
   18ea8:	cmp	r8, #108	; 0x6c
   18eac:	bne	18e90 <__assert_fail@plt+0x62a0>
   18eb0:	mov	r0, #0
   18eb4:	movw	r1, #3652	; 0xe44
   18eb8:	movt	r1, #4
   18ebc:	mov	r2, #5
   18ec0:	bl	12674 <dcgettext@plt>
   18ec4:	mov	r7, r0
   18ec8:	ldr	r1, [r4, #72]	; 0x48
   18ecc:	mov	r0, #0
   18ed0:	mov	r2, r9
   18ed4:	bl	2a088 <__assert_fail@plt+0x17498>
   18ed8:	mov	r3, r0
   18edc:	mov	r0, #0
   18ee0:	mov	r1, #0
   18ee4:	mov	r2, r7
   18ee8:	bl	127b8 <error@plt>
   18eec:	b	18e70 <__assert_fail@plt+0x6280>
   18ef0:	ldrb	r0, [r4, #44]	; 0x2c
   18ef4:	tst	r0, #16
   18ef8:	subeq	sp, fp, #28
   18efc:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f00:	mov	r0, #1
   18f04:	bl	181ac <__assert_fail@plt+0x55bc>
   18f08:	mov	r0, #0
   18f0c:	bl	12884 <exit@plt>
   18f10:	movw	r1, #3688	; 0xe68
   18f14:	movt	r1, #4
   18f18:	mov	r0, #0
   18f1c:	mov	r2, #5
   18f20:	bl	12674 <dcgettext@plt>
   18f24:	mov	r2, r0
   18f28:	mov	r0, #0
   18f2c:	mov	r1, #0
   18f30:	bl	127b8 <error@plt>
   18f34:	mov	r0, #1
   18f38:	bl	17fec <__assert_fail@plt+0x53fc>
   18f3c:	push	{r4, r5, r6, r7, fp, lr}
   18f40:	add	fp, sp, #16
   18f44:	sub	sp, sp, #8
   18f48:	ldrb	r5, [r0]
   18f4c:	cmp	r5, #0
   18f50:	beq	18fe8 <__assert_fail@plt+0x63f8>
   18f54:	mov	r4, r0
   18f58:	bl	1286c <__ctype_b_loc@plt>
   18f5c:	ldr	r0, [r0]
   18f60:	add	r0, r0, r5, lsl #1
   18f64:	ldrb	r0, [r0, #1]
   18f68:	tst	r0, #8
   18f6c:	beq	18fdc <__assert_fail@plt+0x63ec>
   18f70:	bl	12908 <__errno_location@plt>
   18f74:	mov	r6, r0
   18f78:	ldr	r7, [r0]
   18f7c:	mov	r0, #0
   18f80:	str	r0, [r6]
   18f84:	add	r1, sp, #4
   18f88:	mov	r0, r4
   18f8c:	mov	r2, #10
   18f90:	bl	128b4 <strtoul@plt>
   18f94:	mov	r5, r0
   18f98:	ldr	r0, [sp, #4]
   18f9c:	cmp	r5, #0
   18fa0:	cmpeq	r0, r4
   18fa4:	beq	18fdc <__assert_fail@plt+0x63ec>
   18fa8:	ldrb	r0, [r0]
   18fac:	cmp	r0, #0
   18fb0:	bne	1900c <__assert_fail@plt+0x641c>
   18fb4:	cmn	r5, #1
   18fb8:	beq	19034 <__assert_fail@plt+0x6444>
   18fbc:	cmp	r5, #65536	; 0x10000
   18fc0:	movwcc	r0, #24204	; 0x5e8c
   18fc4:	movtcc	r0, #5
   18fc8:	strhcc	r5, [r0, #68]	; 0x44
   18fcc:	strcc	r7, [r6]
   18fd0:	subcc	sp, fp, #16
   18fd4:	popcc	{r4, r5, r6, r7, fp, pc}
   18fd8:	b	19040 <__assert_fail@plt+0x6450>
   18fdc:	movw	r1, #3785	; 0xec9
   18fe0:	movt	r1, #4
   18fe4:	b	18ff0 <__assert_fail@plt+0x6400>
   18fe8:	movw	r1, #3721	; 0xe89
   18fec:	movt	r1, #4
   18ff0:	mov	r0, #0
   18ff4:	mov	r2, #5
   18ff8:	bl	12674 <dcgettext@plt>
   18ffc:	mov	r2, r0
   19000:	mov	r0, #1
   19004:	mov	r1, #0
   19008:	bl	127b8 <error@plt>
   1900c:	movw	r1, #3838	; 0xefe
   19010:	movt	r1, #4
   19014:	mov	r0, #0
   19018:	mov	r2, #5
   1901c:	bl	12674 <dcgettext@plt>
   19020:	mov	r2, r0
   19024:	mov	r0, #1
   19028:	mov	r1, #0
   1902c:	mov	r3, r4
   19030:	bl	127b8 <error@plt>
   19034:	ldr	r6, [r6]
   19038:	cmp	r6, #0
   1903c:	bne	19068 <__assert_fail@plt+0x6478>
   19040:	movw	r1, #3868	; 0xf1c
   19044:	movt	r1, #4
   19048:	mov	r0, #0
   1904c:	mov	r2, #5
   19050:	bl	12674 <dcgettext@plt>
   19054:	mov	r2, r0
   19058:	mov	r0, #1
   1905c:	mov	r1, #0
   19060:	mov	r3, r5
   19064:	bl	127b8 <error@plt>
   19068:	movw	r1, #3838	; 0xefe
   1906c:	movt	r1, #4
   19070:	mov	r0, #0
   19074:	mov	r2, #5
   19078:	bl	12674 <dcgettext@plt>
   1907c:	mov	r2, r0
   19080:	mov	r0, #1
   19084:	mov	r1, r6
   19088:	mov	r3, r4
   1908c:	bl	127b8 <error@plt>
   19090:	push	{r4, r5, fp, lr}
   19094:	add	fp, sp, #8
   19098:	sub	sp, sp, #8
   1909c:	mov	r4, r0
   190a0:	movw	r0, #2813	; 0xafd
   190a4:	movt	r0, #4
   190a8:	bl	127f4 <getenv@plt>
   190ac:	cmp	r0, #0
   190b0:	movwne	r0, #1
   190b4:	strb	r0, [r4, #17]
   190b8:	bl	18374 <__assert_fail@plt+0x5784>
   190bc:	mov	r5, #0
   190c0:	str	r5, [r4, #60]	; 0x3c
   190c4:	strb	r0, [r4, #56]	; 0x38
   190c8:	mov	r0, #0
   190cc:	bl	12b60 <isatty@plt>
   190d0:	strb	r5, [r4, #15]
   190d4:	cmp	r0, #0
   190d8:	movwne	r0, #1
   190dc:	strb	r0, [r4, #16]
   190e0:	ldrb	r0, [r4, #17]
   190e4:	cmp	r0, #0
   190e8:	strbne	r5, [r4, #16]
   190ec:	mvn	r0, #0
   190f0:	mov	r1, #1
   190f4:	strh	r1, [r4]
   190f8:	str	r0, [r4, #4]
   190fc:	str	r0, [r4, #8]
   19100:	mov	r0, sp
   19104:	bl	191b4 <__assert_fail@plt+0x65c4>
   19108:	ldm	sp, {r0, r1}
   1910c:	str	r1, [r4, #24]
   19110:	str	r0, [r4, #20]
   19114:	strb	r5, [r4, #36]	; 0x24
   19118:	strh	r5, [r4, #13]
   1911c:	mov	r0, #2
   19120:	strh	r0, [r4, #68]	; 0x44
   19124:	str	r5, [r4, #44]	; 0x2c
   19128:	ldr	r0, [r4, #20]
   1912c:	ldr	r1, [r4, #24]
   19130:	str	r1, [r4, #32]
   19134:	sub	r0, r0, #4480	; 0x1180
   19138:	sub	r0, r0, #81920	; 0x14000
   1913c:	str	r0, [r4, #28]
   19140:	ldrb	r0, [r4, #17]
   19144:	mov	r1, #512	; 0x200
   19148:	cmp	r0, #0
   1914c:	movweq	r1, #1024	; 0x400
   19150:	str	r1, [r4, #40]	; 0x28
   19154:	movw	r0, #2829	; 0xb0d
   19158:	movt	r0, #4
   1915c:	bl	127f4 <getenv@plt>
   19160:	cmp	r0, #0
   19164:	bne	19190 <__assert_fail@plt+0x65a0>
   19168:	mov	r5, #0
   1916c:	strb	r5, [r4, #12]
   19170:	mov	r0, #0
   19174:	bl	1b818 <__assert_fail@plt+0x8c28>
   19178:	strb	r5, [r4, #80]	; 0x50
   1917c:	mov	r0, #8
   19180:	str	r0, [r4, #72]	; 0x48
   19184:	str	r5, [r4, #76]	; 0x4c
   19188:	sub	sp, fp, #8
   1918c:	pop	{r4, r5, fp, pc}
   19190:	movw	r1, #2845	; 0xb1d
   19194:	movt	r1, #4
   19198:	mov	r0, #0
   1919c:	mov	r2, #5
   191a0:	bl	12674 <dcgettext@plt>
   191a4:	mov	r2, r0
   191a8:	mov	r0, #1
   191ac:	mov	r1, #0
   191b0:	bl	127b8 <error@plt>
   191b4:	push	{r4, r5, fp, lr}
   191b8:	add	fp, sp, #8
   191bc:	sub	sp, sp, #8
   191c0:	mov	r4, r0
   191c4:	mov	r0, sp
   191c8:	mov	r1, #0
   191cc:	bl	1277c <gettimeofday@plt>
   191d0:	cmp	r0, #0
   191d4:	beq	191f4 <__assert_fail@plt+0x6604>
   191d8:	mov	r5, #0
   191dc:	mov	r0, #0
   191e0:	bl	12644 <time@plt>
   191e4:	cmn	r0, #1
   191e8:	beq	19214 <__assert_fail@plt+0x6624>
   191ec:	str	r0, [r4]
   191f0:	b	19208 <__assert_fail@plt+0x6618>
   191f4:	ldr	r0, [sp]
   191f8:	str	r0, [r4]
   191fc:	ldr	r0, [sp, #4]
   19200:	mov	r1, #1000	; 0x3e8
   19204:	mul	r5, r0, r1
   19208:	str	r5, [r4, #4]
   1920c:	sub	sp, fp, #8
   19210:	pop	{r4, r5, fp, pc}
   19214:	movw	r0, #3972	; 0xf84
   19218:	movt	r0, #4
   1921c:	movw	r1, #561	; 0x231
   19220:	movt	r1, #4
   19224:	movw	r3, #3988	; 0xf94
   19228:	movt	r3, #4
   1922c:	movw	r2, #978	; 0x3d2
   19230:	bl	12bf0 <__assert_fail@plt>
   19234:	push	{r4, r5, r6, sl, fp, lr}
   19238:	add	fp, sp, #16
   1923c:	mov	r4, r2
   19240:	mov	r5, r1
   19244:	mov	r6, r0
   19248:	ldr	r0, [r2, #164]	; 0xa4
   1924c:	add	r0, r0, #1
   19250:	str	r0, [r2, #164]	; 0xa4
   19254:	ldrb	r0, [r2, #18]
   19258:	cmp	r0, #0
   1925c:	bne	19278 <__assert_fail@plt+0x6688>
   19260:	ldrb	r0, [r4, #19]
   19264:	cmp	r0, #0
   19268:	bne	19278 <__assert_fail@plt+0x6688>
   1926c:	ldrb	r0, [r4, #20]
   19270:	cmp	r0, #0
   19274:	beq	19298 <__assert_fail@plt+0x66a8>
   19278:	mov	r0, r6
   1927c:	mov	r1, r5
   19280:	mov	r2, r4
   19284:	bl	192d0 <__assert_fail@plt+0x66e0>
   19288:	mov	r1, r0
   1928c:	mov	r0, #0
   19290:	cmp	r1, #0
   19294:	popne	{r4, r5, r6, sl, fp, pc}
   19298:	ldr	r3, [r4]
   1929c:	mov	r0, r6
   192a0:	mov	r1, r5
   192a4:	mov	r2, r4
   192a8:	blx	r3
   192ac:	mov	r1, r0
   192b0:	mov	r0, #0
   192b4:	cmp	r1, #0
   192b8:	beq	192cc <__assert_fail@plt+0x66dc>
   192bc:	ldr	r0, [r4, #168]	; 0xa8
   192c0:	add	r0, r0, #1
   192c4:	str	r0, [r4, #168]	; 0xa8
   192c8:	mov	r0, #1
   192cc:	pop	{r4, r5, r6, sl, fp, pc}
   192d0:	push	{fp, lr}
   192d4:	mov	fp, sp
   192d8:	mov	r3, r1
   192dc:	movw	ip, #24160	; 0x5e60
   192e0:	movt	ip, #5
   192e4:	ldrb	r1, [r2, #18]
   192e8:	cmp	r1, #0
   192ec:	beq	192fc <__assert_fail@plt+0x670c>
   192f0:	ldrb	r1, [ip, #4]
   192f4:	cmp	r1, #0
   192f8:	beq	19334 <__assert_fail@plt+0x6744>
   192fc:	ldrb	lr, [ip, #5]
   19300:	ldrb	r1, [r2, #19]
   19304:	cmp	r1, #0
   19308:	beq	19314 <__assert_fail@plt+0x6724>
   1930c:	cmp	lr, #0
   19310:	beq	19334 <__assert_fail@plt+0x6744>
   19314:	ldrb	r1, [r2, #20]
   19318:	cmp	r1, #0
   1931c:	beq	19364 <__assert_fail@plt+0x6774>
   19320:	cmp	lr, #0
   19324:	ldrne	r2, [r3, #96]	; 0x60
   19328:	ldrne	r1, [r3, #100]	; 0x64
   1932c:	orrsne	r1, r2, r1
   19330:	bne	19354 <__assert_fail@plt+0x6764>
   19334:	ldr	r1, [ip, #12]
   19338:	mov	r2, r3
   1933c:	bl	18274 <__assert_fail@plt+0x5684>
   19340:	mov	r1, r0
   19344:	mvn	r0, #0
   19348:	cmp	r1, #0
   1934c:	moveq	r0, #0
   19350:	pop	{fp, pc}
   19354:	ldr	r1, [r3, #16]
   19358:	and	r1, r1, #61440	; 0xf000
   1935c:	cmp	r1, #16384	; 0x4000
   19360:	beq	19334 <__assert_fail@plt+0x6744>
   19364:	mov	r0, #0
   19368:	pop	{fp, pc}
   1936c:	movw	r1, #19080	; 0x4a88
   19370:	movt	r1, #1
   19374:	sub	r1, r0, r1
   19378:	clz	r1, r1
   1937c:	lsr	r1, r1, #5
   19380:	movw	r2, #17260	; 0x436c
   19384:	movt	r2, #1
   19388:	sub	r0, r0, r2
   1938c:	clz	r0, r0
   19390:	lsr	r0, r0, #5
   19394:	orr	r0, r0, r1
   19398:	bx	lr
   1939c:	mov	r2, r1
   193a0:	movw	r1, #24204	; 0x5e8c
   193a4:	movt	r1, #5
   193a8:	ldr	r1, [r1, #72]	; 0x48
   193ac:	b	2a088 <__assert_fail@plt+0x17498>
   193b0:	push	{r4, r5, r6, r7, fp, lr}
   193b4:	add	fp, sp, #16
   193b8:	mov	r4, r2
   193bc:	mov	r5, r1
   193c0:	mov	r6, r0
   193c4:	movw	r7, #24160	; 0x5e60
   193c8:	movt	r7, #5
   193cc:	ldrb	r0, [r7, #40]	; 0x28
   193d0:	cmp	r0, #0
   193d4:	cmpne	r4, #0
   193d8:	bne	19408 <__assert_fail@plt+0x6818>
   193dc:	mov	r0, #0
   193e0:	mov	r1, r3
   193e4:	bl	1939c <__assert_fail@plt+0x67ac>
   193e8:	mov	r3, r0
   193ec:	movw	r2, #19695	; 0x4cef
   193f0:	movt	r2, #4
   193f4:	mov	r0, r6
   193f8:	mov	r1, r5
   193fc:	bl	127b8 <error@plt>
   19400:	mov	r0, #1
   19404:	str	r0, [r7, #28]
   19408:	cmp	r4, #0
   1940c:	movne	r0, #1
   19410:	strbne	r0, [r7, #40]	; 0x28
   19414:	pop	{r4, r5, r6, r7, fp, pc}
   19418:	push	{fp, lr}
   1941c:	mov	fp, sp
   19420:	mov	r3, r1
   19424:	mov	r1, r0
   19428:	mov	r0, #1
   1942c:	mov	r2, #1
   19430:	bl	193b0 <__assert_fail@plt+0x67c0>
   19434:	bl	12b9c <abort@plt>
   19438:	push	{fp, lr}
   1943c:	mov	fp, sp
   19440:	mov	r3, r1
   19444:	mov	r1, r0
   19448:	movw	r0, #24160	; 0x5e60
   1944c:	movt	r0, #5
   19450:	mov	r2, #0
   19454:	strb	r2, [r0, #40]	; 0x28
   19458:	mov	r0, #1
   1945c:	mov	r2, #0
   19460:	bl	193b0 <__assert_fail@plt+0x67c0>
   19464:	bl	12b9c <abort@plt>
   19468:	push	{r4, sl, fp, lr}
   1946c:	add	fp, sp, #8
   19470:	mov	r4, r0
   19474:	ldr	r0, [r0, #104]	; 0x68
   19478:	movw	r1, #38072	; 0x94b8
   1947c:	movt	r1, #1
   19480:	mov	r2, r4
   19484:	bl	1fec0 <__assert_fail@plt+0xd2d0>
   19488:	ldr	r0, [r4, #104]	; 0x68
   1948c:	movw	r1, #21896	; 0x5588
   19490:	movt	r1, #5
   19494:	ldr	r1, [r1]
   19498:	cmp	r0, r1
   1949c:	popeq	{r4, sl, fp, pc}
   194a0:	bl	2a7bc <__assert_fail@plt+0x17bcc>
   194a4:	ldr	r0, [r4, #104]	; 0x68
   194a8:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   194ac:	mov	r0, #0
   194b0:	str	r0, [r4, #104]	; 0x68
   194b4:	pop	{r4, sl, fp, pc}
   194b8:	push	{fp, lr}
   194bc:	mov	fp, sp
   194c0:	add	r2, r0, #4
   194c4:	add	r1, r0, #48	; 0x30
   194c8:	mov	r0, r2
   194cc:	bl	1f84c <__assert_fail@plt+0xcc5c>
   194d0:	mov	r0, #0
   194d4:	pop	{fp, pc}
   194d8:	push	{r4, r5, r6, sl, fp, lr}
   194dc:	add	fp, sp, #16
   194e0:	sub	sp, sp, #8
   194e4:	mov	r6, r0
   194e8:	mov	r0, #8
   194ec:	bl	2ed88 <__assert_fail@plt+0x1c198>
   194f0:	mov	r4, #0
   194f4:	cmp	r0, #0
   194f8:	beq	19564 <__assert_fail@plt+0x6974>
   194fc:	mov	r5, r0
   19500:	mov	r0, r6
   19504:	bl	12680 <strdup@plt>
   19508:	str	r0, [r5]
   1950c:	cmp	r0, #0
   19510:	beq	1955c <__assert_fail@plt+0x696c>
   19514:	movw	r0, #38384	; 0x95f0
   19518:	movt	r0, #1
   1951c:	str	r0, [sp]
   19520:	mov	r4, #0
   19524:	movw	r2, #38256	; 0x9570
   19528:	movt	r2, #1
   1952c:	movw	r3, #38312	; 0x95a8
   19530:	movt	r3, #1
   19534:	mov	r0, #11
   19538:	mov	r1, #0
   1953c:	bl	22794 <__assert_fail@plt+0xfba4>
   19540:	str	r0, [r5, #4]
   19544:	cmp	r0, #0
   19548:	beq	19554 <__assert_fail@plt+0x6964>
   1954c:	mov	r4, r5
   19550:	b	19564 <__assert_fail@plt+0x6974>
   19554:	ldr	r0, [r5]
   19558:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   1955c:	mov	r0, r5
   19560:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   19564:	mov	r0, r4
   19568:	sub	sp, fp, #16
   1956c:	pop	{r4, r5, r6, sl, fp, pc}
   19570:	push	{fp, lr}
   19574:	mov	fp, sp
   19578:	mov	ip, r1
   1957c:	ldr	lr, [r0]
   19580:	ldr	r3, [r0, #4]
   19584:	ldr	r2, [r0, #8]
   19588:	ldr	r1, [r0, #12]
   1958c:	eor	r0, r2, lr
   19590:	eor	r1, r1, r3
   19594:	mov	r2, ip
   19598:	mov	r3, #0
   1959c:	bl	3e7d4 <__assert_fail@plt+0x2bbe4>
   195a0:	mov	r0, r2
   195a4:	pop	{fp, pc}
   195a8:	push	{r4, r5, fp, lr}
   195ac:	add	fp, sp, #8
   195b0:	ldrd	r2, [r1, #8]
   195b4:	ldrd	r4, [r0, #8]
   195b8:	eor	r3, r5, r3
   195bc:	eor	r2, r4, r2
   195c0:	orrs	r2, r2, r3
   195c4:	mov	r2, #0
   195c8:	bne	195e8 <__assert_fail@plt+0x69f8>
   195cc:	ldrd	r2, [r1]
   195d0:	ldrd	r0, [r0]
   195d4:	eor	r1, r1, r3
   195d8:	eor	r0, r0, r2
   195dc:	orr	r0, r0, r1
   195e0:	clz	r0, r0
   195e4:	lsr	r2, r0, #5
   195e8:	mov	r0, r2
   195ec:	pop	{r4, r5, fp, pc}
   195f0:	push	{r4, sl, fp, lr}
   195f4:	add	fp, sp, #8
   195f8:	mov	r4, r0
   195fc:	ldr	r0, [r0, #20]
   19600:	cmp	r0, #0
   19604:	beq	19614 <__assert_fail@plt+0x6a24>
   19608:	bl	129d4 <fclose@plt>
   1960c:	cmp	r0, #0
   19610:	bne	19628 <__assert_fail@plt+0x6a38>
   19614:	ldr	r0, [r4, #16]
   19618:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   1961c:	mov	r0, r4
   19620:	pop	{r4, sl, fp, lr}
   19624:	b	2cad4 <__assert_fail@plt+0x19ee4>
   19628:	bl	12908 <__errno_location@plt>
   1962c:	ldr	r0, [r0]
   19630:	ldr	r1, [r4, #16]
   19634:	bl	19438 <__assert_fail@plt+0x6848>
   19638:	push	{r4, sl, fp, lr}
   1963c:	add	fp, sp, #8
   19640:	mov	r4, r0
   19644:	ldr	r0, [r0]
   19648:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   1964c:	ldr	r0, [r4, #4]
   19650:	pop	{r4, sl, fp, lr}
   19654:	b	22a70 <__assert_fail@plt+0xfe80>
   19658:	push	{r4, r5, r6, r7, fp, lr}
   1965c:	add	fp, sp, #16
   19660:	sub	sp, sp, #104	; 0x68
   19664:	mov	r7, r1
   19668:	mov	r5, r0
   1966c:	mov	r0, #24
   19670:	bl	2ed88 <__assert_fail@plt+0x1c198>
   19674:	mov	r6, #0
   19678:	cmp	r0, #0
   1967c:	beq	19754 <__assert_fail@plt+0x6b64>
   19680:	mov	r4, r0
   19684:	mov	r0, r7
   19688:	bl	12680 <strdup@plt>
   1968c:	str	r0, [r4, #16]
   19690:	cmp	r0, #0
   19694:	beq	19714 <__assert_fail@plt+0x6b24>
   19698:	ldr	r1, [r5]
   1969c:	mov	r0, r7
   196a0:	bl	22270 <__assert_fail@plt+0xf680>
   196a4:	str	r0, [r4, #20]
   196a8:	cmp	r0, #0
   196ac:	beq	19720 <__assert_fail@plt+0x6b30>
   196b0:	bl	1298c <fileno@plt>
   196b4:	cmn	r0, #1
   196b8:	ble	1977c <__assert_fail@plt+0x6b8c>
   196bc:	mov	r6, r0
   196c0:	mov	r1, #1
   196c4:	bl	21d54 <__assert_fail@plt+0xf164>
   196c8:	mov	r1, sp
   196cc:	mov	r0, r6
   196d0:	bl	3ea14 <__assert_fail@plt+0x2be24>
   196d4:	cmn	r0, #1
   196d8:	ble	1972c <__assert_fail@plt+0x6b3c>
   196dc:	ldm	sp, {r0, r1}
   196e0:	ldr	r2, [sp, #96]	; 0x60
   196e4:	ldr	r3, [sp, #100]	; 0x64
   196e8:	stm	r4, {r0, r1, r2, r3}
   196ec:	ldr	r0, [r5, #4]
   196f0:	mov	r1, r4
   196f4:	bl	224e8 <__assert_fail@plt+0xf8f8>
   196f8:	cmp	r0, #0
   196fc:	beq	1973c <__assert_fail@plt+0x6b4c>
   19700:	mov	r6, r0
   19704:	mov	r0, r4
   19708:	bl	195f0 <__assert_fail@plt+0x6a00>
   1970c:	ldr	r6, [r6, #20]
   19710:	b	19754 <__assert_fail@plt+0x6b64>
   19714:	mov	r0, r4
   19718:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   1971c:	b	19754 <__assert_fail@plt+0x6b64>
   19720:	mov	r0, r4
   19724:	bl	195f0 <__assert_fail@plt+0x6a00>
   19728:	b	19754 <__assert_fail@plt+0x6b64>
   1972c:	mov	r0, r4
   19730:	bl	195f0 <__assert_fail@plt+0x6a00>
   19734:	mov	r6, #0
   19738:	b	19754 <__assert_fail@plt+0x6b64>
   1973c:	ldr	r0, [r5, #4]
   19740:	mov	r1, r4
   19744:	bl	23030 <__assert_fail@plt+0x10440>
   19748:	cmp	r0, #0
   1974c:	beq	19760 <__assert_fail@plt+0x6b70>
   19750:	ldr	r6, [r4, #20]
   19754:	mov	r0, r6
   19758:	sub	sp, fp, #16
   1975c:	pop	{r4, r5, r6, r7, fp, pc}
   19760:	bl	12908 <__errno_location@plt>
   19764:	mov	r5, r0
   19768:	ldr	r6, [r0]
   1976c:	mov	r0, r4
   19770:	bl	195f0 <__assert_fail@plt+0x6a00>
   19774:	str	r6, [r5]
   19778:	b	19734 <__assert_fail@plt+0x6b44>
   1977c:	movw	r0, #60814	; 0xed8e
   19780:	movt	r0, #3
   19784:	movw	r1, #4124	; 0x101c
   19788:	movt	r1, #4
   1978c:	movw	r3, #4136	; 0x1028
   19790:	movt	r3, #4
   19794:	mov	r2, #166	; 0xa6
   19798:	bl	12bf0 <__assert_fail@plt>
   1979c:	andeq	r0, r0, r0
   197a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   197a4:	add	fp, sp, #24
   197a8:	ldr	r4, [fp, #8]
   197ac:	cmp	r4, #40	; 0x28
   197b0:	beq	19a80 <__assert_fail@plt+0x6e90>
   197b4:	cmp	r4, #91	; 0x5b
   197b8:	beq	19aa0 <__assert_fail@plt+0x6eb0>
   197bc:	cmp	r4, #123	; 0x7b
   197c0:	beq	19ac0 <__assert_fail@plt+0x6ed0>
   197c4:	mov	r5, r3
   197c8:	mov	r6, r2
   197cc:	mov	r7, r1
   197d0:	mov	r8, r0
   197d4:	ldr	r9, [fp, #12]
   197d8:	mov	r0, #20
   197dc:	bl	2b63c <__assert_fail@plt+0x18a4c>
   197e0:	str	r0, [r8]
   197e4:	str	r5, [r0]
   197e8:	strb	r9, [r0, #5]
   197ec:	strb	r4, [r0, #4]
   197f0:	ldr	r0, [r8]
   197f4:	mov	r1, #0
   197f8:	str	r1, [r0, #16]
   197fc:	ldr	r0, [r8]
   19800:	str	r6, [r0, #12]
   19804:	add	r0, r6, #2
   19808:	bl	2b63c <__assert_fail@plt+0x18a4c>
   1980c:	ldr	r1, [r8]
   19810:	str	r0, [r1, #8]
   19814:	mov	r1, r7
   19818:	mov	r2, r6
   1981c:	bl	1295c <strncpy@plt>
   19820:	add	r0, r0, r6
   19824:	cmp	r5, #1
   19828:	bhi	19848 <__assert_fail@plt+0x6c58>
   1982c:	cmp	r4, #0
   19830:	bne	19ae0 <__assert_fail@plt+0x6ef0>
   19834:	cmp	r9, #0
   19838:	bne	19b00 <__assert_fail@plt+0x6f10>
   1983c:	mov	r1, #0
   19840:	strb	r1, [r0]
   19844:	b	199e4 <__assert_fail@plt+0x6df4>
   19848:	cmp	r5, #2
   1984c:	bne	19b20 <__assert_fail@plt+0x6f30>
   19850:	sub	r2, r4, #37	; 0x25
   19854:	cmp	r2, #84	; 0x54
   19858:	bhi	1983c <__assert_fail@plt+0x6c4c>
   1985c:	ldr	r1, [fp, #16]
   19860:	add	r3, pc, #0
   19864:	ldr	pc, [r3, r2, lsl #2]
   19868:	strdeq	r9, [r1], -r4
   1986c:	andeq	r9, r1, ip, lsr r8
   19870:	andeq	r9, r1, ip, lsr r8
   19874:	andeq	r9, r1, ip, lsr r8
   19878:	andeq	r9, r1, ip, lsr r8
   1987c:	andeq	r9, r1, ip, lsr r8
   19880:	andeq	r9, r1, ip, lsr r8
   19884:	andeq	r9, r1, ip, lsr r8
   19888:	andeq	r9, r1, ip, lsr r8
   1988c:	andeq	r9, r1, ip, lsr r8
   19890:	andeq	r9, r1, ip, lsr r8
   19894:	andeq	r9, r1, ip, lsr r8
   19898:	andeq	r9, r1, ip, lsr r8
   1989c:	andeq	r9, r1, ip, lsr r8
   198a0:	andeq	r9, r1, ip, lsr r8
   198a4:	andeq	r9, r1, ip, lsr r8
   198a8:	andeq	r9, r1, ip, lsr r8
   198ac:	andeq	r9, r1, ip, lsr r8
   198b0:	andeq	r9, r1, ip, lsr r8
   198b4:	andeq	r9, r1, ip, lsr r8
   198b8:	andeq	r9, r1, ip, lsr r8
   198bc:	andeq	r9, r1, ip, lsr r8
   198c0:	andeq	r9, r1, ip, lsr r8
   198c4:	andeq	r9, r1, ip, lsr r8
   198c8:	andeq	r9, r1, ip, lsr r8
   198cc:	andeq	r9, r1, ip, lsr r8
   198d0:	andeq	r9, r1, ip, lsr r8
   198d4:	andeq	r9, r1, ip, lsr r8
   198d8:			; <UNDEFINED> instruction: 0x000199bc
   198dc:			; <UNDEFINED> instruction: 0x000199bc
   198e0:			; <UNDEFINED> instruction: 0x000199bc
   198e4:			; <UNDEFINED> instruction: 0x000199bc
   198e8:	andeq	r9, r1, ip, lsr r8
   198ec:			; <UNDEFINED> instruction: 0x000199bc
   198f0:			; <UNDEFINED> instruction: 0x000199bc
   198f4:	strdeq	r9, [r1], -r0
   198f8:	andeq	r9, r1, ip, lsr r8
   198fc:	andeq	r9, r1, ip, lsr r8
   19900:	andeq	r9, r1, ip, lsr r8
   19904:	andeq	r9, r1, ip, lsr r8
   19908:			; <UNDEFINED> instruction: 0x000199bc
   1990c:	andeq	r9, r1, ip, lsr r8
   19910:	andeq	r9, r1, ip, lsr r8
   19914:	strdeq	r9, [r1], -r0
   19918:	andeq	r9, r1, ip, lsr r8
   1991c:	andeq	r9, r1, ip, lsr r8
   19920:	andeq	r9, r1, r8, lsl #20
   19924:			; <UNDEFINED> instruction: 0x000199bc
   19928:			; <UNDEFINED> instruction: 0x000199bc
   1992c:	andeq	r9, r1, ip, lsr r8
   19930:	andeq	r9, r1, ip, lsr r8
   19934:	andeq	r9, r1, ip, lsr r8
   19938:	strdeq	r9, [r1], -ip
   1993c:	andeq	r9, r1, r0, ror sl
   19940:	andeq	r9, r1, ip, lsr r8
   19944:	andeq	r9, r1, ip, lsr r8
   19948:	andeq	r9, r1, ip, lsr r8
   1994c:	andeq	r9, r1, ip, lsr r8
   19950:	andeq	r9, r1, ip, lsr r8
   19954:	andeq	r9, r1, ip, lsr r8
   19958:			; <UNDEFINED> instruction: 0x000199bc
   1995c:			; <UNDEFINED> instruction: 0x000199bc
   19960:			; <UNDEFINED> instruction: 0x000199bc
   19964:	strdeq	r9, [r1], -r4
   19968:	andeq	r9, r1, ip, lsr r8
   1996c:	strdeq	r9, [r1], -r0
   19970:			; <UNDEFINED> instruction: 0x000199bc
   19974:	strdeq	r9, [r1], -r0
   19978:	andeq	r9, r1, r8, lsl sl
   1997c:	andeq	r9, r1, ip, lsr r8
   19980:			; <UNDEFINED> instruction: 0x000199bc
   19984:	andeq	r9, r1, ip, lsr #20
   19988:	andeq	r9, r1, ip, asr sl
   1998c:			; <UNDEFINED> instruction: 0x000199bc
   19990:	andeq	r9, r1, ip, lsr r8
   19994:	strdeq	r9, [r1], -r0
   19998:	andeq	r9, r1, ip, lsr r8
   1999c:	andeq	r9, r1, ip, lsr r8
   199a0:			; <UNDEFINED> instruction: 0x000199bc
   199a4:			; <UNDEFINED> instruction: 0x000199bc
   199a8:			; <UNDEFINED> instruction: 0x000199bc
   199ac:	andeq	r9, r1, ip, lsr r8
   199b0:	andeq	r9, r1, ip, lsr r8
   199b4:	andeq	r9, r1, ip, lsr r8
   199b8:	andeq	r9, r1, r4, asr #20
   199bc:	mov	r2, #1
   199c0:	strb	r2, [r1, #18]
   199c4:	mov	r2, #115	; 0x73
   199c8:	strb	r2, [r0]
   199cc:	mov	r2, #3
   199d0:	mov	r3, #0
   199d4:	strb	r3, [r0, #1]
   199d8:	ldr	r0, [r1, #24]
   199dc:	cmp	r2, r0
   199e0:	strhi	r2, [r1, #24]
   199e4:	ldr	r0, [r8]
   199e8:	add	r0, r0, #16
   199ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   199f0:	mov	r4, #115	; 0x73
   199f4:	strb	r4, [r0], #1
   199f8:	b	1983c <__assert_fail@plt+0x6c4c>
   199fc:	mov	r2, #1
   19a00:	strb	r2, [r1, #18]
   19a04:	b	19a4c <__assert_fail@plt+0x6e5c>
   19a08:	mov	r2, #1
   19a0c:	strb	r2, [r1, #18]
   19a10:	mov	r2, #103	; 0x67
   19a14:	b	199c8 <__assert_fail@plt+0x6dd8>
   19a18:	mov	r2, #1
   19a1c:	strb	r2, [r1, #20]
   19a20:	mov	r3, #115	; 0x73
   19a24:	strb	r3, [r0]
   19a28:	b	199d0 <__assert_fail@plt+0x6de0>
   19a2c:	mov	r2, #1
   19a30:	strb	r2, [r1, #18]
   19a34:	mov	r2, #115	; 0x73
   19a38:	strb	r2, [r0]
   19a3c:	mov	r2, #4
   19a40:	b	199d0 <__assert_fail@plt+0x6de0>
   19a44:	mov	r2, #1
   19a48:	strb	r2, [r1, #19]
   19a4c:	mov	r2, #115	; 0x73
   19a50:	strb	r2, [r0]
   19a54:	mov	r2, #2
   19a58:	b	199d0 <__assert_fail@plt+0x6de0>
   19a5c:	mov	r2, #111	; 0x6f
   19a60:	strb	r2, [r0]
   19a64:	mov	r2, #1
   19a68:	strb	r2, [r1, #18]
   19a6c:	b	199cc <__assert_fail@plt+0x6ddc>
   19a70:	mov	r2, #115	; 0x73
   19a74:	strb	r2, [r0]
   19a78:	mov	r2, #5
   19a7c:	b	199d0 <__assert_fail@plt+0x6de0>
   19a80:	movw	r0, #4335	; 0x10ef
   19a84:	movt	r0, #4
   19a88:	movw	r1, #4209	; 0x1071
   19a8c:	movt	r1, #4
   19a90:	movw	r3, #4217	; 0x1079
   19a94:	movt	r3, #4
   19a98:	mov	r2, #80	; 0x50
   19a9c:	bl	12bf0 <__assert_fail@plt>
   19aa0:	movw	r0, #4316	; 0x10dc
   19aa4:	movt	r0, #4
   19aa8:	movw	r1, #4209	; 0x1071
   19aac:	movt	r1, #4
   19ab0:	movw	r3, #4217	; 0x1079
   19ab4:	movt	r3, #4
   19ab8:	mov	r2, #79	; 0x4f
   19abc:	bl	12bf0 <__assert_fail@plt>
   19ac0:	movw	r0, #4190	; 0x105e
   19ac4:	movt	r0, #4
   19ac8:	movw	r1, #4209	; 0x1071
   19acc:	movt	r1, #4
   19ad0:	movw	r3, #4217	; 0x1079
   19ad4:	movt	r3, #4
   19ad8:	mov	r2, #78	; 0x4e
   19adc:	bl	12bf0 <__assert_fail@plt>
   19ae0:	movw	r0, #4354	; 0x1102
   19ae4:	movt	r0, #4
   19ae8:	movw	r1, #4209	; 0x1071
   19aec:	movt	r1, #4
   19af0:	movw	r3, #4217	; 0x1079
   19af4:	movt	r3, #4
   19af8:	mov	r2, #97	; 0x61
   19afc:	bl	12bf0 <__assert_fail@plt>
   19b00:	movw	r0, #4371	; 0x1113
   19b04:	movt	r0, #4
   19b08:	movw	r1, #4209	; 0x1071
   19b0c:	movt	r1, #4
   19b10:	movw	r3, #4217	; 0x1079
   19b14:	movt	r3, #4
   19b18:	mov	r2, #98	; 0x62
   19b1c:	bl	12bf0 <__assert_fail@plt>
   19b20:	movw	r0, #4392	; 0x1128
   19b24:	movt	r0, #4
   19b28:	movw	r1, #4209	; 0x1071
   19b2c:	movt	r1, #4
   19b30:	movw	r3, #4217	; 0x1079
   19b34:	movt	r3, #4
   19b38:	mov	r2, #105	; 0x69
   19b3c:	bl	12bf0 <__assert_fail@plt>
   19b40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b44:	add	fp, sp, #28
   19b48:	sub	sp, sp, #20
   19b4c:	mov	sl, r2
   19b50:	mov	r2, r1
   19b54:	mov	r5, r0
   19b58:	movw	r1, #40628	; 0x9eb4
   19b5c:	movt	r1, #1
   19b60:	mov	r0, r2
   19b64:	mov	r2, sl
   19b68:	bl	17f68 <__assert_fail@plt+0x5378>
   19b6c:	mov	r7, r0
   19b70:	movw	r0, #257	; 0x101
   19b74:	strh	r0, [r7, #16]
   19b78:	vld1.32	{d16-d17}, [r5]!
   19b7c:	add	r6, r7, #40	; 0x28
   19b80:	vst1.32	{d16-d17}, [r6]
   19b84:	ldr	r0, [r5]
   19b88:	mov	r8, #0
   19b8c:	str	r8, [r7, #40]	; 0x28
   19b90:	strh	r8, [r7, #18]
   19b94:	str	r8, [r7, #24]
   19b98:	str	r0, [r7, #56]	; 0x38
   19b9c:	mov	r9, sl
   19ba0:	b	19c04 <__assert_fail@plt+0x7014>
   19ba4:	mov	r5, #0
   19ba8:	mov	r0, #0
   19bac:	movw	r1, #4412	; 0x113c
   19bb0:	movt	r1, #4
   19bb4:	mov	r2, #5
   19bb8:	bl	12674 <dcgettext@plt>
   19bbc:	mov	r2, r0
   19bc0:	mov	r0, #0
   19bc4:	mov	r1, #0
   19bc8:	bl	127b8 <error@plt>
   19bcc:	mov	r7, r4
   19bd0:	str	r8, [sp]
   19bd4:	str	r8, [sp, #4]
   19bd8:	str	r4, [sp, #8]
   19bdc:	sub	r0, sl, r9
   19be0:	add	r2, r0, #1
   19be4:	mov	r0, r6
   19be8:	mov	r1, r9
   19bec:	mov	r3, #0
   19bf0:	bl	197a0 <__assert_fail@plt+0x6bb0>
   19bf4:	mov	r6, r0
   19bf8:	add	r5, sl, r5
   19bfc:	add	r9, r5, #1
   19c00:	add	sl, r5, #1
   19c04:	ldrb	r0, [sl]
   19c08:	cmp	r0, #37	; 0x25
   19c0c:	beq	19c7c <__assert_fail@plt+0x708c>
   19c10:	cmp	r0, #92	; 0x5c
   19c14:	beq	19c2c <__assert_fail@plt+0x703c>
   19c18:	cmp	r0, #0
   19c1c:	beq	19df0 <__assert_fail@plt+0x7200>
   19c20:	mov	r5, sl
   19c24:	add	sl, sl, #1
   19c28:	b	19c04 <__assert_fail@plt+0x7014>
   19c2c:	ldrb	r0, [sl, #1]
   19c30:	cmp	r0, #99	; 0x63
   19c34:	beq	19e1c <__assert_fail@plt+0x722c>
   19c38:	mov	r4, r7
   19c3c:	mov	r5, sl
   19c40:	ldrb	r7, [r5, #1]!
   19c44:	cmp	r7, #0
   19c48:	beq	19ba4 <__assert_fail@plt+0x6fb4>
   19c4c:	mov	r0, r7
   19c50:	bl	1a044 <__assert_fail@plt+0x7454>
   19c54:	cmp	r0, #0
   19c58:	beq	19da0 <__assert_fail@plt+0x71b0>
   19c5c:	str	r8, [sp, #16]
   19c60:	mov	r0, r5
   19c64:	add	r1, sp, #16
   19c68:	bl	1a058 <__assert_fail@plt+0x7468>
   19c6c:	strb	r0, [sl]
   19c70:	ldr	r0, [sp, #16]
   19c74:	add	r5, r0, #1
   19c78:	b	19bcc <__assert_fail@plt+0x6fdc>
   19c7c:	ldrb	r1, [sl, #1]
   19c80:	mov	r0, #1
   19c84:	cmp	r1, #37	; 0x25
   19c88:	beq	19c9c <__assert_fail@plt+0x70ac>
   19c8c:	cmp	r1, #0
   19c90:	beq	19e64 <__assert_fail@plt+0x7274>
   19c94:	mov	r0, sl
   19c98:	bl	1a170 <__assert_fail@plt+0x7580>
   19c9c:	mov	r4, r6
   19ca0:	mov	r6, r7
   19ca4:	ldrb	r8, [sl, r0]!
   19ca8:	mov	r0, r8
   19cac:	bl	1a1f8 <__assert_fail@plt+0x7608>
   19cb0:	mov	r7, r0
   19cb4:	cmp	r0, #0
   19cb8:	beq	19d08 <__assert_fail@plt+0x7118>
   19cbc:	add	r5, r7, sl
   19cc0:	ldrb	r0, [r5, #-1]!
   19cc4:	cmp	r0, #0
   19cc8:	beq	19d08 <__assert_fail@plt+0x7118>
   19ccc:	mov	r0, #0
   19cd0:	cmp	r7, #2
   19cd4:	ldrbeq	r0, [sl, #1]
   19cd8:	str	r8, [sp]
   19cdc:	str	r0, [sp, #4]
   19ce0:	mov	r7, r6
   19ce4:	str	r6, [sp, #8]
   19ce8:	sub	r2, sl, r9
   19cec:	mov	r0, r4
   19cf0:	mov	r1, r9
   19cf4:	mov	r3, #2
   19cf8:	bl	197a0 <__assert_fail@plt+0x6bb0>
   19cfc:	mov	r6, r0
   19d00:	mov	r8, #0
   19d04:	b	19bfc <__assert_fail@plt+0x700c>
   19d08:	movw	r0, #4528	; 0x11b0
   19d0c:	movt	r0, #4
   19d10:	mov	r1, r8
   19d14:	mov	r2, #4
   19d18:	bl	129b0 <memchr@plt>
   19d1c:	cmp	r0, #0
   19d20:	bne	19e8c <__assert_fail@plt+0x729c>
   19d24:	cmp	r7, #2
   19d28:	mov	r8, #0
   19d2c:	mov	r7, r6
   19d30:	bne	19d48 <__assert_fail@plt+0x7158>
   19d34:	ldrb	r0, [sl, #1]
   19d38:	cmp	r0, #0
   19d3c:	movw	r1, #4594	; 0x11f2
   19d40:	movt	r1, #4
   19d44:	beq	19d50 <__assert_fail@plt+0x7160>
   19d48:	movw	r1, #4667	; 0x123b
   19d4c:	movt	r1, #4
   19d50:	mov	r0, #0
   19d54:	mov	r2, #5
   19d58:	bl	12674 <dcgettext@plt>
   19d5c:	mov	r2, r0
   19d60:	mov	r5, sl
   19d64:	ldrb	r3, [r5], -r9
   19d68:	mov	r0, #0
   19d6c:	mov	r1, #0
   19d70:	bl	127b8 <error@plt>
   19d74:	str	r8, [sp]
   19d78:	str	r8, [sp, #4]
   19d7c:	str	r7, [sp, #8]
   19d80:	add	r2, r5, #1
   19d84:	mov	r0, r4
   19d88:	mov	r1, r9
   19d8c:	mov	r3, #0
   19d90:	bl	197a0 <__assert_fail@plt+0x6bb0>
   19d94:	mov	r6, r0
   19d98:	mov	r5, sl
   19d9c:	b	19bfc <__assert_fail@plt+0x700c>
   19da0:	mov	r0, r7
   19da4:	bl	1a0ac <__assert_fail@plt+0x74bc>
   19da8:	tst	r0, #255	; 0xff
   19dac:	beq	19dbc <__assert_fail@plt+0x71cc>
   19db0:	strb	r0, [sl]
   19db4:	mov	r5, #1
   19db8:	b	19bcc <__assert_fail@plt+0x6fdc>
   19dbc:	mov	r0, #0
   19dc0:	movw	r1, #4459	; 0x116b
   19dc4:	movt	r1, #4
   19dc8:	mov	r2, #5
   19dcc:	bl	12674 <dcgettext@plt>
   19dd0:	mov	r2, r0
   19dd4:	ldrb	r3, [r5]
   19dd8:	mov	r0, #0
   19ddc:	mov	r1, #0
   19de0:	bl	127b8 <error@plt>
   19de4:	mov	r7, r4
   19de8:	add	sl, r5, #1
   19dec:	b	19c04 <__assert_fail@plt+0x7014>
   19df0:	cmp	sl, r9
   19df4:	bls	19e58 <__assert_fail@plt+0x7268>
   19df8:	mov	r0, #0
   19dfc:	str	r0, [sp]
   19e00:	stmib	sp, {r0, r7}
   19e04:	sub	r2, sl, r9
   19e08:	mov	r0, r6
   19e0c:	mov	r1, r9
   19e10:	mov	r3, #0
   19e14:	bl	197a0 <__assert_fail@plt+0x6bb0>
   19e18:	b	19e58 <__assert_fail@plt+0x7268>
   19e1c:	mov	r0, #0
   19e20:	str	r0, [sp]
   19e24:	stmib	sp, {r0, r7}
   19e28:	sub	r2, sl, r9
   19e2c:	mov	r0, r6
   19e30:	mov	r1, r9
   19e34:	mov	r3, #1
   19e38:	bl	197a0 <__assert_fail@plt+0x6bb0>
   19e3c:	ldrb	r0, [r7, #18]
   19e40:	cmp	r0, #0
   19e44:	beq	19e58 <__assert_fail@plt+0x7268>
   19e48:	ldr	r0, [r7, #24]
   19e4c:	cmp	r0, #2
   19e50:	movls	r0, #3
   19e54:	strls	r0, [r7, #24]
   19e58:	mov	r0, #1
   19e5c:	sub	sp, fp, #28
   19e60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e64:	movw	r1, #4494	; 0x118e
   19e68:	movt	r1, #4
   19e6c:	mov	r0, #0
   19e70:	mov	r2, #5
   19e74:	bl	12674 <dcgettext@plt>
   19e78:	mov	r2, r0
   19e7c:	mov	r0, #1
   19e80:	mov	r1, #0
   19e84:	mov	r3, sl
   19e88:	bl	127b8 <error@plt>
   19e8c:	movw	r1, #4532	; 0x11b4
   19e90:	movt	r1, #4
   19e94:	mov	r0, #0
   19e98:	mov	r2, #5
   19e9c:	bl	12674 <dcgettext@plt>
   19ea0:	mov	r2, r0
   19ea4:	ldrb	r3, [sl]
   19ea8:	mov	r0, #1
   19eac:	mov	r1, #0
   19eb0:	bl	127b8 <error@plt>
   19eb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19eb8:	add	fp, sp, #28
   19ebc:	sub	sp, sp, #12
   19ec0:	mov	r4, r2
   19ec4:	ldr	r7, [r4, #40]!	; 0x28
   19ec8:	cmp	r7, #0
   19ecc:	beq	1a018 <__assert_fail@plt+0x7428>
   19ed0:	mov	r5, r1
   19ed4:	mov	sl, r0
   19ed8:	add	r8, sp, #4
   19edc:	add	r9, r8, #4
   19ee0:	b	19f04 <__assert_fail@plt+0x7314>
   19ee4:	mov	r0, r4
   19ee8:	mov	r1, r7
   19eec:	mov	r2, sl
   19ef0:	mov	r3, r5
   19ef4:	bl	1a520 <__assert_fail@plt+0x7930>
   19ef8:	ldr	r7, [r7, #16]
   19efc:	cmp	r7, #0
   19f00:	beq	1a018 <__assert_fail@plt+0x7428>
   19f04:	ldr	r0, [r7]
   19f08:	cmp	r0, #2
   19f0c:	bne	19ee4 <__assert_fail@plt+0x72f4>
   19f10:	ldrb	r0, [r7, #5]
   19f14:	cmp	r0, #0
   19f18:	beq	19ee4 <__assert_fail@plt+0x72f4>
   19f1c:	ldrb	r0, [r7, #4]
   19f20:	sub	r0, r0, #65	; 0x41
   19f24:	cmp	r0, #19
   19f28:	bhi	1a024 <__assert_fail@plt+0x7434>
   19f2c:	add	r1, pc, #0
   19f30:	ldr	pc, [r1, r0, lsl #2]
   19f34:	andeq	r9, r1, r4, lsl #31
   19f38:	andeq	r9, r1, r4, lsr #31
   19f3c:	andeq	r9, r1, r4, ror #31
   19f40:	andeq	sl, r1, r4, lsr #32
   19f44:	andeq	sl, r1, r4, lsr #32
   19f48:	andeq	sl, r1, r4, lsr #32
   19f4c:	andeq	sl, r1, r4, lsr #32
   19f50:	andeq	sl, r1, r4, lsr #32
   19f54:	andeq	sl, r1, r4, lsr #32
   19f58:	andeq	sl, r1, r4, lsr #32
   19f5c:	andeq	sl, r1, r4, lsr #32
   19f60:	andeq	sl, r1, r4, lsr #32
   19f64:	andeq	sl, r1, r4, lsr #32
   19f68:	andeq	sl, r1, r4, lsr #32
   19f6c:	andeq	sl, r1, r4, lsr #32
   19f70:	andeq	sl, r1, r4, lsr #32
   19f74:	andeq	sl, r1, r4, lsr #32
   19f78:	andeq	sl, r1, r4, lsr #32
   19f7c:	andeq	sl, r1, r4, lsr #32
   19f80:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   19f84:	mov	r0, r8
   19f88:	mov	r1, r5
   19f8c:	bl	2b0e4 <__assert_fail@plt+0x184f4>
   19f90:	b	19ff0 <__assert_fail@plt+0x7400>
   19f94:	mov	r0, r8
   19f98:	mov	r1, r5
   19f9c:	bl	2b0fc <__assert_fail@plt+0x1850c>
   19fa0:	b	19ff0 <__assert_fail@plt+0x7400>
   19fa4:	mov	r0, r8
   19fa8:	mov	r1, r5
   19fac:	bl	2b108 <__assert_fail@plt+0x18518>
   19fb0:	ldmib	sp, {r0, r1}
   19fb4:	ldrb	r2, [r7, #5]
   19fb8:	cmp	r2, #64	; 0x40
   19fbc:	beq	19ff8 <__assert_fail@plt+0x7408>
   19fc0:	ldr	r6, [r7, #8]
   19fc4:	cmp	r1, #0
   19fc8:	bpl	19ffc <__assert_fail@plt+0x740c>
   19fcc:	mov	r0, r4
   19fd0:	mov	r1, r6
   19fd4:	movw	r2, #2407	; 0x967
   19fd8:	movt	r2, #4
   19fdc:	bl	1a24c <__assert_fail@plt+0x765c>
   19fe0:	b	19ef8 <__assert_fail@plt+0x7308>
   19fe4:	mov	r0, r8
   19fe8:	mov	r1, r5
   19fec:	bl	2b0f0 <__assert_fail@plt+0x18500>
   19ff0:	ldr	r1, [r9]
   19ff4:	ldr	r0, [r8]
   19ff8:	ldr	r6, [r7, #8]
   19ffc:	ldrb	r2, [r7, #5]
   1a000:	bl	1a2a0 <__assert_fail@plt+0x76b0>
   1a004:	mov	r2, r0
   1a008:	mov	r0, r4
   1a00c:	mov	r1, r6
   1a010:	bl	1a24c <__assert_fail@plt+0x765c>
   1a014:	b	19ef8 <__assert_fail@plt+0x7308>
   1a018:	mov	r0, #1
   1a01c:	sub	sp, fp, #28
   1a020:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a024:	movw	r0, #65169	; 0xfe91
   1a028:	movt	r0, #3
   1a02c:	movw	r1, #4209	; 0x1071
   1a030:	movt	r1, #4
   1a034:	movw	r3, #4713	; 0x1269
   1a038:	movt	r3, #4
   1a03c:	movw	r2, #1304	; 0x518
   1a040:	bl	12bf0 <__assert_fail@plt>
   1a044:	and	r0, r0, #248	; 0xf8
   1a048:	sub	r0, r0, #48	; 0x30
   1a04c:	clz	r0, r0
   1a050:	lsr	r0, r0, #5
   1a054:	bx	lr
   1a058:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a05c:	add	fp, sp, #24
   1a060:	mov	r8, r1
   1a064:	mov	r5, r0
   1a068:	mov	r4, #0
   1a06c:	mov	r7, #0
   1a070:	ldrb	r6, [r5, r4]
   1a074:	mov	r0, r6
   1a078:	bl	1a044 <__assert_fail@plt+0x7454>
   1a07c:	cmp	r0, #0
   1a080:	beq	1a09c <__assert_fail@plt+0x74ac>
   1a084:	add	r0, r6, r7, lsl #3
   1a088:	sub	r7, r0, #48	; 0x30
   1a08c:	add	r4, r4, #1
   1a090:	cmp	r4, #3
   1a094:	bne	1a070 <__assert_fail@plt+0x7480>
   1a098:	mov	r4, #3
   1a09c:	sub	r0, r4, #1
   1a0a0:	str	r0, [r8]
   1a0a4:	uxtb	r0, r7
   1a0a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a0ac:	sub	r1, r0, #92	; 0x5c
   1a0b0:	mov	r0, #0
   1a0b4:	cmp	r1, #26
   1a0b8:	bxhi	lr
   1a0bc:	add	r2, pc, #0
   1a0c0:	ldr	pc, [r2, r1, lsl #2]
   1a0c4:	andeq	sl, r1, r0, lsr r1
   1a0c8:	andeq	sl, r1, r4, lsr r1
   1a0cc:	andeq	sl, r1, r4, lsr r1
   1a0d0:	andeq	sl, r1, r4, lsr r1
   1a0d4:	andeq	sl, r1, r4, lsr r1
   1a0d8:	andeq	sl, r1, r8, lsr r1
   1a0dc:	andeq	sl, r1, r0, asr #2
   1a0e0:	andeq	sl, r1, r4, lsr r1
   1a0e4:	andeq	sl, r1, r4, lsr r1
   1a0e8:	andeq	sl, r1, r4, lsr r1
   1a0ec:	andeq	sl, r1, r8, asr #2
   1a0f0:	andeq	sl, r1, r4, lsr r1
   1a0f4:	andeq	sl, r1, r4, lsr r1
   1a0f8:	andeq	sl, r1, r4, lsr r1
   1a0fc:	andeq	sl, r1, r4, lsr r1
   1a100:	andeq	sl, r1, r4, lsr r1
   1a104:	andeq	sl, r1, r4, lsr r1
   1a108:	andeq	sl, r1, r4, lsr r1
   1a10c:	andeq	sl, r1, r0, asr r1
   1a110:	andeq	sl, r1, r4, lsr r1
   1a114:	andeq	sl, r1, r4, lsr r1
   1a118:	andeq	sl, r1, r4, lsr r1
   1a11c:	andeq	sl, r1, r8, asr r1
   1a120:	andeq	sl, r1, r4, lsr r1
   1a124:	andeq	sl, r1, r0, ror #2
   1a128:	andeq	sl, r1, r4, lsr r1
   1a12c:	andeq	sl, r1, r8, ror #2
   1a130:	mov	r0, #92	; 0x5c
   1a134:	bx	lr
   1a138:	mov	r0, #7
   1a13c:	bx	lr
   1a140:	mov	r0, #8
   1a144:	bx	lr
   1a148:	mov	r0, #12
   1a14c:	bx	lr
   1a150:	mov	r0, #10
   1a154:	bx	lr
   1a158:	mov	r0, #13
   1a15c:	bx	lr
   1a160:	mov	r0, #9
   1a164:	bx	lr
   1a168:	mov	r0, #11
   1a16c:	bx	lr
   1a170:	push	{r4, r5, r6, r7, fp, lr}
   1a174:	add	fp, sp, #16
   1a178:	add	r6, r0, #1
   1a17c:	mov	r7, #0
   1a180:	movw	r5, #4781	; 0x12ad
   1a184:	movt	r5, #4
   1a188:	mov	r4, r7
   1a18c:	ldrb	r1, [r6, r7]
   1a190:	cmp	r1, #0
   1a194:	beq	1a1b0 <__assert_fail@plt+0x75c0>
   1a198:	add	r7, r4, #1
   1a19c:	mov	r0, r5
   1a1a0:	mov	r2, #5
   1a1a4:	bl	129b0 <memchr@plt>
   1a1a8:	cmp	r0, #0
   1a1ac:	bne	1a188 <__assert_fail@plt+0x7598>
   1a1b0:	bl	1286c <__ctype_b_loc@plt>
   1a1b4:	ldr	r0, [r0]
   1a1b8:	ldrb	r1, [r6, r4]
   1a1bc:	add	r2, r0, r1, lsl #1
   1a1c0:	ldrb	r2, [r2, #1]
   1a1c4:	add	r4, r4, #1
   1a1c8:	tst	r2, #8
   1a1cc:	bne	1a1b8 <__assert_fail@plt+0x75c8>
   1a1d0:	cmp	r1, #46	; 0x2e
   1a1d4:	bne	1a1f0 <__assert_fail@plt+0x7600>
   1a1d8:	ldrb	r1, [r6, r4]
   1a1dc:	add	r1, r0, r1, lsl #1
   1a1e0:	ldrb	r1, [r1, #1]
   1a1e4:	add	r4, r4, #1
   1a1e8:	tst	r1, #8
   1a1ec:	bne	1a1d8 <__assert_fail@plt+0x75e8>
   1a1f0:	mov	r0, r4
   1a1f4:	pop	{r4, r5, r6, r7, fp, pc}
   1a1f8:	push	{r4, sl, fp, lr}
   1a1fc:	add	fp, sp, #8
   1a200:	mov	r4, r0
   1a204:	movw	r0, #4786	; 0x12b2
   1a208:	movt	r0, #4
   1a20c:	mov	r1, r4
   1a210:	mov	r2, #29
   1a214:	bl	129b0 <memchr@plt>
   1a218:	mov	r1, r0
   1a21c:	mov	r0, #1
   1a220:	cmp	r1, #0
   1a224:	popne	{r4, sl, fp, pc}
   1a228:	movw	r0, #4815	; 0x12cf
   1a22c:	movt	r0, #4
   1a230:	mov	r1, r4
   1a234:	mov	r2, #5
   1a238:	bl	129b0 <memchr@plt>
   1a23c:	cmp	r0, #0
   1a240:	movwne	r0, #1
   1a244:	lsl	r0, r0, #1
   1a248:	pop	{r4, sl, fp, pc}
   1a24c:	sub	sp, sp, #8
   1a250:	push	{r4, sl, fp, lr}
   1a254:	add	fp, sp, #8
   1a258:	sub	sp, sp, #8
   1a25c:	mov	r4, r0
   1a260:	str	r2, [fp, #8]
   1a264:	str	r3, [fp, #12]
   1a268:	add	r2, fp, #8
   1a26c:	str	r2, [sp, #4]
   1a270:	ldr	r0, [r0, #4]
   1a274:	bl	12a58 <vfprintf@plt>
   1a278:	cmn	r0, #1
   1a27c:	bgt	1a290 <__assert_fail@plt+0x76a0>
   1a280:	bl	12908 <__errno_location@plt>
   1a284:	ldr	r0, [r0]
   1a288:	ldr	r1, [r4, #8]
   1a28c:	bl	187f4 <__assert_fail@plt+0x5c04>
   1a290:	sub	sp, fp, #8
   1a294:	pop	{r4, sl, fp, lr}
   1a298:	add	sp, sp, #8
   1a29c:	bx	lr
   1a2a0:	push	{r4, r5, r6, r7, fp, lr}
   1a2a4:	add	fp, sp, #16
   1a2a8:	sub	sp, sp, #72	; 0x48
   1a2ac:	mov	r5, r2
   1a2b0:	mov	r3, r1
   1a2b4:	str	r1, [fp, #-20]	; 0xffffffec
   1a2b8:	str	r0, [fp, #-24]	; 0xffffffe8
   1a2bc:	cmp	r2, #43	; 0x2b
   1a2c0:	bne	1a2e4 <__assert_fail@plt+0x76f4>
   1a2c4:	movw	r0, #5464	; 0x1558
   1a2c8:	movt	r0, #4
   1a2cc:	vldr	d16, [r0]
   1a2d0:	movw	r0, #9515	; 0x252b
   1a2d4:	movt	r0, #84	; 0x54
   1a2d8:	str	r0, [sp, #24]
   1a2dc:	vstr	d16, [sp, #16]
   1a2e0:	b	1a318 <__assert_fail@plt+0x7728>
   1a2e4:	mov	r6, #0
   1a2e8:	strb	r6, [sp, #18]
   1a2ec:	strb	r5, [sp, #17]
   1a2f0:	mov	r0, #37	; 0x25
   1a2f4:	strb	r0, [sp, #16]
   1a2f8:	sub	r0, r5, #64	; 0x40
   1a2fc:	cmp	r0, #24
   1a300:	bhi	1a378 <__assert_fail@plt+0x7788>
   1a304:	mov	r1, #1
   1a308:	movw	r2, #1
   1a30c:	movt	r2, #280	; 0x118
   1a310:	tst	r2, r1, lsl r0
   1a314:	beq	1a378 <__assert_fail@plt+0x7788>
   1a318:	add	r0, sp, #32
   1a31c:	movw	r2, #4820	; 0x12d4
   1a320:	movt	r2, #4
   1a324:	mov	r1, #32
   1a328:	bl	12920 <snprintf@plt>
   1a32c:	cmp	r0, #32
   1a330:	bge	1a480 <__assert_fail@plt+0x7890>
   1a334:	mov	r4, r0
   1a338:	mov	r6, #1
   1a33c:	cmp	r5, #64	; 0x40
   1a340:	beq	1a388 <__assert_fail@plt+0x7798>
   1a344:	sub	r0, fp, #24
   1a348:	bl	12848 <localtime@plt>
   1a34c:	cmp	r0, #0
   1a350:	beq	1a388 <__assert_fail@plt+0x7798>
   1a354:	mov	r1, r0
   1a358:	add	r0, sp, #16
   1a35c:	add	r2, sp, #32
   1a360:	mov	r3, r4
   1a364:	bl	1ace4 <__assert_fail@plt+0x80f4>
   1a368:	mov	r5, r0
   1a36c:	cmp	r0, #0
   1a370:	bne	1a474 <__assert_fail@plt+0x7884>
   1a374:	b	1a388 <__assert_fail@plt+0x7798>
   1a378:	strb	r6, [sp, #32]
   1a37c:	mov	r4, #0
   1a380:	cmp	r5, #64	; 0x40
   1a384:	bne	1a344 <__assert_fail@plt+0x7754>
   1a388:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a38c:	mov	r0, #1
   1a390:	mov	r1, #0
   1a394:	stm	sp, {r0, r1}
   1a398:	str	r0, [sp, #8]
   1a39c:	str	r1, [sp, #12]
   1a3a0:	rsbs	r0, r2, #0
   1a3a4:	sbc	r1, r1, r2, asr #31
   1a3a8:	asr	r3, r2, #31
   1a3ac:	cmp	r3, #0
   1a3b0:	movpl	r0, r2
   1a3b4:	movpl	r1, r3
   1a3b8:	movw	r7, #21944	; 0x55b8
   1a3bc:	movt	r7, #5
   1a3c0:	add	r2, r7, #1
   1a3c4:	mov	r3, #0
   1a3c8:	bl	23240 <__assert_fail@plt+0x10650>
   1a3cc:	cmp	r0, r7
   1a3d0:	bls	1a4a0 <__assert_fail@plt+0x78b0>
   1a3d4:	mov	r5, r0
   1a3d8:	movw	r0, #791	; 0x317
   1a3dc:	add	r0, r7, r0
   1a3e0:	cmp	r5, r0
   1a3e4:	bcs	1a4c0 <__assert_fail@plt+0x78d0>
   1a3e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1a3ec:	cmn	r0, #1
   1a3f0:	movle	r0, #45	; 0x2d
   1a3f4:	strble	r0, [r5, #-1]!
   1a3f8:	cmp	r6, #0
   1a3fc:	beq	1a474 <__assert_fail@plt+0x7884>
   1a400:	sub	r6, r5, r7
   1a404:	mov	r0, r5
   1a408:	bl	128c0 <strlen@plt>
   1a40c:	add	r0, r0, r6
   1a410:	movw	r1, #791	; 0x317
   1a414:	cmp	r0, r1
   1a418:	bcs	1a4e0 <__assert_fail@plt+0x78f0>
   1a41c:	movw	r1, #790	; 0x316
   1a420:	sub	r7, r1, r0
   1a424:	add	r6, sp, #32
   1a428:	mov	r0, r6
   1a42c:	bl	128c0 <strlen@plt>
   1a430:	cmp	r0, r7
   1a434:	bcc	1a458 <__assert_fail@plt+0x7868>
   1a438:	str	r7, [sp]
   1a43c:	str	r6, [sp, #4]
   1a440:	movw	r2, #4945	; 0x1351
   1a444:	movt	r2, #4
   1a448:	mov	r0, #0
   1a44c:	mov	r1, #0
   1a450:	mov	r3, r4
   1a454:	bl	127b8 <error@plt>
   1a458:	add	r0, sp, #32
   1a45c:	bl	128c0 <strlen@plt>
   1a460:	cmp	r0, r7
   1a464:	bcs	1a500 <__assert_fail@plt+0x7910>
   1a468:	add	r1, sp, #32
   1a46c:	mov	r0, r5
   1a470:	bl	12734 <strcat@plt>
   1a474:	mov	r0, r5
   1a478:	sub	sp, fp, #16
   1a47c:	pop	{r4, r5, r6, r7, fp, pc}
   1a480:	movw	r0, #4828	; 0x12dc
   1a484:	movt	r0, #4
   1a488:	movw	r1, #4209	; 0x1071
   1a48c:	movt	r1, #4
   1a490:	movw	r3, #4854	; 0x12f6
   1a494:	movt	r3, #4
   1a498:	movw	r2, #665	; 0x299
   1a49c:	bl	12bf0 <__assert_fail@plt>
   1a4a0:	movw	r0, #4894	; 0x131e
   1a4a4:	movt	r0, #4
   1a4a8:	movw	r1, #4209	; 0x1071
   1a4ac:	movt	r1, #4
   1a4b0:	movw	r3, #4854	; 0x12f6
   1a4b4:	movt	r3, #4
   1a4b8:	movw	r2, #697	; 0x2b9
   1a4bc:	bl	12bf0 <__assert_fail@plt>
   1a4c0:	movw	r0, #4902	; 0x1326
   1a4c4:	movt	r0, #4
   1a4c8:	movw	r1, #4209	; 0x1071
   1a4cc:	movt	r1, #4
   1a4d0:	movw	r3, #4854	; 0x12f6
   1a4d4:	movt	r3, #4
   1a4d8:	movw	r2, #698	; 0x2ba
   1a4dc:	bl	12bf0 <__assert_fail@plt>
   1a4e0:	movw	r0, #4927	; 0x133f
   1a4e4:	movt	r0, #4
   1a4e8:	movw	r1, #4209	; 0x1071
   1a4ec:	movt	r1, #4
   1a4f0:	movw	r3, #4854	; 0x12f6
   1a4f4:	movt	r3, #4
   1a4f8:	movw	r2, #711	; 0x2c7
   1a4fc:	bl	12bf0 <__assert_fail@plt>
   1a500:	movw	r0, #4991	; 0x137f
   1a504:	movt	r0, #4
   1a508:	movw	r1, #4209	; 0x1071
   1a50c:	movt	r1, #4
   1a510:	movw	r3, #4854	; 0x12f6
   1a514:	movt	r3, #4
   1a518:	mov	r2, #720	; 0x2d0
   1a51c:	bl	12bf0 <__assert_fail@plt>
   1a520:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a524:	add	fp, sp, #24
   1a528:	sub	sp, sp, #696	; 0x2b8
   1a52c:	mov	r5, r1
   1a530:	mov	r4, r0
   1a534:	ldr	r0, [r1]
   1a538:	cmp	r0, #2
   1a53c:	beq	1a588 <__assert_fail@plt+0x7998>
   1a540:	cmp	r0, #1
   1a544:	beq	1a568 <__assert_fail@plt+0x7978>
   1a548:	cmp	r0, #0
   1a54c:	bne	1a580 <__assert_fail@plt+0x7990>
   1a550:	ldr	r0, [r5, #8]
   1a554:	ldr	r1, [r5, #12]
   1a558:	mov	r2, r4
   1a55c:	bl	1b018 <__assert_fail@plt+0x8428>
   1a560:	sub	sp, fp, #24
   1a564:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a568:	ldr	r0, [r5, #8]
   1a56c:	ldr	r1, [r5, #12]
   1a570:	mov	r2, r4
   1a574:	bl	1b018 <__assert_fail@plt+0x8428>
   1a578:	mov	r0, r4
   1a57c:	bl	1b054 <__assert_fail@plt+0x8464>
   1a580:	sub	sp, fp, #24
   1a584:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a588:	ldrb	r1, [r5, #4]
   1a58c:	cmp	r1, #121	; 0x79
   1a590:	bhi	1a580 <__assert_fail@plt+0x7990>
   1a594:	mov	r7, r3
   1a598:	mov	r6, r2
   1a59c:	add	r0, r3, #64	; 0x40
   1a5a0:	add	r2, pc, #0
   1a5a4:	ldr	pc, [r2, r1, lsl #2]
   1a5a8:			; <UNDEFINED> instruction: 0x0001acb8
   1a5ac:	andeq	sl, r1, r0, lsl #11
   1a5b0:	andeq	sl, r1, r0, lsl #11
   1a5b4:	andeq	sl, r1, r0, lsl #11
   1a5b8:	andeq	sl, r1, r0, lsl #11
   1a5bc:	andeq	sl, r1, r0, lsl #11
   1a5c0:	andeq	sl, r1, r0, lsl #11
   1a5c4:	andeq	sl, r1, r0, lsl #11
   1a5c8:	andeq	sl, r1, r0, lsl #11
   1a5cc:	andeq	sl, r1, r0, lsl #11
   1a5d0:	andeq	sl, r1, r0, lsl #11
   1a5d4:	andeq	sl, r1, r0, lsl #11
   1a5d8:	andeq	sl, r1, r0, lsl #11
   1a5dc:	andeq	sl, r1, r0, lsl #11
   1a5e0:	andeq	sl, r1, r0, lsl #11
   1a5e4:	andeq	sl, r1, r0, lsl #11
   1a5e8:	andeq	sl, r1, r0, lsl #11
   1a5ec:	andeq	sl, r1, r0, lsl #11
   1a5f0:	andeq	sl, r1, r0, lsl #11
   1a5f4:	andeq	sl, r1, r0, lsl #11
   1a5f8:	andeq	sl, r1, r0, lsl #11
   1a5fc:	andeq	sl, r1, r0, lsl #11
   1a600:	andeq	sl, r1, r0, lsl #11
   1a604:	andeq	sl, r1, r0, lsl #11
   1a608:	andeq	sl, r1, r0, lsl #11
   1a60c:	andeq	sl, r1, r0, lsl #11
   1a610:	andeq	sl, r1, r0, lsl #11
   1a614:	andeq	sl, r1, r0, lsl #11
   1a618:	andeq	sl, r1, r0, lsl #11
   1a61c:	andeq	sl, r1, r0, lsl #11
   1a620:	andeq	sl, r1, r0, lsl #11
   1a624:	andeq	sl, r1, r0, lsl #11
   1a628:	andeq	sl, r1, r0, lsl #11
   1a62c:	andeq	sl, r1, r0, lsl #11
   1a630:	andeq	sl, r1, r0, lsl #11
   1a634:	andeq	sl, r1, r0, lsl #11
   1a638:	andeq	sl, r1, r0, lsl #11
   1a63c:	andeq	sl, r1, r0, asr r5
   1a640:	andeq	sl, r1, r0, lsl #11
   1a644:	andeq	sl, r1, r0, lsl #11
   1a648:	andeq	sl, r1, r0, lsl #11
   1a64c:	andeq	sl, r1, r0, lsl #11
   1a650:	andeq	sl, r1, r0, lsl #11
   1a654:	andeq	sl, r1, r0, lsl #11
   1a658:	andeq	sl, r1, r0, lsl #11
   1a65c:	andeq	sl, r1, r0, lsl #11
   1a660:	andeq	sl, r1, r0, lsl #11
   1a664:	andeq	sl, r1, r0, lsl #11
   1a668:	andeq	sl, r1, r0, lsl #11
   1a66c:	andeq	sl, r1, r0, lsl #11
   1a670:	andeq	sl, r1, r0, lsl #11
   1a674:	andeq	sl, r1, r0, lsl #11
   1a678:	andeq	sl, r1, r0, lsl #11
   1a67c:	andeq	sl, r1, r0, lsl #11
   1a680:	andeq	sl, r1, r0, lsl #11
   1a684:	andeq	sl, r1, r0, lsl #11
   1a688:	andeq	sl, r1, r0, lsl #11
   1a68c:	andeq	sl, r1, r0, lsl #11
   1a690:	andeq	sl, r1, r0, lsl #11
   1a694:	andeq	sl, r1, r0, lsl #11
   1a698:	andeq	sl, r1, r0, lsl #11
   1a69c:	andeq	sl, r1, r0, lsl #11
   1a6a0:	andeq	sl, r1, r0, lsl #11
   1a6a4:	andeq	sl, r1, r0, lsl #11
   1a6a8:	andeq	sl, r1, r0, lsl #11
   1a6ac:	andeq	sl, r1, r0, lsl #11
   1a6b0:	andeq	sl, r1, r0, lsl #11
   1a6b4:	andeq	sl, r1, r0, lsl #11
   1a6b8:	muleq	r1, r0, r7
   1a6bc:	andeq	sl, r1, r0, lsl #11
   1a6c0:	andeq	sl, r1, r8, lsl r9
   1a6c4:	strdeq	sl, [r1], -r8
   1a6c8:	andeq	sl, r1, r8, lsr r9
   1a6cc:	andeq	sl, r1, r0, lsl #11
   1a6d0:	andeq	sl, r1, r0, lsl #11
   1a6d4:	andeq	sl, r1, r0, lsl #11
   1a6d8:	andeq	sl, r1, r0, lsl #11
   1a6dc:	andeq	sl, r1, r0, lsl #17
   1a6e0:	andeq	sl, r1, r0, lsl #11
   1a6e4:	andeq	sl, r1, r0, lsl #11
   1a6e8:	andeq	sl, r1, r4, lsl #20
   1a6ec:	andeq	sl, r1, r0, lsl #11
   1a6f0:	andeq	sl, r1, r0, lsl #11
   1a6f4:	andeq	sl, r1, r8, lsr #17
   1a6f8:	andeq	sl, r1, r0, lsl #11
   1a6fc:	andeq	sl, r1, ip, lsl fp
   1a700:	andeq	sl, r1, r0, lsl #11
   1a704:	andeq	sl, r1, r0, lsl #11
   1a708:	andeq	sl, r1, r0, lsl #11
   1a70c:	andeq	sl, r1, ip, ror r9
   1a710:	strdeq	sl, [r1], -ip
   1a714:	andeq	sl, r1, r0, lsl #11
   1a718:	andeq	sl, r1, r0, lsl #11
   1a71c:	andeq	sl, r1, r0, lsl #11
   1a720:	andeq	sl, r1, r0, lsl #11
   1a724:	andeq	sl, r1, r0, lsl #11
   1a728:	andeq	sl, r1, r0, lsl #11
   1a72c:	andeq	sl, r1, r8, asr #16
   1a730:	andeq	sl, r1, ip, lsr #20
   1a734:	andeq	sl, r1, ip, asr #17
   1a738:	andeq	sl, r1, ip, ror #17
   1a73c:	andeq	sl, r1, r0, lsl #11
   1a740:	ldrdeq	sl, [r1], -r8
   1a744:	andeq	sl, r1, r8, ror #19
   1a748:	andeq	sl, r1, ip, ror #20
   1a74c:	strdeq	sl, [r1], -r8
   1a750:	andeq	sl, r1, r0, lsl #11
   1a754:	andeq	sl, r1, r0, asr sl
   1a758:	muleq	r1, ip, r7
   1a75c:	andeq	sl, r1, r4, ror #16
   1a760:	andeq	sl, r1, r4, ror r8
   1a764:	andeq	sl, r1, r0, lsl #11
   1a768:	andeq	sl, r1, r8, ror #23
   1a76c:	andeq	sl, r1, r0, lsl #11
   1a770:	andeq	sl, r1, r0, lsl #11
   1a774:	andeq	sl, r1, r0, lsl #18
   1a778:	andeq	sl, r1, r0, ror #15
   1a77c:	andeq	sl, r1, ip, ror #21
   1a780:	andeq	sl, r1, r0, lsl #11
   1a784:	andeq	sl, r1, r0, lsl #11
   1a788:	andeq	sl, r1, r0, lsl #11
   1a78c:	andeq	sl, r1, r0, ror #22
   1a790:	ldr	r5, [r5, #8]
   1a794:	ldrd	r0, [r7]
   1a798:	b	1a90c <__assert_fail@plt+0x7d1c>
   1a79c:	ldr	r0, [r7, #16]
   1a7a0:	and	r0, r0, #61440	; 0xf000
   1a7a4:	cmp	r0, #40960	; 0xa000
   1a7a8:	bne	1ac2c <__assert_fail@plt+0x803c>
   1a7ac:	movw	r8, #24160	; 0x5e60
   1a7b0:	movt	r8, #5
   1a7b4:	ldr	r1, [r8, #12]
   1a7b8:	ldr	r0, [r8, #16]
   1a7bc:	bl	219d4 <__assert_fail@plt+0xede4>
   1a7c0:	cmp	r0, #0
   1a7c4:	beq	1ac14 <__assert_fail@plt+0x8024>
   1a7c8:	mov	r7, r0
   1a7cc:	ldr	r1, [r5, #8]
   1a7d0:	mov	r0, r4
   1a7d4:	mov	r2, r7
   1a7d8:	bl	1b2a8 <__assert_fail@plt+0x86b8>
   1a7dc:	b	1ac44 <__assert_fail@plt+0x8054>
   1a7e0:	ldr	r5, [r5, #8]
   1a7e4:	add	r0, sp, #16
   1a7e8:	mov	r1, r7
   1a7ec:	bl	2b0fc <__assert_fail@plt+0x1850c>
   1a7f0:	ldr	r0, [sp, #16]
   1a7f4:	ldr	r1, [sp, #20]
   1a7f8:	b	1a8e4 <__assert_fail@plt+0x7cf4>
   1a7fc:	movw	r0, #24204	; 0x5e8c
   1a800:	movt	r0, #5
   1a804:	ldr	r3, [r0, #64]	; 0x40
   1a808:	movw	r7, #24160	; 0x5e60
   1a80c:	movt	r7, #5
   1a810:	ldr	r1, [r7, #12]
   1a814:	ldr	r0, [r7, #16]
   1a818:	add	r2, sp, #40	; 0x28
   1a81c:	blx	r3
   1a820:	ldr	r1, [r5, #8]
   1a824:	cmn	r0, #1
   1a828:	ble	1ab80 <__assert_fail@plt+0x7f90>
   1a82c:	ldr	r2, [sp, #40]	; 0x28
   1a830:	mov	r0, r4
   1a834:	bl	1a24c <__assert_fail@plt+0x765c>
   1a838:	ldr	r0, [sp, #40]	; 0x28
   1a83c:	bl	12b00 <freecon@plt>
   1a840:	sub	sp, fp, #24
   1a844:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a848:	ldr	r5, [r5, #8]
   1a84c:	add	r0, sp, #32
   1a850:	mov	r1, r7
   1a854:	bl	2b0e4 <__assert_fail@plt+0x184f4>
   1a858:	ldr	r0, [sp, #32]
   1a85c:	ldr	r1, [sp, #36]	; 0x24
   1a860:	b	1a8e4 <__assert_fail@plt+0x7cf4>
   1a864:	ldr	r1, [r5, #8]
   1a868:	ldr	r2, [r7, #16]
   1a86c:	bfc	r2, #12, #20
   1a870:	b	1ab14 <__assert_fail@plt+0x7f24>
   1a874:	ldr	r5, [r5, #8]
   1a878:	ldr	r0, [r7, #20]
   1a87c:	b	1ab24 <__assert_fail@plt+0x7f34>
   1a880:	add	r6, sp, #40	; 0x28
   1a884:	mov	r0, r7
   1a888:	mov	r1, r6
   1a88c:	bl	22268 <__assert_fail@plt+0xf678>
   1a890:	mov	r0, #0
   1a894:	strb	r0, [sp, #50]	; 0x32
   1a898:	ldr	r1, [r5, #8]
   1a89c:	mov	r0, r4
   1a8a0:	mov	r2, r6
   1a8a4:	b	1ab54 <__assert_fail@plt+0x7f64>
   1a8a8:	ldr	r5, [r5, #8]
   1a8ac:	mov	r0, r7
   1a8b0:	bl	1b300 <__assert_fail@plt+0x8710>
   1a8b4:	vmov	r2, r3, d0
   1a8b8:	mov	r0, r4
   1a8bc:	mov	r1, r5
   1a8c0:	bl	1a24c <__assert_fail@plt+0x765c>
   1a8c4:	sub	sp, fp, #24
   1a8c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a8cc:	ldr	r5, [r5, #8]
   1a8d0:	add	r0, sp, #24
   1a8d4:	mov	r1, r7
   1a8d8:	bl	2b0f0 <__assert_fail@plt+0x18500>
   1a8dc:	ldr	r0, [sp, #24]
   1a8e0:	ldr	r1, [sp, #28]
   1a8e4:	bl	1b084 <__assert_fail@plt+0x8494>
   1a8e8:	b	1ab48 <__assert_fail@plt+0x7f58>
   1a8ec:	movw	r0, #24160	; 0x5e60
   1a8f0:	movt	r0, #5
   1a8f4:	b	1ab0c <__assert_fail@plt+0x7f1c>
   1a8f8:	add	r0, r7, #96	; 0x60
   1a8fc:	b	1a904 <__assert_fail@plt+0x7d14>
   1a900:	add	r0, r7, #48	; 0x30
   1a904:	ldr	r5, [r5, #8]
   1a908:	ldrd	r0, [r0]
   1a90c:	mov	r2, #0
   1a910:	mov	r3, #1
   1a914:	b	1aa3c <__assert_fail@plt+0x7e4c>
   1a918:	ldr	r5, [r5, #8]
   1a91c:	mov	r0, r7
   1a920:	mov	r1, r6
   1a924:	bl	1b3b8 <__assert_fail@plt+0x87c8>
   1a928:	mov	r2, r0
   1a92c:	mov	r0, r4
   1a930:	mov	r1, r5
   1a934:	b	1abf4 <__assert_fail@plt+0x8004>
   1a938:	movw	r8, #24160	; 0x5e60
   1a93c:	movt	r8, #5
   1a940:	ldr	r0, [r8, #20]
   1a944:	add	r0, r0, #1
   1a948:	bl	2b63c <__assert_fail@plt+0x18a4c>
   1a94c:	mov	r7, r0
   1a950:	ldr	r8, [r8, #20]
   1a954:	mov	r1, r6
   1a958:	mov	r2, r8
   1a95c:	bl	125f0 <memcpy@plt>
   1a960:	mov	r0, #0
   1a964:	strb	r0, [r7, r8]
   1a968:	ldr	r1, [r5, #8]
   1a96c:	mov	r0, r4
   1a970:	mov	r2, r7
   1a974:	bl	1a24c <__assert_fail@plt+0x765c>
   1a978:	b	1ac44 <__assert_fail@plt+0x8054>
   1a97c:	ldr	r0, [r7, #16]
   1a980:	and	r0, r0, #61440	; 0xf000
   1a984:	cmp	r0, #40960	; 0xa000
   1a988:	bne	1ab74 <__assert_fail@plt+0x7f84>
   1a98c:	movw	r0, #24160	; 0x5e60
   1a990:	movt	r0, #5
   1a994:	ldr	r1, [r0, #12]
   1a998:	ldr	r0, [r0, #16]
   1a99c:	add	r2, sp, #40	; 0x28
   1a9a0:	mov	r3, #0
   1a9a4:	bl	3ea34 <__assert_fail@plt+0x2be44>
   1a9a8:	cmp	r0, #0
   1a9ac:	beq	1ac54 <__assert_fail@plt+0x8064>
   1a9b0:	bl	12908 <__errno_location@plt>
   1a9b4:	mov	r7, r0
   1a9b8:	ldr	r0, [r0]
   1a9bc:	cmp	r0, #20
   1a9c0:	cmpne	r0, #2
   1a9c4:	bne	1ac60 <__assert_fail@plt+0x8070>
   1a9c8:	ldr	r1, [r5, #8]
   1a9cc:	movw	r2, #5379	; 0x1503
   1a9d0:	movt	r2, #4
   1a9d4:	b	1ab14 <__assert_fail@plt+0x7f24>
   1a9d8:	mov	r0, r6
   1a9dc:	bl	21f60 <__assert_fail@plt+0xf370>
   1a9e0:	mov	r6, r0
   1a9e4:	b	1aad4 <__assert_fail@plt+0x7ee4>
   1a9e8:	ldr	r0, [r7, #28]
   1a9ec:	bl	12bcc <getgrgid@plt>
   1a9f0:	cmp	r0, #0
   1a9f4:	bne	1aafc <__assert_fail@plt+0x7f0c>
   1a9f8:	ldr	r5, [r5, #8]
   1a9fc:	ldr	r0, [r7, #28]
   1aa00:	b	1ab24 <__assert_fail@plt+0x7f34>
   1aa04:	movw	r0, #24160	; 0x5e60
   1aa08:	movt	r0, #5
   1aa0c:	ldr	r1, [r0]
   1aa10:	cmp	r1, #1
   1aa14:	blt	1abe0 <__assert_fail@plt+0x7ff0>
   1aa18:	ldr	r0, [r0, #20]
   1aa1c:	ldrb	r0, [r6, r0]!
   1aa20:	cmp	r0, #47	; 0x2f
   1aa24:	addeq	r6, r6, #1
   1aa28:	b	1abe8 <__assert_fail@plt+0x7ff8>
   1aa2c:	ldr	r5, [r5, #8]
   1aa30:	ldrd	r0, [r0]
   1aa34:	mov	r2, #0
   1aa38:	mov	r3, #512	; 0x200
   1aa3c:	str	r3, [sp]
   1aa40:	stmib	sp, {r2, r3}
   1aa44:	str	r2, [sp, #12]
   1aa48:	add	r2, sp, #40	; 0x28
   1aa4c:	b	1ab40 <__assert_fail@plt+0x7f50>
   1aa50:	ldr	r5, [r5, #8]
   1aa54:	ldrd	r0, [r0]
   1aa58:	mov	r2, #0
   1aa5c:	mov	r3, #1024	; 0x400
   1aa60:	mov	r7, #512	; 0x200
   1aa64:	str	r7, [sp]
   1aa68:	b	1aa40 <__assert_fail@plt+0x7e50>
   1aa6c:	mov	r0, r6
   1aa70:	bl	2b9a4 <__assert_fail@plt+0x18db4>
   1aa74:	mov	r6, r0
   1aa78:	bl	128c0 <strlen@plt>
   1aa7c:	add	r0, r0, r6
   1aa80:	sub	r1, r0, #1
   1aa84:	mov	r0, r1
   1aa88:	cmp	r6, r1
   1aa8c:	bhi	1aaa0 <__assert_fail@plt+0x7eb0>
   1aa90:	mov	r1, r0
   1aa94:	ldrb	r2, [r1], #-1
   1aa98:	cmp	r2, #47	; 0x2f
   1aa9c:	beq	1aa84 <__assert_fail@plt+0x7e94>
   1aaa0:	cmp	r6, r0
   1aaa4:	bcs	1aab8 <__assert_fail@plt+0x7ec8>
   1aaa8:	ldrb	r1, [r0, #1]
   1aaac:	cmp	r1, #47	; 0x2f
   1aab0:	moveq	r1, #0
   1aab4:	strbeq	r1, [r0, #1]
   1aab8:	mov	r0, r6
   1aabc:	mov	r1, #47	; 0x2f
   1aac0:	bl	12a4c <strrchr@plt>
   1aac4:	cmp	r0, #0
   1aac8:	beq	1ac00 <__assert_fail@plt+0x8010>
   1aacc:	mov	r1, #0
   1aad0:	strb	r1, [r0]
   1aad4:	ldr	r1, [r5, #8]
   1aad8:	mov	r0, r4
   1aadc:	mov	r2, r6
   1aae0:	bl	1b2a8 <__assert_fail@plt+0x86b8>
   1aae4:	mov	r0, r6
   1aae8:	b	1ac48 <__assert_fail@plt+0x8058>
   1aaec:	ldr	r0, [r7, #24]
   1aaf0:	bl	1250c <getpwuid@plt>
   1aaf4:	cmp	r0, #0
   1aaf8:	beq	1ab1c <__assert_fail@plt+0x7f2c>
   1aafc:	ldr	r1, [r5, #8]
   1ab00:	ldr	r2, [r5, #12]
   1ab04:	mov	r3, #115	; 0x73
   1ab08:	strb	r3, [r1, r2]
   1ab0c:	ldr	r2, [r0]
   1ab10:	ldr	r1, [r5, #8]
   1ab14:	mov	r0, r4
   1ab18:	b	1ab54 <__assert_fail@plt+0x7f64>
   1ab1c:	ldr	r5, [r5, #8]
   1ab20:	ldr	r0, [r7, #24]
   1ab24:	mov	r1, #0
   1ab28:	mov	r2, #1
   1ab2c:	str	r2, [sp]
   1ab30:	stmib	sp, {r1, r2}
   1ab34:	str	r1, [sp, #12]
   1ab38:	add	r2, sp, #40	; 0x28
   1ab3c:	mov	r1, #0
   1ab40:	mov	r3, #0
   1ab44:	bl	23240 <__assert_fail@plt+0x10650>
   1ab48:	mov	r2, r0
   1ab4c:	mov	r0, r4
   1ab50:	mov	r1, r5
   1ab54:	bl	1a24c <__assert_fail@plt+0x765c>
   1ab58:	sub	sp, fp, #24
   1ab5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ab60:	ldr	r5, [r5, #8]
   1ab64:	ldr	r0, [r7, #16]
   1ab68:	and	r0, r0, #61440	; 0xf000
   1ab6c:	bl	1b390 <__assert_fail@plt+0x87a0>
   1ab70:	b	1ab48 <__assert_fail@plt+0x7f58>
   1ab74:	ldr	r5, [r5, #8]
   1ab78:	bl	1b390 <__assert_fail@plt+0x87a0>
   1ab7c:	b	1ab48 <__assert_fail@plt+0x7f58>
   1ab80:	movw	r2, #2407	; 0x967
   1ab84:	movt	r2, #4
   1ab88:	mov	r0, r4
   1ab8c:	bl	1a24c <__assert_fail@plt+0x765c>
   1ab90:	bl	12908 <__errno_location@plt>
   1ab94:	ldr	r4, [r0]
   1ab98:	movw	r1, #62145	; 0xf2c1
   1ab9c:	movt	r1, #3
   1aba0:	mov	r0, #0
   1aba4:	mov	r2, #5
   1aba8:	bl	12674 <dcgettext@plt>
   1abac:	mov	r5, r0
   1abb0:	mov	r0, #0
   1abb4:	mov	r1, r6
   1abb8:	bl	1939c <__assert_fail@plt+0x67ac>
   1abbc:	mov	r3, r0
   1abc0:	mov	r0, #0
   1abc4:	mov	r1, r4
   1abc8:	mov	r2, r5
   1abcc:	bl	127b8 <error@plt>
   1abd0:	mov	r0, #1
   1abd4:	str	r0, [r7, #28]
   1abd8:	sub	sp, fp, #24
   1abdc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1abe0:	movw	r6, #2407	; 0x967
   1abe4:	movt	r6, #4
   1abe8:	ldr	r1, [r5, #8]
   1abec:	mov	r0, r4
   1abf0:	mov	r2, r6
   1abf4:	bl	1b2a8 <__assert_fail@plt+0x86b8>
   1abf8:	sub	sp, fp, #24
   1abfc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ac00:	ldr	r1, [r5, #8]
   1ac04:	movw	r2, #64572	; 0xfc3c
   1ac08:	movt	r2, #3
   1ac0c:	mov	r0, r4
   1ac10:	b	1aae0 <__assert_fail@plt+0x7ef0>
   1ac14:	bl	12908 <__errno_location@plt>
   1ac18:	ldr	r0, [r0]
   1ac1c:	mov	r1, r6
   1ac20:	bl	18360 <__assert_fail@plt+0x5770>
   1ac24:	mov	r0, #1
   1ac28:	str	r0, [r8, #28]
   1ac2c:	ldr	r1, [r5, #8]
   1ac30:	movw	r2, #2407	; 0x967
   1ac34:	movt	r2, #4
   1ac38:	mov	r0, r4
   1ac3c:	bl	1b2a8 <__assert_fail@plt+0x86b8>
   1ac40:	mov	r7, #0
   1ac44:	mov	r0, r7
   1ac48:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   1ac4c:	sub	sp, fp, #24
   1ac50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ac54:	ldr	r5, [r5, #8]
   1ac58:	ldr	r0, [sp, #56]	; 0x38
   1ac5c:	b	1ab68 <__assert_fail@plt+0x7f78>
   1ac60:	ldr	r1, [r5, #8]
   1ac64:	cmp	r0, #40	; 0x28
   1ac68:	bne	1ac78 <__assert_fail@plt+0x8088>
   1ac6c:	movw	r2, #2764	; 0xacc
   1ac70:	movt	r2, #4
   1ac74:	b	1ab14 <__assert_fail@plt+0x7f24>
   1ac78:	movw	r2, #7282	; 0x1c72
   1ac7c:	movt	r2, #4
   1ac80:	mov	r0, r4
   1ac84:	bl	1a24c <__assert_fail@plt+0x765c>
   1ac88:	ldr	r4, [r7]
   1ac8c:	mov	r0, #0
   1ac90:	mov	r1, r6
   1ac94:	bl	1939c <__assert_fail@plt+0x67ac>
   1ac98:	mov	r3, r0
   1ac9c:	movw	r2, #19695	; 0x4cef
   1aca0:	movt	r2, #4
   1aca4:	mov	r0, #0
   1aca8:	mov	r1, r4
   1acac:	bl	127b8 <error@plt>
   1acb0:	sub	sp, fp, #24
   1acb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1acb8:	movw	r1, #4494	; 0x118e
   1acbc:	movt	r1, #4
   1acc0:	mov	r0, #0
   1acc4:	mov	r2, #5
   1acc8:	bl	12674 <dcgettext@plt>
   1accc:	mov	r2, r0
   1acd0:	movw	r3, #4813	; 0x12cd
   1acd4:	movt	r3, #4
   1acd8:	mov	r0, #1
   1acdc:	mov	r1, #0
   1ace0:	bl	127b8 <error@plt>
   1ace4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ace8:	add	fp, sp, #28
   1acec:	sub	sp, sp, #68	; 0x44
   1acf0:	mov	r9, r3
   1acf4:	str	r2, [sp, #8]
   1acf8:	mov	r7, r1
   1acfc:	mov	r4, r0
   1ad00:	bl	128c0 <strlen@plt>
   1ad04:	add	r0, r0, #2
   1ad08:	bl	2b63c <__assert_fail@plt+0x18a4c>
   1ad0c:	mov	r6, r0
   1ad10:	mov	r0, #95	; 0x5f
   1ad14:	mov	r5, r6
   1ad18:	strb	r0, [r5], #1
   1ad1c:	mov	r0, r4
   1ad20:	bl	128c0 <strlen@plt>
   1ad24:	add	r2, r0, #1
   1ad28:	mov	r0, r5
   1ad2c:	mov	r1, r4
   1ad30:	bl	125f0 <memcpy@plt>
   1ad34:	add	r0, r7, #16
   1ad38:	mov	r1, #28
   1ad3c:	mov	r2, r7
   1ad40:	vld1.32	{d16-d17}, [r2], r1
   1ad44:	add	r3, sp, #24
   1ad48:	vld1.32	{d18-d19}, [r0]
   1ad4c:	add	r0, r3, #16
   1ad50:	vld1.32	{d20-d21}, [r2]
   1ad54:	vst1.64	{d18-d19}, [r0]
   1ad58:	vst1.64	{d16-d17}, [r3], r1
   1ad5c:	vst1.32	{d20-d21}, [r3]
   1ad60:	ldr	r0, [sp, #24]
   1ad64:	mov	r1, #11
   1ad68:	cmp	r0, #10
   1ad6c:	mvngt	r1, #10
   1ad70:	add	r0, r1, r0
   1ad74:	str	r0, [sp, #24]
   1ad78:	movw	r8, #22736	; 0x58d0
   1ad7c:	movt	r8, #5
   1ad80:	ldr	r0, [r8]
   1ad84:	cmp	r0, #0
   1ad88:	movw	r4, #22740	; 0x58d4
   1ad8c:	movt	r4, #5
   1ad90:	bne	1ada8 <__assert_fail@plt+0x81b8>
   1ad94:	mov	r0, #1
   1ad98:	str	r0, [r4]
   1ad9c:	mov	r0, #1
   1ada0:	bl	2b63c <__assert_fail@plt+0x18a4c>
   1ada4:	str	r0, [r8]
   1ada8:	ldr	r1, [r4]
   1adac:	ldr	r0, [r8]
   1adb0:	mov	r2, r6
   1adb4:	mov	r3, r7
   1adb8:	bl	12830 <strftime@plt>
   1adbc:	cmp	r0, #0
   1adc0:	beq	1add4 <__assert_fail@plt+0x81e4>
   1adc4:	mov	r5, r0
   1adc8:	ldr	r0, [r4]
   1adcc:	cmp	r5, r0
   1add0:	bcc	1ae0c <__assert_fail@plt+0x821c>
   1add4:	ldr	r0, [r8]
   1add8:	mov	r1, r4
   1addc:	mov	r2, #1
   1ade0:	bl	2b700 <__assert_fail@plt+0x18b10>
   1ade4:	str	r0, [r8]
   1ade8:	ldr	r1, [r4]
   1adec:	mov	r2, r6
   1adf0:	mov	r3, r7
   1adf4:	bl	12830 <strftime@plt>
   1adf8:	mov	r5, r0
   1adfc:	ldr	r0, [r4]
   1ae00:	cmp	r5, #0
   1ae04:	bne	1adcc <__assert_fail@plt+0x81dc>
   1ae08:	b	1add4 <__assert_fail@plt+0x81e4>
   1ae0c:	mov	r0, #0
   1ae10:	str	r0, [sp, #20]
   1ae14:	str	r0, [sp, #16]
   1ae18:	str	r9, [sp, #12]
   1ae1c:	add	r0, r9, r5
   1ae20:	add	r7, r0, #1
   1ae24:	ldr	r0, [r8]
   1ae28:	mov	r1, r7
   1ae2c:	bl	2b67c <__assert_fail@plt+0x18a8c>
   1ae30:	str	r0, [r8]
   1ae34:	str	r7, [r4]
   1ae38:	mov	r0, r7
   1ae3c:	bl	2b63c <__assert_fail@plt+0x18a4c>
   1ae40:	mov	sl, r0
   1ae44:	ldr	r1, [r4]
   1ae48:	add	r3, sp, #24
   1ae4c:	mov	r2, r6
   1ae50:	bl	12830 <strftime@plt>
   1ae54:	ldr	r4, [r8]
   1ae58:	add	r2, sp, #20
   1ae5c:	add	r3, sp, #16
   1ae60:	mov	r0, r4
   1ae64:	mov	r1, sl
   1ae68:	bl	1af2c <__assert_fail@plt+0x833c>
   1ae6c:	cmp	r0, #0
   1ae70:	beq	1aeec <__assert_fail@plt+0x82fc>
   1ae74:	ldr	r9, [sp, #16]
   1ae78:	cmp	r9, #2
   1ae7c:	bne	1aeec <__assert_fail@plt+0x82fc>
   1ae80:	bl	1286c <__ctype_b_loc@plt>
   1ae84:	ldr	ip, [sp, #20]
   1ae88:	add	r2, ip, r9
   1ae8c:	mov	r1, r4
   1ae90:	ldrb	r3, [r1, r2]!
   1ae94:	ldr	r0, [r0]
   1ae98:	add	r0, r0, r3, lsl #1
   1ae9c:	ldrb	r0, [r0, #1]
   1aea0:	tst	r0, #8
   1aea4:	bne	1aeec <__assert_fail@plt+0x82fc>
   1aea8:	str	ip, [sp, #4]
   1aeac:	ldr	r3, [sp, #12]
   1aeb0:	add	r0, r2, r3
   1aeb4:	sub	r2, r5, r2
   1aeb8:	add	r2, r2, #1
   1aebc:	add	r0, r0, r2
   1aec0:	cmp	r0, r7
   1aec4:	bne	1af0c <__assert_fail@plt+0x831c>
   1aec8:	add	r0, r1, r3
   1aecc:	mov	r5, r3
   1aed0:	bl	12584 <memmove@plt>
   1aed4:	ldr	r0, [sp, #4]
   1aed8:	add	r0, r4, r0
   1aedc:	add	r0, r0, r9
   1aee0:	ldr	r1, [sp, #8]
   1aee4:	mov	r2, r5
   1aee8:	bl	125f0 <memcpy@plt>
   1aeec:	mov	r0, r6
   1aef0:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   1aef4:	mov	r0, sl
   1aef8:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   1aefc:	ldr	r0, [r8]
   1af00:	add	r0, r0, #1
   1af04:	sub	sp, fp, #28
   1af08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af0c:	movw	r0, #5019	; 0x139b
   1af10:	movt	r0, #4
   1af14:	movw	r1, #4209	; 0x1071
   1af18:	movt	r1, #4
   1af1c:	movw	r3, #5070	; 0x13ce
   1af20:	movt	r3, #4
   1af24:	movw	r2, #549	; 0x225
   1af28:	bl	12bf0 <__assert_fail@plt>
   1af2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af30:	add	fp, sp, #28
   1af34:	push	{r2}		; (str r2, [sp, #-4]!)
   1af38:	mov	r6, r1
   1af3c:	mov	r1, r0
   1af40:	ldrb	r2, [r0]
   1af44:	ldrb	r0, [r6]
   1af48:	clz	r0, r0
   1af4c:	lsr	r0, r0, #5
   1af50:	cmp	r2, #0
   1af54:	beq	1b010 <__assert_fail@plt+0x8420>
   1af58:	mov	r9, r3
   1af5c:	add	sl, r1, #1
   1af60:	mov	r5, #0
   1af64:	mov	r4, #0
   1af68:	tst	r0, #1
   1af6c:	beq	1afb0 <__assert_fail@plt+0x83c0>
   1af70:	b	1b00c <__assert_fail@plt+0x841c>
   1af74:	ldr	r0, [sp]
   1af78:	str	r5, [r0]
   1af7c:	mov	r0, #1
   1af80:	str	r0, [r9]
   1af84:	mov	r4, #1
   1af88:	ldrb	r2, [sl, r5]
   1af8c:	add	r0, r6, r5
   1af90:	ldrb	r0, [r0, #1]
   1af94:	clz	r0, r0
   1af98:	lsr	r0, r0, #5
   1af9c:	add	r5, r5, #1
   1afa0:	cmp	r2, #0
   1afa4:	beq	1b010 <__assert_fail@plt+0x8420>
   1afa8:	tst	r0, #1
   1afac:	bne	1b00c <__assert_fail@plt+0x841c>
   1afb0:	uxtb	r8, r2
   1afb4:	ldrb	r7, [r6, r5]
   1afb8:	cmp	r8, r7
   1afbc:	beq	1af88 <__assert_fail@plt+0x8398>
   1afc0:	bl	1286c <__ctype_b_loc@plt>
   1afc4:	ldr	r0, [r0]
   1afc8:	add	r1, r0, r8, lsl #1
   1afcc:	ldrb	r1, [r1, #1]
   1afd0:	tst	r1, #8
   1afd4:	addne	r0, r0, r7, lsl #1
   1afd8:	ldrbne	r0, [r0, #1]
   1afdc:	tstne	r0, #8
   1afe0:	beq	1b00c <__assert_fail@plt+0x841c>
   1afe4:	tst	r4, #1
   1afe8:	beq	1af74 <__assert_fail@plt+0x8384>
   1afec:	ldr	r0, [sp]
   1aff0:	ldr	r0, [r0]
   1aff4:	sub	r1, r5, r0
   1aff8:	ldr	r0, [r9]
   1affc:	cmp	r1, r0
   1b000:	bne	1b00c <__assert_fail@plt+0x841c>
   1b004:	add	r0, r0, #1
   1b008:	b	1af80 <__assert_fail@plt+0x8390>
   1b00c:	mov	r0, #0
   1b010:	sub	sp, fp, #28
   1b014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b018:	push	{r4, r5, fp, lr}
   1b01c:	add	fp, sp, #8
   1b020:	mov	r4, r2
   1b024:	mov	r5, r1
   1b028:	ldr	r3, [r2, #4]
   1b02c:	mov	r1, #1
   1b030:	mov	r2, r5
   1b034:	bl	12728 <fwrite@plt>
   1b038:	cmp	r0, r5
   1b03c:	popcs	{r4, r5, fp, pc}
   1b040:	bl	12908 <__errno_location@plt>
   1b044:	ldr	r0, [r0]
   1b048:	ldr	r1, [r4, #8]
   1b04c:	pop	{r4, r5, fp, lr}
   1b050:	b	187f4 <__assert_fail@plt+0x5c04>
   1b054:	push	{r4, sl, fp, lr}
   1b058:	add	fp, sp, #8
   1b05c:	mov	r4, r0
   1b060:	ldr	r0, [r0, #4]
   1b064:	bl	2ca6c <__assert_fail@plt+0x19e7c>
   1b068:	cmp	r0, #0
   1b06c:	popeq	{r4, sl, fp, pc}
   1b070:	bl	12908 <__errno_location@plt>
   1b074:	ldr	r0, [r0]
   1b078:	ldr	r1, [r4, #8]
   1b07c:	pop	{r4, sl, fp, lr}
   1b080:	b	187f4 <__assert_fail@plt+0x5c04>
   1b084:	push	{r4, r5, fp, lr}
   1b088:	add	fp, sp, #8
   1b08c:	sub	sp, sp, #40	; 0x28
   1b090:	str	r1, [fp, #-12]
   1b094:	str	r0, [fp, #-16]
   1b098:	sub	r0, fp, #16
   1b09c:	bl	12848 <localtime@plt>
   1b0a0:	cmp	r0, #0
   1b0a4:	beq	1b188 <__assert_fail@plt+0x8598>
   1b0a8:	ldr	ip, [r0, #24]
   1b0ac:	cmn	ip, #1
   1b0b0:	ble	1b1a8 <__assert_fail@plt+0x85b8>
   1b0b4:	cmp	ip, #7
   1b0b8:	bge	1b1c8 <__assert_fail@plt+0x85d8>
   1b0bc:	ldr	r2, [r0, #16]
   1b0c0:	cmn	r2, #1
   1b0c4:	ble	1b1e8 <__assert_fail@plt+0x85f8>
   1b0c8:	cmp	r2, #12
   1b0cc:	bge	1b208 <__assert_fail@plt+0x8618>
   1b0d0:	ldr	r3, [r0, #8]
   1b0d4:	cmn	r3, #1
   1b0d8:	ble	1b228 <__assert_fail@plt+0x8638>
   1b0dc:	cmp	r3, #24
   1b0e0:	bge	1b248 <__assert_fail@plt+0x8658>
   1b0e4:	ldr	r4, [r0, #4]
   1b0e8:	cmp	r4, #60	; 0x3c
   1b0ec:	bge	1b268 <__assert_fail@plt+0x8678>
   1b0f0:	ldr	r1, [r0]
   1b0f4:	cmp	r1, #62	; 0x3e
   1b0f8:	bge	1b288 <__assert_fail@plt+0x8698>
   1b0fc:	ldr	lr, [r0, #12]
   1b100:	ldr	r0, [r0, #20]
   1b104:	ldr	r5, [fp, #-12]
   1b108:	str	r5, [sp, #20]
   1b10c:	str	r1, [sp, #16]
   1b110:	str	r4, [sp, #12]
   1b114:	str	r3, [sp, #8]
   1b118:	str	lr, [sp, #4]
   1b11c:	movw	r1, #5508	; 0x1584
   1b120:	movt	r1, #4
   1b124:	ldr	r1, [r1, r2, lsl #2]
   1b128:	str	r1, [sp]
   1b12c:	movw	r1, #1900	; 0x76c
   1b130:	add	r0, r0, r1
   1b134:	str	r0, [sp, #24]
   1b138:	movw	r0, #5480	; 0x1568
   1b13c:	movt	r0, #4
   1b140:	ldr	r3, [r0, ip, lsl #2]
   1b144:	movw	r4, #22744	; 0x58d8
   1b148:	movt	r4, #5
   1b14c:	movw	r2, #5322	; 0x14ca
   1b150:	movt	r2, #4
   1b154:	mov	r0, r4
   1b158:	mov	r1, #1024	; 0x400
   1b15c:	bl	12920 <snprintf@plt>
   1b160:	cmp	r0, #1024	; 0x400
   1b164:	blt	1b19c <__assert_fail@plt+0x85ac>
   1b168:	movw	r0, #5361	; 0x14f1
   1b16c:	movt	r0, #4
   1b170:	movw	r1, #4209	; 0x1071
   1b174:	movt	r1, #4
   1b178:	movw	r3, #5164	; 0x142c
   1b17c:	movt	r3, #4
   1b180:	movw	r2, #770	; 0x302
   1b184:	bl	12bf0 <__assert_fail@plt>
   1b188:	ldr	r0, [fp, #-16]
   1b18c:	ldr	r1, [fp, #-12]
   1b190:	mov	r2, #64	; 0x40
   1b194:	bl	1a2a0 <__assert_fail@plt+0x76b0>
   1b198:	mov	r4, r0
   1b19c:	mov	r0, r4
   1b1a0:	sub	sp, fp, #8
   1b1a4:	pop	{r4, r5, fp, pc}
   1b1a8:	movw	r0, #5146	; 0x141a
   1b1ac:	movt	r0, #4
   1b1b0:	movw	r1, #4209	; 0x1071
   1b1b4:	movt	r1, #4
   1b1b8:	movw	r3, #5164	; 0x142c
   1b1bc:	movt	r3, #4
   1b1c0:	movw	r2, #749	; 0x2ed
   1b1c4:	bl	12bf0 <__assert_fail@plt>
   1b1c8:	movw	r0, #5200	; 0x1450
   1b1cc:	movt	r0, #4
   1b1d0:	movw	r1, #4209	; 0x1071
   1b1d4:	movt	r1, #4
   1b1d8:	movw	r3, #5164	; 0x142c
   1b1dc:	movt	r3, #4
   1b1e0:	movw	r2, #750	; 0x2ee
   1b1e4:	bl	12bf0 <__assert_fail@plt>
   1b1e8:	movw	r0, #5217	; 0x1461
   1b1ec:	movt	r0, #4
   1b1f0:	movw	r1, #4209	; 0x1071
   1b1f4:	movt	r1, #4
   1b1f8:	movw	r3, #5164	; 0x142c
   1b1fc:	movt	r3, #4
   1b200:	movw	r2, #751	; 0x2ef
   1b204:	bl	12bf0 <__assert_fail@plt>
   1b208:	movw	r0, #5234	; 0x1472
   1b20c:	movt	r0, #4
   1b210:	movw	r1, #4209	; 0x1071
   1b214:	movt	r1, #4
   1b218:	movw	r3, #5164	; 0x142c
   1b21c:	movt	r3, #4
   1b220:	mov	r2, #752	; 0x2f0
   1b224:	bl	12bf0 <__assert_fail@plt>
   1b228:	movw	r0, #5251	; 0x1483
   1b22c:	movt	r0, #4
   1b230:	movw	r1, #4209	; 0x1071
   1b234:	movt	r1, #4
   1b238:	movw	r3, #5164	; 0x142c
   1b23c:	movt	r3, #4
   1b240:	movw	r2, #753	; 0x2f1
   1b244:	bl	12bf0 <__assert_fail@plt>
   1b248:	movw	r0, #5269	; 0x1495
   1b24c:	movt	r0, #4
   1b250:	movw	r1, #4209	; 0x1071
   1b254:	movt	r1, #4
   1b258:	movw	r3, #5164	; 0x142c
   1b25c:	movt	r3, #4
   1b260:	movw	r2, #754	; 0x2f2
   1b264:	bl	12bf0 <__assert_fail@plt>
   1b268:	movw	r0, #5287	; 0x14a7
   1b26c:	movt	r0, #4
   1b270:	movw	r1, #4209	; 0x1071
   1b274:	movt	r1, #4
   1b278:	movw	r3, #5164	; 0x142c
   1b27c:	movt	r3, #4
   1b280:	movw	r2, #755	; 0x2f3
   1b284:	bl	12bf0 <__assert_fail@plt>
   1b288:	movw	r0, #5304	; 0x14b8
   1b28c:	movt	r0, #4
   1b290:	movw	r1, #4209	; 0x1071
   1b294:	movt	r1, #4
   1b298:	movw	r3, #5164	; 0x142c
   1b29c:	movt	r3, #4
   1b2a0:	mov	r2, #756	; 0x2f4
   1b2a4:	bl	12bf0 <__assert_fail@plt>
   1b2a8:	push	{r4, sl, fp, lr}
   1b2ac:	add	fp, sp, #8
   1b2b0:	sub	sp, sp, #8
   1b2b4:	mov	ip, r1
   1b2b8:	mov	r4, r0
   1b2bc:	ldrb	r3, [r0, #12]
   1b2c0:	ldr	r1, [r0, #16]
   1b2c4:	ldr	r0, [r0, #4]
   1b2c8:	str	r2, [sp]
   1b2cc:	mov	r2, r3
   1b2d0:	mov	r3, ip
   1b2d4:	bl	211f0 <__assert_fail@plt+0xe600>
   1b2d8:	cmn	r0, #1
   1b2dc:	subgt	sp, fp, #8
   1b2e0:	popgt	{r4, sl, fp, pc}
   1b2e4:	bl	12908 <__errno_location@plt>
   1b2e8:	ldr	r0, [r0]
   1b2ec:	ldr	r1, [r4, #8]
   1b2f0:	sub	sp, fp, #8
   1b2f4:	pop	{r4, sl, fp, lr}
   1b2f8:	b	187f4 <__assert_fail@plt+0x5c04>
   1b2fc:	nop	{0}
   1b300:	push	{r4, r5, fp, lr}
   1b304:	add	fp, sp, #8
   1b308:	vpush	{d8-d9}
   1b30c:	ldrd	r4, [r0, #48]	; 0x30
   1b310:	ldrd	r0, [r0, #64]	; 0x40
   1b314:	orrs	r2, r4, r5
   1b318:	beq	1b348 <__assert_fail@plt+0x8758>
   1b31c:	bl	3e6a0 <__assert_fail@plt+0x2bab0>
   1b320:	vldr	d8, [pc, #80]	; 1b378 <__assert_fail@plt+0x8788>
   1b324:	vmov	d9, r0, r1
   1b328:	mov	r0, r4
   1b32c:	mov	r1, r5
   1b330:	bl	3e6a0 <__assert_fail@plt+0x2bab0>
   1b334:	vmov	d16, r0, r1
   1b338:	vmul.f64	d17, d9, d8
   1b33c:	vdiv.f64	d0, d17, d16
   1b340:	vpop	{d8-d9}
   1b344:	pop	{r4, r5, fp, pc}
   1b348:	orrs	r0, r0, r1
   1b34c:	beq	1b368 <__assert_fail@plt+0x8778>
   1b350:	add	r0, pc, #40	; 0x28
   1b354:	cmp	r1, #0
   1b358:	addmi	r0, r0, #8
   1b35c:	vldr	d0, [r0]
   1b360:	vpop	{d8-d9}
   1b364:	pop	{r4, r5, fp, pc}
   1b368:	vmov.f64	d0, #112	; 0x3f800000  1.0
   1b36c:	vpop	{d8-d9}
   1b370:	pop	{r4, r5, fp, pc}
   1b374:	nop	{0}
   1b378:	andeq	r0, r0, r0
   1b37c:	addmi	r0, r0, r0
   1b380:	andeq	r0, r0, r0
   1b384:	svcvc	0x00f00000	; IMB
   1b388:	andeq	r0, r0, r0
   1b38c:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1b390:	sub	r0, r0, #4096	; 0x1000
   1b394:	ror	r0, r0, #12
   1b398:	cmp	r0, #11
   1b39c:	movwhi	r0, #5457	; 0x1551
   1b3a0:	movthi	r0, #4
   1b3a4:	bxhi	lr
   1b3a8:	movw	r1, #5556	; 0x15b4
   1b3ac:	movt	r1, #4
   1b3b0:	ldr	r0, [r1, r0, lsl #2]
   1b3b4:	bx	lr
   1b3b8:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   1b3bc:	add	fp, sp, #24
   1b3c0:	mov	r4, r0
   1b3c4:	movw	r5, #23772	; 0x5cdc
   1b3c8:	movt	r5, #5
   1b3cc:	ldr	r0, [r5]
   1b3d0:	cmp	r0, #0
   1b3d4:	movw	r6, #23776	; 0x5ce0
   1b3d8:	movt	r6, #5
   1b3dc:	beq	1b410 <__assert_fail@plt+0x8820>
   1b3e0:	movw	r1, #23768	; 0x5cd8
   1b3e4:	movt	r1, #5
   1b3e8:	ldrb	r1, [r1]
   1b3ec:	cmp	r1, #1
   1b3f0:	bne	1b40c <__assert_fail@plt+0x881c>
   1b3f4:	ldrd	r2, [r6]
   1b3f8:	ldrd	r8, [r4]
   1b3fc:	eor	r1, r9, r3
   1b400:	eor	r2, r8, r2
   1b404:	orrs	r1, r2, r1
   1b408:	beq	1b424 <__assert_fail@plt+0x8834>
   1b40c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   1b410:	ldrd	r0, [r4]
   1b414:	strd	r0, [r6]
   1b418:	mov	r0, r4
   1b41c:	bl	1b428 <__assert_fail@plt+0x8838>
   1b420:	str	r0, [r5]
   1b424:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   1b428:	push	{r4, r5, r6, r7, fp, lr}
   1b42c:	add	fp, sp, #16
   1b430:	mov	r4, r0
   1b434:	mov	r0, #1
   1b438:	bl	1b580 <__assert_fail@plt+0x8990>
   1b43c:	cmp	r0, #0
   1b440:	beq	1b4f4 <__assert_fail@plt+0x8904>
   1b444:	mov	r5, r0
   1b448:	mov	r7, #0
   1b44c:	movw	r6, #5645	; 0x160d
   1b450:	movt	r6, #4
   1b454:	b	1b464 <__assert_fail@plt+0x8874>
   1b458:	ldr	r5, [r5, #28]
   1b45c:	cmp	r5, #0
   1b460:	beq	1b4a4 <__assert_fail@plt+0x88b4>
   1b464:	ldr	r0, [r5, #12]
   1b468:	mov	r1, r6
   1b46c:	bl	124f4 <strcmp@plt>
   1b470:	cmp	r0, #0
   1b474:	beq	1b458 <__assert_fail@plt+0x8868>
   1b478:	mov	r0, r5
   1b47c:	bl	1b6dc <__assert_fail@plt+0x8aec>
   1b480:	cmp	r0, #0
   1b484:	bne	1b458 <__assert_fail@plt+0x8868>
   1b488:	ldrd	r0, [r4]
   1b48c:	ldrd	r2, [r5, #16]
   1b490:	eor	r1, r3, r1
   1b494:	eor	r0, r2, r0
   1b498:	orrs	r0, r0, r1
   1b49c:	moveq	r7, r5
   1b4a0:	b	1b458 <__assert_fail@plt+0x8868>
   1b4a4:	cmp	r7, #0
   1b4a8:	beq	1b4c8 <__assert_fail@plt+0x88d8>
   1b4ac:	ldr	r0, [r7, #12]
   1b4b0:	bl	2b9a4 <__assert_fail@plt+0x18db4>
   1b4b4:	movw	r1, #23768	; 0x5cd8
   1b4b8:	movt	r1, #5
   1b4bc:	mov	r2, #1
   1b4c0:	strb	r2, [r1]
   1b4c4:	pop	{r4, r5, r6, r7, fp, pc}
   1b4c8:	movw	r0, #23768	; 0x5cd8
   1b4cc:	movt	r0, #5
   1b4d0:	mov	r1, #0
   1b4d4:	strb	r1, [r0]
   1b4d8:	movw	r1, #388	; 0x184
   1b4dc:	movt	r1, #4
   1b4e0:	mov	r0, #0
   1b4e4:	mov	r2, #5
   1b4e8:	bl	12674 <dcgettext@plt>
   1b4ec:	pop	{r4, r5, r6, r7, fp, lr}
   1b4f0:	b	2b9a4 <__assert_fail@plt+0x18db4>
   1b4f4:	movw	r1, #5608	; 0x15e8
   1b4f8:	movt	r1, #4
   1b4fc:	mov	r0, #0
   1b500:	mov	r2, #5
   1b504:	bl	12674 <dcgettext@plt>
   1b508:	mov	r2, r0
   1b50c:	mov	r0, #1
   1b510:	mov	r1, #0
   1b514:	bl	127b8 <error@plt>
   1b518:	push	{r4, r5, r6, sl, fp, lr}
   1b51c:	add	fp, sp, #16
   1b520:	mov	r5, r0
   1b524:	movw	r0, #5604	; 0x15e4
   1b528:	movt	r0, #4
   1b52c:	mov	r1, r5
   1b530:	bl	124f4 <strcmp@plt>
   1b534:	mov	r4, #1
   1b538:	cmp	r0, #0
   1b53c:	beq	1b578 <__assert_fail@plt+0x8988>
   1b540:	mov	r0, #0
   1b544:	bl	1b580 <__assert_fail@plt+0x8990>
   1b548:	cmp	r0, #0
   1b54c:	beq	1b578 <__assert_fail@plt+0x8988>
   1b550:	mov	r6, r0
   1b554:	ldr	r1, [r6, #12]
   1b558:	mov	r0, r5
   1b55c:	bl	124f4 <strcmp@plt>
   1b560:	cmp	r0, #0
   1b564:	beq	1b578 <__assert_fail@plt+0x8988>
   1b568:	ldr	r6, [r6, #28]
   1b56c:	cmp	r6, #0
   1b570:	bne	1b554 <__assert_fail@plt+0x8964>
   1b574:	mov	r4, #0
   1b578:	mov	r0, r4
   1b57c:	pop	{r4, r5, r6, sl, fp, pc}
   1b580:	push	{r4, r5, r6, sl, fp, lr}
   1b584:	add	fp, sp, #16
   1b588:	mov	r4, r0
   1b58c:	movw	r6, #23788	; 0x5cec
   1b590:	movt	r6, #5
   1b594:	movw	r5, #23784	; 0x5ce8
   1b598:	movt	r5, #5
   1b59c:	ldr	r0, [r5]
   1b5a0:	cmp	r0, #0
   1b5a4:	beq	1b5cc <__assert_fail@plt+0x89dc>
   1b5a8:	ldrb	r1, [r6]
   1b5ac:	cmp	r1, #0
   1b5b0:	bne	1b5cc <__assert_fail@plt+0x89dc>
   1b5b4:	cmp	r4, #0
   1b5b8:	beq	1b5cc <__assert_fail@plt+0x89dc>
   1b5bc:	bl	1b758 <__assert_fail@plt+0x8b68>
   1b5c0:	mov	r0, #0
   1b5c4:	str	r0, [r5]
   1b5c8:	b	1b5e0 <__assert_fail@plt+0x89f0>
   1b5cc:	ldr	r0, [r5]
   1b5d0:	cmp	r0, #0
   1b5d4:	beq	1b5e0 <__assert_fail@plt+0x89f0>
   1b5d8:	ldr	r0, [r5]
   1b5dc:	pop	{r4, r5, r6, sl, fp, pc}
   1b5e0:	mov	r0, r4
   1b5e4:	bl	2ee1c <__assert_fail@plt+0x1c22c>
   1b5e8:	str	r0, [r5]
   1b5ec:	strb	r4, [r6]
   1b5f0:	ldr	r0, [r5]
   1b5f4:	pop	{r4, r5, r6, sl, fp, pc}
   1b5f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b5fc:	add	fp, sp, #28
   1b600:	sub	sp, sp, #12
   1b604:	mov	r4, r0
   1b608:	mov	r8, #0
   1b60c:	str	r8, [sp, #8]
   1b610:	mov	r0, #0
   1b614:	bl	2ee1c <__assert_fail@plt+0x1c22c>
   1b618:	mov	r9, r0
   1b61c:	cmp	r0, #0
   1b620:	beq	1b6c4 <__assert_fail@plt+0x8ad4>
   1b624:	str	r4, [sp, #4]
   1b628:	add	sl, sp, #8
   1b62c:	mov	r4, #0
   1b630:	mov	r7, r9
   1b634:	b	1b650 <__assert_fail@plt+0x8a60>
   1b638:	mov	r0, r5
   1b63c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   1b640:	mov	r5, #0
   1b644:	ldr	r7, [r7, #28]
   1b648:	cmp	r7, #0
   1b64c:	beq	1b6a8 <__assert_fail@plt+0x8ab8>
   1b650:	mov	r5, r4
   1b654:	add	r6, r8, #1
   1b658:	lsl	r1, r6, #3
   1b65c:	mov	r0, r4
   1b660:	mov	r2, sl
   1b664:	bl	20040 <__assert_fail@plt+0xd450>
   1b668:	mov	r4, r0
   1b66c:	cmp	r0, #0
   1b670:	beq	1b638 <__assert_fail@plt+0x8a48>
   1b674:	mov	r0, r7
   1b678:	bl	1b6dc <__assert_fail@plt+0x8aec>
   1b67c:	cmp	r0, #0
   1b680:	beq	1b68c <__assert_fail@plt+0x8a9c>
   1b684:	mov	r5, r4
   1b688:	b	1b644 <__assert_fail@plt+0x8a54>
   1b68c:	ldrd	r0, [r7, #16]
   1b690:	mov	r2, r4
   1b694:	str	r0, [r2, r8, lsl #3]!
   1b698:	str	r1, [r2, #4]
   1b69c:	mov	r5, r4
   1b6a0:	mov	r8, r6
   1b6a4:	b	1b644 <__assert_fail@plt+0x8a54>
   1b6a8:	mov	r0, r9
   1b6ac:	bl	1b758 <__assert_fail@plt+0x8b68>
   1b6b0:	cmp	r5, #0
   1b6b4:	beq	1b6cc <__assert_fail@plt+0x8adc>
   1b6b8:	ldr	r0, [sp, #4]
   1b6bc:	str	r8, [r0]
   1b6c0:	b	1b6d0 <__assert_fail@plt+0x8ae0>
   1b6c4:	mov	r0, r9
   1b6c8:	bl	1b758 <__assert_fail@plt+0x8b68>
   1b6cc:	mov	r5, #0
   1b6d0:	mov	r0, r5
   1b6d4:	sub	sp, fp, #28
   1b6d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b6dc:	push	{r4, r5, r6, sl, fp, lr}
   1b6e0:	add	fp, sp, #16
   1b6e4:	sub	sp, sp, #104	; 0x68
   1b6e8:	mov	r4, r0
   1b6ec:	mov	r6, r0
   1b6f0:	ldr	r0, [r6, #16]!
   1b6f4:	ldr	r1, [r6, #4]
   1b6f8:	and	r1, r0, r1
   1b6fc:	mov	r0, #0
   1b700:	cmn	r1, #1
   1b704:	bne	1b73c <__assert_fail@plt+0x8b4c>
   1b708:	mov	r5, sp
   1b70c:	mov	r0, r5
   1b710:	bl	18270 <__assert_fail@plt+0x5680>
   1b714:	ldr	r0, [r4, #4]
   1b718:	movw	r1, #24204	; 0x5e8c
   1b71c:	movt	r1, #5
   1b720:	ldr	r2, [r1, #52]	; 0x34
   1b724:	mov	r1, r5
   1b728:	blx	r2
   1b72c:	mov	r1, r0
   1b730:	mvn	r0, #0
   1b734:	cmp	r1, #0
   1b738:	beq	1b744 <__assert_fail@plt+0x8b54>
   1b73c:	sub	sp, fp, #16
   1b740:	pop	{r4, r5, r6, sl, fp, pc}
   1b744:	ldm	sp, {r0, r1}
   1b748:	strd	r0, [r6]
   1b74c:	mov	r0, #0
   1b750:	sub	sp, fp, #16
   1b754:	pop	{r4, r5, r6, sl, fp, pc}
   1b758:	push	{r4, sl, fp, lr}
   1b75c:	add	fp, sp, #8
   1b760:	cmp	r0, #0
   1b764:	popeq	{r4, sl, fp, pc}
   1b768:	ldr	r4, [r0, #28]
   1b76c:	bl	2f850 <__assert_fail@plt+0x1cc60>
   1b770:	cmp	r4, #0
   1b774:	mov	r0, r4
   1b778:	bne	1b768 <__assert_fail@plt+0x8b78>
   1b77c:	pop	{r4, sl, fp, pc}
   1b780:	push	{fp, lr}
   1b784:	mov	fp, sp
   1b788:	cmp	r0, #0
   1b78c:	beq	1b7f0 <__assert_fail@plt+0x8c00>
   1b790:	mov	r1, #0
   1b794:	movw	r2, #16468	; 0x4054
   1b798:	movt	r2, #1
   1b79c:	movw	ip, #19628	; 0x4cac
   1b7a0:	movt	ip, #1
   1b7a4:	b	1b7bc <__assert_fail@plt+0x8bcc>
   1b7a8:	cmp	r3, ip
   1b7ac:	orreq	r1, r1, #2
   1b7b0:	ldr	r0, [r0, #152]	; 0x98
   1b7b4:	cmp	r0, #0
   1b7b8:	beq	1b7d0 <__assert_fail@plt+0x8be0>
   1b7bc:	ldr	r3, [r0]
   1b7c0:	cmp	r3, r2
   1b7c4:	bne	1b7a8 <__assert_fail@plt+0x8bb8>
   1b7c8:	orr	r1, r1, #1
   1b7cc:	b	1b7b0 <__assert_fail@plt+0x8bc0>
   1b7d0:	and	r0, r1, #3
   1b7d4:	cmp	r0, #3
   1b7d8:	popne	{fp, pc}
   1b7dc:	movw	r0, #24204	; 0x5e8c
   1b7e0:	movt	r0, #5
   1b7e4:	ldrb	r0, [r0, #1]
   1b7e8:	cmp	r0, #0
   1b7ec:	beq	1b7f4 <__assert_fail@plt+0x8c04>
   1b7f0:	pop	{fp, pc}
   1b7f4:	movw	r1, #5652	; 0x1614
   1b7f8:	movt	r1, #4
   1b7fc:	mov	r0, #0
   1b800:	mov	r2, #5
   1b804:	bl	12674 <dcgettext@plt>
   1b808:	mov	r2, r0
   1b80c:	mov	r0, #1
   1b810:	mov	r1, #0
   1b814:	bl	127b8 <error@plt>
   1b818:	cmp	r0, #0
   1b81c:	movw	r1, #24204	; 0x5e8c
   1b820:	movt	r1, #5
   1b824:	beq	1b850 <__assert_fail@plt+0x8c60>
   1b828:	cmp	r0, #2
   1b82c:	beq	1b86c <__assert_fail@plt+0x8c7c>
   1b830:	cmp	r0, #1
   1b834:	bne	1b88c <__assert_fail@plt+0x8c9c>
   1b838:	movw	r2, #47272	; 0xb8a8
   1b83c:	movt	r2, #1
   1b840:	str	r2, [r1, #64]	; 0x40
   1b844:	movw	r2, #35116	; 0x892c
   1b848:	movt	r2, #1
   1b84c:	b	1b880 <__assert_fail@plt+0x8c90>
   1b850:	movw	r2, #47336	; 0xb8e8
   1b854:	movt	r2, #1
   1b858:	str	r2, [r1, #64]	; 0x40
   1b85c:	movw	r2, #35244	; 0x89ac
   1b860:	movt	r2, #1
   1b864:	str	r2, [r1, #52]	; 0x34
   1b868:	b	1b88c <__assert_fail@plt+0x8c9c>
   1b86c:	movw	r2, #47340	; 0xb8ec
   1b870:	movt	r2, #1
   1b874:	str	r2, [r1, #64]	; 0x40
   1b878:	movw	r2, #34824	; 0x8808
   1b87c:	movt	r2, #1
   1b880:	str	r2, [r1, #52]	; 0x34
   1b884:	mov	r2, #1
   1b888:	strb	r2, [r1, #12]
   1b88c:	str	r0, [r1, #48]	; 0x30
   1b890:	ldrb	r0, [r1, #44]	; 0x2c
   1b894:	tst	r0, #2
   1b898:	movwne	r0, #35332	; 0x8a04
   1b89c:	movtne	r0, #1
   1b8a0:	strne	r0, [r1, #52]	; 0x34
   1b8a4:	bx	lr
   1b8a8:	push	{r4, r5, r6, sl, fp, lr}
   1b8ac:	add	fp, sp, #16
   1b8b0:	mov	r4, r2
   1b8b4:	mov	r5, r1
   1b8b8:	mov	r6, r0
   1b8bc:	bl	2a7e4 <__assert_fail@plt+0x17bf4>
   1b8c0:	cmp	r0, #0
   1b8c4:	beq	1b8e0 <__assert_fail@plt+0x8cf0>
   1b8c8:	mov	r3, r0
   1b8cc:	mov	r0, r6
   1b8d0:	mov	r1, r5
   1b8d4:	mov	r2, r4
   1b8d8:	pop	{r4, r5, r6, sl, fp, lr}
   1b8dc:	b	1bb74 <__assert_fail@plt+0x8f84>
   1b8e0:	mov	r0, #0
   1b8e4:	pop	{r4, r5, r6, sl, fp, pc}
   1b8e8:	b	2aa1c <__assert_fail@plt+0x17e2c>
   1b8ec:	push	{r4, r5, r6, sl, fp, lr}
   1b8f0:	add	fp, sp, #16
   1b8f4:	mov	r4, r2
   1b8f8:	mov	r5, r1
   1b8fc:	mov	r6, r0
   1b900:	movw	r0, #24160	; 0x5e60
   1b904:	movt	r0, #5
   1b908:	ldr	r0, [r0]
   1b90c:	cmp	r0, #0
   1b910:	beq	1b928 <__assert_fail@plt+0x8d38>
   1b914:	mov	r0, r6
   1b918:	mov	r1, r5
   1b91c:	mov	r2, r4
   1b920:	pop	{r4, r5, r6, sl, fp, lr}
   1b924:	b	2aa1c <__assert_fail@plt+0x17e2c>
   1b928:	mov	r0, r6
   1b92c:	mov	r1, r5
   1b930:	mov	r2, r4
   1b934:	bl	2a7e4 <__assert_fail@plt+0x17bf4>
   1b938:	cmp	r0, #0
   1b93c:	beq	1b958 <__assert_fail@plt+0x8d68>
   1b940:	mov	r3, r0
   1b944:	mov	r0, r6
   1b948:	mov	r1, r5
   1b94c:	mov	r2, r4
   1b950:	pop	{r4, r5, r6, sl, fp, lr}
   1b954:	b	1bb74 <__assert_fail@plt+0x8f84>
   1b958:	mov	r0, #0
   1b95c:	pop	{r4, r5, r6, sl, fp, pc}
   1b960:	movw	r0, #23792	; 0x5cf0
   1b964:	movt	r0, #5
   1b968:	mov	r1, #0
   1b96c:	str	r1, [r0]
   1b970:	bx	lr
   1b974:	bx	lr
   1b978:	push	{r4, r5, r6, r7, fp, lr}
   1b97c:	add	fp, sp, #16
   1b980:	mov	r4, r0
   1b984:	movw	r0, #5824	; 0x16c0
   1b988:	movt	r0, #4
   1b98c:	mov	r1, r4
   1b990:	mov	r2, #6
   1b994:	bl	12b90 <strncmp@plt>
   1b998:	cmp	r0, #0
   1b99c:	bne	1b9bc <__assert_fail@plt+0x8dcc>
   1b9a0:	mov	r0, r4
   1b9a4:	bl	128c0 <strlen@plt>
   1b9a8:	cmp	r0, #8
   1b9ac:	bne	1b9bc <__assert_fail@plt+0x8dcc>
   1b9b0:	movw	r1, #10056	; 0x2748
   1b9b4:	movt	r1, #4
   1b9b8:	b	1ba24 <__assert_fail@plt+0x8e34>
   1b9bc:	mov	r5, r4
   1b9c0:	ldrb	r0, [r5], #1
   1b9c4:	cmp	r0, #45	; 0x2d
   1b9c8:	movne	r5, r4
   1b9cc:	movw	r0, #65009	; 0xfdf1
   1b9d0:	movt	r0, #3
   1b9d4:	mov	r1, r5
   1b9d8:	bl	124f4 <strcmp@plt>
   1b9dc:	cmp	r0, #0
   1b9e0:	beq	1ba1c <__assert_fail@plt+0x8e2c>
   1b9e4:	mov	r6, #0
   1b9e8:	movw	r7, #10072	; 0x2758
   1b9ec:	movt	r7, #4
   1b9f0:	cmn	r6, #1360	; 0x550
   1b9f4:	beq	1ba30 <__assert_fail@plt+0x8e40>
   1b9f8:	sub	r0, r7, r6
   1b9fc:	ldr	r0, [r0, #20]
   1ba00:	mov	r1, r5
   1ba04:	bl	124f4 <strcmp@plt>
   1ba08:	sub	r6, r6, #16
   1ba0c:	cmp	r0, #0
   1ba10:	bne	1b9f0 <__assert_fail@plt+0x8e00>
   1ba14:	sub	r1, r7, r6
   1ba18:	b	1ba24 <__assert_fail@plt+0x8e34>
   1ba1c:	movw	r1, #10072	; 0x2758
   1ba20:	movt	r1, #4
   1ba24:	mov	r0, r4
   1ba28:	pop	{r4, r5, r6, r7, fp, lr}
   1ba2c:	b	1ba38 <__assert_fail@plt+0x8e48>
   1ba30:	mov	r0, #0
   1ba34:	pop	{r4, r5, r6, r7, fp, pc}
   1ba38:	push	{r4, r5, r6, sl, fp, lr}
   1ba3c:	add	fp, sp, #16
   1ba40:	sub	sp, sp, #8
   1ba44:	mov	r5, r0
   1ba48:	ldr	r0, [r1]
   1ba4c:	cmp	r0, #1
   1ba50:	beq	1ba80 <__assert_fail@plt+0x8e90>
   1ba54:	mov	r4, r1
   1ba58:	cmp	r0, #2
   1ba5c:	beq	1ba84 <__assert_fail@plt+0x8e94>
   1ba60:	movw	r6, #23792	; 0x5cf0
   1ba64:	movt	r6, #5
   1ba68:	ldr	r1, [r6]
   1ba6c:	cmp	r0, #0
   1ba70:	beq	1ba90 <__assert_fail@plt+0x8ea0>
   1ba74:	cmp	r1, #0
   1ba78:	streq	r5, [r6]
   1ba7c:	b	1ba84 <__assert_fail@plt+0x8e94>
   1ba80:	mov	r4, #0
   1ba84:	mov	r0, r4
   1ba88:	sub	sp, fp, #16
   1ba8c:	pop	{r4, r5, r6, sl, fp, pc}
   1ba90:	cmp	r1, #0
   1ba94:	beq	1ba84 <__assert_fail@plt+0x8e94>
   1ba98:	bl	1bbf0 <__assert_fail@plt+0x9000>
   1ba9c:	cmp	r0, #0
   1baa0:	beq	1ba84 <__assert_fail@plt+0x8e94>
   1baa4:	movw	r1, #5908	; 0x1714
   1baa8:	movt	r1, #4
   1baac:	mov	r0, #0
   1bab0:	mov	r2, #5
   1bab4:	bl	12674 <dcgettext@plt>
   1bab8:	mov	r2, r0
   1babc:	ldr	r0, [r6]
   1bac0:	stm	sp, {r0, r5}
   1bac4:	mov	r0, #0
   1bac8:	mov	r1, #0
   1bacc:	mov	r3, r5
   1bad0:	bl	127b8 <error@plt>
   1bad4:	b	1ba84 <__assert_fail@plt+0x8e94>
   1bad8:	push	{fp, lr}
   1badc:	mov	fp, sp
   1bae0:	bl	172f8 <__assert_fail@plt+0x4708>
   1bae4:	mov	r1, #0
   1bae8:	mov	r2, #5
   1baec:	str	r2, [r0, #8]
   1baf0:	str	r1, [r0, #12]
   1baf4:	movw	r2, #16192	; 0x3f40
   1baf8:	movt	r2, #1
   1bafc:	str	r2, [r0]
   1bb00:	strh	r1, [r0, #18]
   1bb04:	mov	r0, #1
   1bb08:	pop	{fp, pc}
   1bb0c:	push	{r4, r5, fp, lr}
   1bb10:	add	fp, sp, #8
   1bb14:	mov	r5, #0
   1bb18:	mov	r1, #0
   1bb1c:	bl	17414 <__assert_fail@plt+0x4824>
   1bb20:	mov	r4, #4
   1bb24:	strd	r4, [r0, #8]
   1bb28:	movw	r1, #19156	; 0x4ad4
   1bb2c:	movt	r1, #1
   1bb30:	str	r1, [r0]
   1bb34:	strh	r5, [r0, #18]
   1bb38:	mov	r0, #1
   1bb3c:	pop	{r4, r5, fp, pc}
   1bb40:	push	{fp, lr}
   1bb44:	mov	fp, sp
   1bb48:	bl	17fe4 <__assert_fail@plt+0x53f4>
   1bb4c:	movw	r1, #257	; 0x101
   1bb50:	str	r1, [r0, #16]
   1bb54:	add	r0, r0, #40	; 0x28
   1bb58:	bl	1bb64 <__assert_fail@plt+0x8f74>
   1bb5c:	mov	r0, #1
   1bb60:	pop	{fp, pc}
   1bb64:	mov	r1, r0
   1bb68:	movw	r0, #8368	; 0x20b0
   1bb6c:	movt	r0, #4
   1bb70:	b	1e94c <__assert_fail@plt+0xbd5c>
   1bb74:	push	{r4, r5, r6, r7, fp, lr}
   1bb78:	add	fp, sp, #16
   1bb7c:	mov	r7, r3
   1bb80:	mov	r4, r2
   1bb84:	mov	r5, r1
   1bb88:	mov	r6, r0
   1bb8c:	bl	12908 <__errno_location@plt>
   1bb90:	ldr	r0, [r0]
   1bb94:	cmp	r0, #20
   1bb98:	cmpne	r0, #2
   1bb9c:	bne	1bbc8 <__assert_fail@plt+0x8fd8>
   1bba0:	movw	r0, #24204	; 0x5e8c
   1bba4:	movt	r0, #5
   1bba8:	ldrb	r0, [r0, #44]	; 0x2c
   1bbac:	tst	r0, #2
   1bbb0:	bne	1bbd0 <__assert_fail@plt+0x8fe0>
   1bbb4:	mov	r0, r6
   1bbb8:	mov	r1, r5
   1bbbc:	mov	r2, r4
   1bbc0:	pop	{r4, r5, r6, r7, fp, lr}
   1bbc4:	b	2aa1c <__assert_fail@plt+0x17e2c>
   1bbc8:	mov	r0, r7
   1bbcc:	pop	{r4, r5, r6, r7, fp, pc}
   1bbd0:	movw	r0, #21864	; 0x5568
   1bbd4:	movt	r0, #5
   1bbd8:	ldr	r0, [r0]
   1bbdc:	movw	r1, #5831	; 0x16c7
   1bbe0:	movt	r1, #4
   1bbe4:	mov	r2, r5
   1bbe8:	bl	128fc <fprintf@plt>
   1bbec:	b	1bbb4 <__assert_fail@plt+0x8fc4>
   1bbf0:	movw	r0, #24204	; 0x5e8c
   1bbf4:	movt	r0, #5
   1bbf8:	ldrb	r1, [r0, #16]
   1bbfc:	ldrb	r0, [r0, #17]
   1bc00:	cmp	r1, #0
   1bc04:	movwne	r1, #1
   1bc08:	clz	r0, r0
   1bc0c:	lsr	r0, r0, #5
   1bc10:	and	r0, r0, r1
   1bc14:	bx	lr
   1bc18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc1c:	add	fp, sp, #28
   1bc20:	sub	sp, sp, #116	; 0x74
   1bc24:	mov	r6, #0
   1bc28:	cmp	r1, #0
   1bc2c:	beq	1bccc <__assert_fail@plt+0x90dc>
   1bc30:	mov	sl, r2
   1bc34:	mov	r5, r1
   1bc38:	ldr	r8, [r2]
   1bc3c:	ldr	r4, [r1, r8, lsl #2]
   1bc40:	cmp	r4, #0
   1bc44:	beq	1bccc <__assert_fail@plt+0x90dc>
   1bc48:	mov	r7, r0
   1bc4c:	mov	r0, r4
   1bc50:	bl	128c0 <strlen@plt>
   1bc54:	cmp	r0, #8
   1bc58:	bne	1bccc <__assert_fail@plt+0x90dc>
   1bc5c:	mov	r0, #116	; 0x74
   1bc60:	strh	r0, [fp, #-32]	; 0xffffffe0
   1bc64:	movw	r0, #16993	; 0x4261
   1bc68:	movt	r0, #28003	; 0x6d63
   1bc6c:	str	r0, [fp, #-36]	; 0xffffffdc
   1bc70:	movw	r0, #5824	; 0x16c0
   1bc74:	movt	r0, #4
   1bc78:	mov	r1, r4
   1bc7c:	mov	r2, #6
   1bc80:	bl	12b90 <strncmp@plt>
   1bc84:	cmp	r0, #0
   1bc88:	bne	1be64 <__assert_fail@plt+0x9274>
   1bc8c:	ldrb	r9, [r4, #6]
   1bc90:	cmp	r9, #66	; 0x42
   1bc94:	beq	1bca4 <__assert_fail@plt+0x90b4>
   1bc98:	ldrb	r4, [r4, #7]
   1bc9c:	cmp	r4, #66	; 0x42
   1bca0:	bne	1bcd8 <__assert_fail@plt+0x90e8>
   1bca4:	mov	r6, #0
   1bca8:	movw	r1, #6277	; 0x1885
   1bcac:	movt	r1, #4
   1bcb0:	mov	r0, #0
   1bcb4:	mov	r2, #5
   1bcb8:	bl	12674 <dcgettext@plt>
   1bcbc:	mov	r2, r0
   1bcc0:	mov	r0, #0
   1bcc4:	mov	r1, #0
   1bcc8:	bl	127b8 <error@plt>
   1bccc:	mov	r0, r6
   1bcd0:	sub	sp, fp, #28
   1bcd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bcd8:	mov	r6, #0
   1bcdc:	cmp	r9, #116	; 0x74
   1bce0:	beq	1bccc <__assert_fail@plt+0x90dc>
   1bce4:	sub	r0, fp, #36	; 0x24
   1bce8:	mov	r1, r9
   1bcec:	bl	128cc <strchr@plt>
   1bcf0:	cmp	r0, #0
   1bcf4:	beq	1bccc <__assert_fail@plt+0x90dc>
   1bcf8:	sub	r0, fp, #36	; 0x24
   1bcfc:	mov	r1, r4
   1bd00:	bl	128cc <strchr@plt>
   1bd04:	cmp	r0, #0
   1bd08:	beq	1bccc <__assert_fail@plt+0x90dc>
   1bd0c:	add	r0, r8, #1
   1bd10:	ldr	r1, [r5, r0, lsl #2]
   1bd14:	cmp	r1, #0
   1bd18:	beq	1be84 <__assert_fail@plt+0x9294>
   1bd1c:	str	r0, [sl]
   1bd20:	mov	r0, r7
   1bd24:	bl	17fa4 <__assert_fail@plt+0x53b4>
   1bd28:	mov	r6, r0
   1bd2c:	cmp	r9, #97	; 0x61
   1bd30:	beq	1bd54 <__assert_fail@plt+0x9164>
   1bd34:	cmp	r9, #109	; 0x6d
   1bd38:	beq	1bd4c <__assert_fail@plt+0x915c>
   1bd3c:	cmp	r9, #99	; 0x63
   1bd40:	bne	1bebc <__assert_fail@plt+0x92cc>
   1bd44:	mov	r0, #2
   1bd48:	b	1bd58 <__assert_fail@plt+0x9168>
   1bd4c:	mov	r0, #3
   1bd50:	b	1bd58 <__assert_fail@plt+0x9168>
   1bd54:	mov	r0, #0
   1bd58:	str	r0, [r6, #40]	; 0x28
   1bd5c:	cmp	r4, #116	; 0x74
   1bd60:	bne	1bdb0 <__assert_fail@plt+0x91c0>
   1bd64:	ldr	r0, [sl]
   1bd68:	ldr	r1, [r5, r0, lsl #2]
   1bd6c:	add	r0, r6, #48	; 0x30
   1bd70:	movw	r7, #24204	; 0x5e8c
   1bd74:	movt	r7, #5
   1bd78:	add	r2, r7, #20
   1bd7c:	bl	27728 <__assert_fail@plt+0x14b38>
   1bd80:	cmp	r0, #0
   1bd84:	bne	1bdf8 <__assert_fail@plt+0x9208>
   1bd88:	movw	r1, #6399	; 0x18ff
   1bd8c:	movt	r1, #4
   1bd90:	mov	r0, #0
   1bd94:	mov	r2, #5
   1bd98:	bl	12674 <dcgettext@plt>
   1bd9c:	mov	r4, r0
   1bda0:	ldr	r0, [sl]
   1bda4:	ldr	r2, [r5, r0, lsl #2]
   1bda8:	ldr	r1, [r7, #72]	; 0x48
   1bdac:	b	1beb0 <__assert_fail@plt+0x92c0>
   1bdb0:	mov	r7, sp
   1bdb4:	mov	r0, r7
   1bdb8:	bl	18270 <__assert_fail@plt+0x5680>
   1bdbc:	ldr	r0, [sl]
   1bdc0:	ldr	r0, [r5, r0, lsl #2]
   1bdc4:	movw	r1, #24204	; 0x5e8c
   1bdc8:	movt	r1, #5
   1bdcc:	ldr	r2, [r1, #52]	; 0x34
   1bdd0:	mov	r1, r7
   1bdd4:	blx	r2
   1bdd8:	cmp	r0, #0
   1bddc:	bne	1bf30 <__assert_fail@plt+0x9340>
   1bde0:	add	r2, r6, #48	; 0x30
   1bde4:	mov	r0, sp
   1bde8:	mov	r1, r4
   1bdec:	bl	1bfa0 <__assert_fail@plt+0x93b0>
   1bdf0:	cmp	r0, #0
   1bdf4:	beq	1bf44 <__assert_fail@plt+0x9354>
   1bdf8:	mov	r0, #0
   1bdfc:	str	r0, [r6, #44]	; 0x2c
   1be00:	ldr	r0, [r6, #48]	; 0x30
   1be04:	bl	1c068 <__assert_fail@plt+0x9478>
   1be08:	vstr	s0, [r6, #28]
   1be0c:	ldr	r0, [sl]
   1be10:	add	r0, r0, #1
   1be14:	str	r0, [sl]
   1be18:	ldr	r0, [r6]
   1be1c:	cmp	r0, #0
   1be20:	beq	1bef0 <__assert_fail@plt+0x9300>
   1be24:	movw	r1, #18460	; 0x481c
   1be28:	movt	r1, #1
   1be2c:	cmp	r0, r1
   1be30:	bne	1bf10 <__assert_fail@plt+0x9320>
   1be34:	ldrb	r0, [r6, #18]
   1be38:	mov	r6, #1
   1be3c:	cmp	r0, #0
   1be40:	bne	1bccc <__assert_fail@plt+0x90dc>
   1be44:	movw	r0, #6557	; 0x199d
   1be48:	movt	r0, #4
   1be4c:	movw	r1, #6203	; 0x183b
   1be50:	movt	r1, #4
   1be54:	movw	r3, #6212	; 0x1844
   1be58:	movt	r3, #4
   1be5c:	movw	r2, #1649	; 0x671
   1be60:	bl	12bf0 <__assert_fail@plt>
   1be64:	movw	r0, #6160	; 0x1810
   1be68:	movt	r0, #4
   1be6c:	movw	r1, #6203	; 0x183b
   1be70:	movt	r1, #4
   1be74:	movw	r3, #6212	; 0x1844
   1be78:	movt	r3, #4
   1be7c:	movw	r2, #1555	; 0x613
   1be80:	bl	12bf0 <__assert_fail@plt>
   1be84:	movw	r1, #6346	; 0x18ca
   1be88:	movt	r1, #4
   1be8c:	mov	r0, #0
   1be90:	mov	r2, #5
   1be94:	bl	12674 <dcgettext@plt>
   1be98:	mov	r4, r0
   1be9c:	ldr	r0, [sl]
   1bea0:	ldr	r2, [r5, r0, lsl #2]
   1bea4:	movw	r0, #24204	; 0x5e8c
   1bea8:	movt	r0, #5
   1beac:	ldr	r1, [r0, #72]	; 0x48
   1beb0:	mov	r0, #0
   1beb4:	bl	2a088 <__assert_fail@plt+0x17498>
   1beb8:	b	1bf6c <__assert_fail@plt+0x937c>
   1bebc:	sub	r0, fp, #36	; 0x24
   1bec0:	mov	r1, r9
   1bec4:	bl	128cc <strchr@plt>
   1bec8:	cmp	r0, #0
   1becc:	bne	1bf80 <__assert_fail@plt+0x9390>
   1bed0:	movw	r0, #6376	; 0x18e8
   1bed4:	movt	r0, #4
   1bed8:	movw	r1, #6203	; 0x183b
   1bedc:	movt	r1, #4
   1bee0:	movw	r3, #6212	; 0x1844
   1bee4:	movt	r3, #4
   1bee8:	movw	r2, #1611	; 0x64b
   1beec:	bl	12bf0 <__assert_fail@plt>
   1bef0:	movw	r0, #6493	; 0x195d
   1bef4:	movt	r0, #4
   1bef8:	movw	r1, #6203	; 0x183b
   1befc:	movt	r1, #4
   1bf00:	movw	r3, #6212	; 0x1844
   1bf04:	movt	r3, #4
   1bf08:	movw	r2, #1647	; 0x66f
   1bf0c:	bl	12bf0 <__assert_fail@plt>
   1bf10:	movw	r0, #6521	; 0x1979
   1bf14:	movt	r0, #4
   1bf18:	movw	r1, #6203	; 0x183b
   1bf1c:	movt	r1, #4
   1bf20:	movw	r3, #6212	; 0x1844
   1bf24:	movt	r3, #4
   1bf28:	mov	r2, #1648	; 0x670
   1bf2c:	bl	12bf0 <__assert_fail@plt>
   1bf30:	bl	12908 <__errno_location@plt>
   1bf34:	ldr	r1, [sl]
   1bf38:	ldr	r1, [r5, r1, lsl #2]
   1bf3c:	ldr	r0, [r0]
   1bf40:	bl	19418 <__assert_fail@plt+0x6828>
   1bf44:	movw	r1, #6457	; 0x1939
   1bf48:	movt	r1, #4
   1bf4c:	mov	r0, #0
   1bf50:	mov	r2, #5
   1bf54:	bl	12674 <dcgettext@plt>
   1bf58:	mov	r4, r0
   1bf5c:	ldr	r0, [sl]
   1bf60:	ldr	r1, [r5, r0, lsl #2]
   1bf64:	mov	r0, #0
   1bf68:	bl	1939c <__assert_fail@plt+0x67ac>
   1bf6c:	mov	r3, r0
   1bf70:	mov	r0, #1
   1bf74:	mov	r1, #0
   1bf78:	mov	r2, r4
   1bf7c:	bl	127b8 <error@plt>
   1bf80:	movw	r0, #65169	; 0xfe91
   1bf84:	movt	r0, #3
   1bf88:	movw	r1, #6203	; 0x183b
   1bf8c:	movt	r1, #4
   1bf90:	movw	r3, #6212	; 0x1844
   1bf94:	movt	r3, #4
   1bf98:	movw	r2, #1612	; 0x64c
   1bf9c:	bl	12bf0 <__assert_fail@plt>
   1bfa0:	push	{r4, sl, fp, lr}
   1bfa4:	add	fp, sp, #8
   1bfa8:	sub	sp, sp, #8
   1bfac:	mov	r4, r2
   1bfb0:	mov	r2, r0
   1bfb4:	cmp	r1, #98	; 0x62
   1bfb8:	bgt	1bfec <__assert_fail@plt+0x93fc>
   1bfbc:	cmp	r1, #66	; 0x42
   1bfc0:	bne	1c004 <__assert_fail@plt+0x9414>
   1bfc4:	mov	r0, sp
   1bfc8:	mov	r1, r2
   1bfcc:	bl	2b108 <__assert_fail@plt+0x18518>
   1bfd0:	ldm	sp, {r0, r1}
   1bfd4:	stm	r4, {r0, r1}
   1bfd8:	ldr	r0, [r4, #4]
   1bfdc:	mvn	r0, r0
   1bfe0:	lsr	r0, r0, #31
   1bfe4:	sub	sp, fp, #8
   1bfe8:	pop	{r4, sl, fp, pc}
   1bfec:	cmp	r1, #99	; 0x63
   1bff0:	bne	1c01c <__assert_fail@plt+0x942c>
   1bff4:	mov	r0, sp
   1bff8:	mov	r1, r2
   1bffc:	bl	2b0f0 <__assert_fail@plt+0x18500>
   1c000:	b	1c030 <__assert_fail@plt+0x9440>
   1c004:	cmp	r1, #97	; 0x61
   1c008:	bne	1c048 <__assert_fail@plt+0x9458>
   1c00c:	mov	r0, sp
   1c010:	mov	r1, r2
   1c014:	bl	2b0e4 <__assert_fail@plt+0x184f4>
   1c018:	b	1c030 <__assert_fail@plt+0x9440>
   1c01c:	cmp	r1, #109	; 0x6d
   1c020:	bne	1c048 <__assert_fail@plt+0x9458>
   1c024:	mov	r0, sp
   1c028:	mov	r1, r2
   1c02c:	bl	2b0fc <__assert_fail@plt+0x1850c>
   1c030:	ldm	sp, {r0, r1}
   1c034:	str	r0, [r4]
   1c038:	str	r1, [r4, #4]
   1c03c:	mov	r0, #1
   1c040:	sub	sp, fp, #8
   1c044:	pop	{r4, sl, fp, pc}
   1c048:	movw	r0, #65169	; 0xfe91
   1c04c:	movt	r0, #3
   1c050:	movw	r1, #6203	; 0x183b
   1c054:	movt	r1, #4
   1c058:	movw	r3, #6577	; 0x19b1
   1c05c:	movt	r3, #4
   1c060:	movw	r2, #498	; 0x1f2
   1c064:	bl	12bf0 <__assert_fail@plt>
   1c068:	movw	r1, #24204	; 0x5e8c
   1c06c:	movt	r1, #5
   1c070:	ldr	r1, [r1, #28]
   1c074:	sub	r0, r1, r0
   1c078:	movw	r1, #17671	; 0x4507
   1c07c:	movt	r1, #49710	; 0xc22e
   1c080:	smmla	r0, r0, r1, r0
   1c084:	asr	r1, r0, #16
   1c088:	add	r0, r1, r0, lsr #31
   1c08c:	vmov	s0, r0
   1c090:	vcvt.f32.s32	s0, s0
   1c094:	b	1c098 <__assert_fail@plt+0x94a8>
   1c098:	vldr	s2, [pc, #72]	; 1c0e8 <__assert_fail@plt+0x94f8>
   1c09c:	vcmpe.f32	s0, s2
   1c0a0:	vmrs	APSR_nzcv, fpscr
   1c0a4:	bpl	1c0b0 <__assert_fail@plt+0x94c0>
   1c0a8:	vldr	s0, [pc, #52]	; 1c0e4 <__assert_fail@plt+0x94f4>
   1c0ac:	bx	lr
   1c0b0:	vmov.f32	s2, #112	; 0x3f800000  1.0
   1c0b4:	vcmpe.f32	s0, s2
   1c0b8:	vmrs	APSR_nzcv, fpscr
   1c0bc:	bpl	1c0c8 <__assert_fail@plt+0x94d8>
   1c0c0:	vldr	s0, [pc, #36]	; 1c0ec <__assert_fail@plt+0x94fc>
   1c0c4:	bx	lr
   1c0c8:	vldr	s2, [pc, #32]	; 1c0f0 <__assert_fail@plt+0x9500>
   1c0cc:	add	r0, pc, #32
   1c0d0:	vcmpe.f32	s0, s2
   1c0d4:	vmrs	APSR_nzcv, fpscr
   1c0d8:	addgt	r0, r0, #4
   1c0dc:	vldr	s0, [r0]
   1c0e0:	bx	lr
   1c0e4:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1c0e8:	stclcc	12, cr12, [ip, #820]	; 0x334
   1c0ec:			; <UNDEFINED> instruction: 0x3e99999a
   1c0f0:	sbcmi	r0, r8, #0
   1c0f4:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1c0f8:			; <UNDEFINED> instruction: 0x3e99999a
   1c0fc:	push	{r4, sl, fp, lr}
   1c100:	add	fp, sp, #8
   1c104:	mov	r4, #0
   1c108:	mov	r1, #0
   1c10c:	bl	17414 <__assert_fail@plt+0x4824>
   1c110:	mov	r1, #4
   1c114:	mov	r2, #2
   1c118:	str	r2, [r0, #8]
   1c11c:	str	r1, [r0, #12]
   1c120:	movw	r1, #18332	; 0x479c
   1c124:	movt	r1, #1
   1c128:	str	r1, [r0]
   1c12c:	strh	r4, [r0, #18]
   1c130:	mov	r0, #1
   1c134:	pop	{r4, sl, fp, pc}
   1c138:	push	{fp, lr}
   1c13c:	mov	fp, sp
   1c140:	bl	172f8 <__assert_fail@plt+0x4708>
   1c144:	mov	r1, #1
   1c148:	mov	r2, #3
   1c14c:	str	r2, [r0, #8]
   1c150:	str	r1, [r0, #12]
   1c154:	movw	r1, #16352	; 0x3fe0
   1c158:	movt	r1, #1
   1c15c:	str	r1, [r0]
   1c160:	mov	r1, #1065353216	; 0x3f800000
   1c164:	str	r1, [r0, #28]
   1c168:	mov	r1, #0
   1c16c:	strh	r1, [r0, #18]
   1c170:	mov	r0, #1
   1c174:	pop	{fp, pc}
   1c178:	push	{fp, lr}
   1c17c:	mov	fp, sp
   1c180:	bl	172f8 <__assert_fail@plt+0x4708>
   1c184:	mov	r1, #3
   1c188:	str	r1, [r0, #8]
   1c18c:	str	r1, [r0, #12]
   1c190:	movw	r1, #15900	; 0x3e1c
   1c194:	movt	r1, #1
   1c198:	str	r1, [r0]
   1c19c:	mov	r1, #0
   1c1a0:	strh	r1, [r0, #18]
   1c1a4:	mov	r0, #1
   1c1a8:	pop	{fp, pc}
   1c1ac:	mov	r3, #0
   1c1b0:	b	1df10 <__assert_fail@plt+0xb320>
   1c1b4:	push	{r4, r5, r6, r7, fp, lr}
   1c1b8:	add	fp, sp, #16
   1c1bc:	sub	sp, sp, #120	; 0x78
   1c1c0:	mov	r5, r2
   1c1c4:	mov	r6, r1
   1c1c8:	mov	r4, r0
   1c1cc:	add	r7, sp, #16
   1c1d0:	mov	r0, r7
   1c1d4:	bl	18270 <__assert_fail@plt+0x5680>
   1c1d8:	add	r3, sp, #12
   1c1dc:	mov	r0, r6
   1c1e0:	mov	r1, r5
   1c1e4:	mov	r2, r7
   1c1e8:	bl	1e1fc <__assert_fail@plt+0xb60c>
   1c1ec:	mov	r1, r0
   1c1f0:	mov	r0, #0
   1c1f4:	cmp	r1, #0
   1c1f8:	beq	1c240 <__assert_fail@plt+0x9650>
   1c1fc:	ldr	r1, [sp, #12]
   1c200:	mov	r0, r4
   1c204:	bl	17fa4 <__assert_fail@plt+0x53b4>
   1c208:	mov	r4, r0
   1c20c:	mov	r5, #0
   1c210:	str	r5, [r0, #40]	; 0x28
   1c214:	mov	r0, sp
   1c218:	add	r1, sp, #16
   1c21c:	bl	2b0fc <__assert_fail@plt+0x1850c>
   1c220:	ldm	sp, {r0, r1}
   1c224:	str	r5, [r4, #44]	; 0x2c
   1c228:	str	r0, [r4, #48]	; 0x30
   1c22c:	str	r1, [r4, #52]	; 0x34
   1c230:	ldr	r0, [sp, #96]	; 0x60
   1c234:	bl	1c068 <__assert_fail@plt+0x9478>
   1c238:	vstr	s0, [r4, #28]
   1c23c:	mov	r0, #1
   1c240:	sub	sp, fp, #16
   1c244:	pop	{r4, r5, r6, r7, fp, pc}
   1c248:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c24c:	add	fp, sp, #28
   1c250:	sub	sp, sp, #44	; 0x2c
   1c254:	mov	r5, r2
   1c258:	mov	r7, r1
   1c25c:	mov	r6, r0
   1c260:	mov	r9, #0
   1c264:	movw	r1, #7163	; 0x1bfb
   1c268:	movt	r1, #4
   1c26c:	mov	r0, #0
   1c270:	mov	r2, #5
   1c274:	bl	12674 <dcgettext@plt>
   1c278:	mov	r4, r0
   1c27c:	ldr	r8, [r5]
   1c280:	add	r2, sp, #16
   1c284:	mov	r0, r7
   1c288:	mov	r1, r5
   1c28c:	bl	1dfe8 <__assert_fail@plt+0xb3f8>
   1c290:	cmp	r0, #0
   1c294:	beq	1c394 <__assert_fail@plt+0x97a4>
   1c298:	str	r6, [sp, #8]
   1c29c:	movw	r0, #24204	; 0x5e8c
   1c2a0:	movt	r0, #5
   1c2a4:	ldr	r6, [r0, #28]
   1c2a8:	ldr	sl, [r0, #32]
   1c2ac:	ldr	r7, [sp, #16]
   1c2b0:	add	r0, sp, #16
   1c2b4:	add	r1, sp, #20
   1c2b8:	bl	1e1bc <__assert_fail@plt+0xb5cc>
   1c2bc:	str	r7, [sp, #16]
   1c2c0:	ldr	r0, [sp, #20]
   1c2c4:	vldr	d0, [pc, #404]	; 1c460 <__assert_fail@plt+0x9870>
   1c2c8:	str	r4, [sp]
   1c2cc:	movw	r9, #20863	; 0x517f
   1c2d0:	movt	r9, #1
   1c2d4:	cmp	r0, #1
   1c2d8:	addeq	r6, r6, r9
   1c2dc:	add	r4, sp, #24
   1c2e0:	mov	r0, r7
   1c2e4:	mov	r1, r4
   1c2e8:	mov	r2, r6
   1c2ec:	mov	r3, sl
   1c2f0:	bl	1e010 <__assert_fail@plt+0xb420>
   1c2f4:	cmp	r0, #0
   1c2f8:	beq	1c38c <__assert_fail@plt+0x979c>
   1c2fc:	mov	sl, r9
   1c300:	ldr	r0, [sp, #8]
   1c304:	mov	r1, r7
   1c308:	bl	17fa4 <__assert_fail@plt+0x53b4>
   1c30c:	mov	r5, r0
   1c310:	mov	r0, #8
   1c314:	vld1.64	{d16-d17}, [r4], r0
   1c318:	add	r0, r5, #40	; 0x28
   1c31c:	vst1.64	{d16-d17}, [r0]
   1c320:	ldr	r0, [r4]
   1c324:	bl	1c068 <__assert_fail@plt+0x9478>
   1c328:	vstr	s0, [r5, #28]
   1c32c:	movw	r0, #24204	; 0x5e8c
   1c330:	movt	r0, #5
   1c334:	ldrb	r0, [r0, #44]	; 0x2c
   1c338:	mov	r9, #1
   1c33c:	tst	r0, #1
   1c340:	beq	1c394 <__assert_fail@plt+0x97a4>
   1c344:	movw	r6, #21864	; 0x5568
   1c348:	movt	r6, #5
   1c34c:	ldr	r0, [r6]
   1c350:	ldr	r2, [r5, #4]
   1c354:	movw	r1, #7231	; 0x1c3f
   1c358:	movt	r1, #4
   1c35c:	bl	128fc <fprintf@plt>
   1c360:	ldr	r0, [r6]
   1c364:	ldr	r8, [sp, #28]
   1c368:	cmp	r8, #0
   1c36c:	beq	1c3a0 <__assert_fail@plt+0x97b0>
   1c370:	cmp	r8, #1
   1c374:	bne	1c3b4 <__assert_fail@plt+0x97c4>
   1c378:	movw	r3, #7275	; 0x1c6b
   1c37c:	movt	r3, #4
   1c380:	movw	r2, #13139	; 0x3353
   1c384:	movt	r2, #4
   1c388:	b	1c3e0 <__assert_fail@plt+0x97f0>
   1c38c:	str	r8, [r5]
   1c390:	mov	r9, #0
   1c394:	mov	r0, r9
   1c398:	sub	sp, fp, #28
   1c39c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c3a0:	movw	r3, #7272	; 0x1c68
   1c3a4:	movt	r3, #4
   1c3a8:	movw	r2, #7266	; 0x1c62
   1c3ac:	movt	r2, #4
   1c3b0:	b	1c3e0 <__assert_fail@plt+0x97f0>
   1c3b4:	movw	r1, #7278	; 0x1c6e
   1c3b8:	movt	r1, #4
   1c3bc:	movw	r3, #7281	; 0x1c71
   1c3c0:	movt	r3, #4
   1c3c4:	cmp	r8, #2
   1c3c8:	moveq	r3, r1
   1c3cc:	movw	r1, #7269	; 0x1c65
   1c3d0:	movt	r1, #4
   1c3d4:	movw	r2, #7282	; 0x1c72
   1c3d8:	movt	r2, #4
   1c3dc:	moveq	r2, r1
   1c3e0:	movw	r1, #7245	; 0x1c4d
   1c3e4:	movt	r1, #4
   1c3e8:	bl	128fc <fprintf@plt>
   1c3ec:	ldr	r4, [r5, #48]	; 0x30
   1c3f0:	str	r4, [sp, #12]
   1c3f4:	ldr	r7, [r6]
   1c3f8:	add	r0, sp, #12
   1c3fc:	bl	12668 <ctime@plt>
   1c400:	str	r0, [sp]
   1c404:	asr	r3, r4, #31
   1c408:	movw	r1, #7304	; 0x1c88
   1c40c:	movt	r1, #4
   1c410:	mov	r0, r7
   1c414:	mov	r2, r4
   1c418:	bl	128fc <fprintf@plt>
   1c41c:	cmp	r8, #2
   1c420:	bne	1c394 <__assert_fail@plt+0x97a4>
   1c424:	ldr	r0, [r5, #48]	; 0x30
   1c428:	add	r0, sl, r0
   1c42c:	add	r4, r0, #1
   1c430:	str	r4, [sp, #12]
   1c434:	ldr	r5, [r6]
   1c438:	add	r0, sp, #12
   1c43c:	bl	12668 <ctime@plt>
   1c440:	str	r0, [sp]
   1c444:	asr	r3, r4, #31
   1c448:	movw	r1, #7284	; 0x1c74
   1c44c:	movt	r1, #4
   1c450:	mov	r0, r5
   1c454:	mov	r2, r4
   1c458:	bl	128fc <fprintf@plt>
   1c45c:	b	1c394 <__assert_fail@plt+0x97a4>
   1c460:	andeq	r0, r0, r0
   1c464:	rscsmi	r1, r5, r0, lsl #16
   1c468:	mov	r3, #2
   1c46c:	b	1df10 <__assert_fail@plt+0xb320>
   1c470:	push	{r4, r5, r6, r7, fp, lr}
   1c474:	add	fp, sp, #16
   1c478:	sub	sp, sp, #120	; 0x78
   1c47c:	mov	r5, r2
   1c480:	mov	r6, r1
   1c484:	mov	r4, r0
   1c488:	add	r7, sp, #16
   1c48c:	mov	r0, r7
   1c490:	bl	18270 <__assert_fail@plt+0x5680>
   1c494:	add	r3, sp, #12
   1c498:	mov	r0, r6
   1c49c:	mov	r1, r5
   1c4a0:	mov	r2, r7
   1c4a4:	bl	1e1fc <__assert_fail@plt+0xb60c>
   1c4a8:	mov	r1, r0
   1c4ac:	mov	r0, #0
   1c4b0:	cmp	r1, #0
   1c4b4:	beq	1c500 <__assert_fail@plt+0x9910>
   1c4b8:	ldr	r1, [sp, #12]
   1c4bc:	mov	r0, r4
   1c4c0:	bl	17fa4 <__assert_fail@plt+0x53b4>
   1c4c4:	mov	r4, r0
   1c4c8:	mov	r0, #2
   1c4cc:	str	r0, [r4, #40]	; 0x28
   1c4d0:	mov	r0, sp
   1c4d4:	add	r1, sp, #16
   1c4d8:	bl	2b0fc <__assert_fail@plt+0x1850c>
   1c4dc:	ldm	sp, {r0, r1}
   1c4e0:	mov	r2, #0
   1c4e4:	str	r2, [r4, #44]	; 0x2c
   1c4e8:	str	r0, [r4, #48]	; 0x30
   1c4ec:	str	r1, [r4, #52]	; 0x34
   1c4f0:	ldr	r0, [sp, #96]	; 0x60
   1c4f4:	bl	1c068 <__assert_fail@plt+0x9478>
   1c4f8:	vstr	s0, [r4, #28]
   1c4fc:	mov	r0, #1
   1c500:	sub	sp, fp, #16
   1c504:	pop	{r4, r5, r6, r7, fp, pc}
   1c508:	push	{r4, r5, r6, r7, fp, lr}
   1c50c:	add	fp, sp, #16
   1c510:	mov	r6, r0
   1c514:	mov	r0, #0
   1c518:	cmp	r1, #0
   1c51c:	beq	1c580 <__assert_fail@plt+0x9990>
   1c520:	mov	r4, r2
   1c524:	mov	r5, r1
   1c528:	ldr	r1, [r2]
   1c52c:	ldr	r1, [r5, r1, lsl #2]
   1c530:	cmp	r1, #0
   1c534:	beq	1c580 <__assert_fail@plt+0x9990>
   1c538:	bl	124dc <is_selinux_enabled@plt>
   1c53c:	cmp	r0, #0
   1c540:	ble	1c584 <__assert_fail@plt+0x9994>
   1c544:	mov	r7, #0
   1c548:	mov	r0, r6
   1c54c:	mov	r1, #0
   1c550:	bl	17fa4 <__assert_fail@plt+0x53b4>
   1c554:	movw	r1, #55050	; 0xd70a
   1c558:	movt	r1, #15395	; 0x3c23
   1c55c:	str	r1, [r0, #28]
   1c560:	strb	r7, [r0, #18]
   1c564:	ldr	r1, [r4]
   1c568:	ldr	r1, [r5, r1, lsl #2]
   1c56c:	str	r1, [r0, #40]	; 0x28
   1c570:	ldr	r0, [r4]
   1c574:	add	r0, r0, #1
   1c578:	str	r0, [r4]
   1c57c:	mov	r0, #1
   1c580:	pop	{r4, r5, r6, r7, fp, pc}
   1c584:	movw	r1, #7312	; 0x1c90
   1c588:	movt	r1, #4
   1c58c:	mov	r0, #0
   1c590:	mov	r2, #5
   1c594:	bl	12674 <dcgettext@plt>
   1c598:	mov	r2, r0
   1c59c:	mov	r0, #1
   1c5a0:	mov	r1, #0
   1c5a4:	bl	127b8 <error@plt>
   1c5a8:	push	{r4, sl, fp, lr}
   1c5ac:	add	fp, sp, #8
   1c5b0:	movw	r4, #24204	; 0x5e8c
   1c5b4:	movt	r4, #5
   1c5b8:	ldrb	r0, [r4, #36]	; 0x24
   1c5bc:	cmp	r0, #0
   1c5c0:	beq	1c5cc <__assert_fail@plt+0x99dc>
   1c5c4:	mov	r0, #1
   1c5c8:	pop	{r4, sl, fp, pc}
   1c5cc:	mov	r0, r4
   1c5d0:	ldr	r1, [r0, #28]!
   1c5d4:	mov	r2, #0
   1c5d8:	add	r1, r1, #4480	; 0x1180
   1c5dc:	add	r1, r1, #81920	; 0x14000
   1c5e0:	stm	r0, {r1, r2}
   1c5e4:	bl	12848 <localtime@plt>
   1c5e8:	cmp	r0, #0
   1c5ec:	beq	1c60c <__assert_fail@plt+0x9a1c>
   1c5f0:	ldm	r0, {r1, r2}
   1c5f4:	ldr	r0, [r0, #8]
   1c5f8:	rsb	r2, r2, r2, lsl #4
   1c5fc:	add	r1, r1, r2, lsl #2
   1c600:	mov	r2, #3600	; 0xe10
   1c604:	mla	r0, r0, r2, r1
   1c608:	b	1c630 <__assert_fail@plt+0x9a40>
   1c60c:	ldr	r0, [r4, #28]
   1c610:	movw	r1, #17671	; 0x4507
   1c614:	movt	r1, #49710	; 0xc22e
   1c618:	smmla	r1, r0, r1, r0
   1c61c:	asr	r2, r1, #16
   1c620:	add	r1, r2, r1, lsr #31
   1c624:	movw	r2, #675	; 0x2a3
   1c628:	mul	r1, r1, r2
   1c62c:	sub	r0, r0, r1, lsl #7
   1c630:	mov	r1, #1
   1c634:	strb	r1, [r4, #36]	; 0x24
   1c638:	ldr	r1, [r4, #28]
   1c63c:	sub	r0, r1, r0
   1c640:	str	r0, [r4, #28]
   1c644:	mov	r0, #1
   1c648:	pop	{r4, sl, fp, pc}
   1c64c:	push	{fp, lr}
   1c650:	mov	fp, sp
   1c654:	bl	17fe4 <__assert_fail@plt+0x53f4>
   1c658:	movw	r1, #257	; 0x101
   1c65c:	strh	r1, [r0, #16]
   1c660:	movw	r1, #24204	; 0x5e8c
   1c664:	movt	r1, #5
   1c668:	mov	r2, #0
   1c66c:	strb	r2, [r1]
   1c670:	strh	r2, [r0, #18]
   1c674:	mov	r1, #1065353216	; 0x3f800000
   1c678:	str	r1, [r0, #28]
   1c67c:	mov	r0, #1
   1c680:	pop	{fp, pc}
   1c684:	push	{r4, r5, r6, sl, fp, lr}
   1c688:	add	fp, sp, #16
   1c68c:	mov	r4, r2
   1c690:	mov	r5, r1
   1c694:	mov	r6, r0
   1c698:	bl	1bbf0 <__assert_fail@plt+0x9000>
   1c69c:	cmp	r0, #0
   1c6a0:	beq	1c6c8 <__assert_fail@plt+0x9ad8>
   1c6a4:	movw	r1, #7364	; 0x1cc4
   1c6a8:	movt	r1, #4
   1c6ac:	mov	r0, #0
   1c6b0:	mov	r2, #5
   1c6b4:	bl	12674 <dcgettext@plt>
   1c6b8:	mov	r2, r0
   1c6bc:	mov	r0, #0
   1c6c0:	mov	r1, #0
   1c6c4:	bl	127b8 <error@plt>
   1c6c8:	mov	r0, r6
   1c6cc:	mov	r1, r5
   1c6d0:	mov	r2, r4
   1c6d4:	bl	1c6e0 <__assert_fail@plt+0x9af0>
   1c6d8:	mov	r0, #1
   1c6dc:	pop	{r4, r5, r6, sl, fp, pc}
   1c6e0:	push	{fp, lr}
   1c6e4:	mov	fp, sp
   1c6e8:	mov	r0, r1
   1c6ec:	movw	r1, #24204	; 0x5e8c
   1c6f0:	movt	r1, #5
   1c6f4:	mov	r3, #256	; 0x100
   1c6f8:	strh	r3, [r1]
   1c6fc:	mov	r1, r2
   1c700:	bl	1e274 <__assert_fail@plt+0xb684>
   1c704:	mov	r0, #1
   1c708:	pop	{fp, pc}
   1c70c:	push	{fp, lr}
   1c710:	mov	fp, sp
   1c714:	bl	17fe4 <__assert_fail@plt+0x53f4>
   1c718:	movw	r1, #55050	; 0xd70a
   1c71c:	movt	r1, #15395	; 0x3c23
   1c720:	str	r1, [r0, #28]
   1c724:	mov	r0, #1
   1c728:	pop	{fp, pc}
   1c72c:	mov	r3, r2
   1c730:	mov	r2, r1
   1c734:	mov	r1, r0
   1c738:	movw	r0, #7478	; 0x1d36
   1c73c:	movt	r0, #4
   1c740:	b	1e2d8 <__assert_fail@plt+0xb6e8>
   1c744:	push	{fp, lr}
   1c748:	mov	fp, sp
   1c74c:	bl	17fe4 <__assert_fail@plt+0x53f4>
   1c750:	mov	r1, #0
   1c754:	str	r1, [r0, #16]
   1c758:	ldr	r1, [r0]
   1c75c:	add	r2, pc, #28
   1c760:	movw	r3, #19404	; 0x4bcc
   1c764:	movt	r3, #1
   1c768:	cmp	r1, r3
   1c76c:	addeq	r2, r2, #4
   1c770:	ldr	r1, [r2]
   1c774:	str	r1, [r0, #28]
   1c778:	mov	r0, #1
   1c77c:	pop	{fp, pc}
   1c780:	svccc	0x00666666
   1c784:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1c788:	mov	r3, r2
   1c78c:	mov	r2, r1
   1c790:	mov	r1, r0
   1c794:	movw	r0, #8332	; 0x208c
   1c798:	movt	r0, #4
   1c79c:	b	1e2d8 <__assert_fail@plt+0xb6e8>
   1c7a0:	push	{fp, lr}
   1c7a4:	mov	fp, sp
   1c7a8:	sub	sp, sp, #8
   1c7ac:	mov	r3, r2
   1c7b0:	mov	r0, r1
   1c7b4:	add	r2, sp, #4
   1c7b8:	mov	r1, r3
   1c7bc:	bl	1dfe8 <__assert_fail@plt+0xb3f8>
   1c7c0:	mov	r1, r0
   1c7c4:	mov	r0, #0
   1c7c8:	cmp	r1, #0
   1c7cc:	beq	1c7e4 <__assert_fail@plt+0x9bf4>
   1c7d0:	ldr	r0, [sp, #4]
   1c7d4:	movw	r1, #24204	; 0x5e8c
   1c7d8:	movt	r1, #5
   1c7dc:	str	r0, [r1, #76]	; 0x4c
   1c7e0:	mov	r0, #1
   1c7e4:	mov	sp, fp
   1c7e8:	pop	{fp, pc}
   1c7ec:	push	{r4, sl, fp, lr}
   1c7f0:	add	fp, sp, #8
   1c7f4:	sub	sp, sp, #8
   1c7f8:	mov	r3, r2
   1c7fc:	mov	r4, r0
   1c800:	add	r2, sp, #4
   1c804:	mov	r0, r1
   1c808:	mov	r1, r3
   1c80c:	bl	1dfe8 <__assert_fail@plt+0xb3f8>
   1c810:	mov	r1, r0
   1c814:	mov	r0, #0
   1c818:	cmp	r1, #0
   1c81c:	beq	1c830 <__assert_fail@plt+0x9c40>
   1c820:	ldr	r1, [sp, #4]
   1c824:	mov	r0, r4
   1c828:	bl	1e904 <__assert_fail@plt+0xbd14>
   1c82c:	mov	r0, #1
   1c830:	sub	sp, fp, #8
   1c834:	pop	{r4, sl, fp, pc}
   1c838:	push	{r4, r5, fp, lr}
   1c83c:	add	fp, sp, #8
   1c840:	mov	r4, r2
   1c844:	mov	r5, r1
   1c848:	mov	r0, #1
   1c84c:	bl	1b818 <__assert_fail@plt+0x8c28>
   1c850:	mov	r0, r5
   1c854:	mov	r1, r4
   1c858:	bl	1e274 <__assert_fail@plt+0xb684>
   1c85c:	mov	r0, #1
   1c860:	pop	{r4, r5, fp, pc}
   1c864:	push	{r4, r5, fp, lr}
   1c868:	add	fp, sp, #8
   1c86c:	sub	sp, sp, #8
   1c870:	mov	r3, r2
   1c874:	mov	r4, r0
   1c878:	add	r2, sp, #4
   1c87c:	mov	r0, r1
   1c880:	mov	r1, r3
   1c884:	bl	1dfe8 <__assert_fail@plt+0xb3f8>
   1c888:	mov	r1, r0
   1c88c:	mov	r0, #0
   1c890:	cmp	r1, #0
   1c894:	beq	1c8d4 <__assert_fail@plt+0x9ce4>
   1c898:	ldr	r5, [sp, #4]
   1c89c:	mov	r0, r4
   1c8a0:	mov	r1, r5
   1c8a4:	bl	17fa4 <__assert_fail@plt+0x53b4>
   1c8a8:	mov	r4, r0
   1c8ac:	add	r1, r0, #40	; 0x28
   1c8b0:	mov	r0, r5
   1c8b4:	bl	1e94c <__assert_fail@plt+0xbd5c>
   1c8b8:	mov	r0, #0
   1c8bc:	strb	r0, [r4, #19]
   1c8c0:	mov	r0, #1
   1c8c4:	strb	r0, [r4, #16]
   1c8c8:	strh	r0, [r4, #17]
   1c8cc:	mov	r1, #1065353216	; 0x3f800000
   1c8d0:	str	r1, [r4, #28]
   1c8d4:	sub	sp, fp, #8
   1c8d8:	pop	{r4, r5, fp, pc}
   1c8dc:	push	{r4, sl, fp, lr}
   1c8e0:	add	fp, sp, #8
   1c8e4:	sub	sp, sp, #8
   1c8e8:	mov	r3, r2
   1c8ec:	mov	r4, r0
   1c8f0:	add	r2, sp, #4
   1c8f4:	mov	r0, r1
   1c8f8:	mov	r1, r3
   1c8fc:	bl	1dfe8 <__assert_fail@plt+0xb3f8>
   1c900:	mov	r1, r0
   1c904:	mov	r0, #0
   1c908:	cmp	r1, #0
   1c90c:	beq	1c920 <__assert_fail@plt+0x9d30>
   1c910:	ldr	r1, [sp, #4]
   1c914:	mov	r0, r4
   1c918:	bl	1ea48 <__assert_fail@plt+0xbe58>
   1c91c:	mov	r0, #1
   1c920:	sub	sp, fp, #8
   1c924:	pop	{r4, sl, fp, pc}
   1c928:	push	{r4, r5, r6, r7, fp, lr}
   1c92c:	add	fp, sp, #16
   1c930:	sub	sp, sp, #32
   1c934:	mov	r4, r2
   1c938:	mov	r6, r1
   1c93c:	mov	r5, r0
   1c940:	ldr	r7, [r2]
   1c944:	sub	r2, fp, #20
   1c948:	mov	r0, r1
   1c94c:	mov	r1, r4
   1c950:	bl	1dfe8 <__assert_fail@plt+0xb3f8>
   1c954:	cmp	r0, #0
   1c958:	beq	1c9a8 <__assert_fail@plt+0x9db8>
   1c95c:	add	r2, sp, #24
   1c960:	mov	r0, r6
   1c964:	mov	r1, r4
   1c968:	bl	1e188 <__assert_fail@plt+0xb598>
   1c96c:	cmp	r0, #0
   1c970:	beq	1c9a8 <__assert_fail@plt+0x9db8>
   1c974:	ldr	r0, [fp, #-20]	; 0xffffffec
   1c978:	add	r6, sp, #4
   1c97c:	mov	r1, r6
   1c980:	bl	1e94c <__assert_fail@plt+0xbd5c>
   1c984:	ldr	r7, [r4]
   1c988:	ldr	r2, [sp, #24]
   1c98c:	mov	r0, r6
   1c990:	mov	r1, r5
   1c994:	bl	19b40 <__assert_fail@plt+0x6f50>
   1c998:	mov	r1, r0
   1c99c:	mov	r0, #1
   1c9a0:	cmp	r1, #0
   1c9a4:	bne	1c9b0 <__assert_fail@plt+0x9dc0>
   1c9a8:	str	r7, [r4]
   1c9ac:	mov	r0, #0
   1c9b0:	sub	sp, fp, #16
   1c9b4:	pop	{r4, r5, r6, r7, fp, pc}
   1c9b8:	push	{r4, r5, r6, sl, fp, lr}
   1c9bc:	add	fp, sp, #16
   1c9c0:	sub	sp, sp, #8
   1c9c4:	mov	r3, r2
   1c9c8:	mov	r4, r0
   1c9cc:	add	r2, sp, #4
   1c9d0:	mov	r0, r1
   1c9d4:	mov	r1, r3
   1c9d8:	bl	1dfe8 <__assert_fail@plt+0xb3f8>
   1c9dc:	mov	r1, r0
   1c9e0:	mov	r0, #0
   1c9e4:	cmp	r1, #0
   1c9e8:	beq	1ca50 <__assert_fail@plt+0x9e60>
   1c9ec:	movw	r6, #24204	; 0x5e8c
   1c9f0:	movt	r6, #5
   1c9f4:	ldrh	r0, [r6, #68]	; 0x44
   1c9f8:	cmp	r0, #2
   1c9fc:	bcc	1ca14 <__assert_fail@plt+0x9e24>
   1ca00:	ldr	r5, [sp, #4]
   1ca04:	mov	r0, r5
   1ca08:	bl	1b518 <__assert_fail@plt+0x8928>
   1ca0c:	cmp	r0, #0
   1ca10:	beq	1ca3c <__assert_fail@plt+0x9e4c>
   1ca14:	ldr	r5, [sp, #4]
   1ca18:	mov	r0, r4
   1ca1c:	mov	r1, r5
   1ca20:	bl	17fa4 <__assert_fail@plt+0x53b4>
   1ca24:	mov	r4, r0
   1ca28:	str	r5, [r0, #40]	; 0x28
   1ca2c:	mov	r0, r5
   1ca30:	bl	1ea9c <__assert_fail@plt+0xbeac>
   1ca34:	vstr	s0, [r4, #28]
   1ca38:	b	1ca4c <__assert_fail@plt+0x9e5c>
   1ca3c:	ldrb	r0, [r6, #44]	; 0x2c
   1ca40:	tst	r0, #8
   1ca44:	bne	1ca58 <__assert_fail@plt+0x9e68>
   1ca48:	bl	1eb0c <__assert_fail@plt+0xbf1c>
   1ca4c:	mov	r0, #1
   1ca50:	sub	sp, fp, #16
   1ca54:	pop	{r4, r5, r6, sl, fp, pc}
   1ca58:	movw	r0, #21864	; 0x5568
   1ca5c:	movt	r0, #5
   1ca60:	ldr	r0, [r0]
   1ca64:	movw	r1, #8380	; 0x20bc
   1ca68:	movt	r1, #4
   1ca6c:	mov	r2, r5
   1ca70:	bl	128fc <fprintf@plt>
   1ca74:	b	1ca48 <__assert_fail@plt+0x9e58>
   1ca78:	push	{r4, sl, fp, lr}
   1ca7c:	add	fp, sp, #8
   1ca80:	mov	r4, r2
   1ca84:	mov	r2, r0
   1ca88:	mov	r0, r1
   1ca8c:	mov	r1, r4
   1ca90:	bl	1eb34 <__assert_fail@plt+0xbf44>
   1ca94:	cmp	r0, #0
   1ca98:	beq	1cac0 <__assert_fail@plt+0x9ed0>
   1ca9c:	add	r1, pc, #48	; 0x30
   1caa0:	ldrd	r2, [r0, #48]	; 0x30
   1caa4:	subs	r2, r2, #100	; 0x64
   1caa8:	sbcs	r2, r3, #0
   1caac:	addcc	r1, r1, #4
   1cab0:	ldr	r1, [r1]
   1cab4:	str	r1, [r0, #28]
   1cab8:	mov	r0, #1
   1cabc:	pop	{r4, sl, fp, pc}
   1cac0:	ldr	r0, [r4]
   1cac4:	sub	r0, r0, #1
   1cac8:	str	r0, [r4]
   1cacc:	mov	r0, #0
   1cad0:	pop	{r4, sl, fp, pc}
   1cad4:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1cad8:	svccc	0x007d70a4
   1cadc:	push	{r4, r5, r6, r7, fp, lr}
   1cae0:	add	fp, sp, #16
   1cae4:	sub	sp, sp, #8
   1cae8:	mov	r3, r2
   1caec:	mov	r5, r0
   1caf0:	add	r2, sp, #4
   1caf4:	mov	r0, r1
   1caf8:	mov	r1, r3
   1cafc:	bl	1dfe8 <__assert_fail@plt+0xb3f8>
   1cb00:	mov	r1, r0
   1cb04:	mov	r0, #0
   1cb08:	cmp	r1, #0
   1cb0c:	beq	1cba4 <__assert_fail@plt+0x9fb4>
   1cb10:	ldr	r4, [sp, #4]
   1cb14:	mov	r0, r4
   1cb18:	bl	12bd8 <getgrnam@plt>
   1cb1c:	mov	r6, r0
   1cb20:	bl	12488 <endgrent@plt>
   1cb24:	cmp	r6, #0
   1cb28:	beq	1cb34 <__assert_fail@plt+0x9f44>
   1cb2c:	ldr	r6, [r6, #8]
   1cb30:	b	1cb74 <__assert_fail@plt+0x9f84>
   1cb34:	movw	r1, #8440	; 0x20f8
   1cb38:	movt	r1, #4
   1cb3c:	mov	r0, r4
   1cb40:	bl	12be4 <strspn@plt>
   1cb44:	cmp	r0, #0
   1cb48:	beq	1cbac <__assert_fail@plt+0x9fbc>
   1cb4c:	mov	r6, r4
   1cb50:	ldrb	r0, [r6, r0]!
   1cb54:	cmp	r0, #0
   1cb58:	bne	1cbdc <__assert_fail@plt+0x9fec>
   1cb5c:	movw	r0, #24204	; 0x5e8c
   1cb60:	movt	r0, #5
   1cb64:	ldr	r1, [r0, #72]	; 0x48
   1cb68:	mov	r0, r4
   1cb6c:	bl	217bc <__assert_fail@plt+0xebcc>
   1cb70:	mov	r6, r0
   1cb74:	mov	r0, r5
   1cb78:	mov	r1, r4
   1cb7c:	bl	17fa4 <__assert_fail@plt+0x53b4>
   1cb80:	str	r6, [r0, #40]	; 0x28
   1cb84:	ldrd	r2, [r0, #48]	; 0x30
   1cb88:	add	r1, pc, #236	; 0xec
   1cb8c:	subs	r2, r2, #100	; 0x64
   1cb90:	sbcs	r2, r3, #0
   1cb94:	addcc	r1, r1, #4
   1cb98:	ldr	r1, [r1]
   1cb9c:	str	r1, [r0, #28]
   1cba0:	mov	r0, #1
   1cba4:	sub	sp, fp, #16
   1cba8:	pop	{r4, r5, r6, r7, fp, pc}
   1cbac:	ldrb	r0, [r4]
   1cbb0:	cmp	r0, #0
   1cbb4:	bne	1cc38 <__assert_fail@plt+0xa048>
   1cbb8:	movw	r1, #8616	; 0x21a8
   1cbbc:	movt	r1, #4
   1cbc0:	mov	r0, #0
   1cbc4:	mov	r2, #5
   1cbc8:	bl	12674 <dcgettext@plt>
   1cbcc:	mov	r2, r0
   1cbd0:	mov	r0, #1
   1cbd4:	mov	r1, #0
   1cbd8:	bl	127b8 <error@plt>
   1cbdc:	movw	r1, #8451	; 0x2103
   1cbe0:	movt	r1, #4
   1cbe4:	mov	r0, #0
   1cbe8:	mov	r2, #5
   1cbec:	bl	12674 <dcgettext@plt>
   1cbf0:	mov	r5, r0
   1cbf4:	movw	r7, #24204	; 0x5e8c
   1cbf8:	movt	r7, #5
   1cbfc:	ldr	r1, [r7, #72]	; 0x48
   1cc00:	mov	r0, #0
   1cc04:	mov	r2, r4
   1cc08:	bl	2a088 <__assert_fail@plt+0x17498>
   1cc0c:	mov	r4, r0
   1cc10:	ldr	r1, [r7, #72]	; 0x48
   1cc14:	mov	r0, #1
   1cc18:	mov	r2, r6
   1cc1c:	bl	2a088 <__assert_fail@plt+0x17498>
   1cc20:	str	r0, [sp]
   1cc24:	mov	r0, #1
   1cc28:	mov	r1, #0
   1cc2c:	mov	r2, r5
   1cc30:	mov	r3, r4
   1cc34:	bl	127b8 <error@plt>
   1cc38:	movw	r1, #8576	; 0x2180
   1cc3c:	movt	r1, #4
   1cc40:	mov	r0, #0
   1cc44:	mov	r2, #5
   1cc48:	bl	12674 <dcgettext@plt>
   1cc4c:	mov	r5, r0
   1cc50:	movw	r0, #24204	; 0x5e8c
   1cc54:	movt	r0, #5
   1cc58:	ldr	r1, [r0, #72]	; 0x48
   1cc5c:	mov	r0, #0
   1cc60:	mov	r2, r4
   1cc64:	bl	2a088 <__assert_fail@plt+0x17498>
   1cc68:	mov	r3, r0
   1cc6c:	mov	r0, #1
   1cc70:	mov	r1, #0
   1cc74:	mov	r2, r5
   1cc78:	bl	127b8 <error@plt>
   1cc7c:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1cc80:	svccc	0x007d70a4
   1cc84:	push	{fp, lr}
   1cc88:	mov	fp, sp
   1cc8c:	mov	r0, r1
   1cc90:	movw	r1, #24204	; 0x5e8c
   1cc94:	movt	r1, #5
   1cc98:	mov	r3, #1
   1cc9c:	strb	r3, [r1, #14]
   1cca0:	mov	r1, r2
   1cca4:	bl	1e274 <__assert_fail@plt+0xb684>
   1cca8:	mov	r0, #1
   1ccac:	pop	{fp, pc}
   1ccb0:	push	{r4, r5, fp, lr}
   1ccb4:	add	fp, sp, #8
   1ccb8:	sub	sp, sp, #8
   1ccbc:	mov	r3, r2
   1ccc0:	mov	r4, r0
   1ccc4:	add	r2, sp, #4
   1ccc8:	mov	r0, r1
   1cccc:	mov	r1, r3
   1ccd0:	bl	1dfe8 <__assert_fail@plt+0xb3f8>
   1ccd4:	mov	r1, r0
   1ccd8:	mov	r0, #0
   1ccdc:	cmp	r1, #0
   1cce0:	beq	1cd18 <__assert_fail@plt+0xa128>
   1cce4:	ldr	r5, [sp, #4]
   1cce8:	mov	r0, r4
   1ccec:	mov	r1, r5
   1ccf0:	bl	17fa4 <__assert_fail@plt+0x53b4>
   1ccf4:	mov	r4, r0
   1ccf8:	str	r5, [r0, #40]	; 0x28
   1ccfc:	mov	r0, r5
   1cd00:	mov	r1, #0
   1cd04:	bl	1ecd8 <__assert_fail@plt+0xc0e8>
   1cd08:	vldr	s2, [pc, #16]	; 1cd20 <__assert_fail@plt+0xa130>
   1cd0c:	vmul.f32	s0, s0, s2
   1cd10:	vstr	s0, [r4, #28]
   1cd14:	mov	r0, #1
   1cd18:	sub	sp, fp, #8
   1cd1c:	pop	{r4, r5, fp, pc}
   1cd20:	stclcc	12, cr12, [ip, #820]	; 0x334
   1cd24:	push	{r4, r5, r6, sl, fp, lr}
   1cd28:	add	fp, sp, #16
   1cd2c:	sub	sp, sp, #8
   1cd30:	mov	r5, r2
   1cd34:	mov	r6, r1
   1cd38:	mov	r4, r0
   1cd3c:	bl	1ed38 <__assert_fail@plt+0xc148>
   1cd40:	add	r2, sp, #4
   1cd44:	mov	r0, r6
   1cd48:	mov	r1, r5
   1cd4c:	bl	1dfe8 <__assert_fail@plt+0xb3f8>
   1cd50:	mov	r1, r0
   1cd54:	mov	r0, #0
   1cd58:	cmp	r1, #0
   1cd5c:	beq	1cdac <__assert_fail@plt+0xa1bc>
   1cd60:	ldr	r5, [sp, #4]
   1cd64:	movw	r0, #8676	; 0x21e4
   1cd68:	movt	r0, #4
   1cd6c:	movw	r1, #8683	; 0x21eb
   1cd70:	movt	r1, #4
   1cd74:	mov	r2, r5
   1cd78:	bl	1ede0 <__assert_fail@plt+0xc1f0>
   1cd7c:	mov	r0, r4
   1cd80:	mov	r1, r5
   1cd84:	bl	17fa4 <__assert_fail@plt+0x53b4>
   1cd88:	mov	r4, r0
   1cd8c:	mov	r0, #0
   1cd90:	strh	r0, [r4, #18]
   1cd94:	ldr	r0, [sp, #4]
   1cd98:	str	r0, [r4, #40]	; 0x28
   1cd9c:	mov	r1, #0
   1cda0:	bl	1ecd8 <__assert_fail@plt+0xc0e8>
   1cda4:	vstr	s0, [r4, #28]
   1cda8:	mov	r0, #1
   1cdac:	sub	sp, fp, #16
   1cdb0:	pop	{r4, r5, r6, sl, fp, pc}
   1cdb4:	push	{r4, sl, fp, lr}
   1cdb8:	add	fp, sp, #8
   1cdbc:	mov	r4, r2
   1cdc0:	mov	r2, r0
   1cdc4:	mov	r0, r1
   1cdc8:	mov	r1, r4
   1cdcc:	bl	1eb34 <__assert_fail@plt+0xbf44>
   1cdd0:	cmp	r0, #0
   1cdd4:	beq	1cdfc <__assert_fail@plt+0xa20c>
   1cdd8:	mov	r1, r0
   1cddc:	mov	r0, #1
   1cde0:	strb	r0, [r1, #20]
   1cde4:	movw	r2, #14269	; 0x37bd
   1cde8:	movt	r2, #13702	; 0x3586
   1cdec:	str	r2, [r1, #28]
   1cdf0:	mov	r2, #0
   1cdf4:	strh	r2, [r1, #18]
   1cdf8:	pop	{r4, sl, fp, pc}
   1cdfc:	ldr	r0, [r4]
   1ce00:	sub	r0, r0, #1
   1ce04:	str	r0, [r4]
   1ce08:	mov	r0, #0
   1ce0c:	pop	{r4, sl, fp, pc}
   1ce10:	push	{fp, lr}
   1ce14:	mov	fp, sp
   1ce18:	sub	sp, sp, #8
   1ce1c:	movw	r3, #18040	; 0x4678
   1ce20:	movt	r3, #1
   1ce24:	str	r3, [sp]
   1ce28:	movw	r3, #6774	; 0x1a76
   1ce2c:	movt	r3, #4
   1ce30:	bl	1ee84 <__assert_fail@plt+0xc294>
   1ce34:	mov	sp, fp
   1ce38:	pop	{fp, pc}
   1ce3c:	mov	ip, r2
   1ce40:	mov	r2, r0
   1ce44:	movw	r0, #24204	; 0x5e8c
   1ce48:	movt	r0, #5
   1ce4c:	ldr	r0, [r0, #60]	; 0x3c
   1ce50:	orr	r3, r0, #4194304	; 0x400000
   1ce54:	mov	r0, r1
   1ce58:	mov	r1, ip
   1ce5c:	b	1efbc <__assert_fail@plt+0xc3cc>
   1ce60:	push	{fp, lr}
   1ce64:	mov	fp, sp
   1ce68:	sub	sp, sp, #8
   1ce6c:	movw	r3, #18040	; 0x4678
   1ce70:	movt	r3, #1
   1ce74:	str	r3, [sp]
   1ce78:	movw	r3, #8684	; 0x21ec
   1ce7c:	movt	r3, #4
   1ce80:	bl	1ee84 <__assert_fail@plt+0xc294>
   1ce84:	mov	sp, fp
   1ce88:	pop	{fp, pc}
   1ce8c:	push	{r4, sl, fp, lr}
   1ce90:	add	fp, sp, #8
   1ce94:	mov	r4, r2
   1ce98:	mov	r2, r0
   1ce9c:	mov	r0, r1
   1cea0:	mov	r1, r4
   1cea4:	bl	1eb34 <__assert_fail@plt+0xbf44>
   1cea8:	cmp	r0, #0
   1ceac:	beq	1ced0 <__assert_fail@plt+0xa2e0>
   1ceb0:	ldr	r2, [r0, #48]	; 0x30
   1ceb4:	ldr	r1, [r0, #52]	; 0x34
   1ceb8:	eor	r3, r2, #1
   1cebc:	orrs	r3, r3, r1
   1cec0:	bne	1cee4 <__assert_fail@plt+0xa2f4>
   1cec4:	movw	r1, #28836	; 0x70a4
   1cec8:	movt	r1, #16253	; 0x3f7d
   1cecc:	b	1cf04 <__assert_fail@plt+0xa314>
   1ced0:	ldr	r0, [r4]
   1ced4:	sub	r0, r0, #1
   1ced8:	str	r0, [r4]
   1cedc:	mov	r0, #0
   1cee0:	pop	{r4, sl, fp, pc}
   1cee4:	eor	r2, r2, #2
   1cee8:	orrs	r1, r2, r1
   1ceec:	bne	1cefc <__assert_fail@plt+0xa30c>
   1cef0:	movw	r1, #55050	; 0xd70a
   1cef4:	movt	r1, #15395	; 0x3c23
   1cef8:	b	1cf04 <__assert_fail@plt+0xa314>
   1cefc:	movw	r1, #4719	; 0x126f
   1cf00:	movt	r1, #14979	; 0x3a83
   1cf04:	str	r1, [r0, #28]
   1cf08:	mov	r0, #1
   1cf0c:	pop	{r4, sl, fp, pc}
   1cf10:	push	{r4, r5, r6, sl, fp, lr}
   1cf14:	add	fp, sp, #16
   1cf18:	sub	sp, sp, #8
   1cf1c:	mov	r5, r2
   1cf20:	mov	r6, r1
   1cf24:	mov	r4, r0
   1cf28:	bl	1ed38 <__assert_fail@plt+0xc148>
   1cf2c:	add	r2, sp, #4
   1cf30:	mov	r0, r6
   1cf34:	mov	r1, r5
   1cf38:	bl	1dfe8 <__assert_fail@plt+0xb3f8>
   1cf3c:	mov	r1, r0
   1cf40:	mov	r0, #0
   1cf44:	cmp	r1, #0
   1cf48:	beq	1cf80 <__assert_fail@plt+0xa390>
   1cf4c:	ldr	r5, [sp, #4]
   1cf50:	mov	r0, r4
   1cf54:	mov	r1, r5
   1cf58:	bl	17fa4 <__assert_fail@plt+0x53b4>
   1cf5c:	mov	r4, r0
   1cf60:	str	r5, [r0, #40]	; 0x28
   1cf64:	mov	r0, r5
   1cf68:	mov	r1, #0
   1cf6c:	bl	1ecd8 <__assert_fail@plt+0xc0e8>
   1cf70:	vldr	s2, [pc, #16]	; 1cf88 <__assert_fail@plt+0xa398>
   1cf74:	vmul.f32	s0, s0, s2
   1cf78:	vstr	s0, [r4, #28]
   1cf7c:	mov	r0, #1
   1cf80:	sub	sp, fp, #16
   1cf84:	pop	{r4, r5, r6, sl, fp, pc}
   1cf88:	stclcc	12, cr12, [ip, #820]	; 0x334
   1cf8c:	push	{fp, lr}
   1cf90:	mov	fp, sp
   1cf94:	mov	r1, #0
   1cf98:	bl	1e904 <__assert_fail@plt+0xbd14>
   1cf9c:	mov	r0, #1
   1cfa0:	pop	{fp, pc}
   1cfa4:	mov	r3, r2
   1cfa8:	mov	r0, r1
   1cfac:	movw	r1, #24204	; 0x5e8c
   1cfb0:	movt	r1, #5
   1cfb4:	add	r2, r1, #4
   1cfb8:	mov	r1, r3
   1cfbc:	b	1f0b0 <__assert_fail@plt+0xc4c0>
   1cfc0:	mov	r3, r2
   1cfc4:	mov	r0, r1
   1cfc8:	movw	r1, #24204	; 0x5e8c
   1cfcc:	movt	r1, #5
   1cfd0:	add	r2, r1, #8
   1cfd4:	mov	r1, r3
   1cfd8:	b	1f0b0 <__assert_fail@plt+0xc4c0>
   1cfdc:	mov	r3, #3
   1cfe0:	b	1df10 <__assert_fail@plt+0xb320>
   1cfe4:	push	{fp, lr}
   1cfe8:	mov	fp, sp
   1cfec:	mov	r0, r1
   1cff0:	movw	r1, #24204	; 0x5e8c
   1cff4:	movt	r1, #5
   1cff8:	mov	r3, #1
   1cffc:	strb	r3, [r1, #13]
   1d000:	mov	r1, r2
   1d004:	bl	1e274 <__assert_fail@plt+0xb684>
   1d008:	mov	r0, #1
   1d00c:	pop	{fp, pc}
   1d010:	push	{r4, r5, fp, lr}
   1d014:	add	fp, sp, #8
   1d018:	sub	sp, sp, #8
   1d01c:	mov	r3, r2
   1d020:	mov	r4, r0
   1d024:	add	r2, sp, #4
   1d028:	mov	r0, r1
   1d02c:	mov	r1, r3
   1d030:	bl	1dfe8 <__assert_fail@plt+0xb3f8>
   1d034:	mov	r1, r0
   1d038:	mov	r0, #0
   1d03c:	cmp	r1, #0
   1d040:	beq	1d094 <__assert_fail@plt+0xa4a4>
   1d044:	bl	1ed38 <__assert_fail@plt+0xc148>
   1d048:	ldr	r5, [sp, #4]
   1d04c:	movw	r0, #9109	; 0x2395
   1d050:	movt	r0, #4
   1d054:	movw	r1, #9115	; 0x239b
   1d058:	movt	r1, #4
   1d05c:	mov	r2, r5
   1d060:	bl	1ede0 <__assert_fail@plt+0xc1f0>
   1d064:	mov	r0, r4
   1d068:	mov	r1, r5
   1d06c:	bl	17fa4 <__assert_fail@plt+0x53b4>
   1d070:	mov	r4, r0
   1d074:	mov	r0, #0
   1d078:	strh	r0, [r4, #18]
   1d07c:	ldr	r0, [sp, #4]
   1d080:	str	r0, [r4, #40]	; 0x28
   1d084:	mov	r1, #0
   1d088:	bl	1ecd8 <__assert_fail@plt+0xc0e8>
   1d08c:	vstr	s0, [r4, #28]
   1d090:	mov	r0, #1
   1d094:	sub	sp, fp, #8
   1d098:	pop	{r4, r5, fp, pc}
   1d09c:	push	{r4, r5, r6, r7, fp, lr}
   1d0a0:	add	fp, sp, #16
   1d0a4:	sub	sp, sp, #120	; 0x78
   1d0a8:	mov	r5, r2
   1d0ac:	mov	r6, r1
   1d0b0:	mov	r4, r0
   1d0b4:	add	r7, sp, #16
   1d0b8:	mov	r0, r7
   1d0bc:	bl	18270 <__assert_fail@plt+0x5680>
   1d0c0:	add	r3, sp, #12
   1d0c4:	mov	r0, r6
   1d0c8:	mov	r1, r5
   1d0cc:	mov	r2, r7
   1d0d0:	bl	1e1fc <__assert_fail@plt+0xb60c>
   1d0d4:	mov	r1, r0
   1d0d8:	mov	r0, #0
   1d0dc:	cmp	r1, #0
   1d0e0:	beq	1d12c <__assert_fail@plt+0xa53c>
   1d0e4:	ldr	r1, [sp, #12]
   1d0e8:	mov	r0, r4
   1d0ec:	bl	17fa4 <__assert_fail@plt+0x53b4>
   1d0f0:	mov	r4, r0
   1d0f4:	mov	r0, sp
   1d0f8:	add	r1, sp, #16
   1d0fc:	bl	2b0fc <__assert_fail@plt+0x1850c>
   1d100:	ldm	sp, {r0, r1}
   1d104:	mov	r2, #0
   1d108:	mov	r3, #3
   1d10c:	str	r3, [r4, #40]	; 0x28
   1d110:	str	r2, [r4, #44]	; 0x2c
   1d114:	str	r0, [r4, #48]	; 0x30
   1d118:	str	r1, [r4, #52]	; 0x34
   1d11c:	ldr	r0, [sp, #96]	; 0x60
   1d120:	bl	1c068 <__assert_fail@plt+0x9478>
   1d124:	vstr	s0, [r4, #28]
   1d128:	mov	r0, #1
   1d12c:	sub	sp, fp, #16
   1d130:	pop	{r4, r5, r6, r7, fp, pc}
   1d134:	push	{fp, lr}
   1d138:	mov	fp, sp
   1d13c:	mov	r0, r1
   1d140:	movw	r1, #24204	; 0x5e8c
   1d144:	movt	r1, #5
   1d148:	mov	r3, #1
   1d14c:	strb	r3, [r1, #12]
   1d150:	mov	r1, r2
   1d154:	bl	1e274 <__assert_fail@plt+0xb684>
   1d158:	mov	r0, #1
   1d15c:	pop	{fp, pc}
   1d160:	push	{fp, lr}
   1d164:	mov	fp, sp
   1d168:	mov	r1, #0
   1d16c:	bl	17fa4 <__assert_fail@plt+0x53b4>
   1d170:	movw	r1, #46871	; 0xb717
   1d174:	movt	r1, #14545	; 0x38d1
   1d178:	str	r1, [r0, #28]
   1d17c:	mov	r0, #1
   1d180:	pop	{fp, pc}
   1d184:	push	{fp, lr}
   1d188:	mov	fp, sp
   1d18c:	bl	17fe4 <__assert_fail@plt+0x53f4>
   1d190:	movw	r1, #4719	; 0x126f
   1d194:	movt	r1, #14979	; 0x3a83
   1d198:	str	r1, [r0, #28]
   1d19c:	mov	r0, #1
   1d1a0:	pop	{fp, pc}
   1d1a4:	push	{fp, lr}
   1d1a8:	mov	fp, sp
   1d1ac:	mov	r0, r1
   1d1b0:	movw	r1, #24204	; 0x5e8c
   1d1b4:	movt	r1, #5
   1d1b8:	mov	r3, #0
   1d1bc:	strb	r3, [r1, #14]
   1d1c0:	mov	r1, r2
   1d1c4:	bl	1e274 <__assert_fail@plt+0xb684>
   1d1c8:	mov	r0, #1
   1d1cc:	pop	{fp, pc}
   1d1d0:	push	{fp, lr}
   1d1d4:	mov	fp, sp
   1d1d8:	mov	r0, r1
   1d1dc:	movw	r1, #24204	; 0x5e8c
   1d1e0:	movt	r1, #5
   1d1e4:	mov	r3, #0
   1d1e8:	strb	r3, [r1, #16]
   1d1ec:	mov	r1, r2
   1d1f0:	bl	1e274 <__assert_fail@plt+0xb684>
   1d1f4:	mov	r0, #1
   1d1f8:	pop	{fp, pc}
   1d1fc:	push	{fp, lr}
   1d200:	mov	fp, sp
   1d204:	mov	r0, r1
   1d208:	movw	r1, #24204	; 0x5e8c
   1d20c:	movt	r1, #5
   1d210:	mov	r3, #1
   1d214:	strb	r3, [r1, #16]
   1d218:	mov	r1, r2
   1d21c:	bl	1e274 <__assert_fail@plt+0xb684>
   1d220:	mov	r0, #1
   1d224:	pop	{fp, pc}
   1d228:	push	{fp, lr}
   1d22c:	mov	fp, sp
   1d230:	bl	172f8 <__assert_fail@plt+0x4708>
   1d234:	mov	r1, #2
   1d238:	mov	r2, #3
   1d23c:	str	r2, [r0, #8]
   1d240:	str	r1, [r0, #12]
   1d244:	movw	r1, #19164	; 0x4adc
   1d248:	movt	r1, #1
   1d24c:	str	r1, [r0]
   1d250:	mov	r1, #0
   1d254:	strh	r1, [r0, #18]
   1d258:	mov	r0, #1
   1d25c:	pop	{fp, pc}
   1d260:	mov	r3, r2
   1d264:	mov	r2, r1
   1d268:	mov	r1, r0
   1d26c:	movw	r0, #62700	; 0xf4ec
   1d270:	movt	r0, #3
   1d274:	b	1e2d8 <__assert_fail@plt+0xb6e8>
   1d278:	mov	r3, r2
   1d27c:	mov	r2, r1
   1d280:	mov	r1, r0
   1d284:	movw	r0, #60284	; 0xeb7c
   1d288:	movt	r0, #3
   1d28c:	b	1e2d8 <__assert_fail@plt+0xb6e8>
   1d290:	push	{fp, lr}
   1d294:	mov	fp, sp
   1d298:	sub	sp, sp, #8
   1d29c:	movw	r3, #19244	; 0x4b2c
   1d2a0:	movt	r3, #1
   1d2a4:	str	r3, [sp]
   1d2a8:	movw	r3, #6775	; 0x1a77
   1d2ac:	movt	r3, #4
   1d2b0:	bl	1ee84 <__assert_fail@plt+0xc294>
   1d2b4:	mov	sp, fp
   1d2b8:	pop	{fp, pc}
   1d2bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d2c0:	add	fp, sp, #28
   1d2c4:	sub	sp, sp, #4
   1d2c8:	vpush	{d8}
   1d2cc:	sub	sp, sp, #8
   1d2d0:	mov	r3, r2
   1d2d4:	mov	r8, r0
   1d2d8:	add	r2, sp, #4
   1d2dc:	mov	r0, r1
   1d2e0:	mov	r1, r3
   1d2e4:	bl	1dfe8 <__assert_fail@plt+0xb3f8>
   1d2e8:	mov	r6, #0
   1d2ec:	cmp	r0, #0
   1d2f0:	beq	1d40c <__assert_fail@plt+0xa81c>
   1d2f4:	ldr	r4, [sp, #4]
   1d2f8:	ldrb	r0, [r4]
   1d2fc:	cmp	r0, #45	; 0x2d
   1d300:	beq	1d31c <__assert_fail@plt+0xa72c>
   1d304:	cmp	r0, #47	; 0x2f
   1d308:	bne	1d32c <__assert_fail@plt+0xa73c>
   1d30c:	mov	r0, #1
   1d310:	vldr	s16, [pc, #336]	; 1d468 <__assert_fail@plt+0xa878>
   1d314:	mov	sl, #1
   1d318:	b	1d338 <__assert_fail@plt+0xa748>
   1d31c:	vldr	s16, [pc, #320]	; 1d464 <__assert_fail@plt+0xa874>
   1d320:	mov	sl, #0
   1d324:	mov	r0, #1
   1d328:	b	1d338 <__assert_fail@plt+0xa748>
   1d32c:	mov	sl, #2
   1d330:	vldr	s16, [pc, #308]	; 1d46c <__assert_fail@plt+0xa87c>
   1d334:	mov	r0, #0
   1d338:	add	r0, r4, r0
   1d33c:	bl	2500c <__assert_fail@plt+0x1241c>
   1d340:	cmp	r0, #0
   1d344:	beq	1d420 <__assert_fail@plt+0xa830>
   1d348:	mov	r7, r0
   1d34c:	ldrb	r0, [r4]
   1d350:	cmp	r0, #43	; 0x2b
   1d354:	bne	1d368 <__assert_fail@plt+0xa778>
   1d358:	ldrb	r0, [r4, #1]
   1d35c:	and	r0, r0, #248	; 0xf8
   1d360:	cmp	r0, #48	; 0x30
   1d364:	beq	1d420 <__assert_fail@plt+0xa830>
   1d368:	mov	r5, #0
   1d36c:	str	r5, [sp]
   1d370:	mov	r0, #0
   1d374:	mov	r1, #0
   1d378:	mov	r2, #0
   1d37c:	mov	r3, r7
   1d380:	bl	254c0 <__assert_fail@plt+0x128d0>
   1d384:	mov	r9, r0
   1d388:	str	r5, [sp]
   1d38c:	mov	r6, #1
   1d390:	mov	r0, #0
   1d394:	mov	r1, #1
   1d398:	mov	r2, #0
   1d39c:	mov	r3, r7
   1d3a0:	bl	254c0 <__assert_fail@plt+0x128d0>
   1d3a4:	mov	r5, r0
   1d3a8:	mov	r0, r7
   1d3ac:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   1d3b0:	orrs	r0, r5, r9
   1d3b4:	ldrbeq	r0, [r4]
   1d3b8:	cmpeq	r0, #47	; 0x2f
   1d3bc:	bne	1d3f0 <__assert_fail@plt+0xa800>
   1d3c0:	mov	sl, #0
   1d3c4:	movw	r1, #9142	; 0x23b6
   1d3c8:	movt	r1, #4
   1d3cc:	mov	r0, #0
   1d3d0:	mov	r2, #5
   1d3d4:	bl	12674 <dcgettext@plt>
   1d3d8:	mov	r2, r0
   1d3dc:	mov	r0, #0
   1d3e0:	mov	r1, #0
   1d3e4:	mov	r3, r4
   1d3e8:	bl	127b8 <error@plt>
   1d3ec:	vldr	s16, [pc, #124]	; 1d470 <__assert_fail@plt+0xa880>
   1d3f0:	mov	r0, r8
   1d3f4:	mov	r1, r4
   1d3f8:	bl	17fa4 <__assert_fail@plt+0x53b4>
   1d3fc:	str	sl, [r0, #40]	; 0x28
   1d400:	str	r9, [r0, #44]	; 0x2c
   1d404:	str	r5, [r0, #48]	; 0x30
   1d408:	vstr	s16, [r0, #28]
   1d40c:	mov	r0, r6
   1d410:	sub	sp, fp, #40	; 0x28
   1d414:	vpop	{d8}
   1d418:	add	sp, sp, #4
   1d41c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d420:	movw	r1, #9126	; 0x23a6
   1d424:	movt	r1, #4
   1d428:	mov	r0, #0
   1d42c:	mov	r2, #5
   1d430:	bl	12674 <dcgettext@plt>
   1d434:	mov	r5, r0
   1d438:	movw	r0, #24204	; 0x5e8c
   1d43c:	movt	r0, #5
   1d440:	ldr	r1, [r0, #72]	; 0x48
   1d444:	mov	r0, #0
   1d448:	mov	r2, r4
   1d44c:	bl	2a088 <__assert_fail@plt+0x17498>
   1d450:	mov	r3, r0
   1d454:	mov	r0, #1
   1d458:	mov	r1, #0
   1d45c:	mov	r2, r5
   1d460:	bl	127b8 <error@plt>
   1d464:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1d468:			; <UNDEFINED> instruction: 0x3e99999a
   1d46c:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1d470:	svccc	0x007fa440
   1d474:	push	{fp, lr}
   1d478:	mov	fp, sp
   1d47c:	mov	r1, #0
   1d480:	bl	1ea48 <__assert_fail@plt+0xbe58>
   1d484:	mov	r0, #1
   1d488:	pop	{fp, pc}
   1d48c:	push	{r4, r5, r6, r7, fp, lr}
   1d490:	add	fp, sp, #16
   1d494:	sub	sp, sp, #24
   1d498:	mov	r4, r2
   1d49c:	mov	r5, r0
   1d4a0:	ldr	r7, [r2]
   1d4a4:	add	r2, sp, #20
   1d4a8:	mov	r0, r1
   1d4ac:	mov	r1, r4
   1d4b0:	bl	1e188 <__assert_fail@plt+0xb598>
   1d4b4:	mov	r1, r0
   1d4b8:	mov	r0, #0
   1d4bc:	cmp	r1, #0
   1d4c0:	beq	1d4f4 <__assert_fail@plt+0xa904>
   1d4c4:	mov	r6, sp
   1d4c8:	mov	r0, r6
   1d4cc:	bl	1bb64 <__assert_fail@plt+0x8f74>
   1d4d0:	ldr	r2, [sp, #20]
   1d4d4:	mov	r0, r6
   1d4d8:	mov	r1, r5
   1d4dc:	bl	19b40 <__assert_fail@plt+0x6f50>
   1d4e0:	mov	r1, r0
   1d4e4:	mov	r0, #1
   1d4e8:	cmp	r1, #0
   1d4ec:	streq	r7, [r4]
   1d4f0:	moveq	r0, #0
   1d4f4:	sub	sp, fp, #16
   1d4f8:	pop	{r4, r5, r6, r7, fp, pc}
   1d4fc:	push	{fp, lr}
   1d500:	mov	fp, sp
   1d504:	bl	17fe4 <__assert_fail@plt+0x53f4>
   1d508:	movw	r1, #24204	; 0x5e8c
   1d50c:	movt	r1, #5
   1d510:	ldrb	r1, [r1]
   1d514:	cmp	r1, #0
   1d518:	moveq	r1, #0
   1d51c:	strheq	r1, [r0, #18]
   1d520:	mov	r1, #1
   1d524:	strh	r1, [r0, #16]
   1d528:	mov	r0, #1
   1d52c:	pop	{fp, pc}
   1d530:	push	{fp, lr}
   1d534:	mov	fp, sp
   1d538:	bl	17fe4 <__assert_fail@plt+0x53f4>
   1d53c:	mov	r1, #1065353216	; 0x3f800000
   1d540:	str	r1, [r0, #28]
   1d544:	mov	r1, #1
   1d548:	str	r1, [r0, #16]
   1d54c:	mov	r0, #1
   1d550:	pop	{fp, pc}
   1d554:	mov	ip, r2
   1d558:	mov	r2, r0
   1d55c:	movw	r0, #24204	; 0x5e8c
   1d560:	movt	r0, #5
   1d564:	ldr	r3, [r0, #60]	; 0x3c
   1d568:	mov	r0, r1
   1d56c:	mov	r1, ip
   1d570:	b	1efbc <__assert_fail@plt+0xc3cc>
   1d574:	push	{r4, r5, fp, lr}
   1d578:	add	fp, sp, #8
   1d57c:	sub	sp, sp, #8
   1d580:	mov	r4, r2
   1d584:	mov	r5, r1
   1d588:	add	r2, sp, #4
   1d58c:	mov	r0, r1
   1d590:	mov	r1, r4
   1d594:	bl	1dfe8 <__assert_fail@plt+0xb3f8>
   1d598:	mov	r1, r0
   1d59c:	mov	r0, #0
   1d5a0:	cmp	r1, #0
   1d5a4:	beq	1d5cc <__assert_fail@plt+0xa9dc>
   1d5a8:	ldr	r0, [sp, #4]
   1d5ac:	bl	215d4 <__assert_fail@plt+0xe9e4>
   1d5b0:	movw	r1, #24204	; 0x5e8c
   1d5b4:	movt	r1, #5
   1d5b8:	str	r0, [r1, #60]	; 0x3c
   1d5bc:	mov	r0, r5
   1d5c0:	mov	r1, r4
   1d5c4:	bl	1e274 <__assert_fail@plt+0xb684>
   1d5c8:	mov	r0, #1
   1d5cc:	sub	sp, fp, #8
   1d5d0:	pop	{r4, r5, fp, pc}
   1d5d4:	push	{r4, r5, r6, r7, fp, lr}
   1d5d8:	add	fp, sp, #16
   1d5dc:	sub	sp, sp, #216	; 0xd8
   1d5e0:	mov	r5, r2
   1d5e4:	mov	r6, r1
   1d5e8:	mov	r4, r0
   1d5ec:	add	r7, sp, #112	; 0x70
   1d5f0:	mov	r0, r7
   1d5f4:	bl	18270 <__assert_fail@plt+0x5680>
   1d5f8:	add	r3, sp, #4
   1d5fc:	mov	r0, r6
   1d600:	mov	r1, r5
   1d604:	mov	r2, r7
   1d608:	bl	1e1fc <__assert_fail@plt+0xb60c>
   1d60c:	mov	r1, r0
   1d610:	mov	r0, #0
   1d614:	cmp	r1, #0
   1d618:	beq	1d774 <__assert_fail@plt+0xab84>
   1d61c:	add	r0, sp, #8
   1d620:	bl	18270 <__assert_fail@plt+0x5680>
   1d624:	movw	r7, #24204	; 0x5e8c
   1d628:	movt	r7, #5
   1d62c:	ldr	r0, [r7, #48]	; 0x30
   1d630:	mov	r1, #0
   1d634:	cmp	r0, #0
   1d638:	bne	1d664 <__assert_fail@plt+0xaa74>
   1d63c:	ldrb	r0, [r7, #56]	; 0x38
   1d640:	mov	r1, #32768	; 0x8000
   1d644:	cmp	r0, #0
   1d648:	bne	1d664 <__assert_fail@plt+0xaa74>
   1d64c:	ldr	r0, [sp, #128]	; 0x80
   1d650:	and	r0, r0, #61440	; 0xf000
   1d654:	mvn	r5, #1
   1d658:	cmp	r0, #40960	; 0xa000
   1d65c:	mov	r1, #0
   1d660:	beq	1d72c <__assert_fail@plt+0xab3c>
   1d664:	ldr	r6, [sp, #4]
   1d668:	mov	r0, r6
   1d66c:	bl	20384 <__assert_fail@plt+0xd794>
   1d670:	mov	r5, r0
   1d674:	cmp	r0, #0
   1d678:	bmi	1d72c <__assert_fail@plt+0xab3c>
   1d67c:	add	r1, sp, #8
   1d680:	mov	r0, r5
   1d684:	bl	3ea14 <__assert_fail@plt+0x2be24>
   1d688:	cmp	r0, #0
   1d68c:	bne	1d77c <__assert_fail@plt+0xab8c>
   1d690:	ldr	r2, [r7, #52]	; 0x34
   1d694:	add	r1, sp, #112	; 0x70
   1d698:	mov	r0, r6
   1d69c:	blx	r2
   1d6a0:	cmp	r0, #0
   1d6a4:	bne	1d77c <__assert_fail@plt+0xab8c>
   1d6a8:	ldr	r0, [r7, #48]	; 0x30
   1d6ac:	cmp	r0, #0
   1d6b0:	ldrbeq	r0, [r7, #56]	; 0x38
   1d6b4:	cmpeq	r0, #0
   1d6b8:	beq	1d6d0 <__assert_fail@plt+0xaae0>
   1d6bc:	add	r0, sp, #112	; 0x70
   1d6c0:	add	r1, sp, #8
   1d6c4:	mov	r2, #104	; 0x68
   1d6c8:	bl	125f0 <memcpy@plt>
   1d6cc:	b	1d72c <__assert_fail@plt+0xab3c>
   1d6d0:	ldr	r0, [sp, #128]	; 0x80
   1d6d4:	and	r0, r0, #61440	; 0xf000
   1d6d8:	cmp	r0, #40960	; 0xa000
   1d6dc:	beq	1d720 <__assert_fail@plt+0xab30>
   1d6e0:	ldr	r0, [sp, #8]
   1d6e4:	ldr	r1, [sp, #12]
   1d6e8:	ldr	r2, [sp, #112]	; 0x70
   1d6ec:	ldr	r3, [sp, #116]	; 0x74
   1d6f0:	eor	r1, r3, r1
   1d6f4:	eor	r0, r2, r0
   1d6f8:	orrs	r0, r0, r1
   1d6fc:	bne	1d720 <__assert_fail@plt+0xab30>
   1d700:	ldr	r0, [sp, #104]	; 0x68
   1d704:	ldr	r1, [sp, #108]	; 0x6c
   1d708:	ldr	r2, [sp, #208]	; 0xd0
   1d70c:	ldr	r3, [sp, #212]	; 0xd4
   1d710:	eor	r1, r3, r1
   1d714:	eor	r0, r2, r0
   1d718:	orrs	r0, r0, r1
   1d71c:	beq	1d72c <__assert_fail@plt+0xab3c>
   1d720:	mov	r0, r5
   1d724:	bl	12ba8 <close@plt>
   1d728:	mvn	r5, #0
   1d72c:	ldr	r1, [sp, #4]
   1d730:	mov	r0, r4
   1d734:	bl	17fa4 <__assert_fail@plt+0x53b4>
   1d738:	mov	r1, r0
   1d73c:	ldr	r0, [sp, #208]	; 0xd0
   1d740:	ldr	r2, [sp, #212]	; 0xd4
   1d744:	str	r2, [r1, #44]	; 0x2c
   1d748:	str	r0, [r1, #40]	; 0x28
   1d74c:	ldr	r2, [sp, #112]	; 0x70
   1d750:	ldr	r3, [sp, #116]	; 0x74
   1d754:	str	r5, [r1, #56]	; 0x38
   1d758:	mov	r0, #1
   1d75c:	strh	r0, [r1, #18]
   1d760:	movw	r7, #55050	; 0xd70a
   1d764:	movt	r7, #15395	; 0x3c23
   1d768:	str	r7, [r1, #28]
   1d76c:	str	r2, [r1, #48]	; 0x30
   1d770:	str	r3, [r1, #52]	; 0x34
   1d774:	sub	sp, fp, #16
   1d778:	pop	{r4, r5, r6, r7, fp, pc}
   1d77c:	bl	12908 <__errno_location@plt>
   1d780:	ldr	r0, [r0]
   1d784:	mov	r1, r6
   1d788:	bl	19418 <__assert_fail@plt+0x6828>
   1d78c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d790:	add	fp, sp, #28
   1d794:	sub	sp, sp, #28
   1d798:	mov	r8, r0
   1d79c:	mov	r0, #0
   1d7a0:	cmp	r1, #0
   1d7a4:	beq	1d9b4 <__assert_fail@plt+0xadc4>
   1d7a8:	mov	sl, r2
   1d7ac:	mov	r7, r1
   1d7b0:	ldr	r1, [r2]
   1d7b4:	ldr	r5, [r7, r1, lsl #2]
   1d7b8:	cmp	r5, #0
   1d7bc:	beq	1d9b4 <__assert_fail@plt+0xadc4>
   1d7c0:	mov	r0, r5
   1d7c4:	bl	128c0 <strlen@plt>
   1d7c8:	cmp	r0, #0
   1d7cc:	beq	1da60 <__assert_fail@plt+0xae70>
   1d7d0:	sub	r4, r0, #1
   1d7d4:	ldrb	r0, [r5, r4]
   1d7d8:	sub	r0, r0, #48	; 0x30
   1d7dc:	cmp	r0, #71	; 0x47
   1d7e0:	bhi	1da30 <__assert_fail@plt+0xae40>
   1d7e4:	mov	r6, #512	; 0x200
   1d7e8:	mov	r9, #0
   1d7ec:	add	r1, pc, #0
   1d7f0:	ldr	pc, [r1, r0, lsl #2]
   1d7f4:	andeq	sp, r1, r4, lsl r9
   1d7f8:	andeq	sp, r1, r4, lsl r9
   1d7fc:	andeq	sp, r1, r4, lsl r9
   1d800:	andeq	sp, r1, r4, lsl r9
   1d804:	andeq	sp, r1, r4, lsl r9
   1d808:	andeq	sp, r1, r4, lsl r9
   1d80c:	andeq	sp, r1, r4, lsl r9
   1d810:	andeq	sp, r1, r4, lsl r9
   1d814:	andeq	sp, r1, r4, lsl r9
   1d818:	andeq	sp, r1, r4, lsl r9
   1d81c:	andeq	sp, r1, r0, lsr sl
   1d820:	andeq	sp, r1, r0, lsr sl
   1d824:	andeq	sp, r1, r0, lsr sl
   1d828:	andeq	sp, r1, r0, lsr sl
   1d82c:	andeq	sp, r1, r0, lsr sl
   1d830:	andeq	sp, r1, r0, lsr sl
   1d834:	andeq	sp, r1, r0, lsr sl
   1d838:	andeq	sp, r1, r0, lsr sl
   1d83c:	andeq	sp, r1, r0, lsr sl
   1d840:	andeq	sp, r1, r0, lsr sl
   1d844:	andeq	sp, r1, r0, lsr sl
   1d848:	andeq	sp, r1, r0, lsr sl
   1d84c:	andeq	sp, r1, r0, lsr sl
   1d850:	strdeq	sp, [r1], -r4
   1d854:	andeq	sp, r1, r0, lsr sl
   1d858:	andeq	sp, r1, r0, lsr sl
   1d85c:	andeq	sp, r1, r0, lsr sl
   1d860:	andeq	sp, r1, r0, lsr sl
   1d864:	andeq	sp, r1, r0, lsr sl
   1d868:			; <UNDEFINED> instruction: 0x0001d9bc
   1d86c:	andeq	sp, r1, r0, lsr sl
   1d870:	andeq	sp, r1, r0, lsr sl
   1d874:	andeq	sp, r1, r0, lsr sl
   1d878:	andeq	sp, r1, r0, lsr sl
   1d87c:	andeq	sp, r1, r0, lsr sl
   1d880:	andeq	sp, r1, r0, lsr sl
   1d884:	andeq	sp, r1, r0, lsr sl
   1d888:	andeq	sp, r1, r0, lsr sl
   1d88c:	andeq	sp, r1, r0, lsr sl
   1d890:	andeq	sp, r1, r0, lsr sl
   1d894:	andeq	sp, r1, r0, lsr sl
   1d898:	andeq	sp, r1, r0, lsr sl
   1d89c:	andeq	sp, r1, r0, lsr sl
   1d8a0:	andeq	sp, r1, r0, lsr sl
   1d8a4:	andeq	sp, r1, r0, lsr sl
   1d8a8:	andeq	sp, r1, r0, lsr sl
   1d8ac:	andeq	sp, r1, r0, lsr sl
   1d8b0:	andeq	sp, r1, r0, lsr sl
   1d8b4:	andeq	sp, r1, r0, lsr sl
   1d8b8:	andeq	sp, r1, r0, lsr sl
   1d8bc:	ldrdeq	sp, [r1], -r0
   1d8c0:	andeq	sp, r1, r8, lsl #20
   1d8c4:	andeq	sp, r1, r0, lsr sl
   1d8c8:	andeq	sp, r1, r0, lsr sl
   1d8cc:	andeq	sp, r1, r0, lsr sl
   1d8d0:	andeq	sp, r1, r0, lsr sl
   1d8d4:	andeq	sp, r1, r0, lsr sl
   1d8d8:	andeq	sp, r1, r0, lsr sl
   1d8dc:	andeq	sp, r1, r0, lsr sl
   1d8e0:	andeq	sp, r1, ip, lsl sl
   1d8e4:	andeq	sp, r1, r0, lsr sl
   1d8e8:	andeq	sp, r1, r0, lsr sl
   1d8ec:	andeq	sp, r1, r0, lsr sl
   1d8f0:	andeq	sp, r1, r0, lsr sl
   1d8f4:	andeq	sp, r1, r0, lsr sl
   1d8f8:	andeq	sp, r1, r0, lsr sl
   1d8fc:	andeq	sp, r1, r0, lsr sl
   1d900:	andeq	sp, r1, r0, lsr sl
   1d904:	andeq	sp, r1, r0, lsr sl
   1d908:	andeq	sp, r1, r0, lsr sl
   1d90c:	andeq	sp, r1, r0, lsr sl
   1d910:	andeq	sp, r1, r0, ror #19
   1d914:	add	r1, sp, #16
   1d918:	add	r2, sp, #12
   1d91c:	mov	r0, r5
   1d920:	bl	1ec70 <__assert_fail@plt+0xc080>
   1d924:	cmp	r0, #0
   1d928:	beq	1da84 <__assert_fail@plt+0xae94>
   1d92c:	mov	r0, r8
   1d930:	mov	r1, r5
   1d934:	bl	17fa4 <__assert_fail@plt+0x53b4>
   1d938:	ldr	r3, [sp, #12]
   1d93c:	ldr	r2, [sp, #16]
   1d940:	ldr	r1, [sp, #20]
   1d944:	mov	r7, #1
   1d948:	strh	r7, [r0, #18]
   1d94c:	str	r3, [r0, #40]	; 0x28
   1d950:	str	r6, [r0, #44]	; 0x2c
   1d954:	str	r2, [r0, #48]	; 0x30
   1d958:	str	r1, [r0, #52]	; 0x34
   1d95c:	cmp	r3, #1
   1d960:	beq	1d97c <__assert_fail@plt+0xad8c>
   1d964:	cmp	r3, #0
   1d968:	bne	1d99c <__assert_fail@plt+0xadac>
   1d96c:	umull	r2, r3, r2, r6
   1d970:	mla	r1, r1, r6, r3
   1d974:	add	r3, pc, #336	; 0x150
   1d978:	b	1d988 <__assert_fail@plt+0xad98>
   1d97c:	umull	r2, r3, r2, r6
   1d980:	mla	r1, r1, r6, r3
   1d984:	add	r3, pc, #312	; 0x138
   1d988:	rsbs	r2, r2, #20480	; 0x5000
   1d98c:	rscs	r1, r1, #0
   1d990:	addcc	r3, r3, #4
   1d994:	vldr	s0, [r3]
   1d998:	b	1d9a0 <__assert_fail@plt+0xadb0>
   1d99c:	vldr	s0, [pc, #284]	; 1dac0 <__assert_fail@plt+0xaed0>
   1d9a0:	vstr	s0, [r0, #28]
   1d9a4:	ldr	r0, [sl]
   1d9a8:	add	r0, r0, #1
   1d9ac:	str	r0, [sl]
   1d9b0:	mov	r0, #1
   1d9b4:	sub	sp, fp, #28
   1d9b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d9bc:	mov	r0, #0
   1d9c0:	strb	r0, [r5, r4]
   1d9c4:	mov	r6, #1048576	; 0x100000
   1d9c8:	mov	r9, #77	; 0x4d
   1d9cc:	b	1d914 <__assert_fail@plt+0xad24>
   1d9d0:	mov	r0, #0
   1d9d4:	strb	r0, [r5, r4]
   1d9d8:	mov	r9, #98	; 0x62
   1d9dc:	b	1d914 <__assert_fail@plt+0xad24>
   1d9e0:	mov	r0, #0
   1d9e4:	strb	r0, [r5, r4]
   1d9e8:	mov	r6, #2
   1d9ec:	mov	r9, #119	; 0x77
   1d9f0:	b	1d914 <__assert_fail@plt+0xad24>
   1d9f4:	mov	r0, #0
   1d9f8:	strb	r0, [r5, r4]
   1d9fc:	mov	r6, #1073741824	; 0x40000000
   1da00:	mov	r9, #71	; 0x47
   1da04:	b	1d914 <__assert_fail@plt+0xad24>
   1da08:	mov	r0, #0
   1da0c:	strb	r0, [r5, r4]
   1da10:	mov	r6, #1
   1da14:	mov	r9, #99	; 0x63
   1da18:	b	1d914 <__assert_fail@plt+0xad24>
   1da1c:	mov	r0, #0
   1da20:	strb	r0, [r5, r4]
   1da24:	mov	r6, #1024	; 0x400
   1da28:	mov	r9, #107	; 0x6b
   1da2c:	b	1d914 <__assert_fail@plt+0xad24>
   1da30:	movw	r1, #9399	; 0x24b7
   1da34:	movt	r1, #4
   1da38:	mov	r0, #0
   1da3c:	mov	r2, #5
   1da40:	bl	12674 <dcgettext@plt>
   1da44:	mov	r2, r0
   1da48:	ldr	r0, [sl]
   1da4c:	ldr	r0, [r7, r0, lsl #2]
   1da50:	ldrb	r3, [r0, r4]
   1da54:	mov	r0, #1
   1da58:	mov	r1, #0
   1da5c:	bl	127b8 <error@plt>
   1da60:	movw	r1, #9368	; 0x2498
   1da64:	movt	r1, #4
   1da68:	mov	r0, #0
   1da6c:	mov	r2, #5
   1da70:	bl	12674 <dcgettext@plt>
   1da74:	mov	r2, r0
   1da78:	mov	r0, #1
   1da7c:	mov	r1, #0
   1da80:	bl	127b8 <error@plt>
   1da84:	mov	r0, #0
   1da88:	strb	r0, [sp, #11]
   1da8c:	strb	r9, [sp, #10]
   1da90:	movw	r1, #9423	; 0x24cf
   1da94:	movt	r1, #4
   1da98:	mov	r0, #0
   1da9c:	mov	r2, #5
   1daa0:	bl	12674 <dcgettext@plt>
   1daa4:	mov	r2, r0
   1daa8:	add	r0, sp, #10
   1daac:	str	r0, [sp]
   1dab0:	mov	r0, #1
   1dab4:	mov	r1, #0
   1dab8:	mov	r3, r5
   1dabc:	bl	127b8 <error@plt>
   1dac0:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1dac4:	stclcc	12, cr12, [ip, #820]	; 0x334
   1dac8:	svccc	0x00666666
   1dacc:	svccc	0x00666666
   1dad0:	stclcc	12, cr12, [ip, #820]	; 0x334
   1dad4:	mov	ip, r2
   1dad8:	mov	r2, r0
   1dadc:	movw	r3, #20228	; 0x4f04
   1dae0:	movt	r3, #1
   1dae4:	mov	r0, r1
   1dae8:	mov	r1, ip
   1daec:	b	1f190 <__assert_fail@plt+0xc5a0>
   1daf0:	push	{r4, sl, fp, lr}
   1daf4:	add	fp, sp, #8
   1daf8:	mov	r4, r2
   1dafc:	mov	r2, r0
   1db00:	mov	r0, r1
   1db04:	mov	r1, r4
   1db08:	bl	1eb34 <__assert_fail@plt+0xbf44>
   1db0c:	cmp	r0, #0
   1db10:	beq	1db38 <__assert_fail@plt+0xaf48>
   1db14:	add	r1, pc, #48	; 0x30
   1db18:	ldrd	r2, [r0, #48]	; 0x30
   1db1c:	subs	r2, r2, #100	; 0x64
   1db20:	sbcs	r2, r3, #0
   1db24:	addcc	r1, r1, #4
   1db28:	ldr	r1, [r1]
   1db2c:	str	r1, [r0, #28]
   1db30:	mov	r0, #1
   1db34:	pop	{r4, sl, fp, pc}
   1db38:	ldr	r0, [r4]
   1db3c:	sub	r0, r0, #1
   1db40:	str	r0, [r4]
   1db44:	mov	r0, #0
   1db48:	pop	{r4, sl, fp, pc}
   1db4c:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1db50:	svccc	0x007d70a4
   1db54:	nop	{0}
   1db58:	push	{r4, r5, r6, sl, fp, lr}
   1db5c:	add	fp, sp, #16
   1db60:	sub	sp, sp, #24
   1db64:	mov	r3, r2
   1db68:	mov	r5, r0
   1db6c:	add	r2, sp, #4
   1db70:	mov	r0, r1
   1db74:	mov	r1, r3
   1db78:	bl	1dfe8 <__assert_fail@plt+0xb3f8>
   1db7c:	mov	r1, r0
   1db80:	mov	r0, #0
   1db84:	cmp	r1, #0
   1db88:	beq	1dc0c <__assert_fail@plt+0xb01c>
   1db8c:	ldr	r4, [sp, #4]
   1db90:	movw	r0, #7163	; 0x1bfb
   1db94:	movt	r0, #4
   1db98:	vldr	d0, [pc, #160]	; 1dc40 <__assert_fail@plt+0xb050>
   1db9c:	str	r0, [sp]
   1dba0:	add	r6, sp, #8
   1dba4:	mov	r0, r4
   1dba8:	mov	r1, r6
   1dbac:	mov	r2, #0
   1dbb0:	mov	r3, #0
   1dbb4:	bl	1e010 <__assert_fail@plt+0xb420>
   1dbb8:	cmp	r0, #0
   1dbbc:	beq	1dc14 <__assert_fail@plt+0xb024>
   1dbc0:	mov	r0, r5
   1dbc4:	mov	r1, r4
   1dbc8:	bl	17fa4 <__assert_fail@plt+0x53b4>
   1dbcc:	mov	r4, r0
   1dbd0:	mov	r0, #8
   1dbd4:	vld1.64	{d16-d17}, [r6], r0
   1dbd8:	add	r0, r4, #40	; 0x28
   1dbdc:	vst1.64	{d16-d17}, [r0]
   1dbe0:	ldr	r0, [r6]
   1dbe4:	movw	r1, #17671	; 0x4507
   1dbe8:	movt	r1, #49710	; 0xc22e
   1dbec:	smmla	r0, r0, r1, r0
   1dbf0:	asr	r1, r0, #16
   1dbf4:	add	r0, r1, r0, lsr #31
   1dbf8:	vmov	s0, r0
   1dbfc:	vcvt.f32.s32	s0, s0
   1dc00:	bl	1c098 <__assert_fail@plt+0x94a8>
   1dc04:	vstr	s0, [r4, #28]
   1dc08:	mov	r0, #1
   1dc0c:	sub	sp, fp, #16
   1dc10:	pop	{r4, r5, r6, sl, fp, pc}
   1dc14:	movw	r1, #9830	; 0x2666
   1dc18:	movt	r1, #4
   1dc1c:	mov	r0, #0
   1dc20:	mov	r2, #5
   1dc24:	bl	12674 <dcgettext@plt>
   1dc28:	mov	r2, r0
   1dc2c:	mov	r0, #1
   1dc30:	mov	r1, #0
   1dc34:	mov	r3, r4
   1dc38:	bl	127b8 <error@plt>
   1dc3c:	nop	{0}
   1dc40:	andeq	r0, r0, r0
   1dc44:	rscsmi	r1, r5, r0, lsl #16
   1dc48:	push	{r4, r5, r6, sl, fp, lr}
   1dc4c:	add	fp, sp, #16
   1dc50:	sub	sp, sp, #8
   1dc54:	mov	r3, r2
   1dc58:	mov	r5, r0
   1dc5c:	add	r2, sp, #4
   1dc60:	mov	r0, r1
   1dc64:	mov	r1, r3
   1dc68:	bl	1dfe8 <__assert_fail@plt+0xb3f8>
   1dc6c:	mov	r1, r0
   1dc70:	mov	r0, #0
   1dc74:	cmp	r1, #0
   1dc78:	beq	1dd04 <__assert_fail@plt+0xb114>
   1dc7c:	ldr	r4, [sp, #4]
   1dc80:	mov	r0, r4
   1dc84:	bl	124d0 <getpwnam@plt>
   1dc88:	mov	r6, r0
   1dc8c:	bl	12a34 <endpwent@plt>
   1dc90:	cmp	r6, #0
   1dc94:	beq	1dca0 <__assert_fail@plt+0xb0b0>
   1dc98:	ldr	r6, [r6, #8]
   1dc9c:	b	1dcdc <__assert_fail@plt+0xb0ec>
   1dca0:	movw	r1, #8440	; 0x20f8
   1dca4:	movt	r1, #4
   1dca8:	mov	r0, r4
   1dcac:	bl	12be4 <strspn@plt>
   1dcb0:	cmp	r0, #0
   1dcb4:	beq	1dd0c <__assert_fail@plt+0xb11c>
   1dcb8:	ldrb	r0, [r4, r0]
   1dcbc:	cmp	r0, #0
   1dcc0:	bne	1dd0c <__assert_fail@plt+0xb11c>
   1dcc4:	movw	r0, #24204	; 0x5e8c
   1dcc8:	movt	r0, #5
   1dccc:	ldr	r1, [r0, #72]	; 0x48
   1dcd0:	mov	r0, r4
   1dcd4:	bl	217bc <__assert_fail@plt+0xebcc>
   1dcd8:	mov	r6, r0
   1dcdc:	mov	r0, r5
   1dce0:	mov	r1, r4
   1dce4:	bl	17fa4 <__assert_fail@plt+0x53b4>
   1dce8:	str	r6, [r0, #40]	; 0x28
   1dcec:	add	r1, pc, #140	; 0x8c
   1dcf0:	cmp	r6, #100	; 0x64
   1dcf4:	addcc	r1, r1, #4
   1dcf8:	ldr	r1, [r1]
   1dcfc:	str	r1, [r0, #28]
   1dd00:	mov	r0, #1
   1dd04:	sub	sp, fp, #16
   1dd08:	pop	{r4, r5, r6, sl, fp, pc}
   1dd0c:	ldrb	r0, [r4]
   1dd10:	cmp	r0, #0
   1dd14:	bne	1dd3c <__assert_fail@plt+0xb14c>
   1dd18:	movw	r1, #9894	; 0x26a6
   1dd1c:	movt	r1, #4
   1dd20:	mov	r0, #0
   1dd24:	mov	r2, #5
   1dd28:	bl	12674 <dcgettext@plt>
   1dd2c:	mov	r2, r0
   1dd30:	mov	r0, #1
   1dd34:	mov	r1, #0
   1dd38:	bl	127b8 <error@plt>
   1dd3c:	movw	r1, #9859	; 0x2683
   1dd40:	movt	r1, #4
   1dd44:	mov	r0, #0
   1dd48:	mov	r2, #5
   1dd4c:	bl	12674 <dcgettext@plt>
   1dd50:	mov	r5, r0
   1dd54:	movw	r0, #24204	; 0x5e8c
   1dd58:	movt	r0, #5
   1dd5c:	ldr	r1, [r0, #72]	; 0x48
   1dd60:	mov	r0, #0
   1dd64:	mov	r2, r4
   1dd68:	bl	2a088 <__assert_fail@plt+0x17498>
   1dd6c:	mov	r3, r0
   1dd70:	mov	r0, #1
   1dd74:	mov	r1, #0
   1dd78:	mov	r2, r5
   1dd7c:	bl	127b8 <error@plt>
   1dd80:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1dd84:	svccc	0x007d70a4
   1dd88:	push	{fp, lr}
   1dd8c:	mov	fp, sp
   1dd90:	sub	sp, sp, #8
   1dd94:	movw	r3, #19244	; 0x4b2c
   1dd98:	movt	r3, #1
   1dd9c:	str	r3, [sp]
   1dda0:	movw	r3, #9116	; 0x239c
   1dda4:	movt	r3, #4
   1dda8:	bl	1ee84 <__assert_fail@plt+0xc294>
   1ddac:	mov	sp, fp
   1ddb0:	pop	{fp, pc}
   1ddb4:	mov	ip, r2
   1ddb8:	mov	r2, r0
   1ddbc:	movw	r3, #20680	; 0x50c8
   1ddc0:	movt	r3, #1
   1ddc4:	mov	r0, r1
   1ddc8:	mov	r1, ip
   1ddcc:	b	1f190 <__assert_fail@plt+0xc5a0>
   1ddd0:	push	{fp, lr}
   1ddd4:	mov	fp, sp
   1ddd8:	bl	1eb0c <__assert_fail@plt+0xbf1c>
   1dddc:	mov	r0, #1
   1dde0:	pop	{fp, pc}
   1dde4:	push	{fp, lr}
   1dde8:	mov	fp, sp
   1ddec:	bl	17fe4 <__assert_fail@plt+0x53f4>
   1ddf0:	mov	r1, #1065353216	; 0x3f800000
   1ddf4:	str	r1, [r0, #28]
   1ddf8:	mov	r1, #0
   1ddfc:	strh	r1, [r0, #18]
   1de00:	mov	r0, #1
   1de04:	pop	{fp, pc}
   1de08:	push	{fp, lr}
   1de0c:	mov	fp, sp
   1de10:	mov	r0, #0
   1de14:	bl	17fec <__assert_fail@plt+0x53fc>
   1de18:	push	{fp, lr}
   1de1c:	mov	fp, sp
   1de20:	sub	sp, sp, #8
   1de24:	movw	r0, #60012	; 0xea6c
   1de28:	movt	r0, #3
   1de2c:	bl	20730 <__assert_fail@plt+0xdb40>
   1de30:	mov	r5, #0
   1de34:	movw	r1, #9936	; 0x26d0
   1de38:	movt	r1, #4
   1de3c:	mov	r0, #0
   1de40:	mov	r2, #5
   1de44:	bl	12674 <dcgettext@plt>
   1de48:	bl	12524 <printf@plt>
   1de4c:	movw	r0, #9955	; 0x26e3
   1de50:	movt	r0, #4
   1de54:	bl	12524 <printf@plt>
   1de58:	movw	r4, #24204	; 0x5e8c
   1de5c:	movt	r4, #5
   1de60:	ldrb	r0, [r4, #56]	; 0x38
   1de64:	movw	r2, #9987	; 0x2703
   1de68:	movt	r2, #4
   1de6c:	movw	r1, #9979	; 0x26fb
   1de70:	movt	r1, #4
   1de74:	cmp	r0, #0
   1de78:	moveq	r1, r2
   1de7c:	movw	r0, #9963	; 0x26eb
   1de80:	movt	r0, #4
   1de84:	bl	12524 <printf@plt>
   1de88:	movw	r0, #9996	; 0x270c
   1de8c:	movt	r0, #4
   1de90:	bl	12524 <printf@plt>
   1de94:	bl	124dc <is_selinux_enabled@plt>
   1de98:	cmp	r0, #1
   1de9c:	blt	1deac <__assert_fail@plt+0xb2bc>
   1dea0:	movw	r0, #10015	; 0x271f
   1dea4:	movt	r0, #4
   1dea8:	bl	12524 <printf@plt>
   1deac:	str	r5, [sp, #4]
   1deb0:	add	r0, sp, #4
   1deb4:	bl	13358 <__assert_fail@plt+0x768>
   1deb8:	cmp	r0, #0
   1debc:	beq	1def0 <__assert_fail@plt+0xb300>
   1dec0:	movw	r0, #10024	; 0x2728
   1dec4:	movt	r0, #4
   1dec8:	bl	12524 <printf@plt>
   1decc:	ldrb	r0, [sp, #5]
   1ded0:	tst	r0, #2
   1ded4:	beq	1dee4 <__assert_fail@plt+0xb2f4>
   1ded8:	movw	r0, #10029	; 0x272d
   1dedc:	movt	r0, #4
   1dee0:	bl	12524 <printf@plt>
   1dee4:	movw	r0, #62709	; 0xf4f5
   1dee8:	movt	r0, #3
   1deec:	bl	12524 <printf@plt>
   1def0:	ldrh	r1, [r4, #68]	; 0x44
   1def4:	movw	r0, #10039	; 0x2737
   1def8:	movt	r0, #4
   1defc:	bl	12524 <printf@plt>
   1df00:	mov	r0, #10
   1df04:	bl	12950 <putchar@plt>
   1df08:	mov	r0, #0
   1df0c:	bl	12884 <exit@plt>
   1df10:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1df14:	add	fp, sp, #24
   1df18:	sub	sp, sp, #32
   1df1c:	mov	r6, r3
   1df20:	mov	r4, r2
   1df24:	mov	r8, r0
   1df28:	ldr	r5, [r2]
   1df2c:	add	r2, sp, #28
   1df30:	mov	r0, r1
   1df34:	mov	r1, r4
   1df38:	bl	1dfe8 <__assert_fail@plt+0xb3f8>
   1df3c:	mov	r1, r0
   1df40:	mov	r0, #0
   1df44:	cmp	r1, #0
   1df48:	beq	1dfd4 <__assert_fail@plt+0xb3e4>
   1df4c:	str	r6, [sp, #8]
   1df50:	movw	r0, #24204	; 0x5e8c
   1df54:	movt	r0, #5
   1df58:	ldr	r1, [r0, #28]
   1df5c:	ldr	r3, [r0, #32]
   1df60:	ldr	r7, [sp, #28]
   1df64:	movw	r0, #6965	; 0x1b35
   1df68:	movt	r0, #4
   1df6c:	vldr	d0, [pc, #108]	; 1dfe0 <__assert_fail@plt+0xb3f0>
   1df70:	str	r0, [sp]
   1df74:	add	r0, r1, #4480	; 0x1180
   1df78:	add	r2, r0, #81920	; 0x14000
   1df7c:	add	r6, sp, #8
   1df80:	mov	r0, r7
   1df84:	mov	r1, r6
   1df88:	bl	1e010 <__assert_fail@plt+0xb420>
   1df8c:	cmp	r0, #0
   1df90:	beq	1dfcc <__assert_fail@plt+0xb3dc>
   1df94:	mov	r0, r8
   1df98:	mov	r1, r7
   1df9c:	bl	17fa4 <__assert_fail@plt+0x53b4>
   1dfa0:	mov	r4, r0
   1dfa4:	mov	r0, #8
   1dfa8:	vld1.64	{d16-d17}, [r6], r0
   1dfac:	add	r0, r4, #40	; 0x28
   1dfb0:	vst1.64	{d16-d17}, [r0]
   1dfb4:	ldr	r0, [r6]
   1dfb8:	bl	1c068 <__assert_fail@plt+0x9478>
   1dfbc:	vstr	s0, [r4, #28]
   1dfc0:	mov	r0, #1
   1dfc4:	sub	sp, fp, #24
   1dfc8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1dfcc:	str	r5, [r4]
   1dfd0:	mov	r0, #0
   1dfd4:	sub	sp, fp, #24
   1dfd8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1dfdc:	nop	{0}
   1dfe0:	andeq	r0, r0, r0
   1dfe4:	submi	r0, lr, r0
   1dfe8:	push	{r4, sl, fp, lr}
   1dfec:	add	fp, sp, #8
   1dff0:	sub	sp, sp, #8
   1dff4:	mov	r4, r2
   1dff8:	add	r2, sp, #4
   1dffc:	bl	1e188 <__assert_fail@plt+0xb598>
   1e000:	ldr	r1, [sp, #4]
   1e004:	str	r1, [r4]
   1e008:	sub	sp, fp, #8
   1e00c:	pop	{r4, sl, fp, pc}
   1e010:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e014:	add	fp, sp, #24
   1e018:	vpush	{d8}
   1e01c:	sub	sp, sp, #24
   1e020:	vmov.f64	d8, d0
   1e024:	mov	r8, r3
   1e028:	mov	r6, r2
   1e02c:	mov	r4, r1
   1e030:	str	r0, [sp, #20]
   1e034:	add	r5, r1, #4
   1e038:	add	r0, sp, #20
   1e03c:	mov	r1, r5
   1e040:	bl	1e1bc <__assert_fail@plt+0xb5cc>
   1e044:	ldr	r0, [r4, #4]
   1e048:	cmp	r0, #1
   1e04c:	beq	1e060 <__assert_fail@plt+0xb470>
   1e050:	cmp	r0, #0
   1e054:	bne	1e068 <__assert_fail@plt+0xb478>
   1e058:	mov	r0, #1
   1e05c:	b	1e064 <__assert_fail@plt+0xb474>
   1e060:	mov	r0, #0
   1e064:	str	r0, [r5]
   1e068:	ldr	r7, [sp, #20]
   1e06c:	mov	r5, #0
   1e070:	add	r2, sp, #8
   1e074:	movw	r3, #10624	; 0x2980
   1e078:	movt	r3, #1
   1e07c:	mov	r0, r7
   1e080:	mov	r1, #0
   1e084:	bl	2ba08 <__assert_fail@plt+0x18e18>
   1e088:	cmp	r0, #0
   1e08c:	beq	1e13c <__assert_fail@plt+0xb54c>
   1e090:	vldr	d16, [sp, #8]
   1e094:	mov	r0, sp
   1e098:	vmul.f64	d0, d16, d8
   1e09c:	bl	12854 <modf@plt>
   1e0a0:	vldr	d17, [pc, #216]	; 1e180 <__assert_fail@plt+0xb590>
   1e0a4:	vmul.f64	d16, d0, d17
   1e0a8:	vcmpe.f64	d16, d17
   1e0ac:	vmrs	APSR_nzcv, fpscr
   1e0b0:	bpl	1e14c <__assert_fail@plt+0xb55c>
   1e0b4:	vldr	d17, [sp]
   1e0b8:	vmov	s0, r6
   1e0bc:	vcvt.f64.s32	d18, s0
   1e0c0:	vsub.f64	d18, d18, d17
   1e0c4:	vcvt.s32.f64	s0, d18
   1e0c8:	vcvt.s32.f64	s2, d18
   1e0cc:	vstr	s0, [r4, #8]
   1e0d0:	vmov	r0, s2
   1e0d4:	mov	r1, #0
   1e0d8:	cmp	r6, r0
   1e0dc:	mov	r2, #0
   1e0e0:	movwlt	r2, #1
   1e0e4:	vcmpe.f64	d17, #0.0
   1e0e8:	vmrs	APSR_nzcv, fpscr
   1e0ec:	movwmi	r1, #1
   1e0f0:	cmp	r1, r2
   1e0f4:	bne	1e16c <__assert_fail@plt+0xb57c>
   1e0f8:	vmov	s0, r8
   1e0fc:	vcvt.f64.s32	d17, s0
   1e100:	vsub.f64	d18, d17, d16
   1e104:	vcvt.s32.f64	s2, d18
   1e108:	vcvt.s32.f64	s0, d18
   1e10c:	vstr	s2, [r4, #12]
   1e110:	mov	r5, #1
   1e114:	vcmpe.f64	d16, d17
   1e118:	vmrs	APSR_nzcv, fpscr
   1e11c:	ble	1e13c <__assert_fail@plt+0xb54c>
   1e120:	vmov	r1, s0
   1e124:	sub	r0, r0, #1
   1e128:	movw	r2, #51712	; 0xca00
   1e12c:	movt	r2, #15258	; 0x3b9a
   1e130:	add	r1, r1, r2
   1e134:	str	r0, [r4, #8]
   1e138:	str	r1, [r4, #12]
   1e13c:	mov	r0, r5
   1e140:	sub	sp, fp, #32
   1e144:	vpop	{d8}
   1e148:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e14c:	movw	r0, #7036	; 0x1b7c
   1e150:	movt	r0, #4
   1e154:	movw	r1, #6203	; 0x183b
   1e158:	movt	r1, #4
   1e15c:	movw	r3, #7062	; 0x1b96
   1e160:	movt	r3, #4
   1e164:	movw	r2, #3149	; 0xc4d
   1e168:	bl	12bf0 <__assert_fail@plt>
   1e16c:	ldr	r2, [fp, #8]
   1e170:	mov	r0, #1
   1e174:	mov	r1, #0
   1e178:	mov	r3, r7
   1e17c:	bl	127b8 <error@plt>
   1e180:	andeq	r0, r0, r0
   1e184:	bicmi	ip, sp, r5, ror #26
   1e188:	cmp	r0, #0
   1e18c:	beq	1e1b0 <__assert_fail@plt+0xb5c0>
   1e190:	ldr	r3, [r1]
   1e194:	ldr	r0, [r0, r3, lsl #2]
   1e198:	cmp	r0, #0
   1e19c:	strne	r0, [r2]
   1e1a0:	addne	r0, r3, #1
   1e1a4:	strne	r0, [r1]
   1e1a8:	movne	r0, #1
   1e1ac:	bxne	lr
   1e1b0:	mov	r0, #0
   1e1b4:	str	r0, [r2]
   1e1b8:	bx	lr
   1e1bc:	ldr	r2, [r0]
   1e1c0:	ldrb	r2, [r2]
   1e1c4:	cmp	r2, #45	; 0x2d
   1e1c8:	beq	1e1e4 <__assert_fail@plt+0xb5f4>
   1e1cc:	cmp	r2, #43	; 0x2b
   1e1d0:	movne	r0, #2
   1e1d4:	strne	r0, [r1]
   1e1d8:	bxne	lr
   1e1dc:	mov	r2, #0
   1e1e0:	b	1e1e8 <__assert_fail@plt+0xb5f8>
   1e1e4:	mov	r2, #1
   1e1e8:	str	r2, [r1]
   1e1ec:	ldr	r1, [r0]
   1e1f0:	add	r1, r1, #1
   1e1f4:	str	r1, [r0]
   1e1f8:	bx	lr
   1e1fc:	push	{r4, r5, fp, lr}
   1e200:	add	fp, sp, #8
   1e204:	sub	sp, sp, #8
   1e208:	mov	r5, r3
   1e20c:	mov	r4, r2
   1e210:	add	r2, sp, #4
   1e214:	bl	1dfe8 <__assert_fail@plt+0xb3f8>
   1e218:	cmp	r0, #0
   1e21c:	beq	1e254 <__assert_fail@plt+0xb664>
   1e220:	ldr	r0, [sp, #4]
   1e224:	str	r0, [r5]
   1e228:	movw	r1, #24204	; 0x5e8c
   1e22c:	movt	r1, #5
   1e230:	ldr	r2, [r1, #52]	; 0x34
   1e234:	mov	r1, r4
   1e238:	blx	r2
   1e23c:	mov	r1, r0
   1e240:	mov	r0, #1
   1e244:	cmp	r1, #0
   1e248:	bne	1e264 <__assert_fail@plt+0xb674>
   1e24c:	sub	sp, fp, #8
   1e250:	pop	{r4, r5, fp, pc}
   1e254:	mov	r0, #0
   1e258:	str	r0, [r5]
   1e25c:	sub	sp, fp, #8
   1e260:	pop	{r4, r5, fp, pc}
   1e264:	bl	12908 <__errno_location@plt>
   1e268:	ldr	r0, [r0]
   1e26c:	ldr	r1, [sp, #4]
   1e270:	bl	19418 <__assert_fail@plt+0x6828>
   1e274:	push	{r4, r5, fp, lr}
   1e278:	add	fp, sp, #8
   1e27c:	mov	r4, r1
   1e280:	mov	r5, r0
   1e284:	bl	1e298 <__assert_fail@plt+0xb6a8>
   1e288:	mov	r1, r5
   1e28c:	mov	r2, r4
   1e290:	pop	{r4, r5, fp, lr}
   1e294:	b	1dde4 <__assert_fail@plt+0xb1f4>
   1e298:	movw	r0, #23796	; 0x5cf4
   1e29c:	movt	r0, #5
   1e2a0:	ldr	r1, [r0]
   1e2a4:	cmp	r1, #0
   1e2a8:	beq	1e2b4 <__assert_fail@plt+0xb6c4>
   1e2ac:	ldr	r0, [r0]
   1e2b0:	bx	lr
   1e2b4:	mov	r1, #82	; 0x52
   1e2b8:	subs	r1, r1, #1
   1e2bc:	bne	1e2b8 <__assert_fail@plt+0xb6c8>
   1e2c0:	movw	r1, #10072	; 0x2758
   1e2c4:	movt	r1, #4
   1e2c8:	add	r1, r1, #1296	; 0x510
   1e2cc:	str	r1, [r0]
   1e2d0:	ldr	r0, [r0]
   1e2d4:	bx	lr
   1e2d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e2dc:	add	fp, sp, #28
   1e2e0:	sub	sp, sp, #60	; 0x3c
   1e2e4:	mov	sl, r0
   1e2e8:	mov	r0, #0
   1e2ec:	cmp	r2, #0
   1e2f0:	beq	1e6a0 <__assert_fail@plt+0xbab0>
   1e2f4:	mov	r7, r3
   1e2f8:	mov	r6, r2
   1e2fc:	ldr	r2, [r3]
   1e300:	ldr	r2, [r6, r2, lsl #2]
   1e304:	cmp	r2, #0
   1e308:	beq	1e6a0 <__assert_fail@plt+0xbab0>
   1e30c:	ldr	r4, [r1, #12]
   1e310:	movw	r2, #7484	; 0x1d3c
   1e314:	movt	r2, #4
   1e318:	mov	r0, r1
   1e31c:	mov	r1, r4
   1e320:	bl	17f68 <__assert_fail@plt+0x5378>
   1e324:	mov	r5, r0
   1e328:	mov	r0, #0
   1e32c:	str	r0, [r5, #144]	; 0x90
   1e330:	movw	r1, #257	; 0x101
   1e334:	str	r1, [r5, #16]
   1e338:	movw	r1, #19080	; 0x4a88
   1e33c:	movt	r1, #1
   1e340:	cmp	r4, r1
   1e344:	movw	r3, #24204	; 0x5e8c
   1e348:	movt	r3, #5
   1e34c:	movne	r8, #1
   1e350:	movwne	r2, #18856	; 0x49a8
   1e354:	movtne	r2, #1
   1e358:	cmpne	r4, r2
   1e35c:	bne	1e36c <__assert_fail@plt+0xb77c>
   1e360:	mov	r0, #1
   1e364:	strb	r0, [r3, #80]	; 0x50
   1e368:	mov	r8, #0
   1e36c:	strb	r0, [r5, #140]	; 0x8c
   1e370:	sub	r0, r4, r1
   1e374:	clz	r0, r0
   1e378:	lsr	r0, r0, #5
   1e37c:	movw	r1, #17260	; 0x436c
   1e380:	movt	r1, #1
   1e384:	sub	r1, r4, r1
   1e388:	clz	r1, r1
   1e38c:	lsr	r1, r1, #5
   1e390:	orr	r9, r1, r0
   1e394:	cmp	r9, #1
   1e398:	str	r4, [sp, #20]
   1e39c:	bne	1e3b8 <__assert_fail@plt+0xb7c8>
   1e3a0:	mov	r0, #0
   1e3a4:	str	r0, [r5, #144]	; 0x90
   1e3a8:	strb	r0, [r3, #14]
   1e3ac:	mov	r0, sl
   1e3b0:	bl	1e7dc <__assert_fail@plt+0xbbec>
   1e3b4:	b	1e3d0 <__assert_fail@plt+0xb7e0>
   1e3b8:	movw	r0, #21896	; 0x5588
   1e3bc:	movt	r0, #5
   1e3c0:	ldr	r0, [r0]
   1e3c4:	cmp	r0, #0
   1e3c8:	beq	1e6cc <__assert_fail@plt+0xbadc>
   1e3cc:	str	r0, [r5, #144]	; 0x90
   1e3d0:	add	r1, r5, #40	; 0x28
   1e3d4:	mov	r0, #0
   1e3d8:	str	r1, [sp, #36]	; 0x24
   1e3dc:	strb	r0, [r1]
   1e3e0:	ldr	r1, [r7]
   1e3e4:	mov	sl, r6
   1e3e8:	ldr	r4, [sl, r1, lsl #2]!
   1e3ec:	cmp	r4, #0
   1e3f0:	beq	1e4ac <__assert_fail@plt+0xb8bc>
   1e3f4:	str	r5, [sp, #28]
   1e3f8:	str	r6, [sp, #16]
   1e3fc:	str	r7, [sp, #32]
   1e400:	eor	r5, r9, #1
   1e404:	eor	r6, r8, #1
   1e408:	str	r1, [sp, #24]
   1e40c:	mov	r9, r1
   1e410:	mov	r8, #0
   1e414:	mov	r7, #0
   1e418:	b	1e430 <__assert_fail@plt+0xb840>
   1e41c:	mov	r0, #0
   1e420:	add	r9, r9, #1
   1e424:	ldr	r4, [sl, #4]!
   1e428:	cmp	r4, #0
   1e42c:	beq	1e4c0 <__assert_fail@plt+0xb8d0>
   1e430:	ldrb	r1, [r4]
   1e434:	cmp	r1, #59	; 0x3b
   1e438:	bne	1e44c <__assert_fail@plt+0xb85c>
   1e43c:	ldrb	r0, [r4, #1]
   1e440:	cmp	r0, #0
   1e444:	bne	1e470 <__assert_fail@plt+0xb880>
   1e448:	b	1e4c0 <__assert_fail@plt+0xb8d0>
   1e44c:	subs	r1, r1, #43	; 0x2b
   1e450:	movwne	r1, #1
   1e454:	orrs	r1, r6, r1
   1e458:	bne	1e470 <__assert_fail@plt+0xb880>
   1e45c:	cmp	r0, #0
   1e460:	beq	1e470 <__assert_fail@plt+0xb880>
   1e464:	ldrb	r0, [r4, #1]
   1e468:	cmp	r0, #0
   1e46c:	beq	1e4b4 <__assert_fail@plt+0xb8c4>
   1e470:	mov	r0, r4
   1e474:	movw	r1, #7607	; 0x1db7
   1e478:	movt	r1, #4
   1e47c:	bl	240a8 <__assert_fail@plt+0x114b8>
   1e480:	cmp	r0, #0
   1e484:	beq	1e41c <__assert_fail@plt+0xb82c>
   1e488:	cmp	r9, #0
   1e48c:	mov	r0, r9
   1e490:	movwne	r0, #1
   1e494:	orrs	r0, r0, r5
   1e498:	beq	1e6a8 <__assert_fail@plt+0xbab8>
   1e49c:	add	r7, r7, #1
   1e4a0:	mov	r0, #1
   1e4a4:	mov	r8, r4
   1e4a8:	b	1e420 <__assert_fail@plt+0xb830>
   1e4ac:	mov	r9, r1
   1e4b0:	b	1e5fc <__assert_fail@plt+0xba0c>
   1e4b4:	mov	r0, #1
   1e4b8:	ldr	r1, [sp, #36]	; 0x24
   1e4bc:	strb	r0, [r1]
   1e4c0:	ldr	r6, [sp, #24]
   1e4c4:	cmp	r9, r6
   1e4c8:	beq	1e5f4 <__assert_fail@plt+0xba04>
   1e4cc:	ldr	r0, [sl]
   1e4d0:	cmp	r0, #0
   1e4d4:	beq	1e5f4 <__assert_fail@plt+0xba04>
   1e4d8:	ldr	r0, [sp, #36]	; 0x24
   1e4dc:	ldrb	r0, [r0]
   1e4e0:	cmp	r0, #0
   1e4e4:	beq	1e524 <__assert_fail@plt+0xb934>
   1e4e8:	movw	r0, #8337	; 0x2091
   1e4ec:	movt	r0, #4
   1e4f0:	movw	r4, #2407	; 0x967
   1e4f4:	movt	r4, #4
   1e4f8:	ldr	r1, [sp, #20]
   1e4fc:	movw	r2, #17260	; 0x436c
   1e500:	movt	r2, #1
   1e504:	cmp	r1, r2
   1e508:	moveq	r4, r0
   1e50c:	cmp	r7, #2
   1e510:	bge	1e6f8 <__assert_fail@plt+0xbb08>
   1e514:	mov	r0, r8
   1e518:	bl	128c0 <strlen@plt>
   1e51c:	cmp	r0, #2
   1e520:	bne	1e720 <__assert_fail@plt+0xbb30>
   1e524:	ldr	r0, [sp, #36]	; 0x24
   1e528:	add	r7, r0, #4
   1e52c:	mov	r0, r7
   1e530:	mov	r1, #2048	; 0x800
   1e534:	bl	1fc3c <__assert_fail@plt+0xd04c>
   1e538:	sub	r0, r0, #1
   1e53c:	cmp	r0, #1
   1e540:	bls	1e6ec <__assert_fail@plt+0xbafc>
   1e544:	mov	r0, r7
   1e548:	bl	1fcfc <__assert_fail@plt+0xd10c>
   1e54c:	movw	r0, #23184	; 0x5a90
   1e550:	movt	r0, #1
   1e554:	ldr	r5, [sp, #28]
   1e558:	str	r0, [r5, #76]	; 0x4c
   1e55c:	ldrb	r0, [r5, #40]	; 0x28
   1e560:	cmp	r0, #0
   1e564:	beq	1e614 <__assert_fail@plt+0xba24>
   1e568:	mov	r1, #0
   1e56c:	str	r1, [r5, #132]	; 0x84
   1e570:	str	r1, [r5, #80]	; 0x50
   1e574:	str	r1, [r5, #84]	; 0x54
   1e578:	mvn	r0, r6
   1e57c:	add	r4, r9, r0
   1e580:	str	r1, [r5, #64]	; 0x40
   1e584:	str	r1, [r5, #68]	; 0x44
   1e588:	str	r4, [r5, #72]	; 0x48
   1e58c:	add	r5, r5, #88	; 0x58
   1e590:	mov	r0, r7
   1e594:	mov	r1, r5
   1e598:	ldr	r2, [sp, #36]	; 0x24
   1e59c:	bl	1fd20 <__assert_fail@plt+0xd130>
   1e5a0:	sub	r0, r9, #1
   1e5a4:	cmp	r6, r0
   1e5a8:	bge	1e688 <__assert_fail@plt+0xba98>
   1e5ac:	ldr	r0, [sp, #16]
   1e5b0:	add	r8, r0, r6, lsl #2
   1e5b4:	ldr	r6, [r8], #4
   1e5b8:	mov	r0, r6
   1e5bc:	bl	128c0 <strlen@plt>
   1e5c0:	mov	r1, #0
   1e5c4:	str	r1, [sp]
   1e5c8:	str	r1, [sp, #4]
   1e5cc:	mov	r1, #1
   1e5d0:	str	r1, [sp, #8]
   1e5d4:	add	r3, r0, #1
   1e5d8:	mov	r0, r7
   1e5dc:	mov	r1, r5
   1e5e0:	mov	r2, r6
   1e5e4:	bl	1f62c <__assert_fail@plt+0xca3c>
   1e5e8:	subs	r4, r4, #1
   1e5ec:	bne	1e5b4 <__assert_fail@plt+0xb9c4>
   1e5f0:	b	1e688 <__assert_fail@plt+0xba98>
   1e5f4:	ldr	r7, [sp, #32]
   1e5f8:	ldr	r5, [sp, #28]
   1e5fc:	str	r9, [r7]
   1e600:	mov	r0, r5
   1e604:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   1e608:	mov	r0, #0
   1e60c:	sub	sp, fp, #28
   1e610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e614:	mov	r4, #0
   1e618:	str	r4, [r5, #80]	; 0x50
   1e61c:	str	r4, [r5, #84]	; 0x54
   1e620:	mov	r0, #2
   1e624:	str	r0, [r5, #64]	; 0x40
   1e628:	movw	r0, #7607	; 0x1db7
   1e62c:	movt	r0, #4
   1e630:	str	r0, [r5, #68]	; 0x44
   1e634:	sub	r0, r9, r6
   1e638:	str	r0, [r5, #136]	; 0x88
   1e63c:	lsl	r0, r0, #2
   1e640:	bl	2b63c <__assert_fail@plt+0x18a4c>
   1e644:	str	r0, [r5, #132]	; 0x84
   1e648:	add	r1, r5, #88	; 0x58
   1e64c:	mov	r0, r7
   1e650:	ldr	r2, [sp, #36]	; 0x24
   1e654:	bl	1fd20 <__assert_fail@plt+0xd130>
   1e658:	ldr	r0, [r5, #136]	; 0x88
   1e65c:	cmp	r0, #1
   1e660:	blt	1e688 <__assert_fail@plt+0xba98>
   1e664:	ldr	r0, [sp, #16]
   1e668:	add	r0, r0, r6, lsl #2
   1e66c:	ldr	r1, [r5, #136]	; 0x88
   1e670:	ldr	r2, [r0, r4, lsl #2]
   1e674:	ldr	r3, [r5, #132]	; 0x84
   1e678:	str	r2, [r3, r4, lsl #2]
   1e67c:	add	r4, r4, #1
   1e680:	cmp	r4, r1
   1e684:	blt	1e670 <__assert_fail@plt+0xba80>
   1e688:	ldr	r0, [sl]
   1e68c:	cmp	r0, #0
   1e690:	addne	r9, r9, #1
   1e694:	ldr	r0, [sp, #32]
   1e698:	str	r9, [r0]
   1e69c:	mov	r0, #1
   1e6a0:	sub	sp, fp, #28
   1e6a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e6a8:	movw	r1, #7610	; 0x1dba
   1e6ac:	movt	r1, #4
   1e6b0:	mov	r0, #0
   1e6b4:	mov	r2, #5
   1e6b8:	bl	12674 <dcgettext@plt>
   1e6bc:	mov	r2, r0
   1e6c0:	mov	r0, #1
   1e6c4:	mov	r1, #0
   1e6c8:	bl	127b8 <error@plt>
   1e6cc:	movw	r0, #7508	; 0x1d54
   1e6d0:	movt	r0, #4
   1e6d4:	movw	r1, #6203	; 0x183b
   1e6d8:	movt	r1, #4
   1e6dc:	movw	r3, #7527	; 0x1d67
   1e6e0:	movt	r3, #4
   1e6e4:	movw	r2, #2937	; 0xb79
   1e6e8:	bl	12bf0 <__assert_fail@plt>
   1e6ec:	movw	r1, #7875	; 0x1ec3
   1e6f0:	movt	r1, #4
   1e6f4:	b	1e6b0 <__assert_fail@plt+0xbac0>
   1e6f8:	movw	r1, #7724	; 0x1e2c
   1e6fc:	movt	r1, #4
   1e700:	mov	r0, #0
   1e704:	mov	r2, #5
   1e708:	bl	12674 <dcgettext@plt>
   1e70c:	mov	r2, r0
   1e710:	mov	r0, #1
   1e714:	mov	r1, #0
   1e718:	mov	r3, r4
   1e71c:	bl	127b8 <error@plt>
   1e720:	add	r0, sp, #41	; 0x29
   1e724:	movw	r2, #7780	; 0x1e64
   1e728:	movt	r2, #4
   1e72c:	mov	r1, #19
   1e730:	mov	r3, r4
   1e734:	bl	12920 <snprintf@plt>
   1e738:	cmp	r0, #20
   1e73c:	bcs	1e7bc <__assert_fail@plt+0xbbcc>
   1e740:	movw	r1, #7818	; 0x1e8a
   1e744:	movt	r1, #4
   1e748:	mov	r0, #0
   1e74c:	mov	r2, #5
   1e750:	bl	12674 <dcgettext@plt>
   1e754:	mov	r4, r0
   1e758:	movw	r0, #24204	; 0x5e8c
   1e75c:	movt	r0, #5
   1e760:	mov	r7, r0
   1e764:	ldr	r1, [r0, #72]	; 0x48
   1e768:	add	r2, sp, #41	; 0x29
   1e76c:	mov	r0, #0
   1e770:	bl	2a088 <__assert_fail@plt+0x17498>
   1e774:	mov	r5, r0
   1e778:	ldr	r1, [r7, #72]	; 0x48
   1e77c:	movw	r2, #7607	; 0x1db7
   1e780:	movt	r2, #4
   1e784:	mov	r0, #1
   1e788:	bl	2a088 <__assert_fail@plt+0x17498>
   1e78c:	mov	r6, r0
   1e790:	ldr	r1, [r7, #72]	; 0x48
   1e794:	mov	r0, #2
   1e798:	mov	r2, r8
   1e79c:	bl	2a088 <__assert_fail@plt+0x17498>
   1e7a0:	str	r6, [sp]
   1e7a4:	str	r0, [sp, #4]
   1e7a8:	mov	r0, #1
   1e7ac:	mov	r1, #0
   1e7b0:	mov	r2, r4
   1e7b4:	mov	r3, r5
   1e7b8:	bl	127b8 <error@plt>
   1e7bc:	movw	r0, #7797	; 0x1e75
   1e7c0:	movt	r0, #4
   1e7c4:	movw	r1, #6203	; 0x183b
   1e7c8:	movt	r1, #4
   1e7cc:	movw	r3, #7527	; 0x1d67
   1e7d0:	movt	r3, #4
   1e7d4:	movw	r2, #3014	; 0xbc6
   1e7d8:	bl	12bf0 <__assert_fail@plt>
   1e7dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e7e0:	add	fp, sp, #24
   1e7e4:	sub	sp, sp, #16
   1e7e8:	mov	r8, r0
   1e7ec:	movw	r0, #8327	; 0x2087
   1e7f0:	movt	r0, #4
   1e7f4:	bl	127f4 <getenv@plt>
   1e7f8:	cmp	r0, #0
   1e7fc:	beq	1e880 <__assert_fail@plt+0xbc90>
   1e800:	mov	r5, r0
   1e804:	add	r4, sp, #8
   1e808:	str	r4, [sp]
   1e80c:	movw	r6, #62984	; 0xf608
   1e810:	movt	r6, #3
   1e814:	add	r7, sp, #12
   1e818:	mov	r1, r6
   1e81c:	mov	r2, #1
   1e820:	mov	r3, r7
   1e824:	bl	218c8 <__assert_fail@plt+0xecd8>
   1e828:	ldr	r1, [sp, #8]
   1e82c:	cmp	r1, #1
   1e830:	beq	1e840 <__assert_fail@plt+0xbc50>
   1e834:	cmp	r1, #0
   1e838:	bne	1e850 <__assert_fail@plt+0xbc60>
   1e83c:	b	1e888 <__assert_fail@plt+0xbc98>
   1e840:	ldr	r0, [sp, #12]
   1e844:	ldrb	r0, [r5, r0]
   1e848:	cmp	r0, #46	; 0x2e
   1e84c:	beq	1e888 <__assert_fail@plt+0xbc98>
   1e850:	ldr	r0, [sp, #12]
   1e854:	ldrb	r2, [r5, r0]
   1e858:	cmp	r2, #47	; 0x2f
   1e85c:	bne	1e8b0 <__assert_fail@plt+0xbcc0>
   1e860:	str	r4, [sp]
   1e864:	mov	r0, r5
   1e868:	mov	r1, r6
   1e86c:	mov	r2, #0
   1e870:	mov	r3, r7
   1e874:	bl	218c8 <__assert_fail@plt+0xecd8>
   1e878:	cmp	r0, #0
   1e87c:	bne	1e828 <__assert_fail@plt+0xbc38>
   1e880:	sub	sp, fp, #24
   1e884:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e888:	movw	r1, #7916	; 0x1eec
   1e88c:	movt	r1, #4
   1e890:	mov	r0, #0
   1e894:	mov	r2, #5
   1e898:	bl	12674 <dcgettext@plt>
   1e89c:	mov	r2, r0
   1e8a0:	mov	r0, #1
   1e8a4:	mov	r1, #0
   1e8a8:	mov	r3, r8
   1e8ac:	bl	127b8 <error@plt>
   1e8b0:	add	r0, r5, r0
   1e8b4:	bl	125cc <strndup@plt>
   1e8b8:	mov	r6, r0
   1e8bc:	movw	r1, #8167	; 0x1fe7
   1e8c0:	movt	r1, #4
   1e8c4:	mov	r0, #0
   1e8c8:	mov	r2, #5
   1e8cc:	bl	12674 <dcgettext@plt>
   1e8d0:	mov	r7, r0
   1e8d4:	ldr	r0, [sp, #12]
   1e8d8:	cmp	r6, #0
   1e8dc:	addeq	r6, r5, r0
   1e8e0:	mov	r0, #0
   1e8e4:	mov	r1, r6
   1e8e8:	bl	1939c <__assert_fail@plt+0x67ac>
   1e8ec:	mov	r3, r0
   1e8f0:	str	r8, [sp]
   1e8f4:	mov	r0, #1
   1e8f8:	mov	r1, #0
   1e8fc:	mov	r2, r7
   1e900:	bl	127b8 <error@plt>
   1e904:	push	{r4, r5, fp, lr}
   1e908:	add	fp, sp, #8
   1e90c:	mov	r5, r1
   1e910:	bl	17fe4 <__assert_fail@plt+0x53f4>
   1e914:	mov	r4, r0
   1e918:	add	r1, r0, #40	; 0x28
   1e91c:	cmp	r5, #0
   1e920:	beq	1e930 <__assert_fail@plt+0xbd40>
   1e924:	mov	r0, r5
   1e928:	bl	1e94c <__assert_fail@plt+0xbd5c>
   1e92c:	b	1e938 <__assert_fail@plt+0xbd48>
   1e930:	mov	r0, r1
   1e934:	bl	1bb64 <__assert_fail@plt+0x8f74>
   1e938:	mov	r0, #1065353216	; 0x3f800000
   1e93c:	str	r0, [r4, #28]
   1e940:	movw	r0, #257	; 0x101
   1e944:	strh	r0, [r4, #16]
   1e948:	pop	{r4, r5, fp, pc}
   1e94c:	push	{r4, r5, fp, lr}
   1e950:	add	fp, sp, #8
   1e954:	mov	r4, r1
   1e958:	mov	r5, r0
   1e95c:	mov	r0, #0
   1e960:	str	r0, [r1]
   1e964:	mov	r0, #0
   1e968:	bl	28bfc <__assert_fail@plt+0x1600c>
   1e96c:	str	r0, [r4, #16]
   1e970:	movw	r1, #8341	; 0x2095
   1e974:	movt	r1, #4
   1e978:	mov	r0, r5
   1e97c:	bl	124f4 <strcmp@plt>
   1e980:	cmp	r0, #0
   1e984:	beq	1e9d0 <__assert_fail@plt+0xbde0>
   1e988:	movw	r1, #8368	; 0x20b0
   1e98c:	movt	r1, #4
   1e990:	mov	r0, r5
   1e994:	bl	124f4 <strcmp@plt>
   1e998:	cmp	r0, #0
   1e99c:	beq	1e9e4 <__assert_fail@plt+0xbdf4>
   1e9a0:	movw	r0, #24160	; 0x5e60
   1e9a4:	movt	r0, #5
   1e9a8:	ldr	r0, [r0, #36]	; 0x24
   1e9ac:	mov	r1, r5
   1e9b0:	bl	19658 <__assert_fail@plt+0x6a68>
   1e9b4:	stmib	r4, {r0, r5}
   1e9b8:	cmp	r0, #0
   1e9bc:	bne	1ea0c <__assert_fail@plt+0xbe1c>
   1e9c0:	bl	12908 <__errno_location@plt>
   1e9c4:	ldr	r0, [r0]
   1e9c8:	mov	r1, r5
   1e9cc:	bl	19438 <__assert_fail@plt+0x6848>
   1e9d0:	movw	r1, #8353	; 0x20a1
   1e9d4:	movt	r1, #4
   1e9d8:	movw	r0, #21864	; 0x5568
   1e9dc:	movt	r0, #5
   1e9e0:	b	1e9f4 <__assert_fail@plt+0xbe04>
   1e9e4:	movw	r1, #2467	; 0x9a3
   1e9e8:	movt	r1, #4
   1e9ec:	movw	r0, #21876	; 0x5574
   1e9f0:	movt	r0, #5
   1e9f4:	ldr	r0, [r0]
   1e9f8:	str	r0, [r4, #4]
   1e9fc:	mov	r0, #0
   1ea00:	mov	r2, #5
   1ea04:	bl	12674 <dcgettext@plt>
   1ea08:	str	r0, [r4, #8]
   1ea0c:	ldr	r0, [r4, #4]
   1ea10:	bl	1ea1c <__assert_fail@plt+0xbe2c>
   1ea14:	strb	r0, [r4, #12]
   1ea18:	pop	{r4, r5, fp, pc}
   1ea1c:	push	{fp, lr}
   1ea20:	mov	fp, sp
   1ea24:	bl	1298c <fileno@plt>
   1ea28:	cmn	r0, #1
   1ea2c:	beq	1ea40 <__assert_fail@plt+0xbe50>
   1ea30:	bl	12b60 <isatty@plt>
   1ea34:	cmp	r0, #0
   1ea38:	movwne	r0, #1
   1ea3c:	pop	{fp, pc}
   1ea40:	mov	r0, #0
   1ea44:	pop	{fp, pc}
   1ea48:	push	{r4, r5, fp, lr}
   1ea4c:	add	fp, sp, #8
   1ea50:	mov	r5, r1
   1ea54:	bl	17fa4 <__assert_fail@plt+0x53b4>
   1ea58:	mov	r4, r0
   1ea5c:	add	r1, r0, #40	; 0x28
   1ea60:	cmp	r5, #0
   1ea64:	beq	1ea74 <__assert_fail@plt+0xbe84>
   1ea68:	mov	r0, r5
   1ea6c:	bl	1e94c <__assert_fail@plt+0xbd5c>
   1ea70:	b	1ea7c <__assert_fail@plt+0xbe8c>
   1ea74:	mov	r0, r1
   1ea78:	bl	1bb64 <__assert_fail@plt+0x8f74>
   1ea7c:	mov	r0, #0
   1ea80:	strb	r0, [r4, #19]
   1ea84:	mov	r0, #1
   1ea88:	strb	r0, [r4, #16]
   1ea8c:	strh	r0, [r4, #17]
   1ea90:	mov	r0, #1065353216	; 0x3f800000
   1ea94:	str	r0, [r4, #28]
   1ea98:	pop	{r4, r5, fp, pc}
   1ea9c:	push	{r4, sl, fp, lr}
   1eaa0:	add	fp, sp, #8
   1eaa4:	sub	sp, sp, #104	; 0x68
   1eaa8:	mov	r4, r0
   1eaac:	movw	r0, #62826	; 0xf56a
   1eab0:	movt	r0, #3
   1eab4:	mov	r1, sp
   1eab8:	bl	3ea04 <__assert_fail@plt+0x2be14>
   1eabc:	cmp	r0, #0
   1eac0:	beq	1ead0 <__assert_fail@plt+0xbee0>
   1eac4:	vmov.f32	s0, #112	; 0x3f800000  1.0
   1eac8:	sub	sp, fp, #8
   1eacc:	pop	{r4, sl, fp, pc}
   1ead0:	mov	r0, sp
   1ead4:	movw	r1, #62826	; 0xf56a
   1ead8:	movt	r1, #3
   1eadc:	bl	1b3b8 <__assert_fail@plt+0x87c8>
   1eae0:	mov	r1, r0
   1eae4:	mov	r0, r4
   1eae8:	bl	124f4 <strcmp@plt>
   1eaec:	add	r1, pc, #16
   1eaf0:	cmp	r0, #0
   1eaf4:	addeq	r1, r1, #4
   1eaf8:	vldr	s0, [r1]
   1eafc:	sub	sp, fp, #8
   1eb00:	pop	{r4, sl, fp, pc}
   1eb04:			; <UNDEFINED> instruction: 0x3e99999a
   1eb08:	svccc	0x00333333
   1eb0c:	push	{fp, lr}
   1eb10:	mov	fp, sp
   1eb14:	movw	r0, #6932	; 0x1b14
   1eb18:	movt	r0, #4
   1eb1c:	bl	1b978 <__assert_fail@plt+0x8d88>
   1eb20:	bl	17fe4 <__assert_fail@plt+0x53f4>
   1eb24:	mov	r1, #0
   1eb28:	str	r1, [r0, #28]
   1eb2c:	str	r1, [r0, #16]
   1eb30:	pop	{fp, pc}
   1eb34:	push	{r4, r5, r6, sl, fp, lr}
   1eb38:	add	fp, sp, #16
   1eb3c:	sub	sp, sp, #24
   1eb40:	mov	r5, r2
   1eb44:	add	r2, sp, #20
   1eb48:	bl	1dfe8 <__assert_fail@plt+0xb3f8>
   1eb4c:	mov	r4, #0
   1eb50:	cmp	r0, #0
   1eb54:	beq	1ebb8 <__assert_fail@plt+0xbfc8>
   1eb58:	ldr	r6, [sp, #20]
   1eb5c:	add	r1, sp, #8
   1eb60:	add	r2, sp, #4
   1eb64:	mov	r0, r6
   1eb68:	bl	1ec70 <__assert_fail@plt+0xc080>
   1eb6c:	mov	r4, #0
   1eb70:	cmp	r0, #0
   1eb74:	beq	1ebb8 <__assert_fail@plt+0xbfc8>
   1eb78:	mov	r0, r5
   1eb7c:	mov	r1, r6
   1eb80:	bl	17fa4 <__assert_fail@plt+0x53b4>
   1eb84:	mov	r4, r0
   1eb88:	ldr	r0, [sp, #4]
   1eb8c:	str	r0, [r4, #40]	; 0x28
   1eb90:	ldr	r0, [sp, #8]
   1eb94:	ldr	r1, [sp, #12]
   1eb98:	str	r1, [r4, #52]	; 0x34
   1eb9c:	mov	r5, r4
   1eba0:	str	r0, [r5, #48]!	; 0x30
   1eba4:	movw	r0, #24204	; 0x5e8c
   1eba8:	movt	r0, #5
   1ebac:	ldrb	r0, [r0, #44]	; 0x2c
   1ebb0:	tst	r0, #1
   1ebb4:	bne	1ebc4 <__assert_fail@plt+0xbfd4>
   1ebb8:	mov	r0, r4
   1ebbc:	sub	sp, fp, #16
   1ebc0:	pop	{r4, r5, r6, sl, fp, pc}
   1ebc4:	ldr	r2, [r4, #4]
   1ebc8:	movw	r6, #21864	; 0x5568
   1ebcc:	movt	r6, #5
   1ebd0:	ldr	r0, [r6]
   1ebd4:	movw	r1, #7231	; 0x1c3f
   1ebd8:	movt	r1, #4
   1ebdc:	bl	128fc <fprintf@plt>
   1ebe0:	ldr	r0, [r6]
   1ebe4:	ldr	r1, [sp, #4]
   1ebe8:	cmp	r1, #0
   1ebec:	beq	1ec0c <__assert_fail@plt+0xc01c>
   1ebf0:	cmp	r1, #1
   1ebf4:	bne	1ec20 <__assert_fail@plt+0xc030>
   1ebf8:	movw	r3, #7275	; 0x1c6b
   1ebfc:	movt	r3, #4
   1ec00:	movw	r2, #13139	; 0x3353
   1ec04:	movt	r2, #4
   1ec08:	b	1ec4c <__assert_fail@plt+0xc05c>
   1ec0c:	movw	r3, #7272	; 0x1c68
   1ec10:	movt	r3, #4
   1ec14:	movw	r2, #7266	; 0x1c62
   1ec18:	movt	r2, #4
   1ec1c:	b	1ec4c <__assert_fail@plt+0xc05c>
   1ec20:	movw	r2, #8431	; 0x20ef
   1ec24:	movt	r2, #4
   1ec28:	movw	r3, #7281	; 0x1c71
   1ec2c:	movt	r3, #4
   1ec30:	cmp	r1, #2
   1ec34:	moveq	r3, r2
   1ec38:	movw	r1, #7269	; 0x1c65
   1ec3c:	movt	r1, #4
   1ec40:	movw	r2, #7282	; 0x1c72
   1ec44:	movt	r2, #4
   1ec48:	moveq	r2, r1
   1ec4c:	movw	r1, #7245	; 0x1c4d
   1ec50:	movt	r1, #4
   1ec54:	bl	128fc <fprintf@plt>
   1ec58:	ldrd	r2, [r5]
   1ec5c:	ldr	r0, [r6]
   1ec60:	movw	r1, #8434	; 0x20f2
   1ec64:	movt	r1, #4
   1ec68:	bl	128fc <fprintf@plt>
   1ec6c:	b	1ebb8 <__assert_fail@plt+0xbfc8>
   1ec70:	push	{r4, sl, fp, lr}
   1ec74:	add	fp, sp, #8
   1ec78:	sub	sp, sp, #16
   1ec7c:	str	r0, [sp, #12]
   1ec80:	cmp	r0, #0
   1ec84:	beq	1eccc <__assert_fail@plt+0xc0dc>
   1ec88:	mov	r4, r1
   1ec8c:	cmp	r2, #0
   1ec90:	addne	r0, sp, #12
   1ec94:	movne	r1, r2
   1ec98:	blne	1e1bc <__assert_fail@plt+0xb5cc>
   1ec9c:	ldr	r0, [sp, #12]
   1eca0:	movw	r1, #2407	; 0x967
   1eca4:	movt	r1, #4
   1eca8:	str	r1, [sp]
   1ecac:	add	r1, sp, #8
   1ecb0:	mov	r2, #10
   1ecb4:	mov	r3, r4
   1ecb8:	bl	2bf6c <__assert_fail@plt+0x1937c>
   1ecbc:	clz	r0, r0
   1ecc0:	lsr	r0, r0, #5
   1ecc4:	sub	sp, fp, #8
   1ecc8:	pop	{r4, sl, fp, pc}
   1eccc:	mov	r0, #0
   1ecd0:	sub	sp, fp, #8
   1ecd4:	pop	{r4, sl, fp, pc}
   1ecd8:	push	{r4, r5, fp, lr}
   1ecdc:	add	fp, sp, #8
   1ece0:	vpush	{d8}
   1ece4:	mov	r5, r1
   1ece8:	mov	r4, r0
   1ecec:	movw	r1, #8672	; 0x21e0
   1ecf0:	movt	r1, #4
   1ecf4:	bl	12b0c <strpbrk@plt>
   1ecf8:	vldr	s16, [pc, #48]	; 1ed30 <__assert_fail@plt+0xc140>
   1ecfc:	cmp	r0, #0
   1ed00:	bne	1ed24 <__assert_fail@plt+0xc134>
   1ed04:	cmp	r5, #0
   1ed08:	beq	1ed20 <__assert_fail@plt+0xc130>
   1ed0c:	mov	r0, r4
   1ed10:	mov	r1, #46	; 0x2e
   1ed14:	bl	128cc <strchr@plt>
   1ed18:	cmp	r0, #0
   1ed1c:	bne	1ed24 <__assert_fail@plt+0xc134>
   1ed20:	vldr	s16, [pc, #12]	; 1ed34 <__assert_fail@plt+0xc144>
   1ed24:	vmov.f32	s0, s16
   1ed28:	vpop	{d8}
   1ed2c:	pop	{r4, r5, fp, pc}
   1ed30:	svccc	0x004ccccd
   1ed34:	stclcc	12, cr12, [ip, #820]	; 0x334
   1ed38:	push	{r4, sl, fp, lr}
   1ed3c:	add	fp, sp, #8
   1ed40:	movw	r4, #23800	; 0x5cf8
   1ed44:	movt	r4, #5
   1ed48:	ldrb	r0, [r4]
   1ed4c:	cmp	r0, #0
   1ed50:	popne	{r4, sl, fp, pc}
   1ed54:	movw	r0, #8695	; 0x21f7
   1ed58:	movt	r0, #4
   1ed5c:	mov	r1, r0
   1ed60:	mov	r2, #0
   1ed64:	bl	127dc <fnmatch@plt>
   1ed68:	cmp	r0, #0
   1ed6c:	bne	1edbc <__assert_fail@plt+0xc1cc>
   1ed70:	movw	r0, #8699	; 0x21fb
   1ed74:	movt	r0, #4
   1ed78:	movw	r1, #8695	; 0x21f7
   1ed7c:	movt	r1, #4
   1ed80:	mov	r2, #0
   1ed84:	bl	127dc <fnmatch@plt>
   1ed88:	cmp	r0, #0
   1ed8c:	beq	1edbc <__assert_fail@plt+0xc1cc>
   1ed90:	movw	r0, #8699	; 0x21fb
   1ed94:	movt	r0, #4
   1ed98:	movw	r1, #8695	; 0x21f7
   1ed9c:	movt	r1, #4
   1eda0:	mov	r2, #16
   1eda4:	bl	127dc <fnmatch@plt>
   1eda8:	cmp	r0, #0
   1edac:	bne	1edbc <__assert_fail@plt+0xc1cc>
   1edb0:	mov	r0, #1
   1edb4:	strb	r0, [r4]
   1edb8:	pop	{r4, sl, fp, pc}
   1edbc:	movw	r1, #8703	; 0x21ff
   1edc0:	movt	r1, #4
   1edc4:	mov	r0, #0
   1edc8:	mov	r2, #5
   1edcc:	bl	12674 <dcgettext@plt>
   1edd0:	mov	r2, r0
   1edd4:	mov	r0, #1
   1edd8:	mov	r1, #0
   1eddc:	bl	127b8 <error@plt>
   1ede0:	push	{r4, r5, r6, r7, fp, lr}
   1ede4:	add	fp, sp, #16
   1ede8:	sub	sp, sp, #8
   1edec:	mov	r6, r2
   1edf0:	mov	r4, r1
   1edf4:	mov	r5, r0
   1edf8:	bl	1bbf0 <__assert_fail@plt+0x9000>
   1edfc:	cmp	r0, #0
   1ee00:	beq	1ee7c <__assert_fail@plt+0xc28c>
   1ee04:	mov	r0, r6
   1ee08:	mov	r1, #47	; 0x2f
   1ee0c:	bl	128cc <strchr@plt>
   1ee10:	cmp	r0, #0
   1ee14:	beq	1ee7c <__assert_fail@plt+0xc28c>
   1ee18:	movw	r1, #8758	; 0x2236
   1ee1c:	movt	r1, #4
   1ee20:	mov	r0, #0
   1ee24:	mov	r2, #5
   1ee28:	bl	12674 <dcgettext@plt>
   1ee2c:	mov	r6, r0
   1ee30:	mov	r0, #0
   1ee34:	mov	r1, r5
   1ee38:	bl	1939c <__assert_fail@plt+0x67ac>
   1ee3c:	mov	r5, r0
   1ee40:	movw	r1, #62826	; 0xf56a
   1ee44:	movt	r1, #3
   1ee48:	mov	r0, #1
   1ee4c:	bl	1939c <__assert_fail@plt+0x67ac>
   1ee50:	mov	r7, r0
   1ee54:	mov	r0, #2
   1ee58:	mov	r1, r4
   1ee5c:	bl	1939c <__assert_fail@plt+0x67ac>
   1ee60:	str	r7, [sp]
   1ee64:	str	r0, [sp, #4]
   1ee68:	mov	r0, #0
   1ee6c:	mov	r1, #0
   1ee70:	mov	r2, r6
   1ee74:	mov	r3, r5
   1ee78:	bl	127b8 <error@plt>
   1ee7c:	sub	sp, fp, #16
   1ee80:	pop	{r4, r5, r6, r7, fp, pc}
   1ee84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ee88:	add	fp, sp, #24
   1ee8c:	sub	sp, sp, #8
   1ee90:	mov	r8, r3
   1ee94:	mov	r4, r2
   1ee98:	mov	r5, r1
   1ee9c:	mov	r6, r0
   1eea0:	bl	1ed38 <__assert_fail@plt+0xc148>
   1eea4:	add	r2, sp, #4
   1eea8:	mov	r0, r5
   1eeac:	mov	r1, r4
   1eeb0:	bl	1dfe8 <__assert_fail@plt+0xb3f8>
   1eeb4:	mov	r5, #0
   1eeb8:	cmp	r0, #0
   1eebc:	beq	1ef6c <__assert_fail@plt+0xc37c>
   1eec0:	ldr	r4, [fp, #8]
   1eec4:	ldr	r7, [sp, #4]
   1eec8:	mov	r0, r6
   1eecc:	mov	r1, r4
   1eed0:	mov	r2, r7
   1eed4:	bl	17f68 <__assert_fail@plt+0x5378>
   1eed8:	mov	r6, r0
   1eedc:	mov	r0, #0
   1eee0:	strh	r0, [r6, #18]
   1eee4:	ldr	r0, [sp, #4]
   1eee8:	str	r0, [r6, #40]	; 0x28
   1eeec:	mov	r1, #0
   1eef0:	bl	1ecd8 <__assert_fail@plt+0xc0e8>
   1eef4:	vstr	s0, [r6, #28]
   1eef8:	movw	r0, #24204	; 0x5e8c
   1eefc:	movt	r0, #5
   1ef00:	ldrb	r0, [r0, #17]
   1ef04:	mov	r5, #1
   1ef08:	cmp	r0, #0
   1ef0c:	bne	1ef6c <__assert_fail@plt+0xc37c>
   1ef10:	movw	r0, #18040	; 0x4678
   1ef14:	movt	r0, #1
   1ef18:	sub	r0, r4, r0
   1ef1c:	clz	r0, r0
   1ef20:	lsr	r1, r0, #5
   1ef24:	mov	r0, r7
   1ef28:	bl	1ef78 <__assert_fail@plt+0xc388>
   1ef2c:	cmp	r0, #0
   1ef30:	bne	1ef6c <__assert_fail@plt+0xc37c>
   1ef34:	movw	r1, #8936	; 0x22e8
   1ef38:	movt	r1, #4
   1ef3c:	mov	r0, #0
   1ef40:	mov	r2, #5
   1ef44:	bl	12674 <dcgettext@plt>
   1ef48:	mov	r2, r0
   1ef4c:	str	r7, [sp]
   1ef50:	mov	r0, #0
   1ef54:	mov	r1, #0
   1ef58:	mov	r3, r8
   1ef5c:	bl	127b8 <error@plt>
   1ef60:	movw	r0, #52343	; 0xcc77
   1ef64:	movt	r0, #12843	; 0x322b
   1ef68:	str	r0, [r6, #28]
   1ef6c:	mov	r0, r5
   1ef70:	sub	sp, fp, #24
   1ef74:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ef78:	push	{r4, r5, fp, lr}
   1ef7c:	add	fp, sp, #8
   1ef80:	mov	r4, r1
   1ef84:	mov	r5, r0
   1ef88:	mov	r1, #47	; 0x2f
   1ef8c:	bl	12a4c <strrchr@plt>
   1ef90:	cmp	r0, #0
   1ef94:	beq	1efa4 <__assert_fail@plt+0xc3b4>
   1ef98:	ldrb	r0, [r0, #1]
   1ef9c:	cmp	r0, #0
   1efa0:	beq	1efac <__assert_fail@plt+0xc3bc>
   1efa4:	mov	r0, #1
   1efa8:	pop	{r4, r5, fp, pc}
   1efac:	mov	r0, r5
   1efb0:	mov	r1, r4
   1efb4:	pop	{r4, r5, fp, lr}
   1efb8:	b	15f6c <__assert_fail@plt+0x337c>
   1efbc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1efc0:	add	fp, sp, #24
   1efc4:	sub	sp, sp, #8
   1efc8:	mov	r5, r3
   1efcc:	mov	r6, r2
   1efd0:	add	r2, sp, #4
   1efd4:	bl	1dfe8 <__assert_fail@plt+0xb3f8>
   1efd8:	mov	r7, #0
   1efdc:	cmp	r0, #0
   1efe0:	beq	1f074 <__assert_fail@plt+0xc484>
   1efe4:	ldr	r4, [sp, #4]
   1efe8:	movw	r1, #19772	; 0x4d3c
   1efec:	movt	r1, #1
   1eff0:	mov	r0, r6
   1eff4:	mov	r2, r4
   1eff8:	bl	17f68 <__assert_fail@plt+0x5378>
   1effc:	mov	r6, r0
   1f000:	mov	r8, #0
   1f004:	strh	r8, [r0, #18]
   1f008:	mov	r0, #32
   1f00c:	bl	2b63c <__assert_fail@plt+0x18a4c>
   1f010:	mov	r7, r0
   1f014:	str	r0, [r6, #40]	; 0x28
   1f018:	mov	r0, #100	; 0x64
   1f01c:	str	r0, [r7, #4]
   1f020:	mov	r0, #100	; 0x64
   1f024:	bl	2b63c <__assert_fail@plt+0x18a4c>
   1f028:	str	r8, [r7, #16]
   1f02c:	str	r0, [r7]
   1f030:	mov	r0, r5
   1f034:	bl	2fb8c <__assert_fail@plt+0x1cf9c>
   1f038:	str	r8, [r7, #20]
   1f03c:	str	r5, [r7, #12]
   1f040:	mov	r0, r4
   1f044:	bl	128c0 <strlen@plt>
   1f048:	mov	r1, r0
   1f04c:	mov	r0, r4
   1f050:	mov	r2, r7
   1f054:	bl	2f924 <__assert_fail@plt+0x1cd34>
   1f058:	cmp	r0, #0
   1f05c:	bne	1f080 <__assert_fail@plt+0xc490>
   1f060:	mov	r7, #1
   1f064:	mov	r0, r4
   1f068:	mov	r1, #1
   1f06c:	bl	1ecd8 <__assert_fail@plt+0xc0e8>
   1f070:	vstr	s0, [r6, #28]
   1f074:	mov	r0, r7
   1f078:	sub	sp, fp, #24
   1f07c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f080:	mov	r5, r0
   1f084:	movw	r1, #9000	; 0x2328
   1f088:	movt	r1, #4
   1f08c:	mov	r0, #0
   1f090:	mov	r2, #5
   1f094:	bl	12674 <dcgettext@plt>
   1f098:	mov	r2, r0
   1f09c:	str	r5, [sp]
   1f0a0:	mov	r0, #1
   1f0a4:	mov	r1, #0
   1f0a8:	mov	r3, r4
   1f0ac:	bl	127b8 <error@plt>
   1f0b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1f0b4:	add	fp, sp, #24
   1f0b8:	sub	sp, sp, #8
   1f0bc:	mov	r7, r2
   1f0c0:	mov	r5, r1
   1f0c4:	mov	r6, r0
   1f0c8:	ldr	r0, [r1]
   1f0cc:	add	r0, r6, r0, lsl #2
   1f0d0:	ldr	r8, [r0, #-4]
   1f0d4:	add	r2, sp, #4
   1f0d8:	mov	r0, r6
   1f0dc:	bl	1dfe8 <__assert_fail@plt+0xb3f8>
   1f0e0:	mov	r1, r0
   1f0e4:	mov	r0, #0
   1f0e8:	cmp	r1, #0
   1f0ec:	beq	1f148 <__assert_fail@plt+0xc558>
   1f0f0:	ldr	r4, [sp, #4]
   1f0f4:	movw	r1, #8440	; 0x20f8
   1f0f8:	movt	r1, #4
   1f0fc:	mov	r0, r4
   1f100:	bl	12be4 <strspn@plt>
   1f104:	cmp	r0, #1
   1f108:	movw	r9, #24204	; 0x5e8c
   1f10c:	movt	r9, #5
   1f110:	blt	1f150 <__assert_fail@plt+0xc560>
   1f114:	ldrb	r0, [r4, r0]
   1f118:	cmp	r0, #0
   1f11c:	bne	1f150 <__assert_fail@plt+0xc560>
   1f120:	ldr	r1, [r9, #72]	; 0x48
   1f124:	mov	r0, r4
   1f128:	bl	217bc <__assert_fail@plt+0xebcc>
   1f12c:	str	r0, [r7]
   1f130:	cmp	r0, #0
   1f134:	bmi	1f150 <__assert_fail@plt+0xc560>
   1f138:	mov	r0, r6
   1f13c:	mov	r1, r5
   1f140:	bl	1e274 <__assert_fail@plt+0xb684>
   1f144:	mov	r0, #1
   1f148:	sub	sp, fp, #24
   1f14c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f150:	movw	r1, #9046	; 0x2356
   1f154:	movt	r1, #4
   1f158:	mov	r0, #0
   1f15c:	mov	r2, #5
   1f160:	bl	12674 <dcgettext@plt>
   1f164:	mov	r5, r0
   1f168:	ldr	r1, [r9, #72]	; 0x48
   1f16c:	mov	r0, #0
   1f170:	mov	r2, r4
   1f174:	bl	2a088 <__assert_fail@plt+0x17498>
   1f178:	str	r0, [sp]
   1f17c:	mov	r0, #1
   1f180:	mov	r1, #0
   1f184:	mov	r2, r5
   1f188:	mov	r3, r8
   1f18c:	bl	127b8 <error@plt>
   1f190:	push	{r4, r5, r6, r7, fp, lr}
   1f194:	add	fp, sp, #16
   1f198:	sub	sp, sp, #8
   1f19c:	mov	r5, r3
   1f1a0:	mov	r6, r2
   1f1a4:	movw	r7, #20680	; 0x50c8
   1f1a8:	movt	r7, #1
   1f1ac:	movw	r2, #9456	; 0x24f0
   1f1b0:	movt	r2, #4
   1f1b4:	movw	r4, #9463	; 0x24f7
   1f1b8:	movt	r4, #4
   1f1bc:	cmp	r3, r7
   1f1c0:	moveq	r4, r2
   1f1c4:	add	r2, sp, #4
   1f1c8:	bl	1dfe8 <__assert_fail@plt+0xb3f8>
   1f1cc:	mov	r1, r0
   1f1d0:	mov	r0, #0
   1f1d4:	cmp	r1, #0
   1f1d8:	beq	1f3cc <__assert_fail@plt+0xc7dc>
   1f1dc:	ldr	r2, [sp, #4]
   1f1e0:	ldrb	r0, [r2]
   1f1e4:	cmp	r0, #0
   1f1e8:	beq	1f464 <__assert_fail@plt+0xc874>
   1f1ec:	mov	r0, r6
   1f1f0:	mov	r1, r5
   1f1f4:	bl	17f68 <__assert_fail@plt+0x5378>
   1f1f8:	mov	r1, #0
   1f1fc:	str	r1, [r0, #28]
   1f200:	subs	r1, r5, r7
   1f204:	movwne	r1, #1
   1f208:	strb	r1, [r0, #19]
   1f20c:	sub	r1, r5, r7
   1f210:	clz	r1, r1
   1f214:	lsr	r1, r1, #5
   1f218:	strb	r1, [r0, #18]
   1f21c:	add	r1, r0, #40	; 0x28
   1f220:	ldr	r3, [sp, #4]
   1f224:	vldr	s0, [pc, #580]	; 1f470 <__assert_fail@plt+0xc880>
   1f228:	mov	r2, #1
   1f22c:	vldr	s2, [pc, #592]	; 1f484 <__assert_fail@plt+0xc894>
   1f230:	vldr	s4, [pc, #584]	; 1f480 <__assert_fail@plt+0xc890>
   1f234:	vmov.f32	s6, #108	; 0x3f600000  0.875
   1f238:	vldr	s8, [pc, #572]	; 1f47c <__assert_fail@plt+0xc88c>
   1f23c:	vldr	s10, [pc, #564]	; 1f478 <__assert_fail@plt+0xc888>
   1f240:	vldr	s12, [pc, #556]	; 1f474 <__assert_fail@plt+0xc884>
   1f244:	mov	r5, r3
   1f248:	ldrb	r3, [r3]
   1f24c:	sub	r7, r3, #68	; 0x44
   1f250:	cmp	r7, #47	; 0x2f
   1f254:	bhi	1f3bc <__assert_fail@plt+0xc7cc>
   1f258:	add	r6, pc, #8
   1f25c:	mov	r3, #0
   1f260:	vmov.f32	s14, s0
   1f264:	ldr	pc, [r6, r7, lsl #2]
   1f268:	andeq	pc, r1, r4, ror #7
   1f26c:	ldrdeq	pc, [r1], -r4
   1f270:	ldrdeq	pc, [r1], -r4
   1f274:	ldrdeq	pc, [r1], -r4
   1f278:	ldrdeq	pc, [r1], -r4
   1f27c:	ldrdeq	pc, [r1], -r4
   1f280:	ldrdeq	pc, [r1], -r4
   1f284:	ldrdeq	pc, [r1], -r4
   1f288:	ldrdeq	pc, [r1], -r4
   1f28c:	ldrdeq	pc, [r1], -r4
   1f290:	ldrdeq	pc, [r1], -r4
   1f294:	ldrdeq	pc, [r1], -r4
   1f298:	ldrdeq	pc, [r1], -r4
   1f29c:	ldrdeq	pc, [r1], -r4
   1f2a0:	ldrdeq	pc, [r1], -r4
   1f2a4:	ldrdeq	pc, [r1], -r4
   1f2a8:	ldrdeq	pc, [r1], -r4
   1f2ac:	ldrdeq	pc, [r1], -r4
   1f2b0:	ldrdeq	pc, [r1], -r4
   1f2b4:	ldrdeq	pc, [r1], -r4
   1f2b8:	ldrdeq	pc, [r1], -r4
   1f2bc:	ldrdeq	pc, [r1], -r4
   1f2c0:	ldrdeq	pc, [r1], -r4
   1f2c4:	ldrdeq	pc, [r1], -r4
   1f2c8:	ldrdeq	pc, [r1], -r4
   1f2cc:	ldrdeq	pc, [r1], -r4
   1f2d0:	ldrdeq	pc, [r1], -r4
   1f2d4:	ldrdeq	pc, [r1], -r4
   1f2d8:	ldrdeq	pc, [r1], -r4
   1f2dc:	ldrdeq	pc, [r1], -r4
   1f2e0:	andeq	pc, r1, ip, ror #6
   1f2e4:	andeq	pc, r1, r8, lsr #6
   1f2e8:	andeq	pc, r1, ip, asr #6
   1f2ec:	ldrdeq	pc, [r1], -r4
   1f2f0:	andeq	pc, r1, r4, ror #6
   1f2f4:	ldrdeq	pc, [r1], -r4
   1f2f8:	ldrdeq	pc, [r1], -r4
   1f2fc:	ldrdeq	pc, [r1], -r4
   1f300:	ldrdeq	pc, [r1], -r4
   1f304:	ldrdeq	pc, [r1], -r4
   1f308:	andeq	pc, r1, r8, asr r3	; <UNPREDICTABLE>
   1f30c:	ldrdeq	pc, [r1], -r4
   1f310:	ldrdeq	pc, [r1], -r4
   1f314:	ldrdeq	pc, [r1], -r4
   1f318:	andeq	pc, r1, r4, lsr r3	; <UNPREDICTABLE>
   1f31c:	ldrdeq	pc, [r1], -r4
   1f320:	ldrdeq	pc, [r1], -r4
   1f324:	andeq	pc, r1, r0, asr #6
   1f328:	mov	r3, #1
   1f32c:	vmov.f32	s14, s2
   1f330:	b	1f36c <__assert_fail@plt+0xc77c>
   1f334:	mov	r3, #5
   1f338:	vmov.f32	s14, s10
   1f33c:	b	1f36c <__assert_fail@plt+0xc77c>
   1f340:	mov	r3, #6
   1f344:	vmov.f32	s14, s12
   1f348:	b	1f36c <__assert_fail@plt+0xc77c>
   1f34c:	mov	r3, #2
   1f350:	vmov.f32	s14, s4
   1f354:	b	1f36c <__assert_fail@plt+0xc77c>
   1f358:	mov	r3, #4
   1f35c:	vmov.f32	s14, s8
   1f360:	b	1f36c <__assert_fail@plt+0xc77c>
   1f364:	mov	r3, #3
   1f368:	vmov.f32	s14, s6
   1f36c:	ldrb	r7, [r1, r3]
   1f370:	cmp	r7, #0
   1f374:	bne	1f40c <__assert_fail@plt+0xc81c>
   1f378:	vldr	s1, [r0, #28]
   1f37c:	vadd.f32	s14, s14, s1
   1f380:	vstr	s14, [r0, #28]
   1f384:	strb	r2, [r1, r3]
   1f388:	mov	r3, r5
   1f38c:	ldrb	r7, [r3, #1]!
   1f390:	cmp	r7, #0
   1f394:	beq	1f244 <__assert_fail@plt+0xc654>
   1f398:	cmp	r7, #44	; 0x2c
   1f39c:	bne	1f43c <__assert_fail@plt+0xc84c>
   1f3a0:	ldrb	r3, [r5, #2]!
   1f3a4:	cmp	r3, #0
   1f3a8:	mov	r3, r5
   1f3ac:	bne	1f244 <__assert_fail@plt+0xc654>
   1f3b0:	movw	r1, #9751	; 0x2617
   1f3b4:	movt	r1, #4
   1f3b8:	b	1f444 <__assert_fail@plt+0xc854>
   1f3bc:	cmp	r3, #0
   1f3c0:	bne	1f3d4 <__assert_fail@plt+0xc7e4>
   1f3c4:	str	r5, [sp, #4]
   1f3c8:	mov	r0, #1
   1f3cc:	sub	sp, fp, #16
   1f3d0:	pop	{r4, r5, r6, r7, fp, pc}
   1f3d4:	str	r5, [sp, #4]
   1f3d8:	movw	r1, #9621	; 0x2595
   1f3dc:	movt	r1, #4
   1f3e0:	b	1f3f0 <__assert_fail@plt+0xc800>
   1f3e4:	str	r5, [sp, #4]
   1f3e8:	movw	r1, #9520	; 0x2530
   1f3ec:	movt	r1, #4
   1f3f0:	mov	r0, #0
   1f3f4:	mov	r2, #5
   1f3f8:	bl	12674 <dcgettext@plt>
   1f3fc:	mov	r2, r0
   1f400:	ldrb	r0, [r5]
   1f404:	str	r0, [sp]
   1f408:	b	1f454 <__assert_fail@plt+0xc864>
   1f40c:	str	r5, [sp, #4]
   1f410:	movw	r1, #9648	; 0x25b0
   1f414:	movt	r1, #4
   1f418:	mov	r0, #0
   1f41c:	mov	r2, #5
   1f420:	bl	12674 <dcgettext@plt>
   1f424:	mov	r2, r0
   1f428:	ldrb	r3, [r5]
   1f42c:	str	r4, [sp]
   1f430:	mov	r0, #1
   1f434:	mov	r1, #0
   1f438:	bl	127b8 <error@plt>
   1f43c:	movw	r1, #9701	; 0x25e5
   1f440:	movt	r1, #4
   1f444:	mov	r0, #0
   1f448:	mov	r2, #5
   1f44c:	bl	12674 <dcgettext@plt>
   1f450:	mov	r2, r0
   1f454:	mov	r0, #1
   1f458:	mov	r1, #0
   1f45c:	mov	r3, r4
   1f460:	bl	127b8 <error@plt>
   1f464:	movw	r1, #9469	; 0x24fd
   1f468:	movt	r1, #4
   1f46c:	b	1f444 <__assert_fail@plt+0xc854>
   1f470:	bcc	1a51728 <stdout@@GLIBC_2.4+0x19fc1b4>
   1f474:			; <UNDEFINED> instruction: 0x378560fd
   1f478:	usatcc	r7, #29, lr, asr #16
   1f47c:	cfldr64cc	mvdx12, [lr], #436	; 0x1b4
   1f480:	ldccc	3, cr13, [ip, #364]!	; 0x16c
   1f484:	stmibcc	r8!, {r2, r4, r5, r6, r9, lr}^
   1f488:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f48c:	add	fp, sp, #28
   1f490:	sub	sp, sp, #28
   1f494:	str	r3, [sp, #24]
   1f498:	mov	r6, r2
   1f49c:	str	r1, [sp, #12]
   1f4a0:	movw	r7, #23804	; 0x5cfc
   1f4a4:	movt	r7, #5
   1f4a8:	ldr	r1, [r7]
   1f4ac:	str	r0, [sp, #20]
   1f4b0:	ldr	r5, [r0, #12]
   1f4b4:	ldr	r4, [fp, #20]
   1f4b8:	ldr	r0, [fp, #12]
   1f4bc:	cmp	r1, #0
   1f4c0:	bne	1f4d8 <__assert_fail@plt+0xc8e8>
   1f4c4:	mov	r8, r0
   1f4c8:	add	r0, r5, #1
   1f4cc:	bl	2b63c <__assert_fail@plt+0x18a4c>
   1f4d0:	str	r0, [r7]
   1f4d4:	mov	r0, r8
   1f4d8:	sub	sl, r5, #1
   1f4dc:	ldr	r9, [fp, #8]
   1f4e0:	add	r0, r4, r0
   1f4e4:	str	r0, [sp, #16]
   1f4e8:	ldr	r7, [r7]
   1f4ec:	b	1f500 <__assert_fail@plt+0xc910>
   1f4f0:	mov	r4, r5
   1f4f4:	ldrb	r0, [r6]
   1f4f8:	cmp	r0, #0
   1f4fc:	beq	1f5c8 <__assert_fail@plt+0xc9d8>
   1f500:	mov	r5, r4
   1f504:	ldr	r0, [sp, #20]
   1f508:	ldr	r1, [r0, #24]
   1f50c:	mov	r0, r6
   1f510:	bl	240a8 <__assert_fail@plt+0x114b8>
   1f514:	cmp	r0, #0
   1f518:	ldr	r4, [sp, #24]
   1f51c:	subne	r4, r0, r6
   1f520:	cmp	sl, r4
   1f524:	bls	1f5bc <__assert_fail@plt+0xc9cc>
   1f528:	mov	r8, r0
   1f52c:	mov	r0, r7
   1f530:	mov	r1, r6
   1f534:	mov	r2, r4
   1f538:	bl	1295c <strncpy@plt>
   1f53c:	ldr	r0, [sp, #24]
   1f540:	sub	r0, r0, r4
   1f544:	add	r6, r6, r4
   1f548:	add	r7, r7, r4
   1f54c:	sub	sl, sl, r4
   1f550:	cmp	r8, #0
   1f554:	str	r0, [sp, #24]
   1f558:	beq	1f4f0 <__assert_fail@plt+0xc900>
   1f55c:	ldr	r1, [sp, #16]
   1f560:	cmp	sl, r1
   1f564:	bls	1f5bc <__assert_fail@plt+0xc9cc>
   1f568:	mov	r4, r5
   1f56c:	cmp	r9, #0
   1f570:	beq	1f588 <__assert_fail@plt+0xc998>
   1f574:	mov	r0, r7
   1f578:	mov	r1, r9
   1f57c:	bl	12770 <strcpy@plt>
   1f580:	ldr	r0, [fp, #12]
   1f584:	add	r7, r7, r0
   1f588:	ldr	r0, [sp, #16]
   1f58c:	sub	sl, sl, r0
   1f590:	mov	r0, r7
   1f594:	ldr	r1, [fp, #16]
   1f598:	bl	12770 <strcpy@plt>
   1f59c:	add	r7, r7, r4
   1f5a0:	ldr	r0, [sp, #20]
   1f5a4:	ldr	r0, [r0, #20]
   1f5a8:	ldr	r1, [sp, #24]
   1f5ac:	sub	r1, r1, r0
   1f5b0:	str	r1, [sp, #24]
   1f5b4:	add	r6, r6, r0
   1f5b8:	b	1f4f4 <__assert_fail@plt+0xc904>
   1f5bc:	ldrb	r0, [r6]
   1f5c0:	cmp	r0, #0
   1f5c4:	bne	1f608 <__assert_fail@plt+0xca18>
   1f5c8:	mov	r0, #0
   1f5cc:	strb	r0, [r7]
   1f5d0:	movw	r1, #23804	; 0x5cfc
   1f5d4:	movt	r1, #5
   1f5d8:	ldr	r2, [r1]
   1f5dc:	str	r0, [sp]
   1f5e0:	str	r0, [sp, #4]
   1f5e4:	ldr	r0, [fp, #24]
   1f5e8:	str	r0, [sp, #8]
   1f5ec:	sub	r0, r7, r2
   1f5f0:	add	r3, r0, #1
   1f5f4:	ldr	r0, [sp, #20]
   1f5f8:	ldr	r1, [sp, #12]
   1f5fc:	bl	1f62c <__assert_fail@plt+0xca3c>
   1f600:	sub	sp, fp, #28
   1f604:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f608:	movw	r1, #11464	; 0x2cc8
   1f60c:	movt	r1, #4
   1f610:	mov	r0, #0
   1f614:	mov	r2, #5
   1f618:	bl	12674 <dcgettext@plt>
   1f61c:	mov	r2, r0
   1f620:	mov	r0, #1
   1f624:	mov	r1, #0
   1f628:	bl	127b8 <error@plt>
   1f62c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f630:	add	fp, sp, #28
   1f634:	sub	sp, sp, #4
   1f638:	cmp	r2, #0
   1f63c:	beq	1f7fc <__assert_fail@plt+0xcc0c>
   1f640:	mov	r9, r3
   1f644:	mov	sl, r2
   1f648:	mov	r4, r1
   1f64c:	mov	r6, r0
   1f650:	ldr	r8, [fp, #16]
   1f654:	ldr	r0, [fp, #12]
   1f658:	movw	r5, #12303	; 0x300f
   1f65c:	movt	r5, #4
   1f660:	cmp	r2, r5
   1f664:	beq	1f6f0 <__assert_fail@plt+0xcb00>
   1f668:	add	r0, r0, r9
   1f66c:	ldr	r1, [r4, #16]
   1f670:	add	r0, r0, r1
   1f674:	ldr	r1, [r6, #12]
   1f678:	cmp	r0, r1
   1f67c:	bls	1f6d0 <__assert_fail@plt+0xcae0>
   1f680:	cmp	r8, #0
   1f684:	bne	1f81c <__assert_fail@plt+0xcc2c>
   1f688:	ldr	r0, [r6, #28]
   1f68c:	ldr	r1, [r4]
   1f690:	cmp	r1, r0
   1f694:	beq	1f81c <__assert_fail@plt+0xcc2c>
   1f698:	ldr	r0, [r6, #24]
   1f69c:	cmp	r0, #0
   1f6a0:	bne	1f828 <__assert_fail@plt+0xcc38>
   1f6a4:	ldr	r0, [r6]
   1f6a8:	cmp	r0, #0
   1f6ac:	beq	1f6c4 <__assert_fail@plt+0xcad4>
   1f6b0:	ldr	r0, [r6, #36]	; 0x24
   1f6b4:	cmp	r0, #0
   1f6b8:	ldreq	r0, [r6, #40]	; 0x28
   1f6bc:	cmpeq	r0, #0
   1f6c0:	bne	1f828 <__assert_fail@plt+0xcc38>
   1f6c4:	mov	r0, r6
   1f6c8:	mov	r1, r4
   1f6cc:	bl	1f84c <__assert_fail@plt+0xcc5c>
   1f6d0:	mov	r0, r8
   1f6d4:	mov	r1, r6
   1f6d8:	mov	r2, r4
   1f6dc:	bl	1fb88 <__assert_fail@plt+0xcf98>
   1f6e0:	cmp	r0, #0
   1f6e4:	movne	r0, r6
   1f6e8:	movne	r1, r4
   1f6ec:	blne	1f84c <__assert_fail@plt+0xcc5c>
   1f6f0:	cmp	r8, #0
   1f6f4:	moveq	r0, #1
   1f6f8:	streq	r0, [r4, #28]
   1f6fc:	ldr	r0, [r4]
   1f700:	ldr	r1, [r4, #8]
   1f704:	cmp	r0, r1
   1f708:	bcc	1f744 <__assert_fail@plt+0xcb54>
   1f70c:	ldr	r0, [r4, #4]
   1f710:	cmp	r0, #0
   1f714:	beq	1f730 <__assert_fail@plt+0xcb40>
   1f718:	lsl	r0, r1, #1
   1f71c:	str	r0, [r4, #8]
   1f720:	ldr	r0, [r4, #4]
   1f724:	lsl	r1, r1, #3
   1f728:	bl	2b67c <__assert_fail@plt+0x18a8c>
   1f72c:	b	1f740 <__assert_fail@plt+0xcb50>
   1f730:	mov	r0, #64	; 0x40
   1f734:	str	r0, [r4, #8]
   1f738:	mov	r0, #256	; 0x100
   1f73c:	bl	2b63c <__assert_fail@plt+0x18a4c>
   1f740:	str	r0, [r4, #4]
   1f744:	cmp	sl, r5
   1f748:	beq	1f7d4 <__assert_fail@plt+0xcbe4>
   1f74c:	ldr	r1, [fp, #8]
   1f750:	ldm	r4, {r2, r3}
   1f754:	ldr	r7, [r4, #12]
   1f758:	ldr	r0, [r4, #16]
   1f75c:	add	r5, r2, #1
   1f760:	str	r5, [r4]
   1f764:	add	r7, r7, r0
   1f768:	str	r7, [r3, r2, lsl #2]
   1f76c:	cmp	r1, #0
   1f770:	beq	1f790 <__assert_fail@plt+0xcba0>
   1f774:	ldr	r2, [r4, #12]
   1f778:	add	r0, r2, r0
   1f77c:	bl	12770 <strcpy@plt>
   1f780:	ldr	r0, [r4, #16]
   1f784:	ldr	r1, [fp, #12]
   1f788:	add	r0, r0, r1
   1f78c:	str	r0, [r4, #16]
   1f790:	ldr	r0, [r4, #12]
   1f794:	ldr	r1, [r4, #16]
   1f798:	add	r0, r0, r1
   1f79c:	mov	r1, sl
   1f7a0:	bl	12770 <strcpy@plt>
   1f7a4:	ldr	r0, [r4, #16]
   1f7a8:	add	r0, r0, r9
   1f7ac:	str	r0, [r4, #16]
   1f7b0:	mov	r0, r8
   1f7b4:	mov	r1, r6
   1f7b8:	mov	r2, r4
   1f7bc:	bl	1fb88 <__assert_fail@plt+0xcf98>
   1f7c0:	cmp	r0, #0
   1f7c4:	movne	r0, r6
   1f7c8:	movne	r1, r4
   1f7cc:	blne	1f84c <__assert_fail@plt+0xcc5c>
   1f7d0:	b	1f7e8 <__assert_fail@plt+0xcbf8>
   1f7d4:	ldm	r4, {r0, r1}
   1f7d8:	add	r2, r0, #1
   1f7dc:	str	r2, [r4]
   1f7e0:	mov	r2, #0
   1f7e4:	str	r2, [r1, r0, lsl #2]
   1f7e8:	cmp	r8, #0
   1f7ec:	ldrne	r0, [r4, #16]
   1f7f0:	strne	r0, [r4, #20]
   1f7f4:	sub	sp, fp, #28
   1f7f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f7fc:	movw	r0, #11675	; 0x2d9b
   1f800:	movt	r0, #4
   1f804:	movw	r1, #11501	; 0x2ced
   1f808:	movt	r1, #4
   1f80c:	movw	r3, #11687	; 0x2da7
   1f810:	movt	r3, #4
   1f814:	movw	r2, #341	; 0x155
   1f818:	bl	12bf0 <__assert_fail@plt>
   1f81c:	movw	r1, #11805	; 0x2e1d
   1f820:	movt	r1, #4
   1f824:	b	1f830 <__assert_fail@plt+0xcc40>
   1f828:	movw	r1, #11864	; 0x2e58
   1f82c:	movt	r1, #4
   1f830:	mov	r0, #0
   1f834:	mov	r2, #5
   1f838:	bl	12674 <dcgettext@plt>
   1f83c:	mov	r2, r0
   1f840:	mov	r0, #1
   1f844:	mov	r1, #0
   1f848:	bl	127b8 <error@plt>
   1f84c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f850:	add	fp, sp, #28
   1f854:	sub	sp, sp, #4
   1f858:	mov	r9, r1
   1f85c:	mov	r5, r0
   1f860:	bl	1f9c4 <__assert_fail@plt+0xcdd4>
   1f864:	ldr	r0, [r9]
   1f868:	cmp	r0, #0
   1f86c:	beq	1f984 <__assert_fail@plt+0xcd94>
   1f870:	ldr	r1, [r9, #4]
   1f874:	add	r1, r1, r0, lsl #2
   1f878:	ldr	r1, [r1, #-4]
   1f87c:	cmp	r1, #0
   1f880:	bne	1f9a4 <__assert_fail@plt+0xcdb4>
   1f884:	mov	r1, #4
   1f888:	add	r0, r1, r0, lsl #2
   1f88c:	bl	2b63c <__assert_fail@plt+0x18a4c>
   1f890:	mov	r8, r0
   1f894:	ldr	r7, [r9]
   1f898:	mov	sl, #0
   1f89c:	b	1f8dc <__assert_fail@plt+0xccec>
   1f8a0:	mov	r0, r5
   1f8a4:	mov	r1, r9
   1f8a8:	mov	r2, #1
   1f8ac:	mov	r3, r7
   1f8b0:	bl	1fab0 <__assert_fail@plt+0xcec0>
   1f8b4:	mov	r7, r0
   1f8b8:	add	r0, r6, sl
   1f8bc:	ldr	r1, [r5, #28]
   1f8c0:	sub	sl, r0, r1
   1f8c4:	ldr	r0, [r5, #28]
   1f8c8:	ldr	r1, [r9]
   1f8cc:	sub	r0, r1, r0
   1f8d0:	add	r1, sl, #1
   1f8d4:	cmp	r1, r0
   1f8d8:	bcs	1f944 <__assert_fail@plt+0xcd54>
   1f8dc:	str	sl, [sp]
   1f8e0:	mov	r0, r5
   1f8e4:	mov	r1, r9
   1f8e8:	mov	r2, r8
   1f8ec:	mov	r3, r7
   1f8f0:	bl	1f9f8 <__assert_fail@plt+0xce08>
   1f8f4:	mov	r6, r0
   1f8f8:	ldr	r4, [r5, #32]
   1f8fc:	ldr	r1, [r9, #24]
   1f900:	mov	r0, r5
   1f904:	mov	r2, r6
   1f908:	mov	r3, r8
   1f90c:	blx	r4
   1f910:	cmp	r0, #0
   1f914:	bne	1f8a0 <__assert_fail@plt+0xccb0>
   1f918:	ldr	r0, [r5, #28]
   1f91c:	add	r0, r0, #1
   1f920:	cmp	r7, r0
   1f924:	bls	1f960 <__assert_fail@plt+0xcd70>
   1f928:	mov	r0, r5
   1f92c:	mov	r1, r9
   1f930:	mov	r2, #0
   1f934:	mov	r3, r7
   1f938:	bl	1fab0 <__assert_fail@plt+0xcec0>
   1f93c:	mov	r7, r0
   1f940:	b	1f8c4 <__assert_fail@plt+0xccd4>
   1f944:	mov	r0, r8
   1f948:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   1f94c:	mov	r0, r5
   1f950:	mov	r1, r9
   1f954:	sub	sp, fp, #28
   1f958:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f95c:	b	1fb64 <__assert_fail@plt+0xcf74>
   1f960:	movw	r1, #11623	; 0x2d67
   1f964:	movt	r1, #4
   1f968:	mov	r0, #0
   1f96c:	mov	r2, #5
   1f970:	bl	12674 <dcgettext@plt>
   1f974:	mov	r2, r0
   1f978:	mov	r0, #1
   1f97c:	mov	r1, #0
   1f980:	bl	127b8 <error@plt>
   1f984:	movw	r0, #11481	; 0x2cd9
   1f988:	movt	r0, #4
   1f98c:	movw	r1, #11501	; 0x2ced
   1f990:	movt	r1, #4
   1f994:	movw	r3, #11512	; 0x2cf8
   1f998:	movt	r3, #4
   1f99c:	movw	r2, #261	; 0x105
   1f9a0:	bl	12bf0 <__assert_fail@plt>
   1f9a4:	movw	r0, #11580	; 0x2d3c
   1f9a8:	movt	r0, #4
   1f9ac:	movw	r1, #11501	; 0x2ced
   1f9b0:	movt	r1, #4
   1f9b4:	movw	r3, #11512	; 0x2cf8
   1f9b8:	movt	r3, #4
   1f9bc:	movw	r2, #262	; 0x106
   1f9c0:	bl	12bf0 <__assert_fail@plt>
   1f9c4:	push	{fp, lr}
   1f9c8:	mov	fp, sp
   1f9cc:	sub	sp, sp, #16
   1f9d0:	mov	r2, #0
   1f9d4:	str	r2, [sp]
   1f9d8:	str	r2, [sp, #4]
   1f9dc:	str	r2, [sp, #8]
   1f9e0:	movw	r2, #12303	; 0x300f
   1f9e4:	movt	r2, #4
   1f9e8:	mov	r3, #0
   1f9ec:	bl	1f62c <__assert_fail@plt+0xca3c>
   1f9f0:	mov	sp, fp
   1f9f4:	pop	{fp, pc}
   1f9f8:	push	{r4, r5, fp, lr}
   1f9fc:	add	fp, sp, #8
   1fa00:	ldr	r4, [r0, #28]
   1fa04:	cmp	r4, #0
   1fa08:	beq	1fa38 <__assert_fail@plt+0xce48>
   1fa0c:	ldr	ip, [r0, #28]
   1fa10:	mov	r0, #0
   1fa14:	ldr	r4, [r1, #4]
   1fa18:	ldr	r4, [r4, r0, lsl #2]
   1fa1c:	str	r4, [r2, r0, lsl #2]
   1fa20:	add	r0, r0, #1
   1fa24:	cmp	r0, ip
   1fa28:	bcc	1fa14 <__assert_fail@plt+0xce24>
   1fa2c:	cmp	r0, r3
   1fa30:	bcc	1fa48 <__assert_fail@plt+0xce58>
   1fa34:	b	1fa80 <__assert_fail@plt+0xce90>
   1fa38:	mov	r0, #0
   1fa3c:	mov	ip, #0
   1fa40:	cmp	r0, r3
   1fa44:	bcs	1fa80 <__assert_fail@plt+0xce90>
   1fa48:	ldr	r4, [fp, #8]
   1fa4c:	add	lr, r0, r4
   1fa50:	ldr	r4, [r1]
   1fa54:	cmp	lr, r4
   1fa58:	bcs	1fa80 <__assert_fail@plt+0xce90>
   1fa5c:	ldr	r4, [r1]
   1fa60:	ldr	r5, [r1, #4]
   1fa64:	ldr	r5, [r5, lr, lsl #2]
   1fa68:	str	r5, [r2, r0, lsl #2]
   1fa6c:	add	r0, r0, #1
   1fa70:	cmp	r0, r3
   1fa74:	addcc	lr, lr, #1
   1fa78:	cmpcc	lr, r4
   1fa7c:	bcc	1fa60 <__assert_fail@plt+0xce70>
   1fa80:	cmp	r0, ip
   1fa84:	movcs	r1, #0
   1fa88:	strcs	r1, [r2, r0, lsl #2]
   1fa8c:	popcs	{r4, r5, fp, pc}
   1fa90:	movw	r0, #12180	; 0x2f94
   1fa94:	movt	r0, #4
   1fa98:	movw	r1, #11501	; 0x2ced
   1fa9c:	movt	r1, #4
   1faa0:	movw	r3, #12209	; 0x2fb1
   1faa4:	movt	r3, #4
   1faa8:	mov	r2, #242	; 0xf2
   1faac:	bl	12bf0 <__assert_fail@plt>
   1fab0:	cmp	r2, #0
   1fab4:	beq	1fac8 <__assert_fail@plt+0xced8>
   1fab8:	ldr	ip, [r1, #36]	; 0x24
   1fabc:	cmp	ip, r3
   1fac0:	strcc	r3, [r1, #36]	; 0x24
   1fac4:	b	1fad8 <__assert_fail@plt+0xcee8>
   1fac8:	ldr	ip, [r1, #40]	; 0x28
   1facc:	sub	ip, ip, #1
   1fad0:	cmp	ip, r3
   1fad4:	strcs	r3, [r1, #40]	; 0x28
   1fad8:	ldr	ip, [r1, #36]	; 0x24
   1fadc:	cmp	ip, #0
   1fae0:	beq	1fb10 <__assert_fail@plt+0xcf20>
   1fae4:	ldr	r1, [r1, #40]	; 0x28
   1fae8:	cmp	r1, ip
   1faec:	bls	1fb10 <__assert_fail@plt+0xcf20>
   1faf0:	sub	r1, r1, ip
   1faf4:	lsr	r1, r1, #1
   1faf8:	cmp	r2, #0
   1fafc:	beq	1fb2c <__assert_fail@plt+0xcf3c>
   1fb00:	cmp	r1, #0
   1fb04:	addeq	r1, r3, #1
   1fb08:	addne	r1, r1, r3
   1fb0c:	b	1fb38 <__assert_fail@plt+0xcf48>
   1fb10:	cmp	r2, #0
   1fb14:	beq	1fb24 <__assert_fail@plt+0xcf34>
   1fb18:	adds	r1, r3, #1
   1fb1c:	mvncs	r1, #0
   1fb20:	b	1fb38 <__assert_fail@plt+0xcf48>
   1fb24:	lsr	r1, r3, #1
   1fb28:	b	1fb38 <__assert_fail@plt+0xcf48>
   1fb2c:	cmp	r1, #0
   1fb30:	subeq	r1, r3, #1
   1fb34:	subne	r1, r3, r1
   1fb38:	ldr	r0, [r0, #28]
   1fb3c:	cmp	r0, #0
   1fb40:	beq	1fb54 <__assert_fail@plt+0xcf64>
   1fb44:	add	r0, r0, #1
   1fb48:	cmp	r1, r0
   1fb4c:	movhi	r0, r1
   1fb50:	b	1fb58 <__assert_fail@plt+0xcf68>
   1fb54:	mov	r0, r1
   1fb58:	cmp	r0, #0
   1fb5c:	movweq	r0, #1
   1fb60:	bx	lr
   1fb64:	ldr	r0, [r0, #28]
   1fb68:	mvn	r2, #0
   1fb6c:	mov	r3, #0
   1fb70:	str	r3, [r1, #28]
   1fb74:	str	r2, [r1, #32]
   1fb78:	str	r0, [r1]
   1fb7c:	ldr	r0, [r1, #20]
   1fb80:	str	r0, [r1, #16]
   1fb84:	bx	lr
   1fb88:	cmp	r0, #0
   1fb8c:	bne	1fbb4 <__assert_fail@plt+0xcfc4>
   1fb90:	ldr	r3, [r1, #40]	; 0x28
   1fb94:	cmp	r3, #0
   1fb98:	beq	1fbb4 <__assert_fail@plt+0xcfc4>
   1fb9c:	ldr	ip, [r1, #28]
   1fba0:	ldr	r0, [r2]
   1fba4:	sub	ip, r0, ip
   1fba8:	mov	r0, #1
   1fbac:	cmp	ip, r3
   1fbb0:	bxeq	lr
   1fbb4:	ldr	r0, [r1, #16]
   1fbb8:	ldr	r1, [r2]
   1fbbc:	sub	r0, r1, r0
   1fbc0:	clz	r0, r0
   1fbc4:	lsr	r0, r0, #5
   1fbc8:	bx	lr
   1fbcc:	push	{fp, lr}
   1fbd0:	mov	fp, sp
   1fbd4:	mov	r0, #0
   1fbd8:	bl	1268c <sysconf@plt>
   1fbdc:	cmp	r0, #0
   1fbe0:	mvnle	r0, #-2147483648	; 0x80000000
   1fbe4:	pop	{fp, pc}
   1fbe8:	push	{r4, r5, fp, lr}
   1fbec:	add	fp, sp, #8
   1fbf0:	movw	r0, #21852	; 0x555c
   1fbf4:	movt	r0, #5
   1fbf8:	ldr	r1, [r0]
   1fbfc:	ldr	r0, [r1]
   1fc00:	cmp	r0, #0
   1fc04:	beq	1fc30 <__assert_fail@plt+0xd040>
   1fc08:	add	r5, r1, #4
   1fc0c:	mov	r4, #0
   1fc10:	bl	128c0 <strlen@plt>
   1fc14:	add	r0, r4, r0
   1fc18:	add	r4, r0, #1
   1fc1c:	ldr	r0, [r5], #4
   1fc20:	cmp	r0, #0
   1fc24:	bne	1fc10 <__assert_fail@plt+0xd020>
   1fc28:	mov	r0, r4
   1fc2c:	pop	{r4, r5, fp, pc}
   1fc30:	mov	r4, #0
   1fc34:	mov	r0, r4
   1fc38:	pop	{r4, r5, fp, pc}
   1fc3c:	push	{r4, r5, r6, sl, fp, lr}
   1fc40:	add	fp, sp, #16
   1fc44:	mov	r5, r1
   1fc48:	mov	r4, r0
   1fc4c:	bl	1fbe8 <__assert_fail@plt+0xcff8>
   1fc50:	mov	r6, r0
   1fc54:	mov	r0, #4096	; 0x1000
   1fc58:	str	r0, [r4, #8]
   1fc5c:	bl	1fbcc <__assert_fail@plt+0xcfdc>
   1fc60:	mov	r1, r0
   1fc64:	mov	r0, #0
   1fc68:	stm	r4, {r0, r1}
   1fc6c:	mov	r0, #1
   1fc70:	cmp	r1, r6
   1fc74:	bcc	1fcd0 <__assert_fail@plt+0xd0e0>
   1fc78:	add	r2, r6, r5
   1fc7c:	mov	r0, #2
   1fc80:	cmp	r2, r1
   1fc84:	bcs	1fcd0 <__assert_fail@plt+0xd0e0>
   1fc88:	sub	r0, r1, r6
   1fc8c:	sub	r1, r0, r5
   1fc90:	str	r1, [r4, #4]
   1fc94:	mvn	r0, #1
   1fc98:	add	r0, r0, r1, lsr #2
   1fc9c:	str	r0, [r4, #16]
   1fca0:	cmp	r0, #0
   1fca4:	beq	1fcd4 <__assert_fail@plt+0xd0e4>
   1fca8:	mov	r0, #0
   1fcac:	movw	r2, #64756	; 0xfcf4
   1fcb0:	movt	r2, #1
   1fcb4:	str	r0, [r4, #20]
   1fcb8:	str	r0, [r4, #24]
   1fcbc:	str	r0, [r4, #28]
   1fcc0:	str	r2, [r4, #32]
   1fcc4:	str	r0, [r4, #36]	; 0x24
   1fcc8:	str	r0, [r4, #40]	; 0x28
   1fccc:	str	r1, [r4, #12]
   1fcd0:	pop	{r4, r5, r6, sl, fp, pc}
   1fcd4:	movw	r0, #11887	; 0x2e6f
   1fcd8:	movt	r0, #4
   1fcdc:	movw	r1, #11501	; 0x2ced
   1fce0:	movt	r1, #4
   1fce4:	movw	r3, #11910	; 0x2e86
   1fce8:	movt	r3, #4
   1fcec:	movw	r2, #518	; 0x206
   1fcf0:	bl	12bf0 <__assert_fail@plt>
   1fcf4:	mov	r0, #0
   1fcf8:	bx	lr
   1fcfc:	ldr	r1, [r0, #4]
   1fd00:	mov	r2, #0
   1fd04:	cmp	r2, r1, lsr #17
   1fd08:	beq	1fd18 <__assert_fail@plt+0xd128>
   1fd0c:	ldr	r1, [r0, #8]
   1fd10:	cmp	r1, #131072	; 0x20000
   1fd14:	movls	r1, #131072	; 0x20000
   1fd18:	str	r1, [r0, #12]
   1fd1c:	bx	lr
   1fd20:	push	{r4, r5, r6, sl, fp, lr}
   1fd24:	add	fp, sp, #16
   1fd28:	mov	r4, r1
   1fd2c:	mov	r6, #0
   1fd30:	str	r6, [r1, #16]
   1fd34:	str	r6, [r1, #36]	; 0x24
   1fd38:	str	r6, [r1, #40]	; 0x28
   1fd3c:	str	r6, [r1]
   1fd40:	str	r6, [r1, #4]
   1fd44:	str	r6, [r1, #8]
   1fd48:	ldr	r0, [r0, #12]
   1fd4c:	movw	r1, #63488	; 0xf800
   1fd50:	movt	r1, #32767	; 0x7fff
   1fd54:	cmp	r0, r1
   1fd58:	bcs	1fd88 <__assert_fail@plt+0xd198>
   1fd5c:	mov	r5, r2
   1fd60:	add	r0, r0, #1
   1fd64:	bl	2b63c <__assert_fail@plt+0x18a4c>
   1fd68:	mvn	r1, #0
   1fd6c:	str	r0, [r4, #12]
   1fd70:	str	r6, [r4, #16]
   1fd74:	str	r6, [r4, #20]
   1fd78:	str	r5, [r4, #24]
   1fd7c:	str	r6, [r4, #28]
   1fd80:	str	r1, [r4, #32]
   1fd84:	pop	{r4, r5, r6, sl, fp, pc}
   1fd88:	movw	r0, #11985	; 0x2ed1
   1fd8c:	movt	r0, #4
   1fd90:	movw	r1, #11501	; 0x2ced
   1fd94:	movt	r1, #4
   1fd98:	movw	r3, #12020	; 0x2ef4
   1fd9c:	movt	r3, #4
   1fda0:	mov	r2, #572	; 0x23c
   1fda4:	bl	12bf0 <__assert_fail@plt>
   1fda8:	push	{r4, r5, r6, sl, fp, lr}
   1fdac:	add	fp, sp, #16
   1fdb0:	mov	r1, r0
   1fdb4:	ldr	r0, [r0]
   1fdb8:	cmp	r0, #0
   1fdbc:	beq	1fde8 <__assert_fail@plt+0xd1f8>
   1fdc0:	add	r6, r1, #4
   1fdc4:	mov	r5, #0
   1fdc8:	mov	r4, #0
   1fdcc:	bl	128c0 <strlen@plt>
   1fdd0:	add	r4, r0, r4
   1fdd4:	ldr	r0, [r6, r5, lsl #2]
   1fdd8:	add	r5, r5, #1
   1fddc:	cmp	r0, #0
   1fde0:	bne	1fdcc <__assert_fail@plt+0xd1dc>
   1fde4:	b	1fdf0 <__assert_fail@plt+0xd200>
   1fde8:	mov	r4, #0
   1fdec:	mov	r5, #0
   1fdf0:	movw	r0, #12105	; 0x2f49
   1fdf4:	movt	r0, #4
   1fdf8:	mov	r1, r5
   1fdfc:	bl	1fe2c <__assert_fail@plt+0xd23c>
   1fe00:	mov	r1, r0
   1fe04:	mov	r0, #1
   1fe08:	cmp	r1, #0
   1fe0c:	popne	{r4, r5, r6, sl, fp, pc}
   1fe10:	movw	r0, #12142	; 0x2f6e
   1fe14:	movt	r0, #4
   1fe18:	mov	r1, r4
   1fe1c:	bl	1fe2c <__assert_fail@plt+0xd23c>
   1fe20:	cmp	r0, #0
   1fe24:	movwne	r0, #1
   1fe28:	pop	{r4, r5, r6, sl, fp, pc}
   1fe2c:	push	{r4, r5, fp, lr}
   1fe30:	add	fp, sp, #8
   1fe34:	sub	sp, sp, #16
   1fe38:	mov	r5, r1
   1fe3c:	mov	r4, r0
   1fe40:	bl	127f4 <getenv@plt>
   1fe44:	cmp	r0, #0
   1fe48:	beq	1fe84 <__assert_fail@plt+0xd294>
   1fe4c:	mov	r1, #0
   1fe50:	str	r1, [sp]
   1fe54:	add	r1, sp, #12
   1fe58:	add	r3, sp, #8
   1fe5c:	mov	r2, #10
   1fe60:	bl	2baa4 <__assert_fail@plt+0x18eb4>
   1fe64:	cmp	r0, #0
   1fe68:	bne	1fe90 <__assert_fail@plt+0xd2a0>
   1fe6c:	ldr	r1, [sp, #8]
   1fe70:	mov	r0, #1
   1fe74:	cmp	r1, r5
   1fe78:	movcs	r0, #0
   1fe7c:	sub	sp, fp, #8
   1fe80:	pop	{r4, r5, fp, pc}
   1fe84:	mov	r0, #0
   1fe88:	sub	sp, fp, #8
   1fe8c:	pop	{r4, r5, fp, pc}
   1fe90:	bl	12908 <__errno_location@plt>
   1fe94:	ldr	r5, [r0]
   1fe98:	movw	r1, #12315	; 0x301b
   1fe9c:	movt	r1, #4
   1fea0:	mov	r0, #0
   1fea4:	mov	r2, #5
   1fea8:	bl	12674 <dcgettext@plt>
   1feac:	mov	r2, r0
   1feb0:	mov	r0, #1
   1feb4:	mov	r1, r5
   1feb8:	mov	r3, r4
   1febc:	bl	127b8 <error@plt>
   1fec0:	push	{r4, r5, r6, sl, fp, lr}
   1fec4:	add	fp, sp, #16
   1fec8:	sub	sp, sp, #8
   1fecc:	mov	r5, r2
   1fed0:	mov	r4, r1
   1fed4:	mov	r6, r0
   1fed8:	mov	r0, sp
   1fedc:	bl	2a744 <__assert_fail@plt+0x17b54>
   1fee0:	cmp	r0, #0
   1fee4:	bne	1ff58 <__assert_fail@plt+0xd368>
   1fee8:	mov	r0, r6
   1feec:	bl	2a7a0 <__assert_fail@plt+0x17bb0>
   1fef0:	cmp	r0, #0
   1fef4:	bne	1ff4c <__assert_fail@plt+0xd35c>
   1fef8:	mov	r0, r5
   1fefc:	blx	r4
   1ff00:	mov	r4, r0
   1ff04:	mov	r5, #0
   1ff08:	cmn	r0, #1
   1ff0c:	bgt	1ff18 <__assert_fail@plt+0xd328>
   1ff10:	bl	12908 <__errno_location@plt>
   1ff14:	ldr	r5, [r0]
   1ff18:	mov	r0, sp
   1ff1c:	bl	2a7a0 <__assert_fail@plt+0x17bb0>
   1ff20:	cmp	r0, #0
   1ff24:	bne	1ff4c <__assert_fail@plt+0xd35c>
   1ff28:	mov	r0, sp
   1ff2c:	bl	2a7bc <__assert_fail@plt+0x17bcc>
   1ff30:	cmp	r5, #0
   1ff34:	beq	1ff40 <__assert_fail@plt+0xd350>
   1ff38:	bl	12908 <__errno_location@plt>
   1ff3c:	str	r5, [r0]
   1ff40:	mov	r0, r4
   1ff44:	sub	sp, fp, #16
   1ff48:	pop	{r4, r5, r6, sl, fp, pc}
   1ff4c:	bl	12908 <__errno_location@plt>
   1ff50:	ldr	r0, [r0]
   1ff54:	bl	25608 <__assert_fail@plt+0x12a18>
   1ff58:	bl	12908 <__errno_location@plt>
   1ff5c:	ldr	r0, [r0]
   1ff60:	bl	255c8 <__assert_fail@plt+0x129d8>
   1ff64:	push	{r4, r5, r6, sl, fp, lr}
   1ff68:	add	fp, sp, #16
   1ff6c:	sub	sp, sp, #8
   1ff70:	mov	r4, r2
   1ff74:	cmn	r0, #100	; 0x64
   1ff78:	bne	1ff8c <__assert_fail@plt+0xd39c>
   1ff7c:	mov	r0, r4
   1ff80:	sub	sp, fp, #16
   1ff84:	pop	{r4, r5, r6, sl, fp, lr}
   1ff88:	bx	r1
   1ff8c:	mov	r5, r0
   1ff90:	mov	r6, r1
   1ff94:	mov	r0, sp
   1ff98:	bl	2a744 <__assert_fail@plt+0x17b54>
   1ff9c:	cmp	r0, #0
   1ffa0:	bne	20028 <__assert_fail@plt+0xd438>
   1ffa4:	mov	r0, r5
   1ffa8:	bl	12adc <fchdir@plt>
   1ffac:	cmp	r0, #0
   1ffb0:	beq	1ffd4 <__assert_fail@plt+0xd3e4>
   1ffb4:	bl	12908 <__errno_location@plt>
   1ffb8:	mov	r4, r0
   1ffbc:	ldr	r5, [r0]
   1ffc0:	mov	r0, sp
   1ffc4:	bl	2a7bc <__assert_fail@plt+0x17bcc>
   1ffc8:	str	r5, [r4]
   1ffcc:	mvn	r4, #0
   1ffd0:	b	2001c <__assert_fail@plt+0xd42c>
   1ffd4:	mov	r0, r4
   1ffd8:	blx	r6
   1ffdc:	mov	r4, r0
   1ffe0:	mov	r5, #0
   1ffe4:	cmn	r0, #1
   1ffe8:	bgt	1fff4 <__assert_fail@plt+0xd404>
   1ffec:	bl	12908 <__errno_location@plt>
   1fff0:	ldr	r5, [r0]
   1fff4:	mov	r0, sp
   1fff8:	bl	2a7a0 <__assert_fail@plt+0x17bb0>
   1fffc:	cmp	r0, #0
   20000:	bne	20034 <__assert_fail@plt+0xd444>
   20004:	mov	r0, sp
   20008:	bl	2a7bc <__assert_fail@plt+0x17bcc>
   2000c:	cmp	r5, #0
   20010:	beq	2001c <__assert_fail@plt+0xd42c>
   20014:	bl	12908 <__errno_location@plt>
   20018:	str	r5, [r0]
   2001c:	mov	r0, r4
   20020:	sub	sp, fp, #16
   20024:	pop	{r4, r5, r6, sl, fp, pc}
   20028:	bl	12908 <__errno_location@plt>
   2002c:	ldr	r0, [r0]
   20030:	bl	255c8 <__assert_fail@plt+0x129d8>
   20034:	bl	12908 <__errno_location@plt>
   20038:	ldr	r0, [r0]
   2003c:	bl	25608 <__assert_fail@plt+0x12a18>
   20040:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20044:	add	fp, sp, #24
   20048:	mov	r6, r2
   2004c:	mov	r7, r1
   20050:	mov	r4, r0
   20054:	bl	12908 <__errno_location@plt>
   20058:	cmp	r7, #0
   2005c:	beq	200dc <__assert_fail@plt+0xd4ec>
   20060:	mov	r8, r0
   20064:	ldr	r9, [r0]
   20068:	ldr	r5, [r6]
   2006c:	mov	r0, r5
   20070:	mov	r1, r7
   20074:	bl	2011c <__assert_fail@plt+0xd52c>
   20078:	mov	r1, r0
   2007c:	cmp	r5, #0
   20080:	beq	200b0 <__assert_fail@plt+0xd4c0>
   20084:	cmp	r1, r5
   20088:	beq	200c8 <__assert_fail@plt+0xd4d8>
   2008c:	str	r1, [r6]
   20090:	mov	r0, r4
   20094:	bl	2f894 <__assert_fail@plt+0x1cca4>
   20098:	mov	r4, r0
   2009c:	cmp	r0, #0
   200a0:	bne	200d0 <__assert_fail@plt+0xd4e0>
   200a4:	mov	r4, #0
   200a8:	mov	r0, r4
   200ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   200b0:	cmp	r4, #0
   200b4:	bne	200fc <__assert_fail@plt+0xd50c>
   200b8:	str	r1, [r6]
   200bc:	mov	r0, r1
   200c0:	bl	2ed88 <__assert_fail@plt+0x1c198>
   200c4:	mov	r4, r0
   200c8:	cmp	r4, #0
   200cc:	beq	200a4 <__assert_fail@plt+0xd4b4>
   200d0:	str	r9, [r8]
   200d4:	mov	r0, r4
   200d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   200dc:	movw	r0, #12376	; 0x3058
   200e0:	movt	r0, #4
   200e4:	movw	r1, #12388	; 0x3064
   200e8:	movt	r1, #4
   200ec:	movw	r3, #12400	; 0x3070
   200f0:	movt	r3, #4
   200f4:	mov	r2, #71	; 0x47
   200f8:	bl	12bf0 <__assert_fail@plt>
   200fc:	movw	r0, #12442	; 0x309a
   20100:	movt	r0, #4
   20104:	movw	r1, #12388	; 0x3064
   20108:	movt	r1, #4
   2010c:	movw	r3, #12400	; 0x3070
   20110:	movt	r3, #4
   20114:	mov	r2, #79	; 0x4f
   20118:	bl	12bf0 <__assert_fail@plt>
   2011c:	cmp	r0, #0
   20120:	movweq	r0, #16
   20124:	cmp	r0, r1
   20128:	bxcs	lr
   2012c:	lsl	r2, r0, #1
   20130:	cmp	r0, r0, lsl #1
   20134:	mov	r0, r2
   20138:	bls	20124 <__assert_fail@plt+0xd534>
   2013c:	mov	r0, r1
   20140:	bx	lr
   20144:	push	{r4, sl, fp, lr}
   20148:	add	fp, sp, #8
   2014c:	mov	r4, r0
   20150:	bl	20040 <__assert_fail@plt+0xd450>
   20154:	cmp	r0, #0
   20158:	popne	{r4, sl, fp, pc}
   2015c:	mov	r0, r4
   20160:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   20164:	bl	2b9c4 <__assert_fail@plt+0x18dd4>
   20168:	push	{fp, lr}
   2016c:	mov	fp, sp
   20170:	sub	sp, sp, #16
   20174:	bl	201c4 <__assert_fail@plt+0xd5d4>
   20178:	mov	r1, #0
   2017c:	str	r1, [sp, #12]
   20180:	str	r1, [sp, #4]
   20184:	str	r1, [sp, #8]
   20188:	cmn	r0, #-2147483647	; 0x80000001
   2018c:	addne	r0, r0, #1
   20190:	movw	r1, #788	; 0x314
   20194:	movt	r1, #2
   20198:	add	r2, sp, #4
   2019c:	bl	20224 <__assert_fail@plt+0xd634>
   201a0:	ldmib	sp, {r0, r1}
   201a4:	movw	r2, #23808	; 0x5d00
   201a8:	movt	r2, #5
   201ac:	str	r0, [r2]
   201b0:	movw	r0, #23812	; 0x5d04
   201b4:	movt	r0, #5
   201b8:	str	r1, [r0]
   201bc:	mov	sp, fp
   201c0:	pop	{fp, pc}
   201c4:	push	{r4, sl, fp, lr}
   201c8:	add	fp, sp, #8
   201cc:	sub	sp, sp, #16
   201d0:	bl	20590 <__assert_fail@plt+0xd9a0>
   201d4:	mov	r4, r0
   201d8:	cmn	r0, #1
   201dc:	bgt	20218 <__assert_fail@plt+0xd628>
   201e0:	mov	r0, #4
   201e4:	bl	1268c <sysconf@plt>
   201e8:	mov	r4, r0
   201ec:	mov	r1, sp
   201f0:	mov	r0, #7
   201f4:	bl	12698 <getrlimit64@plt>
   201f8:	cmn	r4, #1
   201fc:	movweq	r4, #20
   20200:	cmp	r0, #0
   20204:	bne	20218 <__assert_fail@plt+0xd628>
   20208:	ldm	sp, {r0, r1}
   2020c:	and	r1, r0, r1
   20210:	cmn	r1, #1
   20214:	movne	r4, r0
   20218:	mov	r0, r4
   2021c:	sub	sp, fp, #8
   20220:	pop	{r4, sl, fp, pc}
   20224:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20228:	add	fp, sp, #28
   2022c:	sub	sp, sp, #532	; 0x214
   20230:	str	r2, [sp, #12]
   20234:	str	r0, [sp, #8]
   20238:	cmp	r0, #1
   2023c:	blt	2030c <__assert_fail@plt+0xd71c>
   20240:	mov	r5, r1
   20244:	add	r0, sp, #16
   20248:	add	r1, r0, #6
   2024c:	str	r1, [sp]
   20250:	add	r0, r0, #4
   20254:	str	r0, [sp, #4]
   20258:	mov	r9, #0
   2025c:	mov	r8, #5
   20260:	b	20274 <__assert_fail@plt+0xd684>
   20264:	add	r9, r7, r9
   20268:	ldr	r0, [sp, #8]
   2026c:	cmp	r9, r0
   20270:	bge	2030c <__assert_fail@plt+0xd71c>
   20274:	ldr	r0, [sp, #8]
   20278:	sub	sl, r0, r9
   2027c:	cmp	sl, #64	; 0x40
   20280:	mov	r7, sl
   20284:	movge	r7, #64	; 0x40
   20288:	cmp	sl, #1
   2028c:	blt	202b0 <__assert_fail@plt+0xd6c0>
   20290:	mov	r0, #0
   20294:	ldr	r1, [sp, #4]
   20298:	add	r2, r9, r0
   2029c:	stmda	r1, {r2, r8}
   202a0:	add	r1, r1, #8
   202a4:	add	r0, r0, #1
   202a8:	cmp	r0, r7
   202ac:	blt	20298 <__assert_fail@plt+0xd6a8>
   202b0:	add	r0, sp, #16
   202b4:	mov	r1, r7
   202b8:	mov	r2, #0
   202bc:	bl	12710 <poll@plt>
   202c0:	cmn	r0, #1
   202c4:	beq	2030c <__assert_fail@plt+0xd71c>
   202c8:	cmp	sl, #1
   202cc:	blt	20264 <__assert_fail@plt+0xd674>
   202d0:	mov	r6, #0
   202d4:	ldr	r4, [sp]
   202d8:	b	202ec <__assert_fail@plt+0xd6fc>
   202dc:	add	r4, r4, #8
   202e0:	add	r6, r6, #1
   202e4:	cmp	r6, r7
   202e8:	bge	20264 <__assert_fail@plt+0xd674>
   202ec:	ldrh	r0, [r4]
   202f0:	cmp	r0, #32
   202f4:	beq	202dc <__assert_fail@plt+0xd6ec>
   202f8:	ldr	r0, [r4, #-6]
   202fc:	ldr	r1, [sp, #12]
   20300:	blx	r5
   20304:	cmp	r0, #0
   20308:	beq	202dc <__assert_fail@plt+0xd6ec>
   2030c:	sub	sp, fp, #28
   20310:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20314:	push	{r4, r5, r6, sl, fp, lr}
   20318:	add	fp, sp, #16
   2031c:	mov	r5, r1
   20320:	mov	r6, r0
   20324:	bl	206a8 <__assert_fail@plt+0xdab8>
   20328:	mov	r4, #0
   2032c:	cmp	r0, #0
   20330:	beq	2033c <__assert_fail@plt+0xd74c>
   20334:	mov	r0, r4
   20338:	pop	{r4, r5, r6, sl, fp, pc}
   2033c:	ldm	r5, {r0, r1}
   20340:	mov	r2, #4
   20344:	add	r1, r2, r1, lsl #2
   20348:	add	r2, r5, #8
   2034c:	bl	20040 <__assert_fail@plt+0xd450>
   20350:	cmp	r0, #0
   20354:	beq	20378 <__assert_fail@plt+0xd788>
   20358:	str	r0, [r5]
   2035c:	ldr	r1, [r5, #4]
   20360:	str	r6, [r0, r1, lsl #2]
   20364:	ldr	r0, [r5, #4]
   20368:	add	r0, r0, #1
   2036c:	str	r0, [r5, #4]
   20370:	mov	r0, r4
   20374:	pop	{r4, r5, r6, sl, fp, pc}
   20378:	mvn	r4, #0
   2037c:	mov	r0, r4
   20380:	pop	{r4, r5, r6, sl, fp, pc}
   20384:	sub	sp, sp, #8
   20388:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2038c:	add	fp, sp, #24
   20390:	sub	sp, sp, #8
   20394:	mov	r5, r1
   20398:	mov	r4, r0
   2039c:	str	r2, [fp, #8]
   203a0:	str	r3, [fp, #12]
   203a4:	mov	r6, #0
   203a8:	tst	r1, #64	; 0x40
   203ac:	ldrne	r6, [fp, #8]
   203b0:	movw	r7, #23817	; 0x5d09
   203b4:	movt	r7, #5
   203b8:	ldrb	r0, [r7]
   203bc:	cmp	r0, #0
   203c0:	movw	r8, #23816	; 0x5d08
   203c4:	movt	r8, #5
   203c8:	bne	203dc <__assert_fail@plt+0xd7ec>
   203cc:	bl	20424 <__assert_fail@plt+0xd834>
   203d0:	strb	r0, [r8]
   203d4:	mov	r0, #1
   203d8:	strb	r0, [r7]
   203dc:	orr	r1, r5, #524288	; 0x80000
   203e0:	mov	r0, r4
   203e4:	mov	r2, r6
   203e8:	bl	220c0 <__assert_fail@plt+0xf4d0>
   203ec:	mov	r4, r0
   203f0:	cmp	r0, #0
   203f4:	bmi	20410 <__assert_fail@plt+0xd820>
   203f8:	ldrb	r0, [r8]
   203fc:	cmp	r0, #0
   20400:	bne	20410 <__assert_fail@plt+0xd820>
   20404:	mov	r0, r4
   20408:	mov	r1, #1
   2040c:	bl	21d54 <__assert_fail@plt+0xf164>
   20410:	mov	r0, r4
   20414:	sub	sp, fp, #24
   20418:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2041c:	add	sp, sp, #8
   20420:	bx	lr
   20424:	push	{r4, r5, fp, lr}
   20428:	add	fp, sp, #8
   2042c:	movw	r0, #62826	; 0xf56a
   20430:	movt	r0, #3
   20434:	mov	r1, #524288	; 0x80000
   20438:	bl	220c0 <__assert_fail@plt+0xf4d0>
   2043c:	cmp	r0, #0
   20440:	bmi	20468 <__assert_fail@plt+0xd878>
   20444:	mov	r5, r0
   20448:	bl	206a8 <__assert_fail@plt+0xdab8>
   2044c:	mov	r4, r0
   20450:	mov	r0, r5
   20454:	bl	12ba8 <close@plt>
   20458:	cmp	r4, #0
   2045c:	movwne	r4, #1
   20460:	mov	r0, r4
   20464:	pop	{r4, r5, fp, pc}
   20468:	mov	r4, #0
   2046c:	mov	r0, r4
   20470:	pop	{r4, r5, fp, pc}
   20474:	push	{r4, sl, fp, lr}
   20478:	add	fp, sp, #8
   2047c:	movw	r4, #23808	; 0x5d00
   20480:	movt	r4, #5
   20484:	ldr	r0, [r4]
   20488:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2048c:	movw	r0, #23812	; 0x5d04
   20490:	movt	r0, #5
   20494:	mov	r1, #0
   20498:	str	r1, [r0]
   2049c:	str	r1, [r4]
   204a0:	pop	{r4, sl, fp, pc}
   204a4:	push	{fp, lr}
   204a8:	mov	fp, sp
   204ac:	movw	r0, #12459	; 0x30ab
   204b0:	movt	r0, #4
   204b4:	bl	127f4 <getenv@plt>
   204b8:	cmp	r0, #0
   204bc:	movwne	r0, #1
   204c0:	pop	{fp, pc}
   204c4:	push	{r4, sl, fp, lr}
   204c8:	add	fp, sp, #8
   204cc:	movw	r0, #23812	; 0x5d04
   204d0:	movt	r0, #5
   204d4:	ldr	r1, [r0]
   204d8:	movw	r0, #23808	; 0x5d00
   204dc:	movt	r0, #5
   204e0:	ldr	r0, [r0]
   204e4:	bl	2053c <__assert_fail@plt+0xd94c>
   204e8:	cmp	r0, #0
   204ec:	popmi	{r4, sl, fp, pc}
   204f0:	mov	r4, r0
   204f4:	movw	r1, #12487	; 0x30c7
   204f8:	movt	r1, #4
   204fc:	mov	r0, #0
   20500:	mov	r2, #5
   20504:	bl	12674 <dcgettext@plt>
   20508:	mov	r2, r0
   2050c:	mov	r0, #0
   20510:	mov	r1, #0
   20514:	mov	r3, r4
   20518:	bl	127b8 <error@plt>
   2051c:	movw	r0, #12639	; 0x315f
   20520:	movt	r0, #4
   20524:	movw	r1, #12648	; 0x3168
   20528:	movt	r1, #4
   2052c:	movw	r3, #12657	; 0x3171
   20530:	movt	r3, #4
   20534:	mov	r2, #396	; 0x18c
   20538:	bl	12bf0 <__assert_fail@plt>
   2053c:	push	{r4, r5, fp, lr}
   20540:	add	fp, sp, #8
   20544:	sub	sp, sp, #16
   20548:	mov	r4, r1
   2054c:	mov	r5, r0
   20550:	bl	201c4 <__assert_fail@plt+0xd5d4>
   20554:	mvn	r1, #0
   20558:	str	r1, [sp, #12]
   2055c:	mov	r1, #0
   20560:	str	r1, [sp, #8]
   20564:	str	r4, [sp, #4]
   20568:	str	r5, [sp]
   2056c:	cmn	r0, #-2147483647	; 0x80000001
   20570:	addne	r0, r0, #1
   20574:	movw	r1, #1728	; 0x6c0
   20578:	movt	r1, #2
   2057c:	mov	r2, sp
   20580:	bl	20224 <__assert_fail@plt+0xd634>
   20584:	ldr	r0, [sp, #12]
   20588:	sub	sp, fp, #8
   2058c:	pop	{r4, r5, fp, pc}
   20590:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   20594:	add	fp, sp, #24
   20598:	movw	r0, #12693	; 0x3195
   2059c:	movt	r0, #4
   205a0:	bl	21ec8 <__assert_fail@plt+0xf2d8>
   205a4:	cmp	r0, #0
   205a8:	beq	20684 <__assert_fail@plt+0xda94>
   205ac:	mov	r4, r0
   205b0:	bl	12908 <__errno_location@plt>
   205b4:	mov	r6, r0
   205b8:	mov	r7, #0
   205bc:	str	r7, [r0]
   205c0:	mov	r0, r4
   205c4:	bl	12aa0 <readdir64@plt>
   205c8:	cmp	r0, #0
   205cc:	beq	20640 <__assert_fail@plt+0xda50>
   205d0:	mov	r8, #0
   205d4:	mvn	r5, #0
   205d8:	mov	r7, #0
   205dc:	b	2060c <__assert_fail@plt+0xda1c>
   205e0:	mov	r0, r1
   205e4:	mov	r1, #0
   205e8:	bl	217bc <__assert_fail@plt+0xebcc>
   205ec:	cmp	r0, r5
   205f0:	movgt	r5, r0
   205f4:	mov	r7, #1
   205f8:	str	r8, [r6]
   205fc:	mov	r0, r4
   20600:	bl	12aa0 <readdir64@plt>
   20604:	cmp	r0, #0
   20608:	beq	20644 <__assert_fail@plt+0xda54>
   2060c:	mov	r1, r0
   20610:	ldrb	r2, [r1, #19]!
   20614:	cmp	r2, #46	; 0x2e
   20618:	bne	205e0 <__assert_fail@plt+0xd9f0>
   2061c:	ldrb	r2, [r0, #20]
   20620:	cmp	r2, #0
   20624:	beq	205f8 <__assert_fail@plt+0xda08>
   20628:	cmp	r2, #46	; 0x2e
   2062c:	bne	205e0 <__assert_fail@plt+0xd9f0>
   20630:	ldrb	r0, [r0, #21]
   20634:	cmp	r0, #0
   20638:	bne	205e0 <__assert_fail@plt+0xd9f0>
   2063c:	b	205f8 <__assert_fail@plt+0xda08>
   20640:	mvn	r5, #0
   20644:	ldr	r6, [r6]
   20648:	cmp	r6, #0
   2064c:	beq	20690 <__assert_fail@plt+0xdaa0>
   20650:	movw	r2, #12693	; 0x3195
   20654:	movt	r2, #4
   20658:	mov	r0, #0
   2065c:	mov	r1, #8
   20660:	bl	2a088 <__assert_fail@plt+0x17498>
   20664:	mov	r3, r0
   20668:	movw	r2, #19695	; 0x4cef
   2066c:	movt	r2, #4
   20670:	mov	r0, #0
   20674:	mov	r1, r6
   20678:	bl	127b8 <error@plt>
   2067c:	mov	r0, r4
   20680:	bl	12bc0 <closedir@plt>
   20684:	mvn	r5, #0
   20688:	mov	r0, r5
   2068c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20690:	mov	r0, r4
   20694:	bl	12bc0 <closedir@plt>
   20698:	cmp	r7, #0
   2069c:	mvneq	r5, #0
   206a0:	mov	r0, r5
   206a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   206a8:	push	{fp, lr}
   206ac:	mov	fp, sp
   206b0:	mov	r1, #1
   206b4:	bl	2c888 <__assert_fail@plt+0x19c98>
   206b8:	and	r0, r0, #1
   206bc:	pop	{fp, pc}
   206c0:	push	{r4, r5, fp, lr}
   206c4:	add	fp, sp, #8
   206c8:	mov	r4, r1
   206cc:	mov	r5, r0
   206d0:	bl	206a8 <__assert_fail@plt+0xdab8>
   206d4:	mov	r1, r0
   206d8:	mov	r0, #0
   206dc:	cmp	r1, #0
   206e0:	beq	206e8 <__assert_fail@plt+0xdaf8>
   206e4:	pop	{r4, r5, fp, pc}
   206e8:	ldr	r2, [r4, #4]
   206ec:	ldr	r1, [r4, #8]
   206f0:	cmp	r1, r2
   206f4:	bcs	20724 <__assert_fail@plt+0xdb34>
   206f8:	ldr	r2, [r4]
   206fc:	ldr	r3, [r2, r1, lsl #2]
   20700:	cmp	r3, r5
   20704:	bge	20720 <__assert_fail@plt+0xdb30>
   20708:	add	r1, r1, #1
   2070c:	str	r1, [r4, #8]
   20710:	ldr	r3, [r4, #4]
   20714:	cmp	r1, r3
   20718:	bcc	206fc <__assert_fail@plt+0xdb0c>
   2071c:	b	20724 <__assert_fail@plt+0xdb34>
   20720:	popeq	{r4, r5, fp, pc}
   20724:	str	r5, [r4, #12]
   20728:	mvn	r0, #0
   2072c:	pop	{r4, r5, fp, pc}
   20730:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   20734:	add	fp, sp, #24
   20738:	sub	sp, sp, #16
   2073c:	mov	r8, r0
   20740:	movw	r0, #21864	; 0x5568
   20744:	movt	r0, #5
   20748:	ldr	r0, [r0]
   2074c:	bl	2ca6c <__assert_fail@plt+0x19e7c>
   20750:	movw	r0, #21876	; 0x5574
   20754:	movt	r0, #5
   20758:	ldr	r6, [r0]
   2075c:	movw	r0, #21732	; 0x54e4
   20760:	movt	r0, #5
   20764:	ldr	r5, [r0]
   20768:	mov	r9, #0
   2076c:	movw	r1, #12735	; 0x31bf
   20770:	movt	r1, #4
   20774:	mov	r0, #0
   20778:	mov	r2, #5
   2077c:	bl	12674 <dcgettext@plt>
   20780:	mov	r7, r0
   20784:	movw	r1, #12750	; 0x31ce
   20788:	movt	r1, #4
   2078c:	mov	r0, #0
   20790:	mov	r2, #5
   20794:	bl	12674 <dcgettext@plt>
   20798:	mov	r4, r0
   2079c:	movw	r1, #12765	; 0x31dd
   207a0:	movt	r1, #4
   207a4:	mov	r0, #0
   207a8:	mov	r2, #5
   207ac:	bl	12674 <dcgettext@plt>
   207b0:	str	r7, [sp]
   207b4:	str	r4, [sp, #4]
   207b8:	str	r0, [sp, #8]
   207bc:	str	r9, [sp, #12]
   207c0:	movw	r2, #12721	; 0x31b1
   207c4:	movt	r2, #4
   207c8:	mov	r0, r6
   207cc:	mov	r1, r8
   207d0:	mov	r3, r5
   207d4:	bl	2b550 <__assert_fail@plt+0x18960>
   207d8:	sub	sp, fp, #24
   207dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   207e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   207e4:	add	fp, sp, #28
   207e8:	sub	sp, sp, #940	; 0x3ac
   207ec:	mov	r5, r3
   207f0:	mov	r6, r2
   207f4:	mov	r7, r1
   207f8:	str	r0, [fp, #-960]	; 0xfffffc40
   207fc:	ldr	r0, [r3, #16]
   20800:	sub	r1, fp, #44	; 0x2c
   20804:	bl	220fc <__assert_fail@plt+0xf50c>
   20808:	movw	sl, #21736	; 0x54e8
   2080c:	movt	sl, #5
   20810:	ldr	r4, [sl]
   20814:	ldrd	r0, [r5, #96]	; 0x60
   20818:	sub	sp, sp, #16
   2081c:	mov	r2, #0
   20820:	mov	r3, #1
   20824:	str	r3, [sp]
   20828:	stmib	sp, {r2, r3}
   2082c:	str	r2, [sp, #12]
   20830:	sub	r2, fp, #696	; 0x2b8
   20834:	mov	r3, #0
   20838:	bl	23240 <__assert_fail@plt+0x10650>
   2083c:	add	sp, sp, #16
   20840:	mov	r3, r0
   20844:	ldr	r9, [fp, #20]
   20848:	movw	r1, #12778	; 0x31ea
   2084c:	movt	r1, #4
   20850:	mov	r0, r9
   20854:	mov	r2, r4
   20858:	bl	128fc <fprintf@plt>
   2085c:	cmp	r0, #0
   20860:	bmi	20efc <__assert_fail@plt+0xe30c>
   20864:	str	r7, [fp, #-968]	; 0xfffffc38
   20868:	str	r6, [fp, #-964]	; 0xfffffc3c
   2086c:	str	r5, [fp, #-956]	; 0xfffffc44
   20870:	add	r6, r5, #64	; 0x40
   20874:	ldr	r8, [fp, #12]
   20878:	ldr	r1, [sl]
   2087c:	cmp	r0, r1
   20880:	strgt	r0, [sl]
   20884:	mov	r0, #32
   20888:	mov	r1, r9
   2088c:	bl	12ac4 <putc@plt>
   20890:	mov	r5, r0
   20894:	movw	r7, #21740	; 0x54ec
   20898:	movt	r7, #5
   2089c:	ldr	r4, [r7]
   208a0:	ldrd	r0, [r6]
   208a4:	sub	sp, sp, #16
   208a8:	asr	r2, r8, #31
   208ac:	mov	sl, #0
   208b0:	mov	r3, #512	; 0x200
   208b4:	stm	sp, {r3, sl}
   208b8:	str	r8, [sp, #8]
   208bc:	str	r2, [sp, #12]
   208c0:	sub	r2, fp, #696	; 0x2b8
   208c4:	mov	r3, #0
   208c8:	bl	23240 <__assert_fail@plt+0x10650>
   208cc:	add	sp, sp, #16
   208d0:	mov	r3, r0
   208d4:	movw	r1, #12778	; 0x31ea
   208d8:	movt	r1, #4
   208dc:	mov	r0, r9
   208e0:	mov	r2, r4
   208e4:	bl	128fc <fprintf@plt>
   208e8:	cmn	r5, #1
   208ec:	movweq	sl, #150	; 0x96
   208f0:	cmp	r0, #0
   208f4:	bmi	20f04 <__assert_fail@plt+0xe314>
   208f8:	ldr	r1, [r7]
   208fc:	cmp	r0, r1
   20900:	ldr	r6, [fp, #-956]	; 0xfffffc44
   20904:	ble	2091c <__assert_fail@plt+0xdd2c>
   20908:	str	r0, [r7]
   2090c:	cmn	r5, #1
   20910:	bne	20924 <__assert_fail@plt+0xdd34>
   20914:	mov	r7, #150	; 0x96
   20918:	b	20e38 <__assert_fail@plt+0xe248>
   2091c:	cmn	r5, #1
   20920:	beq	20914 <__assert_fail@plt+0xdd24>
   20924:	mov	r0, #32
   20928:	mov	r1, r9
   2092c:	bl	12ac4 <putc@plt>
   20930:	cmn	r0, #1
   20934:	beq	20f0c <__assert_fail@plt+0xe31c>
   20938:	mov	r4, r0
   2093c:	sub	r0, fp, #44	; 0x2c
   20940:	mov	r1, r9
   20944:	bl	12b84 <fputs@plt>
   20948:	cmp	r0, #0
   2094c:	movwmi	sl, #275	; 0x113
   20950:	cmn	r4, #1
   20954:	beq	20ef4 <__assert_fail@plt+0xe304>
   20958:	cmp	r0, #0
   2095c:	bmi	20ef4 <__assert_fail@plt+0xe304>
   20960:	ldr	r3, [r6, #20]
   20964:	movw	r4, #21744	; 0x54f0
   20968:	movt	r4, #5
   2096c:	ldr	r2, [r4]
   20970:	movw	r1, #12782	; 0x31ee
   20974:	movt	r1, #4
   20978:	mov	r0, r9
   2097c:	bl	128fc <fprintf@plt>
   20980:	cmp	r0, #0
   20984:	bmi	20f14 <__assert_fail@plt+0xe324>
   20988:	ldr	r1, [r4]
   2098c:	cmp	r0, r1
   20990:	strgt	r0, [r4]
   20994:	mov	r0, #32
   20998:	mov	r1, r9
   2099c:	bl	12ac4 <putc@plt>
   209a0:	cmn	r0, #1
   209a4:	movweq	sl, #250	; 0xfa
   209a8:	ldr	r0, [r6, #24]
   209ac:	bl	23d48 <__assert_fail@plt+0x11158>
   209b0:	cmp	r0, #0
   209b4:	movw	r5, #21748	; 0x54f4
   209b8:	movt	r5, #5
   209bc:	beq	20a00 <__assert_fail@plt+0xde10>
   209c0:	mov	r4, r0
   209c4:	mov	r1, #0
   209c8:	bl	24ac4 <__assert_fail@plt+0x11ed4>
   209cc:	ldr	r1, [r5]
   209d0:	cmp	r0, r1
   209d4:	strgt	r0, [r5]
   209d8:	ldr	r2, [r5]
   209dc:	movw	r1, #12787	; 0x31f3
   209e0:	movt	r1, #4
   209e4:	mov	r0, r9
   209e8:	mov	r3, r4
   209ec:	bl	128fc <fprintf@plt>
   209f0:	cmn	r0, #1
   209f4:	bgt	20a28 <__assert_fail@plt+0xde38>
   209f8:	mov	r7, #400	; 0x190
   209fc:	b	20e38 <__assert_fail@plt+0xe248>
   20a00:	ldr	r2, [r6, #24]
   20a04:	movw	r1, #12793	; 0x31f9
   20a08:	movt	r1, #4
   20a0c:	mov	r0, r9
   20a10:	bl	128fc <fprintf@plt>
   20a14:	ldr	r1, [r5]
   20a18:	cmp	r0, r1
   20a1c:	strgt	r0, [r5]
   20a20:	cmp	r0, #1
   20a24:	blt	20f34 <__assert_fail@plt+0xe344>
   20a28:	ldr	r0, [r6, #28]
   20a2c:	bl	23ef8 <__assert_fail@plt+0x11308>
   20a30:	cmp	r0, #0
   20a34:	beq	20a80 <__assert_fail@plt+0xde90>
   20a38:	mov	r4, r0
   20a3c:	mov	r1, #0
   20a40:	bl	24ac4 <__assert_fail@plt+0x11ed4>
   20a44:	movw	r1, #21752	; 0x54f8
   20a48:	movt	r1, #5
   20a4c:	ldr	r2, [r1]
   20a50:	cmp	r0, r2
   20a54:	strgt	r0, [r1]
   20a58:	ldr	r2, [r1]
   20a5c:	movw	r1, #12787	; 0x31f3
   20a60:	movt	r1, #4
   20a64:	mov	r0, r9
   20a68:	mov	r3, r4
   20a6c:	bl	128fc <fprintf@plt>
   20a70:	cmn	r0, #1
   20a74:	bgt	20ac8 <__assert_fail@plt+0xded8>
   20a78:	mov	r7, #500	; 0x1f4
   20a7c:	b	20e38 <__assert_fail@plt+0xe248>
   20a80:	ldr	r3, [r6, #28]
   20a84:	movw	r4, #21752	; 0x54f8
   20a88:	movt	r4, #5
   20a8c:	ldr	r2, [r4]
   20a90:	movw	r1, #12800	; 0x3200
   20a94:	movt	r1, #4
   20a98:	mov	r0, r9
   20a9c:	bl	128fc <fprintf@plt>
   20aa0:	ldr	r1, [r4]
   20aa4:	cmp	r0, r1
   20aa8:	strgt	r0, [r4]
   20aac:	cmp	r0, #0
   20ab0:	bmi	20f3c <__assert_fail@plt+0xe34c>
   20ab4:	mov	r0, #32
   20ab8:	mov	r1, r9
   20abc:	bl	12ac4 <putc@plt>
   20ac0:	cmn	r0, #1
   20ac4:	beq	20f44 <__assert_fail@plt+0xe354>
   20ac8:	ldr	r0, [r6, #16]
   20acc:	and	r0, r0, #45056	; 0xb000
   20ad0:	orr	r0, r0, #16384	; 0x4000
   20ad4:	cmp	r0, #24576	; 0x6000
   20ad8:	bne	20b58 <__assert_fail@plt+0xdf68>
   20adc:	add	r5, r6, #32
   20ae0:	ldrd	r0, [r5]
   20ae4:	bl	124a0 <gnu_dev_major@plt>
   20ae8:	mov	r1, r0
   20aec:	movw	r2, #21756	; 0x54fc
   20af0:	movt	r2, #5
   20af4:	mov	r0, r9
   20af8:	bl	20f6c <__assert_fail@plt+0xe37c>
   20afc:	cmp	r0, #0
   20b00:	beq	20f24 <__assert_fail@plt+0xe334>
   20b04:	movw	r1, #3026	; 0xbd2
   20b08:	movt	r1, #4
   20b0c:	mov	r0, r9
   20b10:	bl	128fc <fprintf@plt>
   20b14:	cmp	r0, #0
   20b18:	bmi	20f2c <__assert_fail@plt+0xe33c>
   20b1c:	mov	r4, r0
   20b20:	ldrd	r0, [r5]
   20b24:	bl	12530 <gnu_dev_minor@plt>
   20b28:	mov	r1, r0
   20b2c:	movw	r2, #21760	; 0x5500
   20b30:	movt	r2, #5
   20b34:	mov	r0, r9
   20b38:	bl	20f6c <__assert_fail@plt+0xe37c>
   20b3c:	cmp	r0, #0
   20b40:	movweq	sl, #650	; 0x28a
   20b44:	beq	20ef4 <__assert_fail@plt+0xe304>
   20b48:	cmp	r4, #0
   20b4c:	mov	r7, sl
   20b50:	bpl	20bcc <__assert_fail@plt+0xdfdc>
   20b54:	b	20e38 <__assert_fail@plt+0xe248>
   20b58:	add	r0, r6, #48	; 0x30
   20b5c:	mov	r1, #1
   20b60:	cmp	r8, #0
   20b64:	movpl	r8, r1
   20b68:	asr	r2, r8, #31
   20b6c:	movw	r5, #21764	; 0x5504
   20b70:	movt	r5, #5
   20b74:	ldr	r4, [r5]
   20b78:	ldm	r0, {r0, r3}
   20b7c:	sub	sp, sp, #16
   20b80:	mov	r7, #0
   20b84:	stm	sp, {r1, r7, r8}
   20b88:	str	r2, [sp, #12]
   20b8c:	sub	r2, fp, #696	; 0x2b8
   20b90:	mov	r1, r3
   20b94:	mov	r3, #0
   20b98:	bl	23240 <__assert_fail@plt+0x10650>
   20b9c:	add	sp, sp, #16
   20ba0:	mov	r3, r0
   20ba4:	movw	r1, #12778	; 0x31ea
   20ba8:	movt	r1, #4
   20bac:	mov	r0, r9
   20bb0:	mov	r2, r4
   20bb4:	bl	128fc <fprintf@plt>
   20bb8:	cmp	r0, #0
   20bbc:	bmi	20f4c <__assert_fail@plt+0xe35c>
   20bc0:	ldr	r1, [r5]
   20bc4:	cmp	r0, r1
   20bc8:	strgt	r0, [r5]
   20bcc:	mov	r0, #32
   20bd0:	mov	r1, r9
   20bd4:	bl	12ac4 <putc@plt>
   20bd8:	mvn	r1, #0
   20bdc:	subs	r9, r0, r1
   20be0:	movwne	r9, #1
   20be4:	cmn	r0, #1
   20be8:	movweq	sl, #850	; 0x352
   20bec:	beq	20f1c <__assert_fail@plt+0xe32c>
   20bf0:	add	r4, r6, #80	; 0x50
   20bf4:	mov	r0, r4
   20bf8:	bl	12848 <localtime@plt>
   20bfc:	cmp	r0, #0
   20c00:	beq	20c2c <__assert_fail@plt+0xe03c>
   20c04:	mov	r7, r0
   20c08:	ldr	r0, [fp, #8]
   20c0c:	sub	r1, r0, #19968	; 0x4e00
   20c10:	sub	r2, r1, #15532032	; 0xed0000
   20c14:	ldr	r1, [r4]
   20c18:	cmp	r2, r1
   20c1c:	ble	20ca4 <__assert_fail@plt+0xe0b4>
   20c20:	movw	r5, #12818	; 0x3212
   20c24:	movt	r5, #4
   20c28:	b	20cc0 <__assert_fail@plt+0xe0d0>
   20c2c:	ldr	r0, [r4]
   20c30:	sub	sp, sp, #16
   20c34:	cmn	r0, #1
   20c38:	ble	20e68 <__assert_fail@plt+0xe278>
   20c3c:	mov	r4, #0
   20c40:	mov	r1, #1
   20c44:	stm	sp, {r1, r4}
   20c48:	str	r1, [sp, #8]
   20c4c:	str	r4, [sp, #12]
   20c50:	asr	r1, r0, #31
   20c54:	sub	r2, fp, #696	; 0x2b8
   20c58:	mov	r3, #0
   20c5c:	bl	23240 <__assert_fail@plt+0x10650>
   20c60:	add	sp, sp, #16
   20c64:	mov	r3, r0
   20c68:	movw	r1, #12835	; 0x3223
   20c6c:	movt	r1, #4
   20c70:	ldr	r5, [fp, #20]
   20c74:	mov	r0, r5
   20c78:	mov	r2, #12
   20c7c:	bl	128fc <fprintf@plt>
   20c80:	cmp	r0, #0
   20c84:	movwmi	sl, #1100	; 0x44c
   20c88:	cmn	r0, #1
   20c8c:	movwgt	r4, #1
   20c90:	and	r0, r9, r4
   20c94:	cmp	r0, #1
   20c98:	mov	r7, sl
   20c9c:	beq	20d54 <__assert_fail@plt+0xe164>
   20ca0:	b	20e38 <__assert_fail@plt+0xe248>
   20ca4:	add	r0, r0, #3600	; 0xe10
   20ca8:	movw	r2, #12818	; 0x3212
   20cac:	movt	r2, #4
   20cb0:	movw	r5, #12806	; 0x3206
   20cb4:	movt	r5, #4
   20cb8:	cmp	r1, r0
   20cbc:	movgt	r5, r2
   20cc0:	sub	r4, fp, #952	; 0x3b8
   20cc4:	mov	r8, #256	; 0x100
   20cc8:	mov	r0, r4
   20ccc:	mov	r1, #256	; 0x100
   20cd0:	mov	r2, r5
   20cd4:	mov	r3, r7
   20cd8:	bl	12830 <strftime@plt>
   20cdc:	cmp	r0, #0
   20ce0:	bne	20d18 <__assert_fail@plt+0xe128>
   20ce4:	mov	r6, #7
   20ce8:	add	r0, r6, r8, lsl #1
   20cec:	bic	r0, r0, #7
   20cf0:	sub	r4, sp, r0
   20cf4:	mov	sp, r4
   20cf8:	lsl	r8, r8, #1
   20cfc:	mov	r0, r4
   20d00:	mov	r1, r8
   20d04:	mov	r2, r5
   20d08:	mov	r3, r7
   20d0c:	bl	12830 <strftime@plt>
   20d10:	cmp	r0, #0
   20d14:	beq	20ce8 <__assert_fail@plt+0xe0f8>
   20d18:	movw	r1, #12831	; 0x321f
   20d1c:	movt	r1, #4
   20d20:	ldr	r5, [fp, #20]
   20d24:	mov	r0, r5
   20d28:	mov	r2, r4
   20d2c:	bl	128fc <fprintf@plt>
   20d30:	cmp	r0, #0
   20d34:	movwmi	sl, #900	; 0x384
   20d38:	mov	r1, #0
   20d3c:	cmn	r0, #1
   20d40:	movwgt	r1, #1
   20d44:	tst	r9, r1
   20d48:	mov	r7, sl
   20d4c:	ldr	r6, [fp, #-956]	; 0xfffffc44
   20d50:	beq	20e38 <__assert_fail@plt+0xe248>
   20d54:	ldr	r8, [fp, #16]
   20d58:	ldr	r0, [fp, #-960]	; 0xfffffc40
   20d5c:	mov	r1, r5
   20d60:	mov	r2, r8
   20d64:	bl	20fb4 <__assert_fail@plt+0xe3c4>
   20d68:	mov	r7, #1200	; 0x4b0
   20d6c:	cmp	r0, #0
   20d70:	moveq	sl, r7
   20d74:	beq	20e38 <__assert_fail@plt+0xe248>
   20d78:	mov	r4, r0
   20d7c:	ldr	r0, [r6, #16]
   20d80:	and	r0, r0, #61440	; 0xf000
   20d84:	cmp	r0, #40960	; 0xa000
   20d88:	bne	20e1c <__assert_fail@plt+0xe22c>
   20d8c:	ldr	r0, [fp, #-968]	; 0xfffffc38
   20d90:	ldr	r1, [fp, #-964]	; 0xfffffc3c
   20d94:	bl	219d4 <__assert_fail@plt+0xede4>
   20d98:	mov	r6, r0
   20d9c:	cmp	r0, #0
   20da0:	beq	20df8 <__assert_fail@plt+0xe208>
   20da4:	movw	r0, #12840	; 0x3228
   20da8:	movt	r0, #4
   20dac:	mov	r1, r5
   20db0:	bl	12b84 <fputs@plt>
   20db4:	mov	r7, r0
   20db8:	mov	r0, #0
   20dbc:	cmn	r7, #1
   20dc0:	movwgt	r0, #1
   20dc4:	tst	r4, r0
   20dc8:	beq	20f54 <__assert_fail@plt+0xe364>
   20dcc:	mov	r0, r6
   20dd0:	mov	r1, r5
   20dd4:	mov	r2, r8
   20dd8:	bl	20fb4 <__assert_fail@plt+0xe3c4>
   20ddc:	mov	r4, r0
   20de0:	mov	r0, r6
   20de4:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   20de8:	cmp	r4, #0
   20dec:	bne	20e1c <__assert_fail@plt+0xe22c>
   20df0:	movw	r7, #1350	; 0x546
   20df4:	b	20e38 <__assert_fail@plt+0xe248>
   20df8:	bl	12908 <__errno_location@plt>
   20dfc:	ldr	r1, [r0]
   20e00:	movw	r2, #19695	; 0x4cef
   20e04:	movt	r2, #4
   20e08:	mov	r0, #0
   20e0c:	ldr	r3, [fp, #-960]	; 0xfffffc40
   20e10:	bl	127b8 <error@plt>
   20e14:	mov	r0, r6
   20e18:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   20e1c:	mov	r0, #10
   20e20:	mov	r1, r5
   20e24:	bl	12ac4 <putc@plt>
   20e28:	cmn	r0, #1
   20e2c:	subne	sp, fp, #28
   20e30:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e34:	movw	r7, #1400	; 0x578
   20e38:	bl	12908 <__errno_location@plt>
   20e3c:	ldr	r4, [r0]
   20e40:	movw	r1, #12845	; 0x322d
   20e44:	movt	r1, #4
   20e48:	mov	r0, #0
   20e4c:	mov	r2, #5
   20e50:	bl	12674 <dcgettext@plt>
   20e54:	mov	r2, r0
   20e58:	mov	r0, #1
   20e5c:	mov	r1, r4
   20e60:	mov	r3, r7
   20e64:	bl	127b8 <error@plt>
   20e68:	mov	r5, #0
   20e6c:	mov	r1, #1
   20e70:	stm	sp, {r1, r5}
   20e74:	str	r1, [sp, #8]
   20e78:	str	r5, [sp, #12]
   20e7c:	rsbs	r3, r0, #0
   20e80:	sbc	r1, r5, r0, asr #31
   20e84:	sub	r2, fp, #696	; 0x2b8
   20e88:	mov	r0, r3
   20e8c:	mov	r3, #0
   20e90:	bl	23240 <__assert_fail@plt+0x10650>
   20e94:	add	sp, sp, #16
   20e98:	mov	r4, r0
   20e9c:	bl	128c0 <strlen@plt>
   20ea0:	sub	sp, sp, #8
   20ea4:	str	r4, [sp]
   20ea8:	rsb	r0, r0, #12
   20eac:	bic	r2, r0, r0, asr #31
   20eb0:	movw	r1, #12828	; 0x321c
   20eb4:	movt	r1, #4
   20eb8:	movw	r3, #2770	; 0xad2
   20ebc:	movt	r3, #4
   20ec0:	ldr	r4, [fp, #20]
   20ec4:	mov	r0, r4
   20ec8:	bl	128fc <fprintf@plt>
   20ecc:	add	sp, sp, #8
   20ed0:	cmp	r0, #0
   20ed4:	movwmi	sl, #1000	; 0x3e8
   20ed8:	cmn	r0, #1
   20edc:	movwgt	r5, #1
   20ee0:	tst	r9, r5
   20ee4:	mov	r5, r4
   20ee8:	mov	r7, sl
   20eec:	bne	20d54 <__assert_fail@plt+0xe164>
   20ef0:	b	20e38 <__assert_fail@plt+0xe248>
   20ef4:	mov	r7, sl
   20ef8:	b	20e38 <__assert_fail@plt+0xe248>
   20efc:	mov	r7, #100	; 0x64
   20f00:	b	20e38 <__assert_fail@plt+0xe248>
   20f04:	mov	r7, #200	; 0xc8
   20f08:	b	20e38 <__assert_fail@plt+0xe248>
   20f0c:	mov	r7, #250	; 0xfa
   20f10:	b	20e38 <__assert_fail@plt+0xe248>
   20f14:	mov	r7, #300	; 0x12c
   20f18:	b	20e38 <__assert_fail@plt+0xe248>
   20f1c:	movw	r7, #850	; 0x352
   20f20:	b	20e38 <__assert_fail@plt+0xe248>
   20f24:	mov	r7, #600	; 0x258
   20f28:	b	20e38 <__assert_fail@plt+0xe248>
   20f2c:	movw	r7, #625	; 0x271
   20f30:	b	20e38 <__assert_fail@plt+0xe248>
   20f34:	movw	r7, #450	; 0x1c2
   20f38:	b	20e38 <__assert_fail@plt+0xe248>
   20f3c:	movw	r7, #550	; 0x226
   20f40:	b	20e38 <__assert_fail@plt+0xe248>
   20f44:	movw	r7, #525	; 0x20d
   20f48:	b	20e38 <__assert_fail@plt+0xe248>
   20f4c:	mov	r7, #800	; 0x320
   20f50:	b	20e38 <__assert_fail@plt+0xe248>
   20f54:	mov	r0, r6
   20f58:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   20f5c:	cmp	r7, #0
   20f60:	movwmi	sl, #1300	; 0x514
   20f64:	mov	r7, sl
   20f68:	b	20e38 <__assert_fail@plt+0xe248>
   20f6c:	push	{r4, sl, fp, lr}
   20f70:	add	fp, sp, #8
   20f74:	mov	r4, r2
   20f78:	mov	r3, r1
   20f7c:	ldr	r2, [r2]
   20f80:	movw	r1, #12782	; 0x31ee
   20f84:	movt	r1, #4
   20f88:	bl	128fc <fprintf@plt>
   20f8c:	cmp	r0, #0
   20f90:	bmi	20fac <__assert_fail@plt+0xe3bc>
   20f94:	mov	r1, r0
   20f98:	ldr	r2, [r4]
   20f9c:	mov	r0, #1
   20fa0:	cmp	r2, r1
   20fa4:	strlt	r1, [r4]
   20fa8:	pop	{r4, sl, fp, pc}
   20fac:	mov	r0, #0
   20fb0:	pop	{r4, sl, fp, pc}
   20fb4:	cmp	r2, #0
   20fb8:	beq	20fc0 <__assert_fail@plt+0xe3d0>
   20fbc:	b	20fc4 <__assert_fail@plt+0xe3d4>
   20fc0:	b	20ff0 <__assert_fail@plt+0xe400>
   20fc4:	push	{fp, lr}
   20fc8:	mov	fp, sp
   20fcc:	mov	r3, r1
   20fd0:	mov	r2, r0
   20fd4:	movw	r1, #19695	; 0x4cef
   20fd8:	movt	r1, #4
   20fdc:	mov	r0, r3
   20fe0:	bl	128fc <fprintf@plt>
   20fe4:	mvn	r0, r0
   20fe8:	lsr	r0, r0, #31
   20fec:	pop	{fp, pc}
   20ff0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ff4:	add	fp, sp, #28
   20ff8:	sub	sp, sp, #4
   20ffc:	mov	r4, r1
   21000:	mov	r5, r0
   21004:	movw	r7, #12885	; 0x3255
   21008:	movt	r7, #4
   2100c:	movw	r8, #12897	; 0x3261
   21010:	movt	r8, #4
   21014:	movw	r9, #12891	; 0x325b
   21018:	movt	r9, #4
   2101c:	movw	sl, #12900	; 0x3264
   21020:	movt	sl, #4
   21024:	movw	r6, #12903	; 0x3267
   21028:	movt	r6, #4
   2102c:	b	21044 <__assert_fail@plt+0xe454>
   21030:	mov	r0, r4
   21034:	mov	r1, r6
   21038:	bl	128fc <fprintf@plt>
   2103c:	cmn	r0, #1
   21040:	ble	211e4 <__assert_fail@plt+0xe5f4>
   21044:	ldrb	r2, [r5], #1
   21048:	cmp	r2, #34	; 0x22
   2104c:	bhi	21104 <__assert_fail@plt+0xe514>
   21050:	mov	r0, #1
   21054:	add	r1, pc, #0
   21058:	ldr	pc, [r1, r2, lsl #2]
   2105c:	andeq	r1, r2, r8, ror #3
   21060:	andeq	r1, r2, r8, lsr #2
   21064:	andeq	r1, r2, r8, lsr #2
   21068:	andeq	r1, r2, r8, lsr #2
   2106c:	andeq	r1, r2, r8, lsr #2
   21070:	andeq	r1, r2, r8, lsr #2
   21074:	andeq	r1, r2, r8, lsr #2
   21078:	andeq	r1, r2, r8, lsr #2
   2107c:	andeq	r1, r2, r8, ror #1
   21080:	andeq	r1, r2, r0, asr r1
   21084:	andeq	r1, r2, ip, ror #2
   21088:	andeq	r1, r2, r8, lsr #2
   2108c:	andeq	r1, r2, r4, lsl #3
   21090:	muleq	r2, ip, r1
   21094:	andeq	r1, r2, r8, lsr #2
   21098:	andeq	r1, r2, r8, lsr #2
   2109c:	andeq	r1, r2, r8, lsr #2
   210a0:	andeq	r1, r2, r8, lsr #2
   210a4:	andeq	r1, r2, r8, lsr #2
   210a8:	andeq	r1, r2, r8, lsr #2
   210ac:	andeq	r1, r2, r8, lsr #2
   210b0:	andeq	r1, r2, r8, lsr #2
   210b4:	andeq	r1, r2, r8, lsr #2
   210b8:	andeq	r1, r2, r8, lsr #2
   210bc:	andeq	r1, r2, r8, lsr #2
   210c0:	andeq	r1, r2, r8, lsr #2
   210c4:	andeq	r1, r2, r8, lsr #2
   210c8:	andeq	r1, r2, r8, lsr #2
   210cc:	andeq	r1, r2, r8, lsr #2
   210d0:	andeq	r1, r2, r8, lsr #2
   210d4:	andeq	r1, r2, r8, lsr #2
   210d8:	andeq	r1, r2, r8, lsr #2
   210dc:			; <UNDEFINED> instruction: 0x000211b4
   210e0:	andeq	r1, r2, r8, lsr #2
   210e4:	andeq	r1, r2, r0, lsr r0
   210e8:	mov	r0, r4
   210ec:	movw	r1, #12888	; 0x3258
   210f0:	movt	r1, #4
   210f4:	bl	128fc <fprintf@plt>
   210f8:	cmn	r0, #1
   210fc:	bgt	21044 <__assert_fail@plt+0xe454>
   21100:	b	211e4 <__assert_fail@plt+0xe5f4>
   21104:	cmp	r2, #92	; 0x5c
   21108:	bne	21128 <__assert_fail@plt+0xe538>
   2110c:	mov	r0, r4
   21110:	movw	r1, #12882	; 0x3252
   21114:	movt	r1, #4
   21118:	bl	128fc <fprintf@plt>
   2111c:	cmn	r0, #1
   21120:	bgt	21044 <__assert_fail@plt+0xe454>
   21124:	b	211e4 <__assert_fail@plt+0xe5f4>
   21128:	sub	r0, r2, #33	; 0x21
   2112c:	uxtb	r0, r0
   21130:	cmp	r0, #93	; 0x5d
   21134:	bhi	211cc <__assert_fail@plt+0xe5dc>
   21138:	mov	r0, r2
   2113c:	mov	r1, r4
   21140:	bl	12ac4 <putc@plt>
   21144:	cmn	r0, #1
   21148:	bne	21044 <__assert_fail@plt+0xe454>
   2114c:	b	211e4 <__assert_fail@plt+0xe5f4>
   21150:	mov	r0, r4
   21154:	movw	r1, #12894	; 0x325e
   21158:	movt	r1, #4
   2115c:	bl	128fc <fprintf@plt>
   21160:	cmn	r0, #1
   21164:	bgt	21044 <__assert_fail@plt+0xe454>
   21168:	b	211e4 <__assert_fail@plt+0xe5f4>
   2116c:	mov	r0, r4
   21170:	mov	r1, r7
   21174:	bl	128fc <fprintf@plt>
   21178:	cmn	r0, #1
   2117c:	bgt	21044 <__assert_fail@plt+0xe454>
   21180:	b	211e4 <__assert_fail@plt+0xe5f4>
   21184:	mov	r0, r4
   21188:	mov	r1, r8
   2118c:	bl	128fc <fprintf@plt>
   21190:	cmn	r0, #1
   21194:	bgt	21044 <__assert_fail@plt+0xe454>
   21198:	b	211e4 <__assert_fail@plt+0xe5f4>
   2119c:	mov	r0, r4
   211a0:	mov	r1, r9
   211a4:	bl	128fc <fprintf@plt>
   211a8:	cmn	r0, #1
   211ac:	bgt	21044 <__assert_fail@plt+0xe454>
   211b0:	b	211e4 <__assert_fail@plt+0xe5f4>
   211b4:	mov	r0, r4
   211b8:	mov	r1, sl
   211bc:	bl	128fc <fprintf@plt>
   211c0:	cmn	r0, #1
   211c4:	bgt	21044 <__assert_fail@plt+0xe454>
   211c8:	b	211e4 <__assert_fail@plt+0xe5f4>
   211cc:	mov	r0, r4
   211d0:	movw	r1, #12906	; 0x326a
   211d4:	movt	r1, #4
   211d8:	bl	128fc <fprintf@plt>
   211dc:	cmn	r0, #1
   211e0:	bgt	21044 <__assert_fail@plt+0xe454>
   211e4:	mov	r0, #0
   211e8:	sub	sp, fp, #28
   211ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   211f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   211f4:	add	fp, sp, #28
   211f8:	sub	sp, sp, #12
   211fc:	sub	sp, sp, #8192	; 0x2000
   21200:	mov	r9, r3
   21204:	mov	sl, r0
   21208:	ldr	r7, [fp, #8]
   2120c:	cmp	r2, #0
   21210:	beq	212b0 <__assert_fail@plt+0xe6c0>
   21214:	mov	r8, r1
   21218:	str	r1, [sp]
   2121c:	add	r4, sp, #8
   21220:	mov	r0, r4
   21224:	mov	r1, #8192	; 0x2000
   21228:	mov	r2, r7
   2122c:	mvn	r3, #0
   21230:	bl	28cfc <__assert_fail@plt+0x1610c>
   21234:	mov	r5, r0
   21238:	cmp	r0, #8192	; 0x2000
   2123c:	mov	r6, r4
   21240:	bcc	2126c <__assert_fail@plt+0xe67c>
   21244:	add	r4, r5, #1
   21248:	mov	r0, r4
   2124c:	bl	2b63c <__assert_fail@plt+0x18a4c>
   21250:	mov	r6, r0
   21254:	str	r8, [sp]
   21258:	mov	r1, r4
   2125c:	add	r4, sp, #8
   21260:	mov	r2, r7
   21264:	mvn	r3, #0
   21268:	bl	28cfc <__assert_fail@plt+0x1610c>
   2126c:	mov	r0, r6
   21270:	mov	r1, r5
   21274:	bl	212c8 <__assert_fail@plt+0xe6d8>
   21278:	mov	r1, #0
   2127c:	strb	r1, [r6, r0]
   21280:	mov	r0, sl
   21284:	mov	r1, r9
   21288:	mov	r2, r6
   2128c:	bl	128fc <fprintf@plt>
   21290:	mov	r5, r0
   21294:	cmp	r6, r4
   21298:	beq	212a4 <__assert_fail@plt+0xe6b4>
   2129c:	mov	r0, r6
   212a0:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   212a4:	mov	r0, r5
   212a8:	sub	sp, fp, #28
   212ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   212b0:	mov	r0, sl
   212b4:	mov	r1, r9
   212b8:	mov	r2, r7
   212bc:	sub	sp, fp, #28
   212c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   212c4:	b	128fc <fprintf@plt>
   212c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   212cc:	add	fp, sp, #28
   212d0:	sub	sp, sp, #20
   212d4:	mov	r5, r1
   212d8:	mov	sl, r0
   212dc:	bl	12758 <__ctype_get_mb_cur_max@plt>
   212e0:	cmp	r0, #1
   212e4:	bhi	212fc <__assert_fail@plt+0xe70c>
   212e8:	mov	r0, sl
   212ec:	mov	r1, r5
   212f0:	sub	sp, fp, #28
   212f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   212f8:	b	21578 <__assert_fail@plt+0xe988>
   212fc:	cmp	r5, #1
   21300:	mov	r4, sl
   21304:	blt	2156c <__assert_fail@plt+0xe97c>
   21308:	add	r6, sl, r5
   2130c:	mov	r3, #0
   21310:	add	r8, sp, #4
   21314:	add	r9, sp, #8
   21318:	mov	r4, sl
   2131c:	mov	r7, sl
   21320:	ldrb	r0, [r7]
   21324:	sub	r1, r0, #32
   21328:	cmp	r1, #94	; 0x5e
   2132c:	bhi	214c8 <__assert_fail@plt+0xe8d8>
   21330:	add	r2, pc, #0
   21334:	ldr	pc, [r2, r1, lsl #2]
   21338:			; <UNDEFINED> instruction: 0x000214b4
   2133c:			; <UNDEFINED> instruction: 0x000214b4
   21340:			; <UNDEFINED> instruction: 0x000214b4
   21344:			; <UNDEFINED> instruction: 0x000214b4
   21348:	andeq	r1, r2, r8, asr #9
   2134c:			; <UNDEFINED> instruction: 0x000214b4
   21350:			; <UNDEFINED> instruction: 0x000214b4
   21354:			; <UNDEFINED> instruction: 0x000214b4
   21358:			; <UNDEFINED> instruction: 0x000214b4
   2135c:			; <UNDEFINED> instruction: 0x000214b4
   21360:			; <UNDEFINED> instruction: 0x000214b4
   21364:			; <UNDEFINED> instruction: 0x000214b4
   21368:			; <UNDEFINED> instruction: 0x000214b4
   2136c:			; <UNDEFINED> instruction: 0x000214b4
   21370:			; <UNDEFINED> instruction: 0x000214b4
   21374:			; <UNDEFINED> instruction: 0x000214b4
   21378:			; <UNDEFINED> instruction: 0x000214b4
   2137c:			; <UNDEFINED> instruction: 0x000214b4
   21380:			; <UNDEFINED> instruction: 0x000214b4
   21384:			; <UNDEFINED> instruction: 0x000214b4
   21388:			; <UNDEFINED> instruction: 0x000214b4
   2138c:			; <UNDEFINED> instruction: 0x000214b4
   21390:			; <UNDEFINED> instruction: 0x000214b4
   21394:			; <UNDEFINED> instruction: 0x000214b4
   21398:			; <UNDEFINED> instruction: 0x000214b4
   2139c:			; <UNDEFINED> instruction: 0x000214b4
   213a0:			; <UNDEFINED> instruction: 0x000214b4
   213a4:			; <UNDEFINED> instruction: 0x000214b4
   213a8:			; <UNDEFINED> instruction: 0x000214b4
   213ac:			; <UNDEFINED> instruction: 0x000214b4
   213b0:			; <UNDEFINED> instruction: 0x000214b4
   213b4:			; <UNDEFINED> instruction: 0x000214b4
   213b8:	andeq	r1, r2, r8, asr #9
   213bc:			; <UNDEFINED> instruction: 0x000214b4
   213c0:			; <UNDEFINED> instruction: 0x000214b4
   213c4:			; <UNDEFINED> instruction: 0x000214b4
   213c8:			; <UNDEFINED> instruction: 0x000214b4
   213cc:			; <UNDEFINED> instruction: 0x000214b4
   213d0:			; <UNDEFINED> instruction: 0x000214b4
   213d4:			; <UNDEFINED> instruction: 0x000214b4
   213d8:			; <UNDEFINED> instruction: 0x000214b4
   213dc:			; <UNDEFINED> instruction: 0x000214b4
   213e0:			; <UNDEFINED> instruction: 0x000214b4
   213e4:			; <UNDEFINED> instruction: 0x000214b4
   213e8:			; <UNDEFINED> instruction: 0x000214b4
   213ec:			; <UNDEFINED> instruction: 0x000214b4
   213f0:			; <UNDEFINED> instruction: 0x000214b4
   213f4:			; <UNDEFINED> instruction: 0x000214b4
   213f8:			; <UNDEFINED> instruction: 0x000214b4
   213fc:			; <UNDEFINED> instruction: 0x000214b4
   21400:			; <UNDEFINED> instruction: 0x000214b4
   21404:			; <UNDEFINED> instruction: 0x000214b4
   21408:			; <UNDEFINED> instruction: 0x000214b4
   2140c:			; <UNDEFINED> instruction: 0x000214b4
   21410:			; <UNDEFINED> instruction: 0x000214b4
   21414:			; <UNDEFINED> instruction: 0x000214b4
   21418:			; <UNDEFINED> instruction: 0x000214b4
   2141c:			; <UNDEFINED> instruction: 0x000214b4
   21420:			; <UNDEFINED> instruction: 0x000214b4
   21424:			; <UNDEFINED> instruction: 0x000214b4
   21428:			; <UNDEFINED> instruction: 0x000214b4
   2142c:			; <UNDEFINED> instruction: 0x000214b4
   21430:			; <UNDEFINED> instruction: 0x000214b4
   21434:			; <UNDEFINED> instruction: 0x000214b4
   21438:	andeq	r1, r2, r8, asr #9
   2143c:			; <UNDEFINED> instruction: 0x000214b4
   21440:			; <UNDEFINED> instruction: 0x000214b4
   21444:			; <UNDEFINED> instruction: 0x000214b4
   21448:			; <UNDEFINED> instruction: 0x000214b4
   2144c:			; <UNDEFINED> instruction: 0x000214b4
   21450:			; <UNDEFINED> instruction: 0x000214b4
   21454:			; <UNDEFINED> instruction: 0x000214b4
   21458:			; <UNDEFINED> instruction: 0x000214b4
   2145c:			; <UNDEFINED> instruction: 0x000214b4
   21460:			; <UNDEFINED> instruction: 0x000214b4
   21464:			; <UNDEFINED> instruction: 0x000214b4
   21468:			; <UNDEFINED> instruction: 0x000214b4
   2146c:			; <UNDEFINED> instruction: 0x000214b4
   21470:			; <UNDEFINED> instruction: 0x000214b4
   21474:			; <UNDEFINED> instruction: 0x000214b4
   21478:			; <UNDEFINED> instruction: 0x000214b4
   2147c:			; <UNDEFINED> instruction: 0x000214b4
   21480:			; <UNDEFINED> instruction: 0x000214b4
   21484:			; <UNDEFINED> instruction: 0x000214b4
   21488:			; <UNDEFINED> instruction: 0x000214b4
   2148c:			; <UNDEFINED> instruction: 0x000214b4
   21490:			; <UNDEFINED> instruction: 0x000214b4
   21494:			; <UNDEFINED> instruction: 0x000214b4
   21498:			; <UNDEFINED> instruction: 0x000214b4
   2149c:			; <UNDEFINED> instruction: 0x000214b4
   214a0:			; <UNDEFINED> instruction: 0x000214b4
   214a4:			; <UNDEFINED> instruction: 0x000214b4
   214a8:			; <UNDEFINED> instruction: 0x000214b4
   214ac:			; <UNDEFINED> instruction: 0x000214b4
   214b0:			; <UNDEFINED> instruction: 0x000214b4
   214b4:	strb	r0, [r4], #1
   214b8:	add	r7, r7, #1
   214bc:	cmp	r7, r6
   214c0:	bcc	21320 <__assert_fail@plt+0xe730>
   214c4:	b	2156c <__assert_fail@plt+0xe97c>
   214c8:	str	r3, [sp, #12]
   214cc:	str	r3, [sp, #8]
   214d0:	b	214f0 <__assert_fail@plt+0xe900>
   214d4:	mov	r0, #63	; 0x3f
   214d8:	strb	r0, [r4], #1
   214dc:	add	r7, r7, r5
   214e0:	mov	r0, r9
   214e4:	bl	1262c <mbsinit@plt>
   214e8:	cmp	r0, #0
   214ec:	bne	21560 <__assert_fail@plt+0xe970>
   214f0:	sub	r2, r6, r7
   214f4:	mov	r0, r8
   214f8:	mov	r1, r7
   214fc:	mov	r3, r9
   21500:	bl	2edb8 <__assert_fail@plt+0x1c1c8>
   21504:	cmp	r0, #0
   21508:	beq	21524 <__assert_fail@plt+0xe934>
   2150c:	mov	r5, r0
   21510:	cmn	r0, #2
   21514:	beq	2154c <__assert_fail@plt+0xe95c>
   21518:	cmn	r5, #1
   2151c:	bne	21528 <__assert_fail@plt+0xe938>
   21520:	b	21554 <__assert_fail@plt+0xe964>
   21524:	mov	r5, #1
   21528:	ldr	r0, [sp, #4]
   2152c:	bl	1256c <wcwidth@plt>
   21530:	cmp	r0, #0
   21534:	bmi	214d4 <__assert_fail@plt+0xe8e4>
   21538:	ldrb	r0, [r7], #1
   2153c:	strb	r0, [r4], #1
   21540:	subs	r5, r5, #1
   21544:	bne	21538 <__assert_fail@plt+0xe948>
   21548:	b	214e0 <__assert_fail@plt+0xe8f0>
   2154c:	mov	r7, r6
   21550:	b	21558 <__assert_fail@plt+0xe968>
   21554:	add	r7, r7, #1
   21558:	mov	r0, #63	; 0x3f
   2155c:	strb	r0, [r4], #1
   21560:	mov	r3, #0
   21564:	cmp	r7, r6
   21568:	bcc	21320 <__assert_fail@plt+0xe730>
   2156c:	sub	r0, r4, sl
   21570:	sub	sp, fp, #28
   21574:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21578:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2157c:	add	fp, sp, #24
   21580:	mov	r8, r1
   21584:	cmp	r1, #1
   21588:	blt	215c8 <__assert_fail@plt+0xe9d8>
   2158c:	mov	r5, r0
   21590:	add	r7, r0, r8
   21594:	bl	1286c <__ctype_b_loc@plt>
   21598:	mov	r6, r0
   2159c:	mov	r9, #63	; 0x3f
   215a0:	ldr	r4, [r6]
   215a4:	ldrb	r0, [r5]
   215a8:	bl	215d0 <__assert_fail@plt+0xe9e0>
   215ac:	add	r0, r4, r0, lsl #1
   215b0:	ldrb	r0, [r0, #1]
   215b4:	tst	r0, #64	; 0x40
   215b8:	strbeq	r9, [r5]
   215bc:	add	r5, r5, #1
   215c0:	cmp	r5, r7
   215c4:	bcc	215a0 <__assert_fail@plt+0xe9b0>
   215c8:	mov	r0, r8
   215cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   215d0:	bx	lr
   215d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   215d8:	add	fp, sp, #28
   215dc:	sub	sp, sp, #12
   215e0:	mov	r7, r0
   215e4:	mov	r4, #0
   215e8:	movw	sl, #12912	; 0x3270
   215ec:	movt	sl, #4
   215f0:	mov	r6, #0
   215f4:	ldr	r5, [sl, r4]
   215f8:	mov	r0, r5
   215fc:	mov	r1, r7
   21600:	bl	124f4 <strcmp@plt>
   21604:	cmp	r0, #0
   21608:	beq	216c8 <__assert_fail@plt+0xead8>
   2160c:	mov	r0, r5
   21610:	bl	2a32c <__assert_fail@plt+0x1773c>
   21614:	bl	128c0 <strlen@plt>
   21618:	add	r0, r6, r0
   2161c:	add	r6, r0, #2
   21620:	add	r4, r4, #12
   21624:	cmp	r4, #156	; 0x9c
   21628:	bne	215f4 <__assert_fail@plt+0xea04>
   2162c:	str	r7, [sp, #8]
   21630:	add	r0, r6, #1
   21634:	bl	2b63c <__assert_fail@plt+0x18a4c>
   21638:	mov	r6, r0
   2163c:	mov	r4, #0
   21640:	movw	r8, #8236	; 0x202c
   21644:	mov	r9, #0
   21648:	str	r0, [sp, #4]
   2164c:	cmp	r9, #0
   21650:	strhne	r8, [r6]
   21654:	strbne	r4, [r6, #2]!
   21658:	ldr	r0, [sl, -r9]
   2165c:	bl	2a32c <__assert_fail@plt+0x1773c>
   21660:	mov	r7, r0
   21664:	bl	128c0 <strlen@plt>
   21668:	mov	r5, r0
   2166c:	add	r2, r0, #1
   21670:	mov	r0, r6
   21674:	mov	r1, r7
   21678:	bl	125f0 <memcpy@plt>
   2167c:	add	r6, r6, r5
   21680:	sub	r9, r9, #12
   21684:	cmn	r9, #156	; 0x9c
   21688:	bne	2164c <__assert_fail@plt+0xea5c>
   2168c:	movw	r1, #13068	; 0x330c
   21690:	movt	r1, #4
   21694:	mov	r0, #0
   21698:	mov	r2, #5
   2169c:	bl	12674 <dcgettext@plt>
   216a0:	mov	r5, r0
   216a4:	ldr	r0, [sp, #8]
   216a8:	bl	2a32c <__assert_fail@plt+0x1773c>
   216ac:	mov	r3, r0
   216b0:	ldr	r0, [sp, #4]
   216b4:	str	r0, [sp]
   216b8:	mov	r0, #1
   216bc:	mov	r1, #0
   216c0:	mov	r2, r5
   216c4:	bl	127b8 <error@plt>
   216c8:	add	r0, sl, r4
   216cc:	ldr	r0, [r0, #8]
   216d0:	sub	sp, fp, #28
   216d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   216d8:	mov	r1, r0
   216dc:	mov	r0, #0
   216e0:	cmp	r1, #12
   216e4:	bxhi	lr
   216e8:	add	r0, r1, r1, lsl #1
   216ec:	movw	r1, #12912	; 0x3270
   216f0:	movt	r1, #4
   216f4:	ldr	r0, [r1, r0, lsl #2]
   216f8:	bx	lr
   216fc:	mov	r1, r0
   21700:	mvn	r0, #0
   21704:	cmp	r1, #12
   21708:	bxhi	lr
   2170c:	add	r0, r1, r1, lsl #1
   21710:	movw	r1, #12912	; 0x3270
   21714:	movt	r1, #4
   21718:	add	r0, r1, r0, lsl #2
   2171c:	ldr	r0, [r0, #8]
   21720:	bx	lr
   21724:	mov	r1, r0
   21728:	mov	r0, #0
   2172c:	cmp	r1, #12
   21730:	bxhi	lr
   21734:	add	r0, r1, r1, lsl #1
   21738:	movw	r1, #12912	; 0x3270
   2173c:	movt	r1, #4
   21740:	add	r0, r1, r0, lsl #2
   21744:	ldr	r0, [r0, #4]
   21748:	bx	lr
   2174c:	push	{r4, sl, fp, lr}
   21750:	add	fp, sp, #8
   21754:	mov	lr, r0
   21758:	mvn	r0, #0
   2175c:	cmp	lr, #12
   21760:	pophi	{r4, sl, fp, pc}
   21764:	cmp	lr, #0
   21768:	beq	217b8 <__assert_fail@plt+0xebc8>
   2176c:	add	r2, lr, lr, lsl #1
   21770:	movw	r3, #12912	; 0x3270
   21774:	movt	r3, #4
   21778:	add	r2, r3, r2, lsl #2
   2177c:	ldr	ip, [r2, #8]
   21780:	add	r2, r3, #4
   21784:	mov	r3, #0
   21788:	b	2179c <__assert_fail@plt+0xebac>
   2178c:	add	r2, r2, #12
   21790:	add	r3, r3, #1
   21794:	cmp	lr, r3
   21798:	beq	217b8 <__assert_fail@plt+0xebc8>
   2179c:	ldr	r4, [r2]
   217a0:	tst	r4, r1
   217a4:	beq	2178c <__assert_fail@plt+0xeb9c>
   217a8:	ldr	r4, [r2, #4]
   217ac:	cmp	ip, r4
   217b0:	bne	2178c <__assert_fail@plt+0xeb9c>
   217b4:	mov	r0, r3
   217b8:	pop	{r4, sl, fp, pc}
   217bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   217c0:	add	fp, sp, #24
   217c4:	sub	sp, sp, #8
   217c8:	mov	r5, r1
   217cc:	mov	r4, r0
   217d0:	bl	12908 <__errno_location@plt>
   217d4:	mov	r6, r0
   217d8:	mov	r0, #0
   217dc:	str	r0, [r6]
   217e0:	add	r1, sp, #4
   217e4:	mov	r0, r4
   217e8:	mov	r2, #10
   217ec:	bl	12500 <strtol@plt>
   217f0:	add	r1, r0, #-2147483647	; 0x80000001
   217f4:	cmp	r1, #1
   217f8:	bls	21858 <__assert_fail@plt+0xec68>
   217fc:	ldr	r7, [sp, #4]
   21800:	ldrb	r1, [r7]
   21804:	cmp	r1, #0
   21808:	bne	21870 <__assert_fail@plt+0xec80>
   2180c:	cmp	r7, r4
   21810:	subne	sp, fp, #24
   21814:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   21818:	ldr	r6, [r6]
   2181c:	movw	r1, #13252	; 0x33c4
   21820:	movt	r1, #4
   21824:	mov	r0, #0
   21828:	mov	r2, #5
   2182c:	bl	12674 <dcgettext@plt>
   21830:	mov	r7, r0
   21834:	mov	r0, #0
   21838:	mov	r1, r5
   2183c:	mov	r2, r4
   21840:	bl	2a088 <__assert_fail@plt+0x17498>
   21844:	mov	r3, r0
   21848:	mov	r0, #1
   2184c:	mov	r1, r6
   21850:	mov	r2, r7
   21854:	bl	127b8 <error@plt>
   21858:	ldr	r1, [r6]
   2185c:	movw	r2, #19695	; 0x4cef
   21860:	movt	r2, #4
   21864:	mov	r0, #1
   21868:	mov	r3, r4
   2186c:	bl	127b8 <error@plt>
   21870:	ldr	r8, [r6]
   21874:	movw	r1, #13225	; 0x33a9
   21878:	movt	r1, #4
   2187c:	mov	r0, #0
   21880:	mov	r2, #5
   21884:	bl	12674 <dcgettext@plt>
   21888:	mov	r6, r0
   2188c:	mov	r0, #0
   21890:	mov	r1, r5
   21894:	mov	r2, r7
   21898:	bl	2a088 <__assert_fail@plt+0x17498>
   2189c:	mov	r7, r0
   218a0:	mov	r0, #1
   218a4:	mov	r1, r5
   218a8:	mov	r2, r4
   218ac:	bl	2a088 <__assert_fail@plt+0x17498>
   218b0:	str	r0, [sp]
   218b4:	mov	r0, #1
   218b8:	mov	r1, r8
   218bc:	mov	r2, r6
   218c0:	mov	r3, r7
   218c4:	bl	127b8 <error@plt>
   218c8:	push	{r4, r5, fp, lr}
   218cc:	add	fp, sp, #8
   218d0:	ldr	r5, [fp, #8]
   218d4:	cmp	r2, #0
   218d8:	beq	218ec <__assert_fail@plt+0xecfc>
   218dc:	mov	r2, #0
   218e0:	str	r2, [r3]
   218e4:	str	r2, [r5]
   218e8:	b	21910 <__assert_fail@plt+0xed20>
   218ec:	ldr	r2, [r5]
   218f0:	ldr	r4, [r3]
   218f4:	add	r2, r4, r2
   218f8:	str	r2, [r3]
   218fc:	ldrb	r4, [r0, r2]
   21900:	cmp	r4, #0
   21904:	beq	21928 <__assert_fail@plt+0xed38>
   21908:	add	r2, r2, #1
   2190c:	str	r2, [r3]
   21910:	ldr	r2, [r3]
   21914:	add	r0, r0, r2
   21918:	bl	21930 <__assert_fail@plt+0xed40>
   2191c:	str	r0, [r5]
   21920:	mov	r0, #1
   21924:	pop	{r4, r5, fp, pc}
   21928:	mov	r0, #0
   2192c:	pop	{r4, r5, fp, pc}
   21930:	push	{r4, sl, fp, lr}
   21934:	add	fp, sp, #8
   21938:	mov	r4, r0
   2193c:	ldrb	r0, [r1]
   21940:	cmp	r0, #0
   21944:	beq	2195c <__assert_fail@plt+0xed6c>
   21948:	mov	r0, r4
   2194c:	bl	12b0c <strpbrk@plt>
   21950:	cmp	r0, #0
   21954:	subne	r0, r0, r4
   21958:	popne	{r4, sl, fp, pc}
   2195c:	mov	r0, r4
   21960:	pop	{r4, sl, fp, lr}
   21964:	b	128c0 <strlen@plt>
   21968:	push	{r4, r5, fp, lr}
   2196c:	add	fp, sp, #8
   21970:	sub	sp, sp, #16
   21974:	mov	r4, r1
   21978:	mov	r5, r0
   2197c:	movw	r1, #13276	; 0x33dc
   21980:	movt	r1, #4
   21984:	mov	r0, #0
   21988:	mov	r2, #5
   2198c:	bl	12674 <dcgettext@plt>
   21990:	mov	r1, r0
   21994:	movw	r0, #13568	; 0x3500
   21998:	movt	r0, #4
   2199c:	movw	r2, #13521	; 0x34d1
   219a0:	movt	r2, #4
   219a4:	movw	r3, #12721	; 0x31b1
   219a8:	movt	r3, #4
   219ac:	str	r3, [sp]
   219b0:	str	r2, [sp, #4]
   219b4:	str	r0, [sp, #8]
   219b8:	movw	r2, #13482	; 0x34aa
   219bc:	movt	r2, #4
   219c0:	mov	r0, r5
   219c4:	mov	r3, r4
   219c8:	bl	128fc <fprintf@plt>
   219cc:	sub	sp, fp, #8
   219d0:	pop	{r4, r5, fp, pc}
   219d4:	push	{fp, lr}
   219d8:	mov	fp, sp
   219dc:	sub	sp, sp, #8
   219e0:	movw	r2, #10276	; 0x2824
   219e4:	movt	r2, #1
   219e8:	mov	r3, #0
   219ec:	str	r3, [sp]
   219f0:	str	r2, [sp, #4]
   219f4:	mov	r2, #0
   219f8:	mov	r3, #0
   219fc:	bl	21b78 <__assert_fail@plt+0xef88>
   21a00:	mov	sp, fp
   21a04:	pop	{fp, pc}
   21a08:	push	{r4, sl, fp, lr}
   21a0c:	add	fp, sp, #8
   21a10:	mov	r4, r0
   21a14:	mov	r0, #24
   21a18:	bl	2ed88 <__assert_fail@plt+0x1c198>
   21a1c:	cmp	r0, #0
   21a20:	moveq	r0, #0
   21a24:	strne	r4, [r0, #16]
   21a28:	strne	r4, [r0, #20]
   21a2c:	movne	r1, #0
   21a30:	strne	r1, [r0]
   21a34:	pop	{r4, sl, fp, pc}
   21a38:	push	{r4, sl, fp, lr}
   21a3c:	add	fp, sp, #8
   21a40:	mov	r4, r0
   21a44:	mov	r0, #24
   21a48:	bl	2ed88 <__assert_fail@plt+0x1c198>
   21a4c:	cmp	r0, #0
   21a50:	beq	21a68 <__assert_fail@plt+0xee78>
   21a54:	vmov.i32	q8, #0	; 0x00000000
   21a58:	mov	r1, r0
   21a5c:	str	r4, [r1], #4
   21a60:	vst1.32	{d16-d17}, [r1]
   21a64:	pop	{r4, sl, fp, pc}
   21a68:	mov	r0, #0
   21a6c:	pop	{r4, sl, fp, pc}
   21a70:	push	{r4, r5, r6, sl, fp, lr}
   21a74:	add	fp, sp, #16
   21a78:	mov	r4, r1
   21a7c:	mov	r5, r0
   21a80:	ldr	r3, [r0]
   21a84:	cmp	r3, #0
   21a88:	beq	21ac4 <__assert_fail@plt+0xeed4>
   21a8c:	add	r0, r5, #8
   21a90:	add	r1, r5, #12
   21a94:	mov	r6, #0
   21a98:	mov	r2, #0
   21a9c:	bl	12b48 <getdelim@plt>
   21aa0:	cmn	r0, #1
   21aa4:	ble	21af4 <__assert_fail@plt+0xef04>
   21aa8:	mov	r0, #1
   21aac:	str	r0, [r4]
   21ab0:	ldmib	r5, {r0, r6}
   21ab4:	add	r0, r0, #1
   21ab8:	str	r0, [r5, #4]
   21abc:	mov	r0, r6
   21ac0:	pop	{r4, r5, r6, sl, fp, pc}
   21ac4:	ldr	r0, [r5, #20]
   21ac8:	ldr	r0, [r0]
   21acc:	cmp	r0, #0
   21ad0:	beq	21b14 <__assert_fail@plt+0xef24>
   21ad4:	mov	r0, #1
   21ad8:	str	r0, [r4]
   21adc:	ldr	r0, [r5, #20]
   21ae0:	add	r1, r0, #4
   21ae4:	str	r1, [r5, #20]
   21ae8:	ldr	r6, [r0]
   21aec:	mov	r0, r6
   21af0:	pop	{r4, r5, r6, sl, fp, pc}
   21af4:	ldr	r0, [r5]
   21af8:	bl	12890 <feof@plt>
   21afc:	mov	r1, #2
   21b00:	cmp	r0, #0
   21b04:	movweq	r1, #4
   21b08:	str	r1, [r4]
   21b0c:	mov	r0, r6
   21b10:	pop	{r4, r5, r6, sl, fp, pc}
   21b14:	mov	r0, #2
   21b18:	str	r0, [r4]
   21b1c:	mov	r6, #0
   21b20:	mov	r0, r6
   21b24:	pop	{r4, r5, r6, sl, fp, pc}
   21b28:	ldr	r1, [r0]
   21b2c:	cmp	r1, #0
   21b30:	ldrne	r0, [r0, #4]
   21b34:	bxne	lr
   21b38:	ldr	r1, [r0, #16]
   21b3c:	ldr	r0, [r0, #20]
   21b40:	sub	r0, r0, r1
   21b44:	asr	r0, r0, #2
   21b48:	bx	lr
   21b4c:	push	{r4, sl, fp, lr}
   21b50:	add	fp, sp, #8
   21b54:	mov	r4, r0
   21b58:	ldr	r0, [r0]
   21b5c:	cmp	r0, #0
   21b60:	beq	21b6c <__assert_fail@plt+0xef7c>
   21b64:	ldr	r0, [r4, #8]
   21b68:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   21b6c:	mov	r0, r4
   21b70:	pop	{r4, sl, fp, lr}
   21b74:	b	2cad4 <__assert_fail@plt+0x19ee4>
   21b78:	push	{r4, r5, fp, lr}
   21b7c:	add	fp, sp, #8
   21b80:	sub	sp, sp, #1040	; 0x410
   21b84:	add	ip, sp, #16
   21b88:	str	ip, [sp, #8]
   21b8c:	ldr	ip, [fp, #12]
   21b90:	str	ip, [sp, #4]
   21b94:	ldr	ip, [fp, #8]
   21b98:	str	ip, [sp]
   21b9c:	bl	21ba8 <__assert_fail@plt+0xefb8>
   21ba0:	sub	sp, fp, #8
   21ba4:	pop	{r4, r5, fp, pc}
   21ba8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21bac:	add	fp, sp, #28
   21bb0:	sub	sp, sp, #4
   21bb4:	mov	r4, r3
   21bb8:	mov	r6, r2
   21bbc:	mov	r9, r0
   21bc0:	cmp	r2, #0
   21bc4:	movweq	r4, #1024	; 0x400
   21bc8:	cmn	r4, #-2147483647	; 0x80000001
   21bcc:	mvncs	r4, #-2147483648	; 0x80000000
   21bd0:	ldr	r0, [fp, #16]
   21bd4:	cmp	r2, #0
   21bd8:	moveq	r6, r0
   21bdc:	ldr	r0, [fp, #8]
   21be0:	movw	r7, #19592	; 0x4c88
   21be4:	movt	r7, #4
   21be8:	cmp	r0, #0
   21bec:	movne	r7, r0
   21bf0:	cmp	r6, #0
   21bf4:	beq	21c64 <__assert_fail@plt+0xf074>
   21bf8:	mov	r8, r1
   21bfc:	ldr	sl, [fp, #12]
   21c00:	mov	r5, r6
   21c04:	mov	r0, r9
   21c08:	mov	r1, r8
   21c0c:	mov	r2, r5
   21c10:	mov	r3, r4
   21c14:	blx	sl
   21c18:	cmn	r0, #1
   21c1c:	ble	21c84 <__assert_fail@plt+0xf094>
   21c20:	cmp	r0, r4
   21c24:	blt	21cb0 <__assert_fail@plt+0xf0c0>
   21c28:	cmp	r5, r6
   21c2c:	beq	21c3c <__assert_fail@plt+0xf04c>
   21c30:	ldr	r1, [r7, #8]
   21c34:	mov	r0, r5
   21c38:	blx	r1
   21c3c:	cmn	r4, #-1073741823	; 0xc0000001
   21c40:	bge	21d00 <__assert_fail@plt+0xf110>
   21c44:	mov	r0, #1
   21c48:	orr	r4, r0, r4, lsl #1
   21c4c:	ldr	r1, [r7]
   21c50:	mov	r0, r4
   21c54:	blx	r1
   21c58:	mov	r5, r0
   21c5c:	cmp	r0, #0
   21c60:	bne	21c04 <__assert_fail@plt+0xf014>
   21c64:	ldr	r1, [r7, #12]
   21c68:	cmp	r1, #0
   21c6c:	beq	21c78 <__assert_fail@plt+0xf088>
   21c70:	mov	r0, r4
   21c74:	blx	r1
   21c78:	bl	12908 <__errno_location@plt>
   21c7c:	mov	r1, #12
   21c80:	b	21d08 <__assert_fail@plt+0xf118>
   21c84:	mov	r4, #0
   21c88:	cmp	r5, r6
   21c8c:	beq	21d10 <__assert_fail@plt+0xf120>
   21c90:	bl	12908 <__errno_location@plt>
   21c94:	mov	r6, r0
   21c98:	ldr	r8, [r0]
   21c9c:	ldr	r1, [r7, #8]
   21ca0:	mov	r0, r5
   21ca4:	blx	r1
   21ca8:	str	r8, [r6]
   21cac:	b	21d10 <__assert_fail@plt+0xf120>
   21cb0:	mov	r1, #0
   21cb4:	strb	r1, [r5, r0]
   21cb8:	add	r8, r0, #1
   21cbc:	ldr	r0, [fp, #16]
   21cc0:	cmp	r5, r0
   21cc4:	beq	21d24 <__assert_fail@plt+0xf134>
   21cc8:	cmp	r5, r6
   21ccc:	beq	21d1c <__assert_fail@plt+0xf12c>
   21cd0:	cmp	r8, r4
   21cd4:	bge	21d1c <__assert_fail@plt+0xf12c>
   21cd8:	ldr	r2, [r7, #4]
   21cdc:	cmp	r2, #0
   21ce0:	beq	21d1c <__assert_fail@plt+0xf12c>
   21ce4:	mov	r0, r5
   21ce8:	mov	r1, r8
   21cec:	blx	r2
   21cf0:	cmp	r0, #0
   21cf4:	moveq	r0, r5
   21cf8:	sub	sp, fp, #28
   21cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d00:	bl	12908 <__errno_location@plt>
   21d04:	mov	r1, #36	; 0x24
   21d08:	str	r1, [r0]
   21d0c:	mov	r4, #0
   21d10:	mov	r0, r4
   21d14:	sub	sp, fp, #28
   21d18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d1c:	mov	r4, r5
   21d20:	b	21d10 <__assert_fail@plt+0xf120>
   21d24:	ldr	r1, [r7]
   21d28:	mov	r0, r8
   21d2c:	blx	r1
   21d30:	cmp	r0, #0
   21d34:	beq	21d4c <__assert_fail@plt+0xf15c>
   21d38:	mov	r4, r0
   21d3c:	mov	r1, r5
   21d40:	mov	r2, r8
   21d44:	bl	125f0 <memcpy@plt>
   21d48:	b	21d10 <__assert_fail@plt+0xf120>
   21d4c:	mov	r4, r8
   21d50:	b	21c64 <__assert_fail@plt+0xf074>
   21d54:	push	{r4, r5, r6, sl, fp, lr}
   21d58:	add	fp, sp, #16
   21d5c:	mov	r6, r1
   21d60:	mov	r4, r0
   21d64:	mov	r5, #0
   21d68:	mov	r1, #1
   21d6c:	mov	r2, #0
   21d70:	bl	2c888 <__assert_fail@plt+0x19c98>
   21d74:	cmp	r0, #0
   21d78:	bmi	21da8 <__assert_fail@plt+0xf1b8>
   21d7c:	bic	r2, r0, #1
   21d80:	cmp	r6, #0
   21d84:	orrne	r2, r0, #1
   21d88:	cmp	r0, r2
   21d8c:	beq	21dac <__assert_fail@plt+0xf1bc>
   21d90:	mov	r0, r4
   21d94:	mov	r1, #2
   21d98:	bl	2c888 <__assert_fail@plt+0x19c98>
   21d9c:	cmn	r0, #1
   21da0:	movwne	r0, #0
   21da4:	pop	{r4, r5, r6, sl, fp, pc}
   21da8:	mvn	r5, #0
   21dac:	mov	r0, r5
   21db0:	pop	{r4, r5, r6, sl, fp, pc}
   21db4:	movw	r1, #1030	; 0x406
   21db8:	mov	r2, #0
   21dbc:	b	2c888 <__assert_fail@plt+0x19c98>
   21dc0:	movw	r1, #23820	; 0x5d0c
   21dc4:	movt	r1, #5
   21dc8:	str	r0, [r1]
   21dcc:	bx	lr
   21dd0:	movw	r1, #23824	; 0x5d10
   21dd4:	movt	r1, #5
   21dd8:	strb	r0, [r1]
   21ddc:	bx	lr
   21de0:	push	{r4, r5, r6, sl, fp, lr}
   21de4:	add	fp, sp, #16
   21de8:	sub	sp, sp, #8
   21dec:	movw	r0, #21876	; 0x5574
   21df0:	movt	r0, #5
   21df4:	ldr	r0, [r0]
   21df8:	bl	3dc14 <__assert_fail@plt+0x2b024>
   21dfc:	cmp	r0, #0
   21e00:	beq	21e28 <__assert_fail@plt+0xf238>
   21e04:	movw	r0, #23824	; 0x5d10
   21e08:	movt	r0, #5
   21e0c:	ldrb	r0, [r0]
   21e10:	cmp	r0, #0
   21e14:	beq	21e48 <__assert_fail@plt+0xf258>
   21e18:	bl	12908 <__errno_location@plt>
   21e1c:	ldr	r0, [r0]
   21e20:	cmp	r0, #32
   21e24:	bne	21e48 <__assert_fail@plt+0xf258>
   21e28:	movw	r0, #21864	; 0x5568
   21e2c:	movt	r0, #5
   21e30:	ldr	r0, [r0]
   21e34:	bl	3dc14 <__assert_fail@plt+0x2b024>
   21e38:	cmp	r0, #0
   21e3c:	subeq	sp, fp, #16
   21e40:	popeq	{r4, r5, r6, sl, fp, pc}
   21e44:	b	21eb8 <__assert_fail@plt+0xf2c8>
   21e48:	movw	r1, #13590	; 0x3516
   21e4c:	movt	r1, #4
   21e50:	mov	r0, #0
   21e54:	mov	r2, #5
   21e58:	bl	12674 <dcgettext@plt>
   21e5c:	mov	r4, r0
   21e60:	movw	r0, #23820	; 0x5d0c
   21e64:	movt	r0, #5
   21e68:	ldr	r6, [r0]
   21e6c:	bl	12908 <__errno_location@plt>
   21e70:	ldr	r5, [r0]
   21e74:	cmp	r6, #0
   21e78:	bne	21e94 <__assert_fail@plt+0xf2a4>
   21e7c:	movw	r2, #19695	; 0x4cef
   21e80:	movt	r2, #4
   21e84:	mov	r0, #0
   21e88:	mov	r1, r5
   21e8c:	mov	r3, r4
   21e90:	b	21eb4 <__assert_fail@plt+0xf2c4>
   21e94:	mov	r0, r6
   21e98:	bl	2a1dc <__assert_fail@plt+0x175ec>
   21e9c:	mov	r3, r0
   21ea0:	str	r4, [sp]
   21ea4:	movw	r2, #13602	; 0x3522
   21ea8:	movt	r2, #4
   21eac:	mov	r0, #0
   21eb0:	mov	r1, r5
   21eb4:	bl	127b8 <error@plt>
   21eb8:	movw	r0, #21768	; 0x5508
   21ebc:	movt	r0, #5
   21ec0:	ldr	r0, [r0]
   21ec4:	bl	125e4 <_exit@plt>
   21ec8:	push	{r4, r5, r6, r7, fp, lr}
   21ecc:	add	fp, sp, #16
   21ed0:	bl	127d0 <opendir@plt>
   21ed4:	cmp	r0, #0
   21ed8:	beq	21f28 <__assert_fail@plt+0xf338>
   21edc:	mov	r4, r0
   21ee0:	bl	12ad0 <dirfd@plt>
   21ee4:	cmp	r0, #2
   21ee8:	bhi	21f34 <__assert_fail@plt+0xf344>
   21eec:	movw	r1, #1030	; 0x406
   21ef0:	mov	r2, #3
   21ef4:	bl	2c888 <__assert_fail@plt+0x19c98>
   21ef8:	cmn	r0, #1
   21efc:	ble	21f3c <__assert_fail@plt+0xf34c>
   21f00:	mov	r6, r0
   21f04:	bl	12aac <fdopendir@plt>
   21f08:	mov	r5, r0
   21f0c:	bl	12908 <__errno_location@plt>
   21f10:	ldr	r7, [r0]
   21f14:	cmp	r5, #0
   21f18:	bne	21f48 <__assert_fail@plt+0xf358>
   21f1c:	mov	r0, r6
   21f20:	bl	12ba8 <close@plt>
   21f24:	b	21f44 <__assert_fail@plt+0xf354>
   21f28:	mov	r5, #0
   21f2c:	mov	r0, r5
   21f30:	pop	{r4, r5, r6, r7, fp, pc}
   21f34:	mov	r0, r4
   21f38:	pop	{r4, r5, r6, r7, fp, pc}
   21f3c:	bl	12908 <__errno_location@plt>
   21f40:	ldr	r7, [r0]
   21f44:	mov	r5, #0
   21f48:	mov	r0, r4
   21f4c:	bl	12bc0 <closedir@plt>
   21f50:	bl	12908 <__errno_location@plt>
   21f54:	str	r7, [r0]
   21f58:	mov	r0, r5
   21f5c:	pop	{r4, r5, r6, r7, fp, pc}
   21f60:	push	{r4, r5, r6, sl, fp, lr}
   21f64:	add	fp, sp, #16
   21f68:	mov	r6, r0
   21f6c:	bl	3d724 <__assert_fail@plt+0x2ab34>
   21f70:	mov	r4, r0
   21f74:	ldrb	r0, [r0]
   21f78:	cmp	r0, #0
   21f7c:	beq	21f9c <__assert_fail@plt+0xf3ac>
   21f80:	mov	r0, r4
   21f84:	bl	3d770 <__assert_fail@plt+0x2ab80>
   21f88:	mov	r5, r0
   21f8c:	ldrb	r0, [r4, r0]
   21f90:	cmp	r0, #47	; 0x2f
   21f94:	addeq	r5, r5, #1
   21f98:	b	21fac <__assert_fail@plt+0xf3bc>
   21f9c:	mov	r0, r6
   21fa0:	bl	3d770 <__assert_fail@plt+0x2ab80>
   21fa4:	mov	r5, r0
   21fa8:	mov	r4, r6
   21fac:	add	r0, r5, #1
   21fb0:	bl	2b664 <__assert_fail@plt+0x18a74>
   21fb4:	mov	r6, r0
   21fb8:	mov	r1, r4
   21fbc:	mov	r2, r5
   21fc0:	bl	125f0 <memcpy@plt>
   21fc4:	mov	r0, #0
   21fc8:	strb	r0, [r6, r5]
   21fcc:	mov	r0, r6
   21fd0:	pop	{r4, r5, r6, sl, fp, pc}
   21fd4:	push	{r4, r5, r6, sl, fp, lr}
   21fd8:	add	fp, sp, #16
   21fdc:	mov	r4, r0
   21fe0:	mov	r5, r0
   21fe4:	ldrb	r6, [r5], #-1
   21fe8:	bl	3d724 <__assert_fail@plt+0x2ab34>
   21fec:	sub	r2, r0, r4
   21ff0:	sub	r0, r6, #47	; 0x2f
   21ff4:	clz	r0, r0
   21ff8:	lsr	r1, r0, #5
   21ffc:	mov	r0, r2
   22000:	cmp	r2, r1
   22004:	bls	22018 <__assert_fail@plt+0xf428>
   22008:	ldrb	r3, [r5, r0]
   2200c:	sub	r2, r0, #1
   22010:	cmp	r3, #47	; 0x2f
   22014:	beq	21ffc <__assert_fail@plt+0xf40c>
   22018:	pop	{r4, r5, r6, sl, fp, pc}
   2201c:	push	{r4, r5, r6, sl, fp, lr}
   22020:	add	fp, sp, #16
   22024:	mov	r6, r0
   22028:	bl	21fd4 <__assert_fail@plt+0xf3e4>
   2202c:	mov	r4, r0
   22030:	cmp	r0, #0
   22034:	addeq	r0, r0, #1
   22038:	add	r0, r0, #1
   2203c:	bl	2ed88 <__assert_fail@plt+0x1c198>
   22040:	mov	r5, r0
   22044:	cmp	r0, #0
   22048:	beq	22074 <__assert_fail@plt+0xf484>
   2204c:	mov	r0, r5
   22050:	mov	r1, r6
   22054:	mov	r2, r4
   22058:	bl	125f0 <memcpy@plt>
   2205c:	cmp	r4, #0
   22060:	moveq	r0, #46	; 0x2e
   22064:	strbeq	r0, [r5, r4]
   22068:	moveq	r4, #1
   2206c:	mov	r0, #0
   22070:	strb	r0, [r5, r4]
   22074:	mov	r0, r5
   22078:	pop	{r4, r5, r6, sl, fp, pc}
   2207c:	push	{r4, r5, fp, lr}
   22080:	add	fp, sp, #8
   22084:	mov	r4, r0
   22088:	bl	3d724 <__assert_fail@plt+0x2ab34>
   2208c:	mov	r5, r0
   22090:	ldrb	r0, [r0]
   22094:	cmp	r0, #0
   22098:	moveq	r5, r4
   2209c:	mov	r0, r5
   220a0:	bl	3d770 <__assert_fail@plt+0x2ab80>
   220a4:	ldrb	r1, [r5, r0]
   220a8:	mov	r2, #0
   220ac:	strb	r2, [r5, r0]
   220b0:	cmp	r1, #0
   220b4:	movwne	r1, #1
   220b8:	mov	r0, r1
   220bc:	pop	{r4, r5, fp, pc}
   220c0:	sub	sp, sp, #8
   220c4:	push	{fp, lr}
   220c8:	mov	fp, sp
   220cc:	sub	sp, sp, #8
   220d0:	str	r2, [fp, #8]
   220d4:	str	r3, [fp, #12]
   220d8:	mov	r2, #0
   220dc:	tst	r1, #64	; 0x40
   220e0:	ldrne	r2, [fp, #8]
   220e4:	bl	127e8 <open64@plt>
   220e8:	bl	2b158 <__assert_fail@plt+0x18568>
   220ec:	mov	sp, fp
   220f0:	pop	{fp, lr}
   220f4:	add	sp, sp, #8
   220f8:	bx	lr
   220fc:	push	{r4, r5, fp, lr}
   22100:	add	fp, sp, #8
   22104:	mov	r4, r1
   22108:	mov	r5, r0
   2210c:	bl	221e0 <__assert_fail@plt+0xf5f0>
   22110:	mov	r1, #32
   22114:	strh	r1, [r4, #10]
   22118:	mov	r1, #119	; 0x77
   2211c:	tst	r5, #2
   22120:	mov	r2, #119	; 0x77
   22124:	movweq	r2, #45	; 0x2d
   22128:	strb	r2, [r4, #8]
   2212c:	mov	r2, #114	; 0x72
   22130:	tst	r5, #4
   22134:	mov	r3, #114	; 0x72
   22138:	movweq	r3, #45	; 0x2d
   2213c:	strb	r3, [r4, #7]
   22140:	tst	r5, #16
   22144:	mov	r3, #119	; 0x77
   22148:	movweq	r3, #45	; 0x2d
   2214c:	strb	r3, [r4, #5]
   22150:	tst	r5, #32
   22154:	mov	r3, #114	; 0x72
   22158:	movweq	r3, #45	; 0x2d
   2215c:	strb	r3, [r4, #4]
   22160:	tst	r5, #128	; 0x80
   22164:	movweq	r1, #45	; 0x2d
   22168:	strb	r1, [r4, #2]
   2216c:	tst	r5, #256	; 0x100
   22170:	movweq	r2, #45	; 0x2d
   22174:	strb	r2, [r4, #1]
   22178:	strb	r0, [r4]
   2217c:	ands	r0, r5, #1
   22180:	mov	r0, #45	; 0x2d
   22184:	mov	r1, #45	; 0x2d
   22188:	movwne	r1, #120	; 0x78
   2218c:	mov	r2, #84	; 0x54
   22190:	movwne	r2, #116	; 0x74
   22194:	tst	r5, #512	; 0x200
   22198:	moveq	r2, r1
   2219c:	strb	r2, [r4, #9]
   221a0:	ands	r1, r5, #8
   221a4:	mov	r1, #45	; 0x2d
   221a8:	movwne	r1, #120	; 0x78
   221ac:	mov	r2, #83	; 0x53
   221b0:	mov	r3, #83	; 0x53
   221b4:	movwne	r3, #115	; 0x73
   221b8:	tst	r5, #1024	; 0x400
   221bc:	moveq	r3, r1
   221c0:	strb	r3, [r4, #6]
   221c4:	ands	r1, r5, #64	; 0x40
   221c8:	movwne	r0, #120	; 0x78
   221cc:	movwne	r2, #115	; 0x73
   221d0:	tst	r5, #2048	; 0x800
   221d4:	moveq	r2, r0
   221d8:	strb	r2, [r4, #3]
   221dc:	pop	{r4, r5, fp, pc}
   221e0:	and	r0, r0, #61440	; 0xf000
   221e4:	sub	r0, r0, #4096	; 0x1000
   221e8:	lsr	r1, r0, #12
   221ec:	cmp	r1, #11
   221f0:	bhi	22240 <__assert_fail@plt+0xf650>
   221f4:	mov	r0, #45	; 0x2d
   221f8:	add	r2, pc, #0
   221fc:	ldr	pc, [r2, r1, lsl #2]
   22200:	andeq	r2, r2, r0, lsr r2
   22204:	andeq	r2, r2, r8, lsr r2
   22208:	andeq	r2, r2, r0, asr #4
   2220c:	andeq	r2, r2, r8, asr #4
   22210:	andeq	r2, r2, r0, asr #4
   22214:	andeq	r2, r2, r0, ror #4
   22218:	andeq	r2, r2, r0, asr #4
   2221c:	andeq	r2, r2, r4, asr #4
   22220:	andeq	r2, r2, r0, asr #4
   22224:	andeq	r2, r2, r0, asr r2
   22228:	andeq	r2, r2, r0, asr #4
   2222c:	andeq	r2, r2, r8, asr r2
   22230:	mov	r0, #112	; 0x70
   22234:	bx	lr
   22238:	mov	r0, #99	; 0x63
   2223c:	bx	lr
   22240:	mov	r0, #63	; 0x3f
   22244:	bx	lr
   22248:	mov	r0, #100	; 0x64
   2224c:	bx	lr
   22250:	mov	r0, #108	; 0x6c
   22254:	bx	lr
   22258:	mov	r0, #115	; 0x73
   2225c:	bx	lr
   22260:	mov	r0, #98	; 0x62
   22264:	bx	lr
   22268:	ldr	r0, [r0, #16]
   2226c:	b	220fc <__assert_fail@plt+0xf50c>
   22270:	push	{r4, r5, r6, r7, fp, lr}
   22274:	add	fp, sp, #16
   22278:	mov	r5, r1
   2227c:	bl	12ae8 <fopen64@plt>
   22280:	mov	r4, #0
   22284:	cmp	r0, #0
   22288:	beq	222f0 <__assert_fail@plt+0xf700>
   2228c:	mov	r6, r0
   22290:	bl	1298c <fileno@plt>
   22294:	cmp	r0, #2
   22298:	bhi	222f8 <__assert_fail@plt+0xf708>
   2229c:	bl	2b14c <__assert_fail@plt+0x1855c>
   222a0:	cmn	r0, #1
   222a4:	ble	22300 <__assert_fail@plt+0xf710>
   222a8:	mov	r7, r0
   222ac:	mov	r0, r6
   222b0:	bl	129d4 <fclose@plt>
   222b4:	cmp	r0, #0
   222b8:	bne	222d4 <__assert_fail@plt+0xf6e4>
   222bc:	mov	r0, r7
   222c0:	mov	r1, r5
   222c4:	bl	12464 <fdopen@plt>
   222c8:	mov	r4, r0
   222cc:	cmp	r0, #0
   222d0:	bne	222f0 <__assert_fail@plt+0xf700>
   222d4:	bl	12908 <__errno_location@plt>
   222d8:	mov	r4, r0
   222dc:	ldr	r5, [r0]
   222e0:	mov	r0, r7
   222e4:	bl	12ba8 <close@plt>
   222e8:	str	r5, [r4]
   222ec:	mov	r4, #0
   222f0:	mov	r0, r4
   222f4:	pop	{r4, r5, r6, r7, fp, pc}
   222f8:	mov	r0, r6
   222fc:	pop	{r4, r5, r6, r7, fp, pc}
   22300:	bl	12908 <__errno_location@plt>
   22304:	mov	r5, r0
   22308:	ldr	r7, [r0]
   2230c:	mov	r0, r6
   22310:	bl	129d4 <fclose@plt>
   22314:	str	r7, [r5]
   22318:	mov	r0, r4
   2231c:	pop	{r4, r5, r6, r7, fp, pc}
   22320:	ldr	r0, [r0, #8]
   22324:	bx	lr
   22328:	ldr	r0, [r0, #12]
   2232c:	bx	lr
   22330:	ldr	r0, [r0, #16]
   22334:	bx	lr
   22338:	mov	r2, r0
   2233c:	ldm	r0, {r1, r3}
   22340:	mov	r0, #0
   22344:	cmp	r1, r3
   22348:	bxcs	lr
   2234c:	ldr	ip, [r2, #4]
   22350:	mov	r0, #0
   22354:	b	22364 <__assert_fail@plt+0xf774>
   22358:	add	r1, r1, #8
   2235c:	cmp	r1, ip
   22360:	bcs	22394 <__assert_fail@plt+0xf7a4>
   22364:	ldr	r2, [r1]
   22368:	cmp	r2, #0
   2236c:	beq	22358 <__assert_fail@plt+0xf768>
   22370:	mov	r3, #0
   22374:	mov	r2, r1
   22378:	add	r3, r3, #1
   2237c:	ldr	r2, [r2, #4]
   22380:	cmp	r2, #0
   22384:	bne	22378 <__assert_fail@plt+0xf788>
   22388:	cmp	r3, r0
   2238c:	movhi	r0, r3
   22390:	b	22358 <__assert_fail@plt+0xf768>
   22394:	bx	lr
   22398:	push	{fp, lr}
   2239c:	mov	fp, sp
   223a0:	ldr	r3, [r0]
   223a4:	ldr	r1, [r0, #4]
   223a8:	mov	lr, #0
   223ac:	cmp	r3, r1
   223b0:	mov	r1, #0
   223b4:	bcs	223fc <__assert_fail@plt+0xf80c>
   223b8:	ldr	ip, [r0, #4]
   223bc:	mov	r1, #0
   223c0:	mov	lr, #0
   223c4:	b	223d4 <__assert_fail@plt+0xf7e4>
   223c8:	add	r3, r3, #8
   223cc:	cmp	r3, ip
   223d0:	bcs	223fc <__assert_fail@plt+0xf80c>
   223d4:	ldr	r2, [r3]
   223d8:	cmp	r2, #0
   223dc:	beq	223c8 <__assert_fail@plt+0xf7d8>
   223e0:	mov	r2, r3
   223e4:	add	r1, r1, #1
   223e8:	ldr	r2, [r2, #4]
   223ec:	cmp	r2, #0
   223f0:	bne	223e4 <__assert_fail@plt+0xf7f4>
   223f4:	add	lr, lr, #1
   223f8:	b	223c8 <__assert_fail@plt+0xf7d8>
   223fc:	ldr	r2, [r0, #12]
   22400:	cmp	lr, r2
   22404:	bne	2241c <__assert_fail@plt+0xf82c>
   22408:	ldr	r2, [r0, #16]
   2240c:	mov	r0, #1
   22410:	cmp	r1, r2
   22414:	movne	r0, #0
   22418:	pop	{fp, pc}
   2241c:	mov	r0, #0
   22420:	pop	{fp, pc}
   22424:	nop	{0}
   22428:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2242c:	add	fp, sp, #24
   22430:	sub	sp, sp, #8
   22434:	mov	r4, r1
   22438:	mov	r5, r0
   2243c:	bl	22330 <__assert_fail@plt+0xf740>
   22440:	mov	r8, r0
   22444:	mov	r0, r5
   22448:	bl	22320 <__assert_fail@plt+0xf730>
   2244c:	mov	r7, r0
   22450:	mov	r0, r5
   22454:	bl	22328 <__assert_fail@plt+0xf738>
   22458:	mov	r6, r0
   2245c:	mov	r0, r5
   22460:	bl	22338 <__assert_fail@plt+0xf748>
   22464:	mov	r5, r0
   22468:	movw	r1, #13609	; 0x3529
   2246c:	movt	r1, #4
   22470:	mov	r0, r4
   22474:	mov	r2, r8
   22478:	bl	128fc <fprintf@plt>
   2247c:	movw	r1, #13633	; 0x3541
   22480:	movt	r1, #4
   22484:	mov	r0, r4
   22488:	mov	r2, r7
   2248c:	bl	128fc <fprintf@plt>
   22490:	vldr	d16, [pc, #72]	; 224e0 <__assert_fail@plt+0xf8f0>
   22494:	vmov	s0, r6
   22498:	vmov	s2, r7
   2249c:	vcvt.f64.u32	d17, s0
   224a0:	vcvt.f64.u32	d18, s2
   224a4:	vmul.f64	d16, d17, d16
   224a8:	vdiv.f64	d16, d16, d18
   224ac:	vstr	d16, [sp]
   224b0:	movw	r1, #13657	; 0x3559
   224b4:	movt	r1, #4
   224b8:	mov	r0, r4
   224bc:	mov	r2, r6
   224c0:	bl	128fc <fprintf@plt>
   224c4:	movw	r1, #13690	; 0x357a
   224c8:	movt	r1, #4
   224cc:	mov	r0, r4
   224d0:	mov	r2, r5
   224d4:	sub	sp, fp, #24
   224d8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   224dc:	b	128fc <fprintf@plt>
   224e0:	andeq	r0, r0, r0
   224e4:	subsmi	r0, r9, r0
   224e8:	push	{r4, r5, r6, r7, fp, lr}
   224ec:	add	fp, sp, #16
   224f0:	mov	r5, r1
   224f4:	mov	r6, r0
   224f8:	bl	22558 <__assert_fail@plt+0xf968>
   224fc:	mov	r7, r0
   22500:	ldr	r0, [r0]
   22504:	mov	r4, #0
   22508:	cmp	r0, #0
   2250c:	beq	22544 <__assert_fail@plt+0xf954>
   22510:	cmp	r7, #0
   22514:	beq	22544 <__assert_fail@plt+0xf954>
   22518:	ldr	r1, [r7]
   2251c:	cmp	r1, r5
   22520:	beq	2254c <__assert_fail@plt+0xf95c>
   22524:	ldr	r2, [r6, #28]
   22528:	mov	r0, r5
   2252c:	blx	r2
   22530:	cmp	r0, #0
   22534:	bne	2254c <__assert_fail@plt+0xf95c>
   22538:	ldr	r7, [r7, #4]
   2253c:	cmp	r7, #0
   22540:	bne	22518 <__assert_fail@plt+0xf928>
   22544:	mov	r0, r4
   22548:	pop	{r4, r5, r6, r7, fp, pc}
   2254c:	ldr	r4, [r7]
   22550:	mov	r0, r4
   22554:	pop	{r4, r5, r6, r7, fp, pc}
   22558:	push	{r4, sl, fp, lr}
   2255c:	add	fp, sp, #8
   22560:	mov	r2, r1
   22564:	mov	r4, r0
   22568:	ldr	r1, [r0, #8]
   2256c:	ldr	r3, [r0, #24]
   22570:	mov	r0, r2
   22574:	blx	r3
   22578:	ldr	r1, [r4, #8]
   2257c:	cmp	r0, r1
   22580:	ldrcc	r1, [r4]
   22584:	addcc	r0, r1, r0, lsl #3
   22588:	popcc	{r4, sl, fp, pc}
   2258c:	bl	12b9c <abort@plt>
   22590:	push	{fp, lr}
   22594:	mov	fp, sp
   22598:	ldr	r1, [r0, #16]
   2259c:	cmp	r1, #0
   225a0:	beq	225c8 <__assert_fail@plt+0xf9d8>
   225a4:	ldr	r2, [r0]
   225a8:	ldr	r1, [r0, #4]
   225ac:	cmp	r2, r1
   225b0:	bcs	225d4 <__assert_fail@plt+0xf9e4>
   225b4:	ldr	r1, [r2], #8
   225b8:	cmp	r1, #0
   225bc:	beq	225a8 <__assert_fail@plt+0xf9b8>
   225c0:	mov	r0, r1
   225c4:	pop	{fp, pc}
   225c8:	mov	r1, #0
   225cc:	mov	r0, r1
   225d0:	pop	{fp, pc}
   225d4:	bl	12b9c <abort@plt>
   225d8:	push	{r4, r5, fp, lr}
   225dc:	add	fp, sp, #8
   225e0:	mov	r5, r1
   225e4:	mov	r4, r0
   225e8:	bl	22558 <__assert_fail@plt+0xf968>
   225ec:	mov	r1, r0
   225f0:	b	22600 <__assert_fail@plt+0xfa10>
   225f4:	ldr	r1, [r1, #4]
   225f8:	cmp	r1, #0
   225fc:	beq	22620 <__assert_fail@plt+0xfa30>
   22600:	ldr	r2, [r1]
   22604:	cmp	r2, r5
   22608:	bne	225f4 <__assert_fail@plt+0xfa04>
   2260c:	ldr	r2, [r1, #4]
   22610:	cmp	r2, #0
   22614:	beq	225f4 <__assert_fail@plt+0xfa04>
   22618:	ldr	r0, [r2]
   2261c:	pop	{r4, r5, fp, pc}
   22620:	add	r1, r0, #8
   22624:	ldr	r2, [r4, #4]
   22628:	cmp	r1, r2
   2262c:	bcs	22640 <__assert_fail@plt+0xfa50>
   22630:	ldr	r0, [r1], #8
   22634:	cmp	r0, #0
   22638:	beq	22628 <__assert_fail@plt+0xfa38>
   2263c:	pop	{r4, r5, fp, pc}
   22640:	mov	r0, #0
   22644:	pop	{r4, r5, fp, pc}
   22648:	push	{r4, sl, fp, lr}
   2264c:	add	fp, sp, #8
   22650:	mov	ip, r0
   22654:	ldr	lr, [r0]
   22658:	ldr	r3, [r0, #4]
   2265c:	mov	r0, #0
   22660:	cmp	lr, r3
   22664:	popcs	{r4, sl, fp, pc}
   22668:	mov	r0, #0
   2266c:	b	22680 <__assert_fail@plt+0xfa90>
   22670:	ldr	r3, [ip, #4]
   22674:	add	lr, lr, #8
   22678:	cmp	lr, r3
   2267c:	bcs	226b8 <__assert_fail@plt+0xfac8>
   22680:	ldr	r3, [lr]
   22684:	cmp	r3, #0
   22688:	cmpne	lr, #0
   2268c:	beq	22670 <__assert_fail@plt+0xfa80>
   22690:	mov	r3, lr
   22694:	cmp	r0, r2
   22698:	bcs	226b8 <__assert_fail@plt+0xfac8>
   2269c:	ldr	r4, [r3]
   226a0:	str	r4, [r1, r0, lsl #2]
   226a4:	add	r0, r0, #1
   226a8:	ldr	r3, [r3, #4]
   226ac:	cmp	r3, #0
   226b0:	bne	22694 <__assert_fail@plt+0xfaa4>
   226b4:	b	22670 <__assert_fail@plt+0xfa80>
   226b8:	pop	{r4, sl, fp, pc}
   226bc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   226c0:	add	fp, sp, #24
   226c4:	mov	r8, r0
   226c8:	ldr	r9, [r0]
   226cc:	ldr	r0, [r0, #4]
   226d0:	mov	r6, #0
   226d4:	cmp	r9, r0
   226d8:	bcs	22738 <__assert_fail@plt+0xfb48>
   226dc:	mov	r4, r2
   226e0:	mov	r5, r1
   226e4:	mov	r6, #0
   226e8:	b	226fc <__assert_fail@plt+0xfb0c>
   226ec:	ldr	r0, [r8, #4]
   226f0:	add	r9, r9, #8
   226f4:	cmp	r9, r0
   226f8:	bcs	22738 <__assert_fail@plt+0xfb48>
   226fc:	ldr	r0, [r9]
   22700:	cmp	r0, #0
   22704:	cmpne	r9, #0
   22708:	beq	226ec <__assert_fail@plt+0xfafc>
   2270c:	mov	r7, r9
   22710:	ldr	r0, [r7]
   22714:	mov	r1, r4
   22718:	blx	r5
   2271c:	cmp	r0, #0
   22720:	beq	22738 <__assert_fail@plt+0xfb48>
   22724:	add	r6, r6, #1
   22728:	ldr	r7, [r7, #4]
   2272c:	cmp	r7, #0
   22730:	bne	22710 <__assert_fail@plt+0xfb20>
   22734:	b	226ec <__assert_fail@plt+0xfafc>
   22738:	mov	r0, r6
   2273c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22740:	ldrb	r2, [r0]
   22744:	cmp	r2, #0
   22748:	moveq	r0, #0
   2274c:	bxeq	lr
   22750:	add	r3, r0, #1
   22754:	mov	r0, #0
   22758:	rsb	r0, r0, r0, lsl #5
   2275c:	uxtab	r0, r0, r2
   22760:	udiv	r2, r0, r1
   22764:	mls	r0, r2, r1, r0
   22768:	ldrb	r2, [r3], #1
   2276c:	cmp	r2, #0
   22770:	bne	22758 <__assert_fail@plt+0xfb68>
   22774:	bx	lr
   22778:	movw	r1, #13720	; 0x3598
   2277c:	movt	r1, #4
   22780:	vld1.32	{d16-d17}, [r1]!
   22784:	vst1.32	{d16-d17}, [r0]!
   22788:	ldr	r1, [r1]
   2278c:	str	r1, [r0]
   22790:	bx	lr
   22794:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22798:	add	fp, sp, #28
   2279c:	sub	sp, sp, #4
   227a0:	mov	r7, r1
   227a4:	mov	r8, r0
   227a8:	movw	sl, #10388	; 0x2894
   227ac:	movt	sl, #2
   227b0:	cmp	r3, #0
   227b4:	movne	sl, r3
   227b8:	movw	r5, #10356	; 0x2874
   227bc:	movt	r5, #2
   227c0:	cmp	r2, #0
   227c4:	movne	r5, r2
   227c8:	mov	r0, #40	; 0x28
   227cc:	bl	2ed88 <__assert_fail@plt+0x1c198>
   227d0:	mov	r9, #0
   227d4:	cmp	r0, #0
   227d8:	beq	22868 <__assert_fail@plt+0xfc78>
   227dc:	mov	r4, r0
   227e0:	movw	r6, #13720	; 0x3598
   227e4:	movt	r6, #4
   227e8:	cmp	r7, #0
   227ec:	movne	r6, r7
   227f0:	str	r6, [r0, #20]
   227f4:	bl	228a4 <__assert_fail@plt+0xfcb4>
   227f8:	cmp	r0, #0
   227fc:	beq	22860 <__assert_fail@plt+0xfc70>
   22800:	mov	r0, r8
   22804:	mov	r1, r6
   22808:	bl	22950 <__assert_fail@plt+0xfd60>
   2280c:	str	r0, [r4, #8]
   22810:	cmp	r0, #0
   22814:	beq	22860 <__assert_fail@plt+0xfc70>
   22818:	mov	r1, #8
   2281c:	bl	2c4f4 <__assert_fail@plt+0x19904>
   22820:	str	r0, [r4]
   22824:	cmp	r0, #0
   22828:	beq	22860 <__assert_fail@plt+0xfc70>
   2282c:	ldr	r1, [fp, #8]
   22830:	mov	r2, #0
   22834:	str	r5, [r4, #24]
   22838:	str	sl, [r4, #28]
   2283c:	str	r1, [r4, #32]
   22840:	str	r2, [r4, #36]	; 0x24
   22844:	str	r2, [r4, #12]
   22848:	str	r2, [r4, #16]
   2284c:	ldr	r1, [r4, #8]
   22850:	add	r0, r0, r1, lsl #3
   22854:	str	r0, [r4, #4]
   22858:	mov	r9, r4
   2285c:	b	22868 <__assert_fail@plt+0xfc78>
   22860:	mov	r0, r4
   22864:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   22868:	mov	r0, r9
   2286c:	sub	sp, fp, #28
   22870:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22874:	push	{r4, sl, fp, lr}
   22878:	add	fp, sp, #8
   2287c:	mov	r4, r1
   22880:	mov	r1, #3
   22884:	bl	3d878 <__assert_fail@plt+0x2ac88>
   22888:	udiv	r1, r0, r4
   2288c:	mls	r0, r1, r4, r0
   22890:	pop	{r4, sl, fp, pc}
   22894:	sub	r0, r0, r1
   22898:	clz	r0, r0
   2289c:	lsr	r0, r0, #5
   228a0:	bx	lr
   228a4:	mov	r1, r0
   228a8:	ldr	r3, [r0, #20]
   228ac:	mov	r0, #1
   228b0:	movw	r2, #13720	; 0x3598
   228b4:	movt	r2, #4
   228b8:	cmp	r3, r2
   228bc:	beq	22940 <__assert_fail@plt+0xfd50>
   228c0:	vldr	s2, [pc, #124]	; 22944 <__assert_fail@plt+0xfd54>
   228c4:	vldr	s0, [r3, #8]
   228c8:	vcmpe.f32	s0, s2
   228cc:	vmrs	APSR_nzcv, fpscr
   228d0:	ble	22938 <__assert_fail@plt+0xfd48>
   228d4:	vldr	s4, [pc, #108]	; 22948 <__assert_fail@plt+0xfd58>
   228d8:	vcmpe.f32	s0, s4
   228dc:	vmrs	APSR_nzcv, fpscr
   228e0:	bpl	22938 <__assert_fail@plt+0xfd48>
   228e4:	vldr	s4, [pc, #96]	; 2294c <__assert_fail@plt+0xfd5c>
   228e8:	vldr	s6, [r3, #12]
   228ec:	vcmpe.f32	s6, s4
   228f0:	vmrs	APSR_nzcv, fpscr
   228f4:	ble	22938 <__assert_fail@plt+0xfd48>
   228f8:	vldr	s4, [r3]
   228fc:	vcmpe.f32	s4, #0.0
   22900:	vmrs	APSR_nzcv, fpscr
   22904:	blt	22938 <__assert_fail@plt+0xfd48>
   22908:	vadd.f32	s2, s4, s2
   2290c:	vcmpe.f32	s2, s0
   22910:	vmrs	APSR_nzcv, fpscr
   22914:	bpl	22938 <__assert_fail@plt+0xfd48>
   22918:	vldr	s0, [r3, #4]
   2291c:	vmov.f32	s4, #112	; 0x3f800000  1.0
   22920:	vcmpe.f32	s0, s4
   22924:	vmrs	APSR_nzcv, fpscr
   22928:	bhi	22938 <__assert_fail@plt+0xfd48>
   2292c:	vcmpe.f32	s2, s0
   22930:	vmrs	APSR_nzcv, fpscr
   22934:	bxmi	lr
   22938:	str	r2, [r1, #20]
   2293c:	mov	r0, #0
   22940:	bx	lr
   22944:	stclcc	12, cr12, [ip, #820]	; 0x334
   22948:	svccc	0x00666666
   2294c:	svccc	0x008ccccd
   22950:	push	{fp, lr}
   22954:	mov	fp, sp
   22958:	ldrb	r2, [r1, #16]
   2295c:	cmp	r2, #0
   22960:	bne	22990 <__assert_fail@plt+0xfda0>
   22964:	vldr	s0, [r1, #8]
   22968:	vmov	s2, r0
   2296c:	vcvt.f32.u32	s2, s2
   22970:	vdiv.f32	s2, s2, s0
   22974:	vcvt.u32.f32	s0, s2
   22978:	vldr	s4, [pc, #32]	; 229a0 <__assert_fail@plt+0xfdb0>
   2297c:	mov	r0, #0
   22980:	vcmpe.f32	s2, s4
   22984:	vmrs	APSR_nzcv, fpscr
   22988:	popge	{fp, pc}
   2298c:	vmov	r0, s0
   22990:	bl	23184 <__assert_fail@plt+0x10594>
   22994:	cmn	r0, #-536870911	; 0xe0000001
   22998:	movwhi	r0, #0
   2299c:	pop	{fp, pc}
   229a0:	svcmi	0x00800000
   229a4:	push	{r4, r5, r6, r7, fp, lr}
   229a8:	add	fp, sp, #16
   229ac:	mov	r4, r0
   229b0:	ldr	r5, [r0]
   229b4:	ldr	r0, [r0, #4]
   229b8:	cmp	r5, r0
   229bc:	bcs	22a60 <__assert_fail@plt+0xfe70>
   229c0:	mov	r6, #0
   229c4:	b	229e0 <__assert_fail@plt+0xfdf0>
   229c8:	str	r6, [r5]
   229cc:	str	r6, [r5, #4]
   229d0:	ldr	r0, [r4, #4]
   229d4:	add	r5, r5, #8
   229d8:	cmp	r5, r0
   229dc:	bcs	22a60 <__assert_fail@plt+0xfe70>
   229e0:	ldr	r0, [r5]
   229e4:	cmp	r0, #0
   229e8:	beq	229d0 <__assert_fail@plt+0xfde0>
   229ec:	ldr	r7, [r5, #4]
   229f0:	ldr	r1, [r4, #32]
   229f4:	cmp	r1, #0
   229f8:	mov	r0, r1
   229fc:	movwne	r0, #1
   22a00:	cmp	r7, #0
   22a04:	bne	22a4c <__assert_fail@plt+0xfe5c>
   22a08:	cmp	r0, #0
   22a0c:	beq	229c8 <__assert_fail@plt+0xfdd8>
   22a10:	ldr	r0, [r5]
   22a14:	blx	r1
   22a18:	b	229c8 <__assert_fail@plt+0xfdd8>
   22a1c:	str	r6, [r7]
   22a20:	ldr	r2, [r7, #4]
   22a24:	ldr	r0, [r4, #36]	; 0x24
   22a28:	str	r0, [r7, #4]
   22a2c:	str	r7, [r4, #36]	; 0x24
   22a30:	ldr	r1, [r4, #32]
   22a34:	cmp	r1, #0
   22a38:	mov	r0, r1
   22a3c:	movwne	r0, #1
   22a40:	cmp	r2, #0
   22a44:	mov	r7, r2
   22a48:	beq	22a08 <__assert_fail@plt+0xfe18>
   22a4c:	tst	r0, #1
   22a50:	beq	22a1c <__assert_fail@plt+0xfe2c>
   22a54:	ldr	r0, [r7]
   22a58:	blx	r1
   22a5c:	b	22a1c <__assert_fail@plt+0xfe2c>
   22a60:	mov	r0, #0
   22a64:	str	r0, [r4, #12]
   22a68:	str	r0, [r4, #16]
   22a6c:	pop	{r4, r5, r6, r7, fp, pc}
   22a70:	push	{r4, r5, r6, sl, fp, lr}
   22a74:	add	fp, sp, #16
   22a78:	mov	r4, r0
   22a7c:	ldr	r0, [r0, #32]
   22a80:	cmp	r0, #0
   22a84:	beq	22ae8 <__assert_fail@plt+0xfef8>
   22a88:	ldr	r0, [r4, #16]
   22a8c:	cmp	r0, #0
   22a90:	beq	22ae8 <__assert_fail@plt+0xfef8>
   22a94:	ldr	r5, [r4]
   22a98:	ldr	r0, [r4, #4]
   22a9c:	cmp	r5, r0
   22aa0:	bcc	22ab8 <__assert_fail@plt+0xfec8>
   22aa4:	b	22ae8 <__assert_fail@plt+0xfef8>
   22aa8:	ldr	r0, [r4, #4]
   22aac:	add	r5, r5, #8
   22ab0:	cmp	r5, r0
   22ab4:	bcs	22ae8 <__assert_fail@plt+0xfef8>
   22ab8:	ldr	r0, [r5]
   22abc:	cmp	r0, #0
   22ac0:	cmpne	r5, #0
   22ac4:	beq	22aa8 <__assert_fail@plt+0xfeb8>
   22ac8:	mov	r6, r5
   22acc:	ldr	r0, [r6]
   22ad0:	ldr	r1, [r4, #32]
   22ad4:	blx	r1
   22ad8:	ldr	r6, [r6, #4]
   22adc:	cmp	r6, #0
   22ae0:	bne	22acc <__assert_fail@plt+0xfedc>
   22ae4:	b	22aa8 <__assert_fail@plt+0xfeb8>
   22ae8:	ldr	r5, [r4]
   22aec:	ldr	r0, [r4, #4]
   22af0:	cmp	r5, r0
   22af4:	bcc	22b0c <__assert_fail@plt+0xff1c>
   22af8:	b	22b30 <__assert_fail@plt+0xff40>
   22afc:	ldr	r0, [r4, #4]
   22b00:	add	r5, r5, #8
   22b04:	cmp	r5, r0
   22b08:	bcs	22b30 <__assert_fail@plt+0xff40>
   22b0c:	ldr	r0, [r5, #4]
   22b10:	cmp	r0, #0
   22b14:	beq	22afc <__assert_fail@plt+0xff0c>
   22b18:	ldr	r6, [r0, #4]
   22b1c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   22b20:	cmp	r6, #0
   22b24:	mov	r0, r6
   22b28:	bne	22b18 <__assert_fail@plt+0xff28>
   22b2c:	b	22afc <__assert_fail@plt+0xff0c>
   22b30:	ldr	r0, [r4, #36]	; 0x24
   22b34:	cmp	r0, #0
   22b38:	beq	22b50 <__assert_fail@plt+0xff60>
   22b3c:	ldr	r5, [r0, #4]
   22b40:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   22b44:	cmp	r5, #0
   22b48:	mov	r0, r5
   22b4c:	bne	22b3c <__assert_fail@plt+0xff4c>
   22b50:	ldr	r0, [r4]
   22b54:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   22b58:	mov	r0, r4
   22b5c:	pop	{r4, r5, r6, sl, fp, lr}
   22b60:	b	2cad4 <__assert_fail@plt+0x19ee4>
   22b64:	push	{r4, r5, r6, sl, fp, lr}
   22b68:	add	fp, sp, #16
   22b6c:	sub	sp, sp, #40	; 0x28
   22b70:	mov	r2, r1
   22b74:	mov	r4, r0
   22b78:	ldr	r1, [r0, #20]
   22b7c:	mov	r0, r2
   22b80:	bl	22950 <__assert_fail@plt+0xfd60>
   22b84:	mov	r5, #0
   22b88:	cmp	r0, #0
   22b8c:	beq	22c68 <__assert_fail@plt+0x10078>
   22b90:	mov	r6, r0
   22b94:	ldr	r0, [r4, #8]
   22b98:	cmp	r6, r0
   22b9c:	bne	22ba8 <__assert_fail@plt+0xffb8>
   22ba0:	mov	r5, #1
   22ba4:	b	22c68 <__assert_fail@plt+0x10078>
   22ba8:	mov	r0, r6
   22bac:	mov	r1, #8
   22bb0:	bl	2c4f4 <__assert_fail@plt+0x19904>
   22bb4:	str	r0, [sp]
   22bb8:	cmp	r0, #0
   22bbc:	beq	22c68 <__assert_fail@plt+0x10078>
   22bc0:	mov	r0, #0
   22bc4:	str	r0, [sp, #16]
   22bc8:	str	r0, [sp, #12]
   22bcc:	str	r6, [sp, #8]
   22bd0:	ldr	r0, [sp]
   22bd4:	add	r0, r0, r6, lsl #3
   22bd8:	str	r0, [sp, #4]
   22bdc:	add	r6, r4, #20
   22be0:	ldm	r6, {r0, r1, r2, r3, r6}
   22be4:	add	ip, sp, #20
   22be8:	stm	ip, {r0, r1, r2, r3, r6}
   22bec:	mov	r0, sp
   22bf0:	mov	r1, r4
   22bf4:	mov	r2, #0
   22bf8:	bl	22c78 <__assert_fail@plt+0x10088>
   22bfc:	cmp	r0, #0
   22c00:	beq	22c24 <__assert_fail@plt+0x10034>
   22c04:	ldr	r0, [r4]
   22c08:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   22c0c:	ldm	sp, {r0, r1, r2, r3}
   22c10:	stm	r4, {r0, r1, r2, r3}
   22c14:	ldr	r0, [sp, #36]	; 0x24
   22c18:	str	r0, [r4, #36]	; 0x24
   22c1c:	mov	r5, #1
   22c20:	b	22c68 <__assert_fail@plt+0x10078>
   22c24:	ldr	r0, [sp, #36]	; 0x24
   22c28:	str	r0, [r4, #36]	; 0x24
   22c2c:	mov	r1, sp
   22c30:	mov	r0, r4
   22c34:	mov	r2, #1
   22c38:	bl	22c78 <__assert_fail@plt+0x10088>
   22c3c:	cmp	r0, #0
   22c40:	beq	22c74 <__assert_fail@plt+0x10084>
   22c44:	mov	r1, sp
   22c48:	mov	r5, #0
   22c4c:	mov	r0, r4
   22c50:	mov	r2, #0
   22c54:	bl	22c78 <__assert_fail@plt+0x10088>
   22c58:	cmp	r0, #0
   22c5c:	beq	22c74 <__assert_fail@plt+0x10084>
   22c60:	ldr	r0, [sp]
   22c64:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   22c68:	mov	r0, r5
   22c6c:	sub	sp, fp, #16
   22c70:	pop	{r4, r5, r6, sl, fp, pc}
   22c74:	bl	12b9c <abort@plt>
   22c78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22c7c:	add	fp, sp, #28
   22c80:	sub	sp, sp, #4
   22c84:	mov	r7, r0
   22c88:	ldr	r6, [r1]
   22c8c:	ldr	r0, [r1, #4]
   22c90:	cmp	r6, r0
   22c94:	bcs	22da0 <__assert_fail@plt+0x101b0>
   22c98:	mov	r9, r2
   22c9c:	mov	sl, r1
   22ca0:	b	22cd8 <__assert_fail@plt+0x100e8>
   22ca4:	str	r4, [r5]
   22ca8:	ldr	r0, [r7, #12]
   22cac:	add	r0, r0, #1
   22cb0:	str	r0, [r7, #12]
   22cb4:	mov	r0, #0
   22cb8:	str	r0, [r6]
   22cbc:	ldr	r0, [sl, #12]
   22cc0:	sub	r0, r0, #1
   22cc4:	str	r0, [sl, #12]
   22cc8:	add	r6, r6, #8
   22ccc:	ldr	r0, [sl, #4]
   22cd0:	cmp	r6, r0
   22cd4:	bcs	22da0 <__assert_fail@plt+0x101b0>
   22cd8:	ldr	r0, [r6]
   22cdc:	cmp	r0, #0
   22ce0:	beq	22cc8 <__assert_fail@plt+0x100d8>
   22ce4:	ldr	r4, [r6, #4]
   22ce8:	cmp	r4, #0
   22cec:	bne	22d1c <__assert_fail@plt+0x1012c>
   22cf0:	b	22d4c <__assert_fail@plt+0x1015c>
   22cf4:	str	r5, [r0]
   22cf8:	ldr	r0, [r7, #12]
   22cfc:	add	r0, r0, #1
   22d00:	str	r0, [r7, #12]
   22d04:	mov	r0, r7
   22d08:	mov	r1, r4
   22d0c:	bl	23224 <__assert_fail@plt+0x10634>
   22d10:	cmp	r8, #0
   22d14:	mov	r4, r8
   22d18:	beq	22d4c <__assert_fail@plt+0x1015c>
   22d1c:	ldr	r5, [r4]
   22d20:	mov	r0, r7
   22d24:	mov	r1, r5
   22d28:	bl	22558 <__assert_fail@plt+0xf968>
   22d2c:	ldr	r1, [r0]
   22d30:	ldr	r8, [r4, #4]
   22d34:	cmp	r1, #0
   22d38:	beq	22cf4 <__assert_fail@plt+0x10104>
   22d3c:	ldr	r1, [r0, #4]
   22d40:	str	r1, [r4, #4]
   22d44:	str	r4, [r0, #4]
   22d48:	b	22d10 <__assert_fail@plt+0x10120>
   22d4c:	mov	r0, #0
   22d50:	str	r0, [r6, #4]
   22d54:	cmp	r9, #0
   22d58:	bne	22cc8 <__assert_fail@plt+0x100d8>
   22d5c:	ldr	r4, [r6]
   22d60:	mov	r0, r7
   22d64:	mov	r1, r4
   22d68:	bl	22558 <__assert_fail@plt+0xf968>
   22d6c:	mov	r5, r0
   22d70:	ldr	r0, [r0]
   22d74:	cmp	r0, #0
   22d78:	beq	22ca4 <__assert_fail@plt+0x100b4>
   22d7c:	mov	r0, r7
   22d80:	bl	23010 <__assert_fail@plt+0x10420>
   22d84:	cmp	r0, #0
   22d88:	beq	22dac <__assert_fail@plt+0x101bc>
   22d8c:	str	r4, [r0]
   22d90:	ldr	r1, [r5, #4]
   22d94:	str	r1, [r0, #4]
   22d98:	str	r0, [r5, #4]
   22d9c:	b	22cb4 <__assert_fail@plt+0x100c4>
   22da0:	mov	r0, #1
   22da4:	sub	sp, fp, #28
   22da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22dac:	mov	r0, #0
   22db0:	sub	sp, fp, #28
   22db4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22db8:	push	{r4, r5, r6, r7, fp, lr}
   22dbc:	add	fp, sp, #16
   22dc0:	sub	sp, sp, #8
   22dc4:	cmp	r1, #0
   22dc8:	beq	22f28 <__assert_fail@plt+0x10338>
   22dcc:	mov	r7, r2
   22dd0:	mov	r5, r1
   22dd4:	mov	r4, r0
   22dd8:	add	r2, sp, #4
   22ddc:	mov	r6, #0
   22de0:	mov	r3, #0
   22de4:	bl	22f30 <__assert_fail@plt+0x10340>
   22de8:	cmp	r0, #0
   22dec:	beq	22dfc <__assert_fail@plt+0x1020c>
   22df0:	cmp	r7, #0
   22df4:	strne	r0, [r7]
   22df8:	b	22f1c <__assert_fail@plt+0x1032c>
   22dfc:	vldr	s0, [r4, #8]
   22e00:	vldr	s2, [r4, #12]
   22e04:	ldr	r0, [r4, #20]
   22e08:	vldr	s4, [r0, #8]
   22e0c:	vcvt.f32.u32	s0, s0
   22e10:	vcvt.f32.u32	s2, s2
   22e14:	vmul.f32	s0, s4, s0
   22e18:	vcmpe.f32	s0, s2
   22e1c:	vmrs	APSR_nzcv, fpscr
   22e20:	bpl	22eb4 <__assert_fail@plt+0x102c4>
   22e24:	mov	r0, r4
   22e28:	bl	228a4 <__assert_fail@plt+0xfcb4>
   22e2c:	vldr	s0, [r4, #8]
   22e30:	vldr	s4, [r4, #12]
   22e34:	ldr	r0, [r4, #20]
   22e38:	vcvt.f32.u32	s2, s0
   22e3c:	vldr	s0, [r0, #8]
   22e40:	vcvt.f32.u32	s4, s4
   22e44:	vmul.f32	s6, s0, s2
   22e48:	vcmpe.f32	s6, s4
   22e4c:	vmrs	APSR_nzcv, fpscr
   22e50:	bpl	22eb4 <__assert_fail@plt+0x102c4>
   22e54:	vldr	s4, [r0, #12]
   22e58:	vmul.f32	s2, s4, s2
   22e5c:	ldrb	r0, [r0, #16]
   22e60:	vmul.f32	s0, s0, s2
   22e64:	mvn	r6, #0
   22e68:	vldr	s4, [pc, #188]	; 22f2c <__assert_fail@plt+0x1033c>
   22e6c:	cmp	r0, #0
   22e70:	vseleq.f32	s0, s0, s2
   22e74:	vcmpe.f32	s0, s4
   22e78:	vmrs	APSR_nzcv, fpscr
   22e7c:	bge	22f1c <__assert_fail@plt+0x1032c>
   22e80:	vcvt.u32.f32	s0, s0
   22e84:	vmov	r1, s0
   22e88:	mov	r0, r4
   22e8c:	bl	22b64 <__assert_fail@plt+0xff74>
   22e90:	cmp	r0, #0
   22e94:	beq	22f1c <__assert_fail@plt+0x1032c>
   22e98:	add	r2, sp, #4
   22e9c:	mov	r0, r4
   22ea0:	mov	r1, r5
   22ea4:	mov	r3, #0
   22ea8:	bl	22f30 <__assert_fail@plt+0x10340>
   22eac:	cmp	r0, #0
   22eb0:	bne	22f28 <__assert_fail@plt+0x10338>
   22eb4:	ldr	r6, [sp, #4]
   22eb8:	ldr	r0, [r6]
   22ebc:	cmp	r0, #0
   22ec0:	beq	22ef4 <__assert_fail@plt+0x10304>
   22ec4:	mov	r0, r4
   22ec8:	bl	23010 <__assert_fail@plt+0x10420>
   22ecc:	cmp	r0, #0
   22ed0:	beq	22f18 <__assert_fail@plt+0x10328>
   22ed4:	str	r5, [r0]
   22ed8:	ldr	r1, [r6, #4]
   22edc:	str	r1, [r0, #4]
   22ee0:	str	r0, [r6, #4]
   22ee4:	ldr	r0, [r4, #16]
   22ee8:	add	r0, r0, #1
   22eec:	str	r0, [r4, #16]
   22ef0:	b	22f10 <__assert_fail@plt+0x10320>
   22ef4:	str	r5, [r6]
   22ef8:	ldr	r0, [r4, #12]
   22efc:	ldr	r1, [r4, #16]
   22f00:	add	r1, r1, #1
   22f04:	add	r0, r0, #1
   22f08:	str	r0, [r4, #12]
   22f0c:	str	r1, [r4, #16]
   22f10:	mov	r6, #1
   22f14:	b	22f1c <__assert_fail@plt+0x1032c>
   22f18:	mvn	r6, #0
   22f1c:	mov	r0, r6
   22f20:	sub	sp, fp, #16
   22f24:	pop	{r4, r5, r6, r7, fp, pc}
   22f28:	bl	12b9c <abort@plt>
   22f2c:	svcmi	0x00800000
   22f30:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22f34:	add	fp, sp, #24
   22f38:	mov	r8, r3
   22f3c:	mov	r4, r2
   22f40:	mov	r7, r1
   22f44:	mov	r5, r0
   22f48:	bl	22558 <__assert_fail@plt+0xf968>
   22f4c:	str	r0, [r4]
   22f50:	ldr	r1, [r0]
   22f54:	mov	r4, #0
   22f58:	cmp	r1, #0
   22f5c:	beq	23008 <__assert_fail@plt+0x10418>
   22f60:	mov	r6, r0
   22f64:	cmp	r1, r7
   22f68:	beq	22f80 <__assert_fail@plt+0x10390>
   22f6c:	ldr	r2, [r5, #28]
   22f70:	mov	r0, r7
   22f74:	blx	r2
   22f78:	cmp	r0, #0
   22f7c:	beq	22fa4 <__assert_fail@plt+0x103b4>
   22f80:	ldr	r4, [r6]
   22f84:	cmp	r8, #0
   22f88:	beq	23008 <__assert_fail@plt+0x10418>
   22f8c:	ldr	r1, [r6, #4]
   22f90:	cmp	r1, #0
   22f94:	beq	23000 <__assert_fail@plt+0x10410>
   22f98:	ldm	r1, {r0, r2}
   22f9c:	stm	r6, {r0, r2}
   22fa0:	b	22ff0 <__assert_fail@plt+0x10400>
   22fa4:	ldr	r0, [r6, #4]!
   22fa8:	cmp	r0, #0
   22fac:	beq	23008 <__assert_fail@plt+0x10418>
   22fb0:	ldr	r1, [r0]
   22fb4:	cmp	r1, r7
   22fb8:	beq	22fd8 <__assert_fail@plt+0x103e8>
   22fbc:	ldr	r2, [r5, #28]
   22fc0:	mov	r0, r7
   22fc4:	blx	r2
   22fc8:	cmp	r0, #0
   22fcc:	bne	22fd8 <__assert_fail@plt+0x103e8>
   22fd0:	ldr	r6, [r6]
   22fd4:	b	22fa4 <__assert_fail@plt+0x103b4>
   22fd8:	ldr	r1, [r6]
   22fdc:	ldr	r4, [r1]
   22fe0:	cmp	r8, #0
   22fe4:	beq	23008 <__assert_fail@plt+0x10418>
   22fe8:	ldr	r0, [r1, #4]
   22fec:	str	r0, [r6]
   22ff0:	mov	r0, r5
   22ff4:	bl	23224 <__assert_fail@plt+0x10634>
   22ff8:	mov	r0, r4
   22ffc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23000:	mov	r0, #0
   23004:	str	r0, [r6]
   23008:	mov	r0, r4
   2300c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23010:	mov	r1, r0
   23014:	ldr	r0, [r0, #36]	; 0x24
   23018:	cmp	r0, #0
   2301c:	ldrne	r2, [r0, #4]
   23020:	strne	r2, [r1, #36]	; 0x24
   23024:	bxne	lr
   23028:	mov	r0, #8
   2302c:	b	2ed88 <__assert_fail@plt+0x1c198>
   23030:	push	{r4, sl, fp, lr}
   23034:	add	fp, sp, #8
   23038:	sub	sp, sp, #8
   2303c:	mov	r4, r1
   23040:	add	r2, sp, #4
   23044:	bl	22db8 <__assert_fail@plt+0x101c8>
   23048:	cmn	r0, #1
   2304c:	beq	23060 <__assert_fail@plt+0x10470>
   23050:	ldr	r1, [sp, #4]
   23054:	cmp	r0, #0
   23058:	moveq	r4, r1
   2305c:	b	23064 <__assert_fail@plt+0x10474>
   23060:	mov	r4, #0
   23064:	mov	r0, r4
   23068:	sub	sp, fp, #8
   2306c:	pop	{r4, sl, fp, pc}
   23070:	push	{r4, r5, r6, sl, fp, lr}
   23074:	add	fp, sp, #16
   23078:	sub	sp, sp, #8
   2307c:	mov	r4, r0
   23080:	add	r2, sp, #4
   23084:	mov	r3, #1
   23088:	bl	22f30 <__assert_fail@plt+0x10340>
   2308c:	mov	r5, r0
   23090:	cmp	r0, #0
   23094:	beq	23174 <__assert_fail@plt+0x10584>
   23098:	ldr	r0, [r4, #16]
   2309c:	sub	r0, r0, #1
   230a0:	str	r0, [r4, #16]
   230a4:	ldr	r0, [sp, #4]
   230a8:	ldr	r0, [r0]
   230ac:	cmp	r0, #0
   230b0:	bne	23174 <__assert_fail@plt+0x10584>
   230b4:	ldr	r0, [r4, #12]
   230b8:	sub	r0, r0, #1
   230bc:	vldr	s0, [r4, #8]
   230c0:	str	r0, [r4, #12]
   230c4:	ldr	r1, [r4, #20]
   230c8:	vldr	s2, [r1]
   230cc:	vcvt.f32.u32	s0, s0
   230d0:	vmov	s4, r0
   230d4:	vcvt.f32.u32	s4, s4
   230d8:	vmul.f32	s0, s2, s0
   230dc:	vcmpe.f32	s0, s4
   230e0:	vmrs	APSR_nzcv, fpscr
   230e4:	ble	23174 <__assert_fail@plt+0x10584>
   230e8:	mov	r0, r4
   230ec:	bl	228a4 <__assert_fail@plt+0xfcb4>
   230f0:	vldr	s0, [r4, #8]
   230f4:	vldr	s2, [r4, #12]
   230f8:	ldr	r0, [r4, #20]
   230fc:	vcvt.f32.u32	s0, s0
   23100:	vldr	s4, [r0]
   23104:	vcvt.f32.u32	s2, s2
   23108:	vmul.f32	s4, s4, s0
   2310c:	vcmpe.f32	s4, s2
   23110:	vmrs	APSR_nzcv, fpscr
   23114:	ble	23174 <__assert_fail@plt+0x10584>
   23118:	vldr	s2, [r0, #4]
   2311c:	ldrb	r1, [r0, #16]
   23120:	vmul.f32	s0, s2, s0
   23124:	cmp	r1, #0
   23128:	bne	23134 <__assert_fail@plt+0x10544>
   2312c:	vldr	s2, [r0, #8]
   23130:	vmul.f32	s0, s0, s2
   23134:	vcvt.u32.f32	s0, s0
   23138:	vmov	r1, s0
   2313c:	mov	r0, r4
   23140:	bl	22b64 <__assert_fail@plt+0xff74>
   23144:	cmp	r0, #0
   23148:	bne	23174 <__assert_fail@plt+0x10584>
   2314c:	ldr	r0, [r4, #36]	; 0x24
   23150:	cmp	r0, #0
   23154:	beq	2316c <__assert_fail@plt+0x1057c>
   23158:	ldr	r6, [r0, #4]
   2315c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   23160:	cmp	r6, #0
   23164:	mov	r0, r6
   23168:	bne	23158 <__assert_fail@plt+0x10568>
   2316c:	mov	r0, #0
   23170:	str	r0, [r4, #36]	; 0x24
   23174:	mov	r0, r5
   23178:	sub	sp, fp, #16
   2317c:	pop	{r4, r5, r6, sl, fp, pc}
   23180:	b	23070 <__assert_fail@plt+0x10480>
   23184:	push	{r4, r5, fp, lr}
   23188:	add	fp, sp, #8
   2318c:	cmp	r0, #10
   23190:	movls	r0, #10
   23194:	orr	r5, r0, #1
   23198:	mvn	r4, #0
   2319c:	cmn	r5, #1
   231a0:	beq	231c0 <__assert_fail@plt+0x105d0>
   231a4:	mov	r0, r5
   231a8:	bl	231d4 <__assert_fail@plt+0x105e4>
   231ac:	cmp	r0, #0
   231b0:	bne	231c8 <__assert_fail@plt+0x105d8>
   231b4:	add	r5, r5, #2
   231b8:	cmn	r5, #1
   231bc:	bne	231a4 <__assert_fail@plt+0x105b4>
   231c0:	mov	r0, r4
   231c4:	pop	{r4, r5, fp, pc}
   231c8:	mov	r4, r5
   231cc:	mov	r0, r4
   231d0:	pop	{r4, r5, fp, pc}
   231d4:	mov	ip, #3
   231d8:	cmp	r0, #10
   231dc:	bcc	23210 <__assert_fail@plt+0x10620>
   231e0:	mov	ip, #3
   231e4:	mov	r2, #9
   231e8:	mov	r3, #16
   231ec:	udiv	r1, r0, ip
   231f0:	mls	r1, r1, ip, r0
   231f4:	cmp	r1, #0
   231f8:	beq	23210 <__assert_fail@plt+0x10620>
   231fc:	add	r2, r3, r2
   23200:	add	r3, r3, #8
   23204:	add	ip, ip, #2
   23208:	cmp	r2, r0
   2320c:	bcc	231ec <__assert_fail@plt+0x105fc>
   23210:	udiv	r1, r0, ip
   23214:	mls	r0, r1, ip, r0
   23218:	cmp	r0, #0
   2321c:	movwne	r0, #1
   23220:	bx	lr
   23224:	mov	r2, #0
   23228:	str	r2, [r1]
   2322c:	ldr	r2, [r0, #36]	; 0x24
   23230:	str	r2, [r1, #4]
   23234:	str	r1, [r0, #36]	; 0x24
   23238:	bx	lr
   2323c:	andeq	r0, r0, r0
   23240:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23244:	add	fp, sp, #28
   23248:	sub	sp, sp, #4
   2324c:	vpush	{d8-d9}
   23250:	sub	sp, sp, #48	; 0x30
   23254:	mov	r5, r3
   23258:	mov	r7, r2
   2325c:	str	r1, [sp, #44]	; 0x2c
   23260:	str	r0, [sp, #40]	; 0x28
   23264:	bl	12a88 <localeconv@plt>
   23268:	mov	r4, r0
   2326c:	ldr	r6, [r0]
   23270:	mov	r0, r6
   23274:	bl	128c0 <strlen@plt>
   23278:	sub	r1, r0, #1
   2327c:	movw	r2, #64572	; 0xfc3c
   23280:	movt	r2, #3
   23284:	cmp	r1, #16
   23288:	movcc	r2, r6
   2328c:	str	r2, [sp, #4]
   23290:	movcs	r0, #1
   23294:	str	r0, [sp, #8]
   23298:	ldr	r6, [r4, #4]
   2329c:	ldr	r4, [r4, #8]
   232a0:	mov	r0, r6
   232a4:	bl	128c0 <strlen@plt>
   232a8:	movw	r1, #2407	; 0x967
   232ac:	movt	r1, #4
   232b0:	cmp	r0, #17
   232b4:	movcc	r1, r6
   232b8:	movw	r0, #647	; 0x287
   232bc:	str	r7, [sp, #28]
   232c0:	add	r0, r7, r0
   232c4:	str	r0, [sp, #32]
   232c8:	ands	r0, r5, #32
   232cc:	str	r0, [sp, #20]
   232d0:	mov	r6, #1000	; 0x3e8
   232d4:	movwne	r6, #1024	; 0x400
   232d8:	and	r7, r5, #3
   232dc:	ldr	r3, [fp, #20]
   232e0:	ldr	r2, [fp, #16]
   232e4:	ldr	r8, [fp, #12]
   232e8:	ldr	sl, [fp, #8]
   232ec:	subs	r0, sl, r2
   232f0:	sbcs	r0, r8, r3
   232f4:	str	r5, [sp, #36]	; 0x24
   232f8:	str	r4, [sp, #16]
   232fc:	str	r1, [sp, #12]
   23300:	str	r7, [sp, #24]
   23304:	bcs	23400 <__assert_fail@plt+0x10810>
   23308:	orrs	r0, sl, r8
   2330c:	beq	234f4 <__assert_fail@plt+0x10904>
   23310:	mov	r0, r2
   23314:	mov	r1, r3
   23318:	mov	r2, sl
   2331c:	mov	r3, r8
   23320:	bl	3e7d4 <__assert_fail@plt+0x2bbe4>
   23324:	ldr	r2, [fp, #16]
   23328:	ldr	r3, [fp, #20]
   2332c:	mov	r5, r0
   23330:	mov	r7, r1
   23334:	umull	r0, r1, r0, sl
   23338:	mla	r1, r5, r8, r1
   2333c:	mla	r1, r7, sl, r1
   23340:	subs	r0, r2, r0
   23344:	sbc	r1, r3, r1
   23348:	orrs	r0, r0, r1
   2334c:	bne	234f4 <__assert_fail@plt+0x10904>
   23350:	ldr	sl, [sp, #40]	; 0x28
   23354:	mov	r0, sl
   23358:	ldr	r4, [sp, #44]	; 0x2c
   2335c:	mov	r1, r4
   23360:	mov	r2, r5
   23364:	mov	r3, r7
   23368:	mov	r8, r7
   2336c:	bl	3e7d4 <__assert_fail@plt+0x2bbe4>
   23370:	mov	r9, r0
   23374:	mov	r7, r1
   23378:	umull	r0, r1, r0, r5
   2337c:	mla	r1, r9, r8, r1
   23380:	mla	r1, r7, r5, r1
   23384:	subs	r0, sl, r0
   23388:	sbc	r1, r4, r1
   2338c:	add	r1, r1, r1, lsl #2
   23390:	mov	r2, #10
   23394:	umull	r0, r2, r0, r2
   23398:	str	r0, [sp, #44]	; 0x2c
   2339c:	add	sl, r2, r1, lsl #1
   233a0:	mov	r1, sl
   233a4:	mov	r2, r5
   233a8:	mov	r3, r8
   233ac:	bl	3e7d4 <__assert_fail@plt+0x2bbe4>
   233b0:	mov	r4, r0
   233b4:	umull	r0, r2, r0, r5
   233b8:	mla	r2, r4, r8, r2
   233bc:	mla	r1, r1, r5, r2
   233c0:	ldr	r2, [sp, #44]	; 0x2c
   233c4:	subs	r0, r2, r0
   233c8:	sbc	r1, sl, r1
   233cc:	lsl	r1, r1, #1
   233d0:	orr	r1, r1, r0, lsr #31
   233d4:	mov	r2, #2
   233d8:	subs	r3, r5, r0, lsl #1
   233dc:	sbcs	r3, r8, r1
   233e0:	movwcc	r2, #3
   233e4:	orr	sl, r1, r0, lsl #1
   233e8:	cmp	sl, #0
   233ec:	movwne	sl, #1
   233f0:	rsbs	r0, r5, r0, lsl #1
   233f4:	sbcs	r0, r1, r8
   233f8:	movcs	sl, r2
   233fc:	b	23488 <__assert_fail@plt+0x10898>
   23400:	mov	r0, sl
   23404:	mov	r1, r8
   23408:	bl	3e7d4 <__assert_fail@plt+0x2bbe4>
   2340c:	ldr	r2, [fp, #16]
   23410:	ldr	r3, [fp, #20]
   23414:	mov	r4, r0
   23418:	mov	r5, r1
   2341c:	umull	r0, r1, r0, r2
   23420:	mla	r1, r4, r3, r1
   23424:	mla	r1, r5, r2, r1
   23428:	subs	r0, sl, r0
   2342c:	sbc	r1, r8, r1
   23430:	orrs	r0, r0, r1
   23434:	bne	234f4 <__assert_fail@plt+0x10904>
   23438:	ldr	r1, [sp, #40]	; 0x28
   2343c:	umull	r9, r0, r4, r1
   23440:	ldr	r2, [sp, #44]	; 0x2c
   23444:	mla	r0, r4, r2, r0
   23448:	mla	r7, r5, r1, r0
   2344c:	mov	r0, r9
   23450:	mov	r1, r7
   23454:	mov	r2, r4
   23458:	mov	r3, r5
   2345c:	bl	3e7d4 <__assert_fail@plt+0x2bbe4>
   23460:	ldr	r2, [fp, #16]
   23464:	ldr	r3, [fp, #20]
   23468:	ldr	r5, [sp, #44]	; 0x2c
   2346c:	eor	r1, r1, r5
   23470:	ldr	r5, [sp, #40]	; 0x28
   23474:	eor	r0, r0, r5
   23478:	orrs	r0, r0, r1
   2347c:	bne	234f4 <__assert_fail@plt+0x10904>
   23480:	mov	sl, #0
   23484:	mov	r4, #0
   23488:	ldr	r0, [sp, #36]	; 0x24
   2348c:	ands	ip, r0, #16
   23490:	mvn	r5, #0
   23494:	beq	234a8 <__assert_fail@plt+0x108b8>
   23498:	mov	r5, #0
   2349c:	subs	r0, r9, r6
   234a0:	sbcs	r0, r7, #0
   234a4:	bcs	236f4 <__assert_fail@plt+0x10b04>
   234a8:	ldr	r3, [sp, #32]
   234ac:	mov	r8, r9
   234b0:	ldr	r9, [sp, #24]
   234b4:	cmp	r9, #0
   234b8:	beq	23844 <__assert_fail@plt+0x10c54>
   234bc:	cmp	r9, #1
   234c0:	bne	236e8 <__assert_fail@plt+0x10af8>
   234c4:	mov	r0, #0
   234c8:	rsbs	r1, sl, #0
   234cc:	sbc	r0, r0, #0
   234d0:	and	r2, r8, #1
   234d4:	eor	r1, r2, r1
   234d8:	orrs	r0, r1, r0
   234dc:	addne	r4, r4, #1
   234e0:	cmp	r4, #5
   234e4:	ldr	r9, [sp, #32]
   234e8:	ldr	sl, [sp, #28]
   234ec:	bgt	23858 <__assert_fail@plt+0x10c68>
   234f0:	b	238b8 <__assert_fail@plt+0x10cc8>
   234f4:	mov	r0, r2
   234f8:	mov	r1, r3
   234fc:	bl	3e68c <__assert_fail@plt+0x2ba9c>
   23500:	vmov	d8, r0, r1
   23504:	ldr	r0, [sp, #40]	; 0x28
   23508:	ldr	r1, [sp, #44]	; 0x2c
   2350c:	bl	3e68c <__assert_fail@plt+0x2ba9c>
   23510:	mov	r5, r0
   23514:	mov	r7, r1
   23518:	mov	r0, sl
   2351c:	mov	r1, r8
   23520:	bl	3e68c <__assert_fail@plt+0x2ba9c>
   23524:	vmov	d16, r0, r1
   23528:	vmov	d17, r5, r7
   2352c:	vdiv.f64	d16, d16, d8
   23530:	vmul.f64	d0, d16, d17
   23534:	ldr	r8, [sp, #36]	; 0x24
   23538:	tst	r8, #16
   2353c:	bne	2357c <__assert_fail@plt+0x1098c>
   23540:	ldr	r0, [sp, #24]
   23544:	bl	239c8 <__assert_fail@plt+0x10dd8>
   23548:	vmov	r2, r3, d0
   2354c:	movw	r1, #13740	; 0x35ac
   23550:	movt	r1, #4
   23554:	ldr	sl, [sp, #28]
   23558:	mov	r0, sl
   2355c:	bl	12a94 <sprintf@plt>
   23560:	mov	r0, sl
   23564:	bl	128c0 <strlen@plt>
   23568:	mov	r2, r0
   2356c:	mov	r7, #0
   23570:	mvn	r5, #0
   23574:	ldr	r9, [sp, #32]
   23578:	b	2365c <__assert_fail@plt+0x10a6c>
   2357c:	vmov.f64	d16, #112	; 0x3f800000  1.0
   23580:	vmov	s2, r6
   23584:	vcvt.f64.u32	d17, s2
   23588:	mov	r5, #0
   2358c:	vmul.f64	d16, d16, d17
   23590:	add	r5, r5, #1
   23594:	cmp	r5, #7
   23598:	vmulls.f64	d18, d16, d17
   2359c:	vcmpels.f64	d18, d0
   235a0:	vmrsls	APSR_nzcv, fpscr
   235a4:	bls	2358c <__assert_fail@plt+0x1099c>
   235a8:	vdiv.f64	d8, d0, d16
   235ac:	ldr	r9, [sp, #24]
   235b0:	mov	r0, r9
   235b4:	vmov.f64	d0, d8
   235b8:	bl	239c8 <__assert_fail@plt+0x10dd8>
   235bc:	vmov	r2, r3, d0
   235c0:	movw	r1, #13746	; 0x35b2
   235c4:	movt	r1, #4
   235c8:	ldr	sl, [sp, #28]
   235cc:	mov	r0, sl
   235d0:	bl	12a94 <sprintf@plt>
   235d4:	mov	r0, #3
   235d8:	ldr	r1, [sp, #20]
   235dc:	cmp	r1, #0
   235e0:	movwne	r0, #2
   235e4:	ldr	r7, [sp, #8]
   235e8:	add	r4, r0, r7
   235ec:	mov	r0, sl
   235f0:	bl	128c0 <strlen@plt>
   235f4:	cmp	r4, r0
   235f8:	ldr	r4, [sp, #32]
   235fc:	bcc	23620 <__assert_fail@plt+0x10a30>
   23600:	mov	r2, r0
   23604:	add	r7, r7, #1
   23608:	tst	r8, #8
   2360c:	beq	23658 <__assert_fail@plt+0x10a68>
   23610:	add	r0, r2, sl
   23614:	ldrb	r0, [r0, #-1]
   23618:	cmp	r0, #48	; 0x30
   2361c:	bne	23658 <__assert_fail@plt+0x10a68>
   23620:	vmov.f64	d9, #36	; 0x41200000  10.0
   23624:	vmul.f64	d0, d8, d9
   23628:	mov	r0, r9
   2362c:	bl	239c8 <__assert_fail@plt+0x10dd8>
   23630:	vdiv.f64	d16, d0, d9
   23634:	vmov	r2, r3, d16
   23638:	movw	r1, #13740	; 0x35ac
   2363c:	movt	r1, #4
   23640:	mov	r0, sl
   23644:	bl	12a94 <sprintf@plt>
   23648:	mov	r0, sl
   2364c:	bl	128c0 <strlen@plt>
   23650:	mov	r2, r0
   23654:	mov	r7, #0
   23658:	mov	r9, r4
   2365c:	sub	r4, r9, r2
   23660:	mov	r0, r4
   23664:	mov	r1, sl
   23668:	bl	12584 <memmove@plt>
   2366c:	sub	r0, r9, r7
   23670:	tst	r8, #4
   23674:	beq	23690 <__assert_fail@plt+0x10aa0>
   23678:	sub	r1, r0, r4
   2367c:	mov	r0, r4
   23680:	ldr	r2, [sp, #16]
   23684:	ldr	r3, [sp, #12]
   23688:	bl	23a60 <__assert_fail@plt+0x10e70>
   2368c:	mov	r4, r0
   23690:	ldr	r3, [fp, #20]
   23694:	ldr	r7, [fp, #16]
   23698:	tst	r8, #128	; 0x80
   2369c:	beq	23814 <__assert_fail@plt+0x10c24>
   236a0:	cmn	r5, #1
   236a4:	bgt	237ac <__assert_fail@plt+0x10bbc>
   236a8:	mov	r5, #0
   236ac:	subs	r0, r7, #2
   236b0:	sbcs	r0, r3, #0
   236b4:	bcc	237ac <__assert_fail@plt+0x10bbc>
   236b8:	mov	r0, #0
   236bc:	mov	r1, #1
   236c0:	mov	r5, #0
   236c4:	cmp	r5, #7
   236c8:	beq	237a8 <__assert_fail@plt+0x10bb8>
   236cc:	add	r5, r5, #1
   236d0:	umull	r1, r2, r1, r6
   236d4:	mla	r0, r0, r6, r2
   236d8:	subs	r2, r1, r7
   236dc:	sbcs	r2, r0, r3
   236e0:	bcc	236c4 <__assert_fail@plt+0x10ad4>
   236e4:	b	237ac <__assert_fail@plt+0x10bbc>
   236e8:	ldr	r9, [sp, #32]
   236ec:	ldr	sl, [sp, #28]
   236f0:	b	238b8 <__assert_fail@plt+0x10cc8>
   236f4:	str	ip, [sp, #44]	; 0x2c
   236f8:	mov	r5, #0
   236fc:	mov	r0, r9
   23700:	mov	r1, r7
   23704:	mov	r2, r6
   23708:	mov	r3, #0
   2370c:	bl	3e7d4 <__assert_fail@plt+0x2bbe4>
   23710:	mov	r8, r0
   23714:	mov	r7, r1
   23718:	mls	r0, r0, r6, r9
   2371c:	add	r0, r0, r0, lsl #2
   23720:	add	r0, r4, r0, lsl #1
   23724:	udiv	r4, r0, r6
   23728:	mls	r0, r4, r6, r0
   2372c:	lsl	r0, r0, #1
   23730:	add	r0, r0, sl, lsr #1
   23734:	cmp	r0, r6
   23738:	bcs	2374c <__assert_fail@plt+0x10b5c>
   2373c:	rsb	r1, sl, #0
   23740:	subs	sl, r0, r1
   23744:	movwne	sl, #1
   23748:	b	2375c <__assert_fail@plt+0x10b6c>
   2374c:	add	r0, r0, sl
   23750:	cmp	r6, r0
   23754:	mov	sl, #2
   23758:	movwcc	sl, #3
   2375c:	add	r5, r5, #1
   23760:	cmp	r5, #7
   23764:	bhi	23778 <__assert_fail@plt+0x10b88>
   23768:	subs	r0, r8, r6
   2376c:	sbcs	r0, r7, #0
   23770:	mov	r9, r8
   23774:	bcs	236fc <__assert_fail@plt+0x10b0c>
   23778:	rsbs	r0, r8, #9
   2377c:	rscs	r0, r7, #0
   23780:	bcc	23830 <__assert_fail@plt+0x10c40>
   23784:	ldr	r9, [sp, #24]
   23788:	cmp	r9, #1
   2378c:	ldr	ip, [sp, #44]	; 0x2c
   23790:	bne	2390c <__assert_fail@plt+0x10d1c>
   23794:	and	r0, r4, #1
   23798:	add	r0, sl, r0
   2379c:	cmp	r0, #2
   237a0:	bhi	2391c <__assert_fail@plt+0x10d2c>
   237a4:	b	23950 <__assert_fail@plt+0x10d60>
   237a8:	mov	r5, #8
   237ac:	and	r0, r8, #256	; 0x100
   237b0:	tst	r8, #64	; 0x40
   237b4:	orrsne	r1, r5, r0
   237b8:	movne	r1, #32
   237bc:	strbne	r1, [sl, #647]	; 0x287
   237c0:	addne	r9, sl, #648	; 0x288
   237c4:	cmp	r5, #0
   237c8:	beq	237f0 <__assert_fail@plt+0x10c00>
   237cc:	ldr	r1, [sp, #20]
   237d0:	cmp	r1, #0
   237d4:	moveq	r1, #107	; 0x6b
   237d8:	cmpeq	r5, #1
   237dc:	beq	237ec <__assert_fail@plt+0x10bfc>
   237e0:	movw	r1, #13800	; 0x35e8
   237e4:	movt	r1, #4
   237e8:	ldrb	r1, [r1, r5]
   237ec:	strb	r1, [r9], #1
   237f0:	cmp	r0, #0
   237f4:	beq	23814 <__assert_fail@plt+0x10c24>
   237f8:	ldr	r0, [sp, #20]
   237fc:	cmp	r0, #0
   23800:	cmpne	r5, #0
   23804:	movne	r0, #105	; 0x69
   23808:	strbne	r0, [r9], #1
   2380c:	mov	r0, #66	; 0x42
   23810:	strb	r0, [r9], #1
   23814:	mov	r0, #0
   23818:	strb	r0, [r9]
   2381c:	mov	r0, r4
   23820:	sub	sp, fp, #48	; 0x30
   23824:	vpop	{d8-d9}
   23828:	add	sp, sp, #4
   2382c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23830:	ldr	r3, [sp, #32]
   23834:	ldr	r9, [sp, #24]
   23838:	ldr	ip, [sp, #44]	; 0x2c
   2383c:	cmp	r9, #0
   23840:	bne	234bc <__assert_fail@plt+0x108cc>
   23844:	add	r0, r4, sl
   23848:	cmp	r0, #1
   2384c:	ldr	r9, [sp, #32]
   23850:	ldr	sl, [sp, #28]
   23854:	blt	238b8 <__assert_fail@plt+0x10cc8>
   23858:	adds	r8, r8, #1
   2385c:	adc	r7, r7, #0
   23860:	cmp	r5, #7
   23864:	bgt	238b8 <__assert_fail@plt+0x10cc8>
   23868:	cmp	ip, #0
   2386c:	beq	238b8 <__assert_fail@plt+0x10cc8>
   23870:	eor	r0, r8, r6
   23874:	orrs	r0, r0, r7
   23878:	bne	238b8 <__assert_fail@plt+0x10cc8>
   2387c:	add	r5, r5, #1
   23880:	mov	r7, #0
   23884:	mov	r8, #1
   23888:	ldr	r0, [sp, #36]	; 0x24
   2388c:	tst	r0, #8
   23890:	bne	238b8 <__assert_fail@plt+0x10cc8>
   23894:	mov	r0, #48	; 0x30
   23898:	strb	r0, [r3, #-1]!
   2389c:	ldr	r2, [sp, #8]
   238a0:	sub	r3, r3, r2
   238a4:	mov	r0, r3
   238a8:	ldr	r1, [sp, #4]
   238ac:	mov	r4, r3
   238b0:	bl	125f0 <memcpy@plt>
   238b4:	mov	r3, r4
   238b8:	str	r3, [sp, #44]	; 0x2c
   238bc:	mov	r4, r3
   238c0:	mov	r0, r8
   238c4:	mov	r1, r7
   238c8:	mov	r2, #10
   238cc:	mov	r3, #0
   238d0:	bl	3e7d4 <__assert_fail@plt+0x2bbe4>
   238d4:	add	r2, r0, r0, lsl #2
   238d8:	sub	r2, r8, r2, lsl #1
   238dc:	orr	r2, r2, #48	; 0x30
   238e0:	strb	r2, [r4, #-1]!
   238e4:	rsbs	r2, r8, #9
   238e8:	rscs	r2, r7, #0
   238ec:	mov	r8, r0
   238f0:	mov	r7, r1
   238f4:	bcc	238c0 <__assert_fail@plt+0x10cd0>
   238f8:	ldr	r8, [sp, #36]	; 0x24
   238fc:	ldr	r0, [sp, #44]	; 0x2c
   23900:	tst	r8, #4
   23904:	bne	23678 <__assert_fail@plt+0x10a88>
   23908:	b	23690 <__assert_fail@plt+0x10aa0>
   2390c:	cmp	r9, #0
   23910:	bne	23950 <__assert_fail@plt+0x10d60>
   23914:	cmp	sl, #0
   23918:	beq	23950 <__assert_fail@plt+0x10d60>
   2391c:	adds	r0, r8, #1
   23920:	adc	r1, r7, #0
   23924:	add	r4, r4, #1
   23928:	mov	sl, #0
   2392c:	cmp	r4, #10
   23930:	bne	23950 <__assert_fail@plt+0x10d60>
   23934:	mov	r4, #0
   23938:	rsbs	r2, r0, #9
   2393c:	rscs	r2, r1, #0
   23940:	mov	r8, r0
   23944:	mov	r7, r1
   23948:	mov	sl, #0
   2394c:	bcc	239a8 <__assert_fail@plt+0x10db8>
   23950:	ldr	r0, [sp, #36]	; 0x24
   23954:	tst	r0, #8
   23958:	beq	2396c <__assert_fail@plt+0x10d7c>
   2395c:	cmp	r4, #0
   23960:	bne	2396c <__assert_fail@plt+0x10d7c>
   23964:	ldr	r3, [sp, #32]
   23968:	b	23998 <__assert_fail@plt+0x10da8>
   2396c:	add	r0, r4, #48	; 0x30
   23970:	ldr	r1, [sp, #28]
   23974:	strb	r0, [r1, #646]!	; 0x286
   23978:	ldr	r2, [sp, #8]
   2397c:	sub	r4, r1, r2
   23980:	mov	r0, r4
   23984:	ldr	r1, [sp, #4]
   23988:	bl	125f0 <memcpy@plt>
   2398c:	mov	r3, r4
   23990:	ldr	ip, [sp, #44]	; 0x2c
   23994:	mov	sl, #0
   23998:	mov	r4, #0
   2399c:	cmp	r9, #0
   239a0:	bne	234bc <__assert_fail@plt+0x108cc>
   239a4:	b	23844 <__assert_fail@plt+0x10c54>
   239a8:	mov	sl, #0
   239ac:	ldr	r3, [sp, #32]
   239b0:	mov	r8, #10
   239b4:	mov	r7, #0
   239b8:	cmp	r9, #0
   239bc:	bne	234bc <__assert_fail@plt+0x108cc>
   239c0:	b	23844 <__assert_fail@plt+0x10c54>
   239c4:	nop	{0}
   239c8:	push	{r4, r5, r6, sl, fp, lr}
   239cc:	add	fp, sp, #16
   239d0:	vpush	{d8}
   239d4:	vmov.f64	d8, d0
   239d8:	cmp	r0, #1
   239dc:	beq	23a48 <__assert_fail@plt+0x10e58>
   239e0:	vldr	d16, [pc, #112]	; 23a58 <__assert_fail@plt+0x10e68>
   239e4:	vcmpe.f64	d8, d16
   239e8:	vmrs	APSR_nzcv, fpscr
   239ec:	bpl	23a48 <__assert_fail@plt+0x10e58>
   239f0:	mov	r6, r0
   239f4:	vmov	r0, r1, d8
   239f8:	bl	3e820 <__assert_fail@plt+0x2bc30>
   239fc:	mov	r4, r0
   23a00:	mov	r5, r1
   23a04:	mov	r0, #0
   23a08:	cmp	r6, #0
   23a0c:	mov	r2, #0
   23a10:	bne	23a38 <__assert_fail@plt+0x10e48>
   23a14:	mov	r0, r4
   23a18:	mov	r1, r5
   23a1c:	bl	3e68c <__assert_fail@plt+0x2ba9c>
   23a20:	mov	r2, #0
   23a24:	vmov	d16, r0, r1
   23a28:	vcmp.f64	d16, d8
   23a2c:	vmrs	APSR_nzcv, fpscr
   23a30:	mov	r0, #0
   23a34:	movwne	r0, #1
   23a38:	adds	r0, r0, r4
   23a3c:	adc	r1, r2, r5
   23a40:	bl	3e68c <__assert_fail@plt+0x2ba9c>
   23a44:	vmov	d8, r0, r1
   23a48:	vorr	d0, d8, d8
   23a4c:	vpop	{d8}
   23a50:	pop	{r4, r5, r6, sl, fp, pc}
   23a54:	nop	{0}
   23a58:	andeq	r0, r0, r0
   23a5c:	mvnsmi	r0, #0
   23a60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23a64:	add	fp, sp, #28
   23a68:	sub	sp, sp, #52	; 0x34
   23a6c:	mov	r5, r3
   23a70:	mov	r9, r2
   23a74:	mov	r6, r1
   23a78:	mov	r4, r0
   23a7c:	mov	r0, r3
   23a80:	bl	128c0 <strlen@plt>
   23a84:	str	r0, [sp, #4]
   23a88:	add	sl, sp, #8
   23a8c:	mov	r0, sl
   23a90:	mov	r1, r4
   23a94:	mov	r2, r6
   23a98:	bl	125f0 <memcpy@plt>
   23a9c:	add	r0, r4, r6
   23aa0:	ldrb	r7, [r9]
   23aa4:	cmp	r7, #255	; 0xff
   23aa8:	mov	r8, r7
   23aac:	moveq	r8, r6
   23ab0:	cmp	r7, #0
   23ab4:	mvneq	r8, #0
   23ab8:	cmp	r8, r6
   23abc:	movhi	r8, r6
   23ac0:	sub	r4, r0, r8
   23ac4:	sub	r6, r6, r8
   23ac8:	add	r1, sl, r6
   23acc:	mov	r0, r4
   23ad0:	mov	r2, r8
   23ad4:	bl	125f0 <memcpy@plt>
   23ad8:	cmp	r6, #0
   23adc:	beq	23b6c <__assert_fail@plt+0x10f7c>
   23ae0:	clz	r0, r7
   23ae4:	lsr	sl, r0, #5
   23ae8:	ldr	r0, [sp, #4]
   23aec:	rsb	r0, r0, #0
   23af0:	str	r0, [sp]
   23af4:	ldr	r0, [sp]
   23af8:	add	r4, r4, r0
   23afc:	mov	r0, r4
   23b00:	mov	r1, r5
   23b04:	ldr	r2, [sp, #4]
   23b08:	bl	125f0 <memcpy@plt>
   23b0c:	tst	sl, #1
   23b10:	addeq	r9, r9, #1
   23b14:	mov	sl, r5
   23b18:	ldrb	r5, [r9]
   23b1c:	cmp	r5, #255	; 0xff
   23b20:	mov	r7, r5
   23b24:	moveq	r7, r6
   23b28:	cmp	r5, #0
   23b2c:	moveq	r7, r8
   23b30:	cmp	r6, r7
   23b34:	movcc	r7, r6
   23b38:	sub	r4, r4, r7
   23b3c:	sub	r6, r6, r7
   23b40:	add	r0, sp, #8
   23b44:	add	r1, r0, r6
   23b48:	mov	r0, r4
   23b4c:	mov	r2, r7
   23b50:	bl	125f0 <memcpy@plt>
   23b54:	clz	r0, r5
   23b58:	mov	r5, sl
   23b5c:	lsr	sl, r0, #5
   23b60:	cmp	r6, #0
   23b64:	mov	r8, r7
   23b68:	bne	23af4 <__assert_fail@plt+0x10f04>
   23b6c:	mov	r0, r4
   23b70:	sub	sp, fp, #28
   23b74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23b78:	push	{r4, sl, fp, lr}
   23b7c:	add	fp, sp, #8
   23b80:	mov	r4, r2
   23b84:	mov	r2, r1
   23b88:	mov	r1, r4
   23b8c:	bl	23bac <__assert_fail@plt+0x10fbc>
   23b90:	ldrd	r2, [r4]
   23b94:	orrs	r1, r2, r3
   23b98:	popne	{r4, sl, fp, pc}
   23b9c:	bl	23d1c <__assert_fail@plt+0x1112c>
   23ba0:	strd	r0, [r4]
   23ba4:	mov	r0, #4
   23ba8:	pop	{r4, sl, fp, pc}
   23bac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   23bb0:	add	fp, sp, #24
   23bb4:	sub	sp, sp, #8
   23bb8:	mov	r8, r2
   23bbc:	mov	r5, r1
   23bc0:	cmp	r0, #0
   23bc4:	bne	23bf0 <__assert_fail@plt+0x11000>
   23bc8:	movw	r0, #2834	; 0xb12
   23bcc:	movt	r0, #4
   23bd0:	bl	127f4 <getenv@plt>
   23bd4:	cmp	r0, #0
   23bd8:	bne	23bf0 <__assert_fail@plt+0x11000>
   23bdc:	movw	r0, #13752	; 0x35b8
   23be0:	movt	r0, #4
   23be4:	bl	127f4 <getenv@plt>
   23be8:	cmp	r0, #0
   23bec:	beq	23cdc <__assert_fail@plt+0x110ec>
   23bf0:	mov	r6, r0
   23bf4:	ldrb	r4, [r6], #1
   23bf8:	cmp	r4, #39	; 0x27
   23bfc:	movne	r6, r0
   23c00:	movw	r1, #13812	; 0x35f4
   23c04:	movt	r1, #4
   23c08:	movw	r7, #13824	; 0x3600
   23c0c:	movt	r7, #4
   23c10:	mov	r0, r6
   23c14:	mov	r2, r7
   23c18:	mov	r3, #4
   23c1c:	bl	3d2b4 <__assert_fail@plt+0x2a6c4>
   23c20:	sub	r1, r4, #39	; 0x27
   23c24:	clz	r1, r1
   23c28:	lsr	r1, r1, #5
   23c2c:	lsl	r4, r1, #2
   23c30:	cmp	r0, #0
   23c34:	bmi	23c60 <__assert_fail@plt+0x11070>
   23c38:	mov	r1, #0
   23c3c:	mov	r2, #1
   23c40:	str	r2, [r5]
   23c44:	str	r1, [r5, #4]
   23c48:	ldr	r0, [r7, r0, lsl #2]
   23c4c:	orr	r0, r0, r4
   23c50:	str	r0, [r8]
   23c54:	mov	r0, #0
   23c58:	sub	sp, fp, #24
   23c5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23c60:	movw	r0, #13762	; 0x35c2
   23c64:	movt	r0, #4
   23c68:	str	r0, [sp]
   23c6c:	add	r1, sp, #4
   23c70:	mov	r7, #0
   23c74:	mov	r0, r6
   23c78:	mov	r2, #0
   23c7c:	mov	r3, r5
   23c80:	bl	2bf6c <__assert_fail@plt+0x1937c>
   23c84:	cmp	r0, #0
   23c88:	beq	23c98 <__assert_fail@plt+0x110a8>
   23c8c:	str	r7, [r8]
   23c90:	sub	sp, fp, #24
   23c94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23c98:	ldrb	r0, [r6]
   23c9c:	sub	r0, r0, #48	; 0x30
   23ca0:	uxtb	r0, r0
   23ca4:	cmp	r0, #10
   23ca8:	bcc	23cd4 <__assert_fail@plt+0x110e4>
   23cac:	ldr	r1, [sp, #4]
   23cb0:	cmp	r1, r6
   23cb4:	beq	23cec <__assert_fail@plt+0x110fc>
   23cb8:	add	r0, r6, #1
   23cbc:	ldrb	r2, [r6, #1]
   23cc0:	sub	r2, r2, #48	; 0x30
   23cc4:	uxtb	r2, r2
   23cc8:	cmp	r2, #10
   23ccc:	mov	r6, r0
   23cd0:	bcs	23cb0 <__assert_fail@plt+0x110c0>
   23cd4:	mov	r0, r4
   23cd8:	b	23c50 <__assert_fail@plt+0x11060>
   23cdc:	bl	23d1c <__assert_fail@plt+0x1112c>
   23ce0:	strd	r0, [r5]
   23ce4:	mov	r0, #0
   23ce8:	b	23c50 <__assert_fail@plt+0x11060>
   23cec:	ldrb	r2, [r1, #-1]
   23cf0:	orr	r0, r4, #384	; 0x180
   23cf4:	cmp	r2, #66	; 0x42
   23cf8:	mov	r2, r0
   23cfc:	orrne	r2, r4, #128	; 0x80
   23d00:	bne	23d14 <__assert_fail@plt+0x11124>
   23d04:	ldrb	r1, [r1, #-2]
   23d08:	cmp	r1, #105	; 0x69
   23d0c:	orreq	r0, r2, #32
   23d10:	b	23c50 <__assert_fail@plt+0x11060>
   23d14:	orr	r0, r2, #32
   23d18:	b	23c50 <__assert_fail@plt+0x11060>
   23d1c:	push	{fp, lr}
   23d20:	mov	fp, sp
   23d24:	movw	r0, #2813	; 0xafd
   23d28:	movt	r0, #4
   23d2c:	bl	127f4 <getenv@plt>
   23d30:	mov	r1, #512	; 0x200
   23d34:	cmp	r0, #0
   23d38:	movweq	r1, #1024	; 0x400
   23d3c:	mov	r0, r1
   23d40:	mov	r1, #0
   23d44:	pop	{fp, pc}
   23d48:	push	{r4, r5, r6, r7, fp, lr}
   23d4c:	add	fp, sp, #16
   23d50:	mov	r4, r0
   23d54:	movw	r7, #23828	; 0x5d14
   23d58:	movt	r7, #5
   23d5c:	ldr	r5, [r7]
   23d60:	cmp	r5, #0
   23d64:	beq	23d80 <__assert_fail@plt+0x11190>
   23d68:	ldr	r0, [r5]
   23d6c:	cmp	r0, r4
   23d70:	beq	23dd4 <__assert_fail@plt+0x111e4>
   23d74:	ldr	r5, [r5, #4]
   23d78:	cmp	r5, #0
   23d7c:	bne	23d68 <__assert_fail@plt+0x11178>
   23d80:	mov	r0, r4
   23d84:	bl	1250c <getpwuid@plt>
   23d88:	cmp	r0, #0
   23d8c:	beq	23d98 <__assert_fail@plt+0x111a8>
   23d90:	ldr	r6, [r0]
   23d94:	b	23da0 <__assert_fail@plt+0x111b0>
   23d98:	movw	r6, #2407	; 0x967
   23d9c:	movt	r6, #4
   23da0:	mov	r0, r6
   23da4:	bl	128c0 <strlen@plt>
   23da8:	add	r0, r0, #12
   23dac:	bic	r0, r0, #3
   23db0:	bl	2b63c <__assert_fail@plt+0x18a4c>
   23db4:	mov	r5, r0
   23db8:	str	r4, [r0]
   23dbc:	add	r0, r0, #8
   23dc0:	mov	r1, r6
   23dc4:	bl	12770 <strcpy@plt>
   23dc8:	ldr	r0, [r7]
   23dcc:	str	r0, [r5, #4]
   23dd0:	str	r5, [r7]
   23dd4:	ldrb	r0, [r5, #8]!
   23dd8:	cmp	r0, #0
   23ddc:	moveq	r5, r0
   23de0:	mov	r0, r5
   23de4:	pop	{r4, r5, r6, r7, fp, pc}
   23de8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   23dec:	add	fp, sp, #24
   23df0:	mov	r4, r0
   23df4:	movw	r8, #23828	; 0x5d14
   23df8:	movt	r8, #5
   23dfc:	ldr	r5, [r8]
   23e00:	cmp	r5, #0
   23e04:	beq	23e44 <__assert_fail@plt+0x11254>
   23e08:	ldrb	r6, [r4]
   23e0c:	b	23e1c <__assert_fail@plt+0x1122c>
   23e10:	ldr	r5, [r5, #4]
   23e14:	cmp	r5, #0
   23e18:	beq	23e44 <__assert_fail@plt+0x11254>
   23e1c:	mov	r0, r5
   23e20:	ldrb	r1, [r0, #8]!
   23e24:	cmp	r1, r6
   23e28:	bne	23e10 <__assert_fail@plt+0x11220>
   23e2c:	mov	r1, r4
   23e30:	bl	124f4 <strcmp@plt>
   23e34:	cmp	r0, #0
   23e38:	bne	23e10 <__assert_fail@plt+0x11220>
   23e3c:	mov	r0, r5
   23e40:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23e44:	movw	r7, #23832	; 0x5d18
   23e48:	movt	r7, #5
   23e4c:	ldr	r5, [r7]
   23e50:	cmp	r5, #0
   23e54:	beq	23e90 <__assert_fail@plt+0x112a0>
   23e58:	ldrb	r6, [r4]
   23e5c:	b	23e6c <__assert_fail@plt+0x1127c>
   23e60:	ldr	r5, [r5, #4]
   23e64:	cmp	r5, #0
   23e68:	beq	23e90 <__assert_fail@plt+0x112a0>
   23e6c:	mov	r0, r5
   23e70:	ldrb	r1, [r0, #8]!
   23e74:	cmp	r1, r6
   23e78:	bne	23e60 <__assert_fail@plt+0x11270>
   23e7c:	mov	r1, r4
   23e80:	bl	124f4 <strcmp@plt>
   23e84:	cmp	r0, #0
   23e88:	bne	23e60 <__assert_fail@plt+0x11270>
   23e8c:	b	23eec <__assert_fail@plt+0x112fc>
   23e90:	mov	r0, r4
   23e94:	bl	124d0 <getpwnam@plt>
   23e98:	mov	r6, r0
   23e9c:	mov	r0, r4
   23ea0:	bl	128c0 <strlen@plt>
   23ea4:	add	r0, r0, #12
   23ea8:	bic	r0, r0, #3
   23eac:	bl	2b63c <__assert_fail@plt+0x18a4c>
   23eb0:	mov	r5, r0
   23eb4:	add	r0, r0, #8
   23eb8:	mov	r1, r4
   23ebc:	bl	12770 <strcpy@plt>
   23ec0:	cmp	r6, #0
   23ec4:	beq	23ee0 <__assert_fail@plt+0x112f0>
   23ec8:	ldr	r0, [r6, #8]
   23ecc:	ldr	r1, [r8]
   23ed0:	stm	r5, {r0, r1}
   23ed4:	str	r5, [r8]
   23ed8:	mov	r0, r5
   23edc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23ee0:	ldr	r0, [r7]
   23ee4:	str	r0, [r5, #4]
   23ee8:	str	r5, [r7]
   23eec:	mov	r5, #0
   23ef0:	mov	r0, r5
   23ef4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23ef8:	push	{r4, r5, r6, r7, fp, lr}
   23efc:	add	fp, sp, #16
   23f00:	mov	r4, r0
   23f04:	movw	r7, #23836	; 0x5d1c
   23f08:	movt	r7, #5
   23f0c:	ldr	r5, [r7]
   23f10:	cmp	r5, #0
   23f14:	beq	23f30 <__assert_fail@plt+0x11340>
   23f18:	ldr	r0, [r5]
   23f1c:	cmp	r0, r4
   23f20:	beq	23f84 <__assert_fail@plt+0x11394>
   23f24:	ldr	r5, [r5, #4]
   23f28:	cmp	r5, #0
   23f2c:	bne	23f18 <__assert_fail@plt+0x11328>
   23f30:	mov	r0, r4
   23f34:	bl	12bcc <getgrgid@plt>
   23f38:	cmp	r0, #0
   23f3c:	beq	23f48 <__assert_fail@plt+0x11358>
   23f40:	ldr	r6, [r0]
   23f44:	b	23f50 <__assert_fail@plt+0x11360>
   23f48:	movw	r6, #2407	; 0x967
   23f4c:	movt	r6, #4
   23f50:	mov	r0, r6
   23f54:	bl	128c0 <strlen@plt>
   23f58:	add	r0, r0, #12
   23f5c:	bic	r0, r0, #3
   23f60:	bl	2b63c <__assert_fail@plt+0x18a4c>
   23f64:	mov	r5, r0
   23f68:	str	r4, [r0]
   23f6c:	add	r0, r0, #8
   23f70:	mov	r1, r6
   23f74:	bl	12770 <strcpy@plt>
   23f78:	ldr	r0, [r7]
   23f7c:	str	r0, [r5, #4]
   23f80:	str	r5, [r7]
   23f84:	ldrb	r0, [r5, #8]!
   23f88:	cmp	r0, #0
   23f8c:	moveq	r5, r0
   23f90:	mov	r0, r5
   23f94:	pop	{r4, r5, r6, r7, fp, pc}
   23f98:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   23f9c:	add	fp, sp, #24
   23fa0:	mov	r4, r0
   23fa4:	movw	r8, #23836	; 0x5d1c
   23fa8:	movt	r8, #5
   23fac:	ldr	r5, [r8]
   23fb0:	cmp	r5, #0
   23fb4:	beq	23ff4 <__assert_fail@plt+0x11404>
   23fb8:	ldrb	r6, [r4]
   23fbc:	b	23fcc <__assert_fail@plt+0x113dc>
   23fc0:	ldr	r5, [r5, #4]
   23fc4:	cmp	r5, #0
   23fc8:	beq	23ff4 <__assert_fail@plt+0x11404>
   23fcc:	mov	r0, r5
   23fd0:	ldrb	r1, [r0, #8]!
   23fd4:	cmp	r1, r6
   23fd8:	bne	23fc0 <__assert_fail@plt+0x113d0>
   23fdc:	mov	r1, r4
   23fe0:	bl	124f4 <strcmp@plt>
   23fe4:	cmp	r0, #0
   23fe8:	bne	23fc0 <__assert_fail@plt+0x113d0>
   23fec:	mov	r0, r5
   23ff0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23ff4:	movw	r7, #23840	; 0x5d20
   23ff8:	movt	r7, #5
   23ffc:	ldr	r5, [r7]
   24000:	cmp	r5, #0
   24004:	beq	24040 <__assert_fail@plt+0x11450>
   24008:	ldrb	r6, [r4]
   2400c:	b	2401c <__assert_fail@plt+0x1142c>
   24010:	ldr	r5, [r5, #4]
   24014:	cmp	r5, #0
   24018:	beq	24040 <__assert_fail@plt+0x11450>
   2401c:	mov	r0, r5
   24020:	ldrb	r1, [r0, #8]!
   24024:	cmp	r1, r6
   24028:	bne	24010 <__assert_fail@plt+0x11420>
   2402c:	mov	r1, r4
   24030:	bl	124f4 <strcmp@plt>
   24034:	cmp	r0, #0
   24038:	bne	24010 <__assert_fail@plt+0x11420>
   2403c:	b	2409c <__assert_fail@plt+0x114ac>
   24040:	mov	r0, r4
   24044:	bl	12bd8 <getgrnam@plt>
   24048:	mov	r6, r0
   2404c:	mov	r0, r4
   24050:	bl	128c0 <strlen@plt>
   24054:	add	r0, r0, #12
   24058:	bic	r0, r0, #3
   2405c:	bl	2b63c <__assert_fail@plt+0x18a4c>
   24060:	mov	r5, r0
   24064:	add	r0, r0, #8
   24068:	mov	r1, r4
   2406c:	bl	12770 <strcpy@plt>
   24070:	cmp	r6, #0
   24074:	beq	24090 <__assert_fail@plt+0x114a0>
   24078:	ldr	r0, [r6, #8]
   2407c:	ldr	r1, [r8]
   24080:	stm	r5, {r0, r1}
   24084:	str	r5, [r8]
   24088:	mov	r0, r5
   2408c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24090:	ldr	r0, [r7]
   24094:	str	r0, [r5, #4]
   24098:	str	r5, [r7]
   2409c:	mov	r5, #0
   240a0:	mov	r0, r5
   240a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   240a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   240ac:	add	fp, sp, #28
   240b0:	sub	sp, sp, #300	; 0x12c
   240b4:	mov	r5, r1
   240b8:	mov	r6, r0
   240bc:	bl	12758 <__ctype_get_mb_cur_max@plt>
   240c0:	cmp	r0, #2
   240c4:	bcc	24458 <__assert_fail@plt+0x11868>
   240c8:	mov	r4, #0
   240cc:	str	r4, [fp, #-80]	; 0xffffffb0
   240d0:	str	r4, [fp, #-84]	; 0xffffffac
   240d4:	strb	r4, [fp, #-76]	; 0xffffffb4
   240d8:	strb	r4, [fp, #-88]	; 0xffffffa8
   240dc:	str	r5, [fp, #-72]	; 0xffffffb8
   240e0:	sub	r0, fp, #88	; 0x58
   240e4:	bl	24e30 <__assert_fail@plt+0x12240>
   240e8:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   240ec:	cmp	r0, #0
   240f0:	beq	24100 <__assert_fail@plt+0x11510>
   240f4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   240f8:	cmp	r0, #0
   240fc:	beq	24558 <__assert_fail@plt+0x11968>
   24100:	str	r4, [fp, #-136]	; 0xffffff78
   24104:	str	r4, [fp, #-140]	; 0xffffff74
   24108:	str	r5, [fp, #-128]	; 0xffffff80
   2410c:	strb	r4, [fp, #-132]	; 0xffffff7c
   24110:	strb	r4, [fp, #-144]	; 0xffffff70
   24114:	str	r4, [sp, #136]	; 0x88
   24118:	str	r4, [sp, #132]	; 0x84
   2411c:	str	r6, [sp, #144]	; 0x90
   24120:	strb	r4, [sp, #140]	; 0x8c
   24124:	strb	r4, [sp, #128]	; 0x80
   24128:	add	r7, sp, #128	; 0x80
   2412c:	mov	r0, r7
   24130:	bl	24e30 <__assert_fail@plt+0x12240>
   24134:	ldrb	r0, [sp, #152]	; 0x98
   24138:	cmp	r0, #0
   2413c:	beq	2414c <__assert_fail@plt+0x1155c>
   24140:	ldr	r0, [sp, #156]	; 0x9c
   24144:	cmp	r0, #0
   24148:	beq	24564 <__assert_fail@plt+0x11974>
   2414c:	add	r0, sp, #16
   24150:	add	r0, r0, #4
   24154:	str	r0, [sp, #4]
   24158:	mov	r0, #1
   2415c:	str	r0, [sp, #8]
   24160:	mov	r8, #0
   24164:	add	r0, r7, #16
   24168:	str	r0, [sp]
   2416c:	mov	r0, #0
   24170:	str	r0, [sp, #12]
   24174:	mov	sl, #0
   24178:	mov	r9, #0
   2417c:	mov	r4, sl
   24180:	add	r0, r9, r9, lsl #2
   24184:	cmp	sl, r0
   24188:	bcc	2424c <__assert_fail@plt+0x1165c>
   2418c:	ldr	r0, [sp, #8]
   24190:	tst	r0, #1
   24194:	beq	2424c <__assert_fail@plt+0x1165c>
   24198:	cmp	r9, #10
   2419c:	bcc	2424c <__assert_fail@plt+0x1165c>
   241a0:	mov	sl, r7
   241a4:	ldr	r1, [sp, #12]
   241a8:	subs	r0, r4, r1
   241ac:	beq	241f4 <__assert_fail@plt+0x11604>
   241b0:	sub	r7, r1, r4
   241b4:	b	241d4 <__assert_fail@plt+0x115e4>
   241b8:	strb	r8, [fp, #-132]	; 0xffffff7c
   241bc:	ldr	r0, [fp, #-128]	; 0xffffff80
   241c0:	ldr	r1, [fp, #-124]	; 0xffffff84
   241c4:	add	r0, r0, r1
   241c8:	str	r0, [fp, #-128]	; 0xffffff80
   241cc:	adds	r7, r7, #1
   241d0:	bcs	241f4 <__assert_fail@plt+0x11604>
   241d4:	sub	r0, fp, #144	; 0x90
   241d8:	bl	24e30 <__assert_fail@plt+0x12240>
   241dc:	ldrb	r0, [fp, #-120]	; 0xffffff88
   241e0:	cmp	r0, #0
   241e4:	beq	241b8 <__assert_fail@plt+0x115c8>
   241e8:	ldr	r0, [fp, #-116]	; 0xffffff8c
   241ec:	cmp	r0, #0
   241f0:	bne	241b8 <__assert_fail@plt+0x115c8>
   241f4:	sub	r0, fp, #144	; 0x90
   241f8:	bl	24e30 <__assert_fail@plt+0x12240>
   241fc:	ldrb	r0, [fp, #-120]	; 0xffffff88
   24200:	cmp	r0, #0
   24204:	beq	24244 <__assert_fail@plt+0x11654>
   24208:	ldr	r0, [fp, #-116]	; 0xffffff8c
   2420c:	cmp	r0, #0
   24210:	str	r4, [sp, #12]
   24214:	mov	r7, sl
   24218:	bne	2424c <__assert_fail@plt+0x1165c>
   2421c:	mov	r0, r6
   24220:	mov	r1, r5
   24224:	add	r2, sp, #72	; 0x48
   24228:	bl	2458c <__assert_fail@plt+0x1199c>
   2422c:	mov	r1, #0
   24230:	str	r1, [sp, #8]
   24234:	cmp	r0, #0
   24238:	str	r4, [sp, #12]
   2423c:	beq	2424c <__assert_fail@plt+0x1165c>
   24240:	b	24580 <__assert_fail@plt+0x11990>
   24244:	str	r4, [sp, #12]
   24248:	mov	r7, sl
   2424c:	add	sl, r4, #1
   24250:	ldrb	r0, [sp, #152]	; 0x98
   24254:	cmp	r0, #0
   24258:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   2425c:	cmpne	r0, #0
   24260:	bne	2428c <__assert_fail@plt+0x1169c>
   24264:	ldr	r2, [sp, #148]	; 0x94
   24268:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2426c:	cmp	r2, r0
   24270:	bne	24418 <__assert_fail@plt+0x11828>
   24274:	ldr	r1, [fp, #-72]	; 0xffffffb8
   24278:	ldr	r0, [sp, #144]	; 0x90
   2427c:	bl	128a8 <bcmp@plt>
   24280:	cmp	r0, #0
   24284:	bne	24418 <__assert_fail@plt+0x11828>
   24288:	b	2429c <__assert_fail@plt+0x116ac>
   2428c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   24290:	ldr	r1, [sp, #156]	; 0x9c
   24294:	cmp	r1, r0
   24298:	bne	24418 <__assert_fail@plt+0x11828>
   2429c:	mov	r0, r7
   242a0:	mov	r1, #48	; 0x30
   242a4:	vld1.64	{d16-d17}, [r0], r1
   242a8:	ldr	r1, [sp]
   242ac:	vld1.64	{d18-d19}, [r1]
   242b0:	add	r3, sp, #72	; 0x48
   242b4:	add	r1, r3, #16
   242b8:	add	r2, r7, #32
   242bc:	vld1.64	{d20-d21}, [r2]
   242c0:	vldr	d22, [r0]
   242c4:	vst1.64	{d18-d19}, [r1]
   242c8:	add	r0, r3, #32
   242cc:	vst1.64	{d20-d21}, [r0]
   242d0:	mov	r0, r3
   242d4:	mov	r1, #12
   242d8:	vst1.64	{d16-d17}, [r0], r1
   242dc:	strb	r8, [r0]
   242e0:	str	r5, [sp, #32]
   242e4:	strb	r8, [sp, #16]
   242e8:	vstr	d22, [sp, #120]	; 0x78
   242ec:	ldr	r0, [sp, #88]	; 0x58
   242f0:	ldr	r1, [sp, #92]	; 0x5c
   242f4:	add	r0, r0, r1
   242f8:	str	r0, [sp, #88]	; 0x58
   242fc:	ldr	r0, [sp, #4]
   24300:	str	r8, [r0]
   24304:	str	r8, [r0, #4]
   24308:	strb	r8, [sp, #28]
   2430c:	add	r0, sp, #16
   24310:	bl	24e30 <__assert_fail@plt+0x12240>
   24314:	ldrb	r0, [sp, #40]	; 0x28
   24318:	cmp	r0, #0
   2431c:	beq	2432c <__assert_fail@plt+0x1173c>
   24320:	ldr	r0, [sp, #44]	; 0x2c
   24324:	cmp	r0, #0
   24328:	beq	24588 <__assert_fail@plt+0x11998>
   2432c:	strb	r8, [sp, #28]
   24330:	ldr	r0, [sp, #32]
   24334:	ldr	r1, [sp, #36]	; 0x24
   24338:	add	r0, r0, r1
   2433c:	str	r0, [sp, #32]
   24340:	add	r0, sp, #16
   24344:	bl	24e30 <__assert_fail@plt+0x12240>
   24348:	ldrb	r0, [sp, #40]	; 0x28
   2434c:	cmp	r0, #0
   24350:	beq	24360 <__assert_fail@plt+0x11770>
   24354:	ldr	r0, [sp, #44]	; 0x2c
   24358:	cmp	r0, #0
   2435c:	beq	24570 <__assert_fail@plt+0x11980>
   24360:	add	sl, r4, #2
   24364:	add	r0, sp, #72	; 0x48
   24368:	bl	24e30 <__assert_fail@plt+0x12240>
   2436c:	ldr	r0, [sp, #100]	; 0x64
   24370:	ldrb	r1, [sp, #96]	; 0x60
   24374:	cmp	r0, #0
   24378:	bne	24384 <__assert_fail@plt+0x11794>
   2437c:	cmp	r1, #0
   24380:	bne	24560 <__assert_fail@plt+0x11970>
   24384:	cmp	r1, #0
   24388:	ldrbne	r1, [sp, #40]	; 0x28
   2438c:	cmpne	r1, #0
   24390:	bne	243bc <__assert_fail@plt+0x117cc>
   24394:	ldr	r2, [sp, #92]	; 0x5c
   24398:	ldr	r0, [sp, #36]	; 0x24
   2439c:	cmp	r2, r0
   243a0:	bne	24418 <__assert_fail@plt+0x11828>
   243a4:	ldr	r1, [sp, #32]
   243a8:	ldr	r0, [sp, #88]	; 0x58
   243ac:	bl	128a8 <bcmp@plt>
   243b0:	cmp	r0, #0
   243b4:	beq	243c8 <__assert_fail@plt+0x117d8>
   243b8:	b	24418 <__assert_fail@plt+0x11828>
   243bc:	ldr	r1, [sp, #44]	; 0x2c
   243c0:	cmp	r0, r1
   243c4:	bne	24418 <__assert_fail@plt+0x11828>
   243c8:	strb	r8, [sp, #84]	; 0x54
   243cc:	strb	r8, [sp, #28]
   243d0:	ldr	r0, [sp, #88]	; 0x58
   243d4:	ldr	r1, [sp, #92]	; 0x5c
   243d8:	add	r0, r0, r1
   243dc:	str	r0, [sp, #88]	; 0x58
   243e0:	ldr	r0, [sp, #32]
   243e4:	ldr	r1, [sp, #36]	; 0x24
   243e8:	add	r0, r0, r1
   243ec:	str	r0, [sp, #32]
   243f0:	add	r0, sp, #16
   243f4:	bl	24e30 <__assert_fail@plt+0x12240>
   243f8:	add	sl, sl, #1
   243fc:	ldrb	r0, [sp, #40]	; 0x28
   24400:	cmp	r0, #0
   24404:	beq	24364 <__assert_fail@plt+0x11774>
   24408:	ldr	r0, [sp, #44]	; 0x2c
   2440c:	cmp	r0, #0
   24410:	bne	24364 <__assert_fail@plt+0x11774>
   24414:	b	24570 <__assert_fail@plt+0x11980>
   24418:	add	r9, r9, #1
   2441c:	mov	r4, #0
   24420:	strb	r4, [sp, #140]	; 0x8c
   24424:	ldr	r0, [sp, #144]	; 0x90
   24428:	ldr	r1, [sp, #148]	; 0x94
   2442c:	add	r0, r0, r1
   24430:	str	r0, [sp, #144]	; 0x90
   24434:	mov	r0, r7
   24438:	bl	24e30 <__assert_fail@plt+0x12240>
   2443c:	ldrb	r0, [sp, #152]	; 0x98
   24440:	cmp	r0, #0
   24444:	beq	2417c <__assert_fail@plt+0x1158c>
   24448:	ldr	r0, [sp, #156]	; 0x9c
   2444c:	cmp	r0, #0
   24450:	bne	2417c <__assert_fail@plt+0x1158c>
   24454:	b	24564 <__assert_fail@plt+0x11974>
   24458:	ldrb	r9, [r5]
   2445c:	cmp	r9, #0
   24460:	beq	24558 <__assert_fail@plt+0x11968>
   24464:	ldrb	r0, [r6]
   24468:	cmp	r0, #0
   2446c:	beq	24560 <__assert_fail@plt+0x11970>
   24470:	mov	r3, #1
   24474:	mov	ip, #0
   24478:	mov	sl, r5
   2447c:	mov	r7, #0
   24480:	mov	r8, #0
   24484:	add	r0, r8, r8, lsl #2
   24488:	cmp	r7, r0
   2448c:	bcc	24500 <__assert_fail@plt+0x11910>
   24490:	tst	r3, #1
   24494:	beq	24500 <__assert_fail@plt+0x11910>
   24498:	cmp	r8, #10
   2449c:	bcc	24500 <__assert_fail@plt+0x11910>
   244a0:	cmp	sl, #0
   244a4:	beq	244cc <__assert_fail@plt+0x118dc>
   244a8:	sub	r1, r7, ip
   244ac:	mov	r0, sl
   244b0:	mov	r4, r3
   244b4:	bl	129e0 <strnlen@plt>
   244b8:	mov	r3, r4
   244bc:	ldrb	r0, [sl, r0]!
   244c0:	cmp	r0, #0
   244c4:	mov	ip, r7
   244c8:	bne	24500 <__assert_fail@plt+0x11910>
   244cc:	mov	r0, r5
   244d0:	mov	r4, ip
   244d4:	bl	128c0 <strlen@plt>
   244d8:	mov	r2, r0
   244dc:	mov	r0, r6
   244e0:	mov	r1, r5
   244e4:	sub	r3, fp, #88	; 0x58
   244e8:	bl	24968 <__assert_fail@plt+0x11d78>
   244ec:	mov	ip, r4
   244f0:	mov	r3, #0
   244f4:	cmp	r0, #0
   244f8:	mov	sl, #0
   244fc:	bne	24578 <__assert_fail@plt+0x11988>
   24500:	ldrb	r0, [r6]
   24504:	cmp	r0, r9
   24508:	bne	2453c <__assert_fail@plt+0x1194c>
   2450c:	mov	r0, #1
   24510:	ldrb	r1, [r5, r0]
   24514:	cmp	r1, #0
   24518:	beq	24558 <__assert_fail@plt+0x11968>
   2451c:	ldrb	r2, [r6, r0]
   24520:	cmp	r2, #0
   24524:	beq	24560 <__assert_fail@plt+0x11970>
   24528:	add	r0, r0, #1
   2452c:	cmp	r2, r1
   24530:	beq	24510 <__assert_fail@plt+0x11920>
   24534:	add	r7, r7, r0
   24538:	b	24540 <__assert_fail@plt+0x11950>
   2453c:	add	r7, r7, #1
   24540:	add	r8, r8, #1
   24544:	ldrb	r0, [r6, #1]!
   24548:	mov	r4, #0
   2454c:	cmp	r0, #0
   24550:	bne	24484 <__assert_fail@plt+0x11894>
   24554:	b	24564 <__assert_fail@plt+0x11974>
   24558:	mov	r4, r6
   2455c:	b	24564 <__assert_fail@plt+0x11974>
   24560:	mov	r4, #0
   24564:	mov	r0, r4
   24568:	sub	sp, fp, #28
   2456c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24570:	ldr	r4, [sp, #144]	; 0x90
   24574:	b	24564 <__assert_fail@plt+0x11974>
   24578:	ldr	r4, [fp, #-88]	; 0xffffffa8
   2457c:	b	24564 <__assert_fail@plt+0x11974>
   24580:	ldr	r4, [sp, #72]	; 0x48
   24584:	b	24564 <__assert_fail@plt+0x11974>
   24588:	bl	12b9c <abort@plt>
   2458c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24590:	add	fp, sp, #28
   24594:	sub	sp, sp, #132	; 0x84
   24598:	mov	r5, r2
   2459c:	mov	r4, r1
   245a0:	mov	r8, r0
   245a4:	mov	r0, r1
   245a8:	bl	3e188 <__assert_fail@plt+0x2b598>
   245ac:	mov	r6, r0
   245b0:	mov	r7, #0
   245b4:	movw	r0, #47662	; 0xba2e
   245b8:	movt	r0, #744	; 0x2e8
   245bc:	cmp	r6, r0
   245c0:	bhi	24958 <__assert_fail@plt+0x11d68>
   245c4:	mov	r0, #44	; 0x2c
   245c8:	mul	r0, r6, r0
   245cc:	cmp	r0, #4016	; 0xfb0
   245d0:	bhi	245f8 <__assert_fail@plt+0x11a08>
   245d4:	add	r0, r0, #22
   245d8:	bic	r0, r0, #7
   245dc:	sub	r0, sp, r0
   245e0:	add	r1, r0, #15
   245e4:	bic	sl, r1, #15
   245e8:	mov	sp, r0
   245ec:	cmp	sl, #0
   245f0:	bne	24608 <__assert_fail@plt+0x11a18>
   245f4:	b	24958 <__assert_fail@plt+0x11d68>
   245f8:	bl	3e048 <__assert_fail@plt+0x2b458>
   245fc:	mov	sl, r0
   24600:	cmp	sl, #0
   24604:	beq	24958 <__assert_fail@plt+0x11d68>
   24608:	str	r5, [fp, #-156]	; 0xffffff64
   2460c:	mov	r9, #0
   24610:	str	r9, [fp, #-80]	; 0xffffffb0
   24614:	str	r9, [fp, #-84]	; 0xffffffac
   24618:	strb	r9, [fp, #-76]	; 0xffffffb4
   2461c:	strb	r9, [fp, #-88]	; 0xffffffa8
   24620:	str	r4, [fp, #-72]	; 0xffffffb8
   24624:	sub	r4, fp, #88	; 0x58
   24628:	mov	r0, r4
   2462c:	bl	24e30 <__assert_fail@plt+0x12240>
   24630:	add	r0, r6, r6, lsl #2
   24634:	add	r0, sl, r0, lsl #3
   24638:	str	r0, [fp, #-148]	; 0xffffff6c
   2463c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   24640:	cmp	r0, #0
   24644:	beq	24654 <__assert_fail@plt+0x11a64>
   24648:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2464c:	cmp	r0, #0
   24650:	beq	246a4 <__assert_fail@plt+0x11ab4>
   24654:	add	r4, r4, #16
   24658:	sub	r7, fp, #88	; 0x58
   2465c:	mov	r5, sl
   24660:	mov	r0, r5
   24664:	mov	r1, r4
   24668:	bl	3e110 <__assert_fail@plt+0x2b520>
   2466c:	strb	r9, [fp, #-76]	; 0xffffffb4
   24670:	ldr	r0, [fp, #-72]	; 0xffffffb8
   24674:	ldr	r1, [fp, #-68]	; 0xffffffbc
   24678:	add	r0, r0, r1
   2467c:	str	r0, [fp, #-72]	; 0xffffffb8
   24680:	mov	r0, r7
   24684:	bl	24e30 <__assert_fail@plt+0x12240>
   24688:	add	r5, r5, #40	; 0x28
   2468c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   24690:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   24694:	cmp	r1, #0
   24698:	beq	24660 <__assert_fail@plt+0x11a70>
   2469c:	cmp	r0, #0
   246a0:	bne	24660 <__assert_fail@plt+0x11a70>
   246a4:	str	r8, [fp, #-160]	; 0xffffff60
   246a8:	mov	r0, #1
   246ac:	ldr	r3, [fp, #-148]	; 0xffffff6c
   246b0:	str	r0, [r3, #4]
   246b4:	str	r6, [fp, #-152]	; 0xffffff68
   246b8:	cmp	r6, #3
   246bc:	bcc	24788 <__assert_fail@plt+0x11b98>
   246c0:	mov	r4, #2
   246c4:	mov	r5, #0
   246c8:	b	246e8 <__assert_fail@plt+0x11af8>
   246cc:	mov	r5, #0
   246d0:	mov	r0, r4
   246d4:	str	r0, [r3, r4, lsl #2]
   246d8:	add	r4, r4, #1
   246dc:	ldr	r0, [fp, #-152]	; 0xffffff68
   246e0:	cmp	r4, r0
   246e4:	beq	24788 <__assert_fail@plt+0x11b98>
   246e8:	add	r0, r4, r4, lsl #2
   246ec:	add	r0, sl, r0, lsl #3
   246f0:	sub	r9, r0, #40	; 0x28
   246f4:	sub	r6, r0, #36	; 0x24
   246f8:	sub	r7, r0, #28
   246fc:	ldrb	r8, [r0, #-32]	; 0xffffffe0
   24700:	cmp	r8, #0
   24704:	beq	24730 <__assert_fail@plt+0x11b40>
   24708:	add	r0, r5, r5, lsl #2
   2470c:	add	r0, sl, r0, lsl #3
   24710:	ldrb	r1, [r0, #8]
   24714:	cmp	r1, #0
   24718:	beq	24730 <__assert_fail@plt+0x11b40>
   2471c:	ldr	r0, [r0, #12]
   24720:	ldr	r1, [r7]
   24724:	cmp	r1, r0
   24728:	bne	24760 <__assert_fail@plt+0x11b70>
   2472c:	b	2477c <__assert_fail@plt+0x11b8c>
   24730:	add	r0, r5, r5, lsl #2
   24734:	add	r1, sl, r0, lsl #3
   24738:	ldr	r1, [r1, #4]
   2473c:	ldr	r2, [r6]
   24740:	cmp	r2, r1
   24744:	bne	24760 <__assert_fail@plt+0x11b70>
   24748:	ldr	r1, [sl, r0, lsl #3]
   2474c:	ldr	r0, [r9]
   24750:	bl	128a8 <bcmp@plt>
   24754:	ldr	r3, [fp, #-148]	; 0xffffff6c
   24758:	cmp	r0, #0
   2475c:	beq	2477c <__assert_fail@plt+0x11b8c>
   24760:	cmp	r5, #0
   24764:	beq	246cc <__assert_fail@plt+0x11adc>
   24768:	ldr	r0, [r3, r5, lsl #2]
   2476c:	sub	r5, r5, r0
   24770:	cmp	r8, #0
   24774:	bne	24708 <__assert_fail@plt+0x11b18>
   24778:	b	24730 <__assert_fail@plt+0x11b40>
   2477c:	add	r5, r5, #1
   24780:	sub	r0, r4, r5
   24784:	b	246d4 <__assert_fail@plt+0x11ae4>
   24788:	mov	r5, #0
   2478c:	ldr	r8, [fp, #-156]	; 0xffffff64
   24790:	str	r5, [r8]
   24794:	str	r5, [fp, #-80]	; 0xffffffb0
   24798:	str	r5, [fp, #-84]	; 0xffffffac
   2479c:	str	r5, [fp, #-136]	; 0xffffff78
   247a0:	str	r5, [fp, #-140]	; 0xffffff74
   247a4:	strb	r5, [fp, #-76]	; 0xffffffb4
   247a8:	strb	r5, [fp, #-88]	; 0xffffffa8
   247ac:	ldr	r0, [fp, #-160]	; 0xffffff60
   247b0:	str	r0, [fp, #-72]	; 0xffffffb8
   247b4:	str	r0, [fp, #-128]	; 0xffffff80
   247b8:	strb	r5, [fp, #-132]	; 0xffffff7c
   247bc:	strb	r5, [fp, #-144]	; 0xffffff70
   247c0:	sub	r0, fp, #144	; 0x90
   247c4:	bl	24e30 <__assert_fail@plt+0x12240>
   247c8:	ldrb	r1, [fp, #-120]	; 0xffffff88
   247cc:	ldr	r0, [fp, #-116]	; 0xffffff8c
   247d0:	cmp	r0, #0
   247d4:	bne	247e0 <__assert_fail@plt+0x11bf0>
   247d8:	cmp	r1, #0
   247dc:	bne	2494c <__assert_fail@plt+0x11d5c>
   247e0:	clz	r1, r1
   247e4:	lsr	r1, r1, #5
   247e8:	sub	r9, fp, #144	; 0x90
   247ec:	sub	r4, fp, #88	; 0x58
   247f0:	mov	r7, #0
   247f4:	add	r3, r7, r7, lsl #2
   247f8:	add	r2, sl, r3, lsl #3
   247fc:	tst	r1, #1
   24800:	bne	24820 <__assert_fail@plt+0x11c30>
   24804:	ldrb	r1, [r2, #8]
   24808:	cmp	r1, #0
   2480c:	beq	24820 <__assert_fail@plt+0x11c30>
   24810:	ldr	r1, [r2, #12]
   24814:	cmp	r1, r0
   24818:	bne	24844 <__assert_fail@plt+0x11c54>
   2481c:	b	248a4 <__assert_fail@plt+0x11cb4>
   24820:	ldr	r2, [r2, #4]
   24824:	ldr	r0, [fp, #-124]	; 0xffffff84
   24828:	cmp	r2, r0
   2482c:	bne	24844 <__assert_fail@plt+0x11c54>
   24830:	ldr	r0, [sl, r3, lsl #3]
   24834:	ldr	r1, [fp, #-128]	; 0xffffff80
   24838:	bl	128a8 <bcmp@plt>
   2483c:	cmp	r0, #0
   24840:	beq	248a4 <__assert_fail@plt+0x11cb4>
   24844:	cmp	r7, #0
   24848:	beq	248cc <__assert_fail@plt+0x11cdc>
   2484c:	ldr	r0, [fp, #-148]	; 0xffffff6c
   24850:	ldr	r6, [r0, r7, lsl #2]
   24854:	sub	r7, r7, r6
   24858:	cmp	r6, #0
   2485c:	bne	24880 <__assert_fail@plt+0x11c90>
   24860:	b	24918 <__assert_fail@plt+0x11d28>
   24864:	strb	r5, [fp, #-76]	; 0xffffffb4
   24868:	ldr	r0, [fp, #-72]	; 0xffffffb8
   2486c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   24870:	add	r0, r0, r1
   24874:	str	r0, [fp, #-72]	; 0xffffffb8
   24878:	subs	r6, r6, #1
   2487c:	beq	24918 <__assert_fail@plt+0x11d28>
   24880:	mov	r0, r4
   24884:	bl	24e30 <__assert_fail@plt+0x12240>
   24888:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   2488c:	cmp	r0, #0
   24890:	beq	24864 <__assert_fail@plt+0x11c74>
   24894:	ldr	r0, [fp, #-60]	; 0xffffffc4
   24898:	cmp	r0, #0
   2489c:	bne	24864 <__assert_fail@plt+0x11c74>
   248a0:	b	24964 <__assert_fail@plt+0x11d74>
   248a4:	strb	r5, [fp, #-132]	; 0xffffff7c
   248a8:	ldr	r0, [fp, #-128]	; 0xffffff80
   248ac:	ldr	r1, [fp, #-124]	; 0xffffff84
   248b0:	add	r0, r0, r1
   248b4:	str	r0, [fp, #-128]	; 0xffffff80
   248b8:	add	r7, r7, #1
   248bc:	ldr	r0, [fp, #-152]	; 0xffffff68
   248c0:	cmp	r7, r0
   248c4:	bne	24918 <__assert_fail@plt+0x11d28>
   248c8:	b	24944 <__assert_fail@plt+0x11d54>
   248cc:	mov	r0, r4
   248d0:	bl	24e30 <__assert_fail@plt+0x12240>
   248d4:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   248d8:	cmp	r0, #0
   248dc:	beq	248ec <__assert_fail@plt+0x11cfc>
   248e0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   248e4:	cmp	r0, #0
   248e8:	beq	24964 <__assert_fail@plt+0x11d74>
   248ec:	mov	r7, #0
   248f0:	strb	r7, [fp, #-76]	; 0xffffffb4
   248f4:	strb	r7, [fp, #-132]	; 0xffffff7c
   248f8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   248fc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   24900:	add	r0, r0, r1
   24904:	str	r0, [fp, #-72]	; 0xffffffb8
   24908:	ldr	r0, [fp, #-128]	; 0xffffff80
   2490c:	ldr	r1, [fp, #-124]	; 0xffffff84
   24910:	add	r0, r0, r1
   24914:	str	r0, [fp, #-128]	; 0xffffff80
   24918:	mov	r0, r9
   2491c:	bl	24e30 <__assert_fail@plt+0x12240>
   24920:	ldrb	r2, [fp, #-120]	; 0xffffff88
   24924:	clz	r0, r2
   24928:	lsr	r1, r0, #5
   2492c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   24930:	cmp	r0, #0
   24934:	bne	247f4 <__assert_fail@plt+0x11c04>
   24938:	cmp	r2, #0
   2493c:	beq	247f4 <__assert_fail@plt+0x11c04>
   24940:	b	2494c <__assert_fail@plt+0x11d5c>
   24944:	ldr	r0, [fp, #-72]	; 0xffffffb8
   24948:	str	r0, [r8]
   2494c:	mov	r0, sl
   24950:	bl	3e0b8 <__assert_fail@plt+0x2b4c8>
   24954:	mov	r7, #1
   24958:	mov	r0, r7
   2495c:	sub	sp, fp, #28
   24960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24964:	bl	12b9c <abort@plt>
   24968:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2496c:	add	fp, sp, #24
   24970:	mov	r4, #0
   24974:	cmn	r2, #-536870911	; 0xe0000001
   24978:	bhi	24ab8 <__assert_fail@plt+0x11ec8>
   2497c:	mov	r8, r3
   24980:	mov	r5, r2
   24984:	mov	r6, r1
   24988:	mov	r7, r0
   2498c:	lsl	r0, r2, #2
   24990:	cmp	r0, #4016	; 0xfb0
   24994:	bhi	249bc <__assert_fail@plt+0x11dcc>
   24998:	add	r0, r0, #22
   2499c:	bic	r0, r0, #7
   249a0:	sub	r1, sp, r0
   249a4:	add	r0, r1, #15
   249a8:	bic	r0, r0, #15
   249ac:	mov	sp, r1
   249b0:	cmp	r0, #0
   249b4:	bne	249c8 <__assert_fail@plt+0x11dd8>
   249b8:	b	24ab8 <__assert_fail@plt+0x11ec8>
   249bc:	bl	3e048 <__assert_fail@plt+0x2b458>
   249c0:	cmp	r0, #0
   249c4:	beq	24ab8 <__assert_fail@plt+0x11ec8>
   249c8:	mov	r1, #1
   249cc:	str	r1, [r0, #4]
   249d0:	cmp	r5, #3
   249d4:	bcc	24a3c <__assert_fail@plt+0x11e4c>
   249d8:	mov	r1, #2
   249dc:	mov	r2, #0
   249e0:	b	249fc <__assert_fail@plt+0x11e0c>
   249e4:	add	r2, r2, #1
   249e8:	sub	r3, r1, r2
   249ec:	str	r3, [r0, r1, lsl #2]
   249f0:	add	r1, r1, #1
   249f4:	cmp	r1, r5
   249f8:	beq	24a3c <__assert_fail@plt+0x11e4c>
   249fc:	ldrb	r4, [r6, r2]
   24a00:	add	r3, r1, r6
   24a04:	ldrb	r3, [r3, #-1]
   24a08:	cmp	r3, r4
   24a0c:	beq	249e4 <__assert_fail@plt+0x11df4>
   24a10:	cmp	r2, #0
   24a14:	beq	24a30 <__assert_fail@plt+0x11e40>
   24a18:	ldr	r4, [r0, r2, lsl #2]
   24a1c:	sub	r2, r2, r4
   24a20:	ldrb	r4, [r6, r2]
   24a24:	cmp	r3, r4
   24a28:	bne	24a10 <__assert_fail@plt+0x11e20>
   24a2c:	b	249e4 <__assert_fail@plt+0x11df4>
   24a30:	mov	r2, #0
   24a34:	mov	r3, r1
   24a38:	b	249ec <__assert_fail@plt+0x11dfc>
   24a3c:	mov	r1, #0
   24a40:	str	r1, [r8]
   24a44:	ldrb	r3, [r7]
   24a48:	cmp	r3, #0
   24a4c:	beq	24ab0 <__assert_fail@plt+0x11ec0>
   24a50:	mov	r2, r7
   24a54:	b	24a70 <__assert_fail@plt+0x11e80>
   24a58:	add	r7, r7, #1
   24a5c:	add	r2, r2, #1
   24a60:	mov	r1, #0
   24a64:	ldrb	r3, [r7]
   24a68:	cmp	r3, #0
   24a6c:	beq	24ab0 <__assert_fail@plt+0x11ec0>
   24a70:	ldrb	r4, [r6, r1]
   24a74:	uxtb	r3, r3
   24a78:	cmp	r4, r3
   24a7c:	bne	24a94 <__assert_fail@plt+0x11ea4>
   24a80:	add	r1, r1, #1
   24a84:	cmp	r1, r5
   24a88:	beq	24aac <__assert_fail@plt+0x11ebc>
   24a8c:	add	r7, r7, #1
   24a90:	b	24a64 <__assert_fail@plt+0x11e74>
   24a94:	cmp	r1, #0
   24a98:	beq	24a58 <__assert_fail@plt+0x11e68>
   24a9c:	ldr	r3, [r0, r1, lsl #2]
   24aa0:	sub	r1, r1, r3
   24aa4:	add	r2, r2, r3
   24aa8:	b	24a64 <__assert_fail@plt+0x11e74>
   24aac:	str	r2, [r8]
   24ab0:	bl	3e0b8 <__assert_fail@plt+0x2b4c8>
   24ab4:	mov	r4, #1
   24ab8:	mov	r0, r4
   24abc:	sub	sp, fp, #24
   24ac0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   24ac4:	push	{r4, r5, fp, lr}
   24ac8:	add	fp, sp, #8
   24acc:	mov	r4, r1
   24ad0:	mov	r5, r0
   24ad4:	bl	128c0 <strlen@plt>
   24ad8:	mov	r1, r0
   24adc:	mov	r0, r5
   24ae0:	mov	r2, r4
   24ae4:	pop	{r4, r5, fp, lr}
   24ae8:	b	24aec <__assert_fail@plt+0x11efc>
   24aec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24af0:	add	fp, sp, #28
   24af4:	sub	sp, sp, #20
   24af8:	mov	r5, r2
   24afc:	mov	r6, r1
   24b00:	mov	r4, r0
   24b04:	add	r7, r0, r1
   24b08:	bl	12758 <__ctype_get_mb_cur_max@plt>
   24b0c:	cmp	r0, #1
   24b10:	bls	24db8 <__assert_fail@plt+0x121c8>
   24b14:	cmp	r6, #1
   24b18:	blt	24e10 <__assert_fail@plt+0x12220>
   24b1c:	and	r2, r5, #1
   24b20:	and	sl, r5, #2
   24b24:	mov	r3, #0
   24b28:	add	r8, sp, #4
   24b2c:	add	r9, sp, #8
   24b30:	mov	r5, #0
   24b34:	ldrb	r0, [r4]
   24b38:	sub	r0, r0, #32
   24b3c:	cmp	r0, #94	; 0x5e
   24b40:	bhi	24cdc <__assert_fail@plt+0x120ec>
   24b44:	add	r1, pc, #0
   24b48:	ldr	pc, [r1, r0, lsl #2]
   24b4c:	andeq	r4, r2, r8, asr #25
   24b50:	andeq	r4, r2, r8, asr #25
   24b54:	andeq	r4, r2, r8, asr #25
   24b58:	andeq	r4, r2, r8, asr #25
   24b5c:	ldrdeq	r4, [r2], -ip
   24b60:	andeq	r4, r2, r8, asr #25
   24b64:	andeq	r4, r2, r8, asr #25
   24b68:	andeq	r4, r2, r8, asr #25
   24b6c:	andeq	r4, r2, r8, asr #25
   24b70:	andeq	r4, r2, r8, asr #25
   24b74:	andeq	r4, r2, r8, asr #25
   24b78:	andeq	r4, r2, r8, asr #25
   24b7c:	andeq	r4, r2, r8, asr #25
   24b80:	andeq	r4, r2, r8, asr #25
   24b84:	andeq	r4, r2, r8, asr #25
   24b88:	andeq	r4, r2, r8, asr #25
   24b8c:	andeq	r4, r2, r8, asr #25
   24b90:	andeq	r4, r2, r8, asr #25
   24b94:	andeq	r4, r2, r8, asr #25
   24b98:	andeq	r4, r2, r8, asr #25
   24b9c:	andeq	r4, r2, r8, asr #25
   24ba0:	andeq	r4, r2, r8, asr #25
   24ba4:	andeq	r4, r2, r8, asr #25
   24ba8:	andeq	r4, r2, r8, asr #25
   24bac:	andeq	r4, r2, r8, asr #25
   24bb0:	andeq	r4, r2, r8, asr #25
   24bb4:	andeq	r4, r2, r8, asr #25
   24bb8:	andeq	r4, r2, r8, asr #25
   24bbc:	andeq	r4, r2, r8, asr #25
   24bc0:	andeq	r4, r2, r8, asr #25
   24bc4:	andeq	r4, r2, r8, asr #25
   24bc8:	andeq	r4, r2, r8, asr #25
   24bcc:	ldrdeq	r4, [r2], -ip
   24bd0:	andeq	r4, r2, r8, asr #25
   24bd4:	andeq	r4, r2, r8, asr #25
   24bd8:	andeq	r4, r2, r8, asr #25
   24bdc:	andeq	r4, r2, r8, asr #25
   24be0:	andeq	r4, r2, r8, asr #25
   24be4:	andeq	r4, r2, r8, asr #25
   24be8:	andeq	r4, r2, r8, asr #25
   24bec:	andeq	r4, r2, r8, asr #25
   24bf0:	andeq	r4, r2, r8, asr #25
   24bf4:	andeq	r4, r2, r8, asr #25
   24bf8:	andeq	r4, r2, r8, asr #25
   24bfc:	andeq	r4, r2, r8, asr #25
   24c00:	andeq	r4, r2, r8, asr #25
   24c04:	andeq	r4, r2, r8, asr #25
   24c08:	andeq	r4, r2, r8, asr #25
   24c0c:	andeq	r4, r2, r8, asr #25
   24c10:	andeq	r4, r2, r8, asr #25
   24c14:	andeq	r4, r2, r8, asr #25
   24c18:	andeq	r4, r2, r8, asr #25
   24c1c:	andeq	r4, r2, r8, asr #25
   24c20:	andeq	r4, r2, r8, asr #25
   24c24:	andeq	r4, r2, r8, asr #25
   24c28:	andeq	r4, r2, r8, asr #25
   24c2c:	andeq	r4, r2, r8, asr #25
   24c30:	andeq	r4, r2, r8, asr #25
   24c34:	andeq	r4, r2, r8, asr #25
   24c38:	andeq	r4, r2, r8, asr #25
   24c3c:	andeq	r4, r2, r8, asr #25
   24c40:	andeq	r4, r2, r8, asr #25
   24c44:	andeq	r4, r2, r8, asr #25
   24c48:	andeq	r4, r2, r8, asr #25
   24c4c:	ldrdeq	r4, [r2], -ip
   24c50:	andeq	r4, r2, r8, asr #25
   24c54:	andeq	r4, r2, r8, asr #25
   24c58:	andeq	r4, r2, r8, asr #25
   24c5c:	andeq	r4, r2, r8, asr #25
   24c60:	andeq	r4, r2, r8, asr #25
   24c64:	andeq	r4, r2, r8, asr #25
   24c68:	andeq	r4, r2, r8, asr #25
   24c6c:	andeq	r4, r2, r8, asr #25
   24c70:	andeq	r4, r2, r8, asr #25
   24c74:	andeq	r4, r2, r8, asr #25
   24c78:	andeq	r4, r2, r8, asr #25
   24c7c:	andeq	r4, r2, r8, asr #25
   24c80:	andeq	r4, r2, r8, asr #25
   24c84:	andeq	r4, r2, r8, asr #25
   24c88:	andeq	r4, r2, r8, asr #25
   24c8c:	andeq	r4, r2, r8, asr #25
   24c90:	andeq	r4, r2, r8, asr #25
   24c94:	andeq	r4, r2, r8, asr #25
   24c98:	andeq	r4, r2, r8, asr #25
   24c9c:	andeq	r4, r2, r8, asr #25
   24ca0:	andeq	r4, r2, r8, asr #25
   24ca4:	andeq	r4, r2, r8, asr #25
   24ca8:	andeq	r4, r2, r8, asr #25
   24cac:	andeq	r4, r2, r8, asr #25
   24cb0:	andeq	r4, r2, r8, asr #25
   24cb4:	andeq	r4, r2, r8, asr #25
   24cb8:	andeq	r4, r2, r8, asr #25
   24cbc:	andeq	r4, r2, r8, asr #25
   24cc0:	andeq	r4, r2, r8, asr #25
   24cc4:	andeq	r4, r2, r8, asr #25
   24cc8:	add	r5, r5, #1
   24ccc:	add	r4, r4, #1
   24cd0:	cmp	r4, r7
   24cd4:	bcc	24b34 <__assert_fail@plt+0x11f44>
   24cd8:	b	24e24 <__assert_fail@plt+0x12234>
   24cdc:	str	r2, [sp]
   24ce0:	str	r3, [sp, #12]
   24ce4:	str	r3, [sp, #8]
   24ce8:	b	24d14 <__assert_fail@plt+0x12124>
   24cec:	mvn	r1, #-2147483648	; 0x80000000
   24cf0:	sub	r1, r1, r5
   24cf4:	cmp	r0, r1
   24cf8:	bgt	24e18 <__assert_fail@plt+0x12228>
   24cfc:	add	r5, r0, r5
   24d00:	add	r4, r4, r6
   24d04:	mov	r0, r9
   24d08:	bl	1262c <mbsinit@plt>
   24d0c:	cmp	r0, #0
   24d10:	bne	24dac <__assert_fail@plt+0x121bc>
   24d14:	sub	r2, r7, r4
   24d18:	mov	r0, r8
   24d1c:	mov	r1, r4
   24d20:	mov	r3, r9
   24d24:	bl	2edb8 <__assert_fail@plt+0x1c1c8>
   24d28:	cmp	r0, #0
   24d2c:	beq	24d48 <__assert_fail@plt+0x12158>
   24d30:	mov	r6, r0
   24d34:	cmn	r0, #2
   24d38:	beq	24d84 <__assert_fail@plt+0x12194>
   24d3c:	cmn	r6, #1
   24d40:	bne	24d4c <__assert_fail@plt+0x1215c>
   24d44:	b	24d98 <__assert_fail@plt+0x121a8>
   24d48:	mov	r6, #1
   24d4c:	ldr	r0, [sp, #4]
   24d50:	bl	1256c <wcwidth@plt>
   24d54:	cmp	r0, #0
   24d58:	bpl	24cec <__assert_fail@plt+0x120fc>
   24d5c:	cmp	sl, #0
   24d60:	bne	24e20 <__assert_fail@plt+0x12230>
   24d64:	ldr	r0, [sp, #4]
   24d68:	bl	126d4 <iswcntrl@plt>
   24d6c:	cmp	r0, #0
   24d70:	bne	24d00 <__assert_fail@plt+0x12110>
   24d74:	cmn	r5, #-2147483647	; 0x80000001
   24d78:	beq	24e18 <__assert_fail@plt+0x12228>
   24d7c:	add	r5, r5, #1
   24d80:	b	24d00 <__assert_fail@plt+0x12110>
   24d84:	ldr	r0, [sp]
   24d88:	cmp	r0, #0
   24d8c:	mov	r4, r7
   24d90:	beq	24da8 <__assert_fail@plt+0x121b8>
   24d94:	b	24e20 <__assert_fail@plt+0x12230>
   24d98:	ldr	r0, [sp]
   24d9c:	cmp	r0, #0
   24da0:	bne	24e20 <__assert_fail@plt+0x12230>
   24da4:	add	r4, r4, #1
   24da8:	add	r5, r5, #1
   24dac:	ldr	r2, [sp]
   24db0:	mov	r3, #0
   24db4:	b	24cd0 <__assert_fail@plt+0x120e0>
   24db8:	cmp	r6, #1
   24dbc:	blt	24e10 <__assert_fail@plt+0x12220>
   24dc0:	and	r6, r5, #2
   24dc4:	bl	1286c <__ctype_b_loc@plt>
   24dc8:	ldr	r0, [r0]
   24dcc:	mov	r5, #0
   24dd0:	b	24ddc <__assert_fail@plt+0x121ec>
   24dd4:	cmp	r4, r7
   24dd8:	bcs	24e24 <__assert_fail@plt+0x12234>
   24ddc:	ldrb	r1, [r4], #1
   24de0:	add	r1, r0, r1, lsl #1
   24de4:	ldrh	r1, [r1]
   24de8:	tst	r1, #16384	; 0x4000
   24dec:	bne	24e00 <__assert_fail@plt+0x12210>
   24df0:	cmp	r6, #0
   24df4:	bne	24e20 <__assert_fail@plt+0x12230>
   24df8:	tst	r1, #2
   24dfc:	bne	24dd4 <__assert_fail@plt+0x121e4>
   24e00:	cmn	r5, #-2147483647	; 0x80000001
   24e04:	beq	24e18 <__assert_fail@plt+0x12228>
   24e08:	add	r5, r5, #1
   24e0c:	b	24dd4 <__assert_fail@plt+0x121e4>
   24e10:	mov	r5, #0
   24e14:	b	24e24 <__assert_fail@plt+0x12234>
   24e18:	mvn	r5, #-2147483648	; 0x80000000
   24e1c:	b	24e24 <__assert_fail@plt+0x12234>
   24e20:	mvn	r5, #0
   24e24:	mov	r0, r5
   24e28:	sub	sp, fp, #28
   24e2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24e30:	push	{r4, r5, r6, r7, fp, lr}
   24e34:	add	fp, sp, #16
   24e38:	mov	r4, r0
   24e3c:	ldrb	r0, [r0, #12]
   24e40:	cmp	r0, #0
   24e44:	popne	{r4, r5, r6, r7, fp, pc}
   24e48:	ldrb	r0, [r4]
   24e4c:	cmp	r0, #0
   24e50:	bne	24e9c <__assert_fail@plt+0x122ac>
   24e54:	ldr	r0, [r4, #16]
   24e58:	ldrb	r0, [r0]
   24e5c:	bl	3e160 <__assert_fail@plt+0x2b570>
   24e60:	cmp	r0, #0
   24e64:	beq	24e84 <__assert_fail@plt+0x12294>
   24e68:	mov	r0, #1
   24e6c:	str	r0, [r4, #20]
   24e70:	ldr	r1, [r4, #16]
   24e74:	ldrb	r1, [r1]
   24e78:	strb	r0, [r4, #24]
   24e7c:	str	r1, [r4, #28]
   24e80:	b	24f50 <__assert_fail@plt+0x12360>
   24e84:	add	r0, r4, #4
   24e88:	bl	1262c <mbsinit@plt>
   24e8c:	cmp	r0, #0
   24e90:	beq	24f5c <__assert_fail@plt+0x1236c>
   24e94:	mov	r0, #1
   24e98:	strb	r0, [r4]
   24e9c:	ldr	r7, [r4, #16]
   24ea0:	bl	12758 <__ctype_get_mb_cur_max@plt>
   24ea4:	mov	r1, r0
   24ea8:	mov	r0, r7
   24eac:	bl	2b11c <__assert_fail@plt+0x1852c>
   24eb0:	mov	r2, r0
   24eb4:	add	r6, r4, #28
   24eb8:	add	r5, r4, #4
   24ebc:	mov	r0, r6
   24ec0:	mov	r1, r7
   24ec4:	mov	r3, r5
   24ec8:	bl	2edb8 <__assert_fail@plt+0x1c1c8>
   24ecc:	str	r0, [r4, #20]
   24ed0:	cmn	r0, #2
   24ed4:	beq	24f3c <__assert_fail@plt+0x1234c>
   24ed8:	cmp	r0, #0
   24edc:	beq	24ef8 <__assert_fail@plt+0x12308>
   24ee0:	cmn	r0, #1
   24ee4:	bne	24f1c <__assert_fail@plt+0x1232c>
   24ee8:	mov	r0, #0
   24eec:	strb	r0, [r4, #24]
   24ef0:	mov	r0, #1
   24ef4:	b	24f4c <__assert_fail@plt+0x1235c>
   24ef8:	mov	r0, #1
   24efc:	str	r0, [r4, #20]
   24f00:	ldr	r0, [r4, #16]
   24f04:	ldrb	r0, [r0]
   24f08:	cmp	r0, #0
   24f0c:	bne	24f7c <__assert_fail@plt+0x1238c>
   24f10:	ldr	r0, [r6]
   24f14:	cmp	r0, #0
   24f18:	bne	24f9c <__assert_fail@plt+0x123ac>
   24f1c:	mov	r0, #1
   24f20:	strb	r0, [r4, #24]
   24f24:	mov	r0, r5
   24f28:	bl	1262c <mbsinit@plt>
   24f2c:	cmp	r0, #0
   24f30:	movne	r0, #0
   24f34:	strbne	r0, [r4]
   24f38:	b	24f50 <__assert_fail@plt+0x12360>
   24f3c:	ldr	r0, [r4, #16]
   24f40:	bl	128c0 <strlen@plt>
   24f44:	mov	r1, #0
   24f48:	strb	r1, [r4, #24]
   24f4c:	str	r0, [r4, #20]
   24f50:	mov	r0, #1
   24f54:	strb	r0, [r4, #12]
   24f58:	pop	{r4, r5, r6, r7, fp, pc}
   24f5c:	movw	r0, #13832	; 0x3608
   24f60:	movt	r0, #4
   24f64:	movw	r1, #13855	; 0x361f
   24f68:	movt	r1, #4
   24f6c:	movw	r3, #13867	; 0x362b
   24f70:	movt	r3, #4
   24f74:	mov	r2, #143	; 0x8f
   24f78:	bl	12bf0 <__assert_fail@plt>
   24f7c:	movw	r0, #13915	; 0x365b
   24f80:	movt	r0, #4
   24f84:	movw	r1, #13855	; 0x361f
   24f88:	movt	r1, #4
   24f8c:	movw	r3, #13867	; 0x362b
   24f90:	movt	r3, #4
   24f94:	mov	r2, #171	; 0xab
   24f98:	bl	12bf0 <__assert_fail@plt>
   24f9c:	movw	r0, #13938	; 0x3672
   24fa0:	movt	r0, #4
   24fa4:	movw	r1, #13855	; 0x361f
   24fa8:	movt	r1, #4
   24fac:	movw	r3, #13867	; 0x362b
   24fb0:	movt	r3, #4
   24fb4:	mov	r2, #172	; 0xac
   24fb8:	bl	12bf0 <__assert_fail@plt>
   24fbc:	ldr	r2, [r0, #16]
   24fc0:	add	r1, r2, r1
   24fc4:	str	r1, [r0, #16]
   24fc8:	bx	lr
   24fcc:	ldrb	r3, [r1]
   24fd0:	mov	r2, r0
   24fd4:	strb	r3, [r2], #4
   24fd8:	cmp	r3, #0
   24fdc:	beq	24fec <__assert_fail@plt+0x123fc>
   24fe0:	ldmib	r1, {r3, ip}
   24fe4:	stm	r2, {r3, ip}
   24fe8:	b	24ff8 <__assert_fail@plt+0x12408>
   24fec:	mov	r3, #0
   24ff0:	str	r3, [r2]
   24ff4:	str	r3, [r2, #4]
   24ff8:	ldrb	r2, [r1, #12]
   24ffc:	strb	r2, [r0, #12]
   25000:	add	r0, r0, #16
   25004:	add	r1, r1, #16
   25008:	b	3e110 <__assert_fail@plt+0x2b520>
   2500c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25010:	add	fp, sp, #28
   25014:	sub	sp, sp, #4
   25018:	mov	r5, r0
   2501c:	ldrb	r7, [r0]
   25020:	and	r0, r7, #248	; 0xf8
   25024:	cmp	r0, #48	; 0x30
   25028:	bne	25094 <__assert_fail@plt+0x124a4>
   2502c:	mov	r4, #0
   25030:	mov	r0, #0
   25034:	mov	r1, r5
   25038:	mov	r6, r5
   2503c:	ldrb	r2, [r6], #1
   25040:	add	r0, r2, r0, lsl #3
   25044:	sub	r0, r0, #48	; 0x30
   25048:	cmp	r4, r0, lsr #12
   2504c:	bne	25428 <__assert_fail@plt+0x12838>
   25050:	ldrb	r2, [r1, #1]
   25054:	and	r1, r2, #248	; 0xf8
   25058:	cmp	r1, #48	; 0x30
   2505c:	mov	r1, r6
   25060:	beq	2503c <__assert_fail@plt+0x1244c>
   25064:	cmp	r2, #0
   25068:	bne	25428 <__assert_fail@plt+0x12838>
   2506c:	bl	25444 <__assert_fail@plt+0x12854>
   25070:	sub	r2, r6, r5
   25074:	and	r3, r0, #3072	; 0xc00
   25078:	movw	r7, #1023	; 0x3ff
   2507c:	movw	r1, #4095	; 0xfff
   25080:	cmp	r2, #5
   25084:	orrlt	r1, r3, r7
   25088:	sub	sp, fp, #28
   2508c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25090:	b	25448 <__assert_fail@plt+0x12858>
   25094:	mov	r1, #1
   25098:	mvn	r2, #42	; 0x2a
   2509c:	movw	r8, #5
   250a0:	movt	r8, #4
   250a4:	mov	r3, #1
   250a8:	mov	r0, #1
   250ac:	b	250c8 <__assert_fail@plt+0x124d8>
   250b0:	cmp	r7, #0
   250b4:	beq	250e8 <__assert_fail@plt+0x124f8>
   250b8:	mov	r6, #0
   250bc:	add	r0, r6, r0
   250c0:	ldrb	r7, [r5, r3]
   250c4:	add	r3, r3, #1
   250c8:	uxtab	r6, r2, r7
   250cc:	uxtb	r7, r7
   250d0:	cmp	r6, #18
   250d4:	bhi	250b0 <__assert_fail@plt+0x124c0>
   250d8:	tst	r8, r1, lsl r6
   250dc:	mov	r6, #1
   250e0:	bne	250bc <__assert_fail@plt+0x124cc>
   250e4:	b	250b0 <__assert_fail@plt+0x124c0>
   250e8:	mov	r1, #16
   250ec:	bl	2b6d8 <__assert_fail@plt+0x18ae8>
   250f0:	mov	r4, r0
   250f4:	mov	r9, #0
   250f8:	mov	ip, #1
   250fc:	mvn	lr, #87	; 0x57
   25100:	mov	sl, #0
   25104:	mov	r1, #0
   25108:	b	25118 <__assert_fail@plt+0x12528>
   2510c:	movw	r0, #4095	; 0xfff
   25110:	orr	r1, r1, r0
   25114:	add	r5, r5, #1
   25118:	ldrb	r0, [r5]
   2511c:	sub	r2, r0, #97	; 0x61
   25120:	cmp	r2, #20
   25124:	bhi	25198 <__assert_fail@plt+0x125a8>
   25128:	mov	r0, #2496	; 0x9c0
   2512c:	add	r3, pc, #0
   25130:	ldr	pc, [r3, r2, lsl #2]
   25134:	andeq	r5, r2, ip, lsl #2
   25138:	andeq	r5, r2, ip, lsl r4
   2513c:	andeq	r5, r2, ip, lsl r4
   25140:	andeq	r5, r2, ip, lsl r4
   25144:	andeq	r5, r2, ip, lsl r4
   25148:	andeq	r5, r2, ip, lsl r4
   2514c:	andeq	r5, r2, r8, lsl #3
   25150:	andeq	r5, r2, ip, lsl r4
   25154:	andeq	r5, r2, ip, lsl r4
   25158:	andeq	r5, r2, ip, lsl r4
   2515c:	andeq	r5, r2, ip, lsl r4
   25160:	andeq	r5, r2, ip, lsl r4
   25164:	andeq	r5, r2, ip, lsl r4
   25168:	andeq	r5, r2, ip, lsl r4
   2516c:	muleq	r2, r0, r1
   25170:	andeq	r5, r2, ip, lsl r4
   25174:	andeq	r5, r2, ip, lsl r4
   25178:	andeq	r5, r2, ip, lsl r4
   2517c:	andeq	r5, r2, ip, lsl r4
   25180:	andeq	r5, r2, ip, lsl r4
   25184:	andeq	r5, r2, r0, lsl r1
   25188:	movw	r0, #1080	; 0x438
   2518c:	b	25110 <__assert_fail@plt+0x12520>
   25190:	movw	r0, #519	; 0x207
   25194:	b	25110 <__assert_fail@plt+0x12520>
   25198:	sub	r0, r0, #43	; 0x2b
   2519c:	cmp	r0, #18
   251a0:	bhi	2541c <__assert_fail@plt+0x1282c>
   251a4:	tst	r8, ip, lsl r0
   251a8:	beq	2541c <__assert_fail@plt+0x1282c>
   251ac:	ldrb	r6, [r5]
   251b0:	mov	r2, r5
   251b4:	ldrb	r7, [r2, #1]!
   251b8:	sub	r0, r7, #48	; 0x30
   251bc:	cmp	r0, #8
   251c0:	bcs	25228 <__assert_fail@plt+0x12638>
   251c4:	mov	r0, #0
   251c8:	mov	r5, r2
   251cc:	ldrb	r3, [r5], #1
   251d0:	add	r0, r3, r0, lsl #3
   251d4:	sub	r0, r0, #48	; 0x30
   251d8:	cmp	r9, r0, lsr #12
   251dc:	bne	2541c <__assert_fail@plt+0x1282c>
   251e0:	ldrb	r3, [r2, #1]
   251e4:	and	r2, r3, #248	; 0xf8
   251e8:	cmp	r2, #48	; 0x30
   251ec:	mov	r2, r5
   251f0:	beq	251cc <__assert_fail@plt+0x125dc>
   251f4:	cmp	r1, #0
   251f8:	bne	2541c <__assert_fail@plt+0x1282c>
   251fc:	cmp	r3, #44	; 0x2c
   25200:	cmpne	r3, #0
   25204:	bne	2541c <__assert_fail@plt+0x1282c>
   25208:	str	r6, [sp]
   2520c:	bl	25444 <__assert_fail@plt+0x12854>
   25210:	mvn	lr, #87	; 0x57
   25214:	mov	ip, #1
   25218:	mov	r6, #1
   2521c:	movw	r1, #4095	; 0xfff
   25220:	movw	r3, #4095	; 0xfff
   25224:	b	25364 <__assert_fail@plt+0x12774>
   25228:	cmp	r7, #103	; 0x67
   2522c:	str	r6, [sp]
   25230:	beq	25258 <__assert_fail@plt+0x12668>
   25234:	cmp	r7, #111	; 0x6f
   25238:	beq	2526c <__assert_fail@plt+0x1267c>
   2523c:	cmp	r7, #117	; 0x75
   25240:	bne	25280 <__assert_fail@plt+0x12690>
   25244:	add	r5, r5, #2
   25248:	mov	r6, #3
   2524c:	mov	r3, #0
   25250:	mov	r0, #448	; 0x1c0
   25254:	b	25364 <__assert_fail@plt+0x12774>
   25258:	add	r5, r5, #2
   2525c:	mov	r6, #3
   25260:	mov	r3, #0
   25264:	mov	r0, #56	; 0x38
   25268:	b	25364 <__assert_fail@plt+0x12774>
   2526c:	add	r5, r5, #2
   25270:	mov	r6, #3
   25274:	mov	r3, #0
   25278:	mov	r0, #7
   2527c:	b	25364 <__assert_fail@plt+0x12774>
   25280:	add	r3, r5, #2
   25284:	mov	r2, #1
   25288:	mov	r0, #0
   2528c:	b	2529c <__assert_fail@plt+0x126ac>
   25290:	orr	r0, r0, #512	; 0x200
   25294:	mov	r2, r6
   25298:	ldrb	r7, [r3], #1
   2529c:	mov	r6, r2
   252a0:	uxtab	r7, lr, r7
   252a4:	cmp	r7, #32
   252a8:	bhi	2535c <__assert_fail@plt+0x1276c>
   252ac:	mov	r2, #2
   252b0:	add	r5, pc, #0
   252b4:	ldr	pc, [r5, r7, lsl #2]
   252b8:	muleq	r2, r8, r2
   252bc:	andeq	r5, r2, ip, asr r3
   252c0:	andeq	r5, r2, ip, asr r3
   252c4:	andeq	r5, r2, ip, asr r3
   252c8:	andeq	r5, r2, ip, asr r3
   252cc:	andeq	r5, r2, ip, asr r3
   252d0:	andeq	r5, r2, ip, asr r3
   252d4:	andeq	r5, r2, ip, asr r3
   252d8:	andeq	r5, r2, ip, asr r3
   252dc:	andeq	r5, r2, ip, asr r3
   252e0:	andeq	r5, r2, ip, asr r3
   252e4:	andeq	r5, r2, ip, asr r3
   252e8:	andeq	r5, r2, ip, asr r3
   252ec:	andeq	r5, r2, ip, asr r3
   252f0:	andeq	r5, r2, ip, asr r3
   252f4:	andeq	r5, r2, ip, asr r3
   252f8:	andeq	r5, r2, ip, asr r3
   252fc:	andeq	r5, r2, ip, asr r3
   25300:	andeq	r5, r2, ip, asr r3
   25304:	andeq	r5, r2, ip, asr r3
   25308:	andeq	r5, r2, ip, asr r3
   2530c:	andeq	r5, r2, ip, asr r3
   25310:	andeq	r5, r2, ip, asr r3
   25314:	andeq	r5, r2, ip, asr r3
   25318:	andeq	r5, r2, ip, asr r3
   2531c:	andeq	r5, r2, ip, asr r3
   25320:	andeq	r5, r2, ip, lsr r3
   25324:	andeq	r5, r2, r4, asr #6
   25328:	muleq	r2, r0, r2
   2532c:	andeq	r5, r2, ip, asr r3
   25330:	andeq	r5, r2, ip, asr r3
   25334:	andeq	r5, r2, ip, asr #6
   25338:	andeq	r5, r2, r4, asr r3
   2533c:	orr	r0, r0, #292	; 0x124
   25340:	b	25294 <__assert_fail@plt+0x126a4>
   25344:	orr	r0, r0, #3072	; 0xc00
   25348:	b	25294 <__assert_fail@plt+0x126a4>
   2534c:	orr	r0, r0, #146	; 0x92
   25350:	b	25294 <__assert_fail@plt+0x126a4>
   25354:	orr	r0, r0, #73	; 0x49
   25358:	b	25294 <__assert_fail@plt+0x126a4>
   2535c:	sub	r5, r3, #1
   25360:	mov	r3, #0
   25364:	mov	r2, r4
   25368:	ldr	r7, [sp]
   2536c:	strb	r7, [r2, sl, lsl #4]!
   25370:	str	r1, [r2, #4]
   25374:	str	r0, [r2, #8]
   25378:	strb	r6, [r2, #1]
   2537c:	cmp	r3, #0
   25380:	bne	25390 <__assert_fail@plt+0x127a0>
   25384:	cmp	r1, #0
   25388:	andne	r0, r0, r1
   2538c:	mov	r3, r0
   25390:	add	r0, sl, #1
   25394:	add	r2, r4, sl, lsl #4
   25398:	str	r3, [r2, #12]
   2539c:	ldrb	r2, [r5]
   253a0:	sub	r2, r2, #43	; 0x2b
   253a4:	cmp	r2, #18
   253a8:	bhi	25410 <__assert_fail@plt+0x12820>
   253ac:	add	r3, pc, #4
   253b0:	mov	sl, r0
   253b4:	ldr	pc, [r3, r2, lsl #2]
   253b8:	andeq	r5, r2, ip, lsr #3
   253bc:	andeq	r5, r2, r4, lsl #8
   253c0:	andeq	r5, r2, ip, lsr #3
   253c4:	andeq	r5, r2, r0, lsl r4
   253c8:	andeq	r5, r2, r0, lsl r4
   253cc:	andeq	r5, r2, r0, lsl r4
   253d0:	andeq	r5, r2, r0, lsl r4
   253d4:	andeq	r5, r2, r0, lsl r4
   253d8:	andeq	r5, r2, r0, lsl r4
   253dc:	andeq	r5, r2, r0, lsl r4
   253e0:	andeq	r5, r2, r0, lsl r4
   253e4:	andeq	r5, r2, r0, lsl r4
   253e8:	andeq	r5, r2, r0, lsl r4
   253ec:	andeq	r5, r2, r0, lsl r4
   253f0:	andeq	r5, r2, r0, lsl r4
   253f4:	andeq	r5, r2, r0, lsl r4
   253f8:	andeq	r5, r2, r0, lsl r4
   253fc:	andeq	r5, r2, r0, lsl r4
   25400:	andeq	r5, r2, ip, lsr #3
   25404:	add	r5, r5, #1
   25408:	mov	sl, r0
   2540c:	b	25104 <__assert_fail@plt+0x12514>
   25410:	ldrb	r1, [r5]
   25414:	cmp	r1, #0
   25418:	beq	25434 <__assert_fail@plt+0x12844>
   2541c:	mov	r0, r4
   25420:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   25424:	mov	r4, #0
   25428:	mov	r0, r4
   2542c:	sub	sp, fp, #28
   25430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25434:	add	r0, r4, r0, lsl #4
   25438:	mov	r1, #0
   2543c:	strb	r1, [r0, #1]
   25440:	b	25428 <__assert_fail@plt+0x12838>
   25444:	bx	lr
   25448:	push	{r4, r5, fp, lr}
   2544c:	add	fp, sp, #8
   25450:	mov	r4, r1
   25454:	mov	r5, r0
   25458:	mov	r0, #32
   2545c:	bl	2b63c <__assert_fail@plt+0x18a4c>
   25460:	mov	r1, #0
   25464:	strb	r1, [r0, #17]
   25468:	movw	r1, #4095	; 0xfff
   2546c:	stmib	r0, {r1, r5}
   25470:	str	r4, [r0, #12]
   25474:	movw	r1, #317	; 0x13d
   25478:	strh	r1, [r0]
   2547c:	pop	{r4, r5, fp, pc}
   25480:	push	{fp, lr}
   25484:	mov	fp, sp
   25488:	sub	sp, sp, #104	; 0x68
   2548c:	mov	r1, sp
   25490:	bl	3ea04 <__assert_fail@plt+0x2be14>
   25494:	mov	r1, r0
   25498:	mov	r0, #0
   2549c:	cmp	r1, #0
   254a0:	beq	254ac <__assert_fail@plt+0x128bc>
   254a4:	mov	sp, fp
   254a8:	pop	{fp, pc}
   254ac:	ldr	r0, [sp, #16]
   254b0:	movw	r1, #4095	; 0xfff
   254b4:	bl	25448 <__assert_fail@plt+0x12858>
   254b8:	mov	sp, fp
   254bc:	pop	{fp, pc}
   254c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   254c4:	add	fp, sp, #24
   254c8:	bfc	r0, #12, #20
   254cc:	ldrb	r4, [r3, #1]
   254d0:	ldr	ip, [fp, #8]
   254d4:	cmp	r4, #0
   254d8:	beq	255b8 <__assert_fail@plt+0x129c8>
   254dc:	add	r3, r3, #8
   254e0:	cmp	r1, #0
   254e4:	mov	lr, r1
   254e8:	movwne	lr, #3072	; 0xc00
   254ec:	mov	r9, #0
   254f0:	movw	r8, #4095	; 0xfff
   254f4:	b	25510 <__assert_fail@plt+0x12920>
   254f8:	bic	r0, r0, r3
   254fc:	orr	r9, r3, r9
   25500:	add	r3, r5, #16
   25504:	ldrb	r4, [r5, #9]
   25508:	cmp	r4, #0
   2550c:	beq	255bc <__assert_fail@plt+0x129cc>
   25510:	mov	r5, r3
   25514:	ldr	r7, [r3, #-4]
   25518:	ldr	r3, [r3]
   2551c:	ldr	r6, [r5, #4]
   25520:	bic	r6, lr, r6
   25524:	uxtb	r4, r4
   25528:	cmp	r4, #2
   2552c:	beq	25558 <__assert_fail@plt+0x12968>
   25530:	cmp	r4, #3
   25534:	bne	25564 <__assert_fail@plt+0x12974>
   25538:	and	r4, r3, r0
   2553c:	tst	r4, #146	; 0x92
   25540:	mov	r3, r4
   25544:	orrne	r3, r3, #146	; 0x92
   25548:	tst	r4, #292	; 0x124
   2554c:	orrne	r3, r3, #292	; 0x124
   25550:	tst	r4, #73	; 0x49
   25554:	b	25560 <__assert_fail@plt+0x12970>
   25558:	and	r4, r0, #73	; 0x49
   2555c:	orrs	r4, r4, r1
   25560:	orrne	r3, r3, #73	; 0x49
   25564:	cmp	r7, #0
   25568:	mov	r4, r7
   2556c:	mvneq	r4, r2
   25570:	bic	r4, r4, r6
   25574:	and	r3, r4, r3
   25578:	ldrb	r4, [r5, #-8]
   2557c:	cmp	r4, #43	; 0x2b
   25580:	beq	255b0 <__assert_fail@plt+0x129c0>
   25584:	cmp	r4, #45	; 0x2d
   25588:	beq	254f8 <__assert_fail@plt+0x12908>
   2558c:	cmp	r4, #61	; 0x3d
   25590:	bne	25500 <__assert_fail@plt+0x12910>
   25594:	mvn	r4, r7
   25598:	cmp	r7, #0
   2559c:	orrne	r6, r6, r4
   255a0:	and	r0, r6, r0
   255a4:	orr	r0, r3, r0
   255a8:	bic	r3, r8, r6
   255ac:	b	254fc <__assert_fail@plt+0x1290c>
   255b0:	orr	r0, r3, r0
   255b4:	b	254fc <__assert_fail@plt+0x1290c>
   255b8:	mov	r9, #0
   255bc:	cmp	ip, #0
   255c0:	strne	r9, [ip]
   255c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   255c8:	push	{fp, lr}
   255cc:	mov	fp, sp
   255d0:	mov	r4, r0
   255d4:	movw	r0, #21768	; 0x5508
   255d8:	movt	r0, #5
   255dc:	ldr	r5, [r0]
   255e0:	movw	r1, #13956	; 0x3684
   255e4:	movt	r1, #4
   255e8:	mov	r0, #0
   255ec:	mov	r2, #5
   255f0:	bl	12674 <dcgettext@plt>
   255f4:	mov	r2, r0
   255f8:	mov	r0, r5
   255fc:	mov	r1, r4
   25600:	bl	127b8 <error@plt>
   25604:	bl	12b9c <abort@plt>
   25608:	push	{fp, lr}
   2560c:	mov	fp, sp
   25610:	mov	r4, r0
   25614:	movw	r0, #21768	; 0x5508
   25618:	movt	r0, #5
   2561c:	ldr	r5, [r0]
   25620:	movw	r1, #13999	; 0x36af
   25624:	movt	r1, #4
   25628:	mov	r0, #0
   2562c:	mov	r2, #5
   25630:	bl	12674 <dcgettext@plt>
   25634:	mov	r2, r0
   25638:	mov	r0, r5
   2563c:	mov	r1, r4
   25640:	bl	127b8 <error@plt>
   25644:	bl	12b9c <abort@plt>
   25648:	sub	sp, sp, #4
   2564c:	push	{fp, lr}
   25650:	mov	fp, sp
   25654:	sub	sp, sp, #4
   25658:	str	r3, [fp, #8]
   2565c:	mov	r3, #0
   25660:	tst	r2, #64	; 0x40
   25664:	ldrne	r3, [fp, #8]
   25668:	bl	128e4 <openat64@plt>
   2566c:	bl	2b158 <__assert_fail@plt+0x18568>
   25670:	mov	sp, fp
   25674:	pop	{fp, lr}
   25678:	add	sp, sp, #4
   2567c:	bx	lr
   25680:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25684:	add	fp, sp, #28
   25688:	sub	sp, sp, #372	; 0x174
   2568c:	sub	sp, sp, #1024	; 0x400
   25690:	mov	ip, r0
   25694:	vmov.i32	q8, #0	; 0x00000000
   25698:	mov	r0, #52	; 0x34
   2569c:	sub	r2, fp, #88	; 0x58
   256a0:	mov	r1, r2
   256a4:	vst1.64	{d16-d17}, [r1], r0
   256a8:	mov	r4, #0
   256ac:	str	r4, [r1]
   256b0:	add	r0, r2, #32
   256b4:	str	r0, [sp, #96]	; 0x60
   256b8:	vst1.64	{d16-d17}, [r0]
   256bc:	add	r0, r2, #16
   256c0:	str	r0, [sp, #92]	; 0x5c
   256c4:	vst1.64	{d16-d17}, [r0]
   256c8:	str	r4, [fp, #-40]	; 0xffffffd8
   256cc:	strh	r4, [fp, #-128]	; 0xffffff80
   256d0:	add	r0, ip, #32
   256d4:	str	r0, [sp, #88]	; 0x58
   256d8:	add	r0, ip, #8
   256dc:	str	r0, [sp, #84]	; 0x54
   256e0:	add	r0, ip, #40	; 0x28
   256e4:	str	r0, [sp, #80]	; 0x50
   256e8:	add	r0, ip, #56	; 0x38
   256ec:	str	r0, [sp, #104]	; 0x68
   256f0:	add	r0, ip, #64	; 0x40
   256f4:	str	r0, [sp, #100]	; 0x64
   256f8:	add	r0, ip, #88	; 0x58
   256fc:	str	r0, [sp, #72]	; 0x48
   25700:	mvn	r3, #1
   25704:	add	sl, sp, #176	; 0xb0
   25708:	sub	lr, fp, #128	; 0x80
   2570c:	mov	r5, #0
   25710:	str	ip, [sp, #112]	; 0x70
   25714:	cmp	r4, #12
   25718:	bne	2574c <__assert_fail@plt+0x12b5c>
   2571c:	b	26a80 <__assert_fail@plt+0x13e90>
   25720:	movw	r1, #14990	; 0x3a8e
   25724:	movt	r1, #4
   25728:	add	r0, r1, r0
   2572c:	ldrsb	r4, [r0]
   25730:	add	r5, r5, #1
   25734:	add	r0, lr, r5, lsl #1
   25738:	strh	r4, [r0]
   2573c:	cmp	r5, #18
   25740:	bgt	26a88 <__assert_fail@plt+0x13e98>
   25744:	cmp	r4, #12
   25748:	beq	26a80 <__assert_fail@plt+0x13e90>
   2574c:	movw	r0, #14048	; 0x36e0
   25750:	movt	r0, #4
   25754:	add	r0, r0, r4
   25758:	ldrsb	r6, [r0]
   2575c:	cmn	r6, #93	; 0x5d
   25760:	beq	257f8 <__assert_fail@plt+0x12c08>
   25764:	cmn	r3, #2
   25768:	bne	25784 <__assert_fail@plt+0x12b94>
   2576c:	sub	r0, fp, #88	; 0x58
   25770:	mov	r1, ip
   25774:	bl	26aa0 <__assert_fail@plt+0x13eb0>
   25778:	sub	lr, fp, #128	; 0x80
   2577c:	ldr	ip, [sp, #112]	; 0x70
   25780:	mov	r3, r0
   25784:	cmp	r3, #1
   25788:	blt	257ac <__assert_fail@plt+0x12bbc>
   2578c:	lsr	r1, r3, #1
   25790:	mov	r0, #2
   25794:	cmp	r1, #138	; 0x8a
   25798:	bhi	257b4 <__assert_fail@plt+0x12bc4>
   2579c:	movw	r0, #14162	; 0x3752
   257a0:	movt	r0, #4
   257a4:	ldrb	r0, [r0, r3]
   257a8:	b	257b4 <__assert_fail@plt+0x12bc4>
   257ac:	mov	r0, #0
   257b0:	mov	r3, #0
   257b4:	add	r1, r0, r6
   257b8:	cmp	r1, #112	; 0x70
   257bc:	bhi	257f8 <__assert_fail@plt+0x12c08>
   257c0:	movw	r2, #14440	; 0x3868
   257c4:	movt	r2, #4
   257c8:	add	r2, r2, r1
   257cc:	ldrsb	r2, [r2]
   257d0:	cmp	r0, r2
   257d4:	bne	257f8 <__assert_fail@plt+0x12c08>
   257d8:	movw	r0, #14553	; 0x38d9
   257dc:	movt	r0, #4
   257e0:	ldrb	r4, [r0, r1]
   257e4:	orr	r0, r1, #4
   257e8:	cmp	r0, #111	; 0x6f
   257ec:	bne	25a68 <__assert_fail@plt+0x12e78>
   257f0:	rsb	r2, r4, #0
   257f4:	b	2580c <__assert_fail@plt+0x12c1c>
   257f8:	movw	r0, #14666	; 0x394a
   257fc:	movt	r0, #4
   25800:	ldrb	r2, [r0, r4]
   25804:	cmp	r2, #0
   25808:	beq	26a90 <__assert_fail@plt+0x13ea0>
   2580c:	movw	r0, #14780	; 0x39bc
   25810:	movt	r0, #4
   25814:	ldrb	r0, [r0, r2]
   25818:	str	r0, [sp, #120]	; 0x78
   2581c:	rsb	r0, r0, #1
   25820:	rsb	r0, r0, r0, lsl #3
   25824:	mov	r1, sl
   25828:	ldr	r0, [r1, r0, lsl #3]!
   2582c:	str	r0, [sp, #172]	; 0xac
   25830:	ldr	r0, [r1, #44]	; 0x2c
   25834:	str	r0, [sp, #128]	; 0x80
   25838:	ldr	r0, [r1, #40]	; 0x28
   2583c:	str	r0, [sp, #136]	; 0x88
   25840:	ldr	r0, [r1, #36]	; 0x24
   25844:	str	r0, [sp, #132]	; 0x84
   25848:	ldr	r0, [r1, #4]
   2584c:	str	r0, [sp, #168]	; 0xa8
   25850:	ldr	r0, [r1, #8]
   25854:	str	r0, [sp, #164]	; 0xa4
   25858:	ldr	r0, [r1, #12]
   2585c:	str	r0, [sp, #156]	; 0x9c
   25860:	ldr	r0, [r1, #16]
   25864:	str	r0, [sp, #160]	; 0xa0
   25868:	ldr	r0, [r1, #20]
   2586c:	str	r0, [sp, #152]	; 0x98
   25870:	ldr	r0, [r1, #24]
   25874:	str	r0, [sp, #148]	; 0x94
   25878:	ldr	r0, [r1, #28]
   2587c:	str	r0, [sp, #144]	; 0x90
   25880:	ldr	r0, [r1, #32]
   25884:	str	r0, [sp, #140]	; 0x8c
   25888:	sub	r0, r2, #4
   2588c:	ldr	r4, [r1, #52]	; 0x34
   25890:	str	r4, [sp, #116]	; 0x74
   25894:	ldr	r1, [r1, #48]	; 0x30
   25898:	str	r1, [sp, #124]	; 0x7c
   2589c:	cmp	r0, #87	; 0x57
   258a0:	bhi	26588 <__assert_fail@plt+0x13998>
   258a4:	add	r4, sl, #8
   258a8:	add	r8, sl, #16
   258ac:	add	r9, sl, #24
   258b0:	add	r6, sl, #32
   258b4:	add	r7, sl, #40	; 0x28
   258b8:	add	r1, pc, #0
   258bc:	ldr	pc, [r1, r0, lsl #2]
   258c0:	andeq	r5, r2, r8, asr #23
   258c4:	andeq	r6, r2, r8, lsl #11
   258c8:	andeq	r6, r2, r8, lsl #11
   258cc:	strdeq	r5, [r2], -r0
   258d0:	andeq	r5, r2, r4, lsl ip
   258d4:	andeq	r5, r2, ip, lsr #24
   258d8:	andeq	r5, r2, r4, asr #24
   258dc:	andeq	r5, r2, ip, asr ip
   258e0:	andeq	r5, r2, r4, ror ip
   258e4:	andeq	r5, r2, ip, lsl #25
   258e8:	muleq	r2, r8, ip
   258ec:	andeq	r5, r2, r4, lsr #25
   258f0:	andeq	r6, r2, r8, lsl #11
   258f4:	andeq	r6, r2, r8, lsl #11
   258f8:	ldrdeq	r5, [r2], -r4
   258fc:	strdeq	r5, [r2], -r8
   25900:	andeq	r5, r2, r8, lsr #26
   25904:	andeq	r6, r2, r8, lsl #11
   25908:	andeq	r5, r2, ip, ror #26
   2590c:	muleq	r2, r0, sp
   25910:	andeq	r5, r2, r0, asr #27
   25914:	andeq	r6, r2, r8, lsl #11
   25918:	andeq	r6, r2, r8, lsl #11
   2591c:	andeq	r5, r2, r4, lsl #28
   25920:	andeq	r5, r2, r4, asr lr
   25924:	andeq	r5, r2, r0, ror #28
   25928:	andeq	r5, r2, r8, ror lr
   2592c:	andeq	r5, r2, r4, lsl #29
   25930:	muleq	r2, r4, lr
   25934:	muleq	r2, ip, lr
   25938:	andeq	r5, r2, r8, ror pc
   2593c:	andeq	r6, r2, r4, asr #32
   25940:	andeq	r6, r2, ip, asr #32
   25944:	andeq	r6, r2, ip, asr r0
   25948:	andeq	r6, r2, r8, ror r0
   2594c:	muleq	r2, r4, r0
   25950:	muleq	r2, ip, r0
   25954:	andeq	r6, r2, r4, asr #1
   25958:	andeq	r6, r2, ip, asr #1
   2595c:	strdeq	r6, [r2], -ip
   25960:	andeq	r6, r2, ip, asr #2
   25964:			; <UNDEFINED> instruction: 0x000261b0
   25968:	ldrdeq	r6, [r2], -r4
   2596c:	strdeq	r6, [r2], -r0
   25970:	andeq	r6, r2, r4, lsl r2
   25974:	andeq	r6, r2, r8, lsl #11
   25978:	andeq	r6, r2, r0, asr r2
   2597c:			; <UNDEFINED> instruction: 0x000262b8
   25980:	andeq	r5, r2, r0, lsr #20
   25984:	andeq	r5, r2, r0, lsr #20
   25988:	andeq	r6, r2, ip, ror #6
   2598c:			; <UNDEFINED> instruction: 0x00025ab0
   25990:	ldrdeq	r6, [r2], -r4
   25994:	andeq	r6, r2, r8, lsr r4
   25998:			; <UNDEFINED> instruction: 0x00025ab8
   2599c:	andeq	r6, r2, r4, asr #8
   259a0:	andeq	r6, r2, r8, ror r4
   259a4:	andeq	r5, r2, r0, asr #21
   259a8:	andeq	r5, r2, r0, lsl #22
   259ac:			; <UNDEFINED> instruction: 0x000264b8
   259b0:	andeq	r5, r2, r0, lsr #22
   259b4:	strdeq	r6, [r2], -r8
   259b8:	andeq	r6, r2, r4, lsr #10
   259bc:	andeq	r5, r2, r8, lsr #22
   259c0:	andeq	r6, r2, ip, ror #12
   259c4:	andeq	r6, r2, r8, lsr #13
   259c8:	andeq	r5, r2, r0, lsr fp
   259cc:	andeq	r5, r2, r8, lsr fp
   259d0:	andeq	r5, r2, r8, lsr fp
   259d4:	strdeq	r6, [r2], -r8
   259d8:	andeq	r6, r2, r8, lsl #11
   259dc:			; <UNDEFINED> instruction: 0x00025ab0
   259e0:			; <UNDEFINED> instruction: 0x00025ab8
   259e4:	andeq	r5, r2, r0, asr #21
   259e8:	andeq	r5, r2, r0, lsr #22
   259ec:	andeq	r5, r2, r8, lsr #22
   259f0:	andeq	r5, r2, r0, lsr fp
   259f4:	andeq	r5, r2, r0, lsl #22
   259f8:	andeq	r6, r2, r8, lsl #11
   259fc:	andeq	r6, r2, r8, lsl #11
   25a00:	andeq	r6, r2, r8, lsl #11
   25a04:	muleq	r2, r0, fp
   25a08:	andeq	r6, r2, r8, lsl #11
   25a0c:	muleq	r2, r0, fp
   25a10:	andeq	r6, r2, r4, asr #14
   25a14:	andeq	r6, r2, r0, ror r7
   25a18:	andeq	r6, r2, r0, lsr r8
   25a1c:	andeq	r6, r2, r0, asr #16
   25a20:	ldr	r1, [sl]
   25a24:	ldr	r0, [sl, #4]
   25a28:	str	r1, [sp, #64]	; 0x40
   25a2c:	str	r0, [sp, #68]	; 0x44
   25a30:	ldm	r4, {r4, lr}
   25a34:	ldr	ip, [r8]
   25a38:	ldr	r0, [r8, #4]
   25a3c:	str	r0, [sp, #56]	; 0x38
   25a40:	ldrd	r8, [r9]
   25a44:	ldr	r0, [r6, #4]
   25a48:	ldr	r6, [r6]
   25a4c:	str	r0, [sp, #60]	; 0x3c
   25a50:	ldr	r0, [r7]
   25a54:	ldr	r1, [r7, #4]
   25a58:	str	r2, [sp, #108]	; 0x6c
   25a5c:	ldr	r2, [r7, #8]
   25a60:	str	r3, [sp, #76]	; 0x4c
   25a64:	b	267c8 <__assert_fail@plt+0x13bd8>
   25a68:	sub	r0, fp, #88	; 0x58
   25a6c:	mov	r1, #48	; 0x30
   25a70:	vld1.64	{d16-d17}, [r0], r1
   25a74:	add	r1, sl, #56	; 0x38
   25a78:	ldr	r2, [sp, #96]	; 0x60
   25a7c:	vld1.64	{d18-d19}, [r2]
   25a80:	ldr	r2, [sp, #92]	; 0x5c
   25a84:	vld1.64	{d20-d21}, [r2]
   25a88:	vldr	d22, [r0]
   25a8c:	vst1.64	{d16-d17}, [r1]
   25a90:	add	r0, sl, #88	; 0x58
   25a94:	vst1.64	{d18-d19}, [r0]
   25a98:	add	r0, sl, #72	; 0x48
   25a9c:	vst1.64	{d20-d21}, [r0]
   25aa0:	vstr	d22, [sl, #104]	; 0x68
   25aa4:	mvn	r3, #1
   25aa8:	mov	sl, r1
   25aac:	b	25730 <__assert_fail@plt+0x12b40>
   25ab0:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   25ab4:	b	26370 <__assert_fail@plt+0x13780>
   25ab8:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   25abc:	b	2643c <__assert_fail@plt+0x1384c>
   25ac0:	ldm	sl, {r4, r7}
   25ac4:	cmn	r7, #1
   25ac8:	str	r2, [sp, #108]	; 0x6c
   25acc:	ble	26850 <__assert_fail@plt+0x13c60>
   25ad0:	orrs	r0, r4, r7
   25ad4:	beq	26990 <__assert_fail@plt+0x13da0>
   25ad8:	ldrd	r8, [sl, #-48]	; 0xffffffd0
   25adc:	cmn	r9, #1
   25ae0:	ble	26920 <__assert_fail@plt+0x13d30>
   25ae4:	mvn	r0, #0
   25ae8:	mvn	r1, #-2147483648	; 0x80000000
   25aec:	mov	r2, r4
   25af0:	mov	r6, r3
   25af4:	mov	r3, r7
   25af8:	bl	3e7d4 <__assert_fail@plt+0x2bbe4>
   25afc:	b	26880 <__assert_fail@plt+0x13c90>
   25b00:	ldrd	r0, [sl]
   25b04:	str	r1, [sp, #152]	; 0x98
   25b08:	str	r0, [sp, #160]	; 0xa0
   25b0c:	mov	r0, #0
   25b10:	str	r0, [sp, #164]	; 0xa4
   25b14:	mov	r0, #0
   25b18:	str	r0, [sp, #156]	; 0x9c
   25b1c:	b	26464 <__assert_fail@plt+0x13874>
   25b20:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   25b24:	b	264bc <__assert_fail@plt+0x138cc>
   25b28:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   25b2c:	b	26528 <__assert_fail@plt+0x13938>
   25b30:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   25b34:	b	266ac <__assert_fail@plt+0x13abc>
   25b38:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   25b3c:	str	r1, [sp, #124]	; 0x7c
   25b40:	str	r0, [sp, #136]	; 0x88
   25b44:	asr	r0, r0, #31
   25b48:	str	r0, [sp, #128]	; 0x80
   25b4c:	mov	r0, #0
   25b50:	str	r0, [sp, #164]	; 0xa4
   25b54:	mov	r0, #0
   25b58:	str	r0, [sp, #156]	; 0x9c
   25b5c:	mov	r0, #0
   25b60:	str	r0, [sp, #160]	; 0xa0
   25b64:	mov	r0, #0
   25b68:	str	r0, [sp, #152]	; 0x98
   25b6c:	mov	r0, #0
   25b70:	str	r0, [sp, #148]	; 0x94
   25b74:	mov	r0, #0
   25b78:	str	r0, [sp, #144]	; 0x90
   25b7c:	mov	r0, #0
   25b80:	str	r0, [sp, #140]	; 0x8c
   25b84:	mov	r0, #0
   25b88:	str	r0, [sp, #132]	; 0x84
   25b8c:	b	26578 <__assert_fail@plt+0x13988>
   25b90:	mov	r7, r2
   25b94:	mov	r6, r3
   25b98:	ldr	r1, [r4, #4]
   25b9c:	ldr	r4, [r4]
   25ba0:	mov	r0, r4
   25ba4:	bl	275a0 <__assert_fail@plt+0x149b0>
   25ba8:	cmp	r0, #0
   25bac:	bne	26a90 <__assert_fail@plt+0x13ea0>
   25bb0:	str	r4, [sp, #172]	; 0xac
   25bb4:	mov	r0, #0
   25bb8:	str	r0, [sp, #168]	; 0xa8
   25bbc:	ldr	ip, [sp, #112]	; 0x70
   25bc0:	sub	lr, fp, #128	; 0x80
   25bc4:	b	26140 <__assert_fail@plt+0x13550>
   25bc8:	ldrd	r0, [sl]
   25bcc:	mov	r6, r2
   25bd0:	ldr	r2, [sp, #72]	; 0x48
   25bd4:	strd	r0, [r2]
   25bd8:	mov	r0, #1
   25bdc:	strb	r0, [ip, #152]	; 0x98
   25be0:	movw	r1, #7018	; 0x1b6a
   25be4:	movt	r1, #4
   25be8:	mov	r0, #0
   25bec:	b	25cb4 <__assert_fail@plt+0x130c4>
   25bf0:	ldr	r0, [ip, #156]	; 0x9c
   25bf4:	ldr	r1, [ip, #172]	; 0xac
   25bf8:	add	r1, r1, #1
   25bfc:	str	r1, [ip, #172]	; 0xac
   25c00:	add	r0, r0, #1
   25c04:	str	r0, [ip, #156]	; 0x9c
   25c08:	movw	r1, #16708	; 0x4144
   25c0c:	movt	r1, #4
   25c10:	b	25cac <__assert_fail@plt+0x130bc>
   25c14:	ldr	r0, [ip, #172]	; 0xac
   25c18:	add	r0, r0, #1
   25c1c:	str	r0, [ip, #172]	; 0xac
   25c20:	movw	r1, #6452	; 0x1934
   25c24:	movt	r1, #4
   25c28:	b	25cac <__assert_fail@plt+0x130bc>
   25c2c:	ldr	r0, [ip, #164]	; 0xa4
   25c30:	add	r0, r0, #1
   25c34:	str	r0, [ip, #164]	; 0xa4
   25c38:	movw	r1, #16717	; 0x414d
   25c3c:	movt	r1, #4
   25c40:	b	25cac <__assert_fail@plt+0x130bc>
   25c44:	ldr	r0, [ip, #176]	; 0xb0
   25c48:	add	r0, r0, #1
   25c4c:	str	r0, [ip, #176]	; 0xb0
   25c50:	movw	r1, #16723	; 0x4153
   25c54:	movt	r1, #4
   25c58:	b	25cac <__assert_fail@plt+0x130bc>
   25c5c:	ldr	r0, [ip, #156]	; 0x9c
   25c60:	add	r0, r0, #1
   25c64:	str	r0, [ip, #156]	; 0x9c
   25c68:	movw	r1, #16728	; 0x4158
   25c6c:	movt	r1, #4
   25c70:	b	25cac <__assert_fail@plt+0x130bc>
   25c74:	ldr	r0, [ip, #160]	; 0xa0
   25c78:	add	r0, r0, #1
   25c7c:	str	r0, [ip, #160]	; 0xa0
   25c80:	movw	r1, #16733	; 0x415d
   25c84:	movt	r1, #4
   25c88:	b	25cac <__assert_fail@plt+0x130bc>
   25c8c:	movw	r1, #16737	; 0x4161
   25c90:	movt	r1, #4
   25c94:	b	25cac <__assert_fail@plt+0x130bc>
   25c98:	movw	r1, #12369	; 0x3051
   25c9c:	movt	r1, #4
   25ca0:	b	25cac <__assert_fail@plt+0x130bc>
   25ca4:	movw	r1, #16746	; 0x416a
   25ca8:	movt	r1, #4
   25cac:	mov	r0, #0
   25cb0:	mov	r6, r2
   25cb4:	mov	r2, #5
   25cb8:	mov	r4, r3
   25cbc:	bl	12674 <dcgettext@plt>
   25cc0:	mov	r2, r6
   25cc4:	mov	r3, r4
   25cc8:	sub	lr, fp, #128	; 0x80
   25ccc:	ldr	ip, [sp, #112]	; 0x70
   25cd0:	b	26588 <__assert_fail@plt+0x13998>
   25cd4:	mov	r4, r3
   25cd8:	mov	r6, r2
   25cdc:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   25ce0:	mov	r0, #0
   25ce4:	str	r0, [sp]
   25ce8:	str	r0, [sp, #4]
   25cec:	str	r0, [sp, #8]
   25cf0:	str	r0, [sp, #12]
   25cf4:	b	25d14 <__assert_fail@plt+0x13124>
   25cf8:	mov	r4, r3
   25cfc:	mov	r6, r2
   25d00:	ldrd	r2, [sl, #-160]	; 0xffffff60
   25d04:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   25d08:	mov	r7, #0
   25d0c:	stm	sp, {r0, r1, r7}
   25d10:	str	r7, [sp, #12]
   25d14:	mov	r0, ip
   25d18:	bl	26e18 <__assert_fail@plt+0x14228>
   25d1c:	mov	r2, r6
   25d20:	mov	r3, r4
   25d24:	b	25d58 <__assert_fail@plt+0x13168>
   25d28:	mov	r8, r2
   25d2c:	ldr	r2, [sl, #-272]	; 0xfffffef0
   25d30:	mov	r6, r3
   25d34:	ldr	r3, [sl, #-268]	; 0xfffffef4
   25d38:	ldrd	r0, [sl, #-160]	; 0xffffff60
   25d3c:	ldr	r4, [sl, #-56]	; 0xffffffc8
   25d40:	ldr	r7, [sl, #-52]	; 0xffffffcc
   25d44:	stm	sp, {r0, r1, r4, r7}
   25d48:	mov	r0, ip
   25d4c:	bl	26e18 <__assert_fail@plt+0x14228>
   25d50:	mov	r2, r8
   25d54:	mov	r3, r6
   25d58:	sub	lr, fp, #128	; 0x80
   25d5c:	ldr	ip, [sp, #112]	; 0x70
   25d60:	ldr	r0, [sl]
   25d64:	str	r0, [ip, #28]
   25d68:	b	26588 <__assert_fail@plt+0x13998>
   25d6c:	mov	r4, r3
   25d70:	mov	r6, r2
   25d74:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   25d78:	mov	r0, #0
   25d7c:	str	r0, [sp]
   25d80:	str	r0, [sp, #4]
   25d84:	str	r0, [sp, #8]
   25d88:	str	r0, [sp, #12]
   25d8c:	b	25dac <__assert_fail@plt+0x131bc>
   25d90:	mov	r4, r3
   25d94:	mov	r6, r2
   25d98:	ldrd	r2, [sl, #-160]	; 0xffffff60
   25d9c:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   25da0:	mov	r7, #0
   25da4:	stm	sp, {r0, r1, r7}
   25da8:	str	r7, [sp, #12]
   25dac:	mov	r0, ip
   25db0:	bl	26e18 <__assert_fail@plt+0x14228>
   25db4:	mov	r2, r6
   25db8:	mov	r3, r4
   25dbc:	b	25df0 <__assert_fail@plt+0x13200>
   25dc0:	mov	r8, r2
   25dc4:	ldr	r2, [sl, #-272]	; 0xfffffef0
   25dc8:	mov	r6, r3
   25dcc:	ldr	r3, [sl, #-268]	; 0xfffffef4
   25dd0:	ldrd	r0, [sl, #-160]	; 0xffffff60
   25dd4:	ldr	r4, [sl, #-56]	; 0xffffffc8
   25dd8:	ldr	r7, [sl, #-52]	; 0xffffffcc
   25ddc:	stm	sp, {r0, r1, r4, r7}
   25de0:	mov	r0, ip
   25de4:	bl	26e18 <__assert_fail@plt+0x14228>
   25de8:	mov	r2, r8
   25dec:	mov	r3, r6
   25df0:	sub	lr, fp, #128	; 0x80
   25df4:	ldr	ip, [sp, #112]	; 0x70
   25df8:	mov	r0, #2
   25dfc:	str	r0, [ip, #28]
   25e00:	b	26588 <__assert_fail@plt+0x13998>
   25e04:	ldr	r0, [ip, #176]	; 0xb0
   25e08:	add	r0, r0, #1
   25e0c:	str	r0, [ip, #176]	; 0xb0
   25e10:	str	r2, [sp, #108]	; 0x6c
   25e14:	ldr	r2, [sl, #-56]	; 0xffffffc8
   25e18:	mov	r8, r3
   25e1c:	ldr	r3, [sl, #-52]	; 0xffffffcc
   25e20:	sub	r7, sl, #48	; 0x30
   25e24:	ldm	r7, {r0, r1, r7}
   25e28:	ldr	r6, [sl, #-36]	; 0xffffffdc
   25e2c:	ldm	sl, {r4, r9}
   25e30:	stm	sp, {r0, r1, r7}
   25e34:	str	r6, [sp, #12]
   25e38:	str	r4, [sp, #16]
   25e3c:	str	r9, [sp, #20]
   25e40:	mov	r0, ip
   25e44:	bl	26e44 <__assert_fail@plt+0x14254>
   25e48:	ldr	r2, [sp, #108]	; 0x6c
   25e4c:	mov	r3, r8
   25e50:	b	26358 <__assert_fail@plt+0x13768>
   25e54:	ldr	r0, [sl]
   25e58:	str	r0, [ip, #20]
   25e5c:	b	26588 <__assert_fail@plt+0x13998>
   25e60:	mov	r0, #1
   25e64:	str	r0, [ip, #20]
   25e68:	ldr	r0, [ip, #168]	; 0xa8
   25e6c:	add	r0, r0, #1
   25e70:	str	r0, [ip, #168]	; 0xa8
   25e74:	b	26588 <__assert_fail@plt+0x13998>
   25e78:	ldr	r0, [sl]
   25e7c:	str	r0, [ip, #24]
   25e80:	b	26588 <__assert_fail@plt+0x13998>
   25e84:	movw	r0, #40336	; 0x9d90
   25e88:	movt	r0, #65535	; 0xffff
   25e8c:	str	r0, [ip, #24]
   25e90:	b	26588 <__assert_fail@plt+0x13998>
   25e94:	ldr	r0, [sl, #-56]	; 0xffffffc8
   25e98:	b	25ea4 <__assert_fail@plt+0x132b4>
   25e9c:	movw	r0, #40336	; 0x9d90
   25ea0:	movt	r0, #65535	; 0xffff
   25ea4:	str	r0, [ip, #24]
   25ea8:	ldr	r1, [sl]
   25eac:	ldr	r0, [sl, #4]
   25eb0:	str	r1, [sp, #68]	; 0x44
   25eb4:	str	r0, [sp, #76]	; 0x4c
   25eb8:	ldm	r4, {r4, lr}
   25ebc:	ldr	ip, [r8]
   25ec0:	ldr	r0, [r8, #4]
   25ec4:	str	r0, [sp, #52]	; 0x34
   25ec8:	ldr	r8, [r9]
   25ecc:	ldr	r0, [r9, #4]
   25ed0:	str	r0, [sp, #60]	; 0x3c
   25ed4:	ldr	r1, [r6]
   25ed8:	ldr	r0, [r6, #4]
   25edc:	str	r1, [sp, #56]	; 0x38
   25ee0:	str	r0, [sp, #64]	; 0x40
   25ee4:	ldr	r0, [r7]
   25ee8:	ldr	r1, [r7, #4]
   25eec:	mov	r9, r2
   25ef0:	ldr	r2, [r7, #8]
   25ef4:	mov	r6, r3
   25ef8:	ldr	r3, [r7, #12]
   25efc:	mov	r7, #1
   25f00:	str	r0, [sp, #32]
   25f04:	str	r1, [sp, #36]	; 0x24
   25f08:	str	r2, [sp, #40]	; 0x28
   25f0c:	str	r3, [sp, #44]	; 0x2c
   25f10:	str	r7, [sp, #48]	; 0x30
   25f14:	stm	sp, {r4, lr}
   25f18:	str	ip, [sp, #8]
   25f1c:	ldr	r0, [sp, #52]	; 0x34
   25f20:	str	r0, [sp, #12]
   25f24:	str	r8, [sp, #16]
   25f28:	ldr	r0, [sp, #60]	; 0x3c
   25f2c:	str	r0, [sp, #20]
   25f30:	ldr	r0, [sp, #56]	; 0x38
   25f34:	str	r0, [sp, #24]
   25f38:	ldr	r0, [sp, #64]	; 0x40
   25f3c:	str	r0, [sp, #28]
   25f40:	ldr	r0, [sp, #112]	; 0x70
   25f44:	ldr	r2, [sp, #68]	; 0x44
   25f48:	ldr	r3, [sp, #76]	; 0x4c
   25f4c:	bl	2701c <__assert_fail@plt+0x1442c>
   25f50:	cmp	r0, #0
   25f54:	beq	26a94 <__assert_fail@plt+0x13ea4>
   25f58:	movw	r1, #16737	; 0x4161
   25f5c:	movt	r1, #4
   25f60:	mov	r0, #0
   25f64:	mov	r2, #5
   25f68:	bl	12674 <dcgettext@plt>
   25f6c:	mov	r2, r9
   25f70:	mov	r3, r6
   25f74:	b	25cc8 <__assert_fail@plt+0x130d8>
   25f78:	str	r2, [sp, #108]	; 0x6c
   25f7c:	str	r3, [sp, #76]	; 0x4c
   25f80:	ldr	r2, [sl, #-56]	; 0xffffffc8
   25f84:	ldr	r3, [sl, #-52]	; 0xffffffcc
   25f88:	sub	r7, sl, #48	; 0x30
   25f8c:	ldm	r7, {r0, r1, r7}
   25f90:	ldr	r6, [sl, #-36]	; 0xffffffdc
   25f94:	ldm	sl, {r4, r9}
   25f98:	stm	sp, {r0, r1, r7}
   25f9c:	str	r6, [sp, #12]
   25fa0:	str	r4, [sp, #16]
   25fa4:	str	r9, [sp, #20]
   25fa8:	mov	r0, ip
   25fac:	mov	r8, ip
   25fb0:	bl	26e44 <__assert_fail@plt+0x14254>
   25fb4:	mov	r7, #1
   25fb8:	cmp	r0, #0
   25fbc:	beq	26a94 <__assert_fail@plt+0x13ea4>
   25fc0:	ldr	r0, [r8, #24]
   25fc4:	asr	r1, r0, #31
   25fc8:	mov	r2, #0
   25fcc:	cmn	r1, #1
   25fd0:	mov	r3, #0
   25fd4:	movwgt	r3, #1
   25fd8:	ldr	r4, [sl, #-112]	; 0xffffff90
   25fdc:	ldr	r9, [sl, #-108]	; 0xffffff94
   25fe0:	adds	r0, r0, r4
   25fe4:	str	r0, [r8, #24]
   25fe8:	adc	r1, r1, r9
   25fec:	cmn	r1, #1
   25ff0:	mov	r6, #0
   25ff4:	movwgt	r6, #1
   25ff8:	subs	r6, r3, r6
   25ffc:	movwne	r6, #1
   26000:	cmn	r9, #1
   26004:	movwgt	r2, #1
   26008:	sub	r2, r3, r2
   2600c:	clz	r2, r2
   26010:	lsr	r2, r2, #5
   26014:	tst	r2, r6
   26018:	bne	26a94 <__assert_fail@plt+0x13ea4>
   2601c:	mov	ip, r8
   26020:	asr	r2, r0, #31
   26024:	eor	r0, r0, r0
   26028:	eor	r1, r1, r2
   2602c:	orrs	r0, r0, r1
   26030:	sub	lr, fp, #128	; 0x80
   26034:	ldr	r3, [sp, #76]	; 0x4c
   26038:	ldr	r2, [sp, #108]	; 0x6c
   2603c:	beq	26588 <__assert_fail@plt+0x13998>
   26040:	b	26a94 <__assert_fail@plt+0x13ea4>
   26044:	ldr	r0, [sl]
   26048:	b	26050 <__assert_fail@plt+0x13460>
   2604c:	ldr	r0, [sl, #-56]	; 0xffffffc8
   26050:	add	r0, r0, #3600	; 0xe10
   26054:	str	r0, [ip, #24]
   26058:	b	26588 <__assert_fail@plt+0x13998>
   2605c:	mov	r0, #0
   26060:	ldr	r1, [sp, #84]	; 0x54
   26064:	str	r0, [r1]
   26068:	str	r0, [r1, #4]
   2606c:	ldr	r0, [sl]
   26070:	str	r0, [ip, #16]
   26074:	b	26588 <__assert_fail@plt+0x13998>
   26078:	mov	r0, #0
   2607c:	ldr	r1, [sp, #84]	; 0x54
   26080:	str	r0, [r1]
   26084:	str	r0, [r1, #4]
   26088:	ldr	r0, [sl, #-56]	; 0xffffffc8
   2608c:	str	r0, [ip, #16]
   26090:	b	26588 <__assert_fail@plt+0x13998>
   26094:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   26098:	b	260a0 <__assert_fail@plt+0x134b0>
   2609c:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   260a0:	mov	r4, r2
   260a4:	ldr	r2, [sp, #84]	; 0x54
   260a8:	strd	r0, [r2]
   260ac:	mov	r2, r4
   260b0:	ldr	r0, [sl]
   260b4:	mov	r1, #1
   260b8:	strb	r1, [ip, #187]	; 0xbb
   260bc:	str	r0, [ip, #16]
   260c0:	b	26588 <__assert_fail@plt+0x13998>
   260c4:	ldrd	r0, [sl, #-104]	; 0xffffff98
   260c8:	b	261b4 <__assert_fail@plt+0x135c4>
   260cc:	mov	r6, r2
   260d0:	ldr	r0, [sl, #-208]	; 0xffffff30
   260d4:	cmp	r0, #4
   260d8:	blt	2689c <__assert_fail@plt+0x13cac>
   260dc:	sub	r0, sl, #224	; 0xe0
   260e0:	vld1.64	{d16-d17}, [r0]
   260e4:	vldr	d18, [sl, #-208]	; 0xffffff30
   260e8:	ldr	r0, [sp, #88]	; 0x58
   260ec:	vst1.64	{d16-d17}, [r0]!
   260f0:	vstr	d18, [r0]
   260f4:	ldrd	r0, [sl, #-104]	; 0xffffff98
   260f8:	b	261b8 <__assert_fail@plt+0x135c8>
   260fc:	mov	r7, r2
   26100:	mov	r6, r3
   26104:	ldrd	r0, [sl, #-104]	; 0xffffff98
   26108:	ldr	r2, [sp, #100]	; 0x64
   2610c:	strd	r0, [r2]
   26110:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   26114:	ldr	r2, [sp, #104]	; 0x68
   26118:	strd	r0, [r2]
   2611c:	ldrd	r0, [r4]
   26120:	rsbs	r0, r0, #0
   26124:	rsc	r3, r1, #0
   26128:	ldr	r2, [sp, #80]	; 0x50
   2612c:	stm	r2, {r0, r3}
   26130:	ands	r0, r1, r3
   26134:	bmi	26a90 <__assert_fail@plt+0x13ea0>
   26138:	ldr	r0, [sl, #16]
   2613c:	str	r0, [ip, #48]	; 0x30
   26140:	mov	r3, r6
   26144:	mov	r2, r7
   26148:	b	26588 <__assert_fail@plt+0x13998>
   2614c:	mov	r8, r2
   26150:	mov	r6, r3
   26154:	ldrd	r0, [sl, #-112]	; 0xffffff90
   26158:	ldr	r2, [sp, #104]	; 0x68
   2615c:	strd	r0, [r2]
   26160:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   26164:	rsbs	r0, r0, #0
   26168:	rsc	r3, r1, #0
   2616c:	ldr	r2, [sp, #100]	; 0x64
   26170:	stm	r2, {r0, r3}
   26174:	ands	r0, r1, r3
   26178:	mov	r7, #1
   2617c:	bmi	26a94 <__assert_fail@plt+0x13ea4>
   26180:	ldrd	r0, [r4]
   26184:	rsbs	r0, r0, #0
   26188:	rsc	r3, r1, #0
   2618c:	ldr	r2, [sp, #80]	; 0x50
   26190:	stm	r2, {r0, r3}
   26194:	ands	r0, r1, r3
   26198:	bmi	26a94 <__assert_fail@plt+0x13ea4>
   2619c:	mov	r3, r6
   261a0:	mov	r2, r8
   261a4:	ldr	r0, [sl, #16]
   261a8:	str	r0, [ip, #48]	; 0x30
   261ac:	b	26588 <__assert_fail@plt+0x13998>
   261b0:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   261b4:	mov	r6, r2
   261b8:	ldr	r2, [sp, #104]	; 0x68
   261bc:	strd	r0, [r2]
   261c0:	ldrd	r0, [r4]
   261c4:	ldr	r2, [sp, #100]	; 0x64
   261c8:	strd	r0, [r2]
   261cc:	mov	r2, r6
   261d0:	b	26588 <__assert_fail@plt+0x13998>
   261d4:	ldrd	r0, [sl, #-168]	; 0xffffff58
   261d8:	mov	r4, r2
   261dc:	ldr	r2, [sp, #104]	; 0x68
   261e0:	strd	r0, [r2]
   261e4:	ldrd	r0, [sl, #-104]	; 0xffffff98
   261e8:	ldr	r2, [sp, #100]	; 0x64
   261ec:	b	2622c <__assert_fail@plt+0x1363c>
   261f0:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   261f4:	mov	r4, r2
   261f8:	ldr	r2, [sp, #100]	; 0x64
   261fc:	strd	r0, [r2]
   26200:	ldrd	r0, [sl]
   26204:	ldr	r2, [sp, #104]	; 0x68
   26208:	strd	r0, [r2]
   2620c:	mov	r2, r4
   26210:	b	26588 <__assert_fail@plt+0x13998>
   26214:	ldrd	r0, [sl, #-104]	; 0xffffff98
   26218:	mov	r4, r2
   2621c:	ldr	r2, [sp, #100]	; 0x64
   26220:	strd	r0, [r2]
   26224:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   26228:	ldr	r2, [sp, #104]	; 0x68
   2622c:	strd	r0, [r2]
   26230:	mov	r2, r4
   26234:	mov	r0, sl
   26238:	vld1.64	{d16-d17}, [r0]!
   2623c:	vldr	d18, [r0]
   26240:	ldr	r0, [sp, #88]	; 0x58
   26244:	vst1.64	{d16-d17}, [r0]!
   26248:	vstr	d18, [r0]
   2624c:	b	26588 <__assert_fail@plt+0x13998>
   26250:	mov	r8, r2
   26254:	mov	r6, r3
   26258:	sub	r0, sl, #112	; 0x70
   2625c:	vld1.64	{d16-d17}, [r0]
   26260:	vldr	d18, [sl, #-96]	; 0xffffffa0
   26264:	ldr	r0, [sp, #88]	; 0x58
   26268:	vst1.64	{d16-d17}, [r0]!
   2626c:	vstr	d18, [r0]
   26270:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   26274:	rsbs	r0, r0, #0
   26278:	rsc	r3, r1, #0
   2627c:	ldr	r2, [sp, #104]	; 0x68
   26280:	stm	r2, {r0, r3}
   26284:	ands	r0, r1, r3
   26288:	mov	r7, #1
   2628c:	bmi	26a94 <__assert_fail@plt+0x13ea4>
   26290:	ldrd	r0, [r4]
   26294:	rsbs	r0, r0, #0
   26298:	rsc	r3, r1, #0
   2629c:	ldr	r2, [sp, #100]	; 0x64
   262a0:	stm	r2, {r0, r3}
   262a4:	ands	r0, r1, r3
   262a8:	mov	r3, r6
   262ac:	mov	r2, r8
   262b0:	bpl	26588 <__assert_fail@plt+0x13998>
   262b4:	b	26a94 <__assert_fail@plt+0x13ea4>
   262b8:	ldr	r0, [sl, #-56]	; 0xffffffc8
   262bc:	str	r0, [sp, #68]	; 0x44
   262c0:	ldr	r0, [sl, #-52]	; 0xffffffcc
   262c4:	str	r0, [sp, #64]	; 0x40
   262c8:	ldr	r9, [sl, #-48]	; 0xffffffd0
   262cc:	ldr	r0, [sl, #-44]	; 0xffffffd4
   262d0:	str	r0, [sp, #60]	; 0x3c
   262d4:	ldr	r7, [sl, #-40]	; 0xffffffd8
   262d8:	ldr	r6, [sl, #-36]	; 0xffffffdc
   262dc:	ldr	r4, [sl, #-32]	; 0xffffffe0
   262e0:	ldr	r0, [sl, #-28]	; 0xffffffe4
   262e4:	str	r0, [sp, #56]	; 0x38
   262e8:	ldr	lr, [sl, #-24]	; 0xffffffe8
   262ec:	ldr	r8, [sl, #-20]	; 0xffffffec
   262f0:	ldr	r0, [sl, #-16]
   262f4:	ldr	r1, [sl, #-12]
   262f8:	str	r2, [sp, #108]	; 0x6c
   262fc:	ldr	r2, [sl, #-8]
   26300:	str	r3, [sp, #76]	; 0x4c
   26304:	ldmda	sl, {r3, ip}
   26308:	str	r0, [sp, #32]
   2630c:	str	r1, [sp, #36]	; 0x24
   26310:	str	r2, [sp, #40]	; 0x28
   26314:	str	r3, [sp, #44]	; 0x2c
   26318:	str	ip, [sp, #48]	; 0x30
   2631c:	str	r9, [sp]
   26320:	ldr	r0, [sp, #60]	; 0x3c
   26324:	stmib	sp, {r0, r7}
   26328:	str	r6, [sp, #12]
   2632c:	str	r4, [sp, #16]
   26330:	ldr	r0, [sp, #56]	; 0x38
   26334:	str	r0, [sp, #20]
   26338:	str	lr, [sp, #24]
   2633c:	str	r8, [sp, #28]
   26340:	ldr	r0, [sp, #112]	; 0x70
   26344:	ldr	r2, [sp, #68]	; 0x44
   26348:	ldr	r3, [sp, #64]	; 0x40
   2634c:	bl	2701c <__assert_fail@plt+0x1442c>
   26350:	ldr	r2, [sp, #108]	; 0x6c
   26354:	ldr	r3, [sp, #76]	; 0x4c
   26358:	sub	lr, fp, #128	; 0x80
   2635c:	ldr	ip, [sp, #112]	; 0x70
   26360:	cmp	r0, #0
   26364:	bne	26588 <__assert_fail@plt+0x13998>
   26368:	b	26a90 <__assert_fail@plt+0x13ea0>
   2636c:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   26370:	str	r1, [sp, #168]	; 0xa8
   26374:	str	r0, [sp, #172]	; 0xac
   26378:	mov	r0, #0
   2637c:	str	r0, [sp, #164]	; 0xa4
   26380:	mov	r0, #0
   26384:	str	r0, [sp, #156]	; 0x9c
   26388:	mov	r0, #0
   2638c:	str	r0, [sp, #160]	; 0xa0
   26390:	mov	r0, #0
   26394:	str	r0, [sp, #152]	; 0x98
   26398:	mov	r0, #0
   2639c:	str	r0, [sp, #148]	; 0x94
   263a0:	mov	r0, #0
   263a4:	str	r0, [sp, #144]	; 0x90
   263a8:	mov	r0, #0
   263ac:	str	r0, [sp, #140]	; 0x8c
   263b0:	mov	r0, #0
   263b4:	str	r0, [sp, #132]	; 0x84
   263b8:	mov	r0, #0
   263bc:	str	r0, [sp, #136]	; 0x88
   263c0:	mov	r0, #0
   263c4:	str	r0, [sp, #128]	; 0x80
   263c8:	mov	r0, #0
   263cc:	str	r0, [sp, #124]	; 0x7c
   263d0:	b	26588 <__assert_fail@plt+0x13998>
   263d4:	mov	r0, #0
   263d8:	str	r0, [sp, #164]	; 0xa4
   263dc:	mov	r0, #1
   263e0:	str	r0, [sp, #172]	; 0xac
   263e4:	mov	r0, #0
   263e8:	str	r0, [sp, #156]	; 0x9c
   263ec:	mov	r0, #0
   263f0:	str	r0, [sp, #160]	; 0xa0
   263f4:	mov	r0, #0
   263f8:	str	r0, [sp, #152]	; 0x98
   263fc:	mov	r0, #0
   26400:	str	r0, [sp, #148]	; 0x94
   26404:	mov	r0, #0
   26408:	str	r0, [sp, #144]	; 0x90
   2640c:	mov	r0, #0
   26410:	str	r0, [sp, #140]	; 0x8c
   26414:	mov	r0, #0
   26418:	str	r0, [sp, #132]	; 0x84
   2641c:	mov	r0, #0
   26420:	str	r0, [sp, #136]	; 0x88
   26424:	mov	r0, #0
   26428:	str	r0, [sp, #128]	; 0x80
   2642c:	mov	r0, #0
   26430:	str	r0, [sp, #124]	; 0x7c
   26434:	b	26580 <__assert_fail@plt+0x13990>
   26438:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   2643c:	str	r1, [sp, #156]	; 0x9c
   26440:	b	26450 <__assert_fail@plt+0x13860>
   26444:	mov	r0, #0
   26448:	str	r0, [sp, #156]	; 0x9c
   2644c:	mov	r0, #1
   26450:	str	r0, [sp, #164]	; 0xa4
   26454:	mov	r0, #0
   26458:	str	r0, [sp, #160]	; 0xa0
   2645c:	mov	r0, #0
   26460:	str	r0, [sp, #152]	; 0x98
   26464:	mov	r0, #0
   26468:	str	r0, [sp, #148]	; 0x94
   2646c:	mov	r0, #0
   26470:	str	r0, [sp, #144]	; 0x90
   26474:	b	264e4 <__assert_fail@plt+0x138f4>
   26478:	ldm	sl, {r4, r7}
   2647c:	cmn	r7, #1
   26480:	str	r2, [sp, #108]	; 0x6c
   26484:	ble	268d4 <__assert_fail@plt+0x13ce4>
   26488:	orrs	r0, r4, r7
   2648c:	beq	26a08 <__assert_fail@plt+0x13e18>
   26490:	ldrd	r8, [sl, #-56]	; 0xffffffc8
   26494:	cmn	r9, #1
   26498:	ble	26998 <__assert_fail@plt+0x13da8>
   2649c:	mvn	r0, #0
   264a0:	mvn	r1, #-2147483648	; 0x80000000
   264a4:	mov	r2, r4
   264a8:	mov	r6, r3
   264ac:	mov	r3, r7
   264b0:	bl	3e7d4 <__assert_fail@plt+0x2bbe4>
   264b4:	b	26904 <__assert_fail@plt+0x13d14>
   264b8:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   264bc:	str	r1, [sp, #144]	; 0x90
   264c0:	str	r0, [sp, #148]	; 0x94
   264c4:	mov	r0, #0
   264c8:	str	r0, [sp, #164]	; 0xa4
   264cc:	mov	r0, #0
   264d0:	str	r0, [sp, #156]	; 0x9c
   264d4:	mov	r0, #0
   264d8:	str	r0, [sp, #160]	; 0xa0
   264dc:	mov	r0, #0
   264e0:	str	r0, [sp, #152]	; 0x98
   264e4:	mov	r0, #0
   264e8:	str	r0, [sp, #140]	; 0x8c
   264ec:	mov	r0, #0
   264f0:	str	r0, [sp, #132]	; 0x84
   264f4:	b	26560 <__assert_fail@plt+0x13970>
   264f8:	mov	r0, #0
   264fc:	str	r0, [sp, #164]	; 0xa4
   26500:	mov	r0, #1
   26504:	str	r0, [sp, #148]	; 0x94
   26508:	mov	r0, #0
   2650c:	str	r0, [sp, #156]	; 0x9c
   26510:	mov	r0, #0
   26514:	str	r0, [sp, #160]	; 0xa0
   26518:	mov	r0, #0
   2651c:	str	r0, [sp, #152]	; 0x98
   26520:	b	2646c <__assert_fail@plt+0x1387c>
   26524:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   26528:	str	r1, [sp, #132]	; 0x84
   2652c:	str	r0, [sp, #140]	; 0x8c
   26530:	mov	r0, #0
   26534:	str	r0, [sp, #164]	; 0xa4
   26538:	mov	r0, #0
   2653c:	str	r0, [sp, #156]	; 0x9c
   26540:	mov	r0, #0
   26544:	str	r0, [sp, #160]	; 0xa0
   26548:	mov	r0, #0
   2654c:	str	r0, [sp, #152]	; 0x98
   26550:	mov	r0, #0
   26554:	str	r0, [sp, #148]	; 0x94
   26558:	mov	r0, #0
   2655c:	str	r0, [sp, #144]	; 0x90
   26560:	mov	r0, #0
   26564:	str	r0, [sp, #136]	; 0x88
   26568:	mov	r0, #0
   2656c:	str	r0, [sp, #128]	; 0x80
   26570:	mov	r0, #0
   26574:	str	r0, [sp, #124]	; 0x7c
   26578:	mov	r0, #0
   2657c:	str	r0, [sp, #172]	; 0xac
   26580:	mov	r0, #0
   26584:	str	r0, [sp, #168]	; 0xa8
   26588:	ldr	r1, [sp, #120]	; 0x78
   2658c:	sub	r0, r1, r1, lsl #3
   26590:	add	sl, sl, r0, lsl #3
   26594:	ldr	r0, [sp, #172]	; 0xac
   26598:	str	r0, [sl, #56]!	; 0x38
   2659c:	ldr	r0, [sp, #168]	; 0xa8
   265a0:	str	r0, [sl, #4]
   265a4:	ldr	r0, [sp, #164]	; 0xa4
   265a8:	str	r0, [sl, #8]
   265ac:	ldr	r0, [sp, #156]	; 0x9c
   265b0:	str	r0, [sl, #12]
   265b4:	ldr	r0, [sp, #160]	; 0xa0
   265b8:	str	r0, [sl, #16]
   265bc:	ldr	r0, [sp, #152]	; 0x98
   265c0:	str	r0, [sl, #20]
   265c4:	ldr	r0, [sp, #148]	; 0x94
   265c8:	str	r0, [sl, #24]
   265cc:	ldr	r0, [sp, #144]	; 0x90
   265d0:	str	r0, [sl, #28]
   265d4:	ldr	r0, [sp, #140]	; 0x8c
   265d8:	str	r0, [sl, #32]
   265dc:	ldr	r0, [sp, #132]	; 0x84
   265e0:	str	r0, [sl, #36]	; 0x24
   265e4:	ldr	r0, [sp, #136]	; 0x88
   265e8:	str	r0, [sl, #40]	; 0x28
   265ec:	ldr	r0, [sp, #128]	; 0x80
   265f0:	str	r0, [sl, #44]	; 0x2c
   265f4:	ldr	r0, [sp, #124]	; 0x7c
   265f8:	str	r0, [sl, #48]	; 0x30
   265fc:	ldr	r0, [sp, #116]	; 0x74
   26600:	str	r0, [sl, #52]	; 0x34
   26604:	sub	r5, r5, r1
   26608:	add	r0, lr, r5, lsl #1
   2660c:	ldrsh	r1, [r0]
   26610:	movw	r0, #14872	; 0x3a18
   26614:	movt	r0, #4
   26618:	ldrb	r0, [r0, r2]
   2661c:	sub	r0, r0, #28
   26620:	movw	r2, #14964	; 0x3a74
   26624:	movt	r2, #4
   26628:	add	r2, r2, r0
   2662c:	ldrsb	r2, [r2]
   26630:	add	r2, r1, r2
   26634:	cmp	r2, #112	; 0x70
   26638:	bhi	25720 <__assert_fail@plt+0x12b30>
   2663c:	mov	r4, r3
   26640:	movw	r3, #14440	; 0x3868
   26644:	movt	r3, #4
   26648:	add	r3, r3, r2
   2664c:	ldrsb	r3, [r3]
   26650:	cmp	r3, r1
   26654:	mov	r3, r4
   26658:	bne	25720 <__assert_fail@plt+0x12b30>
   2665c:	movw	r0, #14553	; 0x38d9
   26660:	movt	r0, #4
   26664:	ldrb	r4, [r0, r2]
   26668:	b	25730 <__assert_fail@plt+0x12b40>
   2666c:	mov	r0, #0
   26670:	str	r0, [sp, #164]	; 0xa4
   26674:	mov	r0, #1
   26678:	str	r0, [sp, #140]	; 0x8c
   2667c:	mov	r0, #0
   26680:	str	r0, [sp, #156]	; 0x9c
   26684:	mov	r0, #0
   26688:	str	r0, [sp, #160]	; 0xa0
   2668c:	mov	r0, #0
   26690:	str	r0, [sp, #152]	; 0x98
   26694:	mov	r0, #0
   26698:	str	r0, [sp, #148]	; 0x94
   2669c:	mov	r0, #0
   266a0:	str	r0, [sp, #144]	; 0x90
   266a4:	b	264ec <__assert_fail@plt+0x138fc>
   266a8:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   266ac:	str	r1, [sp, #128]	; 0x80
   266b0:	str	r0, [sp, #136]	; 0x88
   266b4:	mov	r0, #0
   266b8:	str	r0, [sp, #164]	; 0xa4
   266bc:	mov	r0, #0
   266c0:	str	r0, [sp, #156]	; 0x9c
   266c4:	mov	r0, #0
   266c8:	str	r0, [sp, #160]	; 0xa0
   266cc:	mov	r0, #0
   266d0:	str	r0, [sp, #152]	; 0x98
   266d4:	mov	r0, #0
   266d8:	str	r0, [sp, #148]	; 0x94
   266dc:	mov	r0, #0
   266e0:	str	r0, [sp, #144]	; 0x90
   266e4:	mov	r0, #0
   266e8:	str	r0, [sp, #140]	; 0x8c
   266ec:	mov	r0, #0
   266f0:	str	r0, [sp, #132]	; 0x84
   266f4:	b	26570 <__assert_fail@plt+0x13980>
   266f8:	mov	r0, #0
   266fc:	str	r0, [sp, #164]	; 0xa4
   26700:	mov	r0, #1
   26704:	str	r0, [sp, #136]	; 0x88
   26708:	mov	r0, #0
   2670c:	str	r0, [sp, #156]	; 0x9c
   26710:	mov	r0, #0
   26714:	str	r0, [sp, #160]	; 0xa0
   26718:	mov	r0, #0
   2671c:	str	r0, [sp, #152]	; 0x98
   26720:	mov	r0, #0
   26724:	str	r0, [sp, #148]	; 0x94
   26728:	mov	r0, #0
   2672c:	str	r0, [sp, #144]	; 0x90
   26730:	mov	r0, #0
   26734:	str	r0, [sp, #140]	; 0x8c
   26738:	mov	r0, #0
   2673c:	str	r0, [sp, #132]	; 0x84
   26740:	b	26568 <__assert_fail@plt+0x13978>
   26744:	mov	r9, r3
   26748:	mov	r6, r2
   2674c:	ldrd	r2, [sl]
   26750:	ldrd	r0, [r4]
   26754:	ldm	r8, {r4, r7}
   26758:	stm	sp, {r0, r1, r4, r7}
   2675c:	mov	r0, ip
   26760:	bl	275b0 <__assert_fail@plt+0x149c0>
   26764:	mov	r2, r6
   26768:	mov	r3, r9
   2676c:	b	25cc8 <__assert_fail@plt+0x130d8>
   26770:	str	r2, [sp, #108]	; 0x6c
   26774:	ldr	r2, [sl, #-56]	; 0xffffffc8
   26778:	str	r3, [sp, #76]	; 0x4c
   2677c:	ldr	r3, [sl, #-52]	; 0xffffffcc
   26780:	sub	lr, sl, #48	; 0x30
   26784:	ldm	lr, {r0, r1, ip, lr}
   26788:	stm	sp, {r0, r1, ip, lr}
   2678c:	ldr	r0, [sp, #112]	; 0x70
   26790:	bl	275b0 <__assert_fail@plt+0x149c0>
   26794:	ldr	r1, [sl]
   26798:	ldr	r0, [sl, #4]
   2679c:	str	r1, [sp, #64]	; 0x40
   267a0:	str	r0, [sp, #68]	; 0x44
   267a4:	ldm	r4, {r4, lr}
   267a8:	ldr	ip, [r8]
   267ac:	ldr	r0, [r8, #4]
   267b0:	str	r0, [sp, #56]	; 0x38
   267b4:	ldrd	r8, [r9]
   267b8:	ldr	r0, [r6, #4]
   267bc:	ldr	r6, [r6]
   267c0:	str	r0, [sp, #60]	; 0x3c
   267c4:	ldm	r7, {r0, r1, r2}
   267c8:	ldr	r3, [r7, #12]
   267cc:	mov	r7, #1
   267d0:	str	r0, [sp, #32]
   267d4:	str	r1, [sp, #36]	; 0x24
   267d8:	str	r2, [sp, #40]	; 0x28
   267dc:	str	r3, [sp, #44]	; 0x2c
   267e0:	str	r7, [sp, #48]	; 0x30
   267e4:	stm	sp, {r4, lr}
   267e8:	str	ip, [sp, #8]
   267ec:	ldr	r0, [sp, #56]	; 0x38
   267f0:	add	r1, sp, #12
   267f4:	stm	r1, {r0, r8, r9}
   267f8:	str	r6, [sp, #24]
   267fc:	ldr	r0, [sp, #60]	; 0x3c
   26800:	str	r0, [sp, #28]
   26804:	ldr	r0, [sp, #112]	; 0x70
   26808:	ldr	r2, [sp, #64]	; 0x40
   2680c:	ldr	r3, [sp, #68]	; 0x44
   26810:	bl	2701c <__assert_fail@plt+0x1442c>
   26814:	ldr	r2, [sp, #108]	; 0x6c
   26818:	ldr	r3, [sp, #76]	; 0x4c
   2681c:	sub	lr, fp, #128	; 0x80
   26820:	ldr	ip, [sp, #112]	; 0x70
   26824:	cmp	r0, #0
   26828:	bne	26588 <__assert_fail@plt+0x13998>
   2682c:	b	26a94 <__assert_fail@plt+0x13ea4>
   26830:	mvn	r0, #0
   26834:	str	r0, [sp, #172]	; 0xac
   26838:	mvn	r0, #0
   2683c:	b	26584 <__assert_fail@plt+0x13994>
   26840:	ldrd	r0, [r4]
   26844:	str	r1, [sp, #168]	; 0xa8
   26848:	str	r0, [sp, #172]	; 0xac
   2684c:	b	26588 <__assert_fail@plt+0x13998>
   26850:	ldrd	r8, [sl, #-48]	; 0xffffffd0
   26854:	cmn	r9, #1
   26858:	ble	26960 <__assert_fail@plt+0x13d70>
   2685c:	and	r0, r4, r7
   26860:	cmn	r0, #1
   26864:	beq	26990 <__assert_fail@plt+0x13da0>
   26868:	mov	r0, #0
   2686c:	mov	r1, #-2147483648	; 0x80000000
   26870:	mov	r2, r4
   26874:	mov	r6, r3
   26878:	mov	r3, r7
   2687c:	bl	3e700 <__assert_fail@plt+0x2bb10>
   26880:	mov	r3, r6
   26884:	sub	lr, fp, #128	; 0x80
   26888:	ldr	ip, [sp, #112]	; 0x70
   2688c:	subs	r0, r0, r8
   26890:	sbcs	r0, r1, r9
   26894:	bge	26990 <__assert_fail@plt+0x13da0>
   26898:	b	26a90 <__assert_fail@plt+0x13ea0>
   2689c:	ldrd	r0, [sl, #-216]	; 0xffffff28
   268a0:	ldr	r2, [sp, #104]	; 0x68
   268a4:	strd	r0, [r2]
   268a8:	ldrd	r0, [sl, #-104]	; 0xffffff98
   268ac:	ldr	r2, [sp, #100]	; 0x64
   268b0:	strd	r0, [r2]
   268b4:	mov	r0, sl
   268b8:	vld1.64	{d16-d17}, [r0]!
   268bc:	vldr	d18, [r0]
   268c0:	ldr	r0, [sp, #88]	; 0x58
   268c4:	vst1.64	{d16-d17}, [r0]!
   268c8:	vstr	d18, [r0]
   268cc:	mov	r2, r6
   268d0:	b	26588 <__assert_fail@plt+0x13998>
   268d4:	ldrd	r8, [sl, #-56]	; 0xffffffc8
   268d8:	cmn	r9, #1
   268dc:	ble	269d8 <__assert_fail@plt+0x13de8>
   268e0:	and	r0, r4, r7
   268e4:	cmn	r0, #1
   268e8:	beq	26a08 <__assert_fail@plt+0x13e18>
   268ec:	mov	r0, #0
   268f0:	mov	r1, #-2147483648	; 0x80000000
   268f4:	mov	r2, r4
   268f8:	mov	r6, r3
   268fc:	mov	r3, r7
   26900:	bl	3e700 <__assert_fail@plt+0x2bb10>
   26904:	mov	r3, r6
   26908:	sub	lr, fp, #128	; 0x80
   2690c:	ldr	ip, [sp, #112]	; 0x70
   26910:	subs	r0, r0, r8
   26914:	sbcs	r0, r1, r9
   26918:	bge	26a08 <__assert_fail@plt+0x13e18>
   2691c:	b	26a90 <__assert_fail@plt+0x13ea0>
   26920:	and	r0, r8, r9
   26924:	cmn	r0, #1
   26928:	beq	26990 <__assert_fail@plt+0x13da0>
   2692c:	mov	r0, #0
   26930:	mov	r1, #-2147483648	; 0x80000000
   26934:	mov	r2, r8
   26938:	mov	r6, r3
   2693c:	mov	r3, r9
   26940:	bl	3e700 <__assert_fail@plt+0x2bb10>
   26944:	mov	r3, r6
   26948:	sub	lr, fp, #128	; 0x80
   2694c:	ldr	ip, [sp, #112]	; 0x70
   26950:	subs	r0, r0, r4
   26954:	sbcs	r0, r1, r7
   26958:	bge	26990 <__assert_fail@plt+0x13da0>
   2695c:	b	26a90 <__assert_fail@plt+0x13ea0>
   26960:	mvn	r0, #0
   26964:	mvn	r1, #-2147483648	; 0x80000000
   26968:	mov	r2, r4
   2696c:	mov	r6, r3
   26970:	mov	r3, r7
   26974:	bl	3e700 <__assert_fail@plt+0x2bb10>
   26978:	mov	r3, r6
   2697c:	sub	lr, fp, #128	; 0x80
   26980:	ldr	ip, [sp, #112]	; 0x70
   26984:	subs	r0, r8, r0
   26988:	sbcs	r0, r9, r1
   2698c:	blt	26a90 <__assert_fail@plt+0x13ea0>
   26990:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   26994:	b	26a0c <__assert_fail@plt+0x13e1c>
   26998:	and	r0, r8, r9
   2699c:	cmn	r0, #1
   269a0:	beq	26a08 <__assert_fail@plt+0x13e18>
   269a4:	mov	r0, #0
   269a8:	mov	r1, #-2147483648	; 0x80000000
   269ac:	mov	r2, r8
   269b0:	mov	r6, r3
   269b4:	mov	r3, r9
   269b8:	bl	3e700 <__assert_fail@plt+0x2bb10>
   269bc:	mov	r3, r6
   269c0:	sub	lr, fp, #128	; 0x80
   269c4:	ldr	ip, [sp, #112]	; 0x70
   269c8:	subs	r0, r0, r4
   269cc:	sbcs	r0, r1, r7
   269d0:	bge	26a08 <__assert_fail@plt+0x13e18>
   269d4:	b	26a90 <__assert_fail@plt+0x13ea0>
   269d8:	mvn	r0, #0
   269dc:	mvn	r1, #-2147483648	; 0x80000000
   269e0:	mov	r2, r4
   269e4:	mov	r6, r3
   269e8:	mov	r3, r7
   269ec:	bl	3e700 <__assert_fail@plt+0x2bb10>
   269f0:	mov	r3, r6
   269f4:	sub	lr, fp, #128	; 0x80
   269f8:	ldr	ip, [sp, #112]	; 0x70
   269fc:	subs	r0, r8, r0
   26a00:	sbcs	r0, r9, r1
   26a04:	blt	26a90 <__assert_fail@plt+0x13ea0>
   26a08:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   26a0c:	umull	r6, r2, r0, r4
   26a10:	str	r6, [sp, #160]	; 0xa0
   26a14:	mla	r0, r0, r7, r2
   26a18:	mla	r0, r1, r4, r0
   26a1c:	str	r0, [sp, #152]	; 0x98
   26a20:	mov	r0, #0
   26a24:	str	r0, [sp, #164]	; 0xa4
   26a28:	mov	r0, #0
   26a2c:	str	r0, [sp, #156]	; 0x9c
   26a30:	mov	r0, #0
   26a34:	str	r0, [sp, #148]	; 0x94
   26a38:	mov	r0, #0
   26a3c:	str	r0, [sp, #144]	; 0x90
   26a40:	mov	r0, #0
   26a44:	str	r0, [sp, #140]	; 0x8c
   26a48:	mov	r0, #0
   26a4c:	str	r0, [sp, #132]	; 0x84
   26a50:	mov	r0, #0
   26a54:	str	r0, [sp, #136]	; 0x88
   26a58:	mov	r0, #0
   26a5c:	str	r0, [sp, #128]	; 0x80
   26a60:	mov	r0, #0
   26a64:	str	r0, [sp, #124]	; 0x7c
   26a68:	mov	r0, #0
   26a6c:	str	r0, [sp, #172]	; 0xac
   26a70:	mov	r0, #0
   26a74:	str	r0, [sp, #168]	; 0xa8
   26a78:	ldr	r2, [sp, #108]	; 0x6c
   26a7c:	b	26588 <__assert_fail@plt+0x13998>
   26a80:	mov	r7, #0
   26a84:	b	26a94 <__assert_fail@plt+0x13ea4>
   26a88:	mov	r7, #2
   26a8c:	b	26a94 <__assert_fail@plt+0x13ea4>
   26a90:	mov	r7, #1
   26a94:	mov	r0, r7
   26a98:	sub	sp, fp, #28
   26a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26aa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26aa4:	add	fp, sp, #28
   26aa8:	sub	sp, sp, #28
   26aac:	mov	r5, r1
   26ab0:	mov	r8, r0
   26ab4:	ldr	r0, [r5]
   26ab8:	ldrb	r6, [r0]
   26abc:	mov	r0, r6
   26ac0:	bl	3db7c <__assert_fail@plt+0x2af8c>
   26ac4:	cmp	r0, #0
   26ac8:	beq	26ae0 <__assert_fail@plt+0x13ef0>
   26acc:	ldr	r0, [r5]
   26ad0:	add	r1, r0, #1
   26ad4:	str	r1, [r5]
   26ad8:	ldrb	r6, [r0, #1]
   26adc:	b	26abc <__assert_fail@plt+0x13ecc>
   26ae0:	mov	r0, r6
   26ae4:	bl	3d990 <__assert_fail@plt+0x2ada0>
   26ae8:	cmp	r0, #0
   26aec:	bne	26afc <__assert_fail@plt+0x13f0c>
   26af0:	cmp	r6, #45	; 0x2d
   26af4:	cmpne	r6, #43	; 0x2b
   26af8:	bne	26b3c <__assert_fail@plt+0x13f4c>
   26afc:	ldr	r4, [r5]
   26b00:	cmp	r6, #45	; 0x2d
   26b04:	cmpne	r6, #43	; 0x2b
   26b08:	bne	26bb4 <__assert_fail@plt+0x13fc4>
   26b0c:	add	r4, r4, #1
   26b10:	str	r4, [r5]
   26b14:	ldrb	r7, [r4], #1
   26b18:	mov	r0, r7
   26b1c:	bl	3db7c <__assert_fail@plt+0x2af8c>
   26b20:	cmp	r0, #0
   26b24:	bne	26b10 <__assert_fail@plt+0x13f20>
   26b28:	mov	r0, r7
   26b2c:	bl	3d990 <__assert_fail@plt+0x2ada0>
   26b30:	cmp	r0, #0
   26b34:	beq	26ab4 <__assert_fail@plt+0x13ec4>
   26b38:	b	26bc8 <__assert_fail@plt+0x13fd8>
   26b3c:	mov	r0, r6
   26b40:	bl	3d920 <__assert_fail@plt+0x2ad30>
   26b44:	cmp	r0, #0
   26b48:	bne	26d20 <__assert_fail@plt+0x14130>
   26b4c:	cmp	r6, #40	; 0x28
   26b50:	bne	26d90 <__assert_fail@plt+0x141a0>
   26b54:	mov	r0, #0
   26b58:	b	26b68 <__assert_fail@plt+0x13f78>
   26b5c:	sub	r0, r0, #1
   26b60:	cmp	r0, #0
   26b64:	beq	26ab4 <__assert_fail@plt+0x13ec4>
   26b68:	ldr	r1, [r5]
   26b6c:	add	r2, r1, #1
   26b70:	str	r2, [r5]
   26b74:	ldrb	r1, [r1]
   26b78:	cmp	r1, #40	; 0x28
   26b7c:	beq	26b94 <__assert_fail@plt+0x13fa4>
   26b80:	cmp	r1, #41	; 0x29
   26b84:	beq	26b5c <__assert_fail@plt+0x13f6c>
   26b88:	cmp	r1, #0
   26b8c:	bne	26b60 <__assert_fail@plt+0x13f70>
   26b90:	b	26ba4 <__assert_fail@plt+0x13fb4>
   26b94:	add	r0, r0, #1
   26b98:	cmp	r0, #0
   26b9c:	bne	26b68 <__assert_fail@plt+0x13f78>
   26ba0:	b	26ab4 <__assert_fail@plt+0x13ec4>
   26ba4:	mov	sl, #0
   26ba8:	mov	r0, sl
   26bac:	sub	sp, fp, #28
   26bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26bb4:	str	r8, [sp]
   26bb8:	mov	r0, #0
   26bbc:	str	r0, [sp, #4]
   26bc0:	mov	r7, r6
   26bc4:	b	26be0 <__assert_fail@plt+0x13ff0>
   26bc8:	str	r8, [sp]
   26bcc:	mov	r0, #1
   26bd0:	cmp	r6, #45	; 0x2d
   26bd4:	mvneq	r0, #0
   26bd8:	str	r0, [sp, #4]
   26bdc:	sub	r4, r4, #1
   26be0:	mov	r6, #0
   26be4:	mvn	r8, #47	; 0x2f
   26be8:	movw	r9, #52428	; 0xcccc
   26bec:	movt	r9, #3276	; 0xccc
   26bf0:	mov	sl, #63	; 0x3f
   26bf4:	cmn	r6, #1
   26bf8:	ble	26c08 <__assert_fail@plt+0x14018>
   26bfc:	cmp	r6, r9
   26c00:	ble	26c1c <__assert_fail@plt+0x1402c>
   26c04:	b	26d88 <__assert_fail@plt+0x14198>
   26c08:	beq	26c1c <__assert_fail@plt+0x1402c>
   26c0c:	mov	r0, #-2147483648	; 0x80000000
   26c10:	sdiv	r0, r0, r6
   26c14:	cmp	r0, #10
   26c18:	blt	26d88 <__assert_fail@plt+0x14198>
   26c1c:	uxtab	r0, r8, r7
   26c20:	uxtb	r1, r7
   26c24:	ldr	r2, [sp, #4]
   26c28:	cmp	r2, #0
   26c2c:	rsbmi	r0, r1, #48	; 0x30
   26c30:	add	r1, r6, r6, lsl #2
   26c34:	add	r6, r0, r1, lsl #1
   26c38:	cmp	r6, r1, lsl #1
   26c3c:	bvs	26ba8 <__assert_fail@plt+0x13fb8>
   26c40:	ldrb	r7, [r4, #1]!
   26c44:	mov	r0, r7
   26c48:	bl	3d990 <__assert_fail@plt+0x2ada0>
   26c4c:	cmp	r0, #0
   26c50:	bne	26bf4 <__assert_fail@plt+0x14004>
   26c54:	orr	r0, r7, #2
   26c58:	cmp	r0, #46	; 0x2e
   26c5c:	bne	26cb4 <__assert_fail@plt+0x140c4>
   26c60:	ldrb	r0, [r4, #1]
   26c64:	bl	3d990 <__assert_fail@plt+0x2ada0>
   26c68:	cmp	r0, #0
   26c6c:	beq	26cb4 <__assert_fail@plt+0x140c4>
   26c70:	add	r8, r4, #2
   26c74:	ldrb	r0, [r4, #1]
   26c78:	sub	r7, r0, #48	; 0x30
   26c7c:	mov	r4, #8
   26c80:	b	26c8c <__assert_fail@plt+0x1409c>
   26c84:	subs	r4, r4, #1
   26c88:	beq	26cf0 <__assert_fail@plt+0x14100>
   26c8c:	ldrb	r0, [r8]
   26c90:	add	r1, r7, r7, lsl #2
   26c94:	lsl	r7, r1, #1
   26c98:	bl	3d990 <__assert_fail@plt+0x2ada0>
   26c9c:	cmp	r0, #0
   26ca0:	beq	26c84 <__assert_fail@plt+0x14094>
   26ca4:	ldrb	r0, [r8], #1
   26ca8:	add	r0, r7, r0
   26cac:	sub	r7, r0, #48	; 0x30
   26cb0:	b	26c84 <__assert_fail@plt+0x14094>
   26cb4:	ldr	r1, [sp]
   26cb8:	str	r6, [r1, #8]
   26cbc:	asr	r0, r6, #31
   26cc0:	str	r0, [r1, #12]
   26cc4:	ldr	r2, [sp, #4]
   26cc8:	lsr	r0, r2, #31
   26ccc:	strb	r0, [r1]
   26cd0:	ldr	r0, [r5]
   26cd4:	sub	r0, r4, r0
   26cd8:	str	r0, [r1, #16]
   26cdc:	str	r4, [r5]
   26ce0:	movw	sl, #274	; 0x112
   26ce4:	cmp	r2, #0
   26ce8:	movweq	sl, #275	; 0x113
   26cec:	b	26ba8 <__assert_fail@plt+0x13fb8>
   26cf0:	ldr	r0, [sp, #4]
   26cf4:	cmn	r0, #1
   26cf8:	bgt	26db0 <__assert_fail@plt+0x141c0>
   26cfc:	ldrb	r0, [r8]
   26d00:	bl	3d990 <__assert_fail@plt+0x2ada0>
   26d04:	cmp	r0, #0
   26d08:	beq	26db0 <__assert_fail@plt+0x141c0>
   26d0c:	ldrb	r0, [r8]
   26d10:	cmp	r0, #48	; 0x30
   26d14:	bne	26dac <__assert_fail@plt+0x141bc>
   26d18:	ldrb	r0, [r8, #1]!
   26d1c:	b	26d00 <__assert_fail@plt+0x14110>
   26d20:	add	r4, sp, #8
   26d24:	add	r7, r4, #19
   26d28:	cmp	r4, r7
   26d2c:	strbcc	r6, [r4], #1
   26d30:	ldr	r0, [r5]
   26d34:	add	r1, r0, #1
   26d38:	str	r1, [r5]
   26d3c:	ldrb	r6, [r0, #1]
   26d40:	mov	r0, r6
   26d44:	bl	3d920 <__assert_fail@plt+0x2ad30>
   26d48:	cmp	r0, #0
   26d4c:	bne	26d28 <__assert_fail@plt+0x14138>
   26d50:	cmp	r6, #46	; 0x2e
   26d54:	beq	26d28 <__assert_fail@plt+0x14138>
   26d58:	mov	r0, #0
   26d5c:	strb	r0, [r4]
   26d60:	add	r1, sp, #8
   26d64:	mov	r0, r5
   26d68:	bl	286a4 <__assert_fail@plt+0x15ab4>
   26d6c:	cmp	r0, #0
   26d70:	beq	26d88 <__assert_fail@plt+0x14198>
   26d74:	ldr	r2, [r0, #8]
   26d78:	asr	r3, r2, #31
   26d7c:	strd	r2, [r8]
   26d80:	ldr	sl, [r0, #4]
   26d84:	b	26ba8 <__assert_fail@plt+0x13fb8>
   26d88:	mov	sl, #63	; 0x3f
   26d8c:	b	26ba8 <__assert_fail@plt+0x13fb8>
   26d90:	ldr	r0, [r5]
   26d94:	add	r1, r0, #1
   26d98:	str	r1, [r5]
   26d9c:	ldrb	sl, [r0]
   26da0:	mov	r0, sl
   26da4:	bl	2892c <__assert_fail@plt+0x15d3c>
   26da8:	b	26ba8 <__assert_fail@plt+0x13fb8>
   26dac:	add	r7, r7, #1
   26db0:	sub	r4, r8, #1
   26db4:	ldrb	r0, [r4, #1]!
   26db8:	bl	3d990 <__assert_fail@plt+0x2ada0>
   26dbc:	cmp	r0, #0
   26dc0:	bne	26db4 <__assert_fail@plt+0x141c4>
   26dc4:	ldr	r0, [sp, #4]
   26dc8:	cmn	r0, #1
   26dcc:	bgt	26df4 <__assert_fail@plt+0x14204>
   26dd0:	cmp	r7, #0
   26dd4:	beq	26df4 <__assert_fail@plt+0x14204>
   26dd8:	sub	r0, r6, #1
   26ddc:	cmp	r0, r6
   26de0:	bvs	26ba8 <__assert_fail@plt+0x13fb8>
   26de4:	movw	r1, #51712	; 0xca00
   26de8:	movt	r1, #15258	; 0x3b9a
   26dec:	sub	r7, r1, r7
   26df0:	b	26df8 <__assert_fail@plt+0x14208>
   26df4:	mov	r0, r6
   26df8:	ldr	r1, [sp]
   26dfc:	stm	r1, {r0, r7}
   26e00:	str	r4, [r5]
   26e04:	mov	sl, #276	; 0x114
   26e08:	ldr	r0, [sp, #4]
   26e0c:	cmp	r0, #0
   26e10:	movweq	sl, #277	; 0x115
   26e14:	b	26ba8 <__assert_fail@plt+0x13fb8>
   26e18:	str	r3, [r0, #76]	; 0x4c
   26e1c:	str	r2, [r0, #72]	; 0x48
   26e20:	ldr	r1, [sp, #4]
   26e24:	str	r1, [r0, #84]	; 0x54
   26e28:	ldr	r1, [sp]
   26e2c:	str	r1, [r0, #80]	; 0x50
   26e30:	ldr	r1, [sp, #12]
   26e34:	str	r1, [r0, #92]	; 0x5c
   26e38:	ldr	r1, [sp, #8]
   26e3c:	str	r1, [r0, #88]	; 0x58
   26e40:	bx	lr
   26e44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26e48:	add	fp, sp, #28
   26e4c:	sub	sp, sp, #4
   26e50:	mov	r4, r0
   26e54:	ldr	r0, [fp, #16]
   26e58:	mov	r1, #0
   26e5c:	cmp	r0, #3
   26e60:	mov	r0, #0
   26e64:	movwlt	r0, #1
   26e68:	ldr	r8, [fp, #28]
   26e6c:	cmp	r8, #0
   26e70:	movwmi	r1, #1
   26e74:	ands	r0, r1, r0
   26e78:	ldr	r0, [fp, #8]
   26e7c:	mov	r5, #100	; 0x64
   26e80:	umull	r7, r1, r0, r5
   26e84:	ldr	r6, [fp, #12]
   26e88:	mlane	r6, r6, r5, r1
   26e8c:	moveq	r7, r0
   26e90:	cmn	r8, #1
   26e94:	ble	26ed0 <__assert_fail@plt+0x142e0>
   26e98:	mov	sl, r2
   26e9c:	ldr	lr, [fp, #24]
   26ea0:	cmn	r6, #1
   26ea4:	str	r4, [sp]
   26ea8:	ble	26f14 <__assert_fail@plt+0x14324>
   26eac:	mov	ip, #1
   26eb0:	movw	r0, #8738	; 0x2222
   26eb4:	movt	r0, #546	; 0x222
   26eb8:	movw	r1, #8738	; 0x2222
   26ebc:	movt	r1, #8738	; 0x2222
   26ec0:	subs	r1, r1, r7
   26ec4:	sbcs	r0, r0, r6
   26ec8:	bge	26f50 <__assert_fail@plt+0x14360>
   26ecc:	b	26f54 <__assert_fail@plt+0x14364>
   26ed0:	mov	r0, r7
   26ed4:	mov	r1, r6
   26ed8:	mov	r2, #100	; 0x64
   26edc:	mov	r3, #0
   26ee0:	bl	3e700 <__assert_fail@plt+0x2bb10>
   26ee4:	umull	r2, r3, r0, r5
   26ee8:	mla	r3, r1, r5, r3
   26eec:	subs	r2, r7, r2
   26ef0:	sbc	r3, r6, r3
   26ef4:	mov	r7, #60	; 0x3c
   26ef8:	umull	r0, r7, r0, r7
   26efc:	rsb	r1, r1, r1, lsl #4
   26f00:	add	r7, r7, r1, lsl #2
   26f04:	adds	r1, r0, r2
   26f08:	adc	r0, r7, r3
   26f0c:	mov	r2, #1
   26f10:	b	26fe8 <__assert_fail@plt+0x143f8>
   26f14:	and	r0, r7, r6
   26f18:	cmn	r0, #1
   26f1c:	beq	26f50 <__assert_fail@plt+0x14360>
   26f20:	mov	r0, #0
   26f24:	mov	r1, #-2147483648	; 0x80000000
   26f28:	mov	r2, r7
   26f2c:	mov	r3, r6
   26f30:	mov	r4, lr
   26f34:	bl	3e700 <__assert_fail@plt+0x2bb10>
   26f38:	mov	lr, r4
   26f3c:	mov	ip, #1
   26f40:	subs	r0, r0, #60	; 0x3c
   26f44:	sbcs	r0, r1, #0
   26f48:	movge	ip, #0
   26f4c:	b	26f54 <__assert_fail@plt+0x14364>
   26f50:	mov	ip, #0
   26f54:	mov	r3, #0
   26f58:	cmn	r8, #1
   26f5c:	mov	r5, #0
   26f60:	movwgt	r5, #1
   26f64:	mov	r0, #60	; 0x3c
   26f68:	umull	r1, r0, r7, r0
   26f6c:	rsb	r7, r6, r6, lsl #4
   26f70:	add	r7, r0, r7, lsl #2
   26f74:	cmn	r7, #1
   26f78:	mov	r6, #0
   26f7c:	movwgt	r6, #1
   26f80:	subs	r2, r6, r5
   26f84:	movwne	r2, #1
   26f88:	subs	r9, r1, lr
   26f8c:	sbc	r0, r7, r8
   26f90:	cmn	r0, #1
   26f94:	mov	r4, #0
   26f98:	movwgt	r4, #1
   26f9c:	subs	r4, r6, r4
   26fa0:	movwne	r4, #1
   26fa4:	and	r2, r2, r4
   26fa8:	adds	r1, r1, lr
   26fac:	adc	r4, r7, r8
   26fb0:	cmn	r4, #1
   26fb4:	movwgt	r3, #1
   26fb8:	subs	r3, r6, r3
   26fbc:	movwne	r3, #1
   26fc0:	sub	r5, r6, r5
   26fc4:	clz	r5, r5
   26fc8:	lsr	r5, r5, #5
   26fcc:	ands	r6, sl, #1
   26fd0:	andeq	r2, r5, r3
   26fd4:	orr	r2, ip, r2
   26fd8:	eor	r2, r2, #1
   26fdc:	moveq	r0, r4
   26fe0:	movne	r1, r9
   26fe4:	ldr	r4, [sp]
   26fe8:	adds	r3, r1, #1440	; 0x5a0
   26fec:	adc	r7, r0, #0
   26ff0:	mov	r0, #0
   26ff4:	cmp	r2, #0
   26ff8:	beq	27014 <__assert_fail@plt+0x14424>
   26ffc:	rsbs	r2, r3, #2880	; 0xb40
   27000:	rscs	r2, r7, #0
   27004:	rsbcs	r0, r1, r1, lsl #4
   27008:	lslcs	r0, r0, #2
   2700c:	strcs	r0, [r4, #24]
   27010:	movcs	r0, #1
   27014:	sub	sp, fp, #28
   27018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2701c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27020:	add	fp, sp, #28
   27024:	sub	sp, sp, #48	; 0x30
   27028:	str	r3, [fp, #-32]	; 0xffffffe0
   2702c:	add	r8, r0, #96	; 0x60
   27030:	add	sl, r0, #104	; 0x68
   27034:	add	lr, r0, #112	; 0x70
   27038:	add	ip, r0, #120	; 0x78
   2703c:	add	r4, r0, #128	; 0x80
   27040:	add	r3, r0, #136	; 0x88
   27044:	ldr	r1, [r0, #144]	; 0x90
   27048:	ldr	r7, [fp, #40]	; 0x28
   2704c:	ldr	r9, [fp, #36]	; 0x24
   27050:	ldr	r6, [fp, #48]	; 0x30
   27054:	ldr	r5, [fp, #56]	; 0x38
   27058:	cmn	r5, #1
   2705c:	str	r0, [sp, #36]	; 0x24
   27060:	str	r1, [fp, #-36]	; 0xffffffdc
   27064:	ble	2730c <__assert_fail@plt+0x1471c>
   27068:	add	r5, r1, r6
   2706c:	str	r5, [sp, #32]
   27070:	str	r5, [r0, #144]	; 0x90
   27074:	ldr	r5, [r3]
   27078:	ldr	r1, [r3, #4]
   2707c:	adds	r0, r5, r7
   27080:	ldr	r5, [fp, #44]	; 0x2c
   27084:	adc	r5, r1, r5
   27088:	stm	r3, {r0, r5}
   2708c:	ldm	r4, {r0, r3}
   27090:	ldr	r6, [fp, #32]
   27094:	adds	r0, r0, r6
   27098:	adc	r9, r3, r9
   2709c:	stm	r4, {r0, r9}
   270a0:	ldm	ip, {r0, r4}
   270a4:	ldr	r6, [fp, #24]
   270a8:	adds	r6, r0, r6
   270ac:	ldr	r0, [fp, #28]
   270b0:	adc	r7, r4, r0
   270b4:	strd	r6, [ip]
   270b8:	ldm	lr, {r6, ip}
   270bc:	str	ip, [sp, #20]
   270c0:	ldr	r0, [fp, #16]
   270c4:	adds	r6, r6, r0
   270c8:	ldr	r0, [fp, #20]
   270cc:	adc	r0, ip, r0
   270d0:	str	r0, [sp, #24]
   270d4:	str	r6, [lr]
   270d8:	str	r0, [lr, #4]
   270dc:	ldm	sl, {r6, lr}
   270e0:	ldr	r0, [fp, #8]
   270e4:	adds	r6, r6, r0
   270e8:	ldr	r0, [fp, #12]
   270ec:	adc	r0, lr, r0
   270f0:	str	r0, [sp, #28]
   270f4:	str	r6, [sl]
   270f8:	str	r0, [sl, #4]
   270fc:	ldm	r8, {r6, sl}
   27100:	adds	r2, r6, r2
   27104:	ldr	ip, [fp, #-32]	; 0xffffffe0
   27108:	adc	r0, sl, ip
   2710c:	mov	r6, sl
   27110:	str	r2, [r8]
   27114:	str	r0, [r8, #4]
   27118:	mov	r8, r0
   2711c:	cmn	r1, #1
   27120:	mov	r0, #0
   27124:	movwgt	r0, #1
   27128:	cmn	r5, #1
   2712c:	mov	r1, #0
   27130:	movwgt	r1, #1
   27134:	str	r0, [sp, #16]
   27138:	subs	r0, r0, r1
   2713c:	movwne	r0, #1
   27140:	str	r0, [sp, #12]
   27144:	ldr	r0, [fp, #44]	; 0x2c
   27148:	cmn	r0, #1
   2714c:	mov	r0, #0
   27150:	movwgt	r0, #1
   27154:	str	r0, [sp, #8]
   27158:	cmn	r3, #1
   2715c:	mov	r1, #0
   27160:	movwgt	r1, #1
   27164:	cmn	r9, #1
   27168:	mov	r2, #0
   2716c:	movwgt	r2, #1
   27170:	subs	r2, r1, r2
   27174:	movwne	r2, #1
   27178:	ldr	r0, [fp, #36]	; 0x24
   2717c:	cmn	r0, #1
   27180:	mov	r0, #0
   27184:	movwgt	r0, #1
   27188:	str	r0, [sp, #4]
   2718c:	cmn	r4, #1
   27190:	mov	r5, #0
   27194:	movwgt	r5, #1
   27198:	cmn	r7, #1
   2719c:	mov	r0, #0
   271a0:	movwgt	r0, #1
   271a4:	subs	r4, r5, r0
   271a8:	movwne	r4, #1
   271ac:	ldr	r0, [fp, #28]
   271b0:	cmn	r0, #1
   271b4:	mov	r0, #0
   271b8:	movwgt	r0, #1
   271bc:	str	r0, [sp]
   271c0:	ldr	r0, [sp, #20]
   271c4:	cmn	r0, #1
   271c8:	mov	sl, #0
   271cc:	movwgt	sl, #1
   271d0:	ldr	r0, [sp, #24]
   271d4:	cmn	r0, #1
   271d8:	mov	r0, #0
   271dc:	movwgt	r0, #1
   271e0:	subs	r0, sl, r0
   271e4:	movwne	r0, #1
   271e8:	str	r0, [sp, #24]
   271ec:	ldr	r0, [fp, #20]
   271f0:	cmn	r0, #1
   271f4:	mov	r9, #0
   271f8:	movwgt	r9, #1
   271fc:	cmn	lr, #1
   27200:	mov	r3, #0
   27204:	movwgt	r3, #1
   27208:	ldr	r0, [sp, #28]
   2720c:	cmn	r0, #1
   27210:	mov	r0, #0
   27214:	movwgt	r0, #1
   27218:	subs	r0, r3, r0
   2721c:	movwne	r0, #1
   27220:	str	r0, [sp, #28]
   27224:	ldr	r0, [fp, #12]
   27228:	cmn	r0, #1
   2722c:	mov	r0, #0
   27230:	movwgt	r0, #1
   27234:	cmn	r6, #1
   27238:	mov	r6, #0
   2723c:	movwgt	r6, #1
   27240:	cmn	r8, #1
   27244:	mov	r7, #0
   27248:	movwgt	r7, #1
   2724c:	subs	r8, r6, r7
   27250:	movwne	r8, #1
   27254:	cmn	ip, #1
   27258:	mov	lr, #0
   2725c:	movwgt	lr, #1
   27260:	ldr	r7, [sp, #32]
   27264:	ldr	ip, [fp, #-36]	; 0xffffffdc
   27268:	cmp	r7, ip
   2726c:	bvs	27598 <__assert_fail@plt+0x149a8>
   27270:	mov	ip, r4
   27274:	mov	r4, r2
   27278:	ldr	r7, [sp, #16]
   2727c:	ldr	r2, [sp, #8]
   27280:	sub	r7, r7, r2
   27284:	clz	r7, r7
   27288:	lsr	r7, r7, #5
   2728c:	ldr	r2, [sp, #12]
   27290:	ands	r7, r7, r2
   27294:	bne	27598 <__assert_fail@plt+0x149a8>
   27298:	ldr	r2, [sp, #4]
   2729c:	sub	r1, r1, r2
   272a0:	clz	r1, r1
   272a4:	lsr	r1, r1, #5
   272a8:	ands	r1, r1, r4
   272ac:	mov	r7, #0
   272b0:	bne	2758c <__assert_fail@plt+0x1499c>
   272b4:	ldr	r1, [sp]
   272b8:	sub	r1, r5, r1
   272bc:	clz	r1, r1
   272c0:	lsr	r1, r1, #5
   272c4:	ands	r1, r1, ip
   272c8:	subeq	r1, sl, r9
   272cc:	clzeq	r1, r1
   272d0:	lsreq	r1, r1, #5
   272d4:	ldreq	r2, [sp, #24]
   272d8:	andseq	r1, r1, r2
   272dc:	bne	2758c <__assert_fail@plt+0x1499c>
   272e0:	sub	r0, r3, r0
   272e4:	clz	r0, r0
   272e8:	lsr	r0, r0, #5
   272ec:	ldr	r1, [sp, #28]
   272f0:	ands	r0, r0, r1
   272f4:	subeq	r0, r6, lr
   272f8:	clzeq	r0, r0
   272fc:	lsreq	r0, r0, #5
   27300:	andseq	r0, r0, r8
   27304:	bne	2758c <__assert_fail@plt+0x1499c>
   27308:	b	27580 <__assert_fail@plt+0x14990>
   2730c:	sub	r5, r1, r6
   27310:	str	r5, [r0, #144]	; 0x90
   27314:	ldm	r3, {r5, r9}
   27318:	subs	r0, r5, r7
   2731c:	ldr	r5, [fp, #44]	; 0x2c
   27320:	sbc	r5, r9, r5
   27324:	stm	r3, {r0, r5}
   27328:	ldm	r4, {r0, r3}
   2732c:	ldr	r6, [fp, #32]
   27330:	subs	r0, r0, r6
   27334:	ldr	r6, [fp, #36]	; 0x24
   27338:	sbc	r6, r3, r6
   2733c:	str	r6, [sp, #8]
   27340:	stm	r4, {r0, r6}
   27344:	ldr	r4, [ip]
   27348:	ldr	r0, [ip, #4]
   2734c:	ldr	r6, [fp, #24]
   27350:	subs	r6, r4, r6
   27354:	ldr	r4, [fp, #28]
   27358:	sbc	r4, r0, r4
   2735c:	str	r6, [ip]
   27360:	str	r4, [ip, #4]
   27364:	mov	ip, r4
   27368:	ldrd	r6, [lr]
   2736c:	str	r7, [sp, #12]
   27370:	ldr	r4, [fp, #16]
   27374:	subs	r6, r6, r4
   27378:	ldr	r4, [fp, #20]
   2737c:	sbc	r7, r7, r4
   27380:	str	r7, [sp, #16]
   27384:	strd	r6, [lr]
   27388:	ldrd	r6, [sl]
   2738c:	str	r7, [sp, #20]
   27390:	ldr	r4, [fp, #8]
   27394:	subs	r6, r6, r4
   27398:	ldr	r4, [fp, #12]
   2739c:	sbc	r4, r7, r4
   273a0:	str	r4, [sp, #24]
   273a4:	str	r6, [sl]
   273a8:	str	r4, [sl, #4]
   273ac:	ldr	r6, [r8]
   273b0:	ldr	r4, [r8, #4]
   273b4:	str	r4, [sp, #28]
   273b8:	subs	r2, r6, r2
   273bc:	ldr	r7, [fp, #-32]	; 0xffffffe0
   273c0:	sbc	r6, r4, r7
   273c4:	str	r6, [sp, #32]
   273c8:	stm	r8, {r2, r6}
   273cc:	ldr	r2, [fp, #44]	; 0x2c
   273d0:	cmn	r2, #1
   273d4:	mov	r1, #0
   273d8:	movwgt	r1, #1
   273dc:	cmn	r9, #1
   273e0:	mov	r2, #0
   273e4:	movwgt	r2, #1
   273e8:	subs	r1, r2, r1
   273ec:	movwne	r1, #1
   273f0:	str	r1, [sp, #4]
   273f4:	cmn	r5, #1
   273f8:	mov	r1, #0
   273fc:	movwgt	r1, #1
   27400:	subs	r1, r2, r1
   27404:	movwne	r1, #1
   27408:	str	r1, [sp]
   2740c:	ldr	r1, [fp, #36]	; 0x24
   27410:	cmn	r1, #1
   27414:	mov	r1, #0
   27418:	movwgt	r1, #1
   2741c:	cmn	r3, #1
   27420:	mov	r2, #0
   27424:	movwgt	r2, #1
   27428:	subs	r8, r2, r1
   2742c:	movwne	r8, #1
   27430:	ldr	r1, [sp, #8]
   27434:	cmn	r1, #1
   27438:	mov	r1, #0
   2743c:	movwgt	r1, #1
   27440:	subs	sl, r2, r1
   27444:	movwne	sl, #1
   27448:	ldr	r1, [fp, #28]
   2744c:	cmn	r1, #1
   27450:	mov	r1, #0
   27454:	movwgt	r1, #1
   27458:	cmn	r0, #1
   2745c:	mov	r0, #0
   27460:	movwgt	r0, #1
   27464:	subs	lr, r0, r1
   27468:	movwne	lr, #1
   2746c:	cmn	ip, #1
   27470:	mov	r1, #0
   27474:	movwgt	r1, #1
   27478:	subs	ip, r0, r1
   2747c:	movwne	ip, #1
   27480:	ldr	r0, [fp, #20]
   27484:	cmn	r0, #1
   27488:	mov	r0, #0
   2748c:	movwgt	r0, #1
   27490:	ldr	r1, [sp, #12]
   27494:	cmn	r1, #1
   27498:	mov	r2, #0
   2749c:	movwgt	r2, #1
   274a0:	subs	r3, r2, r0
   274a4:	movwne	r3, #1
   274a8:	ldr	r0, [sp, #16]
   274ac:	cmn	r0, #1
   274b0:	mov	r0, #0
   274b4:	movwgt	r0, #1
   274b8:	subs	r5, r2, r0
   274bc:	movwne	r5, #1
   274c0:	ldr	r0, [fp, #12]
   274c4:	cmn	r0, #1
   274c8:	mov	r0, #0
   274cc:	movwgt	r0, #1
   274d0:	ldr	r1, [sp, #20]
   274d4:	cmn	r1, #1
   274d8:	mov	r2, #0
   274dc:	movwgt	r2, #1
   274e0:	subs	r0, r2, r0
   274e4:	movwne	r0, #1
   274e8:	ldr	r1, [sp, #24]
   274ec:	cmn	r1, #1
   274f0:	mov	r6, #0
   274f4:	movwgt	r6, #1
   274f8:	subs	r4, r2, r6
   274fc:	movwne	r4, #1
   27500:	cmn	r7, #1
   27504:	mov	r2, #0
   27508:	movwgt	r2, #1
   2750c:	ldr	r1, [sp, #28]
   27510:	cmn	r1, #1
   27514:	mov	r7, #0
   27518:	movwgt	r7, #1
   2751c:	subs	r6, r7, r2
   27520:	movwne	r6, #1
   27524:	ldr	r2, [sp, #32]
   27528:	cmn	r2, #1
   2752c:	mov	r2, #0
   27530:	movwgt	r2, #1
   27534:	subs	r2, r7, r2
   27538:	movwne	r2, #1
   2753c:	ldr	r7, [fp, #48]	; 0x30
   27540:	ldr	r9, [fp, #-36]	; 0xffffffdc
   27544:	cmp	r9, r7
   27548:	bvs	27598 <__assert_fail@plt+0x149a8>
   2754c:	ldm	sp, {r1, r7}
   27550:	ands	r7, r7, r1
   27554:	bne	27598 <__assert_fail@plt+0x149a8>
   27558:	ands	r7, r8, sl
   2755c:	bne	27598 <__assert_fail@plt+0x149a8>
   27560:	ands	r1, lr, ip
   27564:	bne	27598 <__assert_fail@plt+0x149a8>
   27568:	ands	r1, r3, r5
   2756c:	mov	r7, #0
   27570:	andseq	r0, r0, r4
   27574:	bne	2758c <__assert_fail@plt+0x1499c>
   27578:	ands	r0, r6, r2
   2757c:	bne	2758c <__assert_fail@plt+0x1499c>
   27580:	mov	r7, #1
   27584:	ldr	r0, [sp, #36]	; 0x24
   27588:	strb	r7, [r0, #153]	; 0x99
   2758c:	mov	r0, r7
   27590:	sub	sp, fp, #28
   27594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27598:	mov	r7, #0
   2759c:	b	2758c <__assert_fail@plt+0x1499c>
   275a0:	adds	r0, r0, #-2147483648	; 0x80000000
   275a4:	adcs	r0, r1, #0
   275a8:	movwne	r0, #1
   275ac:	bx	lr
   275b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   275b4:	add	fp, sp, #28
   275b8:	sub	sp, sp, #4
   275bc:	mov	r4, r0
   275c0:	add	r7, r0, #40	; 0x28
   275c4:	ldr	r0, [r0, #156]	; 0x9c
   275c8:	ldr	r8, [fp, #16]
   275cc:	ldr	r9, [fp, #12]
   275d0:	ldr	sl, [fp, #8]
   275d4:	cmp	r0, #0
   275d8:	beq	27610 <__assert_fail@plt+0x14a20>
   275dc:	mov	r1, r3
   275e0:	mov	r3, r7
   275e4:	ldr	r5, [r3, #8]!
   275e8:	cmp	r5, #0
   275ec:	bne	27610 <__assert_fail@plt+0x14a20>
   275f0:	ldrb	r5, [r4, #153]	; 0x99
   275f4:	cmp	r5, #0
   275f8:	bne	27610 <__assert_fail@plt+0x14a20>
   275fc:	cmp	r8, #2
   27600:	bgt	276fc <__assert_fail@plt+0x14b0c>
   27604:	ldr	r5, [r4, #172]	; 0xac
   27608:	cmp	r5, #0
   2760c:	bne	276fc <__assert_fail@plt+0x14b0c>
   27610:	cmp	r8, #5
   27614:	blt	27680 <__assert_fail@plt+0x14a90>
   27618:	add	r5, r4, #56	; 0x38
   2761c:	add	r6, r4, #64	; 0x40
   27620:	add	r0, r0, #1
   27624:	str	r0, [r4, #156]	; 0x9c
   27628:	mov	r0, sl
   2762c:	mov	r1, r9
   27630:	mov	r2, #100	; 0x64
   27634:	mov	r3, #0
   27638:	bl	3e700 <__assert_fail@plt+0x2bb10>
   2763c:	strd	r2, [r6]
   27640:	mov	r2, #100	; 0x64
   27644:	mov	r3, #0
   27648:	bl	3e700 <__assert_fail@plt+0x2bb10>
   2764c:	mov	r0, r2
   27650:	mov	r1, r3
   27654:	strd	r0, [r5]
   27658:	mov	r0, sl
   2765c:	mov	r1, r9
   27660:	movw	r2, #10000	; 0x2710
   27664:	mov	r3, #0
   27668:	bl	3e700 <__assert_fail@plt+0x2bb10>
   2766c:	strd	r0, [r7]
   27670:	sub	r0, r8, #4
   27674:	str	r0, [r4, #48]	; 0x30
   27678:	sub	sp, fp, #28
   2767c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27680:	add	r5, r4, #72	; 0x48
   27684:	add	r7, r4, #80	; 0x50
   27688:	ldr	r0, [r4, #172]	; 0xac
   2768c:	add	r0, r0, #1
   27690:	str	r0, [r4, #172]	; 0xac
   27694:	cmp	r8, #2
   27698:	bgt	276b0 <__assert_fail@plt+0x14ac0>
   2769c:	str	sl, [r5]
   276a0:	str	r9, [r5, #4]
   276a4:	mov	r0, #0
   276a8:	mov	r1, #0
   276ac:	b	276dc <__assert_fail@plt+0x14aec>
   276b0:	mov	r6, #100	; 0x64
   276b4:	mov	r0, sl
   276b8:	mov	r1, r9
   276bc:	mov	r2, #100	; 0x64
   276c0:	mov	r3, #0
   276c4:	bl	3e700 <__assert_fail@plt+0x2bb10>
   276c8:	strd	r0, [r5]
   276cc:	umull	r0, r2, r0, r6
   276d0:	mla	r1, r1, r6, r2
   276d4:	subs	r0, sl, r0
   276d8:	sbc	r1, r9, r1
   276dc:	strd	r0, [r7]
   276e0:	mov	r0, #0
   276e4:	str	r0, [r4, #88]	; 0x58
   276e8:	str	r0, [r4, #92]	; 0x5c
   276ec:	mov	r0, #2
   276f0:	str	r0, [r4, #28]
   276f4:	sub	sp, fp, #28
   276f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   276fc:	add	r0, r4, #32
   27700:	ldr	ip, [fp, #20]
   27704:	mov	r5, #1
   27708:	strb	r5, [r4, #180]	; 0xb4
   2770c:	str	r2, [r0]
   27710:	str	r1, [r0, #4]
   27714:	str	sl, [r7]
   27718:	str	r9, [r7, #4]
   2771c:	stm	r3, {r8, ip}
   27720:	sub	sp, fp, #28
   27724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27728:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2772c:	add	fp, sp, #24
   27730:	sub	sp, sp, #8
   27734:	mov	r8, r2
   27738:	mov	r5, r1
   2773c:	mov	r6, r0
   27740:	movw	r0, #16753	; 0x4171
   27744:	movt	r0, #4
   27748:	bl	127f4 <getenv@plt>
   2774c:	mov	r4, r0
   27750:	bl	3ce00 <__assert_fail@plt+0x2a210>
   27754:	cmp	r0, #0
   27758:	beq	27790 <__assert_fail@plt+0x14ba0>
   2775c:	mov	r7, r0
   27760:	str	r4, [sp]
   27764:	mov	r0, r6
   27768:	mov	r1, r5
   2776c:	mov	r2, r8
   27770:	mov	r3, r7
   27774:	bl	2779c <__assert_fail@plt+0x14bac>
   27778:	mov	r4, r0
   2777c:	mov	r0, r7
   27780:	bl	3cea0 <__assert_fail@plt+0x2a2b0>
   27784:	mov	r0, r4
   27788:	sub	sp, fp, #24
   2778c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   27790:	mov	r0, #0
   27794:	sub	sp, fp, #24
   27798:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2779c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   277a0:	add	fp, sp, #28
   277a4:	sub	sp, sp, #660	; 0x294
   277a8:	str	r3, [sp, #88]	; 0x58
   277ac:	mov	r6, r2
   277b0:	mov	r4, r1
   277b4:	str	r0, [sp, #44]	; 0x2c
   277b8:	add	r8, sp, #128	; 0x80
   277bc:	cmp	r2, #0
   277c0:	bne	277d0 <__assert_fail@plt+0x14be0>
   277c4:	sub	r6, fp, #228	; 0xe4
   277c8:	mov	r0, r6
   277cc:	bl	3de70 <__assert_fail@plt+0x2b280>
   277d0:	add	r0, r8, #8
   277d4:	str	r0, [sp, #24]
   277d8:	add	r0, r8, #32
   277dc:	str	r0, [sp, #36]	; 0x24
   277e0:	add	r0, r8, #40	; 0x28
   277e4:	str	r0, [sp, #76]	; 0x4c
   277e8:	add	r0, r8, #56	; 0x38
   277ec:	str	r0, [sp, #72]	; 0x48
   277f0:	add	r0, r8, #64	; 0x40
   277f4:	str	r0, [sp, #68]	; 0x44
   277f8:	add	r0, r8, #72	; 0x48
   277fc:	str	r0, [sp, #64]	; 0x40
   27800:	add	r0, r8, #80	; 0x50
   27804:	str	r0, [sp, #60]	; 0x3c
   27808:	add	r0, r8, #88	; 0x58
   2780c:	str	r0, [sp, #40]	; 0x28
   27810:	add	r0, r8, #96	; 0x60
   27814:	str	r0, [sp, #56]	; 0x38
   27818:	add	r0, r8, #104	; 0x68
   2781c:	str	r0, [sp, #28]
   27820:	add	r0, r8, #112	; 0x70
   27824:	str	r0, [sp, #32]
   27828:	add	r0, r8, #120	; 0x78
   2782c:	str	r0, [sp, #20]
   27830:	add	r0, r8, #128	; 0x80
   27834:	str	r0, [sp, #16]
   27838:	add	r0, r8, #136	; 0x88
   2783c:	str	r0, [sp, #12]
   27840:	add	r4, r4, #3
   27844:	ldr	r9, [r6]
   27848:	ldr	r0, [r6, #4]
   2784c:	str	r0, [sp, #52]	; 0x34
   27850:	ldrb	r0, [r4, #-3]
   27854:	bl	3db7c <__assert_fail@plt+0x2af8c>
   27858:	add	r4, r4, #1
   2785c:	cmp	r0, #0
   27860:	bne	27850 <__assert_fail@plt+0x14c60>
   27864:	vmov.i32	q8, #0	; 0x00000000
   27868:	mov	r0, #52	; 0x34
   2786c:	sub	sl, fp, #288	; 0x120
   27870:	mov	r1, sl
   27874:	vst1.64	{d16-d17}, [r1], r0
   27878:	mov	r2, #0
   2787c:	str	r2, [r1]
   27880:	add	r7, sl, #32
   27884:	vst1.64	{d16-d17}, [r7]
   27888:	add	r0, sl, #16
   2788c:	str	r0, [sp, #48]	; 0x30
   27890:	vst1.64	{d16-d17}, [r0]
   27894:	mov	r0, #0
   27898:	str	r0, [sp, #84]	; 0x54
   2789c:	str	r2, [fp, #-240]	; 0xffffff10
   278a0:	sub	r5, r4, #4
   278a4:	movw	r1, #17343	; 0x43bf
   278a8:	movt	r1, #4
   278ac:	mov	r0, r5
   278b0:	mov	r2, #4
   278b4:	bl	12b90 <strncmp@plt>
   278b8:	cmp	r0, #0
   278bc:	beq	27ac0 <__assert_fail@plt+0x14ed0>
   278c0:	ldr	r1, [sp, #88]	; 0x58
   278c4:	mov	r0, #0
   278c8:	str	r0, [sp, #80]	; 0x50
   278cc:	sub	r2, fp, #332	; 0x14c
   278d0:	str	r1, [sp, #92]	; 0x5c
   278d4:	mov	r0, r1
   278d8:	mov	r1, r6
   278dc:	bl	3cec8 <__assert_fail@plt+0x2a2d8>
   278e0:	cmp	r0, #0
   278e4:	beq	27b48 <__assert_fail@plt+0x14f58>
   278e8:	ldrb	r0, [r5]
   278ec:	movw	r1, #65169	; 0xfe91
   278f0:	movt	r1, #3
   278f4:	cmp	r0, #0
   278f8:	movne	r1, r5
   278fc:	str	r1, [sp, #128]	; 0x80
   27900:	ldr	r0, [fp, #-312]	; 0xfffffec8
   27904:	asr	r1, r0, #31
   27908:	movw	r2, #1900	; 0x76c
   2790c:	adds	r0, r0, r2
   27910:	adc	r1, r1, #0
   27914:	ldr	r6, [sp, #76]	; 0x4c
   27918:	strd	r0, [r6]
   2791c:	mov	r0, #0
   27920:	str	r0, [sp, #176]	; 0xb0
   27924:	ldr	r1, [fp, #-316]	; 0xfffffec4
   27928:	add	r2, r1, #1
   2792c:	asr	r3, r2, #31
   27930:	ldr	r1, [sp, #72]	; 0x48
   27934:	strd	r2, [r1]
   27938:	ldr	r2, [fp, #-320]	; 0xfffffec0
   2793c:	asr	r3, r2, #31
   27940:	ldr	r1, [sp, #68]	; 0x44
   27944:	strd	r2, [r1]
   27948:	ldr	r2, [fp, #-324]	; 0xfffffebc
   2794c:	asr	r3, r2, #31
   27950:	ldr	r1, [sp, #64]	; 0x40
   27954:	strd	r2, [r1]
   27958:	ldr	r2, [fp, #-328]	; 0xfffffeb8
   2795c:	asr	r3, r2, #31
   27960:	ldr	r1, [sp, #60]	; 0x3c
   27964:	strd	r2, [r1]
   27968:	mov	r1, #48	; 0x30
   2796c:	vld1.64	{d16-d17}, [sl], r1
   27970:	ldr	r2, [sp, #52]	; 0x34
   27974:	str	r2, [sp, #220]	; 0xdc
   27978:	mov	r2, #2
   2797c:	vld1.64	{d18-d19}, [r7]
   27980:	str	r2, [sp, #156]	; 0x9c
   27984:	ldr	r2, [fp, #-332]	; 0xfffffeb4
   27988:	ldr	r3, [fp, #-300]	; 0xfffffed4
   2798c:	str	r2, [sp, #216]	; 0xd8
   27990:	str	r3, [fp, #-44]	; 0xffffffd4
   27994:	ldr	r7, [sp, #56]	; 0x38
   27998:	add	r2, r7, #32
   2799c:	ldr	r5, [sp, #48]	; 0x30
   279a0:	vld1.64	{d20-d21}, [r5]
   279a4:	vldr	d22, [sl]
   279a8:	vst1.64	{d18-d19}, [r2]
   279ac:	add	r2, r7, #16
   279b0:	vst1.64	{d20-d21}, [r2]
   279b4:	mov	r2, r7
   279b8:	vst1.64	{d16-d17}, [r2], r1
   279bc:	vstr	d22, [r2]
   279c0:	vmov.i32	q8, #0	; 0x00000000
   279c4:	add	r1, r8, #156	; 0x9c
   279c8:	vst1.32	{d16-d17}, [r1]
   279cc:	add	r1, r8, #172	; 0xac
   279d0:	vst1.32	{d16-d17}, [r1]
   279d4:	add	lr, sp, #256	; 0x100
   279d8:	strh	r0, [lr, #24]
   279dc:	str	r0, [sp, #328]	; 0x148
   279e0:	str	r3, [sp, #324]	; 0x144
   279e4:	movw	r0, #269	; 0x10d
   279e8:	str	r0, [sp, #320]	; 0x140
   279ec:	ldr	r0, [fp, #-292]	; 0xfffffedc
   279f0:	str	r0, [sp, #316]	; 0x13c
   279f4:	add	r8, r6, #8
   279f8:	mov	r7, #3
   279fc:	movw	r6, #42752	; 0xa700
   27a00:	movt	r6, #118	; 0x76
   27a04:	add	sl, sp, #96	; 0x60
   27a08:	sub	r4, fp, #120	; 0x78
   27a0c:	mov	r5, r6
   27a10:	b	27a20 <__assert_fail@plt+0x14e30>
   27a14:	add	r5, r5, r6
   27a18:	subs	r7, r7, #1
   27a1c:	beq	27a78 <__assert_fail@plt+0x14e88>
   27a20:	adds	r0, r9, r5
   27a24:	str	r0, [sp, #96]	; 0x60
   27a28:	bvs	27a78 <__assert_fail@plt+0x14e88>
   27a2c:	ldr	r0, [sp, #92]	; 0x5c
   27a30:	mov	r1, sl
   27a34:	mov	r2, r4
   27a38:	bl	3cec8 <__assert_fail@plt+0x2a2d8>
   27a3c:	cmp	r0, #0
   27a40:	beq	27a14 <__assert_fail@plt+0x14e24>
   27a44:	ldr	r0, [fp, #-80]	; 0xffffffb0
   27a48:	cmp	r0, #0
   27a4c:	beq	27a14 <__assert_fail@plt+0x14e24>
   27a50:	ldr	r1, [fp, #-88]	; 0xffffffa8
   27a54:	ldr	r2, [sp, #324]	; 0x144
   27a58:	cmp	r1, r2
   27a5c:	beq	27a14 <__assert_fail@plt+0x14e24>
   27a60:	mov	r2, #0
   27a64:	str	r2, [sp, #340]	; 0x154
   27a68:	str	r1, [sp, #336]	; 0x150
   27a6c:	movw	r1, #269	; 0x10d
   27a70:	str	r1, [sp, #332]	; 0x14c
   27a74:	str	r0, [sp, #328]	; 0x148
   27a78:	ldr	r0, [sp, #316]	; 0x13c
   27a7c:	cmp	r0, #0
   27a80:	beq	27aa8 <__assert_fail@plt+0x14eb8>
   27a84:	ldr	r1, [sp, #328]	; 0x148
   27a88:	cmp	r1, #0
   27a8c:	beq	27aa8 <__assert_fail@plt+0x14eb8>
   27a90:	bl	124f4 <strcmp@plt>
   27a94:	cmp	r0, #0
   27a98:	moveq	r0, #0
   27a9c:	streq	r0, [sp, #328]	; 0x148
   27aa0:	mvneq	r0, #0
   27aa4:	streq	r0, [sp, #324]	; 0x144
   27aa8:	add	r0, sp, #128	; 0x80
   27aac:	bl	25680 <__assert_fail@plt+0x12a90>
   27ab0:	cmp	r0, #0
   27ab4:	beq	27b24 <__assert_fail@plt+0x14f34>
   27ab8:	mov	r0, #0
   27abc:	b	27b44 <__assert_fail@plt+0x14f54>
   27ac0:	mov	r0, #1
   27ac4:	mov	r1, r4
   27ac8:	b	27ae4 <__assert_fail@plt+0x14ef4>
   27acc:	ldrb	r2, [r1, #1]!
   27ad0:	cmp	r2, #34	; 0x22
   27ad4:	cmpne	r2, #92	; 0x5c
   27ad8:	bne	278c0 <__assert_fail@plt+0x14cd0>
   27adc:	add	r0, r0, #1
   27ae0:	add	r1, r1, #1
   27ae4:	ldrb	r2, [r1]
   27ae8:	cmp	r2, #92	; 0x5c
   27aec:	beq	27acc <__assert_fail@plt+0x14edc>
   27af0:	cmp	r2, #0
   27af4:	beq	278c0 <__assert_fail@plt+0x14cd0>
   27af8:	cmp	r2, #34	; 0x22
   27afc:	bne	27adc <__assert_fail@plt+0x14eec>
   27b00:	cmp	r0, #101	; 0x65
   27b04:	bcc	27ca4 <__assert_fail@plt+0x150b4>
   27b08:	bl	2ed88 <__assert_fail@plt+0x1c198>
   27b0c:	cmp	r0, #0
   27b10:	mov	r5, r0
   27b14:	bne	27cac <__assert_fail@plt+0x150bc>
   27b18:	mov	r4, #0
   27b1c:	mov	r5, #0
   27b20:	b	27b68 <__assert_fail@plt+0x14f78>
   27b24:	ldrb	r0, [sp, #280]	; 0x118
   27b28:	cmp	r0, #0
   27b2c:	beq	27b7c <__assert_fail@plt+0x14f8c>
   27b30:	ldr	r0, [sp, #40]	; 0x28
   27b34:	ldrd	r0, [r0]
   27b38:	ldr	r2, [sp, #44]	; 0x2c
   27b3c:	stm	r2, {r0, r1}
   27b40:	mov	r0, #1
   27b44:	str	r0, [sp, #84]	; 0x54
   27b48:	ldr	r0, [sp, #88]	; 0x58
   27b4c:	ldr	r1, [sp, #92]	; 0x5c
   27b50:	cmp	r1, r0
   27b54:	beq	27b60 <__assert_fail@plt+0x14f70>
   27b58:	mov	r0, r1
   27b5c:	bl	3cea0 <__assert_fail@plt+0x2a2b0>
   27b60:	ldr	r5, [sp, #80]	; 0x50
   27b64:	ldr	r4, [sp, #84]	; 0x54
   27b68:	mov	r0, r5
   27b6c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   27b70:	mov	r0, r4
   27b74:	sub	sp, fp, #28
   27b78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b7c:	mov	r0, #0
   27b80:	str	r0, [sp, #84]	; 0x54
   27b84:	add	r3, sp, #284	; 0x11c
   27b88:	ldm	r3, {r0, r1, r2, r3}
   27b8c:	ldr	r7, [sp, #304]	; 0x130
   27b90:	add	r2, r7, r2
   27b94:	ldr	r7, [sp, #300]	; 0x12c
   27b98:	orr	r0, r0, r7
   27b9c:	orr	r0, r0, r1
   27ba0:	orr	r0, r0, r3
   27ba4:	orr	r0, r0, r2
   27ba8:	cmp	r0, #1
   27bac:	bgt	27b48 <__assert_fail@plt+0x14f58>
   27bb0:	ldr	r0, [sp, #76]	; 0x4c
   27bb4:	ldrd	r2, [r0]
   27bb8:	ldr	r0, [sp, #36]	; 0x24
   27bbc:	ldrd	r0, [r0]
   27bc0:	ldrd	r4, [r8]
   27bc4:	sub	r7, fp, #76	; 0x4c
   27bc8:	add	r7, r7, #20
   27bcc:	stm	sp, {r4, r5, r7}
   27bd0:	bl	289dc <__assert_fail@plt+0x15dec>
   27bd4:	cmp	r0, #0
   27bd8:	beq	27b48 <__assert_fail@plt+0x14f58>
   27bdc:	ldr	r0, [sp, #72]	; 0x48
   27be0:	ldrd	r0, [r0]
   27be4:	cmn	r1, #1
   27be8:	mov	r2, #0
   27bec:	movwgt	r2, #1
   27bf0:	subs	r5, r0, #1
   27bf4:	str	r5, [fp, #-60]	; 0xffffffc4
   27bf8:	sbc	r0, r1, #0
   27bfc:	cmn	r0, #1
   27c00:	mov	r3, #0
   27c04:	movwgt	r3, #1
   27c08:	subs	r2, r2, r3
   27c0c:	movwne	r2, #1
   27c10:	cmp	r1, #0
   27c14:	mov	r1, #0
   27c18:	movwmi	r1, #1
   27c1c:	tst	r1, r2
   27c20:	asreq	r1, r5, #31
   27c24:	eoreq	r2, r5, r5
   27c28:	eoreq	r0, r0, r1
   27c2c:	orrseq	r0, r2, r0
   27c30:	bne	27ab8 <__assert_fail@plt+0x14ec8>
   27c34:	ldr	r0, [sp, #68]	; 0x44
   27c38:	ldrd	r8, [r0]
   27c3c:	str	r8, [fp, #-64]	; 0xffffffc0
   27c40:	teq	r9, r8, asr #31
   27c44:	bne	27ab8 <__assert_fail@plt+0x14ec8>
   27c48:	ldr	r4, [sp, #300]	; 0x12c
   27c4c:	cmp	r4, #0
   27c50:	bne	27c70 <__assert_fail@plt+0x15080>
   27c54:	ldrb	r0, [sp, #281]	; 0x119
   27c58:	cmp	r0, #0
   27c5c:	beq	27d1c <__assert_fail@plt+0x1512c>
   27c60:	ldr	r0, [sp, #284]	; 0x11c
   27c64:	ldr	r1, [sp, #288]	; 0x120
   27c68:	orrs	r0, r1, r0
   27c6c:	bne	27d1c <__assert_fail@plt+0x1512c>
   27c70:	ldr	r0, [sp, #64]	; 0x40
   27c74:	ldrd	r0, [r0]
   27c78:	ldr	r2, [sp, #156]	; 0x9c
   27c7c:	bl	28a5c <__assert_fail@plt+0x15e6c>
   27c80:	str	r0, [fp, #-68]	; 0xffffffbc
   27c84:	cmp	r0, #0
   27c88:	bmi	27ab8 <__assert_fail@plt+0x14ec8>
   27c8c:	ldr	r0, [sp, #60]	; 0x3c
   27c90:	ldr	r0, [r0]
   27c94:	ldr	r1, [sp, #216]	; 0xd8
   27c98:	str	r1, [fp, #-76]	; 0xffffffb4
   27c9c:	str	r0, [fp, #-72]	; 0xffffffb8
   27ca0:	b	27d30 <__assert_fail@plt+0x15140>
   27ca4:	mov	r5, #0
   27ca8:	sub	r0, fp, #220	; 0xdc
   27cac:	ldrb	r2, [r4]
   27cb0:	mov	r1, r0
   27cb4:	cmp	r2, #34	; 0x22
   27cb8:	beq	27cdc <__assert_fail@plt+0x150ec>
   27cbc:	uxtb	r2, r2
   27cc0:	cmp	r2, #92	; 0x5c
   27cc4:	addeq	r4, r4, #1
   27cc8:	ldrb	r2, [r4]
   27ccc:	strb	r2, [r1], #1
   27cd0:	ldrb	r2, [r4, #1]!
   27cd4:	cmp	r2, #34	; 0x22
   27cd8:	bne	27cbc <__assert_fail@plt+0x150cc>
   27cdc:	mov	r2, #0
   27ce0:	strb	r2, [r1]
   27ce4:	bl	3ce00 <__assert_fail@plt+0x2a210>
   27ce8:	cmp	r0, #0
   27cec:	beq	27d14 <__assert_fail@plt+0x15124>
   27cf0:	str	r0, [sp, #92]	; 0x5c
   27cf4:	str	r5, [sp, #80]	; 0x50
   27cf8:	ldrb	r0, [r4, #1]!
   27cfc:	bl	3db7c <__assert_fail@plt+0x2af8c>
   27d00:	cmp	r0, #0
   27d04:	bne	27cf8 <__assert_fail@plt+0x15108>
   27d08:	mov	r5, r4
   27d0c:	ldr	r1, [sp, #92]	; 0x5c
   27d10:	b	278cc <__assert_fail@plt+0x14cdc>
   27d14:	mov	r4, #0
   27d18:	b	27b68 <__assert_fail@plt+0x14f78>
   27d1c:	mov	r0, #0
   27d20:	str	r0, [fp, #-68]	; 0xffffffbc
   27d24:	str	r0, [fp, #-72]	; 0xffffffb8
   27d28:	str	r0, [fp, #-76]	; 0xffffffb4
   27d2c:	str	r0, [sp, #220]	; 0xdc
   27d30:	ldr	r0, [sp, #284]	; 0x11c
   27d34:	ldr	r1, [sp, #288]	; 0x120
   27d38:	orr	r0, r0, r4
   27d3c:	orrs	r0, r0, r1
   27d40:	mvnne	r0, #0
   27d44:	strne	r0, [fp, #-44]	; 0xffffffd4
   27d48:	ldr	r0, [sp, #292]	; 0x124
   27d4c:	cmp	r0, #0
   27d50:	ldr	r0, [sp, #92]	; 0x5c
   27d54:	ldrne	r1, [sp, #148]	; 0x94
   27d58:	strne	r1, [fp, #-44]	; 0xffffffd4
   27d5c:	str	r5, [fp, #-104]	; 0xffffff98
   27d60:	str	r8, [fp, #-108]	; 0xffffff94
   27d64:	mvn	r1, #0
   27d68:	str	r1, [fp, #-52]	; 0xffffffcc
   27d6c:	sub	r3, fp, #76	; 0x4c
   27d70:	ldm	r3, {r1, r2, r3}
   27d74:	ldr	r7, [fp, #-56]	; 0xffffffc8
   27d78:	str	r1, [sp, #76]	; 0x4c
   27d7c:	str	r1, [fp, #-120]	; 0xffffff88
   27d80:	str	r2, [sp, #72]	; 0x48
   27d84:	str	r2, [fp, #-116]	; 0xffffff8c
   27d88:	str	r3, [sp, #68]	; 0x44
   27d8c:	str	r3, [fp, #-112]	; 0xffffff90
   27d90:	str	r7, [fp, #-100]	; 0xffffff9c
   27d94:	ldr	r9, [fp, #-44]	; 0xffffffd4
   27d98:	str	r9, [fp, #-88]	; 0xffffffa8
   27d9c:	sub	r4, fp, #76	; 0x4c
   27da0:	mov	r1, r4
   27da4:	bl	3d158 <__assert_fail@plt+0x2a568>
   27da8:	mov	r6, r0
   27dac:	sub	r0, fp, #120	; 0x78
   27db0:	mov	r1, r4
   27db4:	bl	28acc <__assert_fail@plt+0x15edc>
   27db8:	cmp	r0, #0
   27dbc:	beq	27e00 <__assert_fail@plt+0x15210>
   27dc0:	ldr	r0, [sp, #288]	; 0x120
   27dc4:	cmp	r0, #0
   27dc8:	beq	280e4 <__assert_fail@plt+0x154f4>
   27dcc:	ldr	r0, [sp, #284]	; 0x11c
   27dd0:	cmp	r0, #0
   27dd4:	bne	280e4 <__assert_fail@plt+0x154f4>
   27dd8:	ldr	r0, [sp, #24]
   27ddc:	ldrd	r4, [r0]
   27de0:	subs	r0, r4, #1
   27de4:	sbcs	r0, r5, #0
   27de8:	blt	27eb0 <__assert_fail@plt+0x152c0>
   27dec:	ldr	r0, [sp, #144]	; 0x90
   27df0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   27df4:	subs	r0, r1, r0
   27df8:	movwne	r0, #1
   27dfc:	b	27eb4 <__assert_fail@plt+0x152c4>
   27e00:	mov	r0, #0
   27e04:	str	r0, [sp, #84]	; 0x54
   27e08:	ldr	r0, [sp, #304]	; 0x130
   27e0c:	cmp	r0, #0
   27e10:	beq	27b48 <__assert_fail@plt+0x14f58>
   27e14:	mov	r0, #88	; 0x58
   27e18:	strb	r0, [sp, #98]	; 0x62
   27e1c:	movw	r0, #22616	; 0x5858
   27e20:	strh	r0, [sp, #96]	; 0x60
   27e24:	ldr	r0, [sp, #152]	; 0x98
   27e28:	add	r1, sl, #3
   27e2c:	bl	28590 <__assert_fail@plt+0x159a0>
   27e30:	mov	r0, sl
   27e34:	bl	3ce00 <__assert_fail@plt+0x2a210>
   27e38:	cmp	r0, #0
   27e3c:	beq	27b48 <__assert_fail@plt+0x14f58>
   27e40:	mov	r6, r0
   27e44:	str	r9, [fp, #-44]	; 0xffffffd4
   27e48:	str	r7, [fp, #-56]	; 0xffffffc8
   27e4c:	str	r5, [fp, #-60]	; 0xffffffc4
   27e50:	str	r8, [fp, #-64]	; 0xffffffc0
   27e54:	ldr	r0, [sp, #68]	; 0x44
   27e58:	str	r0, [fp, #-68]	; 0xffffffbc
   27e5c:	ldr	r0, [sp, #72]	; 0x48
   27e60:	str	r0, [fp, #-72]	; 0xffffffb8
   27e64:	ldr	r0, [sp, #76]	; 0x4c
   27e68:	str	r0, [fp, #-76]	; 0xffffffb4
   27e6c:	mvn	r0, #0
   27e70:	str	r0, [fp, #-52]	; 0xffffffcc
   27e74:	sub	r4, fp, #76	; 0x4c
   27e78:	mov	r0, r6
   27e7c:	mov	r1, r4
   27e80:	bl	3d158 <__assert_fail@plt+0x2a568>
   27e84:	mov	r5, r0
   27e88:	sub	r0, fp, #120	; 0x78
   27e8c:	mov	r1, r4
   27e90:	bl	28acc <__assert_fail@plt+0x15edc>
   27e94:	mov	r4, r0
   27e98:	mov	r0, r6
   27e9c:	bl	3cea0 <__assert_fail@plt+0x2a2b0>
   27ea0:	cmp	r4, #0
   27ea4:	beq	27b48 <__assert_fail@plt+0x14f58>
   27ea8:	mov	r6, r5
   27eac:	b	27dc0 <__assert_fail@plt+0x151d0>
   27eb0:	mov	r0, #0
   27eb4:	subs	r0, r4, r0
   27eb8:	sbcs	r0, r5, #0
   27ebc:	bge	27ee0 <__assert_fail@plt+0x152f0>
   27ec0:	subs	r0, r4, #1
   27ec4:	sbcs	r0, r5, #0
   27ec8:	blt	27f04 <__assert_fail@plt+0x15314>
   27ecc:	ldr	r0, [sp, #144]	; 0x90
   27ed0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   27ed4:	subs	r0, r1, r0
   27ed8:	movwne	r0, #1
   27edc:	b	27f08 <__assert_fail@plt+0x15318>
   27ee0:	mov	r2, #0
   27ee4:	subs	r0, r4, #1
   27ee8:	sbcs	r0, r5, #0
   27eec:	blt	27f40 <__assert_fail@plt+0x15350>
   27ef0:	ldr	r0, [sp, #144]	; 0x90
   27ef4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   27ef8:	subs	r0, r1, r0
   27efc:	movwne	r0, #1
   27f00:	b	27f44 <__assert_fail@plt+0x15354>
   27f04:	mov	r0, #0
   27f08:	subs	r0, r4, r0
   27f0c:	sbc	r1, r5, #0
   27f10:	and	r0, r0, r1
   27f14:	cmn	r0, #1
   27f18:	beq	27f98 <__assert_fail@plt+0x153a8>
   27f1c:	mov	r3, #0
   27f20:	subs	r0, r4, #1
   27f24:	sbcs	r0, r5, #0
   27f28:	blt	27f70 <__assert_fail@plt+0x15380>
   27f2c:	ldr	r0, [sp, #144]	; 0x90
   27f30:	ldr	r1, [fp, #-52]	; 0xffffffcc
   27f34:	subs	r0, r1, r0
   27f38:	movwne	r0, #1
   27f3c:	b	27f74 <__assert_fail@plt+0x15384>
   27f40:	mov	r0, #0
   27f44:	subs	r0, r4, r0
   27f48:	str	r2, [sp, #84]	; 0x54
   27f4c:	sbc	r1, r5, r2
   27f50:	movw	r2, #9362	; 0x2492
   27f54:	movt	r2, #4681	; 0x1249
   27f58:	movw	r3, #37449	; 0x9249
   27f5c:	movt	r3, #18724	; 0x4924
   27f60:	subs	r0, r3, r0
   27f64:	sbcs	r0, r2, r1
   27f68:	blt	27b48 <__assert_fail@plt+0x14f58>
   27f6c:	b	27f98 <__assert_fail@plt+0x153a8>
   27f70:	mov	r0, #0
   27f74:	subs	r2, r4, r0
   27f78:	str	r3, [sp, #84]	; 0x54
   27f7c:	sbc	r3, r5, r3
   27f80:	mov	r0, #0
   27f84:	mov	r1, #-2147483648	; 0x80000000
   27f88:	bl	3e700 <__assert_fail@plt+0x2bb10>
   27f8c:	subs	r0, r0, #7
   27f90:	sbcs	r0, r1, #0
   27f94:	blt	27b48 <__assert_fail@plt+0x14f58>
   27f98:	mov	r2, #0
   27f9c:	subs	r0, r4, #1
   27fa0:	sbcs	r0, r5, #0
   27fa4:	blt	27fbc <__assert_fail@plt+0x153cc>
   27fa8:	ldr	r0, [sp, #144]	; 0x90
   27fac:	ldr	r1, [fp, #-52]	; 0xffffffcc
   27fb0:	subs	r0, r1, r0
   27fb4:	movwne	r0, #1
   27fb8:	b	27fc0 <__assert_fail@plt+0x153d0>
   27fbc:	mov	r0, #0
   27fc0:	mov	r1, #7
   27fc4:	subs	r0, r4, r0
   27fc8:	umull	r0, r1, r0, r1
   27fcc:	str	r2, [sp, #84]	; 0x54
   27fd0:	sbc	r2, r5, r2
   27fd4:	rsb	r2, r2, r2, lsl #3
   27fd8:	add	r2, r1, r2
   27fdc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   27fe0:	ldr	r3, [sp, #144]	; 0x90
   27fe4:	sub	r1, r3, r1
   27fe8:	add	r1, r1, #7
   27fec:	movw	r3, #9363	; 0x2493
   27ff0:	movt	r3, #37449	; 0x9249
   27ff4:	smmla	r3, r1, r3, r1
   27ff8:	asr	r7, r3, #2
   27ffc:	add	r3, r7, r3, lsr #31
   28000:	sub	r3, r3, r3, lsl #3
   28004:	add	r1, r1, r3
   28008:	asr	r3, r1, #31
   2800c:	adds	r1, r1, r0
   28010:	adc	r0, r3, r2
   28014:	cmn	r0, #1
   28018:	mov	r7, #0
   2801c:	movwgt	r7, #1
   28020:	cmn	r3, #1
   28024:	mov	r3, #0
   28028:	movwgt	r3, #1
   2802c:	subs	r7, r3, r7
   28030:	movwne	r7, #1
   28034:	cmn	r2, #1
   28038:	mov	r2, #0
   2803c:	movwgt	r2, #1
   28040:	sub	r2, r3, r2
   28044:	clz	r2, r2
   28048:	lsr	r2, r2, #5
   2804c:	ands	r2, r2, r7
   28050:	bne	27b48 <__assert_fail@plt+0x14f58>
   28054:	cmn	r0, #1
   28058:	mov	r2, #0
   2805c:	movwgt	r2, #1
   28060:	ldr	r3, [fp, #-64]	; 0xffffffc0
   28064:	adds	r1, r1, r3
   28068:	str	r1, [fp, #-64]	; 0xffffffc0
   2806c:	adc	r0, r0, r3, asr #31
   28070:	cmn	r0, #1
   28074:	mov	r7, #0
   28078:	movwgt	r7, #1
   2807c:	subs	r7, r2, r7
   28080:	movwne	r7, #1
   28084:	asr	r3, r3, #31
   28088:	cmn	r3, #1
   2808c:	mov	r3, #0
   28090:	movwgt	r3, #1
   28094:	sub	r2, r2, r3
   28098:	clz	r2, r2
   2809c:	lsr	r2, r2, #5
   280a0:	tst	r2, r7
   280a4:	bne	27ab8 <__assert_fail@plt+0x14ec8>
   280a8:	mov	r2, #0
   280ac:	str	r2, [sp, #84]	; 0x54
   280b0:	asr	r2, r1, #31
   280b4:	eor	r1, r1, r1
   280b8:	eor	r0, r0, r2
   280bc:	orrs	r0, r1, r0
   280c0:	bne	27b48 <__assert_fail@plt+0x14f58>
   280c4:	mvn	r0, #0
   280c8:	str	r0, [fp, #-44]	; 0xffffffd4
   280cc:	sub	r1, fp, #76	; 0x4c
   280d0:	ldr	r0, [sp, #92]	; 0x5c
   280d4:	bl	3d158 <__assert_fail@plt+0x2a568>
   280d8:	mov	r6, r0
   280dc:	cmn	r0, #1
   280e0:	beq	27b48 <__assert_fail@plt+0x14f58>
   280e4:	ldr	r0, [sp, #56]	; 0x38
   280e8:	ldr	r8, [r0]
   280ec:	ldr	r5, [r0, #4]
   280f0:	ldr	r1, [sp, #28]
   280f4:	ldr	r4, [r1]
   280f8:	ldr	r3, [r1, #4]
   280fc:	orr	r7, r3, r5
   28100:	ldr	r1, [sp, #32]
   28104:	ldm	r1, {r2, ip}
   28108:	orr	r7, r7, ip
   2810c:	mov	r0, r6
   28110:	orr	r6, r4, r8
   28114:	orr	r6, r6, r2
   28118:	orrs	r7, r6, r7
   2811c:	beq	28294 <__assert_fail@plt+0x156a4>
   28120:	ldr	r7, [fp, #-56]	; 0xffffffc8
   28124:	asr	r6, r7, #31
   28128:	mov	r1, #0
   2812c:	str	r1, [sp, #84]	; 0x54
   28130:	cmn	r6, #1
   28134:	mov	r1, #0
   28138:	movwgt	r1, #1
   2813c:	adds	r0, r7, r8
   28140:	adc	r7, r6, r5
   28144:	cmn	r7, #1
   28148:	mov	r6, #0
   2814c:	movwgt	r6, #1
   28150:	subs	r6, r1, r6
   28154:	movwne	r6, #1
   28158:	cmn	r5, #1
   2815c:	mov	r5, #0
   28160:	movwgt	r5, #1
   28164:	sub	r1, r1, r5
   28168:	clz	r1, r1
   2816c:	lsr	r1, r1, #5
   28170:	tst	r1, r6
   28174:	asreq	r1, r0, #31
   28178:	eoreq	r6, r0, r0
   2817c:	eoreq	r1, r7, r1
   28180:	orrseq	r1, r6, r1
   28184:	bne	27b48 <__assert_fail@plt+0x14f58>
   28188:	ldr	r1, [fp, #-60]	; 0xffffffc4
   2818c:	asr	r6, r1, #31
   28190:	mov	r7, #0
   28194:	str	r7, [sp, #84]	; 0x54
   28198:	cmn	r6, #1
   2819c:	mov	r5, #0
   281a0:	movwgt	r5, #1
   281a4:	adds	r7, r1, r4
   281a8:	adc	r6, r6, r3
   281ac:	cmn	r6, #1
   281b0:	mov	r1, #0
   281b4:	movwgt	r1, #1
   281b8:	subs	r1, r5, r1
   281bc:	movwne	r1, #1
   281c0:	cmn	r3, #1
   281c4:	mov	r3, #0
   281c8:	movwgt	r3, #1
   281cc:	sub	r3, r5, r3
   281d0:	clz	r3, r3
   281d4:	lsr	r3, r3, #5
   281d8:	tst	r3, r1
   281dc:	asreq	r1, r7, #31
   281e0:	eoreq	r3, r7, r7
   281e4:	eoreq	r1, r6, r1
   281e8:	orrseq	r1, r3, r1
   281ec:	bne	27b48 <__assert_fail@plt+0x14f58>
   281f0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   281f4:	asr	r3, r1, #31
   281f8:	mov	r6, #0
   281fc:	str	r6, [sp, #84]	; 0x54
   28200:	cmn	r3, #1
   28204:	mov	r6, #0
   28208:	movwgt	r6, #1
   2820c:	adds	r2, r1, r2
   28210:	adc	r3, r3, ip
   28214:	cmn	r3, #1
   28218:	mov	r1, #0
   2821c:	movwgt	r1, #1
   28220:	subs	r1, r6, r1
   28224:	movwne	r1, #1
   28228:	cmn	ip, #1
   2822c:	mov	r5, #0
   28230:	movwgt	r5, #1
   28234:	sub	r6, r6, r5
   28238:	clz	r6, r6
   2823c:	lsr	r6, r6, #5
   28240:	tst	r6, r1
   28244:	asreq	r1, r2, #31
   28248:	eoreq	r6, r2, r2
   2824c:	eoreq	r1, r3, r1
   28250:	orrseq	r1, r6, r1
   28254:	bne	27b48 <__assert_fail@plt+0x14f58>
   28258:	str	r7, [fp, #-60]	; 0xffffffc4
   2825c:	str	r0, [fp, #-56]	; 0xffffffc8
   28260:	str	r2, [fp, #-64]	; 0xffffffc0
   28264:	ldr	r0, [sp, #68]	; 0x44
   28268:	str	r0, [fp, #-68]	; 0xffffffbc
   2826c:	ldr	r0, [sp, #72]	; 0x48
   28270:	str	r0, [fp, #-72]	; 0xffffffb8
   28274:	str	r9, [fp, #-44]	; 0xffffffd4
   28278:	ldr	r0, [sp, #76]	; 0x4c
   2827c:	str	r0, [fp, #-76]	; 0xffffffb4
   28280:	sub	r1, fp, #76	; 0x4c
   28284:	ldr	r0, [sp, #92]	; 0x5c
   28288:	bl	3d158 <__assert_fail@plt+0x2a568>
   2828c:	cmn	r0, #1
   28290:	beq	27b48 <__assert_fail@plt+0x14f58>
   28294:	ldr	r1, [sp, #304]	; 0x130
   28298:	cmp	r1, #0
   2829c:	beq	282d0 <__assert_fail@plt+0x156e0>
   282a0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   282a4:	asr	r1, r3, #31
   282a8:	ldr	r2, [sp, #152]	; 0x98
   282ac:	subs	r3, r3, r2
   282b0:	sbc	r1, r1, r2, asr #31
   282b4:	adds	r5, r3, r0
   282b8:	adc	r0, r1, r0, asr #31
   282bc:	teq	r0, r5, asr #31
   282c0:	mov	r0, #0
   282c4:	str	r0, [sp, #84]	; 0x54
   282c8:	bne	27b48 <__assert_fail@plt+0x14f58>
   282cc:	b	282d4 <__assert_fail@plt+0x156e4>
   282d0:	mov	r5, r0
   282d4:	ldr	r0, [sp, #220]	; 0xdc
   282d8:	ldr	r1, [sp, #272]	; 0x110
   282dc:	asr	r2, r1, #31
   282e0:	adds	r4, r1, r0
   282e4:	adc	r6, r2, r0, asr #31
   282e8:	movw	r7, #51712	; 0xca00
   282ec:	movt	r7, #15258	; 0x3b9a
   282f0:	mov	r0, #0
   282f4:	str	r0, [sp, #84]	; 0x54
   282f8:	mov	r0, r4
   282fc:	mov	r1, r6
   28300:	mov	r2, r7
   28304:	mov	r3, #0
   28308:	bl	3e700 <__assert_fail@plt+0x2bb10>
   2830c:	adds	r0, r2, r7
   28310:	adc	r1, r3, #0
   28314:	mov	r2, r7
   28318:	mov	r3, #0
   2831c:	bl	3e700 <__assert_fail@plt+0x2bb10>
   28320:	mov	r9, r2
   28324:	subs	r0, r4, r2
   28328:	sbc	r1, r6, r2, asr #31
   2832c:	mov	r2, r7
   28330:	mov	r3, #0
   28334:	bl	3e700 <__assert_fail@plt+0x2bb10>
   28338:	mov	r4, r0
   2833c:	mov	sl, r1
   28340:	ldr	r0, [sp, #20]
   28344:	ldrd	r6, [r0]
   28348:	cmn	r7, #1
   2834c:	ble	28370 <__assert_fail@plt+0x15780>
   28350:	movw	r0, #6699	; 0x1a2b
   28354:	movt	r0, #9
   28358:	movw	r1, #24175	; 0x5e6f
   2835c:	movt	r1, #15437	; 0x3c4d
   28360:	subs	r1, r1, r6
   28364:	sbcs	r0, r0, r7
   28368:	blt	27b48 <__assert_fail@plt+0x14f58>
   2836c:	b	283a4 <__assert_fail@plt+0x157b4>
   28370:	and	r0, r6, r7
   28374:	cmn	r0, #1
   28378:	beq	283a4 <__assert_fail@plt+0x157b4>
   2837c:	mov	r0, #0
   28380:	str	r0, [sp, #84]	; 0x54
   28384:	mov	r0, #0
   28388:	mov	r1, #-2147483648	; 0x80000000
   2838c:	mov	r2, r6
   28390:	mov	r3, r7
   28394:	bl	3e700 <__assert_fail@plt+0x2bb10>
   28398:	subs	r0, r0, #3600	; 0xe10
   2839c:	sbcs	r0, r1, #0
   283a0:	blt	27b48 <__assert_fail@plt+0x14f58>
   283a4:	mov	r0, #3600	; 0xe10
   283a8:	umull	r1, r2, r6, r0
   283ac:	mla	r0, r7, r0, r2
   283b0:	asr	r2, r5, #31
   283b4:	adds	r6, r5, r1
   283b8:	adc	r5, r2, r0
   283bc:	mov	r1, #0
   283c0:	str	r1, [sp, #84]	; 0x54
   283c4:	cmn	r5, #1
   283c8:	mov	r1, #0
   283cc:	movwgt	r1, #1
   283d0:	cmn	r2, #1
   283d4:	mov	r2, #0
   283d8:	movwgt	r2, #1
   283dc:	subs	r1, r2, r1
   283e0:	movwne	r1, #1
   283e4:	cmn	r0, #1
   283e8:	mov	r0, #0
   283ec:	movwgt	r0, #1
   283f0:	sub	r0, r2, r0
   283f4:	clz	r0, r0
   283f8:	lsr	r0, r0, #5
   283fc:	tst	r0, r1
   28400:	bne	27b48 <__assert_fail@plt+0x14f58>
   28404:	ldr	r0, [sp, #16]
   28408:	ldr	r8, [r0]
   2840c:	ldr	r7, [r0, #4]
   28410:	cmn	r7, #1
   28414:	ble	28438 <__assert_fail@plt+0x15848>
   28418:	movw	r0, #8738	; 0x2222
   2841c:	movt	r0, #546	; 0x222
   28420:	movw	r1, #8738	; 0x2222
   28424:	movt	r1, #8738	; 0x2222
   28428:	subs	r1, r1, r8
   2842c:	sbcs	r0, r0, r7
   28430:	blt	27b48 <__assert_fail@plt+0x14f58>
   28434:	b	2846c <__assert_fail@plt+0x1587c>
   28438:	and	r0, r8, r7
   2843c:	cmn	r0, #1
   28440:	beq	2846c <__assert_fail@plt+0x1587c>
   28444:	mov	r0, #0
   28448:	str	r0, [sp, #84]	; 0x54
   2844c:	mov	r0, #0
   28450:	mov	r1, #-2147483648	; 0x80000000
   28454:	mov	r2, r8
   28458:	mov	r3, r7
   2845c:	bl	3e700 <__assert_fail@plt+0x2bb10>
   28460:	subs	r0, r0, #60	; 0x3c
   28464:	sbcs	r0, r1, #0
   28468:	blt	27b48 <__assert_fail@plt+0x14f58>
   2846c:	mov	r0, #60	; 0x3c
   28470:	umull	r0, r1, r8, r0
   28474:	rsb	r2, r7, r7, lsl #4
   28478:	add	r2, r1, r2, lsl #2
   2847c:	adds	r0, r6, r0
   28480:	adc	r1, r5, r2
   28484:	mov	r3, #0
   28488:	str	r3, [sp, #84]	; 0x54
   2848c:	cmn	r1, #1
   28490:	mov	r3, #0
   28494:	movwgt	r3, #1
   28498:	cmn	r5, #1
   2849c:	mov	r7, #0
   284a0:	movwgt	r7, #1
   284a4:	subs	r3, r7, r3
   284a8:	movwne	r3, #1
   284ac:	cmn	r2, #1
   284b0:	mov	r2, #0
   284b4:	movwgt	r2, #1
   284b8:	sub	r2, r7, r2
   284bc:	clz	r2, r2
   284c0:	lsr	r2, r2, #5
   284c4:	ands	r2, r2, r3
   284c8:	bne	27b48 <__assert_fail@plt+0x14f58>
   284cc:	mov	r2, #0
   284d0:	str	r2, [sp, #84]	; 0x54
   284d4:	cmn	r1, #1
   284d8:	mov	r2, #0
   284dc:	movwgt	r2, #1
   284e0:	ldr	r3, [sp, #12]
   284e4:	ldrd	r6, [r3]
   284e8:	adds	r0, r0, r6
   284ec:	adc	r1, r1, r7
   284f0:	cmn	r1, #1
   284f4:	mov	r3, #0
   284f8:	movwgt	r3, #1
   284fc:	subs	r3, r2, r3
   28500:	movwne	r3, #1
   28504:	cmn	r7, #1
   28508:	mov	r7, #0
   2850c:	movwgt	r7, #1
   28510:	sub	r2, r2, r7
   28514:	clz	r2, r2
   28518:	lsr	r2, r2, #5
   2851c:	ands	r2, r2, r3
   28520:	bne	27b48 <__assert_fail@plt+0x14f58>
   28524:	mov	r2, #0
   28528:	str	r2, [sp, #84]	; 0x54
   2852c:	cmn	r1, #1
   28530:	mov	r2, #0
   28534:	movwgt	r2, #1
   28538:	adds	r0, r0, r4
   2853c:	adc	r1, r1, sl
   28540:	cmn	r1, #1
   28544:	mov	r3, #0
   28548:	movwgt	r3, #1
   2854c:	subs	r3, r2, r3
   28550:	movwne	r3, #1
   28554:	cmn	sl, #1
   28558:	mov	r7, #0
   2855c:	movwgt	r7, #1
   28560:	sub	r2, r2, r7
   28564:	clz	r2, r2
   28568:	lsr	r2, r2, #5
   2856c:	tst	r2, r3
   28570:	asreq	r2, r0, #31
   28574:	eoreq	r3, r0, r0
   28578:	eoreq	r1, r1, r2
   2857c:	orrseq	r1, r3, r1
   28580:	bne	27b48 <__assert_fail@plt+0x14f58>
   28584:	ldr	r1, [sp, #44]	; 0x2c
   28588:	stm	r1, {r0, r9}
   2858c:	b	27b40 <__assert_fail@plt+0x14f50>
   28590:	push	{r4, r5, r6, sl, fp, lr}
   28594:	add	fp, sp, #16
   28598:	mov	r4, r1
   2859c:	mov	r5, r0
   285a0:	movw	r0, #46021	; 0xb3c5
   285a4:	movt	r0, #37282	; 0x91a2
   285a8:	smmla	r0, r5, r0, r5
   285ac:	asr	r1, r0, #11
   285b0:	add	r6, r1, r0, lsr #31
   285b4:	cmp	r6, #0
   285b8:	mov	r3, r6
   285bc:	rsbmi	r3, r6, #0
   285c0:	mov	r2, #43	; 0x2b
   285c4:	cmp	r5, #0
   285c8:	movwmi	r2, #45	; 0x2d
   285cc:	movw	r1, #16756	; 0x4174
   285d0:	movt	r1, #4
   285d4:	mov	r0, r4
   285d8:	bl	12a94 <sprintf@plt>
   285dc:	mov	r1, #3600	; 0xe10
   285e0:	mls	r2, r6, r1, r5
   285e4:	cmp	r2, #0
   285e8:	mov	r1, r2
   285ec:	rsbmi	r1, r2, #0
   285f0:	cmp	r2, #0
   285f4:	beq	286a0 <__assert_fail@plt+0x15ab0>
   285f8:	add	r2, r4, r0
   285fc:	mov	ip, #58	; 0x3a
   28600:	strb	ip, [r2]
   28604:	uxth	r6, r1
   28608:	movw	r1, #33205	; 0x81b5
   2860c:	movt	r1, #6990	; 0x1b4e
   28610:	umull	r1, r3, r6, r1
   28614:	mov	lr, #48	; 0x30
   28618:	add	r3, lr, r3, lsr #6
   2861c:	strb	r3, [r2, #1]
   28620:	movw	r3, #34953	; 0x8889
   28624:	movt	r3, #34952	; 0x8888
   28628:	umull	r3, r5, r6, r3
   2862c:	ubfx	r4, r5, #5, #8
   28630:	movw	r3, #52429	; 0xcccd
   28634:	movt	r3, #52428	; 0xcccc
   28638:	umull	r0, r1, r4, r3
   2863c:	lsr	r0, r1, #3
   28640:	add	r0, r0, r0, lsl #2
   28644:	sub	r0, r4, r0, lsl #1
   28648:	orr	r0, r0, #48	; 0x30
   2864c:	strb	r0, [r2, #2]
   28650:	lsr	r0, r5, #5
   28654:	lsl	r0, r0, #4
   28658:	sub	r0, r0, r5, lsr #5
   2865c:	sub	r6, r6, r0, lsl #2
   28660:	add	r2, r2, #3
   28664:	cmp	r6, #0
   28668:	beq	28698 <__assert_fail@plt+0x15aa8>
   2866c:	strb	ip, [r2]
   28670:	uxtb	r0, r6
   28674:	umull	r1, r3, r0, r3
   28678:	orr	r1, lr, r3, lsr #3
   2867c:	strb	r1, [r2, #1]
   28680:	lsr	r1, r3, #3
   28684:	add	r1, r1, r1, lsl #2
   28688:	sub	r0, r0, r1, lsl #1
   2868c:	orr	r0, r0, #48	; 0x30
   28690:	strb	r0, [r2, #2]
   28694:	add	r2, r2, #3
   28698:	mov	r0, #0
   2869c:	strb	r0, [r2]
   286a0:	pop	{r4, r5, r6, sl, fp, pc}
   286a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   286a8:	add	fp, sp, #24
   286ac:	mov	r4, r1
   286b0:	mov	r8, r0
   286b4:	ldrb	r0, [r1]
   286b8:	cmp	r0, #0
   286bc:	beq	286e0 <__assert_fail@plt+0x15af0>
   286c0:	add	r5, r4, #1
   286c4:	uxtb	r0, r0
   286c8:	bl	3dc04 <__assert_fail@plt+0x2b014>
   286cc:	strb	r0, [r5, #-1]
   286d0:	ldrb	r0, [r5]
   286d4:	add	r5, r5, #1
   286d8:	cmp	r0, #0
   286dc:	bne	286c4 <__assert_fail@plt+0x15ad4>
   286e0:	movw	r6, #15016	; 0x3aa8
   286e4:	movt	r6, #4
   286e8:	movw	r1, #16763	; 0x417b
   286ec:	movt	r1, #4
   286f0:	mov	r0, r4
   286f4:	bl	124f4 <strcmp@plt>
   286f8:	cmp	r0, #0
   286fc:	beq	287a8 <__assert_fail@plt+0x15bb8>
   28700:	ldr	r1, [r6, #12]!
   28704:	cmp	r1, #0
   28708:	bne	286f0 <__assert_fail@plt+0x15b00>
   2870c:	mov	r0, r4
   28710:	bl	128c0 <strlen@plt>
   28714:	mov	r7, r0
   28718:	cmp	r0, #3
   2871c:	beq	2873c <__assert_fail@plt+0x15b4c>
   28720:	cmp	r7, #4
   28724:	bne	28744 <__assert_fail@plt+0x15b54>
   28728:	ldrb	r0, [r4, #3]
   2872c:	sub	r0, r0, #46	; 0x2e
   28730:	clz	r0, r0
   28734:	lsr	r5, r0, #5
   28738:	b	28748 <__assert_fail@plt+0x15b58>
   2873c:	mov	r5, #1
   28740:	b	28748 <__assert_fail@plt+0x15b58>
   28744:	mov	r5, #0
   28748:	movw	r6, #15076	; 0x3ae4
   2874c:	movt	r6, #4
   28750:	movw	r1, #16779	; 0x418b
   28754:	movt	r1, #4
   28758:	mov	r0, r4
   2875c:	cmp	r5, #0
   28760:	beq	28778 <__assert_fail@plt+0x15b88>
   28764:	mov	r2, #3
   28768:	bl	12b90 <strncmp@plt>
   2876c:	cmp	r0, #0
   28770:	bne	28784 <__assert_fail@plt+0x15b94>
   28774:	b	287a8 <__assert_fail@plt+0x15bb8>
   28778:	bl	124f4 <strcmp@plt>
   2877c:	cmp	r0, #0
   28780:	beq	287a8 <__assert_fail@plt+0x15bb8>
   28784:	ldr	r1, [r6, #12]!
   28788:	cmp	r1, #0
   2878c:	bne	28758 <__assert_fail@plt+0x15b68>
   28790:	mov	r0, r8
   28794:	mov	r1, r4
   28798:	bl	28930 <__assert_fail@plt+0x15d40>
   2879c:	mov	r6, r0
   287a0:	cmp	r0, #0
   287a4:	beq	287b0 <__assert_fail@plt+0x15bc0>
   287a8:	mov	r0, r6
   287ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   287b0:	movw	r1, #17147	; 0x42fb
   287b4:	movt	r1, #4
   287b8:	mov	r0, r4
   287bc:	bl	124f4 <strcmp@plt>
   287c0:	cmp	r0, #0
   287c4:	beq	28910 <__assert_fail@plt+0x15d20>
   287c8:	movw	r6, #15388	; 0x3c1c
   287cc:	movt	r6, #4
   287d0:	movw	r1, #17151	; 0x42ff
   287d4:	movt	r1, #4
   287d8:	mov	r0, r4
   287dc:	bl	124f4 <strcmp@plt>
   287e0:	cmp	r0, #0
   287e4:	beq	287a8 <__assert_fail@plt+0x15bb8>
   287e8:	ldr	r1, [r6, #12]!
   287ec:	cmp	r1, #0
   287f0:	bne	287d8 <__assert_fail@plt+0x15be8>
   287f4:	sub	r5, r7, #1
   287f8:	ldrb	r0, [r4, r5]
   287fc:	cmp	r0, #83	; 0x53
   28800:	bne	28840 <__assert_fail@plt+0x15c50>
   28804:	mov	r0, #0
   28808:	strb	r0, [r4, r5]
   2880c:	movw	r6, #15388	; 0x3c1c
   28810:	movt	r6, #4
   28814:	movw	r1, #17151	; 0x42ff
   28818:	movt	r1, #4
   2881c:	mov	r0, r4
   28820:	bl	124f4 <strcmp@plt>
   28824:	cmp	r0, #0
   28828:	beq	287a8 <__assert_fail@plt+0x15bb8>
   2882c:	ldr	r1, [r6, #12]!
   28830:	cmp	r1, #0
   28834:	bne	2881c <__assert_fail@plt+0x15c2c>
   28838:	mov	r0, #83	; 0x53
   2883c:	strb	r0, [r4, r5]
   28840:	movw	r6, #15520	; 0x3ca0
   28844:	movt	r6, #4
   28848:	movw	r1, #17204	; 0x4334
   2884c:	movt	r1, #4
   28850:	mov	r0, r4
   28854:	bl	124f4 <strcmp@plt>
   28858:	cmp	r0, #0
   2885c:	beq	287a8 <__assert_fail@plt+0x15bb8>
   28860:	ldr	r1, [r6, #12]!
   28864:	cmp	r1, #0
   28868:	bne	28850 <__assert_fail@plt+0x15c60>
   2886c:	cmp	r7, #1
   28870:	bne	288a0 <__assert_fail@plt+0x15cb0>
   28874:	ldrb	r0, [r4]
   28878:	movw	r6, #15772	; 0x3d9c
   2887c:	movt	r6, #4
   28880:	movw	r1, #17333	; 0x43b5
   28884:	movt	r1, #4
   28888:	ldrb	r1, [r1]
   2888c:	cmp	r0, r1
   28890:	beq	287a8 <__assert_fail@plt+0x15bb8>
   28894:	ldr	r1, [r6, #12]!
   28898:	cmp	r1, #0
   2889c:	bne	28888 <__assert_fail@plt+0x15c98>
   288a0:	ldrb	r0, [r4]
   288a4:	cmp	r0, #0
   288a8:	beq	28920 <__assert_fail@plt+0x15d30>
   288ac:	add	r1, r4, #1
   288b0:	mov	r0, #0
   288b4:	mov	r2, r4
   288b8:	ldrb	r3, [r1, #-1]
   288bc:	ldrb	r7, [r1]
   288c0:	cmp	r3, #46	; 0x2e
   288c4:	addne	r2, r2, #1
   288c8:	strb	r7, [r2]
   288cc:	sub	r3, r3, #46	; 0x2e
   288d0:	clz	r3, r3
   288d4:	lsr	r3, r3, #5
   288d8:	orr	r0, r0, r3
   288dc:	add	r1, r1, #1
   288e0:	cmp	r7, #0
   288e4:	bne	288b8 <__assert_fail@plt+0x15cc8>
   288e8:	tst	r0, #1
   288ec:	beq	28920 <__assert_fail@plt+0x15d30>
   288f0:	mov	r0, r8
   288f4:	mov	r1, r4
   288f8:	bl	28930 <__assert_fail@plt+0x15d40>
   288fc:	mov	r6, r0
   28900:	cmp	r0, #0
   28904:	moveq	r6, #0
   28908:	mov	r0, r6
   2890c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   28910:	movw	r6, #15376	; 0x3c10
   28914:	movt	r6, #4
   28918:	mov	r0, r6
   2891c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   28920:	mov	r6, #0
   28924:	mov	r0, r6
   28928:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2892c:	bx	lr
   28930:	push	{r4, r5, r6, sl, fp, lr}
   28934:	add	fp, sp, #16
   28938:	mov	r4, r1
   2893c:	mov	r6, r0
   28940:	movw	r5, #16084	; 0x3ed4
   28944:	movt	r5, #4
   28948:	movw	r1, #16950	; 0x4236
   2894c:	movt	r1, #4
   28950:	mov	r0, r4
   28954:	bl	124f4 <strcmp@plt>
   28958:	cmp	r0, #0
   2895c:	beq	289d4 <__assert_fail@plt+0x15de4>
   28960:	ldr	r1, [r5, #12]!
   28964:	cmp	r1, #0
   28968:	bne	28950 <__assert_fail@plt+0x15d60>
   2896c:	ldr	r1, [r6, #188]	; 0xbc
   28970:	cmp	r1, #0
   28974:	beq	28998 <__assert_fail@plt+0x15da8>
   28978:	add	r5, r6, #200	; 0xc8
   2897c:	mov	r0, r4
   28980:	bl	124f4 <strcmp@plt>
   28984:	cmp	r0, #0
   28988:	beq	289d0 <__assert_fail@plt+0x15de0>
   2898c:	ldr	r1, [r5], #12
   28990:	cmp	r1, #0
   28994:	bne	2897c <__assert_fail@plt+0x15d8c>
   28998:	movw	r5, #16132	; 0x3f04
   2899c:	movt	r5, #4
   289a0:	movw	r1, #16961	; 0x4241
   289a4:	movt	r1, #4
   289a8:	mov	r0, r4
   289ac:	bl	124f4 <strcmp@plt>
   289b0:	cmp	r0, #0
   289b4:	beq	289d4 <__assert_fail@plt+0x15de4>
   289b8:	ldr	r1, [r5, #12]!
   289bc:	cmp	r1, #0
   289c0:	bne	289a8 <__assert_fail@plt+0x15db8>
   289c4:	mov	r5, #0
   289c8:	mov	r0, r5
   289cc:	pop	{r4, r5, r6, sl, fp, pc}
   289d0:	sub	r5, r5, #12
   289d4:	mov	r0, r5
   289d8:	pop	{r4, r5, r6, sl, fp, pc}
   289dc:	ldr	ip, [sp, #8]
   289e0:	cmp	r3, #0
   289e4:	bmi	28a34 <__assert_fail@plt+0x15e44>
   289e8:	ldr	r1, [sp]
   289ec:	cmp	r1, #2
   289f0:	bne	28a20 <__assert_fail@plt+0x15e30>
   289f4:	mov	r1, #0
   289f8:	subs	r0, r2, #69	; 0x45
   289fc:	sbcs	r0, r3, #0
   28a00:	movwlt	r1, #1
   28a04:	movw	r0, #1900	; 0x76c
   28a08:	cmp	r1, #0
   28a0c:	movwne	r0, #2000	; 0x7d0
   28a10:	adds	r2, r0, r2
   28a14:	adc	r3, r3, #0
   28a18:	cmn	r3, #1
   28a1c:	ble	28a34 <__assert_fail@plt+0x15e44>
   28a20:	movw	r0, #1900	; 0x76c
   28a24:	subs	r1, r2, r0
   28a28:	str	r1, [ip]
   28a2c:	sbc	r2, r3, #0
   28a30:	b	28a4c <__assert_fail@plt+0x15e5c>
   28a34:	movw	r0, #63636	; 0xf894
   28a38:	movt	r0, #65535	; 0xffff
   28a3c:	subs	r1, r0, r2
   28a40:	str	r1, [ip]
   28a44:	mvn	r0, #0
   28a48:	sbc	r2, r0, r3
   28a4c:	mov	r0, #0
   28a50:	teq	r2, r1, asr #31
   28a54:	moveq	r0, #1
   28a58:	bx	lr
   28a5c:	cmp	r2, #0
   28a60:	beq	28a98 <__assert_fail@plt+0x15ea8>
   28a64:	cmp	r2, #1
   28a68:	bne	28abc <__assert_fail@plt+0x15ecc>
   28a6c:	eor	r2, r0, #12
   28a70:	orrs	r2, r2, r1
   28a74:	mvn	r2, #0
   28a78:	movweq	r2, #12
   28a7c:	subs	r3, r0, #1
   28a80:	sbc	r1, r1, #0
   28a84:	subs	r3, r3, #11
   28a88:	sbcs	r1, r1, #0
   28a8c:	addcc	r2, r0, #12
   28a90:	mov	r0, r2
   28a94:	bx	lr
   28a98:	eor	r2, r0, #12
   28a9c:	orrs	r2, r2, r1
   28aa0:	mvnne	r2, #0
   28aa4:	subs	r3, r0, #1
   28aa8:	sbc	r1, r1, #0
   28aac:	subs	r3, r3, #11
   28ab0:	sbcs	r1, r1, #0
   28ab4:	movcs	r0, r2
   28ab8:	bx	lr
   28abc:	subs	r2, r0, #24
   28ac0:	sbcs	r1, r1, #0
   28ac4:	mvncs	r0, #0
   28ac8:	bx	lr
   28acc:	push	{r4, r5, r6, r7, fp, lr}
   28ad0:	add	fp, sp, #16
   28ad4:	ldr	r2, [r1, #24]
   28ad8:	cmp	r2, #0
   28adc:	bmi	28b30 <__assert_fail@plt+0x15f40>
   28ae0:	ldm	r0, {r2, r3, ip, lr}
   28ae4:	ldm	r1, {r4, r5, r6, r7}
   28ae8:	eor	r2, r4, r2
   28aec:	eor	r3, r5, r3
   28af0:	orr	r2, r3, r2
   28af4:	eor	r3, r6, ip
   28af8:	orr	r2, r2, r3
   28afc:	eor	r3, r7, lr
   28b00:	orr	r2, r2, r3
   28b04:	ldr	r3, [r0, #16]
   28b08:	ldr	r7, [r1, #16]
   28b0c:	eor	r3, r7, r3
   28b10:	orr	r2, r2, r3
   28b14:	ldr	r0, [r0, #20]
   28b18:	ldr	r1, [r1, #20]
   28b1c:	eor	r0, r1, r0
   28b20:	orr	r0, r2, r0
   28b24:	clz	r0, r0
   28b28:	lsr	r0, r0, #5
   28b2c:	pop	{r4, r5, r6, r7, fp, pc}
   28b30:	mov	r0, #0
   28b34:	pop	{r4, r5, r6, r7, fp, pc}
   28b38:	push	{r4, r5, fp, lr}
   28b3c:	add	fp, sp, #8
   28b40:	cmp	r0, #0
   28b44:	beq	28bd8 <__assert_fail@plt+0x15fe8>
   28b48:	mov	r4, r0
   28b4c:	mov	r1, #47	; 0x2f
   28b50:	bl	12a4c <strrchr@plt>
   28b54:	cmp	r0, #0
   28b58:	mov	r5, r4
   28b5c:	addne	r5, r0, #1
   28b60:	sub	r0, r5, r4
   28b64:	cmp	r0, #7
   28b68:	blt	28bbc <__assert_fail@plt+0x15fcc>
   28b6c:	sub	r0, r5, #7
   28b70:	movw	r1, #17404	; 0x43fc
   28b74:	movt	r1, #4
   28b78:	mov	r2, #7
   28b7c:	bl	12b90 <strncmp@plt>
   28b80:	cmp	r0, #0
   28b84:	bne	28bbc <__assert_fail@plt+0x15fcc>
   28b88:	movw	r1, #17412	; 0x4404
   28b8c:	movt	r1, #4
   28b90:	mov	r0, r5
   28b94:	mov	r2, #3
   28b98:	bl	12b90 <strncmp@plt>
   28b9c:	cmp	r0, #0
   28ba0:	beq	28bac <__assert_fail@plt+0x15fbc>
   28ba4:	mov	r4, r5
   28ba8:	b	28bbc <__assert_fail@plt+0x15fcc>
   28bac:	add	r4, r5, #3
   28bb0:	movw	r0, #21848	; 0x5558
   28bb4:	movt	r0, #5
   28bb8:	str	r4, [r0]
   28bbc:	movw	r0, #21856	; 0x5560
   28bc0:	movt	r0, #5
   28bc4:	str	r4, [r0]
   28bc8:	movw	r0, #23844	; 0x5d24
   28bcc:	movt	r0, #5
   28bd0:	str	r4, [r0]
   28bd4:	pop	{r4, r5, fp, pc}
   28bd8:	movw	r0, #21864	; 0x5568
   28bdc:	movt	r0, #5
   28be0:	ldr	r3, [r0]
   28be4:	movw	r0, #17348	; 0x43c4
   28be8:	movt	r0, #4
   28bec:	mov	r1, #55	; 0x37
   28bf0:	mov	r2, #1
   28bf4:	bl	12728 <fwrite@plt>
   28bf8:	bl	12b9c <abort@plt>
   28bfc:	push	{r4, r5, r6, sl, fp, lr}
   28c00:	add	fp, sp, #16
   28c04:	mov	r4, r0
   28c08:	movw	r0, #23848	; 0x5d28
   28c0c:	movt	r0, #5
   28c10:	cmp	r4, #0
   28c14:	moveq	r4, r0
   28c18:	bl	12908 <__errno_location@plt>
   28c1c:	mov	r5, r0
   28c20:	ldr	r6, [r0]
   28c24:	mov	r0, r4
   28c28:	mov	r1, #48	; 0x30
   28c2c:	bl	2b924 <__assert_fail@plt+0x18d34>
   28c30:	str	r6, [r5]
   28c34:	pop	{r4, r5, r6, sl, fp, pc}
   28c38:	movw	r1, #23848	; 0x5d28
   28c3c:	movt	r1, #5
   28c40:	cmp	r0, #0
   28c44:	movne	r1, r0
   28c48:	ldr	r0, [r1]
   28c4c:	bx	lr
   28c50:	movw	r2, #23848	; 0x5d28
   28c54:	movt	r2, #5
   28c58:	cmp	r0, #0
   28c5c:	movne	r2, r0
   28c60:	str	r1, [r2]
   28c64:	bx	lr
   28c68:	movw	r3, #23848	; 0x5d28
   28c6c:	movt	r3, #5
   28c70:	cmp	r0, #0
   28c74:	movne	r3, r0
   28c78:	ubfx	r0, r1, #5, #3
   28c7c:	add	ip, r3, r0, lsl #2
   28c80:	ldr	r3, [ip, #8]
   28c84:	and	r1, r1, #31
   28c88:	mov	r0, #1
   28c8c:	and	r0, r0, r3, lsr r1
   28c90:	and	r2, r2, #1
   28c94:	eor	r2, r0, r2
   28c98:	eor	r1, r3, r2, lsl r1
   28c9c:	str	r1, [ip, #8]
   28ca0:	bx	lr
   28ca4:	movw	r2, #23848	; 0x5d28
   28ca8:	movt	r2, #5
   28cac:	cmp	r0, #0
   28cb0:	movne	r2, r0
   28cb4:	ldr	r0, [r2, #4]
   28cb8:	str	r1, [r2, #4]
   28cbc:	bx	lr
   28cc0:	push	{fp, lr}
   28cc4:	mov	fp, sp
   28cc8:	movw	r3, #23848	; 0x5d28
   28ccc:	movt	r3, #5
   28cd0:	cmp	r0, #0
   28cd4:	movne	r3, r0
   28cd8:	mov	r0, #10
   28cdc:	str	r0, [r3]
   28ce0:	cmp	r1, #0
   28ce4:	cmpne	r2, #0
   28ce8:	bne	28cf0 <__assert_fail@plt+0x16100>
   28cec:	bl	12b9c <abort@plt>
   28cf0:	str	r1, [r3, #40]	; 0x28
   28cf4:	str	r2, [r3, #44]	; 0x2c
   28cf8:	pop	{fp, pc}
   28cfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28d00:	add	fp, sp, #28
   28d04:	sub	sp, sp, #20
   28d08:	mov	r8, r3
   28d0c:	mov	r9, r2
   28d10:	mov	sl, r1
   28d14:	mov	r7, r0
   28d18:	ldr	r0, [fp, #8]
   28d1c:	movw	r5, #23848	; 0x5d28
   28d20:	movt	r5, #5
   28d24:	cmp	r0, #0
   28d28:	movne	r5, r0
   28d2c:	bl	12908 <__errno_location@plt>
   28d30:	mov	r4, r0
   28d34:	ldm	r5, {r0, r1}
   28d38:	ldr	r2, [r5, #40]	; 0x28
   28d3c:	ldr	r3, [r5, #44]	; 0x2c
   28d40:	ldr	r6, [r4]
   28d44:	add	r5, r5, #8
   28d48:	stm	sp, {r0, r1, r5}
   28d4c:	str	r2, [sp, #12]
   28d50:	str	r3, [sp, #16]
   28d54:	mov	r0, r7
   28d58:	mov	r1, sl
   28d5c:	mov	r2, r9
   28d60:	mov	r3, r8
   28d64:	bl	28d74 <__assert_fail@plt+0x16184>
   28d68:	str	r6, [r4]
   28d6c:	sub	sp, fp, #28
   28d70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28d74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28d78:	add	fp, sp, #28
   28d7c:	sub	sp, sp, #156	; 0x9c
   28d80:	mov	r9, r3
   28d84:	mov	r7, r1
   28d88:	mov	r6, r0
   28d8c:	str	r2, [fp, #-80]	; 0xffffffb0
   28d90:	add	r0, r2, #1
   28d94:	str	r0, [sp, #76]	; 0x4c
   28d98:	ldr	r0, [fp, #12]
   28d9c:	and	r1, r0, #1
   28da0:	str	r1, [sp, #40]	; 0x28
   28da4:	and	r1, r0, #4
   28da8:	str	r1, [sp, #36]	; 0x24
   28dac:	ubfx	r4, r0, #1, #1
   28db0:	bl	12758 <__ctype_get_mb_cur_max@plt>
   28db4:	str	r0, [sp, #44]	; 0x2c
   28db8:	ldr	r0, [fp, #24]
   28dbc:	str	r0, [sp, #88]	; 0x58
   28dc0:	ldr	r0, [fp, #20]
   28dc4:	str	r0, [sp, #80]	; 0x50
   28dc8:	ldr	r1, [fp, #8]
   28dcc:	mov	r0, #0
   28dd0:	str	r0, [sp, #84]	; 0x54
   28dd4:	mov	r0, #0
   28dd8:	str	r0, [fp, #-84]	; 0xffffffac
   28ddc:	mov	r0, #0
   28de0:	str	r0, [fp, #-72]	; 0xffffffb8
   28de4:	mov	r0, #0
   28de8:	mov	r2, #0
   28dec:	str	r2, [fp, #-56]	; 0xffffffc8
   28df0:	mov	r2, #0
   28df4:	str	r2, [sp, #64]	; 0x40
   28df8:	mov	r2, #1
   28dfc:	str	r2, [fp, #-48]	; 0xffffffd0
   28e00:	cmp	r1, #10
   28e04:	bhi	29d30 <__assert_fail@plt+0x17140>
   28e08:	mov	sl, r7
   28e0c:	mov	r7, r1
   28e10:	add	r1, pc, #24
   28e14:	mov	r8, #0
   28e18:	mov	r2, #1
   28e1c:	mov	r3, #0
   28e20:	ldr	ip, [fp, #-80]	; 0xffffffb0
   28e24:	mov	lr, r9
   28e28:	mov	r5, r6
   28e2c:	ldr	pc, [r1, r7, lsl #2]
   28e30:	andeq	r8, r2, r4, lsl #30
   28e34:	andeq	r8, r2, r4, asr #30
   28e38:	andeq	r8, r2, r4, lsl pc
   28e3c:	strdeq	r8, [r2], -ip
   28e40:	andeq	r8, r2, r8, lsr pc
   28e44:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   28e48:	andeq	r8, r2, r4, lsr #30
   28e4c:	strdeq	r8, [r2], -r4
   28e50:	andeq	r8, r2, ip, asr lr
   28e54:	andeq	r8, r2, ip, asr lr
   28e58:	andeq	r8, r2, r8, lsl #29
   28e5c:	movw	r0, #17492	; 0x4454
   28e60:	movt	r0, #4
   28e64:	mov	r1, r7
   28e68:	bl	2a338 <__assert_fail@plt+0x17748>
   28e6c:	str	r0, [sp, #80]	; 0x50
   28e70:	movw	r0, #4352	; 0x1100
   28e74:	movt	r0, #4
   28e78:	mov	r1, r7
   28e7c:	bl	2a338 <__assert_fail@plt+0x17748>
   28e80:	mov	r5, r6
   28e84:	str	r0, [sp, #88]	; 0x58
   28e88:	mov	r8, #0
   28e8c:	tst	r4, #1
   28e90:	str	r7, [fp, #-64]	; 0xffffffc0
   28e94:	bne	28ecc <__assert_fail@plt+0x162dc>
   28e98:	ldr	r0, [sp, #80]	; 0x50
   28e9c:	ldrb	r0, [r0]
   28ea0:	cmp	r0, #0
   28ea4:	beq	28ecc <__assert_fail@plt+0x162dc>
   28ea8:	ldr	r1, [sp, #80]	; 0x50
   28eac:	add	r1, r1, #1
   28eb0:	mov	r8, #0
   28eb4:	cmp	r8, sl
   28eb8:	strbcc	r0, [r5, r8]
   28ebc:	ldrb	r0, [r1, r8]
   28ec0:	add	r8, r8, #1
   28ec4:	cmp	r0, #0
   28ec8:	bne	28eb4 <__assert_fail@plt+0x162c4>
   28ecc:	ldr	r7, [sp, #88]	; 0x58
   28ed0:	mov	r0, r7
   28ed4:	bl	128c0 <strlen@plt>
   28ed8:	mov	r5, r6
   28edc:	str	r0, [fp, #-72]	; 0xffffffb8
   28ee0:	str	r7, [fp, #-84]	; 0xffffffac
   28ee4:	mov	r2, #1
   28ee8:	mov	r3, r4
   28eec:	ldr	ip, [fp, #-80]	; 0xffffffb0
   28ef0:	mov	lr, r9
   28ef4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   28ef8:	b	28ff4 <__assert_fail@plt+0x16404>
   28efc:	mov	r0, #1
   28f00:	b	28f44 <__assert_fail@plt+0x16354>
   28f04:	mov	r7, #0
   28f08:	mov	r8, #0
   28f0c:	mov	r2, r0
   28f10:	b	28ff0 <__assert_fail@plt+0x16400>
   28f14:	tst	r4, #1
   28f18:	bne	28f44 <__assert_fail@plt+0x16354>
   28f1c:	mov	r2, r0
   28f20:	b	28f6c <__assert_fail@plt+0x1637c>
   28f24:	mov	r0, #1
   28f28:	str	r0, [fp, #-72]	; 0xffffffb8
   28f2c:	mov	r8, #0
   28f30:	mov	r7, #5
   28f34:	b	28fb0 <__assert_fail@plt+0x163c0>
   28f38:	mov	r2, #1
   28f3c:	tst	r4, #1
   28f40:	beq	28f6c <__assert_fail@plt+0x1637c>
   28f44:	mov	r1, #1
   28f48:	str	r1, [fp, #-72]	; 0xffffffb8
   28f4c:	mov	r8, #0
   28f50:	mov	r7, #2
   28f54:	movw	r1, #4352	; 0x1100
   28f58:	movt	r1, #4
   28f5c:	str	r1, [fp, #-84]	; 0xffffffac
   28f60:	mov	r2, r0
   28f64:	mov	r3, #1
   28f68:	b	28ff4 <__assert_fail@plt+0x16404>
   28f6c:	mov	r8, #1
   28f70:	mov	r7, #2
   28f74:	cmp	sl, #0
   28f78:	movne	r0, #39	; 0x27
   28f7c:	strbne	r0, [r5]
   28f80:	movw	r0, #4352	; 0x1100
   28f84:	movt	r0, #4
   28f88:	str	r0, [fp, #-84]	; 0xffffffac
   28f8c:	mov	r0, #1
   28f90:	str	r0, [fp, #-72]	; 0xffffffb8
   28f94:	b	28ff0 <__assert_fail@plt+0x16400>
   28f98:	mov	r7, #5
   28f9c:	tst	r4, #1
   28fa0:	beq	28fc8 <__assert_fail@plt+0x163d8>
   28fa4:	mov	r0, #1
   28fa8:	str	r0, [fp, #-72]	; 0xffffffb8
   28fac:	mov	r8, #0
   28fb0:	movw	r0, #17346	; 0x43c2
   28fb4:	movt	r0, #4
   28fb8:	str	r0, [fp, #-84]	; 0xffffffac
   28fbc:	mov	r2, #1
   28fc0:	mov	r3, #1
   28fc4:	b	28ff4 <__assert_fail@plt+0x16404>
   28fc8:	cmp	sl, #0
   28fcc:	movne	r0, #34	; 0x22
   28fd0:	strbne	r0, [r5]
   28fd4:	mov	r8, #1
   28fd8:	movw	r0, #17346	; 0x43c2
   28fdc:	movt	r0, #4
   28fe0:	str	r0, [fp, #-84]	; 0xffffffac
   28fe4:	mov	r0, #1
   28fe8:	str	r0, [fp, #-72]	; 0xffffffb8
   28fec:	mov	r2, #1
   28ff0:	mov	r3, #0
   28ff4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   28ff8:	cmp	r0, #0
   28ffc:	movwne	r0, #1
   29000:	and	r1, r0, r3
   29004:	and	r1, r2, r1
   29008:	str	r1, [sp, #56]	; 0x38
   2900c:	sub	r1, r7, #2
   29010:	clz	r1, r1
   29014:	lsr	r1, r1, #5
   29018:	and	r1, r1, r3
   2901c:	str	r1, [sp, #68]	; 0x44
   29020:	str	r7, [fp, #-64]	; 0xffffffc0
   29024:	subs	r1, r7, #2
   29028:	movwne	r1, #1
   2902c:	eor	r4, r3, #1
   29030:	str	r4, [fp, #-88]	; 0xffffffa8
   29034:	orr	r4, r1, r4
   29038:	str	r4, [sp, #72]	; 0x48
   2903c:	and	r1, r1, r2
   29040:	and	r0, r0, r1
   29044:	str	r0, [fp, #-60]	; 0xffffffc4
   29048:	str	r3, [fp, #-76]	; 0xffffffb4
   2904c:	orr	r0, r1, r3
   29050:	eor	r0, r0, #1
   29054:	ldr	r1, [fp, #16]
   29058:	clz	r1, r1
   2905c:	lsr	r1, r1, #5
   29060:	orr	r0, r1, r0
   29064:	str	r0, [fp, #-68]	; 0xffffffbc
   29068:	str	r2, [sp, #92]	; 0x5c
   2906c:	eor	r0, r2, #1
   29070:	str	r0, [sp, #60]	; 0x3c
   29074:	mov	r7, #0
   29078:	cmn	lr, #1
   2907c:	beq	2908c <__assert_fail@plt+0x1649c>
   29080:	cmp	r7, lr
   29084:	bne	29098 <__assert_fail@plt+0x164a8>
   29088:	b	29ba4 <__assert_fail@plt+0x16fb4>
   2908c:	ldrb	r0, [ip, r7]
   29090:	cmp	r0, #0
   29094:	beq	29ba4 <__assert_fail@plt+0x16fb4>
   29098:	mov	r9, #0
   2909c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   290a0:	cmp	r0, #0
   290a4:	beq	290d8 <__assert_fail@plt+0x164e8>
   290a8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   290ac:	add	r4, r7, r0
   290b0:	cmp	r0, #2
   290b4:	bcc	290d0 <__assert_fail@plt+0x164e0>
   290b8:	cmn	lr, #1
   290bc:	bne	290d0 <__assert_fail@plt+0x164e0>
   290c0:	mov	r0, ip
   290c4:	bl	128c0 <strlen@plt>
   290c8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   290cc:	mov	lr, r0
   290d0:	cmp	r4, lr
   290d4:	bls	290e4 <__assert_fail@plt+0x164f4>
   290d8:	mov	r0, #0
   290dc:	str	r0, [fp, #-52]	; 0xffffffcc
   290e0:	b	29128 <__assert_fail@plt+0x16538>
   290e4:	mov	r4, lr
   290e8:	add	r0, ip, r7
   290ec:	ldr	r1, [fp, #-84]	; 0xffffffac
   290f0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   290f4:	bl	128a8 <bcmp@plt>
   290f8:	cmp	r0, #0
   290fc:	mov	r1, r0
   29100:	movwne	r1, #1
   29104:	ldr	r2, [fp, #-88]	; 0xffffffa8
   29108:	orr	r1, r1, r2
   2910c:	tst	r1, #1
   29110:	beq	29c78 <__assert_fail@plt+0x17088>
   29114:	clz	r0, r0
   29118:	lsr	r0, r0, #5
   2911c:	str	r0, [fp, #-52]	; 0xffffffcc
   29120:	ldr	ip, [fp, #-80]	; 0xffffffb0
   29124:	mov	lr, r4
   29128:	ldrb	r4, [ip, r7]
   2912c:	cmp	r4, #126	; 0x7e
   29130:	bhi	29660 <__assert_fail@plt+0x16a70>
   29134:	mov	r6, #1
   29138:	mov	r2, #110	; 0x6e
   2913c:	mov	r0, #97	; 0x61
   29140:	add	r3, pc, #4
   29144:	mov	r1, #0
   29148:	ldr	pc, [r3, r4, lsl #2]
   2914c:	andeq	r9, r2, r0, asr #9
   29150:	andeq	r9, r2, r0, ror #12
   29154:	andeq	r9, r2, r0, ror #12
   29158:	andeq	r9, r2, r0, ror #12
   2915c:	andeq	r9, r2, r0, ror #12
   29160:	andeq	r9, r2, r0, ror #12
   29164:	andeq	r9, r2, r0, ror #12
   29168:	andeq	r9, r2, r4, lsr r7
   2916c:	andeq	r9, r2, r0, lsr #9
   29170:	muleq	r2, r8, r4
   29174:	andeq	r9, r2, ip, lsr #9
   29178:	andeq	r9, r2, r8, asr #11
   2917c:	muleq	r2, r0, r4
   29180:	andeq	r9, r2, r8, lsr #9
   29184:	andeq	r9, r2, r0, ror #12
   29188:	andeq	r9, r2, r0, ror #12
   2918c:	andeq	r9, r2, r0, ror #12
   29190:	andeq	r9, r2, r0, ror #12
   29194:	andeq	r9, r2, r0, ror #12
   29198:	andeq	r9, r2, r0, ror #12
   2919c:	andeq	r9, r2, r0, ror #12
   291a0:	andeq	r9, r2, r0, ror #12
   291a4:	andeq	r9, r2, r0, ror #12
   291a8:	andeq	r9, r2, r0, ror #12
   291ac:	andeq	r9, r2, r0, ror #12
   291b0:	andeq	r9, r2, r0, ror #12
   291b4:	andeq	r9, r2, r0, ror #12
   291b8:	andeq	r9, r2, r0, ror #12
   291bc:	andeq	r9, r2, r0, ror #12
   291c0:	andeq	r9, r2, r0, ror #12
   291c4:	andeq	r9, r2, r0, ror #12
   291c8:	andeq	r9, r2, r0, ror #12
   291cc:	andeq	r9, r2, r4, asr #8
   291d0:	andeq	r9, r2, r8, asr #8
   291d4:	andeq	r9, r2, r8, asr #8
   291d8:	andeq	r9, r2, r0, lsr r4
   291dc:	andeq	r9, r2, r8, asr #8
   291e0:	andeq	r9, r2, r8, asr #6
   291e4:	andeq	r9, r2, r8, asr #8
   291e8:	ldrdeq	r9, [r2], -r0
   291ec:	andeq	r9, r2, r8, asr #8
   291f0:	andeq	r9, r2, r8, asr #8
   291f4:	andeq	r9, r2, r8, asr #8
   291f8:	andeq	r9, r2, r8, asr #6
   291fc:	andeq	r9, r2, r8, asr #6
   29200:	andeq	r9, r2, r8, asr #6
   29204:	andeq	r9, r2, r8, asr #6
   29208:	andeq	r9, r2, r8, asr #6
   2920c:	andeq	r9, r2, r8, asr #6
   29210:	andeq	r9, r2, r8, asr #6
   29214:	andeq	r9, r2, r8, asr #6
   29218:	andeq	r9, r2, r8, asr #6
   2921c:	andeq	r9, r2, r8, asr #6
   29220:	andeq	r9, r2, r8, asr #6
   29224:	andeq	r9, r2, r8, asr #6
   29228:	andeq	r9, r2, r8, asr #6
   2922c:	andeq	r9, r2, r8, asr #6
   29230:	andeq	r9, r2, r8, asr #6
   29234:	andeq	r9, r2, r8, asr #6
   29238:	andeq	r9, r2, r8, asr #8
   2923c:	andeq	r9, r2, r8, asr #8
   29240:	andeq	r9, r2, r8, asr #8
   29244:	andeq	r9, r2, r8, asr #8
   29248:	muleq	r2, r8, r5
   2924c:	andeq	r9, r2, r0, ror #12
   29250:	andeq	r9, r2, r8, asr #6
   29254:	andeq	r9, r2, r8, asr #6
   29258:	andeq	r9, r2, r8, asr #6
   2925c:	andeq	r9, r2, r8, asr #6
   29260:	andeq	r9, r2, r8, asr #6
   29264:	andeq	r9, r2, r8, asr #6
   29268:	andeq	r9, r2, r8, asr #6
   2926c:	andeq	r9, r2, r8, asr #6
   29270:	andeq	r9, r2, r8, asr #6
   29274:	andeq	r9, r2, r8, asr #6
   29278:	andeq	r9, r2, r8, asr #6
   2927c:	andeq	r9, r2, r8, asr #6
   29280:	andeq	r9, r2, r8, asr #6
   29284:	andeq	r9, r2, r8, asr #6
   29288:	andeq	r9, r2, r8, asr #6
   2928c:	andeq	r9, r2, r8, asr #6
   29290:	andeq	r9, r2, r8, asr #6
   29294:	andeq	r9, r2, r8, asr #6
   29298:	andeq	r9, r2, r8, asr #6
   2929c:	andeq	r9, r2, r8, asr #6
   292a0:	andeq	r9, r2, r8, asr #6
   292a4:	andeq	r9, r2, r8, asr #6
   292a8:	andeq	r9, r2, r8, asr #6
   292ac:	andeq	r9, r2, r8, asr #6
   292b0:	andeq	r9, r2, r8, asr #6
   292b4:	andeq	r9, r2, r8, asr #6
   292b8:	andeq	r9, r2, r8, asr #8
   292bc:	andeq	r9, r2, r0, ror r4
   292c0:	andeq	r9, r2, r8, asr #6
   292c4:	andeq	r9, r2, r8, asr #8
   292c8:	andeq	r9, r2, r8, asr #6
   292cc:	andeq	r9, r2, r8, asr #8
   292d0:	andeq	r9, r2, r8, asr #6
   292d4:	andeq	r9, r2, r8, asr #6
   292d8:	andeq	r9, r2, r8, asr #6
   292dc:	andeq	r9, r2, r8, asr #6
   292e0:	andeq	r9, r2, r8, asr #6
   292e4:	andeq	r9, r2, r8, asr #6
   292e8:	andeq	r9, r2, r8, asr #6
   292ec:	andeq	r9, r2, r8, asr #6
   292f0:	andeq	r9, r2, r8, asr #6
   292f4:	andeq	r9, r2, r8, asr #6
   292f8:	andeq	r9, r2, r8, asr #6
   292fc:	andeq	r9, r2, r8, asr #6
   29300:	andeq	r9, r2, r8, asr #6
   29304:	andeq	r9, r2, r8, asr #6
   29308:	andeq	r9, r2, r8, asr #6
   2930c:	andeq	r9, r2, r8, asr #6
   29310:	andeq	r9, r2, r8, asr #6
   29314:	andeq	r9, r2, r8, asr #6
   29318:	andeq	r9, r2, r8, asr #6
   2931c:	andeq	r9, r2, r8, asr #6
   29320:	andeq	r9, r2, r8, asr #6
   29324:	andeq	r9, r2, r8, asr #6
   29328:	andeq	r9, r2, r8, asr #6
   2932c:	andeq	r9, r2, r8, asr #6
   29330:	andeq	r9, r2, r8, asr #6
   29334:	andeq	r9, r2, r8, asr #6
   29338:	andeq	r9, r2, r4, lsl #8
   2933c:	andeq	r9, r2, r8, asr #8
   29340:	andeq	r9, r2, r4, lsl #8
   29344:	andeq	r9, r2, r0, lsr r4
   29348:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2934c:	tst	r0, #1
   29350:	bne	2937c <__assert_fail@plt+0x1678c>
   29354:	ubfx	r0, r4, #5, #3
   29358:	ldr	r1, [fp, #16]
   2935c:	ldr	r0, [r1, r0, lsl #2]
   29360:	and	r1, r4, #31
   29364:	mov	r2, #1
   29368:	tst	r0, r2, lsl r1
   2936c:	beq	2937c <__assert_fail@plt+0x1678c>
   29370:	mov	r0, r4
   29374:	mov	r1, r6
   29378:	b	29390 <__assert_fail@plt+0x167a0>
   2937c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   29380:	cmp	r0, #0
   29384:	mov	r0, r4
   29388:	mov	r1, r6
   2938c:	beq	296c8 <__assert_fail@plt+0x16ad8>
   29390:	ldr	r2, [fp, #-76]	; 0xffffffb4
   29394:	tst	r2, #1
   29398:	bne	29c8c <__assert_fail@plt+0x1709c>
   2939c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   293a0:	subs	r2, r2, #2
   293a4:	movwne	r2, #1
   293a8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   293ac:	orr	r2, r2, r3
   293b0:	tst	r2, #1
   293b4:	bne	293f0 <__assert_fail@plt+0x16800>
   293b8:	cmp	r8, sl
   293bc:	movcc	r2, #39	; 0x27
   293c0:	strbcc	r2, [r5, r8]
   293c4:	add	r2, r8, #1
   293c8:	cmp	r2, sl
   293cc:	movcc	r3, #36	; 0x24
   293d0:	strbcc	r3, [r5, r2]
   293d4:	add	r2, r8, #2
   293d8:	cmp	r2, sl
   293dc:	movcc	r3, #39	; 0x27
   293e0:	strbcc	r3, [r5, r2]
   293e4:	add	r8, r8, #3
   293e8:	mov	r2, #1
   293ec:	str	r2, [fp, #-56]	; 0xffffffc8
   293f0:	cmp	r8, sl
   293f4:	movcc	r2, #92	; 0x5c
   293f8:	strbcc	r2, [r5, r8]
   293fc:	add	r8, r8, #1
   29400:	b	2970c <__assert_fail@plt+0x16b1c>
   29404:	cmp	lr, #1
   29408:	beq	29430 <__assert_fail@plt+0x16840>
   2940c:	mov	r6, #0
   29410:	cmn	lr, #1
   29414:	bne	2943c <__assert_fail@plt+0x1684c>
   29418:	ldrb	r0, [ip, #1]
   2941c:	cmp	r0, #0
   29420:	beq	29430 <__assert_fail@plt+0x16840>
   29424:	mvn	lr, #0
   29428:	mov	r9, #0
   2942c:	b	29348 <__assert_fail@plt+0x16758>
   29430:	mov	r6, #0
   29434:	cmp	r7, #0
   29438:	beq	29444 <__assert_fail@plt+0x16854>
   2943c:	mov	r9, #0
   29440:	b	29348 <__assert_fail@plt+0x16758>
   29444:	mov	r1, #1
   29448:	ldr	r0, [fp, #-64]	; 0xffffffc0
   2944c:	cmp	r0, #2
   29450:	bne	29468 <__assert_fail@plt+0x16878>
   29454:	ldr	r0, [fp, #-76]	; 0xffffffb4
   29458:	tst	r0, #1
   2945c:	mov	r6, r1
   29460:	beq	29348 <__assert_fail@plt+0x16758>
   29464:	b	29c8c <__assert_fail@plt+0x1709c>
   29468:	mov	r6, r1
   2946c:	b	29348 <__assert_fail@plt+0x16758>
   29470:	ldr	r0, [fp, #-64]	; 0xffffffc0
   29474:	cmp	r0, #2
   29478:	bne	296ac <__assert_fail@plt+0x16abc>
   2947c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   29480:	tst	r0, #1
   29484:	bne	29c8c <__assert_fail@plt+0x1709c>
   29488:	mov	r9, #0
   2948c:	b	296c0 <__assert_fail@plt+0x16ad0>
   29490:	mov	r0, #102	; 0x66
   29494:	b	29734 <__assert_fail@plt+0x16b44>
   29498:	mov	r2, #116	; 0x74
   2949c:	b	294ac <__assert_fail@plt+0x168bc>
   294a0:	mov	r0, #98	; 0x62
   294a4:	b	29734 <__assert_fail@plt+0x16b44>
   294a8:	mov	r2, #114	; 0x72
   294ac:	ldr	r0, [sp, #72]	; 0x48
   294b0:	tst	r0, #1
   294b4:	mov	r0, r2
   294b8:	bne	29734 <__assert_fail@plt+0x16b44>
   294bc:	b	29c8c <__assert_fail@plt+0x1709c>
   294c0:	ldr	r0, [sp, #92]	; 0x5c
   294c4:	tst	r0, #1
   294c8:	beq	29750 <__assert_fail@plt+0x16b60>
   294cc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   294d0:	tst	r0, #1
   294d4:	bne	29c8c <__assert_fail@plt+0x1709c>
   294d8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   294dc:	subs	r0, r0, #2
   294e0:	movwne	r0, #1
   294e4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   294e8:	orr	r0, r0, r1
   294ec:	tst	r0, #1
   294f0:	bne	2952c <__assert_fail@plt+0x1693c>
   294f4:	cmp	r8, sl
   294f8:	movcc	r0, #39	; 0x27
   294fc:	strbcc	r0, [r5, r8]
   29500:	add	r0, r8, #1
   29504:	cmp	r0, sl
   29508:	movcc	r1, #36	; 0x24
   2950c:	strbcc	r1, [r5, r0]
   29510:	add	r0, r8, #2
   29514:	cmp	r0, sl
   29518:	movcc	r1, #39	; 0x27
   2951c:	strbcc	r1, [r5, r0]
   29520:	add	r8, r8, #3
   29524:	mov	r0, #1
   29528:	str	r0, [fp, #-56]	; 0xffffffc8
   2952c:	cmp	r8, sl
   29530:	movcc	r0, #92	; 0x5c
   29534:	strbcc	r0, [r5, r8]
   29538:	add	r0, r8, #1
   2953c:	mov	r6, #0
   29540:	mov	r9, #1
   29544:	mov	r4, #48	; 0x30
   29548:	ldr	r1, [fp, #-64]	; 0xffffffc0
   2954c:	cmp	r1, #2
   29550:	beq	29914 <__assert_fail@plt+0x16d24>
   29554:	add	r1, r7, #1
   29558:	cmp	r1, lr
   2955c:	bcs	29914 <__assert_fail@plt+0x16d24>
   29560:	ldrb	r1, [ip, r1]
   29564:	sub	r1, r1, #48	; 0x30
   29568:	uxtb	r1, r1
   2956c:	cmp	r1, #9
   29570:	bhi	29914 <__assert_fail@plt+0x16d24>
   29574:	cmp	r0, sl
   29578:	movcc	r1, #48	; 0x30
   2957c:	strbcc	r1, [r5, r0]
   29580:	add	r0, r8, #2
   29584:	cmp	r0, sl
   29588:	movcc	r1, #48	; 0x30
   2958c:	strbcc	r1, [r5, r0]
   29590:	add	r8, r8, #3
   29594:	b	29348 <__assert_fail@plt+0x16758>
   29598:	mov	r9, #0
   2959c:	mov	r4, #63	; 0x3f
   295a0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   295a4:	cmp	r0, #5
   295a8:	beq	2991c <__assert_fail@plt+0x16d2c>
   295ac:	cmp	r0, #2
   295b0:	bne	299c4 <__assert_fail@plt+0x16dd4>
   295b4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   295b8:	tst	r0, #1
   295bc:	mov	r6, #0
   295c0:	beq	29348 <__assert_fail@plt+0x16758>
   295c4:	b	29c8c <__assert_fail@plt+0x1709c>
   295c8:	mov	r0, #118	; 0x76
   295cc:	b	29734 <__assert_fail@plt+0x16b44>
   295d0:	mov	r4, #39	; 0x27
   295d4:	mov	r0, #1
   295d8:	str	r0, [sp, #64]	; 0x40
   295dc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   295e0:	cmp	r0, #2
   295e4:	bne	2976c <__assert_fail@plt+0x16b7c>
   295e8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   295ec:	tst	r0, #1
   295f0:	bne	29c8c <__assert_fail@plt+0x1709c>
   295f4:	ldr	r2, [sp, #84]	; 0x54
   295f8:	cmp	r2, #0
   295fc:	mov	r0, r2
   29600:	movwne	r0, #1
   29604:	clz	r1, sl
   29608:	lsr	r1, r1, #5
   2960c:	orrs	r0, r0, r1
   29610:	moveq	r2, sl
   29614:	str	r2, [sp, #84]	; 0x54
   29618:	moveq	sl, r0
   2961c:	cmp	r8, sl
   29620:	movcc	r0, #39	; 0x27
   29624:	strbcc	r0, [r5, r8]
   29628:	add	r0, r8, #1
   2962c:	cmp	r0, sl
   29630:	movcc	r1, #92	; 0x5c
   29634:	strbcc	r1, [r5, r0]
   29638:	add	r0, r8, #2
   2963c:	cmp	r0, sl
   29640:	movcc	r1, #39	; 0x27
   29644:	strbcc	r1, [r5, r0]
   29648:	add	r8, r8, #3
   2964c:	mov	r0, #0
   29650:	str	r0, [fp, #-56]	; 0xffffffc8
   29654:	mov	r9, #0
   29658:	mov	r6, #1
   2965c:	b	29348 <__assert_fail@plt+0x16758>
   29660:	ldr	r0, [sp, #44]	; 0x2c
   29664:	cmp	r0, #1
   29668:	bne	29774 <__assert_fail@plt+0x16b84>
   2966c:	str	lr, [sp, #32]
   29670:	bl	1286c <__ctype_b_loc@plt>
   29674:	ldr	ip, [fp, #-80]	; 0xffffffb0
   29678:	ldr	r0, [r0]
   2967c:	add	r0, r0, r4, lsl #1
   29680:	ldrb	r0, [r0, #1]
   29684:	ubfx	r6, r0, #6, #1
   29688:	mov	r2, #1
   2968c:	ldr	r0, [sp, #60]	; 0x3c
   29690:	orr	r1, r6, r0
   29694:	cmp	r2, #1
   29698:	bhi	299cc <__assert_fail@plt+0x16ddc>
   2969c:	tst	r1, #1
   296a0:	beq	299cc <__assert_fail@plt+0x16ddc>
   296a4:	ldr	lr, [sp, #32]
   296a8:	b	29348 <__assert_fail@plt+0x16758>
   296ac:	mov	r9, #0
   296b0:	mov	r0, #92	; 0x5c
   296b4:	ldr	r1, [sp, #56]	; 0x38
   296b8:	cmp	r1, #0
   296bc:	beq	29734 <__assert_fail@plt+0x16b44>
   296c0:	mov	r4, #92	; 0x5c
   296c4:	mov	r6, #0
   296c8:	cmp	r9, #0
   296cc:	bne	29704 <__assert_fail@plt+0x16b14>
   296d0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   296d4:	tst	r0, #1
   296d8:	beq	29704 <__assert_fail@plt+0x16b14>
   296dc:	cmp	r8, sl
   296e0:	movcc	r0, #39	; 0x27
   296e4:	strbcc	r0, [r5, r8]
   296e8:	add	r0, r8, #1
   296ec:	cmp	r0, sl
   296f0:	movcc	r1, #39	; 0x27
   296f4:	strbcc	r1, [r5, r0]
   296f8:	add	r8, r8, #2
   296fc:	mov	r0, #0
   29700:	str	r0, [fp, #-56]	; 0xffffffc8
   29704:	mov	r1, r6
   29708:	mov	r0, r4
   2970c:	cmp	r8, sl
   29710:	strbcc	r0, [r5, r8]
   29714:	ldr	r0, [fp, #-48]	; 0xffffffd0
   29718:	and	r0, r0, r1
   2971c:	str	r0, [fp, #-48]	; 0xffffffd0
   29720:	add	r8, r8, #1
   29724:	add	r7, r7, #1
   29728:	cmn	lr, #1
   2972c:	bne	29080 <__assert_fail@plt+0x16490>
   29730:	b	2908c <__assert_fail@plt+0x1649c>
   29734:	mov	r9, #0
   29738:	ldr	r1, [sp, #92]	; 0x5c
   2973c:	tst	r1, #1
   29740:	mov	r6, #0
   29744:	mov	r1, #0
   29748:	beq	29348 <__assert_fail@plt+0x16758>
   2974c:	b	29390 <__assert_fail@plt+0x167a0>
   29750:	mov	r4, #0
   29754:	ldr	r0, [sp, #40]	; 0x28
   29758:	cmp	r0, #0
   2975c:	mov	r9, #0
   29760:	mov	r6, #0
   29764:	beq	29348 <__assert_fail@plt+0x16758>
   29768:	b	29724 <__assert_fail@plt+0x16b34>
   2976c:	mov	r6, #1
   29770:	b	29348 <__assert_fail@plt+0x16758>
   29774:	mov	r0, #0
   29778:	str	r0, [fp, #-36]	; 0xffffffdc
   2977c:	str	r0, [fp, #-40]	; 0xffffffd8
   29780:	cmn	lr, #1
   29784:	bne	29798 <__assert_fail@plt+0x16ba8>
   29788:	mov	r0, ip
   2978c:	bl	128c0 <strlen@plt>
   29790:	ldr	ip, [fp, #-80]	; 0xffffffb0
   29794:	mov	lr, r0
   29798:	ldr	r0, [sp, #76]	; 0x4c
   2979c:	add	r0, r0, r7
   297a0:	str	r0, [sp, #24]
   297a4:	mov	r6, #1
   297a8:	mov	r2, #0
   297ac:	sub	r0, fp, #40	; 0x28
   297b0:	mov	r3, r0
   297b4:	str	r5, [sp, #28]
   297b8:	str	lr, [sp, #32]
   297bc:	b	29800 <__assert_fail@plt+0x16c10>
   297c0:	ldr	r5, [sp, #52]	; 0x34
   297c4:	add	r5, r0, r5
   297c8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   297cc:	bl	126f8 <iswprint@plt>
   297d0:	cmp	r0, #0
   297d4:	movwne	r0, #1
   297d8:	and	r6, r6, r0
   297dc:	sub	r0, fp, #40	; 0x28
   297e0:	bl	1262c <mbsinit@plt>
   297e4:	sub	r3, fp, #40	; 0x28
   297e8:	mov	r2, r5
   297ec:	ldr	lr, [sp, #32]
   297f0:	cmp	r0, #0
   297f4:	ldr	r5, [sp, #28]
   297f8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   297fc:	bne	2968c <__assert_fail@plt+0x16a9c>
   29800:	str	r2, [sp, #52]	; 0x34
   29804:	add	r0, r2, r7
   29808:	add	r1, ip, r0
   2980c:	str	r0, [sp, #48]	; 0x30
   29810:	sub	r2, lr, r0
   29814:	sub	r0, fp, #44	; 0x2c
   29818:	bl	2edb8 <__assert_fail@plt+0x1c1c8>
   2981c:	cmp	r0, #0
   29820:	beq	29b98 <__assert_fail@plt+0x16fa8>
   29824:	cmn	r0, #1
   29828:	beq	29b54 <__assert_fail@plt+0x16f64>
   2982c:	cmn	r0, #2
   29830:	ldr	lr, [sp, #32]
   29834:	beq	29b5c <__assert_fail@plt+0x16f6c>
   29838:	cmp	r0, #2
   2983c:	mov	r1, #0
   29840:	movwcc	r1, #1
   29844:	ldr	r2, [sp, #68]	; 0x44
   29848:	eor	r2, r2, #1
   2984c:	orrs	r1, r2, r1
   29850:	bne	297c0 <__assert_fail@plt+0x16bd0>
   29854:	ldr	r1, [sp, #52]	; 0x34
   29858:	ldr	r2, [sp, #24]
   2985c:	add	r1, r2, r1
   29860:	sub	r2, r0, #1
   29864:	b	29874 <__assert_fail@plt+0x16c84>
   29868:	add	r1, r1, #1
   2986c:	subs	r2, r2, #1
   29870:	beq	297c0 <__assert_fail@plt+0x16bd0>
   29874:	ldrb	r3, [r1]
   29878:	sub	r3, r3, #91	; 0x5b
   2987c:	cmp	r3, #33	; 0x21
   29880:	bhi	29868 <__assert_fail@plt+0x16c78>
   29884:	add	r5, pc, #0
   29888:	ldr	pc, [r5, r3, lsl #2]
   2988c:	andeq	r9, r2, r4, lsl #25
   29890:	andeq	r9, r2, r4, lsl #25
   29894:	andeq	r9, r2, r8, ror #16
   29898:	andeq	r9, r2, r4, lsl #25
   2989c:	andeq	r9, r2, r8, ror #16
   298a0:	andeq	r9, r2, r4, lsl #25
   298a4:	andeq	r9, r2, r8, ror #16
   298a8:	andeq	r9, r2, r8, ror #16
   298ac:	andeq	r9, r2, r8, ror #16
   298b0:	andeq	r9, r2, r8, ror #16
   298b4:	andeq	r9, r2, r8, ror #16
   298b8:	andeq	r9, r2, r8, ror #16
   298bc:	andeq	r9, r2, r8, ror #16
   298c0:	andeq	r9, r2, r8, ror #16
   298c4:	andeq	r9, r2, r8, ror #16
   298c8:	andeq	r9, r2, r8, ror #16
   298cc:	andeq	r9, r2, r8, ror #16
   298d0:	andeq	r9, r2, r8, ror #16
   298d4:	andeq	r9, r2, r8, ror #16
   298d8:	andeq	r9, r2, r8, ror #16
   298dc:	andeq	r9, r2, r8, ror #16
   298e0:	andeq	r9, r2, r8, ror #16
   298e4:	andeq	r9, r2, r8, ror #16
   298e8:	andeq	r9, r2, r8, ror #16
   298ec:	andeq	r9, r2, r8, ror #16
   298f0:	andeq	r9, r2, r8, ror #16
   298f4:	andeq	r9, r2, r8, ror #16
   298f8:	andeq	r9, r2, r8, ror #16
   298fc:	andeq	r9, r2, r8, ror #16
   29900:	andeq	r9, r2, r8, ror #16
   29904:	andeq	r9, r2, r8, ror #16
   29908:	andeq	r9, r2, r8, ror #16
   2990c:	andeq	r9, r2, r8, ror #16
   29910:	andeq	r9, r2, r4, lsl #25
   29914:	mov	r8, r0
   29918:	b	29348 <__assert_fail@plt+0x16758>
   2991c:	ldr	r0, [sp, #36]	; 0x24
   29920:	cmp	r0, #0
   29924:	beq	299c4 <__assert_fail@plt+0x16dd4>
   29928:	add	r0, r7, #2
   2992c:	cmp	r0, lr
   29930:	bcs	299c4 <__assert_fail@plt+0x16dd4>
   29934:	add	r1, r7, ip
   29938:	ldrb	r1, [r1, #1]
   2993c:	cmp	r1, #63	; 0x3f
   29940:	bne	299c4 <__assert_fail@plt+0x16dd4>
   29944:	ldrb	r1, [ip, r0]
   29948:	sub	r2, r1, #33	; 0x21
   2994c:	cmp	r2, #29
   29950:	bhi	299c4 <__assert_fail@plt+0x16dd4>
   29954:	mov	r3, #1
   29958:	movw	r6, #20929	; 0x51c1
   2995c:	movt	r6, #14336	; 0x3800
   29960:	tst	r6, r3, lsl r2
   29964:	beq	299c4 <__assert_fail@plt+0x16dd4>
   29968:	ldr	r2, [fp, #-76]	; 0xffffffb4
   2996c:	tst	r2, #1
   29970:	bne	29c8c <__assert_fail@plt+0x1709c>
   29974:	cmp	r8, sl
   29978:	movcc	r2, #63	; 0x3f
   2997c:	strbcc	r2, [r5, r8]
   29980:	add	r2, r8, #1
   29984:	cmp	r2, sl
   29988:	movcc	r3, #34	; 0x22
   2998c:	strbcc	r3, [r5, r2]
   29990:	add	r2, r8, #2
   29994:	cmp	r2, sl
   29998:	movcc	r3, #34	; 0x22
   2999c:	strbcc	r3, [r5, r2]
   299a0:	add	r2, r8, #3
   299a4:	cmp	r2, sl
   299a8:	movcc	r3, #63	; 0x3f
   299ac:	strbcc	r3, [r5, r2]
   299b0:	add	r8, r8, #4
   299b4:	mov	r7, r0
   299b8:	mov	r4, r1
   299bc:	mov	r6, #0
   299c0:	b	29348 <__assert_fail@plt+0x16758>
   299c4:	mov	r6, #0
   299c8:	b	29348 <__assert_fail@plt+0x16758>
   299cc:	add	r0, r2, r7
   299d0:	str	r0, [sp, #52]	; 0x34
   299d4:	mov	r2, #0
   299d8:	ldr	lr, [sp, #32]
   299dc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   299e0:	str	r1, [sp, #48]	; 0x30
   299e4:	tst	r1, #1
   299e8:	bne	29ac4 <__assert_fail@plt+0x16ed4>
   299ec:	ldr	r1, [fp, #-76]	; 0xffffffb4
   299f0:	tst	r1, #1
   299f4:	bne	29c8c <__assert_fail@plt+0x1709c>
   299f8:	mov	r3, r0
   299fc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   29a00:	subs	r1, r0, #2
   29a04:	movwne	r1, #1
   29a08:	orr	r1, r1, r3
   29a0c:	tst	r1, #1
   29a10:	bne	29a48 <__assert_fail@plt+0x16e58>
   29a14:	cmp	r8, sl
   29a18:	movcc	r0, #39	; 0x27
   29a1c:	strbcc	r0, [r5, r8]
   29a20:	add	r2, r8, #1
   29a24:	cmp	r2, sl
   29a28:	movcc	r0, #36	; 0x24
   29a2c:	strbcc	r0, [r5, r2]
   29a30:	add	r2, r8, #2
   29a34:	cmp	r2, sl
   29a38:	movcc	r0, #39	; 0x27
   29a3c:	strbcc	r0, [r5, r2]
   29a40:	add	r8, r8, #3
   29a44:	mov	r3, #1
   29a48:	cmp	r8, sl
   29a4c:	movcc	r1, #92	; 0x5c
   29a50:	strbcc	r1, [r5, r8]
   29a54:	add	r2, r8, #1
   29a58:	cmp	r2, sl
   29a5c:	bcs	29a70 <__assert_fail@plt+0x16e80>
   29a60:	uxtb	r1, r4
   29a64:	mov	r0, #48	; 0x30
   29a68:	orr	r1, r0, r1, lsr #6
   29a6c:	strb	r1, [r5, r2]
   29a70:	add	r2, r8, #2
   29a74:	cmp	r2, sl
   29a78:	lsrcc	r1, r4, #3
   29a7c:	movcc	r0, #6
   29a80:	bficc	r1, r0, #3, #29
   29a84:	strbcc	r1, [r5, r2]
   29a88:	mov	r0, #6
   29a8c:	bfi	r4, r0, #3, #29
   29a90:	add	r8, r8, #3
   29a94:	mov	r2, #1
   29a98:	mov	r0, r3
   29a9c:	b	29ae8 <__assert_fail@plt+0x16ef8>
   29aa0:	cmp	r8, sl
   29aa4:	strbcc	r4, [r5, r8]
   29aa8:	ldr	r1, [sp, #76]	; 0x4c
   29aac:	ldrb	r4, [r1, r7]
   29ab0:	add	r8, r8, #1
   29ab4:	mov	r7, r3
   29ab8:	ldr	r1, [sp, #48]	; 0x30
   29abc:	tst	r1, #1
   29ac0:	beq	299ec <__assert_fail@plt+0x16dfc>
   29ac4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   29ac8:	tst	r1, #1
   29acc:	beq	29ae0 <__assert_fail@plt+0x16ef0>
   29ad0:	cmp	r8, sl
   29ad4:	movcc	r1, #92	; 0x5c
   29ad8:	strbcc	r1, [r5, r8]
   29adc:	add	r8, r8, #1
   29ae0:	mov	r1, #0
   29ae4:	str	r1, [fp, #-52]	; 0xffffffcc
   29ae8:	and	r9, r2, #1
   29aec:	add	r3, r7, #1
   29af0:	ldr	r1, [sp, #52]	; 0x34
   29af4:	cmp	r1, r3
   29af8:	bls	29b3c <__assert_fail@plt+0x16f4c>
   29afc:	cmp	r9, #0
   29b00:	movwne	r9, #1
   29b04:	mvn	r1, r0
   29b08:	orr	r1, r1, r9
   29b0c:	tst	r1, #1
   29b10:	bne	29aa0 <__assert_fail@plt+0x16eb0>
   29b14:	cmp	r8, sl
   29b18:	movcc	r1, #39	; 0x27
   29b1c:	strbcc	r1, [r5, r8]
   29b20:	add	r1, r8, #1
   29b24:	cmp	r1, sl
   29b28:	movcc	r0, #39	; 0x27
   29b2c:	strbcc	r0, [r5, r1]
   29b30:	add	r8, r8, #2
   29b34:	mov	r0, #0
   29b38:	b	29aa0 <__assert_fail@plt+0x16eb0>
   29b3c:	str	r0, [fp, #-56]	; 0xffffffc8
   29b40:	cmp	r9, #0
   29b44:	movwne	r9, #1
   29b48:	cmp	r9, #0
   29b4c:	beq	296d0 <__assert_fail@plt+0x16ae0>
   29b50:	b	29704 <__assert_fail@plt+0x16b14>
   29b54:	mov	r6, #0
   29b58:	b	29b98 <__assert_fail@plt+0x16fa8>
   29b5c:	mov	r6, #0
   29b60:	ldr	r0, [sp, #48]	; 0x30
   29b64:	cmp	r0, lr
   29b68:	bcs	29b98 <__assert_fail@plt+0x16fa8>
   29b6c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   29b70:	add	r0, ip, r7
   29b74:	ldr	r2, [sp, #52]	; 0x34
   29b78:	ldrb	r1, [r0, r2]
   29b7c:	cmp	r1, #0
   29b80:	beq	2968c <__assert_fail@plt+0x16a9c>
   29b84:	add	r2, r2, #1
   29b88:	add	r1, r7, r2
   29b8c:	cmp	r1, lr
   29b90:	bcc	29b78 <__assert_fail@plt+0x16f88>
   29b94:	b	2968c <__assert_fail@plt+0x16a9c>
   29b98:	ldr	ip, [fp, #-80]	; 0xffffffb0
   29b9c:	ldr	r2, [sp, #52]	; 0x34
   29ba0:	b	2968c <__assert_fail@plt+0x16a9c>
   29ba4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   29ba8:	eor	r0, r1, #2
   29bac:	orr	r0, r0, r8
   29bb0:	clz	r0, r0
   29bb4:	lsr	r0, r0, #5
   29bb8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   29bbc:	tst	r3, r0
   29bc0:	bne	29c8c <__assert_fail@plt+0x1709c>
   29bc4:	mov	r6, r5
   29bc8:	subs	r0, r1, #2
   29bcc:	movwne	r0, #1
   29bd0:	orr	r0, r3, r0
   29bd4:	tst	r0, #1
   29bd8:	ldr	r2, [sp, #92]	; 0x5c
   29bdc:	ldreq	r0, [sp, #64]	; 0x40
   29be0:	eoreq	r0, r0, #1
   29be4:	tsteq	r0, #1
   29be8:	bne	29c28 <__assert_fail@plt+0x17038>
   29bec:	mov	r9, lr
   29bf0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   29bf4:	tst	r0, #1
   29bf8:	bne	29cf4 <__assert_fail@plt+0x17104>
   29bfc:	ldr	r0, [sp, #84]	; 0x54
   29c00:	cmp	r0, #0
   29c04:	beq	29c28 <__assert_fail@plt+0x17038>
   29c08:	mov	r0, #0
   29c0c:	str	r0, [fp, #-48]	; 0xffffffd0
   29c10:	mov	r1, #2
   29c14:	cmp	sl, #0
   29c18:	mov	r0, r2
   29c1c:	mov	r4, r3
   29c20:	ldr	r7, [sp, #84]	; 0x54
   29c24:	beq	28e00 <__assert_fail@plt+0x16210>
   29c28:	ldr	r1, [fp, #-84]	; 0xffffffac
   29c2c:	clz	r0, r1
   29c30:	lsr	r0, r0, #5
   29c34:	orr	r0, r0, r3
   29c38:	tst	r0, #1
   29c3c:	bne	29c68 <__assert_fail@plt+0x17078>
   29c40:	ldrb	r0, [r1]
   29c44:	cmp	r0, #0
   29c48:	beq	29c68 <__assert_fail@plt+0x17078>
   29c4c:	add	r1, r1, #1
   29c50:	cmp	r8, sl
   29c54:	strbcc	r0, [r6, r8]
   29c58:	add	r8, r8, #1
   29c5c:	ldrb	r0, [r1], #1
   29c60:	cmp	r0, #0
   29c64:	bne	29c50 <__assert_fail@plt+0x17060>
   29c68:	cmp	r8, sl
   29c6c:	movcc	r0, #0
   29c70:	strbcc	r0, [r6, r8]
   29c74:	b	29ce8 <__assert_fail@plt+0x170f8>
   29c78:	ldr	ip, [fp, #-80]	; 0xffffffb0
   29c7c:	mov	lr, r4
   29c80:	b	29c8c <__assert_fail@plt+0x1709c>
   29c84:	ldr	r5, [sp, #28]
   29c88:	ldr	ip, [fp, #-80]	; 0xffffffb0
   29c8c:	mov	r0, #0
   29c90:	ldr	r1, [fp, #12]
   29c94:	bic	r1, r1, #2
   29c98:	mov	r2, #2
   29c9c:	ldr	r3, [sp, #92]	; 0x5c
   29ca0:	tst	r3, #1
   29ca4:	movwne	r2, #4
   29ca8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   29cac:	cmp	r3, #2
   29cb0:	movne	r2, r3
   29cb4:	str	r2, [sp]
   29cb8:	str	r1, [sp, #4]
   29cbc:	str	r0, [sp, #8]
   29cc0:	ldr	r0, [sp, #80]	; 0x50
   29cc4:	str	r0, [sp, #12]
   29cc8:	ldr	r0, [sp, #88]	; 0x58
   29ccc:	str	r0, [sp, #16]
   29cd0:	mov	r0, r5
   29cd4:	mov	r1, sl
   29cd8:	mov	r2, ip
   29cdc:	mov	r3, lr
   29ce0:	bl	28d74 <__assert_fail@plt+0x16184>
   29ce4:	mov	r8, r0
   29ce8:	mov	r0, r8
   29cec:	sub	sp, fp, #28
   29cf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29cf4:	mov	r0, #5
   29cf8:	str	r0, [sp]
   29cfc:	ldr	r0, [fp, #12]
   29d00:	str	r0, [sp, #4]
   29d04:	ldr	r0, [fp, #16]
   29d08:	str	r0, [sp, #8]
   29d0c:	ldr	r0, [sp, #80]	; 0x50
   29d10:	str	r0, [sp, #12]
   29d14:	ldr	r0, [sp, #88]	; 0x58
   29d18:	str	r0, [sp, #16]
   29d1c:	mov	r0, r6
   29d20:	ldr	r1, [sp, #84]	; 0x54
   29d24:	ldr	r2, [fp, #-80]	; 0xffffffb0
   29d28:	mov	r3, r9
   29d2c:	b	29ce0 <__assert_fail@plt+0x170f0>
   29d30:	bl	12b9c <abort@plt>
   29d34:	mov	r3, r2
   29d38:	mov	r2, #0
   29d3c:	b	29d40 <__assert_fail@plt+0x17150>
   29d40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29d44:	add	fp, sp, #28
   29d48:	sub	sp, sp, #36	; 0x24
   29d4c:	mov	r4, r2
   29d50:	str	r2, [sp, #24]
   29d54:	mov	r5, r1
   29d58:	mov	r6, r0
   29d5c:	str	r0, [sp, #20]
   29d60:	movw	r8, #23848	; 0x5d28
   29d64:	movt	r8, #5
   29d68:	cmp	r3, #0
   29d6c:	movne	r8, r3
   29d70:	bl	12908 <__errno_location@plt>
   29d74:	str	r0, [sp, #28]
   29d78:	ldm	r8, {r3, r9}
   29d7c:	ldr	r1, [r8, #40]	; 0x28
   29d80:	ldr	r2, [r8, #44]	; 0x2c
   29d84:	ldr	r7, [r0]
   29d88:	str	r7, [sp, #32]
   29d8c:	add	sl, r8, #8
   29d90:	cmp	r4, #0
   29d94:	orreq	r9, r9, #1
   29d98:	stm	sp, {r3, r9, sl}
   29d9c:	str	r1, [sp, #12]
   29da0:	str	r2, [sp, #16]
   29da4:	mov	r0, #0
   29da8:	mov	r1, #0
   29dac:	mov	r2, r6
   29db0:	mov	r3, r5
   29db4:	mov	r7, r5
   29db8:	bl	28d74 <__assert_fail@plt+0x16184>
   29dbc:	mov	r5, r0
   29dc0:	add	r4, r0, #1
   29dc4:	mov	r0, r4
   29dc8:	bl	2b678 <__assert_fail@plt+0x18a88>
   29dcc:	mov	r6, r0
   29dd0:	ldr	r0, [r8]
   29dd4:	ldr	r1, [r8, #40]	; 0x28
   29dd8:	ldr	r2, [r8, #44]	; 0x2c
   29ddc:	stm	sp, {r0, r9, sl}
   29de0:	str	r1, [sp, #12]
   29de4:	str	r2, [sp, #16]
   29de8:	mov	r0, r6
   29dec:	mov	r1, r4
   29df0:	ldr	r2, [sp, #20]
   29df4:	mov	r3, r7
   29df8:	bl	28d74 <__assert_fail@plt+0x16184>
   29dfc:	ldr	r0, [sp, #24]
   29e00:	ldr	r1, [sp, #32]
   29e04:	ldr	r2, [sp, #28]
   29e08:	str	r1, [r2]
   29e0c:	cmp	r0, #0
   29e10:	strne	r5, [r0]
   29e14:	mov	r0, r6
   29e18:	sub	sp, fp, #28
   29e1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29e20:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   29e24:	add	fp, sp, #24
   29e28:	movw	r8, #21776	; 0x5510
   29e2c:	movt	r8, #5
   29e30:	ldr	r4, [r8]
   29e34:	movw	r5, #21780	; 0x5514
   29e38:	movt	r5, #5
   29e3c:	ldr	r0, [r5]
   29e40:	cmp	r0, #2
   29e44:	blt	29e70 <__assert_fail@plt+0x17280>
   29e48:	add	r7, r4, #12
   29e4c:	mov	r6, #0
   29e50:	ldr	r0, [r7, r6, lsl #3]
   29e54:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   29e58:	add	r0, r6, #1
   29e5c:	ldr	r1, [r5]
   29e60:	add	r2, r6, #2
   29e64:	cmp	r2, r1
   29e68:	mov	r6, r0
   29e6c:	blt	29e50 <__assert_fail@plt+0x17260>
   29e70:	ldr	r0, [r4, #4]
   29e74:	movw	r9, #23896	; 0x5d58
   29e78:	movt	r9, #5
   29e7c:	cmp	r0, r9
   29e80:	movw	r7, #21784	; 0x5518
   29e84:	movt	r7, #5
   29e88:	beq	29e98 <__assert_fail@plt+0x172a8>
   29e8c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   29e90:	mov	r0, #256	; 0x100
   29e94:	stm	r7, {r0, r9}
   29e98:	cmp	r4, r7
   29e9c:	beq	29eac <__assert_fail@plt+0x172bc>
   29ea0:	mov	r0, r4
   29ea4:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   29ea8:	str	r7, [r8]
   29eac:	mov	r0, #1
   29eb0:	str	r0, [r5]
   29eb4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29eb8:	movw	r3, #23848	; 0x5d28
   29ebc:	movt	r3, #5
   29ec0:	mvn	r2, #0
   29ec4:	b	29ec8 <__assert_fail@plt+0x172d8>
   29ec8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ecc:	add	fp, sp, #28
   29ed0:	sub	sp, sp, #44	; 0x2c
   29ed4:	mov	r7, r3
   29ed8:	str	r2, [sp, #36]	; 0x24
   29edc:	str	r1, [sp, #32]
   29ee0:	mov	r5, r0
   29ee4:	bl	12908 <__errno_location@plt>
   29ee8:	cmp	r5, #0
   29eec:	bmi	2a05c <__assert_fail@plt+0x1746c>
   29ef0:	cmn	r5, #-2147483647	; 0x80000001
   29ef4:	beq	2a05c <__assert_fail@plt+0x1746c>
   29ef8:	movw	r4, #21776	; 0x5510
   29efc:	movt	r4, #5
   29f00:	ldr	r6, [r4]
   29f04:	str	r0, [sp, #28]
   29f08:	ldr	r0, [r0]
   29f0c:	str	r0, [sp, #24]
   29f10:	movw	r8, #21780	; 0x5514
   29f14:	movt	r8, #5
   29f18:	ldr	r1, [r8]
   29f1c:	cmp	r1, r5
   29f20:	ble	29f2c <__assert_fail@plt+0x1733c>
   29f24:	mov	sl, r6
   29f28:	b	29f98 <__assert_fail@plt+0x173a8>
   29f2c:	str	r1, [fp, #-32]	; 0xffffffe0
   29f30:	mov	r0, #8
   29f34:	str	r0, [sp]
   29f38:	movw	r9, #21784	; 0x5518
   29f3c:	movt	r9, #5
   29f40:	subs	r0, r6, r9
   29f44:	movne	r0, r6
   29f48:	sub	r1, r5, r1
   29f4c:	add	r2, r1, #1
   29f50:	sub	r1, fp, #32
   29f54:	mvn	r3, #-2147483648	; 0x80000000
   29f58:	bl	2b754 <__assert_fail@plt+0x18b64>
   29f5c:	mov	sl, r0
   29f60:	str	r0, [r4]
   29f64:	cmp	r6, r9
   29f68:	bne	29f74 <__assert_fail@plt+0x17384>
   29f6c:	ldrd	r0, [r9]
   29f70:	stm	sl, {r0, r1}
   29f74:	ldr	r1, [r8]
   29f78:	add	r0, sl, r1, lsl #3
   29f7c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   29f80:	sub	r1, r2, r1
   29f84:	lsl	r2, r1, #3
   29f88:	mov	r1, #0
   29f8c:	bl	12938 <memset@plt>
   29f90:	ldr	r0, [fp, #-32]	; 0xffffffe0
   29f94:	str	r0, [r8]
   29f98:	mov	r9, sl
   29f9c:	ldr	r6, [r9, r5, lsl #3]!
   29fa0:	ldr	r4, [r9, #4]!
   29fa4:	ldm	r7, {r0, r1}
   29fa8:	ldr	r2, [r7, #40]	; 0x28
   29fac:	ldr	r3, [r7, #44]	; 0x2c
   29fb0:	orr	r8, r1, #1
   29fb4:	add	r1, r7, #8
   29fb8:	stm	sp, {r0, r8}
   29fbc:	str	r1, [sp, #20]
   29fc0:	add	r0, sp, #8
   29fc4:	stm	r0, {r1, r2, r3}
   29fc8:	mov	r0, r4
   29fcc:	mov	r1, r6
   29fd0:	ldr	r2, [sp, #32]
   29fd4:	ldr	r3, [sp, #36]	; 0x24
   29fd8:	bl	28d74 <__assert_fail@plt+0x16184>
   29fdc:	cmp	r6, r0
   29fe0:	bhi	2a044 <__assert_fail@plt+0x17454>
   29fe4:	add	r6, r0, #1
   29fe8:	str	r6, [sl, r5, lsl #3]
   29fec:	movw	r0, #23896	; 0x5d58
   29ff0:	movt	r0, #5
   29ff4:	cmp	r4, r0
   29ff8:	beq	2a004 <__assert_fail@plt+0x17414>
   29ffc:	mov	r0, r4
   2a000:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2a004:	mov	r0, r6
   2a008:	bl	2b678 <__assert_fail@plt+0x18a88>
   2a00c:	mov	r4, r0
   2a010:	str	r0, [r9]
   2a014:	ldr	r0, [r7]
   2a018:	ldr	r1, [r7, #40]	; 0x28
   2a01c:	ldr	r2, [r7, #44]	; 0x2c
   2a020:	stm	sp, {r0, r8}
   2a024:	ldr	r0, [sp, #20]
   2a028:	add	r3, sp, #8
   2a02c:	stm	r3, {r0, r1, r2}
   2a030:	mov	r0, r4
   2a034:	mov	r1, r6
   2a038:	ldr	r2, [sp, #32]
   2a03c:	ldr	r3, [sp, #36]	; 0x24
   2a040:	bl	28d74 <__assert_fail@plt+0x16184>
   2a044:	ldr	r0, [sp, #28]
   2a048:	ldr	r1, [sp, #24]
   2a04c:	str	r1, [r0]
   2a050:	mov	r0, r4
   2a054:	sub	sp, fp, #28
   2a058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a05c:	bl	12b9c <abort@plt>
   2a060:	movw	r3, #23848	; 0x5d28
   2a064:	movt	r3, #5
   2a068:	b	29ec8 <__assert_fail@plt+0x172d8>
   2a06c:	mov	r1, r0
   2a070:	mov	r0, #0
   2a074:	b	29eb8 <__assert_fail@plt+0x172c8>
   2a078:	mov	r2, r1
   2a07c:	mov	r1, r0
   2a080:	mov	r0, #0
   2a084:	b	2a060 <__assert_fail@plt+0x17470>
   2a088:	push	{r4, r5, r6, sl, fp, lr}
   2a08c:	add	fp, sp, #16
   2a090:	sub	sp, sp, #48	; 0x30
   2a094:	mov	r4, r2
   2a098:	mov	r5, r0
   2a09c:	mov	r6, sp
   2a0a0:	mov	r0, r6
   2a0a4:	bl	2a0c4 <__assert_fail@plt+0x174d4>
   2a0a8:	mov	r0, r5
   2a0ac:	mov	r1, r4
   2a0b0:	mvn	r2, #0
   2a0b4:	mov	r3, r6
   2a0b8:	bl	29ec8 <__assert_fail@plt+0x172d8>
   2a0bc:	sub	sp, fp, #16
   2a0c0:	pop	{r4, r5, r6, sl, fp, pc}
   2a0c4:	push	{fp, lr}
   2a0c8:	mov	fp, sp
   2a0cc:	vmov.i32	q8, #0	; 0x00000000
   2a0d0:	mov	r2, #32
   2a0d4:	mov	r3, r0
   2a0d8:	vst1.32	{d16-d17}, [r3], r2
   2a0dc:	vst1.32	{d16-d17}, [r3]
   2a0e0:	add	r2, r0, #16
   2a0e4:	vst1.32	{d16-d17}, [r2]
   2a0e8:	cmp	r1, #10
   2a0ec:	strne	r1, [r0]
   2a0f0:	popne	{fp, pc}
   2a0f4:	bl	12b9c <abort@plt>
   2a0f8:	push	{r4, r5, r6, r7, fp, lr}
   2a0fc:	add	fp, sp, #16
   2a100:	sub	sp, sp, #48	; 0x30
   2a104:	mov	r4, r3
   2a108:	mov	r5, r2
   2a10c:	mov	r6, r0
   2a110:	mov	r7, sp
   2a114:	mov	r0, r7
   2a118:	bl	2a0c4 <__assert_fail@plt+0x174d4>
   2a11c:	mov	r0, r6
   2a120:	mov	r1, r5
   2a124:	mov	r2, r4
   2a128:	mov	r3, r7
   2a12c:	bl	29ec8 <__assert_fail@plt+0x172d8>
   2a130:	sub	sp, fp, #16
   2a134:	pop	{r4, r5, r6, r7, fp, pc}
   2a138:	mov	r2, r1
   2a13c:	mov	r1, r0
   2a140:	mov	r0, #0
   2a144:	b	2a088 <__assert_fail@plt+0x17498>
   2a148:	mov	r3, r2
   2a14c:	mov	r2, r1
   2a150:	mov	r1, r0
   2a154:	mov	r0, #0
   2a158:	b	2a0f8 <__assert_fail@plt+0x17508>
   2a15c:	push	{r4, r5, r6, sl, fp, lr}
   2a160:	add	fp, sp, #16
   2a164:	sub	sp, sp, #48	; 0x30
   2a168:	mov	r4, r1
   2a16c:	mov	r5, r0
   2a170:	movw	r0, #23848	; 0x5d28
   2a174:	movt	r0, #5
   2a178:	add	r1, r0, #16
   2a17c:	mov	r3, #32
   2a180:	vld1.64	{d16-d17}, [r0], r3
   2a184:	vld1.64	{d18-d19}, [r1]
   2a188:	mov	r6, sp
   2a18c:	add	r1, r6, #16
   2a190:	vld1.64	{d20-d21}, [r0]
   2a194:	vst1.64	{d18-d19}, [r1]
   2a198:	mov	r0, r6
   2a19c:	vst1.64	{d16-d17}, [r0], r3
   2a1a0:	vst1.64	{d20-d21}, [r0]
   2a1a4:	mov	r0, r6
   2a1a8:	mov	r1, r2
   2a1ac:	mov	r2, #1
   2a1b0:	bl	28c68 <__assert_fail@plt+0x16078>
   2a1b4:	mov	r0, #0
   2a1b8:	mov	r1, r5
   2a1bc:	mov	r2, r4
   2a1c0:	mov	r3, r6
   2a1c4:	bl	29ec8 <__assert_fail@plt+0x172d8>
   2a1c8:	sub	sp, fp, #16
   2a1cc:	pop	{r4, r5, r6, sl, fp, pc}
   2a1d0:	mov	r2, r1
   2a1d4:	mvn	r1, #0
   2a1d8:	b	2a15c <__assert_fail@plt+0x1756c>
   2a1dc:	mov	r1, #58	; 0x3a
   2a1e0:	b	2a1d0 <__assert_fail@plt+0x175e0>
   2a1e4:	mov	r2, #58	; 0x3a
   2a1e8:	b	2a15c <__assert_fail@plt+0x1756c>
   2a1ec:	push	{r4, r5, r6, sl, fp, lr}
   2a1f0:	add	fp, sp, #16
   2a1f4:	sub	sp, sp, #48	; 0x30
   2a1f8:	mov	r4, r2
   2a1fc:	mov	r5, r0
   2a200:	mov	r6, sp
   2a204:	mov	r0, r6
   2a208:	bl	2a0c4 <__assert_fail@plt+0x174d4>
   2a20c:	mov	r0, r6
   2a210:	mov	r1, #58	; 0x3a
   2a214:	mov	r2, #1
   2a218:	bl	28c68 <__assert_fail@plt+0x16078>
   2a21c:	mov	r0, r5
   2a220:	mov	r1, r4
   2a224:	mvn	r2, #0
   2a228:	mov	r3, r6
   2a22c:	bl	29ec8 <__assert_fail@plt+0x172d8>
   2a230:	sub	sp, fp, #16
   2a234:	pop	{r4, r5, r6, sl, fp, pc}
   2a238:	push	{fp, lr}
   2a23c:	mov	fp, sp
   2a240:	sub	sp, sp, #8
   2a244:	mvn	ip, #0
   2a248:	str	ip, [sp]
   2a24c:	bl	2a258 <__assert_fail@plt+0x17668>
   2a250:	mov	sp, fp
   2a254:	pop	{fp, pc}
   2a258:	push	{r4, r5, r6, r7, fp, lr}
   2a25c:	add	fp, sp, #16
   2a260:	sub	sp, sp, #48	; 0x30
   2a264:	mov	r7, r3
   2a268:	mov	r5, r0
   2a26c:	movw	r0, #23848	; 0x5d28
   2a270:	movt	r0, #5
   2a274:	add	r3, r0, #16
   2a278:	mov	r4, #32
   2a27c:	vld1.64	{d16-d17}, [r0], r4
   2a280:	vld1.64	{d18-d19}, [r3]
   2a284:	mov	r6, sp
   2a288:	add	r3, r6, #16
   2a28c:	vld1.64	{d20-d21}, [r0]
   2a290:	vst1.64	{d18-d19}, [r3]
   2a294:	mov	r0, r6
   2a298:	vst1.64	{d16-d17}, [r0], r4
   2a29c:	vst1.64	{d20-d21}, [r0]
   2a2a0:	mov	r0, r6
   2a2a4:	bl	28cc0 <__assert_fail@plt+0x160d0>
   2a2a8:	ldr	r2, [fp, #8]
   2a2ac:	mov	r0, r5
   2a2b0:	mov	r1, r7
   2a2b4:	mov	r3, r6
   2a2b8:	bl	29ec8 <__assert_fail@plt+0x172d8>
   2a2bc:	sub	sp, fp, #16
   2a2c0:	pop	{r4, r5, r6, r7, fp, pc}
   2a2c4:	mov	r3, r2
   2a2c8:	mov	r2, r1
   2a2cc:	mov	r1, r0
   2a2d0:	mov	r0, #0
   2a2d4:	b	2a238 <__assert_fail@plt+0x17648>
   2a2d8:	push	{fp, lr}
   2a2dc:	mov	fp, sp
   2a2e0:	sub	sp, sp, #8
   2a2e4:	mov	ip, r2
   2a2e8:	mov	r2, r1
   2a2ec:	mov	r1, r0
   2a2f0:	str	r3, [sp]
   2a2f4:	mov	r0, #0
   2a2f8:	mov	r3, ip
   2a2fc:	bl	2a258 <__assert_fail@plt+0x17668>
   2a300:	mov	sp, fp
   2a304:	pop	{fp, pc}
   2a308:	movw	r3, #21792	; 0x5520
   2a30c:	movt	r3, #5
   2a310:	b	29ec8 <__assert_fail@plt+0x172d8>
   2a314:	mov	r2, r1
   2a318:	mov	r1, r0
   2a31c:	mov	r0, #0
   2a320:	b	2a308 <__assert_fail@plt+0x17718>
   2a324:	mvn	r2, #0
   2a328:	b	2a308 <__assert_fail@plt+0x17718>
   2a32c:	mov	r1, r0
   2a330:	mov	r0, #0
   2a334:	b	2a324 <__assert_fail@plt+0x17734>
   2a338:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2a33c:	add	fp, sp, #24
   2a340:	sub	sp, sp, #16
   2a344:	mov	r4, r1
   2a348:	mov	r5, r0
   2a34c:	mov	r7, #0
   2a350:	mov	r0, #0
   2a354:	mov	r1, r5
   2a358:	mov	r2, #5
   2a35c:	bl	12674 <dcgettext@plt>
   2a360:	cmp	r0, r5
   2a364:	beq	2a370 <__assert_fail@plt+0x17780>
   2a368:	sub	sp, fp, #24
   2a36c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a370:	bl	3e010 <__assert_fail@plt+0x2b420>
   2a374:	mov	r6, r0
   2a378:	mov	r8, #56	; 0x38
   2a37c:	mov	r0, #45	; 0x2d
   2a380:	stm	sp, {r0, r8}
   2a384:	str	r7, [sp, #8]
   2a388:	str	r7, [sp, #12]
   2a38c:	mov	r0, r6
   2a390:	mov	r1, #85	; 0x55
   2a394:	mov	r2, #84	; 0x54
   2a398:	mov	r3, #70	; 0x46
   2a39c:	bl	2a434 <__assert_fail@plt+0x17844>
   2a3a0:	cmp	r0, #0
   2a3a4:	beq	2a3c0 <__assert_fail@plt+0x177d0>
   2a3a8:	ldrb	r1, [r5]
   2a3ac:	movw	r2, #17494	; 0x4456
   2a3b0:	movt	r2, #4
   2a3b4:	movw	r0, #17498	; 0x445a
   2a3b8:	movt	r0, #4
   2a3bc:	b	2a404 <__assert_fail@plt+0x17814>
   2a3c0:	mov	r0, #48	; 0x30
   2a3c4:	mov	r1, #51	; 0x33
   2a3c8:	str	r8, [sp]
   2a3cc:	stmib	sp, {r0, r1}
   2a3d0:	str	r0, [sp, #12]
   2a3d4:	mov	r0, r6
   2a3d8:	mov	r1, #71	; 0x47
   2a3dc:	mov	r2, #66	; 0x42
   2a3e0:	mov	r3, #49	; 0x31
   2a3e4:	bl	2a434 <__assert_fail@plt+0x17844>
   2a3e8:	cmp	r0, #0
   2a3ec:	beq	2a414 <__assert_fail@plt+0x17824>
   2a3f0:	ldrb	r1, [r5]
   2a3f4:	movw	r2, #17502	; 0x445e
   2a3f8:	movt	r2, #4
   2a3fc:	movw	r0, #17506	; 0x4462
   2a400:	movt	r0, #4
   2a404:	cmp	r1, #96	; 0x60
   2a408:	moveq	r0, r2
   2a40c:	sub	sp, fp, #24
   2a410:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a414:	movw	r1, #17346	; 0x43c2
   2a418:	movt	r1, #4
   2a41c:	movw	r0, #4352	; 0x1100
   2a420:	movt	r0, #4
   2a424:	cmp	r4, #9
   2a428:	moveq	r0, r1
   2a42c:	sub	sp, fp, #24
   2a430:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2a434:	push	{r4, r5, r6, r7, fp, lr}
   2a438:	add	fp, sp, #16
   2a43c:	sub	sp, sp, #16
   2a440:	mov	r4, r3
   2a444:	mov	r5, r2
   2a448:	mov	r7, r1
   2a44c:	mov	r6, r0
   2a450:	mov	r0, r1
   2a454:	bl	3dba4 <__assert_fail@plt+0x2afb4>
   2a458:	ldrb	r1, [r6]
   2a45c:	cmp	r0, #0
   2a460:	andne	r1, r1, #223	; 0xdf
   2a464:	mov	r0, #0
   2a468:	cmp	r1, r7
   2a46c:	bne	2a4a4 <__assert_fail@plt+0x178b4>
   2a470:	cmp	r7, #0
   2a474:	beq	2a4ac <__assert_fail@plt+0x178bc>
   2a478:	ldr	r0, [fp, #20]
   2a47c:	ldr	r1, [fp, #16]
   2a480:	ldr	r2, [fp, #12]
   2a484:	ldr	r3, [fp, #8]
   2a488:	str	r2, [sp]
   2a48c:	str	r1, [sp, #4]
   2a490:	str	r0, [sp, #8]
   2a494:	mov	r0, r6
   2a498:	mov	r1, r5
   2a49c:	mov	r2, r4
   2a4a0:	bl	2a4b8 <__assert_fail@plt+0x178c8>
   2a4a4:	sub	sp, fp, #16
   2a4a8:	pop	{r4, r5, r6, r7, fp, pc}
   2a4ac:	mov	r0, #1
   2a4b0:	sub	sp, fp, #16
   2a4b4:	pop	{r4, r5, r6, r7, fp, pc}
   2a4b8:	push	{r4, r5, r6, r7, fp, lr}
   2a4bc:	add	fp, sp, #16
   2a4c0:	sub	sp, sp, #8
   2a4c4:	mov	r4, r3
   2a4c8:	mov	r5, r2
   2a4cc:	mov	r7, r1
   2a4d0:	mov	r6, r0
   2a4d4:	mov	r0, r1
   2a4d8:	bl	3dba4 <__assert_fail@plt+0x2afb4>
   2a4dc:	ldrb	r1, [r6, #1]
   2a4e0:	cmp	r0, #0
   2a4e4:	andne	r1, r1, #223	; 0xdf
   2a4e8:	mov	r0, #0
   2a4ec:	cmp	r1, r7
   2a4f0:	bne	2a520 <__assert_fail@plt+0x17930>
   2a4f4:	cmp	r7, #0
   2a4f8:	beq	2a528 <__assert_fail@plt+0x17938>
   2a4fc:	ldr	r0, [fp, #16]
   2a500:	ldr	r1, [fp, #12]
   2a504:	ldr	r3, [fp, #8]
   2a508:	str	r1, [sp]
   2a50c:	str	r0, [sp, #4]
   2a510:	mov	r0, r6
   2a514:	mov	r1, r5
   2a518:	mov	r2, r4
   2a51c:	bl	2a534 <__assert_fail@plt+0x17944>
   2a520:	sub	sp, fp, #16
   2a524:	pop	{r4, r5, r6, r7, fp, pc}
   2a528:	mov	r0, #1
   2a52c:	sub	sp, fp, #16
   2a530:	pop	{r4, r5, r6, r7, fp, pc}
   2a534:	push	{r4, r5, r6, r7, fp, lr}
   2a538:	add	fp, sp, #16
   2a53c:	sub	sp, sp, #8
   2a540:	mov	r4, r3
   2a544:	mov	r5, r2
   2a548:	mov	r7, r1
   2a54c:	mov	r6, r0
   2a550:	mov	r0, r1
   2a554:	bl	3dba4 <__assert_fail@plt+0x2afb4>
   2a558:	ldrb	r1, [r6, #2]
   2a55c:	cmp	r0, #0
   2a560:	andne	r1, r1, #223	; 0xdf
   2a564:	mov	r0, #0
   2a568:	cmp	r1, r7
   2a56c:	bne	2a594 <__assert_fail@plt+0x179a4>
   2a570:	cmp	r7, #0
   2a574:	beq	2a59c <__assert_fail@plt+0x179ac>
   2a578:	ldr	r0, [fp, #12]
   2a57c:	ldr	r3, [fp, #8]
   2a580:	str	r0, [sp]
   2a584:	mov	r0, r6
   2a588:	mov	r1, r5
   2a58c:	mov	r2, r4
   2a590:	bl	2a5a8 <__assert_fail@plt+0x179b8>
   2a594:	sub	sp, fp, #16
   2a598:	pop	{r4, r5, r6, r7, fp, pc}
   2a59c:	mov	r0, #1
   2a5a0:	sub	sp, fp, #16
   2a5a4:	pop	{r4, r5, r6, r7, fp, pc}
   2a5a8:	push	{r4, r5, r6, r7, fp, lr}
   2a5ac:	add	fp, sp, #16
   2a5b0:	mov	r4, r3
   2a5b4:	mov	r5, r2
   2a5b8:	mov	r7, r1
   2a5bc:	mov	r6, r0
   2a5c0:	mov	r0, r1
   2a5c4:	bl	3dba4 <__assert_fail@plt+0x2afb4>
   2a5c8:	ldrb	r1, [r6, #3]
   2a5cc:	ldr	r3, [fp, #8]
   2a5d0:	cmp	r0, #0
   2a5d4:	andne	r1, r1, #223	; 0xdf
   2a5d8:	mov	r0, #0
   2a5dc:	cmp	r1, r7
   2a5e0:	bne	2a604 <__assert_fail@plt+0x17a14>
   2a5e4:	cmp	r7, #0
   2a5e8:	beq	2a600 <__assert_fail@plt+0x17a10>
   2a5ec:	mov	r0, r6
   2a5f0:	mov	r1, r5
   2a5f4:	mov	r2, r4
   2a5f8:	pop	{r4, r5, r6, r7, fp, lr}
   2a5fc:	b	2a608 <__assert_fail@plt+0x17a18>
   2a600:	mov	r0, #1
   2a604:	pop	{r4, r5, r6, r7, fp, pc}
   2a608:	push	{r4, r5, r6, r7, fp, lr}
   2a60c:	add	fp, sp, #16
   2a610:	mov	r4, r3
   2a614:	mov	r5, r2
   2a618:	mov	r7, r1
   2a61c:	mov	r6, r0
   2a620:	mov	r0, r1
   2a624:	bl	3dba4 <__assert_fail@plt+0x2afb4>
   2a628:	ldrb	r1, [r6, #4]
   2a62c:	cmp	r0, #0
   2a630:	andne	r1, r1, #223	; 0xdf
   2a634:	mov	r0, #0
   2a638:	cmp	r1, r7
   2a63c:	bne	2a660 <__assert_fail@plt+0x17a70>
   2a640:	cmp	r7, #0
   2a644:	beq	2a65c <__assert_fail@plt+0x17a6c>
   2a648:	mov	r0, r6
   2a64c:	mov	r1, r5
   2a650:	mov	r2, r4
   2a654:	pop	{r4, r5, r6, r7, fp, lr}
   2a658:	b	2a664 <__assert_fail@plt+0x17a74>
   2a65c:	mov	r0, #1
   2a660:	pop	{r4, r5, r6, r7, fp, pc}
   2a664:	push	{r4, r5, r6, sl, fp, lr}
   2a668:	add	fp, sp, #16
   2a66c:	mov	r4, r2
   2a670:	mov	r6, r1
   2a674:	mov	r5, r0
   2a678:	mov	r0, r1
   2a67c:	bl	3dba4 <__assert_fail@plt+0x2afb4>
   2a680:	ldrb	r1, [r5, #5]
   2a684:	cmp	r0, #0
   2a688:	andne	r1, r1, #223	; 0xdf
   2a68c:	mov	r0, #0
   2a690:	cmp	r1, r6
   2a694:	bne	2a6b4 <__assert_fail@plt+0x17ac4>
   2a698:	cmp	r6, #0
   2a69c:	beq	2a6b0 <__assert_fail@plt+0x17ac0>
   2a6a0:	mov	r0, r5
   2a6a4:	mov	r1, r4
   2a6a8:	pop	{r4, r5, r6, sl, fp, lr}
   2a6ac:	b	2a6b8 <__assert_fail@plt+0x17ac8>
   2a6b0:	mov	r0, #1
   2a6b4:	pop	{r4, r5, r6, sl, fp, pc}
   2a6b8:	push	{r4, r5, fp, lr}
   2a6bc:	add	fp, sp, #8
   2a6c0:	mov	r5, r1
   2a6c4:	mov	r4, r0
   2a6c8:	mov	r0, r1
   2a6cc:	bl	3dba4 <__assert_fail@plt+0x2afb4>
   2a6d0:	ldrb	r1, [r4, #6]
   2a6d4:	cmp	r0, #0
   2a6d8:	andne	r1, r1, #223	; 0xdf
   2a6dc:	mov	r0, #0
   2a6e0:	cmp	r1, r5
   2a6e4:	popne	{r4, r5, fp, pc}
   2a6e8:	cmp	r5, #0
   2a6ec:	beq	2a6fc <__assert_fail@plt+0x17b0c>
   2a6f0:	mov	r0, r4
   2a6f4:	pop	{r4, r5, fp, lr}
   2a6f8:	b	2a704 <__assert_fail@plt+0x17b14>
   2a6fc:	mov	r0, #1
   2a700:	pop	{r4, r5, fp, pc}
   2a704:	push	{r4, sl, fp, lr}
   2a708:	add	fp, sp, #8
   2a70c:	mov	r4, r0
   2a710:	mov	r0, #0
   2a714:	bl	3dba4 <__assert_fail@plt+0x2afb4>
   2a718:	ldrb	r1, [r4, #7]
   2a71c:	cmp	r0, #0
   2a720:	beq	2a734 <__assert_fail@plt+0x17b44>
   2a724:	tst	r1, #223	; 0xdf
   2a728:	bne	2a73c <__assert_fail@plt+0x17b4c>
   2a72c:	mov	r0, #1
   2a730:	pop	{r4, sl, fp, pc}
   2a734:	cmp	r1, #0
   2a738:	beq	2a72c <__assert_fail@plt+0x17b3c>
   2a73c:	mov	r0, #0
   2a740:	pop	{r4, sl, fp, pc}
   2a744:	push	{r4, r5, fp, lr}
   2a748:	add	fp, sp, #8
   2a74c:	mov	r5, r0
   2a750:	mov	r4, #0
   2a754:	str	r4, [r0, #4]
   2a758:	movw	r0, #64572	; 0xfc3c
   2a75c:	movt	r0, #3
   2a760:	mov	r1, #524288	; 0x80000
   2a764:	bl	220c0 <__assert_fail@plt+0xf4d0>
   2a768:	str	r0, [r5]
   2a76c:	cmn	r0, #1
   2a770:	ble	2a77c <__assert_fail@plt+0x17b8c>
   2a774:	mov	r0, r4
   2a778:	pop	{r4, r5, fp, pc}
   2a77c:	mov	r4, #0
   2a780:	mov	r0, #0
   2a784:	mov	r1, #0
   2a788:	bl	12878 <getcwd@plt>
   2a78c:	str	r0, [r5, #4]
   2a790:	cmp	r0, #0
   2a794:	mvneq	r4, #0
   2a798:	mov	r0, r4
   2a79c:	pop	{r4, r5, fp, pc}
   2a7a0:	ldr	r1, [r0]
   2a7a4:	cmp	r1, #0
   2a7a8:	bmi	2a7b4 <__assert_fail@plt+0x17bc4>
   2a7ac:	mov	r0, r1
   2a7b0:	b	12adc <fchdir@plt>
   2a7b4:	ldr	r0, [r0, #4]
   2a7b8:	b	2c548 <__assert_fail@plt+0x19958>
   2a7bc:	push	{r4, sl, fp, lr}
   2a7c0:	add	fp, sp, #8
   2a7c4:	mov	r4, r0
   2a7c8:	ldr	r0, [r0]
   2a7cc:	cmp	r0, #0
   2a7d0:	bmi	2a7d8 <__assert_fail@plt+0x17be8>
   2a7d4:	bl	12ba8 <close@plt>
   2a7d8:	ldr	r0, [r4, #4]
   2a7dc:	pop	{r4, sl, fp, lr}
   2a7e0:	b	2cad4 <__assert_fail@plt+0x19ee4>
   2a7e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a7e8:	add	fp, sp, #28
   2a7ec:	sub	sp, sp, #964	; 0x3c4
   2a7f0:	sub	sp, sp, #3072	; 0xc00
   2a7f4:	mov	r4, r2
   2a7f8:	mov	r5, r1
   2a7fc:	cmn	r0, #100	; 0x64
   2a800:	beq	2a814 <__assert_fail@plt+0x17c24>
   2a804:	mov	r7, r0
   2a808:	ldrb	r0, [r5]
   2a80c:	cmp	r0, #47	; 0x2f
   2a810:	bne	2a828 <__assert_fail@plt+0x17c38>
   2a814:	mov	r0, r5
   2a818:	mov	r1, r4
   2a81c:	sub	sp, fp, #28
   2a820:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a824:	b	2ecc4 <__assert_fail@plt+0x1c0d4>
   2a828:	mov	sl, sp
   2a82c:	mov	r0, sl
   2a830:	mov	r1, r7
   2a834:	mov	r2, r5
   2a838:	bl	3d610 <__assert_fail@plt+0x2aa20>
   2a83c:	cmp	r0, #0
   2a840:	beq	2a92c <__assert_fail@plt+0x17d3c>
   2a844:	mov	r6, r0
   2a848:	mov	r1, r4
   2a84c:	bl	2ecc4 <__assert_fail@plt+0x1c0d4>
   2a850:	mov	r9, r0
   2a854:	bl	12908 <__errno_location@plt>
   2a858:	mov	r8, r0
   2a85c:	ldr	r2, [r0]
   2a860:	cmp	r6, sl
   2a864:	beq	2a878 <__assert_fail@plt+0x17c88>
   2a868:	mov	r0, r6
   2a86c:	mov	r6, r2
   2a870:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2a874:	mov	r2, r6
   2a878:	cmn	r9, #1
   2a87c:	bne	2a9f8 <__assert_fail@plt+0x17e08>
   2a880:	sub	r0, r2, #1
   2a884:	cmp	r0, #37	; 0x25
   2a888:	bhi	2a9ec <__assert_fail@plt+0x17dfc>
   2a88c:	add	r1, pc, #0
   2a890:	ldr	pc, [r1, r0, lsl #2]
   2a894:	andeq	sl, r2, ip, lsr #18
   2a898:	andeq	sl, r2, ip, lsr #18
   2a89c:	strdeq	sl, [r2], -r4
   2a8a0:	strdeq	sl, [r2], -r4
   2a8a4:	strdeq	sl, [r2], -r4
   2a8a8:	strdeq	sl, [r2], -r4
   2a8ac:	strdeq	sl, [r2], -r4
   2a8b0:	strdeq	sl, [r2], -r4
   2a8b4:	strdeq	sl, [r2], -r4
   2a8b8:	strdeq	sl, [r2], -r4
   2a8bc:	strdeq	sl, [r2], -r4
   2a8c0:	strdeq	sl, [r2], -r4
   2a8c4:	andeq	sl, r2, ip, lsr #18
   2a8c8:	strdeq	sl, [r2], -r4
   2a8cc:	strdeq	sl, [r2], -r4
   2a8d0:	strdeq	sl, [r2], -r4
   2a8d4:	strdeq	sl, [r2], -r4
   2a8d8:	strdeq	sl, [r2], -r4
   2a8dc:	strdeq	sl, [r2], -r4
   2a8e0:	andeq	sl, r2, ip, lsr #18
   2a8e4:	strdeq	sl, [r2], -r4
   2a8e8:	strdeq	sl, [r2], -r4
   2a8ec:	strdeq	sl, [r2], -r4
   2a8f0:	strdeq	sl, [r2], -r4
   2a8f4:	strdeq	sl, [r2], -r4
   2a8f8:	strdeq	sl, [r2], -r4
   2a8fc:	strdeq	sl, [r2], -r4
   2a900:	strdeq	sl, [r2], -r4
   2a904:	strdeq	sl, [r2], -r4
   2a908:	strdeq	sl, [r2], -r4
   2a90c:	strdeq	sl, [r2], -r4
   2a910:	strdeq	sl, [r2], -r4
   2a914:	strdeq	sl, [r2], -r4
   2a918:	strdeq	sl, [r2], -r4
   2a91c:	strdeq	sl, [r2], -r4
   2a920:	strdeq	sl, [r2], -r4
   2a924:	strdeq	sl, [r2], -r4
   2a928:	andeq	sl, r2, ip, lsr #18
   2a92c:	mov	r0, sp
   2a930:	bl	2a744 <__assert_fail@plt+0x17b54>
   2a934:	cmp	r0, #0
   2a938:	bne	2aa04 <__assert_fail@plt+0x17e14>
   2a93c:	cmp	r7, #0
   2a940:	bmi	2a96c <__assert_fail@plt+0x17d7c>
   2a944:	ldr	r0, [sp]
   2a948:	cmp	r0, r7
   2a94c:	bne	2a96c <__assert_fail@plt+0x17d7c>
   2a950:	mov	r0, sp
   2a954:	bl	2a7bc <__assert_fail@plt+0x17bcc>
   2a958:	bl	12908 <__errno_location@plt>
   2a95c:	mov	r1, #9
   2a960:	str	r1, [r0]
   2a964:	mvn	r9, #0
   2a968:	b	2a9f8 <__assert_fail@plt+0x17e08>
   2a96c:	mov	r0, r7
   2a970:	bl	12adc <fchdir@plt>
   2a974:	cmp	r0, #0
   2a978:	beq	2a99c <__assert_fail@plt+0x17dac>
   2a97c:	bl	12908 <__errno_location@plt>
   2a980:	mov	r4, r0
   2a984:	ldr	r5, [r0]
   2a988:	mov	r0, sp
   2a98c:	bl	2a7bc <__assert_fail@plt+0x17bcc>
   2a990:	str	r5, [r4]
   2a994:	mvn	r9, #0
   2a998:	b	2a9f8 <__assert_fail@plt+0x17e08>
   2a99c:	mov	r0, r5
   2a9a0:	mov	r1, r4
   2a9a4:	bl	2ecc4 <__assert_fail@plt+0x1c0d4>
   2a9a8:	mov	r9, r0
   2a9ac:	mov	r4, #0
   2a9b0:	cmn	r0, #1
   2a9b4:	bne	2a9c0 <__assert_fail@plt+0x17dd0>
   2a9b8:	bl	12908 <__errno_location@plt>
   2a9bc:	ldr	r4, [r0]
   2a9c0:	mov	r0, sp
   2a9c4:	bl	2a7a0 <__assert_fail@plt+0x17bb0>
   2a9c8:	cmp	r0, #0
   2a9cc:	bne	2aa10 <__assert_fail@plt+0x17e20>
   2a9d0:	mov	r0, sp
   2a9d4:	bl	2a7bc <__assert_fail@plt+0x17bcc>
   2a9d8:	cmp	r4, #0
   2a9dc:	beq	2a9f8 <__assert_fail@plt+0x17e08>
   2a9e0:	bl	12908 <__errno_location@plt>
   2a9e4:	str	r4, [r0]
   2a9e8:	b	2a9f8 <__assert_fail@plt+0x17e08>
   2a9ec:	cmp	r2, #95	; 0x5f
   2a9f0:	beq	2a92c <__assert_fail@plt+0x17d3c>
   2a9f4:	str	r2, [r8]
   2a9f8:	mov	r0, r9
   2a9fc:	sub	sp, fp, #28
   2aa00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2aa04:	bl	12908 <__errno_location@plt>
   2aa08:	ldr	r0, [r0]
   2aa0c:	bl	255c8 <__assert_fail@plt+0x129d8>
   2aa10:	bl	12908 <__errno_location@plt>
   2aa14:	ldr	r0, [r0]
   2aa18:	bl	25608 <__assert_fail@plt+0x12a18>
   2aa1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aa20:	add	fp, sp, #28
   2aa24:	sub	sp, sp, #964	; 0x3c4
   2aa28:	sub	sp, sp, #3072	; 0xc00
   2aa2c:	mov	r4, r2
   2aa30:	mov	r5, r1
   2aa34:	cmn	r0, #100	; 0x64
   2aa38:	beq	2aa4c <__assert_fail@plt+0x17e5c>
   2aa3c:	mov	r7, r0
   2aa40:	ldrb	r0, [r5]
   2aa44:	cmp	r0, #47	; 0x2f
   2aa48:	bne	2aa60 <__assert_fail@plt+0x17e70>
   2aa4c:	mov	r0, r5
   2aa50:	mov	r1, r4
   2aa54:	sub	sp, fp, #28
   2aa58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aa5c:	b	2ed50 <__assert_fail@plt+0x1c160>
   2aa60:	mov	sl, sp
   2aa64:	mov	r0, sl
   2aa68:	mov	r1, r7
   2aa6c:	mov	r2, r5
   2aa70:	bl	3d610 <__assert_fail@plt+0x2aa20>
   2aa74:	cmp	r0, #0
   2aa78:	beq	2ab64 <__assert_fail@plt+0x17f74>
   2aa7c:	mov	r6, r0
   2aa80:	mov	r1, r4
   2aa84:	bl	2ed50 <__assert_fail@plt+0x1c160>
   2aa88:	mov	r9, r0
   2aa8c:	bl	12908 <__errno_location@plt>
   2aa90:	mov	r8, r0
   2aa94:	ldr	r2, [r0]
   2aa98:	cmp	r6, sl
   2aa9c:	beq	2aab0 <__assert_fail@plt+0x17ec0>
   2aaa0:	mov	r0, r6
   2aaa4:	mov	r6, r2
   2aaa8:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2aaac:	mov	r2, r6
   2aab0:	cmn	r9, #1
   2aab4:	bne	2ac30 <__assert_fail@plt+0x18040>
   2aab8:	sub	r0, r2, #1
   2aabc:	cmp	r0, #37	; 0x25
   2aac0:	bhi	2ac24 <__assert_fail@plt+0x18034>
   2aac4:	add	r1, pc, #0
   2aac8:	ldr	pc, [r1, r0, lsl #2]
   2aacc:	andeq	sl, r2, r4, ror #22
   2aad0:	andeq	sl, r2, r4, ror #22
   2aad4:	andeq	sl, r2, ip, lsr #24
   2aad8:	andeq	sl, r2, ip, lsr #24
   2aadc:	andeq	sl, r2, ip, lsr #24
   2aae0:	andeq	sl, r2, ip, lsr #24
   2aae4:	andeq	sl, r2, ip, lsr #24
   2aae8:	andeq	sl, r2, ip, lsr #24
   2aaec:	andeq	sl, r2, ip, lsr #24
   2aaf0:	andeq	sl, r2, ip, lsr #24
   2aaf4:	andeq	sl, r2, ip, lsr #24
   2aaf8:	andeq	sl, r2, ip, lsr #24
   2aafc:	andeq	sl, r2, r4, ror #22
   2ab00:	andeq	sl, r2, ip, lsr #24
   2ab04:	andeq	sl, r2, ip, lsr #24
   2ab08:	andeq	sl, r2, ip, lsr #24
   2ab0c:	andeq	sl, r2, ip, lsr #24
   2ab10:	andeq	sl, r2, ip, lsr #24
   2ab14:	andeq	sl, r2, ip, lsr #24
   2ab18:	andeq	sl, r2, r4, ror #22
   2ab1c:	andeq	sl, r2, ip, lsr #24
   2ab20:	andeq	sl, r2, ip, lsr #24
   2ab24:	andeq	sl, r2, ip, lsr #24
   2ab28:	andeq	sl, r2, ip, lsr #24
   2ab2c:	andeq	sl, r2, ip, lsr #24
   2ab30:	andeq	sl, r2, ip, lsr #24
   2ab34:	andeq	sl, r2, ip, lsr #24
   2ab38:	andeq	sl, r2, ip, lsr #24
   2ab3c:	andeq	sl, r2, ip, lsr #24
   2ab40:	andeq	sl, r2, ip, lsr #24
   2ab44:	andeq	sl, r2, ip, lsr #24
   2ab48:	andeq	sl, r2, ip, lsr #24
   2ab4c:	andeq	sl, r2, ip, lsr #24
   2ab50:	andeq	sl, r2, ip, lsr #24
   2ab54:	andeq	sl, r2, ip, lsr #24
   2ab58:	andeq	sl, r2, ip, lsr #24
   2ab5c:	andeq	sl, r2, ip, lsr #24
   2ab60:	andeq	sl, r2, r4, ror #22
   2ab64:	mov	r0, sp
   2ab68:	bl	2a744 <__assert_fail@plt+0x17b54>
   2ab6c:	cmp	r0, #0
   2ab70:	bne	2ac3c <__assert_fail@plt+0x1804c>
   2ab74:	cmp	r7, #0
   2ab78:	bmi	2aba4 <__assert_fail@plt+0x17fb4>
   2ab7c:	ldr	r0, [sp]
   2ab80:	cmp	r0, r7
   2ab84:	bne	2aba4 <__assert_fail@plt+0x17fb4>
   2ab88:	mov	r0, sp
   2ab8c:	bl	2a7bc <__assert_fail@plt+0x17bcc>
   2ab90:	bl	12908 <__errno_location@plt>
   2ab94:	mov	r1, #9
   2ab98:	str	r1, [r0]
   2ab9c:	mvn	r9, #0
   2aba0:	b	2ac30 <__assert_fail@plt+0x18040>
   2aba4:	mov	r0, r7
   2aba8:	bl	12adc <fchdir@plt>
   2abac:	cmp	r0, #0
   2abb0:	beq	2abd4 <__assert_fail@plt+0x17fe4>
   2abb4:	bl	12908 <__errno_location@plt>
   2abb8:	mov	r4, r0
   2abbc:	ldr	r5, [r0]
   2abc0:	mov	r0, sp
   2abc4:	bl	2a7bc <__assert_fail@plt+0x17bcc>
   2abc8:	str	r5, [r4]
   2abcc:	mvn	r9, #0
   2abd0:	b	2ac30 <__assert_fail@plt+0x18040>
   2abd4:	mov	r0, r5
   2abd8:	mov	r1, r4
   2abdc:	bl	2ed50 <__assert_fail@plt+0x1c160>
   2abe0:	mov	r9, r0
   2abe4:	mov	r4, #0
   2abe8:	cmn	r0, #1
   2abec:	bne	2abf8 <__assert_fail@plt+0x18008>
   2abf0:	bl	12908 <__errno_location@plt>
   2abf4:	ldr	r4, [r0]
   2abf8:	mov	r0, sp
   2abfc:	bl	2a7a0 <__assert_fail@plt+0x17bb0>
   2ac00:	cmp	r0, #0
   2ac04:	bne	2ac48 <__assert_fail@plt+0x18058>
   2ac08:	mov	r0, sp
   2ac0c:	bl	2a7bc <__assert_fail@plt+0x17bcc>
   2ac10:	cmp	r4, #0
   2ac14:	beq	2ac30 <__assert_fail@plt+0x18040>
   2ac18:	bl	12908 <__errno_location@plt>
   2ac1c:	str	r4, [r0]
   2ac20:	b	2ac30 <__assert_fail@plt+0x18040>
   2ac24:	cmp	r2, #95	; 0x5f
   2ac28:	beq	2ab64 <__assert_fail@plt+0x17f74>
   2ac2c:	str	r2, [r8]
   2ac30:	mov	r0, r9
   2ac34:	sub	sp, fp, #28
   2ac38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ac3c:	bl	12908 <__errno_location@plt>
   2ac40:	ldr	r0, [r0]
   2ac44:	bl	255c8 <__assert_fail@plt+0x129d8>
   2ac48:	bl	12908 <__errno_location@plt>
   2ac4c:	ldr	r0, [r0]
   2ac50:	bl	25608 <__assert_fail@plt+0x12a18>
   2ac54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ac58:	add	fp, sp, #28
   2ac5c:	sub	sp, sp, #964	; 0x3c4
   2ac60:	sub	sp, sp, #3072	; 0xc00
   2ac64:	mov	r4, r2
   2ac68:	mov	r5, r1
   2ac6c:	cmn	r0, #100	; 0x64
   2ac70:	beq	2ac84 <__assert_fail@plt+0x18094>
   2ac74:	mov	r7, r0
   2ac78:	ldrb	r0, [r5]
   2ac7c:	cmp	r0, #47	; 0x2f
   2ac80:	bne	2ac98 <__assert_fail@plt+0x180a8>
   2ac84:	mov	r0, r5
   2ac88:	mov	r1, r4
   2ac8c:	sub	sp, fp, #28
   2ac90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ac94:	b	129bc <setfilecon@plt>
   2ac98:	mov	sl, sp
   2ac9c:	mov	r0, sl
   2aca0:	mov	r1, r7
   2aca4:	mov	r2, r5
   2aca8:	bl	3d610 <__assert_fail@plt+0x2aa20>
   2acac:	cmp	r0, #0
   2acb0:	beq	2ad9c <__assert_fail@plt+0x181ac>
   2acb4:	mov	r6, r0
   2acb8:	mov	r1, r4
   2acbc:	bl	129bc <setfilecon@plt>
   2acc0:	mov	r9, r0
   2acc4:	bl	12908 <__errno_location@plt>
   2acc8:	mov	r8, r0
   2accc:	ldr	r2, [r0]
   2acd0:	cmp	r6, sl
   2acd4:	beq	2ace8 <__assert_fail@plt+0x180f8>
   2acd8:	mov	r0, r6
   2acdc:	mov	r6, r2
   2ace0:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2ace4:	mov	r2, r6
   2ace8:	cmn	r9, #1
   2acec:	bne	2ae68 <__assert_fail@plt+0x18278>
   2acf0:	sub	r0, r2, #1
   2acf4:	cmp	r0, #37	; 0x25
   2acf8:	bhi	2ae5c <__assert_fail@plt+0x1826c>
   2acfc:	add	r1, pc, #0
   2ad00:	ldr	pc, [r1, r0, lsl #2]
   2ad04:	muleq	r2, ip, sp
   2ad08:	muleq	r2, ip, sp
   2ad0c:	andeq	sl, r2, r4, ror #28
   2ad10:	andeq	sl, r2, r4, ror #28
   2ad14:	andeq	sl, r2, r4, ror #28
   2ad18:	andeq	sl, r2, r4, ror #28
   2ad1c:	andeq	sl, r2, r4, ror #28
   2ad20:	andeq	sl, r2, r4, ror #28
   2ad24:	andeq	sl, r2, r4, ror #28
   2ad28:	andeq	sl, r2, r4, ror #28
   2ad2c:	andeq	sl, r2, r4, ror #28
   2ad30:	andeq	sl, r2, r4, ror #28
   2ad34:	muleq	r2, ip, sp
   2ad38:	andeq	sl, r2, r4, ror #28
   2ad3c:	andeq	sl, r2, r4, ror #28
   2ad40:	andeq	sl, r2, r4, ror #28
   2ad44:	andeq	sl, r2, r4, ror #28
   2ad48:	andeq	sl, r2, r4, ror #28
   2ad4c:	andeq	sl, r2, r4, ror #28
   2ad50:	muleq	r2, ip, sp
   2ad54:	andeq	sl, r2, r4, ror #28
   2ad58:	andeq	sl, r2, r4, ror #28
   2ad5c:	andeq	sl, r2, r4, ror #28
   2ad60:	andeq	sl, r2, r4, ror #28
   2ad64:	andeq	sl, r2, r4, ror #28
   2ad68:	andeq	sl, r2, r4, ror #28
   2ad6c:	andeq	sl, r2, r4, ror #28
   2ad70:	andeq	sl, r2, r4, ror #28
   2ad74:	andeq	sl, r2, r4, ror #28
   2ad78:	andeq	sl, r2, r4, ror #28
   2ad7c:	andeq	sl, r2, r4, ror #28
   2ad80:	andeq	sl, r2, r4, ror #28
   2ad84:	andeq	sl, r2, r4, ror #28
   2ad88:	andeq	sl, r2, r4, ror #28
   2ad8c:	andeq	sl, r2, r4, ror #28
   2ad90:	andeq	sl, r2, r4, ror #28
   2ad94:	andeq	sl, r2, r4, ror #28
   2ad98:	muleq	r2, ip, sp
   2ad9c:	mov	r0, sp
   2ada0:	bl	2a744 <__assert_fail@plt+0x17b54>
   2ada4:	cmp	r0, #0
   2ada8:	bne	2ae74 <__assert_fail@plt+0x18284>
   2adac:	cmp	r7, #0
   2adb0:	bmi	2addc <__assert_fail@plt+0x181ec>
   2adb4:	ldr	r0, [sp]
   2adb8:	cmp	r0, r7
   2adbc:	bne	2addc <__assert_fail@plt+0x181ec>
   2adc0:	mov	r0, sp
   2adc4:	bl	2a7bc <__assert_fail@plt+0x17bcc>
   2adc8:	bl	12908 <__errno_location@plt>
   2adcc:	mov	r1, #9
   2add0:	str	r1, [r0]
   2add4:	mvn	r9, #0
   2add8:	b	2ae68 <__assert_fail@plt+0x18278>
   2addc:	mov	r0, r7
   2ade0:	bl	12adc <fchdir@plt>
   2ade4:	cmp	r0, #0
   2ade8:	beq	2ae0c <__assert_fail@plt+0x1821c>
   2adec:	bl	12908 <__errno_location@plt>
   2adf0:	mov	r4, r0
   2adf4:	ldr	r5, [r0]
   2adf8:	mov	r0, sp
   2adfc:	bl	2a7bc <__assert_fail@plt+0x17bcc>
   2ae00:	str	r5, [r4]
   2ae04:	mvn	r9, #0
   2ae08:	b	2ae68 <__assert_fail@plt+0x18278>
   2ae0c:	mov	r0, r5
   2ae10:	mov	r1, r4
   2ae14:	bl	129bc <setfilecon@plt>
   2ae18:	mov	r9, r0
   2ae1c:	mov	r4, #0
   2ae20:	cmn	r0, #1
   2ae24:	bne	2ae30 <__assert_fail@plt+0x18240>
   2ae28:	bl	12908 <__errno_location@plt>
   2ae2c:	ldr	r4, [r0]
   2ae30:	mov	r0, sp
   2ae34:	bl	2a7a0 <__assert_fail@plt+0x17bb0>
   2ae38:	cmp	r0, #0
   2ae3c:	bne	2ae80 <__assert_fail@plt+0x18290>
   2ae40:	mov	r0, sp
   2ae44:	bl	2a7bc <__assert_fail@plt+0x17bcc>
   2ae48:	cmp	r4, #0
   2ae4c:	beq	2ae68 <__assert_fail@plt+0x18278>
   2ae50:	bl	12908 <__errno_location@plt>
   2ae54:	str	r4, [r0]
   2ae58:	b	2ae68 <__assert_fail@plt+0x18278>
   2ae5c:	cmp	r2, #95	; 0x5f
   2ae60:	beq	2ad9c <__assert_fail@plt+0x181ac>
   2ae64:	str	r2, [r8]
   2ae68:	mov	r0, r9
   2ae6c:	sub	sp, fp, #28
   2ae70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ae74:	bl	12908 <__errno_location@plt>
   2ae78:	ldr	r0, [r0]
   2ae7c:	bl	255c8 <__assert_fail@plt+0x129d8>
   2ae80:	bl	12908 <__errno_location@plt>
   2ae84:	ldr	r0, [r0]
   2ae88:	bl	25608 <__assert_fail@plt+0x12a18>
   2ae8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ae90:	add	fp, sp, #28
   2ae94:	sub	sp, sp, #964	; 0x3c4
   2ae98:	sub	sp, sp, #3072	; 0xc00
   2ae9c:	mov	r4, r2
   2aea0:	mov	r5, r1
   2aea4:	cmn	r0, #100	; 0x64
   2aea8:	beq	2aebc <__assert_fail@plt+0x182cc>
   2aeac:	mov	r7, r0
   2aeb0:	ldrb	r0, [r5]
   2aeb4:	cmp	r0, #47	; 0x2f
   2aeb8:	bne	2aed0 <__assert_fail@plt+0x182e0>
   2aebc:	mov	r0, r5
   2aec0:	mov	r1, r4
   2aec4:	sub	sp, fp, #28
   2aec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aecc:	b	12578 <lsetfilecon@plt>
   2aed0:	mov	sl, sp
   2aed4:	mov	r0, sl
   2aed8:	mov	r1, r7
   2aedc:	mov	r2, r5
   2aee0:	bl	3d610 <__assert_fail@plt+0x2aa20>
   2aee4:	cmp	r0, #0
   2aee8:	beq	2afd4 <__assert_fail@plt+0x183e4>
   2aeec:	mov	r6, r0
   2aef0:	mov	r1, r4
   2aef4:	bl	12578 <lsetfilecon@plt>
   2aef8:	mov	r9, r0
   2aefc:	bl	12908 <__errno_location@plt>
   2af00:	mov	r8, r0
   2af04:	ldr	r2, [r0]
   2af08:	cmp	r6, sl
   2af0c:	beq	2af20 <__assert_fail@plt+0x18330>
   2af10:	mov	r0, r6
   2af14:	mov	r6, r2
   2af18:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2af1c:	mov	r2, r6
   2af20:	cmn	r9, #1
   2af24:	bne	2b0a0 <__assert_fail@plt+0x184b0>
   2af28:	sub	r0, r2, #1
   2af2c:	cmp	r0, #37	; 0x25
   2af30:	bhi	2b094 <__assert_fail@plt+0x184a4>
   2af34:	add	r1, pc, #0
   2af38:	ldr	pc, [r1, r0, lsl #2]
   2af3c:	ldrdeq	sl, [r2], -r4
   2af40:	ldrdeq	sl, [r2], -r4
   2af44:	muleq	r2, ip, r0
   2af48:	muleq	r2, ip, r0
   2af4c:	muleq	r2, ip, r0
   2af50:	muleq	r2, ip, r0
   2af54:	muleq	r2, ip, r0
   2af58:	muleq	r2, ip, r0
   2af5c:	muleq	r2, ip, r0
   2af60:	muleq	r2, ip, r0
   2af64:	muleq	r2, ip, r0
   2af68:	muleq	r2, ip, r0
   2af6c:	ldrdeq	sl, [r2], -r4
   2af70:	muleq	r2, ip, r0
   2af74:	muleq	r2, ip, r0
   2af78:	muleq	r2, ip, r0
   2af7c:	muleq	r2, ip, r0
   2af80:	muleq	r2, ip, r0
   2af84:	muleq	r2, ip, r0
   2af88:	ldrdeq	sl, [r2], -r4
   2af8c:	muleq	r2, ip, r0
   2af90:	muleq	r2, ip, r0
   2af94:	muleq	r2, ip, r0
   2af98:	muleq	r2, ip, r0
   2af9c:	muleq	r2, ip, r0
   2afa0:	muleq	r2, ip, r0
   2afa4:	muleq	r2, ip, r0
   2afa8:	muleq	r2, ip, r0
   2afac:	muleq	r2, ip, r0
   2afb0:	muleq	r2, ip, r0
   2afb4:	muleq	r2, ip, r0
   2afb8:	muleq	r2, ip, r0
   2afbc:	muleq	r2, ip, r0
   2afc0:	muleq	r2, ip, r0
   2afc4:	muleq	r2, ip, r0
   2afc8:	muleq	r2, ip, r0
   2afcc:	muleq	r2, ip, r0
   2afd0:	ldrdeq	sl, [r2], -r4
   2afd4:	mov	r0, sp
   2afd8:	bl	2a744 <__assert_fail@plt+0x17b54>
   2afdc:	cmp	r0, #0
   2afe0:	bne	2b0ac <__assert_fail@plt+0x184bc>
   2afe4:	cmp	r7, #0
   2afe8:	bmi	2b014 <__assert_fail@plt+0x18424>
   2afec:	ldr	r0, [sp]
   2aff0:	cmp	r0, r7
   2aff4:	bne	2b014 <__assert_fail@plt+0x18424>
   2aff8:	mov	r0, sp
   2affc:	bl	2a7bc <__assert_fail@plt+0x17bcc>
   2b000:	bl	12908 <__errno_location@plt>
   2b004:	mov	r1, #9
   2b008:	str	r1, [r0]
   2b00c:	mvn	r9, #0
   2b010:	b	2b0a0 <__assert_fail@plt+0x184b0>
   2b014:	mov	r0, r7
   2b018:	bl	12adc <fchdir@plt>
   2b01c:	cmp	r0, #0
   2b020:	beq	2b044 <__assert_fail@plt+0x18454>
   2b024:	bl	12908 <__errno_location@plt>
   2b028:	mov	r4, r0
   2b02c:	ldr	r5, [r0]
   2b030:	mov	r0, sp
   2b034:	bl	2a7bc <__assert_fail@plt+0x17bcc>
   2b038:	str	r5, [r4]
   2b03c:	mvn	r9, #0
   2b040:	b	2b0a0 <__assert_fail@plt+0x184b0>
   2b044:	mov	r0, r5
   2b048:	mov	r1, r4
   2b04c:	bl	12578 <lsetfilecon@plt>
   2b050:	mov	r9, r0
   2b054:	mov	r4, #0
   2b058:	cmn	r0, #1
   2b05c:	bne	2b068 <__assert_fail@plt+0x18478>
   2b060:	bl	12908 <__errno_location@plt>
   2b064:	ldr	r4, [r0]
   2b068:	mov	r0, sp
   2b06c:	bl	2a7a0 <__assert_fail@plt+0x17bb0>
   2b070:	cmp	r0, #0
   2b074:	bne	2b0b8 <__assert_fail@plt+0x184c8>
   2b078:	mov	r0, sp
   2b07c:	bl	2a7bc <__assert_fail@plt+0x17bcc>
   2b080:	cmp	r4, #0
   2b084:	beq	2b0a0 <__assert_fail@plt+0x184b0>
   2b088:	bl	12908 <__errno_location@plt>
   2b08c:	str	r4, [r0]
   2b090:	b	2b0a0 <__assert_fail@plt+0x184b0>
   2b094:	cmp	r2, #95	; 0x5f
   2b098:	beq	2afd4 <__assert_fail@plt+0x183e4>
   2b09c:	str	r2, [r8]
   2b0a0:	mov	r0, r9
   2b0a4:	sub	sp, fp, #28
   2b0a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b0ac:	bl	12908 <__errno_location@plt>
   2b0b0:	ldr	r0, [r0]
   2b0b4:	bl	255c8 <__assert_fail@plt+0x129d8>
   2b0b8:	bl	12908 <__errno_location@plt>
   2b0bc:	ldr	r0, [r0]
   2b0c0:	bl	25608 <__assert_fail@plt+0x12a18>
   2b0c4:	ldr	r0, [r0, #76]	; 0x4c
   2b0c8:	bx	lr
   2b0cc:	ldr	r0, [r0, #92]	; 0x5c
   2b0d0:	bx	lr
   2b0d4:	ldr	r0, [r0, #84]	; 0x54
   2b0d8:	bx	lr
   2b0dc:	mov	r0, #0
   2b0e0:	bx	lr
   2b0e4:	ldrd	r2, [r1, #72]	; 0x48
   2b0e8:	stm	r0, {r2, r3}
   2b0ec:	bx	lr
   2b0f0:	ldrd	r2, [r1, #88]	; 0x58
   2b0f4:	stm	r0, {r2, r3}
   2b0f8:	bx	lr
   2b0fc:	ldrd	r2, [r1, #80]	; 0x50
   2b100:	stm	r0, {r2, r3}
   2b104:	bx	lr
   2b108:	mvn	r1, #0
   2b10c:	str	r1, [r0]
   2b110:	str	r1, [r0, #4]
   2b114:	bx	lr
   2b118:	bx	lr
   2b11c:	push	{r4, r5, fp, lr}
   2b120:	add	fp, sp, #8
   2b124:	mov	r4, r1
   2b128:	mov	r5, r0
   2b12c:	mov	r1, #0
   2b130:	mov	r2, r4
   2b134:	bl	129b0 <memchr@plt>
   2b138:	sub	r1, r0, r5
   2b13c:	cmp	r0, #0
   2b140:	addne	r4, r1, #1
   2b144:	mov	r0, r4
   2b148:	pop	{r4, r5, fp, pc}
   2b14c:	mov	r1, #0
   2b150:	mov	r2, #3
   2b154:	b	2c888 <__assert_fail@plt+0x19c98>
   2b158:	push	{r4, r5, r6, r7, fp, lr}
   2b15c:	add	fp, sp, #16
   2b160:	mov	r4, r0
   2b164:	cmp	r0, #2
   2b168:	bhi	2b198 <__assert_fail@plt+0x185a8>
   2b16c:	mov	r0, r4
   2b170:	bl	2b14c <__assert_fail@plt+0x1855c>
   2b174:	mov	r5, r0
   2b178:	bl	12908 <__errno_location@plt>
   2b17c:	mov	r6, r0
   2b180:	ldr	r7, [r0]
   2b184:	mov	r0, r4
   2b188:	bl	12ba8 <close@plt>
   2b18c:	str	r7, [r6]
   2b190:	mov	r0, r5
   2b194:	pop	{r4, r5, r6, r7, fp, pc}
   2b198:	mov	r0, r4
   2b19c:	pop	{r4, r5, r6, r7, fp, pc}
   2b1a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b1a4:	add	fp, sp, #24
   2b1a8:	sub	sp, sp, #32
   2b1ac:	mov	r4, r2
   2b1b0:	mov	r5, r0
   2b1b4:	ldr	r7, [fp, #12]
   2b1b8:	ldr	r6, [fp, #8]
   2b1bc:	cmp	r1, #0
   2b1c0:	beq	2b1e0 <__assert_fail@plt+0x185f0>
   2b1c4:	mov	r2, r1
   2b1c8:	str	r3, [sp]
   2b1cc:	movw	r1, #17596	; 0x44bc
   2b1d0:	movt	r1, #4
   2b1d4:	mov	r0, r5
   2b1d8:	mov	r3, r4
   2b1dc:	b	2b1f0 <__assert_fail@plt+0x18600>
   2b1e0:	movw	r1, #17608	; 0x44c8
   2b1e4:	movt	r1, #4
   2b1e8:	mov	r0, r5
   2b1ec:	mov	r2, r4
   2b1f0:	bl	128fc <fprintf@plt>
   2b1f4:	movw	r1, #17615	; 0x44cf
   2b1f8:	movt	r1, #4
   2b1fc:	mov	r0, #0
   2b200:	mov	r2, #5
   2b204:	bl	12674 <dcgettext@plt>
   2b208:	mov	r2, r0
   2b20c:	movw	r1, #18311	; 0x4787
   2b210:	movt	r1, #4
   2b214:	mov	r0, r5
   2b218:	movw	r3, #2022	; 0x7e6
   2b21c:	bl	128fc <fprintf@plt>
   2b220:	mov	r0, #10
   2b224:	mov	r1, r5
   2b228:	bl	12a70 <fputc@plt>
   2b22c:	movw	r1, #17619	; 0x44d3
   2b230:	movt	r1, #4
   2b234:	mov	r0, #0
   2b238:	mov	r2, #5
   2b23c:	bl	12674 <dcgettext@plt>
   2b240:	mov	r1, r0
   2b244:	movw	r2, #17790	; 0x457e
   2b248:	movt	r2, #4
   2b24c:	mov	r0, r5
   2b250:	bl	128fc <fprintf@plt>
   2b254:	mov	r0, #10
   2b258:	mov	r1, r5
   2b25c:	bl	12a70 <fputc@plt>
   2b260:	cmp	r7, #9
   2b264:	bhi	2b2a0 <__assert_fail@plt+0x186b0>
   2b268:	add	r0, pc, #0
   2b26c:	ldr	pc, [r0, r7, lsl #2]
   2b270:	muleq	r2, r8, r2
   2b274:	andeq	fp, r2, ip, lsr #5
   2b278:	ldrdeq	fp, [r2], -r8
   2b27c:	andeq	fp, r2, r4, lsl #6
   2b280:	andeq	fp, r2, ip, lsr #6
   2b284:	andeq	fp, r2, r8, asr r3
   2b288:	andeq	fp, r2, ip, lsl #7
   2b28c:	andeq	fp, r2, ip, asr #7
   2b290:	andeq	fp, r2, r8, ror #8
   2b294:	andeq	fp, r2, r0, lsl r4
   2b298:	sub	sp, fp, #24
   2b29c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b2a0:	movw	r1, #18143	; 0x46df
   2b2a4:	movt	r1, #4
   2b2a8:	b	2b418 <__assert_fail@plt+0x18828>
   2b2ac:	movw	r1, #17824	; 0x45a0
   2b2b0:	movt	r1, #4
   2b2b4:	mov	r0, #0
   2b2b8:	mov	r2, #5
   2b2bc:	bl	12674 <dcgettext@plt>
   2b2c0:	mov	r1, r0
   2b2c4:	ldr	r2, [r6]
   2b2c8:	mov	r0, r5
   2b2cc:	sub	sp, fp, #24
   2b2d0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b2d4:	b	128fc <fprintf@plt>
   2b2d8:	movw	r1, #17840	; 0x45b0
   2b2dc:	movt	r1, #4
   2b2e0:	mov	r0, #0
   2b2e4:	mov	r2, #5
   2b2e8:	bl	12674 <dcgettext@plt>
   2b2ec:	mov	r1, r0
   2b2f0:	ldm	r6, {r2, r3}
   2b2f4:	mov	r0, r5
   2b2f8:	sub	sp, fp, #24
   2b2fc:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b300:	b	128fc <fprintf@plt>
   2b304:	movw	r1, #17863	; 0x45c7
   2b308:	movt	r1, #4
   2b30c:	mov	r0, #0
   2b310:	mov	r2, #5
   2b314:	bl	12674 <dcgettext@plt>
   2b318:	mov	r1, r0
   2b31c:	ldm	r6, {r2, r3}
   2b320:	ldr	r0, [r6, #8]
   2b324:	str	r0, [sp]
   2b328:	b	2b3c4 <__assert_fail@plt+0x187d4>
   2b32c:	movw	r1, #17891	; 0x45e3
   2b330:	movt	r1, #4
   2b334:	mov	r0, #0
   2b338:	mov	r2, #5
   2b33c:	bl	12674 <dcgettext@plt>
   2b340:	mov	r1, r0
   2b344:	ldm	r6, {r2, r3}
   2b348:	ldr	r0, [r6, #8]
   2b34c:	ldr	r7, [r6, #12]
   2b350:	stm	sp, {r0, r7}
   2b354:	b	2b3c4 <__assert_fail@plt+0x187d4>
   2b358:	movw	r1, #17923	; 0x4603
   2b35c:	movt	r1, #4
   2b360:	mov	r0, #0
   2b364:	mov	r2, #5
   2b368:	bl	12674 <dcgettext@plt>
   2b36c:	mov	r1, r0
   2b370:	ldm	r6, {r2, r3}
   2b374:	ldr	r0, [r6, #8]
   2b378:	ldr	r7, [r6, #12]
   2b37c:	ldr	r6, [r6, #16]
   2b380:	stm	sp, {r0, r7}
   2b384:	str	r6, [sp, #8]
   2b388:	b	2b3c4 <__assert_fail@plt+0x187d4>
   2b38c:	movw	r1, #17959	; 0x4627
   2b390:	movt	r1, #4
   2b394:	mov	r0, #0
   2b398:	mov	r2, #5
   2b39c:	bl	12674 <dcgettext@plt>
   2b3a0:	mov	r1, r0
   2b3a4:	ldm	r6, {r2, r3}
   2b3a8:	ldr	r0, [r6, #8]
   2b3ac:	ldr	r7, [r6, #12]
   2b3b0:	ldr	r4, [r6, #16]
   2b3b4:	ldr	r6, [r6, #20]
   2b3b8:	stm	sp, {r0, r7}
   2b3bc:	str	r4, [sp, #8]
   2b3c0:	str	r6, [sp, #12]
   2b3c4:	mov	r0, r5
   2b3c8:	b	2b4b8 <__assert_fail@plt+0x188c8>
   2b3cc:	movw	r1, #17999	; 0x464f
   2b3d0:	movt	r1, #4
   2b3d4:	mov	r0, #0
   2b3d8:	mov	r2, #5
   2b3dc:	bl	12674 <dcgettext@plt>
   2b3e0:	mov	ip, r0
   2b3e4:	ldm	r6, {r2, r3}
   2b3e8:	ldr	r0, [r6, #8]
   2b3ec:	ldr	r7, [r6, #12]
   2b3f0:	ldr	r4, [r6, #16]
   2b3f4:	ldr	r1, [r6, #20]
   2b3f8:	ldr	r6, [r6, #24]
   2b3fc:	stm	sp, {r0, r7}
   2b400:	str	r4, [sp, #8]
   2b404:	str	r1, [sp, #12]
   2b408:	str	r6, [sp, #16]
   2b40c:	b	2b4b0 <__assert_fail@plt+0x188c0>
   2b410:	movw	r1, #18091	; 0x46ab
   2b414:	movt	r1, #4
   2b418:	mov	r0, #0
   2b41c:	mov	r2, #5
   2b420:	bl	12674 <dcgettext@plt>
   2b424:	mov	ip, r0
   2b428:	ldr	r2, [r6]
   2b42c:	ldr	r3, [r6, #4]
   2b430:	ldr	r0, [r6, #8]
   2b434:	ldr	r7, [r6, #12]
   2b438:	ldr	r4, [r6, #16]
   2b43c:	ldr	r1, [r6, #20]
   2b440:	ldr	lr, [r6, #24]
   2b444:	ldr	r8, [r6, #28]
   2b448:	ldr	r6, [r6, #32]
   2b44c:	stm	sp, {r0, r7}
   2b450:	str	r4, [sp, #8]
   2b454:	str	r1, [sp, #12]
   2b458:	str	lr, [sp, #16]
   2b45c:	str	r8, [sp, #20]
   2b460:	str	r6, [sp, #24]
   2b464:	b	2b4b0 <__assert_fail@plt+0x188c0>
   2b468:	movw	r1, #18043	; 0x467b
   2b46c:	movt	r1, #4
   2b470:	mov	r0, #0
   2b474:	mov	r2, #5
   2b478:	bl	12674 <dcgettext@plt>
   2b47c:	mov	ip, r0
   2b480:	ldm	r6, {r2, r3}
   2b484:	ldr	r0, [r6, #8]
   2b488:	ldr	r7, [r6, #12]
   2b48c:	ldr	r4, [r6, #16]
   2b490:	ldr	r1, [r6, #20]
   2b494:	ldr	lr, [r6, #24]
   2b498:	ldr	r6, [r6, #28]
   2b49c:	stm	sp, {r0, r7}
   2b4a0:	str	r4, [sp, #8]
   2b4a4:	str	r1, [sp, #12]
   2b4a8:	str	lr, [sp, #16]
   2b4ac:	str	r6, [sp, #20]
   2b4b0:	mov	r0, r5
   2b4b4:	mov	r1, ip
   2b4b8:	bl	128fc <fprintf@plt>
   2b4bc:	sub	sp, fp, #24
   2b4c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b4c4:	push	{r4, sl, fp, lr}
   2b4c8:	add	fp, sp, #8
   2b4cc:	sub	sp, sp, #8
   2b4d0:	mov	lr, #0
   2b4d4:	ldr	ip, [fp, #8]
   2b4d8:	ldr	r4, [ip, lr, lsl #2]
   2b4dc:	add	lr, lr, #1
   2b4e0:	cmp	r4, #0
   2b4e4:	bne	2b4d8 <__assert_fail@plt+0x188e8>
   2b4e8:	sub	r4, lr, #1
   2b4ec:	str	ip, [sp]
   2b4f0:	str	r4, [sp, #4]
   2b4f4:	bl	2b1a0 <__assert_fail@plt+0x185b0>
   2b4f8:	sub	sp, fp, #8
   2b4fc:	pop	{r4, sl, fp, pc}
   2b500:	push	{r4, r5, fp, lr}
   2b504:	add	fp, sp, #8
   2b508:	sub	sp, sp, #48	; 0x30
   2b50c:	mov	ip, #0
   2b510:	ldr	r4, [fp, #8]
   2b514:	add	lr, sp, #8
   2b518:	ldr	r5, [r4]
   2b51c:	str	r5, [lr, ip, lsl #2]
   2b520:	cmp	r5, #0
   2b524:	beq	2b53c <__assert_fail@plt+0x1894c>
   2b528:	add	ip, ip, #1
   2b52c:	add	r4, r4, #4
   2b530:	cmp	ip, #10
   2b534:	bne	2b518 <__assert_fail@plt+0x18928>
   2b538:	mov	ip, #10
   2b53c:	str	lr, [sp]
   2b540:	str	ip, [sp, #4]
   2b544:	bl	2b1a0 <__assert_fail@plt+0x185b0>
   2b548:	sub	sp, fp, #8
   2b54c:	pop	{r4, r5, fp, pc}
   2b550:	push	{fp, lr}
   2b554:	mov	fp, sp
   2b558:	sub	sp, sp, #8
   2b55c:	add	ip, fp, #8
   2b560:	str	ip, [sp, #4]
   2b564:	str	ip, [sp]
   2b568:	bl	2b500 <__assert_fail@plt+0x18910>
   2b56c:	mov	sp, fp
   2b570:	pop	{fp, pc}
   2b574:	push	{fp, lr}
   2b578:	mov	fp, sp
   2b57c:	movw	r0, #21876	; 0x5574
   2b580:	movt	r0, #5
   2b584:	ldr	r1, [r0]
   2b588:	mov	r0, #10
   2b58c:	bl	12a70 <fputc@plt>
   2b590:	movw	r1, #18203	; 0x471b
   2b594:	movt	r1, #4
   2b598:	mov	r0, #0
   2b59c:	mov	r2, #5
   2b5a0:	bl	12674 <dcgettext@plt>
   2b5a4:	movw	r1, #13568	; 0x3500
   2b5a8:	movt	r1, #4
   2b5ac:	bl	12524 <printf@plt>
   2b5b0:	movw	r1, #18223	; 0x472f
   2b5b4:	movt	r1, #4
   2b5b8:	mov	r0, #0
   2b5bc:	mov	r2, #5
   2b5c0:	bl	12674 <dcgettext@plt>
   2b5c4:	movw	r1, #12721	; 0x31b1
   2b5c8:	movt	r1, #4
   2b5cc:	movw	r2, #13482	; 0x34aa
   2b5d0:	movt	r2, #4
   2b5d4:	bl	12524 <printf@plt>
   2b5d8:	movw	r1, #18243	; 0x4743
   2b5dc:	movt	r1, #4
   2b5e0:	mov	r0, #0
   2b5e4:	mov	r2, #5
   2b5e8:	bl	12674 <dcgettext@plt>
   2b5ec:	movw	r1, #18282	; 0x476a
   2b5f0:	movt	r1, #4
   2b5f4:	pop	{fp, lr}
   2b5f8:	b	12524 <printf@plt>
   2b5fc:	b	2b600 <__assert_fail@plt+0x18a10>
   2b600:	push	{r4, r5, r6, sl, fp, lr}
   2b604:	add	fp, sp, #16
   2b608:	mov	r4, r2
   2b60c:	mov	r5, r1
   2b610:	mov	r6, r0
   2b614:	bl	2f8e8 <__assert_fail@plt+0x1ccf8>
   2b618:	cmp	r0, #0
   2b61c:	popne	{r4, r5, r6, sl, fp, pc}
   2b620:	cmp	r6, #0
   2b624:	beq	2b638 <__assert_fail@plt+0x18a48>
   2b628:	cmp	r5, #0
   2b62c:	cmpne	r4, #0
   2b630:	bne	2b638 <__assert_fail@plt+0x18a48>
   2b634:	pop	{r4, r5, r6, sl, fp, pc}
   2b638:	bl	2b9c4 <__assert_fail@plt+0x18dd4>
   2b63c:	push	{fp, lr}
   2b640:	mov	fp, sp
   2b644:	bl	2ed88 <__assert_fail@plt+0x1c198>
   2b648:	pop	{fp, lr}
   2b64c:	b	2b650 <__assert_fail@plt+0x18a60>
   2b650:	cmp	r0, #0
   2b654:	bxne	lr
   2b658:	push	{fp, lr}
   2b65c:	mov	fp, sp
   2b660:	bl	2b9c4 <__assert_fail@plt+0x18dd4>
   2b664:	push	{fp, lr}
   2b668:	mov	fp, sp
   2b66c:	bl	3dfdc <__assert_fail@plt+0x2b3ec>
   2b670:	pop	{fp, lr}
   2b674:	b	2b650 <__assert_fail@plt+0x18a60>
   2b678:	b	2b63c <__assert_fail@plt+0x18a4c>
   2b67c:	push	{r4, r5, fp, lr}
   2b680:	add	fp, sp, #8
   2b684:	mov	r4, r1
   2b688:	mov	r5, r0
   2b68c:	bl	2f894 <__assert_fail@plt+0x1cca4>
   2b690:	cmp	r0, #0
   2b694:	popne	{r4, r5, fp, pc}
   2b698:	cmp	r5, #0
   2b69c:	beq	2b6ac <__assert_fail@plt+0x18abc>
   2b6a0:	cmp	r4, #0
   2b6a4:	bne	2b6ac <__assert_fail@plt+0x18abc>
   2b6a8:	pop	{r4, r5, fp, pc}
   2b6ac:	bl	2b9c4 <__assert_fail@plt+0x18dd4>
   2b6b0:	push	{fp, lr}
   2b6b4:	mov	fp, sp
   2b6b8:	bl	3dfe0 <__assert_fail@plt+0x2b3f0>
   2b6bc:	pop	{fp, lr}
   2b6c0:	b	2b650 <__assert_fail@plt+0x18a60>
   2b6c4:	push	{fp, lr}
   2b6c8:	mov	fp, sp
   2b6cc:	bl	3dff0 <__assert_fail@plt+0x2b400>
   2b6d0:	pop	{fp, lr}
   2b6d4:	b	2b650 <__assert_fail@plt+0x18a60>
   2b6d8:	mov	r2, r1
   2b6dc:	mov	r1, r0
   2b6e0:	mov	r0, #0
   2b6e4:	b	2b600 <__assert_fail@plt+0x18a10>
   2b6e8:	mov	r2, r1
   2b6ec:	mov	r1, r0
   2b6f0:	mov	r0, #0
   2b6f4:	b	2b6c4 <__assert_fail@plt+0x18ad4>
   2b6f8:	mov	r2, #1
   2b6fc:	b	2b700 <__assert_fail@plt+0x18b10>
   2b700:	push	{r4, r5, fp, lr}
   2b704:	add	fp, sp, #8
   2b708:	mov	r4, r1
   2b70c:	ldr	r5, [r1]
   2b710:	cmp	r0, #0
   2b714:	beq	2b72c <__assert_fail@plt+0x18b3c>
   2b718:	mov	r1, #1
   2b71c:	add	r1, r1, r5, lsr #1
   2b720:	adds	r5, r5, r1
   2b724:	bcc	2b744 <__assert_fail@plt+0x18b54>
   2b728:	bl	2b9c4 <__assert_fail@plt+0x18dd4>
   2b72c:	cmp	r5, #0
   2b730:	bne	2b744 <__assert_fail@plt+0x18b54>
   2b734:	mov	r1, #64	; 0x40
   2b738:	udiv	r5, r1, r2
   2b73c:	cmp	r2, #64	; 0x40
   2b740:	addhi	r5, r5, #1
   2b744:	mov	r1, r5
   2b748:	bl	2b600 <__assert_fail@plt+0x18a10>
   2b74c:	str	r5, [r4]
   2b750:	pop	{r4, r5, fp, pc}
   2b754:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2b758:	add	fp, sp, #24
   2b75c:	mov	r8, r1
   2b760:	ldr	r6, [r1]
   2b764:	add	r1, r6, r6, asr #1
   2b768:	cmp	r1, r6
   2b76c:	mvnvs	r1, #-2147483648	; 0x80000000
   2b770:	cmp	r1, r3
   2b774:	mov	r5, r1
   2b778:	movgt	r5, r3
   2b77c:	cmn	r3, #1
   2b780:	movle	r5, r1
   2b784:	ldr	r4, [fp, #8]
   2b788:	cmn	r4, #1
   2b78c:	ble	2b7b4 <__assert_fail@plt+0x18bc4>
   2b790:	cmp	r4, #0
   2b794:	beq	2b808 <__assert_fail@plt+0x18c18>
   2b798:	cmn	r5, #1
   2b79c:	ble	2b7dc <__assert_fail@plt+0x18bec>
   2b7a0:	mvn	r7, #-2147483648	; 0x80000000
   2b7a4:	udiv	r1, r7, r4
   2b7a8:	cmp	r1, r5
   2b7ac:	bge	2b808 <__assert_fail@plt+0x18c18>
   2b7b0:	b	2b818 <__assert_fail@plt+0x18c28>
   2b7b4:	cmn	r5, #1
   2b7b8:	ble	2b7f8 <__assert_fail@plt+0x18c08>
   2b7bc:	cmn	r4, #1
   2b7c0:	beq	2b808 <__assert_fail@plt+0x18c18>
   2b7c4:	mov	r1, #-2147483648	; 0x80000000
   2b7c8:	sdiv	r1, r1, r4
   2b7cc:	mvn	r7, #-2147483648	; 0x80000000
   2b7d0:	cmp	r1, r5
   2b7d4:	bge	2b808 <__assert_fail@plt+0x18c18>
   2b7d8:	b	2b818 <__assert_fail@plt+0x18c28>
   2b7dc:	beq	2b808 <__assert_fail@plt+0x18c18>
   2b7e0:	mov	r1, #-2147483648	; 0x80000000
   2b7e4:	sdiv	r1, r1, r5
   2b7e8:	mvn	r7, #-2147483648	; 0x80000000
   2b7ec:	cmp	r1, r4
   2b7f0:	bge	2b808 <__assert_fail@plt+0x18c18>
   2b7f4:	b	2b818 <__assert_fail@plt+0x18c28>
   2b7f8:	mvn	r7, #-2147483648	; 0x80000000
   2b7fc:	sdiv	r1, r7, r4
   2b800:	cmp	r5, r1
   2b804:	blt	2b818 <__assert_fail@plt+0x18c28>
   2b808:	mul	r1, r5, r4
   2b80c:	mov	r7, #64	; 0x40
   2b810:	cmp	r1, #63	; 0x3f
   2b814:	bgt	2b820 <__assert_fail@plt+0x18c30>
   2b818:	sdiv	r5, r7, r4
   2b81c:	mul	r1, r5, r4
   2b820:	cmp	r0, #0
   2b824:	moveq	r7, #0
   2b828:	streq	r7, [r8]
   2b82c:	sub	r7, r5, r6
   2b830:	cmp	r7, r2
   2b834:	bge	2b8e0 <__assert_fail@plt+0x18cf0>
   2b838:	add	r5, r6, r2
   2b83c:	mov	r1, #0
   2b840:	cmp	r5, r3
   2b844:	mov	r2, #0
   2b848:	movwgt	r2, #1
   2b84c:	cmn	r3, #1
   2b850:	movwgt	r1, #1
   2b854:	cmp	r5, r6
   2b858:	bvs	2b8c8 <__assert_fail@plt+0x18cd8>
   2b85c:	ands	r1, r1, r2
   2b860:	bne	2b8c8 <__assert_fail@plt+0x18cd8>
   2b864:	cmn	r4, #1
   2b868:	ble	2b890 <__assert_fail@plt+0x18ca0>
   2b86c:	cmp	r4, #0
   2b870:	beq	2b8dc <__assert_fail@plt+0x18cec>
   2b874:	cmn	r5, #1
   2b878:	ble	2b8b4 <__assert_fail@plt+0x18cc4>
   2b87c:	mvn	r1, #-2147483648	; 0x80000000
   2b880:	udiv	r1, r1, r4
   2b884:	cmp	r1, r5
   2b888:	bge	2b8dc <__assert_fail@plt+0x18cec>
   2b88c:	b	2b8c8 <__assert_fail@plt+0x18cd8>
   2b890:	cmn	r5, #1
   2b894:	ble	2b8cc <__assert_fail@plt+0x18cdc>
   2b898:	cmn	r4, #1
   2b89c:	beq	2b8dc <__assert_fail@plt+0x18cec>
   2b8a0:	mov	r1, #-2147483648	; 0x80000000
   2b8a4:	sdiv	r1, r1, r4
   2b8a8:	cmp	r1, r5
   2b8ac:	bge	2b8dc <__assert_fail@plt+0x18cec>
   2b8b0:	b	2b8c8 <__assert_fail@plt+0x18cd8>
   2b8b4:	beq	2b8dc <__assert_fail@plt+0x18cec>
   2b8b8:	mov	r1, #-2147483648	; 0x80000000
   2b8bc:	sdiv	r1, r1, r5
   2b8c0:	cmp	r1, r4
   2b8c4:	bge	2b8dc <__assert_fail@plt+0x18cec>
   2b8c8:	bl	2b9c4 <__assert_fail@plt+0x18dd4>
   2b8cc:	mvn	r1, #-2147483648	; 0x80000000
   2b8d0:	sdiv	r1, r1, r4
   2b8d4:	cmp	r5, r1
   2b8d8:	blt	2b8c8 <__assert_fail@plt+0x18cd8>
   2b8dc:	mul	r1, r5, r4
   2b8e0:	bl	2b67c <__assert_fail@plt+0x18a8c>
   2b8e4:	str	r5, [r8]
   2b8e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2b8ec:	mov	r1, #1
   2b8f0:	b	2b8f4 <__assert_fail@plt+0x18d04>
   2b8f4:	push	{fp, lr}
   2b8f8:	mov	fp, sp
   2b8fc:	bl	2c4f4 <__assert_fail@plt+0x19904>
   2b900:	pop	{fp, lr}
   2b904:	b	2b650 <__assert_fail@plt+0x18a60>
   2b908:	mov	r1, #1
   2b90c:	b	2b910 <__assert_fail@plt+0x18d20>
   2b910:	push	{fp, lr}
   2b914:	mov	fp, sp
   2b918:	bl	3dfec <__assert_fail@plt+0x2b3fc>
   2b91c:	pop	{fp, lr}
   2b920:	b	2b650 <__assert_fail@plt+0x18a60>
   2b924:	push	{r4, r5, fp, lr}
   2b928:	add	fp, sp, #8
   2b92c:	mov	r4, r1
   2b930:	mov	r5, r0
   2b934:	mov	r0, r1
   2b938:	bl	2b63c <__assert_fail@plt+0x18a4c>
   2b93c:	mov	r1, r5
   2b940:	mov	r2, r4
   2b944:	pop	{r4, r5, fp, lr}
   2b948:	b	125f0 <memcpy@plt>
   2b94c:	push	{r4, r5, fp, lr}
   2b950:	add	fp, sp, #8
   2b954:	mov	r4, r1
   2b958:	mov	r5, r0
   2b95c:	mov	r0, r1
   2b960:	bl	2b664 <__assert_fail@plt+0x18a74>
   2b964:	mov	r1, r5
   2b968:	mov	r2, r4
   2b96c:	pop	{r4, r5, fp, lr}
   2b970:	b	125f0 <memcpy@plt>
   2b974:	push	{r4, r5, fp, lr}
   2b978:	add	fp, sp, #8
   2b97c:	mov	r4, r1
   2b980:	mov	r5, r0
   2b984:	add	r0, r1, #1
   2b988:	bl	2b664 <__assert_fail@plt+0x18a74>
   2b98c:	mov	r1, #0
   2b990:	strb	r1, [r0, r4]
   2b994:	mov	r1, r5
   2b998:	mov	r2, r4
   2b99c:	pop	{r4, r5, fp, lr}
   2b9a0:	b	125f0 <memcpy@plt>
   2b9a4:	push	{r4, sl, fp, lr}
   2b9a8:	add	fp, sp, #8
   2b9ac:	mov	r4, r0
   2b9b0:	bl	128c0 <strlen@plt>
   2b9b4:	add	r1, r0, #1
   2b9b8:	mov	r0, r4
   2b9bc:	pop	{r4, sl, fp, lr}
   2b9c0:	b	2b924 <__assert_fail@plt+0x18d34>
   2b9c4:	push	{fp, lr}
   2b9c8:	mov	fp, sp
   2b9cc:	movw	r0, #21768	; 0x5508
   2b9d0:	movt	r0, #5
   2b9d4:	ldr	r4, [r0]
   2b9d8:	movw	r1, #18358	; 0x47b6
   2b9dc:	movt	r1, #4
   2b9e0:	mov	r0, #0
   2b9e4:	mov	r2, #5
   2b9e8:	bl	12674 <dcgettext@plt>
   2b9ec:	mov	r3, r0
   2b9f0:	movw	r2, #19695	; 0x4cef
   2b9f4:	movt	r2, #4
   2b9f8:	mov	r0, r4
   2b9fc:	mov	r1, #0
   2ba00:	bl	127b8 <error@plt>
   2ba04:	bl	12b9c <abort@plt>
   2ba08:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2ba0c:	add	fp, sp, #24
   2ba10:	sub	sp, sp, #8
   2ba14:	mov	r4, r3
   2ba18:	mov	r8, r2
   2ba1c:	mov	r9, r1
   2ba20:	mov	r5, r0
   2ba24:	bl	12908 <__errno_location@plt>
   2ba28:	mov	r7, r0
   2ba2c:	mov	r6, #0
   2ba30:	str	r6, [r0]
   2ba34:	add	r1, sp, #4
   2ba38:	mov	r0, r5
   2ba3c:	blx	r4
   2ba40:	ldr	r0, [sp, #4]
   2ba44:	cmp	r0, r5
   2ba48:	beq	2ba88 <__assert_fail@plt+0x18e98>
   2ba4c:	cmp	r9, #0
   2ba50:	beq	2ba70 <__assert_fail@plt+0x18e80>
   2ba54:	vcmp.f64	d0, #0.0
   2ba58:	vmrs	APSR_nzcv, fpscr
   2ba5c:	beq	2ba84 <__assert_fail@plt+0x18e94>
   2ba60:	ldr	r0, [r7]
   2ba64:	subs	r6, r0, #34	; 0x22
   2ba68:	movwne	r6, #1
   2ba6c:	b	2ba88 <__assert_fail@plt+0x18e98>
   2ba70:	ldrb	r0, [r0]
   2ba74:	mov	r6, #0
   2ba78:	cmp	r0, #0
   2ba7c:	bne	2ba94 <__assert_fail@plt+0x18ea4>
   2ba80:	b	2ba54 <__assert_fail@plt+0x18e64>
   2ba84:	mov	r6, #1
   2ba88:	cmp	r9, #0
   2ba8c:	ldrne	r0, [sp, #4]
   2ba90:	strne	r0, [r9]
   2ba94:	vstr	d0, [r8]
   2ba98:	mov	r0, r6
   2ba9c:	sub	sp, fp, #24
   2baa0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2baa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2baa8:	add	fp, sp, #28
   2baac:	sub	sp, sp, #12
   2bab0:	cmp	r2, #37	; 0x25
   2bab4:	bcs	2bed8 <__assert_fail@plt+0x192e8>
   2bab8:	mov	r7, r2
   2babc:	mov	r6, r1
   2bac0:	mov	r4, r0
   2bac4:	str	r3, [sp]
   2bac8:	ldr	sl, [fp, #8]
   2bacc:	bl	12908 <__errno_location@plt>
   2bad0:	mov	r5, r0
   2bad4:	mov	r0, #0
   2bad8:	str	r0, [r5]
   2badc:	bl	1286c <__ctype_b_loc@plt>
   2bae0:	ldr	r1, [r0]
   2bae4:	mov	r2, r4
   2bae8:	ldrb	r0, [r2], #1
   2baec:	add	r3, r1, r0, lsl #1
   2baf0:	ldrb	r3, [r3, #1]
   2baf4:	tst	r3, #32
   2baf8:	bne	2bae8 <__assert_fail@plt+0x18ef8>
   2bafc:	add	r9, sp, #8
   2bb00:	cmp	r6, #0
   2bb04:	movne	r9, r6
   2bb08:	mov	r8, #4
   2bb0c:	cmp	r0, #45	; 0x2d
   2bb10:	beq	2becc <__assert_fail@plt+0x192dc>
   2bb14:	mov	r0, r4
   2bb18:	mov	r1, r9
   2bb1c:	mov	r2, r7
   2bb20:	bl	128b4 <strtoul@plt>
   2bb24:	str	r0, [sp, #4]
   2bb28:	ldr	r7, [r9]
   2bb2c:	cmp	r7, r4
   2bb30:	beq	2bb58 <__assert_fail@plt+0x18f68>
   2bb34:	ldr	r0, [r5]
   2bb38:	cmp	r0, #0
   2bb3c:	beq	2bb8c <__assert_fail@plt+0x18f9c>
   2bb40:	cmp	r0, #34	; 0x22
   2bb44:	bne	2becc <__assert_fail@plt+0x192dc>
   2bb48:	mov	r8, #1
   2bb4c:	cmp	sl, #0
   2bb50:	bne	2bb98 <__assert_fail@plt+0x18fa8>
   2bb54:	b	2bec0 <__assert_fail@plt+0x192d0>
   2bb58:	cmp	sl, #0
   2bb5c:	beq	2becc <__assert_fail@plt+0x192dc>
   2bb60:	ldrb	r1, [r7]
   2bb64:	cmp	r1, #0
   2bb68:	beq	2becc <__assert_fail@plt+0x192dc>
   2bb6c:	mov	r0, sl
   2bb70:	bl	128cc <strchr@plt>
   2bb74:	cmp	r0, #0
   2bb78:	beq	2becc <__assert_fail@plt+0x192dc>
   2bb7c:	mov	r0, #1
   2bb80:	str	r0, [sp, #4]
   2bb84:	mov	r8, #0
   2bb88:	b	2bb98 <__assert_fail@plt+0x18fa8>
   2bb8c:	mov	r8, r0
   2bb90:	cmp	sl, #0
   2bb94:	beq	2bec0 <__assert_fail@plt+0x192d0>
   2bb98:	ldrb	r4, [r7]
   2bb9c:	cmp	r4, #0
   2bba0:	beq	2bec0 <__assert_fail@plt+0x192d0>
   2bba4:	mov	r0, sl
   2bba8:	mov	r1, r4
   2bbac:	bl	128cc <strchr@plt>
   2bbb0:	cmp	r0, #0
   2bbb4:	beq	2bde0 <__assert_fail@plt+0x191f0>
   2bbb8:	sub	r0, r4, #69	; 0x45
   2bbbc:	mov	r6, #1
   2bbc0:	mov	r5, #1024	; 0x400
   2bbc4:	cmp	r0, #47	; 0x2f
   2bbc8:	bhi	2bcdc <__assert_fail@plt+0x190ec>
   2bbcc:	add	r1, pc, #0
   2bbd0:	ldr	pc, [r1, r0, lsl #2]
   2bbd4:	muleq	r2, r4, ip
   2bbd8:	ldrdeq	fp, [r2], -ip
   2bbdc:	muleq	r2, r4, ip
   2bbe0:	ldrdeq	fp, [r2], -ip
   2bbe4:	ldrdeq	fp, [r2], -ip
   2bbe8:	ldrdeq	fp, [r2], -ip
   2bbec:	muleq	r2, r4, ip
   2bbf0:	ldrdeq	fp, [r2], -ip
   2bbf4:	muleq	r2, r4, ip
   2bbf8:	ldrdeq	fp, [r2], -ip
   2bbfc:	ldrdeq	fp, [r2], -ip
   2bc00:	muleq	r2, r4, ip
   2bc04:	ldrdeq	fp, [r2], -ip
   2bc08:	ldrdeq	fp, [r2], -ip
   2bc0c:	ldrdeq	fp, [r2], -ip
   2bc10:	muleq	r2, r4, ip
   2bc14:	ldrdeq	fp, [r2], -ip
   2bc18:	ldrdeq	fp, [r2], -ip
   2bc1c:	ldrdeq	fp, [r2], -ip
   2bc20:	ldrdeq	fp, [r2], -ip
   2bc24:	muleq	r2, r4, ip
   2bc28:	muleq	r2, r4, ip
   2bc2c:	ldrdeq	fp, [r2], -ip
   2bc30:	ldrdeq	fp, [r2], -ip
   2bc34:	ldrdeq	fp, [r2], -ip
   2bc38:	ldrdeq	fp, [r2], -ip
   2bc3c:	ldrdeq	fp, [r2], -ip
   2bc40:	ldrdeq	fp, [r2], -ip
   2bc44:	ldrdeq	fp, [r2], -ip
   2bc48:	ldrdeq	fp, [r2], -ip
   2bc4c:	ldrdeq	fp, [r2], -ip
   2bc50:	ldrdeq	fp, [r2], -ip
   2bc54:	ldrdeq	fp, [r2], -ip
   2bc58:	ldrdeq	fp, [r2], -ip
   2bc5c:	muleq	r2, r4, ip
   2bc60:	ldrdeq	fp, [r2], -ip
   2bc64:	ldrdeq	fp, [r2], -ip
   2bc68:	ldrdeq	fp, [r2], -ip
   2bc6c:	muleq	r2, r4, ip
   2bc70:	ldrdeq	fp, [r2], -ip
   2bc74:	muleq	r2, r4, ip
   2bc78:	ldrdeq	fp, [r2], -ip
   2bc7c:	ldrdeq	fp, [r2], -ip
   2bc80:	ldrdeq	fp, [r2], -ip
   2bc84:	ldrdeq	fp, [r2], -ip
   2bc88:	ldrdeq	fp, [r2], -ip
   2bc8c:	ldrdeq	fp, [r2], -ip
   2bc90:	muleq	r2, r4, ip
   2bc94:	mov	r0, sl
   2bc98:	mov	r1, #48	; 0x30
   2bc9c:	bl	128cc <strchr@plt>
   2bca0:	cmp	r0, #0
   2bca4:	beq	2bcdc <__assert_fail@plt+0x190ec>
   2bca8:	ldrb	r0, [r7, #1]
   2bcac:	cmp	r0, #66	; 0x42
   2bcb0:	cmpne	r0, #68	; 0x44
   2bcb4:	bne	2bcc4 <__assert_fail@plt+0x190d4>
   2bcb8:	mov	r6, #2
   2bcbc:	mov	r5, #1000	; 0x3e8
   2bcc0:	b	2bcdc <__assert_fail@plt+0x190ec>
   2bcc4:	cmp	r0, #105	; 0x69
   2bcc8:	bne	2bcdc <__assert_fail@plt+0x190ec>
   2bccc:	ldrb	r0, [r7, #2]
   2bcd0:	mov	r6, #1
   2bcd4:	cmp	r0, #66	; 0x42
   2bcd8:	movweq	r6, #3
   2bcdc:	sub	r1, r4, #66	; 0x42
   2bce0:	cmp	r1, #53	; 0x35
   2bce4:	bhi	2bde0 <__assert_fail@plt+0x191f0>
   2bce8:	mov	r0, #0
   2bcec:	add	r2, pc, #0
   2bcf0:	ldr	pc, [r2, r1, lsl #2]
   2bcf4:	andeq	fp, r2, r4, asr #28
   2bcf8:	andeq	fp, r2, r0, ror #27
   2bcfc:	andeq	fp, r2, r0, ror #27
   2bd00:	andeq	fp, r2, r0, asr lr
   2bd04:	andeq	fp, r2, r0, ror #27
   2bd08:	andeq	fp, r2, ip, asr #27
   2bd0c:	andeq	fp, r2, r0, ror #27
   2bd10:	andeq	fp, r2, r0, ror #27
   2bd14:	andeq	fp, r2, r0, ror #27
   2bd18:	strdeq	fp, [r2], -r4
   2bd1c:	andeq	fp, r2, r0, ror #27
   2bd20:	andeq	fp, r2, r8, lsl #28
   2bd24:	andeq	fp, r2, r0, ror #27
   2bd28:	andeq	fp, r2, r0, ror #27
   2bd2c:	andeq	fp, r2, r4, ror #28
   2bd30:	andeq	fp, r2, r0, ror #27
   2bd34:	andeq	fp, r2, r0, ror #27
   2bd38:	andeq	fp, r2, r0, ror #27
   2bd3c:	andeq	fp, r2, ip, lsl lr
   2bd40:	andeq	fp, r2, r0, ror #27
   2bd44:	andeq	fp, r2, r0, ror #27
   2bd48:	andeq	fp, r2, r0, ror #27
   2bd4c:	andeq	fp, r2, r0, ror #27
   2bd50:	andeq	fp, r2, r8, ror lr
   2bd54:	andeq	fp, r2, r0, lsr lr
   2bd58:	andeq	fp, r2, r0, ror #27
   2bd5c:	andeq	fp, r2, r0, ror #27
   2bd60:	andeq	fp, r2, r0, ror #27
   2bd64:	andeq	fp, r2, r0, ror #27
   2bd68:	andeq	fp, r2, r0, ror #27
   2bd6c:	andeq	fp, r2, r0, ror #27
   2bd70:	andeq	fp, r2, r0, ror #27
   2bd74:	andeq	fp, r2, ip, lsl #29
   2bd78:	andeq	fp, r2, r4, lsr #29
   2bd7c:	andeq	fp, r2, r0, ror #27
   2bd80:	andeq	fp, r2, r0, ror #27
   2bd84:	andeq	fp, r2, r0, ror #27
   2bd88:	andeq	fp, r2, ip, asr #27
   2bd8c:	andeq	fp, r2, r0, ror #27
   2bd90:	andeq	fp, r2, r0, ror #27
   2bd94:	andeq	fp, r2, r0, ror #27
   2bd98:	strdeq	fp, [r2], -r4
   2bd9c:	andeq	fp, r2, r0, ror #27
   2bda0:	andeq	fp, r2, r8, lsl #28
   2bda4:	andeq	fp, r2, r0, ror #27
   2bda8:	andeq	fp, r2, r0, ror #27
   2bdac:	andeq	fp, r2, r0, ror #27
   2bdb0:	andeq	fp, r2, r0, ror #27
   2bdb4:	andeq	fp, r2, r0, ror #27
   2bdb8:	andeq	fp, r2, r0, ror #27
   2bdbc:	andeq	fp, r2, ip, lsl lr
   2bdc0:	andeq	fp, r2, r0, ror #27
   2bdc4:	andeq	fp, r2, r0, ror #27
   2bdc8:	muleq	r2, r8, lr
   2bdcc:	add	r0, sp, #4
   2bdd0:	mov	r1, r5
   2bdd4:	mov	r2, #3
   2bdd8:	bl	2bf20 <__assert_fail@plt+0x19330>
   2bddc:	b	2bea4 <__assert_fail@plt+0x192b4>
   2bde0:	ldr	r0, [sp, #4]
   2bde4:	ldr	r1, [sp]
   2bde8:	str	r0, [r1]
   2bdec:	orr	r8, r8, #2
   2bdf0:	b	2becc <__assert_fail@plt+0x192dc>
   2bdf4:	add	r0, sp, #4
   2bdf8:	mov	r1, r5
   2bdfc:	mov	r2, #1
   2be00:	bl	2bf20 <__assert_fail@plt+0x19330>
   2be04:	b	2bea4 <__assert_fail@plt+0x192b4>
   2be08:	add	r0, sp, #4
   2be0c:	mov	r1, r5
   2be10:	mov	r2, #2
   2be14:	bl	2bf20 <__assert_fail@plt+0x19330>
   2be18:	b	2bea4 <__assert_fail@plt+0x192b4>
   2be1c:	add	r0, sp, #4
   2be20:	mov	r1, r5
   2be24:	mov	r2, #4
   2be28:	bl	2bf20 <__assert_fail@plt+0x19330>
   2be2c:	b	2bea4 <__assert_fail@plt+0x192b4>
   2be30:	add	r0, sp, #4
   2be34:	mov	r1, r5
   2be38:	mov	r2, #7
   2be3c:	bl	2bf20 <__assert_fail@plt+0x19330>
   2be40:	b	2bea4 <__assert_fail@plt+0x192b4>
   2be44:	add	r0, sp, #4
   2be48:	mov	r1, #1024	; 0x400
   2be4c:	b	2bea0 <__assert_fail@plt+0x192b0>
   2be50:	add	r0, sp, #4
   2be54:	mov	r1, r5
   2be58:	mov	r2, #6
   2be5c:	bl	2bf20 <__assert_fail@plt+0x19330>
   2be60:	b	2bea4 <__assert_fail@plt+0x192b4>
   2be64:	add	r0, sp, #4
   2be68:	mov	r1, r5
   2be6c:	mov	r2, #5
   2be70:	bl	2bf20 <__assert_fail@plt+0x19330>
   2be74:	b	2bea4 <__assert_fail@plt+0x192b4>
   2be78:	add	r0, sp, #4
   2be7c:	mov	r1, r5
   2be80:	mov	r2, #8
   2be84:	bl	2bf20 <__assert_fail@plt+0x19330>
   2be88:	b	2bea4 <__assert_fail@plt+0x192b4>
   2be8c:	add	r0, sp, #4
   2be90:	mov	r1, #512	; 0x200
   2be94:	b	2bea0 <__assert_fail@plt+0x192b0>
   2be98:	add	r0, sp, #4
   2be9c:	mov	r1, #2
   2bea0:	bl	2bef8 <__assert_fail@plt+0x19308>
   2bea4:	ldr	r1, [r9]
   2bea8:	add	r2, r1, r6
   2beac:	str	r2, [r9]
   2beb0:	ldrb	r1, [r1, r6]
   2beb4:	orr	r8, r0, r8
   2beb8:	cmp	r1, #0
   2bebc:	orrne	r8, r8, #2
   2bec0:	ldr	r0, [sp, #4]
   2bec4:	ldr	r1, [sp]
   2bec8:	str	r0, [r1]
   2becc:	mov	r0, r8
   2bed0:	sub	sp, fp, #28
   2bed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bed8:	movw	r0, #18375	; 0x47c7
   2bedc:	movt	r0, #4
   2bee0:	movw	r1, #18413	; 0x47ed
   2bee4:	movt	r1, #4
   2bee8:	movw	r3, #18425	; 0x47f9
   2beec:	movt	r3, #4
   2bef0:	mov	r2, #84	; 0x54
   2bef4:	bl	12bf0 <__assert_fail@plt>
   2bef8:	mvn	r2, #0
   2befc:	udiv	r2, r2, r1
   2bf00:	ldr	r3, [r0]
   2bf04:	mul	r1, r3, r1
   2bf08:	cmp	r2, r3
   2bf0c:	mvncc	r1, #0
   2bf10:	str	r1, [r0]
   2bf14:	mov	r0, #0
   2bf18:	movwcc	r0, #1
   2bf1c:	bx	lr
   2bf20:	push	{r4, r5, r6, r7, fp, lr}
   2bf24:	add	fp, sp, #16
   2bf28:	cmp	r2, #0
   2bf2c:	beq	2bf60 <__assert_fail@plt+0x19370>
   2bf30:	mov	r4, r2
   2bf34:	mov	r5, r1
   2bf38:	mov	r7, r0
   2bf3c:	mov	r6, #0
   2bf40:	mov	r0, r7
   2bf44:	mov	r1, r5
   2bf48:	bl	2bef8 <__assert_fail@plt+0x19308>
   2bf4c:	orr	r6, r0, r6
   2bf50:	subs	r4, r4, #1
   2bf54:	bne	2bf40 <__assert_fail@plt+0x19350>
   2bf58:	mov	r0, r6
   2bf5c:	pop	{r4, r5, r6, r7, fp, pc}
   2bf60:	mov	r6, #0
   2bf64:	mov	r0, r6
   2bf68:	pop	{r4, r5, r6, r7, fp, pc}
   2bf6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bf70:	add	fp, sp, #28
   2bf74:	sub	sp, sp, #20
   2bf78:	cmp	r2, #37	; 0x25
   2bf7c:	bcs	2c3b0 <__assert_fail@plt+0x197c0>
   2bf80:	mov	r5, r2
   2bf84:	mov	r6, r1
   2bf88:	mov	r4, r0
   2bf8c:	str	r3, [sp, #4]
   2bf90:	ldr	sl, [fp, #8]
   2bf94:	bl	12908 <__errno_location@plt>
   2bf98:	mov	r7, r0
   2bf9c:	mov	r0, #0
   2bfa0:	str	r0, [r7]
   2bfa4:	bl	1286c <__ctype_b_loc@plt>
   2bfa8:	ldr	r1, [r0]
   2bfac:	mov	r2, r4
   2bfb0:	ldrb	r0, [r2], #1
   2bfb4:	add	r3, r1, r0, lsl #1
   2bfb8:	ldrb	r3, [r3, #1]
   2bfbc:	tst	r3, #32
   2bfc0:	bne	2bfb0 <__assert_fail@plt+0x193c0>
   2bfc4:	add	r9, sp, #16
   2bfc8:	cmp	r6, #0
   2bfcc:	movne	r9, r6
   2bfd0:	mov	r8, #4
   2bfd4:	cmp	r0, #45	; 0x2d
   2bfd8:	beq	2c3a4 <__assert_fail@plt+0x197b4>
   2bfdc:	mov	r0, r4
   2bfe0:	mov	r1, r9
   2bfe4:	mov	r2, r5
   2bfe8:	bl	129a4 <strtoumax@plt>
   2bfec:	str	r1, [sp, #12]
   2bff0:	str	r0, [sp, #8]
   2bff4:	ldr	r6, [r9]
   2bff8:	cmp	r6, r4
   2bffc:	beq	2c024 <__assert_fail@plt+0x19434>
   2c000:	ldr	r0, [r7]
   2c004:	cmp	r0, #0
   2c008:	beq	2c05c <__assert_fail@plt+0x1946c>
   2c00c:	cmp	r0, #34	; 0x22
   2c010:	bne	2c3a4 <__assert_fail@plt+0x197b4>
   2c014:	mov	r8, #1
   2c018:	cmp	sl, #0
   2c01c:	bne	2c068 <__assert_fail@plt+0x19478>
   2c020:	b	2c394 <__assert_fail@plt+0x197a4>
   2c024:	cmp	sl, #0
   2c028:	beq	2c3a4 <__assert_fail@plt+0x197b4>
   2c02c:	ldrb	r1, [r6]
   2c030:	cmp	r1, #0
   2c034:	beq	2c3a4 <__assert_fail@plt+0x197b4>
   2c038:	mov	r0, sl
   2c03c:	bl	128cc <strchr@plt>
   2c040:	cmp	r0, #0
   2c044:	beq	2c3a4 <__assert_fail@plt+0x197b4>
   2c048:	mov	r8, #0
   2c04c:	str	r8, [sp, #12]
   2c050:	mov	r0, #1
   2c054:	str	r0, [sp, #8]
   2c058:	b	2c068 <__assert_fail@plt+0x19478>
   2c05c:	mov	r8, r0
   2c060:	cmp	sl, #0
   2c064:	beq	2c394 <__assert_fail@plt+0x197a4>
   2c068:	ldrb	r4, [r6]
   2c06c:	cmp	r4, #0
   2c070:	beq	2c394 <__assert_fail@plt+0x197a4>
   2c074:	mov	r0, sl
   2c078:	mov	r1, r4
   2c07c:	bl	128cc <strchr@plt>
   2c080:	cmp	r0, #0
   2c084:	beq	2c2b0 <__assert_fail@plt+0x196c0>
   2c088:	sub	r0, r4, #69	; 0x45
   2c08c:	mov	r7, #1
   2c090:	mov	r5, #1024	; 0x400
   2c094:	cmp	r0, #47	; 0x2f
   2c098:	bhi	2c1ac <__assert_fail@plt+0x195bc>
   2c09c:	add	r1, pc, #0
   2c0a0:	ldr	pc, [r1, r0, lsl #2]
   2c0a4:	andeq	ip, r2, r4, ror #2
   2c0a8:	andeq	ip, r2, ip, lsr #3
   2c0ac:	andeq	ip, r2, r4, ror #2
   2c0b0:	andeq	ip, r2, ip, lsr #3
   2c0b4:	andeq	ip, r2, ip, lsr #3
   2c0b8:	andeq	ip, r2, ip, lsr #3
   2c0bc:	andeq	ip, r2, r4, ror #2
   2c0c0:	andeq	ip, r2, ip, lsr #3
   2c0c4:	andeq	ip, r2, r4, ror #2
   2c0c8:	andeq	ip, r2, ip, lsr #3
   2c0cc:	andeq	ip, r2, ip, lsr #3
   2c0d0:	andeq	ip, r2, r4, ror #2
   2c0d4:	andeq	ip, r2, ip, lsr #3
   2c0d8:	andeq	ip, r2, ip, lsr #3
   2c0dc:	andeq	ip, r2, ip, lsr #3
   2c0e0:	andeq	ip, r2, r4, ror #2
   2c0e4:	andeq	ip, r2, ip, lsr #3
   2c0e8:	andeq	ip, r2, ip, lsr #3
   2c0ec:	andeq	ip, r2, ip, lsr #3
   2c0f0:	andeq	ip, r2, ip, lsr #3
   2c0f4:	andeq	ip, r2, r4, ror #2
   2c0f8:	andeq	ip, r2, r4, ror #2
   2c0fc:	andeq	ip, r2, ip, lsr #3
   2c100:	andeq	ip, r2, ip, lsr #3
   2c104:	andeq	ip, r2, ip, lsr #3
   2c108:	andeq	ip, r2, ip, lsr #3
   2c10c:	andeq	ip, r2, ip, lsr #3
   2c110:	andeq	ip, r2, ip, lsr #3
   2c114:	andeq	ip, r2, ip, lsr #3
   2c118:	andeq	ip, r2, ip, lsr #3
   2c11c:	andeq	ip, r2, ip, lsr #3
   2c120:	andeq	ip, r2, ip, lsr #3
   2c124:	andeq	ip, r2, ip, lsr #3
   2c128:	andeq	ip, r2, ip, lsr #3
   2c12c:	andeq	ip, r2, r4, ror #2
   2c130:	andeq	ip, r2, ip, lsr #3
   2c134:	andeq	ip, r2, ip, lsr #3
   2c138:	andeq	ip, r2, ip, lsr #3
   2c13c:	andeq	ip, r2, r4, ror #2
   2c140:	andeq	ip, r2, ip, lsr #3
   2c144:	andeq	ip, r2, r4, ror #2
   2c148:	andeq	ip, r2, ip, lsr #3
   2c14c:	andeq	ip, r2, ip, lsr #3
   2c150:	andeq	ip, r2, ip, lsr #3
   2c154:	andeq	ip, r2, ip, lsr #3
   2c158:	andeq	ip, r2, ip, lsr #3
   2c15c:	andeq	ip, r2, ip, lsr #3
   2c160:	andeq	ip, r2, r4, ror #2
   2c164:	mov	r0, sl
   2c168:	mov	r1, #48	; 0x30
   2c16c:	bl	128cc <strchr@plt>
   2c170:	cmp	r0, #0
   2c174:	beq	2c1ac <__assert_fail@plt+0x195bc>
   2c178:	ldrb	r0, [r6, #1]
   2c17c:	cmp	r0, #66	; 0x42
   2c180:	cmpne	r0, #68	; 0x44
   2c184:	bne	2c194 <__assert_fail@plt+0x195a4>
   2c188:	mov	r7, #2
   2c18c:	mov	r5, #1000	; 0x3e8
   2c190:	b	2c1ac <__assert_fail@plt+0x195bc>
   2c194:	cmp	r0, #105	; 0x69
   2c198:	bne	2c1ac <__assert_fail@plt+0x195bc>
   2c19c:	ldrb	r0, [r6, #2]
   2c1a0:	mov	r7, #1
   2c1a4:	cmp	r0, #66	; 0x42
   2c1a8:	movweq	r7, #3
   2c1ac:	sub	r1, r4, #66	; 0x42
   2c1b0:	cmp	r1, #53	; 0x35
   2c1b4:	bhi	2c2b0 <__assert_fail@plt+0x196c0>
   2c1b8:	mov	r0, #0
   2c1bc:	add	r2, pc, #0
   2c1c0:	ldr	pc, [r2, r1, lsl #2]
   2c1c4:	andeq	ip, r2, r8, lsl r3
   2c1c8:			; <UNDEFINED> instruction: 0x0002c2b0
   2c1cc:			; <UNDEFINED> instruction: 0x0002c2b0
   2c1d0:	andeq	ip, r2, r4, lsr #6
   2c1d4:			; <UNDEFINED> instruction: 0x0002c2b0
   2c1d8:	muleq	r2, ip, r2
   2c1dc:			; <UNDEFINED> instruction: 0x0002c2b0
   2c1e0:			; <UNDEFINED> instruction: 0x0002c2b0
   2c1e4:			; <UNDEFINED> instruction: 0x0002c2b0
   2c1e8:	andeq	ip, r2, r8, asr #5
   2c1ec:			; <UNDEFINED> instruction: 0x0002c2b0
   2c1f0:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c1f4:			; <UNDEFINED> instruction: 0x0002c2b0
   2c1f8:			; <UNDEFINED> instruction: 0x0002c2b0
   2c1fc:	andeq	ip, r2, r8, lsr r3
   2c200:			; <UNDEFINED> instruction: 0x0002c2b0
   2c204:			; <UNDEFINED> instruction: 0x0002c2b0
   2c208:			; <UNDEFINED> instruction: 0x0002c2b0
   2c20c:	strdeq	ip, [r2], -r0
   2c210:			; <UNDEFINED> instruction: 0x0002c2b0
   2c214:			; <UNDEFINED> instruction: 0x0002c2b0
   2c218:			; <UNDEFINED> instruction: 0x0002c2b0
   2c21c:			; <UNDEFINED> instruction: 0x0002c2b0
   2c220:	andeq	ip, r2, ip, asr #6
   2c224:	andeq	ip, r2, r4, lsl #6
   2c228:			; <UNDEFINED> instruction: 0x0002c2b0
   2c22c:			; <UNDEFINED> instruction: 0x0002c2b0
   2c230:			; <UNDEFINED> instruction: 0x0002c2b0
   2c234:			; <UNDEFINED> instruction: 0x0002c2b0
   2c238:			; <UNDEFINED> instruction: 0x0002c2b0
   2c23c:			; <UNDEFINED> instruction: 0x0002c2b0
   2c240:			; <UNDEFINED> instruction: 0x0002c2b0
   2c244:	andeq	ip, r2, r0, ror #6
   2c248:	andeq	ip, r2, r8, ror r3
   2c24c:			; <UNDEFINED> instruction: 0x0002c2b0
   2c250:			; <UNDEFINED> instruction: 0x0002c2b0
   2c254:			; <UNDEFINED> instruction: 0x0002c2b0
   2c258:	muleq	r2, ip, r2
   2c25c:			; <UNDEFINED> instruction: 0x0002c2b0
   2c260:			; <UNDEFINED> instruction: 0x0002c2b0
   2c264:			; <UNDEFINED> instruction: 0x0002c2b0
   2c268:	andeq	ip, r2, r8, asr #5
   2c26c:			; <UNDEFINED> instruction: 0x0002c2b0
   2c270:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c274:			; <UNDEFINED> instruction: 0x0002c2b0
   2c278:			; <UNDEFINED> instruction: 0x0002c2b0
   2c27c:			; <UNDEFINED> instruction: 0x0002c2b0
   2c280:			; <UNDEFINED> instruction: 0x0002c2b0
   2c284:			; <UNDEFINED> instruction: 0x0002c2b0
   2c288:			; <UNDEFINED> instruction: 0x0002c2b0
   2c28c:	strdeq	ip, [r2], -r0
   2c290:			; <UNDEFINED> instruction: 0x0002c2b0
   2c294:			; <UNDEFINED> instruction: 0x0002c2b0
   2c298:	andeq	ip, r2, ip, ror #6
   2c29c:	add	r0, sp, #8
   2c2a0:	mov	r1, r5
   2c2a4:	mov	r2, #3
   2c2a8:	bl	2c430 <__assert_fail@plt+0x19840>
   2c2ac:	b	2c378 <__assert_fail@plt+0x19788>
   2c2b0:	ldr	r0, [sp, #8]
   2c2b4:	ldr	r1, [sp, #12]
   2c2b8:	ldr	r2, [sp, #4]
   2c2bc:	strd	r0, [r2]
   2c2c0:	orr	r8, r8, #2
   2c2c4:	b	2c3a4 <__assert_fail@plt+0x197b4>
   2c2c8:	add	r0, sp, #8
   2c2cc:	mov	r1, r5
   2c2d0:	mov	r2, #1
   2c2d4:	bl	2c430 <__assert_fail@plt+0x19840>
   2c2d8:	b	2c378 <__assert_fail@plt+0x19788>
   2c2dc:	add	r0, sp, #8
   2c2e0:	mov	r1, r5
   2c2e4:	mov	r2, #2
   2c2e8:	bl	2c430 <__assert_fail@plt+0x19840>
   2c2ec:	b	2c378 <__assert_fail@plt+0x19788>
   2c2f0:	add	r0, sp, #8
   2c2f4:	mov	r1, r5
   2c2f8:	mov	r2, #4
   2c2fc:	bl	2c430 <__assert_fail@plt+0x19840>
   2c300:	b	2c378 <__assert_fail@plt+0x19788>
   2c304:	add	r0, sp, #8
   2c308:	mov	r1, r5
   2c30c:	mov	r2, #7
   2c310:	bl	2c430 <__assert_fail@plt+0x19840>
   2c314:	b	2c378 <__assert_fail@plt+0x19788>
   2c318:	add	r0, sp, #8
   2c31c:	mov	r1, #1024	; 0x400
   2c320:	b	2c374 <__assert_fail@plt+0x19784>
   2c324:	add	r0, sp, #8
   2c328:	mov	r1, r5
   2c32c:	mov	r2, #6
   2c330:	bl	2c430 <__assert_fail@plt+0x19840>
   2c334:	b	2c378 <__assert_fail@plt+0x19788>
   2c338:	add	r0, sp, #8
   2c33c:	mov	r1, r5
   2c340:	mov	r2, #5
   2c344:	bl	2c430 <__assert_fail@plt+0x19840>
   2c348:	b	2c378 <__assert_fail@plt+0x19788>
   2c34c:	add	r0, sp, #8
   2c350:	mov	r1, r5
   2c354:	mov	r2, #8
   2c358:	bl	2c430 <__assert_fail@plt+0x19840>
   2c35c:	b	2c378 <__assert_fail@plt+0x19788>
   2c360:	add	r0, sp, #8
   2c364:	mov	r1, #512	; 0x200
   2c368:	b	2c374 <__assert_fail@plt+0x19784>
   2c36c:	add	r0, sp, #8
   2c370:	mov	r1, #2
   2c374:	bl	2c3d0 <__assert_fail@plt+0x197e0>
   2c378:	ldr	r1, [r9]
   2c37c:	add	r2, r1, r7
   2c380:	str	r2, [r9]
   2c384:	ldrb	r1, [r1, r7]
   2c388:	orr	r8, r0, r8
   2c38c:	cmp	r1, #0
   2c390:	orrne	r8, r8, #2
   2c394:	ldr	r0, [sp, #8]
   2c398:	ldr	r1, [sp, #12]
   2c39c:	ldr	r2, [sp, #4]
   2c3a0:	strd	r0, [r2]
   2c3a4:	mov	r0, r8
   2c3a8:	sub	sp, fp, #28
   2c3ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c3b0:	movw	r0, #18375	; 0x47c7
   2c3b4:	movt	r0, #4
   2c3b8:	movw	r1, #18413	; 0x47ed
   2c3bc:	movt	r1, #4
   2c3c0:	movw	r3, #18506	; 0x484a
   2c3c4:	movt	r3, #4
   2c3c8:	mov	r2, #84	; 0x54
   2c3cc:	bl	12bf0 <__assert_fail@plt>
   2c3d0:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   2c3d4:	add	fp, sp, #24
   2c3d8:	mov	r4, r1
   2c3dc:	mov	r5, r0
   2c3e0:	asr	r6, r1, #31
   2c3e4:	mvn	r0, #0
   2c3e8:	mvn	r1, #0
   2c3ec:	mov	r2, r4
   2c3f0:	mov	r3, r6
   2c3f4:	bl	3e7d4 <__assert_fail@plt+0x2bbe4>
   2c3f8:	ldrd	r8, [r5]
   2c3fc:	mov	r2, #0
   2c400:	subs	r0, r0, r8
   2c404:	sbcs	r0, r1, r9
   2c408:	movwcc	r2, #1
   2c40c:	umull	r1, r0, r8, r4
   2c410:	cmp	r2, #0
   2c414:	mvnne	r1, #0
   2c418:	mla	r0, r8, r6, r0
   2c41c:	mla	r3, r9, r4, r0
   2c420:	mvnne	r3, #0
   2c424:	stm	r5, {r1, r3}
   2c428:	mov	r0, r2
   2c42c:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   2c430:	push	{r4, r5, r6, r7, fp, lr}
   2c434:	add	fp, sp, #16
   2c438:	cmp	r2, #0
   2c43c:	beq	2c470 <__assert_fail@plt+0x19880>
   2c440:	mov	r4, r2
   2c444:	mov	r5, r1
   2c448:	mov	r7, r0
   2c44c:	mov	r6, #0
   2c450:	mov	r0, r7
   2c454:	mov	r1, r5
   2c458:	bl	2c3d0 <__assert_fail@plt+0x197e0>
   2c45c:	orr	r6, r0, r6
   2c460:	subs	r4, r4, #1
   2c464:	bne	2c450 <__assert_fail@plt+0x19860>
   2c468:	mov	r0, r6
   2c46c:	pop	{r4, r5, r6, r7, fp, pc}
   2c470:	mov	r6, #0
   2c474:	mov	r0, r6
   2c478:	pop	{r4, r5, r6, r7, fp, pc}
   2c47c:	push	{r4, sl, fp, lr}
   2c480:	add	fp, sp, #8
   2c484:	sub	sp, sp, #8
   2c488:	mov	r4, #0
   2c48c:	str	r4, [sp, #4]
   2c490:	str	r4, [sp]
   2c494:	movw	r0, #21872	; 0x5570
   2c498:	movt	r0, #5
   2c49c:	ldr	r2, [r0]
   2c4a0:	add	r0, sp, #4
   2c4a4:	mov	r1, sp
   2c4a8:	bl	12b3c <getline@plt>
   2c4ac:	cmp	r0, #1
   2c4b0:	blt	2c4e0 <__assert_fail@plt+0x198f0>
   2c4b4:	sub	r0, r0, #1
   2c4b8:	ldr	r1, [sp, #4]
   2c4bc:	ldrb	r2, [r1, r0]
   2c4c0:	cmp	r2, #10
   2c4c4:	moveq	r2, #0
   2c4c8:	strbeq	r2, [r1, r0]
   2c4cc:	ldr	r0, [sp, #4]
   2c4d0:	bl	12a10 <rpmatch@plt>
   2c4d4:	mov	r4, #0
   2c4d8:	cmp	r0, #0
   2c4dc:	movwgt	r4, #1
   2c4e0:	ldr	r0, [sp, #4]
   2c4e4:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2c4e8:	mov	r0, r4
   2c4ec:	sub	sp, fp, #8
   2c4f0:	pop	{r4, sl, fp, pc}
   2c4f4:	clz	r2, r1
   2c4f8:	lsr	r2, r2, #5
   2c4fc:	clz	r3, r0
   2c500:	lsr	r3, r3, #5
   2c504:	orrs	r2, r3, r2
   2c508:	movwne	r1, #1
   2c50c:	movwne	r0, #1
   2c510:	cmp	r1, #0
   2c514:	beq	2c544 <__assert_fail@plt+0x19954>
   2c518:	mvn	r2, #-2147483648	; 0x80000000
   2c51c:	udiv	r2, r2, r1
   2c520:	cmp	r2, r0
   2c524:	bcs	2c544 <__assert_fail@plt+0x19954>
   2c528:	push	{fp, lr}
   2c52c:	mov	fp, sp
   2c530:	bl	12908 <__errno_location@plt>
   2c534:	mov	r1, #12
   2c538:	str	r1, [r0]
   2c53c:	mov	r0, #0
   2c540:	pop	{fp, pc}
   2c544:	b	1247c <calloc@plt>
   2c548:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c54c:	add	fp, sp, #28
   2c550:	sub	sp, sp, #4
   2c554:	mov	r5, r0
   2c558:	bl	126e0 <chdir@plt>
   2c55c:	cmp	r0, #0
   2c560:	beq	2c61c <__assert_fail@plt+0x19a2c>
   2c564:	mov	r6, r0
   2c568:	bl	12908 <__errno_location@plt>
   2c56c:	mov	r8, r0
   2c570:	ldr	r0, [r0]
   2c574:	cmp	r0, #36	; 0x24
   2c578:	bne	2c714 <__assert_fail@plt+0x19b24>
   2c57c:	mov	r0, r5
   2c580:	bl	128c0 <strlen@plt>
   2c584:	mov	r6, r0
   2c588:	mov	r0, sp
   2c58c:	bl	2c7d0 <__assert_fail@plt+0x19be0>
   2c590:	cmp	r6, #0
   2c594:	beq	2c750 <__assert_fail@plt+0x19b60>
   2c598:	mov	r0, #0
   2c59c:	cmp	r0, r6, lsr #12
   2c5a0:	beq	2c770 <__assert_fail@plt+0x19b80>
   2c5a4:	movw	r1, #62826	; 0xf56a
   2c5a8:	movt	r1, #3
   2c5ac:	mov	r0, r5
   2c5b0:	bl	12be4 <strspn@plt>
   2c5b4:	cmp	r0, #0
   2c5b8:	mov	r7, r5
   2c5bc:	beq	2c640 <__assert_fail@plt+0x19a50>
   2c5c0:	mov	r4, r0
   2c5c4:	cmp	r0, #2
   2c5c8:	bne	2c624 <__assert_fail@plt+0x19a34>
   2c5cc:	add	r0, r5, #3
   2c5d0:	sub	r2, r6, #3
   2c5d4:	mov	r7, #47	; 0x2f
   2c5d8:	mov	r1, #47	; 0x2f
   2c5dc:	bl	129b0 <memchr@plt>
   2c5e0:	cmp	r0, #0
   2c5e4:	beq	2c708 <__assert_fail@plt+0x19b18>
   2c5e8:	mov	r4, r0
   2c5ec:	mov	r0, #0
   2c5f0:	strb	r0, [r4]
   2c5f4:	mov	r0, sp
   2c5f8:	mov	r1, r5
   2c5fc:	bl	2c7dc <__assert_fail@plt+0x19bec>
   2c600:	strb	r7, [r4]
   2c604:	cmp	r0, #0
   2c608:	bne	2c6f4 <__assert_fail@plt+0x19b04>
   2c60c:	add	r0, r4, #1
   2c610:	bl	2c81c <__assert_fail@plt+0x19c2c>
   2c614:	mov	r7, r0
   2c618:	b	2c640 <__assert_fail@plt+0x19a50>
   2c61c:	mov	r6, #0
   2c620:	b	2c714 <__assert_fail@plt+0x19b24>
   2c624:	mov	r0, sp
   2c628:	movw	r1, #62826	; 0xf56a
   2c62c:	movt	r1, #3
   2c630:	bl	2c7dc <__assert_fail@plt+0x19bec>
   2c634:	cmp	r0, #0
   2c638:	bne	2c6f4 <__assert_fail@plt+0x19b04>
   2c63c:	add	r7, r5, r4
   2c640:	ldrb	r0, [r7]
   2c644:	cmp	r0, #47	; 0x2f
   2c648:	beq	2c790 <__assert_fail@plt+0x19ba0>
   2c64c:	add	r4, r5, r6
   2c650:	cmp	r7, r4
   2c654:	bhi	2c7b0 <__assert_fail@plt+0x19bc0>
   2c658:	sub	r0, r4, r7
   2c65c:	cmp	r0, #4096	; 0x1000
   2c660:	blt	2c6c8 <__assert_fail@plt+0x19ad8>
   2c664:	mov	r9, #47	; 0x2f
   2c668:	mov	sl, #0
   2c66c:	mov	r5, sp
   2c670:	mov	r0, r7
   2c674:	mov	r1, #47	; 0x2f
   2c678:	mov	r2, #4096	; 0x1000
   2c67c:	bl	128f0 <memrchr@plt>
   2c680:	cmp	r0, #0
   2c684:	beq	2c708 <__assert_fail@plt+0x19b18>
   2c688:	mov	r6, r0
   2c68c:	strb	sl, [r0], -r7
   2c690:	cmp	r0, #4096	; 0x1000
   2c694:	bge	2c730 <__assert_fail@plt+0x19b40>
   2c698:	mov	r0, r5
   2c69c:	mov	r1, r7
   2c6a0:	bl	2c7dc <__assert_fail@plt+0x19bec>
   2c6a4:	strb	r9, [r6]
   2c6a8:	cmp	r0, #0
   2c6ac:	bne	2c6f4 <__assert_fail@plt+0x19b04>
   2c6b0:	add	r0, r6, #1
   2c6b4:	bl	2c81c <__assert_fail@plt+0x19c2c>
   2c6b8:	mov	r7, r0
   2c6bc:	sub	r0, r4, r0
   2c6c0:	cmp	r0, #4096	; 0x1000
   2c6c4:	bge	2c670 <__assert_fail@plt+0x19a80>
   2c6c8:	cmp	r7, r4
   2c6cc:	bcs	2c6e4 <__assert_fail@plt+0x19af4>
   2c6d0:	mov	r0, sp
   2c6d4:	mov	r1, r7
   2c6d8:	bl	2c7dc <__assert_fail@plt+0x19bec>
   2c6dc:	cmp	r0, #0
   2c6e0:	bne	2c6f4 <__assert_fail@plt+0x19b04>
   2c6e4:	mov	r0, sp
   2c6e8:	bl	2c83c <__assert_fail@plt+0x19c4c>
   2c6ec:	cmp	r0, #0
   2c6f0:	beq	2c720 <__assert_fail@plt+0x19b30>
   2c6f4:	ldr	r4, [r8]
   2c6f8:	mov	r0, sp
   2c6fc:	bl	2c844 <__assert_fail@plt+0x19c54>
   2c700:	str	r4, [r8]
   2c704:	b	2c710 <__assert_fail@plt+0x19b20>
   2c708:	mov	r0, #36	; 0x24
   2c70c:	str	r0, [r8]
   2c710:	mvn	r6, #0
   2c714:	mov	r0, r6
   2c718:	sub	sp, fp, #28
   2c71c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c720:	mov	r0, sp
   2c724:	bl	2c844 <__assert_fail@plt+0x19c54>
   2c728:	mov	r6, #0
   2c72c:	b	2c714 <__assert_fail@plt+0x19b24>
   2c730:	movw	r0, #18668	; 0x48ec
   2c734:	movt	r0, #4
   2c738:	movw	r1, #18593	; 0x48a1
   2c73c:	movt	r1, #4
   2c740:	movw	r3, #18606	; 0x48ae
   2c744:	movt	r3, #4
   2c748:	mov	r2, #179	; 0xb3
   2c74c:	bl	12bf0 <__assert_fail@plt>
   2c750:	movw	r0, #18585	; 0x4899
   2c754:	movt	r0, #4
   2c758:	movw	r1, #18593	; 0x48a1
   2c75c:	movt	r1, #4
   2c760:	movw	r3, #18606	; 0x48ae
   2c764:	movt	r3, #4
   2c768:	mov	r2, #126	; 0x7e
   2c76c:	bl	12bf0 <__assert_fail@plt>
   2c770:	movw	r0, #18629	; 0x48c5
   2c774:	movt	r0, #4
   2c778:	movw	r1, #18593	; 0x48a1
   2c77c:	movt	r1, #4
   2c780:	movw	r3, #18606	; 0x48ae
   2c784:	movt	r3, #4
   2c788:	mov	r2, #127	; 0x7f
   2c78c:	bl	12bf0 <__assert_fail@plt>
   2c790:	movw	r0, #18641	; 0x48d1
   2c794:	movt	r0, #4
   2c798:	movw	r1, #18593	; 0x48a1
   2c79c:	movt	r1, #4
   2c7a0:	movw	r3, #18606	; 0x48ae
   2c7a4:	movt	r3, #4
   2c7a8:	mov	r2, #162	; 0xa2
   2c7ac:	bl	12bf0 <__assert_fail@plt>
   2c7b0:	movw	r0, #18653	; 0x48dd
   2c7b4:	movt	r0, #4
   2c7b8:	movw	r1, #18593	; 0x48a1
   2c7bc:	movt	r1, #4
   2c7c0:	movw	r3, #18606	; 0x48ae
   2c7c4:	movt	r3, #4
   2c7c8:	mov	r2, #163	; 0xa3
   2c7cc:	bl	12bf0 <__assert_fail@plt>
   2c7d0:	mvn	r1, #99	; 0x63
   2c7d4:	str	r1, [r0]
   2c7d8:	bx	lr
   2c7dc:	push	{r4, r5, fp, lr}
   2c7e0:	add	fp, sp, #8
   2c7e4:	mov	r4, r0
   2c7e8:	ldr	r0, [r0]
   2c7ec:	mov	r2, #18688	; 0x4900
   2c7f0:	bl	128e4 <openat64@plt>
   2c7f4:	cmp	r0, #0
   2c7f8:	bmi	2c814 <__assert_fail@plt+0x19c24>
   2c7fc:	mov	r5, r0
   2c800:	mov	r0, r4
   2c804:	bl	2c844 <__assert_fail@plt+0x19c54>
   2c808:	str	r5, [r4]
   2c80c:	mov	r0, #0
   2c810:	pop	{r4, r5, fp, pc}
   2c814:	mvn	r0, #0
   2c818:	pop	{r4, r5, fp, pc}
   2c81c:	push	{r4, sl, fp, lr}
   2c820:	add	fp, sp, #8
   2c824:	mov	r4, r0
   2c828:	movw	r1, #62826	; 0xf56a
   2c82c:	movt	r1, #3
   2c830:	bl	12be4 <strspn@plt>
   2c834:	add	r0, r4, r0
   2c838:	pop	{r4, sl, fp, pc}
   2c83c:	ldr	r0, [r0]
   2c840:	b	12adc <fchdir@plt>
   2c844:	push	{fp, lr}
   2c848:	mov	fp, sp
   2c84c:	ldr	r0, [r0]
   2c850:	cmp	r0, #0
   2c854:	popmi	{fp, pc}
   2c858:	bl	12ba8 <close@plt>
   2c85c:	cmp	r0, #0
   2c860:	bne	2c868 <__assert_fail@plt+0x19c78>
   2c864:	pop	{fp, pc}
   2c868:	movw	r0, #18687	; 0x48ff
   2c86c:	movt	r0, #4
   2c870:	movw	r1, #18593	; 0x48a1
   2c874:	movt	r1, #4
   2c878:	movw	r3, #18700	; 0x490c
   2c87c:	movt	r3, #4
   2c880:	mov	r2, #64	; 0x40
   2c884:	bl	12bf0 <__assert_fail@plt>
   2c888:	sub	sp, sp, #8
   2c88c:	push	{fp, lr}
   2c890:	mov	fp, sp
   2c894:	sub	sp, sp, #8
   2c898:	str	r2, [fp, #8]
   2c89c:	str	r3, [fp, #12]
   2c8a0:	add	r2, fp, #8
   2c8a4:	str	r2, [sp, #4]
   2c8a8:	cmp	r1, #11
   2c8ac:	bhi	2c8ec <__assert_fail@plt+0x19cfc>
   2c8b0:	mov	r2, #1
   2c8b4:	movw	r3, #1300	; 0x514
   2c8b8:	tst	r3, r2, lsl r1
   2c8bc:	bne	2c93c <__assert_fail@plt+0x19d4c>
   2c8c0:	movw	r3, #2570	; 0xa0a
   2c8c4:	tst	r3, r2, lsl r1
   2c8c8:	bne	2c914 <__assert_fail@plt+0x19d24>
   2c8cc:	cmp	r1, #0
   2c8d0:	bne	2c8ec <__assert_fail@plt+0x19cfc>
   2c8d4:	ldr	r1, [sp, #4]
   2c8d8:	add	r2, r1, #4
   2c8dc:	str	r2, [sp, #4]
   2c8e0:	ldr	r1, [r1]
   2c8e4:	bl	2c960 <__assert_fail@plt+0x19d70>
   2c8e8:	b	2c950 <__assert_fail@plt+0x19d60>
   2c8ec:	sub	r2, r1, #1024	; 0x400
   2c8f0:	cmp	r2, #10
   2c8f4:	bhi	2c93c <__assert_fail@plt+0x19d4c>
   2c8f8:	mov	ip, #1
   2c8fc:	movw	r3, #645	; 0x285
   2c900:	tst	r3, ip, lsl r2
   2c904:	bne	2c93c <__assert_fail@plt+0x19d4c>
   2c908:	movw	r3, #1282	; 0x502
   2c90c:	tst	r3, ip, lsl r2
   2c910:	beq	2c91c <__assert_fail@plt+0x19d2c>
   2c914:	bl	12a04 <fcntl64@plt>
   2c918:	b	2c950 <__assert_fail@plt+0x19d60>
   2c91c:	cmp	r2, #6
   2c920:	bne	2c93c <__assert_fail@plt+0x19d4c>
   2c924:	ldr	r1, [sp, #4]
   2c928:	add	r2, r1, #4
   2c92c:	str	r2, [sp, #4]
   2c930:	ldr	r1, [r1]
   2c934:	bl	2c96c <__assert_fail@plt+0x19d7c>
   2c938:	b	2c950 <__assert_fail@plt+0x19d60>
   2c93c:	ldr	r2, [sp, #4]
   2c940:	add	r3, r2, #4
   2c944:	str	r3, [sp, #4]
   2c948:	ldr	r2, [r2]
   2c94c:	bl	12a04 <fcntl64@plt>
   2c950:	mov	sp, fp
   2c954:	pop	{fp, lr}
   2c958:	add	sp, sp, #8
   2c95c:	bx	lr
   2c960:	mov	r2, r1
   2c964:	mov	r1, #0
   2c968:	b	12a04 <fcntl64@plt>
   2c96c:	push	{r4, r5, r6, r7, fp, lr}
   2c970:	add	fp, sp, #16
   2c974:	mov	r5, r1
   2c978:	mov	r6, r0
   2c97c:	movw	r7, #24152	; 0x5e58
   2c980:	movt	r7, #5
   2c984:	ldr	r0, [r7]
   2c988:	cmp	r0, #0
   2c98c:	bmi	2c9f0 <__assert_fail@plt+0x19e00>
   2c990:	mov	r0, r6
   2c994:	movw	r1, #1030	; 0x406
   2c998:	mov	r2, r5
   2c99c:	bl	12a04 <fcntl64@plt>
   2c9a0:	mov	r4, r0
   2c9a4:	cmn	r0, #1
   2c9a8:	bgt	2c9dc <__assert_fail@plt+0x19dec>
   2c9ac:	bl	12908 <__errno_location@plt>
   2c9b0:	ldr	r0, [r0]
   2c9b4:	cmp	r0, #22
   2c9b8:	bne	2c9dc <__assert_fail@plt+0x19dec>
   2c9bc:	mov	r0, r6
   2c9c0:	mov	r1, r5
   2c9c4:	bl	2c960 <__assert_fail@plt+0x19d70>
   2c9c8:	mov	r4, r0
   2c9cc:	cmp	r0, #0
   2c9d0:	bmi	2ca40 <__assert_fail@plt+0x19e50>
   2c9d4:	mvn	r0, #0
   2c9d8:	b	2c9e0 <__assert_fail@plt+0x19df0>
   2c9dc:	mov	r0, #1
   2c9e0:	str	r0, [r7]
   2c9e4:	cmp	r4, #0
   2c9e8:	bpl	2ca08 <__assert_fail@plt+0x19e18>
   2c9ec:	b	2ca40 <__assert_fail@plt+0x19e50>
   2c9f0:	mov	r0, r6
   2c9f4:	mov	r1, r5
   2c9f8:	bl	2c960 <__assert_fail@plt+0x19d70>
   2c9fc:	mov	r4, r0
   2ca00:	cmp	r4, #0
   2ca04:	bmi	2ca40 <__assert_fail@plt+0x19e50>
   2ca08:	ldr	r0, [r7]
   2ca0c:	cmn	r0, #1
   2ca10:	bne	2ca40 <__assert_fail@plt+0x19e50>
   2ca14:	mov	r0, r4
   2ca18:	mov	r1, #1
   2ca1c:	bl	12a04 <fcntl64@plt>
   2ca20:	cmp	r0, #0
   2ca24:	bmi	2ca48 <__assert_fail@plt+0x19e58>
   2ca28:	orr	r2, r0, #1
   2ca2c:	mov	r0, r4
   2ca30:	mov	r1, #2
   2ca34:	bl	12a04 <fcntl64@plt>
   2ca38:	cmn	r0, #1
   2ca3c:	beq	2ca48 <__assert_fail@plt+0x19e58>
   2ca40:	mov	r0, r4
   2ca44:	pop	{r4, r5, r6, r7, fp, pc}
   2ca48:	bl	12908 <__errno_location@plt>
   2ca4c:	mov	r5, r0
   2ca50:	ldr	r6, [r0]
   2ca54:	mov	r0, r4
   2ca58:	bl	12ba8 <close@plt>
   2ca5c:	str	r6, [r5]
   2ca60:	mvn	r4, #0
   2ca64:	mov	r0, r4
   2ca68:	pop	{r4, r5, r6, r7, fp, pc}
   2ca6c:	push	{r4, sl, fp, lr}
   2ca70:	add	fp, sp, #8
   2ca74:	mov	r4, r0
   2ca78:	cmp	r0, #0
   2ca7c:	beq	2ca94 <__assert_fail@plt+0x19ea4>
   2ca80:	mov	r0, r4
   2ca84:	bl	1283c <__freading@plt>
   2ca88:	cmp	r0, #0
   2ca8c:	movne	r0, r4
   2ca90:	blne	2caa0 <__assert_fail@plt+0x19eb0>
   2ca94:	mov	r0, r4
   2ca98:	pop	{r4, sl, fp, lr}
   2ca9c:	b	12554 <fflush@plt>
   2caa0:	push	{fp, lr}
   2caa4:	mov	fp, sp
   2caa8:	sub	sp, sp, #8
   2caac:	ldrb	r1, [r0, #1]
   2cab0:	tst	r1, #1
   2cab4:	beq	2cacc <__assert_fail@plt+0x19edc>
   2cab8:	mov	r1, #1
   2cabc:	str	r1, [sp]
   2cac0:	mov	r2, #0
   2cac4:	mov	r3, #0
   2cac8:	bl	2cafc <__assert_fail@plt+0x19f0c>
   2cacc:	mov	sp, fp
   2cad0:	pop	{fp, pc}
   2cad4:	push	{r4, r5, r6, sl, fp, lr}
   2cad8:	add	fp, sp, #16
   2cadc:	mov	r4, r0
   2cae0:	bl	12908 <__errno_location@plt>
   2cae4:	mov	r5, r0
   2cae8:	ldr	r6, [r0]
   2caec:	mov	r0, r4
   2caf0:	bl	12590 <free@plt>
   2caf4:	str	r6, [r5]
   2caf8:	pop	{r4, r5, r6, sl, fp, pc}
   2cafc:	push	{r4, r5, r6, r7, fp, lr}
   2cb00:	add	fp, sp, #16
   2cb04:	sub	sp, sp, #8
   2cb08:	mov	r5, r3
   2cb0c:	mov	r6, r2
   2cb10:	mov	r4, r0
   2cb14:	ldr	r0, [r0, #4]
   2cb18:	ldr	r1, [r4, #8]
   2cb1c:	cmp	r1, r0
   2cb20:	bne	2cb3c <__assert_fail@plt+0x19f4c>
   2cb24:	ldrd	r0, [r4, #16]
   2cb28:	cmp	r1, r0
   2cb2c:	bne	2cb3c <__assert_fail@plt+0x19f4c>
   2cb30:	ldr	r0, [r4, #36]	; 0x24
   2cb34:	cmp	r0, #0
   2cb38:	beq	2cb54 <__assert_fail@plt+0x19f64>
   2cb3c:	mov	r0, r4
   2cb40:	mov	r2, r6
   2cb44:	mov	r3, r5
   2cb48:	sub	sp, fp, #16
   2cb4c:	pop	{r4, r5, r6, r7, fp, lr}
   2cb50:	b	129ec <fseeko64@plt>
   2cb54:	ldr	r7, [fp, #8]
   2cb58:	mov	r0, r4
   2cb5c:	bl	1298c <fileno@plt>
   2cb60:	str	r7, [sp]
   2cb64:	mov	r2, r6
   2cb68:	mov	r3, r5
   2cb6c:	bl	12740 <lseek64@plt>
   2cb70:	and	r2, r0, r1
   2cb74:	cmn	r2, #1
   2cb78:	beq	2cb98 <__assert_fail@plt+0x19fa8>
   2cb7c:	strd	r0, [r4, #80]	; 0x50
   2cb80:	ldr	r0, [r4]
   2cb84:	bic	r0, r0, #16
   2cb88:	str	r0, [r4]
   2cb8c:	mov	r0, #0
   2cb90:	sub	sp, fp, #16
   2cb94:	pop	{r4, r5, r6, r7, fp, pc}
   2cb98:	mvn	r0, #0
   2cb9c:	sub	sp, fp, #16
   2cba0:	pop	{r4, r5, r6, r7, fp, pc}
   2cba4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cba8:	add	fp, sp, #28
   2cbac:	sub	sp, sp, #12
   2cbb0:	cmp	r1, #4096	; 0x1000
   2cbb4:	bcs	2cbd0 <__assert_fail@plt+0x19fe0>
   2cbb8:	mov	r6, r1
   2cbbc:	mov	r7, r0
   2cbc0:	and	r0, r1, #516	; 0x204
   2cbc4:	cmp	r0, #516	; 0x204
   2cbc8:	tstne	r6, #18
   2cbcc:	bne	2cbec <__assert_fail@plt+0x19ffc>
   2cbd0:	bl	12908 <__errno_location@plt>
   2cbd4:	mov	r1, #22
   2cbd8:	str	r1, [r0]
   2cbdc:	mov	r4, #0
   2cbe0:	mov	r0, r4
   2cbe4:	sub	sp, fp, #28
   2cbe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cbec:	mov	sl, r2
   2cbf0:	mov	r0, #1
   2cbf4:	mov	r1, #96	; 0x60
   2cbf8:	bl	2c4f4 <__assert_fail@plt+0x19904>
   2cbfc:	cmp	r0, #0
   2cc00:	beq	2cbdc <__assert_fail@plt+0x19fec>
   2cc04:	mov	r4, r0
   2cc08:	mvn	r0, #99	; 0x63
   2cc0c:	str	r0, [r4, #32]
   2cc10:	bic	r0, r6, #516	; 0x204
   2cc14:	tst	r6, #2
   2cc18:	mov	r1, r6
   2cc1c:	orrne	r1, r0, #4
   2cc20:	str	sl, [r4, #44]	; 0x2c
   2cc24:	str	r1, [r4, #48]	; 0x30
   2cc28:	mov	r0, r7
   2cc2c:	bl	2ceb0 <__assert_fail@plt+0x1a2c0>
   2cc30:	mov	r1, r0
   2cc34:	cmp	r0, #4096	; 0x1000
   2cc38:	movls	r1, #4096	; 0x1000
   2cc3c:	mov	r0, r4
   2cc40:	bl	2cef8 <__assert_fail@plt+0x1a308>
   2cc44:	cmp	r0, #0
   2cc48:	beq	2cea4 <__assert_fail@plt+0x1a2b4>
   2cc4c:	ldr	r0, [r7]
   2cc50:	cmp	r0, #0
   2cc54:	beq	2cc94 <__assert_fail@plt+0x1a0a4>
   2cc58:	movw	r1, #2407	; 0x967
   2cc5c:	movt	r1, #4
   2cc60:	mov	r0, r4
   2cc64:	mov	r2, #0
   2cc68:	bl	2cf74 <__assert_fail@plt+0x1a384>
   2cc6c:	cmp	r0, #0
   2cc70:	beq	2ce9c <__assert_fail@plt+0x1a2ac>
   2cc74:	mov	r8, r0
   2cc78:	mvn	r0, #0
   2cc7c:	str	r0, [r8, #48]	; 0x30
   2cc80:	cmp	sl, #0
   2cc84:	beq	2cca0 <__assert_fail@plt+0x1a0b0>
   2cc88:	ldrb	r0, [r4, #49]	; 0x31
   2cc8c:	ubfx	r0, r0, #2, #1
   2cc90:	b	2cca4 <__assert_fail@plt+0x1a0b4>
   2cc94:	mov	r8, #0
   2cc98:	cmp	sl, #0
   2cc9c:	bne	2cc88 <__assert_fail@plt+0x1a098>
   2cca0:	mov	r0, #1
   2cca4:	ldr	r5, [r7]
   2cca8:	cmp	r5, #0
   2ccac:	beq	2cdd8 <__assert_fail@plt+0x1a1e8>
   2ccb0:	and	r1, r6, #2048	; 0x800
   2ccb4:	str	r1, [sp, #8]
   2ccb8:	eor	r0, r0, #1
   2ccbc:	str	r0, [sp, #4]
   2ccc0:	mov	r9, #0
   2ccc4:	mov	r0, #0
   2ccc8:	str	r0, [sp]
   2cccc:	mov	r6, #0
   2ccd0:	b	2cd08 <__assert_fail@plt+0x1a118>
   2ccd4:	mov	r0, r4
   2ccd8:	mov	r1, r5
   2ccdc:	mov	r2, #0
   2cce0:	bl	2d028 <__assert_fail@plt+0x1a438>
   2cce4:	strh	r0, [r5, #56]	; 0x38
   2cce8:	cmp	sl, #0
   2ccec:	beq	2cdb0 <__assert_fail@plt+0x1a1c0>
   2ccf0:	str	r9, [r5, #8]
   2ccf4:	mov	r9, r5
   2ccf8:	add	r6, r6, #1
   2ccfc:	ldr	r5, [r7, #4]!
   2cd00:	cmp	r5, #0
   2cd04:	beq	2cde0 <__assert_fail@plt+0x1a1f0>
   2cd08:	mov	r0, r5
   2cd0c:	bl	128c0 <strlen@plt>
   2cd10:	mov	r2, r0
   2cd14:	ldr	r0, [sp, #8]
   2cd18:	cmp	r0, #0
   2cd1c:	bne	2cd54 <__assert_fail@plt+0x1a164>
   2cd20:	cmp	r2, #3
   2cd24:	bcc	2cd54 <__assert_fail@plt+0x1a164>
   2cd28:	add	r0, r2, r5
   2cd2c:	ldrb	r0, [r0, #-1]
   2cd30:	cmp	r0, #47	; 0x2f
   2cd34:	bne	2cd54 <__assert_fail@plt+0x1a164>
   2cd38:	sub	r0, r5, #2
   2cd3c:	ldrb	r1, [r0, r2]
   2cd40:	cmp	r1, #47	; 0x2f
   2cd44:	bne	2cd54 <__assert_fail@plt+0x1a164>
   2cd48:	sub	r2, r2, #1
   2cd4c:	cmp	r2, #1
   2cd50:	bhi	2cd3c <__assert_fail@plt+0x1a14c>
   2cd54:	mov	r0, r4
   2cd58:	mov	r1, r5
   2cd5c:	bl	2cf74 <__assert_fail@plt+0x1a384>
   2cd60:	cmp	r0, #0
   2cd64:	beq	2ce8c <__assert_fail@plt+0x1a29c>
   2cd68:	mov	r5, r0
   2cd6c:	str	r8, [r0, #4]
   2cd70:	mov	r0, #0
   2cd74:	str	r0, [r5, #48]	; 0x30
   2cd78:	add	r0, r5, #168	; 0xa8
   2cd7c:	str	r0, [r5, #24]
   2cd80:	clz	r0, r9
   2cd84:	lsr	r0, r0, #5
   2cd88:	ldr	r1, [sp, #4]
   2cd8c:	orrs	r0, r1, r0
   2cd90:	bne	2ccd4 <__assert_fail@plt+0x1a0e4>
   2cd94:	mov	r0, #11
   2cd98:	strh	r0, [r5, #56]	; 0x38
   2cd9c:	mov	r0, r5
   2cda0:	mov	r1, #1
   2cda4:	bl	2cff8 <__assert_fail@plt+0x1a408>
   2cda8:	cmp	sl, #0
   2cdac:	bne	2ccf0 <__assert_fail@plt+0x1a100>
   2cdb0:	mov	r0, #0
   2cdb4:	str	r0, [r5, #8]
   2cdb8:	cmp	r9, #0
   2cdbc:	beq	2cdd0 <__assert_fail@plt+0x1a1e0>
   2cdc0:	ldr	r0, [sp]
   2cdc4:	str	r5, [r0, #8]
   2cdc8:	str	r5, [sp]
   2cdcc:	b	2ccf8 <__assert_fail@plt+0x1a108>
   2cdd0:	str	r5, [sp]
   2cdd4:	b	2ccf4 <__assert_fail@plt+0x1a104>
   2cdd8:	mov	r9, #0
   2cddc:	b	2ce04 <__assert_fail@plt+0x1a214>
   2cde0:	cmp	sl, #0
   2cde4:	beq	2ce04 <__assert_fail@plt+0x1a214>
   2cde8:	cmp	r6, #2
   2cdec:	bcc	2ce04 <__assert_fail@plt+0x1a214>
   2cdf0:	mov	r0, r4
   2cdf4:	mov	r1, r9
   2cdf8:	mov	r2, r6
   2cdfc:	bl	2d19c <__assert_fail@plt+0x1a5ac>
   2ce00:	mov	r9, r0
   2ce04:	movw	r1, #2407	; 0x967
   2ce08:	movt	r1, #4
   2ce0c:	mov	r0, r4
   2ce10:	mov	r2, #0
   2ce14:	bl	2cf74 <__assert_fail@plt+0x1a384>
   2ce18:	str	r0, [r4]
   2ce1c:	cmp	r0, #0
   2ce20:	beq	2ce8c <__assert_fail@plt+0x1a29c>
   2ce24:	mov	r1, #9
   2ce28:	strh	r1, [r0, #56]	; 0x38
   2ce2c:	str	r9, [r0, #8]
   2ce30:	mov	r1, #1
   2ce34:	str	r1, [r0, #48]	; 0x30
   2ce38:	mov	r0, r4
   2ce3c:	bl	2d26c <__assert_fail@plt+0x1a67c>
   2ce40:	cmp	r0, #0
   2ce44:	beq	2ce8c <__assert_fail@plt+0x1a29c>
   2ce48:	ldrh	r0, [r4, #48]	; 0x30
   2ce4c:	tst	r0, #516	; 0x204
   2ce50:	bne	2ce7c <__assert_fail@plt+0x1a28c>
   2ce54:	movw	r1, #64572	; 0xfc3c
   2ce58:	movt	r1, #3
   2ce5c:	mov	r0, r4
   2ce60:	bl	2d2f8 <__assert_fail@plt+0x1a708>
   2ce64:	str	r0, [r4, #28]
   2ce68:	cmn	r0, #1
   2ce6c:	bgt	2ce7c <__assert_fail@plt+0x1a28c>
   2ce70:	ldr	r0, [r4, #48]	; 0x30
   2ce74:	orr	r0, r0, #4
   2ce78:	str	r0, [r4, #48]	; 0x30
   2ce7c:	add	r0, r4, #60	; 0x3c
   2ce80:	mvn	r1, #0
   2ce84:	bl	3def8 <__assert_fail@plt+0x2b308>
   2ce88:	b	2cbe0 <__assert_fail@plt+0x19ff0>
   2ce8c:	mov	r0, r9
   2ce90:	bl	2d328 <__assert_fail@plt+0x1a738>
   2ce94:	mov	r0, r8
   2ce98:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2ce9c:	ldr	r0, [r4, #24]
   2cea0:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2cea4:	mov	r0, r4
   2cea8:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2ceac:	b	2cbdc <__assert_fail@plt+0x19fec>
   2ceb0:	push	{r4, r5, fp, lr}
   2ceb4:	add	fp, sp, #8
   2ceb8:	mov	r1, r0
   2cebc:	ldr	r0, [r0]
   2cec0:	cmp	r0, #0
   2cec4:	beq	2cef0 <__assert_fail@plt+0x1a300>
   2cec8:	add	r5, r1, #4
   2cecc:	mov	r4, #0
   2ced0:	bl	128c0 <strlen@plt>
   2ced4:	cmp	r0, r4
   2ced8:	movhi	r4, r0
   2cedc:	ldr	r0, [r5], #4
   2cee0:	cmp	r0, #0
   2cee4:	bne	2ced0 <__assert_fail@plt+0x1a2e0>
   2cee8:	add	r0, r4, #1
   2ceec:	pop	{r4, r5, fp, pc}
   2cef0:	mov	r0, #1
   2cef4:	pop	{r4, r5, fp, pc}
   2cef8:	push	{r4, r5, fp, lr}
   2cefc:	add	fp, sp, #8
   2cf00:	mov	r4, r0
   2cf04:	ldr	r0, [r0, #36]	; 0x24
   2cf08:	add	r1, r1, #256	; 0x100
   2cf0c:	adds	r1, r1, r0
   2cf10:	bcc	2cf38 <__assert_fail@plt+0x1a348>
   2cf14:	ldr	r0, [r4, #24]
   2cf18:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2cf1c:	mov	r5, #0
   2cf20:	str	r5, [r4, #24]
   2cf24:	bl	12908 <__errno_location@plt>
   2cf28:	mov	r1, #36	; 0x24
   2cf2c:	str	r1, [r0]
   2cf30:	mov	r0, r5
   2cf34:	pop	{r4, r5, fp, pc}
   2cf38:	str	r1, [r4, #36]	; 0x24
   2cf3c:	ldr	r0, [r4, #24]
   2cf40:	bl	2f894 <__assert_fail@plt+0x1cca4>
   2cf44:	cmp	r0, #0
   2cf48:	beq	2cf5c <__assert_fail@plt+0x1a36c>
   2cf4c:	str	r0, [r4, #24]
   2cf50:	mov	r5, #1
   2cf54:	mov	r0, r5
   2cf58:	pop	{r4, r5, fp, pc}
   2cf5c:	ldr	r0, [r4, #24]
   2cf60:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2cf64:	mov	r5, #0
   2cf68:	str	r5, [r4, #24]
   2cf6c:	mov	r0, r5
   2cf70:	pop	{r4, r5, fp, pc}
   2cf74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2cf78:	add	fp, sp, #24
   2cf7c:	mov	r6, r2
   2cf80:	mov	r8, r1
   2cf84:	mov	r5, r0
   2cf88:	add	r0, r2, #176	; 0xb0
   2cf8c:	bic	r0, r0, #7
   2cf90:	bl	2ed88 <__assert_fail@plt+0x1c198>
   2cf94:	cmp	r0, #0
   2cf98:	beq	2cfec <__assert_fail@plt+0x1a3fc>
   2cf9c:	mov	r4, r0
   2cfa0:	add	r7, r0, #168	; 0xa8
   2cfa4:	mov	r0, r7
   2cfa8:	mov	r1, r8
   2cfac:	mov	r2, r6
   2cfb0:	bl	125f0 <memcpy@plt>
   2cfb4:	mov	r0, #0
   2cfb8:	strb	r0, [r7, r6]
   2cfbc:	str	r6, [r4, #52]	; 0x34
   2cfc0:	str	r5, [r4, #44]	; 0x2c
   2cfc4:	ldr	r1, [r5, #24]
   2cfc8:	str	r0, [r4, #12]
   2cfcc:	str	r0, [r4, #16]
   2cfd0:	str	r0, [r4, #20]
   2cfd4:	mov	r2, #196608	; 0x30000
   2cfd8:	str	r2, [r4, #58]	; 0x3a
   2cfdc:	str	r1, [r4, #28]
   2cfe0:	str	r0, [r4, #32]
   2cfe4:	mov	r0, r4
   2cfe8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2cfec:	mov	r4, #0
   2cff0:	mov	r0, r4
   2cff4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2cff8:	push	{fp, lr}
   2cffc:	mov	fp, sp
   2d000:	ldrh	r2, [r0, #56]	; 0x38
   2d004:	cmp	r2, #11
   2d008:	bne	2d024 <__assert_fail@plt+0x1a434>
   2d00c:	mov	r3, #0
   2d010:	mov	r2, #1
   2d014:	cmp	r1, #0
   2d018:	movwne	r2, #2
   2d01c:	strd	r2, [r0, #112]	; 0x70
   2d020:	pop	{fp, pc}
   2d024:	bl	12b9c <abort@plt>
   2d028:	push	{r4, r5, r6, sl, fp, lr}
   2d02c:	add	fp, sp, #16
   2d030:	mov	r4, r1
   2d034:	ldr	r1, [r1, #48]	; 0x30
   2d038:	cmp	r1, #0
   2d03c:	bne	2d04c <__assert_fail@plt+0x1a45c>
   2d040:	ldrb	r1, [r0, #48]	; 0x30
   2d044:	and	r1, r1, #1
   2d048:	orr	r2, r1, r2
   2d04c:	add	r5, r4, #64	; 0x40
   2d050:	cmp	r2, #0
   2d054:	ldreq	r1, [r0, #48]	; 0x30
   2d058:	andseq	r1, r1, #2
   2d05c:	beq	2d0ac <__assert_fail@plt+0x1a4bc>
   2d060:	ldr	r0, [r4, #24]
   2d064:	mov	r1, r5
   2d068:	bl	3ea04 <__assert_fail@plt+0x2be14>
   2d06c:	cmp	r0, #0
   2d070:	beq	2d120 <__assert_fail@plt+0x1a530>
   2d074:	bl	12908 <__errno_location@plt>
   2d078:	mov	r6, r0
   2d07c:	ldr	r0, [r0]
   2d080:	cmp	r0, #2
   2d084:	bne	2d0d0 <__assert_fail@plt+0x1a4e0>
   2d088:	ldr	r0, [r4, #24]
   2d08c:	mov	r1, r5
   2d090:	bl	3ea24 <__assert_fail@plt+0x2be34>
   2d094:	cmp	r0, #0
   2d098:	bne	2d0d0 <__assert_fail@plt+0x1a4e0>
   2d09c:	mov	r0, #0
   2d0a0:	str	r0, [r6]
   2d0a4:	mov	r0, #13
   2d0a8:	pop	{r4, r5, r6, sl, fp, pc}
   2d0ac:	ldr	r1, [r4, #24]
   2d0b0:	ldr	r0, [r0, #32]
   2d0b4:	mov	r2, r5
   2d0b8:	mov	r3, #256	; 0x100
   2d0bc:	bl	3ea34 <__assert_fail@plt+0x2be44>
   2d0c0:	cmp	r0, #0
   2d0c4:	beq	2d120 <__assert_fail@plt+0x1a530>
   2d0c8:	bl	12908 <__errno_location@plt>
   2d0cc:	mov	r6, r0
   2d0d0:	ldr	r0, [r6]
   2d0d4:	str	r0, [r4, #32]
   2d0d8:	mov	r0, #0
   2d0dc:	vmov.i32	q8, #0	; 0x00000000
   2d0e0:	str	r0, [r5, #96]	; 0x60
   2d0e4:	add	r1, r5, #80	; 0x50
   2d0e8:	vst1.64	{d16-d17}, [r1]
   2d0ec:	add	r1, r5, #64	; 0x40
   2d0f0:	vst1.64	{d16-d17}, [r1]
   2d0f4:	add	r1, r5, #48	; 0x30
   2d0f8:	vst1.64	{d16-d17}, [r1]
   2d0fc:	add	r1, r5, #32
   2d100:	vst1.64	{d16-d17}, [r1]
   2d104:	add	r1, r5, #16
   2d108:	vst1.64	{d16-d17}, [r1]
   2d10c:	mov	r1, #100	; 0x64
   2d110:	vst1.64	{d16-d17}, [r5], r1
   2d114:	str	r0, [r5]
   2d118:	mov	r0, #10
   2d11c:	pop	{r4, r5, r6, sl, fp, pc}
   2d120:	ldr	r0, [r4, #80]	; 0x50
   2d124:	and	r0, r0, #61440	; 0xf000
   2d128:	cmp	r0, #40960	; 0xa000
   2d12c:	beq	2d184 <__assert_fail@plt+0x1a594>
   2d130:	cmp	r0, #32768	; 0x8000
   2d134:	beq	2d18c <__assert_fail@plt+0x1a59c>
   2d138:	cmp	r0, #16384	; 0x4000
   2d13c:	bne	2d194 <__assert_fail@plt+0x1a5a4>
   2d140:	ldrb	r1, [r4, #168]	; 0xa8
   2d144:	mov	r0, #1
   2d148:	cmp	r1, #46	; 0x2e
   2d14c:	bne	2d198 <__assert_fail@plt+0x1a5a8>
   2d150:	ldrb	r1, [r4, #169]	; 0xa9
   2d154:	cmp	r1, #0
   2d158:	beq	2d170 <__assert_fail@plt+0x1a580>
   2d15c:	cmp	r1, #46	; 0x2e
   2d160:	bne	2d198 <__assert_fail@plt+0x1a5a8>
   2d164:	ldrb	r1, [r4, #170]	; 0xaa
   2d168:	cmp	r1, #0
   2d16c:	popne	{r4, r5, r6, sl, fp, pc}
   2d170:	ldr	r1, [r4, #48]	; 0x30
   2d174:	mov	r0, #5
   2d178:	cmp	r1, #0
   2d17c:	movweq	r0, #1
   2d180:	pop	{r4, r5, r6, sl, fp, pc}
   2d184:	mov	r0, #12
   2d188:	pop	{r4, r5, r6, sl, fp, pc}
   2d18c:	mov	r0, #8
   2d190:	pop	{r4, r5, r6, sl, fp, pc}
   2d194:	mov	r0, #3
   2d198:	pop	{r4, r5, r6, sl, fp, pc}
   2d19c:	push	{r4, r5, r6, r7, fp, lr}
   2d1a0:	add	fp, sp, #16
   2d1a4:	mov	r6, r2
   2d1a8:	mov	r4, r1
   2d1ac:	mov	r5, r0
   2d1b0:	ldr	r7, [r0, #44]	; 0x2c
   2d1b4:	ldr	r0, [r0, #40]	; 0x28
   2d1b8:	cmp	r0, r2
   2d1bc:	bcs	2d1e8 <__assert_fail@plt+0x1a5f8>
   2d1c0:	add	r1, r6, #40	; 0x28
   2d1c4:	str	r1, [r5, #40]	; 0x28
   2d1c8:	cmn	r1, #-1073741823	; 0xc0000001
   2d1cc:	bhi	2d250 <__assert_fail@plt+0x1a660>
   2d1d0:	ldr	r0, [r5, #8]
   2d1d4:	lsl	r1, r1, #2
   2d1d8:	bl	2f894 <__assert_fail@plt+0x1cca4>
   2d1dc:	cmp	r0, #0
   2d1e0:	beq	2d250 <__assert_fail@plt+0x1a660>
   2d1e4:	str	r0, [r5, #8]
   2d1e8:	cmp	r4, #0
   2d1ec:	beq	2d204 <__assert_fail@plt+0x1a614>
   2d1f0:	ldr	r0, [r5, #8]
   2d1f4:	str	r4, [r0], #4
   2d1f8:	ldr	r4, [r4, #8]
   2d1fc:	cmp	r4, #0
   2d200:	bne	2d1f4 <__assert_fail@plt+0x1a604>
   2d204:	ldr	r0, [r5, #8]
   2d208:	mov	r1, r6
   2d20c:	mov	r2, #4
   2d210:	mov	r3, r7
   2d214:	bl	12af4 <qsort@plt>
   2d218:	subs	r1, r6, #1
   2d21c:	ldr	r0, [r5, #8]
   2d220:	ldr	r4, [r0]
   2d224:	beq	2d23c <__assert_fail@plt+0x1a64c>
   2d228:	ldr	r2, [r0]
   2d22c:	ldr	r3, [r0, #4]!
   2d230:	str	r3, [r2, #8]
   2d234:	subs	r1, r1, #1
   2d238:	bne	2d228 <__assert_fail@plt+0x1a638>
   2d23c:	ldr	r0, [r0]
   2d240:	mov	r1, #0
   2d244:	str	r1, [r0, #8]
   2d248:	mov	r0, r4
   2d24c:	pop	{r4, r5, r6, r7, fp, pc}
   2d250:	ldr	r0, [r5, #8]
   2d254:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2d258:	mov	r0, #0
   2d25c:	str	r0, [r5, #40]	; 0x28
   2d260:	str	r0, [r5, #8]
   2d264:	mov	r0, r4
   2d268:	pop	{r4, r5, r6, r7, fp, pc}
   2d26c:	push	{r4, r5, fp, lr}
   2d270:	add	fp, sp, #8
   2d274:	sub	sp, sp, #8
   2d278:	mov	r4, r0
   2d27c:	ldrh	r0, [r0, #48]	; 0x30
   2d280:	movw	r1, #258	; 0x102
   2d284:	tst	r0, r1
   2d288:	beq	2d2c8 <__assert_fail@plt+0x1a6d8>
   2d28c:	movw	r0, #51924	; 0xcad4
   2d290:	movt	r0, #2
   2d294:	str	r0, [sp]
   2d298:	mov	r5, #0
   2d29c:	movw	r2, #59724	; 0xe94c
   2d2a0:	movt	r2, #2
   2d2a4:	movw	r3, #59756	; 0xe96c
   2d2a8:	movt	r3, #2
   2d2ac:	mov	r0, #31
   2d2b0:	mov	r1, #0
   2d2b4:	bl	22794 <__assert_fail@plt+0xfba4>
   2d2b8:	str	r0, [r4, #56]	; 0x38
   2d2bc:	cmp	r0, #0
   2d2c0:	movne	r5, #1
   2d2c4:	b	2d2ec <__assert_fail@plt+0x1a6fc>
   2d2c8:	mov	r0, #32
   2d2cc:	bl	2ed88 <__assert_fail@plt+0x1c198>
   2d2d0:	str	r0, [r4, #56]	; 0x38
   2d2d4:	cmp	r0, #0
   2d2d8:	beq	2d2e8 <__assert_fail@plt+0x1a6f8>
   2d2dc:	bl	3dc98 <__assert_fail@plt+0x2b0a8>
   2d2e0:	mov	r5, #1
   2d2e4:	b	2d2ec <__assert_fail@plt+0x1a6fc>
   2d2e8:	mov	r5, #0
   2d2ec:	mov	r0, r5
   2d2f0:	sub	sp, fp, #8
   2d2f4:	pop	{r4, r5, fp, pc}
   2d2f8:	ldr	r3, [r0, #48]	; 0x30
   2d2fc:	mov	r2, #32768	; 0x8000
   2d300:	and	r2, r2, r3, lsl #11
   2d304:	orr	r2, r2, #18688	; 0x4900
   2d308:	orr	r2, r2, #524288	; 0x80000
   2d30c:	tst	r3, #512	; 0x200
   2d310:	bne	2d320 <__assert_fail@plt+0x1a730>
   2d314:	mov	r0, r1
   2d318:	mov	r1, r2
   2d31c:	b	220c0 <__assert_fail@plt+0xf4d0>
   2d320:	ldr	r0, [r0, #32]
   2d324:	b	25648 <__assert_fail@plt+0x12a58>
   2d328:	push	{r4, r6, r7, sl, fp, lr}
   2d32c:	add	fp, sp, #16
   2d330:	cmp	r0, #0
   2d334:	beq	2d36c <__assert_fail@plt+0x1a77c>
   2d338:	mov	r4, r0
   2d33c:	b	2d354 <__assert_fail@plt+0x1a764>
   2d340:	mov	r0, r4
   2d344:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2d348:	cmp	r6, #0
   2d34c:	mov	r4, r6
   2d350:	beq	2d36c <__assert_fail@plt+0x1a77c>
   2d354:	ldrd	r6, [r4, #8]
   2d358:	cmp	r7, #0
   2d35c:	beq	2d340 <__assert_fail@plt+0x1a750>
   2d360:	mov	r0, r7
   2d364:	bl	12bc0 <closedir@plt>
   2d368:	b	2d340 <__assert_fail@plt+0x1a750>
   2d36c:	pop	{r4, r6, r7, sl, fp, pc}
   2d370:	push	{r4, r5, fp, lr}
   2d374:	add	fp, sp, #8
   2d378:	mov	r4, r0
   2d37c:	ldr	r0, [r0]
   2d380:	cmp	r0, #0
   2d384:	beq	2d3c4 <__assert_fail@plt+0x1a7d4>
   2d388:	ldr	r1, [r0, #48]	; 0x30
   2d38c:	cmp	r1, #0
   2d390:	bmi	2d3b8 <__assert_fail@plt+0x1a7c8>
   2d394:	ldr	r5, [r0, #8]
   2d398:	cmp	r5, #0
   2d39c:	ldreq	r5, [r0, #4]
   2d3a0:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2d3a4:	ldr	r0, [r5, #48]	; 0x30
   2d3a8:	cmn	r0, #1
   2d3ac:	mov	r0, r5
   2d3b0:	bgt	2d394 <__assert_fail@plt+0x1a7a4>
   2d3b4:	b	2d3bc <__assert_fail@plt+0x1a7cc>
   2d3b8:	mov	r5, r0
   2d3bc:	mov	r0, r5
   2d3c0:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2d3c4:	ldr	r0, [r4, #4]
   2d3c8:	cmp	r0, #0
   2d3cc:	blne	2d328 <__assert_fail@plt+0x1a738>
   2d3d0:	ldr	r0, [r4, #8]
   2d3d4:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2d3d8:	ldr	r0, [r4, #24]
   2d3dc:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2d3e0:	ldr	r0, [r4, #48]	; 0x30
   2d3e4:	tst	r0, #512	; 0x200
   2d3e8:	bne	2d414 <__assert_fail@plt+0x1a824>
   2d3ec:	mov	r5, #0
   2d3f0:	tst	r0, #4
   2d3f4:	bne	2d458 <__assert_fail@plt+0x1a868>
   2d3f8:	ldr	r0, [r4, #28]
   2d3fc:	bl	12adc <fchdir@plt>
   2d400:	cmp	r0, #0
   2d404:	beq	2d434 <__assert_fail@plt+0x1a844>
   2d408:	bl	12908 <__errno_location@plt>
   2d40c:	ldr	r5, [r0]
   2d410:	b	2d438 <__assert_fail@plt+0x1a848>
   2d414:	ldr	r0, [r4, #32]
   2d418:	mov	r5, #0
   2d41c:	cmp	r0, #0
   2d420:	bmi	2d458 <__assert_fail@plt+0x1a868>
   2d424:	bl	12ba8 <close@plt>
   2d428:	cmp	r0, #0
   2d42c:	bne	2d450 <__assert_fail@plt+0x1a860>
   2d430:	b	2d458 <__assert_fail@plt+0x1a868>
   2d434:	mov	r5, #0
   2d438:	ldr	r0, [r4, #28]
   2d43c:	bl	12ba8 <close@plt>
   2d440:	cmp	r5, #0
   2d444:	bne	2d458 <__assert_fail@plt+0x1a868>
   2d448:	cmp	r0, #0
   2d44c:	beq	2d458 <__assert_fail@plt+0x1a868>
   2d450:	bl	12908 <__errno_location@plt>
   2d454:	ldr	r5, [r0]
   2d458:	add	r0, r4, #60	; 0x3c
   2d45c:	bl	2d4a0 <__assert_fail@plt+0x1a8b0>
   2d460:	ldr	r0, [r4, #52]	; 0x34
   2d464:	cmp	r0, #0
   2d468:	beq	2d470 <__assert_fail@plt+0x1a880>
   2d46c:	bl	22a70 <__assert_fail@plt+0xfe80>
   2d470:	mov	r0, r4
   2d474:	bl	2d4dc <__assert_fail@plt+0x1a8ec>
   2d478:	mov	r0, r4
   2d47c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2d480:	cmp	r5, #0
   2d484:	beq	2d498 <__assert_fail@plt+0x1a8a8>
   2d488:	bl	12908 <__errno_location@plt>
   2d48c:	str	r5, [r0]
   2d490:	mvn	r0, #0
   2d494:	pop	{r4, r5, fp, pc}
   2d498:	mov	r0, #0
   2d49c:	pop	{r4, r5, fp, pc}
   2d4a0:	push	{r4, sl, fp, lr}
   2d4a4:	add	fp, sp, #8
   2d4a8:	mov	r4, r0
   2d4ac:	b	2d4b4 <__assert_fail@plt+0x1a8c4>
   2d4b0:	mov	r0, r4
   2d4b4:	bl	3df24 <__assert_fail@plt+0x2b334>
   2d4b8:	cmp	r0, #0
   2d4bc:	bne	2d4d8 <__assert_fail@plt+0x1a8e8>
   2d4c0:	mov	r0, r4
   2d4c4:	bl	3df70 <__assert_fail@plt+0x2b380>
   2d4c8:	cmp	r0, #0
   2d4cc:	bmi	2d4b0 <__assert_fail@plt+0x1a8c0>
   2d4d0:	bl	12ba8 <close@plt>
   2d4d4:	b	2d4b0 <__assert_fail@plt+0x1a8c0>
   2d4d8:	pop	{r4, sl, fp, pc}
   2d4dc:	ldrh	r1, [r0, #48]	; 0x30
   2d4e0:	movw	r2, #258	; 0x102
   2d4e4:	tst	r1, r2
   2d4e8:	beq	2d4fc <__assert_fail@plt+0x1a90c>
   2d4ec:	ldr	r0, [r0, #56]	; 0x38
   2d4f0:	cmp	r0, #0
   2d4f4:	bxeq	lr
   2d4f8:	b	22a70 <__assert_fail@plt+0xfe80>
   2d4fc:	ldr	r0, [r0, #56]	; 0x38
   2d500:	b	2cad4 <__assert_fail@plt+0x19ee4>
   2d504:	push	{r4, r5, r6, r7, fp, lr}
   2d508:	add	fp, sp, #16
   2d50c:	ldr	r6, [r0]
   2d510:	mov	r5, #0
   2d514:	cmp	r6, #0
   2d518:	beq	2dabc <__assert_fail@plt+0x1aecc>
   2d51c:	mov	r4, r0
   2d520:	ldr	r1, [r0, #48]	; 0x30
   2d524:	tst	r1, #8192	; 0x2000
   2d528:	bne	2dabc <__assert_fail@plt+0x1aecc>
   2d52c:	ldrh	r0, [r6, #60]	; 0x3c
   2d530:	mov	r2, #3
   2d534:	strh	r2, [r6, #60]	; 0x3c
   2d538:	cmp	r0, #2
   2d53c:	beq	2d564 <__assert_fail@plt+0x1a974>
   2d540:	cmp	r0, #1
   2d544:	bne	2d5cc <__assert_fail@plt+0x1a9dc>
   2d548:	mov	r0, r4
   2d54c:	mov	r1, r6
   2d550:	mov	r2, #0
   2d554:	bl	2d028 <__assert_fail@plt+0x1a438>
   2d558:	strh	r0, [r6, #56]	; 0x38
   2d55c:	mov	r0, r6
   2d560:	pop	{r4, r5, r6, r7, fp, pc}
   2d564:	ldrh	r2, [r6, #56]	; 0x38
   2d568:	bic	r2, r2, #1
   2d56c:	cmp	r2, #12
   2d570:	bne	2d5cc <__assert_fail@plt+0x1a9dc>
   2d574:	mov	r0, r4
   2d578:	mov	r1, r6
   2d57c:	mov	r2, #1
   2d580:	bl	2d028 <__assert_fail@plt+0x1a438>
   2d584:	strh	r0, [r6, #56]	; 0x38
   2d588:	cmp	r0, #1
   2d58c:	bne	2d6b8 <__assert_fail@plt+0x1aac8>
   2d590:	ldrb	r0, [r4, #48]	; 0x30
   2d594:	tst	r0, #4
   2d598:	bne	2d6b8 <__assert_fail@plt+0x1aac8>
   2d59c:	movw	r1, #64572	; 0xfc3c
   2d5a0:	movt	r1, #3
   2d5a4:	mov	r0, r4
   2d5a8:	bl	2d2f8 <__assert_fail@plt+0x1a708>
   2d5ac:	str	r0, [r6, #36]	; 0x24
   2d5b0:	cmn	r0, #1
   2d5b4:	ble	2d8f8 <__assert_fail@plt+0x1ad08>
   2d5b8:	ldrh	r0, [r6, #58]	; 0x3a
   2d5bc:	orr	r0, r0, #2
   2d5c0:	strh	r0, [r6, #58]	; 0x3a
   2d5c4:	mov	r5, r6
   2d5c8:	b	2d9dc <__assert_fail@plt+0x1adec>
   2d5cc:	ldrh	r2, [r6, #56]	; 0x38
   2d5d0:	cmp	r2, #1
   2d5d4:	bne	2d628 <__assert_fail@plt+0x1aa38>
   2d5d8:	cmp	r0, #4
   2d5dc:	bne	2d6c0 <__assert_fail@plt+0x1aad0>
   2d5e0:	ldrb	r0, [r6, #58]	; 0x3a
   2d5e4:	tst	r0, #2
   2d5e8:	beq	2d5f4 <__assert_fail@plt+0x1aa04>
   2d5ec:	ldr	r0, [r6, #36]	; 0x24
   2d5f0:	bl	12ba8 <close@plt>
   2d5f4:	ldr	r0, [r4, #4]
   2d5f8:	cmp	r0, #0
   2d5fc:	beq	2d60c <__assert_fail@plt+0x1aa1c>
   2d600:	bl	2d328 <__assert_fail@plt+0x1a738>
   2d604:	mov	r0, #0
   2d608:	str	r0, [r4, #4]
   2d60c:	mov	r0, #6
   2d610:	strh	r0, [r6, #56]	; 0x38
   2d614:	mov	r0, r4
   2d618:	mov	r1, r6
   2d61c:	bl	2dac8 <__assert_fail@plt+0x1aed8>
   2d620:	mov	r0, r6
   2d624:	pop	{r4, r5, r6, r7, fp, pc}
   2d628:	ldr	r5, [r6, #8]
   2d62c:	cmp	r5, #0
   2d630:	beq	2d758 <__assert_fail@plt+0x1ab68>
   2d634:	str	r5, [r4]
   2d638:	mov	r0, r6
   2d63c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2d640:	ldr	r0, [r5, #48]	; 0x30
   2d644:	cmp	r0, #0
   2d648:	beq	2d7a4 <__assert_fail@plt+0x1abb4>
   2d64c:	ldrh	r0, [r5, #60]	; 0x3c
   2d650:	cmp	r0, #4
   2d654:	mov	r6, r5
   2d658:	beq	2d628 <__assert_fail@plt+0x1aa38>
   2d65c:	cmp	r0, #2
   2d660:	bne	2d9a0 <__assert_fail@plt+0x1adb0>
   2d664:	mov	r0, r4
   2d668:	mov	r1, r5
   2d66c:	mov	r2, #1
   2d670:	bl	2d028 <__assert_fail@plt+0x1a438>
   2d674:	strh	r0, [r5, #56]	; 0x38
   2d678:	cmp	r0, #1
   2d67c:	bne	2d998 <__assert_fail@plt+0x1ada8>
   2d680:	ldrb	r0, [r4, #48]	; 0x30
   2d684:	tst	r0, #4
   2d688:	bne	2d998 <__assert_fail@plt+0x1ada8>
   2d68c:	movw	r1, #64572	; 0xfc3c
   2d690:	movt	r1, #3
   2d694:	mov	r0, r4
   2d698:	bl	2d2f8 <__assert_fail@plt+0x1a708>
   2d69c:	str	r0, [r5, #36]	; 0x24
   2d6a0:	cmn	r0, #1
   2d6a4:	ble	2d984 <__assert_fail@plt+0x1ad94>
   2d6a8:	ldrh	r0, [r5, #58]	; 0x3a
   2d6ac:	orr	r0, r0, #2
   2d6b0:	strh	r0, [r5, #58]	; 0x3a
   2d6b4:	b	2d998 <__assert_fail@plt+0x1ada8>
   2d6b8:	mov	r5, r6
   2d6bc:	b	2d9dc <__assert_fail@plt+0x1adec>
   2d6c0:	tst	r1, #64	; 0x40
   2d6c4:	beq	2d6e8 <__assert_fail@plt+0x1aaf8>
   2d6c8:	ldr	r0, [r4, #16]
   2d6cc:	ldr	r3, [r4, #20]
   2d6d0:	ldr	r2, [r6, #64]	; 0x40
   2d6d4:	ldr	r5, [r6, #68]	; 0x44
   2d6d8:	eor	r3, r5, r3
   2d6dc:	eor	r0, r2, r0
   2d6e0:	orrs	r0, r0, r3
   2d6e4:	bne	2d5e0 <__assert_fail@plt+0x1a9f0>
   2d6e8:	ldr	r0, [r4, #4]
   2d6ec:	cmp	r0, #0
   2d6f0:	beq	2d7f8 <__assert_fail@plt+0x1ac08>
   2d6f4:	tst	r1, #4096	; 0x1000
   2d6f8:	bne	2d7e4 <__assert_fail@plt+0x1abf4>
   2d6fc:	ldr	r3, [r6, #24]
   2d700:	mov	r0, r4
   2d704:	mov	r1, r6
   2d708:	mvn	r2, #0
   2d70c:	bl	2dba4 <__assert_fail@plt+0x1afb4>
   2d710:	cmp	r0, #0
   2d714:	beq	2d810 <__assert_fail@plt+0x1ac20>
   2d718:	bl	12908 <__errno_location@plt>
   2d71c:	ldr	r0, [r0]
   2d720:	str	r0, [r6, #32]
   2d724:	ldrh	r0, [r6, #58]	; 0x3a
   2d728:	orr	r0, r0, #1
   2d72c:	strh	r0, [r6, #58]	; 0x3a
   2d730:	ldr	r0, [r4, #4]
   2d734:	cmp	r0, #0
   2d738:	beq	2d810 <__assert_fail@plt+0x1ac20>
   2d73c:	ldmib	r0, {r1, r2}
   2d740:	ldr	r1, [r1, #24]
   2d744:	str	r1, [r0, #24]
   2d748:	cmp	r2, #0
   2d74c:	mov	r0, r2
   2d750:	bne	2d73c <__assert_fail@plt+0x1ab4c>
   2d754:	b	2d810 <__assert_fail@plt+0x1ac20>
   2d758:	ldr	r0, [r6, #4]
   2d75c:	ldr	r1, [r0, #12]
   2d760:	cmp	r1, #0
   2d764:	beq	2d85c <__assert_fail@plt+0x1ac6c>
   2d768:	str	r0, [r4]
   2d76c:	ldr	r1, [r4, #24]
   2d770:	ldr	r0, [r0, #40]	; 0x28
   2d774:	mov	r5, #0
   2d778:	strb	r5, [r1, r0]
   2d77c:	mov	r0, r4
   2d780:	mov	r1, #3
   2d784:	bl	2dd8c <__assert_fail@plt+0x1b19c>
   2d788:	cmp	r0, #0
   2d78c:	beq	2d850 <__assert_fail@plt+0x1ac60>
   2d790:	mov	r7, r0
   2d794:	mov	r0, r6
   2d798:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2d79c:	mov	r5, r7
   2d7a0:	b	2d9a0 <__assert_fail@plt+0x1adb0>
   2d7a4:	mov	r0, r4
   2d7a8:	bl	2e5a8 <__assert_fail@plt+0x1b9b8>
   2d7ac:	cmp	r0, #0
   2d7b0:	beq	2d7c4 <__assert_fail@plt+0x1abd4>
   2d7b4:	ldr	r0, [r4, #48]	; 0x30
   2d7b8:	orr	r0, r0, #8192	; 0x2000
   2d7bc:	str	r0, [r4, #48]	; 0x30
   2d7c0:	b	2da60 <__assert_fail@plt+0x1ae70>
   2d7c4:	mov	r0, r4
   2d7c8:	bl	2d4dc <__assert_fail@plt+0x1a8ec>
   2d7cc:	mov	r0, r4
   2d7d0:	mov	r1, r5
   2d7d4:	bl	2e604 <__assert_fail@plt+0x1ba14>
   2d7d8:	mov	r0, r4
   2d7dc:	bl	2d26c <__assert_fail@plt+0x1a67c>
   2d7e0:	b	2d9dc <__assert_fail@plt+0x1adec>
   2d7e4:	bic	r1, r1, #4096	; 0x1000
   2d7e8:	str	r1, [r4, #48]	; 0x30
   2d7ec:	bl	2d328 <__assert_fail@plt+0x1a738>
   2d7f0:	mov	r0, #0
   2d7f4:	str	r0, [r4, #4]
   2d7f8:	mov	r0, r4
   2d7fc:	mov	r1, #3
   2d800:	bl	2dd8c <__assert_fail@plt+0x1b19c>
   2d804:	str	r0, [r4, #4]
   2d808:	cmp	r0, #0
   2d80c:	beq	2d820 <__assert_fail@plt+0x1ac30>
   2d810:	ldr	r5, [r4, #4]
   2d814:	mov	r0, #0
   2d818:	str	r0, [r4, #4]
   2d81c:	b	2d9a0 <__assert_fail@plt+0x1adb0>
   2d820:	ldrb	r0, [r4, #49]	; 0x31
   2d824:	tst	r0, #32
   2d828:	mov	r5, #0
   2d82c:	bne	2dabc <__assert_fail@plt+0x1aecc>
   2d830:	ldr	r0, [r6, #32]
   2d834:	cmp	r0, #0
   2d838:	beq	2d614 <__assert_fail@plt+0x1aa24>
   2d83c:	ldrh	r0, [r6, #56]	; 0x38
   2d840:	cmp	r0, #4
   2d844:	beq	2d614 <__assert_fail@plt+0x1aa24>
   2d848:	mov	r0, #7
   2d84c:	b	2d610 <__assert_fail@plt+0x1aa20>
   2d850:	ldrb	r0, [r4, #49]	; 0x31
   2d854:	tst	r0, #32
   2d858:	bne	2dabc <__assert_fail@plt+0x1aecc>
   2d85c:	ldr	r5, [r6, #4]
   2d860:	str	r5, [r4]
   2d864:	mov	r0, r6
   2d868:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2d86c:	ldr	r0, [r5, #48]	; 0x30
   2d870:	cmn	r0, #1
   2d874:	beq	2d8d8 <__assert_fail@plt+0x1ace8>
   2d878:	ldrh	r0, [r5, #56]	; 0x38
   2d87c:	cmp	r0, #11
   2d880:	beq	2dac4 <__assert_fail@plt+0x1aed4>
   2d884:	ldr	r0, [r5, #40]	; 0x28
   2d888:	ldr	r1, [r4, #24]
   2d88c:	mov	r2, #0
   2d890:	strb	r2, [r1, r0]
   2d894:	ldr	r0, [r5, #48]	; 0x30
   2d898:	cmp	r0, #0
   2d89c:	beq	2d914 <__assert_fail@plt+0x1ad24>
   2d8a0:	ldrh	r0, [r5, #58]	; 0x3a
   2d8a4:	tst	r0, #2
   2d8a8:	bne	2d940 <__assert_fail@plt+0x1ad50>
   2d8ac:	tst	r0, #1
   2d8b0:	bne	2da80 <__assert_fail@plt+0x1ae90>
   2d8b4:	ldr	r1, [r5, #4]
   2d8b8:	movw	r3, #18737	; 0x4931
   2d8bc:	movt	r3, #4
   2d8c0:	mov	r0, r4
   2d8c4:	mvn	r2, #0
   2d8c8:	bl	2dba4 <__assert_fail@plt+0x1afb4>
   2d8cc:	cmp	r0, #0
   2d8d0:	bne	2d924 <__assert_fail@plt+0x1ad34>
   2d8d4:	b	2da80 <__assert_fail@plt+0x1ae90>
   2d8d8:	mov	r0, r5
   2d8dc:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2d8e0:	bl	12908 <__errno_location@plt>
   2d8e4:	mov	r5, #0
   2d8e8:	str	r5, [r0]
   2d8ec:	str	r5, [r4]
   2d8f0:	mov	r0, r5
   2d8f4:	pop	{r4, r5, r6, r7, fp, pc}
   2d8f8:	bl	12908 <__errno_location@plt>
   2d8fc:	ldr	r0, [r0]
   2d900:	mov	r1, #7
   2d904:	strh	r1, [r6, #56]	; 0x38
   2d908:	str	r0, [r6, #32]
   2d90c:	mov	r5, r6
   2d910:	b	2d9dc <__assert_fail@plt+0x1adec>
   2d914:	mov	r0, r4
   2d918:	bl	2e5a8 <__assert_fail@plt+0x1b9b8>
   2d91c:	cmp	r0, #0
   2d920:	beq	2da80 <__assert_fail@plt+0x1ae90>
   2d924:	bl	12908 <__errno_location@plt>
   2d928:	ldr	r0, [r0]
   2d92c:	str	r0, [r5, #32]
   2d930:	ldr	r0, [r4, #48]	; 0x30
   2d934:	orr	r0, r0, #8192	; 0x2000
   2d938:	str	r0, [r4, #48]	; 0x30
   2d93c:	b	2da80 <__assert_fail@plt+0x1ae90>
   2d940:	ldr	r0, [r4, #48]	; 0x30
   2d944:	tst	r0, #4
   2d948:	bne	2da78 <__assert_fail@plt+0x1ae88>
   2d94c:	ldr	r1, [r5, #36]	; 0x24
   2d950:	tst	r0, #512	; 0x200
   2d954:	bne	2da6c <__assert_fail@plt+0x1ae7c>
   2d958:	mov	r0, r1
   2d95c:	bl	12adc <fchdir@plt>
   2d960:	cmp	r0, #0
   2d964:	beq	2da78 <__assert_fail@plt+0x1ae88>
   2d968:	bl	12908 <__errno_location@plt>
   2d96c:	ldr	r0, [r0]
   2d970:	str	r0, [r5, #32]
   2d974:	ldr	r0, [r4, #48]	; 0x30
   2d978:	orr	r0, r0, #8192	; 0x2000
   2d97c:	str	r0, [r4, #48]	; 0x30
   2d980:	b	2da78 <__assert_fail@plt+0x1ae88>
   2d984:	bl	12908 <__errno_location@plt>
   2d988:	ldr	r0, [r0]
   2d98c:	mov	r1, #7
   2d990:	strh	r1, [r5, #56]	; 0x38
   2d994:	str	r0, [r5, #32]
   2d998:	mov	r0, #3
   2d99c:	strh	r0, [r5, #60]	; 0x3c
   2d9a0:	ldr	r0, [r5, #4]
   2d9a4:	ldr	r1, [r0, #28]
   2d9a8:	ldr	r0, [r0, #40]	; 0x28
   2d9ac:	sub	r2, r0, #1
   2d9b0:	ldrb	r1, [r1, r2]
   2d9b4:	cmp	r1, #47	; 0x2f
   2d9b8:	moveq	r0, r2
   2d9bc:	ldr	r1, [r4, #24]
   2d9c0:	mov	r2, #47	; 0x2f
   2d9c4:	strb	r2, [r1, r0]!
   2d9c8:	add	r0, r1, #1
   2d9cc:	add	r1, r5, #168	; 0xa8
   2d9d0:	ldr	r2, [r5, #52]	; 0x34
   2d9d4:	add	r2, r2, #1
   2d9d8:	bl	12584 <memmove@plt>
   2d9dc:	str	r5, [r4]
   2d9e0:	ldrh	r0, [r5, #56]	; 0x38
   2d9e4:	cmp	r0, #11
   2d9e8:	bne	2da20 <__assert_fail@plt+0x1ae30>
   2d9ec:	add	r0, r5, #112	; 0x70
   2d9f0:	ldrd	r0, [r0]
   2d9f4:	eor	r2, r0, #1
   2d9f8:	orrs	r2, r2, r1
   2d9fc:	beq	2dabc <__assert_fail@plt+0x1aecc>
   2da00:	eor	r0, r0, #2
   2da04:	orrs	r0, r0, r1
   2da08:	bne	2dac4 <__assert_fail@plt+0x1aed4>
   2da0c:	mov	r0, r4
   2da10:	mov	r1, r5
   2da14:	mov	r2, #0
   2da18:	bl	2d028 <__assert_fail@plt+0x1a438>
   2da1c:	strh	r0, [r5, #56]	; 0x38
   2da20:	cmp	r0, #1
   2da24:	bne	2dabc <__assert_fail@plt+0x1aecc>
   2da28:	ldr	r0, [r5, #48]	; 0x30
   2da2c:	cmp	r0, #0
   2da30:	bne	2da40 <__assert_fail@plt+0x1ae50>
   2da34:	add	r0, r5, #64	; 0x40
   2da38:	ldrd	r0, [r0]
   2da3c:	strd	r0, [r4, #16]
   2da40:	mov	r0, r4
   2da44:	mov	r1, r5
   2da48:	bl	2e68c <__assert_fail@plt+0x1ba9c>
   2da4c:	cmp	r0, #0
   2da50:	bne	2dabc <__assert_fail@plt+0x1aecc>
   2da54:	bl	12908 <__errno_location@plt>
   2da58:	mov	r1, #12
   2da5c:	str	r1, [r0]
   2da60:	mov	r5, #0
   2da64:	mov	r0, r5
   2da68:	pop	{r4, r5, r6, r7, fp, pc}
   2da6c:	mov	r0, r4
   2da70:	mov	r2, #1
   2da74:	bl	2e74c <__assert_fail@plt+0x1bb5c>
   2da78:	ldr	r0, [r5, #36]	; 0x24
   2da7c:	bl	12ba8 <close@plt>
   2da80:	ldrh	r0, [r5, #56]	; 0x38
   2da84:	cmp	r0, #2
   2da88:	beq	2dab0 <__assert_fail@plt+0x1aec0>
   2da8c:	ldr	r0, [r5, #32]
   2da90:	mov	r1, #7
   2da94:	cmp	r0, #0
   2da98:	movweq	r1, #6
   2da9c:	strh	r1, [r5, #56]	; 0x38
   2daa0:	bne	2dab0 <__assert_fail@plt+0x1aec0>
   2daa4:	mov	r0, r4
   2daa8:	mov	r1, r5
   2daac:	bl	2dac8 <__assert_fail@plt+0x1aed8>
   2dab0:	ldrb	r0, [r4, #49]	; 0x31
   2dab4:	tst	r0, #32
   2dab8:	movne	r5, #0
   2dabc:	mov	r0, r5
   2dac0:	pop	{r4, r5, r6, r7, fp, pc}
   2dac4:	bl	12b9c <abort@plt>
   2dac8:	push	{r4, r5, r7, sl, fp, lr}
   2dacc:	add	fp, sp, #16
   2dad0:	sub	sp, sp, #24
   2dad4:	add	lr, r1, #64	; 0x40
   2dad8:	add	r4, r1, #160	; 0xa0
   2dadc:	ldrh	r2, [r0, #48]	; 0x30
   2dae0:	movw	r3, #258	; 0x102
   2dae4:	tst	r2, r3
   2dae8:	beq	2db20 <__assert_fail@plt+0x1af30>
   2daec:	ldrd	r2, [lr]
   2daf0:	stm	sp, {r2, r3}
   2daf4:	ldrd	r2, [r4]
   2daf8:	str	r3, [sp, #12]
   2dafc:	str	r2, [sp, #8]
   2db00:	ldr	r0, [r0, #56]	; 0x38
   2db04:	mov	r1, sp
   2db08:	bl	23070 <__assert_fail@plt+0x10480>
   2db0c:	cmp	r0, #0
   2db10:	beq	2dba0 <__assert_fail@plt+0x1afb0>
   2db14:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2db18:	sub	sp, fp, #16
   2db1c:	pop	{r4, r5, r7, sl, fp, pc}
   2db20:	ldr	r1, [r1, #4]
   2db24:	cmp	r1, #0
   2db28:	beq	2db98 <__assert_fail@plt+0x1afa8>
   2db2c:	ldr	r2, [r1, #48]	; 0x30
   2db30:	cmp	r2, #0
   2db34:	bmi	2db98 <__assert_fail@plt+0x1afa8>
   2db38:	ldr	ip, [r0, #56]	; 0x38
   2db3c:	ldrd	r2, [ip, #16]
   2db40:	orrs	r2, r2, r3
   2db44:	beq	2dba0 <__assert_fail@plt+0x1afb0>
   2db48:	ldrd	r2, [r4]
   2db4c:	ldrd	r4, [ip]
   2db50:	eor	r3, r5, r3
   2db54:	eor	r2, r4, r2
   2db58:	orrs	r2, r2, r3
   2db5c:	bne	2db98 <__assert_fail@plt+0x1afa8>
   2db60:	add	r3, ip, #8
   2db64:	ldm	lr, {r2, r5}
   2db68:	ldm	r3, {r4, r7}
   2db6c:	eor	r7, r7, r5
   2db70:	eor	r2, r4, r2
   2db74:	orrs	r2, r2, r7
   2db78:	bne	2db98 <__assert_fail@plt+0x1afa8>
   2db7c:	add	r2, r1, #64	; 0x40
   2db80:	add	r1, r1, #160	; 0xa0
   2db84:	ldm	r2, {r2, r5}
   2db88:	stm	r3, {r2, r5}
   2db8c:	ldr	r0, [r0, #56]	; 0x38
   2db90:	ldrd	r2, [r1]
   2db94:	strd	r2, [r0]
   2db98:	sub	sp, fp, #16
   2db9c:	pop	{r4, r5, r7, sl, fp, pc}
   2dba0:	bl	12b9c <abort@plt>
   2dba4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2dba8:	add	fp, sp, #24
   2dbac:	sub	sp, sp, #104	; 0x68
   2dbb0:	mov	r7, r3
   2dbb4:	mov	r4, r2
   2dbb8:	mov	r8, r1
   2dbbc:	mov	r5, r0
   2dbc0:	cmp	r3, #0
   2dbc4:	beq	2dbe8 <__assert_fail@plt+0x1aff8>
   2dbc8:	movw	r1, #18737	; 0x4931
   2dbcc:	movt	r1, #4
   2dbd0:	mov	r0, r7
   2dbd4:	bl	124f4 <strcmp@plt>
   2dbd8:	mov	r6, r0
   2dbdc:	cmp	r0, #0
   2dbe0:	movwne	r6, #1
   2dbe4:	b	2dbec <__assert_fail@plt+0x1affc>
   2dbe8:	mov	r6, #1
   2dbec:	ldr	r0, [r5, #48]	; 0x30
   2dbf0:	tst	r0, #4
   2dbf4:	bne	2dc4c <__assert_fail@plt+0x1b05c>
   2dbf8:	mov	r9, #0
   2dbfc:	cmn	r4, #1
   2dc00:	mov	r1, #0
   2dc04:	movwgt	r1, #1
   2dc08:	orrs	r1, r1, r6
   2dc0c:	bne	2dc6c <__assert_fail@plt+0x1b07c>
   2dc10:	ands	r0, r0, #512	; 0x200
   2dc14:	beq	2dc6c <__assert_fail@plt+0x1b07c>
   2dc18:	add	r4, r5, #60	; 0x3c
   2dc1c:	mov	r0, r4
   2dc20:	bl	3df24 <__assert_fail@plt+0x2b334>
   2dc24:	cmp	r0, #0
   2dc28:	bne	2dc74 <__assert_fail@plt+0x1b084>
   2dc2c:	mov	r0, r4
   2dc30:	bl	3df70 <__assert_fail@plt+0x2b380>
   2dc34:	cmn	r0, #1
   2dc38:	ble	2dc74 <__assert_fail@plt+0x1b084>
   2dc3c:	mov	r4, r0
   2dc40:	mov	r9, #0
   2dc44:	mov	r7, #0
   2dc48:	b	2dc90 <__assert_fail@plt+0x1b0a0>
   2dc4c:	mov	r5, #0
   2dc50:	cmp	r4, #0
   2dc54:	bmi	2dd80 <__assert_fail@plt+0x1b190>
   2dc58:	ands	r0, r0, #512	; 0x200
   2dc5c:	beq	2dd80 <__assert_fail@plt+0x1b190>
   2dc60:	mov	r0, r4
   2dc64:	bl	12ba8 <close@plt>
   2dc68:	b	2dd80 <__assert_fail@plt+0x1b190>
   2dc6c:	cmn	r4, #1
   2dc70:	bgt	2dc90 <__assert_fail@plt+0x1b0a0>
   2dc74:	mov	r0, r5
   2dc78:	mov	r1, r7
   2dc7c:	bl	2d2f8 <__assert_fail@plt+0x1a708>
   2dc80:	cmp	r0, #0
   2dc84:	bmi	2dd30 <__assert_fail@plt+0x1b140>
   2dc88:	mov	r4, r0
   2dc8c:	mov	r9, #1
   2dc90:	ldrb	r0, [r5, #48]	; 0x30
   2dc94:	tst	r0, #2
   2dc98:	bne	2dcbc <__assert_fail@plt+0x1b0cc>
   2dc9c:	cmp	r7, #0
   2dca0:	beq	2dd0c <__assert_fail@plt+0x1b11c>
   2dca4:	movw	r1, #18737	; 0x4931
   2dca8:	movt	r1, #4
   2dcac:	mov	r0, r7
   2dcb0:	bl	124f4 <strcmp@plt>
   2dcb4:	cmp	r0, #0
   2dcb8:	bne	2dd0c <__assert_fail@plt+0x1b11c>
   2dcbc:	mov	r1, sp
   2dcc0:	mov	r0, r4
   2dcc4:	bl	3ea14 <__assert_fail@plt+0x2be24>
   2dcc8:	cmp	r0, #0
   2dccc:	bne	2dd5c <__assert_fail@plt+0x1b16c>
   2dcd0:	add	r0, r8, #64	; 0x40
   2dcd4:	ldrd	r0, [r0]
   2dcd8:	ldm	sp, {r2, r3}
   2dcdc:	eor	r1, r1, r3
   2dce0:	eor	r0, r0, r2
   2dce4:	orrs	r0, r0, r1
   2dce8:	bne	2dd50 <__assert_fail@plt+0x1b160>
   2dcec:	add	r0, r8, #160	; 0xa0
   2dcf0:	ldrd	r0, [r0]
   2dcf4:	ldr	r2, [sp, #96]	; 0x60
   2dcf8:	ldr	r3, [sp, #100]	; 0x64
   2dcfc:	eor	r1, r1, r3
   2dd00:	eor	r0, r0, r2
   2dd04:	orrs	r0, r0, r1
   2dd08:	bne	2dd50 <__assert_fail@plt+0x1b160>
   2dd0c:	ldrb	r0, [r5, #49]	; 0x31
   2dd10:	tst	r0, #2
   2dd14:	bne	2dd38 <__assert_fail@plt+0x1b148>
   2dd18:	mov	r0, r4
   2dd1c:	bl	12adc <fchdir@plt>
   2dd20:	mov	r5, r0
   2dd24:	cmp	r9, #0
   2dd28:	bne	2dd68 <__assert_fail@plt+0x1b178>
   2dd2c:	b	2dd80 <__assert_fail@plt+0x1b190>
   2dd30:	mvn	r5, #0
   2dd34:	b	2dd80 <__assert_fail@plt+0x1b190>
   2dd38:	mov	r0, r5
   2dd3c:	mov	r1, r4
   2dd40:	mov	r2, r6
   2dd44:	bl	2e74c <__assert_fail@plt+0x1bb5c>
   2dd48:	mov	r5, #0
   2dd4c:	b	2dd80 <__assert_fail@plt+0x1b190>
   2dd50:	bl	12908 <__errno_location@plt>
   2dd54:	mov	r1, #2
   2dd58:	str	r1, [r0]
   2dd5c:	mvn	r5, #0
   2dd60:	cmp	r9, #0
   2dd64:	beq	2dd80 <__assert_fail@plt+0x1b190>
   2dd68:	bl	12908 <__errno_location@plt>
   2dd6c:	mov	r6, r0
   2dd70:	ldr	r7, [r0]
   2dd74:	mov	r0, r4
   2dd78:	bl	12ba8 <close@plt>
   2dd7c:	str	r7, [r6]
   2dd80:	mov	r0, r5
   2dd84:	sub	sp, fp, #24
   2dd88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2dd8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dd90:	add	fp, sp, #28
   2dd94:	sub	sp, sp, #68	; 0x44
   2dd98:	mov	r4, r1
   2dd9c:	mov	r6, r0
   2dda0:	ldr	sl, [r0]
   2dda4:	ldr	r7, [sl, #12]
   2dda8:	cmp	r7, #0
   2ddac:	beq	2e108 <__assert_fail@plt+0x1b518>
   2ddb0:	mov	r0, r7
   2ddb4:	bl	12ad0 <dirfd@plt>
   2ddb8:	str	r0, [fp, #-32]	; 0xffffffe0
   2ddbc:	cmn	r0, #1
   2ddc0:	ble	2e13c <__assert_fail@plt+0x1b54c>
   2ddc4:	mov	r1, r6
   2ddc8:	ldr	r0, [r1, #44]!	; 0x2c
   2ddcc:	str	r1, [fp, #-40]	; 0xffffffd8
   2ddd0:	mvn	r1, #0
   2ddd4:	cmp	r0, #0
   2ddd8:	movweq	r1, #34464	; 0x86a0
   2dddc:	movteq	r1, #1
   2dde0:	str	r1, [sp, #28]
   2dde4:	mov	r0, #1
   2dde8:	str	r0, [sp, #4]
   2ddec:	str	r4, [sp, #8]
   2ddf0:	ldr	r1, [sl, #28]
   2ddf4:	ldr	r0, [sl, #40]	; 0x28
   2ddf8:	sub	r2, r0, #1
   2ddfc:	ldrb	r1, [r1, r2]
   2de00:	cmp	r1, #47	; 0x2f
   2de04:	moveq	r0, r2
   2de08:	ldrb	r1, [r6, #48]	; 0x30
   2de0c:	mov	r9, #0
   2de10:	tst	r1, #4
   2de14:	mov	r1, #0
   2de18:	str	r1, [sp, #44]	; 0x2c
   2de1c:	beq	2de34 <__assert_fail@plt+0x1b244>
   2de20:	ldr	r1, [r6, #24]
   2de24:	mov	r2, #47	; 0x2f
   2de28:	strb	r2, [r1, r0]!
   2de2c:	add	r1, r1, #1
   2de30:	str	r1, [sp, #44]	; 0x2c
   2de34:	add	r1, r0, #1
   2de38:	ldr	r4, [sl, #12]
   2de3c:	cmp	r4, #0
   2de40:	str	r1, [fp, #-36]	; 0xffffffdc
   2de44:	str	r7, [sp, #12]
   2de48:	beq	2e158 <__assert_fail@plt+0x1b568>
   2de4c:	ldr	r0, [sl, #48]	; 0x30
   2de50:	add	r0, r0, #1
   2de54:	str	r0, [sp, #24]
   2de58:	str	r6, [sp, #36]	; 0x24
   2de5c:	ldr	r0, [r6, #36]	; 0x24
   2de60:	sub	r0, r0, r1
   2de64:	str	r0, [sp, #48]	; 0x30
   2de68:	mov	r6, #0
   2de6c:	bl	12908 <__errno_location@plt>
   2de70:	str	r0, [sp, #40]	; 0x28
   2de74:	mov	r9, #0
   2de78:	mov	r7, #0
   2de7c:	mov	r0, #0
   2de80:	str	r0, [fp, #-44]	; 0xffffffd4
   2de84:	mov	r0, #0
   2de88:	str	r0, [sp, #20]
   2de8c:	mov	r0, #0
   2de90:	str	r0, [sp, #16]
   2de94:	str	sl, [sp, #32]
   2de98:	ldr	r0, [sp, #40]	; 0x28
   2de9c:	str	r6, [r0]
   2dea0:	mov	r0, r4
   2dea4:	bl	12aa0 <readdir64@plt>
   2dea8:	cmp	r0, #0
   2deac:	beq	2e388 <__assert_fail@plt+0x1b798>
   2deb0:	mov	r8, r0
   2deb4:	mov	r5, r9
   2deb8:	ldr	r6, [sp, #36]	; 0x24
   2debc:	ldrb	r0, [r6, #48]	; 0x30
   2dec0:	tst	r0, #32
   2dec4:	bne	2def4 <__assert_fail@plt+0x1b304>
   2dec8:	ldrb	r0, [r8, #19]
   2decc:	cmp	r0, #46	; 0x2e
   2ded0:	bne	2def4 <__assert_fail@plt+0x1b304>
   2ded4:	ldrb	r0, [r8, #20]
   2ded8:	cmp	r0, #0
   2dedc:	beq	2e0f8 <__assert_fail@plt+0x1b508>
   2dee0:	cmp	r0, #46	; 0x2e
   2dee4:	bne	2def4 <__assert_fail@plt+0x1b304>
   2dee8:	ldrb	r0, [r8, #21]
   2deec:	cmp	r0, #0
   2def0:	beq	2e0f8 <__assert_fail@plt+0x1b508>
   2def4:	add	r4, r8, #19
   2def8:	mov	r0, r4
   2defc:	bl	128c0 <strlen@plt>
   2df00:	mov	sl, r0
   2df04:	mov	r0, r6
   2df08:	mov	r1, r4
   2df0c:	mov	r2, sl
   2df10:	bl	2cf74 <__assert_fail@plt+0x1a384>
   2df14:	mov	r9, r0
   2df18:	cmp	r0, #0
   2df1c:	beq	2e16c <__assert_fail@plt+0x1b57c>
   2df20:	ldr	r0, [sp, #48]	; 0x30
   2df24:	cmp	sl, r0
   2df28:	bcs	2df3c <__assert_fail@plt+0x1b34c>
   2df2c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   2df30:	adds	r0, sl, r2
   2df34:	bcc	2dfa4 <__assert_fail@plt+0x1b3b4>
   2df38:	b	2e3e4 <__assert_fail@plt+0x1b7f4>
   2df3c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2df40:	add	r0, sl, r0
   2df44:	add	r1, r0, #1
   2df48:	ldr	r4, [r6, #24]
   2df4c:	mov	r0, r6
   2df50:	bl	2cef8 <__assert_fail@plt+0x1a308>
   2df54:	cmp	r0, #0
   2df58:	beq	2e16c <__assert_fail@plt+0x1b57c>
   2df5c:	ldr	r0, [r6, #24]
   2df60:	cmp	r4, r0
   2df64:	beq	2df8c <__assert_fail@plt+0x1b39c>
   2df68:	ldrb	r1, [r6, #48]	; 0x30
   2df6c:	tst	r1, #4
   2df70:	ldr	r1, [sp, #44]	; 0x2c
   2df74:	ldr	r2, [fp, #-36]	; 0xffffffdc
   2df78:	addne	r1, r0, r2
   2df7c:	str	r1, [sp, #44]	; 0x2c
   2df80:	mov	r0, #1
   2df84:	str	r0, [sp, #16]
   2df88:	b	2df90 <__assert_fail@plt+0x1b3a0>
   2df8c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   2df90:	ldr	r0, [r6, #36]	; 0x24
   2df94:	sub	r0, r0, r2
   2df98:	str	r0, [sp, #48]	; 0x30
   2df9c:	adds	r0, sl, r2
   2dfa0:	bcs	2e3e4 <__assert_fail@plt+0x1b7f4>
   2dfa4:	ldr	r1, [sp, #24]
   2dfa8:	str	r1, [r9, #48]	; 0x30
   2dfac:	ldr	r1, [r6]
   2dfb0:	str	r0, [r9, #40]	; 0x28
   2dfb4:	str	r1, [r9, #4]
   2dfb8:	ldrd	r0, [r8]
   2dfbc:	strd	r0, [r9, #160]	; 0xa0
   2dfc0:	ldrb	r0, [r6, #48]	; 0x30
   2dfc4:	tst	r0, #4
   2dfc8:	bne	2dfd8 <__assert_fail@plt+0x1b3e8>
   2dfcc:	add	r0, r9, #168	; 0xa8
   2dfd0:	str	r0, [r9, #24]
   2dfd4:	b	2dff4 <__assert_fail@plt+0x1b404>
   2dfd8:	ldr	r0, [r9, #28]
   2dfdc:	ldr	r2, [r9, #52]	; 0x34
   2dfe0:	str	r0, [r9, #24]
   2dfe4:	add	r1, r9, #168	; 0xa8
   2dfe8:	add	r2, r2, #1
   2dfec:	ldr	r0, [sp, #44]	; 0x2c
   2dff0:	bl	12584 <memmove@plt>
   2dff4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2dff8:	ldr	r0, [r0]
   2dffc:	cmp	r0, #0
   2e000:	beq	2e02c <__assert_fail@plt+0x1b43c>
   2e004:	ldrb	r0, [r6, #49]	; 0x31
   2e008:	tst	r0, #4
   2e00c:	bne	2e02c <__assert_fail@plt+0x1b43c>
   2e010:	mov	r0, r6
   2e014:	mov	r1, r9
   2e018:	mov	r2, #0
   2e01c:	bl	2d028 <__assert_fail@plt+0x1a438>
   2e020:	strh	r0, [r9, #56]	; 0x38
   2e024:	ldr	sl, [sp, #32]
   2e028:	b	2e088 <__assert_fail@plt+0x1b498>
   2e02c:	add	r0, r9, #64	; 0x40
   2e030:	ldr	r1, [r6, #48]	; 0x30
   2e034:	mov	r4, #0
   2e038:	tst	r1, #8
   2e03c:	bne	2e048 <__assert_fail@plt+0x1b458>
   2e040:	ldr	sl, [sp, #32]
   2e044:	b	2e06c <__assert_fail@plt+0x1b47c>
   2e048:	ldrb	r2, [r8, #18]
   2e04c:	orr	r3, r2, #4
   2e050:	cmp	r3, #4
   2e054:	ldr	sl, [sp, #32]
   2e058:	beq	2e06c <__assert_fail@plt+0x1b47c>
   2e05c:	eor	r2, r2, #10
   2e060:	and	r1, r1, #16
   2e064:	orrs	r4, r1, r2
   2e068:	movwne	r4, #1
   2e06c:	mov	r1, #11
   2e070:	strh	r1, [r9, #56]	; 0x38
   2e074:	ldrb	r1, [r8, #18]
   2e078:	bl	2ea1c <__assert_fail@plt+0x1be2c>
   2e07c:	eor	r1, r4, #1
   2e080:	mov	r0, r9
   2e084:	bl	2cff8 <__assert_fail@plt+0x1a408>
   2e088:	mov	r6, #0
   2e08c:	str	r6, [r9, #8]
   2e090:	cmp	r5, #0
   2e094:	mov	r4, r9
   2e098:	ldrne	r0, [fp, #-44]	; 0xffffffd4
   2e09c:	strne	r9, [r0, #8]
   2e0a0:	movne	r4, r5
   2e0a4:	movw	r0, #10000	; 0x2710
   2e0a8:	cmp	r7, r0
   2e0ac:	bne	2e0d0 <__assert_fail@plt+0x1b4e0>
   2e0b0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2e0b4:	ldr	r0, [r0]
   2e0b8:	cmp	r0, #0
   2e0bc:	bne	2e0d0 <__assert_fail@plt+0x1b4e0>
   2e0c0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2e0c4:	mov	r0, sl
   2e0c8:	bl	2ea40 <__assert_fail@plt+0x1be50>
   2e0cc:	str	r0, [sp, #20]
   2e0d0:	add	r7, r7, #1
   2e0d4:	ldr	r0, [sp, #28]
   2e0d8:	cmp	r0, r7
   2e0dc:	bls	2e42c <__assert_fail@plt+0x1b83c>
   2e0e0:	str	r9, [fp, #-44]	; 0xffffffd4
   2e0e4:	mov	r9, r4
   2e0e8:	ldr	r4, [sl, #12]
   2e0ec:	cmp	r4, #0
   2e0f0:	bne	2de98 <__assert_fail@plt+0x1b2a8>
   2e0f4:	b	2e3d8 <__assert_fail@plt+0x1b7e8>
   2e0f8:	ldr	sl, [sp, #32]
   2e0fc:	mov	r9, r5
   2e100:	mov	r6, #0
   2e104:	b	2e0e8 <__assert_fail@plt+0x1b4f8>
   2e108:	ldr	r3, [r6, #48]	; 0x30
   2e10c:	and	r1, r3, #516	; 0x204
   2e110:	mvn	r0, #99	; 0x63
   2e114:	cmp	r1, #512	; 0x200
   2e118:	ldreq	r0, [r6, #32]
   2e11c:	ldr	r1, [sl, #24]
   2e120:	mov	r2, #0
   2e124:	tst	r3, #16
   2e128:	beq	2e1c0 <__assert_fail@plt+0x1b5d0>
   2e12c:	tst	r3, #1
   2e130:	bne	2e1b4 <__assert_fail@plt+0x1b5c4>
   2e134:	mov	r2, #32768	; 0x8000
   2e138:	b	2e1c0 <__assert_fail@plt+0x1b5d0>
   2e13c:	ldr	r0, [sl, #12]
   2e140:	bl	12bc0 <closedir@plt>
   2e144:	mov	r9, #0
   2e148:	str	r9, [sl, #12]
   2e14c:	cmp	r4, #3
   2e150:	beq	2e204 <__assert_fail@plt+0x1b614>
   2e154:	b	2e59c <__assert_fail@plt+0x1b9ac>
   2e158:	mov	r7, #0
   2e15c:	mov	r0, #0
   2e160:	str	r0, [sp, #20]
   2e164:	ldr	r4, [sp, #8]
   2e168:	b	2e44c <__assert_fail@plt+0x1b85c>
   2e16c:	ldr	r7, [sp, #40]	; 0x28
   2e170:	ldr	r4, [r7]
   2e174:	mov	r0, r9
   2e178:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2e17c:	mov	r0, r5
   2e180:	bl	2d328 <__assert_fail@plt+0x1a738>
   2e184:	ldr	r5, [sp, #32]
   2e188:	ldr	r0, [r5, #12]
   2e18c:	bl	12bc0 <closedir@plt>
   2e190:	mov	r0, #7
   2e194:	strh	r0, [r5, #56]	; 0x38
   2e198:	mov	r9, #0
   2e19c:	str	r9, [r5, #12]
   2e1a0:	ldr	r0, [r6, #48]	; 0x30
   2e1a4:	orr	r0, r0, #8192	; 0x2000
   2e1a8:	str	r0, [r6, #48]	; 0x30
   2e1ac:	str	r4, [r7]
   2e1b0:	b	2e59c <__assert_fail@plt+0x1b9ac>
   2e1b4:	ldr	r3, [sl, #48]	; 0x30
   2e1b8:	cmp	r3, #0
   2e1bc:	movne	r2, #32768	; 0x8000
   2e1c0:	sub	r3, fp, #32
   2e1c4:	bl	3e23c <__assert_fail@plt+0x2b64c>
   2e1c8:	str	r0, [sl, #12]
   2e1cc:	cmp	r0, #0
   2e1d0:	beq	2e1f8 <__assert_fail@plt+0x1b608>
   2e1d4:	ldrh	r0, [sl, #56]	; 0x38
   2e1d8:	cmp	r0, #11
   2e1dc:	bne	2e21c <__assert_fail@plt+0x1b62c>
   2e1e0:	mov	r0, r6
   2e1e4:	mov	r1, sl
   2e1e8:	mov	r2, #0
   2e1ec:	bl	2d028 <__assert_fail@plt+0x1a438>
   2e1f0:	strh	r0, [sl, #56]	; 0x38
   2e1f4:	b	2e25c <__assert_fail@plt+0x1b66c>
   2e1f8:	mov	r9, #0
   2e1fc:	cmp	r4, #3
   2e200:	bne	2e59c <__assert_fail@plt+0x1b9ac>
   2e204:	mov	r0, #4
   2e208:	strh	r0, [sl, #56]	; 0x38
   2e20c:	bl	12908 <__errno_location@plt>
   2e210:	ldr	r0, [r0]
   2e214:	str	r0, [sl, #32]
   2e218:	b	2e59c <__assert_fail@plt+0x1b9ac>
   2e21c:	ldrb	r0, [r6, #49]	; 0x31
   2e220:	tst	r0, #1
   2e224:	beq	2e25c <__assert_fail@plt+0x1b66c>
   2e228:	mov	r0, r6
   2e22c:	mov	r1, sl
   2e230:	bl	2dac8 <__assert_fail@plt+0x1aed8>
   2e234:	mov	r9, #0
   2e238:	mov	r0, r6
   2e23c:	mov	r1, sl
   2e240:	mov	r2, #0
   2e244:	bl	2d028 <__assert_fail@plt+0x1a438>
   2e248:	mov	r0, r6
   2e24c:	mov	r1, sl
   2e250:	bl	2e68c <__assert_fail@plt+0x1ba9c>
   2e254:	cmp	r0, #0
   2e258:	beq	2e55c <__assert_fail@plt+0x1b96c>
   2e25c:	mov	r1, r6
   2e260:	ldr	r0, [r1, #44]!	; 0x2c
   2e264:	str	r1, [fp, #-40]	; 0xffffffd8
   2e268:	mvn	r1, #0
   2e26c:	cmp	r0, #0
   2e270:	movweq	r1, #34464	; 0x86a0
   2e274:	movteq	r1, #1
   2e278:	str	r1, [sp, #28]
   2e27c:	mov	r5, #0
   2e280:	cmp	r4, #2
   2e284:	beq	2e2c0 <__assert_fail@plt+0x1b6d0>
   2e288:	ldr	r0, [r6, #48]	; 0x30
   2e28c:	and	r1, r0, #56	; 0x38
   2e290:	mov	r0, #0
   2e294:	cmp	r1, #24
   2e298:	bne	2e2bc <__assert_fail@plt+0x1b6cc>
   2e29c:	ldr	r1, [sl, #84]	; 0x54
   2e2a0:	cmp	r1, #2
   2e2a4:	bne	2e2bc <__assert_fail@plt+0x1b6cc>
   2e2a8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2e2ac:	mov	r0, sl
   2e2b0:	bl	2e9b4 <__assert_fail@plt+0x1bdc4>
   2e2b4:	cmp	r0, #0
   2e2b8:	movwne	r0, #1
   2e2bc:	eor	r5, r0, #1
   2e2c0:	cmp	r4, #3
   2e2c4:	beq	2e2d8 <__assert_fail@plt+0x1b6e8>
   2e2c8:	cmp	r5, #0
   2e2cc:	bne	2e2d8 <__assert_fail@plt+0x1b6e8>
   2e2d0:	str	r5, [sp, #4]
   2e2d4:	b	2ddec <__assert_fail@plt+0x1b1fc>
   2e2d8:	ldrb	r0, [r6, #49]	; 0x31
   2e2dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   2e2e0:	tst	r0, #2
   2e2e4:	beq	2e300 <__assert_fail@plt+0x1b710>
   2e2e8:	mov	r0, r2
   2e2ec:	movw	r1, #1030	; 0x406
   2e2f0:	mov	r2, #3
   2e2f4:	bl	2c888 <__assert_fail@plt+0x19c98>
   2e2f8:	mov	r2, r0
   2e2fc:	str	r0, [fp, #-32]	; 0xffffffe0
   2e300:	cmp	r2, #0
   2e304:	bmi	2e320 <__assert_fail@plt+0x1b730>
   2e308:	mov	r0, r6
   2e30c:	mov	r1, sl
   2e310:	mov	r3, #0
   2e314:	bl	2dba4 <__assert_fail@plt+0x1afb4>
   2e318:	cmp	r0, #0
   2e31c:	beq	2dde4 <__assert_fail@plt+0x1b1f4>
   2e320:	subs	r0, r4, #3
   2e324:	movwne	r0, #1
   2e328:	eor	r1, r5, #1
   2e32c:	orrs	r0, r0, r1
   2e330:	bne	2e340 <__assert_fail@plt+0x1b750>
   2e334:	bl	12908 <__errno_location@plt>
   2e338:	ldr	r0, [r0]
   2e33c:	str	r0, [sl, #32]
   2e340:	ldrh	r0, [sl, #58]	; 0x3a
   2e344:	orr	r0, r0, #1
   2e348:	strh	r0, [sl, #58]	; 0x3a
   2e34c:	ldr	r0, [sl, #12]
   2e350:	bl	12bc0 <closedir@plt>
   2e354:	mov	r5, #0
   2e358:	str	r5, [sl, #12]
   2e35c:	ldrb	r0, [r6, #49]	; 0x31
   2e360:	tst	r0, #2
   2e364:	beq	2e378 <__assert_fail@plt+0x1b788>
   2e368:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2e36c:	cmp	r0, #0
   2e370:	bmi	2e378 <__assert_fail@plt+0x1b788>
   2e374:	bl	12ba8 <close@plt>
   2e378:	mov	r0, #0
   2e37c:	str	r0, [sp, #4]
   2e380:	str	r5, [sl, #12]
   2e384:	b	2ddec <__assert_fail@plt+0x1b1fc>
   2e388:	ldr	r0, [sp, #40]	; 0x28
   2e38c:	ldr	r0, [r0]
   2e390:	cmp	r0, #0
   2e394:	beq	2e3b0 <__assert_fail@plt+0x1b7c0>
   2e398:	str	r0, [sl, #32]
   2e39c:	ldr	r0, [sp, #12]
   2e3a0:	orrs	r0, r0, r7
   2e3a4:	mov	r0, #4
   2e3a8:	movwne	r0, #7
   2e3ac:	strh	r0, [sl, #56]	; 0x38
   2e3b0:	ldr	r0, [sl, #12]
   2e3b4:	cmp	r0, #0
   2e3b8:	ldr	r4, [sp, #8]
   2e3bc:	beq	2e3cc <__assert_fail@plt+0x1b7dc>
   2e3c0:	bl	12bc0 <closedir@plt>
   2e3c4:	mov	r0, #0
   2e3c8:	str	r0, [sl, #12]
   2e3cc:	ldr	r0, [sp, #16]
   2e3d0:	tst	r0, #1
   2e3d4:	b	2e43c <__assert_fail@plt+0x1b84c>
   2e3d8:	ldr	r0, [sp, #16]
   2e3dc:	tst	r0, #1
   2e3e0:	b	2e438 <__assert_fail@plt+0x1b848>
   2e3e4:	mov	r0, r9
   2e3e8:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2e3ec:	mov	r0, r5
   2e3f0:	bl	2d328 <__assert_fail@plt+0x1a738>
   2e3f4:	ldr	r4, [sp, #32]
   2e3f8:	ldr	r0, [r4, #12]
   2e3fc:	bl	12bc0 <closedir@plt>
   2e400:	mov	r0, #7
   2e404:	strh	r0, [r4, #56]	; 0x38
   2e408:	mov	r9, #0
   2e40c:	str	r9, [r4, #12]
   2e410:	ldr	r0, [r6, #48]	; 0x30
   2e414:	orr	r0, r0, #8192	; 0x2000
   2e418:	str	r0, [r6, #48]	; 0x30
   2e41c:	mov	r0, #36	; 0x24
   2e420:	ldr	r1, [sp, #40]	; 0x28
   2e424:	str	r0, [r1]
   2e428:	b	2e59c <__assert_fail@plt+0x1b9ac>
   2e42c:	ldr	r0, [sp, #16]
   2e430:	tst	r0, #1
   2e434:	mov	r9, r4
   2e438:	ldr	r4, [sp, #8]
   2e43c:	ldr	r6, [sp, #36]	; 0x24
   2e440:	movne	r0, r6
   2e444:	movne	r1, r9
   2e448:	blne	2ea84 <__assert_fail@plt+0x1be94>
   2e44c:	ldrb	r0, [r6, #48]	; 0x30
   2e450:	tst	r0, #4
   2e454:	beq	2e480 <__assert_fail@plt+0x1b890>
   2e458:	ldr	r0, [r6, #36]	; 0x24
   2e45c:	ldr	r2, [sp, #44]	; 0x2c
   2e460:	sub	r1, r2, #1
   2e464:	ldr	r3, [fp, #-36]	; 0xffffffdc
   2e468:	cmp	r3, r0
   2e46c:	moveq	r2, r1
   2e470:	cmp	r7, #0
   2e474:	moveq	r2, r1
   2e478:	mov	r0, #0
   2e47c:	strb	r0, [r2]
   2e480:	ldr	r0, [sp, #12]
   2e484:	cmp	r0, #0
   2e488:	ldreq	r0, [sp, #4]
   2e48c:	eorseq	r0, r0, #1
   2e490:	beq	2e4bc <__assert_fail@plt+0x1b8cc>
   2e494:	cmp	r7, #0
   2e498:	bne	2e4f8 <__assert_fail@plt+0x1b908>
   2e49c:	cmp	r4, #3
   2e4a0:	bne	2e590 <__assert_fail@plt+0x1b9a0>
   2e4a4:	ldrh	r0, [sl, #56]	; 0x38
   2e4a8:	cmp	r0, #4
   2e4ac:	cmpne	r0, #7
   2e4b0:	movne	r0, #6
   2e4b4:	strhne	r0, [sl, #56]	; 0x38
   2e4b8:	b	2e590 <__assert_fail@plt+0x1b9a0>
   2e4bc:	cmp	r4, #1
   2e4c0:	cmpne	r7, #0
   2e4c4:	bne	2e4f8 <__assert_fail@plt+0x1b908>
   2e4c8:	ldr	r0, [sl, #48]	; 0x30
   2e4cc:	cmp	r0, #0
   2e4d0:	beq	2e56c <__assert_fail@plt+0x1b97c>
   2e4d4:	ldr	r1, [sl, #4]
   2e4d8:	movw	r3, #18737	; 0x4931
   2e4dc:	movt	r3, #4
   2e4e0:	mov	r0, r6
   2e4e4:	mvn	r2, #0
   2e4e8:	bl	2dba4 <__assert_fail@plt+0x1afb4>
   2e4ec:	cmp	r0, #0
   2e4f0:	bne	2e57c <__assert_fail@plt+0x1b98c>
   2e4f4:	b	2e494 <__assert_fail@plt+0x1b8a4>
   2e4f8:	ldr	r0, [sp, #20]
   2e4fc:	tst	r0, #1
   2e500:	beq	2e52c <__assert_fail@plt+0x1b93c>
   2e504:	movw	r0, #60196	; 0xeb24
   2e508:	movt	r0, #2
   2e50c:	str	r0, [r6, #44]	; 0x2c
   2e510:	mov	r0, r6
   2e514:	mov	r1, r9
   2e518:	mov	r2, r7
   2e51c:	bl	2d19c <__assert_fail@plt+0x1a5ac>
   2e520:	mov	r9, r0
   2e524:	mov	r0, #0
   2e528:	str	r0, [r6, #44]	; 0x2c
   2e52c:	cmp	r7, #2
   2e530:	bcc	2e59c <__assert_fail@plt+0x1b9ac>
   2e534:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2e538:	ldr	r0, [r0]
   2e53c:	cmp	r0, #0
   2e540:	beq	2e59c <__assert_fail@plt+0x1b9ac>
   2e544:	mov	r0, r6
   2e548:	mov	r1, r9
   2e54c:	mov	r2, r7
   2e550:	bl	2d19c <__assert_fail@plt+0x1a5ac>
   2e554:	mov	r9, r0
   2e558:	b	2e59c <__assert_fail@plt+0x1b9ac>
   2e55c:	bl	12908 <__errno_location@plt>
   2e560:	mov	r1, #12
   2e564:	str	r1, [r0]
   2e568:	b	2e59c <__assert_fail@plt+0x1b9ac>
   2e56c:	mov	r0, r6
   2e570:	bl	2e5a8 <__assert_fail@plt+0x1b9b8>
   2e574:	cmp	r0, #0
   2e578:	beq	2e494 <__assert_fail@plt+0x1b8a4>
   2e57c:	mov	r0, #7
   2e580:	strh	r0, [sl, #56]	; 0x38
   2e584:	ldr	r0, [r6, #48]	; 0x30
   2e588:	orr	r0, r0, #8192	; 0x2000
   2e58c:	str	r0, [r6, #48]	; 0x30
   2e590:	mov	r0, r9
   2e594:	bl	2d328 <__assert_fail@plt+0x1a738>
   2e598:	mov	r9, #0
   2e59c:	mov	r0, r9
   2e5a0:	sub	sp, fp, #28
   2e5a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e5a8:	push	{r4, r5, fp, lr}
   2e5ac:	add	fp, sp, #8
   2e5b0:	mov	r4, r0
   2e5b4:	ldr	r0, [r0, #48]	; 0x30
   2e5b8:	mov	r5, #0
   2e5bc:	tst	r0, #4
   2e5c0:	bne	2e5f4 <__assert_fail@plt+0x1ba04>
   2e5c4:	tst	r0, #512	; 0x200
   2e5c8:	bne	2e5e4 <__assert_fail@plt+0x1b9f4>
   2e5cc:	ldr	r0, [r4, #28]
   2e5d0:	bl	12adc <fchdir@plt>
   2e5d4:	mov	r5, r0
   2e5d8:	cmp	r0, #0
   2e5dc:	movwne	r5, #1
   2e5e0:	b	2e5f4 <__assert_fail@plt+0x1ba04>
   2e5e4:	mov	r0, r4
   2e5e8:	mvn	r1, #99	; 0x63
   2e5ec:	mov	r2, #1
   2e5f0:	bl	2e74c <__assert_fail@plt+0x1bb5c>
   2e5f4:	add	r0, r4, #60	; 0x3c
   2e5f8:	bl	2d4a0 <__assert_fail@plt+0x1a8b0>
   2e5fc:	mov	r0, r5
   2e600:	pop	{r4, r5, fp, pc}
   2e604:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2e608:	add	fp, sp, #24
   2e60c:	mov	r4, r1
   2e610:	mov	r8, r0
   2e614:	ldr	r1, [r1, #52]	; 0x34
   2e618:	str	r1, [r4, #40]	; 0x28
   2e61c:	ldr	r0, [r0, #24]
   2e620:	add	r6, r4, #168	; 0xa8
   2e624:	add	r2, r1, #1
   2e628:	mov	r1, r6
   2e62c:	bl	12584 <memmove@plt>
   2e630:	mov	r0, r6
   2e634:	mov	r1, #47	; 0x2f
   2e638:	bl	12a4c <strrchr@plt>
   2e63c:	cmp	r0, #0
   2e640:	beq	2e67c <__assert_fail@plt+0x1ba8c>
   2e644:	cmp	r0, r6
   2e648:	bne	2e658 <__assert_fail@plt+0x1ba68>
   2e64c:	ldrb	r1, [r0, #1]
   2e650:	cmp	r1, #0
   2e654:	beq	2e67c <__assert_fail@plt+0x1ba8c>
   2e658:	add	r7, r0, #1
   2e65c:	mov	r0, r7
   2e660:	bl	128c0 <strlen@plt>
   2e664:	mov	r5, r0
   2e668:	add	r2, r0, #1
   2e66c:	mov	r0, r6
   2e670:	mov	r1, r7
   2e674:	bl	12584 <memmove@plt>
   2e678:	str	r5, [r4, #52]	; 0x34
   2e67c:	ldr	r0, [r8, #24]
   2e680:	str	r0, [r4, #24]
   2e684:	str	r0, [r4, #28]
   2e688:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2e68c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2e690:	add	fp, sp, #24
   2e694:	mov	r4, r1
   2e698:	mov	r6, r0
   2e69c:	add	r5, r1, #64	; 0x40
   2e6a0:	ldrh	r0, [r0, #48]	; 0x30
   2e6a4:	movw	r1, #258	; 0x102
   2e6a8:	tst	r0, r1
   2e6ac:	beq	2e724 <__assert_fail@plt+0x1bb34>
   2e6b0:	mov	r0, #24
   2e6b4:	bl	2ed88 <__assert_fail@plt+0x1c198>
   2e6b8:	mov	r8, #0
   2e6bc:	cmp	r0, #0
   2e6c0:	beq	2e744 <__assert_fail@plt+0x1bb54>
   2e6c4:	mov	r7, r0
   2e6c8:	add	r0, r4, #160	; 0xa0
   2e6cc:	ldrd	r2, [r5]
   2e6d0:	stm	r7, {r2, r3}
   2e6d4:	ldrd	r0, [r0]
   2e6d8:	add	r2, r7, #8
   2e6dc:	stm	r2, {r0, r1, r4}
   2e6e0:	ldr	r0, [r6, #56]	; 0x38
   2e6e4:	mov	r1, r7
   2e6e8:	bl	23030 <__assert_fail@plt+0x10440>
   2e6ec:	cmp	r0, r7
   2e6f0:	beq	2e718 <__assert_fail@plt+0x1bb28>
   2e6f4:	mov	r5, r0
   2e6f8:	mov	r0, r7
   2e6fc:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2e700:	cmp	r5, #0
   2e704:	beq	2e744 <__assert_fail@plt+0x1bb54>
   2e708:	ldr	r0, [r5, #16]
   2e70c:	mov	r1, #2
   2e710:	strh	r1, [r4, #56]	; 0x38
   2e714:	str	r0, [r4]
   2e718:	mov	r8, #1
   2e71c:	mov	r0, r8
   2e720:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2e724:	ldr	r0, [r6, #56]	; 0x38
   2e728:	mov	r1, r5
   2e72c:	bl	3dcb4 <__assert_fail@plt+0x2b0c4>
   2e730:	mov	r8, #1
   2e734:	cmp	r0, #0
   2e738:	movne	r0, #2
   2e73c:	strhne	r0, [r4, #56]	; 0x38
   2e740:	strne	r4, [r4]
   2e744:	mov	r0, r8
   2e748:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2e74c:	push	{r4, r5, fp, lr}
   2e750:	add	fp, sp, #8
   2e754:	mov	r4, r1
   2e758:	mov	r5, r0
   2e75c:	ldr	r1, [r0, #32]
   2e760:	cmp	r1, r4
   2e764:	bne	2e770 <__assert_fail@plt+0x1bb80>
   2e768:	cmn	r1, #100	; 0x64
   2e76c:	bne	2e7b0 <__assert_fail@plt+0x1bbc0>
   2e770:	cmp	r2, #0
   2e774:	beq	2e78c <__assert_fail@plt+0x1bb9c>
   2e778:	add	r0, r5, #60	; 0x3c
   2e77c:	bl	3df2c <__assert_fail@plt+0x2b33c>
   2e780:	cmp	r0, #0
   2e784:	bpl	2e7a4 <__assert_fail@plt+0x1bbb4>
   2e788:	b	2e7a8 <__assert_fail@plt+0x1bbb8>
   2e78c:	cmp	r1, #0
   2e790:	bmi	2e7a8 <__assert_fail@plt+0x1bbb8>
   2e794:	ldr	r0, [r5, #48]	; 0x30
   2e798:	ands	r0, r0, #4
   2e79c:	bne	2e7a8 <__assert_fail@plt+0x1bbb8>
   2e7a0:	mov	r0, r1
   2e7a4:	bl	12ba8 <close@plt>
   2e7a8:	str	r4, [r5, #32]
   2e7ac:	pop	{r4, r5, fp, pc}
   2e7b0:	bl	12b9c <abort@plt>
   2e7b4:	push	{fp, lr}
   2e7b8:	mov	fp, sp
   2e7bc:	cmp	r2, #5
   2e7c0:	bcc	2e7d8 <__assert_fail@plt+0x1bbe8>
   2e7c4:	bl	12908 <__errno_location@plt>
   2e7c8:	mov	r1, #22
   2e7cc:	str	r1, [r0]
   2e7d0:	mov	r0, #1
   2e7d4:	pop	{fp, pc}
   2e7d8:	strh	r2, [r1, #60]	; 0x3c
   2e7dc:	mov	r0, #0
   2e7e0:	pop	{fp, pc}
   2e7e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e7e8:	add	fp, sp, #28
   2e7ec:	sub	sp, sp, #4
   2e7f0:	mov	r5, r0
   2e7f4:	mvn	r0, #4096	; 0x1000
   2e7f8:	tst	r1, r0
   2e7fc:	beq	2e814 <__assert_fail@plt+0x1bc24>
   2e800:	bl	12908 <__errno_location@plt>
   2e804:	mov	r1, #22
   2e808:	str	r1, [r0]
   2e80c:	mov	r4, #0
   2e810:	b	2e910 <__assert_fail@plt+0x1bd20>
   2e814:	mov	r7, r1
   2e818:	ldr	r6, [r5]
   2e81c:	bl	12908 <__errno_location@plt>
   2e820:	mov	sl, r0
   2e824:	mov	r4, #0
   2e828:	str	r4, [r0]
   2e82c:	ldrb	r0, [r5, #49]	; 0x31
   2e830:	tst	r0, #32
   2e834:	bne	2e910 <__assert_fail@plt+0x1bd20>
   2e838:	ldrh	r0, [r6, #56]	; 0x38
   2e83c:	cmp	r0, #1
   2e840:	beq	2e850 <__assert_fail@plt+0x1bc60>
   2e844:	cmp	r0, #9
   2e848:	ldreq	r4, [r6, #8]
   2e84c:	b	2e910 <__assert_fail@plt+0x1bd20>
   2e850:	ldr	r0, [r5, #4]
   2e854:	cmp	r0, #0
   2e858:	blne	2d328 <__assert_fail@plt+0x1a738>
   2e85c:	mov	r9, #1
   2e860:	cmp	r7, #4096	; 0x1000
   2e864:	bne	2e878 <__assert_fail@plt+0x1bc88>
   2e868:	ldr	r0, [r5, #48]	; 0x30
   2e86c:	orr	r0, r0, #4096	; 0x1000
   2e870:	str	r0, [r5, #48]	; 0x30
   2e874:	mov	r9, #2
   2e878:	ldr	r0, [r6, #48]	; 0x30
   2e87c:	cmp	r0, #0
   2e880:	bne	2e8fc <__assert_fail@plt+0x1bd0c>
   2e884:	ldr	r0, [r6, #24]
   2e888:	ldrb	r0, [r0]
   2e88c:	cmp	r0, #47	; 0x2f
   2e890:	beq	2e8fc <__assert_fail@plt+0x1bd0c>
   2e894:	ldrb	r0, [r5, #48]	; 0x30
   2e898:	tst	r0, #4
   2e89c:	bne	2e8fc <__assert_fail@plt+0x1bd0c>
   2e8a0:	movw	r1, #64572	; 0xfc3c
   2e8a4:	movt	r1, #3
   2e8a8:	mov	r0, r5
   2e8ac:	bl	2d2f8 <__assert_fail@plt+0x1a708>
   2e8b0:	cmn	r0, #1
   2e8b4:	ble	2e91c <__assert_fail@plt+0x1bd2c>
   2e8b8:	mov	r8, r0
   2e8bc:	mov	r0, r5
   2e8c0:	mov	r1, r9
   2e8c4:	bl	2dd8c <__assert_fail@plt+0x1b19c>
   2e8c8:	str	r0, [r5, #4]
   2e8cc:	ldrb	r0, [r5, #49]	; 0x31
   2e8d0:	tst	r0, #2
   2e8d4:	bne	2e928 <__assert_fail@plt+0x1bd38>
   2e8d8:	mov	r0, r8
   2e8dc:	bl	12adc <fchdir@plt>
   2e8e0:	cmp	r0, #0
   2e8e4:	beq	2e93c <__assert_fail@plt+0x1bd4c>
   2e8e8:	ldr	r5, [sl]
   2e8ec:	mov	r0, r8
   2e8f0:	bl	12ba8 <close@plt>
   2e8f4:	str	r5, [sl]
   2e8f8:	b	2e910 <__assert_fail@plt+0x1bd20>
   2e8fc:	mov	r0, r5
   2e900:	mov	r1, r9
   2e904:	bl	2dd8c <__assert_fail@plt+0x1b19c>
   2e908:	mov	r4, r0
   2e90c:	str	r0, [r5, #4]
   2e910:	mov	r0, r4
   2e914:	sub	sp, fp, #28
   2e918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e91c:	mov	r4, #0
   2e920:	str	r4, [r5, #4]
   2e924:	b	2e910 <__assert_fail@plt+0x1bd20>
   2e928:	mov	r0, r5
   2e92c:	mov	r1, r8
   2e930:	mov	r2, #1
   2e934:	bl	2e74c <__assert_fail@plt+0x1bb5c>
   2e938:	b	2e944 <__assert_fail@plt+0x1bd54>
   2e93c:	mov	r0, r8
   2e940:	bl	12ba8 <close@plt>
   2e944:	ldr	r4, [r5, #4]
   2e948:	b	2e910 <__assert_fail@plt+0x1bd20>
   2e94c:	push	{fp, lr}
   2e950:	mov	fp, sp
   2e954:	mov	r2, r1
   2e958:	ldrd	r0, [r0, #8]
   2e95c:	mov	r3, #0
   2e960:	bl	3e7d4 <__assert_fail@plt+0x2bbe4>
   2e964:	mov	r0, r2
   2e968:	pop	{fp, pc}
   2e96c:	push	{r4, r5, fp, lr}
   2e970:	add	fp, sp, #8
   2e974:	ldrd	r2, [r1, #8]
   2e978:	ldrd	r4, [r0, #8]
   2e97c:	eor	r3, r5, r3
   2e980:	eor	r2, r4, r2
   2e984:	orrs	r2, r2, r3
   2e988:	mov	r2, #0
   2e98c:	bne	2e9ac <__assert_fail@plt+0x1bdbc>
   2e990:	ldrd	r2, [r1]
   2e994:	ldrd	r0, [r0]
   2e998:	eor	r1, r1, r3
   2e99c:	eor	r0, r0, r2
   2e9a0:	orr	r0, r0, r1
   2e9a4:	clz	r0, r0
   2e9a8:	lsr	r2, r0, #5
   2e9ac:	mov	r0, r2
   2e9b0:	pop	{r4, r5, fp, pc}
   2e9b4:	push	{fp, lr}
   2e9b8:	mov	fp, sp
   2e9bc:	bl	2eb5c <__assert_fail@plt+0x1bf6c>
   2e9c0:	mov	r1, r0
   2e9c4:	mov	r0, #0
   2e9c8:	movw	r2, #26984	; 0x6968
   2e9cc:	cmp	r1, r2
   2e9d0:	ble	2ea00 <__assert_fail@plt+0x1be10>
   2e9d4:	movw	r2, #26985	; 0x6969
   2e9d8:	cmp	r1, r2
   2e9dc:	movwne	r2, #40864	; 0x9fa0
   2e9e0:	cmpne	r1, r2
   2e9e4:	beq	2ea18 <__assert_fail@plt+0x1be28>
   2e9e8:	movw	r2, #16719	; 0x414f
   2e9ec:	movt	r2, #21318	; 0x5346
   2e9f0:	cmp	r1, r2
   2e9f4:	popeq	{fp, pc}
   2e9f8:	mov	r0, #1
   2e9fc:	pop	{fp, pc}
   2ea00:	movw	r2, #19778	; 0x4d42
   2ea04:	movt	r2, #65363	; 0xff53
   2ea08:	cmp	r1, r2
   2ea0c:	beq	2ea18 <__assert_fail@plt+0x1be28>
   2ea10:	cmp	r1, #0
   2ea14:	movne	r0, #1
   2ea18:	pop	{fp, pc}
   2ea1c:	sub	r2, r1, #1
   2ea20:	mov	r1, #0
   2ea24:	cmp	r2, #11
   2ea28:	bhi	2ea38 <__assert_fail@plt+0x1be48>
   2ea2c:	movw	r1, #18740	; 0x4934
   2ea30:	movt	r1, #4
   2ea34:	ldr	r1, [r1, r2, lsl #2]
   2ea38:	str	r1, [r0, #16]
   2ea3c:	bx	lr
   2ea40:	push	{fp, lr}
   2ea44:	mov	fp, sp
   2ea48:	bl	2eb5c <__assert_fail@plt+0x1bf6c>
   2ea4c:	mov	r1, r0
   2ea50:	mov	r0, #0
   2ea54:	movw	r2, #19778	; 0x4d42
   2ea58:	movt	r2, #65363	; 0xff53
   2ea5c:	cmp	r1, r2
   2ea60:	movwne	r2, #26985	; 0x6969
   2ea64:	cmpne	r1, r2
   2ea68:	bne	2ea70 <__assert_fail@plt+0x1be80>
   2ea6c:	pop	{fp, pc}
   2ea70:	movw	r2, #6548	; 0x1994
   2ea74:	movt	r2, #258	; 0x102
   2ea78:	cmp	r1, r2
   2ea7c:	movne	r0, #1
   2ea80:	pop	{fp, pc}
   2ea84:	ldr	r2, [r0, #4]
   2ea88:	ldr	ip, [r0, #24]
   2ea8c:	cmp	r2, #0
   2ea90:	bne	2eaa8 <__assert_fail@plt+0x1beb8>
   2ea94:	b	2eacc <__assert_fail@plt+0x1bedc>
   2ea98:	str	ip, [r2, #28]
   2ea9c:	ldr	r2, [r2, #8]
   2eaa0:	cmp	r2, #0
   2eaa4:	beq	2eacc <__assert_fail@plt+0x1bedc>
   2eaa8:	ldr	r3, [r2, #24]
   2eaac:	add	r0, r2, #168	; 0xa8
   2eab0:	cmp	r3, r0
   2eab4:	beq	2ea98 <__assert_fail@plt+0x1bea8>
   2eab8:	ldr	r0, [r2, #28]
   2eabc:	sub	r0, r3, r0
   2eac0:	add	r0, ip, r0
   2eac4:	str	r0, [r2, #24]
   2eac8:	b	2ea98 <__assert_fail@plt+0x1bea8>
   2eacc:	ldr	r2, [r1, #48]	; 0x30
   2ead0:	cmp	r2, #0
   2ead4:	bxmi	lr
   2ead8:	b	2eafc <__assert_fail@plt+0x1bf0c>
   2eadc:	str	ip, [r1, #28]
   2eae0:	ldr	r2, [r1, #8]
   2eae4:	cmp	r2, #0
   2eae8:	ldreq	r2, [r1, #4]
   2eaec:	ldr	r0, [r2, #48]	; 0x30
   2eaf0:	cmn	r0, #1
   2eaf4:	mov	r1, r2
   2eaf8:	ble	2eb20 <__assert_fail@plt+0x1bf30>
   2eafc:	ldr	r2, [r1, #24]
   2eb00:	add	r0, r1, #168	; 0xa8
   2eb04:	cmp	r2, r0
   2eb08:	beq	2eadc <__assert_fail@plt+0x1beec>
   2eb0c:	ldr	r0, [r1, #28]
   2eb10:	sub	r0, r2, r0
   2eb14:	add	r0, ip, r0
   2eb18:	str	r0, [r1, #24]
   2eb1c:	b	2eadc <__assert_fail@plt+0x1beec>
   2eb20:	bx	lr
   2eb24:	push	{r4, r5, fp, lr}
   2eb28:	add	fp, sp, #8
   2eb2c:	ldr	r0, [r0]
   2eb30:	ldrd	r2, [r0, #160]	; 0xa0
   2eb34:	ldr	r0, [r1]
   2eb38:	ldrd	r4, [r0, #160]	; 0xa0
   2eb3c:	mov	r0, #0
   2eb40:	subs	r1, r4, r2
   2eb44:	sbcs	r1, r5, r3
   2eb48:	movwcc	r0, #1
   2eb4c:	subs	r1, r2, r4
   2eb50:	sbcs	r1, r3, r5
   2eb54:	subcc	r0, r0, #1
   2eb58:	pop	{r4, r5, fp, pc}
   2eb5c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2eb60:	add	fp, sp, #24
   2eb64:	sub	sp, sp, #96	; 0x60
   2eb68:	mov	r4, r0
   2eb6c:	ldr	r7, [r0, #44]	; 0x2c
   2eb70:	ldrb	r0, [r7, #49]	; 0x31
   2eb74:	mov	r5, #0
   2eb78:	tst	r0, #2
   2eb7c:	beq	2ec78 <__assert_fail@plt+0x1c088>
   2eb80:	mov	r9, r1
   2eb84:	ldr	r6, [r7, #52]	; 0x34
   2eb88:	cmp	r6, #0
   2eb8c:	bne	2ebcc <__assert_fail@plt+0x1bfdc>
   2eb90:	movw	r0, #51924	; 0xcad4
   2eb94:	movt	r0, #2
   2eb98:	str	r0, [sp]
   2eb9c:	mov	r8, #0
   2eba0:	movw	r2, #60548	; 0xec84
   2eba4:	movt	r2, #2
   2eba8:	movw	r3, #60580	; 0xeca4
   2ebac:	movt	r3, #2
   2ebb0:	mov	r0, #13
   2ebb4:	mov	r1, #0
   2ebb8:	bl	22794 <__assert_fail@plt+0xfba4>
   2ebbc:	mov	r6, r0
   2ebc0:	str	r0, [r7, #52]	; 0x34
   2ebc4:	cmp	r0, #0
   2ebc8:	beq	2ec04 <__assert_fail@plt+0x1c014>
   2ebcc:	ldrd	r0, [r4, #64]	; 0x40
   2ebd0:	str	r1, [sp, #12]
   2ebd4:	str	r0, [sp, #8]
   2ebd8:	add	r1, sp, #8
   2ebdc:	mov	r0, r6
   2ebe0:	bl	224e8 <__assert_fail@plt+0xf8f8>
   2ebe4:	cmp	r0, #0
   2ebe8:	beq	2ebf4 <__assert_fail@plt+0x1c004>
   2ebec:	ldr	r5, [r0, #8]
   2ebf0:	b	2ec78 <__assert_fail@plt+0x1c088>
   2ebf4:	mov	r8, #1
   2ebf8:	cmp	r9, #0
   2ebfc:	bpl	2ec10 <__assert_fail@plt+0x1c020>
   2ec00:	b	2ec78 <__assert_fail@plt+0x1c088>
   2ec04:	mov	r6, #0
   2ec08:	cmp	r9, #0
   2ec0c:	bmi	2ec78 <__assert_fail@plt+0x1c088>
   2ec10:	add	r1, sp, #8
   2ec14:	mov	r0, r9
   2ec18:	bl	12470 <fstatfs64@plt>
   2ec1c:	cmp	r0, #0
   2ec20:	bne	2ec78 <__assert_fail@plt+0x1c088>
   2ec24:	cmp	r8, #0
   2ec28:	beq	2ec74 <__assert_fail@plt+0x1c084>
   2ec2c:	mov	r0, #16
   2ec30:	bl	2ed88 <__assert_fail@plt+0x1c198>
   2ec34:	cmp	r0, #0
   2ec38:	beq	2ec74 <__assert_fail@plt+0x1c084>
   2ec3c:	mov	r5, r0
   2ec40:	ldrd	r0, [r4, #64]	; 0x40
   2ec44:	ldr	r2, [sp, #8]
   2ec48:	stm	r5, {r0, r1, r2}
   2ec4c:	mov	r0, r6
   2ec50:	mov	r1, r5
   2ec54:	bl	23030 <__assert_fail@plt+0x10440>
   2ec58:	cmp	r0, #0
   2ec5c:	beq	2ec6c <__assert_fail@plt+0x1c07c>
   2ec60:	cmp	r0, r5
   2ec64:	beq	2ec74 <__assert_fail@plt+0x1c084>
   2ec68:	bl	12b9c <abort@plt>
   2ec6c:	mov	r0, r5
   2ec70:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2ec74:	ldr	r5, [sp, #8]
   2ec78:	mov	r0, r5
   2ec7c:	sub	sp, fp, #24
   2ec80:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2ec84:	push	{fp, lr}
   2ec88:	mov	fp, sp
   2ec8c:	mov	r2, r1
   2ec90:	ldrd	r0, [r0]
   2ec94:	mov	r3, #0
   2ec98:	bl	3e7d4 <__assert_fail@plt+0x2bbe4>
   2ec9c:	mov	r0, r2
   2eca0:	pop	{fp, pc}
   2eca4:	ldrd	r2, [r1]
   2eca8:	ldrd	r0, [r0]
   2ecac:	eor	r1, r1, r3
   2ecb0:	eor	r0, r0, r2
   2ecb4:	orr	r0, r0, r1
   2ecb8:	clz	r0, r0
   2ecbc:	lsr	r0, r0, #5
   2ecc0:	bx	lr
   2ecc4:	push	{r4, sl, fp, lr}
   2ecc8:	add	fp, sp, #8
   2eccc:	mov	r4, r1
   2ecd0:	bl	1289c <getfilecon@plt>
   2ecd4:	mov	r1, r4
   2ecd8:	pop	{r4, sl, fp, lr}
   2ecdc:	b	2ece0 <__assert_fail@plt+0x1c0f0>
   2ece0:	push	{r4, r5, fp, lr}
   2ece4:	add	fp, sp, #8
   2ece8:	cmp	r0, #10
   2ecec:	beq	2ed04 <__assert_fail@plt+0x1c114>
   2ecf0:	cmp	r0, #0
   2ecf4:	bne	2ed4c <__assert_fail@plt+0x1c15c>
   2ecf8:	bl	12908 <__errno_location@plt>
   2ecfc:	mov	r1, #95	; 0x5f
   2ed00:	b	2ed44 <__assert_fail@plt+0x1c154>
   2ed04:	mov	r4, r1
   2ed08:	ldr	r5, [r1]
   2ed0c:	movw	r1, #18788	; 0x4964
   2ed10:	movt	r1, #4
   2ed14:	mov	r0, r5
   2ed18:	bl	124f4 <strcmp@plt>
   2ed1c:	mov	r1, r0
   2ed20:	mov	r0, #10
   2ed24:	cmp	r1, #0
   2ed28:	popne	{r4, r5, fp, pc}
   2ed2c:	mov	r0, r5
   2ed30:	bl	12b00 <freecon@plt>
   2ed34:	mov	r0, #0
   2ed38:	str	r0, [r4]
   2ed3c:	bl	12908 <__errno_location@plt>
   2ed40:	mov	r1, #61	; 0x3d
   2ed44:	str	r1, [r0]
   2ed48:	mvn	r0, #0
   2ed4c:	pop	{r4, r5, fp, pc}
   2ed50:	push	{r4, sl, fp, lr}
   2ed54:	add	fp, sp, #8
   2ed58:	mov	r4, r1
   2ed5c:	bl	12800 <lgetfilecon@plt>
   2ed60:	mov	r1, r4
   2ed64:	pop	{r4, sl, fp, lr}
   2ed68:	b	2ece0 <__assert_fail@plt+0x1c0f0>
   2ed6c:	push	{r4, sl, fp, lr}
   2ed70:	add	fp, sp, #8
   2ed74:	mov	r4, r1
   2ed78:	bl	126b0 <fgetfilecon@plt>
   2ed7c:	mov	r1, r4
   2ed80:	pop	{r4, sl, fp, lr}
   2ed84:	b	2ece0 <__assert_fail@plt+0x1c0f0>
   2ed88:	cmp	r0, #0
   2ed8c:	movweq	r0, #1
   2ed90:	cmn	r0, #1
   2ed94:	ble	2ed9c <__assert_fail@plt+0x1c1ac>
   2ed98:	b	1280c <malloc@plt>
   2ed9c:	push	{fp, lr}
   2eda0:	mov	fp, sp
   2eda4:	bl	12908 <__errno_location@plt>
   2eda8:	mov	r1, #12
   2edac:	str	r1, [r0]
   2edb0:	mov	r0, #0
   2edb4:	pop	{fp, pc}
   2edb8:	push	{r4, r5, r6, r7, fp, lr}
   2edbc:	add	fp, sp, #16
   2edc0:	sub	sp, sp, #8
   2edc4:	mov	r7, r2
   2edc8:	mov	r4, r1
   2edcc:	add	r5, sp, #4
   2edd0:	cmp	r0, #0
   2edd4:	movne	r5, r0
   2edd8:	mov	r0, r5
   2eddc:	bl	127a0 <mbrtowc@plt>
   2ede0:	mov	r6, r0
   2ede4:	cmp	r7, #0
   2ede8:	beq	2ee10 <__assert_fail@plt+0x1c220>
   2edec:	cmn	r6, #2
   2edf0:	bcc	2ee10 <__assert_fail@plt+0x1c220>
   2edf4:	mov	r0, #0
   2edf8:	bl	3de8c <__assert_fail@plt+0x2b29c>
   2edfc:	cmp	r0, #0
   2ee00:	bne	2ee10 <__assert_fail@plt+0x1c220>
   2ee04:	ldrb	r0, [r4]
   2ee08:	str	r0, [r5]
   2ee0c:	mov	r6, #1
   2ee10:	mov	r0, r6
   2ee14:	sub	sp, fp, #16
   2ee18:	pop	{r4, r5, r6, r7, fp, pc}
   2ee1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ee20:	add	fp, sp, #28
   2ee24:	sub	sp, sp, #36	; 0x24
   2ee28:	movw	r0, #18798	; 0x496e
   2ee2c:	movt	r0, #4
   2ee30:	movw	r1, #12312	; 0x3018
   2ee34:	movt	r1, #4
   2ee38:	bl	12ae8 <fopen64@plt>
   2ee3c:	cmp	r0, #0
   2ee40:	beq	2ee8c <__assert_fail@plt+0x1c29c>
   2ee44:	mov	r9, r0
   2ee48:	mov	r0, #0
   2ee4c:	str	r0, [sp, #28]
   2ee50:	str	r0, [sp, #24]
   2ee54:	add	r0, sp, #28
   2ee58:	add	r1, sp, #24
   2ee5c:	mov	r2, r9
   2ee60:	bl	12b3c <getline@plt>
   2ee64:	add	r4, sp, #32
   2ee68:	cmn	r0, #1
   2ee6c:	beq	2f6d8 <__assert_fail@plt+0x1cae8>
   2ee70:	add	r7, sp, #12
   2ee74:	movw	sl, #18819	; 0x4983
   2ee78:	movt	sl, #4
   2ee7c:	add	r8, sp, #20
   2ee80:	add	r6, sp, #16
   2ee84:	add	r5, sp, #28
   2ee88:	b	2f290 <__assert_fail@plt+0x1c6a0>
   2ee8c:	movw	r0, #19007	; 0x4a3f
   2ee90:	movt	r0, #4
   2ee94:	movw	r1, #12892	; 0x325c
   2ee98:	movt	r1, #4
   2ee9c:	bl	12b18 <setmntent@plt>
   2eea0:	cmp	r0, #0
   2eea4:	beq	2f75c <__assert_fail@plt+0x1cb6c>
   2eea8:	mov	r8, r0
   2eeac:	bl	127c4 <getmntent@plt>
   2eeb0:	cmp	r0, #0
   2eeb4:	beq	2f764 <__assert_fail@plt+0x1cb74>
   2eeb8:	mov	r5, r0
   2eebc:	add	r4, sp, #32
   2eec0:	b	2ef1c <__assert_fail@plt+0x1c32c>
   2eec4:	bic	r1, r4, #1
   2eec8:	orr	r4, r1, r0
   2eecc:	strb	r4, [r9, #24]
   2eed0:	ldr	r5, [r9]
   2eed4:	mov	r0, r5
   2eed8:	mov	r1, #58	; 0x3a
   2eedc:	bl	128cc <strchr@plt>
   2eee0:	cmp	r0, #0
   2eee4:	beq	2f110 <__assert_fail@plt+0x1c520>
   2eee8:	mvn	r0, #0
   2eeec:	str	r0, [r9, #16]
   2eef0:	str	r0, [r9, #20]
   2eef4:	and	r0, r4, #253	; 0xfd
   2eef8:	orr	r0, r0, r6, lsl #1
   2eefc:	strb	r0, [r9, #24]
   2ef00:	str	r9, [sl]
   2ef04:	add	r4, r9, #28
   2ef08:	mov	r0, r8
   2ef0c:	bl	127c4 <getmntent@plt>
   2ef10:	mov	r5, r0
   2ef14:	cmp	r0, #0
   2ef18:	beq	2f768 <__assert_fail@plt+0x1cb78>
   2ef1c:	mov	sl, r4
   2ef20:	mov	r0, r5
   2ef24:	movw	r1, #19017	; 0x4a49
   2ef28:	movt	r1, #4
   2ef2c:	bl	12764 <hasmntopt@plt>
   2ef30:	str	r0, [sp, #8]
   2ef34:	mov	r0, #32
   2ef38:	bl	2b63c <__assert_fail@plt+0x18a4c>
   2ef3c:	mov	r9, r0
   2ef40:	ldr	r0, [r5]
   2ef44:	bl	2b9a4 <__assert_fail@plt+0x18db4>
   2ef48:	str	r0, [r9]
   2ef4c:	ldr	r0, [r5, #4]
   2ef50:	bl	2b9a4 <__assert_fail@plt+0x18db4>
   2ef54:	str	r0, [r9, #4]
   2ef58:	mov	r0, #0
   2ef5c:	str	r0, [r9, #8]
   2ef60:	ldr	r0, [r5, #8]
   2ef64:	bl	2b9a4 <__assert_fail@plt+0x18db4>
   2ef68:	mov	r7, r0
   2ef6c:	str	r0, [r9, #12]
   2ef70:	ldrb	r0, [r9, #24]
   2ef74:	orr	r4, r0, #4
   2ef78:	strb	r4, [r9, #24]
   2ef7c:	mov	r0, r7
   2ef80:	movw	r1, #18840	; 0x4998
   2ef84:	movt	r1, #4
   2ef88:	bl	124f4 <strcmp@plt>
   2ef8c:	mov	r6, #1
   2ef90:	cmp	r0, #0
   2ef94:	mov	r0, #1
   2ef98:	beq	2eec4 <__assert_fail@plt+0x1c2d4>
   2ef9c:	mov	r0, r7
   2efa0:	movw	r1, #18847	; 0x499f
   2efa4:	movt	r1, #4
   2efa8:	bl	124f4 <strcmp@plt>
   2efac:	cmp	r0, #0
   2efb0:	mov	r0, #1
   2efb4:	beq	2eec4 <__assert_fail@plt+0x1c2d4>
   2efb8:	mov	r0, r7
   2efbc:	movw	r1, #18852	; 0x49a4
   2efc0:	movt	r1, #4
   2efc4:	bl	124f4 <strcmp@plt>
   2efc8:	cmp	r0, #0
   2efcc:	mov	r0, #1
   2efd0:	beq	2eec4 <__assert_fail@plt+0x1c2d4>
   2efd4:	mov	r0, r7
   2efd8:	movw	r1, #18858	; 0x49aa
   2efdc:	movt	r1, #4
   2efe0:	bl	124f4 <strcmp@plt>
   2efe4:	cmp	r0, #0
   2efe8:	mov	r0, #1
   2efec:	beq	2eec4 <__assert_fail@plt+0x1c2d4>
   2eff0:	mov	r0, r7
   2eff4:	movw	r1, #18866	; 0x49b2
   2eff8:	movt	r1, #4
   2effc:	bl	124f4 <strcmp@plt>
   2f000:	cmp	r0, #0
   2f004:	mov	r0, #1
   2f008:	beq	2eec4 <__assert_fail@plt+0x1c2d4>
   2f00c:	mov	r0, r7
   2f010:	movw	r1, #18873	; 0x49b9
   2f014:	movt	r1, #4
   2f018:	bl	124f4 <strcmp@plt>
   2f01c:	cmp	r0, #0
   2f020:	mov	r0, #1
   2f024:	beq	2eec4 <__assert_fail@plt+0x1c2d4>
   2f028:	mov	r0, r7
   2f02c:	movw	r1, #18881	; 0x49c1
   2f030:	movt	r1, #4
   2f034:	bl	124f4 <strcmp@plt>
   2f038:	cmp	r0, #0
   2f03c:	mov	r0, #1
   2f040:	beq	2eec4 <__assert_fail@plt+0x1c2d4>
   2f044:	mov	r0, r7
   2f048:	movw	r1, #18893	; 0x49cd
   2f04c:	movt	r1, #4
   2f050:	bl	124f4 <strcmp@plt>
   2f054:	cmp	r0, #0
   2f058:	mov	r0, #1
   2f05c:	beq	2eec4 <__assert_fail@plt+0x1c2d4>
   2f060:	mov	r0, r7
   2f064:	movw	r1, #18900	; 0x49d4
   2f068:	movt	r1, #4
   2f06c:	bl	124f4 <strcmp@plt>
   2f070:	cmp	r0, #0
   2f074:	mov	r0, #1
   2f078:	beq	2eec4 <__assert_fail@plt+0x1c2d4>
   2f07c:	mov	r0, r7
   2f080:	movw	r1, #18911	; 0x49df
   2f084:	movt	r1, #4
   2f088:	bl	124f4 <strcmp@plt>
   2f08c:	cmp	r0, #0
   2f090:	mov	r0, #1
   2f094:	beq	2eec4 <__assert_fail@plt+0x1c2d4>
   2f098:	mov	r0, r7
   2f09c:	movw	r1, #18917	; 0x49e5
   2f0a0:	movt	r1, #4
   2f0a4:	bl	124f4 <strcmp@plt>
   2f0a8:	cmp	r0, #0
   2f0ac:	mov	r0, #1
   2f0b0:	beq	2eec4 <__assert_fail@plt+0x1c2d4>
   2f0b4:	mov	r0, r7
   2f0b8:	movw	r1, #18923	; 0x49eb
   2f0bc:	movt	r1, #4
   2f0c0:	bl	124f4 <strcmp@plt>
   2f0c4:	cmp	r0, #0
   2f0c8:	mov	r0, #1
   2f0cc:	beq	2eec4 <__assert_fail@plt+0x1c2d4>
   2f0d0:	mov	r0, r7
   2f0d4:	movw	r1, #5645	; 0x160d
   2f0d8:	movt	r1, #4
   2f0dc:	bl	124f4 <strcmp@plt>
   2f0e0:	cmp	r0, #0
   2f0e4:	mov	r0, #1
   2f0e8:	beq	2eec4 <__assert_fail@plt+0x1c2d4>
   2f0ec:	mov	r0, r7
   2f0f0:	movw	r1, #18930	; 0x49f2
   2f0f4:	movt	r1, #4
   2f0f8:	bl	124f4 <strcmp@plt>
   2f0fc:	ldr	r1, [sp, #8]
   2f100:	orr	r0, r1, r0
   2f104:	clz	r0, r0
   2f108:	lsr	r0, r0, #5
   2f10c:	b	2eec4 <__assert_fail@plt+0x1c2d4>
   2f110:	ldrb	r0, [r5]
   2f114:	cmp	r0, #47	; 0x2f
   2f118:	bne	2f170 <__assert_fail@plt+0x1c580>
   2f11c:	ldrb	r0, [r5, #1]
   2f120:	cmp	r0, #47	; 0x2f
   2f124:	bne	2f170 <__assert_fail@plt+0x1c580>
   2f128:	mov	r0, r7
   2f12c:	movw	r1, #18935	; 0x49f7
   2f130:	movt	r1, #4
   2f134:	bl	124f4 <strcmp@plt>
   2f138:	cmp	r0, #0
   2f13c:	beq	2eee8 <__assert_fail@plt+0x1c2f8>
   2f140:	mov	r0, r7
   2f144:	movw	r1, #18941	; 0x49fd
   2f148:	movt	r1, #4
   2f14c:	bl	124f4 <strcmp@plt>
   2f150:	cmp	r0, #0
   2f154:	beq	2eee8 <__assert_fail@plt+0x1c2f8>
   2f158:	mov	r0, r7
   2f15c:	movw	r1, #18946	; 0x4a02
   2f160:	movt	r1, #4
   2f164:	bl	124f4 <strcmp@plt>
   2f168:	cmp	r0, #0
   2f16c:	beq	2eee8 <__assert_fail@plt+0x1c2f8>
   2f170:	mov	r0, r7
   2f174:	movw	r1, #18951	; 0x4a07
   2f178:	movt	r1, #4
   2f17c:	bl	124f4 <strcmp@plt>
   2f180:	cmp	r0, #0
   2f184:	beq	2eee8 <__assert_fail@plt+0x1c2f8>
   2f188:	mov	r0, r7
   2f18c:	movw	r1, #5604	; 0x15e4
   2f190:	movt	r1, #4
   2f194:	bl	124f4 <strcmp@plt>
   2f198:	cmp	r0, #0
   2f19c:	beq	2eee8 <__assert_fail@plt+0x1c2f8>
   2f1a0:	mov	r0, r7
   2f1a4:	movw	r1, #18956	; 0x4a0c
   2f1a8:	movt	r1, #4
   2f1ac:	bl	124f4 <strcmp@plt>
   2f1b0:	cmp	r0, #0
   2f1b4:	beq	2eee8 <__assert_fail@plt+0x1c2f8>
   2f1b8:	mov	r0, r7
   2f1bc:	movw	r1, #18961	; 0x4a11
   2f1c0:	movt	r1, #4
   2f1c4:	bl	124f4 <strcmp@plt>
   2f1c8:	cmp	r0, #0
   2f1cc:	beq	2eee8 <__assert_fail@plt+0x1c2f8>
   2f1d0:	mov	r0, r7
   2f1d4:	movw	r1, #18972	; 0x4a1c
   2f1d8:	movt	r1, #4
   2f1dc:	bl	124f4 <strcmp@plt>
   2f1e0:	cmp	r0, #0
   2f1e4:	beq	2eee8 <__assert_fail@plt+0x1c2f8>
   2f1e8:	mov	r0, r7
   2f1ec:	movw	r1, #18978	; 0x4a22
   2f1f0:	movt	r1, #4
   2f1f4:	bl	124f4 <strcmp@plt>
   2f1f8:	cmp	r0, #0
   2f1fc:	beq	2eee8 <__assert_fail@plt+0x1c2f8>
   2f200:	mov	r0, r7
   2f204:	movw	r1, #18983	; 0x4a27
   2f208:	movt	r1, #4
   2f20c:	bl	124f4 <strcmp@plt>
   2f210:	cmp	r0, #0
   2f214:	beq	2eee8 <__assert_fail@plt+0x1c2f8>
   2f218:	mov	r0, r7
   2f21c:	movw	r1, #18989	; 0x4a2d
   2f220:	movt	r1, #4
   2f224:	bl	124f4 <strcmp@plt>
   2f228:	cmp	r0, #0
   2f22c:	beq	2eee8 <__assert_fail@plt+0x1c2f8>
   2f230:	mov	r0, r7
   2f234:	movw	r1, #18995	; 0x4a33
   2f238:	movt	r1, #4
   2f23c:	bl	124f4 <strcmp@plt>
   2f240:	cmp	r0, #0
   2f244:	beq	2eee8 <__assert_fail@plt+0x1c2f8>
   2f248:	movw	r0, #19000	; 0x4a38
   2f24c:	movt	r0, #4
   2f250:	mov	r1, r5
   2f254:	bl	124f4 <strcmp@plt>
   2f258:	clz	r0, r0
   2f25c:	lsr	r6, r0, #5
   2f260:	b	2eee8 <__assert_fail@plt+0x1c2f8>
   2f264:	movw	sl, #18819	; 0x4983
   2f268:	movt	sl, #4
   2f26c:	add	r8, sp, #20
   2f270:	add	r6, sp, #16
   2f274:	add	r5, sp, #28
   2f278:	mov	r0, r5
   2f27c:	add	r1, sp, #24
   2f280:	mov	r2, r9
   2f284:	bl	12b3c <getline@plt>
   2f288:	cmn	r0, #1
   2f28c:	beq	2f6d8 <__assert_fail@plt+0x1cae8>
   2f290:	ldr	r0, [sp, #28]
   2f294:	str	r7, [sp]
   2f298:	mov	r1, sl
   2f29c:	mov	r2, r8
   2f2a0:	mov	r3, r6
   2f2a4:	bl	12a7c <sscanf@plt>
   2f2a8:	orr	r0, r0, #1
   2f2ac:	cmp	r0, #3
   2f2b0:	bne	2f278 <__assert_fail@plt+0x1c688>
   2f2b4:	ldr	r0, [sp, #12]
   2f2b8:	ldr	r1, [sp, #28]
   2f2bc:	add	r5, r1, r0
   2f2c0:	mov	r0, r5
   2f2c4:	bl	2f790 <__assert_fail@plt+0x1cba0>
   2f2c8:	cmp	r0, #0
   2f2cc:	beq	2f274 <__assert_fail@plt+0x1c684>
   2f2d0:	add	r6, r0, #1
   2f2d4:	mov	r0, r6
   2f2d8:	bl	2f790 <__assert_fail@plt+0x1cba0>
   2f2dc:	cmp	r0, #0
   2f2e0:	beq	2f270 <__assert_fail@plt+0x1c680>
   2f2e4:	add	r0, r0, #1
   2f2e8:	movw	r1, #18836	; 0x4994
   2f2ec:	movt	r1, #4
   2f2f0:	bl	3c614 <__assert_fail@plt+0x29a24>
   2f2f4:	cmp	r0, #0
   2f2f8:	beq	2f270 <__assert_fail@plt+0x1c680>
   2f2fc:	add	r8, r0, #3
   2f300:	mov	r0, r8
   2f304:	bl	2f790 <__assert_fail@plt+0x1cba0>
   2f308:	cmp	r0, #0
   2f30c:	beq	2f26c <__assert_fail@plt+0x1c67c>
   2f310:	add	sl, r0, #1
   2f314:	mov	r0, sl
   2f318:	bl	2f790 <__assert_fail@plt+0x1cba0>
   2f31c:	cmp	r0, #0
   2f320:	beq	2f264 <__assert_fail@plt+0x1c674>
   2f324:	str	r4, [sp, #8]
   2f328:	mov	r0, sl
   2f32c:	bl	2f7b0 <__assert_fail@plt+0x1cbc0>
   2f330:	mov	r0, r6
   2f334:	bl	2f7b0 <__assert_fail@plt+0x1cbc0>
   2f338:	mov	r0, r5
   2f33c:	bl	2f7b0 <__assert_fail@plt+0x1cbc0>
   2f340:	mov	r0, r8
   2f344:	bl	2f7b0 <__assert_fail@plt+0x1cbc0>
   2f348:	mov	r0, #32
   2f34c:	bl	2b63c <__assert_fail@plt+0x18a4c>
   2f350:	mov	r4, r0
   2f354:	mov	r0, sl
   2f358:	bl	2b9a4 <__assert_fail@plt+0x18db4>
   2f35c:	str	r0, [r4]
   2f360:	mov	r0, r6
   2f364:	bl	2b9a4 <__assert_fail@plt+0x18db4>
   2f368:	str	r0, [r4, #4]
   2f36c:	mov	r0, r5
   2f370:	bl	2b9a4 <__assert_fail@plt+0x18db4>
   2f374:	str	r0, [r4, #8]
   2f378:	mov	r0, r8
   2f37c:	bl	2b9a4 <__assert_fail@plt+0x18db4>
   2f380:	mov	r7, r0
   2f384:	str	r0, [r4, #12]
   2f388:	ldrb	r0, [r4, #24]
   2f38c:	orr	r6, r0, #4
   2f390:	strb	r6, [r4, #24]
   2f394:	ldr	r0, [sp, #20]
   2f398:	ldr	r1, [sp, #16]
   2f39c:	bl	12518 <gnu_dev_makedev@plt>
   2f3a0:	strd	r0, [r4, #16]
   2f3a4:	mov	r0, r7
   2f3a8:	movw	r1, #18840	; 0x4998
   2f3ac:	movt	r1, #4
   2f3b0:	bl	124f4 <strcmp@plt>
   2f3b4:	cmp	r0, #0
   2f3b8:	mov	r0, #1
   2f3bc:	beq	2f528 <__assert_fail@plt+0x1c938>
   2f3c0:	mov	r0, r7
   2f3c4:	movw	r1, #18847	; 0x499f
   2f3c8:	movt	r1, #4
   2f3cc:	bl	124f4 <strcmp@plt>
   2f3d0:	cmp	r0, #0
   2f3d4:	mov	r0, #1
   2f3d8:	beq	2f528 <__assert_fail@plt+0x1c938>
   2f3dc:	mov	r0, r7
   2f3e0:	movw	r1, #18852	; 0x49a4
   2f3e4:	movt	r1, #4
   2f3e8:	bl	124f4 <strcmp@plt>
   2f3ec:	cmp	r0, #0
   2f3f0:	mov	r0, #1
   2f3f4:	beq	2f528 <__assert_fail@plt+0x1c938>
   2f3f8:	mov	r0, r7
   2f3fc:	movw	r1, #18858	; 0x49aa
   2f400:	movt	r1, #4
   2f404:	bl	124f4 <strcmp@plt>
   2f408:	cmp	r0, #0
   2f40c:	mov	r0, #1
   2f410:	beq	2f528 <__assert_fail@plt+0x1c938>
   2f414:	mov	r0, r7
   2f418:	movw	r1, #18866	; 0x49b2
   2f41c:	movt	r1, #4
   2f420:	bl	124f4 <strcmp@plt>
   2f424:	cmp	r0, #0
   2f428:	mov	r0, #1
   2f42c:	beq	2f528 <__assert_fail@plt+0x1c938>
   2f430:	mov	r0, r7
   2f434:	movw	r1, #18873	; 0x49b9
   2f438:	movt	r1, #4
   2f43c:	bl	124f4 <strcmp@plt>
   2f440:	cmp	r0, #0
   2f444:	mov	r0, #1
   2f448:	beq	2f528 <__assert_fail@plt+0x1c938>
   2f44c:	mov	r0, r7
   2f450:	movw	r1, #18881	; 0x49c1
   2f454:	movt	r1, #4
   2f458:	bl	124f4 <strcmp@plt>
   2f45c:	cmp	r0, #0
   2f460:	mov	r0, #1
   2f464:	beq	2f528 <__assert_fail@plt+0x1c938>
   2f468:	mov	r0, r7
   2f46c:	movw	r1, #18893	; 0x49cd
   2f470:	movt	r1, #4
   2f474:	bl	124f4 <strcmp@plt>
   2f478:	cmp	r0, #0
   2f47c:	mov	r0, #1
   2f480:	beq	2f528 <__assert_fail@plt+0x1c938>
   2f484:	mov	r0, r7
   2f488:	movw	r1, #18900	; 0x49d4
   2f48c:	movt	r1, #4
   2f490:	bl	124f4 <strcmp@plt>
   2f494:	cmp	r0, #0
   2f498:	mov	r0, #1
   2f49c:	beq	2f528 <__assert_fail@plt+0x1c938>
   2f4a0:	mov	r0, r7
   2f4a4:	movw	r1, #18911	; 0x49df
   2f4a8:	movt	r1, #4
   2f4ac:	bl	124f4 <strcmp@plt>
   2f4b0:	cmp	r0, #0
   2f4b4:	mov	r0, #1
   2f4b8:	beq	2f528 <__assert_fail@plt+0x1c938>
   2f4bc:	mov	r0, r7
   2f4c0:	movw	r1, #18917	; 0x49e5
   2f4c4:	movt	r1, #4
   2f4c8:	bl	124f4 <strcmp@plt>
   2f4cc:	cmp	r0, #0
   2f4d0:	mov	r0, #1
   2f4d4:	beq	2f528 <__assert_fail@plt+0x1c938>
   2f4d8:	mov	r0, r7
   2f4dc:	movw	r1, #18923	; 0x49eb
   2f4e0:	movt	r1, #4
   2f4e4:	bl	124f4 <strcmp@plt>
   2f4e8:	cmp	r0, #0
   2f4ec:	mov	r0, #1
   2f4f0:	beq	2f528 <__assert_fail@plt+0x1c938>
   2f4f4:	mov	r0, r7
   2f4f8:	movw	r1, #5645	; 0x160d
   2f4fc:	movt	r1, #4
   2f500:	bl	124f4 <strcmp@plt>
   2f504:	cmp	r0, #0
   2f508:	mov	r0, #1
   2f50c:	beq	2f528 <__assert_fail@plt+0x1c938>
   2f510:	mov	r0, r7
   2f514:	movw	r1, #18930	; 0x49f2
   2f518:	movt	r1, #4
   2f51c:	bl	124f4 <strcmp@plt>
   2f520:	clz	r0, r0
   2f524:	lsr	r0, r0, #5
   2f528:	bic	r1, r6, #1
   2f52c:	orr	r6, r1, r0
   2f530:	strb	r6, [r4, #24]
   2f534:	ldr	r5, [r4]
   2f538:	mov	r0, r5
   2f53c:	mov	r1, #58	; 0x3a
   2f540:	bl	128cc <strchr@plt>
   2f544:	cmp	r0, #0
   2f548:	movw	sl, #18819	; 0x4983
   2f54c:	movt	sl, #4
   2f550:	add	r8, sp, #20
   2f554:	beq	2f57c <__assert_fail@plt+0x1c98c>
   2f558:	mov	r1, #1
   2f55c:	and	r0, r6, #253	; 0xfd
   2f560:	orr	r0, r0, r1, lsl #1
   2f564:	strb	r0, [r4, #24]
   2f568:	ldr	r0, [sp, #8]
   2f56c:	str	r4, [r0]
   2f570:	add	r4, r4, #28
   2f574:	add	r7, sp, #12
   2f578:	b	2f270 <__assert_fail@plt+0x1c680>
   2f57c:	ldrb	r0, [r5]
   2f580:	cmp	r0, #47	; 0x2f
   2f584:	bne	2f5dc <__assert_fail@plt+0x1c9ec>
   2f588:	ldrb	r0, [r5, #1]
   2f58c:	cmp	r0, #47	; 0x2f
   2f590:	bne	2f5dc <__assert_fail@plt+0x1c9ec>
   2f594:	mov	r0, r7
   2f598:	movw	r1, #18935	; 0x49f7
   2f59c:	movt	r1, #4
   2f5a0:	bl	124f4 <strcmp@plt>
   2f5a4:	cmp	r0, #0
   2f5a8:	beq	2f558 <__assert_fail@plt+0x1c968>
   2f5ac:	mov	r0, r7
   2f5b0:	movw	r1, #18941	; 0x49fd
   2f5b4:	movt	r1, #4
   2f5b8:	bl	124f4 <strcmp@plt>
   2f5bc:	cmp	r0, #0
   2f5c0:	beq	2f558 <__assert_fail@plt+0x1c968>
   2f5c4:	mov	r0, r7
   2f5c8:	movw	r1, #18946	; 0x4a02
   2f5cc:	movt	r1, #4
   2f5d0:	bl	124f4 <strcmp@plt>
   2f5d4:	cmp	r0, #0
   2f5d8:	beq	2f558 <__assert_fail@plt+0x1c968>
   2f5dc:	str	r5, [sp, #4]
   2f5e0:	mov	r0, r7
   2f5e4:	movw	r1, #18951	; 0x4a07
   2f5e8:	movt	r1, #4
   2f5ec:	bl	124f4 <strcmp@plt>
   2f5f0:	cmp	r0, #0
   2f5f4:	beq	2f558 <__assert_fail@plt+0x1c968>
   2f5f8:	mov	r0, r7
   2f5fc:	movw	r1, #5604	; 0x15e4
   2f600:	movt	r1, #4
   2f604:	bl	124f4 <strcmp@plt>
   2f608:	cmp	r0, #0
   2f60c:	beq	2f558 <__assert_fail@plt+0x1c968>
   2f610:	mov	r0, r7
   2f614:	movw	r1, #18956	; 0x4a0c
   2f618:	movt	r1, #4
   2f61c:	bl	124f4 <strcmp@plt>
   2f620:	cmp	r0, #0
   2f624:	beq	2f558 <__assert_fail@plt+0x1c968>
   2f628:	mov	r0, r7
   2f62c:	movw	r1, #18961	; 0x4a11
   2f630:	movt	r1, #4
   2f634:	bl	124f4 <strcmp@plt>
   2f638:	cmp	r0, #0
   2f63c:	beq	2f558 <__assert_fail@plt+0x1c968>
   2f640:	mov	r0, r7
   2f644:	movw	r1, #18972	; 0x4a1c
   2f648:	movt	r1, #4
   2f64c:	bl	124f4 <strcmp@plt>
   2f650:	cmp	r0, #0
   2f654:	beq	2f558 <__assert_fail@plt+0x1c968>
   2f658:	mov	r0, r7
   2f65c:	movw	r1, #18978	; 0x4a22
   2f660:	movt	r1, #4
   2f664:	bl	124f4 <strcmp@plt>
   2f668:	cmp	r0, #0
   2f66c:	beq	2f558 <__assert_fail@plt+0x1c968>
   2f670:	mov	r0, r7
   2f674:	movw	r1, #18983	; 0x4a27
   2f678:	movt	r1, #4
   2f67c:	bl	124f4 <strcmp@plt>
   2f680:	cmp	r0, #0
   2f684:	beq	2f558 <__assert_fail@plt+0x1c968>
   2f688:	mov	r0, r7
   2f68c:	movw	r1, #18989	; 0x4a2d
   2f690:	movt	r1, #4
   2f694:	bl	124f4 <strcmp@plt>
   2f698:	cmp	r0, #0
   2f69c:	beq	2f558 <__assert_fail@plt+0x1c968>
   2f6a0:	mov	r0, r7
   2f6a4:	movw	r1, #18995	; 0x4a33
   2f6a8:	movt	r1, #4
   2f6ac:	bl	124f4 <strcmp@plt>
   2f6b0:	cmp	r0, #0
   2f6b4:	mov	r1, #1
   2f6b8:	beq	2f55c <__assert_fail@plt+0x1c96c>
   2f6bc:	movw	r0, #19000	; 0x4a38
   2f6c0:	movt	r0, #4
   2f6c4:	ldr	r1, [sp, #4]
   2f6c8:	bl	124f4 <strcmp@plt>
   2f6cc:	clz	r0, r0
   2f6d0:	lsr	r1, r0, #5
   2f6d4:	b	2f55c <__assert_fail@plt+0x1c96c>
   2f6d8:	ldr	r0, [sp, #28]
   2f6dc:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2f6e0:	mov	r0, r9
   2f6e4:	bl	12794 <ferror_unlocked@plt>
   2f6e8:	cmp	r0, #0
   2f6ec:	beq	2f748 <__assert_fail@plt+0x1cb58>
   2f6f0:	bl	12908 <__errno_location@plt>
   2f6f4:	mov	r5, r0
   2f6f8:	ldr	r6, [r0]
   2f6fc:	mov	r0, r9
   2f700:	bl	129d4 <fclose@plt>
   2f704:	str	r6, [r5]
   2f708:	bl	12908 <__errno_location@plt>
   2f70c:	mov	r5, r0
   2f710:	ldr	r8, [r0]
   2f714:	mov	r6, #0
   2f718:	str	r6, [r4]
   2f71c:	ldr	r0, [sp, #32]
   2f720:	cmp	r0, #0
   2f724:	beq	2f740 <__assert_fail@plt+0x1cb50>
   2f728:	ldr	r7, [r0, #28]
   2f72c:	bl	2f850 <__assert_fail@plt+0x1cc60>
   2f730:	cmp	r7, #0
   2f734:	mov	r0, r7
   2f738:	bne	2f728 <__assert_fail@plt+0x1cb38>
   2f73c:	str	r7, [sp, #32]
   2f740:	str	r8, [r5]
   2f744:	b	2f784 <__assert_fail@plt+0x1cb94>
   2f748:	mov	r0, r9
   2f74c:	bl	129d4 <fclose@plt>
   2f750:	cmn	r0, #1
   2f754:	bne	2f778 <__assert_fail@plt+0x1cb88>
   2f758:	b	2f708 <__assert_fail@plt+0x1cb18>
   2f75c:	mov	r6, #0
   2f760:	b	2f784 <__assert_fail@plt+0x1cb94>
   2f764:	add	r4, sp, #32
   2f768:	mov	r0, r8
   2f76c:	bl	129f8 <endmntent@plt>
   2f770:	cmp	r0, #0
   2f774:	beq	2f708 <__assert_fail@plt+0x1cb18>
   2f778:	mov	r0, #0
   2f77c:	str	r0, [r4]
   2f780:	ldr	r6, [sp, #32]
   2f784:	mov	r0, r6
   2f788:	sub	sp, fp, #28
   2f78c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f790:	push	{fp, lr}
   2f794:	mov	fp, sp
   2f798:	mov	r1, #32
   2f79c:	bl	128cc <strchr@plt>
   2f7a0:	cmp	r0, #0
   2f7a4:	movne	r1, #0
   2f7a8:	strbne	r1, [r0]
   2f7ac:	pop	{fp, pc}
   2f7b0:	push	{r4, r5, r6, r7, fp, lr}
   2f7b4:	add	fp, sp, #16
   2f7b8:	mov	r7, r0
   2f7bc:	bl	128c0 <strlen@plt>
   2f7c0:	adds	r0, r0, #1
   2f7c4:	popcs	{r4, r5, r6, r7, fp, pc}
   2f7c8:	mov	r2, #0
   2f7cc:	mov	r1, r7
   2f7d0:	b	2f7e4 <__assert_fail@plt+0x1cbf4>
   2f7d4:	strb	r3, [r1], #1
   2f7d8:	add	r2, r2, #1
   2f7dc:	cmp	r2, r0
   2f7e0:	bcs	2f84c <__assert_fail@plt+0x1cc5c>
   2f7e4:	ldrb	r3, [r7, r2]
   2f7e8:	add	r6, r2, #4
   2f7ec:	cmp	r6, r0
   2f7f0:	bcs	2f7d4 <__assert_fail@plt+0x1cbe4>
   2f7f4:	cmp	r3, #92	; 0x5c
   2f7f8:	bne	2f7d4 <__assert_fail@plt+0x1cbe4>
   2f7fc:	add	r6, r2, r7
   2f800:	ldrb	r4, [r6, #1]
   2f804:	and	r5, r4, #252	; 0xfc
   2f808:	cmp	r5, #48	; 0x30
   2f80c:	bne	2f7d4 <__assert_fail@plt+0x1cbe4>
   2f810:	ldrb	ip, [r6, #2]
   2f814:	and	r6, ip, #248	; 0xf8
   2f818:	cmp	r6, #48	; 0x30
   2f81c:	bne	2f7d4 <__assert_fail@plt+0x1cbe4>
   2f820:	add	lr, r2, #3
   2f824:	ldrb	r6, [r7, lr]
   2f828:	and	r5, r6, #248	; 0xf8
   2f82c:	cmp	r5, #48	; 0x30
   2f830:	bne	2f7d4 <__assert_fail@plt+0x1cbe4>
   2f834:	lsl	r2, r4, #6
   2f838:	add	r2, r2, ip, lsl #3
   2f83c:	add	r2, r2, r6
   2f840:	add	r3, r2, #80	; 0x50
   2f844:	mov	r2, lr
   2f848:	b	2f7d4 <__assert_fail@plt+0x1cbe4>
   2f84c:	pop	{r4, r5, r6, r7, fp, pc}
   2f850:	push	{r4, sl, fp, lr}
   2f854:	add	fp, sp, #8
   2f858:	mov	r4, r0
   2f85c:	ldr	r0, [r0]
   2f860:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2f864:	ldr	r0, [r4, #4]
   2f868:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2f86c:	ldr	r0, [r4, #8]
   2f870:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2f874:	ldrb	r0, [r4, #24]
   2f878:	tst	r0, #4
   2f87c:	beq	2f888 <__assert_fail@plt+0x1cc98>
   2f880:	ldr	r0, [r4, #12]
   2f884:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2f888:	mov	r0, r4
   2f88c:	pop	{r4, sl, fp, lr}
   2f890:	b	2cad4 <__assert_fail@plt+0x19ee4>
   2f894:	push	{fp, lr}
   2f898:	mov	fp, sp
   2f89c:	cmp	r0, #0
   2f8a0:	beq	2f8bc <__assert_fail@plt+0x1cccc>
   2f8a4:	cmp	r1, #0
   2f8a8:	beq	2f8c8 <__assert_fail@plt+0x1ccd8>
   2f8ac:	cmn	r1, #1
   2f8b0:	ble	2f8d4 <__assert_fail@plt+0x1cce4>
   2f8b4:	pop	{fp, lr}
   2f8b8:	b	126a4 <realloc@plt>
   2f8bc:	mov	r0, r1
   2f8c0:	pop	{fp, lr}
   2f8c4:	b	2ed88 <__assert_fail@plt+0x1c198>
   2f8c8:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   2f8cc:	mov	r0, #0
   2f8d0:	pop	{fp, pc}
   2f8d4:	bl	12908 <__errno_location@plt>
   2f8d8:	mov	r1, #12
   2f8dc:	str	r1, [r0]
   2f8e0:	mov	r0, #0
   2f8e4:	pop	{fp, pc}
   2f8e8:	cmp	r2, #0
   2f8ec:	beq	2f91c <__assert_fail@plt+0x1cd2c>
   2f8f0:	mvn	r3, #0
   2f8f4:	udiv	r3, r3, r2
   2f8f8:	cmp	r3, r1
   2f8fc:	bcs	2f91c <__assert_fail@plt+0x1cd2c>
   2f900:	push	{fp, lr}
   2f904:	mov	fp, sp
   2f908:	bl	12908 <__errno_location@plt>
   2f90c:	mov	r1, #12
   2f910:	str	r1, [r0]
   2f914:	mov	r0, #0
   2f918:	pop	{fp, pc}
   2f91c:	mul	r1, r2, r1
   2f920:	b	2f894 <__assert_fail@plt+0x1cca4>
   2f924:	push	{fp, lr}
   2f928:	mov	fp, sp
   2f92c:	mov	ip, r1
   2f930:	mov	lr, r0
   2f934:	movw	r0, #24288	; 0x5ee0
   2f938:	movt	r0, #5
   2f93c:	ldr	r3, [r0]
   2f940:	mov	r0, #16
   2f944:	and	r0, r0, r3, lsr #21
   2f948:	ldrb	r1, [r2, #28]
   2f94c:	and	r1, r1, #111	; 0x6f
   2f950:	orr	r0, r1, r0
   2f954:	orr	r0, r0, #128	; 0x80
   2f958:	strb	r0, [r2, #28]
   2f95c:	mov	r0, r2
   2f960:	mov	r1, lr
   2f964:	mov	r2, ip
   2f968:	bl	2f9a4 <__assert_fail@plt+0x1cdb4>
   2f96c:	cmp	r0, #0
   2f970:	beq	2f99c <__assert_fail@plt+0x1cdac>
   2f974:	movw	r1, #19408	; 0x4bd0
   2f978:	movt	r1, #4
   2f97c:	ldr	r0, [r1, r0, lsl #2]
   2f980:	movw	r1, #19024	; 0x4a50
   2f984:	movt	r1, #4
   2f988:	add	r1, r1, r0
   2f98c:	mov	r0, #0
   2f990:	mov	r2, #5
   2f994:	pop	{fp, lr}
   2f998:	b	12674 <dcgettext@plt>
   2f99c:	mov	r0, #0
   2f9a0:	pop	{fp, pc}
   2f9a4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2f9a8:	add	fp, sp, #24
   2f9ac:	sub	sp, sp, #96	; 0x60
   2f9b0:	mov	r6, r3
   2f9b4:	mov	r7, r2
   2f9b8:	mov	r8, r1
   2f9bc:	mov	r4, r0
   2f9c0:	mov	r0, #0
   2f9c4:	str	r0, [fp, #-28]	; 0xffffffe4
   2f9c8:	str	r0, [r4, #24]
   2f9cc:	str	r0, [r4, #8]
   2f9d0:	str	r3, [r4, #12]
   2f9d4:	ldrb	r0, [r4, #28]
   2f9d8:	and	r0, r0, #144	; 0x90
   2f9dc:	strb	r0, [r4, #28]
   2f9e0:	ldr	r5, [r4]
   2f9e4:	ldr	r0, [r4, #4]
   2f9e8:	cmp	r0, #159	; 0x9f
   2f9ec:	bls	2fb50 <__assert_fail@plt+0x1cf60>
   2f9f0:	mov	r0, #160	; 0xa0
   2f9f4:	str	r0, [r4, #8]
   2f9f8:	mov	r0, r5
   2f9fc:	mov	r1, r7
   2fa00:	bl	31094 <__assert_fail@plt+0x1e4a4>
   2fa04:	str	r0, [fp, #-28]	; 0xffffffe4
   2fa08:	cmp	r0, #0
   2fa0c:	bne	2fa40 <__assert_fail@plt+0x1ce50>
   2fa10:	movw	r1, #9664	; 0x25c0
   2fa14:	movt	r1, #1
   2fa18:	movw	r2, #10600	; 0x2968
   2fa1c:	movt	r2, #1
   2fa20:	orrs	r1, r2, r1
   2fa24:	beq	2fa40 <__assert_fail@plt+0x1ce50>
   2fa28:	add	r0, r5, #136	; 0x88
   2fa2c:	mov	r1, #0
   2fa30:	bl	12614 <pthread_mutex_init@plt>
   2fa34:	cmp	r0, #0
   2fa38:	bne	2fb74 <__assert_fail@plt+0x1cf84>
   2fa3c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2fa40:	cmp	r0, #0
   2fa44:	bne	2fb38 <__assert_fail@plt+0x1cf48>
   2fa48:	ldr	r3, [r4, #20]
   2fa4c:	str	r5, [sp, #4]
   2fa50:	ubfx	r0, r6, #22, #1
   2fa54:	str	r0, [sp]
   2fa58:	add	r0, sp, #8
   2fa5c:	mov	r1, r8
   2fa60:	mov	r2, r7
   2fa64:	bl	31250 <__assert_fail@plt+0x1e660>
   2fa68:	str	r0, [fp, #-28]	; 0xffffffe4
   2fa6c:	cmp	r0, #0
   2fa70:	bne	2fb08 <__assert_fail@plt+0x1cf18>
   2fa74:	mov	r0, #0
   2fa78:	str	r0, [r4, #24]
   2fa7c:	add	r0, sp, #8
   2fa80:	sub	r3, fp, #28
   2fa84:	mov	r1, r4
   2fa88:	mov	r2, r6
   2fa8c:	bl	31424 <__assert_fail@plt+0x1e834>
   2fa90:	str	r0, [r5, #52]	; 0x34
   2fa94:	cmp	r0, #0
   2fa98:	beq	2fb08 <__assert_fail@plt+0x1cf18>
   2fa9c:	mov	r0, r4
   2faa0:	bl	314f8 <__assert_fail@plt+0x1e908>
   2faa4:	str	r0, [fp, #-28]	; 0xffffffe4
   2faa8:	cmp	r0, #0
   2faac:	bne	2fb08 <__assert_fail@plt+0x1cf18>
   2fab0:	ands	r0, r6, #4194304	; 0x400000
   2fab4:	bne	2fad4 <__assert_fail@plt+0x1cee4>
   2fab8:	ldrb	r0, [r5, #88]	; 0x58
   2fabc:	ands	r0, r0, #4
   2fac0:	beq	2fad4 <__assert_fail@plt+0x1cee4>
   2fac4:	ldr	r0, [r4, #20]
   2fac8:	cmp	r0, #0
   2facc:	moveq	r0, r5
   2fad0:	bleq	31714 <__assert_fail@plt+0x1eb24>
   2fad4:	mov	r0, r5
   2fad8:	bl	318b8 <__assert_fail@plt+0x1ecc8>
   2fadc:	str	r0, [fp, #-28]	; 0xffffffe4
   2fae0:	mov	r0, r4
   2fae4:	bl	313a0 <__assert_fail@plt+0x1e7b0>
   2fae8:	add	r0, sp, #8
   2faec:	bl	313f0 <__assert_fail@plt+0x1e800>
   2faf0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2faf4:	cmp	r0, #0
   2faf8:	bne	2fb18 <__assert_fail@plt+0x1cf28>
   2fafc:	ldr	r0, [fp, #-28]	; 0xffffffe4
   2fb00:	sub	sp, fp, #24
   2fb04:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2fb08:	mov	r0, r4
   2fb0c:	bl	313a0 <__assert_fail@plt+0x1e7b0>
   2fb10:	add	r0, sp, #8
   2fb14:	bl	313f0 <__assert_fail@plt+0x1e800>
   2fb18:	movw	r0, #9664	; 0x25c0
   2fb1c:	movt	r0, #1
   2fb20:	movw	r1, #10600	; 0x2968
   2fb24:	movt	r1, #1
   2fb28:	orrs	r0, r1, r0
   2fb2c:	beq	2fb38 <__assert_fail@plt+0x1cf48>
   2fb30:	add	r0, r5, #136	; 0x88
   2fb34:	bl	1253c <pthread_mutex_destroy@plt>
   2fb38:	mov	r0, r5
   2fb3c:	bl	301a8 <__assert_fail@plt+0x1d5b8>
   2fb40:	mov	r0, #0
   2fb44:	str	r0, [r4]
   2fb48:	str	r0, [r4, #4]
   2fb4c:	b	2fafc <__assert_fail@plt+0x1cf0c>
   2fb50:	mov	r9, #160	; 0xa0
   2fb54:	mov	r0, r5
   2fb58:	mov	r1, #160	; 0xa0
   2fb5c:	bl	2f894 <__assert_fail@plt+0x1cca4>
   2fb60:	cmp	r0, #0
   2fb64:	beq	2fb80 <__assert_fail@plt+0x1cf90>
   2fb68:	mov	r5, r0
   2fb6c:	stm	r4, {r0, r9}
   2fb70:	b	2f9f0 <__assert_fail@plt+0x1ce00>
   2fb74:	mov	r0, #12
   2fb78:	str	r0, [fp, #-28]	; 0xffffffe4
   2fb7c:	b	2fb38 <__assert_fail@plt+0x1cf48>
   2fb80:	mov	r0, #12
   2fb84:	sub	sp, fp, #24
   2fb88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2fb8c:	movw	r2, #24288	; 0x5ee0
   2fb90:	movt	r2, #5
   2fb94:	ldr	r1, [r2]
   2fb98:	str	r0, [r2]
   2fb9c:	mov	r0, r1
   2fba0:	bx	lr
   2fba4:	push	{r4, r5, r6, sl, fp, lr}
   2fba8:	add	fp, sp, #16
   2fbac:	mov	r4, r0
   2fbb0:	ldr	r6, [r0]
   2fbb4:	ldr	r5, [r0, #16]
   2fbb8:	mov	r0, r5
   2fbbc:	mov	r1, #0
   2fbc0:	mov	r2, #256	; 0x100
   2fbc4:	bl	12938 <memset@plt>
   2fbc8:	ldr	r1, [r6, #36]	; 0x24
   2fbcc:	mov	r0, r4
   2fbd0:	mov	r2, r5
   2fbd4:	bl	2fc34 <__assert_fail@plt+0x1d044>
   2fbd8:	ldr	r0, [r6, #36]	; 0x24
   2fbdc:	ldr	r1, [r6, #40]	; 0x28
   2fbe0:	cmp	r0, r1
   2fbe4:	movne	r0, r4
   2fbe8:	movne	r2, r5
   2fbec:	blne	2fc34 <__assert_fail@plt+0x1d044>
   2fbf0:	ldr	r0, [r6, #36]	; 0x24
   2fbf4:	ldr	r1, [r6, #44]	; 0x2c
   2fbf8:	cmp	r0, r1
   2fbfc:	movne	r0, r4
   2fc00:	movne	r2, r5
   2fc04:	blne	2fc34 <__assert_fail@plt+0x1d044>
   2fc08:	ldr	r0, [r6, #36]	; 0x24
   2fc0c:	ldr	r1, [r6, #48]	; 0x30
   2fc10:	cmp	r0, r1
   2fc14:	movne	r0, r4
   2fc18:	movne	r2, r5
   2fc1c:	blne	2fc34 <__assert_fail@plt+0x1d044>
   2fc20:	ldrb	r0, [r4, #28]
   2fc24:	orr	r0, r0, #8
   2fc28:	strb	r0, [r4, #28]
   2fc2c:	mov	r0, #0
   2fc30:	pop	{r4, r5, r6, sl, fp, pc}
   2fc34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fc38:	add	fp, sp, #28
   2fc3c:	sub	sp, sp, #308	; 0x134
   2fc40:	mov	r5, r2
   2fc44:	str	r0, [sp, #20]
   2fc48:	ldr	r8, [r0]
   2fc4c:	ldr	r0, [r8, #92]	; 0x5c
   2fc50:	mov	r9, #0
   2fc54:	cmp	r0, #1
   2fc58:	bne	2fc68 <__assert_fail@plt+0x1d078>
   2fc5c:	ldr	r0, [sp, #20]
   2fc60:	ldrb	r0, [r0, #14]
   2fc64:	ubfx	r9, r0, #6, #1
   2fc68:	ldr	r0, [r1, #8]
   2fc6c:	cmp	r0, #1
   2fc70:	blt	2ffb0 <__assert_fail@plt+0x1d3c0>
   2fc74:	add	r0, sp, #32
   2fc78:	add	r0, r0, #1
   2fc7c:	str	r0, [sp, #4]
   2fc80:	mov	r7, #1
   2fc84:	movw	r0, #1
   2fc88:	movt	r0, #32
   2fc8c:	add	r0, r0, #254	; 0xfe
   2fc90:	str	r0, [sp, #8]
   2fc94:	mov	r2, #0
   2fc98:	str	r1, [sp, #12]
   2fc9c:	str	r8, [sp, #24]
   2fca0:	b	2fcbc <__assert_fail@plt+0x1d0cc>
   2fca4:	ldr	r1, [sp, #12]
   2fca8:	ldr	r0, [r1, #8]
   2fcac:	ldr	r2, [sp, #16]
   2fcb0:	add	r2, r2, #1
   2fcb4:	cmp	r2, r0
   2fcb8:	bge	2ffb0 <__assert_fail@plt+0x1d3c0>
   2fcbc:	ldr	r0, [r1, #12]
   2fcc0:	str	r2, [sp, #16]
   2fcc4:	ldr	sl, [r0, r2, lsl #2]
   2fcc8:	ldr	r0, [r8]
   2fccc:	add	r1, r0, sl, lsl #3
   2fcd0:	ldrb	r4, [r1, #4]
   2fcd4:	cmp	r4, #1
   2fcd8:	beq	2fd54 <__assert_fail@plt+0x1d164>
   2fcdc:	cmp	r4, #6
   2fce0:	beq	2fe44 <__assert_fail@plt+0x1d254>
   2fce4:	cmp	r4, #3
   2fce8:	bne	2fec4 <__assert_fail@plt+0x1d2d4>
   2fcec:	mov	r4, #0
   2fcf0:	mov	r6, #0
   2fcf4:	str	sl, [sp, #28]
   2fcf8:	b	2fd10 <__assert_fail@plt+0x1d120>
   2fcfc:	add	r6, r6, #1
   2fd00:	cmp	r6, #8
   2fd04:	ldr	r8, [sp, #24]
   2fd08:	ldr	sl, [sp, #28]
   2fd0c:	beq	2fca4 <__assert_fail@plt+0x1d0b4>
   2fd10:	ldr	r0, [r8]
   2fd14:	ldr	r0, [r0, sl, lsl #3]
   2fd18:	ldr	r8, [r0, r6, lsl #2]
   2fd1c:	mov	sl, #0
   2fd20:	b	2fd34 <__assert_fail@plt+0x1d144>
   2fd24:	add	r4, r4, #1
   2fd28:	add	sl, sl, #1
   2fd2c:	cmp	sl, #32
   2fd30:	beq	2fcfc <__assert_fail@plt+0x1d10c>
   2fd34:	tst	r8, r7, lsl sl
   2fd38:	strbne	r7, [r5, r4]
   2fd3c:	cmpne	r9, #0
   2fd40:	beq	2fd24 <__assert_fail@plt+0x1d134>
   2fd44:	mov	r0, r4
   2fd48:	bl	12608 <tolower@plt>
   2fd4c:	strb	r7, [r5, r0]
   2fd50:	b	2fd24 <__assert_fail@plt+0x1d134>
   2fd54:	ldrb	r0, [r0, sl, lsl #3]
   2fd58:	strb	r7, [r5, r0]
   2fd5c:	cmp	r9, #0
   2fd60:	beq	2fd6c <__assert_fail@plt+0x1d17c>
   2fd64:	bl	12608 <tolower@plt>
   2fd68:	strb	r7, [r5, r0]
   2fd6c:	ldr	r0, [sp, #20]
   2fd70:	ldrb	r0, [r0, #14]
   2fd74:	tst	r0, #64	; 0x40
   2fd78:	beq	2fca4 <__assert_fail@plt+0x1d0b4>
   2fd7c:	ldr	r0, [r8, #92]	; 0x5c
   2fd80:	cmp	r0, #2
   2fd84:	blt	2fca4 <__assert_fail@plt+0x1d0b4>
   2fd88:	ldr	r0, [r8]
   2fd8c:	ldrb	r0, [r0, sl, lsl #3]
   2fd90:	strb	r0, [sp, #32]
   2fd94:	ldr	r0, [r8, #8]
   2fd98:	add	r1, sl, #1
   2fd9c:	cmp	r1, r0
   2fda0:	ldr	r0, [sp, #4]
   2fda4:	mov	r6, #0
   2fda8:	movw	r4, #1
   2fdac:	movt	r4, #32
   2fdb0:	bcs	2fdf4 <__assert_fail@plt+0x1d204>
   2fdb4:	ldr	r0, [sp, #4]
   2fdb8:	ldr	r1, [r8]
   2fdbc:	add	r1, r1, sl, lsl #3
   2fdc0:	ldr	r2, [r1, #12]
   2fdc4:	ldr	r3, [sp, #8]
   2fdc8:	and	r2, r2, r3
   2fdcc:	cmp	r2, r4
   2fdd0:	bne	2fdf4 <__assert_fail@plt+0x1d204>
   2fdd4:	ldrb	r1, [r1, #8]
   2fdd8:	strb	r1, [r0], #1
   2fddc:	add	r1, sl, #1
   2fde0:	ldr	r2, [r8, #8]
   2fde4:	add	r3, sl, #2
   2fde8:	cmp	r3, r2
   2fdec:	mov	sl, r1
   2fdf0:	bcc	2fdb8 <__assert_fail@plt+0x1d1c8>
   2fdf4:	str	r6, [fp, #-44]	; 0xffffffd4
   2fdf8:	str	r6, [fp, #-48]	; 0xffffffd0
   2fdfc:	add	r1, sp, #32
   2fe00:	sub	r4, r0, r1
   2fe04:	sub	r0, fp, #36	; 0x24
   2fe08:	mov	r2, r4
   2fe0c:	sub	r3, fp, #48	; 0x30
   2fe10:	bl	2edb8 <__assert_fail@plt+0x1c1c8>
   2fe14:	cmp	r0, r4
   2fe18:	bne	2fca4 <__assert_fail@plt+0x1d0b4>
   2fe1c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2fe20:	bl	12620 <towlower@plt>
   2fe24:	mov	r1, r0
   2fe28:	add	r0, sp, #32
   2fe2c:	sub	r2, fp, #48	; 0x30
   2fe30:	bl	124b8 <wcrtomb@plt>
   2fe34:	cmn	r0, #1
   2fe38:	ldrbne	r0, [sp, #32]
   2fe3c:	strbne	r7, [r5, r0]
   2fe40:	b	2fca4 <__assert_fail@plt+0x1d0b4>
   2fe44:	ldr	r4, [r0, sl, lsl #3]
   2fe48:	ldr	r0, [r8, #92]	; 0x5c
   2fe4c:	cmp	r0, #2
   2fe50:	blt	2fedc <__assert_fail@plt+0x1d2ec>
   2fe54:	ldr	r0, [r4, #36]	; 0x24
   2fe58:	cmp	r0, #0
   2fe5c:	bne	2fe78 <__assert_fail@plt+0x1d288>
   2fe60:	ldrb	r0, [r4, #16]
   2fe64:	tst	r0, #1
   2fe68:	bne	2fe78 <__assert_fail@plt+0x1d288>
   2fe6c:	ldr	r0, [r4, #32]
   2fe70:	cmp	r0, #0
   2fe74:	beq	2fedc <__assert_fail@plt+0x1d2ec>
   2fe78:	mov	r4, #0
   2fe7c:	strb	r4, [fp, #-48]	; 0xffffffd0
   2fe80:	str	r4, [sp, #36]	; 0x24
   2fe84:	str	r4, [sp, #32]
   2fe88:	mov	r0, #0
   2fe8c:	sub	r1, fp, #48	; 0x30
   2fe90:	mov	r2, #1
   2fe94:	add	r3, sp, #32
   2fe98:	bl	2edb8 <__assert_fail@plt+0x1c1c8>
   2fe9c:	cmn	r0, #2
   2fea0:	ldrbeq	r0, [fp, #-48]	; 0xffffffd0
   2fea4:	strbeq	r7, [r5, r0]
   2fea8:	ldrb	r0, [fp, #-48]	; 0xffffffd0
   2feac:	add	r0, r0, #1
   2feb0:	strb	r0, [fp, #-48]	; 0xffffffd0
   2feb4:	uxtb	r1, r0
   2feb8:	cmp	r1, r0
   2febc:	beq	2fe80 <__assert_fail@plt+0x1d290>
   2fec0:	b	2fca4 <__assert_fail@plt+0x1d0b4>
   2fec4:	cmp	r4, #7
   2fec8:	bhi	2fca4 <__assert_fail@plt+0x1d0b4>
   2fecc:	mov	r0, #164	; 0xa4
   2fed0:	tst	r0, r7, lsl r4
   2fed4:	beq	2fca4 <__assert_fail@plt+0x1d0b4>
   2fed8:	b	2ff88 <__assert_fail@plt+0x1d398>
   2fedc:	ldr	r0, [r4, #20]
   2fee0:	cmp	r0, #1
   2fee4:	blt	2fca4 <__assert_fail@plt+0x1d0b4>
   2fee8:	mov	r6, #0
   2feec:	b	2ff00 <__assert_fail@plt+0x1d310>
   2fef0:	add	r6, r6, #1
   2fef4:	ldr	r0, [r4, #20]
   2fef8:	cmp	r6, r0
   2fefc:	bge	2fca4 <__assert_fail@plt+0x1d0b4>
   2ff00:	mov	r0, #0
   2ff04:	str	r0, [fp, #-44]	; 0xffffffd4
   2ff08:	str	r0, [fp, #-48]	; 0xffffffd0
   2ff0c:	ldr	r0, [r4]
   2ff10:	ldr	r1, [r0, r6, lsl #2]
   2ff14:	add	r0, sp, #32
   2ff18:	sub	r2, fp, #48	; 0x30
   2ff1c:	bl	124b8 <wcrtomb@plt>
   2ff20:	cmn	r0, #1
   2ff24:	beq	2ff40 <__assert_fail@plt+0x1d350>
   2ff28:	ldrb	r0, [sp, #32]
   2ff2c:	strb	r7, [r5, r0]
   2ff30:	cmp	r9, #0
   2ff34:	beq	2ff40 <__assert_fail@plt+0x1d350>
   2ff38:	bl	12608 <tolower@plt>
   2ff3c:	strb	r7, [r5, r0]
   2ff40:	ldr	r0, [sp, #20]
   2ff44:	ldrb	r0, [r0, #14]
   2ff48:	tst	r0, #64	; 0x40
   2ff4c:	beq	2fef0 <__assert_fail@plt+0x1d300>
   2ff50:	ldr	r0, [r8, #92]	; 0x5c
   2ff54:	cmp	r0, #2
   2ff58:	blt	2fef0 <__assert_fail@plt+0x1d300>
   2ff5c:	ldr	r0, [r4]
   2ff60:	ldr	r0, [r0, r6, lsl #2]
   2ff64:	bl	12620 <towlower@plt>
   2ff68:	mov	r1, r0
   2ff6c:	add	r0, sp, #32
   2ff70:	sub	r2, fp, #48	; 0x30
   2ff74:	bl	124b8 <wcrtomb@plt>
   2ff78:	cmn	r0, #1
   2ff7c:	ldrbne	r0, [sp, #32]
   2ff80:	strbne	r7, [r5, r0]
   2ff84:	b	2fef0 <__assert_fail@plt+0x1d300>
   2ff88:	mov	r0, r5
   2ff8c:	mov	r1, #1
   2ff90:	mov	r2, #256	; 0x100
   2ff94:	bl	12938 <memset@plt>
   2ff98:	cmp	r4, #2
   2ff9c:	bne	2ffb0 <__assert_fail@plt+0x1d3c0>
   2ffa0:	ldr	r1, [sp, #20]
   2ffa4:	ldrb	r0, [r1, #28]
   2ffa8:	orr	r0, r0, #1
   2ffac:	strb	r0, [r1, #28]
   2ffb0:	sub	sp, fp, #28
   2ffb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ffb8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2ffbc:	add	fp, sp, #24
   2ffc0:	mov	r7, r2
   2ffc4:	mov	r8, r1
   2ffc8:	mov	r4, r0
   2ffcc:	mov	r0, #0
   2ffd0:	str	r0, [r4]
   2ffd4:	str	r0, [r4, #4]
   2ffd8:	str	r0, [r4, #8]
   2ffdc:	mov	r0, #256	; 0x100
   2ffe0:	bl	2ed88 <__assert_fail@plt+0x1c198>
   2ffe4:	str	r0, [r4, #16]
   2ffe8:	cmp	r0, #0
   2ffec:	beq	3009c <__assert_fail@plt+0x1d4ac>
   2fff0:	movw	r0, #45820	; 0xb2fc
   2fff4:	movt	r0, #3
   2fff8:	tst	r7, #1
   2fffc:	movweq	r0, #710	; 0x2c6
   30000:	movteq	r0, #257	; 0x101
   30004:	and	r1, r7, #2
   30008:	orr	r5, r0, r1, lsl #21
   3000c:	tst	r7, #4
   30010:	bne	30024 <__assert_fail@plt+0x1d434>
   30014:	ldrb	r0, [r4, #28]
   30018:	and	r0, r0, #127	; 0x7f
   3001c:	strb	r0, [r4, #28]
   30020:	b	30040 <__assert_fail@plt+0x1d450>
   30024:	ldrb	r0, [r4, #28]
   30028:	orr	r0, r0, #128	; 0x80
   3002c:	strb	r0, [r4, #28]
   30030:	movw	r0, #45758	; 0xb2be
   30034:	movt	r0, #323	; 0x143
   30038:	and	r0, r5, r0
   3003c:	orr	r5, r0, #256	; 0x100
   30040:	mov	r6, #0
   30044:	str	r6, [r4, #20]
   30048:	and	r0, r7, #8
   3004c:	ldrb	r1, [r4, #28]
   30050:	and	r1, r1, #239	; 0xef
   30054:	orr	r0, r1, r0, lsl #1
   30058:	strb	r0, [r4, #28]
   3005c:	mov	r0, r8
   30060:	bl	128c0 <strlen@plt>
   30064:	mov	r2, r0
   30068:	mov	r0, r4
   3006c:	mov	r1, r8
   30070:	mov	r3, r5
   30074:	bl	2f9a4 <__assert_fail@plt+0x1cdb4>
   30078:	mov	r5, r0
   3007c:	cmp	r0, #16
   30080:	movweq	r5, #8
   30084:	cmp	r5, #0
   30088:	bne	300a8 <__assert_fail@plt+0x1d4b8>
   3008c:	mov	r0, r4
   30090:	bl	2fba4 <__assert_fail@plt+0x1cfb4>
   30094:	mov	r0, r6
   30098:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3009c:	mov	r6, #12
   300a0:	mov	r0, r6
   300a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   300a8:	ldr	r0, [r4, #16]
   300ac:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   300b0:	str	r6, [r4, #16]
   300b4:	mov	r0, r5
   300b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   300bc:	push	{r4, r5, r6, r7, fp, lr}
   300c0:	add	fp, sp, #16
   300c4:	cmp	r0, #17
   300c8:	bcs	3013c <__assert_fail@plt+0x1d54c>
   300cc:	mov	r5, r3
   300d0:	mov	r4, r2
   300d4:	movw	r1, #19408	; 0x4bd0
   300d8:	movt	r1, #4
   300dc:	ldr	r0, [r1, r0, lsl #2]
   300e0:	movw	r1, #19024	; 0x4a50
   300e4:	movt	r1, #4
   300e8:	add	r1, r1, r0
   300ec:	mov	r0, #0
   300f0:	mov	r2, #5
   300f4:	bl	12674 <dcgettext@plt>
   300f8:	mov	r6, r0
   300fc:	bl	128c0 <strlen@plt>
   30100:	add	r7, r0, #1
   30104:	cmp	r5, #0
   30108:	beq	30124 <__assert_fail@plt+0x1d534>
   3010c:	cmp	r7, r5
   30110:	mov	r2, r7
   30114:	bhi	3012c <__assert_fail@plt+0x1d53c>
   30118:	mov	r0, r4
   3011c:	mov	r1, r6
   30120:	bl	125f0 <memcpy@plt>
   30124:	mov	r0, r7
   30128:	pop	{r4, r5, r6, r7, fp, pc}
   3012c:	sub	r2, r5, #1
   30130:	mov	r0, #0
   30134:	strb	r0, [r4, r2]
   30138:	b	30118 <__assert_fail@plt+0x1d528>
   3013c:	bl	12b9c <abort@plt>
   30140:	push	{r4, r5, fp, lr}
   30144:	add	fp, sp, #8
   30148:	mov	r4, r0
   3014c:	ldr	r5, [r0]
   30150:	cmp	r5, #0
   30154:	beq	30180 <__assert_fail@plt+0x1d590>
   30158:	movw	r0, #9664	; 0x25c0
   3015c:	movt	r0, #1
   30160:	movw	r1, #10600	; 0x2968
   30164:	movt	r1, #1
   30168:	orrs	r0, r1, r0
   3016c:	beq	30178 <__assert_fail@plt+0x1d588>
   30170:	add	r0, r5, #136	; 0x88
   30174:	bl	1253c <pthread_mutex_destroy@plt>
   30178:	mov	r0, r5
   3017c:	bl	301a8 <__assert_fail@plt+0x1d5b8>
   30180:	mov	r5, #0
   30184:	str	r5, [r4]
   30188:	str	r5, [r4, #4]
   3018c:	ldr	r0, [r4, #16]
   30190:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   30194:	str	r5, [r4, #16]
   30198:	ldr	r0, [r4, #20]
   3019c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   301a0:	str	r5, [r4, #20]
   301a4:	pop	{r4, r5, fp, pc}
   301a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   301ac:	add	fp, sp, #24
   301b0:	mov	r8, r0
   301b4:	ldr	r0, [r0]
   301b8:	cmp	r0, #0
   301bc:	beq	301f4 <__assert_fail@plt+0x1d604>
   301c0:	ldr	r0, [r8, #8]
   301c4:	cmp	r0, #0
   301c8:	beq	301f4 <__assert_fail@plt+0x1d604>
   301cc:	mov	r5, #0
   301d0:	mov	r6, #0
   301d4:	ldr	r0, [r8]
   301d8:	add	r0, r0, r5
   301dc:	bl	30fcc <__assert_fail@plt+0x1e3dc>
   301e0:	add	r5, r5, #8
   301e4:	add	r6, r6, #1
   301e8:	ldr	r0, [r8, #8]
   301ec:	cmp	r6, r0
   301f0:	bcc	301d4 <__assert_fail@plt+0x1d5e4>
   301f4:	ldr	r0, [r8, #12]
   301f8:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   301fc:	ldr	r0, [r8, #8]
   30200:	cmp	r0, #0
   30204:	beq	30268 <__assert_fail@plt+0x1d678>
   30208:	mov	r5, #0
   3020c:	mov	r6, #8
   30210:	b	30228 <__assert_fail@plt+0x1d638>
   30214:	add	r6, r6, #12
   30218:	add	r5, r5, #1
   3021c:	ldr	r0, [r8, #8]
   30220:	cmp	r5, r0
   30224:	bcs	30268 <__assert_fail@plt+0x1d678>
   30228:	ldr	r0, [r8, #24]
   3022c:	cmp	r0, #0
   30230:	beq	3023c <__assert_fail@plt+0x1d64c>
   30234:	ldr	r0, [r0, r6]
   30238:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   3023c:	ldr	r0, [r8, #28]
   30240:	cmp	r0, #0
   30244:	beq	30250 <__assert_fail@plt+0x1d660>
   30248:	ldr	r0, [r0, r6]
   3024c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   30250:	ldr	r0, [r8, #20]
   30254:	cmp	r0, #0
   30258:	beq	30214 <__assert_fail@plt+0x1d624>
   3025c:	ldr	r0, [r0, r6]
   30260:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   30264:	b	30214 <__assert_fail@plt+0x1d624>
   30268:	ldr	r0, [r8, #20]
   3026c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   30270:	ldr	r0, [r8, #24]
   30274:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   30278:	ldr	r0, [r8, #28]
   3027c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   30280:	ldr	r0, [r8]
   30284:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   30288:	ldr	r0, [r8, #32]
   3028c:	cmp	r0, #0
   30290:	beq	302f4 <__assert_fail@plt+0x1d704>
   30294:	mov	r5, #0
   30298:	b	302b8 <__assert_fail@plt+0x1d6c8>
   3029c:	ldr	r0, [r7]
   302a0:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   302a4:	add	r0, r5, #1
   302a8:	ldr	r1, [r8, #68]	; 0x44
   302ac:	cmp	r5, r1
   302b0:	mov	r5, r0
   302b4:	bcs	302f4 <__assert_fail@plt+0x1d704>
   302b8:	ldr	r6, [r8, #32]
   302bc:	add	r0, r5, r5, lsl #1
   302c0:	ldr	r0, [r6, r0, lsl #2]!
   302c4:	add	r7, r6, #8
   302c8:	cmp	r0, #1
   302cc:	blt	3029c <__assert_fail@plt+0x1d6ac>
   302d0:	mov	r4, #0
   302d4:	ldr	r0, [r7]
   302d8:	ldr	r0, [r0, r4, lsl #2]
   302dc:	bl	30ffc <__assert_fail@plt+0x1e40c>
   302e0:	add	r4, r4, #1
   302e4:	ldr	r0, [r6]
   302e8:	cmp	r4, r0
   302ec:	blt	302d4 <__assert_fail@plt+0x1d6e4>
   302f0:	b	3029c <__assert_fail@plt+0x1d6ac>
   302f4:	ldr	r0, [r8, #32]
   302f8:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   302fc:	ldr	r0, [r8, #60]	; 0x3c
   30300:	movw	r1, #19476	; 0x4c14
   30304:	movt	r1, #4
   30308:	cmp	r0, r1
   3030c:	beq	30314 <__assert_fail@plt+0x1d724>
   30310:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   30314:	ldr	r0, [r8, #132]	; 0x84
   30318:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   3031c:	mov	r0, r8
   30320:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   30324:	b	2cad4 <__assert_fail@plt+0x19ee4>
   30328:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3032c:	add	fp, sp, #28
   30330:	sub	sp, sp, #28
   30334:	mov	r7, #2
   30338:	ldr	sl, [fp, #8]
   3033c:	cmp	sl, #7
   30340:	bhi	30414 <__assert_fail@plt+0x1d824>
   30344:	mov	r6, r3
   30348:	mov	r9, r2
   3034c:	mov	r4, r1
   30350:	mov	r5, r0
   30354:	ldr	r0, [r0]
   30358:	str	r0, [sp, #24]
   3035c:	tst	sl, #4
   30360:	bne	30378 <__assert_fail@plt+0x1d788>
   30364:	mov	r0, r4
   30368:	bl	128c0 <strlen@plt>
   3036c:	mov	r7, r0
   30370:	mov	r8, #0
   30374:	b	30380 <__assert_fail@plt+0x1d790>
   30378:	ldr	r8, [r6]
   3037c:	ldr	r7, [r6, #4]
   30380:	movw	r0, #9664	; 0x25c0
   30384:	movt	r0, #1
   30388:	movw	r1, #10600	; 0x2968
   3038c:	movt	r1, #1
   30390:	orrs	r0, r1, r0
   30394:	str	r0, [sp, #20]
   30398:	beq	303a8 <__assert_fail@plt+0x1d7b8>
   3039c:	ldr	r0, [sp, #24]
   303a0:	add	r0, r0, #136	; 0x88
   303a4:	bl	1259c <pthread_mutex_lock@plt>
   303a8:	ldrb	r0, [r5, #28]
   303ac:	tst	r0, #16
   303b0:	bne	303c4 <__assert_fail@plt+0x1d7d4>
   303b4:	str	r7, [sp]
   303b8:	stmib	sp, {r7, r9}
   303bc:	str	r6, [sp, #12]
   303c0:	b	303d8 <__assert_fail@plt+0x1d7e8>
   303c4:	mov	r0, #0
   303c8:	str	r7, [sp]
   303cc:	str	r7, [sp, #4]
   303d0:	str	r0, [sp, #8]
   303d4:	str	r0, [sp, #12]
   303d8:	str	sl, [sp, #16]
   303dc:	mov	r0, r5
   303e0:	mov	r1, r4
   303e4:	mov	r2, r7
   303e8:	mov	r3, r8
   303ec:	bl	30420 <__assert_fail@plt+0x1d830>
   303f0:	mov	r7, r0
   303f4:	ldr	r0, [sp, #20]
   303f8:	cmp	r0, #0
   303fc:	beq	3040c <__assert_fail@plt+0x1d81c>
   30400:	ldr	r0, [sp, #24]
   30404:	add	r0, r0, #136	; 0x88
   30408:	bl	12458 <pthread_mutex_unlock@plt>
   3040c:	cmp	r7, #0
   30410:	movwne	r7, #1
   30414:	mov	r0, r7
   30418:	sub	sp, fp, #28
   3041c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30420:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30424:	add	fp, sp, #28
   30428:	sub	sp, sp, #196	; 0xc4
   3042c:	mov	r6, r3
   30430:	str	r2, [sp, #52]	; 0x34
   30434:	str	r1, [sp, #40]	; 0x28
   30438:	mov	r4, r0
   3043c:	ldr	sl, [r0]
   30440:	add	r0, sp, #56	; 0x38
   30444:	mov	r7, #0
   30448:	mov	r1, #0
   3044c:	mov	r2, #136	; 0x88
   30450:	bl	12938 <memset@plt>
   30454:	str	sl, [sp, #140]	; 0x8c
   30458:	ldr	r1, [r4, #16]
   3045c:	ldr	r0, [fp, #16]
   30460:	ldr	ip, [fp, #8]
   30464:	cmp	r1, #0
   30468:	mov	r5, #0
   3046c:	beq	30488 <__assert_fail@plt+0x1d898>
   30470:	ldrb	r2, [r4, #28]
   30474:	and	r2, r2, #9
   30478:	cmp	r2, #8
   3047c:	movne	r1, #0
   30480:	subs	r5, r6, ip
   30484:	movne	r5, r1
   30488:	str	r6, [sp, #36]	; 0x24
   3048c:	ldr	r1, [r4, #8]
   30490:	ldr	r2, [r4, #24]
   30494:	mvn	r3, r2
   30498:	cmp	r2, r0
   3049c:	addcc	r7, r3, r0
   304a0:	mov	r8, #1
   304a4:	cmp	r1, #0
   304a8:	beq	30990 <__assert_fail@plt+0x1dda0>
   304ac:	ldr	r1, [sl, #36]	; 0x24
   304b0:	cmp	r1, #0
   304b4:	ldrne	r2, [sl, #40]	; 0x28
   304b8:	cmpne	r2, #0
   304bc:	beq	30990 <__assert_fail@plt+0x1dda0>
   304c0:	ldr	r3, [sl, #44]	; 0x2c
   304c4:	cmp	r3, #0
   304c8:	ldrne	r6, [sl, #48]	; 0x30
   304cc:	cmpne	r6, #0
   304d0:	beq	30990 <__assert_fail@plt+0x1dda0>
   304d4:	ldr	r6, [r4, #20]
   304d8:	ldr	r1, [r1, #8]
   304dc:	cmp	r1, #0
   304e0:	bne	304f0 <__assert_fail@plt+0x1d900>
   304e4:	ldr	r1, [r2, #8]
   304e8:	cmp	r1, #0
   304ec:	beq	30acc <__assert_fail@plt+0x1dedc>
   304f0:	mov	r9, ip
   304f4:	ldr	r0, [fp, #16]
   304f8:	subs	r0, r0, r7
   304fc:	str	r0, [sp, #48]	; 0x30
   30500:	mov	r0, #1
   30504:	str	r0, [sp, #32]
   30508:	bne	3051c <__assert_fail@plt+0x1d92c>
   3050c:	ldr	r0, [sl, #76]	; 0x4c
   30510:	cmp	r0, #0
   30514:	movwne	r0, #1
   30518:	str	r0, [sp, #32]
   3051c:	ldr	r0, [sl, #8]
   30520:	ldr	r1, [r4, #12]
   30524:	str	sl, [sp, #8]
   30528:	str	r6, [sp]
   3052c:	ubfx	r1, r1, #22, #1
   30530:	str	r1, [sp, #4]
   30534:	add	r3, r0, #1
   30538:	add	r0, sp, #56	; 0x38
   3053c:	ldr	r1, [sp, #40]	; 0x28
   30540:	ldr	r2, [sp, #52]	; 0x34
   30544:	bl	36d48 <__assert_fail@plt+0x24158>
   30548:	cmp	r0, #0
   3054c:	bne	30bb0 <__assert_fail@plt+0x1dfc0>
   30550:	ldr	r1, [fp, #24]
   30554:	ldr	r0, [fp, #12]
   30558:	str	r0, [sp, #108]	; 0x6c
   3055c:	str	r0, [sp, #112]	; 0x70
   30560:	str	r4, [sp, #28]
   30564:	ldrb	r0, [r4, #28]
   30568:	lsr	r0, r0, #7
   3056c:	strb	r0, [sp, #133]	; 0x85
   30570:	ldr	r0, [sl, #76]	; 0x4c
   30574:	lsl	r2, r0, #1
   30578:	add	r0, sp, #56	; 0x38
   3057c:	bl	36df8 <__assert_fail@plt+0x24208>
   30580:	cmp	r0, #0
   30584:	bne	30bb0 <__assert_fail@plt+0x1dfc0>
   30588:	ldr	r0, [sp, #48]	; 0x30
   3058c:	cmp	r0, #1
   30590:	bhi	305a0 <__assert_fail@plt+0x1d9b0>
   30594:	ldrb	r0, [sl, #88]	; 0x58
   30598:	tst	r0, #2
   3059c:	beq	305c8 <__assert_fail@plt+0x1d9d8>
   305a0:	mov	r8, #12
   305a4:	ldr	r0, [sp, #92]	; 0x5c
   305a8:	cmn	r0, #-1073741822	; 0xc0000002
   305ac:	bhi	30970 <__assert_fail@plt+0x1dd80>
   305b0:	mov	r1, #4
   305b4:	add	r0, r1, r0, lsl #2
   305b8:	bl	2ed88 <__assert_fail@plt+0x1c198>
   305bc:	str	r0, [sp, #156]	; 0x9c
   305c0:	cmp	r0, #0
   305c4:	beq	30970 <__assert_fail@plt+0x1dd80>
   305c8:	str	r7, [sp, #12]
   305cc:	ldr	r7, [sp, #36]	; 0x24
   305d0:	str	r7, [fp, #-32]	; 0xffffffe0
   305d4:	mov	r0, #4
   305d8:	ldr	r1, [fp, #24]
   305dc:	tst	r1, #1
   305e0:	mov	r1, #4
   305e4:	movweq	r1, #6
   305e8:	str	r1, [sp, #116]	; 0x74
   305ec:	cmp	r9, r7
   305f0:	mov	r3, #1
   305f4:	mvnlt	r3, #0
   305f8:	mov	r4, r9
   305fc:	movlt	r4, r7
   30600:	mov	r1, sl
   30604:	mov	sl, r7
   30608:	movlt	sl, r9
   3060c:	str	r1, [sp, #44]	; 0x2c
   30610:	ldr	ip, [r1, #92]	; 0x5c
   30614:	cmp	r5, #0
   30618:	beq	30660 <__assert_fail@plt+0x1da70>
   3061c:	cmp	ip, #1
   30620:	ldr	r2, [sp, #52]	; 0x34
   30624:	beq	30644 <__assert_fail@plt+0x1da54>
   30628:	ldr	r0, [sp, #28]
   3062c:	ldr	r0, [r0, #12]
   30630:	and	r0, r0, #4194304	; 0x400000
   30634:	orr	r0, r6, r0
   30638:	clz	r0, r0
   3063c:	lsr	r0, r0, #5
   30640:	lsl	r0, r0, #2
   30644:	cmp	r6, #0
   30648:	mov	r1, r6
   3064c:	movwne	r1, #1
   30650:	cmp	r9, r7
   30654:	orrge	r1, r1, #2
   30658:	orr	r0, r1, r0
   3065c:	b	30668 <__assert_fail@plt+0x1da78>
   30660:	mov	r0, #8
   30664:	ldr	r2, [sp, #52]	; 0x34
   30668:	ldr	r1, [fp, #-32]	; 0xffffffe0
   3066c:	cmp	r1, sl
   30670:	cmpge	r4, r1
   30674:	blt	30968 <__assert_fail@plt+0x1dd78>
   30678:	sub	r1, fp, #32
   3067c:	cmp	r9, r7
   30680:	movwlt	r1, #0
   30684:	str	r1, [sp, #24]
   30688:	sub	lr, r0, #4
   3068c:	add	r9, sp, #56	; 0x38
   30690:	str	ip, [sp, #36]	; 0x24
   30694:	ldr	r7, [sp, #40]	; 0x28
   30698:	str	r3, [sp, #20]
   3069c:	str	lr, [sp, #16]
   306a0:	cmp	lr, #4
   306a4:	bhi	30754 <__assert_fail@plt+0x1db64>
   306a8:	add	r0, pc, #0
   306ac:	ldr	pc, [r0, lr, lsl #2]
   306b0:	andeq	r0, r3, r4, asr #13
   306b4:	andeq	r0, r3, r4, asr #13
   306b8:	muleq	r3, r4, r7
   306bc:	andeq	r0, r3, r4, asr #15
   306c0:	andeq	r0, r3, r0, lsl #16
   306c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   306c8:	cmp	r0, sl
   306cc:	blt	30968 <__assert_fail@plt+0x1dd78>
   306d0:	mov	r1, #0
   306d4:	cmp	r0, r2
   306d8:	ldrblt	r1, [r7, r0]
   306dc:	cmp	r6, #0
   306e0:	ldrbne	r1, [r6, r1]
   306e4:	ldrb	r1, [r5, r1]
   306e8:	cmp	r1, #0
   306ec:	bne	30800 <__assert_fail@plt+0x1dc10>
   306f0:	sub	r1, r0, #1
   306f4:	str	r1, [fp, #-32]	; 0xffffffe0
   306f8:	cmp	r0, sl
   306fc:	mov	r0, r1
   30700:	bgt	306d0 <__assert_fail@plt+0x1dae0>
   30704:	b	30968 <__assert_fail@plt+0x1dd78>
   30708:	ldr	r0, [fp, #-32]	; 0xffffffe0
   3070c:	add	r0, r0, r3
   30710:	str	r0, [fp, #-32]	; 0xffffffe0
   30714:	cmp	r0, sl
   30718:	blt	30968 <__assert_fail@plt+0x1dd78>
   3071c:	cmp	r0, r4
   30720:	ble	30754 <__assert_fail@plt+0x1db64>
   30724:	b	30968 <__assert_fail@plt+0x1dd78>
   30728:	mov	r0, r9
   3072c:	ldr	r2, [fp, #24]
   30730:	bl	36e80 <__assert_fail@plt+0x24290>
   30734:	cmp	r0, #0
   30738:	bne	30bb8 <__assert_fail@plt+0x1dfc8>
   3073c:	ldr	r0, [sp, #80]	; 0x50
   30740:	ldr	r1, [fp, #-32]	; 0xffffffe0
   30744:	sub	r0, r1, r0
   30748:	add	r9, sp, #56	; 0x38
   3074c:	ldr	r3, [sp, #20]
   30750:	b	3076c <__assert_fail@plt+0x1db7c>
   30754:	ldr	r0, [sp, #80]	; 0x50
   30758:	ldr	r2, [sp, #88]	; 0x58
   3075c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   30760:	sub	r0, r1, r0
   30764:	cmp	r0, r2
   30768:	bcs	30728 <__assert_fail@plt+0x1db38>
   3076c:	mov	r1, #0
   30770:	ldr	r2, [sp, #84]	; 0x54
   30774:	cmp	r0, r2
   30778:	bcs	30784 <__assert_fail@plt+0x1db94>
   3077c:	ldr	r1, [sp, #60]	; 0x3c
   30780:	ldrb	r1, [r1, r0]
   30784:	ldrb	r0, [r5, r1]
   30788:	cmp	r0, #0
   3078c:	beq	30708 <__assert_fail@plt+0x1db18>
   30790:	b	30800 <__assert_fail@plt+0x1dc10>
   30794:	ldr	r0, [fp, #-32]	; 0xffffffe0
   30798:	cmp	r0, r4
   3079c:	bge	307f4 <__assert_fail@plt+0x1dc04>
   307a0:	ldrb	r1, [r7, r0]
   307a4:	ldrb	r1, [r5, r1]
   307a8:	cmp	r1, #0
   307ac:	bne	307f4 <__assert_fail@plt+0x1dc04>
   307b0:	add	r0, r0, #1
   307b4:	str	r0, [fp, #-32]	; 0xffffffe0
   307b8:	cmp	r0, r4
   307bc:	blt	307a0 <__assert_fail@plt+0x1dbb0>
   307c0:	b	307f4 <__assert_fail@plt+0x1dc04>
   307c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   307c8:	cmp	r0, r4
   307cc:	bge	307f4 <__assert_fail@plt+0x1dc04>
   307d0:	ldrb	r1, [r7, r0]
   307d4:	ldrb	r1, [r6, r1]
   307d8:	ldrb	r1, [r5, r1]
   307dc:	cmp	r1, #0
   307e0:	bne	307f4 <__assert_fail@plt+0x1dc04>
   307e4:	add	r0, r0, #1
   307e8:	str	r0, [fp, #-32]	; 0xffffffe0
   307ec:	cmp	r0, r4
   307f0:	blt	307d0 <__assert_fail@plt+0x1dbe0>
   307f4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   307f8:	cmp	r1, r4
   307fc:	beq	30948 <__assert_fail@plt+0x1dd58>
   30800:	ldr	r1, [fp, #-32]	; 0xffffffe0
   30804:	mov	r0, r9
   30808:	ldr	r2, [fp, #24]
   3080c:	bl	36e80 <__assert_fail@plt+0x24290>
   30810:	cmp	r0, #0
   30814:	bne	30bb8 <__assert_fail@plt+0x1dfc8>
   30818:	ldr	r0, [sp, #36]	; 0x24
   3081c:	cmp	r0, #1
   30820:	add	r9, sp, #56	; 0x38
   30824:	ldrne	r0, [sp, #84]	; 0x54
   30828:	cmpne	r0, #0
   3082c:	bne	30934 <__assert_fail@plt+0x1dd44>
   30830:	mov	r0, #0
   30834:	str	r0, [sp, #164]	; 0xa4
   30838:	str	r0, [sp, #176]	; 0xb0
   3083c:	str	r0, [sp, #160]	; 0xa0
   30840:	mov	r0, r9
   30844:	ldr	r1, [sp, #32]
   30848:	ldr	r2, [sp, #24]
   3084c:	bl	374b8 <__assert_fail@plt+0x248c8>
   30850:	cmn	r0, #1
   30854:	beq	30900 <__assert_fail@plt+0x1dd10>
   30858:	mov	r2, r0
   3085c:	cmn	r0, #2
   30860:	beq	30bc0 <__assert_fail@plt+0x1dfd0>
   30864:	str	r2, [sp, #148]	; 0x94
   30868:	ldr	r9, [sp, #48]	; 0x30
   3086c:	cmp	r9, #2
   30870:	bcc	30884 <__assert_fail@plt+0x1dc94>
   30874:	ldr	r0, [sp, #28]
   30878:	ldrb	r0, [r0, #28]
   3087c:	ands	r0, r0, #16
   30880:	beq	30894 <__assert_fail@plt+0x1dca4>
   30884:	ldr	r0, [sp, #44]	; 0x2c
   30888:	ldr	r0, [r0, #76]	; 0x4c
   3088c:	cmp	r0, #0
   30890:	beq	308a8 <__assert_fail@plt+0x1dcb8>
   30894:	ldr	r0, [sp, #156]	; 0x9c
   30898:	ldr	r1, [r0, r2, lsl #2]
   3089c:	add	r0, sp, #56	; 0x38
   308a0:	bl	37854 <__assert_fail@plt+0x24c64>
   308a4:	str	r0, [sp, #152]	; 0x98
   308a8:	cmp	r9, #2
   308ac:	bcc	308d0 <__assert_fail@plt+0x1dce0>
   308b0:	ldr	r0, [sp, #28]
   308b4:	ldrb	r0, [r0, #28]
   308b8:	ands	r0, r0, #16
   308bc:	bne	308d0 <__assert_fail@plt+0x1dce0>
   308c0:	ldr	r0, [sp, #44]	; 0x2c
   308c4:	ldrb	r0, [r0, #88]	; 0x58
   308c8:	tst	r0, #1
   308cc:	bne	308e0 <__assert_fail@plt+0x1dcf0>
   308d0:	ldr	r0, [sp, #44]	; 0x2c
   308d4:	ldr	r0, [r0, #76]	; 0x4c
   308d8:	cmp	r0, #0
   308dc:	beq	3099c <__assert_fail@plt+0x1ddac>
   308e0:	add	r0, sp, #56	; 0x38
   308e4:	bl	378c8 <__assert_fail@plt+0x24cd8>
   308e8:	cmp	r0, #0
   308ec:	beq	3099c <__assert_fail@plt+0x1ddac>
   308f0:	mov	r8, r0
   308f4:	cmp	r0, #1
   308f8:	add	r9, sp, #56	; 0x38
   308fc:	bne	3096c <__assert_fail@plt+0x1dd7c>
   30900:	mov	r0, r9
   30904:	bl	37aec <__assert_fail@plt+0x24efc>
   30908:	ldr	r0, [fp, #-32]	; 0xffffffe0
   3090c:	ldr	r3, [sp, #20]
   30910:	add	r0, r0, r3
   30914:	str	r0, [fp, #-32]	; 0xffffffe0
   30918:	cmp	r0, sl
   3091c:	blt	30968 <__assert_fail@plt+0x1dd78>
   30920:	cmp	r4, r0
   30924:	ldr	r2, [sp, #52]	; 0x34
   30928:	ldr	lr, [sp, #16]
   3092c:	bge	306a0 <__assert_fail@plt+0x1dab0>
   30930:	b	30968 <__assert_fail@plt+0x1dd78>
   30934:	ldr	r0, [sp, #64]	; 0x40
   30938:	ldr	r0, [r0]
   3093c:	cmn	r0, #1
   30940:	bne	30830 <__assert_fail@plt+0x1dc40>
   30944:	b	30908 <__assert_fail@plt+0x1dd18>
   30948:	mov	r0, #0
   3094c:	cmp	r1, r2
   30950:	ldrblt	r0, [r7, r1]
   30954:	cmp	r6, #0
   30958:	ldrbne	r0, [r6, r0]
   3095c:	ldrb	r0, [r5, r0]
   30960:	cmp	r0, #0
   30964:	bne	30800 <__assert_fail@plt+0x1dc10>
   30968:	mov	r8, #1
   3096c:	ldr	sl, [sp, #44]	; 0x2c
   30970:	ldr	r0, [sp, #156]	; 0x9c
   30974:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   30978:	ldr	r0, [sl, #76]	; 0x4c
   3097c:	cmp	r0, #0
   30980:	addne	r0, sp, #56	; 0x38
   30984:	blne	37de0 <__assert_fail@plt+0x251f0>
   30988:	add	r0, sp, #56	; 0x38
   3098c:	bl	313f0 <__assert_fail@plt+0x1e800>
   30990:	mov	r0, r8
   30994:	sub	sp, fp, #28
   30998:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3099c:	ldr	r5, [sp, #48]	; 0x30
   309a0:	cmp	r5, #0
   309a4:	beq	30b94 <__assert_fail@plt+0x1dfa4>
   309a8:	cmp	r5, #1
   309ac:	ldr	sl, [sp, #44]	; 0x2c
   309b0:	ldr	r4, [sp, #12]
   309b4:	ldr	r6, [fp, #16]
   309b8:	mov	r9, r6
   309bc:	ldr	r6, [fp, #20]
   309c0:	beq	309dc <__assert_fail@plt+0x1ddec>
   309c4:	mvn	r0, r4
   309c8:	add	r0, r0, r9
   309cc:	lsl	r2, r0, #3
   309d0:	add	r0, r6, #8
   309d4:	mov	r1, #255	; 0xff
   309d8:	bl	12938 <memset@plt>
   309dc:	mov	r0, #0
   309e0:	ldr	r1, [sp, #148]	; 0x94
   309e4:	stm	r6, {r0, r1}
   309e8:	cmp	r5, #2
   309ec:	ldr	r0, [sp, #28]
   309f0:	bcc	30a3c <__assert_fail@plt+0x1de4c>
   309f4:	ldrb	r1, [r0, #28]
   309f8:	ands	r1, r1, #16
   309fc:	bne	30a3c <__assert_fail@plt+0x1de4c>
   30a00:	ldrb	r1, [sl, #88]	; 0x58
   30a04:	mov	r2, #0
   30a08:	tst	r1, #1
   30a0c:	beq	30a20 <__assert_fail@plt+0x1de30>
   30a10:	ldr	r1, [sl, #76]	; 0x4c
   30a14:	mov	r2, #0
   30a18:	cmp	r1, #0
   30a1c:	movwgt	r2, #1
   30a20:	str	r2, [sp]
   30a24:	add	r1, sp, #56	; 0x38
   30a28:	ldr	r2, [sp, #48]	; 0x30
   30a2c:	mov	r3, r6
   30a30:	bl	37b9c <__assert_fail@plt+0x24fac>
   30a34:	cmp	r0, #0
   30a38:	bne	30bb0 <__assert_fail@plt+0x1dfc0>
   30a3c:	add	r0, r6, #4
   30a40:	add	r1, sp, #56	; 0x38
   30a44:	add	lr, r1, #32
   30a48:	ldrb	r2, [sp, #132]	; 0x84
   30a4c:	mov	r3, r9
   30a50:	ldr	r6, [sp, #48]	; 0x30
   30a54:	b	30a7c <__assert_fail@plt+0x1de8c>
   30a58:	ldmda	r0, {r1, r7}
   30a5c:	ldr	r5, [fp, #-32]	; 0xffffffe0
   30a60:	add	r1, r1, r5
   30a64:	add	r7, r7, r5
   30a68:	stmda	r0, {r1, r7}
   30a6c:	add	r0, r0, #8
   30a70:	sub	r3, r3, #1
   30a74:	cmp	r4, r3
   30a78:	beq	30b08 <__assert_fail@plt+0x1df18>
   30a7c:	ldr	r7, [r0, #-4]
   30a80:	cmn	r7, #1
   30a84:	beq	30a6c <__assert_fail@plt+0x1de7c>
   30a88:	cmp	r2, #0
   30a8c:	beq	30a58 <__assert_fail@plt+0x1de68>
   30a90:	ldr	ip, [sp, #68]	; 0x44
   30a94:	ldr	r5, [sp, #84]	; 0x54
   30a98:	cmp	r7, r5
   30a9c:	mov	r1, lr
   30aa0:	addne	r1, ip, r7, lsl #2
   30aa4:	ldr	r1, [r1]
   30aa8:	str	r1, [r0, #-4]
   30aac:	ldr	r1, [r0]
   30ab0:	cmp	r1, r5
   30ab4:	mov	r4, lr
   30ab8:	addne	r4, ip, r1, lsl #2
   30abc:	ldr	r1, [r4]
   30ac0:	ldr	r4, [sp, #12]
   30ac4:	str	r1, [r0]
   30ac8:	b	30a58 <__assert_fail@plt+0x1de68>
   30acc:	ldr	r1, [r3, #8]
   30ad0:	cmp	r1, #0
   30ad4:	beq	30ae4 <__assert_fail@plt+0x1def4>
   30ad8:	ldrsb	r1, [r4, #28]
   30adc:	cmp	r1, #0
   30ae0:	bmi	304f0 <__assert_fail@plt+0x1d900>
   30ae4:	mov	r9, #0
   30ae8:	ldr	r0, [sp, #36]	; 0x24
   30aec:	cmp	r0, #0
   30af0:	beq	30ba4 <__assert_fail@plt+0x1dfb4>
   30af4:	cmp	ip, #0
   30af8:	mov	r0, #0
   30afc:	str	r0, [sp, #36]	; 0x24
   30b00:	bne	30990 <__assert_fail@plt+0x1dda0>
   30b04:	b	304f4 <__assert_fail@plt+0x1d904>
   30b08:	cmp	r4, #0
   30b0c:	ble	30b24 <__assert_fail@plt+0x1df34>
   30b10:	ldr	r0, [fp, #20]
   30b14:	add	r0, r0, r6, lsl #3
   30b18:	lsl	r2, r4, #3
   30b1c:	mov	r1, #255	; 0xff
   30b20:	bl	12938 <memset@plt>
   30b24:	ldr	r0, [sl, #132]	; 0x84
   30b28:	mov	r8, #0
   30b2c:	cmp	r0, #0
   30b30:	beq	30970 <__assert_fail@plt+0x1dd80>
   30b34:	ldr	r1, [sp, #48]	; 0x30
   30b38:	cmp	r1, #2
   30b3c:	bcc	30970 <__assert_fail@plt+0x1dd80>
   30b40:	mov	r6, r9
   30b44:	mvn	r1, r4
   30b48:	add	r1, r1, r9
   30b4c:	mov	r2, #0
   30b50:	ldr	r6, [fp, #20]
   30b54:	b	30b64 <__assert_fail@plt+0x1df74>
   30b58:	add	r2, r2, #1
   30b5c:	cmp	r1, r2
   30b60:	beq	30b9c <__assert_fail@plt+0x1dfac>
   30b64:	ldr	r3, [r0, r2, lsl #2]
   30b68:	cmp	r2, r3
   30b6c:	beq	30b58 <__assert_fail@plt+0x1df68>
   30b70:	add	r7, r6, r2, lsl #3
   30b74:	add	r3, r6, r3, lsl #3
   30b78:	ldr	r3, [r3, #8]
   30b7c:	str	r3, [r7, #8]
   30b80:	ldr	r3, [r0, r2, lsl #2]
   30b84:	add	r3, r6, r3, lsl #3
   30b88:	ldr	r3, [r3, #12]
   30b8c:	str	r3, [r7, #12]
   30b90:	b	30b58 <__assert_fail@plt+0x1df68>
   30b94:	mov	r8, #0
   30b98:	b	3096c <__assert_fail@plt+0x1dd7c>
   30b9c:	mov	r8, #0
   30ba0:	b	30970 <__assert_fail@plt+0x1dd80>
   30ba4:	mov	r0, #0
   30ba8:	str	r0, [sp, #36]	; 0x24
   30bac:	b	304f4 <__assert_fail@plt+0x1d904>
   30bb0:	mov	r8, r0
   30bb4:	b	30970 <__assert_fail@plt+0x1dd80>
   30bb8:	mov	r8, r0
   30bbc:	b	3096c <__assert_fail@plt+0x1dd7c>
   30bc0:	mov	r8, #12
   30bc4:	b	3096c <__assert_fail@plt+0x1dd7c>
   30bc8:	push	{fp, lr}
   30bcc:	mov	fp, sp
   30bd0:	sub	sp, sp, #16
   30bd4:	mov	ip, #1
   30bd8:	str	ip, [sp, #12]
   30bdc:	str	r2, [sp, #4]
   30be0:	mov	ip, #0
   30be4:	str	ip, [sp]
   30be8:	ldr	ip, [fp, #8]
   30bec:	str	ip, [sp, #8]
   30bf0:	bl	30bfc <__assert_fail@plt+0x1e00c>
   30bf4:	mov	sp, fp
   30bf8:	pop	{fp, pc}
   30bfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30c00:	add	fp, sp, #28
   30c04:	sub	sp, sp, #36	; 0x24
   30c08:	mvn	r7, #0
   30c0c:	cmp	r3, #0
   30c10:	bmi	30d54 <__assert_fail@plt+0x1e164>
   30c14:	mov	r9, r3
   30c18:	mov	r6, r2
   30c1c:	cmp	r3, r2
   30c20:	bgt	30d54 <__assert_fail@plt+0x1e164>
   30c24:	mov	r5, r0
   30c28:	str	r1, [sp, #28]
   30c2c:	ldr	r0, [fp, #8]
   30c30:	add	r0, r0, r9
   30c34:	ldr	r4, [r5]
   30c38:	cmp	r0, r6
   30c3c:	mov	r8, r6
   30c40:	bicle	r8, r0, r0, asr #31
   30c44:	movw	r0, #9664	; 0x25c0
   30c48:	movt	r0, #1
   30c4c:	movw	r1, #10600	; 0x2968
   30c50:	movt	r1, #1
   30c54:	orrs	r0, r1, r0
   30c58:	str	r0, [sp, #32]
   30c5c:	beq	30c68 <__assert_fail@plt+0x1e078>
   30c60:	add	r0, r4, #136	; 0x88
   30c64:	bl	1259c <pthread_mutex_lock@plt>
   30c68:	str	r4, [sp, #20]
   30c6c:	ldr	r4, [fp, #16]
   30c70:	ldrb	r0, [r5, #28]
   30c74:	ubfx	r1, r0, #5, #2
   30c78:	str	r1, [sp, #24]
   30c7c:	cmp	r8, r9
   30c80:	ble	30c9c <__assert_fail@plt+0x1e0ac>
   30c84:	tst	r0, #8
   30c88:	bne	30c9c <__assert_fail@plt+0x1e0ac>
   30c8c:	ldr	r0, [r5, #16]
   30c90:	cmp	r0, #0
   30c94:	movne	r0, r5
   30c98:	blne	2fba4 <__assert_fail@plt+0x1cfb4>
   30c9c:	mov	r7, #1
   30ca0:	mov	sl, #0
   30ca4:	cmp	r4, #0
   30ca8:	beq	30ce0 <__assert_fail@plt+0x1e0f0>
   30cac:	ldrb	r0, [r5, #28]
   30cb0:	ands	r1, r0, #16
   30cb4:	bne	30ce0 <__assert_fail@plt+0x1e0f0>
   30cb8:	and	r0, r0, #6
   30cbc:	cmp	r0, #4
   30cc0:	bne	30cd4 <__assert_fail@plt+0x1e0e4>
   30cc4:	ldr	r7, [r4]
   30cc8:	ldr	r0, [r5, #24]
   30ccc:	cmp	r7, r0
   30cd0:	bls	30dc8 <__assert_fail@plt+0x1e1d8>
   30cd4:	ldr	r0, [r5, #24]
   30cd8:	add	r7, r0, #1
   30cdc:	mov	sl, r4
   30ce0:	lsl	r0, r7, #3
   30ce4:	bl	2ed88 <__assert_fail@plt+0x1c198>
   30ce8:	cmp	r0, #0
   30cec:	beq	30dc0 <__assert_fail@plt+0x1e1d0>
   30cf0:	mov	r4, r0
   30cf4:	ldr	r0, [fp, #12]
   30cf8:	str	r8, [sp]
   30cfc:	stmib	sp, {r0, r7}
   30d00:	str	r4, [sp, #12]
   30d04:	ldr	r0, [sp, #24]
   30d08:	str	r0, [sp, #16]
   30d0c:	mov	r0, r5
   30d10:	ldr	r1, [sp, #28]
   30d14:	mov	r2, r6
   30d18:	mov	r3, r9
   30d1c:	bl	30420 <__assert_fail@plt+0x1d830>
   30d20:	cmp	r0, #0
   30d24:	beq	30d60 <__assert_fail@plt+0x1e170>
   30d28:	mvn	r7, #1
   30d2c:	cmp	r0, #1
   30d30:	mvneq	r7, #0
   30d34:	mov	r0, r4
   30d38:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   30d3c:	ldr	r0, [sp, #32]
   30d40:	cmp	r0, #0
   30d44:	beq	30d54 <__assert_fail@plt+0x1e164>
   30d48:	ldr	r0, [sp, #20]
   30d4c:	add	r0, r0, #136	; 0x88
   30d50:	bl	12458 <pthread_mutex_unlock@plt>
   30d54:	mov	r0, r7
   30d58:	sub	sp, fp, #28
   30d5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30d60:	cmp	sl, #0
   30d64:	beq	30d98 <__assert_fail@plt+0x1e1a8>
   30d68:	ldrb	r0, [r5, #28]
   30d6c:	ubfx	r3, r0, #1, #2
   30d70:	mov	r0, sl
   30d74:	mov	r1, r4
   30d78:	mov	r2, r7
   30d7c:	bl	36be4 <__assert_fail@plt+0x23ff4>
   30d80:	ldrb	r1, [r5, #28]
   30d84:	and	r1, r1, #249	; 0xf9
   30d88:	bfi	r1, r0, #1, #2
   30d8c:	strb	r1, [r5, #28]
   30d90:	tst	r0, #3
   30d94:	beq	30db8 <__assert_fail@plt+0x1e1c8>
   30d98:	ldr	r0, [fp, #20]
   30d9c:	cmp	r0, #0
   30da0:	beq	30db0 <__assert_fail@plt+0x1e1c0>
   30da4:	ldr	r0, [r4, #4]
   30da8:	sub	r7, r0, r9
   30dac:	b	30d34 <__assert_fail@plt+0x1e144>
   30db0:	ldr	r7, [r4]
   30db4:	b	30d34 <__assert_fail@plt+0x1e144>
   30db8:	mvn	r7, #1
   30dbc:	b	30d34 <__assert_fail@plt+0x1e144>
   30dc0:	mvn	r7, #1
   30dc4:	b	30d3c <__assert_fail@plt+0x1e14c>
   30dc8:	cmp	r7, #1
   30dcc:	bge	30cdc <__assert_fail@plt+0x1e0ec>
   30dd0:	mov	r7, #1
   30dd4:	mov	sl, #0
   30dd8:	b	30ce0 <__assert_fail@plt+0x1e0f0>
   30ddc:	push	{fp, lr}
   30de0:	mov	fp, sp
   30de4:	sub	sp, sp, #16
   30de8:	mov	ip, #0
   30dec:	str	ip, [sp, #12]
   30df0:	str	r2, [sp, #4]
   30df4:	ldr	ip, [fp, #12]
   30df8:	str	ip, [sp, #8]
   30dfc:	ldr	ip, [fp, #8]
   30e00:	str	ip, [sp]
   30e04:	bl	30bfc <__assert_fail@plt+0x1e00c>
   30e08:	mov	sp, fp
   30e0c:	pop	{fp, pc}
   30e10:	push	{fp, lr}
   30e14:	mov	fp, sp
   30e18:	sub	sp, sp, #24
   30e1c:	mov	ip, #1
   30e20:	str	ip, [sp, #20]
   30e24:	mov	ip, #0
   30e28:	str	ip, [sp, #8]
   30e2c:	ldr	ip, [fp, #20]
   30e30:	str	ip, [sp, #16]
   30e34:	ldr	ip, [fp, #16]
   30e38:	str	ip, [sp, #12]
   30e3c:	ldr	ip, [fp, #12]
   30e40:	str	ip, [sp, #4]
   30e44:	ldr	ip, [fp, #8]
   30e48:	str	ip, [sp]
   30e4c:	bl	30e58 <__assert_fail@plt+0x1e268>
   30e50:	mov	sp, fp
   30e54:	pop	{fp, pc}
   30e58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30e5c:	add	fp, sp, #28
   30e60:	sub	sp, sp, #20
   30e64:	mov	r6, r2
   30e68:	mov	r8, r1
   30e6c:	mov	r1, r0
   30e70:	ldr	r4, [fp, #8]
   30e74:	orr	r0, r4, r2
   30e78:	ldr	r2, [fp, #24]
   30e7c:	orrs	r0, r0, r2
   30e80:	bmi	30f34 <__assert_fail@plt+0x1e344>
   30e84:	adds	sl, r6, r4
   30e88:	bvs	30f34 <__assert_fail@plt+0x1e344>
   30e8c:	mov	r5, #0
   30e90:	cmp	r4, #1
   30e94:	blt	30ee8 <__assert_fail@plt+0x1e2f8>
   30e98:	mov	r9, r3
   30e9c:	cmp	r6, #1
   30ea0:	blt	30ef0 <__assert_fail@plt+0x1e300>
   30ea4:	mov	r0, sl
   30ea8:	mov	r5, r1
   30eac:	bl	2ed88 <__assert_fail@plt+0x1c198>
   30eb0:	cmp	r0, #0
   30eb4:	beq	30f34 <__assert_fail@plt+0x1e344>
   30eb8:	mov	r7, r0
   30ebc:	mov	r1, r8
   30ec0:	mov	r2, r6
   30ec4:	bl	125f0 <memcpy@plt>
   30ec8:	add	r0, r7, r6
   30ecc:	mov	r1, r9
   30ed0:	mov	r2, r4
   30ed4:	bl	125f0 <memcpy@plt>
   30ed8:	ldr	r2, [fp, #24]
   30edc:	mov	r1, r5
   30ee0:	mov	r5, r7
   30ee4:	b	30ef4 <__assert_fail@plt+0x1e304>
   30ee8:	mov	r7, r8
   30eec:	b	30ef4 <__assert_fail@plt+0x1e304>
   30ef0:	mov	r7, r9
   30ef4:	ldr	r0, [fp, #28]
   30ef8:	add	r6, fp, #12
   30efc:	ldm	r6, {r3, r4, r6}
   30f00:	str	r4, [sp]
   30f04:	stmib	sp, {r2, r6}
   30f08:	str	r0, [sp, #12]
   30f0c:	mov	r0, r1
   30f10:	mov	r1, r7
   30f14:	mov	r2, sl
   30f18:	bl	30bfc <__assert_fail@plt+0x1e00c>
   30f1c:	mov	r4, r0
   30f20:	mov	r0, r5
   30f24:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   30f28:	mov	r0, r4
   30f2c:	sub	sp, fp, #28
   30f30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30f34:	mvn	r0, #1
   30f38:	sub	sp, fp, #28
   30f3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30f40:	push	{fp, lr}
   30f44:	mov	fp, sp
   30f48:	sub	sp, sp, #24
   30f4c:	mov	ip, #0
   30f50:	str	ip, [sp, #20]
   30f54:	ldr	ip, [fp, #24]
   30f58:	str	ip, [sp, #16]
   30f5c:	ldr	ip, [fp, #20]
   30f60:	str	ip, [sp, #12]
   30f64:	ldr	ip, [fp, #16]
   30f68:	str	ip, [sp, #8]
   30f6c:	ldr	ip, [fp, #12]
   30f70:	str	ip, [sp, #4]
   30f74:	ldr	ip, [fp, #8]
   30f78:	str	ip, [sp]
   30f7c:	bl	30e58 <__assert_fail@plt+0x1e268>
   30f80:	mov	sp, fp
   30f84:	pop	{fp, pc}
   30f88:	push	{fp, lr}
   30f8c:	mov	fp, sp
   30f90:	ldrb	ip, [r0, #28]
   30f94:	bic	ip, ip, #6
   30f98:	cmp	r2, #0
   30f9c:	beq	30fb4 <__assert_fail@plt+0x1e3c4>
   30fa0:	ldr	lr, [fp, #8]
   30fa4:	orr	ip, ip, #2
   30fa8:	strb	ip, [r0, #28]
   30fac:	stm	r1, {r2, r3, lr}
   30fb0:	pop	{fp, pc}
   30fb4:	strb	ip, [r0, #28]
   30fb8:	mov	r0, #0
   30fbc:	str	r0, [r1]
   30fc0:	str	r0, [r1, #4]
   30fc4:	str	r0, [r1, #8]
   30fc8:	pop	{fp, pc}
   30fcc:	ldr	r1, [r0, #4]
   30fd0:	movw	r2, #255	; 0xff
   30fd4:	movt	r2, #4
   30fd8:	and	r1, r1, r2
   30fdc:	cmp	r1, #6
   30fe0:	bne	30fec <__assert_fail@plt+0x1e3fc>
   30fe4:	ldr	r0, [r0]
   30fe8:	b	3105c <__assert_fail@plt+0x1e46c>
   30fec:	cmp	r1, #3
   30ff0:	bxne	lr
   30ff4:	ldr	r0, [r0]
   30ff8:	b	2cad4 <__assert_fail@plt+0x19ee4>
   30ffc:	push	{r4, sl, fp, lr}
   31000:	add	fp, sp, #8
   31004:	mov	r4, r0
   31008:	ldr	r0, [r0, #24]
   3100c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   31010:	ldr	r0, [r4, #36]	; 0x24
   31014:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   31018:	ldr	r0, [r4, #40]	; 0x28
   3101c:	add	r1, r4, #4
   31020:	cmp	r0, r1
   31024:	beq	31038 <__assert_fail@plt+0x1e448>
   31028:	ldr	r0, [r0, #8]
   3102c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   31030:	ldr	r0, [r4, #40]	; 0x28
   31034:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   31038:	ldr	r0, [r4, #12]
   3103c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   31040:	ldr	r0, [r4, #48]	; 0x30
   31044:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   31048:	ldr	r0, [r4, #44]	; 0x2c
   3104c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   31050:	mov	r0, r4
   31054:	pop	{r4, sl, fp, lr}
   31058:	b	2cad4 <__assert_fail@plt+0x19ee4>
   3105c:	push	{r4, sl, fp, lr}
   31060:	add	fp, sp, #8
   31064:	mov	r4, r0
   31068:	ldr	r0, [r0]
   3106c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   31070:	ldr	r0, [r4, #4]
   31074:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   31078:	ldr	r0, [r4, #8]
   3107c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   31080:	ldr	r0, [r4, #12]
   31084:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   31088:	mov	r0, r4
   3108c:	pop	{r4, sl, fp, lr}
   31090:	b	2cad4 <__assert_fail@plt+0x19ee4>
   31094:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   31098:	add	fp, sp, #24
   3109c:	mov	r5, r1
   310a0:	mov	r9, r0
   310a4:	mov	r1, #0
   310a8:	mov	r2, #160	; 0xa0
   310ac:	bl	12938 <memset@plt>
   310b0:	mov	r0, #31
   310b4:	str	r0, [r9, #64]	; 0x40
   310b8:	movw	r0, #43689	; 0xaaa9
   310bc:	movt	r0, #2730	; 0xaaa
   310c0:	cmp	r5, r0
   310c4:	bhi	31248 <__assert_fail@plt+0x1e658>
   310c8:	add	r0, r5, #1
   310cc:	str	r0, [r9, #4]
   310d0:	lsl	r0, r0, #3
   310d4:	bl	2ed88 <__assert_fail@plt+0x1c198>
   310d8:	str	r0, [r9]
   310dc:	mov	r0, #1
   310e0:	mov	r6, r0
   310e4:	lsl	r0, r0, #1
   310e8:	cmp	r6, r5
   310ec:	bls	310e0 <__assert_fail@plt+0x1e4f0>
   310f0:	mov	r0, #12
   310f4:	mov	r1, r6
   310f8:	bl	2c4f4 <__assert_fail@plt+0x19904>
   310fc:	sub	r1, r6, #1
   31100:	str	r1, [r9, #68]	; 0x44
   31104:	str	r0, [r9, #32]
   31108:	bl	12758 <__ctype_get_mb_cur_max@plt>
   3110c:	str	r0, [r9, #92]	; 0x5c
   31110:	mov	r0, #14
   31114:	bl	12a64 <nl_langinfo@plt>
   31118:	ldrb	r1, [r0]
   3111c:	orr	r1, r1, #32
   31120:	cmp	r1, #117	; 0x75
   31124:	bne	31174 <__assert_fail@plt+0x1e584>
   31128:	ldrb	r1, [r0, #1]
   3112c:	orr	r1, r1, #32
   31130:	cmp	r1, #116	; 0x74
   31134:	bne	31174 <__assert_fail@plt+0x1e584>
   31138:	ldrb	r1, [r0, #2]
   3113c:	orr	r1, r1, #32
   31140:	cmp	r1, #102	; 0x66
   31144:	bne	31174 <__assert_fail@plt+0x1e584>
   31148:	ldrb	r1, [r0, #3]!
   3114c:	cmp	r1, #45	; 0x2d
   31150:	addeq	r0, r0, #1
   31154:	movw	r1, #19524	; 0x4c44
   31158:	movt	r1, #4
   3115c:	bl	124f4 <strcmp@plt>
   31160:	cmp	r0, #0
   31164:	bne	31174 <__assert_fail@plt+0x1e584>
   31168:	ldrb	r0, [r9, #88]	; 0x58
   3116c:	orr	r0, r0, #4
   31170:	strb	r0, [r9, #88]	; 0x58
   31174:	ldrb	r0, [r9, #88]	; 0x58
   31178:	and	r1, r0, #247	; 0xf7
   3117c:	strb	r1, [r9, #88]	; 0x58
   31180:	ldr	r1, [r9, #92]	; 0x5c
   31184:	cmp	r1, #2
   31188:	blt	3122c <__assert_fail@plt+0x1e63c>
   3118c:	tst	r0, #4
   31190:	bne	31220 <__assert_fail@plt+0x1e630>
   31194:	mov	r8, #1
   31198:	mov	r0, #32
   3119c:	mov	r1, #1
   311a0:	bl	2c4f4 <__assert_fail@plt+0x19904>
   311a4:	str	r0, [r9, #60]	; 0x3c
   311a8:	cmp	r0, #0
   311ac:	beq	31248 <__assert_fail@plt+0x1e658>
   311b0:	mov	r7, #0
   311b4:	mov	r6, #0
   311b8:	b	311cc <__assert_fail@plt+0x1e5dc>
   311bc:	add	r7, r7, r4
   311c0:	add	r6, r6, #1
   311c4:	cmp	r6, #8
   311c8:	beq	3122c <__assert_fail@plt+0x1e63c>
   311cc:	mov	r4, #0
   311d0:	b	311e0 <__assert_fail@plt+0x1e5f0>
   311d4:	add	r4, r4, #1
   311d8:	cmp	r4, #32
   311dc:	beq	311bc <__assert_fail@plt+0x1e5cc>
   311e0:	add	r5, r7, r4
   311e4:	mov	r0, r5
   311e8:	bl	12974 <btowc@plt>
   311ec:	cmn	r0, #1
   311f0:	beq	31204 <__assert_fail@plt+0x1e614>
   311f4:	ldr	r1, [r9, #60]	; 0x3c
   311f8:	ldr	r2, [r1, r6, lsl #2]
   311fc:	orr	r2, r2, r8, lsl r4
   31200:	str	r2, [r1, r6, lsl #2]
   31204:	cmp	r5, #127	; 0x7f
   31208:	bhi	311d4 <__assert_fail@plt+0x1e5e4>
   3120c:	cmp	r5, r0
   31210:	ldrbne	r0, [r9, #88]	; 0x58
   31214:	orrne	r0, r0, #8
   31218:	strbne	r0, [r9, #88]	; 0x58
   3121c:	b	311d4 <__assert_fail@plt+0x1e5e4>
   31220:	movw	r0, #19476	; 0x4c14
   31224:	movt	r0, #4
   31228:	str	r0, [r9, #60]	; 0x3c
   3122c:	ldr	r0, [r9]
   31230:	cmp	r0, #0
   31234:	ldrne	r1, [r9, #32]
   31238:	movne	r0, #0
   3123c:	cmpne	r1, #0
   31240:	moveq	r0, #12
   31244:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   31248:	mov	r0, #12
   3124c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   31250:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   31254:	add	fp, sp, #24
   31258:	sub	sp, sp, #8
   3125c:	mov	r8, r3
   31260:	mov	r5, r2
   31264:	mov	r7, r1
   31268:	mov	r4, r0
   3126c:	vmov.i32	q8, #0	; 0x00000000
   31270:	mov	r0, #80	; 0x50
   31274:	mov	r1, r4
   31278:	vst1.32	{d16-d17}, [r1], r0
   3127c:	mov	r0, #0
   31280:	str	r0, [r1]
   31284:	add	r0, r4, #64	; 0x40
   31288:	vst1.32	{d16-d17}, [r0]
   3128c:	add	r0, r4, #48	; 0x30
   31290:	vst1.32	{d16-d17}, [r0]
   31294:	add	r0, r4, #32
   31298:	vst1.32	{d16-d17}, [r0]
   3129c:	add	r0, r4, #16
   312a0:	vst1.32	{d16-d17}, [r0]
   312a4:	ldr	r6, [fp, #12]
   312a8:	str	r6, [sp, #4]
   312ac:	ldr	r9, [fp, #8]
   312b0:	str	r9, [sp]
   312b4:	mov	r0, r7
   312b8:	mov	r1, r2
   312bc:	mov	r2, r4
   312c0:	bl	31aa8 <__assert_fail@plt+0x1eeb8>
   312c4:	cmp	r5, #1
   312c8:	blt	312e0 <__assert_fail@plt+0x1e6f0>
   312cc:	add	r1, r5, #1
   312d0:	mov	r0, r4
   312d4:	bl	31b00 <__assert_fail@plt+0x1ef10>
   312d8:	cmp	r0, #0
   312dc:	bne	31398 <__assert_fail@plt+0x1e7a8>
   312e0:	ldrb	r0, [r4, #75]	; 0x4b
   312e4:	cmp	r0, #0
   312e8:	ldrne	r7, [r4, #4]
   312ec:	str	r7, [r4, #4]
   312f0:	ldr	r0, [r6, #92]	; 0x5c
   312f4:	cmp	r9, #0
   312f8:	beq	31354 <__assert_fail@plt+0x1e764>
   312fc:	cmp	r0, #2
   31300:	blt	31368 <__assert_fail@plt+0x1e778>
   31304:	mov	r0, r4
   31308:	bl	31ba4 <__assert_fail@plt+0x1efb4>
   3130c:	cmp	r0, #0
   31310:	bne	31398 <__assert_fail@plt+0x1e7a8>
   31314:	ldr	r1, [r4, #32]
   31318:	mov	r0, #0
   3131c:	cmp	r1, r5
   31320:	bge	31398 <__assert_fail@plt+0x1e7a8>
   31324:	ldr	r2, [r4, #28]
   31328:	ldr	r1, [r4, #36]	; 0x24
   3132c:	ldr	r3, [r6, #92]	; 0x5c
   31330:	add	r2, r3, r2
   31334:	cmp	r1, r2
   31338:	bgt	31398 <__assert_fail@plt+0x1e7a8>
   3133c:	lsl	r1, r1, #1
   31340:	mov	r0, r4
   31344:	bl	31b00 <__assert_fail@plt+0x1ef10>
   31348:	cmp	r0, #0
   3134c:	beq	31304 <__assert_fail@plt+0x1e714>
   31350:	b	31398 <__assert_fail@plt+0x1e7a8>
   31354:	cmp	r0, #2
   31358:	blt	31374 <__assert_fail@plt+0x1e784>
   3135c:	mov	r0, r4
   31360:	bl	321b4 <__assert_fail@plt+0x1f5c4>
   31364:	b	31394 <__assert_fail@plt+0x1e7a4>
   31368:	mov	r0, r4
   3136c:	bl	32140 <__assert_fail@plt+0x1f550>
   31370:	b	31394 <__assert_fail@plt+0x1e7a4>
   31374:	cmp	r8, #0
   31378:	beq	31388 <__assert_fail@plt+0x1e798>
   3137c:	mov	r0, r4
   31380:	bl	32370 <__assert_fail@plt+0x1f780>
   31384:	b	31394 <__assert_fail@plt+0x1e7a4>
   31388:	ldr	r0, [r4, #36]	; 0x24
   3138c:	str	r0, [r4, #28]
   31390:	str	r0, [r4, #32]
   31394:	mov	r0, #0
   31398:	sub	sp, fp, #24
   3139c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   313a0:	push	{r4, r5, fp, lr}
   313a4:	add	fp, sp, #8
   313a8:	ldr	r4, [r0]
   313ac:	ldr	r0, [r4, #56]	; 0x38
   313b0:	cmp	r0, #0
   313b4:	beq	313cc <__assert_fail@plt+0x1e7dc>
   313b8:	ldr	r5, [r0]
   313bc:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   313c0:	cmp	r5, #0
   313c4:	mov	r0, r5
   313c8:	bne	313b8 <__assert_fail@plt+0x1e7c8>
   313cc:	mov	r0, #31
   313d0:	str	r0, [r4, #64]	; 0x40
   313d4:	mov	r5, #0
   313d8:	str	r5, [r4, #52]	; 0x34
   313dc:	str	r5, [r4, #56]	; 0x38
   313e0:	ldr	r0, [r4, #16]
   313e4:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   313e8:	str	r5, [r4, #16]
   313ec:	pop	{r4, r5, fp, pc}
   313f0:	push	{r4, sl, fp, lr}
   313f4:	add	fp, sp, #8
   313f8:	mov	r4, r0
   313fc:	ldr	r0, [r0, #8]
   31400:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   31404:	ldr	r0, [r4, #12]
   31408:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   3140c:	ldrb	r0, [r4, #75]	; 0x4b
   31410:	cmp	r0, #0
   31414:	popeq	{r4, sl, fp, pc}
   31418:	ldr	r0, [r4, #4]
   3141c:	pop	{r4, sl, fp, lr}
   31420:	b	2cad4 <__assert_fail@plt+0x19ee4>
   31424:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31428:	add	fp, sp, #28
   3142c:	sub	sp, sp, #20
   31430:	mov	r8, r3
   31434:	mov	r4, r2
   31438:	mov	r7, r1
   3143c:	mov	r5, r0
   31440:	ldr	r9, [r1]
   31444:	str	r2, [r9, #128]	; 0x80
   31448:	orr	r2, r2, #8388608	; 0x800000
   3144c:	add	sl, sp, #12
   31450:	mov	r0, sl
   31454:	mov	r1, r5
   31458:	bl	323c8 <__assert_fail@plt+0x1f7d8>
   3145c:	mov	r6, #0
   31460:	stm	sp, {r6, r8}
   31464:	mov	r0, r5
   31468:	mov	r1, r7
   3146c:	mov	r2, sl
   31470:	mov	r3, r4
   31474:	bl	323e8 <__assert_fail@plt+0x1f7f8>
   31478:	mov	r7, r0
   3147c:	cmp	r0, #0
   31480:	bne	31490 <__assert_fail@plt+0x1e8a0>
   31484:	ldr	r0, [r8]
   31488:	cmp	r0, #0
   3148c:	bne	314dc <__assert_fail@plt+0x1e8ec>
   31490:	mov	r0, r9
   31494:	mov	r1, #0
   31498:	mov	r2, #0
   3149c:	mov	r3, #2
   314a0:	bl	32550 <__assert_fail@plt+0x1f960>
   314a4:	mov	r4, r0
   314a8:	cmp	r7, #0
   314ac:	beq	314cc <__assert_fail@plt+0x1e8dc>
   314b0:	mov	r0, r9
   314b4:	mov	r1, r7
   314b8:	mov	r2, r4
   314bc:	mov	r3, #16
   314c0:	bl	32550 <__assert_fail@plt+0x1f960>
   314c4:	mov	r6, r0
   314c8:	b	314d0 <__assert_fail@plt+0x1e8e0>
   314cc:	mov	r6, r4
   314d0:	cmp	r4, #0
   314d4:	cmpne	r6, #0
   314d8:	beq	314e8 <__assert_fail@plt+0x1e8f8>
   314dc:	mov	r0, r6
   314e0:	sub	sp, fp, #28
   314e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   314e8:	mov	r0, #12
   314ec:	str	r0, [r8]
   314f0:	mov	r6, #0
   314f4:	b	314dc <__assert_fail@plt+0x1e8ec>
   314f8:	push	{r4, r5, r6, r7, fp, lr}
   314fc:	add	fp, sp, #16
   31500:	mov	r6, r0
   31504:	ldr	r4, [r0]
   31508:	ldr	r0, [r4, #4]
   3150c:	lsl	r0, r0, #2
   31510:	bl	2ed88 <__assert_fail@plt+0x1c198>
   31514:	str	r0, [r4, #12]
   31518:	ldr	r0, [r4, #4]
   3151c:	lsl	r0, r0, #2
   31520:	bl	2ed88 <__assert_fail@plt+0x1c198>
   31524:	str	r0, [r4, #16]
   31528:	ldr	r0, [r4, #4]
   3152c:	add	r0, r0, r0, lsl #1
   31530:	lsl	r0, r0, #2
   31534:	bl	2ed88 <__assert_fail@plt+0x1c198>
   31538:	str	r0, [r4, #20]
   3153c:	ldr	r0, [r4, #4]
   31540:	add	r0, r0, r0, lsl #1
   31544:	lsl	r0, r0, #2
   31548:	bl	2ed88 <__assert_fail@plt+0x1c198>
   3154c:	str	r0, [r4, #24]
   31550:	ldr	r1, [r4, #12]
   31554:	mov	r7, #12
   31558:	cmp	r1, #0
   3155c:	ldrne	r1, [r4, #16]
   31560:	cmpne	r1, #0
   31564:	beq	31578 <__assert_fail@plt+0x1e988>
   31568:	cmp	r0, #0
   3156c:	ldrne	r0, [r4, #20]
   31570:	cmpne	r0, #0
   31574:	bne	31580 <__assert_fail@plt+0x1e990>
   31578:	mov	r0, r7
   3157c:	pop	{r4, r5, r6, r7, fp, pc}
   31580:	ldr	r0, [r6, #24]
   31584:	lsl	r0, r0, #2
   31588:	bl	2ed88 <__assert_fail@plt+0x1c198>
   3158c:	str	r0, [r4, #132]	; 0x84
   31590:	cmp	r0, #0
   31594:	beq	31638 <__assert_fail@plt+0x1ea48>
   31598:	ldr	r0, [r6, #24]
   3159c:	cmp	r0, #0
   315a0:	beq	315c0 <__assert_fail@plt+0x1e9d0>
   315a4:	ldr	r0, [r4, #132]	; 0x84
   315a8:	mov	r1, #0
   315ac:	str	r1, [r0, r1, lsl #2]
   315b0:	add	r1, r1, #1
   315b4:	ldr	r2, [r6, #24]
   315b8:	cmp	r1, r2
   315bc:	bcc	315ac <__assert_fail@plt+0x1e9bc>
   315c0:	ldr	r0, [r4, #52]	; 0x34
   315c4:	movw	r1, #21736	; 0x54e8
   315c8:	movt	r1, #3
   315cc:	mov	r2, r4
   315d0:	bl	35468 <__assert_fail@plt+0x22878>
   315d4:	ldr	r1, [r6, #24]
   315d8:	mov	r0, #0
   315dc:	cmp	r1, #0
   315e0:	beq	3161c <__assert_fail@plt+0x1ea2c>
   315e4:	ldr	r2, [r4, #132]	; 0x84
   315e8:	ldr	r3, [r2]
   315ec:	cmp	r3, #0
   315f0:	bne	31620 <__assert_fail@plt+0x1ea30>
   315f4:	mov	r3, #1
   315f8:	mov	r0, r3
   315fc:	ldr	r1, [r6, #24]
   31600:	cmp	r3, r1
   31604:	bcs	31620 <__assert_fail@plt+0x1ea30>
   31608:	ldr	r5, [r2, r0, lsl #2]
   3160c:	add	r3, r0, #1
   31610:	cmp	r0, r5
   31614:	beq	315f8 <__assert_fail@plt+0x1ea08>
   31618:	b	31620 <__assert_fail@plt+0x1ea30>
   3161c:	mov	r1, #0
   31620:	cmp	r0, r1
   31624:	bne	31638 <__assert_fail@plt+0x1ea48>
   31628:	ldr	r0, [r4, #132]	; 0x84
   3162c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   31630:	mov	r0, #0
   31634:	str	r0, [r4, #132]	; 0x84
   31638:	ldr	r0, [r4, #52]	; 0x34
   3163c:	movw	r1, #21888	; 0x5580
   31640:	movt	r1, #3
   31644:	mov	r2, r6
   31648:	bl	32f94 <__assert_fail@plt+0x203a4>
   3164c:	cmp	r0, #0
   31650:	bne	31710 <__assert_fail@plt+0x1eb20>
   31654:	ldr	r0, [r4, #52]	; 0x34
   31658:	movw	r1, #22024	; 0x5608
   3165c:	movt	r1, #3
   31660:	mov	r2, r4
   31664:	bl	32f94 <__assert_fail@plt+0x203a4>
   31668:	cmp	r0, #0
   3166c:	bne	31710 <__assert_fail@plt+0x1eb20>
   31670:	ldr	r0, [r4, #52]	; 0x34
   31674:	movw	r1, #22168	; 0x5698
   31678:	movt	r1, #3
   3167c:	mov	r2, r4
   31680:	bl	35468 <__assert_fail@plt+0x22878>
   31684:	ldr	r0, [r4, #52]	; 0x34
   31688:	movw	r1, #22268	; 0x56fc
   3168c:	movt	r1, #3
   31690:	mov	r2, r4
   31694:	bl	35468 <__assert_fail@plt+0x22878>
   31698:	cmp	r0, #0
   3169c:	bne	31710 <__assert_fail@plt+0x1eb20>
   316a0:	mov	r0, r4
   316a4:	bl	3581c <__assert_fail@plt+0x22c2c>
   316a8:	cmp	r0, #0
   316ac:	bne	31710 <__assert_fail@plt+0x1eb20>
   316b0:	ldrb	r0, [r6, #28]
   316b4:	tst	r0, #16
   316b8:	bne	316d4 <__assert_fail@plt+0x1eae4>
   316bc:	ldr	r0, [r6, #24]
   316c0:	cmp	r0, #0
   316c4:	beq	316d4 <__assert_fail@plt+0x1eae4>
   316c8:	ldrb	r0, [r4, #88]	; 0x58
   316cc:	tst	r0, #1
   316d0:	bne	316e0 <__assert_fail@plt+0x1eaf0>
   316d4:	ldr	r0, [r4, #76]	; 0x4c
   316d8:	cmp	r0, #0
   316dc:	beq	31708 <__assert_fail@plt+0x1eb18>
   316e0:	ldr	r0, [r4, #8]
   316e4:	add	r0, r0, r0, lsl #1
   316e8:	lsl	r0, r0, #2
   316ec:	bl	2ed88 <__assert_fail@plt+0x1c198>
   316f0:	str	r0, [r4, #28]
   316f4:	cmp	r0, #0
   316f8:	beq	31578 <__assert_fail@plt+0x1e988>
   316fc:	mov	r0, r4
   31700:	pop	{r4, r5, r6, r7, fp, lr}
   31704:	b	358d0 <__assert_fail@plt+0x22ce0>
   31708:	mov	r7, #0
   3170c:	mov	r0, r7
   31710:	pop	{r4, r5, r6, r7, fp, pc}
   31714:	push	{r4, r5, r6, r7, fp, lr}
   31718:	add	fp, sp, #16
   3171c:	ldr	r1, [r0, #8]
   31720:	cmp	r1, #0
   31724:	beq	31744 <__assert_fail@plt+0x1eb54>
   31728:	ldr	r3, [r0]
   3172c:	mov	r5, #0
   31730:	mov	ip, #1
   31734:	mov	lr, #139	; 0x8b
   31738:	mov	r2, #0
   3173c:	mov	r4, #0
   31740:	b	31774 <__assert_fail@plt+0x1eb84>
   31744:	mov	r2, #0
   31748:	mov	r5, #0
   3174c:	b	31810 <__assert_fail@plt+0x1ec20>
   31750:	ldrsb	r1, [r1]
   31754:	cmp	r1, #0
   31758:	mov	r1, #0
   3175c:	movwmi	r1, #1
   31760:	orr	r2, r2, r1
   31764:	ldr	r1, [r0, #8]
   31768:	add	r4, r4, #1
   3176c:	cmp	r4, r1
   31770:	bcs	31810 <__assert_fail@plt+0x1ec20>
   31774:	add	r1, r3, r4, lsl #3
   31778:	ldrb	r6, [r1, #4]
   3177c:	sub	r6, r6, #1
   31780:	cmp	r6, #11
   31784:	bhi	318b4 <__assert_fail@plt+0x1ecc4>
   31788:	add	r7, pc, #0
   3178c:	ldr	pc, [r7, r6, lsl #2]
   31790:	andeq	r1, r3, r0, asr r7
   31794:	andeq	r1, r3, r4, ror #14
   31798:	andeq	r1, r3, r0, asr #15
   3179c:	andeq	r1, r3, r4, ror #14
   317a0:	andeq	r1, r3, r8, lsl #16
   317a4:			; <UNDEFINED> instruction: 0x000318b0
   317a8:			; <UNDEFINED> instruction: 0x000318b4
   317ac:	andeq	r1, r3, r4, ror #14
   317b0:	andeq	r1, r3, r4, ror #14
   317b4:	andeq	r1, r3, r4, ror #14
   317b8:	andeq	r1, r3, r4, ror #14
   317bc:	andeq	r1, r3, r8, ror #15
   317c0:	ldr	r1, [r3, r4, lsl #3]
   317c4:	add	r1, r1, #16
   317c8:	mov	r6, #0
   317cc:	ldr	r7, [r1, r6, lsl #2]
   317d0:	cmp	r7, #0
   317d4:	bne	318b0 <__assert_fail@plt+0x1ecc0>
   317d8:	add	r6, r6, #1
   317dc:	cmp	r6, #4
   317e0:	bne	317cc <__assert_fail@plt+0x1ebdc>
   317e4:	b	31764 <__assert_fail@plt+0x1eb74>
   317e8:	ldr	r1, [r3, r4, lsl #3]
   317ec:	sub	r1, r1, #16
   317f0:	ror	r1, r1, #4
   317f4:	cmp	r1, #7
   317f8:	bhi	318b0 <__assert_fail@plt+0x1ecc0>
   317fc:	tst	lr, ip, lsl r1
   31800:	bne	31764 <__assert_fail@plt+0x1eb74>
   31804:	b	318b0 <__assert_fail@plt+0x1ecc0>
   31808:	mov	r5, #1
   3180c:	b	31764 <__assert_fail@plt+0x1eb74>
   31810:	tst	r2, #1
   31814:	tsteq	r5, #1
   31818:	beq	31880 <__assert_fail@plt+0x1ec90>
   3181c:	ldr	r1, [r0, #8]
   31820:	cmp	r1, #0
   31824:	beq	31880 <__assert_fail@plt+0x1ec90>
   31828:	mov	r2, #0
   3182c:	mov	r3, #7
   31830:	b	3184c <__assert_fail@plt+0x1ec5c>
   31834:	bfi	r1, r3, #0, #8
   31838:	str	r1, [r4, #4]
   3183c:	ldr	r1, [r0, #8]
   31840:	add	r2, r2, #1
   31844:	cmp	r2, r1
   31848:	bcs	31880 <__assert_fail@plt+0x1ec90>
   3184c:	ldr	r1, [r0]
   31850:	add	r4, r1, r2, lsl #3
   31854:	ldr	r1, [r4, #4]
   31858:	uxtb	r6, r1
   3185c:	cmp	r6, #5
   31860:	beq	31834 <__assert_fail@plt+0x1ec44>
   31864:	cmp	r6, #1
   31868:	bne	3183c <__assert_fail@plt+0x1ec4c>
   3186c:	ldrsb	r7, [r4]
   31870:	cmn	r7, #1
   31874:	bgt	3183c <__assert_fail@plt+0x1ec4c>
   31878:	bic	r1, r1, #2097152	; 0x200000
   3187c:	b	31838 <__assert_fail@plt+0x1ec48>
   31880:	mov	r1, #1
   31884:	str	r1, [r0, #92]	; 0x5c
   31888:	ldr	r1, [r0, #76]	; 0x4c
   3188c:	mov	r2, #0
   31890:	cmp	r1, #0
   31894:	movwgt	r2, #1
   31898:	orr	r1, r5, r2
   3189c:	and	r1, r1, #1
   318a0:	ldrb	r2, [r0, #88]	; 0x58
   318a4:	and	r2, r2, #249	; 0xf9
   318a8:	orr	r1, r2, r1, lsl #1
   318ac:	strb	r1, [r0, #88]	; 0x58
   318b0:	pop	{r4, r5, r6, r7, fp, pc}
   318b4:	bl	12b9c <abort@plt>
   318b8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   318bc:	add	fp, sp, #24
   318c0:	sub	sp, sp, #16
   318c4:	mov	r9, r0
   318c8:	ldr	r0, [r0, #24]
   318cc:	ldr	r1, [r9, #52]	; 0x34
   318d0:	ldr	r1, [r1, #12]
   318d4:	ldr	r1, [r1, #28]
   318d8:	str	r1, [r9, #72]	; 0x48
   318dc:	add	r1, r1, r1, lsl #1
   318e0:	add	r1, r0, r1, lsl #2
   318e4:	mov	r0, sp
   318e8:	bl	365fc <__assert_fail@plt+0x23a0c>
   318ec:	str	r0, [sp, #12]
   318f0:	cmp	r0, #0
   318f4:	bne	319d8 <__assert_fail@plt+0x1ede8>
   318f8:	ldr	r0, [r9, #76]	; 0x4c
   318fc:	cmp	r0, #1
   31900:	blt	319e0 <__assert_fail@plt+0x1edf0>
   31904:	ldr	r0, [sp, #4]
   31908:	cmp	r0, #1
   3190c:	blt	319e0 <__assert_fail@plt+0x1edf0>
   31910:	mov	r7, #0
   31914:	mov	r8, sp
   31918:	b	3192c <__assert_fail@plt+0x1ed3c>
   3191c:	add	r7, r7, #1
   31920:	ldr	r0, [sp, #4]
   31924:	cmp	r7, r0
   31928:	bge	319e0 <__assert_fail@plt+0x1edf0>
   3192c:	ldr	r2, [sp, #8]
   31930:	ldr	r1, [r2, r7, lsl #2]
   31934:	ldr	r3, [r9]
   31938:	add	r6, r3, r1, lsl #3
   3193c:	ldrb	r6, [r6, #4]
   31940:	cmp	r6, #4
   31944:	bne	3191c <__assert_fail@plt+0x1ed2c>
   31948:	mov	r6, #0
   3194c:	cmp	r0, #1
   31950:	bge	31964 <__assert_fail@plt+0x1ed74>
   31954:	b	31988 <__assert_fail@plt+0x1ed98>
   31958:	add	r6, r6, #1
   3195c:	cmp	r0, r6
   31960:	beq	31988 <__assert_fail@plt+0x1ed98>
   31964:	ldr	r5, [r2, r6, lsl #2]
   31968:	add	r4, r3, r5, lsl #3
   3196c:	ldrb	r4, [r4, #4]
   31970:	cmp	r4, #9
   31974:	bne	31958 <__assert_fail@plt+0x1ed68>
   31978:	ldr	r4, [r3, r1, lsl #3]
   3197c:	ldr	r5, [r3, r5, lsl #3]
   31980:	cmp	r5, r4
   31984:	bne	31958 <__assert_fail@plt+0x1ed68>
   31988:	cmp	r6, r0
   3198c:	beq	3191c <__assert_fail@plt+0x1ed2c>
   31990:	ldr	r0, [r9, #20]
   31994:	add	r1, r1, r1, lsl #1
   31998:	add	r0, r0, r1, lsl #2
   3199c:	ldr	r0, [r0, #8]
   319a0:	ldr	r6, [r0]
   319a4:	mov	r0, r8
   319a8:	mov	r1, r6
   319ac:	bl	36678 <__assert_fail@plt+0x23a88>
   319b0:	cmp	r0, #0
   319b4:	bne	3191c <__assert_fail@plt+0x1ed2c>
   319b8:	ldr	r0, [r9, #24]
   319bc:	add	r1, r6, r6, lsl #1
   319c0:	add	r1, r0, r1, lsl #2
   319c4:	mov	r0, r8
   319c8:	bl	361f8 <__assert_fail@plt+0x23608>
   319cc:	mov	r7, #0
   319d0:	cmp	r0, #0
   319d4:	beq	3191c <__assert_fail@plt+0x1ed2c>
   319d8:	sub	sp, fp, #24
   319dc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   319e0:	add	r0, sp, #12
   319e4:	mov	r2, sp
   319e8:	mov	r1, r9
   319ec:	mov	r3, #0
   319f0:	bl	366e8 <__assert_fail@plt+0x23af8>
   319f4:	str	r0, [r9, #36]	; 0x24
   319f8:	cmp	r0, #0
   319fc:	beq	31a7c <__assert_fail@plt+0x1ee8c>
   31a00:	ldrsb	r1, [r0, #52]	; 0x34
   31a04:	cmn	r1, #1
   31a08:	ble	31a1c <__assert_fail@plt+0x1ee2c>
   31a0c:	str	r0, [r9, #40]	; 0x28
   31a10:	str	r0, [r9, #44]	; 0x2c
   31a14:	str	r0, [r9, #48]	; 0x30
   31a18:	b	31a94 <__assert_fail@plt+0x1eea4>
   31a1c:	add	r5, sp, #12
   31a20:	mov	r6, sp
   31a24:	mov	r0, r5
   31a28:	mov	r1, r9
   31a2c:	mov	r2, r6
   31a30:	mov	r3, #1
   31a34:	bl	366e8 <__assert_fail@plt+0x23af8>
   31a38:	str	r0, [r9, #40]	; 0x28
   31a3c:	mov	r0, r5
   31a40:	mov	r1, r9
   31a44:	mov	r2, r6
   31a48:	mov	r3, #2
   31a4c:	bl	366e8 <__assert_fail@plt+0x23af8>
   31a50:	str	r0, [r9, #44]	; 0x2c
   31a54:	mov	r0, r5
   31a58:	mov	r1, r9
   31a5c:	mov	r2, r6
   31a60:	mov	r3, #6
   31a64:	bl	366e8 <__assert_fail@plt+0x23af8>
   31a68:	str	r0, [r9, #48]	; 0x30
   31a6c:	ldr	r1, [r9, #40]	; 0x28
   31a70:	cmp	r1, #0
   31a74:	cmpne	r0, #0
   31a78:	bne	31a88 <__assert_fail@plt+0x1ee98>
   31a7c:	ldr	r0, [sp, #12]
   31a80:	sub	sp, fp, #24
   31a84:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   31a88:	ldr	r0, [r9, #44]	; 0x2c
   31a8c:	cmp	r0, #0
   31a90:	beq	31a7c <__assert_fail@plt+0x1ee8c>
   31a94:	ldr	r0, [sp, #8]
   31a98:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   31a9c:	mov	r0, #0
   31aa0:	sub	sp, fp, #24
   31aa4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   31aa8:	str	r1, [r2, #48]	; 0x30
   31aac:	str	r0, [r2]
   31ab0:	str	r3, [r2, #64]	; 0x40
   31ab4:	str	r1, [r2, #44]	; 0x2c
   31ab8:	ldr	r0, [sp]
   31abc:	strb	r0, [r2, #72]	; 0x48
   31ac0:	cmp	r3, #0
   31ac4:	movwne	r3, #1
   31ac8:	orr	r0, r3, r0
   31acc:	strb	r0, [r2, #75]	; 0x4b
   31ad0:	ldr	r0, [sp, #4]
   31ad4:	ldr	r3, [r0, #92]	; 0x5c
   31ad8:	str	r3, [r2, #80]	; 0x50
   31adc:	ldrb	r3, [r0, #88]	; 0x58
   31ae0:	ubfx	r3, r3, #2, #1
   31ae4:	strb	r3, [r2, #73]	; 0x49
   31ae8:	ldrb	r0, [r0, #88]	; 0x58
   31aec:	str	r1, [r2, #56]	; 0x38
   31af0:	str	r1, [r2, #52]	; 0x34
   31af4:	ubfx	r0, r0, #3, #1
   31af8:	strb	r0, [r2, #74]	; 0x4a
   31afc:	bx	lr
   31b00:	push	{r4, r5, r6, r7, fp, lr}
   31b04:	add	fp, sp, #16
   31b08:	mov	r4, r1
   31b0c:	mov	r5, r0
   31b10:	ldr	r0, [r0, #80]	; 0x50
   31b14:	cmp	r0, #2
   31b18:	blt	31b64 <__assert_fail@plt+0x1ef74>
   31b1c:	mov	r6, #12
   31b20:	cmn	r4, #-1073741823	; 0xc0000001
   31b24:	bhi	31b90 <__assert_fail@plt+0x1efa0>
   31b28:	ldr	r0, [r5, #8]
   31b2c:	lsl	r7, r4, #2
   31b30:	mov	r1, r7
   31b34:	bl	2f894 <__assert_fail@plt+0x1cca4>
   31b38:	cmp	r0, #0
   31b3c:	beq	31b90 <__assert_fail@plt+0x1efa0>
   31b40:	str	r0, [r5, #8]
   31b44:	ldr	r0, [r5, #12]
   31b48:	cmp	r0, #0
   31b4c:	beq	31b64 <__assert_fail@plt+0x1ef74>
   31b50:	mov	r1, r7
   31b54:	bl	2f894 <__assert_fail@plt+0x1cca4>
   31b58:	cmp	r0, #0
   31b5c:	beq	31b90 <__assert_fail@plt+0x1efa0>
   31b60:	str	r0, [r5, #12]
   31b64:	ldrb	r0, [r5, #75]	; 0x4b
   31b68:	cmp	r0, #0
   31b6c:	beq	31b88 <__assert_fail@plt+0x1ef98>
   31b70:	ldr	r0, [r5, #4]
   31b74:	mov	r1, r4
   31b78:	bl	2f894 <__assert_fail@plt+0x1cca4>
   31b7c:	cmp	r0, #0
   31b80:	beq	31b98 <__assert_fail@plt+0x1efa8>
   31b84:	str	r0, [r5, #4]
   31b88:	str	r4, [r5, #36]	; 0x24
   31b8c:	mov	r6, #0
   31b90:	mov	r0, r6
   31b94:	pop	{r4, r5, r6, r7, fp, pc}
   31b98:	mov	r6, #12
   31b9c:	mov	r0, r6
   31ba0:	pop	{r4, r5, r6, r7, fp, pc}
   31ba4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31ba8:	add	fp, sp, #28
   31bac:	sub	sp, sp, #92	; 0x5c
   31bb0:	mov	r9, r0
   31bb4:	ldrb	r0, [r0, #74]	; 0x4a
   31bb8:	ldr	sl, [r9, #28]
   31bbc:	ldr	r4, [r9, #36]	; 0x24
   31bc0:	ldr	r1, [r9, #48]	; 0x30
   31bc4:	cmp	r4, r1
   31bc8:	movgt	r4, r1
   31bcc:	cmp	r0, #0
   31bd0:	bne	31bec <__assert_fail@plt+0x1effc>
   31bd4:	ldr	r0, [r9, #64]	; 0x40
   31bd8:	cmp	r0, #0
   31bdc:	bne	31bec <__assert_fail@plt+0x1effc>
   31be0:	ldrb	r0, [r9, #76]	; 0x4c
   31be4:	cmp	r0, #0
   31be8:	beq	31bf4 <__assert_fail@plt+0x1f004>
   31bec:	ldr	r7, [r9, #32]
   31bf0:	b	31dc8 <__assert_fail@plt+0x1f1d8>
   31bf4:	cmp	r4, sl
   31bf8:	ble	31d9c <__assert_fail@plt+0x1f1ac>
   31bfc:	add	r5, r9, #16
   31c00:	str	r4, [sp, #4]
   31c04:	b	31c28 <__assert_fail@plt+0x1f038>
   31c08:	ldr	r1, [r9, #4]
   31c0c:	strb	r0, [r1, sl]
   31c10:	ldr	r1, [r9, #8]
   31c14:	str	r0, [r1, sl, lsl #2]
   31c18:	add	sl, sl, #1
   31c1c:	cmp	r4, sl
   31c20:	mov	r7, sl
   31c24:	ble	3210c <__assert_fail@plt+0x1f51c>
   31c28:	ldr	r0, [r9]
   31c2c:	ldr	r1, [r9, #24]
   31c30:	add	r1, r1, sl
   31c34:	ldrb	r6, [r0, r1]
   31c38:	tst	r6, #128	; 0x80
   31c3c:	bne	31c60 <__assert_fail@plt+0x1f070>
   31c40:	mov	r0, r5
   31c44:	bl	1262c <mbsinit@plt>
   31c48:	cmp	r0, #0
   31c4c:	beq	31c60 <__assert_fail@plt+0x1f070>
   31c50:	mov	r0, r6
   31c54:	bl	12b78 <towupper@plt>
   31c58:	cmp	r0, #127	; 0x7f
   31c5c:	bls	31c08 <__assert_fail@plt+0x1f018>
   31c60:	ldm	r5, {r0, r1}
   31c64:	str	r1, [fp, #-36]	; 0xffffffdc
   31c68:	str	r0, [fp, #-40]	; 0xffffffd8
   31c6c:	sub	r2, r4, sl
   31c70:	ldr	r0, [r9]
   31c74:	ldr	r1, [r9, #24]
   31c78:	add	r0, r0, r1
   31c7c:	add	r1, r0, sl
   31c80:	add	r0, sp, #12
   31c84:	mov	r3, r5
   31c88:	bl	2edb8 <__assert_fail@plt+0x1c1c8>
   31c8c:	mov	r4, r0
   31c90:	sub	r8, r0, #1
   31c94:	cmn	r8, #4
   31c98:	bhi	31d54 <__assert_fail@plt+0x1f164>
   31c9c:	ldr	r0, [sp, #12]
   31ca0:	bl	12b78 <towupper@plt>
   31ca4:	mov	r6, r0
   31ca8:	ldr	r0, [sp, #12]
   31cac:	cmp	r6, r0
   31cb0:	bne	31cd0 <__assert_fail@plt+0x1f0e0>
   31cb4:	ldr	r1, [r9]
   31cb8:	ldr	r0, [r9, #4]
   31cbc:	ldr	r2, [r9, #24]
   31cc0:	add	r0, r0, sl
   31cc4:	add	r1, r1, r2
   31cc8:	add	r1, r1, sl
   31ccc:	b	31cf8 <__assert_fail@plt+0x1f108>
   31cd0:	add	r7, sp, #16
   31cd4:	mov	r0, r7
   31cd8:	mov	r1, r6
   31cdc:	sub	r2, fp, #40	; 0x28
   31ce0:	bl	124b8 <wcrtomb@plt>
   31ce4:	cmp	r4, r0
   31ce8:	bne	31da4 <__assert_fail@plt+0x1f1b4>
   31cec:	ldr	r0, [r9, #4]
   31cf0:	add	r0, r0, sl
   31cf4:	mov	r1, r7
   31cf8:	mov	r2, r4
   31cfc:	bl	125f0 <memcpy@plt>
   31d00:	ldr	r0, [r9, #8]
   31d04:	str	r6, [r0, sl, lsl #2]
   31d08:	add	r1, r4, sl
   31d0c:	add	r6, sl, #1
   31d10:	cmp	r6, r1
   31d14:	bge	31d48 <__assert_fail@plt+0x1f158>
   31d18:	mvn	r1, #3
   31d1c:	add	r2, r1, r4, lsl #2
   31d20:	add	r0, r0, sl, lsl #2
   31d24:	add	r0, r0, #4
   31d28:	mov	r1, #255	; 0xff
   31d2c:	bl	12938 <memset@plt>
   31d30:	mov	sl, r6
   31d34:	ldr	r4, [sp, #4]
   31d38:	subs	r8, r8, #1
   31d3c:	add	sl, sl, #1
   31d40:	bne	31d38 <__assert_fail@plt+0x1f148>
   31d44:	b	31c1c <__assert_fail@plt+0x1f02c>
   31d48:	mov	sl, r6
   31d4c:	ldr	r4, [sp, #4]
   31d50:	b	31c1c <__assert_fail@plt+0x1f02c>
   31d54:	add	r0, r4, #1
   31d58:	cmp	r0, #2
   31d5c:	bcc	31d70 <__assert_fail@plt+0x1f180>
   31d60:	ldr	r0, [r9, #36]	; 0x24
   31d64:	ldr	r1, [r9, #48]	; 0x30
   31d68:	cmp	r0, r1
   31d6c:	blt	31db4 <__assert_fail@plt+0x1f1c4>
   31d70:	ldr	r0, [r9, #4]
   31d74:	strb	r6, [r0, sl]
   31d78:	ldr	r0, [r9, #8]
   31d7c:	str	r6, [r0, sl, lsl #2]
   31d80:	add	sl, sl, #1
   31d84:	cmn	r4, #1
   31d88:	bne	31d4c <__assert_fail@plt+0x1f15c>
   31d8c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   31d90:	ldr	r1, [fp, #-36]	; 0xffffffdc
   31d94:	stm	r5, {r0, r1}
   31d98:	b	31d4c <__assert_fail@plt+0x1f15c>
   31d9c:	mov	r7, sl
   31da0:	b	3210c <__assert_fail@plt+0x1f51c>
   31da4:	mov	r0, sl
   31da8:	ldr	r4, [sp, #4]
   31dac:	mov	r7, sl
   31db0:	b	31dd0 <__assert_fail@plt+0x1f1e0>
   31db4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   31db8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   31dbc:	stm	r5, {r0, r1}
   31dc0:	mov	r7, sl
   31dc4:	b	3210c <__assert_fail@plt+0x1f51c>
   31dc8:	cmp	sl, r4
   31dcc:	bge	3210c <__assert_fail@plt+0x1f51c>
   31dd0:	mov	r6, r9
   31dd4:	ldr	r0, [r6, #16]!
   31dd8:	ldr	r1, [r6, #4]
   31ddc:	str	r0, [fp, #-40]	; 0xffffffd8
   31de0:	str	r1, [fp, #-36]	; 0xffffffdc
   31de4:	str	r4, [sp, #4]
   31de8:	sub	r2, r4, sl
   31dec:	ldr	r0, [r6, #48]	; 0x30
   31df0:	cmp	r0, #0
   31df4:	str	r7, [sp]
   31df8:	bne	31edc <__assert_fail@plt+0x1f2ec>
   31dfc:	ldr	r0, [r9]
   31e00:	ldr	r1, [r9, #24]
   31e04:	add	r0, r0, r1
   31e08:	add	r4, r0, r7
   31e0c:	add	r0, sp, #8
   31e10:	mov	r1, r4
   31e14:	mov	r3, r6
   31e18:	bl	2edb8 <__assert_fail@plt+0x1c1c8>
   31e1c:	mov	r5, r0
   31e20:	sub	r8, r0, #1
   31e24:	cmn	r8, #4
   31e28:	bhi	31f34 <__assert_fail@plt+0x1f344>
   31e2c:	ldr	r0, [sp, #8]
   31e30:	bl	12b78 <towupper@plt>
   31e34:	mov	r7, r0
   31e38:	ldr	r0, [sp, #8]
   31e3c:	cmp	r7, r0
   31e40:	bne	31e54 <__assert_fail@plt+0x1f264>
   31e44:	ldr	r0, [r9, #4]
   31e48:	add	r0, r0, sl
   31e4c:	mov	r1, r4
   31e50:	b	31e78 <__assert_fail@plt+0x1f288>
   31e54:	add	r0, sp, #16
   31e58:	sub	r2, fp, #40	; 0x28
   31e5c:	mov	r1, r7
   31e60:	bl	124b8 <wcrtomb@plt>
   31e64:	cmp	r0, r5
   31e68:	bne	31fb0 <__assert_fail@plt+0x1f3c0>
   31e6c:	ldr	r0, [r9, #4]
   31e70:	add	r0, r0, sl
   31e74:	add	r1, sp, #16
   31e78:	mov	r2, r5
   31e7c:	bl	125f0 <memcpy@plt>
   31e80:	ldrb	r0, [r9, #76]	; 0x4c
   31e84:	cmp	r0, #0
   31e88:	bne	320d8 <__assert_fail@plt+0x1f4e8>
   31e8c:	ldr	r0, [r9, #8]
   31e90:	str	r7, [r0, sl, lsl #2]
   31e94:	ldr	r7, [sp]
   31e98:	add	r7, r5, r7
   31e9c:	add	r1, r5, sl
   31ea0:	add	r4, sl, #1
   31ea4:	cmp	r4, r1
   31ea8:	bge	31ed0 <__assert_fail@plt+0x1f2e0>
   31eac:	mvn	r1, #3
   31eb0:	add	r2, r1, r5, lsl #2
   31eb4:	add	r0, r0, sl, lsl #2
   31eb8:	add	r0, r0, #4
   31ebc:	mov	r1, #255	; 0xff
   31ec0:	bl	12938 <memset@plt>
   31ec4:	subs	r8, r8, #1
   31ec8:	add	r4, r4, #1
   31ecc:	bne	31ec4 <__assert_fail@plt+0x1f2d4>
   31ed0:	mov	sl, r4
   31ed4:	ldr	r4, [sp, #4]
   31ed8:	b	31dc8 <__assert_fail@plt+0x1f1d8>
   31edc:	add	r4, sp, #16
   31ee0:	cmp	r2, #1
   31ee4:	ldrge	r1, [r9, #80]	; 0x50
   31ee8:	cmpge	r1, #1
   31eec:	blt	31e0c <__assert_fail@plt+0x1f21c>
   31ef0:	mov	r1, #0
   31ef4:	add	r4, sp, #16
   31ef8:	ldr	r3, [r9]
   31efc:	ldr	r7, [r9, #24]
   31f00:	add	r3, r3, r7
   31f04:	ldr	r7, [sp]
   31f08:	add	r3, r3, r7
   31f0c:	ldrb	r3, [r3, r1]
   31f10:	ldrb	r3, [r0, r3]
   31f14:	strb	r3, [r4, r1]
   31f18:	add	r1, r1, #1
   31f1c:	cmp	r1, r2
   31f20:	bge	31e0c <__assert_fail@plt+0x1f21c>
   31f24:	ldr	r3, [r9, #80]	; 0x50
   31f28:	cmp	r1, r3
   31f2c:	blt	31ef8 <__assert_fail@plt+0x1f308>
   31f30:	b	31e0c <__assert_fail@plt+0x1f21c>
   31f34:	add	r0, r5, #1
   31f38:	cmp	r0, #2
   31f3c:	bcc	31f50 <__assert_fail@plt+0x1f360>
   31f40:	ldr	r0, [r9, #36]	; 0x24
   31f44:	ldr	r1, [r9, #48]	; 0x30
   31f48:	cmp	r0, r1
   31f4c:	blt	320fc <__assert_fail@plt+0x1f50c>
   31f50:	ldr	r0, [r9]
   31f54:	ldr	r2, [r9, #24]
   31f58:	ldr	r1, [r9, #64]	; 0x40
   31f5c:	ldr	r7, [sp]
   31f60:	add	r2, r2, r7
   31f64:	ldrb	r0, [r0, r2]
   31f68:	cmp	r1, #0
   31f6c:	bne	3212c <__assert_fail@plt+0x1f53c>
   31f70:	ldr	r4, [sp, #4]
   31f74:	ldr	r1, [r9, #4]
   31f78:	strb	r0, [r1, sl]
   31f7c:	ldrb	r1, [r9, #76]	; 0x4c
   31f80:	cmp	r1, #0
   31f84:	bne	32134 <__assert_fail@plt+0x1f544>
   31f88:	ldr	r1, [r9, #8]
   31f8c:	str	r0, [r1, sl, lsl #2]
   31f90:	add	sl, sl, #1
   31f94:	add	r7, r7, #1
   31f98:	cmn	r5, #1
   31f9c:	bne	31dc8 <__assert_fail@plt+0x1f1d8>
   31fa0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   31fa4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   31fa8:	stm	r6, {r0, r1}
   31fac:	b	31dc8 <__assert_fail@plt+0x1f1d8>
   31fb0:	mov	r2, r0
   31fb4:	cmn	r0, #1
   31fb8:	beq	31e44 <__assert_fail@plt+0x1f254>
   31fbc:	add	r1, r2, sl
   31fc0:	ldr	r0, [r9, #36]	; 0x24
   31fc4:	cmp	r1, r0
   31fc8:	bhi	320fc <__assert_fail@plt+0x1f50c>
   31fcc:	str	r1, [sp, #4]
   31fd0:	ldr	r1, [r9, #12]
   31fd4:	cmp	r1, #0
   31fd8:	bne	31ff8 <__assert_fail@plt+0x1f408>
   31fdc:	lsl	r0, r0, #2
   31fe0:	mov	r4, r2
   31fe4:	bl	2ed88 <__assert_fail@plt+0x1c198>
   31fe8:	mov	r2, r4
   31fec:	str	r0, [r9, #12]
   31ff0:	cmp	r0, #0
   31ff4:	beq	32120 <__assert_fail@plt+0x1f530>
   31ff8:	ldrb	r0, [r9, #76]	; 0x4c
   31ffc:	cmp	r0, #0
   32000:	bne	3202c <__assert_fail@plt+0x1f43c>
   32004:	cmp	sl, #0
   32008:	beq	32024 <__assert_fail@plt+0x1f434>
   3200c:	ldr	r0, [r9, #12]
   32010:	mov	r1, #0
   32014:	str	r1, [r0, r1, lsl #2]
   32018:	add	r1, r1, #1
   3201c:	cmp	sl, r1
   32020:	bne	32014 <__assert_fail@plt+0x1f424>
   32024:	mov	r0, #1
   32028:	strb	r0, [r9, #76]	; 0x4c
   3202c:	ldr	r0, [r9, #4]
   32030:	add	r0, r0, sl
   32034:	add	r1, sp, #16
   32038:	mov	r4, r2
   3203c:	bl	125f0 <memcpy@plt>
   32040:	ldr	r1, [r9, #8]
   32044:	str	r7, [r1, sl, lsl #2]
   32048:	ldr	r0, [r9, #12]
   3204c:	ldr	r6, [sp]
   32050:	str	r6, [r0, sl, lsl #2]
   32054:	cmp	r4, #2
   32058:	bcc	32090 <__assert_fail@plt+0x1f4a0>
   3205c:	add	r0, r0, sl, lsl #2
   32060:	add	r1, r1, sl, lsl #2
   32064:	mov	r2, #1
   32068:	mvn	r3, #0
   3206c:	cmp	r2, r5
   32070:	mov	r7, r8
   32074:	movcc	r7, r2
   32078:	add	r7, r7, r6
   3207c:	str	r7, [r0, r2, lsl #2]
   32080:	str	r3, [r1, r2, lsl #2]
   32084:	add	r2, r2, #1
   32088:	cmp	r4, r2
   3208c:	bne	3206c <__assert_fail@plt+0x1f47c>
   32090:	sub	r1, r4, r5
   32094:	ldr	r0, [r9, #48]	; 0x30
   32098:	ldr	r2, [r9, #52]	; 0x34
   3209c:	add	r0, r0, r1
   320a0:	str	r0, [r9, #48]	; 0x30
   320a4:	cmp	r2, r6
   320a8:	mov	r7, r6
   320ac:	ble	320bc <__assert_fail@plt+0x1f4cc>
   320b0:	ldr	r2, [r9, #56]	; 0x38
   320b4:	add	r1, r2, r1
   320b8:	str	r1, [r9, #56]	; 0x38
   320bc:	add	r7, r5, r7
   320c0:	ldr	r1, [r9, #36]	; 0x24
   320c4:	cmp	r1, r0
   320c8:	movgt	r1, r0
   320cc:	ldr	sl, [sp, #4]
   320d0:	mov	r4, r1
   320d4:	b	31dc8 <__assert_fail@plt+0x1f1d8>
   320d8:	ldr	r0, [r9, #12]
   320dc:	add	r0, r0, sl, lsl #2
   320e0:	ldr	r1, [sp]
   320e4:	mov	r2, r5
   320e8:	str	r1, [r0], #4
   320ec:	add	r1, r1, #1
   320f0:	subs	r2, r2, #1
   320f4:	bne	320e8 <__assert_fail@plt+0x1f4f8>
   320f8:	b	31e8c <__assert_fail@plt+0x1f29c>
   320fc:	ldr	r0, [fp, #-40]	; 0xffffffd8
   32100:	ldr	r1, [fp, #-36]	; 0xffffffdc
   32104:	stm	r6, {r0, r1}
   32108:	ldr	r7, [sp]
   3210c:	str	sl, [r9, #28]
   32110:	str	r7, [r9, #32]
   32114:	mov	r0, #0
   32118:	sub	sp, fp, #28
   3211c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32120:	mov	r0, #12
   32124:	sub	sp, fp, #28
   32128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3212c:	ldrb	r0, [r1, r0]
   32130:	b	31f70 <__assert_fail@plt+0x1f380>
   32134:	ldr	r1, [r9, #12]
   32138:	str	r7, [r1, sl, lsl #2]
   3213c:	b	31f88 <__assert_fail@plt+0x1f398>
   32140:	push	{r4, r5, r6, sl, fp, lr}
   32144:	add	fp, sp, #16
   32148:	mov	r4, r0
   3214c:	ldr	r5, [r0, #28]
   32150:	ldr	r6, [r0, #36]	; 0x24
   32154:	ldr	r0, [r0, #48]	; 0x30
   32158:	cmp	r6, r0
   3215c:	movgt	r6, r0
   32160:	cmp	r5, r6
   32164:	bge	321a8 <__assert_fail@plt+0x1f5b8>
   32168:	ldr	r0, [r4]
   3216c:	ldr	r2, [r4, #24]
   32170:	ldr	r1, [r4, #64]	; 0x40
   32174:	add	r0, r0, r2
   32178:	ldrb	r0, [r0, r5]
   3217c:	cmp	r1, #0
   32180:	bne	321a0 <__assert_fail@plt+0x1f5b0>
   32184:	bl	12a40 <toupper@plt>
   32188:	ldr	r1, [r4, #4]
   3218c:	strb	r0, [r1, r5]
   32190:	add	r5, r5, #1
   32194:	cmp	r5, r6
   32198:	blt	32168 <__assert_fail@plt+0x1f578>
   3219c:	b	321a8 <__assert_fail@plt+0x1f5b8>
   321a0:	ldrb	r0, [r1, r0]
   321a4:	b	32184 <__assert_fail@plt+0x1f594>
   321a8:	str	r5, [r4, #28]
   321ac:	str	r5, [r4, #32]
   321b0:	pop	{r4, r5, r6, sl, fp, pc}
   321b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   321b8:	add	fp, sp, #28
   321bc:	sub	sp, sp, #76	; 0x4c
   321c0:	mov	r4, r0
   321c4:	ldr	r6, [r0, #28]
   321c8:	ldr	sl, [r0, #36]	; 0x24
   321cc:	ldr	r0, [r0, #48]	; 0x30
   321d0:	cmp	sl, r0
   321d4:	movgt	sl, r0
   321d8:	cmp	sl, r6
   321dc:	ble	32360 <__assert_fail@plt+0x1f770>
   321e0:	add	r9, r4, #16
   321e4:	add	r0, sp, #8
   321e8:	sub	r2, sl, r6
   321ec:	ldm	r9, {r3, r5}
   321f0:	ldr	r1, [r4, #64]	; 0x40
   321f4:	cmp	r1, #0
   321f8:	str	r3, [sp, #4]
   321fc:	bne	322dc <__assert_fail@plt+0x1f6ec>
   32200:	ldr	r3, [r4]
   32204:	ldr	r1, [r4, #24]
   32208:	add	r1, r3, r1
   3220c:	add	r1, r1, r6
   32210:	mov	r8, r0
   32214:	mov	r3, r9
   32218:	bl	2edb8 <__assert_fail@plt+0x1c1c8>
   3221c:	mov	r7, r0
   32220:	add	r0, r0, #1
   32224:	cmp	r0, #2
   32228:	bcc	32244 <__assert_fail@plt+0x1f654>
   3222c:	cmn	r7, #2
   32230:	bne	32270 <__assert_fail@plt+0x1f680>
   32234:	ldr	r0, [r4, #36]	; 0x24
   32238:	ldr	r1, [r4, #48]	; 0x30
   3223c:	cmp	r0, r1
   32240:	blt	32358 <__assert_fail@plt+0x1f768>
   32244:	ldr	r0, [r4]
   32248:	ldr	r1, [r4, #24]
   3224c:	add	r1, r1, r6
   32250:	ldrb	r0, [r0, r1]
   32254:	str	r0, [sp, #8]
   32258:	ldr	r1, [r4, #64]	; 0x40
   3225c:	cmp	r1, #0
   32260:	bne	3234c <__assert_fail@plt+0x1f75c>
   32264:	ldr	r0, [sp, #4]
   32268:	stm	r9, {r0, r5}
   3226c:	mov	r7, #1
   32270:	ldr	r0, [r4, #8]
   32274:	ldr	r1, [sp, #8]
   32278:	str	r1, [r0, r6, lsl #2]
   3227c:	add	r1, r7, r6
   32280:	add	r5, r6, #1
   32284:	cmp	r5, r1
   32288:	bge	322c8 <__assert_fail@plt+0x1f6d8>
   3228c:	mvn	r1, #3
   32290:	add	r2, r1, r7, lsl #2
   32294:	add	r0, r0, r6, lsl #2
   32298:	add	r0, r0, #4
   3229c:	mov	r1, #255	; 0xff
   322a0:	bl	12938 <memset@plt>
   322a4:	sub	r1, r7, #1
   322a8:	mov	r6, r5
   322ac:	mov	r0, r8
   322b0:	subs	r1, r1, #1
   322b4:	add	r6, r6, #1
   322b8:	bne	322b0 <__assert_fail@plt+0x1f6c0>
   322bc:	cmp	sl, r6
   322c0:	bgt	321e8 <__assert_fail@plt+0x1f5f8>
   322c4:	b	32360 <__assert_fail@plt+0x1f770>
   322c8:	mov	r6, r5
   322cc:	mov	r0, r8
   322d0:	cmp	sl, r6
   322d4:	bgt	321e8 <__assert_fail@plt+0x1f5f8>
   322d8:	b	32360 <__assert_fail@plt+0x1f770>
   322dc:	cmp	r2, #1
   322e0:	add	r1, sp, #12
   322e4:	blt	32210 <__assert_fail@plt+0x1f620>
   322e8:	ldr	r1, [r4, #80]	; 0x50
   322ec:	cmp	r1, #1
   322f0:	add	r1, sp, #12
   322f4:	blt	32210 <__assert_fail@plt+0x1f620>
   322f8:	mov	r7, #0
   322fc:	ldr	lr, [r4]
   32300:	ldr	ip, [r4, #4]
   32304:	ldr	r1, [r4, #24]
   32308:	ldr	r3, [r4, #64]	; 0x40
   3230c:	add	r1, lr, r1
   32310:	add	r1, r1, r6
   32314:	ldrb	r1, [r1, r7]
   32318:	ldrb	r1, [r3, r1]
   3231c:	add	r3, ip, r6
   32320:	strb	r1, [r3, r7]
   32324:	add	r3, sp, #12
   32328:	strb	r1, [r3, r7]
   3232c:	add	r7, r7, #1
   32330:	cmp	r7, r2
   32334:	bge	32344 <__assert_fail@plt+0x1f754>
   32338:	ldr	r1, [r4, #80]	; 0x50
   3233c:	cmp	r7, r1
   32340:	blt	322fc <__assert_fail@plt+0x1f70c>
   32344:	add	r1, sp, #12
   32348:	b	32210 <__assert_fail@plt+0x1f620>
   3234c:	ldrb	r0, [r1, r0]
   32350:	str	r0, [sp, #8]
   32354:	b	32264 <__assert_fail@plt+0x1f674>
   32358:	ldr	r0, [sp, #4]
   3235c:	stm	r9, {r0, r5}
   32360:	str	r6, [r4, #28]
   32364:	str	r6, [r4, #32]
   32368:	sub	sp, fp, #28
   3236c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32370:	push	{r4, sl, fp, lr}
   32374:	add	fp, sp, #8
   32378:	ldr	r1, [r0, #28]
   3237c:	ldr	ip, [r0, #36]	; 0x24
   32380:	ldr	r3, [r0, #48]	; 0x30
   32384:	cmp	ip, r3
   32388:	movgt	ip, r3
   3238c:	cmp	r1, ip
   32390:	bge	323bc <__assert_fail@plt+0x1f7cc>
   32394:	ldm	r0, {r3, lr}
   32398:	ldr	r2, [r0, #24]
   3239c:	ldr	r4, [r0, #64]	; 0x40
   323a0:	add	r2, r3, r2
   323a4:	ldrb	r2, [r2, r1]
   323a8:	ldrb	r2, [r4, r2]
   323ac:	strb	r2, [lr, r1]
   323b0:	add	r1, r1, #1
   323b4:	cmp	r1, ip
   323b8:	blt	32394 <__assert_fail@plt+0x1f7a4>
   323bc:	str	r1, [r0, #28]
   323c0:	str	r1, [r0, #32]
   323c4:	pop	{r4, sl, fp, pc}
   323c8:	push	{r4, sl, fp, lr}
   323cc:	add	fp, sp, #8
   323d0:	mov	r4, r1
   323d4:	bl	32588 <__assert_fail@plt+0x1f998>
   323d8:	ldr	r1, [r4, #40]	; 0x28
   323dc:	add	r0, r1, r0
   323e0:	str	r0, [r4, #40]	; 0x28
   323e4:	pop	{r4, sl, fp, pc}
   323e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   323ec:	add	fp, sp, #28
   323f0:	sub	sp, sp, #28
   323f4:	mov	r5, r2
   323f8:	mov	sl, r0
   323fc:	ldr	r4, [r1]
   32400:	ldr	r0, [r4, #84]	; 0x54
   32404:	str	r0, [sp, #12]
   32408:	ldr	r7, [fp, #12]
   3240c:	str	r7, [sp, #4]
   32410:	ldr	r8, [fp, #8]
   32414:	str	r8, [sp]
   32418:	mov	r0, sl
   3241c:	str	r1, [sp, #16]
   32420:	str	r3, [sp, #20]
   32424:	bl	32e20 <__assert_fail@plt+0x20230>
   32428:	mov	r6, r0
   3242c:	cmp	r0, #0
   32430:	bne	32440 <__assert_fail@plt+0x1f850>
   32434:	ldr	r0, [r7]
   32438:	cmp	r0, #0
   3243c:	bne	32548 <__assert_fail@plt+0x1f958>
   32440:	ldr	r0, [sp, #20]
   32444:	orr	r7, r0, #8388608	; 0x800000
   32448:	b	3247c <__assert_fail@plt+0x1f88c>
   3244c:	ldr	r0, [r4, #84]	; 0x54
   32450:	ldr	r1, [sp, #24]
   32454:	orr	r0, r0, r1
   32458:	str	r0, [r4, #84]	; 0x54
   3245c:	mov	r8, r9
   32460:	mov	r0, r4
   32464:	mov	r1, r6
   32468:	mov	r3, #10
   3246c:	bl	32550 <__assert_fail@plt+0x1f960>
   32470:	mov	r6, r0
   32474:	cmp	r0, #0
   32478:	beq	3253c <__assert_fail@plt+0x1f94c>
   3247c:	ldrb	r0, [r5, #4]
   32480:	cmp	r0, #10
   32484:	bne	3252c <__assert_fail@plt+0x1f93c>
   32488:	mov	r0, r5
   3248c:	mov	r1, sl
   32490:	mov	r2, r7
   32494:	bl	323c8 <__assert_fail@plt+0x1f7d8>
   32498:	ldrb	r0, [r5, #4]
   3249c:	orr	r1, r0, #8
   324a0:	mov	r2, #0
   324a4:	cmp	r1, #10
   324a8:	beq	32460 <__assert_fail@plt+0x1f870>
   324ac:	cmp	r8, #0
   324b0:	beq	324bc <__assert_fail@plt+0x1f8cc>
   324b4:	cmp	r0, #9
   324b8:	beq	32460 <__assert_fail@plt+0x1f870>
   324bc:	ldr	r0, [r4, #84]	; 0x54
   324c0:	str	r0, [sp, #24]
   324c4:	ldr	r0, [sp, #12]
   324c8:	str	r0, [r4, #84]	; 0x54
   324cc:	mov	r9, r8
   324d0:	str	r8, [sp]
   324d4:	ldr	r8, [fp, #12]
   324d8:	str	r8, [sp, #4]
   324dc:	mov	r0, sl
   324e0:	ldr	r1, [sp, #16]
   324e4:	mov	r2, r5
   324e8:	ldr	r3, [sp, #20]
   324ec:	bl	32e20 <__assert_fail@plt+0x20230>
   324f0:	mov	r2, r0
   324f4:	cmp	r0, #0
   324f8:	bne	3244c <__assert_fail@plt+0x1f85c>
   324fc:	ldr	r0, [r8]
   32500:	cmp	r0, #0
   32504:	beq	3244c <__assert_fail@plt+0x1f85c>
   32508:	cmp	r6, #0
   3250c:	beq	32548 <__assert_fail@plt+0x1f958>
   32510:	movw	r1, #12300	; 0x300c
   32514:	movt	r1, #3
   32518:	mov	r4, #0
   3251c:	mov	r0, r6
   32520:	mov	r2, #0
   32524:	bl	32f94 <__assert_fail@plt+0x203a4>
   32528:	b	32530 <__assert_fail@plt+0x1f940>
   3252c:	mov	r4, r6
   32530:	mov	r0, r4
   32534:	sub	sp, fp, #28
   32538:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3253c:	mov	r0, #12
   32540:	ldr	r1, [fp, #12]
   32544:	str	r0, [r1]
   32548:	mov	r4, #0
   3254c:	b	32530 <__assert_fail@plt+0x1f940>
   32550:	push	{fp, lr}
   32554:	mov	fp, sp
   32558:	sub	sp, sp, #8
   3255c:	mov	ip, #0
   32560:	str	ip, [sp]
   32564:	uxtb	ip, r3
   32568:	ldr	r3, [sp, #4]
   3256c:	bfc	r3, #0, #23
   32570:	orr	r3, r3, ip
   32574:	str	r3, [sp, #4]
   32578:	mov	r3, sp
   3257c:	bl	335cc <__assert_fail@plt+0x209dc>
   32580:	mov	sp, fp
   32584:	pop	{fp, pc}
   32588:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3258c:	add	fp, sp, #28
   32590:	sub	sp, sp, #12
   32594:	mov	r7, r1
   32598:	mov	sl, r0
   3259c:	ldr	r0, [r1, #40]	; 0x28
   325a0:	ldr	r1, [r1, #56]	; 0x38
   325a4:	cmp	r1, r0
   325a8:	ble	32684 <__assert_fail@plt+0x1fa94>
   325ac:	mov	r9, r2
   325b0:	ldr	r1, [r7, #4]
   325b4:	ldrb	r6, [r1, r0]
   325b8:	mov	r5, sl
   325bc:	strb	r6, [r5], #4
   325c0:	ldr	r4, [r5]
   325c4:	bic	r0, r4, #6291456	; 0x600000
   325c8:	str	r0, [r5]
   325cc:	ldr	r0, [r7, #80]	; 0x50
   325d0:	movw	r8, #65280	; 0xff00
   325d4:	movt	r8, #65439	; 0xff9f
   325d8:	cmp	r0, #2
   325dc:	blt	32600 <__assert_fail@plt+0x1fa10>
   325e0:	ldr	r1, [r7, #28]
   325e4:	ldr	r0, [r7, #40]	; 0x28
   325e8:	cmp	r0, r1
   325ec:	beq	32600 <__assert_fail@plt+0x1fa10>
   325f0:	ldr	r1, [r7, #8]
   325f4:	ldr	r0, [r1, r0, lsl #2]
   325f8:	cmn	r0, #1
   325fc:	beq	32ab8 <__assert_fail@plt+0x1fec8>
   32600:	cmp	r6, #92	; 0x5c
   32604:	bne	32694 <__assert_fail@plt+0x1faa4>
   32608:	ldr	r0, [r7, #40]	; 0x28
   3260c:	ldr	r1, [r7, #48]	; 0x30
   32610:	add	r0, r0, #1
   32614:	cmp	r0, r1
   32618:	bge	326e8 <__assert_fail@plt+0x1faf8>
   3261c:	mov	r0, r7
   32620:	bl	32d3c <__assert_fail@plt+0x2014c>
   32624:	mov	r6, r0
   32628:	strb	r0, [sl]
   3262c:	and	r0, r4, r8
   32630:	orr	r4, r0, #1
   32634:	str	r4, [sl, #4]
   32638:	ldr	r0, [r7, #80]	; 0x50
   3263c:	cmp	r0, #2
   32640:	blt	3290c <__assert_fail@plt+0x1fd1c>
   32644:	ldr	r0, [r7, #40]	; 0x28
   32648:	add	r1, r0, #1
   3264c:	mov	r0, r7
   32650:	bl	32dfc <__assert_fail@plt+0x2020c>
   32654:	mov	r7, r0
   32658:	bl	12914 <iswalnum@plt>
   3265c:	cmp	r0, #0
   32660:	movwne	r0, #1
   32664:	sub	r1, r7, #95	; 0x5f
   32668:	clz	r1, r1
   3266c:	lsr	r1, r1, #5
   32670:	orr	r0, r1, r0
   32674:	ldr	r1, [r5]
   32678:	bic	r1, r1, #4194304	; 0x400000
   3267c:	orr	r0, r1, r0, lsl #22
   32680:	b	3292c <__assert_fail@plt+0x1fd3c>
   32684:	mov	r0, #2
   32688:	strb	r0, [sl, #4]
   3268c:	mov	r8, #0
   32690:	b	32d30 <__assert_fail@plt+0x20140>
   32694:	and	r0, r4, r8
   32698:	orr	r4, r0, #1
   3269c:	str	r4, [r5]
   326a0:	ldr	r0, [r7, #80]	; 0x50
   326a4:	cmp	r0, #2
   326a8:	blt	326f4 <__assert_fail@plt+0x1fb04>
   326ac:	ldr	r1, [r7, #40]	; 0x28
   326b0:	mov	r0, r7
   326b4:	bl	32dfc <__assert_fail@plt+0x2020c>
   326b8:	mov	r4, r0
   326bc:	bl	12914 <iswalnum@plt>
   326c0:	cmp	r0, #0
   326c4:	movwne	r0, #1
   326c8:	sub	r1, r4, #95	; 0x5f
   326cc:	clz	r1, r1
   326d0:	lsr	r1, r1, #5
   326d4:	orr	r0, r1, r0
   326d8:	ldr	r1, [r5]
   326dc:	bic	r1, r1, #4194304	; 0x400000
   326e0:	orr	r0, r1, r0, lsl #22
   326e4:	b	32714 <__assert_fail@plt+0x1fb24>
   326e8:	and	r0, r4, r8
   326ec:	orr	r0, r0, #36	; 0x24
   326f0:	b	32ac4 <__assert_fail@plt+0x1fed4>
   326f4:	bl	1286c <__ctype_b_loc@plt>
   326f8:	ldr	r0, [r0]
   326fc:	add	r0, r0, r6, lsl #1
   32700:	ldrh	r0, [r0]
   32704:	ubfx	r0, r0, #3, #1
   32708:	cmp	r6, #95	; 0x5f
   3270c:	movweq	r0, #1
   32710:	orr	r0, r4, r0, lsl #22
   32714:	str	r0, [r5]
   32718:	sub	r1, r6, #10
   3271c:	mov	r8, #1
   32720:	cmp	r1, #115	; 0x73
   32724:	bhi	32d30 <__assert_fail@plt+0x20140>
   32728:	add	r2, pc, #0
   3272c:	ldr	pc, [r2, r1, lsl #2]
   32730:	andeq	r2, r3, r0, lsl #18
   32734:	andeq	r2, r3, r0, lsr sp
   32738:	andeq	r2, r3, r0, lsr sp
   3273c:	andeq	r2, r3, r0, lsr sp
   32740:	andeq	r2, r3, r0, lsr sp
   32744:	andeq	r2, r3, r0, lsr sp
   32748:	andeq	r2, r3, r0, lsr sp
   3274c:	andeq	r2, r3, r0, lsr sp
   32750:	andeq	r2, r3, r0, lsr sp
   32754:	andeq	r2, r3, r0, lsr sp
   32758:	andeq	r2, r3, r0, lsr sp
   3275c:	andeq	r2, r3, r0, lsr sp
   32760:	andeq	r2, r3, r0, lsr sp
   32764:	andeq	r2, r3, r0, lsr sp
   32768:	andeq	r2, r3, r0, lsr sp
   3276c:	andeq	r2, r3, r0, lsr sp
   32770:	andeq	r2, r3, r0, lsr sp
   32774:	andeq	r2, r3, r0, lsr sp
   32778:	andeq	r2, r3, r0, lsr sp
   3277c:	andeq	r2, r3, r0, lsr sp
   32780:	andeq	r2, r3, r0, lsr sp
   32784:	andeq	r2, r3, r0, lsr sp
   32788:	andeq	r2, r3, r0, lsr sp
   3278c:	andeq	r2, r3, r0, lsr sp
   32790:	andeq	r2, r3, r0, lsr sp
   32794:	andeq	r2, r3, r0, lsr sp
   32798:	ldrdeq	r2, [r3], -r0
   3279c:	andeq	r2, r3, r0, lsr sp
   327a0:	andeq	r2, r3, r0, lsr sp
   327a4:	andeq	r2, r3, r0, lsr sp
   327a8:	andeq	r2, r3, r0, lsr fp
   327ac:	andeq	r2, r3, ip, lsr fp
   327b0:	andeq	r2, r3, r8, asr #22
   327b4:	andeq	r2, r3, r0, asr fp
   327b8:	andeq	r2, r3, r0, lsr sp
   327bc:	andeq	r2, r3, r0, lsr sp
   327c0:	andeq	r2, r3, r0, ror #22
   327c4:	andeq	r2, r3, r0, lsr sp
   327c8:	andeq	r2, r3, r0, lsr sp
   327cc:	andeq	r2, r3, r0, lsr sp
   327d0:	andeq	r2, r3, r0, lsr sp
   327d4:	andeq	r2, r3, r0, lsr sp
   327d8:	andeq	r2, r3, r0, lsr sp
   327dc:	andeq	r2, r3, r0, lsr sp
   327e0:	andeq	r2, r3, r0, lsr sp
   327e4:	andeq	r2, r3, r0, lsr sp
   327e8:	andeq	r2, r3, r0, lsr sp
   327ec:	andeq	r2, r3, r0, lsr sp
   327f0:	andeq	r2, r3, r0, lsr sp
   327f4:	andeq	r2, r3, r0, lsr sp
   327f8:	andeq	r2, r3, r0, lsr sp
   327fc:	andeq	r2, r3, r0, lsr sp
   32800:	andeq	r2, r3, r0, lsr sp
   32804:	andeq	r2, r3, r8, ror #22
   32808:	andeq	r2, r3, r0, lsr sp
   3280c:	andeq	r2, r3, r0, lsr sp
   32810:	andeq	r2, r3, r0, lsr sp
   32814:	andeq	r2, r3, r0, lsr sp
   32818:	andeq	r2, r3, r0, lsr sp
   3281c:	andeq	r2, r3, r0, lsr sp
   32820:	andeq	r2, r3, r0, lsr sp
   32824:	andeq	r2, r3, r0, lsr sp
   32828:	andeq	r2, r3, r0, lsr sp
   3282c:	andeq	r2, r3, r0, lsr sp
   32830:	andeq	r2, r3, r0, lsr sp
   32834:	andeq	r2, r3, r0, lsr sp
   32838:	andeq	r2, r3, r0, lsr sp
   3283c:	andeq	r2, r3, r0, lsr sp
   32840:	andeq	r2, r3, r0, lsr sp
   32844:	andeq	r2, r3, r0, lsr sp
   32848:	andeq	r2, r3, r0, lsr sp
   3284c:	andeq	r2, r3, r0, lsr sp
   32850:	andeq	r2, r3, r0, lsr sp
   32854:	andeq	r2, r3, r0, lsr sp
   32858:	andeq	r2, r3, r0, lsr sp
   3285c:	andeq	r2, r3, r0, lsr sp
   32860:	andeq	r2, r3, r0, lsr sp
   32864:	andeq	r2, r3, r0, lsr sp
   32868:	andeq	r2, r3, r0, lsr sp
   3286c:	andeq	r2, r3, r0, lsr sp
   32870:	andeq	r2, r3, r0, lsr sp
   32874:	andeq	r2, r3, r8, ror fp
   32878:	andeq	r2, r3, r0, lsr sp
   3287c:	andeq	r2, r3, r0, lsr sp
   32880:	andeq	r2, r3, r0, lsl #23
   32884:	andeq	r2, r3, r0, lsr sp
   32888:	andeq	r2, r3, r0, lsr sp
   3288c:	andeq	r2, r3, r0, lsr sp
   32890:	andeq	r2, r3, r0, lsr sp
   32894:	andeq	r2, r3, r0, lsr sp
   32898:	andeq	r2, r3, r0, lsr sp
   3289c:	andeq	r2, r3, r0, lsr sp
   328a0:	andeq	r2, r3, r0, lsr sp
   328a4:	andeq	r2, r3, r0, lsr sp
   328a8:	andeq	r2, r3, r0, lsr sp
   328ac:	andeq	r2, r3, r0, lsr sp
   328b0:	andeq	r2, r3, r0, lsr sp
   328b4:	andeq	r2, r3, r0, lsr sp
   328b8:	andeq	r2, r3, r0, lsr sp
   328bc:	andeq	r2, r3, r0, lsr sp
   328c0:	andeq	r2, r3, r0, lsr sp
   328c4:	andeq	r2, r3, r0, lsr sp
   328c8:	andeq	r2, r3, r0, lsr sp
   328cc:	andeq	r2, r3, r0, lsr sp
   328d0:	andeq	r2, r3, r0, lsr sp
   328d4:	andeq	r2, r3, r0, lsr sp
   328d8:	andeq	r2, r3, r0, lsr sp
   328dc:	andeq	r2, r3, r0, lsr sp
   328e0:	andeq	r2, r3, r0, lsr sp
   328e4:	andeq	r2, r3, r0, lsr sp
   328e8:	andeq	r2, r3, r0, lsr sp
   328ec:	andeq	r2, r3, r0, lsr sp
   328f0:	andeq	r2, r3, r0, lsr sp
   328f4:	andeq	r2, r3, r8, lsr #23
   328f8:			; <UNDEFINED> instruction: 0x00032bb8
   328fc:	andeq	r2, r3, ip, asr #23
   32900:	tst	r9, #2048	; 0x800
   32904:	bne	32bc4 <__assert_fail@plt+0x1ffd4>
   32908:	b	32d30 <__assert_fail@plt+0x20140>
   3290c:	bl	1286c <__ctype_b_loc@plt>
   32910:	ldr	r0, [r0]
   32914:	add	r0, r0, r6, lsl #1
   32918:	ldrh	r0, [r0]
   3291c:	ubfx	r0, r0, #3, #1
   32920:	cmp	r6, #95	; 0x5f
   32924:	movweq	r0, #1
   32928:	orr	r0, r4, r0, lsl #22
   3292c:	str	r0, [r5]
   32930:	sub	r1, r6, #39	; 0x27
   32934:	mov	r8, #2
   32938:	cmp	r1, #86	; 0x56
   3293c:	bhi	32d30 <__assert_fail@plt+0x20140>
   32940:	add	r2, pc, #0
   32944:	ldr	pc, [r2, r1, lsl #2]
   32948:	andeq	r2, r3, r8, lsl #24
   3294c:	andeq	r2, r3, r8, lsl ip
   32950:	andeq	r2, r3, r8, lsr #24
   32954:	andeq	r2, r3, r0, lsr sp
   32958:	andeq	r2, r3, r8, lsr ip
   3295c:	andeq	r2, r3, r0, lsr sp
   32960:	andeq	r2, r3, r0, lsr sp
   32964:	andeq	r2, r3, r0, lsr sp
   32968:	andeq	r2, r3, r0, lsr sp
   3296c:	andeq	r2, r3, r0, lsr sp
   32970:	andeq	r2, r3, r4, lsr #21
   32974:	andeq	r2, r3, r4, lsr #21
   32978:	andeq	r2, r3, r4, lsr #21
   3297c:	andeq	r2, r3, r4, lsr #21
   32980:	andeq	r2, r3, r4, lsr #21
   32984:	andeq	r2, r3, r4, lsr #21
   32988:	andeq	r2, r3, r4, lsr #21
   3298c:	andeq	r2, r3, r4, lsr #21
   32990:	andeq	r2, r3, r4, lsr #21
   32994:	andeq	r2, r3, r0, lsr sp
   32998:	andeq	r2, r3, r0, lsr sp
   3299c:	andeq	r2, r3, r0, asr ip
   329a0:	andeq	r2, r3, r0, lsr sp
   329a4:	andeq	r2, r3, r0, ror #24
   329a8:	andeq	r2, r3, r0, ror ip
   329ac:	andeq	r2, r3, r0, lsr sp
   329b0:	andeq	r2, r3, r0, lsr sp
   329b4:	andeq	r2, r3, r8, lsl #25
   329b8:	andeq	r2, r3, r0, lsr sp
   329bc:	andeq	r2, r3, r0, lsr sp
   329c0:	andeq	r2, r3, r0, lsr sp
   329c4:	andeq	r2, r3, r0, lsr sp
   329c8:	andeq	r2, r3, r0, lsr sp
   329cc:	andeq	r2, r3, r0, lsr sp
   329d0:	andeq	r2, r3, r0, lsr sp
   329d4:	andeq	r2, r3, r0, lsr sp
   329d8:	andeq	r2, r3, r0, lsr sp
   329dc:	andeq	r2, r3, r0, lsr sp
   329e0:	andeq	r2, r3, r0, lsr sp
   329e4:	andeq	r2, r3, r0, lsr sp
   329e8:	andeq	r2, r3, r0, lsr sp
   329ec:	andeq	r2, r3, r0, lsr sp
   329f0:	andeq	r2, r3, r0, lsr sp
   329f4:	andeq	r2, r3, r0, lsr sp
   329f8:	muleq	r3, r8, ip
   329fc:	andeq	r2, r3, r0, lsr sp
   32a00:	andeq	r2, r3, r0, lsr sp
   32a04:	andeq	r2, r3, r0, lsr sp
   32a08:	andeq	r2, r3, r8, lsr #25
   32a0c:	andeq	r2, r3, r0, lsr sp
   32a10:	andeq	r2, r3, r0, lsr sp
   32a14:	andeq	r2, r3, r0, lsr sp
   32a18:	andeq	r2, r3, r0, lsr sp
   32a1c:	andeq	r2, r3, r0, lsr sp
   32a20:	andeq	r2, r3, r0, lsr sp
   32a24:	andeq	r2, r3, r0, lsr sp
   32a28:	andeq	r2, r3, r0, lsr sp
   32a2c:			; <UNDEFINED> instruction: 0x00032cb8
   32a30:	andeq	r2, r3, r0, lsr sp
   32a34:	andeq	r2, r3, r8, asr #25
   32a38:	andeq	r2, r3, r0, lsr sp
   32a3c:	andeq	r2, r3, r0, lsr sp
   32a40:	andeq	r2, r3, r0, lsr sp
   32a44:	andeq	r2, r3, r0, lsr sp
   32a48:	andeq	r2, r3, r0, lsr sp
   32a4c:	andeq	r2, r3, r0, lsr sp
   32a50:	andeq	r2, r3, r0, lsr sp
   32a54:	andeq	r2, r3, r0, lsr sp
   32a58:	andeq	r2, r3, r0, lsr sp
   32a5c:	andeq	r2, r3, r0, lsr sp
   32a60:	andeq	r2, r3, r0, lsr sp
   32a64:	andeq	r2, r3, r0, lsr sp
   32a68:	andeq	r2, r3, r0, lsr sp
   32a6c:	andeq	r2, r3, r0, lsr sp
   32a70:	andeq	r2, r3, r0, lsr sp
   32a74:	andeq	r2, r3, r0, lsr sp
   32a78:	ldrdeq	r2, [r3], -r8
   32a7c:	andeq	r2, r3, r0, lsr sp
   32a80:	andeq	r2, r3, r0, lsr sp
   32a84:	andeq	r2, r3, r0, lsr sp
   32a88:	andeq	r2, r3, r8, ror #25
   32a8c:	andeq	r2, r3, r0, lsr sp
   32a90:	andeq	r2, r3, r0, lsr sp
   32a94:	andeq	r2, r3, r0, lsr sp
   32a98:	strdeq	r2, [r3], -r8
   32a9c:	andeq	r2, r3, ip, lsl #26
   32aa0:	andeq	r2, r3, r8, lsl sp
   32aa4:	tst	r9, #16384	; 0x4000
   32aa8:	bne	32d30 <__assert_fail@plt+0x20140>
   32aac:	sub	r1, r6, #49	; 0x31
   32ab0:	mov	r2, #4
   32ab4:	b	32b98 <__assert_fail@plt+0x1ffa8>
   32ab8:	and	r0, r4, r8
   32abc:	orr	r0, r0, #1
   32ac0:	orr	r0, r0, #2097152	; 0x200000
   32ac4:	str	r0, [r5]
   32ac8:	mov	r8, #1
   32acc:	b	32d30 <__assert_fail@plt+0x20140>
   32ad0:	tst	r9, #8
   32ad4:	bne	32b1c <__assert_fail@plt+0x1ff2c>
   32ad8:	ldr	r0, [r7, #40]	; 0x28
   32adc:	ldr	r1, [r7, #48]	; 0x30
   32ae0:	add	r0, r0, #1
   32ae4:	cmp	r0, r1
   32ae8:	beq	32b1c <__assert_fail@plt+0x1ff2c>
   32aec:	str	r0, [r7, #40]	; 0x28
   32af0:	add	r0, sp, #4
   32af4:	mov	r1, r7
   32af8:	mov	r2, r9
   32afc:	bl	32588 <__assert_fail@plt+0x1f998>
   32b00:	ldr	r0, [r7, #40]	; 0x28
   32b04:	sub	r0, r0, #1
   32b08:	str	r0, [r7, #40]	; 0x28
   32b0c:	ldrb	r0, [sp, #8]
   32b10:	sub	r0, r0, #9
   32b14:	cmp	r0, #1
   32b18:	bhi	32d30 <__assert_fail@plt+0x20140>
   32b1c:	mov	r0, #32
   32b20:	str	r0, [sl]
   32b24:	mov	r0, #12
   32b28:	strb	r0, [sl, #4]
   32b2c:	b	32d30 <__assert_fail@plt+0x20140>
   32b30:	tst	r9, #8192	; 0x2000
   32b34:	bne	32c20 <__assert_fail@plt+0x20030>
   32b38:	b	32d30 <__assert_fail@plt+0x20140>
   32b3c:	tst	r9, #8192	; 0x2000
   32b40:	bne	32c30 <__assert_fail@plt+0x20040>
   32b44:	b	32d30 <__assert_fail@plt+0x20140>
   32b48:	mov	r1, #11
   32b4c:	b	32d28 <__assert_fail@plt+0x20138>
   32b50:	movw	r1, #1026	; 0x402
   32b54:	tst	r9, r1
   32b58:	bne	32d30 <__assert_fail@plt+0x20140>
   32b5c:	b	32c48 <__assert_fail@plt+0x20058>
   32b60:	mov	r1, #5
   32b64:	b	32d28 <__assert_fail@plt+0x20138>
   32b68:	movw	r1, #1026	; 0x402
   32b6c:	tst	r9, r1
   32b70:	bne	32d30 <__assert_fail@plt+0x20140>
   32b74:	b	32c80 <__assert_fail@plt+0x20090>
   32b78:	mov	r1, #20
   32b7c:	b	32d28 <__assert_fail@plt+0x20138>
   32b80:	movw	r1, #8
   32b84:	movt	r1, #128	; 0x80
   32b88:	tst	r9, r1
   32b8c:	beq	32bdc <__assert_fail@plt+0x1ffec>
   32b90:	mov	r1, #16
   32b94:	mov	r2, #12
   32b98:	bfi	r0, r2, #0, #8
   32b9c:	str	r1, [sl]
   32ba0:	str	r0, [sl, #4]
   32ba4:	b	32d30 <__assert_fail@plt+0x20140>
   32ba8:	and	r1, r9, #4608	; 0x1200
   32bac:	cmp	r1, #4608	; 0x1200
   32bb0:	beq	32d04 <__assert_fail@plt+0x20114>
   32bb4:	b	32d30 <__assert_fail@plt+0x20140>
   32bb8:	and	r1, r9, #33792	; 0x8400
   32bbc:	cmp	r1, #32768	; 0x8000
   32bc0:	bne	32d30 <__assert_fail@plt+0x20140>
   32bc4:	mov	r1, #10
   32bc8:	b	32d28 <__assert_fail@plt+0x20138>
   32bcc:	and	r1, r9, #4608	; 0x1200
   32bd0:	cmp	r1, #4608	; 0x1200
   32bd4:	beq	32d24 <__assert_fail@plt+0x20134>
   32bd8:	b	32d30 <__assert_fail@plt+0x20140>
   32bdc:	ldr	r1, [r7, #40]	; 0x28
   32be0:	cmp	r1, #0
   32be4:	beq	32b90 <__assert_fail@plt+0x1ffa0>
   32be8:	tst	r9, #2048	; 0x800
   32bec:	beq	32d30 <__assert_fail@plt+0x20140>
   32bf0:	ldr	r2, [r7, #4]
   32bf4:	add	r1, r1, r2
   32bf8:	ldrb	r1, [r1, #-1]
   32bfc:	cmp	r1, #10
   32c00:	beq	32b90 <__assert_fail@plt+0x1ffa0>
   32c04:	b	32d30 <__assert_fail@plt+0x20140>
   32c08:	tst	r9, #524288	; 0x80000
   32c0c:	bne	32d30 <__assert_fail@plt+0x20140>
   32c10:	mov	r1, #128	; 0x80
   32c14:	b	32b94 <__assert_fail@plt+0x1ffa4>
   32c18:	tst	r9, #8192	; 0x2000
   32c1c:	bne	32d30 <__assert_fail@plt+0x20140>
   32c20:	mov	r1, #8
   32c24:	b	32d28 <__assert_fail@plt+0x20138>
   32c28:	tst	r9, #8192	; 0x2000
   32c2c:	bne	32d30 <__assert_fail@plt+0x20140>
   32c30:	mov	r1, #9
   32c34:	b	32d28 <__assert_fail@plt+0x20138>
   32c38:	movw	r1, #1026	; 0x402
   32c3c:	and	r1, r9, r1
   32c40:	cmp	r1, #2
   32c44:	bne	32d30 <__assert_fail@plt+0x20140>
   32c48:	mov	r1, #18
   32c4c:	b	32d28 <__assert_fail@plt+0x20138>
   32c50:	tst	r9, #524288	; 0x80000
   32c54:	bne	32d30 <__assert_fail@plt+0x20140>
   32c58:	mov	r1, #6
   32c5c:	b	32b94 <__assert_fail@plt+0x1ffa4>
   32c60:	tst	r9, #524288	; 0x80000
   32c64:	bne	32d30 <__assert_fail@plt+0x20140>
   32c68:	mov	r1, #9
   32c6c:	b	32b94 <__assert_fail@plt+0x1ffa4>
   32c70:	movw	r1, #1026	; 0x402
   32c74:	and	r1, r9, r1
   32c78:	cmp	r1, #2
   32c7c:	bne	32d30 <__assert_fail@plt+0x20140>
   32c80:	mov	r1, #19
   32c84:	b	32d28 <__assert_fail@plt+0x20138>
   32c88:	tst	r9, #524288	; 0x80000
   32c8c:	bne	32d30 <__assert_fail@plt+0x20140>
   32c90:	mov	r1, #512	; 0x200
   32c94:	b	32b94 <__assert_fail@plt+0x1ffa4>
   32c98:	tst	r9, #524288	; 0x80000
   32c9c:	bne	32d30 <__assert_fail@plt+0x20140>
   32ca0:	mov	r1, #35	; 0x23
   32ca4:	b	32d28 <__assert_fail@plt+0x20138>
   32ca8:	tst	r9, #524288	; 0x80000
   32cac:	bne	32d30 <__assert_fail@plt+0x20140>
   32cb0:	mov	r1, #33	; 0x21
   32cb4:	b	32d28 <__assert_fail@plt+0x20138>
   32cb8:	tst	r9, #524288	; 0x80000
   32cbc:	bne	32d30 <__assert_fail@plt+0x20140>
   32cc0:	mov	r1, #64	; 0x40
   32cc4:	b	32b94 <__assert_fail@plt+0x1ffa4>
   32cc8:	tst	r9, #524288	; 0x80000
   32ccc:	bne	32d30 <__assert_fail@plt+0x20140>
   32cd0:	mov	r1, #256	; 0x100
   32cd4:	b	32b94 <__assert_fail@plt+0x1ffa4>
   32cd8:	tst	r9, #524288	; 0x80000
   32cdc:	bne	32d30 <__assert_fail@plt+0x20140>
   32ce0:	mov	r1, #34	; 0x22
   32ce4:	b	32d28 <__assert_fail@plt+0x20138>
   32ce8:	tst	r9, #524288	; 0x80000
   32cec:	bne	32d30 <__assert_fail@plt+0x20140>
   32cf0:	mov	r1, #32
   32cf4:	b	32d28 <__assert_fail@plt+0x20138>
   32cf8:	and	r1, r9, #4608	; 0x1200
   32cfc:	cmp	r1, #512	; 0x200
   32d00:	bne	32d30 <__assert_fail@plt+0x20140>
   32d04:	mov	r1, #23
   32d08:	b	32d28 <__assert_fail@plt+0x20138>
   32d0c:	tst	r9, #33792	; 0x8400
   32d10:	bne	32d30 <__assert_fail@plt+0x20140>
   32d14:	b	32bc4 <__assert_fail@plt+0x1ffd4>
   32d18:	and	r1, r9, #4608	; 0x1200
   32d1c:	cmp	r1, #512	; 0x200
   32d20:	bne	32d30 <__assert_fail@plt+0x20140>
   32d24:	mov	r1, #24
   32d28:	bfi	r0, r1, #0, #8
   32d2c:	str	r0, [r5]
   32d30:	mov	r0, r8
   32d34:	sub	sp, fp, #28
   32d38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32d3c:	push	{fp, lr}
   32d40:	mov	fp, sp
   32d44:	ldrb	r1, [r0, #75]	; 0x4b
   32d48:	cmp	r1, #0
   32d4c:	bne	32d6c <__assert_fail@plt+0x2017c>
   32d50:	ldr	r1, [r0, #4]
   32d54:	ldr	r0, [r0, #40]	; 0x28
   32d58:	add	r0, r0, r1
   32d5c:	add	r0, r0, #1
   32d60:	ldrb	r3, [r0]
   32d64:	uxtb	r0, r3
   32d68:	pop	{fp, pc}
   32d6c:	ldr	r1, [r0, #80]	; 0x50
   32d70:	cmp	r1, #2
   32d74:	blt	32dac <__assert_fail@plt+0x201bc>
   32d78:	ldr	r2, [r0, #8]
   32d7c:	ldr	r3, [r0, #40]	; 0x28
   32d80:	add	ip, r3, #1
   32d84:	ldr	r1, [r2, ip, lsl #2]
   32d88:	cmn	r1, #1
   32d8c:	beq	32df0 <__assert_fail@plt+0x20200>
   32d90:	ldr	r1, [r0, #28]
   32d94:	add	r3, r3, #2
   32d98:	cmp	r1, r3
   32d9c:	beq	32dac <__assert_fail@plt+0x201bc>
   32da0:	ldr	r1, [r2, r3, lsl #2]
   32da4:	cmn	r1, #1
   32da8:	beq	32df0 <__assert_fail@plt+0x20200>
   32dac:	ldrb	lr, [r0, #76]	; 0x4c
   32db0:	ldr	r1, [r0, #40]	; 0x28
   32db4:	add	ip, r1, #1
   32db8:	cmp	lr, #0
   32dbc:	mov	r3, ip
   32dc0:	beq	32dcc <__assert_fail@plt+0x201dc>
   32dc4:	ldr	r3, [r0, #12]
   32dc8:	ldr	r3, [r3, ip, lsl #2]
   32dcc:	ldr	r1, [r0]
   32dd0:	ldr	r2, [r0, #24]
   32dd4:	add	r2, r2, r3
   32dd8:	add	r1, r1, r2
   32ddc:	ldrsb	r3, [r1]
   32de0:	cmp	lr, #0
   32de4:	beq	32d64 <__assert_fail@plt+0x20174>
   32de8:	cmn	r3, #1
   32dec:	bgt	32d64 <__assert_fail@plt+0x20174>
   32df0:	ldr	r0, [r0, #4]
   32df4:	add	r0, r0, ip
   32df8:	b	32d60 <__assert_fail@plt+0x20170>
   32dfc:	ldr	r2, [r0, #80]	; 0x50
   32e00:	cmp	r2, #1
   32e04:	bne	32e14 <__assert_fail@plt+0x20224>
   32e08:	ldr	r0, [r0, #4]
   32e0c:	ldrb	r0, [r0, r1]
   32e10:	bx	lr
   32e14:	ldr	r0, [r0, #8]
   32e18:	ldr	r0, [r0, r1, lsl #2]
   32e1c:	bx	lr
   32e20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32e24:	add	fp, sp, #28
   32e28:	sub	sp, sp, #20
   32e2c:	mov	r6, r2
   32e30:	mov	r7, r1
   32e34:	mov	r1, r0
   32e38:	ldr	r0, [r7]
   32e3c:	str	r0, [sp, #8]
   32e40:	ldr	r5, [fp, #12]
   32e44:	str	r5, [sp, #4]
   32e48:	ldr	r4, [fp, #8]
   32e4c:	str	r4, [sp]
   32e50:	str	r1, [sp, #12]
   32e54:	mov	r0, r1
   32e58:	mov	r1, r7
   32e5c:	str	r3, [sp, #16]
   32e60:	bl	33024 <__assert_fail@plt+0x20434>
   32e64:	cmp	r0, #0
   32e68:	bne	32ea0 <__assert_fail@plt+0x202b0>
   32e6c:	ldr	r1, [r5]
   32e70:	cmp	r1, #0
   32e74:	beq	32ea0 <__assert_fail@plt+0x202b0>
   32e78:	mov	r6, #0
   32e7c:	b	32f24 <__assert_fail@plt+0x20334>
   32e80:	ldr	r0, [sp, #8]
   32e84:	mov	r1, r5
   32e88:	mov	r2, r8
   32e8c:	mov	r3, #16
   32e90:	bl	32550 <__assert_fail@plt+0x1f960>
   32e94:	cmp	r0, #0
   32e98:	mov	r4, r9
   32e9c:	beq	32f30 <__assert_fail@plt+0x20340>
   32ea0:	mov	r5, r0
   32ea4:	ldrb	r0, [r6, #4]
   32ea8:	orr	r1, r0, #8
   32eac:	cmp	r1, #10
   32eb0:	beq	32f20 <__assert_fail@plt+0x20330>
   32eb4:	cmp	r4, #0
   32eb8:	beq	32ec4 <__assert_fail@plt+0x202d4>
   32ebc:	cmp	r0, #9
   32ec0:	beq	32f20 <__assert_fail@plt+0x20330>
   32ec4:	mov	r9, r4
   32ec8:	str	r4, [sp]
   32ecc:	ldr	sl, [fp, #12]
   32ed0:	str	sl, [sp, #4]
   32ed4:	ldr	r0, [sp, #12]
   32ed8:	mov	r1, r7
   32edc:	mov	r2, r6
   32ee0:	ldr	r3, [sp, #16]
   32ee4:	bl	33024 <__assert_fail@plt+0x20434>
   32ee8:	mov	r8, r0
   32eec:	cmp	r0, #0
   32ef0:	bne	32f00 <__assert_fail@plt+0x20310>
   32ef4:	ldr	r0, [sl]
   32ef8:	cmp	r0, #0
   32efc:	bne	32f6c <__assert_fail@plt+0x2037c>
   32f00:	cmp	r5, #0
   32f04:	cmpne	r8, #0
   32f08:	bne	32e80 <__assert_fail@plt+0x20290>
   32f0c:	cmp	r5, #0
   32f10:	movne	r8, r5
   32f14:	mov	r0, r8
   32f18:	mov	r4, r9
   32f1c:	b	32ea0 <__assert_fail@plt+0x202b0>
   32f20:	mov	r6, r5
   32f24:	mov	r0, r6
   32f28:	sub	sp, fp, #28
   32f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32f30:	movw	r4, #12300	; 0x300c
   32f34:	movt	r4, #3
   32f38:	mov	r6, #0
   32f3c:	mov	r0, r8
   32f40:	mov	r1, r4
   32f44:	mov	r2, #0
   32f48:	bl	32f94 <__assert_fail@plt+0x203a4>
   32f4c:	mov	r0, r5
   32f50:	mov	r1, r4
   32f54:	mov	r2, #0
   32f58:	bl	32f94 <__assert_fail@plt+0x203a4>
   32f5c:	mov	r0, #12
   32f60:	ldr	r1, [fp, #12]
   32f64:	str	r0, [r1]
   32f68:	b	32f24 <__assert_fail@plt+0x20334>
   32f6c:	cmp	r5, #0
   32f70:	mov	r6, #0
   32f74:	beq	32f24 <__assert_fail@plt+0x20334>
   32f78:	movw	r1, #12300	; 0x300c
   32f7c:	movt	r1, #3
   32f80:	mov	r6, #0
   32f84:	mov	r0, r5
   32f88:	mov	r2, #0
   32f8c:	bl	32f94 <__assert_fail@plt+0x203a4>
   32f90:	b	32f24 <__assert_fail@plt+0x20334>
   32f94:	push	{r4, r5, r6, sl, fp, lr}
   32f98:	add	fp, sp, #16
   32f9c:	mov	r4, r2
   32fa0:	mov	r5, r1
   32fa4:	b	32fac <__assert_fail@plt+0x203bc>
   32fa8:	ldr	r0, [r6, #8]
   32fac:	mov	r6, r0
   32fb0:	ldr	r0, [r0, #4]
   32fb4:	cmp	r0, #0
   32fb8:	bne	32fac <__assert_fail@plt+0x203bc>
   32fbc:	ldr	r0, [r6, #8]
   32fc0:	cmp	r0, #0
   32fc4:	bne	32fa8 <__assert_fail@plt+0x203b8>
   32fc8:	mov	r0, r4
   32fcc:	mov	r1, r6
   32fd0:	blx	r5
   32fd4:	cmp	r0, #0
   32fd8:	bne	33008 <__assert_fail@plt+0x20418>
   32fdc:	ldr	r1, [r6]
   32fe0:	cmp	r1, #0
   32fe4:	beq	33008 <__assert_fail@plt+0x20418>
   32fe8:	ldr	r0, [r1, #8]
   32fec:	cmp	r0, r6
   32ff0:	mov	r6, r1
   32ff4:	beq	32fc8 <__assert_fail@plt+0x203d8>
   32ff8:	cmp	r0, #0
   32ffc:	mov	r6, r1
   33000:	beq	32fc8 <__assert_fail@plt+0x203d8>
   33004:	b	32fac <__assert_fail@plt+0x203bc>
   33008:	pop	{r4, r5, r6, sl, fp, pc}
   3300c:	push	{fp, lr}
   33010:	mov	fp, sp
   33014:	add	r0, r1, #20
   33018:	bl	30fcc <__assert_fail@plt+0x1e3dc>
   3301c:	mov	r0, #0
   33020:	pop	{fp, pc}
   33024:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33028:	add	fp, sp, #28
   3302c:	sub	sp, sp, #12
   33030:	mov	r9, r3
   33034:	mov	r5, r2
   33038:	mov	r6, r1
   3303c:	mov	sl, r0
   33040:	and	ip, r3, #16
   33044:	and	r8, r3, #32
   33048:	and	r0, r3, #16777216	; 0x1000000
   3304c:	str	r0, [sp, #8]
   33050:	ldr	r3, [fp, #12]
   33054:	ldr	r4, [fp, #8]
   33058:	mvn	r1, #0
   3305c:	ldr	r0, [r5, #4]
   33060:	uxtab	r1, r1, r0
   33064:	ldr	r7, [r6]
   33068:	add	r2, pc, #0
   3306c:	ldr	pc, [r2, r1, lsl #2]
   33070:	strdeq	r3, [r3], -r8
   33074:			; <UNDEFINED> instruction: 0x000335b0
   33078:	andeq	r3, r3, ip, asr #11
   3307c:			; <UNDEFINED> instruction: 0x000332b4
   33080:	andeq	r3, r3, r0, lsl r3
   33084:	andeq	r3, r3, ip, asr #11
   33088:	andeq	r3, r3, ip, asr #11
   3308c:	andeq	r3, r3, r4, asr r3
   33090:			; <UNDEFINED> instruction: 0x000331b0
   33094:			; <UNDEFINED> instruction: 0x000335b0
   33098:	andeq	r3, r3, ip, lsl #2
   3309c:	andeq	r3, r3, ip, ror r3
   330a0:	andeq	r3, r3, ip, asr #11
   330a4:	andeq	r3, r3, ip, asr #11
   330a8:	andeq	r3, r3, ip, asr #11
   330ac:	andeq	r3, r3, ip, asr #11
   330b0:	andeq	r3, r3, ip, asr #11
   330b4:	andeq	r3, r3, ip, lsl #2
   330b8:	andeq	r3, r3, ip, lsl #2
   330bc:			; <UNDEFINED> instruction: 0x000333bc
   330c0:	andeq	r3, r3, ip, asr #11
   330c4:	andeq	r3, r3, ip, asr #11
   330c8:	andeq	r3, r3, r0, lsl #2
   330cc:	andeq	r3, r3, r0, asr #3
   330d0:	andeq	r3, r3, ip, asr #11
   330d4:	andeq	r3, r3, ip, asr #11
   330d8:	andeq	r3, r3, ip, asr #11
   330dc:	andeq	r3, r3, ip, asr #11
   330e0:	andeq	r3, r3, ip, asr #11
   330e4:	andeq	r3, r3, ip, asr #11
   330e8:	andeq	r3, r3, ip, asr #11
   330ec:	andeq	r3, r3, r0, asr #2
   330f0:	andeq	r3, r3, r0, asr #2
   330f4:	andeq	r3, r3, r4, ror r1
   330f8:	andeq	r3, r3, r4, ror r1
   330fc:			; <UNDEFINED> instruction: 0x000334b4
   33100:	ldr	r1, [sp, #8]
   33104:	cmp	r1, #0
   33108:	bne	33580 <__assert_fail@plt+0x20990>
   3310c:	cmp	r8, #0
   33110:	bne	33580 <__assert_fail@plt+0x20990>
   33114:	cmp	ip, #0
   33118:	beq	331b0 <__assert_fail@plt+0x205c0>
   3311c:	mov	r0, r5
   33120:	mov	r1, sl
   33124:	mov	r2, r9
   33128:	mov	r7, ip
   3312c:	bl	323c8 <__assert_fail@plt+0x1f7d8>
   33130:	mvn	r1, #0
   33134:	mov	ip, r7
   33138:	ldr	r3, [fp, #12]
   3313c:	b	3305c <__assert_fail@plt+0x2046c>
   33140:	mov	r8, sl
   33144:	ldr	r1, [sl, #64]	; 0x40
   33148:	mvn	r2, #32
   3314c:	uxtab	r0, r2, r0
   33150:	clz	r0, r0
   33154:	lsr	r0, r0, #5
   33158:	stm	sp, {r0, r3}
   3315c:	movw	r2, #19526	; 0x4c46
   33160:	movt	r2, #4
   33164:	mov	r4, r3
   33168:	movw	r3, #19532	; 0x4c4c
   3316c:	movt	r3, #4
   33170:	b	331a4 <__assert_fail@plt+0x205b4>
   33174:	mov	r8, sl
   33178:	ldr	r1, [sl, #64]	; 0x40
   3317c:	mvn	r2, #34	; 0x22
   33180:	uxtab	r0, r2, r0
   33184:	clz	r0, r0
   33188:	lsr	r0, r0, #5
   3318c:	stm	sp, {r0, r3}
   33190:	movw	r2, #19534	; 0x4c4e
   33194:	movt	r2, #4
   33198:	mov	r4, r3
   3319c:	movw	r3, #2407	; 0x967
   331a0:	movt	r3, #4
   331a4:	mov	r0, r7
   331a8:	bl	33d94 <__assert_fail@plt+0x211a4>
   331ac:	b	333dc <__assert_fail@plt+0x207ec>
   331b0:	tst	r9, #131072	; 0x20000
   331b4:	uxtbeq	r1, r0
   331b8:	cmpeq	r1, #9
   331bc:	beq	334c0 <__assert_fail@plt+0x208d0>
   331c0:	mov	r1, #1
   331c4:	bfi	r0, r1, #0, #8
   331c8:	str	r0, [r5, #4]
   331cc:	mov	r4, #0
   331d0:	mov	r0, r7
   331d4:	mov	r1, #0
   331d8:	mov	r2, #0
   331dc:	mov	r3, r5
   331e0:	bl	335cc <__assert_fail@plt+0x209dc>
   331e4:	mov	r6, r0
   331e8:	cmp	r0, #0
   331ec:	mov	r8, sl
   331f0:	bne	333f4 <__assert_fail@plt+0x20804>
   331f4:	b	33534 <__assert_fail@plt+0x20944>
   331f8:	mov	r4, #0
   331fc:	mov	r0, r7
   33200:	mov	r1, #0
   33204:	mov	r2, #0
   33208:	mov	r3, r5
   3320c:	bl	335cc <__assert_fail@plt+0x209dc>
   33210:	cmp	r0, #0
   33214:	beq	33534 <__assert_fail@plt+0x20944>
   33218:	mov	r6, r0
   3321c:	ldr	r0, [r7, #92]	; 0x5c
   33220:	cmp	r0, #2
   33224:	mov	r8, sl
   33228:	blt	333f4 <__assert_fail@plt+0x20804>
   3322c:	ldr	r0, [r8, #40]	; 0x28
   33230:	ldr	r1, [r8, #56]	; 0x38
   33234:	cmp	r1, r0
   33238:	ble	333f4 <__assert_fail@plt+0x20804>
   3323c:	ldr	r1, [r8, #28]
   33240:	cmp	r0, r1
   33244:	beq	333f4 <__assert_fail@plt+0x20804>
   33248:	ldr	r1, [r8, #8]
   3324c:	ldr	r0, [r1, r0, lsl #2]
   33250:	cmn	r0, #1
   33254:	bne	333f4 <__assert_fail@plt+0x20804>
   33258:	mov	r0, r5
   3325c:	mov	r1, r8
   33260:	mov	r2, r9
   33264:	bl	323c8 <__assert_fail@plt+0x1f7d8>
   33268:	mov	r0, r7
   3326c:	mov	r1, #0
   33270:	mov	r2, #0
   33274:	mov	r3, r5
   33278:	bl	335cc <__assert_fail@plt+0x209dc>
   3327c:	mov	r4, r0
   33280:	mov	r0, r7
   33284:	mov	r1, r6
   33288:	mov	r2, r4
   3328c:	mov	r3, #16
   33290:	bl	32550 <__assert_fail@plt+0x1f960>
   33294:	cmp	r4, #0
   33298:	ldr	r1, [fp, #12]
   3329c:	movne	r6, r0
   332a0:	cmpne	r0, #0
   332a4:	bne	3322c <__assert_fail@plt+0x2063c>
   332a8:	mov	r0, #12
   332ac:	str	r0, [r1]
   332b0:	b	335b0 <__assert_fail@plt+0x209c0>
   332b4:	ldr	r0, [r5]
   332b8:	mov	r1, #1
   332bc:	ldr	r2, [r7, #84]	; 0x54
   332c0:	tst	r2, r1, lsl r0
   332c4:	beq	335c0 <__assert_fail@plt+0x209d0>
   332c8:	lsl	r0, r1, r0
   332cc:	ldr	r1, [r7, #80]	; 0x50
   332d0:	orr	r0, r1, r0
   332d4:	str	r0, [r7, #80]	; 0x50
   332d8:	mov	r4, #0
   332dc:	mov	r0, r7
   332e0:	mov	r1, #0
   332e4:	mov	r2, #0
   332e8:	mov	r3, r5
   332ec:	bl	335cc <__assert_fail@plt+0x209dc>
   332f0:	cmp	r0, #0
   332f4:	beq	33534 <__assert_fail@plt+0x20944>
   332f8:	mov	r6, r0
   332fc:	mov	r8, sl
   33300:	ldr	r0, [r7, #76]	; 0x4c
   33304:	add	r0, r0, #1
   33308:	str	r0, [r7, #76]	; 0x4c
   3330c:	b	33344 <__assert_fail@plt+0x20754>
   33310:	mov	r4, #0
   33314:	mov	r0, r7
   33318:	mov	r1, #0
   3331c:	mov	r2, #0
   33320:	mov	r3, r5
   33324:	bl	335cc <__assert_fail@plt+0x209dc>
   33328:	cmp	r0, #0
   3332c:	beq	33534 <__assert_fail@plt+0x20944>
   33330:	mov	r6, r0
   33334:	ldr	r0, [r7, #92]	; 0x5c
   33338:	cmp	r0, #2
   3333c:	mov	r8, sl
   33340:	blt	333f4 <__assert_fail@plt+0x20804>
   33344:	ldrb	r0, [r7, #88]	; 0x58
   33348:	orr	r0, r0, #2
   3334c:	strb	r0, [r7, #88]	; 0x58
   33350:	b	333f4 <__assert_fail@plt+0x20804>
   33354:	add	r0, r4, #1
   33358:	stm	sp, {r0, r3}
   3335c:	mov	r8, sl
   33360:	mov	r0, sl
   33364:	mov	r1, r6
   33368:	mov	r2, r5
   3336c:	mov	r4, r3
   33370:	mov	r3, r9
   33374:	bl	33678 <__assert_fail@plt+0x20a88>
   33378:	b	333dc <__assert_fail@plt+0x207ec>
   3337c:	ldr	r0, [r5]
   33380:	movw	r1, #783	; 0x30f
   33384:	tst	r0, r1
   33388:	beq	333a0 <__assert_fail@plt+0x207b0>
   3338c:	ldrb	r0, [r7, #88]	; 0x58
   33390:	tst	r0, #16
   33394:	moveq	r0, r7
   33398:	bleq	33cac <__assert_fail@plt+0x210bc>
   3339c:	ldr	r0, [r5]
   333a0:	cmp	r0, #256	; 0x100
   333a4:	beq	334cc <__assert_fail@plt+0x208dc>
   333a8:	cmp	r0, #512	; 0x200
   333ac:	bne	33544 <__assert_fail@plt+0x20954>
   333b0:	mov	r6, #10
   333b4:	mov	r0, #5
   333b8:	b	334d4 <__assert_fail@plt+0x208e4>
   333bc:	str	r3, [sp]
   333c0:	mov	r8, sl
   333c4:	mov	r0, sl
   333c8:	mov	r1, r7
   333cc:	mov	r2, r5
   333d0:	mov	r4, r3
   333d4:	mov	r3, r9
   333d8:	bl	33790 <__assert_fail@plt+0x20ba0>
   333dc:	mov	r6, r0
   333e0:	cmp	r0, #0
   333e4:	bne	333f4 <__assert_fail@plt+0x20804>
   333e8:	ldr	r0, [r4]
   333ec:	cmp	r0, #0
   333f0:	bne	335b0 <__assert_fail@plt+0x209c0>
   333f4:	mov	r0, r5
   333f8:	mov	r1, r8
   333fc:	mov	r2, r9
   33400:	bl	323c8 <__assert_fail@plt+0x1f7d8>
   33404:	mov	r4, #1
   33408:	movw	r8, #2048	; 0x800
   3340c:	movt	r8, #140	; 0x8c
   33410:	ldr	r2, [fp, #12]
   33414:	ldrb	r0, [r5, #4]
   33418:	cmp	r0, #23
   3341c:	bhi	334ac <__assert_fail@plt+0x208bc>
   33420:	tst	r8, r4, lsl r0
   33424:	beq	334ac <__assert_fail@plt+0x208bc>
   33428:	str	r9, [sp]
   3342c:	str	r2, [sp, #4]
   33430:	mov	r0, r6
   33434:	mov	r1, sl
   33438:	mov	r2, r7
   3343c:	mov	r3, r5
   33440:	bl	33f84 <__assert_fail@plt+0x21394>
   33444:	ldr	r2, [fp, #12]
   33448:	cmp	r0, #0
   3344c:	bne	3345c <__assert_fail@plt+0x2086c>
   33450:	ldr	r1, [r2]
   33454:	cmp	r1, #0
   33458:	bne	3358c <__assert_fail@plt+0x2099c>
   3345c:	ldr	r1, [sp, #8]
   33460:	cmp	r1, #0
   33464:	mov	r6, r0
   33468:	beq	33414 <__assert_fail@plt+0x20824>
   3346c:	ldrb	r1, [r5, #4]
   33470:	cmp	r1, #23
   33474:	beq	33484 <__assert_fail@plt+0x20894>
   33478:	cmp	r1, #11
   3347c:	mov	r6, r0
   33480:	bne	33414 <__assert_fail@plt+0x20824>
   33484:	cmp	r0, #0
   33488:	beq	334a0 <__assert_fail@plt+0x208b0>
   3348c:	movw	r1, #12300	; 0x300c
   33490:	movt	r1, #3
   33494:	mov	r2, #0
   33498:	bl	32f94 <__assert_fail@plt+0x203a4>
   3349c:	ldr	r2, [fp, #12]
   334a0:	mov	r0, #13
   334a4:	str	r0, [r2]
   334a8:	b	335b0 <__assert_fail@plt+0x209c0>
   334ac:	mov	r4, r6
   334b0:	b	335b4 <__assert_fail@plt+0x209c4>
   334b4:	mov	r0, #5
   334b8:	str	r0, [r3]
   334bc:	b	335b0 <__assert_fail@plt+0x209c0>
   334c0:	mov	r0, #16
   334c4:	str	r0, [r3]
   334c8:	b	335b0 <__assert_fail@plt+0x209c0>
   334cc:	mov	r6, #9
   334d0:	mov	r0, #6
   334d4:	str	r0, [r5]
   334d8:	mov	r4, #0
   334dc:	mov	r0, r7
   334e0:	mov	r1, #0
   334e4:	mov	r2, #0
   334e8:	mov	r3, r5
   334ec:	bl	335cc <__assert_fail@plt+0x209dc>
   334f0:	mov	r8, r0
   334f4:	str	r6, [r5]
   334f8:	mov	r0, r7
   334fc:	mov	r1, #0
   33500:	mov	r2, #0
   33504:	mov	r3, r5
   33508:	bl	335cc <__assert_fail@plt+0x209dc>
   3350c:	mov	r1, r0
   33510:	mov	r0, r7
   33514:	mov	r7, r1
   33518:	mov	r1, r8
   3351c:	mov	r2, r7
   33520:	mov	r3, #10
   33524:	bl	32550 <__assert_fail@plt+0x1f960>
   33528:	cmp	r8, #0
   3352c:	cmpne	r7, #0
   33530:	bne	3355c <__assert_fail@plt+0x2096c>
   33534:	mov	r0, #12
   33538:	ldr	r1, [fp, #12]
   3353c:	str	r0, [r1]
   33540:	b	335b4 <__assert_fail@plt+0x209c4>
   33544:	mov	r4, #0
   33548:	mov	r0, r7
   3354c:	mov	r1, #0
   33550:	mov	r2, #0
   33554:	mov	r3, r5
   33558:	bl	335cc <__assert_fail@plt+0x209dc>
   3355c:	mov	r6, r0
   33560:	cmp	r0, #0
   33564:	beq	33534 <__assert_fail@plt+0x20944>
   33568:	mov	r0, r5
   3356c:	mov	r1, sl
   33570:	mov	r2, r9
   33574:	bl	323c8 <__assert_fail@plt+0x1f7d8>
   33578:	mov	r4, r6
   3357c:	b	335b4 <__assert_fail@plt+0x209c4>
   33580:	mov	r0, #13
   33584:	str	r0, [r3]
   33588:	b	335b0 <__assert_fail@plt+0x209c0>
   3358c:	cmp	r6, #0
   33590:	beq	335b0 <__assert_fail@plt+0x209c0>
   33594:	movw	r1, #12300	; 0x300c
   33598:	movt	r1, #3
   3359c:	mov	r4, #0
   335a0:	mov	r0, r6
   335a4:	mov	r2, #0
   335a8:	bl	32f94 <__assert_fail@plt+0x203a4>
   335ac:	b	335b4 <__assert_fail@plt+0x209c4>
   335b0:	mov	r4, #0
   335b4:	mov	r0, r4
   335b8:	sub	sp, fp, #28
   335bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   335c0:	mov	r0, #6
   335c4:	ldr	r1, [fp, #12]
   335c8:	b	332ac <__assert_fail@plt+0x206bc>
   335cc:	push	{r4, r5, r6, r7, fp, lr}
   335d0:	add	fp, sp, #16
   335d4:	mov	r6, r3
   335d8:	mov	r4, r2
   335dc:	mov	r5, r1
   335e0:	mov	r7, r0
   335e4:	ldr	r0, [r0, #64]	; 0x40
   335e8:	cmp	r0, #31
   335ec:	beq	33648 <__assert_fail@plt+0x20a58>
   335f0:	ldr	r0, [r7, #56]	; 0x38
   335f4:	ldr	r1, [r7, #64]	; 0x40
   335f8:	add	r2, r1, #1
   335fc:	str	r2, [r7, #64]	; 0x40
   33600:	add	r0, r0, r1, lsl #5
   33604:	mov	r1, #0
   33608:	str	r1, [r0, #4]!
   3360c:	str	r4, [r0, #8]
   33610:	str	r5, [r0, #4]
   33614:	ldm	r6, {r2, r3}
   33618:	mvn	r7, #0
   3361c:	str	r7, [r0, #28]
   33620:	str	r1, [r0, #16]
   33624:	str	r1, [r0, #12]
   33628:	str	r2, [r0, #20]
   3362c:	bic	r1, r3, #786432	; 0xc0000
   33630:	str	r1, [r0, #24]
   33634:	cmp	r5, #0
   33638:	strne	r0, [r5]
   3363c:	cmp	r4, #0
   33640:	strne	r0, [r4]
   33644:	pop	{r4, r5, r6, r7, fp, pc}
   33648:	mov	r0, #996	; 0x3e4
   3364c:	bl	2ed88 <__assert_fail@plt+0x1c198>
   33650:	cmp	r0, #0
   33654:	beq	33670 <__assert_fail@plt+0x20a80>
   33658:	ldr	r1, [r7, #56]	; 0x38
   3365c:	str	r1, [r0]
   33660:	mov	r1, #0
   33664:	str	r1, [r7, #64]	; 0x40
   33668:	str	r0, [r7, #56]	; 0x38
   3366c:	b	335f0 <__assert_fail@plt+0x20a00>
   33670:	mov	r0, #0
   33674:	pop	{r4, r5, r6, r7, fp, pc}
   33678:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3367c:	add	fp, sp, #28
   33680:	sub	sp, sp, #12
   33684:	mov	r5, r3
   33688:	mov	r6, r2
   3368c:	mov	r7, r1
   33690:	mov	r4, r0
   33694:	ldr	r8, [r1]
   33698:	ldr	sl, [r1, #24]
   3369c:	add	r0, sl, #1
   336a0:	str	r0, [r1, #24]
   336a4:	orr	r2, r3, #8388608	; 0x800000
   336a8:	mov	r0, r6
   336ac:	mov	r1, r4
   336b0:	bl	323c8 <__assert_fail@plt+0x1f7d8>
   336b4:	ldrb	r0, [r6, #4]
   336b8:	mov	r1, #0
   336bc:	ldr	r9, [fp, #12]
   336c0:	cmp	r0, #9
   336c4:	beq	33710 <__assert_fail@plt+0x20b20>
   336c8:	ldr	r0, [fp, #8]
   336cc:	stm	sp, {r0, r9}
   336d0:	mov	r0, r4
   336d4:	mov	r1, r7
   336d8:	mov	r2, r6
   336dc:	mov	r3, r5
   336e0:	bl	323e8 <__assert_fail@plt+0x1f7f8>
   336e4:	mov	r1, r0
   336e8:	ldr	r0, [r9]
   336ec:	mov	r5, #0
   336f0:	cmp	r0, #0
   336f4:	bne	3374c <__assert_fail@plt+0x20b5c>
   336f8:	ldrb	r0, [r6, #4]
   336fc:	cmp	r0, #9
   33700:	bne	33764 <__assert_fail@plt+0x20b74>
   33704:	ldr	r0, [r9]
   33708:	cmp	r0, #0
   3370c:	bne	3374c <__assert_fail@plt+0x20b5c>
   33710:	cmp	sl, #8
   33714:	bhi	33728 <__assert_fail@plt+0x20b38>
   33718:	ldr	r0, [r8, #84]	; 0x54
   3371c:	mov	r2, #1
   33720:	orr	r0, r0, r2, lsl sl
   33724:	str	r0, [r8, #84]	; 0x54
   33728:	mov	r5, #0
   3372c:	mov	r0, r8
   33730:	mov	r2, #0
   33734:	mov	r3, #17
   33738:	bl	32550 <__assert_fail@plt+0x1f960>
   3373c:	cmp	r0, #0
   33740:	beq	33758 <__assert_fail@plt+0x20b68>
   33744:	str	sl, [r0, #20]
   33748:	mov	r5, r0
   3374c:	mov	r0, r5
   33750:	sub	sp, fp, #28
   33754:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33758:	mov	r0, #12
   3375c:	str	r0, [r9]
   33760:	b	3374c <__assert_fail@plt+0x20b5c>
   33764:	cmp	r1, #0
   33768:	beq	33784 <__assert_fail@plt+0x20b94>
   3376c:	movw	r2, #12300	; 0x300c
   33770:	movt	r2, #3
   33774:	mov	r0, r1
   33778:	mov	r1, r2
   3377c:	mov	r2, #0
   33780:	bl	32f94 <__assert_fail@plt+0x203a4>
   33784:	mov	r0, #8
   33788:	str	r0, [r9]
   3378c:	b	3374c <__assert_fail@plt+0x20b5c>
   33790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33794:	add	fp, sp, #28
   33798:	sub	sp, sp, #124	; 0x7c
   3379c:	mov	r8, r3
   337a0:	mov	r6, r2
   337a4:	mov	r9, r1
   337a8:	mov	r7, r0
   337ac:	mov	r5, #0
   337b0:	str	r5, [fp, #-32]	; 0xffffffe0
   337b4:	str	r5, [fp, #-36]	; 0xffffffdc
   337b8:	mov	r0, #32
   337bc:	mov	r1, #1
   337c0:	bl	2c4f4 <__assert_fail@plt+0x19904>
   337c4:	mov	r4, r0
   337c8:	mov	r0, #40	; 0x28
   337cc:	mov	r1, #1
   337d0:	bl	2c4f4 <__assert_fail@plt+0x19904>
   337d4:	mov	sl, r0
   337d8:	cmp	r4, #0
   337dc:	cmpne	sl, #0
   337e0:	beq	33c64 <__assert_fail@plt+0x21074>
   337e4:	mov	r0, r6
   337e8:	mov	r1, r7
   337ec:	mov	r2, r8
   337f0:	bl	342b8 <__assert_fail@plt+0x216c8>
   337f4:	mov	r5, r0
   337f8:	ldrb	r0, [r6, #4]
   337fc:	cmp	r0, #25
   33800:	beq	33814 <__assert_fail@plt+0x20c24>
   33804:	cmp	r0, #2
   33808:	beq	33c5c <__assert_fail@plt+0x2106c>
   3380c:	mov	r0, #0
   33810:	b	33860 <__assert_fail@plt+0x20c70>
   33814:	ldrb	r0, [sl, #16]
   33818:	orr	r0, r0, #1
   3381c:	strb	r0, [sl, #16]
   33820:	tst	r8, #256	; 0x100
   33824:	movne	r0, r4
   33828:	movne	r1, #10
   3382c:	blne	3442c <__assert_fail@plt+0x2183c>
   33830:	ldr	r0, [r7, #40]	; 0x28
   33834:	add	r0, r0, r5
   33838:	str	r0, [r7, #40]	; 0x28
   3383c:	mov	r0, r6
   33840:	mov	r1, r7
   33844:	mov	r2, r8
   33848:	bl	342b8 <__assert_fail@plt+0x216c8>
   3384c:	mov	r5, r0
   33850:	ldrb	r0, [r6, #4]
   33854:	cmp	r0, #2
   33858:	beq	33c5c <__assert_fail@plt+0x2106c>
   3385c:	mov	r0, #1
   33860:	str	r0, [sp, #20]
   33864:	ldr	r0, [r6, #4]
   33868:	uxtb	r1, r0
   3386c:	cmp	r1, #21
   33870:	moveq	r1, #1
   33874:	bfieq	r0, r1, #0, #8
   33878:	streq	r0, [r6, #4]
   3387c:	str	sl, [sp, #24]
   33880:	add	r0, sp, #68	; 0x44
   33884:	str	r0, [fp, #-40]	; 0xffffffd8
   33888:	mov	r0, #3
   3388c:	str	r0, [fp, #-44]	; 0xffffffd4
   33890:	mov	r0, #1
   33894:	str	r8, [sp]
   33898:	str	r0, [sp, #4]
   3389c:	sub	r0, fp, #44	; 0x2c
   338a0:	mov	r1, r7
   338a4:	mov	r2, r6
   338a8:	mov	r3, r5
   338ac:	bl	34450 <__assert_fail@plt+0x21860>
   338b0:	cmp	r0, #0
   338b4:	bne	33c4c <__assert_fail@plt+0x2105c>
   338b8:	mov	r0, #0
   338bc:	str	r0, [sp, #16]
   338c0:	mov	r0, r6
   338c4:	mov	r1, r7
   338c8:	mov	r2, r8
   338cc:	bl	342b8 <__assert_fail@plt+0x216c8>
   338d0:	mov	sl, r0
   338d4:	ldr	r5, [fp, #-44]	; 0xffffffd4
   338d8:	cmp	r5, #2
   338dc:	beq	33a00 <__assert_fail@plt+0x20e10>
   338e0:	cmp	r5, #4
   338e4:	bne	33908 <__assert_fail@plt+0x20d18>
   338e8:	ldr	r0, [r7, #64]	; 0x40
   338ec:	ldr	r1, [fp, #-40]	; 0xffffffd8
   338f0:	stm	sp, {r1, r8}
   338f4:	mov	r1, r4
   338f8:	ldr	r2, [sp, #24]
   338fc:	sub	r3, fp, #36	; 0x24
   33900:	bl	347f0 <__assert_fail@plt+0x21c00>
   33904:	b	33a0c <__assert_fail@plt+0x20e1c>
   33908:	ldrb	r0, [r6, #4]
   3390c:	cmp	r0, #22
   33910:	beq	33920 <__assert_fail@plt+0x20d30>
   33914:	cmp	r0, #2
   33918:	bne	339d8 <__assert_fail@plt+0x20de8>
   3391c:	b	33c48 <__assert_fail@plt+0x21058>
   33920:	ldr	r0, [r7, #40]	; 0x28
   33924:	add	r0, r0, sl
   33928:	str	r0, [r7, #40]	; 0x28
   3392c:	add	r0, sp, #28
   33930:	mov	r1, r7
   33934:	mov	r2, r8
   33938:	bl	342b8 <__assert_fail@plt+0x216c8>
   3393c:	mov	r3, r0
   33940:	ldrb	r0, [sp, #32]
   33944:	cmp	r0, #21
   33948:	beq	339c4 <__assert_fail@plt+0x20dd4>
   3394c:	cmp	r0, #2
   33950:	sub	r1, fp, #52	; 0x34
   33954:	beq	33c48 <__assert_fail@plt+0x21058>
   33958:	mov	r0, #3
   3395c:	str	r0, [fp, #-52]	; 0xffffffcc
   33960:	add	r0, sp, #36	; 0x24
   33964:	str	r0, [fp, #-48]	; 0xffffffd0
   33968:	str	r8, [sp]
   3396c:	mov	r0, #1
   33970:	str	r0, [sp, #4]
   33974:	mov	r0, r1
   33978:	mov	r5, r1
   3397c:	mov	r1, r7
   33980:	add	r2, sp, #28
   33984:	bl	34450 <__assert_fail@plt+0x21860>
   33988:	cmp	r0, #0
   3398c:	bne	33c4c <__assert_fail@plt+0x2105c>
   33990:	mov	r0, r6
   33994:	mov	r1, r7
   33998:	mov	r2, r8
   3399c:	bl	342b8 <__assert_fail@plt+0x216c8>
   339a0:	mov	sl, r0
   339a4:	stm	sp, {r5, r9}
   339a8:	str	r8, [sp, #8]
   339ac:	mov	r0, r4
   339b0:	ldr	r1, [sp, #24]
   339b4:	sub	r2, fp, #32
   339b8:	sub	r3, fp, #44	; 0x2c
   339bc:	bl	34558 <__assert_fail@plt+0x21968>
   339c0:	b	33a0c <__assert_fail@plt+0x20e1c>
   339c4:	ldr	r0, [r7, #40]	; 0x28
   339c8:	sub	r0, r0, sl
   339cc:	str	r0, [r7, #40]	; 0x28
   339d0:	mov	r0, #1
   339d4:	strb	r0, [r6, #4]
   339d8:	add	r0, pc, #0
   339dc:	ldr	pc, [r0, r5, lsl #2]
   339e0:	strdeq	r3, [r3], -r0
   339e4:	andeq	r3, r3, ip, ror #20
   339e8:	andeq	r3, r3, r0, lsl #20
   339ec:	muleq	r3, ip, sl
   339f0:	ldrb	r1, [fp, #-40]	; 0xffffffd8
   339f4:	mov	r0, r4
   339f8:	bl	3442c <__assert_fail@plt+0x2183c>
   339fc:	b	33a1c <__assert_fail@plt+0x20e2c>
   33a00:	ldr	r1, [fp, #-40]	; 0xffffffd8
   33a04:	mov	r0, r4
   33a08:	bl	34778 <__assert_fail@plt+0x21b88>
   33a0c:	ldr	r1, [fp, #8]
   33a10:	str	r0, [r1]
   33a14:	cmp	r0, #0
   33a18:	bne	33c54 <__assert_fail@plt+0x21064>
   33a1c:	ldrb	r0, [r6, #4]
   33a20:	cmp	r0, #21
   33a24:	beq	33ad4 <__assert_fail@plt+0x20ee4>
   33a28:	cmp	r0, #2
   33a2c:	beq	33c48 <__assert_fail@plt+0x21058>
   33a30:	add	r0, sp, #68	; 0x44
   33a34:	str	r0, [fp, #-40]	; 0xffffffd8
   33a38:	mov	r0, #3
   33a3c:	str	r0, [fp, #-44]	; 0xffffffd4
   33a40:	str	r8, [sp]
   33a44:	mov	r0, #0
   33a48:	str	r0, [sp, #4]
   33a4c:	sub	r0, fp, #44	; 0x2c
   33a50:	mov	r1, r7
   33a54:	mov	r2, r6
   33a58:	mov	r3, sl
   33a5c:	bl	34450 <__assert_fail@plt+0x21860>
   33a60:	cmp	r0, #0
   33a64:	beq	338c0 <__assert_fail@plt+0x20cd0>
   33a68:	b	33c4c <__assert_fail@plt+0x2105c>
   33a6c:	ldr	r5, [sp, #24]
   33a70:	ldr	r0, [r5, #20]
   33a74:	ldr	r1, [sp, #16]
   33a78:	cmp	r1, r0
   33a7c:	beq	33aac <__assert_fail@plt+0x20ebc>
   33a80:	ldr	r0, [r5]
   33a84:	ldr	r1, [r5, #20]
   33a88:	add	r2, r1, #1
   33a8c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   33a90:	str	r2, [r5, #20]
   33a94:	str	r3, [r0, r1, lsl #2]
   33a98:	b	33a1c <__assert_fail@plt+0x20e2c>
   33a9c:	ldr	r1, [fp, #-40]	; 0xffffffd8
   33aa0:	mov	r0, r4
   33aa4:	bl	347b4 <__assert_fail@plt+0x21bc4>
   33aa8:	b	33a0c <__assert_fail@plt+0x20e1c>
   33aac:	mov	r1, #1
   33ab0:	orr	r0, r1, r0, lsl #1
   33ab4:	str	r0, [sp, #16]
   33ab8:	lsl	r1, r0, #2
   33abc:	ldr	r0, [r5]
   33ac0:	bl	2f894 <__assert_fail@plt+0x1cca4>
   33ac4:	cmp	r0, #0
   33ac8:	beq	33c84 <__assert_fail@plt+0x21094>
   33acc:	str	r0, [r5]
   33ad0:	b	33a80 <__assert_fail@plt+0x20e90>
   33ad4:	ldr	r0, [r7, #40]	; 0x28
   33ad8:	add	r0, r0, sl
   33adc:	str	r0, [r7, #40]	; 0x28
   33ae0:	ldr	r0, [sp, #20]
   33ae4:	cmp	r0, #0
   33ae8:	movne	r0, r4
   33aec:	blne	3504c <__assert_fail@plt+0x2245c>
   33af0:	ldr	r0, [r9, #92]	; 0x5c
   33af4:	cmp	r0, #2
   33af8:	ldr	sl, [sp, #24]
   33afc:	blt	33b0c <__assert_fail@plt+0x20f1c>
   33b00:	ldr	r1, [r9, #60]	; 0x3c
   33b04:	mov	r0, r4
   33b08:	bl	3506c <__assert_fail@plt+0x2247c>
   33b0c:	ldr	r0, [sl, #20]
   33b10:	cmp	r0, #0
   33b14:	bne	33b3c <__assert_fail@plt+0x20f4c>
   33b18:	ldr	r0, [sl, #24]
   33b1c:	cmp	r0, #0
   33b20:	bne	33b3c <__assert_fail@plt+0x20f4c>
   33b24:	ldr	r0, [sl, #28]
   33b28:	cmp	r0, #0
   33b2c:	bne	33b3c <__assert_fail@plt+0x20f4c>
   33b30:	ldr	r0, [sl, #32]
   33b34:	cmp	r0, #0
   33b38:	beq	33bf8 <__assert_fail@plt+0x21008>
   33b3c:	ldrb	r0, [r9, #88]	; 0x58
   33b40:	orr	r0, r0, #2
   33b44:	strb	r0, [r9, #88]	; 0x58
   33b48:	str	sl, [sp, #68]	; 0x44
   33b4c:	ldr	r7, [sp, #72]	; 0x48
   33b50:	mov	r0, #6
   33b54:	strb	r0, [sp, #72]	; 0x48
   33b58:	mov	r6, #0
   33b5c:	add	r3, sp, #68	; 0x44
   33b60:	mov	r0, r9
   33b64:	mov	r1, #0
   33b68:	mov	r2, #0
   33b6c:	bl	335cc <__assert_fail@plt+0x209dc>
   33b70:	cmp	r0, #0
   33b74:	beq	33c88 <__assert_fail@plt+0x21098>
   33b78:	mov	r5, r0
   33b7c:	bic	r0, r7, #255	; 0xff
   33b80:	ldr	r1, [r4, r6, lsl #2]
   33b84:	cmp	r1, #0
   33b88:	bne	33ba4 <__assert_fail@plt+0x20fb4>
   33b8c:	add	r6, r6, #1
   33b90:	cmp	r6, #8
   33b94:	bne	33b80 <__assert_fail@plt+0x20f90>
   33b98:	mov	r0, r4
   33b9c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   33ba0:	b	33bec <__assert_fail@plt+0x20ffc>
   33ba4:	str	r4, [sp, #68]	; 0x44
   33ba8:	orr	r0, r0, #3
   33bac:	str	r0, [sp, #72]	; 0x48
   33bb0:	add	r3, sp, #68	; 0x44
   33bb4:	mov	r0, r9
   33bb8:	mov	r1, #0
   33bbc:	mov	r2, #0
   33bc0:	bl	335cc <__assert_fail@plt+0x209dc>
   33bc4:	cmp	r0, #0
   33bc8:	beq	33c88 <__assert_fail@plt+0x21098>
   33bcc:	mov	r1, r0
   33bd0:	mov	r0, r9
   33bd4:	mov	r2, r5
   33bd8:	mov	r3, #10
   33bdc:	bl	32550 <__assert_fail@plt+0x1f960>
   33be0:	mov	r5, r0
   33be4:	cmp	r0, #0
   33be8:	beq	33c88 <__assert_fail@plt+0x21098>
   33bec:	mov	r0, r5
   33bf0:	sub	sp, fp, #28
   33bf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33bf8:	ldr	r0, [r9, #92]	; 0x5c
   33bfc:	cmp	r0, #2
   33c00:	blt	33c1c <__assert_fail@plt+0x2102c>
   33c04:	ldr	r0, [sl, #36]	; 0x24
   33c08:	cmp	r0, #0
   33c0c:	bne	33b3c <__assert_fail@plt+0x20f4c>
   33c10:	ldrb	r0, [sl, #16]
   33c14:	tst	r0, #1
   33c18:	bne	33b3c <__assert_fail@plt+0x20f4c>
   33c1c:	mov	r0, sl
   33c20:	bl	3105c <__assert_fail@plt+0x1e46c>
   33c24:	str	r4, [sp, #68]	; 0x44
   33c28:	mov	r0, #3
   33c2c:	strb	r0, [sp, #72]	; 0x48
   33c30:	add	r3, sp, #68	; 0x44
   33c34:	mov	r0, r9
   33c38:	mov	r1, #0
   33c3c:	mov	r2, #0
   33c40:	bl	335cc <__assert_fail@plt+0x209dc>
   33c44:	b	33be0 <__assert_fail@plt+0x20ff0>
   33c48:	mov	r0, #7
   33c4c:	ldr	r1, [fp, #8]
   33c50:	str	r0, [r1]
   33c54:	ldr	sl, [sp, #24]
   33c58:	b	33c94 <__assert_fail@plt+0x210a4>
   33c5c:	mov	r0, #2
   33c60:	b	33c8c <__assert_fail@plt+0x2109c>
   33c64:	mov	r0, r4
   33c68:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   33c6c:	mov	r0, sl
   33c70:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   33c74:	mov	r0, #12
   33c78:	ldr	r1, [fp, #8]
   33c7c:	str	r0, [r1]
   33c80:	b	33bec <__assert_fail@plt+0x20ffc>
   33c84:	mov	sl, r5
   33c88:	mov	r0, #12
   33c8c:	ldr	r1, [fp, #8]
   33c90:	str	r0, [r1]
   33c94:	mov	r0, r4
   33c98:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   33c9c:	mov	r0, sl
   33ca0:	bl	3105c <__assert_fail@plt+0x1e46c>
   33ca4:	mov	r5, #0
   33ca8:	b	33bec <__assert_fail@plt+0x20ffc>
   33cac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   33cb0:	add	fp, sp, #24
   33cb4:	mov	r4, r0
   33cb8:	ldrb	r0, [r0, #88]	; 0x58
   33cbc:	orr	r1, r0, #16
   33cc0:	strb	r1, [r4, #88]	; 0x58
   33cc4:	tst	r0, #8
   33cc8:	bne	33d08 <__assert_fail@plt+0x21118>
   33ccc:	mvn	r1, #-134217727	; 0xf8000001
   33cd0:	mvn	r2, #2013265921	; 0x78000001
   33cd4:	movw	r3, #0
   33cd8:	movt	r3, #1023	; 0x3ff
   33cdc:	mov	r7, #0
   33ce0:	str	r7, [r4, #96]	; 0x60
   33ce4:	str	r3, [r4, #100]	; 0x64
   33ce8:	str	r2, [r4, #104]	; 0x68
   33cec:	str	r1, [r4, #108]	; 0x6c
   33cf0:	tst	r0, #4
   33cf4:	beq	33d14 <__assert_fail@plt+0x21124>
   33cf8:	vmov.i32	q8, #0	; 0x00000000
   33cfc:	add	r0, r4, #112	; 0x70
   33d00:	vst1.32	{d16-d17}, [r0]
   33d04:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   33d08:	mov	r5, #0
   33d0c:	mov	r8, #0
   33d10:	b	33d1c <__assert_fail@plt+0x2112c>
   33d14:	mov	r8, #4
   33d18:	mov	r5, #128	; 0x80
   33d1c:	bl	1286c <__ctype_b_loc@plt>
   33d20:	ldr	r0, [r0]
   33d24:	add	r6, r0, r5, lsl #1
   33d28:	mov	r1, #1
   33d2c:	b	33d44 <__assert_fail@plt+0x21154>
   33d30:	add	r6, r6, #64	; 0x40
   33d34:	add	r8, r8, #1
   33d38:	add	r5, r5, #32
   33d3c:	cmp	r8, #8
   33d40:	beq	33d90 <__assert_fail@plt+0x211a0>
   33d44:	add	r0, r4, r8, lsl #2
   33d48:	add	r2, r0, #96	; 0x60
   33d4c:	mov	r3, #0
   33d50:	mov	r0, r6
   33d54:	b	33d74 <__assert_fail@plt+0x21184>
   33d58:	ldr	r7, [r2]
   33d5c:	orr	r7, r7, r1, lsl r3
   33d60:	str	r7, [r2]
   33d64:	add	r0, r0, #2
   33d68:	add	r3, r3, #1
   33d6c:	cmp	r3, #32
   33d70:	beq	33d30 <__assert_fail@plt+0x21140>
   33d74:	add	r7, r5, r3
   33d78:	cmp	r7, #95	; 0x5f
   33d7c:	beq	33d58 <__assert_fail@plt+0x21168>
   33d80:	ldrh	r7, [r0]
   33d84:	ands	r7, r7, #8
   33d88:	beq	33d64 <__assert_fail@plt+0x21174>
   33d8c:	b	33d58 <__assert_fail@plt+0x21168>
   33d90:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   33d94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33d98:	add	fp, sp, #28
   33d9c:	sub	sp, sp, #20
   33da0:	mov	r8, r3
   33da4:	mov	r6, r2
   33da8:	mov	r4, r1
   33dac:	mov	r9, r0
   33db0:	mov	r7, #0
   33db4:	str	r7, [sp, #16]
   33db8:	mov	r0, #32
   33dbc:	mov	r1, #1
   33dc0:	bl	2c4f4 <__assert_fail@plt+0x19904>
   33dc4:	ldr	r1, [fp, #12]
   33dc8:	cmp	r0, #0
   33dcc:	beq	33f3c <__assert_fail@plt+0x2134c>
   33dd0:	mov	r5, r0
   33dd4:	mov	r0, #40	; 0x28
   33dd8:	mov	r1, #1
   33ddc:	bl	2c4f4 <__assert_fail@plt+0x19904>
   33de0:	cmp	r0, #0
   33de4:	beq	33f48 <__assert_fail@plt+0x21358>
   33de8:	mov	sl, r0
   33dec:	ldr	r1, [fp, #8]
   33df0:	ldrb	r0, [r0, #16]
   33df4:	and	r0, r0, #254	; 0xfe
   33df8:	orr	r0, r0, r1
   33dfc:	strb	r0, [sl, #16]
   33e00:	mov	r7, #0
   33e04:	stm	sp, {r6, r7}
   33e08:	add	r3, sp, #16
   33e0c:	mov	r0, r4
   33e10:	mov	r1, r5
   33e14:	mov	r2, sl
   33e18:	bl	347f0 <__assert_fail@plt+0x21c00>
   33e1c:	cmp	r0, #0
   33e20:	bne	33f64 <__assert_fail@plt+0x21374>
   33e24:	ldrb	r0, [r8]
   33e28:	cmp	r0, #0
   33e2c:	beq	33e4c <__assert_fail@plt+0x2125c>
   33e30:	add	r4, r8, #1
   33e34:	uxtb	r1, r0
   33e38:	mov	r0, r5
   33e3c:	bl	3442c <__assert_fail@plt+0x2183c>
   33e40:	ldrb	r0, [r4], #1
   33e44:	cmp	r0, #0
   33e48:	bne	33e34 <__assert_fail@plt+0x21244>
   33e4c:	ldr	r0, [fp, #8]
   33e50:	cmp	r0, #0
   33e54:	movne	r0, r5
   33e58:	blne	3504c <__assert_fail@plt+0x2245c>
   33e5c:	ldr	r0, [r9, #92]	; 0x5c
   33e60:	cmp	r0, #2
   33e64:	blt	33e74 <__assert_fail@plt+0x21284>
   33e68:	ldr	r1, [r9, #60]	; 0x3c
   33e6c:	mov	r0, r5
   33e70:	bl	3506c <__assert_fail@plt+0x2247c>
   33e74:	str	r5, [sp, #8]
   33e78:	ldr	r4, [sp, #12]
   33e7c:	bfc	r4, #0, #23
   33e80:	orr	r0, r4, #3
   33e84:	str	r0, [sp, #12]
   33e88:	mov	r7, #0
   33e8c:	add	r3, sp, #8
   33e90:	mov	r0, r9
   33e94:	mov	r1, #0
   33e98:	mov	r2, #0
   33e9c:	bl	335cc <__assert_fail@plt+0x209dc>
   33ea0:	cmp	r0, #0
   33ea4:	beq	33f20 <__assert_fail@plt+0x21330>
   33ea8:	mov	r6, r0
   33eac:	ldr	r0, [r9, #92]	; 0x5c
   33eb0:	cmp	r0, #2
   33eb4:	blt	33f08 <__assert_fail@plt+0x21318>
   33eb8:	str	sl, [sp, #8]
   33ebc:	orr	r0, r4, #6
   33ec0:	str	r0, [sp, #12]
   33ec4:	ldrb	r0, [r9, #88]	; 0x58
   33ec8:	orr	r0, r0, #2
   33ecc:	strb	r0, [r9, #88]	; 0x58
   33ed0:	add	r3, sp, #8
   33ed4:	mov	r0, r9
   33ed8:	mov	r1, #0
   33edc:	mov	r2, #0
   33ee0:	bl	335cc <__assert_fail@plt+0x209dc>
   33ee4:	cmp	r0, #0
   33ee8:	beq	33f20 <__assert_fail@plt+0x21330>
   33eec:	mov	r2, r0
   33ef0:	mov	r0, r9
   33ef4:	mov	r1, r6
   33ef8:	mov	r3, #10
   33efc:	bl	32550 <__assert_fail@plt+0x1f960>
   33f00:	mov	r7, r0
   33f04:	b	33f14 <__assert_fail@plt+0x21324>
   33f08:	mov	r0, sl
   33f0c:	bl	3105c <__assert_fail@plt+0x1e46c>
   33f10:	mov	r7, r6
   33f14:	mov	r0, r7
   33f18:	sub	sp, fp, #28
   33f1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33f20:	mov	r0, r5
   33f24:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   33f28:	mov	r0, sl
   33f2c:	bl	3105c <__assert_fail@plt+0x1e46c>
   33f30:	mov	r0, #12
   33f34:	ldr	r1, [fp, #12]
   33f38:	b	33f40 <__assert_fail@plt+0x21350>
   33f3c:	mov	r0, #12
   33f40:	str	r0, [r1]
   33f44:	b	33f14 <__assert_fail@plt+0x21324>
   33f48:	mov	r0, r5
   33f4c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   33f50:	mov	r0, #12
   33f54:	ldr	r1, [fp, #12]
   33f58:	str	r0, [r1]
   33f5c:	mov	r7, #0
   33f60:	b	33f14 <__assert_fail@plt+0x21324>
   33f64:	mov	r6, r0
   33f68:	mov	r0, r5
   33f6c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   33f70:	mov	r0, sl
   33f74:	bl	3105c <__assert_fail@plt+0x1e46c>
   33f78:	ldr	r0, [fp, #12]
   33f7c:	str	r6, [r0]
   33f80:	b	33f14 <__assert_fail@plt+0x21324>
   33f84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33f88:	add	fp, sp, #28
   33f8c:	sub	sp, sp, #20
   33f90:	mov	r7, r3
   33f94:	mov	r5, r2
   33f98:	mov	r8, r1
   33f9c:	mov	r4, r0
   33fa0:	ldrb	r0, [r3, #4]
   33fa4:	ldr	r1, [fp, #12]
   33fa8:	str	r1, [sp, #16]
   33fac:	ldr	sl, [fp, #8]
   33fb0:	cmp	r0, #23
   33fb4:	bne	3400c <__assert_fail@plt+0x2141c>
   33fb8:	ldr	r0, [r7]
   33fbc:	str	r0, [sp, #12]
   33fc0:	ldr	r0, [r7, #4]
   33fc4:	str	r0, [sp, #8]
   33fc8:	ldr	r0, [r8, #40]	; 0x28
   33fcc:	str	r0, [sp, #4]
   33fd0:	mov	r0, r8
   33fd4:	mov	r1, r7
   33fd8:	mov	r2, sl
   33fdc:	bl	352bc <__assert_fail@plt+0x226cc>
   33fe0:	cmn	r0, #1
   33fe4:	bne	34028 <__assert_fail@plt+0x21438>
   33fe8:	ldrb	r0, [r7, #4]
   33fec:	cmp	r0, #1
   33ff0:	bne	34004 <__assert_fail@plt+0x21414>
   33ff4:	ldrb	r0, [r7]
   33ff8:	mov	r6, #0
   33ffc:	cmp	r0, #44	; 0x2c
   34000:	beq	34034 <__assert_fail@plt+0x21444>
   34004:	mov	r0, #10
   34008:	b	3427c <__assert_fail@plt+0x2168c>
   3400c:	mvn	r9, #0
   34010:	cmp	r0, #19
   34014:	movweq	r9, #1
   34018:	sub	r0, r0, #18
   3401c:	clz	r0, r0
   34020:	lsr	r6, r0, #5
   34024:	b	340a4 <__assert_fail@plt+0x214b4>
   34028:	mov	r6, r0
   3402c:	cmn	r0, #2
   34030:	beq	341ac <__assert_fail@plt+0x215bc>
   34034:	ldrb	r0, [r7, #4]
   34038:	cmp	r0, #24
   3403c:	mov	r9, r6
   34040:	beq	34074 <__assert_fail@plt+0x21484>
   34044:	cmp	r0, #1
   34048:	bne	341ac <__assert_fail@plt+0x215bc>
   3404c:	ldrb	r0, [r7]
   34050:	cmp	r0, #44	; 0x2c
   34054:	bne	341ac <__assert_fail@plt+0x215bc>
   34058:	mov	r0, r8
   3405c:	mov	r1, r7
   34060:	mov	r2, sl
   34064:	bl	352bc <__assert_fail@plt+0x226cc>
   34068:	mov	r9, r0
   3406c:	cmn	r0, #2
   34070:	beq	341ac <__assert_fail@plt+0x215bc>
   34074:	cmn	r9, #1
   34078:	beq	34084 <__assert_fail@plt+0x21494>
   3407c:	cmp	r6, r9
   34080:	bgt	34004 <__assert_fail@plt+0x21414>
   34084:	ldrb	r0, [r7, #4]
   34088:	cmp	r0, #24
   3408c:	bne	34004 <__assert_fail@plt+0x21414>
   34090:	cmn	r9, #1
   34094:	mov	r0, r9
   34098:	moveq	r0, r6
   3409c:	cmp	r0, #32768	; 0x8000
   340a0:	bge	34294 <__assert_fail@plt+0x216a4>
   340a4:	mov	r0, r7
   340a8:	mov	r1, r8
   340ac:	mov	r2, sl
   340b0:	bl	323c8 <__assert_fail@plt+0x1f7d8>
   340b4:	cmp	r4, #0
   340b8:	beq	34284 <__assert_fail@plt+0x21694>
   340bc:	orrs	r0, r9, r6
   340c0:	beq	341e0 <__assert_fail@plt+0x215f0>
   340c4:	mov	r8, #0
   340c8:	cmp	r6, #1
   340cc:	bge	341f8 <__assert_fail@plt+0x21608>
   340d0:	ldrb	r0, [r4, #24]
   340d4:	cmp	r0, #17
   340d8:	bne	340f0 <__assert_fail@plt+0x21500>
   340dc:	ldr	r2, [r4, #20]
   340e0:	movw	r1, #21568	; 0x5440
   340e4:	movt	r1, #3
   340e8:	mov	r0, r4
   340ec:	bl	32f94 <__assert_fail@plt+0x203a4>
   340f0:	mov	r3, #10
   340f4:	cmn	r9, #1
   340f8:	movweq	r3, #11
   340fc:	mov	r0, r5
   34100:	mov	r1, r4
   34104:	mov	r2, #0
   34108:	bl	32550 <__assert_fail@plt+0x1f960>
   3410c:	cmp	r0, #0
   34110:	beq	34278 <__assert_fail@plt+0x21688>
   34114:	mov	r7, r0
   34118:	add	r0, r6, #2
   3411c:	cmp	r0, r9
   34120:	ble	34148 <__assert_fail@plt+0x21558>
   34124:	cmp	r8, #0
   34128:	beq	341d8 <__assert_fail@plt+0x215e8>
   3412c:	mov	r0, r5
   34130:	mov	r1, r8
   34134:	mov	r2, r7
   34138:	mov	r3, #16
   3413c:	sub	sp, fp, #28
   34140:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34144:	b	32550 <__assert_fail@plt+0x1f960>
   34148:	add	r6, r6, #1
   3414c:	mov	r0, r4
   34150:	mov	r1, r5
   34154:	bl	35364 <__assert_fail@plt+0x22774>
   34158:	mov	r4, r0
   3415c:	mov	r0, r5
   34160:	mov	r1, r7
   34164:	mov	r2, r4
   34168:	mov	r3, #16
   3416c:	bl	32550 <__assert_fail@plt+0x1f960>
   34170:	cmp	r4, #0
   34174:	movne	r1, r0
   34178:	cmpne	r0, #0
   3417c:	beq	34278 <__assert_fail@plt+0x21688>
   34180:	mov	r0, r5
   34184:	mov	r2, #0
   34188:	mov	r3, #10
   3418c:	bl	32550 <__assert_fail@plt+0x1f960>
   34190:	cmp	r0, #0
   34194:	beq	34278 <__assert_fail@plt+0x21688>
   34198:	mov	r7, r0
   3419c:	add	r6, r6, #1
   341a0:	cmp	r6, r9
   341a4:	blt	3414c <__assert_fail@plt+0x2155c>
   341a8:	b	34124 <__assert_fail@plt+0x21534>
   341ac:	tst	sl, #2097152	; 0x200000
   341b0:	beq	3429c <__assert_fail@plt+0x216ac>
   341b4:	ldr	r0, [sp, #4]
   341b8:	str	r0, [r8, #40]	; 0x28
   341bc:	ldr	r0, [sp, #12]
   341c0:	str	r0, [r7]
   341c4:	ldr	r0, [sp, #8]
   341c8:	str	r0, [r7, #4]
   341cc:	mov	r0, #1
   341d0:	strb	r0, [r7, #4]
   341d4:	b	34288 <__assert_fail@plt+0x21698>
   341d8:	mov	r4, r7
   341dc:	b	34288 <__assert_fail@plt+0x21698>
   341e0:	movw	r1, #12300	; 0x300c
   341e4:	movt	r1, #3
   341e8:	mov	r0, r4
   341ec:	mov	r2, #0
   341f0:	bl	32f94 <__assert_fail@plt+0x203a4>
   341f4:	b	34284 <__assert_fail@plt+0x21694>
   341f8:	bne	34224 <__assert_fail@plt+0x21634>
   341fc:	mov	r8, r4
   34200:	cmp	r6, r9
   34204:	beq	34270 <__assert_fail@plt+0x21680>
   34208:	mov	r0, r4
   3420c:	mov	r1, r5
   34210:	bl	35364 <__assert_fail@plt+0x22774>
   34214:	mov	r4, r0
   34218:	cmp	r0, #0
   3421c:	bne	340d0 <__assert_fail@plt+0x214e0>
   34220:	b	34278 <__assert_fail@plt+0x21688>
   34224:	sub	r7, r6, #1
   34228:	mov	r8, r4
   3422c:	mov	r0, r4
   34230:	mov	r1, r5
   34234:	bl	35364 <__assert_fail@plt+0x22774>
   34238:	mov	r4, r0
   3423c:	mov	r0, r5
   34240:	mov	r1, r8
   34244:	mov	r2, r4
   34248:	mov	r3, #16
   3424c:	bl	32550 <__assert_fail@plt+0x1f960>
   34250:	cmp	r4, #0
   34254:	movne	r8, r0
   34258:	cmpne	r0, #0
   3425c:	beq	34278 <__assert_fail@plt+0x21688>
   34260:	subs	r7, r7, #1
   34264:	bne	3422c <__assert_fail@plt+0x2163c>
   34268:	cmp	r6, r9
   3426c:	bne	34208 <__assert_fail@plt+0x21618>
   34270:	mov	r4, r8
   34274:	b	34288 <__assert_fail@plt+0x21698>
   34278:	mov	r0, #12
   3427c:	ldr	r1, [sp, #16]
   34280:	str	r0, [r1]
   34284:	mov	r4, #0
   34288:	mov	r0, r4
   3428c:	sub	sp, fp, #28
   34290:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34294:	mov	r0, #15
   34298:	b	3427c <__assert_fail@plt+0x2168c>
   3429c:	ldrb	r0, [r7, #4]
   342a0:	mov	r1, #10
   342a4:	cmp	r0, #2
   342a8:	movweq	r1, #9
   342ac:	ldr	r0, [sp, #16]
   342b0:	str	r1, [r0]
   342b4:	b	34284 <__assert_fail@plt+0x21694>
   342b8:	push	{r4, sl, fp, lr}
   342bc:	add	fp, sp, #8
   342c0:	ldr	ip, [r1, #40]	; 0x28
   342c4:	ldr	r3, [r1, #56]	; 0x38
   342c8:	cmp	r3, ip
   342cc:	ble	3434c <__assert_fail@plt+0x2175c>
   342d0:	ldr	r3, [r1, #4]
   342d4:	ldrb	ip, [r3, ip]
   342d8:	strb	ip, [r0]
   342dc:	ldr	r3, [r1, #80]	; 0x50
   342e0:	cmp	r3, #2
   342e4:	blt	34308 <__assert_fail@plt+0x21718>
   342e8:	ldr	lr, [r1, #28]
   342ec:	ldr	r4, [r1, #40]	; 0x28
   342f0:	cmp	r4, lr
   342f4:	beq	34308 <__assert_fail@plt+0x21718>
   342f8:	ldr	r3, [r1, #8]
   342fc:	ldr	r3, [r3, r4, lsl #2]
   34300:	cmn	r3, #1
   34304:	beq	343f8 <__assert_fail@plt+0x21808>
   34308:	tst	r2, #1
   3430c:	beq	34360 <__assert_fail@plt+0x21770>
   34310:	cmp	ip, #92	; 0x5c
   34314:	bne	34360 <__assert_fail@plt+0x21770>
   34318:	ldr	r2, [r1, #40]	; 0x28
   3431c:	ldr	r3, [r1, #48]	; 0x30
   34320:	add	r2, r2, #1
   34324:	cmp	r2, r3
   34328:	bge	343f8 <__assert_fail@plt+0x21808>
   3432c:	str	r2, [r1, #40]	; 0x28
   34330:	ldr	r1, [r1, #4]
   34334:	ldrb	r2, [r1, r2]
   34338:	mov	r1, #1
   3433c:	strb	r1, [r0, #4]
   34340:	strb	r2, [r0]
   34344:	mov	r0, r1
   34348:	pop	{r4, sl, fp, pc}
   3434c:	mov	r1, #2
   34350:	strb	r1, [r0, #4]
   34354:	mov	r1, #0
   34358:	mov	r0, r1
   3435c:	pop	{r4, sl, fp, pc}
   34360:	cmp	ip, #92	; 0x5c
   34364:	bgt	343b8 <__assert_fail@plt+0x217c8>
   34368:	cmp	ip, #45	; 0x2d
   3436c:	beq	343d0 <__assert_fail@plt+0x217e0>
   34370:	cmp	ip, #91	; 0x5b
   34374:	bne	343f8 <__assert_fail@plt+0x21808>
   34378:	ldr	r3, [r1, #40]	; 0x28
   3437c:	ldr	r4, [r1, #48]	; 0x30
   34380:	add	r3, r3, #1
   34384:	cmp	r3, r4
   34388:	bge	343ec <__assert_fail@plt+0x217fc>
   3438c:	ldr	r1, [r1, #4]
   34390:	ldrb	r1, [r1, r3]
   34394:	strb	r1, [r0]
   34398:	cmp	r1, #61	; 0x3d
   3439c:	beq	34408 <__assert_fail@plt+0x21818>
   343a0:	cmp	r1, #58	; 0x3a
   343a4:	beq	34410 <__assert_fail@plt+0x21820>
   343a8:	cmp	r1, #46	; 0x2e
   343ac:	bne	343f4 <__assert_fail@plt+0x21804>
   343b0:	mov	r1, #26
   343b4:	b	3441c <__assert_fail@plt+0x2182c>
   343b8:	cmp	ip, #93	; 0x5d
   343bc:	beq	343d8 <__assert_fail@plt+0x217e8>
   343c0:	cmp	ip, #94	; 0x5e
   343c4:	bne	343f8 <__assert_fail@plt+0x21808>
   343c8:	mov	r1, #25
   343cc:	b	343dc <__assert_fail@plt+0x217ec>
   343d0:	mov	r1, #22
   343d4:	b	343dc <__assert_fail@plt+0x217ec>
   343d8:	mov	r1, #21
   343dc:	strb	r1, [r0, #4]
   343e0:	mov	r1, #1
   343e4:	mov	r0, r1
   343e8:	pop	{r4, sl, fp, pc}
   343ec:	mov	r1, #0
   343f0:	strb	r1, [r0]
   343f4:	strb	ip, [r0]
   343f8:	mov	r1, #1
   343fc:	strb	r1, [r0, #4]
   34400:	mov	r0, r1
   34404:	pop	{r4, sl, fp, pc}
   34408:	mov	r1, #28
   3440c:	b	3441c <__assert_fail@plt+0x2182c>
   34410:	tst	r2, #4
   34414:	beq	343f4 <__assert_fail@plt+0x21804>
   34418:	mov	r1, #30
   3441c:	strb	r1, [r0, #4]
   34420:	mov	r1, #2
   34424:	mov	r0, r1
   34428:	pop	{r4, sl, fp, pc}
   3442c:	asr	r2, r1, #31
   34430:	add	r2, r1, r2, lsr #27
   34434:	asr	r2, r2, #5
   34438:	ldr	ip, [r0, r2, lsl #2]
   3443c:	and	r1, r1, #31
   34440:	mov	r3, #1
   34444:	orr	r1, ip, r3, lsl r1
   34448:	str	r1, [r0, r2, lsl #2]
   3444c:	bx	lr
   34450:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   34454:	add	fp, sp, #24
   34458:	sub	sp, sp, #8
   3445c:	mov	r5, r3
   34460:	mov	r8, r2
   34464:	mov	r6, r1
   34468:	mov	r9, r0
   3446c:	ldr	r7, [r1, #40]	; 0x28
   34470:	mov	r0, r1
   34474:	mov	r1, r7
   34478:	bl	35090 <__assert_fail@plt+0x224a0>
   3447c:	cmp	r0, #2
   34480:	blt	344b8 <__assert_fail@plt+0x218c8>
   34484:	mov	r4, r0
   34488:	mov	r0, #1
   3448c:	str	r0, [r9]
   34490:	mov	r0, r6
   34494:	mov	r1, r7
   34498:	bl	32dfc <__assert_fail@plt+0x2020c>
   3449c:	str	r0, [r9, #4]
   344a0:	ldr	r0, [r6, #40]	; 0x28
   344a4:	add	r0, r0, r4
   344a8:	str	r0, [r6, #40]	; 0x28
   344ac:	mov	r0, #0
   344b0:	sub	sp, fp, #24
   344b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   344b8:	ldr	r0, [fp, #12]
   344bc:	ldr	r2, [fp, #8]
   344c0:	add	r1, r7, r5
   344c4:	str	r1, [r6, #40]	; 0x28
   344c8:	ldrb	r1, [r8, #4]
   344cc:	sub	r1, r1, #22
   344d0:	cmp	r1, #8
   344d4:	bhi	34540 <__assert_fail@plt+0x21950>
   344d8:	add	r3, pc, #0
   344dc:	ldr	pc, [r3, r1, lsl #2]
   344e0:	andeq	r4, r3, ip, lsl r5
   344e4:	andeq	r4, r3, r0, asr #10
   344e8:	andeq	r4, r3, r0, asr #10
   344ec:	andeq	r4, r3, r0, asr #10
   344f0:	andeq	r4, r3, r4, lsl #10
   344f4:	andeq	r4, r3, r0, asr #10
   344f8:	andeq	r4, r3, r4, lsl #10
   344fc:	andeq	r4, r3, r0, asr #10
   34500:	andeq	r4, r3, r4, lsl #10
   34504:	mov	r0, r9
   34508:	mov	r1, r6
   3450c:	mov	r2, r8
   34510:	sub	sp, fp, #24
   34514:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   34518:	b	350ec <__assert_fail@plt+0x224fc>
   3451c:	cmp	r0, #0
   34520:	bne	34540 <__assert_fail@plt+0x21950>
   34524:	mov	r0, sp
   34528:	mov	r1, r6
   3452c:	bl	342b8 <__assert_fail@plt+0x216c8>
   34530:	ldrb	r1, [sp, #4]
   34534:	mov	r0, #11
   34538:	cmp	r1, #21
   3453c:	bne	34550 <__assert_fail@plt+0x21960>
   34540:	mov	r0, #0
   34544:	str	r0, [r9]
   34548:	ldrb	r1, [r8]
   3454c:	strb	r1, [r9, #4]
   34550:	sub	sp, fp, #24
   34554:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   34558:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3455c:	add	fp, sp, #28
   34560:	sub	sp, sp, #12
   34564:	mov	sl, r0
   34568:	ldr	r7, [r3]
   3456c:	mov	r0, #11
   34570:	cmp	r7, #2
   34574:	cmpne	r7, #4
   34578:	beq	34590 <__assert_fail@plt+0x219a0>
   3457c:	ldr	r8, [fp, #8]
   34580:	ldr	r5, [r8]
   34584:	cmp	r5, #2
   34588:	cmpne	r5, #4
   3458c:	bne	34598 <__assert_fail@plt+0x219a8>
   34590:	sub	sp, fp, #28
   34594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34598:	mov	r6, r3
   3459c:	mov	r9, r2
   345a0:	mov	r4, r1
   345a4:	cmp	r7, #3
   345a8:	bne	345bc <__assert_fail@plt+0x219cc>
   345ac:	ldr	r0, [r6, #4]
   345b0:	bl	128c0 <strlen@plt>
   345b4:	cmp	r0, #1
   345b8:	bhi	34700 <__assert_fail@plt+0x21b10>
   345bc:	cmp	r5, #3
   345c0:	bne	345d4 <__assert_fail@plt+0x219e4>
   345c4:	ldr	r0, [r8, #4]
   345c8:	bl	128c0 <strlen@plt>
   345cc:	cmp	r0, #1
   345d0:	bhi	34700 <__assert_fail@plt+0x21b10>
   345d4:	cmp	r7, #3
   345d8:	beq	345ec <__assert_fail@plt+0x219fc>
   345dc:	mov	r0, #0
   345e0:	cmp	r7, #0
   345e4:	ldrbeq	r0, [r6, #4]
   345e8:	b	345f4 <__assert_fail@plt+0x21a04>
   345ec:	ldr	r0, [r6, #4]
   345f0:	ldrb	r0, [r0]
   345f4:	stmib	sp, {r4, r9}
   345f8:	cmp	r5, #3
   345fc:	beq	34610 <__assert_fail@plt+0x21a20>
   34600:	mov	r9, #0
   34604:	cmp	r5, #0
   34608:	ldrbeq	r9, [r8, #4]
   3460c:	b	34618 <__assert_fail@plt+0x21a28>
   34610:	ldr	r1, [r8, #4]
   34614:	ldrb	r9, [r1]
   34618:	ldr	r4, [fp, #12]
   3461c:	cmp	r7, #3
   34620:	cmpne	r7, #0
   34624:	bne	34638 <__assert_fail@plt+0x21a48>
   34628:	mov	r1, r4
   3462c:	bl	352ac <__assert_fail@plt+0x226bc>
   34630:	mov	r7, r0
   34634:	b	3463c <__assert_fail@plt+0x21a4c>
   34638:	ldr	r7, [r6, #4]
   3463c:	ldr	r0, [r8]
   34640:	cmp	r0, #3
   34644:	cmpne	r0, #0
   34648:	bne	34660 <__assert_fail@plt+0x21a70>
   3464c:	mov	r0, r9
   34650:	mov	r1, r4
   34654:	bl	352ac <__assert_fail@plt+0x226bc>
   34658:	mov	r6, r0
   3465c:	b	34664 <__assert_fail@plt+0x21a74>
   34660:	ldr	r6, [r8, #4]
   34664:	ldr	r1, [sp, #8]
   34668:	ldr	r5, [sp, #4]
   3466c:	mov	r0, #3
   34670:	cmn	r7, #1
   34674:	cmnne	r6, #1
   34678:	beq	34590 <__assert_fail@plt+0x219a0>
   3467c:	ldr	r0, [fp, #16]
   34680:	tst	r0, #65536	; 0x10000
   34684:	beq	34694 <__assert_fail@plt+0x21aa4>
   34688:	cmp	r7, r6
   3468c:	mov	r0, #11
   34690:	bhi	34590 <__assert_fail@plt+0x219a0>
   34694:	ldr	r0, [r4, #92]	; 0x5c
   34698:	cmp	r0, #2
   3469c:	blt	346d0 <__assert_fail@plt+0x21ae0>
   346a0:	ldr	r0, [r5, #32]
   346a4:	ldr	r1, [r1]
   346a8:	cmp	r1, r0
   346ac:	beq	3470c <__assert_fail@plt+0x21b1c>
   346b0:	ldr	r0, [r5, #4]
   346b4:	ldr	r1, [r5, #32]
   346b8:	str	r7, [r0, r1, lsl #2]
   346bc:	ldr	r0, [r5, #8]
   346c0:	ldr	r1, [r5, #32]
   346c4:	add	r2, r1, #1
   346c8:	str	r2, [r5, #32]
   346cc:	str	r6, [r0, r1, lsl #2]
   346d0:	mov	r5, #0
   346d4:	cmp	r7, r5
   346d8:	cmpls	r5, r6
   346dc:	movls	r0, sl
   346e0:	movls	r1, r5
   346e4:	blls	3442c <__assert_fail@plt+0x2183c>
   346e8:	add	r5, r5, #1
   346ec:	cmp	r5, #256	; 0x100
   346f0:	bne	346d4 <__assert_fail@plt+0x21ae4>
   346f4:	mov	r0, #0
   346f8:	sub	sp, fp, #28
   346fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34700:	mov	r0, #3
   34704:	sub	sp, fp, #28
   34708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3470c:	mov	r1, #1
   34710:	orr	r8, r1, r0, lsl #1
   34714:	lsl	r4, r8, #2
   34718:	ldr	r0, [r5, #4]
   3471c:	mov	r1, r4
   34720:	bl	2f894 <__assert_fail@plt+0x1cca4>
   34724:	mov	r9, r0
   34728:	ldr	r0, [r5, #8]
   3472c:	mov	r1, r4
   34730:	bl	2f894 <__assert_fail@plt+0x1cca4>
   34734:	mov	r4, r0
   34738:	cmp	r9, #0
   3473c:	cmpne	r4, #0
   34740:	bne	34760 <__assert_fail@plt+0x21b70>
   34744:	mov	r0, r9
   34748:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   3474c:	mov	r0, r4
   34750:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   34754:	mov	r0, #12
   34758:	sub	sp, fp, #28
   3475c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34760:	ldr	r5, [sp, #4]
   34764:	str	r9, [r5, #4]
   34768:	str	r4, [r5, #8]
   3476c:	ldr	r0, [sp, #8]
   34770:	str	r8, [r0]
   34774:	b	346b0 <__assert_fail@plt+0x21ac0>
   34778:	push	{r4, r5, fp, lr}
   3477c:	add	fp, sp, #8
   34780:	mov	r5, r1
   34784:	mov	r4, r0
   34788:	mov	r0, r1
   3478c:	bl	128c0 <strlen@plt>
   34790:	cmp	r0, #1
   34794:	bne	347ac <__assert_fail@plt+0x21bbc>
   34798:	ldrb	r1, [r5]
   3479c:	mov	r0, r4
   347a0:	bl	3442c <__assert_fail@plt+0x2183c>
   347a4:	mov	r0, #0
   347a8:	pop	{r4, r5, fp, pc}
   347ac:	mov	r0, #3
   347b0:	pop	{r4, r5, fp, pc}
   347b4:	push	{r4, r5, fp, lr}
   347b8:	add	fp, sp, #8
   347bc:	mov	r5, r1
   347c0:	mov	r4, r0
   347c4:	mov	r0, r1
   347c8:	bl	128c0 <strlen@plt>
   347cc:	cmp	r0, #1
   347d0:	bne	347e8 <__assert_fail@plt+0x21bf8>
   347d4:	ldrb	r1, [r5]
   347d8:	mov	r0, r4
   347dc:	bl	3442c <__assert_fail@plt+0x2183c>
   347e0:	mov	r0, #0
   347e4:	pop	{r4, r5, fp, pc}
   347e8:	mov	r0, #3
   347ec:	pop	{r4, r5, fp, pc}
   347f0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   347f4:	add	fp, sp, #24
   347f8:	mov	r5, r3
   347fc:	mov	r7, r2
   34800:	mov	r4, r1
   34804:	mov	r8, r0
   34808:	ldr	r6, [fp, #8]
   3480c:	ldrb	r0, [fp, #14]
   34810:	tst	r0, #64	; 0x40
   34814:	beq	34850 <__assert_fail@plt+0x21c60>
   34818:	movw	r1, #19540	; 0x4c54
   3481c:	movt	r1, #4
   34820:	mov	r0, r6
   34824:	bl	124f4 <strcmp@plt>
   34828:	cmp	r0, #0
   3482c:	beq	34848 <__assert_fail@plt+0x21c58>
   34830:	movw	r1, #19546	; 0x4c5a
   34834:	movt	r1, #4
   34838:	mov	r0, r6
   3483c:	bl	124f4 <strcmp@plt>
   34840:	cmp	r0, #0
   34844:	bne	34850 <__assert_fail@plt+0x21c60>
   34848:	movw	r6, #19552	; 0x4c60
   3484c:	movt	r6, #4
   34850:	ldr	r0, [r7, #36]	; 0x24
   34854:	ldr	r1, [r5]
   34858:	cmp	r1, r0
   3485c:	beq	34d2c <__assert_fail@plt+0x2213c>
   34860:	mov	r0, r6
   34864:	bl	12494 <wctype@plt>
   34868:	ldr	r1, [r7, #12]
   3486c:	ldr	r2, [r7, #36]	; 0x24
   34870:	add	r3, r2, #1
   34874:	str	r3, [r7, #36]	; 0x24
   34878:	str	r0, [r1, r2, lsl #2]
   3487c:	movw	r1, #19526	; 0x4c46
   34880:	movt	r1, #4
   34884:	mov	r0, r6
   34888:	bl	124f4 <strcmp@plt>
   3488c:	cmp	r0, #0
   34890:	beq	349f0 <__assert_fail@plt+0x21e00>
   34894:	movw	r1, #19558	; 0x4c66
   34898:	movt	r1, #4
   3489c:	mov	r0, r6
   348a0:	bl	124f4 <strcmp@plt>
   348a4:	cmp	r0, #0
   348a8:	beq	34a38 <__assert_fail@plt+0x21e48>
   348ac:	movw	r1, #19546	; 0x4c5a
   348b0:	movt	r1, #4
   348b4:	mov	r0, r6
   348b8:	bl	124f4 <strcmp@plt>
   348bc:	cmp	r0, #0
   348c0:	beq	34a80 <__assert_fail@plt+0x21e90>
   348c4:	movw	r1, #19534	; 0x4c4e
   348c8:	movt	r1, #4
   348cc:	mov	r0, r6
   348d0:	bl	124f4 <strcmp@plt>
   348d4:	cmp	r0, #0
   348d8:	beq	34acc <__assert_fail@plt+0x21edc>
   348dc:	movw	r1, #19552	; 0x4c60
   348e0:	movt	r1, #4
   348e4:	mov	r0, r6
   348e8:	bl	124f4 <strcmp@plt>
   348ec:	cmp	r0, #0
   348f0:	beq	34b18 <__assert_fail@plt+0x21f28>
   348f4:	movw	r1, #19583	; 0x4c7f
   348f8:	movt	r1, #4
   348fc:	mov	r0, r6
   34900:	bl	124f4 <strcmp@plt>
   34904:	cmp	r0, #0
   34908:	beq	34b64 <__assert_fail@plt+0x21f74>
   3490c:	movw	r1, #63760	; 0xf910
   34910:	movt	r1, #3
   34914:	mov	r0, r6
   34918:	bl	124f4 <strcmp@plt>
   3491c:	cmp	r0, #0
   34920:	beq	34bb0 <__assert_fail@plt+0x21fc0>
   34924:	movw	r1, #19540	; 0x4c54
   34928:	movt	r1, #4
   3492c:	mov	r0, r6
   34930:	bl	124f4 <strcmp@plt>
   34934:	cmp	r0, #0
   34938:	beq	34bfc <__assert_fail@plt+0x2200c>
   3493c:	movw	r1, #19564	; 0x4c6c
   34940:	movt	r1, #4
   34944:	mov	r0, r6
   34948:	bl	124f4 <strcmp@plt>
   3494c:	cmp	r0, #0
   34950:	beq	34c48 <__assert_fail@plt+0x22058>
   34954:	movw	r1, #19570	; 0x4c72
   34958:	movt	r1, #4
   3495c:	mov	r0, r6
   34960:	bl	124f4 <strcmp@plt>
   34964:	cmp	r0, #0
   34968:	beq	34c90 <__assert_fail@plt+0x220a0>
   3496c:	movw	r1, #19576	; 0x4c78
   34970:	movt	r1, #4
   34974:	mov	r0, r6
   34978:	bl	124f4 <strcmp@plt>
   3497c:	cmp	r0, #0
   34980:	beq	34ce4 <__assert_fail@plt+0x220f4>
   34984:	movw	r1, #19582	; 0x4c7e
   34988:	movt	r1, #4
   3498c:	mov	r0, r6
   34990:	bl	124f4 <strcmp@plt>
   34994:	mov	r1, r0
   34998:	mov	r0, #4
   3499c:	cmp	r1, #0
   349a0:	bne	34d28 <__assert_fail@plt+0x22138>
   349a4:	bl	1286c <__ctype_b_loc@plt>
   349a8:	mov	r6, r0
   349ac:	cmp	r8, #0
   349b0:	bne	35004 <__assert_fail@plt+0x22414>
   349b4:	mov	r7, #0
   349b8:	mov	r5, #0
   349bc:	ldr	r0, [r6]
   349c0:	add	r0, r0, r7
   349c4:	ldrb	r0, [r0, #1]
   349c8:	tst	r0, #16
   349cc:	movne	r0, r4
   349d0:	movne	r1, r5
   349d4:	blne	3442c <__assert_fail@plt+0x2183c>
   349d8:	add	r7, r7, #2
   349dc:	add	r5, r5, #1
   349e0:	mov	r0, #0
   349e4:	cmp	r5, #256	; 0x100
   349e8:	bne	349bc <__assert_fail@plt+0x21dcc>
   349ec:	b	34d28 <__assert_fail@plt+0x22138>
   349f0:	bl	1286c <__ctype_b_loc@plt>
   349f4:	mov	r6, r0
   349f8:	cmp	r8, #0
   349fc:	bne	34d54 <__assert_fail@plt+0x22164>
   34a00:	mov	r7, #0
   34a04:	mov	r5, #0
   34a08:	ldr	r0, [r6]
   34a0c:	ldrb	r0, [r0, r7]
   34a10:	tst	r0, #8
   34a14:	movne	r0, r4
   34a18:	movne	r1, r5
   34a1c:	blne	3442c <__assert_fail@plt+0x2183c>
   34a20:	add	r7, r7, #2
   34a24:	add	r5, r5, #1
   34a28:	cmp	r5, #256	; 0x100
   34a2c:	bne	34a08 <__assert_fail@plt+0x21e18>
   34a30:	mov	r0, #0
   34a34:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   34a38:	bl	1286c <__ctype_b_loc@plt>
   34a3c:	mov	r6, r0
   34a40:	cmp	r8, #0
   34a44:	bne	34d90 <__assert_fail@plt+0x221a0>
   34a48:	mov	r7, #0
   34a4c:	mov	r5, #0
   34a50:	ldr	r0, [r6]
   34a54:	ldrb	r0, [r0, r7]
   34a58:	tst	r0, #2
   34a5c:	movne	r0, r4
   34a60:	movne	r1, r5
   34a64:	blne	3442c <__assert_fail@plt+0x2183c>
   34a68:	add	r7, r7, #2
   34a6c:	add	r5, r5, #1
   34a70:	cmp	r5, #256	; 0x100
   34a74:	bne	34a50 <__assert_fail@plt+0x21e60>
   34a78:	mov	r0, #0
   34a7c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   34a80:	bl	1286c <__ctype_b_loc@plt>
   34a84:	mov	r6, r0
   34a88:	cmp	r8, #0
   34a8c:	bne	34dcc <__assert_fail@plt+0x221dc>
   34a90:	mov	r7, #0
   34a94:	mov	r5, #0
   34a98:	ldr	r0, [r6]
   34a9c:	add	r0, r0, r7
   34aa0:	ldrb	r0, [r0, #1]
   34aa4:	tst	r0, #2
   34aa8:	movne	r0, r4
   34aac:	movne	r1, r5
   34ab0:	blne	3442c <__assert_fail@plt+0x2183c>
   34ab4:	add	r7, r7, #2
   34ab8:	add	r5, r5, #1
   34abc:	cmp	r5, #256	; 0x100
   34ac0:	bne	34a98 <__assert_fail@plt+0x21ea8>
   34ac4:	mov	r0, #0
   34ac8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   34acc:	bl	1286c <__ctype_b_loc@plt>
   34ad0:	mov	r6, r0
   34ad4:	cmp	r8, #0
   34ad8:	bne	34e0c <__assert_fail@plt+0x2221c>
   34adc:	mov	r7, #0
   34ae0:	mov	r5, #0
   34ae4:	ldr	r0, [r6]
   34ae8:	add	r0, r0, r7
   34aec:	ldrb	r0, [r0, #1]
   34af0:	tst	r0, #32
   34af4:	movne	r0, r4
   34af8:	movne	r1, r5
   34afc:	blne	3442c <__assert_fail@plt+0x2183c>
   34b00:	add	r7, r7, #2
   34b04:	add	r5, r5, #1
   34b08:	cmp	r5, #256	; 0x100
   34b0c:	bne	34ae4 <__assert_fail@plt+0x21ef4>
   34b10:	mov	r0, #0
   34b14:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   34b18:	bl	1286c <__ctype_b_loc@plt>
   34b1c:	mov	r6, r0
   34b20:	cmp	r8, #0
   34b24:	bne	34e4c <__assert_fail@plt+0x2225c>
   34b28:	mov	r7, #0
   34b2c:	mov	r5, #0
   34b30:	ldr	r0, [r6]
   34b34:	add	r0, r0, r7
   34b38:	ldrb	r0, [r0, #1]
   34b3c:	tst	r0, #4
   34b40:	movne	r0, r4
   34b44:	movne	r1, r5
   34b48:	blne	3442c <__assert_fail@plt+0x2183c>
   34b4c:	add	r7, r7, #2
   34b50:	add	r5, r5, #1
   34b54:	cmp	r5, #256	; 0x100
   34b58:	bne	34b30 <__assert_fail@plt+0x21f40>
   34b5c:	mov	r0, #0
   34b60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   34b64:	bl	1286c <__ctype_b_loc@plt>
   34b68:	mov	r6, r0
   34b6c:	cmp	r8, #0
   34b70:	bne	34e8c <__assert_fail@plt+0x2229c>
   34b74:	mov	r7, #0
   34b78:	mov	r5, #0
   34b7c:	ldr	r0, [r6]
   34b80:	add	r0, r0, r7
   34b84:	ldrb	r0, [r0, #1]
   34b88:	tst	r0, #8
   34b8c:	movne	r0, r4
   34b90:	movne	r1, r5
   34b94:	blne	3442c <__assert_fail@plt+0x2183c>
   34b98:	add	r7, r7, #2
   34b9c:	add	r5, r5, #1
   34ba0:	cmp	r5, #256	; 0x100
   34ba4:	bne	34b7c <__assert_fail@plt+0x21f8c>
   34ba8:	mov	r0, #0
   34bac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   34bb0:	bl	1286c <__ctype_b_loc@plt>
   34bb4:	mov	r6, r0
   34bb8:	cmp	r8, #0
   34bbc:	bne	34ecc <__assert_fail@plt+0x222dc>
   34bc0:	mov	r7, #0
   34bc4:	mov	r5, #0
   34bc8:	ldr	r0, [r6]
   34bcc:	add	r0, r0, r7
   34bd0:	ldrb	r0, [r0, #1]
   34bd4:	tst	r0, #64	; 0x40
   34bd8:	movne	r0, r4
   34bdc:	movne	r1, r5
   34be0:	blne	3442c <__assert_fail@plt+0x2183c>
   34be4:	add	r7, r7, #2
   34be8:	add	r5, r5, #1
   34bec:	mov	r0, #0
   34bf0:	cmp	r5, #256	; 0x100
   34bf4:	bne	34bc8 <__assert_fail@plt+0x21fd8>
   34bf8:	b	34d28 <__assert_fail@plt+0x22138>
   34bfc:	bl	1286c <__ctype_b_loc@plt>
   34c00:	mov	r6, r0
   34c04:	cmp	r8, #0
   34c08:	bne	34f0c <__assert_fail@plt+0x2231c>
   34c0c:	mov	r7, #0
   34c10:	mov	r5, #0
   34c14:	ldr	r0, [r6]
   34c18:	add	r0, r0, r7
   34c1c:	ldrb	r0, [r0, #1]
   34c20:	tst	r0, #1
   34c24:	movne	r0, r4
   34c28:	movne	r1, r5
   34c2c:	blne	3442c <__assert_fail@plt+0x2183c>
   34c30:	add	r7, r7, #2
   34c34:	add	r5, r5, #1
   34c38:	mov	r0, #0
   34c3c:	cmp	r5, #256	; 0x100
   34c40:	bne	34c14 <__assert_fail@plt+0x22024>
   34c44:	b	34d28 <__assert_fail@plt+0x22138>
   34c48:	bl	1286c <__ctype_b_loc@plt>
   34c4c:	mov	r6, r0
   34c50:	cmp	r8, #0
   34c54:	bne	34f4c <__assert_fail@plt+0x2235c>
   34c58:	mov	r7, #0
   34c5c:	mov	r5, #0
   34c60:	ldr	r0, [r6]
   34c64:	ldrb	r0, [r0, r7]
   34c68:	tst	r0, #1
   34c6c:	movne	r0, r4
   34c70:	movne	r1, r5
   34c74:	blne	3442c <__assert_fail@plt+0x2183c>
   34c78:	add	r7, r7, #2
   34c7c:	add	r5, r5, #1
   34c80:	mov	r0, #0
   34c84:	cmp	r5, #256	; 0x100
   34c88:	bne	34c60 <__assert_fail@plt+0x22070>
   34c8c:	b	34d28 <__assert_fail@plt+0x22138>
   34c90:	bl	1286c <__ctype_b_loc@plt>
   34c94:	mov	r6, r0
   34c98:	cmp	r8, #0
   34c9c:	bne	34f88 <__assert_fail@plt+0x22398>
   34ca0:	mov	r7, #0
   34ca4:	mov	r5, #0
   34ca8:	b	34cc0 <__assert_fail@plt+0x220d0>
   34cac:	add	r7, r7, #2
   34cb0:	add	r5, r5, #1
   34cb4:	mov	r0, #0
   34cb8:	cmp	r5, #256	; 0x100
   34cbc:	beq	34d28 <__assert_fail@plt+0x22138>
   34cc0:	ldr	r0, [r6]
   34cc4:	add	r0, r0, r7
   34cc8:	ldrsh	r0, [r0]
   34ccc:	cmn	r0, #1
   34cd0:	bgt	34cac <__assert_fail@plt+0x220bc>
   34cd4:	mov	r0, r4
   34cd8:	mov	r1, r5
   34cdc:	bl	3442c <__assert_fail@plt+0x2183c>
   34ce0:	b	34cac <__assert_fail@plt+0x220bc>
   34ce4:	bl	1286c <__ctype_b_loc@plt>
   34ce8:	mov	r6, r0
   34cec:	cmp	r8, #0
   34cf0:	bne	34fc8 <__assert_fail@plt+0x223d8>
   34cf4:	mov	r7, #0
   34cf8:	mov	r5, #0
   34cfc:	ldr	r0, [r6]
   34d00:	ldrb	r0, [r0, r7]
   34d04:	tst	r0, #4
   34d08:	movne	r0, r4
   34d0c:	movne	r1, r5
   34d10:	blne	3442c <__assert_fail@plt+0x2183c>
   34d14:	add	r7, r7, #2
   34d18:	add	r5, r5, #1
   34d1c:	mov	r0, #0
   34d20:	cmp	r5, #256	; 0x100
   34d24:	bne	34cfc <__assert_fail@plt+0x2210c>
   34d28:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   34d2c:	mov	r1, #1
   34d30:	orr	r9, r1, r0, lsl #1
   34d34:	lsl	r1, r9, #2
   34d38:	ldr	r0, [r7, #12]
   34d3c:	bl	2f894 <__assert_fail@plt+0x1cca4>
   34d40:	cmp	r0, #0
   34d44:	beq	35044 <__assert_fail@plt+0x22454>
   34d48:	str	r0, [r7, #12]
   34d4c:	str	r9, [r5]
   34d50:	b	34860 <__assert_fail@plt+0x21c70>
   34d54:	mov	r5, #0
   34d58:	b	34d70 <__assert_fail@plt+0x22180>
   34d5c:	add	r8, r8, #1
   34d60:	add	r5, r5, #2
   34d64:	mov	r0, #0
   34d68:	cmp	r5, #512	; 0x200
   34d6c:	beq	34d28 <__assert_fail@plt+0x22138>
   34d70:	ldr	r0, [r6]
   34d74:	ldrb	r0, [r0, r5]
   34d78:	tst	r0, #8
   34d7c:	beq	34d5c <__assert_fail@plt+0x2216c>
   34d80:	ldrb	r1, [r8]
   34d84:	mov	r0, r4
   34d88:	bl	3442c <__assert_fail@plt+0x2183c>
   34d8c:	b	34d5c <__assert_fail@plt+0x2216c>
   34d90:	mov	r5, #0
   34d94:	b	34dac <__assert_fail@plt+0x221bc>
   34d98:	add	r8, r8, #1
   34d9c:	add	r5, r5, #2
   34da0:	mov	r0, #0
   34da4:	cmp	r5, #512	; 0x200
   34da8:	beq	34d28 <__assert_fail@plt+0x22138>
   34dac:	ldr	r0, [r6]
   34db0:	ldrb	r0, [r0, r5]
   34db4:	tst	r0, #2
   34db8:	beq	34d98 <__assert_fail@plt+0x221a8>
   34dbc:	ldrb	r1, [r8]
   34dc0:	mov	r0, r4
   34dc4:	bl	3442c <__assert_fail@plt+0x2183c>
   34dc8:	b	34d98 <__assert_fail@plt+0x221a8>
   34dcc:	mov	r5, #0
   34dd0:	b	34de8 <__assert_fail@plt+0x221f8>
   34dd4:	add	r8, r8, #1
   34dd8:	add	r5, r5, #2
   34ddc:	mov	r0, #0
   34de0:	cmp	r5, #512	; 0x200
   34de4:	beq	34d28 <__assert_fail@plt+0x22138>
   34de8:	ldr	r0, [r6]
   34dec:	add	r0, r0, r5
   34df0:	ldrb	r0, [r0, #1]
   34df4:	tst	r0, #2
   34df8:	beq	34dd4 <__assert_fail@plt+0x221e4>
   34dfc:	ldrb	r1, [r8]
   34e00:	mov	r0, r4
   34e04:	bl	3442c <__assert_fail@plt+0x2183c>
   34e08:	b	34dd4 <__assert_fail@plt+0x221e4>
   34e0c:	mov	r5, #0
   34e10:	b	34e28 <__assert_fail@plt+0x22238>
   34e14:	add	r8, r8, #1
   34e18:	add	r5, r5, #2
   34e1c:	mov	r0, #0
   34e20:	cmp	r5, #512	; 0x200
   34e24:	beq	34d28 <__assert_fail@plt+0x22138>
   34e28:	ldr	r0, [r6]
   34e2c:	add	r0, r0, r5
   34e30:	ldrb	r0, [r0, #1]
   34e34:	tst	r0, #32
   34e38:	beq	34e14 <__assert_fail@plt+0x22224>
   34e3c:	ldrb	r1, [r8]
   34e40:	mov	r0, r4
   34e44:	bl	3442c <__assert_fail@plt+0x2183c>
   34e48:	b	34e14 <__assert_fail@plt+0x22224>
   34e4c:	mov	r5, #0
   34e50:	b	34e68 <__assert_fail@plt+0x22278>
   34e54:	add	r8, r8, #1
   34e58:	add	r5, r5, #2
   34e5c:	mov	r0, #0
   34e60:	cmp	r5, #512	; 0x200
   34e64:	beq	34d28 <__assert_fail@plt+0x22138>
   34e68:	ldr	r0, [r6]
   34e6c:	add	r0, r0, r5
   34e70:	ldrb	r0, [r0, #1]
   34e74:	tst	r0, #4
   34e78:	beq	34e54 <__assert_fail@plt+0x22264>
   34e7c:	ldrb	r1, [r8]
   34e80:	mov	r0, r4
   34e84:	bl	3442c <__assert_fail@plt+0x2183c>
   34e88:	b	34e54 <__assert_fail@plt+0x22264>
   34e8c:	mov	r5, #0
   34e90:	b	34ea8 <__assert_fail@plt+0x222b8>
   34e94:	add	r8, r8, #1
   34e98:	add	r5, r5, #2
   34e9c:	mov	r0, #0
   34ea0:	cmp	r5, #512	; 0x200
   34ea4:	beq	34d28 <__assert_fail@plt+0x22138>
   34ea8:	ldr	r0, [r6]
   34eac:	add	r0, r0, r5
   34eb0:	ldrb	r0, [r0, #1]
   34eb4:	tst	r0, #8
   34eb8:	beq	34e94 <__assert_fail@plt+0x222a4>
   34ebc:	ldrb	r1, [r8]
   34ec0:	mov	r0, r4
   34ec4:	bl	3442c <__assert_fail@plt+0x2183c>
   34ec8:	b	34e94 <__assert_fail@plt+0x222a4>
   34ecc:	mov	r5, #0
   34ed0:	b	34ee8 <__assert_fail@plt+0x222f8>
   34ed4:	add	r8, r8, #1
   34ed8:	add	r5, r5, #2
   34edc:	mov	r0, #0
   34ee0:	cmp	r5, #512	; 0x200
   34ee4:	beq	34d28 <__assert_fail@plt+0x22138>
   34ee8:	ldr	r0, [r6]
   34eec:	add	r0, r0, r5
   34ef0:	ldrb	r0, [r0, #1]
   34ef4:	tst	r0, #64	; 0x40
   34ef8:	beq	34ed4 <__assert_fail@plt+0x222e4>
   34efc:	ldrb	r1, [r8]
   34f00:	mov	r0, r4
   34f04:	bl	3442c <__assert_fail@plt+0x2183c>
   34f08:	b	34ed4 <__assert_fail@plt+0x222e4>
   34f0c:	mov	r5, #0
   34f10:	b	34f28 <__assert_fail@plt+0x22338>
   34f14:	add	r8, r8, #1
   34f18:	add	r5, r5, #2
   34f1c:	mov	r0, #0
   34f20:	cmp	r5, #512	; 0x200
   34f24:	beq	34d28 <__assert_fail@plt+0x22138>
   34f28:	ldr	r0, [r6]
   34f2c:	add	r0, r0, r5
   34f30:	ldrb	r0, [r0, #1]
   34f34:	tst	r0, #1
   34f38:	beq	34f14 <__assert_fail@plt+0x22324>
   34f3c:	ldrb	r1, [r8]
   34f40:	mov	r0, r4
   34f44:	bl	3442c <__assert_fail@plt+0x2183c>
   34f48:	b	34f14 <__assert_fail@plt+0x22324>
   34f4c:	mov	r5, #0
   34f50:	b	34f68 <__assert_fail@plt+0x22378>
   34f54:	add	r8, r8, #1
   34f58:	add	r5, r5, #2
   34f5c:	mov	r0, #0
   34f60:	cmp	r5, #512	; 0x200
   34f64:	beq	34d28 <__assert_fail@plt+0x22138>
   34f68:	ldr	r0, [r6]
   34f6c:	ldrb	r0, [r0, r5]
   34f70:	tst	r0, #1
   34f74:	beq	34f54 <__assert_fail@plt+0x22364>
   34f78:	ldrb	r1, [r8]
   34f7c:	mov	r0, r4
   34f80:	bl	3442c <__assert_fail@plt+0x2183c>
   34f84:	b	34f54 <__assert_fail@plt+0x22364>
   34f88:	mov	r5, #0
   34f8c:	b	34fa4 <__assert_fail@plt+0x223b4>
   34f90:	add	r8, r8, #1
   34f94:	add	r5, r5, #2
   34f98:	mov	r0, #0
   34f9c:	cmp	r5, #512	; 0x200
   34fa0:	beq	34d28 <__assert_fail@plt+0x22138>
   34fa4:	ldr	r0, [r6]
   34fa8:	add	r0, r0, r5
   34fac:	ldrsh	r0, [r0]
   34fb0:	cmn	r0, #1
   34fb4:	bgt	34f90 <__assert_fail@plt+0x223a0>
   34fb8:	ldrb	r1, [r8]
   34fbc:	mov	r0, r4
   34fc0:	bl	3442c <__assert_fail@plt+0x2183c>
   34fc4:	b	34f90 <__assert_fail@plt+0x223a0>
   34fc8:	mov	r5, #0
   34fcc:	b	34fe4 <__assert_fail@plt+0x223f4>
   34fd0:	add	r8, r8, #1
   34fd4:	add	r5, r5, #2
   34fd8:	mov	r0, #0
   34fdc:	cmp	r5, #512	; 0x200
   34fe0:	beq	34d28 <__assert_fail@plt+0x22138>
   34fe4:	ldr	r0, [r6]
   34fe8:	ldrb	r0, [r0, r5]
   34fec:	tst	r0, #4
   34ff0:	beq	34fd0 <__assert_fail@plt+0x223e0>
   34ff4:	ldrb	r1, [r8]
   34ff8:	mov	r0, r4
   34ffc:	bl	3442c <__assert_fail@plt+0x2183c>
   35000:	b	34fd0 <__assert_fail@plt+0x223e0>
   35004:	mov	r5, #0
   35008:	b	35020 <__assert_fail@plt+0x22430>
   3500c:	add	r8, r8, #1
   35010:	add	r5, r5, #2
   35014:	mov	r0, #0
   35018:	cmp	r5, #512	; 0x200
   3501c:	beq	34d28 <__assert_fail@plt+0x22138>
   35020:	ldr	r0, [r6]
   35024:	add	r0, r0, r5
   35028:	ldrb	r0, [r0, #1]
   3502c:	tst	r0, #16
   35030:	beq	3500c <__assert_fail@plt+0x2241c>
   35034:	ldrb	r1, [r8]
   35038:	mov	r0, r4
   3503c:	bl	3442c <__assert_fail@plt+0x2183c>
   35040:	b	3500c <__assert_fail@plt+0x2241c>
   35044:	mov	r0, #12
   35048:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3504c:	mov	r1, #0
   35050:	ldr	r2, [r0, r1, lsl #2]
   35054:	mvn	r2, r2
   35058:	str	r2, [r0, r1, lsl #2]
   3505c:	add	r1, r1, #1
   35060:	cmp	r1, #8
   35064:	bne	35050 <__assert_fail@plt+0x22460>
   35068:	bx	lr
   3506c:	mov	r2, #0
   35070:	ldr	ip, [r1, r2, lsl #2]
   35074:	ldr	r3, [r0, r2, lsl #2]
   35078:	and	r3, r3, ip
   3507c:	str	r3, [r0, r2, lsl #2]
   35080:	add	r2, r2, #1
   35084:	cmp	r2, #8
   35088:	bne	35070 <__assert_fail@plt+0x22480>
   3508c:	bx	lr
   35090:	push	{fp, lr}
   35094:	mov	fp, sp
   35098:	mov	lr, r0
   3509c:	ldr	r3, [r0, #80]	; 0x50
   350a0:	mov	r0, #1
   350a4:	cmp	r3, #1
   350a8:	beq	350e8 <__assert_fail@plt+0x224f8>
   350ac:	ldr	ip, [lr, #28]
   350b0:	add	r3, r1, #1
   350b4:	cmp	r3, ip
   350b8:	popge	{fp, pc}
   350bc:	ldr	r0, [lr, #8]
   350c0:	add	ip, r0, r1, lsl #2
   350c4:	mov	r0, #1
   350c8:	ldr	r3, [ip, r0, lsl #2]
   350cc:	cmn	r3, #1
   350d0:	bne	350e8 <__assert_fail@plt+0x224f8>
   350d4:	add	r0, r0, #1
   350d8:	add	r3, r1, r0
   350dc:	ldr	r2, [lr, #28]
   350e0:	cmp	r3, r2
   350e4:	blt	350c8 <__assert_fail@plt+0x224d8>
   350e8:	pop	{fp, pc}
   350ec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   350f0:	add	fp, sp, #24
   350f4:	mov	r7, r1
   350f8:	mov	r9, r0
   350fc:	ldr	r0, [r1, #40]	; 0x28
   35100:	ldr	r1, [r1, #56]	; 0x38
   35104:	mov	r8, #7
   35108:	cmp	r1, r0
   3510c:	ble	351d0 <__assert_fail@plt+0x225e0>
   35110:	mov	r6, r2
   35114:	ldrb	r5, [r2]
   35118:	mov	r4, #0
   3511c:	b	35134 <__assert_fail@plt+0x22544>
   35120:	ldr	r1, [r9, #4]
   35124:	strb	r0, [r1, r4]
   35128:	add	r4, r4, #1
   3512c:	cmp	r4, #32
   35130:	beq	351d0 <__assert_fail@plt+0x225e0>
   35134:	ldrb	r0, [r6, #4]
   35138:	cmp	r0, #30
   3513c:	bne	3514c <__assert_fail@plt+0x2255c>
   35140:	mov	r0, r7
   35144:	bl	351d8 <__assert_fail@plt+0x225e8>
   35148:	b	35160 <__assert_fail@plt+0x22570>
   3514c:	ldr	r0, [r7, #4]
   35150:	ldr	r1, [r7, #40]	; 0x28
   35154:	add	r2, r1, #1
   35158:	str	r2, [r7, #40]	; 0x28
   3515c:	ldrb	r0, [r0, r1]
   35160:	ldr	r1, [r7, #40]	; 0x28
   35164:	ldr	r2, [r7, #56]	; 0x38
   35168:	cmp	r2, r1
   3516c:	ble	351d0 <__assert_fail@plt+0x225e0>
   35170:	cmp	r0, r5
   35174:	bne	35120 <__assert_fail@plt+0x22530>
   35178:	ldr	r2, [r7, #4]
   3517c:	ldrb	r2, [r2, r1]
   35180:	cmp	r2, #93	; 0x5d
   35184:	bne	35120 <__assert_fail@plt+0x22530>
   35188:	add	r0, r1, #1
   3518c:	str	r0, [r7, #40]	; 0x28
   35190:	ldr	r0, [r9, #4]
   35194:	mov	r8, #0
   35198:	strb	r8, [r0, r4]
   3519c:	ldrb	r0, [r6, #4]
   351a0:	cmp	r0, #30
   351a4:	beq	351c0 <__assert_fail@plt+0x225d0>
   351a8:	cmp	r0, #28
   351ac:	beq	351c8 <__assert_fail@plt+0x225d8>
   351b0:	cmp	r0, #26
   351b4:	bne	351d0 <__assert_fail@plt+0x225e0>
   351b8:	mov	r0, #3
   351bc:	b	351cc <__assert_fail@plt+0x225dc>
   351c0:	mov	r0, #4
   351c4:	b	351cc <__assert_fail@plt+0x225dc>
   351c8:	mov	r0, #2
   351cc:	str	r0, [r9]
   351d0:	mov	r0, r8
   351d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   351d8:	push	{r4, r5, r6, sl, fp, lr}
   351dc:	add	fp, sp, #16
   351e0:	mov	r4, r0
   351e4:	ldrb	r0, [r0, #75]	; 0x4b
   351e8:	cmp	r0, #0
   351ec:	bne	3520c <__assert_fail@plt+0x2261c>
   351f0:	ldr	r0, [r4, #4]
   351f4:	ldr	r1, [r4, #40]	; 0x28
   351f8:	add	r2, r1, #1
   351fc:	str	r2, [r4, #40]	; 0x28
   35200:	ldrb	r6, [r0, r1]
   35204:	uxtb	r0, r6
   35208:	pop	{r4, r5, r6, sl, fp, pc}
   3520c:	ldrb	r0, [r4, #76]	; 0x4c
   35210:	cmp	r0, #0
   35214:	beq	35278 <__assert_fail@plt+0x22688>
   35218:	ldr	r0, [r4, #28]
   3521c:	ldr	r5, [r4, #40]	; 0x28
   35220:	cmp	r5, r0
   35224:	beq	35238 <__assert_fail@plt+0x22648>
   35228:	ldr	r0, [r4, #8]
   3522c:	ldr	r0, [r0, r5, lsl #2]
   35230:	cmn	r0, #1
   35234:	beq	35294 <__assert_fail@plt+0x226a4>
   35238:	ldr	r0, [r4]
   3523c:	ldr	r1, [r4, #12]
   35240:	ldr	r2, [r4, #24]
   35244:	ldr	r1, [r1, r5, lsl #2]
   35248:	add	r1, r2, r1
   3524c:	add	r0, r0, r1
   35250:	ldrsb	r6, [r0]
   35254:	cmn	r6, #1
   35258:	ble	35294 <__assert_fail@plt+0x226a4>
   3525c:	mov	r0, r4
   35260:	mov	r1, r5
   35264:	bl	35090 <__assert_fail@plt+0x224a0>
   35268:	add	r0, r0, r5
   3526c:	str	r0, [r4, #40]	; 0x28
   35270:	uxtb	r0, r6
   35274:	pop	{r4, r5, r6, sl, fp, pc}
   35278:	ldr	r0, [r4]
   3527c:	ldr	r1, [r4, #24]
   35280:	ldr	r2, [r4, #40]	; 0x28
   35284:	add	r3, r2, #1
   35288:	str	r3, [r4, #40]	; 0x28
   3528c:	add	r1, r2, r1
   35290:	b	35200 <__assert_fail@plt+0x22610>
   35294:	add	r0, r5, #1
   35298:	str	r0, [r4, #40]	; 0x28
   3529c:	ldr	r0, [r4, #4]
   352a0:	ldrb	r6, [r0, r5]
   352a4:	uxtb	r0, r6
   352a8:	pop	{r4, r5, r6, sl, fp, pc}
   352ac:	ldr	r1, [r1, #92]	; 0x5c
   352b0:	cmp	r1, #2
   352b4:	bxlt	lr
   352b8:	b	12974 <btowc@plt>
   352bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   352c0:	add	fp, sp, #24
   352c4:	mov	r4, r2
   352c8:	mov	r5, r1
   352cc:	mov	r6, r0
   352d0:	mvn	r1, #0
   352d4:	movw	r8, #32816	; 0x8030
   352d8:	mov	r7, r1
   352dc:	mov	r0, r5
   352e0:	mov	r1, r6
   352e4:	mov	r2, r4
   352e8:	bl	323c8 <__assert_fail@plt+0x1f7d8>
   352ec:	ldrb	r2, [r5, #4]
   352f0:	cmp	r2, #24
   352f4:	beq	3535c <__assert_fail@plt+0x2276c>
   352f8:	cmp	r2, #2
   352fc:	beq	35358 <__assert_fail@plt+0x22768>
   35300:	ldrb	r0, [r5]
   35304:	cmp	r0, #44	; 0x2c
   35308:	beq	3535c <__assert_fail@plt+0x2276c>
   3530c:	mvn	r1, #1
   35310:	cmp	r0, #48	; 0x30
   35314:	bcc	352d8 <__assert_fail@plt+0x226e8>
   35318:	cmp	r2, #1
   3531c:	bne	352d8 <__assert_fail@plt+0x226e8>
   35320:	cmn	r7, #2
   35324:	beq	352d8 <__assert_fail@plt+0x226e8>
   35328:	cmp	r0, #57	; 0x39
   3532c:	bhi	352d8 <__assert_fail@plt+0x226e8>
   35330:	cmn	r7, #1
   35334:	beq	35350 <__assert_fail@plt+0x22760>
   35338:	add	r1, r7, r7, lsl #2
   3533c:	add	r0, r0, r1, lsl #1
   35340:	cmp	r0, r8
   35344:	movge	r0, r8
   35348:	sub	r1, r0, #48	; 0x30
   3534c:	b	352d8 <__assert_fail@plt+0x226e8>
   35350:	sub	r1, r0, #48	; 0x30
   35354:	b	352d8 <__assert_fail@plt+0x226e8>
   35358:	mvn	r7, #1
   3535c:	mov	r0, r7
   35360:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   35364:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   35368:	add	fp, sp, #24
   3536c:	sub	sp, sp, #8
   35370:	mov	r8, r1
   35374:	mov	r5, r0
   35378:	mov	r3, r0
   3537c:	ldr	r7, [r3], #20
   35380:	mov	r6, #0
   35384:	mov	r0, r1
   35388:	mov	r1, #0
   3538c:	mov	r2, #0
   35390:	bl	335cc <__assert_fail@plt+0x209dc>
   35394:	str	r0, [sp, #4]
   35398:	cmp	r0, #0
   3539c:	beq	35434 <__assert_fail@plt+0x22844>
   353a0:	add	r4, sp, #4
   353a4:	mov	r6, #0
   353a8:	str	r7, [r0]
   353ac:	ldr	r0, [r4]
   353b0:	ldr	r1, [r0, #24]
   353b4:	orr	r1, r1, #262144	; 0x40000
   353b8:	str	r1, [r0, #24]
   353bc:	ldr	r0, [r5, #4]
   353c0:	ldr	r7, [r4]
   353c4:	cmp	r0, #0
   353c8:	beq	353d8 <__assert_fail@plt+0x227e8>
   353cc:	add	r4, r7, #4
   353d0:	mov	r5, r0
   353d4:	b	3540c <__assert_fail@plt+0x2281c>
   353d8:	mov	r1, #0
   353dc:	mov	r0, r5
   353e0:	ldr	r5, [r5, #8]
   353e4:	cmp	r5, r1
   353e8:	cmpne	r5, #0
   353ec:	bne	35408 <__assert_fail@plt+0x22818>
   353f0:	ldr	r7, [r7]
   353f4:	ldr	r5, [r0]
   353f8:	cmp	r5, #0
   353fc:	mov	r1, r0
   35400:	bne	353dc <__assert_fail@plt+0x227ec>
   35404:	b	35430 <__assert_fail@plt+0x22840>
   35408:	add	r4, r7, #8
   3540c:	add	r3, r5, #20
   35410:	mov	r0, r8
   35414:	mov	r1, #0
   35418:	mov	r2, #0
   3541c:	bl	335cc <__assert_fail@plt+0x209dc>
   35420:	str	r0, [r4]
   35424:	cmp	r0, #0
   35428:	bne	353a8 <__assert_fail@plt+0x227b8>
   3542c:	b	35434 <__assert_fail@plt+0x22844>
   35430:	ldr	r6, [sp, #4]
   35434:	mov	r0, r6
   35438:	sub	sp, fp, #24
   3543c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   35440:	ldr	r2, [r1, #24]
   35444:	uxtb	r3, r2
   35448:	cmp	r3, #17
   3544c:	bne	35460 <__assert_fail@plt+0x22870>
   35450:	ldr	r3, [r1, #20]
   35454:	cmp	r3, r0
   35458:	orreq	r0, r2, #524288	; 0x80000
   3545c:	streq	r0, [r1, #24]
   35460:	mov	r0, #0
   35464:	bx	lr
   35468:	push	{r4, r5, r6, r7, fp, lr}
   3546c:	add	fp, sp, #16
   35470:	mov	r4, r2
   35474:	mov	r5, r1
   35478:	mov	r6, r0
   3547c:	mov	r0, r2
   35480:	mov	r1, r6
   35484:	blx	r5
   35488:	cmp	r0, #0
   3548c:	beq	354ac <__assert_fail@plt+0x228bc>
   35490:	b	354e4 <__assert_fail@plt+0x228f4>
   35494:	mov	r0, r4
   35498:	mov	r1, r7
   3549c:	blx	r5
   354a0:	cmp	r0, #0
   354a4:	mov	r6, r7
   354a8:	bne	354e4 <__assert_fail@plt+0x228f4>
   354ac:	ldr	r7, [r6, #4]
   354b0:	cmp	r7, #0
   354b4:	bne	35494 <__assert_fail@plt+0x228a4>
   354b8:	mov	r1, #0
   354bc:	mov	r0, r6
   354c0:	ldr	r7, [r6, #8]
   354c4:	cmp	r7, r1
   354c8:	cmpne	r7, #0
   354cc:	bne	35494 <__assert_fail@plt+0x228a4>
   354d0:	ldr	r6, [r0]
   354d4:	cmp	r6, #0
   354d8:	mov	r1, r0
   354dc:	bne	354bc <__assert_fail@plt+0x228cc>
   354e0:	mov	r0, #0
   354e4:	pop	{r4, r5, r6, r7, fp, pc}
   354e8:	ldrb	r2, [r1, #24]
   354ec:	cmp	r2, #17
   354f0:	beq	35524 <__assert_fail@plt+0x22934>
   354f4:	cmp	r2, #4
   354f8:	bne	35578 <__assert_fail@plt+0x22988>
   354fc:	ldr	r2, [r0, #132]	; 0x84
   35500:	cmp	r2, #0
   35504:	beq	35578 <__assert_fail@plt+0x22988>
   35508:	ldr	r3, [r1, #20]
   3550c:	ldr	r2, [r2, r3, lsl #2]
   35510:	str	r2, [r1, #20]
   35514:	ldr	r1, [r0, #80]	; 0x50
   35518:	mov	r3, #1
   3551c:	orr	r1, r1, r3, lsl r2
   35520:	b	35574 <__assert_fail@plt+0x22984>
   35524:	ldr	r2, [r1, #4]
   35528:	cmp	r2, #0
   3552c:	beq	35578 <__assert_fail@plt+0x22988>
   35530:	ldrb	r3, [r2, #24]
   35534:	cmp	r3, #17
   35538:	bne	35578 <__assert_fail@plt+0x22988>
   3553c:	ldr	r3, [r2, #4]
   35540:	ldr	r2, [r2, #20]
   35544:	str	r3, [r1, #4]
   35548:	cmp	r3, #0
   3554c:	strne	r1, [r3]
   35550:	ldr	r1, [r1, #20]
   35554:	ldr	r3, [r0, #132]	; 0x84
   35558:	ldr	r1, [r3, r1, lsl #2]
   3555c:	str	r1, [r3, r2, lsl #2]
   35560:	cmp	r2, #31
   35564:	bgt	35578 <__assert_fail@plt+0x22988>
   35568:	ldr	r1, [r0, #80]	; 0x50
   3556c:	mov	r3, #1
   35570:	bic	r1, r1, r3, lsl r2
   35574:	str	r1, [r0, #80]	; 0x50
   35578:	mov	r0, #0
   3557c:	bx	lr
   35580:	push	{r4, r5, fp, lr}
   35584:	add	fp, sp, #8
   35588:	sub	sp, sp, #8
   3558c:	mov	r4, r1
   35590:	mov	r5, r0
   35594:	mov	r0, #0
   35598:	str	r0, [sp, #4]
   3559c:	ldr	r2, [r1, #4]
   355a0:	cmp	r2, #0
   355a4:	beq	355cc <__assert_fail@plt+0x229dc>
   355a8:	ldrb	r0, [r2, #24]
   355ac:	cmp	r0, #17
   355b0:	bne	355cc <__assert_fail@plt+0x229dc>
   355b4:	add	r0, sp, #4
   355b8:	mov	r1, r5
   355bc:	bl	359a4 <__assert_fail@plt+0x22db4>
   355c0:	str	r0, [r4, #4]
   355c4:	cmp	r0, #0
   355c8:	strne	r4, [r0]
   355cc:	ldr	r2, [r4, #8]
   355d0:	cmp	r2, #0
   355d4:	beq	355fc <__assert_fail@plt+0x22a0c>
   355d8:	ldrb	r0, [r2, #24]
   355dc:	cmp	r0, #17
   355e0:	bne	355fc <__assert_fail@plt+0x22a0c>
   355e4:	add	r0, sp, #4
   355e8:	mov	r1, r5
   355ec:	bl	359a4 <__assert_fail@plt+0x22db4>
   355f0:	str	r0, [r4, #8]
   355f4:	cmp	r0, #0
   355f8:	strne	r4, [r0]
   355fc:	ldr	r0, [sp, #4]
   35600:	sub	sp, fp, #8
   35604:	pop	{r4, r5, fp, pc}
   35608:	push	{r4, r5, fp, lr}
   3560c:	add	fp, sp, #8
   35610:	mov	r4, r1
   35614:	mov	r5, r0
   35618:	ldr	r2, [r1, #24]
   3561c:	uxtb	r0, r2
   35620:	cmp	r0, #16
   35624:	bne	35644 <__assert_fail@plt+0x22a54>
   35628:	ldr	r0, [r4, #4]
   3562c:	ldr	r1, [r0, #12]
   35630:	str	r1, [r4, #12]
   35634:	ldr	r0, [r0, #28]
   35638:	str	r0, [r4, #28]
   3563c:	mov	r0, #0
   35640:	pop	{r4, r5, fp, pc}
   35644:	str	r4, [r4, #12]
   35648:	ldr	r1, [r4, #20]
   3564c:	mov	r0, r5
   35650:	bl	35ac0 <__assert_fail@plt+0x22ed0>
   35654:	str	r0, [r4, #28]
   35658:	cmn	r0, #1
   3565c:	beq	35690 <__assert_fail@plt+0x22aa0>
   35660:	mov	r1, r0
   35664:	ldrb	r2, [r4, #24]
   35668:	mov	r0, #0
   3566c:	cmp	r2, #12
   35670:	popne	{r4, r5, fp, pc}
   35674:	ldr	r2, [r5]
   35678:	add	r1, r2, r1, lsl #3
   3567c:	ldr	r2, [r1, #4]
   35680:	ldr	r3, [r4, #20]
   35684:	bfi	r2, r3, #8, #10
   35688:	str	r2, [r1, #4]
   3568c:	pop	{r4, r5, fp, pc}
   35690:	mov	r0, #12
   35694:	pop	{r4, r5, fp, pc}
   35698:	ldrb	r0, [r1, #24]
   3569c:	cmp	r0, #16
   356a0:	beq	356b4 <__assert_fail@plt+0x22ac4>
   356a4:	cmp	r0, #11
   356a8:	bne	356d0 <__assert_fail@plt+0x22ae0>
   356ac:	ldr	r0, [r1, #4]
   356b0:	b	356f0 <__assert_fail@plt+0x22b00>
   356b4:	ldmib	r1, {r0, r2}
   356b8:	ldr	r3, [r2, #12]
   356bc:	str	r3, [r0, #16]
   356c0:	ldr	r0, [r1, #16]
   356c4:	str	r0, [r2, #16]
   356c8:	mov	r0, #0
   356cc:	bx	lr
   356d0:	ldr	r0, [r1, #4]
   356d4:	cmp	r0, #0
   356d8:	ldrne	r2, [r1, #16]
   356dc:	strne	r2, [r0, #16]
   356e0:	ldr	r0, [r1, #8]
   356e4:	cmp	r0, #0
   356e8:	beq	356f4 <__assert_fail@plt+0x22b04>
   356ec:	ldr	r1, [r1, #16]
   356f0:	str	r1, [r0, #16]
   356f4:	mov	r0, #0
   356f8:	bx	lr
   356fc:	push	{fp, lr}
   35700:	mov	fp, sp
   35704:	ldr	r2, [r1, #24]
   35708:	ldr	ip, [r1, #28]
   3570c:	mvn	r3, #1
   35710:	uxtab	r2, r3, r2
   35714:	cmp	r2, #14
   35718:	bhi	357cc <__assert_fail@plt+0x22bdc>
   3571c:	add	r3, pc, #0
   35720:	ldr	pc, [r3, r2, lsl #2]
   35724:	andeq	r5, r3, r4, lsl r8
   35728:	andeq	r5, r3, ip, asr #15
   3572c:	andeq	r5, r3, r0, ror #15
   35730:	andeq	r5, r3, ip, asr #15
   35734:	andeq	r5, r3, ip, asr #15
   35738:	andeq	r5, r3, ip, asr #15
   3573c:	andeq	r5, r3, r0, ror #14
   35740:	andeq	r5, r3, r0, ror #14
   35744:	andeq	r5, r3, ip, ror r7
   35748:	andeq	r5, r3, ip, ror r7
   3574c:	andeq	r5, r3, r0, ror #14
   35750:	andeq	r5, r3, ip, asr #15
   35754:	andeq	r5, r3, ip, asr #15
   35758:	andeq	r5, r3, ip, asr #15
   3575c:	andeq	r5, r3, r4, lsl r8
   35760:	ldr	r0, [r0, #20]
   35764:	add	r2, ip, ip, lsl #1
   35768:	add	r0, r0, r2, lsl #2
   3576c:	ldr	r1, [r1, #16]
   35770:	ldr	r1, [r1, #28]
   35774:	pop	{fp, lr}
   35778:	b	35d0c <__assert_fail@plt+0x2311c>
   3577c:	ldrb	r2, [r0, #88]	; 0x58
   35780:	orr	r2, r2, #1
   35784:	strb	r2, [r0, #88]	; 0x58
   35788:	add	r3, r1, #16
   3578c:	ldr	lr, [r1, #4]
   35790:	ldr	r1, [r1, #8]
   35794:	cmp	r1, #0
   35798:	mov	r2, r3
   3579c:	addne	r2, r1, #12
   357a0:	ldr	r1, [r2]
   357a4:	ldr	r2, [r1, #28]
   357a8:	cmp	lr, #0
   357ac:	addne	r3, lr, #12
   357b0:	ldr	r1, [r3]
   357b4:	ldr	r1, [r1, #28]
   357b8:	ldr	r0, [r0, #20]
   357bc:	add	r3, ip, ip, lsl #1
   357c0:	add	r0, r0, r3, lsl #2
   357c4:	pop	{fp, lr}
   357c8:	b	35c90 <__assert_fail@plt+0x230a0>
   357cc:	ldr	r0, [r0, #12]
   357d0:	ldr	r1, [r1, #16]
   357d4:	ldr	r1, [r1, #28]
   357d8:	str	r1, [r0, ip, lsl #2]
   357dc:	b	35814 <__assert_fail@plt+0x22c24>
   357e0:	ldr	r3, [r0, #12]
   357e4:	ldr	r2, [r1, #16]
   357e8:	ldr	r2, [r2, #28]
   357ec:	str	r2, [r3, ip, lsl #2]
   357f0:	ldrb	r1, [r1, #24]
   357f4:	cmp	r1, #4
   357f8:	bne	35814 <__assert_fail@plt+0x22c24>
   357fc:	ldr	r0, [r0, #20]
   35800:	add	r1, ip, ip, lsl #1
   35804:	add	r0, r0, r1, lsl #2
   35808:	mov	r1, r2
   3580c:	pop	{fp, lr}
   35810:	b	35d0c <__assert_fail@plt+0x2311c>
   35814:	mov	r0, #0
   35818:	pop	{fp, pc}
   3581c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   35820:	add	fp, sp, #24
   35824:	sub	sp, sp, #16
   35828:	mov	r4, r0
   3582c:	mov	r7, #0
   35830:	add	r8, sp, #4
   35834:	mov	r6, #0
   35838:	b	35868 <__assert_fail@plt+0x22c78>
   3583c:	mov	r0, r7
   35840:	ldr	r1, [r4, #8]
   35844:	add	r2, r6, #1
   35848:	subs	r3, r2, r1
   3584c:	mov	r6, r3
   35850:	movne	r6, r2
   35854:	movwne	r3, #1
   35858:	and	r7, r0, r3
   3585c:	tst	r0, #1
   35860:	cmpeq	r2, r1
   35864:	beq	358c4 <__assert_fail@plt+0x22cd4>
   35868:	ldr	r0, [r4, #24]
   3586c:	add	r5, r6, r6, lsl #1
   35870:	add	r0, r0, r5, lsl #2
   35874:	ldr	r0, [r0, #4]
   35878:	cmp	r0, #0
   3587c:	bne	3583c <__assert_fail@plt+0x22c4c>
   35880:	mov	r0, r8
   35884:	mov	r1, r4
   35888:	mov	r2, r6
   3588c:	mov	r3, #1
   35890:	bl	35d58 <__assert_fail@plt+0x23168>
   35894:	cmp	r0, #0
   35898:	bne	358c8 <__assert_fail@plt+0x22cd8>
   3589c:	ldr	r0, [r4, #24]
   358a0:	add	r0, r0, r5, lsl #2
   358a4:	ldr	r0, [r0, #4]
   358a8:	cmp	r0, #0
   358ac:	mov	r0, r7
   358b0:	bne	35840 <__assert_fail@plt+0x22c50>
   358b4:	ldr	r0, [sp, #12]
   358b8:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   358bc:	mov	r0, #1
   358c0:	b	35840 <__assert_fail@plt+0x22c50>
   358c4:	mov	r0, #0
   358c8:	sub	sp, fp, #24
   358cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   358d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   358d4:	add	fp, sp, #24
   358d8:	mov	r4, r0
   358dc:	ldr	r0, [r0, #8]
   358e0:	cmp	r0, #0
   358e4:	beq	35994 <__assert_fail@plt+0x22da4>
   358e8:	mov	r0, #0
   358ec:	mov	r1, #0
   358f0:	mov	r2, #0
   358f4:	ldr	r3, [r4, #28]
   358f8:	str	r0, [r3, r1]!
   358fc:	str	r0, [r3, #4]
   35900:	str	r0, [r3, #8]
   35904:	add	r1, r1, #12
   35908:	add	r2, r2, #1
   3590c:	ldr	r3, [r4, #8]
   35910:	cmp	r2, r3
   35914:	bcc	358f4 <__assert_fail@plt+0x22d04>
   35918:	cmp	r3, #0
   3591c:	beq	35994 <__assert_fail@plt+0x22da4>
   35920:	mov	r5, #0
   35924:	b	35938 <__assert_fail@plt+0x22d48>
   35928:	add	r5, r5, #1
   3592c:	ldr	r0, [r4, #8]
   35930:	cmp	r5, r0
   35934:	bcs	35994 <__assert_fail@plt+0x22da4>
   35938:	ldr	r0, [r4, #24]
   3593c:	add	r8, r5, r5, lsl #1
   35940:	add	r0, r0, r8, lsl #2
   35944:	ldr	r1, [r0, #4]
   35948:	cmp	r1, #1
   3594c:	blt	35928 <__assert_fail@plt+0x22d38>
   35950:	ldr	r7, [r0, #8]
   35954:	mov	r6, #0
   35958:	ldr	r0, [r7, r6, lsl #2]
   3595c:	add	r0, r0, r0, lsl #1
   35960:	ldr	r1, [r4, #28]
   35964:	add	r0, r1, r0, lsl #2
   35968:	mov	r1, r5
   3596c:	bl	36598 <__assert_fail@plt+0x239a8>
   35970:	cmp	r0, #0
   35974:	beq	3599c <__assert_fail@plt+0x22dac>
   35978:	add	r6, r6, #1
   3597c:	ldr	r0, [r4, #24]
   35980:	add	r0, r0, r8, lsl #2
   35984:	ldr	r0, [r0, #4]
   35988:	cmp	r6, r0
   3598c:	blt	35958 <__assert_fail@plt+0x22d68>
   35990:	b	35928 <__assert_fail@plt+0x22d38>
   35994:	mov	r0, #0
   35998:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3599c:	mov	r0, #12
   359a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   359a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   359a8:	add	fp, sp, #28
   359ac:	sub	sp, sp, #4
   359b0:	mov	r9, r2
   359b4:	mov	r8, r0
   359b8:	ldr	r5, [r2, #4]
   359bc:	ldr	r6, [r1]
   359c0:	cmp	r5, #0
   359c4:	ldrbne	r0, [r1, #28]
   359c8:	andsne	r0, r0, #16
   359cc:	bne	35a98 <__assert_fail@plt+0x22ea8>
   359d0:	mov	r0, r6
   359d4:	mov	r1, #0
   359d8:	mov	r2, #0
   359dc:	mov	r3, #8
   359e0:	bl	32550 <__assert_fail@plt+0x1f960>
   359e4:	mov	sl, r0
   359e8:	mov	r0, r6
   359ec:	mov	r1, #0
   359f0:	mov	r2, #0
   359f4:	mov	r3, #9
   359f8:	bl	32550 <__assert_fail@plt+0x1f960>
   359fc:	mov	r4, r0
   35a00:	cmp	r5, #0
   35a04:	mov	r7, r0
   35a08:	beq	35a24 <__assert_fail@plt+0x22e34>
   35a0c:	mov	r0, r6
   35a10:	mov	r1, r5
   35a14:	mov	r2, r4
   35a18:	mov	r3, #16
   35a1c:	bl	32550 <__assert_fail@plt+0x1f960>
   35a20:	mov	r7, r0
   35a24:	mov	r0, r6
   35a28:	mov	r1, sl
   35a2c:	mov	r2, r7
   35a30:	mov	r3, #16
   35a34:	bl	32550 <__assert_fail@plt+0x1f960>
   35a38:	cmp	r4, #0
   35a3c:	beq	35a4c <__assert_fail@plt+0x22e5c>
   35a40:	cmp	sl, #0
   35a44:	cmpne	r7, #0
   35a48:	bne	35a5c <__assert_fail@plt+0x22e6c>
   35a4c:	mov	r0, #12
   35a50:	str	r0, [r8]
   35a54:	mov	r5, #0
   35a58:	b	35ab4 <__assert_fail@plt+0x22ec4>
   35a5c:	mov	r5, r0
   35a60:	cmp	r0, #0
   35a64:	beq	35a4c <__assert_fail@plt+0x22e5c>
   35a68:	ldr	r0, [r9, #20]
   35a6c:	str	r0, [r4, #20]
   35a70:	str	r0, [sl, #20]
   35a74:	ldr	r0, [r4, #24]
   35a78:	ldr	r1, [r9, #24]
   35a7c:	lsr	r1, r1, #19
   35a80:	bfi	r0, r1, #19, #1
   35a84:	str	r0, [r4, #24]
   35a88:	ldr	r0, [sl, #24]
   35a8c:	bfi	r0, r1, #19, #1
   35a90:	str	r0, [sl, #24]
   35a94:	b	35ab4 <__assert_fail@plt+0x22ec4>
   35a98:	ldr	r0, [r9, #20]
   35a9c:	cmp	r0, #31
   35aa0:	bgt	35ab4 <__assert_fail@plt+0x22ec4>
   35aa4:	ldr	r1, [r6, #80]	; 0x50
   35aa8:	mov	r2, #1
   35aac:	tst	r1, r2, lsl r0
   35ab0:	bne	359d0 <__assert_fail@plt+0x22de0>
   35ab4:	mov	r0, r5
   35ab8:	sub	sp, fp, #28
   35abc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35ac0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35ac4:	add	fp, sp, #28
   35ac8:	sub	sp, sp, #12
   35acc:	mov	r5, r2
   35ad0:	mov	r9, r1
   35ad4:	mov	r4, r0
   35ad8:	ldr	r7, [r0, #4]
   35adc:	ldr	r0, [r0, #8]
   35ae0:	cmp	r0, r7
   35ae4:	bcs	35bb4 <__assert_fail@plt+0x22fc4>
   35ae8:	ldr	r0, [r4]
   35aec:	ldr	r1, [r4, #8]
   35af0:	str	r9, [r0, r1, lsl #3]!
   35af4:	str	r5, [r0, #4]
   35af8:	ldr	r0, [r4]
   35afc:	ldr	r1, [r4, #8]
   35b00:	add	r0, r0, r1, lsl #3
   35b04:	ldr	r1, [r0, #4]
   35b08:	bfc	r1, #8, #10
   35b0c:	str	r1, [r0, #4]
   35b10:	uxtb	r1, r5
   35b14:	cmp	r1, #5
   35b18:	bne	35b2c <__assert_fail@plt+0x22f3c>
   35b1c:	ldr	r2, [r4, #92]	; 0x5c
   35b20:	mov	r0, #1048576	; 0x100000
   35b24:	cmp	r2, #1
   35b28:	bgt	35b3c <__assert_fail@plt+0x22f4c>
   35b2c:	sub	r0, r1, #6
   35b30:	clz	r0, r0
   35b34:	lsr	r0, r0, #5
   35b38:	lsl	r0, r0, #20
   35b3c:	ldr	r1, [r4]
   35b40:	ldr	r2, [r4, #8]
   35b44:	add	r1, r1, r2, lsl #3
   35b48:	ldr	r2, [r1, #4]
   35b4c:	bic	r2, r2, #1048576	; 0x100000
   35b50:	orr	r0, r2, r0
   35b54:	str	r0, [r1, #4]
   35b58:	ldr	r0, [r4, #8]
   35b5c:	ldr	r1, [r4, #12]
   35b60:	mvn	r2, #0
   35b64:	str	r2, [r1, r0, lsl #2]
   35b68:	ldr	r0, [r4, #8]
   35b6c:	ldr	r1, [r4, #20]
   35b70:	add	r0, r0, r0, lsl #1
   35b74:	mov	r2, #0
   35b78:	str	r2, [r1, r0, lsl #2]!
   35b7c:	str	r2, [r1, #4]
   35b80:	str	r2, [r1, #8]
   35b84:	ldr	r0, [r4, #8]
   35b88:	ldr	r1, [r4, #24]
   35b8c:	add	r0, r0, r0, lsl #1
   35b90:	str	r2, [r1, r0, lsl #2]!
   35b94:	str	r2, [r1, #4]
   35b98:	str	r2, [r1, #8]
   35b9c:	ldr	r6, [r4, #8]
   35ba0:	add	r0, r6, #1
   35ba4:	str	r0, [r4, #8]
   35ba8:	mov	r0, r6
   35bac:	sub	sp, fp, #28
   35bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35bb4:	lsl	r1, r7, #1
   35bb8:	mvn	r6, #0
   35bbc:	movw	r0, #21845	; 0x5555
   35bc0:	movt	r0, #5461	; 0x1555
   35bc4:	cmp	r1, r0
   35bc8:	bhi	35ba8 <__assert_fail@plt+0x22fb8>
   35bcc:	str	r1, [sp, #8]
   35bd0:	ldr	r0, [r4]
   35bd4:	lsl	r1, r7, #4
   35bd8:	bl	2f894 <__assert_fail@plt+0x1cca4>
   35bdc:	cmp	r0, #0
   35be0:	beq	35ba8 <__assert_fail@plt+0x22fb8>
   35be4:	str	r0, [r4]
   35be8:	ldr	r0, [r4, #12]
   35bec:	lsl	r8, r7, #3
   35bf0:	mov	r1, r8
   35bf4:	bl	2f894 <__assert_fail@plt+0x1cca4>
   35bf8:	str	r0, [sp, #4]
   35bfc:	ldr	r0, [r4, #16]
   35c00:	mov	r1, r8
   35c04:	bl	2f894 <__assert_fail@plt+0x1cca4>
   35c08:	mov	r2, r0
   35c0c:	ldr	r0, [r4, #20]
   35c10:	add	r1, r7, r7, lsl #1
   35c14:	mov	r7, r2
   35c18:	lsl	r8, r1, #3
   35c1c:	mov	r1, r8
   35c20:	bl	2f894 <__assert_fail@plt+0x1cca4>
   35c24:	mov	sl, r0
   35c28:	ldr	r0, [r4, #24]
   35c2c:	mov	r1, r8
   35c30:	bl	2f894 <__assert_fail@plt+0x1cca4>
   35c34:	mov	r8, r0
   35c38:	ldr	r0, [sp, #4]
   35c3c:	cmp	r0, #0
   35c40:	beq	35c50 <__assert_fail@plt+0x23060>
   35c44:	cmp	r7, #0
   35c48:	cmpne	sl, #0
   35c4c:	bne	35c70 <__assert_fail@plt+0x23080>
   35c50:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   35c54:	mov	r0, r7
   35c58:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   35c5c:	mov	r0, sl
   35c60:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   35c64:	mov	r0, r8
   35c68:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   35c6c:	b	35ba8 <__assert_fail@plt+0x22fb8>
   35c70:	cmp	r8, #0
   35c74:	beq	35c50 <__assert_fail@plt+0x23060>
   35c78:	add	r1, r4, #12
   35c7c:	stm	r1, {r0, r7, sl}
   35c80:	str	r8, [r4, #24]
   35c84:	ldr	r0, [sp, #8]
   35c88:	str	r0, [r4, #4]
   35c8c:	b	35ae8 <__assert_fail@plt+0x22ef8>
   35c90:	push	{r4, r5, r6, sl, fp, lr}
   35c94:	add	fp, sp, #16
   35c98:	mov	r5, r2
   35c9c:	mov	r4, r1
   35ca0:	mov	r6, r0
   35ca4:	mov	r0, #2
   35ca8:	str	r0, [r6]
   35cac:	mov	r0, #8
   35cb0:	bl	2ed88 <__assert_fail@plt+0x1c198>
   35cb4:	str	r0, [r6, #8]
   35cb8:	cmp	r0, #0
   35cbc:	beq	35d04 <__assert_fail@plt+0x23114>
   35cc0:	cmp	r4, r5
   35cc4:	bne	35ce0 <__assert_fail@plt+0x230f0>
   35cc8:	mov	r0, #1
   35ccc:	str	r0, [r6, #4]
   35cd0:	ldr	r0, [r6, #8]
   35cd4:	str	r4, [r0]
   35cd8:	mov	r0, #0
   35cdc:	pop	{r4, r5, r6, sl, fp, pc}
   35ce0:	mov	r0, #2
   35ce4:	str	r0, [r6, #4]
   35ce8:	ldr	r0, [r6, #8]
   35cec:	cmp	r4, r5
   35cf0:	stmlt	r0, {r4, r5}
   35cf4:	strge	r5, [r0]
   35cf8:	strge	r4, [r0, #4]
   35cfc:	mov	r0, #0
   35d00:	pop	{r4, r5, r6, sl, fp, pc}
   35d04:	mov	r0, #12
   35d08:	pop	{r4, r5, r6, sl, fp, pc}
   35d0c:	push	{r4, r5, fp, lr}
   35d10:	add	fp, sp, #8
   35d14:	mov	r5, r1
   35d18:	mov	r4, r0
   35d1c:	mov	r0, #1
   35d20:	str	r0, [r4]
   35d24:	str	r0, [r4, #4]
   35d28:	mov	r0, #4
   35d2c:	bl	2ed88 <__assert_fail@plt+0x1c198>
   35d30:	str	r0, [r4, #8]
   35d34:	cmp	r0, #0
   35d38:	strne	r5, [r0]
   35d3c:	movne	r0, #0
   35d40:	popne	{r4, r5, fp, pc}
   35d44:	mov	r0, #0
   35d48:	str	r0, [r4]
   35d4c:	str	r0, [r4, #4]
   35d50:	mov	r0, #12
   35d54:	pop	{r4, r5, fp, pc}
   35d58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35d5c:	add	fp, sp, #28
   35d60:	sub	sp, sp, #44	; 0x2c
   35d64:	mov	r8, r3
   35d68:	mov	r6, r2
   35d6c:	mov	r5, r1
   35d70:	mov	r7, r0
   35d74:	ldr	r0, [r1, #20]
   35d78:	add	r4, r2, r2, lsl #1
   35d7c:	add	r0, r0, r4, lsl #2
   35d80:	ldr	r0, [r0, #4]
   35d84:	add	r1, r0, #1
   35d88:	add	r0, sp, #32
   35d8c:	bl	35f6c <__assert_fail@plt+0x2337c>
   35d90:	cmp	r0, #0
   35d94:	bne	35f64 <__assert_fail@plt+0x23374>
   35d98:	ldr	r0, [sp, #36]	; 0x24
   35d9c:	ldr	r1, [sp, #40]	; 0x28
   35da0:	add	r2, r0, #1
   35da4:	str	r2, [sp, #36]	; 0x24
   35da8:	str	r6, [r1, r0, lsl #2]
   35dac:	ldr	r0, [r5, #24]
   35db0:	add	r0, r0, r4, lsl #2
   35db4:	mvn	r1, #0
   35db8:	str	r1, [r0, #4]
   35dbc:	ldr	r1, [r5]
   35dc0:	add	r0, r1, r6, lsl #3
   35dc4:	ldr	r0, [r0, #4]
   35dc8:	ubfx	r0, r0, #8, #10
   35dcc:	cmp	r0, #0
   35dd0:	beq	35e20 <__assert_fail@plt+0x23230>
   35dd4:	ldr	r2, [r5, #20]
   35dd8:	add	r2, r2, r4, lsl #2
   35ddc:	ldr	r3, [r2, #4]
   35de0:	cmp	r3, #0
   35de4:	beq	35e20 <__assert_fail@plt+0x23230>
   35de8:	ldr	r2, [r2, #8]
   35dec:	ldr	r2, [r2]
   35df0:	add	r1, r1, r2, lsl #3
   35df4:	ldrb	r1, [r1, #6]
   35df8:	tst	r1, #4
   35dfc:	bne	35e20 <__assert_fail@plt+0x23230>
   35e00:	str	r0, [sp]
   35e04:	mov	r0, r5
   35e08:	mov	r1, r6
   35e0c:	mov	r2, r6
   35e10:	mov	r3, r6
   35e14:	bl	35f9c <__assert_fail@plt+0x233ac>
   35e18:	cmp	r0, #0
   35e1c:	bne	35f64 <__assert_fail@plt+0x23374>
   35e20:	ldr	r0, [r5]
   35e24:	add	r0, r0, r6, lsl #3
   35e28:	ldrb	r0, [r0, #4]
   35e2c:	tst	r0, #8
   35e30:	beq	35f38 <__assert_fail@plt+0x23348>
   35e34:	ldr	r0, [r5, #20]
   35e38:	add	r1, r0, r4, lsl #2
   35e3c:	ldr	r1, [r1, #4]
   35e40:	cmp	r1, #1
   35e44:	blt	35f38 <__assert_fail@plt+0x23348>
   35e48:	str	r8, [sp, #8]
   35e4c:	str	r7, [sp, #12]
   35e50:	mov	r8, #0
   35e54:	add	r7, sp, #16
   35e58:	add	sl, sp, #32
   35e5c:	mov	r6, #0
   35e60:	b	35e80 <__assert_fail@plt+0x23290>
   35e64:	mov	r8, #1
   35e68:	ldr	r0, [r5, #20]
   35e6c:	add	r1, r0, r4, lsl #2
   35e70:	ldr	r1, [r1, #4]
   35e74:	add	r6, r6, #1
   35e78:	cmp	r6, r1
   35e7c:	bge	35f0c <__assert_fail@plt+0x2331c>
   35e80:	add	r0, r0, r4, lsl #2
   35e84:	ldr	r0, [r0, #8]
   35e88:	ldr	r2, [r0, r6, lsl #2]
   35e8c:	add	r9, r2, r2, lsl #1
   35e90:	ldr	r0, [r5, #24]
   35e94:	add	r0, r0, r9, lsl #2
   35e98:	ldr	r1, [r0, #4]
   35e9c:	cmn	r1, #1
   35ea0:	beq	35e64 <__assert_fail@plt+0x23274>
   35ea4:	cmp	r1, #0
   35ea8:	bne	35ec8 <__assert_fail@plt+0x232d8>
   35eac:	mov	r0, r7
   35eb0:	mov	r1, r5
   35eb4:	mov	r3, #0
   35eb8:	bl	35d58 <__assert_fail@plt+0x23168>
   35ebc:	cmp	r0, #0
   35ec0:	beq	35ed8 <__assert_fail@plt+0x232e8>
   35ec4:	b	35f64 <__assert_fail@plt+0x23374>
   35ec8:	vldr	d16, [r0]
   35ecc:	ldr	r0, [r0, #8]
   35ed0:	str	r0, [sp, #24]
   35ed4:	vstr	d16, [sp, #16]
   35ed8:	mov	r0, sl
   35edc:	mov	r1, r7
   35ee0:	bl	361f8 <__assert_fail@plt+0x23608>
   35ee4:	cmp	r0, #0
   35ee8:	bne	35f64 <__assert_fail@plt+0x23374>
   35eec:	ldr	r0, [r5, #24]
   35ef0:	add	r0, r0, r9, lsl #2
   35ef4:	ldr	r0, [r0, #4]
   35ef8:	cmp	r0, #0
   35efc:	bne	35e68 <__assert_fail@plt+0x23278>
   35f00:	ldr	r0, [sp, #24]
   35f04:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   35f08:	b	35e64 <__assert_fail@plt+0x23274>
   35f0c:	tst	r8, #1
   35f10:	ldr	r7, [sp, #12]
   35f14:	ldr	r0, [sp, #8]
   35f18:	beq	35f38 <__assert_fail@plt+0x23348>
   35f1c:	cmp	r0, #0
   35f20:	bne	35f38 <__assert_fail@plt+0x23348>
   35f24:	ldr	r0, [r5, #24]
   35f28:	add	r0, r0, r4, lsl #2
   35f2c:	mov	r1, #0
   35f30:	str	r1, [r0, #4]
   35f34:	b	35f50 <__assert_fail@plt+0x23360>
   35f38:	ldr	r0, [r5, #24]
   35f3c:	vldr	d16, [sp, #32]
   35f40:	add	r0, r0, r4, lsl #2
   35f44:	ldr	r1, [sp, #40]	; 0x28
   35f48:	str	r1, [r0, #8]
   35f4c:	vstr	d16, [r0]
   35f50:	ldr	r0, [sp, #40]	; 0x28
   35f54:	vldr	d16, [sp, #32]
   35f58:	str	r0, [r7, #8]
   35f5c:	vstr	d16, [r7]
   35f60:	mov	r0, #0
   35f64:	sub	sp, fp, #28
   35f68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35f6c:	push	{r4, r5, fp, lr}
   35f70:	add	fp, sp, #8
   35f74:	mov	r5, r0
   35f78:	mov	r4, #0
   35f7c:	stm	r0, {r1, r4}
   35f80:	lsl	r0, r1, #2
   35f84:	bl	2ed88 <__assert_fail@plt+0x1c198>
   35f88:	str	r0, [r5, #8]
   35f8c:	cmp	r0, #0
   35f90:	moveq	r4, #12
   35f94:	mov	r0, r4
   35f98:	pop	{r4, r5, fp, pc}
   35f9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35fa0:	add	fp, sp, #28
   35fa4:	sub	sp, sp, #20
   35fa8:	str	r3, [sp, #8]
   35fac:	mov	r8, r2
   35fb0:	mov	r9, r1
   35fb4:	mov	r5, r0
   35fb8:	ldr	r0, [fp, #8]
   35fbc:	str	r0, [sp, #16]
   35fc0:	ldr	r0, [r5]
   35fc4:	add	r0, r0, r9, lsl #3
   35fc8:	ldrb	r1, [r0, #4]!
   35fcc:	cmp	r1, #4
   35fd0:	bne	36040 <__assert_fail@plt+0x23450>
   35fd4:	ldr	r0, [r5, #12]
   35fd8:	ldr	r1, [r5, #20]
   35fdc:	ldr	r6, [r0, r9, lsl #2]
   35fe0:	add	r4, r8, r8, lsl #1
   35fe4:	add	r0, r1, r4, lsl #2
   35fe8:	mov	r1, #0
   35fec:	str	r1, [r0, #4]
   35ff0:	mov	r0, r5
   35ff4:	mov	r1, r6
   35ff8:	ldr	r2, [sp, #16]
   35ffc:	bl	36388 <__assert_fail@plt+0x23798>
   36000:	mov	sl, #12
   36004:	cmn	r0, #1
   36008:	beq	361bc <__assert_fail@plt+0x235cc>
   3600c:	mov	r7, r0
   36010:	ldr	r0, [r5, #12]
   36014:	ldr	r1, [r0, r9, lsl #2]
   36018:	str	r1, [r0, r8, lsl #2]
   3601c:	ldr	r0, [r5, #20]
   36020:	add	r0, r0, r4, lsl #2
   36024:	mov	r1, r7
   36028:	bl	36410 <__assert_fail@plt+0x23820>
   3602c:	cmp	r0, #0
   36030:	mov	r9, r6
   36034:	mov	r8, r7
   36038:	bne	35fc0 <__assert_fail@plt+0x233d0>
   3603c:	b	361bc <__assert_fail@plt+0x235cc>
   36040:	ldr	r1, [r5, #20]
   36044:	add	r6, r9, r9, lsl #1
   36048:	add	r3, r1, r6, lsl #2
   3604c:	ldr	r2, [r3, #4]
   36050:	cmp	r2, #0
   36054:	beq	361a0 <__assert_fail@plt+0x235b0>
   36058:	ldr	r3, [r3, #8]
   3605c:	ldr	sl, [r3]
   36060:	add	r7, r8, r8, lsl #1
   36064:	add	r4, r1, r7, lsl #2
   36068:	mov	r1, #0
   3606c:	str	r1, [r4, #4]
   36070:	cmp	r2, #1
   36074:	beq	36168 <__assert_fail@plt+0x23578>
   36078:	str	r6, [sp, #12]
   3607c:	mov	r0, r5
   36080:	mov	r1, sl
   36084:	ldr	r6, [sp, #16]
   36088:	mov	r2, r6
   3608c:	bl	36518 <__assert_fail@plt+0x23928>
   36090:	cmn	r0, #1
   36094:	beq	360b0 <__assert_fail@plt+0x234c0>
   36098:	mov	r1, r0
   3609c:	mov	r0, r4
   360a0:	bl	36410 <__assert_fail@plt+0x23820>
   360a4:	cmp	r0, #0
   360a8:	bne	36118 <__assert_fail@plt+0x23528>
   360ac:	b	361f0 <__assert_fail@plt+0x23600>
   360b0:	mov	r9, sl
   360b4:	mov	r8, r7
   360b8:	mov	r0, r5
   360bc:	mov	r1, sl
   360c0:	mov	r2, r6
   360c4:	bl	36388 <__assert_fail@plt+0x23798>
   360c8:	mov	sl, #12
   360cc:	cmn	r0, #1
   360d0:	beq	361bc <__assert_fail@plt+0x235cc>
   360d4:	mov	r7, r0
   360d8:	ldr	r0, [r5, #20]
   360dc:	add	r0, r0, r8, lsl #2
   360e0:	mov	r1, r7
   360e4:	bl	36410 <__assert_fail@plt+0x23820>
   360e8:	cmp	r0, #0
   360ec:	beq	361bc <__assert_fail@plt+0x235cc>
   360f0:	ldr	r6, [sp, #16]
   360f4:	str	r6, [sp]
   360f8:	mov	r0, r5
   360fc:	mov	r1, r9
   36100:	mov	r2, r7
   36104:	ldr	r3, [sp, #8]
   36108:	bl	35f9c <__assert_fail@plt+0x233ac>
   3610c:	cmp	r0, #0
   36110:	mov	r7, r8
   36114:	bne	361b8 <__assert_fail@plt+0x235c8>
   36118:	ldr	r0, [r5, #20]
   3611c:	ldr	r1, [sp, #12]
   36120:	add	r0, r0, r1, lsl #2
   36124:	ldr	r0, [r0, #8]
   36128:	ldr	r9, [r0, #4]
   3612c:	mov	r0, r5
   36130:	mov	r1, r9
   36134:	mov	r2, r6
   36138:	bl	36388 <__assert_fail@plt+0x23798>
   3613c:	mov	sl, #12
   36140:	cmn	r0, #1
   36144:	beq	361bc <__assert_fail@plt+0x235cc>
   36148:	mov	r8, r0
   3614c:	ldr	r0, [r5, #20]
   36150:	add	r0, r0, r7, lsl #2
   36154:	mov	r1, r8
   36158:	bl	36410 <__assert_fail@plt+0x23820>
   3615c:	cmp	r0, #0
   36160:	bne	35fc0 <__assert_fail@plt+0x233d0>
   36164:	b	361bc <__assert_fail@plt+0x235cc>
   36168:	ldr	r1, [sp, #8]
   3616c:	cmp	r9, r1
   36170:	bne	3617c <__assert_fail@plt+0x2358c>
   36174:	cmp	r8, r9
   36178:	bne	361c8 <__assert_fail@plt+0x235d8>
   3617c:	ldr	r0, [r0]
   36180:	ubfx	r0, r0, #8, #10
   36184:	ldr	r2, [sp, #16]
   36188:	orr	r2, r0, r2
   3618c:	mov	r0, r5
   36190:	mov	r9, sl
   36194:	mov	r1, sl
   36198:	str	r2, [sp, #16]
   3619c:	b	36138 <__assert_fail@plt+0x23548>
   361a0:	ldr	r0, [r5, #12]
   361a4:	ldr	r1, [r0, r9, lsl #2]
   361a8:	str	r1, [r0, r8, lsl #2]
   361ac:	mov	r0, #0
   361b0:	sub	sp, fp, #28
   361b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   361b8:	mov	sl, r0
   361bc:	mov	r0, sl
   361c0:	sub	sp, fp, #28
   361c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   361c8:	mov	r0, r4
   361cc:	mov	r1, sl
   361d0:	bl	36410 <__assert_fail@plt+0x23820>
   361d4:	mov	r1, r0
   361d8:	mov	sl, #12
   361dc:	mov	r0, #0
   361e0:	cmp	r1, #0
   361e4:	moveq	r0, sl
   361e8:	sub	sp, fp, #28
   361ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   361f0:	mov	sl, #12
   361f4:	b	361bc <__assert_fail@plt+0x235cc>
   361f8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   361fc:	add	fp, sp, #24
   36200:	mov	r8, #0
   36204:	cmp	r1, #0
   36208:	beq	3635c <__assert_fail@plt+0x2376c>
   3620c:	mov	r6, r1
   36210:	ldr	r1, [r1, #4]
   36214:	cmp	r1, #0
   36218:	beq	3635c <__assert_fail@plt+0x2376c>
   3621c:	mov	r9, r0
   36220:	ldr	r2, [r0]
   36224:	ldr	r0, [r0, #4]
   36228:	add	r3, r0, r1, lsl #1
   3622c:	cmp	r2, r3
   36230:	bge	3625c <__assert_fail@plt+0x2366c>
   36234:	add	r7, r2, r1
   36238:	lsl	r1, r7, #3
   3623c:	ldr	r0, [r9, #8]
   36240:	bl	2f894 <__assert_fail@plt+0x1cca4>
   36244:	cmp	r0, #0
   36248:	beq	3637c <__assert_fail@plt+0x2378c>
   3624c:	str	r0, [r9, #8]
   36250:	lsl	r0, r7, #1
   36254:	str	r0, [r9]
   36258:	ldr	r0, [r9, #4]
   3625c:	cmp	r0, #0
   36260:	beq	36364 <__assert_fail@plt+0x23774>
   36264:	ldr	r2, [r6, #4]
   36268:	add	r7, r0, r2, lsl #1
   3626c:	sub	r1, r0, #1
   36270:	sub	r0, r2, #1
   36274:	orrs	r2, r0, r1
   36278:	bmi	362c0 <__assert_fail@plt+0x236d0>
   3627c:	ldr	r2, [r6, #8]
   36280:	ldr	r3, [r9, #8]
   36284:	b	362a4 <__assert_fail@plt+0x236b4>
   36288:	subge	r1, r1, #1
   3628c:	sublt	r7, r7, #1
   36290:	strlt	r4, [r3, r7, lsl #2]
   36294:	sublt	r0, r0, #1
   36298:	orr	r5, r0, r1
   3629c:	cmn	r5, #1
   362a0:	ble	362c0 <__assert_fail@plt+0x236d0>
   362a4:	ldr	r4, [r2, r0, lsl #2]
   362a8:	ldr	r5, [r3, r1, lsl #2]
   362ac:	cmp	r5, r4
   362b0:	bne	36288 <__assert_fail@plt+0x23698>
   362b4:	sub	r1, r1, #1
   362b8:	sub	r0, r0, #1
   362bc:	b	36298 <__assert_fail@plt+0x236a8>
   362c0:	cmp	r0, #0
   362c4:	bmi	362e4 <__assert_fail@plt+0x236f4>
   362c8:	add	r2, r0, #1
   362cc:	sub	r7, r7, r2
   362d0:	ldr	r0, [r9, #8]
   362d4:	add	r0, r0, r7, lsl #2
   362d8:	ldr	r1, [r6, #8]
   362dc:	lsl	r2, r2, #2
   362e0:	bl	125f0 <memcpy@plt>
   362e4:	ldr	r1, [r6, #4]
   362e8:	ldr	r0, [r9, #4]
   362ec:	add	r1, r0, r1, lsl #1
   362f0:	sub	r1, r1, #1
   362f4:	sub	r2, r1, r7
   362f8:	adds	r2, r2, #1
   362fc:	bcs	3635c <__assert_fail@plt+0x2376c>
   36300:	add	r3, r2, r0
   36304:	str	r3, [r9, #4]
   36308:	sub	r3, r0, #1
   3630c:	ldr	r0, [r9, #8]
   36310:	ldr	r6, [r0, r3, lsl #2]
   36314:	ldr	r5, [r0, r1, lsl #2]
   36318:	cmp	r5, r6
   3631c:	ble	36338 <__assert_fail@plt+0x23748>
   36320:	add	r6, r2, r3
   36324:	str	r5, [r0, r6, lsl #2]
   36328:	subs	r2, r2, #1
   3632c:	sub	r1, r1, #1
   36330:	bne	36310 <__assert_fail@plt+0x23720>
   36334:	b	3635c <__assert_fail@plt+0x2376c>
   36338:	add	r5, r2, r3
   3633c:	str	r6, [r0, r5, lsl #2]
   36340:	sub	r6, r3, #1
   36344:	cmp	r3, #0
   36348:	mov	r3, r6
   3634c:	bgt	36310 <__assert_fail@plt+0x23720>
   36350:	add	r1, r0, r7, lsl #2
   36354:	lsl	r2, r2, #2
   36358:	bl	125f0 <memcpy@plt>
   3635c:	mov	r0, r8
   36360:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   36364:	ldr	r0, [r6, #4]
   36368:	str	r0, [r9, #4]
   3636c:	ldr	r0, [r9, #8]
   36370:	ldr	r2, [r6, #4]
   36374:	ldr	r1, [r6, #8]
   36378:	b	36354 <__assert_fail@plt+0x23764>
   3637c:	mov	r8, #12
   36380:	mov	r0, r8
   36384:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   36388:	push	{r4, r5, r6, sl, fp, lr}
   3638c:	add	fp, sp, #16
   36390:	mov	r6, r2
   36394:	mov	r4, r1
   36398:	mov	r5, r0
   3639c:	ldr	r0, [r0]
   363a0:	ldr	r1, [r0, r1, lsl #3]!
   363a4:	ldr	r2, [r0, #4]
   363a8:	mov	r0, r5
   363ac:	bl	35ac0 <__assert_fail@plt+0x22ed0>
   363b0:	cmn	r0, #1
   363b4:	ldrne	r1, [r5]
   363b8:	addne	r1, r1, r0, lsl #3
   363bc:	ldrne	r2, [r1, #4]
   363c0:	bfine	r2, r6, #8, #10
   363c4:	strne	r2, [r1, #4]
   363c8:	ldrne	r1, [r5]
   363cc:	addne	r2, r1, r4, lsl #3
   363d0:	ldrne	r2, [r2, #4]
   363d4:	movwne	r3, #65280	; 0xff00
   363d8:	movtne	r3, #3
   363dc:	andne	r2, r2, r3
   363e0:	addne	r1, r1, r0, lsl #3
   363e4:	ldrne	r3, [r1, #4]
   363e8:	orrne	r2, r2, r3
   363ec:	strne	r2, [r1, #4]
   363f0:	ldrne	r1, [r5]
   363f4:	addne	r1, r1, r0, lsl #3
   363f8:	ldrne	r2, [r1, #4]
   363fc:	orrne	r2, r2, #262144	; 0x40000
   36400:	strne	r2, [r1, #4]
   36404:	ldrne	r1, [r5, #16]
   36408:	strne	r4, [r1, r0, lsl #2]
   3640c:	pop	{r4, r5, r6, sl, fp, pc}
   36410:	push	{r4, r5, fp, lr}
   36414:	add	fp, sp, #8
   36418:	mov	r5, r1
   3641c:	mov	r4, r0
   36420:	ldr	r2, [r0]
   36424:	cmp	r2, #0
   36428:	beq	36454 <__assert_fail@plt+0x23864>
   3642c:	ldr	r1, [r4, #4]
   36430:	cmp	r1, #0
   36434:	bne	3646c <__assert_fail@plt+0x2387c>
   36438:	ldr	r0, [r4, #8]
   3643c:	str	r5, [r0]
   36440:	ldr	r0, [r4, #4]
   36444:	add	r0, r0, #1
   36448:	str	r0, [r4, #4]
   3644c:	mov	r0, #1
   36450:	pop	{r4, r5, fp, pc}
   36454:	mov	r0, r4
   36458:	mov	r1, r5
   3645c:	bl	35d0c <__assert_fail@plt+0x2311c>
   36460:	clz	r0, r0
   36464:	lsr	r0, r0, #5
   36468:	pop	{r4, r5, fp, pc}
   3646c:	cmp	r2, r1
   36470:	bne	36498 <__assert_fail@plt+0x238a8>
   36474:	lsl	r0, r2, #1
   36478:	str	r0, [r4]
   3647c:	ldr	r0, [r4, #8]
   36480:	lsl	r1, r2, #3
   36484:	bl	2f894 <__assert_fail@plt+0x1cca4>
   36488:	cmp	r0, #0
   3648c:	beq	36510 <__assert_fail@plt+0x23920>
   36490:	str	r0, [r4, #8]
   36494:	ldr	r1, [r4, #4]
   36498:	ldr	ip, [r4, #8]
   3649c:	ldr	r2, [ip]
   364a0:	cmp	r2, r5
   364a4:	ble	364d8 <__assert_fail@plt+0x238e8>
   364a8:	cmp	r1, #1
   364ac:	blt	36508 <__assert_fail@plt+0x23918>
   364b0:	add	r3, ip, r1, lsl #2
   364b4:	mov	r2, r3
   364b8:	ldr	r0, [r2, #-4]!
   364bc:	str	r0, [r3]
   364c0:	sub	r1, r1, #1
   364c4:	cmp	r1, #0
   364c8:	mov	r3, r2
   364cc:	bgt	364b8 <__assert_fail@plt+0x238c8>
   364d0:	mov	r1, #0
   364d4:	b	36508 <__assert_fail@plt+0x23918>
   364d8:	add	r2, ip, r1, lsl #2
   364dc:	ldr	r3, [r2, #-4]
   364e0:	cmp	r3, r5
   364e4:	ble	36508 <__assert_fail@plt+0x23918>
   364e8:	sub	r1, r1, #2
   364ec:	str	r3, [r2]
   364f0:	ldr	r3, [r2, #-8]
   364f4:	sub	r2, r2, #4
   364f8:	sub	r1, r1, #1
   364fc:	cmp	r3, r5
   36500:	bgt	364ec <__assert_fail@plt+0x238fc>
   36504:	add	r1, r1, #2
   36508:	str	r5, [ip, r1, lsl #2]
   3650c:	b	36440 <__assert_fail@plt+0x23850>
   36510:	mov	r0, #0
   36514:	pop	{r4, r5, fp, pc}
   36518:	push	{r4, r5, fp, lr}
   3651c:	add	fp, sp, #8
   36520:	mov	ip, r0
   36524:	ldr	r3, [r0, #8]
   36528:	sub	lr, r3, #1
   3652c:	mvn	r0, #0
   36530:	cmp	lr, #1
   36534:	blt	3658c <__assert_fail@plt+0x2399c>
   36538:	ldr	r4, [ip]
   3653c:	add	r4, r4, lr, lsl #3
   36540:	ldr	r5, [r4, #4]
   36544:	ands	r4, r5, #262144	; 0x40000
   36548:	beq	3658c <__assert_fail@plt+0x2399c>
   3654c:	ldr	r4, [ip, #16]
   36550:	sub	lr, r4, #4
   36554:	ldr	r4, [lr, r3, lsl #2]
   36558:	cmp	r4, r1
   3655c:	ubfxeq	r4, r5, #8, #10
   36560:	cmpeq	r4, r2
   36564:	beq	36590 <__assert_fail@plt+0x239a0>
   36568:	sub	r4, r3, #2
   3656c:	cmp	r4, #1
   36570:	blt	3658c <__assert_fail@plt+0x2399c>
   36574:	ldr	r4, [ip]
   36578:	add	r4, r4, r3, lsl #3
   3657c:	ldr	r5, [r4, #-12]
   36580:	ands	r4, r5, #262144	; 0x40000
   36584:	sub	r3, r3, #1
   36588:	bne	36554 <__assert_fail@plt+0x23964>
   3658c:	pop	{r4, r5, fp, pc}
   36590:	sub	r0, r3, #1
   36594:	pop	{r4, r5, fp, pc}
   36598:	push	{r4, r5, fp, lr}
   3659c:	add	fp, sp, #8
   365a0:	mov	r4, r1
   365a4:	mov	r5, r0
   365a8:	ldr	r0, [r0]
   365ac:	ldr	r1, [r5, #4]
   365b0:	cmp	r0, r1
   365b4:	bne	365dc <__assert_fail@plt+0x239ec>
   365b8:	mov	r1, #2
   365bc:	add	r0, r1, r0, lsl #1
   365c0:	str	r0, [r5]
   365c4:	lsl	r1, r0, #2
   365c8:	ldr	r0, [r5, #8]
   365cc:	bl	2f894 <__assert_fail@plt+0x1cca4>
   365d0:	cmp	r0, #0
   365d4:	beq	365f4 <__assert_fail@plt+0x23a04>
   365d8:	str	r0, [r5, #8]
   365dc:	ldmib	r5, {r0, r1}
   365e0:	add	r2, r0, #1
   365e4:	str	r2, [r5, #4]
   365e8:	str	r4, [r1, r0, lsl #2]
   365ec:	mov	r0, #1
   365f0:	pop	{r4, r5, fp, pc}
   365f4:	mov	r0, #0
   365f8:	pop	{r4, r5, fp, pc}
   365fc:	push	{r4, r5, fp, lr}
   36600:	add	fp, sp, #8
   36604:	mov	r5, r1
   36608:	mov	r4, r0
   3660c:	ldr	r0, [r1, #4]
   36610:	str	r0, [r4, #4]
   36614:	ldr	r1, [r1, #4]
   36618:	cmp	r1, #1
   3661c:	blt	36650 <__assert_fail@plt+0x23a60>
   36620:	str	r0, [r4]
   36624:	lsl	r0, r0, #2
   36628:	bl	2ed88 <__assert_fail@plt+0x1c198>
   3662c:	str	r0, [r4, #8]
   36630:	cmp	r0, #0
   36634:	beq	36664 <__assert_fail@plt+0x23a74>
   36638:	ldr	r2, [r5, #4]
   3663c:	ldr	r1, [r5, #8]
   36640:	lsl	r2, r2, #2
   36644:	bl	125f0 <memcpy@plt>
   36648:	mov	r0, #0
   3664c:	pop	{r4, r5, fp, pc}
   36650:	mov	r0, #0
   36654:	str	r0, [r4]
   36658:	str	r0, [r4, #4]
   3665c:	str	r0, [r4, #8]
   36660:	pop	{r4, r5, fp, pc}
   36664:	mov	r0, #0
   36668:	str	r0, [r4]
   3666c:	str	r0, [r4, #4]
   36670:	mov	r0, #12
   36674:	pop	{r4, r5, fp, pc}
   36678:	push	{r4, r5, r6, r7, fp, lr}
   3667c:	add	fp, sp, #16
   36680:	mov	ip, r0
   36684:	ldr	r0, [r0, #4]
   36688:	cmp	r0, #1
   3668c:	blt	366e0 <__assert_fail@plt+0x23af0>
   36690:	subs	r2, r0, #1
   36694:	mov	r0, #0
   36698:	mov	r3, #0
   3669c:	beq	366cc <__assert_fail@plt+0x23adc>
   366a0:	ldr	lr, [ip, #8]
   366a4:	mov	r3, #0
   366a8:	mov	r4, #1
   366ac:	add	r5, r2, r3
   366b0:	lsr	r6, r5, #1
   366b4:	ldr	r7, [lr, r6, lsl #2]
   366b8:	cmp	r7, r1
   366bc:	movge	r2, r6
   366c0:	addlt	r3, r4, r5, lsr #1
   366c4:	cmp	r3, r2
   366c8:	bcc	366ac <__assert_fail@plt+0x23abc>
   366cc:	ldr	r2, [ip, #8]
   366d0:	ldr	r2, [r2, r3, lsl #2]
   366d4:	cmp	r2, r1
   366d8:	addeq	r0, r3, #1
   366dc:	pop	{r4, r5, r6, r7, fp, pc}
   366e0:	mov	r0, #0
   366e4:	pop	{r4, r5, r6, r7, fp, pc}
   366e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   366ec:	add	fp, sp, #28
   366f0:	sub	sp, sp, #12
   366f4:	mov	r6, r1
   366f8:	ldr	r1, [r2, #4]
   366fc:	cmp	r1, #0
   36700:	beq	367d0 <__assert_fail@plt+0x23be0>
   36704:	mov	r5, r3
   36708:	mov	sl, r2
   3670c:	str	r0, [sp, #4]
   36710:	mov	r0, r2
   36714:	mov	r1, r3
   36718:	bl	367e4 <__assert_fail@plt+0x23bf4>
   3671c:	mov	r4, r0
   36720:	ldr	r0, [r6, #32]
   36724:	str	r6, [sp, #8]
   36728:	ldr	r1, [r6, #68]	; 0x44
   3672c:	and	r1, r1, r4
   36730:	add	r1, r1, r1, lsl #1
   36734:	mov	r6, r0
   36738:	ldr	r2, [r6, r1, lsl #2]!
   3673c:	cmp	r2, #1
   36740:	blt	3679c <__assert_fail@plt+0x23bac>
   36744:	add	r0, r0, r1, lsl #2
   36748:	ldr	r8, [r0, #8]
   3674c:	mov	r9, #0
   36750:	b	36764 <__assert_fail@plt+0x23b74>
   36754:	ldr	r0, [r6]
   36758:	add	r9, r9, #1
   3675c:	cmp	r9, r0
   36760:	bge	3679c <__assert_fail@plt+0x23bac>
   36764:	ldr	r7, [r8, r9, lsl #2]
   36768:	ldr	r0, [r7]
   3676c:	cmp	r0, r4
   36770:	bne	36754 <__assert_fail@plt+0x23b64>
   36774:	ldrb	r0, [r7, #52]	; 0x34
   36778:	and	r0, r0, #15
   3677c:	cmp	r0, r5
   36780:	bne	36754 <__assert_fail@plt+0x23b64>
   36784:	ldr	r0, [r7, #40]	; 0x28
   36788:	mov	r1, sl
   3678c:	bl	36810 <__assert_fail@plt+0x23c20>
   36790:	cmp	r0, #0
   36794:	beq	36754 <__assert_fail@plt+0x23b64>
   36798:	b	367d8 <__assert_fail@plt+0x23be8>
   3679c:	ldr	r0, [sp, #8]
   367a0:	mov	r1, sl
   367a4:	mov	r2, r5
   367a8:	mov	r3, r4
   367ac:	bl	36878 <__assert_fail@plt+0x23c88>
   367b0:	mov	r7, r0
   367b4:	cmp	r0, #0
   367b8:	bne	367d8 <__assert_fail@plt+0x23be8>
   367bc:	mov	r0, #12
   367c0:	ldr	r1, [sp, #4]
   367c4:	str	r0, [r1]
   367c8:	mov	r7, #0
   367cc:	b	367d8 <__assert_fail@plt+0x23be8>
   367d0:	mov	r7, #0
   367d4:	str	r7, [r0]
   367d8:	mov	r0, r7
   367dc:	sub	sp, fp, #28
   367e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   367e4:	mov	r2, r0
   367e8:	ldr	r3, [r0, #4]
   367ec:	add	r0, r3, r1
   367f0:	cmp	r3, #1
   367f4:	bxlt	lr
   367f8:	ldr	r1, [r2, #8]
   367fc:	ldr	r2, [r1], #4
   36800:	add	r0, r2, r0
   36804:	subs	r3, r3, #1
   36808:	bne	367fc <__assert_fail@plt+0x23c0c>
   3680c:	bx	lr
   36810:	push	{fp, lr}
   36814:	mov	fp, sp
   36818:	mov	lr, r0
   3681c:	mov	r0, #0
   36820:	cmp	lr, #0
   36824:	cmpne	r1, #0
   36828:	bne	36830 <__assert_fail@plt+0x23c40>
   3682c:	pop	{fp, pc}
   36830:	ldr	ip, [lr, #4]
   36834:	ldr	r3, [r1, #4]
   36838:	cmp	ip, r3
   3683c:	popne	{fp, pc}
   36840:	sub	r3, ip, #1
   36844:	add	r2, r3, #1
   36848:	cmp	r2, #1
   3684c:	blt	36870 <__assert_fail@plt+0x23c80>
   36850:	ldr	r2, [r1, #8]
   36854:	ldr	ip, [r2, r3, lsl #2]
   36858:	ldr	r2, [lr, #8]
   3685c:	ldr	r2, [r2, r3, lsl #2]
   36860:	sub	r3, r3, #1
   36864:	cmp	r2, ip
   36868:	beq	36844 <__assert_fail@plt+0x23c54>
   3686c:	b	3682c <__assert_fail@plt+0x23c3c>
   36870:	mov	r0, #1
   36874:	pop	{fp, pc}
   36878:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3687c:	add	fp, sp, #28
   36880:	sub	sp, sp, #20
   36884:	mov	r8, r3
   36888:	mov	r9, r2
   3688c:	mov	r7, r1
   36890:	mov	r6, r0
   36894:	mov	r0, #56	; 0x38
   36898:	mov	r1, #1
   3689c:	bl	2c4f4 <__assert_fail@plt+0x19904>
   368a0:	cmp	r0, #0
   368a4:	beq	36a78 <__assert_fail@plt+0x23e88>
   368a8:	mov	r4, r0
   368ac:	add	r5, r0, #4
   368b0:	mov	r0, r5
   368b4:	mov	r1, r7
   368b8:	bl	365fc <__assert_fail@plt+0x23a0c>
   368bc:	cmp	r0, #0
   368c0:	bne	36a80 <__assert_fail@plt+0x23e90>
   368c4:	str	r8, [sp, #4]
   368c8:	str	r5, [r4, #40]	; 0x28
   368cc:	and	r0, r9, #15
   368d0:	ldrb	r1, [r4, #52]	; 0x34
   368d4:	and	r1, r1, #240	; 0xf0
   368d8:	orr	r0, r1, r0
   368dc:	strb	r0, [r4, #52]	; 0x34
   368e0:	ldr	r0, [r7, #4]
   368e4:	cmp	r0, #1
   368e8:	blt	36a4c <__assert_fail@plt+0x23e5c>
   368ec:	mov	r3, r5
   368f0:	and	r0, r9, #4
   368f4:	str	r0, [sp]
   368f8:	and	r0, r9, #2
   368fc:	str	r0, [sp, #8]
   36900:	and	r0, r9, #1
   36904:	str	r0, [sp, #16]
   36908:	mov	r8, #0
   3690c:	movw	r0, #65280	; 0xff00
   36910:	movt	r0, #3
   36914:	add	sl, r0, #255	; 0xff
   36918:	mov	r9, #0
   3691c:	str	r5, [sp, #12]
   36920:	b	36948 <__assert_fail@plt+0x23d58>
   36924:	sub	r1, r8, r9
   36928:	mov	r0, r3
   3692c:	bl	36a8c <__assert_fail@plt+0x23e9c>
   36930:	ldr	r3, [sp, #12]
   36934:	add	r9, r9, #1
   36938:	ldr	r0, [r7, #4]
   3693c:	add	r8, r8, #1
   36940:	cmp	r8, r0
   36944:	bge	36a4c <__assert_fail@plt+0x23e5c>
   36948:	ldr	r0, [r7, #8]
   3694c:	ldr	r0, [r0, r8, lsl #2]
   36950:	ldr	r1, [r6]
   36954:	add	r0, r1, r0, lsl #3
   36958:	ldr	r5, [r0, #4]
   3695c:	and	r0, r5, sl
   36960:	cmp	r0, #1
   36964:	beq	36938 <__assert_fail@plt+0x23d48>
   36968:	movw	r0, #65280	; 0xff00
   3696c:	movt	r0, #3
   36970:	and	r0, r5, r0
   36974:	mov	r1, #32
   36978:	and	r1, r1, r5, lsr #15
   3697c:	ldrb	r2, [r4, #52]	; 0x34
   36980:	orr	r1, r2, r1
   36984:	strb	r1, [r4, #52]	; 0x34
   36988:	uxtb	r2, r5
   3698c:	cmp	r2, #2
   36990:	beq	369a4 <__assert_fail@plt+0x23db4>
   36994:	cmp	r2, #4
   36998:	bne	369b0 <__assert_fail@plt+0x23dc0>
   3699c:	mov	r2, #64	; 0x40
   369a0:	b	369a8 <__assert_fail@plt+0x23db8>
   369a4:	mov	r2, #16
   369a8:	orr	r1, r1, r2
   369ac:	strb	r1, [r4, #52]	; 0x34
   369b0:	cmp	r0, #0
   369b4:	beq	36938 <__assert_fail@plt+0x23d48>
   369b8:	ldr	r0, [r4, #40]	; 0x28
   369bc:	cmp	r0, r3
   369c0:	bne	369fc <__assert_fail@plt+0x23e0c>
   369c4:	mov	r0, #12
   369c8:	bl	2ed88 <__assert_fail@plt+0x1c198>
   369cc:	cmp	r0, #0
   369d0:	beq	36a70 <__assert_fail@plt+0x23e80>
   369d4:	str	r0, [r4, #40]	; 0x28
   369d8:	mov	r1, r7
   369dc:	bl	365fc <__assert_fail@plt+0x23a0c>
   369e0:	cmp	r0, #0
   369e4:	bne	36a70 <__assert_fail@plt+0x23e80>
   369e8:	ldrb	r0, [r4, #52]	; 0x34
   369ec:	orr	r0, r0, #128	; 0x80
   369f0:	strb	r0, [r4, #52]	; 0x34
   369f4:	mov	r9, #0
   369f8:	ldr	r3, [sp, #12]
   369fc:	ldr	r0, [sp, #16]
   36a00:	cmp	r0, #0
   36a04:	bne	36a10 <__assert_fail@plt+0x23e20>
   36a08:	ands	r0, r5, #256	; 0x100
   36a0c:	bne	36924 <__assert_fail@plt+0x23d34>
   36a10:	ldr	r0, [sp, #16]
   36a14:	cmp	r0, #0
   36a18:	andsne	r0, r5, #512	; 0x200
   36a1c:	bne	36924 <__assert_fail@plt+0x23d34>
   36a20:	ldr	r0, [sp, #8]
   36a24:	cmp	r0, #0
   36a28:	bne	36a34 <__assert_fail@plt+0x23e44>
   36a2c:	ands	r0, r5, #4096	; 0x1000
   36a30:	bne	36924 <__assert_fail@plt+0x23d34>
   36a34:	ldr	r0, [sp]
   36a38:	cmp	r0, #0
   36a3c:	bne	36938 <__assert_fail@plt+0x23d48>
   36a40:	ands	r0, r5, #16384	; 0x4000
   36a44:	bne	36924 <__assert_fail@plt+0x23d34>
   36a48:	b	36938 <__assert_fail@plt+0x23d48>
   36a4c:	mov	r0, r6
   36a50:	mov	r1, r4
   36a54:	ldr	r2, [sp, #4]
   36a58:	bl	36ad4 <__assert_fail@plt+0x23ee4>
   36a5c:	cmp	r0, #0
   36a60:	bne	36a70 <__assert_fail@plt+0x23e80>
   36a64:	mov	r0, r4
   36a68:	sub	sp, fp, #28
   36a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36a70:	mov	r0, r4
   36a74:	bl	30ffc <__assert_fail@plt+0x1e40c>
   36a78:	mov	r4, #0
   36a7c:	b	36a64 <__assert_fail@plt+0x23e74>
   36a80:	mov	r0, r4
   36a84:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   36a88:	b	36a78 <__assert_fail@plt+0x23e88>
   36a8c:	cmp	r1, #0
   36a90:	bxmi	lr
   36a94:	ldr	r2, [r0, #4]
   36a98:	cmp	r2, r1
   36a9c:	subgt	r2, r2, #1
   36aa0:	strgt	r2, [r0, #4]
   36aa4:	cmpgt	r2, r1
   36aa8:	bgt	36ab0 <__assert_fail@plt+0x23ec0>
   36aac:	bx	lr
   36ab0:	ldr	r2, [r0, #8]
   36ab4:	add	r3, r2, r1, lsl #2
   36ab8:	ldr	r3, [r3, #4]
   36abc:	str	r3, [r2, r1, lsl #2]
   36ac0:	add	r1, r1, #1
   36ac4:	ldr	r3, [r0, #4]
   36ac8:	cmp	r1, r3
   36acc:	blt	36ab4 <__assert_fail@plt+0x23ec4>
   36ad0:	b	36aac <__assert_fail@plt+0x23ebc>
   36ad4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36ad8:	add	fp, sp, #28
   36adc:	sub	sp, sp, #4
   36ae0:	mov	r9, r2
   36ae4:	mov	r4, r1
   36ae8:	mov	r7, r0
   36aec:	str	r2, [r1]
   36af0:	ldr	r1, [r1, #8]
   36af4:	add	r5, r4, #16
   36af8:	mov	r0, r5
   36afc:	bl	35f6c <__assert_fail@plt+0x2337c>
   36b00:	mov	r8, #12
   36b04:	cmp	r0, #0
   36b08:	bne	36ba4 <__assert_fail@plt+0x23fb4>
   36b0c:	ldr	r0, [r4, #8]
   36b10:	cmp	r0, #1
   36b14:	blt	36b60 <__assert_fail@plt+0x23f70>
   36b18:	mov	r6, #0
   36b1c:	b	36b30 <__assert_fail@plt+0x23f40>
   36b20:	ldr	r0, [r4, #8]
   36b24:	add	r6, r6, #1
   36b28:	cmp	r6, r0
   36b2c:	bge	36b60 <__assert_fail@plt+0x23f70>
   36b30:	ldr	r0, [r4, #12]
   36b34:	ldr	r1, [r0, r6, lsl #2]
   36b38:	ldr	r0, [r7]
   36b3c:	add	r0, r0, r1, lsl #3
   36b40:	ldrb	r0, [r0, #4]
   36b44:	tst	r0, #8
   36b48:	bne	36b20 <__assert_fail@plt+0x23f30>
   36b4c:	mov	r0, r5
   36b50:	bl	36598 <__assert_fail@plt+0x239a8>
   36b54:	cmp	r0, #0
   36b58:	bne	36b20 <__assert_fail@plt+0x23f30>
   36b5c:	b	36ba4 <__assert_fail@plt+0x23fb4>
   36b60:	ldr	sl, [r7, #32]
   36b64:	ldr	r0, [r7, #68]	; 0x44
   36b68:	and	r0, r0, r9
   36b6c:	add	r7, r0, r0, lsl #1
   36b70:	mov	r6, sl
   36b74:	ldr	r1, [r6, r7, lsl #2]!
   36b78:	mov	r5, r6
   36b7c:	ldr	r0, [r5, #4]!
   36b80:	cmp	r0, r1
   36b84:	ble	36bb0 <__assert_fail@plt+0x23fc0>
   36b88:	add	r0, sl, r7, lsl #2
   36b8c:	ldr	r0, [r0, #8]
   36b90:	ldr	r1, [r6]
   36b94:	add	r2, r1, #1
   36b98:	str	r2, [r6]
   36b9c:	str	r4, [r0, r1, lsl #2]
   36ba0:	mov	r8, #0
   36ba4:	mov	r0, r8
   36ba8:	sub	sp, fp, #28
   36bac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36bb0:	add	r9, sl, r7, lsl #2
   36bb4:	ldr	r0, [r9, #8]!
   36bb8:	mov	r2, #2
   36bbc:	add	r1, r2, r1, lsl #1
   36bc0:	str	r1, [sp]
   36bc4:	lsl	r1, r1, #2
   36bc8:	bl	2f894 <__assert_fail@plt+0x1cca4>
   36bcc:	cmp	r0, #0
   36bd0:	beq	36ba4 <__assert_fail@plt+0x23fb4>
   36bd4:	str	r0, [r9]
   36bd8:	ldr	r0, [sp]
   36bdc:	str	r0, [r5]
   36be0:	b	36b88 <__assert_fail@plt+0x23f98>
   36be4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36be8:	add	fp, sp, #28
   36bec:	sub	sp, sp, #4
   36bf0:	mov	r5, r2
   36bf4:	mov	sl, r1
   36bf8:	mov	r4, r0
   36bfc:	add	r8, r2, #1
   36c00:	cmp	r3, #1
   36c04:	beq	36c54 <__assert_fail@plt+0x24064>
   36c08:	cmp	r3, #0
   36c0c:	bne	36c98 <__assert_fail@plt+0x240a8>
   36c10:	lsl	r6, r8, #2
   36c14:	mov	r0, r6
   36c18:	bl	2ed88 <__assert_fail@plt+0x1c198>
   36c1c:	str	r0, [r4, #4]
   36c20:	mov	r7, #0
   36c24:	cmp	r0, #0
   36c28:	beq	36cd8 <__assert_fail@plt+0x240e8>
   36c2c:	mov	r0, r6
   36c30:	bl	2ed88 <__assert_fail@plt+0x1c198>
   36c34:	str	r0, [r4, #8]
   36c38:	cmp	r0, #0
   36c3c:	beq	36d34 <__assert_fail@plt+0x24144>
   36c40:	str	r8, [r4]
   36c44:	mov	r6, #1
   36c48:	cmp	r5, #1
   36c4c:	bge	36c6c <__assert_fail@plt+0x2407c>
   36c50:	b	36ca4 <__assert_fail@plt+0x240b4>
   36c54:	ldr	r0, [r4]
   36c58:	mov	r6, #1
   36c5c:	cmp	r8, r0
   36c60:	bhi	36ce4 <__assert_fail@plt+0x240f4>
   36c64:	cmp	r5, #1
   36c68:	blt	36ca4 <__assert_fail@plt+0x240b4>
   36c6c:	add	r0, sl, #4
   36c70:	ldmib	r4, {r1, r2}
   36c74:	mov	r3, r5
   36c78:	ldr	r7, [r0, #-4]
   36c7c:	str	r7, [r1], #4
   36c80:	ldr	r7, [r0]
   36c84:	str	r7, [r2], #4
   36c88:	add	r0, r0, #8
   36c8c:	subs	r3, r3, #1
   36c90:	bne	36c78 <__assert_fail@plt+0x24088>
   36c94:	b	36ca8 <__assert_fail@plt+0x240b8>
   36c98:	mov	r6, #2
   36c9c:	cmp	r5, #1
   36ca0:	bge	36c6c <__assert_fail@plt+0x2407c>
   36ca4:	mov	r5, #0
   36ca8:	ldr	r0, [r4]
   36cac:	cmp	r5, r0
   36cb0:	bcs	36cd4 <__assert_fail@plt+0x240e4>
   36cb4:	ldmib	r4, {r0, r1}
   36cb8:	mvn	r2, #0
   36cbc:	str	r2, [r1, r5, lsl #2]
   36cc0:	str	r2, [r0, r5, lsl #2]
   36cc4:	add	r5, r5, #1
   36cc8:	ldr	r3, [r4]
   36ccc:	cmp	r5, r3
   36cd0:	bcc	36cbc <__assert_fail@plt+0x240cc>
   36cd4:	mov	r7, r6
   36cd8:	mov	r0, r7
   36cdc:	sub	sp, fp, #28
   36ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36ce4:	ldr	r0, [r4, #4]
   36ce8:	lsl	r9, r8, #2
   36cec:	mov	r1, r9
   36cf0:	bl	2f894 <__assert_fail@plt+0x1cca4>
   36cf4:	mov	r7, #0
   36cf8:	str	r0, [sp]
   36cfc:	cmp	r0, #0
   36d00:	beq	36cd8 <__assert_fail@plt+0x240e8>
   36d04:	ldr	r0, [r4, #8]
   36d08:	mov	r1, r9
   36d0c:	bl	2f894 <__assert_fail@plt+0x1cca4>
   36d10:	cmp	r0, #0
   36d14:	beq	36d40 <__assert_fail@plt+0x24150>
   36d18:	str	r8, [r4]
   36d1c:	ldr	r1, [sp]
   36d20:	str	r1, [r4, #4]
   36d24:	str	r0, [r4, #8]
   36d28:	cmp	r5, #1
   36d2c:	bge	36c6c <__assert_fail@plt+0x2407c>
   36d30:	b	36ca4 <__assert_fail@plt+0x240b4>
   36d34:	ldr	r0, [r4, #4]
   36d38:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   36d3c:	b	36cd8 <__assert_fail@plt+0x240e8>
   36d40:	ldr	r0, [sp]
   36d44:	b	36d38 <__assert_fail@plt+0x24148>
   36d48:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   36d4c:	add	fp, sp, #24
   36d50:	sub	sp, sp, #8
   36d54:	mov	r7, r3
   36d58:	mov	r4, r2
   36d5c:	mov	r8, r1
   36d60:	mov	r5, r0
   36d64:	ldr	r9, [fp, #16]
   36d68:	ldr	r6, [r9, #92]	; 0x5c
   36d6c:	str	r9, [sp, #4]
   36d70:	ldr	r0, [fp, #12]
   36d74:	str	r0, [sp]
   36d78:	ldr	r3, [fp, #8]
   36d7c:	mov	r0, r1
   36d80:	mov	r1, r2
   36d84:	mov	r2, r5
   36d88:	bl	31aa8 <__assert_fail@plt+0x1eeb8>
   36d8c:	cmp	r6, r7
   36d90:	movgt	r7, r6
   36d94:	add	r1, r4, #1
   36d98:	cmp	r1, r7
   36d9c:	movge	r1, r7
   36da0:	mov	r0, r5
   36da4:	bl	31b00 <__assert_fail@plt+0x1ef10>
   36da8:	cmp	r0, #0
   36dac:	bne	36df0 <__assert_fail@plt+0x24200>
   36db0:	add	r1, r9, #96	; 0x60
   36db4:	str	r1, [r5, #68]	; 0x44
   36db8:	ldrb	r1, [r9, #88]	; 0x58
   36dbc:	ubfx	r1, r1, #4, #1
   36dc0:	strb	r1, [r5, #78]	; 0x4e
   36dc4:	ldrb	r1, [r5, #75]	; 0x4b
   36dc8:	cmp	r1, #0
   36dcc:	beq	36dd8 <__assert_fail@plt+0x241e8>
   36dd0:	mov	r4, #0
   36dd4:	b	36de8 <__assert_fail@plt+0x241f8>
   36dd8:	str	r8, [r5, #4]
   36ddc:	ldr	r1, [r9, #92]	; 0x5c
   36de0:	cmp	r1, #1
   36de4:	movwgt	r4, #0
   36de8:	str	r4, [r5, #28]
   36dec:	str	r4, [r5, #32]
   36df0:	sub	sp, fp, #24
   36df4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   36df8:	push	{r4, r5, r6, sl, fp, lr}
   36dfc:	add	fp, sp, #16
   36e00:	mov	r4, r2
   36e04:	mov	r5, r0
   36e08:	mvn	r0, #0
   36e0c:	str	r1, [r5, #88]	; 0x58
   36e10:	str	r0, [r5, #92]	; 0x5c
   36e14:	cmp	r2, #1
   36e18:	blt	36e64 <__assert_fail@plt+0x24274>
   36e1c:	mov	r6, #12
   36e20:	movw	r0, #43690	; 0xaaaa
   36e24:	movt	r0, #2730	; 0xaaa
   36e28:	cmp	r4, r0
   36e2c:	bhi	36e5c <__assert_fail@plt+0x2426c>
   36e30:	add	r0, r4, r4, lsl #1
   36e34:	lsl	r0, r0, #3
   36e38:	bl	2ed88 <__assert_fail@plt+0x1c198>
   36e3c:	str	r0, [r5, #116]	; 0x74
   36e40:	lsl	r0, r4, #2
   36e44:	bl	2ed88 <__assert_fail@plt+0x1c198>
   36e48:	str	r0, [r5, #132]	; 0x84
   36e4c:	cmp	r0, #0
   36e50:	ldrne	r0, [r5, #116]	; 0x74
   36e54:	cmpne	r0, #0
   36e58:	bne	36e64 <__assert_fail@plt+0x24274>
   36e5c:	mov	r0, r6
   36e60:	pop	{r4, r5, r6, sl, fp, pc}
   36e64:	str	r4, [r5, #128]	; 0x80
   36e68:	mov	r0, #1
   36e6c:	str	r0, [r5, #120]	; 0x78
   36e70:	str	r4, [r5, #112]	; 0x70
   36e74:	mov	r6, #0
   36e78:	mov	r0, r6
   36e7c:	pop	{r4, r5, r6, sl, fp, pc}
   36e80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36e84:	add	fp, sp, #28
   36e88:	sub	sp, sp, #28
   36e8c:	mov	r6, r2
   36e90:	mov	r7, r1
   36e94:	mov	r4, r0
   36e98:	ldr	r0, [r0, #24]
   36e9c:	cmp	r0, r1
   36ea0:	ble	37010 <__assert_fail@plt+0x24420>
   36ea4:	ldr	r0, [r4, #80]	; 0x50
   36ea8:	cmp	r0, #2
   36eac:	movge	r0, #0
   36eb0:	strge	r0, [r4, #16]
   36eb4:	strge	r0, [r4, #20]
   36eb8:	mov	r0, #0
   36ebc:	strb	r0, [r4, #76]	; 0x4c
   36ec0:	str	r0, [r4, #24]
   36ec4:	str	r0, [r4, #28]
   36ec8:	str	r0, [r4, #32]
   36ecc:	mov	r0, #4
   36ed0:	tst	r6, #1
   36ed4:	movweq	r0, #6
   36ed8:	ldr	r1, [r4, #44]	; 0x2c
   36edc:	ldr	r2, [r4, #52]	; 0x34
   36ee0:	str	r1, [r4, #48]	; 0x30
   36ee4:	str	r2, [r4, #56]	; 0x38
   36ee8:	str	r0, [r4, #60]	; 0x3c
   36eec:	ldrb	r0, [r4, #75]	; 0x4b
   36ef0:	cmp	r0, #0
   36ef4:	mov	r5, r7
   36ef8:	bne	36f08 <__assert_fail@plt+0x24318>
   36efc:	ldr	r0, [r4]
   36f00:	str	r0, [r4, #4]
   36f04:	mov	r5, r7
   36f08:	cmp	r5, #0
   36f0c:	beq	36f98 <__assert_fail@plt+0x243a8>
   36f10:	ldr	r0, [r4, #32]
   36f14:	cmp	r5, r0
   36f18:	bge	37020 <__assert_fail@plt+0x24430>
   36f1c:	ldrb	r0, [r4, #76]	; 0x4c
   36f20:	cmp	r0, #0
   36f24:	bne	37158 <__assert_fail@plt+0x24568>
   36f28:	sub	r1, r5, #1
   36f2c:	mov	r0, r4
   36f30:	mov	r2, r6
   36f34:	bl	37e04 <__assert_fail@plt+0x25214>
   36f38:	str	r0, [r4, #60]	; 0x3c
   36f3c:	ldr	r0, [r4, #80]	; 0x50
   36f40:	cmp	r0, #2
   36f44:	blt	36f60 <__assert_fail@plt+0x24370>
   36f48:	ldr	r0, [r4, #8]
   36f4c:	ldr	r2, [r4, #28]
   36f50:	add	r1, r0, r5, lsl #2
   36f54:	sub	r2, r2, r5
   36f58:	lsl	r2, r2, #2
   36f5c:	bl	12584 <memmove@plt>
   36f60:	ldrb	r0, [r4, #75]	; 0x4b
   36f64:	cmp	r0, #0
   36f68:	bne	37250 <__assert_fail@plt+0x24660>
   36f6c:	ldr	r0, [r4, #28]
   36f70:	ldr	r1, [r4, #32]
   36f74:	sub	r0, r0, r5
   36f78:	sub	r1, r1, r5
   36f7c:	str	r0, [r4, #28]
   36f80:	str	r1, [r4, #32]
   36f84:	ldrb	r0, [r4, #75]	; 0x4b
   36f88:	cmp	r0, #0
   36f8c:	ldreq	r0, [r4, #4]
   36f90:	addeq	r0, r0, r5
   36f94:	streq	r0, [r4, #4]
   36f98:	str	r7, [r4, #24]
   36f9c:	ldr	r0, [r4, #48]	; 0x30
   36fa0:	ldr	r1, [r4, #56]	; 0x38
   36fa4:	ldr	r2, [r4, #80]	; 0x50
   36fa8:	sub	r0, r0, r5
   36fac:	str	r0, [r4, #48]	; 0x30
   36fb0:	sub	r1, r1, r5
   36fb4:	str	r1, [r4, #56]	; 0x38
   36fb8:	cmp	r2, #2
   36fbc:	blt	36fe4 <__assert_fail@plt+0x243f4>
   36fc0:	ldrb	r0, [r4, #72]	; 0x48
   36fc4:	cmp	r0, #0
   36fc8:	beq	36ff8 <__assert_fail@plt+0x24408>
   36fcc:	mov	r0, r4
   36fd0:	bl	31ba4 <__assert_fail@plt+0x1efb4>
   36fd4:	cmp	r0, #0
   36fd8:	beq	37000 <__assert_fail@plt+0x24410>
   36fdc:	sub	sp, fp, #28
   36fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36fe4:	ldrb	r1, [r4, #75]	; 0x4b
   36fe8:	cmp	r1, #0
   36fec:	bne	372e4 <__assert_fail@plt+0x246f4>
   36ff0:	str	r0, [r4, #28]
   36ff4:	b	37000 <__assert_fail@plt+0x24410>
   36ff8:	mov	r0, r4
   36ffc:	bl	321b4 <__assert_fail@plt+0x1f5c4>
   37000:	mov	r0, #0
   37004:	str	r0, [r4, #40]	; 0x28
   37008:	sub	sp, fp, #28
   3700c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37010:	sub	r5, r7, r0
   37014:	cmp	r5, #0
   37018:	bne	36f10 <__assert_fail@plt+0x24320>
   3701c:	b	36f98 <__assert_fail@plt+0x243a8>
   37020:	ldr	r9, [r4, #28]
   37024:	ldrb	r0, [r4, #76]	; 0x4c
   37028:	cmp	r0, #0
   3702c:	bne	373ec <__assert_fail@plt+0x247fc>
   37030:	mov	r0, #0
   37034:	str	r0, [r4, #28]
   37038:	ldr	r1, [r4, #80]	; 0x50
   3703c:	cmp	r1, #2
   37040:	blt	372fc <__assert_fail@plt+0x2470c>
   37044:	mvn	r0, #0
   37048:	str	r0, [sp, #24]
   3704c:	ldrb	r0, [r4, #73]	; 0x49
   37050:	cmp	r0, #0
   37054:	beq	37108 <__assert_fail@plt+0x24518>
   37058:	ldr	r2, [r4]
   3705c:	ldr	r0, [r4, #24]
   37060:	add	r0, r2, r0
   37064:	add	r8, r0, r5
   37068:	sub	r1, r5, r1
   3706c:	add	r1, r0, r1
   37070:	cmp	r1, r2
   37074:	movcc	r1, r2
   37078:	mov	sl, r8
   3707c:	sub	sl, sl, #1
   37080:	cmp	sl, r1
   37084:	bcc	370fc <__assert_fail@plt+0x2450c>
   37088:	ldrb	r2, [sl]
   3708c:	and	r2, r2, #192	; 0xc0
   37090:	cmp	r2, #128	; 0x80
   37094:	beq	3707c <__assert_fail@plt+0x2448c>
   37098:	ldr	r1, [r4, #48]	; 0x30
   3709c:	add	r0, r0, r1
   370a0:	sub	r2, r0, sl
   370a4:	ldr	r0, [r4, #64]	; 0x40
   370a8:	cmp	r0, #0
   370ac:	mov	r1, sl
   370b0:	bne	37474 <__assert_fail@plt+0x24884>
   370b4:	mov	r0, #0
   370b8:	str	r0, [sp, #20]
   370bc:	str	r0, [sp, #16]
   370c0:	add	r0, sp, #12
   370c4:	add	r3, sp, #16
   370c8:	bl	2edb8 <__assert_fail@plt+0x1c1c8>
   370cc:	sub	r1, r8, sl
   370d0:	cmp	r0, r1
   370d4:	bcc	370fc <__assert_fail@plt+0x2450c>
   370d8:	cmn	r0, #3
   370dc:	bhi	370fc <__assert_fail@plt+0x2450c>
   370e0:	mov	r2, #0
   370e4:	str	r2, [r4, #16]
   370e8:	str	r2, [r4, #20]
   370ec:	sub	r0, r0, r1
   370f0:	str	r0, [r4, #28]
   370f4:	ldr	r0, [sp, #12]
   370f8:	str	r0, [sp, #24]
   370fc:	ldr	r8, [sp, #24]
   37100:	cmn	r8, #1
   37104:	bne	3712c <__assert_fail@plt+0x2453c>
   37108:	add	r2, sp, #24
   3710c:	mov	r0, r4
   37110:	mov	r1, r7
   37114:	bl	37ed0 <__assert_fail@plt+0x252e0>
   37118:	sub	r0, r0, r7
   3711c:	str	r0, [r4, #28]
   37120:	ldr	r8, [sp, #24]
   37124:	cmn	r8, #1
   37128:	beq	373ac <__assert_fail@plt+0x247bc>
   3712c:	ldrb	r0, [r4, #78]	; 0x4e
   37130:	cmp	r0, #0
   37134:	bne	37450 <__assert_fail@plt+0x24860>
   37138:	mov	r0, #0
   3713c:	cmp	r8, #10
   37140:	bne	373bc <__assert_fail@plt+0x247cc>
   37144:	ldrb	r0, [r4, #77]	; 0x4d
   37148:	cmp	r0, #0
   3714c:	movwne	r0, #1
   37150:	lsl	r0, r0, #1
   37154:	b	373bc <__assert_fail@plt+0x247cc>
   37158:	ldr	r8, [r4, #12]
   3715c:	ldr	r9, [r4, #28]
   37160:	mov	r0, #0
   37164:	mov	r1, r9
   37168:	b	37178 <__assert_fail@plt+0x24588>
   3716c:	cmp	r0, r3
   37170:	mov	r1, r3
   37174:	bge	371a4 <__assert_fail@plt+0x245b4>
   37178:	add	r2, r0, r1
   3717c:	add	r2, r2, r2, lsr #31
   37180:	asr	sl, r2, #1
   37184:	ldr	r2, [r8, sl, lsl #2]
   37188:	cmp	r2, r5
   3718c:	mov	r3, sl
   37190:	bgt	3716c <__assert_fail@plt+0x2457c>
   37194:	bge	371a4 <__assert_fail@plt+0x245b4>
   37198:	add	r0, sl, #1
   3719c:	mov	r3, r1
   371a0:	b	3716c <__assert_fail@plt+0x2457c>
   371a4:	cmp	r2, r5
   371a8:	addlt	sl, sl, #1
   371ac:	sub	r1, sl, #1
   371b0:	mov	r0, r4
   371b4:	mov	r2, r6
   371b8:	bl	37e04 <__assert_fail@plt+0x25214>
   371bc:	str	r0, [r4, #60]	; 0x3c
   371c0:	cmp	r9, r5
   371c4:	ble	37268 <__assert_fail@plt+0x24678>
   371c8:	cmp	sl, r5
   371cc:	bne	37268 <__assert_fail@plt+0x24678>
   371d0:	ldr	r0, [r8, sl, lsl #2]
   371d4:	cmp	r0, r5
   371d8:	bne	37268 <__assert_fail@plt+0x24678>
   371dc:	ldr	r0, [r4, #8]
   371e0:	add	r1, r0, r5, lsl #2
   371e4:	sub	r2, r9, r5
   371e8:	lsl	r2, r2, #2
   371ec:	bl	12584 <memmove@plt>
   371f0:	ldr	r0, [r4, #4]
   371f4:	ldr	r2, [r4, #28]
   371f8:	add	r1, r0, r5
   371fc:	sub	r2, r2, r5
   37200:	bl	12584 <memmove@plt>
   37204:	ldr	r0, [r4, #28]
   37208:	ldr	r1, [r4, #32]
   3720c:	sub	r0, r0, r5
   37210:	sub	r1, r1, r5
   37214:	str	r0, [r4, #28]
   37218:	str	r1, [r4, #32]
   3721c:	cmp	r0, #1
   37220:	blt	36f84 <__assert_fail@plt+0x24394>
   37224:	ldr	r0, [r4, #12]
   37228:	add	r1, r0, r5, lsl #2
   3722c:	mov	r2, #0
   37230:	ldr	r3, [r1, r2, lsl #2]
   37234:	sub	r3, r3, r5
   37238:	str	r3, [r0, r2, lsl #2]
   3723c:	add	r2, r2, #1
   37240:	ldr	r3, [r4, #28]
   37244:	cmp	r2, r3
   37248:	blt	37230 <__assert_fail@plt+0x24640>
   3724c:	b	36f84 <__assert_fail@plt+0x24394>
   37250:	ldr	r0, [r4, #4]
   37254:	ldr	r2, [r4, #28]
   37258:	add	r1, r0, r5
   3725c:	sub	r2, r2, r5
   37260:	bl	12584 <memmove@plt>
   37264:	b	36f6c <__assert_fail@plt+0x2437c>
   37268:	mov	r0, #0
   3726c:	strb	r0, [r4, #76]	; 0x4c
   37270:	sub	r0, r5, r7
   37274:	ldr	r1, [r4, #44]	; 0x2c
   37278:	ldr	r2, [r4, #52]	; 0x34
   3727c:	add	r1, r0, r1
   37280:	str	r1, [r4, #48]	; 0x30
   37284:	add	r0, r0, r2
   37288:	str	r0, [r4, #56]	; 0x38
   3728c:	sub	r1, r8, #4
   37290:	mov	r0, sl
   37294:	cmp	sl, #1
   37298:	blt	372ac <__assert_fail@plt+0x246bc>
   3729c:	ldr	r2, [r1, r0, lsl #2]
   372a0:	sub	sl, r0, #1
   372a4:	cmp	r2, r5
   372a8:	beq	37290 <__assert_fail@plt+0x246a0>
   372ac:	cmp	r0, r9
   372b0:	bge	372d0 <__assert_fail@plt+0x246e0>
   372b4:	ldr	r1, [r4, #8]
   372b8:	ldr	r2, [r1, r0, lsl #2]
   372bc:	cmn	r2, #1
   372c0:	bne	372d0 <__assert_fail@plt+0x246e0>
   372c4:	add	r0, r0, #1
   372c8:	cmp	r9, r0
   372cc:	bne	372b8 <__assert_fail@plt+0x246c8>
   372d0:	cmp	r0, r9
   372d4:	bne	37348 <__assert_fail@plt+0x24758>
   372d8:	mov	r0, #0
   372dc:	str	r0, [r4, #28]
   372e0:	b	373cc <__assert_fail@plt+0x247dc>
   372e4:	ldrb	r0, [r4, #72]	; 0x48
   372e8:	cmp	r0, #0
   372ec:	beq	37394 <__assert_fail@plt+0x247a4>
   372f0:	mov	r0, r4
   372f4:	bl	32140 <__assert_fail@plt+0x1f550>
   372f8:	b	37000 <__assert_fail@plt+0x24410>
   372fc:	ldr	r2, [r4]
   37300:	ldr	r3, [r4, #24]
   37304:	ldr	r1, [r4, #64]	; 0x40
   37308:	add	r3, r5, r3
   3730c:	add	r2, r3, r2
   37310:	ldrb	r6, [r2, #-1]
   37314:	str	r0, [r4, #32]
   37318:	cmp	r1, #0
   3731c:	ldrbne	r6, [r1, r6]
   37320:	ldr	r0, [r4, #68]	; 0x44
   37324:	mov	r1, r6
   37328:	bl	37f80 <__assert_fail@plt+0x25390>
   3732c:	mov	r1, #1
   37330:	cmp	r0, #0
   37334:	moveq	r1, #0
   37338:	cmpeq	r6, #10
   3733c:	beq	373d8 <__assert_fail@plt+0x247e8>
   37340:	str	r1, [r4, #60]	; 0x3c
   37344:	b	36f84 <__assert_fail@plt+0x24394>
   37348:	ldr	r0, [r8, r0, lsl #2]
   3734c:	subs	r0, r0, r5
   37350:	str	r0, [r4, #28]
   37354:	beq	373cc <__assert_fail@plt+0x247dc>
   37358:	ldr	r2, [r4, #28]
   3735c:	cmp	r2, #1
   37360:	blt	37384 <__assert_fail@plt+0x24794>
   37364:	ldr	r0, [r4, #8]
   37368:	mov	r1, #0
   3736c:	mvn	r3, #0
   37370:	str	r3, [r0, r1, lsl #2]
   37374:	add	r1, r1, #1
   37378:	ldr	r2, [r4, #28]
   3737c:	cmp	r1, r2
   37380:	blt	37370 <__assert_fail@plt+0x24780>
   37384:	ldr	r0, [r4, #4]
   37388:	mov	r1, #255	; 0xff
   3738c:	bl	12938 <memset@plt>
   37390:	b	373cc <__assert_fail@plt+0x247dc>
   37394:	ldr	r0, [r4, #64]	; 0x40
   37398:	cmp	r0, #0
   3739c:	beq	37000 <__assert_fail@plt+0x24410>
   373a0:	mov	r0, r4
   373a4:	bl	32370 <__assert_fail@plt+0x1f780>
   373a8:	b	37000 <__assert_fail@plt+0x24410>
   373ac:	sub	r1, r9, #1
   373b0:	mov	r0, r4
   373b4:	mov	r2, r6
   373b8:	bl	37e04 <__assert_fail@plt+0x25214>
   373bc:	str	r0, [r4, #60]	; 0x3c
   373c0:	ldr	r0, [r4, #28]
   373c4:	cmp	r0, #0
   373c8:	bne	37414 <__assert_fail@plt+0x24824>
   373cc:	ldr	r0, [r4, #28]
   373d0:	str	r0, [r4, #32]
   373d4:	b	36f84 <__assert_fail@plt+0x24394>
   373d8:	ldrb	r0, [r4, #77]	; 0x4d
   373dc:	cmp	r0, #0
   373e0:	movwne	r0, #1
   373e4:	lsl	r1, r0, #1
   373e8:	b	37340 <__assert_fail@plt+0x24750>
   373ec:	mov	r0, #0
   373f0:	strb	r0, [r4, #76]	; 0x4c
   373f4:	sub	r0, r5, r7
   373f8:	ldr	r1, [r4, #44]	; 0x2c
   373fc:	ldr	r2, [r4, #52]	; 0x34
   37400:	add	r1, r0, r1
   37404:	str	r1, [r4, #48]	; 0x30
   37408:	add	r0, r0, r2
   3740c:	str	r0, [r4, #56]	; 0x38
   37410:	b	37030 <__assert_fail@plt+0x24440>
   37414:	ldr	r2, [r4, #28]
   37418:	cmp	r2, #1
   3741c:	blt	37440 <__assert_fail@plt+0x24850>
   37420:	ldr	r0, [r4, #8]
   37424:	mov	r1, #0
   37428:	mvn	r3, #0
   3742c:	str	r3, [r0, r1, lsl #2]
   37430:	add	r1, r1, #1
   37434:	ldr	r2, [r4, #28]
   37438:	cmp	r1, r2
   3743c:	blt	3742c <__assert_fail@plt+0x2483c>
   37440:	ldrb	r0, [r4, #75]	; 0x4b
   37444:	cmp	r0, #0
   37448:	bne	37384 <__assert_fail@plt+0x24794>
   3744c:	b	373cc <__assert_fail@plt+0x247dc>
   37450:	mov	r0, r8
   37454:	bl	12914 <iswalnum@plt>
   37458:	mov	r1, r0
   3745c:	mov	r0, #1
   37460:	cmp	r8, #95	; 0x5f
   37464:	beq	373bc <__assert_fail@plt+0x247cc>
   37468:	cmp	r1, #0
   3746c:	beq	37138 <__assert_fail@plt+0x24548>
   37470:	b	373bc <__assert_fail@plt+0x247cc>
   37474:	cmp	r2, #1
   37478:	blt	374b0 <__assert_fail@plt+0x248c0>
   3747c:	cmp	r2, #6
   37480:	mov	r1, r2
   37484:	movge	r1, #6
   37488:	sub	ip, r1, #1
   3748c:	add	r1, sp, #6
   37490:	ldrb	r3, [sl, ip]
   37494:	ldrb	r3, [r0, r3]
   37498:	strb	r3, [r1, ip]
   3749c:	sub	r3, ip, #1
   374a0:	cmp	ip, #0
   374a4:	mov	ip, r3
   374a8:	bgt	37490 <__assert_fail@plt+0x248a0>
   374ac:	b	370b4 <__assert_fail@plt+0x244c4>
   374b0:	add	r1, sp, #6
   374b4:	b	370b4 <__assert_fail@plt+0x244c4>
   374b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   374bc:	add	fp, sp, #28
   374c0:	sub	sp, sp, #20
   374c4:	mov	sl, r2
   374c8:	str	r1, [sp, #12]
   374cc:	mov	r7, r0
   374d0:	ldr	r4, [r0, #84]	; 0x54
   374d4:	ldr	r5, [r0, #40]	; 0x28
   374d8:	mov	r0, #0
   374dc:	str	r0, [sp, #16]
   374e0:	cmp	r2, #0
   374e4:	str	r2, [sp, #8]
   374e8:	movwne	sl, #1
   374ec:	ldr	r6, [r4, #36]	; 0x24
   374f0:	ldrsb	r0, [r6, #52]	; 0x34
   374f4:	cmn	r0, #1
   374f8:	bgt	37564 <__assert_fail@plt+0x24974>
   374fc:	ldr	r2, [r7, #88]	; 0x58
   37500:	sub	r1, r5, #1
   37504:	mov	r0, r7
   37508:	bl	37e04 <__assert_fail@plt+0x25214>
   3750c:	tst	r0, #1
   37510:	bne	37560 <__assert_fail@plt+0x24970>
   37514:	mov	r3, r0
   37518:	cmp	r0, #0
   3751c:	beq	37564 <__assert_fail@plt+0x24974>
   37520:	ands	r1, r3, #2
   37524:	and	r0, r3, #4
   37528:	cmpne	r0, #0
   3752c:	bne	3776c <__assert_fail@plt+0x24b7c>
   37530:	cmp	r1, #0
   37534:	bne	3777c <__assert_fail@plt+0x24b8c>
   37538:	cmp	r0, #0
   3753c:	beq	37564 <__assert_fail@plt+0x24974>
   37540:	ldr	r2, [r6, #40]	; 0x28
   37544:	add	r0, sp, #16
   37548:	mov	r1, r4
   3754c:	bl	366e8 <__assert_fail@plt+0x23af8>
   37550:	mov	r6, r0
   37554:	cmp	r6, #0
   37558:	bne	3756c <__assert_fail@plt+0x2497c>
   3755c:	b	37788 <__assert_fail@plt+0x24b98>
   37560:	ldr	r6, [r4, #40]	; 0x28
   37564:	cmp	r6, #0
   37568:	beq	37788 <__assert_fail@plt+0x24b98>
   3756c:	ldr	r0, [r7, #100]	; 0x64
   37570:	cmp	r0, #0
   37574:	str	r5, [sp]
   37578:	beq	3758c <__assert_fail@plt+0x2499c>
   3757c:	str	r6, [r0, r5, lsl #2]
   37580:	ldr	r0, [r4, #76]	; 0x4c
   37584:	cmp	r0, #0
   37588:	bne	377b8 <__assert_fail@plt+0x24bc8>
   3758c:	ldrb	r0, [r6, #52]	; 0x34
   37590:	tst	r0, #16
   37594:	bne	37790 <__assert_fail@plt+0x24ba0>
   37598:	mov	r5, #0
   3759c:	mvn	r0, #0
   375a0:	str	r0, [sp, #4]
   375a4:	ldr	r0, [r7, #40]	; 0x28
   375a8:	ldr	r1, [r7, #56]	; 0x38
   375ac:	cmp	r1, r0
   375b0:	ble	37740 <__assert_fail@plt+0x24b50>
   375b4:	add	r3, sp, #16
   375b8:	b	375ec <__assert_fail@plt+0x249fc>
   375bc:	ldr	r1, [r7, #40]	; 0x28
   375c0:	ldr	r0, [sp, #12]
   375c4:	cmp	r0, #0
   375c8:	beq	37760 <__assert_fail@plt+0x24b70>
   375cc:	str	r1, [sp, #4]
   375d0:	mov	r0, #0
   375d4:	str	r0, [sp, #8]
   375d8:	mov	r5, #1
   375dc:	ldr	r0, [r7, #40]	; 0x28
   375e0:	ldr	r1, [r7, #56]	; 0x38
   375e4:	cmp	r1, r0
   375e8:	ble	37740 <__assert_fail@plt+0x24b50>
   375ec:	mov	r9, r6
   375f0:	add	r8, r0, #1
   375f4:	ldr	r1, [r7, #36]	; 0x24
   375f8:	cmp	r8, r1
   375fc:	bge	376e0 <__assert_fail@plt+0x24af0>
   37600:	ldr	r1, [r7, #28]
   37604:	cmp	r8, r1
   37608:	bge	376f0 <__assert_fail@plt+0x24b00>
   3760c:	mov	r0, r3
   37610:	mov	r1, r7
   37614:	mov	r2, r9
   37618:	mov	r4, r3
   3761c:	bl	3841c <__assert_fail@plt+0x2582c>
   37620:	mov	r6, r0
   37624:	ldr	r0, [r7, #100]	; 0x64
   37628:	cmp	r0, #0
   3762c:	beq	37644 <__assert_fail@plt+0x24a54>
   37630:	mov	r0, r4
   37634:	mov	r1, r7
   37638:	mov	r2, r6
   3763c:	bl	384cc <__assert_fail@plt+0x258dc>
   37640:	mov	r6, r0
   37644:	cmp	r6, #0
   37648:	bne	37698 <__assert_fail@plt+0x24aa8>
   3764c:	ldr	r0, [sp, #16]
   37650:	cmp	r0, #0
   37654:	bne	37788 <__assert_fail@plt+0x24b98>
   37658:	ldr	r0, [sp, #12]
   3765c:	eor	r0, r0, #1
   37660:	cmp	r5, #0
   37664:	mov	r1, r5
   37668:	movwne	r1, #1
   3766c:	tst	r1, r0
   37670:	bne	37740 <__assert_fail@plt+0x24b50>
   37674:	ldr	r0, [r7, #100]	; 0x64
   37678:	cmp	r0, #0
   3767c:	beq	37740 <__assert_fail@plt+0x24b50>
   37680:	add	r0, sp, #16
   37684:	mov	r1, r7
   37688:	bl	38618 <__assert_fail@plt+0x25a28>
   3768c:	mov	r6, r0
   37690:	cmp	r0, #0
   37694:	beq	37740 <__assert_fail@plt+0x24b50>
   37698:	tst	sl, #1
   3769c:	bne	3771c <__assert_fail@plt+0x24b2c>
   376a0:	mov	sl, #0
   376a4:	add	r3, sp, #16
   376a8:	ldrb	r0, [r6, #52]	; 0x34
   376ac:	tst	r0, #16
   376b0:	beq	375dc <__assert_fail@plt+0x249ec>
   376b4:	sxtb	r0, r0
   376b8:	cmn	r0, #1
   376bc:	bgt	375bc <__assert_fail@plt+0x249cc>
   376c0:	ldr	r2, [r7, #40]	; 0x28
   376c4:	mov	r0, r7
   376c8:	mov	r1, r6
   376cc:	bl	37854 <__assert_fail@plt+0x24c64>
   376d0:	add	r3, sp, #16
   376d4:	cmp	r0, #0
   376d8:	bne	375bc <__assert_fail@plt+0x249cc>
   376dc:	b	375dc <__assert_fail@plt+0x249ec>
   376e0:	ldr	r2, [r7, #48]	; 0x30
   376e4:	cmp	r1, r2
   376e8:	bge	37600 <__assert_fail@plt+0x24a10>
   376ec:	b	376fc <__assert_fail@plt+0x24b0c>
   376f0:	ldr	r2, [r7, #48]	; 0x30
   376f4:	cmp	r1, r2
   376f8:	bge	3760c <__assert_fail@plt+0x24a1c>
   376fc:	add	r1, r0, #2
   37700:	mov	r0, r7
   37704:	bl	38348 <__assert_fail@plt+0x25758>
   37708:	add	r3, sp, #16
   3770c:	str	r0, [sp, #16]
   37710:	cmp	r0, #0
   37714:	beq	3760c <__assert_fail@plt+0x24a1c>
   37718:	b	37788 <__assert_fail@plt+0x24b98>
   3771c:	cmp	r9, r6
   37720:	ldr	r0, [sp]
   37724:	moveq	r0, r8
   37728:	str	r0, [sp]
   3772c:	sub	r0, r9, r6
   37730:	clz	r0, r0
   37734:	lsr	r0, r0, #5
   37738:	and	sl, sl, r0
   3773c:	b	376a4 <__assert_fail@plt+0x24ab4>
   37740:	ldr	r2, [sp, #8]
   37744:	cmp	r2, #0
   37748:	beq	3775c <__assert_fail@plt+0x24b6c>
   3774c:	ldr	r0, [r2]
   37750:	ldr	r1, [sp]
   37754:	add	r0, r0, r1
   37758:	str	r0, [r2]
   3775c:	ldr	r1, [sp, #4]
   37760:	mov	r0, r1
   37764:	sub	sp, fp, #28
   37768:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3776c:	ldr	r6, [r4, #48]	; 0x30
   37770:	cmp	r6, #0
   37774:	bne	3756c <__assert_fail@plt+0x2497c>
   37778:	b	37788 <__assert_fail@plt+0x24b98>
   3777c:	ldr	r6, [r4, #44]	; 0x2c
   37780:	cmp	r6, #0
   37784:	bne	3756c <__assert_fail@plt+0x2497c>
   37788:	mvn	r1, #1
   3778c:	b	37760 <__assert_fail@plt+0x24b70>
   37790:	sxtb	r0, r0
   37794:	cmn	r0, #1
   37798:	ble	377f0 <__assert_fail@plt+0x24c00>
   3779c:	mov	r4, r5
   377a0:	mov	r5, #1
   377a4:	ldr	r0, [sp, #12]
   377a8:	cmp	r0, #0
   377ac:	str	r4, [sp, #4]
   377b0:	bne	375a4 <__assert_fail@plt+0x249b4>
   377b4:	b	37828 <__assert_fail@plt+0x24c38>
   377b8:	add	r5, r6, #4
   377bc:	mov	sl, #0
   377c0:	mov	r0, r7
   377c4:	mov	r1, r5
   377c8:	mov	r2, #0
   377cc:	bl	37fa8 <__assert_fail@plt+0x253b8>
   377d0:	str	r0, [sp, #16]
   377d4:	cmp	r0, #0
   377d8:	bne	3784c <__assert_fail@plt+0x24c5c>
   377dc:	ldrb	r0, [r6, #52]	; 0x34
   377e0:	tst	r0, #64	; 0x40
   377e4:	bne	37830 <__assert_fail@plt+0x24c40>
   377e8:	ldr	r5, [sp]
   377ec:	b	3758c <__assert_fail@plt+0x2499c>
   377f0:	mov	r0, r7
   377f4:	mov	r1, r6
   377f8:	mov	r2, r5
   377fc:	bl	37854 <__assert_fail@plt+0x24c64>
   37800:	mov	r4, r5
   37804:	mov	r5, r0
   37808:	cmp	r0, #0
   3780c:	mvneq	r4, #0
   37810:	str	r4, [sp, #4]
   37814:	movwne	r5, #1
   37818:	beq	375a4 <__assert_fail@plt+0x249b4>
   3781c:	ldr	r0, [sp, #12]
   37820:	cmp	r0, #0
   37824:	bne	375a4 <__assert_fail@plt+0x249b4>
   37828:	ldr	r1, [sp]
   3782c:	b	37760 <__assert_fail@plt+0x24b70>
   37830:	mov	r0, r7
   37834:	mov	r1, r5
   37838:	bl	3803c <__assert_fail@plt+0x2544c>
   3783c:	str	r0, [sp, #16]
   37840:	cmp	r0, #0
   37844:	ldr	r5, [sp]
   37848:	beq	3758c <__assert_fail@plt+0x2499c>
   3784c:	mov	r1, r0
   37850:	b	37760 <__assert_fail@plt+0x24b70>
   37854:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   37858:	add	fp, sp, #24
   3785c:	mov	r3, r2
   37860:	mov	r8, r1
   37864:	mov	r6, r0
   37868:	ldr	r2, [r0, #88]	; 0x58
   3786c:	mov	r1, r3
   37870:	bl	37e04 <__assert_fail@plt+0x25214>
   37874:	mov	r9, r0
   37878:	ldr	r0, [r8, #8]
   3787c:	cmp	r0, #1
   37880:	blt	378bc <__assert_fail@plt+0x24ccc>
   37884:	ldr	r4, [r8, #12]
   37888:	ldr	r6, [r6, #84]	; 0x54
   3788c:	mov	r5, #0
   37890:	ldr	r7, [r4, r5, lsl #2]
   37894:	mov	r0, r6
   37898:	mov	r1, r7
   3789c:	mov	r2, r9
   378a0:	bl	3ad04 <__assert_fail@plt+0x28114>
   378a4:	cmp	r0, #0
   378a8:	bne	378c0 <__assert_fail@plt+0x24cd0>
   378ac:	add	r5, r5, #1
   378b0:	ldr	r0, [r8, #8]
   378b4:	cmp	r5, r0
   378b8:	blt	37890 <__assert_fail@plt+0x24ca0>
   378bc:	mov	r7, #0
   378c0:	mov	r0, r7
   378c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   378c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   378cc:	add	fp, sp, #28
   378d0:	sub	sp, sp, #44	; 0x2c
   378d4:	ldr	r7, [r0, #92]	; 0x5c
   378d8:	cmn	r7, #-1073741822	; 0xc0000002
   378dc:	bhi	37adc <__assert_fail@plt+0x24eec>
   378e0:	ldr	r5, [r0, #84]	; 0x54
   378e4:	str	r0, [sp, #12]
   378e8:	ldr	sl, [r0, #96]	; 0x60
   378ec:	mov	r0, #4
   378f0:	add	r6, r0, r7, lsl #2
   378f4:	mov	r0, r6
   378f8:	bl	2ed88 <__assert_fail@plt+0x1c198>
   378fc:	mov	r4, #12
   37900:	cmp	r0, #0
   37904:	beq	37aac <__assert_fail@plt+0x24ebc>
   37908:	mov	r9, r0
   3790c:	ldr	r0, [r5, #76]	; 0x4c
   37910:	cmp	r0, #0
   37914:	beq	3793c <__assert_fail@plt+0x24d4c>
   37918:	mov	r0, r6
   3791c:	bl	2ed88 <__assert_fail@plt+0x1c198>
   37920:	cmp	r0, #0
   37924:	beq	37ab0 <__assert_fail@plt+0x24ec0>
   37928:	mov	r8, r0
   3792c:	str	r5, [sp, #8]
   37930:	add	r4, sp, #16
   37934:	mov	r5, sl
   37938:	b	379f4 <__assert_fail@plt+0x24e04>
   3793c:	str	r7, [sp]
   37940:	add	r4, sp, #16
   37944:	mov	r8, #0
   37948:	mov	r0, r4
   3794c:	mov	r1, r9
   37950:	mov	r2, #0
   37954:	mov	r3, sl
   37958:	bl	3ad78 <__assert_fail@plt+0x28188>
   3795c:	ldr	r0, [sp, #12]
   37960:	mov	r1, r4
   37964:	bl	3ad98 <__assert_fail@plt+0x281a8>
   37968:	mov	r4, r0
   3796c:	ldr	r0, [sp, #40]	; 0x28
   37970:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   37974:	cmp	r4, #0
   37978:	bne	37ab4 <__assert_fail@plt+0x24ec4>
   3797c:	ldr	r0, [r9]
   37980:	cmp	r0, #0
   37984:	bne	37a90 <__assert_fail@plt+0x24ea0>
   37988:	mov	r4, #1
   3798c:	b	37ab4 <__assert_fail@plt+0x24ec4>
   37990:	mov	r4, #1
   37994:	cmp	r7, #1
   37998:	blt	37ad0 <__assert_fail@plt+0x24ee0>
   3799c:	sub	r7, r7, #1
   379a0:	ldr	sl, [sp, #12]
   379a4:	ldr	r0, [sl, #100]	; 0x64
   379a8:	mov	r9, r1
   379ac:	mov	r8, r6
   379b0:	b	379c8 <__assert_fail@plt+0x24dd8>
   379b4:	sub	r1, r7, #1
   379b8:	add	r2, r7, #1
   379bc:	cmp	r2, #2
   379c0:	mov	r7, r1
   379c4:	blt	37ab4 <__assert_fail@plt+0x24ec4>
   379c8:	ldr	r1, [r0, r7, lsl #2]
   379cc:	cmp	r1, #0
   379d0:	beq	379b4 <__assert_fail@plt+0x24dc4>
   379d4:	ldrb	r2, [r1, #52]	; 0x34
   379d8:	tst	r2, #16
   379dc:	beq	379b4 <__assert_fail@plt+0x24dc4>
   379e0:	mov	r0, sl
   379e4:	mov	r2, r7
   379e8:	bl	37854 <__assert_fail@plt+0x24c64>
   379ec:	mov	r4, r5
   379f0:	mov	r5, r0
   379f4:	add	sl, r7, #1
   379f8:	lsl	r2, sl, #2
   379fc:	mov	r0, r8
   37a00:	mov	r1, #0
   37a04:	bl	12938 <memset@plt>
   37a08:	str	r7, [sp]
   37a0c:	mov	r0, r4
   37a10:	mov	r1, r9
   37a14:	mov	r6, r8
   37a18:	mov	r2, r8
   37a1c:	mov	r8, r5
   37a20:	mov	r3, r5
   37a24:	bl	3ad78 <__assert_fail@plt+0x28188>
   37a28:	ldr	r0, [sp, #12]
   37a2c:	mov	r5, r4
   37a30:	mov	r1, r4
   37a34:	bl	3ad98 <__assert_fail@plt+0x281a8>
   37a38:	mov	r4, r0
   37a3c:	ldr	r0, [sp, #40]	; 0x28
   37a40:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   37a44:	cmp	r4, #0
   37a48:	bne	37ae4 <__assert_fail@plt+0x24ef4>
   37a4c:	mov	r1, r9
   37a50:	ldr	r0, [r9]
   37a54:	cmp	r0, #0
   37a58:	ldreq	r0, [r6]
   37a5c:	cmpeq	r0, #0
   37a60:	beq	37990 <__assert_fail@plt+0x24da0>
   37a64:	ldr	r0, [sp, #8]
   37a68:	mov	r9, r1
   37a6c:	mov	r2, r6
   37a70:	mov	r3, sl
   37a74:	bl	3aeb0 <__assert_fail@plt+0x282c0>
   37a78:	mov	r4, r0
   37a7c:	mov	r0, r6
   37a80:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   37a84:	cmp	r4, #0
   37a88:	mov	sl, r8
   37a8c:	bne	37ab0 <__assert_fail@plt+0x24ec0>
   37a90:	ldr	r4, [sp, #12]
   37a94:	ldr	r0, [r4, #100]	; 0x64
   37a98:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   37a9c:	str	r7, [r4, #92]	; 0x5c
   37aa0:	str	sl, [r4, #96]	; 0x60
   37aa4:	str	r9, [r4, #100]	; 0x64
   37aa8:	mov	r4, #0
   37aac:	mov	r9, #0
   37ab0:	mov	r8, #0
   37ab4:	mov	r0, r9
   37ab8:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   37abc:	mov	r0, r8
   37ac0:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   37ac4:	mov	r0, r4
   37ac8:	sub	sp, fp, #28
   37acc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37ad0:	mov	r9, r1
   37ad4:	mov	r8, r6
   37ad8:	b	37ab4 <__assert_fail@plt+0x24ec4>
   37adc:	mov	r4, #12
   37ae0:	b	37ac4 <__assert_fail@plt+0x24ed4>
   37ae4:	mov	r8, r6
   37ae8:	b	37ab4 <__assert_fail@plt+0x24ec4>
   37aec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   37af0:	add	fp, sp, #24
   37af4:	mov	r8, r0
   37af8:	ldr	r0, [r0, #124]	; 0x7c
   37afc:	cmp	r0, #1
   37b00:	blt	37b8c <__assert_fail@plt+0x24f9c>
   37b04:	mov	r7, #0
   37b08:	b	37b24 <__assert_fail@plt+0x24f34>
   37b0c:	mov	r0, r5
   37b10:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   37b14:	add	r7, r7, #1
   37b18:	ldr	r0, [r8, #124]	; 0x7c
   37b1c:	cmp	r7, r0
   37b20:	bge	37b8c <__assert_fail@plt+0x24f9c>
   37b24:	ldr	r0, [r8, #132]	; 0x84
   37b28:	ldr	r5, [r0, r7, lsl #2]
   37b2c:	ldr	r0, [r5, #16]
   37b30:	cmp	r0, #1
   37b34:	blt	37b64 <__assert_fail@plt+0x24f74>
   37b38:	mov	r4, #0
   37b3c:	ldr	r0, [r5, #20]
   37b40:	ldr	r6, [r0, r4, lsl #2]
   37b44:	ldr	r0, [r6, #16]
   37b48:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   37b4c:	mov	r0, r6
   37b50:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   37b54:	add	r4, r4, #1
   37b58:	ldr	r0, [r5, #16]
   37b5c:	cmp	r4, r0
   37b60:	blt	37b3c <__assert_fail@plt+0x24f4c>
   37b64:	ldr	r0, [r5, #20]
   37b68:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   37b6c:	ldr	r0, [r5, #8]
   37b70:	cmp	r0, #0
   37b74:	beq	37b0c <__assert_fail@plt+0x24f1c>
   37b78:	ldr	r0, [r0, #8]
   37b7c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   37b80:	ldr	r0, [r5, #8]
   37b84:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   37b88:	b	37b0c <__assert_fail@plt+0x24f1c>
   37b8c:	mov	r0, #0
   37b90:	str	r0, [r8, #108]	; 0x6c
   37b94:	str	r0, [r8, #124]	; 0x7c
   37b98:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   37b9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37ba0:	add	fp, sp, #28
   37ba4:	sub	sp, sp, #204	; 0xcc
   37ba8:	mov	r5, r3
   37bac:	mov	r6, r2
   37bb0:	mov	r9, r1
   37bb4:	ldr	r4, [r0]
   37bb8:	movw	r0, #19512	; 0x4c38
   37bbc:	movt	r0, #4
   37bc0:	vldr	d16, [r0]
   37bc4:	ldr	r0, [r0, #8]
   37bc8:	str	r0, [fp, #-56]	; 0xffffffc8
   37bcc:	vstr	d16, [fp, #-64]	; 0xffffffc0
   37bd0:	add	r0, sp, #28
   37bd4:	bl	3bf74 <__assert_fail@plt+0x29384>
   37bd8:	mov	r7, #0
   37bdc:	ldr	r0, [fp, #8]
   37be0:	cmp	r0, #0
   37be4:	mov	sl, #0
   37be8:	beq	37c0c <__assert_fail@plt+0x2501c>
   37bec:	ldr	r0, [fp, #-60]	; 0xffffffc4
   37bf0:	add	r0, r0, r0, lsl #1
   37bf4:	lsl	r0, r0, #3
   37bf8:	bl	2ed88 <__assert_fail@plt+0x1c198>
   37bfc:	str	r0, [fp, #-56]	; 0xffffffc8
   37c00:	cmp	r0, #0
   37c04:	beq	37da8 <__assert_fail@plt+0x251b8>
   37c08:	sub	sl, fp, #64	; 0x40
   37c0c:	ldr	r8, [r4, #72]	; 0x48
   37c10:	str	r7, [fp, #-44]	; 0xffffffd4
   37c14:	str	r7, [fp, #-48]	; 0xffffffd0
   37c18:	str	r7, [fp, #-40]	; 0xffffffd8
   37c1c:	add	r0, sp, #28
   37c20:	mov	r1, r6
   37c24:	bl	3bf8c <__assert_fail@plt+0x2939c>
   37c28:	mov	r7, #12
   37c2c:	cmp	r0, #0
   37c30:	beq	37dbc <__assert_fail@plt+0x251cc>
   37c34:	str	r4, [sp, #20]
   37c38:	str	r9, [sp, #24]
   37c3c:	add	r0, sp, #28
   37c40:	bl	3c064 <__assert_fail@plt+0x29474>
   37c44:	mov	r4, r0
   37c48:	lsl	r2, r6, #3
   37c4c:	mov	r1, r5
   37c50:	bl	125f0 <memcpy@plt>
   37c54:	ldr	r9, [r5]
   37c58:	ldr	r0, [r5, #4]
   37c5c:	str	r9, [fp, #-32]	; 0xffffffe0
   37c60:	mov	r7, #0
   37c64:	cmp	r9, r0
   37c68:	bgt	37db4 <__assert_fail@plt+0x251c4>
   37c6c:	str	r9, [sp]
   37c70:	str	r6, [sp, #4]
   37c74:	ldr	r0, [sp, #20]
   37c78:	mov	r1, r5
   37c7c:	mov	r2, r4
   37c80:	mov	r3, r8
   37c84:	bl	3c06c <__assert_fail@plt+0x2947c>
   37c88:	ldr	r0, [r5, #4]
   37c8c:	cmp	r9, r0
   37c90:	ldr	r9, [sp, #24]
   37c94:	bne	37ca4 <__assert_fail@plt+0x250b4>
   37c98:	ldr	r0, [r9, #96]	; 0x60
   37c9c:	cmp	r8, r0
   37ca0:	beq	37cc0 <__assert_fail@plt+0x250d0>
   37ca4:	cmp	sl, #0
   37ca8:	beq	37d24 <__assert_fail@plt+0x25134>
   37cac:	sub	r0, fp, #48	; 0x30
   37cb0:	mov	r1, r8
   37cb4:	bl	36678 <__assert_fail@plt+0x23a88>
   37cb8:	cmp	r0, #0
   37cbc:	beq	37d24 <__assert_fail@plt+0x25134>
   37cc0:	cmp	sl, #0
   37cc4:	beq	37db4 <__assert_fail@plt+0x251c4>
   37cc8:	mov	r0, #0
   37ccc:	b	37cdc <__assert_fail@plt+0x250ec>
   37cd0:	add	r0, r0, #1
   37cd4:	cmp	r6, r0
   37cd8:	beq	37db0 <__assert_fail@plt+0x251c0>
   37cdc:	ldr	r1, [r5, r0, lsl #3]
   37ce0:	cmp	r1, #0
   37ce4:	bmi	37cd0 <__assert_fail@plt+0x250e0>
   37ce8:	add	r1, r5, r0, lsl #3
   37cec:	ldr	r1, [r1, #4]
   37cf0:	cmn	r1, #1
   37cf4:	bne	37cd0 <__assert_fail@plt+0x250e0>
   37cf8:	str	r4, [sp]
   37cfc:	sub	r0, fp, #48	; 0x30
   37d00:	str	r0, [sp, #4]
   37d04:	mov	r0, sl
   37d08:	sub	r1, fp, #32
   37d0c:	mov	r2, r6
   37d10:	mov	r3, r5
   37d14:	bl	3c124 <__assert_fail@plt+0x29534>
   37d18:	mov	r8, r0
   37d1c:	cmp	r0, #0
   37d20:	bmi	37db0 <__assert_fail@plt+0x251c0>
   37d24:	sub	r0, fp, #32
   37d28:	stm	sp, {r0, r8}
   37d2c:	sub	r0, fp, #48	; 0x30
   37d30:	str	r0, [sp, #8]
   37d34:	str	sl, [sp, #12]
   37d38:	mov	r0, r9
   37d3c:	mov	r1, r6
   37d40:	mov	r2, r5
   37d44:	mov	r3, r4
   37d48:	bl	3c1dc <__assert_fail@plt+0x295ec>
   37d4c:	mov	r8, r0
   37d50:	cmn	r0, #1
   37d54:	ble	37d6c <__assert_fail@plt+0x2517c>
   37d58:	ldr	r0, [r5, #4]
   37d5c:	ldr	r9, [fp, #-32]	; 0xffffffe0
   37d60:	cmp	r9, r0
   37d64:	ble	37c6c <__assert_fail@plt+0x2507c>
   37d68:	b	37db4 <__assert_fail@plt+0x251c4>
   37d6c:	cmn	r8, #2
   37d70:	beq	37dd8 <__assert_fail@plt+0x251e8>
   37d74:	str	r4, [sp]
   37d78:	sub	r0, fp, #48	; 0x30
   37d7c:	str	r0, [sp, #4]
   37d80:	mov	r0, sl
   37d84:	sub	r1, fp, #32
   37d88:	mov	r2, r6
   37d8c:	mov	r3, r5
   37d90:	bl	3c124 <__assert_fail@plt+0x29534>
   37d94:	mov	r8, r0
   37d98:	cmp	r0, #0
   37d9c:	bpl	37d58 <__assert_fail@plt+0x25168>
   37da0:	mov	r7, #1
   37da4:	b	37db4 <__assert_fail@plt+0x251c4>
   37da8:	mov	r7, #12
   37dac:	b	37dcc <__assert_fail@plt+0x251dc>
   37db0:	mov	r7, #0
   37db4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   37db8:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   37dbc:	add	r0, sp, #28
   37dc0:	bl	3bfe0 <__assert_fail@plt+0x293f0>
   37dc4:	mov	r0, sl
   37dc8:	bl	3bffc <__assert_fail@plt+0x2940c>
   37dcc:	mov	r0, r7
   37dd0:	sub	sp, fp, #28
   37dd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37dd8:	mov	r7, #12
   37ddc:	b	37db4 <__assert_fail@plt+0x251c4>
   37de0:	push	{r4, sl, fp, lr}
   37de4:	add	fp, sp, #8
   37de8:	mov	r4, r0
   37dec:	bl	37aec <__assert_fail@plt+0x24efc>
   37df0:	ldr	r0, [r4, #132]	; 0x84
   37df4:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   37df8:	ldr	r0, [r4, #116]	; 0x74
   37dfc:	pop	{r4, sl, fp, lr}
   37e00:	b	2cad4 <__assert_fail@plt+0x19ee4>
   37e04:	push	{r4, r5, fp, lr}
   37e08:	add	fp, sp, #8
   37e0c:	mov	r4, r0
   37e10:	cmn	r1, #1
   37e14:	ble	37e4c <__assert_fail@plt+0x2525c>
   37e18:	ldr	r0, [r4, #48]	; 0x30
   37e1c:	cmp	r0, r1
   37e20:	beq	37ea8 <__assert_fail@plt+0x252b8>
   37e24:	ldr	r0, [r4, #80]	; 0x50
   37e28:	cmp	r0, #2
   37e2c:	blt	37e54 <__assert_fail@plt+0x25264>
   37e30:	ldr	r0, [r4, #8]
   37e34:	ldr	r5, [r0, r1, lsl #2]
   37e38:	cmn	r5, #1
   37e3c:	bne	37e7c <__assert_fail@plt+0x2528c>
   37e40:	sub	r1, r1, #1
   37e44:	cmn	r1, #1
   37e48:	bne	37e34 <__assert_fail@plt+0x25244>
   37e4c:	ldr	r0, [r4, #60]	; 0x3c
   37e50:	pop	{r4, r5, fp, pc}
   37e54:	ldr	r2, [r4, #4]
   37e58:	ldr	r0, [r4, #68]	; 0x44
   37e5c:	ldrb	r5, [r2, r1]
   37e60:	mov	r1, r5
   37e64:	bl	37f80 <__assert_fail@plt+0x25390>
   37e68:	mov	r1, r0
   37e6c:	mov	r0, #1
   37e70:	cmp	r1, #0
   37e74:	beq	37e88 <__assert_fail@plt+0x25298>
   37e78:	b	37ea4 <__assert_fail@plt+0x252b4>
   37e7c:	ldrb	r0, [r4, #78]	; 0x4e
   37e80:	cmp	r0, #0
   37e84:	bne	37eb4 <__assert_fail@plt+0x252c4>
   37e88:	mov	r0, #0
   37e8c:	cmp	r5, #10
   37e90:	popne	{r4, r5, fp, pc}
   37e94:	ldrb	r0, [r4, #77]	; 0x4d
   37e98:	cmp	r0, #0
   37e9c:	movwne	r0, #1
   37ea0:	lsl	r0, r0, #1
   37ea4:	pop	{r4, r5, fp, pc}
   37ea8:	and	r0, r2, #2
   37eac:	eor	r0, r0, #10
   37eb0:	pop	{r4, r5, fp, pc}
   37eb4:	mov	r0, r5
   37eb8:	bl	12914 <iswalnum@plt>
   37ebc:	mov	r1, r0
   37ec0:	mov	r0, #1
   37ec4:	cmp	r5, #95	; 0x5f
   37ec8:	bne	37e70 <__assert_fail@plt+0x25280>
   37ecc:	b	37ea4 <__assert_fail@plt+0x252b4>
   37ed0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37ed4:	add	fp, sp, #28
   37ed8:	sub	sp, sp, #12
   37edc:	str	r2, [sp, #4]
   37ee0:	mov	sl, r1
   37ee4:	mov	r7, r0
   37ee8:	ldr	r0, [r0, #24]
   37eec:	ldr	r1, [r7, #32]
   37ef0:	add	r5, r1, r0
   37ef4:	mvn	r1, #0
   37ef8:	cmp	r5, sl
   37efc:	bge	37f6c <__assert_fail@plt+0x2537c>
   37f00:	add	r4, r7, #16
   37f04:	ldr	r0, [r7]
   37f08:	ldr	r2, [r7, #44]	; 0x2c
   37f0c:	add	r1, r0, r5
   37f10:	sub	r6, r2, r5
   37f14:	ldm	r4, {r8, r9}
   37f18:	add	r0, sp, #8
   37f1c:	mov	r2, r6
   37f20:	mov	r3, r4
   37f24:	bl	2edb8 <__assert_fail@plt+0x1c1c8>
   37f28:	sub	r1, r0, #1
   37f2c:	cmn	r1, #3
   37f30:	bcs	37f48 <__assert_fail@plt+0x25358>
   37f34:	ldr	r1, [sp, #8]
   37f38:	add	r5, r0, r5
   37f3c:	cmp	r5, sl
   37f40:	blt	37f04 <__assert_fail@plt+0x25314>
   37f44:	b	37f6c <__assert_fail@plt+0x2537c>
   37f48:	mov	r1, #0
   37f4c:	cmp	r6, #0
   37f50:	cmpne	r0, #0
   37f54:	beq	37f60 <__assert_fail@plt+0x25370>
   37f58:	ldr	r0, [r7]
   37f5c:	ldrb	r1, [r0, r5]
   37f60:	stm	r4, {r8, r9}
   37f64:	mov	r0, #1
   37f68:	b	37f38 <__assert_fail@plt+0x25348>
   37f6c:	ldr	r0, [sp, #4]
   37f70:	str	r1, [r0]
   37f74:	mov	r0, r5
   37f78:	sub	sp, fp, #28
   37f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37f80:	asr	r2, r1, #31
   37f84:	add	r2, r1, r2, lsr #27
   37f88:	asr	r2, r2, #5
   37f8c:	ldr	r0, [r0, r2, lsl #2]
   37f90:	and	r1, r1, #31
   37f94:	mov	r2, #1
   37f98:	and	r0, r0, r2, lsl r1
   37f9c:	cmp	r0, #0
   37fa0:	movwne	r0, #1
   37fa4:	bx	lr
   37fa8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   37fac:	add	fp, sp, #24
   37fb0:	mov	r6, r0
   37fb4:	ldr	r0, [r1, #4]
   37fb8:	cmp	r0, #1
   37fbc:	blt	38034 <__assert_fail@plt+0x25444>
   37fc0:	mov	r8, r2
   37fc4:	mov	r5, r1
   37fc8:	ldr	r7, [r6, #84]	; 0x54
   37fcc:	mov	r4, #0
   37fd0:	mov	r9, #1
   37fd4:	b	37fe8 <__assert_fail@plt+0x253f8>
   37fd8:	add	r4, r4, #1
   37fdc:	ldr	r0, [r5, #4]
   37fe0:	cmp	r4, r0
   37fe4:	bge	38034 <__assert_fail@plt+0x25444>
   37fe8:	ldr	r0, [r5, #8]
   37fec:	ldr	r1, [r0, r4, lsl #2]
   37ff0:	ldr	r0, [r7]
   37ff4:	add	r2, r0, r1, lsl #3
   37ff8:	ldrb	r2, [r2, #4]
   37ffc:	cmp	r2, #8
   38000:	bne	37fd8 <__assert_fail@plt+0x253e8>
   38004:	ldr	r0, [r0, r1, lsl #3]
   38008:	cmp	r0, #31
   3800c:	bgt	37fd8 <__assert_fail@plt+0x253e8>
   38010:	ldr	r2, [r7, #80]	; 0x50
   38014:	tst	r2, r9, lsl r0
   38018:	beq	37fd8 <__assert_fail@plt+0x253e8>
   3801c:	mov	r0, r6
   38020:	mov	r2, r8
   38024:	bl	3868c <__assert_fail@plt+0x25a9c>
   38028:	cmp	r0, #0
   3802c:	beq	37fd8 <__assert_fail@plt+0x253e8>
   38030:	b	38038 <__assert_fail@plt+0x25448>
   38034:	mov	r0, #0
   38038:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3803c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38040:	add	fp, sp, #28
   38044:	sub	sp, sp, #52	; 0x34
   38048:	mov	r5, r0
   3804c:	ldr	r0, [r1, #4]
   38050:	cmp	r0, #1
   38054:	blt	38328 <__assert_fail@plt+0x25738>
   38058:	mov	r8, r1
   3805c:	ldr	r9, [r5, #84]	; 0x54
   38060:	ldr	r0, [r5, #40]	; 0x28
   38064:	str	r0, [sp, #32]
   38068:	mov	sl, #0
   3806c:	str	r1, [sp, #4]
   38070:	str	r9, [sp, #16]
   38074:	b	38088 <__assert_fail@plt+0x25498>
   38078:	ldr	r0, [r8, #4]
   3807c:	add	sl, sl, #1
   38080:	cmp	sl, r0
   38084:	bge	38328 <__assert_fail@plt+0x25738>
   38088:	ldr	r0, [r8, #8]
   3808c:	ldr	r4, [r0, sl, lsl #2]
   38090:	ldr	r0, [r9]
   38094:	add	r0, r0, r4, lsl #3
   38098:	ldr	r6, [r0, #4]
   3809c:	uxtb	r0, r6
   380a0:	cmp	r0, #4
   380a4:	bne	38078 <__assert_fail@plt+0x25488>
   380a8:	movw	r0, #65280	; 0xff00
   380ac:	movt	r0, #3
   380b0:	tst	r6, r0
   380b4:	beq	38108 <__assert_fail@plt+0x25518>
   380b8:	ldr	r2, [r5, #88]	; 0x58
   380bc:	mov	r0, r5
   380c0:	ldr	r1, [sp, #32]
   380c4:	bl	37e04 <__assert_fail@plt+0x25214>
   380c8:	and	r1, r0, #1
   380cc:	tst	r6, #1024	; 0x400
   380d0:	beq	380dc <__assert_fail@plt+0x254ec>
   380d4:	cmp	r1, #0
   380d8:	beq	38078 <__assert_fail@plt+0x25488>
   380dc:	tst	r6, #2048	; 0x800
   380e0:	cmpne	r1, #0
   380e4:	bne	38078 <__assert_fail@plt+0x25488>
   380e8:	tst	r6, #8192	; 0x2000
   380ec:	beq	380f8 <__assert_fail@plt+0x25508>
   380f0:	ands	r1, r0, #2
   380f4:	beq	38078 <__assert_fail@plt+0x25488>
   380f8:	tst	r6, #32768	; 0x8000
   380fc:	beq	38108 <__assert_fail@plt+0x25518>
   38100:	ands	r0, r0, #8
   38104:	beq	38078 <__assert_fail@plt+0x25488>
   38108:	ldr	r6, [r5, #108]	; 0x6c
   3810c:	mov	r0, r5
   38110:	mov	r1, r4
   38114:	ldr	r2, [sp, #32]
   38118:	bl	38718 <__assert_fail@plt+0x25b28>
   3811c:	str	r0, [fp, #-32]	; 0xffffffe0
   38120:	cmp	r0, #0
   38124:	bne	38330 <__assert_fail@plt+0x25740>
   38128:	ldr	r0, [r5, #108]	; 0x6c
   3812c:	cmp	r6, r0
   38130:	bge	38078 <__assert_fail@plt+0x25488>
   38134:	add	r0, r6, r6, lsl #1
   38138:	lsl	r7, r0, #3
   3813c:	str	r4, [sp, #8]
   38140:	b	38158 <__assert_fail@plt+0x25568>
   38144:	add	r7, r7, #24
   38148:	add	r6, r6, #1
   3814c:	ldr	r0, [r5, #108]	; 0x6c
   38150:	cmp	r6, r0
   38154:	bge	38078 <__assert_fail@plt+0x25488>
   38158:	ldr	r0, [r5, #116]	; 0x74
   3815c:	ldr	r1, [r0, r7]
   38160:	cmp	r1, r4
   38164:	bne	38144 <__assert_fail@plt+0x25554>
   38168:	add	r0, r0, r7
   3816c:	ldr	r1, [r0, #4]
   38170:	ldr	r2, [sp, #32]
   38174:	cmp	r1, r2
   38178:	bne	38144 <__assert_fail@plt+0x25554>
   3817c:	ldr	r2, [r0, #8]
   38180:	ldr	r3, [r0, #12]
   38184:	ldr	r0, [r9, #24]
   38188:	str	r0, [sp, #28]
   3818c:	cmp	r3, r2
   38190:	bne	381a8 <__assert_fail@plt+0x255b8>
   38194:	ldr	r0, [r9, #20]
   38198:	add	r1, r4, r4, lsl #1
   3819c:	add	r0, r0, r1, lsl #2
   381a0:	ldr	r0, [r0, #8]
   381a4:	b	381b0 <__assert_fail@plt+0x255c0>
   381a8:	ldr	r0, [r9, #12]
   381ac:	add	r0, r0, r4, lsl #2
   381b0:	ldr	r0, [r0]
   381b4:	add	r9, r0, r0, lsl #1
   381b8:	ldr	r4, [sp, #32]
   381bc:	str	r3, [sp, #20]
   381c0:	add	r0, r3, r4
   381c4:	str	r2, [sp, #24]
   381c8:	sub	r8, r0, r2
   381cc:	sub	r1, r8, #1
   381d0:	ldr	r2, [r5, #88]	; 0x58
   381d4:	mov	r0, r5
   381d8:	bl	37e04 <__assert_fail@plt+0x25214>
   381dc:	mov	r3, r0
   381e0:	ldr	r0, [r5, #100]	; 0x64
   381e4:	ldr	r1, [r0, r4, lsl #2]
   381e8:	ldr	r0, [r0, r8, lsl #2]
   381ec:	cmp	r1, #0
   381f0:	beq	381fc <__assert_fail@plt+0x2560c>
   381f4:	ldr	r1, [r1, #8]
   381f8:	b	38200 <__assert_fail@plt+0x25610>
   381fc:	mov	r1, #0
   38200:	str	r1, [sp, #12]
   38204:	add	r4, sp, #36	; 0x24
   38208:	ldr	r1, [sp, #28]
   3820c:	add	r2, r1, r9, lsl #2
   38210:	cmp	r0, #0
   38214:	str	r2, [sp, #28]
   38218:	beq	38288 <__assert_fail@plt+0x25698>
   3821c:	mov	r9, r3
   38220:	ldr	r1, [r0, #40]	; 0x28
   38224:	mov	r0, r4
   38228:	bl	38ac0 <__assert_fail@plt+0x25ed0>
   3822c:	str	r0, [fp, #-32]	; 0xffffffe0
   38230:	cmp	r0, #0
   38234:	ldr	r1, [sp, #16]
   38238:	bne	3833c <__assert_fail@plt+0x2574c>
   3823c:	sub	r0, fp, #32
   38240:	mov	r2, r4
   38244:	mov	r3, r9
   38248:	bl	366e8 <__assert_fail@plt+0x23af8>
   3824c:	ldr	r1, [r5, #100]	; 0x64
   38250:	str	r0, [r1, r8, lsl #2]
   38254:	ldr	r0, [sp, #44]	; 0x2c
   38258:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   3825c:	ldr	r0, [r5, #100]	; 0x64
   38260:	ldr	r0, [r0, r8, lsl #2]
   38264:	cmp	r0, #0
   38268:	bne	38278 <__assert_fail@plt+0x25688>
   3826c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   38270:	cmp	r0, #0
   38274:	bne	38330 <__assert_fail@plt+0x25740>
   38278:	ldr	r8, [sp, #4]
   3827c:	ldr	r4, [sp, #8]
   38280:	ldr	r9, [sp, #16]
   38284:	b	382c4 <__assert_fail@plt+0x256d4>
   38288:	sub	r0, fp, #32
   3828c:	ldr	r9, [sp, #16]
   38290:	mov	r1, r9
   38294:	bl	366e8 <__assert_fail@plt+0x23af8>
   38298:	ldr	r1, [r5, #100]	; 0x64
   3829c:	str	r0, [r1, r8, lsl #2]
   382a0:	ldr	r0, [r5, #100]	; 0x64
   382a4:	ldr	r0, [r0, r8, lsl #2]
   382a8:	cmp	r0, #0
   382ac:	ldr	r8, [sp, #4]
   382b0:	ldr	r4, [sp, #8]
   382b4:	bne	382c4 <__assert_fail@plt+0x256d4>
   382b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   382bc:	cmp	r0, #0
   382c0:	bne	38330 <__assert_fail@plt+0x25740>
   382c4:	ldr	r0, [sp, #24]
   382c8:	ldr	r1, [sp, #20]
   382cc:	cmp	r1, r0
   382d0:	bne	38144 <__assert_fail@plt+0x25554>
   382d4:	ldr	r0, [r5, #100]	; 0x64
   382d8:	ldr	r1, [sp, #32]
   382dc:	ldr	r0, [r0, r1, lsl #2]
   382e0:	ldr	r0, [r0, #8]
   382e4:	ldr	r1, [sp, #12]
   382e8:	cmp	r0, r1
   382ec:	ble	38144 <__assert_fail@plt+0x25554>
   382f0:	mov	r0, r5
   382f4:	ldr	r1, [sp, #28]
   382f8:	ldr	r2, [sp, #32]
   382fc:	bl	37fa8 <__assert_fail@plt+0x253b8>
   38300:	str	r0, [fp, #-32]	; 0xffffffe0
   38304:	cmp	r0, #0
   38308:	bne	38330 <__assert_fail@plt+0x25740>
   3830c:	mov	r0, r5
   38310:	ldr	r1, [sp, #28]
   38314:	bl	3803c <__assert_fail@plt+0x2544c>
   38318:	str	r0, [fp, #-32]	; 0xffffffe0
   3831c:	cmp	r0, #0
   38320:	beq	38144 <__assert_fail@plt+0x25554>
   38324:	b	38330 <__assert_fail@plt+0x25740>
   38328:	mov	r0, #0
   3832c:	str	r0, [fp, #-32]	; 0xffffffe0
   38330:	ldr	r0, [fp, #-32]	; 0xffffffe0
   38334:	sub	sp, fp, #28
   38338:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3833c:	ldr	r0, [sp, #44]	; 0x2c
   38340:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   38344:	b	38330 <__assert_fail@plt+0x25740>
   38348:	push	{r4, r5, fp, lr}
   3834c:	add	fp, sp, #8
   38350:	mov	r4, r0
   38354:	ldr	r0, [r0, #36]	; 0x24
   38358:	mov	r5, #12
   3835c:	cmn	r0, #-536870910	; 0xe0000002
   38360:	bhi	38414 <__assert_fail@plt+0x25824>
   38364:	ldr	r2, [r4, #48]	; 0x30
   38368:	cmp	r2, r0, lsl #1
   3836c:	lslge	r2, r0, #1
   38370:	cmp	r2, r1
   38374:	movle	r2, r1
   38378:	mov	r0, r4
   3837c:	mov	r1, r2
   38380:	bl	31b00 <__assert_fail@plt+0x1ef10>
   38384:	cmp	r0, #0
   38388:	bne	38418 <__assert_fail@plt+0x25828>
   3838c:	ldr	r0, [r4, #100]	; 0x64
   38390:	cmp	r0, #0
   38394:	beq	383b4 <__assert_fail@plt+0x257c4>
   38398:	ldr	r1, [r4, #36]	; 0x24
   3839c:	mov	r2, #4
   383a0:	add	r1, r2, r1, lsl #2
   383a4:	bl	2f894 <__assert_fail@plt+0x1cca4>
   383a8:	cmp	r0, #0
   383ac:	beq	38414 <__assert_fail@plt+0x25824>
   383b0:	str	r0, [r4, #100]	; 0x64
   383b4:	ldr	r0, [r4, #80]	; 0x50
   383b8:	ldrb	r1, [r4, #72]	; 0x48
   383bc:	cmp	r1, #0
   383c0:	beq	383e0 <__assert_fail@plt+0x257f0>
   383c4:	cmp	r0, #2
   383c8:	blt	383f4 <__assert_fail@plt+0x25804>
   383cc:	mov	r0, r4
   383d0:	bl	31ba4 <__assert_fail@plt+0x1efb4>
   383d4:	cmp	r0, #0
   383d8:	beq	38410 <__assert_fail@plt+0x25820>
   383dc:	pop	{r4, r5, fp, pc}
   383e0:	cmp	r0, #2
   383e4:	blt	38400 <__assert_fail@plt+0x25810>
   383e8:	mov	r0, r4
   383ec:	bl	321b4 <__assert_fail@plt+0x1f5c4>
   383f0:	b	38410 <__assert_fail@plt+0x25820>
   383f4:	mov	r0, r4
   383f8:	bl	32140 <__assert_fail@plt+0x1f550>
   383fc:	b	38410 <__assert_fail@plt+0x25820>
   38400:	ldr	r0, [r4, #64]	; 0x40
   38404:	cmp	r0, #0
   38408:	movne	r0, r4
   3840c:	blne	32370 <__assert_fail@plt+0x1f780>
   38410:	mov	r5, #0
   38414:	mov	r0, r5
   38418:	pop	{r4, r5, fp, pc}
   3841c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   38420:	add	fp, sp, #24
   38424:	mov	r6, r2
   38428:	mov	r4, r1
   3842c:	mov	r5, r0
   38430:	ldrb	r0, [r2, #52]	; 0x34
   38434:	tst	r0, #32
   38438:	bne	384b0 <__assert_fail@plt+0x258c0>
   3843c:	ldr	r0, [r4, #4]
   38440:	ldr	r1, [r4, #40]	; 0x28
   38444:	add	r2, r1, #1
   38448:	str	r2, [r4, #40]	; 0x28
   3844c:	ldrb	r7, [r0, r1]
   38450:	ldr	r0, [r6, #44]	; 0x2c
   38454:	cmp	r0, #0
   38458:	ldrne	r0, [r0, r7, lsl #2]
   3845c:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   38460:	ldr	r8, [r6, #48]	; 0x30
   38464:	cmp	r8, #0
   38468:	bne	38490 <__assert_fail@plt+0x258a0>
   3846c:	ldr	r0, [r4, #84]	; 0x54
   38470:	mov	r1, r6
   38474:	bl	3a2b4 <__assert_fail@plt+0x276c4>
   38478:	cmp	r0, #0
   3847c:	bne	38450 <__assert_fail@plt+0x25860>
   38480:	mov	r0, #12
   38484:	str	r0, [r5]
   38488:	mov	r0, #0
   3848c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   38490:	ldr	r0, [r4, #40]	; 0x28
   38494:	ldr	r2, [r4, #88]	; 0x58
   38498:	sub	r1, r0, #1
   3849c:	mov	r0, r4
   384a0:	bl	37e04 <__assert_fail@plt+0x25214>
   384a4:	bfi	r7, r0, #8, #1
   384a8:	ldr	r0, [r8, r7, lsl #2]
   384ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   384b0:	mov	r0, r4
   384b4:	mov	r1, r6
   384b8:	bl	3a0e4 <__assert_fail@plt+0x274f4>
   384bc:	str	r0, [r5]
   384c0:	cmp	r0, #0
   384c4:	beq	3843c <__assert_fail@plt+0x2584c>
   384c8:	b	38488 <__assert_fail@plt+0x25898>
   384cc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   384d0:	add	fp, sp, #24
   384d4:	sub	sp, sp, #16
   384d8:	mov	r7, r2
   384dc:	mov	r4, r1
   384e0:	mov	r8, r0
   384e4:	ldr	r5, [r1, #40]	; 0x28
   384e8:	ldr	r6, [r1, #84]	; 0x54
   384ec:	ldr	r0, [r1, #100]	; 0x64
   384f0:	ldr	r1, [r1, #104]	; 0x68
   384f4:	cmp	r5, r1
   384f8:	ble	38508 <__assert_fail@plt+0x25918>
   384fc:	str	r7, [r0, r5, lsl #2]
   38500:	str	r5, [r4, #104]	; 0x68
   38504:	b	385a4 <__assert_fail@plt+0x259b4>
   38508:	ldr	r1, [r0, r5, lsl #2]
   3850c:	cmp	r1, #0
   38510:	beq	38544 <__assert_fail@plt+0x25954>
   38514:	ldr	r0, [r0, r5, lsl #2]
   38518:	ldr	r2, [r0, #40]	; 0x28
   3851c:	cmp	r7, #0
   38520:	beq	3854c <__assert_fail@plt+0x2595c>
   38524:	ldr	r9, [r7, #40]	; 0x28
   38528:	mov	r0, sp
   3852c:	mov	r1, r9
   38530:	bl	38ac0 <__assert_fail@plt+0x25ed0>
   38534:	str	r0, [r8]
   38538:	cmp	r0, #0
   3853c:	beq	38560 <__assert_fail@plt+0x25970>
   38540:	b	38610 <__assert_fail@plt+0x25a20>
   38544:	str	r7, [r0, r5, lsl #2]
   38548:	b	385a4 <__assert_fail@plt+0x259b4>
   3854c:	vldr	d16, [r2]
   38550:	ldr	r0, [r2, #8]
   38554:	str	r0, [sp, #8]
   38558:	vstr	d16, [sp]
   3855c:	mov	r9, #0
   38560:	ldr	r0, [r4, #40]	; 0x28
   38564:	ldr	r2, [r4, #88]	; 0x58
   38568:	sub	r1, r0, #1
   3856c:	mov	r0, r4
   38570:	bl	37e04 <__assert_fail@plt+0x25214>
   38574:	mov	r3, r0
   38578:	mov	r2, sp
   3857c:	mov	r0, r8
   38580:	mov	r1, r6
   38584:	bl	366e8 <__assert_fail@plt+0x23af8>
   38588:	mov	r7, r0
   3858c:	ldr	r0, [r4, #100]	; 0x64
   38590:	str	r7, [r0, r5, lsl #2]
   38594:	cmp	r9, #0
   38598:	beq	385a4 <__assert_fail@plt+0x259b4>
   3859c:	ldr	r0, [sp, #8]
   385a0:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   385a4:	cmp	r7, #0
   385a8:	ldrne	r0, [r6, #76]	; 0x4c
   385ac:	cmpne	r0, #0
   385b0:	bne	385c0 <__assert_fail@plt+0x259d0>
   385b4:	mov	r0, r7
   385b8:	sub	sp, fp, #24
   385bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   385c0:	add	r6, r7, #4
   385c4:	mov	r0, r4
   385c8:	mov	r1, r6
   385cc:	mov	r2, r5
   385d0:	bl	37fa8 <__assert_fail@plt+0x253b8>
   385d4:	str	r0, [r8]
   385d8:	cmp	r0, #0
   385dc:	bne	38610 <__assert_fail@plt+0x25a20>
   385e0:	ldrb	r0, [r7, #52]	; 0x34
   385e4:	tst	r0, #64	; 0x40
   385e8:	beq	385b4 <__assert_fail@plt+0x259c4>
   385ec:	mov	r0, r4
   385f0:	mov	r1, r6
   385f4:	bl	3803c <__assert_fail@plt+0x2544c>
   385f8:	str	r0, [r8]
   385fc:	cmp	r0, #0
   38600:	mov	r7, #0
   38604:	ldreq	r0, [r4, #100]	; 0x64
   38608:	ldreq	r7, [r0, r5, lsl #2]
   3860c:	b	385b4 <__assert_fail@plt+0x259c4>
   38610:	mov	r7, #0
   38614:	b	385b4 <__assert_fail@plt+0x259c4>
   38618:	push	{r4, r5, r6, sl, fp, lr}
   3861c:	add	fp, sp, #16
   38620:	mov	r4, r1
   38624:	mov	r6, r0
   38628:	ldr	r1, [r4, #40]	; 0x28
   3862c:	ldr	r0, [r4, #104]	; 0x68
   38630:	cmp	r1, r0
   38634:	bge	38684 <__assert_fail@plt+0x25a94>
   38638:	add	r2, r1, #1
   3863c:	ldr	r3, [r4, #40]	; 0x28
   38640:	ldr	r5, [r4, #100]	; 0x64
   38644:	add	r3, r3, #1
   38648:	str	r3, [r4, #40]	; 0x28
   3864c:	add	r1, r5, r1, lsl #2
   38650:	ldr	r1, [r1, #4]
   38654:	cmp	r1, #0
   38658:	mov	r1, r2
   3865c:	beq	38630 <__assert_fail@plt+0x25a40>
   38660:	mov	r0, r6
   38664:	mov	r1, r4
   38668:	mov	r2, #0
   3866c:	bl	384cc <__assert_fail@plt+0x258dc>
   38670:	cmp	r0, #0
   38674:	ldreq	r1, [r6]
   38678:	cmpeq	r1, #0
   3867c:	beq	38628 <__assert_fail@plt+0x25a38>
   38680:	pop	{r4, r5, r6, sl, fp, pc}
   38684:	mov	r0, #0
   38688:	pop	{r4, r5, r6, sl, fp, pc}
   3868c:	push	{r4, r5, r6, r7, fp, lr}
   38690:	add	fp, sp, #16
   38694:	mov	r4, r2
   38698:	mov	r6, r1
   3869c:	mov	r5, r0
   386a0:	ldr	r0, [r0, #124]	; 0x7c
   386a4:	ldr	r7, [r5, #128]	; 0x80
   386a8:	cmp	r0, r7
   386ac:	beq	386f4 <__assert_fail@plt+0x25b04>
   386b0:	mov	r0, #1
   386b4:	mov	r1, #24
   386b8:	bl	2c4f4 <__assert_fail@plt+0x19904>
   386bc:	ldr	r1, [r5, #124]	; 0x7c
   386c0:	ldr	r2, [r5, #132]	; 0x84
   386c4:	str	r0, [r2, r1, lsl #2]
   386c8:	ldr	r0, [r5, #132]	; 0x84
   386cc:	ldr	r0, [r0, r1, lsl #2]
   386d0:	cmp	r0, #0
   386d4:	strne	r6, [r0, #4]
   386d8:	addne	r1, r1, #1
   386dc:	strne	r1, [r5, #124]	; 0x7c
   386e0:	strne	r4, [r0]
   386e4:	movne	r0, #0
   386e8:	popne	{r4, r5, r6, r7, fp, pc}
   386ec:	mov	r0, #12
   386f0:	pop	{r4, r5, r6, r7, fp, pc}
   386f4:	ldr	r0, [r5, #132]	; 0x84
   386f8:	lsl	r1, r7, #3
   386fc:	bl	2f894 <__assert_fail@plt+0x1cca4>
   38700:	cmp	r0, #0
   38704:	beq	386ec <__assert_fail@plt+0x25afc>
   38708:	lsl	r1, r7, #1
   3870c:	str	r1, [r5, #128]	; 0x80
   38710:	str	r0, [r5, #132]	; 0x84
   38714:	b	386b0 <__assert_fail@plt+0x25ac0>
   38718:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3871c:	add	fp, sp, #28
   38720:	sub	sp, sp, #52	; 0x34
   38724:	str	r1, [sp, #36]	; 0x24
   38728:	mov	r4, r0
   3872c:	ldr	r5, [r0, #4]
   38730:	ldr	r6, [r0, #84]	; 0x54
   38734:	str	r2, [fp, #-36]	; 0xffffffdc
   38738:	mov	r1, r2
   3873c:	bl	38cf4 <__assert_fail@plt+0x26104>
   38740:	cmn	r0, #1
   38744:	beq	38774 <__assert_fail@plt+0x25b84>
   38748:	ldr	r1, [r4, #116]	; 0x74
   3874c:	add	r0, r0, r0, lsl #1
   38750:	add	r0, r1, r0, lsl #3
   38754:	ldr	r2, [sp, #36]	; 0x24
   38758:	ldr	r1, [r0]
   3875c:	cmp	r1, r2
   38760:	beq	38aa0 <__assert_fail@plt+0x25eb0>
   38764:	ldrb	r1, [r0, #20]
   38768:	add	r0, r0, #24
   3876c:	cmp	r1, #0
   38770:	bne	38758 <__assert_fail@plt+0x25b68>
   38774:	ldr	r0, [r4, #124]	; 0x7c
   38778:	cmp	r0, #1
   3877c:	blt	38aa0 <__assert_fail@plt+0x25eb0>
   38780:	mov	ip, r6
   38784:	ldr	r0, [r6]
   38788:	ldr	r1, [sp, #36]	; 0x24
   3878c:	ldr	r2, [r0, r1, lsl #3]
   38790:	mov	r6, #0
   38794:	str	r4, [sp, #28]
   38798:	mov	r3, r5
   3879c:	str	ip, [sp, #24]
   387a0:	str	r2, [sp, #20]
   387a4:	b	387c4 <__assert_fail@plt+0x25bd4>
   387a8:	ldr	ip, [sp, #24]
   387ac:	ldr	r2, [sp, #20]
   387b0:	ldr	r6, [sp, #16]
   387b4:	add	r6, r6, #1
   387b8:	ldr	r0, [r4, #124]	; 0x7c
   387bc:	cmp	r6, r0
   387c0:	bge	38aa0 <__assert_fail@plt+0x25eb0>
   387c4:	ldr	r0, [r4, #132]	; 0x84
   387c8:	ldr	r7, [r0, r6, lsl #2]
   387cc:	ldr	r0, [r7, #4]
   387d0:	ldr	r1, [ip]
   387d4:	ldr	r0, [r1, r0, lsl #3]
   387d8:	cmp	r0, r2
   387dc:	str	r6, [sp, #16]
   387e0:	bne	387b0 <__assert_fail@plt+0x25bc0>
   387e4:	ldr	r5, [r7]
   387e8:	ldr	r0, [r7, #16]
   387ec:	cmp	r0, #1
   387f0:	str	r7, [sp, #32]
   387f4:	mov	sl, #0
   387f8:	blt	388d0 <__assert_fail@plt+0x25ce0>
   387fc:	ldr	r6, [fp, #-36]	; 0xffffffdc
   38800:	mov	r9, r5
   38804:	ldr	r0, [r7, #20]
   38808:	ldr	r2, [r0, sl, lsl #2]
   3880c:	ldr	r0, [r2, #4]
   38810:	str	r0, [fp, #-32]	; 0xffffffe0
   38814:	sub	r5, r0, r9
   38818:	cmp	r5, #1
   3881c:	blt	38860 <__assert_fail@plt+0x25c70>
   38820:	add	r1, r5, r6
   38824:	ldr	r0, [r4, #28]
   38828:	cmp	r1, r0
   3882c:	str	r2, [sp, #40]	; 0x28
   38830:	bgt	388a4 <__assert_fail@plt+0x25cb4>
   38834:	add	r0, r3, r6
   38838:	add	r1, r3, r9
   3883c:	mov	r8, r6
   38840:	mov	r2, r5
   38844:	mov	r7, r3
   38848:	bl	128a8 <bcmp@plt>
   3884c:	mov	r3, r7
   38850:	cmp	r0, #0
   38854:	ldr	r7, [sp, #32]
   38858:	ldr	r2, [sp, #40]	; 0x28
   3885c:	bne	388d8 <__assert_fail@plt+0x25ce8>
   38860:	ldr	r0, [fp, #-36]	; 0xffffffdc
   38864:	str	r0, [sp]
   38868:	mov	r0, r4
   3886c:	mov	r1, r7
   38870:	ldr	r3, [sp, #36]	; 0x24
   38874:	bl	38e14 <__assert_fail@plt+0x26224>
   38878:	cmp	r0, #1
   3887c:	bhi	38ab0 <__assert_fail@plt+0x25ec0>
   38880:	add	r6, r5, r6
   38884:	add	sl, sl, #1
   38888:	ldr	r3, [r4, #4]
   3888c:	ldr	r0, [r7, #16]
   38890:	cmp	sl, r0
   38894:	ldr	r5, [fp, #-32]	; 0xffffffe0
   38898:	mov	r9, r5
   3889c:	blt	38804 <__assert_fail@plt+0x25c14>
   388a0:	b	388dc <__assert_fail@plt+0x25cec>
   388a4:	ldr	r0, [r4, #48]	; 0x30
   388a8:	cmp	r1, r0
   388ac:	bgt	388d8 <__assert_fail@plt+0x25ce8>
   388b0:	mov	r7, r6
   388b4:	mov	r0, r4
   388b8:	bl	38d80 <__assert_fail@plt+0x26190>
   388bc:	cmp	r0, #0
   388c0:	bne	38ab0 <__assert_fail@plt+0x25ec0>
   388c4:	ldr	r3, [r4, #4]
   388c8:	mov	r6, r7
   388cc:	b	38834 <__assert_fail@plt+0x25c44>
   388d0:	ldr	r6, [fp, #-36]	; 0xffffffdc
   388d4:	b	388dc <__assert_fail@plt+0x25cec>
   388d8:	mov	r5, r9
   388dc:	ldr	r0, [r7, #16]
   388e0:	cmp	sl, r0
   388e4:	blt	387a8 <__assert_fail@plt+0x25bb8>
   388e8:	cmp	sl, #0
   388ec:	addne	r5, r5, #1
   388f0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   388f4:	cmp	r5, r0
   388f8:	bgt	387a8 <__assert_fail@plt+0x25bb8>
   388fc:	ldr	ip, [sp, #24]
   38900:	ldr	r2, [sp, #20]
   38904:	b	38934 <__assert_fail@plt+0x25d44>
   38908:	ldr	r7, [sp, #32]
   3890c:	mov	r3, sl
   38910:	mov	r6, r9
   38914:	ldr	ip, [sp, #24]
   38918:	ldr	r2, [sp, #20]
   3891c:	add	r1, r5, #1
   38920:	ldr	r0, [fp, #-36]	; 0xffffffdc
   38924:	cmp	r5, r0
   38928:	mov	r5, r1
   3892c:	ldr	r4, [sp, #28]
   38930:	bge	387b0 <__assert_fail@plt+0x25bc0>
   38934:	ldr	r0, [r7]
   38938:	cmp	r5, r0
   3893c:	ble	38964 <__assert_fail@plt+0x25d74>
   38940:	ldr	r0, [r4, #28]
   38944:	cmp	r6, r0
   38948:	bge	38a64 <__assert_fail@plt+0x25e74>
   3894c:	ldrb	r0, [r3, r6]
   38950:	add	r1, r3, r5
   38954:	ldrb	r1, [r1, #-1]
   38958:	cmp	r0, r1
   3895c:	bne	387b0 <__assert_fail@plt+0x25bc0>
   38960:	add	r6, r6, #1
   38964:	ldr	r0, [r4, #100]	; 0x64
   38968:	ldr	r0, [r0, r5, lsl #2]
   3896c:	cmp	r0, #0
   38970:	beq	3891c <__assert_fail@plt+0x25d2c>
   38974:	mov	r9, r6
   38978:	mov	sl, r3
   3897c:	add	r1, r0, #4
   38980:	mov	r0, ip
   38984:	mov	r3, #9
   38988:	bl	38eac <__assert_fail@plt+0x262bc>
   3898c:	cmn	r0, #1
   38990:	beq	38908 <__assert_fail@plt+0x25d18>
   38994:	mov	r4, r0
   38998:	ldr	r1, [sp, #32]
   3899c:	ldr	r0, [r1, #8]
   389a0:	cmp	r0, #0
   389a4:	bne	389d0 <__assert_fail@plt+0x25de0>
   389a8:	ldr	r0, [r1]
   389ac:	sub	r0, r5, r0
   389b0:	add	r1, r0, #1
   389b4:	mov	r8, #12
   389b8:	mov	r0, #12
   389bc:	bl	2c4f4 <__assert_fail@plt+0x19904>
   389c0:	ldr	r1, [sp, #32]
   389c4:	str	r0, [r1, #8]
   389c8:	cmp	r0, #0
   389cc:	beq	38aa4 <__assert_fail@plt+0x25eb4>
   389d0:	ldr	r3, [r1]
   389d4:	ldr	r2, [r1, #4]
   389d8:	ldr	r1, [r1, #8]
   389dc:	stm	sp, {r4, r5}
   389e0:	mov	r0, #9
   389e4:	str	r0, [sp, #8]
   389e8:	ldr	r0, [sp, #28]
   389ec:	bl	38f0c <__assert_fail@plt+0x2631c>
   389f0:	ldr	r7, [sp, #32]
   389f4:	cmp	r0, #1
   389f8:	mov	r3, sl
   389fc:	mov	r6, r9
   38a00:	ldr	ip, [sp, #24]
   38a04:	ldr	r2, [sp, #20]
   38a08:	beq	3891c <__assert_fail@plt+0x25d2c>
   38a0c:	mov	r8, r0
   38a10:	cmp	r0, #0
   38a14:	bne	38aa4 <__assert_fail@plt+0x25eb4>
   38a18:	mov	r0, r7
   38a1c:	mov	r1, r4
   38a20:	mov	r2, r5
   38a24:	bl	392f0 <__assert_fail@plt+0x26700>
   38a28:	cmp	r0, #0
   38a2c:	beq	38ab8 <__assert_fail@plt+0x25ec8>
   38a30:	mov	r2, r0
   38a34:	ldr	r0, [fp, #-36]	; 0xffffffdc
   38a38:	str	r0, [sp]
   38a3c:	ldr	r4, [sp, #28]
   38a40:	mov	r0, r4
   38a44:	mov	r1, r7
   38a48:	ldr	r3, [sp, #36]	; 0x24
   38a4c:	bl	38e14 <__assert_fail@plt+0x26224>
   38a50:	cmp	r0, #1
   38a54:	bhi	38ab0 <__assert_fail@plt+0x25ec0>
   38a58:	ldr	r3, [r4, #4]
   38a5c:	ldr	r7, [sp, #32]
   38a60:	b	38910 <__assert_fail@plt+0x25d20>
   38a64:	ldr	r0, [r4, #48]	; 0x30
   38a68:	cmp	r6, r0
   38a6c:	bge	387b0 <__assert_fail@plt+0x25bc0>
   38a70:	mov	r9, r6
   38a74:	add	r1, r6, #1
   38a78:	mov	r0, r4
   38a7c:	bl	38348 <__assert_fail@plt+0x25758>
   38a80:	cmp	r0, #0
   38a84:	bne	38ab0 <__assert_fail@plt+0x25ec0>
   38a88:	ldr	r3, [r4, #4]
   38a8c:	ldr	r7, [sp, #32]
   38a90:	mov	r6, r9
   38a94:	ldr	ip, [sp, #24]
   38a98:	ldr	r2, [sp, #20]
   38a9c:	b	3894c <__assert_fail@plt+0x25d5c>
   38aa0:	mov	r8, #0
   38aa4:	mov	r0, r8
   38aa8:	sub	sp, fp, #28
   38aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38ab0:	mov	r8, r0
   38ab4:	b	38aa4 <__assert_fail@plt+0x25eb4>
   38ab8:	mov	r8, #12
   38abc:	b	38aa4 <__assert_fail@plt+0x25eb4>
   38ac0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38ac4:	add	fp, sp, #28
   38ac8:	sub	sp, sp, #4
   38acc:	mov	sl, r2
   38ad0:	mov	r8, r0
   38ad4:	cmp	r1, #0
   38ad8:	beq	38c0c <__assert_fail@plt+0x2601c>
   38adc:	mov	r6, r1
   38ae0:	ldr	r0, [r1, #4]
   38ae4:	cmp	sl, #0
   38ae8:	beq	38bf8 <__assert_fail@plt+0x26008>
   38aec:	cmp	r0, #1
   38af0:	blt	38bf8 <__assert_fail@plt+0x26008>
   38af4:	ldr	r1, [sl, #4]
   38af8:	cmp	r1, #1
   38afc:	blt	38bf8 <__assert_fail@plt+0x26008>
   38b00:	add	r0, r1, r0
   38b04:	str	r0, [r8]
   38b08:	lsl	r0, r0, #2
   38b0c:	bl	2ed88 <__assert_fail@plt+0x1c198>
   38b10:	str	r0, [r8, #8]
   38b14:	cmp	r0, #0
   38b18:	beq	38ce8 <__assert_fail@plt+0x260f8>
   38b1c:	ldr	r2, [sl, #4]
   38b20:	mov	r4, #0
   38b24:	cmp	r2, #0
   38b28:	mov	r0, #0
   38b2c:	movwgt	r0, #1
   38b30:	ldr	r3, [r6, #4]
   38b34:	cmp	r3, #1
   38b38:	blt	38c4c <__assert_fail@plt+0x2605c>
   38b3c:	mov	r9, #0
   38b40:	cmp	r2, #1
   38b44:	blt	38c5c <__assert_fail@plt+0x2606c>
   38b48:	mov	ip, #0
   38b4c:	mov	r0, #0
   38b50:	mov	r4, ip
   38b54:	mov	r7, r0
   38b58:	ldr	r0, [sl, #8]
   38b5c:	ldr	r1, [r0, r4, lsl #2]
   38b60:	ldr	r0, [r6, #8]
   38b64:	ldr	r5, [r0, r9, lsl #2]
   38b68:	cmp	r5, r1
   38b6c:	ble	38bac <__assert_fail@plt+0x25fbc>
   38b70:	ldr	r0, [r8, #8]
   38b74:	str	r1, [r0, r7, lsl #2]
   38b78:	ldr	r2, [sl, #4]
   38b7c:	add	r1, r4, #1
   38b80:	cmp	r2, r1
   38b84:	mov	r0, #0
   38b88:	movwgt	r0, #1
   38b8c:	ldr	r3, [r6, #4]
   38b90:	cmp	r3, r9
   38b94:	ble	38c88 <__assert_fail@plt+0x26098>
   38b98:	add	r7, r7, #1
   38b9c:	cmp	r2, r1
   38ba0:	mov	r4, r1
   38ba4:	bgt	38b58 <__assert_fail@plt+0x25f68>
   38ba8:	b	38c60 <__assert_fail@plt+0x26070>
   38bac:	ldr	r0, [r8, #8]
   38bb0:	str	r5, [r0, r7, lsl #2]
   38bb4:	add	lr, r4, #1
   38bb8:	cmp	r5, r1
   38bbc:	mov	ip, r4
   38bc0:	moveq	ip, lr
   38bc4:	ldr	r2, [sl, #4]
   38bc8:	cmp	r2, ip
   38bcc:	mov	r0, #0
   38bd0:	movwgt	r0, #1
   38bd4:	add	r9, r9, #1
   38bd8:	ldr	r3, [r6, #4]
   38bdc:	cmp	r3, r9
   38be0:	ble	38cd0 <__assert_fail@plt+0x260e0>
   38be4:	add	r0, r7, #1
   38be8:	cmp	r2, ip
   38bec:	bgt	38b50 <__assert_fail@plt+0x25f60>
   38bf0:	add	r7, r7, #1
   38bf4:	b	38c60 <__assert_fail@plt+0x26070>
   38bf8:	cmp	r0, #1
   38bfc:	blt	38c0c <__assert_fail@plt+0x2601c>
   38c00:	mov	r0, r8
   38c04:	mov	r1, r6
   38c08:	b	38c28 <__assert_fail@plt+0x26038>
   38c0c:	cmp	sl, #0
   38c10:	beq	38c34 <__assert_fail@plt+0x26044>
   38c14:	ldr	r0, [sl, #4]
   38c18:	cmp	r0, #1
   38c1c:	blt	38c34 <__assert_fail@plt+0x26044>
   38c20:	mov	r0, r8
   38c24:	mov	r1, sl
   38c28:	sub	sp, fp, #28
   38c2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38c30:	b	365fc <__assert_fail@plt+0x23a0c>
   38c34:	mov	r0, #0
   38c38:	str	r0, [r8]
   38c3c:	str	r0, [r8, #4]
   38c40:	str	r0, [r8, #8]
   38c44:	sub	sp, fp, #28
   38c48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38c4c:	mov	r6, #0
   38c50:	cmp	r0, #0
   38c54:	bne	38c98 <__assert_fail@plt+0x260a8>
   38c58:	b	38cc0 <__assert_fail@plt+0x260d0>
   38c5c:	mov	r7, #0
   38c60:	ldr	r0, [r8, #8]
   38c64:	add	r0, r0, r7, lsl #2
   38c68:	ldr	r1, [r6, #8]
   38c6c:	add	r1, r1, r9, lsl #2
   38c70:	sub	r2, r3, r9
   38c74:	lsl	r2, r2, #2
   38c78:	bl	125f0 <memcpy@plt>
   38c7c:	sub	r0, r7, r9
   38c80:	ldr	r1, [r6, #4]
   38c84:	b	38cbc <__assert_fail@plt+0x260cc>
   38c88:	add	r6, r7, #1
   38c8c:	add	r4, r4, #1
   38c90:	cmp	r0, #0
   38c94:	beq	38cc0 <__assert_fail@plt+0x260d0>
   38c98:	ldr	r0, [r8, #8]
   38c9c:	add	r0, r0, r6, lsl #2
   38ca0:	ldr	r1, [sl, #8]
   38ca4:	add	r1, r1, r4, lsl #2
   38ca8:	sub	r2, r2, r4
   38cac:	lsl	r2, r2, #2
   38cb0:	bl	125f0 <memcpy@plt>
   38cb4:	sub	r0, r6, r4
   38cb8:	ldr	r1, [sl, #4]
   38cbc:	add	r6, r0, r1
   38cc0:	str	r6, [r8, #4]
   38cc4:	mov	r0, #0
   38cc8:	sub	sp, fp, #28
   38ccc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38cd0:	cmp	r5, r1
   38cd4:	moveq	r4, lr
   38cd8:	add	r6, r7, #1
   38cdc:	cmp	r0, #0
   38ce0:	bne	38c98 <__assert_fail@plt+0x260a8>
   38ce4:	b	38cc0 <__assert_fail@plt+0x260d0>
   38ce8:	mov	r0, #12
   38cec:	sub	sp, fp, #28
   38cf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38cf4:	push	{r4, r5, r6, r7, fp, lr}
   38cf8:	add	fp, sp, #16
   38cfc:	mov	ip, r0
   38d00:	ldr	lr, [r0, #108]	; 0x6c
   38d04:	cmp	lr, #1
   38d08:	blt	38d6c <__assert_fail@plt+0x2617c>
   38d0c:	ldr	r2, [ip, #116]	; 0x74
   38d10:	mov	r0, #0
   38d14:	mov	r3, #1
   38d18:	mov	r4, lr
   38d1c:	add	r5, r0, r4
   38d20:	add	r5, r5, r5, lsr #31
   38d24:	asr	r6, r5, #1
   38d28:	add	r7, r6, r6, lsl #1
   38d2c:	add	r7, r2, r7, lsl #3
   38d30:	ldr	r7, [r7, #4]
   38d34:	cmp	r7, r1
   38d38:	addlt	r0, r3, r5, asr #1
   38d3c:	movge	r4, r6
   38d40:	cmp	r0, r4
   38d44:	blt	38d1c <__assert_fail@plt+0x2612c>
   38d48:	cmp	r0, lr
   38d4c:	bge	38d78 <__assert_fail@plt+0x26188>
   38d50:	ldr	r2, [ip, #116]	; 0x74
   38d54:	add	r3, r0, r0, lsl #1
   38d58:	add	r2, r2, r3, lsl #3
   38d5c:	ldr	r2, [r2, #4]
   38d60:	cmp	r2, r1
   38d64:	mvnne	r0, #0
   38d68:	pop	{r4, r5, r6, r7, fp, pc}
   38d6c:	mov	r0, #0
   38d70:	cmp	r0, lr
   38d74:	blt	38d50 <__assert_fail@plt+0x26160>
   38d78:	mvn	r0, #0
   38d7c:	pop	{r4, r5, r6, r7, fp, pc}
   38d80:	push	{r4, r5, r6, r7, fp, lr}
   38d84:	add	fp, sp, #16
   38d88:	mov	r4, r1
   38d8c:	mov	r5, r0
   38d90:	ldr	r0, [r0, #36]	; 0x24
   38d94:	ldr	r7, [r5, #104]	; 0x68
   38d98:	cmp	r0, r1
   38d9c:	bgt	38dac <__assert_fail@plt+0x261bc>
   38da0:	ldr	r1, [r5, #48]	; 0x30
   38da4:	cmp	r0, r1
   38da8:	blt	38dc4 <__assert_fail@plt+0x261d4>
   38dac:	ldr	r0, [r5, #28]
   38db0:	cmp	r0, r4
   38db4:	bgt	38ddc <__assert_fail@plt+0x261ec>
   38db8:	ldr	r1, [r5, #48]	; 0x30
   38dbc:	cmp	r0, r1
   38dc0:	bge	38ddc <__assert_fail@plt+0x261ec>
   38dc4:	add	r1, r4, #1
   38dc8:	mov	r0, r5
   38dcc:	bl	38348 <__assert_fail@plt+0x25758>
   38dd0:	mov	r6, r0
   38dd4:	cmp	r0, #0
   38dd8:	bne	38e0c <__assert_fail@plt+0x2621c>
   38ddc:	mov	r6, #0
   38de0:	cmp	r7, r4
   38de4:	bge	38e0c <__assert_fail@plt+0x2621c>
   38de8:	sub	r0, r4, r7
   38dec:	lsl	r2, r0, #2
   38df0:	ldr	r0, [r5, #100]	; 0x64
   38df4:	add	r0, r0, r7, lsl #2
   38df8:	add	r0, r0, #4
   38dfc:	mov	r6, #0
   38e00:	mov	r1, #0
   38e04:	bl	12938 <memset@plt>
   38e08:	str	r4, [r5, #104]	; 0x68
   38e0c:	mov	r0, r6
   38e10:	pop	{r4, r5, r6, r7, fp, pc}
   38e14:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   38e18:	add	fp, sp, #24
   38e1c:	sub	sp, sp, #16
   38e20:	mov	r7, r3
   38e24:	mov	r6, r2
   38e28:	mov	r8, r1
   38e2c:	mov	r4, r0
   38e30:	ldr	r2, [r2]
   38e34:	ldr	r3, [r6, #4]
   38e38:	mov	r0, #8
   38e3c:	str	r0, [sp, #8]
   38e40:	ldr	r5, [fp, #8]
   38e44:	str	r5, [sp, #4]
   38e48:	str	r7, [sp]
   38e4c:	add	r1, r6, #8
   38e50:	mov	r0, r4
   38e54:	bl	38f0c <__assert_fail@plt+0x2631c>
   38e58:	cmp	r0, #0
   38e5c:	beq	38e68 <__assert_fail@plt+0x26278>
   38e60:	sub	sp, fp, #24
   38e64:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   38e68:	ldr	r3, [r8]
   38e6c:	ldr	r0, [r6, #4]
   38e70:	str	r0, [sp]
   38e74:	mov	r0, r4
   38e78:	mov	r1, r7
   38e7c:	mov	r2, r5
   38e80:	bl	39374 <__assert_fail@plt+0x26784>
   38e84:	cmp	r0, #0
   38e88:	bne	38e60 <__assert_fail@plt+0x26270>
   38e8c:	ldr	r0, [r6, #4]
   38e90:	add	r0, r0, r5
   38e94:	ldr	r1, [r8]
   38e98:	sub	r1, r0, r1
   38e9c:	mov	r0, r4
   38ea0:	sub	sp, fp, #24
   38ea4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   38ea8:	b	38d80 <__assert_fail@plt+0x26190>
   38eac:	push	{r4, r5, fp, lr}
   38eb0:	add	fp, sp, #8
   38eb4:	ldr	r4, [r1, #4]
   38eb8:	cmp	r4, #1
   38ebc:	blt	38f04 <__assert_fail@plt+0x26314>
   38ec0:	ldr	ip, [r0]
   38ec4:	ldr	lr, [r1, #8]
   38ec8:	mov	r4, #0
   38ecc:	b	38ee0 <__assert_fail@plt+0x262f0>
   38ed0:	add	r4, r4, #1
   38ed4:	ldr	r0, [r1, #4]
   38ed8:	cmp	r4, r0
   38edc:	bge	38f04 <__assert_fail@plt+0x26314>
   38ee0:	ldr	r0, [lr, r4, lsl #2]
   38ee4:	add	r5, ip, r0, lsl #3
   38ee8:	ldrb	r5, [r5, #4]
   38eec:	cmp	r5, r3
   38ef0:	bne	38ed0 <__assert_fail@plt+0x262e0>
   38ef4:	ldr	r5, [ip, r0, lsl #3]
   38ef8:	cmp	r5, r2
   38efc:	bne	38ed0 <__assert_fail@plt+0x262e0>
   38f00:	pop	{r4, r5, fp, pc}
   38f04:	mvn	r0, #0
   38f08:	pop	{r4, r5, fp, pc}
   38f0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38f10:	add	fp, sp, #28
   38f14:	sub	sp, sp, #52	; 0x34
   38f18:	mov	r7, r3
   38f1c:	mov	r8, r2
   38f20:	mov	r6, r1
   38f24:	mov	r4, r0
   38f28:	ldr	r1, [r0, #84]	; 0x54
   38f2c:	mov	r0, #0
   38f30:	str	r0, [fp, #-32]	; 0xffffffe0
   38f34:	str	r1, [sp, #28]
   38f38:	ldr	r0, [r1]
   38f3c:	ldr	r0, [r0, r2, lsl #3]
   38f40:	str	r0, [sp, #20]
   38f44:	ldr	r0, [r4, #120]	; 0x78
   38f48:	ldr	sl, [fp, #12]
   38f4c:	add	r0, r0, sl
   38f50:	ldr	r5, [r6, #4]
   38f54:	cmp	r5, r0
   38f58:	ble	39284 <__assert_fail@plt+0x26694>
   38f5c:	ldr	r0, [r4, #40]	; 0x28
   38f60:	str	r0, [sp, #16]
   38f64:	ldr	r2, [r4, #88]	; 0x58
   38f68:	ldr	r0, [r4, #100]	; 0x64
   38f6c:	str	r0, [sp, #12]
   38f70:	ldr	r9, [r6]
   38f74:	ldr	r0, [r6, #8]
   38f78:	str	r0, [r4, #100]	; 0x64
   38f7c:	cmp	r9, #0
   38f80:	moveq	r9, r7
   38f84:	str	r9, [r4, #40]	; 0x28
   38f88:	sub	r1, r9, #1
   38f8c:	mov	r0, r4
   38f90:	bl	37e04 <__assert_fail@plt+0x25214>
   38f94:	cmp	r9, r7
   38f98:	mov	r5, r4
   38f9c:	bne	38fe0 <__assert_fail@plt+0x263f0>
   38fa0:	mov	r7, r0
   38fa4:	add	r0, sp, #32
   38fa8:	mov	r1, r8
   38fac:	bl	35d0c <__assert_fail@plt+0x2311c>
   38fb0:	str	r0, [fp, #-32]	; 0xffffffe0
   38fb4:	cmp	r0, #0
   38fb8:	bne	392e8 <__assert_fail@plt+0x266f8>
   38fbc:	add	r1, sp, #32
   38fc0:	ldr	r0, [sp, #28]
   38fc4:	ldr	r2, [sp, #20]
   38fc8:	ldr	r3, [fp, #16]
   38fcc:	bl	39470 <__assert_fail@plt+0x26880>
   38fd0:	str	r0, [fp, #-32]	; 0xffffffe0
   38fd4:	cmp	r0, #0
   38fd8:	beq	39054 <__assert_fail@plt+0x26464>
   38fdc:	b	39210 <__assert_fail@plt+0x26620>
   38fe0:	ldr	r1, [r5, #100]	; 0x64
   38fe4:	ldr	r8, [r1, r9, lsl #2]
   38fe8:	cmp	r8, #0
   38fec:	beq	39014 <__assert_fail@plt+0x26424>
   38ff0:	ldrb	r1, [r8, #52]	; 0x34
   38ff4:	mov	r7, r0
   38ff8:	tst	r1, #64	; 0x40
   38ffc:	bne	39030 <__assert_fail@plt+0x26440>
   39000:	mov	r0, #0
   39004:	str	r0, [sp, #36]	; 0x24
   39008:	str	r0, [sp, #32]
   3900c:	str	r0, [sp, #40]	; 0x28
   39010:	b	39048 <__assert_fail@plt+0x26458>
   39014:	mov	r8, #0
   39018:	str	r8, [sp, #36]	; 0x24
   3901c:	str	r8, [sp, #32]
   39020:	str	r8, [sp, #40]	; 0x28
   39024:	cmp	r9, sl
   39028:	blt	390c4 <__assert_fail@plt+0x264d4>
   3902c:	b	3922c <__assert_fail@plt+0x2663c>
   39030:	add	r1, r8, #4
   39034:	add	r0, sp, #32
   39038:	bl	365fc <__assert_fail@plt+0x23a0c>
   3903c:	str	r0, [fp, #-32]	; 0xffffffe0
   39040:	cmp	r0, #0
   39044:	bne	392e8 <__assert_fail@plt+0x266f8>
   39048:	ldrb	r0, [r8, #52]	; 0x34
   3904c:	tst	r0, #64	; 0x40
   39050:	beq	390bc <__assert_fail@plt+0x264cc>
   39054:	ldr	r0, [sp, #36]	; 0x24
   39058:	cmp	r0, #0
   3905c:	beq	39088 <__assert_fail@plt+0x26498>
   39060:	ldr	r0, [fp, #16]
   39064:	str	r0, [sp]
   39068:	add	r1, sp, #32
   3906c:	mov	r0, r5
   39070:	mov	r2, r9
   39074:	ldr	r3, [sp, #20]
   39078:	bl	39568 <__assert_fail@plt+0x26978>
   3907c:	str	r0, [fp, #-32]	; 0xffffffe0
   39080:	cmp	r0, #0
   39084:	bne	39210 <__assert_fail@plt+0x26620>
   39088:	sub	r0, fp, #32
   3908c:	add	r2, sp, #32
   39090:	ldr	r1, [sp, #28]
   39094:	mov	r3, r7
   39098:	bl	366e8 <__assert_fail@plt+0x23af8>
   3909c:	mov	r8, r0
   390a0:	cmp	r0, #0
   390a4:	bne	390b4 <__assert_fail@plt+0x264c4>
   390a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   390ac:	cmp	r0, #0
   390b0:	bne	39210 <__assert_fail@plt+0x26620>
   390b4:	ldr	r0, [r5, #100]	; 0x64
   390b8:	str	r8, [r0, r9, lsl #2]
   390bc:	cmp	r9, sl
   390c0:	bge	3922c <__assert_fail@plt+0x2663c>
   390c4:	str	r6, [sp, #8]
   390c8:	rsb	r0, sl, #0
   390cc:	str	r0, [sp, #24]
   390d0:	add	r7, r9, #1
   390d4:	add	r6, sp, #32
   390d8:	mov	sl, #0
   390dc:	ldr	r4, [sp, #20]
   390e0:	b	39110 <__assert_fail@plt+0x26520>
   390e4:	ldr	r0, [r5, #100]	; 0x64
   390e8:	str	r8, [r0, r7, lsl #2]
   390ec:	cmp	r8, #0
   390f0:	mov	r0, #0
   390f4:	addeq	r0, sl, #1
   390f8:	add	r7, r7, #1
   390fc:	ldr	r1, [sp, #24]
   39100:	add	r1, r1, r7
   39104:	cmp	r1, #1
   39108:	mov	sl, r0
   3910c:	beq	39220 <__assert_fail@plt+0x26630>
   39110:	sub	r9, r7, #1
   39114:	ldr	r0, [r5, #120]	; 0x78
   39118:	cmp	sl, r0
   3911c:	bgt	39224 <__assert_fail@plt+0x26634>
   39120:	mov	r0, #0
   39124:	str	r0, [sp, #36]	; 0x24
   39128:	ldr	r0, [r5, #100]	; 0x64
   3912c:	ldr	r0, [r0, r7, lsl #2]
   39130:	cmp	r0, #0
   39134:	beq	39150 <__assert_fail@plt+0x26560>
   39138:	add	r1, r0, #4
   3913c:	mov	r0, r6
   39140:	bl	361f8 <__assert_fail@plt+0x23608>
   39144:	str	r0, [fp, #-32]	; 0xffffffe0
   39148:	cmp	r0, #0
   3914c:	bne	39210 <__assert_fail@plt+0x26620>
   39150:	cmp	r8, #0
   39154:	beq	39178 <__assert_fail@plt+0x26588>
   39158:	add	r2, r8, #16
   3915c:	mov	r0, r5
   39160:	mov	r1, r9
   39164:	mov	r3, r6
   39168:	bl	39800 <__assert_fail@plt+0x26c10>
   3916c:	str	r0, [fp, #-32]	; 0xffffffe0
   39170:	cmp	r0, #0
   39174:	bne	39210 <__assert_fail@plt+0x26620>
   39178:	ldr	r0, [sp, #36]	; 0x24
   3917c:	cmp	r0, #0
   39180:	beq	391d4 <__assert_fail@plt+0x265e4>
   39184:	mov	r8, r5
   39188:	ldr	r0, [sp, #28]
   3918c:	mov	r1, r6
   39190:	mov	r2, r4
   39194:	ldr	r5, [fp, #16]
   39198:	mov	r3, r5
   3919c:	bl	39470 <__assert_fail@plt+0x26880>
   391a0:	str	r0, [fp, #-32]	; 0xffffffe0
   391a4:	cmp	r0, #0
   391a8:	bne	39210 <__assert_fail@plt+0x26620>
   391ac:	str	r5, [sp]
   391b0:	mov	r5, r8
   391b4:	mov	r0, r8
   391b8:	mov	r1, r6
   391bc:	mov	r2, r7
   391c0:	mov	r3, r4
   391c4:	bl	39568 <__assert_fail@plt+0x26978>
   391c8:	str	r0, [fp, #-32]	; 0xffffffe0
   391cc:	cmp	r0, #0
   391d0:	bne	39210 <__assert_fail@plt+0x26620>
   391d4:	ldr	r2, [r5, #88]	; 0x58
   391d8:	mov	r0, r5
   391dc:	mov	r1, r9
   391e0:	bl	37e04 <__assert_fail@plt+0x25214>
   391e4:	mov	r3, r0
   391e8:	sub	r0, fp, #32
   391ec:	ldr	r1, [sp, #28]
   391f0:	mov	r2, r6
   391f4:	bl	366e8 <__assert_fail@plt+0x23af8>
   391f8:	mov	r8, r0
   391fc:	cmp	r0, #0
   39200:	bne	390e4 <__assert_fail@plt+0x264f4>
   39204:	ldr	r0, [fp, #-32]	; 0xffffffe0
   39208:	cmp	r0, #0
   3920c:	beq	390e4 <__assert_fail@plt+0x264f4>
   39210:	ldr	r0, [sp, #40]	; 0x28
   39214:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   39218:	ldr	r4, [fp, #-32]	; 0xffffffe0
   3921c:	b	39278 <__assert_fail@plt+0x26688>
   39220:	sub	r9, r7, #1
   39224:	ldr	r6, [sp, #8]
   39228:	ldr	sl, [fp, #12]
   3922c:	ldr	r0, [sp, #40]	; 0x28
   39230:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   39234:	ldr	r0, [r5, #100]	; 0x64
   39238:	ldr	r0, [r0, sl, lsl #2]
   3923c:	str	r9, [r6]
   39240:	ldr	r1, [sp, #16]
   39244:	str	r1, [r5, #40]	; 0x28
   39248:	ldr	r1, [sp, #12]
   3924c:	str	r1, [r5, #100]	; 0x64
   39250:	cmp	r0, #0
   39254:	beq	39274 <__assert_fail@plt+0x26684>
   39258:	ldr	r1, [fp, #8]
   3925c:	add	r0, r0, #4
   39260:	bl	36678 <__assert_fail@plt+0x23a88>
   39264:	mov	r4, #0
   39268:	cmp	r0, #0
   3926c:	moveq	r4, #1
   39270:	b	39278 <__assert_fail@plt+0x26688>
   39274:	mov	r4, #1
   39278:	mov	r0, r4
   3927c:	sub	sp, fp, #28
   39280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39284:	str	r4, [sp, #24]
   39288:	mvn	r1, #-2147483648	; 0x80000000
   3928c:	sub	r1, r1, r5
   39290:	mov	r4, #12
   39294:	cmp	r1, r0
   39298:	ble	39278 <__assert_fail@plt+0x26688>
   3929c:	add	r0, r0, #1
   392a0:	add	sl, r0, r5
   392a4:	cmn	sl, #-1073741823	; 0xc0000001
   392a8:	bhi	39278 <__assert_fail@plt+0x26688>
   392ac:	mov	r9, r0
   392b0:	ldr	r0, [r6, #8]
   392b4:	lsl	r1, sl, #2
   392b8:	bl	2f894 <__assert_fail@plt+0x1cca4>
   392bc:	cmp	r0, #0
   392c0:	beq	39278 <__assert_fail@plt+0x26688>
   392c4:	str	sl, [r6, #4]
   392c8:	str	r0, [r6, #8]
   392cc:	add	r0, r0, r5, lsl #2
   392d0:	lsl	r2, r9, #2
   392d4:	mov	r1, #0
   392d8:	bl	12938 <memset@plt>
   392dc:	ldr	sl, [fp, #12]
   392e0:	ldr	r4, [sp, #24]
   392e4:	b	38f5c <__assert_fail@plt+0x2636c>
   392e8:	mov	r4, r0
   392ec:	b	39278 <__assert_fail@plt+0x26688>
   392f0:	push	{r4, r5, r6, r7, fp, lr}
   392f4:	add	fp, sp, #16
   392f8:	mov	r5, r2
   392fc:	mov	r6, r1
   39300:	mov	r4, r0
   39304:	ldr	r0, [r0, #12]
   39308:	ldr	r1, [r4, #16]
   3930c:	cmp	r1, r0
   39310:	beq	39344 <__assert_fail@plt+0x26754>
   39314:	mov	r0, #1
   39318:	mov	r1, #20
   3931c:	bl	2c4f4 <__assert_fail@plt+0x19904>
   39320:	cmp	r0, #0
   39324:	ldrne	r1, [r4, #16]
   39328:	ldrne	r2, [r4, #20]
   3932c:	strne	r0, [r2, r1, lsl #2]
   39330:	strne	r6, [r0]
   39334:	strne	r5, [r0, #4]
   39338:	addne	r1, r1, #1
   3933c:	strne	r1, [r4, #16]
   39340:	pop	{r4, r5, r6, r7, fp, pc}
   39344:	mov	r1, #1
   39348:	orr	r7, r1, r0, lsl #1
   3934c:	lsl	r1, r7, #2
   39350:	ldr	r0, [r4, #20]
   39354:	bl	2f894 <__assert_fail@plt+0x1cca4>
   39358:	cmp	r0, #0
   3935c:	beq	3936c <__assert_fail@plt+0x2677c>
   39360:	str	r7, [r4, #12]
   39364:	str	r0, [r4, #20]
   39368:	b	39314 <__assert_fail@plt+0x26724>
   3936c:	mov	r0, #0
   39370:	pop	{r4, r5, r6, r7, fp, pc}
   39374:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   39378:	add	fp, sp, #24
   3937c:	mov	r5, r3
   39380:	mov	r9, r2
   39384:	mov	r8, r1
   39388:	mov	r4, r0
   3938c:	ldr	r1, [r0, #108]	; 0x6c
   39390:	ldr	r2, [r0, #112]	; 0x70
   39394:	cmp	r1, r2
   39398:	blt	393e8 <__assert_fail@plt+0x267f8>
   3939c:	ldr	r0, [r4, #116]	; 0x74
   393a0:	add	r1, r2, r2, lsl #1
   393a4:	lsl	r1, r1, #4
   393a8:	bl	2f894 <__assert_fail@plt+0x1cca4>
   393ac:	cmp	r0, #0
   393b0:	beq	39460 <__assert_fail@plt+0x26870>
   393b4:	str	r0, [r4, #116]	; 0x74
   393b8:	ldr	r1, [r4, #108]	; 0x6c
   393bc:	ldr	r2, [r4, #112]	; 0x70
   393c0:	add	r1, r1, r1, lsl #1
   393c4:	add	r0, r0, r1, lsl #3
   393c8:	add	r1, r2, r2, lsl #1
   393cc:	lsl	r2, r1, #3
   393d0:	mov	r1, #0
   393d4:	bl	12938 <memset@plt>
   393d8:	ldr	r1, [r4, #108]	; 0x6c
   393dc:	ldr	r0, [r4, #112]	; 0x70
   393e0:	lsl	r0, r0, #1
   393e4:	str	r0, [r4, #112]	; 0x70
   393e8:	ldr	r2, [fp, #8]
   393ec:	cmp	r1, #1
   393f0:	blt	39414 <__assert_fail@plt+0x26824>
   393f4:	ldr	r0, [r4, #116]	; 0x74
   393f8:	sub	r3, r1, #1
   393fc:	add	r3, r3, r3, lsl #1
   39400:	add	r0, r0, r3, lsl #3
   39404:	ldr	r3, [r0, #4]
   39408:	cmp	r3, r9
   3940c:	moveq	r3, #1
   39410:	strbeq	r3, [r0, #20]
   39414:	mov	r0, #0
   39418:	cmp	r2, r5
   3941c:	mov	r3, #0
   39420:	mvneq	r3, #0
   39424:	ldr	r7, [r4, #116]	; 0x74
   39428:	add	r6, r1, r1, lsl #1
   3942c:	str	r8, [r7, r6, lsl #3]!
   39430:	str	r9, [r7, #4]
   39434:	str	r5, [r7, #8]
   39438:	str	r2, [r7, #12]
   3943c:	str	r3, [r7, #16]
   39440:	add	r1, r1, #1
   39444:	str	r1, [r4, #108]	; 0x6c
   39448:	strb	r0, [r7, #20]
   3944c:	sub	r1, r2, r5
   39450:	ldr	r2, [r4, #120]	; 0x78
   39454:	cmp	r2, r1
   39458:	strlt	r1, [r4, #120]	; 0x78
   3945c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   39460:	ldr	r0, [r4, #116]	; 0x74
   39464:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   39468:	mov	r0, #12
   3946c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   39470:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39474:	add	fp, sp, #28
   39478:	sub	sp, sp, #20
   3947c:	mov	r9, r3
   39480:	mov	sl, r2
   39484:	mov	r4, r1
   39488:	mov	r7, r0
   3948c:	ldr	r1, [r1, #4]
   39490:	add	r0, sp, #8
   39494:	bl	35f6c <__assert_fail@plt+0x2337c>
   39498:	cmp	r0, #0
   3949c:	bne	39560 <__assert_fail@plt+0x26970>
   394a0:	ldr	r0, [r4, #4]
   394a4:	cmp	r0, #1
   394a8:	blt	39528 <__assert_fail@plt+0x26938>
   394ac:	mov	r8, #0
   394b0:	ldr	r0, [r4, #8]
   394b4:	ldr	r5, [r0, r8, lsl #2]
   394b8:	add	r0, r5, r5, lsl #1
   394bc:	ldr	r1, [r7, #24]
   394c0:	add	r6, r1, r0, lsl #2
   394c4:	mov	r0, r7
   394c8:	mov	r1, r6
   394cc:	mov	r2, sl
   394d0:	mov	r3, r9
   394d4:	bl	38eac <__assert_fail@plt+0x262bc>
   394d8:	cmn	r0, #1
   394dc:	beq	39504 <__assert_fail@plt+0x26914>
   394e0:	str	r9, [sp]
   394e4:	mov	r0, r7
   394e8:	add	r1, sp, #8
   394ec:	mov	r2, r5
   394f0:	mov	r3, sl
   394f4:	bl	399b8 <__assert_fail@plt+0x26dc8>
   394f8:	cmp	r0, #0
   394fc:	beq	39518 <__assert_fail@plt+0x26928>
   39500:	b	39550 <__assert_fail@plt+0x26960>
   39504:	add	r0, sp, #8
   39508:	mov	r1, r6
   3950c:	bl	361f8 <__assert_fail@plt+0x23608>
   39510:	cmp	r0, #0
   39514:	bne	39550 <__assert_fail@plt+0x26960>
   39518:	ldr	r0, [r4, #4]
   3951c:	add	r8, r8, #1
   39520:	cmp	r8, r0
   39524:	blt	394b0 <__assert_fail@plt+0x268c0>
   39528:	ldr	r0, [r4, #8]
   3952c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   39530:	vldr	d16, [sp, #8]
   39534:	ldr	r0, [sp, #16]
   39538:	str	r0, [r4, #8]
   3953c:	vstr	d16, [r4]
   39540:	mov	r5, #0
   39544:	mov	r0, r5
   39548:	sub	sp, fp, #28
   3954c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39550:	mov	r5, r0
   39554:	ldr	r0, [sp, #16]
   39558:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   3955c:	b	39544 <__assert_fail@plt+0x26954>
   39560:	mov	r5, r0
   39564:	b	39544 <__assert_fail@plt+0x26954>
   39568:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3956c:	add	fp, sp, #28
   39570:	sub	sp, sp, #44	; 0x2c
   39574:	str	r3, [sp, #8]
   39578:	mov	sl, r1
   3957c:	ldr	r6, [r0, #84]	; 0x54
   39580:	str	r0, [sp, #16]
   39584:	str	r2, [sp, #24]
   39588:	mov	r1, r2
   3958c:	bl	38cf4 <__assert_fail@plt+0x26104>
   39590:	mov	r1, #0
   39594:	cmn	r0, #1
   39598:	beq	397f4 <__assert_fail@plt+0x26c04>
   3959c:	add	r1, r0, r0, lsl #1
   395a0:	add	r7, sp, #28
   395a4:	str	r6, [sp, #20]
   395a8:	str	r1, [sp, #4]
   395ac:	ldr	r0, [sp, #16]
   395b0:	ldr	r0, [r0, #116]	; 0x74
   395b4:	add	r0, r0, r1, lsl #3
   395b8:	add	r0, r0, #12
   395bc:	b	395d8 <__assert_fail@plt+0x269e8>
   395c0:	ldr	r6, [sp, #20]
   395c4:	add	r7, sp, #28
   395c8:	add	r0, r9, #24
   395cc:	ldrb	r1, [r9, #8]
   395d0:	cmp	r1, #0
   395d4:	beq	397e8 <__assert_fail@plt+0x26bf8>
   395d8:	mov	r9, r0
   395dc:	ldr	r1, [r0, #-12]
   395e0:	mov	r0, sl
   395e4:	bl	36678 <__assert_fail@plt+0x23a88>
   395e8:	cmp	r0, #0
   395ec:	beq	395c8 <__assert_fail@plt+0x269d8>
   395f0:	ldmda	r9, {r0, r1}
   395f4:	ldr	r2, [sp, #24]
   395f8:	add	r1, r1, r2
   395fc:	sub	r5, r1, r0
   39600:	cmp	r5, r2
   39604:	bne	396b8 <__assert_fail@plt+0x26ac8>
   39608:	ldr	r0, [r6, #20]
   3960c:	ldr	r1, [r9, #-12]
   39610:	add	r1, r1, r1, lsl #1
   39614:	add	r0, r0, r1, lsl #2
   39618:	ldr	r0, [r0, #8]
   3961c:	ldr	r4, [r0]
   39620:	mov	r0, sl
   39624:	mov	r1, r4
   39628:	bl	36678 <__assert_fail@plt+0x23a88>
   3962c:	mov	r1, #4
   39630:	cmp	r0, #0
   39634:	bne	397b4 <__assert_fail@plt+0x26bc4>
   39638:	mov	r0, r7
   3963c:	mov	r1, r4
   39640:	bl	35d0c <__assert_fail@plt+0x2311c>
   39644:	mov	r4, r7
   39648:	mov	r8, r0
   3964c:	str	r0, [fp, #-32]	; 0xffffffe0
   39650:	mov	r0, r6
   39654:	mov	r1, r7
   39658:	ldr	r2, [sp, #8]
   3965c:	ldr	r3, [fp, #8]
   39660:	bl	39470 <__assert_fail@plt+0x26880>
   39664:	mov	r7, r0
   39668:	mov	r0, sl
   3966c:	mov	r1, r4
   39670:	bl	361f8 <__assert_fail@plt+0x23608>
   39674:	mov	r4, r0
   39678:	ldr	r0, [sp, #36]	; 0x24
   3967c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   39680:	orr	r0, r7, r8
   39684:	orrs	r0, r0, r4
   39688:	mov	r1, #2
   3968c:	beq	397b4 <__assert_fail@plt+0x26bc4>
   39690:	cmp	r7, #0
   39694:	movne	r4, r7
   39698:	cmp	r8, #0
   3969c:	movne	r4, r8
   396a0:	str	r4, [fp, #-32]	; 0xffffffe0
   396a4:	mov	r1, #1
   396a8:	str	r4, [sp, #12]
   396ac:	cmp	r1, #0
   396b0:	bne	397bc <__assert_fail@plt+0x26bcc>
   396b4:	b	395c0 <__assert_fail@plt+0x269d0>
   396b8:	ldr	r0, [sp, #16]
   396bc:	ldr	r0, [r0, #100]	; 0x64
   396c0:	ldr	r0, [r0, r5, lsl #2]
   396c4:	ldr	r1, [r9, #-12]
   396c8:	ldr	r2, [r6, #12]
   396cc:	ldr	r4, [r2, r1, lsl #2]
   396d0:	cmp	r0, #0
   396d4:	beq	3974c <__assert_fail@plt+0x26b5c>
   396d8:	add	r8, r0, #4
   396dc:	mov	r0, r8
   396e0:	mov	r1, r4
   396e4:	bl	36678 <__assert_fail@plt+0x23a88>
   396e8:	mov	r1, #4
   396ec:	cmp	r0, #0
   396f0:	bne	397b4 <__assert_fail@plt+0x26bc4>
   396f4:	mov	r0, r7
   396f8:	mov	r1, r8
   396fc:	bl	365fc <__assert_fail@plt+0x23a0c>
   39700:	mov	r8, r0
   39704:	str	r0, [fp, #-32]	; 0xffffffe0
   39708:	mov	r0, r7
   3970c:	mov	r1, r4
   39710:	bl	36410 <__assert_fail@plt+0x23820>
   39714:	cmp	r8, #0
   39718:	bne	39724 <__assert_fail@plt+0x26b34>
   3971c:	cmp	r0, #0
   39720:	bne	39764 <__assert_fail@plt+0x26b74>
   39724:	ldr	r0, [sp, #36]	; 0x24
   39728:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   3972c:	cmp	r8, #0
   39730:	movweq	r8, #12
   39734:	str	r8, [fp, #-32]	; 0xffffffe0
   39738:	mov	r1, #1
   3973c:	str	r8, [sp, #12]
   39740:	cmp	r1, #0
   39744:	bne	397bc <__assert_fail@plt+0x26bcc>
   39748:	b	395c0 <__assert_fail@plt+0x269d0>
   3974c:	mov	r0, r7
   39750:	mov	r1, r4
   39754:	bl	35d0c <__assert_fail@plt+0x2311c>
   39758:	str	r0, [fp, #-32]	; 0xffffffe0
   3975c:	cmp	r0, #0
   39760:	bne	397d0 <__assert_fail@plt+0x26be0>
   39764:	sub	r0, fp, #32
   39768:	mov	r1, r6
   3976c:	mov	r2, r7
   39770:	bl	39ac4 <__assert_fail@plt+0x26ed4>
   39774:	ldr	r4, [sp, #16]
   39778:	ldr	r1, [r4, #100]	; 0x64
   3977c:	str	r0, [r1, r5, lsl #2]
   39780:	ldr	r0, [sp, #36]	; 0x24
   39784:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   39788:	ldr	r0, [r4, #100]	; 0x64
   3978c:	ldr	r0, [r0, r5, lsl #2]
   39790:	clz	r0, r0
   39794:	lsr	r1, r0, #5
   39798:	ldr	r0, [fp, #-32]	; 0xffffffe0
   3979c:	cmp	r0, #0
   397a0:	mov	r2, r0
   397a4:	movwne	r2, #1
   397a8:	ands	r1, r1, r2
   397ac:	ldreq	r0, [sp, #12]
   397b0:	str	r0, [sp, #12]
   397b4:	cmp	r1, #0
   397b8:	beq	395c0 <__assert_fail@plt+0x269d0>
   397bc:	cmp	r1, #4
   397c0:	ldr	r6, [sp, #20]
   397c4:	add	r7, sp, #28
   397c8:	beq	395c8 <__assert_fail@plt+0x269d8>
   397cc:	b	397d8 <__assert_fail@plt+0x26be8>
   397d0:	mov	r1, #1
   397d4:	b	397b0 <__assert_fail@plt+0x26bc0>
   397d8:	cmp	r1, #2
   397dc:	bne	397f0 <__assert_fail@plt+0x26c00>
   397e0:	ldr	r1, [sp, #4]
   397e4:	b	395ac <__assert_fail@plt+0x269bc>
   397e8:	mov	r1, #0
   397ec:	b	397f4 <__assert_fail@plt+0x26c04>
   397f0:	ldr	r1, [sp, #12]
   397f4:	mov	r0, r1
   397f8:	sub	sp, fp, #28
   397fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39800:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39804:	add	fp, sp, #28
   39808:	sub	sp, sp, #36	; 0x24
   3980c:	str	r1, [sp, #12]
   39810:	mov	r7, r0
   39814:	ldr	r4, [r0, #84]	; 0x54
   39818:	mov	r9, #0
   3981c:	str	r9, [sp, #32]
   39820:	str	r9, [sp, #20]
   39824:	str	r9, [sp, #16]
   39828:	str	r9, [sp, #24]
   3982c:	ldr	r0, [r2, #4]
   39830:	cmp	r0, #1
   39834:	blt	39994 <__assert_fail@plt+0x26da4>
   39838:	mov	r8, r3
   3983c:	mov	r5, r2
   39840:	mov	r6, #0
   39844:	str	r3, [sp, #4]
   39848:	str	r2, [sp, #8]
   3984c:	b	39888 <__assert_fail@plt+0x26c98>
   39850:	cmp	r0, #0
   39854:	mov	r7, r5
   39858:	ldr	r5, [sp, #8]
   3985c:	beq	398a4 <__assert_fail@plt+0x26cb4>
   39860:	ldr	r0, [r4, #12]
   39864:	ldr	r1, [r0, sl, lsl #2]
   39868:	mov	r0, r8
   3986c:	bl	36410 <__assert_fail@plt+0x23820>
   39870:	cmp	r0, #0
   39874:	beq	399a8 <__assert_fail@plt+0x26db8>
   39878:	add	r6, r6, #1
   3987c:	ldr	r0, [r5, #4]
   39880:	cmp	r6, r0
   39884:	bge	39990 <__assert_fail@plt+0x26da0>
   39888:	ldr	r0, [r5, #8]
   3988c:	ldr	sl, [r0, r6, lsl #2]
   39890:	ldr	r0, [r4]
   39894:	add	r0, r0, sl, lsl #3
   39898:	ldrb	r0, [r0, #6]
   3989c:	tst	r0, #16
   398a0:	bne	398c4 <__assert_fail@plt+0x26cd4>
   398a4:	ldr	r0, [r4]
   398a8:	add	r1, r0, sl, lsl #3
   398ac:	mov	r0, r7
   398b0:	ldr	r2, [sp, #12]
   398b4:	bl	39fb0 <__assert_fail@plt+0x273c0>
   398b8:	cmp	r0, #0
   398bc:	bne	39860 <__assert_fail@plt+0x26c70>
   398c0:	b	39878 <__assert_fail@plt+0x26c88>
   398c4:	mov	r0, r4
   398c8:	mov	r1, sl
   398cc:	mov	r2, r7
   398d0:	mov	r5, r7
   398d4:	ldr	r7, [sp, #12]
   398d8:	mov	r3, r7
   398dc:	bl	39cd4 <__assert_fail@plt+0x270e4>
   398e0:	cmp	r0, #2
   398e4:	blt	39850 <__assert_fail@plt+0x26c60>
   398e8:	add	r8, r0, r7
   398ec:	ldr	r0, [r5, #100]	; 0x64
   398f0:	ldr	r0, [r0, r8, lsl #2]
   398f4:	ldr	r1, [r4, #12]
   398f8:	ldr	r2, [r1, sl, lsl #2]
   398fc:	mov	r1, #0
   39900:	str	r1, [sp, #20]
   39904:	cmp	r0, #0
   39908:	mov	r7, r5
   3990c:	add	r5, sp, #16
   39910:	beq	3993c <__assert_fail@plt+0x26d4c>
   39914:	add	r1, r0, #4
   39918:	mov	r0, r5
   3991c:	mov	r9, r5
   39920:	mov	r5, r2
   39924:	bl	361f8 <__assert_fail@plt+0x23608>
   39928:	mov	r2, r5
   3992c:	mov	r5, r9
   39930:	str	r0, [sp, #32]
   39934:	cmp	r0, #0
   39938:	bne	399b0 <__assert_fail@plt+0x26dc0>
   3993c:	mov	r0, r5
   39940:	mov	r1, r2
   39944:	bl	36410 <__assert_fail@plt+0x23820>
   39948:	cmp	r0, #0
   3994c:	beq	399a8 <__assert_fail@plt+0x26db8>
   39950:	add	r0, sp, #32
   39954:	mov	r1, r4
   39958:	mov	r2, r5
   3995c:	bl	39ac4 <__assert_fail@plt+0x26ed4>
   39960:	ldr	r1, [r7, #100]	; 0x64
   39964:	str	r0, [r1, r8, lsl #2]
   39968:	ldr	r0, [r7, #100]	; 0x64
   3996c:	ldr	r0, [r0, r8, lsl #2]
   39970:	cmp	r0, #0
   39974:	ldr	r8, [sp, #4]
   39978:	ldr	r5, [sp, #8]
   3997c:	bne	39860 <__assert_fail@plt+0x26c70>
   39980:	ldr	r9, [sp, #32]
   39984:	cmp	r9, #0
   39988:	beq	39860 <__assert_fail@plt+0x26c70>
   3998c:	b	39994 <__assert_fail@plt+0x26da4>
   39990:	mov	r9, #0
   39994:	ldr	r0, [sp, #24]
   39998:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   3999c:	mov	r0, r9
   399a0:	sub	sp, fp, #28
   399a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   399a8:	mov	r9, #12
   399ac:	b	39994 <__assert_fail@plt+0x26da4>
   399b0:	mov	r9, r0
   399b4:	b	39994 <__assert_fail@plt+0x26da4>
   399b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   399bc:	add	fp, sp, #24
   399c0:	sub	sp, sp, #8
   399c4:	mov	r5, r3
   399c8:	mov	r7, r2
   399cc:	mov	r4, r1
   399d0:	mov	r6, r0
   399d4:	mov	r0, r1
   399d8:	mov	r1, r2
   399dc:	bl	36678 <__assert_fail@plt+0x23a88>
   399e0:	cmp	r0, #0
   399e4:	beq	399f4 <__assert_fail@plt+0x26e04>
   399e8:	mov	r0, #0
   399ec:	sub	sp, fp, #24
   399f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   399f4:	ldr	r8, [fp, #8]
   399f8:	b	39a44 <__assert_fail@plt+0x26e54>
   399fc:	ldr	r0, [r0, #8]
   39a00:	ldr	r2, [r0, #4]
   39a04:	str	r8, [sp]
   39a08:	mov	r0, r6
   39a0c:	mov	r1, r4
   39a10:	mov	r3, r5
   39a14:	bl	399b8 <__assert_fail@plt+0x26dc8>
   39a18:	cmp	r0, #0
   39a1c:	bne	399ec <__assert_fail@plt+0x26dfc>
   39a20:	ldr	r0, [r6, #20]
   39a24:	add	r0, r0, r7, lsl #2
   39a28:	ldr	r0, [r0, #8]
   39a2c:	ldr	r7, [r0]
   39a30:	mov	r0, r4
   39a34:	mov	r1, r7
   39a38:	bl	36678 <__assert_fail@plt+0x23a88>
   39a3c:	cmp	r0, #0
   39a40:	bne	399e8 <__assert_fail@plt+0x26df8>
   39a44:	ldr	r0, [r6]
   39a48:	add	r1, r0, r7, lsl #3
   39a4c:	ldrb	r1, [r1, #4]
   39a50:	cmp	r1, r8
   39a54:	bne	39a64 <__assert_fail@plt+0x26e74>
   39a58:	ldr	r0, [r0, r7, lsl #3]
   39a5c:	cmp	r0, r5
   39a60:	beq	39a9c <__assert_fail@plt+0x26eac>
   39a64:	mov	r0, r4
   39a68:	mov	r1, r7
   39a6c:	bl	36410 <__assert_fail@plt+0x23820>
   39a70:	cmp	r0, #0
   39a74:	beq	39ab8 <__assert_fail@plt+0x26ec8>
   39a78:	ldr	r0, [r6, #20]
   39a7c:	add	r7, r7, r7, lsl #1
   39a80:	add	r0, r0, r7, lsl #2
   39a84:	ldr	r1, [r0, #4]
   39a88:	cmp	r1, #2
   39a8c:	beq	399fc <__assert_fail@plt+0x26e0c>
   39a90:	cmp	r1, #0
   39a94:	bne	39a20 <__assert_fail@plt+0x26e30>
   39a98:	b	399e8 <__assert_fail@plt+0x26df8>
   39a9c:	cmp	r8, #9
   39aa0:	bne	399e8 <__assert_fail@plt+0x26df8>
   39aa4:	mov	r0, r4
   39aa8:	mov	r1, r7
   39aac:	bl	36410 <__assert_fail@plt+0x23820>
   39ab0:	cmp	r0, #0
   39ab4:	bne	399e8 <__assert_fail@plt+0x26df8>
   39ab8:	mov	r0, #12
   39abc:	sub	sp, fp, #24
   39ac0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   39ac4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39ac8:	add	fp, sp, #28
   39acc:	sub	sp, sp, #4
   39ad0:	mov	r9, r1
   39ad4:	ldr	r1, [r2, #4]
   39ad8:	cmp	r1, #0
   39adc:	beq	39b88 <__assert_fail@plt+0x26f98>
   39ae0:	mov	sl, r2
   39ae4:	str	r0, [sp]
   39ae8:	mov	r6, #0
   39aec:	mov	r0, r2
   39af0:	mov	r1, #0
   39af4:	bl	367e4 <__assert_fail@plt+0x23bf4>
   39af8:	mov	r7, r0
   39afc:	ldr	r0, [r9, #32]
   39b00:	ldr	r1, [r9, #68]	; 0x44
   39b04:	and	r1, r1, r7
   39b08:	add	r1, r1, r1, lsl #1
   39b0c:	mov	r5, r0
   39b10:	ldr	r2, [r5, r1, lsl #2]!
   39b14:	cmp	r2, #1
   39b18:	blt	39b60 <__assert_fail@plt+0x26f70>
   39b1c:	add	r0, r0, r1, lsl #2
   39b20:	ldr	r8, [r0, #8]
   39b24:	b	39b38 <__assert_fail@plt+0x26f48>
   39b28:	ldr	r0, [r5]
   39b2c:	add	r6, r6, #1
   39b30:	cmp	r6, r0
   39b34:	bge	39b60 <__assert_fail@plt+0x26f70>
   39b38:	ldr	r4, [r8, r6, lsl #2]
   39b3c:	ldr	r0, [r4]
   39b40:	cmp	r7, r0
   39b44:	bne	39b28 <__assert_fail@plt+0x26f38>
   39b48:	add	r0, r4, #4
   39b4c:	mov	r1, sl
   39b50:	bl	36810 <__assert_fail@plt+0x23c20>
   39b54:	cmp	r0, #0
   39b58:	beq	39b28 <__assert_fail@plt+0x26f38>
   39b5c:	b	39b7c <__assert_fail@plt+0x26f8c>
   39b60:	mov	r0, r9
   39b64:	mov	r1, sl
   39b68:	mov	r2, r7
   39b6c:	bl	39ba8 <__assert_fail@plt+0x26fb8>
   39b70:	mov	r4, r0
   39b74:	cmp	r0, #0
   39b78:	beq	39b94 <__assert_fail@plt+0x26fa4>
   39b7c:	mov	r0, r4
   39b80:	sub	sp, fp, #28
   39b84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39b88:	mov	r4, #0
   39b8c:	str	r4, [r0]
   39b90:	b	39b7c <__assert_fail@plt+0x26f8c>
   39b94:	mov	r0, #12
   39b98:	ldr	r1, [sp]
   39b9c:	str	r0, [r1]
   39ba0:	mov	r4, #0
   39ba4:	b	39b7c <__assert_fail@plt+0x26f8c>
   39ba8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   39bac:	add	fp, sp, #24
   39bb0:	mov	r8, r2
   39bb4:	mov	r7, r1
   39bb8:	mov	r9, r0
   39bbc:	mov	r0, #56	; 0x38
   39bc0:	mov	r1, #1
   39bc4:	bl	2c4f4 <__assert_fail@plt+0x19904>
   39bc8:	cmp	r0, #0
   39bcc:	beq	39cc8 <__assert_fail@plt+0x270d8>
   39bd0:	mov	r4, r0
   39bd4:	add	r5, r0, #4
   39bd8:	mov	r0, r5
   39bdc:	mov	r1, r7
   39be0:	bl	365fc <__assert_fail@plt+0x23a0c>
   39be4:	cmp	r0, #0
   39be8:	bne	39cb4 <__assert_fail@plt+0x270c4>
   39bec:	str	r5, [r4, #40]	; 0x28
   39bf0:	ldr	r0, [r7, #4]
   39bf4:	cmp	r0, #1
   39bf8:	blt	39c94 <__assert_fail@plt+0x270a4>
   39bfc:	mov	r0, #0
   39c00:	movw	ip, #65280	; 0xff00
   39c04:	movt	ip, #3
   39c08:	add	r2, ip, #255	; 0xff
   39c0c:	mov	lr, #32
   39c10:	b	39c38 <__assert_fail@plt+0x27048>
   39c14:	ldr	r3, [r5]
   39c18:	tst	r3, ip
   39c1c:	beq	39c28 <__assert_fail@plt+0x27038>
   39c20:	orr	r1, r1, #128	; 0x80
   39c24:	strb	r1, [r4, #52]	; 0x34
   39c28:	ldr	r1, [r7, #4]
   39c2c:	add	r0, r0, #1
   39c30:	cmp	r0, r1
   39c34:	bge	39c94 <__assert_fail@plt+0x270a4>
   39c38:	ldr	r1, [r7, #8]
   39c3c:	ldr	r1, [r1, r0, lsl #2]
   39c40:	ldr	r3, [r9]
   39c44:	add	r5, r3, r1, lsl #3
   39c48:	ldr	r3, [r5, #4]!
   39c4c:	and	r1, r3, r2
   39c50:	cmp	r1, #1
   39c54:	beq	39c28 <__assert_fail@plt+0x27038>
   39c58:	and	r1, lr, r3, lsr #15
   39c5c:	ldrb	r6, [r4, #52]	; 0x34
   39c60:	orr	r1, r6, r1
   39c64:	strb	r1, [r4, #52]	; 0x34
   39c68:	uxtb	r3, r3
   39c6c:	cmp	r3, #12
   39c70:	beq	39c20 <__assert_fail@plt+0x27030>
   39c74:	cmp	r3, #4
   39c78:	beq	39c8c <__assert_fail@plt+0x2709c>
   39c7c:	cmp	r3, #2
   39c80:	bne	39c14 <__assert_fail@plt+0x27024>
   39c84:	orr	r1, r1, #16
   39c88:	b	39c24 <__assert_fail@plt+0x27034>
   39c8c:	orr	r1, r1, #64	; 0x40
   39c90:	b	39c24 <__assert_fail@plt+0x27034>
   39c94:	mov	r0, r9
   39c98:	mov	r1, r4
   39c9c:	mov	r2, r8
   39ca0:	bl	36ad4 <__assert_fail@plt+0x23ee4>
   39ca4:	cmp	r0, #0
   39ca8:	bne	39cc0 <__assert_fail@plt+0x270d0>
   39cac:	mov	r0, r4
   39cb0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   39cb4:	mov	r0, r4
   39cb8:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   39cbc:	b	39cc8 <__assert_fail@plt+0x270d8>
   39cc0:	mov	r0, r4
   39cc4:	bl	30ffc <__assert_fail@plt+0x1e40c>
   39cc8:	mov	r4, #0
   39ccc:	mov	r0, r4
   39cd0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   39cd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39cd8:	add	fp, sp, #28
   39cdc:	sub	sp, sp, #4
   39ce0:	mov	sl, r3
   39ce4:	mov	r7, r2
   39ce8:	mov	r5, r0
   39cec:	ldr	r6, [r0]
   39cf0:	add	r0, r6, r1, lsl #3
   39cf4:	ldrb	r8, [r0, #4]
   39cf8:	cmp	r8, #7
   39cfc:	beq	39ea0 <__assert_fail@plt+0x272b0>
   39d00:	mov	r4, r1
   39d04:	mov	r0, r7
   39d08:	mov	r1, sl
   39d0c:	bl	35090 <__assert_fail@plt+0x224a0>
   39d10:	mov	r9, r0
   39d14:	mov	r2, #0
   39d18:	cmp	r8, #5
   39d1c:	bne	39d60 <__assert_fail@plt+0x27170>
   39d20:	cmp	r9, #2
   39d24:	blt	39e8c <__assert_fail@plt+0x2729c>
   39d28:	ldr	r0, [r5, #128]	; 0x80
   39d2c:	tst	r0, #64	; 0x40
   39d30:	bne	39d44 <__assert_fail@plt+0x27154>
   39d34:	ldr	r1, [r7, #4]
   39d38:	ldrb	r1, [r1, sl]
   39d3c:	cmp	r1, #10
   39d40:	beq	39e8c <__assert_fail@plt+0x2729c>
   39d44:	tst	r0, #128	; 0x80
   39d48:	beq	39e88 <__assert_fail@plt+0x27298>
   39d4c:	ldr	r0, [r7, #4]
   39d50:	ldrb	r0, [r0, sl]
   39d54:	cmp	r0, #0
   39d58:	movne	r2, r9
   39d5c:	b	39e8c <__assert_fail@plt+0x2729c>
   39d60:	cmp	r8, #6
   39d64:	bne	39e8c <__assert_fail@plt+0x2729c>
   39d68:	cmp	r9, #2
   39d6c:	blt	39e8c <__assert_fail@plt+0x2729c>
   39d70:	ldr	r4, [r6, r4, lsl #3]
   39d74:	ldr	r0, [r4, #32]
   39d78:	cmp	r0, #0
   39d7c:	bne	39d98 <__assert_fail@plt+0x271a8>
   39d80:	ldr	r0, [r4, #36]	; 0x24
   39d84:	cmp	r0, #0
   39d88:	bne	39d98 <__assert_fail@plt+0x271a8>
   39d8c:	ldr	r0, [r4, #20]
   39d90:	cmp	r0, #0
   39d94:	beq	39e98 <__assert_fail@plt+0x272a8>
   39d98:	mov	r0, r7
   39d9c:	mov	r1, sl
   39da0:	bl	32dfc <__assert_fail@plt+0x2020c>
   39da4:	mov	r6, r0
   39da8:	ldr	r0, [r4, #20]
   39dac:	cmp	r0, #1
   39db0:	blt	39dd8 <__assert_fail@plt+0x271e8>
   39db4:	ldr	r0, [r4]
   39db8:	mov	r1, #0
   39dbc:	ldr	r2, [r0, r1, lsl #2]
   39dc0:	cmp	r6, r2
   39dc4:	beq	39e54 <__assert_fail@plt+0x27264>
   39dc8:	add	r1, r1, #1
   39dcc:	ldr	r2, [r4, #20]
   39dd0:	cmp	r1, r2
   39dd4:	blt	39dbc <__assert_fail@plt+0x271cc>
   39dd8:	ldr	r0, [r4, #36]	; 0x24
   39ddc:	cmp	r0, #1
   39de0:	blt	39e10 <__assert_fail@plt+0x27220>
   39de4:	mov	r5, #0
   39de8:	ldr	r0, [r4, #12]
   39dec:	ldr	r1, [r0, r5, lsl #2]
   39df0:	mov	r0, r6
   39df4:	bl	124e8 <iswctype@plt>
   39df8:	cmp	r0, #0
   39dfc:	bne	39e54 <__assert_fail@plt+0x27264>
   39e00:	add	r5, r5, #1
   39e04:	ldr	r0, [r4, #36]	; 0x24
   39e08:	cmp	r5, r0
   39e0c:	blt	39de8 <__assert_fail@plt+0x271f8>
   39e10:	ldr	r0, [r4, #32]
   39e14:	cmp	r0, #1
   39e18:	blt	39e5c <__assert_fail@plt+0x2726c>
   39e1c:	ldr	r0, [r4, #4]
   39e20:	mov	r1, #0
   39e24:	b	39e38 <__assert_fail@plt+0x27248>
   39e28:	add	r1, r1, #1
   39e2c:	ldr	r2, [r4, #32]
   39e30:	cmp	r1, r2
   39e34:	bge	39e5c <__assert_fail@plt+0x2726c>
   39e38:	ldr	r2, [r0, r1, lsl #2]
   39e3c:	cmp	r2, r6
   39e40:	bhi	39e28 <__assert_fail@plt+0x27238>
   39e44:	ldr	r2, [r4, #8]
   39e48:	ldr	r2, [r2, r1, lsl #2]
   39e4c:	cmp	r6, r2
   39e50:	bhi	39e28 <__assert_fail@plt+0x27238>
   39e54:	mov	r0, r9
   39e58:	b	39e60 <__assert_fail@plt+0x27270>
   39e5c:	mov	r0, #0
   39e60:	ldrb	r1, [r4, #16]
   39e64:	tst	r1, #1
   39e68:	mov	r2, #0
   39e6c:	bne	39e78 <__assert_fail@plt+0x27288>
   39e70:	mov	r2, r0
   39e74:	b	39e8c <__assert_fail@plt+0x2729c>
   39e78:	cmp	r0, #0
   39e7c:	bgt	39e8c <__assert_fail@plt+0x2729c>
   39e80:	cmp	r9, #1
   39e84:	movle	r9, #1
   39e88:	mov	r2, r9
   39e8c:	mov	r0, r2
   39e90:	sub	sp, fp, #28
   39e94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39e98:	mov	r6, #0
   39e9c:	b	39da8 <__assert_fail@plt+0x271b8>
   39ea0:	ldr	r0, [r7, #4]
   39ea4:	ldrb	r5, [r0, sl]
   39ea8:	mov	r2, #0
   39eac:	cmp	r5, #194	; 0xc2
   39eb0:	bcc	39e8c <__assert_fail@plt+0x2729c>
   39eb4:	ldr	r1, [r7, #48]	; 0x30
   39eb8:	add	r2, sl, #2
   39ebc:	cmp	r2, r1
   39ec0:	ble	39ecc <__assert_fail@plt+0x272dc>
   39ec4:	mov	r2, #0
   39ec8:	b	39e8c <__assert_fail@plt+0x2729c>
   39ecc:	add	r0, sl, r0
   39ed0:	ldrb	r3, [r0, #1]
   39ed4:	cmp	r5, #223	; 0xdf
   39ed8:	bhi	39efc <__assert_fail@plt+0x2730c>
   39edc:	mov	r0, #0
   39ee0:	cmp	r3, #192	; 0xc0
   39ee4:	movwcc	r0, #1
   39ee8:	lsl	r2, r0, #1
   39eec:	sxtb	r0, r3
   39ef0:	cmn	r0, #1
   39ef4:	movwgt	r2, #0
   39ef8:	b	39e8c <__assert_fail@plt+0x2729c>
   39efc:	cmp	r5, #239	; 0xef
   39f00:	bhi	39f1c <__assert_fail@plt+0x2732c>
   39f04:	mov	r2, #3
   39f08:	cmp	r5, #224	; 0xe0
   39f0c:	bne	39f78 <__assert_fail@plt+0x27388>
   39f10:	cmp	r3, #160	; 0xa0
   39f14:	bcc	39ec4 <__assert_fail@plt+0x272d4>
   39f18:	b	39f78 <__assert_fail@plt+0x27388>
   39f1c:	cmp	r5, #247	; 0xf7
   39f20:	bhi	39f3c <__assert_fail@plt+0x2734c>
   39f24:	mov	r2, #4
   39f28:	cmp	r5, #240	; 0xf0
   39f2c:	bne	39f78 <__assert_fail@plt+0x27388>
   39f30:	cmp	r3, #144	; 0x90
   39f34:	bcc	39ec4 <__assert_fail@plt+0x272d4>
   39f38:	b	39f78 <__assert_fail@plt+0x27388>
   39f3c:	cmp	r5, #251	; 0xfb
   39f40:	bhi	39f5c <__assert_fail@plt+0x2736c>
   39f44:	mov	r2, #5
   39f48:	cmp	r5, #248	; 0xf8
   39f4c:	bne	39f78 <__assert_fail@plt+0x27388>
   39f50:	cmp	r3, #136	; 0x88
   39f54:	bcc	39ec4 <__assert_fail@plt+0x272d4>
   39f58:	b	39f78 <__assert_fail@plt+0x27388>
   39f5c:	cmp	r5, #253	; 0xfd
   39f60:	bhi	39ec4 <__assert_fail@plt+0x272d4>
   39f64:	mov	r2, #6
   39f68:	cmp	r5, #252	; 0xfc
   39f6c:	bne	39f78 <__assert_fail@plt+0x27388>
   39f70:	cmp	r3, #132	; 0x84
   39f74:	bcc	39ec4 <__assert_fail@plt+0x272d4>
   39f78:	add	r3, r2, sl
   39f7c:	cmp	r3, r1
   39f80:	bgt	39ec4 <__assert_fail@plt+0x272d4>
   39f84:	mov	r1, #1
   39f88:	ldrb	r3, [r0, r1]
   39f8c:	sxtb	r7, r3
   39f90:	cmn	r7, #1
   39f94:	bgt	39ec4 <__assert_fail@plt+0x272d4>
   39f98:	cmp	r3, #191	; 0xbf
   39f9c:	bhi	39ec4 <__assert_fail@plt+0x272d4>
   39fa0:	add	r1, r1, #1
   39fa4:	cmp	r2, r1
   39fa8:	bne	39f88 <__assert_fail@plt+0x27398>
   39fac:	b	39e8c <__assert_fail@plt+0x2729c>
   39fb0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   39fb4:	add	fp, sp, #24
   39fb8:	mov	r6, r0
   39fbc:	ldr	r7, [r1, #4]
   39fc0:	mvn	r0, #0
   39fc4:	uxtab	r0, r0, r7
   39fc8:	mov	r8, #0
   39fcc:	cmp	r0, #6
   39fd0:	bhi	3a0dc <__assert_fail@plt+0x274ec>
   39fd4:	mov	r5, r2
   39fd8:	ldr	r2, [r6, #4]
   39fdc:	ldrb	r2, [r2, r5]
   39fe0:	sxtb	r3, r2
   39fe4:	add	r4, pc, #0
   39fe8:	ldr	pc, [r4, r0, lsl #2]
   39fec:	andeq	sl, r3, r8
   39ff0:	ldrdeq	sl, [r3], -ip
   39ff4:	andeq	sl, r3, ip, lsl r0
   39ff8:	ldrdeq	sl, [r3], -ip
   39ffc:	andeq	sl, r3, ip, lsr r0
   3a000:	ldrdeq	sl, [r3], -ip
   3a004:	andeq	sl, r3, r4, lsr r0
   3a008:	ldrb	r0, [r1]
   3a00c:	uxtb	r1, r3
   3a010:	cmp	r0, r1
   3a014:	beq	3a070 <__assert_fail@plt+0x27480>
   3a018:	b	3a0dc <__assert_fail@plt+0x274ec>
   3a01c:	ldr	r0, [r1]
   3a020:	mov	r1, r2
   3a024:	bl	37f80 <__assert_fail@plt+0x25390>
   3a028:	cmp	r0, #0
   3a02c:	bne	3a070 <__assert_fail@plt+0x27480>
   3a030:	b	3a0dc <__assert_fail@plt+0x274ec>
   3a034:	cmp	r3, #0
   3a038:	bmi	3a0dc <__assert_fail@plt+0x274ec>
   3a03c:	cmp	r2, #0
   3a040:	beq	3a060 <__assert_fail@plt+0x27470>
   3a044:	cmp	r2, #10
   3a048:	bne	3a070 <__assert_fail@plt+0x27480>
   3a04c:	ldr	r0, [r6, #84]	; 0x54
   3a050:	ldrb	r0, [r0, #128]	; 0x80
   3a054:	tst	r0, #64	; 0x40
   3a058:	bne	3a070 <__assert_fail@plt+0x27480>
   3a05c:	b	3a0dc <__assert_fail@plt+0x274ec>
   3a060:	ldr	r0, [r6, #84]	; 0x54
   3a064:	ldrb	r0, [r0, #128]	; 0x80
   3a068:	tst	r0, #128	; 0x80
   3a06c:	bne	3a0dc <__assert_fail@plt+0x274ec>
   3a070:	movw	r0, #65280	; 0xff00
   3a074:	movt	r0, #3
   3a078:	tst	r7, r0
   3a07c:	beq	3a0d8 <__assert_fail@plt+0x274e8>
   3a080:	ldr	r2, [r6, #88]	; 0x58
   3a084:	mov	r0, r6
   3a088:	mov	r1, r5
   3a08c:	bl	37e04 <__assert_fail@plt+0x25214>
   3a090:	and	r1, r0, #1
   3a094:	tst	r7, #1024	; 0x400
   3a098:	beq	3a0a4 <__assert_fail@plt+0x274b4>
   3a09c:	cmp	r1, #0
   3a0a0:	beq	3a0dc <__assert_fail@plt+0x274ec>
   3a0a4:	tst	r7, #2048	; 0x800
   3a0a8:	cmpne	r1, #0
   3a0ac:	bne	3a0dc <__assert_fail@plt+0x274ec>
   3a0b0:	tst	r7, #8192	; 0x2000
   3a0b4:	beq	3a0c0 <__assert_fail@plt+0x274d0>
   3a0b8:	ands	r1, r0, #2
   3a0bc:	beq	3a0dc <__assert_fail@plt+0x274ec>
   3a0c0:	uxth	r1, r7
   3a0c4:	mov	r2, #1
   3a0c8:	eor	r1, r2, r1, lsr #15
   3a0cc:	and	r0, r0, #8
   3a0d0:	orr	r0, r1, r0, lsr #3
   3a0d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3a0d8:	mov	r8, #1
   3a0dc:	mov	r0, r8
   3a0e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3a0e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a0e8:	add	fp, sp, #28
   3a0ec:	sub	sp, sp, #20
   3a0f0:	mov	r5, r0
   3a0f4:	ldr	r0, [r1, #8]
   3a0f8:	cmp	r0, #1
   3a0fc:	blt	3a2a8 <__assert_fail@plt+0x276b8>
   3a100:	mov	r4, r1
   3a104:	ldr	sl, [r5, #84]	; 0x54
   3a108:	mov	r8, #0
   3a10c:	movw	r9, #65280	; 0xff00
   3a110:	movt	r9, #3
   3a114:	b	3a128 <__assert_fail@plt+0x27538>
   3a118:	add	r8, r8, #1
   3a11c:	ldr	r0, [r4, #8]
   3a120:	cmp	r8, r0
   3a124:	bge	3a2a8 <__assert_fail@plt+0x276b8>
   3a128:	ldr	r0, [r4, #12]
   3a12c:	ldr	r7, [r0, r8, lsl #2]
   3a130:	ldr	r0, [sl]
   3a134:	add	r0, r0, r7, lsl #3
   3a138:	ldr	r6, [r0, #4]
   3a13c:	tst	r6, #1048576	; 0x100000
   3a140:	beq	3a118 <__assert_fail@plt+0x27528>
   3a144:	tst	r6, r9
   3a148:	beq	3a19c <__assert_fail@plt+0x275ac>
   3a14c:	ldr	r1, [r5, #40]	; 0x28
   3a150:	ldr	r2, [r5, #88]	; 0x58
   3a154:	mov	r0, r5
   3a158:	bl	37e04 <__assert_fail@plt+0x25214>
   3a15c:	and	r1, r0, #1
   3a160:	tst	r6, #1024	; 0x400
   3a164:	beq	3a170 <__assert_fail@plt+0x27580>
   3a168:	cmp	r1, #0
   3a16c:	beq	3a118 <__assert_fail@plt+0x27528>
   3a170:	tst	r6, #2048	; 0x800
   3a174:	cmpne	r1, #0
   3a178:	bne	3a118 <__assert_fail@plt+0x27528>
   3a17c:	tst	r6, #8192	; 0x2000
   3a180:	beq	3a18c <__assert_fail@plt+0x2759c>
   3a184:	ands	r1, r0, #2
   3a188:	beq	3a118 <__assert_fail@plt+0x27528>
   3a18c:	tst	r6, #32768	; 0x8000
   3a190:	beq	3a19c <__assert_fail@plt+0x275ac>
   3a194:	ands	r0, r0, #8
   3a198:	beq	3a118 <__assert_fail@plt+0x27528>
   3a19c:	ldr	r3, [r5, #40]	; 0x28
   3a1a0:	mov	r0, sl
   3a1a4:	mov	r1, r7
   3a1a8:	mov	r2, r5
   3a1ac:	bl	39cd4 <__assert_fail@plt+0x270e4>
   3a1b0:	cmp	r0, #0
   3a1b4:	beq	3a118 <__assert_fail@plt+0x27528>
   3a1b8:	ldr	r1, [r5, #40]	; 0x28
   3a1bc:	ldr	r2, [r5, #120]	; 0x78
   3a1c0:	cmp	r2, r0
   3a1c4:	movlt	r2, r0
   3a1c8:	str	r2, [r5, #120]	; 0x78
   3a1cc:	add	r6, r1, r0
   3a1d0:	mov	r0, r5
   3a1d4:	mov	r1, r6
   3a1d8:	bl	38d80 <__assert_fail@plt+0x26190>
   3a1dc:	str	r0, [sp, #16]
   3a1e0:	cmp	r0, #0
   3a1e4:	bne	3a2a0 <__assert_fail@plt+0x276b0>
   3a1e8:	ldr	r0, [r5, #100]	; 0x64
   3a1ec:	ldr	r9, [r0, r6, lsl #2]
   3a1f0:	ldr	r0, [sl, #12]
   3a1f4:	ldr	r1, [sl, #24]
   3a1f8:	ldr	r0, [r0, r7, lsl #2]
   3a1fc:	add	r0, r0, r0, lsl #1
   3a200:	add	r2, r1, r0, lsl #2
   3a204:	cmp	r9, #0
   3a208:	beq	3a22c <__assert_fail@plt+0x2763c>
   3a20c:	ldr	r1, [r9, #40]	; 0x28
   3a210:	mov	r7, sp
   3a214:	mov	r0, r7
   3a218:	bl	38ac0 <__assert_fail@plt+0x25ed0>
   3a21c:	str	r0, [sp, #16]
   3a220:	cmp	r0, #0
   3a224:	beq	3a240 <__assert_fail@plt+0x27650>
   3a228:	b	3a2a0 <__assert_fail@plt+0x276b0>
   3a22c:	vldr	d16, [r2]
   3a230:	ldr	r0, [r2, #8]
   3a234:	str	r0, [sp, #8]
   3a238:	vstr	d16, [sp]
   3a23c:	mov	r7, sp
   3a240:	ldr	r2, [r5, #88]	; 0x58
   3a244:	sub	r1, r6, #1
   3a248:	mov	r0, r5
   3a24c:	bl	37e04 <__assert_fail@plt+0x25214>
   3a250:	mov	r3, r0
   3a254:	add	r0, sp, #16
   3a258:	mov	r1, sl
   3a25c:	mov	r2, r7
   3a260:	bl	366e8 <__assert_fail@plt+0x23af8>
   3a264:	ldr	r1, [r5, #100]	; 0x64
   3a268:	str	r0, [r1, r6, lsl #2]
   3a26c:	cmp	r9, #0
   3a270:	beq	3a27c <__assert_fail@plt+0x2768c>
   3a274:	ldr	r0, [sp, #8]
   3a278:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   3a27c:	ldr	r0, [r5, #100]	; 0x64
   3a280:	ldr	r0, [r0, r6, lsl #2]
   3a284:	cmp	r0, #0
   3a288:	movw	r9, #65280	; 0xff00
   3a28c:	movt	r9, #3
   3a290:	bne	3a118 <__assert_fail@plt+0x27528>
   3a294:	ldr	r0, [sp, #16]
   3a298:	cmp	r0, #0
   3a29c:	beq	3a118 <__assert_fail@plt+0x27528>
   3a2a0:	sub	sp, fp, #28
   3a2a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a2a8:	mov	r0, #0
   3a2ac:	sub	sp, fp, #28
   3a2b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a2b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a2b8:	add	fp, sp, #28
   3a2bc:	sub	sp, sp, #68	; 0x44
   3a2c0:	sub	sp, sp, #14336	; 0x3800
   3a2c4:	mov	r4, r1
   3a2c8:	mov	r7, r0
   3a2cc:	mov	r6, #0
   3a2d0:	str	r6, [r1, #44]	; 0x2c
   3a2d4:	str	r6, [r1, #48]	; 0x30
   3a2d8:	sub	lr, fp, #4096	; 0x1000
   3a2dc:	sub	r2, lr, #2128	; 0x850
   3a2e0:	add	r3, sp, #16
   3a2e4:	bl	3a784 <__assert_fail@plt+0x27b94>
   3a2e8:	cmp	r0, #0
   3a2ec:	ble	3a68c <__assert_fail@plt+0x27a9c>
   3a2f0:	mov	r5, r0
   3a2f4:	str	r4, [sp, #4]
   3a2f8:	add	r1, r0, #1
   3a2fc:	sub	r0, fp, #3120	; 0xc30
   3a300:	bl	35f6c <__assert_fail@plt+0x2337c>
   3a304:	str	r0, [fp, #-36]	; 0xffffffdc
   3a308:	cmp	r0, #0
   3a30c:	bne	3a658 <__assert_fail@plt+0x27a68>
   3a310:	sub	r0, fp, #3152	; 0xc50
   3a314:	bl	3ac70 <__assert_fail@plt+0x28080>
   3a318:	sub	sl, fp, #3120	; 0xc30
   3a31c:	sub	lr, fp, #3072	; 0xc00
   3a320:	sub	r6, lr, #36	; 0x24
   3a324:	mov	r9, #0
   3a328:	mov	r0, #0
   3a32c:	str	r0, [sp, #8]
   3a330:	str	r5, [sp, #12]
   3a334:	b	3a37c <__assert_fail@plt+0x2778c>
   3a338:	ldrsb	r0, [r8, #52]	; 0x34
   3a33c:	cmn	r0, #1
   3a340:	ble	3a448 <__assert_fail@plt+0x27858>
   3a344:	sub	lr, fp, #2048	; 0x800
   3a348:	sub	r0, lr, #36	; 0x24
   3a34c:	str	r8, [r0, r9, lsl #2]
   3a350:	sub	lr, fp, #1024	; 0x400
   3a354:	sub	r0, lr, #36	; 0x24
   3a358:	ldr	r0, [r0, r9, lsl #2]
   3a35c:	str	r0, [r6, r9, lsl #2]
   3a360:	add	r0, sp, #16
   3a364:	add	r1, r0, r9, lsl #5
   3a368:	sub	r0, fp, #3152	; 0xc50
   3a36c:	bl	3ac80 <__assert_fail@plt+0x28090>
   3a370:	add	r9, r9, #1
   3a374:	cmp	r9, r5
   3a378:	beq	3a4d0 <__assert_fail@plt+0x278e0>
   3a37c:	mov	r0, #0
   3a380:	str	r0, [fp, #-3116]	; 0xfffff3d4
   3a384:	add	r0, r9, r9, lsl #1
   3a388:	sub	lr, fp, #4096	; 0x1000
   3a38c:	sub	r1, lr, #2128	; 0x850
   3a390:	add	r0, r1, r0, lsl #2
   3a394:	mov	r4, r0
   3a398:	ldr	r1, [r4, #4]!
   3a39c:	cmp	r1, #1
   3a3a0:	blt	3a40c <__assert_fail@plt+0x2781c>
   3a3a4:	ldr	r5, [r0, #8]
   3a3a8:	mov	r6, #0
   3a3ac:	ldr	r1, [fp, #-36]	; 0xffffffdc
   3a3b0:	b	3a3c4 <__assert_fail@plt+0x277d4>
   3a3b4:	ldr	r0, [r4]
   3a3b8:	add	r6, r6, #1
   3a3bc:	cmp	r6, r0
   3a3c0:	bge	3a3fc <__assert_fail@plt+0x2780c>
   3a3c4:	ldr	r0, [r5, r6, lsl #2]
   3a3c8:	ldr	r2, [r7, #12]
   3a3cc:	ldr	r0, [r2, r0, lsl #2]
   3a3d0:	cmn	r0, #1
   3a3d4:	beq	3a3b4 <__assert_fail@plt+0x277c4>
   3a3d8:	ldr	r1, [r7, #24]
   3a3dc:	add	r0, r0, r0, lsl #1
   3a3e0:	add	r1, r1, r0, lsl #2
   3a3e4:	mov	r0, sl
   3a3e8:	bl	361f8 <__assert_fail@plt+0x23608>
   3a3ec:	mov	r1, #0
   3a3f0:	cmp	r0, #0
   3a3f4:	beq	3a3b4 <__assert_fail@plt+0x277c4>
   3a3f8:	b	3a650 <__assert_fail@plt+0x27a60>
   3a3fc:	str	r1, [fp, #-36]	; 0xffffffdc
   3a400:	ldr	r5, [sp, #12]
   3a404:	sub	lr, fp, #3072	; 0xc00
   3a408:	sub	r6, lr, #36	; 0x24
   3a40c:	sub	r0, fp, #36	; 0x24
   3a410:	mov	r1, r7
   3a414:	mov	r2, sl
   3a418:	mov	r3, #0
   3a41c:	bl	366e8 <__assert_fail@plt+0x23af8>
   3a420:	mov	r8, r0
   3a424:	sub	lr, fp, #1024	; 0x400
   3a428:	sub	r0, lr, #36	; 0x24
   3a42c:	str	r8, [r0, r9, lsl #2]
   3a430:	cmp	r8, #0
   3a434:	bne	3a338 <__assert_fail@plt+0x27748>
   3a438:	ldr	r0, [fp, #-36]	; 0xffffffdc
   3a43c:	cmp	r0, #0
   3a440:	beq	3a338 <__assert_fail@plt+0x27748>
   3a444:	b	3a658 <__assert_fail@plt+0x27a68>
   3a448:	sub	r0, fp, #36	; 0x24
   3a44c:	mov	r1, r7
   3a450:	mov	r2, sl
   3a454:	mov	r3, #1
   3a458:	bl	366e8 <__assert_fail@plt+0x23af8>
   3a45c:	sub	lr, fp, #2048	; 0x800
   3a460:	sub	r1, lr, #36	; 0x24
   3a464:	str	r0, [r1, r9, lsl #2]
   3a468:	cmp	r0, #0
   3a46c:	bne	3a47c <__assert_fail@plt+0x2788c>
   3a470:	ldr	r1, [fp, #-36]	; 0xffffffdc
   3a474:	cmp	r1, #0
   3a478:	bne	3a658 <__assert_fail@plt+0x27a68>
   3a47c:	cmp	r8, r0
   3a480:	beq	3a4a0 <__assert_fail@plt+0x278b0>
   3a484:	ldr	r0, [r7, #92]	; 0x5c
   3a488:	cmp	r0, #1
   3a48c:	mov	r0, #0
   3a490:	movwgt	r0, #1
   3a494:	ldr	r1, [sp, #8]
   3a498:	orr	r1, r1, r0
   3a49c:	str	r1, [sp, #8]
   3a4a0:	sub	r0, fp, #36	; 0x24
   3a4a4:	mov	r1, r7
   3a4a8:	mov	r2, sl
   3a4ac:	mov	r3, #2
   3a4b0:	bl	366e8 <__assert_fail@plt+0x23af8>
   3a4b4:	str	r0, [r6, r9, lsl #2]
   3a4b8:	cmp	r0, #0
   3a4bc:	bne	3a360 <__assert_fail@plt+0x27770>
   3a4c0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   3a4c4:	cmp	r0, #0
   3a4c8:	beq	3a360 <__assert_fail@plt+0x27770>
   3a4cc:	b	3a658 <__assert_fail@plt+0x27a68>
   3a4d0:	ldr	r0, [sp, #8]
   3a4d4:	tst	r0, #1
   3a4d8:	bne	3a6b0 <__assert_fail@plt+0x27ac0>
   3a4dc:	mov	r0, #4
   3a4e0:	mov	r1, #256	; 0x100
   3a4e4:	bl	2c4f4 <__assert_fail@plt+0x19904>
   3a4e8:	mov	r8, r0
   3a4ec:	ldr	r0, [sp, #4]
   3a4f0:	str	r8, [r0, #44]	; 0x2c
   3a4f4:	cmp	r8, #0
   3a4f8:	beq	3a658 <__assert_fail@plt+0x27a68>
   3a4fc:	mov	r0, #0
   3a500:	mov	r1, #0
   3a504:	add	r5, sp, #16
   3a508:	mov	r9, r5
   3a50c:	b	3a520 <__assert_fail@plt+0x27930>
   3a510:	add	r9, r9, #4
   3a514:	add	r1, r1, #1
   3a518:	cmp	r1, #8
   3a51c:	beq	3a5a4 <__assert_fail@plt+0x279b4>
   3a520:	sub	r2, fp, #3152	; 0xc50
   3a524:	ldr	r2, [r2, r1, lsl #2]
   3a528:	cmp	r2, #0
   3a52c:	beq	3a510 <__assert_fail@plt+0x27920>
   3a530:	add	r3, r7, r1, lsl #2
   3a534:	add	ip, r3, #96	; 0x60
   3a538:	lsl	r4, r1, #5
   3a53c:	mov	r6, #1
   3a540:	tst	r2, #1
   3a544:	bne	3a564 <__assert_fail@plt+0x27974>
   3a548:	add	r4, r4, #1
   3a54c:	lsr	r3, r2, #1
   3a550:	lsl	r6, r6, #1
   3a554:	cmp	r0, r2, lsr #1
   3a558:	mov	r2, r3
   3a55c:	bne	3a540 <__assert_fail@plt+0x27950>
   3a560:	b	3a510 <__assert_fail@plt+0x27920>
   3a564:	mov	lr, #0
   3a568:	ldr	r3, [r9, lr, lsl #3]
   3a56c:	add	lr, lr, #4
   3a570:	tst	r3, r6
   3a574:	beq	3a568 <__assert_fail@plt+0x27978>
   3a578:	ldr	r3, [ip]
   3a57c:	tst	r3, r6
   3a580:	sub	r3, fp, #2048	; 0x800
   3a584:	sub	r3, r3, #36	; 0x24
   3a588:	sub	r5, fp, #1024	; 0x400
   3a58c:	sub	r5, r5, #36	; 0x24
   3a590:	moveq	r3, r5
   3a594:	add	r3, r3, lr
   3a598:	ldr	r3, [r3, #-4]
   3a59c:	str	r3, [r8, r4, lsl #2]
   3a5a0:	b	3a548 <__assert_fail@plt+0x27958>
   3a5a4:	sub	lr, fp, #3072	; 0xc00
   3a5a8:	sub	r6, lr, #36	; 0x24
   3a5ac:	sub	r0, fp, #3152	; 0xc50
   3a5b0:	mov	r1, #10
   3a5b4:	bl	37f80 <__assert_fail@plt+0x25390>
   3a5b8:	cmp	r0, #0
   3a5bc:	beq	3a610 <__assert_fail@plt+0x27a20>
   3a5c0:	ldr	r0, [sp, #12]
   3a5c4:	cmp	r0, #1
   3a5c8:	blt	3a610 <__assert_fail@plt+0x27a20>
   3a5cc:	add	r5, sp, #16
   3a5d0:	ldr	r4, [sp, #12]
   3a5d4:	mov	r0, r5
   3a5d8:	mov	r1, #10
   3a5dc:	bl	37f80 <__assert_fail@plt+0x25390>
   3a5e0:	cmp	r0, #0
   3a5e4:	bne	3a5fc <__assert_fail@plt+0x27a0c>
   3a5e8:	add	r5, r5, #32
   3a5ec:	subs	r4, r4, #1
   3a5f0:	add	r6, r6, #4
   3a5f4:	bne	3a5d4 <__assert_fail@plt+0x279e4>
   3a5f8:	b	3a610 <__assert_fail@plt+0x27a20>
   3a5fc:	ldr	r0, [r6]
   3a600:	str	r0, [r8, #40]	; 0x28
   3a604:	ldr	r1, [sp, #8]
   3a608:	tst	r1, #1
   3a60c:	strne	r0, [r8, #1064]	; 0x428
   3a610:	ldr	r0, [fp, #-3112]	; 0xfffff3d8
   3a614:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   3a618:	mov	r6, #1
   3a61c:	ldr	r5, [sp, #12]
   3a620:	cmp	r5, #1
   3a624:	blt	3a644 <__assert_fail@plt+0x27a54>
   3a628:	sub	lr, fp, #4096	; 0x1000
   3a62c:	sub	r0, lr, #2128	; 0x850
   3a630:	add	r4, r0, #8
   3a634:	ldr	r0, [r4], #12
   3a638:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   3a63c:	subs	r5, r5, #1
   3a640:	bne	3a634 <__assert_fail@plt+0x27a44>
   3a644:	mov	r0, r6
   3a648:	sub	sp, fp, #28
   3a64c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a650:	str	r0, [fp, #-36]	; 0xffffffdc
   3a654:	ldr	r5, [sp, #12]
   3a658:	ldr	r0, [fp, #-3112]	; 0xfffff3d8
   3a65c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   3a660:	mov	r6, #0
   3a664:	cmp	r5, #1
   3a668:	blt	3a644 <__assert_fail@plt+0x27a54>
   3a66c:	sub	lr, fp, #4096	; 0x1000
   3a670:	sub	r0, lr, #2128	; 0x850
   3a674:	add	r4, r0, #8
   3a678:	ldr	r0, [r4], #12
   3a67c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   3a680:	subs	r5, r5, #1
   3a684:	bne	3a678 <__assert_fail@plt+0x27a88>
   3a688:	b	3a644 <__assert_fail@plt+0x27a54>
   3a68c:	bne	3a644 <__assert_fail@plt+0x27a54>
   3a690:	mov	r0, #4
   3a694:	mov	r1, #256	; 0x100
   3a698:	bl	2c4f4 <__assert_fail@plt+0x19904>
   3a69c:	mov	r6, r0
   3a6a0:	str	r0, [r4, #44]	; 0x2c
   3a6a4:	cmp	r0, #0
   3a6a8:	movwne	r6, #1
   3a6ac:	b	3a644 <__assert_fail@plt+0x27a54>
   3a6b0:	mov	r0, #4
   3a6b4:	mov	r1, #512	; 0x200
   3a6b8:	bl	2c4f4 <__assert_fail@plt+0x19904>
   3a6bc:	mov	r8, r0
   3a6c0:	ldr	r0, [sp, #4]
   3a6c4:	str	r8, [r0, #48]	; 0x30
   3a6c8:	cmp	r8, #0
   3a6cc:	beq	3a658 <__assert_fail@plt+0x27a68>
   3a6d0:	sub	lr, fp, #1024	; 0x400
   3a6d4:	sub	r0, lr, #36	; 0x24
   3a6d8:	sub	ip, r0, #4
   3a6dc:	sub	lr, fp, #2048	; 0x800
   3a6e0:	sub	r0, lr, #36	; 0x24
   3a6e4:	sub	lr, r0, #4
   3a6e8:	mov	r2, #0
   3a6ec:	add	r3, sp, #16
   3a6f0:	mov	r7, #0
   3a6f4:	b	3a708 <__assert_fail@plt+0x27b18>
   3a6f8:	add	r3, r3, #4
   3a6fc:	add	r7, r7, #1
   3a700:	cmp	r7, #8
   3a704:	beq	3a5ac <__assert_fail@plt+0x279bc>
   3a708:	sub	r0, fp, #3152	; 0xc50
   3a70c:	ldr	r5, [r0, r7, lsl #2]
   3a710:	cmp	r5, #0
   3a714:	beq	3a6f8 <__assert_fail@plt+0x27b08>
   3a718:	lsl	r0, r7, #5
   3a71c:	mov	r1, #1
   3a720:	tst	r5, #1
   3a724:	bne	3a744 <__assert_fail@plt+0x27b54>
   3a728:	add	r0, r0, #1
   3a72c:	lsr	r4, r5, #1
   3a730:	lsl	r1, r1, #1
   3a734:	cmp	r2, r5, lsr #1
   3a738:	mov	r5, r4
   3a73c:	bne	3a720 <__assert_fail@plt+0x27b30>
   3a740:	b	3a6f8 <__assert_fail@plt+0x27b08>
   3a744:	mov	r4, r3
   3a748:	mov	sl, ip
   3a74c:	mov	r9, lr
   3a750:	add	sl, sl, #4
   3a754:	add	r9, r9, #4
   3a758:	ldr	r6, [r4], #32
   3a75c:	tst	r6, r1
   3a760:	beq	3a750 <__assert_fail@plt+0x27b60>
   3a764:	ldr	r4, [sl]
   3a768:	mov	r6, r8
   3a76c:	str	r4, [r6, r0, lsl #2]!
   3a770:	ldr	r4, [r9]
   3a774:	str	r4, [r6, #1024]	; 0x400
   3a778:	sub	r4, fp, #3072	; 0xc00
   3a77c:	sub	r6, r4, #36	; 0x24
   3a780:	b	3a728 <__assert_fail@plt+0x27b38>
   3a784:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a788:	add	fp, sp, #28
   3a78c:	sub	sp, sp, #140	; 0x8c
   3a790:	str	r3, [sp, #32]
   3a794:	str	r2, [sp, #28]
   3a798:	mov	r9, r1
   3a79c:	mov	sl, r0
   3a7a0:	sub	r7, fp, #64	; 0x40
   3a7a4:	mov	r0, r7
   3a7a8:	bl	3ac70 <__assert_fail@plt+0x28080>
   3a7ac:	ldr	r0, [r9, #8]
   3a7b0:	cmp	r0, #1
   3a7b4:	blt	3ac38 <__assert_fail@plt+0x28048>
   3a7b8:	add	r6, sl, #96	; 0x60
   3a7bc:	mov	r0, #0
   3a7c0:	add	r5, sp, #72	; 0x48
   3a7c4:	mov	r4, #0
   3a7c8:	str	sl, [sp]
   3a7cc:	str	r6, [sp, #8]
   3a7d0:	str	r9, [sp, #16]
   3a7d4:	b	3a7fc <__assert_fail@plt+0x27c0c>
   3a7d8:	mov	r0, r7
   3a7dc:	bl	3ac70 <__assert_fail@plt+0x28080>
   3a7e0:	ldr	r9, [sp, #16]
   3a7e4:	ldr	r0, [r9, #8]
   3a7e8:	ldr	r1, [sp, #36]	; 0x24
   3a7ec:	add	r1, r1, #1
   3a7f0:	cmp	r1, r0
   3a7f4:	mov	r0, r1
   3a7f8:	bge	3ac3c <__assert_fail@plt+0x2804c>
   3a7fc:	str	r0, [sp, #36]	; 0x24
   3a800:	ldr	r0, [r9, #12]
   3a804:	ldr	r1, [sp, #36]	; 0x24
   3a808:	ldr	r8, [r0, r1, lsl #2]
   3a80c:	ldr	r1, [sl]
   3a810:	add	r0, r1, r8, lsl #3
   3a814:	ldr	r9, [r0, #4]!
   3a818:	str	r0, [sp, #12]
   3a81c:	uxtb	r0, r9
   3a820:	cmp	r0, #1
   3a824:	str	r0, [sp, #24]
   3a828:	bne	3a840 <__assert_fail@plt+0x27c50>
   3a82c:	str	r1, [sp, #20]
   3a830:	ldrb	r1, [r1, r8, lsl #3]
   3a834:	mov	r0, r7
   3a838:	bl	3442c <__assert_fail@plt+0x2183c>
   3a83c:	b	3a8d8 <__assert_fail@plt+0x27ce8>
   3a840:	cmp	r0, #7
   3a844:	beq	3a86c <__assert_fail@plt+0x27c7c>
   3a848:	cmp	r0, #5
   3a84c:	beq	3a888 <__assert_fail@plt+0x27c98>
   3a850:	cmp	r0, #3
   3a854:	bne	3a7e0 <__assert_fail@plt+0x27bf0>
   3a858:	str	r1, [sp, #20]
   3a85c:	ldr	r1, [r1, r8, lsl #3]
   3a860:	mov	r0, r7
   3a864:	bl	3ac80 <__assert_fail@plt+0x28090>
   3a868:	b	3a8d8 <__assert_fail@plt+0x27ce8>
   3a86c:	str	r1, [sp, #20]
   3a870:	mvn	r0, #0
   3a874:	str	r0, [fp, #-52]	; 0xffffffcc
   3a878:	str	r0, [fp, #-56]	; 0xffffffc8
   3a87c:	str	r0, [fp, #-60]	; 0xffffffc4
   3a880:	str	r0, [fp, #-64]	; 0xffffffc0
   3a884:	b	3a8b0 <__assert_fail@plt+0x27cc0>
   3a888:	ldr	r0, [sl, #92]	; 0x5c
   3a88c:	cmp	r0, #2
   3a890:	str	r1, [sp, #20]
   3a894:	blt	3a8a8 <__assert_fail@plt+0x27cb8>
   3a898:	ldr	r1, [sl, #60]	; 0x3c
   3a89c:	mov	r0, r7
   3a8a0:	bl	3ac80 <__assert_fail@plt+0x28090>
   3a8a4:	b	3a8b0 <__assert_fail@plt+0x27cc0>
   3a8a8:	mov	r0, r7
   3a8ac:	bl	3aca4 <__assert_fail@plt+0x280b4>
   3a8b0:	ldrb	r0, [sl, #128]	; 0x80
   3a8b4:	tst	r0, #64	; 0x40
   3a8b8:	moveq	r0, r7
   3a8bc:	moveq	r1, #10
   3a8c0:	bleq	3accc <__assert_fail@plt+0x280dc>
   3a8c4:	ldrb	r0, [sl, #128]	; 0x80
   3a8c8:	tst	r0, #128	; 0x80
   3a8cc:	movne	r0, r7
   3a8d0:	movne	r1, #0
   3a8d4:	blne	3accc <__assert_fail@plt+0x280dc>
   3a8d8:	movw	r0, #65280	; 0xff00
   3a8dc:	movt	r0, #3
   3a8e0:	ands	r0, r9, r0
   3a8e4:	beq	3aa64 <__assert_fail@plt+0x27e74>
   3a8e8:	tst	r9, #8192	; 0x2000
   3a8ec:	beq	3a920 <__assert_fail@plt+0x27d30>
   3a8f0:	mov	r0, r7
   3a8f4:	mov	r1, #10
   3a8f8:	bl	37f80 <__assert_fail@plt+0x25390>
   3a8fc:	str	r0, [sp, #4]
   3a900:	mov	r0, r7
   3a904:	bl	3ac70 <__assert_fail@plt+0x28080>
   3a908:	ldr	r0, [sp, #4]
   3a90c:	cmp	r0, #0
   3a910:	beq	3a7e0 <__assert_fail@plt+0x27bf0>
   3a914:	mov	r0, r7
   3a918:	mov	r1, #10
   3a91c:	bl	3442c <__assert_fail@plt+0x2183c>
   3a920:	tst	r9, #32768	; 0x8000
   3a924:	bne	3a7d8 <__assert_fail@plt+0x27be8>
   3a928:	tst	r9, #1024	; 0x400
   3a92c:	beq	3a9c8 <__assert_fail@plt+0x27dd8>
   3a930:	ldr	r0, [sp, #24]
   3a934:	cmp	r0, #1
   3a938:	bne	3a94c <__assert_fail@plt+0x27d5c>
   3a93c:	ldr	r0, [sp, #12]
   3a940:	ldrb	r0, [r0, #2]
   3a944:	tst	r0, #64	; 0x40
   3a948:	beq	3a7d8 <__assert_fail@plt+0x27be8>
   3a94c:	ldr	r0, [sl, #92]	; 0x5c
   3a950:	cmp	r0, #1
   3a954:	ble	3a998 <__assert_fail@plt+0x27da8>
   3a958:	ldr	r1, [sl, #60]	; 0x3c
   3a95c:	mov	r0, #0
   3a960:	mov	r2, #0
   3a964:	ldr	r3, [r6, r2, lsl #2]
   3a968:	ldr	r6, [r1, r2, lsl #2]
   3a96c:	mvn	r6, r6
   3a970:	orr	r3, r3, r6
   3a974:	ldr	r6, [r7, r2, lsl #2]
   3a978:	and	r3, r6, r3
   3a97c:	ldr	r6, [sp, #8]
   3a980:	str	r3, [r7, r2, lsl #2]
   3a984:	orr	r0, r3, r0
   3a988:	add	r2, r2, #1
   3a98c:	cmp	r2, #8
   3a990:	bne	3a964 <__assert_fail@plt+0x27d74>
   3a994:	b	3a9c0 <__assert_fail@plt+0x27dd0>
   3a998:	mov	r0, #0
   3a99c:	mov	r1, #0
   3a9a0:	ldr	r2, [r6, r1, lsl #2]
   3a9a4:	ldr	r3, [r7, r1, lsl #2]
   3a9a8:	and	r2, r3, r2
   3a9ac:	str	r2, [r7, r1, lsl #2]
   3a9b0:	orr	r0, r2, r0
   3a9b4:	add	r1, r1, #1
   3a9b8:	cmp	r1, #8
   3a9bc:	bne	3a9a0 <__assert_fail@plt+0x27db0>
   3a9c0:	cmp	r0, #0
   3a9c4:	beq	3a7e0 <__assert_fail@plt+0x27bf0>
   3a9c8:	tst	r9, #2048	; 0x800
   3a9cc:	beq	3aa64 <__assert_fail@plt+0x27e74>
   3a9d0:	ldr	r0, [sp, #24]
   3a9d4:	cmp	r0, #1
   3a9d8:	bne	3a9ec <__assert_fail@plt+0x27dfc>
   3a9dc:	ldr	r0, [sp, #12]
   3a9e0:	ldrb	r0, [r0, #2]
   3a9e4:	tst	r0, #64	; 0x40
   3a9e8:	bne	3a7d8 <__assert_fail@plt+0x27be8>
   3a9ec:	ldr	r0, [sl, #92]	; 0x5c
   3a9f0:	cmp	r0, #1
   3a9f4:	ble	3aa34 <__assert_fail@plt+0x27e44>
   3a9f8:	ldr	r1, [sl, #60]	; 0x3c
   3a9fc:	mov	r0, #0
   3aa00:	mov	r2, #0
   3aa04:	ldr	r3, [r6, r2, lsl #2]
   3aa08:	ldr	r6, [r1, r2, lsl #2]
   3aa0c:	and	r3, r6, r3
   3aa10:	ldr	r6, [r7, r2, lsl #2]
   3aa14:	bic	r3, r6, r3
   3aa18:	ldr	r6, [sp, #8]
   3aa1c:	str	r3, [r7, r2, lsl #2]
   3aa20:	orr	r0, r3, r0
   3aa24:	add	r2, r2, #1
   3aa28:	cmp	r2, #8
   3aa2c:	bne	3aa04 <__assert_fail@plt+0x27e14>
   3aa30:	b	3aa5c <__assert_fail@plt+0x27e6c>
   3aa34:	mov	r0, #0
   3aa38:	mov	r1, #0
   3aa3c:	ldr	r2, [r6, r1, lsl #2]
   3aa40:	ldr	r3, [r7, r1, lsl #2]
   3aa44:	bic	r2, r3, r2
   3aa48:	str	r2, [r7, r1, lsl #2]
   3aa4c:	orr	r0, r2, r0
   3aa50:	add	r1, r1, #1
   3aa54:	cmp	r1, #8
   3aa58:	bne	3aa3c <__assert_fail@plt+0x27e4c>
   3aa5c:	cmp	r0, #0
   3aa60:	beq	3a7e0 <__assert_fail@plt+0x27bf0>
   3aa64:	cmp	r4, #1
   3aa68:	blt	3abcc <__assert_fail@plt+0x27fdc>
   3aa6c:	str	r8, [sp, #12]
   3aa70:	mov	r8, #0
   3aa74:	ldr	sl, [sp, #32]
   3aa78:	ldr	r9, [sp, #16]
   3aa7c:	ldr	r6, [sp, #24]
   3aa80:	cmp	r6, #1
   3aa84:	bne	3aac8 <__assert_fail@plt+0x27ed8>
   3aa88:	b	3aaa8 <__assert_fail@plt+0x27eb8>
   3aa8c:	mov	r4, ip
   3aa90:	add	sl, sl, #32
   3aa94:	add	r8, r8, #1
   3aa98:	cmp	r8, r4
   3aa9c:	bge	3abdc <__assert_fail@plt+0x27fec>
   3aaa0:	cmp	r6, #1
   3aaa4:	bne	3aac8 <__assert_fail@plt+0x27ed8>
   3aaa8:	ldr	r0, [sp, #12]
   3aaac:	ldr	r1, [sp, #20]
   3aab0:	ldrb	r1, [r1, r0, lsl #3]
   3aab4:	ldr	r0, [sp, #32]
   3aab8:	add	r0, r0, r8, lsl #5
   3aabc:	bl	37f80 <__assert_fail@plt+0x25390>
   3aac0:	cmp	r0, #0
   3aac4:	beq	3aa90 <__assert_fail@plt+0x27ea0>
   3aac8:	mov	ip, r4
   3aacc:	mov	r0, #0
   3aad0:	mov	r1, #0
   3aad4:	ldr	r2, [r7, r1, lsl #2]
   3aad8:	ldr	r3, [sl, r1, lsl #2]
   3aadc:	and	r2, r3, r2
   3aae0:	str	r2, [r5, r1, lsl #2]
   3aae4:	orr	r0, r2, r0
   3aae8:	add	r1, r1, #1
   3aaec:	cmp	r1, #8
   3aaf0:	bne	3aad4 <__assert_fail@plt+0x27ee4>
   3aaf4:	cmp	r0, #0
   3aaf8:	beq	3aa8c <__assert_fail@plt+0x27e9c>
   3aafc:	mov	r9, #0
   3ab00:	mov	r0, #0
   3ab04:	mov	r1, #0
   3ab08:	ldr	r2, [r7, r1, lsl #2]
   3ab0c:	ldr	r3, [sl, r1, lsl #2]
   3ab10:	bic	r4, r3, r2
   3ab14:	add	r6, sp, #40	; 0x28
   3ab18:	str	r4, [r6, r1, lsl #2]
   3ab1c:	bic	r2, r2, r3
   3ab20:	str	r2, [r7, r1, lsl #2]
   3ab24:	orr	r9, r2, r9
   3ab28:	orr	r0, r4, r0
   3ab2c:	add	r1, r1, #1
   3ab30:	cmp	r1, #8
   3ab34:	bne	3ab08 <__assert_fail@plt+0x27f18>
   3ab38:	cmp	r0, #0
   3ab3c:	beq	3ab88 <__assert_fail@plt+0x27f98>
   3ab40:	mov	r4, ip
   3ab44:	ldr	r6, [sp, #32]
   3ab48:	add	r0, r6, ip, lsl #5
   3ab4c:	add	r1, sp, #40	; 0x28
   3ab50:	bl	3acf0 <__assert_fail@plt+0x28100>
   3ab54:	add	r0, r6, r8, lsl #5
   3ab58:	mov	r1, r5
   3ab5c:	bl	3acf0 <__assert_fail@plt+0x28100>
   3ab60:	add	r0, r4, r4, lsl #1
   3ab64:	ldr	r2, [sp, #28]
   3ab68:	add	r0, r2, r0, lsl #2
   3ab6c:	add	r1, r8, r8, lsl #1
   3ab70:	add	r1, r2, r1, lsl #2
   3ab74:	bl	365fc <__assert_fail@plt+0x23a0c>
   3ab78:	cmp	r0, #0
   3ab7c:	bne	3ac48 <__assert_fail@plt+0x28058>
   3ab80:	add	r4, r4, #1
   3ab84:	b	3ab8c <__assert_fail@plt+0x27f9c>
   3ab88:	mov	r4, ip
   3ab8c:	ldr	r0, [sp, #16]
   3ab90:	mov	r6, r0
   3ab94:	ldr	r0, [r0, #12]
   3ab98:	ldr	r1, [sp, #36]	; 0x24
   3ab9c:	ldr	r1, [r0, r1, lsl #2]
   3aba0:	add	r0, r8, r8, lsl #1
   3aba4:	ldr	r2, [sp, #28]
   3aba8:	add	r0, r2, r0, lsl #2
   3abac:	bl	36410 <__assert_fail@plt+0x23820>
   3abb0:	cmp	r0, #0
   3abb4:	beq	3ac48 <__assert_fail@plt+0x28058>
   3abb8:	cmp	r9, #0
   3abbc:	beq	3abd8 <__assert_fail@plt+0x27fe8>
   3abc0:	mov	r9, r6
   3abc4:	ldr	r6, [sp, #24]
   3abc8:	b	3aa90 <__assert_fail@plt+0x27ea0>
   3abcc:	mov	r8, #0
   3abd0:	ldr	r9, [sp, #16]
   3abd4:	b	3abdc <__assert_fail@plt+0x27fec>
   3abd8:	mov	r9, r6
   3abdc:	cmp	r8, r4
   3abe0:	ldr	sl, [sp]
   3abe4:	bne	3ac30 <__assert_fail@plt+0x28040>
   3abe8:	ldr	r0, [sp, #32]
   3abec:	add	r0, r0, r4, lsl #5
   3abf0:	mov	r1, r7
   3abf4:	bl	3acf0 <__assert_fail@plt+0x28100>
   3abf8:	ldr	r0, [r9, #12]
   3abfc:	ldr	r1, [sp, #36]	; 0x24
   3ac00:	ldr	r1, [r0, r1, lsl #2]
   3ac04:	add	r0, r4, r4, lsl #1
   3ac08:	ldr	r2, [sp, #28]
   3ac0c:	add	r0, r2, r0, lsl #2
   3ac10:	bl	35d0c <__assert_fail@plt+0x2311c>
   3ac14:	cmp	r0, #0
   3ac18:	ldr	r6, [sp, #8]
   3ac1c:	bne	3ac48 <__assert_fail@plt+0x28058>
   3ac20:	mov	r0, r7
   3ac24:	bl	3ac70 <__assert_fail@plt+0x28080>
   3ac28:	add	r4, r4, #1
   3ac2c:	b	3a7e4 <__assert_fail@plt+0x27bf4>
   3ac30:	ldr	r6, [sp, #8]
   3ac34:	b	3a7e4 <__assert_fail@plt+0x27bf4>
   3ac38:	mov	r4, #0
   3ac3c:	mov	r0, r4
   3ac40:	sub	sp, fp, #28
   3ac44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ac48:	cmp	r4, #1
   3ac4c:	blt	3ac68 <__assert_fail@plt+0x28078>
   3ac50:	ldr	r0, [sp, #28]
   3ac54:	add	r5, r0, #8
   3ac58:	ldr	r0, [r5], #12
   3ac5c:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   3ac60:	subs	r4, r4, #1
   3ac64:	bne	3ac58 <__assert_fail@plt+0x28068>
   3ac68:	mvn	r4, #0
   3ac6c:	b	3ac3c <__assert_fail@plt+0x2804c>
   3ac70:	vmov.i32	q8, #0	; 0x00000000
   3ac74:	vst1.32	{d16-d17}, [r0]!
   3ac78:	vst1.32	{d16-d17}, [r0]
   3ac7c:	bx	lr
   3ac80:	mov	r2, #0
   3ac84:	ldr	ip, [r1, r2, lsl #2]
   3ac88:	ldr	r3, [r0, r2, lsl #2]
   3ac8c:	orr	r3, r3, ip
   3ac90:	str	r3, [r0, r2, lsl #2]
   3ac94:	add	r2, r2, #1
   3ac98:	cmp	r2, #8
   3ac9c:	bne	3ac84 <__assert_fail@plt+0x28094>
   3aca0:	bx	lr
   3aca4:	mvn	r1, #0
   3aca8:	str	r1, [r0]
   3acac:	str	r1, [r0, #4]
   3acb0:	str	r1, [r0, #8]
   3acb4:	str	r1, [r0, #12]
   3acb8:	str	r1, [r0, #16]
   3acbc:	str	r1, [r0, #20]
   3acc0:	str	r1, [r0, #24]
   3acc4:	str	r1, [r0, #28]
   3acc8:	bx	lr
   3accc:	asr	r2, r1, #31
   3acd0:	add	r2, r1, r2, lsr #27
   3acd4:	asr	r2, r2, #5
   3acd8:	ldr	ip, [r0, r2, lsl #2]
   3acdc:	and	r1, r1, #31
   3ace0:	mov	r3, #1
   3ace4:	bic	r1, ip, r3, lsl r1
   3ace8:	str	r1, [r0, r2, lsl #2]
   3acec:	bx	lr
   3acf0:	vld1.32	{d16-d17}, [r1]!
   3acf4:	vld1.32	{d18-d19}, [r1]
   3acf8:	vst1.32	{d16-d17}, [r0]!
   3acfc:	vst1.32	{d18-d19}, [r0]
   3ad00:	bx	lr
   3ad04:	ldr	r0, [r0]
   3ad08:	add	r0, r0, r1, lsl #3
   3ad0c:	ldr	r1, [r0, #4]
   3ad10:	uxtb	r3, r1
   3ad14:	mov	r0, #0
   3ad18:	cmp	r3, #2
   3ad1c:	bne	3ad74 <__assert_fail@plt+0x28184>
   3ad20:	movw	r3, #65280	; 0xff00
   3ad24:	movt	r3, #3
   3ad28:	tst	r1, r3
   3ad2c:	moveq	r0, #1
   3ad30:	bxeq	lr
   3ad34:	ands	ip, r2, #1
   3ad38:	bne	3ad44 <__assert_fail@plt+0x28154>
   3ad3c:	ands	r3, r1, #1024	; 0x400
   3ad40:	bne	3ad74 <__assert_fail@plt+0x28184>
   3ad44:	cmp	ip, #0
   3ad48:	andsne	r3, r1, #2048	; 0x800
   3ad4c:	bne	3ad74 <__assert_fail@plt+0x28184>
   3ad50:	tst	r2, #2
   3ad54:	bne	3ad60 <__assert_fail@plt+0x28170>
   3ad58:	ands	r3, r1, #8192	; 0x2000
   3ad5c:	bxne	lr
   3ad60:	uxth	r0, r1
   3ad64:	mov	r1, #1
   3ad68:	eor	r0, r1, r0, lsr #15
   3ad6c:	and	r1, r2, #8
   3ad70:	orr	r0, r0, r1, lsr #3
   3ad74:	bx	lr
   3ad78:	mov	ip, #0
   3ad7c:	str	ip, [r0, #20]
   3ad80:	str	ip, [r0, #16]
   3ad84:	stm	r0, {r1, r2, r3}
   3ad88:	str	ip, [r0, #24]
   3ad8c:	ldr	r1, [sp]
   3ad90:	str	r1, [r0, #12]
   3ad94:	bx	lr
   3ad98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ad9c:	add	fp, sp, #28
   3ada0:	sub	sp, sp, #12
   3ada4:	mov	sl, r1
   3ada8:	mov	r6, r0
   3adac:	ldr	r1, [r1, #8]
   3adb0:	ldr	r5, [sl, #12]
   3adb4:	mov	r0, sp
   3adb8:	bl	35d0c <__assert_fail@plt+0x2311c>
   3adbc:	cmp	r0, #0
   3adc0:	bne	3aea8 <__assert_fail@plt+0x282b8>
   3adc4:	mov	r3, sp
   3adc8:	mov	r0, r6
   3adcc:	mov	r1, sl
   3add0:	mov	r2, r5
   3add4:	bl	3af64 <__assert_fail@plt+0x28374>
   3add8:	cmp	r0, #0
   3addc:	bne	3ae74 <__assert_fail@plt+0x28284>
   3ade0:	mov	r9, #0
   3ade4:	mov	r8, sp
   3ade8:	mov	r1, #0
   3adec:	cmp	r5, #1
   3adf0:	bge	3ae20 <__assert_fail@plt+0x28230>
   3adf4:	b	3ae7c <__assert_fail@plt+0x2828c>
   3adf8:	mov	r0, r6
   3adfc:	mov	r1, sl
   3ae00:	mov	r2, r5
   3ae04:	mov	r3, r8
   3ae08:	bl	3af64 <__assert_fail@plt+0x28374>
   3ae0c:	cmp	r0, #0
   3ae10:	mov	r1, r4
   3ae14:	bne	3ae74 <__assert_fail@plt+0x28284>
   3ae18:	cmp	r5, #1
   3ae1c:	blt	3ae7c <__assert_fail@plt+0x2828c>
   3ae20:	ldr	r0, [sl]
   3ae24:	ldr	r2, [r0, r5, lsl #2]
   3ae28:	cmp	r2, #0
   3ae2c:	mov	r4, #0
   3ae30:	addeq	r4, r1, #1
   3ae34:	ldr	r1, [r6, #120]	; 0x78
   3ae38:	cmp	r4, r1
   3ae3c:	bgt	3ae84 <__assert_fail@plt+0x28294>
   3ae40:	str	r9, [sp, #4]
   3ae44:	ldr	r0, [r6, #100]	; 0x64
   3ae48:	sub	r5, r5, #1
   3ae4c:	ldr	r0, [r0, r5, lsl #2]
   3ae50:	cmp	r0, #0
   3ae54:	beq	3adf8 <__assert_fail@plt+0x28208>
   3ae58:	mov	r0, r6
   3ae5c:	mov	r1, sl
   3ae60:	mov	r2, r5
   3ae64:	mov	r3, r8
   3ae68:	bl	3b08c <__assert_fail@plt+0x2849c>
   3ae6c:	cmp	r0, #0
   3ae70:	beq	3adf8 <__assert_fail@plt+0x28208>
   3ae74:	mov	r7, r0
   3ae78:	b	3ae94 <__assert_fail@plt+0x282a4>
   3ae7c:	mov	r7, #0
   3ae80:	b	3ae94 <__assert_fail@plt+0x282a4>
   3ae84:	lsl	r2, r5, #2
   3ae88:	mov	r7, #0
   3ae8c:	mov	r1, #0
   3ae90:	bl	12938 <memset@plt>
   3ae94:	ldr	r0, [sp, #8]
   3ae98:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   3ae9c:	mov	r0, r7
   3aea0:	sub	sp, fp, #28
   3aea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3aea8:	mov	r7, r0
   3aeac:	b	3ae9c <__assert_fail@plt+0x282ac>
   3aeb0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3aeb4:	add	fp, sp, #24
   3aeb8:	sub	sp, sp, #16
   3aebc:	cmp	r3, #1
   3aec0:	blt	3af58 <__assert_fail@plt+0x28368>
   3aec4:	mov	r4, r3
   3aec8:	mov	r5, r2
   3aecc:	mov	r6, r1
   3aed0:	mov	r7, r0
   3aed4:	mov	r8, sp
   3aed8:	add	r9, sp, #12
   3aedc:	b	3aef4 <__assert_fail@plt+0x28304>
   3aee0:	str	r0, [r6]
   3aee4:	add	r6, r6, #4
   3aee8:	add	r5, r5, #4
   3aeec:	subs	r4, r4, #1
   3aef0:	beq	3af58 <__assert_fail@plt+0x28368>
   3aef4:	ldr	r0, [r5]
   3aef8:	ldr	r1, [r6]
   3aefc:	cmp	r1, #0
   3af00:	beq	3aee0 <__assert_fail@plt+0x282f0>
   3af04:	cmp	r0, #0
   3af08:	beq	3aee4 <__assert_fail@plt+0x282f4>
   3af0c:	add	r1, r1, #4
   3af10:	add	r2, r0, #4
   3af14:	mov	r0, r8
   3af18:	bl	38ac0 <__assert_fail@plt+0x25ed0>
   3af1c:	str	r0, [sp, #12]
   3af20:	cmp	r0, #0
   3af24:	bne	3af50 <__assert_fail@plt+0x28360>
   3af28:	mov	r0, r9
   3af2c:	mov	r1, r7
   3af30:	mov	r2, r8
   3af34:	bl	39ac4 <__assert_fail@plt+0x26ed4>
   3af38:	str	r0, [r6]
   3af3c:	ldr	r0, [sp, #8]
   3af40:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   3af44:	ldr	r0, [sp, #12]
   3af48:	cmp	r0, #0
   3af4c:	beq	3aee4 <__assert_fail@plt+0x282f4>
   3af50:	sub	sp, fp, #24
   3af54:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3af58:	mov	r0, #0
   3af5c:	sub	sp, fp, #24
   3af60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3af64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3af68:	add	fp, sp, #28
   3af6c:	sub	sp, sp, #12
   3af70:	mov	sl, r2
   3af74:	mov	r8, r1
   3af78:	mov	r6, r0
   3af7c:	ldr	r9, [r0, #84]	; 0x54
   3af80:	mov	r0, #0
   3af84:	str	r0, [sp, #8]
   3af88:	ldr	r1, [r6, #100]	; 0x64
   3af8c:	ldr	r7, [r1, r2, lsl #2]
   3af90:	cmp	r7, #0
   3af94:	mov	r4, r7
   3af98:	addne	r4, r4, #4
   3af9c:	ldr	r1, [r3, #4]
   3afa0:	cmp	r1, #0
   3afa4:	beq	3b034 <__assert_fail@plt+0x28444>
   3afa8:	mov	r5, r3
   3afac:	cmp	r7, #0
   3afb0:	beq	3b004 <__assert_fail@plt+0x28414>
   3afb4:	mov	r0, r9
   3afb8:	mov	r1, r5
   3afbc:	mov	r2, r4
   3afc0:	bl	3b1d8 <__assert_fail@plt+0x285e8>
   3afc4:	str	r0, [sp, #8]
   3afc8:	cmp	r0, #0
   3afcc:	bne	3b05c <__assert_fail@plt+0x2846c>
   3afd0:	ldr	r0, [r8, #20]
   3afd4:	cmp	r0, #0
   3afd8:	beq	3b004 <__assert_fail@plt+0x28414>
   3afdc:	ldr	r0, [r6, #116]	; 0x74
   3afe0:	stm	sp, {r0, sl}
   3afe4:	add	r3, r8, #16
   3afe8:	mov	r0, r9
   3afec:	mov	r1, r5
   3aff0:	mov	r2, r4
   3aff4:	bl	3b2b0 <__assert_fail@plt+0x286c0>
   3aff8:	str	r0, [sp, #8]
   3affc:	cmp	r0, #0
   3b000:	bne	3b05c <__assert_fail@plt+0x2846c>
   3b004:	add	r0, sp, #8
   3b008:	mov	r1, r9
   3b00c:	mov	r2, r5
   3b010:	bl	39ac4 <__assert_fail@plt+0x26ed4>
   3b014:	ldr	r1, [r8]
   3b018:	str	r0, [r1, sl, lsl #2]
   3b01c:	ldr	r0, [sp, #8]
   3b020:	cmp	r0, #0
   3b024:	bne	3b05c <__assert_fail@plt+0x2846c>
   3b028:	cmp	r7, #0
   3b02c:	bne	3b044 <__assert_fail@plt+0x28454>
   3b030:	b	3b058 <__assert_fail@plt+0x28468>
   3b034:	ldr	r1, [r8]
   3b038:	str	r0, [r1, sl, lsl #2]
   3b03c:	cmp	r7, #0
   3b040:	beq	3b058 <__assert_fail@plt+0x28468>
   3b044:	ldr	r0, [r6, #100]	; 0x64
   3b048:	ldr	r0, [r0, sl, lsl #2]
   3b04c:	ldrb	r0, [r0, #52]	; 0x34
   3b050:	tst	r0, #64	; 0x40
   3b054:	bne	3b064 <__assert_fail@plt+0x28474>
   3b058:	mov	r0, #0
   3b05c:	sub	sp, fp, #28
   3b060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b064:	mov	r0, r6
   3b068:	mov	r1, r8
   3b06c:	mov	r2, sl
   3b070:	mov	r3, r4
   3b074:	bl	3b4f4 <__assert_fail@plt+0x28904>
   3b078:	str	r0, [sp, #8]
   3b07c:	cmp	r0, #0
   3b080:	moveq	r0, #0
   3b084:	sub	sp, fp, #28
   3b088:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b08c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b090:	add	fp, sp, #28
   3b094:	sub	sp, sp, #20
   3b098:	str	r3, [sp, #12]
   3b09c:	mov	sl, r0
   3b0a0:	ldr	r0, [r0, #100]	; 0x64
   3b0a4:	ldr	r7, [r0, r2, lsl #2]
   3b0a8:	ldr	r0, [r7, #20]
   3b0ac:	cmp	r0, #1
   3b0b0:	blt	3b1c0 <__assert_fail@plt+0x285d0>
   3b0b4:	mov	r5, r2
   3b0b8:	mov	r6, r1
   3b0bc:	ldr	r8, [sl, #84]	; 0x54
   3b0c0:	add	r0, r1, #16
   3b0c4:	str	r0, [sp, #8]
   3b0c8:	add	r0, r2, #1
   3b0cc:	str	r0, [sp, #16]
   3b0d0:	mov	r9, #0
   3b0d4:	b	3b0fc <__assert_fail@plt+0x2850c>
   3b0d8:	ldr	r0, [sp, #12]
   3b0dc:	mov	r1, r4
   3b0e0:	bl	36410 <__assert_fail@plt+0x23820>
   3b0e4:	cmp	r0, #0
   3b0e8:	beq	3b1cc <__assert_fail@plt+0x285dc>
   3b0ec:	add	r9, r9, #1
   3b0f0:	ldr	r0, [r7, #20]
   3b0f4:	cmp	r9, r0
   3b0f8:	bge	3b1c0 <__assert_fail@plt+0x285d0>
   3b0fc:	ldr	r0, [r7, #24]
   3b100:	ldr	r4, [r0, r9, lsl #2]
   3b104:	ldr	r0, [r8]
   3b108:	add	r0, r0, r4, lsl #3
   3b10c:	ldrb	r0, [r0, #6]
   3b110:	tst	r0, #16
   3b114:	beq	3b13c <__assert_fail@plt+0x2854c>
   3b118:	ldr	r0, [r6, #12]
   3b11c:	str	r0, [sp]
   3b120:	mov	r0, sl
   3b124:	mov	r1, r6
   3b128:	mov	r2, r4
   3b12c:	mov	r3, r5
   3b130:	bl	3bef4 <__assert_fail@plt+0x29304>
   3b134:	cmp	r0, #0
   3b138:	bne	3b18c <__assert_fail@plt+0x2859c>
   3b13c:	ldr	r0, [r8]
   3b140:	add	r1, r0, r4, lsl #3
   3b144:	mov	r0, sl
   3b148:	mov	r2, r5
   3b14c:	bl	39fb0 <__assert_fail@plt+0x273c0>
   3b150:	cmp	r0, #0
   3b154:	beq	3b0ec <__assert_fail@plt+0x284fc>
   3b158:	ldr	r0, [r6]
   3b15c:	ldr	r1, [sp, #16]
   3b160:	ldr	r0, [r0, r1, lsl #2]
   3b164:	cmp	r0, #0
   3b168:	beq	3b0ec <__assert_fail@plt+0x284fc>
   3b16c:	ldr	r1, [r8, #12]
   3b170:	ldr	r1, [r1, r4, lsl #2]
   3b174:	add	r0, r0, #4
   3b178:	bl	36678 <__assert_fail@plt+0x23a88>
   3b17c:	mov	r1, r0
   3b180:	mov	r0, #1
   3b184:	cmp	r1, #0
   3b188:	beq	3b0ec <__assert_fail@plt+0x284fc>
   3b18c:	ldr	r1, [r6, #20]
   3b190:	cmp	r1, #0
   3b194:	beq	3b0d8 <__assert_fail@plt+0x284e8>
   3b198:	ldr	r1, [r8, #12]
   3b19c:	ldr	r2, [r1, r4, lsl #2]
   3b1a0:	stm	sp, {r4, r5}
   3b1a4:	add	r3, r0, r5
   3b1a8:	mov	r0, sl
   3b1ac:	ldr	r1, [sp, #8]
   3b1b0:	bl	3bb88 <__assert_fail@plt+0x28f98>
   3b1b4:	cmp	r0, #0
   3b1b8:	beq	3b0d8 <__assert_fail@plt+0x284e8>
   3b1bc:	b	3b0ec <__assert_fail@plt+0x284fc>
   3b1c0:	mov	r0, #0
   3b1c4:	sub	sp, fp, #28
   3b1c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b1cc:	mov	r0, #12
   3b1d0:	sub	sp, fp, #28
   3b1d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b1d8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3b1dc:	add	fp, sp, #24
   3b1e0:	sub	sp, sp, #8
   3b1e4:	mov	r8, r2
   3b1e8:	mov	r5, r1
   3b1ec:	mov	r6, r0
   3b1f0:	mov	r0, #0
   3b1f4:	str	r0, [sp, #4]
   3b1f8:	add	r0, sp, #4
   3b1fc:	mov	r1, r6
   3b200:	mov	r2, r5
   3b204:	bl	39ac4 <__assert_fail@plt+0x26ed4>
   3b208:	ldr	r9, [sp, #4]
   3b20c:	cmp	r9, #0
   3b210:	bne	3b29c <__assert_fail@plt+0x286ac>
   3b214:	mov	r7, r0
   3b218:	ldr	r0, [r7, #28]!
   3b21c:	cmp	r0, #0
   3b220:	bne	3b288 <__assert_fail@plt+0x28698>
   3b224:	ldr	r1, [r5, #4]
   3b228:	mov	r0, r7
   3b22c:	bl	35f6c <__assert_fail@plt+0x2337c>
   3b230:	str	r0, [sp, #4]
   3b234:	mov	r9, #12
   3b238:	cmp	r0, #0
   3b23c:	bne	3b29c <__assert_fail@plt+0x286ac>
   3b240:	ldr	r0, [r5, #4]
   3b244:	cmp	r0, #1
   3b248:	blt	3b288 <__assert_fail@plt+0x28698>
   3b24c:	mov	r4, #0
   3b250:	ldr	r0, [r5, #8]
   3b254:	ldr	r0, [r0, r4, lsl #2]
   3b258:	add	r0, r0, r0, lsl #1
   3b25c:	ldr	r1, [r6, #28]
   3b260:	add	r1, r1, r0, lsl #2
   3b264:	mov	r0, r7
   3b268:	bl	361f8 <__assert_fail@plt+0x23608>
   3b26c:	cmp	r0, #0
   3b270:	bne	3b2a8 <__assert_fail@plt+0x286b8>
   3b274:	add	r4, r4, #1
   3b278:	ldr	r1, [r5, #4]
   3b27c:	cmp	r4, r1
   3b280:	blt	3b250 <__assert_fail@plt+0x28660>
   3b284:	str	r0, [sp, #4]
   3b288:	mov	r0, r5
   3b28c:	mov	r1, r8
   3b290:	mov	r2, r7
   3b294:	bl	3b7e4 <__assert_fail@plt+0x28bf4>
   3b298:	mov	r9, r0
   3b29c:	mov	r0, r9
   3b2a0:	sub	sp, fp, #24
   3b2a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3b2a8:	str	r0, [sp, #4]
   3b2ac:	b	3b29c <__assert_fail@plt+0x286ac>
   3b2b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b2b4:	add	fp, sp, #28
   3b2b8:	sub	sp, sp, #12
   3b2bc:	str	r2, [sp, #4]
   3b2c0:	mov	ip, r0
   3b2c4:	ldr	r0, [r3, #4]
   3b2c8:	cmp	r0, #1
   3b2cc:	blt	3b4e8 <__assert_fail@plt+0x288f8>
   3b2d0:	mov	r9, r1
   3b2d4:	mov	r8, #0
   3b2d8:	str	ip, [sp]
   3b2dc:	str	r3, [sp, #8]
   3b2e0:	b	3b2f8 <__assert_fail@plt+0x28708>
   3b2e4:	add	r8, r8, #1
   3b2e8:	ldr	r3, [sp, #8]
   3b2ec:	ldr	r0, [r3, #4]
   3b2f0:	cmp	r8, r0
   3b2f4:	bge	3b4e8 <__assert_fail@plt+0x288f8>
   3b2f8:	ldr	r0, [r3, #8]
   3b2fc:	ldr	r0, [r0, r8, lsl #2]
   3b300:	add	r0, r0, r0, lsl #1
   3b304:	ldr	r1, [fp, #8]
   3b308:	add	r1, r1, r0, lsl #3
   3b30c:	ldr	r2, [r1, #8]
   3b310:	ldr	r3, [fp, #12]
   3b314:	cmp	r2, r3
   3b318:	bge	3b2e4 <__assert_fail@plt+0x286f4>
   3b31c:	ldr	r1, [r1, #4]
   3b320:	ldr	r2, [fp, #12]
   3b324:	cmp	r1, r2
   3b328:	blt	3b2e4 <__assert_fail@plt+0x286f4>
   3b32c:	ldr	r1, [fp, #8]
   3b330:	ldr	r2, [r1, r0, lsl #3]!
   3b334:	ldr	r0, [ip]
   3b338:	ldr	sl, [r0, r2, lsl #3]
   3b33c:	ldr	r1, [r1, #12]
   3b340:	ldr	r2, [fp, #12]
   3b344:	cmp	r1, r2
   3b348:	bne	3b3b0 <__assert_fail@plt+0x287c0>
   3b34c:	ldr	r1, [r9, #4]
   3b350:	cmp	r1, #1
   3b354:	blt	3b2e4 <__assert_fail@plt+0x286f4>
   3b358:	ldmib	r9, {r2, r3}
   3b35c:	mvn	r6, #0
   3b360:	mov	r5, #0
   3b364:	mvn	r1, #0
   3b368:	b	3b384 <__assert_fail@plt+0x28794>
   3b36c:	ldr	r4, [r0, r7, lsl #3]
   3b370:	cmp	sl, r4
   3b374:	moveq	r6, r7
   3b378:	add	r5, r5, #1
   3b37c:	cmp	r5, r2
   3b380:	bge	3b420 <__assert_fail@plt+0x28830>
   3b384:	ldr	r7, [r3, r5, lsl #2]
   3b388:	add	r4, r0, r7, lsl #3
   3b38c:	ldrb	r4, [r4, #4]
   3b390:	cmp	r4, #9
   3b394:	beq	3b36c <__assert_fail@plt+0x2877c>
   3b398:	cmp	r4, #8
   3b39c:	bne	3b378 <__assert_fail@plt+0x28788>
   3b3a0:	ldr	r4, [r0, r7, lsl #3]
   3b3a4:	cmp	sl, r4
   3b3a8:	moveq	r1, r7
   3b3ac:	b	3b378 <__assert_fail@plt+0x28788>
   3b3b0:	ldr	r0, [r9, #4]
   3b3b4:	cmp	r0, #1
   3b3b8:	blt	3b2e4 <__assert_fail@plt+0x286f4>
   3b3bc:	mov	r5, #0
   3b3c0:	b	3b3d4 <__assert_fail@plt+0x287e4>
   3b3c4:	ldr	r0, [r9, #4]
   3b3c8:	add	r5, r5, #1
   3b3cc:	cmp	r5, r0
   3b3d0:	bge	3b2e4 <__assert_fail@plt+0x286f4>
   3b3d4:	ldr	r0, [r9, #8]
   3b3d8:	ldr	r1, [r0, r5, lsl #2]
   3b3dc:	ldr	r0, [ip]
   3b3e0:	add	r2, r0, r1, lsl #3
   3b3e4:	ldrb	r2, [r2, #4]
   3b3e8:	orr	r2, r2, #1
   3b3ec:	cmp	r2, #9
   3b3f0:	bne	3b3c4 <__assert_fail@plt+0x287d4>
   3b3f4:	ldr	r0, [r0, r1, lsl #3]
   3b3f8:	cmp	sl, r0
   3b3fc:	bne	3b3c4 <__assert_fail@plt+0x287d4>
   3b400:	mov	r0, ip
   3b404:	mov	r2, r9
   3b408:	ldr	r3, [sp, #4]
   3b40c:	bl	3b9d4 <__assert_fail@plt+0x28de4>
   3b410:	ldr	ip, [sp]
   3b414:	cmp	r0, #0
   3b418:	beq	3b3c4 <__assert_fail@plt+0x287d4>
   3b41c:	b	3b4ec <__assert_fail@plt+0x288fc>
   3b420:	cmp	r1, #0
   3b424:	bmi	3b444 <__assert_fail@plt+0x28854>
   3b428:	mov	r0, ip
   3b42c:	mov	r2, r9
   3b430:	ldr	r3, [sp, #4]
   3b434:	bl	3b9d4 <__assert_fail@plt+0x28de4>
   3b438:	ldr	ip, [sp]
   3b43c:	cmp	r0, #0
   3b440:	bne	3b4ec <__assert_fail@plt+0x288fc>
   3b444:	cmp	r6, #0
   3b448:	bmi	3b2e4 <__assert_fail@plt+0x286f4>
   3b44c:	ldr	r0, [r9, #4]
   3b450:	cmp	r0, #1
   3b454:	blt	3b2e4 <__assert_fail@plt+0x286f4>
   3b458:	mov	sl, #0
   3b45c:	b	3b478 <__assert_fail@plt+0x28888>
   3b460:	mov	r6, r5
   3b464:	mov	ip, r7
   3b468:	ldr	r0, [r9, #4]
   3b46c:	add	sl, sl, #1
   3b470:	cmp	sl, r0
   3b474:	bge	3b2e4 <__assert_fail@plt+0x286f4>
   3b478:	ldr	r0, [r9, #8]
   3b47c:	ldr	r4, [r0, sl, lsl #2]
   3b480:	add	r5, r4, r4, lsl #1
   3b484:	ldr	r0, [ip, #28]
   3b488:	add	r0, r0, r5, lsl #2
   3b48c:	mov	r1, r6
   3b490:	mov	r7, ip
   3b494:	bl	36678 <__assert_fail@plt+0x23a88>
   3b498:	cmp	r0, #0
   3b49c:	bne	3b464 <__assert_fail@plt+0x28874>
   3b4a0:	ldr	r0, [r7, #24]
   3b4a4:	add	r0, r0, r5, lsl #2
   3b4a8:	mov	r5, r6
   3b4ac:	mov	r1, r6
   3b4b0:	bl	36678 <__assert_fail@plt+0x23a88>
   3b4b4:	cmp	r0, #0
   3b4b8:	bne	3b460 <__assert_fail@plt+0x28870>
   3b4bc:	mov	r0, r7
   3b4c0:	mov	r1, r4
   3b4c4:	mov	r2, r9
   3b4c8:	ldr	r3, [sp, #4]
   3b4cc:	bl	3b9d4 <__assert_fail@plt+0x28de4>
   3b4d0:	cmp	r0, #0
   3b4d4:	bne	3b4ec <__assert_fail@plt+0x288fc>
   3b4d8:	sub	sl, sl, #1
   3b4dc:	mov	r6, r5
   3b4e0:	ldr	ip, [sp]
   3b4e4:	b	3b468 <__assert_fail@plt+0x28878>
   3b4e8:	mov	r0, #0
   3b4ec:	sub	sp, fp, #28
   3b4f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b4f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b4f8:	add	fp, sp, #28
   3b4fc:	sub	sp, sp, #84	; 0x54
   3b500:	mov	r4, r3
   3b504:	mov	r7, r2
   3b508:	str	r1, [sp, #52]	; 0x34
   3b50c:	ldr	r1, [r0, #84]	; 0x54
   3b510:	str	r1, [sp, #48]	; 0x30
   3b514:	str	r0, [sp, #44]	; 0x2c
   3b518:	mov	r1, r2
   3b51c:	bl	38cf4 <__assert_fail@plt+0x26104>
   3b520:	str	r0, [sp, #20]
   3b524:	mov	sl, #0
   3b528:	cmn	r0, #1
   3b52c:	beq	3b7c8 <__assert_fail@plt+0x28bd8>
   3b530:	str	sl, [sp, #56]	; 0x38
   3b534:	str	r4, [sp, #24]
   3b538:	ldr	r0, [r4, #4]
   3b53c:	cmp	r0, #1
   3b540:	blt	3b7c8 <__assert_fail@plt+0x28bd8>
   3b544:	add	r0, r7, #1
   3b548:	str	r0, [sp, #8]
   3b54c:	add	r0, sp, #56	; 0x38
   3b550:	add	r0, r0, #16
   3b554:	str	r0, [sp, #28]
   3b558:	ldr	r2, [sp, #52]	; 0x34
   3b55c:	add	r0, r2, #16
   3b560:	str	r0, [sp, #32]
   3b564:	ldr	r0, [sp, #20]
   3b568:	add	r0, r0, r0, lsl #1
   3b56c:	str	r0, [sp, #16]
   3b570:	lsl	r0, r0, #3
   3b574:	str	r0, [sp, #12]
   3b578:	mov	r1, #0
   3b57c:	ldr	sl, [sp, #24]
   3b580:	ldr	r3, [sp, #48]	; 0x30
   3b584:	str	r7, [sp, #40]	; 0x28
   3b588:	b	3b5a0 <__assert_fail@plt+0x289b0>
   3b58c:	ldr	r1, [sp, #36]	; 0x24
   3b590:	add	r1, r1, #1
   3b594:	ldr	r0, [sl, #4]
   3b598:	cmp	r1, r0
   3b59c:	bge	3b7b0 <__assert_fail@plt+0x28bc0>
   3b5a0:	ldr	r0, [sl, #8]
   3b5a4:	str	r1, [sp, #36]	; 0x24
   3b5a8:	ldr	r9, [r0, r1, lsl #2]
   3b5ac:	ldr	r0, [r3]
   3b5b0:	add	r0, r0, r9, lsl #3
   3b5b4:	ldrb	r0, [r0, #4]
   3b5b8:	ldr	r1, [r2, #8]
   3b5bc:	cmp	r9, r1
   3b5c0:	bne	3b5dc <__assert_fail@plt+0x289ec>
   3b5c4:	cmp	r0, #4
   3b5c8:	bne	3b58c <__assert_fail@plt+0x2899c>
   3b5cc:	ldr	r0, [r2, #12]
   3b5d0:	cmp	r0, r7
   3b5d4:	bne	3b5e4 <__assert_fail@plt+0x289f4>
   3b5d8:	b	3b58c <__assert_fail@plt+0x2899c>
   3b5dc:	cmp	r0, #4
   3b5e0:	bne	3b58c <__assert_fail@plt+0x2899c>
   3b5e4:	ldr	r0, [sp, #44]	; 0x2c
   3b5e8:	ldr	r0, [r0, #116]	; 0x74
   3b5ec:	ldr	r1, [sp, #16]
   3b5f0:	add	r5, r0, r1, lsl #3
   3b5f4:	ldr	r4, [sp, #12]
   3b5f8:	ldr	r8, [sp, #20]
   3b5fc:	b	3b61c <__assert_fail@plt+0x28a2c>
   3b600:	mov	r0, r5
   3b604:	add	r4, r4, #24
   3b608:	add	r5, r0, #24
   3b60c:	add	r8, r8, #1
   3b610:	ldrb	r0, [r0, #20]
   3b614:	cmp	r0, #0
   3b618:	beq	3b58c <__assert_fail@plt+0x2899c>
   3b61c:	ldr	r0, [r5]
   3b620:	cmp	r0, r9
   3b624:	bne	3b600 <__assert_fail@plt+0x28a10>
   3b628:	ldr	r0, [r5, #8]
   3b62c:	ldr	r1, [r5, #12]
   3b630:	subs	r0, r1, r0
   3b634:	add	r6, r0, r7
   3b638:	beq	3b648 <__assert_fail@plt+0x28a58>
   3b63c:	ldr	r0, [r3, #12]
   3b640:	add	r0, r0, r9, lsl #2
   3b644:	b	3b658 <__assert_fail@plt+0x28a68>
   3b648:	ldr	r0, [r3, #20]
   3b64c:	add	r1, r9, r9, lsl #1
   3b650:	add	r0, r0, r1, lsl #2
   3b654:	ldr	r0, [r0, #8]
   3b658:	ldr	r1, [r2, #12]
   3b65c:	cmp	r6, r1
   3b660:	bgt	3b600 <__assert_fail@plt+0x28a10>
   3b664:	ldr	r1, [r2]
   3b668:	ldr	r1, [r1, r6, lsl #2]
   3b66c:	cmp	r1, #0
   3b670:	beq	3b600 <__assert_fail@plt+0x28a10>
   3b674:	ldr	r7, [r0]
   3b678:	add	r0, r1, #4
   3b67c:	mov	r1, r7
   3b680:	bl	36678 <__assert_fail@plt+0x23a88>
   3b684:	cmp	r0, #0
   3b688:	beq	3b79c <__assert_fail@plt+0x28bac>
   3b68c:	str	r7, [sp]
   3b690:	str	r6, [sp, #4]
   3b694:	ldr	r0, [sp, #44]	; 0x2c
   3b698:	ldr	r1, [sp, #32]
   3b69c:	mov	r2, r9
   3b6a0:	ldr	r7, [sp, #40]	; 0x28
   3b6a4:	mov	r3, r7
   3b6a8:	bl	3bb88 <__assert_fail@plt+0x28f98>
   3b6ac:	cmp	r0, #0
   3b6b0:	mov	r0, r5
   3b6b4:	ldr	r2, [sp, #52]	; 0x34
   3b6b8:	ldr	r3, [sp, #48]	; 0x30
   3b6bc:	bne	3b604 <__assert_fail@plt+0x28a14>
   3b6c0:	ldr	r0, [sp, #56]	; 0x38
   3b6c4:	cmp	r0, #0
   3b6c8:	bne	3b6fc <__assert_fail@plt+0x28b0c>
   3b6cc:	mov	r0, r2
   3b6d0:	mov	r1, #12
   3b6d4:	vld1.32	{d16-d17}, [r0], r1
   3b6d8:	vld1.32	{d18-d19}, [r0]
   3b6dc:	add	r0, sp, #56	; 0x38
   3b6e0:	vst1.64	{d16-d17}, [r0], r1
   3b6e4:	vst1.32	{d18-d19}, [r0]
   3b6e8:	ldr	r0, [sp, #28]
   3b6ec:	ldr	r1, [sp, #32]
   3b6f0:	bl	365fc <__assert_fail@plt+0x23a0c>
   3b6f4:	cmp	r0, #0
   3b6f8:	bne	3b7d4 <__assert_fail@plt+0x28be4>
   3b6fc:	str	r7, [sp, #68]	; 0x44
   3b700:	str	r9, [sp, #64]	; 0x40
   3b704:	ldr	r0, [sp, #28]
   3b708:	mov	r1, r8
   3b70c:	bl	36410 <__assert_fail@plt+0x23820>
   3b710:	cmp	r0, #0
   3b714:	beq	3b7dc <__assert_fail@plt+0x28bec>
   3b718:	mov	r0, r7
   3b71c:	ldr	r7, [sp, #56]	; 0x38
   3b720:	ldr	r5, [r7, r0, lsl #2]
   3b724:	ldr	r0, [sp, #44]	; 0x2c
   3b728:	add	r1, sp, #56	; 0x38
   3b72c:	bl	3ad98 <__assert_fail@plt+0x281a8>
   3b730:	cmp	r0, #0
   3b734:	bne	3b7d4 <__assert_fail@plt+0x28be4>
   3b738:	ldr	r0, [sp, #52]	; 0x34
   3b73c:	ldr	r1, [r0, #4]
   3b740:	cmp	r1, #0
   3b744:	beq	3b760 <__assert_fail@plt+0x28b70>
   3b748:	ldr	r0, [sp, #48]	; 0x30
   3b74c:	mov	r2, r7
   3b750:	ldr	r3, [sp, #8]
   3b754:	bl	3aeb0 <__assert_fail@plt+0x282c0>
   3b758:	cmp	r0, #0
   3b75c:	bne	3b7d4 <__assert_fail@plt+0x28be4>
   3b760:	ldr	r0, [sp, #40]	; 0x28
   3b764:	str	r5, [r7, r0, lsl #2]
   3b768:	mov	r7, r0
   3b76c:	ldr	r5, [sp, #28]
   3b770:	mov	r0, r5
   3b774:	mov	r1, r8
   3b778:	bl	36678 <__assert_fail@plt+0x23a88>
   3b77c:	sub	r1, r0, #1
   3b780:	mov	r0, r5
   3b784:	bl	36a8c <__assert_fail@plt+0x23e9c>
   3b788:	ldr	r0, [sp, #44]	; 0x2c
   3b78c:	ldr	r0, [r0, #116]	; 0x74
   3b790:	add	r0, r0, r4
   3b794:	ldr	sl, [sp, #24]
   3b798:	b	3b7a4 <__assert_fail@plt+0x28bb4>
   3b79c:	mov	r0, r5
   3b7a0:	ldr	r7, [sp, #40]	; 0x28
   3b7a4:	ldr	r2, [sp, #52]	; 0x34
   3b7a8:	ldr	r3, [sp, #48]	; 0x30
   3b7ac:	b	3b604 <__assert_fail@plt+0x28a14>
   3b7b0:	mov	sl, #0
   3b7b4:	ldr	r0, [sp, #56]	; 0x38
   3b7b8:	cmp	r0, #0
   3b7bc:	beq	3b7c8 <__assert_fail@plt+0x28bd8>
   3b7c0:	ldr	r0, [sp, #80]	; 0x50
   3b7c4:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   3b7c8:	mov	r0, sl
   3b7cc:	sub	sp, fp, #28
   3b7d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b7d4:	mov	sl, r0
   3b7d8:	b	3b7b4 <__assert_fail@plt+0x28bc4>
   3b7dc:	mov	sl, #12
   3b7e0:	b	3b7b4 <__assert_fail@plt+0x28bc4>
   3b7e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b7e8:	add	fp, sp, #28
   3b7ec:	sub	sp, sp, #4
   3b7f0:	mov	r9, r2
   3b7f4:	mov	r8, r0
   3b7f8:	ldr	r2, [r1, #4]
   3b7fc:	mov	r0, #0
   3b800:	cmp	r2, #0
   3b804:	beq	3b9c0 <__assert_fail@plt+0x28dd0>
   3b808:	mov	sl, r1
   3b80c:	ldr	r1, [r9, #4]
   3b810:	cmp	r1, #0
   3b814:	beq	3b9c0 <__assert_fail@plt+0x28dd0>
   3b818:	add	r0, r1, r2
   3b81c:	ldm	r8, {r1, r2}
   3b820:	add	r2, r2, r0
   3b824:	cmp	r2, r1
   3b828:	ble	3b84c <__assert_fail@plt+0x28c5c>
   3b82c:	add	r4, r1, r0
   3b830:	lsl	r1, r4, #2
   3b834:	ldr	r0, [r8, #8]
   3b838:	bl	2f894 <__assert_fail@plt+0x1cca4>
   3b83c:	cmp	r0, #0
   3b840:	beq	3b9c8 <__assert_fail@plt+0x28dd8>
   3b844:	str	r4, [r8]
   3b848:	str	r0, [r8, #8]
   3b84c:	ldr	r1, [r8, #4]
   3b850:	ldr	r6, [sl, #4]
   3b854:	ldr	r0, [sl, #8]
   3b858:	add	r3, r6, r1
   3b85c:	ldr	r5, [r9, #4]
   3b860:	ldr	r2, [r9, #8]
   3b864:	add	ip, r3, r5
   3b868:	sub	r7, r1, #1
   3b86c:	sub	r3, r5, #1
   3b870:	sub	r4, r6, #1
   3b874:	ldr	r1, [r2, r3, lsl #2]
   3b878:	ldr	r6, [r0, r4, lsl #2]
   3b87c:	cmp	r6, r1
   3b880:	beq	3b89c <__assert_fail@plt+0x28cac>
   3b884:	blt	3b8cc <__assert_fail@plt+0x28cdc>
   3b888:	sub	r1, r4, #1
   3b88c:	cmp	r4, #0
   3b890:	mov	r4, r1
   3b894:	bgt	3b874 <__assert_fail@plt+0x28c84>
   3b898:	b	3b91c <__assert_fail@plt+0x28d2c>
   3b89c:	cmp	r7, #0
   3b8a0:	bmi	3b8fc <__assert_fail@plt+0x28d0c>
   3b8a4:	ldr	r5, [r8, #8]
   3b8a8:	mov	r1, r7
   3b8ac:	ldr	r7, [r5, r1, lsl #2]
   3b8b0:	cmp	r7, r6
   3b8b4:	ble	3b8d8 <__assert_fail@plt+0x28ce8>
   3b8b8:	sub	r7, r1, #1
   3b8bc:	cmp	r1, #0
   3b8c0:	mov	r1, r7
   3b8c4:	bgt	3b8ac <__assert_fail@plt+0x28cbc>
   3b8c8:	b	3b8fc <__assert_fail@plt+0x28d0c>
   3b8cc:	subs	r3, r3, #1
   3b8d0:	bge	3b874 <__assert_fail@plt+0x28c84>
   3b8d4:	b	3b91c <__assert_fail@plt+0x28d2c>
   3b8d8:	ldr	r7, [r8, #8]
   3b8dc:	ldr	r7, [r7, r1, lsl #2]
   3b8e0:	cmp	r7, r6
   3b8e4:	mov	r7, r1
   3b8e8:	bne	3b8fc <__assert_fail@plt+0x28d0c>
   3b8ec:	mov	r7, r1
   3b8f0:	cmp	r4, #1
   3b8f4:	bge	3b910 <__assert_fail@plt+0x28d20>
   3b8f8:	b	3b91c <__assert_fail@plt+0x28d2c>
   3b8fc:	ldr	r1, [r8, #8]
   3b900:	sub	ip, ip, #1
   3b904:	str	r6, [r1, ip, lsl #2]
   3b908:	cmp	r4, #1
   3b90c:	blt	3b91c <__assert_fail@plt+0x28d2c>
   3b910:	subs	r3, r3, #1
   3b914:	sub	r4, r4, #1
   3b918:	bge	3b874 <__assert_fail@plt+0x28c84>
   3b91c:	ldr	r1, [sl, #4]
   3b920:	ldr	r7, [r8, #4]
   3b924:	add	r0, r7, r1
   3b928:	ldr	r3, [r9, #4]
   3b92c:	add	r0, r0, r3
   3b930:	sub	r0, r0, #1
   3b934:	sub	r6, r0, ip
   3b938:	add	r2, r6, #1
   3b93c:	add	r5, r2, r7
   3b940:	str	r5, [r8, #4]
   3b944:	cmp	r7, #1
   3b948:	blt	3b9ac <__assert_fail@plt+0x28dbc>
   3b94c:	cmp	r6, #0
   3b950:	bmi	3b9ac <__assert_fail@plt+0x28dbc>
   3b954:	add	r3, r7, r3
   3b958:	add	r1, r3, r1
   3b95c:	sub	r3, r1, ip
   3b960:	ldr	r1, [r8, #8]
   3b964:	add	r3, r1, r3, lsl #2
   3b968:	sub	r7, r7, #1
   3b96c:	ldr	r6, [r1, r7, lsl #2]
   3b970:	ldr	r5, [r1, r0, lsl #2]
   3b974:	cmp	r5, r6
   3b978:	bgt	3b994 <__assert_fail@plt+0x28da4>
   3b97c:	str	r6, [r3, r7, lsl #2]
   3b980:	sub	r6, r7, #1
   3b984:	cmp	r7, #0
   3b988:	mov	r7, r6
   3b98c:	bgt	3b96c <__assert_fail@plt+0x28d7c>
   3b990:	b	3b9ac <__assert_fail@plt+0x28dbc>
   3b994:	str	r5, [r3, r7, lsl #2]
   3b998:	sub	r3, r3, #4
   3b99c:	subs	r2, r2, #1
   3b9a0:	sub	r0, r0, #1
   3b9a4:	bne	3b96c <__assert_fail@plt+0x28d7c>
   3b9a8:	mov	r2, #0
   3b9ac:	ldr	r0, [r8, #8]
   3b9b0:	add	r1, r0, ip, lsl #2
   3b9b4:	lsl	r2, r2, #2
   3b9b8:	bl	125f0 <memcpy@plt>
   3b9bc:	mov	r0, #0
   3b9c0:	sub	sp, fp, #28
   3b9c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b9c8:	mov	r0, #12
   3b9cc:	sub	sp, fp, #28
   3b9d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b9d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b9d8:	add	fp, sp, #28
   3b9dc:	sub	sp, sp, #28
   3b9e0:	str	r3, [sp]
   3b9e4:	mov	r6, r1
   3b9e8:	str	r0, [sp, #12]
   3b9ec:	ldr	r0, [r0, #28]
   3b9f0:	mov	r4, #0
   3b9f4:	str	r4, [sp, #20]
   3b9f8:	str	r4, [sp, #16]
   3b9fc:	str	r4, [sp, #24]
   3ba00:	add	r1, r1, r1, lsl #1
   3ba04:	add	r1, r0, r1, lsl #2
   3ba08:	mov	r8, r1
   3ba0c:	ldr	r0, [r8, #4]!
   3ba10:	cmp	r0, #1
   3ba14:	blt	3bb6c <__assert_fail@plt+0x28f7c>
   3ba18:	str	r2, [sp, #4]
   3ba1c:	str	r1, [sp, #8]
   3ba20:	add	sl, r1, #8
   3ba24:	mov	r5, #0
   3ba28:	b	3ba70 <__assert_fail@plt+0x28e80>
   3ba2c:	ldr	r0, [sp, #4]
   3ba30:	mov	r1, r9
   3ba34:	bl	36678 <__assert_fail@plt+0x23a88>
   3ba38:	cmp	r0, #0
   3ba3c:	beq	3bad4 <__assert_fail@plt+0x28ee4>
   3ba40:	ldr	r0, [sp, #12]
   3ba44:	ldr	r0, [r0, #28]
   3ba48:	add	r2, r0, r7, lsl #2
   3ba4c:	add	r0, sp, #16
   3ba50:	ldr	r1, [sp]
   3ba54:	bl	3b7e4 <__assert_fail@plt+0x28bf4>
   3ba58:	cmp	r0, #0
   3ba5c:	bne	3bb80 <__assert_fail@plt+0x28f90>
   3ba60:	add	r5, r5, #1
   3ba64:	ldr	r0, [r8]
   3ba68:	cmp	r5, r0
   3ba6c:	bge	3bb08 <__assert_fail@plt+0x28f18>
   3ba70:	ldr	r0, [sl]
   3ba74:	ldr	r0, [r0, r5, lsl #2]
   3ba78:	cmp	r0, r6
   3ba7c:	beq	3ba60 <__assert_fail@plt+0x28e70>
   3ba80:	ldr	r1, [sp, #12]
   3ba84:	ldr	r1, [r1]
   3ba88:	add	r1, r1, r0, lsl #3
   3ba8c:	ldrb	r1, [r1, #4]
   3ba90:	tst	r1, #8
   3ba94:	beq	3ba60 <__assert_fail@plt+0x28e70>
   3ba98:	ldr	r1, [sp, #12]
   3ba9c:	ldr	r1, [r1, #20]
   3baa0:	add	r7, r0, r0, lsl #1
   3baa4:	add	r0, r1, r7, lsl #2
   3baa8:	ldr	r1, [r0, #4]
   3baac:	ldr	r0, [r0, #8]
   3bab0:	ldr	r9, [r0]
   3bab4:	mvn	r4, #0
   3bab8:	cmp	r1, #2
   3babc:	ldrge	r4, [r0, #4]
   3bac0:	ldr	r0, [sp, #8]
   3bac4:	mov	r1, r9
   3bac8:	bl	36678 <__assert_fail@plt+0x23a88>
   3bacc:	cmp	r0, #0
   3bad0:	beq	3ba2c <__assert_fail@plt+0x28e3c>
   3bad4:	cmp	r4, #1
   3bad8:	blt	3ba60 <__assert_fail@plt+0x28e70>
   3badc:	ldr	r0, [sp, #8]
   3bae0:	mov	r1, r4
   3bae4:	bl	36678 <__assert_fail@plt+0x23a88>
   3bae8:	cmp	r0, #0
   3baec:	bne	3ba60 <__assert_fail@plt+0x28e70>
   3baf0:	ldr	r0, [sp, #4]
   3baf4:	mov	r1, r4
   3baf8:	bl	36678 <__assert_fail@plt+0x23a88>
   3bafc:	cmp	r0, #0
   3bb00:	bne	3ba40 <__assert_fail@plt+0x28e50>
   3bb04:	b	3ba60 <__assert_fail@plt+0x28e70>
   3bb08:	cmp	r0, #1
   3bb0c:	blt	3bb68 <__assert_fail@plt+0x28f78>
   3bb10:	mov	r6, #0
   3bb14:	add	r4, sp, #16
   3bb18:	ldr	r7, [sp, #4]
   3bb1c:	b	3bb30 <__assert_fail@plt+0x28f40>
   3bb20:	add	r6, r6, #1
   3bb24:	ldr	r0, [r8]
   3bb28:	cmp	r6, r0
   3bb2c:	bge	3bb68 <__assert_fail@plt+0x28f78>
   3bb30:	ldr	r0, [sl]
   3bb34:	ldr	r5, [r0, r6, lsl #2]
   3bb38:	mov	r0, r4
   3bb3c:	mov	r1, r5
   3bb40:	bl	36678 <__assert_fail@plt+0x23a88>
   3bb44:	cmp	r0, #0
   3bb48:	bne	3bb20 <__assert_fail@plt+0x28f30>
   3bb4c:	mov	r0, r7
   3bb50:	mov	r1, r5
   3bb54:	bl	36678 <__assert_fail@plt+0x23a88>
   3bb58:	sub	r1, r0, #1
   3bb5c:	mov	r0, r7
   3bb60:	bl	36a8c <__assert_fail@plt+0x23e9c>
   3bb64:	b	3bb20 <__assert_fail@plt+0x28f30>
   3bb68:	mov	r4, #0
   3bb6c:	ldr	r0, [sp, #24]
   3bb70:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   3bb74:	mov	r0, r4
   3bb78:	sub	sp, fp, #28
   3bb7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bb80:	mov	r4, r0
   3bb84:	b	3bb6c <__assert_fail@plt+0x28f7c>
   3bb88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bb8c:	add	fp, sp, #28
   3bb90:	sub	sp, sp, #20
   3bb94:	str	r2, [sp, #12]
   3bb98:	mov	r6, r1
   3bb9c:	mov	r7, r0
   3bba0:	str	r3, [sp, #16]
   3bba4:	mov	r1, r3
   3bba8:	bl	38cf4 <__assert_fail@plt+0x26104>
   3bbac:	str	r0, [sp, #8]
   3bbb0:	ldr	r1, [fp, #12]
   3bbb4:	mov	r0, r7
   3bbb8:	bl	38cf4 <__assert_fail@plt+0x26104>
   3bbbc:	mov	r4, r0
   3bbc0:	ldr	r0, [r6, #4]
   3bbc4:	cmp	r0, #1
   3bbc8:	blt	3bc4c <__assert_fail@plt+0x2905c>
   3bbcc:	ldr	sl, [r7, #84]	; 0x54
   3bbd0:	mov	r5, #0
   3bbd4:	ldr	r0, [r6, #8]
   3bbd8:	ldr	r1, [r0, r5, lsl #2]
   3bbdc:	add	r0, r1, r1, lsl #1
   3bbe0:	ldr	r2, [r7, #116]	; 0x74
   3bbe4:	ldr	r0, [r2, r0, lsl #3]
   3bbe8:	ldr	r2, [sl]
   3bbec:	ldr	r9, [r2, r0, lsl #3]
   3bbf0:	ldr	r0, [sp, #16]
   3bbf4:	str	r0, [sp]
   3bbf8:	ldr	r0, [sp, #8]
   3bbfc:	str	r0, [sp, #4]
   3bc00:	mov	r0, r7
   3bc04:	mov	r2, r9
   3bc08:	ldr	r3, [sp, #12]
   3bc0c:	bl	3bc64 <__assert_fail@plt+0x29074>
   3bc10:	mov	r8, r0
   3bc14:	ldr	r0, [r6, #8]
   3bc18:	ldr	r1, [r0, r5, lsl #2]
   3bc1c:	ldr	r0, [fp, #12]
   3bc20:	stm	sp, {r0, r4}
   3bc24:	mov	r0, r7
   3bc28:	mov	r2, r9
   3bc2c:	ldr	r3, [fp, #8]
   3bc30:	bl	3bc64 <__assert_fail@plt+0x29074>
   3bc34:	cmp	r0, r8
   3bc38:	bne	3bc58 <__assert_fail@plt+0x29068>
   3bc3c:	add	r5, r5, #1
   3bc40:	ldr	r0, [r6, #4]
   3bc44:	cmp	r5, r0
   3bc48:	blt	3bbd4 <__assert_fail@plt+0x28fe4>
   3bc4c:	mov	r0, #0
   3bc50:	sub	sp, fp, #28
   3bc54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bc58:	mov	r0, #1
   3bc5c:	sub	sp, fp, #28
   3bc60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bc64:	push	{r4, r5, fp, lr}
   3bc68:	add	fp, sp, #8
   3bc6c:	sub	sp, sp, #8
   3bc70:	ldr	r4, [r0, #116]	; 0x74
   3bc74:	add	r1, r1, r1, lsl #1
   3bc78:	add	r4, r4, r1, lsl #3
   3bc7c:	ldr	ip, [r4, #8]
   3bc80:	mvn	r1, #0
   3bc84:	ldr	lr, [fp, #8]
   3bc88:	cmp	ip, lr
   3bc8c:	bgt	3bcdc <__assert_fail@plt+0x290ec>
   3bc90:	ldr	r4, [r4, #12]
   3bc94:	mov	r1, #1
   3bc98:	cmp	r4, lr
   3bc9c:	blt	3bcdc <__assert_fail@plt+0x290ec>
   3bca0:	sub	r1, r4, lr
   3bca4:	clz	r1, r1
   3bca8:	lsr	r4, r1, #5
   3bcac:	mov	r5, #1
   3bcb0:	lsl	r1, r4, #1
   3bcb4:	cmp	ip, lr
   3bcb8:	orreq	r1, r5, r4, lsl #1
   3bcbc:	cmp	r1, #0
   3bcc0:	beq	3bcd8 <__assert_fail@plt+0x290e8>
   3bcc4:	ldr	r5, [fp, #12]
   3bcc8:	str	r5, [sp]
   3bccc:	bl	3bce8 <__assert_fail@plt+0x290f8>
   3bcd0:	sub	sp, fp, #8
   3bcd4:	pop	{r4, r5, fp, pc}
   3bcd8:	mov	r1, #0
   3bcdc:	mov	r0, r1
   3bce0:	sub	sp, fp, #8
   3bce4:	pop	{r4, r5, fp, pc}
   3bce8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bcec:	add	fp, sp, #28
   3bcf0:	sub	sp, sp, #36	; 0x24
   3bcf4:	mov	r6, r2
   3bcf8:	mov	r5, r1
   3bcfc:	mov	r7, r0
   3bd00:	ldr	r4, [r0, #84]	; 0x54
   3bd04:	ldr	r0, [r4, #24]
   3bd08:	str	r3, [sp, #32]
   3bd0c:	add	r1, r3, r3, lsl #1
   3bd10:	add	r0, r0, r1, lsl #2
   3bd14:	mov	r2, r0
   3bd18:	ldr	r1, [r2, #4]!
   3bd1c:	str	r2, [sp, #24]
   3bd20:	cmp	r1, #1
   3bd24:	blt	3becc <__assert_fail@plt+0x292dc>
   3bd28:	mov	r1, #1
   3bd2c:	mvn	r2, r1, lsl r6
   3bd30:	str	r2, [sp, #16]
   3bd34:	lsl	r1, r1, r6
   3bd38:	str	r1, [sp, #20]
   3bd3c:	mov	sl, #0
   3bd40:	cmp	r6, #31
   3bd44:	mov	r1, #0
   3bd48:	movwgt	r1, #1
   3bd4c:	and	r2, r5, #2
   3bd50:	str	r2, [sp, #8]
   3bd54:	orr	r1, r1, r2, lsr #1
   3bd58:	str	r1, [sp, #12]
   3bd5c:	add	r0, r0, #8
   3bd60:	str	r0, [sp, #28]
   3bd64:	and	r0, r5, #1
   3bd68:	str	r0, [sp, #4]
   3bd6c:	b	3bd84 <__assert_fail@plt+0x29194>
   3bd70:	ldr	r0, [sp, #24]
   3bd74:	ldr	r0, [r0]
   3bd78:	add	sl, sl, #1
   3bd7c:	cmp	sl, r0
   3bd80:	bge	3becc <__assert_fail@plt+0x292dc>
   3bd84:	ldr	r0, [sp, #28]
   3bd88:	ldr	r0, [r0]
   3bd8c:	ldr	r8, [r0, sl, lsl #2]
   3bd90:	ldr	r0, [r4]
   3bd94:	add	r1, r0, r8, lsl #3
   3bd98:	ldrb	r1, [r1, #4]
   3bd9c:	cmp	r1, #9
   3bda0:	beq	3be8c <__assert_fail@plt+0x2929c>
   3bda4:	cmp	r1, #8
   3bda8:	beq	3bea8 <__assert_fail@plt+0x292b8>
   3bdac:	cmp	r1, #4
   3bdb0:	bne	3bd70 <__assert_fail@plt+0x29180>
   3bdb4:	ldr	r0, [fp, #8]
   3bdb8:	cmn	r0, #1
   3bdbc:	beq	3bd70 <__assert_fail@plt+0x29180>
   3bdc0:	ldr	r0, [r7, #116]	; 0x74
   3bdc4:	ldr	r1, [fp, #8]
   3bdc8:	add	r1, r1, r1, lsl #1
   3bdcc:	add	r0, r0, r1, lsl #3
   3bdd0:	add	r9, r0, #16
   3bdd4:	b	3bdf8 <__assert_fail@plt+0x29208>
   3bdd8:	ldr	r0, [r9]
   3bddc:	ldr	r1, [sp, #16]
   3bde0:	and	r0, r0, r1
   3bde4:	str	r0, [r9]
   3bde8:	ldrb	r0, [r9, #4]
   3bdec:	add	r9, r9, #24
   3bdf0:	cmp	r0, #0
   3bdf4:	beq	3bd70 <__assert_fail@plt+0x29180>
   3bdf8:	ldr	r0, [r9, #-16]
   3bdfc:	cmp	r0, r8
   3be00:	bne	3bde8 <__assert_fail@plt+0x291f8>
   3be04:	cmp	r6, #31
   3be08:	bgt	3be1c <__assert_fail@plt+0x2922c>
   3be0c:	ldr	r0, [r9]
   3be10:	ldr	r1, [sp, #20]
   3be14:	tst	r0, r1
   3be18:	beq	3bde8 <__assert_fail@plt+0x291f8>
   3be1c:	ldr	r0, [r4, #20]
   3be20:	add	r1, r8, r8, lsl #1
   3be24:	add	r0, r0, r1, lsl #2
   3be28:	ldr	r0, [r0, #8]
   3be2c:	ldr	r3, [r0]
   3be30:	ldr	r0, [sp, #32]
   3be34:	cmp	r3, r0
   3be38:	beq	3bed8 <__assert_fail@plt+0x292e8>
   3be3c:	ldr	r0, [fp, #8]
   3be40:	str	r0, [sp]
   3be44:	mov	r0, r7
   3be48:	mov	r1, r5
   3be4c:	mov	r2, r6
   3be50:	bl	3bce8 <__assert_fail@plt+0x290f8>
   3be54:	cmp	r0, #0
   3be58:	beq	3be70 <__assert_fail@plt+0x29280>
   3be5c:	cmn	r0, #1
   3be60:	beq	3beec <__assert_fail@plt+0x292fc>
   3be64:	cmp	r6, #31
   3be68:	ble	3bdd8 <__assert_fail@plt+0x291e8>
   3be6c:	b	3bde8 <__assert_fail@plt+0x291f8>
   3be70:	ldr	r0, [sp, #12]
   3be74:	cmp	r0, #0
   3be78:	beq	3bdd8 <__assert_fail@plt+0x291e8>
   3be7c:	ldr	r0, [sp, #8]
   3be80:	cmp	r0, #0
   3be84:	beq	3bde8 <__assert_fail@plt+0x291f8>
   3be88:	b	3bee8 <__assert_fail@plt+0x292f8>
   3be8c:	ldr	r1, [sp, #8]
   3be90:	cmp	r1, #0
   3be94:	beq	3bd70 <__assert_fail@plt+0x29180>
   3be98:	ldr	r0, [r0, r8, lsl #3]
   3be9c:	cmp	r0, r6
   3bea0:	bne	3bd70 <__assert_fail@plt+0x29180>
   3bea4:	b	3bee8 <__assert_fail@plt+0x292f8>
   3bea8:	ldr	r1, [sp, #4]
   3beac:	cmp	r1, #0
   3beb0:	beq	3bd70 <__assert_fail@plt+0x29180>
   3beb4:	ldr	r0, [r0, r8, lsl #3]
   3beb8:	cmp	r0, r6
   3bebc:	bne	3bd70 <__assert_fail@plt+0x29180>
   3bec0:	mvn	r0, #0
   3bec4:	sub	sp, fp, #28
   3bec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3becc:	ubfx	r0, r5, #1, #1
   3bed0:	sub	sp, fp, #28
   3bed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bed8:	ldr	r0, [sp, #4]
   3bedc:	rsb	r0, r0, #0
   3bee0:	sub	sp, fp, #28
   3bee4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bee8:	mov	r0, #0
   3beec:	sub	sp, fp, #28
   3bef0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bef4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3bef8:	add	fp, sp, #24
   3befc:	mov	r7, r3
   3bf00:	mov	r5, r2
   3bf04:	mov	r8, r1
   3bf08:	mov	r2, r0
   3bf0c:	ldr	r6, [r0, #84]	; 0x54
   3bf10:	mov	r0, r6
   3bf14:	mov	r1, r5
   3bf18:	bl	39cd4 <__assert_fail@plt+0x270e4>
   3bf1c:	mov	r4, r0
   3bf20:	cmp	r0, #1
   3bf24:	blt	3bf60 <__assert_fail@plt+0x29370>
   3bf28:	ldr	r1, [fp, #8]
   3bf2c:	add	r0, r4, r7
   3bf30:	cmp	r0, r1
   3bf34:	bgt	3bf60 <__assert_fail@plt+0x29370>
   3bf38:	ldr	r1, [r8]
   3bf3c:	ldr	r0, [r1, r0, lsl #2]
   3bf40:	cmp	r0, #0
   3bf44:	beq	3bf68 <__assert_fail@plt+0x29378>
   3bf48:	ldr	r1, [r6, #12]
   3bf4c:	ldr	r1, [r1, r5, lsl #2]
   3bf50:	add	r0, r0, #4
   3bf54:	bl	36678 <__assert_fail@plt+0x23a88>
   3bf58:	cmp	r0, #0
   3bf5c:	moveq	r4, #0
   3bf60:	mov	r0, r4
   3bf64:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3bf68:	mov	r4, #0
   3bf6c:	mov	r0, r4
   3bf70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3bf74:	mov	r1, #16
   3bf78:	mov	r2, #0
   3bf7c:	add	r3, r0, #12
   3bf80:	str	r2, [r0]
   3bf84:	stmib	r0, {r1, r3}
   3bf88:	bx	lr
   3bf8c:	push	{r4, sl, fp, lr}
   3bf90:	add	fp, sp, #8
   3bf94:	mov	r4, r0
   3bf98:	ldr	r0, [r0]
   3bf9c:	cmp	r0, r1
   3bfa0:	bcs	3bfd4 <__assert_fail@plt+0x293e4>
   3bfa4:	add	r2, r4, #12
   3bfa8:	mov	r0, r4
   3bfac:	mov	r3, #8
   3bfb0:	bl	3ddac <__assert_fail@plt+0x2b1bc>
   3bfb4:	mov	r1, r0
   3bfb8:	mov	r0, #1
   3bfbc:	cmp	r1, #0
   3bfc0:	popne	{r4, sl, fp, pc}
   3bfc4:	mov	r0, r4
   3bfc8:	bl	3c4e4 <__assert_fail@plt+0x298f4>
   3bfcc:	mov	r0, #0
   3bfd0:	pop	{r4, sl, fp, pc}
   3bfd4:	str	r1, [r4]
   3bfd8:	mov	r0, #1
   3bfdc:	pop	{r4, sl, fp, pc}
   3bfe0:	push	{r4, sl, fp, lr}
   3bfe4:	add	fp, sp, #8
   3bfe8:	mov	r4, r0
   3bfec:	bl	3c50c <__assert_fail@plt+0x2991c>
   3bff0:	mov	r0, r4
   3bff4:	pop	{r4, sl, fp, lr}
   3bff8:	b	3bf74 <__assert_fail@plt+0x29384>
   3bffc:	cmp	r0, #0
   3c000:	bxeq	lr
   3c004:	push	{r4, r5, r6, sl, fp, lr}
   3c008:	add	fp, sp, #16
   3c00c:	mov	r4, r0
   3c010:	ldr	r1, [r0]
   3c014:	ldr	r0, [r0, #8]
   3c018:	cmp	r1, #1
   3c01c:	blt	3c05c <__assert_fail@plt+0x2946c>
   3c020:	mov	r5, #0
   3c024:	mov	r6, #0
   3c028:	add	r0, r0, r5
   3c02c:	ldr	r0, [r0, #20]
   3c030:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   3c034:	ldr	r0, [r4, #8]
   3c038:	add	r0, r0, r5
   3c03c:	ldr	r0, [r0, #8]
   3c040:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   3c044:	add	r5, r5, #24
   3c048:	add	r6, r6, #1
   3c04c:	ldr	r1, [r4]
   3c050:	ldr	r0, [r4, #8]
   3c054:	cmp	r6, r1
   3c058:	blt	3c028 <__assert_fail@plt+0x29438>
   3c05c:	pop	{r4, r5, r6, sl, fp, lr}
   3c060:	b	2cad4 <__assert_fail@plt+0x19ee4>
   3c064:	ldr	r0, [r0, #8]
   3c068:	bx	lr
   3c06c:	push	{r4, r5, fp, lr}
   3c070:	add	fp, sp, #8
   3c074:	ldr	r4, [r0]
   3c078:	add	r0, r4, r3, lsl #3
   3c07c:	ldr	r0, [r0, #4]
   3c080:	uxtb	r5, r0
   3c084:	ldr	lr, [fp, #12]
   3c088:	ldr	ip, [fp, #8]
   3c08c:	cmp	r5, #9
   3c090:	beq	3c0bc <__assert_fail@plt+0x294cc>
   3c094:	cmp	r5, #8
   3c098:	bne	3c120 <__assert_fail@plt+0x29530>
   3c09c:	ldr	r0, [r4, r3, lsl #3]
   3c0a0:	add	r0, r0, #1
   3c0a4:	cmp	r0, lr
   3c0a8:	bge	3c120 <__assert_fail@plt+0x29530>
   3c0ac:	str	ip, [r1, r0, lsl #3]!
   3c0b0:	mvn	r0, #0
   3c0b4:	str	r0, [r1, #4]
   3c0b8:	pop	{r4, r5, fp, pc}
   3c0bc:	ldr	r3, [r4, r3, lsl #3]
   3c0c0:	add	r3, r3, #1
   3c0c4:	cmp	r3, lr
   3c0c8:	popge	{r4, r5, fp, pc}
   3c0cc:	ldr	r4, [r1, r3, lsl #3]
   3c0d0:	cmp	r4, ip
   3c0d4:	bge	3c0ec <__assert_fail@plt+0x294fc>
   3c0d8:	add	r0, r1, r3, lsl #3
   3c0dc:	str	ip, [r0, #4]
   3c0e0:	lsl	r3, lr, #3
   3c0e4:	mov	r0, r2
   3c0e8:	b	3c10c <__assert_fail@plt+0x2951c>
   3c0ec:	tst	r0, #524288	; 0x80000
   3c0f0:	beq	3c118 <__assert_fail@plt+0x29528>
   3c0f4:	ldr	r0, [r2, r3, lsl #3]
   3c0f8:	cmn	r0, #1
   3c0fc:	beq	3c118 <__assert_fail@plt+0x29528>
   3c100:	lsl	r3, lr, #3
   3c104:	mov	r0, r1
   3c108:	mov	r1, r2
   3c10c:	mov	r2, r3
   3c110:	pop	{r4, r5, fp, lr}
   3c114:	b	125f0 <memcpy@plt>
   3c118:	add	r0, r1, r3, lsl #3
   3c11c:	str	ip, [r0, #4]
   3c120:	pop	{r4, r5, fp, pc}
   3c124:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3c128:	add	fp, sp, #24
   3c12c:	mov	r4, r0
   3c130:	mvn	r0, #0
   3c134:	cmp	r4, #0
   3c138:	beq	3c1d8 <__assert_fail@plt+0x295e8>
   3c13c:	mov	r5, r2
   3c140:	ldr	r2, [r4]
   3c144:	cmp	r2, #0
   3c148:	beq	3c1d8 <__assert_fail@plt+0x295e8>
   3c14c:	ldr	r9, [fp, #12]
   3c150:	ldr	r8, [fp, #8]
   3c154:	sub	r0, r2, #1
   3c158:	str	r0, [r4]
   3c15c:	ldr	r2, [r4, #8]
   3c160:	add	r6, r0, r0, lsl #1
   3c164:	ldr	r0, [r2, r6, lsl #3]!
   3c168:	str	r0, [r1]
   3c16c:	ldr	r1, [r2, #8]
   3c170:	lsl	r7, r5, #3
   3c174:	mov	r0, r3
   3c178:	mov	r2, r7
   3c17c:	bl	125f0 <memcpy@plt>
   3c180:	ldr	r0, [r4, #8]
   3c184:	add	r0, r0, r6, lsl #3
   3c188:	ldr	r0, [r0, #8]
   3c18c:	add	r1, r0, r5, lsl #3
   3c190:	mov	r0, r8
   3c194:	mov	r2, r7
   3c198:	bl	125f0 <memcpy@plt>
   3c19c:	ldr	r0, [r9, #8]
   3c1a0:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   3c1a4:	ldr	r0, [r4, #8]
   3c1a8:	add	r0, r0, r6, lsl #3
   3c1ac:	ldr	r0, [r0, #8]
   3c1b0:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   3c1b4:	ldr	r0, [r4, #8]
   3c1b8:	add	r0, r0, r6, lsl #3
   3c1bc:	vldr	d16, [r0, #12]
   3c1c0:	ldr	r0, [r0, #20]
   3c1c4:	str	r0, [r9, #8]
   3c1c8:	vstr	d16, [r9]
   3c1cc:	ldr	r0, [r4, #8]
   3c1d0:	add	r0, r0, r6, lsl #3
   3c1d4:	ldr	r0, [r0, #4]
   3c1d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3c1dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c1e0:	add	fp, sp, #28
   3c1e4:	sub	sp, sp, #20
   3c1e8:	mov	r9, r3
   3c1ec:	mov	r5, r0
   3c1f0:	ldr	r4, [r0, #84]	; 0x54
   3c1f4:	ldr	r3, [r4]
   3c1f8:	ldr	sl, [fp, #12]
   3c1fc:	add	r0, r3, sl, lsl #3
   3c200:	ldr	r7, [r0, #4]
   3c204:	ldr	r0, [fp, #16]
   3c208:	ldr	r6, [fp, #8]
   3c20c:	tst	r7, #8
   3c210:	bne	3c2d0 <__assert_fail@plt+0x296e0>
   3c214:	tst	r7, #1048576	; 0x100000
   3c218:	bne	3c3c4 <__assert_fail@plt+0x297d4>
   3c21c:	mov	ip, r1
   3c220:	mov	r9, r6
   3c224:	uxtb	r1, r7
   3c228:	cmp	r1, #4
   3c22c:	bne	3c3e8 <__assert_fail@plt+0x297f8>
   3c230:	ldr	r0, [r3, sl, lsl #3]
   3c234:	add	r0, r0, #1
   3c238:	mov	r7, #0
   3c23c:	mov	r6, ip
   3c240:	cmp	r0, ip
   3c244:	mov	r3, r2
   3c248:	bge	3c25c <__assert_fail@plt+0x2966c>
   3c24c:	mov	r1, r3
   3c250:	ldr	r2, [r1, r0, lsl #3]!
   3c254:	ldr	r1, [r1, #4]
   3c258:	sub	r7, r1, r2
   3c25c:	ldr	r1, [fp, #20]
   3c260:	cmp	r1, #0
   3c264:	beq	3c418 <__assert_fail@plt+0x29828>
   3c268:	mvn	r8, #0
   3c26c:	cmp	r0, r6
   3c270:	bge	3c484 <__assert_fail@plt+0x29894>
   3c274:	ldr	r1, [r3, r0, lsl #3]
   3c278:	cmn	r1, #1
   3c27c:	beq	3c484 <__assert_fail@plt+0x29894>
   3c280:	add	r0, r3, r0, lsl #3
   3c284:	ldr	r0, [r0, #4]
   3c288:	cmn	r0, #1
   3c28c:	beq	3c484 <__assert_fail@plt+0x29894>
   3c290:	cmp	r7, #0
   3c294:	beq	3c490 <__assert_fail@plt+0x298a0>
   3c298:	mov	r0, r9
   3c29c:	ldr	r2, [r9]
   3c2a0:	ldr	r0, [r5, #28]
   3c2a4:	sub	r0, r0, r2
   3c2a8:	cmp	r0, r7
   3c2ac:	blt	3c484 <__assert_fail@plt+0x29894>
   3c2b0:	ldr	r3, [r5, #4]
   3c2b4:	add	r0, r3, r1
   3c2b8:	add	r1, r3, r2
   3c2bc:	mov	r2, r7
   3c2c0:	bl	128a8 <bcmp@plt>
   3c2c4:	cmp	r0, #0
   3c2c8:	bne	3c484 <__assert_fail@plt+0x29894>
   3c2cc:	b	3c420 <__assert_fail@plt+0x29830>
   3c2d0:	str	r1, [sp, #12]
   3c2d4:	str	r2, [sp, #16]
   3c2d8:	ldr	r2, [r6]
   3c2dc:	ldr	r1, [r5, #100]	; 0x64
   3c2e0:	ldr	r5, [r1, r2, lsl #2]
   3c2e4:	ldr	r4, [r4, #20]
   3c2e8:	mov	r1, sl
   3c2ec:	bl	36678 <__assert_fail@plt+0x23a88>
   3c2f0:	cmp	r0, #0
   3c2f4:	bne	3c310 <__assert_fail@plt+0x29720>
   3c2f8:	ldr	r0, [fp, #16]
   3c2fc:	mov	r1, sl
   3c300:	bl	36410 <__assert_fail@plt+0x23820>
   3c304:	mvn	r8, #1
   3c308:	cmp	r0, #0
   3c30c:	beq	3c484 <__assert_fail@plt+0x29894>
   3c310:	add	r0, sl, sl, lsl #1
   3c314:	add	r1, r4, r0, lsl #2
   3c318:	mov	r0, r1
   3c31c:	ldr	r2, [r0, #4]!
   3c320:	cmp	r2, #1
   3c324:	blt	3c410 <__assert_fail@plt+0x29820>
   3c328:	add	sl, r5, #4
   3c32c:	ldr	r7, [r1, #8]
   3c330:	ldr	r6, [r0]
   3c334:	mov	r5, #0
   3c338:	mvn	r8, #0
   3c33c:	b	3c350 <__assert_fail@plt+0x29760>
   3c340:	mov	r8, r4
   3c344:	add	r5, r5, #1
   3c348:	cmp	r5, r6
   3c34c:	bge	3c484 <__assert_fail@plt+0x29894>
   3c350:	ldr	r4, [r7, r5, lsl #2]
   3c354:	mov	r0, sl
   3c358:	mov	r1, r4
   3c35c:	bl	36678 <__assert_fail@plt+0x23a88>
   3c360:	cmp	r0, #0
   3c364:	beq	3c344 <__assert_fail@plt+0x29754>
   3c368:	cmn	r8, #1
   3c36c:	beq	3c340 <__assert_fail@plt+0x29750>
   3c370:	ldr	r5, [fp, #16]
   3c374:	mov	r0, r5
   3c378:	mov	r1, r8
   3c37c:	bl	36678 <__assert_fail@plt+0x23a88>
   3c380:	cmp	r0, #0
   3c384:	bne	3c480 <__assert_fail@plt+0x29890>
   3c388:	ldr	r0, [fp, #20]
   3c38c:	cmp	r0, #0
   3c390:	beq	3c484 <__assert_fail@plt+0x29894>
   3c394:	ldr	r1, [fp, #8]
   3c398:	ldr	r1, [r1]
   3c39c:	ldr	r2, [sp, #16]
   3c3a0:	stm	sp, {r2, r9}
   3c3a4:	str	r5, [sp, #8]
   3c3a8:	mov	r2, r4
   3c3ac:	ldr	r3, [sp, #12]
   3c3b0:	bl	3c524 <__assert_fail@plt+0x29934>
   3c3b4:	mvn	r4, #1
   3c3b8:	cmp	r0, #0
   3c3bc:	movne	r8, r4
   3c3c0:	b	3c484 <__assert_fail@plt+0x29894>
   3c3c4:	mov	r9, r6
   3c3c8:	ldr	r3, [r6]
   3c3cc:	mov	r0, r4
   3c3d0:	mov	r1, sl
   3c3d4:	mov	r2, r5
   3c3d8:	bl	39cd4 <__assert_fail@plt+0x270e4>
   3c3dc:	mov	r7, r0
   3c3e0:	cmp	r0, #0
   3c3e4:	bne	3c420 <__assert_fail@plt+0x29830>
   3c3e8:	ldr	r0, [r4]
   3c3ec:	add	r1, r0, sl, lsl #3
   3c3f0:	ldr	r2, [r9]
   3c3f4:	mov	r0, r5
   3c3f8:	bl	39fb0 <__assert_fail@plt+0x273c0>
   3c3fc:	mvn	r8, #0
   3c400:	mov	r7, #1
   3c404:	cmp	r0, #0
   3c408:	bne	3c420 <__assert_fail@plt+0x29830>
   3c40c:	b	3c484 <__assert_fail@plt+0x29894>
   3c410:	mvn	r8, #0
   3c414:	b	3c484 <__assert_fail@plt+0x29894>
   3c418:	cmp	r7, #0
   3c41c:	beq	3c490 <__assert_fail@plt+0x298a0>
   3c420:	ldr	r0, [r4, #12]
   3c424:	ldr	r4, [r0, sl, lsl #2]
   3c428:	ldr	r0, [r9]
   3c42c:	add	r0, r0, r7
   3c430:	str	r0, [r9]
   3c434:	ldr	r1, [fp, #20]
   3c438:	cmp	r1, #0
   3c43c:	beq	3c474 <__assert_fail@plt+0x29884>
   3c440:	ldr	r1, [r5, #92]	; 0x5c
   3c444:	mvn	r8, #0
   3c448:	cmp	r0, r1
   3c44c:	bgt	3c484 <__assert_fail@plt+0x29894>
   3c450:	ldr	r1, [r5, #100]	; 0x64
   3c454:	ldr	r0, [r1, r0, lsl #2]
   3c458:	cmp	r0, #0
   3c45c:	beq	3c484 <__assert_fail@plt+0x29894>
   3c460:	add	r0, r0, #4
   3c464:	mov	r1, r4
   3c468:	bl	36678 <__assert_fail@plt+0x23a88>
   3c46c:	cmp	r0, #0
   3c470:	beq	3c484 <__assert_fail@plt+0x29894>
   3c474:	mov	r0, #0
   3c478:	ldr	r1, [fp, #16]
   3c47c:	str	r0, [r1, #4]
   3c480:	mov	r8, r4
   3c484:	mov	r0, r8
   3c488:	sub	sp, fp, #28
   3c48c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c490:	ldr	r0, [fp, #16]
   3c494:	mov	r1, sl
   3c498:	bl	36410 <__assert_fail@plt+0x23820>
   3c49c:	cmp	r0, #0
   3c4a0:	beq	3c4dc <__assert_fail@plt+0x298ec>
   3c4a4:	ldr	r0, [r4, #20]
   3c4a8:	add	r1, sl, sl, lsl #1
   3c4ac:	add	r0, r0, r1, lsl #2
   3c4b0:	ldr	r0, [r0, #8]
   3c4b4:	ldr	r8, [r0]
   3c4b8:	ldr	r0, [r9]
   3c4bc:	ldr	r1, [r5, #100]	; 0x64
   3c4c0:	ldr	r0, [r1, r0, lsl #2]
   3c4c4:	add	r0, r0, #4
   3c4c8:	mov	r1, r8
   3c4cc:	bl	36678 <__assert_fail@plt+0x23a88>
   3c4d0:	cmp	r0, #0
   3c4d4:	bne	3c484 <__assert_fail@plt+0x29894>
   3c4d8:	b	3c3e8 <__assert_fail@plt+0x297f8>
   3c4dc:	mvn	r8, #1
   3c4e0:	b	3c484 <__assert_fail@plt+0x29894>
   3c4e4:	push	{r4, sl, fp, lr}
   3c4e8:	add	fp, sp, #8
   3c4ec:	mov	r4, r0
   3c4f0:	bl	3c50c <__assert_fail@plt+0x2991c>
   3c4f4:	mvn	r0, #0
   3c4f8:	mov	r1, #0
   3c4fc:	add	r2, r4, #12
   3c500:	str	r1, [r4]
   3c504:	stmib	r4, {r0, r2}
   3c508:	pop	{r4, sl, fp, pc}
   3c50c:	mov	r1, r0
   3c510:	ldr	r0, [r0, #8]
   3c514:	add	r1, r1, #12
   3c518:	cmp	r0, r1
   3c51c:	bxeq	lr
   3c520:	b	2cad4 <__assert_fail@plt+0x19ee4>
   3c524:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c528:	add	fp, sp, #28
   3c52c:	sub	sp, sp, #12
   3c530:	mov	r6, r3
   3c534:	mov	r9, r2
   3c538:	mov	r5, r1
   3c53c:	mov	r4, r0
   3c540:	ldr	r7, [r0]
   3c544:	ldr	r1, [r0, #4]
   3c548:	add	r0, r7, #1
   3c54c:	str	r0, [r4]
   3c550:	ldr	r2, [fp, #16]
   3c554:	str	r2, [sp, #8]
   3c558:	ldr	r2, [fp, #12]
   3c55c:	str	r2, [sp, #4]
   3c560:	ldr	sl, [fp, #8]
   3c564:	cmp	r0, r1
   3c568:	bne	3c594 <__assert_fail@plt+0x299a4>
   3c56c:	ldr	r0, [r4, #8]
   3c570:	add	r1, r1, r1, lsl #1
   3c574:	lsl	r1, r1, #4
   3c578:	bl	2f894 <__assert_fail@plt+0x1cca4>
   3c57c:	cmp	r0, #0
   3c580:	beq	3c608 <__assert_fail@plt+0x29a18>
   3c584:	str	r0, [r4, #8]
   3c588:	ldr	r0, [r4, #4]
   3c58c:	lsl	r0, r0, #1
   3c590:	str	r0, [r4, #4]
   3c594:	ldr	r0, [r4, #8]
   3c598:	add	r8, r7, r7, lsl #1
   3c59c:	str	r5, [r0, r8, lsl #3]!
   3c5a0:	str	r9, [r0, #4]
   3c5a4:	lsl	r0, r6, #4
   3c5a8:	bl	2ed88 <__assert_fail@plt+0x1c198>
   3c5ac:	ldr	r1, [r4, #8]
   3c5b0:	add	r1, r1, r8, lsl #3
   3c5b4:	str	r0, [r1, #8]
   3c5b8:	cmp	r0, #0
   3c5bc:	beq	3c608 <__assert_fail@plt+0x29a18>
   3c5c0:	lsl	r5, r6, #3
   3c5c4:	mov	r1, sl
   3c5c8:	mov	r2, r5
   3c5cc:	bl	125f0 <memcpy@plt>
   3c5d0:	ldr	r0, [r4, #8]
   3c5d4:	add	r0, r0, r8, lsl #3
   3c5d8:	ldr	r0, [r0, #8]
   3c5dc:	add	r0, r0, r6, lsl #3
   3c5e0:	ldr	r1, [sp, #4]
   3c5e4:	mov	r2, r5
   3c5e8:	bl	125f0 <memcpy@plt>
   3c5ec:	ldr	r0, [r4, #8]
   3c5f0:	add	r0, r0, r8, lsl #3
   3c5f4:	add	r0, r0, #12
   3c5f8:	ldr	r1, [sp, #8]
   3c5fc:	sub	sp, fp, #28
   3c600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c604:	b	365fc <__assert_fail@plt+0x23a0c>
   3c608:	mov	r0, #12
   3c60c:	sub	sp, fp, #28
   3c610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c614:	push	{r4, r5, r6, sl, fp, lr}
   3c618:	add	fp, sp, #16
   3c61c:	mov	r4, r0
   3c620:	ldrb	r3, [r0]
   3c624:	cmp	r3, #0
   3c628:	beq	3c6a4 <__assert_fail@plt+0x29ab4>
   3c62c:	mov	r2, #1
   3c630:	mov	r0, #0
   3c634:	ldrb	r6, [r1, r0]
   3c638:	cmp	r6, #0
   3c63c:	uxtbne	r3, r3
   3c640:	subne	r3, r3, r6
   3c644:	clzne	r3, r3
   3c648:	lsrne	r3, r3, #5
   3c64c:	andne	r2, r2, r3
   3c650:	addne	r3, r4, r0
   3c654:	ldrbne	r3, [r3, #1]
   3c658:	addne	r0, r0, #1
   3c65c:	cmpne	r3, #0
   3c660:	bne	3c634 <__assert_fail@plt+0x29a44>
   3c664:	add	r6, r1, r0
   3c668:	ldrb	r3, [r6]
   3c66c:	cmp	r3, #0
   3c670:	mov	r0, r4
   3c674:	movwne	r0, #0
   3c678:	tst	r2, #1
   3c67c:	cmpeq	r3, #0
   3c680:	bne	3c6a0 <__assert_fail@plt+0x29ab0>
   3c684:	sub	r5, r6, r1
   3c688:	ldrb	r1, [r1]
   3c68c:	add	r0, r4, #1
   3c690:	bl	128cc <strchr@plt>
   3c694:	cmp	r5, #1
   3c698:	cmpne	r0, #0
   3c69c:	bne	3c6b8 <__assert_fail@plt+0x29ac8>
   3c6a0:	pop	{r4, r5, r6, sl, fp, pc}
   3c6a4:	ldrb	r0, [r1]
   3c6a8:	cmp	r0, #0
   3c6ac:	movne	r4, #0
   3c6b0:	mov	r0, r4
   3c6b4:	pop	{r4, r5, r6, sl, fp, pc}
   3c6b8:	add	r1, r4, r5
   3c6bc:	subs	r1, r1, r0
   3c6c0:	movwcc	r1, #1
   3c6c4:	sub	r2, r6, r5
   3c6c8:	mov	r3, r5
   3c6cc:	cmp	r5, #31
   3c6d0:	bhi	3c6dc <__assert_fail@plt+0x29aec>
   3c6d4:	pop	{r4, r5, r6, sl, fp, lr}
   3c6d8:	b	3c6e4 <__assert_fail@plt+0x29af4>
   3c6dc:	pop	{r4, r5, r6, sl, fp, lr}
   3c6e0:	b	3c980 <__assert_fail@plt+0x29d90>
   3c6e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c6e8:	add	fp, sp, #28
   3c6ec:	sub	sp, sp, #28
   3c6f0:	mov	r4, r3
   3c6f4:	mov	r7, r2
   3c6f8:	mov	r8, r1
   3c6fc:	mov	r6, r0
   3c700:	add	r2, sp, #24
   3c704:	mov	r0, r7
   3c708:	mov	r1, r3
   3c70c:	bl	3ccc8 <__assert_fail@plt+0x2a0d8>
   3c710:	mov	r5, r0
   3c714:	ldr	r9, [sp, #24]
   3c718:	add	r1, r7, r9
   3c71c:	mov	r0, r7
   3c720:	mov	r2, r5
   3c724:	bl	128a8 <bcmp@plt>
   3c728:	cmp	r0, #0
   3c72c:	str	r6, [sp, #16]
   3c730:	str	r5, [sp, #20]
   3c734:	beq	3c840 <__assert_fail@plt+0x29c50>
   3c738:	sub	sl, r4, r5
   3c73c:	cmp	r5, sl
   3c740:	movcc	r5, sl
   3c744:	add	r0, r5, #1
   3c748:	str	r0, [sp, #12]
   3c74c:	str	r0, [sp, #24]
   3c750:	add	r0, r6, r8
   3c754:	sub	r2, r4, r8
   3c758:	mov	r5, #0
   3c75c:	mov	r1, #0
   3c760:	bl	129b0 <memchr@plt>
   3c764:	cmp	r0, #0
   3c768:	bne	3c974 <__assert_fail@plt+0x29d84>
   3c76c:	cmp	r4, #0
   3c770:	beq	3c974 <__assert_fail@plt+0x29d84>
   3c774:	ldr	r0, [sp, #16]
   3c778:	ldr	r1, [sp, #20]
   3c77c:	add	r2, r0, r1
   3c780:	str	r2, [sp, #4]
   3c784:	add	r8, r7, r1
   3c788:	sub	r7, r7, #1
   3c78c:	sub	r0, r0, #1
   3c790:	str	r0, [sp, #8]
   3c794:	mov	r9, #0
   3c798:	mov	r1, r4
   3c79c:	mov	r5, #0
   3c7a0:	ldr	r0, [sp, #20]
   3c7a4:	cmp	r0, r4
   3c7a8:	bcs	3c7d4 <__assert_fail@plt+0x29be4>
   3c7ac:	ldr	r0, [sp, #4]
   3c7b0:	add	r2, r0, r9
   3c7b4:	mov	r0, #0
   3c7b8:	ldrb	r3, [r2, r0]
   3c7bc:	ldrb	r6, [r8, r0]
   3c7c0:	cmp	r6, r3
   3c7c4:	bne	3c808 <__assert_fail@plt+0x29c18>
   3c7c8:	add	r0, r0, #1
   3c7cc:	cmp	sl, r0
   3c7d0:	bne	3c7b8 <__assert_fail@plt+0x29bc8>
   3c7d4:	ldr	r0, [sp, #8]
   3c7d8:	add	r0, r0, r9
   3c7dc:	ldr	r2, [sp, #20]
   3c7e0:	cmp	r2, #0
   3c7e4:	beq	3c964 <__assert_fail@plt+0x29d74>
   3c7e8:	sub	r3, r2, #1
   3c7ec:	ldrb	r6, [r0, r2]
   3c7f0:	ldrb	r2, [r7, r2]
   3c7f4:	cmp	r2, r6
   3c7f8:	mov	r2, r3
   3c7fc:	beq	3c7e0 <__assert_fail@plt+0x29bf0>
   3c800:	ldr	r2, [sp, #12]
   3c804:	b	3c80c <__assert_fail@plt+0x29c1c>
   3c808:	add	r2, r0, #1
   3c80c:	ldr	r0, [sp, #16]
   3c810:	add	r0, r0, r1
   3c814:	add	r9, r2, r9
   3c818:	add	r6, r9, r4
   3c81c:	sub	r2, r6, r1
   3c820:	mov	r1, #0
   3c824:	bl	129b0 <memchr@plt>
   3c828:	cmp	r0, #0
   3c82c:	bne	3c974 <__assert_fail@plt+0x29d84>
   3c830:	cmp	r6, #0
   3c834:	mov	r1, r6
   3c838:	bne	3c7a0 <__assert_fail@plt+0x29bb0>
   3c83c:	b	3c974 <__assert_fail@plt+0x29d84>
   3c840:	add	r0, r6, r8
   3c844:	sub	r2, r4, r8
   3c848:	mov	r5, #0
   3c84c:	mov	r1, #0
   3c850:	bl	129b0 <memchr@plt>
   3c854:	cmp	r4, #0
   3c858:	beq	3c974 <__assert_fail@plt+0x29d84>
   3c85c:	str	r9, [sp, #12]
   3c860:	cmp	r0, #0
   3c864:	bne	3c974 <__assert_fail@plt+0x29d84>
   3c868:	ldr	r0, [sp, #12]
   3c86c:	sub	r0, r4, r0
   3c870:	str	r0, [sp, #8]
   3c874:	sub	r6, r7, #1
   3c878:	ldr	r0, [sp, #16]
   3c87c:	sub	r0, r0, #1
   3c880:	str	r0, [sp, #4]
   3c884:	ldr	r0, [sp, #20]
   3c888:	rsb	r0, r0, #1
   3c88c:	str	r0, [sp]
   3c890:	mov	r8, #0
   3c894:	mov	lr, r4
   3c898:	mov	r9, #0
   3c89c:	ldr	r1, [sp, #20]
   3c8a0:	cmp	r1, r8
   3c8a4:	mov	r0, r1
   3c8a8:	movcc	r0, r8
   3c8ac:	cmp	r0, r4
   3c8b0:	ldr	sl, [sp, #16]
   3c8b4:	bcs	3c8d8 <__assert_fail@plt+0x29ce8>
   3c8b8:	add	r2, sl, r9
   3c8bc:	ldrb	r3, [r2, r0]
   3c8c0:	ldrb	r5, [r7, r0]
   3c8c4:	cmp	r5, r3
   3c8c8:	bne	3c924 <__assert_fail@plt+0x29d34>
   3c8cc:	add	r0, r0, #1
   3c8d0:	cmp	r0, r4
   3c8d4:	bcc	3c8bc <__assert_fail@plt+0x29ccc>
   3c8d8:	mov	ip, r4
   3c8dc:	ldr	r0, [sp, #4]
   3c8e0:	add	r0, r0, r9
   3c8e4:	mov	r3, r1
   3c8e8:	mov	r2, r3
   3c8ec:	cmp	r8, r3
   3c8f0:	bcs	3c908 <__assert_fail@plt+0x29d18>
   3c8f4:	sub	r3, r2, #1
   3c8f8:	ldrb	r5, [r0, r2]
   3c8fc:	ldrb	r4, [r6, r2]
   3c900:	cmp	r4, r5
   3c904:	beq	3c8e8 <__assert_fail@plt+0x29cf8>
   3c908:	add	r0, r8, #1
   3c90c:	cmp	r2, r0
   3c910:	ldr	r2, [sp, #12]
   3c914:	ldr	r8, [sp, #8]
   3c918:	mov	r4, ip
   3c91c:	bcs	3c930 <__assert_fail@plt+0x29d40>
   3c920:	b	3c970 <__assert_fail@plt+0x29d80>
   3c924:	ldr	r1, [sp]
   3c928:	add	r2, r1, r0
   3c92c:	mov	r8, #0
   3c930:	add	r0, sl, lr
   3c934:	add	r9, r2, r9
   3c938:	add	sl, r9, r4
   3c93c:	sub	r2, sl, lr
   3c940:	mov	r5, #0
   3c944:	mov	r1, #0
   3c948:	bl	129b0 <memchr@plt>
   3c94c:	cmp	sl, #0
   3c950:	beq	3c974 <__assert_fail@plt+0x29d84>
   3c954:	cmp	r0, #0
   3c958:	mov	lr, sl
   3c95c:	beq	3c89c <__assert_fail@plt+0x29cac>
   3c960:	b	3c974 <__assert_fail@plt+0x29d84>
   3c964:	ldr	r0, [sp, #16]
   3c968:	add	r5, r0, r9
   3c96c:	b	3c974 <__assert_fail@plt+0x29d84>
   3c970:	add	r5, sl, r9
   3c974:	mov	r0, r5
   3c978:	sub	sp, fp, #28
   3c97c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c980:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c984:	add	fp, sp, #28
   3c988:	sub	sp, sp, #44	; 0x2c
   3c98c:	sub	sp, sp, #1024	; 0x400
   3c990:	mov	r7, r3
   3c994:	mov	r3, r2
   3c998:	mov	r5, r1
   3c99c:	str	r0, [sp, #32]
   3c9a0:	sub	r2, fp, #36	; 0x24
   3c9a4:	str	r3, [sp, #24]
   3c9a8:	mov	r0, r3
   3c9ac:	mov	r1, r7
   3c9b0:	bl	3ccc8 <__assert_fail@plt+0x2a0d8>
   3c9b4:	mov	r4, r0
   3c9b8:	mov	r0, #0
   3c9bc:	add	r6, sp, #36	; 0x24
   3c9c0:	str	r7, [r6, r0, lsl #2]
   3c9c4:	add	r0, r0, #1
   3c9c8:	cmp	r0, #256	; 0x100
   3c9cc:	bne	3c9c0 <__assert_fail@plt+0x29dd0>
   3c9d0:	cmp	r7, #0
   3c9d4:	ldr	r0, [sp, #24]
   3c9d8:	beq	3c9f8 <__assert_fail@plt+0x29e08>
   3c9dc:	sub	r3, r7, #1
   3c9e0:	mov	r1, r0
   3c9e4:	ldrb	r2, [r1], #1
   3c9e8:	str	r3, [r6, r2, lsl #2]
   3c9ec:	sub	r3, r3, #1
   3c9f0:	cmn	r3, #1
   3c9f4:	bne	3c9e4 <__assert_fail@plt+0x29df4>
   3c9f8:	ldr	r8, [fp, #-36]	; 0xffffffdc
   3c9fc:	add	r1, r0, r8
   3ca00:	mov	r2, r4
   3ca04:	bl	128a8 <bcmp@plt>
   3ca08:	cmp	r0, #0
   3ca0c:	str	r4, [sp, #16]
   3ca10:	str	r7, [sp, #28]
   3ca14:	beq	3cb4c <__assert_fail@plt+0x29f5c>
   3ca18:	sub	r0, r7, r4
   3ca1c:	cmp	r4, r0
   3ca20:	movcs	r0, r4
   3ca24:	add	r0, r0, #1
   3ca28:	str	r0, [sp, #20]
   3ca2c:	str	r0, [fp, #-36]	; 0xffffffdc
   3ca30:	ldr	r0, [sp, #32]
   3ca34:	add	r0, r0, r5
   3ca38:	sub	r2, r7, r5
   3ca3c:	mov	r5, #0
   3ca40:	mov	r1, #0
   3ca44:	bl	129b0 <memchr@plt>
   3ca48:	cmp	r7, #0
   3ca4c:	beq	3ccbc <__assert_fail@plt+0x2a0cc>
   3ca50:	cmp	r0, #0
   3ca54:	ldr	r2, [sp, #24]
   3ca58:	bne	3ccbc <__assert_fail@plt+0x2a0cc>
   3ca5c:	ldr	r0, [sp, #32]
   3ca60:	ldr	r1, [sp, #16]
   3ca64:	add	r3, r0, r1
   3ca68:	str	r3, [sp, #12]
   3ca6c:	add	r7, r2, r1
   3ca70:	ldr	r3, [sp, #28]
   3ca74:	sub	r5, r3, #1
   3ca78:	mov	r9, r5
   3ca7c:	sub	r4, r5, r1
   3ca80:	sub	r8, r2, #1
   3ca84:	sub	r0, r0, #1
   3ca88:	str	r0, [sp, #24]
   3ca8c:	mov	sl, #0
   3ca90:	mov	r1, r3
   3ca94:	ldr	r0, [sp, #32]
   3ca98:	add	r0, r1, r0
   3ca9c:	ldrb	r2, [r0, #-1]
   3caa0:	ldr	r2, [r6, r2, lsl #2]
   3caa4:	cmp	r2, #0
   3caa8:	beq	3cae4 <__assert_fail@plt+0x29ef4>
   3caac:	add	sl, r2, sl
   3cab0:	ldr	r2, [sp, #28]
   3cab4:	add	r6, sl, r2
   3cab8:	sub	r2, r6, r1
   3cabc:	mov	r5, #0
   3cac0:	mov	r1, #0
   3cac4:	bl	129b0 <memchr@plt>
   3cac8:	cmp	r6, #0
   3cacc:	beq	3ccbc <__assert_fail@plt+0x2a0cc>
   3cad0:	cmp	r0, #0
   3cad4:	mov	r1, r6
   3cad8:	add	r6, sp, #36	; 0x24
   3cadc:	beq	3ca94 <__assert_fail@plt+0x29ea4>
   3cae0:	b	3ccbc <__assert_fail@plt+0x2a0cc>
   3cae4:	ldr	r2, [sp, #16]
   3cae8:	cmp	r2, r9
   3caec:	bcs	3cb18 <__assert_fail@plt+0x29f28>
   3caf0:	ldr	r2, [sp, #12]
   3caf4:	add	r3, r2, sl
   3caf8:	mov	r2, #0
   3cafc:	ldrb	r6, [r3, r2]
   3cb00:	ldrb	r5, [r7, r2]
   3cb04:	add	r2, r2, #1
   3cb08:	cmp	r5, r6
   3cb0c:	bne	3caac <__assert_fail@plt+0x29ebc>
   3cb10:	cmp	r4, r2
   3cb14:	bne	3cafc <__assert_fail@plt+0x29f0c>
   3cb18:	ldr	r2, [sp, #24]
   3cb1c:	add	r2, r2, sl
   3cb20:	ldr	r3, [sp, #16]
   3cb24:	cmp	r3, #0
   3cb28:	beq	3ccb4 <__assert_fail@plt+0x2a0c4>
   3cb2c:	sub	r6, r3, #1
   3cb30:	ldrb	r5, [r2, r3]
   3cb34:	ldrb	r3, [r8, r3]
   3cb38:	cmp	r3, r5
   3cb3c:	mov	r3, r6
   3cb40:	beq	3cb24 <__assert_fail@plt+0x29f34>
   3cb44:	ldr	r2, [sp, #20]
   3cb48:	b	3caac <__assert_fail@plt+0x29ebc>
   3cb4c:	ldr	r0, [sp, #32]
   3cb50:	add	r0, r0, r5
   3cb54:	sub	r2, r7, r5
   3cb58:	mov	r5, #0
   3cb5c:	mov	r1, #0
   3cb60:	bl	129b0 <memchr@plt>
   3cb64:	cmp	r7, #0
   3cb68:	beq	3ccbc <__assert_fail@plt+0x2a0cc>
   3cb6c:	str	r8, [sp, #20]
   3cb70:	cmp	r0, #0
   3cb74:	ldr	r4, [sp, #24]
   3cb78:	bne	3ccbc <__assert_fail@plt+0x2a0cc>
   3cb7c:	ldr	r0, [sp, #20]
   3cb80:	ldr	lr, [sp, #28]
   3cb84:	sub	r0, lr, r0
   3cb88:	str	r0, [sp, #12]
   3cb8c:	sub	r8, r4, #1
   3cb90:	ldr	r0, [sp, #32]
   3cb94:	sub	r0, r0, #1
   3cb98:	str	r0, [sp, #8]
   3cb9c:	ldr	r0, [sp, #16]
   3cba0:	rsb	r0, r0, #1
   3cba4:	str	r0, [sp, #4]
   3cba8:	sub	r9, lr, #1
   3cbac:	mov	r7, #0
   3cbb0:	mov	sl, #0
   3cbb4:	ldr	r0, [sp, #32]
   3cbb8:	add	r0, lr, r0
   3cbbc:	ldrb	r2, [r0, #-1]
   3cbc0:	ldr	r3, [r6, r2, lsl #2]
   3cbc4:	cmp	r3, #0
   3cbc8:	beq	3cbf0 <__assert_fail@plt+0x2a000>
   3cbcc:	ldr	r2, [sp, #20]
   3cbd0:	cmp	r3, r2
   3cbd4:	mov	r2, r3
   3cbd8:	ldr	r6, [sp, #12]
   3cbdc:	movcc	r2, r6
   3cbe0:	cmp	r7, #0
   3cbe4:	moveq	r2, r3
   3cbe8:	mov	r7, #0
   3cbec:	b	3cc6c <__assert_fail@plt+0x2a07c>
   3cbf0:	ldr	ip, [sp, #16]
   3cbf4:	cmp	ip, r7
   3cbf8:	mov	r2, ip
   3cbfc:	movcc	r2, r7
   3cc00:	cmp	r2, r9
   3cc04:	bcs	3cc2c <__assert_fail@plt+0x2a03c>
   3cc08:	ldr	r3, [sp, #32]
   3cc0c:	add	r3, r3, sl
   3cc10:	ldrb	r6, [r3, r2]
   3cc14:	ldrb	r5, [r4, r2]
   3cc18:	cmp	r5, r6
   3cc1c:	bne	3cca8 <__assert_fail@plt+0x2a0b8>
   3cc20:	add	r2, r2, #1
   3cc24:	cmp	r2, r9
   3cc28:	bcc	3cc10 <__assert_fail@plt+0x2a020>
   3cc2c:	ldr	r2, [sp, #8]
   3cc30:	add	r2, r2, sl
   3cc34:	mov	r6, ip
   3cc38:	mov	r3, r6
   3cc3c:	cmp	r7, r6
   3cc40:	bcs	3cc58 <__assert_fail@plt+0x2a068>
   3cc44:	sub	r6, r3, #1
   3cc48:	ldrb	r5, [r2, r3]
   3cc4c:	ldrb	r4, [r8, r3]
   3cc50:	cmp	r4, r5
   3cc54:	beq	3cc38 <__assert_fail@plt+0x2a048>
   3cc58:	add	r2, r7, #1
   3cc5c:	cmp	r3, r2
   3cc60:	ldr	r2, [sp, #20]
   3cc64:	ldr	r7, [sp, #12]
   3cc68:	bcc	3ccb4 <__assert_fail@plt+0x2a0c4>
   3cc6c:	add	sl, r2, sl
   3cc70:	ldr	r1, [sp, #28]
   3cc74:	add	r6, sl, r1
   3cc78:	sub	r2, r6, lr
   3cc7c:	mov	r5, #0
   3cc80:	mov	r1, #0
   3cc84:	bl	129b0 <memchr@plt>
   3cc88:	cmp	r6, #0
   3cc8c:	beq	3ccbc <__assert_fail@plt+0x2a0cc>
   3cc90:	cmp	r0, #0
   3cc94:	mov	lr, r6
   3cc98:	add	r6, sp, #36	; 0x24
   3cc9c:	ldr	r4, [sp, #24]
   3cca0:	beq	3cbb4 <__assert_fail@plt+0x29fc4>
   3cca4:	b	3ccbc <__assert_fail@plt+0x2a0cc>
   3cca8:	ldr	r3, [sp, #4]
   3ccac:	add	r2, r3, r2
   3ccb0:	b	3cbe8 <__assert_fail@plt+0x29ff8>
   3ccb4:	ldr	r0, [sp, #32]
   3ccb8:	add	r5, r0, sl
   3ccbc:	mov	r0, r5
   3ccc0:	sub	sp, fp, #28
   3ccc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ccc8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3cccc:	add	fp, sp, #24
   3ccd0:	cmp	r1, #3
   3ccd4:	bcs	3cce8 <__assert_fail@plt+0x2a0f8>
   3ccd8:	mov	r0, #1
   3ccdc:	str	r0, [r2]
   3cce0:	sub	r0, r1, #1
   3cce4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3cce8:	mvn	r8, #0
   3ccec:	mov	r6, #0
   3ccf0:	mov	r3, #1
   3ccf4:	mov	ip, #1
   3ccf8:	mov	r5, #1
   3ccfc:	b	3cd18 <__assert_fail@plt+0x2a128>
   3cd00:	sub	ip, r3, r8
   3cd04:	mov	r5, #1
   3cd08:	mov	r6, r3
   3cd0c:	add	r3, r5, r6
   3cd10:	cmp	r3, r1
   3cd14:	bcs	3cd5c <__assert_fail@plt+0x2a16c>
   3cd18:	ldrb	r7, [r0, r3]
   3cd1c:	add	r4, r5, r8
   3cd20:	ldrb	r4, [r0, r4]
   3cd24:	cmp	r7, r4
   3cd28:	bcc	3cd00 <__assert_fail@plt+0x2a110>
   3cd2c:	bne	3cd44 <__assert_fail@plt+0x2a154>
   3cd30:	cmp	r5, ip
   3cd34:	addne	r5, r5, #1
   3cd38:	addeq	r6, ip, r6
   3cd3c:	moveq	r5, #1
   3cd40:	b	3cd0c <__assert_fail@plt+0x2a11c>
   3cd44:	add	r3, r6, #1
   3cd48:	mov	r5, #1
   3cd4c:	mov	r8, r6
   3cd50:	mov	r6, r3
   3cd54:	mov	ip, #1
   3cd58:	b	3cd0c <__assert_fail@plt+0x2a11c>
   3cd5c:	str	ip, [r2]
   3cd60:	cmp	r1, #2
   3cd64:	bcc	3cde0 <__assert_fail@plt+0x2a1f0>
   3cd68:	mvn	ip, #0
   3cd6c:	mov	r4, #0
   3cd70:	mov	r5, #1
   3cd74:	mov	lr, #1
   3cd78:	mov	r3, #1
   3cd7c:	b	3cd98 <__assert_fail@plt+0x2a1a8>
   3cd80:	sub	lr, r5, ip
   3cd84:	mov	r3, #1
   3cd88:	mov	r4, r5
   3cd8c:	add	r5, r3, r4
   3cd90:	cmp	r5, r1
   3cd94:	bcs	3cde8 <__assert_fail@plt+0x2a1f8>
   3cd98:	ldrb	r6, [r0, r5]
   3cd9c:	add	r7, r3, ip
   3cda0:	ldrb	r7, [r0, r7]
   3cda4:	cmp	r7, r6
   3cda8:	bcc	3cd80 <__assert_fail@plt+0x2a190>
   3cdac:	cmp	r6, r7
   3cdb0:	bne	3cdc8 <__assert_fail@plt+0x2a1d8>
   3cdb4:	cmp	r3, lr
   3cdb8:	addne	r3, r3, #1
   3cdbc:	addeq	r4, lr, r4
   3cdc0:	moveq	r3, #1
   3cdc4:	b	3cd8c <__assert_fail@plt+0x2a19c>
   3cdc8:	add	r7, r4, #1
   3cdcc:	mov	r3, #1
   3cdd0:	mov	ip, r4
   3cdd4:	mov	r4, r7
   3cdd8:	mov	lr, #1
   3cddc:	b	3cd8c <__assert_fail@plt+0x2a19c>
   3cde0:	mov	lr, #1
   3cde4:	mvn	ip, #0
   3cde8:	add	r0, r8, #1
   3cdec:	add	r1, ip, #1
   3cdf0:	cmp	r1, r0
   3cdf4:	strcs	lr, [r2]
   3cdf8:	movcs	r0, r1
   3cdfc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3ce00:	push	{r4, r5, r6, sl, fp, lr}
   3ce04:	add	fp, sp, #16
   3ce08:	mov	r4, r0
   3ce0c:	cmp	r0, #0
   3ce10:	beq	3ce34 <__assert_fail@plt+0x2a244>
   3ce14:	mov	r0, r4
   3ce18:	bl	128c0 <strlen@plt>
   3ce1c:	add	r5, r0, #1
   3ce20:	cmp	r5, #58	; 0x3a
   3ce24:	bls	3ce38 <__assert_fail@plt+0x2a248>
   3ce28:	add	r0, r0, #10
   3ce2c:	bic	r0, r0, #3
   3ce30:	b	3ce3c <__assert_fail@plt+0x2a24c>
   3ce34:	mov	r5, #0
   3ce38:	mov	r0, #64	; 0x40
   3ce3c:	bl	2ed88 <__assert_fail@plt+0x1c198>
   3ce40:	mov	r6, r0
   3ce44:	cmp	r0, #0
   3ce48:	beq	3ce78 <__assert_fail@plt+0x2a288>
   3ce4c:	mov	r1, #0
   3ce50:	str	r1, [r6]
   3ce54:	cmp	r4, #0
   3ce58:	mov	r0, r4
   3ce5c:	movwne	r0, #1
   3ce60:	strb	r0, [r6, #4]
   3ce64:	mov	r0, r6
   3ce68:	strb	r1, [r0, #5]!
   3ce6c:	movne	r1, r4
   3ce70:	movne	r2, r5
   3ce74:	blne	3ce80 <__assert_fail@plt+0x2a290>
   3ce78:	mov	r0, r6
   3ce7c:	pop	{r4, r5, r6, sl, fp, pc}
   3ce80:	push	{r4, r5, fp, lr}
   3ce84:	add	fp, sp, #8
   3ce88:	mov	r4, r2
   3ce8c:	mov	r5, r0
   3ce90:	bl	125f0 <memcpy@plt>
   3ce94:	mov	r0, #0
   3ce98:	strb	r0, [r5, r4]
   3ce9c:	pop	{r4, r5, fp, pc}
   3cea0:	push	{r4, sl, fp, lr}
   3cea4:	add	fp, sp, #8
   3cea8:	cmp	r0, #2
   3ceac:	popcc	{r4, sl, fp, pc}
   3ceb0:	ldr	r4, [r0]
   3ceb4:	bl	2cad4 <__assert_fail@plt+0x19ee4>
   3ceb8:	cmp	r4, #0
   3cebc:	mov	r0, r4
   3cec0:	bne	3ceb0 <__assert_fail@plt+0x2a2c0>
   3cec4:	pop	{r4, sl, fp, pc}
   3cec8:	push	{r4, r5, r6, r7, fp, lr}
   3cecc:	add	fp, sp, #16
   3ced0:	mov	r4, r2
   3ced4:	mov	r7, r1
   3ced8:	cmp	r0, #0
   3cedc:	beq	3cf1c <__assert_fail@plt+0x2a32c>
   3cee0:	mov	r6, r0
   3cee4:	bl	3cf54 <__assert_fail@plt+0x2a364>
   3cee8:	cmp	r0, #0
   3ceec:	beq	3cf2c <__assert_fail@plt+0x2a33c>
   3cef0:	mov	r5, r0
   3cef4:	mov	r0, r7
   3cef8:	mov	r1, r4
   3cefc:	bl	126bc <localtime_r@plt>
   3cf00:	cmp	r0, #0
   3cf04:	beq	3cf34 <__assert_fail@plt+0x2a344>
   3cf08:	mov	r0, r6
   3cf0c:	mov	r1, r4
   3cf10:	bl	3cfec <__assert_fail@plt+0x2a3fc>
   3cf14:	eor	r6, r0, #1
   3cf18:	b	3cf38 <__assert_fail@plt+0x2a348>
   3cf1c:	mov	r0, r7
   3cf20:	mov	r1, r4
   3cf24:	pop	{r4, r5, r6, r7, fp, lr}
   3cf28:	b	124c4 <gmtime_r@plt>
   3cf2c:	mov	r0, #0
   3cf30:	pop	{r4, r5, r6, r7, fp, pc}
   3cf34:	mov	r6, #1
   3cf38:	mov	r0, r5
   3cf3c:	bl	3d104 <__assert_fail@plt+0x2a514>
   3cf40:	cmp	r0, #0
   3cf44:	movne	r0, r4
   3cf48:	cmp	r6, #0
   3cf4c:	movwne	r0, #0
   3cf50:	pop	{r4, r5, r6, r7, fp, pc}
   3cf54:	push	{r4, r5, r6, r7, fp, lr}
   3cf58:	add	fp, sp, #16
   3cf5c:	mov	r4, r0
   3cf60:	bl	3d230 <__assert_fail@plt+0x2a640>
   3cf64:	mov	r5, r0
   3cf68:	ldrb	r0, [r4, #4]
   3cf6c:	cmp	r5, #0
   3cf70:	beq	3cf88 <__assert_fail@plt+0x2a398>
   3cf74:	cmp	r0, #0
   3cf78:	beq	3cf90 <__assert_fail@plt+0x2a3a0>
   3cf7c:	add	r0, r4, #5
   3cf80:	mov	r1, r5
   3cf84:	bl	124f4 <strcmp@plt>
   3cf88:	cmp	r0, #0
   3cf8c:	beq	3cfc0 <__assert_fail@plt+0x2a3d0>
   3cf90:	mov	r0, r5
   3cf94:	bl	3ce00 <__assert_fail@plt+0x2a210>
   3cf98:	mov	r5, #0
   3cf9c:	cmp	r0, #0
   3cfa0:	beq	3cfe4 <__assert_fail@plt+0x2a3f4>
   3cfa4:	mov	r6, r0
   3cfa8:	mov	r0, r4
   3cfac:	bl	3d23c <__assert_fail@plt+0x2a64c>
   3cfb0:	cmp	r0, #0
   3cfb4:	beq	3cfcc <__assert_fail@plt+0x2a3dc>
   3cfb8:	mov	r0, r6
   3cfbc:	pop	{r4, r5, r6, r7, fp, pc}
   3cfc0:	mov	r5, #1
   3cfc4:	mov	r0, r5
   3cfc8:	pop	{r4, r5, r6, r7, fp, pc}
   3cfcc:	bl	12908 <__errno_location@plt>
   3cfd0:	mov	r4, r0
   3cfd4:	ldr	r7, [r0]
   3cfd8:	mov	r0, r6
   3cfdc:	bl	3cea0 <__assert_fail@plt+0x2a2b0>
   3cfe0:	str	r7, [r4]
   3cfe4:	mov	r0, r5
   3cfe8:	pop	{r4, r5, r6, r7, fp, pc}
   3cfec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3cff0:	add	fp, sp, #24
   3cff4:	ldr	r7, [r1, #40]	; 0x28
   3cff8:	mov	r8, #1
   3cffc:	cmp	r7, #0
   3d000:	beq	3d0a0 <__assert_fail@plt+0x2a4b0>
   3d004:	mov	r5, r1
   3d008:	mov	r6, r0
   3d00c:	cmp	r7, r1
   3d010:	bcc	3d020 <__assert_fail@plt+0x2a430>
   3d014:	add	r0, r5, #44	; 0x2c
   3d018:	cmp	r7, r0
   3d01c:	bcc	3d0a0 <__assert_fail@plt+0x2a4b0>
   3d020:	ldrb	r0, [r7]
   3d024:	cmp	r0, #0
   3d028:	beq	3d094 <__assert_fail@plt+0x2a4a4>
   3d02c:	add	r4, r6, #5
   3d030:	mov	r0, r4
   3d034:	mov	r1, r7
   3d038:	bl	124f4 <strcmp@plt>
   3d03c:	cmp	r0, #0
   3d040:	beq	3d09c <__assert_fail@plt+0x2a4ac>
   3d044:	ldrb	r0, [r4]
   3d048:	cmp	r0, #0
   3d04c:	bne	3d068 <__assert_fail@plt+0x2a478>
   3d050:	add	r0, r6, #5
   3d054:	cmp	r4, r0
   3d058:	bne	3d0a8 <__assert_fail@plt+0x2a4b8>
   3d05c:	ldrb	r0, [r6, #4]
   3d060:	cmp	r0, #0
   3d064:	beq	3d0a8 <__assert_fail@plt+0x2a4b8>
   3d068:	mov	r0, r4
   3d06c:	bl	128c0 <strlen@plt>
   3d070:	add	r4, r0, r4
   3d074:	ldrb	r0, [r4, #1]!
   3d078:	cmp	r0, #0
   3d07c:	bne	3d030 <__assert_fail@plt+0x2a440>
   3d080:	ldr	r0, [r6]
   3d084:	cmp	r0, #0
   3d088:	addne	r4, r0, #5
   3d08c:	movne	r6, r0
   3d090:	b	3d030 <__assert_fail@plt+0x2a440>
   3d094:	movw	r4, #2407	; 0x967
   3d098:	movt	r4, #4
   3d09c:	str	r4, [r5, #40]	; 0x28
   3d0a0:	mov	r0, r8
   3d0a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3d0a8:	sub	r0, r6, r4
   3d0ac:	add	r9, r0, #64	; 0x40
   3d0b0:	mov	r0, r7
   3d0b4:	bl	128c0 <strlen@plt>
   3d0b8:	add	r2, r0, #1
   3d0bc:	cmp	r2, r9
   3d0c0:	bge	3d0d4 <__assert_fail@plt+0x2a4e4>
   3d0c4:	mov	r0, r4
   3d0c8:	mov	r1, r7
   3d0cc:	bl	3ce80 <__assert_fail@plt+0x2a290>
   3d0d0:	b	3d09c <__assert_fail@plt+0x2a4ac>
   3d0d4:	mov	r0, r7
   3d0d8:	bl	3ce00 <__assert_fail@plt+0x2a210>
   3d0dc:	str	r0, [r6]
   3d0e0:	cmp	r0, #0
   3d0e4:	beq	3d0f8 <__assert_fail@plt+0x2a508>
   3d0e8:	mov	r1, #0
   3d0ec:	strb	r1, [r0, #4]
   3d0f0:	add	r4, r0, #5
   3d0f4:	b	3d09c <__assert_fail@plt+0x2a4ac>
   3d0f8:	mov	r8, #0
   3d0fc:	mov	r0, r8
   3d100:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3d104:	push	{r4, r5, r6, r7, fp, lr}
   3d108:	add	fp, sp, #16
   3d10c:	cmp	r0, #1
   3d110:	beq	3d14c <__assert_fail@plt+0x2a55c>
   3d114:	mov	r4, r0
   3d118:	bl	12908 <__errno_location@plt>
   3d11c:	mov	r6, r0
   3d120:	ldr	r7, [r0]
   3d124:	mov	r0, r4
   3d128:	bl	3d23c <__assert_fail@plt+0x2a64c>
   3d12c:	mov	r5, r0
   3d130:	cmp	r0, #0
   3d134:	ldreq	r7, [r6]
   3d138:	mov	r0, r4
   3d13c:	bl	3cea0 <__assert_fail@plt+0x2a2b0>
   3d140:	str	r7, [r6]
   3d144:	mov	r0, r5
   3d148:	pop	{r4, r5, r6, r7, fp, pc}
   3d14c:	mov	r5, #1
   3d150:	mov	r0, r5
   3d154:	pop	{r4, r5, r6, r7, fp, pc}
   3d158:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3d15c:	add	fp, sp, #24
   3d160:	sub	sp, sp, #48	; 0x30
   3d164:	mov	r4, r1
   3d168:	cmp	r0, #0
   3d16c:	beq	3d208 <__assert_fail@plt+0x2a618>
   3d170:	mov	r6, r0
   3d174:	bl	3cf54 <__assert_fail@plt+0x2a364>
   3d178:	cmp	r0, #0
   3d17c:	beq	3d220 <__assert_fail@plt+0x2a630>
   3d180:	mov	r7, r0
   3d184:	ldm	r4, {r0, r1, r2, r3, r5, ip}
   3d188:	stm	sp, {r0, r1, r2, r3, r5}
   3d18c:	mvn	r0, #0
   3d190:	str	r0, [sp, #28]
   3d194:	str	ip, [sp, #20]
   3d198:	ldr	r0, [r4, #32]
   3d19c:	str	r0, [sp, #32]
   3d1a0:	mov	r0, sp
   3d1a4:	bl	12548 <mktime@plt>
   3d1a8:	mov	r5, r0
   3d1ac:	ldr	r0, [sp, #28]
   3d1b0:	cmn	r0, #1
   3d1b4:	ble	3d218 <__assert_fail@plt+0x2a628>
   3d1b8:	mov	r8, sp
   3d1bc:	mov	r0, r6
   3d1c0:	mov	r1, r8
   3d1c4:	bl	3cfec <__assert_fail@plt+0x2a3fc>
   3d1c8:	mov	r6, r0
   3d1cc:	mov	r0, r7
   3d1d0:	bl	3d104 <__assert_fail@plt+0x2a514>
   3d1d4:	cmp	r6, #0
   3d1d8:	cmpne	r0, #0
   3d1dc:	beq	3d220 <__assert_fail@plt+0x2a630>
   3d1e0:	mov	r0, #28
   3d1e4:	add	r1, r8, #16
   3d1e8:	vld1.32	{d16-d17}, [r8], r0
   3d1ec:	vld1.64	{d18-d19}, [r1]
   3d1f0:	add	r1, r4, #16
   3d1f4:	vld1.32	{d20-d21}, [r8]
   3d1f8:	vst1.32	{d18-d19}, [r1]
   3d1fc:	vst1.32	{d16-d17}, [r4], r0
   3d200:	vst1.32	{d20-d21}, [r4]
   3d204:	b	3d224 <__assert_fail@plt+0x2a634>
   3d208:	mov	r0, r4
   3d20c:	sub	sp, fp, #24
   3d210:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   3d214:	b	12ab8 <timegm@plt>
   3d218:	mov	r0, r7
   3d21c:	bl	3d104 <__assert_fail@plt+0x2a514>
   3d220:	mvn	r5, #0
   3d224:	mov	r0, r5
   3d228:	sub	sp, fp, #24
   3d22c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3d230:	movw	r0, #16753	; 0x4171
   3d234:	movt	r0, #4
   3d238:	b	127f4 <getenv@plt>
   3d23c:	push	{fp, lr}
   3d240:	mov	fp, sp
   3d244:	ldrb	r1, [r0, #4]
   3d248:	cmp	r1, #0
   3d24c:	addne	r1, r0, #5
   3d250:	mov	r0, r1
   3d254:	bl	3d274 <__assert_fail@plt+0x2a684>
   3d258:	mov	r1, r0
   3d25c:	mov	r0, #0
   3d260:	cmp	r1, #0
   3d264:	popne	{fp, pc}
   3d268:	bl	12704 <tzset@plt>
   3d26c:	mov	r0, #1
   3d270:	pop	{fp, pc}
   3d274:	cmp	r0, #0
   3d278:	beq	3d290 <__assert_fail@plt+0x2a6a0>
   3d27c:	mov	r1, r0
   3d280:	movw	r0, #16753	; 0x4171
   3d284:	movt	r0, #4
   3d288:	mov	r2, #1
   3d28c:	b	128d8 <setenv@plt>
   3d290:	movw	r0, #16753	; 0x4171
   3d294:	movt	r0, #4
   3d298:	b	12b6c <unsetenv@plt>
   3d29c:	push	{fp, lr}
   3d2a0:	mov	fp, sp
   3d2a4:	movw	r0, #21768	; 0x5508
   3d2a8:	movt	r0, #5
   3d2ac:	ldr	r0, [r0]
   3d2b0:	bl	12884 <exit@plt>
   3d2b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d2b8:	add	fp, sp, #28
   3d2bc:	sub	sp, sp, #12
   3d2c0:	mov	r4, r3
   3d2c4:	mov	r6, r2
   3d2c8:	mov	r5, r1
   3d2cc:	mov	sl, r0
   3d2d0:	bl	128c0 <strlen@plt>
   3d2d4:	ldr	r8, [r5]
   3d2d8:	cmp	r8, #0
   3d2dc:	beq	3d39c <__assert_fail@plt+0x2a7ac>
   3d2e0:	mov	r7, r0
   3d2e4:	add	r9, r5, #4
   3d2e8:	mov	r0, #0
   3d2ec:	str	r0, [sp]
   3d2f0:	mvn	r0, #0
   3d2f4:	str	r0, [sp, #8]
   3d2f8:	str	r6, [sp, #4]
   3d2fc:	mov	r5, #0
   3d300:	b	3d31c <__assert_fail@plt+0x2a72c>
   3d304:	str	r5, [sp, #8]
   3d308:	add	r6, r6, r4
   3d30c:	ldr	r8, [r9, r5, lsl #2]
   3d310:	add	r5, r5, #1
   3d314:	cmp	r8, #0
   3d318:	beq	3d384 <__assert_fail@plt+0x2a794>
   3d31c:	mov	r0, r8
   3d320:	mov	r1, sl
   3d324:	mov	r2, r7
   3d328:	bl	12b90 <strncmp@plt>
   3d32c:	cmp	r0, #0
   3d330:	bne	3d308 <__assert_fail@plt+0x2a718>
   3d334:	mov	r0, r8
   3d338:	bl	128c0 <strlen@plt>
   3d33c:	cmp	r0, r7
   3d340:	beq	3d3a0 <__assert_fail@plt+0x2a7b0>
   3d344:	ldr	r0, [sp, #8]
   3d348:	cmn	r0, #1
   3d34c:	beq	3d304 <__assert_fail@plt+0x2a714>
   3d350:	ldr	r0, [sp, #4]
   3d354:	cmp	r0, #0
   3d358:	beq	3d378 <__assert_fail@plt+0x2a788>
   3d35c:	ldr	r1, [sp, #8]
   3d360:	mla	r0, r1, r4, r0
   3d364:	mov	r1, r6
   3d368:	mov	r2, r4
   3d36c:	bl	128a8 <bcmp@plt>
   3d370:	cmp	r0, #0
   3d374:	beq	3d308 <__assert_fail@plt+0x2a718>
   3d378:	mov	r0, #1
   3d37c:	str	r0, [sp]
   3d380:	b	3d308 <__assert_fail@plt+0x2a718>
   3d384:	ldr	r0, [sp]
   3d388:	tst	r0, #1
   3d38c:	ldr	r0, [sp, #8]
   3d390:	mvnne	r0, #1
   3d394:	sub	sp, fp, #28
   3d398:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d39c:	mvn	r5, #0
   3d3a0:	mov	r0, r5
   3d3a4:	sub	sp, fp, #28
   3d3a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d3ac:	push	{r4, r5, r6, sl, fp, lr}
   3d3b0:	add	fp, sp, #16
   3d3b4:	sub	sp, sp, #8
   3d3b8:	mov	r4, r1
   3d3bc:	mov	r5, r0
   3d3c0:	movw	r0, #19608	; 0x4c98
   3d3c4:	movt	r0, #4
   3d3c8:	movw	r1, #19635	; 0x4cb3
   3d3cc:	movt	r1, #4
   3d3d0:	cmn	r2, #1
   3d3d4:	moveq	r1, r0
   3d3d8:	mov	r0, #0
   3d3dc:	mov	r2, #5
   3d3e0:	bl	12674 <dcgettext@plt>
   3d3e4:	mov	r6, r0
   3d3e8:	mov	r0, #0
   3d3ec:	mov	r1, #8
   3d3f0:	mov	r2, r4
   3d3f4:	bl	2a088 <__assert_fail@plt+0x17498>
   3d3f8:	mov	r4, r0
   3d3fc:	mov	r0, #1
   3d400:	mov	r1, r5
   3d404:	bl	2a324 <__assert_fail@plt+0x17734>
   3d408:	str	r0, [sp]
   3d40c:	mov	r0, #0
   3d410:	mov	r1, #0
   3d414:	mov	r2, r6
   3d418:	mov	r3, r4
   3d41c:	bl	127b8 <error@plt>
   3d420:	sub	sp, fp, #16
   3d424:	pop	{r4, r5, r6, sl, fp, pc}
   3d428:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d42c:	add	fp, sp, #28
   3d430:	sub	sp, sp, #4
   3d434:	mov	r9, r2
   3d438:	mov	r5, r1
   3d43c:	mov	r7, r0
   3d440:	mov	r8, #0
   3d444:	movw	r1, #19664	; 0x4cd0
   3d448:	movt	r1, #4
   3d44c:	mov	r0, #0
   3d450:	mov	r2, #5
   3d454:	bl	12674 <dcgettext@plt>
   3d458:	movw	sl, #21864	; 0x5568
   3d45c:	movt	sl, #5
   3d460:	ldr	r1, [sl]
   3d464:	bl	12b84 <fputs@plt>
   3d468:	ldr	r6, [r7]
   3d46c:	cmp	r6, #0
   3d470:	bne	3d488 <__assert_fail@plt+0x2a898>
   3d474:	ldr	r1, [sl]
   3d478:	mov	r0, #10
   3d47c:	sub	sp, fp, #28
   3d480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d484:	b	12ac4 <putc@plt>
   3d488:	add	r4, r7, #4
   3d48c:	mov	r7, #0
   3d490:	str	r4, [sp]
   3d494:	cmp	r8, #0
   3d498:	bne	3d4dc <__assert_fail@plt+0x2a8ec>
   3d49c:	ldr	r7, [sl]
   3d4a0:	mov	r0, r6
   3d4a4:	bl	2a32c <__assert_fail@plt+0x1773c>
   3d4a8:	mov	r2, r0
   3d4ac:	mov	r0, r7
   3d4b0:	movw	r1, #19685	; 0x4ce5
   3d4b4:	movt	r1, #4
   3d4b8:	bl	128fc <fprintf@plt>
   3d4bc:	mov	r7, r5
   3d4c0:	add	r5, r5, r9
   3d4c4:	ldr	r6, [r4, -r8, lsl #2]
   3d4c8:	sub	r8, r8, #1
   3d4cc:	cmp	r6, #0
   3d4d0:	beq	3d474 <__assert_fail@plt+0x2a884>
   3d4d4:	cmp	r8, #0
   3d4d8:	beq	3d49c <__assert_fail@plt+0x2a8ac>
   3d4dc:	mov	r0, r7
   3d4e0:	mov	r1, r5
   3d4e4:	mov	r2, r9
   3d4e8:	bl	128a8 <bcmp@plt>
   3d4ec:	cmp	r0, #0
   3d4f0:	bne	3d49c <__assert_fail@plt+0x2a8ac>
   3d4f4:	ldr	r4, [sl]
   3d4f8:	mov	r0, r6
   3d4fc:	bl	2a32c <__assert_fail@plt+0x1773c>
   3d500:	mov	r2, r0
   3d504:	mov	r0, r4
   3d508:	ldr	r4, [sp]
   3d50c:	movw	r1, #19693	; 0x4ced
   3d510:	movt	r1, #4
   3d514:	bl	128fc <fprintf@plt>
   3d518:	b	3d4c0 <__assert_fail@plt+0x2a8d0>
   3d51c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3d520:	add	fp, sp, #24
   3d524:	mov	r4, r3
   3d528:	mov	r5, r2
   3d52c:	mov	r7, r1
   3d530:	mov	r6, r0
   3d534:	ldr	r8, [fp, #8]
   3d538:	mov	r0, r1
   3d53c:	mov	r1, r2
   3d540:	mov	r2, r3
   3d544:	mov	r3, r8
   3d548:	bl	3d2b4 <__assert_fail@plt+0x2a6c4>
   3d54c:	mov	r2, r0
   3d550:	cmn	r0, #1
   3d554:	ble	3d560 <__assert_fail@plt+0x2a970>
   3d558:	mov	r0, r2
   3d55c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3d560:	ldr	r9, [fp, #12]
   3d564:	mov	r0, r6
   3d568:	mov	r1, r7
   3d56c:	bl	3d3ac <__assert_fail@plt+0x2a7bc>
   3d570:	mov	r0, r5
   3d574:	mov	r1, r4
   3d578:	mov	r2, r8
   3d57c:	bl	3d428 <__assert_fail@plt+0x2a838>
   3d580:	blx	r9
   3d584:	mvn	r2, #0
   3d588:	mov	r0, r2
   3d58c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3d590:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3d594:	add	fp, sp, #24
   3d598:	ldr	r6, [r1]
   3d59c:	cmp	r6, #0
   3d5a0:	beq	3d604 <__assert_fail@plt+0x2aa14>
   3d5a4:	mov	r4, r3
   3d5a8:	mov	r7, r2
   3d5ac:	mov	r8, r1
   3d5b0:	mov	r9, r0
   3d5b4:	mov	r1, r2
   3d5b8:	mov	r2, r3
   3d5bc:	bl	128a8 <bcmp@plt>
   3d5c0:	cmp	r0, #0
   3d5c4:	beq	3d5fc <__assert_fail@plt+0x2aa0c>
   3d5c8:	add	r7, r7, r4
   3d5cc:	add	r5, r8, #4
   3d5d0:	ldr	r6, [r5]
   3d5d4:	cmp	r6, #0
   3d5d8:	beq	3d604 <__assert_fail@plt+0x2aa14>
   3d5dc:	mov	r0, r9
   3d5e0:	mov	r1, r7
   3d5e4:	mov	r2, r4
   3d5e8:	bl	128a8 <bcmp@plt>
   3d5ec:	add	r7, r7, r4
   3d5f0:	add	r5, r5, #4
   3d5f4:	cmp	r0, #0
   3d5f8:	bne	3d5d0 <__assert_fail@plt+0x2a9e0>
   3d5fc:	mov	r0, r6
   3d600:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3d604:	mov	r6, #0
   3d608:	mov	r0, r6
   3d60c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3d610:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3d614:	add	fp, sp, #24
   3d618:	sub	sp, sp, #32
   3d61c:	mov	r5, r0
   3d620:	ldrb	r0, [r2]
   3d624:	cmp	r0, #0
   3d628:	beq	3d6fc <__assert_fail@plt+0x2ab0c>
   3d62c:	mov	r4, r2
   3d630:	mov	r6, r1
   3d634:	movw	r9, #24156	; 0x5e5c
   3d638:	movt	r9, #5
   3d63c:	ldr	r0, [r9]
   3d640:	cmp	r0, #0
   3d644:	bne	3d6a8 <__assert_fail@plt+0x2aab8>
   3d648:	movw	r0, #12693	; 0x3195
   3d64c:	movt	r0, #4
   3d650:	movw	r1, #18688	; 0x4900
   3d654:	movt	r1, #8
   3d658:	bl	127e8 <open64@plt>
   3d65c:	cmn	r0, #1
   3d660:	ble	3d714 <__assert_fail@plt+0x2ab24>
   3d664:	mov	r7, r0
   3d668:	mov	r8, sp
   3d66c:	movw	r1, #19698	; 0x4cf2
   3d670:	movt	r1, #4
   3d674:	mov	r0, r8
   3d678:	mov	r2, r7
   3d67c:	bl	12a94 <sprintf@plt>
   3d680:	mov	r0, r8
   3d684:	mov	r1, #0
   3d688:	bl	129c8 <access@plt>
   3d68c:	mvn	r1, #0
   3d690:	cmp	r0, #0
   3d694:	movweq	r1, #1
   3d698:	str	r1, [r9]
   3d69c:	mov	r0, r7
   3d6a0:	bl	12ba8 <close@plt>
   3d6a4:	ldr	r0, [r9]
   3d6a8:	mov	r7, #0
   3d6ac:	cmp	r0, #0
   3d6b0:	bmi	3d708 <__assert_fail@plt+0x2ab18>
   3d6b4:	mov	r0, r4
   3d6b8:	bl	128c0 <strlen@plt>
   3d6bc:	add	r0, r0, #27
   3d6c0:	cmp	r0, #4032	; 0xfc0
   3d6c4:	bls	3d6d8 <__assert_fail@plt+0x2aae8>
   3d6c8:	bl	2ed88 <__assert_fail@plt+0x1c198>
   3d6cc:	mov	r5, r0
   3d6d0:	cmp	r0, #0
   3d6d4:	beq	3d708 <__assert_fail@plt+0x2ab18>
   3d6d8:	movw	r1, #19721	; 0x4d09
   3d6dc:	movt	r1, #4
   3d6e0:	mov	r0, r5
   3d6e4:	mov	r2, r6
   3d6e8:	bl	12a94 <sprintf@plt>
   3d6ec:	add	r0, r5, r0
   3d6f0:	mov	r1, r4
   3d6f4:	bl	12770 <strcpy@plt>
   3d6f8:	b	3d704 <__assert_fail@plt+0x2ab14>
   3d6fc:	mov	r0, #0
   3d700:	strb	r0, [r5]
   3d704:	mov	r7, r5
   3d708:	mov	r0, r7
   3d70c:	sub	sp, fp, #24
   3d710:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3d714:	mvn	r0, #0
   3d718:	str	r0, [r9]
   3d71c:	mov	r7, #0
   3d720:	b	3d708 <__assert_fail@plt+0x2ab18>
   3d724:	sub	r0, r0, #1
   3d728:	ldrb	r3, [r0, #1]!
   3d72c:	cmp	r3, #47	; 0x2f
   3d730:	beq	3d728 <__assert_fail@plt+0x2ab38>
   3d734:	mov	r2, #0
   3d738:	mov	r1, r0
   3d73c:	b	3d748 <__assert_fail@plt+0x2ab58>
   3d740:	mov	r2, #1
   3d744:	ldrb	r3, [r1, #1]!
   3d748:	uxtb	r3, r3
   3d74c:	cmp	r3, #47	; 0x2f
   3d750:	beq	3d740 <__assert_fail@plt+0x2ab50>
   3d754:	cmp	r3, #0
   3d758:	bxeq	lr
   3d75c:	tst	r2, #1
   3d760:	movne	r0, r1
   3d764:	mov	r2, #0
   3d768:	ldrb	r3, [r1, #1]!
   3d76c:	b	3d748 <__assert_fail@plt+0x2ab58>
   3d770:	push	{r4, sl, fp, lr}
   3d774:	add	fp, sp, #8
   3d778:	mov	r4, r0
   3d77c:	bl	128c0 <strlen@plt>
   3d780:	mov	r1, r0
   3d784:	sub	r2, r4, #1
   3d788:	mov	r0, r1
   3d78c:	cmp	r1, #2
   3d790:	bcc	3d7a4 <__assert_fail@plt+0x2abb4>
   3d794:	ldrb	r3, [r2, r0]
   3d798:	sub	r1, r0, #1
   3d79c:	cmp	r3, #47	; 0x2f
   3d7a0:	beq	3d788 <__assert_fail@plt+0x2ab98>
   3d7a4:	pop	{r4, sl, fp, pc}
   3d7a8:	push	{r4, r5, r6, sl, fp, lr}
   3d7ac:	add	fp, sp, #16
   3d7b0:	rsb	lr, r2, #64	; 0x40
   3d7b4:	lsr	ip, r0, lr
   3d7b8:	rsb	r3, lr, #32
   3d7bc:	orr	r3, ip, r1, lsl r3
   3d7c0:	rsbs	r5, r2, #32
   3d7c4:	lsrpl	r3, r1, r5
   3d7c8:	lsl	r4, r0, r2
   3d7cc:	subs	r6, r2, #32
   3d7d0:	movwpl	r4, #0
   3d7d4:	orr	ip, r3, r4
   3d7d8:	lsr	r3, r0, r5
   3d7dc:	orr	r2, r3, r1, lsl r2
   3d7e0:	lslpl	r2, r0, r6
   3d7e4:	lsr	r0, r1, lr
   3d7e8:	cmp	r5, #0
   3d7ec:	movwpl	r0, #0
   3d7f0:	orr	r1, r0, r2
   3d7f4:	mov	r0, ip
   3d7f8:	pop	{r4, r5, r6, sl, fp, pc}
   3d7fc:	push	{r4, r5, fp, lr}
   3d800:	add	fp, sp, #8
   3d804:	lsr	ip, r0, r2
   3d808:	rsb	r3, r2, #32
   3d80c:	orr	ip, ip, r1, lsl r3
   3d810:	subs	lr, r2, #32
   3d814:	lsrpl	ip, r1, lr
   3d818:	rsb	r4, r2, #64	; 0x40
   3d81c:	lsl	r5, r0, r4
   3d820:	cmp	r3, #0
   3d824:	movwpl	r5, #0
   3d828:	orr	ip, r5, ip
   3d82c:	rsb	r5, r4, #32
   3d830:	lsr	r5, r0, r5
   3d834:	orr	r4, r5, r1, lsl r4
   3d838:	cmp	r3, #0
   3d83c:	lslpl	r4, r0, r3
   3d840:	lsr	r0, r1, r2
   3d844:	cmp	lr, #0
   3d848:	movwpl	r0, #0
   3d84c:	orr	r1, r4, r0
   3d850:	mov	r0, ip
   3d854:	pop	{r4, r5, fp, pc}
   3d858:	rsb	r1, r1, #32
   3d85c:	ror	r0, r0, r1
   3d860:	bx	lr
   3d864:	ror	r0, r0, r1
   3d868:	bx	lr
   3d86c:	rsb	r1, r1, #32
   3d870:	ror	r0, r0, r1
   3d874:	bx	lr
   3d878:	ror	r0, r0, r1
   3d87c:	bx	lr
   3d880:	and	r2, r1, #15
   3d884:	lsl	r2, r0, r2
   3d888:	rsb	r1, r1, #0
   3d88c:	and	r1, r1, #15
   3d890:	orr	r0, r2, r0, lsr r1
   3d894:	uxth	r0, r0
   3d898:	bx	lr
   3d89c:	rsb	r2, r1, #0
   3d8a0:	and	r2, r2, #15
   3d8a4:	lsl	r2, r0, r2
   3d8a8:	and	r1, r1, #15
   3d8ac:	orr	r0, r2, r0, lsr r1
   3d8b0:	uxth	r0, r0
   3d8b4:	bx	lr
   3d8b8:	and	r2, r1, #7
   3d8bc:	lsl	r2, r0, r2
   3d8c0:	rsb	r1, r1, #0
   3d8c4:	and	r1, r1, #7
   3d8c8:	orr	r0, r2, r0, lsr r1
   3d8cc:	uxtb	r0, r0
   3d8d0:	bx	lr
   3d8d4:	rsb	r2, r1, #0
   3d8d8:	and	r2, r2, #7
   3d8dc:	lsl	r2, r0, r2
   3d8e0:	and	r1, r1, #7
   3d8e4:	orr	r0, r2, r0, lsr r1
   3d8e8:	uxtb	r0, r0
   3d8ec:	bx	lr
   3d8f0:	mov	r1, r0
   3d8f4:	sub	r2, r0, #65	; 0x41
   3d8f8:	mov	r0, #1
   3d8fc:	cmp	r2, #26
   3d900:	subcs	r2, r1, #97	; 0x61
   3d904:	cmpcs	r2, #26
   3d908:	bcs	3d910 <__assert_fail@plt+0x2ad20>
   3d90c:	bx	lr
   3d910:	sub	r1, r1, #48	; 0x30
   3d914:	cmp	r1, #10
   3d918:	movcs	r0, #0
   3d91c:	bx	lr
   3d920:	mov	r1, r0
   3d924:	sub	r2, r0, #65	; 0x41
   3d928:	mov	r0, #1
   3d92c:	cmp	r2, #26
   3d930:	subcs	r1, r1, #97	; 0x61
   3d934:	cmpcs	r1, #26
   3d938:	movcs	r0, #0
   3d93c:	bx	lr
   3d940:	mov	r1, #0
   3d944:	cmp	r0, #128	; 0x80
   3d948:	movwcc	r1, #1
   3d94c:	mov	r0, r1
   3d950:	bx	lr
   3d954:	sub	r1, r0, #9
   3d958:	clz	r1, r1
   3d95c:	lsr	r1, r1, #5
   3d960:	sub	r0, r0, #32
   3d964:	clz	r0, r0
   3d968:	lsr	r0, r0, #5
   3d96c:	orr	r0, r0, r1
   3d970:	bx	lr
   3d974:	mov	r1, r0
   3d978:	mov	r0, #1
   3d97c:	cmp	r1, #32
   3d980:	bxcc	lr
   3d984:	cmp	r1, #127	; 0x7f
   3d988:	movne	r0, #0
   3d98c:	bx	lr
   3d990:	sub	r1, r0, #48	; 0x30
   3d994:	mov	r0, #0
   3d998:	cmp	r1, #10
   3d99c:	movwcc	r0, #1
   3d9a0:	bx	lr
   3d9a4:	sub	r1, r0, #33	; 0x21
   3d9a8:	mov	r0, #0
   3d9ac:	cmp	r1, #94	; 0x5e
   3d9b0:	movwcc	r0, #1
   3d9b4:	bx	lr
   3d9b8:	sub	r1, r0, #97	; 0x61
   3d9bc:	mov	r0, #0
   3d9c0:	cmp	r1, #26
   3d9c4:	movwcc	r0, #1
   3d9c8:	bx	lr
   3d9cc:	sub	r1, r0, #32
   3d9d0:	mov	r0, #0
   3d9d4:	cmp	r1, #95	; 0x5f
   3d9d8:	movwcc	r0, #1
   3d9dc:	bx	lr
   3d9e0:	sub	r1, r0, #33	; 0x21
   3d9e4:	cmp	r1, #93	; 0x5d
   3d9e8:	bhi	3db74 <__assert_fail@plt+0x2af84>
   3d9ec:	mov	r0, #1
   3d9f0:	add	r2, pc, #0
   3d9f4:	ldr	pc, [r2, r1, lsl #2]
   3d9f8:	andeq	sp, r3, r0, ror fp
   3d9fc:	andeq	sp, r3, r0, ror fp
   3da00:	andeq	sp, r3, r0, ror fp
   3da04:	andeq	sp, r3, r0, ror fp
   3da08:	andeq	sp, r3, r0, ror fp
   3da0c:	andeq	sp, r3, r0, ror fp
   3da10:	andeq	sp, r3, r0, ror fp
   3da14:	andeq	sp, r3, r0, ror fp
   3da18:	andeq	sp, r3, r0, ror fp
   3da1c:	andeq	sp, r3, r0, ror fp
   3da20:	andeq	sp, r3, r0, ror fp
   3da24:	andeq	sp, r3, r0, ror fp
   3da28:	andeq	sp, r3, r0, ror fp
   3da2c:	andeq	sp, r3, r0, ror fp
   3da30:	andeq	sp, r3, r0, ror fp
   3da34:	andeq	sp, r3, r4, ror fp
   3da38:	andeq	sp, r3, r4, ror fp
   3da3c:	andeq	sp, r3, r4, ror fp
   3da40:	andeq	sp, r3, r4, ror fp
   3da44:	andeq	sp, r3, r4, ror fp
   3da48:	andeq	sp, r3, r4, ror fp
   3da4c:	andeq	sp, r3, r4, ror fp
   3da50:	andeq	sp, r3, r4, ror fp
   3da54:	andeq	sp, r3, r4, ror fp
   3da58:	andeq	sp, r3, r4, ror fp
   3da5c:	andeq	sp, r3, r0, ror fp
   3da60:	andeq	sp, r3, r0, ror fp
   3da64:	andeq	sp, r3, r0, ror fp
   3da68:	andeq	sp, r3, r0, ror fp
   3da6c:	andeq	sp, r3, r0, ror fp
   3da70:	andeq	sp, r3, r0, ror fp
   3da74:	andeq	sp, r3, r0, ror fp
   3da78:	andeq	sp, r3, r4, ror fp
   3da7c:	andeq	sp, r3, r4, ror fp
   3da80:	andeq	sp, r3, r4, ror fp
   3da84:	andeq	sp, r3, r4, ror fp
   3da88:	andeq	sp, r3, r4, ror fp
   3da8c:	andeq	sp, r3, r4, ror fp
   3da90:	andeq	sp, r3, r4, ror fp
   3da94:	andeq	sp, r3, r4, ror fp
   3da98:	andeq	sp, r3, r4, ror fp
   3da9c:	andeq	sp, r3, r4, ror fp
   3daa0:	andeq	sp, r3, r4, ror fp
   3daa4:	andeq	sp, r3, r4, ror fp
   3daa8:	andeq	sp, r3, r4, ror fp
   3daac:	andeq	sp, r3, r4, ror fp
   3dab0:	andeq	sp, r3, r4, ror fp
   3dab4:	andeq	sp, r3, r4, ror fp
   3dab8:	andeq	sp, r3, r4, ror fp
   3dabc:	andeq	sp, r3, r4, ror fp
   3dac0:	andeq	sp, r3, r4, ror fp
   3dac4:	andeq	sp, r3, r4, ror fp
   3dac8:	andeq	sp, r3, r4, ror fp
   3dacc:	andeq	sp, r3, r4, ror fp
   3dad0:	andeq	sp, r3, r4, ror fp
   3dad4:	andeq	sp, r3, r4, ror fp
   3dad8:	andeq	sp, r3, r4, ror fp
   3dadc:	andeq	sp, r3, r4, ror fp
   3dae0:	andeq	sp, r3, r0, ror fp
   3dae4:	andeq	sp, r3, r0, ror fp
   3dae8:	andeq	sp, r3, r0, ror fp
   3daec:	andeq	sp, r3, r0, ror fp
   3daf0:	andeq	sp, r3, r0, ror fp
   3daf4:	andeq	sp, r3, r0, ror fp
   3daf8:	andeq	sp, r3, r4, ror fp
   3dafc:	andeq	sp, r3, r4, ror fp
   3db00:	andeq	sp, r3, r4, ror fp
   3db04:	andeq	sp, r3, r4, ror fp
   3db08:	andeq	sp, r3, r4, ror fp
   3db0c:	andeq	sp, r3, r4, ror fp
   3db10:	andeq	sp, r3, r4, ror fp
   3db14:	andeq	sp, r3, r4, ror fp
   3db18:	andeq	sp, r3, r4, ror fp
   3db1c:	andeq	sp, r3, r4, ror fp
   3db20:	andeq	sp, r3, r4, ror fp
   3db24:	andeq	sp, r3, r4, ror fp
   3db28:	andeq	sp, r3, r4, ror fp
   3db2c:	andeq	sp, r3, r4, ror fp
   3db30:	andeq	sp, r3, r4, ror fp
   3db34:	andeq	sp, r3, r4, ror fp
   3db38:	andeq	sp, r3, r4, ror fp
   3db3c:	andeq	sp, r3, r4, ror fp
   3db40:	andeq	sp, r3, r4, ror fp
   3db44:	andeq	sp, r3, r4, ror fp
   3db48:	andeq	sp, r3, r4, ror fp
   3db4c:	andeq	sp, r3, r4, ror fp
   3db50:	andeq	sp, r3, r4, ror fp
   3db54:	andeq	sp, r3, r4, ror fp
   3db58:	andeq	sp, r3, r4, ror fp
   3db5c:	andeq	sp, r3, r4, ror fp
   3db60:	andeq	sp, r3, r0, ror fp
   3db64:	andeq	sp, r3, r0, ror fp
   3db68:	andeq	sp, r3, r0, ror fp
   3db6c:	andeq	sp, r3, r0, ror fp
   3db70:	bx	lr
   3db74:	mov	r0, #0
   3db78:	bx	lr
   3db7c:	sub	r0, r0, #9
   3db80:	cmp	r0, #23
   3db84:	movhi	r0, #0
   3db88:	bxhi	lr
   3db8c:	bic	r0, r0, #-16777216	; 0xff000000
   3db90:	movw	r1, #31
   3db94:	movt	r1, #128	; 0x80
   3db98:	mov	r2, #1
   3db9c:	and	r0, r2, r1, lsr r0
   3dba0:	bx	lr
   3dba4:	sub	r1, r0, #65	; 0x41
   3dba8:	mov	r0, #0
   3dbac:	cmp	r1, #26
   3dbb0:	movwcc	r0, #1
   3dbb4:	bx	lr
   3dbb8:	mov	r1, r0
   3dbbc:	sub	r2, r0, #48	; 0x30
   3dbc0:	mov	r0, #1
   3dbc4:	cmp	r2, #22
   3dbc8:	bhi	3dbe0 <__assert_fail@plt+0x2aff0>
   3dbcc:	mov	ip, #1
   3dbd0:	movw	r3, #1023	; 0x3ff
   3dbd4:	movt	r3, #126	; 0x7e
   3dbd8:	tst	r3, ip, lsl r2
   3dbdc:	bxne	lr
   3dbe0:	sub	r1, r1, #97	; 0x61
   3dbe4:	cmp	r1, #6
   3dbe8:	movcs	r0, #0
   3dbec:	bxcs	lr
   3dbf0:	bx	lr
   3dbf4:	sub	r1, r0, #65	; 0x41
   3dbf8:	cmp	r1, #26
   3dbfc:	addcc	r0, r0, #32
   3dc00:	bx	lr
   3dc04:	sub	r1, r0, #97	; 0x61
   3dc08:	cmp	r1, #26
   3dc0c:	subcc	r0, r0, #32
   3dc10:	bx	lr
   3dc14:	push	{r4, r5, r6, sl, fp, lr}
   3dc18:	add	fp, sp, #16
   3dc1c:	mov	r4, r0
   3dc20:	bl	12788 <__fpending@plt>
   3dc24:	mov	r5, r0
   3dc28:	mov	r0, r4
   3dc2c:	bl	125b4 <ferror@plt>
   3dc30:	mov	r6, r0
   3dc34:	mov	r0, r4
   3dc38:	bl	129d4 <fclose@plt>
   3dc3c:	cmp	r6, #0
   3dc40:	beq	3dc64 <__assert_fail@plt+0x2b074>
   3dc44:	mvn	r4, #0
   3dc48:	cmp	r0, #0
   3dc4c:	bne	3dc90 <__assert_fail@plt+0x2b0a0>
   3dc50:	bl	12908 <__errno_location@plt>
   3dc54:	mov	r1, #0
   3dc58:	str	r1, [r0]
   3dc5c:	mov	r0, r4
   3dc60:	pop	{r4, r5, r6, sl, fp, pc}
   3dc64:	cmp	r0, #0
   3dc68:	mov	r4, r0
   3dc6c:	mvnne	r4, #0
   3dc70:	cmp	r5, #0
   3dc74:	bne	3dc90 <__assert_fail@plt+0x2b0a0>
   3dc78:	cmp	r0, #0
   3dc7c:	beq	3dc90 <__assert_fail@plt+0x2b0a0>
   3dc80:	bl	12908 <__errno_location@plt>
   3dc84:	ldr	r0, [r0]
   3dc88:	subs	r4, r0, #9
   3dc8c:	mvnne	r4, #0
   3dc90:	mov	r0, r4
   3dc94:	pop	{r4, r5, r6, sl, fp, pc}
   3dc98:	mov	r1, #0
   3dc9c:	movw	r2, #62998	; 0xf616
   3dca0:	movt	r2, #149	; 0x95
   3dca4:	str	r1, [r0, #16]
   3dca8:	str	r1, [r0, #20]
   3dcac:	str	r2, [r0, #24]
   3dcb0:	bx	lr
   3dcb4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   3dcb8:	add	fp, sp, #24
   3dcbc:	mov	r5, r1
   3dcc0:	mov	r4, r0
   3dcc4:	ldr	r0, [r0, #24]
   3dcc8:	movw	r1, #62998	; 0xf616
   3dccc:	movt	r1, #149	; 0x95
   3dcd0:	cmp	r0, r1
   3dcd4:	bne	3dd6c <__assert_fail@plt+0x2b17c>
   3dcd8:	add	r6, r4, #8
   3dcdc:	add	r1, r4, #16
   3dce0:	ldrd	r2, [r1]
   3dce4:	orrs	r0, r2, r3
   3dce8:	beq	3dd20 <__assert_fail@plt+0x2b130>
   3dcec:	ldm	r4, {r0, r7}
   3dcf0:	ldrd	r8, [r5, #96]	; 0x60
   3dcf4:	eor	r7, r9, r7
   3dcf8:	eor	r0, r8, r0
   3dcfc:	orrs	r0, r0, r7
   3dd00:	bne	3dd20 <__assert_fail@plt+0x2b130>
   3dd04:	ldm	r6, {r0, r7}
   3dd08:	ldrd	r8, [r5]
   3dd0c:	eor	r7, r9, r7
   3dd10:	eor	r0, r8, r0
   3dd14:	orrs	r0, r0, r7
   3dd18:	mov	r0, #1
   3dd1c:	beq	3dd60 <__assert_fail@plt+0x2b170>
   3dd20:	adds	r8, r2, #1
   3dd24:	adc	r9, r3, #0
   3dd28:	strd	r8, [r1]
   3dd2c:	mov	r0, r8
   3dd30:	mov	r1, r9
   3dd34:	bl	3dd8c <__assert_fail@plt+0x2b19c>
   3dd38:	mov	r1, r0
   3dd3c:	mov	r0, #0
   3dd40:	cmp	r1, #0
   3dd44:	beq	3dd60 <__assert_fail@plt+0x2b170>
   3dd48:	orrs	r1, r8, r9
   3dd4c:	beq	3dd64 <__assert_fail@plt+0x2b174>
   3dd50:	ldrd	r2, [r5]
   3dd54:	strd	r2, [r6]
   3dd58:	ldrd	r2, [r5, #96]	; 0x60
   3dd5c:	strd	r2, [r4]
   3dd60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3dd64:	mov	r0, #1
   3dd68:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   3dd6c:	movw	r0, #19739	; 0x4d1b
   3dd70:	movt	r0, #4
   3dd74:	movw	r1, #19763	; 0x4d33
   3dd78:	movt	r1, #4
   3dd7c:	movw	r3, #19777	; 0x4d41
   3dd80:	movt	r3, #4
   3dd84:	mov	r2, #60	; 0x3c
   3dd88:	bl	12bf0 <__assert_fail@plt>
   3dd8c:	subs	r2, r0, #1
   3dd90:	and	r0, r0, r2
   3dd94:	sbc	r2, r1, #0
   3dd98:	and	r1, r1, r2
   3dd9c:	orr	r0, r0, r1
   3dda0:	clz	r0, r0
   3dda4:	lsr	r0, r0, #5
   3dda8:	bx	lr
   3ddac:	push	{r4, r5, r6, r7, fp, lr}
   3ddb0:	add	fp, sp, #16
   3ddb4:	mov	r5, r1
   3ddb8:	mov	r4, r0
   3ddbc:	ldr	r0, [r0, #4]
   3ddc0:	cmp	r0, r1
   3ddc4:	bcs	3ddf8 <__assert_fail@plt+0x2b208>
   3ddc8:	mov	r6, r3
   3ddcc:	cmp	r3, #0
   3ddd0:	beq	3de04 <__assert_fail@plt+0x2b214>
   3ddd4:	mvn	r0, #0
   3ddd8:	udiv	r0, r0, r6
   3dddc:	cmp	r0, r5
   3dde0:	bcs	3de04 <__assert_fail@plt+0x2b214>
   3dde4:	bl	12908 <__errno_location@plt>
   3dde8:	mov	r1, #12
   3ddec:	str	r1, [r0]
   3ddf0:	mov	r0, #0
   3ddf4:	pop	{r4, r5, r6, r7, fp, pc}
   3ddf8:	str	r5, [r4]
   3ddfc:	mov	r0, #1
   3de00:	pop	{r4, r5, r6, r7, fp, pc}
   3de04:	mul	r1, r6, r5
   3de08:	ldr	r0, [r4, #8]
   3de0c:	cmp	r0, r2
   3de10:	beq	3de28 <__assert_fail@plt+0x2b238>
   3de14:	bl	2f894 <__assert_fail@plt+0x1cca4>
   3de18:	mov	r7, r0
   3de1c:	cmp	r0, #0
   3de20:	bne	3de58 <__assert_fail@plt+0x2b268>
   3de24:	b	3de68 <__assert_fail@plt+0x2b278>
   3de28:	mov	r0, r1
   3de2c:	bl	2ed88 <__assert_fail@plt+0x1c198>
   3de30:	cmp	r0, #0
   3de34:	beq	3de68 <__assert_fail@plt+0x2b278>
   3de38:	mov	r7, r0
   3de3c:	ldr	r1, [r4, #8]
   3de40:	cmp	r1, #0
   3de44:	beq	3de58 <__assert_fail@plt+0x2b268>
   3de48:	ldr	r0, [r4]
   3de4c:	mul	r2, r0, r6
   3de50:	mov	r0, r7
   3de54:	bl	125f0 <memcpy@plt>
   3de58:	str	r5, [r4]
   3de5c:	stmib	r4, {r5, r7}
   3de60:	mov	r0, #1
   3de64:	pop	{r4, r5, r6, r7, fp, pc}
   3de68:	mov	r0, #0
   3de6c:	pop	{r4, r5, r6, r7, fp, pc}
   3de70:	mov	r1, r0
   3de74:	mov	r0, #0
   3de78:	b	125d8 <clock_gettime@plt>
   3de7c:	push	{fp, lr}
   3de80:	mov	fp, sp
   3de84:	bl	3de70 <__assert_fail@plt+0x2b280>
   3de88:	pop	{fp, pc}
   3de8c:	push	{r4, sl, fp, lr}
   3de90:	add	fp, sp, #8
   3de94:	sub	sp, sp, #264	; 0x108
   3de98:	add	r1, sp, #7
   3de9c:	movw	r2, #257	; 0x101
   3dea0:	bl	3e29c <__assert_fail@plt+0x2b6ac>
   3dea4:	mov	r4, #0
   3dea8:	cmp	r0, #0
   3deac:	bne	3deec <__assert_fail@plt+0x2b2fc>
   3deb0:	add	r0, sp, #7
   3deb4:	movw	r1, #61174	; 0xeef6
   3deb8:	movt	r1, #3
   3debc:	mov	r2, #2
   3dec0:	bl	128a8 <bcmp@plt>
   3dec4:	cmp	r0, #0
   3dec8:	beq	3deec <__assert_fail@plt+0x2b2fc>
   3decc:	add	r0, sp, #7
   3ded0:	movw	r1, #19844	; 0x4d84
   3ded4:	movt	r1, #4
   3ded8:	mov	r2, #6
   3dedc:	bl	128a8 <bcmp@plt>
   3dee0:	mov	r4, r0
   3dee4:	cmp	r0, #0
   3dee8:	movwne	r4, #1
   3deec:	mov	r0, r4
   3def0:	sub	sp, fp, #8
   3def4:	pop	{r4, sl, fp, pc}
   3def8:	mov	r2, #0
   3defc:	str	r2, [r0, #20]
   3df00:	str	r2, [r0, #24]
   3df04:	mov	r3, #1
   3df08:	strb	r3, [r0, #28]
   3df0c:	str	r1, [r0, r2, lsl #2]
   3df10:	add	r2, r2, #1
   3df14:	cmp	r2, #4
   3df18:	bne	3df0c <__assert_fail@plt+0x2b31c>
   3df1c:	str	r1, [r0, #16]
   3df20:	bx	lr
   3df24:	ldrb	r0, [r0, #28]
   3df28:	bx	lr
   3df2c:	ldr	r2, [r0, #20]
   3df30:	ldrb	r3, [r0, #28]
   3df34:	eor	r3, r3, #1
   3df38:	add	r2, r2, r3
   3df3c:	and	r2, r2, #3
   3df40:	ldr	ip, [r0, r2, lsl #2]
   3df44:	str	r1, [r0, r2, lsl #2]
   3df48:	str	r2, [r0, #20]
   3df4c:	ldr	r1, [r0, #24]
   3df50:	cmp	r2, r1
   3df54:	addeq	r1, r1, r3
   3df58:	andeq	r1, r1, #3
   3df5c:	streq	r1, [r0, #24]
   3df60:	mov	r1, #0
   3df64:	strb	r1, [r0, #28]
   3df68:	mov	r0, ip
   3df6c:	bx	lr
   3df70:	push	{r4, sl, fp, lr}
   3df74:	add	fp, sp, #8
   3df78:	mov	r4, r0
   3df7c:	bl	3df24 <__assert_fail@plt+0x2b334>
   3df80:	cmp	r0, #0
   3df84:	bne	3dfbc <__assert_fail@plt+0x2b3cc>
   3df88:	ldr	r1, [r4, #16]
   3df8c:	ldr	r2, [r4, #20]
   3df90:	ldr	r0, [r4, r2, lsl #2]
   3df94:	str	r1, [r4, r2, lsl #2]
   3df98:	ldr	r1, [r4, #20]
   3df9c:	ldr	r2, [r4, #24]
   3dfa0:	cmp	r1, r2
   3dfa4:	moveq	r1, #1
   3dfa8:	strbeq	r1, [r4, #28]
   3dfac:	subne	r1, r1, #1
   3dfb0:	andne	r1, r1, #3
   3dfb4:	strne	r1, [r4, #20]
   3dfb8:	pop	{r4, sl, fp, pc}
   3dfbc:	bl	12b9c <abort@plt>
   3dfc0:	push	{fp, lr}
   3dfc4:	mov	fp, sp
   3dfc8:	bl	12908 <__errno_location@plt>
   3dfcc:	mov	r1, #12
   3dfd0:	str	r1, [r0]
   3dfd4:	mov	r0, #0
   3dfd8:	pop	{fp, pc}
   3dfdc:	b	2ed88 <__assert_fail@plt+0x1c198>
   3dfe0:	cmp	r1, #0
   3dfe4:	orreq	r1, r1, #1
   3dfe8:	b	2f894 <__assert_fail@plt+0x1cca4>
   3dfec:	b	2c4f4 <__assert_fail@plt+0x19904>
   3dff0:	clz	r3, r2
   3dff4:	lsr	ip, r3, #5
   3dff8:	clz	r3, r1
   3dffc:	lsr	r3, r3, #5
   3e000:	orrs	r3, r3, ip
   3e004:	movwne	r1, #1
   3e008:	movwne	r2, #1
   3e00c:	b	2f8e8 <__assert_fail@plt+0x1ccf8>
   3e010:	push	{fp, lr}
   3e014:	mov	fp, sp
   3e018:	mov	r0, #14
   3e01c:	bl	12a64 <nl_langinfo@plt>
   3e020:	movw	r1, #2407	; 0x967
   3e024:	movt	r1, #4
   3e028:	cmp	r0, #0
   3e02c:	movne	r1, r0
   3e030:	ldrb	r2, [r1]
   3e034:	movw	r0, #19850	; 0x4d8a
   3e038:	movt	r0, #4
   3e03c:	cmp	r2, #0
   3e040:	movne	r0, r1
   3e044:	pop	{fp, pc}
   3e048:	push	{r4, sl, fp, lr}
   3e04c:	add	fp, sp, #8
   3e050:	mov	r4, #0
   3e054:	adds	r0, r0, #16
   3e058:	adc	r1, r4, #0
   3e05c:	rsb	r2, r1, #0
   3e060:	eors	r2, r2, r1
   3e064:	movwne	r2, #1
   3e068:	cmp	r0, #0
   3e06c:	bmi	3e08c <__assert_fail@plt+0x2b49c>
   3e070:	cmp	r2, #0
   3e074:	asreq	r2, r0, #31
   3e078:	eoreq	r3, r0, r0
   3e07c:	andeq	r2, r2, #1
   3e080:	eoreq	r1, r1, r2
   3e084:	orrseq	r1, r3, r1
   3e088:	beq	3e094 <__assert_fail@plt+0x2b4a4>
   3e08c:	mov	r0, r4
   3e090:	pop	{r4, sl, fp, pc}
   3e094:	bl	1280c <malloc@plt>
   3e098:	cmp	r0, #0
   3e09c:	addne	r4, r0, #8
   3e0a0:	movne	r1, #8
   3e0a4:	bfine	r4, r1, #0, #4
   3e0a8:	subne	r0, r4, r0
   3e0ac:	strbne	r0, [r4, #-1]
   3e0b0:	mov	r0, r4
   3e0b4:	pop	{r4, sl, fp, pc}
   3e0b8:	push	{fp, lr}
   3e0bc:	mov	fp, sp
   3e0c0:	tst	r0, #7
   3e0c4:	bne	3e0e0 <__assert_fail@plt+0x2b4f0>
   3e0c8:	tst	r0, #8
   3e0cc:	popeq	{fp, pc}
   3e0d0:	ldrb	r1, [r0, #-1]
   3e0d4:	sub	r0, r0, r1
   3e0d8:	pop	{fp, lr}
   3e0dc:	b	2cad4 <__assert_fail@plt+0x19ee4>
   3e0e0:	bl	12b9c <abort@plt>
   3e0e4:	push	{r4, sl, fp, lr}
   3e0e8:	add	fp, sp, #8
   3e0ec:	mov	r4, r0
   3e0f0:	bl	1256c <wcwidth@plt>
   3e0f4:	cmn	r0, #1
   3e0f8:	popgt	{r4, sl, fp, pc}
   3e0fc:	mov	r0, r4
   3e100:	bl	126d4 <iswcntrl@plt>
   3e104:	clz	r0, r0
   3e108:	lsr	r0, r0, #5
   3e10c:	pop	{r4, sl, fp, pc}
   3e110:	push	{r4, r5, r6, sl, fp, lr}
   3e114:	add	fp, sp, #16
   3e118:	mov	r5, r1
   3e11c:	mov	r4, r0
   3e120:	ldr	r6, [r1], #16
   3e124:	cmp	r6, r1
   3e128:	bne	3e13c <__assert_fail@plt+0x2b54c>
   3e12c:	ldr	r2, [r5, #4]
   3e130:	add	r6, r4, #16
   3e134:	mov	r0, r6
   3e138:	bl	125f0 <memcpy@plt>
   3e13c:	str	r6, [r4]
   3e140:	ldr	r0, [r5, #4]
   3e144:	str	r0, [r4, #4]
   3e148:	ldrb	r0, [r5, #8]
   3e14c:	strb	r0, [r4, #8]
   3e150:	cmp	r0, #0
   3e154:	ldrne	r0, [r5, #12]
   3e158:	strne	r0, [r4, #12]
   3e15c:	pop	{r4, r5, r6, sl, fp, pc}
   3e160:	ubfx	r1, r0, #5, #3
   3e164:	movw	r2, #19856	; 0x4d90
   3e168:	movt	r2, #4
   3e16c:	ldr	r1, [r2, r1, lsl #2]
   3e170:	and	r0, r0, #31
   3e174:	mov	r2, #1
   3e178:	and	r0, r1, r2, lsl r0
   3e17c:	cmp	r0, #0
   3e180:	movwne	r0, #1
   3e184:	bx	lr
   3e188:	push	{r4, r5, r6, sl, fp, lr}
   3e18c:	add	fp, sp, #16
   3e190:	sub	sp, sp, #56	; 0x38
   3e194:	mov	r5, r0
   3e198:	bl	12758 <__ctype_get_mb_cur_max@plt>
   3e19c:	cmp	r0, #2
   3e1a0:	bcc	3e22c <__assert_fail@plt+0x2b63c>
   3e1a4:	mov	r4, #0
   3e1a8:	str	r4, [sp, #8]
   3e1ac:	str	r4, [sp, #4]
   3e1b0:	strb	r4, [sp, #12]
   3e1b4:	strb	r4, [sp]
   3e1b8:	str	r5, [sp, #16]
   3e1bc:	mov	r0, sp
   3e1c0:	bl	24e30 <__assert_fail@plt+0x12240>
   3e1c4:	ldrb	r0, [sp, #24]
   3e1c8:	cmp	r0, #0
   3e1cc:	beq	3e1dc <__assert_fail@plt+0x2b5ec>
   3e1d0:	ldr	r0, [sp, #28]
   3e1d4:	cmp	r0, #0
   3e1d8:	beq	3e220 <__assert_fail@plt+0x2b630>
   3e1dc:	mov	r6, #0
   3e1e0:	mov	r5, sp
   3e1e4:	mov	r4, #0
   3e1e8:	strb	r6, [sp, #12]
   3e1ec:	ldr	r0, [sp, #16]
   3e1f0:	ldr	r1, [sp, #20]
   3e1f4:	add	r0, r0, r1
   3e1f8:	str	r0, [sp, #16]
   3e1fc:	mov	r0, r5
   3e200:	bl	24e30 <__assert_fail@plt+0x12240>
   3e204:	add	r4, r4, #1
   3e208:	ldr	r0, [sp, #28]
   3e20c:	ldrb	r1, [sp, #24]
   3e210:	cmp	r1, #0
   3e214:	beq	3e1e8 <__assert_fail@plt+0x2b5f8>
   3e218:	cmp	r0, #0
   3e21c:	bne	3e1e8 <__assert_fail@plt+0x2b5f8>
   3e220:	mov	r0, r4
   3e224:	sub	sp, fp, #16
   3e228:	pop	{r4, r5, r6, sl, fp, pc}
   3e22c:	mov	r0, r5
   3e230:	sub	sp, fp, #16
   3e234:	pop	{r4, r5, r6, sl, fp, lr}
   3e238:	b	128c0 <strlen@plt>
   3e23c:	push	{r4, r5, r6, sl, fp, lr}
   3e240:	add	fp, sp, #16
   3e244:	mov	r4, r3
   3e248:	orr	r2, r2, #18688	; 0x4900
   3e24c:	orr	r2, r2, #524288	; 0x80000
   3e250:	bl	25648 <__assert_fail@plt+0x12a58>
   3e254:	mov	r5, r0
   3e258:	mov	r0, #0
   3e25c:	cmp	r5, #0
   3e260:	bmi	3e298 <__assert_fail@plt+0x2b6a8>
   3e264:	mov	r0, r5
   3e268:	bl	12aac <fdopendir@plt>
   3e26c:	cmp	r0, #0
   3e270:	beq	3e27c <__assert_fail@plt+0x2b68c>
   3e274:	str	r5, [r4]
   3e278:	pop	{r4, r5, r6, sl, fp, pc}
   3e27c:	bl	12908 <__errno_location@plt>
   3e280:	mov	r4, r0
   3e284:	ldr	r6, [r0]
   3e288:	mov	r0, r5
   3e28c:	bl	12ba8 <close@plt>
   3e290:	str	r6, [r4]
   3e294:	mov	r0, #0
   3e298:	pop	{r4, r5, r6, sl, fp, pc}
   3e29c:	b	3e2a0 <__assert_fail@plt+0x2b6b0>
   3e2a0:	push	{r4, r5, r6, r7, fp, lr}
   3e2a4:	add	fp, sp, #16
   3e2a8:	mov	r6, r2
   3e2ac:	mov	r4, r1
   3e2b0:	bl	3e338 <__assert_fail@plt+0x2b748>
   3e2b4:	cmp	r0, #0
   3e2b8:	beq	3e2e8 <__assert_fail@plt+0x2b6f8>
   3e2bc:	mov	r7, r0
   3e2c0:	bl	128c0 <strlen@plt>
   3e2c4:	cmp	r0, r6
   3e2c8:	bcs	3e304 <__assert_fail@plt+0x2b714>
   3e2cc:	add	r2, r0, #1
   3e2d0:	mov	r0, r4
   3e2d4:	mov	r1, r7
   3e2d8:	bl	125f0 <memcpy@plt>
   3e2dc:	mov	r5, #0
   3e2e0:	mov	r0, r5
   3e2e4:	pop	{r4, r5, r6, r7, fp, pc}
   3e2e8:	mov	r5, #22
   3e2ec:	cmp	r6, #0
   3e2f0:	beq	3e32c <__assert_fail@plt+0x2b73c>
   3e2f4:	mov	r0, #0
   3e2f8:	strb	r0, [r4]
   3e2fc:	mov	r0, r5
   3e300:	pop	{r4, r5, r6, r7, fp, pc}
   3e304:	mov	r5, #34	; 0x22
   3e308:	cmp	r6, #0
   3e30c:	beq	3e32c <__assert_fail@plt+0x2b73c>
   3e310:	sub	r6, r6, #1
   3e314:	mov	r0, r4
   3e318:	mov	r1, r7
   3e31c:	mov	r2, r6
   3e320:	bl	125f0 <memcpy@plt>
   3e324:	mov	r0, #0
   3e328:	strb	r0, [r4, r6]
   3e32c:	mov	r0, r5
   3e330:	pop	{r4, r5, r6, r7, fp, pc}
   3e334:	b	3e338 <__assert_fail@plt+0x2b748>
   3e338:	mov	r1, #0
   3e33c:	b	12a1c <setlocale@plt>
   3e340:	eor	r1, r1, #-2147483648	; 0x80000000
   3e344:	b	3e34c <__assert_fail@plt+0x2b75c>
   3e348:	eor	r3, r3, #-2147483648	; 0x80000000
   3e34c:	push	{r4, r5, lr}
   3e350:	lsl	r4, r1, #1
   3e354:	lsl	r5, r3, #1
   3e358:	teq	r4, r5
   3e35c:	teqeq	r0, r2
   3e360:	orrsne	ip, r4, r0
   3e364:	orrsne	ip, r5, r2
   3e368:	mvnsne	ip, r4, asr #21
   3e36c:	mvnsne	ip, r5, asr #21
   3e370:	beq	3e55c <__assert_fail@plt+0x2b96c>
   3e374:	lsr	r4, r4, #21
   3e378:	rsbs	r5, r4, r5, lsr #21
   3e37c:	rsblt	r5, r5, #0
   3e380:	ble	3e3a0 <__assert_fail@plt+0x2b7b0>
   3e384:	add	r4, r4, r5
   3e388:	eor	r2, r0, r2
   3e38c:	eor	r3, r1, r3
   3e390:	eor	r0, r2, r0
   3e394:	eor	r1, r3, r1
   3e398:	eor	r2, r0, r2
   3e39c:	eor	r3, r1, r3
   3e3a0:	cmp	r5, #54	; 0x36
   3e3a4:	pophi	{r4, r5, pc}
   3e3a8:	tst	r1, #-2147483648	; 0x80000000
   3e3ac:	lsl	r1, r1, #12
   3e3b0:	mov	ip, #1048576	; 0x100000
   3e3b4:	orr	r1, ip, r1, lsr #12
   3e3b8:	beq	3e3c4 <__assert_fail@plt+0x2b7d4>
   3e3bc:	rsbs	r0, r0, #0
   3e3c0:	rsc	r1, r1, #0
   3e3c4:	tst	r3, #-2147483648	; 0x80000000
   3e3c8:	lsl	r3, r3, #12
   3e3cc:	orr	r3, ip, r3, lsr #12
   3e3d0:	beq	3e3dc <__assert_fail@plt+0x2b7ec>
   3e3d4:	rsbs	r2, r2, #0
   3e3d8:	rsc	r3, r3, #0
   3e3dc:	teq	r4, r5
   3e3e0:	beq	3e544 <__assert_fail@plt+0x2b954>
   3e3e4:	sub	r4, r4, #1
   3e3e8:	rsbs	lr, r5, #32
   3e3ec:	blt	3e408 <__assert_fail@plt+0x2b818>
   3e3f0:	lsl	ip, r2, lr
   3e3f4:	adds	r0, r0, r2, lsr r5
   3e3f8:	adc	r1, r1, #0
   3e3fc:	adds	r0, r0, r3, lsl lr
   3e400:	adcs	r1, r1, r3, asr r5
   3e404:	b	3e424 <__assert_fail@plt+0x2b834>
   3e408:	sub	r5, r5, #32
   3e40c:	add	lr, lr, #32
   3e410:	cmp	r2, #1
   3e414:	lsl	ip, r3, lr
   3e418:	orrcs	ip, ip, #2
   3e41c:	adds	r0, r0, r3, asr r5
   3e420:	adcs	r1, r1, r3, asr #31
   3e424:	and	r5, r1, #-2147483648	; 0x80000000
   3e428:	bpl	3e438 <__assert_fail@plt+0x2b848>
   3e42c:	rsbs	ip, ip, #0
   3e430:	rscs	r0, r0, #0
   3e434:	rsc	r1, r1, #0
   3e438:	cmp	r1, #1048576	; 0x100000
   3e43c:	bcc	3e47c <__assert_fail@plt+0x2b88c>
   3e440:	cmp	r1, #2097152	; 0x200000
   3e444:	bcc	3e464 <__assert_fail@plt+0x2b874>
   3e448:	lsrs	r1, r1, #1
   3e44c:	rrxs	r0, r0
   3e450:	rrx	ip, ip
   3e454:	add	r4, r4, #1
   3e458:	lsl	r2, r4, #21
   3e45c:	cmn	r2, #4194304	; 0x400000
   3e460:	bcs	3e5bc <__assert_fail@plt+0x2b9cc>
   3e464:	cmp	ip, #-2147483648	; 0x80000000
   3e468:	lsrseq	ip, r0, #1
   3e46c:	adcs	r0, r0, #0
   3e470:	adc	r1, r1, r4, lsl #20
   3e474:	orr	r1, r1, r5
   3e478:	pop	{r4, r5, pc}
   3e47c:	lsls	ip, ip, #1
   3e480:	adcs	r0, r0, r0
   3e484:	adc	r1, r1, r1
   3e488:	tst	r1, #1048576	; 0x100000
   3e48c:	sub	r4, r4, #1
   3e490:	bne	3e464 <__assert_fail@plt+0x2b874>
   3e494:	teq	r1, #0
   3e498:	moveq	r1, r0
   3e49c:	moveq	r0, #0
   3e4a0:	clz	r3, r1
   3e4a4:	addeq	r3, r3, #32
   3e4a8:	sub	r3, r3, #11
   3e4ac:	subs	r2, r3, #32
   3e4b0:	bge	3e4d4 <__assert_fail@plt+0x2b8e4>
   3e4b4:	adds	r2, r2, #12
   3e4b8:	ble	3e4d0 <__assert_fail@plt+0x2b8e0>
   3e4bc:	add	ip, r2, #20
   3e4c0:	rsb	r2, r2, #12
   3e4c4:	lsl	r0, r1, ip
   3e4c8:	lsr	r1, r1, r2
   3e4cc:	b	3e4e4 <__assert_fail@plt+0x2b8f4>
   3e4d0:	add	r2, r2, #20
   3e4d4:	rsble	ip, r2, #32
   3e4d8:	lsl	r1, r1, r2
   3e4dc:	orrle	r1, r1, r0, lsr ip
   3e4e0:	lslle	r0, r0, r2
   3e4e4:	subs	r4, r4, r3
   3e4e8:	addge	r1, r1, r4, lsl #20
   3e4ec:	orrge	r1, r1, r5
   3e4f0:	popge	{r4, r5, pc}
   3e4f4:	mvn	r4, r4
   3e4f8:	subs	r4, r4, #31
   3e4fc:	bge	3e538 <__assert_fail@plt+0x2b948>
   3e500:	adds	r4, r4, #12
   3e504:	bgt	3e520 <__assert_fail@plt+0x2b930>
   3e508:	add	r4, r4, #20
   3e50c:	rsb	r2, r4, #32
   3e510:	lsr	r0, r0, r4
   3e514:	orr	r0, r0, r1, lsl r2
   3e518:	orr	r1, r5, r1, lsr r4
   3e51c:	pop	{r4, r5, pc}
   3e520:	rsb	r4, r4, #12
   3e524:	rsb	r2, r4, #32
   3e528:	lsr	r0, r0, r2
   3e52c:	orr	r0, r0, r1, lsl r4
   3e530:	mov	r1, r5
   3e534:	pop	{r4, r5, pc}
   3e538:	lsr	r0, r1, r4
   3e53c:	mov	r1, r5
   3e540:	pop	{r4, r5, pc}
   3e544:	teq	r4, #0
   3e548:	eor	r3, r3, #1048576	; 0x100000
   3e54c:	eoreq	r1, r1, #1048576	; 0x100000
   3e550:	addeq	r4, r4, #1
   3e554:	subne	r5, r5, #1
   3e558:	b	3e3e4 <__assert_fail@plt+0x2b7f4>
   3e55c:	mvns	ip, r4, asr #21
   3e560:	mvnsne	ip, r5, asr #21
   3e564:	beq	3e5cc <__assert_fail@plt+0x2b9dc>
   3e568:	teq	r4, r5
   3e56c:	teqeq	r0, r2
   3e570:	beq	3e584 <__assert_fail@plt+0x2b994>
   3e574:	orrs	ip, r4, r0
   3e578:	moveq	r1, r3
   3e57c:	moveq	r0, r2
   3e580:	pop	{r4, r5, pc}
   3e584:	teq	r1, r3
   3e588:	movne	r1, #0
   3e58c:	movne	r0, #0
   3e590:	popne	{r4, r5, pc}
   3e594:	lsrs	ip, r4, #21
   3e598:	bne	3e5ac <__assert_fail@plt+0x2b9bc>
   3e59c:	lsls	r0, r0, #1
   3e5a0:	adcs	r1, r1, r1
   3e5a4:	orrcs	r1, r1, #-2147483648	; 0x80000000
   3e5a8:	pop	{r4, r5, pc}
   3e5ac:	adds	r4, r4, #4194304	; 0x400000
   3e5b0:	addcc	r1, r1, #1048576	; 0x100000
   3e5b4:	popcc	{r4, r5, pc}
   3e5b8:	and	r5, r1, #-2147483648	; 0x80000000
   3e5bc:	orr	r1, r5, #2130706432	; 0x7f000000
   3e5c0:	orr	r1, r1, #15728640	; 0xf00000
   3e5c4:	mov	r0, #0
   3e5c8:	pop	{r4, r5, pc}
   3e5cc:	mvns	ip, r4, asr #21
   3e5d0:	movne	r1, r3
   3e5d4:	movne	r0, r2
   3e5d8:	mvnseq	ip, r5, asr #21
   3e5dc:	movne	r3, r1
   3e5e0:	movne	r2, r0
   3e5e4:	orrs	r4, r0, r1, lsl #12
   3e5e8:	orrseq	r5, r2, r3, lsl #12
   3e5ec:	teqeq	r1, r3
   3e5f0:	orrne	r1, r1, #524288	; 0x80000
   3e5f4:	pop	{r4, r5, pc}
   3e5f8:	teq	r0, #0
   3e5fc:	moveq	r1, #0
   3e600:	bxeq	lr
   3e604:	push	{r4, r5, lr}
   3e608:	mov	r4, #1024	; 0x400
   3e60c:	add	r4, r4, #50	; 0x32
   3e610:	mov	r5, #0
   3e614:	mov	r1, #0
   3e618:	b	3e494 <__assert_fail@plt+0x2b8a4>
   3e61c:	teq	r0, #0
   3e620:	moveq	r1, #0
   3e624:	bxeq	lr
   3e628:	push	{r4, r5, lr}
   3e62c:	mov	r4, #1024	; 0x400
   3e630:	add	r4, r4, #50	; 0x32
   3e634:	ands	r5, r0, #-2147483648	; 0x80000000
   3e638:	rsbmi	r0, r0, #0
   3e63c:	mov	r1, #0
   3e640:	b	3e494 <__assert_fail@plt+0x2b8a4>
   3e644:	lsls	r2, r0, #1
   3e648:	asr	r1, r2, #3
   3e64c:	rrx	r1, r1
   3e650:	lsl	r0, r2, #28
   3e654:	andsne	r3, r2, #-16777216	; 0xff000000
   3e658:	teqne	r3, #-16777216	; 0xff000000
   3e65c:	eorne	r1, r1, #939524096	; 0x38000000
   3e660:	bxne	lr
   3e664:	bics	r2, r2, #-16777216	; 0xff000000
   3e668:	bxeq	lr
   3e66c:	teq	r3, #-16777216	; 0xff000000
   3e670:	orreq	r1, r1, #524288	; 0x80000
   3e674:	bxeq	lr
   3e678:	push	{r4, r5, lr}
   3e67c:	mov	r4, #896	; 0x380
   3e680:	and	r5, r1, #-2147483648	; 0x80000000
   3e684:	bic	r1, r1, #-2147483648	; 0x80000000
   3e688:	b	3e494 <__assert_fail@plt+0x2b8a4>
   3e68c:	orrs	r2, r0, r1
   3e690:	bxeq	lr
   3e694:	push	{r4, r5, lr}
   3e698:	mov	r5, #0
   3e69c:	b	3e6bc <__assert_fail@plt+0x2bacc>
   3e6a0:	orrs	r2, r0, r1
   3e6a4:	bxeq	lr
   3e6a8:	push	{r4, r5, lr}
   3e6ac:	ands	r5, r1, #-2147483648	; 0x80000000
   3e6b0:	bpl	3e6bc <__assert_fail@plt+0x2bacc>
   3e6b4:	rsbs	r0, r0, #0
   3e6b8:	rsc	r1, r1, #0
   3e6bc:	mov	r4, #1024	; 0x400
   3e6c0:	add	r4, r4, #50	; 0x32
   3e6c4:	lsrs	ip, r1, #22
   3e6c8:	beq	3e438 <__assert_fail@plt+0x2b848>
   3e6cc:	mov	r2, #3
   3e6d0:	lsrs	ip, ip, #3
   3e6d4:	addne	r2, r2, #3
   3e6d8:	lsrs	ip, ip, #3
   3e6dc:	addne	r2, r2, #3
   3e6e0:	add	r2, r2, ip, lsr #3
   3e6e4:	rsb	r3, r2, #32
   3e6e8:	lsl	ip, r0, r3
   3e6ec:	lsr	r0, r0, r2
   3e6f0:	orr	r0, r0, r1, lsl r3
   3e6f4:	lsr	r1, r1, r2
   3e6f8:	add	r4, r4, r2
   3e6fc:	b	3e438 <__assert_fail@plt+0x2b848>
   3e700:	cmp	r3, #0
   3e704:	cmpeq	r2, #0
   3e708:	bne	3e72c <__assert_fail@plt+0x2bb3c>
   3e70c:	cmp	r1, #0
   3e710:	movlt	r1, #-2147483648	; 0x80000000
   3e714:	movlt	r0, #0
   3e718:	blt	3e728 <__assert_fail@plt+0x2bb38>
   3e71c:	cmpeq	r0, #0
   3e720:	mvnne	r1, #-2147483648	; 0x80000000
   3e724:	mvnne	r0, #0
   3e728:	b	3e810 <__assert_fail@plt+0x2bc20>
   3e72c:	sub	sp, sp, #8
   3e730:	push	{sp, lr}
   3e734:	cmp	r1, #0
   3e738:	blt	3e758 <__assert_fail@plt+0x2bb68>
   3e73c:	cmp	r3, #0
   3e740:	blt	3e78c <__assert_fail@plt+0x2bb9c>
   3e744:	bl	3e860 <__assert_fail@plt+0x2bc70>
   3e748:	ldr	lr, [sp, #4]
   3e74c:	add	sp, sp, #8
   3e750:	pop	{r2, r3}
   3e754:	bx	lr
   3e758:	rsbs	r0, r0, #0
   3e75c:	sbc	r1, r1, r1, lsl #1
   3e760:	cmp	r3, #0
   3e764:	blt	3e7b0 <__assert_fail@plt+0x2bbc0>
   3e768:	bl	3e860 <__assert_fail@plt+0x2bc70>
   3e76c:	ldr	lr, [sp, #4]
   3e770:	add	sp, sp, #8
   3e774:	pop	{r2, r3}
   3e778:	rsbs	r0, r0, #0
   3e77c:	sbc	r1, r1, r1, lsl #1
   3e780:	rsbs	r2, r2, #0
   3e784:	sbc	r3, r3, r3, lsl #1
   3e788:	bx	lr
   3e78c:	rsbs	r2, r2, #0
   3e790:	sbc	r3, r3, r3, lsl #1
   3e794:	bl	3e860 <__assert_fail@plt+0x2bc70>
   3e798:	ldr	lr, [sp, #4]
   3e79c:	add	sp, sp, #8
   3e7a0:	pop	{r2, r3}
   3e7a4:	rsbs	r0, r0, #0
   3e7a8:	sbc	r1, r1, r1, lsl #1
   3e7ac:	bx	lr
   3e7b0:	rsbs	r2, r2, #0
   3e7b4:	sbc	r3, r3, r3, lsl #1
   3e7b8:	bl	3e860 <__assert_fail@plt+0x2bc70>
   3e7bc:	ldr	lr, [sp, #4]
   3e7c0:	add	sp, sp, #8
   3e7c4:	pop	{r2, r3}
   3e7c8:	rsbs	r2, r2, #0
   3e7cc:	sbc	r3, r3, r3, lsl #1
   3e7d0:	bx	lr
   3e7d4:	cmp	r3, #0
   3e7d8:	cmpeq	r2, #0
   3e7dc:	bne	3e7f4 <__assert_fail@plt+0x2bc04>
   3e7e0:	cmp	r1, #0
   3e7e4:	cmpeq	r0, #0
   3e7e8:	mvnne	r1, #0
   3e7ec:	mvnne	r0, #0
   3e7f0:	b	3e810 <__assert_fail@plt+0x2bc20>
   3e7f4:	sub	sp, sp, #8
   3e7f8:	push	{sp, lr}
   3e7fc:	bl	3e860 <__assert_fail@plt+0x2bc70>
   3e800:	ldr	lr, [sp, #4]
   3e804:	add	sp, sp, #8
   3e808:	pop	{r2, r3}
   3e80c:	bx	lr
   3e810:	push	{r1, lr}
   3e814:	mov	r0, #8
   3e818:	bl	124ac <raise@plt>
   3e81c:	pop	{r1, pc}
   3e820:	vmov	d6, r0, r1
   3e824:	vldr	d7, [pc, #36]	; 3e850 <__assert_fail@plt+0x2bc60>
   3e828:	vldr	d5, [pc, #40]	; 3e858 <__assert_fail@plt+0x2bc68>
   3e82c:	vmul.f64	d7, d6, d7
   3e830:	vcvt.u32.f64	s14, d7
   3e834:	vcvt.f64.u32	d4, s14
   3e838:	vmov	r1, s14
   3e83c:	vmls.f64	d6, d4, d5
   3e840:	vcvt.u32.f64	s15, d6
   3e844:	vmov	r0, s15
   3e848:	bx	lr
   3e84c:	nop			; (mov r0, r0)
   3e850:	andeq	r0, r0, r0
   3e854:	ldclcc	0, cr0, [r0]
   3e858:	andeq	r0, r0, r0
   3e85c:	mvnsmi	r0, r0
   3e860:	cmp	r1, r3
   3e864:	cmpeq	r0, r2
   3e868:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e86c:	mov	r4, r0
   3e870:	movcc	r0, #0
   3e874:	mov	r5, r1
   3e878:	ldr	lr, [sp, #36]	; 0x24
   3e87c:	movcc	r1, r0
   3e880:	bcc	3e97c <__assert_fail@plt+0x2bd8c>
   3e884:	cmp	r3, #0
   3e888:	clzeq	ip, r2
   3e88c:	clzne	ip, r3
   3e890:	addeq	ip, ip, #32
   3e894:	cmp	r5, #0
   3e898:	clzeq	r1, r4
   3e89c:	addeq	r1, r1, #32
   3e8a0:	clzne	r1, r5
   3e8a4:	sub	ip, ip, r1
   3e8a8:	sub	sl, ip, #32
   3e8ac:	lsl	r9, r3, ip
   3e8b0:	rsb	fp, ip, #32
   3e8b4:	orr	r9, r9, r2, lsl sl
   3e8b8:	orr	r9, r9, r2, lsr fp
   3e8bc:	lsl	r8, r2, ip
   3e8c0:	cmp	r5, r9
   3e8c4:	cmpeq	r4, r8
   3e8c8:	movcc	r0, #0
   3e8cc:	movcc	r1, r0
   3e8d0:	bcc	3e8ec <__assert_fail@plt+0x2bcfc>
   3e8d4:	mov	r0, #1
   3e8d8:	subs	r4, r4, r8
   3e8dc:	lsl	r1, r0, sl
   3e8e0:	orr	r1, r1, r0, lsr fp
   3e8e4:	lsl	r0, r0, ip
   3e8e8:	sbc	r5, r5, r9
   3e8ec:	cmp	ip, #0
   3e8f0:	beq	3e97c <__assert_fail@plt+0x2bd8c>
   3e8f4:	lsr	r6, r8, #1
   3e8f8:	orr	r6, r6, r9, lsl #31
   3e8fc:	lsr	r7, r9, #1
   3e900:	mov	r2, ip
   3e904:	b	3e928 <__assert_fail@plt+0x2bd38>
   3e908:	subs	r3, r4, r6
   3e90c:	sbc	r8, r5, r7
   3e910:	adds	r3, r3, r3
   3e914:	adc	r8, r8, r8
   3e918:	adds	r4, r3, #1
   3e91c:	adc	r5, r8, #0
   3e920:	subs	r2, r2, #1
   3e924:	beq	3e944 <__assert_fail@plt+0x2bd54>
   3e928:	cmp	r5, r7
   3e92c:	cmpeq	r4, r6
   3e930:	bcs	3e908 <__assert_fail@plt+0x2bd18>
   3e934:	adds	r4, r4, r4
   3e938:	adc	r5, r5, r5
   3e93c:	subs	r2, r2, #1
   3e940:	bne	3e928 <__assert_fail@plt+0x2bd38>
   3e944:	lsr	r3, r4, ip
   3e948:	orr	r3, r3, r5, lsl fp
   3e94c:	lsr	r2, r5, ip
   3e950:	orr	r3, r3, r5, lsr sl
   3e954:	adds	r0, r0, r4
   3e958:	mov	r4, r3
   3e95c:	lsl	r3, r2, ip
   3e960:	orr	r3, r3, r4, lsl sl
   3e964:	lsl	ip, r4, ip
   3e968:	orr	r3, r3, r4, lsr fp
   3e96c:	adc	r1, r1, r5
   3e970:	subs	r0, r0, ip
   3e974:	mov	r5, r2
   3e978:	sbc	r1, r1, r3
   3e97c:	cmp	lr, #0
   3e980:	strdne	r4, [lr]
   3e984:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e988:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3e98c:	mov	r7, r0
   3e990:	ldr	r6, [pc, #72]	; 3e9e0 <__assert_fail@plt+0x2bdf0>
   3e994:	ldr	r5, [pc, #72]	; 3e9e4 <__assert_fail@plt+0x2bdf4>
   3e998:	add	r6, pc, r6
   3e99c:	add	r5, pc, r5
   3e9a0:	sub	r6, r6, r5
   3e9a4:	mov	r8, r1
   3e9a8:	mov	r9, r2
   3e9ac:	bl	12438 <pthread_mutex_unlock@plt-0x20>
   3e9b0:	asrs	r6, r6, #2
   3e9b4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   3e9b8:	mov	r4, #0
   3e9bc:	add	r4, r4, #1
   3e9c0:	ldr	r3, [r5], #4
   3e9c4:	mov	r2, r9
   3e9c8:	mov	r1, r8
   3e9cc:	mov	r0, r7
   3e9d0:	blx	r3
   3e9d4:	cmp	r6, r4
   3e9d8:	bne	3e9bc <__assert_fail@plt+0x2bdcc>
   3e9dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3e9e0:	andeq	r6, r1, ip, asr r5
   3e9e4:	andeq	r6, r1, r4, asr r5
   3e9e8:	bx	lr
   3e9ec:	ldr	r3, [pc, #12]	; 3ea00 <__assert_fail@plt+0x2be10>
   3e9f0:	mov	r1, #0
   3e9f4:	add	r3, pc, r3
   3e9f8:	ldr	r2, [r3]
   3e9fc:	b	1292c <__cxa_atexit@plt>
   3ea00:	andeq	r6, r1, r8, lsr #17
   3ea04:	mov	r2, r1
   3ea08:	mov	r1, r0
   3ea0c:	mov	r0, #3
   3ea10:	b	12b54 <__xstat64@plt>
   3ea14:	mov	r2, r1
   3ea18:	mov	r1, r0
   3ea1c:	mov	r0, #3
   3ea20:	b	1271c <__fxstat64@plt>
   3ea24:	mov	r2, r1
   3ea28:	mov	r1, r0
   3ea2c:	mov	r0, #3
   3ea30:	b	12bb4 <__lxstat64@plt>
   3ea34:	push	{lr}		; (str lr, [sp, #-4]!)
   3ea38:	sub	sp, sp, #12
   3ea3c:	str	r3, [sp]
   3ea40:	mov	r3, r2
   3ea44:	mov	r2, r1
   3ea48:	mov	r1, r0
   3ea4c:	mov	r0, #3
   3ea50:	bl	126ec <__fxstatat64@plt>
   3ea54:	add	sp, sp, #12
   3ea58:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

0003ea5c <.fini>:
   3ea5c:	push	{r3, lr}
   3ea60:	pop	{r3, pc}
