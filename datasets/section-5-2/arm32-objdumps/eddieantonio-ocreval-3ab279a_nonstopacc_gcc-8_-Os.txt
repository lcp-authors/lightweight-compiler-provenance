
../repos/eddieantonio-ocreval-3ab279a/nonstopacc/nonstopacc:     file format elf32-littlearm


Disassembly of section .init:

000109a8 <.init>:
   109a8:	push	{r3, lr}
   109ac:	bl	10c2c <__assert_fail@plt+0xc0>
   109b0:	pop	{r3, pc}

Disassembly of section .plt:

000109b4 <calloc@plt-0x14>:
   109b4:	push	{lr}		; (str lr, [sp, #-4]!)
   109b8:	ldr	lr, [pc, #4]	; 109c4 <calloc@plt-0x4>
   109bc:	add	lr, pc, lr
   109c0:	ldr	pc, [lr, #8]!
   109c4:	andeq	r6, r1, ip, lsr r6

000109c8 <calloc@plt>:
   109c8:	add	ip, pc, #0, 12
   109cc:	add	ip, ip, #90112	; 0x16000
   109d0:	ldr	pc, [ip, #1596]!	; 0x63c

000109d4 <strcmp@plt>:
   109d4:	add	ip, pc, #0, 12
   109d8:	add	ip, ip, #90112	; 0x16000
   109dc:	ldr	pc, [ip, #1588]!	; 0x634

000109e0 <printf@plt>:
   109e0:	add	ip, pc, #0, 12
   109e4:	add	ip, ip, #90112	; 0x16000
   109e8:	ldr	pc, [ip, #1580]!	; 0x62c

000109ec <fopen@plt>:
   109ec:	add	ip, pc, #0, 12
   109f0:	add	ip, ip, #90112	; 0x16000
   109f4:	ldr	pc, [ip, #1572]!	; 0x624

000109f8 <free@plt>:
   109f8:	add	ip, pc, #0, 12
   109fc:	add	ip, ip, #90112	; 0x16000
   10a00:	ldr	pc, [ip, #1564]!	; 0x61c

00010a04 <utf8proc_get_property@plt>:
   10a04:	add	ip, pc, #0, 12
   10a08:	add	ip, ip, #90112	; 0x16000
   10a0c:	ldr	pc, [ip, #1556]!	; 0x614

00010a10 <fgets@plt>:
   10a10:	add	ip, pc, #0, 12
   10a14:	add	ip, ip, #90112	; 0x16000
   10a18:	ldr	pc, [ip, #1548]!	; 0x60c

00010a1c <utf8proc_encode_char@plt>:
   10a1c:	add	ip, pc, #0, 12
   10a20:	add	ip, ip, #90112	; 0x16000
   10a24:	ldr	pc, [ip, #1540]!	; 0x604

00010a28 <strdup@plt>:
   10a28:	add	ip, pc, #0, 12
   10a2c:	add	ip, ip, #90112	; 0x16000
   10a30:	ldr	pc, [ip, #1532]!	; 0x5fc

00010a34 <rewind@plt>:
   10a34:	add	ip, pc, #0, 12
   10a38:	add	ip, ip, #90112	; 0x16000
   10a3c:	ldr	pc, [ip, #1524]!	; 0x5f4

00010a40 <unlink@plt>:
   10a40:	add	ip, pc, #0, 12
   10a44:	add	ip, ip, #90112	; 0x16000
   10a48:	ldr	pc, [ip, #1516]!	; 0x5ec

00010a4c <utf8proc_tolower@plt>:
   10a4c:	add	ip, pc, #0, 12
   10a50:	add	ip, ip, #90112	; 0x16000
   10a54:	ldr	pc, [ip, #1508]!	; 0x5e4

00010a58 <__xstat@plt>:
   10a58:	add	ip, pc, #0, 12
   10a5c:	add	ip, ip, #90112	; 0x16000
   10a60:	ldr	pc, [ip, #1500]!	; 0x5dc

00010a64 <fread@plt>:
   10a64:	add	ip, pc, #0, 12
   10a68:	add	ip, ip, #90112	; 0x16000
   10a6c:	ldr	pc, [ip, #1492]!	; 0x5d4

00010a70 <utf8proc_iterate@plt>:
   10a70:	add	ip, pc, #0, 12
   10a74:	add	ip, ip, #90112	; 0x16000
   10a78:	ldr	pc, [ip, #1484]!	; 0x5cc

00010a7c <malloc@plt>:
   10a7c:	add	ip, pc, #0, 12
   10a80:	add	ip, ip, #90112	; 0x16000
   10a84:	ldr	pc, [ip, #1476]!	; 0x5c4

00010a88 <__libc_start_main@plt>:
   10a88:	add	ip, pc, #0, 12
   10a8c:	add	ip, ip, #90112	; 0x16000
   10a90:	ldr	pc, [ip, #1468]!	; 0x5bc

00010a94 <__sysv_signal@plt>:
   10a94:	add	ip, pc, #0, 12
   10a98:	add	ip, ip, #90112	; 0x16000
   10a9c:	ldr	pc, [ip, #1460]!	; 0x5b4

00010aa0 <__gmon_start__@plt>:
   10aa0:	add	ip, pc, #0, 12
   10aa4:	add	ip, ip, #90112	; 0x16000
   10aa8:	ldr	pc, [ip, #1452]!	; 0x5ac

00010aac <getpid@plt>:
   10aac:	add	ip, pc, #0, 12
   10ab0:	add	ip, ip, #90112	; 0x16000
   10ab4:	ldr	pc, [ip, #1444]!	; 0x5a4

00010ab8 <exit@plt>:
   10ab8:	add	ip, pc, #0, 12
   10abc:	add	ip, ip, #90112	; 0x16000
   10ac0:	ldr	pc, [ip, #1436]!	; 0x59c

00010ac4 <utf8proc_category@plt>:
   10ac4:	add	ip, pc, #0, 12
   10ac8:	add	ip, ip, #90112	; 0x16000
   10acc:	ldr	pc, [ip, #1428]!	; 0x594

00010ad0 <strlen@plt>:
   10ad0:	add	ip, pc, #0, 12
   10ad4:	add	ip, ip, #90112	; 0x16000
   10ad8:	ldr	pc, [ip, #1420]!	; 0x58c

00010adc <fprintf@plt>:
   10adc:	add	ip, pc, #0, 12
   10ae0:	add	ip, ip, #90112	; 0x16000
   10ae4:	ldr	pc, [ip, #1412]!	; 0x584

00010ae8 <__isoc99_sscanf@plt>:
   10ae8:	add	ip, pc, #0, 12
   10aec:	add	ip, ip, #90112	; 0x16000
   10af0:	ldr	pc, [ip, #1404]!	; 0x57c

00010af4 <fclose@plt>:
   10af4:	add	ip, pc, #0, 12
   10af8:	add	ip, ip, #90112	; 0x16000
   10afc:	ldr	pc, [ip, #1396]!	; 0x574

00010b00 <utf8proc_NFC@plt>:
   10b00:	add	ip, pc, #0, 12
   10b04:	add	ip, ip, #90112	; 0x16000
   10b08:	ldr	pc, [ip, #1388]!	; 0x56c

00010b0c <fputc@plt>:
   10b0c:	add	ip, pc, #0, 12
   10b10:	add	ip, ip, #90112	; 0x16000
   10b14:	ldr	pc, [ip, #1380]!	; 0x564

00010b18 <sprintf@plt>:
   10b18:	add	ip, pc, #0, 12
   10b1c:	add	ip, ip, #90112	; 0x16000
   10b20:	ldr	pc, [ip, #1372]!	; 0x55c

00010b24 <atoi@plt>:
   10b24:	add	ip, pc, #0, 12
   10b28:	add	ip, ip, #90112	; 0x16000
   10b2c:	ldr	pc, [ip, #1364]!	; 0x554

00010b30 <utf8proc_errmsg@plt>:
   10b30:	add	ip, pc, #0, 12
   10b34:	add	ip, ip, #90112	; 0x16000
   10b38:	ldr	pc, [ip, #1356]!	; 0x54c

00010b3c <fputs@plt>:
   10b3c:	add	ip, pc, #0, 12
   10b40:	add	ip, ip, #90112	; 0x16000
   10b44:	ldr	pc, [ip, #1348]!	; 0x544

00010b48 <strncmp@plt>:
   10b48:	add	ip, pc, #0, 12
   10b4c:	add	ip, ip, #90112	; 0x16000
   10b50:	ldr	pc, [ip, #1340]!	; 0x53c

00010b54 <abort@plt>:
   10b54:	add	ip, pc, #0, 12
   10b58:	add	ip, ip, #90112	; 0x16000
   10b5c:	ldr	pc, [ip, #1332]!	; 0x534

00010b60 <getc@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #90112	; 0x16000
   10b68:	ldr	pc, [ip, #1324]!	; 0x52c

00010b6c <__assert_fail@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #90112	; 0x16000
   10b74:	ldr	pc, [ip, #1316]!	; 0x524

Disassembly of section .text:

00010b78 <error@@Base-0x12c0>:
   10b78:	push	{r0, r1, r2, lr}
   10b7c:	mov	r3, #0
   10b80:	mov	r4, r1
   10b84:	ldr	r2, [pc, #76]	; 10bd8 <__assert_fail@plt+0x6c>
   10b88:	str	r0, [sp, #4]
   10b8c:	add	r0, sp, #4
   10b90:	bl	11f58 <error@@Base+0x120>
   10b94:	ldr	r3, [sp, #4]
   10b98:	cmp	r3, #2
   10b9c:	beq	10ba8 <__assert_fail@plt+0x3c>
   10ba0:	ldr	r0, [pc, #52]	; 10bdc <__assert_fail@plt+0x70>
   10ba4:	bl	11e38 <error@@Base>
   10ba8:	ldr	r2, [pc, #48]	; 10be0 <__assert_fail@plt+0x74>
   10bac:	ldr	r0, [pc, #48]	; 10be4 <__assert_fail@plt+0x78>
   10bb0:	ldr	r1, [r4]
   10bb4:	bl	1218c <error@@Base+0x354>
   10bb8:	ldr	r1, [pc, #36]	; 10be4 <__assert_fail@plt+0x78>
   10bbc:	ldr	r0, [pc, #36]	; 10be8 <__assert_fail@plt+0x7c>
   10bc0:	bl	11830 <__assert_fail@plt+0xcc4>
   10bc4:	ldr	r0, [pc, #32]	; 10bec <__assert_fail@plt+0x80>
   10bc8:	ldr	r1, [r4, #4]
   10bcc:	bl	112bc <__assert_fail@plt+0x750>
   10bd0:	bl	10d88 <__assert_fail@plt+0x21c>
   10bd4:	bl	11de0 <__assert_fail@plt+0x1274>
   10bd8:	andeq	r2, r1, ip, lsl #20
   10bdc:	andeq	r2, r1, r0, lsr sl
   10be0:	andeq	r7, r2, r8, lsr #1
   10be4:	andeq	r7, r2, ip, asr #2
   10be8:	andeq	r7, r2, ip, asr r1
   10bec:	andeq	r7, r2, ip, ror #2
   10bf0:	mov	fp, #0
   10bf4:	mov	lr, #0
   10bf8:	pop	{r1}		; (ldr r1, [sp], #4)
   10bfc:	mov	r2, sp
   10c00:	push	{r2}		; (str r2, [sp, #-4]!)
   10c04:	push	{r0}		; (str r0, [sp, #-4]!)
   10c08:	ldr	ip, [pc, #16]	; 10c20 <__assert_fail@plt+0xb4>
   10c0c:	push	{ip}		; (str ip, [sp, #-4]!)
   10c10:	ldr	r0, [pc, #12]	; 10c24 <__assert_fail@plt+0xb8>
   10c14:	ldr	r3, [pc, #12]	; 10c28 <__assert_fail@plt+0xbc>
   10c18:	bl	10a88 <__libc_start_main@plt>
   10c1c:	bl	10b54 <abort@plt>
   10c20:	andeq	r2, r1, r0, ror #19
   10c24:	andeq	r0, r1, r8, ror fp
   10c28:	andeq	r2, r1, r0, lsl #19
   10c2c:	ldr	r3, [pc, #20]	; 10c48 <__assert_fail@plt+0xdc>
   10c30:	ldr	r2, [pc, #20]	; 10c4c <__assert_fail@plt+0xe0>
   10c34:	add	r3, pc, r3
   10c38:	ldr	r2, [r3, r2]
   10c3c:	cmp	r2, #0
   10c40:	bxeq	lr
   10c44:	b	10aa0 <__gmon_start__@plt>
   10c48:	andeq	r6, r1, r4, asr #7
   10c4c:	muleq	r0, ip, r0
   10c50:	ldr	r0, [pc, #24]	; 10c70 <__assert_fail@plt+0x104>
   10c54:	ldr	r3, [pc, #24]	; 10c74 <__assert_fail@plt+0x108>
   10c58:	cmp	r3, r0
   10c5c:	bxeq	lr
   10c60:	ldr	r3, [pc, #16]	; 10c78 <__assert_fail@plt+0x10c>
   10c64:	cmp	r3, #0
   10c68:	bxeq	lr
   10c6c:	bx	r3
   10c70:	strheq	r7, [r2], -ip
   10c74:	strheq	r7, [r2], -ip
   10c78:	andeq	r0, r0, r0
   10c7c:	ldr	r0, [pc, #36]	; 10ca8 <__assert_fail@plt+0x13c>
   10c80:	ldr	r1, [pc, #36]	; 10cac <__assert_fail@plt+0x140>
   10c84:	sub	r1, r1, r0
   10c88:	asr	r1, r1, #2
   10c8c:	add	r1, r1, r1, lsr #31
   10c90:	asrs	r1, r1, #1
   10c94:	bxeq	lr
   10c98:	ldr	r3, [pc, #16]	; 10cb0 <__assert_fail@plt+0x144>
   10c9c:	cmp	r3, #0
   10ca0:	bxeq	lr
   10ca4:	bx	r3
   10ca8:	strheq	r7, [r2], -ip
   10cac:	strheq	r7, [r2], -ip
   10cb0:	andeq	r0, r0, r0
   10cb4:	push	{r4, lr}
   10cb8:	ldr	r4, [pc, #24]	; 10cd8 <__assert_fail@plt+0x16c>
   10cbc:	ldrb	r3, [r4]
   10cc0:	cmp	r3, #0
   10cc4:	popne	{r4, pc}
   10cc8:	bl	10c50 <__assert_fail@plt+0xe4>
   10ccc:	mov	r3, #1
   10cd0:	strb	r3, [r4]
   10cd4:	pop	{r4, pc}
   10cd8:	ldrdeq	r7, [r2], -r0
   10cdc:	b	10c7c <__assert_fail@plt+0x110>
   10ce0:	push	{r4, lr}
   10ce4:	bl	115f4 <__assert_fail@plt+0xa88>
   10ce8:	cmp	r0, #0
   10cec:	popeq	{r4, pc}
   10cf0:	ldr	r2, [pc, #36]	; 10d1c <__assert_fail@plt+0x1b0>
   10cf4:	ldr	r1, [r0, #12]
   10cf8:	ldr	r3, [r2]
   10cfc:	sub	r3, r3, r1
   10d00:	ldr	r1, [r0, #16]
   10d04:	str	r3, [r2]
   10d08:	ldr	r2, [pc, #16]	; 10d20 <__assert_fail@plt+0x1b4>
   10d0c:	ldr	r3, [r2]
   10d10:	sub	r3, r3, r1
   10d14:	str	r3, [r2]
   10d18:	pop	{r4, pc}
   10d1c:	andeq	r7, r2, r8, asr #2
   10d20:	andeq	fp, r2, ip, lsr r4
   10d24:	ldr	r3, [pc, #76]	; 10d78 <__assert_fail@plt+0x20c>
   10d28:	vldr	d6, [pc, #64]	; 10d70 <__assert_fail@plt+0x204>
   10d2c:	ldr	r0, [pc, #72]	; 10d7c <__assert_fail@plt+0x210>
   10d30:	ldr	r1, [r3]
   10d34:	add	r2, r1, #1
   10d38:	str	r2, [r3]
   10d3c:	ldr	r3, [pc, #60]	; 10d80 <__assert_fail@plt+0x214>
   10d40:	ldr	r2, [r3]
   10d44:	ldr	r3, [pc, #56]	; 10d84 <__assert_fail@plt+0x218>
   10d48:	ldr	r3, [r3]
   10d4c:	sub	r3, r2, r3
   10d50:	vmov	s14, r3
   10d54:	vcvt.f64.s32	d7, s14
   10d58:	vmul.f64	d7, d7, d6
   10d5c:	vmov	s13, r2
   10d60:	vcvt.f64.s32	d6, s13
   10d64:	vdiv.f64	d7, d7, d6
   10d68:	vmov	r2, r3, d7
   10d6c:	b	109e0 <printf@plt>
   10d70:	andeq	r0, r0, r0
   10d74:	subsmi	r0, r9, r0
   10d78:	ldrdeq	r7, [r2], -r4
   10d7c:	andeq	r2, r1, r0, lsl #20
   10d80:	andeq	r7, r2, r8, asr #2
   10d84:	andeq	fp, r2, ip, lsr r4
   10d88:	push	{r4, r5, r6, r7, r8, lr}
   10d8c:	ldr	r5, [pc, #108]	; 10e00 <__assert_fail@plt+0x294>
   10d90:	ldr	r3, [pc, #108]	; 10e04 <__assert_fail@plt+0x298>
   10d94:	ldr	r1, [pc, #108]	; 10e08 <__assert_fail@plt+0x29c>
   10d98:	ldr	r2, [r5]
   10d9c:	ldr	r0, [r5, #4]
   10da0:	cmp	r2, #0
   10da4:	str	r2, [r3]
   10da8:	str	r0, [r1]
   10dac:	popeq	{r4, r5, r6, r7, r8, pc}
   10db0:	mov	r6, r3
   10db4:	add	r5, r5, #992	; 0x3e0
   10db8:	bl	10d24 <__assert_fail@plt+0x1b8>
   10dbc:	ldr	r3, [pc, #72]	; 10e0c <__assert_fail@plt+0x2a0>
   10dc0:	ldr	r7, [pc, #72]	; 10e10 <__assert_fail@plt+0x2a4>
   10dc4:	ldr	r4, [r3]
   10dc8:	cmp	r4, #0
   10dcc:	popeq	{r4, r5, r6, r7, r8, pc}
   10dd0:	mov	r0, r5
   10dd4:	ldr	r1, [r4, #8]
   10dd8:	bl	10ce0 <__assert_fail@plt+0x174>
   10ddc:	mov	r0, r7
   10de0:	ldr	r1, [r4, #8]
   10de4:	bl	10ce0 <__assert_fail@plt+0x174>
   10de8:	ldr	r3, [r6]
   10dec:	cmp	r3, #0
   10df0:	popeq	{r4, r5, r6, r7, r8, pc}
   10df4:	bl	10d24 <__assert_fail@plt+0x1b8>
   10df8:	ldr	r4, [r4, #4]
   10dfc:	b	10dc8 <__assert_fail@plt+0x25c>
   10e00:	andeq	r7, r2, ip, ror #2
   10e04:	andeq	r7, r2, r8, asr #2
   10e08:	andeq	fp, r2, ip, lsr r4
   10e0c:	andeq	r7, r2, ip, asr r1
   10e10:	andeq	r9, r2, r4, asr #9
   10e14:	andeq	r0, r0, r0
   10e18:	mov	r2, r0
   10e1c:	push	{r4, lr}
   10e20:	mov	r1, #99	; 0x63
   10e24:	ldr	r0, [pc, #12]	; 10e38 <__assert_fail@plt+0x2cc>
   10e28:	bl	10a10 <fgets@plt>
   10e2c:	adds	r0, r0, #0
   10e30:	movne	r0, #1
   10e34:	pop	{r4, pc}
   10e38:	ldrdeq	r7, [r2], -r8
   10e3c:	push	{r4, lr}
   10e40:	mov	r4, r1
   10e44:	bl	10e18 <__assert_fail@plt+0x2ac>
   10e48:	cmp	r0, #0
   10e4c:	popeq	{r4, pc}
   10e50:	mov	r2, r4
   10e54:	ldr	r1, [pc, #20]	; 10e70 <__assert_fail@plt+0x304>
   10e58:	ldr	r0, [pc, #20]	; 10e74 <__assert_fail@plt+0x308>
   10e5c:	bl	10ae8 <__isoc99_sscanf@plt>
   10e60:	sub	r0, r0, #1
   10e64:	clz	r0, r0
   10e68:	lsr	r0, r0, #5
   10e6c:	pop	{r4, pc}
   10e70:			; <UNDEFINED> instruction: 0x00012ab2
   10e74:	ldrdeq	r7, [r2], -r8
   10e78:	ldr	r2, [r1]
   10e7c:	cmp	r2, #0
   10e80:	bne	10e90 <__assert_fail@plt+0x324>
   10e84:	mov	r1, r0
   10e88:	ldr	r0, [pc, #56]	; 10ec8 <__assert_fail@plt+0x35c>
   10e8c:	b	10b3c <fputs@plt>
   10e90:	ldr	r3, [r1, #4]
   10e94:	vldr	d6, [pc, #36]	; 10ec0 <__assert_fail@plt+0x354>
   10e98:	ldr	r1, [pc, #44]	; 10ecc <__assert_fail@plt+0x360>
   10e9c:	sub	r3, r2, r3
   10ea0:	vmov	s14, r3
   10ea4:	vcvt.f64.s32	d7, s14
   10ea8:	vmul.f64	d7, d7, d6
   10eac:	vmov	s13, r2
   10eb0:	vcvt.f64.s32	d6, s13
   10eb4:	vdiv.f64	d7, d7, d6
   10eb8:	vmov	r2, r3, d7
   10ebc:	b	10adc <fprintf@plt>
   10ec0:	andeq	r0, r0, r0
   10ec4:	subsmi	r0, r9, r0
   10ec8:	andeq	r2, r1, r8, asr #20
   10ecc:	andeq	r2, r1, r1, asr sl
   10ed0:	push	{r4, r5, r6, lr}
   10ed4:	subs	r5, r1, #0
   10ed8:	mov	r4, r0
   10edc:	beq	10f08 <__assert_fail@plt+0x39c>
   10ee0:	ldr	r1, [pc, #48]	; 10f18 <__assert_fail@plt+0x3ac>
   10ee4:	ldrd	r2, [r5]
   10ee8:	bl	10adc <fprintf@plt>
   10eec:	mov	r1, r5
   10ef0:	mov	r0, r4
   10ef4:	bl	10e78 <__assert_fail@plt+0x30c>
   10ef8:	mov	r1, r4
   10efc:	ldr	r0, [pc, #24]	; 10f1c <__assert_fail@plt+0x3b0>
   10f00:	pop	{r4, r5, r6, lr}
   10f04:	b	10b3c <fputs@plt>
   10f08:	mov	r1, r0
   10f0c:	ldr	r0, [pc, #12]	; 10f20 <__assert_fail@plt+0x3b4>
   10f10:	bl	10b3c <fputs@plt>
   10f14:	b	10ef8 <__assert_fail@plt+0x38c>
   10f18:	andeq	r2, r1, r7, asr sl
   10f1c:	andeq	r2, r1, sp, ror sl
   10f20:	andeq	r2, r1, r2, ror #20
   10f24:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10f28:	mov	r4, r0
   10f2c:	mov	r6, r1
   10f30:	mov	r7, r2
   10f34:	mov	r2, r3
   10f38:	mov	r5, #1
   10f3c:	ldr	r1, [pc, #196]	; 11008 <__assert_fail@plt+0x49c>
   10f40:	ldrb	r8, [sp, #32]
   10f44:	ldrb	r9, [sp, #36]	; 0x24
   10f48:	bl	10adc <fprintf@plt>
   10f4c:	mov	r1, #0
   10f50:	mov	r0, r4
   10f54:	ldr	sl, [pc, #176]	; 1100c <__assert_fail@plt+0x4a0>
   10f58:	bl	10ed0 <__assert_fail@plt+0x364>
   10f5c:	ldr	r3, [pc, #172]	; 11010 <__assert_fail@plt+0x4a4>
   10f60:	cmp	r8, #0
   10f64:	mov	r0, r4
   10f68:	ldr	r2, [pc, #164]	; 11014 <__assert_fail@plt+0x4a8>
   10f6c:	ldr	r1, [pc, #164]	; 11018 <__assert_fail@plt+0x4ac>
   10f70:	moveq	r2, r3
   10f74:	bl	10adc <fprintf@plt>
   10f78:	ldr	r3, [r6, r5, lsl #3]
   10f7c:	add	r1, r6, r5, lsl #3
   10f80:	cmp	r3, #0
   10f84:	ble	10fa0 <__assert_fail@plt+0x434>
   10f88:	mov	r0, r4
   10f8c:	bl	10ed0 <__assert_fail@plt+0x364>
   10f90:	mov	r2, r5
   10f94:	mov	r1, sl
   10f98:	mov	r0, r4
   10f9c:	bl	10adc <fprintf@plt>
   10fa0:	add	r5, r5, #1
   10fa4:	sxth	r3, r5
   10fa8:	cmp	r7, r3
   10fac:	bge	10f78 <__assert_fail@plt+0x40c>
   10fb0:	cmp	r8, #0
   10fb4:	beq	10fe4 <__assert_fail@plt+0x478>
   10fb8:	add	r3, r7, #1
   10fbc:	add	r1, r6, r3, lsl #3
   10fc0:	ldr	r3, [r6, r3, lsl #3]
   10fc4:	cmp	r3, #0
   10fc8:	ble	10fe4 <__assert_fail@plt+0x478>
   10fcc:	mov	r0, r4
   10fd0:	bl	10ed0 <__assert_fail@plt+0x364>
   10fd4:	mov	r2, r7
   10fd8:	ldr	r1, [pc, #60]	; 1101c <__assert_fail@plt+0x4b0>
   10fdc:	mov	r0, r4
   10fe0:	bl	10adc <fprintf@plt>
   10fe4:	cmp	r9, #0
   10fe8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10fec:	mov	r1, r6
   10ff0:	mov	r0, r4
   10ff4:	bl	10ed0 <__assert_fail@plt+0x364>
   10ff8:	mov	r1, r4
   10ffc:	ldr	r0, [pc, #28]	; 11020 <__assert_fail@plt+0x4b4>
   11000:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   11004:	b	10b3c <fputs@plt>
   11008:	andeq	r2, r1, pc, lsl #21
   1100c:	muleq	r1, r4, sl
   11010:	andeq	r2, r1, r8, lsl #21
   11014:	andeq	r2, r1, r1, lsl #21
   11018:	muleq	r1, r0, sl
   1101c:	muleq	r1, sp, sl
   11020:	andeq	r2, r1, r6, lsr #21
   11024:	push	{r4, r5, r6, r7, r8, lr}
   11028:	mov	r4, r1
   1102c:	mov	r6, r0
   11030:	add	r4, r4, #4096	; 0x1000
   11034:	mov	r0, r1
   11038:	mov	r5, r2
   1103c:	ldr	r7, [pc, #124]	; 110c0 <__assert_fail@plt+0x554>
   11040:	bl	116c0 <__assert_fail@plt+0xb54>
   11044:	ldr	r2, [pc, #120]	; 110c4 <__assert_fail@plt+0x558>
   11048:	ldr	r1, [r4, #3952]	; 0xf70
   1104c:	ldr	r0, [r4, #3956]	; 0xf74
   11050:	bl	12960 <error@@Base+0xb28>
   11054:	mov	r2, r5
   11058:	ldr	r1, [pc, #104]	; 110c8 <__assert_fail@plt+0x55c>
   1105c:	mov	r0, r6
   11060:	bl	10adc <fprintf@plt>
   11064:	mov	r1, #0
   11068:	mov	r0, r6
   1106c:	bl	10ed0 <__assert_fail@plt+0x364>
   11070:	mov	r5, #0
   11074:	mov	r1, r6
   11078:	mov	r0, #10
   1107c:	bl	10b0c <fputc@plt>
   11080:	ldr	r3, [r4, #3956]	; 0xf74
   11084:	cmp	r3, r5
   11088:	pople	{r4, r5, r6, r7, r8, pc}
   1108c:	mov	r0, r6
   11090:	ldr	r3, [r4, #3952]	; 0xf70
   11094:	ldr	r1, [r3, r5, lsl #2]
   11098:	add	r1, r1, #12
   1109c:	bl	10ed0 <__assert_fail@plt+0x364>
   110a0:	ldr	r3, [r4, #3952]	; 0xf70
   110a4:	mov	r1, r7
   110a8:	mov	r0, r6
   110ac:	ldr	r3, [r3, r5, lsl #2]
   110b0:	add	r5, r5, #1
   110b4:	ldr	r2, [r3, #8]
   110b8:	bl	10adc <fprintf@plt>
   110bc:	b	11080 <__assert_fail@plt+0x514>
   110c0:	muleq	r1, r0, sl
   110c4:	andeq	r1, r1, ip, asr #1
   110c8:	andeq	r2, r1, pc, lsl #21
   110cc:	ldr	r0, [r0, #8]
   110d0:	ldr	r1, [r1, #8]
   110d4:	b	11ce4 <__assert_fail@plt+0x1178>
   110d8:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   110dc:	mov	r7, r0
   110e0:	mov	r5, r1
   110e4:	bl	10e18 <__assert_fail@plt+0x2ac>
   110e8:	cmp	r0, #0
   110ec:	bne	11100 <__assert_fail@plt+0x594>
   110f0:	mov	r4, #0
   110f4:	mov	r0, r4
   110f8:	add	sp, sp, #8
   110fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11100:	mov	r0, r7
   11104:	bl	10e18 <__assert_fail@plt+0x2ac>
   11108:	cmp	r0, #0
   1110c:	beq	110f0 <__assert_fail@plt+0x584>
   11110:	ldr	r6, [pc, #136]	; 111a0 <__assert_fail@plt+0x634>
   11114:	mov	r4, #0
   11118:	ldr	r9, [pc, #132]	; 111a4 <__assert_fail@plt+0x638>
   1111c:	add	r8, r6, #29
   11120:	b	11170 <__assert_fail@plt+0x604>
   11124:	mov	r0, r8
   11128:	bl	10b24 <atoi@plt>
   1112c:	subs	r3, r0, #0
   11130:	ldr	sl, [sp]
   11134:	bne	11150 <__assert_fail@plt+0x5e4>
   11138:	ldr	r1, [pc, #104]	; 111a8 <__assert_fail@plt+0x63c>
   1113c:	mov	r0, r8
   11140:	bl	109d4 <strcmp@plt>
   11144:	subs	r3, r0, #0
   11148:	moveq	r4, sl
   1114c:	movne	r3, #11
   11150:	ldr	r2, [r5, r3, lsl #3]
   11154:	add	r1, r5, r3, lsl #3
   11158:	add	r2, r2, sl
   1115c:	str	r2, [r5, r3, lsl #3]
   11160:	ldr	r3, [r1, #4]
   11164:	ldr	r2, [sp, #4]
   11168:	add	r3, r3, r2
   1116c:	str	r3, [r1, #4]
   11170:	mov	r0, r7
   11174:	bl	10e18 <__assert_fail@plt+0x2ac>
   11178:	cmp	r0, #0
   1117c:	beq	110f4 <__assert_fail@plt+0x588>
   11180:	add	r3, sp, #4
   11184:	mov	r2, sp
   11188:	mov	r1, r9
   1118c:	mov	r0, r6
   11190:	bl	10ae8 <__isoc99_sscanf@plt>
   11194:	cmp	r0, #2
   11198:	beq	11124 <__assert_fail@plt+0x5b8>
   1119c:	b	110f4 <__assert_fail@plt+0x588>
   111a0:	ldrdeq	r7, [r2], -r8
   111a4:	andeq	r2, r1, lr, lsr #21
   111a8:	andeq	r2, r1, r6, lsr #21
   111ac:	ldr	r3, [r0]
   111b0:	add	r1, r3, r1
   111b4:	ldr	r3, [r0, #4]
   111b8:	add	r2, r3, r2
   111bc:	stm	r0, {r1, r2}
   111c0:	bx	lr
   111c4:	push	{r4, r5, r6, r7, r8, lr}
   111c8:	mov	r7, r0
   111cc:	mov	r8, r1
   111d0:	mov	r6, r2
   111d4:	mov	r5, r3
   111d8:	bl	115f4 <__assert_fail@plt+0xa88>
   111dc:	subs	r4, r0, #0
   111e0:	bne	1120c <__assert_fail@plt+0x6a0>
   111e4:	mov	r1, #20
   111e8:	mov	r0, #1
   111ec:	bl	11e74 <error@@Base+0x3c>
   111f0:	mov	r4, r0
   111f4:	mov	r0, r8
   111f8:	bl	10a28 <strdup@plt>
   111fc:	mov	r1, r4
   11200:	str	r0, [r4, #8]
   11204:	mov	r0, r7
   11208:	bl	11638 <__assert_fail@plt+0xacc>
   1120c:	ldrd	r2, [r4, #12]
   11210:	add	r2, r2, r6
   11214:	add	r3, r3, r5
   11218:	strd	r2, [r4, #12]
   1121c:	pop	{r4, r5, r6, r7, r8, pc}
   11220:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   11224:	mov	r5, r0
   11228:	mov	r7, r1
   1122c:	bl	10e18 <__assert_fail@plt+0x2ac>
   11230:	cmp	r0, #0
   11234:	beq	11280 <__assert_fail@plt+0x714>
   11238:	mov	r0, r5
   1123c:	bl	10e18 <__assert_fail@plt+0x2ac>
   11240:	cmp	r0, #0
   11244:	beq	11280 <__assert_fail@plt+0x714>
   11248:	ldr	r4, [pc, #100]	; 112b4 <__assert_fail@plt+0x748>
   1124c:	ldr	r6, [pc, #100]	; 112b8 <__assert_fail@plt+0x74c>
   11250:	add	r8, r4, #29
   11254:	mov	r0, r5
   11258:	bl	10e18 <__assert_fail@plt+0x2ac>
   1125c:	cmp	r0, #0
   11260:	beq	11280 <__assert_fail@plt+0x714>
   11264:	add	r3, sp, #4
   11268:	mov	r2, sp
   1126c:	ldr	r0, [pc, #64]	; 112b4 <__assert_fail@plt+0x748>
   11270:	mov	r1, r6
   11274:	bl	10ae8 <__isoc99_sscanf@plt>
   11278:	cmp	r0, #2
   1127c:	beq	11288 <__assert_fail@plt+0x71c>
   11280:	add	sp, sp, #8
   11284:	pop	{r4, r5, r6, r7, r8, pc}
   11288:	mov	r0, r4
   1128c:	bl	10ad0 <strlen@plt>
   11290:	add	r0, r4, r0
   11294:	mov	r3, #0
   11298:	ldr	r2, [sp]
   1129c:	mov	r1, r8
   112a0:	strb	r3, [r0, #-1]
   112a4:	mov	r0, r7
   112a8:	ldr	r3, [sp, #4]
   112ac:	bl	111c4 <__assert_fail@plt+0x658>
   112b0:	b	11254 <__assert_fail@plt+0x6e8>
   112b4:	ldrdeq	r7, [r2], -r8
   112b8:	andeq	r2, r1, lr, lsr #21
   112bc:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   112c0:	mov	r6, r1
   112c4:	mov	r5, r0
   112c8:	mov	r0, r6
   112cc:	ldr	r1, [pc, #328]	; 1141c <__assert_fail@plt+0x8b0>
   112d0:	bl	11efc <error@@Base+0xc4>
   112d4:	mov	r4, r0
   112d8:	bl	10e18 <__assert_fail@plt+0x2ac>
   112dc:	cmp	r0, #0
   112e0:	beq	11408 <__assert_fail@plt+0x89c>
   112e4:	mov	r2, #45	; 0x2d
   112e8:	ldr	r1, [pc, #304]	; 11420 <__assert_fail@plt+0x8b4>
   112ec:	ldr	r0, [pc, #304]	; 11424 <__assert_fail@plt+0x8b8>
   112f0:	bl	10b48 <strncmp@plt>
   112f4:	cmp	r0, #0
   112f8:	bne	11408 <__assert_fail@plt+0x89c>
   112fc:	mov	r0, r4
   11300:	bl	10e18 <__assert_fail@plt+0x2ac>
   11304:	cmp	r0, #0
   11308:	beq	11408 <__assert_fail@plt+0x89c>
   1130c:	ldr	r1, [pc, #276]	; 11428 <__assert_fail@plt+0x8bc>
   11310:	ldr	r0, [pc, #268]	; 11424 <__assert_fail@plt+0x8b8>
   11314:	bl	109d4 <strcmp@plt>
   11318:	cmp	r0, #0
   1131c:	bne	11408 <__assert_fail@plt+0x89c>
   11320:	mov	r1, sp
   11324:	mov	r0, r4
   11328:	bl	10e3c <__assert_fail@plt+0x2d0>
   1132c:	cmp	r0, #0
   11330:	beq	11408 <__assert_fail@plt+0x89c>
   11334:	add	r1, sp, #4
   11338:	mov	r0, r4
   1133c:	bl	10e3c <__assert_fail@plt+0x2d0>
   11340:	cmp	r0, #0
   11344:	beq	11408 <__assert_fail@plt+0x89c>
   11348:	mov	r0, r4
   1134c:	bl	10e18 <__assert_fail@plt+0x2ac>
   11350:	cmp	r0, #0
   11354:	beq	11408 <__assert_fail@plt+0x89c>
   11358:	mov	r0, r4
   1135c:	bl	10e18 <__assert_fail@plt+0x2ac>
   11360:	cmp	r0, #0
   11364:	beq	11408 <__assert_fail@plt+0x89c>
   11368:	ldr	r3, [r5]
   1136c:	add	r1, r5, #8
   11370:	mov	r0, r4
   11374:	ldr	r2, [sp]
   11378:	add	r3, r3, r2
   1137c:	ldr	r2, [sp, #4]
   11380:	str	r3, [r5]
   11384:	ldr	r3, [r5, #4]
   11388:	add	r3, r3, r2
   1138c:	str	r3, [r5, #4]
   11390:	bl	110d8 <__assert_fail@plt+0x56c>
   11394:	mov	r7, r0
   11398:	add	r1, r5, #416	; 0x1a0
   1139c:	mov	r0, r4
   113a0:	bl	110d8 <__assert_fail@plt+0x56c>
   113a4:	mov	r6, r0
   113a8:	add	r1, r5, #824	; 0x338
   113ac:	mov	r0, r4
   113b0:	bl	110d8 <__assert_fail@plt+0x56c>
   113b4:	ldr	r3, [sp]
   113b8:	cmp	r3, #0
   113bc:	ble	113f8 <__assert_fail@plt+0x88c>
   113c0:	add	r1, r5, #920	; 0x398
   113c4:	mov	r0, r4
   113c8:	bl	110d8 <__assert_fail@plt+0x56c>
   113cc:	cmp	r7, #0
   113d0:	ble	113e0 <__assert_fail@plt+0x874>
   113d4:	add	r1, r5, #992	; 0x3e0
   113d8:	mov	r0, r4
   113dc:	bl	11220 <__assert_fail@plt+0x6b4>
   113e0:	cmp	r6, #0
   113e4:	ble	113f8 <__assert_fail@plt+0x88c>
   113e8:	add	r1, r5, #9024	; 0x2340
   113ec:	mov	r0, r4
   113f0:	add	r1, r1, #24
   113f4:	bl	11220 <__assert_fail@plt+0x6b4>
   113f8:	mov	r0, r4
   113fc:	bl	11d20 <__assert_fail@plt+0x11b4>
   11400:	add	sp, sp, #12
   11404:	pop	{r4, r5, r6, r7, pc}
   11408:	cmp	r6, #0
   1140c:	ldr	r1, [pc, #24]	; 1142c <__assert_fail@plt+0x8c0>
   11410:	movne	r1, r6
   11414:	ldr	r0, [pc, #20]	; 11430 <__assert_fail@plt+0x8c4>
   11418:	bl	11ebc <error@@Base+0x84>
   1141c:	andeq	r6, r1, r5, lsr r0
   11420:			; <UNDEFINED> instruction: 0x00012abc
   11424:	ldrdeq	r7, [r2], -r8
   11428:	andeq	r5, r1, pc, ror #31
   1142c:			; <UNDEFINED> instruction: 0x00012ab6
   11430:	andeq	r2, r1, ip, ror #21
   11434:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11438:	mov	r4, r0
   1143c:	mov	r0, r1
   11440:	mov	r7, #1
   11444:	mov	r6, #0
   11448:	ldr	r1, [pc, #268]	; 1155c <__assert_fail@plt+0x9f0>
   1144c:	bl	11efc <error@@Base+0xc4>
   11450:	mov	r5, r0
   11454:	ldr	r3, [pc, #260]	; 11560 <__assert_fail@plt+0x9f4>
   11458:	ldr	r2, [pc, #260]	; 11564 <__assert_fail@plt+0x9f8>
   1145c:	ldr	r1, [pc, #260]	; 11568 <__assert_fail@plt+0x9fc>
   11460:	bl	10adc <fprintf@plt>
   11464:	ldr	r1, [pc, #256]	; 1156c <__assert_fail@plt+0xa00>
   11468:	mov	r0, r5
   1146c:	ldr	r2, [r4]
   11470:	bl	10adc <fprintf@plt>
   11474:	ldr	r1, [pc, #244]	; 11570 <__assert_fail@plt+0xa04>
   11478:	mov	r0, r5
   1147c:	ldr	r2, [r4, #4]
   11480:	bl	10adc <fprintf@plt>
   11484:	mov	r1, r4
   11488:	mov	r0, r5
   1148c:	bl	10e78 <__assert_fail@plt+0x30c>
   11490:	mov	r1, r5
   11494:	ldr	r0, [pc, #216]	; 11574 <__assert_fail@plt+0xa08>
   11498:	bl	10b3c <fputs@plt>
   1149c:	ldr	r3, [pc, #212]	; 11578 <__assert_fail@plt+0xa0c>
   114a0:	mov	r2, #50	; 0x32
   114a4:	add	r1, r4, #8
   114a8:	mov	r0, r5
   114ac:	strd	r6, [sp]
   114b0:	bl	10f24 <__assert_fail@plt+0x3b8>
   114b4:	ldr	r3, [pc, #192]	; 1157c <__assert_fail@plt+0xa10>
   114b8:	mov	r2, #50	; 0x32
   114bc:	add	r1, r4, #416	; 0x1a0
   114c0:	mov	r0, r5
   114c4:	strd	r6, [sp]
   114c8:	bl	10f24 <__assert_fail@plt+0x3b8>
   114cc:	ldr	r3, [pc, #172]	; 11580 <__assert_fail@plt+0xa14>
   114d0:	mov	r2, #10
   114d4:	add	r1, r4, #824	; 0x338
   114d8:	mov	r0, r5
   114dc:	str	r7, [sp]
   114e0:	str	r7, [sp, #4]
   114e4:	bl	10f24 <__assert_fail@plt+0x3b8>
   114e8:	ldr	r3, [r4]
   114ec:	cmp	r3, r6
   114f0:	ble	1154c <__assert_fail@plt+0x9e0>
   114f4:	ldr	r3, [pc, #136]	; 11584 <__assert_fail@plt+0xa18>
   114f8:	mov	r2, #8
   114fc:	add	r1, r4, #920	; 0x398
   11500:	mov	r0, r5
   11504:	str	r6, [sp]
   11508:	str	r6, [sp, #4]
   1150c:	bl	10f24 <__assert_fail@plt+0x3b8>
   11510:	ldr	r3, [r4, #8]
   11514:	cmp	r3, r6
   11518:	ble	1152c <__assert_fail@plt+0x9c0>
   1151c:	ldr	r2, [pc, #84]	; 11578 <__assert_fail@plt+0xa0c>
   11520:	add	r1, r4, #992	; 0x3e0
   11524:	mov	r0, r5
   11528:	bl	11024 <__assert_fail@plt+0x4b8>
   1152c:	ldr	r3, [r4, #416]	; 0x1a0
   11530:	cmp	r3, #0
   11534:	ble	1154c <__assert_fail@plt+0x9e0>
   11538:	add	r1, r4, #9024	; 0x2340
   1153c:	ldr	r2, [pc, #56]	; 1157c <__assert_fail@plt+0xa10>
   11540:	mov	r0, r5
   11544:	add	r1, r1, #24
   11548:	bl	11024 <__assert_fail@plt+0x4b8>
   1154c:	mov	r0, r5
   11550:	add	sp, sp, #12
   11554:	pop	{r4, r5, r6, r7, lr}
   11558:	b	11d20 <__assert_fail@plt+0x11b4>
   1155c:	strdeq	r2, [r1], -lr
   11560:	andeq	r5, r1, pc, ror #31
   11564:			; <UNDEFINED> instruction: 0x00012abc
   11568:	andeq	r2, r1, r0, lsl #22
   1156c:	andeq	r2, r1, r5, lsl #22
   11570:	andeq	r2, r1, r3, lsl fp
   11574:	andeq	r2, r1, r9, lsr #22
   11578:	andeq	r2, r1, r6, lsr fp
   1157c:	andeq	r2, r1, r9, asr #22
   11580:	andeq	r2, r1, r0, asr #22
   11584:	andeq	r2, r1, r7, asr fp
   11588:	sub	r0, r0, #1
   1158c:	mov	r3, #0
   11590:	ldrb	r2, [r0, #1]!
   11594:	cmp	r2, #0
   11598:	bne	115b0 <__assert_fail@plt+0xa44>
   1159c:	movw	r2, #503	; 0x1f7
   115a0:	udiv	r0, r3, r2
   115a4:	mls	r0, r2, r0, r3
   115a8:	sxth	r0, r0
   115ac:	bx	lr
   115b0:	add	r3, r3, r2
   115b4:	b	11590 <__assert_fail@plt+0xa24>
   115b8:	push	{r4, r5, r6, lr}
   115bc:	add	r6, r0, #8000	; 0x1f40
   115c0:	mov	r4, r0
   115c4:	mov	r5, r0
   115c8:	add	r6, r6, #48	; 0x30
   115cc:	mov	r0, r5
   115d0:	add	r5, r5, #16
   115d4:	bl	12728 <error@@Base+0x8f0>
   115d8:	cmp	r5, r6
   115dc:	bne	115cc <__assert_fail@plt+0xa60>
   115e0:	add	r4, r4, #4096	; 0x1000
   115e4:	mov	r3, #0
   115e8:	str	r3, [r4, #3952]	; 0xf70
   115ec:	str	r3, [r4, #3956]	; 0xf74
   115f0:	pop	{r4, r5, r6, pc}
   115f4:	push	{r4, r5, r6, lr}
   115f8:	mov	r4, r0
   115fc:	mov	r0, r1
   11600:	mov	r5, r1
   11604:	bl	11588 <__assert_fail@plt+0xa1c>
   11608:	ldr	r4, [r4, r0, lsl #4]
   1160c:	cmp	r4, #0
   11610:	beq	11628 <__assert_fail@plt+0xabc>
   11614:	mov	r0, r5
   11618:	ldr	r1, [r4, #8]
   1161c:	bl	109d4 <strcmp@plt>
   11620:	cmp	r0, #0
   11624:	bne	11630 <__assert_fail@plt+0xac4>
   11628:	mov	r0, r4
   1162c:	pop	{r4, r5, r6, pc}
   11630:	ldr	r4, [r4, #4]
   11634:	b	1160c <__assert_fail@plt+0xaa0>
   11638:	push	{r4, lr}
   1163c:	mov	r4, r0
   11640:	ldr	r0, [r1, #8]
   11644:	bl	11588 <__assert_fail@plt+0xa1c>
   11648:	add	r0, r4, r0, lsl #4
   1164c:	add	r4, r4, #4096	; 0x1000
   11650:	bl	12740 <error@@Base+0x908>
   11654:	ldr	r0, [r4, #3952]	; 0xf70
   11658:	cmp	r0, #0
   1165c:	beq	1166c <__assert_fail@plt+0xb00>
   11660:	bl	109f8 <free@plt>
   11664:	mov	r3, #0
   11668:	str	r3, [r4, #3952]	; 0xf70
   1166c:	ldr	r3, [r4, #3956]	; 0xf74
   11670:	add	r3, r3, #1
   11674:	str	r3, [r4, #3956]	; 0xf74
   11678:	pop	{r4, pc}
   1167c:	push	{r4, lr}
   11680:	mov	r4, r0
   11684:	ldr	r0, [r1, #8]
   11688:	bl	11588 <__assert_fail@plt+0xa1c>
   1168c:	add	r0, r4, r0, lsl #4
   11690:	add	r4, r4, #4096	; 0x1000
   11694:	bl	12778 <error@@Base+0x940>
   11698:	ldr	r0, [r4, #3952]	; 0xf70
   1169c:	cmp	r0, #0
   116a0:	beq	116b0 <__assert_fail@plt+0xb44>
   116a4:	bl	109f8 <free@plt>
   116a8:	mov	r3, #0
   116ac:	str	r3, [r4, #3952]	; 0xf70
   116b0:	ldr	r3, [r4, #3956]	; 0xf74
   116b4:	sub	r3, r3, #1
   116b8:	str	r3, [r4, #3956]	; 0xf74
   116bc:	pop	{r4, pc}
   116c0:	push	{r4, r5, r6, lr}
   116c4:	add	r6, r0, #4096	; 0x1000
   116c8:	ldr	r4, [r6, #3952]	; 0xf70
   116cc:	cmp	r4, #0
   116d0:	popne	{r4, r5, r6, pc}
   116d4:	ldr	r3, [r6, #3956]	; 0xf74
   116d8:	cmp	r3, #0
   116dc:	popeq	{r4, r5, r6, pc}
   116e0:	mov	r5, r0
   116e4:	mov	r1, #4
   116e8:	mov	r0, r3
   116ec:	bl	11e74 <error@@Base+0x3c>
   116f0:	mov	r3, r4
   116f4:	mov	r2, r4
   116f8:	str	r0, [r6, #3952]	; 0xf70
   116fc:	movw	lr, #503	; 0x1f7
   11700:	ldr	r1, [r5, r2, lsl #4]
   11704:	mov	ip, r3
   11708:	cmp	r1, #0
   1170c:	mov	r3, ip
   11710:	bne	11724 <__assert_fail@plt+0xbb8>
   11714:	add	r2, r2, #1
   11718:	cmp	r2, lr
   1171c:	bne	11700 <__assert_fail@plt+0xb94>
   11720:	pop	{r4, r5, r6, pc}
   11724:	str	r1, [r0, ip, lsl #2]
   11728:	add	ip, ip, #1
   1172c:	ldr	r1, [r1, #4]
   11730:	b	11708 <__assert_fail@plt+0xb9c>
   11734:	push	{r4, r5, r6, r7, r8, lr}
   11738:	add	r6, r0, #8000	; 0x1f40
   1173c:	mov	r4, r0
   11740:	mov	r7, r1
   11744:	mov	r5, r0
   11748:	add	r6, r6, #48	; 0x30
   1174c:	mov	r0, r5
   11750:	mov	r1, r7
   11754:	add	r5, r5, #16
   11758:	bl	12820 <error@@Base+0x9e8>
   1175c:	cmp	r5, r6
   11760:	bne	1174c <__assert_fail@plt+0xbe0>
   11764:	add	r4, r4, #4096	; 0x1000
   11768:	ldr	r0, [r4, #3952]	; 0xf70
   1176c:	cmp	r0, #0
   11770:	beq	11780 <__assert_fail@plt+0xc14>
   11774:	bl	109f8 <free@plt>
   11778:	mov	r3, #0
   1177c:	str	r3, [r4, #3952]	; 0xf70
   11780:	mov	r3, #0
   11784:	str	r3, [r4, #3956]	; 0xf74
   11788:	pop	{r4, r5, r6, r7, r8, pc}
   1178c:	cmp	r0, #0
   11790:	beq	117f4 <__assert_fail@plt+0xc88>
   11794:	push	{r4, r5, lr}
   11798:	mov	r2, #0
   1179c:	movw	r1, #1092	; 0x444
   117a0:	mov	r5, #12
   117a4:	ldr	lr, [pc, #80]	; 117fc <__assert_fail@plt+0xc90>
   117a8:	ldr	ip, [r0, #12]
   117ac:	sub	r3, r1, r2
   117b0:	add	r3, r2, r3, lsr #1
   117b4:	mul	r4, r5, r3
   117b8:	add	r0, lr, r4
   117bc:	ldr	r4, [lr, r4]
   117c0:	cmp	ip, r4
   117c4:	subcc	r1, r3, #1
   117c8:	bcc	117dc <__assert_fail@plt+0xc70>
   117cc:	ldr	r2, [r0, #4]
   117d0:	cmp	ip, r2
   117d4:	bls	117ec <__assert_fail@plt+0xc80>
   117d8:	add	r2, r3, #1
   117dc:	cmp	r1, r2
   117e0:	bcs	117ac <__assert_fail@plt+0xc40>
   117e4:	mov	r0, #0
   117e8:	pop	{r4, r5, pc}
   117ec:	ldr	r0, [r0, #8]
   117f0:	pop	{r4, r5, pc}
   117f4:	mov	r0, #18
   117f8:	bx	lr
   117fc:	andeq	r2, r1, r4, lsl #23
   11800:	push	{r4, lr}
   11804:	mov	r4, r0
   11808:	ldr	r4, [r4, #4]
   1180c:	cmp	r4, #0
   11810:	beq	11828 <__assert_fail@plt+0xcbc>
   11814:	mov	r0, r4
   11818:	bl	1178c <__assert_fail@plt+0xc20>
   1181c:	bic	r0, r0, #2
   11820:	cmp	r0, #4
   11824:	beq	11808 <__assert_fail@plt+0xc9c>
   11828:	mov	r0, r4
   1182c:	pop	{r4, pc}
   11830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11834:	mov	sl, r0
   11838:	sub	sp, sp, #20
   1183c:	ldr	fp, [pc, #960]	; 11c04 <__assert_fail@plt+0x1098>
   11840:	ldr	r7, [r1]
   11844:	cmp	r7, #0
   11848:	str	r7, [sp, #4]
   1184c:	beq	11b9c <__assert_fail@plt+0x1030>
   11850:	mov	r9, #17
   11854:	mov	r6, sp
   11858:	mov	r0, r6
   1185c:	bl	11800 <__assert_fail@plt+0xc94>
   11860:	mov	r6, r0
   11864:	bl	1178c <__assert_fail@plt+0xc20>
   11868:	cmp	r6, #0
   1186c:	mov	r4, r0
   11870:	moveq	r8, r6
   11874:	beq	11884 <__assert_fail@plt+0xd18>
   11878:	mov	r0, r6
   1187c:	bl	11800 <__assert_fail@plt+0xc94>
   11880:	mov	r8, r0
   11884:	mov	r0, r8
   11888:	bl	1178c <__assert_fail@plt+0xc20>
   1188c:	cmp	r8, #0
   11890:	mov	r5, r0
   11894:	beq	118a4 <__assert_fail@plt+0xd38>
   11898:	mov	r0, r8
   1189c:	bl	11800 <__assert_fail@plt+0xc94>
   118a0:	mov	r8, r0
   118a4:	mov	r0, r8
   118a8:	bl	1178c <__assert_fail@plt+0xc20>
   118ac:	sub	r3, r5, #2
   118b0:	cmp	r4, #1
   118b4:	cmpeq	r5, #2
   118b8:	clz	r3, r3
   118bc:	sub	r2, r4, #1
   118c0:	lsr	r3, r3, #5
   118c4:	beq	11bb8 <__assert_fail@plt+0x104c>
   118c8:	cmp	r2, #2
   118cc:	bls	11b94 <__assert_fail@plt+0x1028>
   118d0:	bic	ip, r5, #2
   118d4:	cmp	ip, #1
   118d8:	orreq	r3, r3, #1
   118dc:	cmp	r3, #0
   118e0:	bne	11b94 <__assert_fail@plt+0x1028>
   118e4:	sub	r3, r4, #8
   118e8:	cmp	r3, #1
   118ec:	bhi	11918 <__assert_fail@plt+0xdac>
   118f0:	sub	r2, r5, #8
   118f4:	cmp	r2, #1
   118f8:	bls	11ac8 <__assert_fail@plt+0xf5c>
   118fc:	sub	r2, r5, #12
   11900:	cmp	r5, #10
   11904:	cmpne	r2, #1
   11908:	bhi	11918 <__assert_fail@plt+0xdac>
   1190c:	sub	r2, r0, #8
   11910:	cmp	r2, #1
   11914:	bls	11ac8 <__assert_fail@plt+0xf5c>
   11918:	sub	r2, r9, #8
   1191c:	cmp	r2, #1
   11920:	bhi	11940 <__assert_fail@plt+0xdd4>
   11924:	sub	r2, r4, #12
   11928:	cmp	r4, #10
   1192c:	cmpne	r2, #1
   11930:	bhi	11940 <__assert_fail@plt+0xdd4>
   11934:	sub	r2, r5, #8
   11938:	cmp	r2, #1
   1193c:	bls	11ac8 <__assert_fail@plt+0xf5c>
   11940:	sub	r1, r4, #8
   11944:	sub	r2, r5, #10
   11948:	clz	r1, r1
   1194c:	clz	r2, r2
   11950:	lsr	r1, r1, #5
   11954:	lsr	r2, r2, #5
   11958:	tst	r1, r2
   1195c:	bne	1197c <__assert_fail@plt+0xe10>
   11960:	cmp	r5, #11
   11964:	movne	r1, #0
   11968:	andeq	r1, r1, #1
   1196c:	cmp	r1, #0
   11970:	beq	11a5c <__assert_fail@plt+0xef0>
   11974:	cmp	r0, #8
   11978:	bne	11a80 <__assert_fail@plt+0xf14>
   1197c:	mov	r4, #8
   11980:	b	11ac8 <__assert_fail@plt+0xf5c>
   11984:	cmp	r4, #0
   11988:	bne	119a0 <__assert_fail@plt+0xe34>
   1198c:	ldr	r3, [pc, #628]	; 11c08 <__assert_fail@plt+0x109c>
   11990:	mov	r2, #249	; 0xf9
   11994:	ldr	r1, [pc, #624]	; 11c0c <__assert_fail@plt+0x10a0>
   11998:	ldr	r0, [pc, #624]	; 11c10 <__assert_fail@plt+0x10a4>
   1199c:	b	119c4 <__assert_fail@plt+0xe58>
   119a0:	mov	r1, sp
   119a4:	ldr	r0, [r4, #12]
   119a8:	bl	10a1c <utf8proc_encode_char@plt>
   119ac:	cmp	r0, #0
   119b0:	bne	119c8 <__assert_fail@plt+0xe5c>
   119b4:	ldr	r3, [pc, #588]	; 11c08 <__assert_fail@plt+0x109c>
   119b8:	mov	r2, #253	; 0xfd
   119bc:	ldr	r1, [pc, #584]	; 11c0c <__assert_fail@plt+0x10a0>
   119c0:	ldr	r0, [pc, #588]	; 11c14 <__assert_fail@plt+0x10a8>
   119c4:	bl	10b6c <__assert_fail@plt>
   119c8:	ldr	r4, [r4, #4]
   119cc:	add	r5, r5, r0
   119d0:	cmp	r4, r8
   119d4:	bne	11984 <__assert_fail@plt+0xe18>
   119d8:	add	r0, r5, #1
   119dc:	mov	r5, #0
   119e0:	bl	10a7c <malloc@plt>
   119e4:	mov	r4, r0
   119e8:	cmp	r7, r8
   119ec:	bne	11a2c <__assert_fail@plt+0xec0>
   119f0:	mov	r3, #0
   119f4:	mov	r1, #12
   119f8:	mov	r0, #1
   119fc:	strb	r3, [r4, r5]
   11a00:	bl	11e74 <error@@Base+0x3c>
   11a04:	mov	r5, r0
   11a08:	mov	r0, r4
   11a0c:	bl	10b00 <utf8proc_NFC@plt>
   11a10:	mov	r1, r5
   11a14:	str	r0, [r5, #8]
   11a18:	mov	r0, sl
   11a1c:	bl	12750 <error@@Base+0x918>
   11a20:	mov	r0, r4
   11a24:	bl	109f8 <free@plt>
   11a28:	b	11b20 <__assert_fail@plt+0xfb4>
   11a2c:	cmp	r7, #0
   11a30:	ldreq	r3, [pc, #480]	; 11c18 <__assert_fail@plt+0x10ac>
   11a34:	movweq	r2, #269	; 0x10d
   11a38:	beq	11994 <__assert_fail@plt+0xe28>
   11a3c:	add	r1, r4, r5
   11a40:	ldr	r0, [r7, #12]
   11a44:	bl	10a1c <utf8proc_encode_char@plt>
   11a48:	add	r5, r5, r0
   11a4c:	ldr	r7, [r7, #4]
   11a50:	b	119e8 <__assert_fail@plt+0xe7c>
   11a54:	mov	r9, r4
   11a58:	b	11858 <__assert_fail@plt+0xcec>
   11a5c:	cmp	r9, #8
   11a60:	cmpeq	r4, #11
   11a64:	moveq	r1, #1
   11a68:	movne	r1, #0
   11a6c:	cmp	r5, #8
   11a70:	movne	r1, #0
   11a74:	andeq	r1, r1, #1
   11a78:	cmp	r1, #0
   11a7c:	bne	11bc0 <__assert_fail@plt+0x1054>
   11a80:	sub	r1, r4, #15
   11a84:	sub	r8, r5, #15
   11a88:	clz	r1, r1
   11a8c:	clz	r8, r8
   11a90:	lsr	r1, r1, #5
   11a94:	lsr	r8, r8, #5
   11a98:	tst	r1, r8
   11a9c:	bne	11bc8 <__assert_fail@plt+0x105c>
   11aa0:	cmp	r3, #1
   11aa4:	movhi	lr, #0
   11aa8:	movls	lr, #1
   11aac:	tst	r8, lr
   11ab0:	bne	11ac8 <__assert_fail@plt+0xf5c>
   11ab4:	cmp	r4, #15
   11ab8:	bne	11be0 <__assert_fail@plt+0x1074>
   11abc:	sub	r3, r5, #8
   11ac0:	cmp	r3, #1
   11ac4:	bhi	11b28 <__assert_fail@plt+0xfbc>
   11ac8:	ldr	r3, [r6, #4]
   11acc:	cmp	r3, #0
   11ad0:	bne	11a54 <__assert_fail@plt+0xee8>
   11ad4:	ldr	r4, [r6, #4]
   11ad8:	cmp	r4, #0
   11adc:	beq	11af4 <__assert_fail@plt+0xf88>
   11ae0:	mov	r0, r4
   11ae4:	bl	1178c <__assert_fail@plt+0xc20>
   11ae8:	bic	r0, r0, #2
   11aec:	cmp	r0, #4
   11af0:	beq	11bd8 <__assert_fail@plt+0x106c>
   11af4:	ldr	r0, [r7, #12]
   11af8:	bl	10a04 <utf8proc_get_property@plt>
   11afc:	ldrh	r3, [r0]
   11b00:	cmp	r3, #29
   11b04:	bhi	11b20 <__assert_fail@plt+0xfb4>
   11b08:	mov	r2, #1
   11b0c:	ands	r3, fp, r2, lsl r3
   11b10:	movne	r4, r7
   11b14:	movne	r5, #0
   11b18:	ldrne	r8, [r6, #4]
   11b1c:	bne	119d0 <__assert_fail@plt+0xe64>
   11b20:	ldr	r7, [r6, #4]
   11b24:	b	11844 <__assert_fail@plt+0xcd8>
   11b28:	cmp	ip, #12
   11b2c:	orreq	r2, r2, #1
   11b30:	cmp	r2, #0
   11b34:	beq	11b40 <__assert_fail@plt+0xfd4>
   11b38:	cmp	r0, #15
   11b3c:	beq	11ac8 <__assert_fail@plt+0xf5c>
   11b40:	sub	r3, r4, #7
   11b44:	cmp	r5, #7
   11b48:	cmpeq	r4, #7
   11b4c:	clz	r3, r3
   11b50:	lsr	r3, r3, #5
   11b54:	beq	11bd0 <__assert_fail@plt+0x1064>
   11b58:	orrs	r2, r1, lr
   11b5c:	bne	11b70 <__assert_fail@plt+0x1004>
   11b60:	cmp	r4, #16
   11b64:	orreq	r3, r3, #1
   11b68:	cmp	r3, #0
   11b6c:	beq	11ba4 <__assert_fail@plt+0x1038>
   11b70:	cmp	r5, #16
   11b74:	beq	11ac8 <__assert_fail@plt+0xf5c>
   11b78:	cmp	r4, #16
   11b7c:	bne	11ba4 <__assert_fail@plt+0x1038>
   11b80:	cmp	r5, #15
   11b84:	beq	11ac8 <__assert_fail@plt+0xf5c>
   11b88:	sub	r5, r5, #7
   11b8c:	cmp	r5, #2
   11b90:	bls	11ac8 <__assert_fail@plt+0xf5c>
   11b94:	cmp	r6, #0
   11b98:	bne	11ad4 <__assert_fail@plt+0xf68>
   11b9c:	add	sp, sp, #20
   11ba0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ba4:	cmp	r4, #5
   11ba8:	cmpeq	r5, #5
   11bac:	bne	11b94 <__assert_fail@plt+0x1028>
   11bb0:	mov	r4, #5
   11bb4:	b	11ac8 <__assert_fail@plt+0xf5c>
   11bb8:	mov	r4, #1
   11bbc:	b	11ac8 <__assert_fail@plt+0xf5c>
   11bc0:	mov	r4, #11
   11bc4:	b	11ac8 <__assert_fail@plt+0xf5c>
   11bc8:	mov	r4, #15
   11bcc:	b	11ac8 <__assert_fail@plt+0xf5c>
   11bd0:	mov	r4, #7
   11bd4:	b	11ac8 <__assert_fail@plt+0xf5c>
   11bd8:	mov	r6, r4
   11bdc:	b	11ad4 <__assert_fail@plt+0xf68>
   11be0:	cmp	r9, #15
   11be4:	bne	11b40 <__assert_fail@plt+0xfd4>
   11be8:	cmp	r4, #14
   11bec:	beq	11bfc <__assert_fail@plt+0x1090>
   11bf0:	sub	r3, r4, #10
   11bf4:	bics	r3, r3, #2
   11bf8:	bne	11b40 <__assert_fail@plt+0xfd4>
   11bfc:	cmp	r5, #15
   11c00:	b	11b3c <__assert_fail@plt+0xfd0>
   11c04:	strdcs	r1, [r0], -lr
   11c08:	andeq	r2, r1, r0, ror #22
   11c0c:	andeq	r5, r1, r0, asr #29
   11c10:	andeq	r5, r1, r7, asr #29
   11c14:	ldrdeq	r5, [r1], -r7
   11c18:	andeq	r2, r1, r1, ror fp
   11c1c:	push	{r4, lr}
   11c20:	mov	r4, r0
   11c24:	ldr	r0, [r0, #8]
   11c28:	bl	109f8 <free@plt>
   11c2c:	mov	r0, r4
   11c30:	pop	{r4, lr}
   11c34:	b	109f8 <free@plt>
   11c38:	ldr	r3, [pc, #56]	; 11c78 <__assert_fail@plt+0x110c>
   11c3c:	push	{r4, r5, lr}
   11c40:	sub	sp, sp, #116	; 0x74
   11c44:	mov	r5, r0
   11c48:	ldr	r4, [r3]
   11c4c:	bl	10aac <getpid@plt>
   11c50:	ldr	r1, [pc, #36]	; 11c7c <__assert_fail@plt+0x1110>
   11c54:	mov	r3, r0
   11c58:	add	r0, sp, #12
   11c5c:	str	r5, [sp]
   11c60:	mov	r2, r4
   11c64:	bl	10b18 <sprintf@plt>
   11c68:	add	r0, sp, #12
   11c6c:	bl	10a28 <strdup@plt>
   11c70:	add	sp, sp, #116	; 0x74
   11c74:	pop	{r4, r5, pc}
   11c78:	andeq	fp, r2, r4, asr #8
   11c7c:	andeq	r5, r1, sl, ror #29
   11c80:	ldr	r3, [pc, #84]	; 11cdc <__assert_fail@plt+0x1170>
   11c84:	mov	r5, r0
   11c88:	push	{r7, lr}
   11c8c:	ldr	r3, [r3]
   11c90:	cmp	r3, #0
   11c94:	beq	11c9c <__assert_fail@plt+0x1130>
   11c98:	blx	r3
   11c9c:	ldr	r6, [pc, #60]	; 11ce0 <__assert_fail@plt+0x1174>
   11ca0:	mov	r4, #1
   11ca4:	ldrsh	r3, [r6]
   11ca8:	cmp	r3, r4
   11cac:	bge	11cb8 <__assert_fail@plt+0x114c>
   11cb0:	mov	r0, r5
   11cb4:	bl	10ab8 <exit@plt>
   11cb8:	mov	r0, r4
   11cbc:	add	r4, r4, #1
   11cc0:	bl	11c38 <__assert_fail@plt+0x10cc>
   11cc4:	mov	r7, r0
   11cc8:	sxth	r4, r4
   11ccc:	bl	10a40 <unlink@plt>
   11cd0:	mov	r0, r7
   11cd4:	bl	109f8 <free@plt>
   11cd8:	b	11ca4 <__assert_fail@plt+0x1138>
   11cdc:	andeq	fp, r2, r8, asr #8
   11ce0:	andeq	r7, r2, ip, lsr r1
   11ce4:	sub	r2, r0, #1
   11ce8:	sub	r1, r1, #1
   11cec:	ldrb	r3, [r2, #1]!
   11cf0:	ldrb	r0, [r1, #1]!
   11cf4:	cmp	r3, #0
   11cf8:	beq	11d14 <__assert_fail@plt+0x11a8>
   11cfc:	cmp	r3, r0
   11d00:	beq	11cec <__assert_fail@plt+0x1180>
   11d04:	cmp	r3, r0
   11d08:	mvncc	r0, #0
   11d0c:	movcs	r0, #1
   11d10:	bx	lr
   11d14:	cmp	r0, #0
   11d18:	bxeq	lr
   11d1c:	b	11d04 <__assert_fail@plt+0x1198>
   11d20:	ldr	r2, [pc, #28]	; 11d44 <__assert_fail@plt+0x11d8>
   11d24:	ldr	r2, [r2]
   11d28:	cmp	r2, r0
   11d2c:	bxeq	lr
   11d30:	ldr	r2, [pc, #16]	; 11d48 <__assert_fail@plt+0x11dc>
   11d34:	ldr	r2, [r2]
   11d38:	cmp	r2, r0
   11d3c:	bxeq	lr
   11d40:	b	10af4 <fclose@plt>
   11d44:	andeq	r7, r2, r8, asr #1
   11d48:	andeq	r7, r2, ip, asr #1
   11d4c:	push	{lr}		; (str lr, [sp, #-4]!)
   11d50:	sub	sp, sp, #92	; 0x5c
   11d54:	mov	r1, sp
   11d58:	bl	129e4 <error@@Base+0xbac>
   11d5c:	clz	r0, r0
   11d60:	lsr	r0, r0, #5
   11d64:	add	sp, sp, #92	; 0x5c
   11d68:	pop	{pc}		; (ldr pc, [sp], #4)
   11d6c:	ldr	r3, [pc, #36]	; 11d98 <__assert_fail@plt+0x122c>
   11d70:	push	{r4, lr}
   11d74:	ldrh	r0, [r3]
   11d78:	add	r0, r0, #1
   11d7c:	sxth	r0, r0
   11d80:	strh	r0, [r3]
   11d84:	bl	11c38 <__assert_fail@plt+0x10cc>
   11d88:	mov	r4, r0
   11d8c:	bl	10a40 <unlink@plt>
   11d90:	mov	r0, r4
   11d94:	pop	{r4, pc}
   11d98:	andeq	r7, r2, ip, lsr r1
   11d9c:	push	{r4, lr}
   11da0:	mov	r4, r0
   11da4:	bl	10ad0 <strlen@plt>
   11da8:	sub	r0, r0, #1
   11dac:	add	r1, r4, #1
   11db0:	sxth	r0, r0
   11db4:	tst	r0, #32768	; 0x8000
   11db8:	bne	11dcc <__assert_fail@plt+0x1260>
   11dbc:	sub	r3, r0, #1
   11dc0:	ldrb	r2, [r1, r3]
   11dc4:	cmp	r2, #47	; 0x2f
   11dc8:	bne	11dd8 <__assert_fail@plt+0x126c>
   11dcc:	add	r0, r0, #1
   11dd0:	add	r0, r4, r0
   11dd4:	pop	{r4, pc}
   11dd8:	mov	r0, r3
   11ddc:	b	11db4 <__assert_fail@plt+0x1248>
   11de0:	push	{r4, lr}
   11de4:	mov	r0, #0
   11de8:	bl	11c80 <__assert_fail@plt+0x1114>
   11dec:	ldr	r2, [pc, #52]	; 11e28 <__assert_fail@plt+0x12bc>
   11df0:	push	{r4, lr}
   11df4:	ldr	r2, [r2]
   11df8:	cmp	r2, #0
   11dfc:	beq	11e08 <__assert_fail@plt+0x129c>
   11e00:	blx	r2
   11e04:	bl	11de0 <__assert_fail@plt+0x1274>
   11e08:	mov	r3, r0
   11e0c:	ldr	r2, [pc, #24]	; 11e2c <__assert_fail@plt+0x12c0>
   11e10:	ldr	r0, [pc, #24]	; 11e30 <__assert_fail@plt+0x12c4>
   11e14:	ldr	r1, [pc, #24]	; 11e34 <__assert_fail@plt+0x12c8>
   11e18:	ldr	r2, [r2]
   11e1c:	ldr	r0, [r0]
   11e20:	bl	10adc <fprintf@plt>
   11e24:	b	11e04 <__assert_fail@plt+0x1298>
   11e28:	andeq	fp, r2, r0, asr #8
   11e2c:	andeq	fp, r2, r4, asr #8
   11e30:	andeq	r7, r2, r0, asr #1
   11e34:	strdeq	r5, [r1], -r8

00011e38 <error@@Base>:
   11e38:	mov	r3, r0
   11e3c:	ldr	r2, [pc, #32]	; 11e64 <error@@Base+0x2c>
   11e40:	push	{r4, lr}
   11e44:	ldr	r0, [pc, #28]	; 11e68 <error@@Base+0x30>
   11e48:	ldr	r1, [pc, #28]	; 11e6c <error@@Base+0x34>
   11e4c:	ldr	r2, [r2]
   11e50:	ldr	r0, [r0]
   11e54:	bl	10adc <fprintf@plt>
   11e58:	ldr	r3, [pc, #16]	; 11e70 <error@@Base+0x38>
   11e5c:	ldr	r0, [r3]
   11e60:	bl	11c80 <__assert_fail@plt+0x1114>
   11e64:	andeq	fp, r2, r4, asr #8
   11e68:	andeq	r7, r2, r0, asr #1
   11e6c:	andeq	r5, r1, r7, lsl #30
   11e70:	strheq	r7, [r2], -r4
   11e74:	push	{r4, lr}
   11e78:	bl	109c8 <calloc@plt>
   11e7c:	cmp	r0, #0
   11e80:	popne	{r4, pc}
   11e84:	ldr	r0, [pc]	; 11e8c <error@@Base+0x54>
   11e88:	bl	11e38 <error@@Base>
   11e8c:	andeq	r5, r1, pc, lsl #30
   11e90:	ldr	r3, [pc, #28]	; 11eb4 <error@@Base+0x7c>
   11e94:	ldrb	r2, [r3, #2]
   11e98:	cmp	r2, #0
   11e9c:	bxne	lr
   11ea0:	mov	r2, #1
   11ea4:	push	{r4, lr}
   11ea8:	ldr	r0, [pc, #8]	; 11eb8 <error@@Base+0x80>
   11eac:	strb	r2, [r3, #2]
   11eb0:	bl	11e38 <error@@Base>
   11eb4:	andeq	r7, r2, ip, lsr r1
   11eb8:	andeq	r5, r1, r9, lsr #30
   11ebc:	push	{r0, r1, r2, lr}
   11ec0:	mov	r3, r0
   11ec4:	ldr	r2, [pc, #32]	; 11eec <error@@Base+0xb4>
   11ec8:	str	r1, [sp]
   11ecc:	ldr	r0, [pc, #28]	; 11ef0 <error@@Base+0xb8>
   11ed0:	ldr	r1, [pc, #28]	; 11ef4 <error@@Base+0xbc>
   11ed4:	ldr	r2, [r2]
   11ed8:	ldr	r0, [r0]
   11edc:	bl	10adc <fprintf@plt>
   11ee0:	ldr	r3, [pc, #16]	; 11ef8 <error@@Base+0xc0>
   11ee4:	ldr	r0, [r3]
   11ee8:	bl	11c80 <__assert_fail@plt+0x1114>
   11eec:	andeq	fp, r2, r4, asr #8
   11ef0:	andeq	r7, r2, r0, asr #1
   11ef4:	andeq	r5, r1, r8, lsr pc
   11ef8:	strheq	r7, [r2], -r4
   11efc:	push	{r4, r5, r6, lr}
   11f00:	subs	r4, r0, #0
   11f04:	mov	r5, r1
   11f08:	bne	11f24 <error@@Base+0xec>
   11f0c:	ldrb	r3, [r1]
   11f10:	cmp	r3, #114	; 0x72
   11f14:	ldreq	r3, [pc, #44]	; 11f48 <error@@Base+0x110>
   11f18:	ldrne	r3, [pc, #44]	; 11f4c <error@@Base+0x114>
   11f1c:	ldr	r0, [r3]
   11f20:	pop	{r4, r5, r6, pc}
   11f24:	bl	109ec <fopen@plt>
   11f28:	cmp	r0, #0
   11f2c:	popne	{r4, r5, r6, pc}
   11f30:	mov	r1, r4
   11f34:	ldrb	r3, [r5]
   11f38:	cmp	r3, #119	; 0x77
   11f3c:	ldreq	r0, [pc, #12]	; 11f50 <error@@Base+0x118>
   11f40:	ldrne	r0, [pc, #12]	; 11f54 <error@@Base+0x11c>
   11f44:	bl	11ebc <error@@Base+0x84>
   11f48:	andeq	r7, r2, r8, asr #1
   11f4c:	andeq	r7, r2, ip, asr #1
   11f50:	andeq	r5, r1, r5, asr #30
   11f54:	andeq	r5, r1, fp, asr pc
   11f58:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f5c:	mov	r8, r0
   11f60:	mov	r7, r1
   11f64:	mov	r9, r3
   11f68:	ldr	r0, [r1]
   11f6c:	str	r2, [sp]
   11f70:	bl	11d9c <__assert_fail@plt+0x1230>
   11f74:	ldr	r3, [pc, #396]	; 12108 <error@@Base+0x2d0>
   11f78:	ldr	r1, [pc, #396]	; 1210c <error@@Base+0x2d4>
   11f7c:	str	r0, [r3]
   11f80:	mov	r0, #2
   11f84:	bl	10a94 <__sysv_signal@plt>
   11f88:	ldr	r1, [pc, #380]	; 1210c <error@@Base+0x2d4>
   11f8c:	mov	r0, #15
   11f90:	bl	10a94 <__sysv_signal@plt>
   11f94:	ldr	r4, [r8]
   11f98:	cmp	r4, #1
   11f9c:	movne	r6, #0
   11fa0:	movne	r4, #1
   11fa4:	bne	120c8 <error@@Base+0x290>
   11fa8:	ldr	r3, [pc, #352]	; 12110 <error@@Base+0x2d8>
   11fac:	ldrb	r6, [r3, #4]
   11fb0:	cmp	r6, #0
   11fb4:	beq	120c8 <error@@Base+0x290>
   11fb8:	ldr	r0, [sp]
   11fbc:	bl	11dec <__assert_fail@plt+0x1280>
   11fc0:	ldr	r5, [r7, r4, lsl #2]
   11fc4:	lsl	sl, r4, #2
   11fc8:	ldrb	r3, [r5]
   11fcc:	cmp	r3, #45	; 0x2d
   11fd0:	bne	120f8 <error@@Base+0x2c0>
   11fd4:	ldrb	r3, [r5, #1]
   11fd8:	cmp	r3, #0
   11fdc:	str	r3, [sp, #4]
   11fe0:	beq	120f8 <error@@Base+0x2c0>
   11fe4:	mov	r0, r5
   11fe8:	bl	10ad0 <strlen@plt>
   11fec:	mov	r2, r0
   11ff0:	mov	r1, r5
   11ff4:	ldr	r0, [pc, #280]	; 12114 <error@@Base+0x2dc>
   11ff8:	bl	10b48 <strncmp@plt>
   11ffc:	cmp	r0, #0
   12000:	beq	11fb8 <error@@Base+0x180>
   12004:	add	r0, r4, #1
   12008:	ldr	r3, [sp, #4]
   1200c:	cmp	r0, fp
   12010:	addlt	sl, r7, sl
   12014:	movge	r1, #0
   12018:	ldrlt	r1, [sl, #4]
   1201c:	cmp	r9, #0
   12020:	beq	120e0 <error@@Base+0x2a8>
   12024:	mov	ip, #0
   12028:	sxth	r2, ip
   1202c:	add	r2, r2, r2, lsl #1
   12030:	add	lr, r9, r2, lsl #2
   12034:	ldrb	r2, [r9, r2, lsl #2]
   12038:	cmp	r2, #0
   1203c:	beq	120e0 <error@@Base+0x2a8>
   12040:	cmp	r3, r2
   12044:	add	ip, ip, #1
   12048:	bne	12028 <error@@Base+0x1f0>
   1204c:	ldr	r3, [lr, #4]
   12050:	cmp	r3, #0
   12054:	bne	12088 <error@@Base+0x250>
   12058:	ldr	r3, [lr, #8]
   1205c:	cmp	r3, #0
   12060:	beq	120e0 <error@@Base+0x2a8>
   12064:	ldrb	r2, [r5, #2]
   12068:	cmp	r2, #0
   1206c:	bne	120e0 <error@@Base+0x2a8>
   12070:	ldrb	r2, [r3]
   12074:	cmp	r2, #0
   12078:	bne	120ec <error@@Base+0x2b4>
   1207c:	mov	r2, #1
   12080:	strb	r2, [r3]
   12084:	b	120c0 <error@@Base+0x288>
   12088:	ldrb	r2, [r5, #2]
   1208c:	cmp	r1, #0
   12090:	cmpeq	r2, #0
   12094:	beq	12058 <error@@Base+0x220>
   12098:	ldr	ip, [r3]
   1209c:	cmp	ip, #0
   120a0:	bne	120ec <error@@Base+0x2b4>
   120a4:	cmp	r2, #0
   120a8:	sxth	r0, r0
   120ac:	addne	r1, r5, #2
   120b0:	str	r1, [r3]
   120b4:	ldrb	r3, [r5, #2]
   120b8:	cmp	r3, #0
   120bc:	moveq	r4, r0
   120c0:	add	r4, r4, #1
   120c4:	sxth	r4, r4
   120c8:	ldr	fp, [r8]
   120cc:	cmp	r4, fp
   120d0:	blt	11fc0 <error@@Base+0x188>
   120d4:	str	r6, [r8]
   120d8:	add	sp, sp, #12
   120dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120e0:	ldr	r0, [pc, #48]	; 12118 <error@@Base+0x2e0>
   120e4:	mov	r1, r5
   120e8:	bl	11ebc <error@@Base+0x84>
   120ec:	mov	r1, r5
   120f0:	ldr	r0, [pc, #36]	; 1211c <error@@Base+0x2e4>
   120f4:	b	120e8 <error@@Base+0x2b0>
   120f8:	add	r3, r6, #1
   120fc:	str	r5, [r7, r6, lsl #2]
   12100:	sxth	r6, r3
   12104:	b	120c0 <error@@Base+0x288>
   12108:	andeq	fp, r2, r4, asr #8
   1210c:	muleq	r1, r0, lr
   12110:	strheq	r7, [r2], -r4
   12114:	andeq	r5, r1, pc, ror #30
   12118:	andeq	r5, r1, r5, ror pc
   1211c:	andeq	r5, r1, r4, lsl #31
   12120:	push	{r0, r1, r2, lr}
   12124:	mov	r3, r0
   12128:	ldr	r2, [pc, #28]	; 1214c <error@@Base+0x314>
   1212c:	str	r1, [sp]
   12130:	ldr	r0, [pc, #24]	; 12150 <error@@Base+0x318>
   12134:	ldr	r1, [pc, #24]	; 12154 <error@@Base+0x31c>
   12138:	ldr	r2, [r2]
   1213c:	ldr	r0, [r0]
   12140:	bl	10adc <fprintf@plt>
   12144:	add	sp, sp, #12
   12148:	pop	{pc}		; (ldr pc, [sp], #4)
   1214c:	andeq	fp, r2, r4, asr #8
   12150:	andeq	r7, r2, r0, asr #1
   12154:	andeq	r5, r1, r8, lsr pc
   12158:	push	{r4, r5, r6, lr}
   1215c:	mov	r4, r0
   12160:	uxtb	r6, r1
   12164:	mov	r0, #1
   12168:	mov	r1, #16
   1216c:	mov	r5, r2
   12170:	bl	11e74 <error@@Base+0x3c>
   12174:	mov	r1, r0
   12178:	mov	r0, r4
   1217c:	strb	r6, [r1, #8]
   12180:	str	r5, [r1, #12]
   12184:	pop	{r4, r5, r6, lr}
   12188:	b	12750 <error@@Base+0x918>
   1218c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12190:	mov	r6, r0
   12194:	mov	r0, r1
   12198:	clz	r1, r1
   1219c:	sub	sp, sp, #116	; 0x74
   121a0:	lsr	r1, r1, #5
   121a4:	ldrb	r3, [r2]
   121a8:	cmp	r3, #0
   121ac:	moveq	r1, #0
   121b0:	cmp	r1, #0
   121b4:	beq	121c4 <error@@Base+0x38c>
   121b8:	ldr	r1, [pc, #732]	; 1249c <error@@Base+0x664>
   121bc:	ldr	r0, [pc, #732]	; 124a0 <error@@Base+0x668>
   121c0:	bl	11ebc <error@@Base+0x84>
   121c4:	mov	r4, r2
   121c8:	ldr	r1, [pc, #724]	; 124a4 <error@@Base+0x66c>
   121cc:	ldr	r7, [r6, #4]
   121d0:	bl	11efc <error@@Base+0xc4>
   121d4:	ldrb	r3, [r4]
   121d8:	mov	r5, r0
   121dc:	cmp	r3, #0
   121e0:	beq	1226c <error@@Base+0x434>
   121e4:	mov	r2, r0
   121e8:	mov	r1, #99	; 0x63
   121ec:	add	r0, sp, #12
   121f0:	bl	10a10 <fgets@plt>
   121f4:	cmp	r0, #0
   121f8:	beq	1225c <error@@Base+0x424>
   121fc:	mov	r2, #51	; 0x33
   12200:	ldr	r1, [pc, #672]	; 124a8 <error@@Base+0x670>
   12204:	add	r0, sp, #12
   12208:	bl	10b48 <strncmp@plt>
   1220c:	subs	r8, r0, #0
   12210:	bne	1225c <error@@Base+0x424>
   12214:	ldr	r9, [pc, #656]	; 124ac <error@@Base+0x674>
   12218:	mov	r2, r5
   1221c:	mov	r1, #99	; 0x63
   12220:	add	r0, sp, #12
   12224:	bl	10a10 <fgets@plt>
   12228:	cmp	r0, #0
   1222c:	beq	12254 <error@@Base+0x41c>
   12230:	mov	r1, r9
   12234:	add	r0, sp, #12
   12238:	bl	109d4 <strcmp@plt>
   1223c:	cmp	r0, #0
   12240:	bne	12218 <error@@Base+0x3e0>
   12244:	add	r8, r8, #1
   12248:	sxth	r8, r8
   1224c:	cmp	r8, #2
   12250:	bne	12218 <error@@Base+0x3e0>
   12254:	mov	r3, #1
   12258:	b	12268 <error@@Base+0x430>
   1225c:	mov	r0, r5
   12260:	bl	10a34 <rewind@plt>
   12264:	mov	r3, #0
   12268:	strb	r3, [r4, #11]
   1226c:	ldr	r8, [r4, #4]
   12270:	mov	r0, r5
   12274:	mov	fp, #0
   12278:	ldrb	r3, [r4, #1]
   1227c:	cmp	r8, #0
   12280:	moveq	r8, #94	; 0x5e
   12284:	str	r3, [sp, #4]
   12288:	bl	10b60 <getc@plt>
   1228c:	cmn	r0, #1
   12290:	bne	122bc <error@@Base+0x484>
   12294:	mov	r0, r5
   12298:	bl	11d20 <__assert_fail@plt+0x11b4>
   1229c:	ldrb	r3, [r4, #9]
   122a0:	cmp	r3, #0
   122a4:	bne	1235c <error@@Base+0x524>
   122a8:	ldrb	r3, [r4, #10]
   122ac:	cmp	r3, #0
   122b0:	bne	12474 <error@@Base+0x63c>
   122b4:	add	sp, sp, #116	; 0x74
   122b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122bc:	ldr	r3, [pc, #492]	; 124b0 <error@@Base+0x678>
   122c0:	ldrsb	r9, [r3, r0]
   122c4:	cmp	r9, #0
   122c8:	bgt	122d4 <error@@Base+0x49c>
   122cc:	ldr	r0, [pc, #480]	; 124b4 <error@@Base+0x67c>
   122d0:	bl	11e38 <error@@Base>
   122d4:	cmp	r9, #1
   122d8:	strb	r0, [sp, #8]
   122dc:	beq	12304 <error@@Base+0x4cc>
   122e0:	sub	sl, r9, #1
   122e4:	mov	r3, r5
   122e8:	mov	r2, sl
   122ec:	mov	r1, #1
   122f0:	add	r0, sp, #9
   122f4:	bl	10a64 <fread@plt>
   122f8:	cmp	sl, r0
   122fc:	ldrne	r0, [pc, #436]	; 124b8 <error@@Base+0x680>
   12300:	bne	122d0 <error@@Base+0x498>
   12304:	add	r2, sp, #12
   12308:	mov	r1, #4
   1230c:	add	r0, sp, #8
   12310:	bl	10a70 <utf8proc_iterate@plt>
   12314:	cmp	r9, r0
   12318:	beq	12324 <error@@Base+0x4ec>
   1231c:	bl	10b30 <utf8proc_errmsg@plt>
   12320:	b	122d0 <error@@Base+0x498>
   12324:	ldr	r3, [sp, #4]
   12328:	ldr	r2, [sp, #12]
   1232c:	cmp	r3, #0
   12330:	beq	12340 <error@@Base+0x508>
   12334:	cmp	r8, r2
   12338:	moveq	fp, #1
   1233c:	beq	12350 <error@@Base+0x518>
   12340:	mov	r1, fp
   12344:	mov	r0, r6
   12348:	mov	fp, #0
   1234c:	bl	12158 <error@@Base+0x320>
   12350:	mov	r0, r5
   12354:	bl	10b60 <getc@plt>
   12358:	b	1228c <error@@Base+0x454>
   1235c:	cmp	r7, #0
   12360:	mov	sl, #32
   12364:	ldrne	r8, [r7, #4]
   12368:	ldreq	r8, [r6]
   1236c:	mov	r5, r8
   12370:	cmp	r5, #0
   12374:	bne	123c0 <error@@Base+0x588>
   12378:	cmp	r8, #0
   1237c:	beq	122a8 <error@@Base+0x470>
   12380:	eor	r3, r5, #1
   12384:	ldr	r9, [r8, #4]
   12388:	ldr	r2, [r8, #12]
   1238c:	cmp	r2, #32
   12390:	bne	12414 <error@@Base+0x5dc>
   12394:	cmp	r9, #0
   12398:	moveq	r3, #1
   1239c:	cmp	r3, #0
   123a0:	bne	12444 <error@@Base+0x60c>
   123a4:	ldr	r3, [r9, #12]
   123a8:	cmp	r3, #10
   123ac:	cmpne	r3, #32
   123b0:	beq	12444 <error@@Base+0x60c>
   123b4:	subs	r5, r2, #10
   123b8:	movne	r5, #1
   123bc:	b	1243c <error@@Base+0x604>
   123c0:	ldr	r9, [r5, #12]
   123c4:	mov	r0, r9
   123c8:	bl	10a04 <utf8proc_get_property@plt>
   123cc:	cmp	r9, #13
   123d0:	bhi	12404 <error@@Base+0x5cc>
   123d4:	cmp	r9, #11
   123d8:	bcs	1240c <error@@Base+0x5d4>
   123dc:	cmp	r9, #9
   123e0:	beq	1240c <error@@Base+0x5d4>
   123e4:	cmp	r9, #10
   123e8:	beq	123fc <error@@Base+0x5c4>
   123ec:	ldrsh	r3, [r0]
   123f0:	sub	r3, r3, #23
   123f4:	cmp	r3, #2
   123f8:	bls	1240c <error@@Base+0x5d4>
   123fc:	ldr	r5, [r5, #4]
   12400:	b	12370 <error@@Base+0x538>
   12404:	cmp	r9, #160	; 0xa0
   12408:	bne	123ec <error@@Base+0x5b4>
   1240c:	str	sl, [r5, #12]
   12410:	b	123fc <error@@Base+0x5c4>
   12414:	cmp	r2, #10
   12418:	movne	r3, #0
   1241c:	andeq	r3, r3, #1
   12420:	cmp	r3, #0
   12424:	beq	123b4 <error@@Base+0x57c>
   12428:	mov	r0, r6
   1242c:	mov	r1, r8
   12430:	bl	12778 <error@@Base+0x940>
   12434:	mov	r0, r8
   12438:	bl	109f8 <free@plt>
   1243c:	mov	r8, r9
   12440:	b	12378 <error@@Base+0x540>
   12444:	cmp	r9, #0
   12448:	movne	r3, r5
   1244c:	moveq	r3, #0
   12450:	cmp	r3, #0
   12454:	beq	12428 <error@@Base+0x5f0>
   12458:	ldr	r3, [r9, #12]
   1245c:	cmp	r3, #32
   12460:	ldrbeq	r3, [r9, #8]
   12464:	ldrbeq	r2, [r8, #8]
   12468:	orreq	r3, r3, r2
   1246c:	strbeq	r3, [r9, #8]
   12470:	b	12428 <error@@Base+0x5f0>
   12474:	cmp	r7, #0
   12478:	ldrne	r4, [r7, #4]
   1247c:	ldreq	r4, [r6]
   12480:	cmp	r4, #0
   12484:	beq	122b4 <error@@Base+0x47c>
   12488:	ldr	r0, [r4, #12]
   1248c:	bl	10a4c <utf8proc_tolower@plt>
   12490:	str	r0, [r4, #12]
   12494:	ldr	r4, [r4, #4]
   12498:	b	12480 <error@@Base+0x648>
   1249c:	muleq	r1, r5, pc	; <UNPREDICTABLE>
   124a0:	muleq	r1, pc, pc	; <UNPREDICTABLE>
   124a4:	andeq	r6, r1, r5, lsr r0
   124a8:	andeq	r5, r1, pc, lsr #31
   124ac:	andeq	r5, r1, r7, ror #31
   124b0:	andeq	r6, r2, r8, lsl #28
   124b4:	andeq	r6, r1, pc, lsl r0
   124b8:	andeq	r6, r1, r7, lsr r0
   124bc:	push	{r4, lr}
   124c0:	bl	10a1c <utf8proc_encode_char@plt>
   124c4:	cmp	r0, #0
   124c8:	bgt	124d4 <error@@Base+0x69c>
   124cc:	ldr	r0, [pc, #8]	; 124dc <error@@Base+0x6a4>
   124d0:	bl	11e38 <error@@Base>
   124d4:	sxtb	r0, r0
   124d8:	pop	{r4, pc}
   124dc:	andeq	r6, r1, pc, asr #32
   124e0:	push	{r4, r5, r6, r7, r8, lr}
   124e4:	uxtb	r4, r0
   124e8:	mov	r7, r1
   124ec:	cmp	r4, #0
   124f0:	mov	r6, r2
   124f4:	uxtb	r8, r3
   124f8:	beq	1250c <error@@Base+0x6d4>
   124fc:	mov	r1, r2
   12500:	mov	r0, #94	; 0x5e
   12504:	bl	124bc <error@@Base+0x684>
   12508:	sxth	r4, r0
   1250c:	cmp	r7, #10
   12510:	add	r5, r6, r4
   12514:	bne	12534 <error@@Base+0x6fc>
   12518:	ldr	r2, [pc, #164]	; 125c4 <error@@Base+0x78c>
   1251c:	cmp	r8, #0
   12520:	mov	r0, r5
   12524:	pop	{r4, r5, r6, r7, r8, lr}
   12528:	ldr	r1, [pc, #152]	; 125c8 <error@@Base+0x790>
   1252c:	moveq	r1, r2
   12530:	b	10b18 <sprintf@plt>
   12534:	mov	r0, r7
   12538:	bl	10a04 <utf8proc_get_property@plt>
   1253c:	cmp	r7, #32
   12540:	beq	12560 <error@@Base+0x728>
   12544:	ldrh	r3, [r0]
   12548:	cmp	r3, #29
   1254c:	bhi	125a8 <error@@Base+0x770>
   12550:	ldr	r2, [pc, #116]	; 125cc <error@@Base+0x794>
   12554:	mov	r1, #1
   12558:	ands	r3, r2, r1, lsl r3
   1255c:	beq	125a8 <error@@Base+0x770>
   12560:	mov	r0, r7
   12564:	bl	10ac4 <utf8proc_category@plt>
   12568:	sub	r0, r0, #6
   1256c:	cmp	r0, #2
   12570:	bhi	12588 <error@@Base+0x750>
   12574:	mov	r1, r5
   12578:	movw	r0, #9676	; 0x25cc
   1257c:	bl	124bc <error@@Base+0x684>
   12580:	add	r4, r0, r4
   12584:	sxth	r4, r4
   12588:	add	r1, r6, r4
   1258c:	mov	r0, r7
   12590:	bl	124bc <error@@Base+0x684>
   12594:	add	r0, r0, r4
   12598:	mov	r3, #0
   1259c:	sxth	r0, r0
   125a0:	strb	r3, [r6, r0]
   125a4:	pop	{r4, r5, r6, r7, r8, pc}
   125a8:	cmp	r7, #255	; 0xff
   125ac:	mov	r2, r7
   125b0:	mov	r0, r5
   125b4:	ldrls	r1, [pc, #20]	; 125d0 <error@@Base+0x798>
   125b8:	pop	{r4, r5, r6, r7, r8, lr}
   125bc:	ldrhi	r1, [pc, #16]	; 125d4 <error@@Base+0x79c>
   125c0:	b	10b18 <sprintf@plt>
   125c4:	andeq	r5, r1, r3, asr #30
   125c8:	andeq	r6, r1, r6, rrx
   125cc:	ldrshtcs	pc, [pc], #-254	; <UNPREDICTABLE>
   125d0:	andeq	r6, r1, fp, rrx
   125d4:	andeq	r6, r1, r2, ror r0
   125d8:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   125dc:	mov	r5, r2
   125e0:	mov	r6, r0
   125e4:	mov	r0, r1
   125e8:	ldr	r1, [pc, #124]	; 1266c <error@@Base+0x834>
   125ec:	bl	11efc <error@@Base+0xc4>
   125f0:	cmp	r5, #0
   125f4:	mov	r4, r0
   125f8:	beq	12628 <error@@Base+0x7f0>
   125fc:	mov	r1, r0
   12600:	ldr	r0, [pc, #104]	; 12670 <error@@Base+0x838>
   12604:	bl	10b3c <fputs@plt>
   12608:	mov	r1, r4
   1260c:	ldr	r0, [pc, #96]	; 12674 <error@@Base+0x83c>
   12610:	bl	10b3c <fputs@plt>
   12614:	mov	r0, r4
   12618:	blx	r5
   1261c:	mov	r1, r4
   12620:	ldr	r0, [pc, #76]	; 12674 <error@@Base+0x83c>
   12624:	bl	10b3c <fputs@plt>
   12628:	ldr	r5, [r6]
   1262c:	cmp	r5, #0
   12630:	bne	12644 <error@@Base+0x80c>
   12634:	mov	r0, r4
   12638:	bl	11d20 <__assert_fail@plt+0x11b4>
   1263c:	add	sp, sp, #16
   12640:	pop	{r4, r5, r6, pc}
   12644:	ldrb	r0, [r5, #8]
   12648:	mov	r3, #0
   1264c:	add	r2, sp, #4
   12650:	ldr	r1, [r5, #12]
   12654:	bl	124e0 <error@@Base+0x6a8>
   12658:	mov	r1, r4
   1265c:	add	r0, sp, #4
   12660:	bl	10b3c <fputs@plt>
   12664:	ldr	r5, [r5, #4]
   12668:	b	1262c <error@@Base+0x7f4>
   1266c:	strdeq	r2, [r1], -lr
   12670:	andeq	r5, r1, pc, lsr #31
   12674:	andeq	r5, r1, r7, ror #31
   12678:	push	{r0, r1, r4, r5, r6, lr}
   1267c:	mov	r3, #0
   12680:	mov	r5, r0
   12684:	mov	r4, r1
   12688:	str	r3, [sp, #4]
   1268c:	ldrb	r3, [r4]
   12690:	cmp	r3, #0
   12694:	bne	126a4 <error@@Base+0x86c>
   12698:	mov	r0, #1
   1269c:	add	sp, sp, #8
   126a0:	pop	{r4, r5, r6, pc}
   126a4:	add	r2, sp, #4
   126a8:	mvn	r1, #0
   126ac:	mov	r0, r4
   126b0:	bl	10a70 <utf8proc_iterate@plt>
   126b4:	subs	r6, r0, #0
   126b8:	ble	126d4 <error@@Base+0x89c>
   126bc:	mov	r1, #0
   126c0:	mov	r0, r5
   126c4:	ldr	r2, [sp, #4]
   126c8:	add	r4, r4, r6
   126cc:	bl	12158 <error@@Base+0x320>
   126d0:	b	1268c <error@@Base+0x854>
   126d4:	mov	r0, #0
   126d8:	b	1269c <error@@Base+0x864>
   126dc:	cmp	r1, #0
   126e0:	push	{r4, lr}
   126e4:	mov	r4, r0
   126e8:	stm	r2, {r1, r3}
   126ec:	strne	r2, [r1, #4]
   126f0:	streq	r2, [r0]
   126f4:	cmp	r3, #0
   126f8:	streq	r2, [r0, #4]
   126fc:	ldr	r0, [r0, #8]
   12700:	strne	r2, [r3]
   12704:	cmp	r0, #0
   12708:	beq	12718 <error@@Base+0x8e0>
   1270c:	bl	109f8 <free@plt>
   12710:	mov	r3, #0
   12714:	str	r3, [r4, #8]
   12718:	ldr	r3, [r4, #12]
   1271c:	add	r3, r3, #1
   12720:	str	r3, [r4, #12]
   12724:	pop	{r4, pc}
   12728:	mov	r3, #0
   1272c:	str	r3, [r0]
   12730:	str	r3, [r0, #4]
   12734:	str	r3, [r0, #8]
   12738:	str	r3, [r0, #12]
   1273c:	bx	lr
   12740:	mov	r2, r1
   12744:	mov	r1, #0
   12748:	ldr	r3, [r0]
   1274c:	b	126dc <error@@Base+0x8a4>
   12750:	mov	r2, r1
   12754:	mov	r3, #0
   12758:	ldr	r1, [r0, #4]
   1275c:	b	126dc <error@@Base+0x8a4>
   12760:	mov	r3, r2
   12764:	mov	r2, r1
   12768:	ldr	r1, [r3]
   1276c:	b	126dc <error@@Base+0x8a4>
   12770:	ldr	r3, [r1, #4]
   12774:	b	126dc <error@@Base+0x8a4>
   12778:	ldr	r3, [r1]
   1277c:	push	{r4, r5, r6, lr}
   12780:	mov	r4, r0
   12784:	mov	r5, #0
   12788:	ldr	r2, [r1, #4]
   1278c:	cmp	r3, #0
   12790:	strne	r2, [r3, #4]
   12794:	streq	r2, [r0]
   12798:	ldr	r2, [r1, #4]
   1279c:	cmp	r2, #0
   127a0:	streq	r3, [r0, #4]
   127a4:	ldr	r0, [r0, #8]
   127a8:	strne	r3, [r2]
   127ac:	str	r5, [r1]
   127b0:	str	r5, [r1, #4]
   127b4:	cmp	r0, r5
   127b8:	beq	127c4 <error@@Base+0x98c>
   127bc:	bl	109f8 <free@plt>
   127c0:	str	r5, [r4, #8]
   127c4:	ldr	r3, [r4, #12]
   127c8:	sub	r3, r3, #1
   127cc:	str	r3, [r4, #12]
   127d0:	pop	{r4, r5, r6, pc}
   127d4:	ldr	r3, [r0, #8]
   127d8:	cmp	r3, #0
   127dc:	bxne	lr
   127e0:	ldr	r3, [r0, #12]
   127e4:	cmp	r3, #0
   127e8:	bxeq	lr
   127ec:	push	{r4, lr}
   127f0:	mov	r1, #4
   127f4:	mov	r4, r0
   127f8:	mov	r0, r3
   127fc:	bl	11e74 <error@@Base+0x3c>
   12800:	ldr	r3, [r4]
   12804:	str	r0, [r4, #8]
   12808:	sub	r0, r0, #4
   1280c:	cmp	r3, #0
   12810:	popeq	{r4, pc}
   12814:	str	r3, [r0, #4]!
   12818:	ldr	r3, [r3, #4]
   1281c:	b	1280c <error@@Base+0x9d4>
   12820:	push	{r4, r5, r6, lr}
   12824:	mov	r5, r0
   12828:	mov	r6, r1
   1282c:	ldr	r4, [r5]
   12830:	cmp	r4, #0
   12834:	popeq	{r4, r5, r6, pc}
   12838:	mov	r0, r5
   1283c:	mov	r1, r4
   12840:	bl	12778 <error@@Base+0x940>
   12844:	mov	r0, r4
   12848:	blx	r6
   1284c:	b	1282c <error@@Base+0x9f4>
   12850:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12854:	mov	r8, r0
   12858:	mov	r9, r1
   1285c:	ldr	sl, [pc, #248]	; 1295c <error@@Base+0xb24>
   12860:	mov	r7, sl
   12864:	ldr	r3, [sl]
   12868:	mov	r4, r9
   1286c:	mov	r5, r8
   12870:	ldr	fp, [r3, r8, lsl #2]
   12874:	cmp	r5, r4
   12878:	blt	128b8 <error@@Base+0xa80>
   1287c:	ldr	r3, [r7]
   12880:	sub	r1, r4, #1
   12884:	cmp	r8, r1
   12888:	str	fp, [r3, r4, lsl #2]
   1288c:	bge	12898 <error@@Base+0xa60>
   12890:	mov	r0, r8
   12894:	bl	12850 <error@@Base+0xa18>
   12898:	add	r8, r5, #1
   1289c:	cmp	r8, r9
   128a0:	blt	12864 <error@@Base+0xa2c>
   128a4:	add	sp, sp, #12
   128a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128ac:	sub	r4, r4, #1
   128b0:	cmp	r5, r4
   128b4:	beq	12954 <error@@Base+0xb1c>
   128b8:	ldrd	r2, [r7]
   128bc:	mov	r0, fp
   128c0:	ldr	r1, [r2, r4, lsl #2]
   128c4:	blx	r3
   128c8:	cmp	r0, #0
   128cc:	blt	128ac <error@@Base+0xa74>
   128d0:	cmp	r5, r4
   128d4:	beq	12954 <error@@Base+0xb1c>
   128d8:	ldr	r2, [r7]
   128dc:	lsl	r3, r4, #2
   128e0:	add	r6, r5, #1
   128e4:	ldr	r1, [r2, r4, lsl #2]
   128e8:	str	r1, [r2, r5, lsl #2]
   128ec:	cmp	r6, r4
   128f0:	lsl	r2, r6, #2
   128f4:	ldr	r1, [r7]
   128f8:	bge	12948 <error@@Base+0xb10>
   128fc:	mov	r0, fp
   12900:	ldr	r1, [r1, r6, lsl #2]
   12904:	str	r3, [sp]
   12908:	ldr	r5, [r7, #4]
   1290c:	str	r2, [sp, #4]
   12910:	blx	r5
   12914:	cmp	r0, #0
   12918:	ldr	r3, [sp]
   1291c:	ldr	r2, [sp, #4]
   12920:	bgt	12940 <error@@Base+0xb08>
   12924:	ldr	r1, [r7]
   12928:	sub	r5, r4, #1
   1292c:	ldr	r2, [r1, r2]
   12930:	str	r2, [r1, r3]
   12934:	mov	r4, r5
   12938:	mov	r5, r6
   1293c:	b	12874 <error@@Base+0xa3c>
   12940:	add	r6, r6, #1
   12944:	b	128ec <error@@Base+0xab4>
   12948:	moveq	r5, r6
   1294c:	bne	12924 <error@@Base+0xaec>
   12950:	b	12934 <error@@Base+0xafc>
   12954:	mov	r6, r5
   12958:	b	12934 <error@@Base+0xafc>
   1295c:	andeq	r7, r2, r0, asr #2
   12960:	cmp	r0, #1
   12964:	bxle	lr
   12968:	ldr	r3, [pc, #12]	; 1297c <error@@Base+0xb44>
   1296c:	stm	r3, {r1, r2}
   12970:	sub	r1, r0, #1
   12974:	mov	r0, #0
   12978:	b	12850 <error@@Base+0xa18>
   1297c:	andeq	r7, r2, r0, asr #2
   12980:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12984:	mov	r7, r0
   12988:	ldr	r6, [pc, #72]	; 129d8 <error@@Base+0xba0>
   1298c:	ldr	r5, [pc, #72]	; 129dc <error@@Base+0xba4>
   12990:	add	r6, pc, r6
   12994:	add	r5, pc, r5
   12998:	sub	r6, r6, r5
   1299c:	mov	r8, r1
   129a0:	mov	r9, r2
   129a4:	bl	109a8 <calloc@plt-0x20>
   129a8:	asrs	r6, r6, #2
   129ac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   129b0:	mov	r4, #0
   129b4:	add	r4, r4, #1
   129b8:	ldr	r3, [r5], #4
   129bc:	mov	r2, r9
   129c0:	mov	r1, r8
   129c4:	mov	r0, r7
   129c8:	blx	r3
   129cc:	cmp	r6, r4
   129d0:	bne	129b4 <error@@Base+0xb7c>
   129d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   129d8:	andeq	r4, r1, ip, ror #8
   129dc:	andeq	r4, r1, r4, ror #8
   129e0:	bx	lr
   129e4:	mov	r2, r1
   129e8:	mov	r1, r0
   129ec:	mov	r0, #3
   129f0:	b	10a58 <__xstat@plt>

Disassembly of section .fini:

000129f4 <.fini>:
   129f4:	push	{r3, lr}
   129f8:	pop	{r3, pc}
