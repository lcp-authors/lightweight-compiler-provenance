
../repos/coreutils/src/join:     file format elf32-littlearm


Disassembly of section .init:

0001106c <.init>:
   1106c:	push	{r3, lr}
   11070:	bl	11398 <__assert_fail@plt+0x48>
   11074:	pop	{r3, pc}

Disassembly of section .plt:

00011078 <fdopen@plt-0x14>:
   11078:	push	{lr}		; (str lr, [sp, #-4]!)
   1107c:	ldr	lr, [pc, #4]	; 11088 <fdopen@plt-0x4>
   11080:	add	lr, pc, lr
   11084:	ldr	pc, [lr, #8]!
   11088:	andeq	r7, r1, r8, ror pc

0001108c <fdopen@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #94208	; 0x17000
   11094:	ldr	pc, [ip, #3960]!	; 0xf78

00011098 <calloc@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #94208	; 0x17000
   110a0:	ldr	pc, [ip, #3952]!	; 0xf70

000110a4 <fputs_unlocked@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #94208	; 0x17000
   110ac:	ldr	pc, [ip, #3944]!	; 0xf68

000110b0 <raise@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #94208	; 0x17000
   110b8:	ldr	pc, [ip, #3936]!	; 0xf60

000110bc <strcmp@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #94208	; 0x17000
   110c4:	ldr	pc, [ip, #3928]!	; 0xf58

000110c8 <posix_fadvise64@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #94208	; 0x17000
   110d0:	ldr	pc, [ip, #3920]!	; 0xf50

000110d4 <fflush@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #94208	; 0x17000
   110dc:	ldr	pc, [ip, #3912]!	; 0xf48

000110e0 <free@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #94208	; 0x17000
   110e8:	ldr	pc, [ip, #3904]!	; 0xf40

000110ec <_exit@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #94208	; 0x17000
   110f4:	ldr	pc, [ip, #3896]!	; 0xf38

000110f8 <memcpy@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #94208	; 0x17000
   11100:	ldr	pc, [ip, #3888]!	; 0xf30

00011104 <mbsinit@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #94208	; 0x17000
   1110c:	ldr	pc, [ip, #3880]!	; 0xf28

00011110 <fwrite_unlocked@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #94208	; 0x17000
   11118:	ldr	pc, [ip, #3872]!	; 0xf20

0001111c <memcmp@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #94208	; 0x17000
   11124:	ldr	pc, [ip, #3864]!	; 0xf18

00011128 <getc_unlocked@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #94208	; 0x17000
   11130:	ldr	pc, [ip, #3856]!	; 0xf10

00011134 <dcgettext@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #94208	; 0x17000
   1113c:	ldr	pc, [ip, #3848]!	; 0xf08

00011140 <realloc@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #94208	; 0x17000
   11148:	ldr	pc, [ip, #3840]!	; 0xf00

0001114c <textdomain@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #94208	; 0x17000
   11154:	ldr	pc, [ip, #3832]!	; 0xef8

00011158 <iswprint@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #94208	; 0x17000
   11160:	ldr	pc, [ip, #3824]!	; 0xef0

00011164 <lseek64@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #94208	; 0x17000
   1116c:	ldr	pc, [ip, #3816]!	; 0xee8

00011170 <__ctype_get_mb_cur_max@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #94208	; 0x17000
   11178:	ldr	pc, [ip, #3808]!	; 0xee0

0001117c <__fpending@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #94208	; 0x17000
   11184:	ldr	pc, [ip, #3800]!	; 0xed8

00011188 <ferror_unlocked@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #94208	; 0x17000
   11190:	ldr	pc, [ip, #3792]!	; 0xed0

00011194 <mbrtowc@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #94208	; 0x17000
   1119c:	ldr	pc, [ip, #3784]!	; 0xec8

000111a0 <error@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #94208	; 0x17000
   111a8:	ldr	pc, [ip, #3776]!	; 0xec0

000111ac <strcoll@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #94208	; 0x17000
   111b4:	ldr	pc, [ip, #3768]!	; 0xeb8

000111b8 <malloc@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #94208	; 0x17000
   111c0:	ldr	pc, [ip, #3760]!	; 0xeb0

000111c4 <__libc_start_main@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #94208	; 0x17000
   111cc:	ldr	pc, [ip, #3752]!	; 0xea8

000111d0 <__freading@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #94208	; 0x17000
   111d8:	ldr	pc, [ip, #3744]!	; 0xea0

000111dc <__ctype_toupper_loc@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #94208	; 0x17000
   111e4:	ldr	pc, [ip, #3736]!	; 0xe98

000111e8 <__gmon_start__@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #94208	; 0x17000
   111f0:	ldr	pc, [ip, #3728]!	; 0xe90

000111f4 <getopt_long@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #94208	; 0x17000
   111fc:	ldr	pc, [ip, #3720]!	; 0xe88

00011200 <__ctype_b_loc@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #94208	; 0x17000
   11208:	ldr	pc, [ip, #3712]!	; 0xe80

0001120c <exit@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #94208	; 0x17000
   11214:	ldr	pc, [ip, #3704]!	; 0xe78

00011218 <strtoul@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #94208	; 0x17000
   11220:	ldr	pc, [ip, #3696]!	; 0xe70

00011224 <strlen@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #94208	; 0x17000
   1122c:	ldr	pc, [ip, #3688]!	; 0xe68

00011230 <strchr@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #94208	; 0x17000
   11238:	ldr	pc, [ip, #3680]!	; 0xe60

0001123c <__errno_location@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #94208	; 0x17000
   11244:	ldr	pc, [ip, #3672]!	; 0xe58

00011248 <__cxa_atexit@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #94208	; 0x17000
   11250:	ldr	pc, [ip, #3664]!	; 0xe50

00011254 <memset@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #94208	; 0x17000
   1125c:	ldr	pc, [ip, #3656]!	; 0xe48

00011260 <__printf_chk@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #94208	; 0x17000
   11268:	ldr	pc, [ip, #3648]!	; 0xe40

0001126c <fileno@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #94208	; 0x17000
   11274:	ldr	pc, [ip, #3640]!	; 0xe38

00011278 <strtoumax@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #94208	; 0x17000
   11280:	ldr	pc, [ip, #3632]!	; 0xe30

00011284 <__fprintf_chk@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #94208	; 0x17000
   1128c:	ldr	pc, [ip, #3624]!	; 0xe28

00011290 <memchr@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #94208	; 0x17000
   11298:	ldr	pc, [ip, #3616]!	; 0xe20

0001129c <fclose@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #94208	; 0x17000
   112a4:	ldr	pc, [ip, #3608]!	; 0xe18

000112a8 <fseeko64@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #94208	; 0x17000
   112b0:	ldr	pc, [ip, #3600]!	; 0xe10

000112b4 <fcntl64@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #94208	; 0x17000
   112bc:	ldr	pc, [ip, #3592]!	; 0xe08

000112c0 <setlocale@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #94208	; 0x17000
   112c8:	ldr	pc, [ip, #3584]!	; 0xe00

000112cc <strrchr@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #94208	; 0x17000
   112d4:	ldr	pc, [ip, #3576]!	; 0xdf8

000112d8 <nl_langinfo@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #94208	; 0x17000
   112e0:	ldr	pc, [ip, #3568]!	; 0xdf0

000112e4 <fopen64@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #94208	; 0x17000
   112ec:	ldr	pc, [ip, #3560]!	; 0xde8

000112f0 <strpbrk@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #94208	; 0x17000
   112f8:	ldr	pc, [ip, #3552]!	; 0xde0

000112fc <bindtextdomain@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #94208	; 0x17000
   11304:	ldr	pc, [ip, #3544]!	; 0xdd8

00011308 <fputs@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #94208	; 0x17000
   11310:	ldr	pc, [ip, #3536]!	; 0xdd0

00011314 <strncmp@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #94208	; 0x17000
   1131c:	ldr	pc, [ip, #3528]!	; 0xdc8

00011320 <abort@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #94208	; 0x17000
   11328:	ldr	pc, [ip, #3520]!	; 0xdc0

0001132c <feof_unlocked@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #94208	; 0x17000
   11334:	ldr	pc, [ip, #3512]!	; 0xdb8

00011338 <close@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #94208	; 0x17000
   11340:	ldr	pc, [ip, #3504]!	; 0xdb0

00011344 <putchar_unlocked@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #94208	; 0x17000
   1134c:	ldr	pc, [ip, #3496]!	; 0xda8

00011350 <__assert_fail@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #94208	; 0x17000
   11358:	ldr	pc, [ip, #3488]!	; 0xda0

Disassembly of section .text:

0001135c <.text>:
   1135c:	mov	fp, #0
   11360:	mov	lr, #0
   11364:	pop	{r1}		; (ldr r1, [sp], #4)
   11368:	mov	r2, sp
   1136c:	push	{r2}		; (str r2, [sp, #-4]!)
   11370:	push	{r0}		; (str r0, [sp, #-4]!)
   11374:	ldr	ip, [pc, #16]	; 1138c <__assert_fail@plt+0x3c>
   11378:	push	{ip}		; (str ip, [sp, #-4]!)
   1137c:	ldr	r0, [pc, #12]	; 11390 <__assert_fail@plt+0x40>
   11380:	ldr	r3, [pc, #12]	; 11394 <__assert_fail@plt+0x44>
   11384:	bl	111c4 <__libc_start_main@plt>
   11388:	bl	11320 <abort@plt>
   1138c:	andeq	r7, r1, r0, lsr r0
   11390:	andeq	r1, r1, r8, lsl r7
   11394:	ldrdeq	r6, [r1], -r0
   11398:	ldr	r3, [pc, #20]	; 113b4 <__assert_fail@plt+0x64>
   1139c:	ldr	r2, [pc, #20]	; 113b8 <__assert_fail@plt+0x68>
   113a0:	add	r3, pc, r3
   113a4:	ldr	r2, [r3, r2]
   113a8:	cmp	r2, #0
   113ac:	bxeq	lr
   113b0:	b	111e8 <__gmon_start__@plt>
   113b4:	andeq	r7, r1, r8, asr ip
   113b8:	strdeq	r0, [r0], -ip
   113bc:	ldr	r0, [pc, #24]	; 113dc <__assert_fail@plt+0x8c>
   113c0:	ldr	r3, [pc, #24]	; 113e0 <__assert_fail@plt+0x90>
   113c4:	cmp	r3, r0
   113c8:	bxeq	lr
   113cc:	ldr	r3, [pc, #16]	; 113e4 <__assert_fail@plt+0x94>
   113d0:	cmp	r3, #0
   113d4:	bxeq	lr
   113d8:	bx	r3
   113dc:	andeq	r9, r2, r0, ror #2
   113e0:	andeq	r9, r2, r0, ror #2
   113e4:	andeq	r0, r0, r0
   113e8:	ldr	r0, [pc, #36]	; 11414 <__assert_fail@plt+0xc4>
   113ec:	ldr	r1, [pc, #36]	; 11418 <__assert_fail@plt+0xc8>
   113f0:	sub	r1, r1, r0
   113f4:	asr	r1, r1, #2
   113f8:	add	r1, r1, r1, lsr #31
   113fc:	asrs	r1, r1, #1
   11400:	bxeq	lr
   11404:	ldr	r3, [pc, #16]	; 1141c <__assert_fail@plt+0xcc>
   11408:	cmp	r3, #0
   1140c:	bxeq	lr
   11410:	bx	r3
   11414:	andeq	r9, r2, r0, ror #2
   11418:	andeq	r9, r2, r0, ror #2
   1141c:	andeq	r0, r0, r0
   11420:	push	{r4, lr}
   11424:	ldr	r4, [pc, #24]	; 11444 <__assert_fail@plt+0xf4>
   11428:	ldrb	r3, [r4]
   1142c:	cmp	r3, #0
   11430:	popne	{r4, pc}
   11434:	bl	113bc <__assert_fail@plt+0x6c>
   11438:	mov	r3, #1
   1143c:	strb	r3, [r4]
   11440:	pop	{r4, pc}
   11444:	andeq	r9, r2, r4, lsl #3
   11448:	b	113e8 <__assert_fail@plt+0x98>
   1144c:	push	{fp, lr}
   11450:	mov	fp, sp
   11454:	sub	sp, sp, #56	; 0x38
   11458:	mov	r8, r0
   1145c:	cmp	r0, #0
   11460:	bne	116d8 <__assert_fail@plt+0x388>
   11464:	movw	r1, #28803	; 0x7083
   11468:	mov	r0, #0
   1146c:	mov	r2, #5
   11470:	movt	r1, #1
   11474:	bl	11134 <dcgettext@plt>
   11478:	mov	r1, r0
   1147c:	movw	r0, #37376	; 0x9200
   11480:	movt	r0, #2
   11484:	ldr	r2, [r0]
   11488:	mov	r0, #1
   1148c:	bl	11260 <__printf_chk@plt>
   11490:	movw	r1, #28838	; 0x70a6
   11494:	mov	r0, #0
   11498:	mov	r2, #5
   1149c:	movt	r1, #1
   114a0:	bl	11134 <dcgettext@plt>
   114a4:	movw	r9, #37244	; 0x917c
   114a8:	movt	r9, #2
   114ac:	ldr	r1, [r9]
   114b0:	bl	110a4 <fputs_unlocked@plt>
   114b4:	movw	r1, #28988	; 0x713c
   114b8:	mov	r0, #0
   114bc:	mov	r2, #5
   114c0:	movt	r1, #1
   114c4:	bl	11134 <dcgettext@plt>
   114c8:	ldr	r1, [r9]
   114cc:	bl	110a4 <fputs_unlocked@plt>
   114d0:	movw	r1, #29048	; 0x7178
   114d4:	mov	r0, #0
   114d8:	mov	r2, #5
   114dc:	movt	r1, #1
   114e0:	bl	11134 <dcgettext@plt>
   114e4:	ldr	r1, [r9]
   114e8:	bl	110a4 <fputs_unlocked@plt>
   114ec:	movw	r1, #29271	; 0x7257
   114f0:	mov	r0, #0
   114f4:	mov	r2, #5
   114f8:	movt	r1, #1
   114fc:	bl	11134 <dcgettext@plt>
   11500:	ldr	r1, [r9]
   11504:	bl	110a4 <fputs_unlocked@plt>
   11508:	movw	r1, #29543	; 0x7367
   1150c:	mov	r0, #0
   11510:	mov	r2, #5
   11514:	movt	r1, #1
   11518:	bl	11134 <dcgettext@plt>
   1151c:	ldr	r1, [r9]
   11520:	bl	110a4 <fputs_unlocked@plt>
   11524:	movw	r1, #30074	; 0x757a
   11528:	mov	r0, #0
   1152c:	mov	r2, #5
   11530:	movt	r1, #1
   11534:	bl	11134 <dcgettext@plt>
   11538:	ldr	r1, [r9]
   1153c:	bl	110a4 <fputs_unlocked@plt>
   11540:	movw	r1, #30135	; 0x75b7
   11544:	mov	r0, #0
   11548:	mov	r2, #5
   1154c:	movt	r1, #1
   11550:	bl	11134 <dcgettext@plt>
   11554:	ldr	r1, [r9]
   11558:	bl	110a4 <fputs_unlocked@plt>
   1155c:	movw	r1, #30180	; 0x75e4
   11560:	mov	r0, #0
   11564:	mov	r2, #5
   11568:	movt	r1, #1
   1156c:	bl	11134 <dcgettext@plt>
   11570:	ldr	r1, [r9]
   11574:	bl	110a4 <fputs_unlocked@plt>
   11578:	movw	r1, #30234	; 0x761a
   1157c:	mov	r0, #0
   11580:	mov	r2, #5
   11584:	movt	r1, #1
   11588:	bl	11134 <dcgettext@plt>
   1158c:	ldr	r1, [r9]
   11590:	bl	110a4 <fputs_unlocked@plt>
   11594:	movw	r0, #32016	; 0x7d10
   11598:	mov	r6, sp
   1159c:	movt	r0, #1
   115a0:	mov	r1, r6
   115a4:	ldm	r0!, {r2, r3, r4, r5}
   115a8:	stmia	r1!, {r2, r3, r4, r5}
   115ac:	ldm	r0!, {r2, r3, r4, r5, r7}
   115b0:	stmia	r1!, {r2, r3, r4, r5, r7}
   115b4:	ldm	r0, {r2, r3, r4, r5, r7}
   115b8:	stm	r1, {r2, r3, r4, r5, r7}
   115bc:	movw	r1, #31352	; 0x7a78
   115c0:	movw	r5, #31052	; 0x794c
   115c4:	movt	r1, #1
   115c8:	movt	r5, #1
   115cc:	mov	r0, r5
   115d0:	bl	110bc <strcmp@plt>
   115d4:	cmp	r0, #0
   115d8:	ldrne	r1, [r6, #8]!
   115dc:	cmpne	r1, #0
   115e0:	bne	115cc <__assert_fail@plt+0x27c>
   115e4:	ldr	r6, [r6, #4]
   115e8:	movw	r1, #31447	; 0x7ad7
   115ec:	mov	r0, #0
   115f0:	mov	r2, #5
   115f4:	movt	r1, #1
   115f8:	bl	11134 <dcgettext@plt>
   115fc:	movw	r2, #31219	; 0x79f3
   11600:	movw	r3, #31470	; 0x7aee
   11604:	mov	r1, r0
   11608:	mov	r0, #1
   1160c:	movt	r2, #1
   11610:	movt	r3, #1
   11614:	bl	11260 <__printf_chk@plt>
   11618:	cmp	r6, #0
   1161c:	mov	r0, #5
   11620:	mov	r1, #0
   11624:	moveq	r6, r5
   11628:	bl	112c0 <setlocale@plt>
   1162c:	cmp	r0, #0
   11630:	beq	11668 <__assert_fail@plt+0x318>
   11634:	movw	r1, #31510	; 0x7b16
   11638:	mov	r2, #3
   1163c:	movt	r1, #1
   11640:	bl	11314 <strncmp@plt>
   11644:	cmp	r0, #0
   11648:	beq	11668 <__assert_fail@plt+0x318>
   1164c:	movw	r1, #31514	; 0x7b1a
   11650:	mov	r0, #0
   11654:	mov	r2, #5
   11658:	movt	r1, #1
   1165c:	bl	11134 <dcgettext@plt>
   11660:	ldr	r1, [r9]
   11664:	bl	110a4 <fputs_unlocked@plt>
   11668:	movw	r1, #31585	; 0x7b61
   1166c:	mov	r0, #0
   11670:	mov	r2, #5
   11674:	movt	r1, #1
   11678:	bl	11134 <dcgettext@plt>
   1167c:	movw	r2, #31470	; 0x7aee
   11680:	mov	r1, r0
   11684:	mov	r0, #1
   11688:	mov	r3, r5
   1168c:	movt	r2, #1
   11690:	bl	11260 <__printf_chk@plt>
   11694:	movw	r1, #31612	; 0x7b7c
   11698:	mov	r0, #0
   1169c:	mov	r2, #5
   116a0:	movt	r1, #1
   116a4:	bl	11134 <dcgettext@plt>
   116a8:	movw	r3, #31762	; 0x7c12
   116ac:	mov	r1, r0
   116b0:	movw	r0, #31380	; 0x7a94
   116b4:	cmp	r6, r5
   116b8:	mov	r2, r6
   116bc:	movt	r0, #1
   116c0:	movt	r3, #1
   116c4:	moveq	r3, r0
   116c8:	mov	r0, #1
   116cc:	bl	11260 <__printf_chk@plt>
   116d0:	mov	r0, r8
   116d4:	bl	1120c <exit@plt>
   116d8:	movw	r0, #37232	; 0x9170
   116dc:	movw	r1, #28764	; 0x705c
   116e0:	mov	r2, #5
   116e4:	movt	r0, #2
   116e8:	movt	r1, #1
   116ec:	ldr	r5, [r0]
   116f0:	mov	r0, #0
   116f4:	bl	11134 <dcgettext@plt>
   116f8:	mov	r2, r0
   116fc:	movw	r0, #37376	; 0x9200
   11700:	mov	r1, #1
   11704:	movt	r0, #2
   11708:	ldr	r3, [r0]
   1170c:	mov	r0, r5
   11710:	bl	11284 <__fprintf_chk@plt>
   11714:	b	116d0 <__assert_fail@plt+0x380>
   11718:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1171c:	add	fp, sp, #28
   11720:	sub	sp, sp, #76	; 0x4c
   11724:	mov	r7, #0
   11728:	mov	r6, r0
   1172c:	mov	sl, r1
   11730:	str	r7, [sp, #40]	; 0x28
   11734:	str	r7, [sp, #28]
   11738:	str	r7, [sp, #24]
   1173c:	str	r7, [sp, #20]
   11740:	ldr	r0, [r1]
   11744:	bl	13718 <__assert_fail@plt+0x23c8>
   11748:	movw	r1, #31762	; 0x7c12
   1174c:	mov	r0, #6
   11750:	movt	r1, #1
   11754:	bl	112c0 <setlocale@plt>
   11758:	movw	r5, #31223	; 0x79f7
   1175c:	movw	r1, #31057	; 0x7951
   11760:	movt	r5, #1
   11764:	movt	r1, #1
   11768:	mov	r0, r5
   1176c:	bl	112fc <bindtextdomain@plt>
   11770:	mov	r0, r5
   11774:	bl	1114c <textdomain@plt>
   11778:	mov	r0, #3
   1177c:	bl	13564 <__assert_fail@plt+0x2214>
   11780:	movw	r1, #37256	; 0x9188
   11784:	movt	r1, #2
   11788:	strb	r0, [r1]
   1178c:	movw	r0, #12748	; 0x31cc
   11790:	movt	r0, #1
   11794:	bl	17034 <__assert_fail@plt+0x5ce4>
   11798:	movw	r0, #9576	; 0x2568
   1179c:	movt	r0, #1
   117a0:	bl	17034 <__assert_fail@plt+0x5ce4>
   117a4:	movw	r0, #37257	; 0x9189
   117a8:	mov	r1, #1
   117ac:	movw	r2, #31081	; 0x7969
   117b0:	movw	r3, #31888	; 0x7c90
   117b4:	str	r7, [sp]
   117b8:	movt	r0, #2
   117bc:	movt	r2, #1
   117c0:	movt	r3, #1
   117c4:	strb	r1, [r0]
   117c8:	movw	r0, #37258	; 0x918a
   117cc:	mov	r1, sl
   117d0:	movt	r0, #2
   117d4:	strb	r7, [r0]
   117d8:	movw	r0, #37259	; 0x918b
   117dc:	movt	r0, #2
   117e0:	strh	r7, [r0]
   117e4:	movw	r0, #37264	; 0x9190
   117e8:	movt	r0, #2
   117ec:	str	r7, [r0]
   117f0:	mov	r0, r6
   117f4:	bl	111f4 <getopt_long@plt>
   117f8:	cmn	r0, #1
   117fc:	beq	11ba8 <__assert_fail@plt+0x858>
   11800:	movw	r4, #37248	; 0x9180
   11804:	movw	r9, #37132	; 0x910c
   11808:	movw	r8, #37272	; 0x9198
   1180c:	movw	r5, #31081	; 0x7969
   11810:	movt	r4, #2
   11814:	movt	r9, #2
   11818:	movt	r8, #2
   1181c:	movt	r5, #1
   11820:	b	1186c <__assert_fail@plt+0x51c>
   11824:	ldr	r5, [r4]
   11828:	str	r5, [r8]
   1182c:	mov	r0, #0
   11830:	movw	r5, #31081	; 0x7969
   11834:	movt	r5, #1
   11838:	b	11b80 <__assert_fail@plt+0x830>
   1183c:	subs	r0, r1, #50	; 0x32
   11840:	add	r1, sp, #24
   11844:	clz	r0, r0
   11848:	lsr	r0, r0, #5
   1184c:	orr	r0, r1, r0, lsl #2
   11850:	ldr	r1, [r0]
   11854:	add	r1, r1, #1
   11858:	str	r1, [r0]
   1185c:	mov	r0, #1
   11860:	movweq	r0, #2
   11864:	str	r0, [sp, #44]	; 0x2c
   11868:	b	11b80 <__assert_fail@plt+0x830>
   1186c:	cmp	r0, #110	; 0x6e
   11870:	str	r7, [sp, #44]	; 0x2c
   11874:	bgt	118e0 <__assert_fail@plt+0x590>
   11878:	cmp	r0, #48	; 0x30
   1187c:	ble	11908 <__assert_fail@plt+0x5b8>
   11880:	sub	r1, r0, #97	; 0x61
   11884:	cmp	r1, #9
   11888:	bhi	1199c <__assert_fail@plt+0x64c>
   1188c:	add	r0, pc, #0
   11890:	ldr	pc, [r0, r1, lsl #2]
   11894:	andeq	r1, r1, r0, lsl #20
   11898:	andeq	r2, r1, r0, ror #10
   1189c:	andeq	r2, r1, r0, ror #10
   118a0:	andeq	r2, r1, r0, ror #10
   118a4:			; <UNDEFINED> instruction: 0x000118bc
   118a8:	andeq	r2, r1, r0, ror #10
   118ac:	andeq	r2, r1, r0, ror #10
   118b0:	andeq	r2, r1, r0, ror #10
   118b4:	andeq	r1, r1, r8, lsr #22
   118b8:	andeq	r1, r1, r4, lsr #21
   118bc:	ldr	r0, [r8]
   118c0:	cmp	r0, #0
   118c4:	beq	11824 <__assert_fail@plt+0x4d4>
   118c8:	ldr	r5, [r4]
   118cc:	mov	r1, r5
   118d0:	bl	110bc <strcmp@plt>
   118d4:	cmp	r0, #0
   118d8:	beq	11828 <__assert_fail@plt+0x4d8>
   118dc:	b	12468 <__assert_fail@plt+0x1118>
   118e0:	cmp	r0, #121	; 0x79
   118e4:	ble	1193c <__assert_fail@plt+0x5ec>
   118e8:	cmp	r0, #256	; 0x100
   118ec:	bgt	11984 <__assert_fail@plt+0x634>
   118f0:	cmp	r0, #122	; 0x7a
   118f4:	bne	11a54 <__assert_fail@plt+0x704>
   118f8:	movw	r1, #37278	; 0x919e
   118fc:	mov	r0, #1
   11900:	movt	r1, #2
   11904:	b	11a84 <__assert_fail@plt+0x734>
   11908:	cmp	r0, #1
   1190c:	bne	123a4 <__assert_fail@plt+0x1054>
   11910:	ldr	r0, [r4]
   11914:	add	r1, sp, #40	; 0x28
   11918:	add	r2, sp, #24
   1191c:	add	r3, sp, #20
   11920:	str	r1, [sp]
   11924:	add	r1, sp, #44	; 0x2c
   11928:	str	r1, [sp, #4]
   1192c:	add	r1, sp, #32
   11930:	bl	127c4 <__assert_fail@plt+0x1474>
   11934:	ldr	r0, [sp, #44]	; 0x2c
   11938:	b	11b80 <__assert_fail@plt+0x830>
   1193c:	cmp	r0, #111	; 0x6f
   11940:	beq	119bc <__assert_fail@plt+0x66c>
   11944:	cmp	r0, #116	; 0x74
   11948:	bne	119ec <__assert_fail@plt+0x69c>
   1194c:	ldr	r0, [r4]
   11950:	ldrb	r1, [r0]
   11954:	cmp	r1, #0
   11958:	beq	11b50 <__assert_fail@plt+0x800>
   1195c:	ldrb	r2, [r0, #1]
   11960:	cmp	r2, #0
   11964:	beq	11b54 <__assert_fail@plt+0x804>
   11968:	movw	r1, #31175	; 0x79c7
   1196c:	movt	r1, #1
   11970:	bl	110bc <strcmp@plt>
   11974:	mov	r1, #0
   11978:	cmp	r0, #0
   1197c:	beq	11b54 <__assert_fail@plt+0x804>
   11980:	b	12474 <__assert_fail@plt+0x1124>
   11984:	movw	r1, #257	; 0x101
   11988:	cmp	r0, r1
   1198c:	bne	11a6c <__assert_fail@plt+0x71c>
   11990:	movw	r0, #37264	; 0x9190
   11994:	mov	r1, #2
   11998:	b	11a64 <__assert_fail@plt+0x714>
   1199c:	cmp	r0, #49	; 0x31
   119a0:	bne	11a8c <__assert_fail@plt+0x73c>
   119a4:	ldr	r0, [r4]
   119a8:	bl	12618 <__assert_fail@plt+0x12c8>
   119ac:	mov	r1, r0
   119b0:	movw	r0, #37128	; 0x9108
   119b4:	movt	r0, #2
   119b8:	b	11b20 <__assert_fail@plt+0x7d0>
   119bc:	ldr	r5, [r4]
   119c0:	movw	r1, #31170	; 0x79c2
   119c4:	movt	r1, #1
   119c8:	mov	r0, r5
   119cc:	bl	110bc <strcmp@plt>
   119d0:	cmp	r0, #0
   119d4:	beq	11b3c <__assert_fail@plt+0x7ec>
   119d8:	mov	r0, r5
   119dc:	bl	126cc <__assert_fail@plt+0x137c>
   119e0:	mov	r0, #3
   119e4:	str	r0, [sp, #44]	; 0x2c
   119e8:	b	11830 <__assert_fail@plt+0x4e0>
   119ec:	cmp	r0, #118	; 0x76
   119f0:	bne	12560 <__assert_fail@plt+0x1210>
   119f4:	movw	r0, #37257	; 0x9189
   119f8:	movt	r0, #2
   119fc:	strb	r7, [r0]
   11a00:	ldr	r0, [r4]
   11a04:	movw	r1, #31762	; 0x7c12
   11a08:	mov	r2, #10
   11a0c:	sub	r3, fp, #40	; 0x28
   11a10:	movt	r1, #1
   11a14:	str	r1, [sp]
   11a18:	mov	r1, #0
   11a1c:	bl	15dc4 <__assert_fail@plt+0x4a74>
   11a20:	cmp	r0, #0
   11a24:	bne	12404 <__assert_fail@plt+0x10b4>
   11a28:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11a2c:	sub	r1, r0, #1
   11a30:	cmp	r1, #2
   11a34:	bcs	12404 <__assert_fail@plt+0x10b4>
   11a38:	movw	r1, #37268	; 0x9194
   11a3c:	cmp	r0, #1
   11a40:	movw	r0, #37269	; 0x9195
   11a44:	movt	r0, #2
   11a48:	movt	r1, #2
   11a4c:	moveq	r0, r1
   11a50:	b	11b30 <__assert_fail@plt+0x7e0>
   11a54:	cmp	r0, #256	; 0x100
   11a58:	bne	12560 <__assert_fail@plt+0x1210>
   11a5c:	movw	r0, #37264	; 0x9190
   11a60:	mov	r1, #1
   11a64:	movt	r0, #2
   11a68:	b	11b78 <__assert_fail@plt+0x828>
   11a6c:	movw	r1, #258	; 0x102
   11a70:	cmp	r0, r1
   11a74:	bne	12560 <__assert_fail@plt+0x1210>
   11a78:	movw	r1, #37288	; 0x91a8
   11a7c:	mov	r0, #1
   11a80:	movt	r1, #2
   11a84:	strb	r0, [r1]
   11a88:	b	11b7c <__assert_fail@plt+0x82c>
   11a8c:	cmp	r0, #50	; 0x32
   11a90:	bne	12560 <__assert_fail@plt+0x1210>
   11a94:	ldr	r0, [r4]
   11a98:	bl	12618 <__assert_fail@plt+0x12c8>
   11a9c:	mov	r1, r0
   11aa0:	b	11b1c <__assert_fail@plt+0x7cc>
   11aa4:	ldr	r0, [r4]
   11aa8:	ldrb	r1, [r0]
   11aac:	sub	r2, r1, #49	; 0x31
   11ab0:	uxtb	r2, r2
   11ab4:	cmp	r2, #1
   11ab8:	bhi	11ae8 <__assert_fail@plt+0x798>
   11abc:	ldrb	r2, [r0, #1]
   11ac0:	cmp	r2, #0
   11ac4:	bne	11ae8 <__assert_fail@plt+0x798>
   11ac8:	movw	r2, #37224	; 0x9168
   11acc:	movt	r2, #2
   11ad0:	ldr	r2, [r2]
   11ad4:	add	r2, sl, r2, lsl #2
   11ad8:	ldr	r2, [r2, #-4]
   11adc:	add	r2, r2, #2
   11ae0:	cmp	r0, r2
   11ae4:	beq	1183c <__assert_fail@plt+0x4ec>
   11ae8:	bl	12618 <__assert_fail@plt+0x12c8>
   11aec:	mov	r5, r8
   11af0:	mov	r8, r9
   11af4:	movw	r9, #37128	; 0x9108
   11af8:	mov	r1, r0
   11afc:	movt	r9, #2
   11b00:	mov	r0, r9
   11b04:	bl	125bc <__assert_fail@plt+0x126c>
   11b08:	ldr	r1, [r9]
   11b0c:	mov	r9, r8
   11b10:	mov	r8, r5
   11b14:	movw	r5, #31081	; 0x7969
   11b18:	movt	r5, #1
   11b1c:	mov	r0, r9
   11b20:	bl	125bc <__assert_fail@plt+0x126c>
   11b24:	b	11b7c <__assert_fail@plt+0x82c>
   11b28:	movw	r0, #37276	; 0x919c
   11b2c:	movt	r0, #2
   11b30:	mov	r1, #1
   11b34:	strb	r1, [r0]
   11b38:	b	11b7c <__assert_fail@plt+0x82c>
   11b3c:	movw	r0, #37277	; 0x919d
   11b40:	mov	r1, #1
   11b44:	movt	r0, #2
   11b48:	strb	r1, [r0]
   11b4c:	b	1182c <__assert_fail@plt+0x4dc>
   11b50:	mov	r1, #10
   11b54:	movw	r0, #37136	; 0x9110
   11b58:	movt	r0, #2
   11b5c:	ldr	r0, [r0]
   11b60:	cmp	r0, #0
   11b64:	blt	11b70 <__assert_fail@plt+0x820>
   11b68:	cmp	r0, r1
   11b6c:	bne	12480 <__assert_fail@plt+0x1130>
   11b70:	movw	r0, #37136	; 0x9110
   11b74:	movt	r0, #2
   11b78:	str	r1, [r0]
   11b7c:	mov	r0, #0
   11b80:	movw	r3, #31888	; 0x7c90
   11b84:	str	r0, [sp, #40]	; 0x28
   11b88:	mov	r0, r6
   11b8c:	mov	r1, sl
   11b90:	mov	r2, r5
   11b94:	str	r7, [sp]
   11b98:	movt	r3, #1
   11b9c:	bl	111f4 <getopt_long@plt>
   11ba0:	cmn	r0, #1
   11ba4:	bne	1186c <__assert_fail@plt+0x51c>
   11ba8:	movw	r4, #37224	; 0x9168
   11bac:	str	r7, [sp, #40]	; 0x28
   11bb0:	movt	r4, #2
   11bb4:	ldr	r0, [r4]
   11bb8:	cmp	r0, r6
   11bbc:	bge	11c04 <__assert_fail@plt+0x8b4>
   11bc0:	add	r9, sp, #40	; 0x28
   11bc4:	add	r8, sp, #32
   11bc8:	add	r7, sp, #24
   11bcc:	add	r5, sp, #20
   11bd0:	add	r1, r0, #1
   11bd4:	mov	r2, r7
   11bd8:	mov	r3, r5
   11bdc:	str	r1, [r4]
   11be0:	add	r1, sp, #44	; 0x2c
   11be4:	ldr	r0, [sl, r0, lsl #2]
   11be8:	str	r1, [sp, #4]
   11bec:	mov	r1, r8
   11bf0:	str	r9, [sp]
   11bf4:	bl	127c4 <__assert_fail@plt+0x1474>
   11bf8:	ldr	r0, [r4]
   11bfc:	cmp	r0, r6
   11c00:	blt	11bd0 <__assert_fail@plt+0x880>
   11c04:	ldr	r0, [sp, #20]
   11c08:	cmp	r0, #2
   11c0c:	bne	12438 <__assert_fail@plt+0x10e8>
   11c10:	movw	r6, #37128	; 0x9108
   11c14:	movw	r8, #37258	; 0x918a
   11c18:	mov	r4, #0
   11c1c:	add	r5, sp, #24
   11c20:	movt	r6, #2
   11c24:	movt	r8, #2
   11c28:	ldr	r0, [r5, r4, lsl #2]
   11c2c:	cmp	r0, #0
   11c30:	beq	11c50 <__assert_fail@plt+0x900>
   11c34:	mov	r0, r6
   11c38:	mov	r1, r4
   11c3c:	bl	125bc <__assert_fail@plt+0x126c>
   11c40:	movw	r0, #37132	; 0x910c
   11c44:	mov	r1, r4
   11c48:	movt	r0, #2
   11c4c:	bl	125bc <__assert_fail@plt+0x126c>
   11c50:	add	r4, r4, #1
   11c54:	cmp	r4, #2
   11c58:	bne	11c28 <__assert_fail@plt+0x8d8>
   11c5c:	ldr	r0, [r6]
   11c60:	cmn	r0, #1
   11c64:	moveq	r0, #0
   11c68:	streq	r0, [r6]
   11c6c:	movw	r0, #37132	; 0x910c
   11c70:	movt	r0, #2
   11c74:	ldr	r0, [r0]
   11c78:	cmn	r0, #1
   11c7c:	bne	11c90 <__assert_fail@plt+0x940>
   11c80:	movw	r1, #37132	; 0x910c
   11c84:	mov	r0, #0
   11c88:	movt	r1, #2
   11c8c:	str	r0, [r1]
   11c90:	movw	r5, #37280	; 0x91a0
   11c94:	movw	r1, #32180	; 0x7db4
   11c98:	movt	r5, #2
   11c9c:	movt	r1, #1
   11ca0:	ldr	r4, [r5]
   11ca4:	mov	r0, r4
   11ca8:	bl	110bc <strcmp@plt>
   11cac:	cmp	r0, #0
   11cb0:	beq	11ccc <__assert_fail@plt+0x97c>
   11cb4:	movw	r1, #31710	; 0x7bde
   11cb8:	mov	r0, r4
   11cbc:	movt	r1, #1
   11cc0:	bl	133ec <__assert_fail@plt+0x209c>
   11cc4:	mov	r9, r0
   11cc8:	b	11cd8 <__assert_fail@plt+0x988>
   11ccc:	movw	r0, #37240	; 0x9178
   11cd0:	movt	r0, #2
   11cd4:	ldr	r9, [r0]
   11cd8:	cmp	r9, #0
   11cdc:	beq	1248c <__assert_fail@plt+0x113c>
   11ce0:	ldr	r4, [r5, #4]
   11ce4:	movw	r1, #32180	; 0x7db4
   11ce8:	movt	r1, #1
   11cec:	mov	r0, r4
   11cf0:	bl	110bc <strcmp@plt>
   11cf4:	cmp	r0, #0
   11cf8:	beq	11d14 <__assert_fail@plt+0x9c4>
   11cfc:	movw	r1, #31710	; 0x7bde
   11d00:	mov	r0, r4
   11d04:	movt	r1, #1
   11d08:	bl	133ec <__assert_fail@plt+0x209c>
   11d0c:	mov	sl, r0
   11d10:	b	11d20 <__assert_fail@plt+0x9d0>
   11d14:	movw	r0, #37240	; 0x9178
   11d18:	movt	r0, #2
   11d1c:	ldr	sl, [r0]
   11d20:	cmp	sl, #0
   11d24:	beq	1249c <__assert_fail@plt+0x114c>
   11d28:	cmp	r9, sl
   11d2c:	beq	124ac <__assert_fail@plt+0x115c>
   11d30:	mov	r0, r9
   11d34:	mov	r1, #2
   11d38:	bl	132b8 <__assert_fail@plt+0x1f68>
   11d3c:	mov	r0, sl
   11d40:	mov	r1, #2
   11d44:	bl	132b8 <__assert_fail@plt+0x1f68>
   11d48:	mov	r4, #0
   11d4c:	sub	r1, fp, #40	; 0x28
   11d50:	mov	r0, r9
   11d54:	mov	r2, #1
   11d58:	str	r4, [fp, #-36]	; 0xffffffdc
   11d5c:	str	r4, [fp, #-40]	; 0xffffffd8
   11d60:	str	r4, [fp, #-32]	; 0xffffffe0
   11d64:	bl	12930 <__assert_fail@plt+0x15e0>
   11d68:	add	r1, sp, #52	; 0x34
   11d6c:	mov	r0, sl
   11d70:	mov	r2, #2
   11d74:	str	r4, [sp, #52]	; 0x34
   11d78:	str	r4, [sp, #56]	; 0x38
   11d7c:	str	r4, [sp, #60]	; 0x3c
   11d80:	bl	12930 <__assert_fail@plt+0x15e0>
   11d84:	movw	r0, #37277	; 0x919d
   11d88:	movw	r5, #37128	; 0x9108
   11d8c:	movt	r0, #2
   11d90:	movt	r5, #2
   11d94:	ldrb	r0, [r0]
   11d98:	cmp	r0, #1
   11d9c:	bne	11dec <__assert_fail@plt+0xa9c>
   11da0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11da4:	cmp	r0, #0
   11da8:	ldrne	r0, [fp, #-32]	; 0xffffffe0
   11dac:	ldrne	r0, [r0]
   11db0:	ldrne	r4, [r0, #12]
   11db4:	movw	r0, #37312	; 0x91c0
   11db8:	movt	r0, #2
   11dbc:	str	r4, [r0]
   11dc0:	ldr	r0, [sp, #52]	; 0x34
   11dc4:	cmp	r0, #0
   11dc8:	beq	11ddc <__assert_fail@plt+0xa8c>
   11dcc:	ldr	r0, [sp, #60]	; 0x3c
   11dd0:	ldr	r0, [r0]
   11dd4:	ldr	r0, [r0, #12]
   11dd8:	b	11de0 <__assert_fail@plt+0xa90>
   11ddc:	mov	r0, #0
   11de0:	movw	r1, #37316	; 0x91c4
   11de4:	movt	r1, #2
   11de8:	str	r0, [r1]
   11dec:	movw	r0, #37288	; 0x91a8
   11df0:	movt	r0, #2
   11df4:	ldrb	r0, [r0]
   11df8:	cmp	r0, #1
   11dfc:	bne	11ea4 <__assert_fail@plt+0xb54>
   11e00:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11e04:	cmp	r0, #0
   11e08:	beq	11e2c <__assert_fail@plt+0xadc>
   11e0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11e10:	ldr	r1, [sp, #52]	; 0x34
   11e14:	ldr	r0, [r0]
   11e18:	cmp	r1, #0
   11e1c:	bne	11e40 <__assert_fail@plt+0xaf0>
   11e20:	movw	r1, #37320	; 0x91c8
   11e24:	movt	r1, #2
   11e28:	b	11e48 <__assert_fail@plt+0xaf8>
   11e2c:	ldr	r0, [sp, #52]	; 0x34
   11e30:	cmp	r0, #0
   11e34:	beq	11ea4 <__assert_fail@plt+0xb54>
   11e38:	movw	r0, #37320	; 0x91c8
   11e3c:	movt	r0, #2
   11e40:	ldr	r1, [sp, #60]	; 0x3c
   11e44:	ldr	r1, [r1]
   11e48:	bl	129cc <__assert_fail@plt+0x167c>
   11e4c:	movw	r1, #37344	; 0x91e0
   11e50:	mov	r0, #0
   11e54:	movt	r1, #2
   11e58:	str	r0, [r1]
   11e5c:	str	r0, [r1, #4]
   11e60:	ldr	r1, [fp, #-40]	; 0xffffffd8
   11e64:	cmp	r1, #0
   11e68:	beq	11e80 <__assert_fail@plt+0xb30>
   11e6c:	str	r0, [fp, #-40]	; 0xffffffd8
   11e70:	sub	r1, fp, #40	; 0x28
   11e74:	mov	r0, r9
   11e78:	mov	r2, #1
   11e7c:	bl	12930 <__assert_fail@plt+0x15e0>
   11e80:	ldr	r0, [sp, #52]	; 0x34
   11e84:	cmp	r0, #0
   11e88:	beq	11ea4 <__assert_fail@plt+0xb54>
   11e8c:	mov	r0, #0
   11e90:	add	r1, sp, #52	; 0x34
   11e94:	mov	r2, #2
   11e98:	str	r0, [sp, #52]	; 0x34
   11e9c:	mov	r0, sl
   11ea0:	bl	12930 <__assert_fail@plt+0x15e0>
   11ea4:	ldr	r1, [fp, #-40]	; 0xffffffd8
   11ea8:	ldr	r0, [sp, #52]	; 0x34
   11eac:	str	sl, [sp, #16]
   11eb0:	cmp	r1, #0
   11eb4:	cmpne	r0, #0
   11eb8:	beq	1216c <__assert_fail@plt+0xe1c>
   11ebc:	sub	r7, fp, #40	; 0x28
   11ec0:	movw	r0, #37132	; 0x910c
   11ec4:	ldr	r2, [r5]
   11ec8:	movt	r0, #2
   11ecc:	ldr	r3, [r0]
   11ed0:	ldr	r0, [sp, #60]	; 0x3c
   11ed4:	ldr	r1, [r0]
   11ed8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11edc:	ldr	r0, [r0]
   11ee0:	bl	12b34 <__assert_fail@plt+0x17e4>
   11ee4:	cmn	r0, #1
   11ee8:	ble	11f88 <__assert_fail@plt+0xc38>
   11eec:	cmp	r0, #0
   11ef0:	beq	11f34 <__assert_fail@plt+0xbe4>
   11ef4:	movw	r0, #37269	; 0x9195
   11ef8:	movt	r0, #2
   11efc:	ldrb	r0, [r0]
   11f00:	cmp	r0, #1
   11f04:	bne	11f1c <__assert_fail@plt+0xbcc>
   11f08:	ldr	r0, [sp, #60]	; 0x3c
   11f0c:	ldr	r1, [r0]
   11f10:	movw	r0, #37320	; 0x91c8
   11f14:	movt	r0, #2
   11f18:	bl	129cc <__assert_fail@plt+0x167c>
   11f1c:	mov	r0, #0
   11f20:	add	r1, sp, #52	; 0x34
   11f24:	mov	r2, #2
   11f28:	str	r0, [sp, #52]	; 0x34
   11f2c:	mov	r0, sl
   11f30:	b	11fc4 <__assert_fail@plt+0xc74>
   11f34:	mov	r0, r9
   11f38:	mov	r1, r7
   11f3c:	mov	r2, #1
   11f40:	bl	12930 <__assert_fail@plt+0x15e0>
   11f44:	cmp	r0, #0
   11f48:	beq	11fd4 <__assert_fail@plt+0xc84>
   11f4c:	movw	r0, #37132	; 0x910c
   11f50:	ldr	r4, [fp, #-32]	; 0xffffffe0
   11f54:	ldr	r2, [r5]
   11f58:	movt	r0, #2
   11f5c:	ldr	r3, [r0]
   11f60:	ldr	r0, [sp, #60]	; 0x3c
   11f64:	ldr	r1, [r0]
   11f68:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11f6c:	add	r0, r4, r0, lsl #2
   11f70:	ldr	r0, [r0, #-4]
   11f74:	bl	12b34 <__assert_fail@plt+0x17e4>
   11f78:	cmp	r0, #0
   11f7c:	beq	11f34 <__assert_fail@plt+0xbe4>
   11f80:	mov	r0, #0
   11f84:	b	11fe4 <__assert_fail@plt+0xc94>
   11f88:	movw	r0, #37268	; 0x9194
   11f8c:	movt	r0, #2
   11f90:	ldrb	r0, [r0]
   11f94:	cmp	r0, #1
   11f98:	bne	11fb0 <__assert_fail@plt+0xc60>
   11f9c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11fa0:	movw	r1, #37320	; 0x91c8
   11fa4:	movt	r1, #2
   11fa8:	ldr	r0, [r0]
   11fac:	bl	129cc <__assert_fail@plt+0x167c>
   11fb0:	mov	r0, #0
   11fb4:	mov	r1, r7
   11fb8:	mov	r2, #1
   11fbc:	str	r0, [fp, #-40]	; 0xffffffd8
   11fc0:	mov	r0, r9
   11fc4:	bl	12930 <__assert_fail@plt+0x15e0>
   11fc8:	mov	r0, #1
   11fcc:	strb	r0, [r8]
   11fd0:	b	12158 <__assert_fail@plt+0xe08>
   11fd4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11fd8:	add	r0, r0, #1
   11fdc:	str	r0, [fp, #-40]	; 0xffffffd8
   11fe0:	mov	r0, #1
   11fe4:	add	r6, sp, #52	; 0x34
   11fe8:	str	r0, [sp, #12]
   11fec:	mov	r0, sl
   11ff0:	mov	r1, r6
   11ff4:	mov	r2, #2
   11ff8:	bl	12930 <__assert_fail@plt+0x15e0>
   11ffc:	cmp	r0, #0
   12000:	beq	12040 <__assert_fail@plt+0xcf0>
   12004:	movw	r0, #37132	; 0x910c
   12008:	ldr	r1, [sp, #52]	; 0x34
   1200c:	ldr	r4, [sp, #60]	; 0x3c
   12010:	ldr	r2, [r5]
   12014:	movt	r0, #2
   12018:	ldr	r3, [r0]
   1201c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12020:	add	r1, r4, r1, lsl #2
   12024:	ldr	r1, [r1, #-4]
   12028:	ldr	r0, [r0]
   1202c:	bl	12b34 <__assert_fail@plt+0x17e4>
   12030:	cmp	r0, #0
   12034:	beq	11fec <__assert_fail@plt+0xc9c>
   12038:	mov	r6, #0
   1203c:	b	12050 <__assert_fail@plt+0xd00>
   12040:	ldr	r0, [sp, #52]	; 0x34
   12044:	mov	r6, #1
   12048:	add	r0, r0, #1
   1204c:	str	r0, [sp, #52]	; 0x34
   12050:	movw	r0, #37257	; 0x9189
   12054:	movt	r0, #2
   12058:	ldrb	r0, [r0]
   1205c:	cmp	r0, #1
   12060:	bne	120dc <__assert_fail@plt+0xd8c>
   12064:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12068:	cmp	r0, #1
   1206c:	beq	120dc <__assert_fail@plt+0xd8c>
   12070:	ldr	r2, [sp, #52]	; 0x34
   12074:	mov	r8, #0
   12078:	mov	r1, #1
   1207c:	cmp	r2, #1
   12080:	beq	120c8 <__assert_fail@plt+0xd78>
   12084:	mov	r5, r9
   12088:	mov	r9, #0
   1208c:	ldr	r0, [sp, #60]	; 0x3c
   12090:	ldr	r1, [r0, r9, lsl #2]
   12094:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12098:	ldr	r0, [r0, r8, lsl #2]
   1209c:	bl	129cc <__assert_fail@plt+0x167c>
   120a0:	ldr	r1, [sp, #52]	; 0x34
   120a4:	add	r9, r9, #1
   120a8:	sub	r0, r1, #1
   120ac:	cmp	r9, r0
   120b0:	bcc	1208c <__assert_fail@plt+0xd3c>
   120b4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   120b8:	ldr	sl, [sp, #16]
   120bc:	mov	r9, r5
   120c0:	movw	r5, #37128	; 0x9108
   120c4:	movt	r5, #2
   120c8:	add	r8, r8, #1
   120cc:	sub	r2, r0, #1
   120d0:	cmp	r8, r2
   120d4:	mov	r2, r1
   120d8:	bcc	12078 <__assert_fail@plt+0xd28>
   120dc:	ldr	r1, [sp, #12]
   120e0:	mov	r0, #0
   120e4:	cmp	r1, #0
   120e8:	mov	r1, #0
   120ec:	bne	12118 <__assert_fail@plt+0xdc8>
   120f0:	ldr	r1, [fp, #-40]	; 0xffffffd8
   120f4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   120f8:	mvn	r3, #3
   120fc:	add	r1, r3, r1, lsl #2
   12100:	ldr	r4, [r2]
   12104:	ldr	r3, [r2, r1]
   12108:	str	r3, [r2]
   1210c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12110:	str	r4, [r2, r1]
   12114:	mov	r1, #1
   12118:	movw	r8, #37258	; 0x918a
   1211c:	cmp	r6, #0
   12120:	str	r1, [fp, #-40]	; 0xffffffd8
   12124:	movt	r8, #2
   12128:	bne	12154 <__assert_fail@plt+0xe04>
   1212c:	ldr	r0, [sp, #52]	; 0x34
   12130:	ldr	r1, [sp, #60]	; 0x3c
   12134:	mvn	r2, #3
   12138:	add	r0, r2, r0, lsl #2
   1213c:	ldr	r3, [r1]
   12140:	ldr	r2, [r1, r0]
   12144:	str	r2, [r1]
   12148:	ldr	r1, [sp, #60]	; 0x3c
   1214c:	str	r3, [r1, r0]
   12150:	mov	r0, #1
   12154:	str	r0, [sp, #52]	; 0x34
   12158:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1215c:	ldr	r0, [sp, #52]	; 0x34
   12160:	cmp	r1, #0
   12164:	cmpne	r0, #0
   12168:	bne	11ec0 <__assert_fail@plt+0xb70>
   1216c:	movw	r2, #37264	; 0x9190
   12170:	movw	r8, #37259	; 0x918b
   12174:	mov	sl, #0
   12178:	movt	r2, #2
   1217c:	movt	r8, #2
   12180:	str	sl, [sp, #48]	; 0x30
   12184:	ldr	r2, [r2]
   12188:	cmp	r2, #2
   1218c:	beq	121ac <__assert_fail@plt+0xe5c>
   12190:	ldrb	r2, [r8]
   12194:	ldrb	r3, [r8, #1]
   12198:	clz	r3, r3
   1219c:	clz	r2, r2
   121a0:	lsr	r3, r3, #5
   121a4:	lsr	r2, r2, #5
   121a8:	orr	sl, r2, r3
   121ac:	cmp	r1, #0
   121b0:	movwne	r7, #37268	; 0x9194
   121b4:	movtne	r7, #2
   121b8:	ldrbne	r1, [r7]
   121bc:	orrsne	r2, sl, r1
   121c0:	bne	12264 <__assert_fail@plt+0xf14>
   121c4:	ldr	r0, [sp, #52]	; 0x34
   121c8:	ldr	r6, [sp, #16]
   121cc:	cmp	r0, #0
   121d0:	movwne	r7, #37269	; 0x9195
   121d4:	movtne	r7, #2
   121d8:	ldrbne	r0, [r7]
   121dc:	orrsne	r1, sl, r0
   121e0:	bne	12304 <__assert_fail@plt+0xfb4>
   121e4:	ldr	r4, [sp, #48]	; 0x30
   121e8:	mov	r0, r4
   121ec:	bl	128f8 <__assert_fail@plt+0x15a8>
   121f0:	mov	r0, r4
   121f4:	bl	13498 <__assert_fail@plt+0x2148>
   121f8:	sub	r0, fp, #40	; 0x28
   121fc:	bl	12ff8 <__assert_fail@plt+0x1ca8>
   12200:	add	r0, sp, #52	; 0x34
   12204:	bl	12ff8 <__assert_fail@plt+0x1ca8>
   12208:	mov	r0, r9
   1220c:	bl	132f4 <__assert_fail@plt+0x1fa4>
   12210:	cmp	r0, #0
   12214:	bne	124d8 <__assert_fail@plt+0x1188>
   12218:	mov	r0, r6
   1221c:	bl	132f4 <__assert_fail@plt+0x1fa4>
   12220:	cmp	r0, #0
   12224:	bne	124f0 <__assert_fail@plt+0x11a0>
   12228:	ldrb	r0, [r8]
   1222c:	ldrb	r1, [r8, #1]
   12230:	orrs	r0, r1, r0
   12234:	moveq	r0, #0
   12238:	subeq	sp, fp, #28
   1223c:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12240:	movw	r1, #31323	; 0x7a5b
   12244:	movt	r1, #1
   12248:	mov	r0, #0
   1224c:	mov	r2, #5
   12250:	bl	11134 <dcgettext@plt>
   12254:	mov	r2, r0
   12258:	mov	r0, #1
   1225c:	mov	r1, #0
   12260:	bl	111a0 <error@plt>
   12264:	cmp	r1, #0
   12268:	beq	12284 <__assert_fail@plt+0xf34>
   1226c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12270:	movw	r1, #37320	; 0x91c8
   12274:	movt	r1, #2
   12278:	ldr	r0, [r0]
   1227c:	bl	129cc <__assert_fail@plt+0x167c>
   12280:	ldr	r0, [sp, #52]	; 0x34
   12284:	cmp	r0, #0
   12288:	mov	r2, #1
   1228c:	movwne	r1, #37258	; 0x918a
   12290:	movne	r0, #1
   12294:	movtne	r1, #2
   12298:	strbne	r0, [r1]
   1229c:	add	r1, sp, #48	; 0x30
   122a0:	mov	r0, r9
   122a4:	bl	12c1c <__assert_fail@plt+0x18cc>
   122a8:	cmp	r0, #0
   122ac:	beq	121c4 <__assert_fail@plt+0xe74>
   122b0:	movw	r5, #37320	; 0x91c8
   122b4:	add	r4, sp, #48	; 0x30
   122b8:	movt	r5, #2
   122bc:	ldrb	r0, [r7]
   122c0:	cmp	r0, #1
   122c4:	bne	122d4 <__assert_fail@plt+0xf84>
   122c8:	ldr	r0, [sp, #48]	; 0x30
   122cc:	mov	r1, r5
   122d0:	bl	129cc <__assert_fail@plt+0x167c>
   122d4:	ldrb	r0, [r8]
   122d8:	cmp	r0, #0
   122dc:	ldrbne	r0, [r7]
   122e0:	cmpne	r0, #1
   122e4:	bne	121c4 <__assert_fail@plt+0xe74>
   122e8:	mov	r0, r9
   122ec:	mov	r1, r4
   122f0:	mov	r2, #1
   122f4:	bl	12c1c <__assert_fail@plt+0x18cc>
   122f8:	cmp	r0, #0
   122fc:	bne	122bc <__assert_fail@plt+0xf6c>
   12300:	b	121c4 <__assert_fail@plt+0xe74>
   12304:	cmp	r0, #0
   12308:	beq	12320 <__assert_fail@plt+0xfd0>
   1230c:	ldr	r0, [sp, #60]	; 0x3c
   12310:	ldr	r1, [r0]
   12314:	movw	r0, #37320	; 0x91c8
   12318:	movt	r0, #2
   1231c:	bl	129cc <__assert_fail@plt+0x167c>
   12320:	ldr	r0, [fp, #-40]	; 0xffffffd8
   12324:	mov	r2, #2
   12328:	cmp	r0, #0
   1232c:	movwne	r1, #37258	; 0x918a
   12330:	movne	r0, #1
   12334:	movtne	r1, #2
   12338:	strbne	r0, [r1]
   1233c:	add	r1, sp, #48	; 0x30
   12340:	mov	r0, r6
   12344:	bl	12c1c <__assert_fail@plt+0x18cc>
   12348:	cmp	r0, #0
   1234c:	beq	121e4 <__assert_fail@plt+0xe94>
   12350:	movw	r5, #37320	; 0x91c8
   12354:	add	r4, sp, #48	; 0x30
   12358:	movt	r5, #2
   1235c:	ldrb	r0, [r7]
   12360:	cmp	r0, #1
   12364:	bne	12374 <__assert_fail@plt+0x1024>
   12368:	ldr	r1, [sp, #48]	; 0x30
   1236c:	mov	r0, r5
   12370:	bl	129cc <__assert_fail@plt+0x167c>
   12374:	ldrb	r0, [r8, #1]
   12378:	cmp	r0, #0
   1237c:	ldrbne	r0, [r7]
   12380:	cmpne	r0, #1
   12384:	bne	121e4 <__assert_fail@plt+0xe94>
   12388:	mov	r0, r6
   1238c:	mov	r1, r4
   12390:	mov	r2, #2
   12394:	bl	12c1c <__assert_fail@plt+0x18cc>
   12398:	cmp	r0, #0
   1239c:	bne	1235c <__assert_fail@plt+0x100c>
   123a0:	b	121e4 <__assert_fail@plt+0xe94>
   123a4:	cmn	r0, #3
   123a8:	bne	123f4 <__assert_fail@plt+0x10a4>
   123ac:	movw	r0, #37144	; 0x9118
   123b0:	movw	r2, #31233	; 0x7a01
   123b4:	mov	r1, #0
   123b8:	movt	r0, #2
   123bc:	movt	r2, #1
   123c0:	str	r1, [sp, #4]
   123c4:	movw	r1, #31052	; 0x794c
   123c8:	ldr	r3, [r0]
   123cc:	movw	r0, #37244	; 0x917c
   123d0:	str	r2, [sp]
   123d4:	movw	r2, #31219	; 0x79f3
   123d8:	movt	r1, #1
   123dc:	movt	r0, #2
   123e0:	movt	r2, #1
   123e4:	ldr	r0, [r0]
   123e8:	bl	156a8 <__assert_fail@plt+0x4358>
   123ec:	mov	r0, #0
   123f0:	bl	1120c <exit@plt>
   123f4:	cmn	r0, #2
   123f8:	bne	12560 <__assert_fail@plt+0x1210>
   123fc:	mov	r0, #0
   12400:	bl	1144c <__assert_fail@plt+0xfc>
   12404:	movw	r1, #31101	; 0x797d
   12408:	movt	r1, #1
   1240c:	mov	r0, #0
   12410:	mov	r2, #5
   12414:	bl	11134 <dcgettext@plt>
   12418:	mov	r5, r0
   1241c:	ldr	r0, [r4]
   12420:	bl	1511c <__assert_fail@plt+0x3dcc>
   12424:	mov	r3, r0
   12428:	mov	r0, #1
   1242c:	mov	r1, #0
   12430:	mov	r2, r5
   12434:	bl	111a0 <error@plt>
   12438:	cmp	r0, #0
   1243c:	bne	12528 <__assert_fail@plt+0x11d8>
   12440:	movw	r1, #31246	; 0x7a0e
   12444:	mov	r0, #0
   12448:	mov	r2, #5
   1244c:	movt	r1, #1
   12450:	bl	11134 <dcgettext@plt>
   12454:	mov	r2, r0
   12458:	mov	r0, #0
   1245c:	mov	r1, #0
   12460:	bl	111a0 <error@plt>
   12464:	b	12560 <__assert_fail@plt+0x1210>
   12468:	movw	r1, #31126	; 0x7996
   1246c:	movt	r1, #1
   12470:	b	12248 <__assert_fail@plt+0xef8>
   12474:	movw	r1, #31178	; 0x79ca
   12478:	movt	r1, #1
   1247c:	b	1240c <__assert_fail@plt+0x10bc>
   12480:	movw	r1, #31201	; 0x79e1
   12484:	movt	r1, #1
   12488:	b	12248 <__assert_fail@plt+0xef8>
   1248c:	bl	1123c <__errno_location@plt>
   12490:	ldr	r4, [r0]
   12494:	ldr	r2, [r5]
   12498:	b	12504 <__assert_fail@plt+0x11b4>
   1249c:	bl	1123c <__errno_location@plt>
   124a0:	ldr	r4, [r0]
   124a4:	ldr	r2, [r5, #4]
   124a8:	b	12504 <__assert_fail@plt+0x11b4>
   124ac:	bl	1123c <__errno_location@plt>
   124b0:	ldr	r4, [r0]
   124b4:	movw	r1, #31287	; 0x7a37
   124b8:	mov	r0, #0
   124bc:	mov	r2, #5
   124c0:	movt	r1, #1
   124c4:	bl	11134 <dcgettext@plt>
   124c8:	mov	r2, r0
   124cc:	mov	r0, #1
   124d0:	mov	r1, r4
   124d4:	bl	111a0 <error@plt>
   124d8:	bl	1123c <__errno_location@plt>
   124dc:	ldr	r4, [r0]
   124e0:	movw	r0, #37280	; 0x91a0
   124e4:	movt	r0, #2
   124e8:	ldr	r2, [r0]
   124ec:	b	12504 <__assert_fail@plt+0x11b4>
   124f0:	bl	1123c <__errno_location@plt>
   124f4:	ldr	r4, [r0]
   124f8:	movw	r0, #37280	; 0x91a0
   124fc:	movt	r0, #2
   12500:	ldr	r2, [r0, #4]
   12504:	mov	r0, #0
   12508:	mov	r1, #3
   1250c:	bl	14f88 <__assert_fail@plt+0x3c38>
   12510:	movw	r2, #31826	; 0x7c52
   12514:	mov	r3, r0
   12518:	mov	r0, #1
   1251c:	mov	r1, r4
   12520:	movt	r2, #1
   12524:	bl	111a0 <error@plt>
   12528:	movw	r1, #31262	; 0x7a1e
   1252c:	mov	r0, #0
   12530:	mov	r2, #5
   12534:	movt	r1, #1
   12538:	bl	11134 <dcgettext@plt>
   1253c:	mov	r5, r0
   12540:	add	r0, sl, r6, lsl #2
   12544:	ldr	r0, [r0, #-4]
   12548:	bl	1511c <__assert_fail@plt+0x3dcc>
   1254c:	mov	r3, r0
   12550:	mov	r0, #0
   12554:	mov	r1, #0
   12558:	mov	r2, r5
   1255c:	bl	111a0 <error@plt>
   12560:	mov	r0, #1
   12564:	bl	1144c <__assert_fail@plt+0xfc>
   12568:	push	{r4, r5, r6, r7, fp, lr}
   1256c:	add	fp, sp, #16
   12570:	movw	r5, #37292	; 0x91ac
   12574:	mov	r4, #0
   12578:	mov	r6, #0
   1257c:	movt	r5, #2
   12580:	ldr	r7, [r5, r6, lsl #2]
   12584:	cmp	r7, #0
   12588:	beq	125ac <__assert_fail@plt+0x125c>
   1258c:	ldr	r0, [r7, #20]
   12590:	bl	13498 <__assert_fail@plt+0x2148>
   12594:	str	r4, [r7, #20]
   12598:	ldr	r0, [r7, #8]
   1259c:	bl	13498 <__assert_fail@plt+0x2148>
   125a0:	str	r4, [r7, #8]
   125a4:	ldr	r0, [r5, r6, lsl #2]
   125a8:	bl	13498 <__assert_fail@plt+0x2148>
   125ac:	add	r6, r6, #1
   125b0:	cmp	r6, #2
   125b4:	popeq	{r4, r5, r6, r7, fp, pc}
   125b8:	b	12580 <__assert_fail@plt+0x1230>
   125bc:	push	{r4, r5, fp, lr}
   125c0:	add	fp, sp, #8
   125c4:	sub	sp, sp, #8
   125c8:	ldr	r5, [r0]
   125cc:	mov	r4, r1
   125d0:	cmn	r5, #1
   125d4:	cmpne	r5, r4
   125d8:	bne	125e8 <__assert_fail@plt+0x1298>
   125dc:	str	r4, [r0]
   125e0:	sub	sp, fp, #8
   125e4:	pop	{r4, r5, fp, pc}
   125e8:	movw	r1, #31725	; 0x7bed
   125ec:	mov	r0, #0
   125f0:	mov	r2, #5
   125f4:	movt	r1, #1
   125f8:	bl	11134 <dcgettext@plt>
   125fc:	mov	r2, r0
   12600:	add	r0, r4, #1
   12604:	add	r3, r5, #1
   12608:	mov	r1, #0
   1260c:	str	r0, [sp]
   12610:	mov	r0, #1
   12614:	bl	111a0 <error@plt>
   12618:	push	{r4, r5, fp, lr}
   1261c:	add	fp, sp, #8
   12620:	sub	sp, sp, #16
   12624:	mov	r4, r0
   12628:	movw	r0, #31762	; 0x7c12
   1262c:	add	r3, sp, #8
   12630:	mov	r1, #0
   12634:	mov	r2, #10
   12638:	mov	r5, #0
   1263c:	movt	r0, #1
   12640:	str	r0, [sp]
   12644:	mov	r0, r4
   12648:	bl	1622c <__assert_fail@plt+0x4edc>
   1264c:	cmp	r0, #1
   12650:	beq	1266c <__assert_fail@plt+0x131c>
   12654:	ldr	r1, [sp, #8]
   12658:	ldr	r2, [sp, #12]
   1265c:	cmp	r0, #0
   12660:	bne	1267c <__assert_fail@plt+0x132c>
   12664:	cmp	r2, #0
   12668:	beq	1267c <__assert_fail@plt+0x132c>
   1266c:	mvn	r1, #0
   12670:	str	r5, [sp, #12]
   12674:	str	r1, [sp, #8]
   12678:	b	1268c <__assert_fail@plt+0x133c>
   1267c:	cmp	r0, #0
   12680:	bne	12698 <__assert_fail@plt+0x1348>
   12684:	orrs	r0, r1, r2
   12688:	beq	12698 <__assert_fail@plt+0x1348>
   1268c:	sub	r0, r1, #1
   12690:	sub	sp, fp, #8
   12694:	pop	{r4, r5, fp, pc}
   12698:	movw	r1, #31101	; 0x797d
   1269c:	mov	r0, #0
   126a0:	mov	r2, #5
   126a4:	movt	r1, #1
   126a8:	bl	11134 <dcgettext@plt>
   126ac:	mov	r5, r0
   126b0:	mov	r0, r4
   126b4:	bl	1511c <__assert_fail@plt+0x3dcc>
   126b8:	mov	r3, r0
   126bc:	mov	r0, #1
   126c0:	mov	r1, #0
   126c4:	mov	r2, r5
   126c8:	bl	111a0 <error@plt>
   126cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126d0:	add	fp, sp, #28
   126d4:	sub	sp, sp, #4
   126d8:	movw	r8, #31759	; 0x7c0f
   126dc:	movw	sl, #37140	; 0x9114
   126e0:	mov	r4, r0
   126e4:	mov	r9, #0
   126e8:	movt	r8, #1
   126ec:	movt	sl, #2
   126f0:	b	12730 <__assert_fail@plt+0x13e0>
   126f4:	ldrb	r0, [r4, #1]
   126f8:	mov	r5, #0
   126fc:	mov	r6, #0
   12700:	cmp	r0, #0
   12704:	bne	12790 <__assert_fail@plt+0x1440>
   12708:	mov	r0, #12
   1270c:	bl	157b0 <__assert_fail@plt+0x4460>
   12710:	stm	r0, {r5, r6, r9}
   12714:	cmp	r7, #0
   12718:	mov	r4, r7
   1271c:	ldr	r1, [sl]
   12720:	str	r0, [r1, #8]
   12724:	str	r0, [sl]
   12728:	subeq	sp, fp, #28
   1272c:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12730:	mov	r0, r4
   12734:	mov	r1, r8
   12738:	bl	112f0 <strpbrk@plt>
   1273c:	cmp	r0, #0
   12740:	mov	r7, #0
   12744:	strbne	r9, [r0], #1
   12748:	movne	r7, r0
   1274c:	ldrb	r0, [r4]
   12750:	sub	r1, r0, #49	; 0x31
   12754:	cmp	r1, #2
   12758:	bcs	1277c <__assert_fail@plt+0x142c>
   1275c:	ldrb	r1, [r4, #1]
   12760:	cmp	r1, #46	; 0x2e
   12764:	bne	12790 <__assert_fail@plt+0x1440>
   12768:	sub	r5, r0, #48	; 0x30
   1276c:	add	r0, r4, #2
   12770:	bl	12618 <__assert_fail@plt+0x12c8>
   12774:	mov	r6, r0
   12778:	b	12708 <__assert_fail@plt+0x13b8>
   1277c:	cmp	r0, #48	; 0x30
   12780:	beq	126f4 <__assert_fail@plt+0x13a4>
   12784:	movw	r1, #31791	; 0x7c2f
   12788:	movt	r1, #1
   1278c:	b	12798 <__assert_fail@plt+0x1448>
   12790:	movw	r1, #31763	; 0x7c13
   12794:	movt	r1, #1
   12798:	mov	r0, #0
   1279c:	mov	r2, #5
   127a0:	bl	11134 <dcgettext@plt>
   127a4:	mov	r5, r0
   127a8:	mov	r0, r4
   127ac:	bl	1511c <__assert_fail@plt+0x3dcc>
   127b0:	mov	r3, r0
   127b4:	mov	r0, #1
   127b8:	mov	r1, #0
   127bc:	mov	r2, r5
   127c0:	bl	111a0 <error@plt>
   127c4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   127c8:	add	fp, sp, #24
   127cc:	mov	r4, r0
   127d0:	ldr	r0, [r3]
   127d4:	mov	r5, r3
   127d8:	mov	r6, r1
   127dc:	cmp	r0, #2
   127e0:	bne	12880 <__assert_fail@plt+0x1530>
   127e4:	ldr	r7, [r6]
   127e8:	movw	r8, #37280	; 0x91a0
   127ec:	movt	r8, #2
   127f0:	clz	r0, r7
   127f4:	lsr	r0, r0, #5
   127f8:	ldr	r1, [r6, r0, lsl #2]
   127fc:	cmp	r1, #3
   12800:	bhi	12868 <__assert_fail@plt+0x1518>
   12804:	ldr	r0, [r8, r0, lsl #2]
   12808:	add	r3, pc, #0
   1280c:	ldr	pc, [r3, r1, lsl #2]
   12810:			; <UNDEFINED> instruction: 0x000128b8
   12814:	andeq	r2, r1, r0, lsr #16
   12818:	andeq	r2, r1, r0, asr #16
   1281c:	andeq	r2, r1, r4, ror #16
   12820:	ldr	r1, [r2]
   12824:	sub	r1, r1, #1
   12828:	str	r1, [r2]
   1282c:	bl	12618 <__assert_fail@plt+0x12c8>
   12830:	mov	r1, r0
   12834:	movw	r0, #37128	; 0x9108
   12838:	movt	r0, #2
   1283c:	b	1285c <__assert_fail@plt+0x150c>
   12840:	ldr	r1, [r2, #4]
   12844:	sub	r1, r1, #1
   12848:	str	r1, [r2, #4]
   1284c:	bl	12618 <__assert_fail@plt+0x12c8>
   12850:	mov	r1, r0
   12854:	movw	r0, #37132	; 0x910c
   12858:	movt	r0, #2
   1285c:	bl	125bc <__assert_fail@plt+0x126c>
   12860:	b	12868 <__assert_fail@plt+0x1518>
   12864:	bl	126cc <__assert_fail@plt+0x137c>
   12868:	cmp	r7, #0
   1286c:	mov	r0, #1
   12870:	ldrne	r1, [r6, #4]
   12874:	strne	r1, [r6]
   12878:	ldrne	r1, [r8, #4]
   1287c:	strne	r1, [r8]
   12880:	ldr	r1, [fp, #8]
   12884:	ldr	r2, [r1]
   12888:	str	r2, [r6, r0, lsl #2]
   1288c:	movw	r2, #37280	; 0x91a0
   12890:	movt	r2, #2
   12894:	str	r4, [r2, r0, lsl #2]
   12898:	add	r0, r0, #1
   1289c:	str	r0, [r5]
   128a0:	ldr	r0, [r1]
   128a4:	cmp	r0, #3
   128a8:	ldreq	r0, [fp, #12]
   128ac:	moveq	r1, #3
   128b0:	streq	r1, [r0]
   128b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   128b8:	movw	r1, #31829	; 0x7c55
   128bc:	mov	r0, #0
   128c0:	mov	r2, #5
   128c4:	movt	r1, #1
   128c8:	bl	11134 <dcgettext@plt>
   128cc:	mov	r5, r0
   128d0:	mov	r0, #4
   128d4:	mov	r1, r4
   128d8:	bl	14de4 <__assert_fail@plt+0x3a94>
   128dc:	mov	r3, r0
   128e0:	mov	r0, #0
   128e4:	mov	r1, #0
   128e8:	mov	r2, r5
   128ec:	bl	111a0 <error@plt>
   128f0:	mov	r0, #1
   128f4:	bl	1144c <__assert_fail@plt+0xfc>
   128f8:	cmp	r0, #0
   128fc:	bxeq	lr
   12900:	push	{r4, r5, fp, lr}
   12904:	add	fp, sp, #8
   12908:	mov	r4, r0
   1290c:	ldr	r0, [r0, #20]
   12910:	bl	13498 <__assert_fail@plt+0x2148>
   12914:	mov	r5, #0
   12918:	str	r5, [r4, #20]
   1291c:	ldr	r0, [r4, #8]
   12920:	bl	13498 <__assert_fail@plt+0x2148>
   12924:	str	r5, [r4, #8]
   12928:	pop	{r4, r5, fp, lr}
   1292c:	bx	lr
   12930:	push	{r4, r5, r6, r7, fp, lr}
   12934:	add	fp, sp, #16
   12938:	mov	r4, r1
   1293c:	mov	r7, r2
   12940:	mov	r6, r0
   12944:	ldr	r0, [r1, #4]!
   12948:	ldr	r2, [r4]
   1294c:	cmp	r2, r0
   12950:	bne	12998 <__assert_fail@plt+0x1648>
   12954:	ldr	r0, [r4, #8]
   12958:	mov	r2, #4
   1295c:	bl	158bc <__assert_fail@plt+0x456c>
   12960:	str	r0, [r4, #8]
   12964:	ldr	r2, [r4]
   12968:	ldr	r1, [r4, #4]
   1296c:	cmp	r2, r1
   12970:	bcs	12998 <__assert_fail@plt+0x1648>
   12974:	mov	r3, #0
   12978:	str	r3, [r0, r2, lsl #2]
   1297c:	add	r0, r2, #1
   12980:	b	12990 <__assert_fail@plt+0x1640>
   12984:	ldr	r5, [r4, #8]
   12988:	str	r3, [r5, r0, lsl #2]
   1298c:	add	r0, r0, #1
   12990:	cmp	r0, r1
   12994:	bcc	12984 <__assert_fail@plt+0x1634>
   12998:	ldr	r0, [r4, #8]
   1299c:	add	r1, r0, r2, lsl #2
   129a0:	mov	r0, r6
   129a4:	mov	r2, r7
   129a8:	bl	12c1c <__assert_fail@plt+0x18cc>
   129ac:	mov	r1, r0
   129b0:	mov	r0, #0
   129b4:	cmp	r1, #0
   129b8:	ldrne	r0, [r4]
   129bc:	addne	r0, r0, #1
   129c0:	strne	r0, [r4]
   129c4:	movne	r0, #1
   129c8:	pop	{r4, r5, r6, r7, fp, pc}
   129cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129d0:	add	fp, sp, #28
   129d4:	sub	sp, sp, #4
   129d8:	mov	sl, r0
   129dc:	movw	r0, #37300	; 0x91b4
   129e0:	mov	r8, r1
   129e4:	movt	r0, #2
   129e8:	ldr	r9, [r0, #8]
   129ec:	cmp	r9, #0
   129f0:	beq	12aac <__assert_fail@plt+0x175c>
   129f4:	movw	r0, #37136	; 0x9110
   129f8:	ldr	r2, [r9]
   129fc:	mov	r7, sl
   12a00:	mov	r1, r8
   12a04:	movw	r3, #37132	; 0x910c
   12a08:	movw	r4, #37128	; 0x9108
   12a0c:	movt	r0, #2
   12a10:	movt	r3, #2
   12a14:	movt	r4, #2
   12a18:	ldr	r5, [r0]
   12a1c:	movw	r0, #37320	; 0x91c8
   12a20:	movt	r0, #2
   12a24:	cmp	sl, r0
   12a28:	moveq	r7, r8
   12a2c:	cmp	r2, #1
   12a30:	moveq	r1, sl
   12a34:	cmp	r2, #0
   12a38:	moveq	r1, r7
   12a3c:	cmp	sl, r0
   12a40:	moveq	r4, r3
   12a44:	cmp	r2, #0
   12a48:	mov	r0, r4
   12a4c:	addne	r0, r9, #4
   12a50:	ldr	r0, [r0]
   12a54:	bl	13048 <__assert_fail@plt+0x1cf8>
   12a58:	uxtb	r6, r5
   12a5c:	cmp	r5, #0
   12a60:	ldr	r5, [r9, #8]
   12a64:	movwlt	r6, #32
   12a68:	b	12aa0 <__assert_fail@plt+0x1750>
   12a6c:	mov	r0, r6
   12a70:	bl	11344 <putchar_unlocked@plt>
   12a74:	ldr	r0, [r5]
   12a78:	mov	r1, r8
   12a7c:	cmp	r0, #1
   12a80:	moveq	r1, sl
   12a84:	cmp	r0, #0
   12a88:	mov	r0, r4
   12a8c:	addne	r0, r5, #4
   12a90:	moveq	r1, r7
   12a94:	ldr	r0, [r0]
   12a98:	bl	13048 <__assert_fail@plt+0x1cf8>
   12a9c:	ldr	r5, [r5, #8]
   12aa0:	cmp	r5, #0
   12aa4:	bne	12a6c <__assert_fail@plt+0x171c>
   12aa8:	b	12b10 <__assert_fail@plt+0x17c0>
   12aac:	movw	r0, #37320	; 0x91c8
   12ab0:	movw	r5, #37128	; 0x9108
   12ab4:	movw	r4, #37132	; 0x910c
   12ab8:	mov	r1, sl
   12abc:	movt	r0, #2
   12ac0:	movt	r5, #2
   12ac4:	movt	r4, #2
   12ac8:	cmp	sl, r0
   12acc:	mov	r0, r5
   12ad0:	moveq	r0, r4
   12ad4:	moveq	r1, r8
   12ad8:	ldr	r0, [r0]
   12adc:	bl	13048 <__assert_fail@plt+0x1cf8>
   12ae0:	movw	r0, #37312	; 0x91c0
   12ae4:	ldr	r1, [r5]
   12ae8:	movt	r0, #2
   12aec:	ldr	r2, [r0]
   12af0:	mov	r0, sl
   12af4:	bl	130a4 <__assert_fail@plt+0x1d54>
   12af8:	movw	r0, #37316	; 0x91c4
   12afc:	ldr	r1, [r4]
   12b00:	movt	r0, #2
   12b04:	ldr	r2, [r0]
   12b08:	mov	r0, r8
   12b0c:	bl	130a4 <__assert_fail@plt+0x1d54>
   12b10:	movw	r0, #37278	; 0x919e
   12b14:	movt	r0, #2
   12b18:	ldrb	r1, [r0]
   12b1c:	mov	r0, #10
   12b20:	cmp	r1, #0
   12b24:	movwne	r0, #0
   12b28:	sub	sp, fp, #28
   12b2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b30:	b	11344 <putchar_unlocked@plt>
   12b34:	push	{r4, r5, fp, lr}
   12b38:	add	fp, sp, #8
   12b3c:	mov	r5, r0
   12b40:	ldr	r0, [r0, #12]
   12b44:	mov	r4, #0
   12b48:	mov	ip, #0
   12b4c:	cmp	r0, r2
   12b50:	mov	r0, #0
   12b54:	ldrhi	r5, [r5, #20]
   12b58:	ldrhi	r0, [r5, r2, lsl #3]!
   12b5c:	ldr	r2, [r1, #12]
   12b60:	ldrhi	r4, [r5, #4]
   12b64:	cmp	r2, r3
   12b68:	mov	r5, #0
   12b6c:	ldrhi	r1, [r1, #20]
   12b70:	ldrhi	ip, [r1, r3, lsl #3]!
   12b74:	ldrhi	r5, [r1, #4]
   12b78:	cmp	r4, #0
   12b7c:	beq	12bb8 <__assert_fail@plt+0x1868>
   12b80:	cmp	r5, #0
   12b84:	moveq	r0, #1
   12b88:	popeq	{r4, r5, fp, pc}
   12b8c:	movw	r1, #37276	; 0x919c
   12b90:	movt	r1, #2
   12b94:	ldrb	r1, [r1]
   12b98:	cmp	r1, #1
   12b9c:	bne	12bc8 <__assert_fail@plt+0x1878>
   12ba0:	cmp	r4, r5
   12ba4:	mov	r2, r5
   12ba8:	mov	r1, ip
   12bac:	movcc	r2, r4
   12bb0:	bl	136c4 <__assert_fail@plt+0x2374>
   12bb4:	b	12c04 <__assert_fail@plt+0x18b4>
   12bb8:	cmp	r5, #0
   12bbc:	mvnne	r5, #0
   12bc0:	mov	r0, r5
   12bc4:	pop	{r4, r5, fp, pc}
   12bc8:	movw	r1, #37256	; 0x9188
   12bcc:	movt	r1, #2
   12bd0:	ldrb	r1, [r1]
   12bd4:	cmp	r1, #0
   12bd8:	beq	12bf0 <__assert_fail@plt+0x18a0>
   12bdc:	mov	r1, r4
   12be0:	mov	r2, ip
   12be4:	mov	r3, r5
   12be8:	pop	{r4, r5, fp, lr}
   12bec:	b	15c44 <__assert_fail@plt+0x48f4>
   12bf0:	cmp	r4, r5
   12bf4:	mov	r2, r5
   12bf8:	mov	r1, ip
   12bfc:	movcc	r2, r4
   12c00:	bl	1111c <memcmp@plt>
   12c04:	cmp	r0, #0
   12c08:	popne	{r4, r5, fp, pc}
   12c0c:	subs	r0, r4, r5
   12c10:	movwne	r0, #1
   12c14:	mvncc	r0, #0
   12c18:	pop	{r4, r5, fp, pc}
   12c1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c20:	add	fp, sp, #28
   12c24:	sub	sp, sp, #28
   12c28:	movw	r8, #37344	; 0x91e0
   12c2c:	mov	r7, r1
   12c30:	sub	r5, r2, #1
   12c34:	mov	r9, r0
   12c38:	mov	r6, r2
   12c3c:	movt	r8, #2
   12c40:	ldr	r0, [r7]
   12c44:	ldr	r1, [r8, r5, lsl #2]
   12c48:	cmp	r0, r1
   12c4c:	beq	12c58 <__assert_fail@plt+0x1908>
   12c50:	mov	r4, r0
   12c54:	b	12c6c <__assert_fail@plt+0x191c>
   12c58:	movw	r1, #37292	; 0x91ac
   12c5c:	movt	r1, #2
   12c60:	ldr	r4, [r1, r5, lsl #2]
   12c64:	str	r0, [r1, r5, lsl #2]
   12c68:	str	r4, [r7]
   12c6c:	cmp	r4, #0
   12c70:	beq	12c80 <__assert_fail@plt+0x1930>
   12c74:	mov	r0, #0
   12c78:	str	r0, [r4, #12]
   12c7c:	b	12c94 <__assert_fail@plt+0x1944>
   12c80:	mov	r0, #1
   12c84:	mov	r1, #24
   12c88:	bl	15ab4 <__assert_fail@plt+0x4764>
   12c8c:	mov	r4, r0
   12c90:	str	r0, [r7]
   12c94:	movw	r0, #37278	; 0x919e
   12c98:	mov	r2, #10
   12c9c:	mov	r1, r9
   12ca0:	movt	r0, #2
   12ca4:	ldrb	r0, [r0]
   12ca8:	cmp	r0, #0
   12cac:	mov	r0, r4
   12cb0:	movwne	r2, #0
   12cb4:	bl	135e4 <__assert_fail@plt+0x2294>
   12cb8:	cmp	r0, #0
   12cbc:	beq	12d68 <__assert_fail@plt+0x1a18>
   12cc0:	movw	r1, #37352	; 0x91e8
   12cc4:	str	r6, [sp, #20]
   12cc8:	movt	r1, #2
   12ccc:	ldr	r0, [r1, r5, lsl #3]!
   12cd0:	adds	r0, r0, #1
   12cd4:	str	r1, [sp, #16]
   12cd8:	str	r0, [r1]
   12cdc:	ldr	r0, [r1, #4]
   12ce0:	adc	r0, r0, #0
   12ce4:	str	r0, [r1, #4]
   12ce8:	ldmib	r4, {r0, r6}
   12cec:	add	sl, r6, r0
   12cf0:	sub	r9, sl, #1
   12cf4:	cmp	r6, r9
   12cf8:	beq	12db0 <__assert_fail@plt+0x1a60>
   12cfc:	movw	r8, #37136	; 0x9110
   12d00:	str	r5, [sp, #24]
   12d04:	movt	r8, #2
   12d08:	ldr	r1, [r8]
   12d0c:	cmp	r1, #0
   12d10:	blt	12d88 <__assert_fail@plt+0x1a38>
   12d14:	cmp	r1, #10
   12d18:	beq	12d88 <__assert_fail@plt+0x1a38>
   12d1c:	sub	r2, r9, r6
   12d20:	mov	r0, r6
   12d24:	bl	11290 <memchr@plt>
   12d28:	cmp	r0, #0
   12d2c:	beq	12d90 <__assert_fail@plt+0x1a40>
   12d30:	mov	r7, r0
   12d34:	sub	r2, r7, r6
   12d38:	mov	r0, r4
   12d3c:	mov	r1, r6
   12d40:	bl	13154 <__assert_fail@plt+0x1e04>
   12d44:	ldr	r1, [r8]
   12d48:	add	r6, r7, #1
   12d4c:	sub	r2, r9, r6
   12d50:	mov	r0, r6
   12d54:	bl	11290 <memchr@plt>
   12d58:	mov	r7, r0
   12d5c:	cmp	r0, #0
   12d60:	bne	12d34 <__assert_fail@plt+0x19e4>
   12d64:	b	12d90 <__assert_fail@plt+0x1a40>
   12d68:	mov	r0, r9
   12d6c:	bl	11188 <ferror_unlocked@plt>
   12d70:	cmp	r0, #0
   12d74:	bne	12fcc <__assert_fail@plt+0x1c7c>
   12d78:	mov	r0, r4
   12d7c:	bl	128f8 <__assert_fail@plt+0x15a8>
   12d80:	mov	r0, #0
   12d84:	b	12fc4 <__assert_fail@plt+0x1c74>
   12d88:	cmn	r1, #1
   12d8c:	ble	12e6c <__assert_fail@plt+0x1b1c>
   12d90:	sub	r2, r9, r6
   12d94:	mov	r0, r4
   12d98:	mov	r1, r6
   12d9c:	bl	13154 <__assert_fail@plt+0x1e04>
   12da0:	movw	r5, #37344	; 0x91e0
   12da4:	movt	r5, #2
   12da8:	mov	r8, r5
   12dac:	ldr	r5, [sp, #24]
   12db0:	ldr	r0, [r8, r5, lsl #2]
   12db4:	cmp	r0, #0
   12db8:	beq	12fbc <__assert_fail@plt+0x1c6c>
   12dbc:	movw	r7, #37264	; 0x9190
   12dc0:	movt	r7, #2
   12dc4:	ldr	r1, [r7]
   12dc8:	cmp	r1, #1
   12dcc:	beq	12dec <__assert_fail@plt+0x1a9c>
   12dd0:	cmp	r1, #2
   12dd4:	beq	12fbc <__assert_fail@plt+0x1c6c>
   12dd8:	movw	r1, #37258	; 0x918a
   12ddc:	movt	r1, #2
   12de0:	ldrb	r1, [r1]
   12de4:	cmp	r1, #1
   12de8:	bne	12fbc <__assert_fail@plt+0x1c6c>
   12dec:	movw	r6, #37259	; 0x918b
   12df0:	movt	r6, #2
   12df4:	ldrb	r1, [r6, r5]
   12df8:	cmp	r1, #0
   12dfc:	bne	12fbc <__assert_fail@plt+0x1c6c>
   12e00:	ldr	r3, [sp, #20]
   12e04:	movw	r1, #37128	; 0x9108
   12e08:	movw	r2, #37132	; 0x910c
   12e0c:	movt	r1, #2
   12e10:	movt	r2, #2
   12e14:	cmp	r3, #1
   12e18:	moveq	r2, r1
   12e1c:	mov	r1, r4
   12e20:	ldr	r2, [r2]
   12e24:	mov	r3, r2
   12e28:	bl	12b34 <__assert_fail@plt+0x17e4>
   12e2c:	cmp	r0, #1
   12e30:	blt	12fbc <__assert_fail@plt+0x1c6c>
   12e34:	ldr	r0, [r4, #4]
   12e38:	mov	sl, r5
   12e3c:	mov	r9, r8
   12e40:	cmp	r0, #0
   12e44:	beq	12f58 <__assert_fail@plt+0x1c08>
   12e48:	ldr	r1, [r4, #8]
   12e4c:	sub	r2, r0, #1
   12e50:	mvn	r5, #-2147483648	; 0x80000000
   12e54:	ldrb	r1, [r1, r2]
   12e58:	cmp	r1, #10
   12e5c:	moveq	r0, r2
   12e60:	cmn	r0, #-2147483646	; 0x80000002
   12e64:	movls	r5, r0
   12e68:	b	12f60 <__assert_fail@plt+0x1c10>
   12e6c:	sub	r7, r0, #1
   12e70:	bl	11200 <__ctype_b_loc@plt>
   12e74:	movw	r5, #37344	; 0x91e0
   12e78:	ldr	r3, [r0]
   12e7c:	movt	r5, #2
   12e80:	mov	r8, r5
   12e84:	ldr	r5, [sp, #24]
   12e88:	ldrb	r1, [r6]
   12e8c:	cmp	r1, #10
   12e90:	beq	12ea4 <__assert_fail@plt+0x1b54>
   12e94:	add	r1, r3, r1, lsl #1
   12e98:	ldrh	r1, [r1]
   12e9c:	ands	r1, r1, #1
   12ea0:	beq	12eb4 <__assert_fail@plt+0x1b64>
   12ea4:	subs	r7, r7, #1
   12ea8:	add	r6, r6, #1
   12eac:	bne	12e88 <__assert_fail@plt+0x1b38>
   12eb0:	b	12db0 <__assert_fail@plt+0x1a60>
   12eb4:	sub	r8, sl, #2
   12eb8:	add	r2, r6, #1
   12ebc:	mov	r1, r6
   12ec0:	cmp	r8, r1
   12ec4:	beq	12d90 <__assert_fail@plt+0x1a40>
   12ec8:	add	r7, r1, #1
   12ecc:	ldrb	r1, [r1, #1]
   12ed0:	mov	r5, r2
   12ed4:	cmp	r1, #10
   12ed8:	beq	12ef4 <__assert_fail@plt+0x1ba4>
   12edc:	add	r1, r3, r1, lsl #1
   12ee0:	add	r2, r5, #1
   12ee4:	ldrh	r1, [r1]
   12ee8:	ands	r1, r1, #1
   12eec:	mov	r1, r7
   12ef0:	beq	12ec0 <__assert_fail@plt+0x1b70>
   12ef4:	mov	sl, r0
   12ef8:	sub	r2, r7, r6
   12efc:	mov	r0, r4
   12f00:	mov	r1, r6
   12f04:	bl	13154 <__assert_fail@plt+0x1e04>
   12f08:	cmp	r8, r7
   12f0c:	beq	12f50 <__assert_fail@plt+0x1c00>
   12f10:	ldr	r3, [sl]
   12f14:	mov	r0, sl
   12f18:	ldrb	r1, [r5, #1]
   12f1c:	cmp	r1, #10
   12f20:	beq	12f34 <__assert_fail@plt+0x1be4>
   12f24:	add	r1, r3, r1, lsl #1
   12f28:	ldrh	r1, [r1]
   12f2c:	ands	r1, r1, #1
   12f30:	beq	12f44 <__assert_fail@plt+0x1bf4>
   12f34:	add	r5, r5, #1
   12f38:	cmp	r8, r5
   12f3c:	bne	12f18 <__assert_fail@plt+0x1bc8>
   12f40:	b	12f50 <__assert_fail@plt+0x1c00>
   12f44:	add	r6, r5, #1
   12f48:	cmp	r8, r5
   12f4c:	bne	12eb8 <__assert_fail@plt+0x1b68>
   12f50:	mov	r6, r9
   12f54:	b	12d90 <__assert_fail@plt+0x1a40>
   12f58:	mov	r0, #0
   12f5c:	mov	r5, r0
   12f60:	ldr	r8, [r7]
   12f64:	movw	r1, #31857	; 0x7c71
   12f68:	mov	r0, #0
   12f6c:	mov	r2, #5
   12f70:	movt	r1, #1
   12f74:	bl	11134 <dcgettext@plt>
   12f78:	mov	r2, r0
   12f7c:	movw	r0, #37280	; 0x91a0
   12f80:	ldr	r7, [r4, #8]
   12f84:	movt	r0, #2
   12f88:	ldr	r3, [r0, sl, lsl #2]
   12f8c:	ldr	r0, [sp, #16]
   12f90:	ldrd	r0, [r0]
   12f94:	stm	sp, {r0, r1, r5, r7}
   12f98:	sub	r0, r8, #1
   12f9c:	mov	r1, #0
   12fa0:	mov	r5, sl
   12fa4:	clz	r0, r0
   12fa8:	lsr	r0, r0, #5
   12fac:	bl	111a0 <error@plt>
   12fb0:	mov	r0, #1
   12fb4:	mov	r8, r9
   12fb8:	strb	r0, [r6, sl]
   12fbc:	mov	r0, #1
   12fc0:	str	r4, [r8, r5, lsl #2]
   12fc4:	sub	sp, fp, #28
   12fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fcc:	bl	1123c <__errno_location@plt>
   12fd0:	ldr	r4, [r0]
   12fd4:	movw	r1, #31846	; 0x7c66
   12fd8:	mov	r0, #0
   12fdc:	mov	r2, #5
   12fe0:	movt	r1, #1
   12fe4:	bl	11134 <dcgettext@plt>
   12fe8:	mov	r2, r0
   12fec:	mov	r0, #1
   12ff0:	mov	r1, r4
   12ff4:	bl	111a0 <error@plt>
   12ff8:	push	{r4, r5, fp, lr}
   12ffc:	add	fp, sp, #8
   13000:	mov	r4, r0
   13004:	ldr	r0, [r0, #4]
   13008:	cmp	r0, #0
   1300c:	beq	1303c <__assert_fail@plt+0x1cec>
   13010:	mov	r5, #0
   13014:	ldr	r0, [r4, #8]
   13018:	ldr	r0, [r0, r5, lsl #2]
   1301c:	bl	128f8 <__assert_fail@plt+0x15a8>
   13020:	ldr	r0, [r4, #8]
   13024:	ldr	r0, [r0, r5, lsl #2]
   13028:	bl	13498 <__assert_fail@plt+0x2148>
   1302c:	ldr	r0, [r4, #4]
   13030:	add	r5, r5, #1
   13034:	cmp	r5, r0
   13038:	bcc	13014 <__assert_fail@plt+0x1cc4>
   1303c:	ldr	r0, [r4, #8]
   13040:	pop	{r4, r5, fp, lr}
   13044:	b	13498 <__assert_fail@plt+0x2148>
   13048:	ldr	r2, [r1, #12]
   1304c:	cmp	r2, r0
   13050:	bls	13080 <__assert_fail@plt+0x1d30>
   13054:	ldr	r1, [r1, #20]
   13058:	add	r2, r1, r0, lsl #3
   1305c:	ldr	r2, [r2, #4]
   13060:	cmp	r2, #0
   13064:	beq	13080 <__assert_fail@plt+0x1d30>
   13068:	ldr	r0, [r1, r0, lsl #3]
   1306c:	movw	r1, #37244	; 0x917c
   13070:	movt	r1, #2
   13074:	ldr	r3, [r1]
   13078:	mov	r1, #1
   1307c:	b	11110 <fwrite_unlocked@plt>
   13080:	movw	r0, #37272	; 0x9198
   13084:	movt	r0, #2
   13088:	ldr	r0, [r0]
   1308c:	cmp	r0, #0
   13090:	bxeq	lr
   13094:	movw	r1, #37244	; 0x917c
   13098:	movt	r1, #2
   1309c:	ldr	r1, [r1]
   130a0:	b	110a4 <fputs_unlocked@plt>
   130a4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   130a8:	add	fp, sp, #24
   130ac:	mov	r5, r0
   130b0:	movw	r0, #37277	; 0x919d
   130b4:	mov	r4, r2
   130b8:	mov	r8, r1
   130bc:	movt	r0, #2
   130c0:	ldrb	r0, [r0]
   130c4:	cmp	r0, #0
   130c8:	movw	r0, #37136	; 0x9110
   130cc:	movt	r0, #2
   130d0:	ldreq	r4, [r5, #12]
   130d4:	ldr	r9, [r0]
   130d8:	cmp	r9, #0
   130dc:	movwlt	r9, #32
   130e0:	cmp	r8, #0
   130e4:	cmpne	r4, #0
   130e8:	bne	13120 <__assert_fail@plt+0x1dd0>
   130ec:	add	r6, r8, #1
   130f0:	cmp	r6, r4
   130f4:	popcs	{r4, r5, r6, r7, r8, r9, fp, pc}
   130f8:	uxtb	r7, r9
   130fc:	mov	r0, r7
   13100:	bl	11344 <putchar_unlocked@plt>
   13104:	mov	r0, r6
   13108:	mov	r1, r5
   1310c:	bl	13048 <__assert_fail@plt+0x1cf8>
   13110:	add	r6, r6, #1
   13114:	cmp	r4, r6
   13118:	bne	130fc <__assert_fail@plt+0x1dac>
   1311c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13120:	uxtb	r7, r9
   13124:	mov	r6, #0
   13128:	mov	r0, r7
   1312c:	bl	11344 <putchar_unlocked@plt>
   13130:	mov	r0, r6
   13134:	mov	r1, r5
   13138:	bl	13048 <__assert_fail@plt+0x1cf8>
   1313c:	add	r6, r6, #1
   13140:	cmp	r6, r8
   13144:	bcs	130ec <__assert_fail@plt+0x1d9c>
   13148:	cmp	r6, r4
   1314c:	bcc	13128 <__assert_fail@plt+0x1dd8>
   13150:	b	130ec <__assert_fail@plt+0x1d9c>
   13154:	push	{r4, r5, r6, sl, fp, lr}
   13158:	add	fp, sp, #16
   1315c:	mov	r6, r1
   13160:	mov	r1, r0
   13164:	mov	r4, r0
   13168:	mov	r5, r2
   1316c:	ldr	r0, [r1, #16]!
   13170:	ldr	r2, [r1, #-4]
   13174:	cmp	r2, r0
   13178:	bcs	13184 <__assert_fail@plt+0x1e34>
   1317c:	ldr	r0, [r4, #20]
   13180:	b	13198 <__assert_fail@plt+0x1e48>
   13184:	ldr	r0, [r4, #20]
   13188:	mov	r2, #8
   1318c:	bl	158bc <__assert_fail@plt+0x456c>
   13190:	str	r0, [r4, #20]
   13194:	ldr	r2, [r4, #12]
   13198:	str	r6, [r0, r2, lsl #3]!
   1319c:	str	r5, [r0, #4]
   131a0:	add	r0, r2, #1
   131a4:	str	r0, [r4, #12]
   131a8:	pop	{r4, r5, r6, sl, fp, pc}
   131ac:	movw	r1, #37368	; 0x91f8
   131b0:	movt	r1, #2
   131b4:	str	r0, [r1]
   131b8:	bx	lr
   131bc:	movw	r1, #37372	; 0x91fc
   131c0:	movt	r1, #2
   131c4:	strb	r0, [r1]
   131c8:	bx	lr
   131cc:	push	{r4, r5, r6, sl, fp, lr}
   131d0:	add	fp, sp, #16
   131d4:	sub	sp, sp, #8
   131d8:	movw	r0, #37244	; 0x917c
   131dc:	movt	r0, #2
   131e0:	ldr	r0, [r0]
   131e4:	bl	169b8 <__assert_fail@plt+0x5668>
   131e8:	cmp	r0, #0
   131ec:	beq	13214 <__assert_fail@plt+0x1ec4>
   131f0:	movw	r0, #37372	; 0x91fc
   131f4:	movt	r0, #2
   131f8:	ldrb	r0, [r0]
   131fc:	cmp	r0, #0
   13200:	beq	13234 <__assert_fail@plt+0x1ee4>
   13204:	bl	1123c <__errno_location@plt>
   13208:	ldr	r0, [r0]
   1320c:	cmp	r0, #32
   13210:	bne	13234 <__assert_fail@plt+0x1ee4>
   13214:	movw	r0, #37232	; 0x9170
   13218:	movt	r0, #2
   1321c:	ldr	r0, [r0]
   13220:	bl	169b8 <__assert_fail@plt+0x5668>
   13224:	cmp	r0, #0
   13228:	subeq	sp, fp, #16
   1322c:	popeq	{r4, r5, r6, sl, fp, pc}
   13230:	b	132a4 <__assert_fail@plt+0x1f54>
   13234:	movw	r1, #32087	; 0x7d57
   13238:	mov	r0, #0
   1323c:	mov	r2, #5
   13240:	movt	r1, #1
   13244:	bl	11134 <dcgettext@plt>
   13248:	mov	r4, r0
   1324c:	movw	r0, #37368	; 0x91f8
   13250:	movt	r0, #2
   13254:	ldr	r6, [r0]
   13258:	bl	1123c <__errno_location@plt>
   1325c:	ldr	r5, [r0]
   13260:	cmp	r6, #0
   13264:	bne	13280 <__assert_fail@plt+0x1f30>
   13268:	movw	r2, #31826	; 0x7c52
   1326c:	mov	r0, #0
   13270:	mov	r1, r5
   13274:	mov	r3, r4
   13278:	movt	r2, #1
   1327c:	b	132a0 <__assert_fail@plt+0x1f50>
   13280:	mov	r0, r6
   13284:	bl	14edc <__assert_fail@plt+0x3b8c>
   13288:	movw	r2, #32099	; 0x7d63
   1328c:	mov	r3, r0
   13290:	str	r4, [sp]
   13294:	mov	r0, #0
   13298:	mov	r1, r5
   1329c:	movt	r2, #1
   132a0:	bl	111a0 <error@plt>
   132a4:	movw	r0, #37148	; 0x911c
   132a8:	movt	r0, #2
   132ac:	ldr	r0, [r0]
   132b0:	bl	110ec <_exit@plt>
   132b4:	b	110c8 <posix_fadvise64@plt>
   132b8:	cmp	r0, #0
   132bc:	bxeq	lr
   132c0:	push	{r4, sl, fp, lr}
   132c4:	add	fp, sp, #8
   132c8:	sub	sp, sp, #16
   132cc:	mov	r4, r1
   132d0:	bl	1126c <fileno@plt>
   132d4:	mov	r1, #0
   132d8:	mov	r2, #0
   132dc:	mov	r3, #0
   132e0:	str	r1, [sp]
   132e4:	stmib	sp, {r1, r4}
   132e8:	bl	110c8 <posix_fadvise64@plt>
   132ec:	sub	sp, fp, #8
   132f0:	pop	{r4, sl, fp, pc}
   132f4:	push	{r4, r5, r6, sl, fp, lr}
   132f8:	add	fp, sp, #16
   132fc:	sub	sp, sp, #8
   13300:	mov	r4, r0
   13304:	bl	1126c <fileno@plt>
   13308:	cmn	r0, #1
   1330c:	ble	13380 <__assert_fail@plt+0x2030>
   13310:	mov	r0, r4
   13314:	bl	111d0 <__freading@plt>
   13318:	cmp	r0, #0
   1331c:	beq	13348 <__assert_fail@plt+0x1ff8>
   13320:	mov	r0, r4
   13324:	bl	1126c <fileno@plt>
   13328:	mov	r1, #1
   1332c:	mov	r2, #0
   13330:	mov	r3, #0
   13334:	str	r1, [sp]
   13338:	bl	11164 <lseek64@plt>
   1333c:	and	r0, r0, r1
   13340:	cmn	r0, #1
   13344:	beq	13380 <__assert_fail@plt+0x2030>
   13348:	mov	r0, r4
   1334c:	bl	13390 <__assert_fail@plt+0x2040>
   13350:	cmp	r0, #0
   13354:	beq	13380 <__assert_fail@plt+0x2030>
   13358:	bl	1123c <__errno_location@plt>
   1335c:	ldr	r6, [r0]
   13360:	mov	r5, r0
   13364:	mov	r0, r4
   13368:	bl	1129c <fclose@plt>
   1336c:	cmp	r6, #0
   13370:	strne	r6, [r5]
   13374:	mvnne	r0, #0
   13378:	sub	sp, fp, #16
   1337c:	pop	{r4, r5, r6, sl, fp, pc}
   13380:	mov	r0, r4
   13384:	sub	sp, fp, #16
   13388:	pop	{r4, r5, r6, sl, fp, lr}
   1338c:	b	1129c <fclose@plt>
   13390:	push	{r4, sl, fp, lr}
   13394:	add	fp, sp, #8
   13398:	sub	sp, sp, #8
   1339c:	mov	r4, r0
   133a0:	cmp	r0, #0
   133a4:	beq	133c0 <__assert_fail@plt+0x2070>
   133a8:	mov	r0, r4
   133ac:	bl	111d0 <__freading@plt>
   133b0:	cmp	r0, #0
   133b4:	ldrbne	r0, [r4, #1]
   133b8:	tstne	r0, #1
   133bc:	bne	133d0 <__assert_fail@plt+0x2080>
   133c0:	mov	r0, r4
   133c4:	sub	sp, fp, #8
   133c8:	pop	{r4, sl, fp, lr}
   133cc:	b	110d4 <fflush@plt>
   133d0:	mov	r0, #1
   133d4:	mov	r2, #0
   133d8:	mov	r3, #0
   133dc:	str	r0, [sp]
   133e0:	mov	r0, r4
   133e4:	bl	134c0 <__assert_fail@plt+0x2170>
   133e8:	b	133c0 <__assert_fail@plt+0x2070>
   133ec:	push	{r4, r5, r6, r7, fp, lr}
   133f0:	add	fp, sp, #16
   133f4:	mov	r5, r1
   133f8:	bl	112e4 <fopen64@plt>
   133fc:	mov	r4, #0
   13400:	cmp	r0, #0
   13404:	beq	13490 <__assert_fail@plt+0x2140>
   13408:	mov	r6, r0
   1340c:	bl	1126c <fileno@plt>
   13410:	cmp	r0, #2
   13414:	bhi	13470 <__assert_fail@plt+0x2120>
   13418:	bl	152e8 <__assert_fail@plt+0x3f98>
   1341c:	cmn	r0, #1
   13420:	ble	13478 <__assert_fail@plt+0x2128>
   13424:	mov	r7, r0
   13428:	mov	r0, r6
   1342c:	bl	132f4 <__assert_fail@plt+0x1fa4>
   13430:	cmp	r0, #0
   13434:	bne	13450 <__assert_fail@plt+0x2100>
   13438:	mov	r0, r7
   1343c:	mov	r1, r5
   13440:	bl	1108c <fdopen@plt>
   13444:	mov	r4, r0
   13448:	cmp	r0, #0
   1344c:	bne	13490 <__assert_fail@plt+0x2140>
   13450:	bl	1123c <__errno_location@plt>
   13454:	ldr	r5, [r0]
   13458:	mov	r4, r0
   1345c:	mov	r0, r7
   13460:	bl	11338 <close@plt>
   13464:	str	r5, [r4]
   13468:	mov	r4, #0
   1346c:	b	13490 <__assert_fail@plt+0x2140>
   13470:	mov	r4, r6
   13474:	b	13490 <__assert_fail@plt+0x2140>
   13478:	bl	1123c <__errno_location@plt>
   1347c:	ldr	r7, [r0]
   13480:	mov	r5, r0
   13484:	mov	r0, r6
   13488:	bl	132f4 <__assert_fail@plt+0x1fa4>
   1348c:	str	r7, [r5]
   13490:	mov	r0, r4
   13494:	pop	{r4, r5, r6, r7, fp, pc}
   13498:	push	{r4, r5, r6, sl, fp, lr}
   1349c:	add	fp, sp, #16
   134a0:	mov	r4, r0
   134a4:	bl	1123c <__errno_location@plt>
   134a8:	ldr	r6, [r0]
   134ac:	mov	r5, r0
   134b0:	mov	r0, r4
   134b4:	bl	110e0 <free@plt>
   134b8:	str	r6, [r5]
   134bc:	pop	{r4, r5, r6, sl, fp, pc}
   134c0:	push	{r4, r5, r6, r7, fp, lr}
   134c4:	add	fp, sp, #16
   134c8:	sub	sp, sp, #8
   134cc:	mov	r4, r0
   134d0:	ldr	r0, [r0, #4]
   134d4:	mov	r5, r3
   134d8:	mov	r6, r2
   134dc:	ldr	r1, [r4, #8]
   134e0:	cmp	r1, r0
   134e4:	bne	13500 <__assert_fail@plt+0x21b0>
   134e8:	ldrd	r0, [r4, #16]
   134ec:	cmp	r1, r0
   134f0:	bne	13500 <__assert_fail@plt+0x21b0>
   134f4:	ldr	r0, [r4, #36]	; 0x24
   134f8:	cmp	r0, #0
   134fc:	beq	13518 <__assert_fail@plt+0x21c8>
   13500:	mov	r0, r4
   13504:	mov	r2, r6
   13508:	mov	r3, r5
   1350c:	sub	sp, fp, #16
   13510:	pop	{r4, r5, r6, r7, fp, lr}
   13514:	b	112a8 <fseeko64@plt>
   13518:	ldr	r7, [fp, #8]
   1351c:	mov	r0, r4
   13520:	bl	1126c <fileno@plt>
   13524:	mov	r2, r6
   13528:	mov	r3, r5
   1352c:	str	r7, [sp]
   13530:	bl	11164 <lseek64@plt>
   13534:	and	r2, r0, r1
   13538:	cmn	r2, #1
   1353c:	beq	13558 <__assert_fail@plt+0x2208>
   13540:	strd	r0, [r4, #80]	; 0x50
   13544:	ldr	r0, [r4]
   13548:	bic	r0, r0, #16
   1354c:	str	r0, [r4]
   13550:	mov	r0, #0
   13554:	b	1355c <__assert_fail@plt+0x220c>
   13558:	mvn	r0, #0
   1355c:	sub	sp, fp, #16
   13560:	pop	{r4, r5, r6, r7, fp, pc}
   13564:	push	{r4, sl, fp, lr}
   13568:	add	fp, sp, #8
   1356c:	sub	sp, sp, #264	; 0x108
   13570:	add	r1, sp, #7
   13574:	movw	r2, #257	; 0x101
   13578:	bl	15254 <__assert_fail@plt+0x3f04>
   1357c:	mov	r4, #0
   13580:	cmp	r0, #0
   13584:	bne	135bc <__assert_fail@plt+0x226c>
   13588:	movw	r1, #32106	; 0x7d6a
   1358c:	add	r0, sp, #7
   13590:	movt	r1, #1
   13594:	bl	110bc <strcmp@plt>
   13598:	cmp	r0, #0
   1359c:	beq	135bc <__assert_fail@plt+0x226c>
   135a0:	movw	r1, #32108	; 0x7d6c
   135a4:	add	r0, sp, #7
   135a8:	movt	r1, #1
   135ac:	bl	110bc <strcmp@plt>
   135b0:	mov	r4, r0
   135b4:	cmp	r0, #0
   135b8:	movwne	r4, #1
   135bc:	mov	r0, r4
   135c0:	sub	sp, fp, #8
   135c4:	pop	{r4, sl, fp, pc}
   135c8:	mov	r1, #0
   135cc:	str	r1, [r0]
   135d0:	str	r1, [r0, #4]
   135d4:	str	r1, [r0, #8]
   135d8:	bx	lr
   135dc:	mov	r2, #10
   135e0:	b	135e4 <__assert_fail@plt+0x2294>
   135e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135e8:	add	fp, sp, #28
   135ec:	sub	sp, sp, #4
   135f0:	ldr	r5, [r0]
   135f4:	ldr	r6, [r0, #8]
   135f8:	mov	r4, r0
   135fc:	mov	r0, r1
   13600:	mov	sl, r2
   13604:	mov	r8, r1
   13608:	bl	1132c <feof_unlocked@plt>
   1360c:	cmp	r0, #0
   13610:	beq	1361c <__assert_fail@plt+0x22cc>
   13614:	mov	r4, #0
   13618:	b	136b0 <__assert_fail@plt+0x2360>
   1361c:	add	r9, r6, r5
   13620:	mov	r7, r6
   13624:	mov	r0, r8
   13628:	bl	11128 <getc_unlocked@plt>
   1362c:	mov	r5, r0
   13630:	cmn	r0, #1
   13634:	bne	13660 <__assert_fail@plt+0x2310>
   13638:	cmp	r7, r6
   1363c:	beq	13614 <__assert_fail@plt+0x22c4>
   13640:	mov	r0, r8
   13644:	bl	11188 <ferror_unlocked@plt>
   13648:	cmp	r0, #0
   1364c:	bne	13614 <__assert_fail@plt+0x22c4>
   13650:	ldrb	r0, [r7, #-1]
   13654:	mov	r5, sl
   13658:	cmp	r0, sl
   1365c:	beq	136a8 <__assert_fail@plt+0x2358>
   13660:	cmp	r7, r9
   13664:	bne	1369c <__assert_fail@plt+0x234c>
   13668:	ldr	r7, [r4]
   1366c:	mov	r0, #1
   13670:	mov	r1, r4
   13674:	mov	r2, #1
   13678:	mvn	r3, #0
   1367c:	str	r0, [sp]
   13680:	mov	r0, r6
   13684:	bl	15910 <__assert_fail@plt+0x45c0>
   13688:	str	r0, [r4, #8]
   1368c:	mov	r6, r0
   13690:	add	r7, r0, r7
   13694:	ldr	r0, [r4]
   13698:	add	r9, r6, r0
   1369c:	strb	r5, [r7], #1
   136a0:	cmp	r5, sl
   136a4:	bne	13624 <__assert_fail@plt+0x22d4>
   136a8:	sub	r0, r7, r6
   136ac:	str	r0, [r4, #4]
   136b0:	mov	r0, r4
   136b4:	sub	sp, fp, #28
   136b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136bc:	ldr	r0, [r0, #8]
   136c0:	b	13498 <__assert_fail@plt+0x2148>
   136c4:	push	{r4, r5, r6, sl, fp, lr}
   136c8:	add	fp, sp, #16
   136cc:	cmp	r2, #0
   136d0:	beq	13710 <__assert_fail@plt+0x23c0>
   136d4:	mov	r4, r2
   136d8:	mov	r5, r1
   136dc:	mov	r6, r0
   136e0:	bl	111dc <__ctype_toupper_loc@plt>
   136e4:	ldr	r1, [r0]
   136e8:	mov	r2, #0
   136ec:	ldrb	r0, [r5, r2]
   136f0:	ldrb	r3, [r6, r2]
   136f4:	ldr	r0, [r1, r0, lsl #2]
   136f8:	ldr	r3, [r1, r3, lsl #2]
   136fc:	subs	r0, r3, r0
   13700:	popne	{r4, r5, r6, sl, fp, pc}
   13704:	add	r2, r2, #1
   13708:	cmp	r2, r4
   1370c:	bcc	136ec <__assert_fail@plt+0x239c>
   13710:	mov	r0, #0
   13714:	pop	{r4, r5, r6, sl, fp, pc}
   13718:	push	{r4, r5, fp, lr}
   1371c:	add	fp, sp, #8
   13720:	cmp	r0, #0
   13724:	beq	137b8 <__assert_fail@plt+0x2468>
   13728:	mov	r1, #47	; 0x2f
   1372c:	mov	r4, r0
   13730:	bl	112cc <strrchr@plt>
   13734:	cmp	r0, #0
   13738:	mov	r5, r4
   1373c:	addne	r5, r0, #1
   13740:	sub	r0, r5, r4
   13744:	cmp	r0, #7
   13748:	blt	1379c <__assert_fail@plt+0x244c>
   1374c:	movw	r1, #32170	; 0x7daa
   13750:	sub	r0, r5, #7
   13754:	mov	r2, #7
   13758:	movt	r1, #1
   1375c:	bl	11314 <strncmp@plt>
   13760:	cmp	r0, #0
   13764:	bne	1379c <__assert_fail@plt+0x244c>
   13768:	movw	r1, #32178	; 0x7db2
   1376c:	mov	r0, r5
   13770:	mov	r2, #3
   13774:	movt	r1, #1
   13778:	bl	11314 <strncmp@plt>
   1377c:	cmp	r0, #0
   13780:	beq	1378c <__assert_fail@plt+0x243c>
   13784:	mov	r4, r5
   13788:	b	1379c <__assert_fail@plt+0x244c>
   1378c:	movw	r0, #37216	; 0x9160
   13790:	add	r4, r5, #3
   13794:	movt	r0, #2
   13798:	str	r4, [r0]
   1379c:	movw	r0, #37220	; 0x9164
   137a0:	movt	r0, #2
   137a4:	str	r4, [r0]
   137a8:	movw	r0, #37376	; 0x9200
   137ac:	movt	r0, #2
   137b0:	str	r4, [r0]
   137b4:	pop	{r4, r5, fp, pc}
   137b8:	movw	r0, #37232	; 0x9170
   137bc:	movt	r0, #2
   137c0:	ldr	r1, [r0]
   137c4:	movw	r0, #32114	; 0x7d72
   137c8:	movt	r0, #1
   137cc:	bl	11308 <fputs@plt>
   137d0:	bl	11320 <abort@plt>
   137d4:	push	{r4, r5, r6, sl, fp, lr}
   137d8:	add	fp, sp, #16
   137dc:	mov	r4, r0
   137e0:	movw	r0, #37384	; 0x9208
   137e4:	movt	r0, #2
   137e8:	cmp	r4, #0
   137ec:	moveq	r4, r0
   137f0:	bl	1123c <__errno_location@plt>
   137f4:	ldr	r6, [r0]
   137f8:	mov	r5, r0
   137fc:	mov	r0, r4
   13800:	mov	r1, #48	; 0x30
   13804:	bl	15b00 <__assert_fail@plt+0x47b0>
   13808:	str	r6, [r5]
   1380c:	pop	{r4, r5, r6, sl, fp, pc}
   13810:	movw	r1, #37384	; 0x9208
   13814:	cmp	r0, #0
   13818:	movt	r1, #2
   1381c:	movne	r1, r0
   13820:	ldr	r0, [r1]
   13824:	bx	lr
   13828:	movw	r2, #37384	; 0x9208
   1382c:	cmp	r0, #0
   13830:	movt	r2, #2
   13834:	movne	r2, r0
   13838:	str	r1, [r2]
   1383c:	bx	lr
   13840:	movw	r3, #37384	; 0x9208
   13844:	cmp	r0, #0
   13848:	movt	r3, #2
   1384c:	movne	r3, r0
   13850:	ubfx	r0, r1, #5, #3
   13854:	and	r1, r1, #31
   13858:	add	r0, r3, r0, lsl #2
   1385c:	ldr	r3, [r0, #8]
   13860:	eor	r2, r2, r3, lsr r1
   13864:	and	r2, r2, #1
   13868:	eor	r2, r3, r2, lsl r1
   1386c:	str	r2, [r0, #8]
   13870:	mov	r0, #1
   13874:	and	r0, r0, r3, lsr r1
   13878:	bx	lr
   1387c:	movw	r2, #37384	; 0x9208
   13880:	cmp	r0, #0
   13884:	movt	r2, #2
   13888:	movne	r2, r0
   1388c:	ldr	r0, [r2, #4]
   13890:	str	r1, [r2, #4]
   13894:	bx	lr
   13898:	movw	r3, #37384	; 0x9208
   1389c:	cmp	r0, #0
   138a0:	movt	r3, #2
   138a4:	movne	r3, r0
   138a8:	cmp	r1, #0
   138ac:	mov	r0, #10
   138b0:	cmpne	r2, #0
   138b4:	str	r0, [r3]
   138b8:	bne	138c8 <__assert_fail@plt+0x2578>
   138bc:	push	{fp, lr}
   138c0:	mov	fp, sp
   138c4:	bl	11320 <abort@plt>
   138c8:	str	r1, [r3, #40]	; 0x28
   138cc:	str	r2, [r3, #44]	; 0x2c
   138d0:	bx	lr
   138d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138d8:	add	fp, sp, #28
   138dc:	sub	sp, sp, #20
   138e0:	mov	r7, r0
   138e4:	ldr	r0, [fp, #8]
   138e8:	movw	r5, #37384	; 0x9208
   138ec:	mov	r8, r3
   138f0:	mov	r9, r2
   138f4:	mov	sl, r1
   138f8:	movt	r5, #2
   138fc:	cmp	r0, #0
   13900:	movne	r5, r0
   13904:	bl	1123c <__errno_location@plt>
   13908:	mov	r4, r0
   1390c:	ldm	r5, {r0, r1}
   13910:	ldr	r2, [r5, #40]	; 0x28
   13914:	ldr	r3, [r5, #44]	; 0x2c
   13918:	add	r5, r5, #8
   1391c:	ldr	r6, [r4]
   13920:	stm	sp, {r0, r1, r5}
   13924:	str	r2, [sp, #12]
   13928:	str	r3, [sp, #16]
   1392c:	mov	r0, r7
   13930:	mov	r1, sl
   13934:	mov	r2, r9
   13938:	mov	r3, r8
   1393c:	bl	1394c <__assert_fail@plt+0x25fc>
   13940:	str	r6, [r4]
   13944:	sub	sp, fp, #28
   13948:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1394c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13950:	add	fp, sp, #28
   13954:	sub	sp, sp, #156	; 0x9c
   13958:	str	r0, [fp, #-56]	; 0xffffffc8
   1395c:	ldr	r0, [fp, #12]
   13960:	mov	r4, r1
   13964:	str	r3, [sp, #80]	; 0x50
   13968:	str	r2, [fp, #-84]	; 0xffffffac
   1396c:	and	r1, r0, #4
   13970:	str	r1, [sp, #24]
   13974:	and	r1, r0, #1
   13978:	str	r1, [sp, #28]
   1397c:	ubfx	r7, r0, #1, #1
   13980:	bl	11170 <__ctype_get_mb_cur_max@plt>
   13984:	str	r0, [sp, #32]
   13988:	ldr	r0, [fp, #24]
   1398c:	ldr	r9, [fp, #8]
   13990:	mov	r2, #0
   13994:	mov	r1, #0
   13998:	mov	r5, #0
   1399c:	str	r2, [sp, #52]	; 0x34
   139a0:	mov	r2, #1
   139a4:	str	r0, [sp, #72]	; 0x48
   139a8:	ldr	r0, [fp, #20]
   139ac:	str	r0, [sp, #64]	; 0x40
   139b0:	mov	r0, #0
   139b4:	str	r0, [sp, #92]	; 0x5c
   139b8:	mov	r0, #0
   139bc:	str	r0, [fp, #-76]	; 0xffffffb4
   139c0:	mov	r0, #0
   139c4:	cmp	r9, #10
   139c8:	str	r1, [sp, #68]	; 0x44
   139cc:	bhi	149cc <__assert_fail@plt+0x367c>
   139d0:	add	r1, pc, #28
   139d4:	ldr	ip, [fp, #-84]	; 0xffffffac
   139d8:	ldr	lr, [sp, #80]	; 0x50
   139dc:	mov	r6, r4
   139e0:	mov	r8, #0
   139e4:	mov	r3, #1
   139e8:	mov	sl, #0
   139ec:	mov	r4, r2
   139f0:	ldr	pc, [r1, r9, lsl #2]
   139f4:	andeq	r3, r1, r4, asr #21
   139f8:	andeq	r3, r1, r0, lsl #22
   139fc:	ldrdeq	r3, [r1], -r4
   13a00:			; <UNDEFINED> instruction: 0x00013abc
   13a04:	strdeq	r3, [r1], -r4
   13a08:	andeq	r3, r1, ip, asr #22
   13a0c:	andeq	r3, r1, r4, ror #21
   13a10:	andeq	r3, r1, ip, lsr #23
   13a14:	andeq	r3, r1, r0, lsr #20
   13a18:	andeq	r3, r1, r0, lsr #20
   13a1c:	andeq	r3, r1, r8, asr #20
   13a20:	movw	r0, #32260	; 0x7e04
   13a24:	mov	r1, r9
   13a28:	movt	r0, #1
   13a2c:	bl	15134 <__assert_fail@plt+0x3de4>
   13a30:	str	r0, [sp, #64]	; 0x40
   13a34:	movw	r0, #32262	; 0x7e06
   13a38:	mov	r1, r9
   13a3c:	movt	r0, #1
   13a40:	bl	15134 <__assert_fail@plt+0x3de4>
   13a44:	str	r0, [sp, #72]	; 0x48
   13a48:	mov	r8, #0
   13a4c:	mov	sl, r7
   13a50:	tst	r7, #1
   13a54:	str	r5, [fp, #-48]	; 0xffffffd0
   13a58:	bne	13a94 <__assert_fail@plt+0x2744>
   13a5c:	ldr	r0, [sp, #64]	; 0x40
   13a60:	ldrb	r0, [r0]
   13a64:	cmp	r0, #0
   13a68:	beq	13a94 <__assert_fail@plt+0x2744>
   13a6c:	ldr	r1, [sp, #64]	; 0x40
   13a70:	mov	r8, #0
   13a74:	add	r1, r1, #1
   13a78:	cmp	r8, r6
   13a7c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   13a80:	strbcc	r0, [r2, r8]
   13a84:	ldrb	r0, [r1, r8]
   13a88:	add	r8, r8, #1
   13a8c:	cmp	r0, #0
   13a90:	bne	13a78 <__assert_fail@plt+0x2728>
   13a94:	ldr	r7, [sp, #72]	; 0x48
   13a98:	mov	r0, r7
   13a9c:	bl	11224 <strlen@plt>
   13aa0:	ldr	ip, [fp, #-84]	; 0xffffffac
   13aa4:	ldr	lr, [sp, #80]	; 0x50
   13aa8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13aac:	str	r0, [fp, #-76]	; 0xffffffb4
   13ab0:	str	r7, [sp, #92]	; 0x5c
   13ab4:	mov	r3, #1
   13ab8:	b	13bac <__assert_fail@plt+0x285c>
   13abc:	mov	r0, #1
   13ac0:	b	13b00 <__assert_fail@plt+0x27b0>
   13ac4:	mov	r9, #0
   13ac8:	mov	r8, #0
   13acc:	mov	r3, r0
   13ad0:	b	13ba8 <__assert_fail@plt+0x2858>
   13ad4:	tst	r7, #1
   13ad8:	bne	13b00 <__assert_fail@plt+0x27b0>
   13adc:	mov	r3, r0
   13ae0:	b	13b28 <__assert_fail@plt+0x27d8>
   13ae4:	mov	r0, #1
   13ae8:	mov	r8, #0
   13aec:	mov	r9, #5
   13af0:	b	13b60 <__assert_fail@plt+0x2810>
   13af4:	mov	r3, #1
   13af8:	tst	r7, #1
   13afc:	beq	13b28 <__assert_fail@plt+0x27d8>
   13b00:	mov	r1, #1
   13b04:	mov	r8, #0
   13b08:	mov	r9, #2
   13b0c:	mov	r3, r0
   13b10:	mov	sl, #1
   13b14:	str	r1, [fp, #-76]	; 0xffffffb4
   13b18:	movw	r1, #32262	; 0x7e06
   13b1c:	movt	r1, #1
   13b20:	str	r1, [sp, #92]	; 0x5c
   13b24:	b	13bac <__assert_fail@plt+0x285c>
   13b28:	cmp	r6, #0
   13b2c:	mov	r8, #1
   13b30:	mov	r9, #2
   13b34:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   13b38:	movne	r0, #39	; 0x27
   13b3c:	strbne	r0, [r1]
   13b40:	movw	r0, #32262	; 0x7e06
   13b44:	movt	r0, #1
   13b48:	b	13b9c <__assert_fail@plt+0x284c>
   13b4c:	mov	r9, #5
   13b50:	tst	r7, #1
   13b54:	beq	13b7c <__assert_fail@plt+0x282c>
   13b58:	mov	r0, #1
   13b5c:	mov	r8, #0
   13b60:	str	r0, [fp, #-76]	; 0xffffffb4
   13b64:	movw	r0, #32258	; 0x7e02
   13b68:	mov	r3, #1
   13b6c:	mov	sl, #1
   13b70:	movt	r0, #1
   13b74:	str	r0, [sp, #92]	; 0x5c
   13b78:	b	13bac <__assert_fail@plt+0x285c>
   13b7c:	cmp	r6, #0
   13b80:	mov	r8, #1
   13b84:	mov	r3, #1
   13b88:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   13b8c:	movne	r0, #34	; 0x22
   13b90:	strbne	r0, [r1]
   13b94:	movw	r0, #32258	; 0x7e02
   13b98:	movt	r0, #1
   13b9c:	str	r0, [sp, #92]	; 0x5c
   13ba0:	mov	r0, #1
   13ba4:	str	r0, [fp, #-76]	; 0xffffffb4
   13ba8:	mov	sl, #0
   13bac:	ldr	r0, [fp, #16]
   13bb0:	mov	r7, #0
   13bb4:	str	r9, [fp, #-64]	; 0xffffffc0
   13bb8:	str	sl, [fp, #-72]	; 0xffffffb8
   13bbc:	str	r3, [sp, #84]	; 0x54
   13bc0:	cmp	r0, #0
   13bc4:	movwne	r0, #1
   13bc8:	and	r0, r0, sl
   13bcc:	str	r0, [fp, #-88]	; 0xffffffa8
   13bd0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13bd4:	cmp	r0, #0
   13bd8:	movwne	r0, #1
   13bdc:	subs	r2, r9, #2
   13be0:	and	r1, r0, sl
   13be4:	str	r2, [fp, #-80]	; 0xffffffb0
   13be8:	and	r1, r3, r1
   13bec:	str	r1, [sp, #44]	; 0x2c
   13bf0:	clz	r1, r2
   13bf4:	lsr	r1, r1, #5
   13bf8:	and	r1, r1, sl
   13bfc:	str	r1, [sp, #56]	; 0x38
   13c00:	mov	r1, r2
   13c04:	eor	r2, sl, #1
   13c08:	movwne	r1, #1
   13c0c:	str	r2, [sp, #88]	; 0x58
   13c10:	orr	r2, r1, r2
   13c14:	and	r1, r1, r3
   13c18:	and	r0, r0, r1
   13c1c:	str	r2, [sp, #60]	; 0x3c
   13c20:	str	r1, [fp, #-68]	; 0xffffffbc
   13c24:	str	r0, [fp, #-60]	; 0xffffffc4
   13c28:	eor	r0, r3, #1
   13c2c:	str	r0, [sp, #48]	; 0x30
   13c30:	cmn	lr, #1
   13c34:	beq	13c44 <__assert_fail@plt+0x28f4>
   13c38:	cmp	r7, lr
   13c3c:	bne	13c50 <__assert_fail@plt+0x2900>
   13c40:	b	147fc <__assert_fail@plt+0x34ac>
   13c44:	ldrb	r0, [ip, r7]
   13c48:	cmp	r0, #0
   13c4c:	beq	14804 <__assert_fail@plt+0x34b4>
   13c50:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13c54:	mov	r9, #0
   13c58:	str	r5, [fp, #-48]	; 0xffffffd0
   13c5c:	str	r6, [fp, #-52]	; 0xffffffcc
   13c60:	cmp	r0, #0
   13c64:	beq	13ca4 <__assert_fail@plt+0x2954>
   13c68:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13c6c:	mov	r5, r4
   13c70:	add	r4, r7, r0
   13c74:	cmp	r0, #2
   13c78:	bcc	13c94 <__assert_fail@plt+0x2944>
   13c7c:	cmn	lr, #1
   13c80:	bne	13c94 <__assert_fail@plt+0x2944>
   13c84:	mov	r0, ip
   13c88:	bl	11224 <strlen@plt>
   13c8c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13c90:	mov	lr, r0
   13c94:	cmp	r4, lr
   13c98:	bls	13cac <__assert_fail@plt+0x295c>
   13c9c:	mov	r6, #0
   13ca0:	b	13cec <__assert_fail@plt+0x299c>
   13ca4:	mov	r6, #0
   13ca8:	b	13cf0 <__assert_fail@plt+0x29a0>
   13cac:	ldr	r1, [sp, #92]	; 0x5c
   13cb0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13cb4:	add	r0, ip, r7
   13cb8:	mov	r4, lr
   13cbc:	bl	1111c <memcmp@plt>
   13cc0:	ldr	r2, [sp, #88]	; 0x58
   13cc4:	cmp	r0, #0
   13cc8:	mov	r1, r0
   13ccc:	movwne	r1, #1
   13cd0:	orr	r1, r1, r2
   13cd4:	tst	r1, #1
   13cd8:	beq	14898 <__assert_fail@plt+0x3548>
   13cdc:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ce0:	clz	r0, r0
   13ce4:	mov	lr, r4
   13ce8:	lsr	r6, r0, #5
   13cec:	mov	r4, r5
   13cf0:	ldrb	r5, [ip, r7]
   13cf4:	cmp	r5, #126	; 0x7e
   13cf8:	bhi	140c0 <__assert_fail@plt+0x2d70>
   13cfc:	add	r3, pc, #16
   13d00:	mov	sl, #1
   13d04:	mov	r2, #110	; 0x6e
   13d08:	mov	r0, #97	; 0x61
   13d0c:	mov	r1, #0
   13d10:	ldr	pc, [r3, r5, lsl #2]
   13d14:	andeq	r3, r1, r4, lsr #31
   13d18:	andeq	r4, r1, r0, asr #1
   13d1c:	andeq	r4, r1, r0, asr #1
   13d20:	andeq	r4, r1, r0, asr #1
   13d24:	andeq	r4, r1, r0, asr #1
   13d28:	andeq	r4, r1, r0, asr #1
   13d2c:	andeq	r4, r1, r0, asr #1
   13d30:	andeq	r4, r1, r4, ror #2
   13d34:	andeq	r3, r1, r4, lsl #31
   13d38:	andeq	r3, r1, ip, ror pc
   13d3c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   13d40:	andeq	r4, r1, r4, lsl r0
   13d44:	andeq	r3, r1, r4, ror pc
   13d48:	andeq	r3, r1, ip, lsl #31
   13d4c:	andeq	r4, r1, r0, asr #1
   13d50:	andeq	r4, r1, r0, asr #1
   13d54:	andeq	r4, r1, r0, asr #1
   13d58:	andeq	r4, r1, r0, asr #1
   13d5c:	andeq	r4, r1, r0, asr #1
   13d60:	andeq	r4, r1, r0, asr #1
   13d64:	andeq	r4, r1, r0, asr #1
   13d68:	andeq	r4, r1, r0, asr #1
   13d6c:	andeq	r4, r1, r0, asr #1
   13d70:	andeq	r4, r1, r0, asr #1
   13d74:	andeq	r4, r1, r0, asr #1
   13d78:	andeq	r4, r1, r0, asr #1
   13d7c:	andeq	r4, r1, r0, asr #1
   13d80:	andeq	r4, r1, r0, asr #1
   13d84:	andeq	r4, r1, r0, asr #1
   13d88:	andeq	r4, r1, r0, asr #1
   13d8c:	andeq	r4, r1, r0, asr #1
   13d90:	andeq	r4, r1, r0, asr #1
   13d94:	andeq	r4, r1, r4, lsr #2
   13d98:	andeq	r4, r1, r8, lsr #2
   13d9c:	andeq	r4, r1, r8, lsr #2
   13da0:	andeq	r3, r1, r4, lsr #30
   13da4:	andeq	r4, r1, r8, lsr #2
   13da8:	andeq	r3, r1, r0, lsl pc
   13dac:	andeq	r4, r1, r8, lsr #2
   13db0:	andeq	r4, r1, ip, lsl r0
   13db4:	andeq	r4, r1, r8, lsr #2
   13db8:	andeq	r4, r1, r8, lsr #2
   13dbc:	andeq	r4, r1, r8, lsr #2
   13dc0:	andeq	r3, r1, r0, lsl pc
   13dc4:	andeq	r3, r1, r0, lsl pc
   13dc8:	andeq	r3, r1, r0, lsl pc
   13dcc:	andeq	r3, r1, r0, lsl pc
   13dd0:	andeq	r3, r1, r0, lsl pc
   13dd4:	andeq	r3, r1, r0, lsl pc
   13dd8:	andeq	r3, r1, r0, lsl pc
   13ddc:	andeq	r3, r1, r0, lsl pc
   13de0:	andeq	r3, r1, r0, lsl pc
   13de4:	andeq	r3, r1, r0, lsl pc
   13de8:	andeq	r3, r1, r0, lsl pc
   13dec:	andeq	r3, r1, r0, lsl pc
   13df0:	andeq	r3, r1, r0, lsl pc
   13df4:	andeq	r3, r1, r0, lsl pc
   13df8:	andeq	r3, r1, r0, lsl pc
   13dfc:	andeq	r3, r1, r0, lsl pc
   13e00:	andeq	r4, r1, r8, lsr #2
   13e04:	andeq	r4, r1, r8, lsr #2
   13e08:	andeq	r4, r1, r8, lsr #2
   13e0c:	andeq	r4, r1, r8, lsr #2
   13e10:	andeq	r3, r1, r8, ror #31
   13e14:	andeq	r4, r1, r0, asr #1
   13e18:	andeq	r3, r1, r0, lsl pc
   13e1c:	andeq	r3, r1, r0, lsl pc
   13e20:	andeq	r3, r1, r0, lsl pc
   13e24:	andeq	r3, r1, r0, lsl pc
   13e28:	andeq	r3, r1, r0, lsl pc
   13e2c:	andeq	r3, r1, r0, lsl pc
   13e30:	andeq	r3, r1, r0, lsl pc
   13e34:	andeq	r3, r1, r0, lsl pc
   13e38:	andeq	r3, r1, r0, lsl pc
   13e3c:	andeq	r3, r1, r0, lsl pc
   13e40:	andeq	r3, r1, r0, lsl pc
   13e44:	andeq	r3, r1, r0, lsl pc
   13e48:	andeq	r3, r1, r0, lsl pc
   13e4c:	andeq	r3, r1, r0, lsl pc
   13e50:	andeq	r3, r1, r0, lsl pc
   13e54:	andeq	r3, r1, r0, lsl pc
   13e58:	andeq	r3, r1, r0, lsl pc
   13e5c:	andeq	r3, r1, r0, lsl pc
   13e60:	andeq	r3, r1, r0, lsl pc
   13e64:	andeq	r3, r1, r0, lsl pc
   13e68:	andeq	r3, r1, r0, lsl pc
   13e6c:	andeq	r3, r1, r0, lsl pc
   13e70:	andeq	r3, r1, r0, lsl pc
   13e74:	andeq	r3, r1, r0, lsl pc
   13e78:	andeq	r3, r1, r0, lsl pc
   13e7c:	andeq	r3, r1, r0, lsl pc
   13e80:	andeq	r4, r1, r8, lsr #2
   13e84:	andeq	r3, r1, r0, asr pc
   13e88:	andeq	r3, r1, r0, lsl pc
   13e8c:	andeq	r4, r1, r8, lsr #2
   13e90:	andeq	r3, r1, r0, lsl pc
   13e94:	andeq	r4, r1, r8, lsr #2
   13e98:	andeq	r3, r1, r0, lsl pc
   13e9c:	andeq	r3, r1, r0, lsl pc
   13ea0:	andeq	r3, r1, r0, lsl pc
   13ea4:	andeq	r3, r1, r0, lsl pc
   13ea8:	andeq	r3, r1, r0, lsl pc
   13eac:	andeq	r3, r1, r0, lsl pc
   13eb0:	andeq	r3, r1, r0, lsl pc
   13eb4:	andeq	r3, r1, r0, lsl pc
   13eb8:	andeq	r3, r1, r0, lsl pc
   13ebc:	andeq	r3, r1, r0, lsl pc
   13ec0:	andeq	r3, r1, r0, lsl pc
   13ec4:	andeq	r3, r1, r0, lsl pc
   13ec8:	andeq	r3, r1, r0, lsl pc
   13ecc:	andeq	r3, r1, r0, lsl pc
   13ed0:	andeq	r3, r1, r0, lsl pc
   13ed4:	andeq	r3, r1, r0, lsl pc
   13ed8:	andeq	r3, r1, r0, lsl pc
   13edc:	andeq	r3, r1, r0, lsl pc
   13ee0:	andeq	r3, r1, r0, lsl pc
   13ee4:	andeq	r3, r1, r0, lsl pc
   13ee8:	andeq	r3, r1, r0, lsl pc
   13eec:	andeq	r3, r1, r0, lsl pc
   13ef0:	andeq	r3, r1, r0, lsl pc
   13ef4:	andeq	r3, r1, r0, lsl pc
   13ef8:	andeq	r3, r1, r0, lsl pc
   13efc:	andeq	r3, r1, r0, lsl pc
   13f00:	andeq	r3, r1, r4, lsr pc
   13f04:	andeq	r4, r1, r8, lsr #2
   13f08:	andeq	r3, r1, r4, lsr pc
   13f0c:	andeq	r3, r1, r4, lsr #30
   13f10:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13f14:	cmp	r0, #0
   13f18:	beq	14178 <__assert_fail@plt+0x2e28>
   13f1c:	ldr	r0, [fp, #16]
   13f20:	b	1417c <__assert_fail@plt+0x2e2c>
   13f24:	mov	sl, #0
   13f28:	cmp	r7, #0
   13f2c:	bne	14394 <__assert_fail@plt+0x3044>
   13f30:	b	14124 <__assert_fail@plt+0x2dd4>
   13f34:	mov	sl, #0
   13f38:	cmn	lr, #1
   13f3c:	beq	14110 <__assert_fail@plt+0x2dc0>
   13f40:	cmp	r7, #0
   13f44:	cmpeq	lr, #1
   13f48:	bne	14394 <__assert_fail@plt+0x3044>
   13f4c:	b	14124 <__assert_fail@plt+0x2dd4>
   13f50:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13f54:	cmp	r0, #2
   13f58:	bne	14148 <__assert_fail@plt+0x2df8>
   13f5c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13f60:	tst	r0, #1
   13f64:	bne	148b4 <__assert_fail@plt+0x3564>
   13f68:	mov	r9, #0
   13f6c:	mov	r0, #92	; 0x5c
   13f70:	b	1415c <__assert_fail@plt+0x2e0c>
   13f74:	mov	r0, #102	; 0x66
   13f78:	b	14164 <__assert_fail@plt+0x2e14>
   13f7c:	mov	r2, #116	; 0x74
   13f80:	b	13f90 <__assert_fail@plt+0x2c40>
   13f84:	mov	r0, #98	; 0x62
   13f88:	b	14164 <__assert_fail@plt+0x2e14>
   13f8c:	mov	r2, #114	; 0x72
   13f90:	ldr	r0, [sp, #60]	; 0x3c
   13f94:	tst	r0, #1
   13f98:	mov	r0, r2
   13f9c:	bne	14164 <__assert_fail@plt+0x2e14>
   13fa0:	b	148b4 <__assert_fail@plt+0x3564>
   13fa4:	ldr	r0, [sp, #84]	; 0x54
   13fa8:	tst	r0, #1
   13fac:	beq	14250 <__assert_fail@plt+0x2f00>
   13fb0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13fb4:	tst	r0, #1
   13fb8:	bne	149bc <__assert_fail@plt+0x366c>
   13fbc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13fc0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13fc4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13fc8:	cmp	r0, #2
   13fcc:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13fd0:	movwne	r0, #1
   13fd4:	orr	r0, r0, r3
   13fd8:	tst	r0, #1
   13fdc:	beq	146d0 <__assert_fail@plt+0x3380>
   13fe0:	mov	r0, r8
   13fe4:	b	14710 <__assert_fail@plt+0x33c0>
   13fe8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13fec:	mov	r9, #0
   13ff0:	mov	r5, #63	; 0x3f
   13ff4:	cmp	r0, #5
   13ff8:	beq	1439c <__assert_fail@plt+0x304c>
   13ffc:	cmp	r0, #2
   14000:	bne	1445c <__assert_fail@plt+0x310c>
   14004:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14008:	tst	r0, #1
   1400c:	beq	14460 <__assert_fail@plt+0x3110>
   14010:	b	148b4 <__assert_fail@plt+0x3564>
   14014:	mov	r0, #118	; 0x76
   14018:	b	14164 <__assert_fail@plt+0x2e14>
   1401c:	mov	r0, #1
   14020:	mov	r5, #39	; 0x27
   14024:	str	r0, [sp, #52]	; 0x34
   14028:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1402c:	cmp	r0, #2
   14030:	bne	140b8 <__assert_fail@plt+0x2d68>
   14034:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14038:	tst	r0, #1
   1403c:	bne	148b4 <__assert_fail@plt+0x3564>
   14040:	ldr	r3, [sp, #68]	; 0x44
   14044:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14048:	mov	r9, #0
   1404c:	clz	r1, r2
   14050:	cmp	r3, #0
   14054:	mov	r0, r3
   14058:	movwne	r0, #1
   1405c:	lsr	r1, r1, #5
   14060:	orrs	r0, r0, r1
   14064:	moveq	r3, r2
   14068:	moveq	r2, r0
   1406c:	cmp	r8, r2
   14070:	str	r3, [sp, #68]	; 0x44
   14074:	str	r2, [fp, #-52]	; 0xffffffcc
   14078:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   1407c:	movcc	r0, #39	; 0x27
   14080:	strbcc	r0, [r1, r8]
   14084:	add	r0, r8, #1
   14088:	cmp	r0, r2
   1408c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14090:	movcc	r1, #92	; 0x5c
   14094:	strbcc	r1, [r3, r0]
   14098:	add	r0, r8, #2
   1409c:	add	r8, r8, #3
   140a0:	cmp	r0, r2
   140a4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   140a8:	movcc	r1, #39	; 0x27
   140ac:	strbcc	r1, [r2, r0]
   140b0:	mov	r0, #0
   140b4:	str	r0, [fp, #-48]	; 0xffffffd0
   140b8:	mov	sl, #1
   140bc:	b	13f10 <__assert_fail@plt+0x2bc0>
   140c0:	ldr	r0, [sp, #32]
   140c4:	cmp	r0, #1
   140c8:	bne	14274 <__assert_fail@plt+0x2f24>
   140cc:	str	lr, [sp, #80]	; 0x50
   140d0:	bl	11200 <__ctype_b_loc@plt>
   140d4:	ldr	r0, [r0]
   140d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   140dc:	mov	r1, #1
   140e0:	add	r0, r0, r5, lsl #1
   140e4:	ldrb	r0, [r0, #1]
   140e8:	ubfx	sl, r0, #6, #1
   140ec:	ldr	r0, [sp, #48]	; 0x30
   140f0:	mov	r2, r1
   140f4:	cmp	r1, #1
   140f8:	orr	r0, sl, r0
   140fc:	bhi	14468 <__assert_fail@plt+0x3118>
   14100:	tst	r0, #1
   14104:	beq	14468 <__assert_fail@plt+0x3118>
   14108:	ldr	lr, [sp, #80]	; 0x50
   1410c:	b	13f10 <__assert_fail@plt+0x2bc0>
   14110:	cmp	r7, #0
   14114:	bne	14390 <__assert_fail@plt+0x3040>
   14118:	ldrb	r0, [ip, #1]
   1411c:	cmp	r0, #0
   14120:	bne	14390 <__assert_fail@plt+0x3040>
   14124:	mov	r1, #1
   14128:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1412c:	cmp	r0, #2
   14130:	bne	14140 <__assert_fail@plt+0x2df0>
   14134:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14138:	tst	r0, #1
   1413c:	bne	148b4 <__assert_fail@plt+0x3564>
   14140:	mov	sl, r1
   14144:	b	13f10 <__assert_fail@plt+0x2bc0>
   14148:	ldr	r1, [sp, #44]	; 0x2c
   1414c:	mov	r9, #0
   14150:	mov	r0, #92	; 0x5c
   14154:	cmp	r1, #0
   14158:	beq	14164 <__assert_fail@plt+0x2e14>
   1415c:	mov	sl, #0
   14160:	b	1467c <__assert_fail@plt+0x332c>
   14164:	ldr	r1, [sp, #84]	; 0x54
   14168:	mov	sl, #0
   1416c:	mov	r9, #0
   14170:	tst	r1, #1
   14174:	bne	141b0 <__assert_fail@plt+0x2e60>
   14178:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1417c:	cmp	r0, #0
   14180:	mov	r0, r5
   14184:	beq	141a8 <__assert_fail@plt+0x2e58>
   14188:	ldr	r1, [fp, #16]
   1418c:	ubfx	r0, r5, #5, #3
   14190:	mov	r2, #1
   14194:	ldr	r0, [r1, r0, lsl #2]
   14198:	and	r1, r5, #31
   1419c:	tst	r0, r2, lsl r1
   141a0:	mov	r0, r5
   141a4:	bne	141b0 <__assert_fail@plt+0x2e60>
   141a8:	cmp	r6, #0
   141ac:	beq	1467c <__assert_fail@plt+0x332c>
   141b0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   141b4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   141b8:	tst	r1, #1
   141bc:	bne	14890 <__assert_fail@plt+0x3540>
   141c0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   141c4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   141c8:	cmp	r1, #2
   141cc:	ldr	r1, [fp, #-80]	; 0xffffffb0
   141d0:	movwne	r1, #1
   141d4:	orr	r1, r1, r5
   141d8:	tst	r1, #1
   141dc:	bne	14220 <__assert_fail@plt+0x2ed0>
   141e0:	cmp	r8, r6
   141e4:	mov	r5, #1
   141e8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   141ec:	movcc	r1, #39	; 0x27
   141f0:	strbcc	r1, [r2, r8]
   141f4:	add	r1, r8, #1
   141f8:	cmp	r1, r6
   141fc:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14200:	movcc	r2, #36	; 0x24
   14204:	strbcc	r2, [r3, r1]
   14208:	add	r1, r8, #2
   1420c:	add	r8, r8, #3
   14210:	cmp	r1, r6
   14214:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14218:	movcc	r2, #39	; 0x27
   1421c:	strbcc	r2, [r3, r1]
   14220:	cmp	r8, r6
   14224:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14228:	movcc	r1, #92	; 0x5c
   1422c:	strbcc	r1, [r2, r8]
   14230:	add	r8, r8, #1
   14234:	cmp	r8, r6
   14238:	and	r4, r4, sl
   1423c:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   14240:	strbcc	r0, [r1, r8]
   14244:	add	r8, r8, #1
   14248:	add	r7, r7, #1
   1424c:	b	13c30 <__assert_fail@plt+0x28e0>
   14250:	ldr	r0, [sp, #28]
   14254:	mov	sl, #0
   14258:	mov	r9, #0
   1425c:	mov	r5, #0
   14260:	cmp	r0, #0
   14264:	beq	14178 <__assert_fail@plt+0x2e28>
   14268:	ldr	r6, [fp, #-52]	; 0xffffffcc
   1426c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14270:	b	14248 <__assert_fail@plt+0x2ef8>
   14274:	mov	r0, #0
   14278:	cmn	lr, #1
   1427c:	str	r6, [sp, #76]	; 0x4c
   14280:	str	r4, [sp, #20]
   14284:	str	r0, [fp, #-36]	; 0xffffffdc
   14288:	str	r0, [fp, #-40]	; 0xffffffd8
   1428c:	bne	142a0 <__assert_fail@plt+0x2f50>
   14290:	mov	r0, ip
   14294:	bl	11224 <strlen@plt>
   14298:	ldr	ip, [fp, #-84]	; 0xffffffac
   1429c:	mov	lr, r0
   142a0:	add	r0, ip, r7
   142a4:	mov	sl, #1
   142a8:	mov	r6, #0
   142ac:	sub	r4, fp, #40	; 0x28
   142b0:	str	lr, [sp, #80]	; 0x50
   142b4:	str	r0, [sp, #36]	; 0x24
   142b8:	str	r6, [sp, #40]	; 0x28
   142bc:	add	r6, r6, r7
   142c0:	sub	r0, fp, #44	; 0x2c
   142c4:	mov	r3, r4
   142c8:	add	r1, ip, r6
   142cc:	sub	r2, lr, r6
   142d0:	bl	16c48 <__assert_fail@plt+0x58f8>
   142d4:	cmp	r0, #0
   142d8:	beq	147e4 <__assert_fail@plt+0x3494>
   142dc:	cmn	r0, #1
   142e0:	beq	147a4 <__assert_fail@plt+0x3454>
   142e4:	ldr	lr, [sp, #80]	; 0x50
   142e8:	cmn	r0, #2
   142ec:	beq	147ac <__assert_fail@plt+0x345c>
   142f0:	ldr	r2, [sp, #56]	; 0x38
   142f4:	cmp	r0, #2
   142f8:	mov	r1, #0
   142fc:	movwcc	r1, #1
   14300:	eor	r2, r2, #1
   14304:	orrs	r1, r2, r1
   14308:	bne	14354 <__assert_fail@plt+0x3004>
   1430c:	ldr	r1, [sp, #40]	; 0x28
   14310:	ldr	r2, [sp, #36]	; 0x24
   14314:	add	ip, r2, r1
   14318:	mov	r2, #1
   1431c:	ldrb	r3, [ip, r2]
   14320:	sub	r6, r3, #94	; 0x5e
   14324:	cmp	r6, #30
   14328:	bhi	1433c <__assert_fail@plt+0x2fec>
   1432c:	mov	r4, #1
   14330:	mov	r1, #1073741829	; 0x40000005
   14334:	tst	r1, r4, lsl r6
   14338:	bne	148b0 <__assert_fail@plt+0x3560>
   1433c:	sub	r3, r3, #91	; 0x5b
   14340:	cmp	r3, #2
   14344:	bcc	148b0 <__assert_fail@plt+0x3560>
   14348:	add	r2, r2, #1
   1434c:	cmp	r2, r0
   14350:	bcc	1431c <__assert_fail@plt+0x2fcc>
   14354:	ldr	r6, [sp, #40]	; 0x28
   14358:	add	r6, r0, r6
   1435c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14360:	bl	11158 <iswprint@plt>
   14364:	cmp	r0, #0
   14368:	sub	r4, fp, #40	; 0x28
   1436c:	movwne	r0, #1
   14370:	and	sl, sl, r0
   14374:	mov	r0, r4
   14378:	bl	11104 <mbsinit@plt>
   1437c:	ldr	lr, [sp, #80]	; 0x50
   14380:	ldr	ip, [fp, #-84]	; 0xffffffac
   14384:	cmp	r0, #0
   14388:	beq	142b8 <__assert_fail@plt+0x2f68>
   1438c:	b	147ec <__assert_fail@plt+0x349c>
   14390:	mvn	lr, #0
   14394:	mov	r9, #0
   14398:	b	13f10 <__assert_fail@plt+0x2bc0>
   1439c:	ldr	r0, [sp, #24]
   143a0:	cmp	r0, #0
   143a4:	beq	1445c <__assert_fail@plt+0x310c>
   143a8:	add	r0, r7, #2
   143ac:	cmp	r0, lr
   143b0:	bcs	1445c <__assert_fail@plt+0x310c>
   143b4:	add	r1, ip, r7
   143b8:	ldrb	r1, [r1, #1]
   143bc:	cmp	r1, #63	; 0x3f
   143c0:	bne	1445c <__assert_fail@plt+0x310c>
   143c4:	ldrb	r5, [ip, r0]
   143c8:	sub	r1, r5, #33	; 0x21
   143cc:	cmp	r1, #29
   143d0:	bhi	1445c <__assert_fail@plt+0x310c>
   143d4:	movw	r3, #20929	; 0x51c1
   143d8:	mov	r2, #1
   143dc:	movt	r3, #14336	; 0x3800
   143e0:	tst	r3, r2, lsl r1
   143e4:	beq	1445c <__assert_fail@plt+0x310c>
   143e8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   143ec:	tst	r1, #1
   143f0:	bne	149c4 <__assert_fail@plt+0x3674>
   143f4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   143f8:	mov	r7, r0
   143fc:	cmp	r8, r1
   14400:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14404:	movcc	r1, #63	; 0x3f
   14408:	strbcc	r1, [r2, r8]
   1440c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14410:	add	r1, r8, #1
   14414:	cmp	r1, r2
   14418:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   1441c:	movcc	r2, #34	; 0x22
   14420:	strbcc	r2, [r3, r1]
   14424:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14428:	add	r1, r8, #2
   1442c:	cmp	r1, r2
   14430:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14434:	movcc	r2, #34	; 0x22
   14438:	strbcc	r2, [r3, r1]
   1443c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14440:	add	r1, r8, #3
   14444:	add	r8, r8, #4
   14448:	cmp	r1, r2
   1444c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14450:	movcc	r2, #63	; 0x3f
   14454:	strbcc	r2, [r3, r1]
   14458:	b	14460 <__assert_fail@plt+0x3110>
   1445c:	mov	r5, #63	; 0x3f
   14460:	mov	sl, #0
   14464:	b	13f10 <__assert_fail@plt+0x2bc0>
   14468:	str	r0, [sp, #40]	; 0x28
   1446c:	add	r0, r2, r7
   14470:	str	r6, [sp, #76]	; 0x4c
   14474:	add	r1, r7, #1
   14478:	ldr	lr, [sp, #80]	; 0x50
   1447c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14480:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14484:	mov	r3, #0
   14488:	str	r0, [sp, #36]	; 0x24
   1448c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14490:	b	14524 <__assert_fail@plt+0x31d4>
   14494:	str	r0, [sp, #76]	; 0x4c
   14498:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1449c:	cmp	r9, #0
   144a0:	movwne	r9, #1
   144a4:	mvn	r7, r0
   144a8:	orr	r7, r7, r9
   144ac:	tst	r7, #1
   144b0:	bne	14500 <__assert_fail@plt+0x31b0>
   144b4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   144b8:	cmp	r8, r6
   144bc:	bcs	144d4 <__assert_fail@plt+0x3184>
   144c0:	ldr	r7, [fp, #-56]	; 0xffffffc8
   144c4:	mov	r2, r4
   144c8:	mov	r4, #39	; 0x27
   144cc:	strb	r4, [r7, r8]
   144d0:	mov	r4, r2
   144d4:	add	r7, r8, #1
   144d8:	cmp	r7, r6
   144dc:	bcs	144f4 <__assert_fail@plt+0x31a4>
   144e0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   144e4:	mov	r2, r4
   144e8:	mov	r4, #39	; 0x27
   144ec:	strb	r4, [r0, r7]
   144f0:	mov	r4, r2
   144f4:	add	r8, r8, #2
   144f8:	mov	r0, #0
   144fc:	b	14508 <__assert_fail@plt+0x31b8>
   14500:	ldr	r6, [fp, #-52]	; 0xffffffcc
   14504:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14508:	cmp	r8, r6
   1450c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14510:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14514:	strbcc	r5, [r2, r8]
   14518:	add	r8, r8, #1
   1451c:	ldrb	r5, [ip, r1]
   14520:	add	r1, r1, #1
   14524:	ldr	r2, [sp, #40]	; 0x28
   14528:	tst	r2, #1
   1452c:	beq	14568 <__assert_fail@plt+0x3218>
   14530:	ldr	r2, [sp, #76]	; 0x4c
   14534:	str	r0, [fp, #-48]	; 0xffffffd0
   14538:	tst	r2, #1
   1453c:	beq	14560 <__assert_fail@plt+0x3210>
   14540:	cmp	r8, r6
   14544:	bcs	1455c <__assert_fail@plt+0x320c>
   14548:	ldr	r6, [fp, #-56]	; 0xffffffc8
   1454c:	mov	r2, r4
   14550:	mov	r4, #92	; 0x5c
   14554:	strb	r4, [r6, r8]
   14558:	mov	r4, r2
   1455c:	add	r8, r8, #1
   14560:	mov	r0, #0
   14564:	b	1465c <__assert_fail@plt+0x330c>
   14568:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1456c:	tst	r2, #1
   14570:	bne	148bc <__assert_fail@plt+0x356c>
   14574:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14578:	cmp	r7, #2
   1457c:	movwne	r3, #1
   14580:	orr	r3, r3, r0
   14584:	tst	r3, #1
   14588:	bne	145e4 <__assert_fail@plt+0x3294>
   1458c:	cmp	r8, r6
   14590:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14594:	movcc	r3, #39	; 0x27
   14598:	strbcc	r3, [r2, r8]
   1459c:	add	r3, r8, #1
   145a0:	cmp	r3, r6
   145a4:	bcs	145bc <__assert_fail@plt+0x326c>
   145a8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   145ac:	mov	r7, r4
   145b0:	mov	r4, #36	; 0x24
   145b4:	strb	r4, [r2, r3]
   145b8:	mov	r4, r7
   145bc:	add	r3, r8, #2
   145c0:	cmp	r3, r6
   145c4:	bcs	145dc <__assert_fail@plt+0x328c>
   145c8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   145cc:	mov	r7, r4
   145d0:	mov	r4, #39	; 0x27
   145d4:	strb	r4, [r2, r3]
   145d8:	mov	r4, r7
   145dc:	add	r8, r8, #3
   145e0:	mov	r0, #1
   145e4:	cmp	r8, r6
   145e8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   145ec:	movcc	r3, #92	; 0x5c
   145f0:	strbcc	r3, [r2, r8]
   145f4:	add	r3, r8, #1
   145f8:	cmp	r3, r6
   145fc:	bcs	1461c <__assert_fail@plt+0x32cc>
   14600:	mov	r2, r4
   14604:	and	r7, r5, #192	; 0xc0
   14608:	mov	r4, #48	; 0x30
   1460c:	orr	r7, r4, r7, lsr #6
   14610:	mov	r4, r2
   14614:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14618:	strb	r7, [r2, r3]
   1461c:	add	r3, r8, #2
   14620:	cmp	r3, r6
   14624:	bcs	14644 <__assert_fail@plt+0x32f4>
   14628:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1462c:	mov	r6, r4
   14630:	lsr	r7, r5, #3
   14634:	mov	r4, #6
   14638:	bfi	r7, r4, #3, #29
   1463c:	mov	r4, r6
   14640:	strb	r7, [r2, r3]
   14644:	str	r0, [fp, #-48]	; 0xffffffd0
   14648:	ldr	r0, [sp, #76]	; 0x4c
   1464c:	mov	r3, #6
   14650:	add	r8, r8, #3
   14654:	bfi	r5, r3, #3, #29
   14658:	mov	r3, #1
   1465c:	ldr	r2, [sp, #36]	; 0x24
   14660:	and	r9, r3, #1
   14664:	cmp	r2, r1
   14668:	bhi	14494 <__assert_fail@plt+0x3144>
   1466c:	cmp	r9, #0
   14670:	sub	r7, r1, #1
   14674:	mov	r0, r5
   14678:	movwne	r9, #1
   1467c:	cmp	r9, #0
   14680:	bne	146c4 <__assert_fail@plt+0x3374>
   14684:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14688:	ldr	r6, [fp, #-52]	; 0xffffffcc
   1468c:	tst	r5, #1
   14690:	beq	14234 <__assert_fail@plt+0x2ee4>
   14694:	cmp	r8, r6
   14698:	mov	r5, #0
   1469c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   146a0:	movcc	r1, #39	; 0x27
   146a4:	strbcc	r1, [r2, r8]
   146a8:	add	r1, r8, #1
   146ac:	add	r8, r8, #2
   146b0:	cmp	r1, r6
   146b4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   146b8:	movcc	r2, #39	; 0x27
   146bc:	strbcc	r2, [r3, r1]
   146c0:	b	14234 <__assert_fail@plt+0x2ee4>
   146c4:	ldr	r6, [fp, #-52]	; 0xffffffcc
   146c8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   146cc:	b	14234 <__assert_fail@plt+0x2ee4>
   146d0:	cmp	r8, r1
   146d4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   146d8:	movcc	r0, #39	; 0x27
   146dc:	strbcc	r0, [r2, r8]
   146e0:	add	r0, r8, #1
   146e4:	cmp	r0, r1
   146e8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   146ec:	movcc	r2, #36	; 0x24
   146f0:	strbcc	r2, [r3, r0]
   146f4:	add	r0, r8, #2
   146f8:	cmp	r0, r1
   146fc:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14700:	movcc	r2, #39	; 0x27
   14704:	strbcc	r2, [r3, r0]
   14708:	add	r0, r8, #3
   1470c:	mov	r3, #1
   14710:	cmp	r0, r1
   14714:	add	r8, r0, #1
   14718:	str	r3, [fp, #-48]	; 0xffffffd0
   1471c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   14720:	movcc	r1, #92	; 0x5c
   14724:	strbcc	r1, [r2, r0]
   14728:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1472c:	cmp	r1, #2
   14730:	beq	14794 <__assert_fail@plt+0x3444>
   14734:	add	r1, r7, #1
   14738:	mov	sl, #0
   1473c:	mov	r9, #1
   14740:	mov	r5, #48	; 0x30
   14744:	cmp	r1, lr
   14748:	bcs	13f10 <__assert_fail@plt+0x2bc0>
   1474c:	ldrb	r1, [ip, r1]
   14750:	sub	r1, r1, #48	; 0x30
   14754:	uxtb	r1, r1
   14758:	cmp	r1, #9
   1475c:	bhi	13f10 <__assert_fail@plt+0x2bc0>
   14760:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14764:	cmp	r8, r1
   14768:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1476c:	movcc	r1, #48	; 0x30
   14770:	strbcc	r1, [r2, r8]
   14774:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14778:	add	r1, r0, #2
   1477c:	add	r8, r0, #3
   14780:	cmp	r1, r2
   14784:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   14788:	movcc	r2, #48	; 0x30
   1478c:	strbcc	r2, [r3, r1]
   14790:	b	13f10 <__assert_fail@plt+0x2bc0>
   14794:	mov	r0, #48	; 0x30
   14798:	mov	r9, #1
   1479c:	mov	sl, #0
   147a0:	b	141a8 <__assert_fail@plt+0x2e58>
   147a4:	mov	sl, #0
   147a8:	b	147e4 <__assert_fail@plt+0x3494>
   147ac:	mov	sl, #0
   147b0:	cmp	lr, r6
   147b4:	bls	147e4 <__assert_fail@plt+0x3494>
   147b8:	ldr	ip, [fp, #-84]	; 0xffffffac
   147bc:	ldr	r6, [sp, #40]	; 0x28
   147c0:	ldr	r0, [sp, #36]	; 0x24
   147c4:	ldrb	r0, [r0, r6]
   147c8:	cmp	r0, #0
   147cc:	beq	147ec <__assert_fail@plt+0x349c>
   147d0:	add	r6, r6, #1
   147d4:	add	r0, r7, r6
   147d8:	cmp	r0, lr
   147dc:	bcc	147c0 <__assert_fail@plt+0x3470>
   147e0:	b	147ec <__assert_fail@plt+0x349c>
   147e4:	ldr	ip, [fp, #-84]	; 0xffffffac
   147e8:	ldr	r6, [sp, #40]	; 0x28
   147ec:	mov	r1, r6
   147f0:	ldr	r4, [sp, #20]
   147f4:	ldr	r6, [sp, #76]	; 0x4c
   147f8:	b	140ec <__assert_fail@plt+0x2d9c>
   147fc:	mov	lr, r7
   14800:	b	14808 <__assert_fail@plt+0x34b8>
   14804:	mvn	lr, #0
   14808:	ldr	r9, [fp, #-64]	; 0xffffffc0
   1480c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14810:	eor	r0, r9, #2
   14814:	orr	r0, r0, r8
   14818:	clz	r0, r0
   1481c:	lsr	r0, r0, #5
   14820:	tst	r1, r0
   14824:	bne	14920 <__assert_fail@plt+0x35d0>
   14828:	mov	r0, r1
   1482c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   14830:	cmp	r9, #2
   14834:	movwne	r1, #1
   14838:	orr	r0, r0, r1
   1483c:	tst	r0, #1
   14840:	bne	14960 <__assert_fail@plt+0x3610>
   14844:	ldr	r0, [sp, #52]	; 0x34
   14848:	ldr	r1, [sp, #68]	; 0x44
   1484c:	str	lr, [sp, #80]	; 0x50
   14850:	eor	r0, r0, #1
   14854:	tst	r0, #1
   14858:	bne	14960 <__assert_fail@plt+0x3610>
   1485c:	tst	r4, #1
   14860:	bne	14928 <__assert_fail@plt+0x35d8>
   14864:	mov	r7, #0
   14868:	cmp	r1, #0
   1486c:	beq	14958 <__assert_fail@plt+0x3608>
   14870:	ldr	r0, [sp, #84]	; 0x54
   14874:	mov	r3, #0
   14878:	cmp	r6, #0
   1487c:	mov	r2, #0
   14880:	mov	r4, r1
   14884:	str	r3, [fp, #-72]	; 0xffffffb8
   14888:	beq	139c4 <__assert_fail@plt+0x2674>
   1488c:	b	14960 <__assert_fail@plt+0x3610>
   14890:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14894:	b	148bc <__assert_fail@plt+0x356c>
   14898:	ldr	ip, [fp, #-84]	; 0xffffffac
   1489c:	mov	r2, #1
   148a0:	mov	lr, r4
   148a4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   148a8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   148ac:	b	148c0 <__assert_fail@plt+0x3570>
   148b0:	ldr	ip, [fp, #-84]	; 0xffffffac
   148b4:	mov	r7, #2
   148b8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   148bc:	ldr	r2, [sp, #84]	; 0x54
   148c0:	mov	r0, #0
   148c4:	ldr	r1, [fp, #12]
   148c8:	tst	r2, #1
   148cc:	mov	r2, r7
   148d0:	mov	r3, lr
   148d4:	str	r0, [sp, #8]
   148d8:	ldr	r0, [sp, #64]	; 0x40
   148dc:	movwne	r2, #4
   148e0:	cmp	r7, #2
   148e4:	movne	r2, r7
   148e8:	str	r2, [sp]
   148ec:	mov	r2, ip
   148f0:	bic	r1, r1, #2
   148f4:	str	r0, [sp, #12]
   148f8:	ldr	r0, [sp, #72]	; 0x48
   148fc:	str	r1, [sp, #4]
   14900:	mov	r1, r6
   14904:	str	r0, [sp, #16]
   14908:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1490c:	bl	1394c <__assert_fail@plt+0x25fc>
   14910:	mov	r8, r0
   14914:	mov	r0, r8
   14918:	sub	sp, fp, #28
   1491c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14920:	mov	r7, #2
   14924:	b	148bc <__assert_fail@plt+0x356c>
   14928:	mov	r0, #5
   1492c:	ldr	r2, [fp, #-84]	; 0xffffffac
   14930:	ldr	r3, [sp, #80]	; 0x50
   14934:	str	r0, [sp]
   14938:	ldr	r0, [fp, #12]
   1493c:	str	r0, [sp, #4]
   14940:	ldr	r0, [fp, #16]
   14944:	str	r0, [sp, #8]
   14948:	ldr	r0, [sp, #64]	; 0x40
   1494c:	str	r0, [sp, #12]
   14950:	ldr	r0, [sp, #72]	; 0x48
   14954:	b	14904 <__assert_fail@plt+0x35b4>
   14958:	mov	r0, #0
   1495c:	str	r0, [fp, #-72]	; 0xffffffb8
   14960:	ldr	r1, [sp, #92]	; 0x5c
   14964:	cmp	r1, #0
   14968:	beq	149a8 <__assert_fail@plt+0x3658>
   1496c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14970:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14974:	tst	r0, #1
   14978:	bne	149ac <__assert_fail@plt+0x365c>
   1497c:	ldrb	r0, [r1]
   14980:	cmp	r0, #0
   14984:	beq	149ac <__assert_fail@plt+0x365c>
   14988:	add	r1, r1, #1
   1498c:	cmp	r8, r6
   14990:	strbcc	r0, [r2, r8]
   14994:	add	r8, r8, #1
   14998:	ldrb	r0, [r1], #1
   1499c:	cmp	r0, #0
   149a0:	bne	1498c <__assert_fail@plt+0x363c>
   149a4:	b	149ac <__assert_fail@plt+0x365c>
   149a8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   149ac:	cmp	r8, r6
   149b0:	movcc	r0, #0
   149b4:	strbcc	r0, [r2, r8]
   149b8:	b	14914 <__assert_fail@plt+0x35c4>
   149bc:	mov	r2, #1
   149c0:	b	148a4 <__assert_fail@plt+0x3554>
   149c4:	mov	r7, #5
   149c8:	b	148b8 <__assert_fail@plt+0x3568>
   149cc:	bl	11320 <abort@plt>
   149d0:	mov	r3, r2
   149d4:	mov	r2, #0
   149d8:	b	149dc <__assert_fail@plt+0x368c>
   149dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149e0:	add	fp, sp, #28
   149e4:	sub	sp, sp, #36	; 0x24
   149e8:	movw	r8, #37384	; 0x9208
   149ec:	cmp	r3, #0
   149f0:	mov	r4, r2
   149f4:	str	r2, [sp, #24]
   149f8:	mov	r5, r1
   149fc:	mov	r6, r0
   14a00:	str	r0, [sp, #20]
   14a04:	movt	r8, #2
   14a08:	movne	r8, r3
   14a0c:	bl	1123c <__errno_location@plt>
   14a10:	str	r0, [sp, #28]
   14a14:	cmp	r4, #0
   14a18:	add	sl, r8, #8
   14a1c:	ldm	r8, {r3, r9}
   14a20:	ldr	r7, [r0]
   14a24:	ldr	r1, [r8, #40]	; 0x28
   14a28:	ldr	r2, [r8, #44]	; 0x2c
   14a2c:	mov	r0, #0
   14a30:	orreq	r9, r9, #1
   14a34:	str	r7, [sp, #32]
   14a38:	mov	r7, r5
   14a3c:	stm	sp, {r3, r9, sl}
   14a40:	str	r1, [sp, #12]
   14a44:	str	r2, [sp, #16]
   14a48:	mov	r1, #0
   14a4c:	mov	r2, r6
   14a50:	mov	r3, r5
   14a54:	bl	1394c <__assert_fail@plt+0x25fc>
   14a58:	add	r4, r0, #1
   14a5c:	mov	r5, r0
   14a60:	mov	r0, r4
   14a64:	bl	157e0 <__assert_fail@plt+0x4490>
   14a68:	mov	r6, r0
   14a6c:	ldr	r0, [r8]
   14a70:	ldr	r2, [r8, #44]	; 0x2c
   14a74:	ldr	r1, [r8, #40]	; 0x28
   14a78:	mov	r3, r7
   14a7c:	stm	sp, {r0, r9, sl}
   14a80:	str	r2, [sp, #16]
   14a84:	str	r1, [sp, #12]
   14a88:	mov	r0, r6
   14a8c:	mov	r1, r4
   14a90:	ldr	r2, [sp, #20]
   14a94:	bl	1394c <__assert_fail@plt+0x25fc>
   14a98:	ldr	r0, [sp, #24]
   14a9c:	ldr	r1, [sp, #32]
   14aa0:	ldr	r2, [sp, #28]
   14aa4:	cmp	r0, #0
   14aa8:	str	r1, [r2]
   14aac:	strne	r5, [r0]
   14ab0:	mov	r0, r6
   14ab4:	sub	sp, fp, #28
   14ab8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14abc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14ac0:	add	fp, sp, #24
   14ac4:	movw	r5, #37156	; 0x9124
   14ac8:	movw	r8, #37152	; 0x9120
   14acc:	movt	r5, #2
   14ad0:	movt	r8, #2
   14ad4:	ldr	r0, [r5]
   14ad8:	ldr	r4, [r8]
   14adc:	cmp	r0, #2
   14ae0:	blt	14b0c <__assert_fail@plt+0x37bc>
   14ae4:	add	r7, r4, #12
   14ae8:	mov	r6, #0
   14aec:	ldr	r0, [r7, r6, lsl #3]
   14af0:	bl	13498 <__assert_fail@plt+0x2148>
   14af4:	ldr	r1, [r5]
   14af8:	add	r2, r6, #2
   14afc:	add	r0, r6, #1
   14b00:	mov	r6, r0
   14b04:	cmp	r2, r1
   14b08:	blt	14aec <__assert_fail@plt+0x379c>
   14b0c:	ldr	r0, [r4, #4]
   14b10:	movw	r7, #37432	; 0x9238
   14b14:	movt	r7, #2
   14b18:	cmp	r0, r7
   14b1c:	beq	14b34 <__assert_fail@plt+0x37e4>
   14b20:	bl	13498 <__assert_fail@plt+0x2148>
   14b24:	movw	r0, #37160	; 0x9128
   14b28:	mov	r6, #256	; 0x100
   14b2c:	movt	r0, #2
   14b30:	strd	r6, [r0]
   14b34:	movw	r6, #37160	; 0x9128
   14b38:	movt	r6, #2
   14b3c:	cmp	r4, r6
   14b40:	beq	14b50 <__assert_fail@plt+0x3800>
   14b44:	mov	r0, r4
   14b48:	bl	13498 <__assert_fail@plt+0x2148>
   14b4c:	str	r6, [r8]
   14b50:	mov	r0, #1
   14b54:	str	r0, [r5]
   14b58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14b5c:	movw	r3, #37384	; 0x9208
   14b60:	mvn	r2, #0
   14b64:	movt	r3, #2
   14b68:	b	14b6c <__assert_fail@plt+0x381c>
   14b6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b70:	add	fp, sp, #28
   14b74:	sub	sp, sp, #44	; 0x2c
   14b78:	mov	r7, r3
   14b7c:	str	r2, [sp, #36]	; 0x24
   14b80:	str	r1, [sp, #32]
   14b84:	mov	r5, r0
   14b88:	bl	1123c <__errno_location@plt>
   14b8c:	cmp	r5, #0
   14b90:	blt	14cfc <__assert_fail@plt+0x39ac>
   14b94:	cmn	r5, #-2147483647	; 0x80000001
   14b98:	beq	14cfc <__assert_fail@plt+0x39ac>
   14b9c:	movw	r8, #37156	; 0x9124
   14ba0:	movw	r4, #37152	; 0x9120
   14ba4:	str	r0, [sp, #28]
   14ba8:	ldr	r0, [r0]
   14bac:	movt	r8, #2
   14bb0:	movt	r4, #2
   14bb4:	ldr	r1, [r8]
   14bb8:	ldr	r6, [r4]
   14bbc:	str	r0, [sp, #24]
   14bc0:	cmp	r1, r5
   14bc4:	ble	14bd0 <__assert_fail@plt+0x3880>
   14bc8:	mov	sl, r6
   14bcc:	b	14c38 <__assert_fail@plt+0x38e8>
   14bd0:	movw	r9, #37160	; 0x9128
   14bd4:	mov	r0, #8
   14bd8:	add	r2, r5, #1
   14bdc:	str	r1, [fp, #-32]	; 0xffffffe0
   14be0:	mvn	r3, #-2147483648	; 0x80000000
   14be4:	movt	r9, #2
   14be8:	str	r0, [sp]
   14bec:	sub	r2, r2, r1
   14bf0:	sub	r1, fp, #32
   14bf4:	subs	r0, r6, r9
   14bf8:	movne	r0, r6
   14bfc:	bl	15910 <__assert_fail@plt+0x45c0>
   14c00:	cmp	r6, r9
   14c04:	mov	sl, r0
   14c08:	str	r0, [r4]
   14c0c:	ldrdeq	r0, [r9]
   14c10:	stmeq	sl, {r0, r1}
   14c14:	ldr	r1, [r8]
   14c18:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14c1c:	add	r0, sl, r1, lsl #3
   14c20:	sub	r1, r2, r1
   14c24:	lsl	r2, r1, #3
   14c28:	mov	r1, #0
   14c2c:	bl	11254 <memset@plt>
   14c30:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14c34:	str	r0, [r8]
   14c38:	mov	r9, sl
   14c3c:	ldr	r6, [r9, r5, lsl #3]!
   14c40:	ldr	r4, [r9, #4]!
   14c44:	ldm	r7, {r0, r1}
   14c48:	ldr	r2, [r7, #40]	; 0x28
   14c4c:	ldr	r3, [r7, #44]	; 0x2c
   14c50:	orr	r8, r1, #1
   14c54:	add	r1, r7, #8
   14c58:	stm	sp, {r0, r8}
   14c5c:	add	r0, sp, #8
   14c60:	str	r1, [sp, #20]
   14c64:	stm	r0, {r1, r2, r3}
   14c68:	mov	r0, r4
   14c6c:	mov	r1, r6
   14c70:	ldr	r2, [sp, #32]
   14c74:	ldr	r3, [sp, #36]	; 0x24
   14c78:	bl	1394c <__assert_fail@plt+0x25fc>
   14c7c:	cmp	r6, r0
   14c80:	bhi	14ce4 <__assert_fail@plt+0x3994>
   14c84:	add	r6, r0, #1
   14c88:	movw	r0, #37432	; 0x9238
   14c8c:	movt	r0, #2
   14c90:	str	r6, [sl, r5, lsl #3]
   14c94:	cmp	r4, r0
   14c98:	beq	14ca4 <__assert_fail@plt+0x3954>
   14c9c:	mov	r0, r4
   14ca0:	bl	13498 <__assert_fail@plt+0x2148>
   14ca4:	mov	r0, r6
   14ca8:	bl	157e0 <__assert_fail@plt+0x4490>
   14cac:	str	r0, [r9]
   14cb0:	mov	r4, r0
   14cb4:	add	r3, sp, #8
   14cb8:	ldr	r0, [r7]
   14cbc:	ldr	r1, [r7, #40]	; 0x28
   14cc0:	ldr	r2, [r7, #44]	; 0x2c
   14cc4:	stm	sp, {r0, r8}
   14cc8:	ldr	r0, [sp, #20]
   14ccc:	stm	r3, {r0, r1, r2}
   14cd0:	mov	r0, r4
   14cd4:	mov	r1, r6
   14cd8:	ldr	r2, [sp, #32]
   14cdc:	ldr	r3, [sp, #36]	; 0x24
   14ce0:	bl	1394c <__assert_fail@plt+0x25fc>
   14ce4:	ldr	r0, [sp, #28]
   14ce8:	ldr	r1, [sp, #24]
   14cec:	str	r1, [r0]
   14cf0:	mov	r0, r4
   14cf4:	sub	sp, fp, #28
   14cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cfc:	bl	11320 <abort@plt>
   14d00:	movw	r3, #37384	; 0x9208
   14d04:	movt	r3, #2
   14d08:	b	14b6c <__assert_fail@plt+0x381c>
   14d0c:	movw	r3, #37384	; 0x9208
   14d10:	mov	r1, r0
   14d14:	mov	r0, #0
   14d18:	mvn	r2, #0
   14d1c:	movt	r3, #2
   14d20:	b	14b6c <__assert_fail@plt+0x381c>
   14d24:	movw	r3, #37384	; 0x9208
   14d28:	mov	r2, r1
   14d2c:	mov	r1, r0
   14d30:	mov	r0, #0
   14d34:	movt	r3, #2
   14d38:	b	14b6c <__assert_fail@plt+0x381c>
   14d3c:	push	{fp, lr}
   14d40:	mov	fp, sp
   14d44:	sub	sp, sp, #48	; 0x30
   14d48:	vmov.i32	q8, #0	; 0x00000000
   14d4c:	mov	ip, #32
   14d50:	mov	r3, sp
   14d54:	mov	lr, r2
   14d58:	cmp	r1, #10
   14d5c:	add	r2, r3, #16
   14d60:	vst1.64	{d16-d17}, [r3], ip
   14d64:	vst1.64	{d16-d17}, [r3]
   14d68:	vst1.64	{d16-d17}, [r2]
   14d6c:	beq	14d8c <__assert_fail@plt+0x3a3c>
   14d70:	str	r1, [sp]
   14d74:	mov	r3, sp
   14d78:	mov	r1, lr
   14d7c:	mvn	r2, #0
   14d80:	bl	14b6c <__assert_fail@plt+0x381c>
   14d84:	mov	sp, fp
   14d88:	pop	{fp, pc}
   14d8c:	bl	11320 <abort@plt>
   14d90:	push	{r4, sl, fp, lr}
   14d94:	add	fp, sp, #8
   14d98:	sub	sp, sp, #48	; 0x30
   14d9c:	mov	ip, r3
   14da0:	mov	r3, sp
   14da4:	vmov.i32	q8, #0	; 0x00000000
   14da8:	mov	lr, #32
   14dac:	cmp	r1, #10
   14db0:	add	r4, r3, #16
   14db4:	vst1.64	{d16-d17}, [r3], lr
   14db8:	vst1.64	{d16-d17}, [r3]
   14dbc:	vst1.64	{d16-d17}, [r4]
   14dc0:	beq	14de0 <__assert_fail@plt+0x3a90>
   14dc4:	str	r1, [sp]
   14dc8:	mov	r1, r2
   14dcc:	mov	r3, sp
   14dd0:	mov	r2, ip
   14dd4:	bl	14b6c <__assert_fail@plt+0x381c>
   14dd8:	sub	sp, fp, #8
   14ddc:	pop	{r4, sl, fp, pc}
   14de0:	bl	11320 <abort@plt>
   14de4:	mov	r2, r1
   14de8:	mov	r1, r0
   14dec:	mov	r0, #0
   14df0:	b	14d3c <__assert_fail@plt+0x39ec>
   14df4:	mov	r3, r2
   14df8:	mov	r2, r1
   14dfc:	mov	r1, r0
   14e00:	mov	r0, #0
   14e04:	b	14d90 <__assert_fail@plt+0x3a40>
   14e08:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14e0c:	add	fp, sp, #24
   14e10:	sub	sp, sp, #48	; 0x30
   14e14:	movw	r8, #37384	; 0x9208
   14e18:	mov	lr, r0
   14e1c:	mov	r3, sp
   14e20:	mov	ip, r1
   14e24:	movt	r8, #2
   14e28:	mov	r1, r3
   14e2c:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   14e30:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   14e34:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   14e38:	stm	r1, {r0, r4, r5, r6, r7, r9}
   14e3c:	ubfx	r0, r2, #5, #3
   14e40:	and	r2, r2, #31
   14e44:	mov	r4, #1
   14e48:	add	r0, r3, r0, lsl #2
   14e4c:	ldr	r1, [r0, #8]
   14e50:	bic	r4, r4, r1, lsr r2
   14e54:	eor	r1, r1, r4, lsl r2
   14e58:	mov	r2, ip
   14e5c:	str	r1, [r0, #8]
   14e60:	mov	r0, #0
   14e64:	mov	r1, lr
   14e68:	bl	14b6c <__assert_fail@plt+0x381c>
   14e6c:	sub	sp, fp, #24
   14e70:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14e74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e78:	add	fp, sp, #24
   14e7c:	sub	sp, sp, #48	; 0x30
   14e80:	movw	lr, #37384	; 0x9208
   14e84:	mov	ip, r0
   14e88:	mov	r3, sp
   14e8c:	movt	lr, #2
   14e90:	mov	r2, r3
   14e94:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   14e98:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   14e9c:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   14ea0:	stm	r2, {r0, r4, r5, r6, r7, r8}
   14ea4:	ubfx	r0, r1, #5, #3
   14ea8:	and	r1, r1, #31
   14eac:	mov	r7, #1
   14eb0:	add	r0, r3, r0, lsl #2
   14eb4:	ldr	r2, [r0, #8]
   14eb8:	bic	r7, r7, r2, lsr r1
   14ebc:	eor	r1, r2, r7, lsl r1
   14ec0:	mvn	r2, #0
   14ec4:	str	r1, [r0, #8]
   14ec8:	mov	r0, #0
   14ecc:	mov	r1, ip
   14ed0:	bl	14b6c <__assert_fail@plt+0x381c>
   14ed4:	sub	sp, fp, #24
   14ed8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14edc:	push	{r4, r5, r6, r7, fp, lr}
   14ee0:	add	fp, sp, #16
   14ee4:	sub	sp, sp, #48	; 0x30
   14ee8:	movw	lr, #37384	; 0x9208
   14eec:	mov	ip, r0
   14ef0:	mov	r3, sp
   14ef4:	movt	lr, #2
   14ef8:	mov	r2, r3
   14efc:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   14f00:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   14f04:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   14f08:	stm	r2, {r0, r1, r4, r5, r6, r7}
   14f0c:	mov	r1, ip
   14f10:	mvn	r2, #0
   14f14:	ldr	r0, [sp, #12]
   14f18:	orr	r0, r0, #67108864	; 0x4000000
   14f1c:	str	r0, [sp, #12]
   14f20:	mov	r0, #0
   14f24:	bl	14b6c <__assert_fail@plt+0x381c>
   14f28:	sub	sp, fp, #16
   14f2c:	pop	{r4, r5, r6, r7, fp, pc}
   14f30:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14f34:	add	fp, sp, #24
   14f38:	sub	sp, sp, #48	; 0x30
   14f3c:	movw	r8, #37384	; 0x9208
   14f40:	mov	ip, r1
   14f44:	mov	lr, r0
   14f48:	mov	r3, sp
   14f4c:	movt	r8, #2
   14f50:	mov	r2, r3
   14f54:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   14f58:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   14f5c:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   14f60:	stm	r2, {r0, r1, r4, r5, r6, r7}
   14f64:	mov	r1, lr
   14f68:	mov	r2, ip
   14f6c:	ldr	r0, [sp, #12]
   14f70:	orr	r0, r0, #67108864	; 0x4000000
   14f74:	str	r0, [sp, #12]
   14f78:	mov	r0, #0
   14f7c:	bl	14b6c <__assert_fail@plt+0x381c>
   14f80:	sub	sp, fp, #24
   14f84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f88:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14f8c:	add	fp, sp, #24
   14f90:	sub	sp, sp, #96	; 0x60
   14f94:	mov	lr, sp
   14f98:	vmov.i32	q8, #0	; 0x00000000
   14f9c:	mov	ip, r2
   14fa0:	cmp	r1, #10
   14fa4:	add	r3, lr, #16
   14fa8:	mov	r2, lr
   14fac:	vst1.64	{d16-d17}, [r3]
   14fb0:	mov	r3, #28
   14fb4:	vst1.64	{d16-d17}, [r2], r3
   14fb8:	vst1.32	{d16-d17}, [r2]
   14fbc:	beq	14ffc <__assert_fail@plt+0x3cac>
   14fc0:	str	r1, [sp, #48]	; 0x30
   14fc4:	add	r3, sp, #48	; 0x30
   14fc8:	ldm	lr!, {r2, r4, r5, r6, r7}
   14fcc:	add	r1, r3, #4
   14fd0:	stmia	r1!, {r2, r4, r5, r6, r7}
   14fd4:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   14fd8:	stm	r1, {r2, r4, r5, r6, r7, r8}
   14fdc:	mvn	r2, #0
   14fe0:	ldr	r1, [sp, #60]	; 0x3c
   14fe4:	orr	r1, r1, #67108864	; 0x4000000
   14fe8:	str	r1, [sp, #60]	; 0x3c
   14fec:	mov	r1, ip
   14ff0:	bl	14b6c <__assert_fail@plt+0x381c>
   14ff4:	sub	sp, fp, #24
   14ff8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ffc:	bl	11320 <abort@plt>
   15000:	push	{fp, lr}
   15004:	mov	fp, sp
   15008:	sub	sp, sp, #8
   1500c:	mvn	ip, #0
   15010:	str	ip, [sp]
   15014:	bl	15020 <__assert_fail@plt+0x3cd0>
   15018:	mov	sp, fp
   1501c:	pop	{fp, pc}
   15020:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15024:	add	fp, sp, #24
   15028:	sub	sp, sp, #48	; 0x30
   1502c:	movw	ip, #37384	; 0x9208
   15030:	mov	lr, r3
   15034:	mov	r3, sp
   15038:	cmp	r1, #0
   1503c:	movt	ip, #2
   15040:	cmpne	r2, #0
   15044:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   15048:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   1504c:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   15050:	stm	r3, {r4, r5, r6, r7, r8, r9}
   15054:	mov	r3, #10
   15058:	str	r3, [sp]
   1505c:	bne	15064 <__assert_fail@plt+0x3d14>
   15060:	bl	11320 <abort@plt>
   15064:	ldr	ip, [fp, #8]
   15068:	str	r2, [sp, #44]	; 0x2c
   1506c:	str	r1, [sp, #40]	; 0x28
   15070:	mov	r3, sp
   15074:	mov	r1, lr
   15078:	mov	r2, ip
   1507c:	bl	14b6c <__assert_fail@plt+0x381c>
   15080:	sub	sp, fp, #24
   15084:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15088:	push	{fp, lr}
   1508c:	mov	fp, sp
   15090:	sub	sp, sp, #8
   15094:	mov	r3, r2
   15098:	mov	r2, r1
   1509c:	mov	r1, r0
   150a0:	mvn	r0, #0
   150a4:	str	r0, [sp]
   150a8:	mov	r0, #0
   150ac:	bl	15020 <__assert_fail@plt+0x3cd0>
   150b0:	mov	sp, fp
   150b4:	pop	{fp, pc}
   150b8:	push	{fp, lr}
   150bc:	mov	fp, sp
   150c0:	sub	sp, sp, #8
   150c4:	mov	ip, r2
   150c8:	mov	r2, r1
   150cc:	mov	r1, r0
   150d0:	str	r3, [sp]
   150d4:	mov	r0, #0
   150d8:	mov	r3, ip
   150dc:	bl	15020 <__assert_fail@plt+0x3cd0>
   150e0:	mov	sp, fp
   150e4:	pop	{fp, pc}
   150e8:	movw	r3, #37168	; 0x9130
   150ec:	movt	r3, #2
   150f0:	b	14b6c <__assert_fail@plt+0x381c>
   150f4:	movw	r3, #37168	; 0x9130
   150f8:	mov	r2, r1
   150fc:	mov	r1, r0
   15100:	mov	r0, #0
   15104:	movt	r3, #2
   15108:	b	14b6c <__assert_fail@plt+0x381c>
   1510c:	movw	r3, #37168	; 0x9130
   15110:	mvn	r2, #0
   15114:	movt	r3, #2
   15118:	b	14b6c <__assert_fail@plt+0x381c>
   1511c:	movw	r3, #37168	; 0x9130
   15120:	mov	r1, r0
   15124:	mov	r0, #0
   15128:	mvn	r2, #0
   1512c:	movt	r3, #2
   15130:	b	14b6c <__assert_fail@plt+0x381c>
   15134:	push	{r4, r5, fp, lr}
   15138:	add	fp, sp, #8
   1513c:	mov	r5, r0
   15140:	mov	r4, r1
   15144:	mov	r0, #0
   15148:	mov	r2, #5
   1514c:	mov	r1, r5
   15150:	bl	11134 <dcgettext@plt>
   15154:	cmp	r0, r5
   15158:	popne	{r4, r5, fp, pc}
   1515c:	bl	16c10 <__assert_fail@plt+0x58c0>
   15160:	ldrb	r1, [r0]
   15164:	and	r1, r1, #223	; 0xdf
   15168:	cmp	r1, #71	; 0x47
   1516c:	beq	151d4 <__assert_fail@plt+0x3e84>
   15170:	cmp	r1, #85	; 0x55
   15174:	bne	151f8 <__assert_fail@plt+0x3ea8>
   15178:	ldrb	r1, [r0, #1]
   1517c:	and	r1, r1, #223	; 0xdf
   15180:	cmp	r1, #84	; 0x54
   15184:	bne	151f8 <__assert_fail@plt+0x3ea8>
   15188:	ldrb	r1, [r0, #2]
   1518c:	and	r1, r1, #223	; 0xdf
   15190:	cmp	r1, #70	; 0x46
   15194:	ldrbeq	r1, [r0, #3]
   15198:	cmpeq	r1, #45	; 0x2d
   1519c:	bne	151f8 <__assert_fail@plt+0x3ea8>
   151a0:	ldrb	r1, [r0, #4]
   151a4:	cmp	r1, #56	; 0x38
   151a8:	ldrbeq	r0, [r0, #5]
   151ac:	cmpeq	r0, #0
   151b0:	bne	151f8 <__assert_fail@plt+0x3ea8>
   151b4:	ldrb	r1, [r5]
   151b8:	movw	r2, #32264	; 0x7e08
   151bc:	movw	r0, #32268	; 0x7e0c
   151c0:	movt	r2, #1
   151c4:	movt	r0, #1
   151c8:	cmp	r1, #96	; 0x60
   151cc:	moveq	r0, r2
   151d0:	pop	{r4, r5, fp, pc}
   151d4:	ldrb	r1, [r0, #1]
   151d8:	and	r1, r1, #223	; 0xdf
   151dc:	cmp	r1, #66	; 0x42
   151e0:	bne	151f8 <__assert_fail@plt+0x3ea8>
   151e4:	ldrb	r1, [r0, #2]
   151e8:	cmp	r1, #49	; 0x31
   151ec:	ldrbeq	r1, [r0, #3]
   151f0:	cmpeq	r1, #56	; 0x38
   151f4:	beq	15214 <__assert_fail@plt+0x3ec4>
   151f8:	movw	r1, #32258	; 0x7e02
   151fc:	movw	r0, #32262	; 0x7e06
   15200:	cmp	r4, #9
   15204:	movt	r1, #1
   15208:	movt	r0, #1
   1520c:	moveq	r0, r1
   15210:	pop	{r4, r5, fp, pc}
   15214:	ldrb	r1, [r0, #4]
   15218:	cmp	r1, #48	; 0x30
   1521c:	ldrbeq	r1, [r0, #5]
   15220:	cmpeq	r1, #51	; 0x33
   15224:	bne	151f8 <__assert_fail@plt+0x3ea8>
   15228:	ldrb	r1, [r0, #6]
   1522c:	cmp	r1, #48	; 0x30
   15230:	ldrbeq	r0, [r0, #7]
   15234:	cmpeq	r0, #0
   15238:	bne	151f8 <__assert_fail@plt+0x3ea8>
   1523c:	ldrb	r1, [r5]
   15240:	movw	r2, #32272	; 0x7e10
   15244:	movw	r0, #32276	; 0x7e14
   15248:	movt	r2, #1
   1524c:	movt	r0, #1
   15250:	b	151c8 <__assert_fail@plt+0x3e78>
   15254:	push	{r4, r5, r6, r7, fp, lr}
   15258:	add	fp, sp, #16
   1525c:	mov	r4, r1
   15260:	mov	r1, #0
   15264:	mov	r6, r2
   15268:	bl	112c0 <setlocale@plt>
   1526c:	cmp	r0, #0
   15270:	beq	1529c <__assert_fail@plt+0x3f4c>
   15274:	mov	r7, r0
   15278:	bl	11224 <strlen@plt>
   1527c:	cmp	r0, r6
   15280:	bcs	152b0 <__assert_fail@plt+0x3f60>
   15284:	add	r2, r0, #1
   15288:	mov	r0, r4
   1528c:	mov	r1, r7
   15290:	bl	110f8 <memcpy@plt>
   15294:	mov	r5, #0
   15298:	b	152d8 <__assert_fail@plt+0x3f88>
   1529c:	cmp	r6, #0
   152a0:	mov	r5, #22
   152a4:	movne	r0, #0
   152a8:	strbne	r0, [r4]
   152ac:	b	152d8 <__assert_fail@plt+0x3f88>
   152b0:	mov	r5, #34	; 0x22
   152b4:	cmp	r6, #0
   152b8:	beq	152d8 <__assert_fail@plt+0x3f88>
   152bc:	sub	r6, r6, #1
   152c0:	mov	r0, r4
   152c4:	mov	r1, r7
   152c8:	mov	r2, r6
   152cc:	bl	110f8 <memcpy@plt>
   152d0:	mov	r0, #0
   152d4:	strb	r0, [r4, r6]
   152d8:	mov	r0, r5
   152dc:	pop	{r4, r5, r6, r7, fp, pc}
   152e0:	mov	r1, #0
   152e4:	b	112c0 <setlocale@plt>
   152e8:	mov	r1, #0
   152ec:	mov	r2, #3
   152f0:	b	16a38 <__assert_fail@plt+0x56e8>
   152f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   152f8:	add	fp, sp, #24
   152fc:	sub	sp, sp, #32
   15300:	ldr	r6, [fp, #12]
   15304:	ldr	r7, [fp, #8]
   15308:	mov	r4, r2
   1530c:	mov	r8, r0
   15310:	cmp	r1, #0
   15314:	beq	1533c <__assert_fail@plt+0x3fec>
   15318:	movw	r2, #32364	; 0x7e6c
   1531c:	mov	r5, r1
   15320:	str	r3, [sp, #4]
   15324:	str	r4, [sp]
   15328:	mov	r0, r8
   1532c:	mov	r1, #1
   15330:	movt	r2, #1
   15334:	mov	r3, r5
   15338:	b	15354 <__assert_fail@plt+0x4004>
   1533c:	movw	r2, #32376	; 0x7e78
   15340:	str	r3, [sp]
   15344:	mov	r0, r8
   15348:	mov	r1, #1
   1534c:	mov	r3, r4
   15350:	movt	r2, #1
   15354:	bl	11284 <__fprintf_chk@plt>
   15358:	movw	r1, #32383	; 0x7e7f
   1535c:	mov	r0, #0
   15360:	mov	r2, #5
   15364:	movt	r1, #1
   15368:	bl	11134 <dcgettext@plt>
   1536c:	movw	r2, #33101	; 0x814d
   15370:	mov	r3, r0
   15374:	movw	r0, #2022	; 0x7e6
   15378:	mov	r1, #1
   1537c:	str	r0, [sp]
   15380:	movt	r2, #1
   15384:	mov	r0, r8
   15388:	bl	11284 <__fprintf_chk@plt>
   1538c:	movw	r4, #31661	; 0x7bad
   15390:	mov	r1, r8
   15394:	movt	r4, #1
   15398:	mov	r0, r4
   1539c:	bl	110a4 <fputs_unlocked@plt>
   153a0:	movw	r1, #32387	; 0x7e83
   153a4:	mov	r0, #0
   153a8:	mov	r2, #5
   153ac:	movt	r1, #1
   153b0:	bl	11134 <dcgettext@plt>
   153b4:	movw	r3, #32558	; 0x7f2e
   153b8:	mov	r2, r0
   153bc:	mov	r0, r8
   153c0:	mov	r1, #1
   153c4:	movt	r3, #1
   153c8:	bl	11284 <__fprintf_chk@plt>
   153cc:	mov	r0, r4
   153d0:	mov	r1, r8
   153d4:	bl	110a4 <fputs_unlocked@plt>
   153d8:	cmp	r6, #9
   153dc:	bhi	15440 <__assert_fail@plt+0x40f0>
   153e0:	add	r0, pc, #0
   153e4:	ldr	pc, [r0, r6, lsl #2]
   153e8:	andeq	r5, r1, r8, lsl r6
   153ec:	andeq	r5, r1, r0, lsl r4
   153f0:	andeq	r5, r1, ip, asr #8
   153f4:	andeq	r5, r1, r4, ror r4
   153f8:	muleq	r1, ip, r4
   153fc:	andeq	r5, r1, r4, asr #9
   15400:	andeq	r5, r1, ip, ror #9
   15404:	andeq	r5, r1, r4, lsr #10
   15408:	andeq	r5, r1, r4, asr #11
   1540c:	andeq	r5, r1, ip, ror #10
   15410:	movw	r1, #32592	; 0x7f50
   15414:	mov	r0, #0
   15418:	mov	r2, #5
   1541c:	movt	r1, #1
   15420:	bl	11134 <dcgettext@plt>
   15424:	ldr	r3, [r7]
   15428:	mov	r2, r0
   1542c:	mov	r0, r8
   15430:	mov	r1, #1
   15434:	sub	sp, fp, #24
   15438:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1543c:	b	11284 <__fprintf_chk@plt>
   15440:	movw	r1, #32911	; 0x808f
   15444:	movt	r1, #1
   15448:	b	15574 <__assert_fail@plt+0x4224>
   1544c:	movw	r1, #32608	; 0x7f60
   15450:	mov	r0, #0
   15454:	mov	r2, #5
   15458:	movt	r1, #1
   1545c:	bl	11134 <dcgettext@plt>
   15460:	mov	r2, r0
   15464:	ldr	r3, [r7]
   15468:	ldr	r0, [r7, #4]
   1546c:	str	r0, [sp]
   15470:	b	15560 <__assert_fail@plt+0x4210>
   15474:	movw	r1, #32631	; 0x7f77
   15478:	mov	r0, #0
   1547c:	mov	r2, #5
   15480:	movt	r1, #1
   15484:	bl	11134 <dcgettext@plt>
   15488:	ldr	r3, [r7]
   1548c:	mov	r2, r0
   15490:	ldmib	r7, {r0, r1}
   15494:	stm	sp, {r0, r1}
   15498:	b	15560 <__assert_fail@plt+0x4210>
   1549c:	movw	r1, #32659	; 0x7f93
   154a0:	mov	r0, #0
   154a4:	mov	r2, #5
   154a8:	movt	r1, #1
   154ac:	bl	11134 <dcgettext@plt>
   154b0:	ldr	r3, [r7]
   154b4:	mov	r2, r0
   154b8:	ldmib	r7, {r0, r1, r7}
   154bc:	stm	sp, {r0, r1, r7}
   154c0:	b	15560 <__assert_fail@plt+0x4210>
   154c4:	movw	r1, #32691	; 0x7fb3
   154c8:	mov	r0, #0
   154cc:	mov	r2, #5
   154d0:	movt	r1, #1
   154d4:	bl	11134 <dcgettext@plt>
   154d8:	ldr	r3, [r7]
   154dc:	mov	r2, r0
   154e0:	ldmib	r7, {r0, r1, r6, r7}
   154e4:	stm	sp, {r0, r1, r6, r7}
   154e8:	b	15560 <__assert_fail@plt+0x4210>
   154ec:	movw	r1, #32727	; 0x7fd7
   154f0:	mov	r0, #0
   154f4:	mov	r2, #5
   154f8:	movt	r1, #1
   154fc:	bl	11134 <dcgettext@plt>
   15500:	ldr	r3, [r7]
   15504:	mov	r2, r0
   15508:	ldmib	r7, {r0, r1, r6}
   1550c:	ldr	r5, [r7, #16]
   15510:	ldr	r7, [r7, #20]
   15514:	stm	sp, {r0, r1, r6}
   15518:	str	r5, [sp, #12]
   1551c:	str	r7, [sp, #16]
   15520:	b	15560 <__assert_fail@plt+0x4210>
   15524:	movw	r1, #32767	; 0x7fff
   15528:	mov	r0, #0
   1552c:	mov	r2, #5
   15530:	movt	r1, #1
   15534:	bl	11134 <dcgettext@plt>
   15538:	ldr	r3, [r7]
   1553c:	mov	r2, r0
   15540:	ldmib	r7, {r0, r1, r6}
   15544:	ldr	r5, [r7, #16]
   15548:	ldr	r4, [r7, #20]
   1554c:	ldr	r7, [r7, #24]
   15550:	stm	sp, {r0, r1, r6}
   15554:	str	r5, [sp, #12]
   15558:	str	r4, [sp, #16]
   1555c:	str	r7, [sp, #20]
   15560:	mov	r0, r8
   15564:	mov	r1, #1
   15568:	b	15614 <__assert_fail@plt+0x42c4>
   1556c:	movw	r1, #32859	; 0x805b
   15570:	movt	r1, #1
   15574:	mov	r0, #0
   15578:	mov	r2, #5
   1557c:	bl	11134 <dcgettext@plt>
   15580:	mov	ip, r0
   15584:	ldr	r3, [r7]
   15588:	ldr	r0, [r7, #4]
   1558c:	ldr	r1, [r7, #8]
   15590:	ldr	r6, [r7, #12]
   15594:	ldr	r5, [r7, #16]
   15598:	ldr	r4, [r7, #20]
   1559c:	ldr	r2, [r7, #24]
   155a0:	ldr	lr, [r7, #28]
   155a4:	ldr	r7, [r7, #32]
   155a8:	stm	sp, {r0, r1, r6}
   155ac:	str	r5, [sp, #12]
   155b0:	str	r4, [sp, #16]
   155b4:	str	r2, [sp, #20]
   155b8:	str	lr, [sp, #24]
   155bc:	str	r7, [sp, #28]
   155c0:	b	15608 <__assert_fail@plt+0x42b8>
   155c4:	movw	r1, #32811	; 0x802b
   155c8:	mov	r0, #0
   155cc:	mov	r2, #5
   155d0:	movt	r1, #1
   155d4:	bl	11134 <dcgettext@plt>
   155d8:	mov	ip, r0
   155dc:	ldr	r3, [r7]
   155e0:	ldmib	r7, {r0, r1, r6}
   155e4:	ldr	r5, [r7, #16]
   155e8:	ldr	r4, [r7, #20]
   155ec:	ldr	r2, [r7, #24]
   155f0:	ldr	r7, [r7, #28]
   155f4:	stm	sp, {r0, r1, r6}
   155f8:	str	r5, [sp, #12]
   155fc:	str	r4, [sp, #16]
   15600:	str	r2, [sp, #20]
   15604:	str	r7, [sp, #24]
   15608:	mov	r0, r8
   1560c:	mov	r1, #1
   15610:	mov	r2, ip
   15614:	bl	11284 <__fprintf_chk@plt>
   15618:	sub	sp, fp, #24
   1561c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15620:	push	{r4, sl, fp, lr}
   15624:	add	fp, sp, #8
   15628:	sub	sp, sp, #8
   1562c:	ldr	ip, [fp, #8]
   15630:	mov	lr, #0
   15634:	ldr	r4, [ip, lr, lsl #2]
   15638:	add	lr, lr, #1
   1563c:	cmp	r4, #0
   15640:	bne	15634 <__assert_fail@plt+0x42e4>
   15644:	sub	r4, lr, #1
   15648:	str	ip, [sp]
   1564c:	str	r4, [sp, #4]
   15650:	bl	152f4 <__assert_fail@plt+0x3fa4>
   15654:	sub	sp, fp, #8
   15658:	pop	{r4, sl, fp, pc}
   1565c:	push	{r4, r5, fp, lr}
   15660:	add	fp, sp, #8
   15664:	sub	sp, sp, #48	; 0x30
   15668:	ldr	r4, [fp, #8]
   1566c:	mov	ip, #0
   15670:	add	lr, sp, #8
   15674:	ldr	r5, [r4]
   15678:	cmp	r5, #0
   1567c:	str	r5, [lr, ip, lsl #2]
   15680:	beq	15694 <__assert_fail@plt+0x4344>
   15684:	add	ip, ip, #1
   15688:	add	r4, r4, #4
   1568c:	cmp	ip, #10
   15690:	bcc	15674 <__assert_fail@plt+0x4324>
   15694:	str	lr, [sp]
   15698:	str	ip, [sp, #4]
   1569c:	bl	152f4 <__assert_fail@plt+0x3fa4>
   156a0:	sub	sp, fp, #8
   156a4:	pop	{r4, r5, fp, pc}
   156a8:	push	{fp, lr}
   156ac:	mov	fp, sp
   156b0:	sub	sp, sp, #8
   156b4:	add	ip, fp, #8
   156b8:	str	ip, [sp, #4]
   156bc:	str	ip, [sp]
   156c0:	bl	1565c <__assert_fail@plt+0x430c>
   156c4:	mov	sp, fp
   156c8:	pop	{fp, pc}
   156cc:	push	{fp, lr}
   156d0:	mov	fp, sp
   156d4:	movw	r0, #37244	; 0x917c
   156d8:	movt	r0, #2
   156dc:	ldr	r1, [r0]
   156e0:	movw	r0, #31661	; 0x7bad
   156e4:	movt	r0, #1
   156e8:	bl	110a4 <fputs_unlocked@plt>
   156ec:	movw	r1, #32971	; 0x80cb
   156f0:	mov	r0, #0
   156f4:	mov	r2, #5
   156f8:	movt	r1, #1
   156fc:	bl	11134 <dcgettext@plt>
   15700:	movw	r2, #32991	; 0x80df
   15704:	mov	r1, r0
   15708:	mov	r0, #1
   1570c:	movt	r2, #1
   15710:	bl	11260 <__printf_chk@plt>
   15714:	movw	r1, #33013	; 0x80f5
   15718:	mov	r0, #0
   1571c:	mov	r2, #5
   15720:	movt	r1, #1
   15724:	bl	11134 <dcgettext@plt>
   15728:	movw	r2, #31219	; 0x79f3
   1572c:	movw	r3, #31470	; 0x7aee
   15730:	mov	r1, r0
   15734:	mov	r0, #1
   15738:	movt	r2, #1
   1573c:	movt	r3, #1
   15740:	bl	11260 <__printf_chk@plt>
   15744:	movw	r1, #33033	; 0x8109
   15748:	mov	r0, #0
   1574c:	mov	r2, #5
   15750:	movt	r1, #1
   15754:	bl	11134 <dcgettext@plt>
   15758:	movw	r2, #33072	; 0x8130
   1575c:	mov	r1, r0
   15760:	mov	r0, #1
   15764:	movt	r2, #1
   15768:	pop	{fp, lr}
   1576c:	b	11260 <__printf_chk@plt>
   15770:	b	15774 <__assert_fail@plt+0x4424>
   15774:	push	{r4, r5, r6, sl, fp, lr}
   15778:	add	fp, sp, #16
   1577c:	mov	r4, r2
   15780:	mov	r5, r1
   15784:	mov	r6, r0
   15788:	bl	16e20 <__assert_fail@plt+0x5ad0>
   1578c:	cmp	r0, #0
   15790:	popne	{r4, r5, r6, sl, fp, pc}
   15794:	cmp	r6, #0
   15798:	beq	157ac <__assert_fail@plt+0x445c>
   1579c:	cmp	r5, #0
   157a0:	cmpne	r4, #0
   157a4:	bne	157ac <__assert_fail@plt+0x445c>
   157a8:	pop	{r4, r5, r6, sl, fp, pc}
   157ac:	bl	15c00 <__assert_fail@plt+0x48b0>
   157b0:	push	{fp, lr}
   157b4:	mov	fp, sp
   157b8:	bl	16938 <__assert_fail@plt+0x55e8>
   157bc:	cmp	r0, #0
   157c0:	popne	{fp, pc}
   157c4:	bl	15c00 <__assert_fail@plt+0x48b0>
   157c8:	push	{fp, lr}
   157cc:	mov	fp, sp
   157d0:	bl	16938 <__assert_fail@plt+0x55e8>
   157d4:	cmp	r0, #0
   157d8:	popne	{fp, pc}
   157dc:	bl	15c00 <__assert_fail@plt+0x48b0>
   157e0:	push	{fp, lr}
   157e4:	mov	fp, sp
   157e8:	bl	16938 <__assert_fail@plt+0x55e8>
   157ec:	cmp	r0, #0
   157f0:	popne	{fp, pc}
   157f4:	bl	15c00 <__assert_fail@plt+0x48b0>
   157f8:	push	{r4, r5, fp, lr}
   157fc:	add	fp, sp, #8
   15800:	mov	r4, r1
   15804:	mov	r5, r0
   15808:	bl	16968 <__assert_fail@plt+0x5618>
   1580c:	cmp	r0, #0
   15810:	popne	{r4, r5, fp, pc}
   15814:	cmp	r5, #0
   15818:	beq	15828 <__assert_fail@plt+0x44d8>
   1581c:	cmp	r4, #0
   15820:	bne	15828 <__assert_fail@plt+0x44d8>
   15824:	pop	{r4, r5, fp, pc}
   15828:	bl	15c00 <__assert_fail@plt+0x48b0>
   1582c:	push	{fp, lr}
   15830:	mov	fp, sp
   15834:	cmp	r1, #0
   15838:	orreq	r1, r1, #1
   1583c:	bl	16968 <__assert_fail@plt+0x5618>
   15840:	cmp	r0, #0
   15844:	popne	{fp, pc}
   15848:	bl	15c00 <__assert_fail@plt+0x48b0>
   1584c:	push	{fp, lr}
   15850:	mov	fp, sp
   15854:	clz	r3, r2
   15858:	lsr	ip, r3, #5
   1585c:	clz	r3, r1
   15860:	lsr	r3, r3, #5
   15864:	orrs	r3, r3, ip
   15868:	movwne	r1, #1
   1586c:	movwne	r2, #1
   15870:	bl	16e20 <__assert_fail@plt+0x5ad0>
   15874:	cmp	r0, #0
   15878:	popne	{fp, pc}
   1587c:	bl	15c00 <__assert_fail@plt+0x48b0>
   15880:	push	{fp, lr}
   15884:	mov	fp, sp
   15888:	mov	r2, r1
   1588c:	mov	r1, r0
   15890:	mov	r0, #0
   15894:	bl	16e20 <__assert_fail@plt+0x5ad0>
   15898:	cmp	r0, #0
   1589c:	popne	{fp, pc}
   158a0:	bl	15c00 <__assert_fail@plt+0x48b0>
   158a4:	mov	r2, r1
   158a8:	mov	r1, r0
   158ac:	mov	r0, #0
   158b0:	b	1584c <__assert_fail@plt+0x44fc>
   158b4:	mov	r2, #1
   158b8:	b	158bc <__assert_fail@plt+0x456c>
   158bc:	push	{r4, r5, fp, lr}
   158c0:	add	fp, sp, #8
   158c4:	ldr	r5, [r1]
   158c8:	mov	r4, r1
   158cc:	cmp	r0, #0
   158d0:	beq	158e8 <__assert_fail@plt+0x4598>
   158d4:	mov	r1, #1
   158d8:	add	r1, r1, r5, lsr #1
   158dc:	adds	r5, r5, r1
   158e0:	bcc	15900 <__assert_fail@plt+0x45b0>
   158e4:	bl	15c00 <__assert_fail@plt+0x48b0>
   158e8:	cmp	r5, #0
   158ec:	bne	15900 <__assert_fail@plt+0x45b0>
   158f0:	mov	r1, #64	; 0x40
   158f4:	cmp	r2, #64	; 0x40
   158f8:	udiv	r5, r1, r2
   158fc:	addhi	r5, r5, #1
   15900:	mov	r1, r5
   15904:	bl	15774 <__assert_fail@plt+0x4424>
   15908:	str	r5, [r4]
   1590c:	pop	{r4, r5, fp, pc}
   15910:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15914:	add	fp, sp, #24
   15918:	ldr	r6, [r1]
   1591c:	mov	r8, r1
   15920:	ldr	r4, [fp, #8]
   15924:	add	r1, r6, r6, asr #1
   15928:	cmp	r1, r6
   1592c:	mvnvs	r1, #-2147483648	; 0x80000000
   15930:	cmp	r1, r3
   15934:	mov	r5, r1
   15938:	movgt	r5, r3
   1593c:	cmn	r3, #1
   15940:	movle	r5, r1
   15944:	cmn	r4, #1
   15948:	ble	15968 <__assert_fail@plt+0x4618>
   1594c:	cmp	r4, #0
   15950:	beq	159bc <__assert_fail@plt+0x466c>
   15954:	cmn	r5, #1
   15958:	ble	15990 <__assert_fail@plt+0x4640>
   1595c:	mvn	r7, #-2147483648	; 0x80000000
   15960:	udiv	r1, r7, r4
   15964:	b	15984 <__assert_fail@plt+0x4634>
   15968:	cmn	r5, #1
   1596c:	ble	159ac <__assert_fail@plt+0x465c>
   15970:	cmn	r4, #1
   15974:	beq	159bc <__assert_fail@plt+0x466c>
   15978:	mov	r1, #-2147483648	; 0x80000000
   1597c:	mvn	r7, #-2147483648	; 0x80000000
   15980:	sdiv	r1, r1, r4
   15984:	cmp	r1, r5
   15988:	bge	159bc <__assert_fail@plt+0x466c>
   1598c:	b	159cc <__assert_fail@plt+0x467c>
   15990:	beq	159bc <__assert_fail@plt+0x466c>
   15994:	mov	r1, #-2147483648	; 0x80000000
   15998:	mvn	r7, #-2147483648	; 0x80000000
   1599c:	sdiv	r1, r1, r5
   159a0:	cmp	r1, r4
   159a4:	bge	159bc <__assert_fail@plt+0x466c>
   159a8:	b	159cc <__assert_fail@plt+0x467c>
   159ac:	mvn	r7, #-2147483648	; 0x80000000
   159b0:	sdiv	r1, r7, r4
   159b4:	cmp	r5, r1
   159b8:	blt	159cc <__assert_fail@plt+0x467c>
   159bc:	mul	r1, r5, r4
   159c0:	mov	r7, #64	; 0x40
   159c4:	cmp	r1, #63	; 0x3f
   159c8:	bgt	159d4 <__assert_fail@plt+0x4684>
   159cc:	sdiv	r5, r7, r4
   159d0:	mul	r1, r5, r4
   159d4:	cmp	r0, #0
   159d8:	moveq	r7, #0
   159dc:	streq	r7, [r8]
   159e0:	sub	r7, r5, r6
   159e4:	cmp	r7, r2
   159e8:	bge	15a8c <__assert_fail@plt+0x473c>
   159ec:	add	r5, r6, r2
   159f0:	mov	r2, #0
   159f4:	mov	r1, #0
   159f8:	cmp	r5, r3
   159fc:	movwgt	r2, #1
   15a00:	cmn	r3, #1
   15a04:	movwgt	r1, #1
   15a08:	cmp	r5, r6
   15a0c:	bvs	15a74 <__assert_fail@plt+0x4724>
   15a10:	ands	r1, r1, r2
   15a14:	bne	15a74 <__assert_fail@plt+0x4724>
   15a18:	cmn	r4, #1
   15a1c:	ble	15a3c <__assert_fail@plt+0x46ec>
   15a20:	cmp	r4, #0
   15a24:	beq	15a88 <__assert_fail@plt+0x4738>
   15a28:	cmn	r5, #1
   15a2c:	ble	15a60 <__assert_fail@plt+0x4710>
   15a30:	mvn	r1, #-2147483648	; 0x80000000
   15a34:	udiv	r1, r1, r4
   15a38:	b	15a54 <__assert_fail@plt+0x4704>
   15a3c:	cmn	r5, #1
   15a40:	ble	15a78 <__assert_fail@plt+0x4728>
   15a44:	cmn	r4, #1
   15a48:	beq	15a88 <__assert_fail@plt+0x4738>
   15a4c:	mov	r1, #-2147483648	; 0x80000000
   15a50:	sdiv	r1, r1, r4
   15a54:	cmp	r1, r5
   15a58:	bge	15a88 <__assert_fail@plt+0x4738>
   15a5c:	b	15a74 <__assert_fail@plt+0x4724>
   15a60:	beq	15a88 <__assert_fail@plt+0x4738>
   15a64:	mov	r1, #-2147483648	; 0x80000000
   15a68:	sdiv	r1, r1, r5
   15a6c:	cmp	r1, r4
   15a70:	bge	15a88 <__assert_fail@plt+0x4738>
   15a74:	bl	15c00 <__assert_fail@plt+0x48b0>
   15a78:	mvn	r1, #-2147483648	; 0x80000000
   15a7c:	sdiv	r1, r1, r4
   15a80:	cmp	r5, r1
   15a84:	blt	15a74 <__assert_fail@plt+0x4724>
   15a88:	mul	r1, r5, r4
   15a8c:	bl	157f8 <__assert_fail@plt+0x44a8>
   15a90:	str	r5, [r8]
   15a94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15a98:	push	{fp, lr}
   15a9c:	mov	fp, sp
   15aa0:	mov	r1, #1
   15aa4:	bl	168e4 <__assert_fail@plt+0x5594>
   15aa8:	cmp	r0, #0
   15aac:	popne	{fp, pc}
   15ab0:	bl	15c00 <__assert_fail@plt+0x48b0>
   15ab4:	push	{fp, lr}
   15ab8:	mov	fp, sp
   15abc:	bl	168e4 <__assert_fail@plt+0x5594>
   15ac0:	cmp	r0, #0
   15ac4:	popne	{fp, pc}
   15ac8:	bl	15c00 <__assert_fail@plt+0x48b0>
   15acc:	push	{fp, lr}
   15ad0:	mov	fp, sp
   15ad4:	mov	r1, #1
   15ad8:	bl	168e4 <__assert_fail@plt+0x5594>
   15adc:	cmp	r0, #0
   15ae0:	popne	{fp, pc}
   15ae4:	bl	15c00 <__assert_fail@plt+0x48b0>
   15ae8:	push	{fp, lr}
   15aec:	mov	fp, sp
   15af0:	bl	168e4 <__assert_fail@plt+0x5594>
   15af4:	cmp	r0, #0
   15af8:	popne	{fp, pc}
   15afc:	bl	15c00 <__assert_fail@plt+0x48b0>
   15b00:	push	{r4, r5, r6, sl, fp, lr}
   15b04:	add	fp, sp, #16
   15b08:	mov	r5, r0
   15b0c:	mov	r0, r1
   15b10:	mov	r4, r1
   15b14:	bl	16938 <__assert_fail@plt+0x55e8>
   15b18:	cmp	r0, #0
   15b1c:	beq	15b38 <__assert_fail@plt+0x47e8>
   15b20:	mov	r1, r5
   15b24:	mov	r2, r4
   15b28:	mov	r6, r0
   15b2c:	bl	110f8 <memcpy@plt>
   15b30:	mov	r0, r6
   15b34:	pop	{r4, r5, r6, sl, fp, pc}
   15b38:	bl	15c00 <__assert_fail@plt+0x48b0>
   15b3c:	push	{r4, r5, r6, sl, fp, lr}
   15b40:	add	fp, sp, #16
   15b44:	mov	r5, r0
   15b48:	mov	r0, r1
   15b4c:	mov	r4, r1
   15b50:	bl	16938 <__assert_fail@plt+0x55e8>
   15b54:	cmp	r0, #0
   15b58:	beq	15b74 <__assert_fail@plt+0x4824>
   15b5c:	mov	r1, r5
   15b60:	mov	r2, r4
   15b64:	mov	r6, r0
   15b68:	bl	110f8 <memcpy@plt>
   15b6c:	mov	r0, r6
   15b70:	pop	{r4, r5, r6, sl, fp, pc}
   15b74:	bl	15c00 <__assert_fail@plt+0x48b0>
   15b78:	push	{r4, r5, r6, sl, fp, lr}
   15b7c:	add	fp, sp, #16
   15b80:	mov	r5, r0
   15b84:	add	r0, r1, #1
   15b88:	mov	r4, r1
   15b8c:	bl	16938 <__assert_fail@plt+0x55e8>
   15b90:	cmp	r0, #0
   15b94:	beq	15bbc <__assert_fail@plt+0x486c>
   15b98:	mov	r6, r0
   15b9c:	mov	r0, #0
   15ba0:	mov	r1, r5
   15ba4:	mov	r2, r4
   15ba8:	strb	r0, [r6, r4]
   15bac:	mov	r0, r6
   15bb0:	bl	110f8 <memcpy@plt>
   15bb4:	mov	r0, r6
   15bb8:	pop	{r4, r5, r6, sl, fp, pc}
   15bbc:	bl	15c00 <__assert_fail@plt+0x48b0>
   15bc0:	push	{r4, r5, r6, sl, fp, lr}
   15bc4:	add	fp, sp, #16
   15bc8:	mov	r4, r0
   15bcc:	bl	11224 <strlen@plt>
   15bd0:	add	r5, r0, #1
   15bd4:	mov	r0, r5
   15bd8:	bl	16938 <__assert_fail@plt+0x55e8>
   15bdc:	cmp	r0, #0
   15be0:	beq	15bfc <__assert_fail@plt+0x48ac>
   15be4:	mov	r1, r4
   15be8:	mov	r2, r5
   15bec:	mov	r6, r0
   15bf0:	bl	110f8 <memcpy@plt>
   15bf4:	mov	r0, r6
   15bf8:	pop	{r4, r5, r6, sl, fp, pc}
   15bfc:	bl	15c00 <__assert_fail@plt+0x48b0>
   15c00:	push	{fp, lr}
   15c04:	mov	fp, sp
   15c08:	movw	r0, #37148	; 0x911c
   15c0c:	movw	r1, #33148	; 0x817c
   15c10:	mov	r2, #5
   15c14:	movt	r0, #2
   15c18:	movt	r1, #1
   15c1c:	ldr	r4, [r0]
   15c20:	mov	r0, #0
   15c24:	bl	11134 <dcgettext@plt>
   15c28:	movw	r2, #31826	; 0x7c52
   15c2c:	mov	r3, r0
   15c30:	mov	r0, r4
   15c34:	mov	r1, #0
   15c38:	movt	r2, #1
   15c3c:	bl	111a0 <error@plt>
   15c40:	bl	11320 <abort@plt>
   15c44:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15c48:	add	fp, sp, #24
   15c4c:	sub	sp, sp, #8
   15c50:	mov	r6, r3
   15c54:	mov	r4, r2
   15c58:	mov	r5, r1
   15c5c:	mov	r7, r0
   15c60:	bl	16ca8 <__assert_fail@plt+0x5958>
   15c64:	mov	r8, r0
   15c68:	bl	1123c <__errno_location@plt>
   15c6c:	ldr	r0, [r0]
   15c70:	cmp	r0, #0
   15c74:	beq	15c8c <__assert_fail@plt+0x493c>
   15c78:	mov	r1, r7
   15c7c:	mov	r2, r5
   15c80:	mov	r3, r4
   15c84:	str	r6, [sp]
   15c88:	bl	15c98 <__assert_fail@plt+0x4948>
   15c8c:	mov	r0, r8
   15c90:	sub	sp, fp, #24
   15c94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15c98:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15c9c:	add	fp, sp, #24
   15ca0:	sub	sp, sp, #8
   15ca4:	mov	r6, r1
   15ca8:	movw	r1, #33165	; 0x818d
   15cac:	mov	r5, r2
   15cb0:	mov	r7, r0
   15cb4:	mov	r0, #0
   15cb8:	mov	r2, #5
   15cbc:	mov	r8, r3
   15cc0:	movt	r1, #1
   15cc4:	bl	11134 <dcgettext@plt>
   15cc8:	mov	r2, r0
   15ccc:	mov	r0, #0
   15cd0:	mov	r1, r7
   15cd4:	bl	111a0 <error@plt>
   15cd8:	movw	r1, #33190	; 0x81a6
   15cdc:	mov	r0, #0
   15ce0:	mov	r2, #5
   15ce4:	movt	r1, #1
   15ce8:	bl	11134 <dcgettext@plt>
   15cec:	mov	r2, r0
   15cf0:	mov	r0, #0
   15cf4:	mov	r1, #0
   15cf8:	bl	111a0 <error@plt>
   15cfc:	movw	r0, #37148	; 0x911c
   15d00:	movw	r1, #33233	; 0x81d1
   15d04:	mov	r2, #5
   15d08:	movt	r0, #2
   15d0c:	movt	r1, #1
   15d10:	ldr	r7, [r0]
   15d14:	mov	r0, #0
   15d18:	bl	11134 <dcgettext@plt>
   15d1c:	mov	r4, r0
   15d20:	mov	r0, #0
   15d24:	mov	r1, #8
   15d28:	mov	r2, r6
   15d2c:	mov	r3, r5
   15d30:	bl	14d90 <__assert_fail@plt+0x3a40>
   15d34:	ldr	r3, [fp, #8]
   15d38:	mov	r5, r0
   15d3c:	mov	r0, #1
   15d40:	mov	r1, #8
   15d44:	mov	r2, r8
   15d48:	bl	14d90 <__assert_fail@plt+0x3a40>
   15d4c:	str	r0, [sp]
   15d50:	mov	r0, r7
   15d54:	mov	r1, #0
   15d58:	mov	r2, r4
   15d5c:	mov	r3, r5
   15d60:	bl	111a0 <error@plt>
   15d64:	sub	sp, fp, #24
   15d68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15d70:	add	fp, sp, #24
   15d74:	sub	sp, sp, #8
   15d78:	mov	r7, r3
   15d7c:	mov	r4, r2
   15d80:	mov	r6, r1
   15d84:	mov	r5, r0
   15d88:	bl	16dbc <__assert_fail@plt+0x5a6c>
   15d8c:	mov	r8, r0
   15d90:	bl	1123c <__errno_location@plt>
   15d94:	ldr	r0, [r0]
   15d98:	cmp	r0, #0
   15d9c:	beq	15db8 <__assert_fail@plt+0x4a68>
   15da0:	sub	r1, r7, #1
   15da4:	sub	r2, r6, #1
   15da8:	mov	r3, r4
   15dac:	str	r1, [sp]
   15db0:	mov	r1, r5
   15db4:	bl	15c98 <__assert_fail@plt+0x4948>
   15db8:	mov	r0, r8
   15dbc:	sub	sp, fp, #24
   15dc0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15dc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dc8:	add	fp, sp, #28
   15dcc:	sub	sp, sp, #12
   15dd0:	cmp	r2, #37	; 0x25
   15dd4:	bcs	1620c <__assert_fail@plt+0x4ebc>
   15dd8:	ldr	r9, [fp, #8]
   15ddc:	mov	r7, r2
   15de0:	mov	r6, r1
   15de4:	mov	r4, r0
   15de8:	str	r3, [sp, #4]
   15dec:	bl	1123c <__errno_location@plt>
   15df0:	mov	r5, r0
   15df4:	mov	r0, #0
   15df8:	str	r0, [r5]
   15dfc:	bl	11200 <__ctype_b_loc@plt>
   15e00:	ldr	r1, [r0]
   15e04:	mov	r2, r4
   15e08:	ldrb	r0, [r2], #1
   15e0c:	add	r3, r1, r0, lsl #1
   15e10:	ldrb	r3, [r3, #1]
   15e14:	tst	r3, #32
   15e18:	bne	15e08 <__assert_fail@plt+0x4ab8>
   15e1c:	add	r8, sp, #8
   15e20:	cmp	r6, #0
   15e24:	mov	sl, #4
   15e28:	movne	r8, r6
   15e2c:	cmp	r0, #45	; 0x2d
   15e30:	beq	16200 <__assert_fail@plt+0x4eb0>
   15e34:	mov	r0, r4
   15e38:	mov	r1, r8
   15e3c:	mov	r2, r7
   15e40:	bl	11218 <strtoul@plt>
   15e44:	ldr	r6, [r8]
   15e48:	cmp	r6, r4
   15e4c:	beq	15e70 <__assert_fail@plt+0x4b20>
   15e50:	mov	r7, r0
   15e54:	ldr	r0, [r5]
   15e58:	cmp	r0, #0
   15e5c:	beq	15e9c <__assert_fail@plt+0x4b4c>
   15e60:	cmp	r0, #34	; 0x22
   15e64:	bne	16200 <__assert_fail@plt+0x4eb0>
   15e68:	mov	sl, #1
   15e6c:	b	15ea0 <__assert_fail@plt+0x4b50>
   15e70:	cmp	r9, #0
   15e74:	ldrbne	r1, [r4]
   15e78:	cmpne	r1, #0
   15e7c:	beq	16200 <__assert_fail@plt+0x4eb0>
   15e80:	mov	r0, r9
   15e84:	bl	11230 <strchr@plt>
   15e88:	cmp	r0, #0
   15e8c:	beq	16200 <__assert_fail@plt+0x4eb0>
   15e90:	mov	r7, #1
   15e94:	mov	sl, #0
   15e98:	b	15ea8 <__assert_fail@plt+0x4b58>
   15e9c:	mov	sl, r0
   15ea0:	cmp	r9, #0
   15ea4:	beq	161f8 <__assert_fail@plt+0x4ea8>
   15ea8:	ldrb	r4, [r6]
   15eac:	cmp	r4, #0
   15eb0:	beq	161f8 <__assert_fail@plt+0x4ea8>
   15eb4:	mov	r0, r9
   15eb8:	mov	r1, r4
   15ebc:	bl	11230 <strchr@plt>
   15ec0:	cmp	r0, #0
   15ec4:	beq	16180 <__assert_fail@plt+0x4e30>
   15ec8:	sub	r0, r4, #69	; 0x45
   15ecc:	mov	r3, #1
   15ed0:	mov	r5, #1024	; 0x400
   15ed4:	cmp	r0, #21
   15ed8:	bhi	15ef0 <__assert_fail@plt+0x4ba0>
   15edc:	movw	r2, #35141	; 0x8945
   15ee0:	mov	r1, #1
   15ee4:	movt	r2, #48	; 0x30
   15ee8:	tst	r2, r1, lsl r0
   15eec:	bne	15f0c <__assert_fail@plt+0x4bbc>
   15ef0:	sub	r0, r4, #103	; 0x67
   15ef4:	cmp	r0, #13
   15ef8:	bhi	15f5c <__assert_fail@plt+0x4c0c>
   15efc:	mov	r1, #1
   15f00:	movw	r2, #8273	; 0x2051
   15f04:	tst	r2, r1, lsl r0
   15f08:	beq	15f5c <__assert_fail@plt+0x4c0c>
   15f0c:	mov	r0, r9
   15f10:	mov	r1, #48	; 0x30
   15f14:	bl	11230 <strchr@plt>
   15f18:	cmp	r0, #0
   15f1c:	beq	15f58 <__assert_fail@plt+0x4c08>
   15f20:	ldrb	r0, [r6, #1]
   15f24:	cmp	r0, #66	; 0x42
   15f28:	cmpne	r0, #68	; 0x44
   15f2c:	bne	15f3c <__assert_fail@plt+0x4bec>
   15f30:	mov	r3, #2
   15f34:	mov	r5, #1000	; 0x3e8
   15f38:	b	15f5c <__assert_fail@plt+0x4c0c>
   15f3c:	cmp	r0, #105	; 0x69
   15f40:	bne	15f58 <__assert_fail@plt+0x4c08>
   15f44:	ldrb	r0, [r6, #2]
   15f48:	mov	r3, #1
   15f4c:	cmp	r0, #66	; 0x42
   15f50:	movweq	r3, #3
   15f54:	b	15f5c <__assert_fail@plt+0x4c0c>
   15f58:	mov	r3, #1
   15f5c:	cmp	r4, #89	; 0x59
   15f60:	bgt	15fd0 <__assert_fail@plt+0x4c80>
   15f64:	sub	r0, r4, #66	; 0x42
   15f68:	cmp	r0, #14
   15f6c:	bhi	16044 <__assert_fail@plt+0x4cf4>
   15f70:	add	r1, pc, #0
   15f74:	ldr	pc, [r1, r0, lsl #2]
   15f78:			; <UNDEFINED> instruction: 0x00015fb4
   15f7c:	andeq	r6, r1, r0, lsl #3
   15f80:	andeq	r6, r1, r0, lsl #3
   15f84:	andeq	r6, r1, ip, lsl #3
   15f88:	andeq	r6, r1, r0, lsl #3
   15f8c:	andeq	r6, r1, r4, lsr #1
   15f90:	andeq	r6, r1, r0, lsl #3
   15f94:	andeq	r6, r1, r0, lsl #3
   15f98:	andeq	r6, r1, r0, lsl #3
   15f9c:	ldrdeq	r6, [r1], -r0
   15fa0:	andeq	r6, r1, r0, lsl #3
   15fa4:	strdeq	r6, [r1], -r4
   15fa8:	andeq	r6, r1, r0, lsl #3
   15fac:	andeq	r6, r1, r0, lsl #3
   15fb0:			; <UNDEFINED> instruction: 0x000161b8
   15fb4:	mov	r1, #0
   15fb8:	lsr	r0, r7, #22
   15fbc:	cmp	r1, r7, lsr #22
   15fc0:	lsl	r7, r7, #10
   15fc4:	movwne	r0, #1
   15fc8:	mvnne	r7, #0
   15fcc:	b	161e0 <__assert_fail@plt+0x4e90>
   15fd0:	cmp	r4, #115	; 0x73
   15fd4:	bgt	16080 <__assert_fail@plt+0x4d30>
   15fd8:	sub	r1, r4, #98	; 0x62
   15fdc:	cmp	r1, #11
   15fe0:	bhi	1614c <__assert_fail@plt+0x4dfc>
   15fe4:	add	r2, pc, #4
   15fe8:	mov	r0, #0
   15fec:	ldr	pc, [r2, r1, lsl #2]
   15ff0:	andeq	r6, r1, r0, lsr #32
   15ff4:	andeq	r6, r1, r0, ror #3
   15ff8:	andeq	r6, r1, r0, lsl #3
   15ffc:	andeq	r6, r1, r0, lsl #3
   16000:	andeq	r6, r1, r0, lsl #3
   16004:	andeq	r6, r1, r4, lsr #1
   16008:	andeq	r6, r1, r0, lsl #3
   1600c:	andeq	r6, r1, r0, lsl #3
   16010:	andeq	r6, r1, r0, lsl #3
   16014:	ldrdeq	r6, [r1], -r0
   16018:	andeq	r6, r1, r0, lsl #3
   1601c:	strdeq	r6, [r1], -r4
   16020:	movw	r0, #65535	; 0xffff
   16024:	movt	r0, #63	; 0x3f
   16028:	add	r1, r0, #4194304	; 0x400000
   1602c:	mov	r0, #0
   16030:	cmp	r7, r1
   16034:	lsl	r7, r7, #9
   16038:	movwhi	r0, #1
   1603c:	mvnhi	r7, #0
   16040:	b	161e0 <__assert_fail@plt+0x4e90>
   16044:	cmp	r4, #84	; 0x54
   16048:	beq	16120 <__assert_fail@plt+0x4dd0>
   1604c:	cmp	r4, #89	; 0x59
   16050:	bne	16180 <__assert_fail@plt+0x4e30>
   16054:	mvn	r0, #0
   16058:	mvn	r2, #7
   1605c:	udiv	r1, r0, r5
   16060:	mov	r0, #0
   16064:	cmp	r1, r7
   16068:	mul	r7, r7, r5
   1606c:	orrcc	r0, r0, #1
   16070:	mvncc	r7, #0
   16074:	adds	r2, r2, #1
   16078:	bne	16064 <__assert_fail@plt+0x4d14>
   1607c:	b	161e0 <__assert_fail@plt+0x4e90>
   16080:	cmp	r4, #116	; 0x74
   16084:	beq	16120 <__assert_fail@plt+0x4dd0>
   16088:	cmp	r4, #119	; 0x77
   1608c:	bne	16180 <__assert_fail@plt+0x4e30>
   16090:	lsl	r1, r7, #1
   16094:	cmp	r7, #0
   16098:	lsr	r0, r7, #31
   1609c:	mvnlt	r1, #0
   160a0:	b	160ec <__assert_fail@plt+0x4d9c>
   160a4:	mvn	r0, #0
   160a8:	mvn	r2, #2
   160ac:	udiv	r1, r0, r5
   160b0:	mov	r0, #0
   160b4:	cmp	r1, r7
   160b8:	mul	r7, r7, r5
   160bc:	orrcc	r0, r0, #1
   160c0:	mvncc	r7, #0
   160c4:	adds	r2, r2, #1
   160c8:	bne	160b4 <__assert_fail@plt+0x4d64>
   160cc:	b	161e0 <__assert_fail@plt+0x4e90>
   160d0:	mvn	r0, #0
   160d4:	mul	r1, r7, r5
   160d8:	udiv	r0, r0, r5
   160dc:	cmp	r0, r7
   160e0:	mov	r0, #0
   160e4:	mvncc	r1, #0
   160e8:	movwcc	r0, #1
   160ec:	mov	r7, r1
   160f0:	b	161e0 <__assert_fail@plt+0x4e90>
   160f4:	mvn	r0, #0
   160f8:	mvn	r2, #1
   160fc:	udiv	r1, r0, r5
   16100:	mov	r0, #0
   16104:	cmp	r1, r7
   16108:	mul	r7, r7, r5
   1610c:	orrcc	r0, r0, #1
   16110:	mvncc	r7, #0
   16114:	adds	r2, r2, #1
   16118:	bne	16104 <__assert_fail@plt+0x4db4>
   1611c:	b	161e0 <__assert_fail@plt+0x4e90>
   16120:	mvn	r0, #0
   16124:	mvn	r2, #3
   16128:	udiv	r1, r0, r5
   1612c:	mov	r0, #0
   16130:	cmp	r1, r7
   16134:	mul	r7, r7, r5
   16138:	orrcc	r0, r0, #1
   1613c:	mvncc	r7, #0
   16140:	adds	r2, r2, #1
   16144:	bne	16130 <__assert_fail@plt+0x4de0>
   16148:	b	161e0 <__assert_fail@plt+0x4e90>
   1614c:	cmp	r4, #90	; 0x5a
   16150:	bne	16180 <__assert_fail@plt+0x4e30>
   16154:	mvn	r0, #0
   16158:	mvn	r2, #6
   1615c:	udiv	r1, r0, r5
   16160:	mov	r0, #0
   16164:	cmp	r1, r7
   16168:	mul	r7, r7, r5
   1616c:	orrcc	r0, r0, #1
   16170:	mvncc	r7, #0
   16174:	adds	r2, r2, #1
   16178:	bne	16164 <__assert_fail@plt+0x4e14>
   1617c:	b	161e0 <__assert_fail@plt+0x4e90>
   16180:	ldr	r0, [sp, #4]
   16184:	orr	sl, sl, #2
   16188:	b	161fc <__assert_fail@plt+0x4eac>
   1618c:	mvn	r0, #0
   16190:	mvn	r2, #5
   16194:	udiv	r1, r0, r5
   16198:	mov	r0, #0
   1619c:	cmp	r1, r7
   161a0:	mul	r7, r7, r5
   161a4:	orrcc	r0, r0, #1
   161a8:	mvncc	r7, #0
   161ac:	adds	r2, r2, #1
   161b0:	bne	1619c <__assert_fail@plt+0x4e4c>
   161b4:	b	161e0 <__assert_fail@plt+0x4e90>
   161b8:	mvn	r0, #0
   161bc:	mvn	r2, #4
   161c0:	udiv	r1, r0, r5
   161c4:	mov	r0, #0
   161c8:	cmp	r1, r7
   161cc:	mul	r7, r7, r5
   161d0:	orrcc	r0, r0, #1
   161d4:	mvncc	r7, #0
   161d8:	adds	r2, r2, #1
   161dc:	bne	161c8 <__assert_fail@plt+0x4e78>
   161e0:	add	r1, r6, r3
   161e4:	orr	sl, r0, sl
   161e8:	str	r1, [r8]
   161ec:	ldrb	r1, [r6, r3]
   161f0:	cmp	r1, #0
   161f4:	orrne	sl, sl, #2
   161f8:	ldr	r0, [sp, #4]
   161fc:	str	r7, [r0]
   16200:	mov	r0, sl
   16204:	sub	sp, fp, #28
   16208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1620c:	movw	r0, #33270	; 0x81f6
   16210:	movw	r1, #33308	; 0x821c
   16214:	movw	r3, #33324	; 0x822c
   16218:	mov	r2, #85	; 0x55
   1621c:	movt	r0, #1
   16220:	movt	r1, #1
   16224:	movt	r3, #1
   16228:	bl	11350 <__assert_fail@plt>
   1622c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16230:	add	fp, sp, #28
   16234:	sub	sp, sp, #20
   16238:	cmp	r2, #37	; 0x25
   1623c:	bcs	168c4 <__assert_fail@plt+0x5574>
   16240:	mov	r8, r3
   16244:	mov	r5, r2
   16248:	mov	r6, r1
   1624c:	mov	r4, r0
   16250:	bl	1123c <__errno_location@plt>
   16254:	mov	r7, r0
   16258:	mov	r0, #0
   1625c:	str	r0, [r7]
   16260:	bl	11200 <__ctype_b_loc@plt>
   16264:	ldr	r1, [r0]
   16268:	mov	r2, r4
   1626c:	ldrb	r0, [r2], #1
   16270:	add	r3, r1, r0, lsl #1
   16274:	ldrb	r3, [r3, #1]
   16278:	tst	r3, #32
   1627c:	bne	1626c <__assert_fail@plt+0x4f1c>
   16280:	add	sl, sp, #16
   16284:	cmp	r6, #0
   16288:	movne	sl, r6
   1628c:	mov	r6, #4
   16290:	cmp	r0, #45	; 0x2d
   16294:	beq	168b8 <__assert_fail@plt+0x5568>
   16298:	mov	r0, r4
   1629c:	mov	r1, sl
   162a0:	mov	r2, r5
   162a4:	str	r8, [sp, #12]
   162a8:	bl	11278 <strtoumax@plt>
   162ac:	ldr	r5, [sl]
   162b0:	cmp	r5, r4
   162b4:	beq	162dc <__assert_fail@plt+0x4f8c>
   162b8:	mov	r8, r0
   162bc:	ldr	r0, [r7]
   162c0:	mov	r9, r1
   162c4:	cmp	r0, #0
   162c8:	beq	1630c <__assert_fail@plt+0x4fbc>
   162cc:	cmp	r0, #34	; 0x22
   162d0:	bne	168b8 <__assert_fail@plt+0x5568>
   162d4:	mov	r6, #1
   162d8:	b	16310 <__assert_fail@plt+0x4fc0>
   162dc:	ldr	r0, [fp, #8]
   162e0:	cmp	r0, #0
   162e4:	ldrbne	r1, [r4]
   162e8:	cmpne	r1, #0
   162ec:	beq	168b8 <__assert_fail@plt+0x5568>
   162f0:	bl	11230 <strchr@plt>
   162f4:	cmp	r0, #0
   162f8:	beq	168b8 <__assert_fail@plt+0x5568>
   162fc:	mov	r6, #0
   16300:	mov	r8, #1
   16304:	mov	r9, #0
   16308:	b	1631c <__assert_fail@plt+0x4fcc>
   1630c:	mov	r6, r0
   16310:	ldr	r0, [fp, #8]
   16314:	cmp	r0, #0
   16318:	beq	168b0 <__assert_fail@plt+0x5560>
   1631c:	ldrb	r7, [r5]
   16320:	cmp	r7, #0
   16324:	beq	168b0 <__assert_fail@plt+0x5560>
   16328:	ldr	r0, [fp, #8]
   1632c:	mov	r1, r7
   16330:	bl	11230 <strchr@plt>
   16334:	cmp	r0, #0
   16338:	beq	16440 <__assert_fail@plt+0x50f0>
   1633c:	sub	r0, r7, #69	; 0x45
   16340:	mov	r1, #1
   16344:	mov	r3, #0
   16348:	mov	r4, #1024	; 0x400
   1634c:	cmp	r0, #21
   16350:	str	r1, [sp, #8]
   16354:	bhi	1636c <__assert_fail@plt+0x501c>
   16358:	movw	r2, #35141	; 0x8945
   1635c:	mov	r1, #1
   16360:	movt	r2, #48	; 0x30
   16364:	tst	r2, r1, lsl r0
   16368:	bne	16388 <__assert_fail@plt+0x5038>
   1636c:	sub	r0, r7, #103	; 0x67
   16370:	cmp	r0, #13
   16374:	bhi	163bc <__assert_fail@plt+0x506c>
   16378:	mov	r1, #1
   1637c:	movw	r2, #8273	; 0x2051
   16380:	tst	r2, r1, lsl r0
   16384:	beq	163bc <__assert_fail@plt+0x506c>
   16388:	ldr	r0, [fp, #8]
   1638c:	mov	r1, #48	; 0x30
   16390:	bl	11230 <strchr@plt>
   16394:	cmp	r0, #0
   16398:	beq	163b8 <__assert_fail@plt+0x5068>
   1639c:	ldrb	r0, [r5, #1]
   163a0:	cmp	r0, #66	; 0x42
   163a4:	cmpne	r0, #68	; 0x44
   163a8:	bne	164d0 <__assert_fail@plt+0x5180>
   163ac:	mov	r4, #1000	; 0x3e8
   163b0:	mov	r0, #2
   163b4:	str	r0, [sp, #8]
   163b8:	mov	r3, #0
   163bc:	cmp	r7, #89	; 0x59
   163c0:	stm	sp, {r5, r6}
   163c4:	bgt	1644c <__assert_fail@plt+0x50fc>
   163c8:	sub	r0, r7, #66	; 0x42
   163cc:	cmp	r0, #14
   163d0:	bhi	164f4 <__assert_fail@plt+0x51a4>
   163d4:	add	r1, pc, #0
   163d8:	ldr	pc, [r1, r0, lsl #2]
   163dc:	andeq	r6, r1, r8, lsl r4
   163e0:	andeq	r6, r1, r4, lsr #15
   163e4:	andeq	r6, r1, r4, lsr #15
   163e8:			; <UNDEFINED> instruction: 0x000167b8
   163ec:	andeq	r6, r1, r4, lsr #15
   163f0:	andeq	r6, r1, r8, lsr #11
   163f4:	andeq	r6, r1, r4, lsr #15
   163f8:	andeq	r6, r1, r4, lsr #15
   163fc:	andeq	r6, r1, r4, lsr #15
   16400:	andeq	r6, r1, r4, lsl r6
   16404:	andeq	r6, r1, r4, lsr #15
   16408:	andeq	r6, r1, r8, asr r6
   1640c:	andeq	r6, r1, r4, lsr #15
   16410:	andeq	r6, r1, r4, lsr #15
   16414:	andeq	r6, r1, r4, lsr #16
   16418:	mov	r1, #0
   1641c:	lsl	r3, r9, #10
   16420:	lsl	r0, r8, #10
   16424:	lsr	r2, r9, #22
   16428:	cmp	r1, r9, lsr #22
   1642c:	orr	r3, r3, r8, lsr #22
   16430:	mvnne	r0, #0
   16434:	movwne	r2, #1
   16438:	cmp	r1, r9, lsr #22
   1643c:	b	164c0 <__assert_fail@plt+0x5170>
   16440:	ldr	r0, [sp, #12]
   16444:	orr	r6, r6, #2
   16448:	b	168b4 <__assert_fail@plt+0x5564>
   1644c:	cmp	r7, #115	; 0x73
   16450:	bgt	16570 <__assert_fail@plt+0x5220>
   16454:	sub	r0, r7, #98	; 0x62
   16458:	cmp	r0, #11
   1645c:	bhi	16730 <__assert_fail@plt+0x53e0>
   16460:	add	r1, pc, #4
   16464:	mov	r2, #0
   16468:	ldr	pc, [r1, r0, lsl #2]
   1646c:	muleq	r1, ip, r4
   16470:	andeq	r6, r1, ip, lsl #17
   16474:	andeq	r6, r1, r4, lsr #15
   16478:	andeq	r6, r1, r4, lsr #15
   1647c:	andeq	r6, r1, r4, lsr #15
   16480:	andeq	r6, r1, r8, lsr #11
   16484:	andeq	r6, r1, r4, lsr #15
   16488:	andeq	r6, r1, r4, lsr #15
   1648c:	andeq	r6, r1, r4, lsr #15
   16490:	andeq	r6, r1, r4, lsl r6
   16494:	andeq	r6, r1, r4, lsr #15
   16498:	andeq	r6, r1, r8, asr r6
   1649c:	mov	r1, #0
   164a0:	lsl	r3, r9, #9
   164a4:	lsl	r0, r8, #9
   164a8:	lsr	r2, r9, #23
   164ac:	cmp	r1, r9, lsr #23
   164b0:	orr	r3, r3, r8, lsr #23
   164b4:	mvnne	r0, #0
   164b8:	movwne	r2, #1
   164bc:	cmp	r1, r9, lsr #23
   164c0:	mvnne	r3, #0
   164c4:	mov	r8, r0
   164c8:	mov	r9, r3
   164cc:	b	1688c <__assert_fail@plt+0x553c>
   164d0:	cmp	r0, #105	; 0x69
   164d4:	mov	r3, #0
   164d8:	bne	163bc <__assert_fail@plt+0x506c>
   164dc:	ldrb	r0, [r5, #2]
   164e0:	mov	r1, #1
   164e4:	cmp	r0, #66	; 0x42
   164e8:	movweq	r1, #3
   164ec:	str	r1, [sp, #8]
   164f0:	b	163bc <__assert_fail@plt+0x506c>
   164f4:	cmp	r7, #84	; 0x54
   164f8:	beq	166c4 <__assert_fail@plt+0x5374>
   164fc:	cmp	r7, #89	; 0x59
   16500:	bne	167a4 <__assert_fail@plt+0x5454>
   16504:	mvn	r0, #0
   16508:	mvn	r1, #0
   1650c:	mov	r2, r4
   16510:	mov	r5, r3
   16514:	bl	16e5c <__assert_fail@plt+0x5b0c>
   16518:	mov	ip, r5
   1651c:	mvn	lr, #0
   16520:	mov	r2, #0
   16524:	mvn	r3, #7
   16528:	mov	r5, r8
   1652c:	mov	r7, r9
   16530:	umull	r8, r6, r5, r4
   16534:	mvn	r9, #0
   16538:	mla	r6, r5, ip, r6
   1653c:	subs	r5, r0, r5
   16540:	sbcs	r5, r1, r7
   16544:	mov	r5, #0
   16548:	movwcc	r5, #1
   1654c:	cmp	r5, #0
   16550:	mlaeq	r9, r7, r4, r6
   16554:	movne	r8, lr
   16558:	orrne	r2, r2, #1
   1655c:	adds	r3, r3, #1
   16560:	mov	r5, r8
   16564:	mov	r7, r9
   16568:	bne	16530 <__assert_fail@plt+0x51e0>
   1656c:	b	1688c <__assert_fail@plt+0x553c>
   16570:	cmp	r7, #116	; 0x74
   16574:	beq	166c4 <__assert_fail@plt+0x5374>
   16578:	cmp	r7, #119	; 0x77
   1657c:	bne	167a4 <__assert_fail@plt+0x5454>
   16580:	lsl	r1, r9, #1
   16584:	lsl	r0, r8, #1
   16588:	cmp	r9, #0
   1658c:	lsr	r2, r9, #31
   16590:	orr	r1, r1, r8, lsr #31
   16594:	mvnlt	r0, #0
   16598:	mvnlt	r1, #0
   1659c:	mov	r8, r0
   165a0:	mov	r9, r1
   165a4:	b	1688c <__assert_fail@plt+0x553c>
   165a8:	mvn	r0, #0
   165ac:	mvn	r1, #0
   165b0:	mov	r2, r4
   165b4:	mov	r5, r3
   165b8:	bl	16e5c <__assert_fail@plt+0x5b0c>
   165bc:	mov	ip, r5
   165c0:	mvn	lr, #0
   165c4:	mov	r2, #0
   165c8:	mvn	r3, #2
   165cc:	mov	r6, r8
   165d0:	mov	r5, r9
   165d4:	umull	r8, r7, r6, r4
   165d8:	mvn	r9, #0
   165dc:	mla	r7, r6, ip, r7
   165e0:	subs	r6, r0, r6
   165e4:	sbcs	r6, r1, r5
   165e8:	mov	r6, #0
   165ec:	movwcc	r6, #1
   165f0:	cmp	r6, #0
   165f4:	mlaeq	r9, r5, r4, r7
   165f8:	movne	r8, lr
   165fc:	orrne	r2, r2, #1
   16600:	adds	r3, r3, #1
   16604:	mov	r6, r8
   16608:	mov	r5, r9
   1660c:	bne	165d4 <__assert_fail@plt+0x5284>
   16610:	b	1688c <__assert_fail@plt+0x553c>
   16614:	mvn	r0, #0
   16618:	mvn	r1, #0
   1661c:	mov	r2, r4
   16620:	mov	r5, r3
   16624:	bl	16e5c <__assert_fail@plt+0x5b0c>
   16628:	subs	r0, r0, r8
   1662c:	mov	r2, #0
   16630:	sbcs	r0, r1, r9
   16634:	movwcc	r2, #1
   16638:	umull	r0, r1, r8, r4
   1663c:	mla	r1, r8, r5, r1
   16640:	cmp	r2, #0
   16644:	mla	r9, r9, r4, r1
   16648:	mvnne	r0, #0
   1664c:	mvnne	r9, #0
   16650:	mov	r8, r0
   16654:	b	1688c <__assert_fail@plt+0x553c>
   16658:	mvn	r0, #0
   1665c:	mvn	r1, #0
   16660:	mov	r2, r4
   16664:	mov	r5, r3
   16668:	bl	16e5c <__assert_fail@plt+0x5b0c>
   1666c:	mov	ip, r5
   16670:	mvn	lr, #0
   16674:	mov	r2, #0
   16678:	mvn	r3, #1
   1667c:	mov	r6, r8
   16680:	mov	r5, r9
   16684:	umull	r8, r7, r6, r4
   16688:	mvn	r9, #0
   1668c:	mla	r7, r6, ip, r7
   16690:	subs	r6, r0, r6
   16694:	sbcs	r6, r1, r5
   16698:	mov	r6, #0
   1669c:	movwcc	r6, #1
   166a0:	cmp	r6, #0
   166a4:	mlaeq	r9, r5, r4, r7
   166a8:	movne	r8, lr
   166ac:	orrne	r2, r2, #1
   166b0:	adds	r3, r3, #1
   166b4:	mov	r6, r8
   166b8:	mov	r5, r9
   166bc:	bne	16684 <__assert_fail@plt+0x5334>
   166c0:	b	1688c <__assert_fail@plt+0x553c>
   166c4:	mvn	r0, #0
   166c8:	mvn	r1, #0
   166cc:	mov	r2, r4
   166d0:	mov	r5, r3
   166d4:	bl	16e5c <__assert_fail@plt+0x5b0c>
   166d8:	mov	ip, r5
   166dc:	mvn	lr, #0
   166e0:	mov	r2, #0
   166e4:	mvn	r3, #3
   166e8:	mov	r6, r8
   166ec:	mov	r5, r9
   166f0:	umull	r8, r7, r6, r4
   166f4:	mvn	r9, #0
   166f8:	mla	r7, r6, ip, r7
   166fc:	subs	r6, r0, r6
   16700:	sbcs	r6, r1, r5
   16704:	mov	r6, #0
   16708:	movwcc	r6, #1
   1670c:	cmp	r6, #0
   16710:	mlaeq	r9, r5, r4, r7
   16714:	movne	r8, lr
   16718:	orrne	r2, r2, #1
   1671c:	adds	r3, r3, #1
   16720:	mov	r6, r8
   16724:	mov	r5, r9
   16728:	bne	166f0 <__assert_fail@plt+0x53a0>
   1672c:	b	1688c <__assert_fail@plt+0x553c>
   16730:	cmp	r7, #90	; 0x5a
   16734:	bne	167a4 <__assert_fail@plt+0x5454>
   16738:	mvn	r0, #0
   1673c:	mvn	r1, #0
   16740:	mov	r2, r4
   16744:	mov	r5, r3
   16748:	bl	16e5c <__assert_fail@plt+0x5b0c>
   1674c:	mov	ip, r5
   16750:	mvn	lr, #0
   16754:	mov	r2, #0
   16758:	mvn	r3, #6
   1675c:	mov	r5, r8
   16760:	mov	r7, r9
   16764:	umull	r8, r6, r5, r4
   16768:	mvn	r9, #0
   1676c:	mla	r6, r5, ip, r6
   16770:	subs	r5, r0, r5
   16774:	sbcs	r5, r1, r7
   16778:	mov	r5, #0
   1677c:	movwcc	r5, #1
   16780:	cmp	r5, #0
   16784:	mlaeq	r9, r7, r4, r6
   16788:	movne	r8, lr
   1678c:	orrne	r2, r2, #1
   16790:	adds	r3, r3, #1
   16794:	mov	r5, r8
   16798:	mov	r7, r9
   1679c:	bne	16764 <__assert_fail@plt+0x5414>
   167a0:	b	1688c <__assert_fail@plt+0x553c>
   167a4:	ldr	r0, [sp, #12]
   167a8:	strd	r8, [r0]
   167ac:	ldr	r6, [sp, #4]
   167b0:	orr	r6, r6, #2
   167b4:	b	168b8 <__assert_fail@plt+0x5568>
   167b8:	mvn	r0, #0
   167bc:	mvn	r1, #0
   167c0:	mov	r2, r4
   167c4:	mov	r5, r3
   167c8:	bl	16e5c <__assert_fail@plt+0x5b0c>
   167cc:	mov	ip, r5
   167d0:	mvn	lr, #0
   167d4:	mov	r2, #0
   167d8:	mvn	r3, #5
   167dc:	mov	r5, r8
   167e0:	mov	r7, r9
   167e4:	umull	r8, r6, r5, r4
   167e8:	mvn	r9, #0
   167ec:	mla	r6, r5, ip, r6
   167f0:	subs	r5, r0, r5
   167f4:	sbcs	r5, r1, r7
   167f8:	mov	r5, #0
   167fc:	movwcc	r5, #1
   16800:	cmp	r5, #0
   16804:	mlaeq	r9, r7, r4, r6
   16808:	movne	r8, lr
   1680c:	orrne	r2, r2, #1
   16810:	adds	r3, r3, #1
   16814:	mov	r5, r8
   16818:	mov	r7, r9
   1681c:	bne	167e4 <__assert_fail@plt+0x5494>
   16820:	b	1688c <__assert_fail@plt+0x553c>
   16824:	mvn	r0, #0
   16828:	mvn	r1, #0
   1682c:	mov	r2, r4
   16830:	mov	r5, r3
   16834:	bl	16e5c <__assert_fail@plt+0x5b0c>
   16838:	mov	ip, r5
   1683c:	mvn	lr, #0
   16840:	mov	r2, #0
   16844:	mvn	r3, #4
   16848:	mov	r5, r8
   1684c:	mov	r7, r9
   16850:	umull	r8, r6, r5, r4
   16854:	mvn	r9, #0
   16858:	mla	r6, r5, ip, r6
   1685c:	subs	r5, r0, r5
   16860:	sbcs	r5, r1, r7
   16864:	mov	r5, #0
   16868:	movwcc	r5, #1
   1686c:	cmp	r5, #0
   16870:	mlaeq	r9, r7, r4, r6
   16874:	movne	r8, lr
   16878:	orrne	r2, r2, #1
   1687c:	adds	r3, r3, #1
   16880:	mov	r5, r8
   16884:	mov	r7, r9
   16888:	bne	16850 <__assert_fail@plt+0x5500>
   1688c:	ldr	r1, [sp]
   16890:	ldr	r3, [sp, #8]
   16894:	ldr	r6, [sp, #4]
   16898:	add	r0, r1, r3
   1689c:	orr	r6, r2, r6
   168a0:	str	r0, [sl]
   168a4:	ldrb	r0, [r1, r3]
   168a8:	cmp	r0, #0
   168ac:	orrne	r6, r6, #2
   168b0:	ldr	r0, [sp, #12]
   168b4:	strd	r8, [r0]
   168b8:	mov	r0, r6
   168bc:	sub	sp, fp, #28
   168c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168c4:	movw	r0, #33270	; 0x81f6
   168c8:	movw	r1, #33308	; 0x821c
   168cc:	movw	r3, #33405	; 0x827d
   168d0:	mov	r2, #85	; 0x55
   168d4:	movt	r0, #1
   168d8:	movt	r1, #1
   168dc:	movt	r3, #1
   168e0:	bl	11350 <__assert_fail@plt>
   168e4:	clz	r2, r1
   168e8:	clz	r3, r0
   168ec:	lsr	r2, r2, #5
   168f0:	lsr	r3, r3, #5
   168f4:	orrs	r2, r3, r2
   168f8:	movwne	r1, #1
   168fc:	movwne	r0, #1
   16900:	cmp	r1, #0
   16904:	beq	16934 <__assert_fail@plt+0x55e4>
   16908:	mvn	r2, #-2147483648	; 0x80000000
   1690c:	udiv	r2, r2, r1
   16910:	cmp	r2, r0
   16914:	bcs	16934 <__assert_fail@plt+0x55e4>
   16918:	push	{fp, lr}
   1691c:	mov	fp, sp
   16920:	bl	1123c <__errno_location@plt>
   16924:	mov	r1, #12
   16928:	str	r1, [r0]
   1692c:	mov	r0, #0
   16930:	pop	{fp, pc}
   16934:	b	11098 <calloc@plt>
   16938:	cmp	r0, #0
   1693c:	movweq	r0, #1
   16940:	cmn	r0, #1
   16944:	ble	1694c <__assert_fail@plt+0x55fc>
   16948:	b	111b8 <malloc@plt>
   1694c:	push	{fp, lr}
   16950:	mov	fp, sp
   16954:	bl	1123c <__errno_location@plt>
   16958:	mov	r1, #12
   1695c:	str	r1, [r0]
   16960:	mov	r0, #0
   16964:	pop	{fp, pc}
   16968:	push	{fp, lr}
   1696c:	mov	fp, sp
   16970:	cmp	r0, #0
   16974:	beq	16990 <__assert_fail@plt+0x5640>
   16978:	cmp	r1, #0
   1697c:	beq	1699c <__assert_fail@plt+0x564c>
   16980:	cmn	r1, #1
   16984:	ble	169a4 <__assert_fail@plt+0x5654>
   16988:	pop	{fp, lr}
   1698c:	b	11140 <realloc@plt>
   16990:	mov	r0, r1
   16994:	pop	{fp, lr}
   16998:	b	16938 <__assert_fail@plt+0x55e8>
   1699c:	bl	13498 <__assert_fail@plt+0x2148>
   169a0:	b	169b0 <__assert_fail@plt+0x5660>
   169a4:	bl	1123c <__errno_location@plt>
   169a8:	mov	r1, #12
   169ac:	str	r1, [r0]
   169b0:	mov	r0, #0
   169b4:	pop	{fp, pc}
   169b8:	push	{r4, r5, r6, sl, fp, lr}
   169bc:	add	fp, sp, #16
   169c0:	mov	r4, r0
   169c4:	bl	1117c <__fpending@plt>
   169c8:	mov	r5, r0
   169cc:	mov	r0, r4
   169d0:	bl	11188 <ferror_unlocked@plt>
   169d4:	mov	r6, r0
   169d8:	mov	r0, r4
   169dc:	bl	132f4 <__assert_fail@plt+0x1fa4>
   169e0:	cmp	r6, #0
   169e4:	beq	16a04 <__assert_fail@plt+0x56b4>
   169e8:	mvn	r4, #0
   169ec:	cmp	r0, #0
   169f0:	bne	16a30 <__assert_fail@plt+0x56e0>
   169f4:	bl	1123c <__errno_location@plt>
   169f8:	mov	r1, #0
   169fc:	str	r1, [r0]
   16a00:	b	16a30 <__assert_fail@plt+0x56e0>
   16a04:	cmp	r0, #0
   16a08:	mov	r4, r0
   16a0c:	mvnne	r4, #0
   16a10:	cmp	r5, #0
   16a14:	bne	16a30 <__assert_fail@plt+0x56e0>
   16a18:	cmp	r0, #0
   16a1c:	beq	16a30 <__assert_fail@plt+0x56e0>
   16a20:	bl	1123c <__errno_location@plt>
   16a24:	ldr	r0, [r0]
   16a28:	subs	r4, r0, #9
   16a2c:	mvnne	r4, #0
   16a30:	mov	r0, r4
   16a34:	pop	{r4, r5, r6, sl, fp, pc}
   16a38:	sub	sp, sp, #8
   16a3c:	push	{r4, r5, r6, r7, fp, lr}
   16a40:	add	fp, sp, #16
   16a44:	sub	sp, sp, #8
   16a48:	mov	r5, r0
   16a4c:	add	r0, fp, #8
   16a50:	cmp	r1, #11
   16a54:	str	r3, [fp, #12]
   16a58:	str	r2, [fp, #8]
   16a5c:	str	r0, [sp, #4]
   16a60:	bhi	16a9c <__assert_fail@plt+0x574c>
   16a64:	mov	r0, #1
   16a68:	movw	r2, #1300	; 0x514
   16a6c:	tst	r2, r0, lsl r1
   16a70:	bne	16b54 <__assert_fail@plt+0x5804>
   16a74:	movw	r2, #2570	; 0xa0a
   16a78:	tst	r2, r0, lsl r1
   16a7c:	bne	16ac4 <__assert_fail@plt+0x5774>
   16a80:	cmp	r1, #0
   16a84:	bne	16a9c <__assert_fail@plt+0x574c>
   16a88:	ldr	r0, [sp, #4]
   16a8c:	add	r1, r0, #4
   16a90:	str	r1, [sp, #4]
   16a94:	mov	r1, #0
   16a98:	b	16b60 <__assert_fail@plt+0x5810>
   16a9c:	sub	r0, r1, #1024	; 0x400
   16aa0:	cmp	r0, #10
   16aa4:	bhi	16b54 <__assert_fail@plt+0x5804>
   16aa8:	mov	r2, #1
   16aac:	movw	r3, #645	; 0x285
   16ab0:	tst	r3, r2, lsl r0
   16ab4:	bne	16b54 <__assert_fail@plt+0x5804>
   16ab8:	movw	r3, #1282	; 0x502
   16abc:	tst	r3, r2, lsl r0
   16ac0:	beq	16ad0 <__assert_fail@plt+0x5780>
   16ac4:	mov	r0, r5
   16ac8:	bl	112b4 <fcntl64@plt>
   16acc:	b	16b6c <__assert_fail@plt+0x581c>
   16ad0:	cmp	r0, #6
   16ad4:	bne	16b54 <__assert_fail@plt+0x5804>
   16ad8:	ldr	r0, [sp, #4]
   16adc:	movw	r7, #37688	; 0x9338
   16ae0:	movt	r7, #2
   16ae4:	add	r1, r0, #4
   16ae8:	str	r1, [sp, #4]
   16aec:	ldr	r6, [r0]
   16af0:	ldr	r0, [r7]
   16af4:	cmp	r0, #0
   16af8:	blt	16b90 <__assert_fail@plt+0x5840>
   16afc:	mov	r0, r5
   16b00:	movw	r1, #1030	; 0x406
   16b04:	mov	r2, r6
   16b08:	bl	112b4 <fcntl64@plt>
   16b0c:	mov	r4, r0
   16b10:	cmn	r0, #1
   16b14:	bgt	16b84 <__assert_fail@plt+0x5834>
   16b18:	bl	1123c <__errno_location@plt>
   16b1c:	ldr	r0, [r0]
   16b20:	cmp	r0, #22
   16b24:	bne	16b84 <__assert_fail@plt+0x5834>
   16b28:	mov	r0, r5
   16b2c:	mov	r1, #0
   16b30:	mov	r2, r6
   16b34:	bl	112b4 <fcntl64@plt>
   16b38:	mov	r4, r0
   16b3c:	cmp	r0, #0
   16b40:	blt	16b70 <__assert_fail@plt+0x5820>
   16b44:	mvn	r0, #0
   16b48:	str	r0, [r7]
   16b4c:	mov	r0, #1
   16b50:	b	16bb4 <__assert_fail@plt+0x5864>
   16b54:	ldr	r0, [sp, #4]
   16b58:	add	r2, r0, #4
   16b5c:	str	r2, [sp, #4]
   16b60:	ldr	r2, [r0]
   16b64:	mov	r0, r5
   16b68:	bl	112b4 <fcntl64@plt>
   16b6c:	mov	r4, r0
   16b70:	mov	r0, r4
   16b74:	sub	sp, fp, #16
   16b78:	pop	{r4, r5, r6, r7, fp, lr}
   16b7c:	add	sp, sp, #8
   16b80:	bx	lr
   16b84:	mov	r0, #1
   16b88:	str	r0, [r7]
   16b8c:	b	16b70 <__assert_fail@plt+0x5820>
   16b90:	mov	r0, r5
   16b94:	mov	r1, #0
   16b98:	mov	r2, r6
   16b9c:	bl	112b4 <fcntl64@plt>
   16ba0:	mov	r4, r0
   16ba4:	ldr	r0, [r7]
   16ba8:	add	r0, r0, #1
   16bac:	clz	r0, r0
   16bb0:	lsr	r0, r0, #5
   16bb4:	cmp	r0, #0
   16bb8:	beq	16b70 <__assert_fail@plt+0x5820>
   16bbc:	cmp	r4, #0
   16bc0:	blt	16b70 <__assert_fail@plt+0x5820>
   16bc4:	mov	r0, r4
   16bc8:	mov	r1, #1
   16bcc:	bl	112b4 <fcntl64@plt>
   16bd0:	cmp	r0, #0
   16bd4:	blt	16bf0 <__assert_fail@plt+0x58a0>
   16bd8:	orr	r2, r0, #1
   16bdc:	mov	r0, r4
   16be0:	mov	r1, #2
   16be4:	bl	112b4 <fcntl64@plt>
   16be8:	cmn	r0, #1
   16bec:	bne	16b70 <__assert_fail@plt+0x5820>
   16bf0:	bl	1123c <__errno_location@plt>
   16bf4:	ldr	r6, [r0]
   16bf8:	mov	r5, r0
   16bfc:	mov	r0, r4
   16c00:	bl	11338 <close@plt>
   16c04:	str	r6, [r5]
   16c08:	mvn	r4, #0
   16c0c:	b	16b70 <__assert_fail@plt+0x5820>
   16c10:	push	{fp, lr}
   16c14:	mov	fp, sp
   16c18:	mov	r0, #14
   16c1c:	bl	112d8 <nl_langinfo@plt>
   16c20:	movw	r1, #31762	; 0x7c12
   16c24:	cmp	r0, #0
   16c28:	movt	r1, #1
   16c2c:	movne	r1, r0
   16c30:	movw	r0, #33484	; 0x82cc
   16c34:	ldrb	r2, [r1]
   16c38:	movt	r0, #1
   16c3c:	cmp	r2, #0
   16c40:	movne	r0, r1
   16c44:	pop	{fp, pc}
   16c48:	push	{r4, r5, r6, r7, fp, lr}
   16c4c:	add	fp, sp, #16
   16c50:	sub	sp, sp, #8
   16c54:	add	r5, sp, #4
   16c58:	cmp	r0, #0
   16c5c:	mov	r7, r2
   16c60:	mov	r4, r1
   16c64:	movne	r5, r0
   16c68:	mov	r0, r5
   16c6c:	bl	11194 <mbrtowc@plt>
   16c70:	mov	r6, r0
   16c74:	cmp	r7, #0
   16c78:	beq	16c9c <__assert_fail@plt+0x594c>
   16c7c:	cmn	r6, #2
   16c80:	bcc	16c9c <__assert_fail@plt+0x594c>
   16c84:	mov	r0, #0
   16c88:	bl	13564 <__assert_fail@plt+0x2214>
   16c8c:	cmp	r0, #0
   16c90:	ldrbeq	r0, [r4]
   16c94:	moveq	r6, #1
   16c98:	streq	r0, [r5]
   16c9c:	mov	r0, r6
   16ca0:	sub	sp, fp, #16
   16ca4:	pop	{r4, r5, r6, r7, fp, pc}
   16ca8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16cac:	add	fp, sp, #24
   16cb0:	mov	r4, r3
   16cb4:	mov	r5, r2
   16cb8:	mov	r6, r1
   16cbc:	mov	r7, r0
   16cc0:	cmp	r1, r3
   16cc4:	bne	16ce0 <__assert_fail@plt+0x5990>
   16cc8:	mov	r0, r7
   16ccc:	mov	r1, r5
   16cd0:	mov	r2, r6
   16cd4:	bl	1111c <memcmp@plt>
   16cd8:	cmp	r0, #0
   16cdc:	beq	16d14 <__assert_fail@plt+0x59c4>
   16ce0:	ldrb	r8, [r5, r4]
   16ce4:	ldrb	r9, [r7, r6]
   16ce8:	mov	r0, #0
   16cec:	add	r1, r6, #1
   16cf0:	add	r3, r4, #1
   16cf4:	mov	r2, r5
   16cf8:	strb	r0, [r7, r6]
   16cfc:	strb	r0, [r5, r4]
   16d00:	mov	r0, r7
   16d04:	bl	16d28 <__assert_fail@plt+0x59d8>
   16d08:	strb	r9, [r7, r6]
   16d0c:	strb	r8, [r5, r4]
   16d10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16d14:	bl	1123c <__errno_location@plt>
   16d18:	mov	r1, #0
   16d1c:	str	r1, [r0]
   16d20:	mov	r0, #0
   16d24:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16d28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d2c:	add	fp, sp, #28
   16d30:	sub	sp, sp, #4
   16d34:	mov	sl, r3
   16d38:	mov	r5, r2
   16d3c:	mov	r6, r1
   16d40:	mov	r7, r0
   16d44:	bl	1123c <__errno_location@plt>
   16d48:	mov	r8, r0
   16d4c:	mov	r9, #0
   16d50:	mov	r0, r7
   16d54:	mov	r1, r5
   16d58:	str	r9, [r8]
   16d5c:	bl	111ac <strcoll@plt>
   16d60:	cmp	r0, #0
   16d64:	bne	16db4 <__assert_fail@plt+0x5a64>
   16d68:	mov	r0, r7
   16d6c:	bl	11224 <strlen@plt>
   16d70:	add	r4, r0, #1
   16d74:	mov	r0, r5
   16d78:	sub	r6, r6, r4
   16d7c:	bl	11224 <strlen@plt>
   16d80:	add	r0, r0, #1
   16d84:	cmp	r6, #0
   16d88:	sub	sl, sl, r0
   16d8c:	beq	16da8 <__assert_fail@plt+0x5a58>
   16d90:	add	r7, r7, r4
   16d94:	add	r5, r5, r0
   16d98:	cmp	sl, #0
   16d9c:	bne	16d50 <__assert_fail@plt+0x5a00>
   16da0:	mov	r0, #1
   16da4:	b	16db4 <__assert_fail@plt+0x5a64>
   16da8:	cmp	sl, #0
   16dac:	mvnne	sl, #0
   16db0:	mov	r0, sl
   16db4:	sub	sp, fp, #28
   16db8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dbc:	push	{r4, r5, r6, r7, fp, lr}
   16dc0:	add	fp, sp, #16
   16dc4:	mov	r4, r3
   16dc8:	mov	r5, r2
   16dcc:	mov	r6, r1
   16dd0:	mov	r7, r0
   16dd4:	cmp	r1, r3
   16dd8:	bne	16df4 <__assert_fail@plt+0x5aa4>
   16ddc:	mov	r0, r7
   16de0:	mov	r1, r5
   16de4:	mov	r2, r6
   16de8:	bl	1111c <memcmp@plt>
   16dec:	cmp	r0, #0
   16df0:	beq	16e0c <__assert_fail@plt+0x5abc>
   16df4:	mov	r0, r7
   16df8:	mov	r1, r6
   16dfc:	mov	r2, r5
   16e00:	mov	r3, r4
   16e04:	pop	{r4, r5, r6, r7, fp, lr}
   16e08:	b	16d28 <__assert_fail@plt+0x59d8>
   16e0c:	bl	1123c <__errno_location@plt>
   16e10:	mov	r1, #0
   16e14:	str	r1, [r0]
   16e18:	mov	r0, #0
   16e1c:	pop	{r4, r5, r6, r7, fp, pc}
   16e20:	cmp	r2, #0
   16e24:	beq	16e54 <__assert_fail@plt+0x5b04>
   16e28:	mvn	r3, #0
   16e2c:	udiv	r3, r3, r2
   16e30:	cmp	r3, r1
   16e34:	bcs	16e54 <__assert_fail@plt+0x5b04>
   16e38:	push	{fp, lr}
   16e3c:	mov	fp, sp
   16e40:	bl	1123c <__errno_location@plt>
   16e44:	mov	r1, #12
   16e48:	str	r1, [r0]
   16e4c:	mov	r0, #0
   16e50:	pop	{fp, pc}
   16e54:	mul	r1, r2, r1
   16e58:	b	16968 <__assert_fail@plt+0x5618>
   16e5c:	cmp	r3, #0
   16e60:	cmpeq	r2, #0
   16e64:	bne	16e7c <__assert_fail@plt+0x5b2c>
   16e68:	cmp	r1, #0
   16e6c:	cmpeq	r0, #0
   16e70:	mvnne	r1, #0
   16e74:	mvnne	r0, #0
   16e78:	b	16e98 <__assert_fail@plt+0x5b48>
   16e7c:	sub	sp, sp, #8
   16e80:	push	{sp, lr}
   16e84:	bl	16ea8 <__assert_fail@plt+0x5b58>
   16e88:	ldr	lr, [sp, #4]
   16e8c:	add	sp, sp, #8
   16e90:	pop	{r2, r3}
   16e94:	bx	lr
   16e98:	push	{r1, lr}
   16e9c:	mov	r0, #8
   16ea0:	bl	110b0 <raise@plt>
   16ea4:	pop	{r1, pc}
   16ea8:	cmp	r1, r3
   16eac:	cmpeq	r0, r2
   16eb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16eb4:	mov	r4, r0
   16eb8:	movcc	r0, #0
   16ebc:	mov	r5, r1
   16ec0:	ldr	lr, [sp, #36]	; 0x24
   16ec4:	movcc	r1, r0
   16ec8:	bcc	16fc4 <__assert_fail@plt+0x5c74>
   16ecc:	cmp	r3, #0
   16ed0:	clzeq	ip, r2
   16ed4:	clzne	ip, r3
   16ed8:	addeq	ip, ip, #32
   16edc:	cmp	r5, #0
   16ee0:	clzeq	r1, r4
   16ee4:	addeq	r1, r1, #32
   16ee8:	clzne	r1, r5
   16eec:	sub	ip, ip, r1
   16ef0:	sub	sl, ip, #32
   16ef4:	lsl	r9, r3, ip
   16ef8:	rsb	fp, ip, #32
   16efc:	orr	r9, r9, r2, lsl sl
   16f00:	orr	r9, r9, r2, lsr fp
   16f04:	lsl	r8, r2, ip
   16f08:	cmp	r5, r9
   16f0c:	cmpeq	r4, r8
   16f10:	movcc	r0, #0
   16f14:	movcc	r1, r0
   16f18:	bcc	16f34 <__assert_fail@plt+0x5be4>
   16f1c:	mov	r0, #1
   16f20:	subs	r4, r4, r8
   16f24:	lsl	r1, r0, sl
   16f28:	orr	r1, r1, r0, lsr fp
   16f2c:	lsl	r0, r0, ip
   16f30:	sbc	r5, r5, r9
   16f34:	cmp	ip, #0
   16f38:	beq	16fc4 <__assert_fail@plt+0x5c74>
   16f3c:	lsr	r6, r8, #1
   16f40:	orr	r6, r6, r9, lsl #31
   16f44:	lsr	r7, r9, #1
   16f48:	mov	r2, ip
   16f4c:	b	16f70 <__assert_fail@plt+0x5c20>
   16f50:	subs	r3, r4, r6
   16f54:	sbc	r8, r5, r7
   16f58:	adds	r3, r3, r3
   16f5c:	adc	r8, r8, r8
   16f60:	adds	r4, r3, #1
   16f64:	adc	r5, r8, #0
   16f68:	subs	r2, r2, #1
   16f6c:	beq	16f8c <__assert_fail@plt+0x5c3c>
   16f70:	cmp	r5, r7
   16f74:	cmpeq	r4, r6
   16f78:	bcs	16f50 <__assert_fail@plt+0x5c00>
   16f7c:	adds	r4, r4, r4
   16f80:	adc	r5, r5, r5
   16f84:	subs	r2, r2, #1
   16f88:	bne	16f70 <__assert_fail@plt+0x5c20>
   16f8c:	lsr	r3, r4, ip
   16f90:	orr	r3, r3, r5, lsl fp
   16f94:	lsr	r2, r5, ip
   16f98:	orr	r3, r3, r5, lsr sl
   16f9c:	adds	r0, r0, r4
   16fa0:	mov	r4, r3
   16fa4:	lsl	r3, r2, ip
   16fa8:	orr	r3, r3, r4, lsl sl
   16fac:	lsl	ip, r4, ip
   16fb0:	orr	r3, r3, r4, lsr fp
   16fb4:	adc	r1, r1, r5
   16fb8:	subs	r0, r0, ip
   16fbc:	mov	r5, r2
   16fc0:	sbc	r1, r1, r3
   16fc4:	cmp	lr, #0
   16fc8:	strdne	r4, [lr]
   16fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fd0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16fd4:	mov	r7, r0
   16fd8:	ldr	r6, [pc, #72]	; 17028 <__assert_fail@plt+0x5cd8>
   16fdc:	ldr	r5, [pc, #72]	; 1702c <__assert_fail@plt+0x5cdc>
   16fe0:	add	r6, pc, r6
   16fe4:	add	r5, pc, r5
   16fe8:	sub	r6, r6, r5
   16fec:	mov	r8, r1
   16ff0:	mov	r9, r2
   16ff4:	bl	1106c <fdopen@plt-0x20>
   16ff8:	asrs	r6, r6, #2
   16ffc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17000:	mov	r4, #0
   17004:	add	r4, r4, #1
   17008:	ldr	r3, [r5], #4
   1700c:	mov	r2, r9
   17010:	mov	r1, r8
   17014:	mov	r0, r7
   17018:	blx	r3
   1701c:	cmp	r6, r4
   17020:	bne	17004 <__assert_fail@plt+0x5cb4>
   17024:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17028:	andeq	r1, r1, r4, lsr #30
   1702c:	andeq	r1, r1, ip, lsl pc
   17030:	bx	lr
   17034:	ldr	r3, [pc, #12]	; 17048 <__assert_fail@plt+0x5cf8>
   17038:	mov	r1, #0
   1703c:	add	r3, pc, r3
   17040:	ldr	r2, [r3]
   17044:	b	11248 <__cxa_atexit@plt>
   17048:	andeq	r2, r1, r0, asr #1

Disassembly of section .fini:

0001704c <.fini>:
   1704c:	push	{r3, lr}
   17050:	pop	{r3, pc}
