
../repos/coreutils/src/stdbuf:     file format elf32-littlearm


Disassembly of section .init:

00010e74 <.init>:
   10e74:	push	{r3, lr}
   10e78:	bl	11164 <__assert_fail@plt+0x48>
   10e7c:	pop	{r3, pc}

Disassembly of section .plt:

00010e80 <calloc@plt-0x14>:
   10e80:	push	{lr}		; (str lr, [sp, #-4]!)
   10e84:	ldr	lr, [pc, #4]	; 10e90 <calloc@plt-0x4>
   10e88:	add	lr, pc, lr
   10e8c:	ldr	pc, [lr, #8]!
   10e90:	andeq	r6, r1, r0, ror r1

00010e94 <calloc@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #368]!	; 0x170

00010ea0 <fputs_unlocked@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #360]!	; 0x168

00010eac <raise@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #352]!	; 0x160

00010eb8 <strcmp@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #344]!	; 0x158

00010ec4 <fflush@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #336]!	; 0x150

00010ed0 <free@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #328]!	; 0x148

00010edc <_exit@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #320]!	; 0x140

00010ee8 <memcpy@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #312]!	; 0x138

00010ef4 <execvp@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #304]!	; 0x130

00010f00 <__strtoull_internal@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #296]!	; 0x128

00010f0c <mbsinit@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #90112	; 0x16000
   10f14:	ldr	pc, [ip, #288]!	; 0x120

00010f18 <memcmp@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #90112	; 0x16000
   10f20:	ldr	pc, [ip, #280]!	; 0x118

00010f24 <dcgettext@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #90112	; 0x16000
   10f2c:	ldr	pc, [ip, #272]!	; 0x110

00010f30 <realloc@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #90112	; 0x16000
   10f38:	ldr	pc, [ip, #264]!	; 0x108

00010f3c <textdomain@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #90112	; 0x16000
   10f44:	ldr	pc, [ip, #256]!	; 0x100

00010f48 <iswprint@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #90112	; 0x16000
   10f50:	ldr	pc, [ip, #248]!	; 0xf8

00010f54 <readlink@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #90112	; 0x16000
   10f5c:	ldr	pc, [ip, #240]!	; 0xf0

00010f60 <fwrite@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #90112	; 0x16000
   10f68:	ldr	pc, [ip, #232]!	; 0xe8

00010f6c <lseek64@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #90112	; 0x16000
   10f74:	ldr	pc, [ip, #224]!	; 0xe0

00010f78 <__ctype_get_mb_cur_max@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #90112	; 0x16000
   10f80:	ldr	pc, [ip, #216]!	; 0xd8

00010f84 <__fpending@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #90112	; 0x16000
   10f8c:	ldr	pc, [ip, #208]!	; 0xd0

00010f90 <mbrtowc@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #90112	; 0x16000
   10f98:	ldr	pc, [ip, #200]!	; 0xc8

00010f9c <error@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #90112	; 0x16000
   10fa4:	ldr	pc, [ip, #192]!	; 0xc0

00010fa8 <__asprintf_chk@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #90112	; 0x16000
   10fb0:	ldr	pc, [ip, #184]!	; 0xb8

00010fb4 <getenv@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #90112	; 0x16000
   10fbc:	ldr	pc, [ip, #176]!	; 0xb0

00010fc0 <malloc@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #90112	; 0x16000
   10fc8:	ldr	pc, [ip, #168]!	; 0xa8

00010fcc <__libc_start_main@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #90112	; 0x16000
   10fd4:	ldr	pc, [ip, #160]!	; 0xa0

00010fd8 <__freading@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #90112	; 0x16000
   10fe0:	ldr	pc, [ip, #152]!	; 0x98

00010fe4 <__ctype_toupper_loc@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #90112	; 0x16000
   10fec:	ldr	pc, [ip, #144]!	; 0x90

00010ff0 <__gmon_start__@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #90112	; 0x16000
   10ff8:	ldr	pc, [ip, #136]!	; 0x88

00010ffc <getopt_long@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #90112	; 0x16000
   11004:	ldr	pc, [ip, #128]!	; 0x80

00011008 <__ctype_b_loc@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #90112	; 0x16000
   11010:	ldr	pc, [ip, #120]!	; 0x78

00011014 <exit@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #90112	; 0x16000
   1101c:	ldr	pc, [ip, #112]!	; 0x70

00011020 <strlen@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #90112	; 0x16000
   11028:	ldr	pc, [ip, #104]!	; 0x68

0001102c <strchr@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #90112	; 0x16000
   11034:	ldr	pc, [ip, #96]!	; 0x60

00011038 <__errno_location@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #90112	; 0x16000
   11040:	ldr	pc, [ip, #88]!	; 0x58

00011044 <__cxa_atexit@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #90112	; 0x16000
   1104c:	ldr	pc, [ip, #80]!	; 0x50

00011050 <memset@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #90112	; 0x16000
   11058:	ldr	pc, [ip, #72]!	; 0x48

0001105c <__printf_chk@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #90112	; 0x16000
   11064:	ldr	pc, [ip, #64]!	; 0x40

00011068 <fileno@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #90112	; 0x16000
   11070:	ldr	pc, [ip, #56]!	; 0x38

00011074 <__fprintf_chk@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #90112	; 0x16000
   1107c:	ldr	pc, [ip, #48]!	; 0x30

00011080 <access@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #90112	; 0x16000
   11088:	ldr	pc, [ip, #40]!	; 0x28

0001108c <fclose@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #90112	; 0x16000
   11094:	ldr	pc, [ip, #32]!

00011098 <fseeko64@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #90112	; 0x16000
   110a0:	ldr	pc, [ip, #24]!

000110a4 <strtok@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #90112	; 0x16000
   110ac:	ldr	pc, [ip, #16]!

000110b0 <setlocale@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #90112	; 0x16000
   110b8:	ldr	pc, [ip, #8]!

000110bc <putenv@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #0]!

000110c8 <strrchr@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #86016	; 0x15000
   110d0:	ldr	pc, [ip, #4088]!	; 0xff8

000110d4 <nl_langinfo@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #86016	; 0x15000
   110dc:	ldr	pc, [ip, #4080]!	; 0xff0

000110e0 <bindtextdomain@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #86016	; 0x15000
   110e8:	ldr	pc, [ip, #4072]!	; 0xfe8

000110ec <__xstat64@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #86016	; 0x15000
   110f4:	ldr	pc, [ip, #4064]!	; 0xfe0

000110f8 <strncmp@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #86016	; 0x15000
   11100:	ldr	pc, [ip, #4056]!	; 0xfd8

00011104 <abort@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #86016	; 0x15000
   1110c:	ldr	pc, [ip, #4048]!	; 0xfd0

00011110 <__mempcpy_chk@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #86016	; 0x15000
   11118:	ldr	pc, [ip, #4040]!	; 0xfc8

0001111c <__assert_fail@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #86016	; 0x15000
   11124:	ldr	pc, [ip, #4032]!	; 0xfc0

Disassembly of section .text:

00011128 <.text>:
   11128:	mov	fp, #0
   1112c:	mov	lr, #0
   11130:	pop	{r1}		; (ldr r1, [sp], #4)
   11134:	mov	r2, sp
   11138:	push	{r2}		; (str r2, [sp, #-4]!)
   1113c:	push	{r0}		; (str r0, [sp, #-4]!)
   11140:	ldr	ip, [pc, #16]	; 11158 <__assert_fail@plt+0x3c>
   11144:	push	{ip}		; (str ip, [sp, #-4]!)
   11148:	ldr	r0, [pc, #12]	; 1115c <__assert_fail@plt+0x40>
   1114c:	ldr	r3, [pc, #12]	; 11160 <__assert_fail@plt+0x44>
   11150:	bl	10fcc <__libc_start_main@plt>
   11154:	bl	11104 <abort@plt>
   11158:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   1115c:	andeq	r1, r1, r4, lsl #10
   11160:	andeq	r5, r1, ip, lsr pc
   11164:	ldr	r3, [pc, #20]	; 11180 <__assert_fail@plt+0x64>
   11168:	ldr	r2, [pc, #20]	; 11184 <__assert_fail@plt+0x68>
   1116c:	add	r3, pc, r3
   11170:	ldr	r2, [r3, r2]
   11174:	cmp	r2, #0
   11178:	bxeq	lr
   1117c:	b	10ff0 <__gmon_start__@plt>
   11180:	andeq	r5, r1, ip, lsl #29
   11184:	andeq	r0, r0, r8, ror #1
   11188:	ldr	r0, [pc, #24]	; 111a8 <__assert_fail@plt+0x8c>
   1118c:	ldr	r3, [pc, #24]	; 111ac <__assert_fail@plt+0x90>
   11190:	cmp	r3, r0
   11194:	bxeq	lr
   11198:	ldr	r3, [pc, #16]	; 111b0 <__assert_fail@plt+0x94>
   1119c:	cmp	r3, #0
   111a0:	bxeq	lr
   111a4:	bx	r3
   111a8:	andeq	r7, r2, r0, asr #2
   111ac:	andeq	r7, r2, r0, asr #2
   111b0:	andeq	r0, r0, r0
   111b4:	ldr	r0, [pc, #36]	; 111e0 <__assert_fail@plt+0xc4>
   111b8:	ldr	r1, [pc, #36]	; 111e4 <__assert_fail@plt+0xc8>
   111bc:	sub	r1, r1, r0
   111c0:	asr	r1, r1, #2
   111c4:	add	r1, r1, r1, lsr #31
   111c8:	asrs	r1, r1, #1
   111cc:	bxeq	lr
   111d0:	ldr	r3, [pc, #16]	; 111e8 <__assert_fail@plt+0xcc>
   111d4:	cmp	r3, #0
   111d8:	bxeq	lr
   111dc:	bx	r3
   111e0:	andeq	r7, r2, r0, asr #2
   111e4:	andeq	r7, r2, r0, asr #2
   111e8:	andeq	r0, r0, r0
   111ec:	push	{r4, lr}
   111f0:	ldr	r4, [pc, #24]	; 11210 <__assert_fail@plt+0xf4>
   111f4:	ldrb	r3, [r4]
   111f8:	cmp	r3, #0
   111fc:	popne	{r4, pc}
   11200:	bl	11188 <__assert_fail@plt+0x6c>
   11204:	mov	r3, #1
   11208:	strb	r3, [r4]
   1120c:	pop	{r4, pc}
   11210:	andeq	r7, r2, ip, asr r1
   11214:	b	111b4 <__assert_fail@plt+0x98>
   11218:	push	{fp, lr}
   1121c:	mov	fp, sp
   11220:	sub	sp, sp, #56	; 0x38
   11224:	mov	r4, r0
   11228:	cmp	r0, #0
   1122c:	bne	114c0 <__assert_fail@plt+0x3a4>
   11230:	movw	r1, #24555	; 0x5feb
   11234:	mov	r0, #0
   11238:	mov	r2, #5
   1123c:	movt	r1, #1
   11240:	bl	10f24 <dcgettext@plt>
   11244:	mov	r1, r0
   11248:	movw	r0, #29072	; 0x7190
   1124c:	movt	r0, #2
   11250:	ldr	r2, [r0]
   11254:	mov	r0, #1
   11258:	bl	1105c <__printf_chk@plt>
   1125c:	movw	r1, #24584	; 0x6008
   11260:	mov	r0, #0
   11264:	mov	r2, #5
   11268:	movt	r1, #1
   1126c:	bl	10f24 <dcgettext@plt>
   11270:	movw	r7, #29012	; 0x7154
   11274:	movt	r7, #2
   11278:	ldr	r1, [r7]
   1127c:	bl	10ea0 <fputs_unlocked@plt>
   11280:	movw	r1, #25916	; 0x653c
   11284:	mov	r0, #0
   11288:	mov	r2, #5
   1128c:	movt	r1, #1
   11290:	bl	10f24 <dcgettext@plt>
   11294:	ldr	r1, [r7]
   11298:	bl	10ea0 <fputs_unlocked@plt>
   1129c:	movw	r1, #24659	; 0x6053
   112a0:	mov	r0, #0
   112a4:	mov	r2, #5
   112a8:	movt	r1, #1
   112ac:	bl	10f24 <dcgettext@plt>
   112b0:	ldr	r1, [r7]
   112b4:	bl	10ea0 <fputs_unlocked@plt>
   112b8:	movw	r1, #24841	; 0x6109
   112bc:	mov	r0, #0
   112c0:	mov	r2, #5
   112c4:	movt	r1, #1
   112c8:	bl	10f24 <dcgettext@plt>
   112cc:	ldr	r1, [r7]
   112d0:	bl	10ea0 <fputs_unlocked@plt>
   112d4:	movw	r1, #24886	; 0x6136
   112d8:	mov	r0, #0
   112dc:	mov	r2, #5
   112e0:	movt	r1, #1
   112e4:	bl	10f24 <dcgettext@plt>
   112e8:	ldr	r1, [r7]
   112ec:	bl	10ea0 <fputs_unlocked@plt>
   112f0:	movw	r1, #24940	; 0x616c
   112f4:	mov	r0, #0
   112f8:	mov	r2, #5
   112fc:	movt	r1, #1
   11300:	bl	10f24 <dcgettext@plt>
   11304:	ldr	r1, [r7]
   11308:	bl	10ea0 <fputs_unlocked@plt>
   1130c:	movw	r1, #25049	; 0x61d9
   11310:	mov	r0, #0
   11314:	mov	r2, #5
   11318:	movt	r1, #1
   1131c:	bl	10f24 <dcgettext@plt>
   11320:	ldr	r1, [r7]
   11324:	bl	10ea0 <fputs_unlocked@plt>
   11328:	movw	r1, #25111	; 0x6217
   1132c:	mov	r0, #0
   11330:	mov	r2, #5
   11334:	movt	r1, #1
   11338:	bl	10f24 <dcgettext@plt>
   1133c:	ldr	r1, [r7]
   11340:	bl	10ea0 <fputs_unlocked@plt>
   11344:	movw	r1, #25423	; 0x634f
   11348:	mov	r0, #0
   1134c:	mov	r2, #5
   11350:	movt	r1, #1
   11354:	bl	10f24 <dcgettext@plt>
   11358:	ldr	r1, [r7]
   1135c:	bl	10ea0 <fputs_unlocked@plt>
   11360:	movw	r0, #26616	; 0x67f8
   11364:	mov	r2, #48	; 0x30
   11368:	mov	r6, sp
   1136c:	movw	r5, #25690	; 0x645a
   11370:	movt	r0, #1
   11374:	movt	r5, #1
   11378:	add	r1, r0, #32
   1137c:	add	r3, r0, #16
   11380:	vld1.64	{d18-d19}, [r0], r2
   11384:	vld1.64	{d16-d17}, [r1]
   11388:	vld1.64	{d20-d21}, [r3]
   1138c:	add	r1, r6, #32
   11390:	vldr	d22, [r0]
   11394:	add	r0, r6, #16
   11398:	vst1.64	{d16-d17}, [r1]
   1139c:	movw	r1, #25991	; 0x6587
   113a0:	vst1.64	{d20-d21}, [r0]
   113a4:	mov	r0, r6
   113a8:	vst1.64	{d18-d19}, [r0], r2
   113ac:	movt	r1, #1
   113b0:	vstr	d22, [r0]
   113b4:	mov	r0, r5
   113b8:	bl	10eb8 <strcmp@plt>
   113bc:	cmp	r0, #0
   113c0:	ldrne	r1, [r6, #8]!
   113c4:	cmpne	r1, #0
   113c8:	bne	113b4 <__assert_fail@plt+0x298>
   113cc:	ldr	r6, [r6, #4]
   113d0:	movw	r1, #26086	; 0x65e6
   113d4:	mov	r0, #0
   113d8:	mov	r2, #5
   113dc:	movt	r1, #1
   113e0:	bl	10f24 <dcgettext@plt>
   113e4:	movw	r2, #25781	; 0x64b5
   113e8:	movw	r3, #26109	; 0x65fd
   113ec:	mov	r1, r0
   113f0:	mov	r0, #1
   113f4:	movt	r2, #1
   113f8:	movt	r3, #1
   113fc:	bl	1105c <__printf_chk@plt>
   11400:	cmp	r6, #0
   11404:	mov	r0, #5
   11408:	mov	r1, #0
   1140c:	moveq	r6, r5
   11410:	bl	110b0 <setlocale@plt>
   11414:	cmp	r0, #0
   11418:	beq	11450 <__assert_fail@plt+0x334>
   1141c:	movw	r1, #26149	; 0x6625
   11420:	mov	r2, #3
   11424:	movt	r1, #1
   11428:	bl	110f8 <strncmp@plt>
   1142c:	cmp	r0, #0
   11430:	beq	11450 <__assert_fail@plt+0x334>
   11434:	movw	r1, #26153	; 0x6629
   11438:	mov	r0, #0
   1143c:	mov	r2, #5
   11440:	movt	r1, #1
   11444:	bl	10f24 <dcgettext@plt>
   11448:	ldr	r1, [r7]
   1144c:	bl	10ea0 <fputs_unlocked@plt>
   11450:	movw	r1, #26224	; 0x6670
   11454:	mov	r0, #0
   11458:	mov	r2, #5
   1145c:	movt	r1, #1
   11460:	bl	10f24 <dcgettext@plt>
   11464:	movw	r2, #26109	; 0x65fd
   11468:	mov	r1, r0
   1146c:	mov	r0, #1
   11470:	mov	r3, r5
   11474:	movt	r2, #1
   11478:	bl	1105c <__printf_chk@plt>
   1147c:	movw	r1, #26251	; 0x668b
   11480:	mov	r0, #0
   11484:	mov	r2, #5
   11488:	movt	r1, #1
   1148c:	bl	10f24 <dcgettext@plt>
   11490:	movw	r3, #26301	; 0x66bd
   11494:	mov	r1, r0
   11498:	movw	r0, #26019	; 0x65a3
   1149c:	cmp	r6, r5
   114a0:	mov	r2, r6
   114a4:	movt	r0, #1
   114a8:	movt	r3, #1
   114ac:	moveq	r3, r0
   114b0:	mov	r0, #1
   114b4:	bl	1105c <__printf_chk@plt>
   114b8:	mov	r0, r4
   114bc:	bl	11014 <exit@plt>
   114c0:	movw	r0, #29008	; 0x7150
   114c4:	movw	r1, #24516	; 0x5fc4
   114c8:	mov	r2, #5
   114cc:	movt	r0, #2
   114d0:	movt	r1, #1
   114d4:	ldr	r5, [r0]
   114d8:	mov	r0, #0
   114dc:	bl	10f24 <dcgettext@plt>
   114e0:	mov	r2, r0
   114e4:	movw	r0, #29072	; 0x7190
   114e8:	mov	r1, #1
   114ec:	movt	r0, #2
   114f0:	ldr	r3, [r0]
   114f4:	mov	r0, r5
   114f8:	bl	11074 <__fprintf_chk@plt>
   114fc:	mov	r0, r4
   11500:	bl	11014 <exit@plt>
   11504:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11508:	add	fp, sp, #28
   1150c:	sub	sp, sp, #148	; 0x94
   11510:	mov	r5, r0
   11514:	ldr	r0, [r1]
   11518:	str	r1, [sp, #20]
   1151c:	bl	11fd0 <__assert_fail@plt+0xeb4>
   11520:	movw	r1, #26301	; 0x66bd
   11524:	mov	r0, #6
   11528:	movt	r1, #1
   1152c:	bl	110b0 <setlocale@plt>
   11530:	movw	r4, #25785	; 0x64b9
   11534:	movw	r1, #25697	; 0x6461
   11538:	movt	r4, #1
   1153c:	movt	r1, #1
   11540:	mov	r0, r4
   11544:	bl	110e0 <bindtextdomain@plt>
   11548:	mov	r0, r4
   1154c:	bl	10f3c <textdomain@plt>
   11550:	movw	r0, #28924	; 0x70fc
   11554:	mov	r1, #125	; 0x7d
   11558:	movt	r0, #2
   1155c:	str	r1, [r0]
   11560:	movw	r0, #7380	; 0x1cd4
   11564:	movt	r0, #1
   11568:	bl	15fa0 <__assert_fail@plt+0x4e84>
   1156c:	movw	r7, #26520	; 0x6798
   11570:	movw	r9, #29024	; 0x7160
   11574:	movw	r8, #29016	; 0x7158
   11578:	mov	sl, #0
   1157c:	movt	r7, #1
   11580:	movt	r9, #2
   11584:	movt	r8, #2
   11588:	b	1159c <__assert_fail@plt+0x480>
   1158c:	ldr	r4, [sp, #24]
   11590:	bl	11038 <__errno_location@plt>
   11594:	str	sl, [r0]
   11598:	str	r4, [r9, r6, lsl #2]
   1159c:	ldr	r1, [sp, #20]
   115a0:	movw	r2, #25721	; 0x6479
   115a4:	mov	r0, r5
   115a8:	mov	r3, r7
   115ac:	str	sl, [sp]
   115b0:	movt	r2, #1
   115b4:	bl	10ffc <getopt_long@plt>
   115b8:	cmp	r0, #100	; 0x64
   115bc:	ble	116a0 <__assert_fail@plt+0x584>
   115c0:	cmp	r0, #101	; 0x65
   115c4:	beq	115d8 <__assert_fail@plt+0x4bc>
   115c8:	cmp	r0, #111	; 0x6f
   115cc:	bne	115e0 <__assert_fail@plt+0x4c4>
   115d0:	mov	r1, #1
   115d4:	b	115ec <__assert_fail@plt+0x4d0>
   115d8:	mov	r1, #2
   115dc:	b	115ec <__assert_fail@plt+0x4d0>
   115e0:	cmp	r0, #105	; 0x69
   115e4:	bne	11c3c <__assert_fail@plt+0xb20>
   115e8:	mov	r1, #0
   115ec:	ldr	r4, [r8]
   115f0:	add	r6, r1, r1, lsl #1
   115f4:	add	r1, r9, r6, lsl #2
   115f8:	str	r0, [r1, #4]
   115fc:	b	11608 <__assert_fail@plt+0x4ec>
   11600:	add	r4, r4, #1
   11604:	str	r4, [r8]
   11608:	ldrb	r2, [r4]
   1160c:	sub	r3, r2, #9
   11610:	cmp	r3, #5
   11614:	bcc	11600 <__assert_fail@plt+0x4e4>
   11618:	cmp	r2, #32
   1161c:	beq	11600 <__assert_fail@plt+0x4e4>
   11620:	str	r4, [r1, #8]
   11624:	cmp	r0, #105	; 0x69
   11628:	ldrbeq	r0, [r4]
   1162c:	cmpeq	r0, #76	; 0x4c
   11630:	beq	11c30 <__assert_fail@plt+0xb14>
   11634:	movw	r1, #26344	; 0x66e8
   11638:	mov	r0, r4
   1163c:	movt	r1, #1
   11640:	bl	10eb8 <strcmp@plt>
   11644:	cmp	r0, #0
   11648:	beq	1159c <__assert_fail@plt+0x480>
   1164c:	movw	r0, #26328	; 0x66d8
   11650:	mov	r1, #0
   11654:	mov	r2, #10
   11658:	add	r3, sp, #24
   1165c:	movt	r0, #1
   11660:	str	r0, [sp]
   11664:	mov	r0, r4
   11668:	bl	149cc <__assert_fail@plt+0x38b0>
   1166c:	ldr	r1, [sp, #28]
   11670:	cmp	r1, #0
   11674:	mov	r1, r0
   11678:	movwne	r1, #1
   1167c:	cmp	r0, #0
   11680:	movne	r1, r0
   11684:	cmp	r1, #0
   11688:	beq	1158c <__assert_fail@plt+0x470>
   1168c:	cmp	r1, #1
   11690:	bne	11c44 <__assert_fail@plt+0xb28>
   11694:	mov	r4, #75	; 0x4b
   11698:	bl	11038 <__errno_location@plt>
   1169c:	b	11c4c <__assert_fail@plt+0xb30>
   116a0:	cmn	r0, #1
   116a4:	bne	11ba8 <__assert_fail@plt+0xa8c>
   116a8:	movw	r0, #29000	; 0x7148
   116ac:	movt	r0, #2
   116b0:	ldr	r6, [r0]
   116b4:	cmp	r6, r5
   116b8:	bge	11c88 <__assert_fail@plt+0xb6c>
   116bc:	ldr	r0, [r9, #8]
   116c0:	cmp	r0, #0
   116c4:	beq	11708 <__assert_fail@plt+0x5ec>
   116c8:	ldr	r4, [r9, #4]
   116cc:	ldrb	r5, [r0]
   116d0:	add	r0, r4, #128	; 0x80
   116d4:	lsr	r0, r0, #7
   116d8:	cmp	r0, #2
   116dc:	bhi	116ec <__assert_fail@plt+0x5d0>
   116e0:	bl	10fe4 <__ctype_toupper_loc@plt>
   116e4:	ldr	r0, [r0]
   116e8:	ldr	r4, [r0, r4, lsl #2]
   116ec:	cmp	r5, #76	; 0x4c
   116f0:	bne	11710 <__assert_fail@plt+0x5f4>
   116f4:	movw	r2, #26339	; 0x66e3
   116f8:	str	r4, [sp]
   116fc:	add	r0, sp, #24
   11700:	movt	r2, #1
   11704:	b	11730 <__assert_fail@plt+0x614>
   11708:	mov	r0, #0
   1170c:	b	1175c <__assert_fail@plt+0x640>
   11710:	ldr	r0, [r9]
   11714:	movw	r2, #26355	; 0x66f3
   11718:	mov	r1, #0
   1171c:	str	r4, [sp]
   11720:	movt	r2, #1
   11724:	str	r1, [sp, #12]
   11728:	str	r0, [sp, #8]
   1172c:	add	r0, sp, #24
   11730:	movw	r3, #26346	; 0x66ea
   11734:	mov	r1, #1
   11738:	movt	r3, #1
   1173c:	bl	10fa8 <__asprintf_chk@plt>
   11740:	cmn	r0, #1
   11744:	ble	11b6c <__assert_fail@plt+0xa50>
   11748:	ldr	r0, [sp, #24]
   1174c:	bl	110bc <putenv@plt>
   11750:	cmp	r0, #0
   11754:	bne	11c08 <__assert_fail@plt+0xaec>
   11758:	mov	r0, #1
   1175c:	ldr	r1, [r9, #20]
   11760:	cmp	r1, #0
   11764:	beq	117f4 <__assert_fail@plt+0x6d8>
   11768:	ldr	r4, [r9, #16]
   1176c:	ldrb	r5, [r1]
   11770:	add	r0, r4, #128	; 0x80
   11774:	lsr	r0, r0, #7
   11778:	cmp	r0, #2
   1177c:	bhi	1178c <__assert_fail@plt+0x670>
   11780:	bl	10fe4 <__ctype_toupper_loc@plt>
   11784:	ldr	r0, [r0]
   11788:	ldr	r4, [r0, r4, lsl #2]
   1178c:	cmp	r5, #76	; 0x4c
   11790:	bne	117a8 <__assert_fail@plt+0x68c>
   11794:	movw	r2, #26339	; 0x66e3
   11798:	add	r0, sp, #24
   1179c:	str	r4, [sp]
   117a0:	movt	r2, #1
   117a4:	b	117c8 <__assert_fail@plt+0x6ac>
   117a8:	ldr	r0, [r9, #12]
   117ac:	movw	r2, #26355	; 0x66f3
   117b0:	mov	r1, #0
   117b4:	str	r4, [sp]
   117b8:	str	r1, [sp, #12]
   117bc:	movt	r2, #1
   117c0:	str	r0, [sp, #8]
   117c4:	add	r0, sp, #24
   117c8:	movw	r3, #26346	; 0x66ea
   117cc:	mov	r1, #1
   117d0:	movt	r3, #1
   117d4:	bl	10fa8 <__asprintf_chk@plt>
   117d8:	cmp	r0, #0
   117dc:	blt	11b6c <__assert_fail@plt+0xa50>
   117e0:	ldr	r0, [sp, #24]
   117e4:	bl	110bc <putenv@plt>
   117e8:	cmp	r0, #0
   117ec:	bne	11c08 <__assert_fail@plt+0xaec>
   117f0:	mov	r0, #1
   117f4:	ldr	r1, [r9, #32]
   117f8:	cmp	r1, #0
   117fc:	beq	11840 <__assert_fail@plt+0x724>
   11800:	ldr	r4, [r9, #28]
   11804:	ldrb	r5, [r1]
   11808:	add	r0, r4, #128	; 0x80
   1180c:	lsr	r0, r0, #7
   11810:	cmp	r0, #2
   11814:	bhi	11824 <__assert_fail@plt+0x708>
   11818:	bl	10fe4 <__ctype_toupper_loc@plt>
   1181c:	ldr	r0, [r0]
   11820:	ldr	r4, [r0, r4, lsl #2]
   11824:	cmp	r5, #76	; 0x4c
   11828:	bne	11854 <__assert_fail@plt+0x738>
   1182c:	movw	r2, #26339	; 0x66e3
   11830:	add	r0, sp, #24
   11834:	str	r4, [sp]
   11838:	movt	r2, #1
   1183c:	b	11874 <__assert_fail@plt+0x758>
   11840:	cmp	r0, #0
   11844:	bne	1189c <__assert_fail@plt+0x780>
   11848:	movw	r1, #25825	; 0x64e1
   1184c:	movt	r1, #1
   11850:	b	11c90 <__assert_fail@plt+0xb74>
   11854:	ldr	r0, [r9, #24]
   11858:	movw	r2, #26355	; 0x66f3
   1185c:	mov	r1, #0
   11860:	str	r4, [sp]
   11864:	str	r1, [sp, #12]
   11868:	movt	r2, #1
   1186c:	str	r0, [sp, #8]
   11870:	add	r0, sp, #24
   11874:	movw	r3, #26346	; 0x66ea
   11878:	mov	r1, #1
   1187c:	movt	r3, #1
   11880:	bl	10fa8 <__asprintf_chk@plt>
   11884:	cmp	r0, #0
   11888:	blt	11b6c <__assert_fail@plt+0xa50>
   1188c:	ldr	r0, [sp, #24]
   11890:	bl	110bc <putenv@plt>
   11894:	cmp	r0, #0
   11898:	bne	11c08 <__assert_fail@plt+0xaec>
   1189c:	movw	r0, #29072	; 0x7190
   118a0:	mov	r1, #47	; 0x2f
   118a4:	movt	r0, #2
   118a8:	ldr	r5, [r0]
   118ac:	mov	r0, r5
   118b0:	bl	1102c <strchr@plt>
   118b4:	cmp	r0, #0
   118b8:	str	r6, [sp, #16]
   118bc:	beq	118dc <__assert_fail@plt+0x7c0>
   118c0:	mov	r0, r5
   118c4:	bl	11dbc <__assert_fail@plt+0xca0>
   118c8:	mov	r5, r0
   118cc:	movw	r0, #29060	; 0x7184
   118d0:	movt	r0, #2
   118d4:	str	r5, [r0]
   118d8:	b	11920 <__assert_fail@plt+0x804>
   118dc:	movw	r0, #26406	; 0x6726
   118e0:	movt	r0, #1
   118e4:	bl	14998 <__assert_fail@plt+0x387c>
   118e8:	cmp	r0, #0
   118ec:	beq	11abc <__assert_fail@plt+0x9a0>
   118f0:	mov	r4, r0
   118f4:	bl	11dbc <__assert_fail@plt+0xca0>
   118f8:	movw	r1, #29060	; 0x7184
   118fc:	movt	r1, #2
   11900:	str	r0, [r1]
   11904:	mov	r0, r4
   11908:	bl	11fa8 <__assert_fail@plt+0xe8c>
   1190c:	movw	r0, #29060	; 0x7184
   11910:	movt	r0, #2
   11914:	ldr	r5, [r0]
   11918:	cmp	r5, #0
   1191c:	beq	11b34 <__assert_fail@plt+0xa18>
   11920:	movw	r0, #26426	; 0x673a
   11924:	movt	r0, #1
   11928:	bl	10fb4 <getenv@plt>
   1192c:	mov	r9, r0
   11930:	movw	r0, #26437	; 0x6745
   11934:	movt	r0, #1
   11938:	str	r0, [fp, #-36]	; 0xffffffdc
   1193c:	mov	r0, #0
   11940:	str	r5, [fp, #-40]	; 0xffffffd8
   11944:	str	r0, [fp, #-32]	; 0xffffffe0
   11948:	ldrb	r0, [r5]
   1194c:	cmp	r0, #0
   11950:	beq	119d4 <__assert_fail@plt+0x8b8>
   11954:	movw	sl, #26466	; 0x6762
   11958:	movw	r7, #26479	; 0x676f
   1195c:	sub	r0, fp, #40	; 0x28
   11960:	sub	r8, fp, #44	; 0x2c
   11964:	add	r4, sp, #24
   11968:	add	r6, r0, #4
   1196c:	movt	sl, #1
   11970:	movt	r7, #1
   11974:	mov	r0, r8
   11978:	mov	r1, #1
   1197c:	mov	r2, r7
   11980:	mov	r3, r5
   11984:	str	sl, [sp]
   11988:	bl	10fa8 <__asprintf_chk@plt>
   1198c:	cmn	r0, #1
   11990:	ble	11b6c <__assert_fail@plt+0xa50>
   11994:	ldr	r1, [fp, #-44]	; 0xffffffd4
   11998:	mov	r0, #3
   1199c:	mov	r2, r4
   119a0:	bl	110ec <__xstat64@plt>
   119a4:	mov	r1, r0
   119a8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   119ac:	cmp	r1, #0
   119b0:	beq	119e4 <__assert_fail@plt+0x8c8>
   119b4:	bl	11fa8 <__assert_fail@plt+0xe8c>
   119b8:	ldr	r0, [r6]
   119bc:	cmp	r0, #0
   119c0:	beq	11b70 <__assert_fail@plt+0xa54>
   119c4:	ldr	r5, [r6], #4
   119c8:	ldrb	r0, [r5]
   119cc:	cmp	r0, #0
   119d0:	bne	11974 <__assert_fail@plt+0x858>
   119d4:	movw	r0, #26466	; 0x6762
   119d8:	movt	r0, #1
   119dc:	bl	14914 <__assert_fail@plt+0x37f8>
   119e0:	str	r0, [fp, #-44]	; 0xffffffd4
   119e4:	ldr	r4, [sp, #16]
   119e8:	cmp	r9, #0
   119ec:	beq	11a08 <__assert_fail@plt+0x8ec>
   119f0:	movw	r2, #26503	; 0x6787
   119f4:	str	r0, [sp, #4]
   119f8:	str	r9, [sp]
   119fc:	add	r0, sp, #24
   11a00:	movt	r2, #1
   11a04:	b	11a18 <__assert_fail@plt+0x8fc>
   11a08:	movw	r2, #26512	; 0x6790
   11a0c:	str	r0, [sp]
   11a10:	add	r0, sp, #24
   11a14:	movt	r2, #1
   11a18:	movw	r3, #26426	; 0x673a
   11a1c:	mov	r1, #1
   11a20:	movt	r3, #1
   11a24:	bl	10fa8 <__asprintf_chk@plt>
   11a28:	cmn	r0, #1
   11a2c:	ble	11b6c <__assert_fail@plt+0xa50>
   11a30:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11a34:	bl	11fa8 <__assert_fail@plt+0xe8c>
   11a38:	ldr	r0, [sp, #24]
   11a3c:	bl	110bc <putenv@plt>
   11a40:	cmp	r0, #0
   11a44:	bne	11c08 <__assert_fail@plt+0xaec>
   11a48:	ldr	r0, [sp, #20]
   11a4c:	add	r4, r0, r4, lsl #2
   11a50:	movw	r0, #29060	; 0x7184
   11a54:	movt	r0, #2
   11a58:	ldr	r0, [r0]
   11a5c:	bl	11fa8 <__assert_fail@plt+0xe8c>
   11a60:	ldr	r0, [r4]
   11a64:	mov	r1, r4
   11a68:	bl	10ef4 <execvp@plt>
   11a6c:	bl	11038 <__errno_location@plt>
   11a70:	ldr	r5, [r0]
   11a74:	movw	r1, #25891	; 0x6523
   11a78:	mov	r0, #0
   11a7c:	mov	r2, #5
   11a80:	movt	r1, #1
   11a84:	bl	10f24 <dcgettext@plt>
   11a88:	mov	r6, r0
   11a8c:	ldr	r0, [r4]
   11a90:	bl	13c04 <__assert_fail@plt+0x2ae8>
   11a94:	mov	r3, r0
   11a98:	mov	r0, #0
   11a9c:	mov	r1, r5
   11aa0:	mov	r2, r6
   11aa4:	bl	10f9c <error@plt>
   11aa8:	mov	r0, #126	; 0x7e
   11aac:	cmp	r5, #2
   11ab0:	movweq	r0, #127	; 0x7f
   11ab4:	sub	sp, fp, #28
   11ab8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11abc:	movw	r0, #26421	; 0x6735
   11ac0:	movt	r0, #1
   11ac4:	bl	10fb4 <getenv@plt>
   11ac8:	cmp	r0, #0
   11acc:	beq	11b44 <__assert_fail@plt+0xa28>
   11ad0:	bl	14914 <__assert_fail@plt+0x37f8>
   11ad4:	movw	r1, #25727	; 0x647f
   11ad8:	mov	r4, r0
   11adc:	movt	r1, #1
   11ae0:	bl	110a4 <strtok@plt>
   11ae4:	cmp	r0, #0
   11ae8:	beq	11904 <__assert_fail@plt+0x7e8>
   11aec:	movw	r6, #25727	; 0x647f
   11af0:	movt	r6, #1
   11af4:	mov	r1, r5
   11af8:	mov	r2, #0
   11afc:	bl	11eb0 <__assert_fail@plt+0xd94>
   11b00:	mov	r1, #1
   11b04:	mov	r7, r0
   11b08:	bl	11080 <access@plt>
   11b0c:	cmp	r0, #0
   11b10:	beq	11b4c <__assert_fail@plt+0xa30>
   11b14:	mov	r0, r7
   11b18:	bl	11fa8 <__assert_fail@plt+0xe8c>
   11b1c:	mov	r0, #0
   11b20:	mov	r1, r6
   11b24:	bl	110a4 <strtok@plt>
   11b28:	cmp	r0, #0
   11b2c:	bne	11af4 <__assert_fail@plt+0x9d8>
   11b30:	b	11904 <__assert_fail@plt+0x7e8>
   11b34:	movw	r0, #25866	; 0x650a
   11b38:	movt	r0, #1
   11b3c:	bl	14914 <__assert_fail@plt+0x37f8>
   11b40:	b	118c8 <__assert_fail@plt+0x7ac>
   11b44:	mov	r4, #0
   11b48:	b	11904 <__assert_fail@plt+0x7e8>
   11b4c:	mov	r0, r7
   11b50:	bl	11dbc <__assert_fail@plt+0xca0>
   11b54:	movw	r1, #29060	; 0x7184
   11b58:	movt	r1, #2
   11b5c:	str	r0, [r1]
   11b60:	mov	r0, r7
   11b64:	bl	11fa8 <__assert_fail@plt+0xe8c>
   11b68:	b	11904 <__assert_fail@plt+0x7e8>
   11b6c:	bl	14954 <__assert_fail@plt+0x3838>
   11b70:	movw	r1, #26485	; 0x6775
   11b74:	mov	r0, #0
   11b78:	mov	r2, #5
   11b7c:	movt	r1, #1
   11b80:	bl	10f24 <dcgettext@plt>
   11b84:	mov	r4, r0
   11b88:	movw	r0, #26466	; 0x6762
   11b8c:	movt	r0, #1
   11b90:	bl	13c04 <__assert_fail@plt+0x2ae8>
   11b94:	mov	r3, r0
   11b98:	mov	r0, #125	; 0x7d
   11b9c:	mov	r1, #0
   11ba0:	mov	r2, r4
   11ba4:	bl	10f9c <error@plt>
   11ba8:	cmn	r0, #3
   11bac:	bne	11bf8 <__assert_fail@plt+0xadc>
   11bb0:	movw	r0, #28920	; 0x70f8
   11bb4:	movw	r2, #25795	; 0x64c3
   11bb8:	mov	r1, #0
   11bbc:	movt	r0, #2
   11bc0:	movt	r2, #1
   11bc4:	str	r1, [sp, #4]
   11bc8:	movw	r1, #25690	; 0x645a
   11bcc:	ldr	r3, [r0]
   11bd0:	movw	r0, #29012	; 0x7154
   11bd4:	str	r2, [sp]
   11bd8:	movw	r2, #25781	; 0x64b5
   11bdc:	movt	r1, #1
   11be0:	movt	r0, #2
   11be4:	movt	r2, #1
   11be8:	ldr	r0, [r0]
   11bec:	bl	141c0 <__assert_fail@plt+0x30a4>
   11bf0:	mov	r0, #0
   11bf4:	bl	11014 <exit@plt>
   11bf8:	cmn	r0, #2
   11bfc:	bne	11c3c <__assert_fail@plt+0xb20>
   11c00:	mov	r0, #0
   11c04:	bl	11218 <__assert_fail@plt+0xfc>
   11c08:	bl	11038 <__errno_location@plt>
   11c0c:	ldr	r4, [r0]
   11c10:	movw	r1, #26365	; 0x66fd
   11c14:	mov	r0, #0
   11c18:	mov	r2, #5
   11c1c:	movt	r1, #1
   11c20:	bl	10f24 <dcgettext@plt>
   11c24:	mov	r5, r0
   11c28:	ldr	r0, [sp, #24]
   11c2c:	b	11c70 <__assert_fail@plt+0xb54>
   11c30:	movw	r1, #25729	; 0x6481
   11c34:	movt	r1, #1
   11c38:	b	11c90 <__assert_fail@plt+0xb74>
   11c3c:	mov	r0, #125	; 0x7d
   11c40:	bl	11218 <__assert_fail@plt+0xfc>
   11c44:	bl	11038 <__errno_location@plt>
   11c48:	ldr	r4, [r0]
   11c4c:	str	r4, [r0]
   11c50:	movw	r1, #25765	; 0x64a5
   11c54:	mov	r2, #5
   11c58:	ldr	r4, [r0]
   11c5c:	movt	r1, #1
   11c60:	mov	r0, #0
   11c64:	bl	10f24 <dcgettext@plt>
   11c68:	mov	r5, r0
   11c6c:	ldr	r0, [r8]
   11c70:	bl	13c04 <__assert_fail@plt+0x2ae8>
   11c74:	mov	r3, r0
   11c78:	mov	r0, #125	; 0x7d
   11c7c:	mov	r1, r4
   11c80:	mov	r2, r5
   11c84:	bl	10f9c <error@plt>
   11c88:	movw	r1, #25809	; 0x64d1
   11c8c:	movt	r1, #1
   11c90:	mov	r0, #0
   11c94:	mov	r2, #5
   11c98:	bl	10f24 <dcgettext@plt>
   11c9c:	mov	r2, r0
   11ca0:	mov	r0, #0
   11ca4:	mov	r1, #0
   11ca8:	bl	10f9c <error@plt>
   11cac:	mov	r0, #125	; 0x7d
   11cb0:	bl	11218 <__assert_fail@plt+0xfc>
   11cb4:	movw	r1, #29064	; 0x7188
   11cb8:	movt	r1, #2
   11cbc:	str	r0, [r1]
   11cc0:	bx	lr
   11cc4:	movw	r1, #29068	; 0x718c
   11cc8:	movt	r1, #2
   11ccc:	strb	r0, [r1]
   11cd0:	bx	lr
   11cd4:	push	{r4, r5, r6, sl, fp, lr}
   11cd8:	add	fp, sp, #16
   11cdc:	sub	sp, sp, #8
   11ce0:	movw	r0, #29012	; 0x7154
   11ce4:	movt	r0, #2
   11ce8:	ldr	r0, [r0]
   11cec:	bl	159cc <__assert_fail@plt+0x48b0>
   11cf0:	cmp	r0, #0
   11cf4:	beq	11d1c <__assert_fail@plt+0xc00>
   11cf8:	movw	r0, #29068	; 0x718c
   11cfc:	movt	r0, #2
   11d00:	ldrb	r0, [r0]
   11d04:	cmp	r0, #0
   11d08:	beq	11d3c <__assert_fail@plt+0xc20>
   11d0c:	bl	11038 <__errno_location@plt>
   11d10:	ldr	r0, [r0]
   11d14:	cmp	r0, #32
   11d18:	bne	11d3c <__assert_fail@plt+0xc20>
   11d1c:	movw	r0, #29008	; 0x7150
   11d20:	movt	r0, #2
   11d24:	ldr	r0, [r0]
   11d28:	bl	159cc <__assert_fail@plt+0x48b0>
   11d2c:	cmp	r0, #0
   11d30:	subeq	sp, fp, #16
   11d34:	popeq	{r4, r5, r6, sl, fp, pc}
   11d38:	b	11dac <__assert_fail@plt+0xc90>
   11d3c:	movw	r1, #26687	; 0x683f
   11d40:	mov	r0, #0
   11d44:	mov	r2, #5
   11d48:	movt	r1, #1
   11d4c:	bl	10f24 <dcgettext@plt>
   11d50:	mov	r4, r0
   11d54:	movw	r0, #29064	; 0x7188
   11d58:	movt	r0, #2
   11d5c:	ldr	r6, [r0]
   11d60:	bl	11038 <__errno_location@plt>
   11d64:	ldr	r5, [r0]
   11d68:	cmp	r6, #0
   11d6c:	bne	11d88 <__assert_fail@plt+0xc6c>
   11d70:	movw	r2, #26703	; 0x684f
   11d74:	mov	r0, #0
   11d78:	mov	r1, r5
   11d7c:	mov	r3, r4
   11d80:	movt	r2, #1
   11d84:	b	11da8 <__assert_fail@plt+0xc8c>
   11d88:	mov	r0, r6
   11d8c:	bl	1387c <__assert_fail@plt+0x2760>
   11d90:	movw	r2, #26699	; 0x684b
   11d94:	mov	r3, r0
   11d98:	str	r4, [sp]
   11d9c:	mov	r0, #0
   11da0:	mov	r1, r5
   11da4:	movt	r2, #1
   11da8:	bl	10f9c <error@plt>
   11dac:	movw	r0, #28924	; 0x70fc
   11db0:	movt	r0, #2
   11db4:	ldr	r0, [r0]
   11db8:	bl	10edc <_exit@plt>
   11dbc:	push	{fp, lr}
   11dc0:	mov	fp, sp
   11dc4:	bl	11e1c <__assert_fail@plt+0xd00>
   11dc8:	cmp	r0, #0
   11dcc:	popne	{fp, pc}
   11dd0:	bl	14954 <__assert_fail@plt+0x3838>
   11dd4:	push	{r4, r5, r6, sl, fp, lr}
   11dd8:	add	fp, sp, #16
   11ddc:	mov	r5, r0
   11de0:	mov	r4, r0
   11de4:	ldrb	r6, [r5], #-1
   11de8:	bl	157a4 <__assert_fail@plt+0x4688>
   11dec:	sub	r2, r0, r4
   11df0:	sub	r0, r6, #47	; 0x2f
   11df4:	clz	r0, r0
   11df8:	lsr	r1, r0, #5
   11dfc:	mov	r0, r2
   11e00:	cmp	r2, r1
   11e04:	popls	{r4, r5, r6, sl, fp, pc}
   11e08:	ldrb	r3, [r5, r0]
   11e0c:	sub	r2, r0, #1
   11e10:	cmp	r3, #47	; 0x2f
   11e14:	beq	11dfc <__assert_fail@plt+0xce0>
   11e18:	pop	{r4, r5, r6, sl, fp, pc}
   11e1c:	push	{r4, r5, r6, sl, fp, lr}
   11e20:	add	fp, sp, #16
   11e24:	mov	r6, r0
   11e28:	mov	r4, r0
   11e2c:	ldrb	r5, [r6], #-1
   11e30:	bl	157a4 <__assert_fail@plt+0x4688>
   11e34:	sub	r1, r0, r4
   11e38:	sub	r0, r5, #47	; 0x2f
   11e3c:	clz	r0, r0
   11e40:	lsr	r0, r0, #5
   11e44:	mov	r5, r1
   11e48:	cmp	r1, r0
   11e4c:	bls	11e60 <__assert_fail@plt+0xd44>
   11e50:	ldrb	r2, [r6, r5]
   11e54:	sub	r1, r5, #1
   11e58:	cmp	r2, #47	; 0x2f
   11e5c:	beq	11e44 <__assert_fail@plt+0xd28>
   11e60:	cmp	r5, #0
   11e64:	mov	r0, r5
   11e68:	addeq	r0, r0, #1
   11e6c:	add	r0, r0, #1
   11e70:	bl	156c0 <__assert_fail@plt+0x45a4>
   11e74:	mov	r6, r0
   11e78:	cmp	r0, #0
   11e7c:	beq	11ea8 <__assert_fail@plt+0xd8c>
   11e80:	mov	r0, r6
   11e84:	mov	r1, r4
   11e88:	mov	r2, r5
   11e8c:	bl	10ee8 <memcpy@plt>
   11e90:	cmp	r5, #0
   11e94:	moveq	r0, #46	; 0x2e
   11e98:	moveq	r5, #1
   11e9c:	strbeq	r0, [r6]
   11ea0:	mov	r0, #0
   11ea4:	strb	r0, [r6, r5]
   11ea8:	mov	r0, r6
   11eac:	pop	{r4, r5, r6, sl, fp, pc}
   11eb0:	push	{fp, lr}
   11eb4:	mov	fp, sp
   11eb8:	bl	11ec8 <__assert_fail@plt+0xdac>
   11ebc:	cmp	r0, #0
   11ec0:	popne	{fp, pc}
   11ec4:	bl	14954 <__assert_fail@plt+0x3838>
   11ec8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ecc:	add	fp, sp, #28
   11ed0:	push	{r2}		; (str r2, [sp, #-4]!)
   11ed4:	mov	sl, r1
   11ed8:	mov	r7, r0
   11edc:	bl	157a4 <__assert_fail@plt+0x4688>
   11ee0:	sub	r4, r0, r7
   11ee4:	bl	157f0 <__assert_fail@plt+0x46d4>
   11ee8:	mov	r6, r0
   11eec:	add	r5, r4, r0
   11ef0:	mov	r0, sl
   11ef4:	bl	11020 <strlen@plt>
   11ef8:	mov	r9, r0
   11efc:	cmp	r6, #0
   11f00:	beq	11f28 <__assert_fail@plt+0xe0c>
   11f04:	add	r0, r7, r5
   11f08:	mov	r4, #0
   11f0c:	ldrb	r0, [r0, #-1]
   11f10:	cmp	r0, #47	; 0x2f
   11f14:	beq	11f38 <__assert_fail@plt+0xe1c>
   11f18:	ldrb	r0, [sl]
   11f1c:	subs	r4, r0, #47	; 0x2f
   11f20:	movwne	r4, #47	; 0x2f
   11f24:	b	11f38 <__assert_fail@plt+0xe1c>
   11f28:	ldrb	r0, [sl]
   11f2c:	mov	r4, #0
   11f30:	cmp	r0, #47	; 0x2f
   11f34:	movweq	r4, #46	; 0x2e
   11f38:	uxtb	r8, r4
   11f3c:	add	r0, r9, r5
   11f40:	cmp	r8, #0
   11f44:	movwne	r8, #1
   11f48:	add	r0, r0, r8
   11f4c:	add	r0, r0, #1
   11f50:	bl	156c0 <__assert_fail@plt+0x45a4>
   11f54:	mov	r6, r0
   11f58:	cmp	r0, #0
   11f5c:	beq	11f9c <__assert_fail@plt+0xe80>
   11f60:	mov	r0, r6
   11f64:	mov	r1, r7
   11f68:	mov	r2, r5
   11f6c:	mvn	r3, #0
   11f70:	bl	11110 <__mempcpy_chk@plt>
   11f74:	ldr	r1, [sp]
   11f78:	strb	r4, [r0], r8
   11f7c:	mov	r2, r9
   11f80:	mvn	r3, #0
   11f84:	cmp	r1, #0
   11f88:	strne	r0, [r1]
   11f8c:	mov	r1, sl
   11f90:	bl	11110 <__mempcpy_chk@plt>
   11f94:	mov	r1, #0
   11f98:	strb	r1, [r0]
   11f9c:	mov	r0, r6
   11fa0:	sub	sp, fp, #28
   11fa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fa8:	push	{r4, r5, r6, sl, fp, lr}
   11fac:	add	fp, sp, #16
   11fb0:	mov	r4, r0
   11fb4:	bl	11038 <__errno_location@plt>
   11fb8:	ldr	r6, [r0]
   11fbc:	mov	r5, r0
   11fc0:	mov	r0, r4
   11fc4:	bl	10ed0 <free@plt>
   11fc8:	str	r6, [r5]
   11fcc:	pop	{r4, r5, r6, sl, fp, pc}
   11fd0:	push	{r4, r5, fp, lr}
   11fd4:	add	fp, sp, #8
   11fd8:	cmp	r0, #0
   11fdc:	beq	12070 <__assert_fail@plt+0xf54>
   11fe0:	mov	r1, #47	; 0x2f
   11fe4:	mov	r4, r0
   11fe8:	bl	110c8 <strrchr@plt>
   11fec:	cmp	r0, #0
   11ff0:	mov	r5, r4
   11ff4:	addne	r5, r0, #1
   11ff8:	sub	r0, r5, r4
   11ffc:	cmp	r0, #7
   12000:	blt	12054 <__assert_fail@plt+0xf38>
   12004:	movw	r1, #26762	; 0x688a
   12008:	sub	r0, r5, #7
   1200c:	mov	r2, #7
   12010:	movt	r1, #1
   12014:	bl	110f8 <strncmp@plt>
   12018:	cmp	r0, #0
   1201c:	bne	12054 <__assert_fail@plt+0xf38>
   12020:	movw	r1, #26770	; 0x6892
   12024:	mov	r0, r5
   12028:	mov	r2, #3
   1202c:	movt	r1, #1
   12030:	bl	110f8 <strncmp@plt>
   12034:	cmp	r0, #0
   12038:	beq	12044 <__assert_fail@plt+0xf28>
   1203c:	mov	r4, r5
   12040:	b	12054 <__assert_fail@plt+0xf38>
   12044:	movw	r0, #28992	; 0x7140
   12048:	add	r4, r5, #3
   1204c:	movt	r0, #2
   12050:	str	r4, [r0]
   12054:	movw	r0, #28996	; 0x7144
   12058:	movt	r0, #2
   1205c:	str	r4, [r0]
   12060:	movw	r0, #29072	; 0x7190
   12064:	movt	r0, #2
   12068:	str	r4, [r0]
   1206c:	pop	{r4, r5, fp, pc}
   12070:	movw	r0, #29008	; 0x7150
   12074:	mov	r1, #55	; 0x37
   12078:	mov	r2, #1
   1207c:	movt	r0, #2
   12080:	ldr	r3, [r0]
   12084:	movw	r0, #26706	; 0x6852
   12088:	movt	r0, #1
   1208c:	bl	10f60 <fwrite@plt>
   12090:	bl	11104 <abort@plt>
   12094:	push	{r4, r5, r6, sl, fp, lr}
   12098:	add	fp, sp, #16
   1209c:	mov	r4, r0
   120a0:	movw	r0, #29080	; 0x7198
   120a4:	movt	r0, #2
   120a8:	cmp	r4, #0
   120ac:	moveq	r4, r0
   120b0:	bl	11038 <__errno_location@plt>
   120b4:	ldr	r6, [r0]
   120b8:	mov	r5, r0
   120bc:	mov	r0, r4
   120c0:	mov	r1, #48	; 0x30
   120c4:	bl	14854 <__assert_fail@plt+0x3738>
   120c8:	str	r6, [r5]
   120cc:	pop	{r4, r5, r6, sl, fp, pc}
   120d0:	movw	r1, #29080	; 0x7198
   120d4:	cmp	r0, #0
   120d8:	movt	r1, #2
   120dc:	movne	r1, r0
   120e0:	ldr	r0, [r1]
   120e4:	bx	lr
   120e8:	movw	r2, #29080	; 0x7198
   120ec:	cmp	r0, #0
   120f0:	movt	r2, #2
   120f4:	movne	r2, r0
   120f8:	str	r1, [r2]
   120fc:	bx	lr
   12100:	movw	r3, #29080	; 0x7198
   12104:	cmp	r0, #0
   12108:	movt	r3, #2
   1210c:	movne	r3, r0
   12110:	ubfx	r0, r1, #5, #3
   12114:	and	r1, r1, #31
   12118:	add	r0, r3, r0, lsl #2
   1211c:	ldr	r3, [r0, #8]
   12120:	eor	r2, r2, r3, lsr r1
   12124:	and	r2, r2, #1
   12128:	eor	r2, r3, r2, lsl r1
   1212c:	str	r2, [r0, #8]
   12130:	mov	r0, #1
   12134:	and	r0, r0, r3, lsr r1
   12138:	bx	lr
   1213c:	movw	r2, #29080	; 0x7198
   12140:	cmp	r0, #0
   12144:	movt	r2, #2
   12148:	movne	r2, r0
   1214c:	ldr	r0, [r2, #4]
   12150:	str	r1, [r2, #4]
   12154:	bx	lr
   12158:	movw	r3, #29080	; 0x7198
   1215c:	cmp	r0, #0
   12160:	movt	r3, #2
   12164:	movne	r3, r0
   12168:	cmp	r1, #0
   1216c:	mov	r0, #10
   12170:	cmpne	r2, #0
   12174:	str	r0, [r3]
   12178:	bne	12188 <__assert_fail@plt+0x106c>
   1217c:	push	{fp, lr}
   12180:	mov	fp, sp
   12184:	bl	11104 <abort@plt>
   12188:	str	r1, [r3, #40]	; 0x28
   1218c:	str	r2, [r3, #44]	; 0x2c
   12190:	bx	lr
   12194:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12198:	add	fp, sp, #28
   1219c:	sub	sp, sp, #20
   121a0:	mov	r7, r0
   121a4:	ldr	r0, [fp, #8]
   121a8:	movw	r5, #29080	; 0x7198
   121ac:	mov	r8, r3
   121b0:	mov	r9, r2
   121b4:	mov	sl, r1
   121b8:	movt	r5, #2
   121bc:	cmp	r0, #0
   121c0:	movne	r5, r0
   121c4:	bl	11038 <__errno_location@plt>
   121c8:	mov	r4, r0
   121cc:	ldm	r5, {r0, r1}
   121d0:	ldr	r2, [r5, #40]	; 0x28
   121d4:	ldr	r3, [r5, #44]	; 0x2c
   121d8:	add	r5, r5, #8
   121dc:	ldr	r6, [r4]
   121e0:	stm	sp, {r0, r1, r5}
   121e4:	str	r2, [sp, #12]
   121e8:	str	r3, [sp, #16]
   121ec:	mov	r0, r7
   121f0:	mov	r1, sl
   121f4:	mov	r2, r9
   121f8:	mov	r3, r8
   121fc:	bl	1220c <__assert_fail@plt+0x10f0>
   12200:	str	r6, [r4]
   12204:	sub	sp, fp, #28
   12208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1220c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12210:	add	fp, sp, #28
   12214:	sub	sp, sp, #156	; 0x9c
   12218:	str	r0, [sp, #80]	; 0x50
   1221c:	ldr	r0, [fp, #12]
   12220:	mov	r6, r1
   12224:	mov	r9, r3
   12228:	str	r2, [fp, #-84]	; 0xffffffac
   1222c:	and	r1, r0, #4
   12230:	str	r1, [sp, #32]
   12234:	and	r1, r0, #1
   12238:	str	r1, [sp, #36]	; 0x24
   1223c:	ubfx	r4, r0, #1, #1
   12240:	bl	10f78 <__ctype_get_mb_cur_max@plt>
   12244:	str	r0, [sp, #40]	; 0x28
   12248:	ldr	r0, [fp, #24]
   1224c:	ldr	r7, [fp, #8]
   12250:	mov	r1, #0
   12254:	mov	r5, #1
   12258:	str	r1, [fp, #-56]	; 0xffffffc8
   1225c:	mov	r1, #0
   12260:	str	r1, [sp, #60]	; 0x3c
   12264:	str	r0, [sp, #76]	; 0x4c
   12268:	ldr	r0, [fp, #20]
   1226c:	str	r0, [sp, #72]	; 0x48
   12270:	mov	r0, #0
   12274:	str	r0, [sp, #56]	; 0x38
   12278:	mov	r0, #0
   1227c:	str	r0, [sp, #92]	; 0x5c
   12280:	mov	r0, #0
   12284:	str	r0, [fp, #-76]	; 0xffffffb4
   12288:	mov	r0, #0
   1228c:	cmp	r7, #10
   12290:	bhi	13210 <__assert_fail@plt+0x20f4>
   12294:	add	r1, pc, #28
   12298:	mov	sl, r6
   1229c:	ldr	r6, [sp, #80]	; 0x50
   122a0:	ldr	ip, [fp, #-84]	; 0xffffffac
   122a4:	mov	r8, #0
   122a8:	mov	r2, #1
   122ac:	mov	r3, #0
   122b0:	mov	lr, r9
   122b4:	ldr	pc, [r1, r7, lsl #2]
   122b8:	muleq	r1, ip, r3
   122bc:	andeq	r2, r1, r8, asr #7
   122c0:	andeq	r2, r1, ip, lsl #7
   122c4:	andeq	r2, r1, r4, lsl #7
   122c8:			; <UNDEFINED> instruction: 0x000123bc
   122cc:	andeq	r2, r1, r0, lsl r4
   122d0:	andeq	r2, r1, ip, lsr #7
   122d4:	andeq	r2, r1, ip, ror #8
   122d8:	andeq	r2, r1, r4, ror #5
   122dc:	andeq	r2, r1, r4, ror #5
   122e0:	andeq	r2, r1, ip, lsl #6
   122e4:	movw	r0, #26852	; 0x68e4
   122e8:	mov	r1, r7
   122ec:	movt	r0, #1
   122f0:	bl	13c1c <__assert_fail@plt+0x2b00>
   122f4:	str	r0, [sp, #72]	; 0x48
   122f8:	movw	r0, #26854	; 0x68e6
   122fc:	mov	r1, r7
   12300:	movt	r0, #1
   12304:	bl	13c1c <__assert_fail@plt+0x2b00>
   12308:	str	r0, [sp, #76]	; 0x4c
   1230c:	str	r5, [fp, #-48]	; 0xffffffd0
   12310:	mov	r8, #0
   12314:	mov	r5, r7
   12318:	tst	r4, #1
   1231c:	bne	12354 <__assert_fail@plt+0x1238>
   12320:	ldr	r0, [sp, #72]	; 0x48
   12324:	ldrb	r0, [r0]
   12328:	cmp	r0, #0
   1232c:	beq	12354 <__assert_fail@plt+0x1238>
   12330:	ldr	r1, [sp, #72]	; 0x48
   12334:	mov	r8, #0
   12338:	add	r1, r1, #1
   1233c:	cmp	r8, sl
   12340:	strbcc	r0, [r6, r8]
   12344:	ldrb	r0, [r1, r8]
   12348:	add	r8, r8, #1
   1234c:	cmp	r0, #0
   12350:	bne	1233c <__assert_fail@plt+0x1220>
   12354:	ldr	r7, [sp, #76]	; 0x4c
   12358:	mov	r0, r7
   1235c:	bl	11020 <strlen@plt>
   12360:	str	r7, [sp, #92]	; 0x5c
   12364:	mov	r7, r5
   12368:	ldr	ip, [fp, #-84]	; 0xffffffac
   1236c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12370:	str	r0, [fp, #-76]	; 0xffffffb4
   12374:	mov	r2, #1
   12378:	mov	r3, r4
   1237c:	mov	lr, r9
   12380:	b	1246c <__assert_fail@plt+0x1350>
   12384:	mov	r0, #1
   12388:	b	123c8 <__assert_fail@plt+0x12ac>
   1238c:	tst	r4, #1
   12390:	bne	123c8 <__assert_fail@plt+0x12ac>
   12394:	mov	r2, r0
   12398:	b	123f0 <__assert_fail@plt+0x12d4>
   1239c:	mov	r7, #0
   123a0:	mov	r8, #0
   123a4:	mov	r2, r0
   123a8:	b	12468 <__assert_fail@plt+0x134c>
   123ac:	mov	r0, #1
   123b0:	mov	r8, #0
   123b4:	mov	r7, #5
   123b8:	b	12424 <__assert_fail@plt+0x1308>
   123bc:	mov	r2, #1
   123c0:	tst	r4, #1
   123c4:	beq	123f0 <__assert_fail@plt+0x12d4>
   123c8:	mov	r1, #1
   123cc:	mov	r8, #0
   123d0:	mov	r7, #2
   123d4:	mov	r2, r0
   123d8:	mov	r3, #1
   123dc:	str	r1, [fp, #-76]	; 0xffffffb4
   123e0:	movw	r1, #26854	; 0x68e6
   123e4:	movt	r1, #1
   123e8:	str	r1, [sp, #92]	; 0x5c
   123ec:	b	1246c <__assert_fail@plt+0x1350>
   123f0:	cmp	sl, #0
   123f4:	mov	r8, #1
   123f8:	mov	r7, #2
   123fc:	movne	r0, #39	; 0x27
   12400:	strbne	r0, [r6]
   12404:	movw	r0, #26854	; 0x68e6
   12408:	movt	r0, #1
   1240c:	b	1245c <__assert_fail@plt+0x1340>
   12410:	mov	r7, #5
   12414:	tst	r4, #1
   12418:	beq	12440 <__assert_fail@plt+0x1324>
   1241c:	mov	r0, #1
   12420:	mov	r8, #0
   12424:	str	r0, [fp, #-76]	; 0xffffffb4
   12428:	movw	r0, #26850	; 0x68e2
   1242c:	mov	r2, #1
   12430:	mov	r3, #1
   12434:	movt	r0, #1
   12438:	str	r0, [sp, #92]	; 0x5c
   1243c:	b	1246c <__assert_fail@plt+0x1350>
   12440:	cmp	sl, #0
   12444:	mov	r8, #1
   12448:	mov	r2, #1
   1244c:	movne	r0, #34	; 0x22
   12450:	strbne	r0, [r6]
   12454:	movw	r0, #26850	; 0x68e2
   12458:	movt	r0, #1
   1245c:	str	r0, [sp, #92]	; 0x5c
   12460:	mov	r0, #1
   12464:	str	r0, [fp, #-76]	; 0xffffffb4
   12468:	mov	r3, #0
   1246c:	ldr	r0, [fp, #16]
   12470:	str	r3, [fp, #-72]	; 0xffffffb8
   12474:	str	r7, [fp, #-64]	; 0xffffffc0
   12478:	str	r2, [sp, #84]	; 0x54
   1247c:	cmp	r0, #0
   12480:	movwne	r0, #1
   12484:	and	r0, r0, r3
   12488:	str	r0, [fp, #-88]	; 0xffffffa8
   1248c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12490:	cmp	r0, #0
   12494:	movwne	r0, #1
   12498:	subs	r4, r7, #2
   1249c:	mov	r7, #0
   124a0:	and	r1, r0, r3
   124a4:	str	r4, [fp, #-80]	; 0xffffffb0
   124a8:	and	r1, r2, r1
   124ac:	str	r1, [sp, #48]	; 0x30
   124b0:	clz	r1, r4
   124b4:	lsr	r1, r1, #5
   124b8:	and	r1, r1, r3
   124bc:	eor	r3, r3, #1
   124c0:	str	r1, [sp, #64]	; 0x40
   124c4:	mov	r1, r4
   124c8:	str	r3, [sp, #88]	; 0x58
   124cc:	movwne	r1, #1
   124d0:	orr	r3, r1, r3
   124d4:	and	r1, r1, r2
   124d8:	and	r0, r0, r1
   124dc:	str	r3, [sp, #68]	; 0x44
   124e0:	str	r1, [fp, #-68]	; 0xffffffbc
   124e4:	str	r0, [fp, #-60]	; 0xffffffc4
   124e8:	eor	r0, r2, #1
   124ec:	str	r0, [sp, #52]	; 0x34
   124f0:	cmn	lr, #1
   124f4:	beq	12504 <__assert_fail@plt+0x13e8>
   124f8:	cmp	r7, lr
   124fc:	bne	12510 <__assert_fail@plt+0x13f4>
   12500:	b	13038 <__assert_fail@plt+0x1f1c>
   12504:	ldrb	r0, [ip, r7]
   12508:	cmp	r0, #0
   1250c:	beq	13040 <__assert_fail@plt+0x1f24>
   12510:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12514:	mov	r9, #0
   12518:	str	r5, [fp, #-48]	; 0xffffffd0
   1251c:	cmp	r0, #0
   12520:	beq	12554 <__assert_fail@plt+0x1438>
   12524:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12528:	add	r4, r7, r0
   1252c:	cmp	r0, #2
   12530:	bcc	1254c <__assert_fail@plt+0x1430>
   12534:	cmn	lr, #1
   12538:	bne	1254c <__assert_fail@plt+0x1430>
   1253c:	mov	r0, ip
   12540:	bl	11020 <strlen@plt>
   12544:	ldr	ip, [fp, #-84]	; 0xffffffac
   12548:	mov	lr, r0
   1254c:	cmp	r4, lr
   12550:	bls	1255c <__assert_fail@plt+0x1440>
   12554:	mov	r0, #0
   12558:	b	1259c <__assert_fail@plt+0x1480>
   1255c:	ldr	r1, [sp, #92]	; 0x5c
   12560:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12564:	add	r0, ip, r7
   12568:	mov	r4, lr
   1256c:	bl	10f18 <memcmp@plt>
   12570:	ldr	r2, [sp, #88]	; 0x58
   12574:	cmp	r0, #0
   12578:	mov	r1, r0
   1257c:	movwne	r1, #1
   12580:	orr	r1, r1, r2
   12584:	tst	r1, #1
   12588:	beq	130d0 <__assert_fail@plt+0x1fb4>
   1258c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12590:	clz	r0, r0
   12594:	mov	lr, r4
   12598:	lsr	r0, r0, #5
   1259c:	str	r0, [fp, #-52]	; 0xffffffcc
   125a0:	ldrb	r5, [ip, r7]
   125a4:	cmp	r5, #126	; 0x7e
   125a8:	bhi	12960 <__assert_fail@plt+0x1844>
   125ac:	add	r3, pc, #16
   125b0:	mov	r4, #1
   125b4:	mov	r2, #110	; 0x6e
   125b8:	mov	r0, #97	; 0x61
   125bc:	mov	r1, #0
   125c0:	ldr	pc, [r3, r5, lsl #2]
   125c4:	andeq	r2, r1, ip, asr r8
   125c8:	andeq	r2, r1, r0, ror #18
   125cc:	andeq	r2, r1, r0, ror #18
   125d0:	andeq	r2, r1, r0, ror #18
   125d4:	andeq	r2, r1, r0, ror #18
   125d8:	andeq	r2, r1, r0, ror #18
   125dc:	andeq	r2, r1, r0, ror #18
   125e0:	andeq	r2, r1, r4, lsl sl
   125e4:	andeq	r2, r1, ip, lsr r8
   125e8:	andeq	r2, r1, r4, lsr r8
   125ec:	andeq	r2, r1, r8, asr #16
   125f0:	andeq	r2, r1, r8, asr #17
   125f4:	andeq	r2, r1, ip, lsr #16
   125f8:	andeq	r2, r1, r4, asr #16
   125fc:	andeq	r2, r1, r0, ror #18
   12600:	andeq	r2, r1, r0, ror #18
   12604:	andeq	r2, r1, r0, ror #18
   12608:	andeq	r2, r1, r0, ror #18
   1260c:	andeq	r2, r1, r0, ror #18
   12610:	andeq	r2, r1, r0, ror #18
   12614:	andeq	r2, r1, r0, ror #18
   12618:	andeq	r2, r1, r0, ror #18
   1261c:	andeq	r2, r1, r0, ror #18
   12620:	andeq	r2, r1, r0, ror #18
   12624:	andeq	r2, r1, r0, ror #18
   12628:	andeq	r2, r1, r0, ror #18
   1262c:	andeq	r2, r1, r0, ror #18
   12630:	andeq	r2, r1, r0, ror #18
   12634:	andeq	r2, r1, r0, ror #18
   12638:	andeq	r2, r1, r0, ror #18
   1263c:	andeq	r2, r1, r0, ror #18
   12640:	andeq	r2, r1, r0, ror #18
   12644:	andeq	r2, r1, ip, asr #19
   12648:	ldrdeq	r2, [r1], -r0
   1264c:	ldrdeq	r2, [r1], -r0
   12650:	ldrdeq	r2, [r1], -r4
   12654:	ldrdeq	r2, [r1], -r0
   12658:	andeq	r2, r1, r0, asr #15
   1265c:	ldrdeq	r2, [r1], -r0
   12660:	ldrdeq	r2, [r1], -r0
   12664:	ldrdeq	r2, [r1], -r0
   12668:	ldrdeq	r2, [r1], -r0
   1266c:	ldrdeq	r2, [r1], -r0
   12670:	andeq	r2, r1, r0, asr #15
   12674:	andeq	r2, r1, r0, asr #15
   12678:	andeq	r2, r1, r0, asr #15
   1267c:	andeq	r2, r1, r0, asr #15
   12680:	andeq	r2, r1, r0, asr #15
   12684:	andeq	r2, r1, r0, asr #15
   12688:	andeq	r2, r1, r0, asr #15
   1268c:	andeq	r2, r1, r0, asr #15
   12690:	andeq	r2, r1, r0, asr #15
   12694:	andeq	r2, r1, r0, asr #15
   12698:	andeq	r2, r1, r0, asr #15
   1269c:	andeq	r2, r1, r0, asr #15
   126a0:	andeq	r2, r1, r0, asr #15
   126a4:	andeq	r2, r1, r0, asr #15
   126a8:	andeq	r2, r1, r0, asr #15
   126ac:	andeq	r2, r1, r0, asr #15
   126b0:	ldrdeq	r2, [r1], -r0
   126b4:	ldrdeq	r2, [r1], -r0
   126b8:	ldrdeq	r2, [r1], -r0
   126bc:	ldrdeq	r2, [r1], -r0
   126c0:	muleq	r1, ip, r8
   126c4:	andeq	r2, r1, r0, ror #18
   126c8:	andeq	r2, r1, r0, asr #15
   126cc:	andeq	r2, r1, r0, asr #15
   126d0:	andeq	r2, r1, r0, asr #15
   126d4:	andeq	r2, r1, r0, asr #15
   126d8:	andeq	r2, r1, r0, asr #15
   126dc:	andeq	r2, r1, r0, asr #15
   126e0:	andeq	r2, r1, r0, asr #15
   126e4:	andeq	r2, r1, r0, asr #15
   126e8:	andeq	r2, r1, r0, asr #15
   126ec:	andeq	r2, r1, r0, asr #15
   126f0:	andeq	r2, r1, r0, asr #15
   126f4:	andeq	r2, r1, r0, asr #15
   126f8:	andeq	r2, r1, r0, asr #15
   126fc:	andeq	r2, r1, r0, asr #15
   12700:	andeq	r2, r1, r0, asr #15
   12704:	andeq	r2, r1, r0, asr #15
   12708:	andeq	r2, r1, r0, asr #15
   1270c:	andeq	r2, r1, r0, asr #15
   12710:	andeq	r2, r1, r0, asr #15
   12714:	andeq	r2, r1, r0, asr #15
   12718:	andeq	r2, r1, r0, asr #15
   1271c:	andeq	r2, r1, r0, asr #15
   12720:	andeq	r2, r1, r0, asr #15
   12724:	andeq	r2, r1, r0, asr #15
   12728:	andeq	r2, r1, r0, asr #15
   1272c:	andeq	r2, r1, r0, asr #15
   12730:	ldrdeq	r2, [r1], -r0
   12734:	andeq	r2, r1, r8, lsl #16
   12738:	andeq	r2, r1, r0, asr #15
   1273c:	ldrdeq	r2, [r1], -r0
   12740:	andeq	r2, r1, r0, asr #15
   12744:	ldrdeq	r2, [r1], -r0
   12748:	andeq	r2, r1, r0, asr #15
   1274c:	andeq	r2, r1, r0, asr #15
   12750:	andeq	r2, r1, r0, asr #15
   12754:	andeq	r2, r1, r0, asr #15
   12758:	andeq	r2, r1, r0, asr #15
   1275c:	andeq	r2, r1, r0, asr #15
   12760:	andeq	r2, r1, r0, asr #15
   12764:	andeq	r2, r1, r0, asr #15
   12768:	andeq	r2, r1, r0, asr #15
   1276c:	andeq	r2, r1, r0, asr #15
   12770:	andeq	r2, r1, r0, asr #15
   12774:	andeq	r2, r1, r0, asr #15
   12778:	andeq	r2, r1, r0, asr #15
   1277c:	andeq	r2, r1, r0, asr #15
   12780:	andeq	r2, r1, r0, asr #15
   12784:	andeq	r2, r1, r0, asr #15
   12788:	andeq	r2, r1, r0, asr #15
   1278c:	andeq	r2, r1, r0, asr #15
   12790:	andeq	r2, r1, r0, asr #15
   12794:	andeq	r2, r1, r0, asr #15
   12798:	andeq	r2, r1, r0, asr #15
   1279c:	andeq	r2, r1, r0, asr #15
   127a0:	andeq	r2, r1, r0, asr #15
   127a4:	andeq	r2, r1, r0, asr #15
   127a8:	andeq	r2, r1, r0, asr #15
   127ac:	andeq	r2, r1, r0, asr #15
   127b0:	andeq	r2, r1, r8, ror #15
   127b4:	ldrdeq	r2, [r1], -r0
   127b8:	andeq	r2, r1, r8, ror #15
   127bc:	ldrdeq	r2, [r1], -r4
   127c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   127c4:	cmp	r0, #0
   127c8:	beq	12a28 <__assert_fail@plt+0x190c>
   127cc:	ldr	r0, [fp, #16]
   127d0:	b	12a2c <__assert_fail@plt+0x1910>
   127d4:	mov	r4, #0
   127d8:	cmp	r7, #0
   127dc:	beq	129cc <__assert_fail@plt+0x18b0>
   127e0:	mov	r9, #0
   127e4:	b	127c0 <__assert_fail@plt+0x16a4>
   127e8:	mov	r4, #0
   127ec:	cmn	lr, #1
   127f0:	beq	129b0 <__assert_fail@plt+0x1894>
   127f4:	cmp	r7, #0
   127f8:	bne	127e0 <__assert_fail@plt+0x16c4>
   127fc:	cmp	lr, #1
   12800:	beq	129cc <__assert_fail@plt+0x18b0>
   12804:	b	127e0 <__assert_fail@plt+0x16c4>
   12808:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1280c:	cmp	r0, #2
   12810:	bne	129f0 <__assert_fail@plt+0x18d4>
   12814:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12818:	tst	r0, #1
   1281c:	bne	130ec <__assert_fail@plt+0x1fd0>
   12820:	mov	r9, #0
   12824:	mov	r0, #92	; 0x5c
   12828:	b	12a04 <__assert_fail@plt+0x18e8>
   1282c:	mov	r0, #102	; 0x66
   12830:	b	12a14 <__assert_fail@plt+0x18f8>
   12834:	mov	r2, #116	; 0x74
   12838:	b	12848 <__assert_fail@plt+0x172c>
   1283c:	mov	r0, #98	; 0x62
   12840:	b	12a14 <__assert_fail@plt+0x18f8>
   12844:	mov	r2, #114	; 0x72
   12848:	ldr	r0, [sp, #68]	; 0x44
   1284c:	tst	r0, #1
   12850:	mov	r0, r2
   12854:	bne	12a14 <__assert_fail@plt+0x18f8>
   12858:	b	130ec <__assert_fail@plt+0x1fd0>
   1285c:	ldr	r0, [sp, #84]	; 0x54
   12860:	tst	r0, #1
   12864:	beq	12b04 <__assert_fail@plt+0x19e8>
   12868:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1286c:	tst	r0, #1
   12870:	bne	131fc <__assert_fail@plt+0x20e0>
   12874:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12878:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1287c:	cmp	r0, #2
   12880:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12884:	movwne	r0, #1
   12888:	orr	r0, r0, r2
   1288c:	tst	r0, #1
   12890:	beq	12ed4 <__assert_fail@plt+0x1db8>
   12894:	mov	r0, r8
   12898:	b	12f08 <__assert_fail@plt+0x1dec>
   1289c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   128a0:	mov	r9, #0
   128a4:	mov	r5, #63	; 0x3f
   128a8:	cmp	r0, #5
   128ac:	beq	12cb8 <__assert_fail@plt+0x1b9c>
   128b0:	cmp	r0, #2
   128b4:	bne	12d5c <__assert_fail@plt+0x1c40>
   128b8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   128bc:	tst	r0, #1
   128c0:	beq	12d60 <__assert_fail@plt+0x1c44>
   128c4:	b	130ec <__assert_fail@plt+0x1fd0>
   128c8:	mov	r0, #118	; 0x76
   128cc:	b	12a14 <__assert_fail@plt+0x18f8>
   128d0:	mov	r0, #1
   128d4:	mov	r5, #39	; 0x27
   128d8:	str	r0, [sp, #60]	; 0x3c
   128dc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   128e0:	cmp	r0, #2
   128e4:	bne	12958 <__assert_fail@plt+0x183c>
   128e8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   128ec:	tst	r0, #1
   128f0:	bne	130ec <__assert_fail@plt+0x1fd0>
   128f4:	ldr	r2, [sp, #56]	; 0x38
   128f8:	clz	r1, sl
   128fc:	mov	r9, #0
   12900:	lsr	r1, r1, #5
   12904:	cmp	r2, #0
   12908:	mov	r0, r2
   1290c:	movwne	r0, #1
   12910:	orrs	r0, r0, r1
   12914:	moveq	r2, sl
   12918:	moveq	sl, r0
   1291c:	cmp	r8, sl
   12920:	str	r2, [sp, #56]	; 0x38
   12924:	movcc	r0, #39	; 0x27
   12928:	strbcc	r0, [r6, r8]
   1292c:	add	r0, r8, #1
   12930:	cmp	r0, sl
   12934:	movcc	r1, #92	; 0x5c
   12938:	strbcc	r1, [r6, r0]
   1293c:	add	r0, r8, #2
   12940:	add	r8, r8, #3
   12944:	cmp	r0, sl
   12948:	movcc	r1, #39	; 0x27
   1294c:	strbcc	r1, [r6, r0]
   12950:	mov	r0, #0
   12954:	str	r0, [fp, #-56]	; 0xffffffc8
   12958:	mov	r4, #1
   1295c:	b	127c0 <__assert_fail@plt+0x16a4>
   12960:	ldr	r0, [sp, #40]	; 0x28
   12964:	cmp	r0, #1
   12968:	bne	12b30 <__assert_fail@plt+0x1a14>
   1296c:	str	lr, [sp, #28]
   12970:	bl	11008 <__ctype_b_loc@plt>
   12974:	ldr	r0, [r0]
   12978:	ldr	ip, [fp, #-84]	; 0xffffffac
   1297c:	mov	r1, #1
   12980:	add	r0, r0, r5, lsl #1
   12984:	ldrb	r0, [r0, #1]
   12988:	ubfx	r4, r0, #6, #1
   1298c:	ldr	r0, [sp, #52]	; 0x34
   12990:	mov	r2, r1
   12994:	cmp	r1, #1
   12998:	orr	r0, r4, r0
   1299c:	bhi	12d68 <__assert_fail@plt+0x1c4c>
   129a0:	tst	r0, #1
   129a4:	beq	12d68 <__assert_fail@plt+0x1c4c>
   129a8:	ldr	lr, [sp, #28]
   129ac:	b	127c0 <__assert_fail@plt+0x16a4>
   129b0:	cmp	r7, #0
   129b4:	ldrbeq	r0, [ip, #1]
   129b8:	cmpeq	r0, #0
   129bc:	beq	129cc <__assert_fail@plt+0x18b0>
   129c0:	mvn	lr, #0
   129c4:	mov	r9, #0
   129c8:	b	127c0 <__assert_fail@plt+0x16a4>
   129cc:	mov	r1, #1
   129d0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   129d4:	cmp	r0, #2
   129d8:	bne	129e8 <__assert_fail@plt+0x18cc>
   129dc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   129e0:	tst	r0, #1
   129e4:	bne	130ec <__assert_fail@plt+0x1fd0>
   129e8:	mov	r4, r1
   129ec:	b	127c0 <__assert_fail@plt+0x16a4>
   129f0:	ldr	r1, [sp, #48]	; 0x30
   129f4:	mov	r9, #0
   129f8:	mov	r0, #92	; 0x5c
   129fc:	cmp	r1, #0
   12a00:	beq	12a14 <__assert_fail@plt+0x18f8>
   12a04:	mov	r4, #0
   12a08:	cmp	r9, #0
   12a0c:	beq	12fa0 <__assert_fail@plt+0x1e84>
   12a10:	b	12fdc <__assert_fail@plt+0x1ec0>
   12a14:	ldr	r1, [sp, #84]	; 0x54
   12a18:	mov	r4, #0
   12a1c:	mov	r9, #0
   12a20:	tst	r1, #1
   12a24:	bne	12a64 <__assert_fail@plt+0x1948>
   12a28:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12a2c:	cmp	r0, #0
   12a30:	mov	r0, r5
   12a34:	beq	12a58 <__assert_fail@plt+0x193c>
   12a38:	ldr	r1, [fp, #16]
   12a3c:	ubfx	r0, r5, #5, #3
   12a40:	mov	r2, #1
   12a44:	ldr	r0, [r1, r0, lsl #2]
   12a48:	and	r1, r5, #31
   12a4c:	tst	r0, r2, lsl r1
   12a50:	mov	r0, r5
   12a54:	bne	12a64 <__assert_fail@plt+0x1948>
   12a58:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12a5c:	cmp	r1, #0
   12a60:	beq	12f98 <__assert_fail@plt+0x1e7c>
   12a64:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12a68:	tst	r1, #1
   12a6c:	bne	130c4 <__assert_fail@plt+0x1fa8>
   12a70:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12a74:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12a78:	cmp	r1, #2
   12a7c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12a80:	movwne	r1, #1
   12a84:	orr	r1, r1, r2
   12a88:	tst	r1, #1
   12a8c:	beq	12a98 <__assert_fail@plt+0x197c>
   12a90:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12a94:	b	12ad4 <__assert_fail@plt+0x19b8>
   12a98:	cmp	r8, sl
   12a9c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12aa0:	movcc	r1, #39	; 0x27
   12aa4:	strbcc	r1, [r6, r8]
   12aa8:	add	r1, r8, #1
   12aac:	cmp	r1, sl
   12ab0:	movcc	r2, #36	; 0x24
   12ab4:	strbcc	r2, [r6, r1]
   12ab8:	add	r1, r8, #2
   12abc:	add	r8, r8, #3
   12ac0:	cmp	r1, sl
   12ac4:	movcc	r2, #39	; 0x27
   12ac8:	strbcc	r2, [r6, r1]
   12acc:	mov	r1, #1
   12ad0:	str	r1, [fp, #-56]	; 0xffffffc8
   12ad4:	cmp	r8, sl
   12ad8:	movcc	r1, #92	; 0x5c
   12adc:	strbcc	r1, [r6, r8]
   12ae0:	add	r8, r8, #1
   12ae4:	cmp	r8, sl
   12ae8:	and	r5, r5, r4
   12aec:	add	r7, r7, #1
   12af0:	strbcc	r0, [r6, r8]
   12af4:	add	r8, r8, #1
   12af8:	cmn	lr, #1
   12afc:	bne	124f8 <__assert_fail@plt+0x13dc>
   12b00:	b	12504 <__assert_fail@plt+0x13e8>
   12b04:	ldr	r0, [sp, #36]	; 0x24
   12b08:	mov	r4, #0
   12b0c:	mov	r9, #0
   12b10:	mov	r5, #0
   12b14:	cmp	r0, #0
   12b18:	beq	12a28 <__assert_fail@plt+0x190c>
   12b1c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12b20:	add	r7, r7, #1
   12b24:	cmn	lr, #1
   12b28:	bne	124f8 <__assert_fail@plt+0x13dc>
   12b2c:	b	12504 <__assert_fail@plt+0x13e8>
   12b30:	mov	r0, #0
   12b34:	cmn	lr, #1
   12b38:	str	r0, [fp, #-36]	; 0xffffffdc
   12b3c:	str	r0, [fp, #-40]	; 0xffffffd8
   12b40:	bne	12b54 <__assert_fail@plt+0x1a38>
   12b44:	mov	r0, ip
   12b48:	bl	11020 <strlen@plt>
   12b4c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12b50:	mov	lr, r0
   12b54:	add	r0, ip, r7
   12b58:	mov	r4, #1
   12b5c:	mov	r6, #0
   12b60:	str	lr, [sp, #28]
   12b64:	str	r0, [sp, #24]
   12b68:	sub	r0, fp, #40	; 0x28
   12b6c:	mov	r3, r0
   12b70:	str	r6, [sp, #44]	; 0x2c
   12b74:	add	r6, r6, r7
   12b78:	sub	r0, fp, #44	; 0x2c
   12b7c:	add	r1, ip, r6
   12b80:	sub	r2, lr, r6
   12b84:	bl	15c24 <__assert_fail@plt+0x4b08>
   12b88:	cmp	r0, #0
   12b8c:	beq	13024 <__assert_fail@plt+0x1f08>
   12b90:	cmn	r0, #1
   12b94:	beq	12fe4 <__assert_fail@plt+0x1ec8>
   12b98:	ldr	lr, [sp, #28]
   12b9c:	cmn	r0, #2
   12ba0:	beq	12fec <__assert_fail@plt+0x1ed0>
   12ba4:	ldr	r2, [sp, #64]	; 0x40
   12ba8:	cmp	r0, #2
   12bac:	mov	r1, #0
   12bb0:	movwcc	r1, #1
   12bb4:	eor	r2, r2, #1
   12bb8:	orrs	r1, r2, r1
   12bbc:	bne	12c7c <__assert_fail@plt+0x1b60>
   12bc0:	ldr	r1, [sp, #44]	; 0x2c
   12bc4:	ldr	r2, [sp, #24]
   12bc8:	add	r1, r2, r1
   12bcc:	mov	r2, #1
   12bd0:	ldrb	r3, [r1, r2]
   12bd4:	sub	r3, r3, #91	; 0x5b
   12bd8:	cmp	r3, #33	; 0x21
   12bdc:	bhi	12c70 <__assert_fail@plt+0x1b54>
   12be0:	add	r6, pc, #0
   12be4:	ldr	pc, [r6, r3, lsl #2]
   12be8:	andeq	r3, r1, r4, ror #1
   12bec:	andeq	r3, r1, r4, ror #1
   12bf0:	andeq	r2, r1, r0, ror ip
   12bf4:	andeq	r3, r1, r4, ror #1
   12bf8:	andeq	r2, r1, r0, ror ip
   12bfc:	andeq	r3, r1, r4, ror #1
   12c00:	andeq	r2, r1, r0, ror ip
   12c04:	andeq	r2, r1, r0, ror ip
   12c08:	andeq	r2, r1, r0, ror ip
   12c0c:	andeq	r2, r1, r0, ror ip
   12c10:	andeq	r2, r1, r0, ror ip
   12c14:	andeq	r2, r1, r0, ror ip
   12c18:	andeq	r2, r1, r0, ror ip
   12c1c:	andeq	r2, r1, r0, ror ip
   12c20:	andeq	r2, r1, r0, ror ip
   12c24:	andeq	r2, r1, r0, ror ip
   12c28:	andeq	r2, r1, r0, ror ip
   12c2c:	andeq	r2, r1, r0, ror ip
   12c30:	andeq	r2, r1, r0, ror ip
   12c34:	andeq	r2, r1, r0, ror ip
   12c38:	andeq	r2, r1, r0, ror ip
   12c3c:	andeq	r2, r1, r0, ror ip
   12c40:	andeq	r2, r1, r0, ror ip
   12c44:	andeq	r2, r1, r0, ror ip
   12c48:	andeq	r2, r1, r0, ror ip
   12c4c:	andeq	r2, r1, r0, ror ip
   12c50:	andeq	r2, r1, r0, ror ip
   12c54:	andeq	r2, r1, r0, ror ip
   12c58:	andeq	r2, r1, r0, ror ip
   12c5c:	andeq	r2, r1, r0, ror ip
   12c60:	andeq	r2, r1, r0, ror ip
   12c64:	andeq	r2, r1, r0, ror ip
   12c68:	andeq	r2, r1, r0, ror ip
   12c6c:	andeq	r3, r1, r4, ror #1
   12c70:	add	r2, r2, #1
   12c74:	cmp	r2, r0
   12c78:	bcc	12bd0 <__assert_fail@plt+0x1ab4>
   12c7c:	ldr	r6, [sp, #44]	; 0x2c
   12c80:	add	r6, r0, r6
   12c84:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12c88:	bl	10f48 <iswprint@plt>
   12c8c:	cmp	r0, #0
   12c90:	movwne	r0, #1
   12c94:	and	r4, r4, r0
   12c98:	sub	r0, fp, #40	; 0x28
   12c9c:	bl	10f0c <mbsinit@plt>
   12ca0:	ldr	lr, [sp, #28]
   12ca4:	ldr	ip, [fp, #-84]	; 0xffffffac
   12ca8:	sub	r3, fp, #40	; 0x28
   12cac:	cmp	r0, #0
   12cb0:	beq	12b70 <__assert_fail@plt+0x1a54>
   12cb4:	b	1302c <__assert_fail@plt+0x1f10>
   12cb8:	ldr	r0, [sp, #32]
   12cbc:	cmp	r0, #0
   12cc0:	beq	12d5c <__assert_fail@plt+0x1c40>
   12cc4:	add	r0, r7, #2
   12cc8:	cmp	r0, lr
   12ccc:	bcs	12d5c <__assert_fail@plt+0x1c40>
   12cd0:	add	r1, ip, r7
   12cd4:	ldrb	r1, [r1, #1]
   12cd8:	cmp	r1, #63	; 0x3f
   12cdc:	bne	12d5c <__assert_fail@plt+0x1c40>
   12ce0:	ldrb	r5, [ip, r0]
   12ce4:	sub	r1, r5, #33	; 0x21
   12ce8:	cmp	r1, #29
   12cec:	bhi	12d5c <__assert_fail@plt+0x1c40>
   12cf0:	movw	r3, #20929	; 0x51c1
   12cf4:	mov	r2, #1
   12cf8:	movt	r3, #14336	; 0x3800
   12cfc:	tst	r3, r2, lsl r1
   12d00:	beq	12d5c <__assert_fail@plt+0x1c40>
   12d04:	ldr	r1, [fp, #-72]	; 0xffffffb8
   12d08:	tst	r1, #1
   12d0c:	bne	13204 <__assert_fail@plt+0x20e8>
   12d10:	cmp	r8, sl
   12d14:	mov	r7, r0
   12d18:	mov	r4, #0
   12d1c:	movcc	r1, #63	; 0x3f
   12d20:	strbcc	r1, [r6, r8]
   12d24:	add	r1, r8, #1
   12d28:	cmp	r1, sl
   12d2c:	movcc	r2, #34	; 0x22
   12d30:	strbcc	r2, [r6, r1]
   12d34:	add	r1, r8, #2
   12d38:	cmp	r1, sl
   12d3c:	movcc	r2, #34	; 0x22
   12d40:	strbcc	r2, [r6, r1]
   12d44:	add	r1, r8, #3
   12d48:	add	r8, r8, #4
   12d4c:	cmp	r1, sl
   12d50:	movcc	r2, #63	; 0x3f
   12d54:	strbcc	r2, [r6, r1]
   12d58:	b	127c0 <__assert_fail@plt+0x16a4>
   12d5c:	mov	r5, #63	; 0x3f
   12d60:	mov	r4, #0
   12d64:	b	127c0 <__assert_fail@plt+0x16a4>
   12d68:	add	r1, r2, r7
   12d6c:	ldr	lr, [sp, #28]
   12d70:	mov	r3, #0
   12d74:	str	r1, [sp, #44]	; 0x2c
   12d78:	add	r1, r7, #1
   12d7c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12d80:	tst	r0, #1
   12d84:	bne	12e58 <__assert_fail@plt+0x1d3c>
   12d88:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12d8c:	tst	r2, #1
   12d90:	bne	1314c <__assert_fail@plt+0x2030>
   12d94:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12d98:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12d9c:	cmp	r7, #2
   12da0:	movwne	r3, #1
   12da4:	orr	r3, r3, r2
   12da8:	tst	r3, #1
   12dac:	bne	12de8 <__assert_fail@plt+0x1ccc>
   12db0:	cmp	r8, sl
   12db4:	add	r3, r8, #1
   12db8:	movcc	r2, #39	; 0x27
   12dbc:	strbcc	r2, [r6, r8]
   12dc0:	cmp	r3, sl
   12dc4:	movcc	r2, #36	; 0x24
   12dc8:	strbcc	r2, [r6, r3]
   12dcc:	add	r3, r8, #2
   12dd0:	add	r8, r8, #3
   12dd4:	cmp	r3, sl
   12dd8:	movcc	r2, #39	; 0x27
   12ddc:	strbcc	r2, [r6, r3]
   12de0:	mov	r2, #1
   12de4:	str	r2, [fp, #-56]	; 0xffffffc8
   12de8:	cmp	r8, sl
   12dec:	movcc	r3, #92	; 0x5c
   12df0:	strbcc	r3, [r6, r8]
   12df4:	add	r3, r8, #1
   12df8:	cmp	r3, sl
   12dfc:	andcc	r7, r5, #192	; 0xc0
   12e00:	movcc	r2, #48	; 0x30
   12e04:	orrcc	r7, r2, r7, lsr #6
   12e08:	strbcc	r7, [r6, r3]
   12e0c:	add	r3, r8, #2
   12e10:	add	r8, r8, #3
   12e14:	cmp	r3, sl
   12e18:	lsrcc	r7, r5, #3
   12e1c:	movcc	r2, #6
   12e20:	bficc	r7, r2, #3, #29
   12e24:	mov	r2, #6
   12e28:	strbcc	r7, [r6, r3]
   12e2c:	bfi	r5, r2, #3, #29
   12e30:	mov	r3, #1
   12e34:	b	12e7c <__assert_fail@plt+0x1d60>
   12e38:	cmp	r8, sl
   12e3c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12e40:	strbcc	r5, [r6, r8]
   12e44:	add	r8, r8, #1
   12e48:	ldrb	r5, [ip, r1]
   12e4c:	add	r1, r1, #1
   12e50:	tst	r0, #1
   12e54:	beq	12d88 <__assert_fail@plt+0x1c6c>
   12e58:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12e5c:	tst	r2, #1
   12e60:	beq	12e74 <__assert_fail@plt+0x1d58>
   12e64:	cmp	r8, sl
   12e68:	movcc	r7, #92	; 0x5c
   12e6c:	strbcc	r7, [r6, r8]
   12e70:	add	r8, r8, #1
   12e74:	mov	r2, #0
   12e78:	str	r2, [fp, #-52]	; 0xffffffcc
   12e7c:	ldr	r2, [sp, #44]	; 0x2c
   12e80:	and	r9, r3, #1
   12e84:	cmp	r2, r1
   12e88:	bls	12f88 <__assert_fail@plt+0x1e6c>
   12e8c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12e90:	cmp	r9, #0
   12e94:	movwne	r9, #1
   12e98:	mvn	r7, r2
   12e9c:	orr	r7, r7, r9
   12ea0:	tst	r7, #1
   12ea4:	bne	12e38 <__assert_fail@plt+0x1d1c>
   12ea8:	cmp	r8, sl
   12eac:	movcc	r7, #39	; 0x27
   12eb0:	strbcc	r7, [r6, r8]
   12eb4:	add	r7, r8, #1
   12eb8:	add	r8, r8, #2
   12ebc:	cmp	r7, sl
   12ec0:	movcc	r2, #39	; 0x27
   12ec4:	strbcc	r2, [r6, r7]
   12ec8:	mov	r2, #0
   12ecc:	str	r2, [fp, #-56]	; 0xffffffc8
   12ed0:	b	12e38 <__assert_fail@plt+0x1d1c>
   12ed4:	cmp	r8, sl
   12ed8:	mov	r2, #1
   12edc:	movcc	r0, #39	; 0x27
   12ee0:	strbcc	r0, [r6, r8]
   12ee4:	add	r0, r8, #1
   12ee8:	cmp	r0, sl
   12eec:	movcc	r1, #36	; 0x24
   12ef0:	strbcc	r1, [r6, r0]
   12ef4:	add	r0, r8, #2
   12ef8:	cmp	r0, sl
   12efc:	movcc	r1, #39	; 0x27
   12f00:	strbcc	r1, [r6, r0]
   12f04:	add	r0, r8, #3
   12f08:	cmp	r0, sl
   12f0c:	add	r8, r0, #1
   12f10:	str	r2, [fp, #-56]	; 0xffffffc8
   12f14:	movcc	r1, #92	; 0x5c
   12f18:	strbcc	r1, [r6, r0]
   12f1c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12f20:	cmp	r1, #2
   12f24:	beq	12f78 <__assert_fail@plt+0x1e5c>
   12f28:	add	r1, r7, #1
   12f2c:	mov	r4, #0
   12f30:	mov	r9, #1
   12f34:	mov	r5, #48	; 0x30
   12f38:	cmp	r1, lr
   12f3c:	bcs	127c0 <__assert_fail@plt+0x16a4>
   12f40:	ldrb	r1, [ip, r1]
   12f44:	sub	r1, r1, #48	; 0x30
   12f48:	uxtb	r1, r1
   12f4c:	cmp	r1, #9
   12f50:	bhi	127c0 <__assert_fail@plt+0x16a4>
   12f54:	cmp	r8, sl
   12f58:	movcc	r1, #48	; 0x30
   12f5c:	strbcc	r1, [r6, r8]
   12f60:	add	r1, r0, #2
   12f64:	add	r8, r0, #3
   12f68:	cmp	r1, sl
   12f6c:	movcc	r2, #48	; 0x30
   12f70:	strbcc	r2, [r6, r1]
   12f74:	b	127c0 <__assert_fail@plt+0x16a4>
   12f78:	mov	r0, #48	; 0x30
   12f7c:	mov	r9, #1
   12f80:	mov	r4, #0
   12f84:	b	12a58 <__assert_fail@plt+0x193c>
   12f88:	cmp	r9, #0
   12f8c:	sub	r7, r1, #1
   12f90:	mov	r0, r5
   12f94:	movwne	r9, #1
   12f98:	cmp	r9, #0
   12f9c:	bne	12fdc <__assert_fail@plt+0x1ec0>
   12fa0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12fa4:	tst	r1, #1
   12fa8:	beq	12fdc <__assert_fail@plt+0x1ec0>
   12fac:	cmp	r8, sl
   12fb0:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12fb4:	movcc	r1, #39	; 0x27
   12fb8:	strbcc	r1, [r6, r8]
   12fbc:	add	r1, r8, #1
   12fc0:	add	r8, r8, #2
   12fc4:	cmp	r1, sl
   12fc8:	movcc	r2, #39	; 0x27
   12fcc:	strbcc	r2, [r6, r1]
   12fd0:	mov	r1, #0
   12fd4:	str	r1, [fp, #-56]	; 0xffffffc8
   12fd8:	b	12ae4 <__assert_fail@plt+0x19c8>
   12fdc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12fe0:	b	12ae4 <__assert_fail@plt+0x19c8>
   12fe4:	mov	r4, #0
   12fe8:	b	13024 <__assert_fail@plt+0x1f08>
   12fec:	mov	r4, #0
   12ff0:	cmp	lr, r6
   12ff4:	bls	13024 <__assert_fail@plt+0x1f08>
   12ff8:	ldr	ip, [fp, #-84]	; 0xffffffac
   12ffc:	ldr	r6, [sp, #44]	; 0x2c
   13000:	ldr	r0, [sp, #24]
   13004:	ldrb	r0, [r0, r6]
   13008:	cmp	r0, #0
   1300c:	beq	1302c <__assert_fail@plt+0x1f10>
   13010:	add	r6, r6, #1
   13014:	add	r0, r7, r6
   13018:	cmp	r0, lr
   1301c:	bcc	13000 <__assert_fail@plt+0x1ee4>
   13020:	b	1302c <__assert_fail@plt+0x1f10>
   13024:	ldr	ip, [fp, #-84]	; 0xffffffac
   13028:	ldr	r6, [sp, #44]	; 0x2c
   1302c:	mov	r1, r6
   13030:	ldr	r6, [sp, #80]	; 0x50
   13034:	b	1298c <__assert_fail@plt+0x1870>
   13038:	mov	lr, r7
   1303c:	b	13044 <__assert_fail@plt+0x1f28>
   13040:	mvn	lr, #0
   13044:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13048:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1304c:	eor	r0, r7, #2
   13050:	orr	r0, r0, r8
   13054:	clz	r0, r0
   13058:	lsr	r0, r0, #5
   1305c:	tst	r1, r0
   13060:	bne	130ec <__assert_fail@plt+0x1fd0>
   13064:	mov	r0, r1
   13068:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1306c:	cmp	r7, #2
   13070:	movwne	r1, #1
   13074:	orr	r0, r0, r1
   13078:	tst	r0, #1
   1307c:	ldreq	r0, [sp, #60]	; 0x3c
   13080:	eoreq	r0, r0, #1
   13084:	tsteq	r0, #1
   13088:	bne	13198 <__assert_fail@plt+0x207c>
   1308c:	mov	r9, lr
   13090:	tst	r5, #1
   13094:	bne	13154 <__assert_fail@plt+0x2038>
   13098:	ldr	r6, [sp, #56]	; 0x38
   1309c:	mov	r4, #0
   130a0:	cmp	r6, #0
   130a4:	beq	13190 <__assert_fail@plt+0x2074>
   130a8:	ldr	r0, [sp, #84]	; 0x54
   130ac:	mov	r1, #0
   130b0:	cmp	sl, #0
   130b4:	mov	r5, #0
   130b8:	str	r1, [fp, #-72]	; 0xffffffb8
   130bc:	beq	1228c <__assert_fail@plt+0x1170>
   130c0:	b	13198 <__assert_fail@plt+0x207c>
   130c4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   130c8:	ldr	r2, [sp, #84]	; 0x54
   130cc:	b	130f4 <__assert_fail@plt+0x1fd8>
   130d0:	ldr	ip, [fp, #-84]	; 0xffffffac
   130d4:	mov	r2, #1
   130d8:	mov	lr, r4
   130dc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   130e0:	b	130f4 <__assert_fail@plt+0x1fd8>
   130e4:	ldr	r6, [sp, #80]	; 0x50
   130e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   130ec:	ldr	r2, [sp, #84]	; 0x54
   130f0:	mov	r7, #2
   130f4:	mov	r0, #0
   130f8:	ldr	r1, [fp, #12]
   130fc:	tst	r2, #1
   13100:	mov	r2, r7
   13104:	mov	r3, lr
   13108:	str	r0, [sp, #8]
   1310c:	ldr	r0, [sp, #72]	; 0x48
   13110:	movwne	r2, #4
   13114:	cmp	r7, #2
   13118:	movne	r2, r7
   1311c:	str	r2, [sp]
   13120:	mov	r2, ip
   13124:	bic	r1, r1, #2
   13128:	str	r0, [sp, #12]
   1312c:	ldr	r0, [sp, #76]	; 0x4c
   13130:	str	r1, [sp, #4]
   13134:	mov	r1, sl
   13138:	str	r0, [sp, #16]
   1313c:	mov	r0, r6
   13140:	bl	1220c <__assert_fail@plt+0x10f0>
   13144:	mov	r8, r0
   13148:	b	131f0 <__assert_fail@plt+0x20d4>
   1314c:	ldr	r2, [sp, #84]	; 0x54
   13150:	b	130f4 <__assert_fail@plt+0x1fd8>
   13154:	mov	r0, #5
   13158:	ldr	r1, [sp, #56]	; 0x38
   1315c:	ldr	r2, [fp, #-84]	; 0xffffffac
   13160:	mov	r3, r9
   13164:	str	r0, [sp]
   13168:	ldr	r0, [fp, #12]
   1316c:	str	r0, [sp, #4]
   13170:	ldr	r0, [fp, #16]
   13174:	str	r0, [sp, #8]
   13178:	ldr	r0, [sp, #72]	; 0x48
   1317c:	str	r0, [sp, #12]
   13180:	ldr	r0, [sp, #76]	; 0x4c
   13184:	str	r0, [sp, #16]
   13188:	ldr	r0, [sp, #80]	; 0x50
   1318c:	b	13140 <__assert_fail@plt+0x2024>
   13190:	mov	r0, #0
   13194:	str	r0, [fp, #-72]	; 0xffffffb8
   13198:	ldr	r1, [sp, #92]	; 0x5c
   1319c:	cmp	r1, #0
   131a0:	beq	131e0 <__assert_fail@plt+0x20c4>
   131a4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   131a8:	ldr	r2, [sp, #80]	; 0x50
   131ac:	tst	r0, #1
   131b0:	bne	131e4 <__assert_fail@plt+0x20c8>
   131b4:	ldrb	r0, [r1]
   131b8:	cmp	r0, #0
   131bc:	beq	131e4 <__assert_fail@plt+0x20c8>
   131c0:	add	r1, r1, #1
   131c4:	cmp	r8, sl
   131c8:	strbcc	r0, [r2, r8]
   131cc:	add	r8, r8, #1
   131d0:	ldrb	r0, [r1], #1
   131d4:	cmp	r0, #0
   131d8:	bne	131c4 <__assert_fail@plt+0x20a8>
   131dc:	b	131e4 <__assert_fail@plt+0x20c8>
   131e0:	ldr	r2, [sp, #80]	; 0x50
   131e4:	cmp	r8, sl
   131e8:	movcc	r0, #0
   131ec:	strbcc	r0, [r2, r8]
   131f0:	mov	r0, r8
   131f4:	sub	sp, fp, #28
   131f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131fc:	mov	r2, #1
   13200:	b	130dc <__assert_fail@plt+0x1fc0>
   13204:	ldr	r2, [sp, #84]	; 0x54
   13208:	mov	r7, #5
   1320c:	b	130f4 <__assert_fail@plt+0x1fd8>
   13210:	bl	11104 <abort@plt>
   13214:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13218:	add	fp, sp, #28
   1321c:	sub	sp, sp, #28
   13220:	movw	r5, #29080	; 0x7198
   13224:	cmp	r2, #0
   13228:	mov	r4, r1
   1322c:	mov	r7, r0
   13230:	str	r0, [sp, #20]
   13234:	movt	r5, #2
   13238:	movne	r5, r2
   1323c:	bl	11038 <__errno_location@plt>
   13240:	mov	sl, r0
   13244:	ldm	r5, {r0, r1}
   13248:	ldr	r2, [r5, #40]	; 0x28
   1324c:	ldr	r3, [r5, #44]	; 0x2c
   13250:	add	r9, r5, #8
   13254:	ldr	r6, [sl]
   13258:	orr	r8, r1, #1
   1325c:	mov	r1, #0
   13260:	str	r6, [sp, #24]
   13264:	stm	sp, {r0, r8, r9}
   13268:	str	r2, [sp, #12]
   1326c:	str	r3, [sp, #16]
   13270:	mov	r0, #0
   13274:	mov	r2, r7
   13278:	mov	r3, r4
   1327c:	mov	r6, r4
   13280:	bl	1220c <__assert_fail@plt+0x10f0>
   13284:	add	r7, r0, #1
   13288:	mov	r0, r7
   1328c:	bl	14424 <__assert_fail@plt+0x3308>
   13290:	mov	r4, r0
   13294:	ldr	r0, [r5]
   13298:	ldr	r2, [r5, #44]	; 0x2c
   1329c:	ldr	r1, [r5, #40]	; 0x28
   132a0:	mov	r3, r6
   132a4:	stm	sp, {r0, r8, r9}
   132a8:	str	r2, [sp, #16]
   132ac:	str	r1, [sp, #12]
   132b0:	mov	r0, r4
   132b4:	mov	r1, r7
   132b8:	ldr	r2, [sp, #20]
   132bc:	bl	1220c <__assert_fail@plt+0x10f0>
   132c0:	ldr	r0, [sp, #24]
   132c4:	str	r0, [sl]
   132c8:	mov	r0, r4
   132cc:	sub	sp, fp, #28
   132d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132d8:	add	fp, sp, #28
   132dc:	sub	sp, sp, #36	; 0x24
   132e0:	movw	r8, #29080	; 0x7198
   132e4:	cmp	r3, #0
   132e8:	mov	r4, r2
   132ec:	str	r2, [sp, #24]
   132f0:	mov	r5, r1
   132f4:	mov	r6, r0
   132f8:	str	r0, [sp, #20]
   132fc:	movt	r8, #2
   13300:	movne	r8, r3
   13304:	bl	11038 <__errno_location@plt>
   13308:	str	r0, [sp, #28]
   1330c:	cmp	r4, #0
   13310:	add	sl, r8, #8
   13314:	ldm	r8, {r3, r9}
   13318:	ldr	r7, [r0]
   1331c:	ldr	r1, [r8, #40]	; 0x28
   13320:	ldr	r2, [r8, #44]	; 0x2c
   13324:	mov	r0, #0
   13328:	orreq	r9, r9, #1
   1332c:	str	r7, [sp, #32]
   13330:	mov	r7, r5
   13334:	stm	sp, {r3, r9, sl}
   13338:	str	r1, [sp, #12]
   1333c:	str	r2, [sp, #16]
   13340:	mov	r1, #0
   13344:	mov	r2, r6
   13348:	mov	r3, r5
   1334c:	bl	1220c <__assert_fail@plt+0x10f0>
   13350:	add	r4, r0, #1
   13354:	mov	r5, r0
   13358:	mov	r0, r4
   1335c:	bl	14424 <__assert_fail@plt+0x3308>
   13360:	mov	r6, r0
   13364:	ldr	r0, [r8]
   13368:	ldr	r2, [r8, #44]	; 0x2c
   1336c:	ldr	r1, [r8, #40]	; 0x28
   13370:	mov	r3, r7
   13374:	stm	sp, {r0, r9, sl}
   13378:	str	r2, [sp, #16]
   1337c:	str	r1, [sp, #12]
   13380:	mov	r0, r6
   13384:	mov	r1, r4
   13388:	ldr	r2, [sp, #20]
   1338c:	bl	1220c <__assert_fail@plt+0x10f0>
   13390:	ldr	r0, [sp, #24]
   13394:	ldr	r1, [sp, #32]
   13398:	ldr	r2, [sp, #28]
   1339c:	cmp	r0, #0
   133a0:	str	r1, [r2]
   133a4:	strne	r5, [r0]
   133a8:	mov	r0, r6
   133ac:	sub	sp, fp, #28
   133b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   133b8:	add	fp, sp, #24
   133bc:	movw	r5, #28932	; 0x7104
   133c0:	movw	r8, #28928	; 0x7100
   133c4:	movt	r5, #2
   133c8:	movt	r8, #2
   133cc:	ldr	r0, [r5]
   133d0:	ldr	r4, [r8]
   133d4:	cmp	r0, #2
   133d8:	blt	13404 <__assert_fail@plt+0x22e8>
   133dc:	add	r7, r4, #12
   133e0:	mov	r6, #0
   133e4:	ldr	r0, [r7, r6, lsl #3]
   133e8:	bl	11fa8 <__assert_fail@plt+0xe8c>
   133ec:	ldr	r1, [r5]
   133f0:	add	r2, r6, #2
   133f4:	add	r0, r6, #1
   133f8:	mov	r6, r0
   133fc:	cmp	r2, r1
   13400:	blt	133e4 <__assert_fail@plt+0x22c8>
   13404:	ldr	r0, [r4, #4]
   13408:	movw	r7, #29128	; 0x71c8
   1340c:	movt	r7, #2
   13410:	cmp	r0, r7
   13414:	beq	1342c <__assert_fail@plt+0x2310>
   13418:	bl	11fa8 <__assert_fail@plt+0xe8c>
   1341c:	movw	r0, #28936	; 0x7108
   13420:	mov	r6, #256	; 0x100
   13424:	movt	r0, #2
   13428:	strd	r6, [r0]
   1342c:	movw	r6, #28936	; 0x7108
   13430:	movt	r6, #2
   13434:	cmp	r4, r6
   13438:	beq	13448 <__assert_fail@plt+0x232c>
   1343c:	mov	r0, r4
   13440:	bl	11fa8 <__assert_fail@plt+0xe8c>
   13444:	str	r6, [r8]
   13448:	mov	r0, #1
   1344c:	str	r0, [r5]
   13450:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13454:	movw	r3, #29080	; 0x7198
   13458:	mvn	r2, #0
   1345c:	movt	r3, #2
   13460:	b	13464 <__assert_fail@plt+0x2348>
   13464:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13468:	add	fp, sp, #28
   1346c:	sub	sp, sp, #44	; 0x2c
   13470:	mov	r7, r3
   13474:	str	r2, [sp, #36]	; 0x24
   13478:	str	r1, [sp, #32]
   1347c:	mov	r5, r0
   13480:	bl	11038 <__errno_location@plt>
   13484:	cmp	r5, #0
   13488:	blt	135f4 <__assert_fail@plt+0x24d8>
   1348c:	cmn	r5, #-2147483647	; 0x80000001
   13490:	beq	135f4 <__assert_fail@plt+0x24d8>
   13494:	movw	r8, #28932	; 0x7104
   13498:	movw	r4, #28928	; 0x7100
   1349c:	str	r0, [sp, #28]
   134a0:	ldr	r0, [r0]
   134a4:	movt	r8, #2
   134a8:	movt	r4, #2
   134ac:	ldr	r1, [r8]
   134b0:	ldr	r6, [r4]
   134b4:	str	r0, [sp, #24]
   134b8:	cmp	r1, r5
   134bc:	ble	134c8 <__assert_fail@plt+0x23ac>
   134c0:	mov	sl, r6
   134c4:	b	13530 <__assert_fail@plt+0x2414>
   134c8:	movw	r9, #28936	; 0x7108
   134cc:	mov	r0, #8
   134d0:	add	r2, r5, #1
   134d4:	str	r1, [fp, #-32]	; 0xffffffe0
   134d8:	mvn	r3, #-2147483648	; 0x80000000
   134dc:	movt	r9, #2
   134e0:	str	r0, [sp]
   134e4:	sub	r2, r2, r1
   134e8:	sub	r1, fp, #32
   134ec:	subs	r0, r6, r9
   134f0:	movne	r0, r6
   134f4:	bl	14624 <__assert_fail@plt+0x3508>
   134f8:	cmp	r6, r9
   134fc:	mov	sl, r0
   13500:	str	r0, [r4]
   13504:	ldrdeq	r0, [r9]
   13508:	stmeq	sl, {r0, r1}
   1350c:	ldr	r1, [r8]
   13510:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13514:	add	r0, sl, r1, lsl #3
   13518:	sub	r1, r2, r1
   1351c:	lsl	r2, r1, #3
   13520:	mov	r1, #0
   13524:	bl	11050 <memset@plt>
   13528:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1352c:	str	r0, [r8]
   13530:	mov	r9, sl
   13534:	ldr	r6, [r9, r5, lsl #3]!
   13538:	ldr	r4, [r9, #4]!
   1353c:	ldm	r7, {r0, r1}
   13540:	ldr	r2, [r7, #40]	; 0x28
   13544:	ldr	r3, [r7, #44]	; 0x2c
   13548:	orr	r8, r1, #1
   1354c:	add	r1, r7, #8
   13550:	stm	sp, {r0, r8}
   13554:	add	r0, sp, #8
   13558:	str	r1, [sp, #20]
   1355c:	stm	r0, {r1, r2, r3}
   13560:	mov	r0, r4
   13564:	mov	r1, r6
   13568:	ldr	r2, [sp, #32]
   1356c:	ldr	r3, [sp, #36]	; 0x24
   13570:	bl	1220c <__assert_fail@plt+0x10f0>
   13574:	cmp	r6, r0
   13578:	bhi	135dc <__assert_fail@plt+0x24c0>
   1357c:	add	r6, r0, #1
   13580:	movw	r0, #29128	; 0x71c8
   13584:	movt	r0, #2
   13588:	str	r6, [sl, r5, lsl #3]
   1358c:	cmp	r4, r0
   13590:	beq	1359c <__assert_fail@plt+0x2480>
   13594:	mov	r0, r4
   13598:	bl	11fa8 <__assert_fail@plt+0xe8c>
   1359c:	mov	r0, r6
   135a0:	bl	14424 <__assert_fail@plt+0x3308>
   135a4:	str	r0, [r9]
   135a8:	mov	r4, r0
   135ac:	add	r3, sp, #8
   135b0:	ldr	r0, [r7]
   135b4:	ldr	r1, [r7, #40]	; 0x28
   135b8:	ldr	r2, [r7, #44]	; 0x2c
   135bc:	stm	sp, {r0, r8}
   135c0:	ldr	r0, [sp, #20]
   135c4:	stm	r3, {r0, r1, r2}
   135c8:	mov	r0, r4
   135cc:	mov	r1, r6
   135d0:	ldr	r2, [sp, #32]
   135d4:	ldr	r3, [sp, #36]	; 0x24
   135d8:	bl	1220c <__assert_fail@plt+0x10f0>
   135dc:	ldr	r0, [sp, #28]
   135e0:	ldr	r1, [sp, #24]
   135e4:	str	r1, [r0]
   135e8:	mov	r0, r4
   135ec:	sub	sp, fp, #28
   135f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135f4:	bl	11104 <abort@plt>
   135f8:	movw	r3, #29080	; 0x7198
   135fc:	movt	r3, #2
   13600:	b	13464 <__assert_fail@plt+0x2348>
   13604:	movw	r3, #29080	; 0x7198
   13608:	mov	r1, r0
   1360c:	mov	r0, #0
   13610:	mvn	r2, #0
   13614:	movt	r3, #2
   13618:	b	13464 <__assert_fail@plt+0x2348>
   1361c:	movw	r3, #29080	; 0x7198
   13620:	mov	r2, r1
   13624:	mov	r1, r0
   13628:	mov	r0, #0
   1362c:	movt	r3, #2
   13630:	b	13464 <__assert_fail@plt+0x2348>
   13634:	push	{fp, lr}
   13638:	mov	fp, sp
   1363c:	sub	sp, sp, #48	; 0x30
   13640:	vmov.i32	q8, #0	; 0x00000000
   13644:	mov	ip, #32
   13648:	mov	r3, sp
   1364c:	mov	lr, r2
   13650:	cmp	r1, #10
   13654:	add	r2, r3, #16
   13658:	vst1.64	{d16-d17}, [r3], ip
   1365c:	vst1.64	{d16-d17}, [r3]
   13660:	vst1.64	{d16-d17}, [r2]
   13664:	beq	13684 <__assert_fail@plt+0x2568>
   13668:	str	r1, [sp]
   1366c:	mov	r3, sp
   13670:	mov	r1, lr
   13674:	mvn	r2, #0
   13678:	bl	13464 <__assert_fail@plt+0x2348>
   1367c:	mov	sp, fp
   13680:	pop	{fp, pc}
   13684:	bl	11104 <abort@plt>
   13688:	push	{r4, sl, fp, lr}
   1368c:	add	fp, sp, #8
   13690:	sub	sp, sp, #48	; 0x30
   13694:	mov	ip, r3
   13698:	mov	r3, sp
   1369c:	vmov.i32	q8, #0	; 0x00000000
   136a0:	mov	lr, #32
   136a4:	cmp	r1, #10
   136a8:	add	r4, r3, #16
   136ac:	vst1.64	{d16-d17}, [r3], lr
   136b0:	vst1.64	{d16-d17}, [r3]
   136b4:	vst1.64	{d16-d17}, [r4]
   136b8:	beq	136d8 <__assert_fail@plt+0x25bc>
   136bc:	str	r1, [sp]
   136c0:	mov	r1, r2
   136c4:	mov	r3, sp
   136c8:	mov	r2, ip
   136cc:	bl	13464 <__assert_fail@plt+0x2348>
   136d0:	sub	sp, fp, #8
   136d4:	pop	{r4, sl, fp, pc}
   136d8:	bl	11104 <abort@plt>
   136dc:	push	{fp, lr}
   136e0:	mov	fp, sp
   136e4:	sub	sp, sp, #48	; 0x30
   136e8:	mov	r3, sp
   136ec:	vmov.i32	q8, #0	; 0x00000000
   136f0:	mov	ip, #32
   136f4:	cmp	r0, #10
   136f8:	add	r2, r3, #16
   136fc:	vst1.64	{d16-d17}, [r3], ip
   13700:	vst1.64	{d16-d17}, [r3]
   13704:	vst1.64	{d16-d17}, [r2]
   13708:	beq	13728 <__assert_fail@plt+0x260c>
   1370c:	str	r0, [sp]
   13710:	mov	r3, sp
   13714:	mov	r0, #0
   13718:	mvn	r2, #0
   1371c:	bl	13464 <__assert_fail@plt+0x2348>
   13720:	mov	sp, fp
   13724:	pop	{fp, pc}
   13728:	bl	11104 <abort@plt>
   1372c:	push	{fp, lr}
   13730:	mov	fp, sp
   13734:	sub	sp, sp, #48	; 0x30
   13738:	mov	r3, sp
   1373c:	vmov.i32	q8, #0	; 0x00000000
   13740:	mov	ip, #32
   13744:	cmp	r0, #10
   13748:	add	lr, r3, #16
   1374c:	vst1.64	{d16-d17}, [r3], ip
   13750:	vst1.64	{d16-d17}, [r3]
   13754:	vst1.64	{d16-d17}, [lr]
   13758:	beq	13774 <__assert_fail@plt+0x2658>
   1375c:	str	r0, [sp]
   13760:	mov	r3, sp
   13764:	mov	r0, #0
   13768:	bl	13464 <__assert_fail@plt+0x2348>
   1376c:	mov	sp, fp
   13770:	pop	{fp, pc}
   13774:	bl	11104 <abort@plt>
   13778:	push	{r4, sl, fp, lr}
   1377c:	add	fp, sp, #8
   13780:	sub	sp, sp, #48	; 0x30
   13784:	mov	lr, r0
   13788:	movw	r0, #29080	; 0x7198
   1378c:	mov	r3, #32
   13790:	mov	ip, r1
   13794:	mov	r4, #1
   13798:	movt	r0, #2
   1379c:	add	r1, r0, #16
   137a0:	vld1.64	{d16-d17}, [r0], r3
   137a4:	mov	r3, sp
   137a8:	vld1.64	{d18-d19}, [r1]
   137ac:	add	r1, r3, #16
   137b0:	vld1.64	{d20-d21}, [r0]
   137b4:	add	r0, r3, #32
   137b8:	vst1.64	{d18-d19}, [r1]
   137bc:	mov	r1, r3
   137c0:	vst1.64	{d20-d21}, [r0]
   137c4:	mov	r0, #28
   137c8:	and	r0, r0, r2, lsr #3
   137cc:	and	r2, r2, #31
   137d0:	vst1.64	{d16-d17}, [r1], r0
   137d4:	ldr	r0, [r1, #8]
   137d8:	bic	r4, r4, r0, lsr r2
   137dc:	eor	r0, r0, r4, lsl r2
   137e0:	mov	r2, ip
   137e4:	str	r0, [r1, #8]
   137e8:	mov	r0, #0
   137ec:	mov	r1, lr
   137f0:	bl	13464 <__assert_fail@plt+0x2348>
   137f4:	sub	sp, fp, #8
   137f8:	pop	{r4, sl, fp, pc}
   137fc:	push	{fp, lr}
   13800:	mov	fp, sp
   13804:	sub	sp, sp, #48	; 0x30
   13808:	mov	ip, r0
   1380c:	movw	r0, #29080	; 0x7198
   13810:	mov	r3, #32
   13814:	movt	r0, #2
   13818:	add	r2, r0, #16
   1381c:	vld1.64	{d16-d17}, [r0], r3
   13820:	mov	r3, sp
   13824:	vld1.64	{d18-d19}, [r2]
   13828:	add	r2, r3, #16
   1382c:	vld1.64	{d20-d21}, [r0]
   13830:	add	r0, r3, #32
   13834:	vst1.64	{d18-d19}, [r2]
   13838:	mov	r2, r3
   1383c:	vst1.64	{d20-d21}, [r0]
   13840:	mov	r0, #28
   13844:	and	r0, r0, r1, lsr #3
   13848:	and	r1, r1, #31
   1384c:	vst1.64	{d16-d17}, [r2], r0
   13850:	mov	r0, #1
   13854:	ldr	lr, [r2, #8]
   13858:	bic	r0, r0, lr, lsr r1
   1385c:	eor	r0, lr, r0, lsl r1
   13860:	mov	r1, ip
   13864:	str	r0, [r2, #8]
   13868:	mov	r0, #0
   1386c:	mvn	r2, #0
   13870:	bl	13464 <__assert_fail@plt+0x2348>
   13874:	mov	sp, fp
   13878:	pop	{fp, pc}
   1387c:	push	{fp, lr}
   13880:	mov	fp, sp
   13884:	sub	sp, sp, #48	; 0x30
   13888:	movw	r2, #29080	; 0x7198
   1388c:	mov	r3, #32
   13890:	mov	r1, r0
   13894:	movt	r2, #2
   13898:	add	r0, r2, #16
   1389c:	vld1.64	{d16-d17}, [r2], r3
   138a0:	mov	r3, sp
   138a4:	vld1.64	{d18-d19}, [r0]
   138a8:	add	r0, r3, #16
   138ac:	vld1.64	{d20-d21}, [r2]
   138b0:	mov	r2, r3
   138b4:	vst1.64	{d18-d19}, [r0]
   138b8:	add	r0, r3, #32
   138bc:	vst1.64	{d20-d21}, [r0]
   138c0:	mov	r0, #12
   138c4:	vst1.64	{d16-d17}, [r2], r0
   138c8:	ldr	r0, [r2]
   138cc:	orr	r0, r0, #67108864	; 0x4000000
   138d0:	str	r0, [r2]
   138d4:	mov	r0, #0
   138d8:	mvn	r2, #0
   138dc:	bl	13464 <__assert_fail@plt+0x2348>
   138e0:	mov	sp, fp
   138e4:	pop	{fp, pc}
   138e8:	push	{fp, lr}
   138ec:	mov	fp, sp
   138f0:	sub	sp, sp, #48	; 0x30
   138f4:	mov	ip, r1
   138f8:	mov	r1, r0
   138fc:	movw	r0, #29080	; 0x7198
   13900:	mov	r3, #32
   13904:	movt	r0, #2
   13908:	add	r2, r0, #16
   1390c:	vld1.64	{d16-d17}, [r0], r3
   13910:	mov	r3, sp
   13914:	vld1.64	{d18-d19}, [r2]
   13918:	add	r2, r3, #16
   1391c:	vld1.64	{d20-d21}, [r0]
   13920:	add	r0, r3, #32
   13924:	vst1.64	{d18-d19}, [r2]
   13928:	mov	r2, r3
   1392c:	vst1.64	{d20-d21}, [r0]
   13930:	mov	r0, #12
   13934:	vst1.64	{d16-d17}, [r2], r0
   13938:	ldr	r0, [r2]
   1393c:	orr	r0, r0, #67108864	; 0x4000000
   13940:	str	r0, [r2]
   13944:	mov	r0, #0
   13948:	mov	r2, ip
   1394c:	bl	13464 <__assert_fail@plt+0x2348>
   13950:	mov	sp, fp
   13954:	pop	{fp, pc}
   13958:	push	{r4, sl, fp, lr}
   1395c:	add	fp, sp, #8
   13960:	sub	sp, sp, #96	; 0x60
   13964:	mov	ip, r2
   13968:	mov	r2, sp
   1396c:	vmov.i32	q8, #0	; 0x00000000
   13970:	mov	r4, #28
   13974:	cmp	r1, #10
   13978:	mov	r3, r2
   1397c:	add	lr, r2, #16
   13980:	vst1.64	{d16-d17}, [r3], r4
   13984:	vst1.64	{d16-d17}, [lr]
   13988:	vst1.32	{d16-d17}, [r3]
   1398c:	beq	139dc <__assert_fail@plt+0x28c0>
   13990:	vld1.64	{d16-d17}, [r2], r4
   13994:	vld1.64	{d18-d19}, [lr]
   13998:	add	r3, sp, #48	; 0x30
   1399c:	add	r4, r3, #4
   139a0:	vld1.32	{d20-d21}, [r2]
   139a4:	add	r2, r3, #20
   139a8:	vst1.32	{d16-d17}, [r4]
   139ac:	vst1.32	{d18-d19}, [r2]
   139b0:	add	r2, r3, #32
   139b4:	vst1.32	{d20-d21}, [r2]
   139b8:	str	r1, [sp, #48]	; 0x30
   139bc:	mvn	r2, #0
   139c0:	ldr	r1, [sp, #60]	; 0x3c
   139c4:	orr	r1, r1, #67108864	; 0x4000000
   139c8:	str	r1, [sp, #60]	; 0x3c
   139cc:	mov	r1, ip
   139d0:	bl	13464 <__assert_fail@plt+0x2348>
   139d4:	sub	sp, fp, #8
   139d8:	pop	{r4, sl, fp, pc}
   139dc:	bl	11104 <abort@plt>
   139e0:	push	{r4, r5, fp, lr}
   139e4:	add	fp, sp, #8
   139e8:	sub	sp, sp, #48	; 0x30
   139ec:	mov	ip, r3
   139f0:	movw	r3, #29080	; 0x7198
   139f4:	mov	lr, #32
   139f8:	cmp	r1, #0
   139fc:	mov	r5, sp
   13a00:	movt	r3, #2
   13a04:	cmpne	r2, #0
   13a08:	add	r4, r3, #16
   13a0c:	vld1.64	{d16-d17}, [r3], lr
   13a10:	vld1.64	{d18-d19}, [r4]
   13a14:	add	r4, r5, #16
   13a18:	vld1.64	{d20-d21}, [r3]
   13a1c:	vst1.64	{d16-d17}, [r5], lr
   13a20:	mov	r3, #10
   13a24:	vst1.64	{d18-d19}, [r4]
   13a28:	vst1.64	{d20-d21}, [r5]
   13a2c:	str	r3, [sp]
   13a30:	bne	13a38 <__assert_fail@plt+0x291c>
   13a34:	bl	11104 <abort@plt>
   13a38:	str	r2, [sp, #44]	; 0x2c
   13a3c:	str	r1, [sp, #40]	; 0x28
   13a40:	mov	r3, sp
   13a44:	mov	r1, ip
   13a48:	mvn	r2, #0
   13a4c:	bl	13464 <__assert_fail@plt+0x2348>
   13a50:	sub	sp, fp, #8
   13a54:	pop	{r4, r5, fp, pc}
   13a58:	push	{r4, r5, fp, lr}
   13a5c:	add	fp, sp, #8
   13a60:	sub	sp, sp, #48	; 0x30
   13a64:	mov	lr, r3
   13a68:	movw	r3, #29080	; 0x7198
   13a6c:	mov	ip, #32
   13a70:	cmp	r1, #0
   13a74:	mov	r5, sp
   13a78:	movt	r3, #2
   13a7c:	cmpne	r2, #0
   13a80:	add	r4, r3, #16
   13a84:	vld1.64	{d16-d17}, [r3], ip
   13a88:	vld1.64	{d18-d19}, [r4]
   13a8c:	add	r4, r5, #16
   13a90:	vld1.64	{d20-d21}, [r3]
   13a94:	vst1.64	{d16-d17}, [r5], ip
   13a98:	mov	r3, #10
   13a9c:	vst1.64	{d18-d19}, [r4]
   13aa0:	vst1.64	{d20-d21}, [r5]
   13aa4:	str	r3, [sp]
   13aa8:	bne	13ab0 <__assert_fail@plt+0x2994>
   13aac:	bl	11104 <abort@plt>
   13ab0:	ldr	ip, [fp, #8]
   13ab4:	str	r2, [sp, #44]	; 0x2c
   13ab8:	str	r1, [sp, #40]	; 0x28
   13abc:	mov	r3, sp
   13ac0:	mov	r1, lr
   13ac4:	mov	r2, ip
   13ac8:	bl	13464 <__assert_fail@plt+0x2348>
   13acc:	sub	sp, fp, #8
   13ad0:	pop	{r4, r5, fp, pc}
   13ad4:	push	{r4, sl, fp, lr}
   13ad8:	add	fp, sp, #8
   13adc:	sub	sp, sp, #48	; 0x30
   13ae0:	mov	ip, r2
   13ae4:	movw	r2, #29080	; 0x7198
   13ae8:	mov	lr, #32
   13aec:	cmp	r0, #0
   13af0:	mov	r4, sp
   13af4:	movt	r2, #2
   13af8:	cmpne	r1, #0
   13afc:	add	r3, r2, #16
   13b00:	vld1.64	{d16-d17}, [r2], lr
   13b04:	vld1.64	{d18-d19}, [r3]
   13b08:	add	r3, r4, #16
   13b0c:	vld1.64	{d20-d21}, [r2]
   13b10:	vst1.64	{d16-d17}, [r4], lr
   13b14:	mov	r2, #10
   13b18:	vst1.64	{d18-d19}, [r3]
   13b1c:	vst1.64	{d20-d21}, [r4]
   13b20:	str	r2, [sp]
   13b24:	bne	13b2c <__assert_fail@plt+0x2a10>
   13b28:	bl	11104 <abort@plt>
   13b2c:	str	r1, [sp, #44]	; 0x2c
   13b30:	str	r0, [sp, #40]	; 0x28
   13b34:	mov	r3, sp
   13b38:	mov	r0, #0
   13b3c:	mov	r1, ip
   13b40:	mvn	r2, #0
   13b44:	bl	13464 <__assert_fail@plt+0x2348>
   13b48:	sub	sp, fp, #8
   13b4c:	pop	{r4, sl, fp, pc}
   13b50:	push	{r4, r5, fp, lr}
   13b54:	add	fp, sp, #8
   13b58:	sub	sp, sp, #48	; 0x30
   13b5c:	mov	lr, r2
   13b60:	movw	r2, #29080	; 0x7198
   13b64:	mov	ip, r3
   13b68:	mov	r3, #32
   13b6c:	cmp	r0, #0
   13b70:	mov	r5, sp
   13b74:	movt	r2, #2
   13b78:	cmpne	r1, #0
   13b7c:	add	r4, r2, #16
   13b80:	vld1.64	{d16-d17}, [r2], r3
   13b84:	vld1.64	{d18-d19}, [r4]
   13b88:	add	r4, r5, #16
   13b8c:	vld1.64	{d20-d21}, [r2]
   13b90:	vst1.64	{d16-d17}, [r5], r3
   13b94:	mov	r2, #10
   13b98:	vst1.64	{d18-d19}, [r4]
   13b9c:	vst1.64	{d20-d21}, [r5]
   13ba0:	str	r2, [sp]
   13ba4:	bne	13bac <__assert_fail@plt+0x2a90>
   13ba8:	bl	11104 <abort@plt>
   13bac:	str	r1, [sp, #44]	; 0x2c
   13bb0:	str	r0, [sp, #40]	; 0x28
   13bb4:	mov	r3, sp
   13bb8:	mov	r0, #0
   13bbc:	mov	r1, lr
   13bc0:	mov	r2, ip
   13bc4:	bl	13464 <__assert_fail@plt+0x2348>
   13bc8:	sub	sp, fp, #8
   13bcc:	pop	{r4, r5, fp, pc}
   13bd0:	movw	r3, #28944	; 0x7110
   13bd4:	movt	r3, #2
   13bd8:	b	13464 <__assert_fail@plt+0x2348>
   13bdc:	movw	r3, #28944	; 0x7110
   13be0:	mov	r2, r1
   13be4:	mov	r1, r0
   13be8:	mov	r0, #0
   13bec:	movt	r3, #2
   13bf0:	b	13464 <__assert_fail@plt+0x2348>
   13bf4:	movw	r3, #28944	; 0x7110
   13bf8:	mvn	r2, #0
   13bfc:	movt	r3, #2
   13c00:	b	13464 <__assert_fail@plt+0x2348>
   13c04:	movw	r3, #28944	; 0x7110
   13c08:	mov	r1, r0
   13c0c:	mov	r0, #0
   13c10:	mvn	r2, #0
   13c14:	movt	r3, #2
   13c18:	b	13464 <__assert_fail@plt+0x2348>
   13c1c:	push	{r4, r5, fp, lr}
   13c20:	add	fp, sp, #8
   13c24:	mov	r5, r0
   13c28:	mov	r4, r1
   13c2c:	mov	r0, #0
   13c30:	mov	r2, #5
   13c34:	mov	r1, r5
   13c38:	bl	10f24 <dcgettext@plt>
   13c3c:	cmp	r0, r5
   13c40:	popne	{r4, r5, fp, pc}
   13c44:	bl	15bec <__assert_fail@plt+0x4ad0>
   13c48:	ldrb	r1, [r0]
   13c4c:	and	r1, r1, #223	; 0xdf
   13c50:	cmp	r1, #71	; 0x47
   13c54:	beq	13cbc <__assert_fail@plt+0x2ba0>
   13c58:	cmp	r1, #85	; 0x55
   13c5c:	bne	13ce0 <__assert_fail@plt+0x2bc4>
   13c60:	ldrb	r1, [r0, #1]
   13c64:	and	r1, r1, #223	; 0xdf
   13c68:	cmp	r1, #84	; 0x54
   13c6c:	bne	13ce0 <__assert_fail@plt+0x2bc4>
   13c70:	ldrb	r1, [r0, #2]
   13c74:	and	r1, r1, #223	; 0xdf
   13c78:	cmp	r1, #70	; 0x46
   13c7c:	ldrbeq	r1, [r0, #3]
   13c80:	cmpeq	r1, #45	; 0x2d
   13c84:	bne	13ce0 <__assert_fail@plt+0x2bc4>
   13c88:	ldrb	r1, [r0, #4]
   13c8c:	cmp	r1, #56	; 0x38
   13c90:	ldrbeq	r0, [r0, #5]
   13c94:	cmpeq	r0, #0
   13c98:	bne	13ce0 <__assert_fail@plt+0x2bc4>
   13c9c:	ldrb	r1, [r5]
   13ca0:	movw	r2, #26856	; 0x68e8
   13ca4:	movw	r0, #26860	; 0x68ec
   13ca8:	movt	r2, #1
   13cac:	movt	r0, #1
   13cb0:	cmp	r1, #96	; 0x60
   13cb4:	moveq	r0, r2
   13cb8:	pop	{r4, r5, fp, pc}
   13cbc:	ldrb	r1, [r0, #1]
   13cc0:	and	r1, r1, #223	; 0xdf
   13cc4:	cmp	r1, #66	; 0x42
   13cc8:	bne	13ce0 <__assert_fail@plt+0x2bc4>
   13ccc:	ldrb	r1, [r0, #2]
   13cd0:	cmp	r1, #49	; 0x31
   13cd4:	ldrbeq	r1, [r0, #3]
   13cd8:	cmpeq	r1, #56	; 0x38
   13cdc:	beq	13cfc <__assert_fail@plt+0x2be0>
   13ce0:	movw	r1, #26850	; 0x68e2
   13ce4:	movw	r0, #26854	; 0x68e6
   13ce8:	cmp	r4, #9
   13cec:	movt	r1, #1
   13cf0:	movt	r0, #1
   13cf4:	moveq	r0, r1
   13cf8:	pop	{r4, r5, fp, pc}
   13cfc:	ldrb	r1, [r0, #4]
   13d00:	cmp	r1, #48	; 0x30
   13d04:	ldrbeq	r1, [r0, #5]
   13d08:	cmpeq	r1, #51	; 0x33
   13d0c:	bne	13ce0 <__assert_fail@plt+0x2bc4>
   13d10:	ldrb	r1, [r0, #6]
   13d14:	cmp	r1, #48	; 0x30
   13d18:	ldrbeq	r0, [r0, #7]
   13d1c:	cmpeq	r0, #0
   13d20:	bne	13ce0 <__assert_fail@plt+0x2bc4>
   13d24:	ldrb	r1, [r5]
   13d28:	movw	r2, #26864	; 0x68f0
   13d2c:	movw	r0, #26868	; 0x68f4
   13d30:	movt	r2, #1
   13d34:	movt	r0, #1
   13d38:	b	13cb0 <__assert_fail@plt+0x2b94>
   13d3c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13d40:	add	fp, sp, #24
   13d44:	sub	sp, sp, #32
   13d48:	ldr	r6, [fp, #12]
   13d4c:	ldr	r7, [fp, #8]
   13d50:	mov	r4, r2
   13d54:	mov	r8, r0
   13d58:	cmp	r1, #0
   13d5c:	beq	13d84 <__assert_fail@plt+0x2c68>
   13d60:	movw	r2, #26956	; 0x694c
   13d64:	mov	r5, r1
   13d68:	str	r3, [sp, #4]
   13d6c:	str	r4, [sp]
   13d70:	mov	r0, r8
   13d74:	mov	r1, #1
   13d78:	movt	r2, #1
   13d7c:	mov	r3, r5
   13d80:	b	13d9c <__assert_fail@plt+0x2c80>
   13d84:	movw	r2, #26968	; 0x6958
   13d88:	str	r3, [sp]
   13d8c:	mov	r0, r8
   13d90:	mov	r1, #1
   13d94:	mov	r3, r4
   13d98:	movt	r2, #1
   13d9c:	bl	11074 <__fprintf_chk@plt>
   13da0:	movw	r1, #26975	; 0x695f
   13da4:	mov	r0, #0
   13da8:	mov	r2, #5
   13dac:	movt	r1, #1
   13db0:	bl	10f24 <dcgettext@plt>
   13db4:	movw	r2, #27693	; 0x6c2d
   13db8:	mov	r3, r0
   13dbc:	movw	r0, #2022	; 0x7e6
   13dc0:	mov	r1, #1
   13dc4:	str	r0, [sp]
   13dc8:	movt	r2, #1
   13dcc:	mov	r0, r8
   13dd0:	bl	11074 <__fprintf_chk@plt>
   13dd4:	movw	r4, #26300	; 0x66bc
   13dd8:	mov	r1, r8
   13ddc:	movt	r4, #1
   13de0:	mov	r0, r4
   13de4:	bl	10ea0 <fputs_unlocked@plt>
   13de8:	movw	r1, #26979	; 0x6963
   13dec:	mov	r0, #0
   13df0:	mov	r2, #5
   13df4:	movt	r1, #1
   13df8:	bl	10f24 <dcgettext@plt>
   13dfc:	movw	r3, #27150	; 0x6a0e
   13e00:	mov	r2, r0
   13e04:	mov	r0, r8
   13e08:	mov	r1, #1
   13e0c:	movt	r3, #1
   13e10:	bl	11074 <__fprintf_chk@plt>
   13e14:	mov	r0, r4
   13e18:	mov	r1, r8
   13e1c:	bl	10ea0 <fputs_unlocked@plt>
   13e20:	cmp	r6, #9
   13e24:	bhi	13e60 <__assert_fail@plt+0x2d44>
   13e28:	add	r0, pc, #0
   13e2c:	ldr	pc, [r0, r6, lsl #2]
   13e30:	andeq	r3, r1, r8, asr lr
   13e34:	andeq	r3, r1, ip, ror #28
   13e38:	muleq	r1, ip, lr
   13e3c:	andeq	r3, r1, r4, asr #29
   13e40:	andeq	r3, r1, ip, ror #29
   13e44:	andeq	r3, r1, r4, lsl pc
   13e48:	andeq	r3, r1, ip, lsr pc
   13e4c:	andeq	r3, r1, r4, ror pc
   13e50:	andeq	r4, r1, r4, lsl r0
   13e54:			; <UNDEFINED> instruction: 0x00013fbc
   13e58:	sub	sp, fp, #24
   13e5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e60:	movw	r1, #27503	; 0x6b6f
   13e64:	movt	r1, #1
   13e68:	b	13fc4 <__assert_fail@plt+0x2ea8>
   13e6c:	movw	r1, #27184	; 0x6a30
   13e70:	mov	r0, #0
   13e74:	mov	r2, #5
   13e78:	movt	r1, #1
   13e7c:	bl	10f24 <dcgettext@plt>
   13e80:	ldr	r3, [r7]
   13e84:	mov	r2, r0
   13e88:	mov	r0, r8
   13e8c:	mov	r1, #1
   13e90:	sub	sp, fp, #24
   13e94:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13e98:	b	11074 <__fprintf_chk@plt>
   13e9c:	movw	r1, #27200	; 0x6a40
   13ea0:	mov	r0, #0
   13ea4:	mov	r2, #5
   13ea8:	movt	r1, #1
   13eac:	bl	10f24 <dcgettext@plt>
   13eb0:	mov	r2, r0
   13eb4:	ldr	r3, [r7]
   13eb8:	ldr	r0, [r7, #4]
   13ebc:	str	r0, [sp]
   13ec0:	b	13fb0 <__assert_fail@plt+0x2e94>
   13ec4:	movw	r1, #27223	; 0x6a57
   13ec8:	mov	r0, #0
   13ecc:	mov	r2, #5
   13ed0:	movt	r1, #1
   13ed4:	bl	10f24 <dcgettext@plt>
   13ed8:	ldr	r3, [r7]
   13edc:	mov	r2, r0
   13ee0:	ldmib	r7, {r0, r1}
   13ee4:	stm	sp, {r0, r1}
   13ee8:	b	13fb0 <__assert_fail@plt+0x2e94>
   13eec:	movw	r1, #27251	; 0x6a73
   13ef0:	mov	r0, #0
   13ef4:	mov	r2, #5
   13ef8:	movt	r1, #1
   13efc:	bl	10f24 <dcgettext@plt>
   13f00:	ldr	r3, [r7]
   13f04:	mov	r2, r0
   13f08:	ldmib	r7, {r0, r1, r7}
   13f0c:	stm	sp, {r0, r1, r7}
   13f10:	b	13fb0 <__assert_fail@plt+0x2e94>
   13f14:	movw	r1, #27283	; 0x6a93
   13f18:	mov	r0, #0
   13f1c:	mov	r2, #5
   13f20:	movt	r1, #1
   13f24:	bl	10f24 <dcgettext@plt>
   13f28:	ldr	r3, [r7]
   13f2c:	mov	r2, r0
   13f30:	ldmib	r7, {r0, r1, r6, r7}
   13f34:	stm	sp, {r0, r1, r6, r7}
   13f38:	b	13fb0 <__assert_fail@plt+0x2e94>
   13f3c:	movw	r1, #27319	; 0x6ab7
   13f40:	mov	r0, #0
   13f44:	mov	r2, #5
   13f48:	movt	r1, #1
   13f4c:	bl	10f24 <dcgettext@plt>
   13f50:	ldr	r3, [r7]
   13f54:	mov	r2, r0
   13f58:	ldmib	r7, {r0, r1, r6}
   13f5c:	ldr	r5, [r7, #16]
   13f60:	ldr	r7, [r7, #20]
   13f64:	stm	sp, {r0, r1, r6}
   13f68:	str	r5, [sp, #12]
   13f6c:	str	r7, [sp, #16]
   13f70:	b	13fb0 <__assert_fail@plt+0x2e94>
   13f74:	movw	r1, #27359	; 0x6adf
   13f78:	mov	r0, #0
   13f7c:	mov	r2, #5
   13f80:	movt	r1, #1
   13f84:	bl	10f24 <dcgettext@plt>
   13f88:	ldr	r3, [r7]
   13f8c:	mov	r2, r0
   13f90:	ldmib	r7, {r0, r1, r6}
   13f94:	ldr	r5, [r7, #16]
   13f98:	ldr	r4, [r7, #20]
   13f9c:	ldr	r7, [r7, #24]
   13fa0:	stm	sp, {r0, r1, r6}
   13fa4:	str	r5, [sp, #12]
   13fa8:	str	r4, [sp, #16]
   13fac:	str	r7, [sp, #20]
   13fb0:	mov	r0, r8
   13fb4:	mov	r1, #1
   13fb8:	b	14064 <__assert_fail@plt+0x2f48>
   13fbc:	movw	r1, #27451	; 0x6b3b
   13fc0:	movt	r1, #1
   13fc4:	mov	r0, #0
   13fc8:	mov	r2, #5
   13fcc:	bl	10f24 <dcgettext@plt>
   13fd0:	mov	ip, r0
   13fd4:	ldr	r3, [r7]
   13fd8:	ldr	r0, [r7, #4]
   13fdc:	ldr	r1, [r7, #8]
   13fe0:	ldr	r6, [r7, #12]
   13fe4:	ldr	r5, [r7, #16]
   13fe8:	ldr	r4, [r7, #20]
   13fec:	ldr	r2, [r7, #24]
   13ff0:	ldr	lr, [r7, #28]
   13ff4:	ldr	r7, [r7, #32]
   13ff8:	stm	sp, {r0, r1, r6}
   13ffc:	str	r5, [sp, #12]
   14000:	str	r4, [sp, #16]
   14004:	str	r2, [sp, #20]
   14008:	str	lr, [sp, #24]
   1400c:	str	r7, [sp, #28]
   14010:	b	14058 <__assert_fail@plt+0x2f3c>
   14014:	movw	r1, #27403	; 0x6b0b
   14018:	mov	r0, #0
   1401c:	mov	r2, #5
   14020:	movt	r1, #1
   14024:	bl	10f24 <dcgettext@plt>
   14028:	mov	ip, r0
   1402c:	ldr	r3, [r7]
   14030:	ldmib	r7, {r0, r1, r6}
   14034:	ldr	r5, [r7, #16]
   14038:	ldr	r4, [r7, #20]
   1403c:	ldr	r2, [r7, #24]
   14040:	ldr	r7, [r7, #28]
   14044:	stm	sp, {r0, r1, r6}
   14048:	str	r5, [sp, #12]
   1404c:	str	r4, [sp, #16]
   14050:	str	r2, [sp, #20]
   14054:	str	r7, [sp, #24]
   14058:	mov	r0, r8
   1405c:	mov	r1, #1
   14060:	mov	r2, ip
   14064:	bl	11074 <__fprintf_chk@plt>
   14068:	sub	sp, fp, #24
   1406c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14070:	push	{r4, sl, fp, lr}
   14074:	add	fp, sp, #8
   14078:	sub	sp, sp, #8
   1407c:	ldr	ip, [fp, #8]
   14080:	mov	lr, #0
   14084:	ldr	r4, [ip, lr, lsl #2]
   14088:	add	lr, lr, #1
   1408c:	cmp	r4, #0
   14090:	bne	14084 <__assert_fail@plt+0x2f68>
   14094:	sub	r4, lr, #1
   14098:	str	ip, [sp]
   1409c:	str	r4, [sp, #4]
   140a0:	bl	13d3c <__assert_fail@plt+0x2c20>
   140a4:	sub	sp, fp, #8
   140a8:	pop	{r4, sl, fp, pc}
   140ac:	push	{fp, lr}
   140b0:	mov	fp, sp
   140b4:	sub	sp, sp, #48	; 0x30
   140b8:	ldr	ip, [fp, #8]
   140bc:	ldr	lr, [ip]
   140c0:	cmp	lr, #0
   140c4:	str	lr, [sp, #8]
   140c8:	beq	14164 <__assert_fail@plt+0x3048>
   140cc:	ldr	lr, [ip, #4]
   140d0:	cmp	lr, #0
   140d4:	str	lr, [sp, #12]
   140d8:	beq	1416c <__assert_fail@plt+0x3050>
   140dc:	ldr	lr, [ip, #8]
   140e0:	cmp	lr, #0
   140e4:	str	lr, [sp, #16]
   140e8:	beq	14174 <__assert_fail@plt+0x3058>
   140ec:	ldr	lr, [ip, #12]
   140f0:	cmp	lr, #0
   140f4:	str	lr, [sp, #20]
   140f8:	beq	1417c <__assert_fail@plt+0x3060>
   140fc:	ldr	lr, [ip, #16]
   14100:	cmp	lr, #0
   14104:	str	lr, [sp, #24]
   14108:	beq	14184 <__assert_fail@plt+0x3068>
   1410c:	ldr	lr, [ip, #20]
   14110:	cmp	lr, #0
   14114:	str	lr, [sp, #28]
   14118:	beq	1418c <__assert_fail@plt+0x3070>
   1411c:	ldr	lr, [ip, #24]
   14120:	cmp	lr, #0
   14124:	str	lr, [sp, #32]
   14128:	beq	14194 <__assert_fail@plt+0x3078>
   1412c:	ldr	lr, [ip, #28]
   14130:	cmp	lr, #0
   14134:	str	lr, [sp, #36]	; 0x24
   14138:	beq	1419c <__assert_fail@plt+0x3080>
   1413c:	ldr	lr, [ip, #32]
   14140:	cmp	lr, #0
   14144:	str	lr, [sp, #40]	; 0x28
   14148:	beq	141a4 <__assert_fail@plt+0x3088>
   1414c:	ldr	lr, [ip, #36]	; 0x24
   14150:	mov	ip, #10
   14154:	cmp	lr, #0
   14158:	str	lr, [sp, #44]	; 0x2c
   1415c:	movweq	ip, #9
   14160:	b	141a8 <__assert_fail@plt+0x308c>
   14164:	mov	ip, #0
   14168:	b	141a8 <__assert_fail@plt+0x308c>
   1416c:	mov	ip, #1
   14170:	b	141a8 <__assert_fail@plt+0x308c>
   14174:	mov	ip, #2
   14178:	b	141a8 <__assert_fail@plt+0x308c>
   1417c:	mov	ip, #3
   14180:	b	141a8 <__assert_fail@plt+0x308c>
   14184:	mov	ip, #4
   14188:	b	141a8 <__assert_fail@plt+0x308c>
   1418c:	mov	ip, #5
   14190:	b	141a8 <__assert_fail@plt+0x308c>
   14194:	mov	ip, #6
   14198:	b	141a8 <__assert_fail@plt+0x308c>
   1419c:	mov	ip, #7
   141a0:	b	141a8 <__assert_fail@plt+0x308c>
   141a4:	mov	ip, #8
   141a8:	add	lr, sp, #8
   141ac:	str	ip, [sp, #4]
   141b0:	str	lr, [sp]
   141b4:	bl	13d3c <__assert_fail@plt+0x2c20>
   141b8:	mov	sp, fp
   141bc:	pop	{fp, pc}
   141c0:	push	{fp, lr}
   141c4:	mov	fp, sp
   141c8:	sub	sp, sp, #56	; 0x38
   141cc:	add	ip, fp, #8
   141d0:	str	ip, [sp, #12]
   141d4:	ldr	lr, [fp, #8]
   141d8:	cmp	lr, #0
   141dc:	str	lr, [sp, #16]
   141e0:	beq	1427c <__assert_fail@plt+0x3160>
   141e4:	ldr	lr, [ip, #4]
   141e8:	cmp	lr, #0
   141ec:	str	lr, [sp, #20]
   141f0:	beq	14284 <__assert_fail@plt+0x3168>
   141f4:	ldr	lr, [ip, #8]
   141f8:	cmp	lr, #0
   141fc:	str	lr, [sp, #24]
   14200:	beq	1428c <__assert_fail@plt+0x3170>
   14204:	ldr	lr, [ip, #12]
   14208:	cmp	lr, #0
   1420c:	str	lr, [sp, #28]
   14210:	beq	14294 <__assert_fail@plt+0x3178>
   14214:	ldr	lr, [ip, #16]
   14218:	cmp	lr, #0
   1421c:	str	lr, [sp, #32]
   14220:	beq	1429c <__assert_fail@plt+0x3180>
   14224:	ldr	lr, [ip, #20]
   14228:	cmp	lr, #0
   1422c:	str	lr, [sp, #36]	; 0x24
   14230:	beq	142a4 <__assert_fail@plt+0x3188>
   14234:	ldr	lr, [ip, #24]
   14238:	cmp	lr, #0
   1423c:	str	lr, [sp, #40]	; 0x28
   14240:	beq	142ac <__assert_fail@plt+0x3190>
   14244:	ldr	lr, [ip, #28]
   14248:	cmp	lr, #0
   1424c:	str	lr, [sp, #44]	; 0x2c
   14250:	beq	142b4 <__assert_fail@plt+0x3198>
   14254:	ldr	lr, [ip, #32]
   14258:	cmp	lr, #0
   1425c:	str	lr, [sp, #48]	; 0x30
   14260:	beq	142bc <__assert_fail@plt+0x31a0>
   14264:	ldr	lr, [ip, #36]	; 0x24
   14268:	mov	ip, #10
   1426c:	cmp	lr, #0
   14270:	str	lr, [sp, #52]	; 0x34
   14274:	movweq	ip, #9
   14278:	b	142c0 <__assert_fail@plt+0x31a4>
   1427c:	mov	ip, #0
   14280:	b	142c0 <__assert_fail@plt+0x31a4>
   14284:	mov	ip, #1
   14288:	b	142c0 <__assert_fail@plt+0x31a4>
   1428c:	mov	ip, #2
   14290:	b	142c0 <__assert_fail@plt+0x31a4>
   14294:	mov	ip, #3
   14298:	b	142c0 <__assert_fail@plt+0x31a4>
   1429c:	mov	ip, #4
   142a0:	b	142c0 <__assert_fail@plt+0x31a4>
   142a4:	mov	ip, #5
   142a8:	b	142c0 <__assert_fail@plt+0x31a4>
   142ac:	mov	ip, #6
   142b0:	b	142c0 <__assert_fail@plt+0x31a4>
   142b4:	mov	ip, #7
   142b8:	b	142c0 <__assert_fail@plt+0x31a4>
   142bc:	mov	ip, #8
   142c0:	add	lr, sp, #16
   142c4:	str	ip, [sp, #4]
   142c8:	str	lr, [sp]
   142cc:	bl	13d3c <__assert_fail@plt+0x2c20>
   142d0:	mov	sp, fp
   142d4:	pop	{fp, pc}
   142d8:	push	{fp, lr}
   142dc:	mov	fp, sp
   142e0:	movw	r0, #29012	; 0x7154
   142e4:	movt	r0, #2
   142e8:	ldr	r1, [r0]
   142ec:	movw	r0, #26300	; 0x66bc
   142f0:	movt	r0, #1
   142f4:	bl	10ea0 <fputs_unlocked@plt>
   142f8:	movw	r1, #27563	; 0x6bab
   142fc:	mov	r0, #0
   14300:	mov	r2, #5
   14304:	movt	r1, #1
   14308:	bl	10f24 <dcgettext@plt>
   1430c:	movw	r2, #27583	; 0x6bbf
   14310:	mov	r1, r0
   14314:	mov	r0, #1
   14318:	movt	r2, #1
   1431c:	bl	1105c <__printf_chk@plt>
   14320:	movw	r1, #27605	; 0x6bd5
   14324:	mov	r0, #0
   14328:	mov	r2, #5
   1432c:	movt	r1, #1
   14330:	bl	10f24 <dcgettext@plt>
   14334:	movw	r2, #25781	; 0x64b5
   14338:	movw	r3, #26109	; 0x65fd
   1433c:	mov	r1, r0
   14340:	mov	r0, #1
   14344:	movt	r2, #1
   14348:	movt	r3, #1
   1434c:	bl	1105c <__printf_chk@plt>
   14350:	movw	r1, #27625	; 0x6be9
   14354:	mov	r0, #0
   14358:	mov	r2, #5
   1435c:	movt	r1, #1
   14360:	bl	10f24 <dcgettext@plt>
   14364:	movw	r2, #27664	; 0x6c10
   14368:	mov	r1, r0
   1436c:	mov	r0, #1
   14370:	movt	r2, #1
   14374:	pop	{fp, lr}
   14378:	b	1105c <__printf_chk@plt>
   1437c:	push	{r4, r5, r6, sl, fp, lr}
   14380:	add	fp, sp, #16
   14384:	mov	r4, r2
   14388:	mov	r5, r1
   1438c:	mov	r6, r0
   14390:	bl	15c84 <__assert_fail@plt+0x4b68>
   14394:	cmp	r0, #0
   14398:	popne	{r4, r5, r6, sl, fp, pc}
   1439c:	cmp	r6, #0
   143a0:	beq	143b4 <__assert_fail@plt+0x3298>
   143a4:	cmp	r5, #0
   143a8:	cmpne	r4, #0
   143ac:	bne	143b4 <__assert_fail@plt+0x3298>
   143b0:	pop	{r4, r5, r6, sl, fp, pc}
   143b4:	bl	14954 <__assert_fail@plt+0x3838>
   143b8:	push	{r4, r5, r6, sl, fp, lr}
   143bc:	add	fp, sp, #16
   143c0:	mov	r4, r2
   143c4:	mov	r5, r1
   143c8:	mov	r6, r0
   143cc:	bl	15c84 <__assert_fail@plt+0x4b68>
   143d0:	cmp	r0, #0
   143d4:	popne	{r4, r5, r6, sl, fp, pc}
   143d8:	cmp	r6, #0
   143dc:	beq	143f0 <__assert_fail@plt+0x32d4>
   143e0:	cmp	r5, #0
   143e4:	cmpne	r4, #0
   143e8:	bne	143f0 <__assert_fail@plt+0x32d4>
   143ec:	pop	{r4, r5, r6, sl, fp, pc}
   143f0:	bl	14954 <__assert_fail@plt+0x3838>
   143f4:	push	{fp, lr}
   143f8:	mov	fp, sp
   143fc:	bl	156c0 <__assert_fail@plt+0x45a4>
   14400:	cmp	r0, #0
   14404:	popne	{fp, pc}
   14408:	bl	14954 <__assert_fail@plt+0x3838>
   1440c:	push	{fp, lr}
   14410:	mov	fp, sp
   14414:	bl	156c0 <__assert_fail@plt+0x45a4>
   14418:	cmp	r0, #0
   1441c:	popne	{fp, pc}
   14420:	bl	14954 <__assert_fail@plt+0x3838>
   14424:	push	{fp, lr}
   14428:	mov	fp, sp
   1442c:	bl	156c0 <__assert_fail@plt+0x45a4>
   14430:	cmp	r0, #0
   14434:	popne	{fp, pc}
   14438:	bl	14954 <__assert_fail@plt+0x3838>
   1443c:	push	{r4, r5, fp, lr}
   14440:	add	fp, sp, #8
   14444:	mov	r4, r1
   14448:	mov	r5, r0
   1444c:	bl	156f0 <__assert_fail@plt+0x45d4>
   14450:	cmp	r0, #0
   14454:	popne	{r4, r5, fp, pc}
   14458:	cmp	r5, #0
   1445c:	beq	1446c <__assert_fail@plt+0x3350>
   14460:	cmp	r4, #0
   14464:	bne	1446c <__assert_fail@plt+0x3350>
   14468:	pop	{r4, r5, fp, pc}
   1446c:	bl	14954 <__assert_fail@plt+0x3838>
   14470:	push	{fp, lr}
   14474:	mov	fp, sp
   14478:	cmp	r1, #0
   1447c:	orreq	r1, r1, #1
   14480:	bl	156f0 <__assert_fail@plt+0x45d4>
   14484:	cmp	r0, #0
   14488:	popne	{fp, pc}
   1448c:	bl	14954 <__assert_fail@plt+0x3838>
   14490:	push	{fp, lr}
   14494:	mov	fp, sp
   14498:	clz	r3, r2
   1449c:	lsr	ip, r3, #5
   144a0:	clz	r3, r1
   144a4:	lsr	r3, r3, #5
   144a8:	orrs	r3, r3, ip
   144ac:	movwne	r1, #1
   144b0:	movwne	r2, #1
   144b4:	bl	15c84 <__assert_fail@plt+0x4b68>
   144b8:	cmp	r0, #0
   144bc:	popne	{fp, pc}
   144c0:	bl	14954 <__assert_fail@plt+0x3838>
   144c4:	push	{fp, lr}
   144c8:	mov	fp, sp
   144cc:	mov	r2, r1
   144d0:	mov	r1, r0
   144d4:	mov	r0, #0
   144d8:	bl	15c84 <__assert_fail@plt+0x4b68>
   144dc:	cmp	r0, #0
   144e0:	popne	{fp, pc}
   144e4:	bl	14954 <__assert_fail@plt+0x3838>
   144e8:	push	{fp, lr}
   144ec:	mov	fp, sp
   144f0:	mov	r2, r1
   144f4:	mov	r1, r0
   144f8:	clz	r0, r2
   144fc:	clz	r3, r1
   14500:	lsr	r0, r0, #5
   14504:	lsr	r3, r3, #5
   14508:	orrs	r0, r3, r0
   1450c:	movwne	r1, #1
   14510:	movwne	r2, #1
   14514:	mov	r0, #0
   14518:	bl	15c84 <__assert_fail@plt+0x4b68>
   1451c:	cmp	r0, #0
   14520:	popne	{fp, pc}
   14524:	bl	14954 <__assert_fail@plt+0x3838>
   14528:	push	{r4, r5, r6, sl, fp, lr}
   1452c:	add	fp, sp, #16
   14530:	ldr	r5, [r1]
   14534:	mov	r4, r1
   14538:	mov	r6, r0
   1453c:	cmp	r0, #0
   14540:	beq	14558 <__assert_fail@plt+0x343c>
   14544:	mov	r0, #1
   14548:	add	r0, r0, r5, lsr #1
   1454c:	adds	r5, r5, r0
   14550:	bcc	14560 <__assert_fail@plt+0x3444>
   14554:	b	1459c <__assert_fail@plt+0x3480>
   14558:	cmp	r5, #0
   1455c:	movweq	r5, #64	; 0x40
   14560:	mov	r0, r6
   14564:	mov	r1, r5
   14568:	mov	r2, #1
   1456c:	bl	15c84 <__assert_fail@plt+0x4b68>
   14570:	cmp	r5, #0
   14574:	mov	r1, r5
   14578:	movwne	r1, #1
   1457c:	cmp	r0, #0
   14580:	bne	14594 <__assert_fail@plt+0x3478>
   14584:	clz	r2, r6
   14588:	lsr	r2, r2, #5
   1458c:	orrs	r1, r2, r1
   14590:	bne	1459c <__assert_fail@plt+0x3480>
   14594:	str	r5, [r4]
   14598:	pop	{r4, r5, r6, sl, fp, pc}
   1459c:	bl	14954 <__assert_fail@plt+0x3838>
   145a0:	push	{r4, r5, r6, r7, fp, lr}
   145a4:	add	fp, sp, #16
   145a8:	ldr	r5, [r1]
   145ac:	mov	r6, r2
   145b0:	mov	r4, r1
   145b4:	mov	r7, r0
   145b8:	cmp	r0, #0
   145bc:	beq	145d4 <__assert_fail@plt+0x34b8>
   145c0:	mov	r0, #1
   145c4:	add	r0, r0, r5, lsr #1
   145c8:	adds	r5, r5, r0
   145cc:	bcc	145ec <__assert_fail@plt+0x34d0>
   145d0:	b	14620 <__assert_fail@plt+0x3504>
   145d4:	cmp	r5, #0
   145d8:	bne	145ec <__assert_fail@plt+0x34d0>
   145dc:	mov	r0, #64	; 0x40
   145e0:	cmp	r6, #64	; 0x40
   145e4:	udiv	r5, r0, r6
   145e8:	addhi	r5, r5, #1
   145ec:	mov	r0, r7
   145f0:	mov	r1, r5
   145f4:	mov	r2, r6
   145f8:	bl	15c84 <__assert_fail@plt+0x4b68>
   145fc:	cmp	r0, #0
   14600:	bne	14618 <__assert_fail@plt+0x34fc>
   14604:	cmp	r7, #0
   14608:	beq	14620 <__assert_fail@plt+0x3504>
   1460c:	cmp	r6, #0
   14610:	cmpne	r5, #0
   14614:	bne	14620 <__assert_fail@plt+0x3504>
   14618:	str	r5, [r4]
   1461c:	pop	{r4, r5, r6, r7, fp, pc}
   14620:	bl	14954 <__assert_fail@plt+0x3838>
   14624:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14628:	add	fp, sp, #24
   1462c:	mov	r8, r1
   14630:	ldr	r1, [r1]
   14634:	mov	r5, r0
   14638:	add	r0, r1, r1, asr #1
   1463c:	cmp	r0, r1
   14640:	mvnvs	r0, #-2147483648	; 0x80000000
   14644:	cmp	r0, r3
   14648:	mov	r7, r0
   1464c:	movgt	r7, r3
   14650:	cmn	r3, #1
   14654:	movle	r7, r0
   14658:	ldr	r0, [fp, #8]
   1465c:	cmn	r0, #1
   14660:	ble	14688 <__assert_fail@plt+0x356c>
   14664:	cmp	r0, #0
   14668:	beq	146dc <__assert_fail@plt+0x35c0>
   1466c:	cmn	r7, #1
   14670:	ble	146b0 <__assert_fail@plt+0x3594>
   14674:	mvn	r4, #-2147483648	; 0x80000000
   14678:	udiv	r6, r4, r0
   1467c:	cmp	r6, r7
   14680:	bge	146dc <__assert_fail@plt+0x35c0>
   14684:	b	146ec <__assert_fail@plt+0x35d0>
   14688:	cmn	r7, #1
   1468c:	ble	146cc <__assert_fail@plt+0x35b0>
   14690:	cmn	r0, #1
   14694:	beq	146dc <__assert_fail@plt+0x35c0>
   14698:	mov	r6, #-2147483648	; 0x80000000
   1469c:	mvn	r4, #-2147483648	; 0x80000000
   146a0:	sdiv	r6, r6, r0
   146a4:	cmp	r6, r7
   146a8:	bge	146dc <__assert_fail@plt+0x35c0>
   146ac:	b	146ec <__assert_fail@plt+0x35d0>
   146b0:	beq	146dc <__assert_fail@plt+0x35c0>
   146b4:	mov	r6, #-2147483648	; 0x80000000
   146b8:	mvn	r4, #-2147483648	; 0x80000000
   146bc:	sdiv	r6, r6, r7
   146c0:	cmp	r6, r0
   146c4:	bge	146dc <__assert_fail@plt+0x35c0>
   146c8:	b	146ec <__assert_fail@plt+0x35d0>
   146cc:	mvn	r4, #-2147483648	; 0x80000000
   146d0:	sdiv	r6, r4, r0
   146d4:	cmp	r7, r6
   146d8:	blt	146ec <__assert_fail@plt+0x35d0>
   146dc:	mul	r6, r7, r0
   146e0:	mov	r4, #64	; 0x40
   146e4:	cmp	r6, #63	; 0x3f
   146e8:	bgt	146f4 <__assert_fail@plt+0x35d8>
   146ec:	sdiv	r7, r4, r0
   146f0:	mul	r6, r7, r0
   146f4:	cmp	r5, #0
   146f8:	moveq	r4, #0
   146fc:	streq	r4, [r8]
   14700:	sub	r4, r7, r1
   14704:	cmp	r4, r2
   14708:	bge	147b4 <__assert_fail@plt+0x3698>
   1470c:	add	r7, r1, r2
   14710:	mov	r6, #0
   14714:	mov	r2, #0
   14718:	cmp	r7, r3
   1471c:	movwgt	r6, #1
   14720:	cmn	r3, #1
   14724:	movwgt	r2, #1
   14728:	cmp	r7, r1
   1472c:	bvs	147e8 <__assert_fail@plt+0x36cc>
   14730:	ands	r1, r2, r6
   14734:	bne	147e8 <__assert_fail@plt+0x36cc>
   14738:	cmn	r0, #1
   1473c:	ble	14764 <__assert_fail@plt+0x3648>
   14740:	cmp	r0, #0
   14744:	beq	147b0 <__assert_fail@plt+0x3694>
   14748:	cmn	r7, #1
   1474c:	ble	14788 <__assert_fail@plt+0x366c>
   14750:	mvn	r1, #-2147483648	; 0x80000000
   14754:	udiv	r1, r1, r0
   14758:	cmp	r1, r7
   1475c:	bge	147b0 <__assert_fail@plt+0x3694>
   14760:	b	147e8 <__assert_fail@plt+0x36cc>
   14764:	cmn	r7, #1
   14768:	ble	147a0 <__assert_fail@plt+0x3684>
   1476c:	cmn	r0, #1
   14770:	beq	147b0 <__assert_fail@plt+0x3694>
   14774:	mov	r1, #-2147483648	; 0x80000000
   14778:	sdiv	r1, r1, r0
   1477c:	cmp	r1, r7
   14780:	bge	147b0 <__assert_fail@plt+0x3694>
   14784:	b	147e8 <__assert_fail@plt+0x36cc>
   14788:	beq	147b0 <__assert_fail@plt+0x3694>
   1478c:	mov	r1, #-2147483648	; 0x80000000
   14790:	sdiv	r1, r1, r7
   14794:	cmp	r1, r0
   14798:	bge	147b0 <__assert_fail@plt+0x3694>
   1479c:	b	147e8 <__assert_fail@plt+0x36cc>
   147a0:	mvn	r1, #-2147483648	; 0x80000000
   147a4:	sdiv	r1, r1, r0
   147a8:	cmp	r7, r1
   147ac:	blt	147e8 <__assert_fail@plt+0x36cc>
   147b0:	mul	r6, r7, r0
   147b4:	mov	r0, r5
   147b8:	mov	r1, r6
   147bc:	bl	156f0 <__assert_fail@plt+0x45d4>
   147c0:	cmp	r6, #0
   147c4:	movwne	r6, #1
   147c8:	cmp	r0, #0
   147cc:	bne	147e0 <__assert_fail@plt+0x36c4>
   147d0:	clz	r1, r5
   147d4:	lsr	r1, r1, #5
   147d8:	orrs	r1, r1, r6
   147dc:	bne	147e8 <__assert_fail@plt+0x36cc>
   147e0:	str	r7, [r8]
   147e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   147e8:	bl	14954 <__assert_fail@plt+0x3838>
   147ec:	push	{fp, lr}
   147f0:	mov	fp, sp
   147f4:	mov	r1, #1
   147f8:	bl	1566c <__assert_fail@plt+0x4550>
   147fc:	cmp	r0, #0
   14800:	popne	{fp, pc}
   14804:	bl	14954 <__assert_fail@plt+0x3838>
   14808:	push	{fp, lr}
   1480c:	mov	fp, sp
   14810:	bl	1566c <__assert_fail@plt+0x4550>
   14814:	cmp	r0, #0
   14818:	popne	{fp, pc}
   1481c:	bl	14954 <__assert_fail@plt+0x3838>
   14820:	push	{fp, lr}
   14824:	mov	fp, sp
   14828:	mov	r1, #1
   1482c:	bl	1566c <__assert_fail@plt+0x4550>
   14830:	cmp	r0, #0
   14834:	popne	{fp, pc}
   14838:	bl	14954 <__assert_fail@plt+0x3838>
   1483c:	push	{fp, lr}
   14840:	mov	fp, sp
   14844:	bl	1566c <__assert_fail@plt+0x4550>
   14848:	cmp	r0, #0
   1484c:	popne	{fp, pc}
   14850:	bl	14954 <__assert_fail@plt+0x3838>
   14854:	push	{r4, r5, r6, sl, fp, lr}
   14858:	add	fp, sp, #16
   1485c:	mov	r5, r0
   14860:	mov	r0, r1
   14864:	mov	r4, r1
   14868:	bl	156c0 <__assert_fail@plt+0x45a4>
   1486c:	cmp	r0, #0
   14870:	beq	1488c <__assert_fail@plt+0x3770>
   14874:	mov	r1, r5
   14878:	mov	r2, r4
   1487c:	mov	r6, r0
   14880:	bl	10ee8 <memcpy@plt>
   14884:	mov	r0, r6
   14888:	pop	{r4, r5, r6, sl, fp, pc}
   1488c:	bl	14954 <__assert_fail@plt+0x3838>
   14890:	push	{r4, r5, r6, sl, fp, lr}
   14894:	add	fp, sp, #16
   14898:	mov	r5, r0
   1489c:	mov	r0, r1
   148a0:	mov	r4, r1
   148a4:	bl	156c0 <__assert_fail@plt+0x45a4>
   148a8:	cmp	r0, #0
   148ac:	beq	148c8 <__assert_fail@plt+0x37ac>
   148b0:	mov	r1, r5
   148b4:	mov	r2, r4
   148b8:	mov	r6, r0
   148bc:	bl	10ee8 <memcpy@plt>
   148c0:	mov	r0, r6
   148c4:	pop	{r4, r5, r6, sl, fp, pc}
   148c8:	bl	14954 <__assert_fail@plt+0x3838>
   148cc:	push	{r4, r5, r6, sl, fp, lr}
   148d0:	add	fp, sp, #16
   148d4:	mov	r5, r0
   148d8:	add	r0, r1, #1
   148dc:	mov	r4, r1
   148e0:	bl	156c0 <__assert_fail@plt+0x45a4>
   148e4:	cmp	r0, #0
   148e8:	beq	14910 <__assert_fail@plt+0x37f4>
   148ec:	mov	r6, r0
   148f0:	mov	r0, #0
   148f4:	mov	r1, r5
   148f8:	mov	r2, r4
   148fc:	strb	r0, [r6, r4]
   14900:	mov	r0, r6
   14904:	bl	10ee8 <memcpy@plt>
   14908:	mov	r0, r6
   1490c:	pop	{r4, r5, r6, sl, fp, pc}
   14910:	bl	14954 <__assert_fail@plt+0x3838>
   14914:	push	{r4, r5, r6, sl, fp, lr}
   14918:	add	fp, sp, #16
   1491c:	mov	r4, r0
   14920:	bl	11020 <strlen@plt>
   14924:	add	r5, r0, #1
   14928:	mov	r0, r5
   1492c:	bl	156c0 <__assert_fail@plt+0x45a4>
   14930:	cmp	r0, #0
   14934:	beq	14950 <__assert_fail@plt+0x3834>
   14938:	mov	r1, r4
   1493c:	mov	r2, r5
   14940:	mov	r6, r0
   14944:	bl	10ee8 <memcpy@plt>
   14948:	mov	r0, r6
   1494c:	pop	{r4, r5, r6, sl, fp, pc}
   14950:	bl	14954 <__assert_fail@plt+0x3838>
   14954:	push	{fp, lr}
   14958:	mov	fp, sp
   1495c:	movw	r0, #28924	; 0x70fc
   14960:	movw	r1, #27740	; 0x6c5c
   14964:	mov	r2, #5
   14968:	movt	r0, #2
   1496c:	movt	r1, #1
   14970:	ldr	r4, [r0]
   14974:	mov	r0, #0
   14978:	bl	10f24 <dcgettext@plt>
   1497c:	movw	r2, #26703	; 0x684f
   14980:	mov	r3, r0
   14984:	mov	r0, r4
   14988:	mov	r1, #0
   1498c:	movt	r2, #1
   14990:	bl	10f9c <error@plt>
   14994:	bl	11104 <abort@plt>
   14998:	push	{r4, sl, fp, lr}
   1499c:	add	fp, sp, #8
   149a0:	bl	15744 <__assert_fail@plt+0x4628>
   149a4:	mov	r4, r0
   149a8:	cmp	r0, #0
   149ac:	bne	149c0 <__assert_fail@plt+0x38a4>
   149b0:	bl	11038 <__errno_location@plt>
   149b4:	ldr	r0, [r0]
   149b8:	cmp	r0, #12
   149bc:	beq	149c8 <__assert_fail@plt+0x38ac>
   149c0:	mov	r0, r4
   149c4:	pop	{r4, sl, fp, pc}
   149c8:	bl	14954 <__assert_fail@plt+0x3838>
   149cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149d0:	add	fp, sp, #28
   149d4:	sub	sp, sp, #44	; 0x2c
   149d8:	cmp	r2, #37	; 0x25
   149dc:	bcs	1564c <__assert_fail@plt+0x4530>
   149e0:	ldr	sl, [fp, #8]
   149e4:	mov	r6, r2
   149e8:	mov	r7, r1
   149ec:	mov	r4, r0
   149f0:	str	r3, [sp, #36]	; 0x24
   149f4:	bl	11038 <__errno_location@plt>
   149f8:	mov	r5, r0
   149fc:	mov	r0, #0
   14a00:	str	r0, [r5]
   14a04:	bl	11008 <__ctype_b_loc@plt>
   14a08:	ldr	r1, [r0]
   14a0c:	mov	r2, r4
   14a10:	ldrb	r0, [r2], #1
   14a14:	add	r3, r1, r0, lsl #1
   14a18:	ldrb	r3, [r3, #1]
   14a1c:	tst	r3, #32
   14a20:	bne	14a10 <__assert_fail@plt+0x38f4>
   14a24:	sub	r9, fp, #32
   14a28:	cmp	r7, #0
   14a2c:	mov	r8, #4
   14a30:	movne	r9, r7
   14a34:	cmp	r0, #45	; 0x2d
   14a38:	beq	15640 <__assert_fail@plt+0x4524>
   14a3c:	mov	r0, r4
   14a40:	mov	r1, r9
   14a44:	mov	r2, r6
   14a48:	mov	r3, #0
   14a4c:	bl	10f00 <__strtoull_internal@plt>
   14a50:	mov	r7, r1
   14a54:	ldr	r1, [r9]
   14a58:	cmp	r1, r4
   14a5c:	beq	14a88 <__assert_fail@plt+0x396c>
   14a60:	mov	r6, r0
   14a64:	ldr	r0, [r5]
   14a68:	cmp	r0, #0
   14a6c:	beq	14ac4 <__assert_fail@plt+0x39a8>
   14a70:	cmp	r0, #34	; 0x22
   14a74:	bne	15640 <__assert_fail@plt+0x4524>
   14a78:	mov	r8, #1
   14a7c:	cmp	sl, #0
   14a80:	bne	14ad0 <__assert_fail@plt+0x39b4>
   14a84:	b	15638 <__assert_fail@plt+0x451c>
   14a88:	cmp	sl, #0
   14a8c:	beq	15640 <__assert_fail@plt+0x4524>
   14a90:	mov	r5, r1
   14a94:	ldrb	r1, [r4]
   14a98:	cmp	r1, #0
   14a9c:	beq	15640 <__assert_fail@plt+0x4524>
   14aa0:	mov	r0, sl
   14aa4:	bl	1102c <strchr@plt>
   14aa8:	cmp	r0, #0
   14aac:	beq	15640 <__assert_fail@plt+0x4524>
   14ab0:	mov	r1, r5
   14ab4:	mov	r8, #0
   14ab8:	mov	r6, #1
   14abc:	mov	r7, #0
   14ac0:	b	14ad0 <__assert_fail@plt+0x39b4>
   14ac4:	mov	r8, r0
   14ac8:	cmp	sl, #0
   14acc:	beq	15638 <__assert_fail@plt+0x451c>
   14ad0:	ldrb	r4, [r1]
   14ad4:	cmp	r4, #0
   14ad8:	beq	15638 <__assert_fail@plt+0x451c>
   14adc:	str	r1, [sp, #32]
   14ae0:	mov	r0, sl
   14ae4:	mov	r1, r4
   14ae8:	bl	1102c <strchr@plt>
   14aec:	cmp	r0, #0
   14af0:	beq	14db8 <__assert_fail@plt+0x3c9c>
   14af4:	sub	r0, r4, #69	; 0x45
   14af8:	mov	r1, #1
   14afc:	mov	r3, #0
   14b00:	mov	r5, #1024	; 0x400
   14b04:	cmp	r0, #47	; 0x2f
   14b08:	str	r1, [sp, #28]
   14b0c:	bhi	14c10 <__assert_fail@plt+0x3af4>
   14b10:	add	r1, pc, #0
   14b14:	ldr	pc, [r1, r0, lsl #2]
   14b18:	ldrdeq	r4, [r1], -r8
   14b1c:	andeq	r4, r1, r0, lsl ip
   14b20:	ldrdeq	r4, [r1], -r8
   14b24:	andeq	r4, r1, r0, lsl ip
   14b28:	andeq	r4, r1, r0, lsl ip
   14b2c:	andeq	r4, r1, r0, lsl ip
   14b30:	ldrdeq	r4, [r1], -r8
   14b34:	andeq	r4, r1, r0, lsl ip
   14b38:	ldrdeq	r4, [r1], -r8
   14b3c:	andeq	r4, r1, r0, lsl ip
   14b40:	andeq	r4, r1, r0, lsl ip
   14b44:	ldrdeq	r4, [r1], -r8
   14b48:	andeq	r4, r1, r0, lsl ip
   14b4c:	andeq	r4, r1, r0, lsl ip
   14b50:	andeq	r4, r1, r0, lsl ip
   14b54:	ldrdeq	r4, [r1], -r8
   14b58:	andeq	r4, r1, r0, lsl ip
   14b5c:	andeq	r4, r1, r0, lsl ip
   14b60:	andeq	r4, r1, r0, lsl ip
   14b64:	andeq	r4, r1, r0, lsl ip
   14b68:	ldrdeq	r4, [r1], -r8
   14b6c:	ldrdeq	r4, [r1], -r8
   14b70:	andeq	r4, r1, r0, lsl ip
   14b74:	andeq	r4, r1, r0, lsl ip
   14b78:	andeq	r4, r1, r0, lsl ip
   14b7c:	andeq	r4, r1, r0, lsl ip
   14b80:	andeq	r4, r1, r0, lsl ip
   14b84:	andeq	r4, r1, r0, lsl ip
   14b88:	andeq	r4, r1, r0, lsl ip
   14b8c:	andeq	r4, r1, r0, lsl ip
   14b90:	andeq	r4, r1, r0, lsl ip
   14b94:	andeq	r4, r1, r0, lsl ip
   14b98:	andeq	r4, r1, r0, lsl ip
   14b9c:	andeq	r4, r1, r0, lsl ip
   14ba0:	ldrdeq	r4, [r1], -r8
   14ba4:	andeq	r4, r1, r0, lsl ip
   14ba8:	andeq	r4, r1, r0, lsl ip
   14bac:	andeq	r4, r1, r0, lsl ip
   14bb0:	ldrdeq	r4, [r1], -r8
   14bb4:	andeq	r4, r1, r0, lsl ip
   14bb8:	ldrdeq	r4, [r1], -r8
   14bbc:	andeq	r4, r1, r0, lsl ip
   14bc0:	andeq	r4, r1, r0, lsl ip
   14bc4:	andeq	r4, r1, r0, lsl ip
   14bc8:	andeq	r4, r1, r0, lsl ip
   14bcc:	andeq	r4, r1, r0, lsl ip
   14bd0:	andeq	r4, r1, r0, lsl ip
   14bd4:	ldrdeq	r4, [r1], -r8
   14bd8:	mov	r0, sl
   14bdc:	mov	r1, #48	; 0x30
   14be0:	bl	1102c <strchr@plt>
   14be4:	cmp	r0, #0
   14be8:	beq	14c0c <__assert_fail@plt+0x3af0>
   14bec:	ldr	r1, [sp, #32]
   14bf0:	ldrb	r0, [r1, #1]
   14bf4:	cmp	r0, #66	; 0x42
   14bf8:	cmpne	r0, #68	; 0x44
   14bfc:	bne	14dc4 <__assert_fail@plt+0x3ca8>
   14c00:	mov	r5, #1000	; 0x3e8
   14c04:	mov	r0, #2
   14c08:	str	r0, [sp, #28]
   14c0c:	mov	r3, #0
   14c10:	sub	r0, r4, #66	; 0x42
   14c14:	cmp	r0, #53	; 0x35
   14c18:	bhi	14db8 <__assert_fail@plt+0x3c9c>
   14c1c:	add	r1, pc, #0
   14c20:	ldr	pc, [r1, r0, lsl #2]
   14c24:	andeq	r5, r1, r0, asr #2
   14c28:			; <UNDEFINED> instruction: 0x00014db8
   14c2c:			; <UNDEFINED> instruction: 0x00014db8
   14c30:	andeq	r5, r1, r8, ror #2
   14c34:			; <UNDEFINED> instruction: 0x00014db8
   14c38:	strdeq	r4, [r1], -ip
   14c3c:			; <UNDEFINED> instruction: 0x00014db8
   14c40:			; <UNDEFINED> instruction: 0x00014db8
   14c44:			; <UNDEFINED> instruction: 0x00014db8
   14c48:	andeq	r4, r1, r8, ror #27
   14c4c:			; <UNDEFINED> instruction: 0x00014db8
   14c50:	andeq	r4, r1, r0, lsr lr
   14c54:			; <UNDEFINED> instruction: 0x00014db8
   14c58:			; <UNDEFINED> instruction: 0x00014db8
   14c5c:	andeq	r5, r1, r0, asr #5
   14c60:			; <UNDEFINED> instruction: 0x00014db8
   14c64:			; <UNDEFINED> instruction: 0x00014db8
   14c68:			; <UNDEFINED> instruction: 0x00014db8
   14c6c:			; <UNDEFINED> instruction: 0x00014ebc
   14c70:			; <UNDEFINED> instruction: 0x00014db8
   14c74:			; <UNDEFINED> instruction: 0x00014db8
   14c78:			; <UNDEFINED> instruction: 0x00014db8
   14c7c:			; <UNDEFINED> instruction: 0x00014db8
   14c80:	andeq	r5, r1, r8, ror #7
   14c84:	andeq	r4, r1, r4, lsr #31
   14c88:			; <UNDEFINED> instruction: 0x00014db8
   14c8c:			; <UNDEFINED> instruction: 0x00014db8
   14c90:			; <UNDEFINED> instruction: 0x00014db8
   14c94:			; <UNDEFINED> instruction: 0x00014db8
   14c98:			; <UNDEFINED> instruction: 0x00014db8
   14c9c:			; <UNDEFINED> instruction: 0x00014db8
   14ca0:			; <UNDEFINED> instruction: 0x00014db8
   14ca4:	andeq	r5, r1, r0, asr #11
   14ca8:	andeq	r5, r1, r8, lsl r6
   14cac:			; <UNDEFINED> instruction: 0x00014db8
   14cb0:			; <UNDEFINED> instruction: 0x00014db8
   14cb4:			; <UNDEFINED> instruction: 0x00014db8
   14cb8:	strdeq	r4, [r1], -ip
   14cbc:			; <UNDEFINED> instruction: 0x00014db8
   14cc0:			; <UNDEFINED> instruction: 0x00014db8
   14cc4:			; <UNDEFINED> instruction: 0x00014db8
   14cc8:	andeq	r4, r1, r8, ror #27
   14ccc:			; <UNDEFINED> instruction: 0x00014db8
   14cd0:	andeq	r4, r1, r0, lsr lr
   14cd4:			; <UNDEFINED> instruction: 0x00014db8
   14cd8:			; <UNDEFINED> instruction: 0x00014db8
   14cdc:			; <UNDEFINED> instruction: 0x00014db8
   14ce0:			; <UNDEFINED> instruction: 0x00014db8
   14ce4:			; <UNDEFINED> instruction: 0x00014db8
   14ce8:			; <UNDEFINED> instruction: 0x00014db8
   14cec:			; <UNDEFINED> instruction: 0x00014ebc
   14cf0:			; <UNDEFINED> instruction: 0x00014db8
   14cf4:			; <UNDEFINED> instruction: 0x00014db8
   14cf8:	strdeq	r5, [r1], -r4
   14cfc:	mvn	r0, #0
   14d00:	mvn	r1, #0
   14d04:	mov	r2, r5
   14d08:	mov	sl, r3
   14d0c:	bl	15dc8 <__assert_fail@plt+0x4cac>
   14d10:	subs	r3, r0, r6
   14d14:	mov	lr, #0
   14d18:	umull	r4, r2, r6, r5
   14d1c:	str	r1, [sp, #20]
   14d20:	sbcs	r3, r1, r7
   14d24:	mla	ip, r6, sl, r2
   14d28:	mov	r2, r1
   14d2c:	movwcc	lr, #1
   14d30:	mla	r7, r7, r5, ip
   14d34:	mov	r2, #0
   14d38:	cmp	lr, #0
   14d3c:	mvnne	r4, #0
   14d40:	mvnne	r7, #0
   14d44:	subs	r6, r0, r4
   14d48:	sbcs	r6, r1, r7
   14d4c:	movwcc	r2, #1
   14d50:	umull	r3, r6, r4, r5
   14d54:	cmp	r2, #0
   14d58:	str	r6, [sp, #16]
   14d5c:	mvnne	r3, #0
   14d60:	cmp	r2, #0
   14d64:	umull	r6, ip, r3, r5
   14d68:	mla	r1, r3, sl, ip
   14d6c:	ldr	ip, [sp, #16]
   14d70:	str	r1, [sp, #12]
   14d74:	mla	r4, r4, sl, ip
   14d78:	mla	r4, r7, r5, r4
   14d7c:	ldr	r7, [sp, #12]
   14d80:	mvnne	r4, #0
   14d84:	subs	r0, r0, r3
   14d88:	ldr	r0, [sp, #20]
   14d8c:	mla	r7, r4, r5, r7
   14d90:	sbcs	r0, r0, r4
   14d94:	mov	r0, #0
   14d98:	movwcc	r0, #1
   14d9c:	cmp	r0, #0
   14da0:	mov	r1, r0
   14da4:	orr	r0, lr, r2
   14da8:	mvnne	r7, #0
   14dac:	mvnne	r6, #0
   14db0:	orr	r3, r0, r1
   14db4:	b	15618 <__assert_fail@plt+0x44fc>
   14db8:	ldr	r0, [sp, #36]	; 0x24
   14dbc:	orr	r8, r8, #2
   14dc0:	b	1563c <__assert_fail@plt+0x4520>
   14dc4:	cmp	r0, #105	; 0x69
   14dc8:	mov	r3, #0
   14dcc:	bne	14c10 <__assert_fail@plt+0x3af4>
   14dd0:	ldrb	r0, [r1, #2]
   14dd4:	mov	r1, #1
   14dd8:	cmp	r0, #66	; 0x42
   14ddc:	movweq	r1, #3
   14de0:	str	r1, [sp, #28]
   14de4:	b	14c10 <__assert_fail@plt+0x3af4>
   14de8:	mvn	r0, #0
   14dec:	mvn	r1, #0
   14df0:	mov	r2, r5
   14df4:	mov	r4, r3
   14df8:	bl	15dc8 <__assert_fail@plt+0x4cac>
   14dfc:	subs	r0, r0, r6
   14e00:	mov	r2, #0
   14e04:	sbcs	r0, r1, r7
   14e08:	movwcc	r2, #1
   14e0c:	umull	r0, r1, r6, r5
   14e10:	mla	r1, r6, r4, r1
   14e14:	cmp	r2, #0
   14e18:	mov	r3, r2
   14e1c:	mla	r7, r7, r5, r1
   14e20:	mvnne	r0, #0
   14e24:	mvnne	r7, #0
   14e28:	mov	r6, r0
   14e2c:	b	15618 <__assert_fail@plt+0x44fc>
   14e30:	mvn	r0, #0
   14e34:	mvn	r1, #0
   14e38:	mov	r2, r5
   14e3c:	str	r3, [sp, #24]
   14e40:	bl	15dc8 <__assert_fail@plt+0x4cac>
   14e44:	subs	r3, r0, r6
   14e48:	mov	ip, r0
   14e4c:	umull	r4, r0, r6, r5
   14e50:	mov	sl, #0
   14e54:	sbcs	r3, r1, r7
   14e58:	str	r0, [sp, #20]
   14e5c:	ldr	r0, [sp, #24]
   14e60:	mov	r3, #0
   14e64:	movwcc	r3, #1
   14e68:	cmp	r3, #0
   14e6c:	mvnne	r4, #0
   14e70:	cmp	r3, #0
   14e74:	umull	lr, r2, r4, r5
   14e78:	mla	r2, r4, r0, r2
   14e7c:	str	r2, [sp, #16]
   14e80:	ldr	r2, [sp, #20]
   14e84:	mla	r6, r6, r0, r2
   14e88:	ldr	r0, [sp, #16]
   14e8c:	mla	r6, r7, r5, r6
   14e90:	mvnne	r6, #0
   14e94:	mla	r7, r6, r5, r0
   14e98:	subs	r0, ip, r4
   14e9c:	sbcs	r0, r1, r6
   14ea0:	movwcc	sl, #1
   14ea4:	cmp	sl, #0
   14ea8:	orr	r3, r3, sl
   14eac:	mvnne	lr, #0
   14eb0:	mvnne	r7, #0
   14eb4:	mov	r6, lr
   14eb8:	b	15618 <__assert_fail@plt+0x44fc>
   14ebc:	mvn	r0, #0
   14ec0:	mvn	r1, #0
   14ec4:	mov	r2, r5
   14ec8:	mov	sl, r3
   14ecc:	bl	15dc8 <__assert_fail@plt+0x4cac>
   14ed0:	subs	r3, r0, r6
   14ed4:	mov	ip, r1
   14ed8:	umull	r2, lr, r6, r5
   14edc:	str	r0, [sp, #20]
   14ee0:	sbcs	r3, r1, r7
   14ee4:	mov	r1, #0
   14ee8:	mla	r6, r6, sl, lr
   14eec:	mov	lr, #0
   14ef0:	str	ip, [sp, #16]
   14ef4:	movwcc	r1, #1
   14ef8:	mla	r7, r7, r5, r6
   14efc:	cmp	r1, #0
   14f00:	mvnne	r2, #0
   14f04:	cmp	r1, #0
   14f08:	umull	r3, r4, r2, r5
   14f0c:	mvnne	r7, #0
   14f10:	mla	r4, r2, sl, r4
   14f14:	subs	r2, r0, r2
   14f18:	sbcs	r2, ip, r7
   14f1c:	mla	r4, r7, r5, r4
   14f20:	movwcc	lr, #1
   14f24:	mov	r2, #0
   14f28:	cmp	lr, #0
   14f2c:	mvnne	r3, #0
   14f30:	mvnne	r4, #0
   14f34:	subs	r7, r0, r3
   14f38:	mov	r0, r5
   14f3c:	sbcs	r7, ip, r4
   14f40:	movwcc	r2, #1
   14f44:	umull	r5, r7, r3, r5
   14f48:	cmp	r2, #0
   14f4c:	mla	r3, r3, sl, r7
   14f50:	mvnne	r5, #0
   14f54:	mla	r3, r4, r0, r3
   14f58:	cmp	r2, #0
   14f5c:	umull	r6, ip, r5, r0
   14f60:	mvnne	r3, #0
   14f64:	mla	ip, r5, sl, ip
   14f68:	mla	r7, r3, r0, ip
   14f6c:	ldr	r0, [sp, #20]
   14f70:	subs	r0, r0, r5
   14f74:	ldr	r0, [sp, #16]
   14f78:	sbcs	r0, r0, r3
   14f7c:	mov	r0, #0
   14f80:	movwcc	r0, #1
   14f84:	cmp	r0, #0
   14f88:	mov	r3, r0
   14f8c:	orr	r0, r1, lr
   14f90:	orr	r0, r0, r2
   14f94:	mvnne	r7, #0
   14f98:	mvnne	r6, #0
   14f9c:	orr	r3, r0, r3
   14fa0:	b	15618 <__assert_fail@plt+0x44fc>
   14fa4:	mvn	r0, #0
   14fa8:	mvn	r1, #0
   14fac:	mov	r2, r5
   14fb0:	mov	r4, r3
   14fb4:	str	r3, [sp, #24]
   14fb8:	bl	15dc8 <__assert_fail@plt+0x4cac>
   14fbc:	umull	r3, r2, r6, r5
   14fc0:	mla	r2, r6, r4, r2
   14fc4:	subs	r6, r0, r6
   14fc8:	sbcs	r6, r1, r7
   14fcc:	mla	ip, r7, r5, r2
   14fd0:	ldr	r2, [sp, #24]
   14fd4:	mov	r6, #0
   14fd8:	movwcc	r6, #1
   14fdc:	cmp	r6, #0
   14fe0:	str	r6, [sp, #20]
   14fe4:	mov	r6, #0
   14fe8:	mvnne	r3, #0
   14fec:	mvnne	ip, #0
   14ff0:	subs	r4, r0, r3
   14ff4:	umull	r7, lr, r3, r5
   14ff8:	sbcs	r4, r1, ip
   14ffc:	mla	r3, r3, r2, lr
   15000:	movwcc	r6, #1
   15004:	cmp	r6, #0
   15008:	str	r6, [sp, #16]
   1500c:	mvnne	r7, #0
   15010:	cmp	r6, #0
   15014:	umull	sl, r4, r7, r5
   15018:	mla	r4, r7, r2, r4
   1501c:	mla	r2, ip, r5, r3
   15020:	mov	ip, #0
   15024:	mvnne	r2, #0
   15028:	subs	r3, r0, r7
   1502c:	mla	r6, r2, r5, r4
   15030:	mov	r4, r0
   15034:	sbcs	r2, r1, r2
   15038:	mov	r0, #0
   1503c:	movwcc	r0, #1
   15040:	mov	r3, r4
   15044:	cmp	r0, #0
   15048:	str	r0, [sp, #12]
   1504c:	mov	r0, r1
   15050:	str	r3, [sp, #4]
   15054:	mvnne	sl, #0
   15058:	mvnne	r6, #0
   1505c:	str	r0, [sp, #8]
   15060:	subs	r2, r4, sl
   15064:	ldr	r4, [sp, #24]
   15068:	sbcs	r2, r1, r6
   1506c:	movwcc	ip, #1
   15070:	umull	r7, r2, sl, r5
   15074:	cmp	ip, #0
   15078:	mla	r2, sl, r4, r2
   1507c:	mvnne	r7, #0
   15080:	cmp	ip, #0
   15084:	mov	sl, #0
   15088:	umull	r1, lr, r7, r5
   1508c:	mla	r2, r6, r5, r2
   15090:	mvnne	r2, #0
   15094:	mla	lr, r7, r4, lr
   15098:	subs	r6, r3, r7
   1509c:	mla	lr, r2, r5, lr
   150a0:	sbcs	r2, r0, r2
   150a4:	movwcc	sl, #1
   150a8:	mov	r2, #0
   150ac:	cmp	sl, #0
   150b0:	mvnne	r1, #0
   150b4:	mvnne	lr, #0
   150b8:	subs	r6, r3, r1
   150bc:	ldr	r3, [sp, #24]
   150c0:	sbcs	r6, r0, lr
   150c4:	umull	r0, r7, r1, r5
   150c8:	movwcc	r2, #1
   150cc:	cmp	r2, #0
   150d0:	mvnne	r0, #0
   150d4:	mla	r1, r1, r3, r7
   150d8:	cmp	r2, #0
   150dc:	umull	r6, r4, r0, r5
   150e0:	mla	r1, lr, r5, r1
   150e4:	mla	r4, r0, r3, r4
   150e8:	ldr	r3, [sp, #4]
   150ec:	mvnne	r1, #0
   150f0:	mla	r7, r1, r5, r4
   150f4:	ldr	r5, [sp, #16]
   150f8:	subs	r0, r3, r0
   150fc:	ldr	r0, [sp, #8]
   15100:	sbcs	r0, r0, r1
   15104:	mov	r0, #0
   15108:	movwcc	r0, #1
   1510c:	cmp	r0, #0
   15110:	mov	r1, r0
   15114:	ldr	r0, [sp, #20]
   15118:	mvnne	r7, #0
   1511c:	mvnne	r6, #0
   15120:	orr	r0, r0, r5
   15124:	ldr	r5, [sp, #12]
   15128:	orr	r0, r0, r5
   1512c:	orr	r0, r0, ip
   15130:	orr	r0, r0, sl
   15134:	orr	r0, r0, r2
   15138:	orr	r0, r0, r1
   1513c:	b	155b8 <__assert_fail@plt+0x449c>
   15140:	mov	r1, #0
   15144:	lsl	r2, r7, #10
   15148:	lsl	r0, r6, #10
   1514c:	lsr	r3, r7, #22
   15150:	cmp	r1, r7, lsr #22
   15154:	orr	r2, r2, r6, lsr #22
   15158:	mvnne	r0, #0
   1515c:	movwne	r3, #1
   15160:	cmp	r1, r7, lsr #22
   15164:	b	155e4 <__assert_fail@plt+0x44c8>
   15168:	mvn	r0, #0
   1516c:	mvn	r1, #0
   15170:	mov	r2, r5
   15174:	mov	sl, r3
   15178:	bl	15dc8 <__assert_fail@plt+0x4cac>
   1517c:	subs	r2, r0, r6
   15180:	mov	ip, r0
   15184:	mov	r0, #0
   15188:	sbcs	r2, r1, r7
   1518c:	movwcc	r0, #1
   15190:	umull	r4, r2, r6, r5
   15194:	cmp	r0, #0
   15198:	mla	r2, r6, sl, r2
   1519c:	str	r0, [sp, #20]
   151a0:	mvnne	r4, #0
   151a4:	cmp	r0, #0
   151a8:	mla	r2, r7, r5, r2
   151ac:	mov	r0, #0
   151b0:	umull	lr, r3, r4, r5
   151b4:	mvnne	r2, #0
   151b8:	mla	r3, r4, sl, r3
   151bc:	mla	r6, r2, r5, r3
   151c0:	subs	r3, ip, r4
   151c4:	sbcs	r2, r1, r2
   151c8:	mov	r3, r1
   151cc:	movwcc	r0, #1
   151d0:	str	r3, [sp, #8]
   151d4:	cmp	r0, #0
   151d8:	str	r0, [sp, #16]
   151dc:	mov	r0, ip
   151e0:	mvnne	lr, #0
   151e4:	mvnne	r6, #0
   151e8:	str	r0, [sp, #12]
   151ec:	subs	r2, ip, lr
   151f0:	umull	r7, r4, lr, r5
   151f4:	sbcs	r2, r1, r6
   151f8:	mla	r4, lr, sl, r4
   151fc:	mov	r2, #0
   15200:	mla	r6, r6, r5, r4
   15204:	mov	r4, #0
   15208:	movwcc	r2, #1
   1520c:	cmp	r2, #0
   15210:	mvnne	r7, #0
   15214:	cmp	r2, #0
   15218:	umull	r1, ip, r7, r5
   1521c:	mvnne	r6, #0
   15220:	mla	ip, r7, sl, ip
   15224:	subs	r7, r0, r7
   15228:	mla	lr, r6, r5, ip
   1522c:	sbcs	r7, r3, r6
   15230:	mov	ip, #0
   15234:	movwcc	ip, #1
   15238:	cmp	ip, #0
   1523c:	mvnne	r1, #0
   15240:	mvnne	lr, #0
   15244:	subs	r7, r0, r1
   15248:	sbcs	r7, r3, lr
   1524c:	movwcc	r4, #1
   15250:	umull	r0, r7, r1, r5
   15254:	cmp	r4, #0
   15258:	mla	r1, r1, sl, r7
   1525c:	mvnne	r0, #0
   15260:	mla	r1, lr, r5, r1
   15264:	cmp	r4, #0
   15268:	umull	r6, r3, r0, r5
   1526c:	mvnne	r1, #0
   15270:	mla	r3, r0, sl, r3
   15274:	mla	r7, r1, r5, r3
   15278:	ldr	r3, [sp, #12]
   1527c:	subs	r0, r3, r0
   15280:	ldr	r3, [sp, #16]
   15284:	ldr	r0, [sp, #8]
   15288:	sbcs	r0, r0, r1
   1528c:	mov	r0, #0
   15290:	movwcc	r0, #1
   15294:	cmp	r0, #0
   15298:	mov	r1, r0
   1529c:	ldr	r0, [sp, #20]
   152a0:	mvnne	r7, #0
   152a4:	mvnne	r6, #0
   152a8:	orr	r0, r0, r3
   152ac:	orr	r0, r0, r2
   152b0:	orr	r0, r0, ip
   152b4:	orr	r0, r0, r4
   152b8:	orr	r3, r0, r1
   152bc:	b	15618 <__assert_fail@plt+0x44fc>
   152c0:	mvn	r0, #0
   152c4:	mvn	r1, #0
   152c8:	mov	r2, r5
   152cc:	mov	sl, r3
   152d0:	bl	15dc8 <__assert_fail@plt+0x4cac>
   152d4:	umull	r3, r2, r6, r5
   152d8:	mov	lr, r1
   152dc:	mov	r1, r0
   152e0:	mla	r2, r6, sl, r2
   152e4:	subs	r6, r0, r6
   152e8:	mov	r0, #0
   152ec:	sbcs	r6, lr, r7
   152f0:	mla	r2, r7, r5, r2
   152f4:	movwcc	r0, #1
   152f8:	cmp	r0, #0
   152fc:	str	r0, [sp, #20]
   15300:	mov	r0, r1
   15304:	mvnne	r3, #0
   15308:	mvnne	r2, #0
   1530c:	str	r0, [sp, #16]
   15310:	subs	r4, r1, r3
   15314:	umull	r7, ip, r3, r5
   15318:	sbcs	r4, lr, r2
   1531c:	mla	r3, r3, sl, ip
   15320:	mov	ip, #0
   15324:	mov	r4, #0
   15328:	mla	r2, r2, r5, r3
   1532c:	movwcc	r4, #1
   15330:	cmp	r4, #0
   15334:	mvnne	r7, #0
   15338:	cmp	r4, #0
   1533c:	umull	r1, r6, r7, r5
   15340:	mvnne	r2, #0
   15344:	mla	r6, r7, sl, r6
   15348:	mla	r3, r2, r5, r6
   1534c:	subs	r6, r0, r7
   15350:	sbcs	r2, lr, r2
   15354:	movwcc	ip, #1
   15358:	mov	r2, #0
   1535c:	cmp	ip, #0
   15360:	mvnne	r1, #0
   15364:	mvnne	r3, #0
   15368:	subs	r6, r0, r1
   1536c:	sbcs	r6, lr, r3
   15370:	movwcc	r2, #1
   15374:	umull	r0, r6, r1, r5
   15378:	cmp	r2, #0
   1537c:	str	r6, [sp, #12]
   15380:	mvnne	r0, #0
   15384:	cmp	r2, #0
   15388:	umull	r6, r7, r0, r5
   1538c:	mla	r7, r0, sl, r7
   15390:	str	r7, [sp, #8]
   15394:	ldr	r7, [sp, #12]
   15398:	mla	r1, r1, sl, r7
   1539c:	mla	r1, r3, r5, r1
   153a0:	ldr	r3, [sp, #8]
   153a4:	mvnne	r1, #0
   153a8:	mla	r7, r1, r5, r3
   153ac:	ldr	r3, [sp, #16]
   153b0:	subs	r0, r3, r0
   153b4:	sbcs	r0, lr, r1
   153b8:	mov	r0, #0
   153bc:	movwcc	r0, #1
   153c0:	cmp	r0, #0
   153c4:	mov	r1, r0
   153c8:	ldr	r0, [sp, #20]
   153cc:	mvnne	r7, #0
   153d0:	mvnne	r6, #0
   153d4:	orr	r0, r0, r4
   153d8:	orr	r0, r0, ip
   153dc:	orr	r0, r0, r2
   153e0:	orr	r3, r0, r1
   153e4:	b	15618 <__assert_fail@plt+0x44fc>
   153e8:	mvn	r0, #0
   153ec:	mvn	r1, #0
   153f0:	mov	r2, r5
   153f4:	mov	sl, r3
   153f8:	bl	15dc8 <__assert_fail@plt+0x4cac>
   153fc:	mov	lr, r0
   15400:	subs	r0, r0, r6
   15404:	mov	r2, #0
   15408:	mov	ip, r1
   1540c:	str	sl, [sp, #24]
   15410:	sbcs	r0, r1, r7
   15414:	umull	r3, r1, r6, r5
   15418:	str	lr, [sp, #4]
   1541c:	movwcc	r2, #1
   15420:	mla	r6, r6, sl, r1
   15424:	mov	r1, #0
   15428:	cmp	r2, #0
   1542c:	mla	r7, r7, r5, r6
   15430:	str	r2, [sp, #20]
   15434:	mvnne	r3, #0
   15438:	cmp	r2, #0
   1543c:	mov	r2, #0
   15440:	umull	r0, r4, r3, r5
   15444:	mvnne	r7, #0
   15448:	mla	r4, r3, sl, r4
   1544c:	subs	r3, lr, r3
   15450:	sbcs	r3, ip, r7
   15454:	mla	r4, r7, r5, r4
   15458:	movwcc	r1, #1
   1545c:	cmp	r1, #0
   15460:	str	r1, [sp, #16]
   15464:	mvnne	r0, #0
   15468:	mvnne	r4, #0
   1546c:	subs	r3, lr, r0
   15470:	sbcs	r3, ip, r4
   15474:	movwcc	r2, #1
   15478:	umull	r6, r3, r0, r5
   1547c:	cmp	r2, #0
   15480:	mla	r0, r0, sl, r3
   15484:	str	r2, [sp, #12]
   15488:	mvnne	r6, #0
   1548c:	mla	r0, r4, r5, r0
   15490:	cmp	r2, #0
   15494:	ldr	r4, [sp, #24]
   15498:	umull	r1, r7, r6, r5
   1549c:	mvnne	r0, #0
   154a0:	subs	r3, lr, r6
   154a4:	mla	r7, r6, sl, r7
   154a8:	mov	r3, ip
   154ac:	mla	r7, r0, r5, r7
   154b0:	sbcs	r0, ip, r0
   154b4:	str	r3, [sp]
   154b8:	mov	r0, #0
   154bc:	movwcc	r0, #1
   154c0:	cmp	r0, #0
   154c4:	str	r0, [sp, #8]
   154c8:	mvnne	r1, #0
   154cc:	mvnne	r7, #0
   154d0:	subs	r0, lr, r1
   154d4:	sbcs	r0, ip, r7
   154d8:	mov	ip, #0
   154dc:	movwcc	ip, #1
   154e0:	umull	r6, r0, r1, r5
   154e4:	cmp	ip, #0
   154e8:	mla	r1, r1, r4, r0
   154ec:	mov	r0, lr
   154f0:	mvnne	r6, #0
   154f4:	mla	r1, r7, r5, r1
   154f8:	cmp	ip, #0
   154fc:	umull	r2, sl, r6, r5
   15500:	mvnne	r1, #0
   15504:	mla	sl, r6, r4, sl
   15508:	subs	r6, lr, r6
   1550c:	mov	lr, #0
   15510:	mla	r7, r1, r5, sl
   15514:	sbcs	r1, r3, r1
   15518:	movwcc	lr, #1
   1551c:	ldr	r1, [sp, #24]
   15520:	cmp	lr, #0
   15524:	mvnne	r2, #0
   15528:	mvnne	r7, #0
   1552c:	subs	r6, r0, r2
   15530:	umull	r0, sl, r2, r5
   15534:	sbcs	r6, r3, r7
   15538:	mov	r3, #0
   1553c:	mla	r2, r2, r1, sl
   15540:	movwcc	r3, #1
   15544:	mla	r2, r7, r5, r2
   15548:	cmp	r3, #0
   1554c:	mvnne	r0, #0
   15550:	cmp	r3, #0
   15554:	umull	r6, r4, r0, r5
   15558:	mvnne	r2, #0
   1555c:	mla	r4, r0, r1, r4
   15560:	ldr	r1, [sp, #4]
   15564:	mla	r7, r2, r5, r4
   15568:	ldr	r5, [sp, #16]
   1556c:	subs	r0, r1, r0
   15570:	ldr	r0, [sp]
   15574:	sbcs	r0, r0, r2
   15578:	mov	r0, #0
   1557c:	movwcc	r0, #1
   15580:	cmp	r0, #0
   15584:	mov	r2, r0
   15588:	ldr	r0, [sp, #20]
   1558c:	mvnne	r7, #0
   15590:	mvnne	r6, #0
   15594:	orr	r0, r0, r5
   15598:	ldr	r5, [sp, #12]
   1559c:	orr	r0, r0, r5
   155a0:	ldr	r5, [sp, #8]
   155a4:	orr	r0, r0, r5
   155a8:	orr	r0, r0, ip
   155ac:	orr	r0, r0, lr
   155b0:	orr	r0, r0, r3
   155b4:	orr	r0, r0, r2
   155b8:	and	r3, r0, #1
   155bc:	b	15618 <__assert_fail@plt+0x44fc>
   155c0:	mov	r1, #0
   155c4:	lsl	r2, r7, #9
   155c8:	lsl	r0, r6, #9
   155cc:	lsr	r3, r7, #23
   155d0:	cmp	r1, r7, lsr #23
   155d4:	orr	r2, r2, r6, lsr #23
   155d8:	mvnne	r0, #0
   155dc:	movwne	r3, #1
   155e0:	cmp	r1, r7, lsr #23
   155e4:	mvnne	r2, #0
   155e8:	mov	r6, r0
   155ec:	mov	r7, r2
   155f0:	b	15618 <__assert_fail@plt+0x44fc>
   155f4:	lsl	r1, r7, #1
   155f8:	lsl	r0, r6, #1
   155fc:	cmp	r7, #0
   15600:	lsr	r3, r7, #31
   15604:	orr	r1, r1, r6, lsr #31
   15608:	mvnlt	r0, #0
   1560c:	mvnlt	r1, #0
   15610:	mov	r6, r0
   15614:	mov	r7, r1
   15618:	ldr	r1, [sp, #32]
   1561c:	ldr	r2, [sp, #28]
   15620:	orr	r8, r3, r8
   15624:	add	r0, r1, r2
   15628:	str	r0, [r9]
   1562c:	ldrb	r0, [r1, r2]
   15630:	cmp	r0, #0
   15634:	orrne	r8, r8, #2
   15638:	ldr	r0, [sp, #36]	; 0x24
   1563c:	strd	r6, [r0]
   15640:	mov	r0, r8
   15644:	sub	sp, fp, #28
   15648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1564c:	movw	r0, #27757	; 0x6c6d
   15650:	movw	r1, #27795	; 0x6c93
   15654:	movw	r3, #27811	; 0x6ca3
   15658:	mov	r2, #85	; 0x55
   1565c:	movt	r0, #1
   15660:	movt	r1, #1
   15664:	movt	r3, #1
   15668:	bl	1111c <__assert_fail@plt>
   1566c:	clz	r2, r1
   15670:	clz	r3, r0
   15674:	lsr	r2, r2, #5
   15678:	lsr	r3, r3, #5
   1567c:	orrs	r2, r3, r2
   15680:	movwne	r1, #1
   15684:	movwne	r0, #1
   15688:	cmp	r1, #0
   1568c:	beq	156bc <__assert_fail@plt+0x45a0>
   15690:	mvn	r2, #-2147483648	; 0x80000000
   15694:	udiv	r2, r2, r1
   15698:	cmp	r2, r0
   1569c:	bcs	156bc <__assert_fail@plt+0x45a0>
   156a0:	push	{fp, lr}
   156a4:	mov	fp, sp
   156a8:	bl	11038 <__errno_location@plt>
   156ac:	mov	r1, #12
   156b0:	str	r1, [r0]
   156b4:	mov	r0, #0
   156b8:	pop	{fp, pc}
   156bc:	b	10e94 <calloc@plt>
   156c0:	cmp	r0, #0
   156c4:	movweq	r0, #1
   156c8:	cmn	r0, #1
   156cc:	ble	156d4 <__assert_fail@plt+0x45b8>
   156d0:	b	10fc0 <malloc@plt>
   156d4:	push	{fp, lr}
   156d8:	mov	fp, sp
   156dc:	bl	11038 <__errno_location@plt>
   156e0:	mov	r1, #12
   156e4:	str	r1, [r0]
   156e8:	mov	r0, #0
   156ec:	pop	{fp, pc}
   156f0:	push	{fp, lr}
   156f4:	mov	fp, sp
   156f8:	cmp	r0, #0
   156fc:	beq	15718 <__assert_fail@plt+0x45fc>
   15700:	cmp	r1, #0
   15704:	beq	15724 <__assert_fail@plt+0x4608>
   15708:	cmn	r1, #1
   1570c:	ble	15730 <__assert_fail@plt+0x4614>
   15710:	pop	{fp, lr}
   15714:	b	10f30 <realloc@plt>
   15718:	mov	r0, r1
   1571c:	pop	{fp, lr}
   15720:	b	156c0 <__assert_fail@plt+0x45a4>
   15724:	bl	11fa8 <__assert_fail@plt+0xe8c>
   15728:	mov	r0, #0
   1572c:	pop	{fp, pc}
   15730:	bl	11038 <__errno_location@plt>
   15734:	mov	r1, #12
   15738:	str	r1, [r0]
   1573c:	mov	r0, #0
   15740:	pop	{fp, pc}
   15744:	push	{fp, lr}
   15748:	mov	fp, sp
   1574c:	sub	sp, sp, #8
   15750:	mov	r1, r0
   15754:	movw	r0, #22400	; 0x5780
   15758:	mov	r2, #0
   1575c:	mov	r3, #0
   15760:	movt	r0, #1
   15764:	str	r2, [sp]
   15768:	mov	r2, #0
   1576c:	str	r0, [sp, #4]
   15770:	mvn	r0, #99	; 0x63
   15774:	bl	15828 <__assert_fail@plt+0x470c>
   15778:	mov	sp, fp
   1577c:	pop	{fp, pc}
   15780:	cmn	r0, #100	; 0x64
   15784:	bne	15798 <__assert_fail@plt+0x467c>
   15788:	mov	r0, r1
   1578c:	mov	r1, r2
   15790:	mov	r2, r3
   15794:	b	10f54 <readlink@plt>
   15798:	push	{fp, lr}
   1579c:	mov	fp, sp
   157a0:	bl	11104 <abort@plt>
   157a4:	sub	r0, r0, #1
   157a8:	ldrb	r3, [r0, #1]!
   157ac:	cmp	r3, #47	; 0x2f
   157b0:	beq	157a8 <__assert_fail@plt+0x468c>
   157b4:	mov	r2, #0
   157b8:	mov	r1, r0
   157bc:	b	157d8 <__assert_fail@plt+0x46bc>
   157c0:	cmp	r3, #0
   157c4:	bxeq	lr
   157c8:	tst	r2, #1
   157cc:	mov	r2, #0
   157d0:	movne	r0, r1
   157d4:	ldrb	r3, [r1, #1]!
   157d8:	uxtb	r3, r3
   157dc:	cmp	r3, #47	; 0x2f
   157e0:	bne	157c0 <__assert_fail@plt+0x46a4>
   157e4:	ldrb	r3, [r1, #1]!
   157e8:	mov	r2, #1
   157ec:	b	157d8 <__assert_fail@plt+0x46bc>
   157f0:	push	{r4, sl, fp, lr}
   157f4:	add	fp, sp, #8
   157f8:	mov	r4, r0
   157fc:	bl	11020 <strlen@plt>
   15800:	mov	r1, r0
   15804:	sub	r2, r4, #1
   15808:	mov	r0, r1
   1580c:	cmp	r1, #2
   15810:	popcc	{r4, sl, fp, pc}
   15814:	ldrb	r3, [r2, r0]
   15818:	sub	r1, r0, #1
   1581c:	cmp	r3, #47	; 0x2f
   15820:	beq	15808 <__assert_fail@plt+0x46ec>
   15824:	pop	{r4, sl, fp, pc}
   15828:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1582c:	add	fp, sp, #28
   15830:	sub	sp, sp, #4
   15834:	sub	sp, sp, #1024	; 0x400
   15838:	mov	r9, r0
   1583c:	mov	r5, r2
   15840:	mov	r0, sp
   15844:	cmp	r2, #0
   15848:	mov	r4, r3
   1584c:	ldr	sl, [fp, #12]
   15850:	movw	r7, #27896	; 0x6cf8
   15854:	mov	r8, r1
   15858:	moveq	r5, r0
   1585c:	ldr	r0, [fp, #8]
   15860:	movweq	r4, #1024	; 0x400
   15864:	movt	r7, #1
   15868:	cmn	r4, #-2147483647	; 0x80000001
   1586c:	mov	r6, r5
   15870:	mvncs	r4, #-2147483648	; 0x80000000
   15874:	cmp	r0, #0
   15878:	movne	r7, r0
   1587c:	mov	r0, r9
   15880:	mov	r1, r8
   15884:	mov	r2, r6
   15888:	mov	r3, r4
   1588c:	blx	sl
   15890:	cmn	r0, #1
   15894:	ble	158fc <__assert_fail@plt+0x47e0>
   15898:	cmp	r0, r4
   1589c:	blt	15928 <__assert_fail@plt+0x480c>
   158a0:	cmp	r6, r5
   158a4:	beq	158b4 <__assert_fail@plt+0x4798>
   158a8:	ldr	r1, [r7, #8]
   158ac:	mov	r0, r6
   158b0:	blx	r1
   158b4:	cmn	r4, #-1073741823	; 0xc0000001
   158b8:	bge	15978 <__assert_fail@plt+0x485c>
   158bc:	ldr	r1, [r7]
   158c0:	mov	r0, #1
   158c4:	orr	r4, r0, r4, lsl #1
   158c8:	mov	r0, r4
   158cc:	blx	r1
   158d0:	mov	r6, r0
   158d4:	cmp	r0, #0
   158d8:	bne	1587c <__assert_fail@plt+0x4760>
   158dc:	ldr	r1, [r7, #12]
   158e0:	cmp	r1, #0
   158e4:	beq	158f0 <__assert_fail@plt+0x47d4>
   158e8:	mov	r0, r4
   158ec:	blx	r1
   158f0:	bl	11038 <__errno_location@plt>
   158f4:	mov	r1, #12
   158f8:	b	15980 <__assert_fail@plt+0x4864>
   158fc:	mov	r4, #0
   15900:	cmp	r6, r5
   15904:	beq	15988 <__assert_fail@plt+0x486c>
   15908:	bl	11038 <__errno_location@plt>
   1590c:	ldr	r1, [r7, #8]
   15910:	ldr	r8, [r0]
   15914:	mov	r5, r0
   15918:	mov	r0, r6
   1591c:	blx	r1
   15920:	str	r8, [r5]
   15924:	b	15988 <__assert_fail@plt+0x486c>
   15928:	mov	r1, #0
   1592c:	add	r8, r0, #1
   15930:	strb	r1, [r6, r0]
   15934:	mov	r0, sp
   15938:	cmp	r6, r0
   1593c:	beq	1599c <__assert_fail@plt+0x4880>
   15940:	cmp	r6, r5
   15944:	beq	15994 <__assert_fail@plt+0x4878>
   15948:	cmp	r8, r4
   1594c:	bge	15994 <__assert_fail@plt+0x4878>
   15950:	ldr	r2, [r7, #4]
   15954:	cmp	r2, #0
   15958:	beq	15994 <__assert_fail@plt+0x4878>
   1595c:	mov	r0, r6
   15960:	mov	r1, r8
   15964:	blx	r2
   15968:	mov	r4, r0
   1596c:	cmp	r0, #0
   15970:	moveq	r4, r6
   15974:	b	15988 <__assert_fail@plt+0x486c>
   15978:	bl	11038 <__errno_location@plt>
   1597c:	mov	r1, #36	; 0x24
   15980:	mov	r4, #0
   15984:	str	r1, [r0]
   15988:	mov	r0, r4
   1598c:	sub	sp, fp, #28
   15990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15994:	mov	r4, r6
   15998:	b	15988 <__assert_fail@plt+0x486c>
   1599c:	ldr	r1, [r7]
   159a0:	mov	r0, r8
   159a4:	blx	r1
   159a8:	cmp	r0, #0
   159ac:	beq	159c4 <__assert_fail@plt+0x48a8>
   159b0:	mov	r1, sp
   159b4:	mov	r2, r8
   159b8:	mov	r4, r0
   159bc:	bl	10ee8 <memcpy@plt>
   159c0:	b	15988 <__assert_fail@plt+0x486c>
   159c4:	mov	r4, r8
   159c8:	b	158dc <__assert_fail@plt+0x47c0>
   159cc:	push	{r4, r5, r6, sl, fp, lr}
   159d0:	add	fp, sp, #16
   159d4:	mov	r4, r0
   159d8:	bl	10f84 <__fpending@plt>
   159dc:	ldr	r6, [r4]
   159e0:	mov	r5, r0
   159e4:	mov	r0, r4
   159e8:	bl	15a50 <__assert_fail@plt+0x4934>
   159ec:	tst	r6, #32
   159f0:	bne	15a28 <__assert_fail@plt+0x490c>
   159f4:	cmp	r0, #0
   159f8:	mov	r4, r0
   159fc:	mvnne	r4, #0
   15a00:	cmp	r5, #0
   15a04:	bne	15a34 <__assert_fail@plt+0x4918>
   15a08:	cmp	r0, #0
   15a0c:	beq	15a34 <__assert_fail@plt+0x4918>
   15a10:	bl	11038 <__errno_location@plt>
   15a14:	ldr	r0, [r0]
   15a18:	subs	r4, r0, #9
   15a1c:	mvnne	r4, #0
   15a20:	mov	r0, r4
   15a24:	pop	{r4, r5, r6, sl, fp, pc}
   15a28:	mvn	r4, #0
   15a2c:	cmp	r0, #0
   15a30:	beq	15a3c <__assert_fail@plt+0x4920>
   15a34:	mov	r0, r4
   15a38:	pop	{r4, r5, r6, sl, fp, pc}
   15a3c:	bl	11038 <__errno_location@plt>
   15a40:	mov	r1, #0
   15a44:	str	r1, [r0]
   15a48:	mov	r0, r4
   15a4c:	pop	{r4, r5, r6, sl, fp, pc}
   15a50:	push	{r4, r5, r6, sl, fp, lr}
   15a54:	add	fp, sp, #16
   15a58:	sub	sp, sp, #8
   15a5c:	mov	r4, r0
   15a60:	bl	11068 <fileno@plt>
   15a64:	cmn	r0, #1
   15a68:	ble	15adc <__assert_fail@plt+0x49c0>
   15a6c:	mov	r0, r4
   15a70:	bl	10fd8 <__freading@plt>
   15a74:	cmp	r0, #0
   15a78:	beq	15aa4 <__assert_fail@plt+0x4988>
   15a7c:	mov	r0, r4
   15a80:	bl	11068 <fileno@plt>
   15a84:	mov	r1, #1
   15a88:	mov	r2, #0
   15a8c:	mov	r3, #0
   15a90:	str	r1, [sp]
   15a94:	bl	10f6c <lseek64@plt>
   15a98:	and	r0, r0, r1
   15a9c:	cmn	r0, #1
   15aa0:	beq	15adc <__assert_fail@plt+0x49c0>
   15aa4:	mov	r0, r4
   15aa8:	bl	15aec <__assert_fail@plt+0x49d0>
   15aac:	cmp	r0, #0
   15ab0:	beq	15adc <__assert_fail@plt+0x49c0>
   15ab4:	bl	11038 <__errno_location@plt>
   15ab8:	ldr	r6, [r0]
   15abc:	mov	r5, r0
   15ac0:	mov	r0, r4
   15ac4:	bl	1108c <fclose@plt>
   15ac8:	cmp	r6, #0
   15acc:	strne	r6, [r5]
   15ad0:	mvnne	r0, #0
   15ad4:	sub	sp, fp, #16
   15ad8:	pop	{r4, r5, r6, sl, fp, pc}
   15adc:	mov	r0, r4
   15ae0:	sub	sp, fp, #16
   15ae4:	pop	{r4, r5, r6, sl, fp, lr}
   15ae8:	b	1108c <fclose@plt>
   15aec:	push	{r4, sl, fp, lr}
   15af0:	add	fp, sp, #8
   15af4:	sub	sp, sp, #8
   15af8:	mov	r4, r0
   15afc:	cmp	r0, #0
   15b00:	beq	15b1c <__assert_fail@plt+0x4a00>
   15b04:	mov	r0, r4
   15b08:	bl	10fd8 <__freading@plt>
   15b0c:	cmp	r0, #0
   15b10:	ldrbne	r0, [r4, #1]
   15b14:	tstne	r0, #1
   15b18:	bne	15b2c <__assert_fail@plt+0x4a10>
   15b1c:	mov	r0, r4
   15b20:	sub	sp, fp, #8
   15b24:	pop	{r4, sl, fp, lr}
   15b28:	b	10ec4 <fflush@plt>
   15b2c:	mov	r0, #1
   15b30:	mov	r2, #0
   15b34:	mov	r3, #0
   15b38:	str	r0, [sp]
   15b3c:	mov	r0, r4
   15b40:	bl	15b48 <__assert_fail@plt+0x4a2c>
   15b44:	b	15b1c <__assert_fail@plt+0x4a00>
   15b48:	push	{r4, r5, r6, r7, fp, lr}
   15b4c:	add	fp, sp, #16
   15b50:	sub	sp, sp, #8
   15b54:	mov	r4, r0
   15b58:	ldr	r0, [r0, #4]
   15b5c:	mov	r5, r3
   15b60:	mov	r6, r2
   15b64:	ldr	r1, [r4, #8]
   15b68:	cmp	r1, r0
   15b6c:	bne	15b88 <__assert_fail@plt+0x4a6c>
   15b70:	ldrd	r0, [r4, #16]
   15b74:	cmp	r1, r0
   15b78:	bne	15b88 <__assert_fail@plt+0x4a6c>
   15b7c:	ldr	r0, [r4, #36]	; 0x24
   15b80:	cmp	r0, #0
   15b84:	beq	15ba0 <__assert_fail@plt+0x4a84>
   15b88:	mov	r0, r4
   15b8c:	mov	r2, r6
   15b90:	mov	r3, r5
   15b94:	sub	sp, fp, #16
   15b98:	pop	{r4, r5, r6, r7, fp, lr}
   15b9c:	b	11098 <fseeko64@plt>
   15ba0:	ldr	r7, [fp, #8]
   15ba4:	mov	r0, r4
   15ba8:	bl	11068 <fileno@plt>
   15bac:	mov	r2, r6
   15bb0:	mov	r3, r5
   15bb4:	str	r7, [sp]
   15bb8:	bl	10f6c <lseek64@plt>
   15bbc:	and	r2, r0, r1
   15bc0:	cmn	r2, #1
   15bc4:	mvneq	r0, #0
   15bc8:	subeq	sp, fp, #16
   15bcc:	popeq	{r4, r5, r6, r7, fp, pc}
   15bd0:	strd	r0, [r4, #80]	; 0x50
   15bd4:	ldr	r0, [r4]
   15bd8:	bic	r0, r0, #16
   15bdc:	str	r0, [r4]
   15be0:	mov	r0, #0
   15be4:	sub	sp, fp, #16
   15be8:	pop	{r4, r5, r6, r7, fp, pc}
   15bec:	push	{fp, lr}
   15bf0:	mov	fp, sp
   15bf4:	mov	r0, #14
   15bf8:	bl	110d4 <nl_langinfo@plt>
   15bfc:	movw	r1, #26301	; 0x66bd
   15c00:	cmp	r0, #0
   15c04:	movt	r1, #1
   15c08:	movne	r1, r0
   15c0c:	movw	r0, #27890	; 0x6cf2
   15c10:	ldrb	r2, [r1]
   15c14:	movt	r0, #1
   15c18:	cmp	r2, #0
   15c1c:	movne	r0, r1
   15c20:	pop	{fp, pc}
   15c24:	push	{r4, r5, r6, r7, fp, lr}
   15c28:	add	fp, sp, #16
   15c2c:	sub	sp, sp, #8
   15c30:	add	r5, sp, #4
   15c34:	cmp	r0, #0
   15c38:	mov	r7, r2
   15c3c:	mov	r4, r1
   15c40:	movne	r5, r0
   15c44:	mov	r0, r5
   15c48:	bl	10f90 <mbrtowc@plt>
   15c4c:	mov	r6, r0
   15c50:	cmp	r7, #0
   15c54:	beq	15c78 <__assert_fail@plt+0x4b5c>
   15c58:	cmn	r6, #2
   15c5c:	bcc	15c78 <__assert_fail@plt+0x4b5c>
   15c60:	mov	r0, #0
   15c64:	bl	15cc0 <__assert_fail@plt+0x4ba4>
   15c68:	cmp	r0, #0
   15c6c:	ldrbeq	r0, [r4]
   15c70:	moveq	r6, #1
   15c74:	streq	r0, [r5]
   15c78:	mov	r0, r6
   15c7c:	sub	sp, fp, #16
   15c80:	pop	{r4, r5, r6, r7, fp, pc}
   15c84:	cmp	r2, #0
   15c88:	beq	15cb8 <__assert_fail@plt+0x4b9c>
   15c8c:	mvn	r3, #0
   15c90:	udiv	r3, r3, r2
   15c94:	cmp	r3, r1
   15c98:	bcs	15cb8 <__assert_fail@plt+0x4b9c>
   15c9c:	push	{fp, lr}
   15ca0:	mov	fp, sp
   15ca4:	bl	11038 <__errno_location@plt>
   15ca8:	mov	r1, #12
   15cac:	str	r1, [r0]
   15cb0:	mov	r0, #0
   15cb4:	pop	{fp, pc}
   15cb8:	mul	r1, r2, r1
   15cbc:	b	156f0 <__assert_fail@plt+0x45d4>
   15cc0:	push	{r4, sl, fp, lr}
   15cc4:	add	fp, sp, #8
   15cc8:	sub	sp, sp, #264	; 0x108
   15ccc:	add	r1, sp, #7
   15cd0:	movw	r2, #257	; 0x101
   15cd4:	bl	15d24 <__assert_fail@plt+0x4c08>
   15cd8:	mov	r4, #0
   15cdc:	cmp	r0, #0
   15ce0:	bne	15d18 <__assert_fail@plt+0x4bfc>
   15ce4:	movw	r1, #27912	; 0x6d08
   15ce8:	add	r0, sp, #7
   15cec:	movt	r1, #1
   15cf0:	bl	10eb8 <strcmp@plt>
   15cf4:	cmp	r0, #0
   15cf8:	beq	15d18 <__assert_fail@plt+0x4bfc>
   15cfc:	movw	r1, #27914	; 0x6d0a
   15d00:	add	r0, sp, #7
   15d04:	movt	r1, #1
   15d08:	bl	10eb8 <strcmp@plt>
   15d0c:	mov	r4, r0
   15d10:	cmp	r0, #0
   15d14:	movwne	r4, #1
   15d18:	mov	r0, r4
   15d1c:	sub	sp, fp, #8
   15d20:	pop	{r4, sl, fp, pc}
   15d24:	push	{r4, r5, r6, r7, fp, lr}
   15d28:	add	fp, sp, #16
   15d2c:	mov	r4, r1
   15d30:	mov	r1, #0
   15d34:	mov	r6, r2
   15d38:	bl	110b0 <setlocale@plt>
   15d3c:	cmp	r0, #0
   15d40:	beq	15d70 <__assert_fail@plt+0x4c54>
   15d44:	mov	r7, r0
   15d48:	bl	11020 <strlen@plt>
   15d4c:	cmp	r0, r6
   15d50:	bcs	15d90 <__assert_fail@plt+0x4c74>
   15d54:	add	r2, r0, #1
   15d58:	mov	r0, r4
   15d5c:	mov	r1, r7
   15d60:	bl	10ee8 <memcpy@plt>
   15d64:	mov	r5, #0
   15d68:	mov	r0, r5
   15d6c:	pop	{r4, r5, r6, r7, fp, pc}
   15d70:	cmp	r6, #0
   15d74:	mov	r5, #22
   15d78:	movne	r0, #0
   15d7c:	strbne	r0, [r4]
   15d80:	movne	r0, r5
   15d84:	popne	{r4, r5, r6, r7, fp, pc}
   15d88:	mov	r0, r5
   15d8c:	pop	{r4, r5, r6, r7, fp, pc}
   15d90:	mov	r5, #34	; 0x22
   15d94:	cmp	r6, #0
   15d98:	beq	15db8 <__assert_fail@plt+0x4c9c>
   15d9c:	sub	r6, r6, #1
   15da0:	mov	r0, r4
   15da4:	mov	r1, r7
   15da8:	mov	r2, r6
   15dac:	bl	10ee8 <memcpy@plt>
   15db0:	mov	r0, #0
   15db4:	strb	r0, [r4, r6]
   15db8:	mov	r0, r5
   15dbc:	pop	{r4, r5, r6, r7, fp, pc}
   15dc0:	mov	r1, #0
   15dc4:	b	110b0 <setlocale@plt>
   15dc8:	cmp	r3, #0
   15dcc:	cmpeq	r2, #0
   15dd0:	bne	15de8 <__assert_fail@plt+0x4ccc>
   15dd4:	cmp	r1, #0
   15dd8:	cmpeq	r0, #0
   15ddc:	mvnne	r1, #0
   15de0:	mvnne	r0, #0
   15de4:	b	15e04 <__assert_fail@plt+0x4ce8>
   15de8:	sub	sp, sp, #8
   15dec:	push	{sp, lr}
   15df0:	bl	15e14 <__assert_fail@plt+0x4cf8>
   15df4:	ldr	lr, [sp, #4]
   15df8:	add	sp, sp, #8
   15dfc:	pop	{r2, r3}
   15e00:	bx	lr
   15e04:	push	{r1, lr}
   15e08:	mov	r0, #8
   15e0c:	bl	10eac <raise@plt>
   15e10:	pop	{r1, pc}
   15e14:	cmp	r1, r3
   15e18:	cmpeq	r0, r2
   15e1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e20:	mov	r4, r0
   15e24:	movcc	r0, #0
   15e28:	mov	r5, r1
   15e2c:	ldr	lr, [sp, #36]	; 0x24
   15e30:	movcc	r1, r0
   15e34:	bcc	15f30 <__assert_fail@plt+0x4e14>
   15e38:	cmp	r3, #0
   15e3c:	clzeq	ip, r2
   15e40:	clzne	ip, r3
   15e44:	addeq	ip, ip, #32
   15e48:	cmp	r5, #0
   15e4c:	clzeq	r1, r4
   15e50:	addeq	r1, r1, #32
   15e54:	clzne	r1, r5
   15e58:	sub	ip, ip, r1
   15e5c:	sub	sl, ip, #32
   15e60:	lsl	r9, r3, ip
   15e64:	rsb	fp, ip, #32
   15e68:	orr	r9, r9, r2, lsl sl
   15e6c:	orr	r9, r9, r2, lsr fp
   15e70:	lsl	r8, r2, ip
   15e74:	cmp	r5, r9
   15e78:	cmpeq	r4, r8
   15e7c:	movcc	r0, #0
   15e80:	movcc	r1, r0
   15e84:	bcc	15ea0 <__assert_fail@plt+0x4d84>
   15e88:	mov	r0, #1
   15e8c:	subs	r4, r4, r8
   15e90:	lsl	r1, r0, sl
   15e94:	orr	r1, r1, r0, lsr fp
   15e98:	lsl	r0, r0, ip
   15e9c:	sbc	r5, r5, r9
   15ea0:	cmp	ip, #0
   15ea4:	beq	15f30 <__assert_fail@plt+0x4e14>
   15ea8:	lsr	r6, r8, #1
   15eac:	orr	r6, r6, r9, lsl #31
   15eb0:	lsr	r7, r9, #1
   15eb4:	mov	r2, ip
   15eb8:	b	15edc <__assert_fail@plt+0x4dc0>
   15ebc:	subs	r3, r4, r6
   15ec0:	sbc	r8, r5, r7
   15ec4:	adds	r3, r3, r3
   15ec8:	adc	r8, r8, r8
   15ecc:	adds	r4, r3, #1
   15ed0:	adc	r5, r8, #0
   15ed4:	subs	r2, r2, #1
   15ed8:	beq	15ef8 <__assert_fail@plt+0x4ddc>
   15edc:	cmp	r5, r7
   15ee0:	cmpeq	r4, r6
   15ee4:	bcs	15ebc <__assert_fail@plt+0x4da0>
   15ee8:	adds	r4, r4, r4
   15eec:	adc	r5, r5, r5
   15ef0:	subs	r2, r2, #1
   15ef4:	bne	15edc <__assert_fail@plt+0x4dc0>
   15ef8:	lsr	r3, r4, ip
   15efc:	orr	r3, r3, r5, lsl fp
   15f00:	lsr	r2, r5, ip
   15f04:	orr	r3, r3, r5, lsr sl
   15f08:	adds	r0, r0, r4
   15f0c:	mov	r4, r3
   15f10:	lsl	r3, r2, ip
   15f14:	orr	r3, r3, r4, lsl sl
   15f18:	lsl	ip, r4, ip
   15f1c:	orr	r3, r3, r4, lsr fp
   15f20:	adc	r1, r1, r5
   15f24:	subs	r0, r0, ip
   15f28:	mov	r5, r2
   15f2c:	sbc	r1, r1, r3
   15f30:	cmp	lr, #0
   15f34:	strdne	r4, [lr]
   15f38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15f40:	mov	r7, r0
   15f44:	ldr	r6, [pc, #72]	; 15f94 <__assert_fail@plt+0x4e78>
   15f48:	ldr	r5, [pc, #72]	; 15f98 <__assert_fail@plt+0x4e7c>
   15f4c:	add	r6, pc, r6
   15f50:	add	r5, pc, r5
   15f54:	sub	r6, r6, r5
   15f58:	mov	r8, r1
   15f5c:	mov	r9, r2
   15f60:	bl	10e74 <calloc@plt-0x20>
   15f64:	asrs	r6, r6, #2
   15f68:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15f6c:	mov	r4, #0
   15f70:	add	r4, r4, #1
   15f74:	ldr	r3, [r5], #4
   15f78:	mov	r2, r9
   15f7c:	mov	r1, r8
   15f80:	mov	r0, r7
   15f84:	blx	r3
   15f88:	cmp	r6, r4
   15f8c:	bne	15f70 <__assert_fail@plt+0x4e54>
   15f90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15f94:			; <UNDEFINED> instruction: 0x00010fb8
   15f98:			; <UNDEFINED> instruction: 0x00010fb0
   15f9c:	bx	lr
   15fa0:	ldr	r3, [pc, #12]	; 15fb4 <__assert_fail@plt+0x4e98>
   15fa4:	mov	r1, #0
   15fa8:	add	r3, pc, r3
   15fac:	ldr	r2, [r3]
   15fb0:	b	11044 <__cxa_atexit@plt>
   15fb4:	andeq	r1, r1, r4, asr #2

Disassembly of section .fini:

00015fb8 <.fini>:
   15fb8:	push	{r3, lr}
   15fbc:	pop	{r3, pc}
