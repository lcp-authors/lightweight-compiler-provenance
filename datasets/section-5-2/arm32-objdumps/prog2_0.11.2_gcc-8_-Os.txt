
../repos/prog2/0.11.2:     file format elf32-littlearm


Disassembly of section .init:

00010684 <.init>:
   10684:	push	{r3, lr}
   10688:	bl	1080c <_start@@Base+0x3c>
   1068c:	pop	{r3, pc}

Disassembly of section .plt:

00010690 <strcmp@plt-0x14>:
   10690:	push	{lr}		; (str lr, [sp, #-4]!)
   10694:	ldr	lr, [pc, #4]	; 106a0 <strcmp@plt-0x4>
   10698:	add	lr, pc, lr
   1069c:	ldr	pc, [lr, #8]!
   106a0:	andeq	r0, r1, r0, ror #18

000106a4 <strcmp@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2400]!	; 0x960

000106b0 <strcat@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2392]!	; 0x958

000106bc <strcpy@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #16, 20	; 0x10000
   106c4:	ldr	pc, [ip, #2384]!	; 0x950

000106c8 <puts@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #16, 20	; 0x10000
   106d0:	ldr	pc, [ip, #2376]!	; 0x948

000106d4 <__libc_start_main@plt>:
   106d4:	add	ip, pc, #0, 12
   106d8:	add	ip, ip, #16, 20	; 0x10000
   106dc:	ldr	pc, [ip, #2368]!	; 0x940

000106e0 <__gmon_start__@plt>:
   106e0:	add	ip, pc, #0, 12
   106e4:	add	ip, ip, #16, 20	; 0x10000
   106e8:	ldr	pc, [ip, #2360]!	; 0x938

000106ec <strlen@plt>:
   106ec:	add	ip, pc, #0, 12
   106f0:	add	ip, ip, #16, 20	; 0x10000
   106f4:	ldr	pc, [ip, #2352]!	; 0x930

000106f8 <memset@plt>:
   106f8:	add	ip, pc, #0, 12
   106fc:	add	ip, ip, #16, 20	; 0x10000
   10700:	ldr	pc, [ip, #2344]!	; 0x928

00010704 <__isoc99_scanf@plt>:
   10704:	add	ip, pc, #0, 12
   10708:	add	ip, ip, #16, 20	; 0x10000
   1070c:	ldr	pc, [ip, #2336]!	; 0x920

00010710 <abort@plt>:
   10710:	add	ip, pc, #0, 12
   10714:	add	ip, ip, #16, 20	; 0x10000
   10718:	ldr	pc, [ip, #2328]!	; 0x918

Disassembly of section .text:

0001071c <main@@Base>:
   1071c:	push	{r4, r5, r6, lr}
   10720:	mov	r1, #0
   10724:	sub	sp, sp, #104	; 0x68
   10728:	mov	r2, #22
   1072c:	add	r0, sp, #24
   10730:	ldr	r4, [pc, #144]	; 107c8 <main@@Base+0xac>
   10734:	str	r1, [sp, #20]
   10738:	ldr	r5, [pc, #140]	; 107cc <main@@Base+0xb0>
   1073c:	bl	106f8 <memset@plt>
   10740:	add	r1, sp, #8
   10744:	mov	r0, r4
   10748:	bl	10704 <__isoc99_scanf@plt>
   1074c:	ldrb	r3, [sp, #8]
   10750:	cmp	r3, #46	; 0x2e
   10754:	beq	107bc <main@@Base+0xa0>
   10758:	add	r1, sp, #4
   1075c:	mov	r0, r5
   10760:	bl	10704 <__isoc99_scanf@plt>
   10764:	add	r1, sp, #20
   10768:	add	r0, sp, #8
   1076c:	ldr	r2, [sp, #4]
   10770:	bl	10960 <StringSet@@Base>
   10774:	add	r1, sp, #48	; 0x30
   10778:	add	r0, sp, #20
   1077c:	bl	108c0 <R_ShiftString@@Base>
   10780:	add	r1, sp, #48	; 0x30
   10784:	add	r0, sp, #20
   10788:	bl	106a4 <strcmp@plt>
   1078c:	mov	r6, r0
   10790:	add	r0, sp, #20
   10794:	bl	106c8 <puts@plt>
   10798:	add	r1, sp, #20
   1079c:	add	r0, sp, #76	; 0x4c
   107a0:	bl	106bc <strcpy@plt>
   107a4:	add	r1, sp, #20
   107a8:	add	r0, sp, #76	; 0x4c
   107ac:	bl	10910 <L_ShiftString@@Base>
   107b0:	cmp	r6, #0
   107b4:	bne	10780 <main@@Base+0x64>
   107b8:	b	10740 <main@@Base+0x24>
   107bc:	mov	r0, #0
   107c0:	add	sp, sp, #104	; 0x68
   107c4:	pop	{r4, r5, r6, pc}
   107c8:	andeq	r0, r1, r8, lsl sl
   107cc:	andeq	r0, r1, fp, lsl sl

000107d0 <_start@@Base>:
   107d0:	mov	fp, #0
   107d4:	mov	lr, #0
   107d8:	pop	{r1}		; (ldr r1, [sp], #4)
   107dc:	mov	r2, sp
   107e0:	push	{r2}		; (str r2, [sp, #-4]!)
   107e4:	push	{r0}		; (str r0, [sp, #-4]!)
   107e8:	ldr	ip, [pc, #16]	; 10800 <_start@@Base+0x30>
   107ec:	push	{ip}		; (str ip, [sp, #-4]!)
   107f0:	ldr	r0, [pc, #12]	; 10804 <_start@@Base+0x34>
   107f4:	ldr	r3, [pc, #12]	; 10808 <_start@@Base+0x38>
   107f8:	bl	106d4 <__libc_start_main@plt>
   107fc:	bl	10710 <abort@plt>
   10800:	andeq	r0, r1, r8, lsl #20
   10804:	andeq	r0, r1, ip, lsl r7
   10808:	andeq	r0, r1, r8, lsr #19
   1080c:	ldr	r3, [pc, #20]	; 10828 <_start@@Base+0x58>
   10810:	ldr	r2, [pc, #20]	; 1082c <_start@@Base+0x5c>
   10814:	add	r3, pc, r3
   10818:	ldr	r2, [r3, r2]
   1081c:	cmp	r2, #0
   10820:	bxeq	lr
   10824:	b	106e0 <__gmon_start__@plt>
   10828:	andeq	r0, r1, r4, ror #15
   1082c:	andeq	r0, r0, r4, lsr r0
   10830:	ldr	r0, [pc, #24]	; 10850 <_start@@Base+0x80>
   10834:	ldr	r3, [pc, #24]	; 10854 <_start@@Base+0x84>
   10838:	cmp	r3, r0
   1083c:	bxeq	lr
   10840:	ldr	r3, [pc, #16]	; 10858 <_start@@Base+0x88>
   10844:	cmp	r3, #0
   10848:	bxeq	lr
   1084c:	bx	r3
   10850:	andeq	r1, r2, r0, asr #32
   10854:	andeq	r1, r2, r0, asr #32
   10858:	andeq	r0, r0, r0
   1085c:	ldr	r0, [pc, #36]	; 10888 <_start@@Base+0xb8>
   10860:	ldr	r1, [pc, #36]	; 1088c <_start@@Base+0xbc>
   10864:	sub	r1, r1, r0
   10868:	asr	r1, r1, #2
   1086c:	add	r1, r1, r1, lsr #31
   10870:	asrs	r1, r1, #1
   10874:	bxeq	lr
   10878:	ldr	r3, [pc, #16]	; 10890 <_start@@Base+0xc0>
   1087c:	cmp	r3, #0
   10880:	bxeq	lr
   10884:	bx	r3
   10888:	andeq	r1, r2, r0, asr #32
   1088c:	andeq	r1, r2, r0, asr #32
   10890:	andeq	r0, r0, r0
   10894:	push	{r4, lr}
   10898:	ldr	r4, [pc, #24]	; 108b8 <_start@@Base+0xe8>
   1089c:	ldrb	r3, [r4]
   108a0:	cmp	r3, #0
   108a4:	popne	{r4, pc}
   108a8:	bl	10830 <_start@@Base+0x60>
   108ac:	mov	r3, #1
   108b0:	strb	r3, [r4]
   108b4:	pop	{r4, pc}
   108b8:	andeq	r1, r2, r0, asr #32
   108bc:	b	1085c <_start@@Base+0x8c>

000108c0 <R_ShiftString@@Base>:
   108c0:	push	{r4, r5, r6, r7, r8, lr}
   108c4:	mov	r5, r0
   108c8:	mov	r4, r1
   108cc:	sub	r6, r5, #1
   108d0:	rsb	r7, r5, #2
   108d4:	bl	106ec <strlen@plt>
   108d8:	add	r0, r5, r0
   108dc:	ldrb	r3, [r0, #-1]
   108e0:	strb	r3, [r4], #1
   108e4:	mov	r0, r5
   108e8:	bl	106ec <strlen@plt>
   108ec:	add	r3, r7, r6
   108f0:	cmp	r0, r3
   108f4:	bhi	10904 <R_ShiftString@@Base+0x44>
   108f8:	mov	r3, #0
   108fc:	strb	r3, [r4]
   10900:	pop	{r4, r5, r6, r7, r8, pc}
   10904:	ldrb	r3, [r6, #1]!
   10908:	strb	r3, [r4], #1
   1090c:	b	108e4 <R_ShiftString@@Base+0x24>

00010910 <L_ShiftString@@Base>:
   10910:	push	{r4, r5, r6, r7, r8, lr}
   10914:	mov	r6, r0
   10918:	mov	r5, r1
   1091c:	sub	r7, r5, #1
   10920:	mov	r4, #1
   10924:	bl	106ec <strlen@plt>
   10928:	ldrb	r3, [r6]
   1092c:	add	r0, r5, r0
   10930:	strb	r3, [r0, #-1]
   10934:	mov	r0, r6
   10938:	bl	106ec <strlen@plt>
   1093c:	cmp	r0, r4
   10940:	bhi	10950 <L_ShiftString@@Base+0x40>
   10944:	mov	r3, #0
   10948:	strb	r3, [r5, r4]
   1094c:	pop	{r4, r5, r6, r7, r8, pc}
   10950:	ldrb	r3, [r6, r4]
   10954:	add	r4, r4, #1
   10958:	strb	r3, [r7, #1]!
   1095c:	b	10934 <L_ShiftString@@Base+0x24>

00010960 <StringSet@@Base>:
   10960:	mov	r3, r1
   10964:	push	{r4, r5, r6, lr}
   10968:	mov	r6, r0
   1096c:	mov	r0, r3
   10970:	mov	r5, r2
   10974:	mov	r4, #0
   10978:	ldr	r1, [pc, #36]	; 109a4 <StringSet@@Base+0x44>
   1097c:	bl	106bc <strcpy@plt>
   10980:	mov	r3, r0
   10984:	cmp	r4, r5
   10988:	popge	{r4, r5, r6, pc}
   1098c:	mov	r0, r3
   10990:	mov	r1, r6
   10994:	bl	106b0 <strcat@plt>
   10998:	mov	r3, r0
   1099c:	add	r4, r4, #1
   109a0:	b	10984 <StringSet@@Base+0x24>
   109a4:	andeq	r0, r1, sp, lsl sl

000109a8 <__libc_csu_init@@Base>:
   109a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   109ac:	mov	r7, r0
   109b0:	ldr	r6, [pc, #72]	; 10a00 <__libc_csu_init@@Base+0x58>
   109b4:	ldr	r5, [pc, #72]	; 10a04 <__libc_csu_init@@Base+0x5c>
   109b8:	add	r6, pc, r6
   109bc:	add	r5, pc, r5
   109c0:	sub	r6, r6, r5
   109c4:	mov	r8, r1
   109c8:	mov	r9, r2
   109cc:	bl	10684 <strcmp@plt-0x20>
   109d0:	asrs	r6, r6, #2
   109d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   109d8:	mov	r4, #0
   109dc:	add	r4, r4, #1
   109e0:	ldr	r3, [r5], #4
   109e4:	mov	r2, r9
   109e8:	mov	r1, r8
   109ec:	mov	r0, r7
   109f0:	blx	r3
   109f4:	cmp	r6, r4
   109f8:	bne	109dc <__libc_csu_init@@Base+0x34>
   109fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a00:	andeq	r0, r1, r4, asr r5
   10a04:	andeq	r0, r1, ip, asr #10

00010a08 <__libc_csu_fini@@Base>:
   10a08:	bx	lr

Disassembly of section .fini:

00010a0c <.fini>:
   10a0c:	push	{r3, lr}
   10a10:	pop	{r3, pc}
