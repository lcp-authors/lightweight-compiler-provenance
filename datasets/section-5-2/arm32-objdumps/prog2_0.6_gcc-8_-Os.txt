
../repos/prog2/0.6:     file format elf32-littlearm


Disassembly of section .init:

000105ec <.init>:
   105ec:	push	{r3, lr}
   105f0:	bl	107d4 <_start@@Base+0x3c>
   105f4:	pop	{r3, pc}

Disassembly of section .plt:

000105f8 <printf@plt-0x14>:
   105f8:	push	{lr}		; (str lr, [sp, #-4]!)
   105fc:	ldr	lr, [pc, #4]	; 10608 <printf@plt-0x4>
   10600:	add	lr, pc, lr
   10604:	ldr	pc, [lr, #8]!
   10608:	strdeq	r0, [r1], -r8

0001060c <printf@plt>:
   1060c:	add	ip, pc, #0, 12
   10610:	add	ip, ip, #16, 20	; 0x10000
   10614:	ldr	pc, [ip, #2552]!	; 0x9f8

00010618 <realloc@plt>:
   10618:	add	ip, pc, #0, 12
   1061c:	add	ip, ip, #16, 20	; 0x10000
   10620:	ldr	pc, [ip, #2544]!	; 0x9f0

00010624 <strcpy@plt>:
   10624:	add	ip, pc, #0, 12
   10628:	add	ip, ip, #16, 20	; 0x10000
   1062c:	ldr	pc, [ip, #2536]!	; 0x9e8

00010630 <malloc@plt>:
   10630:	add	ip, pc, #0, 12
   10634:	add	ip, ip, #16, 20	; 0x10000
   10638:	ldr	pc, [ip, #2528]!	; 0x9e0

0001063c <__libc_start_main@plt>:
   1063c:	add	ip, pc, #0, 12
   10640:	add	ip, ip, #16, 20	; 0x10000
   10644:	ldr	pc, [ip, #2520]!	; 0x9d8

00010648 <__gmon_start__@plt>:
   10648:	add	ip, pc, #0, 12
   1064c:	add	ip, ip, #16, 20	; 0x10000
   10650:	ldr	pc, [ip, #2512]!	; 0x9d0

00010654 <strlen@plt>:
   10654:	add	ip, pc, #0, 12
   10658:	add	ip, ip, #16, 20	; 0x10000
   1065c:	ldr	pc, [ip, #2504]!	; 0x9c8

00010660 <__isoc99_scanf@plt>:
   10660:	add	ip, pc, #0, 12
   10664:	add	ip, ip, #16, 20	; 0x10000
   10668:	ldr	pc, [ip, #2496]!	; 0x9c0

0001066c <abort@plt>:
   1066c:	add	ip, pc, #0, 12
   10670:	add	ip, ip, #16, 20	; 0x10000
   10674:	ldr	pc, [ip, #2488]!	; 0x9b8

Disassembly of section .text:

00010678 <main@@Base>:
   10678:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1067c:	mov	r7, #0
   10680:	mov	r5, r7
   10684:	mov	r4, r7
   10688:	ldr	r0, [pc, #244]	; 10784 <main@@Base+0x10c>
   1068c:	bl	1060c <printf@plt>
   10690:	mov	r0, #1
   10694:	ldr	fp, [pc, #236]	; 10788 <main@@Base+0x110>
   10698:	bl	10630 <malloc@plt>
   1069c:	mov	r8, r0
   106a0:	mov	r0, #1
   106a4:	bl	10630 <malloc@plt>
   106a8:	mov	r6, r0
   106ac:	add	r1, sp, #7
   106b0:	mov	r0, fp
   106b4:	bl	10660 <__isoc99_scanf@plt>
   106b8:	cmp	r0, #1
   106bc:	beq	10708 <main@@Base+0x90>
   106c0:	mov	r1, r4
   106c4:	ldr	r0, [pc, #192]	; 1078c <main@@Base+0x114>
   106c8:	bl	1060c <printf@plt>
   106cc:	mov	r1, r8
   106d0:	ldr	r0, [pc, #184]	; 10790 <main@@Base+0x118>
   106d4:	bl	1060c <printf@plt>
   106d8:	vmov	s15, r5
   106dc:	ldr	r0, [pc, #176]	; 10794 <main@@Base+0x11c>
   106e0:	vcvt.f32.s32	s14, s15
   106e4:	vmov	s15, r4
   106e8:	vcvt.f32.s32	s15, s15
   106ec:	vdiv.f32	s13, s14, s15
   106f0:	vcvt.f64.f32	d7, s13
   106f4:	vmov	r2, r3, d7
   106f8:	bl	1060c <printf@plt>
   106fc:	mov	r0, #0
   10700:	add	sp, sp, #12
   10704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10708:	ldrb	r9, [sp, #7]
   1070c:	cmp	r9, #10
   10710:	cmpne	r9, #32
   10714:	bne	10764 <main@@Base+0xec>
   10718:	mov	r0, r6
   1071c:	bl	10654 <strlen@plt>
   10720:	mov	r7, r0
   10724:	mov	r0, r8
   10728:	bl	10654 <strlen@plt>
   1072c:	cmp	r7, r0
   10730:	bls	1074c <main@@Base+0xd4>
   10734:	mov	r1, r7
   10738:	mov	r0, r8
   1073c:	bl	10618 <realloc@plt>
   10740:	mov	r1, r6
   10744:	mov	r8, r0
   10748:	bl	10624 <strcpy@plt>
   1074c:	cmp	r9, #10
   10750:	add	r4, r4, #1
   10754:	beq	106c0 <main@@Base+0x48>
   10758:	mov	sl, #0
   1075c:	mov	r7, sl
   10760:	b	106ac <main@@Base+0x34>
   10764:	add	sl, r7, #1
   10768:	mov	r0, r6
   1076c:	mov	r1, sl
   10770:	add	r5, r5, #1
   10774:	bl	10618 <realloc@plt>
   10778:	mov	r6, r0
   1077c:	strb	r9, [r0, r7]
   10780:	b	1075c <main@@Base+0xe4>
   10784:	strdeq	r0, [r1], -r8
   10788:	andeq	r0, r1, r0, lsl #18
   1078c:	andeq	r0, r1, r3, lsl #18
   10790:	andeq	r0, r1, fp, lsl r9
   10794:	andeq	r0, r1, lr, lsr #18

00010798 <_start@@Base>:
   10798:	mov	fp, #0
   1079c:	mov	lr, #0
   107a0:	pop	{r1}		; (ldr r1, [sp], #4)
   107a4:	mov	r2, sp
   107a8:	push	{r2}		; (str r2, [sp, #-4]!)
   107ac:	push	{r0}		; (str r0, [sp, #-4]!)
   107b0:	ldr	ip, [pc, #16]	; 107c8 <_start@@Base+0x30>
   107b4:	push	{ip}		; (str ip, [sp, #-4]!)
   107b8:	ldr	r0, [pc, #12]	; 107cc <_start@@Base+0x34>
   107bc:	ldr	r3, [pc, #12]	; 107d0 <_start@@Base+0x38>
   107c0:	bl	1063c <__libc_start_main@plt>
   107c4:	bl	1066c <abort@plt>
   107c8:	andeq	r0, r1, r8, ror #17
   107cc:	andeq	r0, r1, r8, ror r6
   107d0:	andeq	r0, r1, r8, lsl #17
   107d4:	ldr	r3, [pc, #20]	; 107f0 <_start@@Base+0x58>
   107d8:	ldr	r2, [pc, #20]	; 107f4 <_start@@Base+0x5c>
   107dc:	add	r3, pc, r3
   107e0:	ldr	r2, [r3, r2]
   107e4:	cmp	r2, #0
   107e8:	bxeq	lr
   107ec:	b	10648 <__gmon_start__@plt>
   107f0:	andeq	r0, r1, ip, lsl r8
   107f4:	andeq	r0, r0, r0, lsr r0
   107f8:	ldr	r0, [pc, #24]	; 10818 <_start@@Base+0x80>
   107fc:	ldr	r3, [pc, #24]	; 1081c <_start@@Base+0x84>
   10800:	cmp	r3, r0
   10804:	bxeq	lr
   10808:	ldr	r3, [pc, #16]	; 10820 <_start@@Base+0x88>
   1080c:	cmp	r3, #0
   10810:	bxeq	lr
   10814:	bx	r3
   10818:	andeq	r1, r2, ip, lsr r0
   1081c:	andeq	r1, r2, ip, lsr r0
   10820:	andeq	r0, r0, r0
   10824:	ldr	r0, [pc, #36]	; 10850 <_start@@Base+0xb8>
   10828:	ldr	r1, [pc, #36]	; 10854 <_start@@Base+0xbc>
   1082c:	sub	r1, r1, r0
   10830:	asr	r1, r1, #2
   10834:	add	r1, r1, r1, lsr #31
   10838:	asrs	r1, r1, #1
   1083c:	bxeq	lr
   10840:	ldr	r3, [pc, #16]	; 10858 <_start@@Base+0xc0>
   10844:	cmp	r3, #0
   10848:	bxeq	lr
   1084c:	bx	r3
   10850:	andeq	r1, r2, ip, lsr r0
   10854:	andeq	r1, r2, ip, lsr r0
   10858:	andeq	r0, r0, r0
   1085c:	push	{r4, lr}
   10860:	ldr	r4, [pc, #24]	; 10880 <_start@@Base+0xe8>
   10864:	ldrb	r3, [r4]
   10868:	cmp	r3, #0
   1086c:	popne	{r4, pc}
   10870:	bl	107f8 <_start@@Base+0x60>
   10874:	mov	r3, #1
   10878:	strb	r3, [r4]
   1087c:	pop	{r4, pc}
   10880:	andeq	r1, r2, ip, lsr r0
   10884:	b	10824 <_start@@Base+0x8c>

00010888 <__libc_csu_init@@Base>:
   10888:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1088c:	mov	r7, r0
   10890:	ldr	r6, [pc, #72]	; 108e0 <__libc_csu_init@@Base+0x58>
   10894:	ldr	r5, [pc, #72]	; 108e4 <__libc_csu_init@@Base+0x5c>
   10898:	add	r6, pc, r6
   1089c:	add	r5, pc, r5
   108a0:	sub	r6, r6, r5
   108a4:	mov	r8, r1
   108a8:	mov	r9, r2
   108ac:	bl	105ec <printf@plt-0x20>
   108b0:	asrs	r6, r6, #2
   108b4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   108b8:	mov	r4, #0
   108bc:	add	r4, r4, #1
   108c0:	ldr	r3, [r5], #4
   108c4:	mov	r2, r9
   108c8:	mov	r1, r8
   108cc:	mov	r0, r7
   108d0:	blx	r3
   108d4:	cmp	r6, r4
   108d8:	bne	108bc <__libc_csu_init@@Base+0x34>
   108dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   108e0:	andeq	r0, r1, r4, ror r6
   108e4:	andeq	r0, r1, ip, ror #12

000108e8 <__libc_csu_fini@@Base>:
   108e8:	bx	lr

Disassembly of section .fini:

000108ec <.fini>:
   108ec:	push	{r3, lr}
   108f0:	pop	{r3, pc}
