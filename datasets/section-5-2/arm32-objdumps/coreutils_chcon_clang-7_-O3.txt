
../repos/coreutils/src/chcon:     file format elf32-littlearm


Disassembly of section .init:

00011468 <.init>:
   11468:	push	{r3, lr}
   1146c:	bl	1189c <__assert_fail@plt+0x48>
   11470:	pop	{r3, pc}

Disassembly of section .plt:

00011474 <fstatfs64@plt-0x14>:
   11474:	push	{lr}		; (str lr, [sp, #-4]!)
   11478:	ldr	lr, [pc, #4]	; 11484 <fstatfs64@plt-0x4>
   1147c:	add	lr, pc, lr
   11480:	ldr	pc, [lr, #8]!
   11484:	andeq	fp, r1, ip, ror fp

00011488 <fstatfs64@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #110592	; 0x1b000
   11490:	ldr	pc, [ip, #2940]!	; 0xb7c

00011494 <calloc@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #110592	; 0x1b000
   1149c:	ldr	pc, [ip, #2932]!	; 0xb74

000114a0 <fputs_unlocked@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #110592	; 0x1b000
   114a8:	ldr	pc, [ip, #2924]!	; 0xb6c

000114ac <raise@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #110592	; 0x1b000
   114b4:	ldr	pc, [ip, #2916]!	; 0xb64

000114b8 <is_selinux_enabled@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #110592	; 0x1b000
   114c0:	ldr	pc, [ip, #2908]!	; 0xb5c

000114c4 <strcmp@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #110592	; 0x1b000
   114cc:	ldr	pc, [ip, #2900]!	; 0xb54

000114d0 <fflush@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #110592	; 0x1b000
   114d8:	ldr	pc, [ip, #2892]!	; 0xb4c

000114dc <lsetfilecon@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #110592	; 0x1b000
   114e4:	ldr	pc, [ip, #2884]!	; 0xb44

000114e8 <memmove@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #110592	; 0x1b000
   114f0:	ldr	pc, [ip, #2876]!	; 0xb3c

000114f4 <free@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #110592	; 0x1b000
   114fc:	ldr	pc, [ip, #2868]!	; 0xb34

00011500 <_exit@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #110592	; 0x1b000
   11508:	ldr	pc, [ip, #2860]!	; 0xb2c

0001150c <memcpy@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #110592	; 0x1b000
   11514:	ldr	pc, [ip, #2852]!	; 0xb24

00011518 <mbsinit@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #110592	; 0x1b000
   11520:	ldr	pc, [ip, #2844]!	; 0xb1c

00011524 <context_new@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #110592	; 0x1b000
   1152c:	ldr	pc, [ip, #2836]!	; 0xb14

00011530 <memcmp@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #110592	; 0x1b000
   11538:	ldr	pc, [ip, #2828]!	; 0xb0c

0001153c <context_role_set@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #110592	; 0x1b000
   11544:	ldr	pc, [ip, #2820]!	; 0xb04

00011548 <dcgettext@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #110592	; 0x1b000
   11550:	ldr	pc, [ip, #2812]!	; 0xafc

00011554 <context_type_set@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #110592	; 0x1b000
   1155c:	ldr	pc, [ip, #2804]!	; 0xaf4

00011560 <realloc@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #110592	; 0x1b000
   11568:	ldr	pc, [ip, #2796]!	; 0xaec

0001156c <fgetfilecon@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #110592	; 0x1b000
   11574:	ldr	pc, [ip, #2788]!	; 0xae4

00011578 <textdomain@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #110592	; 0x1b000
   11580:	ldr	pc, [ip, #2780]!	; 0xadc

00011584 <chdir@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #110592	; 0x1b000
   1158c:	ldr	pc, [ip, #2772]!	; 0xad4

00011590 <__fxstatat64@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #110592	; 0x1b000
   11598:	ldr	pc, [ip, #2764]!	; 0xacc

0001159c <iswprint@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #110592	; 0x1b000
   115a4:	ldr	pc, [ip, #2756]!	; 0xac4

000115a8 <__fxstat64@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #110592	; 0x1b000
   115b0:	ldr	pc, [ip, #2748]!	; 0xabc

000115b4 <fwrite@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #110592	; 0x1b000
   115bc:	ldr	pc, [ip, #2740]!	; 0xab4

000115c0 <lseek64@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #110592	; 0x1b000
   115c8:	ldr	pc, [ip, #2732]!	; 0xaac

000115cc <__ctype_get_mb_cur_max@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #110592	; 0x1b000
   115d4:	ldr	pc, [ip, #2724]!	; 0xaa4

000115d8 <strcpy@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #110592	; 0x1b000
   115e0:	ldr	pc, [ip, #2716]!	; 0xa9c

000115e4 <__fpending@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #110592	; 0x1b000
   115ec:	ldr	pc, [ip, #2708]!	; 0xa94

000115f0 <mbrtowc@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #110592	; 0x1b000
   115f8:	ldr	pc, [ip, #2700]!	; 0xa8c

000115fc <error@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #110592	; 0x1b000
   11604:	ldr	pc, [ip, #2692]!	; 0xa84

00011608 <security_check_context@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #110592	; 0x1b000
   11610:	ldr	pc, [ip, #2684]!	; 0xa7c

00011614 <open64@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #110592	; 0x1b000
   1161c:	ldr	pc, [ip, #2676]!	; 0xa74

00011620 <lgetfilecon@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #110592	; 0x1b000
   11628:	ldr	pc, [ip, #2668]!	; 0xa6c

0001162c <malloc@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #110592	; 0x1b000
   11634:	ldr	pc, [ip, #2660]!	; 0xa64

00011638 <__libc_start_main@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #110592	; 0x1b000
   11640:	ldr	pc, [ip, #2652]!	; 0xa5c

00011644 <__freading@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #110592	; 0x1b000
   1164c:	ldr	pc, [ip, #2644]!	; 0xa54

00011650 <__gmon_start__@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #110592	; 0x1b000
   11658:	ldr	pc, [ip, #2636]!	; 0xa4c

0001165c <context_free@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #110592	; 0x1b000
   11664:	ldr	pc, [ip, #2628]!	; 0xa44

00011668 <getopt_long@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #110592	; 0x1b000
   11670:	ldr	pc, [ip, #2620]!	; 0xa3c

00011674 <__ctype_b_loc@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #110592	; 0x1b000
   1167c:	ldr	pc, [ip, #2612]!	; 0xa34

00011680 <getcwd@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #110592	; 0x1b000
   11688:	ldr	pc, [ip, #2604]!	; 0xa2c

0001168c <exit@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #110592	; 0x1b000
   11694:	ldr	pc, [ip, #2596]!	; 0xa24

00011698 <context_user_set@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #110592	; 0x1b000
   116a0:	ldr	pc, [ip, #2588]!	; 0xa1c

000116a4 <getfilecon@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #110592	; 0x1b000
   116ac:	ldr	pc, [ip, #2580]!	; 0xa14

000116b0 <strlen@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #110592	; 0x1b000
   116b8:	ldr	pc, [ip, #2572]!	; 0xa0c

000116bc <openat64@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #110592	; 0x1b000
   116c4:	ldr	pc, [ip, #2564]!	; 0xa04

000116c8 <memrchr@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #110592	; 0x1b000
   116d0:	ldr	pc, [ip, #2556]!	; 0x9fc

000116d4 <__errno_location@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #110592	; 0x1b000
   116dc:	ldr	pc, [ip, #2548]!	; 0x9f4

000116e0 <__sprintf_chk@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #110592	; 0x1b000
   116e8:	ldr	pc, [ip, #2540]!	; 0x9ec

000116ec <__cxa_atexit@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #110592	; 0x1b000
   116f4:	ldr	pc, [ip, #2532]!	; 0x9e4

000116f8 <memset@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #110592	; 0x1b000
   11700:	ldr	pc, [ip, #2524]!	; 0x9dc

00011704 <__printf_chk@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #110592	; 0x1b000
   1170c:	ldr	pc, [ip, #2516]!	; 0x9d4

00011710 <fileno@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #110592	; 0x1b000
   11718:	ldr	pc, [ip, #2508]!	; 0x9cc

0001171c <__fprintf_chk@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #110592	; 0x1b000
   11724:	ldr	pc, [ip, #2500]!	; 0x9c4

00011728 <memchr@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #110592	; 0x1b000
   11730:	ldr	pc, [ip, #2492]!	; 0x9bc

00011734 <setfilecon@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #110592	; 0x1b000
   1173c:	ldr	pc, [ip, #2484]!	; 0x9b4

00011740 <access@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #110592	; 0x1b000
   11748:	ldr	pc, [ip, #2476]!	; 0x9ac

0001174c <fclose@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #110592	; 0x1b000
   11754:	ldr	pc, [ip, #2468]!	; 0x9a4

00011758 <fseeko64@plt>:
   11758:	add	ip, pc, #0, 12
   1175c:	add	ip, ip, #110592	; 0x1b000
   11760:	ldr	pc, [ip, #2460]!	; 0x99c

00011764 <fcntl64@plt>:
   11764:	add	ip, pc, #0, 12
   11768:	add	ip, ip, #110592	; 0x1b000
   1176c:	ldr	pc, [ip, #2452]!	; 0x994

00011770 <setlocale@plt>:
   11770:	add	ip, pc, #0, 12
   11774:	add	ip, ip, #110592	; 0x1b000
   11778:	ldr	pc, [ip, #2444]!	; 0x98c

0001177c <strrchr@plt>:
   1177c:	add	ip, pc, #0, 12
   11780:	add	ip, ip, #110592	; 0x1b000
   11784:	ldr	pc, [ip, #2436]!	; 0x984

00011788 <nl_langinfo@plt>:
   11788:	add	ip, pc, #0, 12
   1178c:	add	ip, ip, #110592	; 0x1b000
   11790:	ldr	pc, [ip, #2428]!	; 0x97c

00011794 <readdir64@plt>:
   11794:	add	ip, pc, #0, 12
   11798:	add	ip, ip, #110592	; 0x1b000
   1179c:	ldr	pc, [ip, #2420]!	; 0x974

000117a0 <fdopendir@plt>:
   117a0:	add	ip, pc, #0, 12
   117a4:	add	ip, ip, #110592	; 0x1b000
   117a8:	ldr	pc, [ip, #2412]!	; 0x96c

000117ac <dirfd@plt>:
   117ac:	add	ip, pc, #0, 12
   117b0:	add	ip, ip, #110592	; 0x1b000
   117b4:	ldr	pc, [ip, #2404]!	; 0x964

000117b8 <fchdir@plt>:
   117b8:	add	ip, pc, #0, 12
   117bc:	add	ip, ip, #110592	; 0x1b000
   117c0:	ldr	pc, [ip, #2396]!	; 0x95c

000117c4 <qsort@plt>:
   117c4:	add	ip, pc, #0, 12
   117c8:	add	ip, ip, #110592	; 0x1b000
   117cc:	ldr	pc, [ip, #2388]!	; 0x954

000117d0 <freecon@plt>:
   117d0:	add	ip, pc, #0, 12
   117d4:	add	ip, ip, #110592	; 0x1b000
   117d8:	ldr	pc, [ip, #2380]!	; 0x94c

000117dc <bindtextdomain@plt>:
   117dc:	add	ip, pc, #0, 12
   117e0:	add	ip, ip, #110592	; 0x1b000
   117e4:	ldr	pc, [ip, #2372]!	; 0x944

000117e8 <context_range_set@plt>:
   117e8:	add	ip, pc, #0, 12
   117ec:	add	ip, ip, #110592	; 0x1b000
   117f0:	ldr	pc, [ip, #2364]!	; 0x93c

000117f4 <context_str@plt>:
   117f4:	add	ip, pc, #0, 12
   117f8:	add	ip, ip, #110592	; 0x1b000
   117fc:	ldr	pc, [ip, #2356]!	; 0x934

00011800 <__xstat64@plt>:
   11800:	add	ip, pc, #0, 12
   11804:	add	ip, ip, #110592	; 0x1b000
   11808:	ldr	pc, [ip, #2348]!	; 0x92c

0001180c <strncmp@plt>:
   1180c:	add	ip, pc, #0, 12
   11810:	add	ip, ip, #110592	; 0x1b000
   11814:	ldr	pc, [ip, #2340]!	; 0x924

00011818 <abort@plt>:
   11818:	add	ip, pc, #0, 12
   1181c:	add	ip, ip, #110592	; 0x1b000
   11820:	ldr	pc, [ip, #2332]!	; 0x91c

00011824 <close@plt>:
   11824:	add	ip, pc, #0, 12
   11828:	add	ip, ip, #110592	; 0x1b000
   1182c:	ldr	pc, [ip, #2324]!	; 0x914

00011830 <__lxstat64@plt>:
   11830:	add	ip, pc, #0, 12
   11834:	add	ip, ip, #110592	; 0x1b000
   11838:	ldr	pc, [ip, #2316]!	; 0x90c

0001183c <closedir@plt>:
   1183c:	add	ip, pc, #0, 12
   11840:	add	ip, ip, #110592	; 0x1b000
   11844:	ldr	pc, [ip, #2308]!	; 0x904

00011848 <strspn@plt>:
   11848:	add	ip, pc, #0, 12
   1184c:	add	ip, ip, #110592	; 0x1b000
   11850:	ldr	pc, [ip, #2300]!	; 0x8fc

00011854 <__assert_fail@plt>:
   11854:	add	ip, pc, #0, 12
   11858:	add	ip, ip, #110592	; 0x1b000
   1185c:	ldr	pc, [ip, #2292]!	; 0x8f4

Disassembly of section .text:

00011860 <.text>:
   11860:	mov	fp, #0
   11864:	mov	lr, #0
   11868:	pop	{r1}		; (ldr r1, [sp], #4)
   1186c:	mov	r2, sp
   11870:	push	{r2}		; (str r2, [sp, #-4]!)
   11874:	push	{r0}		; (str r0, [sp, #-4]!)
   11878:	ldr	ip, [pc, #16]	; 11890 <__assert_fail@plt+0x3c>
   1187c:	push	{ip}		; (str ip, [sp, #-4]!)
   11880:	ldr	r0, [pc, #12]	; 11894 <__assert_fail@plt+0x40>
   11884:	ldr	r3, [pc, #12]	; 11898 <__assert_fail@plt+0x44>
   11888:	bl	11638 <__libc_start_main@plt>
   1188c:	bl	11818 <abort@plt>
   11890:	andeq	fp, r1, r4, ror #5
   11894:	andeq	r1, r1, ip, ror ip
   11898:	andeq	fp, r1, r4, lsl #5
   1189c:	ldr	r3, [pc, #20]	; 118b8 <__assert_fail@plt+0x64>
   118a0:	ldr	r2, [pc, #20]	; 118bc <__assert_fail@plt+0x68>
   118a4:	add	r3, pc, r3
   118a8:	ldr	r2, [r3, r2]
   118ac:	cmp	r2, #0
   118b0:	bxeq	lr
   118b4:	b	11650 <__gmon_start__@plt>
   118b8:	andeq	fp, r1, r4, asr r7
   118bc:	andeq	r0, r0, r4, asr r1
   118c0:	ldr	r0, [pc, #24]	; 118e0 <__assert_fail@plt+0x8c>
   118c4:	ldr	r3, [pc, #24]	; 118e4 <__assert_fail@plt+0x90>
   118c8:	cmp	r3, r0
   118cc:	bxeq	lr
   118d0:	ldr	r3, [pc, #16]	; 118e8 <__assert_fail@plt+0x94>
   118d4:	cmp	r3, #0
   118d8:	bxeq	lr
   118dc:	bx	r3
   118e0:	andeq	sp, r2, r8, lsr #3
   118e4:	andeq	sp, r2, r8, lsr #3
   118e8:	andeq	r0, r0, r0
   118ec:	ldr	r0, [pc, #36]	; 11918 <__assert_fail@plt+0xc4>
   118f0:	ldr	r1, [pc, #36]	; 1191c <__assert_fail@plt+0xc8>
   118f4:	sub	r1, r1, r0
   118f8:	asr	r1, r1, #2
   118fc:	add	r1, r1, r1, lsr #31
   11900:	asrs	r1, r1, #1
   11904:	bxeq	lr
   11908:	ldr	r3, [pc, #16]	; 11920 <__assert_fail@plt+0xcc>
   1190c:	cmp	r3, #0
   11910:	bxeq	lr
   11914:	bx	r3
   11918:	andeq	sp, r2, r8, lsr #3
   1191c:	andeq	sp, r2, r8, lsr #3
   11920:	andeq	r0, r0, r0
   11924:	push	{r4, lr}
   11928:	ldr	r4, [pc, #24]	; 11948 <__assert_fail@plt+0xf4>
   1192c:	ldrb	r3, [r4]
   11930:	cmp	r3, #0
   11934:	popne	{r4, pc}
   11938:	bl	118c0 <__assert_fail@plt+0x6c>
   1193c:	mov	r3, #1
   11940:	strb	r3, [r4]
   11944:	pop	{r4, pc}
   11948:	andeq	sp, r2, r4, asr #3
   1194c:	b	118ec <__assert_fail@plt+0x98>
   11950:	push	{fp, lr}
   11954:	mov	fp, sp
   11958:	sub	sp, sp, #64	; 0x40
   1195c:	mov	r4, r0
   11960:	cmp	r0, #0
   11964:	bne	11c38 <__assert_fail@plt+0x3e4>
   11968:	movw	r1, #45883	; 0xb33b
   1196c:	mov	r0, #0
   11970:	mov	r2, #5
   11974:	movt	r1, #1
   11978:	bl	11548 <dcgettext@plt>
   1197c:	mov	r1, r0
   11980:	movw	r0, #53760	; 0xd200
   11984:	movt	r0, #2
   11988:	ldr	r2, [r0]
   1198c:	mov	r0, #1
   11990:	mov	r3, r2
   11994:	str	r2, [sp]
   11998:	bl	11704 <__printf_chk@plt>
   1199c:	movw	r1, #46041	; 0xb3d9
   119a0:	mov	r0, #0
   119a4:	mov	r2, #5
   119a8:	movt	r1, #1
   119ac:	bl	11548 <dcgettext@plt>
   119b0:	movw	r7, #53692	; 0xd1bc
   119b4:	movt	r7, #2
   119b8:	ldr	r1, [r7]
   119bc:	bl	114a0 <fputs_unlocked@plt>
   119c0:	movw	r1, #47968	; 0xbb60
   119c4:	mov	r0, #0
   119c8:	mov	r2, #5
   119cc:	movt	r1, #1
   119d0:	bl	11548 <dcgettext@plt>
   119d4:	ldr	r1, [r7]
   119d8:	bl	114a0 <fputs_unlocked@plt>
   119dc:	movw	r1, #46180	; 0xb464
   119e0:	mov	r0, #0
   119e4:	mov	r2, #5
   119e8:	movt	r1, #1
   119ec:	bl	11548 <dcgettext@plt>
   119f0:	ldr	r1, [r7]
   119f4:	bl	114a0 <fputs_unlocked@plt>
   119f8:	movw	r1, #46411	; 0xb54b
   119fc:	mov	r0, #0
   11a00:	mov	r2, #5
   11a04:	movt	r1, #1
   11a08:	bl	11548 <dcgettext@plt>
   11a0c:	ldr	r1, [r7]
   11a10:	bl	114a0 <fputs_unlocked@plt>
   11a14:	movw	r1, #46694	; 0xb666
   11a18:	mov	r0, #0
   11a1c:	mov	r2, #5
   11a20:	movt	r1, #1
   11a24:	bl	11548 <dcgettext@plt>
   11a28:	ldr	r1, [r7]
   11a2c:	bl	114a0 <fputs_unlocked@plt>
   11a30:	movw	r1, #46822	; 0xb6e6
   11a34:	mov	r0, #0
   11a38:	mov	r2, #5
   11a3c:	movt	r1, #1
   11a40:	bl	11548 <dcgettext@plt>
   11a44:	ldr	r1, [r7]
   11a48:	bl	114a0 <fputs_unlocked@plt>
   11a4c:	movw	r1, #46941	; 0xb75d
   11a50:	mov	r0, #0
   11a54:	mov	r2, #5
   11a58:	movt	r1, #1
   11a5c:	bl	11548 <dcgettext@plt>
   11a60:	ldr	r1, [r7]
   11a64:	bl	114a0 <fputs_unlocked@plt>
   11a68:	movw	r1, #47012	; 0xb7a4
   11a6c:	mov	r0, #0
   11a70:	mov	r2, #5
   11a74:	movt	r1, #1
   11a78:	bl	11548 <dcgettext@plt>
   11a7c:	ldr	r1, [r7]
   11a80:	bl	114a0 <fputs_unlocked@plt>
   11a84:	movw	r1, #47083	; 0xb7eb
   11a88:	mov	r0, #0
   11a8c:	mov	r2, #5
   11a90:	movt	r1, #1
   11a94:	bl	11548 <dcgettext@plt>
   11a98:	ldr	r1, [r7]
   11a9c:	bl	114a0 <fputs_unlocked@plt>
   11aa0:	movw	r1, #47548	; 0xb9bc
   11aa4:	mov	r0, #0
   11aa8:	mov	r2, #5
   11aac:	movt	r1, #1
   11ab0:	bl	11548 <dcgettext@plt>
   11ab4:	ldr	r1, [r7]
   11ab8:	bl	114a0 <fputs_unlocked@plt>
   11abc:	movw	r1, #47593	; 0xb9e9
   11ac0:	mov	r0, #0
   11ac4:	mov	r2, #5
   11ac8:	movt	r1, #1
   11acc:	bl	11548 <dcgettext@plt>
   11ad0:	ldr	r1, [r7]
   11ad4:	bl	114a0 <fputs_unlocked@plt>
   11ad8:	movw	r0, #49288	; 0xc088
   11adc:	mov	r2, #48	; 0x30
   11ae0:	add	r6, sp, #8
   11ae4:	movw	r5, #47647	; 0xba1f
   11ae8:	movt	r0, #1
   11aec:	movt	r5, #1
   11af0:	add	r1, r0, #32
   11af4:	add	r3, r0, #16
   11af8:	vld1.64	{d18-d19}, [r0], r2
   11afc:	vld1.64	{d16-d17}, [r1]
   11b00:	vld1.64	{d20-d21}, [r3]
   11b04:	add	r1, r6, #32
   11b08:	vldr	d22, [r0]
   11b0c:	add	r0, r6, #16
   11b10:	vst1.64	{d16-d17}, [r1]
   11b14:	movw	r1, #48043	; 0xbbab
   11b18:	vst1.64	{d20-d21}, [r0]
   11b1c:	mov	r0, r6
   11b20:	vst1.64	{d18-d19}, [r0], r2
   11b24:	movt	r1, #1
   11b28:	vstr	d22, [r0]
   11b2c:	mov	r0, r5
   11b30:	bl	114c4 <strcmp@plt>
   11b34:	cmp	r0, #0
   11b38:	ldrne	r1, [r6, #8]!
   11b3c:	cmpne	r1, #0
   11b40:	bne	11b2c <__assert_fail@plt+0x2d8>
   11b44:	ldr	r6, [r6, #4]
   11b48:	movw	r1, #48138	; 0xbc0a
   11b4c:	mov	r0, #0
   11b50:	mov	r2, #5
   11b54:	movt	r1, #1
   11b58:	bl	11548 <dcgettext@plt>
   11b5c:	movw	r2, #47692	; 0xba4c
   11b60:	movw	r3, #48161	; 0xbc21
   11b64:	mov	r1, r0
   11b68:	mov	r0, #1
   11b6c:	movt	r2, #1
   11b70:	movt	r3, #1
   11b74:	bl	11704 <__printf_chk@plt>
   11b78:	cmp	r6, #0
   11b7c:	mov	r0, #5
   11b80:	mov	r1, #0
   11b84:	moveq	r6, r5
   11b88:	bl	11770 <setlocale@plt>
   11b8c:	cmp	r0, #0
   11b90:	beq	11bc8 <__assert_fail@plt+0x374>
   11b94:	movw	r1, #48201	; 0xbc49
   11b98:	mov	r2, #3
   11b9c:	movt	r1, #1
   11ba0:	bl	1180c <strncmp@plt>
   11ba4:	cmp	r0, #0
   11ba8:	beq	11bc8 <__assert_fail@plt+0x374>
   11bac:	movw	r1, #48205	; 0xbc4d
   11bb0:	mov	r0, #0
   11bb4:	mov	r2, #5
   11bb8:	movt	r1, #1
   11bbc:	bl	11548 <dcgettext@plt>
   11bc0:	ldr	r1, [r7]
   11bc4:	bl	114a0 <fputs_unlocked@plt>
   11bc8:	movw	r1, #48276	; 0xbc94
   11bcc:	mov	r0, #0
   11bd0:	mov	r2, #5
   11bd4:	movt	r1, #1
   11bd8:	bl	11548 <dcgettext@plt>
   11bdc:	movw	r2, #48161	; 0xbc21
   11be0:	mov	r1, r0
   11be4:	mov	r0, #1
   11be8:	mov	r3, r5
   11bec:	movt	r2, #1
   11bf0:	bl	11704 <__printf_chk@plt>
   11bf4:	movw	r1, #48303	; 0xbcaf
   11bf8:	mov	r0, #0
   11bfc:	mov	r2, #5
   11c00:	movt	r1, #1
   11c04:	bl	11548 <dcgettext@plt>
   11c08:	movw	r3, #47547	; 0xb9bb
   11c0c:	mov	r1, r0
   11c10:	movw	r0, #48071	; 0xbbc7
   11c14:	cmp	r6, r5
   11c18:	mov	r2, r6
   11c1c:	movt	r0, #1
   11c20:	movt	r3, #1
   11c24:	moveq	r3, r0
   11c28:	mov	r0, #1
   11c2c:	bl	11704 <__printf_chk@plt>
   11c30:	mov	r0, r4
   11c34:	bl	1168c <exit@plt>
   11c38:	movw	r0, #53688	; 0xd1b8
   11c3c:	movw	r1, #45844	; 0xb314
   11c40:	mov	r2, #5
   11c44:	movt	r0, #2
   11c48:	movt	r1, #1
   11c4c:	ldr	r5, [r0]
   11c50:	mov	r0, #0
   11c54:	bl	11548 <dcgettext@plt>
   11c58:	mov	r2, r0
   11c5c:	movw	r0, #53760	; 0xd200
   11c60:	mov	r1, #1
   11c64:	movt	r0, #2
   11c68:	ldr	r3, [r0]
   11c6c:	mov	r0, r5
   11c70:	bl	1171c <__fprintf_chk@plt>
   11c74:	mov	r0, r4
   11c78:	bl	1168c <exit@plt>
   11c7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c80:	add	fp, sp, #28
   11c84:	sub	sp, sp, #36	; 0x24
   11c88:	mov	r5, r0
   11c8c:	ldr	r0, [r1]
   11c90:	mov	r4, r1
   11c94:	bl	16b14 <__assert_fail@plt+0x52c0>
   11c98:	movw	r1, #47547	; 0xb9bb
   11c9c:	mov	r0, #6
   11ca0:	movt	r1, #1
   11ca4:	bl	11770 <setlocale@plt>
   11ca8:	movw	r6, #47696	; 0xba50
   11cac:	movw	r1, #47653	; 0xba25
   11cb0:	movt	r6, #1
   11cb4:	movt	r1, #1
   11cb8:	mov	r0, r6
   11cbc:	bl	117dc <bindtextdomain@plt>
   11cc0:	mov	r0, r6
   11cc4:	bl	11578 <textdomain@plt>
   11cc8:	movw	r0, #11588	; 0x2d44
   11ccc:	movt	r0, #1
   11cd0:	bl	1b2e8 <__assert_fail@plt+0x9a94>
   11cd4:	mov	r0, #16
   11cd8:	movw	r7, #47677	; 0xba3d
   11cdc:	movw	r6, #49064	; 0xbfa8
   11ce0:	mov	r9, #0
   11ce4:	mvn	r8, #0
   11ce8:	mov	sl, #0
   11cec:	str	r0, [sp, #24]
   11cf0:	mov	r0, #0
   11cf4:	movt	r7, #1
   11cf8:	movt	r6, #1
   11cfc:	str	r0, [sp, #20]
   11d00:	mov	r0, #0
   11d04:	b	11d14 <__assert_fail@plt+0x4c0>
   11d08:	movw	r0, #53696	; 0xd1c0
   11d0c:	movt	r0, #2
   11d10:	ldr	r0, [r0]
   11d14:	str	r0, [sp, #16]
   11d18:	b	11d38 <__assert_fail@plt+0x4e4>
   11d1c:	movw	r0, #53696	; 0xd1c0
   11d20:	movw	r1, #53704	; 0xd1c8
   11d24:	mov	sl, #1
   11d28:	movt	r0, #2
   11d2c:	movt	r1, #2
   11d30:	ldr	r0, [r0]
   11d34:	str	r0, [r1, #16]
   11d38:	mov	r0, r5
   11d3c:	mov	r1, r4
   11d40:	mov	r2, r7
   11d44:	mov	r3, r6
   11d48:	str	r9, [sp]
   11d4c:	bl	11668 <getopt_long@plt>
   11d50:	add	r1, r0, #3
   11d54:	cmp	r1, #121	; 0x79
   11d58:	bhi	11f58 <__assert_fail@plt+0x704>
   11d5c:	add	r0, pc, #0
   11d60:	ldr	pc, [r0, r1, lsl #2]
   11d64:			; <UNDEFINED> instruction: 0x00012bb8
   11d68:	andeq	r2, r1, ip, lsl #24
   11d6c:	andeq	r2, r1, r4, asr #32
   11d70:	andeq	r2, r1, r4, asr ip
   11d74:	andeq	r2, r1, r4, asr ip
   11d78:	andeq	r2, r1, r4, asr ip
   11d7c:	andeq	r2, r1, r4, asr ip
   11d80:	andeq	r2, r1, r4, asr ip
   11d84:	andeq	r2, r1, r4, asr ip
   11d88:	andeq	r2, r1, r4, asr ip
   11d8c:	andeq	r2, r1, r4, asr ip
   11d90:	andeq	r2, r1, r4, asr ip
   11d94:	andeq	r2, r1, r4, asr ip
   11d98:	andeq	r2, r1, r4, asr ip
   11d9c:	andeq	r2, r1, r4, asr ip
   11da0:	andeq	r2, r1, r4, asr ip
   11da4:	andeq	r2, r1, r4, asr ip
   11da8:	andeq	r2, r1, r4, asr ip
   11dac:	andeq	r2, r1, r4, asr ip
   11db0:	andeq	r2, r1, r4, asr ip
   11db4:	andeq	r2, r1, r4, asr ip
   11db8:	andeq	r2, r1, r4, asr ip
   11dbc:	andeq	r2, r1, r4, asr ip
   11dc0:	andeq	r2, r1, r4, asr ip
   11dc4:	andeq	r2, r1, r4, asr ip
   11dc8:	andeq	r2, r1, r4, asr ip
   11dcc:	andeq	r2, r1, r4, asr ip
   11dd0:	andeq	r2, r1, r4, asr ip
   11dd4:	andeq	r2, r1, r4, asr ip
   11dd8:	andeq	r2, r1, r4, asr ip
   11ddc:	andeq	r2, r1, r4, asr ip
   11de0:	andeq	r2, r1, r4, asr ip
   11de4:	andeq	r2, r1, r4, asr ip
   11de8:	andeq	r2, r1, r4, asr ip
   11dec:	andeq	r2, r1, r4, asr ip
   11df0:	andeq	r2, r1, r4, asr ip
   11df4:	andeq	r2, r1, r4, asr ip
   11df8:	andeq	r2, r1, r4, asr ip
   11dfc:	andeq	r2, r1, r4, asr ip
   11e00:	andeq	r2, r1, r4, asr ip
   11e04:	andeq	r2, r1, r4, asr ip
   11e08:	andeq	r2, r1, r4, asr ip
   11e0c:	andeq	r2, r1, r4, asr ip
   11e10:	andeq	r2, r1, r4, asr ip
   11e14:	andeq	r2, r1, r4, asr ip
   11e18:	andeq	r2, r1, r4, asr ip
   11e1c:	andeq	r2, r1, r4, asr ip
   11e20:	andeq	r2, r1, r4, asr ip
   11e24:	andeq	r2, r1, r4, asr ip
   11e28:	andeq	r2, r1, r4, asr ip
   11e2c:	andeq	r2, r1, r4, asr ip
   11e30:	andeq	r2, r1, r4, asr ip
   11e34:	andeq	r2, r1, r4, asr ip
   11e38:	andeq	r2, r1, r4, asr ip
   11e3c:	andeq	r2, r1, r4, asr ip
   11e40:	andeq	r2, r1, r4, asr ip
   11e44:	andeq	r2, r1, r4, asr ip
   11e48:	andeq	r2, r1, r4, asr ip
   11e4c:	andeq	r2, r1, r4, asr ip
   11e50:	andeq	r2, r1, r4, asr ip
   11e54:	andeq	r2, r1, r4, asr ip
   11e58:	andeq	r2, r1, r4, asr ip
   11e5c:	andeq	r2, r1, r4, asr ip
   11e60:	andeq	r2, r1, r4, asr ip
   11e64:	andeq	r2, r1, r4, asr ip
   11e68:	andeq	r2, r1, r4, asr ip
   11e6c:	andeq	r2, r1, r4, asr ip
   11e70:	andeq	r2, r1, r4, asr ip
   11e74:	andeq	r2, r1, r4, asr ip
   11e78:	andeq	r2, r1, r4, asr ip
   11e7c:	andeq	r2, r1, r4, asr ip
   11e80:	andeq	r2, r1, r4, asr ip
   11e84:	andeq	r2, r1, r4, asr ip
   11e88:	andeq	r2, r1, r4, asr ip
   11e8c:	andeq	r2, r1, r4, asr ip
   11e90:	andeq	r1, r1, ip, asr #30
   11e94:	andeq	r2, r1, r4, asr ip
   11e98:	andeq	r2, r1, r4, asr ip
   11e9c:	andeq	r2, r1, r4, asr ip
   11ea0:			; <UNDEFINED> instruction: 0x00011fb0
   11ea4:	andeq	r2, r1, r4, asr ip
   11ea8:	andeq	r2, r1, r4, asr ip
   11eac:	andeq	r2, r1, r4, asr ip
   11eb0:	andeq	r1, r1, r4, lsr #31
   11eb4:	andeq	r2, r1, r4, asr ip
   11eb8:	ldrdeq	r1, [r1], -r0
   11ebc:	andeq	r2, r1, r4, asr ip
   11ec0:	andeq	r2, r1, r4, asr ip
   11ec4:	andeq	r2, r1, r4, asr ip
   11ec8:	andeq	r2, r1, r4, asr ip
   11ecc:	andeq	r2, r1, r4, asr ip
   11ed0:	andeq	r2, r1, r4, asr ip
   11ed4:	andeq	r2, r1, r4, asr ip
   11ed8:	andeq	r2, r1, r4, asr ip
   11edc:	andeq	r2, r1, r4, asr ip
   11ee0:	andeq	r2, r1, r4, asr ip
   11ee4:	andeq	r2, r1, r4, asr ip
   11ee8:	andeq	r2, r1, r4, asr ip
   11eec:	andeq	r2, r1, r4, asr ip
   11ef0:	andeq	r2, r1, r4, asr ip
   11ef4:	andeq	r2, r1, r4, asr ip
   11ef8:	andeq	r2, r1, r4, asr ip
   11efc:	andeq	r2, r1, r4, asr ip
   11f00:	andeq	r2, r1, r4, asr ip
   11f04:	andeq	r2, r1, r4, asr ip
   11f08:	andeq	r1, r1, r8, lsr sp
   11f0c:	andeq	r2, r1, r4, asr ip
   11f10:	strdeq	r1, [r1], -r0
   11f14:	andeq	r2, r1, r4, asr ip
   11f18:	andeq	r2, r1, r4, asr ip
   11f1c:	andeq	r2, r1, r4, asr ip
   11f20:	andeq	r1, r1, ip, lsl sp
   11f24:	andeq	r2, r1, r4, asr ip
   11f28:	andeq	r2, r1, r4, asr ip
   11f2c:	andeq	r2, r1, r4, asr ip
   11f30:	andeq	r2, r1, r4, asr ip
   11f34:	andeq	r2, r1, r4, asr ip
   11f38:	andeq	r2, r1, r4
   11f3c:	andeq	r2, r1, r4, asr ip
   11f40:	andeq	r1, r1, r4, lsl #31
   11f44:	andeq	r2, r1, r4, lsr #32
   11f48:			; <UNDEFINED> instruction: 0x00011fbc
   11f4c:	mov	r0, #17
   11f50:	str	r0, [sp, #24]
   11f54:	b	11d38 <__assert_fail@plt+0x4e4>
   11f58:	sub	r0, r0, #256	; 0x100
   11f5c:	cmp	r0, #3
   11f60:	bhi	12c54 <__assert_fail@plt+0x1400>
   11f64:	add	r1, pc, #0
   11f68:	ldr	pc, [r1, r0, lsl #2]
   11f6c:	andeq	r1, r1, ip, ror pc
   11f70:	strdeq	r1, [r1], -r8
   11f74:	andeq	r1, r1, r4, ror #31
   11f78:	andeq	r1, r1, r8, lsl #26
   11f7c:	mov	r8, #1
   11f80:	b	11d38 <__assert_fail@plt+0x4e4>
   11f84:	movw	r0, #53696	; 0xd1c0
   11f88:	movw	r1, #53704	; 0xd1c8
   11f8c:	mov	sl, #1
   11f90:	movt	r0, #2
   11f94:	movt	r1, #2
   11f98:	ldr	r0, [r0]
   11f9c:	str	r0, [r1, #12]
   11fa0:	b	11d38 <__assert_fail@plt+0x4e4>
   11fa4:	mov	r0, #16
   11fa8:	str	r0, [sp, #24]
   11fac:	b	11d38 <__assert_fail@plt+0x4e4>
   11fb0:	mov	r0, #2
   11fb4:	str	r0, [sp, #24]
   11fb8:	b	11d38 <__assert_fail@plt+0x4e4>
   11fbc:	movw	r0, #53704	; 0xd1c8
   11fc0:	mov	r1, #1
   11fc4:	movt	r0, #2
   11fc8:	strb	r1, [r0, #1]
   11fcc:	b	11d38 <__assert_fail@plt+0x4e4>
   11fd0:	movw	r0, #53704	; 0xd1c8
   11fd4:	mov	r1, #1
   11fd8:	movt	r0, #2
   11fdc:	strb	r1, [r0]
   11fe0:	b	11d38 <__assert_fail@plt+0x4e4>
   11fe4:	mov	r0, #1
   11fe8:	str	r0, [sp, #20]
   11fec:	b	11d38 <__assert_fail@plt+0x4e4>
   11ff0:	mov	r8, #0
   11ff4:	b	11d38 <__assert_fail@plt+0x4e4>
   11ff8:	mov	r0, #0
   11ffc:	str	r0, [sp, #20]
   12000:	b	11d38 <__assert_fail@plt+0x4e4>
   12004:	movw	r0, #53696	; 0xd1c0
   12008:	movw	r1, #53704	; 0xd1c8
   1200c:	mov	sl, #1
   12010:	movt	r0, #2
   12014:	movt	r1, #2
   12018:	ldr	r0, [r0]
   1201c:	str	r0, [r1, #8]
   12020:	b	11d38 <__assert_fail@plt+0x4e4>
   12024:	movw	r0, #53696	; 0xd1c0
   12028:	movw	r1, #53704	; 0xd1c8
   1202c:	mov	sl, #1
   12030:	movt	r0, #2
   12034:	movt	r1, #2
   12038:	ldr	r0, [r0]
   1203c:	str	r0, [r1, #4]
   12040:	b	11d38 <__assert_fail@plt+0x4e4>
   12044:	movw	r7, #53704	; 0xd1c8
   12048:	movt	r7, #2
   1204c:	ldrb	r0, [r7]
   12050:	cmp	r0, #1
   12054:	bne	1207c <__assert_fail@plt+0x828>
   12058:	ldr	r9, [sp, #24]
   1205c:	ldr	r6, [sp, #16]
   12060:	cmp	r9, #16
   12064:	bne	12094 <__assert_fail@plt+0x840>
   12068:	cmp	r8, #1
   1206c:	beq	12cc8 <__assert_fail@plt+0x1474>
   12070:	mov	r9, #16
   12074:	mov	r0, #0
   12078:	b	120a0 <__assert_fail@plt+0x84c>
   1207c:	ldr	r6, [sp, #16]
   12080:	cmp	r8, #0
   12084:	mov	r9, #16
   12088:	movwne	r8, #1
   1208c:	mov	r0, r8
   12090:	b	120a0 <__assert_fail@plt+0x84c>
   12094:	mov	r0, #1
   12098:	cmp	r8, #0
   1209c:	beq	12cd4 <__assert_fail@plt+0x1480>
   120a0:	movw	r8, #53680	; 0xd1b0
   120a4:	strb	r0, [r7, #2]
   120a8:	mov	r1, #2
   120ac:	cmp	r6, #0
   120b0:	movt	r8, #2
   120b4:	movwne	r1, #1
   120b8:	tst	sl, #1
   120bc:	ldr	r0, [r8]
   120c0:	movwne	r1, #1
   120c4:	sub	r2, r5, r0
   120c8:	cmp	r2, r1
   120cc:	blt	12c14 <__assert_fail@plt+0x13c0>
   120d0:	cmp	r6, #0
   120d4:	beq	12110 <__assert_fail@plt+0x8bc>
   120d8:	mov	r0, #0
   120dc:	add	r1, sp, #28
   120e0:	str	r0, [sp, #28]
   120e4:	mov	r0, r6
   120e8:	bl	19440 <__assert_fail@plt+0x7bec>
   120ec:	cmn	r0, #1
   120f0:	ble	12c5c <__assert_fail@plt+0x1408>
   120f4:	ldr	r0, [sp, #28]
   120f8:	tst	sl, #1
   120fc:	str	r0, [r7, #20]
   12100:	beq	12150 <__assert_fail@plt+0x8fc>
   12104:	movw	r1, #47891	; 0xbb13
   12108:	movt	r1, #1
   1210c:	b	12ca4 <__assert_fail@plt+0x1450>
   12110:	tst	sl, #1
   12114:	beq	12124 <__assert_fail@plt+0x8d0>
   12118:	mov	r0, #0
   1211c:	str	r0, [r7, #20]
   12120:	b	12150 <__assert_fail@plt+0x8fc>
   12124:	add	r1, r0, #1
   12128:	str	r1, [r8]
   1212c:	ldr	r0, [r4, r0, lsl #2]
   12130:	str	r0, [r7, #20]
   12134:	bl	114b8 <is_selinux_enabled@plt>
   12138:	cmp	r0, #1
   1213c:	blt	12150 <__assert_fail@plt+0x8fc>
   12140:	ldr	r0, [r7, #20]
   12144:	bl	11608 <security_check_context@plt>
   12148:	cmn	r0, #1
   1214c:	ble	12cf8 <__assert_fail@plt+0x14a4>
   12150:	ldrb	r0, [r7]
   12154:	ldr	r1, [sp, #20]
   12158:	and	r0, r1, r0
   1215c:	tst	r0, #1
   12160:	beq	121a8 <__assert_fail@plt+0x954>
   12164:	add	r0, r7, #32
   12168:	bl	18aa8 <__assert_fail@plt+0x7254>
   1216c:	cmp	r0, #0
   12170:	str	r0, [r7, #24]
   12174:	bne	121b0 <__assert_fail@plt+0x95c>
   12178:	bl	116d4 <__errno_location@plt>
   1217c:	ldr	r4, [r0]
   12180:	movw	r1, #47937	; 0xbb41
   12184:	mov	r0, #0
   12188:	mov	r2, #5
   1218c:	movt	r1, #1
   12190:	bl	11548 <dcgettext@plt>
   12194:	movw	r1, #50789	; 0xc665
   12198:	mov	r5, r0
   1219c:	mov	r0, #4
   121a0:	movt	r1, #1
   121a4:	b	12c84 <__assert_fail@plt+0x1430>
   121a8:	mov	r0, #0
   121ac:	str	r0, [r7, #24]
   121b0:	ldr	r0, [r8]
   121b4:	orr	r1, r9, #8
   121b8:	mov	r2, #0
   121bc:	add	r0, r4, r0, lsl #2
   121c0:	bl	1a244 <__assert_fail@plt+0x89f0>
   121c4:	str	r0, [sp, #24]
   121c8:	bl	138d8 <__assert_fail@plt+0x2084>
   121cc:	cmp	r0, #0
   121d0:	beq	12b30 <__assert_fail@plt+0x12dc>
   121d4:	mov	r8, r0
   121d8:	mov	r6, #1
   121dc:	b	12370 <__assert_fail@plt+0xb1c>
   121e0:	bl	116d4 <__errno_location@plt>
   121e4:	ldr	r5, [r0]
   121e8:	movw	r1, #48970	; 0xbf4a
   121ec:	mov	r0, #0
   121f0:	mov	r2, #5
   121f4:	movt	r1, #1
   121f8:	bl	11548 <dcgettext@plt>
   121fc:	mov	r4, r0
   12200:	mov	r0, r7
   12204:	bl	18a90 <__assert_fail@plt+0x723c>
   12208:	mov	r3, r0
   1220c:	mov	r0, #0
   12210:	mov	r1, r5
   12214:	mov	r2, r4
   12218:	bl	115fc <error@plt>
   1221c:	movw	r7, #53704	; 0xd1c8
   12220:	mov	r4, #0
   12224:	movt	r7, #2
   12228:	ldrb	r0, [r7]
   1222c:	cmp	r0, #0
   12230:	beq	12b00 <__assert_fail@plt+0x12ac>
   12234:	b	12b10 <__assert_fail@plt+0x12bc>
   12238:	ldr	r0, [sp, #24]
   1223c:	mov	r7, #1
   12240:	mov	r1, r8
   12244:	mov	r2, #1
   12248:	str	r7, [r8, #16]
   1224c:	bl	1516c <__assert_fail@plt+0x3918>
   12250:	b	12b14 <__assert_fail@plt+0x12c0>
   12254:	bl	116d4 <__errno_location@plt>
   12258:	mov	r5, r0
   1225c:	ldr	r4, [r5]
   12260:	mov	r0, r9
   12264:	bl	1165c <context_free@plt>
   12268:	str	r4, [r5]
   1226c:	mov	r4, #0
   12270:	ldrb	r0, [r7]
   12274:	cmp	r0, #0
   12278:	beq	12b00 <__assert_fail@plt+0x12ac>
   1227c:	b	12b10 <__assert_fail@plt+0x12bc>
   12280:	movw	r1, #48471	; 0xbd57
   12284:	mov	r0, #0
   12288:	mov	r2, #5
   1228c:	movt	r1, #1
   12290:	bl	11548 <dcgettext@plt>
   12294:	mov	r5, r0
   12298:	mov	r0, #4
   1229c:	mov	r1, r9
   122a0:	bl	18568 <__assert_fail@plt+0x6d14>
   122a4:	mov	r3, r0
   122a8:	mov	r0, #0
   122ac:	mov	r1, #0
   122b0:	mov	r2, r5
   122b4:	bl	115fc <error@plt>
   122b8:	movw	r1, #48574	; 0xbdbe
   122bc:	mov	r0, #0
   122c0:	mov	r2, #5
   122c4:	mov	r4, #0
   122c8:	movt	r1, #1
   122cc:	bl	11548 <dcgettext@plt>
   122d0:	mov	r2, r0
   122d4:	mov	r0, #0
   122d8:	mov	r1, #0
   122dc:	bl	115fc <error@plt>
   122e0:	ldrb	r0, [r7]
   122e4:	cmp	r0, #0
   122e8:	beq	12b00 <__assert_fail@plt+0x12ac>
   122ec:	b	12b10 <__assert_fail@plt+0x12bc>
   122f0:	movw	r1, #48471	; 0xbd57
   122f4:	mov	r0, #0
   122f8:	mov	r2, #5
   122fc:	movt	r1, #1
   12300:	bl	11548 <dcgettext@plt>
   12304:	mov	r5, r0
   12308:	mov	r0, #4
   1230c:	mov	r1, r9
   12310:	bl	18568 <__assert_fail@plt+0x6d14>
   12314:	mov	r3, r0
   12318:	mov	r0, #0
   1231c:	mov	r1, #0
   12320:	mov	r2, r5
   12324:	bl	115fc <error@plt>
   12328:	movw	r1, #48574	; 0xbdbe
   1232c:	mov	r0, #0
   12330:	mov	r2, #5
   12334:	mov	r7, #0
   12338:	movt	r1, #1
   1233c:	bl	11548 <dcgettext@plt>
   12340:	mov	r2, r0
   12344:	mov	r0, #0
   12348:	mov	r1, #0
   1234c:	bl	115fc <error@plt>
   12350:	ldr	r4, [sp, #24]
   12354:	mov	r1, r8
   12358:	mov	r2, #4
   1235c:	mov	r0, r4
   12360:	bl	1516c <__assert_fail@plt+0x3918>
   12364:	mov	r0, r4
   12368:	bl	138d8 <__assert_fail@plt+0x2084>
   1236c:	b	12b14 <__assert_fail@plt+0x12c0>
   12370:	ldr	sl, [r8, #24]
   12374:	ldr	r9, [r8, #28]
   12378:	ldrh	r0, [r8, #56]	; 0x38
   1237c:	add	r4, r8, #64	; 0x40
   12380:	sub	r1, r0, #1
   12384:	cmp	r1, #9
   12388:	bhi	12778 <__assert_fail@plt+0xf24>
   1238c:	add	r2, pc, #4
   12390:	mov	r7, #1
   12394:	ldr	pc, [r2, r1, lsl #2]
   12398:	andeq	r2, r1, r0, asr #7
   1239c:	strdeq	r2, [r1], -r0
   123a0:	andeq	r2, r1, r0, lsr #11
   123a4:	andeq	r2, r1, r8, lsl #9
   123a8:	andeq	r2, r1, r0, lsr #11
   123ac:	andeq	r2, r1, r0, asr r5
   123b0:	andeq	r2, r1, ip, ror #10
   123b4:	andeq	r2, r1, r0, lsr #11
   123b8:	andeq	r2, r1, r0, lsr #11
   123bc:	muleq	r1, ip, r4
   123c0:	movw	r7, #53704	; 0xd1c8
   123c4:	movt	r7, #2
   123c8:	ldrb	r0, [r7]
   123cc:	cmp	r0, #1
   123d0:	bne	125d4 <__assert_fail@plt+0xd80>
   123d4:	ldr	r0, [r7, #24]
   123d8:	mov	r7, #1
   123dc:	cmp	r0, #0
   123e0:	beq	12b14 <__assert_fail@plt+0x12c0>
   123e4:	ldrd	r2, [r0]
   123e8:	ldr	r1, [r8, #160]	; 0xa0
   123ec:	ldr	r5, [r8, #164]	; 0xa4
   123f0:	eor	r3, r5, r3
   123f4:	eor	r1, r1, r2
   123f8:	orrs	r1, r1, r3
   123fc:	bne	12b14 <__assert_fail@plt+0x12c0>
   12400:	ldrd	r0, [r0, #8]
   12404:	ldrd	r2, [r4]
   12408:	eor	r1, r3, r1
   1240c:	eor	r0, r2, r0
   12410:	orrs	r0, r0, r1
   12414:	bne	12b14 <__assert_fail@plt+0x12c0>
   12418:	movw	r4, #50789	; 0xc665
   1241c:	mov	r0, r9
   12420:	movt	r4, #1
   12424:	mov	r1, r4
   12428:	bl	114c4 <strcmp@plt>
   1242c:	cmp	r0, #0
   12430:	beq	122f0 <__assert_fail@plt+0xa9c>
   12434:	movw	r1, #48516	; 0xbd84
   12438:	mov	r0, #0
   1243c:	mov	r2, #5
   12440:	movt	r1, #1
   12444:	bl	11548 <dcgettext@plt>
   12448:	mov	r5, r0
   1244c:	mov	r0, #0
   12450:	mov	r1, #4
   12454:	mov	r2, r9
   12458:	bl	184c0 <__assert_fail@plt+0x6c6c>
   1245c:	mov	r7, r0
   12460:	mov	r0, #1
   12464:	mov	r1, #4
   12468:	mov	r2, r4
   1246c:	bl	184c0 <__assert_fail@plt+0x6c6c>
   12470:	str	r0, [sp]
   12474:	mov	r0, #0
   12478:	mov	r1, #0
   1247c:	mov	r2, r5
   12480:	mov	r3, r7
   12484:	b	12324 <__assert_fail@plt+0xad0>
   12488:	ldr	r5, [r8, #32]
   1248c:	movw	r1, #48640	; 0xbe00
   12490:	mov	r0, #0
   12494:	movt	r1, #1
   12498:	b	124c4 <__assert_fail@plt+0xc70>
   1249c:	ldr	r0, [r8, #48]	; 0x30
   124a0:	cmp	r0, #0
   124a4:	bne	124b4 <__assert_fail@plt+0xc60>
   124a8:	ldr	r0, [r8, #16]
   124ac:	cmp	r0, #0
   124b0:	beq	12238 <__assert_fail@plt+0x9e4>
   124b4:	ldr	r5, [r8, #32]
   124b8:	movw	r1, #48623	; 0xbdef
   124bc:	mov	r0, #0
   124c0:	movt	r1, #1
   124c4:	mov	r2, #5
   124c8:	bl	11548 <dcgettext@plt>
   124cc:	mov	r7, r0
   124d0:	mov	r0, #4
   124d4:	mov	r1, r9
   124d8:	bl	18568 <__assert_fail@plt+0x6d14>
   124dc:	mov	r3, r0
   124e0:	mov	r0, #0
   124e4:	mov	r1, r5
   124e8:	mov	r2, r7
   124ec:	b	12594 <__assert_fail@plt+0xd40>
   124f0:	ldr	r0, [sp, #24]
   124f4:	mov	r1, r8
   124f8:	bl	1a290 <__assert_fail@plt+0x8a3c>
   124fc:	movw	r7, #53704	; 0xd1c8
   12500:	cmp	r0, #0
   12504:	movt	r7, #2
   12508:	beq	125d4 <__assert_fail@plt+0xd80>
   1250c:	movw	r1, #48665	; 0xbe19
   12510:	mov	r0, #0
   12514:	mov	r2, #5
   12518:	mov	r7, #0
   1251c:	movt	r1, #1
   12520:	bl	11548 <dcgettext@plt>
   12524:	mov	r5, r0
   12528:	mov	r0, #0
   1252c:	mov	r1, #3
   12530:	mov	r2, r9
   12534:	bl	187e4 <__assert_fail@plt+0x6f90>
   12538:	mov	r3, r0
   1253c:	mov	r0, #0
   12540:	mov	r1, #0
   12544:	mov	r2, r5
   12548:	bl	115fc <error@plt>
   1254c:	b	12b14 <__assert_fail@plt+0x12c0>
   12550:	movw	r0, #53704	; 0xd1c8
   12554:	mov	r7, #1
   12558:	movt	r0, #2
   1255c:	ldrb	r0, [r0]
   12560:	cmp	r0, #0
   12564:	bne	125a8 <__assert_fail@plt+0xd54>
   12568:	b	12b14 <__assert_fail@plt+0x12c0>
   1256c:	ldr	r5, [r8, #32]
   12570:	mov	r0, #0
   12574:	mov	r1, #3
   12578:	mov	r2, r9
   1257c:	bl	187e4 <__assert_fail@plt+0x6f90>
   12580:	movw	r2, #49375	; 0xc0df
   12584:	mov	r3, r0
   12588:	mov	r0, #0
   1258c:	mov	r1, r5
   12590:	movt	r2, #1
   12594:	bl	115fc <error@plt>
   12598:	ldrh	r0, [r8, #56]	; 0x38
   1259c:	mov	r7, #0
   125a0:	cmp	r0, #6
   125a4:	bne	125c0 <__assert_fail@plt+0xd6c>
   125a8:	cmp	r7, #0
   125ac:	movwne	r0, #53704	; 0xd1c8
   125b0:	movtne	r0, #2
   125b4:	ldrne	r0, [r0, #24]
   125b8:	cmpne	r0, #0
   125bc:	bne	126c4 <__assert_fail@plt+0xe70>
   125c0:	cmp	r7, #0
   125c4:	movw	r7, #53704	; 0xd1c8
   125c8:	mov	r4, #0
   125cc:	movt	r7, #2
   125d0:	beq	12af4 <__assert_fail@plt+0x12a0>
   125d4:	ldrb	r0, [r7, #1]
   125d8:	cmp	r0, #1
   125dc:	bne	12614 <__assert_fail@plt+0xdc0>
   125e0:	movw	r1, #48851	; 0xbed3
   125e4:	mov	r0, #0
   125e8:	mov	r2, #5
   125ec:	movt	r1, #1
   125f0:	bl	11548 <dcgettext@plt>
   125f4:	mov	r5, r0
   125f8:	mov	r0, #4
   125fc:	mov	r1, r9
   12600:	bl	18568 <__assert_fail@plt+0x6d14>
   12604:	mov	r2, r0
   12608:	mov	r0, #1
   1260c:	mov	r1, r5
   12610:	bl	11704 <__printf_chk@plt>
   12614:	ldr	r0, [sp, #24]
   12618:	ldr	r5, [r0, #32]
   1261c:	mov	r0, #0
   12620:	str	r0, [sp, #32]
   12624:	mov	r0, r7
   12628:	ldr	r7, [r7, #20]
   1262c:	cmp	r7, #0
   12630:	beq	1265c <__assert_fail@plt+0xe08>
   12634:	ldrb	r0, [r0, #2]
   12638:	cmp	r0, #0
   1263c:	beq	12a44 <__assert_fail@plt+0x11f0>
   12640:	mov	r0, r5
   12644:	mov	r1, sl
   12648:	mov	r2, r7
   1264c:	bl	18fa0 <__assert_fail@plt+0x774c>
   12650:	cmp	r0, #0
   12654:	bne	12a5c <__assert_fail@plt+0x1208>
   12658:	b	12ac8 <__assert_fail@plt+0x1274>
   1265c:	ldrb	r0, [r0, #2]
   12660:	cmp	r0, #0
   12664:	beq	12788 <__assert_fail@plt+0xf34>
   12668:	mov	r0, r5
   1266c:	mov	r1, sl
   12670:	add	r2, sp, #32
   12674:	bl	18b00 <__assert_fail@plt+0x72ac>
   12678:	cmn	r0, #1
   1267c:	bgt	127a0 <__assert_fail@plt+0xf4c>
   12680:	bl	116d4 <__errno_location@plt>
   12684:	ldr	r7, [r0]
   12688:	cmp	r7, #61	; 0x3d
   1268c:	beq	127a0 <__assert_fail@plt+0xf4c>
   12690:	movw	r1, #47834	; 0xbada
   12694:	mov	r0, #0
   12698:	mov	r2, #5
   1269c:	movt	r1, #1
   126a0:	bl	11548 <dcgettext@plt>
   126a4:	mov	r5, r0
   126a8:	mov	r0, #4
   126ac:	mov	r1, sl
   126b0:	bl	18568 <__assert_fail@plt+0x6d14>
   126b4:	mov	r3, r0
   126b8:	mov	r0, #0
   126bc:	mov	r1, r7
   126c0:	b	129f4 <__assert_fail@plt+0x11a0>
   126c4:	ldrd	r2, [r0]
   126c8:	ldr	r1, [r8, #160]	; 0xa0
   126cc:	ldr	r5, [r8, #164]	; 0xa4
   126d0:	movw	r7, #53704	; 0xd1c8
   126d4:	movt	r7, #2
   126d8:	eor	r3, r5, r3
   126dc:	eor	r1, r1, r2
   126e0:	orrs	r1, r1, r3
   126e4:	bne	125d4 <__assert_fail@plt+0xd80>
   126e8:	ldrd	r0, [r0, #8]
   126ec:	ldrd	r2, [r4]
   126f0:	eor	r1, r3, r1
   126f4:	eor	r0, r2, r0
   126f8:	orrs	r0, r0, r1
   126fc:	bne	125d4 <__assert_fail@plt+0xd80>
   12700:	movw	r4, #50789	; 0xc665
   12704:	mov	r0, r9
   12708:	movt	r4, #1
   1270c:	mov	r1, r4
   12710:	bl	114c4 <strcmp@plt>
   12714:	cmp	r0, #0
   12718:	beq	12280 <__assert_fail@plt+0xa2c>
   1271c:	movw	r1, #48516	; 0xbd84
   12720:	mov	r0, #0
   12724:	mov	r2, #5
   12728:	movt	r1, #1
   1272c:	bl	11548 <dcgettext@plt>
   12730:	mov	r5, r0
   12734:	mov	r0, #0
   12738:	mov	r1, #4
   1273c:	mov	r2, r9
   12740:	bl	184c0 <__assert_fail@plt+0x6c6c>
   12744:	mov	r7, r0
   12748:	mov	r0, #1
   1274c:	mov	r1, #4
   12750:	mov	r2, r4
   12754:	bl	184c0 <__assert_fail@plt+0x6c6c>
   12758:	mov	r3, r7
   1275c:	movw	r7, #53704	; 0xd1c8
   12760:	str	r0, [sp]
   12764:	mov	r0, #0
   12768:	mov	r1, #0
   1276c:	mov	r2, r5
   12770:	movt	r7, #2
   12774:	b	122b4 <__assert_fail@plt+0xa60>
   12778:	mov	r7, #1
   1277c:	cmp	r0, #6
   12780:	beq	125a8 <__assert_fail@plt+0xd54>
   12784:	b	125c0 <__assert_fail@plt+0xd6c>
   12788:	mov	r0, r5
   1278c:	mov	r1, sl
   12790:	add	r2, sp, #32
   12794:	bl	18d50 <__assert_fail@plt+0x74fc>
   12798:	cmn	r0, #1
   1279c:	ble	12680 <__assert_fail@plt+0xe2c>
   127a0:	ldr	r7, [sp, #32]
   127a4:	cmp	r7, #0
   127a8:	beq	129c4 <__assert_fail@plt+0x1170>
   127ac:	mov	r0, r7
   127b0:	bl	11524 <context_new@plt>
   127b4:	cmp	r0, #0
   127b8:	beq	121e0 <__assert_fail@plt+0x98c>
   127bc:	movw	r7, #53704	; 0xd1c8
   127c0:	mov	r9, r0
   127c4:	mov	r0, #1
   127c8:	movt	r7, #2
   127cc:	str	r0, [sp, #20]
   127d0:	str	r9, [sp, #16]
   127d4:	ldr	r1, [r7, #4]
   127d8:	cmp	r1, #0
   127dc:	beq	12850 <__assert_fail@plt+0xffc>
   127e0:	mov	r0, r9
   127e4:	bl	11698 <context_user_set@plt>
   127e8:	cmp	r0, #0
   127ec:	beq	12850 <__assert_fail@plt+0xffc>
   127f0:	bl	116d4 <__errno_location@plt>
   127f4:	ldr	r4, [r0]
   127f8:	movw	r1, #49008	; 0xbf70
   127fc:	mov	r0, #0
   12800:	mov	r2, #5
   12804:	str	r0, [sp, #20]
   12808:	mov	r0, #0
   1280c:	movt	r1, #1
   12810:	bl	11548 <dcgettext@plt>
   12814:	mov	r7, r0
   12818:	movw	r0, #53704	; 0xd1c8
   1281c:	movt	r0, #2
   12820:	ldr	r0, [r0, #4]
   12824:	bl	18a90 <__assert_fail@plt+0x723c>
   12828:	ldr	r9, [sp, #16]
   1282c:	movw	r3, #48396	; 0xbd0c
   12830:	str	r0, [sp]
   12834:	mov	r2, r7
   12838:	movw	r7, #53704	; 0xd1c8
   1283c:	mov	r0, #0
   12840:	mov	r1, r4
   12844:	movt	r3, #1
   12848:	movt	r7, #2
   1284c:	bl	115fc <error@plt>
   12850:	ldr	r1, [r7, #16]
   12854:	cmp	r1, #0
   12858:	beq	128cc <__assert_fail@plt+0x1078>
   1285c:	mov	r0, r9
   12860:	bl	117e8 <context_range_set@plt>
   12864:	cmp	r0, #0
   12868:	beq	128cc <__assert_fail@plt+0x1078>
   1286c:	bl	116d4 <__errno_location@plt>
   12870:	ldr	r4, [r0]
   12874:	movw	r1, #49008	; 0xbf70
   12878:	mov	r0, #0
   1287c:	mov	r2, #5
   12880:	str	r0, [sp, #20]
   12884:	mov	r0, #0
   12888:	movt	r1, #1
   1288c:	bl	11548 <dcgettext@plt>
   12890:	mov	r7, r0
   12894:	movw	r0, #53704	; 0xd1c8
   12898:	movt	r0, #2
   1289c:	ldr	r0, [r0, #16]
   128a0:	bl	18a90 <__assert_fail@plt+0x723c>
   128a4:	ldr	r9, [sp, #16]
   128a8:	movw	r3, #48411	; 0xbd1b
   128ac:	str	r0, [sp]
   128b0:	mov	r2, r7
   128b4:	movw	r7, #53704	; 0xd1c8
   128b8:	mov	r0, #0
   128bc:	mov	r1, r4
   128c0:	movt	r3, #1
   128c4:	movt	r7, #2
   128c8:	bl	115fc <error@plt>
   128cc:	ldr	r1, [r7, #8]
   128d0:	cmp	r1, #0
   128d4:	beq	12948 <__assert_fail@plt+0x10f4>
   128d8:	mov	r0, r9
   128dc:	bl	1153c <context_role_set@plt>
   128e0:	cmp	r0, #0
   128e4:	beq	12948 <__assert_fail@plt+0x10f4>
   128e8:	bl	116d4 <__errno_location@plt>
   128ec:	ldr	r4, [r0]
   128f0:	movw	r1, #49008	; 0xbf70
   128f4:	mov	r0, #0
   128f8:	mov	r2, #5
   128fc:	str	r0, [sp, #20]
   12900:	mov	r0, #0
   12904:	movt	r1, #1
   12908:	bl	11548 <dcgettext@plt>
   1290c:	mov	r7, r0
   12910:	movw	r0, #53704	; 0xd1c8
   12914:	movt	r0, #2
   12918:	ldr	r0, [r0, #8]
   1291c:	bl	18a90 <__assert_fail@plt+0x723c>
   12920:	ldr	r9, [sp, #16]
   12924:	movw	r3, #48401	; 0xbd11
   12928:	str	r0, [sp]
   1292c:	mov	r2, r7
   12930:	movw	r7, #53704	; 0xd1c8
   12934:	mov	r0, #0
   12938:	mov	r1, r4
   1293c:	movt	r3, #1
   12940:	movt	r7, #2
   12944:	bl	115fc <error@plt>
   12948:	ldr	r1, [r7, #12]
   1294c:	cmp	r1, #0
   12950:	beq	129fc <__assert_fail@plt+0x11a8>
   12954:	mov	r0, r9
   12958:	bl	11554 <context_type_set@plt>
   1295c:	cmp	r0, #0
   12960:	beq	129fc <__assert_fail@plt+0x11a8>
   12964:	bl	116d4 <__errno_location@plt>
   12968:	ldr	r4, [r0]
   1296c:	movw	r1, #49008	; 0xbf70
   12970:	mov	r5, r0
   12974:	mov	r0, #0
   12978:	mov	r2, #5
   1297c:	movt	r1, #1
   12980:	bl	11548 <dcgettext@plt>
   12984:	mov	r7, r0
   12988:	movw	r0, #53704	; 0xd1c8
   1298c:	movt	r0, #2
   12990:	ldr	r0, [r0, #12]
   12994:	bl	18a90 <__assert_fail@plt+0x723c>
   12998:	ldr	r9, [sp, #16]
   1299c:	movw	r3, #48406	; 0xbd16
   129a0:	str	r0, [sp]
   129a4:	mov	r2, r7
   129a8:	movw	r7, #53704	; 0xd1c8
   129ac:	mov	r0, #0
   129b0:	mov	r1, r4
   129b4:	movt	r3, #1
   129b8:	movt	r7, #2
   129bc:	bl	115fc <error@plt>
   129c0:	b	1225c <__assert_fail@plt+0xa08>
   129c4:	movw	r1, #48884	; 0xbef4
   129c8:	mov	r0, #0
   129cc:	mov	r2, #5
   129d0:	movt	r1, #1
   129d4:	bl	11548 <dcgettext@plt>
   129d8:	mov	r5, r0
   129dc:	mov	r0, #4
   129e0:	mov	r1, sl
   129e4:	bl	18568 <__assert_fail@plt+0x6d14>
   129e8:	mov	r3, r0
   129ec:	mov	r0, #0
   129f0:	mov	r1, #0
   129f4:	mov	r2, r5
   129f8:	b	12218 <__assert_fail@plt+0x9c4>
   129fc:	ldr	r0, [sp, #20]
   12a00:	cmp	r0, #0
   12a04:	beq	12254 <__assert_fail@plt+0xa00>
   12a08:	mov	r0, r9
   12a0c:	bl	117f4 <context_str@plt>
   12a10:	ldr	r1, [sp, #32]
   12a14:	mov	r7, r0
   12a18:	cmp	r1, #0
   12a1c:	beq	12a30 <__assert_fail@plt+0x11dc>
   12a20:	mov	r0, r7
   12a24:	bl	114c4 <strcmp@plt>
   12a28:	cmp	r0, #0
   12a2c:	beq	12ac8 <__assert_fail@plt+0x1274>
   12a30:	movw	r0, #53704	; 0xd1c8
   12a34:	movt	r0, #2
   12a38:	ldrb	r0, [r0, #2]
   12a3c:	cmp	r0, #0
   12a40:	bne	12640 <__assert_fail@plt+0xdec>
   12a44:	mov	r0, r5
   12a48:	mov	r1, sl
   12a4c:	mov	r2, r7
   12a50:	bl	191f0 <__assert_fail@plt+0x799c>
   12a54:	cmp	r0, #0
   12a58:	beq	12ac8 <__assert_fail@plt+0x1274>
   12a5c:	bl	116d4 <__errno_location@plt>
   12a60:	ldr	r0, [r0]
   12a64:	movw	r1, #48933	; 0xbf25
   12a68:	mov	r2, #5
   12a6c:	movt	r1, #1
   12a70:	str	r0, [sp, #20]
   12a74:	mov	r0, #0
   12a78:	bl	11548 <dcgettext@plt>
   12a7c:	mov	r5, r6
   12a80:	mov	r6, r0
   12a84:	mov	r0, #0
   12a88:	mov	r1, #4
   12a8c:	mov	r2, sl
   12a90:	bl	184c0 <__assert_fail@plt+0x6c6c>
   12a94:	mov	sl, r0
   12a98:	mov	r0, #1
   12a9c:	mov	r1, r7
   12aa0:	mov	r4, #1
   12aa4:	bl	18a80 <__assert_fail@plt+0x722c>
   12aa8:	ldr	r1, [sp, #20]
   12aac:	str	r0, [sp]
   12ab0:	mov	r2, r6
   12ab4:	mov	r0, #0
   12ab8:	mov	r3, sl
   12abc:	mov	r6, r5
   12ac0:	bl	115fc <error@plt>
   12ac4:	b	12acc <__assert_fail@plt+0x1278>
   12ac8:	mov	r4, #0
   12acc:	movw	r7, #53704	; 0xd1c8
   12ad0:	movt	r7, #2
   12ad4:	ldr	r0, [r7, #20]
   12ad8:	cmp	r0, #0
   12adc:	bne	12af0 <__assert_fail@plt+0x129c>
   12ae0:	mov	r0, r9
   12ae4:	bl	1165c <context_free@plt>
   12ae8:	ldr	r0, [sp, #32]
   12aec:	bl	117d0 <freecon@plt>
   12af0:	eor	r4, r4, #1
   12af4:	ldrb	r0, [r7]
   12af8:	cmp	r0, #0
   12afc:	bne	12b10 <__assert_fail@plt+0x12bc>
   12b00:	ldr	r0, [sp, #24]
   12b04:	mov	r1, r8
   12b08:	mov	r2, #4
   12b0c:	bl	1516c <__assert_fail@plt+0x3918>
   12b10:	mov	r7, r4
   12b14:	ldr	r0, [sp, #24]
   12b18:	and	r6, r6, r7
   12b1c:	bl	138d8 <__assert_fail@plt+0x2084>
   12b20:	mov	r8, r0
   12b24:	cmp	r0, #0
   12b28:	bne	12370 <__assert_fail@plt+0xb1c>
   12b2c:	b	12b34 <__assert_fail@plt+0x12e0>
   12b30:	mov	r6, #1
   12b34:	bl	116d4 <__errno_location@plt>
   12b38:	ldr	r4, [r0]
   12b3c:	mov	r5, r0
   12b40:	cmp	r4, #0
   12b44:	beq	12b70 <__assert_fail@plt+0x131c>
   12b48:	movw	r1, #48438	; 0xbd36
   12b4c:	mov	r0, #0
   12b50:	mov	r2, #5
   12b54:	mov	r6, #0
   12b58:	movt	r1, #1
   12b5c:	bl	11548 <dcgettext@plt>
   12b60:	mov	r2, r0
   12b64:	mov	r0, #0
   12b68:	mov	r1, r4
   12b6c:	bl	115fc <error@plt>
   12b70:	ldr	r0, [sp, #24]
   12b74:	bl	13730 <__assert_fail@plt+0x1edc>
   12b78:	cmp	r0, #0
   12b7c:	beq	12bac <__assert_fail@plt+0x1358>
   12b80:	ldr	r4, [r5]
   12b84:	movw	r1, #48454	; 0xbd46
   12b88:	mov	r0, #0
   12b8c:	mov	r2, #5
   12b90:	mov	r6, #0
   12b94:	movt	r1, #1
   12b98:	bl	11548 <dcgettext@plt>
   12b9c:	mov	r2, r0
   12ba0:	mov	r0, #0
   12ba4:	mov	r1, r4
   12ba8:	bl	115fc <error@plt>
   12bac:	eor	r0, r6, #1
   12bb0:	sub	sp, fp, #28
   12bb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bb8:	movw	r0, #53600	; 0xd160
   12bbc:	movw	r2, #47720	; 0xba68
   12bc0:	mov	r1, #0
   12bc4:	movw	r7, #47706	; 0xba5a
   12bc8:	movt	r0, #2
   12bcc:	movt	r2, #1
   12bd0:	str	r1, [sp, #8]
   12bd4:	movw	r1, #47647	; 0xba1f
   12bd8:	movt	r7, #1
   12bdc:	ldr	r3, [r0]
   12be0:	movw	r0, #53692	; 0xd1bc
   12be4:	str	r2, [sp, #4]
   12be8:	movw	r2, #47692	; 0xba4c
   12bec:	movt	r1, #1
   12bf0:	str	r7, [sp]
   12bf4:	movt	r0, #2
   12bf8:	movt	r2, #1
   12bfc:	ldr	r0, [r0]
   12c00:	bl	19a6c <__assert_fail@plt+0x8218>
   12c04:	mov	r0, #0
   12c08:	bl	1168c <exit@plt>
   12c0c:	mov	r0, #0
   12c10:	bl	11950 <__assert_fail@plt+0xfc>
   12c14:	cmp	r0, r5
   12c18:	bge	12c9c <__assert_fail@plt+0x1448>
   12c1c:	movw	r1, #47809	; 0xbac1
   12c20:	mov	r0, #0
   12c24:	mov	r2, #5
   12c28:	movt	r1, #1
   12c2c:	bl	11548 <dcgettext@plt>
   12c30:	mov	r6, r0
   12c34:	add	r0, r4, r5, lsl #2
   12c38:	ldr	r0, [r0, #-4]
   12c3c:	bl	18a90 <__assert_fail@plt+0x723c>
   12c40:	mov	r3, r0
   12c44:	mov	r0, #0
   12c48:	mov	r1, #0
   12c4c:	mov	r2, r6
   12c50:	bl	115fc <error@plt>
   12c54:	mov	r0, #1
   12c58:	bl	11950 <__assert_fail@plt+0xfc>
   12c5c:	bl	116d4 <__errno_location@plt>
   12c60:	ldr	r4, [r0]
   12c64:	movw	r1, #47834	; 0xbada
   12c68:	mov	r0, #0
   12c6c:	mov	r2, #5
   12c70:	movt	r1, #1
   12c74:	bl	11548 <dcgettext@plt>
   12c78:	mov	r5, r0
   12c7c:	mov	r0, #4
   12c80:	mov	r1, r6
   12c84:	bl	18568 <__assert_fail@plt+0x6d14>
   12c88:	mov	r3, r0
   12c8c:	mov	r0, #1
   12c90:	mov	r1, r4
   12c94:	mov	r2, r5
   12c98:	bl	115fc <error@plt>
   12c9c:	movw	r1, #47793	; 0xbab1
   12ca0:	movt	r1, #1
   12ca4:	mov	r0, #0
   12ca8:	mov	r2, #5
   12cac:	bl	11548 <dcgettext@plt>
   12cb0:	mov	r2, r0
   12cb4:	mov	r0, #0
   12cb8:	mov	r1, #0
   12cbc:	bl	115fc <error@plt>
   12cc0:	mov	r0, #1
   12cc4:	bl	11950 <__assert_fail@plt+0xfc>
   12cc8:	movw	r1, #47733	; 0xba75
   12ccc:	movt	r1, #1
   12cd0:	b	12cdc <__assert_fail@plt+0x1488>
   12cd4:	movw	r1, #47775	; 0xba9f
   12cd8:	movt	r1, #1
   12cdc:	mov	r0, #0
   12ce0:	mov	r2, #5
   12ce4:	bl	11548 <dcgettext@plt>
   12ce8:	mov	r2, r0
   12cec:	mov	r0, #1
   12cf0:	mov	r1, #0
   12cf4:	bl	115fc <error@plt>
   12cf8:	bl	116d4 <__errno_location@plt>
   12cfc:	ldr	r4, [r0]
   12d00:	movw	r1, #47871	; 0xbaff
   12d04:	mov	r0, #0
   12d08:	mov	r2, #5
   12d0c:	movt	r1, #1
   12d10:	bl	11548 <dcgettext@plt>
   12d14:	mov	r5, r0
   12d18:	ldr	r0, [r7, #20]
   12d1c:	bl	18a90 <__assert_fail@plt+0x723c>
   12d20:	b	12c88 <__assert_fail@plt+0x1434>
   12d24:	movw	r1, #53752	; 0xd1f8
   12d28:	movt	r1, #2
   12d2c:	str	r0, [r1, #4]
   12d30:	bx	lr
   12d34:	movw	r1, #53752	; 0xd1f8
   12d38:	movt	r1, #2
   12d3c:	strb	r0, [r1]
   12d40:	bx	lr
   12d44:	push	{r4, r5, r6, sl, fp, lr}
   12d48:	add	fp, sp, #16
   12d4c:	sub	sp, sp, #8
   12d50:	movw	r0, #53692	; 0xd1bc
   12d54:	movt	r0, #2
   12d58:	ldr	r0, [r0]
   12d5c:	bl	1a4d4 <__assert_fail@plt+0x8c80>
   12d60:	cmp	r0, #0
   12d64:	beq	12d8c <__assert_fail@plt+0x1538>
   12d68:	movw	r5, #53752	; 0xd1f8
   12d6c:	movt	r5, #2
   12d70:	ldrb	r0, [r5]
   12d74:	cmp	r0, #0
   12d78:	beq	12db8 <__assert_fail@plt+0x1564>
   12d7c:	bl	116d4 <__errno_location@plt>
   12d80:	ldr	r0, [r0]
   12d84:	cmp	r0, #32
   12d88:	bne	12db8 <__assert_fail@plt+0x1564>
   12d8c:	movw	r0, #53688	; 0xd1b8
   12d90:	movt	r0, #2
   12d94:	ldr	r0, [r0]
   12d98:	bl	1a4d4 <__assert_fail@plt+0x8c80>
   12d9c:	cmp	r0, #0
   12da0:	subeq	sp, fp, #16
   12da4:	popeq	{r4, r5, r6, sl, fp, pc}
   12da8:	movw	r0, #53604	; 0xd164
   12dac:	movt	r0, #2
   12db0:	ldr	r0, [r0]
   12db4:	bl	11500 <_exit@plt>
   12db8:	movw	r1, #49359	; 0xc0cf
   12dbc:	mov	r0, #0
   12dc0:	mov	r2, #5
   12dc4:	movt	r1, #1
   12dc8:	bl	11548 <dcgettext@plt>
   12dcc:	ldr	r6, [r5, #4]
   12dd0:	mov	r4, r0
   12dd4:	bl	116d4 <__errno_location@plt>
   12dd8:	ldr	r5, [r0]
   12ddc:	cmp	r6, #0
   12de0:	bne	12dfc <__assert_fail@plt+0x15a8>
   12de4:	movw	r2, #49375	; 0xc0df
   12de8:	mov	r0, #0
   12dec:	mov	r1, r5
   12df0:	mov	r3, r4
   12df4:	movt	r2, #1
   12df8:	b	12e1c <__assert_fail@plt+0x15c8>
   12dfc:	mov	r0, r6
   12e00:	bl	18708 <__assert_fail@plt+0x6eb4>
   12e04:	movw	r2, #49371	; 0xc0db
   12e08:	mov	r3, r0
   12e0c:	str	r4, [sp]
   12e10:	mov	r0, #0
   12e14:	mov	r1, r5
   12e18:	movt	r2, #1
   12e1c:	bl	115fc <error@plt>
   12e20:	movw	r0, #53604	; 0xd164
   12e24:	movt	r0, #2
   12e28:	ldr	r0, [r0]
   12e2c:	bl	11500 <_exit@plt>
   12e30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e34:	add	fp, sp, #28
   12e38:	sub	sp, sp, #28
   12e3c:	cmp	r1, #4096	; 0x1000
   12e40:	bcs	12e5c <__assert_fail@plt+0x1608>
   12e44:	mov	sl, r0
   12e48:	and	r0, r1, #516	; 0x204
   12e4c:	mov	r6, r1
   12e50:	cmp	r0, #516	; 0x204
   12e54:	tstne	r6, #18
   12e58:	bne	12e78 <__assert_fail@plt+0x1624>
   12e5c:	bl	116d4 <__errno_location@plt>
   12e60:	mov	r1, #22
   12e64:	mov	r4, #0
   12e68:	str	r1, [r0]
   12e6c:	mov	r0, r4
   12e70:	sub	sp, fp, #28
   12e74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e78:	mov	r0, #1
   12e7c:	mov	r1, #96	; 0x60
   12e80:	mov	r5, r2
   12e84:	bl	1a2c0 <__assert_fail@plt+0x8a6c>
   12e88:	cmp	r0, #0
   12e8c:	beq	13448 <__assert_fail@plt+0x1bf4>
   12e90:	mov	r4, r0
   12e94:	mvn	r0, #99	; 0x63
   12e98:	tst	r6, #2
   12e9c:	mov	r1, r6
   12ea0:	str	r0, [r4, #32]
   12ea4:	bic	r0, r6, #516	; 0x204
   12ea8:	str	r5, [r4, #44]	; 0x2c
   12eac:	str	r4, [sp, #24]
   12eb0:	orrne	r1, r0, #4
   12eb4:	str	r1, [r4, #48]	; 0x30
   12eb8:	ldr	r0, [sl]
   12ebc:	cmp	r0, #0
   12ec0:	beq	12f24 <__assert_fail@plt+0x16d0>
   12ec4:	add	r7, sl, #4
   12ec8:	mov	r4, #0
   12ecc:	bl	116b0 <strlen@plt>
   12ed0:	cmp	r0, r4
   12ed4:	movhi	r4, r0
   12ed8:	ldr	r0, [r7], #4
   12edc:	cmp	r0, #0
   12ee0:	bne	12ecc <__assert_fail@plt+0x1678>
   12ee4:	add	r0, r4, #1
   12ee8:	ldr	r4, [sp, #24]
   12eec:	cmp	r0, #4096	; 0x1000
   12ef0:	movls	r0, #4096	; 0x1000
   12ef4:	ldr	r1, [r4, #36]	; 0x24
   12ef8:	add	r0, r0, #256	; 0x100
   12efc:	adds	r1, r0, r1
   12f00:	bcc	12f38 <__assert_fail@plt+0x16e4>
   12f04:	ldr	r0, [r4, #24]
   12f08:	bl	1a978 <__assert_fail@plt+0x9124>
   12f0c:	mov	r0, #0
   12f10:	str	r0, [r4, #24]
   12f14:	bl	116d4 <__errno_location@plt>
   12f18:	mov	r1, #36	; 0x24
   12f1c:	str	r1, [r0]
   12f20:	b	13440 <__assert_fail@plt+0x1bec>
   12f24:	mov	r0, #4096	; 0x1000
   12f28:	ldr	r1, [r4, #36]	; 0x24
   12f2c:	add	r0, r0, #256	; 0x100
   12f30:	adds	r1, r0, r1
   12f34:	bcs	12f04 <__assert_fail@plt+0x16b0>
   12f38:	str	r1, [r4, #36]	; 0x24
   12f3c:	ldr	r0, [r4, #24]
   12f40:	bl	1a344 <__assert_fail@plt+0x8af0>
   12f44:	cmp	r0, #0
   12f48:	beq	12fac <__assert_fail@plt+0x1758>
   12f4c:	str	r0, [r4, #24]
   12f50:	ldr	r0, [sl]
   12f54:	cmp	r0, #0
   12f58:	beq	12fc0 <__assert_fail@plt+0x176c>
   12f5c:	mov	r0, #176	; 0xb0
   12f60:	bl	1a314 <__assert_fail@plt+0x8ac0>
   12f64:	cmp	r0, #0
   12f68:	beq	13438 <__assert_fail@plt+0x1be4>
   12f6c:	ldr	r1, [r4, #24]
   12f70:	mov	r7, r0
   12f74:	mov	r0, #0
   12f78:	mov	r2, #196608	; 0x30000
   12f7c:	strb	r0, [r7, #168]	; 0xa8
   12f80:	str	r2, [r7, #58]	; 0x3a
   12f84:	mvn	r2, #0
   12f88:	str	r0, [r7, #12]
   12f8c:	str	r0, [r7, #16]
   12f90:	str	r0, [r7, #20]
   12f94:	str	r4, [r7, #44]	; 0x2c
   12f98:	str	r2, [r7, #48]	; 0x30
   12f9c:	str	r0, [r7, #52]	; 0x34
   12fa0:	str	r1, [r7, #28]
   12fa4:	str	r0, [r7, #32]
   12fa8:	b	12fc4 <__assert_fail@plt+0x1770>
   12fac:	ldr	r0, [r4, #24]
   12fb0:	bl	1a978 <__assert_fail@plt+0x9124>
   12fb4:	mov	r0, #0
   12fb8:	str	r0, [r4, #24]
   12fbc:	b	13440 <__assert_fail@plt+0x1bec>
   12fc0:	mov	r7, #0
   12fc4:	cmp	r5, #0
   12fc8:	ldrbne	r0, [r4, #49]	; 0x31
   12fcc:	ubfxne	r0, r0, #2, #1
   12fd0:	ldr	r4, [sl]
   12fd4:	moveq	r0, #1
   12fd8:	str	r0, [sp, #12]
   12fdc:	cmp	r4, #0
   12fe0:	beq	13148 <__assert_fail@plt+0x18f4>
   12fe4:	tst	r6, #2048	; 0x800
   12fe8:	str	r7, [sp, #20]
   12fec:	str	r5, [sp, #16]
   12ff0:	bne	1316c <__assert_fail@plt+0x1918>
   12ff4:	mov	r0, #0
   12ff8:	mov	r8, #0
   12ffc:	mov	r5, #0
   13000:	str	r0, [sp, #8]
   13004:	mov	r0, r4
   13008:	bl	116b0 <strlen@plt>
   1300c:	mov	r9, r0
   13010:	cmp	r0, #3
   13014:	bcc	13044 <__assert_fail@plt+0x17f0>
   13018:	add	r0, r4, r9
   1301c:	ldrb	r0, [r0, #-1]
   13020:	cmp	r0, #47	; 0x2f
   13024:	bne	13044 <__assert_fail@plt+0x17f0>
   13028:	sub	r0, r4, #2
   1302c:	ldrb	r1, [r0, r9]
   13030:	cmp	r1, #47	; 0x2f
   13034:	bne	13044 <__assert_fail@plt+0x17f0>
   13038:	sub	r9, r9, #1
   1303c:	cmp	r9, #1
   13040:	bhi	1302c <__assert_fail@plt+0x17d8>
   13044:	add	r0, r9, #176	; 0xb0
   13048:	bic	r0, r0, #7
   1304c:	bl	1a314 <__assert_fail@plt+0x8ac0>
   13050:	cmp	r0, #0
   13054:	beq	132ac <__assert_fail@plt+0x1a58>
   13058:	add	r6, r0, #168	; 0xa8
   1305c:	mov	r7, r0
   13060:	mov	r1, r4
   13064:	mov	r2, r9
   13068:	mov	r0, r6
   1306c:	bl	1150c <memcpy@plt>
   13070:	ldr	r0, [sp, #24]
   13074:	mov	r4, #0
   13078:	mov	r1, #196608	; 0x30000
   1307c:	cmp	r8, #0
   13080:	strb	r4, [r6, r9]
   13084:	str	r1, [r7, #58]	; 0x3a
   13088:	add	r1, r7, #44	; 0x2c
   1308c:	ldr	r2, [r0, #24]
   13090:	stm	r1, {r0, r4, r9}
   13094:	ldr	r1, [sp, #20]
   13098:	str	r1, [r7, #4]
   1309c:	str	r4, [r7, #12]
   130a0:	str	r4, [r7, #16]
   130a4:	str	r4, [r7, #20]
   130a8:	str	r6, [r7, #24]
   130ac:	str	r2, [r7, #28]
   130b0:	ldr	r2, [sp, #12]
   130b4:	mov	r1, r8
   130b8:	str	r4, [r7, #32]
   130bc:	movwne	r1, #1
   130c0:	tst	r2, r1
   130c4:	beq	130f4 <__assert_fail@plt+0x18a0>
   130c8:	mov	r0, #2
   130cc:	str	r0, [r7, #112]	; 0x70
   130d0:	mov	r0, #11
   130d4:	str	r4, [r7, #116]	; 0x74
   130d8:	strh	r0, [r7, #56]	; 0x38
   130dc:	ldr	r0, [sp, #16]
   130e0:	cmp	r0, #0
   130e4:	beq	13110 <__assert_fail@plt+0x18bc>
   130e8:	str	r8, [r7, #8]
   130ec:	mov	r8, r7
   130f0:	b	13128 <__assert_fail@plt+0x18d4>
   130f4:	mov	r1, r7
   130f8:	mov	r2, #0
   130fc:	bl	13494 <__assert_fail@plt+0x1c40>
   13100:	strh	r0, [r7, #56]	; 0x38
   13104:	ldr	r0, [sp, #16]
   13108:	cmp	r0, #0
   1310c:	bne	130e8 <__assert_fail@plt+0x1894>
   13110:	cmp	r8, #0
   13114:	str	r4, [r7, #8]
   13118:	beq	1313c <__assert_fail@plt+0x18e8>
   1311c:	ldr	r0, [sp, #8]
   13120:	str	r7, [sp, #8]
   13124:	str	r7, [r0, #8]
   13128:	ldr	r4, [sl, #4]!
   1312c:	add	r5, r5, #1
   13130:	cmp	r4, #0
   13134:	bne	13004 <__assert_fail@plt+0x17b0>
   13138:	b	132bc <__assert_fail@plt+0x1a68>
   1313c:	mov	r0, r7
   13140:	str	r7, [sp, #8]
   13144:	b	130ec <__assert_fail@plt+0x1898>
   13148:	ldr	r4, [sp, #24]
   1314c:	mov	r8, #0
   13150:	mov	r0, #176	; 0xb0
   13154:	bl	1a314 <__assert_fail@plt+0x8ac0>
   13158:	cmp	r0, #0
   1315c:	bne	13318 <__assert_fail@plt+0x1ac4>
   13160:	mov	r0, #0
   13164:	str	r0, [r4]
   13168:	b	133fc <__assert_fail@plt+0x1ba8>
   1316c:	add	r0, sl, #4
   13170:	mov	r9, #0
   13174:	mov	r8, #0
   13178:	mov	r5, #0
   1317c:	str	r0, [sp, #8]
   13180:	ldr	r0, [sp, #12]
   13184:	eor	r0, r0, #1
   13188:	str	r0, [sp, #12]
   1318c:	mov	r0, #0
   13190:	str	r0, [sp, #4]
   13194:	mov	r0, r4
   13198:	mov	sl, r5
   1319c:	bl	116b0 <strlen@plt>
   131a0:	mov	r7, r0
   131a4:	add	r0, r0, #176	; 0xb0
   131a8:	bic	r0, r0, #7
   131ac:	bl	1a314 <__assert_fail@plt+0x8ac0>
   131b0:	cmp	r0, #0
   131b4:	beq	132ac <__assert_fail@plt+0x1a58>
   131b8:	add	r6, r0, #168	; 0xa8
   131bc:	mov	r5, r0
   131c0:	mov	r1, r4
   131c4:	mov	r2, r7
   131c8:	mov	r0, r6
   131cc:	bl	1150c <memcpy@plt>
   131d0:	ldr	r0, [sp, #24]
   131d4:	mov	r1, #196608	; 0x30000
   131d8:	strb	r9, [r6, r7]
   131dc:	str	r1, [r5, #58]	; 0x3a
   131e0:	ldr	r1, [sp, #20]
   131e4:	ldr	r2, [r0, #24]
   131e8:	str	r0, [r5, #44]	; 0x2c
   131ec:	str	r9, [r5, #48]	; 0x30
   131f0:	str	r7, [r5, #52]	; 0x34
   131f4:	str	r1, [r5, #4]
   131f8:	str	r9, [r5, #12]
   131fc:	str	r9, [r5, #16]
   13200:	str	r9, [r5, #20]
   13204:	str	r6, [r5, #24]
   13208:	clz	r1, r8
   1320c:	lsr	r1, r1, #5
   13210:	str	r2, [r5, #28]
   13214:	ldr	r2, [sp, #12]
   13218:	str	r9, [r5, #32]
   1321c:	orrs	r1, r2, r1
   13220:	bne	13250 <__assert_fail@plt+0x19fc>
   13224:	mov	r0, #2
   13228:	str	r0, [r5, #112]	; 0x70
   1322c:	str	r9, [r5, #116]	; 0x74
   13230:	mov	r0, #11
   13234:	strh	r0, [r5, #56]	; 0x38
   13238:	ldr	r0, [sp, #16]
   1323c:	cmp	r0, #0
   13240:	beq	1326c <__assert_fail@plt+0x1a18>
   13244:	str	r8, [r5, #8]
   13248:	mov	r8, r5
   1324c:	b	13284 <__assert_fail@plt+0x1a30>
   13250:	mov	r1, r5
   13254:	mov	r2, #0
   13258:	bl	13494 <__assert_fail@plt+0x1c40>
   1325c:	strh	r0, [r5, #56]	; 0x38
   13260:	ldr	r0, [sp, #16]
   13264:	cmp	r0, #0
   13268:	bne	13244 <__assert_fail@plt+0x19f0>
   1326c:	cmp	r8, #0
   13270:	str	r9, [r5, #8]
   13274:	beq	132a0 <__assert_fail@plt+0x1a4c>
   13278:	ldr	r0, [sp, #4]
   1327c:	str	r5, [sp, #4]
   13280:	str	r5, [r0, #8]
   13284:	ldr	r0, [sp, #8]
   13288:	mov	r5, sl
   1328c:	add	r5, sl, #1
   13290:	ldr	r4, [r0, sl, lsl #2]
   13294:	cmp	r4, #0
   13298:	bne	13194 <__assert_fail@plt+0x1940>
   1329c:	b	132bc <__assert_fail@plt+0x1a68>
   132a0:	mov	r0, r5
   132a4:	str	r5, [sp, #4]
   132a8:	b	13248 <__assert_fail@plt+0x19f4>
   132ac:	ldr	r7, [sp, #20]
   132b0:	cmp	r8, #0
   132b4:	bne	13404 <__assert_fail@plt+0x1bb0>
   132b8:	b	1342c <__assert_fail@plt+0x1bd8>
   132bc:	ldr	r0, [sp, #16]
   132c0:	cmp	r0, #0
   132c4:	beq	13300 <__assert_fail@plt+0x1aac>
   132c8:	ldr	r7, [sp, #20]
   132cc:	ldr	r4, [sp, #24]
   132d0:	cmp	r5, #2
   132d4:	bcc	13308 <__assert_fail@plt+0x1ab4>
   132d8:	mov	r0, r4
   132dc:	mov	r1, r8
   132e0:	mov	r2, r5
   132e4:	bl	1362c <__assert_fail@plt+0x1dd8>
   132e8:	mov	r8, r0
   132ec:	mov	r0, #176	; 0xb0
   132f0:	bl	1a314 <__assert_fail@plt+0x8ac0>
   132f4:	cmp	r0, #0
   132f8:	bne	13318 <__assert_fail@plt+0x1ac4>
   132fc:	b	13160 <__assert_fail@plt+0x190c>
   13300:	ldr	r7, [sp, #20]
   13304:	ldr	r4, [sp, #24]
   13308:	mov	r0, #176	; 0xb0
   1330c:	bl	1a314 <__assert_fail@plt+0x8ac0>
   13310:	cmp	r0, #0
   13314:	beq	13160 <__assert_fail@plt+0x190c>
   13318:	ldr	r2, [r4, #24]
   1331c:	mov	r1, #0
   13320:	mov	r3, #196608	; 0x30000
   13324:	str	r0, [r4]
   13328:	str	r1, [r0, #52]	; 0x34
   1332c:	strb	r1, [r0, #168]	; 0xa8
   13330:	str	r4, [r0, #44]	; 0x2c
   13334:	str	r3, [r0, #58]	; 0x3a
   13338:	str	r2, [r0, #28]
   1333c:	mov	r2, #9
   13340:	str	r1, [r0, #32]
   13344:	strh	r2, [r0, #56]	; 0x38
   13348:	str	r8, [r0, #8]
   1334c:	str	r1, [r0, #12]
   13350:	str	r1, [r0, #16]
   13354:	str	r1, [r0, #20]
   13358:	mov	r1, #1
   1335c:	str	r1, [r0, #48]	; 0x30
   13360:	ldrh	r0, [r4, #48]	; 0x30
   13364:	movw	r1, #258	; 0x102
   13368:	tst	r0, r1
   1336c:	beq	133a8 <__assert_fail@plt+0x1b54>
   13370:	movw	r0, #43384	; 0xa978
   13374:	movw	r2, #21428	; 0x53b4
   13378:	movw	r3, #21460	; 0x53d4
   1337c:	mov	r1, #0
   13380:	movt	r0, #1
   13384:	movt	r2, #1
   13388:	movt	r3, #1
   1338c:	str	r0, [sp]
   13390:	mov	r0, #31
   13394:	bl	15a70 <__assert_fail@plt+0x421c>
   13398:	cmp	r0, #0
   1339c:	str	r0, [r4, #56]	; 0x38
   133a0:	bne	133c0 <__assert_fail@plt+0x1b6c>
   133a4:	b	133fc <__assert_fail@plt+0x1ba8>
   133a8:	mov	r0, #32
   133ac:	bl	1a314 <__assert_fail@plt+0x8ac0>
   133b0:	cmp	r0, #0
   133b4:	str	r0, [r4, #56]	; 0x38
   133b8:	beq	133fc <__assert_fail@plt+0x1ba8>
   133bc:	bl	1a558 <__assert_fail@plt+0x8d04>
   133c0:	ldr	r4, [sp, #24]
   133c4:	ldr	r0, [r4, #48]	; 0x30
   133c8:	tst	r0, #516	; 0x204
   133cc:	bne	1347c <__assert_fail@plt+0x1c28>
   133d0:	mov	r1, #32768	; 0x8000
   133d4:	tst	r0, #512	; 0x200
   133d8:	and	r1, r1, r0, lsl #11
   133dc:	orr	r1, r1, #18688	; 0x4900
   133e0:	orr	r2, r1, #524288	; 0x80000
   133e4:	bne	13458 <__assert_fail@plt+0x1c04>
   133e8:	movw	r0, #49379	; 0xc0e3
   133ec:	mov	r1, r2
   133f0:	movt	r0, #1
   133f4:	bl	1a8c8 <__assert_fail@plt+0x9074>
   133f8:	b	13468 <__assert_fail@plt+0x1c14>
   133fc:	cmp	r8, #0
   13400:	beq	1342c <__assert_fail@plt+0x1bd8>
   13404:	ldrd	r4, [r8, #8]
   13408:	cmp	r5, #0
   1340c:	beq	13418 <__assert_fail@plt+0x1bc4>
   13410:	mov	r0, r5
   13414:	bl	1183c <closedir@plt>
   13418:	mov	r0, r8
   1341c:	bl	1a978 <__assert_fail@plt+0x9124>
   13420:	cmp	r4, #0
   13424:	mov	r8, r4
   13428:	bne	13404 <__assert_fail@plt+0x1bb0>
   1342c:	mov	r0, r7
   13430:	bl	1a978 <__assert_fail@plt+0x9124>
   13434:	ldr	r4, [sp, #24]
   13438:	ldr	r0, [r4, #24]
   1343c:	bl	1a978 <__assert_fail@plt+0x9124>
   13440:	mov	r0, r4
   13444:	bl	1a978 <__assert_fail@plt+0x9124>
   13448:	mov	r4, #0
   1344c:	mov	r0, r4
   13450:	sub	sp, fp, #28
   13454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13458:	ldr	r0, [r4, #32]
   1345c:	movw	r1, #49379	; 0xc0e3
   13460:	movt	r1, #1
   13464:	bl	16a74 <__assert_fail@plt+0x5220>
   13468:	str	r0, [r4, #28]
   1346c:	cmn	r0, #1
   13470:	ldrle	r0, [r4, #48]	; 0x30
   13474:	orrle	r0, r0, #4
   13478:	strle	r0, [r4, #48]	; 0x30
   1347c:	add	r0, r4, #60	; 0x3c
   13480:	mvn	r1, #0
   13484:	bl	169a4 <__assert_fail@plt+0x5150>
   13488:	mov	r0, r4
   1348c:	sub	sp, fp, #28
   13490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13494:	push	{r4, r5, r6, sl, fp, lr}
   13498:	add	fp, sp, #16
   1349c:	sub	sp, sp, #8
   134a0:	mov	r4, r1
   134a4:	ldr	r1, [r0, #48]	; 0x30
   134a8:	ldr	r3, [r4, #48]	; 0x30
   134ac:	add	r5, r4, #64	; 0x40
   134b0:	cmp	r3, #0
   134b4:	andeq	r3, r1, #1
   134b8:	orreq	r2, r3, r2
   134bc:	cmp	r2, #0
   134c0:	andseq	r1, r1, #2
   134c4:	beq	13520 <__assert_fail@plt+0x1ccc>
   134c8:	ldr	r1, [r4, #24]
   134cc:	mov	r0, #3
   134d0:	mov	r2, r5
   134d4:	bl	11800 <__xstat64@plt>
   134d8:	cmp	r0, #0
   134dc:	beq	135a0 <__assert_fail@plt+0x1d4c>
   134e0:	bl	116d4 <__errno_location@plt>
   134e4:	mov	r6, r0
   134e8:	ldr	r0, [r0]
   134ec:	cmp	r0, #2
   134f0:	bne	13550 <__assert_fail@plt+0x1cfc>
   134f4:	ldr	r1, [r4, #24]
   134f8:	mov	r0, #3
   134fc:	mov	r2, r5
   13500:	bl	11830 <__lxstat64@plt>
   13504:	cmp	r0, #0
   13508:	bne	1354c <__assert_fail@plt+0x1cf8>
   1350c:	mov	r0, #0
   13510:	str	r0, [r6]
   13514:	mov	r0, #13
   13518:	sub	sp, fp, #16
   1351c:	pop	{r4, r5, r6, sl, fp, pc}
   13520:	ldr	r1, [r0, #32]
   13524:	ldr	r2, [r4, #24]
   13528:	mov	r0, #256	; 0x100
   1352c:	mov	r3, r5
   13530:	str	r0, [sp]
   13534:	mov	r0, #3
   13538:	bl	11590 <__fxstatat64@plt>
   1353c:	cmp	r0, #0
   13540:	beq	135a0 <__assert_fail@plt+0x1d4c>
   13544:	bl	116d4 <__errno_location@plt>
   13548:	mov	r6, r0
   1354c:	ldr	r0, [r6]
   13550:	vmov.i32	q8, #0	; 0x00000000
   13554:	add	r1, r5, #80	; 0x50
   13558:	str	r0, [r4, #32]
   1355c:	mov	r0, #0
   13560:	vst1.64	{d16-d17}, [r1]
   13564:	add	r1, r5, #64	; 0x40
   13568:	str	r0, [r5, #96]	; 0x60
   1356c:	vst1.64	{d16-d17}, [r1]
   13570:	add	r1, r5, #48	; 0x30
   13574:	vst1.64	{d16-d17}, [r1]
   13578:	add	r1, r5, #32
   1357c:	vst1.64	{d16-d17}, [r1]
   13580:	add	r1, r5, #16
   13584:	vst1.64	{d16-d17}, [r1]
   13588:	mov	r1, #100	; 0x64
   1358c:	vst1.64	{d16-d17}, [r5], r1
   13590:	str	r0, [r5]
   13594:	mov	r0, #10
   13598:	sub	sp, fp, #16
   1359c:	pop	{r4, r5, r6, sl, fp, pc}
   135a0:	ldr	r0, [r4, #80]	; 0x50
   135a4:	and	r0, r0, #61440	; 0xf000
   135a8:	cmp	r0, #40960	; 0xa000
   135ac:	beq	13608 <__assert_fail@plt+0x1db4>
   135b0:	cmp	r0, #32768	; 0x8000
   135b4:	moveq	r0, #8
   135b8:	subeq	sp, fp, #16
   135bc:	popeq	{r4, r5, r6, sl, fp, pc}
   135c0:	cmp	r0, #16384	; 0x4000
   135c4:	bne	135fc <__assert_fail@plt+0x1da8>
   135c8:	ldrb	r1, [r4, #168]	; 0xa8
   135cc:	mov	r0, #1
   135d0:	cmp	r1, #46	; 0x2e
   135d4:	bne	135f4 <__assert_fail@plt+0x1da0>
   135d8:	ldrb	r1, [r4, #169]	; 0xa9
   135dc:	cmp	r1, #0
   135e0:	beq	13614 <__assert_fail@plt+0x1dc0>
   135e4:	cmp	r1, #46	; 0x2e
   135e8:	ldrbeq	r1, [r4, #170]	; 0xaa
   135ec:	cmpeq	r1, #0
   135f0:	beq	13614 <__assert_fail@plt+0x1dc0>
   135f4:	sub	sp, fp, #16
   135f8:	pop	{r4, r5, r6, sl, fp, pc}
   135fc:	mov	r0, #3
   13600:	sub	sp, fp, #16
   13604:	pop	{r4, r5, r6, sl, fp, pc}
   13608:	mov	r0, #12
   1360c:	sub	sp, fp, #16
   13610:	pop	{r4, r5, r6, sl, fp, pc}
   13614:	ldr	r1, [r4, #48]	; 0x30
   13618:	mov	r0, #5
   1361c:	cmp	r1, #0
   13620:	movweq	r0, #1
   13624:	sub	sp, fp, #16
   13628:	pop	{r4, r5, r6, sl, fp, pc}
   1362c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13630:	add	fp, sp, #24
   13634:	ldrd	r8, [r0, #40]	; 0x28
   13638:	mov	r5, r2
   1363c:	mov	r4, r1
   13640:	mov	r6, r0
   13644:	cmp	r8, r2
   13648:	bcs	13688 <__assert_fail@plt+0x1e34>
   1364c:	add	r1, r5, #40	; 0x28
   13650:	cmn	r1, #-1073741823	; 0xc0000001
   13654:	str	r1, [r6, #40]	; 0x28
   13658:	bhi	13714 <__assert_fail@plt+0x1ec0>
   1365c:	add	r7, r6, #8
   13660:	lsl	r1, r1, #2
   13664:	ldr	r0, [r7]
   13668:	bl	1a344 <__assert_fail@plt+0x8af0>
   1366c:	cmp	r0, #0
   13670:	beq	13714 <__assert_fail@plt+0x1ec0>
   13674:	mov	r6, r7
   13678:	str	r0, [r7]
   1367c:	cmp	r4, #0
   13680:	bne	13694 <__assert_fail@plt+0x1e40>
   13684:	b	136a8 <__assert_fail@plt+0x1e54>
   13688:	ldr	r0, [r6, #8]!
   1368c:	cmp	r4, #0
   13690:	beq	136a8 <__assert_fail@plt+0x1e54>
   13694:	str	r4, [r0], #4
   13698:	ldr	r4, [r4, #8]
   1369c:	cmp	r4, #0
   136a0:	bne	13694 <__assert_fail@plt+0x1e40>
   136a4:	ldr	r0, [r6]
   136a8:	mov	r1, r5
   136ac:	mov	r2, #4
   136b0:	mov	r3, r9
   136b4:	bl	117c4 <qsort@plt>
   136b8:	ldr	r7, [r6]
   136bc:	subs	r0, r5, #1
   136c0:	ldr	r4, [r7]
   136c4:	mov	r1, r4
   136c8:	beq	13704 <__assert_fail@plt+0x1eb0>
   136cc:	mov	r1, r7
   136d0:	cmp	r5, #2
   136d4:	ldr	r2, [r1, #4]!
   136d8:	str	r2, [r4, #8]
   136dc:	beq	13700 <__assert_fail@plt+0x1eac>
   136e0:	rsb	r3, r5, #2
   136e4:	mov	r2, r1
   136e8:	ldr	r6, [r2, #4]!
   136ec:	ldr	r1, [r1]
   136f0:	adds	r3, r3, #1
   136f4:	str	r6, [r1, #8]
   136f8:	mov	r1, r2
   136fc:	bne	136e8 <__assert_fail@plt+0x1e94>
   13700:	ldr	r1, [r7, r0, lsl #2]
   13704:	mov	r0, #0
   13708:	str	r0, [r1, #8]
   1370c:	mov	r0, r4
   13710:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13714:	ldr	r0, [r6, #8]
   13718:	bl	1a978 <__assert_fail@plt+0x9124>
   1371c:	mov	r0, #0
   13720:	str	r0, [r6, #40]	; 0x28
   13724:	str	r0, [r6, #8]
   13728:	mov	r0, r4
   1372c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13730:	push	{r4, r5, r6, r7, fp, lr}
   13734:	add	fp, sp, #16
   13738:	mov	r4, r0
   1373c:	ldr	r0, [r0]
   13740:	cmp	r0, #0
   13744:	beq	13784 <__assert_fail@plt+0x1f30>
   13748:	ldr	r1, [r0, #48]	; 0x30
   1374c:	cmp	r1, #0
   13750:	blt	13778 <__assert_fail@plt+0x1f24>
   13754:	ldr	r5, [r0, #8]
   13758:	cmp	r5, #0
   1375c:	ldreq	r5, [r0, #4]
   13760:	bl	1a978 <__assert_fail@plt+0x9124>
   13764:	ldr	r0, [r5, #48]	; 0x30
   13768:	cmn	r0, #1
   1376c:	mov	r0, r5
   13770:	bgt	13754 <__assert_fail@plt+0x1f00>
   13774:	b	1377c <__assert_fail@plt+0x1f28>
   13778:	mov	r5, r0
   1377c:	mov	r0, r5
   13780:	bl	1a978 <__assert_fail@plt+0x9124>
   13784:	ldr	r5, [r4, #4]
   13788:	cmp	r5, #0
   1378c:	beq	137b8 <__assert_fail@plt+0x1f64>
   13790:	ldrd	r6, [r5, #8]
   13794:	cmp	r7, #0
   13798:	beq	137a4 <__assert_fail@plt+0x1f50>
   1379c:	mov	r0, r7
   137a0:	bl	1183c <closedir@plt>
   137a4:	mov	r0, r5
   137a8:	bl	1a978 <__assert_fail@plt+0x9124>
   137ac:	cmp	r6, #0
   137b0:	mov	r5, r6
   137b4:	bne	13790 <__assert_fail@plt+0x1f3c>
   137b8:	ldr	r0, [r4, #8]
   137bc:	bl	1a978 <__assert_fail@plt+0x9124>
   137c0:	ldr	r0, [r4, #24]
   137c4:	bl	1a978 <__assert_fail@plt+0x9124>
   137c8:	ldr	r0, [r4, #48]	; 0x30
   137cc:	tst	r0, #512	; 0x200
   137d0:	bne	1380c <__assert_fail@plt+0x1fb8>
   137d4:	mov	r6, #0
   137d8:	tst	r0, #4
   137dc:	bne	13830 <__assert_fail@plt+0x1fdc>
   137e0:	ldr	r0, [r4, #28]
   137e4:	bl	117b8 <fchdir@plt>
   137e8:	cmp	r0, #0
   137ec:	beq	138c0 <__assert_fail@plt+0x206c>
   137f0:	bl	116d4 <__errno_location@plt>
   137f4:	ldr	r6, [r0]
   137f8:	ldr	r0, [r4, #28]
   137fc:	bl	11824 <close@plt>
   13800:	cmp	r6, #0
   13804:	beq	13820 <__assert_fail@plt+0x1fcc>
   13808:	b	13830 <__assert_fail@plt+0x1fdc>
   1380c:	ldr	r0, [r4, #32]
   13810:	mov	r6, #0
   13814:	cmp	r0, #0
   13818:	blt	13830 <__assert_fail@plt+0x1fdc>
   1381c:	bl	11824 <close@plt>
   13820:	cmp	r0, #0
   13824:	beq	13830 <__assert_fail@plt+0x1fdc>
   13828:	bl	116d4 <__errno_location@plt>
   1382c:	ldr	r6, [r0]
   13830:	add	r5, r4, #60	; 0x3c
   13834:	b	1383c <__assert_fail@plt+0x1fe8>
   13838:	bl	11824 <close@plt>
   1383c:	mov	r0, r5
   13840:	bl	169c8 <__assert_fail@plt+0x5174>
   13844:	cmp	r0, #0
   13848:	bne	13860 <__assert_fail@plt+0x200c>
   1384c:	mov	r0, r5
   13850:	bl	16a1c <__assert_fail@plt+0x51c8>
   13854:	cmp	r0, #0
   13858:	bge	13838 <__assert_fail@plt+0x1fe4>
   1385c:	b	1383c <__assert_fail@plt+0x1fe8>
   13860:	ldr	r0, [r4, #52]	; 0x34
   13864:	cmp	r0, #0
   13868:	beq	13870 <__assert_fail@plt+0x201c>
   1386c:	bl	15d8c <__assert_fail@plt+0x4538>
   13870:	ldrh	r0, [r4, #48]	; 0x30
   13874:	movw	r1, #258	; 0x102
   13878:	tst	r0, r1
   1387c:	beq	13894 <__assert_fail@plt+0x2040>
   13880:	ldr	r0, [r4, #56]	; 0x38
   13884:	cmp	r0, #0
   13888:	beq	1389c <__assert_fail@plt+0x2048>
   1388c:	bl	15d8c <__assert_fail@plt+0x4538>
   13890:	b	1389c <__assert_fail@plt+0x2048>
   13894:	ldr	r0, [r4, #56]	; 0x38
   13898:	bl	1a978 <__assert_fail@plt+0x9124>
   1389c:	mov	r0, r4
   138a0:	bl	1a978 <__assert_fail@plt+0x9124>
   138a4:	cmp	r6, #0
   138a8:	moveq	r0, #0
   138ac:	popeq	{r4, r5, r6, r7, fp, pc}
   138b0:	bl	116d4 <__errno_location@plt>
   138b4:	str	r6, [r0]
   138b8:	mvn	r0, #0
   138bc:	pop	{r4, r5, r6, r7, fp, pc}
   138c0:	mov	r6, #0
   138c4:	ldr	r0, [r4, #28]
   138c8:	bl	11824 <close@plt>
   138cc:	cmp	r6, #0
   138d0:	beq	13820 <__assert_fail@plt+0x1fcc>
   138d4:	b	13830 <__assert_fail@plt+0x1fdc>
   138d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138dc:	add	fp, sp, #28
   138e0:	sub	sp, sp, #4
   138e4:	ldr	r6, [r0]
   138e8:	mov	sl, #0
   138ec:	cmp	r6, #0
   138f0:	beq	14178 <__assert_fail@plt+0x2924>
   138f4:	mov	r4, r0
   138f8:	ldr	r0, [r0, #48]	; 0x30
   138fc:	tst	r0, #8192	; 0x2000
   13900:	bne	14178 <__assert_fail@plt+0x2924>
   13904:	ldrh	r1, [r6, #60]	; 0x3c
   13908:	mov	r2, #3
   1390c:	strh	r2, [r6, #60]	; 0x3c
   13910:	cmp	r1, #1
   13914:	beq	13994 <__assert_fail@plt+0x2140>
   13918:	mov	r5, r6
   1391c:	cmp	r1, #2
   13920:	bne	139b8 <__assert_fail@plt+0x2164>
   13924:	ldrh	r2, [r5, #56]!	; 0x38
   13928:	movw	r3, #65534	; 0xfffe
   1392c:	and	r3, r2, r3
   13930:	cmp	r3, #12
   13934:	bne	139bc <__assert_fail@plt+0x2168>
   13938:	mov	r0, r4
   1393c:	mov	r1, r6
   13940:	mov	r2, #1
   13944:	bl	13494 <__assert_fail@plt+0x1c40>
   13948:	strh	r0, [r6, #56]	; 0x38
   1394c:	cmp	r0, #1
   13950:	ldreq	r0, [r4, #48]	; 0x30
   13954:	tsteq	r0, #4
   13958:	bne	13c70 <__assert_fail@plt+0x241c>
   1395c:	mov	r1, #32768	; 0x8000
   13960:	tst	r0, #512	; 0x200
   13964:	and	r1, r1, r0, lsl #11
   13968:	orr	r1, r1, #18688	; 0x4900
   1396c:	orr	r2, r1, #524288	; 0x80000
   13970:	bne	13e84 <__assert_fail@plt+0x2630>
   13974:	movw	r0, #49379	; 0xc0e3
   13978:	mov	r1, r2
   1397c:	movt	r0, #1
   13980:	bl	1a8c8 <__assert_fail@plt+0x9074>
   13984:	cmn	r0, #1
   13988:	str	r0, [r6, #36]	; 0x24
   1398c:	bgt	13ea0 <__assert_fail@plt+0x264c>
   13990:	b	13ee4 <__assert_fail@plt+0x2690>
   13994:	mov	r0, r4
   13998:	mov	r1, r6
   1399c:	mov	r2, #0
   139a0:	bl	13494 <__assert_fail@plt+0x1c40>
   139a4:	strh	r0, [r6, #56]	; 0x38
   139a8:	mov	sl, r6
   139ac:	mov	r0, sl
   139b0:	sub	sp, fp, #28
   139b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139b8:	ldrh	r2, [r5, #56]!	; 0x38
   139bc:	cmp	r2, #1
   139c0:	bne	13a40 <__assert_fail@plt+0x21ec>
   139c4:	cmp	r1, #4
   139c8:	bne	13ab0 <__assert_fail@plt+0x225c>
   139cc:	ldrb	r0, [r6, #58]	; 0x3a
   139d0:	tst	r0, #2
   139d4:	beq	139e0 <__assert_fail@plt+0x218c>
   139d8:	ldr	r0, [r6, #36]	; 0x24
   139dc:	bl	11824 <close@plt>
   139e0:	ldr	r5, [r4, #4]
   139e4:	cmp	r5, #0
   139e8:	beq	13a1c <__assert_fail@plt+0x21c8>
   139ec:	ldrd	r8, [r5, #8]
   139f0:	cmp	r9, #0
   139f4:	beq	13a00 <__assert_fail@plt+0x21ac>
   139f8:	mov	r0, r9
   139fc:	bl	1183c <closedir@plt>
   13a00:	mov	r0, r5
   13a04:	bl	1a978 <__assert_fail@plt+0x9124>
   13a08:	cmp	r8, #0
   13a0c:	mov	r5, r8
   13a10:	bne	139ec <__assert_fail@plt+0x2198>
   13a14:	mov	r0, #0
   13a18:	str	r0, [r4, #4]
   13a1c:	mov	r0, #6
   13a20:	strh	r0, [r6, #56]	; 0x38
   13a24:	mov	r0, r4
   13a28:	mov	r1, r6
   13a2c:	bl	14188 <__assert_fail@plt+0x2934>
   13a30:	mov	sl, r6
   13a34:	mov	r0, sl
   13a38:	sub	sp, fp, #28
   13a3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a40:	mov	r7, r6
   13a44:	ldr	r6, [r7, #8]
   13a48:	cmp	r6, #0
   13a4c:	beq	13b40 <__assert_fail@plt+0x22ec>
   13a50:	mov	r0, r7
   13a54:	str	r6, [r4]
   13a58:	bl	1a978 <__assert_fail@plt+0x9124>
   13a5c:	ldr	r0, [r6, #48]	; 0x30
   13a60:	cmp	r0, #0
   13a64:	beq	13b88 <__assert_fail@plt+0x2334>
   13a68:	ldrh	r0, [r6, #60]	; 0x3c
   13a6c:	mov	r7, r6
   13a70:	cmp	r0, #4
   13a74:	beq	13a44 <__assert_fail@plt+0x21f0>
   13a78:	cmp	r0, #2
   13a7c:	bne	13c34 <__assert_fail@plt+0x23e0>
   13a80:	mov	r0, r4
   13a84:	mov	r1, r6
   13a88:	mov	r2, #1
   13a8c:	bl	13494 <__assert_fail@plt+0x1c40>
   13a90:	strh	r0, [r6, #56]	; 0x38
   13a94:	cmp	r0, #1
   13a98:	ldreq	r0, [r4, #48]	; 0x30
   13a9c:	tsteq	r0, #4
   13aa0:	beq	14084 <__assert_fail@plt+0x2830>
   13aa4:	mov	r0, #3
   13aa8:	strh	r0, [r6, #60]	; 0x3c
   13aac:	b	13c34 <__assert_fail@plt+0x23e0>
   13ab0:	tst	r0, #64	; 0x40
   13ab4:	beq	13ad0 <__assert_fail@plt+0x227c>
   13ab8:	ldrd	r2, [r4, #16]
   13abc:	ldrd	r8, [r6, #64]	; 0x40
   13ac0:	eor	r1, r9, r3
   13ac4:	eor	r2, r8, r2
   13ac8:	orrs	r1, r2, r1
   13acc:	bne	139cc <__assert_fail@plt+0x2178>
   13ad0:	ldr	r7, [r4, #4]
   13ad4:	cmp	r7, #0
   13ad8:	beq	13c10 <__assert_fail@plt+0x23bc>
   13adc:	tst	r0, #4096	; 0x1000
   13ae0:	bne	13bd8 <__assert_fail@plt+0x2384>
   13ae4:	ldr	r3, [r6, #24]
   13ae8:	mov	r0, r4
   13aec:	mov	r1, r6
   13af0:	mvn	r2, #0
   13af4:	bl	14258 <__assert_fail@plt+0x2a04>
   13af8:	cmp	r0, #0
   13afc:	beq	13c28 <__assert_fail@plt+0x23d4>
   13b00:	bl	116d4 <__errno_location@plt>
   13b04:	ldr	r0, [r0]
   13b08:	str	r0, [r6, #32]
   13b0c:	ldrh	r0, [r6, #58]	; 0x3a
   13b10:	orr	r0, r0, #1
   13b14:	strh	r0, [r6, #58]	; 0x3a
   13b18:	ldr	r0, [r4, #4]
   13b1c:	cmp	r0, #0
   13b20:	beq	13c28 <__assert_fail@plt+0x23d4>
   13b24:	ldmib	r0, {r1, r2}
   13b28:	ldr	r1, [r1, #24]
   13b2c:	cmp	r2, #0
   13b30:	str	r1, [r0, #24]
   13b34:	mov	r0, r2
   13b38:	bne	13b24 <__assert_fail@plt+0x22d0>
   13b3c:	b	13c28 <__assert_fail@plt+0x23d4>
   13b40:	ldr	r0, [r7, #4]
   13b44:	ldr	r1, [r0, #12]
   13b48:	cmp	r1, #0
   13b4c:	beq	13bb0 <__assert_fail@plt+0x235c>
   13b50:	str	r0, [r4]
   13b54:	mov	r2, #0
   13b58:	ldr	r1, [r4, #24]
   13b5c:	ldr	r0, [r0, #40]	; 0x28
   13b60:	strb	r2, [r1, r0]
   13b64:	mov	r0, r4
   13b68:	mov	r1, #3
   13b6c:	bl	14500 <__assert_fail@plt+0x2cac>
   13b70:	cmp	r0, #0
   13b74:	beq	13df8 <__assert_fail@plt+0x25a4>
   13b78:	mov	r6, r0
   13b7c:	mov	r0, r7
   13b80:	bl	1a978 <__assert_fail@plt+0x9124>
   13b84:	b	13c34 <__assert_fail@plt+0x23e0>
   13b88:	mov	r0, r4
   13b8c:	bl	150dc <__assert_fail@plt+0x3888>
   13b90:	ldr	r1, [r4, #48]	; 0x30
   13b94:	cmp	r0, #0
   13b98:	beq	13bb8 <__assert_fail@plt+0x2364>
   13b9c:	orr	r0, r1, #8192	; 0x2000
   13ba0:	str	r0, [r4, #48]	; 0x30
   13ba4:	mov	r0, sl
   13ba8:	sub	sp, fp, #28
   13bac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bb0:	mov	sl, r0
   13bb4:	b	13e0c <__assert_fail@plt+0x25b8>
   13bb8:	movw	r0, #258	; 0x102
   13bbc:	tst	r1, r0
   13bc0:	beq	13f0c <__assert_fail@plt+0x26b8>
   13bc4:	ldr	r0, [r4, #56]	; 0x38
   13bc8:	cmp	r0, #0
   13bcc:	beq	13f14 <__assert_fail@plt+0x26c0>
   13bd0:	bl	15d8c <__assert_fail@plt+0x4538>
   13bd4:	b	13f14 <__assert_fail@plt+0x26c0>
   13bd8:	bic	r0, r0, #4096	; 0x1000
   13bdc:	str	r0, [r4, #48]	; 0x30
   13be0:	ldrd	r8, [r7, #8]
   13be4:	cmp	r9, #0
   13be8:	beq	13bf4 <__assert_fail@plt+0x23a0>
   13bec:	mov	r0, r9
   13bf0:	bl	1183c <closedir@plt>
   13bf4:	mov	r0, r7
   13bf8:	bl	1a978 <__assert_fail@plt+0x9124>
   13bfc:	cmp	r8, #0
   13c00:	mov	r7, r8
   13c04:	bne	13be0 <__assert_fail@plt+0x238c>
   13c08:	mov	r0, #0
   13c0c:	str	r0, [r4, #4]
   13c10:	mov	r0, r4
   13c14:	mov	r1, #3
   13c18:	bl	14500 <__assert_fail@plt+0x2cac>
   13c1c:	cmp	r0, #0
   13c20:	str	r0, [r4, #4]
   13c24:	beq	13dc0 <__assert_fail@plt+0x256c>
   13c28:	ldr	r6, [r4, #4]
   13c2c:	mov	r0, #0
   13c30:	str	r0, [r4, #4]
   13c34:	ldr	r0, [r6, #4]
   13c38:	ldr	r1, [r0, #28]
   13c3c:	ldr	r0, [r0, #40]	; 0x28
   13c40:	sub	r2, r0, #1
   13c44:	ldrb	r1, [r1, r2]
   13c48:	cmp	r1, #47	; 0x2f
   13c4c:	ldr	r1, [r4, #24]
   13c50:	moveq	r0, r2
   13c54:	mov	r2, #47	; 0x2f
   13c58:	strb	r2, [r1, r0]!
   13c5c:	ldr	r2, [r6, #52]	; 0x34
   13c60:	add	r0, r1, #1
   13c64:	add	r1, r6, #168	; 0xa8
   13c68:	add	r2, r2, #1
   13c6c:	bl	114e8 <memmove@plt>
   13c70:	str	r6, [r4]
   13c74:	ldrh	r0, [r6, #56]	; 0x38
   13c78:	cmp	r0, #11
   13c7c:	bne	13cb0 <__assert_fail@plt+0x245c>
   13c80:	ldrd	r0, [r6, #112]	; 0x70
   13c84:	eor	r2, r0, #1
   13c88:	orrs	r2, r2, r1
   13c8c:	beq	13d58 <__assert_fail@plt+0x2504>
   13c90:	eor	r0, r0, #2
   13c94:	orrs	r0, r0, r1
   13c98:	bne	14184 <__assert_fail@plt+0x2930>
   13c9c:	mov	r0, r4
   13ca0:	mov	r1, r6
   13ca4:	mov	r2, #0
   13ca8:	bl	13494 <__assert_fail@plt+0x1c40>
   13cac:	strh	r0, [r6, #56]	; 0x38
   13cb0:	cmp	r0, #1
   13cb4:	bne	13d48 <__assert_fail@plt+0x24f4>
   13cb8:	ldr	r0, [r6, #48]	; 0x30
   13cbc:	cmp	r0, #0
   13cc0:	ldrdeq	r0, [r6, #64]	; 0x40
   13cc4:	strdeq	r0, [r4, #16]
   13cc8:	movw	r1, #258	; 0x102
   13ccc:	ldrh	r0, [r4, #48]	; 0x30
   13cd0:	tst	r0, r1
   13cd4:	beq	13d68 <__assert_fail@plt+0x2514>
   13cd8:	mov	r0, #24
   13cdc:	bl	1a314 <__assert_fail@plt+0x8ac0>
   13ce0:	cmp	r0, #0
   13ce4:	beq	13d98 <__assert_fail@plt+0x2544>
   13ce8:	mov	r7, r0
   13cec:	ldrd	r0, [r6, #64]	; 0x40
   13cf0:	add	r2, r7, #8
   13cf4:	stm	r7, {r0, r1}
   13cf8:	ldrd	r0, [r6, #160]	; 0xa0
   13cfc:	stm	r2, {r0, r1, r6}
   13d00:	mov	r1, r7
   13d04:	ldr	r0, [r4, #56]	; 0x38
   13d08:	bl	166a8 <__assert_fail@plt+0x4e54>
   13d0c:	cmp	r0, r7
   13d10:	beq	13de8 <__assert_fail@plt+0x2594>
   13d14:	mov	r4, r0
   13d18:	mov	r0, r7
   13d1c:	bl	1a978 <__assert_fail@plt+0x9124>
   13d20:	cmp	r4, #0
   13d24:	beq	13d98 <__assert_fail@plt+0x2544>
   13d28:	ldr	r0, [r4, #16]
   13d2c:	mov	r1, #2
   13d30:	mov	sl, r6
   13d34:	strh	r1, [r6, #56]	; 0x38
   13d38:	str	r0, [r6]
   13d3c:	mov	r0, sl
   13d40:	sub	sp, fp, #28
   13d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d48:	mov	sl, r6
   13d4c:	mov	r0, sl
   13d50:	sub	sp, fp, #28
   13d54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d58:	mov	sl, r6
   13d5c:	mov	r0, sl
   13d60:	sub	sp, fp, #28
   13d64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d68:	ldr	r0, [r4, #56]	; 0x38
   13d6c:	add	r1, r6, #64	; 0x40
   13d70:	bl	1a574 <__assert_fail@plt+0x8d20>
   13d74:	cmp	r0, #0
   13d78:	beq	13db0 <__assert_fail@plt+0x255c>
   13d7c:	mov	r0, #2
   13d80:	mov	sl, r6
   13d84:	strh	r0, [r6, #56]	; 0x38
   13d88:	str	r6, [r6]
   13d8c:	mov	r0, sl
   13d90:	sub	sp, fp, #28
   13d94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d98:	bl	116d4 <__errno_location@plt>
   13d9c:	mov	r1, #12
   13da0:	str	r1, [r0]
   13da4:	mov	r0, sl
   13da8:	sub	sp, fp, #28
   13dac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13db0:	mov	sl, r6
   13db4:	mov	r0, sl
   13db8:	sub	sp, fp, #28
   13dbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dc0:	ldrb	r0, [r4, #49]	; 0x31
   13dc4:	tst	r0, #32
   13dc8:	bne	14178 <__assert_fail@plt+0x2924>
   13dcc:	ldr	r0, [r6, #32]
   13dd0:	cmp	r0, #0
   13dd4:	ldrhne	r0, [r5]
   13dd8:	cmpne	r0, #4
   13ddc:	movne	r0, #7
   13de0:	strhne	r0, [r5]
   13de4:	b	13a24 <__assert_fail@plt+0x21d0>
   13de8:	mov	sl, r6
   13dec:	mov	r0, sl
   13df0:	sub	sp, fp, #28
   13df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13df8:	ldrb	r0, [r4, #49]	; 0x31
   13dfc:	mov	sl, #0
   13e00:	tst	r0, #32
   13e04:	bne	14178 <__assert_fail@plt+0x2924>
   13e08:	ldr	sl, [r7, #4]
   13e0c:	mov	r0, r7
   13e10:	str	sl, [r4]
   13e14:	bl	1a978 <__assert_fail@plt+0x9124>
   13e18:	ldr	r0, [sl, #48]	; 0x30
   13e1c:	cmn	r0, #1
   13e20:	beq	13ec0 <__assert_fail@plt+0x266c>
   13e24:	ldrh	r0, [sl, #56]	; 0x38
   13e28:	cmp	r0, #11
   13e2c:	beq	14184 <__assert_fail@plt+0x2930>
   13e30:	ldr	r0, [sl, #40]	; 0x28
   13e34:	ldr	r1, [r4, #24]
   13e38:	mov	r2, #0
   13e3c:	strb	r2, [r1, r0]
   13e40:	ldr	r0, [sl, #48]	; 0x30
   13e44:	cmp	r0, #0
   13e48:	beq	14004 <__assert_fail@plt+0x27b0>
   13e4c:	ldrh	r0, [sl, #58]	; 0x3a
   13e50:	tst	r0, #2
   13e54:	bne	1403c <__assert_fail@plt+0x27e8>
   13e58:	tst	r0, #1
   13e5c:	bne	1413c <__assert_fail@plt+0x28e8>
   13e60:	ldr	r1, [sl, #4]
   13e64:	movw	r3, #49378	; 0xc0e2
   13e68:	mov	r0, r4
   13e6c:	mvn	r2, #0
   13e70:	movt	r3, #1
   13e74:	bl	14258 <__assert_fail@plt+0x2a04>
   13e78:	cmp	r0, #0
   13e7c:	bne	14014 <__assert_fail@plt+0x27c0>
   13e80:	b	1413c <__assert_fail@plt+0x28e8>
   13e84:	ldr	r0, [r4, #32]
   13e88:	movw	r1, #49379	; 0xc0e3
   13e8c:	movt	r1, #1
   13e90:	bl	16a74 <__assert_fail@plt+0x5220>
   13e94:	cmn	r0, #1
   13e98:	str	r0, [r6, #36]	; 0x24
   13e9c:	ble	13ee4 <__assert_fail@plt+0x2690>
   13ea0:	ldrh	r0, [r6, #58]	; 0x3a
   13ea4:	orr	r0, r0, #2
   13ea8:	strh	r0, [r6, #58]	; 0x3a
   13eac:	str	r6, [r4]
   13eb0:	ldrh	r0, [r6, #56]	; 0x38
   13eb4:	cmp	r0, #11
   13eb8:	beq	13c80 <__assert_fail@plt+0x242c>
   13ebc:	b	13cb0 <__assert_fail@plt+0x245c>
   13ec0:	mov	r0, sl
   13ec4:	bl	1a978 <__assert_fail@plt+0x9124>
   13ec8:	bl	116d4 <__errno_location@plt>
   13ecc:	mov	sl, #0
   13ed0:	str	sl, [r0]
   13ed4:	str	sl, [r4]
   13ed8:	mov	r0, sl
   13edc:	sub	sp, fp, #28
   13ee0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ee4:	bl	116d4 <__errno_location@plt>
   13ee8:	ldr	r0, [r0]
   13eec:	mov	r1, #7
   13ef0:	strh	r1, [r6, #56]	; 0x38
   13ef4:	str	r0, [r6, #32]
   13ef8:	str	r6, [r4]
   13efc:	ldrh	r0, [r6, #56]	; 0x38
   13f00:	cmp	r0, #11
   13f04:	beq	13c80 <__assert_fail@plt+0x242c>
   13f08:	b	13cb0 <__assert_fail@plt+0x245c>
   13f0c:	ldr	r0, [r4, #56]	; 0x38
   13f10:	bl	1a978 <__assert_fail@plt+0x9124>
   13f14:	ldr	r1, [r6, #52]	; 0x34
   13f18:	add	r7, r6, #168	; 0xa8
   13f1c:	str	r1, [r6, #40]	; 0x28
   13f20:	add	r2, r1, #1
   13f24:	mov	r1, r7
   13f28:	ldr	r0, [r4, #24]
   13f2c:	bl	114e8 <memmove@plt>
   13f30:	mov	r0, r7
   13f34:	mov	r1, #47	; 0x2f
   13f38:	bl	1177c <strrchr@plt>
   13f3c:	cmp	r0, #0
   13f40:	beq	13f7c <__assert_fail@plt+0x2728>
   13f44:	cmp	r0, r7
   13f48:	bne	13f58 <__assert_fail@plt+0x2704>
   13f4c:	ldrb	r1, [r6, #169]	; 0xa9
   13f50:	cmp	r1, #0
   13f54:	beq	13f7c <__assert_fail@plt+0x2728>
   13f58:	add	r8, r0, #1
   13f5c:	mov	r0, r8
   13f60:	bl	116b0 <strlen@plt>
   13f64:	mov	r9, r0
   13f68:	add	r2, r0, #1
   13f6c:	mov	r0, r7
   13f70:	mov	r1, r8
   13f74:	bl	114e8 <memmove@plt>
   13f78:	str	r9, [r6, #52]	; 0x34
   13f7c:	ldr	r0, [r4, #24]
   13f80:	movw	r1, #258	; 0x102
   13f84:	str	r0, [r6, #24]
   13f88:	str	r0, [r6, #28]
   13f8c:	ldrh	r0, [r4, #48]	; 0x30
   13f90:	tst	r0, r1
   13f94:	beq	13fd8 <__assert_fail@plt+0x2784>
   13f98:	movw	r0, #43384	; 0xa978
   13f9c:	movw	r2, #21428	; 0x53b4
   13fa0:	movw	r3, #21460	; 0x53d4
   13fa4:	mov	r1, #0
   13fa8:	movt	r0, #1
   13fac:	movt	r2, #1
   13fb0:	movt	r3, #1
   13fb4:	str	r0, [sp]
   13fb8:	mov	r0, #31
   13fbc:	bl	15a70 <__assert_fail@plt+0x421c>
   13fc0:	str	r0, [r4, #56]	; 0x38
   13fc4:	str	r6, [r4]
   13fc8:	ldrh	r0, [r6, #56]	; 0x38
   13fcc:	cmp	r0, #11
   13fd0:	beq	13c80 <__assert_fail@plt+0x242c>
   13fd4:	b	13cb0 <__assert_fail@plt+0x245c>
   13fd8:	mov	r0, #32
   13fdc:	bl	1a314 <__assert_fail@plt+0x8ac0>
   13fe0:	cmp	r0, #0
   13fe4:	str	r0, [r4, #56]	; 0x38
   13fe8:	beq	13c70 <__assert_fail@plt+0x241c>
   13fec:	bl	1a558 <__assert_fail@plt+0x8d04>
   13ff0:	str	r6, [r4]
   13ff4:	ldrh	r0, [r6, #56]	; 0x38
   13ff8:	cmp	r0, #11
   13ffc:	beq	13c80 <__assert_fail@plt+0x242c>
   14000:	b	13cb0 <__assert_fail@plt+0x245c>
   14004:	mov	r0, r4
   14008:	bl	150dc <__assert_fail@plt+0x3888>
   1400c:	cmp	r0, #0
   14010:	beq	1413c <__assert_fail@plt+0x28e8>
   14014:	bl	116d4 <__errno_location@plt>
   14018:	ldr	r0, [r0]
   1401c:	str	r0, [sl, #32]
   14020:	ldr	r0, [r4, #48]	; 0x30
   14024:	orr	r0, r0, #8192	; 0x2000
   14028:	str	r0, [r4, #48]	; 0x30
   1402c:	ldrh	r0, [sl, #56]	; 0x38
   14030:	cmp	r0, #2
   14034:	bne	14148 <__assert_fail@plt+0x28f4>
   14038:	b	1416c <__assert_fail@plt+0x2918>
   1403c:	ldr	r0, [r4, #48]	; 0x30
   14040:	tst	r0, #4
   14044:	bne	140bc <__assert_fail@plt+0x2868>
   14048:	mov	r5, sl
   1404c:	tst	r0, #512	; 0x200
   14050:	ldr	r6, [r5, #36]!	; 0x24
   14054:	bne	14108 <__assert_fail@plt+0x28b4>
   14058:	mov	r0, r6
   1405c:	bl	117b8 <fchdir@plt>
   14060:	cmp	r0, #0
   14064:	beq	14134 <__assert_fail@plt+0x28e0>
   14068:	bl	116d4 <__errno_location@plt>
   1406c:	ldr	r0, [r0]
   14070:	str	r0, [sl, #32]
   14074:	ldr	r0, [r4, #48]	; 0x30
   14078:	orr	r0, r0, #8192	; 0x2000
   1407c:	str	r0, [r4, #48]	; 0x30
   14080:	b	14134 <__assert_fail@plt+0x28e0>
   14084:	mov	r1, #32768	; 0x8000
   14088:	tst	r0, #512	; 0x200
   1408c:	and	r1, r1, r0, lsl #11
   14090:	orr	r1, r1, #18688	; 0x4900
   14094:	orr	r2, r1, #524288	; 0x80000
   14098:	bne	140c4 <__assert_fail@plt+0x2870>
   1409c:	movw	r0, #49379	; 0xc0e3
   140a0:	mov	r1, r2
   140a4:	movt	r0, #1
   140a8:	bl	1a8c8 <__assert_fail@plt+0x9074>
   140ac:	cmn	r0, #1
   140b0:	str	r0, [r6, #36]	; 0x24
   140b4:	bgt	140e0 <__assert_fail@plt+0x288c>
   140b8:	b	140f0 <__assert_fail@plt+0x289c>
   140bc:	add	r5, sl, #36	; 0x24
   140c0:	b	14134 <__assert_fail@plt+0x28e0>
   140c4:	ldr	r0, [r4, #32]
   140c8:	movw	r1, #49379	; 0xc0e3
   140cc:	movt	r1, #1
   140d0:	bl	16a74 <__assert_fail@plt+0x5220>
   140d4:	cmn	r0, #1
   140d8:	str	r0, [r6, #36]	; 0x24
   140dc:	ble	140f0 <__assert_fail@plt+0x289c>
   140e0:	ldrh	r0, [r6, #58]	; 0x3a
   140e4:	orr	r0, r0, #2
   140e8:	strh	r0, [r6, #58]	; 0x3a
   140ec:	b	13aa4 <__assert_fail@plt+0x2250>
   140f0:	bl	116d4 <__errno_location@plt>
   140f4:	ldr	r0, [r0]
   140f8:	mov	r1, #7
   140fc:	strh	r1, [r6, #56]	; 0x38
   14100:	str	r0, [r6, #32]
   14104:	b	13aa4 <__assert_fail@plt+0x2250>
   14108:	ldr	r1, [r4, #32]
   1410c:	cmp	r1, r6
   14110:	bne	1411c <__assert_fail@plt+0x28c8>
   14114:	cmn	r1, #100	; 0x64
   14118:	bne	14184 <__assert_fail@plt+0x2930>
   1411c:	add	r0, r4, #60	; 0x3c
   14120:	bl	169d0 <__assert_fail@plt+0x517c>
   14124:	cmp	r0, #0
   14128:	blt	14130 <__assert_fail@plt+0x28dc>
   1412c:	bl	11824 <close@plt>
   14130:	str	r6, [r4, #32]
   14134:	ldr	r0, [r5]
   14138:	bl	11824 <close@plt>
   1413c:	ldrh	r0, [sl, #56]	; 0x38
   14140:	cmp	r0, #2
   14144:	beq	1416c <__assert_fail@plt+0x2918>
   14148:	ldr	r0, [sl, #32]
   1414c:	mov	r1, #7
   14150:	cmp	r0, #0
   14154:	movweq	r1, #6
   14158:	strh	r1, [sl, #56]	; 0x38
   1415c:	bne	1416c <__assert_fail@plt+0x2918>
   14160:	mov	r0, r4
   14164:	mov	r1, sl
   14168:	bl	14188 <__assert_fail@plt+0x2934>
   1416c:	ldrb	r0, [r4, #49]	; 0x31
   14170:	tst	r0, #32
   14174:	movne	sl, #0
   14178:	mov	r0, sl
   1417c:	sub	sp, fp, #28
   14180:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14184:	bl	11818 <abort@plt>
   14188:	push	{r4, r5, r6, r7, fp, lr}
   1418c:	add	fp, sp, #16
   14190:	sub	sp, sp, #24
   14194:	ldrh	r2, [r0, #48]	; 0x30
   14198:	movw	r3, #258	; 0x102
   1419c:	add	lr, r1, #64	; 0x40
   141a0:	tst	r2, r3
   141a4:	beq	141dc <__assert_fail@plt+0x2988>
   141a8:	ldrd	r2, [lr]
   141ac:	stm	sp, {r2, r3}
   141b0:	ldrd	r2, [r1, #160]	; 0xa0
   141b4:	mov	r1, sp
   141b8:	str	r3, [sp, #12]
   141bc:	str	r2, [sp, #8]
   141c0:	ldr	r0, [r0, #56]	; 0x38
   141c4:	bl	166f0 <__assert_fail@plt+0x4e9c>
   141c8:	cmp	r0, #0
   141cc:	beq	14254 <__assert_fail@plt+0x2a00>
   141d0:	bl	1a978 <__assert_fail@plt+0x9124>
   141d4:	sub	sp, fp, #16
   141d8:	pop	{r4, r5, r6, r7, fp, pc}
   141dc:	ldr	r2, [r1, #4]
   141e0:	cmp	r2, #0
   141e4:	beq	1424c <__assert_fail@plt+0x29f8>
   141e8:	ldr	r3, [r2, #48]	; 0x30
   141ec:	cmp	r3, #0
   141f0:	blt	1424c <__assert_fail@plt+0x29f8>
   141f4:	ldr	ip, [r0, #56]	; 0x38
   141f8:	ldrd	r4, [ip, #16]
   141fc:	orrs	r3, r4, r5
   14200:	beq	14254 <__assert_fail@plt+0x2a00>
   14204:	ldrd	r4, [r1, #160]	; 0xa0
   14208:	ldrd	r6, [ip]
   1420c:	eor	r1, r7, r5
   14210:	eor	r3, r6, r4
   14214:	orrs	r1, r3, r1
   14218:	bne	1424c <__assert_fail@plt+0x29f8>
   1421c:	ldr	r1, [ip, #8]!
   14220:	ldrd	r4, [lr]
   14224:	ldr	r3, [ip, #4]
   14228:	eor	r1, r1, r4
   1422c:	eor	r3, r3, r5
   14230:	orrs	r1, r1, r3
   14234:	bne	1424c <__assert_fail@plt+0x29f8>
   14238:	ldrd	r4, [r2, #64]	; 0x40
   1423c:	strd	r4, [ip]
   14240:	ldr	r0, [r0, #56]	; 0x38
   14244:	ldrd	r2, [r2, #160]	; 0xa0
   14248:	strd	r2, [r0]
   1424c:	sub	sp, fp, #16
   14250:	pop	{r4, r5, r6, r7, fp, pc}
   14254:	bl	11818 <abort@plt>
   14258:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1425c:	add	fp, sp, #28
   14260:	sub	sp, sp, #108	; 0x6c
   14264:	mov	r7, r3
   14268:	mov	r4, r2
   1426c:	mov	r8, r1
   14270:	mov	sl, r0
   14274:	cmp	r3, #0
   14278:	beq	14304 <__assert_fail@plt+0x2ab0>
   1427c:	movw	r1, #49378	; 0xc0e2
   14280:	mov	r0, r7
   14284:	movt	r1, #1
   14288:	bl	114c4 <strcmp@plt>
   1428c:	mov	r6, r0
   14290:	cmp	r0, #0
   14294:	movwne	r6, #1
   14298:	ldr	r0, [sl, #48]	; 0x30
   1429c:	tst	r0, #4
   142a0:	bne	14314 <__assert_fail@plt+0x2ac0>
   142a4:	cmn	r4, #1
   142a8:	mov	r1, #0
   142ac:	mov	r9, #0
   142b0:	movwgt	r1, #1
   142b4:	orrs	r1, r1, r6
   142b8:	bne	1433c <__assert_fail@plt+0x2ae8>
   142bc:	ands	r0, r0, #512	; 0x200
   142c0:	beq	1433c <__assert_fail@plt+0x2ae8>
   142c4:	add	r4, sl, #60	; 0x3c
   142c8:	mov	r0, r4
   142cc:	bl	169c8 <__assert_fail@plt+0x5174>
   142d0:	cmp	r0, #0
   142d4:	bne	14344 <__assert_fail@plt+0x2af0>
   142d8:	mov	r0, r4
   142dc:	bl	16a1c <__assert_fail@plt+0x51c8>
   142e0:	cmn	r0, #1
   142e4:	ble	14344 <__assert_fail@plt+0x2af0>
   142e8:	mov	r4, r0
   142ec:	mov	r9, #0
   142f0:	mov	r7, #0
   142f4:	ldr	r5, [sl, #48]	; 0x30
   142f8:	tst	r5, #2
   142fc:	beq	14388 <__assert_fail@plt+0x2b34>
   14300:	b	143d0 <__assert_fail@plt+0x2b7c>
   14304:	mov	r6, #1
   14308:	ldr	r0, [sl, #48]	; 0x30
   1430c:	tst	r0, #4
   14310:	beq	142a4 <__assert_fail@plt+0x2a50>
   14314:	mov	r5, #0
   14318:	cmp	r4, #0
   1431c:	blt	143c4 <__assert_fail@plt+0x2b70>
   14320:	ands	r0, r0, #512	; 0x200
   14324:	beq	143c4 <__assert_fail@plt+0x2b70>
   14328:	mov	r0, r4
   1432c:	bl	11824 <close@plt>
   14330:	mov	r0, r5
   14334:	sub	sp, fp, #28
   14338:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1433c:	cmn	r4, #1
   14340:	bgt	1437c <__assert_fail@plt+0x2b28>
   14344:	ldr	r0, [sl, #48]	; 0x30
   14348:	mov	r1, #32768	; 0x8000
   1434c:	and	r1, r1, r0, lsl #11
   14350:	tst	r0, #512	; 0x200
   14354:	orr	r1, r1, #18688	; 0x4900
   14358:	orr	r2, r1, #524288	; 0x80000
   1435c:	bne	143f8 <__assert_fail@plt+0x2ba4>
   14360:	mov	r0, r7
   14364:	mov	r1, r2
   14368:	bl	1a8c8 <__assert_fail@plt+0x9074>
   1436c:	mov	r4, r0
   14370:	mov	r9, #1
   14374:	cmp	r0, #0
   14378:	blt	14414 <__assert_fail@plt+0x2bc0>
   1437c:	ldr	r5, [sl, #48]	; 0x30
   14380:	tst	r5, #2
   14384:	bne	143d0 <__assert_fail@plt+0x2b7c>
   14388:	cmp	r7, #0
   1438c:	beq	143a8 <__assert_fail@plt+0x2b54>
   14390:	movw	r1, #49378	; 0xc0e2
   14394:	mov	r0, r7
   14398:	movt	r1, #1
   1439c:	bl	114c4 <strcmp@plt>
   143a0:	cmp	r0, #0
   143a4:	beq	143d0 <__assert_fail@plt+0x2b7c>
   143a8:	tst	r5, #512	; 0x200
   143ac:	bne	14464 <__assert_fail@plt+0x2c10>
   143b0:	mov	r0, r4
   143b4:	bl	117b8 <fchdir@plt>
   143b8:	mov	r5, r0
   143bc:	cmp	r9, #0
   143c0:	bne	144ac <__assert_fail@plt+0x2c58>
   143c4:	mov	r0, r5
   143c8:	sub	sp, fp, #28
   143cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143d0:	mov	r2, sp
   143d4:	mov	r0, #3
   143d8:	mov	r1, r4
   143dc:	bl	115a8 <__fxstat64@plt>
   143e0:	cmp	r0, #0
   143e4:	beq	14424 <__assert_fail@plt+0x2bd0>
   143e8:	mvn	r5, #0
   143ec:	cmp	r9, #0
   143f0:	beq	143c4 <__assert_fail@plt+0x2b70>
   143f4:	b	144ac <__assert_fail@plt+0x2c58>
   143f8:	ldr	r0, [sl, #32]
   143fc:	mov	r1, r7
   14400:	bl	16a74 <__assert_fail@plt+0x5220>
   14404:	mov	r4, r0
   14408:	mov	r9, #1
   1440c:	cmp	r0, #0
   14410:	bge	1437c <__assert_fail@plt+0x2b28>
   14414:	mvn	r5, #0
   14418:	mov	r0, r5
   1441c:	sub	sp, fp, #28
   14420:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14424:	ldrd	r0, [r8, #64]	; 0x40
   14428:	ldm	sp, {r2, r3}
   1442c:	eor	r1, r1, r3
   14430:	eor	r0, r0, r2
   14434:	orrs	r0, r0, r1
   14438:	bne	14494 <__assert_fail@plt+0x2c40>
   1443c:	ldrd	r0, [r8, #160]	; 0xa0
   14440:	ldr	r2, [sp, #96]	; 0x60
   14444:	ldr	r3, [sp, #100]	; 0x64
   14448:	eor	r1, r1, r3
   1444c:	eor	r0, r0, r2
   14450:	orrs	r0, r0, r1
   14454:	bne	14494 <__assert_fail@plt+0x2c40>
   14458:	ldr	r5, [sl, #48]	; 0x30
   1445c:	tst	r5, #512	; 0x200
   14460:	beq	143b0 <__assert_fail@plt+0x2b5c>
   14464:	ldr	r1, [sl, #32]
   14468:	cmp	r1, r4
   1446c:	bne	14478 <__assert_fail@plt+0x2c24>
   14470:	cmn	r1, #100	; 0x64
   14474:	bne	144fc <__assert_fail@plt+0x2ca8>
   14478:	cmp	r6, #0
   1447c:	beq	144d0 <__assert_fail@plt+0x2c7c>
   14480:	add	r0, sl, #60	; 0x3c
   14484:	bl	169d0 <__assert_fail@plt+0x517c>
   14488:	cmp	r0, #0
   1448c:	bge	144e4 <__assert_fail@plt+0x2c90>
   14490:	b	144e8 <__assert_fail@plt+0x2c94>
   14494:	bl	116d4 <__errno_location@plt>
   14498:	mov	r1, #2
   1449c:	str	r1, [r0]
   144a0:	mvn	r5, #0
   144a4:	cmp	r9, #0
   144a8:	beq	143c4 <__assert_fail@plt+0x2b70>
   144ac:	bl	116d4 <__errno_location@plt>
   144b0:	ldr	r7, [r0]
   144b4:	mov	r6, r0
   144b8:	mov	r0, r4
   144bc:	bl	11824 <close@plt>
   144c0:	str	r7, [r6]
   144c4:	mov	r0, r5
   144c8:	sub	sp, fp, #28
   144cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144d0:	tst	r5, #4
   144d4:	bne	144e8 <__assert_fail@plt+0x2c94>
   144d8:	cmp	r1, #0
   144dc:	blt	144e8 <__assert_fail@plt+0x2c94>
   144e0:	mov	r0, r1
   144e4:	bl	11824 <close@plt>
   144e8:	str	r4, [sl, #32]
   144ec:	mov	r5, #0
   144f0:	mov	r0, r5
   144f4:	sub	sp, fp, #28
   144f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144fc:	bl	11818 <abort@plt>
   14500:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14504:	add	fp, sp, #28
   14508:	sub	sp, sp, #76	; 0x4c
   1450c:	ldr	r8, [r0]
   14510:	mov	r9, r1
   14514:	mov	r5, r0
   14518:	str	r0, [sp, #52]	; 0x34
   1451c:	ldr	r4, [r8, #12]
   14520:	cmp	r4, #0
   14524:	beq	14570 <__assert_fail@plt+0x2d1c>
   14528:	mov	r0, r4
   1452c:	bl	117ac <dirfd@plt>
   14530:	cmn	r0, #1
   14534:	str	r0, [fp, #-32]	; 0xffffffe0
   14538:	ble	145a8 <__assert_fail@plt+0x2d54>
   1453c:	mov	r1, r5
   14540:	mvn	r2, #0
   14544:	str	r4, [sp, #12]
   14548:	str	r9, [sp, #4]
   1454c:	mov	ip, #0
   14550:	ldr	r0, [r1, #44]!	; 0x2c
   14554:	cmp	r0, #0
   14558:	str	r1, [fp, #-48]	; 0xffffffd0
   1455c:	add	sl, r1, #4
   14560:	movweq	r2, #34464	; 0x86a0
   14564:	movteq	r2, #1
   14568:	str	r2, [sp, #28]
   1456c:	b	14838 <__assert_fail@plt+0x2fe4>
   14570:	mov	sl, r5
   14574:	mvn	r0, #99	; 0x63
   14578:	mov	r2, #0
   1457c:	ldr	r3, [sl, #48]!	; 0x30
   14580:	and	r1, r3, #516	; 0x204
   14584:	cmp	r1, #512	; 0x200
   14588:	ldr	r1, [r8, #24]
   1458c:	ldreq	r0, [r5, #32]
   14590:	tst	r3, #16
   14594:	beq	145d0 <__assert_fail@plt+0x2d7c>
   14598:	tst	r3, #1
   1459c:	bne	145c4 <__assert_fail@plt+0x2d70>
   145a0:	mov	r2, #32768	; 0x8000
   145a4:	b	145d0 <__assert_fail@plt+0x2d7c>
   145a8:	ldr	r0, [r8, #12]
   145ac:	bl	1183c <closedir@plt>
   145b0:	mov	r6, #0
   145b4:	str	r6, [r8, #12]
   145b8:	cmp	r9, #3
   145bc:	beq	1461c <__assert_fail@plt+0x2dc8>
   145c0:	b	14eec <__assert_fail@plt+0x3698>
   145c4:	ldr	r3, [r8, #48]	; 0x30
   145c8:	cmp	r3, #0
   145cc:	movne	r2, #32768	; 0x8000
   145d0:	sub	r3, fp, #32
   145d4:	bl	16ab8 <__assert_fail@plt+0x5264>
   145d8:	cmp	r0, #0
   145dc:	str	r0, [r8, #12]
   145e0:	beq	14610 <__assert_fail@plt+0x2dbc>
   145e4:	ldrh	r0, [r8, #56]	; 0x38
   145e8:	cmp	r0, #11
   145ec:	bne	1463c <__assert_fail@plt+0x2de8>
   145f0:	mov	r0, r5
   145f4:	mov	r1, r8
   145f8:	mov	r2, #0
   145fc:	bl	13494 <__assert_fail@plt+0x1c40>
   14600:	mov	r7, r8
   14604:	strh	r0, [r8, #56]	; 0x38
   14608:	mov	r6, r5
   1460c:	b	14710 <__assert_fail@plt+0x2ebc>
   14610:	mov	r6, #0
   14614:	cmp	r9, #3
   14618:	bne	14eec <__assert_fail@plt+0x3698>
   1461c:	mov	r0, #4
   14620:	strh	r0, [r8, #56]	; 0x38
   14624:	bl	116d4 <__errno_location@plt>
   14628:	ldr	r0, [r0]
   1462c:	str	r0, [r8, #32]
   14630:	mov	r0, r6
   14634:	sub	sp, fp, #28
   14638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1463c:	ldrb	r0, [sl, #1]
   14640:	mov	r7, r8
   14644:	mov	r6, r5
   14648:	tst	r0, #1
   1464c:	beq	14710 <__assert_fail@plt+0x2ebc>
   14650:	mov	r0, r6
   14654:	mov	r1, r7
   14658:	mov	r5, r7
   1465c:	bl	14188 <__assert_fail@plt+0x2934>
   14660:	mov	r0, r6
   14664:	mov	r1, r7
   14668:	mov	r2, #0
   1466c:	bl	13494 <__assert_fail@plt+0x1c40>
   14670:	ldrh	r0, [r6, #48]	; 0x30
   14674:	movw	r1, #258	; 0x102
   14678:	tst	r0, r1
   1467c:	beq	146f0 <__assert_fail@plt+0x2e9c>
   14680:	mov	r0, #24
   14684:	bl	1a314 <__assert_fail@plt+0x8ac0>
   14688:	cmp	r0, #0
   1468c:	beq	150a8 <__assert_fail@plt+0x3854>
   14690:	mov	r5, r0
   14694:	ldrd	r0, [r7, #64]	; 0x40
   14698:	add	r2, r5, #8
   1469c:	stm	r5, {r0, r1}
   146a0:	ldrd	r0, [r7, #160]	; 0xa0
   146a4:	stm	r2, {r0, r1, r7}
   146a8:	mov	r1, r5
   146ac:	ldr	r6, [sp, #52]	; 0x34
   146b0:	ldr	r0, [r6, #56]	; 0x38
   146b4:	bl	166a8 <__assert_fail@plt+0x4e54>
   146b8:	cmp	r0, r5
   146bc:	beq	14710 <__assert_fail@plt+0x2ebc>
   146c0:	mov	r8, r0
   146c4:	mov	r0, r5
   146c8:	bl	1a978 <__assert_fail@plt+0x9124>
   146cc:	cmp	r8, #0
   146d0:	beq	150a8 <__assert_fail@plt+0x3854>
   146d4:	ldr	r0, [r8, #16]
   146d8:	ldr	r6, [sp, #52]	; 0x34
   146dc:	mov	r1, #2
   146e0:	mov	r2, r7
   146e4:	strh	r1, [r7, #56]	; 0x38
   146e8:	str	r0, [r7]
   146ec:	b	14710 <__assert_fail@plt+0x2ebc>
   146f0:	ldr	r0, [r6, #56]	; 0x38
   146f4:	add	r1, r5, #64	; 0x40
   146f8:	bl	1a574 <__assert_fail@plt+0x8d20>
   146fc:	cmp	r0, #0
   14700:	movne	r0, #2
   14704:	movne	r1, r7
   14708:	strhne	r0, [r7, #56]	; 0x38
   1470c:	strne	r7, [r7]
   14710:	mov	r1, r6
   14714:	mov	r5, r6
   14718:	mov	r8, r7
   1471c:	str	r9, [sp, #4]
   14720:	str	r4, [sp, #12]
   14724:	ldr	r0, [r1, #44]!	; 0x2c
   14728:	str	r1, [fp, #-48]	; 0xffffffd0
   1472c:	mvn	r1, #0
   14730:	cmp	r0, #0
   14734:	movweq	r1, #34464	; 0x86a0
   14738:	movteq	r1, #1
   1473c:	cmp	r9, #2
   14740:	str	r1, [sp, #28]
   14744:	bne	14760 <__assert_fail@plt+0x2f0c>
   14748:	mov	ip, #1
   1474c:	cmp	r9, #3
   14750:	bne	14838 <__assert_fail@plt+0x2fe4>
   14754:	sub	r0, r9, #3
   14758:	mov	r5, #0
   1475c:	b	14780 <__assert_fail@plt+0x2f2c>
   14760:	ldr	r0, [sl]
   14764:	and	r0, r0, #56	; 0x38
   14768:	cmp	r0, #24
   1476c:	ldreq	r0, [r8, #84]	; 0x54
   14770:	cmpeq	r0, #2
   14774:	beq	15068 <__assert_fail@plt+0x3814>
   14778:	sub	r0, r9, #3
   1477c:	mov	r5, #1
   14780:	clz	r0, r0
   14784:	lsr	r6, r0, #5
   14788:	ldrb	r0, [sl, #1]
   1478c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14790:	tst	r0, #2
   14794:	beq	147b0 <__assert_fail@plt+0x2f5c>
   14798:	mov	r0, r2
   1479c:	movw	r1, #1030	; 0x406
   147a0:	mov	r2, #3
   147a4:	bl	1a6e8 <__assert_fail@plt+0x8e94>
   147a8:	mov	r2, r0
   147ac:	str	r0, [fp, #-32]	; 0xffffffe0
   147b0:	cmp	r2, #0
   147b4:	blt	147d0 <__assert_fail@plt+0x2f7c>
   147b8:	ldr	r0, [sp, #52]	; 0x34
   147bc:	mov	r1, r8
   147c0:	mov	r3, #0
   147c4:	bl	14258 <__assert_fail@plt+0x2a04>
   147c8:	cmp	r0, #0
   147cc:	beq	14830 <__assert_fail@plt+0x2fdc>
   147d0:	and	r0, r6, r5
   147d4:	cmp	r0, #1
   147d8:	bne	147e8 <__assert_fail@plt+0x2f94>
   147dc:	bl	116d4 <__errno_location@plt>
   147e0:	ldr	r0, [r0]
   147e4:	str	r0, [r8, #32]
   147e8:	ldrh	r0, [r8, #58]	; 0x3a
   147ec:	orr	r0, r0, #1
   147f0:	strh	r0, [r8, #58]	; 0x3a
   147f4:	ldr	r0, [r8, #12]
   147f8:	bl	1183c <closedir@plt>
   147fc:	mov	r4, #0
   14800:	ldr	r5, [sp, #52]	; 0x34
   14804:	str	r4, [r8, #12]
   14808:	ldr	r0, [sl]
   1480c:	tst	r0, #512	; 0x200
   14810:	beq	14824 <__assert_fail@plt+0x2fd0>
   14814:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14818:	cmp	r0, #0
   1481c:	blt	14824 <__assert_fail@plt+0x2fd0>
   14820:	bl	11824 <close@plt>
   14824:	mov	ip, #1
   14828:	str	r4, [r8, #12]
   1482c:	b	14838 <__assert_fail@plt+0x2fe4>
   14830:	ldr	r5, [sp, #52]	; 0x34
   14834:	mov	ip, #0
   14838:	ldr	r0, [r8, #40]	; 0x28
   1483c:	ldr	r1, [r8, #28]
   14840:	mov	r7, #0
   14844:	sub	r2, r0, #1
   14848:	ldrb	r1, [r1, r2]
   1484c:	cmp	r1, #47	; 0x2f
   14850:	ldrb	r1, [sl]
   14854:	moveq	r0, r2
   14858:	tst	r1, #4
   1485c:	mov	r1, #0
   14860:	str	r1, [sp, #40]	; 0x28
   14864:	beq	1487c <__assert_fail@plt+0x3028>
   14868:	ldr	r1, [r5, #24]
   1486c:	mov	r2, #47	; 0x2f
   14870:	strb	r2, [r1, r0]!
   14874:	add	r1, r1, #1
   14878:	str	r1, [sp, #40]	; 0x28
   1487c:	ldr	r6, [r8, #12]
   14880:	add	r1, r0, #1
   14884:	str	r1, [fp, #-44]	; 0xffffffd4
   14888:	cmp	r6, #0
   1488c:	beq	14c2c <__assert_fail@plt+0x33d8>
   14890:	ldr	r0, [r8, #48]	; 0x30
   14894:	str	ip, [sp]
   14898:	add	r0, r0, #1
   1489c:	str	r0, [sp, #20]
   148a0:	ldr	r0, [r5, #36]	; 0x24
   148a4:	mov	r5, #0
   148a8:	sub	r0, r0, r1
   148ac:	str	r0, [sp, #44]	; 0x2c
   148b0:	bl	116d4 <__errno_location@plt>
   148b4:	str	r0, [sp, #36]	; 0x24
   148b8:	mov	r0, #0
   148bc:	mov	r7, #0
   148c0:	mov	r4, #0
   148c4:	str	r8, [sp, #24]
   148c8:	str	sl, [sp, #32]
   148cc:	str	r0, [sp, #48]	; 0x30
   148d0:	mov	r0, #0
   148d4:	str	r0, [sp, #8]
   148d8:	mov	r0, #0
   148dc:	str	r0, [sp, #16]
   148e0:	ldr	r0, [sp, #36]	; 0x24
   148e4:	str	r7, [fp, #-36]	; 0xffffffdc
   148e8:	str	r5, [r0]
   148ec:	mov	r0, r6
   148f0:	bl	11794 <readdir64@plt>
   148f4:	cmp	r0, #0
   148f8:	beq	14d90 <__assert_fail@plt+0x353c>
   148fc:	mov	r9, r0
   14900:	ldrb	r0, [sl]
   14904:	str	r4, [fp, #-40]	; 0xffffffd8
   14908:	mov	r1, sl
   1490c:	add	r4, r9, #19
   14910:	tst	r0, #32
   14914:	ldrbeq	r0, [r4]
   14918:	cmpeq	r0, #46	; 0x2e
   1491c:	beq	14a18 <__assert_fail@plt+0x31c4>
   14920:	mov	r0, r4
   14924:	bl	116b0 <strlen@plt>
   14928:	mov	r5, r0
   1492c:	add	r0, r0, #176	; 0xb0
   14930:	bic	r0, r0, #7
   14934:	bl	1a314 <__assert_fail@plt+0x8ac0>
   14938:	mov	r6, r0
   1493c:	cmp	r0, #0
   14940:	beq	14f4c <__assert_fail@plt+0x36f8>
   14944:	add	sl, r6, #168	; 0xa8
   14948:	mov	r1, r4
   1494c:	mov	r2, r5
   14950:	mov	r0, sl
   14954:	bl	1150c <memcpy@plt>
   14958:	ldr	r2, [sp, #52]	; 0x34
   1495c:	mov	r0, #0
   14960:	mov	r1, #196608	; 0x30000
   14964:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14968:	strb	r0, [sl, r5]
   1496c:	str	r5, [r6, #52]	; 0x34
   14970:	str	r2, [r6, #44]	; 0x2c
   14974:	add	r7, r5, r3
   14978:	ldr	r4, [r2, #24]
   1497c:	str	r1, [r6, #58]	; 0x3a
   14980:	str	r0, [r6, #12]
   14984:	str	r0, [r6, #16]
   14988:	str	r0, [r6, #20]
   1498c:	str	r4, [r6, #28]
   14990:	str	r0, [r6, #32]
   14994:	ldr	r0, [sp, #44]	; 0x2c
   14998:	cmp	r5, r0
   1499c:	bcs	149b4 <__assert_fail@plt+0x3160>
   149a0:	ldr	r4, [fp, #-40]	; 0xffffffd8
   149a4:	mov	r5, r2
   149a8:	cmp	r7, r3
   149ac:	bcs	14a6c <__assert_fail@plt+0x3218>
   149b0:	b	14df0 <__assert_fail@plt+0x359c>
   149b4:	ldr	r1, [r2, #36]	; 0x24
   149b8:	movw	r0, #257	; 0x101
   149bc:	mov	r5, r2
   149c0:	add	r0, r7, r0
   149c4:	adds	r1, r0, r1
   149c8:	bcs	14ef8 <__assert_fail@plt+0x36a4>
   149cc:	mov	r0, r4
   149d0:	str	r1, [r5, #36]	; 0x24
   149d4:	bl	1a344 <__assert_fail@plt+0x8af0>
   149d8:	cmp	r0, #0
   149dc:	beq	14f38 <__assert_fail@plt+0x36e4>
   149e0:	cmp	r0, r4
   149e4:	str	r0, [r5, #24]
   149e8:	beq	14a50 <__assert_fail@plt+0x31fc>
   149ec:	ldr	r1, [sp, #32]
   149f0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   149f4:	ldr	r4, [fp, #-40]	; 0xffffffd8
   149f8:	ldrb	r1, [r1]
   149fc:	tst	r1, #4
   14a00:	ldr	r1, [sp, #40]	; 0x28
   14a04:	addne	r1, r0, r3
   14a08:	mov	r0, #1
   14a0c:	str	r1, [sp, #40]	; 0x28
   14a10:	str	r0, [sp, #16]
   14a14:	b	14a58 <__assert_fail@plt+0x3204>
   14a18:	ldrb	r0, [r9, #20]
   14a1c:	cmp	r0, #0
   14a20:	beq	14a34 <__assert_fail@plt+0x31e0>
   14a24:	cmp	r0, #46	; 0x2e
   14a28:	ldrbeq	r0, [r9, #21]
   14a2c:	cmpeq	r0, #0
   14a30:	bne	14920 <__assert_fail@plt+0x30cc>
   14a34:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14a38:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14a3c:	mov	r5, #0
   14a40:	ldr	r6, [r8, #12]
   14a44:	cmp	r6, #0
   14a48:	bne	148e0 <__assert_fail@plt+0x308c>
   14a4c:	b	14c10 <__assert_fail@plt+0x33bc>
   14a50:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14a54:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14a58:	ldr	r0, [r5, #36]	; 0x24
   14a5c:	sub	r0, r0, r3
   14a60:	str	r0, [sp, #44]	; 0x2c
   14a64:	cmp	r7, r3
   14a68:	bcc	14df0 <__assert_fail@plt+0x359c>
   14a6c:	ldr	r0, [sp, #20]
   14a70:	str	r0, [r6, #48]	; 0x30
   14a74:	ldr	r0, [r5]
   14a78:	str	r7, [r6, #40]	; 0x28
   14a7c:	str	r0, [r6, #4]
   14a80:	ldrd	r0, [r9]
   14a84:	strd	r0, [r6, #160]	; 0xa0
   14a88:	ldrb	r0, [r5, #48]	; 0x30
   14a8c:	tst	r0, #4
   14a90:	bne	14a9c <__assert_fail@plt+0x3248>
   14a94:	str	sl, [r6, #24]
   14a98:	b	14ab8 <__assert_fail@plt+0x3264>
   14a9c:	ldr	r0, [r6, #28]
   14aa0:	ldr	r1, [r6, #52]	; 0x34
   14aa4:	str	r0, [r6, #24]
   14aa8:	ldr	r0, [sp, #40]	; 0x28
   14aac:	add	r2, r1, #1
   14ab0:	mov	r1, sl
   14ab4:	bl	114e8 <memmove@plt>
   14ab8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14abc:	ldr	sl, [sp, #32]
   14ac0:	ldr	r8, [sp, #24]
   14ac4:	ldr	r0, [r0]
   14ac8:	ldr	r2, [sl]
   14acc:	cmp	r0, #0
   14ad0:	beq	14afc <__assert_fail@plt+0x32a8>
   14ad4:	ands	r0, r2, #1024	; 0x400
   14ad8:	bne	14afc <__assert_fail@plt+0x32a8>
   14adc:	mov	r0, r5
   14ae0:	mov	r1, r6
   14ae4:	mov	r2, #0
   14ae8:	bl	13494 <__assert_fail@plt+0x1c40>
   14aec:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14af0:	mov	r5, #0
   14af4:	strh	r0, [r6, #56]	; 0x38
   14af8:	b	14b74 <__assert_fail@plt+0x3320>
   14afc:	ldrb	r3, [r9, #18]
   14b00:	mov	r0, #0
   14b04:	tst	r2, #8
   14b08:	mov	r1, #0
   14b0c:	beq	14b30 <__assert_fail@plt+0x32dc>
   14b10:	orr	r1, r3, #4
   14b14:	cmp	r1, #4
   14b18:	mov	r1, #0
   14b1c:	beq	14b30 <__assert_fail@plt+0x32dc>
   14b20:	eor	r1, r3, #10
   14b24:	and	r2, r2, #16
   14b28:	orrs	r1, r2, r1
   14b2c:	movwne	r1, #1
   14b30:	mov	r2, #11
   14b34:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14b38:	mov	r5, #0
   14b3c:	strh	r2, [r6, #56]	; 0x38
   14b40:	sub	r2, r3, #1
   14b44:	uxtb	r3, r2
   14b48:	cmp	r3, #11
   14b4c:	sxtbls	r0, r2
   14b50:	movwls	r2, #49392	; 0xc0f0
   14b54:	movtls	r2, #1
   14b58:	ldrls	r0, [r2, r0, lsl #2]
   14b5c:	cmp	r1, #0
   14b60:	str	r0, [r6, #80]	; 0x50
   14b64:	mov	r0, #2
   14b68:	movwne	r0, #1
   14b6c:	str	r0, [r6, #112]	; 0x70
   14b70:	str	r5, [r6, #116]	; 0x74
   14b74:	cmp	r7, #0
   14b78:	str	r5, [r6, #8]
   14b7c:	ldrne	r0, [sp, #48]	; 0x30
   14b80:	moveq	r7, r6
   14b84:	strne	r6, [r0, #8]
   14b88:	movw	r0, #10000	; 0x2710
   14b8c:	cmp	r4, r0
   14b90:	bne	14be4 <__assert_fail@plt+0x3390>
   14b94:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14b98:	ldr	r0, [r0]
   14b9c:	cmp	r0, #0
   14ba0:	bne	14be4 <__assert_fail@plt+0x3390>
   14ba4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14ba8:	mov	r0, r8
   14bac:	bl	15454 <__assert_fail@plt+0x3c00>
   14bb0:	mov	r1, #0
   14bb4:	str	r1, [sp, #8]
   14bb8:	movw	r1, #19778	; 0x4d42
   14bbc:	movt	r1, #65363	; 0xff53
   14bc0:	cmp	r0, r1
   14bc4:	movwne	r1, #26985	; 0x6969
   14bc8:	cmpne	r0, r1
   14bcc:	beq	14be4 <__assert_fail@plt+0x3390>
   14bd0:	movw	r1, #6548	; 0x1994
   14bd4:	movt	r1, #258	; 0x102
   14bd8:	cmp	r0, r1
   14bdc:	movne	r0, #1
   14be0:	strne	r0, [sp, #8]
   14be4:	ldr	r0, [sp, #28]
   14be8:	add	r4, r4, #1
   14bec:	cmp	r0, r4
   14bf0:	mov	r0, #0
   14bf4:	movwls	r0, #15
   14bf8:	cmp	r0, #0
   14bfc:	bne	14e70 <__assert_fail@plt+0x361c>
   14c00:	str	r6, [sp, #48]	; 0x30
   14c04:	ldr	r6, [r8, #12]
   14c08:	cmp	r6, #0
   14c0c:	bne	148e0 <__assert_fail@plt+0x308c>
   14c10:	ldr	r0, [sp, #16]
   14c14:	ldr	ip, [sp]
   14c18:	ldr	r6, [sp, #8]
   14c1c:	ldr	r5, [sp, #52]	; 0x34
   14c20:	tst	r0, #1
   14c24:	beq	14c34 <__assert_fail@plt+0x33e0>
   14c28:	b	14fdc <__assert_fail@plt+0x3788>
   14c2c:	mov	r4, #0
   14c30:	mov	r6, #0
   14c34:	ldrb	r0, [sl]
   14c38:	tst	r0, #4
   14c3c:	beq	14c68 <__assert_fail@plt+0x3414>
   14c40:	ldr	r2, [sp, #40]	; 0x28
   14c44:	ldr	r0, [r5, #36]	; 0x24
   14c48:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14c4c:	cmp	r3, r0
   14c50:	sub	r1, r2, #1
   14c54:	mov	r0, #0
   14c58:	moveq	r2, r1
   14c5c:	cmp	r4, #0
   14c60:	moveq	r2, r1
   14c64:	strb	r0, [r2]
   14c68:	ldr	r0, [sp, #12]
   14c6c:	cmp	r0, #0
   14c70:	movwne	r0, #1
   14c74:	orrs	r0, r0, ip
   14c78:	beq	14cdc <__assert_fail@plt+0x3488>
   14c7c:	cmp	r4, #0
   14c80:	bne	14d1c <__assert_fail@plt+0x34c8>
   14c84:	ldr	r0, [sp, #4]
   14c88:	cmp	r0, #3
   14c8c:	bne	14ca4 <__assert_fail@plt+0x3450>
   14c90:	ldrh	r0, [r8, #56]	; 0x38
   14c94:	cmp	r0, #4
   14c98:	cmpne	r0, #7
   14c9c:	movne	r0, #6
   14ca0:	strhne	r0, [r8, #56]	; 0x38
   14ca4:	mov	r6, #0
   14ca8:	cmp	r7, #0
   14cac:	beq	14eec <__assert_fail@plt+0x3698>
   14cb0:	ldrd	r4, [r7, #8]
   14cb4:	cmp	r5, #0
   14cb8:	beq	14cc4 <__assert_fail@plt+0x3470>
   14cbc:	mov	r0, r5
   14cc0:	bl	1183c <closedir@plt>
   14cc4:	mov	r0, r7
   14cc8:	bl	1a978 <__assert_fail@plt+0x9124>
   14ccc:	cmp	r4, #0
   14cd0:	mov	r7, r4
   14cd4:	bne	14cb0 <__assert_fail@plt+0x345c>
   14cd8:	b	14eec <__assert_fail@plt+0x3698>
   14cdc:	ldr	r0, [sp, #4]
   14ce0:	cmp	r0, #1
   14ce4:	cmpne	r4, #0
   14ce8:	bne	14d1c <__assert_fail@plt+0x34c8>
   14cec:	ldr	r0, [r8, #48]	; 0x30
   14cf0:	cmp	r0, #0
   14cf4:	beq	14e94 <__assert_fail@plt+0x3640>
   14cf8:	ldr	r1, [r8, #4]
   14cfc:	movw	r3, #49378	; 0xc0e2
   14d00:	mov	r0, r5
   14d04:	mvn	r2, #0
   14d08:	movt	r3, #1
   14d0c:	bl	14258 <__assert_fail@plt+0x2a04>
   14d10:	cmp	r0, #0
   14d14:	bne	14ea4 <__assert_fail@plt+0x3650>
   14d18:	b	14c7c <__assert_fail@plt+0x3428>
   14d1c:	tst	r6, #1
   14d20:	beq	14d58 <__assert_fail@plt+0x3504>
   14d24:	movw	r0, #21532	; 0x541c
   14d28:	mov	r1, r7
   14d2c:	mov	r2, r4
   14d30:	movt	r0, #1
   14d34:	str	r0, [r5, #44]	; 0x2c
   14d38:	mov	r0, r5
   14d3c:	bl	1362c <__assert_fail@plt+0x1dd8>
   14d40:	mov	r6, r0
   14d44:	mov	r0, #0
   14d48:	str	r0, [r5, #44]	; 0x2c
   14d4c:	mov	r0, r6
   14d50:	sub	sp, fp, #28
   14d54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d58:	cmp	r4, #2
   14d5c:	bcc	14f18 <__assert_fail@plt+0x36c4>
   14d60:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14d64:	ldr	r0, [r0]
   14d68:	cmp	r0, #0
   14d6c:	beq	14f28 <__assert_fail@plt+0x36d4>
   14d70:	mov	r0, r5
   14d74:	mov	r1, r7
   14d78:	mov	r2, r4
   14d7c:	bl	1362c <__assert_fail@plt+0x1dd8>
   14d80:	mov	r6, r0
   14d84:	mov	r0, r6
   14d88:	sub	sp, fp, #28
   14d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d90:	ldr	r0, [sp, #36]	; 0x24
   14d94:	ldr	r0, [r0]
   14d98:	cmp	r0, #0
   14d9c:	beq	14db8 <__assert_fail@plt+0x3564>
   14da0:	str	r0, [r8, #32]
   14da4:	ldr	r0, [sp, #12]
   14da8:	orrs	r0, r0, r4
   14dac:	mov	r0, #4
   14db0:	movwne	r0, #7
   14db4:	strh	r0, [r8, #56]	; 0x38
   14db8:	ldr	r0, [r8, #12]
   14dbc:	ldr	r6, [sp, #8]
   14dc0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14dc4:	ldr	r5, [sp, #52]	; 0x34
   14dc8:	cmp	r0, #0
   14dcc:	beq	14fcc <__assert_fail@plt+0x3778>
   14dd0:	bl	1183c <closedir@plt>
   14dd4:	mov	r0, #0
   14dd8:	ldr	ip, [sp]
   14ddc:	str	r0, [r8, #12]
   14de0:	ldr	r0, [sp, #16]
   14de4:	tst	r0, #1
   14de8:	beq	14c34 <__assert_fail@plt+0x33e0>
   14dec:	b	14fdc <__assert_fail@plt+0x3788>
   14df0:	mov	r0, r6
   14df4:	bl	1a978 <__assert_fail@plt+0x9124>
   14df8:	ldr	r6, [fp, #-36]	; 0xffffffdc
   14dfc:	ldr	r7, [sp, #24]
   14e00:	cmp	r6, #0
   14e04:	beq	14e30 <__assert_fail@plt+0x35dc>
   14e08:	ldrd	r4, [r6, #8]
   14e0c:	cmp	r5, #0
   14e10:	beq	14e1c <__assert_fail@plt+0x35c8>
   14e14:	mov	r0, r5
   14e18:	bl	1183c <closedir@plt>
   14e1c:	mov	r0, r6
   14e20:	bl	1a978 <__assert_fail@plt+0x9124>
   14e24:	cmp	r4, #0
   14e28:	mov	r6, r4
   14e2c:	bne	14e08 <__assert_fail@plt+0x35b4>
   14e30:	ldr	r0, [r7, #12]
   14e34:	bl	1183c <closedir@plt>
   14e38:	ldr	r1, [sp, #32]
   14e3c:	mov	r6, #0
   14e40:	mov	r0, #7
   14e44:	str	r6, [r7, #12]
   14e48:	strh	r0, [r7, #56]	; 0x38
   14e4c:	ldr	r0, [r1]
   14e50:	orr	r0, r0, #8192	; 0x2000
   14e54:	str	r0, [r1]
   14e58:	ldr	r1, [sp, #36]	; 0x24
   14e5c:	mov	r0, #36	; 0x24
   14e60:	str	r0, [r1]
   14e64:	mov	r0, r6
   14e68:	sub	sp, fp, #28
   14e6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e70:	ldr	ip, [sp]
   14e74:	cmp	r0, #15
   14e78:	bne	150b4 <__assert_fail@plt+0x3860>
   14e7c:	ldr	r6, [sp, #8]
   14e80:	ldr	r5, [sp, #52]	; 0x34
   14e84:	ldr	r0, [sp, #16]
   14e88:	tst	r0, #1
   14e8c:	beq	14c34 <__assert_fail@plt+0x33e0>
   14e90:	b	14fdc <__assert_fail@plt+0x3788>
   14e94:	mov	r0, r5
   14e98:	bl	150dc <__assert_fail@plt+0x3888>
   14e9c:	cmp	r0, #0
   14ea0:	beq	14c7c <__assert_fail@plt+0x3428>
   14ea4:	mov	r0, #7
   14ea8:	mov	r6, #0
   14eac:	cmp	r7, #0
   14eb0:	strh	r0, [r8, #56]	; 0x38
   14eb4:	ldr	r0, [sl]
   14eb8:	orr	r0, r0, #8192	; 0x2000
   14ebc:	str	r0, [sl]
   14ec0:	beq	14eec <__assert_fail@plt+0x3698>
   14ec4:	ldrd	r4, [r7, #8]
   14ec8:	cmp	r5, #0
   14ecc:	beq	14ed8 <__assert_fail@plt+0x3684>
   14ed0:	mov	r0, r5
   14ed4:	bl	1183c <closedir@plt>
   14ed8:	mov	r0, r7
   14edc:	bl	1a978 <__assert_fail@plt+0x9124>
   14ee0:	cmp	r4, #0
   14ee4:	mov	r7, r4
   14ee8:	bne	14ec4 <__assert_fail@plt+0x3670>
   14eec:	mov	r0, r6
   14ef0:	sub	sp, fp, #28
   14ef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ef8:	mov	r0, r4
   14efc:	bl	1a978 <__assert_fail@plt+0x9124>
   14f00:	ldr	r1, [sp, #36]	; 0x24
   14f04:	mov	r0, #0
   14f08:	str	r0, [r5, #24]
   14f0c:	mov	r0, #36	; 0x24
   14f10:	str	r0, [r1]
   14f14:	b	14f48 <__assert_fail@plt+0x36f4>
   14f18:	mov	r6, r7
   14f1c:	mov	r0, r6
   14f20:	sub	sp, fp, #28
   14f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f28:	mov	r6, r7
   14f2c:	mov	r0, r6
   14f30:	sub	sp, fp, #28
   14f34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f38:	ldr	r0, [r5, #24]
   14f3c:	bl	1a978 <__assert_fail@plt+0x9124>
   14f40:	mov	r0, #0
   14f44:	str	r0, [r5, #24]
   14f48:	ldr	r8, [sp, #24]
   14f4c:	ldr	r0, [sp, #36]	; 0x24
   14f50:	ldr	r4, [r0]
   14f54:	mov	r0, r6
   14f58:	bl	1a978 <__assert_fail@plt+0x9124>
   14f5c:	ldr	r5, [fp, #-36]	; 0xffffffdc
   14f60:	cmp	r5, #0
   14f64:	beq	14f90 <__assert_fail@plt+0x373c>
   14f68:	ldrd	r6, [r5, #8]
   14f6c:	cmp	r7, #0
   14f70:	beq	14f7c <__assert_fail@plt+0x3728>
   14f74:	mov	r0, r7
   14f78:	bl	1183c <closedir@plt>
   14f7c:	mov	r0, r5
   14f80:	bl	1a978 <__assert_fail@plt+0x9124>
   14f84:	cmp	r6, #0
   14f88:	mov	r5, r6
   14f8c:	bne	14f68 <__assert_fail@plt+0x3714>
   14f90:	ldr	r0, [r8, #12]
   14f94:	bl	1183c <closedir@plt>
   14f98:	ldr	r1, [sp, #32]
   14f9c:	mov	r6, #0
   14fa0:	mov	r0, #7
   14fa4:	str	r6, [r8, #12]
   14fa8:	strh	r0, [r8, #56]	; 0x38
   14fac:	ldr	r0, [r1]
   14fb0:	orr	r0, r0, #8192	; 0x2000
   14fb4:	str	r0, [r1]
   14fb8:	ldr	r0, [sp, #36]	; 0x24
   14fbc:	str	r4, [r0]
   14fc0:	mov	r0, r6
   14fc4:	sub	sp, fp, #28
   14fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fcc:	ldr	ip, [sp]
   14fd0:	ldr	r0, [sp, #16]
   14fd4:	tst	r0, #1
   14fd8:	beq	14c34 <__assert_fail@plt+0x33e0>
   14fdc:	ldr	r1, [r5, #4]
   14fe0:	ldr	r0, [r5, #24]
   14fe4:	cmp	r1, #0
   14fe8:	beq	15018 <__assert_fail@plt+0x37c4>
   14fec:	ldr	r2, [r1, #24]
   14ff0:	add	r3, r1, #168	; 0xa8
   14ff4:	cmp	r2, r3
   14ff8:	ldrne	r3, [r1, #28]
   14ffc:	subne	r2, r2, r3
   15000:	addne	r2, r0, r2
   15004:	strne	r2, [r1, #24]
   15008:	str	r0, [r1, #28]
   1500c:	ldr	r1, [r1, #8]
   15010:	cmp	r1, #0
   15014:	bne	14fec <__assert_fail@plt+0x3798>
   15018:	ldr	r1, [r7, #48]	; 0x30
   1501c:	cmp	r1, #0
   15020:	blt	14c34 <__assert_fail@plt+0x33e0>
   15024:	mov	r1, r7
   15028:	ldr	r2, [r1, #24]
   1502c:	add	r3, r1, #168	; 0xa8
   15030:	cmp	r2, r3
   15034:	ldrne	r3, [r1, #28]
   15038:	subne	r2, r2, r3
   1503c:	addne	r2, r0, r2
   15040:	strne	r2, [r1, #24]
   15044:	str	r0, [r1, #28]
   15048:	ldr	r2, [r1, #8]
   1504c:	cmp	r2, #0
   15050:	ldreq	r2, [r1, #4]
   15054:	ldr	r1, [r2, #48]	; 0x30
   15058:	cmn	r1, #1
   1505c:	mov	r1, r2
   15060:	bgt	15028 <__assert_fail@plt+0x37d4>
   15064:	b	14c34 <__assert_fail@plt+0x33e0>
   15068:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1506c:	mov	r0, r8
   15070:	bl	15454 <__assert_fail@plt+0x3c00>
   15074:	movw	r1, #26984	; 0x6968
   15078:	cmp	r0, r1
   1507c:	ble	150c4 <__assert_fail@plt+0x3870>
   15080:	movw	r1, #26985	; 0x6969
   15084:	cmp	r0, r1
   15088:	movwne	r1, #16719	; 0x414f
   1508c:	movtne	r1, #21318	; 0x5346
   15090:	cmpne	r0, r1
   15094:	beq	14778 <__assert_fail@plt+0x2f24>
   15098:	movw	r1, #40864	; 0x9fa0
   1509c:	cmp	r0, r1
   150a0:	beq	14778 <__assert_fail@plt+0x2f24>
   150a4:	b	14748 <__assert_fail@plt+0x2ef4>
   150a8:	bl	116d4 <__errno_location@plt>
   150ac:	mov	r1, #12
   150b0:	str	r1, [r0]
   150b4:	mov	r6, #0
   150b8:	mov	r0, r6
   150bc:	sub	sp, fp, #28
   150c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150c4:	movw	r1, #19778	; 0x4d42
   150c8:	movt	r1, #65363	; 0xff53
   150cc:	cmp	r0, r1
   150d0:	cmpne	r0, #0
   150d4:	beq	14778 <__assert_fail@plt+0x2f24>
   150d8:	b	14748 <__assert_fail@plt+0x2ef4>
   150dc:	push	{r4, r5, fp, lr}
   150e0:	add	fp, sp, #8
   150e4:	mov	r5, r0
   150e8:	ldr	r0, [r0, #48]	; 0x30
   150ec:	mov	r4, #0
   150f0:	tst	r0, #4
   150f4:	bne	15138 <__assert_fail@plt+0x38e4>
   150f8:	tst	r0, #512	; 0x200
   150fc:	bne	15118 <__assert_fail@plt+0x38c4>
   15100:	ldr	r0, [r5, #28]
   15104:	bl	117b8 <fchdir@plt>
   15108:	mov	r4, r0
   1510c:	cmp	r0, #0
   15110:	movwne	r4, #1
   15114:	b	15138 <__assert_fail@plt+0x38e4>
   15118:	ldr	r1, [r5, #32]
   1511c:	add	r0, r5, #60	; 0x3c
   15120:	bl	169d0 <__assert_fail@plt+0x517c>
   15124:	cmp	r0, #0
   15128:	blt	15130 <__assert_fail@plt+0x38dc>
   1512c:	bl	11824 <close@plt>
   15130:	mvn	r0, #99	; 0x63
   15134:	str	r0, [r5, #32]
   15138:	add	r5, r5, #60	; 0x3c
   1513c:	b	15144 <__assert_fail@plt+0x38f0>
   15140:	bl	11824 <close@plt>
   15144:	mov	r0, r5
   15148:	bl	169c8 <__assert_fail@plt+0x5174>
   1514c:	cmp	r0, #0
   15150:	movne	r0, r4
   15154:	popne	{r4, r5, fp, pc}
   15158:	mov	r0, r5
   1515c:	bl	16a1c <__assert_fail@plt+0x51c8>
   15160:	cmp	r0, #0
   15164:	bge	15140 <__assert_fail@plt+0x38ec>
   15168:	b	15144 <__assert_fail@plt+0x38f0>
   1516c:	cmp	r2, #5
   15170:	movcc	r0, #0
   15174:	strhcc	r2, [r1, #60]	; 0x3c
   15178:	bxcc	lr
   1517c:	push	{fp, lr}
   15180:	mov	fp, sp
   15184:	bl	116d4 <__errno_location@plt>
   15188:	mov	r1, #22
   1518c:	str	r1, [r0]
   15190:	mov	r0, #1
   15194:	pop	{fp, pc}
   15198:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1519c:	add	fp, sp, #28
   151a0:	sub	sp, sp, #4
   151a4:	mov	r9, r0
   151a8:	orr	r0, r1, #4096	; 0x1000
   151ac:	cmp	r0, #4096	; 0x1000
   151b0:	bne	151f8 <__assert_fail@plt+0x39a4>
   151b4:	ldr	r8, [r9]
   151b8:	mov	r7, r1
   151bc:	bl	116d4 <__errno_location@plt>
   151c0:	mov	r5, #0
   151c4:	mov	sl, r0
   151c8:	str	r5, [r0]
   151cc:	ldrb	r0, [r9, #49]	; 0x31
   151d0:	tst	r0, #32
   151d4:	bne	151ec <__assert_fail@plt+0x3998>
   151d8:	ldrh	r0, [r8, #56]	; 0x38
   151dc:	cmp	r0, #1
   151e0:	beq	15214 <__assert_fail@plt+0x39c0>
   151e4:	cmp	r0, #9
   151e8:	ldreq	r5, [r8, #8]
   151ec:	mov	r0, r5
   151f0:	sub	sp, fp, #28
   151f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151f8:	bl	116d4 <__errno_location@plt>
   151fc:	mov	r1, #22
   15200:	mov	r5, #0
   15204:	str	r1, [r0]
   15208:	mov	r0, r5
   1520c:	sub	sp, fp, #28
   15210:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15214:	ldr	r6, [r9, #4]
   15218:	cmp	r6, #0
   1521c:	beq	1524c <__assert_fail@plt+0x39f8>
   15220:	ldr	r4, [r6, #8]
   15224:	ldr	r1, [r6, #12]
   15228:	cmp	r1, #0
   1522c:	beq	15238 <__assert_fail@plt+0x39e4>
   15230:	mov	r0, r1
   15234:	bl	1183c <closedir@plt>
   15238:	mov	r0, r6
   1523c:	bl	1a978 <__assert_fail@plt+0x9124>
   15240:	cmp	r4, #0
   15244:	mov	r6, r4
   15248:	bne	15220 <__assert_fail@plt+0x39cc>
   1524c:	cmp	r7, #4096	; 0x1000
   15250:	mov	r4, #1
   15254:	ldreq	r0, [r9, #48]	; 0x30
   15258:	moveq	r4, #2
   1525c:	orreq	r0, r0, #4096	; 0x1000
   15260:	streq	r0, [r9, #48]	; 0x30
   15264:	ldr	r0, [r8, #48]	; 0x30
   15268:	cmp	r0, #0
   1526c:	bne	152c4 <__assert_fail@plt+0x3a70>
   15270:	ldr	r0, [r8, #24]
   15274:	ldrb	r0, [r0]
   15278:	cmp	r0, #47	; 0x2f
   1527c:	beq	152c4 <__assert_fail@plt+0x3a70>
   15280:	ldr	r0, [r9, #48]	; 0x30
   15284:	tst	r0, #4
   15288:	bne	152c4 <__assert_fail@plt+0x3a70>
   1528c:	mov	r1, #32768	; 0x8000
   15290:	tst	r0, #512	; 0x200
   15294:	and	r1, r1, r0, lsl #11
   15298:	orr	r1, r1, #18688	; 0x4900
   1529c:	orr	r2, r1, #524288	; 0x80000
   152a0:	bne	152e4 <__assert_fail@plt+0x3a90>
   152a4:	movw	r0, #49379	; 0xc0e3
   152a8:	mov	r1, r2
   152ac:	movt	r0, #1
   152b0:	bl	1a8c8 <__assert_fail@plt+0x9074>
   152b4:	mov	r8, r0
   152b8:	cmn	r0, #1
   152bc:	bgt	15300 <__assert_fail@plt+0x3aac>
   152c0:	b	15348 <__assert_fail@plt+0x3af4>
   152c4:	mov	r0, r9
   152c8:	mov	r1, r4
   152cc:	bl	14500 <__assert_fail@plt+0x2cac>
   152d0:	mov	r5, r0
   152d4:	str	r0, [r9, #4]
   152d8:	mov	r0, r5
   152dc:	sub	sp, fp, #28
   152e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152e4:	ldr	r0, [r9, #32]
   152e8:	movw	r1, #49379	; 0xc0e3
   152ec:	movt	r1, #1
   152f0:	bl	16a74 <__assert_fail@plt+0x5220>
   152f4:	mov	r8, r0
   152f8:	cmn	r0, #1
   152fc:	ble	15348 <__assert_fail@plt+0x3af4>
   15300:	mov	r0, r9
   15304:	mov	r1, r4
   15308:	bl	14500 <__assert_fail@plt+0x2cac>
   1530c:	str	r0, [r9, #4]
   15310:	ldrb	r0, [r9, #49]	; 0x31
   15314:	tst	r0, #2
   15318:	bne	1535c <__assert_fail@plt+0x3b08>
   1531c:	mov	r0, r8
   15320:	bl	117b8 <fchdir@plt>
   15324:	cmp	r0, #0
   15328:	beq	15398 <__assert_fail@plt+0x3b44>
   1532c:	ldr	r4, [sl]
   15330:	mov	r0, r8
   15334:	bl	11824 <close@plt>
   15338:	str	r4, [sl]
   1533c:	mov	r0, r5
   15340:	sub	sp, fp, #28
   15344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15348:	mov	r5, #0
   1534c:	str	r5, [r9, #4]
   15350:	mov	r0, r5
   15354:	sub	sp, fp, #28
   15358:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1535c:	ldr	r1, [r9, #32]
   15360:	cmp	r1, r8
   15364:	bne	15370 <__assert_fail@plt+0x3b1c>
   15368:	cmn	r1, #100	; 0x64
   1536c:	bne	153b0 <__assert_fail@plt+0x3b5c>
   15370:	add	r0, r9, #60	; 0x3c
   15374:	bl	169d0 <__assert_fail@plt+0x517c>
   15378:	cmp	r0, #0
   1537c:	blt	15384 <__assert_fail@plt+0x3b30>
   15380:	bl	11824 <close@plt>
   15384:	str	r8, [r9, #32]
   15388:	ldr	r5, [r9, #4]
   1538c:	mov	r0, r5
   15390:	sub	sp, fp, #28
   15394:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15398:	mov	r0, r8
   1539c:	bl	11824 <close@plt>
   153a0:	ldr	r5, [r9, #4]
   153a4:	mov	r0, r5
   153a8:	sub	sp, fp, #28
   153ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153b0:	bl	11818 <abort@plt>
   153b4:	push	{fp, lr}
   153b8:	mov	fp, sp
   153bc:	mov	r2, r1
   153c0:	ldrd	r0, [r0, #8]
   153c4:	mov	r3, #0
   153c8:	bl	1b110 <__assert_fail@plt+0x98bc>
   153cc:	mov	r0, r2
   153d0:	pop	{fp, pc}
   153d4:	push	{r4, r5, fp, lr}
   153d8:	add	fp, sp, #8
   153dc:	ldrd	r2, [r1, #8]
   153e0:	ldrd	r4, [r0, #8]
   153e4:	eor	r3, r5, r3
   153e8:	eor	r2, r4, r2
   153ec:	orrs	r2, r2, r3
   153f0:	mov	r2, #0
   153f4:	bne	15414 <__assert_fail@plt+0x3bc0>
   153f8:	ldrd	r2, [r1]
   153fc:	ldrd	r0, [r0]
   15400:	eor	r1, r1, r3
   15404:	eor	r0, r0, r2
   15408:	orr	r0, r0, r1
   1540c:	clz	r0, r0
   15410:	lsr	r2, r0, #5
   15414:	mov	r0, r2
   15418:	pop	{r4, r5, fp, pc}
   1541c:	push	{r4, r5, fp, lr}
   15420:	add	fp, sp, #8
   15424:	ldr	r0, [r0]
   15428:	ldrd	r2, [r0, #160]	; 0xa0
   1542c:	ldr	r0, [r1]
   15430:	ldrd	r4, [r0, #160]	; 0xa0
   15434:	mov	r0, #0
   15438:	subs	r1, r4, r2
   1543c:	sbcs	r1, r5, r3
   15440:	movwcc	r0, #1
   15444:	subs	r1, r2, r4
   15448:	sbcs	r1, r3, r5
   1544c:	subcc	r0, r0, #1
   15450:	pop	{r4, r5, fp, pc}
   15454:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15458:	add	fp, sp, #24
   1545c:	sub	sp, sp, #96	; 0x60
   15460:	ldr	r7, [r0, #44]	; 0x2c
   15464:	mov	r4, r0
   15468:	mov	r5, #0
   1546c:	ldrb	r0, [r7, #49]	; 0x31
   15470:	tst	r0, #2
   15474:	beq	15524 <__assert_fail@plt+0x3cd0>
   15478:	ldr	r6, [r7, #52]	; 0x34
   1547c:	mov	r9, r1
   15480:	cmp	r6, #0
   15484:	bne	154c4 <__assert_fail@plt+0x3c70>
   15488:	movw	r0, #43384	; 0xa978
   1548c:	movw	r2, #21904	; 0x5590
   15490:	movw	r3, #21936	; 0x55b0
   15494:	mov	r1, #0
   15498:	mov	r8, #0
   1549c:	movt	r0, #1
   154a0:	movt	r2, #1
   154a4:	movt	r3, #1
   154a8:	str	r0, [sp]
   154ac:	mov	r0, #13
   154b0:	bl	15a70 <__assert_fail@plt+0x421c>
   154b4:	mov	r6, r0
   154b8:	cmp	r0, #0
   154bc:	str	r0, [r7, #52]	; 0x34
   154c0:	beq	15504 <__assert_fail@plt+0x3cb0>
   154c4:	ldrd	r0, [r4, #64]	; 0x40
   154c8:	str	r1, [sp, #12]
   154cc:	str	r0, [sp, #8]
   154d0:	add	r1, sp, #8
   154d4:	mov	r0, r6
   154d8:	bl	157a8 <__assert_fail@plt+0x3f54>
   154dc:	cmp	r0, #0
   154e0:	beq	154f4 <__assert_fail@plt+0x3ca0>
   154e4:	ldr	r5, [r0, #8]
   154e8:	mov	r0, r5
   154ec:	sub	sp, fp, #24
   154f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   154f4:	mov	r8, #1
   154f8:	cmp	r9, #0
   154fc:	bge	15510 <__assert_fail@plt+0x3cbc>
   15500:	b	15524 <__assert_fail@plt+0x3cd0>
   15504:	mov	r6, #0
   15508:	cmp	r9, #0
   1550c:	blt	15524 <__assert_fail@plt+0x3cd0>
   15510:	add	r1, sp, #8
   15514:	mov	r0, r9
   15518:	bl	11488 <fstatfs64@plt>
   1551c:	cmp	r0, #0
   15520:	beq	15530 <__assert_fail@plt+0x3cdc>
   15524:	mov	r0, r5
   15528:	sub	sp, fp, #24
   1552c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15530:	cmp	r8, #0
   15534:	beq	15580 <__assert_fail@plt+0x3d2c>
   15538:	mov	r0, #16
   1553c:	bl	1a314 <__assert_fail@plt+0x8ac0>
   15540:	cmp	r0, #0
   15544:	beq	15580 <__assert_fail@plt+0x3d2c>
   15548:	mov	r5, r0
   1554c:	ldrd	r0, [r4, #64]	; 0x40
   15550:	ldr	r2, [sp, #8]
   15554:	stm	r5, {r0, r1, r2}
   15558:	mov	r0, r6
   1555c:	mov	r1, r5
   15560:	bl	166a8 <__assert_fail@plt+0x4e54>
   15564:	cmp	r0, #0
   15568:	beq	15578 <__assert_fail@plt+0x3d24>
   1556c:	cmp	r0, r5
   15570:	beq	15580 <__assert_fail@plt+0x3d2c>
   15574:	bl	11818 <abort@plt>
   15578:	mov	r0, r5
   1557c:	bl	1a978 <__assert_fail@plt+0x9124>
   15580:	ldr	r5, [sp, #8]
   15584:	mov	r0, r5
   15588:	sub	sp, fp, #24
   1558c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15590:	push	{fp, lr}
   15594:	mov	fp, sp
   15598:	mov	r2, r1
   1559c:	ldrd	r0, [r0]
   155a0:	mov	r3, #0
   155a4:	bl	1b110 <__assert_fail@plt+0x98bc>
   155a8:	mov	r0, r2
   155ac:	pop	{fp, pc}
   155b0:	ldrd	r2, [r1]
   155b4:	ldrd	r0, [r0]
   155b8:	eor	r1, r1, r3
   155bc:	eor	r0, r0, r2
   155c0:	orr	r0, r0, r1
   155c4:	clz	r0, r0
   155c8:	lsr	r0, r0, #5
   155cc:	bx	lr
   155d0:	ldr	r0, [r0, #8]
   155d4:	bx	lr
   155d8:	ldr	r0, [r0, #12]
   155dc:	bx	lr
   155e0:	ldr	r0, [r0, #16]
   155e4:	bx	lr
   155e8:	ldm	r0, {r2, ip}
   155ec:	mov	r0, #0
   155f0:	cmp	r2, ip
   155f4:	bxcs	lr
   155f8:	mov	r0, #0
   155fc:	ldr	r1, [r2]
   15600:	cmp	r1, #0
   15604:	beq	15628 <__assert_fail@plt+0x3dd4>
   15608:	mov	r3, #0
   1560c:	mov	r1, r2
   15610:	ldr	r1, [r1, #4]
   15614:	add	r3, r3, #1
   15618:	cmp	r1, #0
   1561c:	bne	15610 <__assert_fail@plt+0x3dbc>
   15620:	cmp	r3, r0
   15624:	movhi	r0, r3
   15628:	add	r2, r2, #8
   1562c:	cmp	r2, ip
   15630:	bcc	155fc <__assert_fail@plt+0x3da8>
   15634:	bx	lr
   15638:	push	{fp, lr}
   1563c:	mov	fp, sp
   15640:	ldm	r0, {r3, ip}
   15644:	mov	lr, #0
   15648:	mov	r1, #0
   1564c:	cmp	r3, ip
   15650:	bcs	1568c <__assert_fail@plt+0x3e38>
   15654:	mov	r1, #0
   15658:	mov	lr, #0
   1565c:	ldr	r2, [r3]
   15660:	cmp	r2, #0
   15664:	beq	15680 <__assert_fail@plt+0x3e2c>
   15668:	mov	r2, r3
   1566c:	ldr	r2, [r2, #4]
   15670:	add	r1, r1, #1
   15674:	cmp	r2, #0
   15678:	bne	1566c <__assert_fail@plt+0x3e18>
   1567c:	add	lr, lr, #1
   15680:	add	r3, r3, #8
   15684:	cmp	r3, ip
   15688:	bcc	1565c <__assert_fail@plt+0x3e08>
   1568c:	ldr	r2, [r0, #12]
   15690:	cmp	lr, r2
   15694:	bne	156ac <__assert_fail@plt+0x3e58>
   15698:	ldr	r2, [r0, #16]
   1569c:	mov	r0, #1
   156a0:	cmp	r1, r2
   156a4:	movne	r0, #0
   156a8:	pop	{fp, pc}
   156ac:	mov	r0, #0
   156b0:	pop	{fp, pc}
   156b4:	nop	{0}
   156b8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   156bc:	add	fp, sp, #24
   156c0:	sub	sp, sp, #8
   156c4:	ldr	r6, [r0]
   156c8:	ldmib	r0, {r2, r7, r8}
   156cc:	ldr	r3, [r0, #16]
   156d0:	mov	r4, r1
   156d4:	mov	r5, #0
   156d8:	cmp	r6, r2
   156dc:	bcs	1571c <__assert_fail@plt+0x3ec8>
   156e0:	mov	r5, #0
   156e4:	ldr	r0, [r6]
   156e8:	cmp	r0, #0
   156ec:	beq	15710 <__assert_fail@plt+0x3ebc>
   156f0:	mov	r0, #0
   156f4:	mov	r1, r6
   156f8:	ldr	r1, [r1, #4]
   156fc:	add	r0, r0, #1
   15700:	cmp	r1, #0
   15704:	bne	156f8 <__assert_fail@plt+0x3ea4>
   15708:	cmp	r0, r5
   1570c:	movhi	r5, r0
   15710:	add	r6, r6, #8
   15714:	cmp	r6, r2
   15718:	bcc	156e4 <__assert_fail@plt+0x3e90>
   1571c:	movw	r2, #49440	; 0xc120
   15720:	mov	r0, r4
   15724:	mov	r1, #1
   15728:	movt	r2, #1
   1572c:	bl	1171c <__fprintf_chk@plt>
   15730:	movw	r2, #49464	; 0xc138
   15734:	mov	r0, r4
   15738:	mov	r1, #1
   1573c:	mov	r3, r7
   15740:	movt	r2, #1
   15744:	bl	1171c <__fprintf_chk@plt>
   15748:	vldr	d16, [pc, #80]	; 157a0 <__assert_fail@plt+0x3f4c>
   1574c:	vmov	s0, r8
   15750:	movw	r2, #49488	; 0xc150
   15754:	mov	r0, r4
   15758:	mov	r1, #1
   1575c:	mov	r3, r8
   15760:	vcvt.f64.u32	d17, s0
   15764:	vmov	s0, r7
   15768:	movt	r2, #1
   1576c:	vcvt.f64.u32	d18, s0
   15770:	vmul.f64	d16, d17, d16
   15774:	vdiv.f64	d16, d16, d18
   15778:	vstr	d16, [sp]
   1577c:	bl	1171c <__fprintf_chk@plt>
   15780:	movw	r2, #49521	; 0xc171
   15784:	mov	r0, r4
   15788:	mov	r1, #1
   1578c:	mov	r3, r5
   15790:	movt	r2, #1
   15794:	sub	sp, fp, #24
   15798:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1579c:	b	1171c <__fprintf_chk@plt>
   157a0:	andeq	r0, r0, r0
   157a4:	subsmi	r0, r9, r0
   157a8:	push	{r4, r5, r6, r7, fp, lr}
   157ac:	add	fp, sp, #16
   157b0:	mov	r4, r1
   157b4:	ldr	r1, [r0, #8]
   157b8:	ldr	r2, [r0, #24]
   157bc:	mov	r5, r0
   157c0:	mov	r0, r4
   157c4:	blx	r2
   157c8:	ldr	r1, [r5, #8]
   157cc:	cmp	r0, r1
   157d0:	bcs	1583c <__assert_fail@plt+0x3fe8>
   157d4:	ldr	r7, [r5]
   157d8:	mov	r6, #0
   157dc:	ldr	r1, [r7, r0, lsl #3]!
   157e0:	cmp	r1, #0
   157e4:	cmpne	r7, #0
   157e8:	bne	157f8 <__assert_fail@plt+0x3fa4>
   157ec:	mov	r0, r6
   157f0:	pop	{r4, r5, r6, r7, fp, pc}
   157f4:	ldr	r1, [r7]
   157f8:	cmp	r1, r4
   157fc:	beq	15824 <__assert_fail@plt+0x3fd0>
   15800:	ldr	r2, [r5, #28]
   15804:	mov	r0, r4
   15808:	blx	r2
   1580c:	cmp	r0, #0
   15810:	bne	15830 <__assert_fail@plt+0x3fdc>
   15814:	ldr	r7, [r7, #4]
   15818:	cmp	r7, #0
   1581c:	bne	157f4 <__assert_fail@plt+0x3fa0>
   15820:	b	157ec <__assert_fail@plt+0x3f98>
   15824:	mov	r6, r4
   15828:	mov	r0, r6
   1582c:	pop	{r4, r5, r6, r7, fp, pc}
   15830:	ldr	r6, [r7]
   15834:	mov	r0, r6
   15838:	pop	{r4, r5, r6, r7, fp, pc}
   1583c:	bl	11818 <abort@plt>
   15840:	ldr	r1, [r0, #16]
   15844:	cmp	r1, #0
   15848:	moveq	r0, #0
   1584c:	bxeq	lr
   15850:	ldm	r0, {r1, r2}
   15854:	cmp	r1, r2
   15858:	bcs	15870 <__assert_fail@plt+0x401c>
   1585c:	ldr	r0, [r1], #8
   15860:	cmp	r0, #0
   15864:	bxne	lr
   15868:	cmp	r1, r2
   1586c:	bcc	1585c <__assert_fail@plt+0x4008>
   15870:	push	{fp, lr}
   15874:	mov	fp, sp
   15878:	bl	11818 <abort@plt>
   1587c:	push	{r4, r5, fp, lr}
   15880:	add	fp, sp, #8
   15884:	mov	r5, r1
   15888:	ldr	r1, [r0, #8]
   1588c:	ldr	r2, [r0, #24]
   15890:	mov	r4, r0
   15894:	mov	r0, r5
   15898:	blx	r2
   1589c:	ldr	r1, [r4, #8]
   158a0:	cmp	r0, r1
   158a4:	bcs	15900 <__assert_fail@plt+0x40ac>
   158a8:	ldr	r1, [r4]
   158ac:	add	r2, r1, r0, lsl #3
   158b0:	ldr	r3, [r2]
   158b4:	ldr	r2, [r2, #4]
   158b8:	cmp	r3, r5
   158bc:	beq	158cc <__assert_fail@plt+0x4078>
   158c0:	cmp	r2, #0
   158c4:	bne	158b0 <__assert_fail@plt+0x405c>
   158c8:	b	158d8 <__assert_fail@plt+0x4084>
   158cc:	cmp	r2, #0
   158d0:	ldrne	r0, [r2]
   158d4:	popne	{r4, r5, fp, pc}
   158d8:	ldr	r2, [r4, #4]
   158dc:	add	r0, r1, r0, lsl #3
   158e0:	add	r1, r0, #8
   158e4:	cmp	r1, r2
   158e8:	movcs	r0, #0
   158ec:	popcs	{r4, r5, fp, pc}
   158f0:	ldr	r0, [r1], #8
   158f4:	cmp	r0, #0
   158f8:	popne	{r4, r5, fp, pc}
   158fc:	b	158e4 <__assert_fail@plt+0x4090>
   15900:	bl	11818 <abort@plt>
   15904:	push	{r4, r5, fp, lr}
   15908:	add	fp, sp, #8
   1590c:	ldm	r0, {r5, lr}
   15910:	mov	ip, r0
   15914:	mov	r0, #0
   15918:	cmp	r5, lr
   1591c:	bcs	15978 <__assert_fail@plt+0x4124>
   15920:	mov	r0, #0
   15924:	ldr	r3, [r5]
   15928:	cmp	r3, #0
   1592c:	cmpne	r5, #0
   15930:	bne	15944 <__assert_fail@plt+0x40f0>
   15934:	add	r5, r5, #8
   15938:	cmp	r5, lr
   1593c:	bcc	15924 <__assert_fail@plt+0x40d0>
   15940:	b	15978 <__assert_fail@plt+0x4124>
   15944:	mov	r3, r5
   15948:	cmp	r0, r2
   1594c:	popcs	{r4, r5, fp, pc}
   15950:	ldr	r4, [r3]
   15954:	str	r4, [r1, r0, lsl #2]
   15958:	add	r0, r0, #1
   1595c:	ldr	r3, [r3, #4]
   15960:	cmp	r3, #0
   15964:	bne	15948 <__assert_fail@plt+0x40f4>
   15968:	ldr	lr, [ip, #4]
   1596c:	add	r5, r5, #8
   15970:	cmp	r5, lr
   15974:	bcc	15924 <__assert_fail@plt+0x40d0>
   15978:	pop	{r4, r5, fp, pc}
   1597c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15980:	add	fp, sp, #24
   15984:	mov	r5, r1
   15988:	ldr	r4, [r0]
   1598c:	ldr	r1, [r0, #4]
   15990:	mov	r6, #0
   15994:	cmp	r4, r1
   15998:	bcs	15a14 <__assert_fail@plt+0x41c0>
   1599c:	mov	r9, r2
   159a0:	mov	r8, r0
   159a4:	mov	r6, #0
   159a8:	ldr	r0, [r4]
   159ac:	cmp	r0, #0
   159b0:	cmpne	r4, #0
   159b4:	bne	159c8 <__assert_fail@plt+0x4174>
   159b8:	add	r4, r4, #8
   159bc:	cmp	r4, r1
   159c0:	bcc	159a8 <__assert_fail@plt+0x4154>
   159c4:	b	15a14 <__assert_fail@plt+0x41c0>
   159c8:	mov	r1, r9
   159cc:	blx	r5
   159d0:	cmp	r0, #0
   159d4:	beq	15a14 <__assert_fail@plt+0x41c0>
   159d8:	mov	r7, r4
   159dc:	ldr	r7, [r7, #4]
   159e0:	add	r6, r6, #1
   159e4:	cmp	r7, #0
   159e8:	beq	15a04 <__assert_fail@plt+0x41b0>
   159ec:	ldr	r0, [r7]
   159f0:	mov	r1, r9
   159f4:	blx	r5
   159f8:	cmp	r0, #0
   159fc:	bne	159dc <__assert_fail@plt+0x4188>
   15a00:	b	15a14 <__assert_fail@plt+0x41c0>
   15a04:	ldr	r1, [r8, #4]
   15a08:	add	r4, r4, #8
   15a0c:	cmp	r4, r1
   15a10:	bcc	159a8 <__assert_fail@plt+0x4154>
   15a14:	mov	r0, r6
   15a18:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15a1c:	ldrb	r2, [r0]
   15a20:	cmp	r2, #0
   15a24:	moveq	r0, #0
   15a28:	bxeq	lr
   15a2c:	add	r3, r0, #1
   15a30:	mov	r0, #0
   15a34:	rsb	r0, r0, r0, lsl #5
   15a38:	uxtab	r0, r0, r2
   15a3c:	udiv	r2, r0, r1
   15a40:	mls	r0, r2, r1, r0
   15a44:	ldrb	r2, [r3], #1
   15a48:	cmp	r2, #0
   15a4c:	bne	15a34 <__assert_fail@plt+0x41e0>
   15a50:	bx	lr
   15a54:	movw	r1, #49552	; 0xc190
   15a58:	movt	r1, #1
   15a5c:	vld1.32	{d16-d17}, [r1]!
   15a60:	ldr	r1, [r1]
   15a64:	vst1.32	{d16-d17}, [r0]!
   15a68:	str	r1, [r0]
   15a6c:	bx	lr
   15a70:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15a74:	add	fp, sp, #24
   15a78:	movw	r9, #23740	; 0x5cbc
   15a7c:	movw	r5, #23720	; 0x5ca8
   15a80:	cmp	r3, #0
   15a84:	mov	r6, r0
   15a88:	mov	r0, #40	; 0x28
   15a8c:	mov	r7, r1
   15a90:	movt	r9, #1
   15a94:	movt	r5, #1
   15a98:	movne	r9, r3
   15a9c:	cmp	r2, #0
   15aa0:	movne	r5, r2
   15aa4:	bl	1a314 <__assert_fail@plt+0x8ac0>
   15aa8:	mov	r8, #0
   15aac:	cmp	r0, #0
   15ab0:	beq	15c90 <__assert_fail@plt+0x443c>
   15ab4:	mov	r4, r0
   15ab8:	cmp	r7, #0
   15abc:	beq	15b6c <__assert_fail@plt+0x4318>
   15ac0:	movw	r0, #49552	; 0xc190
   15ac4:	str	r7, [r4, #20]
   15ac8:	movt	r0, #1
   15acc:	cmp	r7, r0
   15ad0:	beq	15b78 <__assert_fail@plt+0x4324>
   15ad4:	vldr	s2, [pc, #444]	; 15c98 <__assert_fail@plt+0x4444>
   15ad8:	vldr	s0, [r7, #8]
   15adc:	vcmpe.f32	s0, s2
   15ae0:	vmrs	APSR_nzcv, fpscr
   15ae4:	ble	15b50 <__assert_fail@plt+0x42fc>
   15ae8:	vldr	s4, [pc, #428]	; 15c9c <__assert_fail@plt+0x4448>
   15aec:	vcmpe.f32	s0, s4
   15af0:	vmrs	APSR_nzcv, fpscr
   15af4:	bpl	15b50 <__assert_fail@plt+0x42fc>
   15af8:	vldr	s4, [pc, #416]	; 15ca0 <__assert_fail@plt+0x444c>
   15afc:	vldr	s6, [r7, #12]
   15b00:	vcmpe.f32	s6, s4
   15b04:	vmrs	APSR_nzcv, fpscr
   15b08:	ble	15b50 <__assert_fail@plt+0x42fc>
   15b0c:	vldr	s4, [r7]
   15b10:	vcmpe.f32	s4, #0.0
   15b14:	vmrs	APSR_nzcv, fpscr
   15b18:	blt	15b50 <__assert_fail@plt+0x42fc>
   15b1c:	vadd.f32	s2, s4, s2
   15b20:	vcmpe.f32	s2, s0
   15b24:	vmrs	APSR_nzcv, fpscr
   15b28:	bpl	15b50 <__assert_fail@plt+0x42fc>
   15b2c:	vldr	s0, [r7, #4]
   15b30:	vmov.f32	s4, #112	; 0x3f800000  1.0
   15b34:	vcmpe.f32	s0, s4
   15b38:	vmrs	APSR_nzcv, fpscr
   15b3c:	bhi	15b50 <__assert_fail@plt+0x42fc>
   15b40:	vcmpe.f32	s2, s0
   15b44:	mov	r0, r7
   15b48:	vmrs	APSR_nzcv, fpscr
   15b4c:	bmi	15b78 <__assert_fail@plt+0x4324>
   15b50:	movw	r0, #49552	; 0xc190
   15b54:	movt	r0, #1
   15b58:	str	r0, [r4, #20]
   15b5c:	mov	r0, r4
   15b60:	bl	1a978 <__assert_fail@plt+0x9124>
   15b64:	mov	r0, r8
   15b68:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15b6c:	movw	r0, #49552	; 0xc190
   15b70:	movt	r0, #1
   15b74:	str	r0, [r4, #20]
   15b78:	ldrb	r1, [r0, #16]
   15b7c:	cmp	r1, #0
   15b80:	bne	15bac <__assert_fail@plt+0x4358>
   15b84:	vldr	s0, [r0, #8]
   15b88:	vldr	s4, [pc, #276]	; 15ca4 <__assert_fail@plt+0x4450>
   15b8c:	vmov	s2, r6
   15b90:	vcvt.f32.u32	s2, s2
   15b94:	vdiv.f32	s2, s2, s0
   15b98:	vcmpe.f32	s2, s4
   15b9c:	vcvt.u32.f32	s0, s2
   15ba0:	vmrs	APSR_nzcv, fpscr
   15ba4:	bge	15c2c <__assert_fail@plt+0x43d8>
   15ba8:	vmov	r6, s0
   15bac:	cmp	r6, #10
   15bb0:	movls	r6, #10
   15bb4:	orr	r0, r6, #1
   15bb8:	cmn	r0, #1
   15bbc:	beq	15c2c <__assert_fail@plt+0x43d8>
   15bc0:	ldr	r6, [fp, #8]
   15bc4:	mov	r1, #3
   15bc8:	cmp	r0, #10
   15bcc:	bcc	15c04 <__assert_fail@plt+0x43b0>
   15bd0:	mov	r1, #3
   15bd4:	mov	r3, #9
   15bd8:	mov	r2, #12
   15bdc:	udiv	r7, r0, r1
   15be0:	mls	r7, r7, r1, r0
   15be4:	cmp	r7, #0
   15be8:	beq	15c04 <__assert_fail@plt+0x43b0>
   15bec:	add	r3, r3, r2
   15bf0:	add	r2, r2, #8
   15bf4:	add	r1, r1, #2
   15bf8:	add	r3, r3, #4
   15bfc:	cmp	r3, r0
   15c00:	bcc	15bdc <__assert_fail@plt+0x4388>
   15c04:	udiv	r2, r0, r1
   15c08:	mls	r1, r2, r1, r0
   15c0c:	cmp	r1, #0
   15c10:	bne	15c24 <__assert_fail@plt+0x43d0>
   15c14:	add	r0, r0, #2
   15c18:	cmn	r0, #1
   15c1c:	bne	15bc4 <__assert_fail@plt+0x4370>
   15c20:	b	15c2c <__assert_fail@plt+0x43d8>
   15c24:	cmp	r0, #536870912	; 0x20000000
   15c28:	bcc	15c44 <__assert_fail@plt+0x43f0>
   15c2c:	mov	r0, #0
   15c30:	str	r0, [r4, #8]
   15c34:	mov	r0, r4
   15c38:	bl	1a978 <__assert_fail@plt+0x9124>
   15c3c:	mov	r0, r8
   15c40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15c44:	cmp	r0, #0
   15c48:	str	r0, [r4, #8]
   15c4c:	beq	15c34 <__assert_fail@plt+0x43e0>
   15c50:	mov	r1, #8
   15c54:	bl	1a2c0 <__assert_fail@plt+0x8a6c>
   15c58:	cmp	r0, #0
   15c5c:	str	r0, [r4]
   15c60:	beq	15c34 <__assert_fail@plt+0x43e0>
   15c64:	mov	r1, #0
   15c68:	mov	r8, r4
   15c6c:	str	r1, [r4, #12]
   15c70:	str	r1, [r4, #16]
   15c74:	str	r5, [r4, #24]
   15c78:	str	r9, [r4, #28]
   15c7c:	str	r6, [r4, #32]
   15c80:	str	r1, [r4, #36]	; 0x24
   15c84:	ldr	r1, [r4, #8]
   15c88:	add	r0, r0, r1, lsl #3
   15c8c:	str	r0, [r4, #4]
   15c90:	mov	r0, r8
   15c94:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15c98:	stclcc	12, cr12, [ip, #820]	; 0x334
   15c9c:	svccc	0x00666666
   15ca0:	svccc	0x008ccccd
   15ca4:	svcmi	0x00800000
   15ca8:	ror	r2, r0, #3
   15cac:	udiv	r2, r2, r1
   15cb0:	mul	r1, r2, r1
   15cb4:	rsb	r0, r1, r0, ror #3
   15cb8:	bx	lr
   15cbc:	sub	r0, r0, r1
   15cc0:	clz	r0, r0
   15cc4:	lsr	r0, r0, #5
   15cc8:	bx	lr
   15ccc:	push	{r4, r5, r6, r7, fp, lr}
   15cd0:	add	fp, sp, #16
   15cd4:	mov	r4, r0
   15cd8:	ldr	r5, [r0]
   15cdc:	ldr	r0, [r0, #4]
   15ce0:	cmp	r5, r0
   15ce4:	bcs	15d7c <__assert_fail@plt+0x4528>
   15ce8:	mov	r6, #0
   15cec:	ldr	r1, [r5]
   15cf0:	cmp	r1, #0
   15cf4:	beq	15d70 <__assert_fail@plt+0x451c>
   15cf8:	ldr	r1, [r4, #32]
   15cfc:	ldr	r7, [r5, #4]
   15d00:	cmp	r1, #0
   15d04:	mov	r0, r1
   15d08:	movwne	r0, #1
   15d0c:	cmp	r7, #0
   15d10:	beq	15d54 <__assert_fail@plt+0x4500>
   15d14:	tst	r0, #1
   15d18:	beq	15d28 <__assert_fail@plt+0x44d4>
   15d1c:	ldr	r0, [r7]
   15d20:	blx	r1
   15d24:	ldr	r1, [r4, #32]
   15d28:	str	r6, [r7]
   15d2c:	cmp	r1, #0
   15d30:	ldr	r0, [r4, #36]	; 0x24
   15d34:	ldr	r2, [r7, #4]
   15d38:	str	r0, [r7, #4]
   15d3c:	mov	r0, r1
   15d40:	str	r7, [r4, #36]	; 0x24
   15d44:	mov	r7, r2
   15d48:	movwne	r0, #1
   15d4c:	cmp	r2, #0
   15d50:	bne	15d14 <__assert_fail@plt+0x44c0>
   15d54:	cmp	r0, #0
   15d58:	beq	15d64 <__assert_fail@plt+0x4510>
   15d5c:	ldr	r0, [r5]
   15d60:	blx	r1
   15d64:	str	r6, [r5]
   15d68:	str	r6, [r5, #4]
   15d6c:	ldr	r0, [r4, #4]
   15d70:	add	r5, r5, #8
   15d74:	cmp	r5, r0
   15d78:	bcc	15cec <__assert_fail@plt+0x4498>
   15d7c:	mov	r0, #0
   15d80:	str	r0, [r4, #12]
   15d84:	str	r0, [r4, #16]
   15d88:	pop	{r4, r5, r6, r7, fp, pc}
   15d8c:	push	{r4, r5, r6, sl, fp, lr}
   15d90:	add	fp, sp, #16
   15d94:	mov	r4, r0
   15d98:	ldr	r0, [r0, #32]
   15d9c:	cmp	r0, #0
   15da0:	ldrne	r0, [r4, #16]
   15da4:	cmpne	r0, #0
   15da8:	beq	15e10 <__assert_fail@plt+0x45bc>
   15dac:	ldr	r5, [r4]
   15db0:	ldr	r1, [r4, #4]
   15db4:	cmp	r5, r1
   15db8:	bcc	15dcc <__assert_fail@plt+0x4578>
   15dbc:	b	15e10 <__assert_fail@plt+0x45bc>
   15dc0:	add	r5, r5, #8
   15dc4:	cmp	r5, r1
   15dc8:	bcs	15e10 <__assert_fail@plt+0x45bc>
   15dcc:	ldr	r0, [r5]
   15dd0:	cmp	r0, #0
   15dd4:	cmpne	r5, #0
   15dd8:	beq	15dc0 <__assert_fail@plt+0x456c>
   15ddc:	ldr	r1, [r4, #32]
   15de0:	blx	r1
   15de4:	ldr	r6, [r5, #4]
   15de8:	cmp	r6, #0
   15dec:	beq	15e08 <__assert_fail@plt+0x45b4>
   15df0:	ldr	r1, [r4, #32]
   15df4:	ldr	r0, [r6]
   15df8:	blx	r1
   15dfc:	ldr	r6, [r6, #4]
   15e00:	cmp	r6, #0
   15e04:	bne	15df0 <__assert_fail@plt+0x459c>
   15e08:	ldr	r1, [r4, #4]
   15e0c:	b	15dc0 <__assert_fail@plt+0x456c>
   15e10:	ldr	r5, [r4]
   15e14:	ldr	r1, [r4, #4]
   15e18:	cmp	r5, r1
   15e1c:	bcc	15e30 <__assert_fail@plt+0x45dc>
   15e20:	b	15e58 <__assert_fail@plt+0x4604>
   15e24:	add	r5, r5, #8
   15e28:	cmp	r5, r1
   15e2c:	bcs	15e58 <__assert_fail@plt+0x4604>
   15e30:	ldr	r0, [r5, #4]
   15e34:	cmp	r0, #0
   15e38:	beq	15e24 <__assert_fail@plt+0x45d0>
   15e3c:	ldr	r6, [r0, #4]
   15e40:	bl	1a978 <__assert_fail@plt+0x9124>
   15e44:	cmp	r6, #0
   15e48:	mov	r0, r6
   15e4c:	bne	15e3c <__assert_fail@plt+0x45e8>
   15e50:	ldr	r1, [r4, #4]
   15e54:	b	15e24 <__assert_fail@plt+0x45d0>
   15e58:	ldr	r0, [r4, #36]	; 0x24
   15e5c:	cmp	r0, #0
   15e60:	beq	15e78 <__assert_fail@plt+0x4624>
   15e64:	ldr	r5, [r0, #4]
   15e68:	bl	1a978 <__assert_fail@plt+0x9124>
   15e6c:	cmp	r5, #0
   15e70:	mov	r0, r5
   15e74:	bne	15e64 <__assert_fail@plt+0x4610>
   15e78:	ldr	r0, [r4]
   15e7c:	bl	1a978 <__assert_fail@plt+0x9124>
   15e80:	mov	r0, r4
   15e84:	pop	{r4, r5, r6, sl, fp, lr}
   15e88:	b	1a978 <__assert_fail@plt+0x9124>
   15e8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e90:	add	fp, sp, #28
   15e94:	sub	sp, sp, #44	; 0x2c
   15e98:	mov	r7, r0
   15e9c:	mov	r4, r0
   15ea0:	ldr	r0, [r7, #20]!
   15ea4:	ldrb	r2, [r0, #16]
   15ea8:	cmp	r2, #0
   15eac:	bne	15edc <__assert_fail@plt+0x4688>
   15eb0:	vldr	s0, [r0, #8]
   15eb4:	vldr	s4, [pc, #576]	; 160fc <__assert_fail@plt+0x48a8>
   15eb8:	vmov	s2, r1
   15ebc:	mov	r5, #0
   15ec0:	vcvt.f32.u32	s2, s2
   15ec4:	vdiv.f32	s2, s2, s0
   15ec8:	vcmpe.f32	s2, s4
   15ecc:	vcvt.u32.f32	s0, s2
   15ed0:	vmrs	APSR_nzcv, fpscr
   15ed4:	bge	16000 <__assert_fail@plt+0x47ac>
   15ed8:	vmov	r1, s0
   15edc:	cmp	r1, #10
   15ee0:	mov	r5, #0
   15ee4:	movls	r1, #10
   15ee8:	orr	r6, r1, #1
   15eec:	cmn	r6, #1
   15ef0:	bne	15f04 <__assert_fail@plt+0x46b0>
   15ef4:	b	16000 <__assert_fail@plt+0x47ac>
   15ef8:	add	r6, r6, #2
   15efc:	cmn	r6, #1
   15f00:	beq	16000 <__assert_fail@plt+0x47ac>
   15f04:	mov	r0, #3
   15f08:	cmp	r6, #10
   15f0c:	bcc	15f44 <__assert_fail@plt+0x46f0>
   15f10:	mov	r0, #3
   15f14:	mov	r2, #9
   15f18:	mov	r1, #12
   15f1c:	udiv	r3, r6, r0
   15f20:	mls	r3, r3, r0, r6
   15f24:	cmp	r3, #0
   15f28:	beq	15f44 <__assert_fail@plt+0x46f0>
   15f2c:	add	r2, r2, r1
   15f30:	add	r1, r1, #8
   15f34:	add	r0, r0, #2
   15f38:	add	r2, r2, #4
   15f3c:	cmp	r2, r6
   15f40:	bcc	15f1c <__assert_fail@plt+0x46c8>
   15f44:	udiv	r1, r6, r0
   15f48:	mls	r0, r1, r0, r6
   15f4c:	cmp	r0, #0
   15f50:	beq	15ef8 <__assert_fail@plt+0x46a4>
   15f54:	sub	r0, r6, #1
   15f58:	cmn	r0, #-536870910	; 0xe0000002
   15f5c:	bhi	16000 <__assert_fail@plt+0x47ac>
   15f60:	ldr	r0, [r4, #8]
   15f64:	cmp	r6, r0
   15f68:	bne	15f7c <__assert_fail@plt+0x4728>
   15f6c:	mov	r5, #1
   15f70:	mov	r0, r5
   15f74:	sub	sp, fp, #28
   15f78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f7c:	mov	r0, r6
   15f80:	mov	r1, #8
   15f84:	bl	1a2c0 <__assert_fail@plt+0x8a6c>
   15f88:	cmp	r0, #0
   15f8c:	str	r0, [sp, #4]
   15f90:	beq	16000 <__assert_fail@plt+0x47ac>
   15f94:	mov	r1, #0
   15f98:	add	r0, r0, r6, lsl #3
   15f9c:	str	r6, [sp, #12]
   15fa0:	add	r5, sp, #4
   15fa4:	mov	sl, r4
   15fa8:	mov	r2, #0
   15fac:	str	r1, [sp, #16]
   15fb0:	str	r1, [sp, #20]
   15fb4:	str	r0, [sp, #8]
   15fb8:	add	r0, r5, #20
   15fbc:	mov	r1, r4
   15fc0:	vld1.32	{d16-d17}, [r7]
   15fc4:	vst1.32	{d16-d17}, [r0]
   15fc8:	ldr	r0, [sl, #36]!	; 0x24
   15fcc:	str	r0, [sp, #40]	; 0x28
   15fd0:	mov	r0, r5
   15fd4:	bl	16100 <__assert_fail@plt+0x48ac>
   15fd8:	cmp	r0, #0
   15fdc:	beq	1600c <__assert_fail@plt+0x47b8>
   15fe0:	ldr	r0, [r4]
   15fe4:	bl	1a978 <__assert_fail@plt+0x9124>
   15fe8:	mov	r0, #36	; 0x24
   15fec:	vld1.32	{d16-d17}, [r5], r0
   15ff0:	vst1.32	{d16-d17}, [r4], r0
   15ff4:	ldr	r0, [r5]
   15ff8:	mov	r5, #1
   15ffc:	str	r0, [r4]
   16000:	mov	r0, r5
   16004:	sub	sp, fp, #28
   16008:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1600c:	ldr	r0, [sp, #40]	; 0x28
   16010:	str	r0, [sl]
   16014:	ldr	r0, [sp, #8]
   16018:	ldr	r8, [sp, #4]
   1601c:	cmp	r8, r0
   16020:	str	r0, [sp]
   16024:	bcs	160c8 <__assert_fail@plt+0x4874>
   16028:	mov	r9, #0
   1602c:	ldr	r0, [r8]
   16030:	cmp	r0, #0
   16034:	beq	160b8 <__assert_fail@plt+0x4864>
   16038:	ldr	r6, [r8, #4]
   1603c:	cmp	r6, #0
   16040:	beq	160b4 <__assert_fail@plt+0x4860>
   16044:	ldr	r1, [r4, #8]
   16048:	ldr	r5, [r6]
   1604c:	ldr	r2, [r4, #24]
   16050:	mov	r0, r5
   16054:	blx	r2
   16058:	ldr	r1, [r4, #8]
   1605c:	cmp	r0, r1
   16060:	bcs	160f8 <__assert_fail@plt+0x48a4>
   16064:	ldr	r3, [r4]
   16068:	ldr	r2, [r6, #4]
   1606c:	ldr	r7, [r3, r0, lsl #3]
   16070:	cmp	r7, #0
   16074:	beq	16084 <__assert_fail@plt+0x4830>
   16078:	add	r0, r3, r0, lsl #3
   1607c:	add	r0, r0, #4
   16080:	b	1609c <__assert_fail@plt+0x4848>
   16084:	str	r5, [r3, r0, lsl #3]
   16088:	ldr	r0, [r4, #12]
   1608c:	add	r0, r0, #1
   16090:	str	r0, [r4, #12]
   16094:	mov	r0, sl
   16098:	str	r9, [r6]
   1609c:	ldr	r3, [r0]
   160a0:	cmp	r2, #0
   160a4:	str	r3, [r6, #4]
   160a8:	str	r6, [r0]
   160ac:	mov	r6, r2
   160b0:	bne	16048 <__assert_fail@plt+0x47f4>
   160b4:	str	r9, [r8, #4]
   160b8:	ldr	r0, [sp]
   160bc:	add	r8, r8, #8
   160c0:	cmp	r8, r0
   160c4:	bcc	1602c <__assert_fail@plt+0x47d8>
   160c8:	add	r1, sp, #4
   160cc:	mov	r0, r4
   160d0:	mov	r2, #0
   160d4:	mov	r5, #0
   160d8:	bl	16100 <__assert_fail@plt+0x48ac>
   160dc:	cmp	r0, #0
   160e0:	beq	160f8 <__assert_fail@plt+0x48a4>
   160e4:	ldr	r0, [sp, #4]
   160e8:	bl	1a978 <__assert_fail@plt+0x9124>
   160ec:	mov	r0, r5
   160f0:	sub	sp, fp, #28
   160f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160f8:	bl	11818 <abort@plt>
   160fc:	svcmi	0x00800000
   16100:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16104:	add	fp, sp, #28
   16108:	sub	sp, sp, #4
   1610c:	ldr	r8, [r1]
   16110:	ldr	r3, [r1, #4]
   16114:	mov	r6, r0
   16118:	mov	r0, #1
   1611c:	str	r1, [sp]
   16120:	cmp	r8, r3
   16124:	bcs	16324 <__assert_fail@plt+0x4ad0>
   16128:	add	r9, r6, #36	; 0x24
   1612c:	cmp	r2, #0
   16130:	beq	161dc <__assert_fail@plt+0x4988>
   16134:	mov	sl, #0
   16138:	ldr	r1, [r8]
   1613c:	cmp	r1, #0
   16140:	beq	161cc <__assert_fail@plt+0x4978>
   16144:	ldr	r7, [r8, #4]
   16148:	cmp	r7, #0
   1614c:	beq	161c8 <__assert_fail@plt+0x4974>
   16150:	ldr	r1, [r6, #8]
   16154:	ldr	r4, [r7]
   16158:	ldr	r2, [r6, #24]
   1615c:	mov	r0, r4
   16160:	blx	r2
   16164:	ldr	r1, [r6, #8]
   16168:	cmp	r0, r1
   1616c:	bcs	16338 <__assert_fail@plt+0x4ae4>
   16170:	ldr	r3, [r6]
   16174:	ldr	r2, [r7, #4]
   16178:	ldr	r5, [r3, r0, lsl #3]
   1617c:	cmp	r5, #0
   16180:	beq	16190 <__assert_fail@plt+0x493c>
   16184:	add	r0, r3, r0, lsl #3
   16188:	add	r0, r0, #4
   1618c:	b	161a8 <__assert_fail@plt+0x4954>
   16190:	str	r4, [r3, r0, lsl #3]
   16194:	ldr	r0, [r6, #12]
   16198:	add	r0, r0, #1
   1619c:	str	r0, [r6, #12]
   161a0:	mov	r0, r9
   161a4:	str	sl, [r7]
   161a8:	ldr	r3, [r0]
   161ac:	cmp	r2, #0
   161b0:	str	r3, [r7, #4]
   161b4:	str	r7, [r0]
   161b8:	mov	r7, r2
   161bc:	bne	16154 <__assert_fail@plt+0x4900>
   161c0:	ldr	r0, [sp]
   161c4:	ldr	r3, [r0, #4]
   161c8:	str	sl, [r8, #4]
   161cc:	add	r8, r8, #8
   161d0:	cmp	r8, r3
   161d4:	bcc	16138 <__assert_fail@plt+0x48e4>
   161d8:	b	16320 <__assert_fail@plt+0x4acc>
   161dc:	mov	r5, #0
   161e0:	ldr	sl, [r8]
   161e4:	cmp	sl, #0
   161e8:	beq	16314 <__assert_fail@plt+0x4ac0>
   161ec:	ldr	r7, [r8, #4]
   161f0:	ldr	r1, [r6, #8]
   161f4:	cmp	r7, #0
   161f8:	beq	16274 <__assert_fail@plt+0x4a20>
   161fc:	mov	sl, #0
   16200:	ldr	r4, [r7]
   16204:	ldr	r2, [r6, #24]
   16208:	mov	r0, r4
   1620c:	blx	r2
   16210:	ldr	r1, [r6, #8]
   16214:	cmp	r0, r1
   16218:	bcs	16338 <__assert_fail@plt+0x4ae4>
   1621c:	ldr	r3, [r6]
   16220:	ldr	r2, [r7, #4]
   16224:	ldr	r5, [r3, r0, lsl #3]
   16228:	cmp	r5, #0
   1622c:	beq	1623c <__assert_fail@plt+0x49e8>
   16230:	add	r0, r3, r0, lsl #3
   16234:	add	r0, r0, #4
   16238:	b	16254 <__assert_fail@plt+0x4a00>
   1623c:	str	r4, [r3, r0, lsl #3]
   16240:	ldr	r0, [r6, #12]
   16244:	add	r0, r0, #1
   16248:	str	r0, [r6, #12]
   1624c:	mov	r0, r9
   16250:	str	sl, [r7]
   16254:	ldr	r3, [r0]
   16258:	cmp	r2, #0
   1625c:	str	r3, [r7, #4]
   16260:	str	r7, [r0]
   16264:	mov	r7, r2
   16268:	bne	16200 <__assert_fail@plt+0x49ac>
   1626c:	ldr	sl, [r8]
   16270:	mov	r5, #0
   16274:	str	r5, [r8, #4]
   16278:	mov	r0, sl
   1627c:	ldr	r2, [r6, #24]
   16280:	blx	r2
   16284:	mov	r4, r0
   16288:	ldr	r0, [r6, #8]
   1628c:	cmp	r4, r0
   16290:	bcs	16338 <__assert_fail@plt+0x4ae4>
   16294:	ldr	r7, [r6]
   16298:	ldr	r0, [r7, r4, lsl #3]
   1629c:	cmp	r0, #0
   162a0:	beq	162c0 <__assert_fail@plt+0x4a6c>
   162a4:	ldr	r0, [r9]
   162a8:	cmp	r0, #0
   162ac:	beq	162d4 <__assert_fail@plt+0x4a80>
   162b0:	mov	r1, r0
   162b4:	ldr	r2, [r1, #4]!
   162b8:	str	r2, [r9]
   162bc:	b	162e8 <__assert_fail@plt+0x4a94>
   162c0:	str	sl, [r7, r4, lsl #3]
   162c4:	ldr	r0, [r6, #12]
   162c8:	add	r0, r0, #1
   162cc:	str	r0, [r6, #12]
   162d0:	b	162fc <__assert_fail@plt+0x4aa8>
   162d4:	mov	r0, #8
   162d8:	bl	1a314 <__assert_fail@plt+0x8ac0>
   162dc:	cmp	r0, #0
   162e0:	beq	1632c <__assert_fail@plt+0x4ad8>
   162e4:	add	r1, r0, #4
   162e8:	str	sl, [r0]
   162ec:	add	r2, r7, r4, lsl #3
   162f0:	ldr	r3, [r2, #4]
   162f4:	str	r3, [r1]
   162f8:	str	r0, [r2, #4]
   162fc:	ldr	r0, [sp]
   16300:	str	r5, [r8]
   16304:	ldr	r1, [r0, #12]
   16308:	ldr	r3, [r0, #4]
   1630c:	sub	r1, r1, #1
   16310:	str	r1, [r0, #12]
   16314:	add	r8, r8, #8
   16318:	cmp	r8, r3
   1631c:	bcc	161e0 <__assert_fail@plt+0x498c>
   16320:	mov	r0, #1
   16324:	sub	sp, fp, #28
   16328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1632c:	mov	r0, #0
   16330:	sub	sp, fp, #28
   16334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16338:	bl	11818 <abort@plt>
   1633c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16340:	add	fp, sp, #28
   16344:	sub	sp, sp, #4
   16348:	cmp	r1, #0
   1634c:	beq	16690 <__assert_fail@plt+0x4e3c>
   16350:	mov	r8, r2
   16354:	mov	sl, r1
   16358:	ldr	r1, [r0, #8]
   1635c:	ldr	r2, [r0, #24]
   16360:	mov	r4, r0
   16364:	mov	r0, sl
   16368:	blx	r2
   1636c:	mov	r7, r0
   16370:	ldr	r0, [r4, #8]
   16374:	cmp	r7, r0
   16378:	bcs	16690 <__assert_fail@plt+0x4e3c>
   1637c:	ldr	r5, [r4]
   16380:	mov	r9, r5
   16384:	ldr	r1, [r9, r7, lsl #3]!
   16388:	cmp	r1, #0
   1638c:	beq	16420 <__assert_fail@plt+0x4bcc>
   16390:	cmp	r1, sl
   16394:	beq	163c0 <__assert_fail@plt+0x4b6c>
   16398:	ldr	r2, [r4, #28]
   1639c:	mov	r0, sl
   163a0:	blx	r2
   163a4:	cmp	r0, #0
   163a8:	mov	r6, r9
   163ac:	beq	163dc <__assert_fail@plt+0x4b88>
   163b0:	ldr	r0, [r6]
   163b4:	cmp	r0, #0
   163b8:	bne	163c4 <__assert_fail@plt+0x4b70>
   163bc:	b	16420 <__assert_fail@plt+0x4bcc>
   163c0:	mov	r0, sl
   163c4:	cmp	r8, #0
   163c8:	mov	r7, #0
   163cc:	strne	r0, [r8]
   163d0:	mov	r0, r7
   163d4:	sub	sp, fp, #28
   163d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163dc:	add	r6, r5, r7, lsl #3
   163e0:	ldr	r0, [r6, #4]!
   163e4:	cmp	r0, #0
   163e8:	beq	16420 <__assert_fail@plt+0x4bcc>
   163ec:	ldr	r1, [r0]
   163f0:	cmp	r1, sl
   163f4:	beq	16414 <__assert_fail@plt+0x4bc0>
   163f8:	ldr	r2, [r4, #28]
   163fc:	mov	r0, sl
   16400:	blx	r2
   16404:	ldr	r6, [r6]
   16408:	cmp	r0, #0
   1640c:	beq	163e0 <__assert_fail@plt+0x4b8c>
   16410:	b	163b0 <__assert_fail@plt+0x4b5c>
   16414:	mov	r0, sl
   16418:	cmp	r0, #0
   1641c:	bne	163c4 <__assert_fail@plt+0x4b70>
   16420:	vldr	s0, [r4, #8]
   16424:	vldr	s2, [r4, #12]
   16428:	ldr	r0, [r4, #20]
   1642c:	vcvt.f32.u32	s0, s0
   16430:	vcvt.f32.u32	s4, s2
   16434:	vldr	s2, [r0, #8]
   16438:	vmul.f32	s6, s2, s0
   1643c:	vcmpe.f32	s6, s4
   16440:	vmrs	APSR_nzcv, fpscr
   16444:	bpl	165a8 <__assert_fail@plt+0x4d54>
   16448:	movw	r1, #49552	; 0xc190
   1644c:	movt	r1, #1
   16450:	cmp	r0, r1
   16454:	beq	164f0 <__assert_fail@plt+0x4c9c>
   16458:	vldr	s6, [pc, #564]	; 16694 <__assert_fail@plt+0x4e40>
   1645c:	vcmpe.f32	s2, s6
   16460:	vmrs	APSR_nzcv, fpscr
   16464:	ble	164cc <__assert_fail@plt+0x4c78>
   16468:	vldr	s8, [pc, #552]	; 16698 <__assert_fail@plt+0x4e44>
   1646c:	vcmpe.f32	s2, s8
   16470:	vmrs	APSR_nzcv, fpscr
   16474:	bpl	164cc <__assert_fail@plt+0x4c78>
   16478:	vldr	s8, [pc, #540]	; 1669c <__assert_fail@plt+0x4e48>
   1647c:	vldr	s10, [r0, #12]
   16480:	vcmpe.f32	s10, s8
   16484:	vmrs	APSR_nzcv, fpscr
   16488:	ble	164cc <__assert_fail@plt+0x4c78>
   1648c:	vldr	s8, [r0]
   16490:	vcmpe.f32	s8, #0.0
   16494:	vmrs	APSR_nzcv, fpscr
   16498:	blt	164cc <__assert_fail@plt+0x4c78>
   1649c:	vadd.f32	s6, s8, s6
   164a0:	vcmpe.f32	s6, s2
   164a4:	vmrs	APSR_nzcv, fpscr
   164a8:	bpl	164cc <__assert_fail@plt+0x4c78>
   164ac:	vldr	s8, [r0, #4]
   164b0:	vmov.f32	s10, #112	; 0x3f800000  1.0
   164b4:	vcmpe.f32	s8, s10
   164b8:	vmrs	APSR_nzcv, fpscr
   164bc:	bhi	164cc <__assert_fail@plt+0x4c78>
   164c0:	vcmpe.f32	s6, s8
   164c4:	vmrs	APSR_nzcv, fpscr
   164c8:	bmi	164dc <__assert_fail@plt+0x4c88>
   164cc:	vldr	s2, [pc, #460]	; 166a0 <__assert_fail@plt+0x4e4c>
   164d0:	movw	r0, #49552	; 0xc190
   164d4:	movt	r0, #1
   164d8:	str	r0, [r4, #20]
   164dc:	vmul.f32	s6, s2, s0
   164e0:	vcmpe.f32	s6, s4
   164e4:	vmrs	APSR_nzcv, fpscr
   164e8:	bmi	16504 <__assert_fail@plt+0x4cb0>
   164ec:	b	165a8 <__assert_fail@plt+0x4d54>
   164f0:	mov	r0, r1
   164f4:	vmul.f32	s6, s2, s0
   164f8:	vcmpe.f32	s6, s4
   164fc:	vmrs	APSR_nzcv, fpscr
   16500:	bpl	165a8 <__assert_fail@plt+0x4d54>
   16504:	vldr	s4, [r0, #12]
   16508:	ldrb	r0, [r0, #16]
   1650c:	mvn	r7, #0
   16510:	vmul.f32	s0, s4, s0
   16514:	vldr	s4, [pc, #392]	; 166a4 <__assert_fail@plt+0x4e50>
   16518:	cmp	r0, #0
   1651c:	vmul.f32	s2, s2, s0
   16520:	vseleq.f32	s0, s2, s0
   16524:	vcmpe.f32	s0, s4
   16528:	vmrs	APSR_nzcv, fpscr
   1652c:	bge	16624 <__assert_fail@plt+0x4dd0>
   16530:	vcvt.u32.f32	s0, s0
   16534:	mov	r0, r4
   16538:	vmov	r1, s0
   1653c:	bl	15e8c <__assert_fail@plt+0x4638>
   16540:	cmp	r0, #0
   16544:	beq	16624 <__assert_fail@plt+0x4dd0>
   16548:	ldr	r1, [r4, #8]
   1654c:	ldr	r2, [r4, #24]
   16550:	mov	r0, sl
   16554:	blx	r2
   16558:	mov	r7, r0
   1655c:	ldr	r0, [r4, #8]
   16560:	cmp	r7, r0
   16564:	bcs	16690 <__assert_fail@plt+0x4e3c>
   16568:	ldr	r5, [r4]
   1656c:	mov	r9, r5
   16570:	ldr	r1, [r9, r7, lsl #3]!
   16574:	cmp	r1, #0
   16578:	beq	165d0 <__assert_fail@plt+0x4d7c>
   1657c:	cmp	r1, sl
   16580:	mov	r0, sl
   16584:	beq	165a0 <__assert_fail@plt+0x4d4c>
   16588:	ldr	r2, [r4, #28]
   1658c:	mov	r0, sl
   16590:	blx	r2
   16594:	cmp	r0, #0
   16598:	beq	16640 <__assert_fail@plt+0x4dec>
   1659c:	ldr	r0, [r9]
   165a0:	cmp	r0, #0
   165a4:	bne	16690 <__assert_fail@plt+0x4e3c>
   165a8:	ldr	r0, [r9]
   165ac:	cmp	r0, #0
   165b0:	beq	165d0 <__assert_fail@plt+0x4d7c>
   165b4:	ldr	r0, [r4, #36]	; 0x24
   165b8:	cmp	r0, #0
   165bc:	beq	165f0 <__assert_fail@plt+0x4d9c>
   165c0:	mov	r1, r0
   165c4:	ldr	r2, [r1, #4]!
   165c8:	str	r2, [r4, #36]	; 0x24
   165cc:	b	16604 <__assert_fail@plt+0x4db0>
   165d0:	str	sl, [r9]
   165d4:	ldr	r0, [r4, #12]
   165d8:	ldr	r1, [r4, #16]
   165dc:	add	r0, r0, #1
   165e0:	add	r1, r1, #1
   165e4:	str	r0, [r4, #12]
   165e8:	str	r1, [r4, #16]
   165ec:	b	16620 <__assert_fail@plt+0x4dcc>
   165f0:	mov	r0, #8
   165f4:	bl	1a314 <__assert_fail@plt+0x8ac0>
   165f8:	cmp	r0, #0
   165fc:	beq	16630 <__assert_fail@plt+0x4ddc>
   16600:	add	r1, r0, #4
   16604:	str	sl, [r0]
   16608:	ldr	r2, [r9, #4]
   1660c:	str	r2, [r1]
   16610:	str	r0, [r9, #4]
   16614:	ldr	r0, [r4, #16]
   16618:	add	r0, r0, #1
   1661c:	str	r0, [r4, #16]
   16620:	mov	r7, #1
   16624:	mov	r0, r7
   16628:	sub	sp, fp, #28
   1662c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16630:	mvn	r7, #0
   16634:	mov	r0, r7
   16638:	sub	sp, fp, #28
   1663c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16640:	add	r6, r5, r7, lsl #3
   16644:	ldr	r0, [r6, #4]!
   16648:	cmp	r0, #0
   1664c:	beq	165a8 <__assert_fail@plt+0x4d54>
   16650:	ldr	r1, [r0]
   16654:	cmp	r1, sl
   16658:	beq	16684 <__assert_fail@plt+0x4e30>
   1665c:	ldr	r2, [r4, #28]
   16660:	mov	r0, sl
   16664:	blx	r2
   16668:	ldr	r6, [r6]
   1666c:	cmp	r0, #0
   16670:	beq	16644 <__assert_fail@plt+0x4df0>
   16674:	ldr	r0, [r6]
   16678:	cmp	r0, #0
   1667c:	beq	165a8 <__assert_fail@plt+0x4d54>
   16680:	b	16690 <__assert_fail@plt+0x4e3c>
   16684:	mov	r0, sl
   16688:	cmp	r0, #0
   1668c:	beq	165a8 <__assert_fail@plt+0x4d54>
   16690:	bl	11818 <abort@plt>
   16694:	stclcc	12, cr12, [ip, #820]	; 0x334
   16698:	svccc	0x00666666
   1669c:	svccc	0x008ccccd
   166a0:	svccc	0x004ccccd
   166a4:	svcmi	0x00800000
   166a8:	push	{r4, sl, fp, lr}
   166ac:	add	fp, sp, #8
   166b0:	sub	sp, sp, #8
   166b4:	add	r2, sp, #4
   166b8:	mov	r4, r1
   166bc:	bl	1633c <__assert_fail@plt+0x4ae8>
   166c0:	cmn	r0, #1
   166c4:	beq	166e0 <__assert_fail@plt+0x4e8c>
   166c8:	ldr	r1, [sp, #4]
   166cc:	cmp	r0, #0
   166d0:	moveq	r4, r1
   166d4:	mov	r0, r4
   166d8:	sub	sp, fp, #8
   166dc:	pop	{r4, sl, fp, pc}
   166e0:	mov	r4, #0
   166e4:	mov	r0, r4
   166e8:	sub	sp, fp, #8
   166ec:	pop	{r4, sl, fp, pc}
   166f0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   166f4:	add	fp, sp, #24
   166f8:	mov	r9, r1
   166fc:	ldr	r1, [r0, #8]
   16700:	ldr	r2, [r0, #24]
   16704:	mov	r5, r0
   16708:	mov	r0, r9
   1670c:	blx	r2
   16710:	mov	r7, r0
   16714:	ldr	r0, [r5, #8]
   16718:	cmp	r7, r0
   1671c:	bcs	1698c <__assert_fail@plt+0x5138>
   16720:	ldr	r6, [r5]
   16724:	mov	r8, #0
   16728:	mov	r4, r6
   1672c:	ldr	r1, [r4, r7, lsl #3]!
   16730:	cmp	r1, #0
   16734:	beq	167e8 <__assert_fail@plt+0x4f94>
   16738:	cmp	r1, r9
   1673c:	beq	16758 <__assert_fail@plt+0x4f04>
   16740:	ldr	r2, [r5, #28]
   16744:	mov	r0, r9
   16748:	blx	r2
   1674c:	cmp	r0, #0
   16750:	beq	16790 <__assert_fail@plt+0x4f3c>
   16754:	ldr	r9, [r4]
   16758:	add	r0, r6, r7, lsl #3
   1675c:	ldr	r0, [r0, #4]
   16760:	cmp	r0, #0
   16764:	beq	167d8 <__assert_fail@plt+0x4f84>
   16768:	ldm	r0, {r1, r2}
   1676c:	stm	r4, {r1, r2}
   16770:	mov	r1, #0
   16774:	str	r1, [r0]
   16778:	ldr	r1, [r5, #36]	; 0x24
   1677c:	str	r1, [r0, #4]
   16780:	str	r0, [r5, #36]	; 0x24
   16784:	cmp	r9, #0
   16788:	bne	16820 <__assert_fail@plt+0x4fcc>
   1678c:	b	167e8 <__assert_fail@plt+0x4f94>
   16790:	add	r7, r6, r7, lsl #3
   16794:	ldr	r0, [r7, #4]!
   16798:	cmp	r0, #0
   1679c:	beq	167e8 <__assert_fail@plt+0x4f94>
   167a0:	ldr	r1, [r0]
   167a4:	cmp	r1, r9
   167a8:	beq	167f0 <__assert_fail@plt+0x4f9c>
   167ac:	ldr	r2, [r5, #28]
   167b0:	mov	r0, r9
   167b4:	blx	r2
   167b8:	ldr	r1, [r7]
   167bc:	cmp	r0, #0
   167c0:	bne	167f8 <__assert_fail@plt+0x4fa4>
   167c4:	ldr	r0, [r1, #4]!
   167c8:	cmp	r0, #0
   167cc:	mov	r7, r1
   167d0:	bne	167a0 <__assert_fail@plt+0x4f4c>
   167d4:	b	167e8 <__assert_fail@plt+0x4f94>
   167d8:	mov	r0, #0
   167dc:	str	r0, [r4]
   167e0:	cmp	r9, #0
   167e4:	bne	16820 <__assert_fail@plt+0x4fcc>
   167e8:	mov	r0, r8
   167ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   167f0:	mov	r1, r0
   167f4:	b	167fc <__assert_fail@plt+0x4fa8>
   167f8:	ldr	r9, [r1]
   167fc:	ldr	r0, [r1, #4]
   16800:	str	r0, [r7]
   16804:	mov	r0, #0
   16808:	str	r0, [r1]
   1680c:	ldr	r0, [r5, #36]	; 0x24
   16810:	str	r0, [r1, #4]
   16814:	str	r1, [r5, #36]	; 0x24
   16818:	cmp	r9, #0
   1681c:	beq	167e8 <__assert_fail@plt+0x4f94>
   16820:	ldr	r0, [r5, #16]
   16824:	sub	r0, r0, #1
   16828:	str	r0, [r5, #16]
   1682c:	ldr	r0, [r4]
   16830:	cmp	r0, #0
   16834:	bne	1694c <__assert_fail@plt+0x50f8>
   16838:	ldr	r0, [r5, #12]
   1683c:	vldr	s0, [r5, #8]
   16840:	sub	r1, r0, #1
   16844:	str	r1, [r5, #12]
   16848:	vmov	s2, r1
   1684c:	ldr	r0, [r5, #20]
   16850:	vcvt.f32.u32	s0, s0
   16854:	vcvt.f32.u32	s2, s2
   16858:	vldr	s4, [r0]
   1685c:	vmul.f32	s6, s4, s0
   16860:	vcmpe.f32	s6, s2
   16864:	vmrs	APSR_nzcv, fpscr
   16868:	ble	1694c <__assert_fail@plt+0x50f8>
   1686c:	movw	r1, #49552	; 0xc190
   16870:	movt	r1, #1
   16874:	cmp	r0, r1
   16878:	beq	168e0 <__assert_fail@plt+0x508c>
   1687c:	vldr	s8, [pc, #268]	; 16990 <__assert_fail@plt+0x513c>
   16880:	vldr	s6, [r0, #8]
   16884:	vcmpe.f32	s6, s8
   16888:	vmrs	APSR_nzcv, fpscr
   1688c:	ble	168bc <__assert_fail@plt+0x5068>
   16890:	vldr	s10, [pc, #252]	; 16994 <__assert_fail@plt+0x5140>
   16894:	vcmpe.f32	s6, s10
   16898:	vmrs	APSR_nzcv, fpscr
   1689c:	bpl	168bc <__assert_fail@plt+0x5068>
   168a0:	vcmpe.f32	s4, #0.0
   168a4:	vmrs	APSR_nzcv, fpscr
   168a8:	vldrge	s10, [r0, #12]
   168ac:	vldrge	s12, [pc, #228]	; 16998 <__assert_fail@plt+0x5144>
   168b0:	vcmpege.f32	s10, s12
   168b4:	vmrsge	APSR_nzcv, fpscr
   168b8:	bgt	16958 <__assert_fail@plt+0x5104>
   168bc:	vldr	s4, [pc, #216]	; 1699c <__assert_fail@plt+0x5148>
   168c0:	movw	r0, #49552	; 0xc190
   168c4:	movt	r0, #1
   168c8:	str	r0, [r5, #20]
   168cc:	vmul.f32	s4, s4, s0
   168d0:	vcmpe.f32	s4, s2
   168d4:	vmrs	APSR_nzcv, fpscr
   168d8:	bgt	168f4 <__assert_fail@plt+0x50a0>
   168dc:	b	1694c <__assert_fail@plt+0x50f8>
   168e0:	mov	r0, r1
   168e4:	vmul.f32	s4, s4, s0
   168e8:	vcmpe.f32	s4, s2
   168ec:	vmrs	APSR_nzcv, fpscr
   168f0:	ble	1694c <__assert_fail@plt+0x50f8>
   168f4:	ldrb	r1, [r0, #16]
   168f8:	vldr	s2, [r0, #4]
   168fc:	cmp	r1, #0
   16900:	vmul.f32	s0, s2, s0
   16904:	vldreq	s2, [r0, #8]
   16908:	mov	r0, r5
   1690c:	vmuleq.f32	s0, s0, s2
   16910:	vcvt.u32.f32	s0, s0
   16914:	vmov	r1, s0
   16918:	bl	15e8c <__assert_fail@plt+0x4638>
   1691c:	cmp	r0, #0
   16920:	bne	1694c <__assert_fail@plt+0x50f8>
   16924:	ldr	r0, [r5, #36]	; 0x24
   16928:	cmp	r0, #0
   1692c:	beq	16944 <__assert_fail@plt+0x50f0>
   16930:	ldr	r4, [r0, #4]
   16934:	bl	1a978 <__assert_fail@plt+0x9124>
   16938:	cmp	r4, #0
   1693c:	mov	r0, r4
   16940:	bne	16930 <__assert_fail@plt+0x50dc>
   16944:	mov	r0, #0
   16948:	str	r0, [r5, #36]	; 0x24
   1694c:	mov	r8, r9
   16950:	mov	r0, r8
   16954:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16958:	vadd.f32	s8, s4, s8
   1695c:	vcmpe.f32	s8, s6
   16960:	vmrs	APSR_nzcv, fpscr
   16964:	bpl	168bc <__assert_fail@plt+0x5068>
   16968:	vldr	s6, [r0, #4]
   1696c:	vmov.f32	s10, #112	; 0x3f800000  1.0
   16970:	vcmpe.f32	s6, s10
   16974:	vmrs	APSR_nzcv, fpscr
   16978:	bhi	168bc <__assert_fail@plt+0x5068>
   1697c:	vcmpe.f32	s8, s6
   16980:	vmrs	APSR_nzcv, fpscr
   16984:	bmi	168e4 <__assert_fail@plt+0x5090>
   16988:	b	168bc <__assert_fail@plt+0x5068>
   1698c:	bl	11818 <abort@plt>
   16990:	stclcc	12, cr12, [ip, #820]	; 0x334
   16994:	svccc	0x00666666
   16998:	svccc	0x008ccccd
   1699c:	andeq	r0, r0, r0
   169a0:	b	166f0 <__assert_fail@plt+0x4e9c>
   169a4:	mov	r3, #1
   169a8:	mov	r2, #0
   169ac:	vdup.32	q8, r1
   169b0:	strb	r3, [r0, #28]
   169b4:	str	r2, [r0, #20]
   169b8:	str	r2, [r0, #24]
   169bc:	vst1.32	{d16-d17}, [r0]!
   169c0:	str	r1, [r0]
   169c4:	bx	lr
   169c8:	ldrb	r0, [r0, #28]
   169cc:	bx	lr
   169d0:	push	{fp, lr}
   169d4:	mov	fp, sp
   169d8:	ldrb	r3, [r0, #28]
   169dc:	ldr	r2, [r0, #20]
   169e0:	eor	lr, r3, #1
   169e4:	add	r2, r2, lr
   169e8:	and	r3, r2, #3
   169ec:	ldr	ip, [r0, r3, lsl #2]
   169f0:	str	r1, [r0, r3, lsl #2]
   169f4:	str	r3, [r0, #20]
   169f8:	ldr	r1, [r0, #24]
   169fc:	cmp	r3, r1
   16a00:	addeq	r1, r2, lr
   16a04:	andeq	r1, r1, #3
   16a08:	streq	r1, [r0, #24]
   16a0c:	mov	r1, #0
   16a10:	strb	r1, [r0, #28]
   16a14:	mov	r0, ip
   16a18:	pop	{fp, pc}
   16a1c:	ldrb	r1, [r0, #28]
   16a20:	cmp	r1, #0
   16a24:	bne	16a68 <__assert_fail@plt+0x5214>
   16a28:	ldr	r3, [r0, #20]
   16a2c:	ldr	r2, [r0, #16]
   16a30:	ldr	r1, [r0, r3, lsl #2]
   16a34:	str	r2, [r0, r3, lsl #2]
   16a38:	ldr	r2, [r0, #20]
   16a3c:	ldr	r3, [r0, #24]
   16a40:	cmp	r2, r3
   16a44:	moveq	r2, #1
   16a48:	strbeq	r2, [r0, #28]
   16a4c:	moveq	r0, r1
   16a50:	bxeq	lr
   16a54:	sub	r2, r2, #1
   16a58:	and	r2, r2, #3
   16a5c:	str	r2, [r0, #20]
   16a60:	mov	r0, r1
   16a64:	bx	lr
   16a68:	push	{fp, lr}
   16a6c:	mov	fp, sp
   16a70:	bl	11818 <abort@plt>
   16a74:	sub	sp, sp, #4
   16a78:	push	{fp, lr}
   16a7c:	mov	fp, sp
   16a80:	sub	sp, sp, #4
   16a84:	str	r3, [fp, #8]
   16a88:	mov	r3, #0
   16a8c:	tst	r2, #64	; 0x40
   16a90:	addne	r3, fp, #8
   16a94:	addne	r3, r3, #4
   16a98:	strne	r3, [sp]
   16a9c:	ldrne	r3, [fp, #8]
   16aa0:	bl	116bc <openat64@plt>
   16aa4:	bl	1959c <__assert_fail@plt+0x7d48>
   16aa8:	mov	sp, fp
   16aac:	pop	{fp, lr}
   16ab0:	add	sp, sp, #4
   16ab4:	bx	lr
   16ab8:	push	{r4, r5, r6, sl, fp, lr}
   16abc:	add	fp, sp, #16
   16ac0:	orr	r2, r2, #18688	; 0x4900
   16ac4:	mov	r4, r3
   16ac8:	orr	r2, r2, #524288	; 0x80000
   16acc:	bl	16a74 <__assert_fail@plt+0x5220>
   16ad0:	mov	r5, r0
   16ad4:	mov	r0, #0
   16ad8:	cmp	r5, #0
   16adc:	poplt	{r4, r5, r6, sl, fp, pc}
   16ae0:	mov	r0, r5
   16ae4:	bl	117a0 <fdopendir@plt>
   16ae8:	cmp	r0, #0
   16aec:	strne	r5, [r4]
   16af0:	popne	{r4, r5, r6, sl, fp, pc}
   16af4:	bl	116d4 <__errno_location@plt>
   16af8:	ldr	r6, [r0]
   16afc:	mov	r4, r0
   16b00:	mov	r0, r5
   16b04:	bl	11824 <close@plt>
   16b08:	mov	r0, #0
   16b0c:	str	r6, [r4]
   16b10:	pop	{r4, r5, r6, sl, fp, pc}
   16b14:	push	{r4, r5, fp, lr}
   16b18:	add	fp, sp, #8
   16b1c:	cmp	r0, #0
   16b20:	beq	16bb4 <__assert_fail@plt+0x5360>
   16b24:	mov	r1, #47	; 0x2f
   16b28:	mov	r4, r0
   16b2c:	bl	1177c <strrchr@plt>
   16b30:	cmp	r0, #0
   16b34:	mov	r5, r4
   16b38:	addne	r5, r0, #1
   16b3c:	sub	r0, r5, r4
   16b40:	cmp	r0, #7
   16b44:	blt	16b98 <__assert_fail@plt+0x5344>
   16b48:	movw	r1, #49628	; 0xc1dc
   16b4c:	sub	r0, r5, #7
   16b50:	mov	r2, #7
   16b54:	movt	r1, #1
   16b58:	bl	1180c <strncmp@plt>
   16b5c:	cmp	r0, #0
   16b60:	bne	16b98 <__assert_fail@plt+0x5344>
   16b64:	movw	r1, #49636	; 0xc1e4
   16b68:	mov	r0, r5
   16b6c:	mov	r2, #3
   16b70:	movt	r1, #1
   16b74:	bl	1180c <strncmp@plt>
   16b78:	cmp	r0, #0
   16b7c:	beq	16b88 <__assert_fail@plt+0x5334>
   16b80:	mov	r4, r5
   16b84:	b	16b98 <__assert_fail@plt+0x5344>
   16b88:	movw	r0, #53672	; 0xd1a8
   16b8c:	add	r4, r5, #3
   16b90:	movt	r0, #2
   16b94:	str	r4, [r0]
   16b98:	movw	r0, #53676	; 0xd1ac
   16b9c:	movt	r0, #2
   16ba0:	str	r4, [r0]
   16ba4:	movw	r0, #53760	; 0xd200
   16ba8:	movt	r0, #2
   16bac:	str	r4, [r0]
   16bb0:	pop	{r4, r5, fp, pc}
   16bb4:	movw	r0, #53688	; 0xd1b8
   16bb8:	mov	r1, #55	; 0x37
   16bbc:	mov	r2, #1
   16bc0:	movt	r0, #2
   16bc4:	ldr	r3, [r0]
   16bc8:	movw	r0, #49572	; 0xc1a4
   16bcc:	movt	r0, #1
   16bd0:	bl	115b4 <fwrite@plt>
   16bd4:	bl	11818 <abort@plt>
   16bd8:	push	{r4, r5, r6, sl, fp, lr}
   16bdc:	add	fp, sp, #16
   16be0:	mov	r4, r0
   16be4:	movw	r0, #53768	; 0xd208
   16be8:	movt	r0, #2
   16bec:	cmp	r4, #0
   16bf0:	moveq	r4, r0
   16bf4:	bl	116d4 <__errno_location@plt>
   16bf8:	ldr	r6, [r0]
   16bfc:	mov	r5, r0
   16c00:	mov	r0, r4
   16c04:	mov	r1, #48	; 0x30
   16c08:	bl	1a100 <__assert_fail@plt+0x88ac>
   16c0c:	str	r6, [r5]
   16c10:	pop	{r4, r5, r6, sl, fp, pc}
   16c14:	movw	r1, #53768	; 0xd208
   16c18:	cmp	r0, #0
   16c1c:	movt	r1, #2
   16c20:	movne	r1, r0
   16c24:	ldr	r0, [r1]
   16c28:	bx	lr
   16c2c:	movw	r2, #53768	; 0xd208
   16c30:	cmp	r0, #0
   16c34:	movt	r2, #2
   16c38:	movne	r2, r0
   16c3c:	str	r1, [r2]
   16c40:	bx	lr
   16c44:	movw	r3, #53768	; 0xd208
   16c48:	cmp	r0, #0
   16c4c:	movt	r3, #2
   16c50:	movne	r3, r0
   16c54:	ubfx	r0, r1, #5, #3
   16c58:	and	r1, r1, #31
   16c5c:	add	r0, r3, r0, lsl #2
   16c60:	ldr	r3, [r0, #8]
   16c64:	eor	r2, r2, r3, lsr r1
   16c68:	and	r2, r2, #1
   16c6c:	eor	r2, r3, r2, lsl r1
   16c70:	str	r2, [r0, #8]
   16c74:	mov	r0, #1
   16c78:	and	r0, r0, r3, lsr r1
   16c7c:	bx	lr
   16c80:	movw	r2, #53768	; 0xd208
   16c84:	cmp	r0, #0
   16c88:	movt	r2, #2
   16c8c:	movne	r2, r0
   16c90:	ldr	r0, [r2, #4]
   16c94:	str	r1, [r2, #4]
   16c98:	bx	lr
   16c9c:	movw	r3, #53768	; 0xd208
   16ca0:	cmp	r0, #0
   16ca4:	movt	r3, #2
   16ca8:	movne	r3, r0
   16cac:	cmp	r1, #0
   16cb0:	mov	r0, #10
   16cb4:	cmpne	r2, #0
   16cb8:	str	r0, [r3]
   16cbc:	bne	16ccc <__assert_fail@plt+0x5478>
   16cc0:	push	{fp, lr}
   16cc4:	mov	fp, sp
   16cc8:	bl	11818 <abort@plt>
   16ccc:	str	r1, [r3, #40]	; 0x28
   16cd0:	str	r2, [r3, #44]	; 0x2c
   16cd4:	bx	lr
   16cd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cdc:	add	fp, sp, #28
   16ce0:	sub	sp, sp, #20
   16ce4:	mov	r7, r0
   16ce8:	ldr	r0, [fp, #8]
   16cec:	movw	r5, #53768	; 0xd208
   16cf0:	mov	r8, r3
   16cf4:	mov	r9, r2
   16cf8:	mov	sl, r1
   16cfc:	movt	r5, #2
   16d00:	cmp	r0, #0
   16d04:	movne	r5, r0
   16d08:	bl	116d4 <__errno_location@plt>
   16d0c:	mov	r4, r0
   16d10:	ldm	r5, {r0, r1}
   16d14:	ldr	r2, [r5, #40]	; 0x28
   16d18:	ldr	r3, [r5, #44]	; 0x2c
   16d1c:	add	r5, r5, #8
   16d20:	ldr	r6, [r4]
   16d24:	stm	sp, {r0, r1, r5}
   16d28:	str	r2, [sp, #12]
   16d2c:	str	r3, [sp, #16]
   16d30:	mov	r0, r7
   16d34:	mov	r1, sl
   16d38:	mov	r2, r9
   16d3c:	mov	r3, r8
   16d40:	bl	16d50 <__assert_fail@plt+0x54fc>
   16d44:	str	r6, [r4]
   16d48:	sub	sp, fp, #28
   16d4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d54:	add	fp, sp, #28
   16d58:	sub	sp, sp, #156	; 0x9c
   16d5c:	str	r0, [sp, #76]	; 0x4c
   16d60:	ldr	r0, [fp, #12]
   16d64:	mov	r6, r1
   16d68:	str	r3, [sp, #84]	; 0x54
   16d6c:	str	r2, [fp, #-84]	; 0xffffffac
   16d70:	and	r1, r0, #4
   16d74:	str	r1, [sp, #24]
   16d78:	and	r1, r0, #1
   16d7c:	str	r1, [sp, #28]
   16d80:	ubfx	r8, r0, #1, #1
   16d84:	bl	115cc <__ctype_get_mb_cur_max@plt>
   16d88:	str	r0, [sp, #32]
   16d8c:	ldr	r0, [fp, #24]
   16d90:	ldr	r7, [fp, #8]
   16d94:	mov	r1, #0
   16d98:	mov	r2, #0
   16d9c:	mov	r4, #1
   16da0:	str	r1, [sp, #52]	; 0x34
   16da4:	str	r0, [sp, #72]	; 0x48
   16da8:	ldr	r0, [fp, #20]
   16dac:	str	r0, [sp, #68]	; 0x44
   16db0:	mov	r0, #0
   16db4:	str	r0, [sp, #48]	; 0x30
   16db8:	mov	r0, #0
   16dbc:	str	r0, [sp, #92]	; 0x5c
   16dc0:	mov	r0, #0
   16dc4:	str	r0, [fp, #-76]	; 0xffffffb4
   16dc8:	mov	r0, #0
   16dcc:	cmp	r7, #10
   16dd0:	bhi	180b8 <__assert_fail@plt+0x6864>
   16dd4:	add	r1, pc, #28
   16dd8:	mov	sl, r6
   16ddc:	ldr	r6, [sp, #76]	; 0x4c
   16de0:	ldr	ip, [fp, #-84]	; 0xffffffac
   16de4:	ldr	lr, [sp, #84]	; 0x54
   16de8:	mov	r9, #0
   16dec:	mov	r3, #1
   16df0:	mov	r5, #0
   16df4:	ldr	pc, [r1, r7, lsl #2]
   16df8:	andeq	r6, r1, r8, asr #29
   16dfc:	andeq	r6, r1, r4, lsl #30
   16e00:	ldrdeq	r6, [r1], -r8
   16e04:	andeq	r6, r1, r0, asr #29
   16e08:	strdeq	r6, [r1], -r8
   16e0c:	andeq	r6, r1, ip, lsr #30
   16e10:	andeq	r6, r1, r8, ror #29
   16e14:	andeq	r7, r1, r8, lsr r1
   16e18:	andeq	r6, r1, r4, lsr #28
   16e1c:	andeq	r6, r1, r4, lsr #28
   16e20:	andeq	r7, r1, ip, asr #1
   16e24:	mov	r9, r4
   16e28:	movw	r4, #49718	; 0xc236
   16e2c:	mov	r5, r8
   16e30:	mov	r8, r2
   16e34:	mov	r0, #0
   16e38:	mov	r2, #5
   16e3c:	movt	r4, #1
   16e40:	mov	r1, r4
   16e44:	bl	11548 <dcgettext@plt>
   16e48:	cmp	r0, r4
   16e4c:	str	r0, [sp, #68]	; 0x44
   16e50:	bne	16fe0 <__assert_fail@plt+0x578c>
   16e54:	bl	1aa44 <__assert_fail@plt+0x91f0>
   16e58:	ldrb	r1, [r0]
   16e5c:	and	r1, r1, #223	; 0xdf
   16e60:	cmp	r1, #71	; 0x47
   16e64:	beq	16fac <__assert_fail@plt+0x5758>
   16e68:	cmp	r1, #85	; 0x55
   16e6c:	bne	16fc4 <__assert_fail@plt+0x5770>
   16e70:	ldrb	r1, [r0, #1]
   16e74:	and	r1, r1, #223	; 0xdf
   16e78:	cmp	r1, #84	; 0x54
   16e7c:	bne	16fc4 <__assert_fail@plt+0x5770>
   16e80:	ldrb	r1, [r0, #2]
   16e84:	and	r1, r1, #223	; 0xdf
   16e88:	cmp	r1, #70	; 0x46
   16e8c:	bne	16fc4 <__assert_fail@plt+0x5770>
   16e90:	ldrb	r1, [r0, #3]
   16e94:	cmp	r1, #45	; 0x2d
   16e98:	ldrbeq	r1, [r0, #4]
   16e9c:	cmpeq	r1, #56	; 0x38
   16ea0:	bne	16fc4 <__assert_fail@plt+0x5770>
   16ea4:	ldrb	r0, [r0, #5]
   16ea8:	cmp	r0, #0
   16eac:	movw	r0, #49720	; 0xc238
   16eb0:	movt	r0, #1
   16eb4:	str	r0, [sp, #68]	; 0x44
   16eb8:	bne	16fc4 <__assert_fail@plt+0x5770>
   16ebc:	b	16fe0 <__assert_fail@plt+0x578c>
   16ec0:	mov	r0, #1
   16ec4:	b	16f04 <__assert_fail@plt+0x56b0>
   16ec8:	mov	r7, #0
   16ecc:	mov	r9, #0
   16ed0:	mov	r3, r0
   16ed4:	b	16fa4 <__assert_fail@plt+0x5750>
   16ed8:	tst	r8, #1
   16edc:	bne	16f04 <__assert_fail@plt+0x56b0>
   16ee0:	mov	r3, r0
   16ee4:	b	16f5c <__assert_fail@plt+0x5708>
   16ee8:	mov	r0, #1
   16eec:	mov	r9, #0
   16ef0:	mov	r7, #5
   16ef4:	b	16f40 <__assert_fail@plt+0x56ec>
   16ef8:	mov	r3, #1
   16efc:	tst	r8, #1
   16f00:	beq	16f5c <__assert_fail@plt+0x5708>
   16f04:	mov	r1, #1
   16f08:	mov	r9, #0
   16f0c:	mov	r7, #2
   16f10:	mov	r3, r0
   16f14:	mov	r5, #1
   16f18:	str	r1, [fp, #-76]	; 0xffffffb4
   16f1c:	movw	r1, #51065	; 0xc779
   16f20:	movt	r1, #1
   16f24:	str	r1, [sp, #92]	; 0x5c
   16f28:	b	17138 <__assert_fail@plt+0x58e4>
   16f2c:	mov	r7, #5
   16f30:	tst	r8, #1
   16f34:	beq	16f7c <__assert_fail@plt+0x5728>
   16f38:	mov	r0, #1
   16f3c:	mov	r9, #0
   16f40:	str	r0, [fp, #-76]	; 0xffffffb4
   16f44:	movw	r0, #49716	; 0xc234
   16f48:	mov	r3, #1
   16f4c:	mov	r5, #1
   16f50:	movt	r0, #1
   16f54:	str	r0, [sp, #92]	; 0x5c
   16f58:	b	17138 <__assert_fail@plt+0x58e4>
   16f5c:	cmp	sl, #0
   16f60:	mov	r9, #1
   16f64:	mov	r7, #2
   16f68:	movne	r0, #39	; 0x27
   16f6c:	strbne	r0, [r6]
   16f70:	movw	r0, #51065	; 0xc779
   16f74:	movt	r0, #1
   16f78:	b	16f98 <__assert_fail@plt+0x5744>
   16f7c:	cmp	sl, #0
   16f80:	mov	r9, #1
   16f84:	mov	r3, #1
   16f88:	movne	r0, #34	; 0x22
   16f8c:	strbne	r0, [r6]
   16f90:	movw	r0, #49716	; 0xc234
   16f94:	movt	r0, #1
   16f98:	str	r0, [sp, #92]	; 0x5c
   16f9c:	mov	r0, #1
   16fa0:	str	r0, [fp, #-76]	; 0xffffffb4
   16fa4:	mov	r5, #0
   16fa8:	b	17138 <__assert_fail@plt+0x58e4>
   16fac:	ldrb	r1, [r0, #1]
   16fb0:	and	r1, r1, #223	; 0xdf
   16fb4:	cmp	r1, #66	; 0x42
   16fb8:	ldrbeq	r1, [r0, #2]
   16fbc:	cmpeq	r1, #49	; 0x31
   16fc0:	beq	17ee0 <__assert_fail@plt+0x668c>
   16fc4:	movw	r0, #51065	; 0xc779
   16fc8:	movw	r1, #49716	; 0xc234
   16fcc:	cmp	r7, #9
   16fd0:	movt	r0, #1
   16fd4:	movt	r1, #1
   16fd8:	moveq	r0, r1
   16fdc:	str	r0, [sp, #68]	; 0x44
   16fe0:	movw	r4, #51065	; 0xc779
   16fe4:	mov	r0, #0
   16fe8:	mov	r2, #5
   16fec:	movt	r4, #1
   16ff0:	mov	r1, r4
   16ff4:	bl	11548 <dcgettext@plt>
   16ff8:	cmp	r0, r4
   16ffc:	str	r0, [sp, #72]	; 0x48
   17000:	beq	17010 <__assert_fail@plt+0x57bc>
   17004:	mov	r4, r9
   17008:	mov	r2, r8
   1700c:	b	170c8 <__assert_fail@plt+0x5874>
   17010:	bl	1aa44 <__assert_fail@plt+0x91f0>
   17014:	ldrb	r1, [r0]
   17018:	mov	r4, r9
   1701c:	and	r1, r1, #223	; 0xdf
   17020:	cmp	r1, #71	; 0x47
   17024:	beq	17080 <__assert_fail@plt+0x582c>
   17028:	cmp	r1, #85	; 0x55
   1702c:	mov	r2, r8
   17030:	bne	170a8 <__assert_fail@plt+0x5854>
   17034:	ldrb	r1, [r0, #1]
   17038:	and	r1, r1, #223	; 0xdf
   1703c:	cmp	r1, #84	; 0x54
   17040:	bne	170a8 <__assert_fail@plt+0x5854>
   17044:	ldrb	r1, [r0, #2]
   17048:	and	r1, r1, #223	; 0xdf
   1704c:	cmp	r1, #70	; 0x46
   17050:	ldrbeq	r1, [r0, #3]
   17054:	cmpeq	r1, #45	; 0x2d
   17058:	bne	170a8 <__assert_fail@plt+0x5854>
   1705c:	ldrb	r1, [r0, #4]
   17060:	cmp	r1, #56	; 0x38
   17064:	ldrbeq	r0, [r0, #5]
   17068:	cmpeq	r0, #0
   1706c:	bne	170a8 <__assert_fail@plt+0x5854>
   17070:	movw	r0, #49724	; 0xc23c
   17074:	movt	r0, #1
   17078:	str	r0, [sp, #72]	; 0x48
   1707c:	b	170c8 <__assert_fail@plt+0x5874>
   17080:	ldrb	r1, [r0, #1]
   17084:	mov	r2, r8
   17088:	and	r1, r1, #223	; 0xdf
   1708c:	cmp	r1, #66	; 0x42
   17090:	bne	170a8 <__assert_fail@plt+0x5854>
   17094:	ldrb	r1, [r0, #2]
   17098:	cmp	r1, #49	; 0x31
   1709c:	ldrbeq	r1, [r0, #3]
   170a0:	cmpeq	r1, #56	; 0x38
   170a4:	beq	17f24 <__assert_fail@plt+0x66d0>
   170a8:	movw	r0, #51065	; 0xc779
   170ac:	cmp	r7, #9
   170b0:	movt	r0, #1
   170b4:	mov	r1, r0
   170b8:	movw	r0, #49716	; 0xc234
   170bc:	movt	r0, #1
   170c0:	moveq	r1, r0
   170c4:	str	r1, [sp, #72]	; 0x48
   170c8:	mov	r8, r5
   170cc:	mov	r9, #0
   170d0:	tst	r8, #1
   170d4:	mov	r5, r8
   170d8:	str	r2, [fp, #-48]	; 0xffffffd0
   170dc:	bne	17114 <__assert_fail@plt+0x58c0>
   170e0:	ldr	r0, [sp, #68]	; 0x44
   170e4:	ldrb	r0, [r0]
   170e8:	cmp	r0, #0
   170ec:	beq	17114 <__assert_fail@plt+0x58c0>
   170f0:	ldr	r1, [sp, #68]	; 0x44
   170f4:	mov	r9, #0
   170f8:	add	r1, r1, #1
   170fc:	cmp	r9, sl
   17100:	strbcc	r0, [r6, r9]
   17104:	ldrb	r0, [r1, r9]
   17108:	add	r9, r9, #1
   1710c:	cmp	r0, #0
   17110:	bne	170fc <__assert_fail@plt+0x58a8>
   17114:	ldr	r8, [sp, #72]	; 0x48
   17118:	mov	r0, r8
   1711c:	bl	116b0 <strlen@plt>
   17120:	ldr	ip, [fp, #-84]	; 0xffffffac
   17124:	ldr	lr, [sp, #84]	; 0x54
   17128:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1712c:	str	r0, [fp, #-76]	; 0xffffffb4
   17130:	str	r8, [sp, #92]	; 0x5c
   17134:	mov	r3, #1
   17138:	ldr	r0, [fp, #16]
   1713c:	str	r7, [fp, #-64]	; 0xffffffc0
   17140:	str	r5, [fp, #-72]	; 0xffffffb8
   17144:	str	r3, [sp, #80]	; 0x50
   17148:	cmp	r0, #0
   1714c:	movwne	r0, #1
   17150:	and	r0, r0, r5
   17154:	str	r0, [fp, #-88]	; 0xffffffa8
   17158:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1715c:	cmp	r0, #0
   17160:	movwne	r0, #1
   17164:	subs	r7, r7, #2
   17168:	and	r1, r0, r5
   1716c:	str	r7, [fp, #-80]	; 0xffffffb0
   17170:	and	r1, r3, r1
   17174:	str	r1, [sp, #40]	; 0x28
   17178:	clz	r1, r7
   1717c:	lsr	r1, r1, #5
   17180:	and	r1, r1, r5
   17184:	eor	r5, r5, #1
   17188:	str	r1, [sp, #36]	; 0x24
   1718c:	mov	r1, r7
   17190:	str	r5, [sp, #88]	; 0x58
   17194:	mov	r7, #0
   17198:	movwne	r1, #1
   1719c:	orr	r5, r1, r5
   171a0:	and	r1, r1, r3
   171a4:	and	r0, r0, r1
   171a8:	str	r5, [sp, #60]	; 0x3c
   171ac:	str	r1, [fp, #-68]	; 0xffffffbc
   171b0:	str	r0, [fp, #-60]	; 0xffffffc4
   171b4:	eor	r0, r3, #1
   171b8:	str	r0, [sp, #44]	; 0x2c
   171bc:	cmn	lr, #1
   171c0:	beq	171d0 <__assert_fail@plt+0x597c>
   171c4:	cmp	r7, lr
   171c8:	bne	171dc <__assert_fail@plt+0x5988>
   171cc:	b	17e54 <__assert_fail@plt+0x6600>
   171d0:	ldrb	r0, [ip, r7]
   171d4:	cmp	r0, #0
   171d8:	beq	17e5c <__assert_fail@plt+0x6608>
   171dc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   171e0:	mov	r8, #0
   171e4:	str	r4, [fp, #-52]	; 0xffffffcc
   171e8:	str	r2, [fp, #-48]	; 0xffffffd0
   171ec:	cmp	r0, #0
   171f0:	beq	17224 <__assert_fail@plt+0x59d0>
   171f4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   171f8:	add	r4, r7, r0
   171fc:	cmp	r0, #2
   17200:	bcc	1721c <__assert_fail@plt+0x59c8>
   17204:	cmn	lr, #1
   17208:	bne	1721c <__assert_fail@plt+0x59c8>
   1720c:	mov	r0, ip
   17210:	bl	116b0 <strlen@plt>
   17214:	ldr	ip, [fp, #-84]	; 0xffffffac
   17218:	mov	lr, r0
   1721c:	cmp	r4, lr
   17220:	bls	1723c <__assert_fail@plt+0x59e8>
   17224:	mov	r0, #0
   17228:	str	r0, [fp, #-56]	; 0xffffffc8
   1722c:	ldrb	r5, [ip, r7]
   17230:	cmp	r5, #126	; 0x7e
   17234:	bls	1728c <__assert_fail@plt+0x5a38>
   17238:	b	17694 <__assert_fail@plt+0x5e40>
   1723c:	ldr	r1, [sp, #92]	; 0x5c
   17240:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17244:	add	r0, ip, r7
   17248:	mov	r4, lr
   1724c:	bl	11530 <memcmp@plt>
   17250:	ldr	r2, [sp, #88]	; 0x58
   17254:	cmp	r0, #0
   17258:	mov	r1, r0
   1725c:	movwne	r1, #1
   17260:	orr	r1, r1, r2
   17264:	tst	r1, #1
   17268:	beq	17f68 <__assert_fail@plt+0x6714>
   1726c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17270:	clz	r0, r0
   17274:	mov	lr, r4
   17278:	lsr	r0, r0, #5
   1727c:	str	r0, [fp, #-56]	; 0xffffffc8
   17280:	ldrb	r5, [ip, r7]
   17284:	cmp	r5, #126	; 0x7e
   17288:	bhi	17694 <__assert_fail@plt+0x5e40>
   1728c:	add	r3, pc, #16
   17290:	mov	r4, #1
   17294:	mov	r2, #110	; 0x6e
   17298:	mov	r0, #97	; 0x61
   1729c:	mov	r1, #0
   172a0:	ldr	pc, [r3, r5, lsl #2]
   172a4:	andeq	r7, r1, r4, ror r5
   172a8:	muleq	r1, r4, r6
   172ac:	muleq	r1, r4, r6
   172b0:	muleq	r1, r4, r6
   172b4:	muleq	r1, r4, r6
   172b8:	muleq	r1, r4, r6
   172bc:	muleq	r1, r4, r6
   172c0:	andeq	r7, r1, r0, ror r7
   172c4:	andeq	r7, r1, r4, asr r5
   172c8:	andeq	r7, r1, ip, lsr r5
   172cc:	andeq	r7, r1, r0, ror #10
   172d0:	strdeq	r7, [r1], -r0
   172d4:	andeq	r7, r1, r4, lsr r5
   172d8:	andeq	r7, r1, ip, asr r5
   172dc:	muleq	r1, r4, r6
   172e0:	muleq	r1, r4, r6
   172e4:	muleq	r1, r4, r6
   172e8:	muleq	r1, r4, r6
   172ec:	muleq	r1, r4, r6
   172f0:	muleq	r1, r4, r6
   172f4:	muleq	r1, r4, r6
   172f8:	muleq	r1, r4, r6
   172fc:	muleq	r1, r4, r6
   17300:	muleq	r1, r4, r6
   17304:	muleq	r1, r4, r6
   17308:	muleq	r1, r4, r6
   1730c:	muleq	r1, r4, r6
   17310:	muleq	r1, r4, r6
   17314:	muleq	r1, r4, r6
   17318:	muleq	r1, r4, r6
   1731c:	muleq	r1, r4, r6
   17320:	muleq	r1, r4, r6
   17324:	andeq	r7, r1, ip, ror #13
   17328:	strdeq	r7, [r1], -r0
   1732c:	strdeq	r7, [r1], -r0
   17330:	andeq	r7, r1, r0, asr #9
   17334:	strdeq	r7, [r1], -r0
   17338:	andeq	r7, r1, r0, lsr #9
   1733c:	strdeq	r7, [r1], -r0
   17340:	strdeq	r7, [r1], -r8
   17344:	strdeq	r7, [r1], -r0
   17348:	strdeq	r7, [r1], -r0
   1734c:	strdeq	r7, [r1], -r0
   17350:	andeq	r7, r1, r0, lsr #9
   17354:	andeq	r7, r1, r0, lsr #9
   17358:	andeq	r7, r1, r0, lsr #9
   1735c:	andeq	r7, r1, r0, lsr #9
   17360:	andeq	r7, r1, r0, lsr #9
   17364:	andeq	r7, r1, r0, lsr #9
   17368:	andeq	r7, r1, r0, lsr #9
   1736c:	andeq	r7, r1, r0, lsr #9
   17370:	andeq	r7, r1, r0, lsr #9
   17374:	andeq	r7, r1, r0, lsr #9
   17378:	andeq	r7, r1, r0, lsr #9
   1737c:	andeq	r7, r1, r0, lsr #9
   17380:	andeq	r7, r1, r0, lsr #9
   17384:	andeq	r7, r1, r0, lsr #9
   17388:	andeq	r7, r1, r0, lsr #9
   1738c:	andeq	r7, r1, r0, lsr #9
   17390:	strdeq	r7, [r1], -r0
   17394:	strdeq	r7, [r1], -r0
   17398:	strdeq	r7, [r1], -r0
   1739c:	strdeq	r7, [r1], -r0
   173a0:			; <UNDEFINED> instruction: 0x000175b4
   173a4:	muleq	r1, r4, r6
   173a8:	andeq	r7, r1, r0, lsr #9
   173ac:	andeq	r7, r1, r0, lsr #9
   173b0:	andeq	r7, r1, r0, lsr #9
   173b4:	andeq	r7, r1, r0, lsr #9
   173b8:	andeq	r7, r1, r0, lsr #9
   173bc:	andeq	r7, r1, r0, lsr #9
   173c0:	andeq	r7, r1, r0, lsr #9
   173c4:	andeq	r7, r1, r0, lsr #9
   173c8:	andeq	r7, r1, r0, lsr #9
   173cc:	andeq	r7, r1, r0, lsr #9
   173d0:	andeq	r7, r1, r0, lsr #9
   173d4:	andeq	r7, r1, r0, lsr #9
   173d8:	andeq	r7, r1, r0, lsr #9
   173dc:	andeq	r7, r1, r0, lsr #9
   173e0:	andeq	r7, r1, r0, lsr #9
   173e4:	andeq	r7, r1, r0, lsr #9
   173e8:	andeq	r7, r1, r0, lsr #9
   173ec:	andeq	r7, r1, r0, lsr #9
   173f0:	andeq	r7, r1, r0, lsr #9
   173f4:	andeq	r7, r1, r0, lsr #9
   173f8:	andeq	r7, r1, r0, lsr #9
   173fc:	andeq	r7, r1, r0, lsr #9
   17400:	andeq	r7, r1, r0, lsr #9
   17404:	andeq	r7, r1, r0, lsr #9
   17408:	andeq	r7, r1, r0, lsr #9
   1740c:	andeq	r7, r1, r0, lsr #9
   17410:	strdeq	r7, [r1], -r0
   17414:	andeq	r7, r1, r0, lsl #10
   17418:	andeq	r7, r1, r0, lsr #9
   1741c:	strdeq	r7, [r1], -r0
   17420:	andeq	r7, r1, r0, lsr #9
   17424:	strdeq	r7, [r1], -r0
   17428:	andeq	r7, r1, r0, lsr #9
   1742c:	andeq	r7, r1, r0, lsr #9
   17430:	andeq	r7, r1, r0, lsr #9
   17434:	andeq	r7, r1, r0, lsr #9
   17438:	andeq	r7, r1, r0, lsr #9
   1743c:	andeq	r7, r1, r0, lsr #9
   17440:	andeq	r7, r1, r0, lsr #9
   17444:	andeq	r7, r1, r0, lsr #9
   17448:	andeq	r7, r1, r0, lsr #9
   1744c:	andeq	r7, r1, r0, lsr #9
   17450:	andeq	r7, r1, r0, lsr #9
   17454:	andeq	r7, r1, r0, lsr #9
   17458:	andeq	r7, r1, r0, lsr #9
   1745c:	andeq	r7, r1, r0, lsr #9
   17460:	andeq	r7, r1, r0, lsr #9
   17464:	andeq	r7, r1, r0, lsr #9
   17468:	andeq	r7, r1, r0, lsr #9
   1746c:	andeq	r7, r1, r0, lsr #9
   17470:	andeq	r7, r1, r0, lsr #9
   17474:	andeq	r7, r1, r0, lsr #9
   17478:	andeq	r7, r1, r0, lsr #9
   1747c:	andeq	r7, r1, r0, lsr #9
   17480:	andeq	r7, r1, r0, lsr #9
   17484:	andeq	r7, r1, r0, lsr #9
   17488:	andeq	r7, r1, r0, lsr #9
   1748c:	andeq	r7, r1, r0, lsr #9
   17490:	andeq	r7, r1, r0, ror #9
   17494:	strdeq	r7, [r1], -r0
   17498:	andeq	r7, r1, r0, ror #9
   1749c:	andeq	r7, r1, r0, asr #9
   174a0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   174a4:	cmp	r0, #0
   174a8:	beq	17784 <__assert_fail@plt+0x5f30>
   174ac:	ldr	r0, [fp, #16]
   174b0:	cmp	r0, #0
   174b4:	mov	r0, r5
   174b8:	bne	17794 <__assert_fail@plt+0x5f40>
   174bc:	b	177b4 <__assert_fail@plt+0x5f60>
   174c0:	mov	r4, #0
   174c4:	cmp	r7, #0
   174c8:	beq	176ec <__assert_fail@plt+0x5e98>
   174cc:	mov	r8, #0
   174d0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   174d4:	cmp	r0, #0
   174d8:	bne	174ac <__assert_fail@plt+0x5c58>
   174dc:	b	17784 <__assert_fail@plt+0x5f30>
   174e0:	mov	r4, #0
   174e4:	cmn	lr, #1
   174e8:	beq	176c4 <__assert_fail@plt+0x5e70>
   174ec:	cmp	r7, #0
   174f0:	bne	174cc <__assert_fail@plt+0x5c78>
   174f4:	cmp	lr, #1
   174f8:	beq	176ec <__assert_fail@plt+0x5e98>
   174fc:	b	174cc <__assert_fail@plt+0x5c78>
   17500:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17504:	cmp	r0, #2
   17508:	bne	1771c <__assert_fail@plt+0x5ec8>
   1750c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17510:	tst	r0, #1
   17514:	bne	17f7c <__assert_fail@plt+0x6728>
   17518:	mov	r8, #0
   1751c:	mov	r0, #92	; 0x5c
   17520:	mov	r4, #0
   17524:	cmp	r8, #0
   17528:	beq	1773c <__assert_fail@plt+0x5ee8>
   1752c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17530:	b	17830 <__assert_fail@plt+0x5fdc>
   17534:	mov	r0, #102	; 0x66
   17538:	b	17770 <__assert_fail@plt+0x5f1c>
   1753c:	mov	r2, #116	; 0x74
   17540:	ldr	r0, [sp, #60]	; 0x3c
   17544:	tst	r0, #1
   17548:	mov	r0, r2
   1754c:	bne	17770 <__assert_fail@plt+0x5f1c>
   17550:	b	17f7c <__assert_fail@plt+0x6728>
   17554:	mov	r0, #98	; 0x62
   17558:	b	17770 <__assert_fail@plt+0x5f1c>
   1755c:	mov	r2, #114	; 0x72
   17560:	ldr	r0, [sp, #60]	; 0x3c
   17564:	tst	r0, #1
   17568:	mov	r0, r2
   1756c:	bne	17770 <__assert_fail@plt+0x5f1c>
   17570:	b	17f7c <__assert_fail@plt+0x6728>
   17574:	ldr	r0, [sp, #80]	; 0x50
   17578:	tst	r0, #1
   1757c:	beq	17858 <__assert_fail@plt+0x6004>
   17580:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17584:	tst	r0, #1
   17588:	bne	180a4 <__assert_fail@plt+0x6850>
   1758c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17590:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17594:	cmp	r0, #2
   17598:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1759c:	movwne	r0, #1
   175a0:	orr	r0, r0, r2
   175a4:	tst	r0, #1
   175a8:	beq	17b50 <__assert_fail@plt+0x62fc>
   175ac:	mov	r0, r9
   175b0:	b	17b84 <__assert_fail@plt+0x6330>
   175b4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   175b8:	mov	r8, #0
   175bc:	mov	r5, #63	; 0x3f
   175c0:	cmp	r0, #5
   175c4:	beq	17a0c <__assert_fail@plt+0x61b8>
   175c8:	cmp	r0, #2
   175cc:	bne	17abc <__assert_fail@plt+0x6268>
   175d0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   175d4:	tst	r0, #1
   175d8:	bne	17f7c <__assert_fail@plt+0x6728>
   175dc:	mov	r4, #0
   175e0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   175e4:	cmp	r0, #0
   175e8:	bne	174ac <__assert_fail@plt+0x5c58>
   175ec:	b	17784 <__assert_fail@plt+0x5f30>
   175f0:	mov	r0, #118	; 0x76
   175f4:	b	17770 <__assert_fail@plt+0x5f1c>
   175f8:	mov	r0, #1
   175fc:	mov	r5, #39	; 0x27
   17600:	str	r0, [sp, #52]	; 0x34
   17604:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17608:	cmp	r0, #2
   1760c:	bne	17680 <__assert_fail@plt+0x5e2c>
   17610:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17614:	tst	r0, #1
   17618:	bne	17f7c <__assert_fail@plt+0x6728>
   1761c:	ldr	r2, [sp, #48]	; 0x30
   17620:	clz	r1, sl
   17624:	mov	r8, #0
   17628:	lsr	r1, r1, #5
   1762c:	cmp	r2, #0
   17630:	mov	r0, r2
   17634:	movwne	r0, #1
   17638:	orrs	r0, r0, r1
   1763c:	moveq	r2, sl
   17640:	moveq	sl, r0
   17644:	cmp	r9, sl
   17648:	str	r2, [sp, #48]	; 0x30
   1764c:	movcc	r0, #39	; 0x27
   17650:	strbcc	r0, [r6, r9]
   17654:	add	r0, r9, #1
   17658:	cmp	r0, sl
   1765c:	movcc	r1, #92	; 0x5c
   17660:	strbcc	r1, [r6, r0]
   17664:	add	r0, r9, #2
   17668:	add	r9, r9, #3
   1766c:	cmp	r0, sl
   17670:	movcc	r1, #39	; 0x27
   17674:	strbcc	r1, [r6, r0]
   17678:	mov	r0, #0
   1767c:	str	r0, [fp, #-48]	; 0xffffffd0
   17680:	mov	r4, #1
   17684:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17688:	cmp	r0, #0
   1768c:	bne	174ac <__assert_fail@plt+0x5c58>
   17690:	b	17784 <__assert_fail@plt+0x5f30>
   17694:	ldr	r0, [sp, #32]
   17698:	cmp	r0, #1
   1769c:	bne	17888 <__assert_fail@plt+0x6034>
   176a0:	str	lr, [sp, #84]	; 0x54
   176a4:	bl	11674 <__ctype_b_loc@plt>
   176a8:	ldr	r0, [r0]
   176ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   176b0:	mov	r1, #1
   176b4:	add	r0, r0, r5, lsl #1
   176b8:	ldrb	r0, [r0, #1]
   176bc:	ubfx	r4, r0, #6, #1
   176c0:	b	17c80 <__assert_fail@plt+0x642c>
   176c4:	cmp	r7, #0
   176c8:	ldrbeq	r0, [ip, #1]
   176cc:	cmpeq	r0, #0
   176d0:	beq	176ec <__assert_fail@plt+0x5e98>
   176d4:	mvn	lr, #0
   176d8:	mov	r8, #0
   176dc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   176e0:	cmp	r0, #0
   176e4:	bne	174ac <__assert_fail@plt+0x5c58>
   176e8:	b	17784 <__assert_fail@plt+0x5f30>
   176ec:	mov	r1, #1
   176f0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   176f4:	cmp	r0, #2
   176f8:	bne	17708 <__assert_fail@plt+0x5eb4>
   176fc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17700:	tst	r0, #1
   17704:	bne	17f7c <__assert_fail@plt+0x6728>
   17708:	mov	r4, r1
   1770c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17710:	cmp	r0, #0
   17714:	bne	174ac <__assert_fail@plt+0x5c58>
   17718:	b	17784 <__assert_fail@plt+0x5f30>
   1771c:	ldr	r1, [sp, #40]	; 0x28
   17720:	mov	r8, #0
   17724:	mov	r0, #92	; 0x5c
   17728:	cmp	r1, #0
   1772c:	beq	17770 <__assert_fail@plt+0x5f1c>
   17730:	mov	r4, #0
   17734:	cmp	r8, #0
   17738:	bne	1752c <__assert_fail@plt+0x5cd8>
   1773c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17740:	tst	r2, #1
   17744:	beq	17830 <__assert_fail@plt+0x5fdc>
   17748:	cmp	r9, sl
   1774c:	movcc	r1, #39	; 0x27
   17750:	strbcc	r1, [r6, r9]
   17754:	add	r1, r9, #1
   17758:	add	r9, r9, #2
   1775c:	cmp	r1, sl
   17760:	movcc	r2, #39	; 0x27
   17764:	strbcc	r2, [r6, r1]
   17768:	mov	r2, #0
   1776c:	b	17830 <__assert_fail@plt+0x5fdc>
   17770:	ldr	r1, [sp, #80]	; 0x50
   17774:	mov	r4, #0
   17778:	mov	r8, #0
   1777c:	tst	r1, #1
   17780:	bne	177c0 <__assert_fail@plt+0x5f6c>
   17784:	ldr	r0, [fp, #-88]	; 0xffffffa8
   17788:	cmp	r0, #0
   1778c:	mov	r0, r5
   17790:	beq	177b4 <__assert_fail@plt+0x5f60>
   17794:	ldr	r1, [fp, #16]
   17798:	ubfx	r0, r5, #5, #3
   1779c:	mov	r2, #1
   177a0:	ldr	r0, [r1, r0, lsl #2]
   177a4:	and	r1, r5, #31
   177a8:	tst	r0, r2, lsl r1
   177ac:	mov	r0, r5
   177b0:	bne	177c0 <__assert_fail@plt+0x5f6c>
   177b4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   177b8:	cmp	r1, #0
   177bc:	beq	17c18 <__assert_fail@plt+0x63c4>
   177c0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   177c4:	tst	r1, #1
   177c8:	bne	17f5c <__assert_fail@plt+0x6708>
   177cc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   177d0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   177d4:	cmp	r1, #2
   177d8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   177dc:	movwne	r1, #1
   177e0:	orr	r1, r1, r2
   177e4:	tst	r1, #1
   177e8:	bne	17820 <__assert_fail@plt+0x5fcc>
   177ec:	cmp	r9, sl
   177f0:	movcc	r1, #39	; 0x27
   177f4:	strbcc	r1, [r6, r9]
   177f8:	add	r1, r9, #1
   177fc:	cmp	r1, sl
   17800:	movcc	r2, #36	; 0x24
   17804:	strbcc	r2, [r6, r1]
   17808:	add	r1, r9, #2
   1780c:	add	r9, r9, #3
   17810:	cmp	r1, sl
   17814:	movcc	r2, #39	; 0x27
   17818:	strbcc	r2, [r6, r1]
   1781c:	mov	r2, #1
   17820:	cmp	r9, sl
   17824:	movcc	r1, #92	; 0x5c
   17828:	strbcc	r1, [r6, r9]
   1782c:	add	r9, r9, #1
   17830:	cmp	r9, sl
   17834:	add	r7, r7, #1
   17838:	strbcc	r0, [r6, r9]
   1783c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17840:	add	r9, r9, #1
   17844:	and	r0, r0, r4
   17848:	mov	r4, r0
   1784c:	cmn	lr, #1
   17850:	bne	171c4 <__assert_fail@plt+0x5970>
   17854:	b	171d0 <__assert_fail@plt+0x597c>
   17858:	ldr	r0, [sp, #28]
   1785c:	mov	r4, #0
   17860:	mov	r8, #0
   17864:	mov	r5, #0
   17868:	cmp	r0, #0
   1786c:	beq	17784 <__assert_fail@plt+0x5f30>
   17870:	ldr	r4, [fp, #-52]	; 0xffffffcc
   17874:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17878:	add	r7, r7, #1
   1787c:	cmn	lr, #1
   17880:	bne	171c4 <__assert_fail@plt+0x5970>
   17884:	b	171d0 <__assert_fail@plt+0x597c>
   17888:	mov	r0, #0
   1788c:	cmn	lr, #1
   17890:	str	r0, [fp, #-36]	; 0xffffffdc
   17894:	str	r0, [fp, #-40]	; 0xffffffd8
   17898:	bne	178ac <__assert_fail@plt+0x6058>
   1789c:	mov	r0, ip
   178a0:	bl	116b0 <strlen@plt>
   178a4:	ldr	ip, [fp, #-84]	; 0xffffffac
   178a8:	mov	lr, r0
   178ac:	ldr	r0, [sp, #36]	; 0x24
   178b0:	str	sl, [sp, #56]	; 0x38
   178b4:	str	lr, [sp, #84]	; 0x54
   178b8:	cmp	r0, #0
   178bc:	beq	17ad4 <__assert_fail@plt+0x6280>
   178c0:	add	r0, ip, r7
   178c4:	mov	r4, #1
   178c8:	mov	r6, #0
   178cc:	sub	sl, fp, #40	; 0x28
   178d0:	str	r0, [sp, #20]
   178d4:	str	r6, [sp, #64]	; 0x40
   178d8:	add	r6, r6, r7
   178dc:	sub	r0, fp, #44	; 0x2c
   178e0:	mov	r3, sl
   178e4:	add	r1, ip, r6
   178e8:	sub	r2, lr, r6
   178ec:	bl	1aa7c <__assert_fail@plt+0x9228>
   178f0:	cmn	r0, #2
   178f4:	beq	17c30 <__assert_fail@plt+0x63dc>
   178f8:	ldr	sl, [sp, #56]	; 0x38
   178fc:	cmn	r0, #1
   17900:	beq	17c24 <__assert_fail@plt+0x63d0>
   17904:	cmp	r0, #0
   17908:	beq	17c28 <__assert_fail@plt+0x63d4>
   1790c:	cmp	r0, #2
   17910:	bcc	179d0 <__assert_fail@plt+0x617c>
   17914:	ldr	r1, [sp, #64]	; 0x40
   17918:	ldr	r2, [sp, #20]
   1791c:	add	r1, r2, r1
   17920:	mov	r2, #1
   17924:	ldrb	r3, [r1, r2]
   17928:	sub	r3, r3, #91	; 0x5b
   1792c:	cmp	r3, #33	; 0x21
   17930:	bhi	179c4 <__assert_fail@plt+0x6170>
   17934:	add	r6, pc, #0
   17938:	ldr	pc, [r6, r3, lsl #2]
   1793c:	andeq	r7, r1, r8, lsl #31
   17940:	andeq	r7, r1, r8, lsl #31
   17944:	andeq	r7, r1, r4, asr #19
   17948:	andeq	r7, r1, r8, lsl #31
   1794c:	andeq	r7, r1, r4, asr #19
   17950:	andeq	r7, r1, r8, lsl #31
   17954:	andeq	r7, r1, r4, asr #19
   17958:	andeq	r7, r1, r4, asr #19
   1795c:	andeq	r7, r1, r4, asr #19
   17960:	andeq	r7, r1, r4, asr #19
   17964:	andeq	r7, r1, r4, asr #19
   17968:	andeq	r7, r1, r4, asr #19
   1796c:	andeq	r7, r1, r4, asr #19
   17970:	andeq	r7, r1, r4, asr #19
   17974:	andeq	r7, r1, r4, asr #19
   17978:	andeq	r7, r1, r4, asr #19
   1797c:	andeq	r7, r1, r4, asr #19
   17980:	andeq	r7, r1, r4, asr #19
   17984:	andeq	r7, r1, r4, asr #19
   17988:	andeq	r7, r1, r4, asr #19
   1798c:	andeq	r7, r1, r4, asr #19
   17990:	andeq	r7, r1, r4, asr #19
   17994:	andeq	r7, r1, r4, asr #19
   17998:	andeq	r7, r1, r4, asr #19
   1799c:	andeq	r7, r1, r4, asr #19
   179a0:	andeq	r7, r1, r4, asr #19
   179a4:	andeq	r7, r1, r4, asr #19
   179a8:	andeq	r7, r1, r4, asr #19
   179ac:	andeq	r7, r1, r4, asr #19
   179b0:	andeq	r7, r1, r4, asr #19
   179b4:	andeq	r7, r1, r4, asr #19
   179b8:	andeq	r7, r1, r4, asr #19
   179bc:	andeq	r7, r1, r4, asr #19
   179c0:	andeq	r7, r1, r8, lsl #31
   179c4:	add	r2, r2, #1
   179c8:	cmp	r2, r0
   179cc:	bcc	17924 <__assert_fail@plt+0x60d0>
   179d0:	ldr	r6, [sp, #64]	; 0x40
   179d4:	add	r6, r0, r6
   179d8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   179dc:	bl	1159c <iswprint@plt>
   179e0:	cmp	r0, #0
   179e4:	sub	sl, fp, #40	; 0x28
   179e8:	movwne	r0, #1
   179ec:	and	r4, r4, r0
   179f0:	mov	r0, sl
   179f4:	bl	11518 <mbsinit@plt>
   179f8:	ldr	ip, [fp, #-84]	; 0xffffffac
   179fc:	ldr	lr, [sp, #84]	; 0x54
   17a00:	cmp	r0, #0
   17a04:	beq	178d4 <__assert_fail@plt+0x6080>
   17a08:	b	17c74 <__assert_fail@plt+0x6420>
   17a0c:	ldr	r0, [sp, #24]
   17a10:	cmp	r0, #0
   17a14:	beq	17abc <__assert_fail@plt+0x6268>
   17a18:	add	r0, r7, #2
   17a1c:	cmp	r0, lr
   17a20:	bcs	17abc <__assert_fail@plt+0x6268>
   17a24:	add	r1, ip, r7
   17a28:	ldrb	r1, [r1, #1]
   17a2c:	cmp	r1, #63	; 0x3f
   17a30:	bne	17abc <__assert_fail@plt+0x6268>
   17a34:	ldrb	r5, [ip, r0]
   17a38:	sub	r1, r5, #33	; 0x21
   17a3c:	cmp	r1, #29
   17a40:	bhi	17abc <__assert_fail@plt+0x6268>
   17a44:	movw	r3, #20929	; 0x51c1
   17a48:	mov	r2, #1
   17a4c:	movt	r3, #14336	; 0x3800
   17a50:	tst	r3, r2, lsl r1
   17a54:	beq	17abc <__assert_fail@plt+0x6268>
   17a58:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17a5c:	tst	r1, #1
   17a60:	bne	180ac <__assert_fail@plt+0x6858>
   17a64:	cmp	r9, sl
   17a68:	mov	r7, r0
   17a6c:	mov	r4, #0
   17a70:	movcc	r1, #63	; 0x3f
   17a74:	strbcc	r1, [r6, r9]
   17a78:	add	r1, r9, #1
   17a7c:	cmp	r1, sl
   17a80:	movcc	r2, #34	; 0x22
   17a84:	strbcc	r2, [r6, r1]
   17a88:	add	r1, r9, #2
   17a8c:	cmp	r1, sl
   17a90:	movcc	r2, #34	; 0x22
   17a94:	strbcc	r2, [r6, r1]
   17a98:	add	r1, r9, #3
   17a9c:	add	r9, r9, #4
   17aa0:	cmp	r1, sl
   17aa4:	movcc	r2, #63	; 0x3f
   17aa8:	strbcc	r2, [r6, r1]
   17aac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17ab0:	cmp	r0, #0
   17ab4:	bne	174ac <__assert_fail@plt+0x5c58>
   17ab8:	b	17784 <__assert_fail@plt+0x5f30>
   17abc:	mov	r5, #63	; 0x3f
   17ac0:	mov	r4, #0
   17ac4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17ac8:	cmp	r0, #0
   17acc:	bne	174ac <__assert_fail@plt+0x5c58>
   17ad0:	b	17784 <__assert_fail@plt+0x5f30>
   17ad4:	mov	r4, #1
   17ad8:	mov	r6, #0
   17adc:	sub	sl, fp, #40	; 0x28
   17ae0:	str	r6, [sp, #64]	; 0x40
   17ae4:	add	r6, r6, r7
   17ae8:	sub	r0, fp, #44	; 0x2c
   17aec:	mov	r3, sl
   17af0:	add	r1, ip, r6
   17af4:	sub	r2, lr, r6
   17af8:	bl	1aa7c <__assert_fail@plt+0x9228>
   17afc:	cmn	r0, #2
   17b00:	beq	17c30 <__assert_fail@plt+0x63dc>
   17b04:	cmn	r0, #1
   17b08:	beq	17c24 <__assert_fail@plt+0x63d0>
   17b0c:	ldr	r6, [sp, #64]	; 0x40
   17b10:	cmp	r0, #0
   17b14:	beq	17c70 <__assert_fail@plt+0x641c>
   17b18:	add	r6, r0, r6
   17b1c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17b20:	bl	1159c <iswprint@plt>
   17b24:	cmp	r0, #0
   17b28:	sub	sl, fp, #40	; 0x28
   17b2c:	movwne	r0, #1
   17b30:	and	r4, r4, r0
   17b34:	mov	r0, sl
   17b38:	bl	11518 <mbsinit@plt>
   17b3c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17b40:	ldr	lr, [sp, #84]	; 0x54
   17b44:	cmp	r0, #0
   17b48:	beq	17ae0 <__assert_fail@plt+0x628c>
   17b4c:	b	17c74 <__assert_fail@plt+0x6420>
   17b50:	cmp	r9, sl
   17b54:	mov	r2, #1
   17b58:	movcc	r0, #39	; 0x27
   17b5c:	strbcc	r0, [r6, r9]
   17b60:	add	r0, r9, #1
   17b64:	cmp	r0, sl
   17b68:	movcc	r1, #36	; 0x24
   17b6c:	strbcc	r1, [r6, r0]
   17b70:	add	r0, r9, #2
   17b74:	cmp	r0, sl
   17b78:	movcc	r1, #39	; 0x27
   17b7c:	strbcc	r1, [r6, r0]
   17b80:	add	r0, r9, #3
   17b84:	cmp	r0, sl
   17b88:	add	r9, r0, #1
   17b8c:	str	r2, [fp, #-48]	; 0xffffffd0
   17b90:	movcc	r1, #92	; 0x5c
   17b94:	strbcc	r1, [r6, r0]
   17b98:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17b9c:	cmp	r1, #2
   17ba0:	beq	17c00 <__assert_fail@plt+0x63ac>
   17ba4:	add	r1, r7, #1
   17ba8:	mov	r4, #0
   17bac:	mov	r8, #1
   17bb0:	mov	r5, #48	; 0x30
   17bb4:	cmp	r1, lr
   17bb8:	bcs	174a0 <__assert_fail@plt+0x5c4c>
   17bbc:	ldrb	r1, [ip, r1]
   17bc0:	sub	r1, r1, #48	; 0x30
   17bc4:	uxtb	r1, r1
   17bc8:	cmp	r1, #9
   17bcc:	bhi	174a0 <__assert_fail@plt+0x5c4c>
   17bd0:	cmp	r9, sl
   17bd4:	movcc	r1, #48	; 0x30
   17bd8:	strbcc	r1, [r6, r9]
   17bdc:	add	r1, r0, #2
   17be0:	add	r9, r0, #3
   17be4:	cmp	r1, sl
   17be8:	movcc	r2, #48	; 0x30
   17bec:	strbcc	r2, [r6, r1]
   17bf0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17bf4:	cmp	r0, #0
   17bf8:	bne	174ac <__assert_fail@plt+0x5c58>
   17bfc:	b	17784 <__assert_fail@plt+0x5f30>
   17c00:	mov	r0, #48	; 0x30
   17c04:	mov	r8, #1
   17c08:	mov	r4, #0
   17c0c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   17c10:	cmp	r1, #0
   17c14:	bne	177c0 <__assert_fail@plt+0x5f6c>
   17c18:	cmp	r8, #0
   17c1c:	beq	1773c <__assert_fail@plt+0x5ee8>
   17c20:	b	1752c <__assert_fail@plt+0x5cd8>
   17c24:	mov	r4, #0
   17c28:	ldr	ip, [fp, #-84]	; 0xffffffac
   17c2c:	b	17c68 <__assert_fail@plt+0x6414>
   17c30:	ldr	r1, [sp, #84]	; 0x54
   17c34:	ldr	ip, [fp, #-84]	; 0xffffffac
   17c38:	mov	r4, #0
   17c3c:	cmp	r6, r1
   17c40:	bcs	17c68 <__assert_fail@plt+0x6414>
   17c44:	ldrb	r0, [ip, r6]
   17c48:	cmp	r0, #0
   17c4c:	beq	17c68 <__assert_fail@plt+0x6414>
   17c50:	ldr	r0, [sp, #64]	; 0x40
   17c54:	add	r0, r0, #1
   17c58:	add	r6, r0, r7
   17c5c:	str	r0, [sp, #64]	; 0x40
   17c60:	cmp	r6, r1
   17c64:	bcc	17c44 <__assert_fail@plt+0x63f0>
   17c68:	ldr	r6, [sp, #64]	; 0x40
   17c6c:	b	17c74 <__assert_fail@plt+0x6420>
   17c70:	ldr	ip, [fp, #-84]	; 0xffffffac
   17c74:	mov	r1, r6
   17c78:	ldr	r6, [sp, #76]	; 0x4c
   17c7c:	ldr	sl, [sp, #56]	; 0x38
   17c80:	ldr	r0, [sp, #44]	; 0x2c
   17c84:	cmp	r1, #1
   17c88:	orr	r2, r4, r0
   17c8c:	mov	r0, r1
   17c90:	bhi	17cb0 <__assert_fail@plt+0x645c>
   17c94:	tst	r2, #1
   17c98:	beq	17cb0 <__assert_fail@plt+0x645c>
   17c9c:	ldr	lr, [sp, #84]	; 0x54
   17ca0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17ca4:	cmp	r0, #0
   17ca8:	bne	174ac <__assert_fail@plt+0x5c58>
   17cac:	b	17784 <__assert_fail@plt+0x5f30>
   17cb0:	str	r2, [sp, #64]	; 0x40
   17cb4:	add	r0, r0, r7
   17cb8:	add	r1, r7, #1
   17cbc:	ldr	lr, [sp, #84]	; 0x54
   17cc0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17cc4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17cc8:	mov	r3, #0
   17ccc:	str	r0, [sp, #56]	; 0x38
   17cd0:	ldr	r0, [sp, #64]	; 0x40
   17cd4:	tst	r0, #1
   17cd8:	bne	17dc0 <__assert_fail@plt+0x656c>
   17cdc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17ce0:	tst	r0, #1
   17ce4:	bne	17f60 <__assert_fail@plt+0x670c>
   17ce8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17cec:	cmp	r7, #2
   17cf0:	movwne	r3, #1
   17cf4:	orr	r3, r3, r2
   17cf8:	tst	r3, #1
   17cfc:	bne	17d34 <__assert_fail@plt+0x64e0>
   17d00:	cmp	r9, sl
   17d04:	add	r3, r9, #1
   17d08:	movcc	r2, #39	; 0x27
   17d0c:	strbcc	r2, [r6, r9]
   17d10:	cmp	r3, sl
   17d14:	movcc	r2, #36	; 0x24
   17d18:	strbcc	r2, [r6, r3]
   17d1c:	add	r3, r9, #2
   17d20:	add	r9, r9, #3
   17d24:	cmp	r3, sl
   17d28:	movcc	r2, #39	; 0x27
   17d2c:	strbcc	r2, [r6, r3]
   17d30:	mov	r2, #1
   17d34:	cmp	r9, sl
   17d38:	mov	r0, r2
   17d3c:	movcc	r3, #92	; 0x5c
   17d40:	strbcc	r3, [r6, r9]
   17d44:	add	r3, r9, #1
   17d48:	cmp	r3, sl
   17d4c:	andcc	r7, r5, #192	; 0xc0
   17d50:	movcc	r2, #48	; 0x30
   17d54:	orrcc	r7, r2, r7, lsr #6
   17d58:	strbcc	r7, [r6, r3]
   17d5c:	add	r3, r9, #2
   17d60:	add	r9, r9, #3
   17d64:	cmp	r3, sl
   17d68:	lsrcc	r7, r5, #3
   17d6c:	movcc	r2, #6
   17d70:	bficc	r7, r2, #3, #29
   17d74:	mov	r2, #6
   17d78:	strbcc	r7, [r6, r3]
   17d7c:	bfi	r5, r2, #3, #29
   17d80:	mov	r3, #1
   17d84:	mov	r2, r0
   17d88:	ldr	r0, [sp, #56]	; 0x38
   17d8c:	and	r8, r3, #1
   17d90:	cmp	r0, r1
   17d94:	bhi	17df4 <__assert_fail@plt+0x65a0>
   17d98:	b	17e34 <__assert_fail@plt+0x65e0>
   17d9c:	cmp	r9, sl
   17da0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17da4:	strbcc	r5, [r6, r9]
   17da8:	add	r9, r9, #1
   17dac:	ldrb	r5, [ip, r1]
   17db0:	add	r1, r1, #1
   17db4:	ldr	r0, [sp, #64]	; 0x40
   17db8:	tst	r0, #1
   17dbc:	beq	17cdc <__assert_fail@plt+0x6488>
   17dc0:	ldr	r7, [fp, #-56]	; 0xffffffc8
   17dc4:	tst	r7, #1
   17dc8:	beq	17ddc <__assert_fail@plt+0x6588>
   17dcc:	cmp	r9, sl
   17dd0:	movcc	r7, #92	; 0x5c
   17dd4:	strbcc	r7, [r6, r9]
   17dd8:	add	r9, r9, #1
   17ddc:	mov	r7, #0
   17de0:	str	r7, [fp, #-56]	; 0xffffffc8
   17de4:	ldr	r0, [sp, #56]	; 0x38
   17de8:	and	r8, r3, #1
   17dec:	cmp	r0, r1
   17df0:	bls	17e34 <__assert_fail@plt+0x65e0>
   17df4:	cmp	r8, #0
   17df8:	mvn	r7, r2
   17dfc:	movwne	r8, #1
   17e00:	orr	r7, r7, r8
   17e04:	tst	r7, #1
   17e08:	bne	17d9c <__assert_fail@plt+0x6548>
   17e0c:	cmp	r9, sl
   17e10:	movcc	r7, #39	; 0x27
   17e14:	strbcc	r7, [r6, r9]
   17e18:	add	r7, r9, #1
   17e1c:	add	r9, r9, #2
   17e20:	cmp	r7, sl
   17e24:	movcc	r2, #39	; 0x27
   17e28:	strbcc	r2, [r6, r7]
   17e2c:	mov	r2, #0
   17e30:	b	17d9c <__assert_fail@plt+0x6548>
   17e34:	cmp	r8, #0
   17e38:	sub	r7, r1, #1
   17e3c:	mov	r0, r5
   17e40:	str	r2, [fp, #-48]	; 0xffffffd0
   17e44:	movwne	r8, #1
   17e48:	cmp	r8, #0
   17e4c:	beq	1773c <__assert_fail@plt+0x5ee8>
   17e50:	b	1752c <__assert_fail@plt+0x5cd8>
   17e54:	mov	lr, r7
   17e58:	b	17e60 <__assert_fail@plt+0x660c>
   17e5c:	mvn	lr, #0
   17e60:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17e64:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17e68:	eor	r0, r7, #2
   17e6c:	orr	r0, r0, r9
   17e70:	clz	r0, r0
   17e74:	lsr	r0, r0, #5
   17e78:	tst	r1, r0
   17e7c:	bne	17f7c <__assert_fail@plt+0x6728>
   17e80:	mov	r0, r1
   17e84:	ldr	r1, [fp, #-80]	; 0xffffffb0
   17e88:	cmp	r7, #2
   17e8c:	movwne	r1, #1
   17e90:	orr	r0, r0, r1
   17e94:	tst	r0, #1
   17e98:	ldreq	r0, [sp, #52]	; 0x34
   17e9c:	streq	lr, [sp, #84]	; 0x54
   17ea0:	eoreq	r0, r0, #1
   17ea4:	tsteq	r0, #1
   17ea8:	bne	18040 <__assert_fail@plt+0x67ec>
   17eac:	tst	r4, #1
   17eb0:	bne	17ffc <__assert_fail@plt+0x67a8>
   17eb4:	ldr	r6, [sp, #48]	; 0x30
   17eb8:	mov	r8, #0
   17ebc:	cmp	r6, #0
   17ec0:	beq	18038 <__assert_fail@plt+0x67e4>
   17ec4:	ldr	r0, [sp, #80]	; 0x50
   17ec8:	mov	r1, #0
   17ecc:	cmp	sl, #0
   17ed0:	mov	r4, #0
   17ed4:	str	r1, [fp, #-72]	; 0xffffffb8
   17ed8:	beq	16dcc <__assert_fail@plt+0x5578>
   17edc:	b	18040 <__assert_fail@plt+0x67ec>
   17ee0:	ldrb	r1, [r0, #3]
   17ee4:	cmp	r1, #56	; 0x38
   17ee8:	ldrbeq	r1, [r0, #4]
   17eec:	cmpeq	r1, #48	; 0x30
   17ef0:	bne	16fc4 <__assert_fail@plt+0x5770>
   17ef4:	ldrb	r1, [r0, #5]
   17ef8:	cmp	r1, #51	; 0x33
   17efc:	ldrbeq	r1, [r0, #6]
   17f00:	cmpeq	r1, #48	; 0x30
   17f04:	bne	16fc4 <__assert_fail@plt+0x5770>
   17f08:	ldrb	r0, [r0, #7]
   17f0c:	cmp	r0, #0
   17f10:	movw	r0, #49728	; 0xc240
   17f14:	movt	r0, #1
   17f18:	str	r0, [sp, #68]	; 0x44
   17f1c:	bne	16fc4 <__assert_fail@plt+0x5770>
   17f20:	b	16fe0 <__assert_fail@plt+0x578c>
   17f24:	ldrb	r1, [r0, #4]
   17f28:	cmp	r1, #48	; 0x30
   17f2c:	ldrbeq	r1, [r0, #5]
   17f30:	cmpeq	r1, #51	; 0x33
   17f34:	bne	170a8 <__assert_fail@plt+0x5854>
   17f38:	ldrb	r1, [r0, #6]
   17f3c:	cmp	r1, #48	; 0x30
   17f40:	ldrbeq	r0, [r0, #7]
   17f44:	cmpeq	r0, #0
   17f48:	bne	170a8 <__assert_fail@plt+0x5854>
   17f4c:	movw	r0, #49732	; 0xc244
   17f50:	movt	r0, #1
   17f54:	str	r0, [sp, #72]	; 0x48
   17f58:	b	170c8 <__assert_fail@plt+0x5874>
   17f5c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17f60:	ldr	r2, [sp, #80]	; 0x50
   17f64:	b	17f9c <__assert_fail@plt+0x6748>
   17f68:	ldr	ip, [fp, #-84]	; 0xffffffac
   17f6c:	mov	r2, #1
   17f70:	mov	lr, r4
   17f74:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17f78:	b	17f9c <__assert_fail@plt+0x6748>
   17f7c:	ldr	r2, [sp, #80]	; 0x50
   17f80:	mov	r7, #2
   17f84:	b	17f9c <__assert_fail@plt+0x6748>
   17f88:	ldr	r6, [sp, #76]	; 0x4c
   17f8c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17f90:	ldr	lr, [sp, #84]	; 0x54
   17f94:	ldr	r2, [sp, #80]	; 0x50
   17f98:	mov	r7, #2
   17f9c:	mov	r0, #0
   17fa0:	ldr	r1, [fp, #12]
   17fa4:	tst	r2, #1
   17fa8:	mov	r2, r7
   17fac:	mov	r3, lr
   17fb0:	str	r0, [sp, #8]
   17fb4:	ldr	r0, [sp, #68]	; 0x44
   17fb8:	movwne	r2, #4
   17fbc:	cmp	r7, #2
   17fc0:	movne	r2, r7
   17fc4:	str	r2, [sp]
   17fc8:	mov	r2, ip
   17fcc:	bic	r1, r1, #2
   17fd0:	str	r0, [sp, #12]
   17fd4:	ldr	r0, [sp, #72]	; 0x48
   17fd8:	str	r1, [sp, #4]
   17fdc:	mov	r1, sl
   17fe0:	str	r0, [sp, #16]
   17fe4:	mov	r0, r6
   17fe8:	bl	16d50 <__assert_fail@plt+0x54fc>
   17fec:	mov	r9, r0
   17ff0:	mov	r0, r9
   17ff4:	sub	sp, fp, #28
   17ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ffc:	mov	r0, #5
   18000:	ldr	r1, [sp, #48]	; 0x30
   18004:	ldr	r2, [fp, #-84]	; 0xffffffac
   18008:	ldr	r3, [sp, #84]	; 0x54
   1800c:	str	r0, [sp]
   18010:	ldr	r0, [fp, #12]
   18014:	str	r0, [sp, #4]
   18018:	ldr	r0, [fp, #16]
   1801c:	str	r0, [sp, #8]
   18020:	ldr	r0, [sp, #68]	; 0x44
   18024:	str	r0, [sp, #12]
   18028:	ldr	r0, [sp, #72]	; 0x48
   1802c:	str	r0, [sp, #16]
   18030:	ldr	r0, [sp, #76]	; 0x4c
   18034:	b	17fe8 <__assert_fail@plt+0x6794>
   18038:	mov	r0, #0
   1803c:	str	r0, [fp, #-72]	; 0xffffffb8
   18040:	ldr	r1, [sp, #92]	; 0x5c
   18044:	cmp	r1, #0
   18048:	beq	18088 <__assert_fail@plt+0x6834>
   1804c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18050:	ldr	r2, [sp, #76]	; 0x4c
   18054:	tst	r0, #1
   18058:	bne	1808c <__assert_fail@plt+0x6838>
   1805c:	ldrb	r0, [r1]
   18060:	cmp	r0, #0
   18064:	beq	1808c <__assert_fail@plt+0x6838>
   18068:	add	r1, r1, #1
   1806c:	cmp	r9, sl
   18070:	strbcc	r0, [r2, r9]
   18074:	add	r9, r9, #1
   18078:	ldrb	r0, [r1], #1
   1807c:	cmp	r0, #0
   18080:	bne	1806c <__assert_fail@plt+0x6818>
   18084:	b	1808c <__assert_fail@plt+0x6838>
   18088:	ldr	r2, [sp, #76]	; 0x4c
   1808c:	cmp	r9, sl
   18090:	movcc	r0, #0
   18094:	strbcc	r0, [r2, r9]
   18098:	mov	r0, r9
   1809c:	sub	sp, fp, #28
   180a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   180a4:	mov	r2, #1
   180a8:	b	17f74 <__assert_fail@plt+0x6720>
   180ac:	ldr	r2, [sp, #80]	; 0x50
   180b0:	mov	r7, #5
   180b4:	b	17f9c <__assert_fail@plt+0x6748>
   180b8:	bl	11818 <abort@plt>
   180bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180c0:	add	fp, sp, #28
   180c4:	sub	sp, sp, #28
   180c8:	movw	r5, #53768	; 0xd208
   180cc:	cmp	r2, #0
   180d0:	mov	r4, r1
   180d4:	mov	r7, r0
   180d8:	str	r0, [sp, #20]
   180dc:	movt	r5, #2
   180e0:	movne	r5, r2
   180e4:	bl	116d4 <__errno_location@plt>
   180e8:	mov	sl, r0
   180ec:	ldm	r5, {r0, r1}
   180f0:	ldr	r2, [r5, #40]	; 0x28
   180f4:	ldr	r3, [r5, #44]	; 0x2c
   180f8:	add	r9, r5, #8
   180fc:	ldr	r6, [sl]
   18100:	orr	r8, r1, #1
   18104:	mov	r1, #0
   18108:	str	r6, [sp, #24]
   1810c:	stm	sp, {r0, r8, r9}
   18110:	str	r2, [sp, #12]
   18114:	str	r3, [sp, #16]
   18118:	mov	r0, #0
   1811c:	mov	r2, r7
   18120:	mov	r3, r4
   18124:	mov	r6, r4
   18128:	bl	16d50 <__assert_fail@plt+0x54fc>
   1812c:	add	r7, r0, #1
   18130:	mov	r0, r7
   18134:	bl	19cd0 <__assert_fail@plt+0x847c>
   18138:	mov	r4, r0
   1813c:	ldr	r0, [r5]
   18140:	ldr	r2, [r5, #44]	; 0x2c
   18144:	ldr	r1, [r5, #40]	; 0x28
   18148:	mov	r3, r6
   1814c:	stm	sp, {r0, r8, r9}
   18150:	str	r2, [sp, #16]
   18154:	str	r1, [sp, #12]
   18158:	mov	r0, r4
   1815c:	mov	r1, r7
   18160:	ldr	r2, [sp, #20]
   18164:	bl	16d50 <__assert_fail@plt+0x54fc>
   18168:	ldr	r0, [sp, #24]
   1816c:	str	r0, [sl]
   18170:	mov	r0, r4
   18174:	sub	sp, fp, #28
   18178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1817c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18180:	add	fp, sp, #28
   18184:	sub	sp, sp, #36	; 0x24
   18188:	movw	r8, #53768	; 0xd208
   1818c:	cmp	r3, #0
   18190:	mov	r4, r2
   18194:	str	r2, [sp, #24]
   18198:	mov	r5, r1
   1819c:	mov	r6, r0
   181a0:	str	r0, [sp, #20]
   181a4:	movt	r8, #2
   181a8:	movne	r8, r3
   181ac:	bl	116d4 <__errno_location@plt>
   181b0:	str	r0, [sp, #28]
   181b4:	cmp	r4, #0
   181b8:	add	sl, r8, #8
   181bc:	ldm	r8, {r3, r9}
   181c0:	ldr	r7, [r0]
   181c4:	ldr	r1, [r8, #40]	; 0x28
   181c8:	ldr	r2, [r8, #44]	; 0x2c
   181cc:	mov	r0, #0
   181d0:	orreq	r9, r9, #1
   181d4:	str	r7, [sp, #32]
   181d8:	mov	r7, r5
   181dc:	stm	sp, {r3, r9, sl}
   181e0:	str	r1, [sp, #12]
   181e4:	str	r2, [sp, #16]
   181e8:	mov	r1, #0
   181ec:	mov	r2, r6
   181f0:	mov	r3, r5
   181f4:	bl	16d50 <__assert_fail@plt+0x54fc>
   181f8:	add	r4, r0, #1
   181fc:	mov	r5, r0
   18200:	mov	r0, r4
   18204:	bl	19cd0 <__assert_fail@plt+0x847c>
   18208:	mov	r6, r0
   1820c:	ldr	r0, [r8]
   18210:	ldr	r2, [r8, #44]	; 0x2c
   18214:	ldr	r1, [r8, #40]	; 0x28
   18218:	mov	r3, r7
   1821c:	stm	sp, {r0, r9, sl}
   18220:	str	r2, [sp, #16]
   18224:	str	r1, [sp, #12]
   18228:	mov	r0, r6
   1822c:	mov	r1, r4
   18230:	ldr	r2, [sp, #20]
   18234:	bl	16d50 <__assert_fail@plt+0x54fc>
   18238:	ldr	r0, [sp, #24]
   1823c:	ldr	r1, [sp, #32]
   18240:	ldr	r2, [sp, #28]
   18244:	cmp	r0, #0
   18248:	str	r1, [r2]
   1824c:	strne	r5, [r0]
   18250:	mov	r0, r6
   18254:	sub	sp, fp, #28
   18258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1825c:	push	{r4, r5, r6, r7, fp, lr}
   18260:	add	fp, sp, #16
   18264:	movw	r4, #53656	; 0xd198
   18268:	movt	r4, #2
   1826c:	ldrd	r6, [r4]
   18270:	cmp	r7, #2
   18274:	blt	182a0 <__assert_fail@plt+0x6a4c>
   18278:	add	r5, r6, #12
   1827c:	mov	r7, #0
   18280:	ldr	r0, [r5, r7, lsl #3]
   18284:	bl	1a978 <__assert_fail@plt+0x9124>
   18288:	ldr	r1, [r4, #4]
   1828c:	add	r2, r7, #2
   18290:	add	r0, r7, #1
   18294:	mov	r7, r0
   18298:	cmp	r2, r1
   1829c:	blt	18280 <__assert_fail@plt+0x6a2c>
   182a0:	ldr	r0, [r6, #4]
   182a4:	movw	r5, #53816	; 0xd238
   182a8:	movt	r5, #2
   182ac:	cmp	r0, r5
   182b0:	beq	182c4 <__assert_fail@plt+0x6a70>
   182b4:	bl	1a978 <__assert_fail@plt+0x9124>
   182b8:	mov	r0, #256	; 0x100
   182bc:	str	r0, [r4, #8]
   182c0:	str	r5, [r4, #12]
   182c4:	add	r5, r4, #8
   182c8:	cmp	r6, r5
   182cc:	beq	182dc <__assert_fail@plt+0x6a88>
   182d0:	mov	r0, r6
   182d4:	bl	1a978 <__assert_fail@plt+0x9124>
   182d8:	str	r5, [r4]
   182dc:	mov	r0, #1
   182e0:	str	r0, [r4, #4]
   182e4:	pop	{r4, r5, r6, r7, fp, pc}
   182e8:	movw	r3, #53768	; 0xd208
   182ec:	mvn	r2, #0
   182f0:	movt	r3, #2
   182f4:	b	182f8 <__assert_fail@plt+0x6aa4>
   182f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182fc:	add	fp, sp, #28
   18300:	sub	sp, sp, #44	; 0x2c
   18304:	mov	r7, r3
   18308:	str	r2, [sp, #36]	; 0x24
   1830c:	str	r1, [sp, #32]
   18310:	mov	r5, r0
   18314:	bl	116d4 <__errno_location@plt>
   18318:	cmp	r5, #0
   1831c:	blt	18480 <__assert_fail@plt+0x6c2c>
   18320:	cmn	r5, #-2147483647	; 0x80000001
   18324:	beq	18480 <__assert_fail@plt+0x6c2c>
   18328:	movw	r8, #53656	; 0xd198
   1832c:	mov	r4, r0
   18330:	movt	r8, #2
   18334:	ldr	r6, [r8]
   18338:	ldr	r1, [r8, #4]
   1833c:	ldr	r0, [r0]
   18340:	str	r4, [sp, #28]
   18344:	cmp	r1, r5
   18348:	str	r0, [sp, #24]
   1834c:	ble	18358 <__assert_fail@plt+0x6b04>
   18350:	mov	sl, r6
   18354:	b	183bc <__assert_fail@plt+0x6b68>
   18358:	mov	r0, #8
   1835c:	add	r9, r8, #8
   18360:	add	r2, r5, #1
   18364:	str	r1, [fp, #-32]	; 0xffffffe0
   18368:	mvn	r3, #-2147483648	; 0x80000000
   1836c:	str	r0, [sp]
   18370:	subs	r0, r6, r9
   18374:	sub	r2, r2, r1
   18378:	sub	r1, fp, #32
   1837c:	movne	r0, r6
   18380:	bl	19ed0 <__assert_fail@plt+0x867c>
   18384:	str	r0, [r8]
   18388:	cmp	r6, r9
   1838c:	mov	sl, r0
   18390:	ldrdeq	r0, [r8, #8]
   18394:	stmeq	sl, {r0, r1}
   18398:	ldr	r1, [r8, #4]
   1839c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   183a0:	add	r0, sl, r1, lsl #3
   183a4:	sub	r1, r2, r1
   183a8:	lsl	r2, r1, #3
   183ac:	mov	r1, #0
   183b0:	bl	116f8 <memset@plt>
   183b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   183b8:	str	r0, [r8, #4]
   183bc:	mov	r9, sl
   183c0:	ldr	r6, [r9, r5, lsl #3]!
   183c4:	ldr	r4, [r9, #4]!
   183c8:	ldm	r7, {r0, r1}
   183cc:	ldr	r2, [r7, #40]	; 0x28
   183d0:	ldr	r3, [r7, #44]	; 0x2c
   183d4:	orr	r8, r1, #1
   183d8:	add	r1, r7, #8
   183dc:	stm	sp, {r0, r8}
   183e0:	add	r0, sp, #8
   183e4:	str	r1, [sp, #20]
   183e8:	stm	r0, {r1, r2, r3}
   183ec:	mov	r0, r4
   183f0:	mov	r1, r6
   183f4:	ldr	r2, [sp, #32]
   183f8:	ldr	r3, [sp, #36]	; 0x24
   183fc:	bl	16d50 <__assert_fail@plt+0x54fc>
   18400:	cmp	r6, r0
   18404:	bhi	18468 <__assert_fail@plt+0x6c14>
   18408:	add	r6, r0, #1
   1840c:	movw	r0, #53816	; 0xd238
   18410:	movt	r0, #2
   18414:	str	r6, [sl, r5, lsl #3]
   18418:	cmp	r4, r0
   1841c:	beq	18428 <__assert_fail@plt+0x6bd4>
   18420:	mov	r0, r4
   18424:	bl	1a978 <__assert_fail@plt+0x9124>
   18428:	mov	r0, r6
   1842c:	bl	19cd0 <__assert_fail@plt+0x847c>
   18430:	str	r0, [r9]
   18434:	mov	r4, r0
   18438:	add	r3, sp, #8
   1843c:	ldr	r0, [r7]
   18440:	ldr	r1, [r7, #40]	; 0x28
   18444:	ldr	r2, [r7, #44]	; 0x2c
   18448:	stm	sp, {r0, r8}
   1844c:	ldr	r0, [sp, #20]
   18450:	stm	r3, {r0, r1, r2}
   18454:	mov	r0, r4
   18458:	mov	r1, r6
   1845c:	ldr	r2, [sp, #32]
   18460:	ldr	r3, [sp, #36]	; 0x24
   18464:	bl	16d50 <__assert_fail@plt+0x54fc>
   18468:	ldr	r1, [sp, #24]
   1846c:	ldr	r0, [sp, #28]
   18470:	str	r1, [r0]
   18474:	mov	r0, r4
   18478:	sub	sp, fp, #28
   1847c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18480:	bl	11818 <abort@plt>
   18484:	movw	r3, #53768	; 0xd208
   18488:	movt	r3, #2
   1848c:	b	182f8 <__assert_fail@plt+0x6aa4>
   18490:	movw	r3, #53768	; 0xd208
   18494:	mov	r1, r0
   18498:	mov	r0, #0
   1849c:	mvn	r2, #0
   184a0:	movt	r3, #2
   184a4:	b	182f8 <__assert_fail@plt+0x6aa4>
   184a8:	movw	r3, #53768	; 0xd208
   184ac:	mov	r2, r1
   184b0:	mov	r1, r0
   184b4:	mov	r0, #0
   184b8:	movt	r3, #2
   184bc:	b	182f8 <__assert_fail@plt+0x6aa4>
   184c0:	push	{fp, lr}
   184c4:	mov	fp, sp
   184c8:	sub	sp, sp, #48	; 0x30
   184cc:	vmov.i32	q8, #0	; 0x00000000
   184d0:	mov	ip, #32
   184d4:	mov	r3, sp
   184d8:	mov	lr, r2
   184dc:	cmp	r1, #10
   184e0:	add	r2, r3, #16
   184e4:	vst1.64	{d16-d17}, [r3], ip
   184e8:	vst1.64	{d16-d17}, [r3]
   184ec:	vst1.64	{d16-d17}, [r2]
   184f0:	beq	18510 <__assert_fail@plt+0x6cbc>
   184f4:	str	r1, [sp]
   184f8:	mov	r3, sp
   184fc:	mov	r1, lr
   18500:	mvn	r2, #0
   18504:	bl	182f8 <__assert_fail@plt+0x6aa4>
   18508:	mov	sp, fp
   1850c:	pop	{fp, pc}
   18510:	bl	11818 <abort@plt>
   18514:	push	{r4, sl, fp, lr}
   18518:	add	fp, sp, #8
   1851c:	sub	sp, sp, #48	; 0x30
   18520:	mov	ip, r3
   18524:	mov	r3, sp
   18528:	vmov.i32	q8, #0	; 0x00000000
   1852c:	mov	lr, #32
   18530:	cmp	r1, #10
   18534:	add	r4, r3, #16
   18538:	vst1.64	{d16-d17}, [r3], lr
   1853c:	vst1.64	{d16-d17}, [r3]
   18540:	vst1.64	{d16-d17}, [r4]
   18544:	beq	18564 <__assert_fail@plt+0x6d10>
   18548:	str	r1, [sp]
   1854c:	mov	r1, r2
   18550:	mov	r3, sp
   18554:	mov	r2, ip
   18558:	bl	182f8 <__assert_fail@plt+0x6aa4>
   1855c:	sub	sp, fp, #8
   18560:	pop	{r4, sl, fp, pc}
   18564:	bl	11818 <abort@plt>
   18568:	push	{fp, lr}
   1856c:	mov	fp, sp
   18570:	sub	sp, sp, #48	; 0x30
   18574:	mov	r3, sp
   18578:	vmov.i32	q8, #0	; 0x00000000
   1857c:	mov	ip, #32
   18580:	cmp	r0, #10
   18584:	add	r2, r3, #16
   18588:	vst1.64	{d16-d17}, [r3], ip
   1858c:	vst1.64	{d16-d17}, [r3]
   18590:	vst1.64	{d16-d17}, [r2]
   18594:	beq	185b4 <__assert_fail@plt+0x6d60>
   18598:	str	r0, [sp]
   1859c:	mov	r3, sp
   185a0:	mov	r0, #0
   185a4:	mvn	r2, #0
   185a8:	bl	182f8 <__assert_fail@plt+0x6aa4>
   185ac:	mov	sp, fp
   185b0:	pop	{fp, pc}
   185b4:	bl	11818 <abort@plt>
   185b8:	push	{fp, lr}
   185bc:	mov	fp, sp
   185c0:	sub	sp, sp, #48	; 0x30
   185c4:	mov	r3, sp
   185c8:	vmov.i32	q8, #0	; 0x00000000
   185cc:	mov	ip, #32
   185d0:	cmp	r0, #10
   185d4:	add	lr, r3, #16
   185d8:	vst1.64	{d16-d17}, [r3], ip
   185dc:	vst1.64	{d16-d17}, [r3]
   185e0:	vst1.64	{d16-d17}, [lr]
   185e4:	beq	18600 <__assert_fail@plt+0x6dac>
   185e8:	str	r0, [sp]
   185ec:	mov	r3, sp
   185f0:	mov	r0, #0
   185f4:	bl	182f8 <__assert_fail@plt+0x6aa4>
   185f8:	mov	sp, fp
   185fc:	pop	{fp, pc}
   18600:	bl	11818 <abort@plt>
   18604:	push	{r4, sl, fp, lr}
   18608:	add	fp, sp, #8
   1860c:	sub	sp, sp, #48	; 0x30
   18610:	mov	lr, r0
   18614:	movw	r0, #53768	; 0xd208
   18618:	mov	r3, #32
   1861c:	mov	ip, r1
   18620:	mov	r4, #1
   18624:	movt	r0, #2
   18628:	add	r1, r0, #16
   1862c:	vld1.64	{d16-d17}, [r0], r3
   18630:	mov	r3, sp
   18634:	vld1.64	{d18-d19}, [r1]
   18638:	add	r1, r3, #16
   1863c:	vld1.64	{d20-d21}, [r0]
   18640:	add	r0, r3, #32
   18644:	vst1.64	{d18-d19}, [r1]
   18648:	mov	r1, r3
   1864c:	vst1.64	{d20-d21}, [r0]
   18650:	mov	r0, #28
   18654:	and	r0, r0, r2, lsr #3
   18658:	and	r2, r2, #31
   1865c:	vst1.64	{d16-d17}, [r1], r0
   18660:	ldr	r0, [r1, #8]
   18664:	bic	r4, r4, r0, lsr r2
   18668:	eor	r0, r0, r4, lsl r2
   1866c:	mov	r2, ip
   18670:	str	r0, [r1, #8]
   18674:	mov	r0, #0
   18678:	mov	r1, lr
   1867c:	bl	182f8 <__assert_fail@plt+0x6aa4>
   18680:	sub	sp, fp, #8
   18684:	pop	{r4, sl, fp, pc}
   18688:	push	{fp, lr}
   1868c:	mov	fp, sp
   18690:	sub	sp, sp, #48	; 0x30
   18694:	mov	ip, r0
   18698:	movw	r0, #53768	; 0xd208
   1869c:	mov	r3, #32
   186a0:	movt	r0, #2
   186a4:	add	r2, r0, #16
   186a8:	vld1.64	{d16-d17}, [r0], r3
   186ac:	mov	r3, sp
   186b0:	vld1.64	{d18-d19}, [r2]
   186b4:	add	r2, r3, #16
   186b8:	vld1.64	{d20-d21}, [r0]
   186bc:	add	r0, r3, #32
   186c0:	vst1.64	{d18-d19}, [r2]
   186c4:	mov	r2, r3
   186c8:	vst1.64	{d20-d21}, [r0]
   186cc:	mov	r0, #28
   186d0:	and	r0, r0, r1, lsr #3
   186d4:	and	r1, r1, #31
   186d8:	vst1.64	{d16-d17}, [r2], r0
   186dc:	mov	r0, #1
   186e0:	ldr	lr, [r2, #8]
   186e4:	bic	r0, r0, lr, lsr r1
   186e8:	eor	r0, lr, r0, lsl r1
   186ec:	mov	r1, ip
   186f0:	str	r0, [r2, #8]
   186f4:	mov	r0, #0
   186f8:	mvn	r2, #0
   186fc:	bl	182f8 <__assert_fail@plt+0x6aa4>
   18700:	mov	sp, fp
   18704:	pop	{fp, pc}
   18708:	push	{fp, lr}
   1870c:	mov	fp, sp
   18710:	sub	sp, sp, #48	; 0x30
   18714:	movw	r2, #53768	; 0xd208
   18718:	mov	r3, #32
   1871c:	mov	r1, r0
   18720:	movt	r2, #2
   18724:	add	r0, r2, #16
   18728:	vld1.64	{d16-d17}, [r2], r3
   1872c:	mov	r3, sp
   18730:	vld1.64	{d18-d19}, [r0]
   18734:	add	r0, r3, #16
   18738:	vld1.64	{d20-d21}, [r2]
   1873c:	mov	r2, r3
   18740:	vst1.64	{d18-d19}, [r0]
   18744:	add	r0, r3, #32
   18748:	vst1.64	{d20-d21}, [r0]
   1874c:	mov	r0, #12
   18750:	vst1.64	{d16-d17}, [r2], r0
   18754:	ldr	r0, [r2]
   18758:	orr	r0, r0, #67108864	; 0x4000000
   1875c:	str	r0, [r2]
   18760:	mov	r0, #0
   18764:	mvn	r2, #0
   18768:	bl	182f8 <__assert_fail@plt+0x6aa4>
   1876c:	mov	sp, fp
   18770:	pop	{fp, pc}
   18774:	push	{fp, lr}
   18778:	mov	fp, sp
   1877c:	sub	sp, sp, #48	; 0x30
   18780:	mov	ip, r1
   18784:	mov	r1, r0
   18788:	movw	r0, #53768	; 0xd208
   1878c:	mov	r3, #32
   18790:	movt	r0, #2
   18794:	add	r2, r0, #16
   18798:	vld1.64	{d16-d17}, [r0], r3
   1879c:	mov	r3, sp
   187a0:	vld1.64	{d18-d19}, [r2]
   187a4:	add	r2, r3, #16
   187a8:	vld1.64	{d20-d21}, [r0]
   187ac:	add	r0, r3, #32
   187b0:	vst1.64	{d18-d19}, [r2]
   187b4:	mov	r2, r3
   187b8:	vst1.64	{d20-d21}, [r0]
   187bc:	mov	r0, #12
   187c0:	vst1.64	{d16-d17}, [r2], r0
   187c4:	ldr	r0, [r2]
   187c8:	orr	r0, r0, #67108864	; 0x4000000
   187cc:	str	r0, [r2]
   187d0:	mov	r0, #0
   187d4:	mov	r2, ip
   187d8:	bl	182f8 <__assert_fail@plt+0x6aa4>
   187dc:	mov	sp, fp
   187e0:	pop	{fp, pc}
   187e4:	push	{r4, sl, fp, lr}
   187e8:	add	fp, sp, #8
   187ec:	sub	sp, sp, #96	; 0x60
   187f0:	mov	ip, r2
   187f4:	mov	r2, sp
   187f8:	vmov.i32	q8, #0	; 0x00000000
   187fc:	mov	r4, #28
   18800:	cmp	r1, #10
   18804:	mov	r3, r2
   18808:	add	lr, r2, #16
   1880c:	vst1.64	{d16-d17}, [r3], r4
   18810:	vst1.64	{d16-d17}, [lr]
   18814:	vst1.32	{d16-d17}, [r3]
   18818:	beq	18868 <__assert_fail@plt+0x7014>
   1881c:	vld1.64	{d16-d17}, [r2], r4
   18820:	vld1.64	{d18-d19}, [lr]
   18824:	add	r3, sp, #48	; 0x30
   18828:	add	r4, r3, #4
   1882c:	vld1.32	{d20-d21}, [r2]
   18830:	add	r2, r3, #20
   18834:	vst1.32	{d16-d17}, [r4]
   18838:	vst1.32	{d18-d19}, [r2]
   1883c:	add	r2, r3, #32
   18840:	vst1.32	{d20-d21}, [r2]
   18844:	str	r1, [sp, #48]	; 0x30
   18848:	mvn	r2, #0
   1884c:	ldr	r1, [sp, #60]	; 0x3c
   18850:	orr	r1, r1, #67108864	; 0x4000000
   18854:	str	r1, [sp, #60]	; 0x3c
   18858:	mov	r1, ip
   1885c:	bl	182f8 <__assert_fail@plt+0x6aa4>
   18860:	sub	sp, fp, #8
   18864:	pop	{r4, sl, fp, pc}
   18868:	bl	11818 <abort@plt>
   1886c:	push	{r4, r5, fp, lr}
   18870:	add	fp, sp, #8
   18874:	sub	sp, sp, #48	; 0x30
   18878:	mov	ip, r3
   1887c:	movw	r3, #53768	; 0xd208
   18880:	mov	lr, #32
   18884:	cmp	r1, #0
   18888:	mov	r5, sp
   1888c:	movt	r3, #2
   18890:	cmpne	r2, #0
   18894:	add	r4, r3, #16
   18898:	vld1.64	{d16-d17}, [r3], lr
   1889c:	vld1.64	{d18-d19}, [r4]
   188a0:	add	r4, r5, #16
   188a4:	vld1.64	{d20-d21}, [r3]
   188a8:	vst1.64	{d16-d17}, [r5], lr
   188ac:	mov	r3, #10
   188b0:	vst1.64	{d18-d19}, [r4]
   188b4:	vst1.64	{d20-d21}, [r5]
   188b8:	str	r3, [sp]
   188bc:	bne	188c4 <__assert_fail@plt+0x7070>
   188c0:	bl	11818 <abort@plt>
   188c4:	str	r2, [sp, #44]	; 0x2c
   188c8:	str	r1, [sp, #40]	; 0x28
   188cc:	mov	r3, sp
   188d0:	mov	r1, ip
   188d4:	mvn	r2, #0
   188d8:	bl	182f8 <__assert_fail@plt+0x6aa4>
   188dc:	sub	sp, fp, #8
   188e0:	pop	{r4, r5, fp, pc}
   188e4:	push	{r4, r5, fp, lr}
   188e8:	add	fp, sp, #8
   188ec:	sub	sp, sp, #48	; 0x30
   188f0:	mov	lr, r3
   188f4:	movw	r3, #53768	; 0xd208
   188f8:	mov	ip, #32
   188fc:	cmp	r1, #0
   18900:	mov	r5, sp
   18904:	movt	r3, #2
   18908:	cmpne	r2, #0
   1890c:	add	r4, r3, #16
   18910:	vld1.64	{d16-d17}, [r3], ip
   18914:	vld1.64	{d18-d19}, [r4]
   18918:	add	r4, r5, #16
   1891c:	vld1.64	{d20-d21}, [r3]
   18920:	vst1.64	{d16-d17}, [r5], ip
   18924:	mov	r3, #10
   18928:	vst1.64	{d18-d19}, [r4]
   1892c:	vst1.64	{d20-d21}, [r5]
   18930:	str	r3, [sp]
   18934:	bne	1893c <__assert_fail@plt+0x70e8>
   18938:	bl	11818 <abort@plt>
   1893c:	ldr	ip, [fp, #8]
   18940:	str	r2, [sp, #44]	; 0x2c
   18944:	str	r1, [sp, #40]	; 0x28
   18948:	mov	r3, sp
   1894c:	mov	r1, lr
   18950:	mov	r2, ip
   18954:	bl	182f8 <__assert_fail@plt+0x6aa4>
   18958:	sub	sp, fp, #8
   1895c:	pop	{r4, r5, fp, pc}
   18960:	push	{r4, sl, fp, lr}
   18964:	add	fp, sp, #8
   18968:	sub	sp, sp, #48	; 0x30
   1896c:	mov	ip, r2
   18970:	movw	r2, #53768	; 0xd208
   18974:	mov	lr, #32
   18978:	cmp	r0, #0
   1897c:	mov	r4, sp
   18980:	movt	r2, #2
   18984:	cmpne	r1, #0
   18988:	add	r3, r2, #16
   1898c:	vld1.64	{d16-d17}, [r2], lr
   18990:	vld1.64	{d18-d19}, [r3]
   18994:	add	r3, r4, #16
   18998:	vld1.64	{d20-d21}, [r2]
   1899c:	vst1.64	{d16-d17}, [r4], lr
   189a0:	mov	r2, #10
   189a4:	vst1.64	{d18-d19}, [r3]
   189a8:	vst1.64	{d20-d21}, [r4]
   189ac:	str	r2, [sp]
   189b0:	bne	189b8 <__assert_fail@plt+0x7164>
   189b4:	bl	11818 <abort@plt>
   189b8:	str	r1, [sp, #44]	; 0x2c
   189bc:	str	r0, [sp, #40]	; 0x28
   189c0:	mov	r3, sp
   189c4:	mov	r0, #0
   189c8:	mov	r1, ip
   189cc:	mvn	r2, #0
   189d0:	bl	182f8 <__assert_fail@plt+0x6aa4>
   189d4:	sub	sp, fp, #8
   189d8:	pop	{r4, sl, fp, pc}
   189dc:	push	{r4, r5, fp, lr}
   189e0:	add	fp, sp, #8
   189e4:	sub	sp, sp, #48	; 0x30
   189e8:	mov	lr, r2
   189ec:	movw	r2, #53768	; 0xd208
   189f0:	mov	ip, r3
   189f4:	mov	r3, #32
   189f8:	cmp	r0, #0
   189fc:	mov	r5, sp
   18a00:	movt	r2, #2
   18a04:	cmpne	r1, #0
   18a08:	add	r4, r2, #16
   18a0c:	vld1.64	{d16-d17}, [r2], r3
   18a10:	vld1.64	{d18-d19}, [r4]
   18a14:	add	r4, r5, #16
   18a18:	vld1.64	{d20-d21}, [r2]
   18a1c:	vst1.64	{d16-d17}, [r5], r3
   18a20:	mov	r2, #10
   18a24:	vst1.64	{d18-d19}, [r4]
   18a28:	vst1.64	{d20-d21}, [r5]
   18a2c:	str	r2, [sp]
   18a30:	bne	18a38 <__assert_fail@plt+0x71e4>
   18a34:	bl	11818 <abort@plt>
   18a38:	str	r1, [sp, #44]	; 0x2c
   18a3c:	str	r0, [sp, #40]	; 0x28
   18a40:	mov	r3, sp
   18a44:	mov	r0, #0
   18a48:	mov	r1, lr
   18a4c:	mov	r2, ip
   18a50:	bl	182f8 <__assert_fail@plt+0x6aa4>
   18a54:	sub	sp, fp, #8
   18a58:	pop	{r4, r5, fp, pc}
   18a5c:	movw	r3, #53608	; 0xd168
   18a60:	movt	r3, #2
   18a64:	b	182f8 <__assert_fail@plt+0x6aa4>
   18a68:	movw	r3, #53608	; 0xd168
   18a6c:	mov	r2, r1
   18a70:	mov	r1, r0
   18a74:	mov	r0, #0
   18a78:	movt	r3, #2
   18a7c:	b	182f8 <__assert_fail@plt+0x6aa4>
   18a80:	movw	r3, #53608	; 0xd168
   18a84:	mvn	r2, #0
   18a88:	movt	r3, #2
   18a8c:	b	182f8 <__assert_fail@plt+0x6aa4>
   18a90:	movw	r3, #53608	; 0xd168
   18a94:	mov	r1, r0
   18a98:	mov	r0, #0
   18a9c:	mvn	r2, #0
   18aa0:	movt	r3, #2
   18aa4:	b	182f8 <__assert_fail@plt+0x6aa4>
   18aa8:	push	{r4, sl, fp, lr}
   18aac:	add	fp, sp, #8
   18ab0:	sub	sp, sp, #104	; 0x68
   18ab4:	movw	r1, #50789	; 0xc665
   18ab8:	mov	r4, r0
   18abc:	mov	r2, sp
   18ac0:	mov	r0, #3
   18ac4:	movt	r1, #1
   18ac8:	bl	11830 <__lxstat64@plt>
   18acc:	mov	r1, r0
   18ad0:	mov	r0, #0
   18ad4:	cmp	r1, #0
   18ad8:	beq	18ae4 <__assert_fail@plt+0x7290>
   18adc:	sub	sp, fp, #8
   18ae0:	pop	{r4, sl, fp, pc}
   18ae4:	ldr	r0, [sp, #96]	; 0x60
   18ae8:	ldr	r1, [sp, #100]	; 0x64
   18aec:	ldm	sp, {r2, r3}
   18af0:	stm	r4, {r0, r1, r2, r3}
   18af4:	mov	r0, r4
   18af8:	sub	sp, fp, #8
   18afc:	pop	{r4, sl, fp, pc}
   18b00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b04:	add	fp, sp, #28
   18b08:	sub	sp, sp, #964	; 0x3c4
   18b0c:	sub	sp, sp, #3072	; 0xc00
   18b10:	mov	r4, r2
   18b14:	mov	r5, r1
   18b18:	cmn	r0, #100	; 0x64
   18b1c:	beq	18b30 <__assert_fail@plt+0x72dc>
   18b20:	mov	r7, r0
   18b24:	ldrb	r0, [r5]
   18b28:	cmp	r0, #47	; 0x2f
   18b2c:	bne	18b44 <__assert_fail@plt+0x72f0>
   18b30:	mov	r0, r5
   18b34:	mov	r1, r4
   18b38:	sub	sp, fp, #28
   18b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b40:	b	19440 <__assert_fail@plt+0x7bec>
   18b44:	mov	sl, sp
   18b48:	mov	r1, r7
   18b4c:	mov	r2, r5
   18b50:	mov	r0, sl
   18b54:	bl	1a398 <__assert_fail@plt+0x8b44>
   18b58:	cmp	r0, #0
   18b5c:	beq	18c48 <__assert_fail@plt+0x73f4>
   18b60:	mov	r1, r4
   18b64:	mov	r6, r0
   18b68:	bl	19440 <__assert_fail@plt+0x7bec>
   18b6c:	mov	r9, r0
   18b70:	bl	116d4 <__errno_location@plt>
   18b74:	ldr	r2, [r0]
   18b78:	mov	r8, r0
   18b7c:	cmp	r6, sl
   18b80:	beq	18b94 <__assert_fail@plt+0x7340>
   18b84:	mov	r0, r6
   18b88:	mov	r6, r2
   18b8c:	bl	1a978 <__assert_fail@plt+0x9124>
   18b90:	mov	r2, r6
   18b94:	cmn	r9, #1
   18b98:	bne	18d14 <__assert_fail@plt+0x74c0>
   18b9c:	sub	r0, r2, #1
   18ba0:	cmp	r0, #37	; 0x25
   18ba4:	bhi	18d20 <__assert_fail@plt+0x74cc>
   18ba8:	add	r1, pc, #0
   18bac:	ldr	pc, [r1, r0, lsl #2]
   18bb0:	andeq	r8, r1, r8, asr #24
   18bb4:	andeq	r8, r1, r8, asr #24
   18bb8:	andeq	r8, r1, r8, lsr #26
   18bbc:	andeq	r8, r1, r8, lsr #26
   18bc0:	andeq	r8, r1, r8, lsr #26
   18bc4:	andeq	r8, r1, r8, lsr #26
   18bc8:	andeq	r8, r1, r8, lsr #26
   18bcc:	andeq	r8, r1, r8, lsr #26
   18bd0:	andeq	r8, r1, r8, lsr #26
   18bd4:	andeq	r8, r1, r8, lsr #26
   18bd8:	andeq	r8, r1, r8, lsr #26
   18bdc:	andeq	r8, r1, r8, lsr #26
   18be0:	andeq	r8, r1, r8, asr #24
   18be4:	andeq	r8, r1, r8, lsr #26
   18be8:	andeq	r8, r1, r8, lsr #26
   18bec:	andeq	r8, r1, r8, lsr #26
   18bf0:	andeq	r8, r1, r8, lsr #26
   18bf4:	andeq	r8, r1, r8, lsr #26
   18bf8:	andeq	r8, r1, r8, lsr #26
   18bfc:	andeq	r8, r1, r8, asr #24
   18c00:	andeq	r8, r1, r8, lsr #26
   18c04:	andeq	r8, r1, r8, lsr #26
   18c08:	andeq	r8, r1, r8, lsr #26
   18c0c:	andeq	r8, r1, r8, lsr #26
   18c10:	andeq	r8, r1, r8, lsr #26
   18c14:	andeq	r8, r1, r8, lsr #26
   18c18:	andeq	r8, r1, r8, lsr #26
   18c1c:	andeq	r8, r1, r8, lsr #26
   18c20:	andeq	r8, r1, r8, lsr #26
   18c24:	andeq	r8, r1, r8, lsr #26
   18c28:	andeq	r8, r1, r8, lsr #26
   18c2c:	andeq	r8, r1, r8, lsr #26
   18c30:	andeq	r8, r1, r8, lsr #26
   18c34:	andeq	r8, r1, r8, lsr #26
   18c38:	andeq	r8, r1, r8, lsr #26
   18c3c:	andeq	r8, r1, r8, lsr #26
   18c40:	andeq	r8, r1, r8, lsr #26
   18c44:	andeq	r8, r1, r8, asr #24
   18c48:	mov	r0, sp
   18c4c:	bl	1ab98 <__assert_fail@plt+0x9344>
   18c50:	cmp	r0, #0
   18c54:	bne	18d38 <__assert_fail@plt+0x74e4>
   18c58:	cmp	r7, #0
   18c5c:	blt	18c90 <__assert_fail@plt+0x743c>
   18c60:	ldr	r0, [sp]
   18c64:	cmp	r0, r7
   18c68:	bne	18c90 <__assert_fail@plt+0x743c>
   18c6c:	mov	r0, sp
   18c70:	bl	1ac10 <__assert_fail@plt+0x93bc>
   18c74:	bl	116d4 <__errno_location@plt>
   18c78:	mov	r1, #9
   18c7c:	mvn	r9, #0
   18c80:	str	r1, [r0]
   18c84:	mov	r0, r9
   18c88:	sub	sp, fp, #28
   18c8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c90:	mov	r0, r7
   18c94:	bl	117b8 <fchdir@plt>
   18c98:	cmp	r0, #0
   18c9c:	beq	18cc8 <__assert_fail@plt+0x7474>
   18ca0:	bl	116d4 <__errno_location@plt>
   18ca4:	ldr	r5, [r0]
   18ca8:	mov	r4, r0
   18cac:	mov	r0, sp
   18cb0:	bl	1ac10 <__assert_fail@plt+0x93bc>
   18cb4:	str	r5, [r4]
   18cb8:	mvn	r9, #0
   18cbc:	mov	r0, r9
   18cc0:	sub	sp, fp, #28
   18cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cc8:	mov	r0, r5
   18ccc:	mov	r1, r4
   18cd0:	bl	19440 <__assert_fail@plt+0x7bec>
   18cd4:	mov	r9, r0
   18cd8:	mov	r4, #0
   18cdc:	cmn	r0, #1
   18ce0:	bne	18cec <__assert_fail@plt+0x7498>
   18ce4:	bl	116d4 <__errno_location@plt>
   18ce8:	ldr	r4, [r0]
   18cec:	mov	r0, sp
   18cf0:	bl	1abf4 <__assert_fail@plt+0x93a0>
   18cf4:	cmp	r0, #0
   18cf8:	bne	18d44 <__assert_fail@plt+0x74f0>
   18cfc:	mov	r0, sp
   18d00:	bl	1ac10 <__assert_fail@plt+0x93bc>
   18d04:	cmp	r4, #0
   18d08:	beq	18d14 <__assert_fail@plt+0x74c0>
   18d0c:	bl	116d4 <__errno_location@plt>
   18d10:	str	r4, [r0]
   18d14:	mov	r0, r9
   18d18:	sub	sp, fp, #28
   18d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d20:	cmp	r2, #95	; 0x5f
   18d24:	beq	18c48 <__assert_fail@plt+0x73f4>
   18d28:	str	r2, [r8]
   18d2c:	mov	r0, r9
   18d30:	sub	sp, fp, #28
   18d34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d38:	bl	116d4 <__errno_location@plt>
   18d3c:	ldr	r0, [r0]
   18d40:	bl	1aadc <__assert_fail@plt+0x9288>
   18d44:	bl	116d4 <__errno_location@plt>
   18d48:	ldr	r0, [r0]
   18d4c:	bl	1ab1c <__assert_fail@plt+0x92c8>
   18d50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d54:	add	fp, sp, #28
   18d58:	sub	sp, sp, #964	; 0x3c4
   18d5c:	sub	sp, sp, #3072	; 0xc00
   18d60:	mov	r4, r2
   18d64:	mov	r5, r1
   18d68:	cmn	r0, #100	; 0x64
   18d6c:	beq	18d80 <__assert_fail@plt+0x752c>
   18d70:	mov	r7, r0
   18d74:	ldrb	r0, [r5]
   18d78:	cmp	r0, #47	; 0x2f
   18d7c:	bne	18d94 <__assert_fail@plt+0x7540>
   18d80:	mov	r0, r5
   18d84:	mov	r1, r4
   18d88:	sub	sp, fp, #28
   18d8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d90:	b	194b4 <__assert_fail@plt+0x7c60>
   18d94:	mov	sl, sp
   18d98:	mov	r1, r7
   18d9c:	mov	r2, r5
   18da0:	mov	r0, sl
   18da4:	bl	1a398 <__assert_fail@plt+0x8b44>
   18da8:	cmp	r0, #0
   18dac:	beq	18e98 <__assert_fail@plt+0x7644>
   18db0:	mov	r1, r4
   18db4:	mov	r6, r0
   18db8:	bl	194b4 <__assert_fail@plt+0x7c60>
   18dbc:	mov	r9, r0
   18dc0:	bl	116d4 <__errno_location@plt>
   18dc4:	ldr	r2, [r0]
   18dc8:	mov	r8, r0
   18dcc:	cmp	r6, sl
   18dd0:	beq	18de4 <__assert_fail@plt+0x7590>
   18dd4:	mov	r0, r6
   18dd8:	mov	r6, r2
   18ddc:	bl	1a978 <__assert_fail@plt+0x9124>
   18de0:	mov	r2, r6
   18de4:	cmn	r9, #1
   18de8:	bne	18f64 <__assert_fail@plt+0x7710>
   18dec:	sub	r0, r2, #1
   18df0:	cmp	r0, #37	; 0x25
   18df4:	bhi	18f70 <__assert_fail@plt+0x771c>
   18df8:	add	r1, pc, #0
   18dfc:	ldr	pc, [r1, r0, lsl #2]
   18e00:	muleq	r1, r8, lr
   18e04:	muleq	r1, r8, lr
   18e08:	andeq	r8, r1, r8, ror pc
   18e0c:	andeq	r8, r1, r8, ror pc
   18e10:	andeq	r8, r1, r8, ror pc
   18e14:	andeq	r8, r1, r8, ror pc
   18e18:	andeq	r8, r1, r8, ror pc
   18e1c:	andeq	r8, r1, r8, ror pc
   18e20:	andeq	r8, r1, r8, ror pc
   18e24:	andeq	r8, r1, r8, ror pc
   18e28:	andeq	r8, r1, r8, ror pc
   18e2c:	andeq	r8, r1, r8, ror pc
   18e30:	muleq	r1, r8, lr
   18e34:	andeq	r8, r1, r8, ror pc
   18e38:	andeq	r8, r1, r8, ror pc
   18e3c:	andeq	r8, r1, r8, ror pc
   18e40:	andeq	r8, r1, r8, ror pc
   18e44:	andeq	r8, r1, r8, ror pc
   18e48:	andeq	r8, r1, r8, ror pc
   18e4c:	muleq	r1, r8, lr
   18e50:	andeq	r8, r1, r8, ror pc
   18e54:	andeq	r8, r1, r8, ror pc
   18e58:	andeq	r8, r1, r8, ror pc
   18e5c:	andeq	r8, r1, r8, ror pc
   18e60:	andeq	r8, r1, r8, ror pc
   18e64:	andeq	r8, r1, r8, ror pc
   18e68:	andeq	r8, r1, r8, ror pc
   18e6c:	andeq	r8, r1, r8, ror pc
   18e70:	andeq	r8, r1, r8, ror pc
   18e74:	andeq	r8, r1, r8, ror pc
   18e78:	andeq	r8, r1, r8, ror pc
   18e7c:	andeq	r8, r1, r8, ror pc
   18e80:	andeq	r8, r1, r8, ror pc
   18e84:	andeq	r8, r1, r8, ror pc
   18e88:	andeq	r8, r1, r8, ror pc
   18e8c:	andeq	r8, r1, r8, ror pc
   18e90:	andeq	r8, r1, r8, ror pc
   18e94:	muleq	r1, r8, lr
   18e98:	mov	r0, sp
   18e9c:	bl	1ab98 <__assert_fail@plt+0x9344>
   18ea0:	cmp	r0, #0
   18ea4:	bne	18f88 <__assert_fail@plt+0x7734>
   18ea8:	cmp	r7, #0
   18eac:	blt	18ee0 <__assert_fail@plt+0x768c>
   18eb0:	ldr	r0, [sp]
   18eb4:	cmp	r0, r7
   18eb8:	bne	18ee0 <__assert_fail@plt+0x768c>
   18ebc:	mov	r0, sp
   18ec0:	bl	1ac10 <__assert_fail@plt+0x93bc>
   18ec4:	bl	116d4 <__errno_location@plt>
   18ec8:	mov	r1, #9
   18ecc:	mvn	r9, #0
   18ed0:	str	r1, [r0]
   18ed4:	mov	r0, r9
   18ed8:	sub	sp, fp, #28
   18edc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ee0:	mov	r0, r7
   18ee4:	bl	117b8 <fchdir@plt>
   18ee8:	cmp	r0, #0
   18eec:	beq	18f18 <__assert_fail@plt+0x76c4>
   18ef0:	bl	116d4 <__errno_location@plt>
   18ef4:	ldr	r5, [r0]
   18ef8:	mov	r4, r0
   18efc:	mov	r0, sp
   18f00:	bl	1ac10 <__assert_fail@plt+0x93bc>
   18f04:	str	r5, [r4]
   18f08:	mvn	r9, #0
   18f0c:	mov	r0, r9
   18f10:	sub	sp, fp, #28
   18f14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f18:	mov	r0, r5
   18f1c:	mov	r1, r4
   18f20:	bl	194b4 <__assert_fail@plt+0x7c60>
   18f24:	mov	r9, r0
   18f28:	mov	r4, #0
   18f2c:	cmn	r0, #1
   18f30:	bne	18f3c <__assert_fail@plt+0x76e8>
   18f34:	bl	116d4 <__errno_location@plt>
   18f38:	ldr	r4, [r0]
   18f3c:	mov	r0, sp
   18f40:	bl	1abf4 <__assert_fail@plt+0x93a0>
   18f44:	cmp	r0, #0
   18f48:	bne	18f94 <__assert_fail@plt+0x7740>
   18f4c:	mov	r0, sp
   18f50:	bl	1ac10 <__assert_fail@plt+0x93bc>
   18f54:	cmp	r4, #0
   18f58:	beq	18f64 <__assert_fail@plt+0x7710>
   18f5c:	bl	116d4 <__errno_location@plt>
   18f60:	str	r4, [r0]
   18f64:	mov	r0, r9
   18f68:	sub	sp, fp, #28
   18f6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f70:	cmp	r2, #95	; 0x5f
   18f74:	beq	18e98 <__assert_fail@plt+0x7644>
   18f78:	str	r2, [r8]
   18f7c:	mov	r0, r9
   18f80:	sub	sp, fp, #28
   18f84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f88:	bl	116d4 <__errno_location@plt>
   18f8c:	ldr	r0, [r0]
   18f90:	bl	1aadc <__assert_fail@plt+0x9288>
   18f94:	bl	116d4 <__errno_location@plt>
   18f98:	ldr	r0, [r0]
   18f9c:	bl	1ab1c <__assert_fail@plt+0x92c8>
   18fa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fa4:	add	fp, sp, #28
   18fa8:	sub	sp, sp, #964	; 0x3c4
   18fac:	sub	sp, sp, #3072	; 0xc00
   18fb0:	mov	r4, r2
   18fb4:	mov	r5, r1
   18fb8:	cmn	r0, #100	; 0x64
   18fbc:	beq	18fd0 <__assert_fail@plt+0x777c>
   18fc0:	mov	r7, r0
   18fc4:	ldrb	r0, [r5]
   18fc8:	cmp	r0, #47	; 0x2f
   18fcc:	bne	18fe4 <__assert_fail@plt+0x7790>
   18fd0:	mov	r0, r5
   18fd4:	mov	r1, r4
   18fd8:	sub	sp, fp, #28
   18fdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fe0:	b	11734 <setfilecon@plt>
   18fe4:	mov	sl, sp
   18fe8:	mov	r1, r7
   18fec:	mov	r2, r5
   18ff0:	mov	r0, sl
   18ff4:	bl	1a398 <__assert_fail@plt+0x8b44>
   18ff8:	cmp	r0, #0
   18ffc:	beq	190e8 <__assert_fail@plt+0x7894>
   19000:	mov	r1, r4
   19004:	mov	r6, r0
   19008:	bl	11734 <setfilecon@plt>
   1900c:	mov	r9, r0
   19010:	bl	116d4 <__errno_location@plt>
   19014:	ldr	r2, [r0]
   19018:	mov	r8, r0
   1901c:	cmp	r6, sl
   19020:	beq	19034 <__assert_fail@plt+0x77e0>
   19024:	mov	r0, r6
   19028:	mov	r6, r2
   1902c:	bl	1a978 <__assert_fail@plt+0x9124>
   19030:	mov	r2, r6
   19034:	cmn	r9, #1
   19038:	bne	191b4 <__assert_fail@plt+0x7960>
   1903c:	sub	r0, r2, #1
   19040:	cmp	r0, #37	; 0x25
   19044:	bhi	191c0 <__assert_fail@plt+0x796c>
   19048:	add	r1, pc, #0
   1904c:	ldr	pc, [r1, r0, lsl #2]
   19050:	andeq	r9, r1, r8, ror #1
   19054:	andeq	r9, r1, r8, ror #1
   19058:	andeq	r9, r1, r8, asr #3
   1905c:	andeq	r9, r1, r8, asr #3
   19060:	andeq	r9, r1, r8, asr #3
   19064:	andeq	r9, r1, r8, asr #3
   19068:	andeq	r9, r1, r8, asr #3
   1906c:	andeq	r9, r1, r8, asr #3
   19070:	andeq	r9, r1, r8, asr #3
   19074:	andeq	r9, r1, r8, asr #3
   19078:	andeq	r9, r1, r8, asr #3
   1907c:	andeq	r9, r1, r8, asr #3
   19080:	andeq	r9, r1, r8, ror #1
   19084:	andeq	r9, r1, r8, asr #3
   19088:	andeq	r9, r1, r8, asr #3
   1908c:	andeq	r9, r1, r8, asr #3
   19090:	andeq	r9, r1, r8, asr #3
   19094:	andeq	r9, r1, r8, asr #3
   19098:	andeq	r9, r1, r8, asr #3
   1909c:	andeq	r9, r1, r8, ror #1
   190a0:	andeq	r9, r1, r8, asr #3
   190a4:	andeq	r9, r1, r8, asr #3
   190a8:	andeq	r9, r1, r8, asr #3
   190ac:	andeq	r9, r1, r8, asr #3
   190b0:	andeq	r9, r1, r8, asr #3
   190b4:	andeq	r9, r1, r8, asr #3
   190b8:	andeq	r9, r1, r8, asr #3
   190bc:	andeq	r9, r1, r8, asr #3
   190c0:	andeq	r9, r1, r8, asr #3
   190c4:	andeq	r9, r1, r8, asr #3
   190c8:	andeq	r9, r1, r8, asr #3
   190cc:	andeq	r9, r1, r8, asr #3
   190d0:	andeq	r9, r1, r8, asr #3
   190d4:	andeq	r9, r1, r8, asr #3
   190d8:	andeq	r9, r1, r8, asr #3
   190dc:	andeq	r9, r1, r8, asr #3
   190e0:	andeq	r9, r1, r8, asr #3
   190e4:	andeq	r9, r1, r8, ror #1
   190e8:	mov	r0, sp
   190ec:	bl	1ab98 <__assert_fail@plt+0x9344>
   190f0:	cmp	r0, #0
   190f4:	bne	191d8 <__assert_fail@plt+0x7984>
   190f8:	cmp	r7, #0
   190fc:	blt	19130 <__assert_fail@plt+0x78dc>
   19100:	ldr	r0, [sp]
   19104:	cmp	r0, r7
   19108:	bne	19130 <__assert_fail@plt+0x78dc>
   1910c:	mov	r0, sp
   19110:	bl	1ac10 <__assert_fail@plt+0x93bc>
   19114:	bl	116d4 <__errno_location@plt>
   19118:	mov	r1, #9
   1911c:	mvn	r9, #0
   19120:	str	r1, [r0]
   19124:	mov	r0, r9
   19128:	sub	sp, fp, #28
   1912c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19130:	mov	r0, r7
   19134:	bl	117b8 <fchdir@plt>
   19138:	cmp	r0, #0
   1913c:	beq	19168 <__assert_fail@plt+0x7914>
   19140:	bl	116d4 <__errno_location@plt>
   19144:	ldr	r5, [r0]
   19148:	mov	r4, r0
   1914c:	mov	r0, sp
   19150:	bl	1ac10 <__assert_fail@plt+0x93bc>
   19154:	str	r5, [r4]
   19158:	mvn	r9, #0
   1915c:	mov	r0, r9
   19160:	sub	sp, fp, #28
   19164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19168:	mov	r0, r5
   1916c:	mov	r1, r4
   19170:	bl	11734 <setfilecon@plt>
   19174:	mov	r9, r0
   19178:	mov	r4, #0
   1917c:	cmn	r0, #1
   19180:	bne	1918c <__assert_fail@plt+0x7938>
   19184:	bl	116d4 <__errno_location@plt>
   19188:	ldr	r4, [r0]
   1918c:	mov	r0, sp
   19190:	bl	1abf4 <__assert_fail@plt+0x93a0>
   19194:	cmp	r0, #0
   19198:	bne	191e4 <__assert_fail@plt+0x7990>
   1919c:	mov	r0, sp
   191a0:	bl	1ac10 <__assert_fail@plt+0x93bc>
   191a4:	cmp	r4, #0
   191a8:	beq	191b4 <__assert_fail@plt+0x7960>
   191ac:	bl	116d4 <__errno_location@plt>
   191b0:	str	r4, [r0]
   191b4:	mov	r0, r9
   191b8:	sub	sp, fp, #28
   191bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191c0:	cmp	r2, #95	; 0x5f
   191c4:	beq	190e8 <__assert_fail@plt+0x7894>
   191c8:	str	r2, [r8]
   191cc:	mov	r0, r9
   191d0:	sub	sp, fp, #28
   191d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191d8:	bl	116d4 <__errno_location@plt>
   191dc:	ldr	r0, [r0]
   191e0:	bl	1aadc <__assert_fail@plt+0x9288>
   191e4:	bl	116d4 <__errno_location@plt>
   191e8:	ldr	r0, [r0]
   191ec:	bl	1ab1c <__assert_fail@plt+0x92c8>
   191f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191f4:	add	fp, sp, #28
   191f8:	sub	sp, sp, #964	; 0x3c4
   191fc:	sub	sp, sp, #3072	; 0xc00
   19200:	mov	r4, r2
   19204:	mov	r5, r1
   19208:	cmn	r0, #100	; 0x64
   1920c:	beq	19220 <__assert_fail@plt+0x79cc>
   19210:	mov	r7, r0
   19214:	ldrb	r0, [r5]
   19218:	cmp	r0, #47	; 0x2f
   1921c:	bne	19234 <__assert_fail@plt+0x79e0>
   19220:	mov	r0, r5
   19224:	mov	r1, r4
   19228:	sub	sp, fp, #28
   1922c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19230:	b	114dc <lsetfilecon@plt>
   19234:	mov	sl, sp
   19238:	mov	r1, r7
   1923c:	mov	r2, r5
   19240:	mov	r0, sl
   19244:	bl	1a398 <__assert_fail@plt+0x8b44>
   19248:	cmp	r0, #0
   1924c:	beq	19338 <__assert_fail@plt+0x7ae4>
   19250:	mov	r1, r4
   19254:	mov	r6, r0
   19258:	bl	114dc <lsetfilecon@plt>
   1925c:	mov	r9, r0
   19260:	bl	116d4 <__errno_location@plt>
   19264:	ldr	r2, [r0]
   19268:	mov	r8, r0
   1926c:	cmp	r6, sl
   19270:	beq	19284 <__assert_fail@plt+0x7a30>
   19274:	mov	r0, r6
   19278:	mov	r6, r2
   1927c:	bl	1a978 <__assert_fail@plt+0x9124>
   19280:	mov	r2, r6
   19284:	cmn	r9, #1
   19288:	bne	19404 <__assert_fail@plt+0x7bb0>
   1928c:	sub	r0, r2, #1
   19290:	cmp	r0, #37	; 0x25
   19294:	bhi	19410 <__assert_fail@plt+0x7bbc>
   19298:	add	r1, pc, #0
   1929c:	ldr	pc, [r1, r0, lsl #2]
   192a0:	andeq	r9, r1, r8, lsr r3
   192a4:	andeq	r9, r1, r8, lsr r3
   192a8:	andeq	r9, r1, r8, lsl r4
   192ac:	andeq	r9, r1, r8, lsl r4
   192b0:	andeq	r9, r1, r8, lsl r4
   192b4:	andeq	r9, r1, r8, lsl r4
   192b8:	andeq	r9, r1, r8, lsl r4
   192bc:	andeq	r9, r1, r8, lsl r4
   192c0:	andeq	r9, r1, r8, lsl r4
   192c4:	andeq	r9, r1, r8, lsl r4
   192c8:	andeq	r9, r1, r8, lsl r4
   192cc:	andeq	r9, r1, r8, lsl r4
   192d0:	andeq	r9, r1, r8, lsr r3
   192d4:	andeq	r9, r1, r8, lsl r4
   192d8:	andeq	r9, r1, r8, lsl r4
   192dc:	andeq	r9, r1, r8, lsl r4
   192e0:	andeq	r9, r1, r8, lsl r4
   192e4:	andeq	r9, r1, r8, lsl r4
   192e8:	andeq	r9, r1, r8, lsl r4
   192ec:	andeq	r9, r1, r8, lsr r3
   192f0:	andeq	r9, r1, r8, lsl r4
   192f4:	andeq	r9, r1, r8, lsl r4
   192f8:	andeq	r9, r1, r8, lsl r4
   192fc:	andeq	r9, r1, r8, lsl r4
   19300:	andeq	r9, r1, r8, lsl r4
   19304:	andeq	r9, r1, r8, lsl r4
   19308:	andeq	r9, r1, r8, lsl r4
   1930c:	andeq	r9, r1, r8, lsl r4
   19310:	andeq	r9, r1, r8, lsl r4
   19314:	andeq	r9, r1, r8, lsl r4
   19318:	andeq	r9, r1, r8, lsl r4
   1931c:	andeq	r9, r1, r8, lsl r4
   19320:	andeq	r9, r1, r8, lsl r4
   19324:	andeq	r9, r1, r8, lsl r4
   19328:	andeq	r9, r1, r8, lsl r4
   1932c:	andeq	r9, r1, r8, lsl r4
   19330:	andeq	r9, r1, r8, lsl r4
   19334:	andeq	r9, r1, r8, lsr r3
   19338:	mov	r0, sp
   1933c:	bl	1ab98 <__assert_fail@plt+0x9344>
   19340:	cmp	r0, #0
   19344:	bne	19428 <__assert_fail@plt+0x7bd4>
   19348:	cmp	r7, #0
   1934c:	blt	19380 <__assert_fail@plt+0x7b2c>
   19350:	ldr	r0, [sp]
   19354:	cmp	r0, r7
   19358:	bne	19380 <__assert_fail@plt+0x7b2c>
   1935c:	mov	r0, sp
   19360:	bl	1ac10 <__assert_fail@plt+0x93bc>
   19364:	bl	116d4 <__errno_location@plt>
   19368:	mov	r1, #9
   1936c:	mvn	r9, #0
   19370:	str	r1, [r0]
   19374:	mov	r0, r9
   19378:	sub	sp, fp, #28
   1937c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19380:	mov	r0, r7
   19384:	bl	117b8 <fchdir@plt>
   19388:	cmp	r0, #0
   1938c:	beq	193b8 <__assert_fail@plt+0x7b64>
   19390:	bl	116d4 <__errno_location@plt>
   19394:	ldr	r5, [r0]
   19398:	mov	r4, r0
   1939c:	mov	r0, sp
   193a0:	bl	1ac10 <__assert_fail@plt+0x93bc>
   193a4:	str	r5, [r4]
   193a8:	mvn	r9, #0
   193ac:	mov	r0, r9
   193b0:	sub	sp, fp, #28
   193b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193b8:	mov	r0, r5
   193bc:	mov	r1, r4
   193c0:	bl	114dc <lsetfilecon@plt>
   193c4:	mov	r9, r0
   193c8:	mov	r4, #0
   193cc:	cmn	r0, #1
   193d0:	bne	193dc <__assert_fail@plt+0x7b88>
   193d4:	bl	116d4 <__errno_location@plt>
   193d8:	ldr	r4, [r0]
   193dc:	mov	r0, sp
   193e0:	bl	1abf4 <__assert_fail@plt+0x93a0>
   193e4:	cmp	r0, #0
   193e8:	bne	19434 <__assert_fail@plt+0x7be0>
   193ec:	mov	r0, sp
   193f0:	bl	1ac10 <__assert_fail@plt+0x93bc>
   193f4:	cmp	r4, #0
   193f8:	beq	19404 <__assert_fail@plt+0x7bb0>
   193fc:	bl	116d4 <__errno_location@plt>
   19400:	str	r4, [r0]
   19404:	mov	r0, r9
   19408:	sub	sp, fp, #28
   1940c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19410:	cmp	r2, #95	; 0x5f
   19414:	beq	19338 <__assert_fail@plt+0x7ae4>
   19418:	str	r2, [r8]
   1941c:	mov	r0, r9
   19420:	sub	sp, fp, #28
   19424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19428:	bl	116d4 <__errno_location@plt>
   1942c:	ldr	r0, [r0]
   19430:	bl	1aadc <__assert_fail@plt+0x9288>
   19434:	bl	116d4 <__errno_location@plt>
   19438:	ldr	r0, [r0]
   1943c:	bl	1ab1c <__assert_fail@plt+0x92c8>
   19440:	push	{r4, r5, fp, lr}
   19444:	add	fp, sp, #8
   19448:	mov	r4, r1
   1944c:	bl	116a4 <getfilecon@plt>
   19450:	cmp	r0, #10
   19454:	beq	1946c <__assert_fail@plt+0x7c18>
   19458:	cmp	r0, #0
   1945c:	bne	194b0 <__assert_fail@plt+0x7c5c>
   19460:	bl	116d4 <__errno_location@plt>
   19464:	mov	r1, #95	; 0x5f
   19468:	b	194a8 <__assert_fail@plt+0x7c54>
   1946c:	ldr	r5, [r4]
   19470:	movw	r1, #49820	; 0xc29c
   19474:	movt	r1, #1
   19478:	mov	r0, r5
   1947c:	bl	114c4 <strcmp@plt>
   19480:	mov	r1, r0
   19484:	mov	r0, #10
   19488:	cmp	r1, #0
   1948c:	popne	{r4, r5, fp, pc}
   19490:	mov	r0, r5
   19494:	bl	117d0 <freecon@plt>
   19498:	mov	r0, #0
   1949c:	str	r0, [r4]
   194a0:	bl	116d4 <__errno_location@plt>
   194a4:	mov	r1, #61	; 0x3d
   194a8:	str	r1, [r0]
   194ac:	mvn	r0, #0
   194b0:	pop	{r4, r5, fp, pc}
   194b4:	push	{r4, r5, fp, lr}
   194b8:	add	fp, sp, #8
   194bc:	mov	r4, r1
   194c0:	bl	11620 <lgetfilecon@plt>
   194c4:	cmp	r0, #10
   194c8:	beq	194e0 <__assert_fail@plt+0x7c8c>
   194cc:	cmp	r0, #0
   194d0:	bne	19524 <__assert_fail@plt+0x7cd0>
   194d4:	bl	116d4 <__errno_location@plt>
   194d8:	mov	r1, #95	; 0x5f
   194dc:	b	1951c <__assert_fail@plt+0x7cc8>
   194e0:	ldr	r5, [r4]
   194e4:	movw	r1, #49820	; 0xc29c
   194e8:	movt	r1, #1
   194ec:	mov	r0, r5
   194f0:	bl	114c4 <strcmp@plt>
   194f4:	mov	r1, r0
   194f8:	mov	r0, #10
   194fc:	cmp	r1, #0
   19500:	popne	{r4, r5, fp, pc}
   19504:	mov	r0, r5
   19508:	bl	117d0 <freecon@plt>
   1950c:	mov	r0, #0
   19510:	str	r0, [r4]
   19514:	bl	116d4 <__errno_location@plt>
   19518:	mov	r1, #61	; 0x3d
   1951c:	str	r1, [r0]
   19520:	mvn	r0, #0
   19524:	pop	{r4, r5, fp, pc}
   19528:	push	{r4, r5, fp, lr}
   1952c:	add	fp, sp, #8
   19530:	mov	r4, r1
   19534:	bl	1156c <fgetfilecon@plt>
   19538:	cmp	r0, #10
   1953c:	beq	19554 <__assert_fail@plt+0x7d00>
   19540:	cmp	r0, #0
   19544:	bne	19598 <__assert_fail@plt+0x7d44>
   19548:	bl	116d4 <__errno_location@plt>
   1954c:	mov	r1, #95	; 0x5f
   19550:	b	19590 <__assert_fail@plt+0x7d3c>
   19554:	ldr	r5, [r4]
   19558:	movw	r1, #49820	; 0xc29c
   1955c:	movt	r1, #1
   19560:	mov	r0, r5
   19564:	bl	114c4 <strcmp@plt>
   19568:	mov	r1, r0
   1956c:	mov	r0, #10
   19570:	cmp	r1, #0
   19574:	popne	{r4, r5, fp, pc}
   19578:	mov	r0, r5
   1957c:	bl	117d0 <freecon@plt>
   19580:	mov	r0, #0
   19584:	str	r0, [r4]
   19588:	bl	116d4 <__errno_location@plt>
   1958c:	mov	r1, #61	; 0x3d
   19590:	str	r1, [r0]
   19594:	mvn	r0, #0
   19598:	pop	{r4, r5, fp, pc}
   1959c:	push	{r4, r5, r6, r7, fp, lr}
   195a0:	add	fp, sp, #16
   195a4:	mov	r4, r0
   195a8:	cmp	r0, #2
   195ac:	movhi	r0, r4
   195b0:	pophi	{r4, r5, r6, r7, fp, pc}
   195b4:	mov	r0, r4
   195b8:	bl	1ac38 <__assert_fail@plt+0x93e4>
   195bc:	mov	r5, r0
   195c0:	bl	116d4 <__errno_location@plt>
   195c4:	ldr	r7, [r0]
   195c8:	mov	r6, r0
   195cc:	mov	r0, r4
   195d0:	bl	11824 <close@plt>
   195d4:	mov	r0, r5
   195d8:	str	r7, [r6]
   195dc:	pop	{r4, r5, r6, r7, fp, pc}
   195e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   195e4:	add	fp, sp, #24
   195e8:	sub	sp, sp, #32
   195ec:	ldr	r6, [fp, #12]
   195f0:	ldr	r7, [fp, #8]
   195f4:	mov	r4, r2
   195f8:	mov	r8, r0
   195fc:	cmp	r1, #0
   19600:	beq	19628 <__assert_fail@plt+0x7dd4>
   19604:	movw	r2, #49830	; 0xc2a6
   19608:	mov	r5, r1
   1960c:	str	r3, [sp, #4]
   19610:	str	r4, [sp]
   19614:	mov	r0, r8
   19618:	mov	r1, #1
   1961c:	movt	r2, #1
   19620:	mov	r3, r5
   19624:	b	19640 <__assert_fail@plt+0x7dec>
   19628:	movw	r2, #49842	; 0xc2b2
   1962c:	str	r3, [sp]
   19630:	mov	r0, r8
   19634:	mov	r1, #1
   19638:	mov	r3, r4
   1963c:	movt	r2, #1
   19640:	bl	1171c <__fprintf_chk@plt>
   19644:	movw	r1, #49849	; 0xc2b9
   19648:	mov	r0, #0
   1964c:	mov	r2, #5
   19650:	movt	r1, #1
   19654:	bl	11548 <dcgettext@plt>
   19658:	movw	r2, #50567	; 0xc587
   1965c:	mov	r3, r0
   19660:	movw	r0, #2022	; 0x7e6
   19664:	mov	r1, #1
   19668:	str	r0, [sp]
   1966c:	movt	r2, #1
   19670:	mov	r0, r8
   19674:	bl	1171c <__fprintf_chk@plt>
   19678:	movw	r4, #47546	; 0xb9ba
   1967c:	mov	r1, r8
   19680:	movt	r4, #1
   19684:	mov	r0, r4
   19688:	bl	114a0 <fputs_unlocked@plt>
   1968c:	movw	r1, #49853	; 0xc2bd
   19690:	mov	r0, #0
   19694:	mov	r2, #5
   19698:	movt	r1, #1
   1969c:	bl	11548 <dcgettext@plt>
   196a0:	movw	r3, #50024	; 0xc368
   196a4:	mov	r2, r0
   196a8:	mov	r0, r8
   196ac:	mov	r1, #1
   196b0:	movt	r3, #1
   196b4:	bl	1171c <__fprintf_chk@plt>
   196b8:	mov	r0, r4
   196bc:	mov	r1, r8
   196c0:	bl	114a0 <fputs_unlocked@plt>
   196c4:	cmp	r6, #9
   196c8:	bhi	19704 <__assert_fail@plt+0x7eb0>
   196cc:	add	r0, pc, #0
   196d0:	ldr	pc, [r0, r6, lsl #2]
   196d4:	strdeq	r9, [r1], -ip
   196d8:	andeq	r9, r1, r0, lsl r7
   196dc:	andeq	r9, r1, r0, asr #14
   196e0:	andeq	r9, r1, r8, ror #14
   196e4:	muleq	r1, r0, r7
   196e8:			; <UNDEFINED> instruction: 0x000197b8
   196ec:	andeq	r9, r1, r0, ror #15
   196f0:	andeq	r9, r1, r8, lsl r8
   196f4:	andeq	r9, r1, r0, asr #17
   196f8:	andeq	r9, r1, r8, ror #16
   196fc:	sub	sp, fp, #24
   19700:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19704:	movw	r1, #50377	; 0xc4c9
   19708:	movt	r1, #1
   1970c:	b	19870 <__assert_fail@plt+0x801c>
   19710:	movw	r1, #50058	; 0xc38a
   19714:	mov	r0, #0
   19718:	mov	r2, #5
   1971c:	movt	r1, #1
   19720:	bl	11548 <dcgettext@plt>
   19724:	ldr	r3, [r7]
   19728:	mov	r2, r0
   1972c:	mov	r0, r8
   19730:	mov	r1, #1
   19734:	sub	sp, fp, #24
   19738:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1973c:	b	1171c <__fprintf_chk@plt>
   19740:	movw	r1, #50074	; 0xc39a
   19744:	mov	r0, #0
   19748:	mov	r2, #5
   1974c:	movt	r1, #1
   19750:	bl	11548 <dcgettext@plt>
   19754:	mov	r2, r0
   19758:	ldr	r3, [r7]
   1975c:	ldr	r0, [r7, #4]
   19760:	str	r0, [sp]
   19764:	b	19854 <__assert_fail@plt+0x8000>
   19768:	movw	r1, #50097	; 0xc3b1
   1976c:	mov	r0, #0
   19770:	mov	r2, #5
   19774:	movt	r1, #1
   19778:	bl	11548 <dcgettext@plt>
   1977c:	ldr	r3, [r7]
   19780:	mov	r2, r0
   19784:	ldmib	r7, {r0, r1}
   19788:	stm	sp, {r0, r1}
   1978c:	b	19854 <__assert_fail@plt+0x8000>
   19790:	movw	r1, #50125	; 0xc3cd
   19794:	mov	r0, #0
   19798:	mov	r2, #5
   1979c:	movt	r1, #1
   197a0:	bl	11548 <dcgettext@plt>
   197a4:	ldr	r3, [r7]
   197a8:	mov	r2, r0
   197ac:	ldmib	r7, {r0, r1, r7}
   197b0:	stm	sp, {r0, r1, r7}
   197b4:	b	19854 <__assert_fail@plt+0x8000>
   197b8:	movw	r1, #50157	; 0xc3ed
   197bc:	mov	r0, #0
   197c0:	mov	r2, #5
   197c4:	movt	r1, #1
   197c8:	bl	11548 <dcgettext@plt>
   197cc:	ldr	r3, [r7]
   197d0:	mov	r2, r0
   197d4:	ldmib	r7, {r0, r1, r6, r7}
   197d8:	stm	sp, {r0, r1, r6, r7}
   197dc:	b	19854 <__assert_fail@plt+0x8000>
   197e0:	movw	r1, #50193	; 0xc411
   197e4:	mov	r0, #0
   197e8:	mov	r2, #5
   197ec:	movt	r1, #1
   197f0:	bl	11548 <dcgettext@plt>
   197f4:	ldr	r3, [r7]
   197f8:	mov	r2, r0
   197fc:	ldmib	r7, {r0, r1, r6}
   19800:	ldr	r5, [r7, #16]
   19804:	ldr	r7, [r7, #20]
   19808:	stm	sp, {r0, r1, r6}
   1980c:	str	r5, [sp, #12]
   19810:	str	r7, [sp, #16]
   19814:	b	19854 <__assert_fail@plt+0x8000>
   19818:	movw	r1, #50233	; 0xc439
   1981c:	mov	r0, #0
   19820:	mov	r2, #5
   19824:	movt	r1, #1
   19828:	bl	11548 <dcgettext@plt>
   1982c:	ldr	r3, [r7]
   19830:	mov	r2, r0
   19834:	ldmib	r7, {r0, r1, r6}
   19838:	ldr	r5, [r7, #16]
   1983c:	ldr	r4, [r7, #20]
   19840:	ldr	r7, [r7, #24]
   19844:	stm	sp, {r0, r1, r6}
   19848:	str	r5, [sp, #12]
   1984c:	str	r4, [sp, #16]
   19850:	str	r7, [sp, #20]
   19854:	mov	r0, r8
   19858:	mov	r1, #1
   1985c:	bl	1171c <__fprintf_chk@plt>
   19860:	sub	sp, fp, #24
   19864:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19868:	movw	r1, #50325	; 0xc495
   1986c:	movt	r1, #1
   19870:	mov	r0, #0
   19874:	mov	r2, #5
   19878:	bl	11548 <dcgettext@plt>
   1987c:	mov	ip, r0
   19880:	ldr	r3, [r7]
   19884:	ldr	r0, [r7, #4]
   19888:	ldr	r1, [r7, #8]
   1988c:	ldr	r6, [r7, #12]
   19890:	ldr	r5, [r7, #16]
   19894:	ldr	r4, [r7, #20]
   19898:	ldr	r2, [r7, #24]
   1989c:	ldr	lr, [r7, #28]
   198a0:	ldr	r7, [r7, #32]
   198a4:	stm	sp, {r0, r1, r6}
   198a8:	str	r5, [sp, #12]
   198ac:	str	r4, [sp, #16]
   198b0:	str	r2, [sp, #20]
   198b4:	str	lr, [sp, #24]
   198b8:	str	r7, [sp, #28]
   198bc:	b	19904 <__assert_fail@plt+0x80b0>
   198c0:	movw	r1, #50277	; 0xc465
   198c4:	mov	r0, #0
   198c8:	mov	r2, #5
   198cc:	movt	r1, #1
   198d0:	bl	11548 <dcgettext@plt>
   198d4:	mov	ip, r0
   198d8:	ldr	r3, [r7]
   198dc:	ldmib	r7, {r0, r1, r6}
   198e0:	ldr	r5, [r7, #16]
   198e4:	ldr	r4, [r7, #20]
   198e8:	ldr	r2, [r7, #24]
   198ec:	ldr	r7, [r7, #28]
   198f0:	stm	sp, {r0, r1, r6}
   198f4:	str	r5, [sp, #12]
   198f8:	str	r4, [sp, #16]
   198fc:	str	r2, [sp, #20]
   19900:	str	r7, [sp, #24]
   19904:	mov	r0, r8
   19908:	mov	r1, #1
   1990c:	mov	r2, ip
   19910:	bl	1171c <__fprintf_chk@plt>
   19914:	sub	sp, fp, #24
   19918:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1991c:	push	{r4, sl, fp, lr}
   19920:	add	fp, sp, #8
   19924:	sub	sp, sp, #8
   19928:	ldr	ip, [fp, #8]
   1992c:	mov	lr, #0
   19930:	ldr	r4, [ip, lr, lsl #2]
   19934:	add	lr, lr, #1
   19938:	cmp	r4, #0
   1993c:	bne	19930 <__assert_fail@plt+0x80dc>
   19940:	sub	r4, lr, #1
   19944:	str	ip, [sp]
   19948:	str	r4, [sp, #4]
   1994c:	bl	195e0 <__assert_fail@plt+0x7d8c>
   19950:	sub	sp, fp, #8
   19954:	pop	{r4, sl, fp, pc}
   19958:	push	{fp, lr}
   1995c:	mov	fp, sp
   19960:	sub	sp, sp, #48	; 0x30
   19964:	ldr	ip, [fp, #8]
   19968:	ldr	lr, [ip]
   1996c:	cmp	lr, #0
   19970:	str	lr, [sp, #8]
   19974:	beq	19a10 <__assert_fail@plt+0x81bc>
   19978:	ldr	lr, [ip, #4]
   1997c:	cmp	lr, #0
   19980:	str	lr, [sp, #12]
   19984:	beq	19a18 <__assert_fail@plt+0x81c4>
   19988:	ldr	lr, [ip, #8]
   1998c:	cmp	lr, #0
   19990:	str	lr, [sp, #16]
   19994:	beq	19a20 <__assert_fail@plt+0x81cc>
   19998:	ldr	lr, [ip, #12]
   1999c:	cmp	lr, #0
   199a0:	str	lr, [sp, #20]
   199a4:	beq	19a28 <__assert_fail@plt+0x81d4>
   199a8:	ldr	lr, [ip, #16]
   199ac:	cmp	lr, #0
   199b0:	str	lr, [sp, #24]
   199b4:	beq	19a30 <__assert_fail@plt+0x81dc>
   199b8:	ldr	lr, [ip, #20]
   199bc:	cmp	lr, #0
   199c0:	str	lr, [sp, #28]
   199c4:	beq	19a38 <__assert_fail@plt+0x81e4>
   199c8:	ldr	lr, [ip, #24]
   199cc:	cmp	lr, #0
   199d0:	str	lr, [sp, #32]
   199d4:	beq	19a40 <__assert_fail@plt+0x81ec>
   199d8:	ldr	lr, [ip, #28]
   199dc:	cmp	lr, #0
   199e0:	str	lr, [sp, #36]	; 0x24
   199e4:	beq	19a48 <__assert_fail@plt+0x81f4>
   199e8:	ldr	lr, [ip, #32]
   199ec:	cmp	lr, #0
   199f0:	str	lr, [sp, #40]	; 0x28
   199f4:	beq	19a50 <__assert_fail@plt+0x81fc>
   199f8:	ldr	lr, [ip, #36]	; 0x24
   199fc:	mov	ip, #10
   19a00:	cmp	lr, #0
   19a04:	str	lr, [sp, #44]	; 0x2c
   19a08:	movweq	ip, #9
   19a0c:	b	19a54 <__assert_fail@plt+0x8200>
   19a10:	mov	ip, #0
   19a14:	b	19a54 <__assert_fail@plt+0x8200>
   19a18:	mov	ip, #1
   19a1c:	b	19a54 <__assert_fail@plt+0x8200>
   19a20:	mov	ip, #2
   19a24:	b	19a54 <__assert_fail@plt+0x8200>
   19a28:	mov	ip, #3
   19a2c:	b	19a54 <__assert_fail@plt+0x8200>
   19a30:	mov	ip, #4
   19a34:	b	19a54 <__assert_fail@plt+0x8200>
   19a38:	mov	ip, #5
   19a3c:	b	19a54 <__assert_fail@plt+0x8200>
   19a40:	mov	ip, #6
   19a44:	b	19a54 <__assert_fail@plt+0x8200>
   19a48:	mov	ip, #7
   19a4c:	b	19a54 <__assert_fail@plt+0x8200>
   19a50:	mov	ip, #8
   19a54:	add	lr, sp, #8
   19a58:	str	ip, [sp, #4]
   19a5c:	str	lr, [sp]
   19a60:	bl	195e0 <__assert_fail@plt+0x7d8c>
   19a64:	mov	sp, fp
   19a68:	pop	{fp, pc}
   19a6c:	push	{fp, lr}
   19a70:	mov	fp, sp
   19a74:	sub	sp, sp, #56	; 0x38
   19a78:	add	ip, fp, #8
   19a7c:	str	ip, [sp, #12]
   19a80:	ldr	lr, [fp, #8]
   19a84:	cmp	lr, #0
   19a88:	str	lr, [sp, #16]
   19a8c:	beq	19b28 <__assert_fail@plt+0x82d4>
   19a90:	ldr	lr, [ip, #4]
   19a94:	cmp	lr, #0
   19a98:	str	lr, [sp, #20]
   19a9c:	beq	19b30 <__assert_fail@plt+0x82dc>
   19aa0:	ldr	lr, [ip, #8]
   19aa4:	cmp	lr, #0
   19aa8:	str	lr, [sp, #24]
   19aac:	beq	19b38 <__assert_fail@plt+0x82e4>
   19ab0:	ldr	lr, [ip, #12]
   19ab4:	cmp	lr, #0
   19ab8:	str	lr, [sp, #28]
   19abc:	beq	19b40 <__assert_fail@plt+0x82ec>
   19ac0:	ldr	lr, [ip, #16]
   19ac4:	cmp	lr, #0
   19ac8:	str	lr, [sp, #32]
   19acc:	beq	19b48 <__assert_fail@plt+0x82f4>
   19ad0:	ldr	lr, [ip, #20]
   19ad4:	cmp	lr, #0
   19ad8:	str	lr, [sp, #36]	; 0x24
   19adc:	beq	19b50 <__assert_fail@plt+0x82fc>
   19ae0:	ldr	lr, [ip, #24]
   19ae4:	cmp	lr, #0
   19ae8:	str	lr, [sp, #40]	; 0x28
   19aec:	beq	19b58 <__assert_fail@plt+0x8304>
   19af0:	ldr	lr, [ip, #28]
   19af4:	cmp	lr, #0
   19af8:	str	lr, [sp, #44]	; 0x2c
   19afc:	beq	19b60 <__assert_fail@plt+0x830c>
   19b00:	ldr	lr, [ip, #32]
   19b04:	cmp	lr, #0
   19b08:	str	lr, [sp, #48]	; 0x30
   19b0c:	beq	19b68 <__assert_fail@plt+0x8314>
   19b10:	ldr	lr, [ip, #36]	; 0x24
   19b14:	mov	ip, #10
   19b18:	cmp	lr, #0
   19b1c:	str	lr, [sp, #52]	; 0x34
   19b20:	movweq	ip, #9
   19b24:	b	19b6c <__assert_fail@plt+0x8318>
   19b28:	mov	ip, #0
   19b2c:	b	19b6c <__assert_fail@plt+0x8318>
   19b30:	mov	ip, #1
   19b34:	b	19b6c <__assert_fail@plt+0x8318>
   19b38:	mov	ip, #2
   19b3c:	b	19b6c <__assert_fail@plt+0x8318>
   19b40:	mov	ip, #3
   19b44:	b	19b6c <__assert_fail@plt+0x8318>
   19b48:	mov	ip, #4
   19b4c:	b	19b6c <__assert_fail@plt+0x8318>
   19b50:	mov	ip, #5
   19b54:	b	19b6c <__assert_fail@plt+0x8318>
   19b58:	mov	ip, #6
   19b5c:	b	19b6c <__assert_fail@plt+0x8318>
   19b60:	mov	ip, #7
   19b64:	b	19b6c <__assert_fail@plt+0x8318>
   19b68:	mov	ip, #8
   19b6c:	add	lr, sp, #16
   19b70:	str	ip, [sp, #4]
   19b74:	str	lr, [sp]
   19b78:	bl	195e0 <__assert_fail@plt+0x7d8c>
   19b7c:	mov	sp, fp
   19b80:	pop	{fp, pc}
   19b84:	push	{fp, lr}
   19b88:	mov	fp, sp
   19b8c:	movw	r0, #53692	; 0xd1bc
   19b90:	movt	r0, #2
   19b94:	ldr	r1, [r0]
   19b98:	movw	r0, #47546	; 0xb9ba
   19b9c:	movt	r0, #1
   19ba0:	bl	114a0 <fputs_unlocked@plt>
   19ba4:	movw	r1, #50437	; 0xc505
   19ba8:	mov	r0, #0
   19bac:	mov	r2, #5
   19bb0:	movt	r1, #1
   19bb4:	bl	11548 <dcgettext@plt>
   19bb8:	movw	r2, #50457	; 0xc519
   19bbc:	mov	r1, r0
   19bc0:	mov	r0, #1
   19bc4:	movt	r2, #1
   19bc8:	bl	11704 <__printf_chk@plt>
   19bcc:	movw	r1, #50479	; 0xc52f
   19bd0:	mov	r0, #0
   19bd4:	mov	r2, #5
   19bd8:	movt	r1, #1
   19bdc:	bl	11548 <dcgettext@plt>
   19be0:	movw	r2, #47692	; 0xba4c
   19be4:	movw	r3, #48161	; 0xbc21
   19be8:	mov	r1, r0
   19bec:	mov	r0, #1
   19bf0:	movt	r2, #1
   19bf4:	movt	r3, #1
   19bf8:	bl	11704 <__printf_chk@plt>
   19bfc:	movw	r1, #50499	; 0xc543
   19c00:	mov	r0, #0
   19c04:	mov	r2, #5
   19c08:	movt	r1, #1
   19c0c:	bl	11548 <dcgettext@plt>
   19c10:	movw	r2, #50538	; 0xc56a
   19c14:	mov	r1, r0
   19c18:	mov	r0, #1
   19c1c:	movt	r2, #1
   19c20:	pop	{fp, lr}
   19c24:	b	11704 <__printf_chk@plt>
   19c28:	push	{r4, r5, r6, sl, fp, lr}
   19c2c:	add	fp, sp, #16
   19c30:	mov	r4, r2
   19c34:	mov	r5, r1
   19c38:	mov	r6, r0
   19c3c:	bl	1ab5c <__assert_fail@plt+0x9308>
   19c40:	cmp	r0, #0
   19c44:	popne	{r4, r5, r6, sl, fp, pc}
   19c48:	cmp	r6, #0
   19c4c:	beq	19c60 <__assert_fail@plt+0x840c>
   19c50:	cmp	r5, #0
   19c54:	cmpne	r4, #0
   19c58:	bne	19c60 <__assert_fail@plt+0x840c>
   19c5c:	pop	{r4, r5, r6, sl, fp, pc}
   19c60:	bl	1a200 <__assert_fail@plt+0x89ac>
   19c64:	push	{r4, r5, r6, sl, fp, lr}
   19c68:	add	fp, sp, #16
   19c6c:	mov	r4, r2
   19c70:	mov	r5, r1
   19c74:	mov	r6, r0
   19c78:	bl	1ab5c <__assert_fail@plt+0x9308>
   19c7c:	cmp	r0, #0
   19c80:	popne	{r4, r5, r6, sl, fp, pc}
   19c84:	cmp	r6, #0
   19c88:	beq	19c9c <__assert_fail@plt+0x8448>
   19c8c:	cmp	r5, #0
   19c90:	cmpne	r4, #0
   19c94:	bne	19c9c <__assert_fail@plt+0x8448>
   19c98:	pop	{r4, r5, r6, sl, fp, pc}
   19c9c:	bl	1a200 <__assert_fail@plt+0x89ac>
   19ca0:	push	{fp, lr}
   19ca4:	mov	fp, sp
   19ca8:	bl	1a314 <__assert_fail@plt+0x8ac0>
   19cac:	cmp	r0, #0
   19cb0:	popne	{fp, pc}
   19cb4:	bl	1a200 <__assert_fail@plt+0x89ac>
   19cb8:	push	{fp, lr}
   19cbc:	mov	fp, sp
   19cc0:	bl	1a314 <__assert_fail@plt+0x8ac0>
   19cc4:	cmp	r0, #0
   19cc8:	popne	{fp, pc}
   19ccc:	bl	1a200 <__assert_fail@plt+0x89ac>
   19cd0:	push	{fp, lr}
   19cd4:	mov	fp, sp
   19cd8:	bl	1a314 <__assert_fail@plt+0x8ac0>
   19cdc:	cmp	r0, #0
   19ce0:	popne	{fp, pc}
   19ce4:	bl	1a200 <__assert_fail@plt+0x89ac>
   19ce8:	push	{r4, r5, fp, lr}
   19cec:	add	fp, sp, #8
   19cf0:	mov	r4, r1
   19cf4:	mov	r5, r0
   19cf8:	bl	1a344 <__assert_fail@plt+0x8af0>
   19cfc:	cmp	r0, #0
   19d00:	popne	{r4, r5, fp, pc}
   19d04:	cmp	r5, #0
   19d08:	beq	19d18 <__assert_fail@plt+0x84c4>
   19d0c:	cmp	r4, #0
   19d10:	bne	19d18 <__assert_fail@plt+0x84c4>
   19d14:	pop	{r4, r5, fp, pc}
   19d18:	bl	1a200 <__assert_fail@plt+0x89ac>
   19d1c:	push	{fp, lr}
   19d20:	mov	fp, sp
   19d24:	cmp	r1, #0
   19d28:	orreq	r1, r1, #1
   19d2c:	bl	1a344 <__assert_fail@plt+0x8af0>
   19d30:	cmp	r0, #0
   19d34:	popne	{fp, pc}
   19d38:	bl	1a200 <__assert_fail@plt+0x89ac>
   19d3c:	push	{fp, lr}
   19d40:	mov	fp, sp
   19d44:	clz	r3, r2
   19d48:	lsr	ip, r3, #5
   19d4c:	clz	r3, r1
   19d50:	lsr	r3, r3, #5
   19d54:	orrs	r3, r3, ip
   19d58:	movwne	r1, #1
   19d5c:	movwne	r2, #1
   19d60:	bl	1ab5c <__assert_fail@plt+0x9308>
   19d64:	cmp	r0, #0
   19d68:	popne	{fp, pc}
   19d6c:	bl	1a200 <__assert_fail@plt+0x89ac>
   19d70:	push	{fp, lr}
   19d74:	mov	fp, sp
   19d78:	mov	r2, r1
   19d7c:	mov	r1, r0
   19d80:	mov	r0, #0
   19d84:	bl	1ab5c <__assert_fail@plt+0x9308>
   19d88:	cmp	r0, #0
   19d8c:	popne	{fp, pc}
   19d90:	bl	1a200 <__assert_fail@plt+0x89ac>
   19d94:	push	{fp, lr}
   19d98:	mov	fp, sp
   19d9c:	mov	r2, r1
   19da0:	mov	r1, r0
   19da4:	clz	r0, r2
   19da8:	clz	r3, r1
   19dac:	lsr	r0, r0, #5
   19db0:	lsr	r3, r3, #5
   19db4:	orrs	r0, r3, r0
   19db8:	movwne	r1, #1
   19dbc:	movwne	r2, #1
   19dc0:	mov	r0, #0
   19dc4:	bl	1ab5c <__assert_fail@plt+0x9308>
   19dc8:	cmp	r0, #0
   19dcc:	popne	{fp, pc}
   19dd0:	bl	1a200 <__assert_fail@plt+0x89ac>
   19dd4:	push	{r4, r5, r6, sl, fp, lr}
   19dd8:	add	fp, sp, #16
   19ddc:	ldr	r5, [r1]
   19de0:	mov	r4, r1
   19de4:	mov	r6, r0
   19de8:	cmp	r0, #0
   19dec:	beq	19e04 <__assert_fail@plt+0x85b0>
   19df0:	mov	r0, #1
   19df4:	add	r0, r0, r5, lsr #1
   19df8:	adds	r5, r5, r0
   19dfc:	bcc	19e0c <__assert_fail@plt+0x85b8>
   19e00:	b	19e48 <__assert_fail@plt+0x85f4>
   19e04:	cmp	r5, #0
   19e08:	movweq	r5, #64	; 0x40
   19e0c:	mov	r0, r6
   19e10:	mov	r1, r5
   19e14:	mov	r2, #1
   19e18:	bl	1ab5c <__assert_fail@plt+0x9308>
   19e1c:	cmp	r5, #0
   19e20:	mov	r1, r5
   19e24:	movwne	r1, #1
   19e28:	cmp	r0, #0
   19e2c:	bne	19e40 <__assert_fail@plt+0x85ec>
   19e30:	clz	r2, r6
   19e34:	lsr	r2, r2, #5
   19e38:	orrs	r1, r2, r1
   19e3c:	bne	19e48 <__assert_fail@plt+0x85f4>
   19e40:	str	r5, [r4]
   19e44:	pop	{r4, r5, r6, sl, fp, pc}
   19e48:	bl	1a200 <__assert_fail@plt+0x89ac>
   19e4c:	push	{r4, r5, r6, r7, fp, lr}
   19e50:	add	fp, sp, #16
   19e54:	ldr	r5, [r1]
   19e58:	mov	r6, r2
   19e5c:	mov	r4, r1
   19e60:	mov	r7, r0
   19e64:	cmp	r0, #0
   19e68:	beq	19e80 <__assert_fail@plt+0x862c>
   19e6c:	mov	r0, #1
   19e70:	add	r0, r0, r5, lsr #1
   19e74:	adds	r5, r5, r0
   19e78:	bcc	19e98 <__assert_fail@plt+0x8644>
   19e7c:	b	19ecc <__assert_fail@plt+0x8678>
   19e80:	cmp	r5, #0
   19e84:	bne	19e98 <__assert_fail@plt+0x8644>
   19e88:	mov	r0, #64	; 0x40
   19e8c:	cmp	r6, #64	; 0x40
   19e90:	udiv	r5, r0, r6
   19e94:	addhi	r5, r5, #1
   19e98:	mov	r0, r7
   19e9c:	mov	r1, r5
   19ea0:	mov	r2, r6
   19ea4:	bl	1ab5c <__assert_fail@plt+0x9308>
   19ea8:	cmp	r0, #0
   19eac:	bne	19ec4 <__assert_fail@plt+0x8670>
   19eb0:	cmp	r7, #0
   19eb4:	beq	19ecc <__assert_fail@plt+0x8678>
   19eb8:	cmp	r6, #0
   19ebc:	cmpne	r5, #0
   19ec0:	bne	19ecc <__assert_fail@plt+0x8678>
   19ec4:	str	r5, [r4]
   19ec8:	pop	{r4, r5, r6, r7, fp, pc}
   19ecc:	bl	1a200 <__assert_fail@plt+0x89ac>
   19ed0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19ed4:	add	fp, sp, #24
   19ed8:	mov	r8, r1
   19edc:	ldr	r1, [r1]
   19ee0:	mov	r5, r0
   19ee4:	add	r0, r1, r1, asr #1
   19ee8:	cmp	r0, r1
   19eec:	mvnvs	r0, #-2147483648	; 0x80000000
   19ef0:	cmp	r0, r3
   19ef4:	mov	r7, r0
   19ef8:	movgt	r7, r3
   19efc:	cmn	r3, #1
   19f00:	movle	r7, r0
   19f04:	ldr	r0, [fp, #8]
   19f08:	cmn	r0, #1
   19f0c:	ble	19f34 <__assert_fail@plt+0x86e0>
   19f10:	cmp	r0, #0
   19f14:	beq	19f88 <__assert_fail@plt+0x8734>
   19f18:	cmn	r7, #1
   19f1c:	ble	19f5c <__assert_fail@plt+0x8708>
   19f20:	mvn	r4, #-2147483648	; 0x80000000
   19f24:	udiv	r6, r4, r0
   19f28:	cmp	r6, r7
   19f2c:	bge	19f88 <__assert_fail@plt+0x8734>
   19f30:	b	19f98 <__assert_fail@plt+0x8744>
   19f34:	cmn	r7, #1
   19f38:	ble	19f78 <__assert_fail@plt+0x8724>
   19f3c:	cmn	r0, #1
   19f40:	beq	19f88 <__assert_fail@plt+0x8734>
   19f44:	mov	r6, #-2147483648	; 0x80000000
   19f48:	mvn	r4, #-2147483648	; 0x80000000
   19f4c:	sdiv	r6, r6, r0
   19f50:	cmp	r6, r7
   19f54:	bge	19f88 <__assert_fail@plt+0x8734>
   19f58:	b	19f98 <__assert_fail@plt+0x8744>
   19f5c:	beq	19f88 <__assert_fail@plt+0x8734>
   19f60:	mov	r6, #-2147483648	; 0x80000000
   19f64:	mvn	r4, #-2147483648	; 0x80000000
   19f68:	sdiv	r6, r6, r7
   19f6c:	cmp	r6, r0
   19f70:	bge	19f88 <__assert_fail@plt+0x8734>
   19f74:	b	19f98 <__assert_fail@plt+0x8744>
   19f78:	mvn	r4, #-2147483648	; 0x80000000
   19f7c:	sdiv	r6, r4, r0
   19f80:	cmp	r7, r6
   19f84:	blt	19f98 <__assert_fail@plt+0x8744>
   19f88:	mul	r6, r7, r0
   19f8c:	mov	r4, #64	; 0x40
   19f90:	cmp	r6, #63	; 0x3f
   19f94:	bgt	19fa0 <__assert_fail@plt+0x874c>
   19f98:	sdiv	r7, r4, r0
   19f9c:	mul	r6, r7, r0
   19fa0:	cmp	r5, #0
   19fa4:	moveq	r4, #0
   19fa8:	streq	r4, [r8]
   19fac:	sub	r4, r7, r1
   19fb0:	cmp	r4, r2
   19fb4:	bge	1a060 <__assert_fail@plt+0x880c>
   19fb8:	add	r7, r1, r2
   19fbc:	mov	r6, #0
   19fc0:	mov	r2, #0
   19fc4:	cmp	r7, r3
   19fc8:	movwgt	r6, #1
   19fcc:	cmn	r3, #1
   19fd0:	movwgt	r2, #1
   19fd4:	cmp	r7, r1
   19fd8:	bvs	1a094 <__assert_fail@plt+0x8840>
   19fdc:	ands	r1, r2, r6
   19fe0:	bne	1a094 <__assert_fail@plt+0x8840>
   19fe4:	cmn	r0, #1
   19fe8:	ble	1a010 <__assert_fail@plt+0x87bc>
   19fec:	cmp	r0, #0
   19ff0:	beq	1a05c <__assert_fail@plt+0x8808>
   19ff4:	cmn	r7, #1
   19ff8:	ble	1a034 <__assert_fail@plt+0x87e0>
   19ffc:	mvn	r1, #-2147483648	; 0x80000000
   1a000:	udiv	r1, r1, r0
   1a004:	cmp	r1, r7
   1a008:	bge	1a05c <__assert_fail@plt+0x8808>
   1a00c:	b	1a094 <__assert_fail@plt+0x8840>
   1a010:	cmn	r7, #1
   1a014:	ble	1a04c <__assert_fail@plt+0x87f8>
   1a018:	cmn	r0, #1
   1a01c:	beq	1a05c <__assert_fail@plt+0x8808>
   1a020:	mov	r1, #-2147483648	; 0x80000000
   1a024:	sdiv	r1, r1, r0
   1a028:	cmp	r1, r7
   1a02c:	bge	1a05c <__assert_fail@plt+0x8808>
   1a030:	b	1a094 <__assert_fail@plt+0x8840>
   1a034:	beq	1a05c <__assert_fail@plt+0x8808>
   1a038:	mov	r1, #-2147483648	; 0x80000000
   1a03c:	sdiv	r1, r1, r7
   1a040:	cmp	r1, r0
   1a044:	bge	1a05c <__assert_fail@plt+0x8808>
   1a048:	b	1a094 <__assert_fail@plt+0x8840>
   1a04c:	mvn	r1, #-2147483648	; 0x80000000
   1a050:	sdiv	r1, r1, r0
   1a054:	cmp	r7, r1
   1a058:	blt	1a094 <__assert_fail@plt+0x8840>
   1a05c:	mul	r6, r7, r0
   1a060:	mov	r0, r5
   1a064:	mov	r1, r6
   1a068:	bl	1a344 <__assert_fail@plt+0x8af0>
   1a06c:	cmp	r6, #0
   1a070:	movwne	r6, #1
   1a074:	cmp	r0, #0
   1a078:	bne	1a08c <__assert_fail@plt+0x8838>
   1a07c:	clz	r1, r5
   1a080:	lsr	r1, r1, #5
   1a084:	orrs	r1, r1, r6
   1a088:	bne	1a094 <__assert_fail@plt+0x8840>
   1a08c:	str	r7, [r8]
   1a090:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a094:	bl	1a200 <__assert_fail@plt+0x89ac>
   1a098:	push	{fp, lr}
   1a09c:	mov	fp, sp
   1a0a0:	mov	r1, #1
   1a0a4:	bl	1a2c0 <__assert_fail@plt+0x8a6c>
   1a0a8:	cmp	r0, #0
   1a0ac:	popne	{fp, pc}
   1a0b0:	bl	1a200 <__assert_fail@plt+0x89ac>
   1a0b4:	push	{fp, lr}
   1a0b8:	mov	fp, sp
   1a0bc:	bl	1a2c0 <__assert_fail@plt+0x8a6c>
   1a0c0:	cmp	r0, #0
   1a0c4:	popne	{fp, pc}
   1a0c8:	bl	1a200 <__assert_fail@plt+0x89ac>
   1a0cc:	push	{fp, lr}
   1a0d0:	mov	fp, sp
   1a0d4:	mov	r1, #1
   1a0d8:	bl	1a2c0 <__assert_fail@plt+0x8a6c>
   1a0dc:	cmp	r0, #0
   1a0e0:	popne	{fp, pc}
   1a0e4:	bl	1a200 <__assert_fail@plt+0x89ac>
   1a0e8:	push	{fp, lr}
   1a0ec:	mov	fp, sp
   1a0f0:	bl	1a2c0 <__assert_fail@plt+0x8a6c>
   1a0f4:	cmp	r0, #0
   1a0f8:	popne	{fp, pc}
   1a0fc:	bl	1a200 <__assert_fail@plt+0x89ac>
   1a100:	push	{r4, r5, r6, sl, fp, lr}
   1a104:	add	fp, sp, #16
   1a108:	mov	r5, r0
   1a10c:	mov	r0, r1
   1a110:	mov	r4, r1
   1a114:	bl	1a314 <__assert_fail@plt+0x8ac0>
   1a118:	cmp	r0, #0
   1a11c:	beq	1a138 <__assert_fail@plt+0x88e4>
   1a120:	mov	r1, r5
   1a124:	mov	r2, r4
   1a128:	mov	r6, r0
   1a12c:	bl	1150c <memcpy@plt>
   1a130:	mov	r0, r6
   1a134:	pop	{r4, r5, r6, sl, fp, pc}
   1a138:	bl	1a200 <__assert_fail@plt+0x89ac>
   1a13c:	push	{r4, r5, r6, sl, fp, lr}
   1a140:	add	fp, sp, #16
   1a144:	mov	r5, r0
   1a148:	mov	r0, r1
   1a14c:	mov	r4, r1
   1a150:	bl	1a314 <__assert_fail@plt+0x8ac0>
   1a154:	cmp	r0, #0
   1a158:	beq	1a174 <__assert_fail@plt+0x8920>
   1a15c:	mov	r1, r5
   1a160:	mov	r2, r4
   1a164:	mov	r6, r0
   1a168:	bl	1150c <memcpy@plt>
   1a16c:	mov	r0, r6
   1a170:	pop	{r4, r5, r6, sl, fp, pc}
   1a174:	bl	1a200 <__assert_fail@plt+0x89ac>
   1a178:	push	{r4, r5, r6, sl, fp, lr}
   1a17c:	add	fp, sp, #16
   1a180:	mov	r5, r0
   1a184:	add	r0, r1, #1
   1a188:	mov	r4, r1
   1a18c:	bl	1a314 <__assert_fail@plt+0x8ac0>
   1a190:	cmp	r0, #0
   1a194:	beq	1a1bc <__assert_fail@plt+0x8968>
   1a198:	mov	r6, r0
   1a19c:	mov	r0, #0
   1a1a0:	mov	r1, r5
   1a1a4:	mov	r2, r4
   1a1a8:	strb	r0, [r6, r4]
   1a1ac:	mov	r0, r6
   1a1b0:	bl	1150c <memcpy@plt>
   1a1b4:	mov	r0, r6
   1a1b8:	pop	{r4, r5, r6, sl, fp, pc}
   1a1bc:	bl	1a200 <__assert_fail@plt+0x89ac>
   1a1c0:	push	{r4, r5, r6, sl, fp, lr}
   1a1c4:	add	fp, sp, #16
   1a1c8:	mov	r4, r0
   1a1cc:	bl	116b0 <strlen@plt>
   1a1d0:	add	r5, r0, #1
   1a1d4:	mov	r0, r5
   1a1d8:	bl	1a314 <__assert_fail@plt+0x8ac0>
   1a1dc:	cmp	r0, #0
   1a1e0:	beq	1a1fc <__assert_fail@plt+0x89a8>
   1a1e4:	mov	r1, r4
   1a1e8:	mov	r2, r5
   1a1ec:	mov	r6, r0
   1a1f0:	bl	1150c <memcpy@plt>
   1a1f4:	mov	r0, r6
   1a1f8:	pop	{r4, r5, r6, sl, fp, pc}
   1a1fc:	bl	1a200 <__assert_fail@plt+0x89ac>
   1a200:	push	{fp, lr}
   1a204:	mov	fp, sp
   1a208:	movw	r0, #53604	; 0xd164
   1a20c:	movw	r1, #50614	; 0xc5b6
   1a210:	mov	r2, #5
   1a214:	movt	r0, #2
   1a218:	movt	r1, #1
   1a21c:	ldr	r4, [r0]
   1a220:	mov	r0, #0
   1a224:	bl	11548 <dcgettext@plt>
   1a228:	movw	r2, #49375	; 0xc0df
   1a22c:	mov	r3, r0
   1a230:	mov	r0, r4
   1a234:	mov	r1, #0
   1a238:	movt	r2, #1
   1a23c:	bl	115fc <error@plt>
   1a240:	bl	11818 <abort@plt>
   1a244:	push	{fp, lr}
   1a248:	mov	fp, sp
   1a24c:	orr	r1, r1, #512	; 0x200
   1a250:	bl	12e30 <__assert_fail@plt+0x15dc>
   1a254:	cmp	r0, #0
   1a258:	popne	{fp, pc}
   1a25c:	bl	116d4 <__errno_location@plt>
   1a260:	ldr	r0, [r0]
   1a264:	cmp	r0, #22
   1a268:	bne	1a28c <__assert_fail@plt+0x8a38>
   1a26c:	movw	r0, #50631	; 0xc5c7
   1a270:	movw	r1, #50647	; 0xc5d7
   1a274:	movw	r3, #50658	; 0xc5e2
   1a278:	mov	r2, #41	; 0x29
   1a27c:	movt	r0, #1
   1a280:	movt	r1, #1
   1a284:	movt	r3, #1
   1a288:	bl	11854 <__assert_fail@plt>
   1a28c:	bl	1a200 <__assert_fail@plt+0x89ac>
   1a290:	ldr	r0, [r0, #48]	; 0x30
   1a294:	and	r0, r0, #17
   1a298:	cmp	r0, #16
   1a29c:	moveq	r0, #1
   1a2a0:	bxeq	lr
   1a2a4:	cmp	r0, #17
   1a2a8:	movne	r0, #0
   1a2ac:	bxne	lr
   1a2b0:	ldr	r0, [r1, #48]	; 0x30
   1a2b4:	cmp	r0, #0
   1a2b8:	movwne	r0, #1
   1a2bc:	bx	lr
   1a2c0:	clz	r2, r1
   1a2c4:	clz	r3, r0
   1a2c8:	lsr	r2, r2, #5
   1a2cc:	lsr	r3, r3, #5
   1a2d0:	orrs	r2, r3, r2
   1a2d4:	movwne	r1, #1
   1a2d8:	movwne	r0, #1
   1a2dc:	cmp	r1, #0
   1a2e0:	beq	1a310 <__assert_fail@plt+0x8abc>
   1a2e4:	mvn	r2, #-2147483648	; 0x80000000
   1a2e8:	udiv	r2, r2, r1
   1a2ec:	cmp	r2, r0
   1a2f0:	bcs	1a310 <__assert_fail@plt+0x8abc>
   1a2f4:	push	{fp, lr}
   1a2f8:	mov	fp, sp
   1a2fc:	bl	116d4 <__errno_location@plt>
   1a300:	mov	r1, #12
   1a304:	str	r1, [r0]
   1a308:	mov	r0, #0
   1a30c:	pop	{fp, pc}
   1a310:	b	11494 <calloc@plt>
   1a314:	cmp	r0, #0
   1a318:	movweq	r0, #1
   1a31c:	cmn	r0, #1
   1a320:	ble	1a328 <__assert_fail@plt+0x8ad4>
   1a324:	b	1162c <malloc@plt>
   1a328:	push	{fp, lr}
   1a32c:	mov	fp, sp
   1a330:	bl	116d4 <__errno_location@plt>
   1a334:	mov	r1, #12
   1a338:	str	r1, [r0]
   1a33c:	mov	r0, #0
   1a340:	pop	{fp, pc}
   1a344:	push	{fp, lr}
   1a348:	mov	fp, sp
   1a34c:	cmp	r0, #0
   1a350:	beq	1a36c <__assert_fail@plt+0x8b18>
   1a354:	cmp	r1, #0
   1a358:	beq	1a378 <__assert_fail@plt+0x8b24>
   1a35c:	cmn	r1, #1
   1a360:	ble	1a384 <__assert_fail@plt+0x8b30>
   1a364:	pop	{fp, lr}
   1a368:	b	11560 <realloc@plt>
   1a36c:	mov	r0, r1
   1a370:	pop	{fp, lr}
   1a374:	b	1a314 <__assert_fail@plt+0x8ac0>
   1a378:	bl	1a978 <__assert_fail@plt+0x9124>
   1a37c:	mov	r0, #0
   1a380:	pop	{fp, pc}
   1a384:	bl	116d4 <__errno_location@plt>
   1a388:	mov	r1, #12
   1a38c:	str	r1, [r0]
   1a390:	mov	r0, #0
   1a394:	pop	{fp, pc}
   1a398:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a39c:	add	fp, sp, #24
   1a3a0:	sub	sp, sp, #40	; 0x28
   1a3a4:	mov	r5, r0
   1a3a8:	ldrb	r0, [r2]
   1a3ac:	cmp	r0, #0
   1a3b0:	beq	1a3e0 <__assert_fail@plt+0x8b8c>
   1a3b4:	movw	r9, #54072	; 0xd338
   1a3b8:	mov	r4, r2
   1a3bc:	mov	r6, r1
   1a3c0:	movt	r9, #2
   1a3c4:	ldr	r0, [r9]
   1a3c8:	cmp	r0, #0
   1a3cc:	beq	1a3ec <__assert_fail@plt+0x8b98>
   1a3d0:	mov	r7, #0
   1a3d4:	cmp	r0, #0
   1a3d8:	bge	1a460 <__assert_fail@plt+0x8c0c>
   1a3dc:	b	1a4b0 <__assert_fail@plt+0x8c5c>
   1a3e0:	mov	r0, #0
   1a3e4:	strb	r0, [r5]
   1a3e8:	b	1a4ac <__assert_fail@plt+0x8c58>
   1a3ec:	movw	r0, #50736	; 0xc630
   1a3f0:	movw	r1, #18688	; 0x4900
   1a3f4:	movt	r0, #1
   1a3f8:	movt	r1, #8
   1a3fc:	bl	11614 <open64@plt>
   1a400:	cmn	r0, #1
   1a404:	ble	1a4bc <__assert_fail@plt+0x8c68>
   1a408:	movw	r3, #50750	; 0xc63e
   1a40c:	add	r8, sp, #8
   1a410:	mov	r7, r0
   1a414:	str	r0, [sp]
   1a418:	mov	r1, #1
   1a41c:	mov	r2, #32
   1a420:	movt	r3, #1
   1a424:	mov	r0, r8
   1a428:	bl	116e0 <__sprintf_chk@plt>
   1a42c:	mov	r0, r8
   1a430:	mov	r1, #0
   1a434:	bl	11740 <access@plt>
   1a438:	cmp	r0, #0
   1a43c:	mvn	r1, #0
   1a440:	mov	r0, r7
   1a444:	movweq	r1, #1
   1a448:	str	r1, [r9]
   1a44c:	bl	11824 <close@plt>
   1a450:	ldr	r0, [r9]
   1a454:	mov	r7, #0
   1a458:	cmp	r0, #0
   1a45c:	blt	1a4b0 <__assert_fail@plt+0x8c5c>
   1a460:	mov	r0, r4
   1a464:	bl	116b0 <strlen@plt>
   1a468:	add	r0, r0, #27
   1a46c:	cmp	r0, #4032	; 0xfc0
   1a470:	bls	1a484 <__assert_fail@plt+0x8c30>
   1a474:	bl	1a314 <__assert_fail@plt+0x8ac0>
   1a478:	mov	r5, r0
   1a47c:	cmp	r0, #0
   1a480:	beq	1a4b0 <__assert_fail@plt+0x8c5c>
   1a484:	movw	r3, #50773	; 0xc655
   1a488:	mov	r0, r5
   1a48c:	mov	r1, #1
   1a490:	mvn	r2, #0
   1a494:	str	r6, [sp]
   1a498:	movt	r3, #1
   1a49c:	bl	116e0 <__sprintf_chk@plt>
   1a4a0:	add	r0, r5, r0
   1a4a4:	mov	r1, r4
   1a4a8:	bl	115d8 <strcpy@plt>
   1a4ac:	mov	r7, r5
   1a4b0:	mov	r0, r7
   1a4b4:	sub	sp, fp, #24
   1a4b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a4bc:	mvn	r0, #0
   1a4c0:	mov	r7, #0
   1a4c4:	str	r0, [r9]
   1a4c8:	mov	r0, r7
   1a4cc:	sub	sp, fp, #24
   1a4d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a4d4:	push	{r4, r5, r6, sl, fp, lr}
   1a4d8:	add	fp, sp, #16
   1a4dc:	mov	r4, r0
   1a4e0:	bl	115e4 <__fpending@plt>
   1a4e4:	ldr	r6, [r4]
   1a4e8:	mov	r5, r0
   1a4ec:	mov	r0, r4
   1a4f0:	bl	1a64c <__assert_fail@plt+0x8df8>
   1a4f4:	tst	r6, #32
   1a4f8:	bne	1a530 <__assert_fail@plt+0x8cdc>
   1a4fc:	cmp	r0, #0
   1a500:	mov	r4, r0
   1a504:	mvnne	r4, #0
   1a508:	cmp	r5, #0
   1a50c:	bne	1a53c <__assert_fail@plt+0x8ce8>
   1a510:	cmp	r0, #0
   1a514:	beq	1a53c <__assert_fail@plt+0x8ce8>
   1a518:	bl	116d4 <__errno_location@plt>
   1a51c:	ldr	r0, [r0]
   1a520:	subs	r4, r0, #9
   1a524:	mvnne	r4, #0
   1a528:	mov	r0, r4
   1a52c:	pop	{r4, r5, r6, sl, fp, pc}
   1a530:	mvn	r4, #0
   1a534:	cmp	r0, #0
   1a538:	beq	1a544 <__assert_fail@plt+0x8cf0>
   1a53c:	mov	r0, r4
   1a540:	pop	{r4, r5, r6, sl, fp, pc}
   1a544:	bl	116d4 <__errno_location@plt>
   1a548:	mov	r1, #0
   1a54c:	str	r1, [r0]
   1a550:	mov	r0, r4
   1a554:	pop	{r4, r5, r6, sl, fp, pc}
   1a558:	movw	r2, #62998	; 0xf616
   1a55c:	mov	r1, #0
   1a560:	movt	r2, #149	; 0x95
   1a564:	str	r1, [r0, #16]
   1a568:	str	r1, [r0, #20]
   1a56c:	str	r2, [r0, #24]
   1a570:	bx	lr
   1a574:	push	{r4, r5, r6, r7, fp, lr}
   1a578:	add	fp, sp, #16
   1a57c:	ldr	r2, [r0, #24]
   1a580:	movw	r3, #62998	; 0xf616
   1a584:	movt	r3, #149	; 0x95
   1a588:	cmp	r2, r3
   1a58c:	bne	1a62c <__assert_fail@plt+0x8dd8>
   1a590:	mov	r3, r0
   1a594:	ldr	r2, [r3, #16]!
   1a598:	ldr	lr, [r3, #4]
   1a59c:	orrs	r5, r2, lr
   1a5a0:	beq	1a5d8 <__assert_fail@plt+0x8d84>
   1a5a4:	ldrd	r4, [r0]
   1a5a8:	ldrd	r6, [r1, #96]	; 0x60
   1a5ac:	eor	r7, r7, r5
   1a5b0:	eor	r6, r6, r4
   1a5b4:	orrs	r7, r6, r7
   1a5b8:	bne	1a5d8 <__assert_fail@plt+0x8d84>
   1a5bc:	ldrd	r4, [r0, #8]
   1a5c0:	ldrd	r6, [r1]
   1a5c4:	mov	ip, #1
   1a5c8:	eor	r7, r7, r5
   1a5cc:	eor	r6, r6, r4
   1a5d0:	orrs	r7, r6, r7
   1a5d4:	beq	1a5f8 <__assert_fail@plt+0x8da4>
   1a5d8:	adds	r4, r2, #1
   1a5dc:	mov	ip, #0
   1a5e0:	adc	r5, lr, #0
   1a5e4:	and	r2, r4, r2
   1a5e8:	strd	r4, [r3]
   1a5ec:	and	r3, r5, lr
   1a5f0:	orrs	r2, r2, r3
   1a5f4:	beq	1a600 <__assert_fail@plt+0x8dac>
   1a5f8:	mov	r0, ip
   1a5fc:	pop	{r4, r5, r6, r7, fp, pc}
   1a600:	orrs	r2, r4, r5
   1a604:	moveq	ip, #1
   1a608:	moveq	r0, ip
   1a60c:	popeq	{r4, r5, r6, r7, fp, pc}
   1a610:	ldrd	r2, [r1]
   1a614:	str	r3, [r0, #12]
   1a618:	str	r2, [r0, #8]
   1a61c:	ldrd	r2, [r1, #96]	; 0x60
   1a620:	stm	r0, {r2, r3}
   1a624:	mov	r0, ip
   1a628:	pop	{r4, r5, r6, r7, fp, pc}
   1a62c:	movw	r0, #50791	; 0xc667
   1a630:	movw	r1, #50815	; 0xc67f
   1a634:	movw	r3, #50833	; 0xc691
   1a638:	mov	r2, #60	; 0x3c
   1a63c:	movt	r0, #1
   1a640:	movt	r1, #1
   1a644:	movt	r3, #1
   1a648:	bl	11854 <__assert_fail@plt>
   1a64c:	push	{r4, r5, r6, sl, fp, lr}
   1a650:	add	fp, sp, #16
   1a654:	sub	sp, sp, #8
   1a658:	mov	r4, r0
   1a65c:	bl	11710 <fileno@plt>
   1a660:	cmn	r0, #1
   1a664:	ble	1a6d8 <__assert_fail@plt+0x8e84>
   1a668:	mov	r0, r4
   1a66c:	bl	11644 <__freading@plt>
   1a670:	cmp	r0, #0
   1a674:	beq	1a6a0 <__assert_fail@plt+0x8e4c>
   1a678:	mov	r0, r4
   1a67c:	bl	11710 <fileno@plt>
   1a680:	mov	r1, #1
   1a684:	mov	r2, #0
   1a688:	mov	r3, #0
   1a68c:	str	r1, [sp]
   1a690:	bl	115c0 <lseek64@plt>
   1a694:	and	r0, r0, r1
   1a698:	cmn	r0, #1
   1a69c:	beq	1a6d8 <__assert_fail@plt+0x8e84>
   1a6a0:	mov	r0, r4
   1a6a4:	bl	1a910 <__assert_fail@plt+0x90bc>
   1a6a8:	cmp	r0, #0
   1a6ac:	beq	1a6d8 <__assert_fail@plt+0x8e84>
   1a6b0:	bl	116d4 <__errno_location@plt>
   1a6b4:	ldr	r6, [r0]
   1a6b8:	mov	r5, r0
   1a6bc:	mov	r0, r4
   1a6c0:	bl	1174c <fclose@plt>
   1a6c4:	cmp	r6, #0
   1a6c8:	strne	r6, [r5]
   1a6cc:	mvnne	r0, #0
   1a6d0:	sub	sp, fp, #16
   1a6d4:	pop	{r4, r5, r6, sl, fp, pc}
   1a6d8:	mov	r0, r4
   1a6dc:	sub	sp, fp, #16
   1a6e0:	pop	{r4, r5, r6, sl, fp, lr}
   1a6e4:	b	1174c <fclose@plt>
   1a6e8:	sub	sp, sp, #8
   1a6ec:	push	{r4, r5, r6, r7, fp, lr}
   1a6f0:	add	fp, sp, #16
   1a6f4:	sub	sp, sp, #8
   1a6f8:	mov	r5, r0
   1a6fc:	add	r0, fp, #8
   1a700:	cmp	r1, #11
   1a704:	str	r3, [fp, #12]
   1a708:	str	r2, [fp, #8]
   1a70c:	str	r0, [sp, #4]
   1a710:	bhi	1a74c <__assert_fail@plt+0x8ef8>
   1a714:	mov	r0, #1
   1a718:	movw	r2, #1300	; 0x514
   1a71c:	tst	r2, r0, lsl r1
   1a720:	bne	1a80c <__assert_fail@plt+0x8fb8>
   1a724:	movw	r2, #2570	; 0xa0a
   1a728:	tst	r2, r0, lsl r1
   1a72c:	bne	1a774 <__assert_fail@plt+0x8f20>
   1a730:	cmp	r1, #0
   1a734:	bne	1a74c <__assert_fail@plt+0x8ef8>
   1a738:	ldr	r0, [sp, #4]
   1a73c:	add	r1, r0, #4
   1a740:	str	r1, [sp, #4]
   1a744:	mov	r1, #0
   1a748:	b	1a818 <__assert_fail@plt+0x8fc4>
   1a74c:	sub	r0, r1, #1024	; 0x400
   1a750:	cmp	r0, #10
   1a754:	bhi	1a80c <__assert_fail@plt+0x8fb8>
   1a758:	mov	r2, #1
   1a75c:	movw	r3, #645	; 0x285
   1a760:	tst	r3, r2, lsl r0
   1a764:	bne	1a80c <__assert_fail@plt+0x8fb8>
   1a768:	movw	r3, #1282	; 0x502
   1a76c:	tst	r3, r2, lsl r0
   1a770:	beq	1a780 <__assert_fail@plt+0x8f2c>
   1a774:	mov	r0, r5
   1a778:	bl	11764 <fcntl64@plt>
   1a77c:	b	1a824 <__assert_fail@plt+0x8fd0>
   1a780:	cmp	r0, #6
   1a784:	bne	1a80c <__assert_fail@plt+0x8fb8>
   1a788:	ldr	r0, [sp, #4]
   1a78c:	movw	r7, #54076	; 0xd33c
   1a790:	movt	r7, #2
   1a794:	add	r1, r0, #4
   1a798:	str	r1, [sp, #4]
   1a79c:	ldr	r6, [r0]
   1a7a0:	ldr	r0, [r7]
   1a7a4:	cmp	r0, #0
   1a7a8:	blt	1a848 <__assert_fail@plt+0x8ff4>
   1a7ac:	mov	r0, r5
   1a7b0:	movw	r1, #1030	; 0x406
   1a7b4:	mov	r2, r6
   1a7b8:	bl	11764 <fcntl64@plt>
   1a7bc:	mov	r4, r0
   1a7c0:	cmn	r0, #1
   1a7c4:	bgt	1a83c <__assert_fail@plt+0x8fe8>
   1a7c8:	bl	116d4 <__errno_location@plt>
   1a7cc:	ldr	r0, [r0]
   1a7d0:	cmp	r0, #22
   1a7d4:	bne	1a83c <__assert_fail@plt+0x8fe8>
   1a7d8:	mov	r0, r5
   1a7dc:	mov	r1, #0
   1a7e0:	mov	r2, r6
   1a7e4:	bl	11764 <fcntl64@plt>
   1a7e8:	mov	r4, r0
   1a7ec:	cmp	r0, #0
   1a7f0:	blt	1a828 <__assert_fail@plt+0x8fd4>
   1a7f4:	mvn	r0, #0
   1a7f8:	str	r0, [r7]
   1a7fc:	mov	r0, #1
   1a800:	cmp	r0, #0
   1a804:	bne	1a874 <__assert_fail@plt+0x9020>
   1a808:	b	1a828 <__assert_fail@plt+0x8fd4>
   1a80c:	ldr	r0, [sp, #4]
   1a810:	add	r2, r0, #4
   1a814:	str	r2, [sp, #4]
   1a818:	ldr	r2, [r0]
   1a81c:	mov	r0, r5
   1a820:	bl	11764 <fcntl64@plt>
   1a824:	mov	r4, r0
   1a828:	mov	r0, r4
   1a82c:	sub	sp, fp, #16
   1a830:	pop	{r4, r5, r6, r7, fp, lr}
   1a834:	add	sp, sp, #8
   1a838:	bx	lr
   1a83c:	mov	r0, #1
   1a840:	str	r0, [r7]
   1a844:	b	1a828 <__assert_fail@plt+0x8fd4>
   1a848:	mov	r0, r5
   1a84c:	mov	r1, #0
   1a850:	mov	r2, r6
   1a854:	bl	11764 <fcntl64@plt>
   1a858:	mov	r4, r0
   1a85c:	ldr	r0, [r7]
   1a860:	add	r0, r0, #1
   1a864:	clz	r0, r0
   1a868:	lsr	r0, r0, #5
   1a86c:	cmp	r0, #0
   1a870:	beq	1a828 <__assert_fail@plt+0x8fd4>
   1a874:	cmp	r4, #0
   1a878:	blt	1a828 <__assert_fail@plt+0x8fd4>
   1a87c:	mov	r0, r4
   1a880:	mov	r1, #1
   1a884:	bl	11764 <fcntl64@plt>
   1a888:	cmp	r0, #0
   1a88c:	blt	1a8a8 <__assert_fail@plt+0x9054>
   1a890:	orr	r2, r0, #1
   1a894:	mov	r0, r4
   1a898:	mov	r1, #2
   1a89c:	bl	11764 <fcntl64@plt>
   1a8a0:	cmn	r0, #1
   1a8a4:	bne	1a828 <__assert_fail@plt+0x8fd4>
   1a8a8:	bl	116d4 <__errno_location@plt>
   1a8ac:	ldr	r6, [r0]
   1a8b0:	mov	r5, r0
   1a8b4:	mov	r0, r4
   1a8b8:	bl	11824 <close@plt>
   1a8bc:	str	r6, [r5]
   1a8c0:	mvn	r4, #0
   1a8c4:	b	1a828 <__assert_fail@plt+0x8fd4>
   1a8c8:	sub	sp, sp, #8
   1a8cc:	push	{fp, lr}
   1a8d0:	mov	fp, sp
   1a8d4:	sub	sp, sp, #8
   1a8d8:	str	r2, [fp, #8]
   1a8dc:	mov	r2, #0
   1a8e0:	tst	r1, #64	; 0x40
   1a8e4:	str	r3, [fp, #12]
   1a8e8:	addne	r2, fp, #8
   1a8ec:	orrne	r2, r2, #4
   1a8f0:	strne	r2, [sp, #4]
   1a8f4:	ldrne	r2, [fp, #8]
   1a8f8:	bl	11614 <open64@plt>
   1a8fc:	bl	1959c <__assert_fail@plt+0x7d48>
   1a900:	mov	sp, fp
   1a904:	pop	{fp, lr}
   1a908:	add	sp, sp, #8
   1a90c:	bx	lr
   1a910:	push	{r4, sl, fp, lr}
   1a914:	add	fp, sp, #8
   1a918:	sub	sp, sp, #8
   1a91c:	mov	r4, r0
   1a920:	cmp	r0, #0
   1a924:	beq	1a940 <__assert_fail@plt+0x90ec>
   1a928:	mov	r0, r4
   1a92c:	bl	11644 <__freading@plt>
   1a930:	cmp	r0, #0
   1a934:	ldrbne	r0, [r4, #1]
   1a938:	tstne	r0, #1
   1a93c:	bne	1a950 <__assert_fail@plt+0x90fc>
   1a940:	mov	r0, r4
   1a944:	sub	sp, fp, #8
   1a948:	pop	{r4, sl, fp, lr}
   1a94c:	b	114d0 <fflush@plt>
   1a950:	mov	r0, #1
   1a954:	mov	r2, #0
   1a958:	mov	r3, #0
   1a95c:	str	r0, [sp]
   1a960:	mov	r0, r4
   1a964:	bl	1a9a0 <__assert_fail@plt+0x914c>
   1a968:	mov	r0, r4
   1a96c:	sub	sp, fp, #8
   1a970:	pop	{r4, sl, fp, lr}
   1a974:	b	114d0 <fflush@plt>
   1a978:	push	{r4, r5, r6, sl, fp, lr}
   1a97c:	add	fp, sp, #16
   1a980:	mov	r4, r0
   1a984:	bl	116d4 <__errno_location@plt>
   1a988:	ldr	r6, [r0]
   1a98c:	mov	r5, r0
   1a990:	mov	r0, r4
   1a994:	bl	114f4 <free@plt>
   1a998:	str	r6, [r5]
   1a99c:	pop	{r4, r5, r6, sl, fp, pc}
   1a9a0:	push	{r4, r5, r6, r7, fp, lr}
   1a9a4:	add	fp, sp, #16
   1a9a8:	sub	sp, sp, #8
   1a9ac:	mov	r4, r0
   1a9b0:	ldr	r0, [r0, #4]
   1a9b4:	mov	r5, r3
   1a9b8:	mov	r6, r2
   1a9bc:	ldr	r1, [r4, #8]
   1a9c0:	cmp	r1, r0
   1a9c4:	bne	1a9e0 <__assert_fail@plt+0x918c>
   1a9c8:	ldrd	r0, [r4, #16]
   1a9cc:	cmp	r1, r0
   1a9d0:	bne	1a9e0 <__assert_fail@plt+0x918c>
   1a9d4:	ldr	r0, [r4, #36]	; 0x24
   1a9d8:	cmp	r0, #0
   1a9dc:	beq	1a9f8 <__assert_fail@plt+0x91a4>
   1a9e0:	mov	r0, r4
   1a9e4:	mov	r2, r6
   1a9e8:	mov	r3, r5
   1a9ec:	sub	sp, fp, #16
   1a9f0:	pop	{r4, r5, r6, r7, fp, lr}
   1a9f4:	b	11758 <fseeko64@plt>
   1a9f8:	ldr	r7, [fp, #8]
   1a9fc:	mov	r0, r4
   1aa00:	bl	11710 <fileno@plt>
   1aa04:	mov	r2, r6
   1aa08:	mov	r3, r5
   1aa0c:	str	r7, [sp]
   1aa10:	bl	115c0 <lseek64@plt>
   1aa14:	and	r2, r0, r1
   1aa18:	cmn	r2, #1
   1aa1c:	mvneq	r0, #0
   1aa20:	subeq	sp, fp, #16
   1aa24:	popeq	{r4, r5, r6, r7, fp, pc}
   1aa28:	strd	r0, [r4, #80]	; 0x50
   1aa2c:	ldr	r0, [r4]
   1aa30:	bic	r0, r0, #16
   1aa34:	str	r0, [r4]
   1aa38:	mov	r0, #0
   1aa3c:	sub	sp, fp, #16
   1aa40:	pop	{r4, r5, r6, r7, fp, pc}
   1aa44:	push	{fp, lr}
   1aa48:	mov	fp, sp
   1aa4c:	mov	r0, #14
   1aa50:	bl	11788 <nl_langinfo@plt>
   1aa54:	movw	r1, #47547	; 0xb9bb
   1aa58:	cmp	r0, #0
   1aa5c:	movt	r1, #1
   1aa60:	movne	r1, r0
   1aa64:	movw	r0, #50900	; 0xc6d4
   1aa68:	ldrb	r2, [r1]
   1aa6c:	movt	r0, #1
   1aa70:	cmp	r2, #0
   1aa74:	movne	r0, r1
   1aa78:	pop	{fp, pc}
   1aa7c:	push	{r4, r5, r6, r7, fp, lr}
   1aa80:	add	fp, sp, #16
   1aa84:	sub	sp, sp, #8
   1aa88:	add	r5, sp, #4
   1aa8c:	cmp	r0, #0
   1aa90:	mov	r7, r2
   1aa94:	mov	r4, r1
   1aa98:	movne	r5, r0
   1aa9c:	mov	r0, r5
   1aaa0:	bl	115f0 <mbrtowc@plt>
   1aaa4:	mov	r6, r0
   1aaa8:	cmp	r7, #0
   1aaac:	beq	1aad0 <__assert_fail@plt+0x927c>
   1aab0:	cmn	r6, #2
   1aab4:	bcc	1aad0 <__assert_fail@plt+0x927c>
   1aab8:	mov	r0, #0
   1aabc:	bl	1b008 <__assert_fail@plt+0x97b4>
   1aac0:	cmp	r0, #0
   1aac4:	ldrbeq	r0, [r4]
   1aac8:	moveq	r6, #1
   1aacc:	streq	r0, [r5]
   1aad0:	mov	r0, r6
   1aad4:	sub	sp, fp, #16
   1aad8:	pop	{r4, r5, r6, r7, fp, pc}
   1aadc:	push	{fp, lr}
   1aae0:	mov	fp, sp
   1aae4:	mov	r4, r0
   1aae8:	movw	r0, #53604	; 0xd164
   1aaec:	movw	r1, #50906	; 0xc6da
   1aaf0:	mov	r2, #5
   1aaf4:	movt	r0, #2
   1aaf8:	movt	r1, #1
   1aafc:	ldr	r5, [r0]
   1ab00:	mov	r0, #0
   1ab04:	bl	11548 <dcgettext@plt>
   1ab08:	mov	r2, r0
   1ab0c:	mov	r0, r5
   1ab10:	mov	r1, r4
   1ab14:	bl	115fc <error@plt>
   1ab18:	bl	11818 <abort@plt>
   1ab1c:	push	{fp, lr}
   1ab20:	mov	fp, sp
   1ab24:	mov	r4, r0
   1ab28:	movw	r0, #53604	; 0xd164
   1ab2c:	movw	r1, #50949	; 0xc705
   1ab30:	mov	r2, #5
   1ab34:	movt	r0, #2
   1ab38:	movt	r1, #1
   1ab3c:	ldr	r5, [r0]
   1ab40:	mov	r0, #0
   1ab44:	bl	11548 <dcgettext@plt>
   1ab48:	mov	r2, r0
   1ab4c:	mov	r0, r5
   1ab50:	mov	r1, r4
   1ab54:	bl	115fc <error@plt>
   1ab58:	bl	11818 <abort@plt>
   1ab5c:	cmp	r2, #0
   1ab60:	beq	1ab90 <__assert_fail@plt+0x933c>
   1ab64:	mvn	r3, #0
   1ab68:	udiv	r3, r3, r2
   1ab6c:	cmp	r3, r1
   1ab70:	bcs	1ab90 <__assert_fail@plt+0x933c>
   1ab74:	push	{fp, lr}
   1ab78:	mov	fp, sp
   1ab7c:	bl	116d4 <__errno_location@plt>
   1ab80:	mov	r1, #12
   1ab84:	str	r1, [r0]
   1ab88:	mov	r0, #0
   1ab8c:	pop	{fp, pc}
   1ab90:	mul	r1, r2, r1
   1ab94:	b	1a344 <__assert_fail@plt+0x8af0>
   1ab98:	push	{r4, r5, fp, lr}
   1ab9c:	add	fp, sp, #8
   1aba0:	mov	r4, #0
   1aba4:	mov	r5, r0
   1aba8:	mov	r1, #524288	; 0x80000
   1abac:	str	r4, [r0, #4]
   1abb0:	movw	r0, #49379	; 0xc0e3
   1abb4:	movt	r0, #1
   1abb8:	bl	1a8c8 <__assert_fail@plt+0x9074>
   1abbc:	cmn	r0, #1
   1abc0:	str	r0, [r5]
   1abc4:	ble	1abd0 <__assert_fail@plt+0x937c>
   1abc8:	mov	r0, r4
   1abcc:	pop	{r4, r5, fp, pc}
   1abd0:	mov	r0, #0
   1abd4:	mov	r1, #0
   1abd8:	mov	r4, #0
   1abdc:	bl	11680 <getcwd@plt>
   1abe0:	cmp	r0, #0
   1abe4:	str	r0, [r5, #4]
   1abe8:	mvneq	r4, #0
   1abec:	mov	r0, r4
   1abf0:	pop	{r4, r5, fp, pc}
   1abf4:	ldr	r1, [r0]
   1abf8:	cmp	r1, #0
   1abfc:	blt	1ac08 <__assert_fail@plt+0x93b4>
   1ac00:	mov	r0, r1
   1ac04:	b	117b8 <fchdir@plt>
   1ac08:	ldr	r0, [r0, #4]
   1ac0c:	b	1ac44 <__assert_fail@plt+0x93f0>
   1ac10:	push	{r4, sl, fp, lr}
   1ac14:	add	fp, sp, #8
   1ac18:	mov	r4, r0
   1ac1c:	ldr	r0, [r0]
   1ac20:	cmp	r0, #0
   1ac24:	blt	1ac2c <__assert_fail@plt+0x93d8>
   1ac28:	bl	11824 <close@plt>
   1ac2c:	ldr	r0, [r4, #4]
   1ac30:	pop	{r4, sl, fp, lr}
   1ac34:	b	1a978 <__assert_fail@plt+0x9124>
   1ac38:	mov	r1, #0
   1ac3c:	mov	r2, #3
   1ac40:	b	1a6e8 <__assert_fail@plt+0x8e94>
   1ac44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac48:	add	fp, sp, #28
   1ac4c:	sub	sp, sp, #4
   1ac50:	mov	r4, r0
   1ac54:	bl	11584 <chdir@plt>
   1ac58:	cmp	r0, #0
   1ac5c:	beq	1ad2c <__assert_fail@plt+0x94d8>
   1ac60:	mov	r6, r0
   1ac64:	bl	116d4 <__errno_location@plt>
   1ac68:	mov	r9, r0
   1ac6c:	ldr	r0, [r0]
   1ac70:	cmp	r0, #36	; 0x24
   1ac74:	bne	1ae80 <__assert_fail@plt+0x962c>
   1ac78:	mov	r0, r4
   1ac7c:	bl	116b0 <strlen@plt>
   1ac80:	cmp	r0, #0
   1ac84:	beq	1afa8 <__assert_fail@plt+0x9754>
   1ac88:	mov	r7, r0
   1ac8c:	mov	r0, #0
   1ac90:	cmp	r0, r7, lsr #12
   1ac94:	beq	1afc8 <__assert_fail@plt+0x9774>
   1ac98:	movw	r1, #50789	; 0xc665
   1ac9c:	mov	r0, r4
   1aca0:	movt	r1, #1
   1aca4:	bl	11848 <strspn@plt>
   1aca8:	cmp	r0, #0
   1acac:	beq	1ad3c <__assert_fail@plt+0x94e8>
   1acb0:	mov	r6, r0
   1acb4:	cmp	r0, #2
   1acb8:	bne	1ae8c <__assert_fail@plt+0x9638>
   1acbc:	add	r0, r4, #3
   1acc0:	sub	r2, r7, #3
   1acc4:	mov	r1, #47	; 0x2f
   1acc8:	mov	r8, #47	; 0x2f
   1accc:	bl	11728 <memchr@plt>
   1acd0:	cmp	r0, #0
   1acd4:	beq	1aee4 <__assert_fail@plt+0x9690>
   1acd8:	mov	r6, r0
   1acdc:	mov	r0, #0
   1ace0:	mov	r1, r4
   1ace4:	mov	r2, #18688	; 0x4900
   1ace8:	strb	r0, [r6]
   1acec:	mvn	r0, #99	; 0x63
   1acf0:	bl	116bc <openat64@plt>
   1acf4:	cmp	r0, #0
   1acf8:	strb	r8, [r6]
   1acfc:	blt	1aedc <__assert_fail@plt+0x9688>
   1ad00:	movw	r1, #50789	; 0xc665
   1ad04:	add	r6, r6, #1
   1ad08:	mov	r5, r0
   1ad0c:	movt	r1, #1
   1ad10:	mov	r0, r6
   1ad14:	bl	11848 <strspn@plt>
   1ad18:	add	r6, r6, r0
   1ad1c:	ldrb	r0, [r6]
   1ad20:	cmp	r0, #47	; 0x2f
   1ad24:	bne	1ad50 <__assert_fail@plt+0x94fc>
   1ad28:	b	1aebc <__assert_fail@plt+0x9668>
   1ad2c:	mov	r6, #0
   1ad30:	mov	r0, r6
   1ad34:	sub	sp, fp, #28
   1ad38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad3c:	mvn	r5, #99	; 0x63
   1ad40:	mov	r6, r4
   1ad44:	ldrb	r0, [r6]
   1ad48:	cmp	r0, #47	; 0x2f
   1ad4c:	beq	1aebc <__assert_fail@plt+0x9668>
   1ad50:	add	sl, r4, r7
   1ad54:	cmp	r6, sl
   1ad58:	bhi	1afe8 <__assert_fail@plt+0x9794>
   1ad5c:	sub	r0, sl, r6
   1ad60:	str	r9, [sp]
   1ad64:	cmp	r0, #4096	; 0x1000
   1ad68:	blt	1ae40 <__assert_fail@plt+0x95ec>
   1ad6c:	movw	r9, #50789	; 0xc665
   1ad70:	mov	r8, #0
   1ad74:	movt	r9, #1
   1ad78:	mov	r0, r6
   1ad7c:	mov	r1, #47	; 0x2f
   1ad80:	mov	r2, #4096	; 0x1000
   1ad84:	bl	116c8 <memrchr@plt>
   1ad88:	cmp	r0, #0
   1ad8c:	beq	1aefc <__assert_fail@plt+0x96a8>
   1ad90:	mov	r4, r0
   1ad94:	strb	r8, [r0], -r6
   1ad98:	cmp	r0, #4096	; 0x1000
   1ad9c:	bge	1af68 <__assert_fail@plt+0x9714>
   1ada0:	mov	r0, r5
   1ada4:	mov	r1, r6
   1ada8:	mov	r2, #18688	; 0x4900
   1adac:	bl	116bc <openat64@plt>
   1adb0:	cmp	r0, #0
   1adb4:	blt	1af18 <__assert_fail@plt+0x96c4>
   1adb8:	mov	r7, r0
   1adbc:	cmp	r5, #0
   1adc0:	blt	1add4 <__assert_fail@plt+0x9580>
   1adc4:	mov	r0, r5
   1adc8:	bl	11824 <close@plt>
   1adcc:	cmp	r0, #0
   1add0:	bne	1af88 <__assert_fail@plt+0x9734>
   1add4:	mov	r0, #47	; 0x2f
   1add8:	mov	r1, r9
   1addc:	strb	r0, [r4], #1
   1ade0:	mov	r0, r4
   1ade4:	bl	11848 <strspn@plt>
   1ade8:	add	r6, r4, r0
   1adec:	mov	r5, r7
   1adf0:	sub	r0, sl, r6
   1adf4:	cmp	r0, #4096	; 0x1000
   1adf8:	bge	1ad78 <__assert_fail@plt+0x9524>
   1adfc:	cmp	r6, sl
   1ae00:	bcs	1ae4c <__assert_fail@plt+0x95f8>
   1ae04:	mov	r0, r7
   1ae08:	mov	r1, r6
   1ae0c:	mov	r2, #18688	; 0x4900
   1ae10:	bl	116bc <openat64@plt>
   1ae14:	ldr	r9, [sp]
   1ae18:	cmp	r0, #0
   1ae1c:	blt	1af54 <__assert_fail@plt+0x9700>
   1ae20:	mov	r5, r0
   1ae24:	cmp	r7, #0
   1ae28:	blt	1ae54 <__assert_fail@plt+0x9600>
   1ae2c:	mov	r0, r7
   1ae30:	bl	11824 <close@plt>
   1ae34:	cmp	r0, #0
   1ae38:	beq	1ae54 <__assert_fail@plt+0x9600>
   1ae3c:	b	1af88 <__assert_fail@plt+0x9734>
   1ae40:	mov	r7, r5
   1ae44:	cmp	r6, sl
   1ae48:	bcc	1ae04 <__assert_fail@plt+0x95b0>
   1ae4c:	ldr	r9, [sp]
   1ae50:	mov	r5, r7
   1ae54:	mov	r0, r5
   1ae58:	bl	117b8 <fchdir@plt>
   1ae5c:	cmp	r0, #0
   1ae60:	bne	1af24 <__assert_fail@plt+0x96d0>
   1ae64:	mov	r6, #0
   1ae68:	cmp	r5, #0
   1ae6c:	blt	1ae80 <__assert_fail@plt+0x962c>
   1ae70:	mov	r0, r5
   1ae74:	bl	11824 <close@plt>
   1ae78:	cmp	r0, #0
   1ae7c:	bne	1af88 <__assert_fail@plt+0x9734>
   1ae80:	mov	r0, r6
   1ae84:	sub	sp, fp, #28
   1ae88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae8c:	movw	r1, #50789	; 0xc665
   1ae90:	mvn	r0, #99	; 0x63
   1ae94:	mov	r2, #18688	; 0x4900
   1ae98:	movt	r1, #1
   1ae9c:	bl	116bc <openat64@plt>
   1aea0:	cmp	r0, #0
   1aea4:	blt	1aedc <__assert_fail@plt+0x9688>
   1aea8:	mov	r5, r0
   1aeac:	add	r6, r4, r6
   1aeb0:	ldrb	r0, [r6]
   1aeb4:	cmp	r0, #47	; 0x2f
   1aeb8:	bne	1ad50 <__assert_fail@plt+0x94fc>
   1aebc:	movw	r0, #51055	; 0xc76f
   1aec0:	movw	r1, #51003	; 0xc73b
   1aec4:	movw	r3, #51020	; 0xc74c
   1aec8:	mov	r2, #162	; 0xa2
   1aecc:	movt	r0, #1
   1aed0:	movt	r1, #1
   1aed4:	movt	r3, #1
   1aed8:	bl	11854 <__assert_fail@plt>
   1aedc:	ldr	r4, [r9]
   1aee0:	b	1af40 <__assert_fail@plt+0x96ec>
   1aee4:	mov	r0, #36	; 0x24
   1aee8:	str	r0, [r9]
   1aeec:	mvn	r6, #0
   1aef0:	mov	r0, r6
   1aef4:	sub	sp, fp, #28
   1aef8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aefc:	ldr	r1, [sp]
   1af00:	mov	r0, #36	; 0x24
   1af04:	str	r0, [r1]
   1af08:	mvn	r6, #0
   1af0c:	mov	r0, r6
   1af10:	sub	sp, fp, #28
   1af14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af18:	ldr	r9, [sp]
   1af1c:	mov	r0, #47	; 0x2f
   1af20:	strb	r0, [r4]
   1af24:	ldr	r4, [r9]
   1af28:	cmp	r5, #0
   1af2c:	blt	1af40 <__assert_fail@plt+0x96ec>
   1af30:	mov	r0, r5
   1af34:	bl	11824 <close@plt>
   1af38:	cmp	r0, #0
   1af3c:	bne	1af88 <__assert_fail@plt+0x9734>
   1af40:	str	r4, [r9]
   1af44:	mvn	r6, #0
   1af48:	mov	r0, r6
   1af4c:	sub	sp, fp, #28
   1af50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af54:	mov	r5, r7
   1af58:	ldr	r4, [r9]
   1af5c:	cmp	r5, #0
   1af60:	bge	1af30 <__assert_fail@plt+0x96dc>
   1af64:	b	1af40 <__assert_fail@plt+0x96ec>
   1af68:	movw	r0, #51082	; 0xc78a
   1af6c:	movw	r1, #51003	; 0xc73b
   1af70:	movw	r3, #51020	; 0xc74c
   1af74:	mov	r2, #179	; 0xb3
   1af78:	movt	r0, #1
   1af7c:	movt	r1, #1
   1af80:	movt	r3, #1
   1af84:	bl	11854 <__assert_fail@plt>
   1af88:	movw	r0, #51101	; 0xc79d
   1af8c:	movw	r1, #51003	; 0xc73b
   1af90:	movw	r3, #51114	; 0xc7aa
   1af94:	mov	r2, #64	; 0x40
   1af98:	movt	r0, #1
   1af9c:	movt	r1, #1
   1afa0:	movt	r3, #1
   1afa4:	bl	11854 <__assert_fail@plt>
   1afa8:	movw	r0, #50995	; 0xc733
   1afac:	movw	r1, #51003	; 0xc73b
   1afb0:	movw	r3, #51020	; 0xc74c
   1afb4:	mov	r2, #126	; 0x7e
   1afb8:	movt	r0, #1
   1afbc:	movt	r1, #1
   1afc0:	movt	r3, #1
   1afc4:	bl	11854 <__assert_fail@plt>
   1afc8:	movw	r0, #51043	; 0xc763
   1afcc:	movw	r1, #51003	; 0xc73b
   1afd0:	movw	r3, #51020	; 0xc74c
   1afd4:	mov	r2, #127	; 0x7f
   1afd8:	movt	r0, #1
   1afdc:	movt	r1, #1
   1afe0:	movt	r3, #1
   1afe4:	bl	11854 <__assert_fail@plt>
   1afe8:	movw	r0, #51067	; 0xc77b
   1afec:	movw	r1, #51003	; 0xc73b
   1aff0:	movw	r3, #51020	; 0xc74c
   1aff4:	mov	r2, #163	; 0xa3
   1aff8:	movt	r0, #1
   1affc:	movt	r1, #1
   1b000:	movt	r3, #1
   1b004:	bl	11854 <__assert_fail@plt>
   1b008:	push	{r4, sl, fp, lr}
   1b00c:	add	fp, sp, #8
   1b010:	sub	sp, sp, #264	; 0x108
   1b014:	add	r1, sp, #7
   1b018:	movw	r2, #257	; 0x101
   1b01c:	bl	1b06c <__assert_fail@plt+0x9818>
   1b020:	mov	r4, #0
   1b024:	cmp	r0, #0
   1b028:	bne	1b060 <__assert_fail@plt+0x980c>
   1b02c:	movw	r1, #51151	; 0xc7cf
   1b030:	add	r0, sp, #7
   1b034:	movt	r1, #1
   1b038:	bl	114c4 <strcmp@plt>
   1b03c:	cmp	r0, #0
   1b040:	beq	1b060 <__assert_fail@plt+0x980c>
   1b044:	movw	r1, #51153	; 0xc7d1
   1b048:	add	r0, sp, #7
   1b04c:	movt	r1, #1
   1b050:	bl	114c4 <strcmp@plt>
   1b054:	mov	r4, r0
   1b058:	cmp	r0, #0
   1b05c:	movwne	r4, #1
   1b060:	mov	r0, r4
   1b064:	sub	sp, fp, #8
   1b068:	pop	{r4, sl, fp, pc}
   1b06c:	push	{r4, r5, r6, r7, fp, lr}
   1b070:	add	fp, sp, #16
   1b074:	mov	r4, r1
   1b078:	mov	r1, #0
   1b07c:	mov	r6, r2
   1b080:	bl	11770 <setlocale@plt>
   1b084:	cmp	r0, #0
   1b088:	beq	1b0b8 <__assert_fail@plt+0x9864>
   1b08c:	mov	r7, r0
   1b090:	bl	116b0 <strlen@plt>
   1b094:	cmp	r0, r6
   1b098:	bcs	1b0d8 <__assert_fail@plt+0x9884>
   1b09c:	add	r2, r0, #1
   1b0a0:	mov	r0, r4
   1b0a4:	mov	r1, r7
   1b0a8:	bl	1150c <memcpy@plt>
   1b0ac:	mov	r5, #0
   1b0b0:	mov	r0, r5
   1b0b4:	pop	{r4, r5, r6, r7, fp, pc}
   1b0b8:	cmp	r6, #0
   1b0bc:	mov	r5, #22
   1b0c0:	movne	r0, #0
   1b0c4:	strbne	r0, [r4]
   1b0c8:	movne	r0, r5
   1b0cc:	popne	{r4, r5, r6, r7, fp, pc}
   1b0d0:	mov	r0, r5
   1b0d4:	pop	{r4, r5, r6, r7, fp, pc}
   1b0d8:	mov	r5, #34	; 0x22
   1b0dc:	cmp	r6, #0
   1b0e0:	beq	1b100 <__assert_fail@plt+0x98ac>
   1b0e4:	sub	r6, r6, #1
   1b0e8:	mov	r0, r4
   1b0ec:	mov	r1, r7
   1b0f0:	mov	r2, r6
   1b0f4:	bl	1150c <memcpy@plt>
   1b0f8:	mov	r0, #0
   1b0fc:	strb	r0, [r4, r6]
   1b100:	mov	r0, r5
   1b104:	pop	{r4, r5, r6, r7, fp, pc}
   1b108:	mov	r1, #0
   1b10c:	b	11770 <setlocale@plt>
   1b110:	cmp	r3, #0
   1b114:	cmpeq	r2, #0
   1b118:	bne	1b130 <__assert_fail@plt+0x98dc>
   1b11c:	cmp	r1, #0
   1b120:	cmpeq	r0, #0
   1b124:	mvnne	r1, #0
   1b128:	mvnne	r0, #0
   1b12c:	b	1b14c <__assert_fail@plt+0x98f8>
   1b130:	sub	sp, sp, #8
   1b134:	push	{sp, lr}
   1b138:	bl	1b15c <__assert_fail@plt+0x9908>
   1b13c:	ldr	lr, [sp, #4]
   1b140:	add	sp, sp, #8
   1b144:	pop	{r2, r3}
   1b148:	bx	lr
   1b14c:	push	{r1, lr}
   1b150:	mov	r0, #8
   1b154:	bl	114ac <raise@plt>
   1b158:	pop	{r1, pc}
   1b15c:	cmp	r1, r3
   1b160:	cmpeq	r0, r2
   1b164:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b168:	mov	r4, r0
   1b16c:	movcc	r0, #0
   1b170:	mov	r5, r1
   1b174:	ldr	lr, [sp, #36]	; 0x24
   1b178:	movcc	r1, r0
   1b17c:	bcc	1b278 <__assert_fail@plt+0x9a24>
   1b180:	cmp	r3, #0
   1b184:	clzeq	ip, r2
   1b188:	clzne	ip, r3
   1b18c:	addeq	ip, ip, #32
   1b190:	cmp	r5, #0
   1b194:	clzeq	r1, r4
   1b198:	addeq	r1, r1, #32
   1b19c:	clzne	r1, r5
   1b1a0:	sub	ip, ip, r1
   1b1a4:	sub	sl, ip, #32
   1b1a8:	lsl	r9, r3, ip
   1b1ac:	rsb	fp, ip, #32
   1b1b0:	orr	r9, r9, r2, lsl sl
   1b1b4:	orr	r9, r9, r2, lsr fp
   1b1b8:	lsl	r8, r2, ip
   1b1bc:	cmp	r5, r9
   1b1c0:	cmpeq	r4, r8
   1b1c4:	movcc	r0, #0
   1b1c8:	movcc	r1, r0
   1b1cc:	bcc	1b1e8 <__assert_fail@plt+0x9994>
   1b1d0:	mov	r0, #1
   1b1d4:	subs	r4, r4, r8
   1b1d8:	lsl	r1, r0, sl
   1b1dc:	orr	r1, r1, r0, lsr fp
   1b1e0:	lsl	r0, r0, ip
   1b1e4:	sbc	r5, r5, r9
   1b1e8:	cmp	ip, #0
   1b1ec:	beq	1b278 <__assert_fail@plt+0x9a24>
   1b1f0:	lsr	r6, r8, #1
   1b1f4:	orr	r6, r6, r9, lsl #31
   1b1f8:	lsr	r7, r9, #1
   1b1fc:	mov	r2, ip
   1b200:	b	1b224 <__assert_fail@plt+0x99d0>
   1b204:	subs	r3, r4, r6
   1b208:	sbc	r8, r5, r7
   1b20c:	adds	r3, r3, r3
   1b210:	adc	r8, r8, r8
   1b214:	adds	r4, r3, #1
   1b218:	adc	r5, r8, #0
   1b21c:	subs	r2, r2, #1
   1b220:	beq	1b240 <__assert_fail@plt+0x99ec>
   1b224:	cmp	r5, r7
   1b228:	cmpeq	r4, r6
   1b22c:	bcs	1b204 <__assert_fail@plt+0x99b0>
   1b230:	adds	r4, r4, r4
   1b234:	adc	r5, r5, r5
   1b238:	subs	r2, r2, #1
   1b23c:	bne	1b224 <__assert_fail@plt+0x99d0>
   1b240:	lsr	r3, r4, ip
   1b244:	orr	r3, r3, r5, lsl fp
   1b248:	lsr	r2, r5, ip
   1b24c:	orr	r3, r3, r5, lsr sl
   1b250:	adds	r0, r0, r4
   1b254:	mov	r4, r3
   1b258:	lsl	r3, r2, ip
   1b25c:	orr	r3, r3, r4, lsl sl
   1b260:	lsl	ip, r4, ip
   1b264:	orr	r3, r3, r4, lsr fp
   1b268:	adc	r1, r1, r5
   1b26c:	subs	r0, r0, ip
   1b270:	mov	r5, r2
   1b274:	sbc	r1, r1, r3
   1b278:	cmp	lr, #0
   1b27c:	strdne	r4, [lr]
   1b280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b284:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b288:	mov	r7, r0
   1b28c:	ldr	r6, [pc, #72]	; 1b2dc <__assert_fail@plt+0x9a88>
   1b290:	ldr	r5, [pc, #72]	; 1b2e0 <__assert_fail@plt+0x9a8c>
   1b294:	add	r6, pc, r6
   1b298:	add	r5, pc, r5
   1b29c:	sub	r6, r6, r5
   1b2a0:	mov	r8, r1
   1b2a4:	mov	r9, r2
   1b2a8:	bl	11468 <fstatfs64@plt-0x20>
   1b2ac:	asrs	r6, r6, #2
   1b2b0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b2b4:	mov	r4, #0
   1b2b8:	add	r4, r4, #1
   1b2bc:	ldr	r3, [r5], #4
   1b2c0:	mov	r2, r9
   1b2c4:	mov	r1, r8
   1b2c8:	mov	r0, r7
   1b2cc:	blx	r3
   1b2d0:	cmp	r6, r4
   1b2d4:	bne	1b2b8 <__assert_fail@plt+0x9a64>
   1b2d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b2dc:	andeq	r1, r1, r8, ror #24
   1b2e0:	andeq	r1, r1, r0, ror #24
   1b2e4:	bx	lr
   1b2e8:	ldr	r3, [pc, #12]	; 1b2fc <__assert_fail@plt+0x9aa8>
   1b2ec:	mov	r1, #0
   1b2f0:	add	r3, pc, r3
   1b2f4:	ldr	r2, [r3]
   1b2f8:	b	116ec <__cxa_atexit@plt>
   1b2fc:	andeq	r1, r1, r4, ror #28

Disassembly of section .fini:

0001b300 <.fini>:
   1b300:	push	{r3, lr}
   1b304:	pop	{r3, pc}
