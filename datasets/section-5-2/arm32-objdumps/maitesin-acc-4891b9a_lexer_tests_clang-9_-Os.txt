
../repos/maitesin-acc-4891b9a/bin/lexer_tests:     file format elf32-littlearm


Disassembly of section .init:

00012600 <.init>:
   12600:	push	{r3, lr}
   12604:	bl	12854 <_start@@Base+0x3c>
   12608:	pop	{r3, pc}

Disassembly of section .plt:

0001260c <fdopen@plt-0x14>:
   1260c:	push	{lr}		; (str lr, [sp, #-4]!)
   12610:	ldr	lr, [pc, #4]	; 1261c <fdopen@plt-0x4>
   12614:	add	lr, pc, lr
   12618:	ldr	pc, [lr, #8]!
   1261c:	andeq	ip, r1, r4, ror #19

00012620 <fdopen@plt>:
   12620:	add	ip, pc, #0, 12
   12624:	add	ip, ip, #28, 20	; 0x1c000
   12628:	ldr	pc, [ip, #2532]!	; 0x9e4

0001262c <strtol@plt>:
   1262c:	add	ip, pc, #0, 12
   12630:	add	ip, ip, #28, 20	; 0x1c000
   12634:	ldr	pc, [ip, #2524]!	; 0x9dc

00012638 <longjmp@plt>:
   12638:	add	ip, pc, #0, 12
   1263c:	add	ip, ip, #28, 20	; 0x1c000
   12640:	ldr	pc, [ip, #2516]!	; 0x9d4

00012644 <fflush@plt>:
   12644:	add	ip, pc, #0, 12
   12648:	add	ip, ip, #28, 20	; 0x1c000
   1264c:	ldr	pc, [ip, #2508]!	; 0x9cc

00012650 <_setjmp@plt>:
   12650:	add	ip, pc, #0, 12
   12654:	add	ip, ip, #28, 20	; 0x1c000
   12658:	ldr	pc, [ip, #2500]!	; 0x9c4

0001265c <free@plt>:
   1265c:	add	ip, pc, #0, 12
   12660:	add	ip, ip, #28, 20	; 0x1c000
   12664:	ldr	pc, [ip, #2492]!	; 0x9bc

00012668 <__isnanf@plt>:
   12668:	add	ip, pc, #0, 12
   1266c:	add	ip, ip, #28, 20	; 0x1c000
   12670:	ldr	pc, [ip, #2484]!	; 0x9b4

00012674 <memcpy@plt>:
   12674:	add	ip, pc, #0, 12
   12678:	add	ip, ip, #28, 20	; 0x1c000
   1267c:	ldr	pc, [ip, #2476]!	; 0x9ac

00012680 <mmap64@plt>:
   12680:	add	ip, pc, #0, 12
   12684:	add	ip, ip, #28, 20	; 0x1c000
   12688:	ldr	pc, [ip, #2468]!	; 0x9a4

0001268c <ftell@plt>:
   1268c:	add	ip, pc, #0, 12
   12690:	add	ip, ip, #28, 20	; 0x1c000
   12694:	ldr	pc, [ip, #2460]!	; 0x99c

00012698 <uname@plt>:
   12698:	add	ip, pc, #0, 12
   1269c:	add	ip, ip, #28, 20	; 0x1c000
   126a0:	ldr	pc, [ip, #2452]!	; 0x994

000126a4 <strdup@plt>:
   126a4:	add	ip, pc, #0, 12
   126a8:	add	ip, ip, #28, 20	; 0x1c000
   126ac:	ldr	pc, [ip, #2444]!	; 0x98c

000126b0 <__isinff@plt>:
   126b0:	add	ip, pc, #0, 12
   126b4:	add	ip, ip, #28, 20	; 0x1c000
   126b8:	ldr	pc, [ip, #2436]!	; 0x984

000126bc <realloc@plt>:
   126bc:	add	ip, pc, #0, 12
   126c0:	add	ip, ip, #28, 20	; 0x1c000
   126c4:	ldr	pc, [ip, #2428]!	; 0x97c

000126c8 <fwrite@plt>:
   126c8:	add	ip, pc, #0, 12
   126cc:	add	ip, ip, #28, 20	; 0x1c000
   126d0:	ldr	pc, [ip, #2420]!	; 0x974

000126d4 <open64@plt>:
   126d4:	add	ip, pc, #0, 12
   126d8:	add	ip, ip, #28, 20	; 0x1c000
   126dc:	ldr	pc, [ip, #2412]!	; 0x96c

000126e0 <getenv@plt>:
   126e0:	add	ip, pc, #0, 12
   126e4:	add	ip, ip, #28, 20	; 0x1c000
   126e8:	ldr	pc, [ip, #2404]!	; 0x964

000126ec <malloc@plt>:
   126ec:	add	ip, pc, #0, 12
   126f0:	add	ip, ip, #28, 20	; 0x1c000
   126f4:	ldr	pc, [ip, #2396]!	; 0x95c

000126f8 <__libc_start_main@plt>:
   126f8:	add	ip, pc, #0, 12
   126fc:	add	ip, ip, #28, 20	; 0x1c000
   12700:	ldr	pc, [ip, #2388]!	; 0x954

00012704 <strerror@plt>:
   12704:	add	ip, pc, #0, 12
   12708:	add	ip, ip, #28, 20	; 0x1c000
   1270c:	ldr	pc, [ip, #2380]!	; 0x94c

00012710 <__gmon_start__@plt>:
   12710:	add	ip, pc, #0, 12
   12714:	add	ip, ip, #28, 20	; 0x1c000
   12718:	ldr	pc, [ip, #2372]!	; 0x944

0001271c <getpid@plt>:
   1271c:	add	ip, pc, #0, 12
   12720:	add	ip, ip, #28, 20	; 0x1c000
   12724:	ldr	pc, [ip, #2364]!	; 0x93c

00012728 <exit@plt>:
   12728:	add	ip, pc, #0, 12
   1272c:	add	ip, ip, #28, 20	; 0x1c000
   12730:	ldr	pc, [ip, #2356]!	; 0x934

00012734 <strlen@plt>:
   12734:	add	ip, pc, #0, 12
   12738:	add	ip, ip, #28, 20	; 0x1c000
   1273c:	ldr	pc, [ip, #2348]!	; 0x92c

00012740 <strchr@plt>:
   12740:	add	ip, pc, #0, 12
   12744:	add	ip, ip, #28, 20	; 0x1c000
   12748:	ldr	pc, [ip, #2340]!	; 0x924

0001274c <fprintf@plt>:
   1274c:	add	ip, pc, #0, 12
   12750:	add	ip, ip, #28, 20	; 0x1c000
   12754:	ldr	pc, [ip, #2332]!	; 0x91c

00012758 <__errno_location@plt>:
   12758:	add	ip, pc, #0, 12
   1275c:	add	ip, ip, #28, 20	; 0x1c000
   12760:	ldr	pc, [ip, #2324]!	; 0x914

00012764 <__cxa_atexit@plt>:
   12764:	add	ip, pc, #0, 12
   12768:	add	ip, ip, #28, 20	; 0x1c000
   1276c:	ldr	pc, [ip, #2316]!	; 0x90c

00012770 <mkdir@plt>:
   12770:	add	ip, pc, #0, 12
   12774:	add	ip, ip, #28, 20	; 0x1c000
   12778:	ldr	pc, [ip, #2308]!	; 0x904

0001277c <memset@plt>:
   1277c:	add	ip, pc, #0, 12
   12780:	add	ip, ip, #28, 20	; 0x1c000
   12784:	ldr	pc, [ip, #2300]!	; 0x8fc

00012788 <putchar@plt>:
   12788:	add	ip, pc, #0, 12
   1278c:	add	ip, ip, #28, 20	; 0x1c000
   12790:	ldr	pc, [ip, #2292]!	; 0x8f4

00012794 <strncpy@plt>:
   12794:	add	ip, pc, #0, 12
   12798:	add	ip, ip, #28, 20	; 0x1c000
   1279c:	ldr	pc, [ip, #2284]!	; 0x8ec

000127a0 <prctl@plt>:
   127a0:	add	ip, pc, #0, 12
   127a4:	add	ip, ip, #28, 20	; 0x1c000
   127a8:	ldr	pc, [ip, #2276]!	; 0x8e4

000127ac <fileno@plt>:
   127ac:	add	ip, pc, #0, 12
   127b0:	add	ip, ip, #28, 20	; 0x1c000
   127b4:	ldr	pc, [ip, #2268]!	; 0x8dc

000127b8 <fclose@plt>:
   127b8:	add	ip, pc, #0, 12
   127bc:	add	ip, ip, #28, 20	; 0x1c000
   127c0:	ldr	pc, [ip, #2260]!	; 0x8d4

000127c4 <munmap@plt>:
   127c4:	add	ip, pc, #0, 12
   127c8:	add	ip, ip, #28, 20	; 0x1c000
   127cc:	ldr	pc, [ip, #2252]!	; 0x8cc

000127d0 <fcntl64@plt>:
   127d0:	add	ip, pc, #0, 12
   127d4:	add	ip, ip, #28, 20	; 0x1c000
   127d8:	ldr	pc, [ip, #2244]!	; 0x8c4

000127dc <strrchr@plt>:
   127dc:	add	ip, pc, #0, 12
   127e0:	add	ip, ip, #28, 20	; 0x1c000
   127e4:	ldr	pc, [ip, #2236]!	; 0x8bc

000127e8 <msync@plt>:
   127e8:	add	ip, pc, #0, 12
   127ec:	add	ip, ip, #28, 20	; 0x1c000
   127f0:	ldr	pc, [ip, #2228]!	; 0x8b4

000127f4 <atoi@plt>:
   127f4:	add	ip, pc, #0, 12
   127f8:	add	ip, ip, #28, 20	; 0x1c000
   127fc:	ldr	pc, [ip, #2220]!	; 0x8ac

00012800 <fseek@plt>:
   12800:	add	ip, pc, #0, 12
   12804:	add	ip, ip, #28, 20	; 0x1c000
   12808:	ldr	pc, [ip, #2212]!	; 0x8a4

0001280c <abort@plt>:
   1280c:	add	ip, pc, #0, 12
   12810:	add	ip, ip, #28, 20	; 0x1c000
   12814:	ldr	pc, [ip, #2204]!	; 0x89c

Disassembly of section .text:

00012818 <_start@@Base>:
   12818:	mov	fp, #0
   1281c:	mov	lr, #0
   12820:	pop	{r1}		; (ldr r1, [sp], #4)
   12824:	mov	r2, sp
   12828:	push	{r2}		; (str r2, [sp, #-4]!)
   1282c:	push	{r0}		; (str r0, [sp, #-4]!)
   12830:	ldr	ip, [pc, #16]	; 12848 <_start@@Base+0x30>
   12834:	push	{ip}		; (str ip, [sp, #-4]!)
   12838:	ldr	r0, [pc, #12]	; 1284c <_start@@Base+0x34>
   1283c:	ldr	r3, [pc, #12]	; 12850 <_start@@Base+0x38>
   12840:	bl	126f8 <__libc_start_main@plt>
   12844:	bl	1280c <abort@plt>
   12848:	andeq	ip, r1, r8, lsl fp
   1284c:	andeq	r3, r1, r0, lsl #28
   12850:			; <UNDEFINED> instruction: 0x0001cab8
   12854:	ldr	r3, [pc, #20]	; 12870 <_start@@Base+0x58>
   12858:	ldr	r2, [pc, #20]	; 12874 <_start@@Base+0x5c>
   1285c:	add	r3, pc, r3
   12860:	ldr	r2, [r3, r2]
   12864:	cmp	r2, #0
   12868:	bxeq	lr
   1286c:	b	12710 <__gmon_start__@plt>
   12870:	muleq	r1, ip, r7
   12874:	andeq	r0, r0, r4, asr #1
   12878:	ldr	r0, [pc, #24]	; 12898 <_start@@Base+0x80>
   1287c:	ldr	r3, [pc, #24]	; 1289c <_start@@Base+0x84>
   12880:	cmp	r3, r0
   12884:	bxeq	lr
   12888:	ldr	r3, [pc, #16]	; 128a0 <_start@@Base+0x88>
   1288c:	cmp	r3, #0
   12890:	bxeq	lr
   12894:	bx	r3
   12898:	ldrdeq	pc, [r2], -r8
   1289c:	ldrdeq	pc, [r2], -r8
   128a0:	andeq	r0, r0, r0
   128a4:	ldr	r0, [pc, #36]	; 128d0 <_start@@Base+0xb8>
   128a8:	ldr	r1, [pc, #36]	; 128d4 <_start@@Base+0xbc>
   128ac:	sub	r1, r1, r0
   128b0:	asr	r1, r1, #2
   128b4:	add	r1, r1, r1, lsr #31
   128b8:	asrs	r1, r1, #1
   128bc:	bxeq	lr
   128c0:	ldr	r3, [pc, #16]	; 128d8 <_start@@Base+0xc0>
   128c4:	cmp	r3, #0
   128c8:	bxeq	lr
   128cc:	bx	r3
   128d0:	ldrdeq	pc, [r2], -r8
   128d4:	ldrdeq	pc, [r2], -r8
   128d8:	andeq	r0, r0, r0
   128dc:	push	{r4, lr}
   128e0:	ldr	r4, [pc, #24]	; 12900 <_start@@Base+0xe8>
   128e4:	ldrb	r3, [r4]
   128e8:	cmp	r3, #0
   128ec:	popne	{r4, pc}
   128f0:	bl	12878 <_start@@Base+0x60>
   128f4:	mov	r3, #1
   128f8:	strb	r3, [r4]
   128fc:	pop	{r4, pc}
   12900:	andeq	pc, r2, r4, ror #1
   12904:	b	128a4 <_start@@Base+0x8c>

00012908 <simple_file_only_main@@Base>:
   12908:	push	{r4, r5, fp, lr}
   1290c:	add	fp, sp, #8
   12910:	sub	sp, sp, #16
   12914:	movw	r0, #61680	; 0xf0f0
   12918:	add	r1, pc, #376	; 0x178
   1291c:	add	r4, sp, #4
   12920:	movt	r0, #2
   12924:	vld1.64	{d16-d17}, [r1]
   12928:	movw	r1, #52036	; 0xcb44
   1292c:	movt	r1, #1
   12930:	vld1.64	{d18-d19}, [r0 :128]
   12934:	vadd.i64	q8, q9, q8
   12938:	vst1.64	{d16-d17}, [r0 :128]
   1293c:	mov	r0, r4
   12940:	bl	181d8 <init_lexer@@Base>
   12944:	mov	r0, r4
   12948:	bl	18458 <next@@Base>
   1294c:	ldr	r1, [r0]
   12950:	mov	r5, #148	; 0x94
   12954:	mov	r0, #0
   12958:	mov	r2, #0
   1295c:	mov	r3, #23
   12960:	str	r5, [sp]
   12964:	bl	150dc <UnityAssertEqualNumber@@Base>
   12968:	mov	r0, r4
   1296c:	bl	18458 <next@@Base>
   12970:	ldr	r1, [r0]
   12974:	mov	r0, #2
   12978:	mov	r2, #0
   1297c:	mov	r3, #25
   12980:	str	r5, [sp]
   12984:	bl	150dc <UnityAssertEqualNumber@@Base>
   12988:	mov	r0, r4
   1298c:	bl	18458 <next@@Base>
   12990:	ldr	r1, [r0]
   12994:	mov	r0, #3
   12998:	mov	r2, #0
   1299c:	mov	r3, #27
   129a0:	str	r5, [sp]
   129a4:	bl	150dc <UnityAssertEqualNumber@@Base>
   129a8:	mov	r0, r4
   129ac:	bl	18458 <next@@Base>
   129b0:	ldr	r1, [r0]
   129b4:	mov	r0, #4
   129b8:	mov	r2, #0
   129bc:	mov	r3, #29
   129c0:	str	r5, [sp]
   129c4:	bl	150dc <UnityAssertEqualNumber@@Base>
   129c8:	mov	r0, r4
   129cc:	bl	18458 <next@@Base>
   129d0:	ldr	r1, [r0]
   129d4:	mov	r0, #5
   129d8:	mov	r2, #0
   129dc:	mov	r3, #31
   129e0:	str	r5, [sp]
   129e4:	bl	150dc <UnityAssertEqualNumber@@Base>
   129e8:	mov	r0, r4
   129ec:	bl	18458 <next@@Base>
   129f0:	ldr	r1, [r0]
   129f4:	mov	r0, #7
   129f8:	mov	r2, #0
   129fc:	mov	r3, #33	; 0x21
   12a00:	str	r5, [sp]
   12a04:	bl	150dc <UnityAssertEqualNumber@@Base>
   12a08:	mov	r0, r4
   12a0c:	bl	18458 <next@@Base>
   12a10:	ldr	r1, [r0]
   12a14:	mov	r0, #1
   12a18:	mov	r2, #0
   12a1c:	mov	r3, #35	; 0x23
   12a20:	str	r5, [sp]
   12a24:	bl	150dc <UnityAssertEqualNumber@@Base>
   12a28:	mov	r0, r4
   12a2c:	bl	18458 <next@@Base>
   12a30:	ldr	r1, [r0]
   12a34:	mov	r0, #8
   12a38:	mov	r2, #0
   12a3c:	mov	r3, #37	; 0x25
   12a40:	str	r5, [sp]
   12a44:	bl	150dc <UnityAssertEqualNumber@@Base>
   12a48:	mov	r0, r4
   12a4c:	bl	18458 <next@@Base>
   12a50:	ldr	r1, [r0]
   12a54:	mov	r0, #6
   12a58:	mov	r2, #0
   12a5c:	mov	r3, #39	; 0x27
   12a60:	str	r5, [sp]
   12a64:	bl	150dc <UnityAssertEqualNumber@@Base>
   12a68:	mov	r0, r4
   12a6c:	bl	18458 <next@@Base>
   12a70:	ldr	r1, [r0]
   12a74:	mov	r0, #9
   12a78:	mov	r2, #0
   12a7c:	mov	r3, #41	; 0x29
   12a80:	str	r5, [sp]
   12a84:	bl	150dc <UnityAssertEqualNumber@@Base>
   12a88:	mov	r0, r4
   12a8c:	bl	18218 <destroy_lexer@@Base>
   12a90:	sub	sp, fp, #8
   12a94:	pop	{r4, r5, fp, pc}
   12a98:	andeq	r0, r0, r1
   12a9c:	andeq	r0, r0, r0
   12aa0:	andeq	r0, r0, r1
   12aa4:	andeq	r0, r0, r0

00012aa8 <push_token_to_stack@@Base>:
   12aa8:	push	{r4, r5, fp, lr}
   12aac:	add	fp, sp, #8
   12ab0:	sub	sp, sp, #16
   12ab4:	movw	r0, #61696	; 0xf100
   12ab8:	add	r1, pc, #120	; 0x78
   12abc:	add	r4, sp, #4
   12ac0:	movt	r0, #2
   12ac4:	vld1.64	{d16-d17}, [r1]
   12ac8:	movw	r1, #52036	; 0xcb44
   12acc:	movt	r1, #1
   12ad0:	vld1.64	{d18-d19}, [r0 :128]
   12ad4:	vadd.i64	q8, q9, q8
   12ad8:	vst1.64	{d16-d17}, [r0 :128]
   12adc:	mov	r0, r4
   12ae0:	bl	181d8 <init_lexer@@Base>
   12ae4:	mov	r0, #8
   12ae8:	bl	126ec <malloc@plt>
   12aec:	mov	r5, r0
   12af0:	mov	r0, r4
   12af4:	mov	r1, r5
   12af8:	bl	182e8 <push_back@@Base>
   12afc:	ldr	r0, [sp, #8]
   12b00:	mov	r1, #148	; 0x94
   12b04:	mov	r2, #0
   12b08:	mov	r3, #62	; 0x3e
   12b0c:	ldr	r0, [r0, #4]
   12b10:	str	r1, [sp]
   12b14:	mov	r1, r5
   12b18:	bl	150dc <UnityAssertEqualNumber@@Base>
   12b1c:	mov	r0, r4
   12b20:	bl	18218 <destroy_lexer@@Base>
   12b24:	mov	r0, r5
   12b28:	bl	1265c <free@plt>
   12b2c:	sub	sp, fp, #8
   12b30:	pop	{r4, r5, fp, pc}
   12b34:	nop	{0}
   12b38:	andeq	r0, r0, r1
   12b3c:	andeq	r0, r0, r0
   12b40:	andeq	r0, r0, r1
   12b44:	andeq	r0, r0, r0

00012b48 <push_two_tokens_to_stack@@Base>:
   12b48:	push	{r4, r5, r6, r7, fp, lr}
   12b4c:	add	fp, sp, #16
   12b50:	sub	sp, sp, #16
   12b54:	movw	r0, #61712	; 0xf110
   12b58:	add	r1, pc, #176	; 0xb0
   12b5c:	add	r4, sp, #4
   12b60:	movt	r0, #2
   12b64:	vld1.64	{d16-d17}, [r1]
   12b68:	movw	r1, #52036	; 0xcb44
   12b6c:	movt	r1, #1
   12b70:	vld1.64	{d18-d19}, [r0 :128]
   12b74:	vadd.i64	q8, q9, q8
   12b78:	vst1.64	{d16-d17}, [r0 :128]
   12b7c:	mov	r0, r4
   12b80:	bl	181d8 <init_lexer@@Base>
   12b84:	mov	r0, #8
   12b88:	bl	126ec <malloc@plt>
   12b8c:	mov	r5, r0
   12b90:	mov	r0, #8
   12b94:	bl	126ec <malloc@plt>
   12b98:	mov	r6, r0
   12b9c:	mov	r0, r4
   12ba0:	mov	r1, r5
   12ba4:	bl	182e8 <push_back@@Base>
   12ba8:	ldr	r0, [sp, #8]
   12bac:	mov	r7, #148	; 0x94
   12bb0:	mov	r1, r5
   12bb4:	mov	r2, #0
   12bb8:	mov	r3, #86	; 0x56
   12bbc:	ldr	r0, [r0, #4]
   12bc0:	str	r7, [sp]
   12bc4:	bl	150dc <UnityAssertEqualNumber@@Base>
   12bc8:	mov	r0, r4
   12bcc:	mov	r1, r6
   12bd0:	bl	182e8 <push_back@@Base>
   12bd4:	ldr	r0, [sp, #8]
   12bd8:	mov	r1, r6
   12bdc:	mov	r2, #0
   12be0:	mov	r3, #88	; 0x58
   12be4:	ldr	r0, [r0, #4]
   12be8:	str	r7, [sp]
   12bec:	bl	150dc <UnityAssertEqualNumber@@Base>
   12bf0:	mov	r0, r4
   12bf4:	bl	18218 <destroy_lexer@@Base>
   12bf8:	mov	r0, r5
   12bfc:	bl	1265c <free@plt>
   12c00:	mov	r0, r6
   12c04:	bl	1265c <free@plt>
   12c08:	sub	sp, fp, #16
   12c0c:	pop	{r4, r5, r6, r7, fp, pc}
   12c10:	andeq	r0, r0, r1
   12c14:	andeq	r0, r0, r0
   12c18:	andeq	r0, r0, r1
   12c1c:	andeq	r0, r0, r0

00012c20 <push_token_and_call_next@@Base>:
   12c20:	push	{r4, r5, fp, lr}
   12c24:	add	fp, sp, #8
   12c28:	sub	sp, sp, #16
   12c2c:	movw	r0, #61728	; 0xf120
   12c30:	add	r1, pc, #120	; 0x78
   12c34:	add	r4, sp, #4
   12c38:	movt	r0, #2
   12c3c:	vld1.64	{d16-d17}, [r1]
   12c40:	movw	r1, #52036	; 0xcb44
   12c44:	movt	r1, #1
   12c48:	vld1.64	{d18-d19}, [r0 :128]
   12c4c:	vadd.i64	q8, q9, q8
   12c50:	vst1.64	{d16-d17}, [r0 :128]
   12c54:	mov	r0, r4
   12c58:	bl	181d8 <init_lexer@@Base>
   12c5c:	mov	r0, #8
   12c60:	bl	126ec <malloc@plt>
   12c64:	mov	r5, r0
   12c68:	mov	r0, r4
   12c6c:	mov	r1, r5
   12c70:	bl	182e8 <push_back@@Base>
   12c74:	mov	r0, r4
   12c78:	bl	18458 <next@@Base>
   12c7c:	mov	r1, r0
   12c80:	mov	r0, #148	; 0x94
   12c84:	mov	r2, #0
   12c88:	mov	r3, #113	; 0x71
   12c8c:	str	r0, [sp]
   12c90:	mov	r0, r5
   12c94:	bl	150dc <UnityAssertEqualNumber@@Base>
   12c98:	mov	r0, r4
   12c9c:	bl	18218 <destroy_lexer@@Base>
   12ca0:	mov	r0, r5
   12ca4:	bl	1265c <free@plt>
   12ca8:	sub	sp, fp, #8
   12cac:	pop	{r4, r5, fp, pc}
   12cb0:	andeq	r0, r0, r1
   12cb4:	andeq	r0, r0, r0
   12cb8:	andeq	r0, r0, r1
   12cbc:	andeq	r0, r0, r0

00012cc0 <if_without_else@@Base>:
   12cc0:	push	{r4, r5, fp, lr}
   12cc4:	add	fp, sp, #8
   12cc8:	sub	sp, sp, #16
   12ccc:	movw	r0, #61744	; 0xf130
   12cd0:	add	r1, pc, #728	; 0x2d8
   12cd4:	add	r4, sp, #4
   12cd8:	movt	r0, #2
   12cdc:	vld1.64	{d16-d17}, [r1]
   12ce0:	movw	r1, #52062	; 0xcb5e
   12ce4:	movt	r1, #1
   12ce8:	vld1.64	{d18-d19}, [r0 :128]
   12cec:	vadd.i64	q8, q9, q8
   12cf0:	vst1.64	{d16-d17}, [r0 :128]
   12cf4:	mov	r0, r4
   12cf8:	bl	181d8 <init_lexer@@Base>
   12cfc:	mov	r0, r4
   12d00:	bl	18458 <next@@Base>
   12d04:	ldr	r1, [r0]
   12d08:	mov	r5, #148	; 0x94
   12d0c:	mov	r0, #0
   12d10:	mov	r2, #0
   12d14:	mov	r3, #140	; 0x8c
   12d18:	str	r5, [sp]
   12d1c:	bl	150dc <UnityAssertEqualNumber@@Base>
   12d20:	mov	r0, r4
   12d24:	bl	18458 <next@@Base>
   12d28:	ldr	r1, [r0]
   12d2c:	mov	r0, #2
   12d30:	mov	r2, #0
   12d34:	mov	r3, #142	; 0x8e
   12d38:	str	r5, [sp]
   12d3c:	bl	150dc <UnityAssertEqualNumber@@Base>
   12d40:	mov	r0, r4
   12d44:	bl	18458 <next@@Base>
   12d48:	ldr	r1, [r0]
   12d4c:	mov	r0, #3
   12d50:	mov	r2, #0
   12d54:	mov	r3, #144	; 0x90
   12d58:	str	r5, [sp]
   12d5c:	bl	150dc <UnityAssertEqualNumber@@Base>
   12d60:	mov	r0, r4
   12d64:	bl	18458 <next@@Base>
   12d68:	ldr	r1, [r0]
   12d6c:	mov	r0, #4
   12d70:	mov	r2, #0
   12d74:	mov	r3, #146	; 0x92
   12d78:	str	r5, [sp]
   12d7c:	bl	150dc <UnityAssertEqualNumber@@Base>
   12d80:	mov	r0, r4
   12d84:	bl	18458 <next@@Base>
   12d88:	ldr	r1, [r0]
   12d8c:	mov	r0, #5
   12d90:	mov	r2, #0
   12d94:	mov	r3, #148	; 0x94
   12d98:	str	r5, [sp]
   12d9c:	bl	150dc <UnityAssertEqualNumber@@Base>
   12da0:	mov	r0, r4
   12da4:	bl	18458 <next@@Base>
   12da8:	ldr	r1, [r0]
   12dac:	mov	r0, #10
   12db0:	mov	r2, #0
   12db4:	mov	r3, #150	; 0x96
   12db8:	str	r5, [sp]
   12dbc:	bl	150dc <UnityAssertEqualNumber@@Base>
   12dc0:	mov	r0, r4
   12dc4:	bl	18458 <next@@Base>
   12dc8:	ldr	r1, [r0]
   12dcc:	mov	r0, #3
   12dd0:	mov	r2, #0
   12dd4:	mov	r3, #152	; 0x98
   12dd8:	str	r5, [sp]
   12ddc:	bl	150dc <UnityAssertEqualNumber@@Base>
   12de0:	mov	r0, r4
   12de4:	bl	18458 <next@@Base>
   12de8:	ldr	r1, [r0]
   12dec:	mov	r0, #1
   12df0:	mov	r2, #0
   12df4:	mov	r3, #154	; 0x9a
   12df8:	str	r5, [sp]
   12dfc:	bl	150dc <UnityAssertEqualNumber@@Base>
   12e00:	mov	r0, r4
   12e04:	bl	18458 <next@@Base>
   12e08:	ldr	r1, [r0]
   12e0c:	mov	r0, #12
   12e10:	mov	r2, #0
   12e14:	mov	r3, #156	; 0x9c
   12e18:	str	r5, [sp]
   12e1c:	bl	150dc <UnityAssertEqualNumber@@Base>
   12e20:	mov	r0, r4
   12e24:	bl	18458 <next@@Base>
   12e28:	ldr	r1, [r0]
   12e2c:	mov	r0, #1
   12e30:	mov	r2, #0
   12e34:	mov	r3, #158	; 0x9e
   12e38:	str	r5, [sp]
   12e3c:	bl	150dc <UnityAssertEqualNumber@@Base>
   12e40:	mov	r0, r4
   12e44:	bl	18458 <next@@Base>
   12e48:	ldr	r1, [r0]
   12e4c:	mov	r0, #4
   12e50:	mov	r2, #0
   12e54:	mov	r3, #160	; 0xa0
   12e58:	str	r5, [sp]
   12e5c:	bl	150dc <UnityAssertEqualNumber@@Base>
   12e60:	mov	r0, r4
   12e64:	bl	18458 <next@@Base>
   12e68:	ldr	r1, [r0]
   12e6c:	mov	r0, #5
   12e70:	mov	r2, #0
   12e74:	mov	r3, #162	; 0xa2
   12e78:	str	r5, [sp]
   12e7c:	bl	150dc <UnityAssertEqualNumber@@Base>
   12e80:	mov	r0, r4
   12e84:	bl	18458 <next@@Base>
   12e88:	ldr	r1, [r0]
   12e8c:	mov	r0, #7
   12e90:	mov	r2, #0
   12e94:	mov	r3, #164	; 0xa4
   12e98:	str	r5, [sp]
   12e9c:	bl	150dc <UnityAssertEqualNumber@@Base>
   12ea0:	mov	r0, r4
   12ea4:	bl	18458 <next@@Base>
   12ea8:	ldr	r1, [r0]
   12eac:	mov	r0, #1
   12eb0:	mov	r2, #0
   12eb4:	mov	r3, #166	; 0xa6
   12eb8:	str	r5, [sp]
   12ebc:	bl	150dc <UnityAssertEqualNumber@@Base>
   12ec0:	mov	r0, r4
   12ec4:	bl	18458 <next@@Base>
   12ec8:	ldr	r1, [r0]
   12ecc:	mov	r0, #8
   12ed0:	mov	r2, #0
   12ed4:	mov	r3, #168	; 0xa8
   12ed8:	str	r5, [sp]
   12edc:	bl	150dc <UnityAssertEqualNumber@@Base>
   12ee0:	mov	r0, r4
   12ee4:	bl	18458 <next@@Base>
   12ee8:	ldr	r1, [r0]
   12eec:	mov	r0, #6
   12ef0:	mov	r2, #0
   12ef4:	mov	r3, #170	; 0xaa
   12ef8:	str	r5, [sp]
   12efc:	bl	150dc <UnityAssertEqualNumber@@Base>
   12f00:	mov	r0, r4
   12f04:	bl	18458 <next@@Base>
   12f08:	ldr	r1, [r0]
   12f0c:	mov	r0, #7
   12f10:	mov	r2, #0
   12f14:	mov	r3, #172	; 0xac
   12f18:	str	r5, [sp]
   12f1c:	bl	150dc <UnityAssertEqualNumber@@Base>
   12f20:	mov	r0, r4
   12f24:	bl	18458 <next@@Base>
   12f28:	ldr	r1, [r0]
   12f2c:	mov	r0, #1
   12f30:	mov	r2, #0
   12f34:	mov	r3, #174	; 0xae
   12f38:	str	r5, [sp]
   12f3c:	bl	150dc <UnityAssertEqualNumber@@Base>
   12f40:	mov	r0, r4
   12f44:	bl	18458 <next@@Base>
   12f48:	ldr	r1, [r0]
   12f4c:	mov	r0, #8
   12f50:	mov	r2, #0
   12f54:	mov	r3, #176	; 0xb0
   12f58:	str	r5, [sp]
   12f5c:	bl	150dc <UnityAssertEqualNumber@@Base>
   12f60:	mov	r0, r4
   12f64:	bl	18458 <next@@Base>
   12f68:	ldr	r1, [r0]
   12f6c:	mov	r0, #6
   12f70:	mov	r2, #0
   12f74:	mov	r3, #178	; 0xb2
   12f78:	str	r5, [sp]
   12f7c:	bl	150dc <UnityAssertEqualNumber@@Base>
   12f80:	mov	r0, r4
   12f84:	bl	18458 <next@@Base>
   12f88:	ldr	r1, [r0]
   12f8c:	mov	r0, #9
   12f90:	mov	r2, #0
   12f94:	mov	r3, #180	; 0xb4
   12f98:	str	r5, [sp]
   12f9c:	bl	150dc <UnityAssertEqualNumber@@Base>
   12fa0:	mov	r0, r4
   12fa4:	bl	18218 <destroy_lexer@@Base>
   12fa8:	sub	sp, fp, #8
   12fac:	pop	{r4, r5, fp, pc}
   12fb0:	andeq	r0, r0, r1
   12fb4:	andeq	r0, r0, r0
   12fb8:	andeq	r0, r0, r1
   12fbc:	andeq	r0, r0, r0

00012fc0 <if_with_else@@Base>:
   12fc0:	push	{r4, r5, fp, lr}
   12fc4:	add	fp, sp, #8
   12fc8:	sub	sp, sp, #16
   12fcc:	movw	r0, #61760	; 0xf140
   12fd0:	add	r1, pc, #920	; 0x398
   12fd4:	add	r4, sp, #4
   12fd8:	movt	r0, #2
   12fdc:	vld1.64	{d16-d17}, [r1]
   12fe0:	movw	r1, #52119	; 0xcb97
   12fe4:	movt	r1, #1
   12fe8:	vld1.64	{d18-d19}, [r0 :128]
   12fec:	vadd.i64	q8, q9, q8
   12ff0:	vst1.64	{d16-d17}, [r0 :128]
   12ff4:	mov	r0, r4
   12ff8:	bl	181d8 <init_lexer@@Base>
   12ffc:	mov	r0, r4
   13000:	bl	18458 <next@@Base>
   13004:	ldr	r1, [r0]
   13008:	mov	r5, #148	; 0x94
   1300c:	mov	r0, #0
   13010:	mov	r2, #0
   13014:	mov	r3, #210	; 0xd2
   13018:	str	r5, [sp]
   1301c:	bl	150dc <UnityAssertEqualNumber@@Base>
   13020:	mov	r0, r4
   13024:	bl	18458 <next@@Base>
   13028:	ldr	r1, [r0]
   1302c:	mov	r0, #2
   13030:	mov	r2, #0
   13034:	mov	r3, #212	; 0xd4
   13038:	str	r5, [sp]
   1303c:	bl	150dc <UnityAssertEqualNumber@@Base>
   13040:	mov	r0, r4
   13044:	bl	18458 <next@@Base>
   13048:	ldr	r1, [r0]
   1304c:	mov	r0, #3
   13050:	mov	r2, #0
   13054:	mov	r3, #214	; 0xd6
   13058:	str	r5, [sp]
   1305c:	bl	150dc <UnityAssertEqualNumber@@Base>
   13060:	mov	r0, r4
   13064:	bl	18458 <next@@Base>
   13068:	ldr	r1, [r0]
   1306c:	mov	r0, #4
   13070:	mov	r2, #0
   13074:	mov	r3, #216	; 0xd8
   13078:	str	r5, [sp]
   1307c:	bl	150dc <UnityAssertEqualNumber@@Base>
   13080:	mov	r0, r4
   13084:	bl	18458 <next@@Base>
   13088:	ldr	r1, [r0]
   1308c:	mov	r0, #5
   13090:	mov	r2, #0
   13094:	mov	r3, #218	; 0xda
   13098:	str	r5, [sp]
   1309c:	bl	150dc <UnityAssertEqualNumber@@Base>
   130a0:	mov	r0, r4
   130a4:	bl	18458 <next@@Base>
   130a8:	ldr	r1, [r0]
   130ac:	mov	r0, #10
   130b0:	mov	r2, #0
   130b4:	mov	r3, #220	; 0xdc
   130b8:	str	r5, [sp]
   130bc:	bl	150dc <UnityAssertEqualNumber@@Base>
   130c0:	mov	r0, r4
   130c4:	bl	18458 <next@@Base>
   130c8:	ldr	r1, [r0]
   130cc:	mov	r0, #3
   130d0:	mov	r2, #0
   130d4:	mov	r3, #222	; 0xde
   130d8:	str	r5, [sp]
   130dc:	bl	150dc <UnityAssertEqualNumber@@Base>
   130e0:	mov	r0, r4
   130e4:	bl	18458 <next@@Base>
   130e8:	ldr	r1, [r0]
   130ec:	mov	r0, #1
   130f0:	mov	r2, #0
   130f4:	mov	r3, #224	; 0xe0
   130f8:	str	r5, [sp]
   130fc:	bl	150dc <UnityAssertEqualNumber@@Base>
   13100:	mov	r0, r4
   13104:	bl	18458 <next@@Base>
   13108:	ldr	r1, [r0]
   1310c:	mov	r0, #12
   13110:	mov	r2, #0
   13114:	mov	r3, #226	; 0xe2
   13118:	str	r5, [sp]
   1311c:	bl	150dc <UnityAssertEqualNumber@@Base>
   13120:	mov	r0, r4
   13124:	bl	18458 <next@@Base>
   13128:	ldr	r1, [r0]
   1312c:	mov	r0, #1
   13130:	mov	r2, #0
   13134:	mov	r3, #228	; 0xe4
   13138:	str	r5, [sp]
   1313c:	bl	150dc <UnityAssertEqualNumber@@Base>
   13140:	mov	r0, r4
   13144:	bl	18458 <next@@Base>
   13148:	ldr	r1, [r0]
   1314c:	mov	r0, #4
   13150:	mov	r2, #0
   13154:	mov	r3, #230	; 0xe6
   13158:	str	r5, [sp]
   1315c:	bl	150dc <UnityAssertEqualNumber@@Base>
   13160:	mov	r0, r4
   13164:	bl	18458 <next@@Base>
   13168:	ldr	r1, [r0]
   1316c:	mov	r0, #5
   13170:	mov	r2, #0
   13174:	mov	r3, #232	; 0xe8
   13178:	str	r5, [sp]
   1317c:	bl	150dc <UnityAssertEqualNumber@@Base>
   13180:	mov	r0, r4
   13184:	bl	18458 <next@@Base>
   13188:	ldr	r1, [r0]
   1318c:	mov	r0, #7
   13190:	mov	r2, #0
   13194:	mov	r3, #234	; 0xea
   13198:	str	r5, [sp]
   1319c:	bl	150dc <UnityAssertEqualNumber@@Base>
   131a0:	mov	r0, r4
   131a4:	bl	18458 <next@@Base>
   131a8:	ldr	r1, [r0]
   131ac:	mov	r0, #1
   131b0:	mov	r2, #0
   131b4:	mov	r3, #236	; 0xec
   131b8:	str	r5, [sp]
   131bc:	bl	150dc <UnityAssertEqualNumber@@Base>
   131c0:	mov	r0, r4
   131c4:	bl	18458 <next@@Base>
   131c8:	ldr	r1, [r0]
   131cc:	mov	r0, #8
   131d0:	mov	r2, #0
   131d4:	mov	r3, #238	; 0xee
   131d8:	str	r5, [sp]
   131dc:	bl	150dc <UnityAssertEqualNumber@@Base>
   131e0:	mov	r0, r4
   131e4:	bl	18458 <next@@Base>
   131e8:	ldr	r1, [r0]
   131ec:	mov	r0, #6
   131f0:	mov	r2, #0
   131f4:	mov	r3, #240	; 0xf0
   131f8:	str	r5, [sp]
   131fc:	bl	150dc <UnityAssertEqualNumber@@Base>
   13200:	mov	r0, r4
   13204:	bl	18458 <next@@Base>
   13208:	ldr	r1, [r0]
   1320c:	mov	r0, #11
   13210:	mov	r2, #0
   13214:	mov	r3, #242	; 0xf2
   13218:	str	r5, [sp]
   1321c:	bl	150dc <UnityAssertEqualNumber@@Base>
   13220:	mov	r0, r4
   13224:	bl	18458 <next@@Base>
   13228:	ldr	r1, [r0]
   1322c:	mov	r0, #5
   13230:	mov	r2, #0
   13234:	mov	r3, #244	; 0xf4
   13238:	str	r5, [sp]
   1323c:	bl	150dc <UnityAssertEqualNumber@@Base>
   13240:	mov	r0, r4
   13244:	bl	18458 <next@@Base>
   13248:	ldr	r1, [r0]
   1324c:	mov	r0, #7
   13250:	mov	r2, #0
   13254:	mov	r3, #246	; 0xf6
   13258:	str	r5, [sp]
   1325c:	bl	150dc <UnityAssertEqualNumber@@Base>
   13260:	mov	r0, r4
   13264:	bl	18458 <next@@Base>
   13268:	ldr	r1, [r0]
   1326c:	mov	r0, #1
   13270:	mov	r2, #0
   13274:	mov	r3, #248	; 0xf8
   13278:	str	r5, [sp]
   1327c:	bl	150dc <UnityAssertEqualNumber@@Base>
   13280:	mov	r0, r4
   13284:	bl	18458 <next@@Base>
   13288:	ldr	r1, [r0]
   1328c:	mov	r0, #8
   13290:	mov	r2, #0
   13294:	mov	r3, #250	; 0xfa
   13298:	str	r5, [sp]
   1329c:	bl	150dc <UnityAssertEqualNumber@@Base>
   132a0:	mov	r0, r4
   132a4:	bl	18458 <next@@Base>
   132a8:	ldr	r1, [r0]
   132ac:	mov	r0, #6
   132b0:	mov	r2, #0
   132b4:	mov	r3, #252	; 0xfc
   132b8:	str	r5, [sp]
   132bc:	bl	150dc <UnityAssertEqualNumber@@Base>
   132c0:	mov	r0, r4
   132c4:	bl	18458 <next@@Base>
   132c8:	ldr	r1, [r0]
   132cc:	mov	r0, #7
   132d0:	mov	r2, #0
   132d4:	mov	r3, #254	; 0xfe
   132d8:	str	r5, [sp]
   132dc:	bl	150dc <UnityAssertEqualNumber@@Base>
   132e0:	mov	r0, r4
   132e4:	bl	18458 <next@@Base>
   132e8:	ldr	r1, [r0]
   132ec:	mov	r0, #1
   132f0:	mov	r2, #0
   132f4:	mov	r3, #256	; 0x100
   132f8:	str	r5, [sp]
   132fc:	bl	150dc <UnityAssertEqualNumber@@Base>
   13300:	mov	r0, r4
   13304:	bl	18458 <next@@Base>
   13308:	ldr	r1, [r0]
   1330c:	mov	r0, #8
   13310:	mov	r2, #0
   13314:	movw	r3, #258	; 0x102
   13318:	str	r5, [sp]
   1331c:	bl	150dc <UnityAssertEqualNumber@@Base>
   13320:	mov	r0, r4
   13324:	bl	18458 <next@@Base>
   13328:	ldr	r1, [r0]
   1332c:	mov	r0, #6
   13330:	mov	r2, #0
   13334:	mov	r3, #260	; 0x104
   13338:	str	r5, [sp]
   1333c:	bl	150dc <UnityAssertEqualNumber@@Base>
   13340:	mov	r0, r4
   13344:	bl	18458 <next@@Base>
   13348:	ldr	r1, [r0]
   1334c:	mov	r0, #9
   13350:	mov	r2, #0
   13354:	movw	r3, #262	; 0x106
   13358:	str	r5, [sp]
   1335c:	bl	150dc <UnityAssertEqualNumber@@Base>
   13360:	mov	r0, r4
   13364:	bl	18218 <destroy_lexer@@Base>
   13368:	sub	sp, fp, #8
   1336c:	pop	{r4, r5, fp, pc}
   13370:	andeq	r0, r0, r1
   13374:	andeq	r0, r0, r0
   13378:	andeq	r0, r0, r1
   1337c:	andeq	r0, r0, r0

00013380 <read_token_int_type@@Base>:
   13380:	push	{r4, sl, fp, lr}
   13384:	add	fp, sp, #8
   13388:	sub	sp, sp, #16
   1338c:	movw	r0, #61776	; 0xf150
   13390:	add	r1, pc, #88	; 0x58
   13394:	add	r4, sp, #4
   13398:	movt	r0, #2
   1339c:	vld1.64	{d16-d17}, [r1]
   133a0:	movw	r1, #55285	; 0xd7f5
   133a4:	movt	r1, #1
   133a8:	vld1.64	{d18-d19}, [r0 :128]
   133ac:	vadd.i64	q8, q9, q8
   133b0:	vst1.64	{d16-d17}, [r0 :128]
   133b4:	mov	r0, r4
   133b8:	bl	181d8 <init_lexer@@Base>
   133bc:	mov	r0, r4
   133c0:	bl	18458 <next@@Base>
   133c4:	ldr	r1, [r0]
   133c8:	mov	r0, #148	; 0x94
   133cc:	mov	r2, #0
   133d0:	movw	r3, #279	; 0x117
   133d4:	str	r0, [sp]
   133d8:	mov	r0, #0
   133dc:	bl	150dc <UnityAssertEqualNumber@@Base>
   133e0:	mov	r0, r4
   133e4:	bl	18218 <destroy_lexer@@Base>
   133e8:	sub	sp, fp, #8
   133ec:	pop	{r4, sl, fp, pc}
   133f0:	andeq	r0, r0, r1
   133f4:	andeq	r0, r0, r0
   133f8:	andeq	r0, r0, r1
   133fc:	andeq	r0, r0, r0

00013400 <read_token_int_value@@Base>:
   13400:	push	{r4, sl, fp, lr}
   13404:	add	fp, sp, #8
   13408:	sub	sp, sp, #16
   1340c:	movw	r0, #61792	; 0xf160
   13410:	add	r1, pc, #88	; 0x58
   13414:	add	r4, sp, #4
   13418:	movt	r0, #2
   1341c:	vld1.64	{d16-d17}, [r1]
   13420:	movw	r1, #52200	; 0xcbe8
   13424:	movt	r1, #1
   13428:	vld1.64	{d18-d19}, [r0 :128]
   1342c:	vadd.i64	q8, q9, q8
   13430:	vst1.64	{d16-d17}, [r0 :128]
   13434:	mov	r0, r4
   13438:	bl	181d8 <init_lexer@@Base>
   1343c:	mov	r0, r4
   13440:	bl	18458 <next@@Base>
   13444:	ldr	r1, [r0]
   13448:	mov	r0, #148	; 0x94
   1344c:	mov	r2, #0
   13450:	mov	r3, #296	; 0x128
   13454:	str	r0, [sp]
   13458:	mov	r0, #1
   1345c:	bl	150dc <UnityAssertEqualNumber@@Base>
   13460:	mov	r0, r4
   13464:	bl	18218 <destroy_lexer@@Base>
   13468:	sub	sp, fp, #8
   1346c:	pop	{r4, sl, fp, pc}
   13470:	andeq	r0, r0, r1
   13474:	andeq	r0, r0, r0
   13478:	andeq	r0, r0, r1
   1347c:	andeq	r0, r0, r0

00013480 <read_token_function@@Base>:
   13480:	push	{r4, sl, fp, lr}
   13484:	add	fp, sp, #8
   13488:	sub	sp, sp, #16
   1348c:	movw	r0, #61808	; 0xf170
   13490:	add	r1, pc, #88	; 0x58
   13494:	add	r4, sp, #4
   13498:	movt	r0, #2
   1349c:	vld1.64	{d16-d17}, [r1]
   134a0:	movw	r1, #52423	; 0xccc7
   134a4:	movt	r1, #1
   134a8:	vld1.64	{d18-d19}, [r0 :128]
   134ac:	vadd.i64	q8, q9, q8
   134b0:	vst1.64	{d16-d17}, [r0 :128]
   134b4:	mov	r0, r4
   134b8:	bl	181d8 <init_lexer@@Base>
   134bc:	mov	r0, r4
   134c0:	bl	18458 <next@@Base>
   134c4:	ldr	r1, [r0]
   134c8:	mov	r0, #148	; 0x94
   134cc:	mov	r2, #0
   134d0:	movw	r3, #313	; 0x139
   134d4:	str	r0, [sp]
   134d8:	mov	r0, #2
   134dc:	bl	150dc <UnityAssertEqualNumber@@Base>
   134e0:	mov	r0, r4
   134e4:	bl	18218 <destroy_lexer@@Base>
   134e8:	sub	sp, fp, #8
   134ec:	pop	{r4, sl, fp, pc}
   134f0:	andeq	r0, r0, r1
   134f4:	andeq	r0, r0, r0
   134f8:	andeq	r0, r0, r1
   134fc:	andeq	r0, r0, r0

00013500 <read_token_opar@@Base>:
   13500:	push	{r4, sl, fp, lr}
   13504:	add	fp, sp, #8
   13508:	sub	sp, sp, #16
   1350c:	movw	r0, #61824	; 0xf180
   13510:	add	r1, pc, #88	; 0x58
   13514:	add	r4, sp, #4
   13518:	movt	r0, #2
   1351c:	vld1.64	{d16-d17}, [r1]
   13520:	movw	r1, #52205	; 0xcbed
   13524:	movt	r1, #1
   13528:	vld1.64	{d18-d19}, [r0 :128]
   1352c:	vadd.i64	q8, q9, q8
   13530:	vst1.64	{d16-d17}, [r0 :128]
   13534:	mov	r0, r4
   13538:	bl	181d8 <init_lexer@@Base>
   1353c:	mov	r0, r4
   13540:	bl	18458 <next@@Base>
   13544:	ldr	r1, [r0]
   13548:	mov	r0, #148	; 0x94
   1354c:	mov	r2, #0
   13550:	movw	r3, #330	; 0x14a
   13554:	str	r0, [sp]
   13558:	mov	r0, #3
   1355c:	bl	150dc <UnityAssertEqualNumber@@Base>
   13560:	mov	r0, r4
   13564:	bl	18218 <destroy_lexer@@Base>
   13568:	sub	sp, fp, #8
   1356c:	pop	{r4, sl, fp, pc}
   13570:	andeq	r0, r0, r1
   13574:	andeq	r0, r0, r0
   13578:	andeq	r0, r0, r1
   1357c:	andeq	r0, r0, r0

00013580 <read_token_cpar@@Base>:
   13580:	push	{r4, sl, fp, lr}
   13584:	add	fp, sp, #8
   13588:	sub	sp, sp, #16
   1358c:	movw	r0, #61840	; 0xf190
   13590:	add	r1, pc, #88	; 0x58
   13594:	add	r4, sp, #4
   13598:	movt	r0, #2
   1359c:	vld1.64	{d16-d17}, [r1]
   135a0:	movw	r1, #52207	; 0xcbef
   135a4:	movt	r1, #1
   135a8:	vld1.64	{d18-d19}, [r0 :128]
   135ac:	vadd.i64	q8, q9, q8
   135b0:	vst1.64	{d16-d17}, [r0 :128]
   135b4:	mov	r0, r4
   135b8:	bl	181d8 <init_lexer@@Base>
   135bc:	mov	r0, r4
   135c0:	bl	18458 <next@@Base>
   135c4:	ldr	r1, [r0]
   135c8:	mov	r0, #148	; 0x94
   135cc:	mov	r2, #0
   135d0:	movw	r3, #347	; 0x15b
   135d4:	str	r0, [sp]
   135d8:	mov	r0, #4
   135dc:	bl	150dc <UnityAssertEqualNumber@@Base>
   135e0:	mov	r0, r4
   135e4:	bl	18218 <destroy_lexer@@Base>
   135e8:	sub	sp, fp, #8
   135ec:	pop	{r4, sl, fp, pc}
   135f0:	andeq	r0, r0, r1
   135f4:	andeq	r0, r0, r0
   135f8:	andeq	r0, r0, r1
   135fc:	andeq	r0, r0, r0

00013600 <read_token_obra@@Base>:
   13600:	push	{r4, sl, fp, lr}
   13604:	add	fp, sp, #8
   13608:	sub	sp, sp, #16
   1360c:	movw	r0, #61856	; 0xf1a0
   13610:	add	r1, pc, #88	; 0x58
   13614:	add	r4, sp, #4
   13618:	movt	r0, #2
   1361c:	vld1.64	{d16-d17}, [r1]
   13620:	movw	r1, #52209	; 0xcbf1
   13624:	movt	r1, #1
   13628:	vld1.64	{d18-d19}, [r0 :128]
   1362c:	vadd.i64	q8, q9, q8
   13630:	vst1.64	{d16-d17}, [r0 :128]
   13634:	mov	r0, r4
   13638:	bl	181d8 <init_lexer@@Base>
   1363c:	mov	r0, r4
   13640:	bl	18458 <next@@Base>
   13644:	ldr	r1, [r0]
   13648:	mov	r0, #148	; 0x94
   1364c:	mov	r2, #0
   13650:	mov	r3, #364	; 0x16c
   13654:	str	r0, [sp]
   13658:	mov	r0, #5
   1365c:	bl	150dc <UnityAssertEqualNumber@@Base>
   13660:	mov	r0, r4
   13664:	bl	18218 <destroy_lexer@@Base>
   13668:	sub	sp, fp, #8
   1366c:	pop	{r4, sl, fp, pc}
   13670:	andeq	r0, r0, r1
   13674:	andeq	r0, r0, r0
   13678:	andeq	r0, r0, r1
   1367c:	andeq	r0, r0, r0

00013680 <read_token_cbra@@Base>:
   13680:	push	{r4, sl, fp, lr}
   13684:	add	fp, sp, #8
   13688:	sub	sp, sp, #16
   1368c:	movw	r0, #61872	; 0xf1b0
   13690:	add	r1, pc, #88	; 0x58
   13694:	add	r4, sp, #4
   13698:	movt	r0, #2
   1369c:	vld1.64	{d16-d17}, [r1]
   136a0:	movw	r1, #52060	; 0xcb5c
   136a4:	movt	r1, #1
   136a8:	vld1.64	{d18-d19}, [r0 :128]
   136ac:	vadd.i64	q8, q9, q8
   136b0:	vst1.64	{d16-d17}, [r0 :128]
   136b4:	mov	r0, r4
   136b8:	bl	181d8 <init_lexer@@Base>
   136bc:	mov	r0, r4
   136c0:	bl	18458 <next@@Base>
   136c4:	ldr	r1, [r0]
   136c8:	mov	r0, #148	; 0x94
   136cc:	mov	r2, #0
   136d0:	movw	r3, #382	; 0x17e
   136d4:	str	r0, [sp]
   136d8:	mov	r0, #6
   136dc:	bl	150dc <UnityAssertEqualNumber@@Base>
   136e0:	mov	r0, r4
   136e4:	bl	18218 <destroy_lexer@@Base>
   136e8:	sub	sp, fp, #8
   136ec:	pop	{r4, sl, fp, pc}
   136f0:	andeq	r0, r0, r1
   136f4:	andeq	r0, r0, r0
   136f8:	andeq	r0, r0, r1
   136fc:	andeq	r0, r0, r0

00013700 <read_token_return@@Base>:
   13700:	push	{r4, sl, fp, lr}
   13704:	add	fp, sp, #8
   13708:	sub	sp, sp, #16
   1370c:	movw	r0, #61888	; 0xf1c0
   13710:	add	r1, pc, #88	; 0x58
   13714:	add	r4, sp, #4
   13718:	movt	r0, #2
   1371c:	vld1.64	{d16-d17}, [r1]
   13720:	movw	r1, #52663	; 0xcdb7
   13724:	movt	r1, #1
   13728:	vld1.64	{d18-d19}, [r0 :128]
   1372c:	vadd.i64	q8, q9, q8
   13730:	vst1.64	{d16-d17}, [r0 :128]
   13734:	mov	r0, r4
   13738:	bl	181d8 <init_lexer@@Base>
   1373c:	mov	r0, r4
   13740:	bl	18458 <next@@Base>
   13744:	ldr	r1, [r0]
   13748:	mov	r0, #148	; 0x94
   1374c:	mov	r2, #0
   13750:	movw	r3, #399	; 0x18f
   13754:	str	r0, [sp]
   13758:	mov	r0, #7
   1375c:	bl	150dc <UnityAssertEqualNumber@@Base>
   13760:	mov	r0, r4
   13764:	bl	18218 <destroy_lexer@@Base>
   13768:	sub	sp, fp, #8
   1376c:	pop	{r4, sl, fp, pc}
   13770:	andeq	r0, r0, r1
   13774:	andeq	r0, r0, r0
   13778:	andeq	r0, r0, r1
   1377c:	andeq	r0, r0, r0

00013780 <read_token_semicolon@@Base>:
   13780:	push	{r4, sl, fp, lr}
   13784:	add	fp, sp, #8
   13788:	sub	sp, sp, #16
   1378c:	movw	r0, #61904	; 0xf1d0
   13790:	add	r1, pc, #88	; 0x58
   13794:	add	r4, sp, #4
   13798:	movt	r0, #2
   1379c:	vld1.64	{d16-d17}, [r1]
   137a0:	movw	r1, #52211	; 0xcbf3
   137a4:	movt	r1, #1
   137a8:	vld1.64	{d18-d19}, [r0 :128]
   137ac:	vadd.i64	q8, q9, q8
   137b0:	vst1.64	{d16-d17}, [r0 :128]
   137b4:	mov	r0, r4
   137b8:	bl	181d8 <init_lexer@@Base>
   137bc:	mov	r0, r4
   137c0:	bl	18458 <next@@Base>
   137c4:	ldr	r1, [r0]
   137c8:	mov	r0, #148	; 0x94
   137cc:	mov	r2, #0
   137d0:	mov	r3, #416	; 0x1a0
   137d4:	str	r0, [sp]
   137d8:	mov	r0, #8
   137dc:	bl	150dc <UnityAssertEqualNumber@@Base>
   137e0:	mov	r0, r4
   137e4:	bl	18218 <destroy_lexer@@Base>
   137e8:	sub	sp, fp, #8
   137ec:	pop	{r4, sl, fp, pc}
   137f0:	andeq	r0, r0, r1
   137f4:	andeq	r0, r0, r0
   137f8:	andeq	r0, r0, r1
   137fc:	andeq	r0, r0, r0

00013800 <read_token_eof@@Base>:
   13800:	push	{r4, sl, fp, lr}
   13804:	add	fp, sp, #8
   13808:	sub	sp, sp, #16
   1380c:	movw	r0, #61920	; 0xf1e0
   13810:	add	r1, pc, #88	; 0x58
   13814:	add	r4, sp, #4
   13818:	movt	r0, #2
   1381c:	vld1.64	{d16-d17}, [r1]
   13820:	movw	r1, #58081	; 0xe2e1
   13824:	movt	r1, #1
   13828:	vld1.64	{d18-d19}, [r0 :128]
   1382c:	vadd.i64	q8, q9, q8
   13830:	vst1.64	{d16-d17}, [r0 :128]
   13834:	mov	r0, r4
   13838:	bl	181d8 <init_lexer@@Base>
   1383c:	mov	r0, r4
   13840:	bl	18458 <next@@Base>
   13844:	ldr	r1, [r0]
   13848:	mov	r0, #148	; 0x94
   1384c:	mov	r2, #0
   13850:	movw	r3, #433	; 0x1b1
   13854:	str	r0, [sp]
   13858:	mov	r0, #9
   1385c:	bl	150dc <UnityAssertEqualNumber@@Base>
   13860:	mov	r0, r4
   13864:	bl	18218 <destroy_lexer@@Base>
   13868:	sub	sp, fp, #8
   1386c:	pop	{r4, sl, fp, pc}
   13870:	andeq	r0, r0, r1
   13874:	andeq	r0, r0, r0
   13878:	andeq	r0, r0, r1
   1387c:	andeq	r0, r0, r0

00013880 <read_token_if@@Base>:
   13880:	push	{r4, sl, fp, lr}
   13884:	add	fp, sp, #8
   13888:	sub	sp, sp, #16
   1388c:	movw	r0, #61936	; 0xf1f0
   13890:	add	r1, pc, #88	; 0x58
   13894:	add	r4, sp, #4
   13898:	movt	r0, #2
   1389c:	vld1.64	{d16-d17}, [r1]
   138a0:	movw	r1, #52717	; 0xcded
   138a4:	movt	r1, #1
   138a8:	vld1.64	{d18-d19}, [r0 :128]
   138ac:	vadd.i64	q8, q9, q8
   138b0:	vst1.64	{d16-d17}, [r0 :128]
   138b4:	mov	r0, r4
   138b8:	bl	181d8 <init_lexer@@Base>
   138bc:	mov	r0, r4
   138c0:	bl	18458 <next@@Base>
   138c4:	ldr	r1, [r0]
   138c8:	mov	r0, #148	; 0x94
   138cc:	mov	r2, #0
   138d0:	movw	r3, #450	; 0x1c2
   138d4:	str	r0, [sp]
   138d8:	mov	r0, #10
   138dc:	bl	150dc <UnityAssertEqualNumber@@Base>
   138e0:	mov	r0, r4
   138e4:	bl	18218 <destroy_lexer@@Base>
   138e8:	sub	sp, fp, #8
   138ec:	pop	{r4, sl, fp, pc}
   138f0:	andeq	r0, r0, r1
   138f4:	andeq	r0, r0, r0
   138f8:	andeq	r0, r0, r1
   138fc:	andeq	r0, r0, r0

00013900 <read_token_else@@Base>:
   13900:	push	{r4, sl, fp, lr}
   13904:	add	fp, sp, #8
   13908:	sub	sp, sp, #16
   1390c:	movw	r0, #61952	; 0xf200
   13910:	add	r1, pc, #88	; 0x58
   13914:	add	r4, sp, #4
   13918:	movt	r0, #2
   1391c:	vld1.64	{d16-d17}, [r1]
   13920:	movw	r1, #52522	; 0xcd2a
   13924:	movt	r1, #1
   13928:	vld1.64	{d18-d19}, [r0 :128]
   1392c:	vadd.i64	q8, q9, q8
   13930:	vst1.64	{d16-d17}, [r0 :128]
   13934:	mov	r0, r4
   13938:	bl	181d8 <init_lexer@@Base>
   1393c:	mov	r0, r4
   13940:	bl	18458 <next@@Base>
   13944:	ldr	r1, [r0]
   13948:	mov	r0, #148	; 0x94
   1394c:	mov	r2, #0
   13950:	movw	r3, #467	; 0x1d3
   13954:	str	r0, [sp]
   13958:	mov	r0, #11
   1395c:	bl	150dc <UnityAssertEqualNumber@@Base>
   13960:	mov	r0, r4
   13964:	bl	18218 <destroy_lexer@@Base>
   13968:	sub	sp, fp, #8
   1396c:	pop	{r4, sl, fp, pc}
   13970:	andeq	r0, r0, r1
   13974:	andeq	r0, r0, r0
   13978:	andeq	r0, r0, r1
   1397c:	andeq	r0, r0, r0

00013980 <read_token_equalequal@@Base>:
   13980:	push	{r4, sl, fp, lr}
   13984:	add	fp, sp, #8
   13988:	sub	sp, sp, #16
   1398c:	movw	r0, #61968	; 0xf210
   13990:	add	r1, pc, #88	; 0x58
   13994:	add	r4, sp, #4
   13998:	movt	r0, #2
   1399c:	vld1.64	{d16-d17}, [r1]
   139a0:	movw	r1, #52213	; 0xcbf5
   139a4:	movt	r1, #1
   139a8:	vld1.64	{d18-d19}, [r0 :128]
   139ac:	vadd.i64	q8, q9, q8
   139b0:	vst1.64	{d16-d17}, [r0 :128]
   139b4:	mov	r0, r4
   139b8:	bl	181d8 <init_lexer@@Base>
   139bc:	mov	r0, r4
   139c0:	bl	18458 <next@@Base>
   139c4:	ldr	r1, [r0]
   139c8:	mov	r0, #148	; 0x94
   139cc:	mov	r2, #0
   139d0:	mov	r3, #484	; 0x1e4
   139d4:	str	r0, [sp]
   139d8:	mov	r0, #12
   139dc:	bl	150dc <UnityAssertEqualNumber@@Base>
   139e0:	mov	r0, r4
   139e4:	bl	18218 <destroy_lexer@@Base>
   139e8:	sub	sp, fp, #8
   139ec:	pop	{r4, sl, fp, pc}
   139f0:	andeq	r0, r0, r1
   139f4:	andeq	r0, r0, r0
   139f8:	andeq	r0, r0, r1
   139fc:	andeq	r0, r0, r0

00013a00 <read_token_notequal@@Base>:
   13a00:	push	{r4, sl, fp, lr}
   13a04:	add	fp, sp, #8
   13a08:	sub	sp, sp, #16
   13a0c:	movw	r0, #61984	; 0xf220
   13a10:	add	r1, pc, #88	; 0x58
   13a14:	add	r4, sp, #4
   13a18:	movt	r0, #2
   13a1c:	vld1.64	{d16-d17}, [r1]
   13a20:	movw	r1, #52216	; 0xcbf8
   13a24:	movt	r1, #1
   13a28:	vld1.64	{d18-d19}, [r0 :128]
   13a2c:	vadd.i64	q8, q9, q8
   13a30:	vst1.64	{d16-d17}, [r0 :128]
   13a34:	mov	r0, r4
   13a38:	bl	181d8 <init_lexer@@Base>
   13a3c:	mov	r0, r4
   13a40:	bl	18458 <next@@Base>
   13a44:	ldr	r1, [r0]
   13a48:	mov	r0, #148	; 0x94
   13a4c:	mov	r2, #0
   13a50:	movw	r3, #501	; 0x1f5
   13a54:	str	r0, [sp]
   13a58:	mov	r0, #12
   13a5c:	bl	150dc <UnityAssertEqualNumber@@Base>
   13a60:	mov	r0, r4
   13a64:	bl	18218 <destroy_lexer@@Base>
   13a68:	sub	sp, fp, #8
   13a6c:	pop	{r4, sl, fp, pc}
   13a70:	andeq	r0, r0, r1
   13a74:	andeq	r0, r0, r0
   13a78:	andeq	r0, r0, r1
   13a7c:	andeq	r0, r0, r0

00013a80 <read_token_lessequalthan@@Base>:
   13a80:	push	{r4, sl, fp, lr}
   13a84:	add	fp, sp, #8
   13a88:	sub	sp, sp, #16
   13a8c:	movw	r0, #62000	; 0xf230
   13a90:	add	r1, pc, #88	; 0x58
   13a94:	add	r4, sp, #4
   13a98:	movt	r0, #2
   13a9c:	vld1.64	{d16-d17}, [r1]
   13aa0:	movw	r1, #52219	; 0xcbfb
   13aa4:	movt	r1, #1
   13aa8:	vld1.64	{d18-d19}, [r0 :128]
   13aac:	vadd.i64	q8, q9, q8
   13ab0:	vst1.64	{d16-d17}, [r0 :128]
   13ab4:	mov	r0, r4
   13ab8:	bl	181d8 <init_lexer@@Base>
   13abc:	mov	r0, r4
   13ac0:	bl	18458 <next@@Base>
   13ac4:	ldr	r1, [r0]
   13ac8:	mov	r0, #148	; 0x94
   13acc:	mov	r2, #0
   13ad0:	movw	r3, #518	; 0x206
   13ad4:	str	r0, [sp]
   13ad8:	mov	r0, #12
   13adc:	bl	150dc <UnityAssertEqualNumber@@Base>
   13ae0:	mov	r0, r4
   13ae4:	bl	18218 <destroy_lexer@@Base>
   13ae8:	sub	sp, fp, #8
   13aec:	pop	{r4, sl, fp, pc}
   13af0:	andeq	r0, r0, r1
   13af4:	andeq	r0, r0, r0
   13af8:	andeq	r0, r0, r1
   13afc:	andeq	r0, r0, r0

00013b00 <read_token_oror@@Base>:
   13b00:	push	{r4, sl, fp, lr}
   13b04:	add	fp, sp, #8
   13b08:	sub	sp, sp, #16
   13b0c:	movw	r0, #62016	; 0xf240
   13b10:	add	r1, pc, #88	; 0x58
   13b14:	add	r4, sp, #4
   13b18:	movt	r0, #2
   13b1c:	vld1.64	{d16-d17}, [r1]
   13b20:	movw	r1, #52222	; 0xcbfe
   13b24:	movt	r1, #1
   13b28:	vld1.64	{d18-d19}, [r0 :128]
   13b2c:	vadd.i64	q8, q9, q8
   13b30:	vst1.64	{d16-d17}, [r0 :128]
   13b34:	mov	r0, r4
   13b38:	bl	181d8 <init_lexer@@Base>
   13b3c:	mov	r0, r4
   13b40:	bl	18458 <next@@Base>
   13b44:	ldr	r1, [r0]
   13b48:	mov	r0, #148	; 0x94
   13b4c:	mov	r2, #0
   13b50:	movw	r3, #535	; 0x217
   13b54:	str	r0, [sp]
   13b58:	mov	r0, #12
   13b5c:	bl	150dc <UnityAssertEqualNumber@@Base>
   13b60:	mov	r0, r4
   13b64:	bl	18218 <destroy_lexer@@Base>
   13b68:	sub	sp, fp, #8
   13b6c:	pop	{r4, sl, fp, pc}
   13b70:	andeq	r0, r0, r1
   13b74:	andeq	r0, r0, r0
   13b78:	andeq	r0, r0, r1
   13b7c:	andeq	r0, r0, r0

00013b80 <read_token_andand@@Base>:
   13b80:	push	{r4, sl, fp, lr}
   13b84:	add	fp, sp, #8
   13b88:	sub	sp, sp, #16
   13b8c:	movw	r0, #62032	; 0xf250
   13b90:	add	r1, pc, #88	; 0x58
   13b94:	add	r4, sp, #4
   13b98:	movt	r0, #2
   13b9c:	vld1.64	{d16-d17}, [r1]
   13ba0:	movw	r1, #52225	; 0xcc01
   13ba4:	movt	r1, #1
   13ba8:	vld1.64	{d18-d19}, [r0 :128]
   13bac:	vadd.i64	q8, q9, q8
   13bb0:	vst1.64	{d16-d17}, [r0 :128]
   13bb4:	mov	r0, r4
   13bb8:	bl	181d8 <init_lexer@@Base>
   13bbc:	mov	r0, r4
   13bc0:	bl	18458 <next@@Base>
   13bc4:	ldr	r1, [r0]
   13bc8:	mov	r0, #148	; 0x94
   13bcc:	mov	r2, #0
   13bd0:	mov	r3, #552	; 0x228
   13bd4:	str	r0, [sp]
   13bd8:	mov	r0, #12
   13bdc:	bl	150dc <UnityAssertEqualNumber@@Base>
   13be0:	mov	r0, r4
   13be4:	bl	18218 <destroy_lexer@@Base>
   13be8:	sub	sp, fp, #8
   13bec:	pop	{r4, sl, fp, pc}
   13bf0:	andeq	r0, r0, r1
   13bf4:	andeq	r0, r0, r0
   13bf8:	andeq	r0, r0, r1
   13bfc:	andeq	r0, r0, r0

00013c00 <read_token_greaterequalthan@@Base>:
   13c00:	push	{r4, sl, fp, lr}
   13c04:	add	fp, sp, #8
   13c08:	sub	sp, sp, #16
   13c0c:	movw	r0, #62048	; 0xf260
   13c10:	add	r1, pc, #88	; 0x58
   13c14:	add	r4, sp, #4
   13c18:	movt	r0, #2
   13c1c:	vld1.64	{d16-d17}, [r1]
   13c20:	movw	r1, #52228	; 0xcc04
   13c24:	movt	r1, #1
   13c28:	vld1.64	{d18-d19}, [r0 :128]
   13c2c:	vadd.i64	q8, q9, q8
   13c30:	vst1.64	{d16-d17}, [r0 :128]
   13c34:	mov	r0, r4
   13c38:	bl	181d8 <init_lexer@@Base>
   13c3c:	mov	r0, r4
   13c40:	bl	18458 <next@@Base>
   13c44:	ldr	r1, [r0]
   13c48:	mov	r0, #148	; 0x94
   13c4c:	mov	r2, #0
   13c50:	movw	r3, #569	; 0x239
   13c54:	str	r0, [sp]
   13c58:	mov	r0, #12
   13c5c:	bl	150dc <UnityAssertEqualNumber@@Base>
   13c60:	mov	r0, r4
   13c64:	bl	18218 <destroy_lexer@@Base>
   13c68:	sub	sp, fp, #8
   13c6c:	pop	{r4, sl, fp, pc}
   13c70:	andeq	r0, r0, r1
   13c74:	andeq	r0, r0, r0
   13c78:	andeq	r0, r0, r1
   13c7c:	andeq	r0, r0, r0

00013c80 <read_token_lessthan@@Base>:
   13c80:	push	{r4, sl, fp, lr}
   13c84:	add	fp, sp, #8
   13c88:	sub	sp, sp, #16
   13c8c:	movw	r0, #62064	; 0xf270
   13c90:	add	r1, pc, #88	; 0x58
   13c94:	add	r4, sp, #4
   13c98:	movt	r0, #2
   13c9c:	vld1.64	{d16-d17}, [r1]
   13ca0:	movw	r1, #52231	; 0xcc07
   13ca4:	movt	r1, #1
   13ca8:	vld1.64	{d18-d19}, [r0 :128]
   13cac:	vadd.i64	q8, q9, q8
   13cb0:	vst1.64	{d16-d17}, [r0 :128]
   13cb4:	mov	r0, r4
   13cb8:	bl	181d8 <init_lexer@@Base>
   13cbc:	mov	r0, r4
   13cc0:	bl	18458 <next@@Base>
   13cc4:	ldr	r1, [r0]
   13cc8:	mov	r0, #148	; 0x94
   13ccc:	mov	r2, #0
   13cd0:	movw	r3, #586	; 0x24a
   13cd4:	str	r0, [sp]
   13cd8:	mov	r0, #12
   13cdc:	bl	150dc <UnityAssertEqualNumber@@Base>
   13ce0:	mov	r0, r4
   13ce4:	bl	18218 <destroy_lexer@@Base>
   13ce8:	sub	sp, fp, #8
   13cec:	pop	{r4, sl, fp, pc}
   13cf0:	andeq	r0, r0, r1
   13cf4:	andeq	r0, r0, r0
   13cf8:	andeq	r0, r0, r1
   13cfc:	andeq	r0, r0, r0

00013d00 <read_token_greaterthan@@Base>:
   13d00:	push	{r4, sl, fp, lr}
   13d04:	add	fp, sp, #8
   13d08:	sub	sp, sp, #16
   13d0c:	movw	r0, #62080	; 0xf280
   13d10:	add	r1, pc, #88	; 0x58
   13d14:	add	r4, sp, #4
   13d18:	movt	r0, #2
   13d1c:	vld1.64	{d16-d17}, [r1]
   13d20:	movw	r1, #52233	; 0xcc09
   13d24:	movt	r1, #1
   13d28:	vld1.64	{d18-d19}, [r0 :128]
   13d2c:	vadd.i64	q8, q9, q8
   13d30:	vst1.64	{d16-d17}, [r0 :128]
   13d34:	mov	r0, r4
   13d38:	bl	181d8 <init_lexer@@Base>
   13d3c:	mov	r0, r4
   13d40:	bl	18458 <next@@Base>
   13d44:	ldr	r1, [r0]
   13d48:	mov	r0, #148	; 0x94
   13d4c:	mov	r2, #0
   13d50:	movw	r3, #603	; 0x25b
   13d54:	str	r0, [sp]
   13d58:	mov	r0, #12
   13d5c:	bl	150dc <UnityAssertEqualNumber@@Base>
   13d60:	mov	r0, r4
   13d64:	bl	18218 <destroy_lexer@@Base>
   13d68:	sub	sp, fp, #8
   13d6c:	pop	{r4, sl, fp, pc}
   13d70:	andeq	r0, r0, r1
   13d74:	andeq	r0, r0, r0
   13d78:	andeq	r0, r0, r1
   13d7c:	andeq	r0, r0, r0

00013d80 <read_token_not@@Base>:
   13d80:	push	{r4, sl, fp, lr}
   13d84:	add	fp, sp, #8
   13d88:	sub	sp, sp, #16
   13d8c:	movw	r0, #62096	; 0xf290
   13d90:	add	r1, pc, #88	; 0x58
   13d94:	add	r4, sp, #4
   13d98:	movt	r0, #2
   13d9c:	vld1.64	{d16-d17}, [r1]
   13da0:	movw	r1, #52235	; 0xcc0b
   13da4:	movt	r1, #1
   13da8:	vld1.64	{d18-d19}, [r0 :128]
   13dac:	vadd.i64	q8, q9, q8
   13db0:	vst1.64	{d16-d17}, [r0 :128]
   13db4:	mov	r0, r4
   13db8:	bl	181d8 <init_lexer@@Base>
   13dbc:	mov	r0, r4
   13dc0:	bl	18458 <next@@Base>
   13dc4:	ldr	r1, [r0]
   13dc8:	mov	r0, #148	; 0x94
   13dcc:	mov	r2, #0
   13dd0:	mov	r3, #620	; 0x26c
   13dd4:	str	r0, [sp]
   13dd8:	mov	r0, #12
   13ddc:	bl	150dc <UnityAssertEqualNumber@@Base>
   13de0:	mov	r0, r4
   13de4:	bl	18218 <destroy_lexer@@Base>
   13de8:	sub	sp, fp, #8
   13dec:	pop	{r4, sl, fp, pc}
   13df0:	andeq	r0, r0, r1
   13df4:	andeq	r0, r0, r0
   13df8:	andeq	r0, r0, r1
   13dfc:	andeq	r0, r0, r0

00013e00 <main@@Base>:
   13e00:	push	{fp, lr}
   13e04:	mov	fp, sp
   13e08:	movw	r0, #62112	; 0xf2a0
   13e0c:	add	r1, pc, #684	; 0x2ac
   13e10:	movt	r0, #2
   13e14:	vld1.64	{d16-d17}, [r1]
   13e18:	vld1.64	{d18-d19}, [r0 :128]
   13e1c:	vadd.i64	q8, q9, q8
   13e20:	vst1.64	{d16-d17}, [r0 :128]
   13e24:	movw	r0, #52237	; 0xcc0d
   13e28:	movt	r0, #1
   13e2c:	bl	17398 <UnityBegin@@Base>
   13e30:	movw	r0, #10504	; 0x2908
   13e34:	movw	r1, #52406	; 0xccb6
   13e38:	movw	r2, #629	; 0x275
   13e3c:	movt	r0, #1
   13e40:	movt	r1, #1
   13e44:	bl	172a8 <UnityDefaultTestRun@@Base>
   13e48:	movw	r0, #10920	; 0x2aa8
   13e4c:	movw	r1, #52428	; 0xcccc
   13e50:	movw	r2, #630	; 0x276
   13e54:	movt	r0, #1
   13e58:	movt	r1, #1
   13e5c:	bl	172a8 <UnityDefaultTestRun@@Base>
   13e60:	movw	r0, #11080	; 0x2b48
   13e64:	movw	r1, #52448	; 0xcce0
   13e68:	movw	r2, #631	; 0x277
   13e6c:	movt	r0, #1
   13e70:	movt	r1, #1
   13e74:	bl	172a8 <UnityDefaultTestRun@@Base>
   13e78:	movw	r0, #11296	; 0x2c20
   13e7c:	movw	r1, #52473	; 0xccf9
   13e80:	mov	r2, #632	; 0x278
   13e84:	movt	r0, #1
   13e88:	movt	r1, #1
   13e8c:	bl	172a8 <UnityDefaultTestRun@@Base>
   13e90:	movw	r0, #11456	; 0x2cc0
   13e94:	movw	r1, #52498	; 0xcd12
   13e98:	movw	r2, #633	; 0x279
   13e9c:	movt	r0, #1
   13ea0:	movt	r1, #1
   13ea4:	bl	172a8 <UnityDefaultTestRun@@Base>
   13ea8:	movw	r0, #12224	; 0x2fc0
   13eac:	movw	r1, #52514	; 0xcd22
   13eb0:	movw	r2, #634	; 0x27a
   13eb4:	movt	r0, #1
   13eb8:	movt	r1, #1
   13ebc:	bl	172a8 <UnityDefaultTestRun@@Base>
   13ec0:	movw	r0, #13184	; 0x3380
   13ec4:	movw	r1, #52527	; 0xcd2f
   13ec8:	movw	r2, #635	; 0x27b
   13ecc:	movt	r0, #1
   13ed0:	movt	r1, #1
   13ed4:	bl	172a8 <UnityDefaultTestRun@@Base>
   13ed8:	movw	r0, #13312	; 0x3400
   13edc:	movw	r1, #52547	; 0xcd43
   13ee0:	mov	r2, #636	; 0x27c
   13ee4:	movt	r0, #1
   13ee8:	movt	r1, #1
   13eec:	bl	172a8 <UnityDefaultTestRun@@Base>
   13ef0:	movw	r0, #13440	; 0x3480
   13ef4:	movw	r1, #52568	; 0xcd58
   13ef8:	movw	r2, #637	; 0x27d
   13efc:	movt	r0, #1
   13f00:	movt	r1, #1
   13f04:	bl	172a8 <UnityDefaultTestRun@@Base>
   13f08:	movw	r0, #13568	; 0x3500
   13f0c:	movw	r1, #52588	; 0xcd6c
   13f10:	movw	r2, #638	; 0x27e
   13f14:	movt	r0, #1
   13f18:	movt	r1, #1
   13f1c:	bl	172a8 <UnityDefaultTestRun@@Base>
   13f20:	movw	r0, #13696	; 0x3580
   13f24:	movw	r1, #52604	; 0xcd7c
   13f28:	movw	r2, #639	; 0x27f
   13f2c:	movt	r0, #1
   13f30:	movt	r1, #1
   13f34:	bl	172a8 <UnityDefaultTestRun@@Base>
   13f38:	movw	r0, #13824	; 0x3600
   13f3c:	movw	r1, #52620	; 0xcd8c
   13f40:	mov	r2, #640	; 0x280
   13f44:	movt	r0, #1
   13f48:	movt	r1, #1
   13f4c:	bl	172a8 <UnityDefaultTestRun@@Base>
   13f50:	movw	r0, #13952	; 0x3680
   13f54:	movw	r1, #52636	; 0xcd9c
   13f58:	movw	r2, #641	; 0x281
   13f5c:	movt	r0, #1
   13f60:	movt	r1, #1
   13f64:	bl	172a8 <UnityDefaultTestRun@@Base>
   13f68:	movw	r0, #14080	; 0x3700
   13f6c:	movw	r1, #52652	; 0xcdac
   13f70:	movw	r2, #642	; 0x282
   13f74:	movt	r0, #1
   13f78:	movt	r1, #1
   13f7c:	bl	172a8 <UnityDefaultTestRun@@Base>
   13f80:	movw	r0, #14208	; 0x3780
   13f84:	movw	r1, #52670	; 0xcdbe
   13f88:	movw	r2, #643	; 0x283
   13f8c:	movt	r0, #1
   13f90:	movt	r1, #1
   13f94:	bl	172a8 <UnityDefaultTestRun@@Base>
   13f98:	movw	r0, #14336	; 0x3800
   13f9c:	movw	r1, #52691	; 0xcdd3
   13fa0:	mov	r2, #644	; 0x284
   13fa4:	movt	r0, #1
   13fa8:	movt	r1, #1
   13fac:	bl	172a8 <UnityDefaultTestRun@@Base>
   13fb0:	movw	r0, #14464	; 0x3880
   13fb4:	movw	r1, #52706	; 0xcde2
   13fb8:	movw	r2, #645	; 0x285
   13fbc:	movt	r0, #1
   13fc0:	movt	r1, #1
   13fc4:	bl	172a8 <UnityDefaultTestRun@@Base>
   13fc8:	movw	r0, #14592	; 0x3900
   13fcc:	movw	r1, #52720	; 0xcdf0
   13fd0:	movw	r2, #646	; 0x286
   13fd4:	movt	r0, #1
   13fd8:	movt	r1, #1
   13fdc:	bl	172a8 <UnityDefaultTestRun@@Base>
   13fe0:	movw	r0, #14720	; 0x3980
   13fe4:	movw	r1, #52736	; 0xce00
   13fe8:	movw	r2, #647	; 0x287
   13fec:	movt	r0, #1
   13ff0:	movt	r1, #1
   13ff4:	bl	172a8 <UnityDefaultTestRun@@Base>
   13ff8:	movw	r0, #14848	; 0x3a00
   13ffc:	movw	r1, #52758	; 0xce16
   14000:	mov	r2, #648	; 0x288
   14004:	movt	r0, #1
   14008:	movt	r1, #1
   1400c:	bl	172a8 <UnityDefaultTestRun@@Base>
   14010:	movw	r0, #14976	; 0x3a80
   14014:	movw	r1, #52778	; 0xce2a
   14018:	movw	r2, #649	; 0x289
   1401c:	movt	r0, #1
   14020:	movt	r1, #1
   14024:	bl	172a8 <UnityDefaultTestRun@@Base>
   14028:	movw	r0, #15360	; 0x3c00
   1402c:	movw	r1, #52837	; 0xce65
   14030:	movw	r2, #650	; 0x28a
   14034:	movt	r0, #1
   14038:	movt	r1, #1
   1403c:	bl	172a8 <UnityDefaultTestRun@@Base>
   14040:	movw	r0, #15104	; 0x3b00
   14044:	movw	r1, #52803	; 0xce43
   14048:	movw	r2, #651	; 0x28b
   1404c:	movt	r0, #1
   14050:	movt	r1, #1
   14054:	bl	172a8 <UnityDefaultTestRun@@Base>
   14058:	movw	r0, #15232	; 0x3b80
   1405c:	movw	r1, #52819	; 0xce53
   14060:	mov	r2, #652	; 0x28c
   14064:	movt	r0, #1
   14068:	movt	r1, #1
   1406c:	bl	172a8 <UnityDefaultTestRun@@Base>
   14070:	movw	r0, #15488	; 0x3c80
   14074:	movw	r1, #52865	; 0xce81
   14078:	movw	r2, #653	; 0x28d
   1407c:	movt	r0, #1
   14080:	movt	r1, #1
   14084:	bl	172a8 <UnityDefaultTestRun@@Base>
   14088:	movw	r0, #15616	; 0x3d00
   1408c:	movw	r1, #52885	; 0xce95
   14090:	movw	r2, #654	; 0x28e
   14094:	movt	r0, #1
   14098:	movt	r1, #1
   1409c:	bl	172a8 <UnityDefaultTestRun@@Base>
   140a0:	movw	r0, #15744	; 0x3d80
   140a4:	movw	r1, #52908	; 0xceac
   140a8:	movw	r2, #655	; 0x28f
   140ac:	movt	r0, #1
   140b0:	movt	r1, #1
   140b4:	bl	172a8 <UnityDefaultTestRun@@Base>
   140b8:	pop	{fp, lr}
   140bc:	b	173f0 <UnityEnd@@Base>
   140c0:	andeq	r0, r0, r1
   140c4:	andeq	r0, r0, r0
   140c8:	andeq	r0, r0, r1
   140cc:	andeq	r0, r0, r0
   140d0:	push	{r4, r5, r6, lr}
   140d4:	sub	sp, sp, #8
   140d8:	movw	r0, #52303	; 0xcc4f
   140dc:	movw	r1, #52401	; 0xccb1
   140e0:	movw	r2, #13578	; 0x350a
   140e4:	movt	r0, #1
   140e8:	movt	r1, #1
   140ec:	movt	r2, #46656	; 0xb640
   140f0:	bl	19b00 <next@@Base+0x16a8>
   140f4:	movw	r0, #53488	; 0xd0f0
   140f8:	movw	r6, #52928	; 0xcec0
   140fc:	mov	r5, #0
   14100:	movt	r0, #1
   14104:	movt	r6, #1
   14108:	add	r4, r0, #4
   1410c:	mov	r3, r6
   14110:	ldr	r0, [r3, r5]!
   14114:	ldr	r1, [r3, #16]
   14118:	str	r1, [sp]
   1411c:	ldmib	r3, {r1, r2}
   14120:	ldrb	r3, [r3, #12]
   14124:	bl	1a220 <next@@Base+0x1dc8>
   14128:	ldrd	r0, [r4, #-4]
   1412c:	bl	1aad4 <next@@Base+0x267c>
   14130:	add	r5, r5, #20
   14134:	add	r4, r4, #8
   14138:	cmp	r5, #560	; 0x230
   1413c:	bne	1410c <main@@Base+0x30c>
   14140:	bl	1b25c <next@@Base+0x2e04>
   14144:	add	sp, sp, #8
   14148:	pop	{r4, r5, r6, lr}
   1414c:	b	1bfc8 <next@@Base+0x3b70>
   14150:	push	{fp, lr}
   14154:	bl	140d0 <main@@Base+0x2d0>
   14158:	movw	r0, #61696	; 0xf100
   1415c:	vmov.i32	q8, #0	; 0x00000000
   14160:	movt	r0, #2
   14164:	vst1.64	{d16-d17}, [r0 :128]
   14168:	movw	r0, #61680	; 0xf0f0
   1416c:	movt	r0, #2
   14170:	vst1.64	{d16-d17}, [r0 :128]
   14174:	movw	r0, #61712	; 0xf110
   14178:	movt	r0, #2
   1417c:	vst1.64	{d16-d17}, [r0 :128]
   14180:	movw	r0, #61728	; 0xf120
   14184:	movt	r0, #2
   14188:	vst1.64	{d16-d17}, [r0 :128]
   1418c:	movw	r0, #61744	; 0xf130
   14190:	movt	r0, #2
   14194:	vst1.64	{d16-d17}, [r0 :128]
   14198:	movw	r0, #61760	; 0xf140
   1419c:	movt	r0, #2
   141a0:	vst1.64	{d16-d17}, [r0 :128]
   141a4:	movw	r0, #61776	; 0xf150
   141a8:	movt	r0, #2
   141ac:	vst1.64	{d16-d17}, [r0 :128]
   141b0:	movw	r0, #61792	; 0xf160
   141b4:	movt	r0, #2
   141b8:	vst1.64	{d16-d17}, [r0 :128]
   141bc:	movw	r0, #61808	; 0xf170
   141c0:	movt	r0, #2
   141c4:	vst1.64	{d16-d17}, [r0 :128]
   141c8:	movw	r0, #61824	; 0xf180
   141cc:	movt	r0, #2
   141d0:	vst1.64	{d16-d17}, [r0 :128]
   141d4:	movw	r0, #61840	; 0xf190
   141d8:	movt	r0, #2
   141dc:	vst1.64	{d16-d17}, [r0 :128]
   141e0:	movw	r0, #61856	; 0xf1a0
   141e4:	movt	r0, #2
   141e8:	vst1.64	{d16-d17}, [r0 :128]
   141ec:	movw	r0, #61872	; 0xf1b0
   141f0:	movt	r0, #2
   141f4:	vst1.64	{d16-d17}, [r0 :128]
   141f8:	movw	r0, #61888	; 0xf1c0
   141fc:	movt	r0, #2
   14200:	vst1.64	{d16-d17}, [r0 :128]
   14204:	movw	r0, #61904	; 0xf1d0
   14208:	movt	r0, #2
   1420c:	vst1.64	{d16-d17}, [r0 :128]
   14210:	movw	r0, #61920	; 0xf1e0
   14214:	movt	r0, #2
   14218:	vst1.64	{d16-d17}, [r0 :128]
   1421c:	movw	r0, #61936	; 0xf1f0
   14220:	movt	r0, #2
   14224:	vst1.64	{d16-d17}, [r0 :128]
   14228:	movw	r0, #61952	; 0xf200
   1422c:	movt	r0, #2
   14230:	vst1.64	{d16-d17}, [r0 :128]
   14234:	movw	r0, #61968	; 0xf210
   14238:	movt	r0, #2
   1423c:	vst1.64	{d16-d17}, [r0 :128]
   14240:	movw	r0, #61984	; 0xf220
   14244:	movt	r0, #2
   14248:	vst1.64	{d16-d17}, [r0 :128]
   1424c:	movw	r0, #62000	; 0xf230
   14250:	movt	r0, #2
   14254:	vst1.64	{d16-d17}, [r0 :128]
   14258:	movw	r0, #62016	; 0xf240
   1425c:	movt	r0, #2
   14260:	vst1.64	{d16-d17}, [r0 :128]
   14264:	movw	r0, #62032	; 0xf250
   14268:	movt	r0, #2
   1426c:	vst1.64	{d16-d17}, [r0 :128]
   14270:	movw	r0, #62048	; 0xf260
   14274:	movt	r0, #2
   14278:	vst1.64	{d16-d17}, [r0 :128]
   1427c:	movw	r0, #62064	; 0xf270
   14280:	movt	r0, #2
   14284:	vst1.64	{d16-d17}, [r0 :128]
   14288:	movw	r0, #62080	; 0xf280
   1428c:	movt	r0, #2
   14290:	vst1.64	{d16-d17}, [r0 :128]
   14294:	movw	r0, #62096	; 0xf290
   14298:	movt	r0, #2
   1429c:	vst1.64	{d16-d17}, [r0 :128]
   142a0:	movw	r0, #62112	; 0xf2a0
   142a4:	movt	r0, #2
   142a8:	vst1.64	{d16-d17}, [r0 :128]
   142ac:	pop	{fp, pc}
   142b0:	movw	r0, #16592	; 0x40d0
   142b4:	movw	r1, #16720	; 0x4150
   142b8:	movt	r0, #1
   142bc:	movt	r1, #1
   142c0:	b	1c47c <__gcov_flush@@Base+0xb8>
   142c4:	andeq	r0, r0, r0

000142c8 <UnityPrint@@Base>:
   142c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142cc:	add	fp, sp, #28
   142d0:	sub	sp, sp, #4
   142d4:	movw	r4, #62128	; 0xf2b0
   142d8:	movt	r4, #2
   142dc:	ldrd	r2, [r4]
   142e0:	adds	r2, r2, #1
   142e4:	adc	r3, r3, #0
   142e8:	cmp	r0, #0
   142ec:	strd	r2, [r4]
   142f0:	beq	14458 <UnityPrint@@Base+0x190>
   142f4:	ldrd	r2, [r4, #8]
   142f8:	add	r8, r4, #32
   142fc:	adds	r2, r2, #1
   14300:	adc	r3, r3, #0
   14304:	strd	r2, [r4, #8]
   14308:	ldrb	r1, [r0]
   1430c:	cmp	r1, #0
   14310:	beq	1445c <UnityPrint@@Base+0x194>
   14314:	add	r6, r0, #1
   14318:	add	r7, r4, #48	; 0x30
   1431c:	add	sl, r4, #64	; 0x40
   14320:	add	r9, r4, #72	; 0x48
   14324:	ldr	r0, [r4, #24]
   14328:	ldr	r3, [r4, #28]
   1432c:	adds	r0, r0, #1
   14330:	str	r0, [r4, #24]
   14334:	uxtb	r0, r1
   14338:	adc	r3, r3, #0
   1433c:	mov	r1, r7
   14340:	str	r3, [r4, #28]
   14344:	cmp	r0, #126	; 0x7e
   14348:	bhi	14384 <UnityPrint@@Base+0xbc>
   1434c:	ldrd	r2, [r4, #40]	; 0x28
   14350:	mov	r1, sl
   14354:	adds	r2, r2, #1
   14358:	adc	r3, r3, #0
   1435c:	cmp	r0, #32
   14360:	strd	r2, [r4, #40]	; 0x28
   14364:	bcc	14384 <UnityPrint@@Base+0xbc>
   14368:	ldrd	r2, [r4, #56]	; 0x38
   1436c:	adds	r2, r2, #1
   14370:	adc	r3, r3, #0
   14374:	strd	r2, [r4, #56]	; 0x38
   14378:	bl	12788 <putchar@plt>
   1437c:	mov	r0, r9
   14380:	b	14428 <UnityPrint@@Base+0x160>
   14384:	ldm	r1, {r0, r3}
   14388:	adds	r0, r0, #1
   1438c:	adc	r3, r3, #0
   14390:	stm	r1, {r0, r3}
   14394:	ldrb	r5, [r6, #-1]
   14398:	cmp	r5, #13
   1439c:	bne	143c8 <UnityPrint@@Base+0x100>
   143a0:	ldrd	r0, [r4, #80]	; 0x50
   143a4:	adds	r0, r0, #1
   143a8:	adc	r1, r1, #0
   143ac:	strd	r0, [r4, #80]	; 0x50
   143b0:	mov	r0, #92	; 0x5c
   143b4:	bl	12788 <putchar@plt>
   143b8:	mov	r0, #114	; 0x72
   143bc:	bl	12788 <putchar@plt>
   143c0:	add	r0, r4, #96	; 0x60
   143c4:	b	14428 <UnityPrint@@Base+0x160>
   143c8:	ldrd	r0, [r4, #88]	; 0x58
   143cc:	adds	r0, r0, #1
   143d0:	adc	r1, r1, #0
   143d4:	strd	r0, [r4, #88]	; 0x58
   143d8:	mov	r0, #92	; 0x5c
   143dc:	bl	12788 <putchar@plt>
   143e0:	cmp	r5, #10
   143e4:	bne	14408 <UnityPrint@@Base+0x140>
   143e8:	ldrd	r0, [r4, #104]	; 0x68
   143ec:	adds	r0, r0, #1
   143f0:	adc	r1, r1, #0
   143f4:	strd	r0, [r4, #104]	; 0x68
   143f8:	mov	r0, #110	; 0x6e
   143fc:	bl	12788 <putchar@plt>
   14400:	add	r0, r4, #120	; 0x78
   14404:	b	14428 <UnityPrint@@Base+0x160>
   14408:	ldrd	r0, [r4, #112]	; 0x70
   1440c:	adds	r0, r0, #1
   14410:	adc	r1, r1, #0
   14414:	strd	r0, [r4, #112]	; 0x70
   14418:	mov	r1, #2
   1441c:	ldrb	r0, [r6, #-1]
   14420:	bl	14484 <UnityPrintNumberHex@@Base>
   14424:	add	r0, r4, #128	; 0x80
   14428:	ldrd	r2, [r0]
   1442c:	adds	r2, r2, #1
   14430:	adc	r3, r3, #0
   14434:	strd	r2, [r0]
   14438:	ldrd	r0, [r4, #136]	; 0x88
   1443c:	adds	r0, r0, #1
   14440:	adc	r1, r1, #0
   14444:	strd	r0, [r4, #136]	; 0x88
   14448:	ldrb	r1, [r6], #1
   1444c:	cmp	r1, #0
   14450:	bne	14324 <UnityPrint@@Base+0x5c>
   14454:	b	1445c <UnityPrint@@Base+0x194>
   14458:	add	r8, r4, #16
   1445c:	ldrd	r0, [r8]
   14460:	adds	r0, r0, #1
   14464:	adc	r1, r1, #0
   14468:	strd	r0, [r8]
   1446c:	ldrd	r0, [r4, #144]	; 0x90
   14470:	adds	r0, r0, #1
   14474:	adc	r1, r1, #0
   14478:	strd	r0, [r4, #144]	; 0x90
   1447c:	sub	sp, fp, #28
   14480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014484 <UnityPrintNumberHex@@Base>:
   14484:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14488:	add	fp, sp, #28
   1448c:	sub	sp, sp, #4
   14490:	movw	r6, #62288	; 0xf350
   14494:	mov	r4, r1
   14498:	mov	r5, r0
   1449c:	movt	r6, #2
   144a0:	ldrd	r0, [r6]
   144a4:	adds	r0, r0, #1
   144a8:	adc	r1, r1, #0
   144ac:	strd	r0, [r6]
   144b0:	mov	r0, #48	; 0x30
   144b4:	bl	12788 <putchar@plt>
   144b8:	mov	r0, #120	; 0x78
   144bc:	bl	12788 <putchar@plt>
   144c0:	ldrd	r0, [r6, #8]
   144c4:	adds	r0, r0, #1
   144c8:	adc	r1, r1, #0
   144cc:	cmp	r4, #0
   144d0:	strd	r0, [r6, #8]
   144d4:	beq	1456c <UnityPrintNumberHex@@Base+0xe8>
   144d8:	mov	r8, #15
   144dc:	add	r9, r6, #48	; 0x30
   144e0:	add	sl, r6, #56	; 0x38
   144e4:	ldrd	r0, [r6, #16]
   144e8:	sub	r4, r4, #1
   144ec:	adds	r0, r0, #1
   144f0:	adc	r1, r1, #0
   144f4:	strd	r0, [r6, #16]
   144f8:	uxtb	r0, r4
   144fc:	lsl	r0, r0, #2
   14500:	and	r0, r8, r5, lsr r0
   14504:	cmp	r0, #9
   14508:	bhi	14528 <UnityPrintNumberHex@@Base+0xa4>
   1450c:	ldrd	r2, [r6, #32]
   14510:	orr	r0, r0, #48	; 0x30
   14514:	mov	r7, r9
   14518:	adds	r2, r2, #1
   1451c:	adc	r3, r3, #0
   14520:	strd	r2, [r6, #32]
   14524:	b	14540 <UnityPrintNumberHex@@Base+0xbc>
   14528:	ldrd	r2, [r6, #40]	; 0x28
   1452c:	add	r0, r0, #55	; 0x37
   14530:	mov	r7, sl
   14534:	adds	r2, r2, #1
   14538:	adc	r3, r3, #0
   1453c:	strd	r2, [r6, #40]	; 0x28
   14540:	bl	12788 <putchar@plt>
   14544:	ldrd	r0, [r7]
   14548:	adds	r0, r0, #1
   1454c:	adc	r1, r1, #0
   14550:	strd	r0, [r7]
   14554:	ldrd	r0, [r6, #64]	; 0x40
   14558:	adds	r0, r0, #1
   1455c:	adc	r1, r1, #0
   14560:	tst	r4, #255	; 0xff
   14564:	strd	r0, [r6, #64]	; 0x40
   14568:	bne	144e4 <UnityPrintNumberHex@@Base+0x60>
   1456c:	ldrd	r0, [r6, #24]
   14570:	ldrd	r2, [r6, #72]	; 0x48
   14574:	adds	r0, r0, #1
   14578:	adc	r1, r1, #0
   1457c:	adds	r2, r2, #1
   14580:	str	r2, [r6, #72]	; 0x48
   14584:	strd	r0, [r6, #24]
   14588:	adc	r0, r3, #0
   1458c:	str	r0, [r6, #76]	; 0x4c
   14590:	sub	sp, fp, #28
   14594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014598 <UnityPrintLen@@Base>:
   14598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1459c:	add	fp, sp, #28
   145a0:	sub	sp, sp, #20
   145a4:	movw	r6, #62368	; 0xf3a0
   145a8:	mov	r4, r1
   145ac:	mov	r9, r0
   145b0:	movt	r6, #2
   145b4:	ldrd	r0, [r6]
   145b8:	adds	r0, r0, #1
   145bc:	adc	r1, r1, #0
   145c0:	cmp	r9, #0
   145c4:	strd	r0, [r6]
   145c8:	beq	14760 <UnityPrintLen@@Base+0x1c8>
   145cc:	ldrd	r0, [r6, #8]
   145d0:	add	r2, r6, #32
   145d4:	adds	r0, r0, #1
   145d8:	adc	r1, r1, #0
   145dc:	strd	r0, [r6, #8]
   145e0:	ldrb	r0, [r9]
   145e4:	cmp	r0, #0
   145e8:	beq	1476c <UnityPrintLen@@Base+0x1d4>
   145ec:	add	r1, r6, #48	; 0x30
   145f0:	add	r7, r6, #64	; 0x40
   145f4:	add	sl, r6, #80	; 0x50
   145f8:	mov	r5, r9
   145fc:	str	r2, [sp, #8]
   14600:	str	r1, [sp, #4]
   14604:	add	r1, r6, #88	; 0x58
   14608:	str	r1, [sp, #12]
   1460c:	add	r1, r6, #112	; 0x70
   14610:	str	r1, [sp, #16]
   14614:	ldrd	r2, [r6, #24]
   14618:	sub	r1, r5, r9
   1461c:	adds	r2, r2, #1
   14620:	adc	r3, r3, #0
   14624:	cmp	r1, r4
   14628:	strd	r2, [r6, #24]
   1462c:	bcs	14768 <UnityPrintLen@@Base+0x1d0>
   14630:	ldrd	r2, [r6, #40]	; 0x28
   14634:	uxtb	r0, r0
   14638:	mov	r1, r7
   1463c:	adds	r2, r2, #1
   14640:	adc	r3, r3, #0
   14644:	cmp	r0, #126	; 0x7e
   14648:	strd	r2, [r6, #40]	; 0x28
   1464c:	bhi	14688 <UnityPrintLen@@Base+0xf0>
   14650:	ldrd	r2, [r6, #56]	; 0x38
   14654:	mov	r1, sl
   14658:	adds	r2, r2, #1
   1465c:	adc	r3, r3, #0
   14660:	cmp	r0, #32
   14664:	strd	r2, [r6, #56]	; 0x38
   14668:	bcc	14688 <UnityPrintLen@@Base+0xf0>
   1466c:	ldrd	r2, [r6, #72]	; 0x48
   14670:	adds	r2, r2, #1
   14674:	adc	r3, r3, #0
   14678:	strd	r2, [r6, #72]	; 0x48
   1467c:	bl	12788 <putchar@plt>
   14680:	ldr	r0, [sp, #12]
   14684:	b	1472c <UnityPrintLen@@Base+0x194>
   14688:	ldm	r1, {r0, r3}
   1468c:	adds	r0, r0, #1
   14690:	adc	r3, r3, #0
   14694:	stm	r1, {r0, r3}
   14698:	ldrb	r8, [r5]
   1469c:	cmp	r8, #13
   146a0:	bne	146cc <UnityPrintLen@@Base+0x134>
   146a4:	ldrd	r0, [r6, #96]	; 0x60
   146a8:	adds	r0, r0, #1
   146ac:	adc	r1, r1, #0
   146b0:	strd	r0, [r6, #96]	; 0x60
   146b4:	mov	r0, #92	; 0x5c
   146b8:	bl	12788 <putchar@plt>
   146bc:	mov	r0, #114	; 0x72
   146c0:	bl	12788 <putchar@plt>
   146c4:	ldr	r0, [sp, #16]
   146c8:	b	1472c <UnityPrintLen@@Base+0x194>
   146cc:	ldrd	r0, [r6, #104]	; 0x68
   146d0:	adds	r0, r0, #1
   146d4:	adc	r1, r1, #0
   146d8:	strd	r0, [r6, #104]	; 0x68
   146dc:	mov	r0, #92	; 0x5c
   146e0:	bl	12788 <putchar@plt>
   146e4:	cmp	r8, #10
   146e8:	bne	1470c <UnityPrintLen@@Base+0x174>
   146ec:	ldrd	r0, [r6, #120]	; 0x78
   146f0:	adds	r0, r0, #1
   146f4:	adc	r1, r1, #0
   146f8:	strd	r0, [r6, #120]	; 0x78
   146fc:	mov	r0, #110	; 0x6e
   14700:	bl	12788 <putchar@plt>
   14704:	add	r0, r6, #136	; 0x88
   14708:	b	1472c <UnityPrintLen@@Base+0x194>
   1470c:	ldrd	r0, [r6, #128]	; 0x80
   14710:	adds	r0, r0, #1
   14714:	adc	r1, r1, #0
   14718:	strd	r0, [r6, #128]	; 0x80
   1471c:	mov	r1, #2
   14720:	ldrb	r0, [r5]
   14724:	bl	14484 <UnityPrintNumberHex@@Base>
   14728:	add	r0, r6, #144	; 0x90
   1472c:	ldrd	r2, [r0]
   14730:	adds	r2, r2, #1
   14734:	adc	r3, r3, #0
   14738:	strd	r2, [r0]
   1473c:	ldrd	r0, [r6, #152]	; 0x98
   14740:	adds	r0, r0, #1
   14744:	adc	r1, r1, #0
   14748:	strd	r0, [r6, #152]	; 0x98
   1474c:	ldrb	r0, [r5, #1]!
   14750:	cmp	r0, #0
   14754:	bne	14614 <UnityPrintLen@@Base+0x7c>
   14758:	ldr	r2, [sp, #8]
   1475c:	b	1476c <UnityPrintLen@@Base+0x1d4>
   14760:	add	r2, r6, #16
   14764:	b	1476c <UnityPrintLen@@Base+0x1d4>
   14768:	ldr	r2, [sp, #4]
   1476c:	ldrd	r0, [r2]
   14770:	adds	r0, r0, #1
   14774:	adc	r1, r1, #0
   14778:	strd	r0, [r2]
   1477c:	ldrd	r0, [r6, #160]	; 0xa0
   14780:	adds	r0, r0, #1
   14784:	adc	r1, r1, #0
   14788:	strd	r0, [r6, #160]	; 0xa0
   1478c:	sub	sp, fp, #28
   14790:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014794 <UnityPrintNumberByStyle@@Base>:
   14794:	push	{r4, r6, r7, sl, fp, lr}
   14798:	add	fp, sp, #16
   1479c:	movw	r4, #62544	; 0xf450
   147a0:	movt	r4, #2
   147a4:	ldrd	r2, [r4]
   147a8:	adds	r2, r2, #1
   147ac:	adc	r3, r3, #0
   147b0:	tst	r1, #16
   147b4:	strd	r2, [r4]
   147b8:	bne	147f8 <UnityPrintNumberByStyle@@Base+0x64>
   147bc:	ldrd	r2, [r4, #16]
   147c0:	adds	r2, r2, #1
   147c4:	adc	r3, r3, #0
   147c8:	tst	r1, #32
   147cc:	strd	r2, [r4, #16]
   147d0:	and	r2, r1, #15
   147d4:	bne	14814 <UnityPrintNumberByStyle@@Base+0x80>
   147d8:	ldrd	r6, [r4, #40]	; 0x28
   147dc:	lsl	r1, r2, #1
   147e0:	adds	r6, r6, #1
   147e4:	adc	r7, r7, #0
   147e8:	strd	r6, [r4, #40]	; 0x28
   147ec:	bl	14484 <UnityPrintNumberHex@@Base>
   147f0:	add	r0, r4, #56	; 0x38
   147f4:	b	14840 <UnityPrintNumberByStyle@@Base+0xac>
   147f8:	ldrd	r2, [r4, #8]
   147fc:	adds	r2, r2, #1
   14800:	adc	r3, r3, #0
   14804:	strd	r2, [r4, #8]
   14808:	bl	14868 <UnityPrintNumber@@Base>
   1480c:	add	r0, r4, #24
   14810:	b	14840 <UnityPrintNumberByStyle@@Base+0xac>
   14814:	movw	r1, #54168	; 0xd398
   14818:	ldrd	r6, [r4, #32]
   1481c:	movt	r1, #1
   14820:	add	r1, r1, r2, lsl #2
   14824:	adds	r6, r6, #1
   14828:	ldr	r1, [r1, #-4]
   1482c:	adc	r7, r7, #0
   14830:	strd	r6, [r4, #32]
   14834:	and	r0, r1, r0
   14838:	bl	149f8 <UnityPrintNumberUnsigned@@Base>
   1483c:	add	r0, r4, #48	; 0x30
   14840:	ldrd	r2, [r0]
   14844:	adds	r2, r2, #1
   14848:	adc	r3, r3, #0
   1484c:	strd	r2, [r0]
   14850:	ldrd	r0, [r4, #64]	; 0x40
   14854:	adds	r0, r0, #1
   14858:	adc	r1, r1, #0
   1485c:	strd	r0, [r4, #64]	; 0x40
   14860:	pop	{r4, r6, r7, sl, fp, pc}
   14864:	nop	{0}

00014868 <UnityPrintNumber@@Base>:
   14868:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1486c:	add	fp, sp, #24
   14870:	movw	r8, #62624	; 0xf4a0
   14874:	mov	r9, r0
   14878:	movt	r8, #2
   1487c:	ldrd	r0, [r8]
   14880:	adds	r0, r0, #1
   14884:	adc	r1, r1, #0
   14888:	cmn	r9, #1
   1488c:	strd	r0, [r8]
   14890:	ble	148ac <UnityPrintNumber@@Base+0x44>
   14894:	ldrd	r0, [r8, #16]
   14898:	adds	r0, r0, #1
   1489c:	adc	r1, r1, #0
   148a0:	strd	r0, [r8, #16]
   148a4:	add	r0, r8, #32
   148a8:	b	148cc <UnityPrintNumber@@Base+0x64>
   148ac:	ldrd	r0, [r8, #8]
   148b0:	adds	r0, r0, #1
   148b4:	adc	r1, r1, #0
   148b8:	strd	r0, [r8, #8]
   148bc:	mov	r0, #45	; 0x2d
   148c0:	bl	12788 <putchar@plt>
   148c4:	add	r0, r8, #24
   148c8:	rsb	r9, r9, #0
   148cc:	ldrd	r2, [r0]
   148d0:	adds	r2, r2, #1
   148d4:	adc	r3, r3, #0
   148d8:	strd	r2, [r0]
   148dc:	ldrd	r0, [r8, #40]	; 0x28
   148e0:	adds	r0, r0, #1
   148e4:	adc	r1, r1, #0
   148e8:	cmp	r9, #10
   148ec:	strd	r0, [r8, #40]	; 0x28
   148f0:	bcc	14960 <UnityPrintNumber@@Base+0xf8>
   148f4:	ldrd	r2, [r8, #48]	; 0x30
   148f8:	mov	r6, #1
   148fc:	add	r1, r8, #72	; 0x48
   14900:	add	ip, r8, #56	; 0x38
   14904:	add	r7, r6, r6, lsl #2
   14908:	adds	r2, r2, #1
   1490c:	adc	r3, r3, #0
   14910:	cmp	r6, r7, lsl #1
   14914:	bcs	14958 <UnityPrintNumber@@Base+0xf0>
   14918:	ldr	r0, [r8, #64]	; 0x40
   1491c:	lsl	r6, r7, #1
   14920:	ldr	r7, [r8, #68]	; 0x44
   14924:	ldrd	r4, [r8, #80]	; 0x50
   14928:	adds	r0, r0, #1
   1492c:	adc	r7, r7, #0
   14930:	adds	r4, r4, #1
   14934:	str	r4, [r8, #80]	; 0x50
   14938:	str	r0, [r8, #64]	; 0x40
   1493c:	adc	r0, r5, #0
   14940:	str	r7, [r8, #68]	; 0x44
   14944:	str	r0, [r8, #84]	; 0x54
   14948:	udiv	r0, r9, r6
   1494c:	cmp	r0, #9
   14950:	bhi	14904 <UnityPrintNumber@@Base+0x9c>
   14954:	mov	r1, ip
   14958:	strd	r2, [r8, #48]	; 0x30
   1495c:	b	14968 <UnityPrintNumber@@Base+0x100>
   14960:	add	r1, r8, #56	; 0x38
   14964:	mov	r6, #1
   14968:	ldm	r1, {r0, r3}
   1496c:	movw	r7, #52429	; 0xcccd
   14970:	add	r5, r8, #96	; 0x60
   14974:	movt	r7, #52428	; 0xcccc
   14978:	adds	r0, r0, #1
   1497c:	adc	r3, r3, #0
   14980:	stm	r1, {r0, r3}
   14984:	add	r0, r8, #88	; 0x58
   14988:	ldrd	r2, [r0]
   1498c:	adds	r2, r2, #1
   14990:	adc	r3, r3, #0
   14994:	strd	r2, [r0]
   14998:	udiv	r0, r9, r6
   1499c:	umull	r1, r2, r0, r7
   149a0:	lsr	r1, r2, #3
   149a4:	add	r1, r1, r1, lsl #2
   149a8:	sub	r0, r0, r1, lsl #1
   149ac:	orr	r0, r0, #48	; 0x30
   149b0:	bl	12788 <putchar@plt>
   149b4:	umull	r0, r1, r6, r7
   149b8:	cmp	r6, #9
   149bc:	mov	r0, r5
   149c0:	lsr	r1, r1, #3
   149c4:	mov	r6, r1
   149c8:	bhi	14988 <UnityPrintNumber@@Base+0x120>
   149cc:	add	r1, pc, #20
   149d0:	add	r0, r8, #104	; 0x68
   149d4:	vld1.64	{d16-d17}, [r1]
   149d8:	vld1.64	{d18-d19}, [r0]
   149dc:	vadd.i64	q8, q9, q8
   149e0:	vst1.64	{d16-d17}, [r0]
   149e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   149e8:	andeq	r0, r0, r1
   149ec:	andeq	r0, r0, r0
   149f0:	andeq	r0, r0, r1
   149f4:	andeq	r0, r0, r0

000149f8 <UnityPrintNumberUnsigned@@Base>:
   149f8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   149fc:	add	fp, sp, #24
   14a00:	movw	r8, #62752	; 0xf520
   14a04:	mov	r9, r0
   14a08:	add	r0, pc, #272	; 0x110
   14a0c:	mov	r6, #1
   14a10:	movt	r8, #2
   14a14:	vld1.64	{d16-d17}, [r0]
   14a18:	mov	r0, #24
   14a1c:	cmp	r9, #10
   14a20:	vld1.64	{d18-d19}, [r8 :128]
   14a24:	mov	r1, r8
   14a28:	vadd.i64	q8, q9, q8
   14a2c:	vst1.64	{d16-d17}, [r1 :128], r0
   14a30:	bcc	14a9c <UnityPrintNumberUnsigned@@Base+0xa4>
   14a34:	ldrd	r2, [r8, #16]
   14a38:	mov	r6, #1
   14a3c:	add	r1, r8, #40	; 0x28
   14a40:	add	ip, r8, #24
   14a44:	add	r7, r6, r6, lsl #2
   14a48:	adds	r2, r2, #1
   14a4c:	adc	r3, r3, #0
   14a50:	cmp	r6, r7, lsl #1
   14a54:	bcs	14a98 <UnityPrintNumberUnsigned@@Base+0xa0>
   14a58:	ldr	r0, [r8, #32]
   14a5c:	lsl	r6, r7, #1
   14a60:	ldr	r7, [r8, #36]	; 0x24
   14a64:	ldrd	r4, [r8, #48]	; 0x30
   14a68:	adds	r0, r0, #1
   14a6c:	adc	r7, r7, #0
   14a70:	adds	r4, r4, #1
   14a74:	str	r4, [r8, #48]	; 0x30
   14a78:	str	r0, [r8, #32]
   14a7c:	adc	r0, r5, #0
   14a80:	str	r7, [r8, #36]	; 0x24
   14a84:	str	r0, [r8, #52]	; 0x34
   14a88:	udiv	r0, r9, r6
   14a8c:	cmp	r0, #9
   14a90:	bhi	14a44 <UnityPrintNumberUnsigned@@Base+0x4c>
   14a94:	mov	r1, ip
   14a98:	strd	r2, [r8, #16]
   14a9c:	ldm	r1, {r0, r3}
   14aa0:	movw	r7, #52429	; 0xcccd
   14aa4:	add	r5, r8, #64	; 0x40
   14aa8:	movt	r7, #52428	; 0xcccc
   14aac:	adds	r0, r0, #1
   14ab0:	adc	r3, r3, #0
   14ab4:	stm	r1, {r0, r3}
   14ab8:	add	r0, r8, #56	; 0x38
   14abc:	ldrd	r2, [r0]
   14ac0:	adds	r2, r2, #1
   14ac4:	adc	r3, r3, #0
   14ac8:	strd	r2, [r0]
   14acc:	udiv	r0, r9, r6
   14ad0:	umull	r1, r2, r0, r7
   14ad4:	lsr	r1, r2, #3
   14ad8:	add	r1, r1, r1, lsl #2
   14adc:	sub	r0, r0, r1, lsl #1
   14ae0:	orr	r0, r0, #48	; 0x30
   14ae4:	bl	12788 <putchar@plt>
   14ae8:	umull	r0, r1, r6, r7
   14aec:	cmp	r6, #9
   14af0:	mov	r0, r5
   14af4:	lsr	r1, r1, #3
   14af8:	mov	r6, r1
   14afc:	bhi	14abc <UnityPrintNumberUnsigned@@Base+0xc4>
   14b00:	add	r1, pc, #24
   14b04:	add	r0, r8, #72	; 0x48
   14b08:	vld1.64	{d16-d17}, [r1]
   14b0c:	vld1.64	{d18-d19}, [r0]
   14b10:	vadd.i64	q8, q9, q8
   14b14:	vst1.64	{d16-d17}, [r0]
   14b18:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14b1c:	nop	{0}
   14b20:	andeq	r0, r0, r1
   14b24:	andeq	r0, r0, r0
   14b28:	andeq	r0, r0, r1
   14b2c:	andeq	r0, r0, r0

00014b30 <UnityPrintMask@@Base>:
   14b30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b34:	add	fp, sp, #28
   14b38:	sub	sp, sp, #12
   14b3c:	movw	r6, #62848	; 0xf580
   14b40:	mov	r5, r0
   14b44:	add	r0, pc, #268	; 0x10c
   14b48:	mov	r8, r1
   14b4c:	mov	r7, #-2147483648	; 0x80000000
   14b50:	mov	r4, #32
   14b54:	movt	r6, #2
   14b58:	vld1.64	{d16-d17}, [r0]
   14b5c:	vld1.64	{d18-d19}, [r6 :128]
   14b60:	add	r0, r6, #80	; 0x50
   14b64:	add	r9, r6, #64	; 0x40
   14b68:	str	r0, [sp, #8]
   14b6c:	add	r0, r6, #72	; 0x48
   14b70:	str	r0, [sp, #4]
   14b74:	vadd.i64	q8, q9, q8
   14b78:	vst1.64	{d16-d17}, [r6 :128]
   14b7c:	ldrd	r0, [r6, #16]
   14b80:	adds	r0, r0, #1
   14b84:	adc	r1, r1, #0
   14b88:	tst	r7, r5
   14b8c:	strd	r0, [r6, #16]
   14b90:	beq	14bc8 <UnityPrintMask@@Base+0x98>
   14b94:	ldrd	r0, [r6, #32]
   14b98:	adds	r0, r0, #1
   14b9c:	adc	r1, r1, #0
   14ba0:	tst	r7, r8
   14ba4:	strd	r0, [r6, #32]
   14ba8:	beq	14be4 <UnityPrintMask@@Base+0xb4>
   14bac:	ldrd	r0, [r6, #48]	; 0x30
   14bb0:	mov	sl, r9
   14bb4:	adds	r0, r0, #1
   14bb8:	adc	r1, r1, #0
   14bbc:	strd	r0, [r6, #48]	; 0x30
   14bc0:	mov	r0, #49	; 0x31
   14bc4:	b	14bfc <UnityPrintMask@@Base+0xcc>
   14bc8:	ldrd	r0, [r6, #40]	; 0x28
   14bcc:	ldr	sl, [sp, #8]
   14bd0:	adds	r0, r0, #1
   14bd4:	adc	r1, r1, #0
   14bd8:	strd	r0, [r6, #40]	; 0x28
   14bdc:	mov	r0, #88	; 0x58
   14be0:	b	14bfc <UnityPrintMask@@Base+0xcc>
   14be4:	ldrd	r0, [r6, #56]	; 0x38
   14be8:	ldr	sl, [sp, #4]
   14bec:	adds	r0, r0, #1
   14bf0:	adc	r1, r1, #0
   14bf4:	strd	r0, [r6, #56]	; 0x38
   14bf8:	mov	r0, #48	; 0x30
   14bfc:	bl	12788 <putchar@plt>
   14c00:	ldrd	r0, [sl]
   14c04:	lsr	r7, r7, #1
   14c08:	adds	r0, r0, #1
   14c0c:	adc	r1, r1, #0
   14c10:	strd	r0, [sl]
   14c14:	ldrd	r0, [r6, #88]	; 0x58
   14c18:	adds	r0, r0, #1
   14c1c:	adc	r1, r1, #0
   14c20:	subs	r4, r4, #1
   14c24:	strd	r0, [r6, #88]	; 0x58
   14c28:	bne	14b7c <UnityPrintMask@@Base+0x4c>
   14c2c:	ldrd	r0, [r6, #24]
   14c30:	ldrd	r2, [r6, #96]	; 0x60
   14c34:	adds	r0, r0, #1
   14c38:	adc	r1, r1, #0
   14c3c:	adds	r2, r2, #1
   14c40:	str	r2, [r6, #96]	; 0x60
   14c44:	strd	r0, [r6, #24]
   14c48:	adc	r0, r3, #0
   14c4c:	str	r0, [r6, #100]	; 0x64
   14c50:	sub	sp, fp, #28
   14c54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c58:	andeq	r0, r0, r1
   14c5c:	andeq	r0, r0, r0
   14c60:	andeq	r0, r0, r1
   14c64:	andeq	r0, r0, r0

00014c68 <UnityPrintFail@@Base>:
   14c68:	movw	r0, #62960	; 0xf5f0
   14c6c:	add	r1, pc, #28
   14c70:	movt	r0, #2
   14c74:	vld1.64	{d16-d17}, [r1]
   14c78:	vld1.64	{d18-d19}, [r0 :128]
   14c7c:	vadd.i64	q8, q9, q8
   14c80:	vst1.64	{d16-d17}, [r0 :128]
   14c84:	movw	r0, #53720	; 0xd1d8
   14c88:	movt	r0, #1
   14c8c:	b	142c8 <UnityPrint@@Base>
   14c90:	andeq	r0, r0, r1
   14c94:	andeq	r0, r0, r0
   14c98:	andeq	r0, r0, r1
   14c9c:	andeq	r0, r0, r0

00014ca0 <UnityPrintOk@@Base>:
   14ca0:	movw	r0, #62976	; 0xf600
   14ca4:	add	r1, pc, #28
   14ca8:	movt	r0, #2
   14cac:	vld1.64	{d16-d17}, [r1]
   14cb0:	vld1.64	{d18-d19}, [r0 :128]
   14cb4:	vadd.i64	q8, q9, q8
   14cb8:	vst1.64	{d16-d17}, [r0 :128]
   14cbc:	movw	r0, #53712	; 0xd1d0
   14cc0:	movt	r0, #1
   14cc4:	b	142c8 <UnityPrint@@Base>
   14cc8:	andeq	r0, r0, r1
   14ccc:	andeq	r0, r0, r0
   14cd0:	andeq	r0, r0, r1
   14cd4:	andeq	r0, r0, r0

00014cd8 <UnityConcludeTest@@Base>:
   14cd8:	push	{r4, r5, fp, lr}
   14cdc:	add	fp, sp, #8
   14ce0:	movw	r4, #62992	; 0xf610
   14ce4:	movw	r5, #1832	; 0x728
   14ce8:	movt	r4, #2
   14cec:	movt	r5, #3
   14cf0:	ldrd	r0, [r4]
   14cf4:	adds	r0, r0, #1
   14cf8:	adc	r1, r1, #0
   14cfc:	strd	r0, [r4]
   14d00:	ldr	r0, [r5, #36]	; 0x24
   14d04:	cmp	r0, #0
   14d08:	beq	14d30 <UnityConcludeTest@@Base+0x58>
   14d0c:	ldrd	r0, [r4, #8]
   14d10:	ldr	r2, [r5, #28]
   14d14:	adds	r0, r0, #1
   14d18:	add	r2, r2, #1
   14d1c:	adc	r1, r1, #0
   14d20:	str	r2, [r5, #28]
   14d24:	strd	r0, [r4, #8]
   14d28:	add	r0, r4, #24
   14d2c:	b	14d9c <UnityConcludeTest@@Base+0xc4>
   14d30:	ldrd	r0, [r4, #16]
   14d34:	adds	r0, r0, #1
   14d38:	adc	r1, r1, #0
   14d3c:	strd	r0, [r4, #16]
   14d40:	ldr	r0, [r5, #32]
   14d44:	cmp	r0, #0
   14d48:	beq	14d70 <UnityConcludeTest@@Base+0x98>
   14d4c:	ldrd	r0, [r4, #32]
   14d50:	ldr	r2, [r5, #24]
   14d54:	adds	r0, r0, #1
   14d58:	add	r2, r2, #1
   14d5c:	adc	r1, r1, #0
   14d60:	str	r2, [r5, #24]
   14d64:	strd	r0, [r4, #32]
   14d68:	add	r0, r4, #56	; 0x38
   14d6c:	b	14d9c <UnityConcludeTest@@Base+0xc4>
   14d70:	ldrd	r0, [r4, #40]	; 0x28
   14d74:	adds	r0, r0, #1
   14d78:	adc	r1, r1, #0
   14d7c:	strd	r0, [r4, #40]	; 0x28
   14d80:	ldr	r0, [r5]
   14d84:	ldr	r1, [r5, #16]
   14d88:	bl	14dd8 <UnityConcludeTest@@Base+0x100>
   14d8c:	movw	r0, #53715	; 0xd1d3
   14d90:	movt	r0, #1
   14d94:	bl	142c8 <UnityPrint@@Base>
   14d98:	add	r0, r4, #48	; 0x30
   14d9c:	ldrd	r2, [r0]
   14da0:	adds	r2, r2, #1
   14da4:	adc	r3, r3, #0
   14da8:	strd	r2, [r0]
   14dac:	mov	r0, #0
   14db0:	str	r0, [r5, #32]
   14db4:	str	r0, [r5, #36]	; 0x24
   14db8:	ldrd	r0, [r4, #64]	; 0x40
   14dbc:	adds	r0, r0, #1
   14dc0:	adc	r1, r1, #0
   14dc4:	strd	r0, [r4, #64]	; 0x40
   14dc8:	mov	r0, #10
   14dcc:	pop	{r4, r5, fp, lr}
   14dd0:	b	12788 <putchar@plt>
   14dd4:	nop	{0}
   14dd8:	push	{r4, sl, fp, lr}
   14ddc:	add	fp, sp, #8
   14de0:	mov	r4, r1
   14de4:	movw	r1, #63072	; 0xf660
   14de8:	add	r2, pc, #72	; 0x48
   14dec:	movt	r1, #2
   14df0:	vld1.64	{d16-d17}, [r2]
   14df4:	vld1.64	{d18-d19}, [r1 :128]
   14df8:	vadd.i64	q8, q9, q8
   14dfc:	vst1.64	{d16-d17}, [r1 :128]
   14e00:	bl	142c8 <UnityPrint@@Base>
   14e04:	mov	r0, #58	; 0x3a
   14e08:	bl	12788 <putchar@plt>
   14e0c:	mov	r0, r4
   14e10:	bl	14868 <UnityPrintNumber@@Base>
   14e14:	mov	r0, #58	; 0x3a
   14e18:	bl	12788 <putchar@plt>
   14e1c:	movw	r0, #1832	; 0x728
   14e20:	movt	r0, #3
   14e24:	ldr	r0, [r0, #4]
   14e28:	bl	142c8 <UnityPrint@@Base>
   14e2c:	mov	r0, #58	; 0x3a
   14e30:	pop	{r4, sl, fp, lr}
   14e34:	b	12788 <putchar@plt>
   14e38:	andeq	r0, r0, r1
   14e3c:	andeq	r0, r0, r0
   14e40:	andeq	r0, r0, r1
   14e44:	andeq	r0, r0, r0

00014e48 <UnityAssertBits@@Base>:
   14e48:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e4c:	add	fp, sp, #24
   14e50:	mov	r7, r1
   14e54:	movw	r1, #63088	; 0xf670
   14e58:	mov	r8, r3
   14e5c:	mov	r6, r0
   14e60:	movw	r4, #1832	; 0x728
   14e64:	movt	r1, #2
   14e68:	movt	r4, #3
   14e6c:	ldm	r1, {r0, r3}
   14e70:	adds	r0, r0, #1
   14e74:	adc	r3, r3, #0
   14e78:	stm	r1, {r0, r3}
   14e7c:	ldr	r0, [r4, #32]
   14e80:	ldr	r3, [r4, #36]	; 0x24
   14e84:	orrs	r0, r3, r0
   14e88:	beq	14e94 <UnityAssertBits@@Base+0x4c>
   14e8c:	add	r0, r1, #8
   14e90:	b	14ec0 <UnityAssertBits@@Base+0x78>
   14e94:	ldr	r0, [r1, #16]
   14e98:	ldr	r3, [r1, #20]
   14e9c:	mov	r5, r2
   14ea0:	adds	r0, r0, #1
   14ea4:	str	r0, [r1, #16]
   14ea8:	eor	r0, r2, r7
   14eac:	adc	r3, r3, #0
   14eb0:	tst	r0, r6
   14eb4:	str	r3, [r1, #20]
   14eb8:	bne	14eec <UnityAssertBits@@Base+0xa4>
   14ebc:	add	r0, r1, #32
   14ec0:	ldrd	r2, [r0]
   14ec4:	adds	r2, r2, #1
   14ec8:	adc	r3, r3, #0
   14ecc:	strd	r2, [r0]
   14ed0:	ldr	r0, [r1, #40]	; 0x28
   14ed4:	ldr	r3, [r1, #44]	; 0x2c
   14ed8:	adds	r0, r0, #1
   14edc:	adc	r3, r3, #0
   14ee0:	str	r0, [r1, #40]	; 0x28
   14ee4:	str	r3, [r1, #44]	; 0x2c
   14ee8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14eec:	ldrd	r2, [r1, #24]
   14ef0:	ldr	r0, [fp, #8]
   14ef4:	adds	r2, r2, #1
   14ef8:	adc	r3, r3, #0
   14efc:	strd	r2, [r1, #24]
   14f00:	bl	14f50 <UnityAssertBits@@Base+0x108>
   14f04:	movw	r0, #53740	; 0xd1ec
   14f08:	movt	r0, #1
   14f0c:	bl	142c8 <UnityPrint@@Base>
   14f10:	mov	r0, r6
   14f14:	mov	r1, r7
   14f18:	bl	14b30 <UnityPrintMask@@Base>
   14f1c:	movw	r0, #53751	; 0xd1f7
   14f20:	movt	r0, #1
   14f24:	bl	142c8 <UnityPrint@@Base>
   14f28:	mov	r0, r6
   14f2c:	mov	r1, r5
   14f30:	bl	14b30 <UnityPrintMask@@Base>
   14f34:	mov	r0, r8
   14f38:	bl	14fb0 <UnityAssertBits@@Base+0x168>
   14f3c:	mov	r0, #1
   14f40:	mov	r1, #1
   14f44:	str	r0, [r4, #32]
   14f48:	add	r0, r4, #40	; 0x28
   14f4c:	bl	12638 <longjmp@plt>
   14f50:	push	{fp, lr}
   14f54:	mov	fp, sp
   14f58:	mov	r1, r0
   14f5c:	movw	r0, #63136	; 0xf6a0
   14f60:	add	r2, pc, #56	; 0x38
   14f64:	movt	r0, #2
   14f68:	vld1.64	{d16-d17}, [r2]
   14f6c:	vld1.64	{d18-d19}, [r0 :128]
   14f70:	vadd.i64	q8, q9, q8
   14f74:	vst1.64	{d16-d17}, [r0 :128]
   14f78:	movw	r0, #1832	; 0x728
   14f7c:	movt	r0, #3
   14f80:	ldr	r0, [r0]
   14f84:	bl	14dd8 <UnityConcludeTest@@Base+0x100>
   14f88:	movw	r0, #53720	; 0xd1d8
   14f8c:	movt	r0, #1
   14f90:	bl	142c8 <UnityPrint@@Base>
   14f94:	mov	r0, #58	; 0x3a
   14f98:	pop	{fp, lr}
   14f9c:	b	12788 <putchar@plt>
   14fa0:	andeq	r0, r0, r1
   14fa4:	andeq	r0, r0, r0
   14fa8:	andeq	r0, r0, r1
   14fac:	andeq	r0, r0, r0
   14fb0:	push	{r4, r5, r6, sl, fp, lr}
   14fb4:	add	fp, sp, #16
   14fb8:	movw	r5, #63152	; 0xf6b0
   14fbc:	mov	r4, r0
   14fc0:	movt	r5, #2
   14fc4:	ldrd	r0, [r5]
   14fc8:	adds	r0, r0, #1
   14fcc:	adc	r1, r1, #0
   14fd0:	cmp	r4, #0
   14fd4:	strd	r0, [r5]
   14fd8:	beq	15068 <UnityAssertBits@@Base+0x220>
   14fdc:	ldrd	r0, [r5, #8]
   14fe0:	adds	r0, r0, #1
   14fe4:	adc	r1, r1, #0
   14fe8:	strd	r0, [r5, #8]
   14fec:	movw	r0, #53737	; 0xd1e9
   14ff0:	movt	r0, #1
   14ff4:	bl	142c8 <UnityPrint@@Base>
   14ff8:	movw	r6, #1832	; 0x728
   14ffc:	movt	r6, #3
   15000:	ldr	r0, [r6, #8]
   15004:	cmp	r0, #0
   15008:	beq	15070 <UnityAssertBits@@Base+0x228>
   1500c:	ldrd	r0, [r5, #24]
   15010:	adds	r0, r0, #1
   15014:	adc	r1, r1, #0
   15018:	strd	r0, [r5, #24]
   1501c:	movw	r0, #54145	; 0xd381
   15020:	movt	r0, #1
   15024:	bl	142c8 <UnityPrint@@Base>
   15028:	ldr	r0, [r6, #8]
   1502c:	bl	142c8 <UnityPrint@@Base>
   15030:	ldr	r0, [r6, #12]
   15034:	cmp	r0, #0
   15038:	beq	15078 <UnityAssertBits@@Base+0x230>
   1503c:	ldrd	r0, [r5, #40]	; 0x28
   15040:	adds	r0, r0, #1
   15044:	adc	r1, r1, #0
   15048:	strd	r0, [r5, #40]	; 0x28
   1504c:	movw	r0, #54155	; 0xd38b
   15050:	movt	r0, #1
   15054:	bl	142c8 <UnityPrint@@Base>
   15058:	ldr	r0, [r6, #12]
   1505c:	bl	142c8 <UnityPrint@@Base>
   15060:	add	r0, r5, #56	; 0x38
   15064:	b	1507c <UnityAssertBits@@Base+0x234>
   15068:	add	r0, r5, #16
   1506c:	b	150b8 <UnityAssertBits@@Base+0x270>
   15070:	add	r0, r5, #32
   15074:	b	1509c <UnityAssertBits@@Base+0x254>
   15078:	add	r0, r5, #48	; 0x30
   1507c:	ldrd	r2, [r0]
   15080:	adds	r2, r2, #1
   15084:	adc	r3, r3, #0
   15088:	strd	r2, [r0]
   1508c:	movw	r0, #53737	; 0xd1e9
   15090:	movt	r0, #1
   15094:	bl	142c8 <UnityPrint@@Base>
   15098:	add	r0, r5, #64	; 0x40
   1509c:	ldrd	r2, [r0]
   150a0:	adds	r2, r2, #1
   150a4:	adc	r3, r3, #0
   150a8:	strd	r2, [r0]
   150ac:	mov	r0, r4
   150b0:	bl	142c8 <UnityPrint@@Base>
   150b4:	add	r0, r5, #72	; 0x48
   150b8:	ldrd	r2, [r0]
   150bc:	adds	r2, r2, #1
   150c0:	adc	r3, r3, #0
   150c4:	strd	r2, [r0]
   150c8:	ldrd	r0, [r5, #80]	; 0x50
   150cc:	adds	r0, r0, #1
   150d0:	adc	r1, r1, #0
   150d4:	strd	r0, [r5, #80]	; 0x50
   150d8:	pop	{r4, r5, r6, sl, fp, pc}

000150dc <UnityAssertEqualNumber@@Base>:
   150dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   150e0:	add	fp, sp, #24
   150e4:	mov	r6, r0
   150e8:	movw	r0, #63248	; 0xf710
   150ec:	mov	r4, r2
   150f0:	mov	r5, r1
   150f4:	movw	r7, #1832	; 0x728
   150f8:	movt	r0, #2
   150fc:	movt	r7, #3
   15100:	ldr	r2, [r0]
   15104:	ldr	r1, [r0, #4]
   15108:	adds	r2, r2, #1
   1510c:	adc	r1, r1, #0
   15110:	str	r2, [r0]
   15114:	ldr	r2, [r7, #32]
   15118:	str	r1, [r0, #4]
   1511c:	ldr	r1, [r7, #36]	; 0x24
   15120:	orrs	r1, r1, r2
   15124:	beq	15130 <UnityAssertEqualNumber@@Base+0x54>
   15128:	add	r1, r0, #8
   1512c:	b	15154 <UnityAssertEqualNumber@@Base+0x78>
   15130:	ldr	r2, [r0, #16]
   15134:	ldr	r1, [r0, #20]
   15138:	adds	r2, r2, #1
   1513c:	adc	r1, r1, #0
   15140:	cmp	r6, r5
   15144:	str	r2, [r0, #16]
   15148:	str	r1, [r0, #20]
   1514c:	bne	15178 <UnityAssertEqualNumber@@Base+0x9c>
   15150:	add	r1, r0, #32
   15154:	ldrd	r2, [r1]
   15158:	adds	r2, r2, #1
   1515c:	adc	r3, r3, #0
   15160:	strd	r2, [r1]
   15164:	ldrd	r2, [r0, #40]	; 0x28
   15168:	adds	r2, r2, #1
   1516c:	adc	r3, r3, #0
   15170:	strd	r2, [r0, #40]	; 0x28
   15174:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15178:	ldr	r2, [r0, #24]
   1517c:	ldr	r1, [r0, #28]
   15180:	ldr	r8, [fp, #8]
   15184:	adds	r2, r2, #1
   15188:	adc	r1, r1, #0
   1518c:	str	r2, [r0, #24]
   15190:	str	r1, [r0, #28]
   15194:	mov	r0, r3
   15198:	bl	14f50 <UnityAssertBits@@Base+0x108>
   1519c:	movw	r0, #53740	; 0xd1ec
   151a0:	movt	r0, #1
   151a4:	bl	142c8 <UnityPrint@@Base>
   151a8:	mov	r0, r6
   151ac:	mov	r1, r8
   151b0:	bl	14794 <UnityPrintNumberByStyle@@Base>
   151b4:	movw	r0, #53751	; 0xd1f7
   151b8:	movt	r0, #1
   151bc:	bl	142c8 <UnityPrint@@Base>
   151c0:	mov	r0, r5
   151c4:	mov	r1, r8
   151c8:	bl	14794 <UnityPrintNumberByStyle@@Base>
   151cc:	mov	r0, r4
   151d0:	bl	14fb0 <UnityAssertBits@@Base+0x168>
   151d4:	mov	r0, #1
   151d8:	mov	r1, #1
   151dc:	str	r0, [r7, #32]
   151e0:	add	r0, r7, #40	; 0x28
   151e4:	bl	12638 <longjmp@plt>

000151e8 <UnityAssertEqualIntArray@@Base>:
   151e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151ec:	add	fp, sp, #28
   151f0:	sub	sp, sp, #4
   151f4:	movw	r9, #63296	; 0xf740
   151f8:	mov	r5, r1
   151fc:	mov	r7, r0
   15200:	movw	r4, #1832	; 0x728
   15204:	movt	r9, #2
   15208:	movt	r4, #3
   1520c:	ldrd	r0, [r9]
   15210:	adds	r0, r0, #1
   15214:	adc	r1, r1, #0
   15218:	strd	r0, [r9]
   1521c:	ldrd	r0, [r4, #32]
   15220:	orrs	r0, r1, r0
   15224:	beq	15240 <UnityAssertEqualIntArray@@Base+0x58>
   15228:	ldrd	r0, [r9, #8]
   1522c:	adds	r0, r0, #1
   15230:	adc	r1, r1, #0
   15234:	strd	r0, [r9, #8]
   15238:	add	r0, r9, #24
   1523c:	b	15488 <UnityAssertEqualIntArray@@Base+0x2a0>
   15240:	ldrd	r0, [r9, #16]
   15244:	ldr	r6, [fp, #8]
   15248:	mov	sl, r3
   1524c:	mov	r8, r2
   15250:	adds	r0, r0, #1
   15254:	adc	r1, r1, #0
   15258:	cmp	r2, #0
   1525c:	strd	r0, [r9, #16]
   15260:	beq	155f4 <UnityAssertEqualIntArray@@Base+0x40c>
   15264:	ldrd	r0, [r9, #40]	; 0x28
   15268:	mov	r2, r6
   1526c:	mov	r3, sl
   15270:	adds	r0, r0, #1
   15274:	adc	r1, r1, #0
   15278:	strd	r0, [r9, #40]	; 0x28
   1527c:	mov	r0, r7
   15280:	mov	r1, r5
   15284:	bl	15648 <UnityAssertEqualIntArray@@Base+0x460>
   15288:	cmp	r0, #1
   1528c:	bne	152a8 <UnityAssertEqualIntArray@@Base+0xc0>
   15290:	ldrd	r0, [r9, #48]	; 0x30
   15294:	adds	r0, r0, #1
   15298:	adc	r1, r1, #0
   1529c:	strd	r0, [r9, #48]	; 0x30
   152a0:	add	r0, r9, #64	; 0x40
   152a4:	b	15488 <UnityAssertEqualIntArray@@Base+0x2a0>
   152a8:	ldrd	r0, [r9, #56]	; 0x38
   152ac:	ldr	r2, [fp, #12]
   152b0:	mov	lr, r6
   152b4:	adds	r0, r0, #1
   152b8:	adc	r1, r1, #0
   152bc:	strd	r0, [r9, #56]	; 0x38
   152c0:	bic	r0, r2, #128	; 0x80
   152c4:	cmp	r0, #33	; 0x21
   152c8:	bgt	152e8 <UnityAssertEqualIntArray@@Base+0x100>
   152cc:	cmp	r0, #17
   152d0:	beq	15388 <UnityAssertEqualIntArray@@Base+0x1a0>
   152d4:	cmp	r0, #18
   152d8:	beq	15300 <UnityAssertEqualIntArray@@Base+0x118>
   152dc:	cmp	r0, #33	; 0x21
   152e0:	beq	15388 <UnityAssertEqualIntArray@@Base+0x1a0>
   152e4:	b	15410 <UnityAssertEqualIntArray@@Base+0x228>
   152e8:	cmp	r0, #34	; 0x22
   152ec:	beq	15300 <UnityAssertEqualIntArray@@Base+0x118>
   152f0:	cmp	r0, #65	; 0x41
   152f4:	beq	15388 <UnityAssertEqualIntArray@@Base+0x1a0>
   152f8:	cmp	r0, #66	; 0x42
   152fc:	bne	15410 <UnityAssertEqualIntArray@@Base+0x228>
   15300:	ldrd	r0, [r9, #120]	; 0x78
   15304:	ldr	r2, [r9, #176]	; 0xb0
   15308:	ldr	r3, [r9, #180]	; 0xb4
   1530c:	mov	r4, #0
   15310:	add	ip, r9, #192	; 0xc0
   15314:	adds	r0, r0, #1
   15318:	adc	r1, r1, #0
   1531c:	adds	r2, r2, #1
   15320:	str	r2, [r9, #176]	; 0xb0
   15324:	strd	r0, [r9, #120]	; 0x78
   15328:	adc	r0, r3, #0
   1532c:	add	r3, r9, #208	; 0xd0
   15330:	str	r0, [r9, #180]	; 0xb4
   15334:	ldr	r1, [r9, #188]	; 0xbc
   15338:	ldr	r2, [r9, #184]	; 0xb8
   1533c:	adds	r2, r2, #1
   15340:	adc	r1, r1, #0
   15344:	str	r2, [r9, #184]	; 0xb8
   15348:	str	r1, [r9, #188]	; 0xbc
   1534c:	ldrh	r0, [r5]
   15350:	ldrh	r6, [r7]
   15354:	cmp	r6, r0
   15358:	bne	154b8 <UnityAssertEqualIntArray@@Base+0x2d0>
   1535c:	add	r0, pc, #724	; 0x2d4
   15360:	vld1.64	{d18-d19}, [r3 :128]
   15364:	add	r4, r4, #1
   15368:	add	r5, r5, #2
   1536c:	add	r7, r7, #2
   15370:	vld1.64	{d16-d17}, [r0]
   15374:	cmp	r8, r4
   15378:	vadd.i64	q8, q9, q8
   1537c:	vst1.64	{d16-d17}, [r3 :128]
   15380:	bne	1533c <UnityAssertEqualIntArray@@Base+0x154>
   15384:	b	15474 <UnityAssertEqualIntArray@@Base+0x28c>
   15388:	ldrd	r0, [r9, #96]	; 0x60
   1538c:	ldr	r2, [r9, #128]	; 0x80
   15390:	ldr	r3, [r9, #132]	; 0x84
   15394:	mov	r4, #0
   15398:	add	ip, r9, #144	; 0x90
   1539c:	adds	r0, r0, #1
   153a0:	adc	r1, r1, #0
   153a4:	adds	r2, r2, #1
   153a8:	str	r2, [r9, #128]	; 0x80
   153ac:	strd	r0, [r9, #96]	; 0x60
   153b0:	adc	r0, r3, #0
   153b4:	add	r3, r9, #160	; 0xa0
   153b8:	str	r0, [r9, #132]	; 0x84
   153bc:	ldr	r1, [r9, #140]	; 0x8c
   153c0:	ldr	r2, [r9, #136]	; 0x88
   153c4:	adds	r2, r2, #1
   153c8:	adc	r1, r1, #0
   153cc:	str	r2, [r9, #136]	; 0x88
   153d0:	str	r1, [r9, #140]	; 0x8c
   153d4:	ldrb	r0, [r5]
   153d8:	ldrb	r6, [r7]
   153dc:	cmp	r6, r0
   153e0:	bne	15514 <UnityAssertEqualIntArray@@Base+0x32c>
   153e4:	add	r0, pc, #588	; 0x24c
   153e8:	vld1.64	{d18-d19}, [r3 :128]
   153ec:	add	r4, r4, #1
   153f0:	add	r5, r5, #1
   153f4:	add	r7, r7, #1
   153f8:	vld1.64	{d16-d17}, [r0]
   153fc:	cmp	r8, r4
   15400:	vadd.i64	q8, q9, q8
   15404:	vst1.64	{d16-d17}, [r3 :128]
   15408:	bne	153c4 <UnityAssertEqualIntArray@@Base+0x1dc>
   1540c:	b	15474 <UnityAssertEqualIntArray@@Base+0x28c>
   15410:	ldrd	r0, [r9, #72]	; 0x48
   15414:	ldrd	r2, [r9, #224]	; 0xe0
   15418:	mov	r4, #0
   1541c:	add	ip, r9, #232	; 0xe8
   15420:	adds	r0, r0, #1
   15424:	adc	r1, r1, #0
   15428:	strd	r0, [r9, #72]	; 0x48
   1542c:	add	r1, r9, #248	; 0xf8
   15430:	adds	r2, r2, #1
   15434:	adc	r3, r3, #0
   15438:	strd	r2, [r9, #224]	; 0xe0
   1543c:	ldr	r0, [r5]
   15440:	ldr	r6, [r7]
   15444:	cmp	r6, r0
   15448:	bne	15570 <UnityAssertEqualIntArray@@Base+0x388>
   1544c:	add	r0, pc, #484	; 0x1e4
   15450:	vld1.64	{d18-d19}, [r1]
   15454:	add	r4, r4, #1
   15458:	add	r5, r5, #4
   1545c:	add	r7, r7, #4
   15460:	vld1.64	{d16-d17}, [r0]
   15464:	cmp	r8, r4
   15468:	vadd.i64	q8, q9, q8
   1546c:	vst1.64	{d16-d17}, [r1]
   15470:	bne	15430 <UnityAssertEqualIntArray@@Base+0x248>
   15474:	ldrd	r0, [ip]
   15478:	adds	r0, r0, #1
   1547c:	adc	r1, r1, #0
   15480:	strd	r0, [ip]
   15484:	add	r0, r9, #264	; 0x108
   15488:	ldrd	r2, [r0]
   1548c:	adds	r2, r2, #1
   15490:	adc	r3, r3, #0
   15494:	strd	r2, [r0]
   15498:	ldr	r0, [r9, #272]	; 0x110
   1549c:	ldr	r1, [r9, #276]	; 0x114
   154a0:	adds	r0, r0, #1
   154a4:	adc	r1, r1, #0
   154a8:	str	r0, [r9, #272]	; 0x110
   154ac:	str	r1, [r9, #276]	; 0x114
   154b0:	sub	sp, fp, #28
   154b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154b8:	ldrd	r0, [r9, #200]	; 0xc8
   154bc:	ldr	r6, [fp, #12]
   154c0:	adds	r0, r0, #1
   154c4:	adc	r1, r1, #0
   154c8:	strd	r0, [r9, #200]	; 0xc8
   154cc:	mov	r0, lr
   154d0:	bl	14f50 <UnityAssertBits@@Base+0x108>
   154d4:	movw	r0, #53762	; 0xd202
   154d8:	movt	r0, #1
   154dc:	bl	142c8 <UnityPrint@@Base>
   154e0:	mov	r0, r4
   154e4:	bl	149f8 <UnityPrintNumberUnsigned@@Base>
   154e8:	movw	r0, #53740	; 0xd1ec
   154ec:	movt	r0, #1
   154f0:	bl	142c8 <UnityPrint@@Base>
   154f4:	ldrsh	r0, [r7]
   154f8:	mov	r1, r6
   154fc:	bl	14794 <UnityPrintNumberByStyle@@Base>
   15500:	movw	r0, #53751	; 0xd1f7
   15504:	movt	r0, #1
   15508:	bl	142c8 <UnityPrint@@Base>
   1550c:	ldrsh	r0, [r5]
   15510:	b	155c8 <UnityAssertEqualIntArray@@Base+0x3e0>
   15514:	ldrd	r0, [r9, #152]	; 0x98
   15518:	ldr	r6, [fp, #12]
   1551c:	adds	r0, r0, #1
   15520:	adc	r1, r1, #0
   15524:	strd	r0, [r9, #152]	; 0x98
   15528:	mov	r0, lr
   1552c:	bl	14f50 <UnityAssertBits@@Base+0x108>
   15530:	movw	r0, #53762	; 0xd202
   15534:	movt	r0, #1
   15538:	bl	142c8 <UnityPrint@@Base>
   1553c:	mov	r0, r4
   15540:	bl	149f8 <UnityPrintNumberUnsigned@@Base>
   15544:	movw	r0, #53740	; 0xd1ec
   15548:	movt	r0, #1
   1554c:	bl	142c8 <UnityPrint@@Base>
   15550:	ldrsb	r0, [r7]
   15554:	mov	r1, r6
   15558:	bl	14794 <UnityPrintNumberByStyle@@Base>
   1555c:	movw	r0, #53751	; 0xd1f7
   15560:	movt	r0, #1
   15564:	bl	142c8 <UnityPrint@@Base>
   15568:	ldrsb	r0, [r5]
   1556c:	b	155c8 <UnityAssertEqualIntArray@@Base+0x3e0>
   15570:	ldrd	r0, [r9, #240]	; 0xf0
   15574:	ldr	r6, [fp, #12]
   15578:	adds	r0, r0, #1
   1557c:	adc	r1, r1, #0
   15580:	strd	r0, [r9, #240]	; 0xf0
   15584:	mov	r0, lr
   15588:	bl	14f50 <UnityAssertBits@@Base+0x108>
   1558c:	movw	r0, #53762	; 0xd202
   15590:	movt	r0, #1
   15594:	bl	142c8 <UnityPrint@@Base>
   15598:	mov	r0, r4
   1559c:	bl	149f8 <UnityPrintNumberUnsigned@@Base>
   155a0:	movw	r0, #53740	; 0xd1ec
   155a4:	movt	r0, #1
   155a8:	bl	142c8 <UnityPrint@@Base>
   155ac:	ldr	r0, [r7]
   155b0:	mov	r1, r6
   155b4:	bl	14794 <UnityPrintNumberByStyle@@Base>
   155b8:	movw	r0, #53751	; 0xd1f7
   155bc:	movt	r0, #1
   155c0:	bl	142c8 <UnityPrint@@Base>
   155c4:	ldr	r0, [r5]
   155c8:	mov	r1, r6
   155cc:	bl	14794 <UnityPrintNumberByStyle@@Base>
   155d0:	mov	r0, sl
   155d4:	bl	14fb0 <UnityAssertBits@@Base+0x168>
   155d8:	movw	r1, #1832	; 0x728
   155dc:	mov	r0, #1
   155e0:	movt	r1, #3
   155e4:	str	r0, [r1, #32]
   155e8:	add	r0, r1, #40	; 0x28
   155ec:	mov	r1, #1
   155f0:	bl	12638 <longjmp@plt>
   155f4:	ldrd	r0, [r9, #32]
   155f8:	adds	r0, r0, #1
   155fc:	adc	r1, r1, #0
   15600:	strd	r0, [r9, #32]
   15604:	mov	r0, r6
   15608:	bl	14f50 <UnityAssertBits@@Base+0x108>
   1560c:	movw	r0, #53823	; 0xd23f
   15610:	movt	r0, #1
   15614:	bl	142c8 <UnityPrint@@Base>
   15618:	mov	r0, sl
   1561c:	bl	14fb0 <UnityAssertBits@@Base+0x168>
   15620:	mov	r0, #1
   15624:	mov	r1, #1
   15628:	str	r0, [r4, #32]
   1562c:	add	r0, r4, #40	; 0x28
   15630:	bl	12638 <longjmp@plt>
   15634:	nop	{0}
   15638:	andeq	r0, r0, r1
   1563c:	andeq	r0, r0, r0
   15640:	andeq	r0, r0, r1
   15644:	andeq	r0, r0, r0
   15648:	push	{r4, r5, r6, r7, fp, lr}
   1564c:	add	fp, sp, #16
   15650:	mov	r4, r3
   15654:	movw	r3, #63584	; 0xf860
   15658:	movt	r3, #2
   1565c:	ldrd	r6, [r3]
   15660:	adds	r6, r6, #1
   15664:	adc	r7, r7, #0
   15668:	strd	r6, [r3]
   1566c:	orrs	r7, r0, r1
   15670:	bne	15684 <UnityAssertEqualIntArray@@Base+0x49c>
   15674:	add	r1, r3, #24
   15678:	add	r2, r3, #8
   1567c:	mov	r0, #1
   15680:	b	156c8 <UnityAssertEqualIntArray@@Base+0x4e0>
   15684:	ldrd	r6, [r3, #16]
   15688:	adds	r6, r6, #1
   1568c:	adc	r7, r7, #0
   15690:	cmp	r0, #0
   15694:	strd	r6, [r3, #16]
   15698:	beq	15704 <UnityAssertEqualIntArray@@Base+0x51c>
   1569c:	ldr	r0, [r3, #40]	; 0x28
   156a0:	ldr	r5, [r3, #44]	; 0x2c
   156a4:	adds	r0, r0, #1
   156a8:	adc	r5, r5, #0
   156ac:	cmp	r1, #0
   156b0:	str	r0, [r3, #40]	; 0x28
   156b4:	str	r5, [r3, #44]	; 0x2c
   156b8:	beq	15728 <UnityAssertEqualIntArray@@Base+0x540>
   156bc:	add	r1, r3, #64	; 0x40
   156c0:	add	r2, r3, #56	; 0x38
   156c4:	mov	r0, #0
   156c8:	ldrd	r4, [r2]
   156cc:	adds	r4, r4, #1
   156d0:	adc	r5, r5, #0
   156d4:	strd	r4, [r2]
   156d8:	ldm	r1, {r2, r5}
   156dc:	adds	r2, r2, #1
   156e0:	adc	r5, r5, #0
   156e4:	stm	r1, {r2, r5}
   156e8:	ldr	r2, [r3, #72]	; 0x48
   156ec:	ldr	r1, [r3, #76]	; 0x4c
   156f0:	adds	r2, r2, #1
   156f4:	adc	r1, r1, #0
   156f8:	str	r2, [r3, #72]	; 0x48
   156fc:	str	r1, [r3, #76]	; 0x4c
   15700:	pop	{r4, r5, r6, r7, fp, pc}
   15704:	ldrd	r0, [r3, #32]
   15708:	adds	r0, r0, #1
   1570c:	adc	r1, r1, #0
   15710:	strd	r0, [r3, #32]
   15714:	mov	r0, r2
   15718:	bl	14f50 <UnityAssertBits@@Base+0x108>
   1571c:	movw	r0, #53878	; 0xd276
   15720:	movt	r0, #1
   15724:	b	15748 <UnityAssertEqualIntArray@@Base+0x560>
   15728:	ldrd	r0, [r3, #48]	; 0x30
   1572c:	adds	r0, r0, #1
   15730:	adc	r1, r1, #0
   15734:	strd	r0, [r3, #48]	; 0x30
   15738:	mov	r0, r2
   1573c:	bl	14f50 <UnityAssertBits@@Base+0x108>
   15740:	movw	r0, #53907	; 0xd293
   15744:	movt	r0, #1
   15748:	bl	142c8 <UnityPrint@@Base>
   1574c:	mov	r0, r4
   15750:	bl	14fb0 <UnityAssertBits@@Base+0x168>
   15754:	movw	r0, #1832	; 0x728
   15758:	mov	r1, #1
   1575c:	movt	r0, #3
   15760:	str	r1, [r0, #32]
   15764:	add	r0, r0, #40	; 0x28
   15768:	mov	r1, #1
   1576c:	bl	12638 <longjmp@plt>

00015770 <UnityAssertEqualFloatArray@@Base>:
   15770:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15774:	add	fp, sp, #28
   15778:	sub	sp, sp, #12
   1577c:	movw	r8, #63664	; 0xf8b0
   15780:	mov	r7, r1
   15784:	mov	r5, r0
   15788:	movw	r9, #1832	; 0x728
   1578c:	movt	r8, #2
   15790:	movt	r9, #3
   15794:	ldrd	r0, [r8]
   15798:	adds	r0, r0, #1
   1579c:	adc	r1, r1, #0
   157a0:	strd	r0, [r8]
   157a4:	ldrd	r0, [r9, #32]
   157a8:	orrs	r0, r1, r0
   157ac:	beq	157c8 <UnityAssertEqualFloatArray@@Base+0x58>
   157b0:	ldrd	r0, [r8, #8]
   157b4:	adds	r0, r0, #1
   157b8:	adc	r1, r1, #0
   157bc:	strd	r0, [r8, #8]
   157c0:	add	r0, r8, #24
   157c4:	b	1597c <UnityAssertEqualFloatArray@@Base+0x20c>
   157c8:	ldrd	r0, [r8, #16]
   157cc:	mov	r6, r2
   157d0:	ldr	r2, [fp, #8]
   157d4:	mov	r4, r3
   157d8:	adds	r0, r0, #1
   157dc:	adc	r1, r1, #0
   157e0:	cmp	r6, #0
   157e4:	strd	r0, [r8, #16]
   157e8:	beq	15a0c <UnityAssertEqualFloatArray@@Base+0x29c>
   157ec:	ldrd	r0, [r8, #40]	; 0x28
   157f0:	mov	r3, r4
   157f4:	adds	r0, r0, #1
   157f8:	adc	r1, r1, #0
   157fc:	strd	r0, [r8, #40]	; 0x28
   15800:	mov	r0, r5
   15804:	mov	r1, r7
   15808:	bl	15648 <UnityAssertEqualIntArray@@Base+0x460>
   1580c:	cmp	r0, #1
   15810:	bne	1582c <UnityAssertEqualFloatArray@@Base+0xbc>
   15814:	ldrd	r0, [r8, #48]	; 0x30
   15818:	adds	r0, r0, #1
   1581c:	adc	r1, r1, #0
   15820:	strd	r0, [r8, #48]	; 0x30
   15824:	add	r0, r8, #64	; 0x40
   15828:	b	1597c <UnityAssertEqualFloatArray@@Base+0x20c>
   1582c:	ldrd	r2, [r8, #56]	; 0x38
   15830:	vldr	s0, [pc, #552]	; 15a60 <UnityAssertEqualFloatArray@@Base+0x2f0>
   15834:	vldr	s2, [pc, #552]	; 15a64 <UnityAssertEqualFloatArray@@Base+0x2f4>
   15838:	ldr	r0, [r8, #72]	; 0x48
   1583c:	ldr	r9, [r8, #76]	; 0x4c
   15840:	add	r1, r8, #96	; 0x60
   15844:	str	r4, [sp]
   15848:	mov	r4, #0
   1584c:	add	lr, r8, #120	; 0x78
   15850:	add	sl, r8, #128	; 0x80
   15854:	str	r1, [sp, #8]
   15858:	add	r1, r8, #104	; 0x68
   1585c:	str	r1, [sp, #4]
   15860:	adds	r2, r2, #1
   15864:	adc	r3, r3, #0
   15868:	strd	r2, [r8, #56]	; 0x38
   1586c:	adds	r0, r0, #1
   15870:	adc	r9, r9, #0
   15874:	str	r0, [r8, #72]	; 0x48
   15878:	str	r9, [r8, #76]	; 0x4c
   1587c:	vldr	s4, [r7]
   15880:	vldr	s6, [r5]
   15884:	vsub.f32	s4, s6, s4
   15888:	vcmpe.f32	s4, #0.0
   1588c:	vmrs	APSR_nzcv, fpscr
   15890:	bpl	158b0 <UnityAssertEqualFloatArray@@Base+0x140>
   15894:	ldrd	r2, [r8, #88]	; 0x58
   15898:	vsub.f32	s4, s0, s4
   1589c:	ldr	ip, [sp, #4]
   158a0:	adds	r2, r2, #1
   158a4:	adc	r3, r3, #0
   158a8:	strd	r2, [r8, #88]	; 0x58
   158ac:	b	158b4 <UnityAssertEqualFloatArray@@Base+0x144>
   158b0:	ldr	ip, [sp, #8]
   158b4:	ldrd	r2, [ip]
   158b8:	adds	r2, r2, #1
   158bc:	adc	r3, r3, #0
   158c0:	strd	r2, [ip]
   158c4:	vldr	s6, [r5]
   158c8:	vmul.f32	s6, s6, s2
   158cc:	vcmpe.f32	s6, #0.0
   158d0:	vmrs	APSR_nzcv, fpscr
   158d4:	bpl	158f4 <UnityAssertEqualFloatArray@@Base+0x184>
   158d8:	ldrd	r2, [r8, #112]	; 0x70
   158dc:	vsub.f32	s6, s0, s6
   158e0:	adds	r2, r2, #1
   158e4:	adc	r3, r3, #0
   158e8:	strd	r2, [r8, #112]	; 0x70
   158ec:	mov	r2, sl
   158f0:	b	158f8 <UnityAssertEqualFloatArray@@Base+0x188>
   158f4:	mov	r2, lr
   158f8:	vmul.f32	s8, s4, s0
   158fc:	ldr	r3, [r2]
   15900:	ldr	r1, [r2, #4]
   15904:	adds	r3, r3, #1
   15908:	vcmp.f32	s8, #0.0
   1590c:	adc	r1, r1, #0
   15910:	str	r3, [r2]
   15914:	str	r1, [r2, #4]
   15918:	vmrs	APSR_nzcv, fpscr
   1591c:	bne	159a4 <UnityAssertEqualFloatArray@@Base+0x234>
   15920:	ldrd	r2, [r8, #144]	; 0x90
   15924:	vcmpe.f32	s4, s6
   15928:	adds	r2, r2, #1
   1592c:	adc	r3, r3, #0
   15930:	vmrs	APSR_nzcv, fpscr
   15934:	strd	r2, [r8, #144]	; 0x90
   15938:	bgt	159ac <UnityAssertEqualFloatArray@@Base+0x23c>
   1593c:	add	r2, pc, #268	; 0x10c
   15940:	add	r1, r8, #160	; 0xa0
   15944:	add	r4, r4, #1
   15948:	add	r7, r7, #4
   1594c:	add	r5, r5, #4
   15950:	vld1.64	{d16-d17}, [r2]
   15954:	vld1.64	{d18-d19}, [r1 :128]
   15958:	cmp	r6, r4
   1595c:	vadd.i64	q8, q9, q8
   15960:	vst1.64	{d16-d17}, [r1 :128]
   15964:	bne	1586c <UnityAssertEqualFloatArray@@Base+0xfc>
   15968:	ldrd	r0, [r8, #80]	; 0x50
   1596c:	adds	r0, r0, #1
   15970:	adc	r1, r1, #0
   15974:	strd	r0, [r8, #80]	; 0x50
   15978:	add	r0, r8, #176	; 0xb0
   1597c:	ldrd	r2, [r0]
   15980:	adds	r2, r2, #1
   15984:	adc	r3, r3, #0
   15988:	strd	r2, [r0]
   1598c:	ldrd	r0, [r8, #184]	; 0xb8
   15990:	adds	r0, r0, #1
   15994:	adc	r1, r1, #0
   15998:	strd	r0, [r8, #184]	; 0xb8
   1599c:	sub	sp, fp, #28
   159a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159a4:	add	r0, r8, #136	; 0x88
   159a8:	b	159b0 <UnityAssertEqualFloatArray@@Base+0x240>
   159ac:	add	r0, r8, #152	; 0x98
   159b0:	ldrd	r2, [r0]
   159b4:	adds	r2, r2, #1
   159b8:	adc	r3, r3, #0
   159bc:	strd	r2, [r0]
   159c0:	ldr	r0, [fp, #8]
   159c4:	bl	14f50 <UnityAssertBits@@Base+0x108>
   159c8:	movw	r0, #53762	; 0xd202
   159cc:	movt	r0, #1
   159d0:	bl	142c8 <UnityPrint@@Base>
   159d4:	mov	r0, r4
   159d8:	bl	149f8 <UnityPrintNumberUnsigned@@Base>
   159dc:	movw	r0, #53797	; 0xd225
   159e0:	movt	r0, #1
   159e4:	bl	142c8 <UnityPrint@@Base>
   159e8:	ldr	r0, [sp]
   159ec:	bl	14fb0 <UnityAssertBits@@Base+0x168>
   159f0:	movw	r1, #1832	; 0x728
   159f4:	mov	r0, #1
   159f8:	movt	r1, #3
   159fc:	str	r0, [r1, #32]
   15a00:	add	r0, r1, #40	; 0x28
   15a04:	mov	r1, #1
   15a08:	bl	12638 <longjmp@plt>
   15a0c:	ldrd	r0, [r8, #32]
   15a10:	adds	r0, r0, #1
   15a14:	adc	r1, r1, #0
   15a18:	strd	r0, [r8, #32]
   15a1c:	mov	r0, r2
   15a20:	bl	14f50 <UnityAssertBits@@Base+0x108>
   15a24:	movw	r0, #53823	; 0xd23f
   15a28:	movt	r0, #1
   15a2c:	bl	142c8 <UnityPrint@@Base>
   15a30:	mov	r0, r4
   15a34:	bl	14fb0 <UnityAssertBits@@Base+0x168>
   15a38:	mov	r0, #1
   15a3c:	mov	r1, #1
   15a40:	str	r0, [r9, #32]
   15a44:	add	r0, r9, #40	; 0x28
   15a48:	bl	12638 <longjmp@plt>
   15a4c:	nop	{0}
   15a50:	andeq	r0, r0, r1
   15a54:	andeq	r0, r0, r0
   15a58:	andeq	r0, r0, r1
	...
   15a64:	strcc	ip, [r7, -ip, lsr #11]!

00015a68 <UnityAssertFloatsWithin@@Base>:
   15a68:	push	{r4, r5, r6, r7, fp, lr}
   15a6c:	add	fp, sp, #16
   15a70:	mov	r4, r0
   15a74:	movw	r0, #63856	; 0xf970
   15a78:	movw	r5, #1832	; 0x728
   15a7c:	movt	r0, #2
   15a80:	movt	r5, #3
   15a84:	ldrd	r2, [r0]
   15a88:	adds	r2, r2, #1
   15a8c:	adc	r3, r3, #0
   15a90:	strd	r2, [r0]
   15a94:	ldrd	r2, [r5, #32]
   15a98:	orrs	r2, r3, r2
   15a9c:	beq	15aac <UnityAssertFloatsWithin@@Base+0x44>
   15aa0:	add	r1, r0, #24
   15aa4:	add	r2, r0, #8
   15aa8:	b	15b78 <UnityAssertFloatsWithin@@Base+0x110>
   15aac:	vsub.f32	s2, s2, s1
   15ab0:	ldrd	r2, [r0, #16]
   15ab4:	adds	r2, r2, #1
   15ab8:	vcmpe.f32	s2, #0.0
   15abc:	adc	r3, r3, #0
   15ac0:	strd	r2, [r0, #16]
   15ac4:	vmrs	APSR_nzcv, fpscr
   15ac8:	bpl	15aec <UnityAssertFloatsWithin@@Base+0x84>
   15acc:	vldr	s4, [pc, #292]	; 15bf8 <UnityAssertFloatsWithin@@Base+0x190>
   15ad0:	ldrd	r2, [r0, #32]
   15ad4:	adds	r2, r2, #1
   15ad8:	vsub.f32	s2, s4, s2
   15adc:	adc	r3, r3, #0
   15ae0:	strd	r2, [r0, #32]
   15ae4:	add	r2, r0, #48	; 0x30
   15ae8:	b	15af0 <UnityAssertFloatsWithin@@Base+0x88>
   15aec:	add	r2, r0, #40	; 0x28
   15af0:	ldrd	r6, [r2]
   15af4:	vcmpe.f32	s0, #0.0
   15af8:	adds	r6, r6, #1
   15afc:	adc	r7, r7, #0
   15b00:	vmrs	APSR_nzcv, fpscr
   15b04:	strd	r6, [r2]
   15b08:	bpl	15b2c <UnityAssertFloatsWithin@@Base+0xc4>
   15b0c:	vldr	s4, [pc, #228]	; 15bf8 <UnityAssertFloatsWithin@@Base+0x190>
   15b10:	ldrd	r2, [r0, #56]	; 0x38
   15b14:	adds	r2, r2, #1
   15b18:	vsub.f32	s0, s4, s0
   15b1c:	adc	r3, r3, #0
   15b20:	strd	r2, [r0, #56]	; 0x38
   15b24:	add	r2, r0, #72	; 0x48
   15b28:	b	15b30 <UnityAssertFloatsWithin@@Base+0xc8>
   15b2c:	add	r2, r0, #64	; 0x40
   15b30:	vldr	s4, [pc, #192]	; 15bf8 <UnityAssertFloatsWithin@@Base+0x190>
   15b34:	ldrd	r6, [r2]
   15b38:	adds	r6, r6, #1
   15b3c:	vmul.f32	s4, s2, s4
   15b40:	adc	r7, r7, #0
   15b44:	strd	r6, [r2]
   15b48:	vcmp.f32	s4, #0.0
   15b4c:	vmrs	APSR_nzcv, fpscr
   15b50:	bne	15bac <UnityAssertFloatsWithin@@Base+0x144>
   15b54:	ldrd	r2, [r0, #88]	; 0x58
   15b58:	vcmpe.f32	s0, s2
   15b5c:	adds	r2, r2, #1
   15b60:	adc	r3, r3, #0
   15b64:	vmrs	APSR_nzcv, fpscr
   15b68:	strd	r2, [r0, #88]	; 0x58
   15b6c:	bmi	15bb4 <UnityAssertFloatsWithin@@Base+0x14c>
   15b70:	add	r1, r0, #112	; 0x70
   15b74:	add	r2, r0, #104	; 0x68
   15b78:	ldrd	r4, [r2]
   15b7c:	adds	r4, r4, #1
   15b80:	adc	r5, r5, #0
   15b84:	strd	r4, [r2]
   15b88:	ldrd	r2, [r1]
   15b8c:	adds	r2, r2, #1
   15b90:	adc	r3, r3, #0
   15b94:	strd	r2, [r1]
   15b98:	ldrd	r2, [r0, #120]	; 0x78
   15b9c:	adds	r2, r2, #1
   15ba0:	adc	r3, r3, #0
   15ba4:	strd	r2, [r0, #120]	; 0x78
   15ba8:	pop	{r4, r5, r6, r7, fp, pc}
   15bac:	add	r0, r0, #80	; 0x50
   15bb0:	b	15bb8 <UnityAssertFloatsWithin@@Base+0x150>
   15bb4:	add	r0, r0, #96	; 0x60
   15bb8:	ldrd	r2, [r0]
   15bbc:	adds	r2, r2, #1
   15bc0:	adc	r3, r3, #0
   15bc4:	strd	r2, [r0]
   15bc8:	mov	r0, r1
   15bcc:	bl	14f50 <UnityAssertBits@@Base+0x108>
   15bd0:	movw	r0, #53797	; 0xd225
   15bd4:	movt	r0, #1
   15bd8:	bl	142c8 <UnityPrint@@Base>
   15bdc:	mov	r0, r4
   15be0:	bl	14fb0 <UnityAssertBits@@Base+0x168>
   15be4:	mov	r0, #1
   15be8:	mov	r1, #1
   15bec:	str	r0, [r5, #32]
   15bf0:	add	r0, r5, #40	; 0x28
   15bf4:	bl	12638 <longjmp@plt>
   15bf8:	andeq	r0, r0, r0

00015bfc <UnityAssertFloatSpecial@@Base>:
   15bfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c00:	add	fp, sp, #28
   15c04:	sub	sp, sp, #4
   15c08:	vpush	{d8}
   15c0c:	sub	sp, sp, #16
   15c10:	movw	r7, #63984	; 0xf9f0
   15c14:	mov	r5, r1
   15c18:	mov	r8, r0
   15c1c:	movw	sl, #1832	; 0x728
   15c20:	mov	r4, sp
   15c24:	movt	r7, #2
   15c28:	movt	sl, #3
   15c2c:	ldrd	r0, [r7]
   15c30:	adds	r0, r0, #1
   15c34:	adc	r1, r1, #0
   15c38:	strd	r0, [r7]
   15c3c:	movw	r0, #54200	; 0xd3b8
   15c40:	movt	r0, #1
   15c44:	vld1.64	{d16-d17}, [r0]
   15c48:	ldrd	r0, [sl, #32]
   15c4c:	orrs	r0, r1, r0
   15c50:	vst1.64	{d16-d17}, [r4]
   15c54:	beq	15c70 <UnityAssertFloatSpecial@@Base+0x74>
   15c58:	ldrd	r0, [r7, #8]
   15c5c:	adds	r0, r0, #1
   15c60:	adc	r1, r1, #0
   15c64:	strd	r0, [r7, #8]
   15c68:	add	r0, r7, #24
   15c6c:	b	15e0c <UnityAssertFloatSpecial@@Base+0x210>
   15c70:	ldrd	r0, [r7, #16]
   15c74:	and	r9, r2, #1
   15c78:	adds	r0, r0, #1
   15c7c:	adc	r1, r1, #0
   15c80:	cmp	r2, #7
   15c84:	strd	r0, [r7, #16]
   15c88:	bhi	15d98 <UnityAssertFloatSpecial@@Base+0x19c>
   15c8c:	add	r0, pc, #4
   15c90:	vmov.f32	s16, s0
   15c94:	ldr	pc, [r0, r2, lsl #2]
   15c98:			; <UNDEFINED> instruction: 0x00015cb8
   15c9c:			; <UNDEFINED> instruction: 0x00015cb8
   15ca0:	andeq	r5, r1, r0, ror #26
   15ca4:	andeq	r5, r1, r0, ror #26
   15ca8:	strdeq	r5, [r1], -r0
   15cac:	strdeq	r5, [r1], -r0
   15cb0:	andeq	r5, r1, r4, lsl sp
   15cb4:	andeq	r5, r1, r4, lsl sp
   15cb8:	ldrd	r0, [r7, #48]	; 0x30
   15cbc:	vmov.f32	s0, s16
   15cc0:	vcmpe.f32	s16, #0.0
   15cc4:	mov	r6, #0
   15cc8:	adds	r0, r0, #1
   15ccc:	adc	r1, r1, #0
   15cd0:	vmrs	APSR_nzcv, fpscr
   15cd4:	movwgt	r6, #1
   15cd8:	strd	r0, [r7, #48]	; 0x30
   15cdc:	bl	126b0 <__isinff@plt>
   15ce0:	and	r0, r0, r6
   15ce4:	mov	r1, #0
   15ce8:	add	r6, r7, #104	; 0x68
   15cec:	b	15de0 <UnityAssertFloatSpecial@@Base+0x1e4>
   15cf0:	ldrd	r0, [r7, #80]	; 0x50
   15cf4:	vmov.f32	s0, s16
   15cf8:	add	r6, r7, #120	; 0x78
   15cfc:	adds	r0, r0, #1
   15d00:	adc	r1, r1, #0
   15d04:	strd	r0, [r7, #80]	; 0x50
   15d08:	bl	12668 <__isnanf@plt>
   15d0c:	mov	r1, #2
   15d10:	b	15de0 <UnityAssertFloatSpecial@@Base+0x1e4>
   15d14:	ldrd	r0, [r7, #96]	; 0x60
   15d18:	vmov.f32	s0, s16
   15d1c:	adds	r0, r0, #1
   15d20:	adc	r1, r1, #0
   15d24:	strd	r0, [r7, #96]	; 0x60
   15d28:	bl	126b0 <__isinff@plt>
   15d2c:	vmov.f32	s0, s16
   15d30:	mov	r6, r0
   15d34:	bl	12668 <__isnanf@plt>
   15d38:	orrs	r0, r0, r6
   15d3c:	beq	15dc4 <UnityAssertFloatSpecial@@Base+0x1c8>
   15d40:	ldrd	r0, [r7, #128]	; 0x80
   15d44:	add	r6, r7, #144	; 0x90
   15d48:	adds	r0, r0, #1
   15d4c:	adc	r1, r1, #0
   15d50:	strd	r0, [r7, #128]	; 0x80
   15d54:	mov	r1, #3
   15d58:	mov	r0, #0
   15d5c:	b	15de0 <UnityAssertFloatSpecial@@Base+0x1e4>
   15d60:	ldrd	r0, [r7, #64]	; 0x40
   15d64:	vmov.f32	s0, s16
   15d68:	vcmpe.f32	s16, #0.0
   15d6c:	mov	r6, #0
   15d70:	adds	r0, r0, #1
   15d74:	adc	r1, r1, #0
   15d78:	vmrs	APSR_nzcv, fpscr
   15d7c:	movwmi	r6, #1
   15d80:	strd	r0, [r7, #64]	; 0x40
   15d84:	bl	126b0 <__isinff@plt>
   15d88:	and	r0, r0, r6
   15d8c:	add	r6, r7, #112	; 0x70
   15d90:	mov	r1, #1
   15d94:	b	15de0 <UnityAssertFloatSpecial@@Base+0x1e4>
   15d98:	ldrd	r2, [r7, #32]
   15d9c:	movw	r1, #53980	; 0xd2dc
   15da0:	eor	r0, r9, #1
   15da4:	add	r6, r7, #160	; 0xa0
   15da8:	movt	r1, #1
   15dac:	str	r1, [sp]
   15db0:	mov	r1, #0
   15db4:	adds	r2, r2, #1
   15db8:	adc	r3, r3, #0
   15dbc:	strd	r2, [r7, #32]
   15dc0:	b	15de0 <UnityAssertFloatSpecial@@Base+0x1e4>
   15dc4:	ldrd	r0, [r7, #136]	; 0x88
   15dc8:	add	r6, r7, #152	; 0x98
   15dcc:	adds	r0, r0, #1
   15dd0:	adc	r1, r1, #0
   15dd4:	strd	r0, [r7, #136]	; 0x88
   15dd8:	mov	r1, #3
   15ddc:	mov	r0, #1
   15de0:	ldrd	r2, [r6]
   15de4:	adds	r2, r2, #1
   15de8:	adc	r3, r3, #0
   15dec:	cmp	r0, r9
   15df0:	strd	r2, [r6]
   15df4:	bne	15e3c <UnityAssertFloatSpecial@@Base+0x240>
   15df8:	ldrd	r0, [r7, #176]	; 0xb0
   15dfc:	adds	r0, r0, #1
   15e00:	adc	r1, r1, #0
   15e04:	strd	r0, [r7, #176]	; 0xb0
   15e08:	add	r0, r7, #232	; 0xe8
   15e0c:	ldrd	r2, [r0]
   15e10:	adds	r2, r2, #1
   15e14:	adc	r3, r3, #0
   15e18:	strd	r2, [r0]
   15e1c:	ldrd	r0, [r7, #240]	; 0xf0
   15e20:	adds	r0, r0, #1
   15e24:	adc	r1, r1, #0
   15e28:	strd	r0, [r7, #240]	; 0xf0
   15e2c:	sub	sp, fp, #40	; 0x28
   15e30:	vpop	{d8}
   15e34:	add	sp, sp, #4
   15e38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e3c:	mov	r6, r1
   15e40:	ldrd	r0, [r7, #168]	; 0xa8
   15e44:	adds	r0, r0, #1
   15e48:	adc	r1, r1, #0
   15e4c:	strd	r0, [r7, #168]	; 0xa8
   15e50:	mov	r0, r5
   15e54:	bl	14f50 <UnityAssertBits@@Base+0x108>
   15e58:	movw	r0, #53740	; 0xd1ec
   15e5c:	movt	r0, #1
   15e60:	bl	142c8 <UnityPrint@@Base>
   15e64:	cmp	r9, #0
   15e68:	beq	15e74 <UnityAssertFloatSpecial@@Base+0x278>
   15e6c:	add	r0, r7, #184	; 0xb8
   15e70:	b	15e94 <UnityAssertFloatSpecial@@Base+0x298>
   15e74:	ldrd	r0, [r7, #192]	; 0xc0
   15e78:	adds	r0, r0, #1
   15e7c:	adc	r1, r1, #0
   15e80:	strd	r0, [r7, #192]	; 0xc0
   15e84:	movw	r0, #53932	; 0xd2ac
   15e88:	movt	r0, #1
   15e8c:	bl	142c8 <UnityPrint@@Base>
   15e90:	add	r0, r7, #200	; 0xc8
   15e94:	ldrd	r2, [r0]
   15e98:	ldr	r5, [r4, r6, lsl #2]
   15e9c:	adds	r2, r2, #1
   15ea0:	adc	r3, r3, #0
   15ea4:	strd	r2, [r0]
   15ea8:	mov	r0, r5
   15eac:	bl	142c8 <UnityPrint@@Base>
   15eb0:	movw	r0, #53751	; 0xd1f7
   15eb4:	movt	r0, #1
   15eb8:	bl	142c8 <UnityPrint@@Base>
   15ebc:	cmp	r9, #0
   15ec0:	beq	15ee8 <UnityAssertFloatSpecial@@Base+0x2ec>
   15ec4:	ldrd	r0, [r7, #208]	; 0xd0
   15ec8:	adds	r0, r0, #1
   15ecc:	adc	r1, r1, #0
   15ed0:	strd	r0, [r7, #208]	; 0xd0
   15ed4:	movw	r0, #53932	; 0xd2ac
   15ed8:	movt	r0, #1
   15edc:	bl	142c8 <UnityPrint@@Base>
   15ee0:	add	r0, r7, #224	; 0xe0
   15ee4:	b	15eec <UnityAssertFloatSpecial@@Base+0x2f0>
   15ee8:	add	r0, r7, #216	; 0xd8
   15eec:	ldrd	r2, [r0]
   15ef0:	adds	r2, r2, #1
   15ef4:	adc	r3, r3, #0
   15ef8:	strd	r2, [r0]
   15efc:	mov	r0, r5
   15f00:	bl	142c8 <UnityPrint@@Base>
   15f04:	mov	r0, r8
   15f08:	bl	14fb0 <UnityAssertBits@@Base+0x168>
   15f0c:	mov	r0, #1
   15f10:	mov	r1, #1
   15f14:	str	r0, [sl, #32]
   15f18:	add	r0, sl, #40	; 0x28
   15f1c:	bl	12638 <longjmp@plt>

00015f20 <UnityAssertNumbersWithin@@Base>:
   15f20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f24:	add	fp, sp, #28
   15f28:	sub	sp, sp, #4
   15f2c:	mov	r6, r1
   15f30:	movw	r1, #64240	; 0xfaf0
   15f34:	mov	r9, r3
   15f38:	mov	r7, r0
   15f3c:	movw	sl, #1832	; 0x728
   15f40:	movt	r1, #2
   15f44:	movt	sl, #3
   15f48:	ldm	r1, {r0, r3}
   15f4c:	adds	r0, r0, #1
   15f50:	adc	r3, r3, #0
   15f54:	stm	r1, {r0, r3}
   15f58:	ldr	r0, [sl, #32]
   15f5c:	ldr	r3, [sl, #36]	; 0x24
   15f60:	orrs	r0, r3, r0
   15f64:	beq	15f70 <UnityAssertNumbersWithin@@Base+0x50>
   15f68:	add	r0, r1, #8
   15f6c:	b	16090 <UnityAssertNumbersWithin@@Base+0x170>
   15f70:	ldr	r0, [r1, #16]
   15f74:	ldr	r8, [fp, #12]
   15f78:	ldr	r3, [r1, #20]
   15f7c:	mov	r4, r2
   15f80:	adds	r0, r0, #1
   15f84:	adc	r3, r3, #0
   15f88:	tst	r8, #16
   15f8c:	str	r0, [r1, #16]
   15f90:	str	r3, [r1, #20]
   15f94:	bne	15fdc <UnityAssertNumbersWithin@@Base+0xbc>
   15f98:	ldr	r0, [r1, #32]
   15f9c:	ldr	r3, [r1, #36]	; 0x24
   15fa0:	adds	r0, r0, #1
   15fa4:	adc	r3, r3, #0
   15fa8:	cmp	r4, r6
   15fac:	str	r0, [r1, #32]
   15fb0:	str	r3, [r1, #36]	; 0x24
   15fb4:	bls	16020 <UnityAssertNumbersWithin@@Base+0x100>
   15fb8:	ldr	r0, [r1, #72]	; 0x48
   15fbc:	ldr	r3, [r1, #76]	; 0x4c
   15fc0:	add	r2, r1, #88	; 0x58
   15fc4:	adds	r0, r0, #1
   15fc8:	adc	r3, r3, #0
   15fcc:	str	r0, [r1, #72]	; 0x48
   15fd0:	sub	r0, r4, r6
   15fd4:	str	r3, [r1, #76]	; 0x4c
   15fd8:	b	16064 <UnityAssertNumbersWithin@@Base+0x144>
   15fdc:	ldr	r0, [r1, #24]
   15fe0:	ldr	r3, [r1, #28]
   15fe4:	adds	r0, r0, #1
   15fe8:	adc	r3, r3, #0
   15fec:	cmp	r4, r6
   15ff0:	str	r0, [r1, #24]
   15ff4:	str	r3, [r1, #28]
   15ff8:	ble	16044 <UnityAssertNumbersWithin@@Base+0x124>
   15ffc:	ldr	r0, [r1, #40]	; 0x28
   16000:	ldr	r3, [r1, #44]	; 0x2c
   16004:	add	r2, r1, #56	; 0x38
   16008:	adds	r0, r0, #1
   1600c:	adc	r3, r3, #0
   16010:	str	r0, [r1, #40]	; 0x28
   16014:	sub	r0, r4, r6
   16018:	str	r3, [r1, #44]	; 0x2c
   1601c:	b	16064 <UnityAssertNumbersWithin@@Base+0x144>
   16020:	ldr	r0, [r1, #80]	; 0x50
   16024:	ldr	r3, [r1, #84]	; 0x54
   16028:	add	r2, r1, #96	; 0x60
   1602c:	adds	r0, r0, #1
   16030:	str	r0, [r1, #80]	; 0x50
   16034:	adc	r3, r3, #0
   16038:	sub	r0, r6, r4
   1603c:	str	r3, [r1, #84]	; 0x54
   16040:	b	16064 <UnityAssertNumbersWithin@@Base+0x144>
   16044:	ldr	r0, [r1, #48]	; 0x30
   16048:	ldr	r3, [r1, #52]	; 0x34
   1604c:	add	r2, r1, #64	; 0x40
   16050:	adds	r0, r0, #1
   16054:	adc	r3, r3, #0
   16058:	str	r0, [r1, #48]	; 0x30
   1605c:	sub	r0, r6, r4
   16060:	str	r3, [r1, #52]	; 0x34
   16064:	cmp	r0, r7
   16068:	mov	r3, #0
   1606c:	movwhi	r3, #1
   16070:	str	r3, [sl, #32]
   16074:	ldm	r2, {r3, r5}
   16078:	adds	r3, r3, #1
   1607c:	adc	r5, r5, #0
   16080:	cmp	r0, r7
   16084:	stm	r2, {r3, r5}
   16088:	bhi	160c0 <UnityAssertNumbersWithin@@Base+0x1a0>
   1608c:	add	r0, r1, #112	; 0x70
   16090:	ldrd	r2, [r0]
   16094:	adds	r2, r2, #1
   16098:	adc	r3, r3, #0
   1609c:	strd	r2, [r0]
   160a0:	ldr	r0, [r1, #120]	; 0x78
   160a4:	ldr	r3, [r1, #124]	; 0x7c
   160a8:	adds	r0, r0, #1
   160ac:	adc	r3, r3, #0
   160b0:	str	r0, [r1, #120]	; 0x78
   160b4:	str	r3, [r1, #124]	; 0x7c
   160b8:	sub	sp, fp, #28
   160bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160c0:	ldrd	r2, [r1, #104]	; 0x68
   160c4:	ldr	r0, [fp, #8]
   160c8:	adds	r2, r2, #1
   160cc:	adc	r3, r3, #0
   160d0:	strd	r2, [r1, #104]	; 0x68
   160d4:	bl	14f50 <UnityAssertBits@@Base+0x108>
   160d8:	movw	r0, #53797	; 0xd225
   160dc:	movt	r0, #1
   160e0:	bl	142c8 <UnityPrint@@Base>
   160e4:	mov	r0, r7
   160e8:	mov	r1, r8
   160ec:	bl	14794 <UnityPrintNumberByStyle@@Base>
   160f0:	movw	r0, #53740	; 0xd1ec
   160f4:	movt	r0, #1
   160f8:	bl	142c8 <UnityPrint@@Base>
   160fc:	mov	r0, r6
   16100:	mov	r1, r8
   16104:	bl	14794 <UnityPrintNumberByStyle@@Base>
   16108:	movw	r0, #53751	; 0xd1f7
   1610c:	movt	r0, #1
   16110:	bl	142c8 <UnityPrint@@Base>
   16114:	mov	r0, r4
   16118:	mov	r1, r8
   1611c:	bl	14794 <UnityPrintNumberByStyle@@Base>
   16120:	mov	r0, r9
   16124:	bl	14fb0 <UnityAssertBits@@Base+0x168>
   16128:	mov	r0, #1
   1612c:	mov	r1, #1
   16130:	str	r0, [sl, #32]
   16134:	add	r0, sl, #40	; 0x28
   16138:	bl	12638 <longjmp@plt>

0001613c <UnityAssertEqualString@@Base>:
   1613c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16140:	add	fp, sp, #28
   16144:	sub	sp, sp, #20
   16148:	movw	lr, #64368	; 0xfb70
   1614c:	mov	r6, r2
   16150:	mov	sl, r1
   16154:	movw	r7, #1832	; 0x728
   16158:	movt	lr, #2
   1615c:	movt	r7, #3
   16160:	ldr	r2, [lr]
   16164:	ldr	r1, [lr, #4]
   16168:	adds	r2, r2, #1
   1616c:	adc	r1, r1, #0
   16170:	str	r2, [lr]
   16174:	ldr	r2, [r7, #32]
   16178:	str	r1, [lr, #4]
   1617c:	ldr	r1, [r7, #36]	; 0x24
   16180:	orrs	r1, r1, r2
   16184:	beq	16194 <UnityAssertEqualString@@Base+0x58>
   16188:	add	r1, lr, #24
   1618c:	add	r2, lr, #8
   16190:	b	162c4 <UnityAssertEqualString@@Base+0x188>
   16194:	ldrd	r4, [lr, #16]
   16198:	mov	r8, r0
   1619c:	adds	r4, r4, #1
   161a0:	adc	r5, r5, #0
   161a4:	cmp	r0, #0
   161a8:	cmpne	sl, #0
   161ac:	strd	r4, [lr, #16]
   161b0:	bne	161d4 <UnityAssertEqualString@@Base+0x98>
   161b4:	ldrd	r0, [lr, #40]	; 0x28
   161b8:	adds	r0, r0, #1
   161bc:	adc	r1, r1, #0
   161c0:	cmp	r8, sl
   161c4:	strd	r0, [lr, #40]	; 0x28
   161c8:	bne	162fc <UnityAssertEqualString@@Base+0x1c0>
   161cc:	add	r9, lr, #128	; 0x80
   161d0:	b	162a4 <UnityAssertEqualString@@Base+0x168>
   161d4:	ldrd	r4, [lr, #32]
   161d8:	add	r0, lr, #104	; 0x68
   161dc:	str	r6, [sp, #16]
   161e0:	add	r7, lr, #72	; 0x48
   161e4:	add	r9, lr, #80	; 0x50
   161e8:	add	ip, lr, #112	; 0x70
   161ec:	mov	r6, r8
   161f0:	str	sl, [sp, #12]
   161f4:	str	r0, [sp, #8]
   161f8:	add	r0, lr, #88	; 0x58
   161fc:	str	r0, [sp, #4]
   16200:	adds	r4, r4, #1
   16204:	adc	r5, r5, #0
   16208:	strd	r4, [lr, #32]
   1620c:	add	r5, lr, #48	; 0x30
   16210:	add	r4, lr, #56	; 0x38
   16214:	ldrd	r0, [r5]
   16218:	adds	r0, r0, #1
   1621c:	adc	r1, r1, #0
   16220:	strd	r0, [r5]
   16224:	mov	r5, r4
   16228:	ldrb	r0, [r6]
   1622c:	cmp	r0, #0
   16230:	bne	16254 <UnityAssertEqualString@@Base+0x118>
   16234:	ldrd	r0, [lr, #64]	; 0x40
   16238:	mov	r5, r7
   1623c:	adds	r0, r0, #1
   16240:	adc	r1, r1, #0
   16244:	strd	r0, [lr, #64]	; 0x40
   16248:	ldrb	r0, [sl]
   1624c:	cmp	r0, #0
   16250:	beq	16294 <UnityAssertEqualString@@Base+0x158>
   16254:	ldrd	r0, [r5]
   16258:	adds	r0, r0, #1
   1625c:	adc	r1, r1, #0
   16260:	strd	r0, [r5]
   16264:	ldrb	r0, [sl]
   16268:	ldrb	r1, [r6]
   1626c:	cmp	r1, r0
   16270:	bne	16314 <UnityAssertEqualString@@Base+0x1d8>
   16274:	ldrd	r0, [lr, #96]	; 0x60
   16278:	add	r6, r6, #1
   1627c:	add	sl, sl, #1
   16280:	mov	r5, ip
   16284:	adds	r0, r0, #1
   16288:	adc	r1, r1, #0
   1628c:	strd	r0, [lr, #96]	; 0x60
   16290:	b	16214 <UnityAssertEqualString@@Base+0xd8>
   16294:	ldr	r6, [sp, #16]
   16298:	ldr	sl, [sp, #12]
   1629c:	movw	r7, #1832	; 0x728
   162a0:	movt	r7, #3
   162a4:	ldrd	r0, [r9]
   162a8:	adds	r0, r0, #1
   162ac:	adc	r1, r1, #0
   162b0:	cmp	r2, #0
   162b4:	strd	r0, [r9]
   162b8:	bne	16354 <UnityAssertEqualString@@Base+0x218>
   162bc:	add	r1, lr, #160	; 0xa0
   162c0:	add	r2, lr, #152	; 0x98
   162c4:	ldm	r2, {r0, r3}
   162c8:	adds	r0, r0, #1
   162cc:	adc	r3, r3, #0
   162d0:	stm	r2, {r0, r3}
   162d4:	ldm	r1, {r0, r3}
   162d8:	adds	r0, r0, #1
   162dc:	adc	r3, r3, #0
   162e0:	stm	r1, {r0, r3}
   162e4:	ldrd	r0, [lr, #168]	; 0xa8
   162e8:	adds	r0, r0, #1
   162ec:	adc	r1, r1, #0
   162f0:	strd	r0, [lr, #168]	; 0xa8
   162f4:	sub	sp, fp, #28
   162f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162fc:	add	r0, lr, #136	; 0x88
   16300:	str	sl, [sp, #12]
   16304:	str	r6, [sp, #16]
   16308:	str	r0, [sp, #8]
   1630c:	add	r0, lr, #120	; 0x78
   16310:	str	r0, [sp, #4]
   16314:	ldr	r2, [sp, #4]
   16318:	movw	r7, #1832	; 0x728
   1631c:	ldr	r6, [sp, #16]
   16320:	ldr	sl, [sp, #12]
   16324:	movt	r7, #3
   16328:	ldrd	r0, [r2]
   1632c:	adds	r0, r0, #1
   16330:	adc	r1, r1, #0
   16334:	strd	r0, [r2]
   16338:	ldr	r2, [sp, #8]
   1633c:	mov	r0, #1
   16340:	str	r0, [r7, #32]
   16344:	ldrd	r0, [r2]
   16348:	adds	r0, r0, #1
   1634c:	adc	r1, r1, #0
   16350:	strd	r0, [r2]
   16354:	ldrd	r0, [lr, #144]	; 0x90
   16358:	adds	r0, r0, #1
   1635c:	adc	r1, r1, #0
   16360:	strd	r0, [lr, #144]	; 0x90
   16364:	mov	r0, r3
   16368:	bl	14f50 <UnityAssertBits@@Base+0x108>
   1636c:	mov	r0, r8
   16370:	mov	r1, sl
   16374:	bl	16394 <UnityAssertEqualString@@Base+0x258>
   16378:	mov	r0, r6
   1637c:	bl	14fb0 <UnityAssertBits@@Base+0x168>
   16380:	mov	r0, #1
   16384:	mov	r1, #1
   16388:	str	r0, [r7, #32]
   1638c:	add	r0, r7, #40	; 0x28
   16390:	bl	12638 <longjmp@plt>
   16394:	push	{r4, r5, r6, sl, fp, lr}
   16398:	add	fp, sp, #16
   1639c:	movw	r6, #64544	; 0xfc20
   163a0:	mov	r4, r1
   163a4:	mov	r5, r0
   163a8:	movt	r6, #2
   163ac:	ldrd	r0, [r6]
   163b0:	adds	r0, r0, #1
   163b4:	adc	r1, r1, #0
   163b8:	strd	r0, [r6]
   163bc:	movw	r0, #53740	; 0xd1ec
   163c0:	movt	r0, #1
   163c4:	bl	142c8 <UnityPrint@@Base>
   163c8:	cmp	r5, #0
   163cc:	beq	16400 <UnityAssertEqualString@@Base+0x2c4>
   163d0:	ldrd	r0, [r6, #8]
   163d4:	adds	r0, r0, #1
   163d8:	adc	r1, r1, #0
   163dc:	strd	r0, [r6, #8]
   163e0:	mov	r0, #39	; 0x27
   163e4:	bl	12788 <putchar@plt>
   163e8:	mov	r0, r5
   163ec:	bl	142c8 <UnityPrint@@Base>
   163f0:	mov	r0, #39	; 0x27
   163f4:	bl	12788 <putchar@plt>
   163f8:	add	r0, r6, #24
   163fc:	b	16420 <UnityAssertEqualString@@Base+0x2e4>
   16400:	ldrd	r0, [r6, #16]
   16404:	adds	r0, r0, #1
   16408:	adc	r1, r1, #0
   1640c:	strd	r0, [r6, #16]
   16410:	movw	r0, #53732	; 0xd1e4
   16414:	movt	r0, #1
   16418:	bl	142c8 <UnityPrint@@Base>
   1641c:	add	r0, r6, #32
   16420:	ldrd	r2, [r0]
   16424:	adds	r2, r2, #1
   16428:	adc	r3, r3, #0
   1642c:	strd	r2, [r0]
   16430:	movw	r0, #53751	; 0xd1f7
   16434:	movt	r0, #1
   16438:	bl	142c8 <UnityPrint@@Base>
   1643c:	cmp	r4, #0
   16440:	beq	16474 <UnityAssertEqualString@@Base+0x338>
   16444:	ldrd	r0, [r6, #40]	; 0x28
   16448:	adds	r0, r0, #1
   1644c:	adc	r1, r1, #0
   16450:	strd	r0, [r6, #40]	; 0x28
   16454:	mov	r0, #39	; 0x27
   16458:	bl	12788 <putchar@plt>
   1645c:	mov	r0, r4
   16460:	bl	142c8 <UnityPrint@@Base>
   16464:	mov	r0, #39	; 0x27
   16468:	bl	12788 <putchar@plt>
   1646c:	add	r0, r6, #56	; 0x38
   16470:	b	16494 <UnityAssertEqualString@@Base+0x358>
   16474:	ldrd	r0, [r6, #48]	; 0x30
   16478:	adds	r0, r0, #1
   1647c:	adc	r1, r1, #0
   16480:	strd	r0, [r6, #48]	; 0x30
   16484:	movw	r0, #53732	; 0xd1e4
   16488:	movt	r0, #1
   1648c:	bl	142c8 <UnityPrint@@Base>
   16490:	add	r0, r6, #64	; 0x40
   16494:	ldrd	r2, [r0]
   16498:	adds	r2, r2, #1
   1649c:	adc	r3, r3, #0
   164a0:	strd	r2, [r0]
   164a4:	ldrd	r0, [r6, #72]	; 0x48
   164a8:	adds	r0, r0, #1
   164ac:	adc	r1, r1, #0
   164b0:	strd	r0, [r6, #72]	; 0x48
   164b4:	pop	{r4, r5, r6, sl, fp, pc}

000164b8 <UnityAssertEqualStringLen@@Base>:
   164b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164bc:	add	fp, sp, #28
   164c0:	sub	sp, sp, #28
   164c4:	mov	r4, r1
   164c8:	movw	r1, #64624	; 0xfc70
   164cc:	mov	r7, r3
   164d0:	mov	r8, r2
   164d4:	movw	r6, #1832	; 0x728
   164d8:	movt	r1, #2
   164dc:	movt	r6, #3
   164e0:	ldrd	r2, [r1]
   164e4:	ldr	sl, [r6, #32]
   164e8:	adds	r2, r2, #1
   164ec:	adc	r3, r3, #0
   164f0:	strd	r2, [r1]
   164f4:	ldr	r3, [r6, #36]	; 0x24
   164f8:	orrs	r2, r3, sl
   164fc:	beq	1650c <UnityAssertEqualStringLen@@Base+0x54>
   16500:	add	r0, r1, #24
   16504:	add	r2, r1, #8
   16508:	b	16680 <UnityAssertEqualStringLen@@Base+0x1c8>
   1650c:	ldrd	r2, [r1, #16]
   16510:	str	r0, [sp, #12]
   16514:	adds	r2, r2, #1
   16518:	adc	r3, r3, #0
   1651c:	cmp	r0, #0
   16520:	cmpne	r4, #0
   16524:	strd	r2, [r1, #16]
   16528:	bne	1654c <UnityAssertEqualStringLen@@Base+0x94>
   1652c:	ldrd	r2, [r1, #40]	; 0x28
   16530:	adds	r2, r2, #1
   16534:	adc	r3, r3, #0
   16538:	cmp	r0, r4
   1653c:	strd	r2, [r1, #40]	; 0x28
   16540:	bne	166c0 <UnityAssertEqualStringLen@@Base+0x208>
   16544:	add	r3, r1, #144	; 0x90
   16548:	b	16660 <UnityAssertEqualStringLen@@Base+0x1a8>
   1654c:	ldrd	r2, [r1, #32]
   16550:	str	r7, [sp, #24]
   16554:	add	r7, r1, #96	; 0x60
   16558:	add	ip, r1, #48	; 0x30
   1655c:	add	r9, r1, #72	; 0x48
   16560:	add	lr, r1, #128	; 0x80
   16564:	mov	r6, r4
   16568:	str	r4, [sp, #16]
   1656c:	str	r8, [sp, #20]
   16570:	str	r7, [sp, #8]
   16574:	add	r7, r1, #120	; 0x78
   16578:	str	r7, [sp, #4]
   1657c:	add	r7, r1, #104	; 0x68
   16580:	str	r7, [sp]
   16584:	mov	r7, r0
   16588:	adds	r2, r2, #1
   1658c:	adc	r3, r3, #0
   16590:	strd	r2, [r1, #32]
   16594:	add	r2, r1, #56	; 0x38
   16598:	add	r3, r1, #80	; 0x50
   1659c:	ldrd	r4, [ip]
   165a0:	adds	r4, r4, #1
   165a4:	adc	r5, r5, #0
   165a8:	strd	r4, [ip]
   165ac:	mov	r4, r2
   165b0:	ldrb	r5, [r7]
   165b4:	cmp	r5, #0
   165b8:	bne	165dc <UnityAssertEqualStringLen@@Base+0x124>
   165bc:	ldrd	r4, [r1, #64]	; 0x40
   165c0:	adds	r4, r4, #1
   165c4:	adc	r5, r5, #0
   165c8:	strd	r4, [r1, #64]	; 0x40
   165cc:	mov	r4, r9
   165d0:	ldrb	r5, [r6]
   165d4:	cmp	r5, #0
   165d8:	beq	1664c <UnityAssertEqualStringLen@@Base+0x194>
   165dc:	ldm	r4, {r0, r5}
   165e0:	adds	r0, r0, #1
   165e4:	adc	r5, r5, #0
   165e8:	cmp	r8, #0
   165ec:	stm	r4, {r0, r5}
   165f0:	beq	16648 <UnityAssertEqualStringLen@@Base+0x190>
   165f4:	ldr	r0, [r1, #88]	; 0x58
   165f8:	ldr	r5, [r1, #92]	; 0x5c
   165fc:	adds	r0, r0, #1
   16600:	adc	r5, r5, #0
   16604:	str	r0, [r1, #88]	; 0x58
   16608:	str	r5, [r1, #92]	; 0x5c
   1660c:	ldrb	r0, [r6]
   16610:	ldrb	r5, [r7]
   16614:	cmp	r5, r0
   16618:	bne	166dc <UnityAssertEqualStringLen@@Base+0x224>
   1661c:	ldr	r0, [r1, #112]	; 0x70
   16620:	ldr	r5, [r1, #116]	; 0x74
   16624:	add	r7, r7, #1
   16628:	add	r6, r6, #1
   1662c:	sub	r8, r8, #1
   16630:	mov	ip, lr
   16634:	adds	r0, r0, #1
   16638:	adc	r5, r5, #0
   1663c:	str	r0, [r1, #112]	; 0x70
   16640:	str	r5, [r1, #116]	; 0x74
   16644:	b	1659c <UnityAssertEqualStringLen@@Base+0xe4>
   16648:	ldr	r3, [sp, #8]
   1664c:	ldr	r7, [sp, #24]
   16650:	ldr	r8, [sp, #20]
   16654:	ldr	r4, [sp, #16]
   16658:	movw	r6, #1832	; 0x728
   1665c:	movt	r6, #3
   16660:	ldm	r3, {r0, r5}
   16664:	adds	r0, r0, #1
   16668:	adc	r5, r5, #0
   1666c:	cmp	sl, #0
   16670:	stm	r3, {r0, r5}
   16674:	bne	16720 <UnityAssertEqualStringLen@@Base+0x268>
   16678:	add	r0, r1, #176	; 0xb0
   1667c:	add	r2, r1, #168	; 0xa8
   16680:	ldrd	r4, [r2]
   16684:	adds	r4, r4, #1
   16688:	adc	r5, r5, #0
   1668c:	strd	r4, [r2]
   16690:	ldrd	r2, [r0]
   16694:	adds	r2, r2, #1
   16698:	adc	r3, r3, #0
   1669c:	strd	r2, [r0]
   166a0:	ldr	r0, [r1, #184]	; 0xb8
   166a4:	ldr	r3, [r1, #188]	; 0xbc
   166a8:	adds	r0, r0, #1
   166ac:	adc	r3, r3, #0
   166b0:	str	r0, [r1, #184]	; 0xb8
   166b4:	str	r3, [r1, #188]	; 0xbc
   166b8:	sub	sp, fp, #28
   166bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166c0:	add	r0, r1, #152	; 0x98
   166c4:	str	r4, [sp, #16]
   166c8:	str	r8, [sp, #20]
   166cc:	str	r7, [sp, #24]
   166d0:	str	r0, [sp, #4]
   166d4:	add	r0, r1, #136	; 0x88
   166d8:	str	r0, [sp]
   166dc:	ldr	r2, [sp]
   166e0:	movw	r6, #1832	; 0x728
   166e4:	ldr	r7, [sp, #24]
   166e8:	ldr	r8, [sp, #20]
   166ec:	ldr	r4, [sp, #16]
   166f0:	movt	r6, #3
   166f4:	ldm	r2, {r0, r3}
   166f8:	adds	r0, r0, #1
   166fc:	adc	r3, r3, #0
   16700:	stm	r2, {r0, r3}
   16704:	ldr	r2, [sp, #4]
   16708:	mov	r0, #1
   1670c:	str	r0, [r6, #32]
   16710:	ldm	r2, {r0, r3}
   16714:	adds	r0, r0, #1
   16718:	adc	r3, r3, #0
   1671c:	stm	r2, {r0, r3}
   16720:	ldrd	r2, [r1, #160]	; 0xa0
   16724:	ldr	r0, [fp, #8]
   16728:	adds	r2, r2, #1
   1672c:	adc	r3, r3, #0
   16730:	strd	r2, [r1, #160]	; 0xa0
   16734:	bl	14f50 <UnityAssertBits@@Base+0x108>
   16738:	ldr	r0, [sp, #12]
   1673c:	mov	r1, r4
   16740:	mov	r2, r8
   16744:	bl	16764 <UnityAssertEqualStringLen@@Base+0x2ac>
   16748:	mov	r0, r7
   1674c:	bl	14fb0 <UnityAssertBits@@Base+0x168>
   16750:	mov	r0, #1
   16754:	mov	r1, #1
   16758:	str	r0, [r6, #32]
   1675c:	add	r0, r6, #40	; 0x28
   16760:	bl	12638 <longjmp@plt>
   16764:	push	{r4, r5, r6, r7, fp, lr}
   16768:	add	fp, sp, #16
   1676c:	movw	r7, #64816	; 0xfd30
   16770:	mov	r5, r1
   16774:	mov	r6, r0
   16778:	mov	r4, r2
   1677c:	movt	r7, #2
   16780:	ldrd	r0, [r7]
   16784:	adds	r0, r0, #1
   16788:	adc	r1, r1, #0
   1678c:	strd	r0, [r7]
   16790:	movw	r0, #53740	; 0xd1ec
   16794:	movt	r0, #1
   16798:	bl	142c8 <UnityPrint@@Base>
   1679c:	cmp	r6, #0
   167a0:	beq	167d8 <UnityAssertEqualStringLen@@Base+0x320>
   167a4:	ldrd	r0, [r7, #8]
   167a8:	adds	r0, r0, #1
   167ac:	adc	r1, r1, #0
   167b0:	strd	r0, [r7, #8]
   167b4:	mov	r0, #39	; 0x27
   167b8:	bl	12788 <putchar@plt>
   167bc:	mov	r0, r6
   167c0:	mov	r1, r4
   167c4:	bl	14598 <UnityPrintLen@@Base>
   167c8:	mov	r0, #39	; 0x27
   167cc:	bl	12788 <putchar@plt>
   167d0:	add	r0, r7, #24
   167d4:	b	167f8 <UnityAssertEqualStringLen@@Base+0x340>
   167d8:	ldrd	r0, [r7, #16]
   167dc:	adds	r0, r0, #1
   167e0:	adc	r1, r1, #0
   167e4:	strd	r0, [r7, #16]
   167e8:	movw	r0, #53732	; 0xd1e4
   167ec:	movt	r0, #1
   167f0:	bl	142c8 <UnityPrint@@Base>
   167f4:	add	r0, r7, #32
   167f8:	ldrd	r2, [r0]
   167fc:	adds	r2, r2, #1
   16800:	adc	r3, r3, #0
   16804:	strd	r2, [r0]
   16808:	movw	r0, #53751	; 0xd1f7
   1680c:	movt	r0, #1
   16810:	bl	142c8 <UnityPrint@@Base>
   16814:	cmp	r5, #0
   16818:	beq	16850 <UnityAssertEqualStringLen@@Base+0x398>
   1681c:	ldrd	r0, [r7, #40]	; 0x28
   16820:	adds	r0, r0, #1
   16824:	adc	r1, r1, #0
   16828:	strd	r0, [r7, #40]	; 0x28
   1682c:	mov	r0, #39	; 0x27
   16830:	bl	12788 <putchar@plt>
   16834:	mov	r0, r5
   16838:	mov	r1, r4
   1683c:	bl	14598 <UnityPrintLen@@Base>
   16840:	mov	r0, #39	; 0x27
   16844:	bl	12788 <putchar@plt>
   16848:	add	r0, r7, #56	; 0x38
   1684c:	b	16870 <UnityAssertEqualStringLen@@Base+0x3b8>
   16850:	ldrd	r0, [r7, #48]	; 0x30
   16854:	adds	r0, r0, #1
   16858:	adc	r1, r1, #0
   1685c:	strd	r0, [r7, #48]	; 0x30
   16860:	movw	r0, #53732	; 0xd1e4
   16864:	movt	r0, #1
   16868:	bl	142c8 <UnityPrint@@Base>
   1686c:	add	r0, r7, #64	; 0x40
   16870:	ldrd	r2, [r0]
   16874:	adds	r2, r2, #1
   16878:	adc	r3, r3, #0
   1687c:	strd	r2, [r0]
   16880:	ldrd	r0, [r7, #72]	; 0x48
   16884:	adds	r0, r0, #1
   16888:	adc	r1, r1, #0
   1688c:	strd	r0, [r7, #72]	; 0x48
   16890:	pop	{r4, r5, r6, r7, fp, pc}

00016894 <UnityAssertEqualStringArray@@Base>:
   16894:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16898:	add	fp, sp, #28
   1689c:	sub	sp, sp, #20
   168a0:	movw	r8, #64896	; 0xfd80
   168a4:	mov	r6, r1
   168a8:	mov	r5, r0
   168ac:	movw	r9, #1832	; 0x728
   168b0:	movt	r8, #2
   168b4:	movt	r9, #3
   168b8:	ldrd	r0, [r8]
   168bc:	adds	r0, r0, #1
   168c0:	adc	r1, r1, #0
   168c4:	strd	r0, [r8]
   168c8:	ldrd	r0, [r9, #32]
   168cc:	orrs	r0, r1, r0
   168d0:	beq	168ec <UnityAssertEqualStringArray@@Base+0x58>
   168d4:	ldrd	r0, [r8, #8]
   168d8:	adds	r0, r0, #1
   168dc:	adc	r1, r1, #0
   168e0:	strd	r0, [r8, #8]
   168e4:	add	r0, r8, #24
   168e8:	b	16b0c <UnityAssertEqualStringArray@@Base+0x278>
   168ec:	ldrd	r0, [r8, #16]
   168f0:	mov	r7, r2
   168f4:	ldr	r2, [fp, #8]
   168f8:	mov	r4, r3
   168fc:	adds	r0, r0, #1
   16900:	adc	r1, r1, #0
   16904:	cmp	r7, #0
   16908:	strd	r0, [r8, #16]
   1690c:	beq	16c14 <UnityAssertEqualStringArray@@Base+0x380>
   16910:	ldrd	r0, [r8, #40]	; 0x28
   16914:	mov	r3, r4
   16918:	adds	r0, r0, #1
   1691c:	adc	r1, r1, #0
   16920:	strd	r0, [r8, #40]	; 0x28
   16924:	mov	r0, r5
   16928:	mov	r1, r6
   1692c:	bl	15648 <UnityAssertEqualIntArray@@Base+0x460>
   16930:	cmp	r0, #1
   16934:	bne	16950 <UnityAssertEqualStringArray@@Base+0xbc>
   16938:	ldrd	r0, [r8, #48]	; 0x30
   1693c:	adds	r0, r0, #1
   16940:	adc	r1, r1, #0
   16944:	strd	r0, [r8, #48]	; 0x30
   16948:	add	r0, r8, #64	; 0x40
   1694c:	b	16b0c <UnityAssertEqualStringArray@@Base+0x278>
   16950:	add	r0, r8, #192	; 0xc0
   16954:	str	r4, [sp]
   16958:	add	r3, r8, #56	; 0x38
   1695c:	mov	r4, #0
   16960:	add	r2, r8, #80	; 0x50
   16964:	add	sl, r8, #240	; 0xf0
   16968:	add	ip, r8, #96	; 0x60
   1696c:	add	lr, r8, #112	; 0x70
   16970:	str	r0, [sp, #8]
   16974:	add	r0, r8, #176	; 0xb0
   16978:	str	r0, [sp, #4]
   1697c:	add	r0, r8, #184	; 0xb8
   16980:	str	r0, [sp, #16]
   16984:	add	r0, r8, #104	; 0x68
   16988:	str	r0, [sp, #12]
   1698c:	ldm	r3, {r0, r9}
   16990:	adds	r0, r0, #1
   16994:	adc	r9, r9, #0
   16998:	stm	r3, {r0, r9}
   1699c:	ldr	r0, [r5, r4, lsl #2]
   169a0:	cmp	r0, #0
   169a4:	mov	r0, r2
   169a8:	beq	16a88 <UnityAssertEqualStringArray@@Base+0x1f4>
   169ac:	ldr	r0, [r8, #72]	; 0x48
   169b0:	ldr	r3, [r8, #76]	; 0x4c
   169b4:	adds	r0, r0, #1
   169b8:	adc	r3, r3, #0
   169bc:	str	r0, [r8, #72]	; 0x48
   169c0:	str	r3, [r8, #76]	; 0x4c
   169c4:	ldr	r0, [r6, r4, lsl #2]
   169c8:	cmp	r0, #0
   169cc:	mov	r0, ip
   169d0:	beq	16a88 <UnityAssertEqualStringArray@@Base+0x1f4>
   169d4:	ldr	r0, [r8, #88]	; 0x58
   169d8:	ldr	r3, [r8, #92]	; 0x5c
   169dc:	mov	r9, #0
   169e0:	adds	r0, r0, #1
   169e4:	str	r0, [r8, #88]	; 0x58
   169e8:	ldr	r0, [sp, #12]
   169ec:	adc	r3, r3, #0
   169f0:	str	r3, [r8, #92]	; 0x5c
   169f4:	ldr	r3, [r0]
   169f8:	ldr	r1, [r0, #4]
   169fc:	adds	r3, r3, #1
   16a00:	adc	r1, r1, #0
   16a04:	str	r3, [r0]
   16a08:	str	r1, [r0, #4]
   16a0c:	ldr	r0, [r5, r4, lsl #2]
   16a10:	ldrb	r0, [r0, r9]
   16a14:	cmp	r0, #0
   16a18:	mov	r0, lr
   16a1c:	bne	16a44 <UnityAssertEqualStringArray@@Base+0x1b0>
   16a20:	ldrd	r0, [r8, #120]	; 0x78
   16a24:	adds	r0, r0, #1
   16a28:	adc	r1, r1, #0
   16a2c:	strd	r0, [r8, #120]	; 0x78
   16a30:	ldr	r0, [r6, r4, lsl #2]
   16a34:	ldrb	r0, [r0, r9]
   16a38:	cmp	r0, #0
   16a3c:	beq	16ab0 <UnityAssertEqualStringArray@@Base+0x21c>
   16a40:	add	r0, r8, #128	; 0x80
   16a44:	ldm	r0, {r1, r3}
   16a48:	adds	r1, r1, #1
   16a4c:	adc	r3, r3, #0
   16a50:	stm	r0, {r1, r3}
   16a54:	ldr	r0, [r6, r4, lsl #2]
   16a58:	ldr	r1, [r5, r4, lsl #2]
   16a5c:	ldrb	r0, [r0, r9]
   16a60:	ldrb	r1, [r1, r9]
   16a64:	cmp	r1, r0
   16a68:	bne	16b3c <UnityAssertEqualStringArray@@Base+0x2a8>
   16a6c:	ldrd	r0, [r8, #152]	; 0x98
   16a70:	add	r9, r9, #1
   16a74:	adds	r0, r0, #1
   16a78:	adc	r1, r1, #0
   16a7c:	strd	r0, [r8, #152]	; 0x98
   16a80:	add	r0, r8, #168	; 0xa8
   16a84:	b	169f4 <UnityAssertEqualStringArray@@Base+0x160>
   16a88:	ldm	r0, {r1, r3}
   16a8c:	adds	r1, r1, #1
   16a90:	adc	r3, r3, #0
   16a94:	stm	r0, {r1, r3}
   16a98:	ldr	r0, [r6, r4, lsl #2]
   16a9c:	ldr	r1, [r5, r4, lsl #2]
   16aa0:	cmp	r1, r0
   16aa4:	ldr	r0, [sp, #16]
   16aa8:	beq	16ab4 <UnityAssertEqualStringArray@@Base+0x220>
   16aac:	b	16b4c <UnityAssertEqualStringArray@@Base+0x2b8>
   16ab0:	add	r0, r8, #136	; 0x88
   16ab4:	movw	r1, #1832	; 0x728
   16ab8:	ldm	r0, {r3, r9}
   16abc:	movt	r1, #3
   16ac0:	ldr	r1, [r1, #32]
   16ac4:	adds	r3, r3, #1
   16ac8:	adc	r9, r9, #0
   16acc:	stm	r0, {r3, r9}
   16ad0:	cmp	r1, #0
   16ad4:	bne	16b84 <UnityAssertEqualStringArray@@Base+0x2f0>
   16ad8:	ldrd	r0, [r8, #208]	; 0xd0
   16adc:	add	r4, r4, #1
   16ae0:	mov	r3, sl
   16ae4:	adds	r0, r0, #1
   16ae8:	adc	r1, r1, #0
   16aec:	cmp	r4, r7
   16af0:	strd	r0, [r8, #208]	; 0xd0
   16af4:	bne	1698c <UnityAssertEqualStringArray@@Base+0xf8>
   16af8:	ldrd	r0, [r8, #248]	; 0xf8
   16afc:	adds	r0, r0, #1
   16b00:	adc	r1, r1, #0
   16b04:	strd	r0, [r8, #248]	; 0xf8
   16b08:	add	r0, r8, #256	; 0x100
   16b0c:	ldrd	r2, [r0]
   16b10:	adds	r2, r2, #1
   16b14:	adc	r3, r3, #0
   16b18:	strd	r2, [r0]
   16b1c:	ldr	r0, [r8, #264]	; 0x108
   16b20:	ldr	r1, [r8, #268]	; 0x10c
   16b24:	adds	r0, r0, #1
   16b28:	adc	r1, r1, #0
   16b2c:	str	r0, [r8, #264]	; 0x108
   16b30:	str	r1, [r8, #268]	; 0x10c
   16b34:	sub	sp, fp, #28
   16b38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b3c:	add	r0, r8, #160	; 0xa0
   16b40:	str	r0, [sp, #8]
   16b44:	add	r0, r8, #144	; 0x90
   16b48:	str	r0, [sp, #4]
   16b4c:	ldr	r2, [sp, #4]
   16b50:	ldrd	r0, [r2]
   16b54:	adds	r0, r0, #1
   16b58:	adc	r1, r1, #0
   16b5c:	strd	r0, [r2]
   16b60:	ldr	r2, [sp, #8]
   16b64:	movw	r1, #1832	; 0x728
   16b68:	mov	r0, #1
   16b6c:	movt	r1, #3
   16b70:	str	r0, [r1, #32]
   16b74:	ldrd	r0, [r2]
   16b78:	adds	r0, r0, #1
   16b7c:	adc	r1, r1, #0
   16b80:	strd	r0, [r2]
   16b84:	ldrd	r0, [r8, #200]	; 0xc8
   16b88:	adds	r0, r0, #1
   16b8c:	adc	r1, r1, #0
   16b90:	strd	r0, [r8, #200]	; 0xc8
   16b94:	ldr	r0, [fp, #8]
   16b98:	bl	14f50 <UnityAssertBits@@Base+0x108>
   16b9c:	cmp	r7, #2
   16ba0:	bcc	16bd0 <UnityAssertEqualStringArray@@Base+0x33c>
   16ba4:	ldrd	r0, [r8, #216]	; 0xd8
   16ba8:	adds	r0, r0, #1
   16bac:	adc	r1, r1, #0
   16bb0:	strd	r0, [r8, #216]	; 0xd8
   16bb4:	movw	r0, #53762	; 0xd202
   16bb8:	movt	r0, #1
   16bbc:	bl	142c8 <UnityPrint@@Base>
   16bc0:	mov	r0, r4
   16bc4:	bl	149f8 <UnityPrintNumberUnsigned@@Base>
   16bc8:	add	r0, r8, #232	; 0xe8
   16bcc:	b	16bd4 <UnityAssertEqualStringArray@@Base+0x340>
   16bd0:	add	r0, r8, #224	; 0xe0
   16bd4:	ldrd	r2, [r0]
   16bd8:	adds	r2, r2, #1
   16bdc:	adc	r3, r3, #0
   16be0:	strd	r2, [r0]
   16be4:	ldr	r1, [r6, r4, lsl #2]
   16be8:	ldr	r0, [r5, r4, lsl #2]
   16bec:	bl	16394 <UnityAssertEqualString@@Base+0x258>
   16bf0:	ldr	r0, [sp]
   16bf4:	bl	14fb0 <UnityAssertBits@@Base+0x168>
   16bf8:	movw	r1, #1832	; 0x728
   16bfc:	mov	r0, #1
   16c00:	movt	r1, #3
   16c04:	str	r0, [r1, #32]
   16c08:	add	r0, r1, #40	; 0x28
   16c0c:	mov	r1, #1
   16c10:	bl	12638 <longjmp@plt>
   16c14:	ldrd	r0, [r8, #32]
   16c18:	adds	r0, r0, #1
   16c1c:	adc	r1, r1, #0
   16c20:	strd	r0, [r8, #32]
   16c24:	mov	r0, r2
   16c28:	bl	14f50 <UnityAssertBits@@Base+0x108>
   16c2c:	movw	r0, #53823	; 0xd23f
   16c30:	movt	r0, #1
   16c34:	bl	142c8 <UnityPrint@@Base>
   16c38:	mov	r0, r4
   16c3c:	bl	14fb0 <UnityAssertBits@@Base+0x168>
   16c40:	mov	r0, #1
   16c44:	mov	r1, #1
   16c48:	str	r0, [r9, #32]
   16c4c:	add	r0, r9, #40	; 0x28
   16c50:	bl	12638 <longjmp@plt>

00016c54 <UnityAssertEqualMemory@@Base>:
   16c54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c58:	add	fp, sp, #28
   16c5c:	sub	sp, sp, #28
   16c60:	movw	lr, #65168	; 0xfe90
   16c64:	mov	r8, r1
   16c68:	mov	r6, r0
   16c6c:	movw	r9, #1832	; 0x728
   16c70:	movt	lr, #2
   16c74:	movt	r9, #3
   16c78:	ldrd	r0, [lr]
   16c7c:	adds	r0, r0, #1
   16c80:	adc	r1, r1, #0
   16c84:	strd	r0, [lr]
   16c88:	ldrd	r0, [r9, #32]
   16c8c:	orrs	r0, r1, r0
   16c90:	beq	16cd0 <UnityAssertEqualMemory@@Base+0x7c>
   16c94:	ldrd	r0, [lr, #8]
   16c98:	adds	r0, r0, #1
   16c9c:	adc	r1, r1, #0
   16ca0:	strd	r0, [lr, #8]
   16ca4:	add	r0, lr, #24
   16ca8:	ldrd	r2, [r0]
   16cac:	adds	r2, r2, #1
   16cb0:	adc	r3, r3, #0
   16cb4:	strd	r2, [r0]
   16cb8:	ldrd	r0, [lr, #168]	; 0xa8
   16cbc:	adds	r0, r0, #1
   16cc0:	adc	r1, r1, #0
   16cc4:	strd	r0, [lr, #168]	; 0xa8
   16cc8:	sub	sp, fp, #28
   16ccc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cd0:	ldrd	r0, [lr, #16]
   16cd4:	mov	r5, r2
   16cd8:	ldr	r2, [fp, #12]
   16cdc:	ldr	sl, [fp, #8]
   16ce0:	adds	r0, r0, #1
   16ce4:	adc	r1, r1, #0
   16ce8:	cmp	r5, #0
   16cec:	movne	r7, r3
   16cf0:	cmpne	r3, #0
   16cf4:	strd	r0, [lr, #16]
   16cf8:	bne	16d3c <UnityAssertEqualMemory@@Base+0xe8>
   16cfc:	ldrd	r0, [lr, #32]
   16d00:	adds	r0, r0, #1
   16d04:	adc	r1, r1, #0
   16d08:	strd	r0, [lr, #32]
   16d0c:	mov	r0, r2
   16d10:	bl	14f50 <UnityAssertBits@@Base+0x108>
   16d14:	movw	r0, #53823	; 0xd23f
   16d18:	movt	r0, #1
   16d1c:	bl	142c8 <UnityPrint@@Base>
   16d20:	mov	r0, sl
   16d24:	bl	14fb0 <UnityAssertBits@@Base+0x168>
   16d28:	mov	r0, #1
   16d2c:	mov	r1, #1
   16d30:	str	r0, [r9, #32]
   16d34:	add	r0, r9, #40	; 0x28
   16d38:	bl	12638 <longjmp@plt>
   16d3c:	ldrd	r0, [lr, #40]	; 0x28
   16d40:	mov	r3, sl
   16d44:	mov	r4, lr
   16d48:	adds	r0, r0, #1
   16d4c:	adc	r1, r1, #0
   16d50:	strd	r0, [lr, #40]	; 0x28
   16d54:	mov	r0, r6
   16d58:	mov	r1, r8
   16d5c:	bl	15648 <UnityAssertEqualIntArray@@Base+0x460>
   16d60:	cmp	r0, #1
   16d64:	bne	16d84 <UnityAssertEqualMemory@@Base+0x130>
   16d68:	ldrd	r0, [r4, #48]	; 0x30
   16d6c:	mov	lr, r4
   16d70:	adds	r0, r0, #1
   16d74:	adc	r1, r1, #0
   16d78:	strd	r0, [r4, #48]	; 0x30
   16d7c:	add	r0, r4, #64	; 0x40
   16d80:	b	16ca8 <UnityAssertEqualMemory@@Base+0x54>
   16d84:	ldrd	r0, [r4, #56]	; 0x38
   16d88:	ldrd	r2, [r4, #72]	; 0x48
   16d8c:	str	r7, [sp]
   16d90:	mov	lr, r4
   16d94:	adds	r0, r0, #1
   16d98:	adc	r1, r1, #0
   16d9c:	strd	r0, [r4, #56]	; 0x38
   16da0:	ldrd	r0, [r4, #88]	; 0x58
   16da4:	adds	r0, r0, #1
   16da8:	mov	r9, #0
   16dac:	str	r7, [sp, #4]
   16db0:	adc	r1, r1, #0
   16db4:	adds	r2, r2, #1
   16db8:	str	r0, [sp, #16]
   16dbc:	adc	r3, r3, #0
   16dc0:	strd	r0, [lr, #88]	; 0x58
   16dc4:	sub	r0, r7, #1
   16dc8:	str	r1, [sp, #12]
   16dcc:	str	r2, [sp, #24]
   16dd0:	strd	r2, [lr, #72]	; 0x48
   16dd4:	str	r0, [sp, #8]
   16dd8:	str	r3, [sp, #20]
   16ddc:	ldrd	r0, [lr, #96]	; 0x60
   16de0:	adds	r0, r0, #1
   16de4:	adc	r1, r1, #0
   16de8:	strd	r0, [lr, #96]	; 0x60
   16dec:	ldrb	sl, [r8]
   16df0:	ldrb	ip, [r6]
   16df4:	cmp	ip, sl
   16df8:	bne	16e7c <UnityAssertEqualMemory@@Base+0x228>
   16dfc:	ldrd	r2, [lr, #120]	; 0x78
   16e00:	ldr	r4, [lr, #152]	; 0x98
   16e04:	ldr	r7, [lr, #156]	; 0x9c
   16e08:	add	r9, r9, #1
   16e0c:	add	r8, r8, #1
   16e10:	add	r6, r6, #1
   16e14:	adds	r2, r2, #1
   16e18:	adc	r3, r3, #0
   16e1c:	adds	r4, r4, #1
   16e20:	str	r4, [lr, #152]	; 0x98
   16e24:	strd	r2, [lr, #120]	; 0x78
   16e28:	adc	r2, r7, #0
   16e2c:	cmp	r5, r9
   16e30:	str	r2, [lr, #156]	; 0x9c
   16e34:	bne	16de0 <UnityAssertEqualMemory@@Base+0x18c>
   16e38:	ldrd	r0, [lr, #104]	; 0x68
   16e3c:	ldr	r7, [sp, #8]
   16e40:	ldr	r2, [sp, #24]
   16e44:	ldr	r3, [sp, #20]
   16e48:	adds	r0, r0, #1
   16e4c:	adc	r1, r1, #0
   16e50:	cmp	r7, #0
   16e54:	strd	r0, [lr, #104]	; 0x68
   16e58:	ldr	r0, [sp, #16]
   16e5c:	ldr	r1, [sp, #12]
   16e60:	bne	16da4 <UnityAssertEqualMemory@@Base+0x150>
   16e64:	ldrd	r0, [lr, #80]	; 0x50
   16e68:	adds	r0, r0, #1
   16e6c:	adc	r1, r1, #0
   16e70:	strd	r0, [lr, #80]	; 0x50
   16e74:	add	r0, lr, #160	; 0xa0
   16e78:	b	16ca8 <UnityAssertEqualMemory@@Base+0x54>
   16e7c:	ldrd	r0, [lr, #112]	; 0x70
   16e80:	mov	r4, lr
   16e84:	adds	r0, r0, #1
   16e88:	adc	r1, r1, #0
   16e8c:	strd	r0, [lr, #112]	; 0x70
   16e90:	ldr	r0, [fp, #12]
   16e94:	bl	14f50 <UnityAssertBits@@Base+0x108>
   16e98:	movw	r0, #53779	; 0xd213
   16e9c:	movt	r0, #1
   16ea0:	bl	142c8 <UnityPrint@@Base>
   16ea4:	ldr	r0, [sp]
   16ea8:	cmp	r0, #2
   16eac:	bcc	16ee0 <UnityAssertEqualMemory@@Base+0x28c>
   16eb0:	ldrd	r0, [r4, #128]	; 0x80
   16eb4:	adds	r0, r0, #1
   16eb8:	adc	r1, r1, #0
   16ebc:	strd	r0, [r4, #128]	; 0x80
   16ec0:	movw	r0, #53762	; 0xd202
   16ec4:	movt	r0, #1
   16ec8:	bl	142c8 <UnityPrint@@Base>
   16ecc:	ldm	sp, {r0, r1}
   16ed0:	sub	r0, r0, r1
   16ed4:	bl	149f8 <UnityPrintNumberUnsigned@@Base>
   16ed8:	add	r0, r4, #144	; 0x90
   16edc:	b	16ee4 <UnityAssertEqualMemory@@Base+0x290>
   16ee0:	add	r0, r4, #136	; 0x88
   16ee4:	ldrd	r2, [r0]
   16ee8:	adds	r2, r2, #1
   16eec:	adc	r3, r3, #0
   16ef0:	strd	r2, [r0]
   16ef4:	movw	r0, #53772	; 0xd20c
   16ef8:	movt	r0, #1
   16efc:	bl	142c8 <UnityPrint@@Base>
   16f00:	mov	r0, r9
   16f04:	bl	149f8 <UnityPrintNumberUnsigned@@Base>
   16f08:	movw	r0, #53740	; 0xd1ec
   16f0c:	movt	r0, #1
   16f10:	bl	142c8 <UnityPrint@@Base>
   16f14:	ldrb	r0, [r6]
   16f18:	mov	r1, #65	; 0x41
   16f1c:	bl	14794 <UnityPrintNumberByStyle@@Base>
   16f20:	movw	r0, #53751	; 0xd1f7
   16f24:	movt	r0, #1
   16f28:	bl	142c8 <UnityPrint@@Base>
   16f2c:	ldrb	r0, [r8]
   16f30:	mov	r1, #65	; 0x41
   16f34:	bl	14794 <UnityPrintNumberByStyle@@Base>
   16f38:	ldr	r0, [fp, #8]
   16f3c:	bl	14fb0 <UnityAssertBits@@Base+0x168>
   16f40:	movw	r1, #1832	; 0x728
   16f44:	mov	r0, #1
   16f48:	movt	r1, #3
   16f4c:	str	r0, [r1, #32]
   16f50:	add	r0, r1, #40	; 0x28
   16f54:	mov	r1, #1
   16f58:	bl	12638 <longjmp@plt>
   16f5c:	nop	{0}

00016f60 <UnityFail@@Base>:
   16f60:	push	{r4, r5, r6, sl, fp, lr}
   16f64:	add	fp, sp, #16
   16f68:	movw	r5, #65344	; 0xff40
   16f6c:	mov	r4, r0
   16f70:	movw	r6, #1832	; 0x728
   16f74:	movt	r5, #2
   16f78:	movt	r6, #3
   16f7c:	ldm	r5, {r0, r3}
   16f80:	adds	r0, r0, #1
   16f84:	adc	r3, r3, #0
   16f88:	stm	r5, {r0, r3}
   16f8c:	ldr	r0, [r6, #32]
   16f90:	ldr	r3, [r6, #36]	; 0x24
   16f94:	orrs	r0, r3, r0
   16f98:	beq	16fc4 <UnityFail@@Base+0x64>
   16f9c:	ldrd	r0, [r5, #8]
   16fa0:	ldrd	r2, [r5, #24]
   16fa4:	adds	r0, r0, #1
   16fa8:	adc	r1, r1, #0
   16fac:	adds	r2, r2, #1
   16fb0:	str	r2, [r5, #24]
   16fb4:	strd	r0, [r5, #8]
   16fb8:	adc	r0, r3, #0
   16fbc:	str	r0, [r5, #28]
   16fc0:	pop	{r4, r5, r6, sl, fp, pc}
   16fc4:	ldr	r0, [r5, #16]
   16fc8:	ldr	r3, [r5, #20]
   16fcc:	adds	r0, r0, #1
   16fd0:	str	r0, [r5, #16]
   16fd4:	ldr	r0, [r6]
   16fd8:	adc	r3, r3, #0
   16fdc:	str	r3, [r5, #20]
   16fe0:	bl	14dd8 <UnityConcludeTest@@Base+0x100>
   16fe4:	movw	r0, #62960	; 0xf5f0
   16fe8:	add	r1, pc, #344	; 0x158
   16fec:	movt	r0, #2
   16ff0:	vld1.64	{d16-d17}, [r1]
   16ff4:	vld1.64	{d18-d19}, [r0 :128]
   16ff8:	vadd.i64	q8, q9, q8
   16ffc:	vst1.64	{d16-d17}, [r0 :128]
   17000:	movw	r0, #53720	; 0xd1d8
   17004:	movt	r0, #1
   17008:	bl	142c8 <UnityPrint@@Base>
   1700c:	cmp	r4, #0
   17010:	bne	1701c <UnityFail@@Base+0xbc>
   17014:	add	r0, r5, #40	; 0x28
   17018:	b	17124 <UnityFail@@Base+0x1c4>
   1701c:	ldrd	r0, [r5, #32]
   17020:	adds	r0, r0, #1
   17024:	adc	r1, r1, #0
   17028:	strd	r0, [r5, #32]
   1702c:	mov	r0, #58	; 0x3a
   17030:	bl	12788 <putchar@plt>
   17034:	ldr	r0, [r6, #8]
   17038:	cmp	r0, #0
   1703c:	bne	17048 <UnityFail@@Base+0xe8>
   17040:	add	r0, r5, #56	; 0x38
   17044:	b	170c8 <UnityFail@@Base+0x168>
   17048:	ldrd	r0, [r5, #48]	; 0x30
   1704c:	adds	r0, r0, #1
   17050:	adc	r1, r1, #0
   17054:	strd	r0, [r5, #48]	; 0x30
   17058:	movw	r0, #54145	; 0xd381
   1705c:	movt	r0, #1
   17060:	bl	142c8 <UnityPrint@@Base>
   17064:	ldr	r0, [r6, #8]
   17068:	bl	142c8 <UnityPrint@@Base>
   1706c:	ldr	r0, [r6, #12]
   17070:	cmp	r0, #0
   17074:	bne	17080 <UnityFail@@Base+0x120>
   17078:	add	r0, r5, #72	; 0x48
   1707c:	b	170a8 <UnityFail@@Base+0x148>
   17080:	ldrd	r0, [r5, #64]	; 0x40
   17084:	adds	r0, r0, #1
   17088:	adc	r1, r1, #0
   1708c:	strd	r0, [r5, #64]	; 0x40
   17090:	movw	r0, #54155	; 0xd38b
   17094:	movt	r0, #1
   17098:	bl	142c8 <UnityPrint@@Base>
   1709c:	ldr	r0, [r6, #12]
   170a0:	bl	142c8 <UnityPrint@@Base>
   170a4:	add	r0, r5, #80	; 0x50
   170a8:	ldrd	r2, [r0]
   170ac:	adds	r2, r2, #1
   170b0:	adc	r3, r3, #0
   170b4:	strd	r2, [r0]
   170b8:	movw	r0, #53737	; 0xd1e9
   170bc:	movt	r0, #1
   170c0:	bl	142c8 <UnityPrint@@Base>
   170c4:	add	r0, r5, #88	; 0x58
   170c8:	ldrd	r2, [r0]
   170cc:	adds	r2, r2, #1
   170d0:	adc	r3, r3, #0
   170d4:	strd	r2, [r0]
   170d8:	ldrb	r0, [r4]
   170dc:	cmp	r0, #32
   170e0:	bne	170ec <UnityFail@@Base+0x18c>
   170e4:	add	r0, r5, #104	; 0x68
   170e8:	b	17108 <UnityFail@@Base+0x1a8>
   170ec:	ldrd	r0, [r5, #96]	; 0x60
   170f0:	adds	r0, r0, #1
   170f4:	adc	r1, r1, #0
   170f8:	strd	r0, [r5, #96]	; 0x60
   170fc:	mov	r0, #32
   17100:	bl	12788 <putchar@plt>
   17104:	add	r0, r5, #112	; 0x70
   17108:	ldrd	r2, [r0]
   1710c:	adds	r2, r2, #1
   17110:	adc	r3, r3, #0
   17114:	strd	r2, [r0]
   17118:	mov	r0, r4
   1711c:	bl	142c8 <UnityPrint@@Base>
   17120:	add	r0, r5, #120	; 0x78
   17124:	ldrd	r2, [r0]
   17128:	mov	r1, #1
   1712c:	adds	r2, r2, #1
   17130:	adc	r3, r3, #0
   17134:	strd	r2, [r0]
   17138:	mov	r0, #1
   1713c:	str	r0, [r6, #32]
   17140:	add	r0, r6, #40	; 0x28
   17144:	bl	12638 <longjmp@plt>
   17148:	andeq	r0, r0, r1
   1714c:	andeq	r0, r0, r0
   17150:	andeq	r0, r0, r1
   17154:	andeq	r0, r0, r0

00017158 <UnityIgnore@@Base>:
   17158:	push	{r4, r5, r6, sl, fp, lr}
   1715c:	add	fp, sp, #16
   17160:	movw	r5, #65472	; 0xffc0
   17164:	mov	r4, r0
   17168:	movw	r6, #1832	; 0x728
   1716c:	movt	r5, #2
   17170:	movt	r6, #3
   17174:	ldm	r5, {r0, r3}
   17178:	adds	r0, r0, #1
   1717c:	adc	r3, r3, #0
   17180:	stm	r5, {r0, r3}
   17184:	ldr	r0, [r6, #32]
   17188:	ldr	r3, [r6, #36]	; 0x24
   1718c:	orrs	r0, r3, r0
   17190:	beq	171bc <UnityIgnore@@Base+0x64>
   17194:	ldrd	r0, [r5, #8]
   17198:	ldrd	r2, [r5, #24]
   1719c:	adds	r0, r0, #1
   171a0:	adc	r1, r1, #0
   171a4:	adds	r2, r2, #1
   171a8:	str	r2, [r5, #24]
   171ac:	strd	r0, [r5, #8]
   171b0:	adc	r0, r3, #0
   171b4:	str	r0, [r5, #28]
   171b8:	pop	{r4, r5, r6, sl, fp, pc}
   171bc:	ldr	r0, [r5, #16]
   171c0:	ldr	r3, [r5, #20]
   171c4:	adds	r0, r0, #1
   171c8:	str	r0, [r5, #16]
   171cc:	ldr	r0, [r6]
   171d0:	adc	r3, r3, #0
   171d4:	str	r3, [r5, #20]
   171d8:	bl	14dd8 <UnityConcludeTest@@Base+0x100>
   171dc:	movw	r0, #53725	; 0xd1dd
   171e0:	movt	r0, #1
   171e4:	bl	142c8 <UnityPrint@@Base>
   171e8:	cmp	r4, #0
   171ec:	bne	171f8 <UnityIgnore@@Base+0xa0>
   171f0:	add	r0, r5, #40	; 0x28
   171f4:	b	17224 <UnityIgnore@@Base+0xcc>
   171f8:	ldrd	r0, [r5, #32]
   171fc:	adds	r0, r0, #1
   17200:	adc	r1, r1, #0
   17204:	strd	r0, [r5, #32]
   17208:	mov	r0, #58	; 0x3a
   1720c:	bl	12788 <putchar@plt>
   17210:	mov	r0, #32
   17214:	bl	12788 <putchar@plt>
   17218:	mov	r0, r4
   1721c:	bl	142c8 <UnityPrint@@Base>
   17220:	add	r0, r5, #48	; 0x30
   17224:	ldrd	r2, [r0]
   17228:	mov	r1, #1
   1722c:	adds	r2, r2, #1
   17230:	adc	r3, r3, #0
   17234:	strd	r2, [r0]
   17238:	mov	r0, #1
   1723c:	str	r0, [r6, #36]	; 0x24
   17240:	add	r0, r6, #40	; 0x28
   17244:	bl	12638 <longjmp@plt>

00017248 <setUp@@Base>:
   17248:	movw	r0, #0
   1724c:	add	r1, pc, #20
   17250:	movt	r0, #3
   17254:	vld1.64	{d16-d17}, [r1]
   17258:	vld1.64	{d18-d19}, [r0 :128]
   1725c:	vadd.i64	q8, q9, q8
   17260:	vst1.64	{d16-d17}, [r0 :128]
   17264:	bx	lr
   17268:	andeq	r0, r0, r1
   1726c:	andeq	r0, r0, r0
   17270:	andeq	r0, r0, r1
   17274:	andeq	r0, r0, r0

00017278 <tearDown@@Base>:
   17278:	movw	r0, #16
   1727c:	add	r1, pc, #20
   17280:	movt	r0, #3
   17284:	vld1.64	{d16-d17}, [r1]
   17288:	vld1.64	{d18-d19}, [r0 :128]
   1728c:	vadd.i64	q8, q9, q8
   17290:	vst1.64	{d16-d17}, [r0 :128]
   17294:	bx	lr
   17298:	andeq	r0, r0, r1
   1729c:	andeq	r0, r0, r0
   172a0:	andeq	r0, r0, r1
   172a4:	andeq	r0, r0, r0

000172a8 <UnityDefaultTestRun@@Base>:
   172a8:	push	{r4, r5, r6, r7, fp, lr}
   172ac:	add	fp, sp, #16
   172b0:	movw	r7, #1832	; 0x728
   172b4:	movw	r6, #32
   172b8:	mov	r4, r0
   172bc:	mov	r0, #0
   172c0:	movt	r7, #3
   172c4:	movt	r6, #3
   172c8:	str	r2, [r7, #16]
   172cc:	str	r1, [r7, #4]
   172d0:	str	r0, [r7, #12]
   172d4:	str	r0, [r7, #8]
   172d8:	ldrd	r0, [r6]
   172dc:	add	r5, r7, #40	; 0x28
   172e0:	ldr	r2, [r7, #20]
   172e4:	adds	r0, r0, #1
   172e8:	adc	r1, r1, #0
   172ec:	add	r2, r2, #1
   172f0:	strd	r0, [r6]
   172f4:	mov	r0, r5
   172f8:	str	r2, [r7, #20]
   172fc:	bl	12650 <_setjmp@plt>
   17300:	cmp	r0, #0
   17304:	beq	17310 <UnityDefaultTestRun@@Base+0x68>
   17308:	add	r0, r6, #16
   1730c:	b	1732c <UnityDefaultTestRun@@Base+0x84>
   17310:	ldrd	r0, [r6, #8]
   17314:	adds	r0, r0, #1
   17318:	adc	r1, r1, #0
   1731c:	strd	r0, [r6, #8]
   17320:	bl	17248 <setUp@@Base>
   17324:	blx	r4
   17328:	add	r0, r6, #24
   1732c:	ldrd	r2, [r0]
   17330:	adds	r2, r2, #1
   17334:	adc	r3, r3, #0
   17338:	strd	r2, [r0]
   1733c:	mov	r0, r5
   17340:	bl	12650 <_setjmp@plt>
   17344:	ldr	r1, [r7, #36]	; 0x24
   17348:	orrs	r0, r1, r0
   1734c:	beq	17358 <UnityDefaultTestRun@@Base+0xb0>
   17350:	add	r0, r6, #32
   17354:	b	17370 <UnityDefaultTestRun@@Base+0xc8>
   17358:	ldrd	r0, [r6, #40]	; 0x28
   1735c:	adds	r0, r0, #1
   17360:	adc	r1, r1, #0
   17364:	strd	r0, [r6, #40]	; 0x28
   17368:	bl	17278 <tearDown@@Base>
   1736c:	add	r0, r6, #48	; 0x30
   17370:	ldrd	r2, [r0]
   17374:	adds	r2, r2, #1
   17378:	adc	r3, r3, #0
   1737c:	strd	r2, [r0]
   17380:	ldrd	r0, [r6, #56]	; 0x38
   17384:	adds	r0, r0, #1
   17388:	adc	r1, r1, #0
   1738c:	strd	r0, [r6, #56]	; 0x38
   17390:	bl	14cd8 <UnityConcludeTest@@Base>
   17394:	pop	{r4, r5, r6, r7, fp, pc}

00017398 <UnityBegin@@Base>:
   17398:	movw	r1, #96	; 0x60
   1739c:	add	r2, pc, #60	; 0x3c
   173a0:	vmov.i32	q10, #0	; 0x00000000
   173a4:	movt	r1, #3
   173a8:	vld1.64	{d16-d17}, [r2]
   173ac:	movw	r2, #1832	; 0x728
   173b0:	movt	r2, #3
   173b4:	vld1.64	{d18-d19}, [r1 :128]
   173b8:	str	r0, [r2]
   173bc:	mov	r0, #0
   173c0:	str	r0, [r2, #36]	; 0x24
   173c4:	add	r0, r2, #4
   173c8:	vst1.32	{d20-d21}, [r0]
   173cc:	add	r0, r2, #20
   173d0:	vst1.32	{d20-d21}, [r0]
   173d4:	vadd.i64	q8, q9, q8
   173d8:	vst1.64	{d16-d17}, [r1 :128]
   173dc:	bx	lr
   173e0:	andeq	r0, r0, r1
   173e4:	andeq	r0, r0, r0
   173e8:	andeq	r0, r0, r1
   173ec:	andeq	r0, r0, r0

000173f0 <UnityEnd@@Base>:
   173f0:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   173f4:	add	fp, sp, #24
   173f8:	movw	r4, #112	; 0x70
   173fc:	movt	r4, #3
   17400:	ldrd	r0, [r4]
   17404:	adds	r0, r0, #1
   17408:	adc	r1, r1, #0
   1740c:	strd	r0, [r4]
   17410:	mov	r0, #10
   17414:	bl	12788 <putchar@plt>
   17418:	movw	r0, #54092	; 0xd34c
   1741c:	movt	r0, #1
   17420:	bl	142c8 <UnityPrint@@Base>
   17424:	mov	r0, #10
   17428:	bl	12788 <putchar@plt>
   1742c:	movw	r5, #1832	; 0x728
   17430:	movt	r5, #3
   17434:	ldr	r0, [r5, #20]
   17438:	bl	14868 <UnityPrintNumber@@Base>
   1743c:	movw	r0, #54116	; 0xd364
   17440:	movt	r0, #1
   17444:	bl	142c8 <UnityPrint@@Base>
   17448:	ldr	r0, [r5, #24]
   1744c:	bl	14868 <UnityPrintNumber@@Base>
   17450:	movw	r0, #54124	; 0xd36c
   17454:	movt	r0, #1
   17458:	bl	142c8 <UnityPrint@@Base>
   1745c:	ldr	r0, [r5, #28]
   17460:	bl	14868 <UnityPrintNumber@@Base>
   17464:	movw	r0, #54135	; 0xd377
   17468:	movt	r0, #1
   1746c:	bl	142c8 <UnityPrint@@Base>
   17470:	mov	r0, #10
   17474:	bl	12788 <putchar@plt>
   17478:	ldr	r0, [r5, #24]
   1747c:	cmp	r0, #0
   17480:	beq	174b0 <UnityEnd@@Base+0xc0>
   17484:	ldrd	r0, [r4, #16]
   17488:	movw	r2, #62960	; 0xf5f0
   1748c:	add	r6, r4, #32
   17490:	movt	r2, #2
   17494:	adds	r0, r0, #1
   17498:	adc	r1, r1, #0
   1749c:	strd	r0, [r4, #16]
   174a0:	movw	r0, #53720	; 0xd1d8
   174a4:	add	r1, r2, #8
   174a8:	movt	r0, #1
   174ac:	b	174d8 <UnityEnd@@Base+0xe8>
   174b0:	ldrd	r0, [r4, #8]
   174b4:	movw	r2, #62976	; 0xf600
   174b8:	add	r6, r4, #24
   174bc:	movt	r2, #2
   174c0:	adds	r0, r0, #1
   174c4:	adc	r1, r1, #0
   174c8:	strd	r0, [r4, #8]
   174cc:	movw	r0, #53712	; 0xd1d0
   174d0:	add	r1, r2, #8
   174d4:	movt	r0, #1
   174d8:	ldrd	r8, [r2]
   174dc:	adds	r8, r8, #1
   174e0:	adc	r9, r9, #0
   174e4:	strd	r8, [r2]
   174e8:	ldrd	r2, [r1]
   174ec:	adds	r2, r2, #1
   174f0:	adc	r3, r3, #0
   174f4:	strd	r2, [r1]
   174f8:	bl	142c8 <UnityPrint@@Base>
   174fc:	ldrd	r0, [r6]
   17500:	adds	r0, r0, #1
   17504:	adc	r1, r1, #0
   17508:	strd	r0, [r6]
   1750c:	ldrd	r0, [r4, #40]	; 0x28
   17510:	adds	r0, r0, #1
   17514:	adc	r1, r1, #0
   17518:	strd	r0, [r4, #40]	; 0x28
   1751c:	mov	r0, #10
   17520:	bl	12788 <putchar@plt>
   17524:	ldr	r0, [r5, #24]
   17528:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}
   1752c:	push	{r4, r5, r6, lr}
   17530:	sub	sp, sp, #8
   17534:	movw	r0, #55184	; 0xd790
   17538:	movw	r1, #52401	; 0xccb1
   1753c:	movw	r2, #23556	; 0x5c04
   17540:	movt	r0, #1
   17544:	movt	r1, #1
   17548:	movt	r2, #21342	; 0x535e
   1754c:	bl	19b00 <next@@Base+0x16a8>
   17550:	movw	r0, #54912	; 0xd680
   17554:	movw	r6, #54224	; 0xd3d0
   17558:	mov	r5, #0
   1755c:	movt	r0, #1
   17560:	movt	r6, #1
   17564:	add	r4, r0, #4
   17568:	mov	r3, r6
   1756c:	ldr	r0, [r3, r5]!
   17570:	ldr	r1, [r3, #16]
   17574:	str	r1, [sp]
   17578:	ldmib	r3, {r1, r2}
   1757c:	ldrb	r3, [r3, #12]
   17580:	bl	1a220 <next@@Base+0x1dc8>
   17584:	ldrd	r0, [r4, #-4]
   17588:	bl	1aad4 <next@@Base+0x267c>
   1758c:	add	r5, r5, #20
   17590:	add	r4, r4, #8
   17594:	cmp	r5, #680	; 0x2a8
   17598:	bne	17568 <UnityEnd@@Base+0x178>
   1759c:	bl	1b25c <next@@Base+0x2e04>
   175a0:	add	sp, sp, #8
   175a4:	pop	{r4, r5, r6, lr}
   175a8:	b	1bfc8 <next@@Base+0x3b70>
   175ac:	push	{r4, r5, r6, r7, fp, lr}
   175b0:	vpush	{d8-d9}
   175b4:	bl	1752c <UnityEnd@@Base+0x13c>
   175b8:	movw	r0, #62128	; 0xf2b0
   175bc:	mov	r1, #0
   175c0:	mov	r2, #152	; 0x98
   175c4:	mov	r4, #0
   175c8:	movt	r0, #2
   175cc:	bl	1277c <memset@plt>
   175d0:	movw	r0, #62288	; 0xf350
   175d4:	vmov.i32	q4, #0	; 0x00000000
   175d8:	mov	r5, #64	; 0x40
   175dc:	mov	r2, #168	; 0xa8
   175e0:	movt	r0, #2
   175e4:	add	r1, r0, #16
   175e8:	vst1.64	{d8-d9}, [r1 :128]
   175ec:	add	r1, r0, #32
   175f0:	vst1.64	{d8-d9}, [r1 :128]
   175f4:	add	r1, r0, #48	; 0x30
   175f8:	vst1.64	{d8-d9}, [r0 :128], r5
   175fc:	vst1.64	{d8-d9}, [r0 :128]
   17600:	movw	r0, #62368	; 0xf3a0
   17604:	vst1.64	{d8-d9}, [r1 :128]
   17608:	mov	r1, #0
   1760c:	movt	r0, #2
   17610:	bl	1277c <memset@plt>
   17614:	movw	r0, #62544	; 0xf450
   17618:	movw	r2, #62624	; 0xf4a0
   1761c:	movw	r3, #62752	; 0xf520
   17620:	mov	r6, #32
   17624:	movt	r0, #2
   17628:	movt	r2, #2
   1762c:	movt	r3, #2
   17630:	add	r1, r0, #16
   17634:	str	r4, [r0, #64]	; 0x40
   17638:	str	r4, [r2, #112]	; 0x70
   1763c:	str	r4, [r3, #80]	; 0x50
   17640:	vst1.64	{d8-d9}, [r1 :128]
   17644:	add	r1, r0, #32
   17648:	vst1.64	{d8-d9}, [r1 :128]
   1764c:	add	r1, r0, #48	; 0x30
   17650:	vst1.64	{d8-d9}, [r1 :128]
   17654:	add	r1, r2, #16
   17658:	vst1.64	{d8-d9}, [r1 :128]
   1765c:	add	r1, r2, #32
   17660:	vst1.64	{d8-d9}, [r1 :128]
   17664:	add	r1, r2, #48	; 0x30
   17668:	vst1.64	{d8-d9}, [r1 :128]
   1766c:	add	r1, r2, #64	; 0x40
   17670:	vst1.64	{d8-d9}, [r1 :128]
   17674:	add	r1, r2, #80	; 0x50
   17678:	vst1.64	{d8-d9}, [r1 :128]
   1767c:	add	r1, r2, #96	; 0x60
   17680:	vst1.64	{d8-d9}, [r1 :128]
   17684:	add	r1, r3, #16
   17688:	vst1.64	{d8-d9}, [r1 :128]
   1768c:	add	r1, r3, #32
   17690:	vst1.64	{d8-d9}, [r1 :128]
   17694:	add	r1, r3, #48	; 0x30
   17698:	vst1.64	{d8-d9}, [r1 :128]
   1769c:	add	r1, r3, #64	; 0x40
   176a0:	vst1.64	{d8-d9}, [r1 :128]
   176a4:	mov	r1, #68	; 0x44
   176a8:	vst1.64	{d8-d9}, [r0 :128], r1
   176ac:	str	r4, [r0]
   176b0:	mov	r0, #116	; 0x74
   176b4:	vst1.64	{d8-d9}, [r2 :128], r0
   176b8:	mov	r0, #84	; 0x54
   176bc:	str	r4, [r2]
   176c0:	movw	r2, #62848	; 0xf580
   176c4:	vst1.64	{d8-d9}, [r3 :128], r0
   176c8:	movt	r2, #2
   176cc:	str	r4, [r3]
   176d0:	add	r3, r2, #80	; 0x50
   176d4:	str	r4, [r2, #96]	; 0x60
   176d8:	vst1.64	{d8-d9}, [r3 :128]
   176dc:	add	r3, r2, #64	; 0x40
   176e0:	vst1.64	{d8-d9}, [r3 :128]
   176e4:	add	r3, r2, #48	; 0x30
   176e8:	vst1.64	{d8-d9}, [r3 :128]
   176ec:	add	r3, r2, #32
   176f0:	vst1.64	{d8-d9}, [r3 :128]
   176f4:	add	r3, r2, #16
   176f8:	vst1.64	{d8-d9}, [r3 :128]
   176fc:	mov	r3, #100	; 0x64
   17700:	vst1.64	{d8-d9}, [r2 :128], r3
   17704:	str	r4, [r2]
   17708:	movw	r2, #62960	; 0xf5f0
   1770c:	movt	r2, #2
   17710:	vst1.64	{d8-d9}, [r2 :128]
   17714:	movw	r2, #62976	; 0xf600
   17718:	movt	r2, #2
   1771c:	vst1.64	{d8-d9}, [r2 :128]
   17720:	movw	r2, #62992	; 0xf610
   17724:	movt	r2, #2
   17728:	add	r3, r2, #48	; 0x30
   1772c:	str	r4, [r2, #64]	; 0x40
   17730:	vst1.64	{d8-d9}, [r3 :128]
   17734:	add	r3, r2, #32
   17738:	vst1.64	{d8-d9}, [r3 :128]
   1773c:	add	r3, r2, #16
   17740:	vst1.64	{d8-d9}, [r2 :128], r1
   17744:	movw	r1, #63072	; 0xf660
   17748:	movt	r1, #2
   1774c:	str	r4, [r2]
   17750:	vst1.64	{d8-d9}, [r3 :128]
   17754:	vst1.64	{d8-d9}, [r1 :128]
   17758:	movw	r1, #63088	; 0xf670
   1775c:	movt	r1, #2
   17760:	add	r2, r1, #16
   17764:	vst1.64	{d8-d9}, [r1 :128], r6
   17768:	vst1.64	{d8-d9}, [r1 :128]
   1776c:	movw	r1, #63136	; 0xf6a0
   17770:	vst1.64	{d8-d9}, [r2 :128]
   17774:	movt	r1, #2
   17778:	vst1.64	{d8-d9}, [r1 :128]
   1777c:	movw	r1, #63152	; 0xf6b0
   17780:	movt	r1, #2
   17784:	add	r2, r1, #64	; 0x40
   17788:	str	r4, [r1, #80]	; 0x50
   1778c:	vst1.64	{d8-d9}, [r2 :128]
   17790:	add	r2, r1, #48	; 0x30
   17794:	vst1.64	{d8-d9}, [r2 :128]
   17798:	add	r2, r1, #32
   1779c:	vst1.64	{d8-d9}, [r2 :128]
   177a0:	add	r2, r1, #16
   177a4:	vst1.64	{d8-d9}, [r1 :128], r0
   177a8:	movw	r0, #63248	; 0xf710
   177ac:	movt	r0, #2
   177b0:	str	r4, [r1]
   177b4:	vst1.64	{d8-d9}, [r2 :128]
   177b8:	mov	r2, #280	; 0x118
   177bc:	add	r1, r0, #16
   177c0:	vst1.64	{d8-d9}, [r0 :128], r6
   177c4:	vst1.64	{d8-d9}, [r0 :128]
   177c8:	movw	r0, #63296	; 0xf740
   177cc:	vst1.64	{d8-d9}, [r1 :128]
   177d0:	mov	r1, #0
   177d4:	movt	r0, #2
   177d8:	bl	1277c <memset@plt>
   177dc:	movw	r0, #63584	; 0xf860
   177e0:	mov	r2, #192	; 0xc0
   177e4:	movt	r0, #2
   177e8:	add	r1, r0, #16
   177ec:	vst1.64	{d8-d9}, [r1 :128]
   177f0:	add	r1, r0, #32
   177f4:	vst1.64	{d8-d9}, [r1 :128]
   177f8:	add	r1, r0, #48	; 0x30
   177fc:	vst1.64	{d8-d9}, [r0 :128], r5
   17800:	vst1.64	{d8-d9}, [r0 :128]
   17804:	movw	r0, #63664	; 0xf8b0
   17808:	vst1.64	{d8-d9}, [r1 :128]
   1780c:	mov	r1, #0
   17810:	movt	r0, #2
   17814:	bl	1277c <memset@plt>
   17818:	movw	r0, #63856	; 0xf970
   1781c:	mov	r7, #112	; 0x70
   17820:	mov	r2, #248	; 0xf8
   17824:	movt	r0, #2
   17828:	add	r1, r0, #16
   1782c:	vst1.64	{d8-d9}, [r1 :128]
   17830:	add	r1, r0, #32
   17834:	vst1.64	{d8-d9}, [r1 :128]
   17838:	add	r1, r0, #48	; 0x30
   1783c:	vst1.64	{d8-d9}, [r1 :128]
   17840:	add	r1, r0, #64	; 0x40
   17844:	vst1.64	{d8-d9}, [r1 :128]
   17848:	add	r1, r0, #80	; 0x50
   1784c:	vst1.64	{d8-d9}, [r1 :128]
   17850:	add	r1, r0, #96	; 0x60
   17854:	vst1.64	{d8-d9}, [r0 :128], r7
   17858:	vst1.64	{d8-d9}, [r0 :128]
   1785c:	movw	r0, #63984	; 0xf9f0
   17860:	vst1.64	{d8-d9}, [r1 :128]
   17864:	mov	r1, #0
   17868:	movt	r0, #2
   1786c:	bl	1277c <memset@plt>
   17870:	movw	r0, #64240	; 0xfaf0
   17874:	mov	r2, #176	; 0xb0
   17878:	movt	r0, #2
   1787c:	add	r1, r0, #16
   17880:	vst1.64	{d8-d9}, [r1 :128]
   17884:	add	r1, r0, #32
   17888:	vst1.64	{d8-d9}, [r1 :128]
   1788c:	add	r1, r0, #48	; 0x30
   17890:	vst1.64	{d8-d9}, [r1 :128]
   17894:	add	r1, r0, #64	; 0x40
   17898:	vst1.64	{d8-d9}, [r1 :128]
   1789c:	add	r1, r0, #80	; 0x50
   178a0:	vst1.64	{d8-d9}, [r1 :128]
   178a4:	add	r1, r0, #96	; 0x60
   178a8:	vst1.64	{d8-d9}, [r0 :128], r7
   178ac:	vst1.64	{d8-d9}, [r0 :128]
   178b0:	movw	r0, #64368	; 0xfb70
   178b4:	vst1.64	{d8-d9}, [r1 :128]
   178b8:	mov	r1, #0
   178bc:	movt	r0, #2
   178c0:	bl	1277c <memset@plt>
   178c4:	movw	r0, #64544	; 0xfc20
   178c8:	mov	r2, #192	; 0xc0
   178cc:	movt	r0, #2
   178d0:	add	r1, r0, #16
   178d4:	vst1.64	{d8-d9}, [r1 :128]
   178d8:	add	r1, r0, #32
   178dc:	vst1.64	{d8-d9}, [r1 :128]
   178e0:	add	r1, r0, #48	; 0x30
   178e4:	vst1.64	{d8-d9}, [r0 :128], r5
   178e8:	vst1.64	{d8-d9}, [r0 :128]
   178ec:	movw	r0, #64624	; 0xfc70
   178f0:	vst1.64	{d8-d9}, [r1 :128]
   178f4:	mov	r1, #0
   178f8:	movt	r0, #2
   178fc:	bl	1277c <memset@plt>
   17900:	movw	r0, #64816	; 0xfd30
   17904:	mov	r2, #272	; 0x110
   17908:	movt	r0, #2
   1790c:	add	r1, r0, #16
   17910:	vst1.64	{d8-d9}, [r1 :128]
   17914:	add	r1, r0, #32
   17918:	vst1.64	{d8-d9}, [r1 :128]
   1791c:	add	r1, r0, #48	; 0x30
   17920:	vst1.64	{d8-d9}, [r0 :128], r5
   17924:	vst1.64	{d8-d9}, [r0 :128]
   17928:	movw	r0, #64896	; 0xfd80
   1792c:	vst1.64	{d8-d9}, [r1 :128]
   17930:	mov	r1, #0
   17934:	movt	r0, #2
   17938:	bl	1277c <memset@plt>
   1793c:	movw	r0, #65168	; 0xfe90
   17940:	mov	r1, #0
   17944:	mov	r2, #176	; 0xb0
   17948:	movt	r0, #2
   1794c:	bl	1277c <memset@plt>
   17950:	movw	r1, #32
   17954:	mov	r0, #48	; 0x30
   17958:	movt	r1, #3
   1795c:	mov	r2, r1
   17960:	vst1.64	{d8-d9}, [r2 :128], r0
   17964:	movw	r0, #65344	; 0xff40
   17968:	movt	r0, #2
   1796c:	vst1.64	{d8-d9}, [r2 :128]
   17970:	add	r2, r0, #16
   17974:	vst1.64	{d8-d9}, [r2 :128]
   17978:	add	r2, r0, #32
   1797c:	vst1.64	{d8-d9}, [r2 :128]
   17980:	add	r2, r0, #48	; 0x30
   17984:	vst1.64	{d8-d9}, [r2 :128]
   17988:	add	r2, r0, #64	; 0x40
   1798c:	vst1.64	{d8-d9}, [r2 :128]
   17990:	add	r2, r0, #80	; 0x50
   17994:	vst1.64	{d8-d9}, [r2 :128]
   17998:	add	r2, r0, #96	; 0x60
   1799c:	vst1.64	{d8-d9}, [r0 :128], r7
   179a0:	vst1.64	{d8-d9}, [r2 :128]
   179a4:	movw	r2, #65472	; 0xffc0
   179a8:	vst1.64	{d8-d9}, [r0 :128]
   179ac:	mov	r0, #52	; 0x34
   179b0:	movt	r2, #2
   179b4:	add	r3, r2, #16
   179b8:	str	r4, [r2, #48]	; 0x30
   179bc:	vst1.64	{d8-d9}, [r3 :128]
   179c0:	add	r3, r2, #32
   179c4:	vst1.64	{d8-d9}, [r2 :128], r0
   179c8:	movw	r0, #96	; 0x60
   179cc:	vst1.64	{d8-d9}, [r3 :128]
   179d0:	movw	r3, #0
   179d4:	movt	r0, #3
   179d8:	str	r4, [r2]
   179dc:	movt	r3, #3
   179e0:	vst1.64	{d8-d9}, [r0 :128]
   179e4:	movw	r0, #112	; 0x70
   179e8:	vst1.64	{d8-d9}, [r3 :128]
   179ec:	movw	r3, #16
   179f0:	movt	r0, #3
   179f4:	movt	r3, #3
   179f8:	vst1.64	{d8-d9}, [r3 :128]
   179fc:	add	r3, r1, #16
   17a00:	add	r1, r1, #32
   17a04:	vst1.64	{d8-d9}, [r1 :128]
   17a08:	add	r1, r0, #16
   17a0c:	vst1.64	{d8-d9}, [r0 :128], r6
   17a10:	vst1.64	{d8-d9}, [r3 :128]
   17a14:	vst1.64	{d8-d9}, [r1 :128]
   17a18:	vst1.64	{d8-d9}, [r0 :128]
   17a1c:	vpop	{d8-d9}
   17a20:	pop	{r4, r5, r6, r7, fp, pc}
   17a24:	movw	r0, #29996	; 0x752c
   17a28:	movw	r1, #30124	; 0x75ac
   17a2c:	movt	r0, #1
   17a30:	movt	r1, #1
   17a34:	b	1c47c <__gcov_flush@@Base+0xb8>

00017a38 <init_token_int_type@@Base>:
   17a38:	movw	r1, #160	; 0xa0
   17a3c:	add	r2, pc, #28
   17a40:	movt	r1, #3
   17a44:	vld1.64	{d16-d17}, [r2]
   17a48:	vld1.64	{d18-d19}, [r1 :128]
   17a4c:	vadd.i64	q8, q9, q8
   17a50:	vst1.64	{d16-d17}, [r1 :128]
   17a54:	mov	r1, #0
   17a58:	str	r1, [r0]
   17a5c:	bx	lr
   17a60:	andeq	r0, r0, r1
   17a64:	andeq	r0, r0, r0
   17a68:	andeq	r0, r0, r1
   17a6c:	andeq	r0, r0, r0

00017a70 <init_token_int_value@@Base>:
   17a70:	movw	r2, #176	; 0xb0
   17a74:	add	r3, pc, #36	; 0x24
   17a78:	movt	r2, #3
   17a7c:	vld1.64	{d16-d17}, [r3]
   17a80:	vld1.64	{d18-d19}, [r2 :128]
   17a84:	vadd.i64	q8, q9, q8
   17a88:	vst1.64	{d16-d17}, [r2 :128]
   17a8c:	mov	r2, #1
   17a90:	str	r2, [r0]
   17a94:	str	r1, [r0, #4]
   17a98:	bx	lr
   17a9c:	nop	{0}
   17aa0:	andeq	r0, r0, r1
   17aa4:	andeq	r0, r0, r0
   17aa8:	andeq	r0, r0, r1
   17aac:	andeq	r0, r0, r0

00017ab0 <init_token_function@@Base>:
   17ab0:	movw	r2, #192	; 0xc0
   17ab4:	add	r3, pc, #36	; 0x24
   17ab8:	movt	r2, #3
   17abc:	vld1.64	{d16-d17}, [r3]
   17ac0:	vld1.64	{d18-d19}, [r2 :128]
   17ac4:	vadd.i64	q8, q9, q8
   17ac8:	vst1.64	{d16-d17}, [r2 :128]
   17acc:	mov	r2, #2
   17ad0:	str	r2, [r0]
   17ad4:	str	r1, [r0, #4]
   17ad8:	bx	lr
   17adc:	nop	{0}
   17ae0:	andeq	r0, r0, r1
   17ae4:	andeq	r0, r0, r0
   17ae8:	andeq	r0, r0, r1
   17aec:	andeq	r0, r0, r0

00017af0 <init_token_opar@@Base>:
   17af0:	movw	r1, #208	; 0xd0
   17af4:	add	r2, pc, #28
   17af8:	movt	r1, #3
   17afc:	vld1.64	{d16-d17}, [r2]
   17b00:	vld1.64	{d18-d19}, [r1 :128]
   17b04:	vadd.i64	q8, q9, q8
   17b08:	vst1.64	{d16-d17}, [r1 :128]
   17b0c:	mov	r1, #3
   17b10:	str	r1, [r0]
   17b14:	bx	lr
   17b18:	andeq	r0, r0, r1
   17b1c:	andeq	r0, r0, r0
   17b20:	andeq	r0, r0, r1
   17b24:	andeq	r0, r0, r0

00017b28 <init_token_cpar@@Base>:
   17b28:	movw	r1, #224	; 0xe0
   17b2c:	add	r2, pc, #28
   17b30:	movt	r1, #3
   17b34:	vld1.64	{d16-d17}, [r2]
   17b38:	vld1.64	{d18-d19}, [r1 :128]
   17b3c:	vadd.i64	q8, q9, q8
   17b40:	vst1.64	{d16-d17}, [r1 :128]
   17b44:	mov	r1, #4
   17b48:	str	r1, [r0]
   17b4c:	bx	lr
   17b50:	andeq	r0, r0, r1
   17b54:	andeq	r0, r0, r0
   17b58:	andeq	r0, r0, r1
   17b5c:	andeq	r0, r0, r0

00017b60 <init_token_obra@@Base>:
   17b60:	movw	r1, #240	; 0xf0
   17b64:	add	r2, pc, #28
   17b68:	movt	r1, #3
   17b6c:	vld1.64	{d16-d17}, [r2]
   17b70:	vld1.64	{d18-d19}, [r1 :128]
   17b74:	vadd.i64	q8, q9, q8
   17b78:	vst1.64	{d16-d17}, [r1 :128]
   17b7c:	mov	r1, #5
   17b80:	str	r1, [r0]
   17b84:	bx	lr
   17b88:	andeq	r0, r0, r1
   17b8c:	andeq	r0, r0, r0
   17b90:	andeq	r0, r0, r1
   17b94:	andeq	r0, r0, r0

00017b98 <init_token_cbra@@Base>:
   17b98:	movw	r1, #256	; 0x100
   17b9c:	add	r2, pc, #28
   17ba0:	movt	r1, #3
   17ba4:	vld1.64	{d16-d17}, [r2]
   17ba8:	vld1.64	{d18-d19}, [r1 :128]
   17bac:	vadd.i64	q8, q9, q8
   17bb0:	vst1.64	{d16-d17}, [r1 :128]
   17bb4:	mov	r1, #6
   17bb8:	str	r1, [r0]
   17bbc:	bx	lr
   17bc0:	andeq	r0, r0, r1
   17bc4:	andeq	r0, r0, r0
   17bc8:	andeq	r0, r0, r1
   17bcc:	andeq	r0, r0, r0

00017bd0 <init_token_return@@Base>:
   17bd0:	movw	r1, #272	; 0x110
   17bd4:	add	r2, pc, #28
   17bd8:	movt	r1, #3
   17bdc:	vld1.64	{d16-d17}, [r2]
   17be0:	vld1.64	{d18-d19}, [r1 :128]
   17be4:	vadd.i64	q8, q9, q8
   17be8:	vst1.64	{d16-d17}, [r1 :128]
   17bec:	mov	r1, #7
   17bf0:	str	r1, [r0]
   17bf4:	bx	lr
   17bf8:	andeq	r0, r0, r1
   17bfc:	andeq	r0, r0, r0
   17c00:	andeq	r0, r0, r1
   17c04:	andeq	r0, r0, r0

00017c08 <init_token_semicolon@@Base>:
   17c08:	movw	r1, #288	; 0x120
   17c0c:	add	r2, pc, #28
   17c10:	movt	r1, #3
   17c14:	vld1.64	{d16-d17}, [r2]
   17c18:	vld1.64	{d18-d19}, [r1 :128]
   17c1c:	vadd.i64	q8, q9, q8
   17c20:	vst1.64	{d16-d17}, [r1 :128]
   17c24:	mov	r1, #8
   17c28:	str	r1, [r0]
   17c2c:	bx	lr
   17c30:	andeq	r0, r0, r1
   17c34:	andeq	r0, r0, r0
   17c38:	andeq	r0, r0, r1
   17c3c:	andeq	r0, r0, r0

00017c40 <init_token_eof@@Base>:
   17c40:	movw	r1, #304	; 0x130
   17c44:	add	r2, pc, #28
   17c48:	movt	r1, #3
   17c4c:	vld1.64	{d16-d17}, [r2]
   17c50:	vld1.64	{d18-d19}, [r1 :128]
   17c54:	vadd.i64	q8, q9, q8
   17c58:	vst1.64	{d16-d17}, [r1 :128]
   17c5c:	mov	r1, #9
   17c60:	str	r1, [r0]
   17c64:	bx	lr
   17c68:	andeq	r0, r0, r1
   17c6c:	andeq	r0, r0, r0
   17c70:	andeq	r0, r0, r1
   17c74:	andeq	r0, r0, r0

00017c78 <init_token_if@@Base>:
   17c78:	movw	r1, #320	; 0x140
   17c7c:	add	r2, pc, #28
   17c80:	movt	r1, #3
   17c84:	vld1.64	{d16-d17}, [r2]
   17c88:	vld1.64	{d18-d19}, [r1 :128]
   17c8c:	vadd.i64	q8, q9, q8
   17c90:	vst1.64	{d16-d17}, [r1 :128]
   17c94:	mov	r1, #10
   17c98:	str	r1, [r0]
   17c9c:	bx	lr
   17ca0:	andeq	r0, r0, r1
   17ca4:	andeq	r0, r0, r0
   17ca8:	andeq	r0, r0, r1
   17cac:	andeq	r0, r0, r0

00017cb0 <init_token_else@@Base>:
   17cb0:	movw	r1, #336	; 0x150
   17cb4:	add	r2, pc, #28
   17cb8:	movt	r1, #3
   17cbc:	vld1.64	{d16-d17}, [r2]
   17cc0:	vld1.64	{d18-d19}, [r1 :128]
   17cc4:	vadd.i64	q8, q9, q8
   17cc8:	vst1.64	{d16-d17}, [r1 :128]
   17ccc:	mov	r1, #11
   17cd0:	str	r1, [r0]
   17cd4:	bx	lr
   17cd8:	andeq	r0, r0, r1
   17cdc:	andeq	r0, r0, r0
   17ce0:	andeq	r0, r0, r1
   17ce4:	andeq	r0, r0, r0

00017ce8 <init_token_boolean_op@@Base>:
   17ce8:	movw	r2, #352	; 0x160
   17cec:	add	r3, pc, #36	; 0x24
   17cf0:	movt	r2, #3
   17cf4:	vld1.64	{d16-d17}, [r3]
   17cf8:	vld1.64	{d18-d19}, [r2 :128]
   17cfc:	vadd.i64	q8, q9, q8
   17d00:	vst1.64	{d16-d17}, [r2 :128]
   17d04:	mov	r2, #12
   17d08:	str	r2, [r0]
   17d0c:	str	r1, [r0, #4]
   17d10:	bx	lr
   17d14:	nop	{0}
   17d18:	andeq	r0, r0, r1
   17d1c:	andeq	r0, r0, r0
   17d20:	andeq	r0, r0, r1
   17d24:	andeq	r0, r0, r0

00017d28 <free_token_int_type@@Base>:
   17d28:	movw	r1, #368	; 0x170
   17d2c:	add	r2, pc, #20
   17d30:	movt	r1, #3
   17d34:	vld1.64	{d16-d17}, [r2]
   17d38:	vld1.64	{d18-d19}, [r1 :128]
   17d3c:	vadd.i64	q8, q9, q8
   17d40:	vst1.64	{d16-d17}, [r1 :128]
   17d44:	b	1265c <free@plt>
   17d48:	andeq	r0, r0, r1
   17d4c:	andeq	r0, r0, r0
   17d50:	andeq	r0, r0, r1
   17d54:	andeq	r0, r0, r0

00017d58 <free_token_int_value@@Base>:
   17d58:	movw	r1, #384	; 0x180
   17d5c:	add	r2, pc, #20
   17d60:	movt	r1, #3
   17d64:	vld1.64	{d16-d17}, [r2]
   17d68:	vld1.64	{d18-d19}, [r1 :128]
   17d6c:	vadd.i64	q8, q9, q8
   17d70:	vst1.64	{d16-d17}, [r1 :128]
   17d74:	b	1265c <free@plt>
   17d78:	andeq	r0, r0, r1
   17d7c:	andeq	r0, r0, r0
   17d80:	andeq	r0, r0, r1
   17d84:	andeq	r0, r0, r0

00017d88 <free_token_function@@Base>:
   17d88:	movw	r1, #400	; 0x190
   17d8c:	add	r2, pc, #20
   17d90:	movt	r1, #3
   17d94:	vld1.64	{d16-d17}, [r2]
   17d98:	vld1.64	{d18-d19}, [r1 :128]
   17d9c:	vadd.i64	q8, q9, q8
   17da0:	vst1.64	{d16-d17}, [r1 :128]
   17da4:	b	1265c <free@plt>
   17da8:	andeq	r0, r0, r1
   17dac:	andeq	r0, r0, r0
   17db0:	andeq	r0, r0, r1
   17db4:	andeq	r0, r0, r0

00017db8 <free_token_opar@@Base>:
   17db8:	movw	r1, #416	; 0x1a0
   17dbc:	add	r2, pc, #20
   17dc0:	movt	r1, #3
   17dc4:	vld1.64	{d16-d17}, [r2]
   17dc8:	vld1.64	{d18-d19}, [r1 :128]
   17dcc:	vadd.i64	q8, q9, q8
   17dd0:	vst1.64	{d16-d17}, [r1 :128]
   17dd4:	b	1265c <free@plt>
   17dd8:	andeq	r0, r0, r1
   17ddc:	andeq	r0, r0, r0
   17de0:	andeq	r0, r0, r1
   17de4:	andeq	r0, r0, r0

00017de8 <free_token_cpar@@Base>:
   17de8:	movw	r1, #432	; 0x1b0
   17dec:	add	r2, pc, #20
   17df0:	movt	r1, #3
   17df4:	vld1.64	{d16-d17}, [r2]
   17df8:	vld1.64	{d18-d19}, [r1 :128]
   17dfc:	vadd.i64	q8, q9, q8
   17e00:	vst1.64	{d16-d17}, [r1 :128]
   17e04:	b	1265c <free@plt>
   17e08:	andeq	r0, r0, r1
   17e0c:	andeq	r0, r0, r0
   17e10:	andeq	r0, r0, r1
   17e14:	andeq	r0, r0, r0

00017e18 <free_token_obra@@Base>:
   17e18:	movw	r1, #448	; 0x1c0
   17e1c:	add	r2, pc, #20
   17e20:	movt	r1, #3
   17e24:	vld1.64	{d16-d17}, [r2]
   17e28:	vld1.64	{d18-d19}, [r1 :128]
   17e2c:	vadd.i64	q8, q9, q8
   17e30:	vst1.64	{d16-d17}, [r1 :128]
   17e34:	b	1265c <free@plt>
   17e38:	andeq	r0, r0, r1
   17e3c:	andeq	r0, r0, r0
   17e40:	andeq	r0, r0, r1
   17e44:	andeq	r0, r0, r0

00017e48 <free_token_cbra@@Base>:
   17e48:	movw	r1, #464	; 0x1d0
   17e4c:	add	r2, pc, #20
   17e50:	movt	r1, #3
   17e54:	vld1.64	{d16-d17}, [r2]
   17e58:	vld1.64	{d18-d19}, [r1 :128]
   17e5c:	vadd.i64	q8, q9, q8
   17e60:	vst1.64	{d16-d17}, [r1 :128]
   17e64:	b	1265c <free@plt>
   17e68:	andeq	r0, r0, r1
   17e6c:	andeq	r0, r0, r0
   17e70:	andeq	r0, r0, r1
   17e74:	andeq	r0, r0, r0

00017e78 <free_token_return@@Base>:
   17e78:	movw	r1, #480	; 0x1e0
   17e7c:	add	r2, pc, #20
   17e80:	movt	r1, #3
   17e84:	vld1.64	{d16-d17}, [r2]
   17e88:	vld1.64	{d18-d19}, [r1 :128]
   17e8c:	vadd.i64	q8, q9, q8
   17e90:	vst1.64	{d16-d17}, [r1 :128]
   17e94:	b	1265c <free@plt>
   17e98:	andeq	r0, r0, r1
   17e9c:	andeq	r0, r0, r0
   17ea0:	andeq	r0, r0, r1
   17ea4:	andeq	r0, r0, r0

00017ea8 <free_token_semicolon@@Base>:
   17ea8:	movw	r1, #496	; 0x1f0
   17eac:	add	r2, pc, #20
   17eb0:	movt	r1, #3
   17eb4:	vld1.64	{d16-d17}, [r2]
   17eb8:	vld1.64	{d18-d19}, [r1 :128]
   17ebc:	vadd.i64	q8, q9, q8
   17ec0:	vst1.64	{d16-d17}, [r1 :128]
   17ec4:	b	1265c <free@plt>
   17ec8:	andeq	r0, r0, r1
   17ecc:	andeq	r0, r0, r0
   17ed0:	andeq	r0, r0, r1
   17ed4:	andeq	r0, r0, r0

00017ed8 <free_token_eof@@Base>:
   17ed8:	movw	r1, #512	; 0x200
   17edc:	add	r2, pc, #20
   17ee0:	movt	r1, #3
   17ee4:	vld1.64	{d16-d17}, [r2]
   17ee8:	vld1.64	{d18-d19}, [r1 :128]
   17eec:	vadd.i64	q8, q9, q8
   17ef0:	vst1.64	{d16-d17}, [r1 :128]
   17ef4:	b	1265c <free@plt>
   17ef8:	andeq	r0, r0, r1
   17efc:	andeq	r0, r0, r0
   17f00:	andeq	r0, r0, r1
   17f04:	andeq	r0, r0, r0

00017f08 <free_token_if@@Base>:
   17f08:	movw	r1, #528	; 0x210
   17f0c:	add	r2, pc, #20
   17f10:	movt	r1, #3
   17f14:	vld1.64	{d16-d17}, [r2]
   17f18:	vld1.64	{d18-d19}, [r1 :128]
   17f1c:	vadd.i64	q8, q9, q8
   17f20:	vst1.64	{d16-d17}, [r1 :128]
   17f24:	b	1265c <free@plt>
   17f28:	andeq	r0, r0, r1
   17f2c:	andeq	r0, r0, r0
   17f30:	andeq	r0, r0, r1
   17f34:	andeq	r0, r0, r0

00017f38 <free_token_else@@Base>:
   17f38:	movw	r1, #544	; 0x220
   17f3c:	add	r2, pc, #20
   17f40:	movt	r1, #3
   17f44:	vld1.64	{d16-d17}, [r2]
   17f48:	vld1.64	{d18-d19}, [r1 :128]
   17f4c:	vadd.i64	q8, q9, q8
   17f50:	vst1.64	{d16-d17}, [r1 :128]
   17f54:	b	1265c <free@plt>
   17f58:	andeq	r0, r0, r1
   17f5c:	andeq	r0, r0, r0
   17f60:	andeq	r0, r0, r1
   17f64:	andeq	r0, r0, r0

00017f68 <free_token_boolean_op@@Base>:
   17f68:	push	{r4, r5, fp, lr}
   17f6c:	add	fp, sp, #8
   17f70:	movw	r5, #560	; 0x230
   17f74:	mov	r4, r0
   17f78:	movt	r5, #3
   17f7c:	ldrd	r0, [r5]
   17f80:	adds	r0, r0, #1
   17f84:	adc	r1, r1, #0
   17f88:	strd	r0, [r5]
   17f8c:	ldr	r0, [r4, #4]
   17f90:	cmp	r0, #0
   17f94:	beq	17fb4 <free_token_boolean_op@@Base+0x4c>
   17f98:	ldrd	r2, [r5, #8]
   17f9c:	adds	r2, r2, #1
   17fa0:	adc	r3, r3, #0
   17fa4:	strd	r2, [r5, #8]
   17fa8:	bl	1265c <free@plt>
   17fac:	add	r0, r5, #24
   17fb0:	b	17fb8 <free_token_boolean_op@@Base+0x50>
   17fb4:	add	r0, r5, #16
   17fb8:	ldrd	r2, [r0]
   17fbc:	adds	r2, r2, #1
   17fc0:	adc	r3, r3, #0
   17fc4:	strd	r2, [r0]
   17fc8:	ldrd	r0, [r5, #32]
   17fcc:	adds	r0, r0, #1
   17fd0:	adc	r1, r1, #0
   17fd4:	strd	r0, [r5, #32]
   17fd8:	mov	r0, r4
   17fdc:	pop	{r4, r5, fp, lr}
   17fe0:	b	1265c <free@plt>
   17fe4:	push	{r4, r5, r6, lr}
   17fe8:	sub	sp, sp, #8
   17fec:	movw	r0, #55959	; 0xda97
   17ff0:	movw	r1, #52401	; 0xccb1
   17ff4:	movw	r2, #23366	; 0x5b46
   17ff8:	movt	r0, #1
   17ffc:	movt	r1, #1
   18000:	movt	r2, #47030	; 0xb7b6
   18004:	bl	19b00 <next@@Base+0x16a8>
   18008:	movw	r0, #57040	; 0xded0
   1800c:	movw	r6, #56512	; 0xdcc0
   18010:	mov	r5, #0
   18014:	movt	r0, #1
   18018:	movt	r6, #1
   1801c:	add	r4, r0, #4
   18020:	mov	r3, r6
   18024:	ldr	r0, [r3, r5]!
   18028:	ldr	r1, [r3, #16]
   1802c:	str	r1, [sp]
   18030:	ldmib	r3, {r1, r2}
   18034:	ldrb	r3, [r3, #12]
   18038:	bl	1a220 <next@@Base+0x1dc8>
   1803c:	ldrd	r0, [r4, #-4]
   18040:	bl	1aad4 <next@@Base+0x267c>
   18044:	add	r5, r5, #20
   18048:	add	r4, r4, #8
   1804c:	cmp	r5, #520	; 0x208
   18050:	bne	18020 <free_token_boolean_op@@Base+0xb8>
   18054:	bl	1b25c <next@@Base+0x2e04>
   18058:	add	sp, sp, #8
   1805c:	pop	{r4, r5, r6, lr}
   18060:	b	1bfc8 <next@@Base+0x3b70>
   18064:	push	{fp, lr}
   18068:	bl	17fe4 <free_token_boolean_op@@Base+0x7c>
   1806c:	movw	r0, #176	; 0xb0
   18070:	vmov.i32	q8, #0	; 0x00000000
   18074:	mov	r1, #0
   18078:	movt	r0, #3
   1807c:	vst1.64	{d16-d17}, [r0 :128]
   18080:	movw	r0, #160	; 0xa0
   18084:	movt	r0, #3
   18088:	vst1.64	{d16-d17}, [r0 :128]
   1808c:	movw	r0, #192	; 0xc0
   18090:	movt	r0, #3
   18094:	vst1.64	{d16-d17}, [r0 :128]
   18098:	movw	r0, #208	; 0xd0
   1809c:	movt	r0, #3
   180a0:	vst1.64	{d16-d17}, [r0 :128]
   180a4:	movw	r0, #224	; 0xe0
   180a8:	movt	r0, #3
   180ac:	vst1.64	{d16-d17}, [r0 :128]
   180b0:	movw	r0, #240	; 0xf0
   180b4:	movt	r0, #3
   180b8:	vst1.64	{d16-d17}, [r0 :128]
   180bc:	movw	r0, #256	; 0x100
   180c0:	movt	r0, #3
   180c4:	vst1.64	{d16-d17}, [r0 :128]
   180c8:	movw	r0, #272	; 0x110
   180cc:	movt	r0, #3
   180d0:	vst1.64	{d16-d17}, [r0 :128]
   180d4:	movw	r0, #288	; 0x120
   180d8:	movt	r0, #3
   180dc:	vst1.64	{d16-d17}, [r0 :128]
   180e0:	movw	r0, #304	; 0x130
   180e4:	movt	r0, #3
   180e8:	vst1.64	{d16-d17}, [r0 :128]
   180ec:	movw	r0, #320	; 0x140
   180f0:	movt	r0, #3
   180f4:	vst1.64	{d16-d17}, [r0 :128]
   180f8:	movw	r0, #336	; 0x150
   180fc:	movt	r0, #3
   18100:	vst1.64	{d16-d17}, [r0 :128]
   18104:	movw	r0, #352	; 0x160
   18108:	movt	r0, #3
   1810c:	vst1.64	{d16-d17}, [r0 :128]
   18110:	movw	r0, #368	; 0x170
   18114:	movt	r0, #3
   18118:	vst1.64	{d16-d17}, [r0 :128]
   1811c:	movw	r0, #384	; 0x180
   18120:	movt	r0, #3
   18124:	vst1.64	{d16-d17}, [r0 :128]
   18128:	movw	r0, #400	; 0x190
   1812c:	movt	r0, #3
   18130:	vst1.64	{d16-d17}, [r0 :128]
   18134:	movw	r0, #416	; 0x1a0
   18138:	movt	r0, #3
   1813c:	vst1.64	{d16-d17}, [r0 :128]
   18140:	movw	r0, #432	; 0x1b0
   18144:	movt	r0, #3
   18148:	vst1.64	{d16-d17}, [r0 :128]
   1814c:	movw	r0, #448	; 0x1c0
   18150:	movt	r0, #3
   18154:	vst1.64	{d16-d17}, [r0 :128]
   18158:	movw	r0, #464	; 0x1d0
   1815c:	movt	r0, #3
   18160:	vst1.64	{d16-d17}, [r0 :128]
   18164:	movw	r0, #480	; 0x1e0
   18168:	movt	r0, #3
   1816c:	vst1.64	{d16-d17}, [r0 :128]
   18170:	movw	r0, #496	; 0x1f0
   18174:	movt	r0, #3
   18178:	vst1.64	{d16-d17}, [r0 :128]
   1817c:	movw	r0, #512	; 0x200
   18180:	movt	r0, #3
   18184:	vst1.64	{d16-d17}, [r0 :128]
   18188:	movw	r0, #528	; 0x210
   1818c:	movt	r0, #3
   18190:	vst1.64	{d16-d17}, [r0 :128]
   18194:	movw	r0, #544	; 0x220
   18198:	movt	r0, #3
   1819c:	vst1.64	{d16-d17}, [r0 :128]
   181a0:	movw	r0, #560	; 0x230
   181a4:	movt	r0, #3
   181a8:	add	r2, r0, #16
   181ac:	str	r1, [r0, #32]
   181b0:	vst1.64	{d16-d17}, [r2 :128]
   181b4:	mov	r2, #36	; 0x24
   181b8:	vst1.64	{d16-d17}, [r0 :128], r2
   181bc:	str	r1, [r0]
   181c0:	pop	{fp, pc}
   181c4:	movw	r0, #32740	; 0x7fe4
   181c8:	movw	r1, #32868	; 0x8064
   181cc:	movt	r0, #1
   181d0:	movt	r1, #1
   181d4:	b	1c47c <__gcov_flush@@Base+0xb8>

000181d8 <init_lexer@@Base>:
   181d8:	movw	r2, #608	; 0x260
   181dc:	add	r3, pc, #36	; 0x24
   181e0:	movt	r2, #3
   181e4:	vld1.64	{d16-d17}, [r3]
   181e8:	vld1.64	{d18-d19}, [r2 :128]
   181ec:	vadd.i64	q8, q9, q8
   181f0:	vst1.64	{d16-d17}, [r2 :128]
   181f4:	mov	r2, #0
   181f8:	stm	r0, {r1, r2}
   181fc:	str	r2, [r0, #8]
   18200:	bx	lr
   18204:	nop	{0}
   18208:	andeq	r0, r0, r1
   1820c:	andeq	r0, r0, r0
   18210:	andeq	r0, r0, r1
   18214:	andeq	r0, r0, r0

00018218 <destroy_lexer@@Base>:
   18218:	push	{r4, sl, fp, lr}
   1821c:	add	fp, sp, #8
   18220:	movw	r4, #624	; 0x270
   18224:	movt	r4, #3
   18228:	ldrd	r2, [r4]
   1822c:	adds	r2, r2, #1
   18230:	adc	r3, r3, #0
   18234:	strd	r2, [r4]
   18238:	ldr	r0, [r0, #4]
   1823c:	cmp	r0, #0
   18240:	beq	1827c <destroy_lexer@@Base+0x64>
   18244:	movw	r1, #672	; 0x2a0
   18248:	add	r2, pc, #88	; 0x58
   1824c:	movt	r1, #3
   18250:	vld1.64	{d16-d17}, [r2]
   18254:	ldrd	r2, [r4, #8]
   18258:	vld1.64	{d18-d19}, [r1 :128]
   1825c:	adds	r2, r2, #1
   18260:	adc	r3, r3, #0
   18264:	strd	r2, [r4, #8]
   18268:	vadd.i64	q8, q9, q8
   1826c:	vst1.64	{d16-d17}, [r1 :128]
   18270:	bl	1265c <free@plt>
   18274:	add	r0, r4, #24
   18278:	b	18280 <destroy_lexer@@Base+0x68>
   1827c:	add	r0, r4, #16
   18280:	ldrd	r2, [r0]
   18284:	adds	r2, r2, #1
   18288:	adc	r3, r3, #0
   1828c:	strd	r2, [r0]
   18290:	ldrd	r0, [r4, #32]
   18294:	adds	r0, r0, #1
   18298:	adc	r1, r1, #0
   1829c:	strd	r0, [r4, #32]
   182a0:	pop	{r4, sl, fp, pc}
   182a4:	nop	{0}
   182a8:	andeq	r0, r0, r1
   182ac:	andeq	r0, r0, r0
   182b0:	andeq	r0, r0, r1
   182b4:	andeq	r0, r0, r0

000182b8 <free_stack_base@@Base>:
   182b8:	movw	r1, #672	; 0x2a0
   182bc:	add	r2, pc, #20
   182c0:	movt	r1, #3
   182c4:	vld1.64	{d16-d17}, [r2]
   182c8:	vld1.64	{d18-d19}, [r1 :128]
   182cc:	vadd.i64	q8, q9, q8
   182d0:	vst1.64	{d16-d17}, [r1 :128]
   182d4:	b	1265c <free@plt>
   182d8:	andeq	r0, r0, r1
   182dc:	andeq	r0, r0, r0
   182e0:	andeq	r0, r0, r1
   182e4:	andeq	r0, r0, r0

000182e8 <push_back@@Base>:
   182e8:	push	{r4, r5, fp, lr}
   182ec:	add	fp, sp, #8
   182f0:	mov	r5, r0
   182f4:	movw	r0, #688	; 0x2b0
   182f8:	mov	r4, r1
   182fc:	add	r1, pc, #44	; 0x2c
   18300:	movt	r0, #3
   18304:	vld1.64	{d16-d17}, [r1]
   18308:	vld1.64	{d18-d19}, [r0 :128]
   1830c:	vadd.i64	q8, q9, q8
   18310:	vst1.64	{d16-d17}, [r0 :128]
   18314:	mov	r0, #8
   18318:	bl	126ec <malloc@plt>
   1831c:	ldr	r1, [r5, #4]
   18320:	stm	r0, {r1, r4}
   18324:	str	r0, [r5, #4]
   18328:	pop	{r4, r5, fp, pc}
   1832c:	nop	{0}
   18330:	andeq	r0, r0, r1
   18334:	andeq	r0, r0, r0
   18338:	andeq	r0, r0, r1
   1833c:	andeq	r0, r0, r0

00018340 <get_char@@Base>:
   18340:	movw	r1, #704	; 0x2c0
   18344:	add	r2, pc, #44	; 0x2c
   18348:	movt	r1, #3
   1834c:	vld1.64	{d16-d17}, [r2]
   18350:	vld1.64	{d18-d19}, [r1 :128]
   18354:	vadd.i64	q8, q9, q8
   18358:	vst1.64	{d16-d17}, [r1 :128]
   1835c:	ldr	r2, [r0, #8]
   18360:	ldr	r1, [r0]
   18364:	add	r3, r2, #1
   18368:	str	r3, [r0, #8]
   1836c:	ldrb	r0, [r1, r2]
   18370:	bx	lr
   18374:	nop	{0}
   18378:	andeq	r0, r0, r1
   1837c:	andeq	r0, r0, r0
   18380:	andeq	r0, r0, r1
   18384:	andeq	r0, r0, r0

00018388 <push_back_chars@@Base>:
   18388:	push	{r4, r5, r6, r7, fp, lr}
   1838c:	add	fp, sp, #16
   18390:	movw	r2, #720	; 0x2d0
   18394:	movt	r2, #3
   18398:	ldrd	r4, [r2]
   1839c:	adds	r4, r4, #1
   183a0:	adc	r5, r5, #0
   183a4:	strd	r4, [r2]
   183a8:	ldr	r3, [r0, #8]
   183ac:	cmp	r3, r1
   183b0:	bcc	183e4 <push_back_chars@@Base+0x5c>
   183b4:	ldrd	r4, [r2, #8]
   183b8:	ldrd	r6, [r2, #24]
   183bc:	sub	r1, r3, r1
   183c0:	adds	r4, r4, #1
   183c4:	adc	r5, r5, #0
   183c8:	adds	r6, r6, #1
   183cc:	adc	r7, r7, #0
   183d0:	str	r6, [r2, #24]
   183d4:	strd	r4, [r2, #8]
   183d8:	str	r7, [r2, #28]
   183dc:	str	r1, [r0, #8]
   183e0:	pop	{r4, r5, r6, r7, fp, pc}
   183e4:	ldrd	r0, [r2, #16]
   183e8:	adds	r0, r0, #1
   183ec:	adc	r1, r1, #0
   183f0:	strd	r0, [r2, #16]
   183f4:	movw	r0, #61664	; 0xf0e0
   183f8:	mov	r1, #32
   183fc:	mov	r2, #1
   18400:	movt	r0, #2
   18404:	ldr	r3, [r0]
   18408:	movw	r0, #57248	; 0xdfa0
   1840c:	movt	r0, #1
   18410:	bl	126c8 <fwrite@plt>
   18414:	mov	r0, #1
   18418:	bl	12728 <exit@plt>
   1841c:	nop	{0}

00018420 <push_back_one_char@@Base>:
   18420:	movw	r1, #752	; 0x2f0
   18424:	add	r2, pc, #28
   18428:	movt	r1, #3
   1842c:	vld1.64	{d16-d17}, [r2]
   18430:	vld1.64	{d18-d19}, [r1 :128]
   18434:	vadd.i64	q8, q9, q8
   18438:	vst1.64	{d16-d17}, [r1 :128]
   1843c:	mov	r1, #1
   18440:	b	18388 <push_back_chars@@Base>
   18444:	nop	{0}
   18448:	andeq	r0, r0, r1
   1844c:	andeq	r0, r0, r0
   18450:	andeq	r0, r0, r1
   18454:	andeq	r0, r0, r0

00018458 <next@@Base>:
   18458:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1845c:	add	fp, sp, #28
   18460:	sub	sp, sp, #524	; 0x20c
   18464:	movw	r7, #768	; 0x300
   18468:	mov	r4, r0
   1846c:	movt	r7, #3
   18470:	ldrd	r0, [r7]
   18474:	adds	r0, r0, #1
   18478:	adc	r1, r1, #0
   1847c:	strd	r0, [r7]
   18480:	ldr	r0, [r4, #4]
   18484:	cmp	r0, #0
   18488:	beq	184d8 <next@@Base+0x80>
   1848c:	ldrd	r2, [r7, #8]
   18490:	adds	r2, r2, #1
   18494:	adc	r3, r3, #0
   18498:	strd	r2, [r7, #8]
   1849c:	ldr	r1, [r0]
   184a0:	str	r1, [r4, #4]
   184a4:	mov	r1, #0
   184a8:	ldr	r6, [r0, #4]
   184ac:	str	r1, [r0, #4]
   184b0:	movw	r1, #672	; 0x2a0
   184b4:	add	r2, pc, #996	; 0x3e4
   184b8:	movt	r1, #3
   184bc:	vld1.64	{d16-d17}, [r2]
   184c0:	vld1.64	{d18-d19}, [r1 :128]
   184c4:	vadd.i64	q8, q9, q8
   184c8:	vst1.64	{d16-d17}, [r1 :128]
   184cc:	bl	1265c <free@plt>
   184d0:	add	r0, r7, #24
   184d4:	b	189bc <next@@Base+0x564>
   184d8:	movw	lr, #704	; 0x2c0
   184dc:	add	r1, pc, #956	; 0x3bc
   184e0:	ldrd	r2, [r7, #16]
   184e4:	movt	lr, #3
   184e8:	vld1.64	{d16-d17}, [r1]
   184ec:	vld1.64	{d18-d19}, [lr :128]
   184f0:	adds	r2, r2, #1
   184f4:	adc	r3, r3, #0
   184f8:	strd	r2, [r7, #16]
   184fc:	vadd.i64	q8, q9, q8
   18500:	vst1.64	{d16-d17}, [lr :128]
   18504:	ldr	r2, [r4, #8]
   18508:	ldr	r1, [r4]
   1850c:	add	r3, r2, #1
   18510:	str	r3, [r4, #8]
   18514:	ldrb	r5, [r1, r2]
   18518:	ldrd	r2, [r7, #32]
   1851c:	adds	r2, r2, #1
   18520:	adc	r3, r3, #0
   18524:	cmp	r5, #0
   18528:	strd	r2, [r7, #32]
   1852c:	beq	18998 <next@@Base+0x540>
   18530:	mov	r2, #0
   18534:	add	r8, r7, #56	; 0x38
   18538:	add	r9, r7, #112	; 0x70
   1853c:	add	ip, sp, #8
   18540:	mov	sl, #0
   18544:	ldr	r1, [r7, #40]	; 0x28
   18548:	ldr	r3, [r7, #44]	; 0x2c
   1854c:	adds	r1, r1, #1
   18550:	adc	r3, r3, #0
   18554:	cmp	r2, #5
   18558:	str	r1, [r7, #40]	; 0x28
   1855c:	str	r3, [r7, #44]	; 0x2c
   18560:	bhi	185cc <next@@Base+0x174>
   18564:	add	r1, pc, #0
   18568:	ldr	pc, [r1, r2, lsl #2]
   1856c:	andeq	r8, r1, r4, lsl #11
   18570:	strdeq	r8, [r1], -r0
   18574:	andeq	r8, r1, ip, lsr #27
   18578:	andeq	r8, r1, r0, lsr #21
   1857c:	ldrdeq	r8, [r1], -ip
   18580:	andeq	r8, r1, r0, asr lr
   18584:	ldrd	r2, [r7, #64]	; 0x40
   18588:	mov	r1, r9
   1858c:	adds	r2, r2, #1
   18590:	adc	r3, r3, #0
   18594:	strd	r2, [r7, #64]	; 0x40
   18598:	uxtb	r2, r5
   1859c:	cmp	r2, #9
   185a0:	beq	185f8 <next@@Base+0x1a0>
   185a4:	ldr	r1, [r7, #120]	; 0x78
   185a8:	ldr	r3, [r7, #124]	; 0x7c
   185ac:	adds	r1, r1, #1
   185b0:	adc	r3, r3, #0
   185b4:	cmp	r2, #32
   185b8:	str	r1, [r7, #120]	; 0x78
   185bc:	str	r3, [r7, #124]	; 0x7c
   185c0:	bne	185d4 <next@@Base+0x17c>
   185c4:	add	r1, r7, #128	; 0x80
   185c8:	b	185f8 <next@@Base+0x1a0>
   185cc:	mov	r1, r8
   185d0:	b	1863c <next@@Base+0x1e4>
   185d4:	ldr	r1, [r7, #136]	; 0x88
   185d8:	ldr	r3, [r7, #140]	; 0x8c
   185dc:	adds	r1, r1, #1
   185e0:	adc	r3, r3, #0
   185e4:	cmp	r2, #10
   185e8:	str	r1, [r7, #136]	; 0x88
   185ec:	str	r3, [r7, #140]	; 0x8c
   185f0:	bne	18670 <next@@Base+0x218>
   185f4:	add	r1, r7, #144	; 0x90
   185f8:	ldrd	r2, [r1]
   185fc:	adds	r2, r2, #1
   18600:	adc	r3, r3, #0
   18604:	strd	r2, [r1]
   18608:	add	r1, pc, #656	; 0x290
   1860c:	vld1.64	{d18-d19}, [lr :128]
   18610:	vld1.64	{d16-d17}, [r1]
   18614:	vadd.i64	q8, q9, q8
   18618:	vst1.64	{d16-d17}, [lr :128]
   1861c:	ldr	r3, [r4, #8]
   18620:	ldr	r2, [r4]
   18624:	add	r1, r3, #1
   18628:	add	r5, r2, r3
   1862c:	mov	r2, #0
   18630:	str	r1, [r4, #8]
   18634:	add	r1, r7, #160	; 0xa0
   18638:	ldrb	r5, [r5]
   1863c:	ldm	r1, {r0, r3}
   18640:	adds	r0, r0, #1
   18644:	adc	r3, r3, #0
   18648:	stm	r1, {r0, r3}
   1864c:	ldr	r0, [r7, #984]	; 0x3d8
   18650:	ldr	r1, [r7, #988]	; 0x3dc
   18654:	adds	r0, r0, #1
   18658:	adc	r1, r1, #0
   1865c:	tst	r5, #255	; 0xff
   18660:	str	r0, [r7, #984]	; 0x3d8
   18664:	str	r1, [r7, #988]	; 0x3dc
   18668:	bne	18544 <next@@Base+0xec>
   1866c:	b	18998 <next@@Base+0x540>
   18670:	ldr	r1, [r7, #152]	; 0x98
   18674:	ldr	r3, [r7, #156]	; 0x9c
   18678:	adds	r1, r1, #1
   1867c:	adc	r3, r3, #0
   18680:	cmp	r2, #48	; 0x30
   18684:	str	r1, [r7, #152]	; 0x98
   18688:	str	r3, [r7, #156]	; 0x9c
   1868c:	beq	19008 <next@@Base+0xbb0>
   18690:	ldr	r1, [r7, #176]	; 0xb0
   18694:	ldr	r3, [r7, #180]	; 0xb4
   18698:	adds	r1, r1, #1
   1869c:	adc	r3, r3, #0
   186a0:	cmp	r2, #49	; 0x31
   186a4:	str	r1, [r7, #176]	; 0xb0
   186a8:	str	r3, [r7, #180]	; 0xb4
   186ac:	bcc	19034 <next@@Base+0xbdc>
   186b0:	ldr	r1, [r7, #192]	; 0xc0
   186b4:	ldr	r3, [r7, #196]	; 0xc4
   186b8:	adds	r1, r1, #1
   186bc:	adc	r3, r3, #0
   186c0:	cmp	r2, #57	; 0x39
   186c4:	str	r1, [r7, #192]	; 0xc0
   186c8:	str	r3, [r7, #196]	; 0xc4
   186cc:	bhi	1871c <next@@Base+0x2c4>
   186d0:	add	r1, pc, #456	; 0x1c8
   186d4:	vld1.64	{d18-d19}, [lr :128]
   186d8:	ldrd	r2, [r7, #208]	; 0xd0
   186dc:	strb	r5, [ip, sl]
   186e0:	add	sl, sl, #1
   186e4:	vld1.64	{d16-d17}, [r1]
   186e8:	adds	r2, r2, #1
   186ec:	adc	r3, r3, #0
   186f0:	vadd.i64	q8, q9, q8
   186f4:	strd	r2, [r7, #208]	; 0xd0
   186f8:	vst1.64	{d16-d17}, [lr :128]
   186fc:	ldr	r3, [r4, #8]
   18700:	ldr	r2, [r4]
   18704:	add	r1, r3, #1
   18708:	add	r5, r2, r3
   1870c:	mov	r2, #1
   18710:	str	r1, [r4, #8]
   18714:	add	r1, r7, #224	; 0xe0
   18718:	b	18638 <next@@Base+0x1e0>
   1871c:	ldrd	r0, [r7, #240]	; 0xf0
   18720:	ldr	r6, [r7, #216]	; 0xd8
   18724:	ldr	r3, [r7, #220]	; 0xdc
   18728:	adds	r0, r0, #1
   1872c:	str	r0, [r7, #240]	; 0xf0
   18730:	adc	r1, r1, #0
   18734:	adds	r6, r6, #1
   18738:	ldr	r0, [r7, #264]	; 0x108
   1873c:	adc	r3, r3, #0
   18740:	adds	r0, r0, #1
   18744:	str	r0, [r7, #264]	; 0x108
   18748:	str	r6, [r7, #216]	; 0xd8
   1874c:	str	r3, [r7, #220]	; 0xdc
   18750:	str	r1, [r7, #244]	; 0xf4
   18754:	ldr	r0, [r7, #268]	; 0x10c
   18758:	adc	r0, r0, #0
   1875c:	cmp	r2, #123	; 0x7b
   18760:	str	r0, [r7, #268]	; 0x10c
   18764:	beq	190bc <next@@Base+0xc64>
   18768:	ldr	r0, [r7, #288]	; 0x120
   1876c:	ldr	r1, [r7, #292]	; 0x124
   18770:	adds	r0, r0, #1
   18774:	adc	r1, r1, #0
   18778:	cmp	r2, #125	; 0x7d
   1877c:	str	r0, [r7, #288]	; 0x120
   18780:	str	r1, [r7, #292]	; 0x124
   18784:	beq	190ec <next@@Base+0xc94>
   18788:	ldr	r0, [r7, #312]	; 0x138
   1878c:	ldr	r1, [r7, #316]	; 0x13c
   18790:	adds	r0, r0, #1
   18794:	adc	r1, r1, #0
   18798:	cmp	r2, #59	; 0x3b
   1879c:	str	r0, [r7, #312]	; 0x138
   187a0:	str	r1, [r7, #316]	; 0x13c
   187a4:	beq	1911c <next@@Base+0xcc4>
   187a8:	ldr	r0, [r7, #336]	; 0x150
   187ac:	ldr	r1, [r7, #340]	; 0x154
   187b0:	adds	r0, r0, #1
   187b4:	adc	r1, r1, #0
   187b8:	cmp	r2, #101	; 0x65
   187bc:	str	r0, [r7, #336]	; 0x150
   187c0:	str	r1, [r7, #340]	; 0x154
   187c4:	bne	18820 <next@@Base+0x3c8>
   187c8:	add	r0, pc, #208	; 0xd0
   187cc:	vld1.64	{d18-d19}, [lr :128]
   187d0:	ldr	r1, [r7, #356]	; 0x164
   187d4:	vld1.64	{d16-d17}, [r0]
   187d8:	mov	r0, #101	; 0x65
   187dc:	strb	r0, [ip, sl]
   187e0:	ldr	r0, [r7, #352]	; 0x160
   187e4:	add	sl, sl, #1
   187e8:	vadd.i64	q8, q9, q8
   187ec:	adds	r0, r0, #1
   187f0:	adc	r1, r1, #0
   187f4:	str	r0, [r7, #352]	; 0x160
   187f8:	str	r1, [r7, #356]	; 0x164
   187fc:	vst1.64	{d16-d17}, [lr :128]
   18800:	ldr	r2, [r4, #8]
   18804:	ldr	r0, [r4]
   18808:	add	r1, r2, #1
   1880c:	add	r5, r0, r2
   18810:	mov	r2, #5
   18814:	str	r1, [r4, #8]
   18818:	add	r1, r7, #368	; 0x170
   1881c:	b	18638 <next@@Base+0x1e0>
   18820:	ldr	r0, [r7, #360]	; 0x168
   18824:	ldr	r1, [r7, #364]	; 0x16c
   18828:	mov	r3, #109	; 0x6d
   1882c:	mov	r6, #114	; 0x72
   18830:	adds	r0, r0, #1
   18834:	adc	r1, r1, #0
   18838:	cmp	r2, #105	; 0x69
   1883c:	str	r0, [r7, #360]	; 0x168
   18840:	str	r1, [r7, #364]	; 0x16c
   18844:	mov	r1, #105	; 0x69
   18848:	bne	188b0 <next@@Base+0x458>
   1884c:	add	r0, pc, #76	; 0x4c
   18850:	vld1.64	{d18-d19}, [lr :128]
   18854:	strb	r1, [ip, sl]
   18858:	ldr	r1, [r7, #380]	; 0x17c
   1885c:	add	sl, sl, #1
   18860:	vld1.64	{d16-d17}, [r0]
   18864:	ldr	r0, [r7, #376]	; 0x178
   18868:	adds	r0, r0, #1
   1886c:	vadd.i64	q8, q9, q8
   18870:	adc	r1, r1, #0
   18874:	str	r0, [r7, #376]	; 0x178
   18878:	str	r1, [r7, #380]	; 0x17c
   1887c:	vst1.64	{d16-d17}, [lr :128]
   18880:	ldr	r2, [r4, #8]
   18884:	ldr	r0, [r4]
   18888:	add	r1, r2, #1
   1888c:	add	r5, r0, r2
   18890:	mov	r2, #2
   18894:	str	r1, [r4, #8]
   18898:	add	r1, r7, #392	; 0x188
   1889c:	b	18638 <next@@Base+0x1e0>
   188a0:	andeq	r0, r0, r1
   188a4:	andeq	r0, r0, r0
   188a8:	andeq	r0, r0, r1
   188ac:	andeq	r0, r0, r0
   188b0:	ldr	r0, [r7, #384]	; 0x180
   188b4:	ldr	r1, [r7, #388]	; 0x184
   188b8:	adds	r0, r0, #1
   188bc:	adc	r1, r1, #0
   188c0:	cmp	r2, #109	; 0x6d
   188c4:	str	r0, [r7, #384]	; 0x180
   188c8:	str	r1, [r7, #388]	; 0x184
   188cc:	bne	18924 <next@@Base+0x4cc>
   188d0:	sub	r0, pc, #56	; 0x38
   188d4:	vld1.64	{d18-d19}, [lr :128]
   188d8:	ldr	r1, [r7, #404]	; 0x194
   188dc:	strb	r3, [ip, sl]
   188e0:	add	sl, sl, #1
   188e4:	vld1.64	{d16-d17}, [r0]
   188e8:	ldr	r0, [r7, #400]	; 0x190
   188ec:	adds	r0, r0, #1
   188f0:	vadd.i64	q8, q9, q8
   188f4:	adc	r1, r1, #0
   188f8:	str	r0, [r7, #400]	; 0x190
   188fc:	str	r1, [r7, #404]	; 0x194
   18900:	vst1.64	{d16-d17}, [lr :128]
   18904:	ldr	r2, [r4, #8]
   18908:	ldr	r0, [r4]
   1890c:	add	r1, r2, #1
   18910:	add	r5, r0, r2
   18914:	mov	r2, #3
   18918:	str	r1, [r4, #8]
   1891c:	add	r1, r7, #416	; 0x1a0
   18920:	b	18638 <next@@Base+0x1e0>
   18924:	ldr	r0, [r7, #408]	; 0x198
   18928:	ldr	r1, [r7, #412]	; 0x19c
   1892c:	adds	r0, r0, #1
   18930:	adc	r1, r1, #0
   18934:	cmp	r2, #114	; 0x72
   18938:	str	r0, [r7, #408]	; 0x198
   1893c:	str	r1, [r7, #412]	; 0x19c
   18940:	bne	19474 <next@@Base+0x101c>
   18944:	sub	r0, pc, #172	; 0xac
   18948:	vld1.64	{d18-d19}, [lr :128]
   1894c:	ldr	r1, [r7, #428]	; 0x1ac
   18950:	strb	r6, [ip, sl]
   18954:	add	sl, sl, #1
   18958:	vld1.64	{d16-d17}, [r0]
   1895c:	ldr	r0, [r7, #424]	; 0x1a8
   18960:	adds	r0, r0, #1
   18964:	vadd.i64	q8, q9, q8
   18968:	adc	r1, r1, #0
   1896c:	str	r0, [r7, #424]	; 0x1a8
   18970:	str	r1, [r7, #428]	; 0x1ac
   18974:	vst1.64	{d16-d17}, [lr :128]
   18978:	ldr	r2, [r4, #8]
   1897c:	ldr	r0, [r4]
   18980:	add	r1, r2, #1
   18984:	add	r5, r0, r2
   18988:	mov	r2, #4
   1898c:	str	r1, [r4, #8]
   18990:	add	r1, r7, #440	; 0x1b8
   18994:	b	18638 <next@@Base+0x1e0>
   18998:	ldrd	r0, [r7, #48]	; 0x30
   1899c:	adds	r0, r0, #1
   189a0:	adc	r1, r1, #0
   189a4:	strd	r0, [r7, #48]	; 0x30
   189a8:	mov	r0, #4
   189ac:	bl	126ec <malloc@plt>
   189b0:	mov	r6, r0
   189b4:	bl	17c40 <init_token_eof@@Base>
   189b8:	add	r0, r7, #992	; 0x3e0
   189bc:	ldrd	r2, [r0]
   189c0:	adds	r2, r2, #1
   189c4:	adc	r3, r3, #0
   189c8:	strd	r2, [r0]
   189cc:	ldr	r0, [r7, #1000]	; 0x3e8
   189d0:	ldr	r1, [r7, #1004]	; 0x3ec
   189d4:	adds	r0, r0, #1
   189d8:	adc	r1, r1, #0
   189dc:	str	r0, [r7, #1000]	; 0x3e8
   189e0:	mov	r0, r6
   189e4:	str	r1, [r7, #1004]	; 0x3ec
   189e8:	sub	sp, fp, #28
   189ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189f0:	ldrd	r2, [r7, #72]	; 0x48
   189f4:	sub	r1, r5, #48	; 0x30
   189f8:	uxtb	r1, r1
   189fc:	adds	r2, r2, #1
   18a00:	adc	r3, r3, #0
   18a04:	cmp	r1, #9
   18a08:	strd	r2, [r7, #72]	; 0x48
   18a0c:	bhi	18f58 <next@@Base+0xb00>
   18a10:	ldrd	r2, [lr]
   18a14:	mov	r8, ip
   18a18:	ldr	r0, [r7, #696]	; 0x2b8
   18a1c:	adds	r2, r2, #1
   18a20:	ldr	r1, [r7, #700]	; 0x2bc
   18a24:	strb	r5, [r8, sl]
   18a28:	add	sl, sl, #1
   18a2c:	adc	r3, r3, #0
   18a30:	str	r2, [lr]
   18a34:	str	r3, [lr, #4]
   18a38:	ldr	r6, [lr, #8]
   18a3c:	adds	r0, r0, #1
   18a40:	str	r0, [r7, #696]	; 0x2b8
   18a44:	adc	r0, r1, #0
   18a48:	ldr	r1, [lr, #12]
   18a4c:	str	r0, [r7, #700]	; 0x2bc
   18a50:	adds	r6, r6, #1
   18a54:	str	r6, [lr, #8]
   18a58:	adc	r0, r1, #0
   18a5c:	str	r0, [lr, #12]
   18a60:	ldr	r1, [r4, #8]
   18a64:	ldr	r0, [r4]
   18a68:	add	r6, r1, #1
   18a6c:	str	r6, [r4, #8]
   18a70:	ldrb	r5, [r0, r1]
   18a74:	ldr	r0, [r7, #712]	; 0x2c8
   18a78:	ldr	r1, [r7, #716]	; 0x2cc
   18a7c:	adds	r0, r0, #1
   18a80:	str	r0, [r7, #712]	; 0x2c8
   18a84:	sub	r0, r5, #48	; 0x30
   18a88:	adc	r1, r1, #0
   18a8c:	uxtb	r0, r0
   18a90:	str	r1, [r7, #716]	; 0x2cc
   18a94:	cmp	r0, #10
   18a98:	bcc	18a18 <next@@Base+0x5c0>
   18a9c:	b	18f5c <next@@Base+0xb04>
   18aa0:	ldrd	r0, [r7, #88]	; 0x58
   18aa4:	adds	r0, r0, #1
   18aa8:	adc	r1, r1, #0
   18aac:	strd	r0, [r7, #88]	; 0x58
   18ab0:	uxtb	r0, r5
   18ab4:	cmp	r0, #97	; 0x61
   18ab8:	bne	19764 <next@@Base+0x130c>
   18abc:	sub	r0, pc, #548	; 0x224
   18ac0:	vld1.64	{d16-d17}, [lr :128]
   18ac4:	ldr	r1, [r7, #796]	; 0x31c
   18ac8:	vld1.64	{d18-d19}, [r0]
   18acc:	mov	r0, #97	; 0x61
   18ad0:	strb	r0, [ip, sl]
   18ad4:	ldr	r0, [r7, #792]	; 0x318
   18ad8:	vadd.i64	q9, q8, q9
   18adc:	adds	r0, r0, #1
   18ae0:	adc	r1, r1, #0
   18ae4:	str	r0, [r7, #792]	; 0x318
   18ae8:	str	r1, [r7, #796]	; 0x31c
   18aec:	vst1.64	{d18-d19}, [lr :128]
   18af0:	ldr	r1, [r4, #8]
   18af4:	ldr	r0, [r4]
   18af8:	add	r2, r1, #1
   18afc:	str	r2, [r4, #8]
   18b00:	ldrb	r0, [r0, r1]
   18b04:	cmp	r0, #105	; 0x69
   18b08:	bne	19784 <next@@Base+0x132c>
   18b0c:	add	r1, sl, ip
   18b10:	mov	r0, #105	; 0x69
   18b14:	ldr	r2, [r7, #812]	; 0x32c
   18b18:	mov	r5, ip
   18b1c:	strb	r0, [r1, #1]
   18b20:	vmov.32	r0, d16[0]
   18b24:	adds	r0, r0, #2
   18b28:	str	r0, [lr]
   18b2c:	vmov.32	r0, d16[1]
   18b30:	adc	r0, r0, #0
   18b34:	str	r0, [lr, #4]
   18b38:	ldr	r0, [r7, #808]	; 0x328
   18b3c:	adds	r0, r0, #1
   18b40:	str	r0, [r7, #808]	; 0x328
   18b44:	adc	r0, r2, #0
   18b48:	ldrd	r2, [lr, #8]
   18b4c:	str	r0, [r7, #812]	; 0x32c
   18b50:	adds	r2, r2, #1
   18b54:	adc	r0, r3, #0
   18b58:	str	r2, [lr, #8]
   18b5c:	str	r0, [lr, #12]
   18b60:	ldr	r2, [r4, #8]
   18b64:	ldr	r0, [r4]
   18b68:	add	r3, r2, #1
   18b6c:	str	r3, [r4, #8]
   18b70:	ldrb	r0, [r0, r2]
   18b74:	cmp	r0, #110	; 0x6e
   18b78:	bne	197a4 <next@@Base+0x134c>
   18b7c:	mov	r0, #110	; 0x6e
   18b80:	strh	r0, [r1, #2]
   18b84:	ldr	r0, [r7, #824]	; 0x338
   18b88:	ldr	r1, [r7, #828]	; 0x33c
   18b8c:	adds	r0, r0, #1
   18b90:	adc	r1, r1, #0
   18b94:	str	r0, [r7, #824]	; 0x338
   18b98:	add	r0, sl, #4
   18b9c:	str	r1, [r7, #828]	; 0x33c
   18ba0:	bl	126ec <malloc@plt>
   18ba4:	add	r6, sl, #3
   18ba8:	mov	r1, r5
   18bac:	mov	r4, r0
   18bb0:	mov	r2, r6
   18bb4:	bl	12794 <strncpy@plt>
   18bb8:	mov	r0, #0
   18bbc:	strb	r0, [r4, r6]
   18bc0:	mov	r0, #8
   18bc4:	bl	126ec <malloc@plt>
   18bc8:	mov	r1, r4
   18bcc:	mov	r6, r0
   18bd0:	bl	17ab0 <init_token_function@@Base>
   18bd4:	add	r0, r7, #832	; 0x340
   18bd8:	b	189bc <next@@Base+0x564>
   18bdc:	ldrd	r0, [r7, #96]	; 0x60
   18be0:	adds	r0, r0, #1
   18be4:	adc	r1, r1, #0
   18be8:	strd	r0, [r7, #96]	; 0x60
   18bec:	uxtb	r0, r5
   18bf0:	cmp	r0, #101	; 0x65
   18bf4:	bne	197c4 <next@@Base+0x136c>
   18bf8:	sub	r0, pc, #864	; 0x360
   18bfc:	vld1.64	{d16-d17}, [lr :128]
   18c00:	ldr	r1, [r7, #852]	; 0x354
   18c04:	vld1.64	{d18-d19}, [r0]
   18c08:	mov	r0, #101	; 0x65
   18c0c:	strb	r0, [ip, sl]
   18c10:	ldr	r0, [r7, #848]	; 0x350
   18c14:	vadd.i64	q9, q8, q9
   18c18:	adds	r0, r0, #1
   18c1c:	adc	r1, r1, #0
   18c20:	str	r0, [r7, #848]	; 0x350
   18c24:	str	r1, [r7, #852]	; 0x354
   18c28:	vst1.64	{d18-d19}, [lr :128]
   18c2c:	ldr	r1, [r4, #8]
   18c30:	ldr	r0, [r4]
   18c34:	add	r2, r1, #1
   18c38:	str	r2, [r4, #8]
   18c3c:	ldrb	r0, [r0, r1]
   18c40:	cmp	r0, #116	; 0x74
   18c44:	bne	197e4 <next@@Base+0x138c>
   18c48:	vmov.32	r3, d16[0]
   18c4c:	vmov.32	r2, d16[1]
   18c50:	add	r1, sl, ip
   18c54:	mov	r0, #116	; 0x74
   18c58:	ldr	r6, [r7, #868]	; 0x364
   18c5c:	strb	r0, [r1, #1]
   18c60:	adds	r0, r3, #2
   18c64:	str	r0, [lr]
   18c68:	adc	r0, r2, #0
   18c6c:	str	r0, [lr, #4]
   18c70:	ldr	r0, [r7, #864]	; 0x360
   18c74:	ldr	r5, [lr, #12]
   18c78:	adds	r0, r0, #1
   18c7c:	str	r0, [r7, #864]	; 0x360
   18c80:	adc	r0, r6, #0
   18c84:	ldr	r6, [lr, #8]
   18c88:	str	r0, [r7, #868]	; 0x364
   18c8c:	adds	r6, r6, #1
   18c90:	adc	r0, r5, #0
   18c94:	str	r6, [lr, #8]
   18c98:	str	r0, [lr, #12]
   18c9c:	ldr	r6, [r4, #8]
   18ca0:	ldr	r0, [r4]
   18ca4:	add	r5, r6, #1
   18ca8:	str	r5, [r4, #8]
   18cac:	ldrb	r0, [r0, r6]
   18cb0:	cmp	r0, #117	; 0x75
   18cb4:	bne	19804 <next@@Base+0x13ac>
   18cb8:	adds	r0, r3, #3
   18cbc:	ldr	r6, [r7, #884]	; 0x374
   18cc0:	str	r0, [lr]
   18cc4:	mov	r0, #117	; 0x75
   18cc8:	strb	r0, [r1, #2]
   18ccc:	adc	r0, r2, #0
   18cd0:	str	r0, [lr, #4]
   18cd4:	ldr	r0, [r7, #880]	; 0x370
   18cd8:	ldr	r5, [lr, #12]
   18cdc:	adds	r0, r0, #1
   18ce0:	str	r0, [r7, #880]	; 0x370
   18ce4:	adc	r0, r6, #0
   18ce8:	ldr	r6, [lr, #8]
   18cec:	str	r0, [r7, #884]	; 0x374
   18cf0:	adds	r6, r6, #1
   18cf4:	adc	r0, r5, #0
   18cf8:	str	r6, [lr, #8]
   18cfc:	str	r0, [lr, #12]
   18d00:	ldr	r6, [r4, #8]
   18d04:	ldr	r0, [r4]
   18d08:	add	r5, r6, #1
   18d0c:	str	r5, [r4, #8]
   18d10:	ldrb	r0, [r0, r6]
   18d14:	cmp	r0, #114	; 0x72
   18d18:	bne	19824 <next@@Base+0x13cc>
   18d1c:	adds	r0, r3, #4
   18d20:	str	r0, [lr]
   18d24:	mov	r0, #114	; 0x72
   18d28:	strb	r0, [r1, #3]
   18d2c:	adc	r0, r2, #0
   18d30:	ldr	r1, [r7, #900]	; 0x384
   18d34:	str	r0, [lr, #4]
   18d38:	ldr	r0, [r7, #896]	; 0x380
   18d3c:	ldrd	r2, [lr, #8]
   18d40:	adds	r0, r0, #1
   18d44:	str	r0, [r7, #896]	; 0x380
   18d48:	adc	r0, r1, #0
   18d4c:	adds	r1, r2, #1
   18d50:	str	r0, [r7, #900]	; 0x384
   18d54:	adc	r0, r3, #0
   18d58:	str	r1, [lr, #8]
   18d5c:	str	r0, [lr, #12]
   18d60:	ldr	r1, [r4, #8]
   18d64:	ldr	r0, [r4]
   18d68:	add	r2, r1, #1
   18d6c:	str	r2, [r4, #8]
   18d70:	ldrb	r0, [r0, r1]
   18d74:	cmp	r0, #110	; 0x6e
   18d78:	bne	19844 <next@@Base+0x13ec>
   18d7c:	ldr	r0, [r7, #912]	; 0x390
   18d80:	ldr	r1, [r7, #916]	; 0x394
   18d84:	adds	r0, r0, #1
   18d88:	adc	r1, r1, #0
   18d8c:	str	r0, [r7, #912]	; 0x390
   18d90:	mov	r0, #4
   18d94:	str	r1, [r7, #916]	; 0x394
   18d98:	bl	126ec <malloc@plt>
   18d9c:	mov	r6, r0
   18da0:	bl	17bd0 <init_token_return@@Base>
   18da4:	add	r0, r7, #920	; 0x398
   18da8:	b	189bc <next@@Base+0x564>
   18dac:	ldrd	r0, [r7, #80]	; 0x50
   18db0:	adds	r0, r0, #1
   18db4:	adc	r1, r1, #0
   18db8:	strd	r0, [r7, #80]	; 0x50
   18dbc:	uxtb	r1, r5
   18dc0:	cmp	r1, #102	; 0x66
   18dc4:	beq	18fcc <next@@Base+0xb74>
   18dc8:	cmp	r1, #110	; 0x6e
   18dcc:	bne	19864 <next@@Base+0x140c>
   18dd0:	add	r0, pc, #888	; 0x378
   18dd4:	vld1.64	{d18-d19}, [lr :128]
   18dd8:	ldr	r1, [r7, #740]	; 0x2e4
   18ddc:	vld1.64	{d16-d17}, [r0]
   18de0:	mov	r0, #110	; 0x6e
   18de4:	strb	r0, [ip, sl]
   18de8:	ldr	r0, [r7, #736]	; 0x2e0
   18dec:	vadd.i64	q8, q9, q8
   18df0:	adds	r0, r0, #1
   18df4:	adc	r1, r1, #0
   18df8:	str	r0, [r7, #736]	; 0x2e0
   18dfc:	str	r1, [r7, #740]	; 0x2e4
   18e00:	vst1.64	{d16-d17}, [lr :128]
   18e04:	ldr	r1, [r4, #8]
   18e08:	ldr	r0, [r4]
   18e0c:	add	r2, r1, #1
   18e10:	str	r2, [r4, #8]
   18e14:	ldrb	r0, [r0, r1]
   18e18:	cmp	r0, #116	; 0x74
   18e1c:	bne	198e4 <next@@Base+0x148c>
   18e20:	ldr	r0, [r7, #760]	; 0x2f8
   18e24:	ldr	r1, [r7, #764]	; 0x2fc
   18e28:	adds	r0, r0, #1
   18e2c:	adc	r1, r1, #0
   18e30:	str	r0, [r7, #760]	; 0x2f8
   18e34:	mov	r0, #4
   18e38:	str	r1, [r7, #764]	; 0x2fc
   18e3c:	bl	126ec <malloc@plt>
   18e40:	mov	r6, r0
   18e44:	bl	17a38 <init_token_int_type@@Base>
   18e48:	add	r0, r7, #768	; 0x300
   18e4c:	b	189bc <next@@Base+0x564>
   18e50:	ldrd	r0, [r7, #104]	; 0x68
   18e54:	adds	r0, r0, #1
   18e58:	adc	r1, r1, #0
   18e5c:	strd	r0, [r7, #104]	; 0x68
   18e60:	uxtb	r0, r5
   18e64:	cmp	r0, #108	; 0x6c
   18e68:	bne	19884 <next@@Base+0x142c>
   18e6c:	add	r0, pc, #732	; 0x2dc
   18e70:	vld1.64	{d16-d17}, [lr :128]
   18e74:	ldr	r1, [r7, #940]	; 0x3ac
   18e78:	vld1.64	{d18-d19}, [r0]
   18e7c:	mov	r0, #108	; 0x6c
   18e80:	strb	r0, [ip, sl]
   18e84:	ldr	r0, [r7, #936]	; 0x3a8
   18e88:	vadd.i64	q9, q8, q9
   18e8c:	adds	r0, r0, #1
   18e90:	adc	r1, r1, #0
   18e94:	str	r0, [r7, #936]	; 0x3a8
   18e98:	str	r1, [r7, #940]	; 0x3ac
   18e9c:	vst1.64	{d18-d19}, [lr :128]
   18ea0:	ldr	r1, [r4, #8]
   18ea4:	ldr	r0, [r4]
   18ea8:	add	r2, r1, #1
   18eac:	str	r2, [r4, #8]
   18eb0:	ldrb	r0, [r0, r1]
   18eb4:	cmp	r0, #115	; 0x73
   18eb8:	bne	198a4 <next@@Base+0x144c>
   18ebc:	add	r0, sl, ip
   18ec0:	mov	r1, #115	; 0x73
   18ec4:	strb	r1, [r0, #1]
   18ec8:	vmov.32	r0, d16[0]
   18ecc:	ldr	r1, [r7, #956]	; 0x3bc
   18ed0:	adds	r0, r0, #2
   18ed4:	str	r0, [lr]
   18ed8:	vmov.32	r0, d16[1]
   18edc:	adc	r0, r0, #0
   18ee0:	str	r0, [lr, #4]
   18ee4:	ldr	r0, [r7, #952]	; 0x3b8
   18ee8:	ldrd	r2, [lr, #8]
   18eec:	adds	r0, r0, #1
   18ef0:	str	r0, [r7, #952]	; 0x3b8
   18ef4:	adc	r0, r1, #0
   18ef8:	adds	r1, r2, #1
   18efc:	str	r0, [r7, #956]	; 0x3bc
   18f00:	adc	r0, r3, #0
   18f04:	str	r1, [lr, #8]
   18f08:	str	r0, [lr, #12]
   18f0c:	ldr	r1, [r4, #8]
   18f10:	ldr	r0, [r4]
   18f14:	add	r2, r1, #1
   18f18:	str	r2, [r4, #8]
   18f1c:	ldrb	r0, [r0, r1]
   18f20:	cmp	r0, #101	; 0x65
   18f24:	bne	198c4 <next@@Base+0x146c>
   18f28:	ldr	r0, [r7, #968]	; 0x3c8
   18f2c:	ldr	r1, [r7, #972]	; 0x3cc
   18f30:	adds	r0, r0, #1
   18f34:	adc	r1, r1, #0
   18f38:	str	r0, [r7, #968]	; 0x3c8
   18f3c:	mov	r0, #4
   18f40:	str	r1, [r7, #972]	; 0x3cc
   18f44:	bl	126ec <malloc@plt>
   18f48:	mov	r6, r0
   18f4c:	bl	17cb0 <init_token_else@@Base>
   18f50:	add	r0, r7, #976	; 0x3d0
   18f54:	b	189bc <next@@Base+0x564>
   18f58:	mov	r8, ip
   18f5c:	movw	r0, #752	; 0x2f0
   18f60:	add	r1, pc, #488	; 0x1e8
   18f64:	ldr	r2, [r7, #708]	; 0x2c4
   18f68:	movt	r0, #3
   18f6c:	vld1.64	{d16-d17}, [r1]
   18f70:	ldr	r1, [r7, #704]	; 0x2c0
   18f74:	vld1.64	{d18-d19}, [r0 :128]
   18f78:	adds	r1, r1, #1
   18f7c:	str	r1, [r7, #704]	; 0x2c0
   18f80:	mov	r1, #1
   18f84:	vadd.i64	q8, q9, q8
   18f88:	vst1.64	{d16-d17}, [r0 :128]
   18f8c:	adc	r0, r2, #0
   18f90:	str	r0, [r7, #708]	; 0x2c4
   18f94:	mov	r0, r4
   18f98:	bl	18388 <push_back_chars@@Base>
   18f9c:	mov	r0, #0
   18fa0:	strb	r0, [r8, sl]
   18fa4:	mov	r0, #8
   18fa8:	bl	126ec <malloc@plt>
   18fac:	mov	r6, r0
   18fb0:	mov	r0, r8
   18fb4:	bl	127f4 <atoi@plt>
   18fb8:	mov	r1, r0
   18fbc:	mov	r0, r6
   18fc0:	bl	17a70 <init_token_int_value@@Base>
   18fc4:	add	r0, r7, #720	; 0x2d0
   18fc8:	b	189bc <next@@Base+0x564>
   18fcc:	add	r0, ip, sl
   18fd0:	mov	r1, #102	; 0x66
   18fd4:	strh	r1, [r0]
   18fd8:	ldr	r0, [r7, #744]	; 0x2e8
   18fdc:	ldr	r1, [r7, #748]	; 0x2ec
   18fe0:	adds	r0, r0, #1
   18fe4:	adc	r1, r1, #0
   18fe8:	str	r0, [r7, #744]	; 0x2e8
   18fec:	mov	r0, #4
   18ff0:	str	r1, [r7, #748]	; 0x2ec
   18ff4:	bl	126ec <malloc@plt>
   18ff8:	mov	r6, r0
   18ffc:	bl	17c78 <init_token_if@@Base>
   19000:	add	r0, r7, #776	; 0x308
   19004:	b	189bc <next@@Base+0x564>
   19008:	ldrd	r0, [r7, #168]	; 0xa8
   1900c:	adds	r0, r0, #1
   19010:	adc	r1, r1, #0
   19014:	strd	r0, [r7, #168]	; 0xa8
   19018:	mov	r0, #8
   1901c:	bl	126ec <malloc@plt>
   19020:	mov	r1, #0
   19024:	mov	r6, r0
   19028:	bl	17a70 <init_token_int_value@@Base>
   1902c:	add	r0, r7, #184	; 0xb8
   19030:	b	189bc <next@@Base+0x564>
   19034:	ldrd	r8, [r7, #200]	; 0xc8
   19038:	adds	r8, r8, #1
   1903c:	adc	r9, r9, #0
   19040:	cmp	r2, #40	; 0x28
   19044:	strd	r8, [r7, #200]	; 0xc8
   19048:	bne	19074 <next@@Base+0xc1c>
   1904c:	ldrd	r0, [r7, #232]	; 0xe8
   19050:	adds	r0, r0, #1
   19054:	adc	r1, r1, #0
   19058:	strd	r0, [r7, #232]	; 0xe8
   1905c:	mov	r0, #4
   19060:	bl	126ec <malloc@plt>
   19064:	mov	r6, r0
   19068:	bl	17af0 <init_token_opar@@Base>
   1906c:	add	r0, r7, #248	; 0xf8
   19070:	b	189bc <next@@Base+0x564>
   19074:	ldrd	r8, [r7, #240]	; 0xf0
   19078:	adds	r8, r8, #1
   1907c:	adc	r9, r9, #0
   19080:	cmp	r2, #41	; 0x29
   19084:	strd	r8, [r7, #240]	; 0xf0
   19088:	bne	19160 <next@@Base+0xd08>
   1908c:	ldr	r0, [r7, #256]	; 0x100
   19090:	ldr	r1, [r7, #260]	; 0x104
   19094:	adds	r0, r0, #1
   19098:	adc	r1, r1, #0
   1909c:	str	r0, [r7, #256]	; 0x100
   190a0:	mov	r0, #4
   190a4:	str	r1, [r7, #260]	; 0x104
   190a8:	bl	126ec <malloc@plt>
   190ac:	mov	r6, r0
   190b0:	bl	17b28 <init_token_cpar@@Base>
   190b4:	add	r0, r7, #272	; 0x110
   190b8:	b	189bc <next@@Base+0x564>
   190bc:	ldr	r0, [r7, #280]	; 0x118
   190c0:	ldr	r1, [r7, #284]	; 0x11c
   190c4:	adds	r0, r0, #1
   190c8:	adc	r1, r1, #0
   190cc:	str	r0, [r7, #280]	; 0x118
   190d0:	mov	r0, #4
   190d4:	str	r1, [r7, #284]	; 0x11c
   190d8:	bl	126ec <malloc@plt>
   190dc:	mov	r6, r0
   190e0:	bl	17b60 <init_token_obra@@Base>
   190e4:	add	r0, r7, #296	; 0x128
   190e8:	b	189bc <next@@Base+0x564>
   190ec:	ldr	r0, [r7, #304]	; 0x130
   190f0:	ldr	r1, [r7, #308]	; 0x134
   190f4:	adds	r0, r0, #1
   190f8:	adc	r1, r1, #0
   190fc:	str	r0, [r7, #304]	; 0x130
   19100:	mov	r0, #4
   19104:	str	r1, [r7, #308]	; 0x134
   19108:	bl	126ec <malloc@plt>
   1910c:	mov	r6, r0
   19110:	bl	17b98 <init_token_cbra@@Base>
   19114:	add	r0, r7, #320	; 0x140
   19118:	b	189bc <next@@Base+0x564>
   1911c:	ldr	r0, [r7, #328]	; 0x148
   19120:	ldr	r1, [r7, #332]	; 0x14c
   19124:	adds	r0, r0, #1
   19128:	adc	r1, r1, #0
   1912c:	str	r0, [r7, #328]	; 0x148
   19130:	mov	r0, #4
   19134:	str	r1, [r7, #332]	; 0x14c
   19138:	bl	126ec <malloc@plt>
   1913c:	mov	r6, r0
   19140:	bl	17c08 <init_token_semicolon@@Base>
   19144:	add	r0, r7, #344	; 0x158
   19148:	b	189bc <next@@Base+0x564>
   1914c:	nop	{0}
   19150:	andeq	r0, r0, r1
   19154:	andeq	r0, r0, r0
   19158:	andeq	r0, r0, r1
   1915c:	andeq	r0, r0, r0
   19160:	ldr	r0, [r7, #408]	; 0x198
   19164:	ldr	r1, [r7, #412]	; 0x19c
   19168:	ldr	r3, [r7, #384]	; 0x180
   1916c:	ldr	r6, [r7, #388]	; 0x184
   19170:	adds	r0, r0, #1
   19174:	adc	r1, r1, #0
   19178:	adds	r5, r3, #1
   1917c:	adc	r8, r6, #0
   19180:	ldr	r6, [r7, #360]	; 0x168
   19184:	str	r1, [sp, #4]
   19188:	adds	r6, r6, #1
   1918c:	str	r6, [r7, #360]	; 0x168
   19190:	str	r5, [r7, #384]	; 0x180
   19194:	str	r0, [r7, #408]	; 0x198
   19198:	ldr	r0, [r7, #364]	; 0x16c
   1919c:	ldr	r6, [r7, #264]	; 0x108
   191a0:	ldr	r5, [r7, #268]	; 0x10c
   191a4:	ldr	r1, [r7, #288]	; 0x120
   191a8:	ldr	r3, [r7, #292]	; 0x124
   191ac:	adc	r9, r0, #0
   191b0:	ldr	r0, [r7, #336]	; 0x150
   191b4:	adds	r6, r6, #1
   191b8:	adc	r5, r5, #0
   191bc:	adds	r0, r0, #1
   191c0:	str	r0, [r7, #336]	; 0x150
   191c4:	str	r6, [r7, #264]	; 0x108
   191c8:	str	r5, [r7, #268]	; 0x10c
   191cc:	ldr	r0, [r7, #340]	; 0x154
   191d0:	ldr	r5, [r7, #312]	; 0x138
   191d4:	adc	r0, r0, #0
   191d8:	adds	r5, r5, #1
   191dc:	str	r5, [r7, #312]	; 0x138
   191e0:	ldr	r5, [r7, #316]	; 0x13c
   191e4:	ldr	r6, [r7, #432]	; 0x1b0
   191e8:	adc	r5, r5, #0
   191ec:	adds	r1, r1, #1
   191f0:	adc	r3, r3, #0
   191f4:	adds	r6, r6, #1
   191f8:	str	r6, [r7, #432]	; 0x1b0
   191fc:	str	r1, [r7, #288]	; 0x120
   19200:	str	r3, [r7, #292]	; 0x124
   19204:	str	r5, [r7, #316]	; 0x13c
   19208:	str	r0, [r7, #340]	; 0x154
   1920c:	ldr	r0, [sp, #4]
   19210:	str	r9, [r7, #364]	; 0x16c
   19214:	str	r8, [r7, #388]	; 0x184
   19218:	str	r0, [r7, #412]	; 0x19c
   1921c:	ldr	r0, [r7, #436]	; 0x1b4
   19220:	adc	r0, r0, #0
   19224:	cmp	r2, #33	; 0x21
   19228:	str	r0, [r7, #436]	; 0x1b4
   1922c:	bne	192cc <next@@Base+0xe74>
   19230:	sub	r0, pc, #232	; 0xe8
   19234:	vld1.64	{d18-d19}, [lr :128]
   19238:	ldr	r1, [r7, #452]	; 0x1c4
   1923c:	vld1.64	{d16-d17}, [r0]
   19240:	mov	r0, #33	; 0x21
   19244:	strb	r0, [ip, sl]
   19248:	ldr	r0, [r7, #448]	; 0x1c0
   1924c:	vadd.i64	q8, q9, q8
   19250:	adds	r0, r0, #1
   19254:	adc	r1, r1, #0
   19258:	str	r0, [r7, #448]	; 0x1c0
   1925c:	str	r1, [r7, #452]	; 0x1c4
   19260:	vst1.64	{d16-d17}, [lr :128]
   19264:	ldr	r1, [r4, #8]
   19268:	ldr	r0, [r4]
   1926c:	add	r2, r1, #1
   19270:	str	r2, [r4, #8]
   19274:	ldrb	r5, [r0, r1]
   19278:	mov	r0, #8
   1927c:	bl	126ec <malloc@plt>
   19280:	mov	r6, r0
   19284:	cmp	r5, #61	; 0x3d
   19288:	bne	193f0 <next@@Base+0xf98>
   1928c:	ldr	r0, [r7, #472]	; 0x1d8
   19290:	ldr	r1, [r7, #476]	; 0x1dc
   19294:	adds	r0, r0, #1
   19298:	adc	r1, r1, #0
   1929c:	str	r0, [r7, #472]	; 0x1d8
   192a0:	mov	r0, #3
   192a4:	str	r1, [r7, #476]	; 0x1dc
   192a8:	bl	126ec <malloc@plt>
   192ac:	mov	r1, r0
   192b0:	ldrb	r0, [sp, #8]
   192b4:	mov	r2, #61	; 0x3d
   192b8:	strb	r2, [r1, #1]
   192bc:	add	r2, r1, #2
   192c0:	strb	r0, [r1]
   192c4:	add	r0, r7, #488	; 0x1e8
   192c8:	b	1944c <next@@Base+0xff4>
   192cc:	ldr	r0, [r7, #584]	; 0x248
   192d0:	ldr	r1, [r7, #588]	; 0x24c
   192d4:	ldr	r3, [r7, #528]	; 0x210
   192d8:	ldr	r6, [r7, #532]	; 0x214
   192dc:	ldr	r5, [r7, #456]	; 0x1c8
   192e0:	adds	r0, r0, #1
   192e4:	adc	r8, r1, #0
   192e8:	ldr	r1, [r7, #512]	; 0x200
   192ec:	adds	r9, r3, #1
   192f0:	ldr	r3, [r7, #516]	; 0x204
   192f4:	str	r0, [sp, #4]
   192f8:	ldr	r0, [r7, #460]	; 0x1cc
   192fc:	adc	r6, r6, #0
   19300:	adds	r1, r1, #1
   19304:	str	r1, [r7, #512]	; 0x200
   19308:	adc	r1, r3, #0
   1930c:	adds	r3, r5, #1
   19310:	ldr	r5, [r7, #624]	; 0x270
   19314:	adc	r0, r0, #0
   19318:	adds	r5, r5, #1
   1931c:	str	r5, [r7, #624]	; 0x270
   19320:	str	r0, [r7, #460]	; 0x1cc
   19324:	ldr	r0, [sp, #4]
   19328:	str	r3, [r7, #456]	; 0x1c8
   1932c:	str	r1, [r7, #516]	; 0x204
   19330:	str	r9, [r7, #528]	; 0x210
   19334:	str	r6, [r7, #532]	; 0x214
   19338:	str	r8, [r7, #588]	; 0x24c
   1933c:	str	r0, [r7, #584]	; 0x248
   19340:	ldr	r0, [r7, #628]	; 0x274
   19344:	adc	r0, r0, #0
   19348:	cmp	r2, #38	; 0x26
   1934c:	str	r0, [r7, #628]	; 0x274
   19350:	bne	19970 <next@@Base+0x1518>
   19354:	sub	r0, pc, #524	; 0x20c
   19358:	vld1.64	{d18-d19}, [lr :128]
   1935c:	ldr	r1, [r7, #660]	; 0x294
   19360:	mov	r5, #38	; 0x26
   19364:	vld1.64	{d16-d17}, [r0]
   19368:	ldr	r0, [r7, #656]	; 0x290
   1936c:	strb	r5, [ip, sl]
   19370:	adds	r0, r0, #1
   19374:	vadd.i64	q8, q9, q8
   19378:	adc	r1, r1, #0
   1937c:	str	r0, [r7, #656]	; 0x290
   19380:	str	r1, [r7, #660]	; 0x294
   19384:	vst1.64	{d16-d17}, [lr :128]
   19388:	ldr	r1, [r4, #8]
   1938c:	ldr	r0, [r4]
   19390:	add	r2, r1, #1
   19394:	str	r2, [r4, #8]
   19398:	ldrb	r4, [r0, r1]
   1939c:	mov	r0, #8
   193a0:	bl	126ec <malloc@plt>
   193a4:	cmp	r4, #38	; 0x26
   193a8:	bne	19904 <next@@Base+0x14ac>
   193ac:	mov	r6, r0
   193b0:	ldr	r0, [r7, #680]	; 0x2a8
   193b4:	ldr	r1, [r7, #684]	; 0x2ac
   193b8:	adds	r0, r0, #1
   193bc:	adc	r1, r1, #0
   193c0:	str	r0, [r7, #680]	; 0x2a8
   193c4:	mov	r0, #3
   193c8:	str	r1, [r7, #684]	; 0x2ac
   193cc:	bl	126ec <malloc@plt>
   193d0:	mov	r1, r0
   193d4:	ldrb	r0, [sp, #8]
   193d8:	strh	r5, [r1, #1]
   193dc:	strb	r0, [r1]
   193e0:	mov	r0, r6
   193e4:	bl	17ce8 <init_token_boolean_op@@Base>
   193e8:	add	r0, r7, #688	; 0x2b0
   193ec:	b	189bc <next@@Base+0x564>
   193f0:	movw	r0, #752	; 0x2f0
   193f4:	sub	r1, pc, #684	; 0x2ac
   193f8:	ldr	r2, [r7, #468]	; 0x1d4
   193fc:	movt	r0, #3
   19400:	vld1.64	{d16-d17}, [r1]
   19404:	ldr	r1, [r7, #464]	; 0x1d0
   19408:	vld1.64	{d18-d19}, [r0 :128]
   1940c:	adds	r1, r1, #1
   19410:	str	r1, [r7, #464]	; 0x1d0
   19414:	mov	r1, #1
   19418:	vadd.i64	q8, q9, q8
   1941c:	vst1.64	{d16-d17}, [r0 :128]
   19420:	adc	r0, r2, #0
   19424:	str	r0, [r7, #468]	; 0x1d4
   19428:	mov	r0, r4
   1942c:	bl	18388 <push_back_chars@@Base>
   19430:	mov	r0, #2
   19434:	bl	126ec <malloc@plt>
   19438:	mov	r1, r0
   1943c:	ldrb	r0, [sp, #8]
   19440:	mov	r2, r1
   19444:	strb	r0, [r2], #1
   19448:	add	r0, r7, #480	; 0x1e0
   1944c:	mov	r3, #0
   19450:	strb	r3, [r2]
   19454:	ldrd	r2, [r0]
   19458:	adds	r2, r2, #1
   1945c:	adc	r3, r3, #0
   19460:	strd	r2, [r0]
   19464:	mov	r0, r6
   19468:	bl	17ce8 <init_token_boolean_op@@Base>
   1946c:	add	r0, r7, #496	; 0x1f0
   19470:	b	189bc <next@@Base+0x564>
   19474:	ldr	r0, [r7, #432]	; 0x1b0
   19478:	ldr	r1, [r7, #436]	; 0x1b4
   1947c:	ldr	r3, [r7, #456]	; 0x1c8
   19480:	ldr	r6, [r7, #460]	; 0x1cc
   19484:	adds	r0, r0, #1
   19488:	adc	r1, r1, #0
   1948c:	adds	r3, r3, #1
   19490:	str	r0, [r7, #432]	; 0x1b0
   19494:	adc	r0, r6, #0
   19498:	cmp	r2, #60	; 0x3c
   1949c:	str	r1, [r7, #436]	; 0x1b4
   194a0:	str	r3, [r7, #456]	; 0x1c8
   194a4:	str	r0, [r7, #460]	; 0x1cc
   194a8:	bne	194b4 <next@@Base+0x105c>
   194ac:	add	r1, r7, #504	; 0x1f8
   194b0:	b	194d8 <next@@Base+0x1080>
   194b4:	ldr	r0, [r7, #512]	; 0x200
   194b8:	ldr	r1, [r7, #516]	; 0x204
   194bc:	adds	r0, r0, #1
   194c0:	adc	r1, r1, #0
   194c4:	cmp	r2, #62	; 0x3e
   194c8:	str	r0, [r7, #512]	; 0x200
   194cc:	str	r1, [r7, #516]	; 0x204
   194d0:	bne	195ec <next@@Base+0x1194>
   194d4:	add	r1, r7, #520	; 0x208
   194d8:	ldm	r1, {r0, r3}
   194dc:	adds	r0, r0, #1
   194e0:	adc	r3, r3, #0
   194e4:	stm	r1, {r0, r3}
   194e8:	sub	r0, pc, #928	; 0x3a0
   194ec:	vld1.64	{d18-d19}, [lr :128]
   194f0:	strb	r5, [ip, sl]
   194f4:	vld1.64	{d16-d17}, [r0]
   194f8:	vadd.i64	q8, q9, q8
   194fc:	vst1.64	{d16-d17}, [lr :128]
   19500:	ldr	r1, [r4, #8]
   19504:	ldr	r0, [r4]
   19508:	add	r2, r1, #1
   1950c:	str	r2, [r4, #8]
   19510:	ldrb	r5, [r0, r1]
   19514:	mov	r0, #8
   19518:	bl	126ec <malloc@plt>
   1951c:	mov	r6, r0
   19520:	cmp	r5, #61	; 0x3d
   19524:	bne	19568 <next@@Base+0x1110>
   19528:	ldr	r0, [r7, #544]	; 0x220
   1952c:	ldr	r1, [r7, #548]	; 0x224
   19530:	adds	r0, r0, #1
   19534:	adc	r1, r1, #0
   19538:	str	r0, [r7, #544]	; 0x220
   1953c:	mov	r0, #3
   19540:	str	r1, [r7, #548]	; 0x224
   19544:	bl	126ec <malloc@plt>
   19548:	mov	r1, r0
   1954c:	ldrb	r0, [sp, #8]
   19550:	mov	r2, #61	; 0x3d
   19554:	strb	r2, [r1, #1]
   19558:	add	r2, r1, #2
   1955c:	strb	r0, [r1]
   19560:	add	r0, r7, #560	; 0x230
   19564:	b	195c4 <next@@Base+0x116c>
   19568:	movw	r0, #752	; 0x2f0
   1956c:	add	r1, pc, #980	; 0x3d4
   19570:	ldr	r2, [r7, #540]	; 0x21c
   19574:	movt	r0, #3
   19578:	vld1.64	{d16-d17}, [r1]
   1957c:	ldr	r1, [r7, #536]	; 0x218
   19580:	vld1.64	{d18-d19}, [r0 :128]
   19584:	adds	r1, r1, #1
   19588:	str	r1, [r7, #536]	; 0x218
   1958c:	mov	r1, #1
   19590:	vadd.i64	q8, q9, q8
   19594:	vst1.64	{d16-d17}, [r0 :128]
   19598:	adc	r0, r2, #0
   1959c:	str	r0, [r7, #540]	; 0x21c
   195a0:	mov	r0, r4
   195a4:	bl	18388 <push_back_chars@@Base>
   195a8:	mov	r0, #2
   195ac:	bl	126ec <malloc@plt>
   195b0:	mov	r1, r0
   195b4:	ldrb	r0, [sp, #8]
   195b8:	mov	r2, r1
   195bc:	strb	r0, [r2], #1
   195c0:	add	r0, r7, #552	; 0x228
   195c4:	mov	r3, #0
   195c8:	strb	r3, [r2]
   195cc:	ldrd	r2, [r0]
   195d0:	adds	r2, r2, #1
   195d4:	adc	r3, r3, #0
   195d8:	strd	r2, [r0]
   195dc:	mov	r0, r6
   195e0:	bl	17ce8 <init_token_boolean_op@@Base>
   195e4:	add	r0, r7, #568	; 0x238
   195e8:	b	189bc <next@@Base+0x564>
   195ec:	ldr	r0, [r7, #528]	; 0x210
   195f0:	ldr	r1, [r7, #532]	; 0x214
   195f4:	adds	r0, r0, #1
   195f8:	adc	r1, r1, #0
   195fc:	cmp	r2, #61	; 0x3d
   19600:	str	r0, [r7, #528]	; 0x210
   19604:	str	r1, [r7, #532]	; 0x214
   19608:	bne	196a8 <next@@Base+0x1250>
   1960c:	add	r0, pc, #948	; 0x3b4
   19610:	vld1.64	{d18-d19}, [lr :128]
   19614:	ldr	r1, [r7, #580]	; 0x244
   19618:	mov	r5, #61	; 0x3d
   1961c:	vld1.64	{d16-d17}, [r0]
   19620:	ldr	r0, [r7, #576]	; 0x240
   19624:	strb	r5, [ip, sl]
   19628:	adds	r0, r0, #1
   1962c:	vadd.i64	q8, q9, q8
   19630:	adc	r1, r1, #0
   19634:	str	r0, [r7, #576]	; 0x240
   19638:	str	r1, [r7, #580]	; 0x244
   1963c:	vst1.64	{d16-d17}, [lr :128]
   19640:	ldr	r1, [r4, #8]
   19644:	ldr	r0, [r4]
   19648:	add	r2, r1, #1
   1964c:	str	r2, [r4, #8]
   19650:	ldrb	r4, [r0, r1]
   19654:	mov	r0, #8
   19658:	bl	126ec <malloc@plt>
   1965c:	cmp	r4, #61	; 0x3d
   19660:	bne	19924 <next@@Base+0x14cc>
   19664:	mov	r6, r0
   19668:	ldr	r0, [r7, #600]	; 0x258
   1966c:	ldr	r1, [r7, #604]	; 0x25c
   19670:	adds	r0, r0, #1
   19674:	adc	r1, r1, #0
   19678:	str	r0, [r7, #600]	; 0x258
   1967c:	mov	r0, #3
   19680:	str	r1, [r7, #604]	; 0x25c
   19684:	bl	126ec <malloc@plt>
   19688:	mov	r1, r0
   1968c:	ldrb	r0, [sp, #8]
   19690:	strh	r5, [r1, #1]
   19694:	strb	r0, [r1]
   19698:	mov	r0, r6
   1969c:	bl	17ce8 <init_token_boolean_op@@Base>
   196a0:	add	r0, r7, #608	; 0x260
   196a4:	b	189bc <next@@Base+0x564>
   196a8:	ldr	r0, [r7, #584]	; 0x248
   196ac:	ldr	r1, [r7, #588]	; 0x24c
   196b0:	adds	r0, r0, #1
   196b4:	adc	r1, r1, #0
   196b8:	cmp	r2, #124	; 0x7c
   196bc:	str	r0, [r7, #584]	; 0x248
   196c0:	str	r1, [r7, #588]	; 0x24c
   196c4:	bne	19958 <next@@Base+0x1500>
   196c8:	add	r0, pc, #760	; 0x2f8
   196cc:	vld1.64	{d18-d19}, [lr :128]
   196d0:	ldr	r1, [r7, #620]	; 0x26c
   196d4:	mov	r5, #124	; 0x7c
   196d8:	vld1.64	{d16-d17}, [r0]
   196dc:	ldr	r0, [r7, #616]	; 0x268
   196e0:	strb	r5, [ip, sl]
   196e4:	adds	r0, r0, #1
   196e8:	vadd.i64	q8, q9, q8
   196ec:	adc	r1, r1, #0
   196f0:	str	r0, [r7, #616]	; 0x268
   196f4:	str	r1, [r7, #620]	; 0x26c
   196f8:	vst1.64	{d16-d17}, [lr :128]
   196fc:	ldr	r1, [r4, #8]
   19700:	ldr	r0, [r4]
   19704:	add	r2, r1, #1
   19708:	str	r2, [r4, #8]
   1970c:	ldrb	r4, [r0, r1]
   19710:	mov	r0, #8
   19714:	bl	126ec <malloc@plt>
   19718:	cmp	r4, #124	; 0x7c
   1971c:	bne	199a8 <next@@Base+0x1550>
   19720:	mov	r6, r0
   19724:	ldr	r0, [r7, #640]	; 0x280
   19728:	ldr	r1, [r7, #644]	; 0x284
   1972c:	adds	r0, r0, #1
   19730:	adc	r1, r1, #0
   19734:	str	r0, [r7, #640]	; 0x280
   19738:	mov	r0, #3
   1973c:	str	r1, [r7, #644]	; 0x284
   19740:	bl	126ec <malloc@plt>
   19744:	mov	r1, r0
   19748:	ldrb	r0, [sp, #8]
   1974c:	strh	r5, [r1, #1]
   19750:	strb	r0, [r1]
   19754:	mov	r0, r6
   19758:	bl	17ce8 <init_token_boolean_op@@Base>
   1975c:	add	r0, r7, #648	; 0x288
   19760:	b	189bc <next@@Base+0x564>
   19764:	ldr	r0, [r7, #784]	; 0x310
   19768:	ldr	r1, [r7, #788]	; 0x314
   1976c:	adds	r0, r0, #1
   19770:	adc	r1, r1, #0
   19774:	str	r0, [r7, #784]	; 0x310
   19778:	mov	r0, #1
   1977c:	str	r1, [r7, #788]	; 0x314
   19780:	bl	12728 <exit@plt>
   19784:	ldr	r0, [r7, #800]	; 0x320
   19788:	ldr	r1, [r7, #804]	; 0x324
   1978c:	adds	r0, r0, #1
   19790:	adc	r1, r1, #0
   19794:	str	r0, [r7, #800]	; 0x320
   19798:	mov	r0, #1
   1979c:	str	r1, [r7, #804]	; 0x324
   197a0:	bl	12728 <exit@plt>
   197a4:	ldr	r0, [r7, #816]	; 0x330
   197a8:	ldr	r1, [r7, #820]	; 0x334
   197ac:	adds	r0, r0, #1
   197b0:	adc	r1, r1, #0
   197b4:	str	r0, [r7, #816]	; 0x330
   197b8:	mov	r0, #1
   197bc:	str	r1, [r7, #820]	; 0x334
   197c0:	bl	12728 <exit@plt>
   197c4:	ldr	r0, [r7, #840]	; 0x348
   197c8:	ldr	r1, [r7, #844]	; 0x34c
   197cc:	adds	r0, r0, #1
   197d0:	adc	r1, r1, #0
   197d4:	str	r0, [r7, #840]	; 0x348
   197d8:	mov	r0, #1
   197dc:	str	r1, [r7, #844]	; 0x34c
   197e0:	bl	12728 <exit@plt>
   197e4:	ldr	r0, [r7, #856]	; 0x358
   197e8:	ldr	r1, [r7, #860]	; 0x35c
   197ec:	adds	r0, r0, #1
   197f0:	adc	r1, r1, #0
   197f4:	str	r0, [r7, #856]	; 0x358
   197f8:	mov	r0, #1
   197fc:	str	r1, [r7, #860]	; 0x35c
   19800:	bl	12728 <exit@plt>
   19804:	ldr	r0, [r7, #872]	; 0x368
   19808:	ldr	r1, [r7, #876]	; 0x36c
   1980c:	adds	r0, r0, #1
   19810:	adc	r1, r1, #0
   19814:	str	r0, [r7, #872]	; 0x368
   19818:	mov	r0, #1
   1981c:	str	r1, [r7, #876]	; 0x36c
   19820:	bl	12728 <exit@plt>
   19824:	ldr	r0, [r7, #888]	; 0x378
   19828:	ldr	r1, [r7, #892]	; 0x37c
   1982c:	adds	r0, r0, #1
   19830:	adc	r1, r1, #0
   19834:	str	r0, [r7, #888]	; 0x378
   19838:	mov	r0, #1
   1983c:	str	r1, [r7, #892]	; 0x37c
   19840:	bl	12728 <exit@plt>
   19844:	ldr	r0, [r7, #904]	; 0x388
   19848:	ldr	r1, [r7, #908]	; 0x38c
   1984c:	adds	r0, r0, #1
   19850:	adc	r1, r1, #0
   19854:	str	r0, [r7, #904]	; 0x388
   19858:	mov	r0, #1
   1985c:	str	r1, [r7, #908]	; 0x38c
   19860:	bl	12728 <exit@plt>
   19864:	ldr	r0, [r7, #728]	; 0x2d8
   19868:	ldr	r1, [r7, #732]	; 0x2dc
   1986c:	adds	r0, r0, #1
   19870:	adc	r1, r1, #0
   19874:	str	r0, [r7, #728]	; 0x2d8
   19878:	mov	r0, #1
   1987c:	str	r1, [r7, #732]	; 0x2dc
   19880:	bl	12728 <exit@plt>
   19884:	ldr	r0, [r7, #928]	; 0x3a0
   19888:	ldr	r1, [r7, #932]	; 0x3a4
   1988c:	adds	r0, r0, #1
   19890:	adc	r1, r1, #0
   19894:	str	r0, [r7, #928]	; 0x3a0
   19898:	mov	r0, #1
   1989c:	str	r1, [r7, #932]	; 0x3a4
   198a0:	bl	12728 <exit@plt>
   198a4:	ldr	r0, [r7, #944]	; 0x3b0
   198a8:	ldr	r1, [r7, #948]	; 0x3b4
   198ac:	adds	r0, r0, #1
   198b0:	adc	r1, r1, #0
   198b4:	str	r0, [r7, #944]	; 0x3b0
   198b8:	mov	r0, #1
   198bc:	str	r1, [r7, #948]	; 0x3b4
   198c0:	bl	12728 <exit@plt>
   198c4:	ldr	r0, [r7, #960]	; 0x3c0
   198c8:	ldr	r1, [r7, #964]	; 0x3c4
   198cc:	adds	r0, r0, #1
   198d0:	adc	r1, r1, #0
   198d4:	str	r0, [r7, #960]	; 0x3c0
   198d8:	mov	r0, #1
   198dc:	str	r1, [r7, #964]	; 0x3c4
   198e0:	bl	12728 <exit@plt>
   198e4:	ldr	r0, [r7, #752]	; 0x2f0
   198e8:	ldr	r1, [r7, #756]	; 0x2f4
   198ec:	adds	r0, r0, #1
   198f0:	adc	r1, r1, #0
   198f4:	str	r0, [r7, #752]	; 0x2f0
   198f8:	mov	r0, #1
   198fc:	str	r1, [r7, #756]	; 0x2f4
   19900:	bl	12728 <exit@plt>
   19904:	ldr	r0, [r7, #672]	; 0x2a0
   19908:	ldr	r1, [r7, #676]	; 0x2a4
   1990c:	adds	r0, r0, #1
   19910:	adc	r1, r1, #0
   19914:	str	r0, [r7, #672]	; 0x2a0
   19918:	mov	r0, #1
   1991c:	str	r1, [r7, #676]	; 0x2a4
   19920:	bl	12728 <exit@plt>
   19924:	ldr	r0, [r7, #592]	; 0x250
   19928:	ldr	r1, [r7, #596]	; 0x254
   1992c:	adds	r0, r0, #1
   19930:	adc	r1, r1, #0
   19934:	str	r0, [r7, #592]	; 0x250
   19938:	mov	r0, #1
   1993c:	str	r1, [r7, #596]	; 0x254
   19940:	bl	12728 <exit@plt>
   19944:	nop	{0}
   19948:	andeq	r0, r0, r1
   1994c:	andeq	r0, r0, r0
   19950:	andeq	r0, r0, r1
   19954:	andeq	r0, r0, r0
   19958:	ldr	r0, [r7, #624]	; 0x270
   1995c:	ldr	r1, [r7, #628]	; 0x274
   19960:	adds	r0, r0, #1
   19964:	adc	r1, r1, #0
   19968:	str	r0, [r7, #624]	; 0x270
   1996c:	str	r1, [r7, #628]	; 0x274
   19970:	ldr	r0, [r7, #664]	; 0x298
   19974:	ldr	r1, [r7, #668]	; 0x29c
   19978:	adds	r0, r0, #1
   1997c:	str	r0, [r7, #664]	; 0x298
   19980:	movw	r0, #61664	; 0xf0e0
   19984:	adc	r1, r1, #0
   19988:	movt	r0, #2
   1998c:	str	r1, [r7, #668]	; 0x29c
   19990:	movw	r1, #57281	; 0xdfc1
   19994:	movt	r1, #1
   19998:	ldr	r0, [r0]
   1999c:	bl	1274c <fprintf@plt>
   199a0:	mov	r0, #1
   199a4:	bl	12728 <exit@plt>
   199a8:	ldr	r0, [r7, #632]	; 0x278
   199ac:	ldr	r1, [r7, #636]	; 0x27c
   199b0:	adds	r0, r0, #1
   199b4:	adc	r1, r1, #0
   199b8:	str	r0, [r7, #632]	; 0x278
   199bc:	mov	r0, #1
   199c0:	str	r1, [r7, #636]	; 0x27c
   199c4:	bl	12728 <exit@plt>
   199c8:	andeq	r0, r0, r1
   199cc:	andeq	r0, r0, r0
   199d0:	andeq	r0, r0, r1
   199d4:	andeq	r0, r0, r0
   199d8:	push	{r4, r5, r6, lr}
   199dc:	sub	sp, sp, #8
   199e0:	movw	r0, #57321	; 0xdfe9
   199e4:	movw	r1, #52401	; 0xccb1
   199e8:	movw	r2, #38886	; 0x97e6
   199ec:	movt	r0, #1
   199f0:	movt	r1, #1
   199f4:	movt	r2, #30243	; 0x7623
   199f8:	bl	19b00 <next@@Base+0x16a8>
   199fc:	movw	r0, #57664	; 0xe140
   19a00:	movw	r6, #57504	; 0xe0a0
   19a04:	mov	r5, #0
   19a08:	movt	r0, #1
   19a0c:	movt	r6, #1
   19a10:	add	r4, r0, #4
   19a14:	mov	r3, r6
   19a18:	ldr	r0, [r3, r5]!
   19a1c:	ldr	r1, [r3, #16]
   19a20:	str	r1, [sp]
   19a24:	ldmib	r3, {r1, r2}
   19a28:	ldrb	r3, [r3, #12]
   19a2c:	bl	1a220 <next@@Base+0x1dc8>
   19a30:	ldrd	r0, [r4, #-4]
   19a34:	bl	1aad4 <next@@Base+0x267c>
   19a38:	add	r5, r5, #20
   19a3c:	add	r4, r4, #8
   19a40:	cmp	r5, #160	; 0xa0
   19a44:	bne	19a14 <next@@Base+0x15bc>
   19a48:	bl	1b25c <next@@Base+0x2e04>
   19a4c:	add	sp, sp, #8
   19a50:	pop	{r4, r5, r6, lr}
   19a54:	b	1bfc8 <next@@Base+0x3b70>
   19a58:	push	{fp, lr}
   19a5c:	bl	199d8 <next@@Base+0x1580>
   19a60:	movw	r2, #672	; 0x2a0
   19a64:	vmov.i32	q8, #0	; 0x00000000
   19a68:	movw	r0, #608	; 0x260
   19a6c:	movt	r2, #3
   19a70:	movt	r0, #3
   19a74:	vst1.64	{d16-d17}, [r2 :128]
   19a78:	movw	r2, #688	; 0x2b0
   19a7c:	vst1.64	{d16-d17}, [r0 :128]
   19a80:	movw	r0, #624	; 0x270
   19a84:	movt	r2, #3
   19a88:	movt	r0, #3
   19a8c:	vst1.64	{d16-d17}, [r2 :128]
   19a90:	movw	r2, #704	; 0x2c0
   19a94:	add	r1, r0, #16
   19a98:	movt	r2, #3
   19a9c:	vst1.64	{d16-d17}, [r1 :128]
   19aa0:	mov	r1, #0
   19aa4:	str	r1, [r0, #32]
   19aa8:	vst1.64	{d16-d17}, [r2 :128]
   19aac:	movw	r2, #752	; 0x2f0
   19ab0:	movt	r2, #3
   19ab4:	vst1.64	{d16-d17}, [r2 :128]
   19ab8:	mov	r2, #36	; 0x24
   19abc:	vst1.64	{d16-d17}, [r0 :128], r2
   19ac0:	mov	r2, #1008	; 0x3f0
   19ac4:	str	r1, [r0]
   19ac8:	movw	r0, #720	; 0x2d0
   19acc:	mov	r1, #0
   19ad0:	movt	r0, #3
   19ad4:	vst1.64	{d16-d17}, [r0 :128]!
   19ad8:	vst1.64	{d16-d17}, [r0 :128]
   19adc:	movw	r0, #768	; 0x300
   19ae0:	movt	r0, #3
   19ae4:	bl	1277c <memset@plt>
   19ae8:	pop	{fp, pc}
   19aec:	movw	r0, #39384	; 0x99d8
   19af0:	movw	r1, #39512	; 0x9a58
   19af4:	movt	r0, #1
   19af8:	movt	r1, #1
   19afc:	b	1c47c <__gcov_flush@@Base+0xb8>
   19b00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b04:	add	fp, sp, #28
   19b08:	sub	sp, sp, #36	; 0x24
   19b0c:	mov	r9, r1
   19b10:	mov	r6, r0
   19b14:	add	r0, sp, #28
   19b18:	add	r1, sp, #32
   19b1c:	mov	r8, r2
   19b20:	bl	1c914 <__gcov_flush@@Base+0x550>
   19b24:	cmp	r0, #0
   19b28:	beq	19b6c <next@@Base+0x1714>
   19b2c:	mov	r4, r0
   19b30:	mov	r0, r6
   19b34:	ldr	r5, [sp, #32]
   19b38:	bl	12734 <strlen@plt>
   19b3c:	add	r0, r5, r0
   19b40:	add	r0, r0, #2
   19b44:	bl	126ec <malloc@plt>
   19b48:	mov	r7, r0
   19b4c:	ldr	r0, [sp, #28]
   19b50:	mov	r1, r6
   19b54:	mov	r2, r4
   19b58:	str	r0, [sp]
   19b5c:	mov	r0, r7
   19b60:	mov	r3, r5
   19b64:	bl	1c9a8 <__gcov_flush@@Base+0x5e4>
   19b68:	b	19b78 <next@@Base+0x1720>
   19b6c:	mov	r0, r6
   19b70:	bl	126a4 <strdup@plt>
   19b74:	mov	r7, r0
   19b78:	ldr	r0, [pc, #1492]	; 1a154 <next@@Base+0x1cfc>
   19b7c:	ldr	r6, [pc, #1492]	; 1a158 <next@@Base+0x1d00>
   19b80:	mov	r1, #2
   19b84:	add	r0, pc, r0
   19b88:	add	r6, pc, r6
   19b8c:	str	r7, [r0]
   19b90:	mov	r0, r7
   19b94:	mov	r5, #0
   19b98:	strb	r5, [r6]
   19b9c:	bl	126d4 <open64@plt>
   19ba0:	ldr	r4, [pc, #1460]	; 1a15c <next@@Base+0x1d04>
   19ba4:	cmn	r0, #1
   19ba8:	add	r4, pc, r4
   19bac:	str	r0, [r4]
   19bb0:	beq	19bc0 <next@@Base+0x1768>
   19bb4:	ldr	r6, [pc, #1444]	; 1a160 <next@@Base+0x1d08>
   19bb8:	add	r6, pc, r6
   19bbc:	b	19c1c <next@@Base+0x17c4>
   19bc0:	mov	r0, #1
   19bc4:	strb	r0, [r6]
   19bc8:	ldr	r0, [pc, #1488]	; 1a1a0 <next@@Base+0x1d48>
   19bcc:	mov	r1, #66	; 0x42
   19bd0:	mov	r2, #420	; 0x1a4
   19bd4:	ldr	r0, [pc, r0]
   19bd8:	bl	126d4 <open64@plt>
   19bdc:	ldr	r6, [pc, #1472]	; 1a1a4 <next@@Base+0x1d4c>
   19be0:	cmn	r0, #1
   19be4:	str	r0, [r4]
   19be8:	add	r6, pc, r6
   19bec:	bne	19c1c <next@@Base+0x17c4>
   19bf0:	ldr	r0, [pc, #1456]	; 1a1a8 <next@@Base+0x1d50>
   19bf4:	ldr	r0, [pc, r0]
   19bf8:	bl	1c58c <__gcov_flush@@Base+0x1c8>
   19bfc:	ldr	r0, [pc, #1448]	; 1a1ac <next@@Base+0x1d54>
   19c00:	mov	r1, #66	; 0x42
   19c04:	mov	r2, #420	; 0x1a4
   19c08:	ldr	r0, [pc, r0]
   19c0c:	bl	126d4 <open64@plt>
   19c10:	cmn	r0, #1
   19c14:	str	r0, [r4]
   19c18:	beq	1a10c <next@@Base+0x1cb4>
   19c1c:	str	r9, [sp, #20]
   19c20:	str	r8, [sp, #24]
   19c24:	bl	1c650 <__gcov_flush@@Base+0x28c>
   19c28:	ldr	r0, [pc, #1332]	; 1a164 <next@@Base+0x1d0c>
   19c2c:	mov	r1, r6
   19c30:	ldr	r0, [pc, r0]
   19c34:	bl	12620 <fdopen@plt>
   19c38:	ldr	r7, [pc, #1320]	; 1a168 <next@@Base+0x1d10>
   19c3c:	ldr	r9, [pc, #1320]	; 1a16c <next@@Base+0x1d14>
   19c40:	ldr	r1, [pc, #1320]	; 1a170 <next@@Base+0x1d18>
   19c44:	ldr	sl, [pc, #1320]	; 1a174 <next@@Base+0x1d1c>
   19c48:	add	r7, pc, r7
   19c4c:	add	r9, pc, r9
   19c50:	add	r1, pc, r1
   19c54:	add	sl, pc, sl
   19c58:	str	r5, [r7]
   19c5c:	str	r5, [r7, #4]
   19c60:	str	r5, [r9]
   19c64:	str	r5, [r9, #4]
   19c68:	str	r0, [r1]
   19c6c:	str	r5, [sl]
   19c70:	ldr	r6, [pc, #1280]	; 1a178 <next@@Base+0x1d20>
   19c74:	mov	r4, #131072	; 0x20000
   19c78:	add	r6, pc, r6
   19c7c:	ldrb	r1, [r6]
   19c80:	cmp	r1, #0
   19c84:	beq	19d78 <next@@Base+0x1920>
   19c88:	mov	r0, r4
   19c8c:	bl	126ec <malloc@plt>
   19c90:	mov	r8, r0
   19c94:	strd	r4, [r7]
   19c98:	str	r0, [sl]
   19c9c:	mov	r0, r8
   19ca0:	mov	r1, #0
   19ca4:	mov	r2, #131072	; 0x20000
   19ca8:	bl	1277c <memset@plt>
   19cac:	ldr	r0, [r9, #4]
   19cb0:	ldr	r1, [pc, #1284]	; 1a1bc <next@@Base+0x1d64>
   19cb4:	mov	r7, #7
   19cb8:	orr	r7, r7, #131072	; 0x20000
   19cbc:	ldr	r1, [pc, r1]
   19cc0:	ldr	sl, [pc, #1272]	; 1a1c0 <next@@Base+0x1d68>
   19cc4:	adds	r2, r1, #4
   19cc8:	add	sl, pc, sl
   19ccc:	adc	r3, r0, #0
   19cd0:	ldr	r5, [sl, #4]
   19cd4:	ldr	r4, [pc, #1256]	; 1a1c4 <next@@Base+0x1d6c>
   19cd8:	ldr	r4, [pc, r4]
   19cdc:	subs	r2, r4, r2
   19ce0:	sbcs	r2, r5, r3
   19ce4:	bcs	19df8 <next@@Base+0x19a0>
   19ce8:	adds	r1, r7, r1
   19cec:	adc	r0, r0, #0
   19cf0:	subs	r1, r1, #4
   19cf4:	sbc	r0, r0, #0
   19cf8:	mvn	r2, #0
   19cfc:	and	r5, r0, r2
   19d00:	mov	r0, #16646144	; 0xfe0000
   19d04:	orr	r0, r0, #-16777216	; 0xff000000
   19d08:	and	r4, r1, r0
   19d0c:	mov	r0, r8
   19d10:	mov	r1, r4
   19d14:	bl	126bc <realloc@plt>
   19d18:	ldr	r1, [pc, #1068]	; 1a14c <next@@Base+0x1cf4>
   19d1c:	strd	r4, [sl]
   19d20:	mov	r3, r0
   19d24:	mov	r7, r1
   19d28:	lsr	r2, r1, #24
   19d2c:	ldr	r1, [pc, #1176]	; 1a1cc <next@@Base+0x1d74>
   19d30:	ldrb	r6, [r6]
   19d34:	lsr	r4, r7, #16
   19d38:	add	r1, pc, r1
   19d3c:	str	r0, [r1]
   19d40:	ldr	r1, [r9, #4]
   19d44:	ldr	r5, [pc, #1156]	; 1a1d0 <next@@Base+0x1d78>
   19d48:	ldr	r5, [pc, r5]
   19d4c:	strb	r7, [r3, r5]!
   19d50:	strb	r2, [r3, #3]
   19d54:	lsr	r2, r7, #8
   19d58:	strb	r2, [r3, #1]
   19d5c:	adds	r2, r5, #4
   19d60:	adc	ip, r1, #0
   19d64:	cmp	r6, #1
   19d68:	strb	r4, [r3, #2]
   19d6c:	stm	r9, {r2, ip}
   19d70:	beq	19e3c <next@@Base+0x19e4>
   19d74:	b	19ff4 <next@@Base+0x1b9c>
   19d78:	mov	r1, #0
   19d7c:	mov	r2, #2
   19d80:	mov	r8, #0
   19d84:	bl	12800 <fseek@plt>
   19d88:	ldr	r0, [pc, #1004]	; 1a17c <next@@Base+0x1d24>
   19d8c:	ldr	r0, [pc, r0]
   19d90:	bl	1268c <ftell@plt>
   19d94:	mov	r2, r0
   19d98:	ldr	r0, [pc, #992]	; 1a180 <next@@Base+0x1d28>
   19d9c:	asr	r3, r2, #31
   19da0:	add	r0, pc, r0
   19da4:	cmp	r2, #0
   19da8:	strd	r2, [r0]
   19dac:	beq	1a09c <next@@Base+0x1c44>
   19db0:	ldr	r0, [pc, #972]	; 1a184 <next@@Base+0x1d2c>
   19db4:	mov	r1, r2
   19db8:	mov	r2, #3
   19dbc:	mov	r3, #1
   19dc0:	ldr	r0, [pc, r0]
   19dc4:	str	r8, [sp, #8]
   19dc8:	str	r8, [sp, #12]
   19dcc:	str	r0, [sp]
   19dd0:	mov	r0, #0
   19dd4:	bl	12680 <mmap64@plt>
   19dd8:	cmn	r0, #1
   19ddc:	str	r0, [sl]
   19de0:	beq	1a064 <next@@Base+0x1c0c>
   19de4:	ldrb	r1, [r6]
   19de8:	cmp	r1, #0
   19dec:	beq	19fb4 <next@@Base+0x1b5c>
   19df0:	mov	r8, r0
   19df4:	b	19cac <next@@Base+0x1854>
   19df8:	ldr	r1, [r9, #4]
   19dfc:	ldr	r5, [pc, #964]	; 1a1c8 <next@@Base+0x1d70>
   19e00:	ldr	r0, [pc, #836]	; 1a14c <next@@Base+0x1cf4>
   19e04:	mov	r6, r8
   19e08:	ldr	r5, [pc, r5]
   19e0c:	mov	r7, r0
   19e10:	lsr	r2, r7, #16
   19e14:	strb	r7, [r6, r5]!
   19e18:	lsr	r0, r0, #24
   19e1c:	lsr	r3, r7, #8
   19e20:	strb	r2, [r6, #2]
   19e24:	adds	r2, r5, #4
   19e28:	strb	r0, [r6, #3]
   19e2c:	strb	r3, [r6, #1]
   19e30:	adc	ip, r1, #0
   19e34:	stm	r9, {r2, ip}
   19e38:	mov	r0, r8
   19e3c:	ldr	r7, [sl, #4]
   19e40:	ldr	r3, [pc, #908]	; 1a1d4 <next@@Base+0x1d7c>
   19e44:	adds	r6, r5, #8
   19e48:	adc	r4, r1, #0
   19e4c:	ldr	r3, [pc, r3]
   19e50:	subs	r3, r3, r6
   19e54:	sbcs	r3, r7, r4
   19e58:	bcs	19efc <next@@Base+0x1aa4>
   19e5c:	mov	r2, #7
   19e60:	orr	r2, r2, #131072	; 0x20000
   19e64:	adds	r2, r5, r2
   19e68:	adc	r1, r1, #0
   19e6c:	mvn	r3, #0
   19e70:	and	r5, r1, r3
   19e74:	mov	r1, #16646144	; 0xfe0000
   19e78:	orr	r1, r1, #-16777216	; 0xff000000
   19e7c:	and	r4, r2, r1
   19e80:	mov	r1, r4
   19e84:	bl	126bc <realloc@plt>
   19e88:	strd	r4, [sl]
   19e8c:	ldr	r1, [pc, #840]	; 1a1dc <next@@Base+0x1d84>
   19e90:	mov	r4, r0
   19e94:	mov	lr, r9
   19e98:	add	r1, pc, r1
   19e9c:	str	r0, [r1]
   19ea0:	ldr	r1, [pc, #824]	; 1a1e0 <next@@Base+0x1d88>
   19ea4:	ldr	r2, [sp, #20]
   19ea8:	ldr	ip, [r9, #4]
   19eac:	add	r1, pc, r1
   19eb0:	ldrb	r3, [r1]
   19eb4:	ldrb	r1, [r2]
   19eb8:	ldrb	r7, [r2, #1]
   19ebc:	ldrb	r6, [r2, #2]
   19ec0:	ldrb	r5, [r2, #3]
   19ec4:	ldr	r2, [pc, #792]	; 1a1e4 <next@@Base+0x1d8c>
   19ec8:	ldr	r2, [pc, r2]
   19ecc:	strb	r1, [r4, r2]!
   19ed0:	strb	r5, [r4, #3]
   19ed4:	ldr	r5, [sp, #24]
   19ed8:	strb	r6, [r4, #2]
   19edc:	adds	r6, r2, #4
   19ee0:	adc	r1, ip, #0
   19ee4:	cmp	r3, #1
   19ee8:	str	r6, [lr]
   19eec:	strb	r7, [r4, #1]
   19ef0:	str	r1, [lr, #4]
   19ef4:	beq	19f3c <next@@Base+0x1ae4>
   19ef8:	b	1a034 <next@@Base+0x1bdc>
   19efc:	ldr	r6, [sp, #20]
   19f00:	mov	r5, r0
   19f04:	ldrb	r1, [r6]
   19f08:	ldrb	r3, [r6, #1]
   19f0c:	ldrb	r7, [r6, #2]
   19f10:	ldrb	r6, [r6, #3]
   19f14:	strb	r1, [r5, r2]!
   19f18:	strb	r6, [r5, #3]
   19f1c:	strb	r3, [r5, #1]
   19f20:	adds	r6, r2, #4
   19f24:	mov	r3, r9
   19f28:	adc	r1, ip, #0
   19f2c:	strb	r7, [r5, #2]
   19f30:	str	r6, [r3]
   19f34:	str	r1, [r3, #4]
   19f38:	ldr	r5, [sp, #24]
   19f3c:	ldr	r7, [sl, #4]
   19f40:	ldr	r4, [pc, #672]	; 1a1e8 <next@@Base+0x1d90>
   19f44:	adds	r3, r2, #8
   19f48:	adc	lr, ip, #0
   19f4c:	ldr	r4, [pc, r4]
   19f50:	subs	r3, r4, r3
   19f54:	sbcs	r3, r7, lr
   19f58:	bcs	19fac <next@@Base+0x1b54>
   19f5c:	mov	r1, #7
   19f60:	orr	r1, r1, #131072	; 0x20000
   19f64:	adds	r1, r2, r1
   19f68:	adc	r2, ip, #0
   19f6c:	mvn	r3, #0
   19f70:	and	r7, r2, r3
   19f74:	mov	r2, #16646144	; 0xfe0000
   19f78:	orr	r2, r2, #-16777216	; 0xff000000
   19f7c:	and	r4, r1, r2
   19f80:	mov	r1, r4
   19f84:	bl	126bc <realloc@plt>
   19f88:	stm	sl, {r4, r7}
   19f8c:	ldr	r1, [r9, #4]
   19f90:	ldr	r2, [pc, #596]	; 1a1ec <next@@Base+0x1d94>
   19f94:	mov	lr, r9
   19f98:	add	r2, pc, r2
   19f9c:	str	r0, [r2]
   19fa0:	ldr	r6, [pc, #584]	; 1a1f0 <next@@Base+0x1d98>
   19fa4:	ldr	r6, [pc, r6]
   19fa8:	b	1a034 <next@@Base+0x1bdc>
   19fac:	mov	lr, r9
   19fb0:	b	1a034 <next@@Base+0x1bdc>
   19fb4:	ldr	r6, [r9, #4]
   19fb8:	ldr	r5, [pc, #536]	; 1a1d8 <next@@Base+0x1d80>
   19fbc:	ldr	r1, [pc, #392]	; 1a14c <next@@Base+0x1cf4>
   19fc0:	mov	r4, r0
   19fc4:	ldr	r5, [pc, r5]
   19fc8:	mov	r7, r1
   19fcc:	lsr	r2, r7, #16
   19fd0:	strb	r7, [r4, r5]!
   19fd4:	lsr	r1, r1, #24
   19fd8:	strb	r2, [r4, #2]
   19fdc:	adds	r2, r5, #4
   19fe0:	lsr	r3, r7, #8
   19fe4:	adc	ip, r6, #0
   19fe8:	strb	r1, [r4, #3]
   19fec:	strb	r3, [r4, #1]
   19ff0:	stm	r9, {r2, ip}
   19ff4:	ldr	r4, [sp, #20]
   19ff8:	mov	r5, r0
   19ffc:	mov	lr, r9
   1a000:	ldrb	r1, [r4]
   1a004:	ldrb	r6, [r4, #3]
   1a008:	ldrb	r3, [r4, #1]
   1a00c:	ldrb	r7, [r4, #2]
   1a010:	strb	r1, [r5, r2]!
   1a014:	strb	r6, [r5, #3]
   1a018:	adds	r6, r2, #4
   1a01c:	adc	r1, ip, #0
   1a020:	strb	r7, [r5, #2]
   1a024:	strb	r3, [r5, #1]
   1a028:	str	r6, [lr]
   1a02c:	str	r1, [lr, #4]
   1a030:	ldr	r5, [sp, #24]
   1a034:	lsr	r2, r5, #24
   1a038:	strb	r5, [r0, r6]!
   1a03c:	lsr	r3, r5, #16
   1a040:	lsr	r7, r5, #8
   1a044:	strb	r2, [r0, #3]
   1a048:	strb	r3, [r0, #2]
   1a04c:	strb	r7, [r0, #1]
   1a050:	adds	r0, r6, #4
   1a054:	adc	r1, r1, #0
   1a058:	strd	r0, [lr]
   1a05c:	sub	sp, fp, #28
   1a060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a064:	bl	12758 <__errno_location@plt>
   1a068:	ldr	r1, [pc, #280]	; 1a188 <next@@Base+0x1d30>
   1a06c:	ldr	r1, [pc, r1]
   1a070:	ldr	r0, [r0]
   1a074:	ldr	r4, [r1]
   1a078:	ldr	r5, [pc, #268]	; 1a18c <next@@Base+0x1d34>
   1a07c:	ldr	r5, [pc, r5]
   1a080:	bl	12704 <strerror@plt>
   1a084:	ldr	r1, [pc, #260]	; 1a190 <next@@Base+0x1d38>
   1a088:	mov	r3, r0
   1a08c:	mov	r0, r4
   1a090:	add	r1, pc, r1
   1a094:	mov	r2, r5
   1a098:	bl	1274c <fprintf@plt>
   1a09c:	ldr	r0, [pc, #240]	; 1a194 <next@@Base+0x1d3c>
   1a0a0:	str	r8, [sl]
   1a0a4:	mov	r2, #16646144	; 0xfe0000
   1a0a8:	add	r0, pc, r0
   1a0ac:	orr	r2, r2, #-16777216	; 0xff000000
   1a0b0:	str	r8, [r0]
   1a0b4:	str	r8, [r0, #4]
   1a0b8:	mov	r0, #1
   1a0bc:	strb	r0, [r6]
   1a0c0:	ldr	r0, [r9, #4]
   1a0c4:	ldr	r1, [pc, #204]	; 1a198 <next@@Base+0x1d40>
   1a0c8:	mvn	r3, #0
   1a0cc:	eor	r3, r0, r3
   1a0d0:	ldr	r1, [pc, r1]
   1a0d4:	eor	r2, r1, r2
   1a0d8:	orrs	r2, r2, r3
   1a0dc:	beq	19c9c <next@@Base+0x1844>
   1a0e0:	ldr	r2, [pc, #104]	; 1a150 <next@@Base+0x1cf8>
   1a0e4:	ldr	r7, [pc, #176]	; 1a19c <next@@Base+0x1d44>
   1a0e8:	adds	r1, r1, r2
   1a0ec:	mov	r2, #16646144	; 0xfe0000
   1a0f0:	orr	r2, r2, #-16777216	; 0xff000000
   1a0f4:	and	r4, r1, r2
   1a0f8:	adc	r0, r0, #0
   1a0fc:	mvn	r1, #0
   1a100:	and	r5, r0, r1
   1a104:	add	r7, pc, r7
   1a108:	b	19c88 <next@@Base+0x1830>
   1a10c:	bl	12758 <__errno_location@plt>
   1a110:	ldr	r1, [pc, #152]	; 1a1b0 <next@@Base+0x1d58>
   1a114:	ldr	r1, [pc, r1]
   1a118:	ldr	r0, [r0]
   1a11c:	ldr	r4, [r1]
   1a120:	ldr	r5, [pc, #140]	; 1a1b4 <next@@Base+0x1d5c>
   1a124:	ldr	r5, [pc, r5]
   1a128:	bl	12704 <strerror@plt>
   1a12c:	ldr	r1, [pc, #132]	; 1a1b8 <next@@Base+0x1d60>
   1a130:	mov	r3, r0
   1a134:	mov	r0, r4
   1a138:	add	r1, pc, r1
   1a13c:	mov	r2, r5
   1a140:	bl	1274c <fprintf@plt>
   1a144:	sub	sp, fp, #28
   1a148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a14c:	strbvs	r6, [r3, -r1, ror #8]!
   1a150:	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
   1a154:	andeq	r6, r1, r4, ror #22
   1a158:	andeq	r6, r1, r4, ror #22
   1a15c:	andeq	r5, r1, r0, lsr #10
   1a160:	andeq	r4, r0, r0, asr #11
   1a164:	muleq	r1, r8, r4
   1a168:			; <UNDEFINED> instruction: 0x00016ab0
   1a16c:			; <UNDEFINED> instruction: 0x00016ab4
   1a170:	andeq	r6, r1, r0, lsr #21
   1a174:	andeq	r6, r1, r0, lsr #21
   1a178:	andeq	r6, r1, r4, ror sl
   1a17c:	andeq	r6, r1, r4, ror #18
   1a180:	andeq	r6, r1, r8, ror r9
   1a184:	andeq	r5, r1, r8, lsl #6
   1a188:	andeq	r5, r1, ip, asr #32
   1a18c:	andeq	r6, r1, ip, ror #12
   1a190:	andeq	r4, r0, sl, asr #4
   1a194:	andeq	r6, r1, r0, asr r6
   1a198:	andeq	r6, r1, r0, lsr r6
   1a19c:	strdeq	r6, [r1], -r4
   1a1a0:	andeq	r6, r1, r4, lsl fp
   1a1a4:	muleq	r0, r4, r5
   1a1a8:	strdeq	r6, [r1], -r4
   1a1ac:	andeq	r6, r1, r0, ror #21
   1a1b0:	andeq	r4, r1, r4, lsr #31
   1a1b4:	andeq	r6, r1, r4, asr #11
   1a1b8:	andeq	r4, r0, r8, asr #32
   1a1bc:	andeq	r6, r1, r4, asr #20
   1a1c0:	andeq	r6, r1, r0, lsr sl
   1a1c4:	andeq	r6, r1, r0, lsr #20
   1a1c8:	strdeq	r6, [r1], -r8
   1a1cc:			; <UNDEFINED> instruction: 0x000169bc
   1a1d0:			; <UNDEFINED> instruction: 0x000169b8
   1a1d4:	andeq	r6, r1, ip, lsr #17
   1a1d8:	andeq	r6, r1, ip, lsr r7
   1a1dc:	andeq	r6, r1, ip, asr r8
   1a1e0:	andeq	r6, r1, r0, asr #16
   1a1e4:	andeq	r6, r1, r8, lsr r8
   1a1e8:	andeq	r6, r1, ip, lsr #15
   1a1ec:	andeq	r6, r1, ip, asr r7
   1a1f0:	andeq	r6, r1, ip, asr r7
   1a1f4:	ldr	r0, [r0]
   1a1f8:	cmn	r0, #1
   1a1fc:	beq	1a21c <next@@Base+0x1dc4>
   1a200:	ldr	r0, [r1, r0, lsl #2]
   1a204:	cmp	r0, #0
   1a208:	bxeq	lr
   1a20c:	ldrd	r2, [r0]
   1a210:	adds	r2, r2, #1
   1a214:	adc	r3, r3, #0
   1a218:	strd	r2, [r0]
   1a21c:	bx	lr
   1a220:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a224:	add	fp, sp, #28
   1a228:	sub	sp, sp, #12
   1a22c:	ldr	r7, [pc, #2008]	; 1aa0c <next@@Base+0x25b4>
   1a230:	mov	sl, #2
   1a234:	cmp	r3, #0
   1a238:	movne	sl, #3
   1a23c:	ldr	r7, [pc, r7]
   1a240:	cmp	r7, #0
   1a244:	beq	1aa04 <next@@Base+0x25ac>
   1a248:	stm	sp, {r0, r2, r3}
   1a24c:	ldr	r0, [pc, #1980]	; 1aa10 <next@@Base+0x25b8>
   1a250:	mov	r5, r1
   1a254:	add	r0, pc, r0
   1a258:	ldrb	r0, [r0]
   1a25c:	ldr	r8, [pc, #1968]	; 1aa14 <next@@Base+0x25bc>
   1a260:	cmp	r0, #1
   1a264:	add	r8, pc, r8
   1a268:	bne	1a2ec <next@@Base+0x1e94>
   1a26c:	ldr	r4, [pc, #1956]	; 1aa18 <next@@Base+0x25c0>
   1a270:	ldr	r0, [r8, #4]
   1a274:	ldr	r1, [pc, #1952]	; 1aa1c <next@@Base+0x25c4>
   1a278:	add	r4, pc, r4
   1a27c:	ldr	r1, [pc, r1]
   1a280:	ldr	r7, [r4, #4]
   1a284:	ldr	r6, [pc, #1940]	; 1aa20 <next@@Base+0x25c8>
   1a288:	adds	r2, r1, #4
   1a28c:	adc	r3, r0, #0
   1a290:	ldr	r6, [pc, r6]
   1a294:	subs	r2, r6, r2
   1a298:	sbcs	r2, r7, r3
   1a29c:	bcs	1a2ec <next@@Base+0x1e94>
   1a2a0:	mov	r2, #7
   1a2a4:	orr	r2, r2, #131072	; 0x20000
   1a2a8:	adds	r1, r2, r1
   1a2ac:	adc	r0, r0, #0
   1a2b0:	subs	r1, r1, #4
   1a2b4:	sbc	r0, r0, #0
   1a2b8:	mvn	r2, #0
   1a2bc:	and	r7, r0, r2
   1a2c0:	mov	r0, #16646144	; 0xfe0000
   1a2c4:	orr	r0, r0, #-16777216	; 0xff000000
   1a2c8:	ldr	r9, [pc, #1876]	; 1aa24 <next@@Base+0x25cc>
   1a2cc:	and	r6, r1, r0
   1a2d0:	ldr	r0, [pc, #1872]	; 1aa28 <next@@Base+0x25d0>
   1a2d4:	mov	r1, r6
   1a2d8:	add	r9, pc, r9
   1a2dc:	ldr	r0, [pc, r0]
   1a2e0:	bl	126bc <realloc@plt>
   1a2e4:	strd	r6, [r4]
   1a2e8:	str	r0, [r9]
   1a2ec:	ldr	r7, [pc, #1848]	; 1aa2c <next@@Base+0x25d4>
   1a2f0:	mov	r0, #0
   1a2f4:	mov	r2, #1
   1a2f8:	ldr	r7, [pc, r7]
   1a2fc:	ldr	ip, [pc, #1836]	; 1aa30 <next@@Base+0x25d8>
   1a300:	adds	r4, r7, #4
   1a304:	ldr	ip, [pc, ip]
   1a308:	ldr	r6, [r8, #4]
   1a30c:	mov	r1, ip
   1a310:	adc	r9, r6, #0
   1a314:	strb	r0, [r1, r7]!
   1a318:	cmp	r5, #0
   1a31c:	strb	r2, [r1, #3]
   1a320:	strb	r0, [r1, #2]
   1a324:	strb	r0, [r1, #1]
   1a328:	stm	r8, {r4, r9}
   1a32c:	mov	r8, r5
   1a330:	beq	1a34c <next@@Base+0x1ef4>
   1a334:	mov	r0, r8
   1a338:	mov	r5, ip
   1a33c:	bl	12734 <strlen@plt>
   1a340:	add	r0, sl, r0, lsr #2
   1a344:	mov	ip, r5
   1a348:	add	sl, r0, #2
   1a34c:	ldr	r0, [pc, #1760]	; 1aa34 <next@@Base+0x25dc>
   1a350:	add	r0, pc, r0
   1a354:	ldrb	r0, [r0]
   1a358:	cmp	r0, #0
   1a35c:	beq	1a438 <next@@Base+0x1fe0>
   1a360:	ldr	lr, [pc, #1748]	; 1aa3c <next@@Base+0x25e4>
   1a364:	adds	r0, r7, #8
   1a368:	adc	r1, r6, #0
   1a36c:	add	lr, pc, lr
   1a370:	ldr	r2, [lr, #4]
   1a374:	ldr	r3, [pc, #1732]	; 1aa40 <next@@Base+0x25e8>
   1a378:	ldr	r3, [pc, r3]
   1a37c:	subs	r0, r3, r0
   1a380:	sbcs	r0, r2, r1
   1a384:	bcs	1a4a4 <next@@Base+0x204c>
   1a388:	mov	r0, #7
   1a38c:	orr	r0, r0, #131072	; 0x20000
   1a390:	adds	r0, r7, r0
   1a394:	adc	r1, r6, #0
   1a398:	mvn	r2, #0
   1a39c:	and	r5, r1, r2
   1a3a0:	mov	r1, #16646144	; 0xfe0000
   1a3a4:	orr	r1, r1, #-16777216	; 0xff000000
   1a3a8:	and	r6, r0, r1
   1a3ac:	ldr	r4, [pc, #1684]	; 1aa48 <next@@Base+0x25f0>
   1a3b0:	mov	r0, ip
   1a3b4:	mov	r1, r6
   1a3b8:	add	r4, pc, r4
   1a3bc:	mov	r7, lr
   1a3c0:	bl	126bc <realloc@plt>
   1a3c4:	mov	lr, r7
   1a3c8:	mov	ip, r0
   1a3cc:	str	r6, [lr]
   1a3d0:	str	r5, [lr, #4]
   1a3d4:	str	ip, [r4]
   1a3d8:	ldr	r1, [pc, #1644]	; 1aa4c <next@@Base+0x25f4>
   1a3dc:	lsr	r0, sl, #24
   1a3e0:	add	r1, pc, r1
   1a3e4:	lsr	r3, sl, #16
   1a3e8:	ldrb	r2, [r1]
   1a3ec:	ldr	r1, [pc, #1628]	; 1aa50 <next@@Base+0x25f8>
   1a3f0:	add	r1, pc, r1
   1a3f4:	mov	r7, r1
   1a3f8:	ldr	r9, [r1, #4]
   1a3fc:	ldr	r4, [pc, #1616]	; 1aa54 <next@@Base+0x25fc>
   1a400:	mov	r1, ip
   1a404:	ldr	r4, [pc, r4]
   1a408:	strb	sl, [r1, r4]!
   1a40c:	strb	r0, [r1, #3]
   1a410:	lsr	r0, sl, #8
   1a414:	strb	r0, [r1, #1]
   1a418:	adds	r0, r4, #4
   1a41c:	strb	r3, [r1, #2]
   1a420:	adc	r1, r9, #0
   1a424:	mov	sl, r7
   1a428:	cmp	r2, #1
   1a42c:	strd	r0, [sl]
   1a430:	bne	1a46c <next@@Base+0x2014>
   1a434:	b	1a4d8 <next@@Base+0x2080>
   1a438:	mov	r3, ip
   1a43c:	lsr	r0, sl, #24
   1a440:	strb	sl, [r3, r4]!
   1a444:	lsr	r1, sl, #16
   1a448:	lsr	r2, sl, #8
   1a44c:	strb	r0, [r3, #3]
   1a450:	strb	r1, [r3, #2]
   1a454:	strb	r2, [r3, #1]
   1a458:	ldr	sl, [pc, #1496]	; 1aa38 <next@@Base+0x25e0>
   1a45c:	adds	r0, r7, #8
   1a460:	adc	r1, r6, #0
   1a464:	add	sl, pc, sl
   1a468:	strd	r0, [sl]
   1a46c:	ldr	r5, [sp]
   1a470:	mov	r6, ip
   1a474:	lsr	r2, r5, #24
   1a478:	strb	r5, [r6, r0]!
   1a47c:	lsr	r3, r5, #16
   1a480:	lsr	r7, r5, #8
   1a484:	strb	r2, [r6, #3]
   1a488:	strb	r3, [r6, #2]
   1a48c:	strb	r7, [r6, #1]
   1a490:	adds	r2, r0, #4
   1a494:	adc	r3, r1, #0
   1a498:	ldmib	sp, {r5, r9}
   1a49c:	strd	r2, [sl]
   1a4a0:	b	1a64c <next@@Base+0x21f4>
   1a4a4:	mov	r3, ip
   1a4a8:	lsr	r0, sl, #24
   1a4ac:	strb	sl, [r3, r4]!
   1a4b0:	lsr	r1, sl, #16
   1a4b4:	lsr	r2, sl, #8
   1a4b8:	strb	r0, [r3, #3]
   1a4bc:	strb	r1, [r3, #2]
   1a4c0:	strb	r2, [r3, #1]
   1a4c4:	ldr	sl, [pc, #1400]	; 1aa44 <next@@Base+0x25ec>
   1a4c8:	adds	r0, r7, #8
   1a4cc:	adc	r1, r6, #0
   1a4d0:	add	sl, pc, sl
   1a4d4:	strd	r0, [sl]
   1a4d8:	ldr	r7, [lr, #4]
   1a4dc:	ldr	r6, [pc, #1396]	; 1aa58 <next@@Base+0x2600>
   1a4e0:	adds	r2, r4, #8
   1a4e4:	adc	r3, r9, #0
   1a4e8:	ldr	r6, [pc, r6]
   1a4ec:	subs	r2, r6, r2
   1a4f0:	sbcs	r2, r7, r3
   1a4f4:	bcs	1a59c <next@@Base+0x2144>
   1a4f8:	mov	r0, #7
   1a4fc:	orr	r0, r0, #131072	; 0x20000
   1a500:	adds	r0, r4, r0
   1a504:	adc	r1, r9, #0
   1a508:	mvn	r2, #0
   1a50c:	and	r5, r1, r2
   1a510:	mov	r1, #16646144	; 0xfe0000
   1a514:	orr	r1, r1, #-16777216	; 0xff000000
   1a518:	and	r4, r0, r1
   1a51c:	ldr	r7, [pc, #1336]	; 1aa5c <next@@Base+0x2604>
   1a520:	mov	r0, ip
   1a524:	mov	r1, r4
   1a528:	add	r7, pc, r7
   1a52c:	mov	r6, lr
   1a530:	bl	126bc <realloc@plt>
   1a534:	mov	lr, r6
   1a538:	str	r0, [r7]
   1a53c:	strd	r4, [lr]
   1a540:	mov	ip, r0
   1a544:	ldr	r6, [sp]
   1a548:	ldr	r0, [pc, #1296]	; 1aa60 <next@@Base+0x2608>
   1a54c:	ldr	r1, [sl, #4]
   1a550:	mov	r3, ip
   1a554:	add	r0, pc, r0
   1a558:	lsr	r2, r6, #24
   1a55c:	ldrb	r7, [r0]
   1a560:	ldr	r0, [pc, #1276]	; 1aa64 <next@@Base+0x260c>
   1a564:	ldr	r0, [pc, r0]
   1a568:	strb	r6, [r3, r0]!
   1a56c:	ldmib	sp, {r5, r9}
   1a570:	strb	r2, [r3, #3]
   1a574:	lsr	r2, r6, #8
   1a578:	lsr	r6, r6, #16
   1a57c:	strb	r2, [r3, #1]
   1a580:	adds	r2, r0, #4
   1a584:	strb	r6, [r3, #2]
   1a588:	adc	r3, r1, #0
   1a58c:	cmp	r7, #1
   1a590:	strd	r2, [sl]
   1a594:	beq	1a5d0 <next@@Base+0x2178>
   1a598:	b	1a64c <next@@Base+0x21f4>
   1a59c:	ldr	r5, [sp]
   1a5a0:	mov	r6, ip
   1a5a4:	lsr	r2, r5, #24
   1a5a8:	strb	r5, [r6, r0]!
   1a5ac:	lsr	r3, r5, #16
   1a5b0:	lsr	r7, r5, #8
   1a5b4:	strb	r2, [r6, #3]
   1a5b8:	strb	r3, [r6, #2]
   1a5bc:	strb	r7, [r6, #1]
   1a5c0:	adds	r2, r0, #4
   1a5c4:	adc	r3, r1, #0
   1a5c8:	ldmib	sp, {r5, r9}
   1a5cc:	strd	r2, [sl]
   1a5d0:	str	r8, [sp, #8]
   1a5d4:	mov	r8, lr
   1a5d8:	adds	r7, r0, #8
   1a5dc:	ldr	r6, [r8, #4]
   1a5e0:	ldr	r4, [pc, #1152]	; 1aa68 <next@@Base+0x2610>
   1a5e4:	adc	lr, r1, #0
   1a5e8:	ldr	r4, [pc, r4]
   1a5ec:	subs	r7, r4, r7
   1a5f0:	sbcs	r7, r6, lr
   1a5f4:	bcs	1a648 <next@@Base+0x21f0>
   1a5f8:	mov	r2, #7
   1a5fc:	orr	r2, r2, #131072	; 0x20000
   1a600:	adds	r0, r0, r2
   1a604:	adc	r1, r1, #0
   1a608:	mvn	r2, #0
   1a60c:	and	r7, r1, r2
   1a610:	mov	r1, #16646144	; 0xfe0000
   1a614:	orr	r1, r1, #-16777216	; 0xff000000
   1a618:	and	r6, r0, r1
   1a61c:	ldr	r4, [pc, #1096]	; 1aa6c <next@@Base+0x2614>
   1a620:	mov	r0, ip
   1a624:	mov	r1, r6
   1a628:	add	r4, pc, r4
   1a62c:	bl	126bc <realloc@plt>
   1a630:	strd	r6, [r8]
   1a634:	str	r0, [r4]
   1a638:	ldr	r3, [sl, #4]
   1a63c:	ldr	r2, [pc, #1068]	; 1aa70 <next@@Base+0x2618>
   1a640:	mov	ip, r0
   1a644:	ldr	r2, [pc, r2]
   1a648:	ldr	r8, [sp, #8]
   1a64c:	mov	r6, ip
   1a650:	lsr	r7, r5, #8
   1a654:	strb	r5, [r6, r2]!
   1a658:	adds	r4, r2, #4
   1a65c:	lsr	r0, r5, #24
   1a660:	lsr	r1, r5, #16
   1a664:	strb	r7, [r6, #1]
   1a668:	adc	r7, r3, #0
   1a66c:	cmp	r9, #0
   1a670:	strb	r0, [r6, #3]
   1a674:	strb	r1, [r6, #2]
   1a678:	stm	sl, {r4, r7}
   1a67c:	beq	1a750 <next@@Base+0x22f8>
   1a680:	ldr	r0, [pc, #1004]	; 1aa74 <next@@Base+0x261c>
   1a684:	ldr	sl, [fp, #8]
   1a688:	add	r0, pc, r0
   1a68c:	ldrb	r0, [r0]
   1a690:	cmp	r0, #1
   1a694:	bne	1a71c <next@@Base+0x22c4>
   1a698:	ldr	r9, [pc, #984]	; 1aa78 <next@@Base+0x2620>
   1a69c:	adds	r0, r2, #8
   1a6a0:	adc	r1, r3, #0
   1a6a4:	add	r9, pc, r9
   1a6a8:	ldr	r6, [r9, #4]
   1a6ac:	ldr	r5, [pc, #968]	; 1aa7c <next@@Base+0x2624>
   1a6b0:	ldr	r5, [pc, r5]
   1a6b4:	subs	r0, r5, r0
   1a6b8:	sbcs	r0, r6, r1
   1a6bc:	bcs	1a71c <next@@Base+0x22c4>
   1a6c0:	mov	r0, #7
   1a6c4:	orr	r0, r0, #131072	; 0x20000
   1a6c8:	adds	r0, r2, r0
   1a6cc:	adc	r1, r3, #0
   1a6d0:	mvn	r2, #0
   1a6d4:	and	r5, r1, r2
   1a6d8:	mov	r1, #16646144	; 0xfe0000
   1a6dc:	orr	r1, r1, #-16777216	; 0xff000000
   1a6e0:	and	r6, r0, r1
   1a6e4:	ldr	r4, [pc, #916]	; 1aa80 <next@@Base+0x2628>
   1a6e8:	mov	r0, ip
   1a6ec:	mov	r1, r6
   1a6f0:	add	r4, pc, r4
   1a6f4:	bl	126bc <realloc@plt>
   1a6f8:	str	r6, [r9]
   1a6fc:	str	r5, [r9, #4]
   1a700:	mov	ip, r0
   1a704:	ldr	r0, [pc, #888]	; 1aa84 <next@@Base+0x262c>
   1a708:	str	ip, [r4]
   1a70c:	add	r0, pc, r0
   1a710:	ldr	r7, [r0, #4]
   1a714:	ldr	r4, [pc, #876]	; 1aa88 <next@@Base+0x2630>
   1a718:	ldr	r4, [pc, r4]
   1a71c:	mov	r3, ip
   1a720:	lsr	r0, sl, #24
   1a724:	strb	sl, [r3, r4]!
   1a728:	lsr	r1, sl, #16
   1a72c:	lsr	r2, sl, #8
   1a730:	strb	r0, [r3, #3]
   1a734:	strb	r1, [r3, #2]
   1a738:	strb	r2, [r3, #1]
   1a73c:	ldr	sl, [pc, #840]	; 1aa8c <next@@Base+0x2634>
   1a740:	adds	r4, r4, #4
   1a744:	adc	r7, r7, #0
   1a748:	add	sl, pc, sl
   1a74c:	stm	sl, {r4, r7}
   1a750:	cmp	r8, #0
   1a754:	beq	1aa04 <next@@Base+0x25ac>
   1a758:	mov	r0, r8
   1a75c:	mov	r9, ip
   1a760:	bl	12734 <strlen@plt>
   1a764:	mov	r6, #1
   1a768:	add	r5, r6, r0, lsr #2
   1a76c:	ldr	r0, [pc, #796]	; 1aa90 <next@@Base+0x2638>
   1a770:	add	r0, pc, r0
   1a774:	ldrb	r0, [r0]
   1a778:	cmp	r0, #1
   1a77c:	bne	1a820 <next@@Base+0x23c8>
   1a780:	ldr	sl, [pc, #780]	; 1aa94 <next@@Base+0x263c>
   1a784:	adds	r0, r4, #4
   1a788:	adc	r1, r7, #0
   1a78c:	add	sl, pc, sl
   1a790:	ldr	r2, [sl, #4]
   1a794:	ldr	r3, [pc, #764]	; 1aa98 <next@@Base+0x2640>
   1a798:	ldr	r3, [pc, r3]
   1a79c:	subs	r0, r3, r0
   1a7a0:	sbcs	r0, r2, r1
   1a7a4:	bcs	1a834 <next@@Base+0x23dc>
   1a7a8:	mov	r0, #0
   1a7ac:	str	r0, [sp, #8]
   1a7b0:	mov	r0, #7
   1a7b4:	orr	r0, r0, #131072	; 0x20000
   1a7b8:	adds	r0, r0, r4
   1a7bc:	adc	r1, r7, #0
   1a7c0:	subs	r0, r0, #4
   1a7c4:	sbc	r1, r1, #0
   1a7c8:	mvn	r2, #0
   1a7cc:	and	r7, r1, r2
   1a7d0:	mov	r1, #16646144	; 0xfe0000
   1a7d4:	orr	r1, r1, #-16777216	; 0xff000000
   1a7d8:	and	r4, r0, r1
   1a7dc:	ldr	r6, [pc, #700]	; 1aaa0 <next@@Base+0x2648>
   1a7e0:	mov	r0, r9
   1a7e4:	mov	r1, r4
   1a7e8:	add	r6, pc, r6
   1a7ec:	bl	126bc <realloc@plt>
   1a7f0:	stm	sl, {r4, r7}
   1a7f4:	str	r0, [r6]
   1a7f8:	ldr	sl, [pc, #676]	; 1aaa4 <next@@Base+0x264c>
   1a7fc:	mov	r3, r0
   1a800:	add	sl, pc, sl
   1a804:	ldr	r7, [sl, #4]
   1a808:	ldr	r0, [pc, #664]	; 1aaa8 <next@@Base+0x2650>
   1a80c:	add	r0, pc, r0
   1a810:	ldrb	r6, [r0]
   1a814:	ldr	r4, [pc, #656]	; 1aaac <next@@Base+0x2654>
   1a818:	ldr	r4, [pc, r4]
   1a81c:	b	1a848 <next@@Base+0x23f0>
   1a820:	mov	r0, #0
   1a824:	str	r0, [sp, #8]
   1a828:	mov	r6, #0
   1a82c:	mov	r3, r9
   1a830:	b	1a848 <next@@Base+0x23f0>
   1a834:	mov	r0, #0
   1a838:	str	r0, [sp, #8]
   1a83c:	ldr	sl, [pc, #600]	; 1aa9c <next@@Base+0x2644>
   1a840:	mov	r3, r9
   1a844:	add	sl, pc, sl
   1a848:	mov	r9, r3
   1a84c:	strb	r5, [r3, r4]!
   1a850:	lsr	r0, r5, #24
   1a854:	adds	r4, r4, #4
   1a858:	lsr	r1, r5, #16
   1a85c:	lsr	r2, r5, #8
   1a860:	strb	r0, [r3, #3]
   1a864:	mov	r0, r8
   1a868:	adc	r5, r7, #0
   1a86c:	strb	r1, [r3, #2]
   1a870:	strb	r2, [r3, #1]
   1a874:	strd	r4, [sl]
   1a878:	bl	12734 <strlen@plt>
   1a87c:	mov	r7, r0
   1a880:	cmp	r6, #0
   1a884:	beq	1a920 <next@@Base+0x24c8>
   1a888:	ldr	r6, [pc, #544]	; 1aab0 <next@@Base+0x2658>
   1a88c:	adds	r0, r4, r7
   1a890:	adc	r1, r5, #0
   1a894:	add	r6, pc, r6
   1a898:	ldr	r2, [r6, #4]
   1a89c:	ldr	r3, [pc, #528]	; 1aab4 <next@@Base+0x265c>
   1a8a0:	ldr	r3, [pc, r3]
   1a8a4:	subs	r3, r3, r0
   1a8a8:	sbcs	r2, r2, r1
   1a8ac:	bcs	1a918 <next@@Base+0x24c0>
   1a8b0:	mov	r2, #7
   1a8b4:	orr	r2, r2, #131072	; 0x20000
   1a8b8:	adds	r0, r2, r0
   1a8bc:	adc	r1, r1, #0
   1a8c0:	subs	r0, r0, #8
   1a8c4:	sbc	r1, r1, #0
   1a8c8:	mvn	r2, #0
   1a8cc:	and	r5, r1, r2
   1a8d0:	mov	r1, #16646144	; 0xfe0000
   1a8d4:	orr	r1, r1, #-16777216	; 0xff000000
   1a8d8:	and	r4, r0, r1
   1a8dc:	mov	r0, r9
   1a8e0:	mov	r1, r4
   1a8e4:	bl	126bc <realloc@plt>
   1a8e8:	strd	r4, [r6]
   1a8ec:	ldr	r1, [pc, #452]	; 1aab8 <next@@Base+0x2660>
   1a8f0:	ldr	r5, [sl, #4]
   1a8f4:	add	r1, pc, r1
   1a8f8:	str	r0, [r1]
   1a8fc:	ldr	r1, [pc, #440]	; 1aabc <next@@Base+0x2664>
   1a900:	add	r1, pc, r1
   1a904:	ldrb	r1, [r1]
   1a908:	str	r1, [sp, #8]
   1a90c:	ldr	r4, [pc, #428]	; 1aac0 <next@@Base+0x2668>
   1a910:	ldr	r4, [pc, r4]
   1a914:	b	1a924 <next@@Base+0x24cc>
   1a918:	mov	r0, #1
   1a91c:	str	r0, [sp, #8]
   1a920:	mov	r0, r9
   1a924:	mov	r9, r0
   1a928:	add	r0, r0, r4
   1a92c:	mov	r1, r8
   1a930:	mov	r2, r7
   1a934:	bl	12674 <memcpy@plt>
   1a938:	adds	r6, r4, r7
   1a93c:	mov	r0, r8
   1a940:	adc	r5, r5, #0
   1a944:	str	r6, [sl]
   1a948:	str	r5, [sl, #4]
   1a94c:	bl	12734 <strlen@plt>
   1a950:	and	r0, r0, #3
   1a954:	rsb	r4, r0, #4
   1a958:	ldr	r0, [sp, #8]
   1a95c:	cmp	r0, #0
   1a960:	beq	1a9e8 <next@@Base+0x2590>
   1a964:	ldr	r7, [pc, #344]	; 1aac4 <next@@Base+0x266c>
   1a968:	adds	r0, r6, r4
   1a96c:	adc	r1, r5, #0
   1a970:	add	r7, pc, r7
   1a974:	ldr	r2, [r7, #4]
   1a978:	ldr	r3, [pc, #328]	; 1aac8 <next@@Base+0x2670>
   1a97c:	ldr	r3, [pc, r3]
   1a980:	subs	r3, r3, r0
   1a984:	sbcs	r2, r2, r1
   1a988:	bcs	1a9e8 <next@@Base+0x2590>
   1a98c:	mov	r2, #7
   1a990:	orr	r2, r2, #131072	; 0x20000
   1a994:	adds	r0, r2, r0
   1a998:	adc	r1, r1, #0
   1a99c:	subs	r0, r0, #8
   1a9a0:	sbc	r1, r1, #0
   1a9a4:	mvn	r2, #0
   1a9a8:	and	r5, r1, r2
   1a9ac:	mov	r1, #16646144	; 0xfe0000
   1a9b0:	orr	r1, r1, #-16777216	; 0xff000000
   1a9b4:	and	r6, r0, r1
   1a9b8:	ldr	r8, [pc, #268]	; 1aacc <next@@Base+0x2674>
   1a9bc:	mov	r0, r9
   1a9c0:	mov	r1, r6
   1a9c4:	add	r8, pc, r8
   1a9c8:	bl	126bc <realloc@plt>
   1a9cc:	str	r6, [r7]
   1a9d0:	str	r5, [r7, #4]
   1a9d4:	str	r0, [r8]
   1a9d8:	ldr	r5, [sl, #4]
   1a9dc:	ldr	r6, [pc, #236]	; 1aad0 <next@@Base+0x2678>
   1a9e0:	mov	r9, r0
   1a9e4:	ldr	r6, [pc, r6]
   1a9e8:	add	r0, r9, r6
   1a9ec:	mov	r1, #0
   1a9f0:	mov	r2, r4
   1a9f4:	bl	1277c <memset@plt>
   1a9f8:	adds	r0, r6, r4
   1a9fc:	adc	r1, r5, #0
   1aa00:	strd	r0, [sl]
   1aa04:	sub	sp, fp, #28
   1aa08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa0c:			; <UNDEFINED> instruction: 0x000164b4
   1aa10:	muleq	r1, r8, r4
   1aa14:	muleq	r1, ip, r4
   1aa18:	andeq	r6, r1, r0, lsl #9
   1aa1c:	andeq	r6, r1, r4, lsl #9
   1aa20:	andeq	r6, r1, r8, ror #8
   1aa24:	andeq	r6, r1, ip, lsl r4
   1aa28:	andeq	r6, r1, r8, lsl r4
   1aa2c:	andeq	r6, r1, r8, lsl #8
   1aa30:	strdeq	r6, [r1], -r0
   1aa34:	muleq	r1, ip, r3
   1aa38:	muleq	r1, ip, r2
   1aa3c:	andeq	r6, r1, ip, lsl #7
   1aa40:	andeq	r6, r1, r0, lsl #7
   1aa44:	andeq	r6, r1, r0, lsr r2
   1aa48:	andeq	r6, r1, ip, lsr r3
   1aa4c:	andeq	r6, r1, ip, lsl #6
   1aa50:	andeq	r6, r1, r0, lsl r3
   1aa54:	strdeq	r6, [r1], -ip
   1aa58:	andeq	r6, r1, r0, lsl r2
   1aa5c:	andeq	r6, r1, ip, asr #3
   1aa60:	muleq	r1, r8, r1
   1aa64:	muleq	r1, ip, r1
   1aa68:	andeq	r6, r1, r0, lsl r1
   1aa6c:	andeq	r6, r1, ip, asr #1
   1aa70:	strheq	r6, [r1], -ip
   1aa74:	andeq	r6, r1, r4, rrx
   1aa78:	andeq	r6, r1, r4, asr r0
   1aa7c:	andeq	r6, r1, r8, asr #32
   1aa80:	andeq	r6, r1, r4
   1aa84:	strdeq	r5, [r1], -r4
   1aa88:	andeq	r5, r1, r8, ror #31
   1aa8c:			; <UNDEFINED> instruction: 0x00015fb8
   1aa90:	andeq	r5, r1, ip, ror pc
   1aa94:	andeq	r5, r1, ip, ror #30
   1aa98:	andeq	r5, r1, r0, ror #30
   1aa9c:			; <UNDEFINED> instruction: 0x00015ebc
   1aaa0:	andeq	r5, r1, ip, lsl #30
   1aaa4:	andeq	r5, r1, r0, lsl #30
   1aaa8:	andeq	r5, r1, r0, ror #29
   1aaac:	andeq	r5, r1, r8, ror #29
   1aab0:	andeq	r5, r1, r4, ror #28
   1aab4:	andeq	r5, r1, r8, asr lr
   1aab8:	andeq	r5, r1, r0, lsl #28
   1aabc:	andeq	r5, r1, ip, ror #27
   1aac0:	strdeq	r5, [r1], -r0
   1aac4:	andeq	r5, r1, r8, lsl #27
   1aac8:	andeq	r5, r1, ip, ror sp
   1aacc:	andeq	r5, r1, r0, lsr sp
   1aad0:	andeq	r5, r1, ip, lsl sp
   1aad4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aad8:	add	fp, sp, #28
   1aadc:	sub	sp, sp, #28
   1aae0:	mov	ip, r0
   1aae4:	ldr	r0, [pc, #1740]	; 1b1b8 <next@@Base+0x2d60>
   1aae8:	ldr	r0, [pc, r0]
   1aaec:	cmp	r0, #0
   1aaf0:	beq	1ac0c <next@@Base+0x27b4>
   1aaf4:	ldr	r5, [pc, #1728]	; 1b1bc <next@@Base+0x2d64>
   1aaf8:	mov	sl, r1
   1aafc:	add	r5, pc, r5
   1ab00:	ldr	r3, [r5, #4]
   1ab04:	ldr	r4, [pc, #1716]	; 1b1c0 <next@@Base+0x2d68>
   1ab08:	ldr	r4, [pc, r4]
   1ab0c:	ldr	r6, [pc, #1712]	; 1b1c4 <next@@Base+0x2d6c>
   1ab10:	add	r6, pc, r6
   1ab14:	ldrb	r0, [r6]
   1ab18:	cmp	r0, #0
   1ab1c:	beq	1ac14 <next@@Base+0x27bc>
   1ab20:	ldr	r8, [pc, #1732]	; 1b1ec <next@@Base+0x2d94>
   1ab24:	mov	r5, #10551296	; 0xa10000
   1ab28:	adds	r9, r4, #4
   1ab2c:	add	r8, pc, r8
   1ab30:	adc	r2, r3, #0
   1ab34:	ldr	r0, [r8, #4]
   1ab38:	ldr	r1, [pc, #1712]	; 1b1f0 <next@@Base+0x2d98>
   1ab3c:	orr	r5, r5, #16777216	; 0x1000000
   1ab40:	ldr	r1, [pc, r1]
   1ab44:	subs	r1, r1, r9
   1ab48:	sbcs	r0, r0, r2
   1ab4c:	bcs	1ad18 <next@@Base+0x28c0>
   1ab50:	mov	r0, #3
   1ab54:	orr	r0, r0, #131072	; 0x20000
   1ab58:	adds	r0, r4, r0
   1ab5c:	adc	r1, r3, #0
   1ab60:	mvn	r2, #0
   1ab64:	and	r9, r1, r2
   1ab68:	mov	r1, #16646144	; 0xfe0000
   1ab6c:	orr	r1, r1, #-16777216	; 0xff000000
   1ab70:	and	r4, r0, r1
   1ab74:	ldr	r0, [pc, #1664]	; 1b1fc <next@@Base+0x2da4>
   1ab78:	mov	r1, r4
   1ab7c:	mov	r7, ip
   1ab80:	ldr	r0, [pc, r0]
   1ab84:	bl	126bc <realloc@plt>
   1ab88:	ldr	ip, [pc, #1648]	; 1b200 <next@@Base+0x2da8>
   1ab8c:	ldr	lr, [pc, #1648]	; 1b204 <next@@Base+0x2dac>
   1ab90:	stm	r8, {r4, r9}
   1ab94:	ldr	r1, [pc, #1644]	; 1b208 <next@@Base+0x2db0>
   1ab98:	add	ip, pc, ip
   1ab9c:	add	lr, pc, lr
   1aba0:	add	r1, pc, r1
   1aba4:	mov	r2, r0
   1aba8:	str	r2, [r1]
   1abac:	mov	r6, ip
   1abb0:	ldrb	ip, [ip]
   1abb4:	ldr	r3, [lr, #4]
   1abb8:	ldr	r4, [pc, #1612]	; 1b20c <next@@Base+0x2db4>
   1abbc:	lsr	r0, r5, #24
   1abc0:	mov	r1, r8
   1abc4:	ldr	r4, [pc, r4]
   1abc8:	str	r2, [sp, #20]
   1abcc:	lsl	r8, r7, #1
   1abd0:	strb	r5, [r2, r4]!
   1abd4:	adds	r9, r4, #4
   1abd8:	strb	r0, [r2, #3]
   1abdc:	lsr	r0, r5, #16
   1abe0:	strb	r0, [r2, #2]
   1abe4:	lsr	r0, r5, #8
   1abe8:	strb	r0, [r2, #1]
   1abec:	adc	r5, r3, #0
   1abf0:	mov	r0, #0
   1abf4:	cmp	ip, #1
   1abf8:	str	r3, [sp, #16]
   1abfc:	str	r9, [lr]
   1ac00:	str	r5, [lr, #4]
   1ac04:	beq	1ad6c <next@@Base+0x2914>
   1ac08:	b	1aed0 <next@@Base+0x2a78>
   1ac0c:	sub	sp, fp, #28
   1ac10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac14:	ldr	r0, [pc, #1452]	; 1b1c8 <next@@Base+0x2d70>
   1ac18:	mov	r7, r3
   1ac1c:	mov	r9, #0
   1ac20:	ldr	r0, [pc, r0]
   1ac24:	str	r0, [sp, #20]
   1ac28:	ldrb	r1, [r0, r4]!
   1ac2c:	str	r7, [sp, #16]
   1ac30:	ldrb	r2, [r0, #1]
   1ac34:	ldrb	r3, [r0, #2]
   1ac38:	ldrb	r0, [r0, #3]
   1ac3c:	orr	r1, r1, r2, lsl #8
   1ac40:	orr	r1, r1, r3, lsl #16
   1ac44:	adds	r2, r4, #4
   1ac48:	orr	r3, r1, r0, lsl #24
   1ac4c:	adc	r7, r7, #0
   1ac50:	mov	r1, r5
   1ac54:	stm	r5, {r2, r7}
   1ac58:	mov	r5, #10551296	; 0xa10000
   1ac5c:	orr	r5, r5, #16777216	; 0x1000000
   1ac60:	cmn	r3, #1
   1ac64:	beq	1ae18 <next@@Base+0x29c0>
   1ac68:	cmp	r3, r5
   1ac6c:	bne	1ae28 <next@@Base+0x29d0>
   1ac70:	str	r7, [sp, #8]
   1ac74:	ldr	r0, [sp, #20]
   1ac78:	str	r4, [sp, #4]
   1ac7c:	mov	r8, r5
   1ac80:	ldr	r3, [r0, r2]
   1ac84:	ldr	r0, [sp, #16]
   1ac88:	adds	r5, r4, #8
   1ac8c:	adc	r9, r0, #0
   1ac90:	cmn	r3, #1
   1ac94:	stm	r1, {r5, r9}
   1ac98:	beq	1ae34 <next@@Base+0x29dc>
   1ac9c:	lsr	r0, r3, #1
   1aca0:	mov	r7, ip
   1aca4:	cmp	r0, ip
   1aca8:	bne	1ae34 <next@@Base+0x29dc>
   1acac:	lsl	r0, r7, #3
   1acb0:	mov	r4, r2
   1acb4:	bl	126ec <malloc@plt>
   1acb8:	cmp	r7, #0
   1acbc:	beq	1ae5c <next@@Base+0x2a04>
   1acc0:	str	r0, [sp, #12]
   1acc4:	str	r7, [sp, #24]
   1acc8:	ldr	r2, [sp, #20]
   1accc:	ldr	r3, [r2, r5]!
   1acd0:	adds	r5, r5, #8
   1acd4:	ldr	r2, [r2, #4]
   1acd8:	str	r3, [r0]
   1acdc:	adc	r9, r9, #0
   1ace0:	str	r2, [r0, #4]
   1ace4:	add	r0, r0, #8
   1ace8:	subs	r7, r7, #1
   1acec:	bne	1acc8 <next@@Base+0x2870>
   1acf0:	ldr	lr, [pc, #1260]	; 1b1e4 <next@@Base+0x2d8c>
   1acf4:	add	lr, pc, lr
   1acf8:	stm	lr, {r5, r9}
   1acfc:	ldr	ip, [pc, #1252]	; 1b1e8 <next@@Base+0x2d90>
   1ad00:	mov	r1, lr
   1ad04:	ldr	r0, [sp, #12]
   1ad08:	add	ip, pc, ip
   1ad0c:	mov	r6, ip
   1ad10:	ldr	ip, [sp, #24]
   1ad14:	b	1ae78 <next@@Base+0x2a20>
   1ad18:	str	r3, [sp, #16]
   1ad1c:	ldr	r3, [pc, #1232]	; 1b1f4 <next@@Base+0x2d9c>
   1ad20:	mov	lr, r5
   1ad24:	mov	r7, ip
   1ad28:	lsr	ip, r5, #16
   1ad2c:	ldr	r3, [pc, r3]
   1ad30:	lsr	r1, r5, #8
   1ad34:	str	r3, [sp, #20]
   1ad38:	strb	lr, [r3, r4]!
   1ad3c:	lsr	r0, lr, #24
   1ad40:	strb	r1, [r3, #1]
   1ad44:	strb	r0, [r3, #3]
   1ad48:	strb	ip, [r3, #2]
   1ad4c:	ldr	lr, [pc, #1188]	; 1b1f8 <next@@Base+0x2da0>
   1ad50:	lsl	r5, r7, #1
   1ad54:	add	lr, pc, lr
   1ad58:	mov	r1, r8
   1ad5c:	mov	r8, r5
   1ad60:	str	r9, [lr]
   1ad64:	str	r2, [lr, #4]
   1ad68:	mov	r5, r2
   1ad6c:	str	r8, [sp, #24]
   1ad70:	mov	r8, r1
   1ad74:	ldr	r0, [sp, #16]
   1ad78:	ldr	r2, [r8, #4]
   1ad7c:	ldr	r3, [pc, #1164]	; 1b210 <next@@Base+0x2db8>
   1ad80:	adds	ip, r4, #8
   1ad84:	adc	r1, r0, #0
   1ad88:	mov	r0, #0
   1ad8c:	ldr	r3, [pc, r3]
   1ad90:	subs	r3, r3, ip
   1ad94:	sbcs	r1, r2, r1
   1ad98:	bcs	1ae10 <next@@Base+0x29b8>
   1ad9c:	ldr	r5, [pc, #1136]	; 1b214 <next@@Base+0x2dbc>
   1ada0:	mov	r0, #3
   1ada4:	ldr	r1, [sp, #16]
   1ada8:	orr	r0, r0, #131072	; 0x20000
   1adac:	adds	r0, r0, r4
   1adb0:	adc	r1, r1, #0
   1adb4:	adds	r0, r0, #4
   1adb8:	adc	r1, r1, #0
   1adbc:	mvn	r2, #0
   1adc0:	and	r9, r1, r2
   1adc4:	mov	r1, #16646144	; 0xfe0000
   1adc8:	orr	r1, r1, #-16777216	; 0xff000000
   1adcc:	and	r4, r0, r1
   1add0:	ldr	r0, [sp, #20]
   1add4:	mov	r1, r4
   1add8:	add	r5, pc, r5
   1addc:	bl	126bc <realloc@plt>
   1ade0:	ldr	ip, [pc, #1072]	; 1b218 <next@@Base+0x2dc0>
   1ade4:	ldr	lr, [pc, #1072]	; 1b21c <next@@Base+0x2dc4>
   1ade8:	stm	r8, {r4, r9}
   1adec:	add	lr, pc, lr
   1adf0:	str	r0, [r5]
   1adf4:	str	r0, [sp, #20]
   1adf8:	ldr	r5, [lr, #4]
   1adfc:	ldr	r9, [pc, #1052]	; 1b220 <next@@Base+0x2dc8>
   1ae00:	add	ip, pc, ip
   1ae04:	mov	r6, ip
   1ae08:	mov	r0, #0
   1ae0c:	ldr	r9, [pc, r9]
   1ae10:	ldr	r8, [sp, #24]
   1ae14:	b	1aed0 <next@@Base+0x2a78>
   1ae18:	mov	r3, r2
   1ae1c:	ldr	r2, [sp, #16]
   1ae20:	mov	r0, #0
   1ae24:	b	1ae90 <next@@Base+0x2a38>
   1ae28:	ldr	r1, [pc, #924]	; 1b1cc <next@@Base+0x2d74>
   1ae2c:	add	r1, pc, r1
   1ae30:	b	1ae3c <next@@Base+0x29e4>
   1ae34:	ldr	r1, [pc, #924]	; 1b1d8 <next@@Base+0x2d80>
   1ae38:	add	r1, pc, r1
   1ae3c:	ldr	r0, [pc, #908]	; 1b1d0 <next@@Base+0x2d78>
   1ae40:	ldr	r0, [pc, r0]
   1ae44:	ldr	r0, [r0]
   1ae48:	ldr	r2, [pc, #900]	; 1b1d4 <next@@Base+0x2d7c>
   1ae4c:	ldr	r2, [pc, r2]
   1ae50:	sub	sp, fp, #28
   1ae54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae58:	b	1274c <fprintf@plt>
   1ae5c:	ldr	lr, [pc, #888]	; 1b1dc <next@@Base+0x2d84>
   1ae60:	ldr	ip, [pc, #888]	; 1b1e0 <next@@Base+0x2d88>
   1ae64:	add	lr, pc, lr
   1ae68:	add	ip, pc, ip
   1ae6c:	mov	r6, ip
   1ae70:	mov	r1, lr
   1ae74:	mov	ip, r7
   1ae78:	mov	r3, r4
   1ae7c:	ldr	r7, [sp, #8]
   1ae80:	ldr	r4, [sp, #4]
   1ae84:	ldr	r2, [sp, #16]
   1ae88:	mov	r9, #0
   1ae8c:	mov	r5, r8
   1ae90:	mov	lr, r1
   1ae94:	mov	r1, #1
   1ae98:	str	r4, [lr]
   1ae9c:	str	r2, [lr, #4]
   1aea0:	ldr	r2, [sp, #20]
   1aea4:	lsl	r8, ip, #1
   1aea8:	strb	r5, [r2, r4]!
   1aeac:	mov	r5, r7
   1aeb0:	strb	r1, [r2, #3]
   1aeb4:	mov	r1, #161	; 0xa1
   1aeb8:	strb	r9, [r2, #1]
   1aebc:	mov	r9, r3
   1aec0:	strb	r1, [r2, #2]
   1aec4:	str	r9, [lr]
   1aec8:	str	r7, [lr, #4]
   1aecc:	mov	r7, ip
   1aed0:	ldr	r3, [sp, #20]
   1aed4:	lsr	r1, r8, #16
   1aed8:	mov	ip, r3
   1aedc:	strb	r8, [r3, r9]!
   1aee0:	lsr	r4, r8, #24
   1aee4:	lsr	r2, r8, #8
   1aee8:	adds	r8, r9, #4
   1aeec:	strb	r1, [r3, #2]
   1aef0:	adc	r1, r5, #0
   1aef4:	cmp	r7, #0
   1aef8:	strb	r4, [r3, #3]
   1aefc:	strb	r2, [r3, #1]
   1af00:	str	r8, [lr]
   1af04:	str	r1, [lr, #4]
   1af08:	str	r7, [sp, #24]
   1af0c:	beq	1b1ac <next@@Base+0x2d54>
   1af10:	ldr	r7, [pc, #780]	; 1b224 <next@@Base+0x2dcc>
   1af14:	mov	r4, lr
   1af18:	mov	r2, r0
   1af1c:	add	r7, pc, r7
   1af20:	str	r0, [sp, #12]
   1af24:	b	1afc0 <next@@Base+0x2b68>
   1af28:	mov	r7, ip
   1af2c:	lsr	r2, r4, #24
   1af30:	strb	r4, [r7, r8]!
   1af34:	mov	lr, r6
   1af38:	lsr	r9, r4, #16
   1af3c:	lsr	r6, r4, #8
   1af40:	strb	r2, [r7, #3]
   1af44:	adds	r2, r8, #4
   1af48:	mov	r4, r0
   1af4c:	strb	r9, [r7, #2]
   1af50:	mov	r3, ip
   1af54:	strb	r6, [r7, #1]
   1af58:	adc	r9, r1, #0
   1af5c:	stm	r4, {r2, r9}
   1af60:	mov	ip, r3
   1af64:	lsr	r1, r5, #16
   1af68:	strb	r5, [r3, r2]!
   1af6c:	lsr	r0, r5, #24
   1af70:	lsr	r7, r5, #8
   1af74:	adds	r8, r2, #4
   1af78:	strb	r1, [r3, #2]
   1af7c:	adc	r1, r9, #0
   1af80:	strb	r0, [r3, #3]
   1af84:	strb	r7, [r3, #1]
   1af88:	str	r8, [r4]
   1af8c:	str	r1, [r4, #4]
   1af90:	ldr	r0, [sp, #24]
   1af94:	ldr	r2, [sp, #16]
   1af98:	mov	r6, lr
   1af9c:	subs	r0, r0, #1
   1afa0:	str	r0, [sp, #24]
   1afa4:	ldr	sl, [sp, #20]
   1afa8:	ldr	r0, [sp, #12]
   1afac:	ldr	r7, [pc, #676]	; 1b258 <next@@Base+0x2e00>
   1afb0:	add	r2, r2, #8
   1afb4:	add	sl, sl, #8
   1afb8:	add	r7, pc, r7
   1afbc:	beq	1b1ac <next@@Base+0x2d54>
   1afc0:	cmp	r0, #0
   1afc4:	mov	r0, r4
   1afc8:	str	r2, [sp, #16]
   1afcc:	beq	1afd8 <next@@Base+0x2b80>
   1afd0:	ldrd	r2, [r2]
   1afd4:	b	1afe0 <next@@Base+0x2b88>
   1afd8:	mov	r2, #0
   1afdc:	mov	r3, #0
   1afe0:	ldrd	r4, [sl]
   1afe4:	adds	r4, r4, r2
   1afe8:	adc	r5, r5, r3
   1afec:	strd	r4, [sl]
   1aff0:	ldrb	r2, [r6]
   1aff4:	str	sl, [sp, #20]
   1aff8:	cmp	r2, #0
   1affc:	beq	1af28 <next@@Base+0x2ad0>
   1b000:	ldr	r3, [r7, #4]
   1b004:	ldr	r6, [pc, #540]	; 1b228 <next@@Base+0x2dd0>
   1b008:	adds	r2, r8, #4
   1b00c:	adc	r9, r1, #0
   1b010:	ldr	r6, [pc, r6]
   1b014:	subs	r2, r6, r2
   1b018:	sbcs	r2, r3, r9
   1b01c:	bcs	1b0c8 <next@@Base+0x2c70>
   1b020:	mov	r2, #3
   1b024:	orr	r2, r2, #131072	; 0x20000
   1b028:	adds	r0, r8, r2
   1b02c:	adc	r1, r1, #0
   1b030:	mvn	r2, #0
   1b034:	and	r8, r1, r2
   1b038:	mov	r1, #16646144	; 0xfe0000
   1b03c:	orr	r1, r1, #-16777216	; 0xff000000
   1b040:	and	r6, r0, r1
   1b044:	mov	r0, ip
   1b048:	mov	r1, r6
   1b04c:	bl	126bc <realloc@plt>
   1b050:	ldr	ip, [pc, #468]	; 1b22c <next@@Base+0x2dd4>
   1b054:	ldr	lr, [pc, #468]	; 1b230 <next@@Base+0x2dd8>
   1b058:	stm	r7, {r6, r8}
   1b05c:	mov	r3, r0
   1b060:	ldr	r0, [pc, #460]	; 1b234 <next@@Base+0x2ddc>
   1b064:	add	lr, pc, lr
   1b068:	mov	r9, lr
   1b06c:	add	r0, pc, r0
   1b070:	add	ip, pc, ip
   1b074:	str	r3, [r0]
   1b078:	mov	lr, ip
   1b07c:	ldrb	ip, [ip]
   1b080:	ldr	r1, [r9, #4]
   1b084:	ldr	r8, [pc, #428]	; 1b238 <next@@Base+0x2de0>
   1b088:	mov	r7, r3
   1b08c:	lsr	r2, r4, #24
   1b090:	ldr	r8, [pc, r8]
   1b094:	lsr	r6, r4, #16
   1b098:	strb	r4, [r7, r8]!
   1b09c:	strb	r2, [r7, #3]
   1b0a0:	lsr	r2, r4, #8
   1b0a4:	strb	r2, [r7, #1]
   1b0a8:	adds	r2, r8, #4
   1b0ac:	mov	r4, r9
   1b0b0:	adc	r9, r1, #0
   1b0b4:	cmp	ip, #1
   1b0b8:	strb	r6, [r7, #2]
   1b0bc:	stm	r4, {r2, r9}
   1b0c0:	bne	1af60 <next@@Base+0x2b08>
   1b0c4:	b	1b0fc <next@@Base+0x2ca4>
   1b0c8:	mov	r6, ip
   1b0cc:	lsr	r2, r4, #24
   1b0d0:	strb	r4, [r6, r8]!
   1b0d4:	lsr	r9, r4, #16
   1b0d8:	lsr	r7, r4, #8
   1b0dc:	strb	r2, [r6, #3]
   1b0e0:	adds	r2, r8, #4
   1b0e4:	mov	r4, r0
   1b0e8:	strb	r9, [r6, #2]
   1b0ec:	mov	r3, ip
   1b0f0:	strb	r7, [r6, #1]
   1b0f4:	adc	r9, r1, #0
   1b0f8:	stm	r4, {r2, r9}
   1b0fc:	ldr	lr, [pc, #312]	; 1b23c <next@@Base+0x2de4>
   1b100:	mov	r0, r4
   1b104:	adds	r7, r8, #8
   1b108:	add	lr, pc, lr
   1b10c:	adc	ip, r1, #0
   1b110:	ldr	r4, [lr, #4]
   1b114:	ldr	r6, [pc, #292]	; 1b240 <next@@Base+0x2de8>
   1b118:	ldr	r6, [pc, r6]
   1b11c:	subs	r7, r6, r7
   1b120:	sbcs	r7, r4, ip
   1b124:	bcs	1b19c <next@@Base+0x2d44>
   1b128:	mov	r2, #3
   1b12c:	orr	r2, r2, #131072	; 0x20000
   1b130:	adds	r0, r2, r8
   1b134:	adc	r1, r1, #0
   1b138:	adds	r0, r0, #4
   1b13c:	adc	r1, r1, #0
   1b140:	mvn	r2, #0
   1b144:	and	r7, r1, r2
   1b148:	mov	r1, #16646144	; 0xfe0000
   1b14c:	orr	r1, r1, #-16777216	; 0xff000000
   1b150:	and	r6, r0, r1
   1b154:	mov	r0, r3
   1b158:	mov	r1, r6
   1b15c:	mov	r8, lr
   1b160:	bl	126bc <realloc@plt>
   1b164:	ldr	lr, [pc, #220]	; 1b248 <next@@Base+0x2df0>
   1b168:	strd	r6, [r8]
   1b16c:	mov	r3, r0
   1b170:	add	lr, pc, lr
   1b174:	mov	r4, lr
   1b178:	ldr	r9, [lr, #4]
   1b17c:	ldr	r0, [pc, #200]	; 1b24c <next@@Base+0x2df4>
   1b180:	add	r0, pc, r0
   1b184:	str	r3, [r0]
   1b188:	ldr	r2, [pc, #192]	; 1b250 <next@@Base+0x2df8>
   1b18c:	ldr	r2, [pc, r2]
   1b190:	ldr	lr, [pc, #188]	; 1b254 <next@@Base+0x2dfc>
   1b194:	add	lr, pc, lr
   1b198:	b	1af60 <next@@Base+0x2b08>
   1b19c:	ldr	lr, [pc, #160]	; 1b244 <next@@Base+0x2dec>
   1b1a0:	mov	r4, r0
   1b1a4:	add	lr, pc, lr
   1b1a8:	b	1af60 <next@@Base+0x2b08>
   1b1ac:	sub	sp, fp, #28
   1b1b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1b4:	b	1265c <free@plt>
   1b1b8:	andeq	r5, r1, r8, lsl #24
   1b1bc:	andeq	r5, r1, r4, lsl #24
   1b1c0:	strdeq	r5, [r1], -r8
   1b1c4:	ldrdeq	r5, [r1], -ip
   1b1c8:	ldrdeq	r5, [r1], -r4
   1b1cc:	andeq	r3, r0, r4, ror r3
   1b1d0:	andeq	r4, r1, r8, ror r2
   1b1d4:	muleq	r1, ip, r8
   1b1d8:			; <UNDEFINED> instruction: 0x000033b2
   1b1dc:	muleq	r1, ip, r8
   1b1e0:	andeq	r5, r1, r4, lsl #17
   1b1e4:	andeq	r5, r1, ip, lsl #20
   1b1e8:	andeq	r5, r1, r4, ror #19
   1b1ec:	andeq	r5, r1, ip, asr #23
   1b1f0:			; <UNDEFINED> instruction: 0x00015bb8
   1b1f4:	andeq	r5, r1, r8, asr #19
   1b1f8:	andeq	r5, r1, ip, lsr #19
   1b1fc:	andeq	r5, r1, r4, ror fp
   1b200:	andeq	r5, r1, r4, asr fp
   1b204:	andeq	r5, r1, r4, ror #22
   1b208:	andeq	r5, r1, r4, asr fp
   1b20c:	andeq	r5, r1, ip, lsr fp
   1b210:	andeq	r5, r1, ip, ror #18
   1b214:	andeq	r5, r1, ip, lsl r9
   1b218:	andeq	r5, r1, ip, ror #17
   1b21c:	andeq	r5, r1, r4, lsl r9
   1b220:	strdeq	r5, [r1], -r4
   1b224:	ldrdeq	r5, [r1], -ip
   1b228:	andeq	r5, r1, r8, ror #13
   1b22c:	andeq	r5, r1, ip, ror r6
   1b230:	muleq	r1, ip, r6
   1b234:	andeq	r5, r1, r8, lsl #13
   1b238:	andeq	r5, r1, r0, ror r6
   1b23c:	strdeq	r5, [r1], -r0
   1b240:	andeq	r5, r1, r0, ror #11
   1b244:	andeq	r5, r1, r8, asr #10
   1b248:	muleq	r1, r0, r5
   1b24c:	andeq	r5, r1, r4, ror r5
   1b250:	andeq	r5, r1, r4, ror r5
   1b254:	andeq	r5, r1, r8, asr r5
   1b258:	andeq	r5, r1, r0, asr #14
   1b25c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b260:	add	fp, sp, #28
   1b264:	sub	sp, sp, #4
   1b268:	ldr	r0, [pc, #3180]	; 1bedc <next@@Base+0x3a84>
   1b26c:	ldr	r0, [pc, r0]
   1b270:	cmp	r0, #0
   1b274:	beq	1b8d0 <next@@Base+0x3478>
   1b278:	ldr	sl, [pc, #3168]	; 1bee0 <next@@Base+0x3a88>
   1b27c:	add	sl, pc, sl
   1b280:	ldr	r6, [sl, #4]
   1b284:	ldr	r5, [pc, #3160]	; 1bee4 <next@@Base+0x3a8c>
   1b288:	ldr	r5, [pc, r5]
   1b28c:	ldr	r8, [pc, #3156]	; 1bee8 <next@@Base+0x3a90>
   1b290:	add	r8, pc, r8
   1b294:	ldrb	r0, [r8]
   1b298:	cmp	r0, #0
   1b29c:	beq	1b360 <next@@Base+0x2f08>
   1b2a0:	ldr	r9, [pc, #3164]	; 1bf04 <next@@Base+0x3aac>
   1b2a4:	adds	r2, r5, #4
   1b2a8:	adc	ip, r6, #0
   1b2ac:	add	r9, pc, r9
   1b2b0:	ldr	r0, [r9, #4]
   1b2b4:	ldr	r3, [pc, #3148]	; 1bf08 <next@@Base+0x3ab0>
   1b2b8:	ldr	r3, [pc, r3]
   1b2bc:	subs	r3, r3, r2
   1b2c0:	sbcs	r0, r0, ip
   1b2c4:	bcs	1b3b4 <next@@Base+0x2f5c>
   1b2c8:	mov	r0, #7
   1b2cc:	orr	r0, r0, #131072	; 0x20000
   1b2d0:	adds	r0, r0, r5
   1b2d4:	adc	r1, r6, #0
   1b2d8:	subs	r0, r0, #4
   1b2dc:	sbc	r1, r1, #0
   1b2e0:	mvn	r2, #0
   1b2e4:	and	r5, r1, r2
   1b2e8:	mov	r1, #16646144	; 0xfe0000
   1b2ec:	orr	r1, r1, #-16777216	; 0xff000000
   1b2f0:	ldr	r4, [pc, #3096]	; 1bf10 <next@@Base+0x3ab8>
   1b2f4:	and	r6, r0, r1
   1b2f8:	ldr	r0, [pc, #3092]	; 1bf14 <next@@Base+0x3abc>
   1b2fc:	mov	r1, r6
   1b300:	add	r4, pc, r4
   1b304:	ldr	r0, [pc, r0]
   1b308:	bl	126bc <realloc@plt>
   1b30c:	str	r6, [r9]
   1b310:	str	r5, [r9, #4]
   1b314:	str	r0, [r4]
   1b318:	ldrb	r3, [r8]
   1b31c:	ldr	r6, [sl, #4]
   1b320:	ldr	r5, [pc, #3056]	; 1bf18 <next@@Base+0x3ac0>
   1b324:	mov	r2, r0
   1b328:	mov	r1, #0
   1b32c:	mov	r7, #161	; 0xa1
   1b330:	ldr	r5, [pc, r5]
   1b334:	strb	r1, [r2, r5]!
   1b338:	strb	r7, [r2, #3]
   1b33c:	strb	r1, [r2, #2]
   1b340:	strb	r1, [r2, #1]
   1b344:	adds	r2, r5, #4
   1b348:	adc	ip, r6, #0
   1b34c:	mov	r7, #1
   1b350:	cmp	r3, #1
   1b354:	stm	sl, {r2, ip}
   1b358:	beq	1b3dc <next@@Base+0x2f84>
   1b35c:	b	1b5b4 <next@@Base+0x315c>
   1b360:	ldr	r0, [pc, #2948]	; 1beec <next@@Base+0x3a94>
   1b364:	ldr	r0, [pc, r0]
   1b368:	mov	r1, r0
   1b36c:	ldrb	r2, [r1, r5]!
   1b370:	ldrb	r3, [r1, #1]
   1b374:	ldrb	r7, [r1, #2]
   1b378:	ldrb	r1, [r1, #3]
   1b37c:	orr	r2, r2, r3, lsl #8
   1b380:	orr	r2, r2, r7, lsl #16
   1b384:	orr	r3, r2, r1, lsl #24
   1b388:	adds	r2, r5, #4
   1b38c:	adc	ip, r6, #0
   1b390:	cmp	r3, #-1593835520	; 0xa1000000
   1b394:	stm	sl, {r2, ip}
   1b398:	beq	1b554 <next@@Base+0x30fc>
   1b39c:	mov	r7, #1
   1b3a0:	cmn	r3, #1
   1b3a4:	beq	1b594 <next@@Base+0x313c>
   1b3a8:	ldr	r1, [pc, #2880]	; 1bef0 <next@@Base+0x3a98>
   1b3ac:	add	r1, pc, r1
   1b3b0:	b	1bc94 <next@@Base+0x383c>
   1b3b4:	ldr	r0, [pc, #2896]	; 1bf0c <next@@Base+0x3ab4>
   1b3b8:	mov	r3, #0
   1b3bc:	mov	r4, #161	; 0xa1
   1b3c0:	ldr	r0, [pc, r0]
   1b3c4:	mov	r7, r0
   1b3c8:	strb	r3, [r7, r5]!
   1b3cc:	strb	r4, [r7, #3]
   1b3d0:	strb	r3, [r7, #2]
   1b3d4:	strb	r3, [r7, #1]
   1b3d8:	stm	sl, {r2, ip}
   1b3dc:	ldr	r4, [r9, #4]
   1b3e0:	ldr	r1, [pc, #2868]	; 1bf1c <next@@Base+0x3ac4>
   1b3e4:	adds	r3, r5, #8
   1b3e8:	adc	r7, r6, #0
   1b3ec:	ldr	r1, [pc, r1]
   1b3f0:	subs	r1, r1, r3
   1b3f4:	sbcs	r1, r4, r7
   1b3f8:	bcs	1b484 <next@@Base+0x302c>
   1b3fc:	mov	r1, #7
   1b400:	orr	r1, r1, #131072	; 0x20000
   1b404:	adds	r1, r5, r1
   1b408:	adc	r2, r6, #0
   1b40c:	mvn	r3, #0
   1b410:	and	r5, r2, r3
   1b414:	mov	r2, #16646144	; 0xfe0000
   1b418:	orr	r2, r2, #-16777216	; 0xff000000
   1b41c:	ldr	r4, [pc, #2812]	; 1bf20 <next@@Base+0x3ac8>
   1b420:	and	r6, r1, r2
   1b424:	mov	r1, r6
   1b428:	add	r4, pc, r4
   1b42c:	bl	126bc <realloc@plt>
   1b430:	str	r6, [r9]
   1b434:	str	r5, [r9, #4]
   1b438:	str	r0, [r4]
   1b43c:	ldrb	r1, [r8]
   1b440:	ldr	ip, [sl, #4]
   1b444:	ldr	r2, [pc, #2776]	; 1bf24 <next@@Base+0x3acc>
   1b448:	mov	r7, r0
   1b44c:	mov	r3, #9
   1b450:	ldr	r2, [pc, r2]
   1b454:	strb	r3, [r7, r2]!
   1b458:	mov	r3, #0
   1b45c:	strb	r3, [r7, #3]
   1b460:	strb	r3, [r7, #2]
   1b464:	strb	r3, [r7, #1]
   1b468:	adds	r3, r2, #4
   1b46c:	adc	r5, ip, #0
   1b470:	mov	r7, #1
   1b474:	cmp	r1, #1
   1b478:	stm	sl, {r3, r5}
   1b47c:	beq	1b4ac <next@@Base+0x3054>
   1b480:	b	1b5dc <next@@Base+0x3184>
   1b484:	mov	r3, r0
   1b488:	mov	r1, #9
   1b48c:	strb	r1, [r3, r2]!
   1b490:	mov	r1, #0
   1b494:	strb	r1, [r3, #3]
   1b498:	strb	r1, [r3, #2]
   1b49c:	strb	r1, [r3, #1]
   1b4a0:	adds	r3, r2, #4
   1b4a4:	adc	r5, ip, #0
   1b4a8:	stm	sl, {r3, r5}
   1b4ac:	ldr	r6, [r9, #4]
   1b4b0:	ldr	r4, [pc, #2672]	; 1bf28 <next@@Base+0x3ad0>
   1b4b4:	adds	r1, r2, #8
   1b4b8:	adc	r7, ip, #0
   1b4bc:	ldr	r4, [pc, r4]
   1b4c0:	subs	r1, r4, r1
   1b4c4:	sbcs	r1, r6, r7
   1b4c8:	bcs	1b9a0 <next@@Base+0x3548>
   1b4cc:	mov	r1, #7
   1b4d0:	orr	r1, r1, #131072	; 0x20000
   1b4d4:	adds	r1, r2, r1
   1b4d8:	adc	r2, ip, #0
   1b4dc:	mvn	r3, #0
   1b4e0:	and	r5, r2, r3
   1b4e4:	mov	r2, #16646144	; 0xfe0000
   1b4e8:	orr	r2, r2, #-16777216	; 0xff000000
   1b4ec:	ldr	r4, [pc, #2616]	; 1bf2c <next@@Base+0x3ad4>
   1b4f0:	and	r6, r1, r2
   1b4f4:	mov	r1, r6
   1b4f8:	add	r4, pc, r4
   1b4fc:	bl	126bc <realloc@plt>
   1b500:	str	r6, [r9]
   1b504:	str	r5, [r9, #4]
   1b508:	str	r0, [r4]
   1b50c:	ldrb	r2, [r8]
   1b510:	ldr	r5, [sl, #4]
   1b514:	ldr	r3, [pc, #2580]	; 1bf30 <next@@Base+0x3ad8>
   1b518:	mov	r7, r0
   1b51c:	mov	r1, #0
   1b520:	ldr	r3, [pc, r3]
   1b524:	adds	r6, r3, #4
   1b528:	strb	r1, [r7, r3]!
   1b52c:	str	r6, [sl]
   1b530:	strb	r1, [r7, #3]
   1b534:	strb	r1, [r7, #2]
   1b538:	strb	r1, [r7, #1]
   1b53c:	adc	r1, r5, #0
   1b540:	mov	r7, #1
   1b544:	cmp	r2, #1
   1b548:	str	r1, [sl, #4]
   1b54c:	bne	1b604 <next@@Base+0x31ac>
   1b550:	b	1b9c8 <next@@Base+0x3570>
   1b554:	ldr	r3, [r0, r2]
   1b558:	adds	r4, r5, #8
   1b55c:	adc	r7, r6, #0
   1b560:	cmp	r3, #9
   1b564:	stm	sl, {r4, r7}
   1b568:	bne	1bc8c <next@@Base+0x3834>
   1b56c:	ldr	r3, [pc, #2444]	; 1bf00 <next@@Base+0x3aa8>
   1b570:	adds	r4, r5, #20
   1b574:	adc	r7, r6, #0
   1b578:	add	r3, pc, r3
   1b57c:	add	r6, r5, r0
   1b580:	ldrb	r3, [r3]
   1b584:	ldr	r6, [r6, #16]
   1b588:	stm	sl, {r4, r7}
   1b58c:	eor	r3, r3, #1
   1b590:	add	r7, r6, r3
   1b594:	mov	r6, r0
   1b598:	mov	r3, #0
   1b59c:	strb	r3, [r6, r5]!
   1b5a0:	mov	r5, #161	; 0xa1
   1b5a4:	strb	r5, [r6, #3]
   1b5a8:	strb	r3, [r6, #2]
   1b5ac:	strb	r3, [r6, #1]
   1b5b0:	stm	sl, {r2, ip}
   1b5b4:	mov	r3, r0
   1b5b8:	mov	r1, #9
   1b5bc:	strb	r1, [r3, r2]!
   1b5c0:	mov	r1, #0
   1b5c4:	strb	r1, [r3, #3]
   1b5c8:	strb	r1, [r3, #2]
   1b5cc:	strb	r1, [r3, #1]
   1b5d0:	adds	r3, r2, #4
   1b5d4:	adc	r5, ip, #0
   1b5d8:	stm	sl, {r3, r5}
   1b5dc:	mov	r2, r0
   1b5e0:	mov	r1, #0
   1b5e4:	strb	r1, [r2, r3]!
   1b5e8:	adds	r6, r3, #4
   1b5ec:	strb	r1, [r2, #3]
   1b5f0:	strb	r1, [r2, #2]
   1b5f4:	strb	r1, [r2, #1]
   1b5f8:	adc	r1, r5, #0
   1b5fc:	str	r6, [sl]
   1b600:	str	r1, [sl, #4]
   1b604:	mov	r3, r0
   1b608:	mov	r2, #0
   1b60c:	strb	r2, [r3, r6]!
   1b610:	strb	r2, [r3, #3]
   1b614:	strb	r2, [r3, #2]
   1b618:	strb	r2, [r3, #1]
   1b61c:	adds	r2, r6, #4
   1b620:	adc	r3, r1, #0
   1b624:	strd	r2, [sl]
   1b628:	lsr	r1, r7, #24
   1b62c:	strb	r7, [r0, r2]!
   1b630:	lsr	r6, r7, #16
   1b634:	lsr	r5, r7, #8
   1b638:	strb	r1, [r0, #3]
   1b63c:	strb	r6, [r0, #2]
   1b640:	strb	r5, [r0, #1]
   1b644:	ldrb	r0, [r8]
   1b648:	adds	r4, r2, #4
   1b64c:	adc	r5, r3, #0
   1b650:	cmp	r0, #0
   1b654:	strd	r4, [sl]
   1b658:	beq	1b70c <next@@Base+0x32b4>
   1b65c:	ldr	r9, [pc, #2284]	; 1bf50 <next@@Base+0x3af8>
   1b660:	adds	r0, r2, #8
   1b664:	adc	r1, r3, #0
   1b668:	add	r9, pc, r9
   1b66c:	ldr	r7, [r9, #4]
   1b670:	ldr	r6, [pc, #2268]	; 1bf54 <next@@Base+0x3afc>
   1b674:	ldr	r6, [pc, r6]
   1b678:	subs	r0, r6, r0
   1b67c:	sbcs	r0, r7, r1
   1b680:	bcs	1b8d8 <next@@Base+0x3480>
   1b684:	mov	r0, #7
   1b688:	orr	r0, r0, #131072	; 0x20000
   1b68c:	adds	r0, r2, r0
   1b690:	adc	r1, r3, #0
   1b694:	mvn	r2, #0
   1b698:	and	r5, r1, r2
   1b69c:	mov	r1, #16646144	; 0xfe0000
   1b6a0:	orr	r1, r1, #-16777216	; 0xff000000
   1b6a4:	ldr	r4, [pc, #2268]	; 1bf88 <next@@Base+0x3b30>
   1b6a8:	and	r6, r0, r1
   1b6ac:	ldr	r0, [pc, #2264]	; 1bf8c <next@@Base+0x3b34>
   1b6b0:	mov	r1, r6
   1b6b4:	add	r4, pc, r4
   1b6b8:	ldr	r0, [pc, r0]
   1b6bc:	bl	126bc <realloc@plt>
   1b6c0:	str	r6, [r9]
   1b6c4:	str	r5, [r9, #4]
   1b6c8:	str	r0, [r4]
   1b6cc:	ldrb	r1, [r8]
   1b6d0:	ldr	r5, [sl, #4]
   1b6d4:	ldr	r4, [pc, #2228]	; 1bf90 <next@@Base+0x3b38>
   1b6d8:	mov	r3, r0
   1b6dc:	mov	r2, #0
   1b6e0:	ldr	r4, [pc, r4]
   1b6e4:	strb	r2, [r3, r4]!
   1b6e8:	strb	r2, [r3, #3]
   1b6ec:	strb	r2, [r3, #2]
   1b6f0:	strb	r2, [r3, #1]
   1b6f4:	adds	r2, r4, #4
   1b6f8:	adc	r3, r5, #0
   1b6fc:	cmp	r1, #0
   1b700:	strd	r2, [sl]
   1b704:	beq	1b738 <next@@Base+0x32e0>
   1b708:	b	1b904 <next@@Base+0x34ac>
   1b70c:	ldr	r0, [pc, #2104]	; 1bf4c <next@@Base+0x3af4>
   1b710:	adds	r2, r2, #8
   1b714:	mov	r1, #0
   1b718:	adc	r3, r3, #0
   1b71c:	ldr	r0, [pc, r0]
   1b720:	mov	r7, r0
   1b724:	strb	r1, [r7, r4]!
   1b728:	strb	r1, [r7, #3]
   1b72c:	strb	r1, [r7, #2]
   1b730:	strb	r1, [r7, #1]
   1b734:	strd	r2, [sl]
   1b738:	mov	r7, r0
   1b73c:	mov	r1, #0
   1b740:	strb	r1, [r7, r2]!
   1b744:	strb	r1, [r7, #3]
   1b748:	strb	r1, [r7, #2]
   1b74c:	strb	r1, [r7, #1]
   1b750:	adds	r1, r2, #4
   1b754:	adc	r5, r3, #0
   1b758:	stm	sl, {r1, r5}
   1b75c:	mov	r3, r0
   1b760:	mov	r2, #0
   1b764:	strb	r2, [r3, r1]!
   1b768:	strb	r2, [r3, #3]
   1b76c:	strb	r2, [r3, #2]
   1b770:	strb	r2, [r3, #1]
   1b774:	adds	r2, r1, #4
   1b778:	adc	r3, r5, #0
   1b77c:	strd	r2, [sl]
   1b780:	mov	r7, r0
   1b784:	mov	r1, #0
   1b788:	strb	r1, [r7, r2]!
   1b78c:	strb	r1, [r7, #3]
   1b790:	strb	r1, [r7, #2]
   1b794:	strb	r1, [r7, #1]
   1b798:	adds	r1, r2, #4
   1b79c:	adc	r5, r3, #0
   1b7a0:	stm	sl, {r1, r5}
   1b7a4:	mov	r3, r0
   1b7a8:	mov	r2, #0
   1b7ac:	strb	r2, [r3, r1]!
   1b7b0:	adds	r4, r1, #4
   1b7b4:	strb	r2, [r3, #3]
   1b7b8:	strb	r2, [r3, #2]
   1b7bc:	strb	r2, [r3, #1]
   1b7c0:	adc	r3, r5, #0
   1b7c4:	str	r4, [sl]
   1b7c8:	str	r3, [sl, #4]
   1b7cc:	mov	r2, r0
   1b7d0:	mov	r1, #0
   1b7d4:	strb	r1, [r2, r4]!
   1b7d8:	strb	r1, [r2, #3]
   1b7dc:	strb	r1, [r2, #2]
   1b7e0:	strb	r1, [r2, #1]
   1b7e4:	adds	r2, r4, #4
   1b7e8:	adc	r1, r3, #0
   1b7ec:	str	r2, [sl]
   1b7f0:	str	r1, [sl, #4]
   1b7f4:	mov	r3, r0
   1b7f8:	mov	r4, #0
   1b7fc:	strb	r4, [r3, r2]!
   1b800:	mov	r7, #163	; 0xa3
   1b804:	strb	r7, [r3, #3]
   1b808:	strb	r4, [r3, #2]
   1b80c:	strb	r4, [r3, #1]
   1b810:	ldrb	r7, [r8]
   1b814:	adds	r6, r2, #4
   1b818:	adc	r3, r1, #0
   1b81c:	cmp	r7, #1
   1b820:	str	r6, [sl]
   1b824:	str	r3, [sl, #4]
   1b828:	bne	1b89c <next@@Base+0x3444>
   1b82c:	ldr	r8, [pc, #1852]	; 1bf70 <next@@Base+0x3b18>
   1b830:	adds	lr, r2, #8
   1b834:	adc	ip, r1, #0
   1b838:	add	r8, pc, r8
   1b83c:	ldr	r5, [r8, #4]
   1b840:	ldr	r7, [pc, #1836]	; 1bf74 <next@@Base+0x3b1c>
   1b844:	ldr	r7, [pc, r7]
   1b848:	subs	r7, r7, lr
   1b84c:	sbcs	r7, r5, ip
   1b850:	bcs	1b89c <next@@Base+0x3444>
   1b854:	mov	r3, #7
   1b858:	orr	r3, r3, #131072	; 0x20000
   1b85c:	adds	r2, r2, r3
   1b860:	adc	r1, r1, #0
   1b864:	mvn	r3, #0
   1b868:	and	r7, r1, r3
   1b86c:	mov	r1, #16646144	; 0xfe0000
   1b870:	orr	r1, r1, #-16777216	; 0xff000000
   1b874:	ldr	r5, [pc, #1788]	; 1bf78 <next@@Base+0x3b20>
   1b878:	and	r6, r2, r1
   1b87c:	mov	r1, r6
   1b880:	add	r5, pc, r5
   1b884:	bl	126bc <realloc@plt>
   1b888:	strd	r6, [r8]
   1b88c:	str	r0, [r5]
   1b890:	ldr	r3, [sl, #4]
   1b894:	ldr	r6, [pc, #1760]	; 1bf7c <next@@Base+0x3b24>
   1b898:	ldr	r6, [pc, r6]
   1b89c:	ldr	r0, [pc, #1756]	; 1bf80 <next@@Base+0x3b28>
   1b8a0:	ldr	r1, [pc, #1756]	; 1bf84 <next@@Base+0x3b2c>
   1b8a4:	adds	r2, r6, #4
   1b8a8:	add	r0, pc, r0
   1b8ac:	adc	r3, r3, #0
   1b8b0:	ldr	r1, [pc, r1]
   1b8b4:	strb	r4, [r1, r6]!
   1b8b8:	strb	r4, [r1, #3]
   1b8bc:	strb	r4, [r1, #2]
   1b8c0:	strb	r4, [r1, #1]
   1b8c4:	mov	r1, #1
   1b8c8:	strd	r2, [sl]
   1b8cc:	strb	r1, [r0]
   1b8d0:	sub	sp, fp, #28
   1b8d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8d8:	ldr	r0, [pc, #1656]	; 1bf58 <next@@Base+0x3b00>
   1b8dc:	adds	r2, r2, #8
   1b8e0:	mov	r1, #0
   1b8e4:	adc	r3, r3, #0
   1b8e8:	ldr	r0, [pc, r0]
   1b8ec:	mov	r7, r0
   1b8f0:	strb	r1, [r7, r4]!
   1b8f4:	strb	r1, [r7, #3]
   1b8f8:	strb	r1, [r7, #2]
   1b8fc:	strb	r1, [r7, #1]
   1b900:	strd	r2, [sl]
   1b904:	ldr	r6, [r9, #4]
   1b908:	ldr	r1, [pc, #1668]	; 1bf94 <next@@Base+0x3b3c>
   1b90c:	adds	ip, r4, #8
   1b910:	adc	r7, r5, #0
   1b914:	ldr	r1, [pc, r1]
   1b918:	subs	r1, r1, ip
   1b91c:	sbcs	r1, r6, r7
   1b920:	bcs	1ba6c <next@@Base+0x3614>
   1b924:	mov	r1, #7
   1b928:	orr	r1, r1, #131072	; 0x20000
   1b92c:	adds	r1, r4, r1
   1b930:	adc	r2, r5, #0
   1b934:	mvn	r3, #0
   1b938:	and	r5, r2, r3
   1b93c:	mov	r2, #16646144	; 0xfe0000
   1b940:	orr	r2, r2, #-16777216	; 0xff000000
   1b944:	ldr	r6, [pc, #1612]	; 1bf98 <next@@Base+0x3b40>
   1b948:	and	r4, r1, r2
   1b94c:	mov	r1, r4
   1b950:	add	r6, pc, r6
   1b954:	bl	126bc <realloc@plt>
   1b958:	str	r0, [r6]
   1b95c:	strd	r4, [r9]
   1b960:	ldrb	r7, [r8]
   1b964:	ldr	r3, [sl, #4]
   1b968:	ldr	r2, [pc, #1580]	; 1bf9c <next@@Base+0x3b44>
   1b96c:	mov	r6, r0
   1b970:	mov	r1, #0
   1b974:	ldr	r2, [pc, r2]
   1b978:	strb	r1, [r6, r2]!
   1b97c:	strb	r1, [r6, #3]
   1b980:	strb	r1, [r6, #2]
   1b984:	strb	r1, [r6, #1]
   1b988:	adds	r1, r2, #4
   1b98c:	adc	r5, r3, #0
   1b990:	cmp	r7, #1
   1b994:	stm	sl, {r1, r5}
   1b998:	bne	1b75c <next@@Base+0x3304>
   1b99c:	b	1ba90 <next@@Base+0x3638>
   1b9a0:	mov	r2, r0
   1b9a4:	mov	r1, #0
   1b9a8:	strb	r1, [r2, r3]!
   1b9ac:	adds	r6, r3, #4
   1b9b0:	strb	r1, [r2, #3]
   1b9b4:	strb	r1, [r2, #2]
   1b9b8:	strb	r1, [r2, #1]
   1b9bc:	adc	r1, r5, #0
   1b9c0:	str	r6, [sl]
   1b9c4:	str	r1, [sl, #4]
   1b9c8:	ldr	r4, [r9, #4]
   1b9cc:	ldr	r2, [pc, #1376]	; 1bf34 <next@@Base+0x3adc>
   1b9d0:	adds	ip, r3, #8
   1b9d4:	adc	r7, r5, #0
   1b9d8:	ldr	r2, [pc, r2]
   1b9dc:	subs	r2, r2, ip
   1b9e0:	sbcs	r2, r4, r7
   1b9e4:	bcs	1bb30 <next@@Base+0x36d8>
   1b9e8:	mov	r1, #7
   1b9ec:	orr	r1, r1, #131072	; 0x20000
   1b9f0:	adds	r1, r3, r1
   1b9f4:	adc	r2, r5, #0
   1b9f8:	mvn	r3, #0
   1b9fc:	and	r5, r2, r3
   1ba00:	mov	r2, #16646144	; 0xfe0000
   1ba04:	orr	r2, r2, #-16777216	; 0xff000000
   1ba08:	ldr	r4, [pc, #1320]	; 1bf38 <next@@Base+0x3ae0>
   1ba0c:	and	r6, r1, r2
   1ba10:	mov	r1, r6
   1ba14:	add	r4, pc, r4
   1ba18:	bl	126bc <realloc@plt>
   1ba1c:	str	r6, [r9]
   1ba20:	str	r5, [r9, #4]
   1ba24:	str	r0, [r4]
   1ba28:	ldrb	r5, [r8]
   1ba2c:	ldr	r1, [sl, #4]
   1ba30:	ldr	r6, [pc, #1284]	; 1bf3c <next@@Base+0x3ae4>
   1ba34:	mov	r3, r0
   1ba38:	mov	r2, #0
   1ba3c:	mov	r7, #1
   1ba40:	ldr	r6, [pc, r6]
   1ba44:	strb	r2, [r3, r6]!
   1ba48:	strb	r2, [r3, #3]
   1ba4c:	strb	r2, [r3, #2]
   1ba50:	strb	r2, [r3, #1]
   1ba54:	adds	r2, r6, #4
   1ba58:	adc	r3, r1, #0
   1ba5c:	cmp	r5, #1
   1ba60:	strd	r2, [sl]
   1ba64:	bne	1b628 <next@@Base+0x31d0>
   1ba68:	b	1bb54 <next@@Base+0x36fc>
   1ba6c:	mov	r7, r0
   1ba70:	mov	r1, #0
   1ba74:	strb	r1, [r7, r2]!
   1ba78:	strb	r1, [r7, #3]
   1ba7c:	strb	r1, [r7, #2]
   1ba80:	strb	r1, [r7, #1]
   1ba84:	adds	r1, r2, #4
   1ba88:	adc	r5, r3, #0
   1ba8c:	stm	sl, {r1, r5}
   1ba90:	ldr	r4, [r9, #4]
   1ba94:	ldr	r6, [pc, #1284]	; 1bfa0 <next@@Base+0x3b48>
   1ba98:	adds	r7, r2, #8
   1ba9c:	adc	ip, r3, #0
   1baa0:	ldr	r6, [pc, r6]
   1baa4:	subs	r7, r6, r7
   1baa8:	sbcs	r7, r4, ip
   1baac:	bcs	1bbc8 <next@@Base+0x3770>
   1bab0:	mov	r1, #7
   1bab4:	orr	r1, r1, #131072	; 0x20000
   1bab8:	adds	r1, r2, r1
   1babc:	adc	r2, r3, #0
   1bac0:	mvn	r3, #0
   1bac4:	and	r5, r2, r3
   1bac8:	mov	r2, #16646144	; 0xfe0000
   1bacc:	orr	r2, r2, #-16777216	; 0xff000000
   1bad0:	ldr	r4, [pc, #1228]	; 1bfa4 <next@@Base+0x3b4c>
   1bad4:	and	r6, r1, r2
   1bad8:	mov	r1, r6
   1badc:	add	r4, pc, r4
   1bae0:	bl	126bc <realloc@plt>
   1bae4:	str	r6, [r9]
   1bae8:	str	r5, [r9, #4]
   1baec:	str	r0, [r4]
   1baf0:	ldrb	r7, [r8]
   1baf4:	ldr	r5, [sl, #4]
   1baf8:	ldr	r1, [pc, #1192]	; 1bfa8 <next@@Base+0x3b50>
   1bafc:	mov	r3, r0
   1bb00:	mov	r2, #0
   1bb04:	ldr	r1, [pc, r1]
   1bb08:	strb	r2, [r3, r1]!
   1bb0c:	strb	r2, [r3, #3]
   1bb10:	strb	r2, [r3, #2]
   1bb14:	strb	r2, [r3, #1]
   1bb18:	adds	r2, r1, #4
   1bb1c:	adc	r3, r5, #0
   1bb20:	cmp	r7, #1
   1bb24:	strd	r2, [sl]
   1bb28:	bne	1b780 <next@@Base+0x3328>
   1bb2c:	b	1bbec <next@@Base+0x3794>
   1bb30:	mov	r3, r0
   1bb34:	mov	r2, #0
   1bb38:	strb	r2, [r3, r6]!
   1bb3c:	strb	r2, [r3, #3]
   1bb40:	strb	r2, [r3, #2]
   1bb44:	strb	r2, [r3, #1]
   1bb48:	adds	r2, r6, #4
   1bb4c:	adc	r3, r1, #0
   1bb50:	strd	r2, [sl]
   1bb54:	ldr	r4, [r9, #4]
   1bb58:	ldr	r5, [pc, #992]	; 1bf40 <next@@Base+0x3ae8>
   1bb5c:	adds	lr, r6, #8
   1bb60:	adc	ip, r1, #0
   1bb64:	mov	r7, #1
   1bb68:	ldr	r5, [pc, r5]
   1bb6c:	subs	r5, r5, lr
   1bb70:	sbcs	r5, r4, ip
   1bb74:	bcs	1b628 <next@@Base+0x31d0>
   1bb78:	mov	r2, #7
   1bb7c:	orr	r2, r2, #131072	; 0x20000
   1bb80:	adds	r2, r6, r2
   1bb84:	adc	r1, r1, #0
   1bb88:	mvn	r3, #0
   1bb8c:	and	r5, r1, r3
   1bb90:	mov	r1, #16646144	; 0xfe0000
   1bb94:	orr	r1, r1, #-16777216	; 0xff000000
   1bb98:	ldr	r4, [pc, #932]	; 1bf44 <next@@Base+0x3aec>
   1bb9c:	and	r6, r2, r1
   1bba0:	mov	r1, r6
   1bba4:	add	r4, pc, r4
   1bba8:	bl	126bc <realloc@plt>
   1bbac:	str	r6, [r9]
   1bbb0:	str	r5, [r9, #4]
   1bbb4:	str	r0, [r4]
   1bbb8:	ldr	r3, [sl, #4]
   1bbbc:	ldr	r2, [pc, #900]	; 1bf48 <next@@Base+0x3af0>
   1bbc0:	ldr	r2, [pc, r2]
   1bbc4:	b	1b628 <next@@Base+0x31d0>
   1bbc8:	mov	r3, r0
   1bbcc:	mov	r2, #0
   1bbd0:	strb	r2, [r3, r1]!
   1bbd4:	strb	r2, [r3, #3]
   1bbd8:	strb	r2, [r3, #2]
   1bbdc:	strb	r2, [r3, #1]
   1bbe0:	adds	r2, r1, #4
   1bbe4:	adc	r3, r5, #0
   1bbe8:	strd	r2, [sl]
   1bbec:	ldr	r4, [r9, #4]
   1bbf0:	ldr	r6, [pc, #948]	; 1bfac <next@@Base+0x3b54>
   1bbf4:	adds	r7, r1, #8
   1bbf8:	adc	ip, r5, #0
   1bbfc:	ldr	r6, [pc, r6]
   1bc00:	subs	r7, r6, r7
   1bc04:	sbcs	r7, r4, ip
   1bc08:	bcs	1bcb4 <next@@Base+0x385c>
   1bc0c:	mov	r2, #7
   1bc10:	orr	r2, r2, #131072	; 0x20000
   1bc14:	adds	r1, r1, r2
   1bc18:	adc	r2, r5, #0
   1bc1c:	mvn	r3, #0
   1bc20:	and	r5, r2, r3
   1bc24:	mov	r2, #16646144	; 0xfe0000
   1bc28:	orr	r2, r2, #-16777216	; 0xff000000
   1bc2c:	ldr	r4, [pc, #892]	; 1bfb0 <next@@Base+0x3b58>
   1bc30:	and	r6, r1, r2
   1bc34:	mov	r1, r6
   1bc38:	add	r4, pc, r4
   1bc3c:	bl	126bc <realloc@plt>
   1bc40:	str	r6, [r9]
   1bc44:	str	r5, [r9, #4]
   1bc48:	str	r0, [r4]
   1bc4c:	ldrb	r7, [r8]
   1bc50:	ldr	r3, [sl, #4]
   1bc54:	ldr	r2, [pc, #856]	; 1bfb4 <next@@Base+0x3b5c>
   1bc58:	mov	r6, r0
   1bc5c:	mov	r1, #0
   1bc60:	ldr	r2, [pc, r2]
   1bc64:	strb	r1, [r6, r2]!
   1bc68:	strb	r1, [r6, #3]
   1bc6c:	strb	r1, [r6, #2]
   1bc70:	strb	r1, [r6, #1]
   1bc74:	adds	r1, r2, #4
   1bc78:	adc	r5, r3, #0
   1bc7c:	cmp	r7, #1
   1bc80:	stm	sl, {r1, r5}
   1bc84:	bne	1b7a4 <next@@Base+0x334c>
   1bc88:	b	1bcd8 <next@@Base+0x3880>
   1bc8c:	ldr	r1, [pc, #616]	; 1befc <next@@Base+0x3aa4>
   1bc90:	add	r1, pc, r1
   1bc94:	ldr	r0, [pc, #600]	; 1bef4 <next@@Base+0x3a9c>
   1bc98:	ldr	r0, [pc, r0]
   1bc9c:	ldr	r0, [r0]
   1bca0:	ldr	r2, [pc, #592]	; 1bef8 <next@@Base+0x3aa0>
   1bca4:	ldr	r2, [pc, r2]
   1bca8:	sub	sp, fp, #28
   1bcac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bcb0:	b	1274c <fprintf@plt>
   1bcb4:	mov	r7, r0
   1bcb8:	mov	r1, #0
   1bcbc:	strb	r1, [r7, r2]!
   1bcc0:	strb	r1, [r7, #3]
   1bcc4:	strb	r1, [r7, #2]
   1bcc8:	strb	r1, [r7, #1]
   1bccc:	adds	r1, r2, #4
   1bcd0:	adc	r5, r3, #0
   1bcd4:	stm	sl, {r1, r5}
   1bcd8:	ldr	r4, [r9, #4]
   1bcdc:	ldr	r6, [pc, #724]	; 1bfb8 <next@@Base+0x3b60>
   1bce0:	adds	r7, r2, #8
   1bce4:	adc	ip, r3, #0
   1bce8:	ldr	r6, [pc, r6]
   1bcec:	subs	r7, r6, r7
   1bcf0:	sbcs	r7, r4, ip
   1bcf4:	bcs	1bd7c <next@@Base+0x3924>
   1bcf8:	mov	r1, #7
   1bcfc:	orr	r1, r1, #131072	; 0x20000
   1bd00:	adds	r1, r2, r1
   1bd04:	adc	r2, r3, #0
   1bd08:	mvn	r3, #0
   1bd0c:	and	r5, r2, r3
   1bd10:	mov	r2, #16646144	; 0xfe0000
   1bd14:	orr	r2, r2, #-16777216	; 0xff000000
   1bd18:	ldr	r4, [pc, #668]	; 1bfbc <next@@Base+0x3b64>
   1bd1c:	and	r6, r1, r2
   1bd20:	mov	r1, r6
   1bd24:	add	r4, pc, r4
   1bd28:	bl	126bc <realloc@plt>
   1bd2c:	str	r6, [r9]
   1bd30:	str	r5, [r9, #4]
   1bd34:	str	r0, [r4]
   1bd38:	ldrb	r2, [r8]
   1bd3c:	ldr	r5, [sl, #4]
   1bd40:	ldr	r1, [pc, #632]	; 1bfc0 <next@@Base+0x3b68>
   1bd44:	mov	r7, r0
   1bd48:	mov	r3, #0
   1bd4c:	ldr	r1, [pc, r1]
   1bd50:	adds	r4, r1, #4
   1bd54:	strb	r3, [r7, r1]!
   1bd58:	str	r4, [sl]
   1bd5c:	strb	r3, [r7, #3]
   1bd60:	strb	r3, [r7, #2]
   1bd64:	strb	r3, [r7, #1]
   1bd68:	adc	r3, r5, #0
   1bd6c:	cmp	r2, #1
   1bd70:	str	r3, [sl, #4]
   1bd74:	bne	1b7cc <next@@Base+0x3374>
   1bd78:	b	1bda4 <next@@Base+0x394c>
   1bd7c:	mov	r3, r0
   1bd80:	mov	r2, #0
   1bd84:	strb	r2, [r3, r1]!
   1bd88:	adds	r4, r1, #4
   1bd8c:	strb	r2, [r3, #3]
   1bd90:	strb	r2, [r3, #2]
   1bd94:	strb	r2, [r3, #1]
   1bd98:	adc	r3, r5, #0
   1bd9c:	str	r4, [sl]
   1bda0:	str	r3, [sl, #4]
   1bda4:	ldr	r6, [r9, #4]
   1bda8:	ldr	r2, [pc, #532]	; 1bfc4 <next@@Base+0x3b6c>
   1bdac:	adds	ip, r1, #8
   1bdb0:	adc	r7, r5, #0
   1bdb4:	ldr	r2, [pc, r2]
   1bdb8:	subs	r2, r2, ip
   1bdbc:	sbcs	r2, r6, r7
   1bdc0:	bcs	1be48 <next@@Base+0x39f0>
   1bdc4:	mov	r2, #7
   1bdc8:	orr	r2, r2, #131072	; 0x20000
   1bdcc:	adds	r1, r1, r2
   1bdd0:	adc	r2, r5, #0
   1bdd4:	mvn	r3, #0
   1bdd8:	and	r5, r2, r3
   1bddc:	mov	r2, #16646144	; 0xfe0000
   1bde0:	orr	r2, r2, #-16777216	; 0xff000000
   1bde4:	ldr	r4, [pc, #368]	; 1bf5c <next@@Base+0x3b04>
   1bde8:	and	r6, r1, r2
   1bdec:	mov	r1, r6
   1bdf0:	add	r4, pc, r4
   1bdf4:	bl	126bc <realloc@plt>
   1bdf8:	str	r6, [r9]
   1bdfc:	str	r5, [r9, #4]
   1be00:	str	r0, [r4]
   1be04:	ldrb	r7, [r8]
   1be08:	ldr	r3, [sl, #4]
   1be0c:	ldr	r4, [pc, #332]	; 1bf60 <next@@Base+0x3b08>
   1be10:	mov	r2, r0
   1be14:	mov	r1, #0
   1be18:	ldr	r4, [pc, r4]
   1be1c:	strb	r1, [r2, r4]!
   1be20:	strb	r1, [r2, #3]
   1be24:	strb	r1, [r2, #2]
   1be28:	strb	r1, [r2, #1]
   1be2c:	adds	r2, r4, #4
   1be30:	adc	r1, r3, #0
   1be34:	cmp	r7, #0
   1be38:	str	r2, [sl]
   1be3c:	str	r1, [sl, #4]
   1be40:	beq	1b7f4 <next@@Base+0x339c>
   1be44:	b	1be70 <next@@Base+0x3a18>
   1be48:	mov	r2, r0
   1be4c:	mov	r1, #0
   1be50:	strb	r1, [r2, r4]!
   1be54:	strb	r1, [r2, #3]
   1be58:	strb	r1, [r2, #2]
   1be5c:	strb	r1, [r2, #1]
   1be60:	adds	r2, r4, #4
   1be64:	adc	r1, r3, #0
   1be68:	str	r2, [sl]
   1be6c:	str	r1, [sl, #4]
   1be70:	ldr	r5, [r9, #4]
   1be74:	ldr	r6, [pc, #232]	; 1bf64 <next@@Base+0x3b0c>
   1be78:	adds	r7, r4, #8
   1be7c:	adc	ip, r3, #0
   1be80:	ldr	r6, [pc, r6]
   1be84:	subs	r7, r6, r7
   1be88:	sbcs	r7, r5, ip
   1be8c:	bcs	1b7f4 <next@@Base+0x339c>
   1be90:	mov	r1, #7
   1be94:	orr	r1, r1, #131072	; 0x20000
   1be98:	adds	r1, r4, r1
   1be9c:	adc	r2, r3, #0
   1bea0:	mvn	r3, #0
   1bea4:	and	r7, r2, r3
   1bea8:	mov	r2, #16646144	; 0xfe0000
   1beac:	orr	r2, r2, #-16777216	; 0xff000000
   1beb0:	ldr	r5, [pc, #176]	; 1bf68 <next@@Base+0x3b10>
   1beb4:	and	r6, r1, r2
   1beb8:	mov	r1, r6
   1bebc:	add	r5, pc, r5
   1bec0:	bl	126bc <realloc@plt>
   1bec4:	strd	r6, [r9]
   1bec8:	str	r0, [r5]
   1becc:	ldr	r1, [sl, #4]
   1bed0:	ldr	r2, [pc, #148]	; 1bf6c <next@@Base+0x3b14>
   1bed4:	ldr	r2, [pc, r2]
   1bed8:	b	1b7f4 <next@@Base+0x339c>
   1bedc:	andeq	r5, r1, r4, lsl #9
   1bee0:	andeq	r5, r1, r4, lsl #9
   1bee4:	andeq	r5, r1, r8, ror r4
   1bee8:	andeq	r5, r1, ip, asr r4
   1beec:	muleq	r1, r0, r3
   1bef0:	muleq	r0, r2, lr
   1bef4:	andeq	r3, r1, r0, lsr #8
   1bef8:	andeq	r4, r1, r4, asr #20
   1befc:	strdeq	r2, [r0], -fp
   1bf00:	muleq	r1, r0, r1
   1bf04:	andeq	r5, r1, ip, asr #8
   1bf08:	andeq	r5, r1, r0, asr #8
   1bf0c:	andeq	r5, r1, r4, lsr r3
   1bf10:	strdeq	r5, [r1], -r4
   1bf14:	strdeq	r5, [r1], -r0
   1bf18:	ldrdeq	r5, [r1], -r0
   1bf1c:	andeq	r5, r1, ip, lsl #6
   1bf20:	andeq	r5, r1, ip, asr #5
   1bf24:			; <UNDEFINED> instruction: 0x000152b0
   1bf28:	andeq	r5, r1, ip, lsr r2
   1bf2c:	strdeq	r5, [r1], -ip
   1bf30:	andeq	r5, r1, r0, ror #3
   1bf34:	andeq	r4, r1, r0, lsr #26
   1bf38:	andeq	r4, r1, r0, ror #25
   1bf3c:	andeq	r4, r1, r0, asr #25
   1bf40:	muleq	r1, r0, fp
   1bf44:	andeq	r4, r1, r0, asr fp
   1bf48:	andeq	r4, r1, r0, asr #22
   1bf4c:	ldrdeq	r4, [r1], -r8
   1bf50:	muleq	r1, r0, r0
   1bf54:	andeq	r5, r1, r4, lsl #1
   1bf58:	andeq	r4, r1, ip, lsl #28
   1bf5c:	andeq	r4, r1, r4, lsl #18
   1bf60:	andeq	r4, r1, r8, ror #17
   1bf64:	andeq	r4, r1, r8, ror r8
   1bf68:	andeq	r4, r1, r8, lsr r8
   1bf6c:	andeq	r4, r1, ip, lsr #16
   1bf70:	andeq	r4, r1, r0, asr #29
   1bf74:			; <UNDEFINED> instruction: 0x00014eb4
   1bf78:	andeq	r4, r1, r4, ror lr
   1bf7c:	andeq	r4, r1, r8, ror #28
   1bf80:	andeq	r4, r1, r0, ror #28
   1bf84:	andeq	r4, r1, r4, asr #28
   1bf88:	andeq	r5, r1, r0, asr #32
   1bf8c:	andeq	r5, r1, ip, lsr r0
   1bf90:	andeq	r5, r1, r0, lsr #32
   1bf94:	andeq	r4, r1, r4, ror #27
   1bf98:	andeq	r4, r1, r4, lsr #27
   1bf9c:	andeq	r4, r1, ip, lsl #27
   1bfa0:	andeq	r4, r1, r8, asr ip
   1bfa4:	andeq	r4, r1, r8, lsl ip
   1bfa8:	strdeq	r4, [r1], -ip
   1bfac:	strdeq	r4, [r1], -ip
   1bfb0:			; <UNDEFINED> instruction: 0x00014abc
   1bfb4:	andeq	r4, r1, r0, lsr #21
   1bfb8:	andeq	r4, r1, r0, lsl sl
   1bfbc:	ldrdeq	r4, [r1], -r0
   1bfc0:			; <UNDEFINED> instruction: 0x000149b4
   1bfc4:	andeq	r4, r1, r4, asr #18
   1bfc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bfcc:	add	fp, sp, #28
   1bfd0:	sub	sp, sp, #4
   1bfd4:	ldr	r0, [pc, #496]	; 1c1cc <next@@Base+0x3d74>
   1bfd8:	ldr	r0, [pc, r0]
   1bfdc:	cmp	r0, #0
   1bfe0:	beq	1c174 <next@@Base+0x3d1c>
   1bfe4:	ldr	sl, [pc, #484]	; 1c1d0 <next@@Base+0x3d78>
   1bfe8:	mov	r5, #0
   1bfec:	mov	r1, #0
   1bff0:	add	sl, pc, sl
   1bff4:	ldrb	r0, [sl]
   1bff8:	ldr	r8, [pc, #468]	; 1c1d4 <next@@Base+0x3d7c>
   1bffc:	ldr	r4, [pc, #468]	; 1c1d8 <next@@Base+0x3d80>
   1c000:	cmp	r0, #1
   1c004:	add	r8, pc, r8
   1c008:	add	r4, pc, r4
   1c00c:	bne	1c088 <next@@Base+0x3c30>
   1c010:	ldr	r9, [pc, #452]	; 1c1dc <next@@Base+0x3d84>
   1c014:	ldr	r0, [r8, #4]
   1c018:	ldr	r2, [pc, #448]	; 1c1e0 <next@@Base+0x3d88>
   1c01c:	add	r9, pc, r9
   1c020:	mov	ip, r4
   1c024:	mov	r1, #1
   1c028:	ldr	r2, [pc, r2]
   1c02c:	ldr	r7, [r9, #4]
   1c030:	ldr	r4, [pc, #428]	; 1c1e4 <next@@Base+0x3d8c>
   1c034:	adds	r3, r2, #8
   1c038:	adc	r6, r0, #0
   1c03c:	ldr	r4, [pc, r4]
   1c040:	subs	r3, r4, r3
   1c044:	mov	r4, ip
   1c048:	sbcs	r3, r7, r6
   1c04c:	bcs	1c088 <next@@Base+0x3c30>
   1c050:	mov	r1, #7
   1c054:	orr	r1, r1, #131072	; 0x20000
   1c058:	adds	r1, r2, r1
   1c05c:	adc	r7, r0, #0
   1c060:	mov	r0, #16646144	; 0xfe0000
   1c064:	orr	r0, r0, #-16777216	; 0xff000000
   1c068:	and	r6, r1, r0
   1c06c:	ldr	r0, [pc, #372]	; 1c1e8 <next@@Base+0x3d90>
   1c070:	mov	r1, r6
   1c074:	ldr	r0, [pc, r0]
   1c078:	bl	126bc <realloc@plt>
   1c07c:	ldrb	r1, [sl]
   1c080:	strd	r6, [r9]
   1c084:	str	r0, [r4]
   1c088:	ldr	r2, [pc, #348]	; 1c1ec <next@@Base+0x3d94>
   1c08c:	ldr	r2, [pc, r2]
   1c090:	ldr	r0, [pc, #344]	; 1c1f0 <next@@Base+0x3d98>
   1c094:	ldr	r0, [pc, r0]
   1c098:	ldr	r3, [r8, #4]
   1c09c:	mov	r7, r0
   1c0a0:	strb	r5, [r7, r2]!
   1c0a4:	adds	r2, r2, #8
   1c0a8:	adc	r3, r3, #0
   1c0ac:	strb	r5, [r7, #5]
   1c0b0:	strb	r5, [r7, #3]
   1c0b4:	strb	r5, [r7, #2]
   1c0b8:	strb	r5, [r7, #1]
   1c0bc:	strb	r5, [r7, #4]!
   1c0c0:	cmp	r1, #0
   1c0c4:	strb	r5, [r7, #3]
   1c0c8:	strb	r5, [r7, #2]
   1c0cc:	strd	r2, [r8]
   1c0d0:	beq	1c0f8 <next@@Base+0x3ca0>
   1c0d4:	ldr	r3, [pc, #280]	; 1c1f4 <next@@Base+0x3d9c>
   1c0d8:	mov	r1, r2
   1c0dc:	mov	r2, #1
   1c0e0:	ldr	r3, [pc, r3]
   1c0e4:	bl	126c8 <fwrite@plt>
   1c0e8:	ldr	r0, [pc, #264]	; 1c1f8 <next@@Base+0x3da0>
   1c0ec:	ldr	r0, [pc, r0]
   1c0f0:	bl	1265c <free@plt>
   1c0f4:	b	1c13c <next@@Base+0x3ce4>
   1c0f8:	ldr	r1, [pc, #252]	; 1c1fc <next@@Base+0x3da4>
   1c0fc:	mov	r2, #4
   1c100:	ldr	r1, [pc, r1]
   1c104:	bl	127e8 <msync@plt>
   1c108:	cmn	r0, #1
   1c10c:	beq	1c188 <next@@Base+0x3d30>
   1c110:	ldr	r1, [pc, #244]	; 1c20c <next@@Base+0x3db4>
   1c114:	ldr	r1, [pc, r1]
   1c118:	ldr	r0, [pc, #240]	; 1c210 <next@@Base+0x3db8>
   1c11c:	ldr	r0, [pc, r0]
   1c120:	bl	127c4 <munmap@plt>
   1c124:	ldr	r0, [pc, #232]	; 1c214 <next@@Base+0x3dbc>
   1c128:	mov	r1, #0
   1c12c:	str	r1, [r4]
   1c130:	add	r0, pc, r0
   1c134:	str	r1, [r0]
   1c138:	str	r1, [r0, #4]
   1c13c:	ldr	r0, [pc, #212]	; 1c218 <next@@Base+0x3dc0>
   1c140:	ldr	r0, [pc, r0]
   1c144:	bl	12644 <fflush@plt>
   1c148:	ldr	r0, [pc, #204]	; 1c21c <next@@Base+0x3dc4>
   1c14c:	ldr	r0, [pc, r0]
   1c150:	bl	1c6c8 <__gcov_flush@@Base+0x304>
   1c154:	ldr	r0, [pc, #196]	; 1c220 <next@@Base+0x3dc8>
   1c158:	ldr	r0, [pc, r0]
   1c15c:	bl	127b8 <fclose@plt>
   1c160:	ldr	r0, [pc, #188]	; 1c224 <next@@Base+0x3dcc>
   1c164:	mov	r1, #0
   1c168:	str	r1, [r4]
   1c16c:	add	r0, pc, r0
   1c170:	str	r1, [r0]
   1c174:	ldr	r0, [pc, #172]	; 1c228 <next@@Base+0x3dd0>
   1c178:	ldr	r0, [pc, r0]
   1c17c:	sub	sp, fp, #28
   1c180:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c184:	b	1265c <free@plt>
   1c188:	bl	12758 <__errno_location@plt>
   1c18c:	ldr	r1, [pc, #108]	; 1c200 <next@@Base+0x3da8>
   1c190:	mov	r6, r4
   1c194:	ldr	r1, [pc, r1]
   1c198:	ldr	r0, [r0]
   1c19c:	ldr	r4, [r1]
   1c1a0:	ldr	r5, [pc, #92]	; 1c204 <next@@Base+0x3dac>
   1c1a4:	ldr	r5, [pc, r5]
   1c1a8:	bl	12704 <strerror@plt>
   1c1ac:	ldr	r1, [pc, #84]	; 1c208 <next@@Base+0x3db0>
   1c1b0:	mov	r3, r0
   1c1b4:	mov	r0, r4
   1c1b8:	add	r1, pc, r1
   1c1bc:	mov	r2, r5
   1c1c0:	mov	r4, r6
   1c1c4:	bl	1274c <fprintf@plt>
   1c1c8:	b	1c110 <next@@Base+0x3cb8>
   1c1cc:	andeq	r4, r1, r8, lsl r7
   1c1d0:	strdeq	r4, [r1], -ip
   1c1d4:	strdeq	r4, [r1], -ip
   1c1d8:	andeq	r4, r1, ip, ror #13
   1c1dc:	ldrdeq	r4, [r1], -ip
   1c1e0:	ldrdeq	r4, [r1], -r8
   1c1e4:			; <UNDEFINED> instruction: 0x000146bc
   1c1e8:	andeq	r4, r1, r0, lsl #13
   1c1ec:	andeq	r4, r1, r4, ror r6
   1c1f0:	andeq	r4, r1, r0, ror #12
   1c1f4:	andeq	r4, r1, r0, lsl r6
   1c1f8:	andeq	r4, r1, r8, lsl #12
   1c1fc:	andeq	r4, r1, r8, lsl r6
   1c200:	andeq	r2, r1, r4, lsr #30
   1c204:	andeq	r4, r1, r4, asr #10
   1c208:	andeq	r2, r0, r1, asr #2
   1c20c:	andeq	r4, r1, r4, lsl #12
   1c210:	ldrdeq	r4, [r1], -r8
   1c214:	andeq	r4, r1, r8, ror #11
   1c218:			; <UNDEFINED> instruction: 0x000145b0
   1c21c:	andeq	r2, r1, ip, ror pc
   1c220:	muleq	r1, r8, r5
   1c224:	andeq	r4, r1, r4, lsl #11
   1c228:	andeq	r4, r1, r0, ror r5
   1c22c:	push	{r4, sl, fp, lr}
   1c230:	add	fp, sp, #8
   1c234:	mov	r4, r0
   1c238:	mov	r0, #12
   1c23c:	bl	126ec <malloc@plt>
   1c240:	ldr	r1, [pc, #60]	; 1c284 <next@@Base+0x3e2c>
   1c244:	mov	r2, #0
   1c248:	add	r1, pc, r1
   1c24c:	stm	r0, {r1, r4}
   1c250:	str	r2, [r0, #8]
   1c254:	ldr	r1, [pc, #44]	; 1c288 <next@@Base+0x3e30>
   1c258:	ldr	r1, [pc, r1]
   1c25c:	mov	r2, r1
   1c260:	ldr	r3, [r2], #4
   1c264:	ldr	r4, [r2]
   1c268:	cmp	r3, #0
   1c26c:	mov	r3, r2
   1c270:	addne	r3, r4, #8
   1c274:	moveq	r2, r1
   1c278:	str	r0, [r3]
   1c27c:	str	r0, [r2]
   1c280:	pop	{r4, sl, fp, pc}
   1c284:	andeq	r4, r1, r4, asr #9
   1c288:	andeq	r2, r1, ip, asr lr
   1c28c:	push	{r4, r5, fp, lr}
   1c290:	add	fp, sp, #8
   1c294:	ldr	r0, [pc, #64]	; 1c2dc <next@@Base+0x3e84>
   1c298:	ldr	r0, [pc, r0]
   1c29c:	ldr	r4, [r0]
   1c2a0:	cmp	r4, #0
   1c2a4:	beq	1c2d8 <next@@Base+0x3e80>
   1c2a8:	ldr	r5, [pc, #48]	; 1c2e0 <next@@Base+0x3e88>
   1c2ac:	add	r5, pc, r5
   1c2b0:	b	1c2c0 <next@@Base+0x3e68>
   1c2b4:	ldr	r4, [r4, #8]
   1c2b8:	cmp	r4, #0
   1c2bc:	beq	1c2d8 <next@@Base+0x3e80>
   1c2c0:	ldr	r0, [r4]
   1c2c4:	cmp	r0, r5
   1c2c8:	bne	1c2b4 <next@@Base+0x3e5c>
   1c2cc:	ldr	r0, [r4, #4]
   1c2d0:	blx	r0
   1c2d4:	b	1c2b4 <next@@Base+0x3e5c>
   1c2d8:	pop	{r4, r5, fp, pc}
   1c2dc:	andeq	r2, r1, ip, lsl lr
   1c2e0:	andeq	r4, r1, r0, ror #8
   1c2e4:	push	{r4, r5, r6, r7, fp, lr}
   1c2e8:	add	fp, sp, #16
   1c2ec:	ldr	r4, [pc, #104]	; 1c35c <next@@Base+0x3f04>
   1c2f0:	ldr	r4, [pc, r4]
   1c2f4:	ldr	r0, [r4]
   1c2f8:	cmp	r0, #0
   1c2fc:	beq	1c358 <next@@Base+0x3f00>
   1c300:	ldr	r5, [pc, #88]	; 1c360 <next@@Base+0x3f08>
   1c304:	mov	r6, #0
   1c308:	add	r5, pc, r5
   1c30c:	b	1c340 <next@@Base+0x3ee8>
   1c310:	ldr	r1, [r4]
   1c314:	cmp	r0, r1
   1c318:	streq	r7, [r4]
   1c31c:	ldr	r1, [r4, #4]
   1c320:	cmp	r0, r1
   1c324:	streq	r6, [r4, #4]
   1c328:	cmp	r6, #0
   1c32c:	strne	r7, [r6, #8]
   1c330:	bl	1265c <free@plt>
   1c334:	mov	r0, r7
   1c338:	cmp	r7, #0
   1c33c:	beq	1c358 <next@@Base+0x3f00>
   1c340:	ldr	r1, [r0]
   1c344:	ldr	r7, [r0, #8]
   1c348:	cmp	r1, r5
   1c34c:	beq	1c310 <next@@Base+0x3eb8>
   1c350:	mov	r6, r0
   1c354:	b	1c334 <next@@Base+0x3edc>
   1c358:	pop	{r4, r5, r6, r7, fp, pc}
   1c35c:	andeq	r2, r1, r4, asr #27
   1c360:	andeq	r4, r1, r4, lsl #8
   1c364:	push	{r4, sl, fp, lr}
   1c368:	add	fp, sp, #8
   1c36c:	mov	r4, r0
   1c370:	mov	r0, #12
   1c374:	bl	126ec <malloc@plt>
   1c378:	ldr	r1, [pc, #60]	; 1c3bc <next@@Base+0x3f64>
   1c37c:	mov	r2, #0
   1c380:	add	r1, pc, r1
   1c384:	stm	r0, {r1, r4}
   1c388:	str	r2, [r0, #8]
   1c38c:	ldr	r1, [pc, #44]	; 1c3c0 <next@@Base+0x3f68>
   1c390:	ldr	r1, [pc, r1]
   1c394:	mov	r2, r1
   1c398:	ldr	r3, [r2], #4
   1c39c:	ldr	r4, [r2]
   1c3a0:	cmp	r3, #0
   1c3a4:	mov	r3, r2
   1c3a8:	addne	r3, r4, #8
   1c3ac:	moveq	r2, r1
   1c3b0:	str	r0, [r3]
   1c3b4:	str	r0, [r2]
   1c3b8:	pop	{r4, sl, fp, pc}
   1c3bc:	andeq	r4, r1, ip, lsl #7
   1c3c0:	andeq	r2, r1, r0, lsr #26

0001c3c4 <__gcov_flush@@Base>:
   1c3c4:	push	{r4, sl, fp, lr}
   1c3c8:	add	fp, sp, #8
   1c3cc:	ldr	r0, [pc, #36]	; 1c3f8 <__gcov_flush@@Base+0x34>
   1c3d0:	ldr	r0, [pc, r0]
   1c3d4:	ldr	r4, [r0]
   1c3d8:	cmp	r4, #0
   1c3dc:	beq	1c3f4 <__gcov_flush@@Base+0x30>
   1c3e0:	ldr	r0, [r4, #4]
   1c3e4:	blx	r0
   1c3e8:	ldr	r4, [r4, #8]
   1c3ec:	cmp	r4, #0
   1c3f0:	bne	1c3e0 <__gcov_flush@@Base+0x1c>
   1c3f4:	pop	{r4, sl, fp, pc}
   1c3f8:	andeq	r2, r1, r0, ror #25
   1c3fc:	push	{r4, r5, r6, r7, fp, lr}
   1c400:	add	fp, sp, #16
   1c404:	ldr	r4, [pc, #104]	; 1c474 <__gcov_flush@@Base+0xb0>
   1c408:	ldr	r4, [pc, r4]
   1c40c:	ldr	r0, [r4]
   1c410:	cmp	r0, #0
   1c414:	beq	1c470 <__gcov_flush@@Base+0xac>
   1c418:	ldr	r5, [pc, #88]	; 1c478 <__gcov_flush@@Base+0xb4>
   1c41c:	mov	r6, #0
   1c420:	add	r5, pc, r5
   1c424:	b	1c458 <__gcov_flush@@Base+0x94>
   1c428:	ldr	r1, [r4]
   1c42c:	cmp	r0, r1
   1c430:	streq	r7, [r4]
   1c434:	ldr	r1, [r4, #4]
   1c438:	cmp	r0, r1
   1c43c:	streq	r6, [r4, #4]
   1c440:	cmp	r6, #0
   1c444:	strne	r7, [r6, #8]
   1c448:	bl	1265c <free@plt>
   1c44c:	mov	r0, r7
   1c450:	cmp	r7, #0
   1c454:	beq	1c470 <__gcov_flush@@Base+0xac>
   1c458:	ldr	r1, [r0]
   1c45c:	ldr	r7, [r0, #8]
   1c460:	cmp	r1, r5
   1c464:	beq	1c428 <__gcov_flush@@Base+0x64>
   1c468:	mov	r6, r0
   1c46c:	b	1c44c <__gcov_flush@@Base+0x88>
   1c470:	pop	{r4, r5, r6, r7, fp, pc}
   1c474:	andeq	r2, r1, r8, lsr #25
   1c478:	andeq	r4, r1, ip, ror #5
   1c47c:	push	{r4, r5, r6, sl, fp, lr}
   1c480:	add	fp, sp, #16
   1c484:	ldr	r6, [pc, #228]	; 1c570 <__gcov_flush@@Base+0x1ac>
   1c488:	mov	r4, r1
   1c48c:	cmp	r0, #0
   1c490:	add	r6, pc, r6
   1c494:	beq	1c4e0 <__gcov_flush@@Base+0x11c>
   1c498:	mov	r5, r0
   1c49c:	mov	r0, #12
   1c4a0:	bl	126ec <malloc@plt>
   1c4a4:	mov	r1, #0
   1c4a8:	str	r6, [r0]
   1c4ac:	str	r5, [r0, #4]
   1c4b0:	str	r1, [r0, #8]
   1c4b4:	ldr	r1, [pc, #184]	; 1c574 <__gcov_flush@@Base+0x1b0>
   1c4b8:	ldr	r1, [pc, r1]
   1c4bc:	mov	r2, r1
   1c4c0:	ldr	r3, [r2], #4
   1c4c4:	ldr	r5, [r2]
   1c4c8:	cmp	r3, #0
   1c4cc:	mov	r3, r2
   1c4d0:	addne	r3, r5, #8
   1c4d4:	moveq	r2, r1
   1c4d8:	str	r0, [r3]
   1c4dc:	str	r0, [r2]
   1c4e0:	cmp	r4, #0
   1c4e4:	beq	1c52c <__gcov_flush@@Base+0x168>
   1c4e8:	mov	r0, #12
   1c4ec:	bl	126ec <malloc@plt>
   1c4f0:	mov	r1, #0
   1c4f4:	str	r6, [r0]
   1c4f8:	str	r4, [r0, #4]
   1c4fc:	str	r1, [r0, #8]
   1c500:	ldr	r1, [pc, #112]	; 1c578 <__gcov_flush@@Base+0x1b4>
   1c504:	ldr	r1, [pc, r1]
   1c508:	mov	r2, r1
   1c50c:	ldr	r3, [r2], #4
   1c510:	ldr	r6, [r2]
   1c514:	cmp	r3, #0
   1c518:	mov	r3, r2
   1c51c:	addne	r3, r6, #8
   1c520:	moveq	r2, r1
   1c524:	str	r0, [r3]
   1c528:	str	r0, [r2]
   1c52c:	ldr	r1, [pc, #72]	; 1c57c <__gcov_flush@@Base+0x1b8>
   1c530:	add	r1, pc, r1
   1c534:	ldrb	r0, [r1]
   1c538:	cmp	r0, #0
   1c53c:	popne	{r4, r5, r6, sl, fp, pc}
   1c540:	ldr	r0, [pc, #56]	; 1c580 <__gcov_flush@@Base+0x1bc>
   1c544:	mov	r2, #1
   1c548:	strb	r2, [r1]
   1c54c:	add	r0, pc, r0
   1c550:	bl	1cb1c <__libc_csu_fini@@Base+0x4>
   1c554:	ldr	r0, [pc, #40]	; 1c584 <__gcov_flush@@Base+0x1c0>
   1c558:	add	r0, pc, r0
   1c55c:	bl	1cb1c <__libc_csu_fini@@Base+0x4>
   1c560:	ldr	r0, [pc, #32]	; 1c588 <__gcov_flush@@Base+0x1c4>
   1c564:	add	r0, pc, r0
   1c568:	pop	{r4, r5, r6, sl, fp, lr}
   1c56c:	b	1cb1c <__libc_csu_fini@@Base+0x4>
   1c570:	andeq	r4, r1, ip, ror r2
   1c574:	strdeq	r2, [r1], -ip
   1c578:	andeq	r2, r1, ip, lsr #23
   1c57c:	andeq	r4, r1, r0, ror #3
   1c580:			; <UNDEFINED> instruction: 0xfffffea8
   1c584:			; <UNDEFINED> instruction: 0xfffffd84
   1c588:			; <UNDEFINED> instruction: 0xfffffd20
   1c58c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c590:	add	fp, sp, #24
   1c594:	ldr	r7, [pc, #68]	; 1c5e0 <__gcov_flush@@Base+0x21c>
   1c598:	mov	r4, r0
   1c59c:	mov	r5, #1
   1c5a0:	mov	r8, #0
   1c5a4:	ldr	r7, [pc, r7]
   1c5a8:	mov	r6, #47	; 0x2f
   1c5ac:	b	1c5c8 <__gcov_flush@@Base+0x204>
   1c5b0:	strb	r8, [r4, r5]
   1c5b4:	ldr	r1, [r7]
   1c5b8:	mov	r0, r4
   1c5bc:	bl	12770 <mkdir@plt>
   1c5c0:	strb	r6, [r4, r5]
   1c5c4:	add	r5, r5, #1
   1c5c8:	ldrb	r0, [r4, r5]
   1c5cc:	cmp	r0, #47	; 0x2f
   1c5d0:	beq	1c5b0 <__gcov_flush@@Base+0x1ec>
   1c5d4:	cmp	r0, #0
   1c5d8:	bne	1c5c4 <__gcov_flush@@Base+0x200>
   1c5dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c5e0:	andeq	r2, r1, r8, lsl #22
   1c5e4:	ldr	r0, [pc, #8]	; 1c5f4 <__gcov_flush@@Base+0x230>
   1c5e8:	ldr	r0, [pc, r0]
   1c5ec:	ldr	r0, [r0]
   1c5f0:	bx	lr
   1c5f4:	andeq	r2, r1, r4, asr #21
   1c5f8:	ldr	r1, [pc, #8]	; 1c608 <__gcov_flush@@Base+0x244>
   1c5fc:	ldr	r1, [pc, r1]
   1c600:	str	r0, [r1]
   1c604:	bx	lr
   1c608:			; <UNDEFINED> instruction: 0x00012ab0
   1c60c:	push	{r4, r5, r6, sl, fp, lr}
   1c610:	add	fp, sp, #16
   1c614:	sub	sp, sp, #392	; 0x188
   1c618:	mov	r6, sp
   1c61c:	mov	r5, r0
   1c620:	mov	r0, r6
   1c624:	mov	r4, r1
   1c628:	bl	12698 <uname@plt>
   1c62c:	cmp	r0, #0
   1c630:	bmi	1c648 <__gcov_flush@@Base+0x284>
   1c634:	add	r1, r6, #65	; 0x41
   1c638:	mov	r0, r5
   1c63c:	mov	r2, r4
   1c640:	bl	12794 <strncpy@plt>
   1c644:	mov	r0, #0
   1c648:	sub	sp, fp, #16
   1c64c:	pop	{r4, r5, r6, sl, fp, pc}
   1c650:	push	{r4, r5, r6, sl, fp, lr}
   1c654:	add	fp, sp, #16
   1c658:	sub	sp, sp, #32
   1c65c:	mov	r4, #0
   1c660:	str	r4, [sp, #8]
   1c664:	strh	r4, [sp, #2]
   1c668:	mov	r5, r0
   1c66c:	str	r4, [sp, #12]
   1c670:	str	r4, [sp, #16]
   1c674:	str	r4, [sp, #20]
   1c678:	bl	1271c <getpid@plt>
   1c67c:	mov	r6, sp
   1c680:	str	r0, [sp, #24]
   1c684:	mov	r0, #1
   1c688:	strh	r0, [sp]
   1c68c:	mov	r0, r5
   1c690:	mov	r1, #14
   1c694:	mov	r2, r6
   1c698:	bl	127d0 <fcntl64@plt>
   1c69c:	cmn	r0, #1
   1c6a0:	bne	1c6bc <__gcov_flush@@Base+0x2f8>
   1c6a4:	bl	12758 <__errno_location@plt>
   1c6a8:	ldr	r0, [r0]
   1c6ac:	cmp	r0, #4
   1c6b0:	beq	1c68c <__gcov_flush@@Base+0x2c8>
   1c6b4:	cmp	r0, #37	; 0x25
   1c6b8:	mvneq	r4, #0
   1c6bc:	mov	r0, r4
   1c6c0:	sub	sp, fp, #16
   1c6c4:	pop	{r4, r5, r6, sl, fp, pc}
   1c6c8:	push	{r4, r5, r6, sl, fp, lr}
   1c6cc:	add	fp, sp, #16
   1c6d0:	sub	sp, sp, #32
   1c6d4:	mov	r4, #0
   1c6d8:	str	r4, [sp, #8]
   1c6dc:	strh	r4, [sp, #2]
   1c6e0:	mov	r5, r0
   1c6e4:	str	r4, [sp, #12]
   1c6e8:	str	r4, [sp, #16]
   1c6ec:	str	r4, [sp, #20]
   1c6f0:	bl	1271c <getpid@plt>
   1c6f4:	mov	r6, sp
   1c6f8:	str	r0, [sp, #24]
   1c6fc:	mov	r0, #2
   1c700:	strh	r0, [sp]
   1c704:	mov	r0, r5
   1c708:	mov	r1, #14
   1c70c:	mov	r2, r6
   1c710:	bl	127d0 <fcntl64@plt>
   1c714:	cmn	r0, #1
   1c718:	bne	1c734 <__gcov_flush@@Base+0x370>
   1c71c:	bl	12758 <__errno_location@plt>
   1c720:	ldr	r0, [r0]
   1c724:	cmp	r0, #4
   1c728:	beq	1c704 <__gcov_flush@@Base+0x340>
   1c72c:	cmp	r0, #37	; 0x25
   1c730:	mvneq	r4, #0
   1c734:	mov	r0, r4
   1c738:	sub	sp, fp, #16
   1c73c:	pop	{r4, r5, r6, sl, fp, pc}
   1c740:	push	{r4, r5, r6, sl, fp, lr}
   1c744:	add	fp, sp, #16
   1c748:	sub	sp, sp, #32
   1c74c:	bl	127ac <fileno@plt>
   1c750:	mov	r4, #0
   1c754:	str	r4, [sp, #8]
   1c758:	strh	r4, [sp, #2]
   1c75c:	mov	r5, r0
   1c760:	str	r4, [sp, #12]
   1c764:	str	r4, [sp, #16]
   1c768:	str	r4, [sp, #20]
   1c76c:	bl	1271c <getpid@plt>
   1c770:	mov	r6, sp
   1c774:	str	r0, [sp, #24]
   1c778:	mov	r0, #1
   1c77c:	strh	r0, [sp]
   1c780:	mov	r0, r5
   1c784:	mov	r1, #14
   1c788:	mov	r2, r6
   1c78c:	bl	127d0 <fcntl64@plt>
   1c790:	cmn	r0, #1
   1c794:	bne	1c7b0 <__gcov_flush@@Base+0x3ec>
   1c798:	bl	12758 <__errno_location@plt>
   1c79c:	ldr	r0, [r0]
   1c7a0:	cmp	r0, #4
   1c7a4:	beq	1c780 <__gcov_flush@@Base+0x3bc>
   1c7a8:	cmp	r0, #37	; 0x25
   1c7ac:	mvneq	r4, #0
   1c7b0:	mov	r0, r4
   1c7b4:	sub	sp, fp, #16
   1c7b8:	pop	{r4, r5, r6, sl, fp, pc}
   1c7bc:	push	{r4, r5, r6, sl, fp, lr}
   1c7c0:	add	fp, sp, #16
   1c7c4:	sub	sp, sp, #32
   1c7c8:	bl	127ac <fileno@plt>
   1c7cc:	mov	r4, #0
   1c7d0:	str	r4, [sp, #8]
   1c7d4:	strh	r4, [sp, #2]
   1c7d8:	mov	r5, r0
   1c7dc:	str	r4, [sp, #12]
   1c7e0:	str	r4, [sp, #16]
   1c7e4:	str	r4, [sp, #20]
   1c7e8:	bl	1271c <getpid@plt>
   1c7ec:	mov	r6, sp
   1c7f0:	str	r0, [sp, #24]
   1c7f4:	mov	r0, #2
   1c7f8:	strh	r0, [sp]
   1c7fc:	mov	r0, r5
   1c800:	mov	r1, #14
   1c804:	mov	r2, r6
   1c808:	bl	127d0 <fcntl64@plt>
   1c80c:	cmn	r0, #1
   1c810:	bne	1c82c <__gcov_flush@@Base+0x468>
   1c814:	bl	12758 <__errno_location@plt>
   1c818:	ldr	r0, [r0]
   1c81c:	cmp	r0, #4
   1c820:	beq	1c7fc <__gcov_flush@@Base+0x438>
   1c824:	cmp	r0, #37	; 0x25
   1c828:	mvneq	r4, #0
   1c82c:	mov	r0, r4
   1c830:	sub	sp, fp, #16
   1c834:	pop	{r4, r5, r6, sl, fp, pc}
   1c838:	push	{r4, r5, fp, lr}
   1c83c:	add	fp, sp, #8
   1c840:	sub	sp, sp, #32
   1c844:	mov	r2, #182	; 0xb6
   1c848:	orr	r2, r2, #256	; 0x100
   1c84c:	mov	r1, #66	; 0x42
   1c850:	bl	126d4 <open64@plt>
   1c854:	cmp	r0, #0
   1c858:	bmi	1c8d4 <__gcov_flush@@Base+0x510>
   1c85c:	mov	r4, r0
   1c860:	mov	r0, #0
   1c864:	str	r0, [sp, #8]
   1c868:	strh	r0, [sp, #2]
   1c86c:	str	r0, [sp, #12]
   1c870:	str	r0, [sp, #16]
   1c874:	str	r0, [sp, #20]
   1c878:	bl	1271c <getpid@plt>
   1c87c:	mov	r5, sp
   1c880:	str	r0, [sp, #24]
   1c884:	mov	r0, #1
   1c888:	strh	r0, [sp]
   1c88c:	mov	r0, r4
   1c890:	mov	r1, #14
   1c894:	mov	r2, r5
   1c898:	bl	127d0 <fcntl64@plt>
   1c89c:	cmn	r0, #1
   1c8a0:	bne	1c8bc <__gcov_flush@@Base+0x4f8>
   1c8a4:	bl	12758 <__errno_location@plt>
   1c8a8:	ldr	r0, [r0]
   1c8ac:	cmp	r0, #4
   1c8b0:	beq	1c88c <__gcov_flush@@Base+0x4c8>
   1c8b4:	cmp	r0, #37	; 0x25
   1c8b8:	beq	1c8e0 <__gcov_flush@@Base+0x51c>
   1c8bc:	ldr	r1, [pc, #76]	; 1c910 <__gcov_flush@@Base+0x54c>
   1c8c0:	mov	r0, r4
   1c8c4:	add	r1, pc, r1
   1c8c8:	bl	12620 <fdopen@plt>
   1c8cc:	sub	sp, fp, #8
   1c8d0:	pop	{r4, r5, fp, pc}
   1c8d4:	mov	r0, #0
   1c8d8:	sub	sp, fp, #8
   1c8dc:	pop	{r4, r5, fp, pc}
   1c8e0:	ldr	r1, [pc, #28]	; 1c904 <__gcov_flush@@Base+0x540>
   1c8e4:	ldr	r2, [pc, #28]	; 1c908 <__gcov_flush@@Base+0x544>
   1c8e8:	ldr	r0, [pc, #28]	; 1c90c <__gcov_flush@@Base+0x548>
   1c8ec:	add	r1, pc, r1
   1c8f0:	add	r2, pc, r2
   1c8f4:	ldr	r0, [pc, r0]
   1c8f8:	ldr	r0, [r0]
   1c8fc:	bl	1274c <fprintf@plt>
   1c900:	b	1c8bc <__gcov_flush@@Base+0x4f8>
   1c904:	andeq	r1, r0, lr, lsr #20
   1c908:	andeq	r1, r0, r3, ror sl
   1c90c:	andeq	r2, r1, r4, asr #15
   1c910:			; <UNDEFINED> instruction: 0x000018b4
   1c914:	push	{r4, r5, r6, sl, fp, lr}
   1c918:	add	fp, sp, #16
   1c91c:	mov	r6, r0
   1c920:	ldr	r0, [pc, #120]	; 1c9a0 <__gcov_flush@@Base+0x5dc>
   1c924:	mov	r4, r1
   1c928:	add	r0, pc, r0
   1c92c:	bl	126e0 <getenv@plt>
   1c930:	mov	r5, r0
   1c934:	ldr	r0, [pc, #104]	; 1c9a4 <__gcov_flush@@Base+0x5e0>
   1c938:	add	r0, pc, r0
   1c93c:	bl	126e0 <getenv@plt>
   1c940:	mov	r1, #0
   1c944:	str	r1, [r4]
   1c948:	str	r1, [r6]
   1c94c:	cmp	r5, #0
   1c950:	ldrbne	r2, [r5]
   1c954:	cmpne	r2, #0
   1c958:	bne	1c964 <__gcov_flush@@Base+0x5a0>
   1c95c:	mov	r0, r1
   1c960:	pop	{r4, r5, r6, sl, fp, pc}
   1c964:	cmp	r0, #0
   1c968:	beq	1c980 <__gcov_flush@@Base+0x5bc>
   1c96c:	mov	r1, #0
   1c970:	mov	r2, #10
   1c974:	bl	1262c <strtol@plt>
   1c978:	bic	r0, r0, r0, asr #31
   1c97c:	b	1c984 <__gcov_flush@@Base+0x5c0>
   1c980:	mov	r0, #0
   1c984:	str	r0, [r6]
   1c988:	mov	r0, r5
   1c98c:	bl	12734 <strlen@plt>
   1c990:	mov	r1, r5
   1c994:	str	r0, [r4]
   1c998:	mov	r0, r1
   1c99c:	pop	{r4, r5, r6, sl, fp, pc}
   1c9a0:	andeq	r1, r0, r9, ror #20
   1c9a4:	andeq	r1, r0, r5, ror #20
   1c9a8:	push	{r4, r5, r6, r7, fp, lr}
   1c9ac:	add	fp, sp, #16
   1c9b0:	mov	r6, r0
   1c9b4:	ldr	r0, [fp, #8]
   1c9b8:	mov	r5, r3
   1c9bc:	mov	r7, r2
   1c9c0:	mov	r4, r1
   1c9c4:	cmp	r0, #1
   1c9c8:	blt	1ca00 <__gcov_flush@@Base+0x63c>
   1c9cc:	add	r1, r4, #1
   1c9d0:	mov	r2, #0
   1c9d4:	b	1c9ec <__gcov_flush@@Base+0x628>
   1c9d8:	add	r2, r2, #1
   1c9dc:	mov	r4, r1
   1c9e0:	add	r1, r1, #1
   1c9e4:	cmp	r2, r0
   1c9e8:	bge	1ca00 <__gcov_flush@@Base+0x63c>
   1c9ec:	ldrb	r3, [r1]
   1c9f0:	cmp	r3, #47	; 0x2f
   1c9f4:	beq	1c9d8 <__gcov_flush@@Base+0x614>
   1c9f8:	cmp	r3, #0
   1c9fc:	bne	1c9e0 <__gcov_flush@@Base+0x61c>
   1ca00:	mov	r0, r6
   1ca04:	mov	r1, r7
   1ca08:	mov	r2, r5
   1ca0c:	bl	12674 <memcpy@plt>
   1ca10:	add	r0, r5, r7
   1ca14:	ldrb	r0, [r0, #-1]
   1ca18:	cmp	r0, #47	; 0x2f
   1ca1c:	movne	r0, #47	; 0x2f
   1ca20:	strbne	r0, [r6, r5]
   1ca24:	mov	r0, r4
   1ca28:	addne	r5, r5, #1
   1ca2c:	add	r5, r6, r5
   1ca30:	bl	12734 <strlen@plt>
   1ca34:	add	r2, r0, #1
   1ca38:	mov	r0, r5
   1ca3c:	mov	r1, r4
   1ca40:	pop	{r4, r5, r6, r7, fp, lr}
   1ca44:	b	12674 <memcpy@plt>
   1ca48:	mov	r1, #47	; 0x2f
   1ca4c:	b	12740 <strchr@plt>
   1ca50:	mov	r1, #47	; 0x2f
   1ca54:	b	127dc <strrchr@plt>
   1ca58:	push	{fp, lr}
   1ca5c:	mov	fp, sp
   1ca60:	sub	sp, sp, #8
   1ca64:	mov	r0, #0
   1ca68:	str	r0, [sp, #4]
   1ca6c:	add	r1, sp, #4
   1ca70:	mov	r0, #2
   1ca74:	bl	127a0 <prctl@plt>
   1ca78:	ldr	r1, [sp, #4]
   1ca7c:	cmp	r0, #0
   1ca80:	cmpeq	r1, #9
   1ca84:	bne	1ca98 <__gcov_flush@@Base+0x6d4>
   1ca88:	mov	r0, #1
   1ca8c:	mov	r1, #0
   1ca90:	bl	127a0 <prctl@plt>
   1ca94:	ldr	r1, [sp, #4]
   1ca98:	sub	r0, r1, #9
   1ca9c:	clz	r0, r0
   1caa0:	lsr	r0, r0, #5
   1caa4:	mov	sp, fp
   1caa8:	pop	{fp, pc}
   1caac:	mov	r0, #1
   1cab0:	mov	r1, #9
   1cab4:	b	127a0 <prctl@plt>

0001cab8 <__libc_csu_init@@Base>:
   1cab8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cabc:	mov	r7, r0
   1cac0:	ldr	r6, [pc, #72]	; 1cb10 <__libc_csu_init@@Base+0x58>
   1cac4:	ldr	r5, [pc, #72]	; 1cb14 <__libc_csu_init@@Base+0x5c>
   1cac8:	add	r6, pc, r6
   1cacc:	add	r5, pc, r5
   1cad0:	sub	r6, r6, r5
   1cad4:	mov	r8, r1
   1cad8:	mov	r9, r2
   1cadc:	bl	12600 <fdopen@plt-0x20>
   1cae0:	asrs	r6, r6, #2
   1cae4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cae8:	mov	r4, #0
   1caec:	add	r4, r4, #1
   1caf0:	ldr	r3, [r5], #4
   1caf4:	mov	r2, r9
   1caf8:	mov	r1, r8
   1cafc:	mov	r0, r7
   1cb00:	blx	r3
   1cb04:	cmp	r6, r4
   1cb08:	bne	1caec <__libc_csu_init@@Base+0x34>
   1cb0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cb10:	andeq	r2, r1, r4, lsr r4
   1cb14:	andeq	r2, r1, ip, lsl r4

0001cb18 <__libc_csu_fini@@Base>:
   1cb18:	bx	lr
   1cb1c:	ldr	r3, [pc, #12]	; 1cb30 <__libc_csu_fini@@Base+0x18>
   1cb20:	mov	r1, #0
   1cb24:	add	r3, pc, r3
   1cb28:	ldr	r2, [r3]
   1cb2c:	b	12764 <__cxa_atexit@plt>
   1cb30:	andeq	r2, r1, r0, lsr #11

Disassembly of section .fini:

0001cb34 <.fini>:
   1cb34:	push	{r3, lr}
   1cb38:	pop	{r3, pc}
