
../repos/findutils/xargs/xargs:     file format elf32-littlearm


Disassembly of section .init:

00011408 <.init>:
   11408:	push	{r3, lr}
   1140c:	bl	11848 <__assert_fail@plt+0x48>
   11410:	pop	{r3, pc}

Disassembly of section .plt:

00011414 <fdopen@plt-0x14>:
   11414:	push	{lr}		; (str lr, [sp, #-4]!)
   11418:	ldr	lr, [pc, #4]	; 11424 <fdopen@plt-0x4>
   1141c:	add	lr, pc, lr
   11420:	ldr	pc, [lr, #8]!
   11424:	ldrdeq	fp, [r1], -ip

00011428 <fdopen@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #110592	; 0x1b000
   11430:	ldr	pc, [ip, #3036]!	; 0xbdc

00011434 <calloc@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #110592	; 0x1b000
   1143c:	ldr	pc, [ip, #3028]!	; 0xbd4

00011440 <strcmp@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #110592	; 0x1b000
   11448:	ldr	pc, [ip, #3020]!	; 0xbcc

0001144c <strtol@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #110592	; 0x1b000
   11454:	ldr	pc, [ip, #3012]!	; 0xbc4

00011458 <printf@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #110592	; 0x1b000
   11460:	ldr	pc, [ip, #3004]!	; 0xbbc

00011464 <read@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #110592	; 0x1b000
   1146c:	ldr	pc, [ip, #2996]!	; 0xbb4

00011470 <fflush@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #110592	; 0x1b000
   11478:	ldr	pc, [ip, #2988]!	; 0xbac

0001147c <wcwidth@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #110592	; 0x1b000
   11484:	ldr	pc, [ip, #2980]!	; 0xba4

00011488 <free@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #110592	; 0x1b000
   11490:	ldr	pc, [ip, #2972]!	; 0xb9c

00011494 <ferror@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #110592	; 0x1b000
   1149c:	ldr	pc, [ip, #2964]!	; 0xb94

000114a0 <_exit@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #110592	; 0x1b000
   114a8:	ldr	pc, [ip, #2956]!	; 0xb8c

000114ac <memcpy@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #110592	; 0x1b000
   114b4:	ldr	pc, [ip, #2948]!	; 0xb84

000114b8 <execvp@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #110592	; 0x1b000
   114c0:	ldr	pc, [ip, #2940]!	; 0xb7c

000114c4 <mbsinit@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #110592	; 0x1b000
   114cc:	ldr	pc, [ip, #2932]!	; 0xb74

000114d0 <signal@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #110592	; 0x1b000
   114d8:	ldr	pc, [ip, #2924]!	; 0xb6c

000114dc <dcgettext@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #110592	; 0x1b000
   114e4:	ldr	pc, [ip, #2916]!	; 0xb64

000114e8 <sysconf@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #110592	; 0x1b000
   114f0:	ldr	pc, [ip, #2908]!	; 0xb5c

000114f4 <dup2@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #110592	; 0x1b000
   114fc:	ldr	pc, [ip, #2900]!	; 0xb54

00011500 <getrlimit64@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #110592	; 0x1b000
   11508:	ldr	pc, [ip, #2892]!	; 0xb4c

0001150c <realloc@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #110592	; 0x1b000
   11514:	ldr	pc, [ip, #2884]!	; 0xb44

00011518 <textdomain@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #110592	; 0x1b000
   11520:	ldr	pc, [ip, #2876]!	; 0xb3c

00011524 <iswcntrl@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #110592	; 0x1b000
   1152c:	ldr	pc, [ip, #2868]!	; 0xb34

00011530 <iswprint@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #110592	; 0x1b000
   11538:	ldr	pc, [ip, #2860]!	; 0xb2c

0001153c <poll@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #110592	; 0x1b000
   11544:	ldr	pc, [ip, #2852]!	; 0xb24

00011548 <sigaction@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #110592	; 0x1b000
   11550:	ldr	pc, [ip, #2844]!	; 0xb1c

00011554 <fwrite@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #110592	; 0x1b000
   1155c:	ldr	pc, [ip, #2836]!	; 0xb14

00011560 <lseek64@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #110592	; 0x1b000
   11568:	ldr	pc, [ip, #2828]!	; 0xb0c

0001156c <waitpid@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #110592	; 0x1b000
   11574:	ldr	pc, [ip, #2820]!	; 0xb04

00011578 <__ctype_get_mb_cur_max@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #110592	; 0x1b000
   11580:	ldr	pc, [ip, #2812]!	; 0xafc

00011584 <strcpy@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #110592	; 0x1b000
   1158c:	ldr	pc, [ip, #2804]!	; 0xaf4

00011590 <__fpending@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #110592	; 0x1b000
   11598:	ldr	pc, [ip, #2796]!	; 0xaec

0001159c <mbrtowc@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #110592	; 0x1b000
   115a4:	ldr	pc, [ip, #2788]!	; 0xae4

000115a8 <error@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #110592	; 0x1b000
   115b0:	ldr	pc, [ip, #2780]!	; 0xadc

000115b4 <opendir@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #110592	; 0x1b000
   115bc:	ldr	pc, [ip, #2772]!	; 0xad4

000115c0 <open64@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #110592	; 0x1b000
   115c8:	ldr	pc, [ip, #2764]!	; 0xacc

000115cc <getenv@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #110592	; 0x1b000
   115d4:	ldr	pc, [ip, #2756]!	; 0xac4

000115d8 <malloc@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #110592	; 0x1b000
   115e0:	ldr	pc, [ip, #2748]!	; 0xabc

000115e4 <__libc_start_main@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #110592	; 0x1b000
   115ec:	ldr	pc, [ip, #2740]!	; 0xab4

000115f0 <__freading@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #110592	; 0x1b000
   115f8:	ldr	pc, [ip, #2732]!	; 0xaac

000115fc <__gmon_start__@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #110592	; 0x1b000
   11604:	ldr	pc, [ip, #2724]!	; 0xaa4

00011608 <getopt_long@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #110592	; 0x1b000
   11610:	ldr	pc, [ip, #2716]!	; 0xa9c

00011614 <__ctype_b_loc@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #110592	; 0x1b000
   1161c:	ldr	pc, [ip, #2708]!	; 0xa94

00011620 <getpid@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #110592	; 0x1b000
   11628:	ldr	pc, [ip, #2700]!	; 0xa8c

0001162c <exit@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #110592	; 0x1b000
   11634:	ldr	pc, [ip, #2692]!	; 0xa84

00011638 <bcmp@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #110592	; 0x1b000
   11640:	ldr	pc, [ip, #2684]!	; 0xa7c

00011644 <strtoul@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #110592	; 0x1b000
   1164c:	ldr	pc, [ip, #2676]!	; 0xa74

00011650 <strlen@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #110592	; 0x1b000
   11658:	ldr	pc, [ip, #2668]!	; 0xa6c

0001165c <strchr@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #110592	; 0x1b000
   11664:	ldr	pc, [ip, #2660]!	; 0xa64

00011668 <setenv@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #110592	; 0x1b000
   11670:	ldr	pc, [ip, #2652]!	; 0xa5c

00011674 <fprintf@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #110592	; 0x1b000
   1167c:	ldr	pc, [ip, #2644]!	; 0xa54

00011680 <__errno_location@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #110592	; 0x1b000
   11688:	ldr	pc, [ip, #2636]!	; 0xa4c

0001168c <snprintf@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #110592	; 0x1b000
   11694:	ldr	pc, [ip, #2628]!	; 0xa44

00011698 <__cxa_atexit@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #110592	; 0x1b000
   116a0:	ldr	pc, [ip, #2620]!	; 0xa3c

000116a4 <memset@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #110592	; 0x1b000
   116ac:	ldr	pc, [ip, #2612]!	; 0xa34

000116b0 <strncpy@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #110592	; 0x1b000
   116b8:	ldr	pc, [ip, #2604]!	; 0xa2c

000116bc <write@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #110592	; 0x1b000
   116c4:	ldr	pc, [ip, #2596]!	; 0xa24

000116c8 <fileno@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #110592	; 0x1b000
   116d0:	ldr	pc, [ip, #2588]!	; 0xa1c

000116d4 <memchr@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #110592	; 0x1b000
   116dc:	ldr	pc, [ip, #2580]!	; 0xa14

000116e0 <fclose@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #110592	; 0x1b000
   116e8:	ldr	pc, [ip, #2572]!	; 0xa0c

000116ec <strnlen@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #110592	; 0x1b000
   116f4:	ldr	pc, [ip, #2564]!	; 0xa04

000116f8 <pipe@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #110592	; 0x1b000
   11700:	ldr	pc, [ip, #2556]!	; 0x9fc

00011704 <fseeko64@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #110592	; 0x1b000
   1170c:	ldr	pc, [ip, #2548]!	; 0x9f4

00011710 <fcntl64@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #110592	; 0x1b000
   11718:	ldr	pc, [ip, #2540]!	; 0x9ec

0001171c <setlocale@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #110592	; 0x1b000
   11724:	ldr	pc, [ip, #2532]!	; 0x9e4

00011728 <sigemptyset@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #110592	; 0x1b000
   11730:	ldr	pc, [ip, #2524]!	; 0x9dc

00011734 <fork@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #110592	; 0x1b000
   1173c:	ldr	pc, [ip, #2516]!	; 0x9d4

00011740 <strrchr@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #110592	; 0x1b000
   11748:	ldr	pc, [ip, #2508]!	; 0x9cc

0001174c <nl_langinfo@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #110592	; 0x1b000
   11754:	ldr	pc, [ip, #2500]!	; 0x9c4

00011758 <fputc@plt>:
   11758:	add	ip, pc, #0, 12
   1175c:	add	ip, ip, #110592	; 0x1b000
   11760:	ldr	pc, [ip, #2492]!	; 0x9bc

00011764 <readdir64@plt>:
   11764:	add	ip, pc, #0, 12
   11768:	add	ip, ip, #110592	; 0x1b000
   1176c:	ldr	pc, [ip, #2484]!	; 0x9b4

00011770 <fdopendir@plt>:
   11770:	add	ip, pc, #0, 12
   11774:	add	ip, ip, #110592	; 0x1b000
   11778:	ldr	pc, [ip, #2476]!	; 0x9ac

0001177c <putc@plt>:
   1177c:	add	ip, pc, #0, 12
   11780:	add	ip, ip, #110592	; 0x1b000
   11784:	ldr	pc, [ip, #2468]!	; 0x9a4

00011788 <dirfd@plt>:
   11788:	add	ip, pc, #0, 12
   1178c:	add	ip, ip, #110592	; 0x1b000
   11790:	ldr	pc, [ip, #2460]!	; 0x99c

00011794 <bindtextdomain@plt>:
   11794:	add	ip, pc, #0, 12
   11798:	add	ip, ip, #110592	; 0x1b000
   1179c:	ldr	pc, [ip, #2452]!	; 0x994

000117a0 <isatty@plt>:
   117a0:	add	ip, pc, #0, 12
   117a4:	add	ip, ip, #110592	; 0x1b000
   117a8:	ldr	pc, [ip, #2444]!	; 0x98c

000117ac <unsetenv@plt>:
   117ac:	add	ip, pc, #0, 12
   117b0:	add	ip, ip, #110592	; 0x1b000
   117b4:	ldr	pc, [ip, #2436]!	; 0x984

000117b8 <fputs@plt>:
   117b8:	add	ip, pc, #0, 12
   117bc:	add	ip, ip, #110592	; 0x1b000
   117c0:	ldr	pc, [ip, #2428]!	; 0x97c

000117c4 <strncmp@plt>:
   117c4:	add	ip, pc, #0, 12
   117c8:	add	ip, ip, #110592	; 0x1b000
   117cc:	ldr	pc, [ip, #2420]!	; 0x974

000117d0 <abort@plt>:
   117d0:	add	ip, pc, #0, 12
   117d4:	add	ip, ip, #110592	; 0x1b000
   117d8:	ldr	pc, [ip, #2412]!	; 0x96c

000117dc <getc@plt>:
   117dc:	add	ip, pc, #0, 12
   117e0:	add	ip, ip, #110592	; 0x1b000
   117e4:	ldr	pc, [ip, #2404]!	; 0x964

000117e8 <close@plt>:
   117e8:	add	ip, pc, #0, 12
   117ec:	add	ip, ip, #110592	; 0x1b000
   117f0:	ldr	pc, [ip, #2396]!	; 0x95c

000117f4 <closedir@plt>:
   117f4:	add	ip, pc, #0, 12
   117f8:	add	ip, ip, #110592	; 0x1b000
   117fc:	ldr	pc, [ip, #2388]!	; 0x954

00011800 <__assert_fail@plt>:
   11800:	add	ip, pc, #0, 12
   11804:	add	ip, ip, #110592	; 0x1b000
   11808:	ldr	pc, [ip, #2380]!	; 0x94c

Disassembly of section .text:

0001180c <.text>:
   1180c:	mov	fp, #0
   11810:	mov	lr, #0
   11814:	pop	{r1}		; (ldr r1, [sp], #4)
   11818:	mov	r2, sp
   1181c:	push	{r2}		; (str r2, [sp, #-4]!)
   11820:	push	{r0}		; (str r0, [sp, #-4]!)
   11824:	ldr	ip, [pc, #16]	; 1183c <__assert_fail@plt+0x3c>
   11828:	push	{ip}		; (str ip, [sp, #-4]!)
   1182c:	ldr	r0, [pc, #12]	; 11840 <__assert_fail@plt+0x40>
   11830:	ldr	r3, [pc, #12]	; 11844 <__assert_fail@plt+0x44>
   11834:	bl	115e4 <__libc_start_main@plt>
   11838:	bl	117d0 <abort@plt>
   1183c:	strdeq	r9, [r1], -r0
   11840:	strdeq	r1, [r1], -ip
   11844:	muleq	r1, r0, lr
   11848:	ldr	r3, [pc, #20]	; 11864 <__assert_fail@plt+0x64>
   1184c:	ldr	r2, [pc, #20]	; 11868 <__assert_fail@plt+0x68>
   11850:	add	r3, pc, r3
   11854:	ldr	r2, [r3, r2]
   11858:	cmp	r2, #0
   1185c:	bxeq	lr
   11860:	b	115fc <__gmon_start__@plt>
   11864:	andeq	fp, r1, r8, lsr #15
   11868:	andeq	r0, r0, r8, asr r1
   1186c:	ldr	r0, [pc, #24]	; 1188c <__assert_fail@plt+0x8c>
   11870:	ldr	r3, [pc, #24]	; 11890 <__assert_fail@plt+0x90>
   11874:	cmp	r3, r0
   11878:	bxeq	lr
   1187c:	ldr	r3, [pc, #16]	; 11894 <__assert_fail@plt+0x94>
   11880:	cmp	r3, #0
   11884:	bxeq	lr
   11888:	bx	r3
   1188c:			; <UNDEFINED> instruction: 0x0002d1b8
   11890:			; <UNDEFINED> instruction: 0x0002d1b8
   11894:	andeq	r0, r0, r0
   11898:	ldr	r0, [pc, #36]	; 118c4 <__assert_fail@plt+0xc4>
   1189c:	ldr	r1, [pc, #36]	; 118c8 <__assert_fail@plt+0xc8>
   118a0:	sub	r1, r1, r0
   118a4:	asr	r1, r1, #2
   118a8:	add	r1, r1, r1, lsr #31
   118ac:	asrs	r1, r1, #1
   118b0:	bxeq	lr
   118b4:	ldr	r3, [pc, #16]	; 118cc <__assert_fail@plt+0xcc>
   118b8:	cmp	r3, #0
   118bc:	bxeq	lr
   118c0:	bx	r3
   118c4:			; <UNDEFINED> instruction: 0x0002d1b8
   118c8:			; <UNDEFINED> instruction: 0x0002d1b8
   118cc:	andeq	r0, r0, r0
   118d0:	push	{r4, lr}
   118d4:	ldr	r4, [pc, #24]	; 118f4 <__assert_fail@plt+0xf4>
   118d8:	ldrb	r3, [r4]
   118dc:	cmp	r3, #0
   118e0:	popne	{r4, pc}
   118e4:	bl	1186c <__assert_fail@plt+0x6c>
   118e8:	mov	r3, #1
   118ec:	strb	r3, [r4]
   118f0:	pop	{r4, pc}
   118f4:	andeq	sp, r2, r4, ror #3
   118f8:	b	11898 <__assert_fail@plt+0x98>
   118fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11900:	add	fp, sp, #28
   11904:	sub	sp, sp, #212	; 0xd4
   11908:	mov	r9, r0
   1190c:	mov	r0, #0
   11910:	strb	r0, [fp, #-40]	; 0xffffffd8
   11914:	movw	r0, #25445	; 0x6365
   11918:	movt	r0, #28520	; 0x6f68
   1191c:	str	r0, [fp, #-44]	; 0xffffffd4
   11920:	str	r1, [sp, #44]	; 0x2c
   11924:	ldr	r0, [r1]
   11928:	cmp	r0, #0
   1192c:	movweq	r0, #40733	; 0x9f1d
   11930:	movteq	r0, #1
   11934:	bl	167b8 <__assert_fail@plt+0x4fb8>
   11938:	bl	14f44 <__assert_fail@plt+0x3744>
   1193c:	bl	11620 <getpid@plt>
   11940:	movw	r1, #53736	; 0xd1e8
   11944:	movt	r1, #2
   11948:	str	r0, [r1]
   1194c:	movw	r1, #53740	; 0xd1ec
   11950:	movt	r1, #2
   11954:	mov	r0, #0
   11958:	str	r0, [r1]
   1195c:	movw	r1, #44102	; 0xac46
   11960:	movt	r1, #1
   11964:	mov	r0, #6
   11968:	bl	1171c <setlocale@plt>
   1196c:	movw	r4, #48282	; 0xbc9a
   11970:	movt	r4, #1
   11974:	movw	r1, #40739	; 0x9f23
   11978:	movt	r1, #1
   1197c:	mov	r0, r4
   11980:	bl	11794 <bindtextdomain@plt>
   11984:	mov	r0, r4
   11988:	bl	11518 <textdomain@plt>
   1198c:	movw	r0, #22744	; 0x58d8
   11990:	movt	r0, #1
   11994:	bl	19ef4 <__assert_fail@plt+0x86f4>
   11998:	cmp	r0, #0
   1199c:	bne	12958 <__assert_fail@plt+0x1158>
   119a0:	movw	r0, #12276	; 0x2ff4
   119a4:	movt	r0, #1
   119a8:	bl	19ef4 <__assert_fail@plt+0x86f4>
   119ac:	cmp	r0, #0
   119b0:	bne	12958 <__assert_fail@plt+0x1158>
   119b4:	movw	r8, #53744	; 0xd1f0
   119b8:	movt	r8, #2
   119bc:	mov	r0, r8
   119c0:	mov	r1, #2048	; 0x800
   119c4:	bl	14cc0 <__assert_fail@plt+0x34c0>
   119c8:	mov	r4, r0
   119cc:	sub	r0, r0, #1
   119d0:	cmp	r0, #2
   119d4:	str	r4, [sp, #32]
   119d8:	bcs	119e8 <__assert_fail@plt+0x1e8>
   119dc:	movw	r6, #12432	; 0x3090
   119e0:	movt	r6, #1
   119e4:	b	11a44 <__assert_fail@plt+0x244>
   119e8:	mov	r0, #0
   119ec:	bl	114e8 <sysconf@plt>
   119f0:	cmp	r0, #1
   119f4:	blt	11a18 <__assert_fail@plt+0x218>
   119f8:	cmp	r0, #2048	; 0x800
   119fc:	ble	12a30 <__assert_fail@plt+0x1230>
   11a00:	ldr	r2, [r8, #12]
   11a04:	sub	r1, r0, #2048	; 0x800
   11a08:	mov	r0, r2
   11a0c:	bl	130bc <__assert_fail@plt+0x18bc>
   11a10:	str	r0, [r8, #12]
   11a14:	b	11a1c <__assert_fail@plt+0x21c>
   11a18:	ldr	r0, [r8, #12]
   11a1c:	mov	r1, #0
   11a20:	cmp	r1, r0, lsr #11
   11a24:	beq	129f0 <__assert_fail@plt+0x11f0>
   11a28:	movw	r0, #12488	; 0x30c8
   11a2c:	movt	r0, #1
   11a30:	str	r0, [r8, #32]
   11a34:	mov	r0, r8
   11a38:	bl	14d80 <__assert_fail@plt+0x3580>
   11a3c:	movw	r6, #12272	; 0x2ff0
   11a40:	movt	r6, #1
   11a44:	movw	r0, #10832	; 0x2a50
   11a48:	movt	r0, #1
   11a4c:	str	r0, [sp, #40]	; 0x28
   11a50:	movw	r0, #49011	; 0xbf73
   11a54:	movt	r0, #1
   11a58:	str	r0, [sp, #48]	; 0x30
   11a5c:	movw	r4, #46800	; 0xb6d0
   11a60:	movt	r4, #1
   11a64:	movw	r5, #53792	; 0xd220
   11a68:	movt	r5, #2
   11a6c:	mov	r0, #1
   11a70:	str	r0, [sp, #36]	; 0x24
   11a74:	mov	r0, #0
   11a78:	mov	r7, r0
   11a7c:	sub	r0, fp, #36	; 0x24
   11a80:	str	r0, [sp]
   11a84:	mov	r0, r9
   11a88:	ldr	r1, [sp, #44]	; 0x2c
   11a8c:	movw	r2, #40883	; 0x9fb3
   11a90:	movt	r2, #1
   11a94:	mov	r3, r4
   11a98:	bl	11608 <getopt_long@plt>
   11a9c:	sub	r1, r0, #48	; 0x30
   11aa0:	cmp	r1, #208	; 0xd0
   11aa4:	bhi	12208 <__assert_fail@plt+0xa08>
   11aa8:	add	r2, pc, #4
   11aac:	mov	r0, #1
   11ab0:	ldr	pc, [r2, r1, lsl #2]
   11ab4:	andeq	r1, r1, r8, asr #31
   11ab8:	andeq	r2, r1, r8, asr #18
   11abc:	andeq	r2, r1, r8, asr #18
   11ac0:	andeq	r2, r1, r8, asr #18
   11ac4:	andeq	r2, r1, r8, asr #18
   11ac8:	andeq	r2, r1, r8, asr #18
   11acc:	andeq	r2, r1, r8, asr #18
   11ad0:	andeq	r2, r1, r8, asr #18
   11ad4:	andeq	r2, r1, r8, asr #18
   11ad8:	andeq	r2, r1, r8, asr #18
   11adc:	andeq	r2, r1, r8, asr #18
   11ae0:	andeq	r2, r1, r8, asr #18
   11ae4:	andeq	r2, r1, r8, asr #18
   11ae8:	andeq	r2, r1, r8, asr #18
   11aec:	andeq	r2, r1, r8, asr #18
   11af0:	andeq	r2, r1, r8, asr #18
   11af4:	andeq	r2, r1, r8, asr #18
   11af8:	andeq	r2, r1, r8, asr #18
   11afc:	andeq	r2, r1, r8, asr #18
   11b00:	andeq	r2, r1, r8, asr #18
   11b04:	andeq	r2, r1, r8, asr #18
   11b08:	strdeq	r1, [r1], -r8
   11b0c:	andeq	r2, r1, r8, asr #18
   11b10:	andeq	r2, r1, r8, asr #18
   11b14:	andeq	r2, r1, r8, asr #18
   11b18:	andeq	r1, r1, ip, lsl lr
   11b1c:	andeq	r2, r1, r8, asr #18
   11b20:	andeq	r2, r1, r8, asr #18
   11b24:	andeq	r1, r1, ip, asr #30
   11b28:	andeq	r2, r1, r8, asr #18
   11b2c:	andeq	r2, r1, r8, asr #18
   11b30:	andeq	r2, r1, r8, asr #18
   11b34:	muleq	r1, r8, r0
   11b38:	andeq	r2, r1, r8, asr #18
   11b3c:	andeq	r2, r1, r8, asr #18
   11b40:	andeq	r1, r1, r8, ror sl
   11b44:	andeq	r2, r1, r8, asr #18
   11b48:	andeq	r2, r1, r8, asr #18
   11b4c:	andeq	r2, r1, r8, asr #18
   11b50:	andeq	r2, r1, r8, asr #18
   11b54:	andeq	r2, r1, r8, asr #18
   11b58:	andeq	r2, r1, r8, asr #18
   11b5c:	andeq	r2, r1, r8, asr #18
   11b60:	andeq	r2, r1, r8, asr #18
   11b64:	andeq	r2, r1, r8, asr #18
   11b68:	andeq	r2, r1, r8, asr #18
   11b6c:	andeq	r2, r1, r8, asr #18
   11b70:	andeq	r2, r1, r8, asr #18
   11b74:	andeq	r2, r1, r8, asr #18
   11b78:	andeq	r2, r1, r0, ror r1
   11b7c:	andeq	r2, r1, r8, asr #18
   11b80:	andeq	r2, r1, r8, asr #18
   11b84:	andeq	r2, r1, r8, rrx
   11b88:	strdeq	r1, [r1], -r8
   11b8c:	andeq	r2, r1, r8, asr #18
   11b90:	andeq	r2, r1, r8, asr #18
   11b94:	andeq	r2, r1, r0, asr r9
   11b98:	andeq	r1, r1, ip, lsl lr
   11b9c:	andeq	r2, r1, r8, asr #18
   11ba0:	andeq	r2, r1, r8, asr #18
   11ba4:	andeq	r1, r1, ip, lsl pc
   11ba8:	andeq	r2, r1, r8, asr #18
   11bac:	strdeq	r2, [r1], -r4
   11bb0:			; <UNDEFINED> instruction: 0x00011fb8
   11bb4:	ldrdeq	r2, [r1], -r0
   11bb8:	andeq	r2, r1, r8, asr #18
   11bbc:	andeq	r1, r1, r8, lsr #29
   11bc0:	ldrdeq	r1, [r1], -r0
   11bc4:	muleq	r1, r8, lr
   11bc8:	andeq	r2, r1, r8, asr #18
   11bcc:			; <UNDEFINED> instruction: 0x000123b4
   11bd0:	andeq	r2, r1, r8, asr #18
   11bd4:			; <UNDEFINED> instruction: 0x00011eb8
   11bd8:	andeq	r2, r1, r8, asr #18
   11bdc:	andeq	r2, r1, r8, asr #18
   11be0:	andeq	r2, r1, r8, asr #18
   11be4:	andeq	r2, r1, r8, asr #18
   11be8:	andeq	r2, r1, r8, asr #18
   11bec:	andeq	r2, r1, r8, asr #18
   11bf0:	andeq	r2, r1, r8, asr #18
   11bf4:	andeq	r2, r1, r8, asr #18
   11bf8:	andeq	r2, r1, r8, asr #18
   11bfc:	andeq	r2, r1, r8, asr #18
   11c00:	andeq	r2, r1, r8, asr #18
   11c04:	andeq	r2, r1, r8, asr #18
   11c08:	andeq	r2, r1, r8, asr #18
   11c0c:	andeq	r2, r1, r8, asr #18
   11c10:	andeq	r2, r1, r8, asr #18
   11c14:	andeq	r2, r1, r8, asr #18
   11c18:	andeq	r2, r1, r8, asr #18
   11c1c:	andeq	r2, r1, r8, asr #18
   11c20:	andeq	r2, r1, r8, asr #18
   11c24:	andeq	r2, r1, r8, asr #18
   11c28:	andeq	r2, r1, r8, asr #18
   11c2c:	andeq	r2, r1, r8, asr #18
   11c30:	andeq	r2, r1, r8, asr #18
   11c34:	andeq	r2, r1, r8, asr #18
   11c38:	andeq	r2, r1, r8, asr #18
   11c3c:	andeq	r2, r1, r8, asr #18
   11c40:	andeq	r2, r1, r8, asr #18
   11c44:	andeq	r2, r1, r8, asr #18
   11c48:	andeq	r2, r1, r8, asr #18
   11c4c:	andeq	r2, r1, r8, asr #18
   11c50:	andeq	r2, r1, r8, asr #18
   11c54:	andeq	r2, r1, r8, asr #18
   11c58:	andeq	r2, r1, r8, asr #18
   11c5c:	andeq	r2, r1, r8, asr #18
   11c60:	andeq	r2, r1, r8, asr #18
   11c64:	andeq	r2, r1, r8, asr #18
   11c68:	andeq	r2, r1, r8, asr #18
   11c6c:	andeq	r2, r1, r8, asr #18
   11c70:	andeq	r2, r1, r8, asr #18
   11c74:	andeq	r2, r1, r8, asr #18
   11c78:	andeq	r2, r1, r8, asr #18
   11c7c:	andeq	r2, r1, r8, asr #18
   11c80:	andeq	r2, r1, r8, asr #18
   11c84:	andeq	r2, r1, r8, asr #18
   11c88:	andeq	r2, r1, r8, asr #18
   11c8c:	andeq	r2, r1, r8, asr #18
   11c90:	andeq	r2, r1, r8, asr #18
   11c94:	andeq	r2, r1, r8, asr #18
   11c98:	andeq	r2, r1, r8, asr #18
   11c9c:	andeq	r2, r1, r8, asr #18
   11ca0:	andeq	r2, r1, r8, asr #18
   11ca4:	andeq	r2, r1, r8, asr #18
   11ca8:	andeq	r2, r1, r8, asr #18
   11cac:	andeq	r2, r1, r8, asr #18
   11cb0:	andeq	r2, r1, r8, asr #18
   11cb4:	andeq	r2, r1, r8, asr #18
   11cb8:	andeq	r2, r1, r8, asr #18
   11cbc:	andeq	r2, r1, r8, asr #18
   11cc0:	andeq	r2, r1, r8, asr #18
   11cc4:	andeq	r2, r1, r8, asr #18
   11cc8:	andeq	r2, r1, r8, asr #18
   11ccc:	andeq	r2, r1, r8, asr #18
   11cd0:	andeq	r2, r1, r8, asr #18
   11cd4:	andeq	r2, r1, r8, asr #18
   11cd8:	andeq	r2, r1, r8, asr #18
   11cdc:	andeq	r2, r1, r8, asr #18
   11ce0:	andeq	r2, r1, r8, asr #18
   11ce4:	andeq	r2, r1, r8, asr #18
   11ce8:	andeq	r2, r1, r8, asr #18
   11cec:	andeq	r2, r1, r8, asr #18
   11cf0:	andeq	r2, r1, r8, asr #18
   11cf4:	andeq	r2, r1, r8, asr #18
   11cf8:	andeq	r2, r1, r8, asr #18
   11cfc:	andeq	r2, r1, r8, asr #18
   11d00:	andeq	r2, r1, r8, asr #18
   11d04:	andeq	r2, r1, r8, asr #18
   11d08:	andeq	r2, r1, r8, asr #18
   11d0c:	andeq	r2, r1, r8, asr #18
   11d10:	andeq	r2, r1, r8, asr #18
   11d14:	andeq	r2, r1, r8, asr #18
   11d18:	andeq	r2, r1, r8, asr #18
   11d1c:	andeq	r2, r1, r8, asr #18
   11d20:	andeq	r2, r1, r8, asr #18
   11d24:	andeq	r2, r1, r8, asr #18
   11d28:	andeq	r2, r1, r8, asr #18
   11d2c:	andeq	r2, r1, r8, asr #18
   11d30:	andeq	r2, r1, r8, asr #18
   11d34:	andeq	r2, r1, r8, asr #18
   11d38:	andeq	r2, r1, r8, asr #18
   11d3c:	andeq	r2, r1, r8, asr #18
   11d40:	andeq	r2, r1, r8, asr #18
   11d44:	andeq	r2, r1, r8, asr #18
   11d48:	andeq	r2, r1, r8, asr #18
   11d4c:	andeq	r2, r1, r8, asr #18
   11d50:	andeq	r2, r1, r8, asr #18
   11d54:	andeq	r2, r1, r8, asr #18
   11d58:	andeq	r2, r1, r8, asr #18
   11d5c:	andeq	r2, r1, r8, asr #18
   11d60:	andeq	r2, r1, r8, asr #18
   11d64:	andeq	r2, r1, r8, asr #18
   11d68:	andeq	r2, r1, r8, asr #18
   11d6c:	andeq	r2, r1, r8, asr #18
   11d70:	andeq	r2, r1, r8, asr #18
   11d74:	andeq	r2, r1, r8, asr #18
   11d78:	andeq	r2, r1, r8, asr #18
   11d7c:	andeq	r2, r1, r8, asr #18
   11d80:	andeq	r2, r1, r8, asr #18
   11d84:	andeq	r2, r1, r8, asr #18
   11d88:	andeq	r2, r1, r8, asr #18
   11d8c:	andeq	r2, r1, r8, asr #18
   11d90:	andeq	r2, r1, r8, asr #18
   11d94:	andeq	r2, r1, r8, asr #18
   11d98:	andeq	r2, r1, r8, asr #18
   11d9c:	andeq	r2, r1, r8, asr #18
   11da0:	andeq	r2, r1, r8, asr #18
   11da4:	andeq	r2, r1, r8, asr #18
   11da8:	andeq	r2, r1, r8, asr #18
   11dac:	andeq	r2, r1, r8, asr #18
   11db0:	andeq	r2, r1, r8, asr #18
   11db4:	andeq	r2, r1, r8, asr #18
   11db8:	andeq	r2, r1, r8, asr #18
   11dbc:	andeq	r2, r1, r8, asr #18
   11dc0:	andeq	r2, r1, r8, asr #18
   11dc4:	andeq	r2, r1, r8, asr #18
   11dc8:	andeq	r2, r1, r8, asr #18
   11dcc:	andeq	r2, r1, r8, asr #18
   11dd0:	andeq	r2, r1, r8, asr #18
   11dd4:	andeq	r2, r1, r8, asr #18
   11dd8:	andeq	r2, r1, r8, asr #18
   11ddc:	andeq	r2, r1, r8, asr #18
   11de0:	andeq	r2, r1, r8, asr #18
   11de4:	andeq	r2, r1, r8, asr #18
   11de8:	andeq	r2, r1, r8, asr #18
   11dec:	andeq	r2, r1, r8, asr #18
   11df0:	andeq	r2, r1, r8, asr #18
   11df4:	andeq	r1, r1, r8, asr #29
   11df8:	movw	r0, #53728	; 0xd1e0
   11dfc:	movt	r0, #2
   11e00:	ldr	r0, [r0]
   11e04:	cmp	r0, #0
   11e08:	beq	12188 <__assert_fail@plt+0x988>
   11e0c:	ldrb	r1, [r0]
   11e10:	cmp	r1, #0
   11e14:	moveq	r0, #0
   11e18:	b	1218c <__assert_fail@plt+0x98c>
   11e1c:	movw	r0, #53728	; 0xd1e0
   11e20:	movt	r0, #2
   11e24:	ldr	r0, [r0]
   11e28:	cmp	r0, #0
   11e2c:	movw	r1, #40916	; 0x9fd4
   11e30:	movt	r1, #1
   11e34:	moveq	r0, r1
   11e38:	str	r0, [r8, #24]
   11e3c:	ldr	r0, [r8, #40]	; 0x28
   11e40:	cmp	r0, #0
   11e44:	beq	11e64 <__assert_fail@plt+0x664>
   11e48:	movw	r0, #40919	; 0x9fd7
   11e4c:	movt	r0, #1
   11e50:	movw	r1, #40935	; 0x9fe7
   11e54:	movt	r1, #1
   11e58:	bl	1399c <__assert_fail@plt+0x219c>
   11e5c:	mov	r0, #0
   11e60:	str	r0, [r8, #40]	; 0x28
   11e64:	ldr	r0, [r8, #36]	; 0x24
   11e68:	cmp	r0, #0
   11e6c:	mov	r0, r7
   11e70:	beq	11a78 <__assert_fail@plt+0x278>
   11e74:	movw	r0, #40919	; 0x9fd7
   11e78:	movt	r0, #1
   11e7c:	movw	r1, #40946	; 0x9ff2
   11e80:	movt	r1, #1
   11e84:	bl	1399c <__assert_fail@plt+0x219c>
   11e88:	mov	r0, #0
   11e8c:	str	r0, [r8, #36]	; 0x24
   11e90:	mov	r0, r7
   11e94:	b	11a78 <__assert_fail@plt+0x278>
   11e98:	mov	r0, #1
   11e9c:	movw	r1, #53796	; 0xd224
   11ea0:	movt	r1, #2
   11ea4:	b	120e8 <__assert_fail@plt+0x8e8>
   11ea8:	mov	r0, #0
   11eac:	str	r0, [sp, #36]	; 0x24
   11eb0:	mov	r0, r7
   11eb4:	b	11a78 <__assert_fail@plt+0x278>
   11eb8:	mov	r0, #1
   11ebc:	str	r0, [r8]
   11ec0:	mov	r0, r7
   11ec4:	b	11a78 <__assert_fail@plt+0x278>
   11ec8:	mov	r4, r6
   11ecc:	movw	r0, #53728	; 0xd1e0
   11ed0:	movt	r0, #2
   11ed4:	ldr	r6, [r0]
   11ed8:	mov	r0, r6
   11edc:	mov	r1, #61	; 0x3d
   11ee0:	bl	1165c <strchr@plt>
   11ee4:	cmp	r0, #0
   11ee8:	bne	12984 <__assert_fail@plt+0x1184>
   11eec:	movw	r0, #53800	; 0xd228
   11ef0:	movt	r0, #2
   11ef4:	str	r6, [r0]
   11ef8:	mov	r0, r6
   11efc:	bl	117ac <unsetenv@plt>
   11f00:	cmp	r0, #0
   11f04:	mov	r0, r7
   11f08:	mov	r6, r4
   11f0c:	movw	r4, #46800	; 0xb6d0
   11f10:	movt	r4, #1
   11f14:	beq	11a78 <__assert_fail@plt+0x278>
   11f18:	b	129b8 <__assert_fail@plt+0x11b8>
   11f1c:	movw	r0, #53728	; 0xd1e0
   11f20:	movt	r0, #2
   11f24:	ldr	r0, [r0]
   11f28:	cmp	r0, #0
   11f2c:	beq	12198 <__assert_fail@plt+0x998>
   11f30:	mov	r1, #1
   11f34:	str	r1, [sp]
   11f38:	mov	r1, #108	; 0x6c
   11f3c:	mov	r2, #1
   11f40:	mvn	r3, #0
   11f44:	bl	139e8 <__assert_fail@plt+0x21e8>
   11f48:	b	1219c <__assert_fail@plt+0x99c>
   11f4c:	movw	r0, #53728	; 0xd1e0
   11f50:	movt	r0, #2
   11f54:	ldr	r0, [r0]
   11f58:	mov	r1, #1
   11f5c:	str	r1, [sp]
   11f60:	mov	r1, #76	; 0x4c
   11f64:	mov	r2, #1
   11f68:	mvn	r3, #0
   11f6c:	bl	139e8 <__assert_fail@plt+0x21e8>
   11f70:	str	r0, [r8, #36]	; 0x24
   11f74:	ldr	r0, [r8, #40]	; 0x28
   11f78:	cmp	r0, #0
   11f7c:	beq	11f9c <__assert_fail@plt+0x79c>
   11f80:	movw	r0, #40958	; 0x9ffe
   11f84:	movt	r0, #1
   11f88:	movw	r1, #40935	; 0x9fe7
   11f8c:	movt	r1, #1
   11f90:	bl	1399c <__assert_fail@plt+0x219c>
   11f94:	mov	r0, #0
   11f98:	str	r0, [r8, #40]	; 0x28
   11f9c:	ldr	r0, [r8, #24]
   11fa0:	cmp	r0, #0
   11fa4:	mov	r0, r7
   11fa8:	beq	11a78 <__assert_fail@plt+0x278>
   11fac:	movw	r0, #40958	; 0x9ffe
   11fb0:	movt	r0, #1
   11fb4:	b	121ec <__assert_fail@plt+0x9ec>
   11fb8:	mov	r0, #1
   11fbc:	movw	r1, #53797	; 0xd225
   11fc0:	movt	r1, #2
   11fc4:	b	120e8 <__assert_fail@plt+0x8e8>
   11fc8:	mov	r0, #0
   11fcc:	b	12078 <__assert_fail@plt+0x878>
   11fd0:	mov	r5, r4
   11fd4:	mov	r4, r8
   11fd8:	mov	r8, r6
   11fdc:	blx	r6
   11fe0:	ldr	r3, [r4, #4]
   11fe4:	movw	r0, #53728	; 0xd1e0
   11fe8:	movt	r0, #2
   11fec:	ldr	r0, [r0]
   11ff0:	mov	r1, #0
   11ff4:	str	r1, [sp]
   11ff8:	mov	r1, #115	; 0x73
   11ffc:	mov	r2, #1
   12000:	bl	139e8 <__assert_fail@plt+0x21e8>
   12004:	mov	r6, r0
   12008:	ldr	r0, [r4, #4]
   1200c:	cmp	r6, r0
   12010:	bls	12048 <__assert_fail@plt+0x848>
   12014:	mov	r0, #0
   12018:	movw	r1, #41000	; 0xa028
   1201c:	movt	r1, #1
   12020:	mov	r2, #5
   12024:	bl	114dc <dcgettext@plt>
   12028:	mov	r2, r0
   1202c:	ldr	r0, [r4, #4]
   12030:	str	r0, [sp]
   12034:	mov	r0, #0
   12038:	mov	r1, #0
   1203c:	mov	r3, r6
   12040:	bl	115a8 <error@plt>
   12044:	ldr	r6, [r4, #4]
   12048:	str	r6, [r4, #12]
   1204c:	mov	r0, r7
   12050:	mov	r6, r8
   12054:	mov	r8, r4
   12058:	mov	r4, r5
   1205c:	movw	r5, #53792	; 0xd220
   12060:	movt	r5, #2
   12064:	b	11a78 <__assert_fail@plt+0x278>
   12068:	movw	r0, #53728	; 0xd1e0
   1206c:	movt	r0, #2
   12070:	ldr	r0, [r0]
   12074:	bl	1355c <__assert_fail@plt+0x1d5c>
   12078:	movw	r1, #53788	; 0xd21c
   1207c:	movt	r1, #2
   12080:	strb	r0, [r1]
   12084:	movw	r0, #13292	; 0x33ec
   12088:	movt	r0, #1
   1208c:	str	r0, [sp, #40]	; 0x28
   12090:	mov	r0, r7
   12094:	b	11a78 <__assert_fail@plt+0x278>
   12098:	movw	r0, #53728	; 0xd1e0
   1209c:	movt	r0, #2
   120a0:	ldr	r0, [r0]
   120a4:	mov	r1, #1
   120a8:	str	r1, [sp]
   120ac:	mov	r1, #80	; 0x50
   120b0:	mov	r2, #0
   120b4:	mvn	r3, #-2147483648	; 0x80000000
   120b8:	bl	139e8 <__assert_fail@plt+0x21e8>
   120bc:	movw	r1, #53608	; 0xd168
   120c0:	movt	r1, #2
   120c4:	str	r0, [r1]
   120c8:	mov	r0, r7
   120cc:	b	11a78 <__assert_fail@plt+0x278>
   120d0:	mov	r0, #1
   120d4:	movw	r1, #53796	; 0xd224
   120d8:	movt	r1, #2
   120dc:	strb	r0, [r1]
   120e0:	movw	r1, #53798	; 0xd226
   120e4:	movt	r1, #2
   120e8:	strb	r0, [r1]
   120ec:	mov	r0, r7
   120f0:	b	11a78 <__assert_fail@plt+0x278>
   120f4:	movw	r0, #53728	; 0xd1e0
   120f8:	movt	r0, #2
   120fc:	ldr	r0, [r0]
   12100:	mov	r1, #1
   12104:	str	r1, [sp]
   12108:	mov	r1, #110	; 0x6e
   1210c:	mov	r2, #1
   12110:	mvn	r3, #0
   12114:	bl	139e8 <__assert_fail@plt+0x21e8>
   12118:	str	r0, [r8, #40]	; 0x28
   1211c:	ldr	r0, [r8, #36]	; 0x24
   12120:	cmp	r0, #0
   12124:	beq	12144 <__assert_fail@plt+0x944>
   12128:	movw	r0, #40986	; 0xa01a
   1212c:	movt	r0, #1
   12130:	movw	r1, #40946	; 0x9ff2
   12134:	movt	r1, #1
   12138:	bl	1399c <__assert_fail@plt+0x219c>
   1213c:	mov	r0, #0
   12140:	str	r0, [r8, #36]	; 0x24
   12144:	ldr	r0, [r8, #24]
   12148:	cmp	r0, #0
   1214c:	mov	r0, r7
   12150:	beq	11a78 <__assert_fail@plt+0x278>
   12154:	ldr	r0, [r8, #40]	; 0x28
   12158:	cmp	r0, #1
   1215c:	bne	121e4 <__assert_fail@plt+0x9e4>
   12160:	mov	r0, #0
   12164:	str	r0, [r8, #40]	; 0x28
   12168:	mov	r0, r7
   1216c:	b	11a78 <__assert_fail@plt+0x278>
   12170:	movw	r0, #53728	; 0xd1e0
   12174:	movt	r0, #2
   12178:	ldr	r0, [r0]
   1217c:	str	r0, [sp, #48]	; 0x30
   12180:	mov	r0, r7
   12184:	b	11a78 <__assert_fail@plt+0x278>
   12188:	mov	r0, #0
   1218c:	str	r0, [r5]
   12190:	mov	r0, r7
   12194:	b	11a78 <__assert_fail@plt+0x278>
   12198:	mov	r0, #1
   1219c:	str	r0, [r8, #36]	; 0x24
   121a0:	ldr	r0, [r8, #40]	; 0x28
   121a4:	cmp	r0, #0
   121a8:	beq	121c8 <__assert_fail@plt+0x9c8>
   121ac:	movw	r0, #40971	; 0xa00b
   121b0:	movt	r0, #1
   121b4:	movw	r1, #40935	; 0x9fe7
   121b8:	movt	r1, #1
   121bc:	bl	1399c <__assert_fail@plt+0x219c>
   121c0:	mov	r0, #0
   121c4:	str	r0, [r8, #40]	; 0x28
   121c8:	ldr	r0, [r8, #24]
   121cc:	cmp	r0, #0
   121d0:	mov	r0, r7
   121d4:	beq	11a78 <__assert_fail@plt+0x278>
   121d8:	movw	r0, #40971	; 0xa00b
   121dc:	movt	r0, #1
   121e0:	b	121ec <__assert_fail@plt+0x9ec>
   121e4:	movw	r0, #40986	; 0xa01a
   121e8:	movt	r0, #1
   121ec:	movw	r1, #40961	; 0xa001
   121f0:	movt	r1, #1
   121f4:	bl	1399c <__assert_fail@plt+0x219c>
   121f8:	mov	r0, #0
   121fc:	str	r0, [r8, #24]
   12200:	mov	r0, r7
   12204:	b	11a78 <__assert_fail@plt+0x278>
   12208:	cmn	r0, #1
   1220c:	bne	12948 <__assert_fail@plt+0x1148>
   12210:	movw	r0, #13292	; 0x33ec
   12214:	movt	r0, #1
   12218:	ldr	r1, [sp, #40]	; 0x28
   1221c:	cmp	r1, r0
   12220:	bne	12254 <__assert_fail@plt+0xa54>
   12224:	ldr	r0, [r5]
   12228:	cmp	r0, #0
   1222c:	beq	12254 <__assert_fail@plt+0xa54>
   12230:	movw	r1, #41162	; 0xa0ca
   12234:	movt	r1, #1
   12238:	mov	r0, #0
   1223c:	mov	r2, #5
   12240:	bl	114dc <dcgettext@plt>
   12244:	mov	r2, r0
   12248:	mov	r0, #0
   1224c:	mov	r1, #0
   12250:	bl	115a8 <error@plt>
   12254:	blx	r6
   12258:	ldr	r0, [sp, #32]
   1225c:	cmp	r0, #0
   12260:	bne	12a10 <__assert_fail@plt+0x1210>
   12264:	movw	r0, #15168	; 0x3b40
   12268:	movt	r0, #1
   1226c:	str	r0, [sp, #52]	; 0x34
   12270:	add	r5, sp, #52	; 0x34
   12274:	add	r4, r5, #4
   12278:	mov	r0, r4
   1227c:	bl	11728 <sigemptyset@plt>
   12280:	mov	r6, #0
   12284:	str	r6, [sp, #184]	; 0xb8
   12288:	mov	r0, #10
   1228c:	mov	r1, r5
   12290:	mov	r2, #0
   12294:	bl	11548 <sigaction@plt>
   12298:	cmp	r0, #0
   1229c:	beq	122cc <__assert_fail@plt+0xacc>
   122a0:	bl	11680 <__errno_location@plt>
   122a4:	ldr	r5, [r0]
   122a8:	movw	r1, #41244	; 0xa11c
   122ac:	movt	r1, #1
   122b0:	mov	r0, #0
   122b4:	mov	r2, #5
   122b8:	bl	114dc <dcgettext@plt>
   122bc:	mov	r2, r0
   122c0:	mov	r0, #0
   122c4:	mov	r1, r5
   122c8:	bl	115a8 <error@plt>
   122cc:	movw	r0, #15220	; 0x3b74
   122d0:	movt	r0, #1
   122d4:	str	r0, [sp, #52]	; 0x34
   122d8:	mov	r0, r4
   122dc:	bl	11728 <sigemptyset@plt>
   122e0:	str	r6, [sp, #184]	; 0xb8
   122e4:	add	r1, sp, #52	; 0x34
   122e8:	mov	r0, #12
   122ec:	mov	r2, #0
   122f0:	bl	11548 <sigaction@plt>
   122f4:	cmp	r0, #0
   122f8:	beq	12328 <__assert_fail@plt+0xb28>
   122fc:	bl	11680 <__errno_location@plt>
   12300:	ldr	r4, [r0]
   12304:	movw	r1, #41278	; 0xa13e
   12308:	movt	r1, #1
   1230c:	mov	r0, #0
   12310:	mov	r2, #5
   12314:	bl	114dc <dcgettext@plt>
   12318:	mov	r2, r0
   1231c:	mov	r0, #0
   12320:	mov	r1, r4
   12324:	bl	115a8 <error@plt>
   12328:	movw	r1, #49011	; 0xbf73
   1232c:	movt	r1, #1
   12330:	ldr	r5, [sp, #48]	; 0x30
   12334:	mov	r0, r5
   12338:	bl	11440 <strcmp@plt>
   1233c:	cmp	r0, #0
   12340:	movw	r4, #53804	; 0xd22c
   12344:	movt	r4, #2
   12348:	beq	123cc <__assert_fail@plt+0xbcc>
   1234c:	movw	r0, #53808	; 0xd230
   12350:	movt	r0, #2
   12354:	mov	r1, #1
   12358:	strb	r1, [r0]
   1235c:	mov	r0, r5
   12360:	bl	13b98 <__assert_fail@plt+0x2398>
   12364:	str	r0, [r4]
   12368:	cmp	r0, #0
   1236c:	bne	123dc <__assert_fail@plt+0xbdc>
   12370:	bl	11680 <__errno_location@plt>
   12374:	ldr	r4, [r0]
   12378:	movw	r1, #41312	; 0xa160
   1237c:	movt	r1, #1
   12380:	mov	r0, #0
   12384:	mov	r2, #5
   12388:	bl	114dc <dcgettext@plt>
   1238c:	mov	r2, r5
   12390:	mov	r5, r0
   12394:	mov	r0, #0
   12398:	mov	r1, #8
   1239c:	bl	17d08 <__assert_fail@plt+0x6508>
   123a0:	mov	r3, r0
   123a4:	mov	r0, #1
   123a8:	mov	r1, r4
   123ac:	mov	r2, r5
   123b0:	bl	115a8 <error@plt>
   123b4:	movw	r0, #40733	; 0x9f1d
   123b8:	movt	r0, #1
   123bc:	bl	1550c <__assert_fail@plt+0x3d0c>
   123c0:	mov	r0, #0
   123c4:	sub	sp, fp, #28
   123c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123cc:	movw	r0, #53720	; 0xd1d8
   123d0:	movt	r0, #2
   123d4:	ldr	r0, [r0]
   123d8:	str	r0, [r4]
   123dc:	ldr	r0, [r8, #24]
   123e0:	cmp	r0, #0
   123e4:	ldreq	r0, [r8, #36]	; 0x24
   123e8:	cmpeq	r0, #0
   123ec:	beq	123f8 <__assert_fail@plt+0xbf8>
   123f0:	mov	r0, #1
   123f4:	str	r0, [r8]
   123f8:	movw	r5, #53704	; 0xd1c8
   123fc:	movt	r5, #2
   12400:	ldr	r0, [r5]
   12404:	cmp	r0, r9
   12408:	bne	12428 <__assert_fail@plt+0xc28>
   1240c:	mov	r0, #0
   12410:	str	r0, [r5]
   12414:	sub	r0, fp, #44	; 0x2c
   12418:	str	r0, [fp, #-48]	; 0xffffffd0
   1241c:	mov	r9, #1
   12420:	sub	r0, fp, #48	; 0x30
   12424:	str	r0, [sp, #44]	; 0x2c
   12428:	cmp	r7, #0
   1242c:	bne	127a8 <__assert_fail@plt+0xfa8>
   12430:	ldr	r0, [r8, #12]
   12434:	add	r0, r0, #1
   12438:	bl	189e8 <__assert_fail@plt+0x71e8>
   1243c:	movw	r1, #53812	; 0xd234
   12440:	movt	r1, #2
   12444:	str	r0, [r1]
   12448:	ldr	r0, [r8, #12]
   1244c:	add	r0, r0, #1
   12450:	bl	189e8 <__assert_fail@plt+0x71e8>
   12454:	movw	r7, #53816	; 0xd238
   12458:	movt	r7, #2
   1245c:	str	r0, [r7, #12]
   12460:	mov	r0, #17
   12464:	mov	r1, #0
   12468:	bl	114d0 <signal@plt>
   1246c:	ldr	r0, [r8, #24]
   12470:	cmp	r0, #0
   12474:	beq	12630 <__assert_fail@plt+0xe30>
   12478:	lsl	r0, r9, #2
   1247c:	bl	189e8 <__assert_fail@plt+0x71e8>
   12480:	str	r0, [sp, #36]	; 0x24
   12484:	ldr	r0, [r5]
   12488:	cmp	r0, r9
   1248c:	bge	124b8 <__assert_fail@plt+0xcb8>
   12490:	ldr	r1, [sp, #44]	; 0x2c
   12494:	add	r4, r1, r0, lsl #2
   12498:	ldr	r1, [sp, #36]	; 0x24
   1249c:	add	r5, r1, r0, lsl #2
   124a0:	sub	r6, r9, r0
   124a4:	ldr	r0, [r4], #4
   124a8:	bl	11650 <strlen@plt>
   124ac:	str	r0, [r5], #4
   124b0:	subs	r6, r6, #1
   124b4:	bne	124a4 <__assert_fail@plt+0xca4>
   124b8:	ldr	r0, [r8, #24]
   124bc:	bl	11650 <strlen@plt>
   124c0:	str	r0, [r8, #20]
   124c4:	ldr	r0, [sp, #40]	; 0x28
   124c8:	blx	r0
   124cc:	cmn	r0, #1
   124d0:	beq	12784 <__assert_fail@plt+0xf84>
   124d4:	mov	r1, r0
   124d8:	mov	r6, r9
   124dc:	mov	r4, r7
   124e0:	ldr	r0, [sp, #36]	; 0x24
   124e4:	add	r0, r0, #4
   124e8:	str	r0, [sp, #28]
   124ec:	ldr	r0, [sp, #44]	; 0x2c
   124f0:	add	r0, r0, #4
   124f4:	str	r0, [sp, #24]
   124f8:	sub	r0, r9, #1
   124fc:	str	r0, [sp, #20]
   12500:	movw	r8, #53744	; 0xd1f0
   12504:	movt	r8, #2
   12508:	mov	r9, #0
   1250c:	movw	sl, #53860	; 0xd264
   12510:	movt	sl, #2
   12514:	str	r6, [sp, #32]
   12518:	b	12544 <__assert_fail@plt+0xd44>
   1251c:	mov	r1, r4
   12520:	mov	r8, r0
   12524:	bl	148d0 <__assert_fail@plt+0x30d0>
   12528:	ldr	r0, [sp, #40]	; 0x28
   1252c:	blx	r0
   12530:	mov	r1, r0
   12534:	cmn	r0, #1
   12538:	ldr	r6, [sp, #32]
   1253c:	mov	r9, #0
   12540:	beq	12784 <__assert_fail@plt+0xf84>
   12544:	str	r1, [sp, #48]	; 0x30
   12548:	mov	r0, r8
   1254c:	mov	r1, r4
   12550:	bl	14be8 <__assert_fail@plt+0x33e8>
   12554:	str	r9, [r4, #16]
   12558:	movw	r0, #53704	; 0xd1c8
   1255c:	movt	r0, #2
   12560:	mov	r5, r0
   12564:	ldr	r0, [r0]
   12568:	ldr	r1, [sp, #44]	; 0x2c
   1256c:	ldr	r2, [r1, r0, lsl #2]
   12570:	ldr	r1, [sp, #36]	; 0x24
   12574:	ldr	r0, [r1, r0, lsl #2]
   12578:	ldrb	r1, [sl]
   1257c:	eor	r1, r1, #1
   12580:	str	r9, [sp]
   12584:	str	r9, [sp, #4]
   12588:	str	r1, [sp, #8]
   1258c:	add	r3, r0, #1
   12590:	mov	r0, r8
   12594:	mov	r1, r4
   12598:	bl	146b0 <__assert_fail@plt+0x2eb0>
   1259c:	mov	r0, #1
   125a0:	strb	r0, [sl]
   125a4:	ldr	r2, [r5]
   125a8:	add	r1, r2, #1
   125ac:	cmp	r1, r6
   125b0:	mov	r0, r8
   125b4:	mov	ip, #0
   125b8:	movw	r5, #53812	; 0xd234
   125bc:	movt	r5, #2
   125c0:	bge	1251c <__assert_fail@plt+0xd1c>
   125c4:	ldr	r1, [sp, #48]	; 0x30
   125c8:	sub	r1, r1, #1
   125cc:	str	r1, [sp, #48]	; 0x30
   125d0:	ldr	r1, [sp, #28]
   125d4:	add	r6, r1, r2, lsl #2
   125d8:	ldr	r1, [sp, #24]
   125dc:	add	r7, r1, r2, lsl #2
   125e0:	ldr	r1, [sp, #20]
   125e4:	sub	r9, r1, r2
   125e8:	ldr	r3, [r6], #4
   125ec:	ldr	r2, [r7], #4
   125f0:	ldrb	r1, [sl]
   125f4:	ldr	lr, [r5]
   125f8:	eor	r8, r1, #1
   125fc:	str	ip, [sp]
   12600:	stmib	sp, {ip, lr}
   12604:	ldr	r1, [sp, #48]	; 0x30
   12608:	str	r1, [sp, #12]
   1260c:	str	r8, [sp, #16]
   12610:	mov	r1, r4
   12614:	mov	r8, r0
   12618:	bl	1450c <__assert_fail@plt+0x2d0c>
   1261c:	mov	ip, #0
   12620:	mov	r0, r8
   12624:	subs	r9, r9, #1
   12628:	bne	125e8 <__assert_fail@plt+0xde8>
   1262c:	b	1251c <__assert_fail@plt+0xd1c>
   12630:	ldr	r0, [r5]
   12634:	cmp	r0, r9
   12638:	bge	126a4 <__assert_fail@plt+0xea4>
   1263c:	movw	r8, #53860	; 0xd264
   12640:	movt	r8, #2
   12644:	mov	r7, #0
   12648:	movw	r4, #53744	; 0xd1f0
   1264c:	movt	r4, #2
   12650:	movw	sl, #53816	; 0xd238
   12654:	movt	sl, #2
   12658:	ldr	r1, [sp, #44]	; 0x2c
   1265c:	ldr	r6, [r1, r0, lsl #2]
   12660:	mov	r0, r6
   12664:	bl	11650 <strlen@plt>
   12668:	ldrb	r1, [r8]
   1266c:	eor	r1, r1, #1
   12670:	str	r7, [sp]
   12674:	str	r7, [sp, #4]
   12678:	str	r1, [sp, #8]
   1267c:	add	r3, r0, #1
   12680:	mov	r0, r4
   12684:	mov	r1, sl
   12688:	mov	r2, r6
   1268c:	bl	146b0 <__assert_fail@plt+0x2eb0>
   12690:	ldr	r0, [r5]
   12694:	add	r0, r0, #1
   12698:	str	r0, [r5]
   1269c:	cmp	r0, r9
   126a0:	blt	12658 <__assert_fail@plt+0xe58>
   126a4:	movw	r0, #53860	; 0xd264
   126a8:	movt	r0, #2
   126ac:	mov	r1, #1
   126b0:	strb	r1, [r0]
   126b4:	movw	r0, #53816	; 0xd238
   126b8:	movt	r0, #2
   126bc:	mov	r2, r0
   126c0:	ldr	r0, [r0]
   126c4:	ldr	r1, [r2, #16]
   126c8:	str	r1, [r2, #20]
   126cc:	movw	r7, #53744	; 0xd1f0
   126d0:	movt	r7, #2
   126d4:	str	r0, [r7, #28]
   126d8:	ldr	r0, [sp, #40]	; 0x28
   126dc:	blx	r0
   126e0:	cmn	r0, #1
   126e4:	beq	12738 <__assert_fail@plt+0xf38>
   126e8:	movw	r5, #53864	; 0xd268
   126ec:	movt	r5, #2
   126f0:	movw	r4, #53816	; 0xd238
   126f4:	movt	r4, #2
   126f8:	mov	r6, #0
   126fc:	b	12710 <__assert_fail@plt+0xf10>
   12700:	ldr	r0, [sp, #40]	; 0x28
   12704:	blx	r0
   12708:	cmn	r0, #1
   1270c:	beq	12738 <__assert_fail@plt+0xf38>
   12710:	ldr	r0, [r5]
   12714:	ldr	r1, [r7, #36]	; 0x24
   12718:	sub	r1, r1, #1
   1271c:	cmp	r1, r0
   12720:	bcs	12700 <__assert_fail@plt+0xf00>
   12724:	mov	r0, r7
   12728:	mov	r1, r4
   1272c:	bl	148d0 <__assert_fail@plt+0x30d0>
   12730:	str	r6, [r5]
   12734:	b	12700 <__assert_fail@plt+0xf00>
   12738:	ldr	r0, [r7, #28]
   1273c:	movw	r1, #53816	; 0xd238
   12740:	movt	r1, #2
   12744:	ldr	r1, [r1]
   12748:	cmp	r1, r0
   1274c:	bne	12770 <__assert_fail@plt+0xf70>
   12750:	ldr	r0, [sp, #36]	; 0x24
   12754:	cmp	r0, #0
   12758:	beq	12784 <__assert_fail@plt+0xf84>
   1275c:	movw	r0, #53868	; 0xd26c
   12760:	movt	r0, #2
   12764:	ldrb	r0, [r0]
   12768:	cmp	r0, #0
   1276c:	bne	12784 <__assert_fail@plt+0xf84>
   12770:	movw	r0, #53744	; 0xd1f0
   12774:	movt	r0, #2
   12778:	movw	r1, #53816	; 0xd238
   1277c:	movt	r1, #2
   12780:	bl	148d0 <__assert_fail@plt+0x30d0>
   12784:	movw	r0, #53872	; 0xd270
   12788:	movt	r0, #2
   1278c:	ldr	r1, [r0]
   12790:	movw	r2, #53740	; 0xd1ec
   12794:	movt	r2, #2
   12798:	str	r1, [r2]
   1279c:	ldr	r0, [r0]
   127a0:	sub	sp, fp, #28
   127a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127a8:	movw	r6, #53712	; 0xd1d0
   127ac:	movt	r6, #2
   127b0:	ldr	r4, [r6]
   127b4:	movw	r1, #41338	; 0xa17a
   127b8:	movt	r1, #1
   127bc:	mov	r0, #0
   127c0:	mov	r2, #5
   127c4:	bl	114dc <dcgettext@plt>
   127c8:	mov	r5, r0
   127cc:	bl	14c6c <__assert_fail@plt+0x346c>
   127d0:	mov	r2, r0
   127d4:	mov	r0, r4
   127d8:	mov	r1, r5
   127dc:	mov	r3, #0
   127e0:	bl	11674 <fprintf@plt>
   127e4:	ldr	r4, [r6]
   127e8:	movw	r1, #41385	; 0xa1a9
   127ec:	movt	r1, #1
   127f0:	mov	r0, #0
   127f4:	mov	r2, #5
   127f8:	bl	114dc <dcgettext@plt>
   127fc:	mov	r1, r0
   12800:	ldr	r2, [r8, #4]
   12804:	mov	r0, r4
   12808:	mov	r3, #0
   1280c:	bl	11674 <fprintf@plt>
   12810:	ldr	r4, [r6]
   12814:	movw	r1, #41443	; 0xa1e3
   12818:	movt	r1, #1
   1281c:	mov	r0, #0
   12820:	mov	r2, #5
   12824:	bl	114dc <dcgettext@plt>
   12828:	mov	r1, r0
   1282c:	ldr	r2, [r8, #8]
   12830:	mov	r0, r4
   12834:	mov	r3, #0
   12838:	bl	11674 <fprintf@plt>
   1283c:	ldr	r4, [r6]
   12840:	movw	r1, #41520	; 0xa230
   12844:	movt	r1, #1
   12848:	mov	r0, #0
   1284c:	mov	r2, #5
   12850:	bl	114dc <dcgettext@plt>
   12854:	mov	r5, r0
   12858:	ldr	r7, [r8, #4]
   1285c:	bl	14c6c <__assert_fail@plt+0x346c>
   12860:	sub	r2, r7, r0
   12864:	mov	r0, r4
   12868:	mov	r1, r5
   1286c:	movw	r5, #53704	; 0xd1c8
   12870:	movt	r5, #2
   12874:	mov	r3, #0
   12878:	bl	11674 <fprintf@plt>
   1287c:	ldr	r4, [r6]
   12880:	movw	r1, #41575	; 0xa267
   12884:	movt	r1, #1
   12888:	mov	r0, #0
   1288c:	mov	r2, #5
   12890:	bl	114dc <dcgettext@plt>
   12894:	mov	r1, r0
   12898:	ldr	r2, [r8, #12]
   1289c:	mov	r0, r4
   128a0:	mov	r3, #0
   128a4:	bl	11674 <fprintf@plt>
   128a8:	ldr	r4, [r6]
   128ac:	movw	r1, #41627	; 0xa29b
   128b0:	movt	r1, #1
   128b4:	mov	r0, #0
   128b8:	mov	r2, #5
   128bc:	bl	114dc <dcgettext@plt>
   128c0:	mov	r1, r0
   128c4:	mov	r0, r4
   128c8:	mvn	r2, #-2147483648	; 0x80000000
   128cc:	mov	r3, #0
   128d0:	bl	11674 <fprintf@plt>
   128d4:	mov	r0, #0
   128d8:	bl	117a0 <isatty@plt>
   128dc:	cmp	r0, #0
   128e0:	beq	12430 <__assert_fail@plt+0xc30>
   128e4:	ldr	r4, [r6]
   128e8:	movw	r1, #41687	; 0xa2d7
   128ec:	movt	r1, #1
   128f0:	mov	r0, #0
   128f4:	mov	r2, #5
   128f8:	bl	114dc <dcgettext@plt>
   128fc:	mov	r1, r0
   12900:	mov	r0, r4
   12904:	bl	11674 <fprintf@plt>
   12908:	ldr	r0, [sp, #36]	; 0x24
   1290c:	cmp	r0, #0
   12910:	beq	12430 <__assert_fail@plt+0xc30>
   12914:	ldr	r4, [r6]
   12918:	movw	r1, #41860	; 0xa384
   1291c:	movt	r1, #1
   12920:	mov	r0, #0
   12924:	mov	r2, #5
   12928:	bl	114dc <dcgettext@plt>
   1292c:	mov	r1, r0
   12930:	ldr	r0, [r5]
   12934:	ldr	r2, [sp, #44]	; 0x2c
   12938:	ldr	r2, [r2, r0, lsl #2]
   1293c:	mov	r0, r4
   12940:	bl	11674 <fprintf@plt>
   12944:	b	12430 <__assert_fail@plt+0xc30>
   12948:	mov	r0, #1
   1294c:	bl	13678 <__assert_fail@plt+0x1e78>
   12950:	mov	r0, #0
   12954:	bl	13678 <__assert_fail@plt+0x1e78>
   12958:	bl	11680 <__errno_location@plt>
   1295c:	ldr	r4, [r0]
   12960:	movw	r1, #40763	; 0x9f3b
   12964:	movt	r1, #1
   12968:	mov	r0, #0
   1296c:	mov	r2, #5
   12970:	bl	114dc <dcgettext@plt>
   12974:	mov	r2, r0
   12978:	mov	r0, #1
   1297c:	mov	r1, r4
   12980:	bl	115a8 <error@plt>
   12984:	movw	r1, #41065	; 0xa069
   12988:	movt	r1, #1
   1298c:	mov	r0, #0
   12990:	mov	r2, #5
   12994:	bl	114dc <dcgettext@plt>
   12998:	mov	r2, r0
   1299c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   129a0:	movw	r1, #46800	; 0xb6d0
   129a4:	movt	r1, #1
   129a8:	ldr	r3, [r1, r0, lsl #4]
   129ac:	mov	r0, #1
   129b0:	mov	r1, #0
   129b4:	bl	115a8 <error@plt>
   129b8:	bl	11680 <__errno_location@plt>
   129bc:	ldr	r4, [r0]
   129c0:	movw	r1, #41122	; 0xa0a2
   129c4:	movt	r1, #1
   129c8:	mov	r0, #0
   129cc:	mov	r2, #5
   129d0:	bl	114dc <dcgettext@plt>
   129d4:	mov	r2, r0
   129d8:	movw	r0, #53800	; 0xd228
   129dc:	movt	r0, #2
   129e0:	ldr	r3, [r0]
   129e4:	mov	r0, #1
   129e8:	mov	r1, r4
   129ec:	bl	115a8 <error@plt>
   129f0:	movw	r0, #40856	; 0x9f98
   129f4:	movt	r0, #1
   129f8:	movw	r1, #40825	; 0x9f79
   129fc:	movt	r1, #1
   12a00:	movw	r3, #40833	; 0x9f81
   12a04:	movt	r3, #1
   12a08:	movw	r2, #511	; 0x1ff
   12a0c:	bl	11800 <__assert_fail@plt>
   12a10:	movw	r0, #41221	; 0xa105
   12a14:	movt	r0, #1
   12a18:	movw	r1, #40825	; 0x9f79
   12a1c:	movt	r1, #1
   12a20:	movw	r3, #40833	; 0x9f81
   12a24:	movt	r3, #1
   12a28:	movw	r2, #723	; 0x2d3
   12a2c:	bl	11800 <__assert_fail@plt>
   12a30:	movw	r0, #40798	; 0x9f5e
   12a34:	movt	r0, #1
   12a38:	movw	r1, #40825	; 0x9f79
   12a3c:	movt	r1, #1
   12a40:	movw	r3, #40833	; 0x9f81
   12a44:	movt	r3, #1
   12a48:	movw	r2, #483	; 0x1e3
   12a4c:	bl	11800 <__assert_fail@plt>
   12a50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a54:	add	fp, sp, #28
   12a58:	sub	sp, sp, #28
   12a5c:	movw	r0, #53876	; 0xd274
   12a60:	movt	r0, #2
   12a64:	ldrb	r0, [r0]
   12a68:	mvn	r4, #0
   12a6c:	cmp	r0, #0
   12a70:	bne	12f00 <__assert_fail@plt+0x1700>
   12a74:	movw	r0, #53744	; 0xd1f0
   12a78:	movt	r0, #2
   12a7c:	ldr	r4, [r0, #12]
   12a80:	movw	r0, #53812	; 0xd234
   12a84:	movt	r0, #2
   12a88:	ldr	r8, [r0]
   12a8c:	movw	r0, #53816	; 0xd238
   12a90:	movt	r0, #2
   12a94:	ldr	r5, [r0, #20]
   12a98:	movw	sl, #53804	; 0xd22c
   12a9c:	movt	sl, #2
   12aa0:	ldr	r0, [sl]
   12aa4:	bl	117dc <getc@plt>
   12aa8:	cmn	r0, #1
   12aac:	beq	12d84 <__assert_fail@plt+0x1584>
   12ab0:	add	r1, r8, r4
   12ab4:	mvn	r2, r5
   12ab8:	add	r1, r2, r1
   12abc:	str	r1, [sp, #16]
   12ac0:	mvn	r9, #0
   12ac4:	movw	r6, #53864	; 0xd268
   12ac8:	movt	r6, #2
   12acc:	mov	r4, #0
   12ad0:	mov	r1, #1
   12ad4:	mov	r2, #0
   12ad8:	str	r2, [sp, #24]
   12adc:	mov	r7, #1
   12ae0:	str	r1, [sp, #20]
   12ae4:	mov	r5, r9
   12ae8:	mov	r9, r0
   12aec:	cmp	r7, #3
   12af0:	bhi	12bf0 <__assert_fail@plt+0x13f0>
   12af4:	add	r0, pc, #0
   12af8:	ldr	pc, [r0, r7, lsl #2]
   12afc:	andeq	r2, r1, r8, lsr fp
   12b00:	andeq	r2, r1, ip, lsl #22
   12b04:	andeq	r2, r1, r4, ror #24
   12b08:	andeq	r2, r1, ip, ror #23
   12b0c:	cmp	r9, #127	; 0x7f
   12b10:	bhi	12bd0 <__assert_fail@plt+0x13d0>
   12b14:	bl	11614 <__ctype_b_loc@plt>
   12b18:	sub	r1, r9, #10
   12b1c:	cmp	r1, #4
   12b20:	bcc	12b88 <__assert_fail@plt+0x1388>
   12b24:	ldr	r0, [r0]
   12b28:	add	r0, r0, r9, lsl #1
   12b2c:	ldrh	r0, [r0]
   12b30:	ands	r0, r0, #1
   12b34:	bne	12b88 <__assert_fail@plt+0x1388>
   12b38:	cmp	r9, #10
   12b3c:	bne	12ba0 <__assert_fail@plt+0x13a0>
   12b40:	cmp	r5, #127	; 0x7f
   12b44:	bhi	12b5c <__assert_fail@plt+0x135c>
   12b48:	bl	11614 <__ctype_b_loc@plt>
   12b4c:	ldr	r0, [r0]
   12b50:	ldrb	r0, [r0, r5, lsl #1]
   12b54:	tst	r0, #1
   12b58:	bne	12b68 <__assert_fail@plt+0x1368>
   12b5c:	ldr	r0, [r6]
   12b60:	add	r0, r0, #1
   12b64:	str	r0, [r6]
   12b68:	movw	r0, #53812	; 0xd234
   12b6c:	movt	r0, #2
   12b70:	ldr	r7, [r0]
   12b74:	subs	r0, r8, r7
   12b78:	movwne	r0, #1
   12b7c:	orr	r0, r4, r0
   12b80:	tst	r0, #1
   12b84:	bne	12e70 <__assert_fail@plt+0x1670>
   12b88:	ldr	r0, [sl]
   12b8c:	bl	117dc <getc@plt>
   12b90:	mov	r7, #1
   12b94:	cmn	r0, #1
   12b98:	bne	12ae4 <__assert_fail@plt+0x12e4>
   12b9c:	b	12d94 <__assert_fail@plt+0x1594>
   12ba0:	cmp	r9, #127	; 0x7f
   12ba4:	bhi	12bd0 <__assert_fail@plt+0x13d0>
   12ba8:	movw	r0, #53744	; 0xd1f0
   12bac:	movt	r0, #2
   12bb0:	ldr	r0, [r0, #24]
   12bb4:	cmp	r0, #0
   12bb8:	bne	12bd0 <__assert_fail@plt+0x13d0>
   12bbc:	bl	11614 <__ctype_b_loc@plt>
   12bc0:	ldr	r0, [r0]
   12bc4:	ldrb	r0, [r0, r9, lsl #1]
   12bc8:	tst	r0, #1
   12bcc:	bne	12c94 <__assert_fail@plt+0x1494>
   12bd0:	mov	r7, #3
   12bd4:	cmp	r9, #92	; 0x5c
   12bd8:	beq	12c7c <__assert_fail@plt+0x147c>
   12bdc:	cmp	r9, #34	; 0x22
   12be0:	cmpne	r9, #39	; 0x27
   12be4:	beq	12d60 <__assert_fail@plt+0x1560>
   12be8:	mov	r4, #1
   12bec:	mov	r7, #0
   12bf0:	cmp	r9, #0
   12bf4:	bne	12c40 <__assert_fail@plt+0x1440>
   12bf8:	movw	r0, #53880	; 0xd278
   12bfc:	movt	r0, #2
   12c00:	ldrb	r0, [r0]
   12c04:	cmp	r0, #0
   12c08:	bne	12c40 <__assert_fail@plt+0x1440>
   12c0c:	mov	r0, #0
   12c10:	movw	r1, #42868	; 0xa774
   12c14:	movt	r1, #1
   12c18:	mov	r2, #5
   12c1c:	bl	114dc <dcgettext@plt>
   12c20:	mov	r2, r0
   12c24:	mov	r0, #0
   12c28:	mov	r1, #0
   12c2c:	bl	115a8 <error@plt>
   12c30:	mov	r0, #1
   12c34:	movw	r1, #53880	; 0xd278
   12c38:	movt	r1, #2
   12c3c:	strb	r0, [r1]
   12c40:	ldr	r0, [sp, #16]
   12c44:	cmp	r8, r0
   12c48:	bcs	12f3c <__assert_fail@plt+0x173c>
   12c4c:	strb	r9, [r8], #1
   12c50:	ldr	r0, [sl]
   12c54:	bl	117dc <getc@plt>
   12c58:	cmn	r0, #1
   12c5c:	bne	12ae4 <__assert_fail@plt+0x12e4>
   12c60:	b	12d94 <__assert_fail@plt+0x1594>
   12c64:	cmp	r9, #10
   12c68:	beq	12f64 <__assert_fail@plt+0x1764>
   12c6c:	mov	r7, #0
   12c70:	ldr	r0, [sp, #24]
   12c74:	cmp	r9, r0
   12c78:	bne	12d50 <__assert_fail@plt+0x1550>
   12c7c:	ldr	r0, [sl]
   12c80:	bl	117dc <getc@plt>
   12c84:	mov	r4, #1
   12c88:	cmn	r0, #1
   12c8c:	bne	12ae4 <__assert_fail@plt+0x12e4>
   12c90:	b	12d94 <__assert_fail@plt+0x1594>
   12c94:	mov	r0, #0
   12c98:	strb	r0, [r8]
   12c9c:	movw	r0, #53812	; 0xd234
   12ca0:	movt	r0, #2
   12ca4:	ldr	r7, [r0]
   12ca8:	sub	r0, r8, r7
   12cac:	add	r4, r0, #1
   12cb0:	movw	r0, #53792	; 0xd220
   12cb4:	movt	r0, #2
   12cb8:	ldr	r0, [r0]
   12cbc:	cmp	r0, #0
   12cc0:	beq	12ce4 <__assert_fail@plt+0x14e4>
   12cc4:	ldrb	r1, [r7]
   12cc8:	ldrb	r2, [r0]
   12ccc:	cmp	r2, r1
   12cd0:	bne	12ce4 <__assert_fail@plt+0x14e4>
   12cd4:	mov	r1, r7
   12cd8:	bl	11440 <strcmp@plt>
   12cdc:	cmp	r0, #0
   12ce0:	beq	12f0c <__assert_fail@plt+0x170c>
   12ce4:	movw	r0, #53860	; 0xd264
   12ce8:	movt	r0, #2
   12cec:	ldrb	r0, [r0]
   12cf0:	mov	r2, #0
   12cf4:	eor	r0, r0, #1
   12cf8:	str	r2, [sp]
   12cfc:	mov	r1, #0
   12d00:	str	r1, [sp, #20]
   12d04:	str	r2, [sp, #4]
   12d08:	str	r0, [sp, #8]
   12d0c:	movw	r0, #53744	; 0xd1f0
   12d10:	movt	r0, #2
   12d14:	movw	r1, #53816	; 0xd238
   12d18:	movt	r1, #2
   12d1c:	mov	r2, r7
   12d20:	mov	r3, r4
   12d24:	bl	146b0 <__assert_fail@plt+0x2eb0>
   12d28:	movw	r0, #53812	; 0xd234
   12d2c:	movt	r0, #2
   12d30:	ldr	r8, [r0]
   12d34:	ldr	r0, [sl]
   12d38:	bl	117dc <getc@plt>
   12d3c:	mov	r4, #1
   12d40:	cmn	r0, #1
   12d44:	mov	r7, #1
   12d48:	bne	12ae4 <__assert_fail@plt+0x12e4>
   12d4c:	b	12f2c <__assert_fail@plt+0x172c>
   12d50:	mov	r7, #2
   12d54:	cmp	r9, #0
   12d58:	beq	12bf8 <__assert_fail@plt+0x13f8>
   12d5c:	b	12c40 <__assert_fail@plt+0x1440>
   12d60:	ldr	r0, [sl]
   12d64:	bl	117dc <getc@plt>
   12d68:	mov	r4, #1
   12d6c:	mov	r7, #2
   12d70:	cmn	r0, #1
   12d74:	str	r9, [sp, #24]
   12d78:	ldr	r1, [sp, #20]
   12d7c:	bne	12ae0 <__assert_fail@plt+0x12e0>
   12d80:	b	12d9c <__assert_fail@plt+0x159c>
   12d84:	mov	r9, #0
   12d88:	mov	r1, #1
   12d8c:	mov	r7, #1
   12d90:	b	12d9c <__assert_fail@plt+0x159c>
   12d94:	ldr	r9, [sp, #24]
   12d98:	ldr	r1, [sp, #20]
   12d9c:	movw	r0, #53876	; 0xd274
   12da0:	movt	r0, #2
   12da4:	mov	r2, #1
   12da8:	strb	r2, [r0]
   12dac:	movw	r0, #53812	; 0xd234
   12db0:	movt	r0, #2
   12db4:	ldr	r6, [r0]
   12db8:	cmp	r8, r6
   12dbc:	beq	12e68 <__assert_fail@plt+0x1668>
   12dc0:	mov	r0, #0
   12dc4:	strb	r0, [r8], -r6
   12dc8:	cmp	r7, #2
   12dcc:	beq	12f9c <__assert_fail@plt+0x179c>
   12dd0:	mvn	r1, r1
   12dd4:	movw	r0, #53792	; 0xd220
   12dd8:	movt	r0, #2
   12ddc:	ldr	r0, [r0]
   12de0:	clz	r2, r0
   12de4:	lsr	r2, r2, #5
   12de8:	orr	r1, r1, r2
   12dec:	tst	r1, #1
   12df0:	mvn	r4, #0
   12df4:	bne	12e18 <__assert_fail@plt+0x1618>
   12df8:	ldrb	r1, [r6]
   12dfc:	ldrb	r2, [r0]
   12e00:	cmp	r2, r1
   12e04:	bne	12e18 <__assert_fail@plt+0x1618>
   12e08:	mov	r1, r6
   12e0c:	bl	11440 <strcmp@plt>
   12e10:	cmp	r0, #0
   12e14:	beq	12f00 <__assert_fail@plt+0x1700>
   12e18:	add	r4, r8, #1
   12e1c:	movw	r0, #53744	; 0xd1f0
   12e20:	movt	r0, #2
   12e24:	ldr	r0, [r0, #24]
   12e28:	cmp	r0, #0
   12e2c:	bne	12f00 <__assert_fail@plt+0x1700>
   12e30:	movw	r0, #53860	; 0xd264
   12e34:	movt	r0, #2
   12e38:	ldrb	r0, [r0]
   12e3c:	mov	r1, #0
   12e40:	eor	r0, r0, #1
   12e44:	str	r1, [sp]
   12e48:	str	r1, [sp, #4]
   12e4c:	str	r0, [sp, #8]
   12e50:	movw	r0, #53744	; 0xd1f0
   12e54:	movt	r0, #2
   12e58:	movw	r1, #53816	; 0xd238
   12e5c:	movt	r1, #2
   12e60:	mov	r2, r6
   12e64:	b	12ef8 <__assert_fail@plt+0x16f8>
   12e68:	mvn	r4, #0
   12e6c:	b	12f00 <__assert_fail@plt+0x1700>
   12e70:	mov	r0, #0
   12e74:	strb	r0, [r8], -r7
   12e78:	add	r4, r8, #1
   12e7c:	movw	r0, #53792	; 0xd220
   12e80:	movt	r0, #2
   12e84:	ldr	r0, [r0]
   12e88:	cmp	r0, #0
   12e8c:	beq	12eb0 <__assert_fail@plt+0x16b0>
   12e90:	ldrb	r1, [r7]
   12e94:	ldrb	r2, [r0]
   12e98:	cmp	r2, r1
   12e9c:	bne	12eb0 <__assert_fail@plt+0x16b0>
   12ea0:	mov	r1, r7
   12ea4:	bl	11440 <strcmp@plt>
   12ea8:	cmp	r0, #0
   12eac:	beq	12f0c <__assert_fail@plt+0x170c>
   12eb0:	movw	r0, #53744	; 0xd1f0
   12eb4:	movt	r0, #2
   12eb8:	ldr	r0, [r0, #24]
   12ebc:	cmp	r0, #0
   12ec0:	bne	12f00 <__assert_fail@plt+0x1700>
   12ec4:	movw	r0, #53860	; 0xd264
   12ec8:	movt	r0, #2
   12ecc:	ldrb	r0, [r0]
   12ed0:	mov	r1, #0
   12ed4:	eor	r0, r0, #1
   12ed8:	str	r1, [sp]
   12edc:	str	r1, [sp, #4]
   12ee0:	str	r0, [sp, #8]
   12ee4:	movw	r0, #53744	; 0xd1f0
   12ee8:	movt	r0, #2
   12eec:	movw	r1, #53816	; 0xd238
   12ef0:	movt	r1, #2
   12ef4:	mov	r2, r7
   12ef8:	mov	r3, r4
   12efc:	bl	146b0 <__assert_fail@plt+0x2eb0>
   12f00:	mov	r0, r4
   12f04:	sub	sp, fp, #28
   12f08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f0c:	mov	r0, #1
   12f10:	movw	r1, #53876	; 0xd274
   12f14:	movt	r1, #2
   12f18:	strb	r0, [r1]
   12f1c:	ldr	r0, [sp, #20]
   12f20:	tst	r0, #1
   12f24:	mvnne	r4, #0
   12f28:	b	12f00 <__assert_fail@plt+0x1700>
   12f2c:	ldr	r9, [sp, #24]
   12f30:	mov	r7, #1
   12f34:	mov	r1, #0
   12f38:	b	12d9c <__assert_fail@plt+0x159c>
   12f3c:	bl	13d30 <__assert_fail@plt+0x2530>
   12f40:	movw	r1, #43007	; 0xa7ff
   12f44:	movt	r1, #1
   12f48:	mov	r0, #0
   12f4c:	mov	r2, #5
   12f50:	bl	114dc <dcgettext@plt>
   12f54:	mov	r2, r0
   12f58:	mov	r0, #1
   12f5c:	mov	r1, #0
   12f60:	bl	115a8 <error@plt>
   12f64:	bl	13d30 <__assert_fail@plt+0x2530>
   12f68:	movw	r1, #42766	; 0xa70e
   12f6c:	movt	r1, #1
   12f70:	mov	r0, #0
   12f74:	mov	r2, #5
   12f78:	bl	114dc <dcgettext@plt>
   12f7c:	mov	r4, r0
   12f80:	movw	r0, #42854	; 0xa766
   12f84:	movt	r0, #1
   12f88:	movw	r1, #42861	; 0xa76d
   12f8c:	movt	r1, #1
   12f90:	ldr	r2, [sp, #24]
   12f94:	cmp	r2, #34	; 0x22
   12f98:	b	12fcc <__assert_fail@plt+0x17cc>
   12f9c:	bl	13d30 <__assert_fail@plt+0x2530>
   12fa0:	movw	r1, #42766	; 0xa70e
   12fa4:	movt	r1, #1
   12fa8:	mov	r0, #0
   12fac:	mov	r2, #5
   12fb0:	bl	114dc <dcgettext@plt>
   12fb4:	mov	r4, r0
   12fb8:	movw	r0, #42854	; 0xa766
   12fbc:	movt	r0, #1
   12fc0:	movw	r1, #42861	; 0xa76d
   12fc4:	movt	r1, #1
   12fc8:	cmp	r9, #34	; 0x22
   12fcc:	moveq	r1, r0
   12fd0:	mov	r0, #0
   12fd4:	mov	r2, #5
   12fd8:	bl	114dc <dcgettext@plt>
   12fdc:	mov	r3, r0
   12fe0:	mov	r0, #1
   12fe4:	mov	r1, #0
   12fe8:	mov	r2, r4
   12fec:	bl	115a8 <error@plt>
   12ff0:	bx	lr
   12ff4:	push	{r4, r5, fp, lr}
   12ff8:	add	fp, sp, #8
   12ffc:	bl	11620 <getpid@plt>
   13000:	movw	r1, #53736	; 0xd1e8
   13004:	movt	r1, #2
   13008:	ldr	r1, [r1]
   1300c:	cmp	r0, r1
   13010:	bne	13068 <__assert_fail@plt+0x1868>
   13014:	movw	r4, #53904	; 0xd290
   13018:	movt	r4, #2
   1301c:	ldrb	r0, [r4]
   13020:	cmp	r0, #0
   13024:	popne	{r4, r5, fp, pc}
   13028:	mov	r0, #1
   1302c:	strb	r0, [r4]
   13030:	mov	r5, #0
   13034:	mov	r0, #1
   13038:	mov	r1, #0
   1303c:	bl	13d94 <__assert_fail@plt+0x2594>
   13040:	strb	r5, [r4]
   13044:	movw	r0, #53740	; 0xd1ec
   13048:	movt	r0, #2
   1304c:	ldr	r1, [r0]
   13050:	movw	r0, #53872	; 0xd270
   13054:	movt	r0, #2
   13058:	ldr	r2, [r0]
   1305c:	cmp	r1, r2
   13060:	bne	13088 <__assert_fail@plt+0x1888>
   13064:	pop	{r4, r5, fp, pc}
   13068:	movw	r0, #43756	; 0xaaec
   1306c:	movt	r0, #1
   13070:	movw	r1, #40825	; 0x9f79
   13074:	movt	r1, #1
   13078:	movw	r3, #43776	; 0xab00
   1307c:	movt	r3, #1
   13080:	movw	r2, #1605	; 0x645
   13084:	bl	11800 <__assert_fail@plt>
   13088:	ldr	r0, [r0]
   1308c:	bl	114a0 <_exit@plt>
   13090:	push	{fp, lr}
   13094:	mov	fp, sp
   13098:	movw	r1, #41972	; 0xa3f4
   1309c:	movt	r1, #1
   130a0:	mov	r0, #0
   130a4:	mov	r2, #5
   130a8:	bl	114dc <dcgettext@plt>
   130ac:	mov	r2, r0
   130b0:	mov	r0, #1
   130b4:	mov	r1, #0
   130b8:	bl	115a8 <error@plt>
   130bc:	cmp	r0, r1
   130c0:	movcs	r0, r1
   130c4:	bx	lr
   130c8:	push	{r4, r5, r6, r7, fp, lr}
   130cc:	add	fp, sp, #16
   130d0:	sub	sp, sp, #16
   130d4:	mov	r4, r3
   130d8:	movw	r5, #53608	; 0xd168
   130dc:	movt	r5, #2
   130e0:	ldr	r0, [r5]
   130e4:	cmp	r0, #0
   130e8:	beq	13118 <__assert_fail@plt+0x1918>
   130ec:	ldr	r0, [r5]
   130f0:	movw	r6, #53884	; 0xd27c
   130f4:	movt	r6, #2
   130f8:	ldr	r1, [r6]
   130fc:	cmp	r1, r0
   13100:	bcc	13118 <__assert_fail@plt+0x1918>
   13104:	mov	r0, #0
   13108:	mov	r1, #1
   1310c:	bl	13d94 <__assert_fail@plt+0x2594>
   13110:	ldr	r0, [r5]
   13114:	b	130f8 <__assert_fail@plt+0x18f8>
   13118:	movw	r5, #53798	; 0xd226
   1311c:	movt	r5, #2
   13120:	ldrb	r0, [r5]
   13124:	cmp	r0, #1
   13128:	bne	1314c <__assert_fail@plt+0x194c>
   1312c:	mov	r6, #1
   13130:	mov	r0, #1
   13134:	bl	14068 <__assert_fail@plt+0x2868>
   13138:	cmp	r0, #0
   1313c:	beq	132b0 <__assert_fail@plt+0x1ab0>
   13140:	ldrb	r0, [r5]
   13144:	cmp	r0, #0
   13148:	bne	13164 <__assert_fail@plt+0x1964>
   1314c:	movw	r0, #53796	; 0xd224
   13150:	movt	r0, #2
   13154:	ldrb	r0, [r0]
   13158:	cmp	r0, #1
   1315c:	moveq	r0, #0
   13160:	bleq	14068 <__assert_fail@plt+0x2868>
   13164:	mov	r0, #0
   13168:	mov	r1, #0
   1316c:	bl	13d94 <__assert_fail@plt+0x2594>
   13170:	add	r0, sp, #8
   13174:	bl	184d4 <__assert_fail@plt+0x6cd4>
   13178:	cmp	r0, #0
   1317c:	bne	132bc <__assert_fail@plt+0x1abc>
   13180:	ldr	r0, [sp, #12]
   13184:	mov	r1, #2
   13188:	mov	r2, #1
   1318c:	bl	192d0 <__assert_fail@plt+0x7ad0>
   13190:	bl	11734 <fork@plt>
   13194:	mov	r5, r0
   13198:	cmn	r0, #1
   1319c:	ble	1321c <__assert_fail@plt+0x1a1c>
   131a0:	cmp	r5, #0
   131a4:	beq	132d0 <__assert_fail@plt+0x1ad0>
   131a8:	cmn	r5, #1
   131ac:	beq	1330c <__assert_fail@plt+0x1b0c>
   131b0:	ldr	r0, [sp, #12]
   131b4:	bl	117e8 <close@plt>
   131b8:	ldr	r0, [sp, #8]
   131bc:	add	r1, sp, #4
   131c0:	mov	r2, #4
   131c4:	bl	183c4 <__assert_fail@plt+0x6bc4>
   131c8:	cmp	r0, #4
   131cc:	beq	13288 <__assert_fail@plt+0x1a88>
   131d0:	mov	r4, r0
   131d4:	cmp	r0, #0
   131d8:	beq	13270 <__assert_fail@plt+0x1a70>
   131dc:	cmn	r4, #1
   131e0:	bne	13338 <__assert_fail@plt+0x1b38>
   131e4:	ldr	r0, [sp, #8]
   131e8:	bl	117e8 <close@plt>
   131ec:	bl	11680 <__errno_location@plt>
   131f0:	ldr	r4, [r0]
   131f4:	movw	r1, #43076	; 0xa844
   131f8:	movt	r1, #1
   131fc:	mov	r0, #0
   13200:	mov	r2, #5
   13204:	bl	114dc <dcgettext@plt>
   13208:	mov	r2, r0
   1320c:	mov	r0, #0
   13210:	mov	r1, r4
   13214:	bl	115a8 <error@plt>
   13218:	b	13278 <__assert_fail@plt+0x1a78>
   1321c:	bl	11680 <__errno_location@plt>
   13220:	mov	r6, r0
   13224:	ldr	r0, [r0]
   13228:	cmp	r0, #11
   1322c:	bne	131a0 <__assert_fail@plt+0x19a0>
   13230:	movw	r7, #53884	; 0xd27c
   13234:	movt	r7, #2
   13238:	ldr	r0, [r7]
   1323c:	cmp	r0, #0
   13240:	beq	131a0 <__assert_fail@plt+0x19a0>
   13244:	mov	r0, #0
   13248:	mov	r1, #1
   1324c:	bl	13d94 <__assert_fail@plt+0x2594>
   13250:	bl	11734 <fork@plt>
   13254:	mov	r5, r0
   13258:	cmp	r0, #0
   1325c:	bpl	131a0 <__assert_fail@plt+0x19a0>
   13260:	ldr	r0, [r6]
   13264:	cmp	r0, #11
   13268:	beq	13238 <__assert_fail@plt+0x1a38>
   1326c:	b	131a0 <__assert_fail@plt+0x19a0>
   13270:	mov	r0, r5
   13274:	bl	1434c <__assert_fail@plt+0x2b4c>
   13278:	ldr	r0, [sp, #8]
   1327c:	bl	117e8 <close@plt>
   13280:	mov	r6, #1
   13284:	b	132b0 <__assert_fail@plt+0x1ab0>
   13288:	ldr	r0, [sp, #8]
   1328c:	bl	117e8 <close@plt>
   13290:	mov	r1, sp
   13294:	mov	r6, #0
   13298:	mov	r0, r5
   1329c:	mov	r2, #0
   132a0:	bl	1156c <waitpid@plt>
   132a4:	ldr	r0, [sp, #4]
   132a8:	cmp	r0, #7
   132ac:	bne	13368 <__assert_fail@plt+0x1b68>
   132b0:	mov	r0, r6
   132b4:	sub	sp, fp, #16
   132b8:	pop	{r4, r5, r6, r7, fp, pc}
   132bc:	bl	11680 <__errno_location@plt>
   132c0:	ldr	r4, [r0]
   132c4:	movw	r1, #43030	; 0xa816
   132c8:	movt	r1, #1
   132cc:	b	1331c <__assert_fail@plt+0x1b1c>
   132d0:	ldr	r0, [sp, #8]
   132d4:	bl	117e8 <close@plt>
   132d8:	movw	r0, #53872	; 0xd270
   132dc:	movt	r0, #2
   132e0:	mov	r1, #0
   132e4:	str	r1, [r0]
   132e8:	bl	14220 <__assert_fail@plt+0x2a20>
   132ec:	mov	r0, r4
   132f0:	bl	14e2c <__assert_fail@plt+0x362c>
   132f4:	cmp	r0, #0
   132f8:	beq	13378 <__assert_fail@plt+0x1b78>
   132fc:	bl	11680 <__errno_location@plt>
   13300:	mov	r1, #7
   13304:	str	r1, [r0]
   13308:	b	13384 <__assert_fail@plt+0x1b84>
   1330c:	bl	11680 <__errno_location@plt>
   13310:	ldr	r4, [r0]
   13314:	movw	r1, #43064	; 0xa838
   13318:	movt	r1, #1
   1331c:	mov	r0, #0
   13320:	mov	r2, #5
   13324:	bl	114dc <dcgettext@plt>
   13328:	mov	r2, r0
   1332c:	mov	r0, #1
   13330:	mov	r1, r4
   13334:	bl	115a8 <error@plt>
   13338:	bl	11680 <__errno_location@plt>
   1333c:	ldr	r5, [r0]
   13340:	movw	r1, #43166	; 0xa89e
   13344:	movt	r1, #1
   13348:	mov	r0, #0
   1334c:	mov	r2, #5
   13350:	bl	114dc <dcgettext@plt>
   13354:	mov	r2, r0
   13358:	mov	r0, #1
   1335c:	mov	r1, r5
   13360:	mov	r3, r4
   13364:	bl	115a8 <error@plt>
   13368:	cmp	r0, #2
   1336c:	bne	133e4 <__assert_fail@plt+0x1be4>
   13370:	mov	r0, #127	; 0x7f
   13374:	bl	1162c <exit@plt>
   13378:	ldr	r0, [r4]
   1337c:	mov	r1, r4
   13380:	bl	114b8 <execvp@plt>
   13384:	bl	11680 <__errno_location@plt>
   13388:	mov	r5, r0
   1338c:	ldr	r0, [r0]
   13390:	cmp	r0, #0
   13394:	beq	133a8 <__assert_fail@plt+0x1ba8>
   13398:	ldr	r0, [sp, #12]
   1339c:	mov	r1, r5
   133a0:	mov	r2, #4
   133a4:	bl	116bc <write@plt>
   133a8:	ldr	r0, [sp, #12]
   133ac:	bl	117e8 <close@plt>
   133b0:	ldr	r1, [r5]
   133b4:	cmp	r1, #7
   133b8:	beq	133d0 <__assert_fail@plt+0x1bd0>
   133bc:	ldr	r3, [r4]
   133c0:	movw	r2, #48383	; 0xbcff
   133c4:	movt	r2, #1
   133c8:	mov	r0, #0
   133cc:	bl	115a8 <error@plt>
   133d0:	ldr	r1, [r5]
   133d4:	mov	r0, #126	; 0x7e
   133d8:	cmp	r1, #2
   133dc:	movweq	r0, #127	; 0x7f
   133e0:	bl	114a0 <_exit@plt>
   133e4:	mov	r0, #126	; 0x7e
   133e8:	bl	1162c <exit@plt>
   133ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133f0:	add	fp, sp, #28
   133f4:	sub	sp, sp, #12
   133f8:	movw	sl, #53881	; 0xd279
   133fc:	movt	sl, #2
   13400:	ldrb	r0, [sl]
   13404:	mvn	r9, #0
   13408:	cmp	r0, #0
   1340c:	bne	13528 <__assert_fail@plt+0x1d28>
   13410:	movw	r0, #53744	; 0xd1f0
   13414:	movt	r0, #2
   13418:	ldr	r5, [r0, #12]
   1341c:	movw	r0, #53812	; 0xd234
   13420:	movt	r0, #2
   13424:	ldr	r6, [r0]
   13428:	movw	r0, #53816	; 0xd238
   1342c:	movt	r0, #2
   13430:	ldr	r4, [r0, #20]
   13434:	movw	r7, #53804	; 0xd22c
   13438:	movt	r7, #2
   1343c:	ldr	r0, [r7]
   13440:	bl	117dc <getc@plt>
   13444:	cmn	r0, #1
   13448:	beq	13488 <__assert_fail@plt+0x1c88>
   1344c:	add	r1, r6, r5
   13450:	mvn	r2, r4
   13454:	add	r5, r2, r1
   13458:	movw	r8, #53788	; 0xd21c
   1345c:	movt	r8, #2
   13460:	ldrb	r1, [r8]
   13464:	cmp	r0, r1
   13468:	beq	134b4 <__assert_fail@plt+0x1cb4>
   1346c:	cmp	r6, r5
   13470:	bcs	13534 <__assert_fail@plt+0x1d34>
   13474:	strb	r0, [r6], #1
   13478:	ldr	r0, [r7]
   1347c:	bl	117dc <getc@plt>
   13480:	cmn	r0, #1
   13484:	bne	13460 <__assert_fail@plt+0x1c60>
   13488:	mov	r0, #1
   1348c:	strb	r0, [sl]
   13490:	movw	r0, #53812	; 0xd234
   13494:	movt	r0, #2
   13498:	ldr	r2, [r0]
   1349c:	cmp	r6, r2
   134a0:	beq	13528 <__assert_fail@plt+0x1d28>
   134a4:	mov	r0, #0
   134a8:	strb	r0, [r6], -r2
   134ac:	add	r9, r6, #1
   134b0:	b	134e4 <__assert_fail@plt+0x1ce4>
   134b4:	movw	r0, #53864	; 0xd268
   134b8:	movt	r0, #2
   134bc:	ldr	r1, [r0]
   134c0:	add	r1, r1, #1
   134c4:	str	r1, [r0]
   134c8:	mov	r0, #0
   134cc:	strb	r0, [r6]
   134d0:	movw	r1, #53812	; 0xd234
   134d4:	movt	r1, #2
   134d8:	ldr	r2, [r1]
   134dc:	sub	r1, r6, r2
   134e0:	add	r9, r1, #1
   134e4:	movw	r1, #53744	; 0xd1f0
   134e8:	movt	r1, #2
   134ec:	ldr	r1, [r1, #24]
   134f0:	cmp	r1, #0
   134f4:	bne	13528 <__assert_fail@plt+0x1d28>
   134f8:	movw	r1, #53860	; 0xd264
   134fc:	movt	r1, #2
   13500:	ldrb	r1, [r1]
   13504:	eor	r1, r1, #1
   13508:	str	r0, [sp]
   1350c:	stmib	sp, {r0, r1}
   13510:	movw	r0, #53744	; 0xd1f0
   13514:	movt	r0, #2
   13518:	movw	r1, #53816	; 0xd238
   1351c:	movt	r1, #2
   13520:	mov	r3, r9
   13524:	bl	146b0 <__assert_fail@plt+0x2eb0>
   13528:	mov	r0, r9
   1352c:	sub	sp, fp, #28
   13530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13534:	bl	13d30 <__assert_fail@plt+0x2530>
   13538:	movw	r1, #43007	; 0xa7ff
   1353c:	movt	r1, #1
   13540:	mov	r0, #0
   13544:	mov	r2, #5
   13548:	bl	114dc <dcgettext@plt>
   1354c:	mov	r2, r0
   13550:	mov	r0, #1
   13554:	mov	r1, #0
   13558:	bl	115a8 <error@plt>
   1355c:	push	{r4, sl, fp, lr}
   13560:	add	fp, sp, #8
   13564:	mov	r4, r0
   13568:	bl	11650 <strlen@plt>
   1356c:	mov	r1, r0
   13570:	ldrb	r0, [r4]
   13574:	cmp	r1, #1
   13578:	popeq	{r4, sl, fp, pc}
   1357c:	cmp	r0, #92	; 0x5c
   13580:	bne	13650 <__assert_fail@plt+0x1e50>
   13584:	ldrb	r0, [r4, #1]
   13588:	sub	r1, r0, #92	; 0x5c
   1358c:	cmp	r1, #26
   13590:	bhi	13614 <__assert_fail@plt+0x1e14>
   13594:	mov	r0, #7
   13598:	add	r2, pc, #0
   1359c:	ldr	pc, [r2, r1, lsl #2]
   135a0:	andeq	r3, r1, ip, lsl #12
   135a4:	andeq	r3, r1, r4, lsl r6
   135a8:	andeq	r3, r1, r4, lsl r6
   135ac:	andeq	r3, r1, r4, lsl r6
   135b0:	andeq	r3, r1, r4, lsl r6
   135b4:	andeq	r3, r1, ip, lsr r6
   135b8:	andeq	r3, r1, r8, lsr r6
   135bc:	andeq	r3, r1, r4, lsl r6
   135c0:	andeq	r3, r1, r4, lsl r6
   135c4:	andeq	r3, r1, r4, lsl r6
   135c8:	andeq	r3, r1, r0, asr #12
   135cc:	andeq	r3, r1, r4, lsl r6
   135d0:	andeq	r3, r1, r4, lsl r6
   135d4:	andeq	r3, r1, r4, lsl r6
   135d8:	andeq	r3, r1, r4, lsl r6
   135dc:	andeq	r3, r1, r4, lsl r6
   135e0:	andeq	r3, r1, r4, lsl r6
   135e4:	andeq	r3, r1, r4, lsl r6
   135e8:	andeq	r3, r1, r8, asr #12
   135ec:	andeq	r3, r1, r4, lsl r6
   135f0:	andeq	r3, r1, r4, lsl r6
   135f4:	andeq	r3, r1, r4, lsl r6
   135f8:	andeq	r3, r1, r0, lsr #12
   135fc:	andeq	r3, r1, r4, lsl r6
   13600:	andeq	r3, r1, r8, lsr #12
   13604:	andeq	r3, r1, r4, lsl r6
   13608:	andeq	r3, r1, r0, lsr r6
   1360c:	mov	r0, #92	; 0x5c
   13610:	pop	{r4, sl, fp, pc}
   13614:	mov	r0, r4
   13618:	pop	{r4, sl, fp, lr}
   1361c:	b	13bfc <__assert_fail@plt+0x23fc>
   13620:	mov	r0, #13
   13624:	pop	{r4, sl, fp, pc}
   13628:	mov	r0, #9
   1362c:	pop	{r4, sl, fp, pc}
   13630:	mov	r0, #11
   13634:	pop	{r4, sl, fp, pc}
   13638:	mov	r0, #8
   1363c:	pop	{r4, sl, fp, pc}
   13640:	mov	r0, #12
   13644:	pop	{r4, sl, fp, pc}
   13648:	mov	r0, #10
   1364c:	pop	{r4, sl, fp, pc}
   13650:	movw	r1, #42141	; 0xa49d
   13654:	movt	r1, #1
   13658:	mov	r0, #0
   1365c:	mov	r2, #5
   13660:	bl	114dc <dcgettext@plt>
   13664:	mov	r2, r0
   13668:	mov	r0, #1
   1366c:	mov	r1, #0
   13670:	mov	r3, r4
   13674:	bl	115a8 <error@plt>
   13678:	push	{fp, lr}
   1367c:	mov	fp, sp
   13680:	mov	r4, r0
   13684:	cmp	r0, #0
   13688:	bne	1395c <__assert_fail@plt+0x215c>
   1368c:	movw	r6, #53724	; 0xd1dc
   13690:	movt	r6, #2
   13694:	ldr	r5, [r6]
   13698:	movw	r1, #43976	; 0xabc8
   1369c:	movt	r1, #1
   136a0:	mov	r0, #0
   136a4:	mov	r2, #5
   136a8:	bl	114dc <dcgettext@plt>
   136ac:	mov	r1, r0
   136b0:	movw	r7, #53936	; 0xd2b0
   136b4:	movt	r7, #2
   136b8:	ldr	r2, [r7]
   136bc:	mov	r0, r5
   136c0:	bl	11674 <fprintf@plt>
   136c4:	movw	r1, #44025	; 0xabf9
   136c8:	movt	r1, #1
   136cc:	mov	r0, #0
   136d0:	mov	r2, #5
   136d4:	bl	114dc <dcgettext@plt>
   136d8:	ldr	r1, [r6]
   136dc:	bl	117b8 <fputs@plt>
   136e0:	movw	r1, #44103	; 0xac47
   136e4:	movt	r1, #1
   136e8:	mov	r0, #0
   136ec:	mov	r2, #5
   136f0:	bl	114dc <dcgettext@plt>
   136f4:	ldr	r1, [r6]
   136f8:	bl	117b8 <fputs@plt>
   136fc:	movw	r1, #44220	; 0xacbc
   13700:	movt	r1, #1
   13704:	mov	r0, #0
   13708:	mov	r2, #5
   1370c:	bl	114dc <dcgettext@plt>
   13710:	ldr	r1, [r6]
   13714:	bl	117b8 <fputs@plt>
   13718:	movw	r1, #44432	; 0xad90
   1371c:	movt	r1, #1
   13720:	mov	r0, #0
   13724:	mov	r2, #5
   13728:	bl	114dc <dcgettext@plt>
   1372c:	ldr	r1, [r6]
   13730:	bl	117b8 <fputs@plt>
   13734:	movw	r1, #44509	; 0xaddd
   13738:	movt	r1, #1
   1373c:	mov	r0, #0
   13740:	mov	r2, #5
   13744:	bl	114dc <dcgettext@plt>
   13748:	ldr	r1, [r6]
   1374c:	bl	117b8 <fputs@plt>
   13750:	movw	r1, #44743	; 0xaec7
   13754:	movt	r1, #1
   13758:	mov	r0, #0
   1375c:	mov	r2, #5
   13760:	bl	114dc <dcgettext@plt>
   13764:	ldr	r1, [r6]
   13768:	bl	117b8 <fputs@plt>
   1376c:	movw	r1, #44968	; 0xafa8
   13770:	movt	r1, #1
   13774:	mov	r0, #0
   13778:	mov	r2, #5
   1377c:	bl	114dc <dcgettext@plt>
   13780:	ldr	r1, [r6]
   13784:	bl	117b8 <fputs@plt>
   13788:	movw	r1, #45117	; 0xb03d
   1378c:	movt	r1, #1
   13790:	mov	r0, #0
   13794:	mov	r2, #5
   13798:	bl	114dc <dcgettext@plt>
   1379c:	ldr	r1, [r6]
   137a0:	bl	117b8 <fputs@plt>
   137a4:	movw	r1, #45169	; 0xb071
   137a8:	movt	r1, #1
   137ac:	mov	r0, #0
   137b0:	mov	r2, #5
   137b4:	bl	114dc <dcgettext@plt>
   137b8:	ldr	r1, [r6]
   137bc:	bl	117b8 <fputs@plt>
   137c0:	movw	r1, #45380	; 0xb144
   137c4:	movt	r1, #1
   137c8:	mov	r0, #0
   137cc:	mov	r2, #5
   137d0:	bl	114dc <dcgettext@plt>
   137d4:	ldr	r1, [r6]
   137d8:	bl	117b8 <fputs@plt>
   137dc:	movw	r1, #45506	; 0xb1c2
   137e0:	movt	r1, #1
   137e4:	mov	r0, #0
   137e8:	mov	r2, #5
   137ec:	bl	114dc <dcgettext@plt>
   137f0:	ldr	r1, [r6]
   137f4:	bl	117b8 <fputs@plt>
   137f8:	movw	r1, #45665	; 0xb261
   137fc:	movt	r1, #1
   13800:	mov	r0, #0
   13804:	mov	r2, #5
   13808:	bl	114dc <dcgettext@plt>
   1380c:	ldr	r1, [r6]
   13810:	bl	117b8 <fputs@plt>
   13814:	movw	r1, #45745	; 0xb2b1
   13818:	movt	r1, #1
   1381c:	mov	r0, #0
   13820:	mov	r2, #5
   13824:	bl	114dc <dcgettext@plt>
   13828:	ldr	r1, [r6]
   1382c:	bl	117b8 <fputs@plt>
   13830:	movw	r1, #45961	; 0xb389
   13834:	movt	r1, #1
   13838:	mov	r0, #0
   1383c:	mov	r2, #5
   13840:	bl	114dc <dcgettext@plt>
   13844:	ldr	r1, [r6]
   13848:	bl	117b8 <fputs@plt>
   1384c:	movw	r1, #46035	; 0xb3d3
   13850:	movt	r1, #1
   13854:	mov	r0, #0
   13858:	mov	r2, #5
   1385c:	bl	114dc <dcgettext@plt>
   13860:	ldr	r1, [r6]
   13864:	bl	117b8 <fputs@plt>
   13868:	movw	r1, #46098	; 0xb412
   1386c:	movt	r1, #1
   13870:	mov	r0, #0
   13874:	mov	r2, #5
   13878:	bl	114dc <dcgettext@plt>
   1387c:	ldr	r1, [r6]
   13880:	bl	117b8 <fputs@plt>
   13884:	movw	r1, #46178	; 0xb462
   13888:	movt	r1, #1
   1388c:	mov	r0, #0
   13890:	mov	r2, #5
   13894:	bl	114dc <dcgettext@plt>
   13898:	ldr	r1, [r6]
   1389c:	bl	117b8 <fputs@plt>
   138a0:	movw	r1, #46391	; 0xb537
   138a4:	movt	r1, #1
   138a8:	mov	r0, #0
   138ac:	mov	r2, #5
   138b0:	bl	114dc <dcgettext@plt>
   138b4:	ldr	r1, [r6]
   138b8:	bl	117b8 <fputs@plt>
   138bc:	movw	r1, #46465	; 0xb581
   138c0:	movt	r1, #1
   138c4:	mov	r0, #0
   138c8:	mov	r2, #5
   138cc:	bl	114dc <dcgettext@plt>
   138d0:	ldr	r1, [r6]
   138d4:	bl	117b8 <fputs@plt>
   138d8:	movw	r1, #46532	; 0xb5c4
   138dc:	movt	r1, #1
   138e0:	mov	r0, #0
   138e4:	mov	r2, #5
   138e8:	bl	114dc <dcgettext@plt>
   138ec:	ldr	r1, [r6]
   138f0:	bl	117b8 <fputs@plt>
   138f4:	movw	r1, #46601	; 0xb609
   138f8:	movt	r1, #1
   138fc:	mov	r0, #0
   13900:	mov	r2, #5
   13904:	bl	114dc <dcgettext@plt>
   13908:	ldr	r1, [r6]
   1390c:	bl	117b8 <fputs@plt>
   13910:	movw	r1, #46671	; 0xb64f
   13914:	movt	r1, #1
   13918:	mov	r0, #0
   1391c:	mov	r2, #5
   13920:	bl	114dc <dcgettext@plt>
   13924:	ldr	r1, [r6]
   13928:	bl	117b8 <fputs@plt>
   1392c:	movw	r1, #46730	; 0xb68a
   13930:	movt	r1, #1
   13934:	mov	r0, #0
   13938:	mov	r2, #5
   1393c:	bl	114dc <dcgettext@plt>
   13940:	ldr	r1, [r6]
   13944:	bl	117b8 <fputs@plt>
   13948:	ldr	r0, [r6]
   1394c:	ldr	r1, [r7]
   13950:	bl	156c8 <__assert_fail@plt+0x3ec8>
   13954:	mov	r0, r4
   13958:	bl	1162c <exit@plt>
   1395c:	movw	r0, #53712	; 0xd1d0
   13960:	movt	r0, #2
   13964:	ldr	r5, [r0]
   13968:	movw	r1, #43937	; 0xaba1
   1396c:	movt	r1, #1
   13970:	mov	r0, #0
   13974:	mov	r2, #5
   13978:	bl	114dc <dcgettext@plt>
   1397c:	mov	r1, r0
   13980:	movw	r0, #53936	; 0xd2b0
   13984:	movt	r0, #2
   13988:	ldr	r2, [r0]
   1398c:	mov	r0, r5
   13990:	bl	11674 <fprintf@plt>
   13994:	mov	r0, r4
   13998:	bl	1162c <exit@plt>
   1399c:	push	{r4, r5, fp, lr}
   139a0:	add	fp, sp, #8
   139a4:	sub	sp, sp, #8
   139a8:	mov	r4, r1
   139ac:	mov	r5, r0
   139b0:	movw	r1, #42688	; 0xa6c0
   139b4:	movt	r1, #1
   139b8:	mov	r0, #0
   139bc:	mov	r2, #5
   139c0:	bl	114dc <dcgettext@plt>
   139c4:	mov	r2, r0
   139c8:	str	r5, [sp]
   139cc:	str	r4, [sp, #4]
   139d0:	mov	r0, #0
   139d4:	mov	r1, #0
   139d8:	mov	r3, r4
   139dc:	bl	115a8 <error@plt>
   139e0:	sub	sp, fp, #8
   139e4:	pop	{r4, r5, fp, pc}
   139e8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   139ec:	add	fp, sp, #24
   139f0:	sub	sp, sp, #16
   139f4:	mov	r7, r3
   139f8:	mov	r6, r2
   139fc:	mov	r5, r1
   13a00:	mov	r4, r0
   13a04:	add	r1, sp, #12
   13a08:	mov	r2, #10
   13a0c:	bl	1144c <strtol@plt>
   13a10:	ldr	r1, [sp, #12]
   13a14:	cmp	r1, r4
   13a18:	beq	13af8 <__assert_fail@plt+0x22f8>
   13a1c:	ldrb	r1, [r1]
   13a20:	cmp	r1, #0
   13a24:	bne	13af8 <__assert_fail@plt+0x22f8>
   13a28:	ldr	r8, [fp, #8]
   13a2c:	cmp	r0, r6
   13a30:	blt	13aa8 <__assert_fail@plt+0x22a8>
   13a34:	cmp	r7, #0
   13a38:	bmi	13a98 <__assert_fail@plt+0x2298>
   13a3c:	cmp	r0, r7
   13a40:	mov	r6, r0
   13a44:	ble	13a9c <__assert_fail@plt+0x229c>
   13a48:	movw	r0, #53712	; 0xd1d0
   13a4c:	movt	r0, #2
   13a50:	ldr	r6, [r0]
   13a54:	movw	r1, #43891	; 0xab73
   13a58:	movt	r1, #1
   13a5c:	mov	r0, #0
   13a60:	mov	r2, #5
   13a64:	bl	114dc <dcgettext@plt>
   13a68:	mov	r1, r0
   13a6c:	movw	r0, #53936	; 0xd2b0
   13a70:	movt	r0, #2
   13a74:	ldr	r2, [r0]
   13a78:	stm	sp, {r5, r7}
   13a7c:	mov	r0, r6
   13a80:	mov	r3, r4
   13a84:	bl	11674 <fprintf@plt>
   13a88:	cmp	r8, #0
   13a8c:	mov	r6, r7
   13a90:	beq	13a9c <__assert_fail@plt+0x229c>
   13a94:	b	13af0 <__assert_fail@plt+0x22f0>
   13a98:	mov	r6, r0
   13a9c:	mov	r0, r6
   13aa0:	sub	sp, fp, #24
   13aa4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13aa8:	movw	r0, #53712	; 0xd1d0
   13aac:	movt	r0, #2
   13ab0:	ldr	r7, [r0]
   13ab4:	movw	r1, #43845	; 0xab45
   13ab8:	movt	r1, #1
   13abc:	mov	r0, #0
   13ac0:	mov	r2, #5
   13ac4:	bl	114dc <dcgettext@plt>
   13ac8:	mov	r1, r0
   13acc:	movw	r0, #53936	; 0xd2b0
   13ad0:	movt	r0, #2
   13ad4:	ldr	r2, [r0]
   13ad8:	stm	sp, {r5, r6}
   13adc:	mov	r0, r7
   13ae0:	mov	r3, r4
   13ae4:	bl	11674 <fprintf@plt>
   13ae8:	cmp	r8, #0
   13aec:	beq	13a9c <__assert_fail@plt+0x229c>
   13af0:	mov	r0, #1
   13af4:	bl	13678 <__assert_fail@plt+0x1e78>
   13af8:	movw	r0, #53712	; 0xd1d0
   13afc:	movt	r0, #2
   13b00:	ldr	r6, [r0]
   13b04:	movw	r1, #43805	; 0xab1d
   13b08:	movt	r1, #1
   13b0c:	mov	r0, #0
   13b10:	mov	r2, #5
   13b14:	bl	114dc <dcgettext@plt>
   13b18:	mov	r1, r0
   13b1c:	movw	r0, #53936	; 0xd2b0
   13b20:	movt	r0, #2
   13b24:	ldr	r2, [r0]
   13b28:	str	r5, [sp]
   13b2c:	mov	r0, r6
   13b30:	mov	r3, r4
   13b34:	bl	11674 <fprintf@plt>
   13b38:	mov	r0, #1
   13b3c:	bl	13678 <__assert_fail@plt+0x1e78>
   13b40:	movw	r0, #53608	; 0xd168
   13b44:	movt	r0, #2
   13b48:	ldr	r1, [r0]
   13b4c:	cmn	r1, #-2147483647	; 0x80000001
   13b50:	beq	13b60 <__assert_fail@plt+0x2360>
   13b54:	ldr	r1, [r0]
   13b58:	add	r1, r1, #1
   13b5c:	str	r1, [r0]
   13b60:	movw	r0, #53888	; 0xd280
   13b64:	movt	r0, #2
   13b68:	mov	r1, #1
   13b6c:	str	r1, [r0]
   13b70:	bx	lr
   13b74:	movw	r0, #53608	; 0xd168
   13b78:	movt	r0, #2
   13b7c:	ldr	r1, [r0]
   13b80:	cmp	r1, #2
   13b84:	bxlt	lr
   13b88:	ldr	r1, [r0]
   13b8c:	sub	r1, r1, #1
   13b90:	str	r1, [r0]
   13b94:	bx	lr
   13b98:	push	{r4, r5, r6, sl, fp, lr}
   13b9c:	add	fp, sp, #16
   13ba0:	mov	r5, #0
   13ba4:	mov	r1, #0
   13ba8:	bl	15160 <__assert_fail@plt+0x3960>
   13bac:	cmp	r0, #0
   13bb0:	bmi	13bd0 <__assert_fail@plt+0x23d0>
   13bb4:	mov	r4, r0
   13bb8:	movw	r1, #42126	; 0xa48e
   13bbc:	movt	r1, #1
   13bc0:	bl	11428 <fdopen@plt>
   13bc4:	mov	r5, r0
   13bc8:	cmp	r0, #0
   13bcc:	beq	13bd8 <__assert_fail@plt+0x23d8>
   13bd0:	mov	r0, r5
   13bd4:	pop	{r4, r5, r6, sl, fp, pc}
   13bd8:	bl	11680 <__errno_location@plt>
   13bdc:	mov	r5, r0
   13be0:	ldr	r6, [r0]
   13be4:	mov	r0, r4
   13be8:	bl	117e8 <close@plt>
   13bec:	str	r6, [r5]
   13bf0:	mov	r5, #0
   13bf4:	mov	r0, r5
   13bf8:	pop	{r4, r5, r6, sl, fp, pc}
   13bfc:	push	{r4, r5, r6, sl, fp, lr}
   13c00:	add	fp, sp, #16
   13c04:	sub	sp, sp, #8
   13c08:	mov	r4, r0
   13c0c:	ldrb	r0, [r0]
   13c10:	cmp	r0, #92	; 0x5c
   13c14:	bne	13cbc <__assert_fail@plt+0x24bc>
   13c18:	mov	r5, r4
   13c1c:	ldrb	r6, [r5, #1]!
   13c20:	cmp	r6, #120	; 0x78
   13c24:	bne	13c34 <__assert_fail@plt+0x2434>
   13c28:	add	r5, r4, #2
   13c2c:	mov	r6, #16
   13c30:	b	13c50 <__assert_fail@plt+0x2450>
   13c34:	bl	11614 <__ctype_b_loc@plt>
   13c38:	ldr	r0, [r0]
   13c3c:	add	r0, r0, r6, lsl #1
   13c40:	ldrb	r0, [r0, #1]
   13c44:	mov	r6, #8
   13c48:	tst	r0, #8
   13c4c:	beq	13cf0 <__assert_fail@plt+0x24f0>
   13c50:	bl	11680 <__errno_location@plt>
   13c54:	mov	r1, #0
   13c58:	str	r1, [r0]
   13c5c:	str	r1, [sp, #4]
   13c60:	add	r1, sp, #4
   13c64:	mov	r0, r5
   13c68:	mov	r2, r6
   13c6c:	bl	11644 <strtoul@plt>
   13c70:	cmp	r0, #256	; 0x100
   13c74:	bcs	13cdc <__assert_fail@plt+0x24dc>
   13c78:	ldr	r5, [sp, #4]
   13c7c:	ldrb	r1, [r5]
   13c80:	cmp	r1, #0
   13c84:	uxtbeq	r0, r0
   13c88:	subeq	sp, fp, #16
   13c8c:	popeq	{r4, r5, r6, sl, fp, pc}
   13c90:	movw	r1, #42588	; 0xa65c
   13c94:	movt	r1, #1
   13c98:	mov	r0, #0
   13c9c:	mov	r2, #5
   13ca0:	bl	114dc <dcgettext@plt>
   13ca4:	mov	r2, r0
   13ca8:	str	r5, [sp]
   13cac:	mov	r0, #1
   13cb0:	mov	r1, #0
   13cb4:	mov	r3, r4
   13cb8:	bl	115a8 <error@plt>
   13cbc:	movw	r0, #42270	; 0xa51e
   13cc0:	movt	r0, #1
   13cc4:	movw	r1, #40825	; 0x9f79
   13cc8:	movt	r1, #1
   13ccc:	movw	r3, #42283	; 0xa52b
   13cd0:	movt	r3, #1
   13cd4:	mov	r2, #236	; 0xec
   13cd8:	bl	11800 <__assert_fail@plt>
   13cdc:	cmp	r6, #16
   13ce0:	bne	13d0c <__assert_fail@plt+0x250c>
   13ce4:	movw	r1, #42390	; 0xa596
   13ce8:	movt	r1, #1
   13cec:	b	13d14 <__assert_fail@plt+0x2514>
   13cf0:	movw	r1, #42329	; 0xa559
   13cf4:	movt	r1, #1
   13cf8:	mov	r0, #0
   13cfc:	mov	r2, #5
   13d00:	bl	114dc <dcgettext@plt>
   13d04:	mov	r2, r0
   13d08:	b	13cac <__assert_fail@plt+0x24ac>
   13d0c:	movw	r1, #42489	; 0xa5f9
   13d10:	movt	r1, #1
   13d14:	mov	r0, #0
   13d18:	mov	r2, #5
   13d1c:	bl	114dc <dcgettext@plt>
   13d20:	mov	r2, r0
   13d24:	mov	r0, #255	; 0xff
   13d28:	str	r0, [sp]
   13d2c:	b	13cac <__assert_fail@plt+0x24ac>
   13d30:	movw	r0, #53744	; 0xd1f0
   13d34:	movt	r0, #2
   13d38:	ldr	r1, [r0, #24]
   13d3c:	cmp	r1, #0
   13d40:	bne	13d90 <__assert_fail@plt+0x2590>
   13d44:	movw	r1, #53860	; 0xd264
   13d48:	movt	r1, #2
   13d4c:	ldrb	r1, [r1]
   13d50:	cmp	r1, #1
   13d54:	bne	13d90 <__assert_fail@plt+0x2590>
   13d58:	ldr	r1, [r0, #28]
   13d5c:	movw	r2, #53816	; 0xd238
   13d60:	movt	r2, #2
   13d64:	ldr	r2, [r2]
   13d68:	cmp	r2, r1
   13d6c:	bxeq	lr
   13d70:	ldr	r0, [r0]
   13d74:	cmp	r0, #0
   13d78:	bne	13d90 <__assert_fail@plt+0x2590>
   13d7c:	movw	r0, #53744	; 0xd1f0
   13d80:	movt	r0, #2
   13d84:	movw	r1, #53816	; 0xd238
   13d88:	movt	r1, #2
   13d8c:	b	148d0 <__assert_fail@plt+0x30d0>
   13d90:	bx	lr
   13d94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d98:	add	fp, sp, #28
   13d9c:	sub	sp, sp, #20
   13da0:	mov	r5, r0
   13da4:	movw	r0, #53884	; 0xd27c
   13da8:	movt	r0, #2
   13dac:	ldr	r0, [r0]
   13db0:	cmp	r0, #0
   13db4:	beq	1403c <__assert_fail@plt+0x283c>
   13db8:	mov	r7, #0
   13dbc:	movw	sl, #53888	; 0xd280
   13dc0:	movt	sl, #2
   13dc4:	eor	r2, r5, #1
   13dc8:	add	r6, sp, #16
   13dcc:	movw	r8, #53892	; 0xd284
   13dd0:	movt	r8, #2
   13dd4:	mov	r3, #0
   13dd8:	str	r1, [sp, #8]
   13ddc:	str	r2, [sp, #4]
   13de0:	str	r7, [sl]
   13de4:	str	r3, [sp, #12]
   13de8:	cmp	r3, r1
   13dec:	mov	r0, #0
   13df0:	movwcs	r0, #1
   13df4:	and	r7, r0, r2
   13df8:	mvn	r0, #0
   13dfc:	mov	r1, r6
   13e00:	mov	r2, r7
   13e04:	bl	1156c <waitpid@plt>
   13e08:	cmn	r0, #1
   13e0c:	bne	13e5c <__assert_fail@plt+0x265c>
   13e10:	mov	r4, r8
   13e14:	bl	11680 <__errno_location@plt>
   13e18:	mov	r8, r0
   13e1c:	ldr	r9, [r8]
   13e20:	cmp	r9, #4
   13e24:	bne	14044 <__assert_fail@plt+0x2844>
   13e28:	cmp	r5, #0
   13e2c:	mov	r0, r7
   13e30:	moveq	r0, #1
   13e34:	ldr	r1, [sl]
   13e38:	cmp	r1, #0
   13e3c:	movne	r7, r0
   13e40:	mvn	r0, #0
   13e44:	mov	r1, r6
   13e48:	mov	r2, r7
   13e4c:	bl	1156c <waitpid@plt>
   13e50:	cmn	r0, #1
   13e54:	beq	13e1c <__assert_fail@plt+0x261c>
   13e58:	mov	r8, r4
   13e5c:	cmp	r0, #0
   13e60:	beq	14004 <__assert_fail@plt+0x2804>
   13e64:	ldr	r1, [r8]
   13e68:	cmp	r1, #0
   13e6c:	beq	13ea0 <__assert_fail@plt+0x26a0>
   13e70:	ldr	r2, [r8]
   13e74:	movw	r1, #53896	; 0xd288
   13e78:	movt	r1, #2
   13e7c:	ldr	r3, [r1]
   13e80:	mov	r1, #0
   13e84:	ldr	r4, [r3, r1, lsl #2]
   13e88:	cmp	r0, r4
   13e8c:	beq	13ea4 <__assert_fail@plt+0x26a4>
   13e90:	add	r1, r1, #1
   13e94:	cmp	r1, r2
   13e98:	bcc	13e84 <__assert_fail@plt+0x2684>
   13e9c:	b	13ea4 <__assert_fail@plt+0x26a4>
   13ea0:	mov	r1, #0
   13ea4:	cmp	r0, #0
   13ea8:	beq	13eb8 <__assert_fail@plt+0x26b8>
   13eac:	ldr	r2, [r8]
   13eb0:	cmp	r1, r2
   13eb4:	beq	13df8 <__assert_fail@plt+0x25f8>
   13eb8:	cmp	r0, #0
   13ebc:	beq	14004 <__assert_fail@plt+0x2804>
   13ec0:	movw	r0, #53896	; 0xd288
   13ec4:	movt	r0, #2
   13ec8:	ldr	r0, [r0]
   13ecc:	mov	r7, #0
   13ed0:	str	r7, [r0, r1, lsl #2]
   13ed4:	movw	r4, #53884	; 0xd27c
   13ed8:	movt	r4, #2
   13edc:	ldr	r0, [r4]
   13ee0:	sub	r0, r0, #1
   13ee4:	str	r0, [r4]
   13ee8:	ldrb	r0, [sp, #17]
   13eec:	mov	r1, #65280	; 0xff00
   13ef0:	cmp	r1, r0, lsl #8
   13ef4:	bne	13f2c <__assert_fail@plt+0x272c>
   13ef8:	mov	r0, #0
   13efc:	movw	r1, #43319	; 0xa937
   13f00:	movt	r1, #1
   13f04:	mov	r2, #5
   13f08:	bl	114dc <dcgettext@plt>
   13f0c:	mov	r2, r0
   13f10:	movw	r0, #53816	; 0xd238
   13f14:	movt	r0, #2
   13f18:	ldr	r0, [r0, #4]
   13f1c:	ldr	r3, [r0]
   13f20:	mov	r0, #124	; 0x7c
   13f24:	mov	r1, #0
   13f28:	bl	115a8 <error@plt>
   13f2c:	ldrb	r0, [sp, #16]
   13f30:	cmp	r0, #127	; 0x7f
   13f34:	bne	13f74 <__assert_fail@plt+0x2774>
   13f38:	mov	r0, #0
   13f3c:	movw	r1, #43356	; 0xa95c
   13f40:	movt	r1, #1
   13f44:	mov	r2, #5
   13f48:	bl	114dc <dcgettext@plt>
   13f4c:	mov	r2, r0
   13f50:	movw	r0, #53816	; 0xd238
   13f54:	movt	r0, #2
   13f58:	ldr	r0, [r0, #4]
   13f5c:	ldr	r3, [r0]
   13f60:	ldrb	r0, [sp, #17]
   13f64:	str	r0, [sp]
   13f68:	mov	r0, #125	; 0x7d
   13f6c:	mov	r1, #0
   13f70:	bl	115a8 <error@plt>
   13f74:	ldr	r0, [sp, #16]
   13f78:	mov	r1, #2130706432	; 0x7f000000
   13f7c:	and	r0, r1, r0, lsl #24
   13f80:	add	r0, r0, #16777216	; 0x1000000
   13f84:	cmp	r0, #33554432	; 0x2000000
   13f88:	blt	13fcc <__assert_fail@plt+0x27cc>
   13f8c:	mov	r0, #0
   13f90:	movw	r1, #43381	; 0xa975
   13f94:	movt	r1, #1
   13f98:	mov	r2, #5
   13f9c:	bl	114dc <dcgettext@plt>
   13fa0:	mov	r2, r0
   13fa4:	movw	r0, #53816	; 0xd238
   13fa8:	movt	r0, #2
   13fac:	ldr	r0, [r0, #4]
   13fb0:	ldr	r3, [r0]
   13fb4:	ldr	r0, [sp, #16]
   13fb8:	and	r0, r0, #127	; 0x7f
   13fbc:	str	r0, [sp]
   13fc0:	mov	r0, #125	; 0x7d
   13fc4:	mov	r1, #0
   13fc8:	bl	115a8 <error@plt>
   13fcc:	ldrb	r0, [sp, #17]
   13fd0:	cmp	r0, #0
   13fd4:	ldr	r2, [sp, #4]
   13fd8:	movwne	r0, #53872	; 0xd270
   13fdc:	movtne	r0, #2
   13fe0:	movne	r1, #123	; 0x7b
   13fe4:	strne	r1, [r0]
   13fe8:	ldr	r3, [sp, #12]
   13fec:	add	r3, r3, #1
   13ff0:	ldr	r0, [r4]
   13ff4:	cmp	r0, #0
   13ff8:	ldr	r1, [sp, #8]
   13ffc:	bne	13de0 <__assert_fail@plt+0x25e0>
   14000:	b	1403c <__assert_fail@plt+0x283c>
   14004:	tst	r7, #1
   14008:	bne	1403c <__assert_fail@plt+0x283c>
   1400c:	movw	r1, #43276	; 0xa90c
   14010:	movt	r1, #1
   14014:	mov	r0, #0
   14018:	mov	r2, #5
   1401c:	bl	114dc <dcgettext@plt>
   14020:	mov	r2, r0
   14024:	movw	r0, #53884	; 0xd27c
   14028:	movt	r0, #2
   1402c:	ldr	r3, [r0]
   14030:	mov	r0, #0
   14034:	mov	r1, #0
   14038:	bl	115a8 <error@plt>
   1403c:	sub	sp, fp, #28
   14040:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14044:	movw	r1, #43244	; 0xa8ec
   14048:	movt	r1, #1
   1404c:	mov	r0, #0
   14050:	mov	r2, #5
   14054:	bl	114dc <dcgettext@plt>
   14058:	mov	r2, r0
   1405c:	mov	r0, #1
   14060:	mov	r1, r9
   14064:	bl	115a8 <error@plt>
   14068:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1406c:	add	fp, sp, #28
   14070:	sub	sp, sp, #4
   14074:	mov	r9, r0
   14078:	movw	r5, #53816	; 0xd238
   1407c:	movt	r5, #2
   14080:	ldr	r0, [r5]
   14084:	cmp	r0, #1
   14088:	bne	14154 <__assert_fail@plt+0x2954>
   1408c:	cmp	r9, #0
   14090:	beq	14134 <__assert_fail@plt+0x2934>
   14094:	movw	r5, #53900	; 0xd28c
   14098:	movt	r5, #2
   1409c:	ldr	r0, [r5]
   140a0:	cmp	r0, #0
   140a4:	bne	140c0 <__assert_fail@plt+0x28c0>
   140a8:	movw	r0, #43442	; 0xa9b2
   140ac:	movt	r0, #1
   140b0:	bl	13b98 <__assert_fail@plt+0x2398>
   140b4:	str	r0, [r5]
   140b8:	cmp	r0, #0
   140bc:	beq	141f4 <__assert_fail@plt+0x29f4>
   140c0:	movw	r4, #53712	; 0xd1d0
   140c4:	movt	r4, #2
   140c8:	ldr	r3, [r4]
   140cc:	movw	r0, #43487	; 0xa9df
   140d0:	movt	r0, #1
   140d4:	mov	r1, #4
   140d8:	mov	r2, #1
   140dc:	bl	11554 <fwrite@plt>
   140e0:	ldr	r0, [r4]
   140e4:	bl	194b4 <__assert_fail@plt+0x7cb4>
   140e8:	cmp	r0, #0
   140ec:	bne	141cc <__assert_fail@plt+0x29cc>
   140f0:	ldr	r0, [r5]
   140f4:	bl	117dc <getc@plt>
   140f8:	mov	r4, r0
   140fc:	cmp	r0, #10
   14100:	beq	1411c <__assert_fail@plt+0x291c>
   14104:	cmn	r0, #1
   14108:	beq	141e0 <__assert_fail@plt+0x29e0>
   1410c:	ldr	r0, [r5]
   14110:	bl	117dc <getc@plt>
   14114:	cmp	r0, #10
   14118:	bne	14104 <__assert_fail@plt+0x2904>
   1411c:	orr	r1, r4, #32
   14120:	mov	r0, #1
   14124:	cmp	r1, #121	; 0x79
   14128:	movne	r0, #0
   1412c:	sub	sp, fp, #28
   14130:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14134:	movw	r0, #53712	; 0xd1d0
   14138:	movt	r0, #2
   1413c:	ldr	r1, [r0]
   14140:	mov	r0, #10
   14144:	bl	1177c <putc@plt>
   14148:	mov	r0, #0
   1414c:	sub	sp, fp, #28
   14150:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14154:	mov	r4, #0
   14158:	movw	sl, #53712	; 0xd1d0
   1415c:	movt	sl, #2
   14160:	movw	r8, #43409	; 0xa991
   14164:	movt	r8, #1
   14168:	cmp	r4, #0
   1416c:	movw	r6, #43414	; 0xa996
   14170:	movt	r6, #1
   14174:	movw	r0, #44102	; 0xac46
   14178:	movt	r0, #1
   1417c:	moveq	r6, r0
   14180:	ldr	r0, [r5, #4]
   14184:	ldr	r2, [r0, r4, lsl #2]
   14188:	ldr	r7, [sl]
   1418c:	mov	r0, #0
   14190:	mov	r1, #3
   14194:	bl	17d08 <__assert_fail@plt+0x6508>
   14198:	mov	r3, r0
   1419c:	mov	r0, r7
   141a0:	mov	r1, r8
   141a4:	mov	r2, r6
   141a8:	bl	11674 <fprintf@plt>
   141ac:	cmn	r0, #1
   141b0:	ble	141cc <__assert_fail@plt+0x29cc>
   141b4:	add	r4, r4, #1
   141b8:	ldr	r0, [r5]
   141bc:	sub	r0, r0, #1
   141c0:	cmp	r4, r0
   141c4:	bcc	14168 <__assert_fail@plt+0x2968>
   141c8:	b	1408c <__assert_fail@plt+0x288c>
   141cc:	bl	11680 <__errno_location@plt>
   141d0:	ldr	r4, [r0]
   141d4:	movw	r1, #43416	; 0xa998
   141d8:	movt	r1, #1
   141dc:	b	14204 <__assert_fail@plt+0x2a04>
   141e0:	bl	11680 <__errno_location@plt>
   141e4:	ldr	r4, [r0]
   141e8:	movw	r1, #43492	; 0xa9e4
   141ec:	movt	r1, #1
   141f0:	b	14204 <__assert_fail@plt+0x2a04>
   141f4:	bl	11680 <__errno_location@plt>
   141f8:	ldr	r4, [r0]
   141fc:	movw	r1, #43451	; 0xa9bb
   14200:	movt	r1, #1
   14204:	mov	r0, #0
   14208:	mov	r2, #5
   1420c:	bl	114dc <dcgettext@plt>
   14210:	mov	r2, r0
   14214:	mov	r0, #1
   14218:	mov	r1, r4
   1421c:	bl	115a8 <error@plt>
   14220:	push	{r4, r5, r6, sl, fp, lr}
   14224:	add	fp, sp, #16
   14228:	bl	15280 <__assert_fail@plt+0x3a80>
   1422c:	cmp	r0, #0
   14230:	beq	14238 <__assert_fail@plt+0x2a38>
   14234:	bl	152a0 <__assert_fail@plt+0x3aa0>
   14238:	mov	r0, #0
   1423c:	bl	1434c <__assert_fail@plt+0x2b4c>
   14240:	bl	14458 <__assert_fail@plt+0x2c58>
   14244:	movw	r0, #53808	; 0xd230
   14248:	movt	r0, #2
   1424c:	ldrb	r0, [r0]
   14250:	cmp	r0, #1
   14254:	movw	r6, #53797	; 0xd225
   14258:	movt	r6, #2
   1425c:	bne	1426c <__assert_fail@plt+0x2a6c>
   14260:	ldrb	r0, [r6]
   14264:	cmp	r0, #1
   14268:	popne	{r4, r5, r6, sl, fp, pc}
   1426c:	ldrb	r5, [r6]
   14270:	mov	r0, #0
   14274:	bl	117e8 <close@plt>
   14278:	movw	r0, #43442	; 0xa9b2
   1427c:	movt	r0, #1
   14280:	movw	r4, #43518	; 0xa9fe
   14284:	movt	r4, #1
   14288:	cmp	r5, #0
   1428c:	movne	r4, r0
   14290:	mov	r0, r4
   14294:	mov	r1, #0
   14298:	bl	15b84 <__assert_fail@plt+0x4384>
   1429c:	cmn	r0, #1
   142a0:	ble	142d0 <__assert_fail@plt+0x2ad0>
   142a4:	mov	r5, r0
   142a8:	cmp	r0, #0
   142ac:	beq	14310 <__assert_fail@plt+0x2b10>
   142b0:	mov	r0, r5
   142b4:	mov	r1, #0
   142b8:	bl	114f4 <dup2@plt>
   142bc:	cmp	r0, #0
   142c0:	bne	14314 <__assert_fail@plt+0x2b14>
   142c4:	mov	r0, r5
   142c8:	pop	{r4, r5, r6, sl, fp, lr}
   142cc:	b	117e8 <close@plt>
   142d0:	ldrb	r6, [r6]
   142d4:	bl	11680 <__errno_location@plt>
   142d8:	ldr	r5, [r0]
   142dc:	mov	r0, #0
   142e0:	mov	r1, #8
   142e4:	mov	r2, r4
   142e8:	bl	17d08 <__assert_fail@plt+0x6508>
   142ec:	mov	r3, r0
   142f0:	movw	r2, #48383	; 0xbcff
   142f4:	movt	r2, #1
   142f8:	cmp	r6, #1
   142fc:	beq	14340 <__assert_fail@plt+0x2b40>
   14300:	mov	r0, #0
   14304:	mov	r1, r5
   14308:	pop	{r4, r5, r6, sl, fp, lr}
   1430c:	b	115a8 <error@plt>
   14310:	pop	{r4, r5, r6, sl, fp, pc}
   14314:	bl	11680 <__errno_location@plt>
   14318:	ldr	r4, [r0]
   1431c:	movw	r1, #43528	; 0xaa08
   14320:	movt	r1, #1
   14324:	mov	r0, #0
   14328:	mov	r2, #5
   1432c:	bl	114dc <dcgettext@plt>
   14330:	mov	r2, r0
   14334:	mov	r0, #1
   14338:	mov	r1, r4
   1433c:	bl	115a8 <error@plt>
   14340:	mov	r0, #1
   14344:	mov	r1, r5
   14348:	bl	115a8 <error@plt>
   1434c:	push	{r4, r5, r6, r7, fp, lr}
   14350:	add	fp, sp, #16
   14354:	mov	r4, r0
   14358:	movw	r6, #53892	; 0xd284
   1435c:	movt	r6, #2
   14360:	ldr	r0, [r6]
   14364:	mov	r5, #0
   14368:	cmp	r0, #0
   1436c:	movw	r7, #53896	; 0xd288
   14370:	movt	r7, #2
   14374:	beq	143b0 <__assert_fail@plt+0x2bb0>
   14378:	ldr	r1, [r7]
   1437c:	ldr	r2, [r1]
   14380:	cmp	r2, #0
   14384:	beq	143b4 <__assert_fail@plt+0x2bb4>
   14388:	ldr	r0, [r6]
   1438c:	mov	r2, #1
   14390:	mov	r5, r2
   14394:	cmp	r2, r0
   14398:	bcs	143b4 <__assert_fail@plt+0x2bb4>
   1439c:	ldr	r3, [r1, r5, lsl #2]
   143a0:	add	r2, r5, #1
   143a4:	cmp	r3, #0
   143a8:	bne	14390 <__assert_fail@plt+0x2b90>
   143ac:	b	143b4 <__assert_fail@plt+0x2bb4>
   143b0:	mov	r0, #0
   143b4:	cmp	r5, r0
   143b8:	bne	143fc <__assert_fail@plt+0x2bfc>
   143bc:	ldr	r0, [r7]
   143c0:	mov	r1, r6
   143c4:	mov	r2, #4
   143c8:	bl	18aac <__assert_fail@plt+0x72ac>
   143cc:	str	r0, [r7]
   143d0:	ldr	r0, [r6]
   143d4:	cmp	r5, r0
   143d8:	bcs	143fc <__assert_fail@plt+0x2bfc>
   143dc:	ldr	r0, [r7]
   143e0:	mov	r1, #0
   143e4:	mov	r2, r5
   143e8:	str	r1, [r0, r2, lsl #2]
   143ec:	add	r2, r2, #1
   143f0:	ldr	r3, [r6]
   143f4:	cmp	r2, r3
   143f8:	bcc	143e8 <__assert_fail@plt+0x2be8>
   143fc:	ldr	r0, [r7]
   14400:	ldr	r1, [r0, r5, lsl #2]
   14404:	cmp	r1, #0
   14408:	streq	r4, [r0, r5, lsl #2]
   1440c:	movweq	r0, #53868	; 0xd26c
   14410:	movteq	r0, #2
   14414:	moveq	r1, #1
   14418:	strbeq	r1, [r0]
   1441c:	movweq	r0, #53884	; 0xd27c
   14420:	movteq	r0, #2
   14424:	ldreq	r1, [r0]
   14428:	addeq	r1, r1, #1
   1442c:	streq	r1, [r0]
   14430:	moveq	r0, r5
   14434:	popeq	{r4, r5, r6, r7, fp, pc}
   14438:	movw	r0, #43714	; 0xaac2
   1443c:	movt	r0, #1
   14440:	movw	r1, #40825	; 0x9f79
   14444:	movt	r1, #1
   14448:	movw	r3, #43727	; 0xaacf
   1444c:	movt	r3, #1
   14450:	movw	r2, #1477	; 0x5c5
   14454:	bl	11800 <__assert_fail@plt>
   14458:	push	{r4, r5, fp, lr}
   1445c:	add	fp, sp, #8
   14460:	sub	sp, sp, #24
   14464:	mov	r3, r0
   14468:	add	r0, sp, #4
   1446c:	movw	r2, #43583	; 0xaa3f
   14470:	movt	r2, #1
   14474:	mov	r1, #19
   14478:	bl	1168c <snprintf@plt>
   1447c:	cmp	r0, #20
   14480:	bcs	144ec <__assert_fail@plt+0x2cec>
   14484:	movw	r5, #53800	; 0xd228
   14488:	movt	r5, #2
   1448c:	ldr	r0, [r5]
   14490:	cmp	r0, #0
   14494:	beq	144ac <__assert_fail@plt+0x2cac>
   14498:	add	r1, sp, #4
   1449c:	mov	r2, #1
   144a0:	bl	11668 <setenv@plt>
   144a4:	cmn	r0, #1
   144a8:	ble	144b4 <__assert_fail@plt+0x2cb4>
   144ac:	sub	sp, fp, #8
   144b0:	pop	{r4, r5, fp, pc}
   144b4:	bl	11680 <__errno_location@plt>
   144b8:	ldr	r4, [r0]
   144bc:	movw	r1, #43676	; 0xaa9c
   144c0:	movt	r1, #1
   144c4:	mov	r0, #0
   144c8:	mov	r2, #5
   144cc:	bl	114dc <dcgettext@plt>
   144d0:	mov	r2, r0
   144d4:	ldr	r3, [r5]
   144d8:	mov	r0, #0
   144dc:	mov	r1, r4
   144e0:	bl	115a8 <error@plt>
   144e4:	sub	sp, fp, #8
   144e8:	pop	{r4, r5, fp, pc}
   144ec:	movw	r0, #43586	; 0xaa42
   144f0:	movt	r0, #1
   144f4:	movw	r1, #40825	; 0x9f79
   144f8:	movt	r1, #1
   144fc:	movw	r3, #43644	; 0xaa7c
   14500:	movt	r3, #1
   14504:	movw	r2, #1190	; 0x4a6
   14508:	bl	11800 <__assert_fail@plt>
   1450c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14510:	add	fp, sp, #28
   14514:	sub	sp, sp, #28
   14518:	str	r3, [sp, #24]
   1451c:	mov	r6, r2
   14520:	str	r1, [sp, #12]
   14524:	movw	r7, #53908	; 0xd294
   14528:	movt	r7, #2
   1452c:	ldr	r1, [r7]
   14530:	str	r0, [sp, #20]
   14534:	ldr	r5, [r0, #12]
   14538:	ldr	r4, [fp, #20]
   1453c:	ldr	r0, [fp, #12]
   14540:	cmp	r1, #0
   14544:	bne	1455c <__assert_fail@plt+0x2d5c>
   14548:	mov	r8, r0
   1454c:	add	r0, r5, #1
   14550:	bl	189e8 <__assert_fail@plt+0x71e8>
   14554:	str	r0, [r7]
   14558:	mov	r0, r8
   1455c:	sub	sl, r5, #1
   14560:	ldr	r9, [fp, #8]
   14564:	add	r0, r4, r0
   14568:	str	r0, [sp, #16]
   1456c:	ldr	r7, [r7]
   14570:	b	14584 <__assert_fail@plt+0x2d84>
   14574:	mov	r4, r5
   14578:	ldrb	r0, [r6]
   1457c:	cmp	r0, #0
   14580:	beq	1464c <__assert_fail@plt+0x2e4c>
   14584:	mov	r5, r4
   14588:	ldr	r0, [sp, #20]
   1458c:	ldr	r1, [r0, #24]
   14590:	mov	r0, r6
   14594:	bl	15bc0 <__assert_fail@plt+0x43c0>
   14598:	cmp	r0, #0
   1459c:	ldr	r4, [sp, #24]
   145a0:	subne	r4, r0, r6
   145a4:	cmp	sl, r4
   145a8:	bls	14640 <__assert_fail@plt+0x2e40>
   145ac:	mov	r8, r0
   145b0:	mov	r0, r7
   145b4:	mov	r1, r6
   145b8:	mov	r2, r4
   145bc:	bl	116b0 <strncpy@plt>
   145c0:	ldr	r0, [sp, #24]
   145c4:	sub	r0, r0, r4
   145c8:	add	r6, r6, r4
   145cc:	add	r7, r7, r4
   145d0:	sub	sl, sl, r4
   145d4:	cmp	r8, #0
   145d8:	str	r0, [sp, #24]
   145dc:	beq	14574 <__assert_fail@plt+0x2d74>
   145e0:	ldr	r1, [sp, #16]
   145e4:	cmp	sl, r1
   145e8:	bls	14640 <__assert_fail@plt+0x2e40>
   145ec:	mov	r4, r5
   145f0:	cmp	r9, #0
   145f4:	beq	1460c <__assert_fail@plt+0x2e0c>
   145f8:	mov	r0, r7
   145fc:	mov	r1, r9
   14600:	bl	11584 <strcpy@plt>
   14604:	ldr	r0, [fp, #12]
   14608:	add	r7, r7, r0
   1460c:	ldr	r0, [sp, #16]
   14610:	sub	sl, sl, r0
   14614:	mov	r0, r7
   14618:	ldr	r1, [fp, #16]
   1461c:	bl	11584 <strcpy@plt>
   14620:	add	r7, r7, r4
   14624:	ldr	r0, [sp, #20]
   14628:	ldr	r0, [r0, #20]
   1462c:	ldr	r1, [sp, #24]
   14630:	sub	r1, r1, r0
   14634:	str	r1, [sp, #24]
   14638:	add	r6, r6, r0
   1463c:	b	14578 <__assert_fail@plt+0x2d78>
   14640:	ldrb	r0, [r6]
   14644:	cmp	r0, #0
   14648:	bne	1468c <__assert_fail@plt+0x2e8c>
   1464c:	mov	r0, #0
   14650:	strb	r0, [r7]
   14654:	movw	r1, #53908	; 0xd294
   14658:	movt	r1, #2
   1465c:	ldr	r2, [r1]
   14660:	str	r0, [sp]
   14664:	str	r0, [sp, #4]
   14668:	ldr	r0, [fp, #24]
   1466c:	str	r0, [sp, #8]
   14670:	sub	r0, r7, r2
   14674:	add	r3, r0, #1
   14678:	ldr	r0, [sp, #20]
   1467c:	ldr	r1, [sp, #12]
   14680:	bl	146b0 <__assert_fail@plt+0x2eb0>
   14684:	sub	sp, fp, #28
   14688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1468c:	movw	r1, #47104	; 0xb800
   14690:	movt	r1, #1
   14694:	mov	r0, #0
   14698:	mov	r2, #5
   1469c:	bl	114dc <dcgettext@plt>
   146a0:	mov	r2, r0
   146a4:	mov	r0, #1
   146a8:	mov	r1, #0
   146ac:	bl	115a8 <error@plt>
   146b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146b4:	add	fp, sp, #28
   146b8:	sub	sp, sp, #4
   146bc:	cmp	r2, #0
   146c0:	beq	14880 <__assert_fail@plt+0x3080>
   146c4:	mov	r9, r3
   146c8:	mov	sl, r2
   146cc:	mov	r4, r1
   146d0:	mov	r6, r0
   146d4:	ldr	r8, [fp, #16]
   146d8:	ldr	r0, [fp, #12]
   146dc:	movw	r5, #47943	; 0xbb47
   146e0:	movt	r5, #1
   146e4:	cmp	r2, r5
   146e8:	beq	14774 <__assert_fail@plt+0x2f74>
   146ec:	add	r0, r0, r9
   146f0:	ldr	r1, [r4, #16]
   146f4:	add	r0, r0, r1
   146f8:	ldr	r1, [r6, #12]
   146fc:	cmp	r0, r1
   14700:	bls	14754 <__assert_fail@plt+0x2f54>
   14704:	cmp	r8, #0
   14708:	bne	148a0 <__assert_fail@plt+0x30a0>
   1470c:	ldr	r0, [r6, #28]
   14710:	ldr	r1, [r4]
   14714:	cmp	r1, r0
   14718:	beq	148a0 <__assert_fail@plt+0x30a0>
   1471c:	ldr	r0, [r6, #24]
   14720:	cmp	r0, #0
   14724:	bne	148ac <__assert_fail@plt+0x30ac>
   14728:	ldr	r0, [r6]
   1472c:	cmp	r0, #0
   14730:	beq	14748 <__assert_fail@plt+0x2f48>
   14734:	ldr	r0, [r6, #36]	; 0x24
   14738:	cmp	r0, #0
   1473c:	ldreq	r0, [r6, #40]	; 0x28
   14740:	cmpeq	r0, #0
   14744:	bne	148ac <__assert_fail@plt+0x30ac>
   14748:	mov	r0, r6
   1474c:	mov	r1, r4
   14750:	bl	148d0 <__assert_fail@plt+0x30d0>
   14754:	mov	r0, r8
   14758:	mov	r1, r6
   1475c:	mov	r2, r4
   14760:	bl	14c0c <__assert_fail@plt+0x340c>
   14764:	cmp	r0, #0
   14768:	movne	r0, r6
   1476c:	movne	r1, r4
   14770:	blne	148d0 <__assert_fail@plt+0x30d0>
   14774:	cmp	r8, #0
   14778:	moveq	r0, #1
   1477c:	streq	r0, [r4, #28]
   14780:	ldr	r0, [r4]
   14784:	ldr	r1, [r4, #8]
   14788:	cmp	r0, r1
   1478c:	bcc	147c8 <__assert_fail@plt+0x2fc8>
   14790:	ldr	r0, [r4, #4]
   14794:	cmp	r0, #0
   14798:	beq	147b4 <__assert_fail@plt+0x2fb4>
   1479c:	lsl	r0, r1, #1
   147a0:	str	r0, [r4, #8]
   147a4:	ldr	r0, [r4, #4]
   147a8:	lsl	r1, r1, #3
   147ac:	bl	18a28 <__assert_fail@plt+0x7228>
   147b0:	b	147c4 <__assert_fail@plt+0x2fc4>
   147b4:	mov	r0, #64	; 0x40
   147b8:	str	r0, [r4, #8]
   147bc:	mov	r0, #256	; 0x100
   147c0:	bl	189e8 <__assert_fail@plt+0x71e8>
   147c4:	str	r0, [r4, #4]
   147c8:	cmp	sl, r5
   147cc:	beq	14858 <__assert_fail@plt+0x3058>
   147d0:	ldr	r1, [fp, #8]
   147d4:	ldm	r4, {r2, r3}
   147d8:	ldr	r7, [r4, #12]
   147dc:	ldr	r0, [r4, #16]
   147e0:	add	r5, r2, #1
   147e4:	str	r5, [r4]
   147e8:	add	r7, r7, r0
   147ec:	str	r7, [r3, r2, lsl #2]
   147f0:	cmp	r1, #0
   147f4:	beq	14814 <__assert_fail@plt+0x3014>
   147f8:	ldr	r2, [r4, #12]
   147fc:	add	r0, r2, r0
   14800:	bl	11584 <strcpy@plt>
   14804:	ldr	r0, [r4, #16]
   14808:	ldr	r1, [fp, #12]
   1480c:	add	r0, r0, r1
   14810:	str	r0, [r4, #16]
   14814:	ldr	r0, [r4, #12]
   14818:	ldr	r1, [r4, #16]
   1481c:	add	r0, r0, r1
   14820:	mov	r1, sl
   14824:	bl	11584 <strcpy@plt>
   14828:	ldr	r0, [r4, #16]
   1482c:	add	r0, r0, r9
   14830:	str	r0, [r4, #16]
   14834:	mov	r0, r8
   14838:	mov	r1, r6
   1483c:	mov	r2, r4
   14840:	bl	14c0c <__assert_fail@plt+0x340c>
   14844:	cmp	r0, #0
   14848:	movne	r0, r6
   1484c:	movne	r1, r4
   14850:	blne	148d0 <__assert_fail@plt+0x30d0>
   14854:	b	1486c <__assert_fail@plt+0x306c>
   14858:	ldm	r4, {r0, r1}
   1485c:	add	r2, r0, #1
   14860:	str	r2, [r4]
   14864:	mov	r2, #0
   14868:	str	r2, [r1, r0, lsl #2]
   1486c:	cmp	r8, #0
   14870:	ldrne	r0, [r4, #16]
   14874:	strne	r0, [r4, #20]
   14878:	sub	sp, fp, #28
   1487c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14880:	movw	r0, #47315	; 0xb8d3
   14884:	movt	r0, #1
   14888:	movw	r1, #47141	; 0xb825
   1488c:	movt	r1, #1
   14890:	movw	r3, #47327	; 0xb8df
   14894:	movt	r3, #1
   14898:	movw	r2, #341	; 0x155
   1489c:	bl	11800 <__assert_fail@plt>
   148a0:	movw	r1, #47445	; 0xb955
   148a4:	movt	r1, #1
   148a8:	b	148b4 <__assert_fail@plt+0x30b4>
   148ac:	movw	r1, #47504	; 0xb990
   148b0:	movt	r1, #1
   148b4:	mov	r0, #0
   148b8:	mov	r2, #5
   148bc:	bl	114dc <dcgettext@plt>
   148c0:	mov	r2, r0
   148c4:	mov	r0, #1
   148c8:	mov	r1, #0
   148cc:	bl	115a8 <error@plt>
   148d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148d4:	add	fp, sp, #28
   148d8:	sub	sp, sp, #4
   148dc:	mov	r9, r1
   148e0:	mov	r5, r0
   148e4:	bl	14a48 <__assert_fail@plt+0x3248>
   148e8:	ldr	r0, [r9]
   148ec:	cmp	r0, #0
   148f0:	beq	14a08 <__assert_fail@plt+0x3208>
   148f4:	ldr	r1, [r9, #4]
   148f8:	add	r1, r1, r0, lsl #2
   148fc:	ldr	r1, [r1, #-4]
   14900:	cmp	r1, #0
   14904:	bne	14a28 <__assert_fail@plt+0x3228>
   14908:	mov	r1, #4
   1490c:	add	r0, r1, r0, lsl #2
   14910:	bl	189e8 <__assert_fail@plt+0x71e8>
   14914:	mov	r8, r0
   14918:	ldr	r7, [r9]
   1491c:	mov	sl, #0
   14920:	b	14960 <__assert_fail@plt+0x3160>
   14924:	mov	r0, r5
   14928:	mov	r1, r9
   1492c:	mov	r2, #1
   14930:	mov	r3, r7
   14934:	bl	14b34 <__assert_fail@plt+0x3334>
   14938:	mov	r7, r0
   1493c:	add	r0, r6, sl
   14940:	ldr	r1, [r5, #28]
   14944:	sub	sl, r0, r1
   14948:	ldr	r0, [r5, #28]
   1494c:	ldr	r1, [r9]
   14950:	sub	r0, r1, r0
   14954:	add	r1, sl, #1
   14958:	cmp	r1, r0
   1495c:	bcs	149c8 <__assert_fail@plt+0x31c8>
   14960:	str	sl, [sp]
   14964:	mov	r0, r5
   14968:	mov	r1, r9
   1496c:	mov	r2, r8
   14970:	mov	r3, r7
   14974:	bl	14a7c <__assert_fail@plt+0x327c>
   14978:	mov	r6, r0
   1497c:	ldr	r4, [r5, #32]
   14980:	ldr	r1, [r9, #24]
   14984:	mov	r0, r5
   14988:	mov	r2, r6
   1498c:	mov	r3, r8
   14990:	blx	r4
   14994:	cmp	r0, #0
   14998:	bne	14924 <__assert_fail@plt+0x3124>
   1499c:	ldr	r0, [r5, #28]
   149a0:	add	r0, r0, #1
   149a4:	cmp	r7, r0
   149a8:	bls	149e4 <__assert_fail@plt+0x31e4>
   149ac:	mov	r0, r5
   149b0:	mov	r1, r9
   149b4:	mov	r2, #0
   149b8:	mov	r3, r7
   149bc:	bl	14b34 <__assert_fail@plt+0x3334>
   149c0:	mov	r7, r0
   149c4:	b	14948 <__assert_fail@plt+0x3148>
   149c8:	mov	r0, r8
   149cc:	bl	1955c <__assert_fail@plt+0x7d5c>
   149d0:	mov	r0, r5
   149d4:	mov	r1, r9
   149d8:	sub	sp, fp, #28
   149dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149e0:	b	14be8 <__assert_fail@plt+0x33e8>
   149e4:	movw	r1, #47263	; 0xb89f
   149e8:	movt	r1, #1
   149ec:	mov	r0, #0
   149f0:	mov	r2, #5
   149f4:	bl	114dc <dcgettext@plt>
   149f8:	mov	r2, r0
   149fc:	mov	r0, #1
   14a00:	mov	r1, #0
   14a04:	bl	115a8 <error@plt>
   14a08:	movw	r0, #47121	; 0xb811
   14a0c:	movt	r0, #1
   14a10:	movw	r1, #47141	; 0xb825
   14a14:	movt	r1, #1
   14a18:	movw	r3, #47152	; 0xb830
   14a1c:	movt	r3, #1
   14a20:	movw	r2, #261	; 0x105
   14a24:	bl	11800 <__assert_fail@plt>
   14a28:	movw	r0, #47220	; 0xb874
   14a2c:	movt	r0, #1
   14a30:	movw	r1, #47141	; 0xb825
   14a34:	movt	r1, #1
   14a38:	movw	r3, #47152	; 0xb830
   14a3c:	movt	r3, #1
   14a40:	movw	r2, #262	; 0x106
   14a44:	bl	11800 <__assert_fail@plt>
   14a48:	push	{fp, lr}
   14a4c:	mov	fp, sp
   14a50:	sub	sp, sp, #16
   14a54:	mov	r2, #0
   14a58:	str	r2, [sp]
   14a5c:	str	r2, [sp, #4]
   14a60:	str	r2, [sp, #8]
   14a64:	movw	r2, #47943	; 0xbb47
   14a68:	movt	r2, #1
   14a6c:	mov	r3, #0
   14a70:	bl	146b0 <__assert_fail@plt+0x2eb0>
   14a74:	mov	sp, fp
   14a78:	pop	{fp, pc}
   14a7c:	push	{r4, r5, fp, lr}
   14a80:	add	fp, sp, #8
   14a84:	ldr	r4, [r0, #28]
   14a88:	cmp	r4, #0
   14a8c:	beq	14abc <__assert_fail@plt+0x32bc>
   14a90:	ldr	ip, [r0, #28]
   14a94:	mov	r0, #0
   14a98:	ldr	r4, [r1, #4]
   14a9c:	ldr	r4, [r4, r0, lsl #2]
   14aa0:	str	r4, [r2, r0, lsl #2]
   14aa4:	add	r0, r0, #1
   14aa8:	cmp	r0, ip
   14aac:	bcc	14a98 <__assert_fail@plt+0x3298>
   14ab0:	cmp	r0, r3
   14ab4:	bcc	14acc <__assert_fail@plt+0x32cc>
   14ab8:	b	14b04 <__assert_fail@plt+0x3304>
   14abc:	mov	r0, #0
   14ac0:	mov	ip, #0
   14ac4:	cmp	r0, r3
   14ac8:	bcs	14b04 <__assert_fail@plt+0x3304>
   14acc:	ldr	r4, [fp, #8]
   14ad0:	add	lr, r0, r4
   14ad4:	ldr	r4, [r1]
   14ad8:	cmp	lr, r4
   14adc:	bcs	14b04 <__assert_fail@plt+0x3304>
   14ae0:	ldr	r4, [r1]
   14ae4:	ldr	r5, [r1, #4]
   14ae8:	ldr	r5, [r5, lr, lsl #2]
   14aec:	str	r5, [r2, r0, lsl #2]
   14af0:	add	r0, r0, #1
   14af4:	cmp	r0, r3
   14af8:	addcc	lr, lr, #1
   14afc:	cmpcc	lr, r4
   14b00:	bcc	14ae4 <__assert_fail@plt+0x32e4>
   14b04:	cmp	r0, ip
   14b08:	movcs	r1, #0
   14b0c:	strcs	r1, [r2, r0, lsl #2]
   14b10:	popcs	{r4, r5, fp, pc}
   14b14:	movw	r0, #47820	; 0xbacc
   14b18:	movt	r0, #1
   14b1c:	movw	r1, #47141	; 0xb825
   14b20:	movt	r1, #1
   14b24:	movw	r3, #47849	; 0xbae9
   14b28:	movt	r3, #1
   14b2c:	mov	r2, #242	; 0xf2
   14b30:	bl	11800 <__assert_fail@plt>
   14b34:	cmp	r2, #0
   14b38:	beq	14b4c <__assert_fail@plt+0x334c>
   14b3c:	ldr	ip, [r1, #36]	; 0x24
   14b40:	cmp	ip, r3
   14b44:	strcc	r3, [r1, #36]	; 0x24
   14b48:	b	14b5c <__assert_fail@plt+0x335c>
   14b4c:	ldr	ip, [r1, #40]	; 0x28
   14b50:	sub	ip, ip, #1
   14b54:	cmp	ip, r3
   14b58:	strcs	r3, [r1, #40]	; 0x28
   14b5c:	ldr	ip, [r1, #36]	; 0x24
   14b60:	cmp	ip, #0
   14b64:	beq	14b94 <__assert_fail@plt+0x3394>
   14b68:	ldr	r1, [r1, #40]	; 0x28
   14b6c:	cmp	r1, ip
   14b70:	bls	14b94 <__assert_fail@plt+0x3394>
   14b74:	sub	r1, r1, ip
   14b78:	lsr	r1, r1, #1
   14b7c:	cmp	r2, #0
   14b80:	beq	14bb0 <__assert_fail@plt+0x33b0>
   14b84:	cmp	r1, #0
   14b88:	addeq	r1, r3, #1
   14b8c:	addne	r1, r1, r3
   14b90:	b	14bbc <__assert_fail@plt+0x33bc>
   14b94:	cmp	r2, #0
   14b98:	beq	14ba8 <__assert_fail@plt+0x33a8>
   14b9c:	adds	r1, r3, #1
   14ba0:	mvncs	r1, #0
   14ba4:	b	14bbc <__assert_fail@plt+0x33bc>
   14ba8:	lsr	r1, r3, #1
   14bac:	b	14bbc <__assert_fail@plt+0x33bc>
   14bb0:	cmp	r1, #0
   14bb4:	subeq	r1, r3, #1
   14bb8:	subne	r1, r3, r1
   14bbc:	ldr	r0, [r0, #28]
   14bc0:	cmp	r0, #0
   14bc4:	beq	14bd8 <__assert_fail@plt+0x33d8>
   14bc8:	add	r0, r0, #1
   14bcc:	cmp	r1, r0
   14bd0:	movhi	r0, r1
   14bd4:	b	14bdc <__assert_fail@plt+0x33dc>
   14bd8:	mov	r0, r1
   14bdc:	cmp	r0, #0
   14be0:	movweq	r0, #1
   14be4:	bx	lr
   14be8:	ldr	r0, [r0, #28]
   14bec:	mvn	r2, #0
   14bf0:	mov	r3, #0
   14bf4:	str	r3, [r1, #28]
   14bf8:	str	r2, [r1, #32]
   14bfc:	str	r0, [r1]
   14c00:	ldr	r0, [r1, #20]
   14c04:	str	r0, [r1, #16]
   14c08:	bx	lr
   14c0c:	cmp	r0, #0
   14c10:	bne	14c38 <__assert_fail@plt+0x3438>
   14c14:	ldr	r3, [r1, #40]	; 0x28
   14c18:	cmp	r3, #0
   14c1c:	beq	14c38 <__assert_fail@plt+0x3438>
   14c20:	ldr	ip, [r1, #28]
   14c24:	ldr	r0, [r2]
   14c28:	sub	ip, r0, ip
   14c2c:	mov	r0, #1
   14c30:	cmp	ip, r3
   14c34:	bxeq	lr
   14c38:	ldr	r0, [r1, #16]
   14c3c:	ldr	r1, [r2]
   14c40:	sub	r0, r1, r0
   14c44:	clz	r0, r0
   14c48:	lsr	r0, r0, #5
   14c4c:	bx	lr
   14c50:	push	{fp, lr}
   14c54:	mov	fp, sp
   14c58:	mov	r0, #0
   14c5c:	bl	114e8 <sysconf@plt>
   14c60:	cmp	r0, #0
   14c64:	mvnle	r0, #-2147483648	; 0x80000000
   14c68:	pop	{fp, pc}
   14c6c:	push	{r4, r5, fp, lr}
   14c70:	add	fp, sp, #8
   14c74:	movw	r0, #53692	; 0xd1bc
   14c78:	movt	r0, #2
   14c7c:	ldr	r1, [r0]
   14c80:	ldr	r0, [r1]
   14c84:	cmp	r0, #0
   14c88:	beq	14cb4 <__assert_fail@plt+0x34b4>
   14c8c:	add	r5, r1, #4
   14c90:	mov	r4, #0
   14c94:	bl	11650 <strlen@plt>
   14c98:	add	r0, r4, r0
   14c9c:	add	r4, r0, #1
   14ca0:	ldr	r0, [r5], #4
   14ca4:	cmp	r0, #0
   14ca8:	bne	14c94 <__assert_fail@plt+0x3494>
   14cac:	mov	r0, r4
   14cb0:	pop	{r4, r5, fp, pc}
   14cb4:	mov	r4, #0
   14cb8:	mov	r0, r4
   14cbc:	pop	{r4, r5, fp, pc}
   14cc0:	push	{r4, r5, r6, sl, fp, lr}
   14cc4:	add	fp, sp, #16
   14cc8:	mov	r5, r1
   14ccc:	mov	r4, r0
   14cd0:	bl	14c6c <__assert_fail@plt+0x346c>
   14cd4:	mov	r6, r0
   14cd8:	mov	r0, #4096	; 0x1000
   14cdc:	str	r0, [r4, #8]
   14ce0:	bl	14c50 <__assert_fail@plt+0x3450>
   14ce4:	mov	r1, r0
   14ce8:	mov	r0, #0
   14cec:	stm	r4, {r0, r1}
   14cf0:	mov	r0, #1
   14cf4:	cmp	r1, r6
   14cf8:	bcc	14d54 <__assert_fail@plt+0x3554>
   14cfc:	add	r2, r6, r5
   14d00:	mov	r0, #2
   14d04:	cmp	r2, r1
   14d08:	bcs	14d54 <__assert_fail@plt+0x3554>
   14d0c:	sub	r0, r1, r6
   14d10:	sub	r1, r0, r5
   14d14:	str	r1, [r4, #4]
   14d18:	mvn	r0, #1
   14d1c:	add	r0, r0, r1, lsr #2
   14d20:	str	r0, [r4, #16]
   14d24:	cmp	r0, #0
   14d28:	beq	14d58 <__assert_fail@plt+0x3558>
   14d2c:	mov	r0, #0
   14d30:	movw	r2, #19832	; 0x4d78
   14d34:	movt	r2, #1
   14d38:	str	r0, [r4, #20]
   14d3c:	str	r0, [r4, #24]
   14d40:	str	r0, [r4, #28]
   14d44:	str	r2, [r4, #32]
   14d48:	str	r0, [r4, #36]	; 0x24
   14d4c:	str	r0, [r4, #40]	; 0x28
   14d50:	str	r1, [r4, #12]
   14d54:	pop	{r4, r5, r6, sl, fp, pc}
   14d58:	movw	r0, #47527	; 0xb9a7
   14d5c:	movt	r0, #1
   14d60:	movw	r1, #47141	; 0xb825
   14d64:	movt	r1, #1
   14d68:	movw	r3, #47550	; 0xb9be
   14d6c:	movt	r3, #1
   14d70:	movw	r2, #518	; 0x206
   14d74:	bl	11800 <__assert_fail@plt>
   14d78:	mov	r0, #0
   14d7c:	bx	lr
   14d80:	ldr	r1, [r0, #4]
   14d84:	mov	r2, #0
   14d88:	cmp	r2, r1, lsr #17
   14d8c:	beq	14d9c <__assert_fail@plt+0x359c>
   14d90:	ldr	r1, [r0, #8]
   14d94:	cmp	r1, #131072	; 0x20000
   14d98:	movls	r1, #131072	; 0x20000
   14d9c:	str	r1, [r0, #12]
   14da0:	bx	lr
   14da4:	push	{r4, r5, r6, sl, fp, lr}
   14da8:	add	fp, sp, #16
   14dac:	mov	r4, r1
   14db0:	mov	r6, #0
   14db4:	str	r6, [r1, #16]
   14db8:	str	r6, [r1, #36]	; 0x24
   14dbc:	str	r6, [r1, #40]	; 0x28
   14dc0:	str	r6, [r1]
   14dc4:	str	r6, [r1, #4]
   14dc8:	str	r6, [r1, #8]
   14dcc:	ldr	r0, [r0, #12]
   14dd0:	movw	r1, #63488	; 0xf800
   14dd4:	movt	r1, #32767	; 0x7fff
   14dd8:	cmp	r0, r1
   14ddc:	bcs	14e0c <__assert_fail@plt+0x360c>
   14de0:	mov	r5, r2
   14de4:	add	r0, r0, #1
   14de8:	bl	189e8 <__assert_fail@plt+0x71e8>
   14dec:	mvn	r1, #0
   14df0:	str	r0, [r4, #12]
   14df4:	str	r6, [r4, #16]
   14df8:	str	r6, [r4, #20]
   14dfc:	str	r5, [r4, #24]
   14e00:	str	r6, [r4, #28]
   14e04:	str	r1, [r4, #32]
   14e08:	pop	{r4, r5, r6, sl, fp, pc}
   14e0c:	movw	r0, #47625	; 0xba09
   14e10:	movt	r0, #1
   14e14:	movw	r1, #47141	; 0xb825
   14e18:	movt	r1, #1
   14e1c:	movw	r3, #47660	; 0xba2c
   14e20:	movt	r3, #1
   14e24:	mov	r2, #572	; 0x23c
   14e28:	bl	11800 <__assert_fail@plt>
   14e2c:	push	{r4, r5, r6, sl, fp, lr}
   14e30:	add	fp, sp, #16
   14e34:	mov	r1, r0
   14e38:	ldr	r0, [r0]
   14e3c:	cmp	r0, #0
   14e40:	beq	14e6c <__assert_fail@plt+0x366c>
   14e44:	add	r6, r1, #4
   14e48:	mov	r5, #0
   14e4c:	mov	r4, #0
   14e50:	bl	11650 <strlen@plt>
   14e54:	add	r4, r0, r4
   14e58:	ldr	r0, [r6, r5, lsl #2]
   14e5c:	add	r5, r5, #1
   14e60:	cmp	r0, #0
   14e64:	bne	14e50 <__assert_fail@plt+0x3650>
   14e68:	b	14e74 <__assert_fail@plt+0x3674>
   14e6c:	mov	r4, #0
   14e70:	mov	r5, #0
   14e74:	movw	r0, #47745	; 0xba81
   14e78:	movt	r0, #1
   14e7c:	mov	r1, r5
   14e80:	bl	14eb0 <__assert_fail@plt+0x36b0>
   14e84:	mov	r1, r0
   14e88:	mov	r0, #1
   14e8c:	cmp	r1, #0
   14e90:	popne	{r4, r5, r6, sl, fp, pc}
   14e94:	movw	r0, #47782	; 0xbaa6
   14e98:	movt	r0, #1
   14e9c:	mov	r1, r4
   14ea0:	bl	14eb0 <__assert_fail@plt+0x36b0>
   14ea4:	cmp	r0, #0
   14ea8:	movwne	r0, #1
   14eac:	pop	{r4, r5, r6, sl, fp, pc}
   14eb0:	push	{r4, r5, fp, lr}
   14eb4:	add	fp, sp, #8
   14eb8:	sub	sp, sp, #16
   14ebc:	mov	r5, r1
   14ec0:	mov	r4, r0
   14ec4:	bl	115cc <getenv@plt>
   14ec8:	cmp	r0, #0
   14ecc:	beq	14f08 <__assert_fail@plt+0x3708>
   14ed0:	mov	r1, #0
   14ed4:	str	r1, [sp]
   14ed8:	add	r1, sp, #12
   14edc:	add	r3, sp, #8
   14ee0:	mov	r2, #10
   14ee4:	bl	18db4 <__assert_fail@plt+0x75b4>
   14ee8:	cmp	r0, #0
   14eec:	bne	14f14 <__assert_fail@plt+0x3714>
   14ef0:	ldr	r1, [sp, #8]
   14ef4:	mov	r0, #1
   14ef8:	cmp	r1, r5
   14efc:	movcs	r0, #0
   14f00:	sub	sp, fp, #8
   14f04:	pop	{r4, r5, fp, pc}
   14f08:	mov	r0, #0
   14f0c:	sub	sp, fp, #8
   14f10:	pop	{r4, r5, fp, pc}
   14f14:	bl	11680 <__errno_location@plt>
   14f18:	ldr	r5, [r0]
   14f1c:	movw	r1, #47955	; 0xbb53
   14f20:	movt	r1, #1
   14f24:	mov	r0, #0
   14f28:	mov	r2, #5
   14f2c:	bl	114dc <dcgettext@plt>
   14f30:	mov	r2, r0
   14f34:	mov	r0, #1
   14f38:	mov	r1, r5
   14f3c:	mov	r3, r4
   14f40:	bl	115a8 <error@plt>
   14f44:	push	{fp, lr}
   14f48:	mov	fp, sp
   14f4c:	sub	sp, sp, #16
   14f50:	bl	14fa0 <__assert_fail@plt+0x37a0>
   14f54:	mov	r1, #0
   14f58:	str	r1, [sp, #12]
   14f5c:	str	r1, [sp, #4]
   14f60:	str	r1, [sp, #8]
   14f64:	cmn	r0, #-2147483647	; 0x80000001
   14f68:	addne	r0, r0, #1
   14f6c:	movw	r1, #20720	; 0x50f0
   14f70:	movt	r1, #1
   14f74:	add	r2, sp, #4
   14f78:	bl	15000 <__assert_fail@plt+0x3800>
   14f7c:	ldmib	sp, {r0, r1}
   14f80:	movw	r2, #53912	; 0xd298
   14f84:	movt	r2, #2
   14f88:	str	r0, [r2]
   14f8c:	movw	r0, #53916	; 0xd29c
   14f90:	movt	r0, #2
   14f94:	str	r1, [r0]
   14f98:	mov	sp, fp
   14f9c:	pop	{fp, pc}
   14fa0:	push	{r4, sl, fp, lr}
   14fa4:	add	fp, sp, #8
   14fa8:	sub	sp, sp, #16
   14fac:	bl	1536c <__assert_fail@plt+0x3b6c>
   14fb0:	mov	r4, r0
   14fb4:	cmn	r0, #1
   14fb8:	bgt	14ff4 <__assert_fail@plt+0x37f4>
   14fbc:	mov	r0, #4
   14fc0:	bl	114e8 <sysconf@plt>
   14fc4:	mov	r4, r0
   14fc8:	mov	r1, sp
   14fcc:	mov	r0, #7
   14fd0:	bl	11500 <getrlimit64@plt>
   14fd4:	cmn	r4, #1
   14fd8:	movweq	r4, #20
   14fdc:	cmp	r0, #0
   14fe0:	bne	14ff4 <__assert_fail@plt+0x37f4>
   14fe4:	ldm	sp, {r0, r1}
   14fe8:	and	r1, r0, r1
   14fec:	cmn	r1, #1
   14ff0:	movne	r4, r0
   14ff4:	mov	r0, r4
   14ff8:	sub	sp, fp, #8
   14ffc:	pop	{r4, sl, fp, pc}
   15000:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15004:	add	fp, sp, #28
   15008:	sub	sp, sp, #532	; 0x214
   1500c:	str	r2, [sp, #12]
   15010:	str	r0, [sp, #8]
   15014:	cmp	r0, #1
   15018:	blt	150e8 <__assert_fail@plt+0x38e8>
   1501c:	mov	r5, r1
   15020:	add	r0, sp, #16
   15024:	add	r1, r0, #6
   15028:	str	r1, [sp]
   1502c:	add	r0, r0, #4
   15030:	str	r0, [sp, #4]
   15034:	mov	r9, #0
   15038:	mov	r8, #5
   1503c:	b	15050 <__assert_fail@plt+0x3850>
   15040:	add	r9, r7, r9
   15044:	ldr	r0, [sp, #8]
   15048:	cmp	r9, r0
   1504c:	bge	150e8 <__assert_fail@plt+0x38e8>
   15050:	ldr	r0, [sp, #8]
   15054:	sub	sl, r0, r9
   15058:	cmp	sl, #64	; 0x40
   1505c:	mov	r7, sl
   15060:	movge	r7, #64	; 0x40
   15064:	cmp	sl, #1
   15068:	blt	1508c <__assert_fail@plt+0x388c>
   1506c:	mov	r0, #0
   15070:	ldr	r1, [sp, #4]
   15074:	add	r2, r9, r0
   15078:	stmda	r1, {r2, r8}
   1507c:	add	r1, r1, #8
   15080:	add	r0, r0, #1
   15084:	cmp	r0, r7
   15088:	blt	15074 <__assert_fail@plt+0x3874>
   1508c:	add	r0, sp, #16
   15090:	mov	r1, r7
   15094:	mov	r2, #0
   15098:	bl	1153c <poll@plt>
   1509c:	cmn	r0, #1
   150a0:	beq	150e8 <__assert_fail@plt+0x38e8>
   150a4:	cmp	sl, #1
   150a8:	blt	15040 <__assert_fail@plt+0x3840>
   150ac:	mov	r6, #0
   150b0:	ldr	r4, [sp]
   150b4:	b	150c8 <__assert_fail@plt+0x38c8>
   150b8:	add	r4, r4, #8
   150bc:	add	r6, r6, #1
   150c0:	cmp	r6, r7
   150c4:	bge	15040 <__assert_fail@plt+0x3840>
   150c8:	ldrh	r0, [r4]
   150cc:	cmp	r0, #32
   150d0:	beq	150b8 <__assert_fail@plt+0x38b8>
   150d4:	ldr	r0, [r4, #-6]
   150d8:	ldr	r1, [sp, #12]
   150dc:	blx	r5
   150e0:	cmp	r0, #0
   150e4:	beq	150b8 <__assert_fail@plt+0x38b8>
   150e8:	sub	sp, fp, #28
   150ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150f0:	push	{r4, r5, r6, sl, fp, lr}
   150f4:	add	fp, sp, #16
   150f8:	mov	r5, r1
   150fc:	mov	r6, r0
   15100:	bl	15484 <__assert_fail@plt+0x3c84>
   15104:	mov	r4, #0
   15108:	cmp	r0, #0
   1510c:	beq	15118 <__assert_fail@plt+0x3918>
   15110:	mov	r0, r4
   15114:	pop	{r4, r5, r6, sl, fp, pc}
   15118:	ldm	r5, {r0, r1}
   1511c:	mov	r2, #4
   15120:	add	r1, r2, r1, lsl #2
   15124:	add	r2, r5, #8
   15128:	bl	15734 <__assert_fail@plt+0x3f34>
   1512c:	cmp	r0, #0
   15130:	beq	15154 <__assert_fail@plt+0x3954>
   15134:	str	r0, [r5]
   15138:	ldr	r1, [r5, #4]
   1513c:	str	r6, [r0, r1, lsl #2]
   15140:	ldr	r0, [r5, #4]
   15144:	add	r0, r0, #1
   15148:	str	r0, [r5, #4]
   1514c:	mov	r0, r4
   15150:	pop	{r4, r5, r6, sl, fp, pc}
   15154:	mvn	r4, #0
   15158:	mov	r0, r4
   1515c:	pop	{r4, r5, r6, sl, fp, pc}
   15160:	sub	sp, sp, #8
   15164:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15168:	add	fp, sp, #24
   1516c:	sub	sp, sp, #8
   15170:	mov	r5, r1
   15174:	mov	r4, r0
   15178:	str	r2, [fp, #8]
   1517c:	str	r3, [fp, #12]
   15180:	mov	r6, #0
   15184:	tst	r1, #64	; 0x40
   15188:	ldrne	r6, [fp, #8]
   1518c:	movw	r7, #53921	; 0xd2a1
   15190:	movt	r7, #2
   15194:	ldrb	r0, [r7]
   15198:	cmp	r0, #0
   1519c:	movw	r8, #53920	; 0xd2a0
   151a0:	movt	r8, #2
   151a4:	bne	151b8 <__assert_fail@plt+0x39b8>
   151a8:	bl	15200 <__assert_fail@plt+0x3a00>
   151ac:	strb	r0, [r8]
   151b0:	mov	r0, #1
   151b4:	strb	r0, [r7]
   151b8:	orr	r1, r5, #524288	; 0x80000
   151bc:	mov	r0, r4
   151c0:	mov	r2, r6
   151c4:	bl	15b84 <__assert_fail@plt+0x4384>
   151c8:	mov	r4, r0
   151cc:	cmp	r0, #0
   151d0:	bmi	151ec <__assert_fail@plt+0x39ec>
   151d4:	ldrb	r0, [r8]
   151d8:	cmp	r0, #0
   151dc:	bne	151ec <__assert_fail@plt+0x39ec>
   151e0:	mov	r0, r4
   151e4:	mov	r1, #1
   151e8:	bl	1585c <__assert_fail@plt+0x405c>
   151ec:	mov	r0, r4
   151f0:	sub	sp, fp, #24
   151f4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   151f8:	add	sp, sp, #8
   151fc:	bx	lr
   15200:	push	{r4, r5, fp, lr}
   15204:	add	fp, sp, #8
   15208:	movw	r0, #49905	; 0xc2f1
   1520c:	movt	r0, #1
   15210:	mov	r1, #524288	; 0x80000
   15214:	bl	15b84 <__assert_fail@plt+0x4384>
   15218:	cmp	r0, #0
   1521c:	bmi	15244 <__assert_fail@plt+0x3a44>
   15220:	mov	r5, r0
   15224:	bl	15484 <__assert_fail@plt+0x3c84>
   15228:	mov	r4, r0
   1522c:	mov	r0, r5
   15230:	bl	117e8 <close@plt>
   15234:	cmp	r4, #0
   15238:	movwne	r4, #1
   1523c:	mov	r0, r4
   15240:	pop	{r4, r5, fp, pc}
   15244:	mov	r4, #0
   15248:	mov	r0, r4
   1524c:	pop	{r4, r5, fp, pc}
   15250:	push	{r4, sl, fp, lr}
   15254:	add	fp, sp, #8
   15258:	movw	r4, #53912	; 0xd298
   1525c:	movt	r4, #2
   15260:	ldr	r0, [r4]
   15264:	bl	1955c <__assert_fail@plt+0x7d5c>
   15268:	movw	r0, #53916	; 0xd29c
   1526c:	movt	r0, #2
   15270:	mov	r1, #0
   15274:	str	r1, [r0]
   15278:	str	r1, [r4]
   1527c:	pop	{r4, sl, fp, pc}
   15280:	push	{fp, lr}
   15284:	mov	fp, sp
   15288:	movw	r0, #48016	; 0xbb90
   1528c:	movt	r0, #1
   15290:	bl	115cc <getenv@plt>
   15294:	cmp	r0, #0
   15298:	movwne	r0, #1
   1529c:	pop	{fp, pc}
   152a0:	push	{r4, sl, fp, lr}
   152a4:	add	fp, sp, #8
   152a8:	movw	r0, #53916	; 0xd29c
   152ac:	movt	r0, #2
   152b0:	ldr	r1, [r0]
   152b4:	movw	r0, #53912	; 0xd298
   152b8:	movt	r0, #2
   152bc:	ldr	r0, [r0]
   152c0:	bl	15318 <__assert_fail@plt+0x3b18>
   152c4:	cmp	r0, #0
   152c8:	popmi	{r4, sl, fp, pc}
   152cc:	mov	r4, r0
   152d0:	movw	r1, #48044	; 0xbbac
   152d4:	movt	r1, #1
   152d8:	mov	r0, #0
   152dc:	mov	r2, #5
   152e0:	bl	114dc <dcgettext@plt>
   152e4:	mov	r2, r0
   152e8:	mov	r0, #0
   152ec:	mov	r1, #0
   152f0:	mov	r3, r4
   152f4:	bl	115a8 <error@plt>
   152f8:	movw	r0, #48196	; 0xbc44
   152fc:	movt	r0, #1
   15300:	movw	r1, #48205	; 0xbc4d
   15304:	movt	r1, #1
   15308:	movw	r3, #48214	; 0xbc56
   1530c:	movt	r3, #1
   15310:	mov	r2, #396	; 0x18c
   15314:	bl	11800 <__assert_fail@plt>
   15318:	push	{r4, r5, fp, lr}
   1531c:	add	fp, sp, #8
   15320:	sub	sp, sp, #16
   15324:	mov	r4, r1
   15328:	mov	r5, r0
   1532c:	bl	14fa0 <__assert_fail@plt+0x37a0>
   15330:	mvn	r1, #0
   15334:	str	r1, [sp, #12]
   15338:	mov	r1, #0
   1533c:	str	r1, [sp, #8]
   15340:	str	r4, [sp, #4]
   15344:	str	r5, [sp]
   15348:	cmn	r0, #-2147483647	; 0x80000001
   1534c:	addne	r0, r0, #1
   15350:	movw	r1, #21660	; 0x549c
   15354:	movt	r1, #1
   15358:	mov	r2, sp
   1535c:	bl	15000 <__assert_fail@plt+0x3800>
   15360:	ldr	r0, [sp, #12]
   15364:	sub	sp, fp, #8
   15368:	pop	{r4, r5, fp, pc}
   1536c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15370:	add	fp, sp, #24
   15374:	movw	r0, #48250	; 0xbc7a
   15378:	movt	r0, #1
   1537c:	bl	15aec <__assert_fail@plt+0x42ec>
   15380:	cmp	r0, #0
   15384:	beq	15460 <__assert_fail@plt+0x3c60>
   15388:	mov	r4, r0
   1538c:	bl	11680 <__errno_location@plt>
   15390:	mov	r6, r0
   15394:	mov	r7, #0
   15398:	str	r7, [r0]
   1539c:	mov	r0, r4
   153a0:	bl	11764 <readdir64@plt>
   153a4:	cmp	r0, #0
   153a8:	beq	1541c <__assert_fail@plt+0x3c1c>
   153ac:	mov	r8, #0
   153b0:	mvn	r5, #0
   153b4:	mov	r7, #0
   153b8:	b	153e8 <__assert_fail@plt+0x3be8>
   153bc:	mov	r0, r1
   153c0:	mov	r1, #0
   153c4:	bl	155bc <__assert_fail@plt+0x3dbc>
   153c8:	cmp	r0, r5
   153cc:	movgt	r5, r0
   153d0:	mov	r7, #1
   153d4:	str	r8, [r6]
   153d8:	mov	r0, r4
   153dc:	bl	11764 <readdir64@plt>
   153e0:	cmp	r0, #0
   153e4:	beq	15420 <__assert_fail@plt+0x3c20>
   153e8:	mov	r1, r0
   153ec:	ldrb	r2, [r1, #19]!
   153f0:	cmp	r2, #46	; 0x2e
   153f4:	bne	153bc <__assert_fail@plt+0x3bbc>
   153f8:	ldrb	r2, [r0, #20]
   153fc:	cmp	r2, #0
   15400:	beq	153d4 <__assert_fail@plt+0x3bd4>
   15404:	cmp	r2, #46	; 0x2e
   15408:	bne	153bc <__assert_fail@plt+0x3bbc>
   1540c:	ldrb	r0, [r0, #21]
   15410:	cmp	r0, #0
   15414:	bne	153bc <__assert_fail@plt+0x3bbc>
   15418:	b	153d4 <__assert_fail@plt+0x3bd4>
   1541c:	mvn	r5, #0
   15420:	ldr	r6, [r6]
   15424:	cmp	r6, #0
   15428:	beq	1546c <__assert_fail@plt+0x3c6c>
   1542c:	movw	r2, #48250	; 0xbc7a
   15430:	movt	r2, #1
   15434:	mov	r0, #0
   15438:	mov	r1, #8
   1543c:	bl	17d08 <__assert_fail@plt+0x6508>
   15440:	mov	r3, r0
   15444:	movw	r2, #48383	; 0xbcff
   15448:	movt	r2, #1
   1544c:	mov	r0, #0
   15450:	mov	r1, r6
   15454:	bl	115a8 <error@plt>
   15458:	mov	r0, r4
   1545c:	bl	117f4 <closedir@plt>
   15460:	mvn	r5, #0
   15464:	mov	r0, r5
   15468:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1546c:	mov	r0, r4
   15470:	bl	117f4 <closedir@plt>
   15474:	cmp	r7, #0
   15478:	mvneq	r5, #0
   1547c:	mov	r0, r5
   15480:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15484:	push	{fp, lr}
   15488:	mov	fp, sp
   1548c:	mov	r1, #1
   15490:	bl	192d0 <__assert_fail@plt+0x7ad0>
   15494:	and	r0, r0, #1
   15498:	pop	{fp, pc}
   1549c:	push	{r4, r5, fp, lr}
   154a0:	add	fp, sp, #8
   154a4:	mov	r4, r1
   154a8:	mov	r5, r0
   154ac:	bl	15484 <__assert_fail@plt+0x3c84>
   154b0:	mov	r1, r0
   154b4:	mov	r0, #0
   154b8:	cmp	r1, #0
   154bc:	beq	154c4 <__assert_fail@plt+0x3cc4>
   154c0:	pop	{r4, r5, fp, pc}
   154c4:	ldr	r2, [r4, #4]
   154c8:	ldr	r1, [r4, #8]
   154cc:	cmp	r1, r2
   154d0:	bcs	15500 <__assert_fail@plt+0x3d00>
   154d4:	ldr	r2, [r4]
   154d8:	ldr	r3, [r2, r1, lsl #2]
   154dc:	cmp	r3, r5
   154e0:	bge	154fc <__assert_fail@plt+0x3cfc>
   154e4:	add	r1, r1, #1
   154e8:	str	r1, [r4, #8]
   154ec:	ldr	r3, [r4, #4]
   154f0:	cmp	r1, r3
   154f4:	bcc	154d8 <__assert_fail@plt+0x3cd8>
   154f8:	b	15500 <__assert_fail@plt+0x3d00>
   154fc:	popeq	{r4, r5, fp, pc}
   15500:	str	r5, [r4, #12]
   15504:	mvn	r0, #0
   15508:	pop	{r4, r5, fp, pc}
   1550c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15510:	add	fp, sp, #24
   15514:	sub	sp, sp, #16
   15518:	mov	r8, r0
   1551c:	movw	r0, #53712	; 0xd1d0
   15520:	movt	r0, #2
   15524:	ldr	r0, [r0]
   15528:	bl	194b4 <__assert_fail@plt+0x7cb4>
   1552c:	movw	r0, #53724	; 0xd1dc
   15530:	movt	r0, #2
   15534:	ldr	r6, [r0]
   15538:	movw	r0, #53612	; 0xd16c
   1553c:	movt	r0, #2
   15540:	ldr	r5, [r0]
   15544:	mov	r9, #0
   15548:	movw	r1, #48292	; 0xbca4
   1554c:	movt	r1, #1
   15550:	mov	r0, #0
   15554:	mov	r2, #5
   15558:	bl	114dc <dcgettext@plt>
   1555c:	mov	r7, r0
   15560:	movw	r1, #48307	; 0xbcb3
   15564:	movt	r1, #1
   15568:	mov	r0, #0
   1556c:	mov	r2, #5
   15570:	bl	114dc <dcgettext@plt>
   15574:	mov	r4, r0
   15578:	movw	r1, #48322	; 0xbcc2
   1557c:	movt	r1, #1
   15580:	mov	r0, #0
   15584:	mov	r2, #5
   15588:	bl	114dc <dcgettext@plt>
   1558c:	str	r7, [sp]
   15590:	str	r4, [sp, #4]
   15594:	str	r0, [sp, #8]
   15598:	str	r9, [sp, #12]
   1559c:	movw	r2, #48278	; 0xbc96
   155a0:	movt	r2, #1
   155a4:	mov	r0, r6
   155a8:	mov	r1, r8
   155ac:	mov	r3, r5
   155b0:	bl	188fc <__assert_fail@plt+0x70fc>
   155b4:	sub	sp, fp, #24
   155b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   155bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   155c0:	add	fp, sp, #24
   155c4:	sub	sp, sp, #8
   155c8:	mov	r5, r1
   155cc:	mov	r4, r0
   155d0:	bl	11680 <__errno_location@plt>
   155d4:	mov	r6, r0
   155d8:	mov	r0, #0
   155dc:	str	r0, [r6]
   155e0:	add	r1, sp, #4
   155e4:	mov	r0, r4
   155e8:	mov	r2, #10
   155ec:	bl	1144c <strtol@plt>
   155f0:	add	r1, r0, #-2147483647	; 0x80000001
   155f4:	cmp	r1, #1
   155f8:	bls	15658 <__assert_fail@plt+0x3e58>
   155fc:	ldr	r7, [sp, #4]
   15600:	ldrb	r1, [r7]
   15604:	cmp	r1, #0
   15608:	bne	15670 <__assert_fail@plt+0x3e70>
   1560c:	cmp	r7, r4
   15610:	subne	sp, fp, #24
   15614:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   15618:	ldr	r6, [r6]
   1561c:	movw	r1, #48362	; 0xbcea
   15620:	movt	r1, #1
   15624:	mov	r0, #0
   15628:	mov	r2, #5
   1562c:	bl	114dc <dcgettext@plt>
   15630:	mov	r7, r0
   15634:	mov	r0, #0
   15638:	mov	r1, r5
   1563c:	mov	r2, r4
   15640:	bl	17d08 <__assert_fail@plt+0x6508>
   15644:	mov	r3, r0
   15648:	mov	r0, #1
   1564c:	mov	r1, r6
   15650:	mov	r2, r7
   15654:	bl	115a8 <error@plt>
   15658:	ldr	r1, [r6]
   1565c:	movw	r2, #48383	; 0xbcff
   15660:	movt	r2, #1
   15664:	mov	r0, #1
   15668:	mov	r3, r4
   1566c:	bl	115a8 <error@plt>
   15670:	ldr	r8, [r6]
   15674:	movw	r1, #48335	; 0xbccf
   15678:	movt	r1, #1
   1567c:	mov	r0, #0
   15680:	mov	r2, #5
   15684:	bl	114dc <dcgettext@plt>
   15688:	mov	r6, r0
   1568c:	mov	r0, #0
   15690:	mov	r1, r5
   15694:	mov	r2, r7
   15698:	bl	17d08 <__assert_fail@plt+0x6508>
   1569c:	mov	r7, r0
   156a0:	mov	r0, #1
   156a4:	mov	r1, r5
   156a8:	mov	r2, r4
   156ac:	bl	17d08 <__assert_fail@plt+0x6508>
   156b0:	str	r0, [sp]
   156b4:	mov	r0, #1
   156b8:	mov	r1, r8
   156bc:	mov	r2, r6
   156c0:	mov	r3, r7
   156c4:	bl	115a8 <error@plt>
   156c8:	push	{r4, r5, fp, lr}
   156cc:	add	fp, sp, #8
   156d0:	sub	sp, sp, #16
   156d4:	mov	r4, r1
   156d8:	mov	r5, r0
   156dc:	movw	r1, #48386	; 0xbd02
   156e0:	movt	r1, #1
   156e4:	mov	r0, #0
   156e8:	mov	r2, #5
   156ec:	bl	114dc <dcgettext@plt>
   156f0:	mov	r1, r0
   156f4:	movw	r0, #48678	; 0xbe26
   156f8:	movt	r0, #1
   156fc:	movw	r2, #48631	; 0xbdf7
   15700:	movt	r2, #1
   15704:	movw	r3, #48278	; 0xbc96
   15708:	movt	r3, #1
   1570c:	str	r3, [sp]
   15710:	str	r2, [sp, #4]
   15714:	str	r0, [sp, #8]
   15718:	movw	r2, #48592	; 0xbdd0
   1571c:	movt	r2, #1
   15720:	mov	r0, r5
   15724:	mov	r3, r4
   15728:	bl	11674 <fprintf@plt>
   1572c:	sub	sp, fp, #8
   15730:	pop	{r4, r5, fp, pc}
   15734:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15738:	add	fp, sp, #24
   1573c:	mov	r6, r2
   15740:	mov	r7, r1
   15744:	mov	r4, r0
   15748:	bl	11680 <__errno_location@plt>
   1574c:	cmp	r7, #0
   15750:	beq	157d0 <__assert_fail@plt+0x3fd0>
   15754:	mov	r8, r0
   15758:	ldr	r9, [r0]
   1575c:	ldr	r5, [r6]
   15760:	mov	r0, r5
   15764:	mov	r1, r7
   15768:	bl	15810 <__assert_fail@plt+0x4010>
   1576c:	mov	r1, r0
   15770:	cmp	r5, #0
   15774:	beq	157a4 <__assert_fail@plt+0x3fa4>
   15778:	cmp	r1, r5
   1577c:	beq	157bc <__assert_fail@plt+0x3fbc>
   15780:	str	r1, [r6]
   15784:	mov	r0, r4
   15788:	bl	196c0 <__assert_fail@plt+0x7ec0>
   1578c:	mov	r4, r0
   15790:	cmp	r0, #0
   15794:	bne	157c4 <__assert_fail@plt+0x3fc4>
   15798:	mov	r4, #0
   1579c:	mov	r0, r4
   157a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   157a4:	cmp	r4, #0
   157a8:	bne	157f0 <__assert_fail@plt+0x3ff0>
   157ac:	str	r1, [r6]
   157b0:	mov	r0, r1
   157b4:	bl	1962c <__assert_fail@plt+0x7e2c>
   157b8:	mov	r4, r0
   157bc:	cmp	r4, #0
   157c0:	beq	15798 <__assert_fail@plt+0x3f98>
   157c4:	str	r9, [r8]
   157c8:	mov	r0, r4
   157cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   157d0:	movw	r0, #48700	; 0xbe3c
   157d4:	movt	r0, #1
   157d8:	movw	r1, #48712	; 0xbe48
   157dc:	movt	r1, #1
   157e0:	movw	r3, #48724	; 0xbe54
   157e4:	movt	r3, #1
   157e8:	mov	r2, #71	; 0x47
   157ec:	bl	11800 <__assert_fail@plt>
   157f0:	movw	r0, #48766	; 0xbe7e
   157f4:	movt	r0, #1
   157f8:	movw	r1, #48712	; 0xbe48
   157fc:	movt	r1, #1
   15800:	movw	r3, #48724	; 0xbe54
   15804:	movt	r3, #1
   15808:	mov	r2, #79	; 0x4f
   1580c:	bl	11800 <__assert_fail@plt>
   15810:	cmp	r0, #0
   15814:	movweq	r0, #16
   15818:	cmp	r0, r1
   1581c:	bxcs	lr
   15820:	lsl	r2, r0, #1
   15824:	cmp	r0, r0, lsl #1
   15828:	mov	r0, r2
   1582c:	bls	15818 <__assert_fail@plt+0x4018>
   15830:	mov	r0, r1
   15834:	bx	lr
   15838:	push	{r4, sl, fp, lr}
   1583c:	add	fp, sp, #8
   15840:	mov	r4, r0
   15844:	bl	15734 <__assert_fail@plt+0x3f34>
   15848:	cmp	r0, #0
   1584c:	popne	{r4, sl, fp, pc}
   15850:	mov	r0, r4
   15854:	bl	1955c <__assert_fail@plt+0x7d5c>
   15858:	bl	18d70 <__assert_fail@plt+0x7570>
   1585c:	push	{r4, r5, r6, sl, fp, lr}
   15860:	add	fp, sp, #16
   15864:	mov	r6, r1
   15868:	mov	r4, r0
   1586c:	mov	r5, #0
   15870:	mov	r1, #1
   15874:	mov	r2, #0
   15878:	bl	192d0 <__assert_fail@plt+0x7ad0>
   1587c:	cmp	r0, #0
   15880:	bmi	158b0 <__assert_fail@plt+0x40b0>
   15884:	bic	r2, r0, #1
   15888:	cmp	r6, #0
   1588c:	orrne	r2, r0, #1
   15890:	cmp	r0, r2
   15894:	beq	158b4 <__assert_fail@plt+0x40b4>
   15898:	mov	r0, r4
   1589c:	mov	r1, #2
   158a0:	bl	192d0 <__assert_fail@plt+0x7ad0>
   158a4:	cmn	r0, #1
   158a8:	movwne	r0, #0
   158ac:	pop	{r4, r5, r6, sl, fp, pc}
   158b0:	mvn	r5, #0
   158b4:	mov	r0, r5
   158b8:	pop	{r4, r5, r6, sl, fp, pc}
   158bc:	movw	r1, #1030	; 0x406
   158c0:	mov	r2, #0
   158c4:	b	192d0 <__assert_fail@plt+0x7ad0>
   158c8:	movw	r1, #53924	; 0xd2a4
   158cc:	movt	r1, #2
   158d0:	str	r0, [r1]
   158d4:	bx	lr
   158d8:	push	{r4, r5, r6, sl, fp, lr}
   158dc:	add	fp, sp, #16
   158e0:	sub	sp, sp, #8
   158e4:	movw	r6, #53720	; 0xd1d8
   158e8:	movt	r6, #2
   158ec:	ldr	r5, [r6]
   158f0:	mov	r0, r5
   158f4:	bl	1951c <__assert_fail@plt+0x7d1c>
   158f8:	cmp	r0, #0
   158fc:	beq	1593c <__assert_fail@plt+0x413c>
   15900:	mov	r0, #1
   15904:	str	r0, [sp]
   15908:	mov	r4, #0
   1590c:	mov	r0, r5
   15910:	mov	r2, #0
   15914:	mov	r3, #0
   15918:	bl	19584 <__assert_fail@plt+0x7d84>
   1591c:	cmp	r0, #0
   15920:	bne	15940 <__assert_fail@plt+0x4140>
   15924:	ldr	r0, [r6]
   15928:	bl	194b4 <__assert_fail@plt+0x7cb4>
   1592c:	mov	r4, r0
   15930:	cmp	r0, #0
   15934:	movwne	r4, #1
   15938:	b	15940 <__assert_fail@plt+0x4140>
   1593c:	mov	r4, #0
   15940:	ldr	r0, [r6]
   15944:	bl	19a74 <__assert_fail@plt+0x8274>
   15948:	cmp	r4, #0
   1594c:	cmpeq	r0, #0
   15950:	bne	15960 <__assert_fail@plt+0x4160>
   15954:	sub	sp, fp, #16
   15958:	pop	{r4, r5, r6, sl, fp, lr}
   1595c:	b	15a04 <__assert_fail@plt+0x4204>
   15960:	movw	r1, #48783	; 0xbe8f
   15964:	movt	r1, #1
   15968:	mov	r0, #0
   1596c:	mov	r2, #5
   15970:	bl	114dc <dcgettext@plt>
   15974:	mov	r4, r0
   15978:	movw	r0, #53924	; 0xd2a4
   1597c:	movt	r0, #2
   15980:	ldr	r6, [r0]
   15984:	bl	11680 <__errno_location@plt>
   15988:	ldr	r5, [r0]
   1598c:	cmp	r6, #0
   15990:	bne	159ac <__assert_fail@plt+0x41ac>
   15994:	movw	r2, #48383	; 0xbcff
   15998:	movt	r2, #1
   1599c:	mov	r0, #0
   159a0:	mov	r1, r5
   159a4:	mov	r3, r4
   159a8:	b	159cc <__assert_fail@plt+0x41cc>
   159ac:	mov	r0, r6
   159b0:	bl	17e5c <__assert_fail@plt+0x665c>
   159b4:	mov	r3, r0
   159b8:	str	r4, [sp]
   159bc:	movw	r2, #48802	; 0xbea2
   159c0:	movt	r2, #1
   159c4:	mov	r0, #0
   159c8:	mov	r1, r5
   159cc:	bl	115a8 <error@plt>
   159d0:	bl	15a04 <__assert_fail@plt+0x4204>
   159d4:	movw	r0, #53616	; 0xd170
   159d8:	movt	r0, #2
   159dc:	ldr	r0, [r0]
   159e0:	bl	114a0 <_exit@plt>
   159e4:	movw	r1, #53928	; 0xd2a8
   159e8:	movt	r1, #2
   159ec:	str	r0, [r1]
   159f0:	bx	lr
   159f4:	movw	r1, #53932	; 0xd2ac
   159f8:	movt	r1, #2
   159fc:	strb	r0, [r1]
   15a00:	bx	lr
   15a04:	push	{r4, r5, r6, sl, fp, lr}
   15a08:	add	fp, sp, #16
   15a0c:	sub	sp, sp, #8
   15a10:	movw	r0, #53724	; 0xd1dc
   15a14:	movt	r0, #2
   15a18:	ldr	r0, [r0]
   15a1c:	bl	19a74 <__assert_fail@plt+0x8274>
   15a20:	cmp	r0, #0
   15a24:	beq	15a4c <__assert_fail@plt+0x424c>
   15a28:	movw	r0, #53932	; 0xd2ac
   15a2c:	movt	r0, #2
   15a30:	ldrb	r0, [r0]
   15a34:	cmp	r0, #0
   15a38:	beq	15a6c <__assert_fail@plt+0x426c>
   15a3c:	bl	11680 <__errno_location@plt>
   15a40:	ldr	r0, [r0]
   15a44:	cmp	r0, #32
   15a48:	bne	15a6c <__assert_fail@plt+0x426c>
   15a4c:	movw	r0, #53712	; 0xd1d0
   15a50:	movt	r0, #2
   15a54:	ldr	r0, [r0]
   15a58:	bl	19a74 <__assert_fail@plt+0x8274>
   15a5c:	cmp	r0, #0
   15a60:	subeq	sp, fp, #16
   15a64:	popeq	{r4, r5, r6, sl, fp, pc}
   15a68:	b	15adc <__assert_fail@plt+0x42dc>
   15a6c:	movw	r1, #48809	; 0xbea9
   15a70:	movt	r1, #1
   15a74:	mov	r0, #0
   15a78:	mov	r2, #5
   15a7c:	bl	114dc <dcgettext@plt>
   15a80:	mov	r4, r0
   15a84:	movw	r0, #53928	; 0xd2a8
   15a88:	movt	r0, #2
   15a8c:	ldr	r6, [r0]
   15a90:	bl	11680 <__errno_location@plt>
   15a94:	ldr	r5, [r0]
   15a98:	cmp	r6, #0
   15a9c:	bne	15ab8 <__assert_fail@plt+0x42b8>
   15aa0:	movw	r2, #48383	; 0xbcff
   15aa4:	movt	r2, #1
   15aa8:	mov	r0, #0
   15aac:	mov	r1, r5
   15ab0:	mov	r3, r4
   15ab4:	b	15ad8 <__assert_fail@plt+0x42d8>
   15ab8:	mov	r0, r6
   15abc:	bl	17e5c <__assert_fail@plt+0x665c>
   15ac0:	mov	r3, r0
   15ac4:	str	r4, [sp]
   15ac8:	movw	r2, #48802	; 0xbea2
   15acc:	movt	r2, #1
   15ad0:	mov	r0, #0
   15ad4:	mov	r1, r5
   15ad8:	bl	115a8 <error@plt>
   15adc:	movw	r0, #53616	; 0xd170
   15ae0:	movt	r0, #2
   15ae4:	ldr	r0, [r0]
   15ae8:	bl	114a0 <_exit@plt>
   15aec:	push	{r4, r5, r6, r7, fp, lr}
   15af0:	add	fp, sp, #16
   15af4:	bl	115b4 <opendir@plt>
   15af8:	cmp	r0, #0
   15afc:	beq	15b4c <__assert_fail@plt+0x434c>
   15b00:	mov	r4, r0
   15b04:	bl	11788 <dirfd@plt>
   15b08:	cmp	r0, #2
   15b0c:	bhi	15b58 <__assert_fail@plt+0x4358>
   15b10:	movw	r1, #1030	; 0x406
   15b14:	mov	r2, #3
   15b18:	bl	192d0 <__assert_fail@plt+0x7ad0>
   15b1c:	cmn	r0, #1
   15b20:	ble	15b60 <__assert_fail@plt+0x4360>
   15b24:	mov	r6, r0
   15b28:	bl	11770 <fdopendir@plt>
   15b2c:	mov	r5, r0
   15b30:	bl	11680 <__errno_location@plt>
   15b34:	ldr	r7, [r0]
   15b38:	cmp	r5, #0
   15b3c:	bne	15b6c <__assert_fail@plt+0x436c>
   15b40:	mov	r0, r6
   15b44:	bl	117e8 <close@plt>
   15b48:	b	15b68 <__assert_fail@plt+0x4368>
   15b4c:	mov	r5, #0
   15b50:	mov	r0, r5
   15b54:	pop	{r4, r5, r6, r7, fp, pc}
   15b58:	mov	r0, r4
   15b5c:	pop	{r4, r5, r6, r7, fp, pc}
   15b60:	bl	11680 <__errno_location@plt>
   15b64:	ldr	r7, [r0]
   15b68:	mov	r5, #0
   15b6c:	mov	r0, r4
   15b70:	bl	117f4 <closedir@plt>
   15b74:	bl	11680 <__errno_location@plt>
   15b78:	str	r7, [r0]
   15b7c:	mov	r0, r5
   15b80:	pop	{r4, r5, r6, r7, fp, pc}
   15b84:	sub	sp, sp, #8
   15b88:	push	{fp, lr}
   15b8c:	mov	fp, sp
   15b90:	sub	sp, sp, #8
   15b94:	str	r2, [fp, #8]
   15b98:	str	r3, [fp, #12]
   15b9c:	mov	r2, #0
   15ba0:	tst	r1, #64	; 0x40
   15ba4:	ldrne	r2, [fp, #8]
   15ba8:	bl	115c0 <open64@plt>
   15bac:	bl	1848c <__assert_fail@plt+0x6c8c>
   15bb0:	mov	sp, fp
   15bb4:	pop	{fp, lr}
   15bb8:	add	sp, sp, #8
   15bbc:	bx	lr
   15bc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bc4:	add	fp, sp, #28
   15bc8:	sub	sp, sp, #300	; 0x12c
   15bcc:	mov	r5, r1
   15bd0:	mov	r6, r0
   15bd4:	bl	11578 <__ctype_get_mb_cur_max@plt>
   15bd8:	cmp	r0, #2
   15bdc:	bcc	15f70 <__assert_fail@plt+0x4770>
   15be0:	mov	r4, #0
   15be4:	str	r4, [fp, #-80]	; 0xffffffb0
   15be8:	str	r4, [fp, #-84]	; 0xffffffac
   15bec:	strb	r4, [fp, #-76]	; 0xffffffb4
   15bf0:	strb	r4, [fp, #-88]	; 0xffffffa8
   15bf4:	str	r5, [fp, #-72]	; 0xffffffb8
   15bf8:	sub	r0, fp, #88	; 0x58
   15bfc:	bl	165dc <__assert_fail@plt+0x4ddc>
   15c00:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   15c04:	cmp	r0, #0
   15c08:	beq	15c18 <__assert_fail@plt+0x4418>
   15c0c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15c10:	cmp	r0, #0
   15c14:	beq	16070 <__assert_fail@plt+0x4870>
   15c18:	str	r4, [fp, #-136]	; 0xffffff78
   15c1c:	str	r4, [fp, #-140]	; 0xffffff74
   15c20:	str	r5, [fp, #-128]	; 0xffffff80
   15c24:	strb	r4, [fp, #-132]	; 0xffffff7c
   15c28:	strb	r4, [fp, #-144]	; 0xffffff70
   15c2c:	str	r4, [sp, #136]	; 0x88
   15c30:	str	r4, [sp, #132]	; 0x84
   15c34:	str	r6, [sp, #144]	; 0x90
   15c38:	strb	r4, [sp, #140]	; 0x8c
   15c3c:	strb	r4, [sp, #128]	; 0x80
   15c40:	add	r7, sp, #128	; 0x80
   15c44:	mov	r0, r7
   15c48:	bl	165dc <__assert_fail@plt+0x4ddc>
   15c4c:	ldrb	r0, [sp, #152]	; 0x98
   15c50:	cmp	r0, #0
   15c54:	beq	15c64 <__assert_fail@plt+0x4464>
   15c58:	ldr	r0, [sp, #156]	; 0x9c
   15c5c:	cmp	r0, #0
   15c60:	beq	1607c <__assert_fail@plt+0x487c>
   15c64:	add	r0, sp, #16
   15c68:	add	r0, r0, #4
   15c6c:	str	r0, [sp, #4]
   15c70:	mov	r0, #1
   15c74:	str	r0, [sp, #8]
   15c78:	mov	r8, #0
   15c7c:	add	r0, r7, #16
   15c80:	str	r0, [sp]
   15c84:	mov	r0, #0
   15c88:	str	r0, [sp, #12]
   15c8c:	mov	sl, #0
   15c90:	mov	r9, #0
   15c94:	mov	r4, sl
   15c98:	add	r0, r9, r9, lsl #2
   15c9c:	cmp	sl, r0
   15ca0:	bcc	15d64 <__assert_fail@plt+0x4564>
   15ca4:	ldr	r0, [sp, #8]
   15ca8:	tst	r0, #1
   15cac:	beq	15d64 <__assert_fail@plt+0x4564>
   15cb0:	cmp	r9, #10
   15cb4:	bcc	15d64 <__assert_fail@plt+0x4564>
   15cb8:	mov	sl, r7
   15cbc:	ldr	r1, [sp, #12]
   15cc0:	subs	r0, r4, r1
   15cc4:	beq	15d0c <__assert_fail@plt+0x450c>
   15cc8:	sub	r7, r1, r4
   15ccc:	b	15cec <__assert_fail@plt+0x44ec>
   15cd0:	strb	r8, [fp, #-132]	; 0xffffff7c
   15cd4:	ldr	r0, [fp, #-128]	; 0xffffff80
   15cd8:	ldr	r1, [fp, #-124]	; 0xffffff84
   15cdc:	add	r0, r0, r1
   15ce0:	str	r0, [fp, #-128]	; 0xffffff80
   15ce4:	adds	r7, r7, #1
   15ce8:	bcs	15d0c <__assert_fail@plt+0x450c>
   15cec:	sub	r0, fp, #144	; 0x90
   15cf0:	bl	165dc <__assert_fail@plt+0x4ddc>
   15cf4:	ldrb	r0, [fp, #-120]	; 0xffffff88
   15cf8:	cmp	r0, #0
   15cfc:	beq	15cd0 <__assert_fail@plt+0x44d0>
   15d00:	ldr	r0, [fp, #-116]	; 0xffffff8c
   15d04:	cmp	r0, #0
   15d08:	bne	15cd0 <__assert_fail@plt+0x44d0>
   15d0c:	sub	r0, fp, #144	; 0x90
   15d10:	bl	165dc <__assert_fail@plt+0x4ddc>
   15d14:	ldrb	r0, [fp, #-120]	; 0xffffff88
   15d18:	cmp	r0, #0
   15d1c:	beq	15d5c <__assert_fail@plt+0x455c>
   15d20:	ldr	r0, [fp, #-116]	; 0xffffff8c
   15d24:	cmp	r0, #0
   15d28:	str	r4, [sp, #12]
   15d2c:	mov	r7, sl
   15d30:	bne	15d64 <__assert_fail@plt+0x4564>
   15d34:	mov	r0, r6
   15d38:	mov	r1, r5
   15d3c:	add	r2, sp, #72	; 0x48
   15d40:	bl	160a4 <__assert_fail@plt+0x48a4>
   15d44:	mov	r1, #0
   15d48:	str	r1, [sp, #8]
   15d4c:	cmp	r0, #0
   15d50:	str	r4, [sp, #12]
   15d54:	beq	15d64 <__assert_fail@plt+0x4564>
   15d58:	b	16098 <__assert_fail@plt+0x4898>
   15d5c:	str	r4, [sp, #12]
   15d60:	mov	r7, sl
   15d64:	add	sl, r4, #1
   15d68:	ldrb	r0, [sp, #152]	; 0x98
   15d6c:	cmp	r0, #0
   15d70:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   15d74:	cmpne	r0, #0
   15d78:	bne	15da4 <__assert_fail@plt+0x45a4>
   15d7c:	ldr	r2, [sp, #148]	; 0x94
   15d80:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15d84:	cmp	r2, r0
   15d88:	bne	15f30 <__assert_fail@plt+0x4730>
   15d8c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15d90:	ldr	r0, [sp, #144]	; 0x90
   15d94:	bl	11638 <bcmp@plt>
   15d98:	cmp	r0, #0
   15d9c:	bne	15f30 <__assert_fail@plt+0x4730>
   15da0:	b	15db4 <__assert_fail@plt+0x45b4>
   15da4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15da8:	ldr	r1, [sp, #156]	; 0x9c
   15dac:	cmp	r1, r0
   15db0:	bne	15f30 <__assert_fail@plt+0x4730>
   15db4:	mov	r0, r7
   15db8:	mov	r1, #48	; 0x30
   15dbc:	vld1.64	{d16-d17}, [r0], r1
   15dc0:	ldr	r1, [sp]
   15dc4:	vld1.64	{d18-d19}, [r1]
   15dc8:	add	r3, sp, #72	; 0x48
   15dcc:	add	r1, r3, #16
   15dd0:	add	r2, r7, #32
   15dd4:	vld1.64	{d20-d21}, [r2]
   15dd8:	vldr	d22, [r0]
   15ddc:	vst1.64	{d18-d19}, [r1]
   15de0:	add	r0, r3, #32
   15de4:	vst1.64	{d20-d21}, [r0]
   15de8:	mov	r0, r3
   15dec:	mov	r1, #12
   15df0:	vst1.64	{d16-d17}, [r0], r1
   15df4:	strb	r8, [r0]
   15df8:	str	r5, [sp, #32]
   15dfc:	strb	r8, [sp, #16]
   15e00:	vstr	d22, [sp, #120]	; 0x78
   15e04:	ldr	r0, [sp, #88]	; 0x58
   15e08:	ldr	r1, [sp, #92]	; 0x5c
   15e0c:	add	r0, r0, r1
   15e10:	str	r0, [sp, #88]	; 0x58
   15e14:	ldr	r0, [sp, #4]
   15e18:	str	r8, [r0]
   15e1c:	str	r8, [r0, #4]
   15e20:	strb	r8, [sp, #28]
   15e24:	add	r0, sp, #16
   15e28:	bl	165dc <__assert_fail@plt+0x4ddc>
   15e2c:	ldrb	r0, [sp, #40]	; 0x28
   15e30:	cmp	r0, #0
   15e34:	beq	15e44 <__assert_fail@plt+0x4644>
   15e38:	ldr	r0, [sp, #44]	; 0x2c
   15e3c:	cmp	r0, #0
   15e40:	beq	160a0 <__assert_fail@plt+0x48a0>
   15e44:	strb	r8, [sp, #28]
   15e48:	ldr	r0, [sp, #32]
   15e4c:	ldr	r1, [sp, #36]	; 0x24
   15e50:	add	r0, r0, r1
   15e54:	str	r0, [sp, #32]
   15e58:	add	r0, sp, #16
   15e5c:	bl	165dc <__assert_fail@plt+0x4ddc>
   15e60:	ldrb	r0, [sp, #40]	; 0x28
   15e64:	cmp	r0, #0
   15e68:	beq	15e78 <__assert_fail@plt+0x4678>
   15e6c:	ldr	r0, [sp, #44]	; 0x2c
   15e70:	cmp	r0, #0
   15e74:	beq	16088 <__assert_fail@plt+0x4888>
   15e78:	add	sl, r4, #2
   15e7c:	add	r0, sp, #72	; 0x48
   15e80:	bl	165dc <__assert_fail@plt+0x4ddc>
   15e84:	ldr	r0, [sp, #100]	; 0x64
   15e88:	ldrb	r1, [sp, #96]	; 0x60
   15e8c:	cmp	r0, #0
   15e90:	bne	15e9c <__assert_fail@plt+0x469c>
   15e94:	cmp	r1, #0
   15e98:	bne	16078 <__assert_fail@plt+0x4878>
   15e9c:	cmp	r1, #0
   15ea0:	ldrbne	r1, [sp, #40]	; 0x28
   15ea4:	cmpne	r1, #0
   15ea8:	bne	15ed4 <__assert_fail@plt+0x46d4>
   15eac:	ldr	r2, [sp, #92]	; 0x5c
   15eb0:	ldr	r0, [sp, #36]	; 0x24
   15eb4:	cmp	r2, r0
   15eb8:	bne	15f30 <__assert_fail@plt+0x4730>
   15ebc:	ldr	r1, [sp, #32]
   15ec0:	ldr	r0, [sp, #88]	; 0x58
   15ec4:	bl	11638 <bcmp@plt>
   15ec8:	cmp	r0, #0
   15ecc:	beq	15ee0 <__assert_fail@plt+0x46e0>
   15ed0:	b	15f30 <__assert_fail@plt+0x4730>
   15ed4:	ldr	r1, [sp, #44]	; 0x2c
   15ed8:	cmp	r0, r1
   15edc:	bne	15f30 <__assert_fail@plt+0x4730>
   15ee0:	strb	r8, [sp, #84]	; 0x54
   15ee4:	strb	r8, [sp, #28]
   15ee8:	ldr	r0, [sp, #88]	; 0x58
   15eec:	ldr	r1, [sp, #92]	; 0x5c
   15ef0:	add	r0, r0, r1
   15ef4:	str	r0, [sp, #88]	; 0x58
   15ef8:	ldr	r0, [sp, #32]
   15efc:	ldr	r1, [sp, #36]	; 0x24
   15f00:	add	r0, r0, r1
   15f04:	str	r0, [sp, #32]
   15f08:	add	r0, sp, #16
   15f0c:	bl	165dc <__assert_fail@plt+0x4ddc>
   15f10:	add	sl, sl, #1
   15f14:	ldrb	r0, [sp, #40]	; 0x28
   15f18:	cmp	r0, #0
   15f1c:	beq	15e7c <__assert_fail@plt+0x467c>
   15f20:	ldr	r0, [sp, #44]	; 0x2c
   15f24:	cmp	r0, #0
   15f28:	bne	15e7c <__assert_fail@plt+0x467c>
   15f2c:	b	16088 <__assert_fail@plt+0x4888>
   15f30:	add	r9, r9, #1
   15f34:	mov	r4, #0
   15f38:	strb	r4, [sp, #140]	; 0x8c
   15f3c:	ldr	r0, [sp, #144]	; 0x90
   15f40:	ldr	r1, [sp, #148]	; 0x94
   15f44:	add	r0, r0, r1
   15f48:	str	r0, [sp, #144]	; 0x90
   15f4c:	mov	r0, r7
   15f50:	bl	165dc <__assert_fail@plt+0x4ddc>
   15f54:	ldrb	r0, [sp, #152]	; 0x98
   15f58:	cmp	r0, #0
   15f5c:	beq	15c94 <__assert_fail@plt+0x4494>
   15f60:	ldr	r0, [sp, #156]	; 0x9c
   15f64:	cmp	r0, #0
   15f68:	bne	15c94 <__assert_fail@plt+0x4494>
   15f6c:	b	1607c <__assert_fail@plt+0x487c>
   15f70:	ldrb	r9, [r5]
   15f74:	cmp	r9, #0
   15f78:	beq	16070 <__assert_fail@plt+0x4870>
   15f7c:	ldrb	r0, [r6]
   15f80:	cmp	r0, #0
   15f84:	beq	16078 <__assert_fail@plt+0x4878>
   15f88:	mov	r3, #1
   15f8c:	mov	ip, #0
   15f90:	mov	sl, r5
   15f94:	mov	r7, #0
   15f98:	mov	r8, #0
   15f9c:	add	r0, r8, r8, lsl #2
   15fa0:	cmp	r7, r0
   15fa4:	bcc	16018 <__assert_fail@plt+0x4818>
   15fa8:	tst	r3, #1
   15fac:	beq	16018 <__assert_fail@plt+0x4818>
   15fb0:	cmp	r8, #10
   15fb4:	bcc	16018 <__assert_fail@plt+0x4818>
   15fb8:	cmp	sl, #0
   15fbc:	beq	15fe4 <__assert_fail@plt+0x47e4>
   15fc0:	sub	r1, r7, ip
   15fc4:	mov	r0, sl
   15fc8:	mov	r4, r3
   15fcc:	bl	116ec <strnlen@plt>
   15fd0:	mov	r3, r4
   15fd4:	ldrb	r0, [sl, r0]!
   15fd8:	cmp	r0, #0
   15fdc:	mov	ip, r7
   15fe0:	bne	16018 <__assert_fail@plt+0x4818>
   15fe4:	mov	r0, r5
   15fe8:	mov	r4, ip
   15fec:	bl	11650 <strlen@plt>
   15ff0:	mov	r2, r0
   15ff4:	mov	r0, r6
   15ff8:	mov	r1, r5
   15ffc:	sub	r3, fp, #88	; 0x58
   16000:	bl	16480 <__assert_fail@plt+0x4c80>
   16004:	mov	ip, r4
   16008:	mov	r3, #0
   1600c:	cmp	r0, #0
   16010:	mov	sl, #0
   16014:	bne	16090 <__assert_fail@plt+0x4890>
   16018:	ldrb	r0, [r6]
   1601c:	cmp	r0, r9
   16020:	bne	16054 <__assert_fail@plt+0x4854>
   16024:	mov	r0, #1
   16028:	ldrb	r1, [r5, r0]
   1602c:	cmp	r1, #0
   16030:	beq	16070 <__assert_fail@plt+0x4870>
   16034:	ldrb	r2, [r6, r0]
   16038:	cmp	r2, #0
   1603c:	beq	16078 <__assert_fail@plt+0x4878>
   16040:	add	r0, r0, #1
   16044:	cmp	r2, r1
   16048:	beq	16028 <__assert_fail@plt+0x4828>
   1604c:	add	r7, r7, r0
   16050:	b	16058 <__assert_fail@plt+0x4858>
   16054:	add	r7, r7, #1
   16058:	add	r8, r8, #1
   1605c:	ldrb	r0, [r6, #1]!
   16060:	mov	r4, #0
   16064:	cmp	r0, #0
   16068:	bne	15f9c <__assert_fail@plt+0x479c>
   1606c:	b	1607c <__assert_fail@plt+0x487c>
   16070:	mov	r4, r6
   16074:	b	1607c <__assert_fail@plt+0x487c>
   16078:	mov	r4, #0
   1607c:	mov	r0, r4
   16080:	sub	sp, fp, #28
   16084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16088:	ldr	r4, [sp, #144]	; 0x90
   1608c:	b	1607c <__assert_fail@plt+0x487c>
   16090:	ldr	r4, [fp, #-88]	; 0xffffffa8
   16094:	b	1607c <__assert_fail@plt+0x487c>
   16098:	ldr	r4, [sp, #72]	; 0x48
   1609c:	b	1607c <__assert_fail@plt+0x487c>
   160a0:	bl	117d0 <abort@plt>
   160a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160a8:	add	fp, sp, #28
   160ac:	sub	sp, sp, #132	; 0x84
   160b0:	mov	r5, r2
   160b4:	mov	r4, r1
   160b8:	mov	r8, r0
   160bc:	mov	r0, r1
   160c0:	bl	19d2c <__assert_fail@plt+0x852c>
   160c4:	mov	r6, r0
   160c8:	mov	r7, #0
   160cc:	movw	r0, #47662	; 0xba2e
   160d0:	movt	r0, #744	; 0x2e8
   160d4:	cmp	r6, r0
   160d8:	bhi	16470 <__assert_fail@plt+0x4c70>
   160dc:	mov	r0, #44	; 0x2c
   160e0:	mul	r0, r6, r0
   160e4:	cmp	r0, #4016	; 0xfb0
   160e8:	bhi	16110 <__assert_fail@plt+0x4910>
   160ec:	add	r0, r0, #22
   160f0:	bic	r0, r0, #7
   160f4:	sub	r0, sp, r0
   160f8:	add	r1, r0, #15
   160fc:	bic	sl, r1, #15
   16100:	mov	sp, r0
   16104:	cmp	sl, #0
   16108:	bne	16120 <__assert_fail@plt+0x4920>
   1610c:	b	16470 <__assert_fail@plt+0x4c70>
   16110:	bl	19bec <__assert_fail@plt+0x83ec>
   16114:	mov	sl, r0
   16118:	cmp	sl, #0
   1611c:	beq	16470 <__assert_fail@plt+0x4c70>
   16120:	str	r5, [fp, #-156]	; 0xffffff64
   16124:	mov	r9, #0
   16128:	str	r9, [fp, #-80]	; 0xffffffb0
   1612c:	str	r9, [fp, #-84]	; 0xffffffac
   16130:	strb	r9, [fp, #-76]	; 0xffffffb4
   16134:	strb	r9, [fp, #-88]	; 0xffffffa8
   16138:	str	r4, [fp, #-72]	; 0xffffffb8
   1613c:	sub	r4, fp, #88	; 0x58
   16140:	mov	r0, r4
   16144:	bl	165dc <__assert_fail@plt+0x4ddc>
   16148:	add	r0, r6, r6, lsl #2
   1614c:	add	r0, sl, r0, lsl #3
   16150:	str	r0, [fp, #-148]	; 0xffffff6c
   16154:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   16158:	cmp	r0, #0
   1615c:	beq	1616c <__assert_fail@plt+0x496c>
   16160:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16164:	cmp	r0, #0
   16168:	beq	161bc <__assert_fail@plt+0x49bc>
   1616c:	add	r4, r4, #16
   16170:	sub	r7, fp, #88	; 0x58
   16174:	mov	r5, sl
   16178:	mov	r0, r5
   1617c:	mov	r1, r4
   16180:	bl	19cb4 <__assert_fail@plt+0x84b4>
   16184:	strb	r9, [fp, #-76]	; 0xffffffb4
   16188:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1618c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16190:	add	r0, r0, r1
   16194:	str	r0, [fp, #-72]	; 0xffffffb8
   16198:	mov	r0, r7
   1619c:	bl	165dc <__assert_fail@plt+0x4ddc>
   161a0:	add	r5, r5, #40	; 0x28
   161a4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   161a8:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   161ac:	cmp	r1, #0
   161b0:	beq	16178 <__assert_fail@plt+0x4978>
   161b4:	cmp	r0, #0
   161b8:	bne	16178 <__assert_fail@plt+0x4978>
   161bc:	str	r8, [fp, #-160]	; 0xffffff60
   161c0:	mov	r0, #1
   161c4:	ldr	r3, [fp, #-148]	; 0xffffff6c
   161c8:	str	r0, [r3, #4]
   161cc:	str	r6, [fp, #-152]	; 0xffffff68
   161d0:	cmp	r6, #3
   161d4:	bcc	162a0 <__assert_fail@plt+0x4aa0>
   161d8:	mov	r4, #2
   161dc:	mov	r5, #0
   161e0:	b	16200 <__assert_fail@plt+0x4a00>
   161e4:	mov	r5, #0
   161e8:	mov	r0, r4
   161ec:	str	r0, [r3, r4, lsl #2]
   161f0:	add	r4, r4, #1
   161f4:	ldr	r0, [fp, #-152]	; 0xffffff68
   161f8:	cmp	r4, r0
   161fc:	beq	162a0 <__assert_fail@plt+0x4aa0>
   16200:	add	r0, r4, r4, lsl #2
   16204:	add	r0, sl, r0, lsl #3
   16208:	sub	r9, r0, #40	; 0x28
   1620c:	sub	r6, r0, #36	; 0x24
   16210:	sub	r7, r0, #28
   16214:	ldrb	r8, [r0, #-32]	; 0xffffffe0
   16218:	cmp	r8, #0
   1621c:	beq	16248 <__assert_fail@plt+0x4a48>
   16220:	add	r0, r5, r5, lsl #2
   16224:	add	r0, sl, r0, lsl #3
   16228:	ldrb	r1, [r0, #8]
   1622c:	cmp	r1, #0
   16230:	beq	16248 <__assert_fail@plt+0x4a48>
   16234:	ldr	r0, [r0, #12]
   16238:	ldr	r1, [r7]
   1623c:	cmp	r1, r0
   16240:	bne	16278 <__assert_fail@plt+0x4a78>
   16244:	b	16294 <__assert_fail@plt+0x4a94>
   16248:	add	r0, r5, r5, lsl #2
   1624c:	add	r1, sl, r0, lsl #3
   16250:	ldr	r1, [r1, #4]
   16254:	ldr	r2, [r6]
   16258:	cmp	r2, r1
   1625c:	bne	16278 <__assert_fail@plt+0x4a78>
   16260:	ldr	r1, [sl, r0, lsl #3]
   16264:	ldr	r0, [r9]
   16268:	bl	11638 <bcmp@plt>
   1626c:	ldr	r3, [fp, #-148]	; 0xffffff6c
   16270:	cmp	r0, #0
   16274:	beq	16294 <__assert_fail@plt+0x4a94>
   16278:	cmp	r5, #0
   1627c:	beq	161e4 <__assert_fail@plt+0x49e4>
   16280:	ldr	r0, [r3, r5, lsl #2]
   16284:	sub	r5, r5, r0
   16288:	cmp	r8, #0
   1628c:	bne	16220 <__assert_fail@plt+0x4a20>
   16290:	b	16248 <__assert_fail@plt+0x4a48>
   16294:	add	r5, r5, #1
   16298:	sub	r0, r4, r5
   1629c:	b	161ec <__assert_fail@plt+0x49ec>
   162a0:	mov	r5, #0
   162a4:	ldr	r8, [fp, #-156]	; 0xffffff64
   162a8:	str	r5, [r8]
   162ac:	str	r5, [fp, #-80]	; 0xffffffb0
   162b0:	str	r5, [fp, #-84]	; 0xffffffac
   162b4:	str	r5, [fp, #-136]	; 0xffffff78
   162b8:	str	r5, [fp, #-140]	; 0xffffff74
   162bc:	strb	r5, [fp, #-76]	; 0xffffffb4
   162c0:	strb	r5, [fp, #-88]	; 0xffffffa8
   162c4:	ldr	r0, [fp, #-160]	; 0xffffff60
   162c8:	str	r0, [fp, #-72]	; 0xffffffb8
   162cc:	str	r0, [fp, #-128]	; 0xffffff80
   162d0:	strb	r5, [fp, #-132]	; 0xffffff7c
   162d4:	strb	r5, [fp, #-144]	; 0xffffff70
   162d8:	sub	r0, fp, #144	; 0x90
   162dc:	bl	165dc <__assert_fail@plt+0x4ddc>
   162e0:	ldrb	r1, [fp, #-120]	; 0xffffff88
   162e4:	ldr	r0, [fp, #-116]	; 0xffffff8c
   162e8:	cmp	r0, #0
   162ec:	bne	162f8 <__assert_fail@plt+0x4af8>
   162f0:	cmp	r1, #0
   162f4:	bne	16464 <__assert_fail@plt+0x4c64>
   162f8:	clz	r1, r1
   162fc:	lsr	r1, r1, #5
   16300:	sub	r9, fp, #144	; 0x90
   16304:	sub	r4, fp, #88	; 0x58
   16308:	mov	r7, #0
   1630c:	add	r3, r7, r7, lsl #2
   16310:	add	r2, sl, r3, lsl #3
   16314:	tst	r1, #1
   16318:	bne	16338 <__assert_fail@plt+0x4b38>
   1631c:	ldrb	r1, [r2, #8]
   16320:	cmp	r1, #0
   16324:	beq	16338 <__assert_fail@plt+0x4b38>
   16328:	ldr	r1, [r2, #12]
   1632c:	cmp	r1, r0
   16330:	bne	1635c <__assert_fail@plt+0x4b5c>
   16334:	b	163bc <__assert_fail@plt+0x4bbc>
   16338:	ldr	r2, [r2, #4]
   1633c:	ldr	r0, [fp, #-124]	; 0xffffff84
   16340:	cmp	r2, r0
   16344:	bne	1635c <__assert_fail@plt+0x4b5c>
   16348:	ldr	r0, [sl, r3, lsl #3]
   1634c:	ldr	r1, [fp, #-128]	; 0xffffff80
   16350:	bl	11638 <bcmp@plt>
   16354:	cmp	r0, #0
   16358:	beq	163bc <__assert_fail@plt+0x4bbc>
   1635c:	cmp	r7, #0
   16360:	beq	163e4 <__assert_fail@plt+0x4be4>
   16364:	ldr	r0, [fp, #-148]	; 0xffffff6c
   16368:	ldr	r6, [r0, r7, lsl #2]
   1636c:	sub	r7, r7, r6
   16370:	cmp	r6, #0
   16374:	bne	16398 <__assert_fail@plt+0x4b98>
   16378:	b	16430 <__assert_fail@plt+0x4c30>
   1637c:	strb	r5, [fp, #-76]	; 0xffffffb4
   16380:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16384:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16388:	add	r0, r0, r1
   1638c:	str	r0, [fp, #-72]	; 0xffffffb8
   16390:	subs	r6, r6, #1
   16394:	beq	16430 <__assert_fail@plt+0x4c30>
   16398:	mov	r0, r4
   1639c:	bl	165dc <__assert_fail@plt+0x4ddc>
   163a0:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   163a4:	cmp	r0, #0
   163a8:	beq	1637c <__assert_fail@plt+0x4b7c>
   163ac:	ldr	r0, [fp, #-60]	; 0xffffffc4
   163b0:	cmp	r0, #0
   163b4:	bne	1637c <__assert_fail@plt+0x4b7c>
   163b8:	b	1647c <__assert_fail@plt+0x4c7c>
   163bc:	strb	r5, [fp, #-132]	; 0xffffff7c
   163c0:	ldr	r0, [fp, #-128]	; 0xffffff80
   163c4:	ldr	r1, [fp, #-124]	; 0xffffff84
   163c8:	add	r0, r0, r1
   163cc:	str	r0, [fp, #-128]	; 0xffffff80
   163d0:	add	r7, r7, #1
   163d4:	ldr	r0, [fp, #-152]	; 0xffffff68
   163d8:	cmp	r7, r0
   163dc:	bne	16430 <__assert_fail@plt+0x4c30>
   163e0:	b	1645c <__assert_fail@plt+0x4c5c>
   163e4:	mov	r0, r4
   163e8:	bl	165dc <__assert_fail@plt+0x4ddc>
   163ec:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   163f0:	cmp	r0, #0
   163f4:	beq	16404 <__assert_fail@plt+0x4c04>
   163f8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   163fc:	cmp	r0, #0
   16400:	beq	1647c <__assert_fail@plt+0x4c7c>
   16404:	mov	r7, #0
   16408:	strb	r7, [fp, #-76]	; 0xffffffb4
   1640c:	strb	r7, [fp, #-132]	; 0xffffff7c
   16410:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16414:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16418:	add	r0, r0, r1
   1641c:	str	r0, [fp, #-72]	; 0xffffffb8
   16420:	ldr	r0, [fp, #-128]	; 0xffffff80
   16424:	ldr	r1, [fp, #-124]	; 0xffffff84
   16428:	add	r0, r0, r1
   1642c:	str	r0, [fp, #-128]	; 0xffffff80
   16430:	mov	r0, r9
   16434:	bl	165dc <__assert_fail@plt+0x4ddc>
   16438:	ldrb	r2, [fp, #-120]	; 0xffffff88
   1643c:	clz	r0, r2
   16440:	lsr	r1, r0, #5
   16444:	ldr	r0, [fp, #-116]	; 0xffffff8c
   16448:	cmp	r0, #0
   1644c:	bne	1630c <__assert_fail@plt+0x4b0c>
   16450:	cmp	r2, #0
   16454:	beq	1630c <__assert_fail@plt+0x4b0c>
   16458:	b	16464 <__assert_fail@plt+0x4c64>
   1645c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16460:	str	r0, [r8]
   16464:	mov	r0, sl
   16468:	bl	19c5c <__assert_fail@plt+0x845c>
   1646c:	mov	r7, #1
   16470:	mov	r0, r7
   16474:	sub	sp, fp, #28
   16478:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1647c:	bl	117d0 <abort@plt>
   16480:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16484:	add	fp, sp, #24
   16488:	mov	r4, #0
   1648c:	cmn	r2, #-536870911	; 0xe0000001
   16490:	bhi	165d0 <__assert_fail@plt+0x4dd0>
   16494:	mov	r8, r3
   16498:	mov	r5, r2
   1649c:	mov	r6, r1
   164a0:	mov	r7, r0
   164a4:	lsl	r0, r2, #2
   164a8:	cmp	r0, #4016	; 0xfb0
   164ac:	bhi	164d4 <__assert_fail@plt+0x4cd4>
   164b0:	add	r0, r0, #22
   164b4:	bic	r0, r0, #7
   164b8:	sub	r1, sp, r0
   164bc:	add	r0, r1, #15
   164c0:	bic	r0, r0, #15
   164c4:	mov	sp, r1
   164c8:	cmp	r0, #0
   164cc:	bne	164e0 <__assert_fail@plt+0x4ce0>
   164d0:	b	165d0 <__assert_fail@plt+0x4dd0>
   164d4:	bl	19bec <__assert_fail@plt+0x83ec>
   164d8:	cmp	r0, #0
   164dc:	beq	165d0 <__assert_fail@plt+0x4dd0>
   164e0:	mov	r1, #1
   164e4:	str	r1, [r0, #4]
   164e8:	cmp	r5, #3
   164ec:	bcc	16554 <__assert_fail@plt+0x4d54>
   164f0:	mov	r1, #2
   164f4:	mov	r2, #0
   164f8:	b	16514 <__assert_fail@plt+0x4d14>
   164fc:	add	r2, r2, #1
   16500:	sub	r3, r1, r2
   16504:	str	r3, [r0, r1, lsl #2]
   16508:	add	r1, r1, #1
   1650c:	cmp	r1, r5
   16510:	beq	16554 <__assert_fail@plt+0x4d54>
   16514:	ldrb	r4, [r6, r2]
   16518:	add	r3, r1, r6
   1651c:	ldrb	r3, [r3, #-1]
   16520:	cmp	r3, r4
   16524:	beq	164fc <__assert_fail@plt+0x4cfc>
   16528:	cmp	r2, #0
   1652c:	beq	16548 <__assert_fail@plt+0x4d48>
   16530:	ldr	r4, [r0, r2, lsl #2]
   16534:	sub	r2, r2, r4
   16538:	ldrb	r4, [r6, r2]
   1653c:	cmp	r3, r4
   16540:	bne	16528 <__assert_fail@plt+0x4d28>
   16544:	b	164fc <__assert_fail@plt+0x4cfc>
   16548:	mov	r2, #0
   1654c:	mov	r3, r1
   16550:	b	16504 <__assert_fail@plt+0x4d04>
   16554:	mov	r1, #0
   16558:	str	r1, [r8]
   1655c:	ldrb	r3, [r7]
   16560:	cmp	r3, #0
   16564:	beq	165c8 <__assert_fail@plt+0x4dc8>
   16568:	mov	r2, r7
   1656c:	b	16588 <__assert_fail@plt+0x4d88>
   16570:	add	r7, r7, #1
   16574:	add	r2, r2, #1
   16578:	mov	r1, #0
   1657c:	ldrb	r3, [r7]
   16580:	cmp	r3, #0
   16584:	beq	165c8 <__assert_fail@plt+0x4dc8>
   16588:	ldrb	r4, [r6, r1]
   1658c:	uxtb	r3, r3
   16590:	cmp	r4, r3
   16594:	bne	165ac <__assert_fail@plt+0x4dac>
   16598:	add	r1, r1, #1
   1659c:	cmp	r1, r5
   165a0:	beq	165c4 <__assert_fail@plt+0x4dc4>
   165a4:	add	r7, r7, #1
   165a8:	b	1657c <__assert_fail@plt+0x4d7c>
   165ac:	cmp	r1, #0
   165b0:	beq	16570 <__assert_fail@plt+0x4d70>
   165b4:	ldr	r3, [r0, r1, lsl #2]
   165b8:	sub	r1, r1, r3
   165bc:	add	r2, r2, r3
   165c0:	b	1657c <__assert_fail@plt+0x4d7c>
   165c4:	str	r2, [r8]
   165c8:	bl	19c5c <__assert_fail@plt+0x845c>
   165cc:	mov	r4, #1
   165d0:	mov	r0, r4
   165d4:	sub	sp, fp, #24
   165d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   165dc:	push	{r4, r5, r6, r7, fp, lr}
   165e0:	add	fp, sp, #16
   165e4:	mov	r4, r0
   165e8:	ldrb	r0, [r0, #12]
   165ec:	cmp	r0, #0
   165f0:	popne	{r4, r5, r6, r7, fp, pc}
   165f4:	ldrb	r0, [r4]
   165f8:	cmp	r0, #0
   165fc:	bne	16648 <__assert_fail@plt+0x4e48>
   16600:	ldr	r0, [r4, #16]
   16604:	ldrb	r0, [r0]
   16608:	bl	19d04 <__assert_fail@plt+0x8504>
   1660c:	cmp	r0, #0
   16610:	beq	16630 <__assert_fail@plt+0x4e30>
   16614:	mov	r0, #1
   16618:	str	r0, [r4, #20]
   1661c:	ldr	r1, [r4, #16]
   16620:	ldrb	r1, [r1]
   16624:	strb	r0, [r4, #24]
   16628:	str	r1, [r4, #28]
   1662c:	b	166fc <__assert_fail@plt+0x4efc>
   16630:	add	r0, r4, #4
   16634:	bl	114c4 <mbsinit@plt>
   16638:	cmp	r0, #0
   1663c:	beq	16708 <__assert_fail@plt+0x4f08>
   16640:	mov	r0, #1
   16644:	strb	r0, [r4]
   16648:	ldr	r7, [r4, #16]
   1664c:	bl	11578 <__ctype_get_mb_cur_max@plt>
   16650:	mov	r1, r0
   16654:	mov	r0, r7
   16658:	bl	1845c <__assert_fail@plt+0x6c5c>
   1665c:	mov	r2, r0
   16660:	add	r6, r4, #28
   16664:	add	r5, r4, #4
   16668:	mov	r0, r6
   1666c:	mov	r1, r7
   16670:	mov	r3, r5
   16674:	bl	1965c <__assert_fail@plt+0x7e5c>
   16678:	str	r0, [r4, #20]
   1667c:	cmn	r0, #2
   16680:	beq	166e8 <__assert_fail@plt+0x4ee8>
   16684:	cmp	r0, #0
   16688:	beq	166a4 <__assert_fail@plt+0x4ea4>
   1668c:	cmn	r0, #1
   16690:	bne	166c8 <__assert_fail@plt+0x4ec8>
   16694:	mov	r0, #0
   16698:	strb	r0, [r4, #24]
   1669c:	mov	r0, #1
   166a0:	b	166f8 <__assert_fail@plt+0x4ef8>
   166a4:	mov	r0, #1
   166a8:	str	r0, [r4, #20]
   166ac:	ldr	r0, [r4, #16]
   166b0:	ldrb	r0, [r0]
   166b4:	cmp	r0, #0
   166b8:	bne	16728 <__assert_fail@plt+0x4f28>
   166bc:	ldr	r0, [r6]
   166c0:	cmp	r0, #0
   166c4:	bne	16748 <__assert_fail@plt+0x4f48>
   166c8:	mov	r0, #1
   166cc:	strb	r0, [r4, #24]
   166d0:	mov	r0, r5
   166d4:	bl	114c4 <mbsinit@plt>
   166d8:	cmp	r0, #0
   166dc:	movne	r0, #0
   166e0:	strbne	r0, [r4]
   166e4:	b	166fc <__assert_fail@plt+0x4efc>
   166e8:	ldr	r0, [r4, #16]
   166ec:	bl	11650 <strlen@plt>
   166f0:	mov	r1, #0
   166f4:	strb	r1, [r4, #24]
   166f8:	str	r0, [r4, #20]
   166fc:	mov	r0, #1
   16700:	strb	r0, [r4, #12]
   16704:	pop	{r4, r5, r6, r7, fp, pc}
   16708:	movw	r0, #48821	; 0xbeb5
   1670c:	movt	r0, #1
   16710:	movw	r1, #48844	; 0xbecc
   16714:	movt	r1, #1
   16718:	movw	r3, #48856	; 0xbed8
   1671c:	movt	r3, #1
   16720:	mov	r2, #143	; 0x8f
   16724:	bl	11800 <__assert_fail@plt>
   16728:	movw	r0, #48904	; 0xbf08
   1672c:	movt	r0, #1
   16730:	movw	r1, #48844	; 0xbecc
   16734:	movt	r1, #1
   16738:	movw	r3, #48856	; 0xbed8
   1673c:	movt	r3, #1
   16740:	mov	r2, #171	; 0xab
   16744:	bl	11800 <__assert_fail@plt>
   16748:	movw	r0, #48927	; 0xbf1f
   1674c:	movt	r0, #1
   16750:	movw	r1, #48844	; 0xbecc
   16754:	movt	r1, #1
   16758:	movw	r3, #48856	; 0xbed8
   1675c:	movt	r3, #1
   16760:	mov	r2, #172	; 0xac
   16764:	bl	11800 <__assert_fail@plt>
   16768:	ldr	r2, [r0, #16]
   1676c:	add	r1, r2, r1
   16770:	str	r1, [r0, #16]
   16774:	bx	lr
   16778:	ldrb	r3, [r1]
   1677c:	mov	r2, r0
   16780:	strb	r3, [r2], #4
   16784:	cmp	r3, #0
   16788:	beq	16798 <__assert_fail@plt+0x4f98>
   1678c:	ldmib	r1, {r3, ip}
   16790:	stm	r2, {r3, ip}
   16794:	b	167a4 <__assert_fail@plt+0x4fa4>
   16798:	mov	r3, #0
   1679c:	str	r3, [r2]
   167a0:	str	r3, [r2, #4]
   167a4:	ldrb	r2, [r1, #12]
   167a8:	strb	r2, [r0, #12]
   167ac:	add	r0, r0, #16
   167b0:	add	r1, r1, #16
   167b4:	b	19cb4 <__assert_fail@plt+0x84b4>
   167b8:	push	{r4, r5, fp, lr}
   167bc:	add	fp, sp, #8
   167c0:	cmp	r0, #0
   167c4:	beq	16858 <__assert_fail@plt+0x5058>
   167c8:	mov	r4, r0
   167cc:	mov	r1, #47	; 0x2f
   167d0:	bl	11740 <strrchr@plt>
   167d4:	cmp	r0, #0
   167d8:	mov	r5, r4
   167dc:	addne	r5, r0, #1
   167e0:	sub	r0, r5, r4
   167e4:	cmp	r0, #7
   167e8:	blt	1683c <__assert_fail@plt+0x503c>
   167ec:	sub	r0, r5, #7
   167f0:	movw	r1, #49001	; 0xbf69
   167f4:	movt	r1, #1
   167f8:	mov	r2, #7
   167fc:	bl	117c4 <strncmp@plt>
   16800:	cmp	r0, #0
   16804:	bne	1683c <__assert_fail@plt+0x503c>
   16808:	movw	r1, #49009	; 0xbf71
   1680c:	movt	r1, #1
   16810:	mov	r0, r5
   16814:	mov	r2, #3
   16818:	bl	117c4 <strncmp@plt>
   1681c:	cmp	r0, #0
   16820:	beq	1682c <__assert_fail@plt+0x502c>
   16824:	mov	r4, r5
   16828:	b	1683c <__assert_fail@plt+0x503c>
   1682c:	add	r4, r5, #3
   16830:	movw	r0, #53688	; 0xd1b8
   16834:	movt	r0, #2
   16838:	str	r4, [r0]
   1683c:	movw	r0, #53696	; 0xd1c0
   16840:	movt	r0, #2
   16844:	str	r4, [r0]
   16848:	movw	r0, #53936	; 0xd2b0
   1684c:	movt	r0, #2
   16850:	str	r4, [r0]
   16854:	pop	{r4, r5, fp, pc}
   16858:	movw	r0, #53712	; 0xd1d0
   1685c:	movt	r0, #2
   16860:	ldr	r3, [r0]
   16864:	movw	r0, #48945	; 0xbf31
   16868:	movt	r0, #1
   1686c:	mov	r1, #55	; 0x37
   16870:	mov	r2, #1
   16874:	bl	11554 <fwrite@plt>
   16878:	bl	117d0 <abort@plt>
   1687c:	push	{r4, r5, r6, sl, fp, lr}
   16880:	add	fp, sp, #16
   16884:	mov	r4, r0
   16888:	movw	r0, #53944	; 0xd2b8
   1688c:	movt	r0, #2
   16890:	cmp	r4, #0
   16894:	moveq	r4, r0
   16898:	bl	11680 <__errno_location@plt>
   1689c:	mov	r5, r0
   168a0:	ldr	r6, [r0]
   168a4:	mov	r0, r4
   168a8:	mov	r1, #48	; 0x30
   168ac:	bl	18cd0 <__assert_fail@plt+0x74d0>
   168b0:	str	r6, [r5]
   168b4:	pop	{r4, r5, r6, sl, fp, pc}
   168b8:	movw	r1, #53944	; 0xd2b8
   168bc:	movt	r1, #2
   168c0:	cmp	r0, #0
   168c4:	movne	r1, r0
   168c8:	ldr	r0, [r1]
   168cc:	bx	lr
   168d0:	movw	r2, #53944	; 0xd2b8
   168d4:	movt	r2, #2
   168d8:	cmp	r0, #0
   168dc:	movne	r2, r0
   168e0:	str	r1, [r2]
   168e4:	bx	lr
   168e8:	movw	r3, #53944	; 0xd2b8
   168ec:	movt	r3, #2
   168f0:	cmp	r0, #0
   168f4:	movne	r3, r0
   168f8:	ubfx	r0, r1, #5, #3
   168fc:	add	ip, r3, r0, lsl #2
   16900:	ldr	r3, [ip, #8]
   16904:	and	r1, r1, #31
   16908:	mov	r0, #1
   1690c:	and	r0, r0, r3, lsr r1
   16910:	and	r2, r2, #1
   16914:	eor	r2, r0, r2
   16918:	eor	r1, r3, r2, lsl r1
   1691c:	str	r1, [ip, #8]
   16920:	bx	lr
   16924:	movw	r2, #53944	; 0xd2b8
   16928:	movt	r2, #2
   1692c:	cmp	r0, #0
   16930:	movne	r2, r0
   16934:	ldr	r0, [r2, #4]
   16938:	str	r1, [r2, #4]
   1693c:	bx	lr
   16940:	push	{fp, lr}
   16944:	mov	fp, sp
   16948:	movw	r3, #53944	; 0xd2b8
   1694c:	movt	r3, #2
   16950:	cmp	r0, #0
   16954:	movne	r3, r0
   16958:	mov	r0, #10
   1695c:	str	r0, [r3]
   16960:	cmp	r1, #0
   16964:	cmpne	r2, #0
   16968:	bne	16970 <__assert_fail@plt+0x5170>
   1696c:	bl	117d0 <abort@plt>
   16970:	str	r1, [r3, #40]	; 0x28
   16974:	str	r2, [r3, #44]	; 0x2c
   16978:	pop	{fp, pc}
   1697c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16980:	add	fp, sp, #28
   16984:	sub	sp, sp, #20
   16988:	mov	r8, r3
   1698c:	mov	r9, r2
   16990:	mov	sl, r1
   16994:	mov	r7, r0
   16998:	ldr	r0, [fp, #8]
   1699c:	movw	r5, #53944	; 0xd2b8
   169a0:	movt	r5, #2
   169a4:	cmp	r0, #0
   169a8:	movne	r5, r0
   169ac:	bl	11680 <__errno_location@plt>
   169b0:	mov	r4, r0
   169b4:	ldm	r5, {r0, r1}
   169b8:	ldr	r2, [r5, #40]	; 0x28
   169bc:	ldr	r3, [r5, #44]	; 0x2c
   169c0:	ldr	r6, [r4]
   169c4:	add	r5, r5, #8
   169c8:	stm	sp, {r0, r1, r5}
   169cc:	str	r2, [sp, #12]
   169d0:	str	r3, [sp, #16]
   169d4:	mov	r0, r7
   169d8:	mov	r1, sl
   169dc:	mov	r2, r9
   169e0:	mov	r3, r8
   169e4:	bl	169f4 <__assert_fail@plt+0x51f4>
   169e8:	str	r6, [r4]
   169ec:	sub	sp, fp, #28
   169f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169f8:	add	fp, sp, #28
   169fc:	sub	sp, sp, #156	; 0x9c
   16a00:	mov	r9, r3
   16a04:	mov	r7, r1
   16a08:	mov	r6, r0
   16a0c:	str	r2, [fp, #-80]	; 0xffffffb0
   16a10:	add	r0, r2, #1
   16a14:	str	r0, [sp, #76]	; 0x4c
   16a18:	ldr	r0, [fp, #12]
   16a1c:	and	r1, r0, #1
   16a20:	str	r1, [sp, #40]	; 0x28
   16a24:	and	r1, r0, #4
   16a28:	str	r1, [sp, #36]	; 0x24
   16a2c:	ubfx	r4, r0, #1, #1
   16a30:	bl	11578 <__ctype_get_mb_cur_max@plt>
   16a34:	str	r0, [sp, #44]	; 0x2c
   16a38:	ldr	r0, [fp, #24]
   16a3c:	str	r0, [sp, #88]	; 0x58
   16a40:	ldr	r0, [fp, #20]
   16a44:	str	r0, [sp, #80]	; 0x50
   16a48:	ldr	r1, [fp, #8]
   16a4c:	mov	r0, #0
   16a50:	str	r0, [sp, #84]	; 0x54
   16a54:	mov	r0, #0
   16a58:	str	r0, [fp, #-84]	; 0xffffffac
   16a5c:	mov	r0, #0
   16a60:	str	r0, [fp, #-72]	; 0xffffffb8
   16a64:	mov	r0, #0
   16a68:	mov	r2, #0
   16a6c:	str	r2, [fp, #-56]	; 0xffffffc8
   16a70:	mov	r2, #0
   16a74:	str	r2, [sp, #64]	; 0x40
   16a78:	mov	r2, #1
   16a7c:	str	r2, [fp, #-48]	; 0xffffffd0
   16a80:	cmp	r1, #10
   16a84:	bhi	179b0 <__assert_fail@plt+0x61b0>
   16a88:	mov	sl, r7
   16a8c:	mov	r7, r1
   16a90:	add	r1, pc, #24
   16a94:	mov	r8, #0
   16a98:	mov	r2, #1
   16a9c:	mov	r3, #0
   16aa0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16aa4:	mov	lr, r9
   16aa8:	mov	r5, r6
   16aac:	ldr	pc, [r1, r7, lsl #2]
   16ab0:	andeq	r6, r1, r4, lsl #23
   16ab4:	andeq	r6, r1, r4, asr #23
   16ab8:	muleq	r1, r4, fp
   16abc:	andeq	r6, r1, ip, ror fp
   16ac0:			; <UNDEFINED> instruction: 0x00016bb8
   16ac4:	andeq	r6, r1, r8, lsl ip
   16ac8:	andeq	r6, r1, r4, lsr #23
   16acc:	andeq	r6, r1, r4, ror ip
   16ad0:	ldrdeq	r6, [r1], -ip
   16ad4:	ldrdeq	r6, [r1], -ip
   16ad8:	andeq	r6, r1, r8, lsl #22
   16adc:	movw	r0, #49091	; 0xbfc3
   16ae0:	movt	r0, #1
   16ae4:	mov	r1, r7
   16ae8:	bl	17fb8 <__assert_fail@plt+0x67b8>
   16aec:	str	r0, [sp, #80]	; 0x50
   16af0:	movw	r0, #48925	; 0xbf1d
   16af4:	movt	r0, #1
   16af8:	mov	r1, r7
   16afc:	bl	17fb8 <__assert_fail@plt+0x67b8>
   16b00:	mov	r5, r6
   16b04:	str	r0, [sp, #88]	; 0x58
   16b08:	mov	r8, #0
   16b0c:	tst	r4, #1
   16b10:	str	r7, [fp, #-64]	; 0xffffffc0
   16b14:	bne	16b4c <__assert_fail@plt+0x534c>
   16b18:	ldr	r0, [sp, #80]	; 0x50
   16b1c:	ldrb	r0, [r0]
   16b20:	cmp	r0, #0
   16b24:	beq	16b4c <__assert_fail@plt+0x534c>
   16b28:	ldr	r1, [sp, #80]	; 0x50
   16b2c:	add	r1, r1, #1
   16b30:	mov	r8, #0
   16b34:	cmp	r8, sl
   16b38:	strbcc	r0, [r5, r8]
   16b3c:	ldrb	r0, [r1, r8]
   16b40:	add	r8, r8, #1
   16b44:	cmp	r0, #0
   16b48:	bne	16b34 <__assert_fail@plt+0x5334>
   16b4c:	ldr	r7, [sp, #88]	; 0x58
   16b50:	mov	r0, r7
   16b54:	bl	11650 <strlen@plt>
   16b58:	mov	r5, r6
   16b5c:	str	r0, [fp, #-72]	; 0xffffffb8
   16b60:	str	r7, [fp, #-84]	; 0xffffffac
   16b64:	mov	r2, #1
   16b68:	mov	r3, r4
   16b6c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16b70:	mov	lr, r9
   16b74:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16b78:	b	16c74 <__assert_fail@plt+0x5474>
   16b7c:	mov	r0, #1
   16b80:	b	16bc4 <__assert_fail@plt+0x53c4>
   16b84:	mov	r7, #0
   16b88:	mov	r8, #0
   16b8c:	mov	r2, r0
   16b90:	b	16c70 <__assert_fail@plt+0x5470>
   16b94:	tst	r4, #1
   16b98:	bne	16bc4 <__assert_fail@plt+0x53c4>
   16b9c:	mov	r2, r0
   16ba0:	b	16bec <__assert_fail@plt+0x53ec>
   16ba4:	mov	r0, #1
   16ba8:	str	r0, [fp, #-72]	; 0xffffffb8
   16bac:	mov	r8, #0
   16bb0:	mov	r7, #5
   16bb4:	b	16c30 <__assert_fail@plt+0x5430>
   16bb8:	mov	r2, #1
   16bbc:	tst	r4, #1
   16bc0:	beq	16bec <__assert_fail@plt+0x53ec>
   16bc4:	mov	r1, #1
   16bc8:	str	r1, [fp, #-72]	; 0xffffffb8
   16bcc:	mov	r8, #0
   16bd0:	mov	r7, #2
   16bd4:	movw	r1, #48925	; 0xbf1d
   16bd8:	movt	r1, #1
   16bdc:	str	r1, [fp, #-84]	; 0xffffffac
   16be0:	mov	r2, r0
   16be4:	mov	r3, #1
   16be8:	b	16c74 <__assert_fail@plt+0x5474>
   16bec:	mov	r8, #1
   16bf0:	mov	r7, #2
   16bf4:	cmp	sl, #0
   16bf8:	movne	r0, #39	; 0x27
   16bfc:	strbne	r0, [r5]
   16c00:	movw	r0, #48925	; 0xbf1d
   16c04:	movt	r0, #1
   16c08:	str	r0, [fp, #-84]	; 0xffffffac
   16c0c:	mov	r0, #1
   16c10:	str	r0, [fp, #-72]	; 0xffffffb8
   16c14:	b	16c70 <__assert_fail@plt+0x5470>
   16c18:	mov	r7, #5
   16c1c:	tst	r4, #1
   16c20:	beq	16c48 <__assert_fail@plt+0x5448>
   16c24:	mov	r0, #1
   16c28:	str	r0, [fp, #-72]	; 0xffffffb8
   16c2c:	mov	r8, #0
   16c30:	movw	r0, #49089	; 0xbfc1
   16c34:	movt	r0, #1
   16c38:	str	r0, [fp, #-84]	; 0xffffffac
   16c3c:	mov	r2, #1
   16c40:	mov	r3, #1
   16c44:	b	16c74 <__assert_fail@plt+0x5474>
   16c48:	cmp	sl, #0
   16c4c:	movne	r0, #34	; 0x22
   16c50:	strbne	r0, [r5]
   16c54:	mov	r8, #1
   16c58:	movw	r0, #49089	; 0xbfc1
   16c5c:	movt	r0, #1
   16c60:	str	r0, [fp, #-84]	; 0xffffffac
   16c64:	mov	r0, #1
   16c68:	str	r0, [fp, #-72]	; 0xffffffb8
   16c6c:	mov	r2, #1
   16c70:	mov	r3, #0
   16c74:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16c78:	cmp	r0, #0
   16c7c:	movwne	r0, #1
   16c80:	and	r1, r0, r3
   16c84:	and	r1, r2, r1
   16c88:	str	r1, [sp, #56]	; 0x38
   16c8c:	sub	r1, r7, #2
   16c90:	clz	r1, r1
   16c94:	lsr	r1, r1, #5
   16c98:	and	r1, r1, r3
   16c9c:	str	r1, [sp, #68]	; 0x44
   16ca0:	str	r7, [fp, #-64]	; 0xffffffc0
   16ca4:	subs	r1, r7, #2
   16ca8:	movwne	r1, #1
   16cac:	eor	r4, r3, #1
   16cb0:	str	r4, [fp, #-88]	; 0xffffffa8
   16cb4:	orr	r4, r1, r4
   16cb8:	str	r4, [sp, #72]	; 0x48
   16cbc:	and	r1, r1, r2
   16cc0:	and	r0, r0, r1
   16cc4:	str	r0, [fp, #-60]	; 0xffffffc4
   16cc8:	str	r3, [fp, #-76]	; 0xffffffb4
   16ccc:	orr	r0, r1, r3
   16cd0:	eor	r0, r0, #1
   16cd4:	ldr	r1, [fp, #16]
   16cd8:	clz	r1, r1
   16cdc:	lsr	r1, r1, #5
   16ce0:	orr	r0, r1, r0
   16ce4:	str	r0, [fp, #-68]	; 0xffffffbc
   16ce8:	str	r2, [sp, #92]	; 0x5c
   16cec:	eor	r0, r2, #1
   16cf0:	str	r0, [sp, #60]	; 0x3c
   16cf4:	mov	r7, #0
   16cf8:	cmn	lr, #1
   16cfc:	beq	16d0c <__assert_fail@plt+0x550c>
   16d00:	cmp	r7, lr
   16d04:	bne	16d18 <__assert_fail@plt+0x5518>
   16d08:	b	17824 <__assert_fail@plt+0x6024>
   16d0c:	ldrb	r0, [ip, r7]
   16d10:	cmp	r0, #0
   16d14:	beq	17824 <__assert_fail@plt+0x6024>
   16d18:	mov	r9, #0
   16d1c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16d20:	cmp	r0, #0
   16d24:	beq	16d58 <__assert_fail@plt+0x5558>
   16d28:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16d2c:	add	r4, r7, r0
   16d30:	cmp	r0, #2
   16d34:	bcc	16d50 <__assert_fail@plt+0x5550>
   16d38:	cmn	lr, #1
   16d3c:	bne	16d50 <__assert_fail@plt+0x5550>
   16d40:	mov	r0, ip
   16d44:	bl	11650 <strlen@plt>
   16d48:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16d4c:	mov	lr, r0
   16d50:	cmp	r4, lr
   16d54:	bls	16d64 <__assert_fail@plt+0x5564>
   16d58:	mov	r0, #0
   16d5c:	str	r0, [fp, #-52]	; 0xffffffcc
   16d60:	b	16da8 <__assert_fail@plt+0x55a8>
   16d64:	mov	r4, lr
   16d68:	add	r0, ip, r7
   16d6c:	ldr	r1, [fp, #-84]	; 0xffffffac
   16d70:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16d74:	bl	11638 <bcmp@plt>
   16d78:	cmp	r0, #0
   16d7c:	mov	r1, r0
   16d80:	movwne	r1, #1
   16d84:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16d88:	orr	r1, r1, r2
   16d8c:	tst	r1, #1
   16d90:	beq	178f8 <__assert_fail@plt+0x60f8>
   16d94:	clz	r0, r0
   16d98:	lsr	r0, r0, #5
   16d9c:	str	r0, [fp, #-52]	; 0xffffffcc
   16da0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16da4:	mov	lr, r4
   16da8:	ldrb	r4, [ip, r7]
   16dac:	cmp	r4, #126	; 0x7e
   16db0:	bhi	172e0 <__assert_fail@plt+0x5ae0>
   16db4:	mov	r6, #1
   16db8:	mov	r2, #110	; 0x6e
   16dbc:	mov	r0, #97	; 0x61
   16dc0:	add	r3, pc, #4
   16dc4:	mov	r1, #0
   16dc8:	ldr	pc, [r3, r4, lsl #2]
   16dcc:	andeq	r7, r1, r0, asr #2
   16dd0:	andeq	r7, r1, r0, ror #5
   16dd4:	andeq	r7, r1, r0, ror #5
   16dd8:	andeq	r7, r1, r0, ror #5
   16ddc:	andeq	r7, r1, r0, ror #5
   16de0:	andeq	r7, r1, r0, ror #5
   16de4:	andeq	r7, r1, r0, ror #5
   16de8:			; <UNDEFINED> instruction: 0x000173b4
   16dec:	andeq	r7, r1, r0, lsr #2
   16df0:	andeq	r7, r1, r8, lsl r1
   16df4:	andeq	r7, r1, ip, lsr #2
   16df8:	andeq	r7, r1, r8, asr #4
   16dfc:	andeq	r7, r1, r0, lsl r1
   16e00:	andeq	r7, r1, r8, lsr #2
   16e04:	andeq	r7, r1, r0, ror #5
   16e08:	andeq	r7, r1, r0, ror #5
   16e0c:	andeq	r7, r1, r0, ror #5
   16e10:	andeq	r7, r1, r0, ror #5
   16e14:	andeq	r7, r1, r0, ror #5
   16e18:	andeq	r7, r1, r0, ror #5
   16e1c:	andeq	r7, r1, r0, ror #5
   16e20:	andeq	r7, r1, r0, ror #5
   16e24:	andeq	r7, r1, r0, ror #5
   16e28:	andeq	r7, r1, r0, ror #5
   16e2c:	andeq	r7, r1, r0, ror #5
   16e30:	andeq	r7, r1, r0, ror #5
   16e34:	andeq	r7, r1, r0, ror #5
   16e38:	andeq	r7, r1, r0, ror #5
   16e3c:	andeq	r7, r1, r0, ror #5
   16e40:	andeq	r7, r1, r0, ror #5
   16e44:	andeq	r7, r1, r0, ror #5
   16e48:	andeq	r7, r1, r0, ror #5
   16e4c:	andeq	r7, r1, r4, asr #1
   16e50:	andeq	r7, r1, r8, asr #1
   16e54:	andeq	r7, r1, r8, asr #1
   16e58:	strheq	r7, [r1], -r0
   16e5c:	andeq	r7, r1, r8, asr #1
   16e60:	andeq	r6, r1, r8, asr #31
   16e64:	andeq	r7, r1, r8, asr #1
   16e68:	andeq	r7, r1, r0, asr r2
   16e6c:	andeq	r7, r1, r8, asr #1
   16e70:	andeq	r7, r1, r8, asr #1
   16e74:	andeq	r7, r1, r8, asr #1
   16e78:	andeq	r6, r1, r8, asr #31
   16e7c:	andeq	r6, r1, r8, asr #31
   16e80:	andeq	r6, r1, r8, asr #31
   16e84:	andeq	r6, r1, r8, asr #31
   16e88:	andeq	r6, r1, r8, asr #31
   16e8c:	andeq	r6, r1, r8, asr #31
   16e90:	andeq	r6, r1, r8, asr #31
   16e94:	andeq	r6, r1, r8, asr #31
   16e98:	andeq	r6, r1, r8, asr #31
   16e9c:	andeq	r6, r1, r8, asr #31
   16ea0:	andeq	r6, r1, r8, asr #31
   16ea4:	andeq	r6, r1, r8, asr #31
   16ea8:	andeq	r6, r1, r8, asr #31
   16eac:	andeq	r6, r1, r8, asr #31
   16eb0:	andeq	r6, r1, r8, asr #31
   16eb4:	andeq	r6, r1, r8, asr #31
   16eb8:	andeq	r7, r1, r8, asr #1
   16ebc:	andeq	r7, r1, r8, asr #1
   16ec0:	andeq	r7, r1, r8, asr #1
   16ec4:	andeq	r7, r1, r8, asr #1
   16ec8:	andeq	r7, r1, r8, lsl r2
   16ecc:	andeq	r7, r1, r0, ror #5
   16ed0:	andeq	r6, r1, r8, asr #31
   16ed4:	andeq	r6, r1, r8, asr #31
   16ed8:	andeq	r6, r1, r8, asr #31
   16edc:	andeq	r6, r1, r8, asr #31
   16ee0:	andeq	r6, r1, r8, asr #31
   16ee4:	andeq	r6, r1, r8, asr #31
   16ee8:	andeq	r6, r1, r8, asr #31
   16eec:	andeq	r6, r1, r8, asr #31
   16ef0:	andeq	r6, r1, r8, asr #31
   16ef4:	andeq	r6, r1, r8, asr #31
   16ef8:	andeq	r6, r1, r8, asr #31
   16efc:	andeq	r6, r1, r8, asr #31
   16f00:	andeq	r6, r1, r8, asr #31
   16f04:	andeq	r6, r1, r8, asr #31
   16f08:	andeq	r6, r1, r8, asr #31
   16f0c:	andeq	r6, r1, r8, asr #31
   16f10:	andeq	r6, r1, r8, asr #31
   16f14:	andeq	r6, r1, r8, asr #31
   16f18:	andeq	r6, r1, r8, asr #31
   16f1c:	andeq	r6, r1, r8, asr #31
   16f20:	andeq	r6, r1, r8, asr #31
   16f24:	andeq	r6, r1, r8, asr #31
   16f28:	andeq	r6, r1, r8, asr #31
   16f2c:	andeq	r6, r1, r8, asr #31
   16f30:	andeq	r6, r1, r8, asr #31
   16f34:	andeq	r6, r1, r8, asr #31
   16f38:	andeq	r7, r1, r8, asr #1
   16f3c:	strdeq	r7, [r1], -r0
   16f40:	andeq	r6, r1, r8, asr #31
   16f44:	andeq	r7, r1, r8, asr #1
   16f48:	andeq	r6, r1, r8, asr #31
   16f4c:	andeq	r7, r1, r8, asr #1
   16f50:	andeq	r6, r1, r8, asr #31
   16f54:	andeq	r6, r1, r8, asr #31
   16f58:	andeq	r6, r1, r8, asr #31
   16f5c:	andeq	r6, r1, r8, asr #31
   16f60:	andeq	r6, r1, r8, asr #31
   16f64:	andeq	r6, r1, r8, asr #31
   16f68:	andeq	r6, r1, r8, asr #31
   16f6c:	andeq	r6, r1, r8, asr #31
   16f70:	andeq	r6, r1, r8, asr #31
   16f74:	andeq	r6, r1, r8, asr #31
   16f78:	andeq	r6, r1, r8, asr #31
   16f7c:	andeq	r6, r1, r8, asr #31
   16f80:	andeq	r6, r1, r8, asr #31
   16f84:	andeq	r6, r1, r8, asr #31
   16f88:	andeq	r6, r1, r8, asr #31
   16f8c:	andeq	r6, r1, r8, asr #31
   16f90:	andeq	r6, r1, r8, asr #31
   16f94:	andeq	r6, r1, r8, asr #31
   16f98:	andeq	r6, r1, r8, asr #31
   16f9c:	andeq	r6, r1, r8, asr #31
   16fa0:	andeq	r6, r1, r8, asr #31
   16fa4:	andeq	r6, r1, r8, asr #31
   16fa8:	andeq	r6, r1, r8, asr #31
   16fac:	andeq	r6, r1, r8, asr #31
   16fb0:	andeq	r6, r1, r8, asr #31
   16fb4:	andeq	r6, r1, r8, asr #31
   16fb8:	andeq	r7, r1, r4, lsl #1
   16fbc:	andeq	r7, r1, r8, asr #1
   16fc0:	andeq	r7, r1, r4, lsl #1
   16fc4:	strheq	r7, [r1], -r0
   16fc8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16fcc:	tst	r0, #1
   16fd0:	bne	16ffc <__assert_fail@plt+0x57fc>
   16fd4:	ubfx	r0, r4, #5, #3
   16fd8:	ldr	r1, [fp, #16]
   16fdc:	ldr	r0, [r1, r0, lsl #2]
   16fe0:	and	r1, r4, #31
   16fe4:	mov	r2, #1
   16fe8:	tst	r0, r2, lsl r1
   16fec:	beq	16ffc <__assert_fail@plt+0x57fc>
   16ff0:	mov	r0, r4
   16ff4:	mov	r1, r6
   16ff8:	b	17010 <__assert_fail@plt+0x5810>
   16ffc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17000:	cmp	r0, #0
   17004:	mov	r0, r4
   17008:	mov	r1, r6
   1700c:	beq	17348 <__assert_fail@plt+0x5b48>
   17010:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17014:	tst	r2, #1
   17018:	bne	1790c <__assert_fail@plt+0x610c>
   1701c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   17020:	subs	r2, r2, #2
   17024:	movwne	r2, #1
   17028:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1702c:	orr	r2, r2, r3
   17030:	tst	r2, #1
   17034:	bne	17070 <__assert_fail@plt+0x5870>
   17038:	cmp	r8, sl
   1703c:	movcc	r2, #39	; 0x27
   17040:	strbcc	r2, [r5, r8]
   17044:	add	r2, r8, #1
   17048:	cmp	r2, sl
   1704c:	movcc	r3, #36	; 0x24
   17050:	strbcc	r3, [r5, r2]
   17054:	add	r2, r8, #2
   17058:	cmp	r2, sl
   1705c:	movcc	r3, #39	; 0x27
   17060:	strbcc	r3, [r5, r2]
   17064:	add	r8, r8, #3
   17068:	mov	r2, #1
   1706c:	str	r2, [fp, #-56]	; 0xffffffc8
   17070:	cmp	r8, sl
   17074:	movcc	r2, #92	; 0x5c
   17078:	strbcc	r2, [r5, r8]
   1707c:	add	r8, r8, #1
   17080:	b	1738c <__assert_fail@plt+0x5b8c>
   17084:	cmp	lr, #1
   17088:	beq	170b0 <__assert_fail@plt+0x58b0>
   1708c:	mov	r6, #0
   17090:	cmn	lr, #1
   17094:	bne	170bc <__assert_fail@plt+0x58bc>
   17098:	ldrb	r0, [ip, #1]
   1709c:	cmp	r0, #0
   170a0:	beq	170b0 <__assert_fail@plt+0x58b0>
   170a4:	mvn	lr, #0
   170a8:	mov	r9, #0
   170ac:	b	16fc8 <__assert_fail@plt+0x57c8>
   170b0:	mov	r6, #0
   170b4:	cmp	r7, #0
   170b8:	beq	170c4 <__assert_fail@plt+0x58c4>
   170bc:	mov	r9, #0
   170c0:	b	16fc8 <__assert_fail@plt+0x57c8>
   170c4:	mov	r1, #1
   170c8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   170cc:	cmp	r0, #2
   170d0:	bne	170e8 <__assert_fail@plt+0x58e8>
   170d4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   170d8:	tst	r0, #1
   170dc:	mov	r6, r1
   170e0:	beq	16fc8 <__assert_fail@plt+0x57c8>
   170e4:	b	1790c <__assert_fail@plt+0x610c>
   170e8:	mov	r6, r1
   170ec:	b	16fc8 <__assert_fail@plt+0x57c8>
   170f0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   170f4:	cmp	r0, #2
   170f8:	bne	1732c <__assert_fail@plt+0x5b2c>
   170fc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17100:	tst	r0, #1
   17104:	bne	1790c <__assert_fail@plt+0x610c>
   17108:	mov	r9, #0
   1710c:	b	17340 <__assert_fail@plt+0x5b40>
   17110:	mov	r0, #102	; 0x66
   17114:	b	173b4 <__assert_fail@plt+0x5bb4>
   17118:	mov	r2, #116	; 0x74
   1711c:	b	1712c <__assert_fail@plt+0x592c>
   17120:	mov	r0, #98	; 0x62
   17124:	b	173b4 <__assert_fail@plt+0x5bb4>
   17128:	mov	r2, #114	; 0x72
   1712c:	ldr	r0, [sp, #72]	; 0x48
   17130:	tst	r0, #1
   17134:	mov	r0, r2
   17138:	bne	173b4 <__assert_fail@plt+0x5bb4>
   1713c:	b	1790c <__assert_fail@plt+0x610c>
   17140:	ldr	r0, [sp, #92]	; 0x5c
   17144:	tst	r0, #1
   17148:	beq	173d0 <__assert_fail@plt+0x5bd0>
   1714c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17150:	tst	r0, #1
   17154:	bne	1790c <__assert_fail@plt+0x610c>
   17158:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1715c:	subs	r0, r0, #2
   17160:	movwne	r0, #1
   17164:	ldr	r1, [fp, #-56]	; 0xffffffc8
   17168:	orr	r0, r0, r1
   1716c:	tst	r0, #1
   17170:	bne	171ac <__assert_fail@plt+0x59ac>
   17174:	cmp	r8, sl
   17178:	movcc	r0, #39	; 0x27
   1717c:	strbcc	r0, [r5, r8]
   17180:	add	r0, r8, #1
   17184:	cmp	r0, sl
   17188:	movcc	r1, #36	; 0x24
   1718c:	strbcc	r1, [r5, r0]
   17190:	add	r0, r8, #2
   17194:	cmp	r0, sl
   17198:	movcc	r1, #39	; 0x27
   1719c:	strbcc	r1, [r5, r0]
   171a0:	add	r8, r8, #3
   171a4:	mov	r0, #1
   171a8:	str	r0, [fp, #-56]	; 0xffffffc8
   171ac:	cmp	r8, sl
   171b0:	movcc	r0, #92	; 0x5c
   171b4:	strbcc	r0, [r5, r8]
   171b8:	add	r0, r8, #1
   171bc:	mov	r6, #0
   171c0:	mov	r9, #1
   171c4:	mov	r4, #48	; 0x30
   171c8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   171cc:	cmp	r1, #2
   171d0:	beq	17594 <__assert_fail@plt+0x5d94>
   171d4:	add	r1, r7, #1
   171d8:	cmp	r1, lr
   171dc:	bcs	17594 <__assert_fail@plt+0x5d94>
   171e0:	ldrb	r1, [ip, r1]
   171e4:	sub	r1, r1, #48	; 0x30
   171e8:	uxtb	r1, r1
   171ec:	cmp	r1, #9
   171f0:	bhi	17594 <__assert_fail@plt+0x5d94>
   171f4:	cmp	r0, sl
   171f8:	movcc	r1, #48	; 0x30
   171fc:	strbcc	r1, [r5, r0]
   17200:	add	r0, r8, #2
   17204:	cmp	r0, sl
   17208:	movcc	r1, #48	; 0x30
   1720c:	strbcc	r1, [r5, r0]
   17210:	add	r8, r8, #3
   17214:	b	16fc8 <__assert_fail@plt+0x57c8>
   17218:	mov	r9, #0
   1721c:	mov	r4, #63	; 0x3f
   17220:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17224:	cmp	r0, #5
   17228:	beq	1759c <__assert_fail@plt+0x5d9c>
   1722c:	cmp	r0, #2
   17230:	bne	17644 <__assert_fail@plt+0x5e44>
   17234:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17238:	tst	r0, #1
   1723c:	mov	r6, #0
   17240:	beq	16fc8 <__assert_fail@plt+0x57c8>
   17244:	b	1790c <__assert_fail@plt+0x610c>
   17248:	mov	r0, #118	; 0x76
   1724c:	b	173b4 <__assert_fail@plt+0x5bb4>
   17250:	mov	r4, #39	; 0x27
   17254:	mov	r0, #1
   17258:	str	r0, [sp, #64]	; 0x40
   1725c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17260:	cmp	r0, #2
   17264:	bne	173ec <__assert_fail@plt+0x5bec>
   17268:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1726c:	tst	r0, #1
   17270:	bne	1790c <__assert_fail@plt+0x610c>
   17274:	ldr	r2, [sp, #84]	; 0x54
   17278:	cmp	r2, #0
   1727c:	mov	r0, r2
   17280:	movwne	r0, #1
   17284:	clz	r1, sl
   17288:	lsr	r1, r1, #5
   1728c:	orrs	r0, r0, r1
   17290:	moveq	r2, sl
   17294:	str	r2, [sp, #84]	; 0x54
   17298:	moveq	sl, r0
   1729c:	cmp	r8, sl
   172a0:	movcc	r0, #39	; 0x27
   172a4:	strbcc	r0, [r5, r8]
   172a8:	add	r0, r8, #1
   172ac:	cmp	r0, sl
   172b0:	movcc	r1, #92	; 0x5c
   172b4:	strbcc	r1, [r5, r0]
   172b8:	add	r0, r8, #2
   172bc:	cmp	r0, sl
   172c0:	movcc	r1, #39	; 0x27
   172c4:	strbcc	r1, [r5, r0]
   172c8:	add	r8, r8, #3
   172cc:	mov	r0, #0
   172d0:	str	r0, [fp, #-56]	; 0xffffffc8
   172d4:	mov	r9, #0
   172d8:	mov	r6, #1
   172dc:	b	16fc8 <__assert_fail@plt+0x57c8>
   172e0:	ldr	r0, [sp, #44]	; 0x2c
   172e4:	cmp	r0, #1
   172e8:	bne	173f4 <__assert_fail@plt+0x5bf4>
   172ec:	str	lr, [sp, #32]
   172f0:	bl	11614 <__ctype_b_loc@plt>
   172f4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   172f8:	ldr	r0, [r0]
   172fc:	add	r0, r0, r4, lsl #1
   17300:	ldrb	r0, [r0, #1]
   17304:	ubfx	r6, r0, #6, #1
   17308:	mov	r2, #1
   1730c:	ldr	r0, [sp, #60]	; 0x3c
   17310:	orr	r1, r6, r0
   17314:	cmp	r2, #1
   17318:	bhi	1764c <__assert_fail@plt+0x5e4c>
   1731c:	tst	r1, #1
   17320:	beq	1764c <__assert_fail@plt+0x5e4c>
   17324:	ldr	lr, [sp, #32]
   17328:	b	16fc8 <__assert_fail@plt+0x57c8>
   1732c:	mov	r9, #0
   17330:	mov	r0, #92	; 0x5c
   17334:	ldr	r1, [sp, #56]	; 0x38
   17338:	cmp	r1, #0
   1733c:	beq	173b4 <__assert_fail@plt+0x5bb4>
   17340:	mov	r4, #92	; 0x5c
   17344:	mov	r6, #0
   17348:	cmp	r9, #0
   1734c:	bne	17384 <__assert_fail@plt+0x5b84>
   17350:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17354:	tst	r0, #1
   17358:	beq	17384 <__assert_fail@plt+0x5b84>
   1735c:	cmp	r8, sl
   17360:	movcc	r0, #39	; 0x27
   17364:	strbcc	r0, [r5, r8]
   17368:	add	r0, r8, #1
   1736c:	cmp	r0, sl
   17370:	movcc	r1, #39	; 0x27
   17374:	strbcc	r1, [r5, r0]
   17378:	add	r8, r8, #2
   1737c:	mov	r0, #0
   17380:	str	r0, [fp, #-56]	; 0xffffffc8
   17384:	mov	r1, r6
   17388:	mov	r0, r4
   1738c:	cmp	r8, sl
   17390:	strbcc	r0, [r5, r8]
   17394:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17398:	and	r0, r0, r1
   1739c:	str	r0, [fp, #-48]	; 0xffffffd0
   173a0:	add	r8, r8, #1
   173a4:	add	r7, r7, #1
   173a8:	cmn	lr, #1
   173ac:	bne	16d00 <__assert_fail@plt+0x5500>
   173b0:	b	16d0c <__assert_fail@plt+0x550c>
   173b4:	mov	r9, #0
   173b8:	ldr	r1, [sp, #92]	; 0x5c
   173bc:	tst	r1, #1
   173c0:	mov	r6, #0
   173c4:	mov	r1, #0
   173c8:	beq	16fc8 <__assert_fail@plt+0x57c8>
   173cc:	b	17010 <__assert_fail@plt+0x5810>
   173d0:	mov	r4, #0
   173d4:	ldr	r0, [sp, #40]	; 0x28
   173d8:	cmp	r0, #0
   173dc:	mov	r9, #0
   173e0:	mov	r6, #0
   173e4:	beq	16fc8 <__assert_fail@plt+0x57c8>
   173e8:	b	173a4 <__assert_fail@plt+0x5ba4>
   173ec:	mov	r6, #1
   173f0:	b	16fc8 <__assert_fail@plt+0x57c8>
   173f4:	mov	r0, #0
   173f8:	str	r0, [fp, #-36]	; 0xffffffdc
   173fc:	str	r0, [fp, #-40]	; 0xffffffd8
   17400:	cmn	lr, #1
   17404:	bne	17418 <__assert_fail@plt+0x5c18>
   17408:	mov	r0, ip
   1740c:	bl	11650 <strlen@plt>
   17410:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17414:	mov	lr, r0
   17418:	ldr	r0, [sp, #76]	; 0x4c
   1741c:	add	r0, r0, r7
   17420:	str	r0, [sp, #24]
   17424:	mov	r6, #1
   17428:	mov	r2, #0
   1742c:	sub	r0, fp, #40	; 0x28
   17430:	mov	r3, r0
   17434:	str	r5, [sp, #28]
   17438:	str	lr, [sp, #32]
   1743c:	b	17480 <__assert_fail@plt+0x5c80>
   17440:	ldr	r5, [sp, #52]	; 0x34
   17444:	add	r5, r0, r5
   17448:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1744c:	bl	11530 <iswprint@plt>
   17450:	cmp	r0, #0
   17454:	movwne	r0, #1
   17458:	and	r6, r6, r0
   1745c:	sub	r0, fp, #40	; 0x28
   17460:	bl	114c4 <mbsinit@plt>
   17464:	sub	r3, fp, #40	; 0x28
   17468:	mov	r2, r5
   1746c:	ldr	lr, [sp, #32]
   17470:	cmp	r0, #0
   17474:	ldr	r5, [sp, #28]
   17478:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1747c:	bne	1730c <__assert_fail@plt+0x5b0c>
   17480:	str	r2, [sp, #52]	; 0x34
   17484:	add	r0, r2, r7
   17488:	add	r1, ip, r0
   1748c:	str	r0, [sp, #48]	; 0x30
   17490:	sub	r2, lr, r0
   17494:	sub	r0, fp, #44	; 0x2c
   17498:	bl	1965c <__assert_fail@plt+0x7e5c>
   1749c:	cmp	r0, #0
   174a0:	beq	17818 <__assert_fail@plt+0x6018>
   174a4:	cmn	r0, #1
   174a8:	beq	177d4 <__assert_fail@plt+0x5fd4>
   174ac:	cmn	r0, #2
   174b0:	ldr	lr, [sp, #32]
   174b4:	beq	177dc <__assert_fail@plt+0x5fdc>
   174b8:	cmp	r0, #2
   174bc:	mov	r1, #0
   174c0:	movwcc	r1, #1
   174c4:	ldr	r2, [sp, #68]	; 0x44
   174c8:	eor	r2, r2, #1
   174cc:	orrs	r1, r2, r1
   174d0:	bne	17440 <__assert_fail@plt+0x5c40>
   174d4:	ldr	r1, [sp, #52]	; 0x34
   174d8:	ldr	r2, [sp, #24]
   174dc:	add	r1, r2, r1
   174e0:	sub	r2, r0, #1
   174e4:	b	174f4 <__assert_fail@plt+0x5cf4>
   174e8:	add	r1, r1, #1
   174ec:	subs	r2, r2, #1
   174f0:	beq	17440 <__assert_fail@plt+0x5c40>
   174f4:	ldrb	r3, [r1]
   174f8:	sub	r3, r3, #91	; 0x5b
   174fc:	cmp	r3, #33	; 0x21
   17500:	bhi	174e8 <__assert_fail@plt+0x5ce8>
   17504:	add	r5, pc, #0
   17508:	ldr	pc, [r5, r3, lsl #2]
   1750c:	andeq	r7, r1, r4, lsl #18
   17510:	andeq	r7, r1, r4, lsl #18
   17514:	andeq	r7, r1, r8, ror #9
   17518:	andeq	r7, r1, r4, lsl #18
   1751c:	andeq	r7, r1, r8, ror #9
   17520:	andeq	r7, r1, r4, lsl #18
   17524:	andeq	r7, r1, r8, ror #9
   17528:	andeq	r7, r1, r8, ror #9
   1752c:	andeq	r7, r1, r8, ror #9
   17530:	andeq	r7, r1, r8, ror #9
   17534:	andeq	r7, r1, r8, ror #9
   17538:	andeq	r7, r1, r8, ror #9
   1753c:	andeq	r7, r1, r8, ror #9
   17540:	andeq	r7, r1, r8, ror #9
   17544:	andeq	r7, r1, r8, ror #9
   17548:	andeq	r7, r1, r8, ror #9
   1754c:	andeq	r7, r1, r8, ror #9
   17550:	andeq	r7, r1, r8, ror #9
   17554:	andeq	r7, r1, r8, ror #9
   17558:	andeq	r7, r1, r8, ror #9
   1755c:	andeq	r7, r1, r8, ror #9
   17560:	andeq	r7, r1, r8, ror #9
   17564:	andeq	r7, r1, r8, ror #9
   17568:	andeq	r7, r1, r8, ror #9
   1756c:	andeq	r7, r1, r8, ror #9
   17570:	andeq	r7, r1, r8, ror #9
   17574:	andeq	r7, r1, r8, ror #9
   17578:	andeq	r7, r1, r8, ror #9
   1757c:	andeq	r7, r1, r8, ror #9
   17580:	andeq	r7, r1, r8, ror #9
   17584:	andeq	r7, r1, r8, ror #9
   17588:	andeq	r7, r1, r8, ror #9
   1758c:	andeq	r7, r1, r8, ror #9
   17590:	andeq	r7, r1, r4, lsl #18
   17594:	mov	r8, r0
   17598:	b	16fc8 <__assert_fail@plt+0x57c8>
   1759c:	ldr	r0, [sp, #36]	; 0x24
   175a0:	cmp	r0, #0
   175a4:	beq	17644 <__assert_fail@plt+0x5e44>
   175a8:	add	r0, r7, #2
   175ac:	cmp	r0, lr
   175b0:	bcs	17644 <__assert_fail@plt+0x5e44>
   175b4:	add	r1, r7, ip
   175b8:	ldrb	r1, [r1, #1]
   175bc:	cmp	r1, #63	; 0x3f
   175c0:	bne	17644 <__assert_fail@plt+0x5e44>
   175c4:	ldrb	r1, [ip, r0]
   175c8:	sub	r2, r1, #33	; 0x21
   175cc:	cmp	r2, #29
   175d0:	bhi	17644 <__assert_fail@plt+0x5e44>
   175d4:	mov	r3, #1
   175d8:	movw	r6, #20929	; 0x51c1
   175dc:	movt	r6, #14336	; 0x3800
   175e0:	tst	r6, r3, lsl r2
   175e4:	beq	17644 <__assert_fail@plt+0x5e44>
   175e8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   175ec:	tst	r2, #1
   175f0:	bne	1790c <__assert_fail@plt+0x610c>
   175f4:	cmp	r8, sl
   175f8:	movcc	r2, #63	; 0x3f
   175fc:	strbcc	r2, [r5, r8]
   17600:	add	r2, r8, #1
   17604:	cmp	r2, sl
   17608:	movcc	r3, #34	; 0x22
   1760c:	strbcc	r3, [r5, r2]
   17610:	add	r2, r8, #2
   17614:	cmp	r2, sl
   17618:	movcc	r3, #34	; 0x22
   1761c:	strbcc	r3, [r5, r2]
   17620:	add	r2, r8, #3
   17624:	cmp	r2, sl
   17628:	movcc	r3, #63	; 0x3f
   1762c:	strbcc	r3, [r5, r2]
   17630:	add	r8, r8, #4
   17634:	mov	r7, r0
   17638:	mov	r4, r1
   1763c:	mov	r6, #0
   17640:	b	16fc8 <__assert_fail@plt+0x57c8>
   17644:	mov	r6, #0
   17648:	b	16fc8 <__assert_fail@plt+0x57c8>
   1764c:	add	r0, r2, r7
   17650:	str	r0, [sp, #52]	; 0x34
   17654:	mov	r2, #0
   17658:	ldr	lr, [sp, #32]
   1765c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17660:	str	r1, [sp, #48]	; 0x30
   17664:	tst	r1, #1
   17668:	bne	17744 <__assert_fail@plt+0x5f44>
   1766c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   17670:	tst	r1, #1
   17674:	bne	1790c <__assert_fail@plt+0x610c>
   17678:	mov	r3, r0
   1767c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17680:	subs	r1, r0, #2
   17684:	movwne	r1, #1
   17688:	orr	r1, r1, r3
   1768c:	tst	r1, #1
   17690:	bne	176c8 <__assert_fail@plt+0x5ec8>
   17694:	cmp	r8, sl
   17698:	movcc	r0, #39	; 0x27
   1769c:	strbcc	r0, [r5, r8]
   176a0:	add	r2, r8, #1
   176a4:	cmp	r2, sl
   176a8:	movcc	r0, #36	; 0x24
   176ac:	strbcc	r0, [r5, r2]
   176b0:	add	r2, r8, #2
   176b4:	cmp	r2, sl
   176b8:	movcc	r0, #39	; 0x27
   176bc:	strbcc	r0, [r5, r2]
   176c0:	add	r8, r8, #3
   176c4:	mov	r3, #1
   176c8:	cmp	r8, sl
   176cc:	movcc	r1, #92	; 0x5c
   176d0:	strbcc	r1, [r5, r8]
   176d4:	add	r2, r8, #1
   176d8:	cmp	r2, sl
   176dc:	bcs	176f0 <__assert_fail@plt+0x5ef0>
   176e0:	uxtb	r1, r4
   176e4:	mov	r0, #48	; 0x30
   176e8:	orr	r1, r0, r1, lsr #6
   176ec:	strb	r1, [r5, r2]
   176f0:	add	r2, r8, #2
   176f4:	cmp	r2, sl
   176f8:	lsrcc	r1, r4, #3
   176fc:	movcc	r0, #6
   17700:	bficc	r1, r0, #3, #29
   17704:	strbcc	r1, [r5, r2]
   17708:	mov	r0, #6
   1770c:	bfi	r4, r0, #3, #29
   17710:	add	r8, r8, #3
   17714:	mov	r2, #1
   17718:	mov	r0, r3
   1771c:	b	17768 <__assert_fail@plt+0x5f68>
   17720:	cmp	r8, sl
   17724:	strbcc	r4, [r5, r8]
   17728:	ldr	r1, [sp, #76]	; 0x4c
   1772c:	ldrb	r4, [r1, r7]
   17730:	add	r8, r8, #1
   17734:	mov	r7, r3
   17738:	ldr	r1, [sp, #48]	; 0x30
   1773c:	tst	r1, #1
   17740:	beq	1766c <__assert_fail@plt+0x5e6c>
   17744:	ldr	r1, [fp, #-52]	; 0xffffffcc
   17748:	tst	r1, #1
   1774c:	beq	17760 <__assert_fail@plt+0x5f60>
   17750:	cmp	r8, sl
   17754:	movcc	r1, #92	; 0x5c
   17758:	strbcc	r1, [r5, r8]
   1775c:	add	r8, r8, #1
   17760:	mov	r1, #0
   17764:	str	r1, [fp, #-52]	; 0xffffffcc
   17768:	and	r9, r2, #1
   1776c:	add	r3, r7, #1
   17770:	ldr	r1, [sp, #52]	; 0x34
   17774:	cmp	r1, r3
   17778:	bls	177bc <__assert_fail@plt+0x5fbc>
   1777c:	cmp	r9, #0
   17780:	movwne	r9, #1
   17784:	mvn	r1, r0
   17788:	orr	r1, r1, r9
   1778c:	tst	r1, #1
   17790:	bne	17720 <__assert_fail@plt+0x5f20>
   17794:	cmp	r8, sl
   17798:	movcc	r1, #39	; 0x27
   1779c:	strbcc	r1, [r5, r8]
   177a0:	add	r1, r8, #1
   177a4:	cmp	r1, sl
   177a8:	movcc	r0, #39	; 0x27
   177ac:	strbcc	r0, [r5, r1]
   177b0:	add	r8, r8, #2
   177b4:	mov	r0, #0
   177b8:	b	17720 <__assert_fail@plt+0x5f20>
   177bc:	str	r0, [fp, #-56]	; 0xffffffc8
   177c0:	cmp	r9, #0
   177c4:	movwne	r9, #1
   177c8:	cmp	r9, #0
   177cc:	beq	17350 <__assert_fail@plt+0x5b50>
   177d0:	b	17384 <__assert_fail@plt+0x5b84>
   177d4:	mov	r6, #0
   177d8:	b	17818 <__assert_fail@plt+0x6018>
   177dc:	mov	r6, #0
   177e0:	ldr	r0, [sp, #48]	; 0x30
   177e4:	cmp	r0, lr
   177e8:	bcs	17818 <__assert_fail@plt+0x6018>
   177ec:	ldr	ip, [fp, #-80]	; 0xffffffb0
   177f0:	add	r0, ip, r7
   177f4:	ldr	r2, [sp, #52]	; 0x34
   177f8:	ldrb	r1, [r0, r2]
   177fc:	cmp	r1, #0
   17800:	beq	1730c <__assert_fail@plt+0x5b0c>
   17804:	add	r2, r2, #1
   17808:	add	r1, r7, r2
   1780c:	cmp	r1, lr
   17810:	bcc	177f8 <__assert_fail@plt+0x5ff8>
   17814:	b	1730c <__assert_fail@plt+0x5b0c>
   17818:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1781c:	ldr	r2, [sp, #52]	; 0x34
   17820:	b	1730c <__assert_fail@plt+0x5b0c>
   17824:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17828:	eor	r0, r1, #2
   1782c:	orr	r0, r0, r8
   17830:	clz	r0, r0
   17834:	lsr	r0, r0, #5
   17838:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1783c:	tst	r3, r0
   17840:	bne	1790c <__assert_fail@plt+0x610c>
   17844:	mov	r6, r5
   17848:	subs	r0, r1, #2
   1784c:	movwne	r0, #1
   17850:	orr	r0, r3, r0
   17854:	tst	r0, #1
   17858:	ldr	r2, [sp, #92]	; 0x5c
   1785c:	ldreq	r0, [sp, #64]	; 0x40
   17860:	eoreq	r0, r0, #1
   17864:	tsteq	r0, #1
   17868:	bne	178a8 <__assert_fail@plt+0x60a8>
   1786c:	mov	r9, lr
   17870:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17874:	tst	r0, #1
   17878:	bne	17974 <__assert_fail@plt+0x6174>
   1787c:	ldr	r0, [sp, #84]	; 0x54
   17880:	cmp	r0, #0
   17884:	beq	178a8 <__assert_fail@plt+0x60a8>
   17888:	mov	r0, #0
   1788c:	str	r0, [fp, #-48]	; 0xffffffd0
   17890:	mov	r1, #2
   17894:	cmp	sl, #0
   17898:	mov	r0, r2
   1789c:	mov	r4, r3
   178a0:	ldr	r7, [sp, #84]	; 0x54
   178a4:	beq	16a80 <__assert_fail@plt+0x5280>
   178a8:	ldr	r1, [fp, #-84]	; 0xffffffac
   178ac:	clz	r0, r1
   178b0:	lsr	r0, r0, #5
   178b4:	orr	r0, r0, r3
   178b8:	tst	r0, #1
   178bc:	bne	178e8 <__assert_fail@plt+0x60e8>
   178c0:	ldrb	r0, [r1]
   178c4:	cmp	r0, #0
   178c8:	beq	178e8 <__assert_fail@plt+0x60e8>
   178cc:	add	r1, r1, #1
   178d0:	cmp	r8, sl
   178d4:	strbcc	r0, [r6, r8]
   178d8:	add	r8, r8, #1
   178dc:	ldrb	r0, [r1], #1
   178e0:	cmp	r0, #0
   178e4:	bne	178d0 <__assert_fail@plt+0x60d0>
   178e8:	cmp	r8, sl
   178ec:	movcc	r0, #0
   178f0:	strbcc	r0, [r6, r8]
   178f4:	b	17968 <__assert_fail@plt+0x6168>
   178f8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   178fc:	mov	lr, r4
   17900:	b	1790c <__assert_fail@plt+0x610c>
   17904:	ldr	r5, [sp, #28]
   17908:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1790c:	mov	r0, #0
   17910:	ldr	r1, [fp, #12]
   17914:	bic	r1, r1, #2
   17918:	mov	r2, #2
   1791c:	ldr	r3, [sp, #92]	; 0x5c
   17920:	tst	r3, #1
   17924:	movwne	r2, #4
   17928:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1792c:	cmp	r3, #2
   17930:	movne	r2, r3
   17934:	str	r2, [sp]
   17938:	str	r1, [sp, #4]
   1793c:	str	r0, [sp, #8]
   17940:	ldr	r0, [sp, #80]	; 0x50
   17944:	str	r0, [sp, #12]
   17948:	ldr	r0, [sp, #88]	; 0x58
   1794c:	str	r0, [sp, #16]
   17950:	mov	r0, r5
   17954:	mov	r1, sl
   17958:	mov	r2, ip
   1795c:	mov	r3, lr
   17960:	bl	169f4 <__assert_fail@plt+0x51f4>
   17964:	mov	r8, r0
   17968:	mov	r0, r8
   1796c:	sub	sp, fp, #28
   17970:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17974:	mov	r0, #5
   17978:	str	r0, [sp]
   1797c:	ldr	r0, [fp, #12]
   17980:	str	r0, [sp, #4]
   17984:	ldr	r0, [fp, #16]
   17988:	str	r0, [sp, #8]
   1798c:	ldr	r0, [sp, #80]	; 0x50
   17990:	str	r0, [sp, #12]
   17994:	ldr	r0, [sp, #88]	; 0x58
   17998:	str	r0, [sp, #16]
   1799c:	mov	r0, r6
   179a0:	ldr	r1, [sp, #84]	; 0x54
   179a4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   179a8:	mov	r3, r9
   179ac:	b	17960 <__assert_fail@plt+0x6160>
   179b0:	bl	117d0 <abort@plt>
   179b4:	mov	r3, r2
   179b8:	mov	r2, #0
   179bc:	b	179c0 <__assert_fail@plt+0x61c0>
   179c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179c4:	add	fp, sp, #28
   179c8:	sub	sp, sp, #36	; 0x24
   179cc:	mov	r4, r2
   179d0:	str	r2, [sp, #24]
   179d4:	mov	r5, r1
   179d8:	mov	r6, r0
   179dc:	str	r0, [sp, #20]
   179e0:	movw	r8, #53944	; 0xd2b8
   179e4:	movt	r8, #2
   179e8:	cmp	r3, #0
   179ec:	movne	r8, r3
   179f0:	bl	11680 <__errno_location@plt>
   179f4:	str	r0, [sp, #28]
   179f8:	ldm	r8, {r3, r9}
   179fc:	ldr	r1, [r8, #40]	; 0x28
   17a00:	ldr	r2, [r8, #44]	; 0x2c
   17a04:	ldr	r7, [r0]
   17a08:	str	r7, [sp, #32]
   17a0c:	add	sl, r8, #8
   17a10:	cmp	r4, #0
   17a14:	orreq	r9, r9, #1
   17a18:	stm	sp, {r3, r9, sl}
   17a1c:	str	r1, [sp, #12]
   17a20:	str	r2, [sp, #16]
   17a24:	mov	r0, #0
   17a28:	mov	r1, #0
   17a2c:	mov	r2, r6
   17a30:	mov	r3, r5
   17a34:	mov	r7, r5
   17a38:	bl	169f4 <__assert_fail@plt+0x51f4>
   17a3c:	mov	r5, r0
   17a40:	add	r4, r0, #1
   17a44:	mov	r0, r4
   17a48:	bl	18a24 <__assert_fail@plt+0x7224>
   17a4c:	mov	r6, r0
   17a50:	ldr	r0, [r8]
   17a54:	ldr	r1, [r8, #40]	; 0x28
   17a58:	ldr	r2, [r8, #44]	; 0x2c
   17a5c:	stm	sp, {r0, r9, sl}
   17a60:	str	r1, [sp, #12]
   17a64:	str	r2, [sp, #16]
   17a68:	mov	r0, r6
   17a6c:	mov	r1, r4
   17a70:	ldr	r2, [sp, #20]
   17a74:	mov	r3, r7
   17a78:	bl	169f4 <__assert_fail@plt+0x51f4>
   17a7c:	ldr	r0, [sp, #24]
   17a80:	ldr	r1, [sp, #32]
   17a84:	ldr	r2, [sp, #28]
   17a88:	str	r1, [r2]
   17a8c:	cmp	r0, #0
   17a90:	strne	r5, [r0]
   17a94:	mov	r0, r6
   17a98:	sub	sp, fp, #28
   17a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17aa0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17aa4:	add	fp, sp, #24
   17aa8:	movw	r8, #53624	; 0xd178
   17aac:	movt	r8, #2
   17ab0:	ldr	r4, [r8]
   17ab4:	movw	r5, #53628	; 0xd17c
   17ab8:	movt	r5, #2
   17abc:	ldr	r0, [r5]
   17ac0:	cmp	r0, #2
   17ac4:	blt	17af0 <__assert_fail@plt+0x62f0>
   17ac8:	add	r7, r4, #12
   17acc:	mov	r6, #0
   17ad0:	ldr	r0, [r7, r6, lsl #3]
   17ad4:	bl	1955c <__assert_fail@plt+0x7d5c>
   17ad8:	add	r0, r6, #1
   17adc:	ldr	r1, [r5]
   17ae0:	add	r2, r6, #2
   17ae4:	cmp	r2, r1
   17ae8:	mov	r6, r0
   17aec:	blt	17ad0 <__assert_fail@plt+0x62d0>
   17af0:	ldr	r0, [r4, #4]
   17af4:	movw	r9, #53992	; 0xd2e8
   17af8:	movt	r9, #2
   17afc:	cmp	r0, r9
   17b00:	movw	r7, #53632	; 0xd180
   17b04:	movt	r7, #2
   17b08:	beq	17b18 <__assert_fail@plt+0x6318>
   17b0c:	bl	1955c <__assert_fail@plt+0x7d5c>
   17b10:	mov	r0, #256	; 0x100
   17b14:	stm	r7, {r0, r9}
   17b18:	cmp	r4, r7
   17b1c:	beq	17b2c <__assert_fail@plt+0x632c>
   17b20:	mov	r0, r4
   17b24:	bl	1955c <__assert_fail@plt+0x7d5c>
   17b28:	str	r7, [r8]
   17b2c:	mov	r0, #1
   17b30:	str	r0, [r5]
   17b34:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17b38:	movw	r3, #53944	; 0xd2b8
   17b3c:	movt	r3, #2
   17b40:	mvn	r2, #0
   17b44:	b	17b48 <__assert_fail@plt+0x6348>
   17b48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b4c:	add	fp, sp, #28
   17b50:	sub	sp, sp, #44	; 0x2c
   17b54:	mov	r7, r3
   17b58:	str	r2, [sp, #36]	; 0x24
   17b5c:	str	r1, [sp, #32]
   17b60:	mov	r5, r0
   17b64:	bl	11680 <__errno_location@plt>
   17b68:	cmp	r5, #0
   17b6c:	bmi	17cdc <__assert_fail@plt+0x64dc>
   17b70:	cmn	r5, #-2147483647	; 0x80000001
   17b74:	beq	17cdc <__assert_fail@plt+0x64dc>
   17b78:	movw	r4, #53624	; 0xd178
   17b7c:	movt	r4, #2
   17b80:	ldr	r6, [r4]
   17b84:	str	r0, [sp, #28]
   17b88:	ldr	r0, [r0]
   17b8c:	str	r0, [sp, #24]
   17b90:	movw	r8, #53628	; 0xd17c
   17b94:	movt	r8, #2
   17b98:	ldr	r1, [r8]
   17b9c:	cmp	r1, r5
   17ba0:	ble	17bac <__assert_fail@plt+0x63ac>
   17ba4:	mov	sl, r6
   17ba8:	b	17c18 <__assert_fail@plt+0x6418>
   17bac:	str	r1, [fp, #-32]	; 0xffffffe0
   17bb0:	mov	r0, #8
   17bb4:	str	r0, [sp]
   17bb8:	movw	r9, #53632	; 0xd180
   17bbc:	movt	r9, #2
   17bc0:	subs	r0, r6, r9
   17bc4:	movne	r0, r6
   17bc8:	sub	r1, r5, r1
   17bcc:	add	r2, r1, #1
   17bd0:	sub	r1, fp, #32
   17bd4:	mvn	r3, #-2147483648	; 0x80000000
   17bd8:	bl	18b00 <__assert_fail@plt+0x7300>
   17bdc:	mov	sl, r0
   17be0:	str	r0, [r4]
   17be4:	cmp	r6, r9
   17be8:	bne	17bf4 <__assert_fail@plt+0x63f4>
   17bec:	ldrd	r0, [r9]
   17bf0:	stm	sl, {r0, r1}
   17bf4:	ldr	r1, [r8]
   17bf8:	add	r0, sl, r1, lsl #3
   17bfc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17c00:	sub	r1, r2, r1
   17c04:	lsl	r2, r1, #3
   17c08:	mov	r1, #0
   17c0c:	bl	116a4 <memset@plt>
   17c10:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17c14:	str	r0, [r8]
   17c18:	mov	r9, sl
   17c1c:	ldr	r6, [r9, r5, lsl #3]!
   17c20:	ldr	r4, [r9, #4]!
   17c24:	ldm	r7, {r0, r1}
   17c28:	ldr	r2, [r7, #40]	; 0x28
   17c2c:	ldr	r3, [r7, #44]	; 0x2c
   17c30:	orr	r8, r1, #1
   17c34:	add	r1, r7, #8
   17c38:	stm	sp, {r0, r8}
   17c3c:	str	r1, [sp, #20]
   17c40:	add	r0, sp, #8
   17c44:	stm	r0, {r1, r2, r3}
   17c48:	mov	r0, r4
   17c4c:	mov	r1, r6
   17c50:	ldr	r2, [sp, #32]
   17c54:	ldr	r3, [sp, #36]	; 0x24
   17c58:	bl	169f4 <__assert_fail@plt+0x51f4>
   17c5c:	cmp	r6, r0
   17c60:	bhi	17cc4 <__assert_fail@plt+0x64c4>
   17c64:	add	r6, r0, #1
   17c68:	str	r6, [sl, r5, lsl #3]
   17c6c:	movw	r0, #53992	; 0xd2e8
   17c70:	movt	r0, #2
   17c74:	cmp	r4, r0
   17c78:	beq	17c84 <__assert_fail@plt+0x6484>
   17c7c:	mov	r0, r4
   17c80:	bl	1955c <__assert_fail@plt+0x7d5c>
   17c84:	mov	r0, r6
   17c88:	bl	18a24 <__assert_fail@plt+0x7224>
   17c8c:	mov	r4, r0
   17c90:	str	r0, [r9]
   17c94:	ldr	r0, [r7]
   17c98:	ldr	r1, [r7, #40]	; 0x28
   17c9c:	ldr	r2, [r7, #44]	; 0x2c
   17ca0:	stm	sp, {r0, r8}
   17ca4:	ldr	r0, [sp, #20]
   17ca8:	add	r3, sp, #8
   17cac:	stm	r3, {r0, r1, r2}
   17cb0:	mov	r0, r4
   17cb4:	mov	r1, r6
   17cb8:	ldr	r2, [sp, #32]
   17cbc:	ldr	r3, [sp, #36]	; 0x24
   17cc0:	bl	169f4 <__assert_fail@plt+0x51f4>
   17cc4:	ldr	r0, [sp, #28]
   17cc8:	ldr	r1, [sp, #24]
   17ccc:	str	r1, [r0]
   17cd0:	mov	r0, r4
   17cd4:	sub	sp, fp, #28
   17cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17cdc:	bl	117d0 <abort@plt>
   17ce0:	movw	r3, #53944	; 0xd2b8
   17ce4:	movt	r3, #2
   17ce8:	b	17b48 <__assert_fail@plt+0x6348>
   17cec:	mov	r1, r0
   17cf0:	mov	r0, #0
   17cf4:	b	17b38 <__assert_fail@plt+0x6338>
   17cf8:	mov	r2, r1
   17cfc:	mov	r1, r0
   17d00:	mov	r0, #0
   17d04:	b	17ce0 <__assert_fail@plt+0x64e0>
   17d08:	push	{r4, r5, r6, sl, fp, lr}
   17d0c:	add	fp, sp, #16
   17d10:	sub	sp, sp, #48	; 0x30
   17d14:	mov	r4, r2
   17d18:	mov	r5, r0
   17d1c:	mov	r6, sp
   17d20:	mov	r0, r6
   17d24:	bl	17d44 <__assert_fail@plt+0x6544>
   17d28:	mov	r0, r5
   17d2c:	mov	r1, r4
   17d30:	mvn	r2, #0
   17d34:	mov	r3, r6
   17d38:	bl	17b48 <__assert_fail@plt+0x6348>
   17d3c:	sub	sp, fp, #16
   17d40:	pop	{r4, r5, r6, sl, fp, pc}
   17d44:	push	{fp, lr}
   17d48:	mov	fp, sp
   17d4c:	vmov.i32	q8, #0	; 0x00000000
   17d50:	mov	r2, #32
   17d54:	mov	r3, r0
   17d58:	vst1.32	{d16-d17}, [r3], r2
   17d5c:	vst1.32	{d16-d17}, [r3]
   17d60:	add	r2, r0, #16
   17d64:	vst1.32	{d16-d17}, [r2]
   17d68:	cmp	r1, #10
   17d6c:	strne	r1, [r0]
   17d70:	popne	{fp, pc}
   17d74:	bl	117d0 <abort@plt>
   17d78:	push	{r4, r5, r6, r7, fp, lr}
   17d7c:	add	fp, sp, #16
   17d80:	sub	sp, sp, #48	; 0x30
   17d84:	mov	r4, r3
   17d88:	mov	r5, r2
   17d8c:	mov	r6, r0
   17d90:	mov	r7, sp
   17d94:	mov	r0, r7
   17d98:	bl	17d44 <__assert_fail@plt+0x6544>
   17d9c:	mov	r0, r6
   17da0:	mov	r1, r5
   17da4:	mov	r2, r4
   17da8:	mov	r3, r7
   17dac:	bl	17b48 <__assert_fail@plt+0x6348>
   17db0:	sub	sp, fp, #16
   17db4:	pop	{r4, r5, r6, r7, fp, pc}
   17db8:	mov	r2, r1
   17dbc:	mov	r1, r0
   17dc0:	mov	r0, #0
   17dc4:	b	17d08 <__assert_fail@plt+0x6508>
   17dc8:	mov	r3, r2
   17dcc:	mov	r2, r1
   17dd0:	mov	r1, r0
   17dd4:	mov	r0, #0
   17dd8:	b	17d78 <__assert_fail@plt+0x6578>
   17ddc:	push	{r4, r5, r6, sl, fp, lr}
   17de0:	add	fp, sp, #16
   17de4:	sub	sp, sp, #48	; 0x30
   17de8:	mov	r4, r1
   17dec:	mov	r5, r0
   17df0:	movw	r0, #53944	; 0xd2b8
   17df4:	movt	r0, #2
   17df8:	add	r1, r0, #16
   17dfc:	mov	r3, #32
   17e00:	vld1.64	{d16-d17}, [r0], r3
   17e04:	vld1.64	{d18-d19}, [r1]
   17e08:	mov	r6, sp
   17e0c:	add	r1, r6, #16
   17e10:	vld1.64	{d20-d21}, [r0]
   17e14:	vst1.64	{d18-d19}, [r1]
   17e18:	mov	r0, r6
   17e1c:	vst1.64	{d16-d17}, [r0], r3
   17e20:	vst1.64	{d20-d21}, [r0]
   17e24:	mov	r0, r6
   17e28:	mov	r1, r2
   17e2c:	mov	r2, #1
   17e30:	bl	168e8 <__assert_fail@plt+0x50e8>
   17e34:	mov	r0, #0
   17e38:	mov	r1, r5
   17e3c:	mov	r2, r4
   17e40:	mov	r3, r6
   17e44:	bl	17b48 <__assert_fail@plt+0x6348>
   17e48:	sub	sp, fp, #16
   17e4c:	pop	{r4, r5, r6, sl, fp, pc}
   17e50:	mov	r2, r1
   17e54:	mvn	r1, #0
   17e58:	b	17ddc <__assert_fail@plt+0x65dc>
   17e5c:	mov	r1, #58	; 0x3a
   17e60:	b	17e50 <__assert_fail@plt+0x6650>
   17e64:	mov	r2, #58	; 0x3a
   17e68:	b	17ddc <__assert_fail@plt+0x65dc>
   17e6c:	push	{r4, r5, r6, sl, fp, lr}
   17e70:	add	fp, sp, #16
   17e74:	sub	sp, sp, #48	; 0x30
   17e78:	mov	r4, r2
   17e7c:	mov	r5, r0
   17e80:	mov	r6, sp
   17e84:	mov	r0, r6
   17e88:	bl	17d44 <__assert_fail@plt+0x6544>
   17e8c:	mov	r0, r6
   17e90:	mov	r1, #58	; 0x3a
   17e94:	mov	r2, #1
   17e98:	bl	168e8 <__assert_fail@plt+0x50e8>
   17e9c:	mov	r0, r5
   17ea0:	mov	r1, r4
   17ea4:	mvn	r2, #0
   17ea8:	mov	r3, r6
   17eac:	bl	17b48 <__assert_fail@plt+0x6348>
   17eb0:	sub	sp, fp, #16
   17eb4:	pop	{r4, r5, r6, sl, fp, pc}
   17eb8:	push	{fp, lr}
   17ebc:	mov	fp, sp
   17ec0:	sub	sp, sp, #8
   17ec4:	mvn	ip, #0
   17ec8:	str	ip, [sp]
   17ecc:	bl	17ed8 <__assert_fail@plt+0x66d8>
   17ed0:	mov	sp, fp
   17ed4:	pop	{fp, pc}
   17ed8:	push	{r4, r5, r6, r7, fp, lr}
   17edc:	add	fp, sp, #16
   17ee0:	sub	sp, sp, #48	; 0x30
   17ee4:	mov	r7, r3
   17ee8:	mov	r5, r0
   17eec:	movw	r0, #53944	; 0xd2b8
   17ef0:	movt	r0, #2
   17ef4:	add	r3, r0, #16
   17ef8:	mov	r4, #32
   17efc:	vld1.64	{d16-d17}, [r0], r4
   17f00:	vld1.64	{d18-d19}, [r3]
   17f04:	mov	r6, sp
   17f08:	add	r3, r6, #16
   17f0c:	vld1.64	{d20-d21}, [r0]
   17f10:	vst1.64	{d18-d19}, [r3]
   17f14:	mov	r0, r6
   17f18:	vst1.64	{d16-d17}, [r0], r4
   17f1c:	vst1.64	{d20-d21}, [r0]
   17f20:	mov	r0, r6
   17f24:	bl	16940 <__assert_fail@plt+0x5140>
   17f28:	ldr	r2, [fp, #8]
   17f2c:	mov	r0, r5
   17f30:	mov	r1, r7
   17f34:	mov	r3, r6
   17f38:	bl	17b48 <__assert_fail@plt+0x6348>
   17f3c:	sub	sp, fp, #16
   17f40:	pop	{r4, r5, r6, r7, fp, pc}
   17f44:	mov	r3, r2
   17f48:	mov	r2, r1
   17f4c:	mov	r1, r0
   17f50:	mov	r0, #0
   17f54:	b	17eb8 <__assert_fail@plt+0x66b8>
   17f58:	push	{fp, lr}
   17f5c:	mov	fp, sp
   17f60:	sub	sp, sp, #8
   17f64:	mov	ip, r2
   17f68:	mov	r2, r1
   17f6c:	mov	r1, r0
   17f70:	str	r3, [sp]
   17f74:	mov	r0, #0
   17f78:	mov	r3, ip
   17f7c:	bl	17ed8 <__assert_fail@plt+0x66d8>
   17f80:	mov	sp, fp
   17f84:	pop	{fp, pc}
   17f88:	movw	r3, #53640	; 0xd188
   17f8c:	movt	r3, #2
   17f90:	b	17b48 <__assert_fail@plt+0x6348>
   17f94:	mov	r2, r1
   17f98:	mov	r1, r0
   17f9c:	mov	r0, #0
   17fa0:	b	17f88 <__assert_fail@plt+0x6788>
   17fa4:	mvn	r2, #0
   17fa8:	b	17f88 <__assert_fail@plt+0x6788>
   17fac:	mov	r1, r0
   17fb0:	mov	r0, #0
   17fb4:	b	17fa4 <__assert_fail@plt+0x67a4>
   17fb8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17fbc:	add	fp, sp, #24
   17fc0:	sub	sp, sp, #16
   17fc4:	mov	r4, r1
   17fc8:	mov	r5, r0
   17fcc:	mov	r7, #0
   17fd0:	mov	r0, #0
   17fd4:	mov	r1, r5
   17fd8:	mov	r2, #5
   17fdc:	bl	114dc <dcgettext@plt>
   17fe0:	cmp	r0, r5
   17fe4:	beq	17ff0 <__assert_fail@plt+0x67f0>
   17fe8:	sub	sp, fp, #24
   17fec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17ff0:	bl	19bb4 <__assert_fail@plt+0x83b4>
   17ff4:	mov	r6, r0
   17ff8:	mov	r8, #56	; 0x38
   17ffc:	mov	r0, #45	; 0x2d
   18000:	stm	sp, {r0, r8}
   18004:	str	r7, [sp, #8]
   18008:	str	r7, [sp, #12]
   1800c:	mov	r0, r6
   18010:	mov	r1, #85	; 0x55
   18014:	mov	r2, #84	; 0x54
   18018:	mov	r3, #70	; 0x46
   1801c:	bl	180b4 <__assert_fail@plt+0x68b4>
   18020:	cmp	r0, #0
   18024:	beq	18040 <__assert_fail@plt+0x6840>
   18028:	ldrb	r1, [r5]
   1802c:	movw	r2, #49093	; 0xbfc5
   18030:	movt	r2, #1
   18034:	movw	r0, #49097	; 0xbfc9
   18038:	movt	r0, #1
   1803c:	b	18084 <__assert_fail@plt+0x6884>
   18040:	mov	r0, #48	; 0x30
   18044:	mov	r1, #51	; 0x33
   18048:	str	r8, [sp]
   1804c:	stmib	sp, {r0, r1}
   18050:	str	r0, [sp, #12]
   18054:	mov	r0, r6
   18058:	mov	r1, #71	; 0x47
   1805c:	mov	r2, #66	; 0x42
   18060:	mov	r3, #49	; 0x31
   18064:	bl	180b4 <__assert_fail@plt+0x68b4>
   18068:	cmp	r0, #0
   1806c:	beq	18094 <__assert_fail@plt+0x6894>
   18070:	ldrb	r1, [r5]
   18074:	movw	r2, #49101	; 0xbfcd
   18078:	movt	r2, #1
   1807c:	movw	r0, #49105	; 0xbfd1
   18080:	movt	r0, #1
   18084:	cmp	r1, #96	; 0x60
   18088:	moveq	r0, r2
   1808c:	sub	sp, fp, #24
   18090:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18094:	movw	r1, #49089	; 0xbfc1
   18098:	movt	r1, #1
   1809c:	movw	r0, #48925	; 0xbf1d
   180a0:	movt	r0, #1
   180a4:	cmp	r4, #9
   180a8:	moveq	r0, r1
   180ac:	sub	sp, fp, #24
   180b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   180b4:	push	{r4, r5, r6, r7, fp, lr}
   180b8:	add	fp, sp, #16
   180bc:	sub	sp, sp, #16
   180c0:	mov	r4, r3
   180c4:	mov	r5, r2
   180c8:	mov	r7, r1
   180cc:	mov	r6, r0
   180d0:	mov	r0, r1
   180d4:	bl	19a04 <__assert_fail@plt+0x8204>
   180d8:	ldrb	r1, [r6]
   180dc:	cmp	r0, #0
   180e0:	andne	r1, r1, #223	; 0xdf
   180e4:	mov	r0, #0
   180e8:	cmp	r1, r7
   180ec:	bne	18124 <__assert_fail@plt+0x6924>
   180f0:	cmp	r7, #0
   180f4:	beq	1812c <__assert_fail@plt+0x692c>
   180f8:	ldr	r0, [fp, #20]
   180fc:	ldr	r1, [fp, #16]
   18100:	ldr	r2, [fp, #12]
   18104:	ldr	r3, [fp, #8]
   18108:	str	r2, [sp]
   1810c:	str	r1, [sp, #4]
   18110:	str	r0, [sp, #8]
   18114:	mov	r0, r6
   18118:	mov	r1, r5
   1811c:	mov	r2, r4
   18120:	bl	18138 <__assert_fail@plt+0x6938>
   18124:	sub	sp, fp, #16
   18128:	pop	{r4, r5, r6, r7, fp, pc}
   1812c:	mov	r0, #1
   18130:	sub	sp, fp, #16
   18134:	pop	{r4, r5, r6, r7, fp, pc}
   18138:	push	{r4, r5, r6, r7, fp, lr}
   1813c:	add	fp, sp, #16
   18140:	sub	sp, sp, #8
   18144:	mov	r4, r3
   18148:	mov	r5, r2
   1814c:	mov	r7, r1
   18150:	mov	r6, r0
   18154:	mov	r0, r1
   18158:	bl	19a04 <__assert_fail@plt+0x8204>
   1815c:	ldrb	r1, [r6, #1]
   18160:	cmp	r0, #0
   18164:	andne	r1, r1, #223	; 0xdf
   18168:	mov	r0, #0
   1816c:	cmp	r1, r7
   18170:	bne	181a0 <__assert_fail@plt+0x69a0>
   18174:	cmp	r7, #0
   18178:	beq	181a8 <__assert_fail@plt+0x69a8>
   1817c:	ldr	r0, [fp, #16]
   18180:	ldr	r1, [fp, #12]
   18184:	ldr	r3, [fp, #8]
   18188:	str	r1, [sp]
   1818c:	str	r0, [sp, #4]
   18190:	mov	r0, r6
   18194:	mov	r1, r5
   18198:	mov	r2, r4
   1819c:	bl	181b4 <__assert_fail@plt+0x69b4>
   181a0:	sub	sp, fp, #16
   181a4:	pop	{r4, r5, r6, r7, fp, pc}
   181a8:	mov	r0, #1
   181ac:	sub	sp, fp, #16
   181b0:	pop	{r4, r5, r6, r7, fp, pc}
   181b4:	push	{r4, r5, r6, r7, fp, lr}
   181b8:	add	fp, sp, #16
   181bc:	sub	sp, sp, #8
   181c0:	mov	r4, r3
   181c4:	mov	r5, r2
   181c8:	mov	r7, r1
   181cc:	mov	r6, r0
   181d0:	mov	r0, r1
   181d4:	bl	19a04 <__assert_fail@plt+0x8204>
   181d8:	ldrb	r1, [r6, #2]
   181dc:	cmp	r0, #0
   181e0:	andne	r1, r1, #223	; 0xdf
   181e4:	mov	r0, #0
   181e8:	cmp	r1, r7
   181ec:	bne	18214 <__assert_fail@plt+0x6a14>
   181f0:	cmp	r7, #0
   181f4:	beq	1821c <__assert_fail@plt+0x6a1c>
   181f8:	ldr	r0, [fp, #12]
   181fc:	ldr	r3, [fp, #8]
   18200:	str	r0, [sp]
   18204:	mov	r0, r6
   18208:	mov	r1, r5
   1820c:	mov	r2, r4
   18210:	bl	18228 <__assert_fail@plt+0x6a28>
   18214:	sub	sp, fp, #16
   18218:	pop	{r4, r5, r6, r7, fp, pc}
   1821c:	mov	r0, #1
   18220:	sub	sp, fp, #16
   18224:	pop	{r4, r5, r6, r7, fp, pc}
   18228:	push	{r4, r5, r6, r7, fp, lr}
   1822c:	add	fp, sp, #16
   18230:	mov	r4, r3
   18234:	mov	r5, r2
   18238:	mov	r7, r1
   1823c:	mov	r6, r0
   18240:	mov	r0, r1
   18244:	bl	19a04 <__assert_fail@plt+0x8204>
   18248:	ldrb	r1, [r6, #3]
   1824c:	ldr	r3, [fp, #8]
   18250:	cmp	r0, #0
   18254:	andne	r1, r1, #223	; 0xdf
   18258:	mov	r0, #0
   1825c:	cmp	r1, r7
   18260:	bne	18284 <__assert_fail@plt+0x6a84>
   18264:	cmp	r7, #0
   18268:	beq	18280 <__assert_fail@plt+0x6a80>
   1826c:	mov	r0, r6
   18270:	mov	r1, r5
   18274:	mov	r2, r4
   18278:	pop	{r4, r5, r6, r7, fp, lr}
   1827c:	b	18288 <__assert_fail@plt+0x6a88>
   18280:	mov	r0, #1
   18284:	pop	{r4, r5, r6, r7, fp, pc}
   18288:	push	{r4, r5, r6, r7, fp, lr}
   1828c:	add	fp, sp, #16
   18290:	mov	r4, r3
   18294:	mov	r5, r2
   18298:	mov	r7, r1
   1829c:	mov	r6, r0
   182a0:	mov	r0, r1
   182a4:	bl	19a04 <__assert_fail@plt+0x8204>
   182a8:	ldrb	r1, [r6, #4]
   182ac:	cmp	r0, #0
   182b0:	andne	r1, r1, #223	; 0xdf
   182b4:	mov	r0, #0
   182b8:	cmp	r1, r7
   182bc:	bne	182e0 <__assert_fail@plt+0x6ae0>
   182c0:	cmp	r7, #0
   182c4:	beq	182dc <__assert_fail@plt+0x6adc>
   182c8:	mov	r0, r6
   182cc:	mov	r1, r5
   182d0:	mov	r2, r4
   182d4:	pop	{r4, r5, r6, r7, fp, lr}
   182d8:	b	182e4 <__assert_fail@plt+0x6ae4>
   182dc:	mov	r0, #1
   182e0:	pop	{r4, r5, r6, r7, fp, pc}
   182e4:	push	{r4, r5, r6, sl, fp, lr}
   182e8:	add	fp, sp, #16
   182ec:	mov	r4, r2
   182f0:	mov	r6, r1
   182f4:	mov	r5, r0
   182f8:	mov	r0, r1
   182fc:	bl	19a04 <__assert_fail@plt+0x8204>
   18300:	ldrb	r1, [r5, #5]
   18304:	cmp	r0, #0
   18308:	andne	r1, r1, #223	; 0xdf
   1830c:	mov	r0, #0
   18310:	cmp	r1, r6
   18314:	bne	18334 <__assert_fail@plt+0x6b34>
   18318:	cmp	r6, #0
   1831c:	beq	18330 <__assert_fail@plt+0x6b30>
   18320:	mov	r0, r5
   18324:	mov	r1, r4
   18328:	pop	{r4, r5, r6, sl, fp, lr}
   1832c:	b	18338 <__assert_fail@plt+0x6b38>
   18330:	mov	r0, #1
   18334:	pop	{r4, r5, r6, sl, fp, pc}
   18338:	push	{r4, r5, fp, lr}
   1833c:	add	fp, sp, #8
   18340:	mov	r5, r1
   18344:	mov	r4, r0
   18348:	mov	r0, r1
   1834c:	bl	19a04 <__assert_fail@plt+0x8204>
   18350:	ldrb	r1, [r4, #6]
   18354:	cmp	r0, #0
   18358:	andne	r1, r1, #223	; 0xdf
   1835c:	mov	r0, #0
   18360:	cmp	r1, r5
   18364:	popne	{r4, r5, fp, pc}
   18368:	cmp	r5, #0
   1836c:	beq	1837c <__assert_fail@plt+0x6b7c>
   18370:	mov	r0, r4
   18374:	pop	{r4, r5, fp, lr}
   18378:	b	18384 <__assert_fail@plt+0x6b84>
   1837c:	mov	r0, #1
   18380:	pop	{r4, r5, fp, pc}
   18384:	push	{r4, sl, fp, lr}
   18388:	add	fp, sp, #8
   1838c:	mov	r4, r0
   18390:	mov	r0, #0
   18394:	bl	19a04 <__assert_fail@plt+0x8204>
   18398:	ldrb	r1, [r4, #7]
   1839c:	cmp	r0, #0
   183a0:	beq	183b4 <__assert_fail@plt+0x6bb4>
   183a4:	tst	r1, #223	; 0xdf
   183a8:	bne	183bc <__assert_fail@plt+0x6bbc>
   183ac:	mov	r0, #1
   183b0:	pop	{r4, sl, fp, pc}
   183b4:	cmp	r1, #0
   183b8:	beq	183ac <__assert_fail@plt+0x6bac>
   183bc:	mov	r0, #0
   183c0:	pop	{r4, sl, fp, pc}
   183c4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   183c8:	add	fp, sp, #24
   183cc:	mov	r7, r2
   183d0:	mov	r5, r1
   183d4:	mov	r6, r0
   183d8:	movw	r9, #0
   183dc:	movt	r9, #32752	; 0x7ff0
   183e0:	mov	r0, r6
   183e4:	mov	r1, r5
   183e8:	mov	r2, r7
   183ec:	bl	11464 <read@plt>
   183f0:	mov	r4, r0
   183f4:	cmn	r0, #1
   183f8:	bgt	18454 <__assert_fail@plt+0x6c54>
   183fc:	bl	11680 <__errno_location@plt>
   18400:	ldr	r0, [r0]
   18404:	cmp	r0, #4
   18408:	beq	183e0 <__assert_fail@plt+0x6be0>
   1840c:	cmp	r7, r9
   18410:	mov	r1, #0
   18414:	movwhi	r1, #1
   18418:	sub	r2, r0, #22
   1841c:	clz	r2, r2
   18420:	lsr	r2, r2, #5
   18424:	ands	r1, r1, r2
   18428:	moveq	r8, r4
   1842c:	mov	r1, r7
   18430:	movwne	r1, #0
   18434:	movtne	r1, #32752	; 0x7ff0
   18438:	cmp	r7, r9
   1843c:	bls	1844c <__assert_fail@plt+0x6c4c>
   18440:	cmp	r0, #22
   18444:	mov	r7, r1
   18448:	beq	183e0 <__assert_fail@plt+0x6be0>
   1844c:	mov	r0, r8
   18450:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18454:	mov	r0, r4
   18458:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1845c:	push	{r4, r5, fp, lr}
   18460:	add	fp, sp, #8
   18464:	mov	r4, r1
   18468:	mov	r5, r0
   1846c:	mov	r1, #0
   18470:	mov	r2, r4
   18474:	bl	116d4 <memchr@plt>
   18478:	sub	r1, r0, r5
   1847c:	cmp	r0, #0
   18480:	addne	r4, r1, #1
   18484:	mov	r0, r4
   18488:	pop	{r4, r5, fp, pc}
   1848c:	push	{r4, r5, r6, r7, fp, lr}
   18490:	add	fp, sp, #16
   18494:	mov	r4, r0
   18498:	cmp	r0, #2
   1849c:	bhi	184cc <__assert_fail@plt+0x6ccc>
   184a0:	mov	r0, r4
   184a4:	bl	19e84 <__assert_fail@plt+0x8684>
   184a8:	mov	r5, r0
   184ac:	bl	11680 <__errno_location@plt>
   184b0:	mov	r6, r0
   184b4:	ldr	r7, [r0]
   184b8:	mov	r0, r4
   184bc:	bl	117e8 <close@plt>
   184c0:	str	r7, [r6]
   184c4:	mov	r0, r5
   184c8:	pop	{r4, r5, r6, r7, fp, pc}
   184cc:	mov	r0, r4
   184d0:	pop	{r4, r5, r6, r7, fp, pc}
   184d4:	push	{r4, r5, r6, sl, fp, lr}
   184d8:	add	fp, sp, #16
   184dc:	mov	r5, r0
   184e0:	bl	116f8 <pipe@plt>
   184e4:	mvn	r4, #0
   184e8:	cmp	r0, #0
   184ec:	beq	184f8 <__assert_fail@plt+0x6cf8>
   184f0:	mov	r0, r4
   184f4:	pop	{r4, r5, r6, sl, fp, pc}
   184f8:	mov	r6, #0
   184fc:	ldr	r0, [r5, r6, lsl #2]
   18500:	bl	1848c <__assert_fail@plt+0x6c8c>
   18504:	str	r0, [r5, r6, lsl #2]
   18508:	cmn	r0, #1
   1850c:	ble	18528 <__assert_fail@plt+0x6d28>
   18510:	add	r6, r6, #1
   18514:	cmp	r6, #2
   18518:	bne	184fc <__assert_fail@plt+0x6cfc>
   1851c:	mov	r4, #0
   18520:	mov	r0, r4
   18524:	pop	{r4, r5, r6, sl, fp, pc}
   18528:	sub	r6, r5, r6, lsl #2
   1852c:	bl	11680 <__errno_location@plt>
   18530:	mov	r5, r0
   18534:	ldr	r0, [r6, #4]
   18538:	ldr	r6, [r5]
   1853c:	bl	117e8 <close@plt>
   18540:	str	r6, [r5]
   18544:	mov	r0, r4
   18548:	pop	{r4, r5, r6, sl, fp, pc}
   1854c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18550:	add	fp, sp, #24
   18554:	sub	sp, sp, #32
   18558:	mov	r4, r2
   1855c:	mov	r5, r0
   18560:	ldr	r7, [fp, #12]
   18564:	ldr	r6, [fp, #8]
   18568:	cmp	r1, #0
   1856c:	beq	1858c <__assert_fail@plt+0x6d8c>
   18570:	mov	r2, r1
   18574:	str	r3, [sp]
   18578:	movw	r1, #49192	; 0xc028
   1857c:	movt	r1, #1
   18580:	mov	r0, r5
   18584:	mov	r3, r4
   18588:	b	1859c <__assert_fail@plt+0x6d9c>
   1858c:	movw	r1, #49204	; 0xc034
   18590:	movt	r1, #1
   18594:	mov	r0, r5
   18598:	mov	r2, r4
   1859c:	bl	11674 <fprintf@plt>
   185a0:	movw	r1, #49211	; 0xc03b
   185a4:	movt	r1, #1
   185a8:	mov	r0, #0
   185ac:	mov	r2, #5
   185b0:	bl	114dc <dcgettext@plt>
   185b4:	mov	r2, r0
   185b8:	movw	r1, #49907	; 0xc2f3
   185bc:	movt	r1, #1
   185c0:	mov	r0, r5
   185c4:	movw	r3, #2022	; 0x7e6
   185c8:	bl	11674 <fprintf@plt>
   185cc:	mov	r0, #10
   185d0:	mov	r1, r5
   185d4:	bl	11758 <fputc@plt>
   185d8:	movw	r1, #49215	; 0xc03f
   185dc:	movt	r1, #1
   185e0:	mov	r0, #0
   185e4:	mov	r2, #5
   185e8:	bl	114dc <dcgettext@plt>
   185ec:	mov	r1, r0
   185f0:	movw	r2, #49386	; 0xc0ea
   185f4:	movt	r2, #1
   185f8:	mov	r0, r5
   185fc:	bl	11674 <fprintf@plt>
   18600:	mov	r0, #10
   18604:	mov	r1, r5
   18608:	bl	11758 <fputc@plt>
   1860c:	cmp	r7, #9
   18610:	bhi	1864c <__assert_fail@plt+0x6e4c>
   18614:	add	r0, pc, #0
   18618:	ldr	pc, [r0, r7, lsl #2]
   1861c:	andeq	r8, r1, r4, asr #12
   18620:	andeq	r8, r1, r8, asr r6
   18624:	andeq	r8, r1, r4, lsl #13
   18628:			; <UNDEFINED> instruction: 0x000186b0
   1862c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18630:	andeq	r8, r1, r4, lsl #14
   18634:	andeq	r8, r1, r8, lsr r7
   18638:	andeq	r8, r1, r8, ror r7
   1863c:	andeq	r8, r1, r4, lsl r8
   18640:			; <UNDEFINED> instruction: 0x000187bc
   18644:	sub	sp, fp, #24
   18648:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1864c:	movw	r1, #49739	; 0xc24b
   18650:	movt	r1, #1
   18654:	b	187c4 <__assert_fail@plt+0x6fc4>
   18658:	movw	r1, #49420	; 0xc10c
   1865c:	movt	r1, #1
   18660:	mov	r0, #0
   18664:	mov	r2, #5
   18668:	bl	114dc <dcgettext@plt>
   1866c:	mov	r1, r0
   18670:	ldr	r2, [r6]
   18674:	mov	r0, r5
   18678:	sub	sp, fp, #24
   1867c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18680:	b	11674 <fprintf@plt>
   18684:	movw	r1, #49436	; 0xc11c
   18688:	movt	r1, #1
   1868c:	mov	r0, #0
   18690:	mov	r2, #5
   18694:	bl	114dc <dcgettext@plt>
   18698:	mov	r1, r0
   1869c:	ldm	r6, {r2, r3}
   186a0:	mov	r0, r5
   186a4:	sub	sp, fp, #24
   186a8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   186ac:	b	11674 <fprintf@plt>
   186b0:	movw	r1, #49459	; 0xc133
   186b4:	movt	r1, #1
   186b8:	mov	r0, #0
   186bc:	mov	r2, #5
   186c0:	bl	114dc <dcgettext@plt>
   186c4:	mov	r1, r0
   186c8:	ldm	r6, {r2, r3}
   186cc:	ldr	r0, [r6, #8]
   186d0:	str	r0, [sp]
   186d4:	b	18770 <__assert_fail@plt+0x6f70>
   186d8:	movw	r1, #49487	; 0xc14f
   186dc:	movt	r1, #1
   186e0:	mov	r0, #0
   186e4:	mov	r2, #5
   186e8:	bl	114dc <dcgettext@plt>
   186ec:	mov	r1, r0
   186f0:	ldm	r6, {r2, r3}
   186f4:	ldr	r0, [r6, #8]
   186f8:	ldr	r7, [r6, #12]
   186fc:	stm	sp, {r0, r7}
   18700:	b	18770 <__assert_fail@plt+0x6f70>
   18704:	movw	r1, #49519	; 0xc16f
   18708:	movt	r1, #1
   1870c:	mov	r0, #0
   18710:	mov	r2, #5
   18714:	bl	114dc <dcgettext@plt>
   18718:	mov	r1, r0
   1871c:	ldm	r6, {r2, r3}
   18720:	ldr	r0, [r6, #8]
   18724:	ldr	r7, [r6, #12]
   18728:	ldr	r6, [r6, #16]
   1872c:	stm	sp, {r0, r7}
   18730:	str	r6, [sp, #8]
   18734:	b	18770 <__assert_fail@plt+0x6f70>
   18738:	movw	r1, #49555	; 0xc193
   1873c:	movt	r1, #1
   18740:	mov	r0, #0
   18744:	mov	r2, #5
   18748:	bl	114dc <dcgettext@plt>
   1874c:	mov	r1, r0
   18750:	ldm	r6, {r2, r3}
   18754:	ldr	r0, [r6, #8]
   18758:	ldr	r7, [r6, #12]
   1875c:	ldr	r4, [r6, #16]
   18760:	ldr	r6, [r6, #20]
   18764:	stm	sp, {r0, r7}
   18768:	str	r4, [sp, #8]
   1876c:	str	r6, [sp, #12]
   18770:	mov	r0, r5
   18774:	b	18864 <__assert_fail@plt+0x7064>
   18778:	movw	r1, #49595	; 0xc1bb
   1877c:	movt	r1, #1
   18780:	mov	r0, #0
   18784:	mov	r2, #5
   18788:	bl	114dc <dcgettext@plt>
   1878c:	mov	ip, r0
   18790:	ldm	r6, {r2, r3}
   18794:	ldr	r0, [r6, #8]
   18798:	ldr	r7, [r6, #12]
   1879c:	ldr	r4, [r6, #16]
   187a0:	ldr	r1, [r6, #20]
   187a4:	ldr	r6, [r6, #24]
   187a8:	stm	sp, {r0, r7}
   187ac:	str	r4, [sp, #8]
   187b0:	str	r1, [sp, #12]
   187b4:	str	r6, [sp, #16]
   187b8:	b	1885c <__assert_fail@plt+0x705c>
   187bc:	movw	r1, #49687	; 0xc217
   187c0:	movt	r1, #1
   187c4:	mov	r0, #0
   187c8:	mov	r2, #5
   187cc:	bl	114dc <dcgettext@plt>
   187d0:	mov	ip, r0
   187d4:	ldr	r2, [r6]
   187d8:	ldr	r3, [r6, #4]
   187dc:	ldr	r0, [r6, #8]
   187e0:	ldr	r7, [r6, #12]
   187e4:	ldr	r4, [r6, #16]
   187e8:	ldr	r1, [r6, #20]
   187ec:	ldr	lr, [r6, #24]
   187f0:	ldr	r8, [r6, #28]
   187f4:	ldr	r6, [r6, #32]
   187f8:	stm	sp, {r0, r7}
   187fc:	str	r4, [sp, #8]
   18800:	str	r1, [sp, #12]
   18804:	str	lr, [sp, #16]
   18808:	str	r8, [sp, #20]
   1880c:	str	r6, [sp, #24]
   18810:	b	1885c <__assert_fail@plt+0x705c>
   18814:	movw	r1, #49639	; 0xc1e7
   18818:	movt	r1, #1
   1881c:	mov	r0, #0
   18820:	mov	r2, #5
   18824:	bl	114dc <dcgettext@plt>
   18828:	mov	ip, r0
   1882c:	ldm	r6, {r2, r3}
   18830:	ldr	r0, [r6, #8]
   18834:	ldr	r7, [r6, #12]
   18838:	ldr	r4, [r6, #16]
   1883c:	ldr	r1, [r6, #20]
   18840:	ldr	lr, [r6, #24]
   18844:	ldr	r6, [r6, #28]
   18848:	stm	sp, {r0, r7}
   1884c:	str	r4, [sp, #8]
   18850:	str	r1, [sp, #12]
   18854:	str	lr, [sp, #16]
   18858:	str	r6, [sp, #20]
   1885c:	mov	r0, r5
   18860:	mov	r1, ip
   18864:	bl	11674 <fprintf@plt>
   18868:	sub	sp, fp, #24
   1886c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18870:	push	{r4, sl, fp, lr}
   18874:	add	fp, sp, #8
   18878:	sub	sp, sp, #8
   1887c:	mov	lr, #0
   18880:	ldr	ip, [fp, #8]
   18884:	ldr	r4, [ip, lr, lsl #2]
   18888:	add	lr, lr, #1
   1888c:	cmp	r4, #0
   18890:	bne	18884 <__assert_fail@plt+0x7084>
   18894:	sub	r4, lr, #1
   18898:	str	ip, [sp]
   1889c:	str	r4, [sp, #4]
   188a0:	bl	1854c <__assert_fail@plt+0x6d4c>
   188a4:	sub	sp, fp, #8
   188a8:	pop	{r4, sl, fp, pc}
   188ac:	push	{r4, r5, fp, lr}
   188b0:	add	fp, sp, #8
   188b4:	sub	sp, sp, #48	; 0x30
   188b8:	mov	ip, #0
   188bc:	ldr	r4, [fp, #8]
   188c0:	add	lr, sp, #8
   188c4:	ldr	r5, [r4]
   188c8:	str	r5, [lr, ip, lsl #2]
   188cc:	cmp	r5, #0
   188d0:	beq	188e8 <__assert_fail@plt+0x70e8>
   188d4:	add	ip, ip, #1
   188d8:	add	r4, r4, #4
   188dc:	cmp	ip, #10
   188e0:	bne	188c4 <__assert_fail@plt+0x70c4>
   188e4:	mov	ip, #10
   188e8:	str	lr, [sp]
   188ec:	str	ip, [sp, #4]
   188f0:	bl	1854c <__assert_fail@plt+0x6d4c>
   188f4:	sub	sp, fp, #8
   188f8:	pop	{r4, r5, fp, pc}
   188fc:	push	{fp, lr}
   18900:	mov	fp, sp
   18904:	sub	sp, sp, #8
   18908:	add	ip, fp, #8
   1890c:	str	ip, [sp, #4]
   18910:	str	ip, [sp]
   18914:	bl	188ac <__assert_fail@plt+0x70ac>
   18918:	mov	sp, fp
   1891c:	pop	{fp, pc}
   18920:	push	{fp, lr}
   18924:	mov	fp, sp
   18928:	movw	r0, #53724	; 0xd1dc
   1892c:	movt	r0, #2
   18930:	ldr	r1, [r0]
   18934:	mov	r0, #10
   18938:	bl	11758 <fputc@plt>
   1893c:	movw	r1, #49799	; 0xc287
   18940:	movt	r1, #1
   18944:	mov	r0, #0
   18948:	mov	r2, #5
   1894c:	bl	114dc <dcgettext@plt>
   18950:	movw	r1, #48678	; 0xbe26
   18954:	movt	r1, #1
   18958:	bl	11458 <printf@plt>
   1895c:	movw	r1, #49819	; 0xc29b
   18960:	movt	r1, #1
   18964:	mov	r0, #0
   18968:	mov	r2, #5
   1896c:	bl	114dc <dcgettext@plt>
   18970:	movw	r1, #48278	; 0xbc96
   18974:	movt	r1, #1
   18978:	movw	r2, #48592	; 0xbdd0
   1897c:	movt	r2, #1
   18980:	bl	11458 <printf@plt>
   18984:	movw	r1, #49839	; 0xc2af
   18988:	movt	r1, #1
   1898c:	mov	r0, #0
   18990:	mov	r2, #5
   18994:	bl	114dc <dcgettext@plt>
   18998:	movw	r1, #49878	; 0xc2d6
   1899c:	movt	r1, #1
   189a0:	pop	{fp, lr}
   189a4:	b	11458 <printf@plt>
   189a8:	b	189ac <__assert_fail@plt+0x71ac>
   189ac:	push	{r4, r5, r6, sl, fp, lr}
   189b0:	add	fp, sp, #16
   189b4:	mov	r4, r2
   189b8:	mov	r5, r1
   189bc:	mov	r6, r0
   189c0:	bl	19714 <__assert_fail@plt+0x7f14>
   189c4:	cmp	r0, #0
   189c8:	popne	{r4, r5, r6, sl, fp, pc}
   189cc:	cmp	r6, #0
   189d0:	beq	189e4 <__assert_fail@plt+0x71e4>
   189d4:	cmp	r5, #0
   189d8:	cmpne	r4, #0
   189dc:	bne	189e4 <__assert_fail@plt+0x71e4>
   189e0:	pop	{r4, r5, r6, sl, fp, pc}
   189e4:	bl	18d70 <__assert_fail@plt+0x7570>
   189e8:	push	{fp, lr}
   189ec:	mov	fp, sp
   189f0:	bl	1962c <__assert_fail@plt+0x7e2c>
   189f4:	pop	{fp, lr}
   189f8:	b	189fc <__assert_fail@plt+0x71fc>
   189fc:	cmp	r0, #0
   18a00:	bxne	lr
   18a04:	push	{fp, lr}
   18a08:	mov	fp, sp
   18a0c:	bl	18d70 <__assert_fail@plt+0x7570>
   18a10:	push	{fp, lr}
   18a14:	mov	fp, sp
   18a18:	bl	19b80 <__assert_fail@plt+0x8380>
   18a1c:	pop	{fp, lr}
   18a20:	b	189fc <__assert_fail@plt+0x71fc>
   18a24:	b	189e8 <__assert_fail@plt+0x71e8>
   18a28:	push	{r4, r5, fp, lr}
   18a2c:	add	fp, sp, #8
   18a30:	mov	r4, r1
   18a34:	mov	r5, r0
   18a38:	bl	196c0 <__assert_fail@plt+0x7ec0>
   18a3c:	cmp	r0, #0
   18a40:	popne	{r4, r5, fp, pc}
   18a44:	cmp	r5, #0
   18a48:	beq	18a58 <__assert_fail@plt+0x7258>
   18a4c:	cmp	r4, #0
   18a50:	bne	18a58 <__assert_fail@plt+0x7258>
   18a54:	pop	{r4, r5, fp, pc}
   18a58:	bl	18d70 <__assert_fail@plt+0x7570>
   18a5c:	push	{fp, lr}
   18a60:	mov	fp, sp
   18a64:	bl	19b84 <__assert_fail@plt+0x8384>
   18a68:	pop	{fp, lr}
   18a6c:	b	189fc <__assert_fail@plt+0x71fc>
   18a70:	push	{fp, lr}
   18a74:	mov	fp, sp
   18a78:	bl	19b94 <__assert_fail@plt+0x8394>
   18a7c:	pop	{fp, lr}
   18a80:	b	189fc <__assert_fail@plt+0x71fc>
   18a84:	mov	r2, r1
   18a88:	mov	r1, r0
   18a8c:	mov	r0, #0
   18a90:	b	189ac <__assert_fail@plt+0x71ac>
   18a94:	mov	r2, r1
   18a98:	mov	r1, r0
   18a9c:	mov	r0, #0
   18aa0:	b	18a70 <__assert_fail@plt+0x7270>
   18aa4:	mov	r2, #1
   18aa8:	b	18aac <__assert_fail@plt+0x72ac>
   18aac:	push	{r4, r5, fp, lr}
   18ab0:	add	fp, sp, #8
   18ab4:	mov	r4, r1
   18ab8:	ldr	r5, [r1]
   18abc:	cmp	r0, #0
   18ac0:	beq	18ad8 <__assert_fail@plt+0x72d8>
   18ac4:	mov	r1, #1
   18ac8:	add	r1, r1, r5, lsr #1
   18acc:	adds	r5, r5, r1
   18ad0:	bcc	18af0 <__assert_fail@plt+0x72f0>
   18ad4:	bl	18d70 <__assert_fail@plt+0x7570>
   18ad8:	cmp	r5, #0
   18adc:	bne	18af0 <__assert_fail@plt+0x72f0>
   18ae0:	mov	r1, #64	; 0x40
   18ae4:	udiv	r5, r1, r2
   18ae8:	cmp	r2, #64	; 0x40
   18aec:	addhi	r5, r5, #1
   18af0:	mov	r1, r5
   18af4:	bl	189ac <__assert_fail@plt+0x71ac>
   18af8:	str	r5, [r4]
   18afc:	pop	{r4, r5, fp, pc}
   18b00:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18b04:	add	fp, sp, #24
   18b08:	mov	r8, r1
   18b0c:	ldr	r6, [r1]
   18b10:	add	r1, r6, r6, asr #1
   18b14:	cmp	r1, r6
   18b18:	mvnvs	r1, #-2147483648	; 0x80000000
   18b1c:	cmp	r1, r3
   18b20:	mov	r5, r1
   18b24:	movgt	r5, r3
   18b28:	cmn	r3, #1
   18b2c:	movle	r5, r1
   18b30:	ldr	r4, [fp, #8]
   18b34:	cmn	r4, #1
   18b38:	ble	18b60 <__assert_fail@plt+0x7360>
   18b3c:	cmp	r4, #0
   18b40:	beq	18bb4 <__assert_fail@plt+0x73b4>
   18b44:	cmn	r5, #1
   18b48:	ble	18b88 <__assert_fail@plt+0x7388>
   18b4c:	mvn	r7, #-2147483648	; 0x80000000
   18b50:	udiv	r1, r7, r4
   18b54:	cmp	r1, r5
   18b58:	bge	18bb4 <__assert_fail@plt+0x73b4>
   18b5c:	b	18bc4 <__assert_fail@plt+0x73c4>
   18b60:	cmn	r5, #1
   18b64:	ble	18ba4 <__assert_fail@plt+0x73a4>
   18b68:	cmn	r4, #1
   18b6c:	beq	18bb4 <__assert_fail@plt+0x73b4>
   18b70:	mov	r1, #-2147483648	; 0x80000000
   18b74:	sdiv	r1, r1, r4
   18b78:	mvn	r7, #-2147483648	; 0x80000000
   18b7c:	cmp	r1, r5
   18b80:	bge	18bb4 <__assert_fail@plt+0x73b4>
   18b84:	b	18bc4 <__assert_fail@plt+0x73c4>
   18b88:	beq	18bb4 <__assert_fail@plt+0x73b4>
   18b8c:	mov	r1, #-2147483648	; 0x80000000
   18b90:	sdiv	r1, r1, r5
   18b94:	mvn	r7, #-2147483648	; 0x80000000
   18b98:	cmp	r1, r4
   18b9c:	bge	18bb4 <__assert_fail@plt+0x73b4>
   18ba0:	b	18bc4 <__assert_fail@plt+0x73c4>
   18ba4:	mvn	r7, #-2147483648	; 0x80000000
   18ba8:	sdiv	r1, r7, r4
   18bac:	cmp	r5, r1
   18bb0:	blt	18bc4 <__assert_fail@plt+0x73c4>
   18bb4:	mul	r1, r5, r4
   18bb8:	mov	r7, #64	; 0x40
   18bbc:	cmp	r1, #63	; 0x3f
   18bc0:	bgt	18bcc <__assert_fail@plt+0x73cc>
   18bc4:	sdiv	r5, r7, r4
   18bc8:	mul	r1, r5, r4
   18bcc:	cmp	r0, #0
   18bd0:	moveq	r7, #0
   18bd4:	streq	r7, [r8]
   18bd8:	sub	r7, r5, r6
   18bdc:	cmp	r7, r2
   18be0:	bge	18c8c <__assert_fail@plt+0x748c>
   18be4:	add	r5, r6, r2
   18be8:	mov	r1, #0
   18bec:	cmp	r5, r3
   18bf0:	mov	r2, #0
   18bf4:	movwgt	r2, #1
   18bf8:	cmn	r3, #1
   18bfc:	movwgt	r1, #1
   18c00:	cmp	r5, r6
   18c04:	bvs	18c74 <__assert_fail@plt+0x7474>
   18c08:	ands	r1, r1, r2
   18c0c:	bne	18c74 <__assert_fail@plt+0x7474>
   18c10:	cmn	r4, #1
   18c14:	ble	18c3c <__assert_fail@plt+0x743c>
   18c18:	cmp	r4, #0
   18c1c:	beq	18c88 <__assert_fail@plt+0x7488>
   18c20:	cmn	r5, #1
   18c24:	ble	18c60 <__assert_fail@plt+0x7460>
   18c28:	mvn	r1, #-2147483648	; 0x80000000
   18c2c:	udiv	r1, r1, r4
   18c30:	cmp	r1, r5
   18c34:	bge	18c88 <__assert_fail@plt+0x7488>
   18c38:	b	18c74 <__assert_fail@plt+0x7474>
   18c3c:	cmn	r5, #1
   18c40:	ble	18c78 <__assert_fail@plt+0x7478>
   18c44:	cmn	r4, #1
   18c48:	beq	18c88 <__assert_fail@plt+0x7488>
   18c4c:	mov	r1, #-2147483648	; 0x80000000
   18c50:	sdiv	r1, r1, r4
   18c54:	cmp	r1, r5
   18c58:	bge	18c88 <__assert_fail@plt+0x7488>
   18c5c:	b	18c74 <__assert_fail@plt+0x7474>
   18c60:	beq	18c88 <__assert_fail@plt+0x7488>
   18c64:	mov	r1, #-2147483648	; 0x80000000
   18c68:	sdiv	r1, r1, r5
   18c6c:	cmp	r1, r4
   18c70:	bge	18c88 <__assert_fail@plt+0x7488>
   18c74:	bl	18d70 <__assert_fail@plt+0x7570>
   18c78:	mvn	r1, #-2147483648	; 0x80000000
   18c7c:	sdiv	r1, r1, r4
   18c80:	cmp	r5, r1
   18c84:	blt	18c74 <__assert_fail@plt+0x7474>
   18c88:	mul	r1, r5, r4
   18c8c:	bl	18a28 <__assert_fail@plt+0x7228>
   18c90:	str	r5, [r8]
   18c94:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18c98:	mov	r1, #1
   18c9c:	b	18ca0 <__assert_fail@plt+0x74a0>
   18ca0:	push	{fp, lr}
   18ca4:	mov	fp, sp
   18ca8:	bl	1927c <__assert_fail@plt+0x7a7c>
   18cac:	pop	{fp, lr}
   18cb0:	b	189fc <__assert_fail@plt+0x71fc>
   18cb4:	mov	r1, #1
   18cb8:	b	18cbc <__assert_fail@plt+0x74bc>
   18cbc:	push	{fp, lr}
   18cc0:	mov	fp, sp
   18cc4:	bl	19b90 <__assert_fail@plt+0x8390>
   18cc8:	pop	{fp, lr}
   18ccc:	b	189fc <__assert_fail@plt+0x71fc>
   18cd0:	push	{r4, r5, fp, lr}
   18cd4:	add	fp, sp, #8
   18cd8:	mov	r4, r1
   18cdc:	mov	r5, r0
   18ce0:	mov	r0, r1
   18ce4:	bl	189e8 <__assert_fail@plt+0x71e8>
   18ce8:	mov	r1, r5
   18cec:	mov	r2, r4
   18cf0:	pop	{r4, r5, fp, lr}
   18cf4:	b	114ac <memcpy@plt>
   18cf8:	push	{r4, r5, fp, lr}
   18cfc:	add	fp, sp, #8
   18d00:	mov	r4, r1
   18d04:	mov	r5, r0
   18d08:	mov	r0, r1
   18d0c:	bl	18a10 <__assert_fail@plt+0x7210>
   18d10:	mov	r1, r5
   18d14:	mov	r2, r4
   18d18:	pop	{r4, r5, fp, lr}
   18d1c:	b	114ac <memcpy@plt>
   18d20:	push	{r4, r5, fp, lr}
   18d24:	add	fp, sp, #8
   18d28:	mov	r4, r1
   18d2c:	mov	r5, r0
   18d30:	add	r0, r1, #1
   18d34:	bl	18a10 <__assert_fail@plt+0x7210>
   18d38:	mov	r1, #0
   18d3c:	strb	r1, [r0, r4]
   18d40:	mov	r1, r5
   18d44:	mov	r2, r4
   18d48:	pop	{r4, r5, fp, lr}
   18d4c:	b	114ac <memcpy@plt>
   18d50:	push	{r4, sl, fp, lr}
   18d54:	add	fp, sp, #8
   18d58:	mov	r4, r0
   18d5c:	bl	11650 <strlen@plt>
   18d60:	add	r1, r0, #1
   18d64:	mov	r0, r4
   18d68:	pop	{r4, sl, fp, lr}
   18d6c:	b	18cd0 <__assert_fail@plt+0x74d0>
   18d70:	push	{fp, lr}
   18d74:	mov	fp, sp
   18d78:	movw	r0, #53616	; 0xd170
   18d7c:	movt	r0, #2
   18d80:	ldr	r4, [r0]
   18d84:	movw	r1, #49954	; 0xc322
   18d88:	movt	r1, #1
   18d8c:	mov	r0, #0
   18d90:	mov	r2, #5
   18d94:	bl	114dc <dcgettext@plt>
   18d98:	mov	r3, r0
   18d9c:	movw	r2, #48383	; 0xbcff
   18da0:	movt	r2, #1
   18da4:	mov	r0, r4
   18da8:	mov	r1, #0
   18dac:	bl	115a8 <error@plt>
   18db0:	bl	117d0 <abort@plt>
   18db4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18db8:	add	fp, sp, #28
   18dbc:	sub	sp, sp, #12
   18dc0:	cmp	r2, #37	; 0x25
   18dc4:	bcs	191e8 <__assert_fail@plt+0x79e8>
   18dc8:	mov	r7, r2
   18dcc:	mov	r6, r1
   18dd0:	mov	r4, r0
   18dd4:	str	r3, [sp]
   18dd8:	ldr	sl, [fp, #8]
   18ddc:	bl	11680 <__errno_location@plt>
   18de0:	mov	r5, r0
   18de4:	mov	r0, #0
   18de8:	str	r0, [r5]
   18dec:	bl	11614 <__ctype_b_loc@plt>
   18df0:	ldr	r1, [r0]
   18df4:	mov	r2, r4
   18df8:	ldrb	r0, [r2], #1
   18dfc:	add	r3, r1, r0, lsl #1
   18e00:	ldrb	r3, [r3, #1]
   18e04:	tst	r3, #32
   18e08:	bne	18df8 <__assert_fail@plt+0x75f8>
   18e0c:	add	r9, sp, #8
   18e10:	cmp	r6, #0
   18e14:	movne	r9, r6
   18e18:	mov	r8, #4
   18e1c:	cmp	r0, #45	; 0x2d
   18e20:	beq	191dc <__assert_fail@plt+0x79dc>
   18e24:	mov	r0, r4
   18e28:	mov	r1, r9
   18e2c:	mov	r2, r7
   18e30:	bl	11644 <strtoul@plt>
   18e34:	str	r0, [sp, #4]
   18e38:	ldr	r7, [r9]
   18e3c:	cmp	r7, r4
   18e40:	beq	18e68 <__assert_fail@plt+0x7668>
   18e44:	ldr	r0, [r5]
   18e48:	cmp	r0, #0
   18e4c:	beq	18e9c <__assert_fail@plt+0x769c>
   18e50:	cmp	r0, #34	; 0x22
   18e54:	bne	191dc <__assert_fail@plt+0x79dc>
   18e58:	mov	r8, #1
   18e5c:	cmp	sl, #0
   18e60:	bne	18ea8 <__assert_fail@plt+0x76a8>
   18e64:	b	191d0 <__assert_fail@plt+0x79d0>
   18e68:	cmp	sl, #0
   18e6c:	beq	191dc <__assert_fail@plt+0x79dc>
   18e70:	ldrb	r1, [r7]
   18e74:	cmp	r1, #0
   18e78:	beq	191dc <__assert_fail@plt+0x79dc>
   18e7c:	mov	r0, sl
   18e80:	bl	1165c <strchr@plt>
   18e84:	cmp	r0, #0
   18e88:	beq	191dc <__assert_fail@plt+0x79dc>
   18e8c:	mov	r0, #1
   18e90:	str	r0, [sp, #4]
   18e94:	mov	r8, #0
   18e98:	b	18ea8 <__assert_fail@plt+0x76a8>
   18e9c:	mov	r8, r0
   18ea0:	cmp	sl, #0
   18ea4:	beq	191d0 <__assert_fail@plt+0x79d0>
   18ea8:	ldrb	r4, [r7]
   18eac:	cmp	r4, #0
   18eb0:	beq	191d0 <__assert_fail@plt+0x79d0>
   18eb4:	mov	r0, sl
   18eb8:	mov	r1, r4
   18ebc:	bl	1165c <strchr@plt>
   18ec0:	cmp	r0, #0
   18ec4:	beq	190f0 <__assert_fail@plt+0x78f0>
   18ec8:	sub	r0, r4, #69	; 0x45
   18ecc:	mov	r6, #1
   18ed0:	mov	r5, #1024	; 0x400
   18ed4:	cmp	r0, #47	; 0x2f
   18ed8:	bhi	18fec <__assert_fail@plt+0x77ec>
   18edc:	add	r1, pc, #0
   18ee0:	ldr	pc, [r1, r0, lsl #2]
   18ee4:	andeq	r8, r1, r4, lsr #31
   18ee8:	andeq	r8, r1, ip, ror #31
   18eec:	andeq	r8, r1, r4, lsr #31
   18ef0:	andeq	r8, r1, ip, ror #31
   18ef4:	andeq	r8, r1, ip, ror #31
   18ef8:	andeq	r8, r1, ip, ror #31
   18efc:	andeq	r8, r1, r4, lsr #31
   18f00:	andeq	r8, r1, ip, ror #31
   18f04:	andeq	r8, r1, r4, lsr #31
   18f08:	andeq	r8, r1, ip, ror #31
   18f0c:	andeq	r8, r1, ip, ror #31
   18f10:	andeq	r8, r1, r4, lsr #31
   18f14:	andeq	r8, r1, ip, ror #31
   18f18:	andeq	r8, r1, ip, ror #31
   18f1c:	andeq	r8, r1, ip, ror #31
   18f20:	andeq	r8, r1, r4, lsr #31
   18f24:	andeq	r8, r1, ip, ror #31
   18f28:	andeq	r8, r1, ip, ror #31
   18f2c:	andeq	r8, r1, ip, ror #31
   18f30:	andeq	r8, r1, ip, ror #31
   18f34:	andeq	r8, r1, r4, lsr #31
   18f38:	andeq	r8, r1, r4, lsr #31
   18f3c:	andeq	r8, r1, ip, ror #31
   18f40:	andeq	r8, r1, ip, ror #31
   18f44:	andeq	r8, r1, ip, ror #31
   18f48:	andeq	r8, r1, ip, ror #31
   18f4c:	andeq	r8, r1, ip, ror #31
   18f50:	andeq	r8, r1, ip, ror #31
   18f54:	andeq	r8, r1, ip, ror #31
   18f58:	andeq	r8, r1, ip, ror #31
   18f5c:	andeq	r8, r1, ip, ror #31
   18f60:	andeq	r8, r1, ip, ror #31
   18f64:	andeq	r8, r1, ip, ror #31
   18f68:	andeq	r8, r1, ip, ror #31
   18f6c:	andeq	r8, r1, r4, lsr #31
   18f70:	andeq	r8, r1, ip, ror #31
   18f74:	andeq	r8, r1, ip, ror #31
   18f78:	andeq	r8, r1, ip, ror #31
   18f7c:	andeq	r8, r1, r4, lsr #31
   18f80:	andeq	r8, r1, ip, ror #31
   18f84:	andeq	r8, r1, r4, lsr #31
   18f88:	andeq	r8, r1, ip, ror #31
   18f8c:	andeq	r8, r1, ip, ror #31
   18f90:	andeq	r8, r1, ip, ror #31
   18f94:	andeq	r8, r1, ip, ror #31
   18f98:	andeq	r8, r1, ip, ror #31
   18f9c:	andeq	r8, r1, ip, ror #31
   18fa0:	andeq	r8, r1, r4, lsr #31
   18fa4:	mov	r0, sl
   18fa8:	mov	r1, #48	; 0x30
   18fac:	bl	1165c <strchr@plt>
   18fb0:	cmp	r0, #0
   18fb4:	beq	18fec <__assert_fail@plt+0x77ec>
   18fb8:	ldrb	r0, [r7, #1]
   18fbc:	cmp	r0, #66	; 0x42
   18fc0:	cmpne	r0, #68	; 0x44
   18fc4:	bne	18fd4 <__assert_fail@plt+0x77d4>
   18fc8:	mov	r6, #2
   18fcc:	mov	r5, #1000	; 0x3e8
   18fd0:	b	18fec <__assert_fail@plt+0x77ec>
   18fd4:	cmp	r0, #105	; 0x69
   18fd8:	bne	18fec <__assert_fail@plt+0x77ec>
   18fdc:	ldrb	r0, [r7, #2]
   18fe0:	mov	r6, #1
   18fe4:	cmp	r0, #66	; 0x42
   18fe8:	movweq	r6, #3
   18fec:	sub	r1, r4, #66	; 0x42
   18ff0:	cmp	r1, #53	; 0x35
   18ff4:	bhi	190f0 <__assert_fail@plt+0x78f0>
   18ff8:	mov	r0, #0
   18ffc:	add	r2, pc, #0
   19000:	ldr	pc, [r2, r1, lsl #2]
   19004:	andeq	r9, r1, r4, asr r1
   19008:	strdeq	r9, [r1], -r0
   1900c:	strdeq	r9, [r1], -r0
   19010:	andeq	r9, r1, r0, ror #2
   19014:	strdeq	r9, [r1], -r0
   19018:	ldrdeq	r9, [r1], -ip
   1901c:	strdeq	r9, [r1], -r0
   19020:	strdeq	r9, [r1], -r0
   19024:	strdeq	r9, [r1], -r0
   19028:	andeq	r9, r1, r4, lsl #2
   1902c:	strdeq	r9, [r1], -r0
   19030:	andeq	r9, r1, r8, lsl r1
   19034:	strdeq	r9, [r1], -r0
   19038:	strdeq	r9, [r1], -r0
   1903c:	andeq	r9, r1, r4, ror r1
   19040:	strdeq	r9, [r1], -r0
   19044:	strdeq	r9, [r1], -r0
   19048:	strdeq	r9, [r1], -r0
   1904c:	andeq	r9, r1, ip, lsr #2
   19050:	strdeq	r9, [r1], -r0
   19054:	strdeq	r9, [r1], -r0
   19058:	strdeq	r9, [r1], -r0
   1905c:	strdeq	r9, [r1], -r0
   19060:	andeq	r9, r1, r8, lsl #3
   19064:	andeq	r9, r1, r0, asr #2
   19068:	strdeq	r9, [r1], -r0
   1906c:	strdeq	r9, [r1], -r0
   19070:	strdeq	r9, [r1], -r0
   19074:	strdeq	r9, [r1], -r0
   19078:	strdeq	r9, [r1], -r0
   1907c:	strdeq	r9, [r1], -r0
   19080:	strdeq	r9, [r1], -r0
   19084:	muleq	r1, ip, r1
   19088:			; <UNDEFINED> instruction: 0x000191b4
   1908c:	strdeq	r9, [r1], -r0
   19090:	strdeq	r9, [r1], -r0
   19094:	strdeq	r9, [r1], -r0
   19098:	ldrdeq	r9, [r1], -ip
   1909c:	strdeq	r9, [r1], -r0
   190a0:	strdeq	r9, [r1], -r0
   190a4:	strdeq	r9, [r1], -r0
   190a8:	andeq	r9, r1, r4, lsl #2
   190ac:	strdeq	r9, [r1], -r0
   190b0:	andeq	r9, r1, r8, lsl r1
   190b4:	strdeq	r9, [r1], -r0
   190b8:	strdeq	r9, [r1], -r0
   190bc:	strdeq	r9, [r1], -r0
   190c0:	strdeq	r9, [r1], -r0
   190c4:	strdeq	r9, [r1], -r0
   190c8:	strdeq	r9, [r1], -r0
   190cc:	andeq	r9, r1, ip, lsr #2
   190d0:	strdeq	r9, [r1], -r0
   190d4:	strdeq	r9, [r1], -r0
   190d8:	andeq	r9, r1, r8, lsr #3
   190dc:	add	r0, sp, #4
   190e0:	mov	r1, r5
   190e4:	mov	r2, #3
   190e8:	bl	19230 <__assert_fail@plt+0x7a30>
   190ec:	b	191b4 <__assert_fail@plt+0x79b4>
   190f0:	ldr	r0, [sp, #4]
   190f4:	ldr	r1, [sp]
   190f8:	str	r0, [r1]
   190fc:	orr	r8, r8, #2
   19100:	b	191dc <__assert_fail@plt+0x79dc>
   19104:	add	r0, sp, #4
   19108:	mov	r1, r5
   1910c:	mov	r2, #1
   19110:	bl	19230 <__assert_fail@plt+0x7a30>
   19114:	b	191b4 <__assert_fail@plt+0x79b4>
   19118:	add	r0, sp, #4
   1911c:	mov	r1, r5
   19120:	mov	r2, #2
   19124:	bl	19230 <__assert_fail@plt+0x7a30>
   19128:	b	191b4 <__assert_fail@plt+0x79b4>
   1912c:	add	r0, sp, #4
   19130:	mov	r1, r5
   19134:	mov	r2, #4
   19138:	bl	19230 <__assert_fail@plt+0x7a30>
   1913c:	b	191b4 <__assert_fail@plt+0x79b4>
   19140:	add	r0, sp, #4
   19144:	mov	r1, r5
   19148:	mov	r2, #7
   1914c:	bl	19230 <__assert_fail@plt+0x7a30>
   19150:	b	191b4 <__assert_fail@plt+0x79b4>
   19154:	add	r0, sp, #4
   19158:	mov	r1, #1024	; 0x400
   1915c:	b	191b0 <__assert_fail@plt+0x79b0>
   19160:	add	r0, sp, #4
   19164:	mov	r1, r5
   19168:	mov	r2, #6
   1916c:	bl	19230 <__assert_fail@plt+0x7a30>
   19170:	b	191b4 <__assert_fail@plt+0x79b4>
   19174:	add	r0, sp, #4
   19178:	mov	r1, r5
   1917c:	mov	r2, #5
   19180:	bl	19230 <__assert_fail@plt+0x7a30>
   19184:	b	191b4 <__assert_fail@plt+0x79b4>
   19188:	add	r0, sp, #4
   1918c:	mov	r1, r5
   19190:	mov	r2, #8
   19194:	bl	19230 <__assert_fail@plt+0x7a30>
   19198:	b	191b4 <__assert_fail@plt+0x79b4>
   1919c:	add	r0, sp, #4
   191a0:	mov	r1, #512	; 0x200
   191a4:	b	191b0 <__assert_fail@plt+0x79b0>
   191a8:	add	r0, sp, #4
   191ac:	mov	r1, #2
   191b0:	bl	19208 <__assert_fail@plt+0x7a08>
   191b4:	ldr	r1, [r9]
   191b8:	add	r2, r1, r6
   191bc:	str	r2, [r9]
   191c0:	ldrb	r1, [r1, r6]
   191c4:	orr	r8, r0, r8
   191c8:	cmp	r1, #0
   191cc:	orrne	r8, r8, #2
   191d0:	ldr	r0, [sp, #4]
   191d4:	ldr	r1, [sp]
   191d8:	str	r0, [r1]
   191dc:	mov	r0, r8
   191e0:	sub	sp, fp, #28
   191e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191e8:	movw	r0, #49971	; 0xc333
   191ec:	movt	r0, #1
   191f0:	movw	r1, #50009	; 0xc359
   191f4:	movt	r1, #1
   191f8:	movw	r3, #50021	; 0xc365
   191fc:	movt	r3, #1
   19200:	mov	r2, #84	; 0x54
   19204:	bl	11800 <__assert_fail@plt>
   19208:	mvn	r2, #0
   1920c:	udiv	r2, r2, r1
   19210:	ldr	r3, [r0]
   19214:	mul	r1, r3, r1
   19218:	cmp	r2, r3
   1921c:	mvncc	r1, #0
   19220:	str	r1, [r0]
   19224:	mov	r0, #0
   19228:	movwcc	r0, #1
   1922c:	bx	lr
   19230:	push	{r4, r5, r6, r7, fp, lr}
   19234:	add	fp, sp, #16
   19238:	cmp	r2, #0
   1923c:	beq	19270 <__assert_fail@plt+0x7a70>
   19240:	mov	r4, r2
   19244:	mov	r5, r1
   19248:	mov	r7, r0
   1924c:	mov	r6, #0
   19250:	mov	r0, r7
   19254:	mov	r1, r5
   19258:	bl	19208 <__assert_fail@plt+0x7a08>
   1925c:	orr	r6, r0, r6
   19260:	subs	r4, r4, #1
   19264:	bne	19250 <__assert_fail@plt+0x7a50>
   19268:	mov	r0, r6
   1926c:	pop	{r4, r5, r6, r7, fp, pc}
   19270:	mov	r6, #0
   19274:	mov	r0, r6
   19278:	pop	{r4, r5, r6, r7, fp, pc}
   1927c:	clz	r2, r1
   19280:	lsr	r2, r2, #5
   19284:	clz	r3, r0
   19288:	lsr	r3, r3, #5
   1928c:	orrs	r2, r3, r2
   19290:	movwne	r1, #1
   19294:	movwne	r0, #1
   19298:	cmp	r1, #0
   1929c:	beq	192cc <__assert_fail@plt+0x7acc>
   192a0:	mvn	r2, #-2147483648	; 0x80000000
   192a4:	udiv	r2, r2, r1
   192a8:	cmp	r2, r0
   192ac:	bcs	192cc <__assert_fail@plt+0x7acc>
   192b0:	push	{fp, lr}
   192b4:	mov	fp, sp
   192b8:	bl	11680 <__errno_location@plt>
   192bc:	mov	r1, #12
   192c0:	str	r1, [r0]
   192c4:	mov	r0, #0
   192c8:	pop	{fp, pc}
   192cc:	b	11434 <calloc@plt>
   192d0:	sub	sp, sp, #8
   192d4:	push	{fp, lr}
   192d8:	mov	fp, sp
   192dc:	sub	sp, sp, #8
   192e0:	str	r2, [fp, #8]
   192e4:	str	r3, [fp, #12]
   192e8:	add	r2, fp, #8
   192ec:	str	r2, [sp, #4]
   192f0:	cmp	r1, #11
   192f4:	bhi	19334 <__assert_fail@plt+0x7b34>
   192f8:	mov	r2, #1
   192fc:	movw	r3, #1300	; 0x514
   19300:	tst	r3, r2, lsl r1
   19304:	bne	19384 <__assert_fail@plt+0x7b84>
   19308:	movw	r3, #2570	; 0xa0a
   1930c:	tst	r3, r2, lsl r1
   19310:	bne	1935c <__assert_fail@plt+0x7b5c>
   19314:	cmp	r1, #0
   19318:	bne	19334 <__assert_fail@plt+0x7b34>
   1931c:	ldr	r1, [sp, #4]
   19320:	add	r2, r1, #4
   19324:	str	r2, [sp, #4]
   19328:	ldr	r1, [r1]
   1932c:	bl	193a8 <__assert_fail@plt+0x7ba8>
   19330:	b	19398 <__assert_fail@plt+0x7b98>
   19334:	sub	r2, r1, #1024	; 0x400
   19338:	cmp	r2, #10
   1933c:	bhi	19384 <__assert_fail@plt+0x7b84>
   19340:	mov	ip, #1
   19344:	movw	r3, #645	; 0x285
   19348:	tst	r3, ip, lsl r2
   1934c:	bne	19384 <__assert_fail@plt+0x7b84>
   19350:	movw	r3, #1282	; 0x502
   19354:	tst	r3, ip, lsl r2
   19358:	beq	19364 <__assert_fail@plt+0x7b64>
   1935c:	bl	11710 <fcntl64@plt>
   19360:	b	19398 <__assert_fail@plt+0x7b98>
   19364:	cmp	r2, #6
   19368:	bne	19384 <__assert_fail@plt+0x7b84>
   1936c:	ldr	r1, [sp, #4]
   19370:	add	r2, r1, #4
   19374:	str	r2, [sp, #4]
   19378:	ldr	r1, [r1]
   1937c:	bl	193b4 <__assert_fail@plt+0x7bb4>
   19380:	b	19398 <__assert_fail@plt+0x7b98>
   19384:	ldr	r2, [sp, #4]
   19388:	add	r3, r2, #4
   1938c:	str	r3, [sp, #4]
   19390:	ldr	r2, [r2]
   19394:	bl	11710 <fcntl64@plt>
   19398:	mov	sp, fp
   1939c:	pop	{fp, lr}
   193a0:	add	sp, sp, #8
   193a4:	bx	lr
   193a8:	mov	r2, r1
   193ac:	mov	r1, #0
   193b0:	b	11710 <fcntl64@plt>
   193b4:	push	{r4, r5, r6, r7, fp, lr}
   193b8:	add	fp, sp, #16
   193bc:	mov	r5, r1
   193c0:	mov	r6, r0
   193c4:	movw	r7, #54248	; 0xd3e8
   193c8:	movt	r7, #2
   193cc:	ldr	r0, [r7]
   193d0:	cmp	r0, #0
   193d4:	bmi	19438 <__assert_fail@plt+0x7c38>
   193d8:	mov	r0, r6
   193dc:	movw	r1, #1030	; 0x406
   193e0:	mov	r2, r5
   193e4:	bl	11710 <fcntl64@plt>
   193e8:	mov	r4, r0
   193ec:	cmn	r0, #1
   193f0:	bgt	19424 <__assert_fail@plt+0x7c24>
   193f4:	bl	11680 <__errno_location@plt>
   193f8:	ldr	r0, [r0]
   193fc:	cmp	r0, #22
   19400:	bne	19424 <__assert_fail@plt+0x7c24>
   19404:	mov	r0, r6
   19408:	mov	r1, r5
   1940c:	bl	193a8 <__assert_fail@plt+0x7ba8>
   19410:	mov	r4, r0
   19414:	cmp	r0, #0
   19418:	bmi	19488 <__assert_fail@plt+0x7c88>
   1941c:	mvn	r0, #0
   19420:	b	19428 <__assert_fail@plt+0x7c28>
   19424:	mov	r0, #1
   19428:	str	r0, [r7]
   1942c:	cmp	r4, #0
   19430:	bpl	19450 <__assert_fail@plt+0x7c50>
   19434:	b	19488 <__assert_fail@plt+0x7c88>
   19438:	mov	r0, r6
   1943c:	mov	r1, r5
   19440:	bl	193a8 <__assert_fail@plt+0x7ba8>
   19444:	mov	r4, r0
   19448:	cmp	r4, #0
   1944c:	bmi	19488 <__assert_fail@plt+0x7c88>
   19450:	ldr	r0, [r7]
   19454:	cmn	r0, #1
   19458:	bne	19488 <__assert_fail@plt+0x7c88>
   1945c:	mov	r0, r4
   19460:	mov	r1, #1
   19464:	bl	11710 <fcntl64@plt>
   19468:	cmp	r0, #0
   1946c:	bmi	19490 <__assert_fail@plt+0x7c90>
   19470:	orr	r2, r0, #1
   19474:	mov	r0, r4
   19478:	mov	r1, #2
   1947c:	bl	11710 <fcntl64@plt>
   19480:	cmn	r0, #1
   19484:	beq	19490 <__assert_fail@plt+0x7c90>
   19488:	mov	r0, r4
   1948c:	pop	{r4, r5, r6, r7, fp, pc}
   19490:	bl	11680 <__errno_location@plt>
   19494:	mov	r5, r0
   19498:	ldr	r6, [r0]
   1949c:	mov	r0, r4
   194a0:	bl	117e8 <close@plt>
   194a4:	str	r6, [r5]
   194a8:	mvn	r4, #0
   194ac:	mov	r0, r4
   194b0:	pop	{r4, r5, r6, r7, fp, pc}
   194b4:	push	{r4, sl, fp, lr}
   194b8:	add	fp, sp, #8
   194bc:	mov	r4, r0
   194c0:	cmp	r0, #0
   194c4:	beq	194dc <__assert_fail@plt+0x7cdc>
   194c8:	mov	r0, r4
   194cc:	bl	115f0 <__freading@plt>
   194d0:	cmp	r0, #0
   194d4:	movne	r0, r4
   194d8:	blne	194e8 <__assert_fail@plt+0x7ce8>
   194dc:	mov	r0, r4
   194e0:	pop	{r4, sl, fp, lr}
   194e4:	b	11470 <fflush@plt>
   194e8:	push	{fp, lr}
   194ec:	mov	fp, sp
   194f0:	sub	sp, sp, #8
   194f4:	ldrb	r1, [r0, #1]
   194f8:	tst	r1, #1
   194fc:	beq	19514 <__assert_fail@plt+0x7d14>
   19500:	mov	r1, #1
   19504:	str	r1, [sp]
   19508:	mov	r2, #0
   1950c:	mov	r3, #0
   19510:	bl	19584 <__assert_fail@plt+0x7d84>
   19514:	mov	sp, fp
   19518:	pop	{fp, pc}
   1951c:	ldrd	r2, [r0, #16]
   19520:	mov	r1, #0
   19524:	cmp	r3, r2
   19528:	bhi	19554 <__assert_fail@plt+0x7d54>
   1952c:	ldmib	r0, {r1, r2}
   19530:	sub	r1, r2, r1
   19534:	ldrb	r3, [r0, #1]
   19538:	mov	r2, #0
   1953c:	tst	r3, #1
   19540:	beq	19550 <__assert_fail@plt+0x7d50>
   19544:	ldr	r2, [r0, #36]	; 0x24
   19548:	ldr	r0, [r0, #44]	; 0x2c
   1954c:	sub	r2, r0, r2
   19550:	add	r1, r1, r2
   19554:	mov	r0, r1
   19558:	bx	lr
   1955c:	push	{r4, r5, r6, sl, fp, lr}
   19560:	add	fp, sp, #16
   19564:	mov	r4, r0
   19568:	bl	11680 <__errno_location@plt>
   1956c:	mov	r5, r0
   19570:	ldr	r6, [r0]
   19574:	mov	r0, r4
   19578:	bl	11488 <free@plt>
   1957c:	str	r6, [r5]
   19580:	pop	{r4, r5, r6, sl, fp, pc}
   19584:	push	{r4, r5, r6, r7, fp, lr}
   19588:	add	fp, sp, #16
   1958c:	sub	sp, sp, #8
   19590:	mov	r5, r3
   19594:	mov	r6, r2
   19598:	mov	r4, r0
   1959c:	ldr	r0, [r0, #4]
   195a0:	ldr	r1, [r4, #8]
   195a4:	cmp	r1, r0
   195a8:	bne	195c4 <__assert_fail@plt+0x7dc4>
   195ac:	ldrd	r0, [r4, #16]
   195b0:	cmp	r1, r0
   195b4:	bne	195c4 <__assert_fail@plt+0x7dc4>
   195b8:	ldr	r0, [r4, #36]	; 0x24
   195bc:	cmp	r0, #0
   195c0:	beq	195dc <__assert_fail@plt+0x7ddc>
   195c4:	mov	r0, r4
   195c8:	mov	r2, r6
   195cc:	mov	r3, r5
   195d0:	sub	sp, fp, #16
   195d4:	pop	{r4, r5, r6, r7, fp, lr}
   195d8:	b	11704 <fseeko64@plt>
   195dc:	ldr	r7, [fp, #8]
   195e0:	mov	r0, r4
   195e4:	bl	116c8 <fileno@plt>
   195e8:	str	r7, [sp]
   195ec:	mov	r2, r6
   195f0:	mov	r3, r5
   195f4:	bl	11560 <lseek64@plt>
   195f8:	and	r2, r0, r1
   195fc:	cmn	r2, #1
   19600:	beq	19620 <__assert_fail@plt+0x7e20>
   19604:	strd	r0, [r4, #80]	; 0x50
   19608:	ldr	r0, [r4]
   1960c:	bic	r0, r0, #16
   19610:	str	r0, [r4]
   19614:	mov	r0, #0
   19618:	sub	sp, fp, #16
   1961c:	pop	{r4, r5, r6, r7, fp, pc}
   19620:	mvn	r0, #0
   19624:	sub	sp, fp, #16
   19628:	pop	{r4, r5, r6, r7, fp, pc}
   1962c:	cmp	r0, #0
   19630:	movweq	r0, #1
   19634:	cmn	r0, #1
   19638:	ble	19640 <__assert_fail@plt+0x7e40>
   1963c:	b	115d8 <malloc@plt>
   19640:	push	{fp, lr}
   19644:	mov	fp, sp
   19648:	bl	11680 <__errno_location@plt>
   1964c:	mov	r1, #12
   19650:	str	r1, [r0]
   19654:	mov	r0, #0
   19658:	pop	{fp, pc}
   1965c:	push	{r4, r5, r6, r7, fp, lr}
   19660:	add	fp, sp, #16
   19664:	sub	sp, sp, #8
   19668:	mov	r7, r2
   1966c:	mov	r4, r1
   19670:	add	r5, sp, #4
   19674:	cmp	r0, #0
   19678:	movne	r5, r0
   1967c:	mov	r0, r5
   19680:	bl	1159c <mbrtowc@plt>
   19684:	mov	r6, r0
   19688:	cmp	r7, #0
   1968c:	beq	196b4 <__assert_fail@plt+0x7eb4>
   19690:	cmn	r6, #2
   19694:	bcc	196b4 <__assert_fail@plt+0x7eb4>
   19698:	mov	r0, #0
   1969c:	bl	19af8 <__assert_fail@plt+0x82f8>
   196a0:	cmp	r0, #0
   196a4:	bne	196b4 <__assert_fail@plt+0x7eb4>
   196a8:	ldrb	r0, [r4]
   196ac:	str	r0, [r5]
   196b0:	mov	r6, #1
   196b4:	mov	r0, r6
   196b8:	sub	sp, fp, #16
   196bc:	pop	{r4, r5, r6, r7, fp, pc}
   196c0:	push	{fp, lr}
   196c4:	mov	fp, sp
   196c8:	cmp	r0, #0
   196cc:	beq	196e8 <__assert_fail@plt+0x7ee8>
   196d0:	cmp	r1, #0
   196d4:	beq	196f4 <__assert_fail@plt+0x7ef4>
   196d8:	cmn	r1, #1
   196dc:	ble	19700 <__assert_fail@plt+0x7f00>
   196e0:	pop	{fp, lr}
   196e4:	b	1150c <realloc@plt>
   196e8:	mov	r0, r1
   196ec:	pop	{fp, lr}
   196f0:	b	1962c <__assert_fail@plt+0x7e2c>
   196f4:	bl	1955c <__assert_fail@plt+0x7d5c>
   196f8:	mov	r0, #0
   196fc:	pop	{fp, pc}
   19700:	bl	11680 <__errno_location@plt>
   19704:	mov	r1, #12
   19708:	str	r1, [r0]
   1970c:	mov	r0, #0
   19710:	pop	{fp, pc}
   19714:	cmp	r2, #0
   19718:	beq	19748 <__assert_fail@plt+0x7f48>
   1971c:	mvn	r3, #0
   19720:	udiv	r3, r3, r2
   19724:	cmp	r3, r1
   19728:	bcs	19748 <__assert_fail@plt+0x7f48>
   1972c:	push	{fp, lr}
   19730:	mov	fp, sp
   19734:	bl	11680 <__errno_location@plt>
   19738:	mov	r1, #12
   1973c:	str	r1, [r0]
   19740:	mov	r0, #0
   19744:	pop	{fp, pc}
   19748:	mul	r1, r2, r1
   1974c:	b	196c0 <__assert_fail@plt+0x7ec0>
   19750:	mov	r1, r0
   19754:	sub	r2, r0, #65	; 0x41
   19758:	mov	r0, #1
   1975c:	cmp	r2, #26
   19760:	subcs	r2, r1, #97	; 0x61
   19764:	cmpcs	r2, #26
   19768:	bcs	19770 <__assert_fail@plt+0x7f70>
   1976c:	bx	lr
   19770:	sub	r1, r1, #48	; 0x30
   19774:	cmp	r1, #10
   19778:	movcs	r0, #0
   1977c:	bx	lr
   19780:	mov	r1, r0
   19784:	sub	r2, r0, #65	; 0x41
   19788:	mov	r0, #1
   1978c:	cmp	r2, #26
   19790:	subcs	r1, r1, #97	; 0x61
   19794:	cmpcs	r1, #26
   19798:	movcs	r0, #0
   1979c:	bx	lr
   197a0:	mov	r1, #0
   197a4:	cmp	r0, #128	; 0x80
   197a8:	movwcc	r1, #1
   197ac:	mov	r0, r1
   197b0:	bx	lr
   197b4:	sub	r1, r0, #9
   197b8:	clz	r1, r1
   197bc:	lsr	r1, r1, #5
   197c0:	sub	r0, r0, #32
   197c4:	clz	r0, r0
   197c8:	lsr	r0, r0, #5
   197cc:	orr	r0, r0, r1
   197d0:	bx	lr
   197d4:	mov	r1, r0
   197d8:	mov	r0, #1
   197dc:	cmp	r1, #32
   197e0:	bxcc	lr
   197e4:	cmp	r1, #127	; 0x7f
   197e8:	movne	r0, #0
   197ec:	bx	lr
   197f0:	sub	r1, r0, #48	; 0x30
   197f4:	mov	r0, #0
   197f8:	cmp	r1, #10
   197fc:	movwcc	r0, #1
   19800:	bx	lr
   19804:	sub	r1, r0, #33	; 0x21
   19808:	mov	r0, #0
   1980c:	cmp	r1, #94	; 0x5e
   19810:	movwcc	r0, #1
   19814:	bx	lr
   19818:	sub	r1, r0, #97	; 0x61
   1981c:	mov	r0, #0
   19820:	cmp	r1, #26
   19824:	movwcc	r0, #1
   19828:	bx	lr
   1982c:	sub	r1, r0, #32
   19830:	mov	r0, #0
   19834:	cmp	r1, #95	; 0x5f
   19838:	movwcc	r0, #1
   1983c:	bx	lr
   19840:	sub	r1, r0, #33	; 0x21
   19844:	cmp	r1, #93	; 0x5d
   19848:	bhi	199d4 <__assert_fail@plt+0x81d4>
   1984c:	mov	r0, #1
   19850:	add	r2, pc, #0
   19854:	ldr	pc, [r2, r1, lsl #2]
   19858:	ldrdeq	r9, [r1], -r0
   1985c:	ldrdeq	r9, [r1], -r0
   19860:	ldrdeq	r9, [r1], -r0
   19864:	ldrdeq	r9, [r1], -r0
   19868:	ldrdeq	r9, [r1], -r0
   1986c:	ldrdeq	r9, [r1], -r0
   19870:	ldrdeq	r9, [r1], -r0
   19874:	ldrdeq	r9, [r1], -r0
   19878:	ldrdeq	r9, [r1], -r0
   1987c:	ldrdeq	r9, [r1], -r0
   19880:	ldrdeq	r9, [r1], -r0
   19884:	ldrdeq	r9, [r1], -r0
   19888:	ldrdeq	r9, [r1], -r0
   1988c:	ldrdeq	r9, [r1], -r0
   19890:	ldrdeq	r9, [r1], -r0
   19894:	ldrdeq	r9, [r1], -r4
   19898:	ldrdeq	r9, [r1], -r4
   1989c:	ldrdeq	r9, [r1], -r4
   198a0:	ldrdeq	r9, [r1], -r4
   198a4:	ldrdeq	r9, [r1], -r4
   198a8:	ldrdeq	r9, [r1], -r4
   198ac:	ldrdeq	r9, [r1], -r4
   198b0:	ldrdeq	r9, [r1], -r4
   198b4:	ldrdeq	r9, [r1], -r4
   198b8:	ldrdeq	r9, [r1], -r4
   198bc:	ldrdeq	r9, [r1], -r0
   198c0:	ldrdeq	r9, [r1], -r0
   198c4:	ldrdeq	r9, [r1], -r0
   198c8:	ldrdeq	r9, [r1], -r0
   198cc:	ldrdeq	r9, [r1], -r0
   198d0:	ldrdeq	r9, [r1], -r0
   198d4:	ldrdeq	r9, [r1], -r0
   198d8:	ldrdeq	r9, [r1], -r4
   198dc:	ldrdeq	r9, [r1], -r4
   198e0:	ldrdeq	r9, [r1], -r4
   198e4:	ldrdeq	r9, [r1], -r4
   198e8:	ldrdeq	r9, [r1], -r4
   198ec:	ldrdeq	r9, [r1], -r4
   198f0:	ldrdeq	r9, [r1], -r4
   198f4:	ldrdeq	r9, [r1], -r4
   198f8:	ldrdeq	r9, [r1], -r4
   198fc:	ldrdeq	r9, [r1], -r4
   19900:	ldrdeq	r9, [r1], -r4
   19904:	ldrdeq	r9, [r1], -r4
   19908:	ldrdeq	r9, [r1], -r4
   1990c:	ldrdeq	r9, [r1], -r4
   19910:	ldrdeq	r9, [r1], -r4
   19914:	ldrdeq	r9, [r1], -r4
   19918:	ldrdeq	r9, [r1], -r4
   1991c:	ldrdeq	r9, [r1], -r4
   19920:	ldrdeq	r9, [r1], -r4
   19924:	ldrdeq	r9, [r1], -r4
   19928:	ldrdeq	r9, [r1], -r4
   1992c:	ldrdeq	r9, [r1], -r4
   19930:	ldrdeq	r9, [r1], -r4
   19934:	ldrdeq	r9, [r1], -r4
   19938:	ldrdeq	r9, [r1], -r4
   1993c:	ldrdeq	r9, [r1], -r4
   19940:	ldrdeq	r9, [r1], -r0
   19944:	ldrdeq	r9, [r1], -r0
   19948:	ldrdeq	r9, [r1], -r0
   1994c:	ldrdeq	r9, [r1], -r0
   19950:	ldrdeq	r9, [r1], -r0
   19954:	ldrdeq	r9, [r1], -r0
   19958:	ldrdeq	r9, [r1], -r4
   1995c:	ldrdeq	r9, [r1], -r4
   19960:	ldrdeq	r9, [r1], -r4
   19964:	ldrdeq	r9, [r1], -r4
   19968:	ldrdeq	r9, [r1], -r4
   1996c:	ldrdeq	r9, [r1], -r4
   19970:	ldrdeq	r9, [r1], -r4
   19974:	ldrdeq	r9, [r1], -r4
   19978:	ldrdeq	r9, [r1], -r4
   1997c:	ldrdeq	r9, [r1], -r4
   19980:	ldrdeq	r9, [r1], -r4
   19984:	ldrdeq	r9, [r1], -r4
   19988:	ldrdeq	r9, [r1], -r4
   1998c:	ldrdeq	r9, [r1], -r4
   19990:	ldrdeq	r9, [r1], -r4
   19994:	ldrdeq	r9, [r1], -r4
   19998:	ldrdeq	r9, [r1], -r4
   1999c:	ldrdeq	r9, [r1], -r4
   199a0:	ldrdeq	r9, [r1], -r4
   199a4:	ldrdeq	r9, [r1], -r4
   199a8:	ldrdeq	r9, [r1], -r4
   199ac:	ldrdeq	r9, [r1], -r4
   199b0:	ldrdeq	r9, [r1], -r4
   199b4:	ldrdeq	r9, [r1], -r4
   199b8:	ldrdeq	r9, [r1], -r4
   199bc:	ldrdeq	r9, [r1], -r4
   199c0:	ldrdeq	r9, [r1], -r0
   199c4:	ldrdeq	r9, [r1], -r0
   199c8:	ldrdeq	r9, [r1], -r0
   199cc:	ldrdeq	r9, [r1], -r0
   199d0:	bx	lr
   199d4:	mov	r0, #0
   199d8:	bx	lr
   199dc:	sub	r0, r0, #9
   199e0:	cmp	r0, #23
   199e4:	movhi	r0, #0
   199e8:	bxhi	lr
   199ec:	bic	r0, r0, #-16777216	; 0xff000000
   199f0:	movw	r1, #31
   199f4:	movt	r1, #128	; 0x80
   199f8:	mov	r2, #1
   199fc:	and	r0, r2, r1, lsr r0
   19a00:	bx	lr
   19a04:	sub	r1, r0, #65	; 0x41
   19a08:	mov	r0, #0
   19a0c:	cmp	r1, #26
   19a10:	movwcc	r0, #1
   19a14:	bx	lr
   19a18:	mov	r1, r0
   19a1c:	sub	r2, r0, #48	; 0x30
   19a20:	mov	r0, #1
   19a24:	cmp	r2, #22
   19a28:	bhi	19a40 <__assert_fail@plt+0x8240>
   19a2c:	mov	ip, #1
   19a30:	movw	r3, #1023	; 0x3ff
   19a34:	movt	r3, #126	; 0x7e
   19a38:	tst	r3, ip, lsl r2
   19a3c:	bxne	lr
   19a40:	sub	r1, r1, #97	; 0x61
   19a44:	cmp	r1, #6
   19a48:	movcs	r0, #0
   19a4c:	bxcs	lr
   19a50:	bx	lr
   19a54:	sub	r1, r0, #65	; 0x41
   19a58:	cmp	r1, #26
   19a5c:	addcc	r0, r0, #32
   19a60:	bx	lr
   19a64:	sub	r1, r0, #97	; 0x61
   19a68:	cmp	r1, #26
   19a6c:	subcc	r0, r0, #32
   19a70:	bx	lr
   19a74:	push	{r4, r5, r6, sl, fp, lr}
   19a78:	add	fp, sp, #16
   19a7c:	mov	r4, r0
   19a80:	bl	11590 <__fpending@plt>
   19a84:	mov	r5, r0
   19a88:	mov	r0, r4
   19a8c:	bl	11494 <ferror@plt>
   19a90:	mov	r6, r0
   19a94:	mov	r0, r4
   19a98:	bl	116e0 <fclose@plt>
   19a9c:	cmp	r6, #0
   19aa0:	beq	19ac4 <__assert_fail@plt+0x82c4>
   19aa4:	mvn	r4, #0
   19aa8:	cmp	r0, #0
   19aac:	bne	19af0 <__assert_fail@plt+0x82f0>
   19ab0:	bl	11680 <__errno_location@plt>
   19ab4:	mov	r1, #0
   19ab8:	str	r1, [r0]
   19abc:	mov	r0, r4
   19ac0:	pop	{r4, r5, r6, sl, fp, pc}
   19ac4:	cmp	r0, #0
   19ac8:	mov	r4, r0
   19acc:	mvnne	r4, #0
   19ad0:	cmp	r5, #0
   19ad4:	bne	19af0 <__assert_fail@plt+0x82f0>
   19ad8:	cmp	r0, #0
   19adc:	beq	19af0 <__assert_fail@plt+0x82f0>
   19ae0:	bl	11680 <__errno_location@plt>
   19ae4:	ldr	r0, [r0]
   19ae8:	subs	r4, r0, #9
   19aec:	mvnne	r4, #0
   19af0:	mov	r0, r4
   19af4:	pop	{r4, r5, r6, sl, fp, pc}
   19af8:	push	{r4, sl, fp, lr}
   19afc:	add	fp, sp, #8
   19b00:	sub	sp, sp, #264	; 0x108
   19b04:	add	r1, sp, #7
   19b08:	movw	r2, #257	; 0x101
   19b0c:	bl	19de0 <__assert_fail@plt+0x85e0>
   19b10:	mov	r4, #0
   19b14:	cmp	r0, #0
   19b18:	bne	19b58 <__assert_fail@plt+0x8358>
   19b1c:	add	r0, sp, #7
   19b20:	movw	r1, #50102	; 0xc3b6
   19b24:	movt	r1, #1
   19b28:	mov	r2, #2
   19b2c:	bl	11638 <bcmp@plt>
   19b30:	cmp	r0, #0
   19b34:	beq	19b58 <__assert_fail@plt+0x8358>
   19b38:	add	r0, sp, #7
   19b3c:	movw	r1, #50104	; 0xc3b8
   19b40:	movt	r1, #1
   19b44:	mov	r2, #6
   19b48:	bl	11638 <bcmp@plt>
   19b4c:	mov	r4, r0
   19b50:	cmp	r0, #0
   19b54:	movwne	r4, #1
   19b58:	mov	r0, r4
   19b5c:	sub	sp, fp, #8
   19b60:	pop	{r4, sl, fp, pc}
   19b64:	push	{fp, lr}
   19b68:	mov	fp, sp
   19b6c:	bl	11680 <__errno_location@plt>
   19b70:	mov	r1, #12
   19b74:	str	r1, [r0]
   19b78:	mov	r0, #0
   19b7c:	pop	{fp, pc}
   19b80:	b	1962c <__assert_fail@plt+0x7e2c>
   19b84:	cmp	r1, #0
   19b88:	orreq	r1, r1, #1
   19b8c:	b	196c0 <__assert_fail@plt+0x7ec0>
   19b90:	b	1927c <__assert_fail@plt+0x7a7c>
   19b94:	clz	r3, r2
   19b98:	lsr	ip, r3, #5
   19b9c:	clz	r3, r1
   19ba0:	lsr	r3, r3, #5
   19ba4:	orrs	r3, r3, ip
   19ba8:	movwne	r1, #1
   19bac:	movwne	r2, #1
   19bb0:	b	19714 <__assert_fail@plt+0x7f14>
   19bb4:	push	{fp, lr}
   19bb8:	mov	fp, sp
   19bbc:	mov	r0, #14
   19bc0:	bl	1174c <nl_langinfo@plt>
   19bc4:	movw	r1, #44102	; 0xac46
   19bc8:	movt	r1, #1
   19bcc:	cmp	r0, #0
   19bd0:	movne	r1, r0
   19bd4:	ldrb	r2, [r1]
   19bd8:	movw	r0, #50110	; 0xc3be
   19bdc:	movt	r0, #1
   19be0:	cmp	r2, #0
   19be4:	movne	r0, r1
   19be8:	pop	{fp, pc}
   19bec:	push	{r4, sl, fp, lr}
   19bf0:	add	fp, sp, #8
   19bf4:	mov	r4, #0
   19bf8:	adds	r0, r0, #16
   19bfc:	adc	r1, r4, #0
   19c00:	rsb	r2, r1, #0
   19c04:	eors	r2, r2, r1
   19c08:	movwne	r2, #1
   19c0c:	cmp	r0, #0
   19c10:	bmi	19c30 <__assert_fail@plt+0x8430>
   19c14:	cmp	r2, #0
   19c18:	asreq	r2, r0, #31
   19c1c:	eoreq	r3, r0, r0
   19c20:	andeq	r2, r2, #1
   19c24:	eoreq	r1, r1, r2
   19c28:	orrseq	r1, r3, r1
   19c2c:	beq	19c38 <__assert_fail@plt+0x8438>
   19c30:	mov	r0, r4
   19c34:	pop	{r4, sl, fp, pc}
   19c38:	bl	115d8 <malloc@plt>
   19c3c:	cmp	r0, #0
   19c40:	addne	r4, r0, #8
   19c44:	movne	r1, #8
   19c48:	bfine	r4, r1, #0, #4
   19c4c:	subne	r0, r4, r0
   19c50:	strbne	r0, [r4, #-1]
   19c54:	mov	r0, r4
   19c58:	pop	{r4, sl, fp, pc}
   19c5c:	push	{fp, lr}
   19c60:	mov	fp, sp
   19c64:	tst	r0, #7
   19c68:	bne	19c84 <__assert_fail@plt+0x8484>
   19c6c:	tst	r0, #8
   19c70:	popeq	{fp, pc}
   19c74:	ldrb	r1, [r0, #-1]
   19c78:	sub	r0, r0, r1
   19c7c:	pop	{fp, lr}
   19c80:	b	1955c <__assert_fail@plt+0x7d5c>
   19c84:	bl	117d0 <abort@plt>
   19c88:	push	{r4, sl, fp, lr}
   19c8c:	add	fp, sp, #8
   19c90:	mov	r4, r0
   19c94:	bl	1147c <wcwidth@plt>
   19c98:	cmn	r0, #1
   19c9c:	popgt	{r4, sl, fp, pc}
   19ca0:	mov	r0, r4
   19ca4:	bl	11524 <iswcntrl@plt>
   19ca8:	clz	r0, r0
   19cac:	lsr	r0, r0, #5
   19cb0:	pop	{r4, sl, fp, pc}
   19cb4:	push	{r4, r5, r6, sl, fp, lr}
   19cb8:	add	fp, sp, #16
   19cbc:	mov	r5, r1
   19cc0:	mov	r4, r0
   19cc4:	ldr	r6, [r1], #16
   19cc8:	cmp	r6, r1
   19ccc:	bne	19ce0 <__assert_fail@plt+0x84e0>
   19cd0:	ldr	r2, [r5, #4]
   19cd4:	add	r6, r4, #16
   19cd8:	mov	r0, r6
   19cdc:	bl	114ac <memcpy@plt>
   19ce0:	str	r6, [r4]
   19ce4:	ldr	r0, [r5, #4]
   19ce8:	str	r0, [r4, #4]
   19cec:	ldrb	r0, [r5, #8]
   19cf0:	strb	r0, [r4, #8]
   19cf4:	cmp	r0, #0
   19cf8:	ldrne	r0, [r5, #12]
   19cfc:	strne	r0, [r4, #12]
   19d00:	pop	{r4, r5, r6, sl, fp, pc}
   19d04:	ubfx	r1, r0, #5, #3
   19d08:	movw	r2, #50116	; 0xc3c4
   19d0c:	movt	r2, #1
   19d10:	ldr	r1, [r2, r1, lsl #2]
   19d14:	and	r0, r0, #31
   19d18:	mov	r2, #1
   19d1c:	and	r0, r1, r2, lsl r0
   19d20:	cmp	r0, #0
   19d24:	movwne	r0, #1
   19d28:	bx	lr
   19d2c:	push	{r4, r5, r6, sl, fp, lr}
   19d30:	add	fp, sp, #16
   19d34:	sub	sp, sp, #56	; 0x38
   19d38:	mov	r5, r0
   19d3c:	bl	11578 <__ctype_get_mb_cur_max@plt>
   19d40:	cmp	r0, #2
   19d44:	bcc	19dd0 <__assert_fail@plt+0x85d0>
   19d48:	mov	r4, #0
   19d4c:	str	r4, [sp, #8]
   19d50:	str	r4, [sp, #4]
   19d54:	strb	r4, [sp, #12]
   19d58:	strb	r4, [sp]
   19d5c:	str	r5, [sp, #16]
   19d60:	mov	r0, sp
   19d64:	bl	165dc <__assert_fail@plt+0x4ddc>
   19d68:	ldrb	r0, [sp, #24]
   19d6c:	cmp	r0, #0
   19d70:	beq	19d80 <__assert_fail@plt+0x8580>
   19d74:	ldr	r0, [sp, #28]
   19d78:	cmp	r0, #0
   19d7c:	beq	19dc4 <__assert_fail@plt+0x85c4>
   19d80:	mov	r6, #0
   19d84:	mov	r5, sp
   19d88:	mov	r4, #0
   19d8c:	strb	r6, [sp, #12]
   19d90:	ldr	r0, [sp, #16]
   19d94:	ldr	r1, [sp, #20]
   19d98:	add	r0, r0, r1
   19d9c:	str	r0, [sp, #16]
   19da0:	mov	r0, r5
   19da4:	bl	165dc <__assert_fail@plt+0x4ddc>
   19da8:	add	r4, r4, #1
   19dac:	ldr	r0, [sp, #28]
   19db0:	ldrb	r1, [sp, #24]
   19db4:	cmp	r1, #0
   19db8:	beq	19d8c <__assert_fail@plt+0x858c>
   19dbc:	cmp	r0, #0
   19dc0:	bne	19d8c <__assert_fail@plt+0x858c>
   19dc4:	mov	r0, r4
   19dc8:	sub	sp, fp, #16
   19dcc:	pop	{r4, r5, r6, sl, fp, pc}
   19dd0:	mov	r0, r5
   19dd4:	sub	sp, fp, #16
   19dd8:	pop	{r4, r5, r6, sl, fp, lr}
   19ddc:	b	11650 <strlen@plt>
   19de0:	b	19de4 <__assert_fail@plt+0x85e4>
   19de4:	push	{r4, r5, r6, r7, fp, lr}
   19de8:	add	fp, sp, #16
   19dec:	mov	r6, r2
   19df0:	mov	r4, r1
   19df4:	bl	19e7c <__assert_fail@plt+0x867c>
   19df8:	cmp	r0, #0
   19dfc:	beq	19e2c <__assert_fail@plt+0x862c>
   19e00:	mov	r7, r0
   19e04:	bl	11650 <strlen@plt>
   19e08:	cmp	r0, r6
   19e0c:	bcs	19e48 <__assert_fail@plt+0x8648>
   19e10:	add	r2, r0, #1
   19e14:	mov	r0, r4
   19e18:	mov	r1, r7
   19e1c:	bl	114ac <memcpy@plt>
   19e20:	mov	r5, #0
   19e24:	mov	r0, r5
   19e28:	pop	{r4, r5, r6, r7, fp, pc}
   19e2c:	mov	r5, #22
   19e30:	cmp	r6, #0
   19e34:	beq	19e70 <__assert_fail@plt+0x8670>
   19e38:	mov	r0, #0
   19e3c:	strb	r0, [r4]
   19e40:	mov	r0, r5
   19e44:	pop	{r4, r5, r6, r7, fp, pc}
   19e48:	mov	r5, #34	; 0x22
   19e4c:	cmp	r6, #0
   19e50:	beq	19e70 <__assert_fail@plt+0x8670>
   19e54:	sub	r6, r6, #1
   19e58:	mov	r0, r4
   19e5c:	mov	r1, r7
   19e60:	mov	r2, r6
   19e64:	bl	114ac <memcpy@plt>
   19e68:	mov	r0, #0
   19e6c:	strb	r0, [r4, r6]
   19e70:	mov	r0, r5
   19e74:	pop	{r4, r5, r6, r7, fp, pc}
   19e78:	b	19e7c <__assert_fail@plt+0x867c>
   19e7c:	mov	r1, #0
   19e80:	b	1171c <setlocale@plt>
   19e84:	mov	r1, #0
   19e88:	mov	r2, #3
   19e8c:	b	192d0 <__assert_fail@plt+0x7ad0>
   19e90:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19e94:	mov	r7, r0
   19e98:	ldr	r6, [pc, #72]	; 19ee8 <__assert_fail@plt+0x86e8>
   19e9c:	ldr	r5, [pc, #72]	; 19eec <__assert_fail@plt+0x86ec>
   19ea0:	add	r6, pc, r6
   19ea4:	add	r5, pc, r5
   19ea8:	sub	r6, r6, r5
   19eac:	mov	r8, r1
   19eb0:	mov	r9, r2
   19eb4:	bl	11408 <fdopen@plt-0x20>
   19eb8:	asrs	r6, r6, #2
   19ebc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ec0:	mov	r4, #0
   19ec4:	add	r4, r4, #1
   19ec8:	ldr	r3, [r5], #4
   19ecc:	mov	r2, r9
   19ed0:	mov	r1, r8
   19ed4:	mov	r0, r7
   19ed8:	blx	r3
   19edc:	cmp	r6, r4
   19ee0:	bne	19ec4 <__assert_fail@plt+0x86c4>
   19ee4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ee8:	andeq	r3, r1, r4, rrx
   19eec:	andeq	r3, r1, ip, asr r0
   19ef0:	bx	lr
   19ef4:	ldr	r3, [pc, #12]	; 19f08 <__assert_fail@plt+0x8708>
   19ef8:	mov	r1, #0
   19efc:	add	r3, pc, r3
   19f00:	ldr	r2, [r3]
   19f04:	b	11698 <__cxa_atexit@plt>
   19f08:	andeq	r3, r1, r0, ror #4

Disassembly of section .fini:

00019f0c <.fini>:
   19f0c:	push	{r3, lr}
   19f10:	pop	{r3, pc}
