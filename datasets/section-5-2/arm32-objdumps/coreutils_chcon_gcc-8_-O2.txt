
../repos/coreutils/src/chcon:     file format elf32-littlearm


Disassembly of section .init:

0001120c <.init>:
   1120c:	push	{r3, lr}
   11210:	bl	12478 <__assert_fail@plt+0xe74>
   11214:	pop	{r3, pc}

Disassembly of section .plt:

00011218 <fstatfs64@plt-0x14>:
   11218:	push	{lr}		; (str lr, [sp, #-4]!)
   1121c:	ldr	lr, [pc, #4]	; 11228 <fstatfs64@plt-0x4>
   11220:	add	lr, pc, lr
   11224:	ldr	pc, [lr, #8]!
   11228:	ldrdeq	sl, [r1], -r8

0001122c <fstatfs64@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #106496	; 0x1a000
   11234:	ldr	pc, [ip, #3544]!	; 0xdd8

00011238 <calloc@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #106496	; 0x1a000
   11240:	ldr	pc, [ip, #3536]!	; 0xdd0

00011244 <fputs_unlocked@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #106496	; 0x1a000
   1124c:	ldr	pc, [ip, #3528]!	; 0xdc8

00011250 <raise@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #106496	; 0x1a000
   11258:	ldr	pc, [ip, #3520]!	; 0xdc0

0001125c <is_selinux_enabled@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #106496	; 0x1a000
   11264:	ldr	pc, [ip, #3512]!	; 0xdb8

00011268 <strcmp@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #106496	; 0x1a000
   11270:	ldr	pc, [ip, #3504]!	; 0xdb0

00011274 <fflush@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #106496	; 0x1a000
   1127c:	ldr	pc, [ip, #3496]!	; 0xda8

00011280 <lsetfilecon@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #106496	; 0x1a000
   11288:	ldr	pc, [ip, #3488]!	; 0xda0

0001128c <memmove@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #106496	; 0x1a000
   11294:	ldr	pc, [ip, #3480]!	; 0xd98

00011298 <free@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #106496	; 0x1a000
   112a0:	ldr	pc, [ip, #3472]!	; 0xd90

000112a4 <_exit@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #106496	; 0x1a000
   112ac:	ldr	pc, [ip, #3464]!	; 0xd88

000112b0 <memcpy@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #106496	; 0x1a000
   112b8:	ldr	pc, [ip, #3456]!	; 0xd80

000112bc <mbsinit@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #106496	; 0x1a000
   112c4:	ldr	pc, [ip, #3448]!	; 0xd78

000112c8 <context_new@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #106496	; 0x1a000
   112d0:	ldr	pc, [ip, #3440]!	; 0xd70

000112d4 <memcmp@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #106496	; 0x1a000
   112dc:	ldr	pc, [ip, #3432]!	; 0xd68

000112e0 <fputc_unlocked@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #106496	; 0x1a000
   112e8:	ldr	pc, [ip, #3424]!	; 0xd60

000112ec <context_role_set@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #106496	; 0x1a000
   112f4:	ldr	pc, [ip, #3416]!	; 0xd58

000112f8 <dcgettext@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #106496	; 0x1a000
   11300:	ldr	pc, [ip, #3408]!	; 0xd50

00011304 <context_type_set@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #106496	; 0x1a000
   1130c:	ldr	pc, [ip, #3400]!	; 0xd48

00011310 <realloc@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #106496	; 0x1a000
   11318:	ldr	pc, [ip, #3392]!	; 0xd40

0001131c <fgetfilecon@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #106496	; 0x1a000
   11324:	ldr	pc, [ip, #3384]!	; 0xd38

00011328 <textdomain@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #106496	; 0x1a000
   11330:	ldr	pc, [ip, #3376]!	; 0xd30

00011334 <chdir@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #106496	; 0x1a000
   1133c:	ldr	pc, [ip, #3368]!	; 0xd28

00011340 <__fxstatat64@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #106496	; 0x1a000
   11348:	ldr	pc, [ip, #3360]!	; 0xd20

0001134c <iswprint@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #106496	; 0x1a000
   11354:	ldr	pc, [ip, #3352]!	; 0xd18

00011358 <__fxstat64@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #106496	; 0x1a000
   11360:	ldr	pc, [ip, #3344]!	; 0xd10

00011364 <fwrite@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #106496	; 0x1a000
   1136c:	ldr	pc, [ip, #3336]!	; 0xd08

00011370 <lseek64@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #106496	; 0x1a000
   11378:	ldr	pc, [ip, #3328]!	; 0xd00

0001137c <__ctype_get_mb_cur_max@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #106496	; 0x1a000
   11384:	ldr	pc, [ip, #3320]!	; 0xcf8

00011388 <strcpy@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #106496	; 0x1a000
   11390:	ldr	pc, [ip, #3312]!	; 0xcf0

00011394 <__fpending@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #106496	; 0x1a000
   1139c:	ldr	pc, [ip, #3304]!	; 0xce8

000113a0 <mbrtowc@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #106496	; 0x1a000
   113a8:	ldr	pc, [ip, #3296]!	; 0xce0

000113ac <error@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #106496	; 0x1a000
   113b4:	ldr	pc, [ip, #3288]!	; 0xcd8

000113b8 <security_check_context@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #106496	; 0x1a000
   113c0:	ldr	pc, [ip, #3280]!	; 0xcd0

000113c4 <open64@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #106496	; 0x1a000
   113cc:	ldr	pc, [ip, #3272]!	; 0xcc8

000113d0 <lgetfilecon@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #106496	; 0x1a000
   113d8:	ldr	pc, [ip, #3264]!	; 0xcc0

000113dc <malloc@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #106496	; 0x1a000
   113e4:	ldr	pc, [ip, #3256]!	; 0xcb8

000113e8 <__libc_start_main@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #106496	; 0x1a000
   113f0:	ldr	pc, [ip, #3248]!	; 0xcb0

000113f4 <__freading@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #106496	; 0x1a000
   113fc:	ldr	pc, [ip, #3240]!	; 0xca8

00011400 <__gmon_start__@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #106496	; 0x1a000
   11408:	ldr	pc, [ip, #3232]!	; 0xca0

0001140c <context_free@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #106496	; 0x1a000
   11414:	ldr	pc, [ip, #3224]!	; 0xc98

00011418 <getopt_long@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #106496	; 0x1a000
   11420:	ldr	pc, [ip, #3216]!	; 0xc90

00011424 <__ctype_b_loc@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #106496	; 0x1a000
   1142c:	ldr	pc, [ip, #3208]!	; 0xc88

00011430 <getcwd@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #106496	; 0x1a000
   11438:	ldr	pc, [ip, #3200]!	; 0xc80

0001143c <exit@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #106496	; 0x1a000
   11444:	ldr	pc, [ip, #3192]!	; 0xc78

00011448 <context_user_set@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #106496	; 0x1a000
   11450:	ldr	pc, [ip, #3184]!	; 0xc70

00011454 <getfilecon@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #106496	; 0x1a000
   1145c:	ldr	pc, [ip, #3176]!	; 0xc68

00011460 <strlen@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #106496	; 0x1a000
   11468:	ldr	pc, [ip, #3168]!	; 0xc60

0001146c <openat64@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #106496	; 0x1a000
   11474:	ldr	pc, [ip, #3160]!	; 0xc58

00011478 <memrchr@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #106496	; 0x1a000
   11480:	ldr	pc, [ip, #3152]!	; 0xc50

00011484 <__errno_location@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #106496	; 0x1a000
   1148c:	ldr	pc, [ip, #3144]!	; 0xc48

00011490 <__sprintf_chk@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #106496	; 0x1a000
   11498:	ldr	pc, [ip, #3136]!	; 0xc40

0001149c <__cxa_atexit@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #106496	; 0x1a000
   114a4:	ldr	pc, [ip, #3128]!	; 0xc38

000114a8 <memset@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #106496	; 0x1a000
   114b0:	ldr	pc, [ip, #3120]!	; 0xc30

000114b4 <__printf_chk@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #106496	; 0x1a000
   114bc:	ldr	pc, [ip, #3112]!	; 0xc28

000114c0 <fileno@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #106496	; 0x1a000
   114c8:	ldr	pc, [ip, #3104]!	; 0xc20

000114cc <__fprintf_chk@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #106496	; 0x1a000
   114d4:	ldr	pc, [ip, #3096]!	; 0xc18

000114d8 <memchr@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #106496	; 0x1a000
   114e0:	ldr	pc, [ip, #3088]!	; 0xc10

000114e4 <setfilecon@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #106496	; 0x1a000
   114ec:	ldr	pc, [ip, #3080]!	; 0xc08

000114f0 <access@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #106496	; 0x1a000
   114f8:	ldr	pc, [ip, #3072]!	; 0xc00

000114fc <fclose@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #106496	; 0x1a000
   11504:	ldr	pc, [ip, #3064]!	; 0xbf8

00011508 <fseeko64@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #106496	; 0x1a000
   11510:	ldr	pc, [ip, #3056]!	; 0xbf0

00011514 <fcntl64@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #106496	; 0x1a000
   1151c:	ldr	pc, [ip, #3048]!	; 0xbe8

00011520 <setlocale@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #106496	; 0x1a000
   11528:	ldr	pc, [ip, #3040]!	; 0xbe0

0001152c <strrchr@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #106496	; 0x1a000
   11534:	ldr	pc, [ip, #3032]!	; 0xbd8

00011538 <nl_langinfo@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #106496	; 0x1a000
   11540:	ldr	pc, [ip, #3024]!	; 0xbd0

00011544 <readdir64@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #106496	; 0x1a000
   1154c:	ldr	pc, [ip, #3016]!	; 0xbc8

00011550 <fdopendir@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #106496	; 0x1a000
   11558:	ldr	pc, [ip, #3008]!	; 0xbc0

0001155c <dirfd@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #106496	; 0x1a000
   11564:	ldr	pc, [ip, #3000]!	; 0xbb8

00011568 <fchdir@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #106496	; 0x1a000
   11570:	ldr	pc, [ip, #2992]!	; 0xbb0

00011574 <qsort@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #106496	; 0x1a000
   1157c:	ldr	pc, [ip, #2984]!	; 0xba8

00011580 <freecon@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #106496	; 0x1a000
   11588:	ldr	pc, [ip, #2976]!	; 0xba0

0001158c <bindtextdomain@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #106496	; 0x1a000
   11594:	ldr	pc, [ip, #2968]!	; 0xb98

00011598 <context_range_set@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #106496	; 0x1a000
   115a0:	ldr	pc, [ip, #2960]!	; 0xb90

000115a4 <context_str@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #106496	; 0x1a000
   115ac:	ldr	pc, [ip, #2952]!	; 0xb88

000115b0 <__xstat64@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #106496	; 0x1a000
   115b8:	ldr	pc, [ip, #2944]!	; 0xb80

000115bc <strncmp@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #106496	; 0x1a000
   115c4:	ldr	pc, [ip, #2936]!	; 0xb78

000115c8 <abort@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #106496	; 0x1a000
   115d0:	ldr	pc, [ip, #2928]!	; 0xb70

000115d4 <close@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #106496	; 0x1a000
   115dc:	ldr	pc, [ip, #2920]!	; 0xb68

000115e0 <__lxstat64@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #106496	; 0x1a000
   115e8:	ldr	pc, [ip, #2912]!	; 0xb60

000115ec <closedir@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #106496	; 0x1a000
   115f4:	ldr	pc, [ip, #2904]!	; 0xb58

000115f8 <strspn@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #106496	; 0x1a000
   11600:	ldr	pc, [ip, #2896]!	; 0xb50

00011604 <__assert_fail@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #106496	; 0x1a000
   1160c:	ldr	pc, [ip, #2888]!	; 0xb48

Disassembly of section .text:

00011610 <.text>:
   11610:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11614:	mvn	r5, #0
   11618:	strd	r6, [sp, #8]
   1161c:	movw	r7, #45428	; 0xb174
   11620:	movt	r7, #1
   11624:	strd	r8, [sp, #16]
   11628:	mov	r9, r0
   1162c:	mov	r8, r1
   11630:	strd	sl, [sp, #24]
   11634:	mov	fp, #0
   11638:	mov	r6, #16
   1163c:	str	lr, [sp, #32]
   11640:	sub	sp, sp, #52	; 0x34
   11644:	ldr	r0, [r1]
   11648:	str	fp, [sp, #20]
   1164c:	str	fp, [sp, #24]
   11650:	bl	16014 <__assert_fail@plt+0x4a10>
   11654:	movw	r1, #45028	; 0xafe4
   11658:	movt	r1, #1
   1165c:	ldr	sl, [pc, #3536]	; 12434 <__assert_fail@plt+0xe30>
   11660:	mov	r0, #6
   11664:	bl	11520 <setlocale@plt>
   11668:	movw	r1, #45372	; 0xb13c
   1166c:	movt	r1, #1
   11670:	movw	r0, #45204	; 0xb094
   11674:	movt	r0, #1
   11678:	bl	1158c <bindtextdomain@plt>
   1167c:	movw	r0, #45204	; 0xb094
   11680:	movt	r0, #1
   11684:	bl	11328 <textdomain@plt>
   11688:	movw	r0, #10576	; 0x2950
   1168c:	movt	r0, #1
   11690:	bl	1a7a4 <__assert_fail@plt+0x91a0>
   11694:	movw	r3, #49616	; 0xc1d0
   11698:	movt	r3, #2
   1169c:	str	r3, [sp, #16]
   116a0:	mov	r4, #0
   116a4:	mov	r3, sl
   116a8:	mov	r2, r7
   116ac:	mov	r1, r8
   116b0:	mov	r0, r9
   116b4:	str	r4, [sp]
   116b8:	bl	11418 <getopt_long@plt>
   116bc:	cmn	r0, #1
   116c0:	beq	118a8 <__assert_fail@plt+0x2a4>
   116c4:	cmp	r0, #108	; 0x6c
   116c8:	beq	1180c <__assert_fail@plt+0x208>
   116cc:	ble	11700 <__assert_fail@plt+0xfc>
   116d0:	cmp	r0, #118	; 0x76
   116d4:	beq	117fc <__assert_fail@plt+0x1f8>
   116d8:	ble	11788 <__assert_fail@plt+0x184>
   116dc:	movw	r3, #257	; 0x101
   116e0:	cmp	r0, r3
   116e4:	beq	117ec <__assert_fail@plt+0x1e8>
   116e8:	ble	11778 <__assert_fail@plt+0x174>
   116ec:	movw	r3, #258	; 0x102
   116f0:	cmp	r0, r3
   116f4:	bne	11730 <__assert_fail@plt+0x12c>
   116f8:	mov	fp, #1
   116fc:	b	116a0 <__assert_fail@plt+0x9c>
   11700:	cmp	r0, #76	; 0x4c
   11704:	beq	117f4 <__assert_fail@plt+0x1f0>
   11708:	ble	11760 <__assert_fail@plt+0x15c>
   1170c:	cmp	r0, #82	; 0x52
   11710:	beq	1182c <__assert_fail@plt+0x228>
   11714:	ble	11750 <__assert_fail@plt+0x14c>
   11718:	cmp	r0, #102	; 0x66
   1171c:	beq	116a0 <__assert_fail@plt+0x9c>
   11720:	cmp	r0, #104	; 0x68
   11724:	bne	117bc <__assert_fail@plt+0x1b8>
   11728:	mov	r5, r4
   1172c:	b	116a0 <__assert_fail@plt+0x9c>
   11730:	movw	r3, #259	; 0x103
   11734:	cmp	r0, r3
   11738:	bne	117bc <__assert_fail@plt+0x1b8>
   1173c:	movw	r3, #49608	; 0xc1c8
   11740:	movt	r3, #2
   11744:	ldr	r3, [r3]
   11748:	str	r3, [sp, #24]
   1174c:	b	116a0 <__assert_fail@plt+0x9c>
   11750:	cmp	r0, #80	; 0x50
   11754:	bne	117bc <__assert_fail@plt+0x1b8>
   11758:	mov	r6, #16
   1175c:	b	116a0 <__assert_fail@plt+0x9c>
   11760:	cmn	r0, #2
   11764:	beq	123a0 <__assert_fail@plt+0xd9c>
   11768:	cmp	r0, #72	; 0x48
   1176c:	bne	117b4 <__assert_fail@plt+0x1b0>
   11770:	mov	r6, #17
   11774:	b	116a0 <__assert_fail@plt+0x9c>
   11778:	cmp	r0, #256	; 0x100
   1177c:	bne	117bc <__assert_fail@plt+0x1b8>
   11780:	mov	r5, #1
   11784:	b	116a0 <__assert_fail@plt+0x9c>
   11788:	cmp	r0, #116	; 0x74
   1178c:	beq	1183c <__assert_fail@plt+0x238>
   11790:	ble	117c4 <__assert_fail@plt+0x1c0>
   11794:	mov	r2, #1
   11798:	movw	r3, #49608	; 0xc1c8
   1179c:	movt	r3, #2
   117a0:	str	r2, [sp, #20]
   117a4:	ldr	r3, [r3]
   117a8:	ldr	r2, [sp, #16]
   117ac:	str	r3, [r2, #4]
   117b0:	b	116a0 <__assert_fail@plt+0x9c>
   117b4:	cmn	r0, #3
   117b8:	beq	1185c <__assert_fail@plt+0x258>
   117bc:	mov	r0, #1
   117c0:	bl	1252c <__assert_fail@plt+0xf28>
   117c4:	cmp	r0, #114	; 0x72
   117c8:	bne	117bc <__assert_fail@plt+0x1b8>
   117cc:	mov	r2, #1
   117d0:	movw	r3, #49608	; 0xc1c8
   117d4:	movt	r3, #2
   117d8:	str	r2, [sp, #20]
   117dc:	ldr	r3, [r3]
   117e0:	ldr	r2, [sp, #16]
   117e4:	str	r3, [r2, #8]
   117e8:	b	116a0 <__assert_fail@plt+0x9c>
   117ec:	mov	fp, r4
   117f0:	b	116a0 <__assert_fail@plt+0x9c>
   117f4:	mov	r6, #2
   117f8:	b	116a0 <__assert_fail@plt+0x9c>
   117fc:	ldr	r2, [sp, #16]
   11800:	mov	r3, #1
   11804:	strb	r3, [r2, #1]
   11808:	b	116a0 <__assert_fail@plt+0x9c>
   1180c:	mov	r2, #1
   11810:	movw	r3, #49608	; 0xc1c8
   11814:	movt	r3, #2
   11818:	str	r2, [sp, #20]
   1181c:	ldr	r3, [r3]
   11820:	ldr	r2, [sp, #16]
   11824:	str	r3, [r2, #16]
   11828:	b	116a0 <__assert_fail@plt+0x9c>
   1182c:	ldr	r2, [sp, #16]
   11830:	mov	r3, #1
   11834:	strb	r3, [r2]
   11838:	b	116a0 <__assert_fail@plt+0x9c>
   1183c:	mov	r2, #1
   11840:	movw	r3, #49608	; 0xc1c8
   11844:	movt	r3, #2
   11848:	str	r2, [sp, #20]
   1184c:	ldr	r3, [r3]
   11850:	ldr	r2, [sp, #16]
   11854:	str	r3, [r2, #12]
   11858:	b	116a0 <__assert_fail@plt+0x9c>
   1185c:	movw	r1, #45396	; 0xb154
   11860:	movt	r1, #1
   11864:	movw	r2, #45412	; 0xb164
   11868:	movt	r2, #1
   1186c:	movw	r3, #49508	; 0xc164
   11870:	movt	r3, #2
   11874:	movw	r0, #49604	; 0xc1c4
   11878:	movt	r0, #2
   1187c:	str	r2, [sp]
   11880:	movw	r2, #45200	; 0xb090
   11884:	movt	r2, #1
   11888:	stmib	sp, {r1, r4}
   1188c:	movw	r1, #43232	; 0xa8e0
   11890:	movt	r1, #1
   11894:	ldr	r0, [r0]
   11898:	ldr	r3, [r3]
   1189c:	bl	190a0 <__assert_fail@plt+0x7a9c>
   118a0:	mov	r0, r4
   118a4:	bl	1143c <exit@plt>
   118a8:	movw	r7, #49616	; 0xc1d0
   118ac:	movt	r7, #2
   118b0:	ldrb	r3, [r7]
   118b4:	cmp	r3, r4
   118b8:	bne	11cd8 <__assert_fail@plt+0x6d4>
   118bc:	adds	r5, r5, #0
   118c0:	mov	r6, #16
   118c4:	movne	r5, #1
   118c8:	strb	r5, [r7, #20]
   118cc:	movw	r4, #49592	; 0xc1b8
   118d0:	movt	r4, #2
   118d4:	ldr	r5, [sp, #20]
   118d8:	ldr	r2, [sp, #24]
   118dc:	ldr	r3, [r4]
   118e0:	cmp	r2, #0
   118e4:	movne	r5, #1
   118e8:	cmp	r5, #0
   118ec:	sub	r2, r9, r3
   118f0:	beq	11ebc <__assert_fail@plt+0x8b8>
   118f4:	cmp	r2, #0
   118f8:	ble	11ec4 <__assert_fail@plt+0x8c0>
   118fc:	ldr	r0, [sp, #24]
   11900:	cmp	r0, #0
   11904:	beq	11fa0 <__assert_fail@plt+0x99c>
   11908:	mov	r5, #0
   1190c:	add	r1, sp, #44	; 0x2c
   11910:	str	r5, [sp, #44]	; 0x2c
   11914:	bl	18b54 <__assert_fail@plt+0x7550>
   11918:	cmp	r0, r5
   1191c:	blt	123d0 <__assert_fail@plt+0xdcc>
   11920:	ldr	r2, [sp, #20]
   11924:	ldr	r3, [sp, #44]	; 0x2c
   11928:	cmp	r2, #0
   1192c:	str	r3, [r7, #24]
   11930:	bne	123a8 <__assert_fail@plt+0xda4>
   11934:	ldrb	r3, [r7]
   11938:	and	fp, fp, r3
   1193c:	bl	11484 <__errno_location@plt>
   11940:	cmp	fp, #0
   11944:	str	r0, [sp, #16]
   11948:	streq	fp, [r7, #48]	; 0x30
   1194c:	bne	120d0 <__assert_fail@plt+0xacc>
   11950:	movw	r3, #46316	; 0xb4ec
   11954:	movt	r3, #1
   11958:	ldr	r0, [r4]
   1195c:	orr	r1, r6, #8
   11960:	mov	r2, #0
   11964:	str	r3, [sp, #20]
   11968:	movw	r3, #46232	; 0xb498
   1196c:	movt	r3, #1
   11970:	mov	r9, #1
   11974:	str	r3, [sp, #24]
   11978:	movw	r3, #46308	; 0xb4e4
   1197c:	movt	r3, #1
   11980:	add	r0, r8, r0, lsl #2
   11984:	str	r3, [sp, #32]
   11988:	bl	1966c <__assert_fail@plt+0x8068>
   1198c:	mov	r8, r0
   11990:	mov	r0, r8
   11994:	bl	144a4 <__assert_fail@plt+0x2ea0>
   11998:	subs	r5, r0, #0
   1199c:	beq	11a58 <__assert_fail@plt+0x454>
   119a0:	ldrh	r3, [r5, #56]	; 0x38
   119a4:	ldr	r4, [r5, #28]
   119a8:	sub	r3, r3, #1
   119ac:	cmp	r3, #9
   119b0:	ldrls	pc, [pc, r3, lsl #2]
   119b4:	b	11aec <__assert_fail@plt+0x4e8>
   119b8:	andeq	r1, r1, r8, lsl #24
   119bc:	ldrdeq	r1, [r1], -r8
   119c0:	andeq	r1, r1, ip, ror #21
   119c4:	andeq	r1, r1, ip, asr #21
   119c8:	andeq	r1, r1, ip, ror #21
   119cc:	andeq	r1, r1, ip, asr #22
   119d0:	muleq	r1, r8, sl
   119d4:	andeq	r1, r1, ip, ror #21
   119d8:	andeq	r1, r1, ip, ror #21
   119dc:	andeq	r1, r1, r0, ror #19
   119e0:	ldr	r3, [r5, #48]	; 0x30
   119e4:	cmp	r3, #0
   119e8:	bne	119f8 <__assert_fail@plt+0x3f4>
   119ec:	ldr	r3, [r5, #16]
   119f0:	cmp	r3, #0
   119f4:	beq	12114 <__assert_fail@plt+0xb10>
   119f8:	movw	r1, #45868	; 0xb32c
   119fc:	movt	r1, #1
   11a00:	ldr	sl, [r5, #32]
   11a04:	mov	r2, #5
   11a08:	mov	r0, #0
   11a0c:	bl	112f8 <dcgettext@plt>
   11a10:	mov	fp, r0
   11a14:	mov	r1, r4
   11a18:	mov	r0, #4
   11a1c:	mov	r6, #0
   11a20:	bl	18050 <__assert_fail@plt+0x6a4c>
   11a24:	mov	r3, r0
   11a28:	mov	r2, fp
   11a2c:	mov	r1, sl
   11a30:	mov	r0, r6
   11a34:	bl	113ac <error@plt>
   11a38:	ldrb	r3, [r7]
   11a3c:	cmp	r3, #0
   11a40:	beq	11d14 <__assert_fail@plt+0x710>
   11a44:	mov	r0, r8
   11a48:	and	r9, r9, r6
   11a4c:	bl	144a4 <__assert_fail@plt+0x2ea0>
   11a50:	subs	r5, r0, #0
   11a54:	bne	119a0 <__assert_fail@plt+0x39c>
   11a58:	ldr	r3, [sp, #16]
   11a5c:	ldr	r4, [r3]
   11a60:	cmp	r4, #0
   11a64:	bne	11f78 <__assert_fail@plt+0x974>
   11a68:	mov	r0, r8
   11a6c:	bl	14318 <__assert_fail@plt+0x2d14>
   11a70:	cmp	r0, #0
   11a74:	bne	11f44 <__assert_fail@plt+0x940>
   11a78:	eor	r0, r9, #1
   11a7c:	add	sp, sp, #52	; 0x34
   11a80:	ldrd	r4, [sp]
   11a84:	ldrd	r6, [sp, #8]
   11a88:	ldrd	r8, [sp, #16]
   11a8c:	ldrd	sl, [sp, #24]
   11a90:	add	sp, sp, #32
   11a94:	pop	{pc}		; (ldr pc, [sp], #4)
   11a98:	ldr	sl, [r5, #32]
   11a9c:	mov	r2, r4
   11aa0:	mov	r1, #3
   11aa4:	mov	r0, #0
   11aa8:	mov	r6, r0
   11aac:	bl	1812c <__assert_fail@plt+0x6b28>
   11ab0:	mov	r3, r0
   11ab4:	movw	r2, #46628	; 0xb624
   11ab8:	movt	r2, #1
   11abc:	mov	r0, r6
   11ac0:	mov	r1, sl
   11ac4:	bl	113ac <error@plt>
   11ac8:	b	11a38 <__assert_fail@plt+0x434>
   11acc:	movw	r1, #45888	; 0xb340
   11ad0:	movt	r1, #1
   11ad4:	b	11a00 <__assert_fail@plt+0x3fc>
   11ad8:	mov	r1, r5
   11adc:	mov	r0, r8
   11ae0:	bl	196c4 <__assert_fail@plt+0x80c0>
   11ae4:	cmp	r0, #0
   11ae8:	bne	1205c <__assert_fail@plt+0xa58>
   11aec:	ldrb	r3, [r7, #1]
   11af0:	ldr	r6, [r5, #24]
   11af4:	cmp	r3, #0
   11af8:	bne	11d28 <__assert_fail@plt+0x724>
   11afc:	ldr	sl, [r7, #24]
   11b00:	mov	r4, #0
   11b04:	ldrb	r2, [r7, #20]
   11b08:	str	r4, [sp, #44]	; 0x2c
   11b0c:	ldr	fp, [r8, #32]
   11b10:	cmp	sl, r4
   11b14:	beq	11d60 <__assert_fail@plt+0x75c>
   11b18:	cmp	r2, #0
   11b1c:	mov	r0, fp
   11b20:	mov	r2, sl
   11b24:	mov	r1, r6
   11b28:	beq	11e40 <__assert_fail@plt+0x83c>
   11b2c:	bl	18720 <__assert_fail@plt+0x711c>
   11b30:	cmp	r0, #0
   11b34:	bne	11e48 <__assert_fail@plt+0x844>
   11b38:	ldr	r3, [r7, #24]
   11b3c:	cmp	r3, #0
   11b40:	beq	12294 <__assert_fail@plt+0xc90>
   11b44:	mov	r6, #1
   11b48:	b	11a38 <__assert_fail@plt+0x434>
   11b4c:	ldrb	r3, [r7]
   11b50:	cmp	r3, #0
   11b54:	moveq	r6, #1
   11b58:	beq	11a44 <__assert_fail@plt+0x440>
   11b5c:	ldr	ip, [r7, #48]	; 0x30
   11b60:	cmp	ip, #0
   11b64:	beq	11aec <__assert_fail@plt+0x4e8>
   11b68:	ldrd	r2, [ip]
   11b6c:	ldrd	r0, [r5, #160]	; 0xa0
   11b70:	cmp	r1, r3
   11b74:	cmpeq	r0, r2
   11b78:	bne	11aec <__assert_fail@plt+0x4e8>
   11b7c:	ldrd	r0, [ip, #8]
   11b80:	ldrd	r2, [r5, #64]	; 0x40
   11b84:	cmp	r3, r1
   11b88:	cmpeq	r2, r0
   11b8c:	bne	11aec <__assert_fail@plt+0x4e8>
   11b90:	movw	r1, #48020	; 0xbb94
   11b94:	movt	r1, #1
   11b98:	mov	r0, r4
   11b9c:	bl	11268 <strcmp@plt>
   11ba0:	subs	r6, r0, #0
   11ba4:	bne	122e8 <__assert_fail@plt+0xce4>
   11ba8:	mov	r2, #5
   11bac:	movw	r1, #45708	; 0xb28c
   11bb0:	movt	r1, #1
   11bb4:	bl	112f8 <dcgettext@plt>
   11bb8:	mov	sl, r0
   11bbc:	mov	r1, r4
   11bc0:	mov	r0, #4
   11bc4:	bl	18050 <__assert_fail@plt+0x6a4c>
   11bc8:	mov	r3, r0
   11bcc:	mov	r2, sl
   11bd0:	mov	r1, r6
   11bd4:	mov	r0, r6
   11bd8:	bl	113ac <error@plt>
   11bdc:	mov	r2, #5
   11be0:	movw	r1, #45816	; 0xb2f8
   11be4:	movt	r1, #1
   11be8:	mov	r0, #0
   11bec:	bl	112f8 <dcgettext@plt>
   11bf0:	mov	r1, #0
   11bf4:	mov	r2, r0
   11bf8:	mov	r0, r1
   11bfc:	mov	r6, r1
   11c00:	bl	113ac <error@plt>
   11c04:	b	11a38 <__assert_fail@plt+0x434>
   11c08:	ldrb	r6, [r7]
   11c0c:	cmp	r6, #0
   11c10:	beq	11aec <__assert_fail@plt+0x4e8>
   11c14:	ldr	ip, [r7, #48]	; 0x30
   11c18:	cmp	ip, #0
   11c1c:	beq	11a44 <__assert_fail@plt+0x440>
   11c20:	ldrd	r2, [ip]
   11c24:	ldrd	r0, [r5, #160]	; 0xa0
   11c28:	cmp	r1, r3
   11c2c:	cmpeq	r0, r2
   11c30:	bne	11a44 <__assert_fail@plt+0x440>
   11c34:	ldrd	r0, [ip, #8]
   11c38:	ldrd	r2, [r5, #64]	; 0x40
   11c3c:	cmp	r3, r1
   11c40:	cmpeq	r2, r0
   11c44:	bne	11a44 <__assert_fail@plt+0x440>
   11c48:	movw	r1, #48020	; 0xbb94
   11c4c:	movt	r1, #1
   11c50:	mov	r0, r4
   11c54:	bl	11268 <strcmp@plt>
   11c58:	subs	r6, r0, #0
   11c5c:	bne	12344 <__assert_fail@plt+0xd40>
   11c60:	mov	r2, #5
   11c64:	movw	r1, #45708	; 0xb28c
   11c68:	movt	r1, #1
   11c6c:	bl	112f8 <dcgettext@plt>
   11c70:	mov	sl, r0
   11c74:	mov	r1, r4
   11c78:	mov	r0, #4
   11c7c:	bl	18050 <__assert_fail@plt+0x6a4c>
   11c80:	mov	r3, r0
   11c84:	mov	r2, sl
   11c88:	mov	r1, r6
   11c8c:	mov	r0, r6
   11c90:	bl	113ac <error@plt>
   11c94:	mov	r2, #5
   11c98:	movw	r1, #45816	; 0xb2f8
   11c9c:	movt	r1, #1
   11ca0:	mov	r0, #0
   11ca4:	bl	112f8 <dcgettext@plt>
   11ca8:	mov	r1, #0
   11cac:	mov	r2, r0
   11cb0:	mov	r0, r1
   11cb4:	mov	r6, r1
   11cb8:	bl	113ac <error@plt>
   11cbc:	mov	r1, r5
   11cc0:	mov	r2, #4
   11cc4:	mov	r0, r8
   11cc8:	bl	14b58 <__assert_fail@plt+0x3554>
   11ccc:	mov	r0, r8
   11cd0:	bl	144a4 <__assert_fail@plt+0x2ea0>
   11cd4:	b	11a44 <__assert_fail@plt+0x440>
   11cd8:	cmp	r6, #16
   11cdc:	beq	120a0 <__assert_fail@plt+0xa9c>
   11ce0:	cmp	r5, #0
   11ce4:	movne	r3, #1
   11ce8:	strbne	r3, [r7, #20]
   11cec:	bne	118cc <__assert_fail@plt+0x2c8>
   11cf0:	mov	r2, #5
   11cf4:	movw	r1, #45488	; 0xb1b0
   11cf8:	movt	r1, #1
   11cfc:	mov	r0, r5
   11d00:	bl	112f8 <dcgettext@plt>
   11d04:	mov	r2, r0
   11d08:	mov	r1, r5
   11d0c:	mov	r0, #1
   11d10:	bl	113ac <error@plt>
   11d14:	mov	r1, r5
   11d18:	mov	r2, #4
   11d1c:	mov	r0, r8
   11d20:	bl	14b58 <__assert_fail@plt+0x3554>
   11d24:	b	11a44 <__assert_fail@plt+0x440>
   11d28:	mov	r2, #5
   11d2c:	movw	r1, #46104	; 0xb418
   11d30:	movt	r1, #1
   11d34:	mov	r0, #0
   11d38:	bl	112f8 <dcgettext@plt>
   11d3c:	mov	sl, r0
   11d40:	mov	r1, r4
   11d44:	mov	r0, #4
   11d48:	bl	18050 <__assert_fail@plt+0x6a4c>
   11d4c:	mov	r2, r0
   11d50:	mov	r1, sl
   11d54:	mov	r0, #1
   11d58:	bl	114b4 <__printf_chk@plt>
   11d5c:	b	11afc <__assert_fail@plt+0x4f8>
   11d60:	cmp	r2, r4
   11d64:	mov	r1, r6
   11d68:	add	r2, sp, #44	; 0x2c
   11d6c:	mov	r0, fp
   11d70:	beq	11eb4 <__assert_fail@plt+0x8b0>
   11d74:	bl	18378 <__assert_fail@plt+0x6d74>
   11d78:	cmp	r0, #0
   11d7c:	blt	11ef4 <__assert_fail@plt+0x8f0>
   11d80:	ldr	sl, [sp, #44]	; 0x2c
   11d84:	cmp	sl, #0
   11d88:	beq	12130 <__assert_fail@plt+0xb2c>
   11d8c:	mov	r0, sl
   11d90:	bl	112c8 <context_new@plt>
   11d94:	subs	r4, r0, #0
   11d98:	beq	122ac <__assert_fail@plt+0xca8>
   11d9c:	ldr	r1, [r7, #4]
   11da0:	cmp	r1, #0
   11da4:	beq	11db4 <__assert_fail@plt+0x7b0>
   11da8:	bl	11448 <context_user_set@plt>
   11dac:	cmp	r0, #0
   11db0:	bne	1222c <__assert_fail@plt+0xc28>
   11db4:	mov	sl, #1
   11db8:	ldr	r1, [r7, #16]
   11dbc:	cmp	r1, #0
   11dc0:	beq	11dd4 <__assert_fail@plt+0x7d0>
   11dc4:	mov	r0, r4
   11dc8:	bl	11598 <context_range_set@plt>
   11dcc:	cmp	r0, #0
   11dd0:	bne	121d8 <__assert_fail@plt+0xbd4>
   11dd4:	ldr	r1, [r7, #8]
   11dd8:	cmp	r1, #0
   11ddc:	beq	11df0 <__assert_fail@plt+0x7ec>
   11de0:	mov	r0, r4
   11de4:	bl	112ec <context_role_set@plt>
   11de8:	cmp	r0, #0
   11dec:	bne	11fac <__assert_fail@plt+0x9a8>
   11df0:	ldr	r1, [r7, #12]
   11df4:	cmp	r1, #0
   11df8:	beq	11e0c <__assert_fail@plt+0x808>
   11dfc:	mov	r0, r4
   11e00:	bl	11304 <context_type_set@plt>
   11e04:	cmp	r0, #0
   11e08:	bne	12008 <__assert_fail@plt+0xa04>
   11e0c:	cmp	sl, #0
   11e10:	beq	12044 <__assert_fail@plt+0xa40>
   11e14:	mov	r0, r4
   11e18:	bl	115a4 <context_str@plt>
   11e1c:	ldr	r1, [sp, #44]	; 0x2c
   11e20:	mov	sl, r0
   11e24:	cmp	r1, #0
   11e28:	beq	11e38 <__assert_fail@plt+0x834>
   11e2c:	bl	11268 <strcmp@plt>
   11e30:	cmp	r0, #0
   11e34:	beq	11b38 <__assert_fail@plt+0x534>
   11e38:	ldrb	r2, [r7, #20]
   11e3c:	b	11b18 <__assert_fail@plt+0x514>
   11e40:	bl	188f4 <__assert_fail@plt+0x72f0>
   11e44:	b	11b30 <__assert_fail@plt+0x52c>
   11e48:	ldr	r3, [sp, #16]
   11e4c:	mov	r2, #5
   11e50:	mov	r0, #0
   11e54:	ldr	r1, [sp, #20]
   11e58:	ldr	r3, [r3]
   11e5c:	str	r3, [sp, #28]
   11e60:	bl	112f8 <dcgettext@plt>
   11e64:	mov	fp, r0
   11e68:	mov	r2, r6
   11e6c:	mov	r1, #4
   11e70:	mov	r0, #0
   11e74:	bl	17fc4 <__assert_fail@plt+0x69c0>
   11e78:	mov	r6, r0
   11e7c:	mov	r1, sl
   11e80:	mov	r0, #1
   11e84:	bl	182f4 <__assert_fail@plt+0x6cf0>
   11e88:	mov	r3, r6
   11e8c:	mov	r2, fp
   11e90:	str	r0, [sp]
   11e94:	mov	r0, #0
   11e98:	ldr	r1, [sp, #28]
   11e9c:	bl	113ac <error@plt>
   11ea0:	ldr	r6, [r7, #24]
   11ea4:	cmp	r6, #0
   11ea8:	beq	12280 <__assert_fail@plt+0xc7c>
   11eac:	mov	r6, #0
   11eb0:	b	11a38 <__assert_fail@plt+0x434>
   11eb4:	bl	1854c <__assert_fail@plt+0x6f48>
   11eb8:	b	11d78 <__assert_fail@plt+0x774>
   11ebc:	cmp	r2, #1
   11ec0:	bgt	12170 <__assert_fail@plt+0xb6c>
   11ec4:	cmp	r3, r9
   11ec8:	blt	123f8 <__assert_fail@plt+0xdf4>
   11ecc:	mov	r2, #5
   11ed0:	movw	r1, #45508	; 0xb1c4
   11ed4:	movt	r1, #1
   11ed8:	mov	r0, #0
   11edc:	bl	112f8 <dcgettext@plt>
   11ee0:	mov	r1, #0
   11ee4:	mov	r2, r0
   11ee8:	mov	r0, r1
   11eec:	bl	113ac <error@plt>
   11ef0:	b	117bc <__assert_fail@plt+0x1b8>
   11ef4:	ldr	r3, [sp, #16]
   11ef8:	ldr	r4, [r3]
   11efc:	cmp	r4, #61	; 0x3d
   11f00:	beq	11d80 <__assert_fail@plt+0x77c>
   11f04:	mov	r2, #5
   11f08:	movw	r1, #45552	; 0xb1f0
   11f0c:	movt	r1, #1
   11f10:	mov	r0, #0
   11f14:	bl	112f8 <dcgettext@plt>
   11f18:	mov	sl, r0
   11f1c:	mov	r1, r6
   11f20:	mov	r0, #4
   11f24:	mov	r6, #0
   11f28:	bl	18050 <__assert_fail@plt+0x6a4c>
   11f2c:	mov	r3, r0
   11f30:	mov	r2, sl
   11f34:	mov	r1, r4
   11f38:	mov	r0, r6
   11f3c:	bl	113ac <error@plt>
   11f40:	b	11a38 <__assert_fail@plt+0x434>
   11f44:	ldr	r3, [sp, #16]
   11f48:	mov	r2, #5
   11f4c:	movw	r1, #46356	; 0xb514
   11f50:	movt	r1, #1
   11f54:	mov	r0, #0
   11f58:	ldr	r4, [r3]
   11f5c:	bl	112f8 <dcgettext@plt>
   11f60:	mov	r2, r0
   11f64:	mov	r0, #0
   11f68:	mov	r9, r0
   11f6c:	mov	r1, r4
   11f70:	bl	113ac <error@plt>
   11f74:	b	11a78 <__assert_fail@plt+0x474>
   11f78:	mov	r2, #5
   11f7c:	movw	r1, #45692	; 0xb27c
   11f80:	movt	r1, #1
   11f84:	mov	r9, r5
   11f88:	bl	112f8 <dcgettext@plt>
   11f8c:	mov	r2, r0
   11f90:	mov	r1, r4
   11f94:	mov	r0, r5
   11f98:	bl	113ac <error@plt>
   11f9c:	b	11a68 <__assert_fail@plt+0x464>
   11fa0:	ldr	r3, [sp, #24]
   11fa4:	str	r3, [r7, #24]
   11fa8:	b	11934 <__assert_fail@plt+0x330>
   11fac:	ldr	r3, [sp, #16]
   11fb0:	mov	r2, #5
   11fb4:	mov	r0, #0
   11fb8:	ldr	r1, [sp, #24]
   11fbc:	ldr	r6, [r3]
   11fc0:	bl	112f8 <dcgettext@plt>
   11fc4:	mov	sl, r0
   11fc8:	ldr	r0, [r7, #8]
   11fcc:	bl	18304 <__assert_fail@plt+0x6d00>
   11fd0:	mov	r2, sl
   11fd4:	movw	r3, #46300	; 0xb4dc
   11fd8:	movt	r3, #1
   11fdc:	mov	r1, r6
   11fe0:	str	r0, [sp]
   11fe4:	mov	r0, #0
   11fe8:	bl	113ac <error@plt>
   11fec:	ldr	r1, [r7, #12]
   11ff0:	cmp	r1, #0
   11ff4:	beq	12044 <__assert_fail@plt+0xa40>
   11ff8:	mov	r0, r4
   11ffc:	bl	11304 <context_type_set@plt>
   12000:	cmp	r0, #0
   12004:	beq	12044 <__assert_fail@plt+0xa40>
   12008:	ldr	r3, [sp, #16]
   1200c:	mov	r2, #5
   12010:	mov	r0, #0
   12014:	ldr	r1, [sp, #24]
   12018:	ldr	r6, [r3]
   1201c:	bl	112f8 <dcgettext@plt>
   12020:	mov	sl, r0
   12024:	ldr	r0, [r7, #12]
   12028:	bl	18304 <__assert_fail@plt+0x6d00>
   1202c:	mov	r2, sl
   12030:	str	r0, [sp]
   12034:	mov	r0, #0
   12038:	mov	r1, r6
   1203c:	ldr	r3, [sp, #32]
   12040:	bl	113ac <error@plt>
   12044:	ldr	sl, [sp, #16]
   12048:	mov	r0, r4
   1204c:	ldr	r6, [sl]
   12050:	bl	1140c <context_free@plt>
   12054:	str	r6, [sl]
   12058:	b	11eac <__assert_fail@plt+0x8a8>
   1205c:	mov	r2, #5
   12060:	movw	r1, #45916	; 0xb35c
   12064:	movt	r1, #1
   12068:	mov	r0, #0
   1206c:	bl	112f8 <dcgettext@plt>
   12070:	mov	r5, r0
   12074:	mov	r2, r4
   12078:	mov	r1, #3
   1207c:	mov	r0, #0
   12080:	bl	1812c <__assert_fail@plt+0x6b28>
   12084:	mov	r1, #0
   12088:	mov	r3, r0
   1208c:	mov	r2, r5
   12090:	mov	r0, r1
   12094:	mov	r6, r1
   12098:	bl	113ac <error@plt>
   1209c:	b	11a44 <__assert_fail@plt+0x440>
   120a0:	cmp	r5, #1
   120a4:	strbne	r4, [r7, #20]
   120a8:	bne	118cc <__assert_fail@plt+0x2c8>
   120ac:	mov	r2, #5
   120b0:	movw	r1, #45444	; 0xb184
   120b4:	movt	r1, #1
   120b8:	mov	r0, r4
   120bc:	bl	112f8 <dcgettext@plt>
   120c0:	mov	r2, r0
   120c4:	mov	r1, r4
   120c8:	mov	r0, r5
   120cc:	bl	113ac <error@plt>
   120d0:	ldr	r0, [pc, #864]	; 12438 <__assert_fail@plt+0xe34>
   120d4:	bl	1831c <__assert_fail@plt+0x6d18>
   120d8:	cmp	r0, #0
   120dc:	str	r0, [r7, #48]	; 0x30
   120e0:	bne	11950 <__assert_fail@plt+0x34c>
   120e4:	ldr	r3, [sp, #16]
   120e8:	movw	r1, #45660	; 0xb25c
   120ec:	movt	r1, #1
   120f0:	mov	r2, #5
   120f4:	ldr	r4, [r3]
   120f8:	bl	112f8 <dcgettext@plt>
   120fc:	mov	r5, r0
   12100:	movw	r1, #48020	; 0xbb94
   12104:	movt	r1, #1
   12108:	mov	r0, #4
   1210c:	bl	18050 <__assert_fail@plt+0x6a4c>
   12110:	b	121c4 <__assert_fail@plt+0xbc0>
   12114:	mov	r2, #1
   12118:	mov	r1, r5
   1211c:	mov	r0, r8
   12120:	mov	r6, r2
   12124:	str	r2, [r5, #16]
   12128:	bl	14b58 <__assert_fail@plt+0x3554>
   1212c:	b	11a44 <__assert_fail@plt+0x440>
   12130:	mov	r2, #5
   12134:	mov	r0, sl
   12138:	movw	r1, #46140	; 0xb43c
   1213c:	movt	r1, #1
   12140:	bl	112f8 <dcgettext@plt>
   12144:	mov	r4, r0
   12148:	mov	r1, r6
   1214c:	mov	r0, #4
   12150:	mov	r6, sl
   12154:	bl	18050 <__assert_fail@plt+0x6a4c>
   12158:	mov	r3, r0
   1215c:	mov	r2, r4
   12160:	mov	r1, sl
   12164:	mov	r0, sl
   12168:	bl	113ac <error@plt>
   1216c:	b	11a38 <__assert_fail@plt+0x434>
   12170:	ldr	r2, [r8, r3, lsl #2]
   12174:	add	r3, r3, #1
   12178:	str	r3, [r4]
   1217c:	str	r2, [r7, #24]
   12180:	bl	1125c <is_selinux_enabled@plt>
   12184:	cmp	r0, #0
   12188:	ble	11934 <__assert_fail@plt+0x330>
   1218c:	ldr	r0, [r7, #24]
   12190:	bl	113b8 <security_check_context@plt>
   12194:	cmp	r0, #0
   12198:	bge	11934 <__assert_fail@plt+0x330>
   1219c:	bl	11484 <__errno_location@plt>
   121a0:	movw	r1, #45592	; 0xb218
   121a4:	movt	r1, #1
   121a8:	ldr	r4, [r0]
   121ac:	mov	r2, #5
   121b0:	mov	r0, r5
   121b4:	bl	112f8 <dcgettext@plt>
   121b8:	mov	r5, r0
   121bc:	ldr	r0, [r7, #24]
   121c0:	bl	18304 <__assert_fail@plt+0x6d00>
   121c4:	mov	r3, r0
   121c8:	mov	r2, r5
   121cc:	mov	r1, r4
   121d0:	mov	r0, #1
   121d4:	bl	113ac <error@plt>
   121d8:	ldr	r3, [sp, #16]
   121dc:	mov	r2, #5
   121e0:	mov	r0, #0
   121e4:	mov	sl, r0
   121e8:	ldr	r1, [sp, #24]
   121ec:	ldr	r3, [r3]
   121f0:	str	r3, [sp, #36]	; 0x24
   121f4:	bl	112f8 <dcgettext@plt>
   121f8:	mov	r2, r0
   121fc:	ldr	r0, [r7, #16]
   12200:	str	r2, [sp, #28]
   12204:	bl	18304 <__assert_fail@plt+0x6d00>
   12208:	str	r0, [sp]
   1220c:	mov	r0, sl
   12210:	ldr	r3, [sp, #36]	; 0x24
   12214:	ldr	r2, [sp, #28]
   12218:	mov	r1, r3
   1221c:	movw	r3, #46292	; 0xb4d4
   12220:	movt	r3, #1
   12224:	bl	113ac <error@plt>
   12228:	b	11dd4 <__assert_fail@plt+0x7d0>
   1222c:	ldr	r3, [sp, #16]
   12230:	mov	r2, #5
   12234:	mov	r0, #0
   12238:	mov	sl, r0
   1223c:	ldr	r1, [sp, #24]
   12240:	ldr	r3, [r3]
   12244:	str	r3, [sp, #36]	; 0x24
   12248:	bl	112f8 <dcgettext@plt>
   1224c:	mov	r2, r0
   12250:	ldr	r0, [r7, #4]
   12254:	str	r2, [sp, #28]
   12258:	bl	18304 <__assert_fail@plt+0x6d00>
   1225c:	str	r0, [sp]
   12260:	mov	r0, sl
   12264:	ldr	r3, [sp, #36]	; 0x24
   12268:	ldr	r2, [sp, #28]
   1226c:	mov	r1, r3
   12270:	movw	r3, #46284	; 0xb4cc
   12274:	movt	r3, #1
   12278:	bl	113ac <error@plt>
   1227c:	b	11db8 <__assert_fail@plt+0x7b4>
   12280:	mov	r0, r4
   12284:	bl	1140c <context_free@plt>
   12288:	ldr	r0, [sp, #44]	; 0x2c
   1228c:	bl	11580 <freecon@plt>
   12290:	b	11a38 <__assert_fail@plt+0x434>
   12294:	mov	r0, r4
   12298:	mov	r6, #1
   1229c:	bl	1140c <context_free@plt>
   122a0:	ldr	r0, [sp, #44]	; 0x2c
   122a4:	bl	11580 <freecon@plt>
   122a8:	b	11a38 <__assert_fail@plt+0x434>
   122ac:	ldr	r3, [sp, #16]
   122b0:	mov	r2, #5
   122b4:	movw	r1, #46192	; 0xb470
   122b8:	movt	r1, #1
   122bc:	ldr	r6, [r3]
   122c0:	bl	112f8 <dcgettext@plt>
   122c4:	mov	fp, r0
   122c8:	mov	r0, sl
   122cc:	bl	18304 <__assert_fail@plt+0x6d00>
   122d0:	mov	r3, r0
   122d4:	mov	r2, fp
   122d8:	mov	r1, r6
   122dc:	mov	r0, r4
   122e0:	bl	113ac <error@plt>
   122e4:	b	11eac <__assert_fail@plt+0x8a8>
   122e8:	mov	r2, #5
   122ec:	movw	r1, #45756	; 0xb2bc
   122f0:	movt	r1, #1
   122f4:	mov	r0, #0
   122f8:	bl	112f8 <dcgettext@plt>
   122fc:	mov	r6, r0
   12300:	mov	r2, r4
   12304:	mov	r1, #4
   12308:	mov	r0, #0
   1230c:	bl	17fc4 <__assert_fail@plt+0x69c0>
   12310:	mov	r4, r0
   12314:	mov	r1, #4
   12318:	movw	r2, #48020	; 0xbb94
   1231c:	movt	r2, #1
   12320:	mov	r0, #1
   12324:	bl	17fc4 <__assert_fail@plt+0x69c0>
   12328:	mov	r1, #0
   1232c:	mov	r3, r4
   12330:	str	r0, [sp]
   12334:	mov	r2, r6
   12338:	mov	r0, r1
   1233c:	bl	113ac <error@plt>
   12340:	b	11bdc <__assert_fail@plt+0x5d8>
   12344:	mov	r2, #5
   12348:	movw	r1, #45756	; 0xb2bc
   1234c:	movt	r1, #1
   12350:	mov	r0, #0
   12354:	bl	112f8 <dcgettext@plt>
   12358:	mov	r6, r0
   1235c:	mov	r2, r4
   12360:	mov	r1, #4
   12364:	mov	r0, #0
   12368:	bl	17fc4 <__assert_fail@plt+0x69c0>
   1236c:	mov	r4, r0
   12370:	mov	r1, #4
   12374:	movw	r2, #48020	; 0xbb94
   12378:	movt	r2, #1
   1237c:	mov	r0, #1
   12380:	bl	17fc4 <__assert_fail@plt+0x69c0>
   12384:	mov	r1, #0
   12388:	mov	r3, r4
   1238c:	str	r0, [sp]
   12390:	mov	r2, r6
   12394:	mov	r0, r1
   12398:	bl	113ac <error@plt>
   1239c:	b	11c94 <__assert_fail@plt+0x690>
   123a0:	mov	r0, r4
   123a4:	bl	1252c <__assert_fail@plt+0xf28>
   123a8:	mov	r2, #5
   123ac:	mov	r0, r5
   123b0:	movw	r1, #45612	; 0xb22c
   123b4:	movt	r1, #1
   123b8:	bl	112f8 <dcgettext@plt>
   123bc:	mov	r2, r0
   123c0:	mov	r1, r5
   123c4:	mov	r0, r5
   123c8:	bl	113ac <error@plt>
   123cc:	b	117bc <__assert_fail@plt+0x1b8>
   123d0:	bl	11484 <__errno_location@plt>
   123d4:	movw	r1, #45552	; 0xb1f0
   123d8:	movt	r1, #1
   123dc:	ldr	r4, [r0]
   123e0:	mov	r2, #5
   123e4:	mov	r0, r5
   123e8:	bl	112f8 <dcgettext@plt>
   123ec:	mov	r5, r0
   123f0:	ldr	r1, [sp, #24]
   123f4:	b	12108 <__assert_fail@plt+0xb04>
   123f8:	mov	r2, #5
   123fc:	movw	r1, #45524	; 0xb1d4
   12400:	movt	r1, #1
   12404:	mov	r0, #0
   12408:	bl	112f8 <dcgettext@plt>
   1240c:	sub	r9, r9, #-1073741823	; 0xc0000001
   12410:	mov	r4, r0
   12414:	ldr	r0, [r8, r9, lsl #2]
   12418:	bl	18304 <__assert_fail@plt+0x6d00>
   1241c:	mov	r1, #0
   12420:	mov	r3, r0
   12424:	mov	r2, r4
   12428:	mov	r0, r1
   1242c:	bl	113ac <error@plt>
   12430:	b	117bc <__assert_fail@plt+0x1b8>
   12434:	andeq	sl, r1, r0, lsl #16
   12438:	strdeq	ip, [r2], -r0
   1243c:	mov	fp, #0
   12440:	mov	lr, #0
   12444:	pop	{r1}		; (ldr r1, [sp], #4)
   12448:	mov	r2, sp
   1244c:	push	{r2}		; (str r2, [sp, #-4]!)
   12450:	push	{r0}		; (str r0, [sp, #-4]!)
   12454:	ldr	ip, [pc, #16]	; 1246c <__assert_fail@plt+0xe68>
   12458:	push	{ip}		; (str ip, [sp, #-4]!)
   1245c:	ldr	r0, [pc, #12]	; 12470 <__assert_fail@plt+0xe6c>
   12460:	ldr	r3, [pc, #12]	; 12474 <__assert_fail@plt+0xe70>
   12464:	bl	113e8 <__libc_start_main@plt>
   12468:	bl	115c8 <abort@plt>
   1246c:	andeq	sl, r1, r0, lsr #15
   12470:	andeq	r1, r1, r0, lsl r6
   12474:	andeq	sl, r1, r0, asr #14
   12478:	ldr	r3, [pc, #20]	; 12494 <__assert_fail@plt+0xe90>
   1247c:	ldr	r2, [pc, #20]	; 12498 <__assert_fail@plt+0xe94>
   12480:	add	r3, pc, r3
   12484:	ldr	r2, [r3, r2]
   12488:	cmp	r2, #0
   1248c:	bxeq	lr
   12490:	b	11400 <__gmon_start__@plt>
   12494:	andeq	r9, r1, r8, ror fp
   12498:	andeq	r0, r0, r8, asr r1
   1249c:	ldr	r0, [pc, #24]	; 124bc <__assert_fail@plt+0xeb8>
   124a0:	ldr	r3, [pc, #24]	; 124c0 <__assert_fail@plt+0xebc>
   124a4:	cmp	r3, r0
   124a8:	bxeq	lr
   124ac:	ldr	r3, [pc, #16]	; 124c4 <__assert_fail@plt+0xec0>
   124b0:	cmp	r3, #0
   124b4:	bxeq	lr
   124b8:	bx	r3
   124bc:	andeq	ip, r2, ip, lsr #3
   124c0:	andeq	ip, r2, ip, lsr #3
   124c4:	andeq	r0, r0, r0
   124c8:	ldr	r0, [pc, #36]	; 124f4 <__assert_fail@plt+0xef0>
   124cc:	ldr	r1, [pc, #36]	; 124f8 <__assert_fail@plt+0xef4>
   124d0:	sub	r1, r1, r0
   124d4:	asr	r1, r1, #2
   124d8:	add	r1, r1, r1, lsr #31
   124dc:	asrs	r1, r1, #1
   124e0:	bxeq	lr
   124e4:	ldr	r3, [pc, #16]	; 124fc <__assert_fail@plt+0xef8>
   124e8:	cmp	r3, #0
   124ec:	bxeq	lr
   124f0:	bx	r3
   124f4:	andeq	ip, r2, ip, lsr #3
   124f8:	andeq	ip, r2, ip, lsr #3
   124fc:	andeq	r0, r0, r0
   12500:	push	{r4, lr}
   12504:	ldr	r4, [pc, #24]	; 12524 <__assert_fail@plt+0xf20>
   12508:	ldrb	r3, [r4]
   1250c:	cmp	r3, #0
   12510:	popne	{r4, pc}
   12514:	bl	1249c <__assert_fail@plt+0xe98>
   12518:	mov	r3, #1
   1251c:	strb	r3, [r4]
   12520:	pop	{r4, pc}
   12524:	andeq	ip, r2, ip, asr #3
   12528:	b	124c8 <__assert_fail@plt+0xec4>
   1252c:	subs	r6, r0, #0
   12530:	str	r7, [sp, #-8]!
   12534:	str	lr, [sp, #4]
   12538:	sub	sp, sp, #64	; 0x40
   1253c:	beq	12584 <__assert_fail@plt+0xf80>
   12540:	movw	r3, #49600	; 0xc1c0
   12544:	movt	r3, #2
   12548:	ldr	r4, [r3]
   1254c:	mov	r2, #5
   12550:	movw	r1, #43240	; 0xa8e8
   12554:	movt	r1, #1
   12558:	mov	r0, #0
   1255c:	bl	112f8 <dcgettext@plt>
   12560:	movw	r3, #49676	; 0xc20c
   12564:	movt	r3, #2
   12568:	mov	r2, r0
   1256c:	mov	r1, #1
   12570:	ldr	r3, [r3]
   12574:	mov	r0, r4
   12578:	bl	114cc <__fprintf_chk@plt>
   1257c:	mov	r0, r6
   12580:	bl	1143c <exit@plt>
   12584:	mov	r2, #5
   12588:	movw	r1, #43280	; 0xa910
   1258c:	movt	r1, #1
   12590:	movw	r7, #49604	; 0xc1c4
   12594:	movt	r7, #2
   12598:	bl	112f8 <dcgettext@plt>
   1259c:	movw	r3, #49676	; 0xc20c
   125a0:	movt	r3, #2
   125a4:	ldr	ip, [r3]
   125a8:	mov	r1, r0
   125ac:	mov	r0, #1
   125b0:	mov	r3, ip
   125b4:	mov	r2, ip
   125b8:	str	ip, [sp]
   125bc:	bl	114b4 <__printf_chk@plt>
   125c0:	mov	r2, #5
   125c4:	movw	r1, #43440	; 0xa9b0
   125c8:	movt	r1, #1
   125cc:	mov	r0, r6
   125d0:	bl	112f8 <dcgettext@plt>
   125d4:	ldr	r1, [r7]
   125d8:	bl	11244 <fputs_unlocked@plt>
   125dc:	mov	r2, #5
   125e0:	movw	r1, #43580	; 0xaa3c
   125e4:	movt	r1, #1
   125e8:	mov	r0, r6
   125ec:	bl	112f8 <dcgettext@plt>
   125f0:	ldr	r1, [r7]
   125f4:	bl	11244 <fputs_unlocked@plt>
   125f8:	mov	r2, #5
   125fc:	movw	r1, #43656	; 0xaa88
   12600:	movt	r1, #1
   12604:	mov	r0, r6
   12608:	bl	112f8 <dcgettext@plt>
   1260c:	ldr	r1, [r7]
   12610:	bl	11244 <fputs_unlocked@plt>
   12614:	mov	r2, #5
   12618:	movw	r1, #43888	; 0xab70
   1261c:	movt	r1, #1
   12620:	mov	r0, r6
   12624:	bl	112f8 <dcgettext@plt>
   12628:	ldr	r1, [r7]
   1262c:	bl	11244 <fputs_unlocked@plt>
   12630:	mov	r2, #5
   12634:	movw	r1, #44172	; 0xac8c
   12638:	movt	r1, #1
   1263c:	mov	r0, r6
   12640:	bl	112f8 <dcgettext@plt>
   12644:	ldr	r1, [r7]
   12648:	bl	11244 <fputs_unlocked@plt>
   1264c:	mov	r2, #5
   12650:	movw	r1, #44300	; 0xad0c
   12654:	movt	r1, #1
   12658:	mov	r0, r6
   1265c:	bl	112f8 <dcgettext@plt>
   12660:	ldr	r1, [r7]
   12664:	bl	11244 <fputs_unlocked@plt>
   12668:	mov	r2, #5
   1266c:	movw	r1, #44420	; 0xad84
   12670:	movt	r1, #1
   12674:	mov	r0, r6
   12678:	bl	112f8 <dcgettext@plt>
   1267c:	ldr	r1, [r7]
   12680:	bl	11244 <fputs_unlocked@plt>
   12684:	mov	r2, #5
   12688:	movw	r1, #44492	; 0xadcc
   1268c:	movt	r1, #1
   12690:	mov	r0, r6
   12694:	bl	112f8 <dcgettext@plt>
   12698:	ldr	r1, [r7]
   1269c:	bl	11244 <fputs_unlocked@plt>
   126a0:	mov	r2, #5
   126a4:	movw	r1, #44564	; 0xae14
   126a8:	movt	r1, #1
   126ac:	mov	r0, r6
   126b0:	bl	112f8 <dcgettext@plt>
   126b4:	ldr	r1, [r7]
   126b8:	bl	11244 <fputs_unlocked@plt>
   126bc:	mov	r2, #5
   126c0:	movw	r1, #45032	; 0xafe8
   126c4:	movt	r1, #1
   126c8:	mov	r0, r6
   126cc:	bl	112f8 <dcgettext@plt>
   126d0:	ldr	r1, [r7]
   126d4:	bl	11244 <fputs_unlocked@plt>
   126d8:	mov	r2, #5
   126dc:	movw	r1, #45080	; 0xb018
   126e0:	movt	r1, #1
   126e4:	mov	r0, r6
   126e8:	bl	112f8 <dcgettext@plt>
   126ec:	ldr	r1, [r7]
   126f0:	bl	11244 <fputs_unlocked@plt>
   126f4:	movw	lr, #42952	; 0xa7c8
   126f8:	movt	lr, #1
   126fc:	ldr	ip, [lr]
   12700:	ldr	r4, [lr, #4]
   12704:	ldrd	r8, [lr, #8]
   12708:	subs	r1, ip, #0
   1270c:	str	ip, [sp, #8]
   12710:	ldrd	r2, [lr, #16]
   12714:	str	r4, [sp, #12]
   12718:	ldrd	r4, [lr, #24]
   1271c:	strd	r8, [sp, #16]
   12720:	ldrd	r8, [lr, #32]
   12724:	strd	r2, [sp, #24]
   12728:	ldrd	r2, [lr, #40]	; 0x28
   1272c:	strd	r4, [sp, #32]
   12730:	ldrd	r4, [lr, #48]	; 0x30
   12734:	strd	r8, [sp, #40]	; 0x28
   12738:	strd	r2, [sp, #48]	; 0x30
   1273c:	strd	r4, [sp, #56]	; 0x38
   12740:	movwne	r5, #43232	; 0xa8e0
   12744:	add	r4, sp, #8
   12748:	movtne	r5, #1
   1274c:	bne	12844 <__assert_fail@plt+0x1240>
   12750:	ldr	r4, [r4, #4]
   12754:	movw	r1, #45136	; 0xb050
   12758:	movt	r1, #1
   1275c:	mov	r2, #5
   12760:	cmp	r4, #0
   12764:	beq	12858 <__assert_fail@plt+0x1254>
   12768:	mov	r0, #0
   1276c:	bl	112f8 <dcgettext@plt>
   12770:	mov	r1, r0
   12774:	movw	r3, #45160	; 0xb068
   12778:	movt	r3, #1
   1277c:	movw	r2, #45200	; 0xb090
   12780:	movt	r2, #1
   12784:	mov	r0, #1
   12788:	bl	114b4 <__printf_chk@plt>
   1278c:	mov	r1, #0
   12790:	mov	r0, #5
   12794:	bl	11520 <setlocale@plt>
   12798:	cmp	r0, #0
   1279c:	movweq	r5, #43232	; 0xa8e0
   127a0:	movteq	r5, #1
   127a4:	beq	127c8 <__assert_fail@plt+0x11c4>
   127a8:	movw	r1, #45216	; 0xb0a0
   127ac:	movt	r1, #1
   127b0:	mov	r2, #3
   127b4:	movw	r5, #43232	; 0xa8e0
   127b8:	movt	r5, #1
   127bc:	bl	115bc <strncmp@plt>
   127c0:	cmp	r0, #0
   127c4:	bne	12910 <__assert_fail@plt+0x130c>
   127c8:	mov	r2, #5
   127cc:	movw	r1, #45292	; 0xb0ec
   127d0:	movt	r1, #1
   127d4:	mov	r0, #0
   127d8:	bl	112f8 <dcgettext@plt>
   127dc:	mov	r1, r0
   127e0:	movw	r3, #43232	; 0xa8e0
   127e4:	movt	r3, #1
   127e8:	movw	r2, #45160	; 0xb068
   127ec:	movt	r2, #1
   127f0:	mov	r0, #1
   127f4:	bl	114b4 <__printf_chk@plt>
   127f8:	mov	r2, #5
   127fc:	movw	r1, #45320	; 0xb108
   12800:	movt	r1, #1
   12804:	mov	r0, #0
   12808:	bl	112f8 <dcgettext@plt>
   1280c:	movw	r2, #46384	; 0xb530
   12810:	movt	r2, #1
   12814:	cmp	r4, r5
   12818:	movw	r3, #45028	; 0xafe4
   1281c:	movt	r3, #1
   12820:	mov	r1, r0
   12824:	moveq	r3, r2
   12828:	mov	r2, r4
   1282c:	mov	r0, #1
   12830:	bl	114b4 <__printf_chk@plt>
   12834:	b	1257c <__assert_fail@plt+0xf78>
   12838:	ldr	r1, [r4, #8]!
   1283c:	cmp	r1, #0
   12840:	beq	12750 <__assert_fail@plt+0x114c>
   12844:	mov	r0, r5
   12848:	bl	11268 <strcmp@plt>
   1284c:	cmp	r0, #0
   12850:	bne	12838 <__assert_fail@plt+0x1234>
   12854:	b	12750 <__assert_fail@plt+0x114c>
   12858:	mov	r0, r4
   1285c:	bl	112f8 <dcgettext@plt>
   12860:	mov	r1, r0
   12864:	movw	r3, #45160	; 0xb068
   12868:	movt	r3, #1
   1286c:	movw	r2, #45200	; 0xb090
   12870:	movt	r2, #1
   12874:	mov	r0, #1
   12878:	bl	114b4 <__printf_chk@plt>
   1287c:	mov	r1, r4
   12880:	mov	r0, #5
   12884:	bl	11520 <setlocale@plt>
   12888:	cmp	r0, #0
   1288c:	beq	128a8 <__assert_fail@plt+0x12a4>
   12890:	movw	r1, #45216	; 0xb0a0
   12894:	movt	r1, #1
   12898:	mov	r2, #3
   1289c:	bl	115bc <strncmp@plt>
   128a0:	cmp	r0, #0
   128a4:	bne	12904 <__assert_fail@plt+0x1300>
   128a8:	mov	r2, #5
   128ac:	movw	r1, #45292	; 0xb0ec
   128b0:	movt	r1, #1
   128b4:	mov	r0, #0
   128b8:	bl	112f8 <dcgettext@plt>
   128bc:	mov	r1, r0
   128c0:	movw	r3, #43232	; 0xa8e0
   128c4:	movt	r3, #1
   128c8:	movw	r2, #45160	; 0xb068
   128cc:	movt	r2, #1
   128d0:	mov	r0, #1
   128d4:	bl	114b4 <__printf_chk@plt>
   128d8:	movw	r1, #45320	; 0xb108
   128dc:	movt	r1, #1
   128e0:	mov	r2, #5
   128e4:	mov	r0, #0
   128e8:	bl	112f8 <dcgettext@plt>
   128ec:	movw	r4, #43232	; 0xa8e0
   128f0:	movt	r4, #1
   128f4:	movw	r3, #46384	; 0xb530
   128f8:	movt	r3, #1
   128fc:	mov	r1, r0
   12900:	b	12828 <__assert_fail@plt+0x1224>
   12904:	movw	r5, #43232	; 0xa8e0
   12908:	movt	r5, #1
   1290c:	mov	r4, r5
   12910:	mov	r2, #5
   12914:	movw	r1, #45220	; 0xb0a4
   12918:	movt	r1, #1
   1291c:	mov	r0, #0
   12920:	bl	112f8 <dcgettext@plt>
   12924:	ldr	r1, [r7]
   12928:	bl	11244 <fputs_unlocked@plt>
   1292c:	b	127c8 <__assert_fail@plt+0x11c4>
   12930:	movw	r3, #49668	; 0xc204
   12934:	movt	r3, #2
   12938:	str	r0, [r3]
   1293c:	bx	lr
   12940:	movw	r3, #49668	; 0xc204
   12944:	movt	r3, #2
   12948:	strb	r0, [r3, #4]
   1294c:	bx	lr
   12950:	movw	r3, #49604	; 0xc1c4
   12954:	movt	r3, #2
   12958:	strd	r4, [sp, #-16]!
   1295c:	ldr	r0, [r3]
   12960:	str	r6, [sp, #8]
   12964:	str	lr, [sp, #12]
   12968:	sub	sp, sp, #8
   1296c:	bl	19930 <__assert_fail@plt+0x832c>
   12970:	cmp	r0, #0
   12974:	beq	129a0 <__assert_fail@plt+0x139c>
   12978:	movw	r4, #49668	; 0xc204
   1297c:	movt	r4, #2
   12980:	ldrb	r6, [r4, #4]
   12984:	bl	11484 <__errno_location@plt>
   12988:	mov	r5, r0
   1298c:	cmp	r6, #0
   12990:	beq	129cc <__assert_fail@plt+0x13c8>
   12994:	ldr	r3, [r0]
   12998:	cmp	r3, #32
   1299c:	bne	129cc <__assert_fail@plt+0x13c8>
   129a0:	movw	r3, #49600	; 0xc1c0
   129a4:	movt	r3, #2
   129a8:	ldr	r0, [r3]
   129ac:	bl	19930 <__assert_fail@plt+0x832c>
   129b0:	cmp	r0, #0
   129b4:	bne	12a14 <__assert_fail@plt+0x1410>
   129b8:	add	sp, sp, #8
   129bc:	ldrd	r4, [sp]
   129c0:	ldr	r6, [sp, #8]
   129c4:	add	sp, sp, #12
   129c8:	pop	{pc}		; (ldr pc, [sp], #4)
   129cc:	movw	r1, #46612	; 0xb614
   129d0:	movt	r1, #1
   129d4:	mov	r2, #5
   129d8:	mov	r0, #0
   129dc:	bl	112f8 <dcgettext@plt>
   129e0:	mov	r6, r0
   129e4:	ldr	r0, [r4]
   129e8:	cmp	r0, #0
   129ec:	beq	12a24 <__assert_fail@plt+0x1420>
   129f0:	ldr	r4, [r5]
   129f4:	bl	18118 <__assert_fail@plt+0x6b14>
   129f8:	mov	r3, r0
   129fc:	movw	r2, #46624	; 0xb620
   12a00:	movt	r2, #1
   12a04:	mov	r0, #0
   12a08:	str	r6, [sp]
   12a0c:	mov	r1, r4
   12a10:	bl	113ac <error@plt>
   12a14:	movw	r3, #49512	; 0xc168
   12a18:	movt	r3, #2
   12a1c:	ldr	r0, [r3]
   12a20:	bl	112a4 <_exit@plt>
   12a24:	mov	r3, r6
   12a28:	movw	r2, #46628	; 0xb624
   12a2c:	movt	r2, #1
   12a30:	ldr	r1, [r5]
   12a34:	bl	113ac <error@plt>
   12a38:	b	12a14 <__assert_fail@plt+0x1410>
   12a3c:	strd	r4, [sp, #-8]!
   12a40:	ldrd	r2, [r1, #8]
   12a44:	ldrd	r4, [r0, #8]
   12a48:	cmp	r5, r3
   12a4c:	cmpeq	r4, r2
   12a50:	movne	r0, #0
   12a54:	bne	12a70 <__assert_fail@plt+0x146c>
   12a58:	ldrd	r4, [r0]
   12a5c:	ldrd	r2, [r1]
   12a60:	cmp	r5, r3
   12a64:	cmpeq	r4, r2
   12a68:	moveq	r0, #1
   12a6c:	movne	r0, #0
   12a70:	ldrd	r4, [sp]
   12a74:	add	sp, sp, #8
   12a78:	bx	lr
   12a7c:	mov	r2, r1
   12a80:	mov	r3, #0
   12a84:	str	r4, [sp, #-8]!
   12a88:	ldrd	r0, [r0, #8]
   12a8c:	str	lr, [sp, #4]
   12a90:	bl	1a5cc <__assert_fail@plt+0x8fc8>
   12a94:	ldr	r4, [sp]
   12a98:	add	sp, sp, #4
   12a9c:	mov	r0, r2
   12aa0:	pop	{pc}		; (ldr pc, [sp], #4)
   12aa4:	mov	r2, r1
   12aa8:	mov	r3, #0
   12aac:	str	r4, [sp, #-8]!
   12ab0:	ldrd	r0, [r0]
   12ab4:	str	lr, [sp, #4]
   12ab8:	bl	1a5cc <__assert_fail@plt+0x8fc8>
   12abc:	ldr	r4, [sp]
   12ac0:	add	sp, sp, #4
   12ac4:	mov	r0, r2
   12ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   12acc:	strd	r4, [sp, #-8]!
   12ad0:	ldrd	r2, [r1]
   12ad4:	ldrd	r4, [r0]
   12ad8:	cmp	r5, r3
   12adc:	cmpeq	r4, r2
   12ae0:	ldrd	r4, [sp]
   12ae4:	add	sp, sp, #8
   12ae8:	moveq	r0, #1
   12aec:	movne	r0, #0
   12af0:	bx	lr
   12af4:	ldr	r2, [r0]
   12af8:	ldr	r3, [r1]
   12afc:	ldrd	r0, [r2, #160]	; 0xa0
   12b00:	ldrd	r2, [r3, #160]	; 0xa0
   12b04:	cmp	r1, r3
   12b08:	cmpeq	r0, r2
   12b0c:	movhi	r0, #1
   12b10:	movls	r0, #0
   12b14:	movcc	r3, #1
   12b18:	movcs	r3, #0
   12b1c:	sub	r0, r0, r3
   12b20:	bx	lr
   12b24:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12b28:	mov	r5, r2
   12b2c:	mov	r4, r1
   12b30:	ldr	r2, [r0, #40]	; 0x28
   12b34:	strd	r6, [sp, #8]
   12b38:	mov	r6, r0
   12b3c:	str	r8, [sp, #16]
   12b40:	str	lr, [sp, #20]
   12b44:	ldr	r0, [r0, #8]
   12b48:	cmp	r2, r5
   12b4c:	ldr	r7, [r6, #44]	; 0x2c
   12b50:	bcs	12b78 <__assert_fail@plt+0x1574>
   12b54:	add	r1, r5, #40	; 0x28
   12b58:	cmn	r1, #-1073741823	; 0xc0000001
   12b5c:	str	r1, [r6, #40]	; 0x28
   12b60:	bhi	12c00 <__assert_fail@plt+0x15fc>
   12b64:	lsl	r1, r1, #2
   12b68:	bl	197ac <__assert_fail@plt+0x81a8>
   12b6c:	cmp	r0, #0
   12b70:	strne	r0, [r6, #8]
   12b74:	beq	12bfc <__assert_fail@plt+0x15f8>
   12b78:	cmp	r4, #0
   12b7c:	movne	r2, r0
   12b80:	beq	12b94 <__assert_fail@plt+0x1590>
   12b84:	str	r4, [r2], #4
   12b88:	ldr	r4, [r4, #8]
   12b8c:	cmp	r4, #0
   12b90:	bne	12b84 <__assert_fail@plt+0x1580>
   12b94:	mov	r3, r7
   12b98:	mov	r2, #4
   12b9c:	mov	r1, r5
   12ba0:	bl	11574 <qsort@plt>
   12ba4:	ldr	lr, [r6, #8]
   12ba8:	subs	r3, r5, #1
   12bac:	ldr	r0, [lr]
   12bb0:	moveq	r2, r0
   12bb4:	beq	12be0 <__assert_fail@plt+0x15dc>
   12bb8:	mov	ip, r0
   12bbc:	mov	r2, lr
   12bc0:	b	12bc8 <__assert_fail@plt+0x15c4>
   12bc4:	ldr	ip, [r2]
   12bc8:	subs	r3, r3, #1
   12bcc:	ldr	r1, [r2, #4]!
   12bd0:	str	r1, [ip, #8]
   12bd4:	bne	12bc4 <__assert_fail@plt+0x15c0>
   12bd8:	add	r5, lr, r5, lsl #2
   12bdc:	ldr	r2, [r5, #-4]
   12be0:	mov	r3, #0
   12be4:	str	r3, [r2, #8]
   12be8:	ldrd	r4, [sp]
   12bec:	ldrd	r6, [sp, #8]
   12bf0:	ldr	r8, [sp, #16]
   12bf4:	add	sp, sp, #20
   12bf8:	pop	{pc}		; (ldr pc, [sp], #4)
   12bfc:	ldr	r0, [r6, #8]
   12c00:	bl	19e14 <__assert_fail@plt+0x8810>
   12c04:	mov	r3, #0
   12c08:	mov	r0, r4
   12c0c:	str	r3, [r6, #8]
   12c10:	str	r3, [r6, #40]	; 0x28
   12c14:	b	12be8 <__assert_fail@plt+0x15e4>
   12c18:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12c1c:	mov	r5, r2
   12c20:	strd	r6, [sp, #8]
   12c24:	mov	r6, r0
   12c28:	add	r0, r2, #176	; 0xb0
   12c2c:	bic	r0, r0, #7
   12c30:	mov	r7, r1
   12c34:	str	r8, [sp, #16]
   12c38:	str	lr, [sp, #20]
   12c3c:	bl	19770 <__assert_fail@plt+0x816c>
   12c40:	subs	r4, r0, #0
   12c44:	beq	12c90 <__assert_fail@plt+0x168c>
   12c48:	mov	r1, r7
   12c4c:	mov	r2, r5
   12c50:	add	r0, r4, #168	; 0xa8
   12c54:	bl	112b0 <memcpy@plt>
   12c58:	ldr	r1, [r6, #24]
   12c5c:	mov	r3, #0
   12c60:	add	r0, r4, r5
   12c64:	mov	r2, #3
   12c68:	strb	r3, [r0, #168]	; 0xa8
   12c6c:	str	r3, [r4, #12]
   12c70:	str	r3, [r4, #16]
   12c74:	str	r3, [r4, #20]
   12c78:	str	r1, [r4, #28]
   12c7c:	str	r3, [r4, #32]
   12c80:	str	r6, [r4, #44]	; 0x2c
   12c84:	str	r5, [r4, #52]	; 0x34
   12c88:	strh	r3, [r4, #58]	; 0x3a
   12c8c:	strh	r2, [r4, #60]	; 0x3c
   12c90:	mov	r0, r4
   12c94:	ldrd	r4, [sp]
   12c98:	ldrd	r6, [sp, #8]
   12c9c:	ldr	r8, [sp, #16]
   12ca0:	add	sp, sp, #20
   12ca4:	pop	{pc}		; (ldr pc, [sp], #4)
   12ca8:	strd	r4, [sp, #-16]!
   12cac:	subs	r4, r0, #0
   12cb0:	str	r6, [sp, #8]
   12cb4:	str	lr, [sp, #12]
   12cb8:	beq	12ce0 <__assert_fail@plt+0x16dc>
   12cbc:	ldr	r5, [r4, #8]
   12cc0:	ldr	r3, [r4, #12]
   12cc4:	subs	r0, r3, #0
   12cc8:	beq	12cd0 <__assert_fail@plt+0x16cc>
   12ccc:	bl	115ec <closedir@plt>
   12cd0:	mov	r0, r4
   12cd4:	bl	19e14 <__assert_fail@plt+0x8810>
   12cd8:	subs	r4, r5, #0
   12cdc:	bne	12cbc <__assert_fail@plt+0x16b8>
   12ce0:	ldrd	r4, [sp]
   12ce4:	ldr	r6, [sp, #8]
   12ce8:	add	sp, sp, #12
   12cec:	pop	{pc}		; (ldr pc, [sp], #4)
   12cf0:	str	r4, [sp, #-8]!
   12cf4:	mov	r4, r0
   12cf8:	str	lr, [sp, #4]
   12cfc:	b	12d0c <__assert_fail@plt+0x1708>
   12d00:	bl	15f20 <__assert_fail@plt+0x491c>
   12d04:	cmp	r0, #0
   12d08:	bge	12d2c <__assert_fail@plt+0x1728>
   12d0c:	mov	r0, r4
   12d10:	bl	15ed0 <__assert_fail@plt+0x48cc>
   12d14:	cmp	r0, #0
   12d18:	mov	r0, r4
   12d1c:	beq	12d00 <__assert_fail@plt+0x16fc>
   12d20:	ldr	r4, [sp]
   12d24:	add	sp, sp, #4
   12d28:	pop	{pc}		; (ldr pc, [sp], #4)
   12d2c:	bl	115d4 <close@plt>
   12d30:	b	12d0c <__assert_fail@plt+0x1708>
   12d34:	strd	r4, [sp, #-20]!	; 0xffffffec
   12d38:	ldr	r5, [r0, #44]	; 0x2c
   12d3c:	ldr	r3, [r5, #48]	; 0x30
   12d40:	strd	r6, [sp, #8]
   12d44:	str	lr, [sp, #16]
   12d48:	sub	sp, sp, #100	; 0x64
   12d4c:	tst	r3, #512	; 0x200
   12d50:	beq	12de0 <__assert_fail@plt+0x17dc>
   12d54:	ldr	r4, [r5, #52]	; 0x34
   12d58:	mov	r7, r1
   12d5c:	mov	r6, r0
   12d60:	cmp	r4, #0
   12d64:	beq	12d8c <__assert_fail@plt+0x1788>
   12d68:	ldrd	r2, [r6, #64]	; 0x40
   12d6c:	add	r1, sp, #8
   12d70:	mov	r0, r4
   12d74:	strd	r2, [sp, #8]
   12d78:	bl	153d0 <__assert_fail@plt+0x3dcc>
   12d7c:	cmp	r0, #0
   12d80:	beq	12dc4 <__assert_fail@plt+0x17c0>
   12d84:	ldr	r0, [r0, #8]
   12d88:	b	12de4 <__assert_fail@plt+0x17e0>
   12d8c:	movw	r0, #40468	; 0x9e14
   12d90:	movt	r0, #1
   12d94:	mov	r1, r4
   12d98:	movw	r3, #10956	; 0x2acc
   12d9c:	movt	r3, #1
   12da0:	movw	r2, #10916	; 0x2aa4
   12da4:	movt	r2, #1
   12da8:	str	r0, [sp]
   12dac:	mov	r0, #13
   12db0:	bl	156f0 <__assert_fail@plt+0x40ec>
   12db4:	cmp	r0, #0
   12db8:	mov	r4, r0
   12dbc:	str	r0, [r5, #52]	; 0x34
   12dc0:	bne	12d68 <__assert_fail@plt+0x1764>
   12dc4:	cmp	r7, #0
   12dc8:	blt	12de0 <__assert_fail@plt+0x17dc>
   12dcc:	mov	r0, r7
   12dd0:	add	r1, sp, #8
   12dd4:	bl	1122c <fstatfs64@plt>
   12dd8:	cmp	r0, #0
   12ddc:	beq	12df8 <__assert_fail@plt+0x17f4>
   12de0:	mov	r0, #0
   12de4:	add	sp, sp, #100	; 0x64
   12de8:	ldrd	r4, [sp]
   12dec:	ldrd	r6, [sp, #8]
   12df0:	add	sp, sp, #16
   12df4:	pop	{pc}		; (ldr pc, [sp], #4)
   12df8:	cmp	r4, #0
   12dfc:	beq	12e3c <__assert_fail@plt+0x1838>
   12e00:	mov	r0, #16
   12e04:	bl	19770 <__assert_fail@plt+0x816c>
   12e08:	subs	r5, r0, #0
   12e0c:	beq	12e3c <__assert_fail@plt+0x1838>
   12e10:	ldr	ip, [sp, #8]
   12e14:	mov	r0, r4
   12e18:	mov	r1, r5
   12e1c:	ldrd	r2, [r6, #64]	; 0x40
   12e20:	strd	r2, [r5]
   12e24:	str	ip, [r5, #8]
   12e28:	bl	15d48 <__assert_fail@plt+0x4744>
   12e2c:	cmp	r0, #0
   12e30:	beq	12e44 <__assert_fail@plt+0x1840>
   12e34:	cmp	r5, r0
   12e38:	bne	12e50 <__assert_fail@plt+0x184c>
   12e3c:	ldr	r0, [sp, #8]
   12e40:	b	12de4 <__assert_fail@plt+0x17e0>
   12e44:	mov	r0, r5
   12e48:	bl	19e14 <__assert_fail@plt+0x8810>
   12e4c:	b	12e3c <__assert_fail@plt+0x1838>
   12e50:	bl	115c8 <abort@plt>
   12e54:	strd	r4, [sp, #-16]!
   12e58:	mov	r5, r1
   12e5c:	ldr	r1, [r0, #32]
   12e60:	str	r6, [sp, #8]
   12e64:	str	lr, [sp, #12]
   12e68:	sub	r3, r1, r5
   12e6c:	cmn	r1, #100	; 0x64
   12e70:	clz	r3, r3
   12e74:	lsr	r3, r3, #5
   12e78:	moveq	r3, #0
   12e7c:	cmp	r3, #0
   12e80:	bne	12ee0 <__assert_fail@plt+0x18dc>
   12e84:	cmp	r2, #0
   12e88:	mov	r4, r0
   12e8c:	bne	12ebc <__assert_fail@plt+0x18b8>
   12e90:	ldr	r3, [r0, #48]	; 0x30
   12e94:	mvn	r2, r1
   12e98:	lsr	r2, r2, #31
   12e9c:	eor	r3, r3, #4
   12ea0:	ands	r3, r2, r3, lsr #2
   12ea4:	bne	12ed4 <__assert_fail@plt+0x18d0>
   12ea8:	ldr	r6, [sp, #8]
   12eac:	str	r5, [r4, #32]
   12eb0:	ldrd	r4, [sp]
   12eb4:	add	sp, sp, #12
   12eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   12ebc:	add	r0, r0, #60	; 0x3c
   12ec0:	bl	15ed8 <__assert_fail@plt+0x48d4>
   12ec4:	cmp	r0, #0
   12ec8:	blt	12ea8 <__assert_fail@plt+0x18a4>
   12ecc:	bl	115d4 <close@plt>
   12ed0:	b	12ea8 <__assert_fail@plt+0x18a4>
   12ed4:	mov	r0, r1
   12ed8:	bl	115d4 <close@plt>
   12edc:	b	12ea8 <__assert_fail@plt+0x18a4>
   12ee0:	bl	115c8 <abort@plt>
   12ee4:	ldr	r3, [r0, #48]	; 0x30
   12ee8:	strd	r4, [sp, #-16]!
   12eec:	mov	r4, r0
   12ef0:	str	r6, [sp, #8]
   12ef4:	str	lr, [sp, #12]
   12ef8:	ands	r5, r3, #4
   12efc:	movne	r5, #0
   12f00:	bne	12f18 <__assert_fail@plt+0x1914>
   12f04:	tst	r3, #512	; 0x200
   12f08:	beq	12f34 <__assert_fail@plt+0x1930>
   12f0c:	mov	r2, #1
   12f10:	mvn	r1, #99	; 0x63
   12f14:	bl	12e54 <__assert_fail@plt+0x1850>
   12f18:	add	r0, r4, #60	; 0x3c
   12f1c:	bl	12cf0 <__assert_fail@plt+0x16ec>
   12f20:	mov	r0, r5
   12f24:	ldrd	r4, [sp]
   12f28:	ldr	r6, [sp, #8]
   12f2c:	add	sp, sp, #12
   12f30:	pop	{pc}		; (ldr pc, [sp], #4)
   12f34:	ldr	r0, [r0, #28]
   12f38:	bl	11568 <fchdir@plt>
   12f3c:	adds	r5, r0, #0
   12f40:	movne	r5, #1
   12f44:	b	12f18 <__assert_fail@plt+0x1914>
   12f48:	ldr	ip, [r2, #48]	; 0x30
   12f4c:	strd	r4, [sp, #-16]!
   12f50:	mov	r4, r2
   12f54:	add	r5, r2, #64	; 0x40
   12f58:	ldr	r2, [r2, #24]
   12f5c:	str	r6, [sp, #8]
   12f60:	str	lr, [sp, #12]
   12f64:	sub	sp, sp, #8
   12f68:	cmp	ip, #0
   12f6c:	bne	12fe4 <__assert_fail@plt+0x19e0>
   12f70:	tst	r1, #1
   12f74:	beq	12fe4 <__assert_fail@plt+0x19e0>
   12f78:	mov	r1, r2
   12f7c:	mov	r0, #3
   12f80:	mov	r2, r5
   12f84:	bl	115b0 <__xstat64@plt>
   12f88:	cmp	r0, #0
   12f8c:	beq	13010 <__assert_fail@plt+0x1a0c>
   12f90:	bl	11484 <__errno_location@plt>
   12f94:	ldr	r3, [r0]
   12f98:	mov	r6, r0
   12f9c:	cmp	r3, #2
   12fa0:	bne	12fc8 <__assert_fail@plt+0x19c4>
   12fa4:	mov	r2, r5
   12fa8:	mov	r0, #3
   12fac:	ldr	r1, [r4, #24]
   12fb0:	bl	115e0 <__lxstat64@plt>
   12fb4:	subs	r3, r0, #0
   12fb8:	moveq	r0, #13
   12fbc:	streq	r3, [r6]
   12fc0:	beq	13034 <__assert_fail@plt+0x1a30>
   12fc4:	ldr	r3, [r6]
   12fc8:	mov	r0, r5
   12fcc:	mov	r2, #104	; 0x68
   12fd0:	str	r3, [r4, #32]
   12fd4:	mov	r1, #0
   12fd8:	bl	114a8 <memset@plt>
   12fdc:	mov	r0, #10
   12fe0:	b	13034 <__assert_fail@plt+0x1a30>
   12fe4:	ubfx	ip, r1, #1, #1
   12fe8:	orrs	r3, r3, ip
   12fec:	bne	12f78 <__assert_fail@plt+0x1974>
   12ff0:	mov	ip, #256	; 0x100
   12ff4:	mov	r1, r0
   12ff8:	mov	r3, r5
   12ffc:	mov	r0, #3
   13000:	str	ip, [sp]
   13004:	bl	11340 <__fxstatat64@plt>
   13008:	cmp	r0, #0
   1300c:	bne	13090 <__assert_fail@plt+0x1a8c>
   13010:	ldr	r3, [r4, #80]	; 0x50
   13014:	and	r3, r3, #61440	; 0xf000
   13018:	cmp	r3, #16384	; 0x4000
   1301c:	beq	13048 <__assert_fail@plt+0x1a44>
   13020:	cmp	r3, #40960	; 0xa000
   13024:	beq	1309c <__assert_fail@plt+0x1a98>
   13028:	cmp	r3, #32768	; 0x8000
   1302c:	movne	r0, #3
   13030:	moveq	r0, #8
   13034:	add	sp, sp, #8
   13038:	ldrd	r4, [sp]
   1303c:	ldr	r6, [sp, #8]
   13040:	add	sp, sp, #12
   13044:	pop	{pc}		; (ldr pc, [sp], #4)
   13048:	ldrb	r3, [r4, #168]	; 0xa8
   1304c:	cmp	r3, #46	; 0x2e
   13050:	bne	13074 <__assert_fail@plt+0x1a70>
   13054:	ldrb	r3, [r4, #169]	; 0xa9
   13058:	cmp	r3, #0
   1305c:	beq	1307c <__assert_fail@plt+0x1a78>
   13060:	ldr	r3, [r4, #168]	; 0xa8
   13064:	bic	r3, r3, #-16777216	; 0xff000000
   13068:	bic	r3, r3, #255	; 0xff
   1306c:	cmp	r3, #11776	; 0x2e00
   13070:	beq	1307c <__assert_fail@plt+0x1a78>
   13074:	mov	r0, #1
   13078:	b	13034 <__assert_fail@plt+0x1a30>
   1307c:	ldr	r3, [r4, #48]	; 0x30
   13080:	cmp	r3, #0
   13084:	moveq	r0, #1
   13088:	movne	r0, #5
   1308c:	b	13034 <__assert_fail@plt+0x1a30>
   13090:	bl	11484 <__errno_location@plt>
   13094:	ldr	r3, [r0]
   13098:	b	12fc8 <__assert_fail@plt+0x19c4>
   1309c:	mov	r0, #12
   130a0:	b	13034 <__assert_fail@plt+0x1a30>
   130a4:	mov	ip, r1
   130a8:	ldr	r1, [r1]
   130ac:	strd	r4, [sp, #-16]!
   130b0:	mov	r4, r0
   130b4:	ldr	r0, [r0]
   130b8:	str	r6, [sp, #8]
   130bc:	str	lr, [sp, #12]
   130c0:	add	r3, r1, #256	; 0x100
   130c4:	add	r2, r3, r2
   130c8:	cmp	r1, r2
   130cc:	bhi	13100 <__assert_fail@plt+0x1afc>
   130d0:	mov	r1, r2
   130d4:	str	r2, [ip]
   130d8:	bl	197ac <__assert_fail@plt+0x81a8>
   130dc:	subs	r5, r0, #0
   130e0:	movne	r3, #1
   130e4:	strne	r5, [r4]
   130e8:	beq	13120 <__assert_fail@plt+0x1b1c>
   130ec:	ldrd	r4, [sp]
   130f0:	mov	r0, r3
   130f4:	ldr	r6, [sp, #8]
   130f8:	add	sp, sp, #12
   130fc:	pop	{pc}		; (ldr pc, [sp], #4)
   13100:	mov	r5, #0
   13104:	bl	19e14 <__assert_fail@plt+0x8810>
   13108:	str	r5, [r4]
   1310c:	bl	11484 <__errno_location@plt>
   13110:	mov	r2, #36	; 0x24
   13114:	mov	r3, r5
   13118:	str	r2, [r0]
   1311c:	b	130ec <__assert_fail@plt+0x1ae8>
   13120:	ldr	r0, [r4]
   13124:	bl	19e14 <__assert_fail@plt+0x8810>
   13128:	mov	r3, r5
   1312c:	str	r5, [r4]
   13130:	b	130ec <__assert_fail@plt+0x1ae8>
   13134:	movw	r3, #258	; 0x102
   13138:	str	r4, [sp, #-8]!
   1313c:	mov	r4, r1
   13140:	tst	r0, r3
   13144:	str	lr, [sp, #4]
   13148:	sub	sp, sp, #8
   1314c:	beq	13198 <__assert_fail@plt+0x1b94>
   13150:	movw	r1, #40468	; 0x9e14
   13154:	movt	r1, #1
   13158:	movw	r3, #10812	; 0x2a3c
   1315c:	movt	r3, #1
   13160:	movw	r2, #10876	; 0x2a7c
   13164:	movt	r2, #1
   13168:	str	r1, [sp]
   1316c:	mov	r0, #31
   13170:	mov	r1, #0
   13174:	bl	156f0 <__assert_fail@plt+0x40ec>
   13178:	mov	r3, r0
   1317c:	adds	r0, r0, #0
   13180:	movne	r0, #1
   13184:	str	r3, [r4]
   13188:	add	sp, sp, #8
   1318c:	ldr	r4, [sp]
   13190:	add	sp, sp, #4
   13194:	pop	{pc}		; (ldr pc, [sp], #4)
   13198:	mov	r0, #32
   1319c:	bl	19770 <__assert_fail@plt+0x816c>
   131a0:	cmp	r0, #0
   131a4:	str	r0, [r4]
   131a8:	beq	13188 <__assert_fail@plt+0x1b84>
   131ac:	bl	199b8 <__assert_fail@plt+0x83b4>
   131b0:	mov	r0, #1
   131b4:	add	sp, sp, #8
   131b8:	ldr	r4, [sp]
   131bc:	add	sp, sp, #4
   131c0:	pop	{pc}		; (ldr pc, [sp], #4)
   131c4:	mov	r3, r2
   131c8:	lsl	r2, r1, #11
   131cc:	tst	r1, #512	; 0x200
   131d0:	and	r2, r2, #32768	; 0x8000
   131d4:	orr	r2, r2, #540672	; 0x84000
   131d8:	orr	r2, r2, #2304	; 0x900
   131dc:	beq	131e8 <__assert_fail@plt+0x1be4>
   131e0:	mov	r1, r3
   131e4:	b	15f70 <__assert_fail@plt+0x496c>
   131e8:	mov	r1, r2
   131ec:	mov	r0, r3
   131f0:	b	19d74 <__assert_fail@plt+0x8770>
   131f4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   131f8:	mov	r5, r0
   131fc:	mov	r4, r2
   13200:	strd	r6, [sp, #8]
   13204:	mov	r7, r1
   13208:	strd	r8, [sp, #16]
   1320c:	ldr	r9, [r0, #48]	; 0x30
   13210:	str	sl, [sp, #24]
   13214:	subs	sl, r3, #0
   13218:	str	lr, [sp, #28]
   1321c:	sub	sp, sp, #104	; 0x68
   13220:	and	r8, r9, #4
   13224:	beq	132fc <__assert_fail@plt+0x1cf8>
   13228:	movw	r1, #46680	; 0xb658
   1322c:	movt	r1, #1
   13230:	mov	r0, sl
   13234:	bl	11268 <strcmp@plt>
   13238:	cmp	r0, #0
   1323c:	bne	132fc <__assert_fail@plt+0x1cf8>
   13240:	cmp	r8, #0
   13244:	bne	1333c <__assert_fail@plt+0x1d38>
   13248:	cmp	r4, #0
   1324c:	bge	133fc <__assert_fail@plt+0x1df8>
   13250:	tst	r9, #512	; 0x200
   13254:	bne	13380 <__assert_fail@plt+0x1d7c>
   13258:	mov	r8, #1
   1325c:	mov	r1, r9
   13260:	mov	r2, sl
   13264:	ldr	r0, [r5, #32]
   13268:	bl	131c4 <__assert_fail@plt+0x1bc0>
   1326c:	subs	r6, r0, #0
   13270:	blt	133f4 <__assert_fail@plt+0x1df0>
   13274:	ldr	r9, [r5, #48]	; 0x30
   13278:	tst	r9, #2
   1327c:	beq	13318 <__assert_fail@plt+0x1d14>
   13280:	mov	r2, sp
   13284:	mov	r1, r6
   13288:	mov	r0, #3
   1328c:	bl	11358 <__fxstat64@plt>
   13290:	cmp	r0, #0
   13294:	bne	13378 <__assert_fail@plt+0x1d74>
   13298:	ldrd	r2, [sp]
   1329c:	ldrd	r0, [r7, #64]	; 0x40
   132a0:	cmp	r1, r3
   132a4:	cmpeq	r0, r2
   132a8:	bne	1336c <__assert_fail@plt+0x1d68>
   132ac:	ldrd	r2, [sp, #96]	; 0x60
   132b0:	ldrd	r0, [r7, #160]	; 0xa0
   132b4:	cmp	r1, r3
   132b8:	cmpeq	r0, r2
   132bc:	bne	1336c <__assert_fail@plt+0x1d68>
   132c0:	ldr	r9, [r5, #48]	; 0x30
   132c4:	tst	r9, #512	; 0x200
   132c8:	bne	133bc <__assert_fail@plt+0x1db8>
   132cc:	mov	r0, r6
   132d0:	bl	11568 <fchdir@plt>
   132d4:	mov	r9, r0
   132d8:	cmp	r4, #0
   132dc:	bge	1334c <__assert_fail@plt+0x1d48>
   132e0:	bl	11484 <__errno_location@plt>
   132e4:	mov	r4, r0
   132e8:	mov	r0, r6
   132ec:	ldr	r5, [r4]
   132f0:	bl	115d4 <close@plt>
   132f4:	str	r5, [r4]
   132f8:	b	1334c <__assert_fail@plt+0x1d48>
   132fc:	cmp	r8, #0
   13300:	bne	1333c <__assert_fail@plt+0x1d38>
   13304:	cmp	r4, #0
   13308:	movge	r6, r4
   1330c:	blt	1325c <__assert_fail@plt+0x1c58>
   13310:	tst	r9, #2
   13314:	bne	13280 <__assert_fail@plt+0x1c7c>
   13318:	cmp	sl, #0
   1331c:	beq	132c4 <__assert_fail@plt+0x1cc0>
   13320:	mov	r0, sl
   13324:	movw	r1, #46680	; 0xb658
   13328:	movt	r1, #1
   1332c:	bl	11268 <strcmp@plt>
   13330:	cmp	r0, #0
   13334:	bne	132c4 <__assert_fail@plt+0x1cc0>
   13338:	b	13280 <__assert_fail@plt+0x1c7c>
   1333c:	mvn	r3, r4
   13340:	lsr	r3, r3, #31
   13344:	ands	r9, r3, r9, lsr #9
   13348:	bne	133d8 <__assert_fail@plt+0x1dd4>
   1334c:	mov	r0, r9
   13350:	add	sp, sp, #104	; 0x68
   13354:	ldrd	r4, [sp]
   13358:	ldrd	r6, [sp, #8]
   1335c:	ldrd	r8, [sp, #16]
   13360:	ldr	sl, [sp, #24]
   13364:	add	sp, sp, #28
   13368:	pop	{pc}		; (ldr pc, [sp], #4)
   1336c:	bl	11484 <__errno_location@plt>
   13370:	mov	r3, #2
   13374:	str	r3, [r0]
   13378:	mvn	r9, #0
   1337c:	b	132d8 <__assert_fail@plt+0x1cd4>
   13380:	add	r6, r5, #60	; 0x3c
   13384:	mov	r0, r6
   13388:	bl	15ed0 <__assert_fail@plt+0x48cc>
   1338c:	subs	r8, r0, #0
   13390:	bne	1325c <__assert_fail@plt+0x1c58>
   13394:	mov	r0, r6
   13398:	bl	15f20 <__assert_fail@plt+0x491c>
   1339c:	subs	r6, r0, #0
   133a0:	blt	133e8 <__assert_fail@plt+0x1de4>
   133a4:	ldr	r9, [r5, #48]	; 0x30
   133a8:	mov	r4, r6
   133ac:	mov	r8, #1
   133b0:	tst	r9, #2
   133b4:	beq	132c4 <__assert_fail@plt+0x1cc0>
   133b8:	b	13280 <__assert_fail@plt+0x1c7c>
   133bc:	eor	r2, r8, #1
   133c0:	mov	r1, r6
   133c4:	uxtb	r2, r2
   133c8:	mov	r0, r5
   133cc:	bl	12e54 <__assert_fail@plt+0x1850>
   133d0:	mov	r9, #0
   133d4:	b	1334c <__assert_fail@plt+0x1d48>
   133d8:	mov	r0, r4
   133dc:	mov	r9, #0
   133e0:	bl	115d4 <close@plt>
   133e4:	b	1334c <__assert_fail@plt+0x1d48>
   133e8:	mov	r8, #1
   133ec:	ldr	r9, [r5, #48]	; 0x30
   133f0:	b	1325c <__assert_fail@plt+0x1c58>
   133f4:	mvn	r9, #0
   133f8:	b	1334c <__assert_fail@plt+0x1d48>
   133fc:	tst	r9, #2
   13400:	mov	r6, r4
   13404:	mov	r8, #1
   13408:	beq	13320 <__assert_fail@plt+0x1d1c>
   1340c:	b	13280 <__assert_fail@plt+0x1c7c>
   13410:	movw	r3, #258	; 0x102
   13414:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13418:	tst	r0, r3
   1341c:	strd	r6, [sp, #8]
   13420:	strd	r8, [sp, #16]
   13424:	mov	r8, r2
   13428:	str	sl, [sp, #24]
   1342c:	mov	sl, r1
   13430:	str	lr, [sp, #28]
   13434:	beq	134b8 <__assert_fail@plt+0x1eb4>
   13438:	mov	r0, #24
   1343c:	bl	19770 <__assert_fail@plt+0x816c>
   13440:	subs	r9, r0, #0
   13444:	beq	134dc <__assert_fail@plt+0x1ed8>
   13448:	ldrd	r6, [r8, #64]	; 0x40
   1344c:	mov	r1, r9
   13450:	ldrd	r4, [r8, #160]	; 0xa0
   13454:	ldr	r0, [sl]
   13458:	strd	r6, [r9]
   1345c:	str	r8, [r9, #16]
   13460:	strd	r4, [r9, #8]
   13464:	bl	15d48 <__assert_fail@plt+0x4744>
   13468:	cmp	r9, r0
   1346c:	mov	r4, r0
   13470:	beq	1349c <__assert_fail@plt+0x1e98>
   13474:	mov	r0, r9
   13478:	bl	19e14 <__assert_fail@plt+0x8810>
   1347c:	cmp	r4, #0
   13480:	beq	134dc <__assert_fail@plt+0x1ed8>
   13484:	ldr	r3, [r4, #16]
   13488:	mov	r2, #2
   1348c:	mov	r0, #1
   13490:	str	r3, [r8]
   13494:	strh	r2, [r8, #56]	; 0x38
   13498:	b	134a0 <__assert_fail@plt+0x1e9c>
   1349c:	mov	r0, #1
   134a0:	ldrd	r4, [sp]
   134a4:	ldrd	r6, [sp, #8]
   134a8:	ldrd	r8, [sp, #16]
   134ac:	ldr	sl, [sp, #24]
   134b0:	add	sp, sp, #28
   134b4:	pop	{pc}		; (ldr pc, [sp], #4)
   134b8:	add	r1, r2, #64	; 0x40
   134bc:	ldr	r0, [sl]
   134c0:	bl	199e0 <__assert_fail@plt+0x83dc>
   134c4:	cmp	r0, #0
   134c8:	beq	1349c <__assert_fail@plt+0x1e98>
   134cc:	mov	r3, #2
   134d0:	str	r8, [r8]
   134d4:	strh	r3, [r8, #56]	; 0x38
   134d8:	b	134a0 <__assert_fail@plt+0x1e9c>
   134dc:	mov	r0, #0
   134e0:	b	134a0 <__assert_fail@plt+0x1e9c>
   134e4:	movw	r3, #258	; 0x102
   134e8:	mov	ip, r1
   134ec:	strd	r4, [sp, #-12]!
   134f0:	tst	r0, r3
   134f4:	str	lr, [sp, #8]
   134f8:	sub	sp, sp, #28
   134fc:	bne	1354c <__assert_fail@plt+0x1f48>
   13500:	ldr	r3, [r2, #4]
   13504:	cmp	r3, #0
   13508:	beq	1353c <__assert_fail@plt+0x1f38>
   1350c:	ldr	r1, [r3, #48]	; 0x30
   13510:	cmp	r1, #0
   13514:	blt	1353c <__assert_fail@plt+0x1f38>
   13518:	ldr	ip, [ip]
   1351c:	ldrd	r0, [ip, #16]
   13520:	orrs	r1, r0, r1
   13524:	beq	135ac <__assert_fail@plt+0x1fa8>
   13528:	ldrd	r4, [ip]
   1352c:	ldrd	r0, [r2, #160]	; 0xa0
   13530:	cmp	r5, r1
   13534:	cmpeq	r4, r0
   13538:	beq	13584 <__assert_fail@plt+0x1f80>
   1353c:	add	sp, sp, #28
   13540:	ldrd	r4, [sp]
   13544:	add	sp, sp, #8
   13548:	pop	{pc}		; (ldr pc, [sp], #4)
   1354c:	ldrd	r4, [r2, #64]	; 0x40
   13550:	mov	r1, sp
   13554:	ldrd	r2, [r2, #160]	; 0xa0
   13558:	ldr	r0, [ip]
   1355c:	strd	r4, [sp]
   13560:	strd	r2, [sp, #8]
   13564:	bl	15d88 <__assert_fail@plt+0x4784>
   13568:	cmp	r0, #0
   1356c:	beq	135ac <__assert_fail@plt+0x1fa8>
   13570:	bl	19e14 <__assert_fail@plt+0x8810>
   13574:	add	sp, sp, #28
   13578:	ldrd	r4, [sp]
   1357c:	add	sp, sp, #8
   13580:	pop	{pc}		; (ldr pc, [sp], #4)
   13584:	ldrd	r0, [ip, #8]
   13588:	ldrd	r4, [r2, #64]	; 0x40
   1358c:	cmp	r1, r5
   13590:	cmpeq	r0, r4
   13594:	bne	1353c <__assert_fail@plt+0x1f38>
   13598:	ldrd	r0, [r3, #64]	; 0x40
   1359c:	ldrd	r2, [r3, #160]	; 0xa0
   135a0:	strd	r2, [ip]
   135a4:	strd	r0, [ip, #8]
   135a8:	b	1353c <__assert_fail@plt+0x1f38>
   135ac:	bl	115c8 <abort@plt>
   135b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   135b4:	mov	r5, r0
   135b8:	strd	r6, [sp, #8]
   135bc:	strd	r8, [sp, #16]
   135c0:	ldr	r9, [r0]
   135c4:	strd	sl, [sp, #24]
   135c8:	str	lr, [sp, #32]
   135cc:	sub	sp, sp, #68	; 0x44
   135d0:	str	r1, [sp, #32]
   135d4:	ldr	r0, [r9, #12]
   135d8:	cmp	r0, #0
   135dc:	str	r0, [sp, #40]	; 0x28
   135e0:	beq	13920 <__assert_fail@plt+0x231c>
   135e4:	bl	1155c <dirfd@plt>
   135e8:	cmp	r0, #0
   135ec:	str	r0, [sp, #60]	; 0x3c
   135f0:	blt	13e64 <__assert_fail@plt+0x2860>
   135f4:	ldr	r3, [r5, #44]	; 0x2c
   135f8:	cmp	r3, #0
   135fc:	beq	13d48 <__assert_fail@plt+0x2744>
   13600:	ldr	r3, [r5, #48]	; 0x30
   13604:	mvn	r2, #0
   13608:	str	r2, [sp, #16]
   1360c:	mov	r2, #1
   13610:	str	r2, [sp, #52]	; 0x34
   13614:	ldr	r2, [r9, #28]
   13618:	ldr	r1, [r9, #40]	; 0x28
   1361c:	sub	r0, r1, #1
   13620:	str	r1, [sp]
   13624:	ldrb	r2, [r2, r0]
   13628:	str	r0, [sp, #28]
   1362c:	cmp	r2, #47	; 0x2f
   13630:	beq	13640 <__assert_fail@plt+0x203c>
   13634:	add	r2, r1, #1
   13638:	str	r2, [sp]
   1363c:	str	r1, [sp, #28]
   13640:	ands	r3, r3, #4
   13644:	streq	r3, [sp, #20]
   13648:	beq	13668 <__assert_fail@plt+0x2064>
   1364c:	ldr	r3, [r5, #24]
   13650:	mov	r1, #47	; 0x2f
   13654:	ldr	r0, [sp, #28]
   13658:	add	r2, r3, r0
   1365c:	strb	r1, [r3, r0]
   13660:	add	r3, r2, #1
   13664:	str	r3, [sp, #20]
   13668:	mov	sl, #0
   1366c:	movw	r3, #6548	; 0x1994
   13670:	movt	r3, #258	; 0x102
   13674:	mov	r2, sl
   13678:	ldr	fp, [r5, #36]	; 0x24
   1367c:	mov	r7, sl
   13680:	stmib	sp, {r2, r9}
   13684:	movw	r2, #19778	; 0x4d42
   13688:	movt	r2, #65363	; 0xff53
   1368c:	str	sl, [sp, #24]
   13690:	str	r3, [sp, #44]	; 0x2c
   13694:	ldr	r3, [r9, #48]	; 0x30
   13698:	str	sl, [sp, #36]	; 0x24
   1369c:	str	r2, [sp, #48]	; 0x30
   136a0:	ldr	r2, [sp]
   136a4:	add	r3, r3, #1
   136a8:	str	r3, [sp, #12]
   136ac:	sub	fp, fp, r2
   136b0:	b	136c8 <__assert_fail@plt+0x20c4>
   136b4:	ldr	r3, [sp, #16]
   136b8:	add	r7, r7, #1
   136bc:	cmp	r7, r3
   136c0:	bcs	13a80 <__assert_fail@plt+0x247c>
   136c4:	mov	sl, r4
   136c8:	ldr	r3, [sp, #8]
   136cc:	ldr	r4, [r3, #12]
   136d0:	cmp	r4, #0
   136d4:	beq	13c08 <__assert_fail@plt+0x2604>
   136d8:	bl	11484 <__errno_location@plt>
   136dc:	mov	r8, r0
   136e0:	mov	r3, #0
   136e4:	mov	r0, r4
   136e8:	str	r3, [r8]
   136ec:	bl	11544 <readdir64@plt>
   136f0:	subs	r9, r0, #0
   136f4:	beq	13cd8 <__assert_fail@plt+0x26d4>
   136f8:	ldr	r3, [r5, #48]	; 0x30
   136fc:	tst	r3, #32
   13700:	bne	13710 <__assert_fail@plt+0x210c>
   13704:	ldrb	r3, [r9, #19]
   13708:	cmp	r3, #46	; 0x2e
   1370c:	beq	138a4 <__assert_fail@plt+0x22a0>
   13710:	add	r4, r9, #19
   13714:	mov	r0, r4
   13718:	bl	11460 <strlen@plt>
   1371c:	mov	r2, r0
   13720:	mov	r1, r4
   13724:	mov	r6, r0
   13728:	mov	r0, r5
   1372c:	bl	12c18 <__assert_fail@plt+0x1614>
   13730:	subs	r4, r0, #0
   13734:	beq	13b38 <__assert_fail@plt+0x2534>
   13738:	cmp	fp, r6
   1373c:	bls	13804 <__assert_fail@plt+0x2200>
   13740:	ldr	r3, [sp]
   13744:	adds	r6, r6, r3
   13748:	bcs	13f38 <__assert_fail@plt+0x2934>
   1374c:	ldr	r3, [sp, #12]
   13750:	add	r1, r4, #168	; 0xa8
   13754:	ldr	ip, [r5]
   13758:	ldr	r0, [r5, #48]	; 0x30
   1375c:	str	r6, [r4, #40]	; 0x28
   13760:	str	r3, [r4, #48]	; 0x30
   13764:	ldrd	r2, [r9]
   13768:	str	ip, [r4, #4]
   1376c:	tst	r0, #4
   13770:	streq	r1, [r4, #24]
   13774:	strd	r2, [r4, #160]	; 0xa0
   13778:	bne	13884 <__assert_fail@plt+0x2280>
   1377c:	ldr	r3, [r5, #44]	; 0x2c
   13780:	cmp	r3, #0
   13784:	beq	13790 <__assert_fail@plt+0x218c>
   13788:	ands	r3, r0, #1024	; 0x400
   1378c:	beq	138c4 <__assert_fail@plt+0x22c0>
   13790:	ldrb	r3, [r9, #18]
   13794:	tst	r0, #8
   13798:	sub	r2, r3, #1
   1379c:	beq	137a8 <__assert_fail@plt+0x21a4>
   137a0:	tst	r3, #251	; 0xfb
   137a4:	bne	138dc <__assert_fail@plt+0x22d8>
   137a8:	mov	r3, #11
   137ac:	cmp	r2, r3
   137b0:	strh	r3, [r4, #56]	; 0x38
   137b4:	bls	13868 <__assert_fail@plt+0x2264>
   137b8:	mov	r1, #0
   137bc:	mov	r2, #2
   137c0:	mov	r3, #0
   137c4:	str	r1, [r4, #80]	; 0x50
   137c8:	strd	r2, [r4, #112]	; 0x70
   137cc:	ldr	r2, [sp, #4]
   137d0:	mov	r3, #0
   137d4:	str	r3, [r4, #8]
   137d8:	cmp	r2, r3
   137dc:	movw	r3, #10000	; 0x2710
   137e0:	strne	r4, [sl, #8]
   137e4:	streq	r4, [sp, #4]
   137e8:	cmp	r7, r3
   137ec:	bne	136b4 <__assert_fail@plt+0x20b0>
   137f0:	ldr	r6, [r5, #44]	; 0x2c
   137f4:	cmp	r6, #0
   137f8:	beq	13a34 <__assert_fail@plt+0x2430>
   137fc:	movw	r7, #10001	; 0x2711
   13800:	b	136c4 <__assert_fail@plt+0x20c0>
   13804:	ldr	r3, [sp, #28]
   13808:	add	r1, r5, #36	; 0x24
   1380c:	add	r0, r5, #24
   13810:	ldr	fp, [r5, #24]
   13814:	add	r2, r3, #2
   13818:	add	r2, r2, r6
   1381c:	bl	130a4 <__assert_fail@plt+0x1aa0>
   13820:	cmp	r0, #0
   13824:	beq	13b38 <__assert_fail@plt+0x2534>
   13828:	ldr	r3, [r5, #24]
   1382c:	cmp	r3, fp
   13830:	beq	13918 <__assert_fail@plt+0x2314>
   13834:	ldr	r2, [r5, #48]	; 0x30
   13838:	tst	r2, #4
   1383c:	beq	1384c <__assert_fail@plt+0x2248>
   13840:	ldr	r2, [sp]
   13844:	add	r3, r3, r2
   13848:	str	r3, [sp, #20]
   1384c:	ldr	r3, [sp]
   13850:	str	r0, [sp, #24]
   13854:	ldr	fp, [r5, #36]	; 0x24
   13858:	sub	fp, fp, r3
   1385c:	b	13740 <__assert_fail@plt+0x213c>
   13860:	mov	r3, #11
   13864:	strh	r3, [r4, #56]	; 0x38
   13868:	movw	r3, #46632	; 0xb628
   1386c:	movt	r3, #1
   13870:	ldr	r1, [r3, r2, lsl #2]
   13874:	mov	r2, #2
   13878:	mov	r3, #0
   1387c:	str	r1, [r4, #80]	; 0x50
   13880:	b	137c8 <__assert_fail@plt+0x21c4>
   13884:	ldr	r3, [r4, #28]
   13888:	ldr	r2, [r4, #52]	; 0x34
   1388c:	ldr	r0, [sp, #20]
   13890:	str	r3, [r4, #24]
   13894:	add	r2, r2, #1
   13898:	bl	1128c <memmove@plt>
   1389c:	ldr	r0, [r5, #48]	; 0x30
   138a0:	b	1377c <__assert_fail@plt+0x2178>
   138a4:	ldrb	r3, [r9, #20]
   138a8:	cmp	r3, #0
   138ac:	beq	138bc <__assert_fail@plt+0x22b8>
   138b0:	ldrh	r3, [r9, #20]
   138b4:	cmp	r3, #46	; 0x2e
   138b8:	bne	13710 <__assert_fail@plt+0x210c>
   138bc:	mov	r4, sl
   138c0:	b	136c4 <__assert_fail@plt+0x20c0>
   138c4:	mov	r1, r0
   138c8:	mov	r2, r4
   138cc:	ldr	r0, [r5, #32]
   138d0:	bl	12f48 <__assert_fail@plt+0x1944>
   138d4:	strh	r0, [r4, #56]	; 0x38
   138d8:	b	137cc <__assert_fail@plt+0x21c8>
   138dc:	ubfx	r0, r0, #4, #1
   138e0:	cmp	r3, #10
   138e4:	moveq	r3, r0
   138e8:	orrne	r3, r0, #1
   138ec:	cmp	r3, #0
   138f0:	beq	13860 <__assert_fail@plt+0x225c>
   138f4:	mov	r3, #11
   138f8:	cmp	r2, r3
   138fc:	strh	r3, [r4, #56]	; 0x38
   13900:	bls	13b1c <__assert_fail@plt+0x2518>
   13904:	mov	r1, #0
   13908:	mov	r2, #1
   1390c:	mov	r3, #0
   13910:	str	r1, [r4, #80]	; 0x50
   13914:	b	137c8 <__assert_fail@plt+0x21c4>
   13918:	ldr	r0, [sp, #24]
   1391c:	b	1384c <__assert_fail@plt+0x2248>
   13920:	ldr	r3, [r5, #48]	; 0x30
   13924:	ldr	r1, [r9, #24]
   13928:	and	r2, r3, #516	; 0x204
   1392c:	cmp	r2, #512	; 0x200
   13930:	ldreq	r0, [r5, #32]
   13934:	mvnne	r0, #99	; 0x63
   13938:	ands	r2, r3, #16
   1393c:	beq	1394c <__assert_fail@plt+0x2348>
   13940:	tst	r3, #1
   13944:	moveq	r2, #32768	; 0x8000
   13948:	bne	13b9c <__assert_fail@plt+0x2598>
   1394c:	add	r3, sp, #60	; 0x3c
   13950:	bl	15fb0 <__assert_fail@plt+0x49ac>
   13954:	cmp	r0, #0
   13958:	str	r0, [sp, #4]
   1395c:	str	r0, [r9, #12]
   13960:	beq	13eac <__assert_fail@plt+0x28a8>
   13964:	ldrh	r3, [r9, #56]	; 0x38
   13968:	ldr	r0, [r5, #48]	; 0x30
   1396c:	cmp	r3, #11
   13970:	beq	13df8 <__assert_fail@plt+0x27f4>
   13974:	tst	r0, #256	; 0x100
   13978:	bne	13d74 <__assert_fail@plt+0x2770>
   1397c:	ldr	r2, [r5, #44]	; 0x2c
   13980:	movw	r3, #34464	; 0x86a0
   13984:	movt	r3, #1
   13988:	cmp	r2, #0
   1398c:	mvnne	r3, #0
   13990:	str	r3, [sp, #16]
   13994:	ldr	r3, [sp, #32]
   13998:	cmp	r3, #2
   1399c:	beq	13d64 <__assert_fail@plt+0x2760>
   139a0:	ldr	r3, [r5, #48]	; 0x30
   139a4:	ldr	r0, [sp, #60]	; 0x3c
   139a8:	and	r3, r3, #56	; 0x38
   139ac:	cmp	r3, #24
   139b0:	beq	13bac <__assert_fail@plt+0x25a8>
   139b4:	ldr	r3, [sp, #32]
   139b8:	mov	r4, #1
   139bc:	sub	r6, r3, #3
   139c0:	clz	r6, r6
   139c4:	lsr	r6, r6, #5
   139c8:	ldr	r3, [r5, #48]	; 0x30
   139cc:	tst	r3, #512	; 0x200
   139d0:	bne	13e98 <__assert_fail@plt+0x2894>
   139d4:	cmp	r0, #0
   139d8:	bge	13e38 <__assert_fail@plt+0x2834>
   139dc:	tst	r6, r4
   139e0:	beq	139f0 <__assert_fail@plt+0x23ec>
   139e4:	bl	11484 <__errno_location@plt>
   139e8:	ldr	r3, [r0]
   139ec:	str	r3, [r9, #32]
   139f0:	ldrh	r3, [r9, #58]	; 0x3a
   139f4:	ldr	r0, [r9, #12]
   139f8:	orr	r3, r3, #1
   139fc:	strh	r3, [r9, #58]	; 0x3a
   13a00:	bl	115ec <closedir@plt>
   13a04:	ldr	r3, [r5, #48]	; 0x30
   13a08:	mov	r2, #0
   13a0c:	str	r2, [r9, #12]
   13a10:	tst	r3, #512	; 0x200
   13a14:	beq	13a24 <__assert_fail@plt+0x2420>
   13a18:	ldr	r0, [sp, #60]	; 0x3c
   13a1c:	cmp	r0, r2
   13a20:	bge	13e8c <__assert_fail@plt+0x2888>
   13a24:	mov	r2, #0
   13a28:	str	r2, [r9, #12]
   13a2c:	str	r2, [sp, #52]	; 0x34
   13a30:	b	13614 <__assert_fail@plt+0x2010>
   13a34:	ldr	r0, [sp, #8]
   13a38:	ldr	r1, [sp, #60]	; 0x3c
   13a3c:	bl	12d34 <__assert_fail@plt+0x1730>
   13a40:	movw	r3, #26985	; 0x6969
   13a44:	cmp	r0, r3
   13a48:	beq	13a6c <__assert_fail@plt+0x2468>
   13a4c:	ldr	r3, [sp, #44]	; 0x2c
   13a50:	cmp	r0, r3
   13a54:	beq	13a6c <__assert_fail@plt+0x2468>
   13a58:	ldr	r3, [sp, #48]	; 0x30
   13a5c:	cmp	r0, r3
   13a60:	movne	r3, #1
   13a64:	strne	r3, [sp, #36]	; 0x24
   13a68:	bne	137fc <__assert_fail@plt+0x21f8>
   13a6c:	ldr	r3, [sp, #16]
   13a70:	add	r7, r7, #1
   13a74:	str	r6, [sp, #36]	; 0x24
   13a78:	cmp	r7, r3
   13a7c:	bcc	136c4 <__assert_fail@plt+0x20c0>
   13a80:	ldr	r9, [sp, #8]
   13a84:	ldr	r3, [sp, #24]
   13a88:	cmp	r3, #0
   13a8c:	beq	13c18 <__assert_fail@plt+0x2614>
   13a90:	ldr	r3, [r5, #4]
   13a94:	ldr	r1, [r5, #24]
   13a98:	cmp	r3, #0
   13a9c:	beq	13ad0 <__assert_fail@plt+0x24cc>
   13aa0:	ldr	r2, [r3, #24]
   13aa4:	add	r0, r3, #168	; 0xa8
   13aa8:	cmp	r2, r0
   13aac:	beq	13ac0 <__assert_fail@plt+0x24bc>
   13ab0:	ldr	r0, [r3, #28]
   13ab4:	sub	r2, r2, r0
   13ab8:	add	r2, r1, r2
   13abc:	str	r2, [r3, #24]
   13ac0:	str	r1, [r3, #28]
   13ac4:	ldr	r3, [r3, #8]
   13ac8:	cmp	r3, #0
   13acc:	bne	13aa0 <__assert_fail@plt+0x249c>
   13ad0:	ldr	r3, [sp, #4]
   13ad4:	b	13b08 <__assert_fail@plt+0x2504>
   13ad8:	ldr	r2, [r3, #24]
   13adc:	cmp	r2, r0
   13ae0:	beq	13af4 <__assert_fail@plt+0x24f0>
   13ae4:	ldr	r0, [r3, #28]
   13ae8:	sub	r2, r2, r0
   13aec:	add	r2, r1, r2
   13af0:	str	r2, [r3, #24]
   13af4:	ldr	r2, [r3, #8]
   13af8:	str	r1, [r3, #28]
   13afc:	cmp	r2, #0
   13b00:	ldreq	r2, [r3, #4]
   13b04:	mov	r3, r2
   13b08:	ldr	r2, [r3, #48]	; 0x30
   13b0c:	add	r0, r3, #168	; 0xa8
   13b10:	cmp	r2, #0
   13b14:	bge	13ad8 <__assert_fail@plt+0x24d4>
   13b18:	b	13c18 <__assert_fail@plt+0x2614>
   13b1c:	movw	r3, #46632	; 0xb628
   13b20:	movt	r3, #1
   13b24:	ldr	r1, [r3, r2, lsl #2]
   13b28:	mov	r2, #1
   13b2c:	mov	r3, #0
   13b30:	str	r1, [r4, #80]	; 0x50
   13b34:	b	137c8 <__assert_fail@plt+0x21c4>
   13b38:	ldr	r9, [sp, #8]
   13b3c:	mov	r0, r4
   13b40:	ldr	r4, [r8]
   13b44:	bl	19e14 <__assert_fail@plt+0x8810>
   13b48:	ldr	r0, [sp, #4]
   13b4c:	bl	12ca8 <__assert_fail@plt+0x16a4>
   13b50:	ldr	r0, [r9, #12]
   13b54:	bl	115ec <closedir@plt>
   13b58:	ldr	r3, [r5, #48]	; 0x30
   13b5c:	mov	r2, #0
   13b60:	mov	r1, #7
   13b64:	str	r2, [sp, #4]
   13b68:	str	r2, [r9, #12]
   13b6c:	strh	r1, [r9, #56]	; 0x38
   13b70:	orr	r3, r3, #8192	; 0x2000
   13b74:	str	r3, [r5, #48]	; 0x30
   13b78:	str	r4, [r8]
   13b7c:	ldr	r0, [sp, #4]
   13b80:	add	sp, sp, #68	; 0x44
   13b84:	ldrd	r4, [sp]
   13b88:	ldrd	r6, [sp, #8]
   13b8c:	ldrd	r8, [sp, #16]
   13b90:	ldrd	sl, [sp, #24]
   13b94:	add	sp, sp, #32
   13b98:	pop	{pc}		; (ldr pc, [sp], #4)
   13b9c:	ldr	r2, [r9, #48]	; 0x30
   13ba0:	cmp	r2, #0
   13ba4:	movne	r2, #32768	; 0x8000
   13ba8:	b	1394c <__assert_fail@plt+0x2348>
   13bac:	ldr	r3, [r9, #84]	; 0x54
   13bb0:	cmp	r3, #2
   13bb4:	bne	139b4 <__assert_fail@plt+0x23b0>
   13bb8:	mov	r1, r0
   13bbc:	mov	r0, r9
   13bc0:	bl	12d34 <__assert_fail@plt+0x1730>
   13bc4:	movw	r3, #26985	; 0x6969
   13bc8:	cmp	r0, r3
   13bcc:	beq	13f30 <__assert_fail@plt+0x292c>
   13bd0:	bgt	13f14 <__assert_fail@plt+0x2910>
   13bd4:	movw	r3, #19778	; 0x4d42
   13bd8:	movt	r3, #65363	; 0xff53
   13bdc:	cmp	r0, r3
   13be0:	beq	13f30 <__assert_fail@plt+0x292c>
   13be4:	cmp	r0, #0
   13be8:	beq	13f30 <__assert_fail@plt+0x292c>
   13bec:	ldr	r3, [sp, #32]
   13bf0:	cmp	r3, #3
   13bf4:	bne	13d64 <__assert_fail@plt+0x2760>
   13bf8:	mov	r4, #0
   13bfc:	mov	r6, #1
   13c00:	ldr	r0, [sp, #60]	; 0x3c
   13c04:	b	139c8 <__assert_fail@plt+0x23c4>
   13c08:	mov	r9, r3
   13c0c:	ldr	r3, [sp, #24]
   13c10:	cmp	r3, #0
   13c14:	bne	13a90 <__assert_fail@plt+0x248c>
   13c18:	ldr	r3, [r5, #48]	; 0x30
   13c1c:	tst	r3, #4
   13c20:	beq	13c50 <__assert_fail@plt+0x264c>
   13c24:	ldr	r2, [sp]
   13c28:	ldr	r3, [r5, #36]	; 0x24
   13c2c:	cmp	r7, #0
   13c30:	cmpne	r3, r2
   13c34:	bne	13c44 <__assert_fail@plt+0x2640>
   13c38:	ldr	r3, [sp, #20]
   13c3c:	sub	r3, r3, #1
   13c40:	str	r3, [sp, #20]
   13c44:	ldr	r2, [sp, #20]
   13c48:	mov	r3, #0
   13c4c:	strb	r3, [r2]
   13c50:	ldr	r2, [sp, #40]	; 0x28
   13c54:	ldr	r3, [sp, #52]	; 0x34
   13c58:	cmp	r2, #0
   13c5c:	movne	r3, #0
   13c60:	cmp	r3, #0
   13c64:	beq	13c9c <__assert_fail@plt+0x2698>
   13c68:	ldr	r3, [sp, #32]
   13c6c:	cmp	r7, #0
   13c70:	cmpne	r3, #1
   13c74:	bne	13ca4 <__assert_fail@plt+0x26a0>
   13c78:	ldr	r3, [r9, #48]	; 0x30
   13c7c:	cmp	r3, #0
   13c80:	bne	13e14 <__assert_fail@plt+0x2810>
   13c84:	mov	r0, r5
   13c88:	bl	12ee4 <__assert_fail@plt+0x18e0>
   13c8c:	adds	r0, r0, #0
   13c90:	movne	r0, #1
   13c94:	cmp	r0, #0
   13c98:	bne	13eec <__assert_fail@plt+0x28e8>
   13c9c:	cmp	r7, #0
   13ca0:	beq	13dc4 <__assert_fail@plt+0x27c0>
   13ca4:	ldr	r3, [sp, #36]	; 0x24
   13ca8:	cmp	r3, #0
   13cac:	bne	13d1c <__assert_fail@plt+0x2718>
   13cb0:	ldr	r3, [r5, #44]	; 0x2c
   13cb4:	cmp	r3, #0
   13cb8:	cmpne	r7, #1
   13cbc:	beq	13b7c <__assert_fail@plt+0x2578>
   13cc0:	mov	r2, r7
   13cc4:	mov	r0, r5
   13cc8:	ldr	r1, [sp, #4]
   13ccc:	bl	12b24 <__assert_fail@plt+0x1520>
   13cd0:	str	r0, [sp, #4]
   13cd4:	b	13b7c <__assert_fail@plt+0x2578>
   13cd8:	ldr	r3, [r8]
   13cdc:	ldr	r9, [sp, #8]
   13ce0:	cmp	r3, #0
   13ce4:	beq	13d00 <__assert_fail@plt+0x26fc>
   13ce8:	ldr	r2, [sp, #40]	; 0x28
   13cec:	str	r3, [r9, #32]
   13cf0:	orrs	r2, r2, r7
   13cf4:	moveq	r3, #4
   13cf8:	movne	r3, #7
   13cfc:	strh	r3, [r9, #56]	; 0x38
   13d00:	ldr	r0, [r9, #12]
   13d04:	cmp	r0, #0
   13d08:	beq	13c0c <__assert_fail@plt+0x2608>
   13d0c:	bl	115ec <closedir@plt>
   13d10:	mov	r3, #0
   13d14:	str	r3, [r9, #12]
   13d18:	b	13c0c <__assert_fail@plt+0x2608>
   13d1c:	movw	r3, #10996	; 0x2af4
   13d20:	movt	r3, #1
   13d24:	ldr	r1, [sp, #4]
   13d28:	mov	r2, r7
   13d2c:	mov	r0, r5
   13d30:	str	r3, [r5, #44]	; 0x2c
   13d34:	bl	12b24 <__assert_fail@plt+0x1520>
   13d38:	mov	r3, #0
   13d3c:	str	r0, [sp, #4]
   13d40:	str	r3, [r5, #44]	; 0x2c
   13d44:	b	13b7c <__assert_fail@plt+0x2578>
   13d48:	movw	r3, #34464	; 0x86a0
   13d4c:	movt	r3, #1
   13d50:	mov	r2, #1
   13d54:	str	r3, [sp, #16]
   13d58:	str	r2, [sp, #52]	; 0x34
   13d5c:	ldr	r3, [r5, #48]	; 0x30
   13d60:	b	13614 <__assert_fail@plt+0x2010>
   13d64:	mov	r3, #0
   13d68:	str	r3, [sp, #52]	; 0x34
   13d6c:	ldr	r3, [r5, #48]	; 0x30
   13d70:	b	13614 <__assert_fail@plt+0x2010>
   13d74:	add	r4, r5, #56	; 0x38
   13d78:	mov	r2, r9
   13d7c:	mov	r1, r4
   13d80:	bl	134e4 <__assert_fail@plt+0x1ee0>
   13d84:	mov	r3, #0
   13d88:	mov	r2, r9
   13d8c:	ldr	r0, [r5, #32]
   13d90:	ldr	r1, [r5, #48]	; 0x30
   13d94:	bl	12f48 <__assert_fail@plt+0x1944>
   13d98:	mov	r1, r4
   13d9c:	mov	r2, r9
   13da0:	ldr	r0, [r5, #48]	; 0x30
   13da4:	bl	13410 <__assert_fail@plt+0x1e0c>
   13da8:	subs	r4, r0, #0
   13dac:	bne	1397c <__assert_fail@plt+0x2378>
   13db0:	bl	11484 <__errno_location@plt>
   13db4:	mov	r3, #12
   13db8:	str	r4, [sp, #4]
   13dbc:	str	r3, [r0]
   13dc0:	b	13b7c <__assert_fail@plt+0x2578>
   13dc4:	ldr	r3, [sp, #32]
   13dc8:	cmp	r3, #3
   13dcc:	bne	13de4 <__assert_fail@plt+0x27e0>
   13dd0:	ldrh	r3, [r9, #56]	; 0x38
   13dd4:	cmp	r3, #7
   13dd8:	cmpne	r3, #4
   13ddc:	movne	r3, #6
   13de0:	strhne	r3, [r9, #56]	; 0x38
   13de4:	mov	r3, #0
   13de8:	ldr	r0, [sp, #4]
   13dec:	str	r3, [sp, #4]
   13df0:	bl	12ca8 <__assert_fail@plt+0x16a4>
   13df4:	b	13b7c <__assert_fail@plt+0x2578>
   13df8:	mov	r1, r0
   13dfc:	mov	r3, #0
   13e00:	ldr	r0, [r5, #32]
   13e04:	mov	r2, r9
   13e08:	bl	12f48 <__assert_fail@plt+0x1944>
   13e0c:	strh	r0, [r9, #56]	; 0x38
   13e10:	b	1397c <__assert_fail@plt+0x2378>
   13e14:	movw	r3, #46680	; 0xb658
   13e18:	movt	r3, #1
   13e1c:	ldr	r1, [r9, #4]
   13e20:	mvn	r2, #0
   13e24:	mov	r0, r5
   13e28:	bl	131f4 <__assert_fail@plt+0x1bf0>
   13e2c:	adds	r0, r0, #0
   13e30:	movne	r0, #1
   13e34:	b	13c94 <__assert_fail@plt+0x2690>
   13e38:	mov	r2, r0
   13e3c:	mov	r3, #0
   13e40:	mov	r1, r9
   13e44:	mov	r0, r5
   13e48:	bl	131f4 <__assert_fail@plt+0x1bf0>
   13e4c:	cmp	r0, #0
   13e50:	bne	139dc <__assert_fail@plt+0x23d8>
   13e54:	mov	r3, #1
   13e58:	str	r3, [sp, #52]	; 0x34
   13e5c:	ldr	r3, [r5, #48]	; 0x30
   13e60:	b	13614 <__assert_fail@plt+0x2010>
   13e64:	ldr	r0, [r9, #12]
   13e68:	mov	r4, #0
   13e6c:	bl	115ec <closedir@plt>
   13e70:	ldr	r3, [sp, #32]
   13e74:	str	r4, [r9, #12]
   13e78:	cmp	r3, #3
   13e7c:	beq	13ed0 <__assert_fail@plt+0x28cc>
   13e80:	mov	r3, #0
   13e84:	str	r3, [sp, #4]
   13e88:	b	13b7c <__assert_fail@plt+0x2578>
   13e8c:	bl	115d4 <close@plt>
   13e90:	ldr	r3, [r5, #48]	; 0x30
   13e94:	b	13a24 <__assert_fail@plt+0x2420>
   13e98:	mov	r2, #3
   13e9c:	movw	r1, #1030	; 0x406
   13ea0:	bl	19b8c <__assert_fail@plt+0x8588>
   13ea4:	str	r0, [sp, #60]	; 0x3c
   13ea8:	b	139d4 <__assert_fail@plt+0x23d0>
   13eac:	ldr	r3, [sp, #32]
   13eb0:	cmp	r3, #3
   13eb4:	bne	13e80 <__assert_fail@plt+0x287c>
   13eb8:	mov	r3, #4
   13ebc:	strh	r3, [r9, #56]	; 0x38
   13ec0:	bl	11484 <__errno_location@plt>
   13ec4:	ldr	r3, [r0]
   13ec8:	str	r3, [r9, #32]
   13ecc:	b	13b7c <__assert_fail@plt+0x2578>
   13ed0:	mov	r3, #4
   13ed4:	str	r4, [sp, #4]
   13ed8:	strh	r3, [r9, #56]	; 0x38
   13edc:	bl	11484 <__errno_location@plt>
   13ee0:	ldr	r3, [r0]
   13ee4:	str	r3, [r9, #32]
   13ee8:	b	13b7c <__assert_fail@plt+0x2578>
   13eec:	ldr	r3, [r5, #48]	; 0x30
   13ef0:	mov	r2, #7
   13ef4:	mov	r1, #0
   13ef8:	strh	r2, [r9, #56]	; 0x38
   13efc:	ldr	r0, [sp, #4]
   13f00:	str	r1, [sp, #4]
   13f04:	orr	r3, r3, #8192	; 0x2000
   13f08:	str	r3, [r5, #48]	; 0x30
   13f0c:	bl	12ca8 <__assert_fail@plt+0x16a4>
   13f10:	b	13b7c <__assert_fail@plt+0x2578>
   13f14:	movw	r3, #40864	; 0x9fa0
   13f18:	cmp	r0, r3
   13f1c:	beq	13f30 <__assert_fail@plt+0x292c>
   13f20:	movw	r3, #16719	; 0x414f
   13f24:	movt	r3, #21318	; 0x5346
   13f28:	cmp	r0, r3
   13f2c:	bne	13bec <__assert_fail@plt+0x25e8>
   13f30:	ldr	r0, [sp, #60]	; 0x3c
   13f34:	b	139b4 <__assert_fail@plt+0x23b0>
   13f38:	ldr	r9, [sp, #8]
   13f3c:	mov	r0, r4
   13f40:	bl	19e14 <__assert_fail@plt+0x8810>
   13f44:	ldr	r0, [sp, #4]
   13f48:	bl	12ca8 <__assert_fail@plt+0x16a4>
   13f4c:	ldr	r0, [r9, #12]
   13f50:	bl	115ec <closedir@plt>
   13f54:	ldr	r3, [r5, #48]	; 0x30
   13f58:	mov	r2, #0
   13f5c:	mov	r0, #7
   13f60:	mov	r1, #36	; 0x24
   13f64:	str	r2, [sp, #4]
   13f68:	str	r2, [r9, #12]
   13f6c:	strh	r0, [r9, #56]	; 0x38
   13f70:	orr	r3, r3, #8192	; 0x2000
   13f74:	str	r3, [r5, #48]	; 0x30
   13f78:	str	r1, [r8]
   13f7c:	b	13b7c <__assert_fail@plt+0x2578>
   13f80:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13f84:	bic	r5, r1, #4080	; 0xff0
   13f88:	bic	r5, r5, #15
   13f8c:	strd	r6, [sp, #8]
   13f90:	cmp	r5, #0
   13f94:	strd	r8, [sp, #16]
   13f98:	strd	sl, [sp, #24]
   13f9c:	str	lr, [sp, #32]
   13fa0:	sub	sp, sp, #12
   13fa4:	bne	142c0 <__assert_fail@plt+0x2cbc>
   13fa8:	and	r3, r1, #516	; 0x204
   13fac:	mov	r7, r1
   13fb0:	cmp	r3, #516	; 0x204
   13fb4:	beq	1425c <__assert_fail@plt+0x2c58>
   13fb8:	ands	r5, r1, #18
   13fbc:	beq	1425c <__assert_fail@plt+0x2c58>
   13fc0:	mov	r6, r0
   13fc4:	mov	r1, #96	; 0x60
   13fc8:	mov	r0, #1
   13fcc:	mov	r9, r2
   13fd0:	bl	196fc <__assert_fail@plt+0x80f8>
   13fd4:	subs	r5, r0, #0
   13fd8:	beq	14214 <__assert_fail@plt+0x2c10>
   13fdc:	tst	r7, #2
   13fe0:	mvn	r2, #99	; 0x63
   13fe4:	bicne	r3, r7, #512	; 0x200
   13fe8:	orrne	r3, r3, #4
   13fec:	streq	r7, [r5, #48]	; 0x30
   13ff0:	str	r2, [r5, #32]
   13ff4:	strne	r3, [r5, #48]	; 0x30
   13ff8:	ldr	r3, [r6]
   13ffc:	str	r9, [r5, #44]	; 0x2c
   14000:	cmp	r3, #0
   14004:	beq	142d4 <__assert_fail@plt+0x2cd0>
   14008:	mov	r8, r6
   1400c:	mov	r4, #0
   14010:	mov	r0, r3
   14014:	bl	11460 <strlen@plt>
   14018:	ldr	r3, [r8, #4]!
   1401c:	cmp	r4, r0
   14020:	movcc	r4, r0
   14024:	cmp	r3, #0
   14028:	bne	14010 <__assert_fail@plt+0x2a0c>
   1402c:	add	r2, r4, #1
   14030:	cmp	r2, #4096	; 0x1000
   14034:	movcc	r2, #4096	; 0x1000
   14038:	add	r1, r5, #36	; 0x24
   1403c:	add	r0, r5, #24
   14040:	bl	130a4 <__assert_fail@plt+0x1aa0>
   14044:	subs	fp, r0, #0
   14048:	beq	1424c <__assert_fail@plt+0x2c48>
   1404c:	ldr	sl, [r6]
   14050:	cmp	sl, #0
   14054:	beq	142b0 <__assert_fail@plt+0x2cac>
   14058:	movw	r1, #45028	; 0xafe4
   1405c:	movt	r1, #1
   14060:	mov	r2, #0
   14064:	mov	r0, r5
   14068:	bl	12c18 <__assert_fail@plt+0x1614>
   1406c:	subs	sl, r0, #0
   14070:	beq	14244 <__assert_fail@plt+0x2c40>
   14074:	mvn	r3, #0
   14078:	cmp	r9, #0
   1407c:	ldr	r4, [r6]
   14080:	str	r3, [sl, #48]	; 0x30
   14084:	beq	14090 <__assert_fail@plt+0x2a8c>
   14088:	ldr	fp, [r5, #48]	; 0x30
   1408c:	ubfx	fp, fp, #10, #1
   14090:	cmp	r4, #0
   14094:	beq	14310 <__assert_fail@plt+0x2d0c>
   14098:	eor	r7, r7, #2048	; 0x800
   1409c:	mov	r3, #0
   140a0:	ubfx	r2, r7, #11, #1
   140a4:	mov	r8, r3
   140a8:	mov	r7, r3
   140ac:	strd	r2, [sp]
   140b0:	b	140e8 <__assert_fail@plt+0x2ae4>
   140b4:	mov	r3, #11
   140b8:	mov	r2, #2
   140bc:	cmp	r9, r1
   140c0:	strh	r3, [r4, #56]	; 0x38
   140c4:	mov	r3, #0
   140c8:	strd	r2, [r4, #112]	; 0x70
   140cc:	beq	1429c <__assert_fail@plt+0x2c98>
   140d0:	str	r7, [r4, #8]
   140d4:	mov	r7, r4
   140d8:	ldr	r4, [r6, #4]!
   140dc:	add	r8, r8, #1
   140e0:	cmp	r4, #0
   140e4:	beq	14194 <__assert_fail@plt+0x2b90>
   140e8:	mov	r0, r4
   140ec:	bl	11460 <strlen@plt>
   140f0:	ldr	r3, [sp]
   140f4:	mov	r2, r0
   140f8:	cmp	r0, #2
   140fc:	movls	r3, #0
   14100:	andhi	r3, r3, #1
   14104:	cmp	r3, #0
   14108:	bne	1426c <__assert_fail@plt+0x2c68>
   1410c:	mov	r1, r4
   14110:	mov	r0, r5
   14114:	bl	12c18 <__assert_fail@plt+0x1614>
   14118:	subs	r4, r0, #0
   1411c:	beq	14234 <__assert_fail@plt+0x2c30>
   14120:	add	r2, r4, #168	; 0xa8
   14124:	cmp	r7, #0
   14128:	moveq	r3, #0
   1412c:	andne	r3, fp, #1
   14130:	str	sl, [r4, #4]
   14134:	mov	r1, #0
   14138:	cmp	r3, #0
   1413c:	str	r2, [r4, #24]
   14140:	str	r1, [r4, #48]	; 0x30
   14144:	bne	140b4 <__assert_fail@plt+0x2ab0>
   14148:	mov	r2, r4
   1414c:	ldr	r0, [r5, #32]
   14150:	ldr	r1, [r5, #48]	; 0x30
   14154:	bl	12f48 <__assert_fail@plt+0x1944>
   14158:	cmp	r9, #0
   1415c:	strh	r0, [r4, #56]	; 0x38
   14160:	bne	140d0 <__assert_fail@plt+0x2acc>
   14164:	cmp	r7, #0
   14168:	str	r9, [r4, #8]
   1416c:	moveq	r7, r4
   14170:	streq	r4, [sp, #4]
   14174:	beq	140d8 <__assert_fail@plt+0x2ad4>
   14178:	ldr	r3, [sp, #4]
   1417c:	str	r4, [sp, #4]
   14180:	str	r4, [r3, #8]
   14184:	ldr	r4, [r6, #4]!
   14188:	add	r8, r8, #1
   1418c:	cmp	r4, #0
   14190:	bne	140e8 <__assert_fail@plt+0x2ae4>
   14194:	cmp	r9, #0
   14198:	cmpne	r8, #1
   1419c:	bls	141b4 <__assert_fail@plt+0x2bb0>
   141a0:	mov	r1, r7
   141a4:	mov	r2, r8
   141a8:	mov	r0, r5
   141ac:	bl	12b24 <__assert_fail@plt+0x1520>
   141b0:	mov	r7, r0
   141b4:	movw	r1, #45028	; 0xafe4
   141b8:	movt	r1, #1
   141bc:	mov	r2, #0
   141c0:	mov	r0, r5
   141c4:	bl	12c18 <__assert_fail@plt+0x1614>
   141c8:	cmp	r0, #0
   141cc:	str	r0, [r5]
   141d0:	beq	14234 <__assert_fail@plt+0x2c30>
   141d4:	mov	r2, #1
   141d8:	mov	r3, #9
   141dc:	str	r7, [r0, #8]
   141e0:	add	r1, r5, #56	; 0x38
   141e4:	str	r2, [r0, #48]	; 0x30
   141e8:	strh	r3, [r0, #56]	; 0x38
   141ec:	ldr	r0, [r5, #48]	; 0x30
   141f0:	bl	13134 <__assert_fail@plt+0x1b30>
   141f4:	cmp	r0, #0
   141f8:	beq	14234 <__assert_fail@plt+0x2c30>
   141fc:	ldr	r1, [r5, #48]	; 0x30
   14200:	tst	r1, #516	; 0x204
   14204:	beq	142dc <__assert_fail@plt+0x2cd8>
   14208:	mvn	r1, #0
   1420c:	add	r0, r5, #60	; 0x3c
   14210:	bl	15ea4 <__assert_fail@plt+0x48a0>
   14214:	mov	r0, r5
   14218:	add	sp, sp, #12
   1421c:	ldrd	r4, [sp]
   14220:	ldrd	r6, [sp, #8]
   14224:	ldrd	r8, [sp, #16]
   14228:	ldrd	sl, [sp, #24]
   1422c:	add	sp, sp, #32
   14230:	pop	{pc}		; (ldr pc, [sp], #4)
   14234:	mov	r0, r7
   14238:	bl	12ca8 <__assert_fail@plt+0x16a4>
   1423c:	mov	r0, sl
   14240:	bl	19e14 <__assert_fail@plt+0x8810>
   14244:	ldr	r0, [r5, #24]
   14248:	bl	19e14 <__assert_fail@plt+0x8810>
   1424c:	mov	r0, r5
   14250:	mov	r5, #0
   14254:	bl	19e14 <__assert_fail@plt+0x8810>
   14258:	b	14214 <__assert_fail@plt+0x2c10>
   1425c:	bl	11484 <__errno_location@plt>
   14260:	mov	r3, #22
   14264:	str	r3, [r0]
   14268:	b	14214 <__assert_fail@plt+0x2c10>
   1426c:	sub	r3, r0, #1
   14270:	ldrb	r1, [r4, r3]
   14274:	add	r3, r4, r3
   14278:	cmp	r1, #47	; 0x2f
   1427c:	bne	1410c <__assert_fail@plt+0x2b08>
   14280:	ldrb	r1, [r3, #-1]!
   14284:	cmp	r1, #47	; 0x2f
   14288:	bne	1410c <__assert_fail@plt+0x2b08>
   1428c:	sub	r2, r2, #1
   14290:	cmp	r2, #1
   14294:	bne	14280 <__assert_fail@plt+0x2c7c>
   14298:	b	1410c <__assert_fail@plt+0x2b08>
   1429c:	ldr	r3, [sp, #4]
   142a0:	str	r4, [sp, #4]
   142a4:	str	r9, [r4, #8]
   142a8:	str	r4, [r3, #8]
   142ac:	b	14184 <__assert_fail@plt+0x2b80>
   142b0:	cmp	r9, #0
   142b4:	beq	14308 <__assert_fail@plt+0x2d04>
   142b8:	mov	r4, sl
   142bc:	b	14088 <__assert_fail@plt+0x2a84>
   142c0:	bl	11484 <__errno_location@plt>
   142c4:	mov	r3, #22
   142c8:	mov	r5, #0
   142cc:	str	r3, [r0]
   142d0:	b	14214 <__assert_fail@plt+0x2c10>
   142d4:	mov	r2, #4096	; 0x1000
   142d8:	b	14038 <__assert_fail@plt+0x2a34>
   142dc:	movw	r2, #46684	; 0xb65c
   142e0:	movt	r2, #1
   142e4:	ldr	r0, [r5, #32]
   142e8:	bl	131c4 <__assert_fail@plt+0x1bc0>
   142ec:	cmp	r0, #0
   142f0:	str	r0, [r5, #28]
   142f4:	bge	14208 <__assert_fail@plt+0x2c04>
   142f8:	ldr	r3, [r5, #48]	; 0x30
   142fc:	orr	r3, r3, #4
   14300:	str	r3, [r5, #48]	; 0x30
   14304:	b	14208 <__assert_fail@plt+0x2c04>
   14308:	mov	r7, sl
   1430c:	b	141b4 <__assert_fail@plt+0x2bb0>
   14310:	mov	r7, r4
   14314:	b	141b4 <__assert_fail@plt+0x2bb0>
   14318:	ldr	r3, [r0]
   1431c:	strd	r4, [sp, #-16]!
   14320:	mov	r5, r0
   14324:	str	r6, [sp, #8]
   14328:	str	lr, [sp, #12]
   1432c:	cmp	r3, #0
   14330:	beq	1436c <__assert_fail@plt+0x2d68>
   14334:	ldr	r2, [r3, #48]	; 0x30
   14338:	cmp	r2, #0
   1433c:	blt	1448c <__assert_fail@plt+0x2e88>
   14340:	ldr	r4, [r3, #8]
   14344:	mov	r0, r3
   14348:	cmp	r4, #0
   1434c:	ldreq	r4, [r3, #4]
   14350:	bl	19e14 <__assert_fail@plt+0x8810>
   14354:	ldr	r2, [r4, #48]	; 0x30
   14358:	mov	r3, r4
   1435c:	cmp	r2, #0
   14360:	bge	14340 <__assert_fail@plt+0x2d3c>
   14364:	mov	r0, r4
   14368:	bl	19e14 <__assert_fail@plt+0x8810>
   1436c:	ldr	r0, [r5, #4]
   14370:	cmp	r0, #0
   14374:	beq	1437c <__assert_fail@plt+0x2d78>
   14378:	bl	12ca8 <__assert_fail@plt+0x16a4>
   1437c:	ldr	r0, [r5, #8]
   14380:	bl	19e14 <__assert_fail@plt+0x8810>
   14384:	ldr	r0, [r5, #24]
   14388:	bl	19e14 <__assert_fail@plt+0x8810>
   1438c:	ldr	r3, [r5, #48]	; 0x30
   14390:	tst	r3, #512	; 0x200
   14394:	bne	14400 <__assert_fail@plt+0x2dfc>
   14398:	tst	r3, #4
   1439c:	beq	1442c <__assert_fail@plt+0x2e28>
   143a0:	mov	r4, #0
   143a4:	add	r0, r5, #60	; 0x3c
   143a8:	bl	12cf0 <__assert_fail@plt+0x16ec>
   143ac:	ldr	r0, [r5, #52]	; 0x34
   143b0:	cmp	r0, #0
   143b4:	beq	143bc <__assert_fail@plt+0x2db8>
   143b8:	bl	15924 <__assert_fail@plt+0x4320>
   143bc:	ldr	r3, [r5, #48]	; 0x30
   143c0:	movw	r2, #258	; 0x102
   143c4:	ldr	r0, [r5, #56]	; 0x38
   143c8:	tst	r2, r3
   143cc:	beq	14424 <__assert_fail@plt+0x2e20>
   143d0:	cmp	r0, #0
   143d4:	beq	143dc <__assert_fail@plt+0x2dd8>
   143d8:	bl	15924 <__assert_fail@plt+0x4320>
   143dc:	mov	r0, r5
   143e0:	bl	19e14 <__assert_fail@plt+0x8810>
   143e4:	cmp	r4, #0
   143e8:	bne	14494 <__assert_fail@plt+0x2e90>
   143ec:	mov	r0, r4
   143f0:	ldrd	r4, [sp]
   143f4:	ldr	r6, [sp, #8]
   143f8:	add	sp, sp, #12
   143fc:	pop	{pc}		; (ldr pc, [sp], #4)
   14400:	ldr	r0, [r5, #32]
   14404:	cmp	r0, #0
   14408:	blt	143a0 <__assert_fail@plt+0x2d9c>
   1440c:	bl	115d4 <close@plt>
   14410:	cmp	r0, #0
   14414:	beq	143a0 <__assert_fail@plt+0x2d9c>
   14418:	bl	11484 <__errno_location@plt>
   1441c:	ldr	r4, [r0]
   14420:	b	143a4 <__assert_fail@plt+0x2da0>
   14424:	bl	19e14 <__assert_fail@plt+0x8810>
   14428:	b	143dc <__assert_fail@plt+0x2dd8>
   1442c:	ldr	r0, [r5, #28]
   14430:	bl	11568 <fchdir@plt>
   14434:	cmp	r0, #0
   14438:	bne	1445c <__assert_fail@plt+0x2e58>
   1443c:	ldr	r0, [r5, #28]
   14440:	bl	115d4 <close@plt>
   14444:	cmp	r0, #0
   14448:	beq	143a0 <__assert_fail@plt+0x2d9c>
   1444c:	bl	11484 <__errno_location@plt>
   14450:	mov	r6, r0
   14454:	ldr	r4, [r6]
   14458:	b	143a4 <__assert_fail@plt+0x2da0>
   1445c:	bl	11484 <__errno_location@plt>
   14460:	mov	r6, r0
   14464:	ldr	r0, [r5, #28]
   14468:	ldr	r4, [r6]
   1446c:	bl	115d4 <close@plt>
   14470:	adds	r3, r0, #0
   14474:	movne	r3, #1
   14478:	cmp	r4, #0
   1447c:	movne	r3, #0
   14480:	cmp	r3, #0
   14484:	beq	143a4 <__assert_fail@plt+0x2da0>
   14488:	b	14454 <__assert_fail@plt+0x2e50>
   1448c:	mov	r4, r3
   14490:	b	14364 <__assert_fail@plt+0x2d60>
   14494:	bl	11484 <__errno_location@plt>
   14498:	str	r4, [r0]
   1449c:	mvn	r4, #0
   144a0:	b	143ec <__assert_fail@plt+0x2de8>
   144a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   144a8:	ldr	r4, [r0]
   144ac:	strd	r6, [sp, #8]
   144b0:	str	r8, [sp, #16]
   144b4:	str	lr, [sp, #20]
   144b8:	cmp	r4, #0
   144bc:	beq	145dc <__assert_fail@plt+0x2fd8>
   144c0:	ldr	r1, [r0, #48]	; 0x30
   144c4:	ands	r3, r1, #8192	; 0x2000
   144c8:	bne	145dc <__assert_fail@plt+0x2fd8>
   144cc:	ldrh	r2, [r4, #60]	; 0x3c
   144d0:	mov	r8, r0
   144d4:	mov	r0, #3
   144d8:	strh	r0, [r4, #60]	; 0x3c
   144dc:	cmp	r2, #1
   144e0:	beq	14888 <__assert_fail@plt+0x3284>
   144e4:	cmp	r2, #2
   144e8:	ldrh	r3, [r4, #56]	; 0x38
   144ec:	beq	145f8 <__assert_fail@plt+0x2ff4>
   144f0:	cmp	r3, #1
   144f4:	bne	14524 <__assert_fail@plt+0x2f20>
   144f8:	b	146a4 <__assert_fail@plt+0x30a0>
   144fc:	mov	r0, r4
   14500:	str	r5, [r8]
   14504:	bl	19e14 <__assert_fail@plt+0x8810>
   14508:	ldr	r4, [r5, #48]	; 0x30
   1450c:	cmp	r4, #0
   14510:	beq	146ec <__assert_fail@plt+0x30e8>
   14514:	ldrh	r3, [r5, #60]	; 0x3c
   14518:	mov	r4, r5
   1451c:	cmp	r3, #4
   14520:	bne	147a4 <__assert_fail@plt+0x31a0>
   14524:	ldr	r5, [r4, #8]
   14528:	cmp	r5, #0
   1452c:	bne	144fc <__assert_fail@plt+0x2ef8>
   14530:	ldr	r6, [r4, #4]
   14534:	ldr	r3, [r6, #12]
   14538:	cmp	r3, #0
   1453c:	bne	149ac <__assert_fail@plt+0x33a8>
   14540:	mov	r0, r4
   14544:	str	r6, [r8]
   14548:	bl	19e14 <__assert_fail@plt+0x8810>
   1454c:	ldr	r3, [r6, #48]	; 0x30
   14550:	cmn	r3, #1
   14554:	beq	14950 <__assert_fail@plt+0x334c>
   14558:	ldrh	r3, [r6, #56]	; 0x38
   1455c:	cmp	r3, #11
   14560:	beq	14884 <__assert_fail@plt+0x3280>
   14564:	ldr	r2, [r8, #24]
   14568:	mov	r1, #0
   1456c:	ldr	r3, [r6, #40]	; 0x28
   14570:	strb	r1, [r2, r3]
   14574:	ldr	r3, [r6, #48]	; 0x30
   14578:	cmp	r3, r1
   1457c:	beq	14970 <__assert_fail@plt+0x336c>
   14580:	ldrh	r3, [r6, #58]	; 0x3a
   14584:	tst	r3, #2
   14588:	bne	14904 <__assert_fail@plt+0x3300>
   1458c:	tst	r3, #1
   14590:	beq	14a44 <__assert_fail@plt+0x3440>
   14594:	ldrh	r3, [r6, #56]	; 0x38
   14598:	ldr	r0, [r8, #48]	; 0x30
   1459c:	cmp	r3, #2
   145a0:	beq	145d0 <__assert_fail@plt+0x2fcc>
   145a4:	ldr	r3, [r6, #32]
   145a8:	cmp	r3, #0
   145ac:	movne	r3, #7
   145b0:	strhne	r3, [r6, #56]	; 0x38
   145b4:	bne	145d0 <__assert_fail@plt+0x2fcc>
   145b8:	mov	r3, #6
   145bc:	mov	r2, r6
   145c0:	add	r1, r8, #56	; 0x38
   145c4:	strh	r3, [r6, #56]	; 0x38
   145c8:	bl	134e4 <__assert_fail@plt+0x1ee0>
   145cc:	ldr	r0, [r8, #48]	; 0x30
   145d0:	tst	r0, #8192	; 0x2000
   145d4:	moveq	r4, r6
   145d8:	beq	145e0 <__assert_fail@plt+0x2fdc>
   145dc:	mov	r4, #0
   145e0:	mov	r0, r4
   145e4:	ldrd	r4, [sp]
   145e8:	ldrd	r6, [sp, #8]
   145ec:	ldr	r8, [sp, #16]
   145f0:	add	sp, sp, #20
   145f4:	pop	{pc}		; (ldr pc, [sp], #4)
   145f8:	sub	r2, r3, #12
   145fc:	cmp	r2, #1
   14600:	bls	14840 <__assert_fail@plt+0x323c>
   14604:	cmp	r3, #1
   14608:	bne	14524 <__assert_fail@plt+0x2f20>
   1460c:	tst	r1, #64	; 0x40
   14610:	beq	14628 <__assert_fail@plt+0x3024>
   14614:	ldrd	r2, [r8, #16]
   14618:	ldrd	r6, [r4, #64]	; 0x40
   1461c:	cmp	r7, r3
   14620:	cmpeq	r6, r2
   14624:	bne	146ac <__assert_fail@plt+0x30a8>
   14628:	ldr	r0, [r8, #4]
   1462c:	cmp	r0, #0
   14630:	beq	148b0 <__assert_fail@plt+0x32ac>
   14634:	tst	r1, #4096	; 0x1000
   14638:	bne	1489c <__assert_fail@plt+0x3298>
   1463c:	mvn	r2, #0
   14640:	mov	r1, r4
   14644:	ldr	r3, [r4, #24]
   14648:	mov	r0, r8
   1464c:	bl	131f4 <__assert_fail@plt+0x1bf0>
   14650:	cmp	r0, #0
   14654:	beq	14938 <__assert_fail@plt+0x3334>
   14658:	bl	11484 <__errno_location@plt>
   1465c:	ldrh	r3, [r4, #58]	; 0x3a
   14660:	ldr	r2, [r0]
   14664:	orr	r3, r3, #1
   14668:	str	r2, [r4, #32]
   1466c:	strh	r3, [r4, #58]	; 0x3a
   14670:	ldr	r4, [r8, #4]
   14674:	cmp	r4, #0
   14678:	beq	14698 <__assert_fail@plt+0x3094>
   1467c:	mov	r3, r4
   14680:	ldr	r2, [r3, #4]
   14684:	ldr	r2, [r2, #24]
   14688:	str	r2, [r3, #24]
   1468c:	ldr	r3, [r3, #8]
   14690:	cmp	r3, #0
   14694:	bne	14680 <__assert_fail@plt+0x307c>
   14698:	mov	r3, #0
   1469c:	str	r3, [r8, #4]
   146a0:	b	147ac <__assert_fail@plt+0x31a8>
   146a4:	cmp	r2, #4
   146a8:	bne	1460c <__assert_fail@plt+0x3008>
   146ac:	ldrh	r3, [r4, #58]	; 0x3a
   146b0:	tst	r3, #2
   146b4:	bne	149ec <__assert_fail@plt+0x33e8>
   146b8:	ldr	r0, [r8, #4]
   146bc:	cmp	r0, #0
   146c0:	beq	146d0 <__assert_fail@plt+0x30cc>
   146c4:	bl	12ca8 <__assert_fail@plt+0x16a4>
   146c8:	mov	r3, #0
   146cc:	str	r3, [r8, #4]
   146d0:	mov	r3, #6
   146d4:	mov	r2, r4
   146d8:	ldr	r0, [r8, #48]	; 0x30
   146dc:	add	r1, r8, #56	; 0x38
   146e0:	strh	r3, [r4, #56]	; 0x38
   146e4:	bl	134e4 <__assert_fail@plt+0x1ee0>
   146e8:	b	145e0 <__assert_fail@plt+0x2fdc>
   146ec:	mov	r0, r8
   146f0:	bl	12ee4 <__assert_fail@plt+0x18e0>
   146f4:	ldr	r3, [r8, #48]	; 0x30
   146f8:	cmp	r0, #0
   146fc:	orrne	r3, r3, #8192	; 0x2000
   14700:	strne	r3, [r8, #48]	; 0x30
   14704:	bne	145e0 <__assert_fail@plt+0x2fdc>
   14708:	movw	r2, #258	; 0x102
   1470c:	ldr	r0, [r8, #56]	; 0x38
   14710:	tst	r2, r3
   14714:	beq	149e4 <__assert_fail@plt+0x33e0>
   14718:	cmp	r0, #0
   1471c:	beq	14724 <__assert_fail@plt+0x3120>
   14720:	bl	15924 <__assert_fail@plt+0x4320>
   14724:	ldr	r2, [r5, #52]	; 0x34
   14728:	add	r4, r5, #168	; 0xa8
   1472c:	mov	r1, r4
   14730:	ldr	r0, [r8, #24]
   14734:	str	r2, [r5, #40]	; 0x28
   14738:	add	r2, r2, #1
   1473c:	bl	1128c <memmove@plt>
   14740:	mov	r0, r4
   14744:	mov	r1, #47	; 0x2f
   14748:	bl	1152c <strrchr@plt>
   1474c:	cmp	r0, #0
   14750:	beq	14780 <__assert_fail@plt+0x317c>
   14754:	cmp	r4, r0
   14758:	beq	14940 <__assert_fail@plt+0x333c>
   1475c:	add	r6, r0, #1
   14760:	mov	r0, r6
   14764:	bl	11460 <strlen@plt>
   14768:	mov	r7, r0
   1476c:	mov	r1, r6
   14770:	mov	r0, r4
   14774:	add	r2, r7, #1
   14778:	bl	1128c <memmove@plt>
   1477c:	str	r7, [r5, #52]	; 0x34
   14780:	ldr	r3, [r8, #24]
   14784:	add	r1, r8, #56	; 0x38
   14788:	mov	r4, r5
   1478c:	ldr	r0, [r8, #48]	; 0x30
   14790:	str	r3, [r5, #24]
   14794:	str	r3, [r5, #28]
   14798:	bl	13134 <__assert_fail@plt+0x1b30>
   1479c:	ldrh	r0, [r5, #56]	; 0x38
   147a0:	b	147f0 <__assert_fail@plt+0x31ec>
   147a4:	cmp	r3, #2
   147a8:	beq	14a14 <__assert_fail@plt+0x3410>
   147ac:	ldr	r0, [r4, #4]
   147b0:	mov	ip, #47	; 0x2f
   147b4:	add	r1, r4, #168	; 0xa8
   147b8:	ldr	r3, [r8, #24]
   147bc:	ldr	lr, [r0, #28]
   147c0:	ldr	r2, [r0, #40]	; 0x28
   147c4:	sub	r0, r2, #1
   147c8:	ldrb	lr, [lr, r0]
   147cc:	cmp	lr, ip
   147d0:	movne	r0, r2
   147d4:	strb	ip, [r3, r0]
   147d8:	add	r0, r3, r0
   147dc:	ldr	r2, [r4, #52]	; 0x34
   147e0:	add	r0, r0, #1
   147e4:	add	r2, r2, #1
   147e8:	bl	1128c <memmove@plt>
   147ec:	ldrh	r0, [r4, #56]	; 0x38
   147f0:	cmp	r0, #11
   147f4:	str	r4, [r8]
   147f8:	beq	14868 <__assert_fail@plt+0x3264>
   147fc:	cmp	r0, #1
   14800:	bne	145e0 <__assert_fail@plt+0x2fdc>
   14804:	ldr	r3, [r4, #48]	; 0x30
   14808:	add	r1, r8, #56	; 0x38
   1480c:	ldr	r0, [r8, #48]	; 0x30
   14810:	cmp	r3, #0
   14814:	ldrdeq	r2, [r4, #64]	; 0x40
   14818:	strdeq	r2, [r8, #16]
   1481c:	mov	r2, r4
   14820:	bl	13410 <__assert_fail@plt+0x1e0c>
   14824:	subs	r5, r0, #0
   14828:	bne	145e0 <__assert_fail@plt+0x2fdc>
   1482c:	bl	11484 <__errno_location@plt>
   14830:	mov	r3, #12
   14834:	mov	r4, r5
   14838:	str	r3, [r0]
   1483c:	b	145e0 <__assert_fail@plt+0x2fdc>
   14840:	mov	r3, #1
   14844:	mov	r2, r4
   14848:	ldr	r0, [r8, #32]
   1484c:	bl	12f48 <__assert_fail@plt+0x1944>
   14850:	cmp	r0, #1
   14854:	strh	r0, [r4, #56]	; 0x38
   14858:	beq	14a8c <__assert_fail@plt+0x3488>
   1485c:	cmp	r0, #11
   14860:	str	r4, [r8]
   14864:	bne	145e0 <__assert_fail@plt+0x2fdc>
   14868:	ldrd	r2, [r4, #112]	; 0x70
   1486c:	cmp	r3, #0
   14870:	cmpeq	r2, #2
   14874:	beq	149f8 <__assert_fail@plt+0x33f4>
   14878:	cmp	r3, #0
   1487c:	cmpeq	r2, #1
   14880:	beq	145e0 <__assert_fail@plt+0x2fdc>
   14884:	bl	115c8 <abort@plt>
   14888:	mov	r2, r4
   1488c:	ldr	r0, [r8, #32]
   14890:	bl	12f48 <__assert_fail@plt+0x1944>
   14894:	strh	r0, [r4, #56]	; 0x38
   14898:	b	145e0 <__assert_fail@plt+0x2fdc>
   1489c:	bic	r1, r1, #4096	; 0x1000
   148a0:	str	r1, [r8, #48]	; 0x30
   148a4:	bl	12ca8 <__assert_fail@plt+0x16a4>
   148a8:	mov	r3, #0
   148ac:	str	r3, [r8, #4]
   148b0:	mov	r1, #3
   148b4:	mov	r0, r8
   148b8:	bl	135b0 <__assert_fail@plt+0x1fac>
   148bc:	cmp	r0, #0
   148c0:	str	r0, [r8, #4]
   148c4:	movne	r4, r0
   148c8:	bne	14698 <__assert_fail@plt+0x3094>
   148cc:	ldr	r0, [r8, #48]	; 0x30
   148d0:	tst	r0, #8192	; 0x2000
   148d4:	bne	145dc <__assert_fail@plt+0x2fd8>
   148d8:	ldr	r3, [r4, #32]
   148dc:	cmp	r3, #0
   148e0:	beq	148f4 <__assert_fail@plt+0x32f0>
   148e4:	ldrh	r3, [r4, #56]	; 0x38
   148e8:	cmp	r3, #4
   148ec:	movne	r3, #7
   148f0:	strhne	r3, [r4, #56]	; 0x38
   148f4:	add	r1, r8, #56	; 0x38
   148f8:	mov	r2, r4
   148fc:	bl	134e4 <__assert_fail@plt+0x1ee0>
   14900:	b	145e0 <__assert_fail@plt+0x2fdc>
   14904:	ldr	r3, [r8, #48]	; 0x30
   14908:	ldr	r0, [r6, #36]	; 0x24
   1490c:	tst	r3, #4
   14910:	bne	14930 <__assert_fail@plt+0x332c>
   14914:	tst	r3, #512	; 0x200
   14918:	beq	14a78 <__assert_fail@plt+0x3474>
   1491c:	mov	r1, r0
   14920:	mov	r2, #1
   14924:	mov	r0, r8
   14928:	bl	12e54 <__assert_fail@plt+0x1850>
   1492c:	ldr	r0, [r6, #36]	; 0x24
   14930:	bl	115d4 <close@plt>
   14934:	b	14594 <__assert_fail@plt+0x2f90>
   14938:	ldr	r4, [r8, #4]
   1493c:	b	14698 <__assert_fail@plt+0x3094>
   14940:	ldrb	r3, [r4, #1]
   14944:	cmp	r3, #0
   14948:	beq	14780 <__assert_fail@plt+0x317c>
   1494c:	b	1475c <__assert_fail@plt+0x3158>
   14950:	mov	r0, r6
   14954:	bl	19e14 <__assert_fail@plt+0x8810>
   14958:	bl	11484 <__errno_location@plt>
   1495c:	mov	r3, #0
   14960:	mov	r4, r3
   14964:	str	r3, [r0]
   14968:	str	r3, [r8]
   1496c:	b	145e0 <__assert_fail@plt+0x2fdc>
   14970:	mov	r0, r8
   14974:	bl	12ee4 <__assert_fail@plt+0x18e0>
   14978:	cmp	r0, #0
   1497c:	beq	14594 <__assert_fail@plt+0x2f90>
   14980:	bl	11484 <__errno_location@plt>
   14984:	ldr	r3, [r8, #48]	; 0x30
   14988:	ldr	r2, [r0]
   1498c:	orr	r3, r3, #8192	; 0x2000
   14990:	str	r2, [r6, #32]
   14994:	str	r3, [r8, #48]	; 0x30
   14998:	ldrh	r3, [r6, #56]	; 0x38
   1499c:	cmp	r3, #2
   149a0:	beq	145dc <__assert_fail@plt+0x2fd8>
   149a4:	ldr	r0, [r8, #48]	; 0x30
   149a8:	b	145a4 <__assert_fail@plt+0x2fa0>
   149ac:	ldr	r2, [r8, #24]
   149b0:	mov	r1, #3
   149b4:	mov	r0, r8
   149b8:	ldr	r3, [r6, #40]	; 0x28
   149bc:	str	r6, [r8]
   149c0:	strb	r5, [r2, r3]
   149c4:	bl	135b0 <__assert_fail@plt+0x1fac>
   149c8:	subs	r3, r0, #0
   149cc:	bne	14a68 <__assert_fail@plt+0x3464>
   149d0:	ldr	r3, [r8, #48]	; 0x30
   149d4:	tst	r3, #8192	; 0x2000
   149d8:	bne	145dc <__assert_fail@plt+0x2fd8>
   149dc:	ldr	r6, [r4, #4]
   149e0:	b	14540 <__assert_fail@plt+0x2f3c>
   149e4:	bl	19e14 <__assert_fail@plt+0x8810>
   149e8:	b	14724 <__assert_fail@plt+0x3120>
   149ec:	ldr	r0, [r4, #36]	; 0x24
   149f0:	bl	115d4 <close@plt>
   149f4:	b	146b8 <__assert_fail@plt+0x30b4>
   149f8:	mov	r3, #0
   149fc:	mov	r2, r4
   14a00:	ldr	r0, [r8, #32]
   14a04:	ldr	r1, [r8, #48]	; 0x30
   14a08:	bl	12f48 <__assert_fail@plt+0x1944>
   14a0c:	strh	r0, [r4, #56]	; 0x38
   14a10:	b	147fc <__assert_fail@plt+0x31f8>
   14a14:	mov	r3, #1
   14a18:	mov	r2, r5
   14a1c:	ldr	r0, [r8, #32]
   14a20:	ldr	r1, [r8, #48]	; 0x30
   14a24:	bl	12f48 <__assert_fail@plt+0x1944>
   14a28:	cmp	r0, #1
   14a2c:	strh	r0, [r5, #56]	; 0x38
   14a30:	beq	14acc <__assert_fail@plt+0x34c8>
   14a34:	mov	r3, #3
   14a38:	mov	r4, r5
   14a3c:	strh	r3, [r5, #60]	; 0x3c
   14a40:	b	147ac <__assert_fail@plt+0x31a8>
   14a44:	movw	r3, #46680	; 0xb658
   14a48:	movt	r3, #1
   14a4c:	ldr	r1, [r6, #4]
   14a50:	mvn	r2, #0
   14a54:	mov	r0, r8
   14a58:	bl	131f4 <__assert_fail@plt+0x1bf0>
   14a5c:	cmp	r0, #0
   14a60:	beq	14594 <__assert_fail@plt+0x2f90>
   14a64:	b	14980 <__assert_fail@plt+0x337c>
   14a68:	mov	r0, r4
   14a6c:	mov	r4, r3
   14a70:	bl	19e14 <__assert_fail@plt+0x8810>
   14a74:	b	147ac <__assert_fail@plt+0x31a8>
   14a78:	bl	11568 <fchdir@plt>
   14a7c:	cmp	r0, #0
   14a80:	bne	14b04 <__assert_fail@plt+0x3500>
   14a84:	ldr	r0, [r6, #36]	; 0x24
   14a88:	b	14930 <__assert_fail@plt+0x332c>
   14a8c:	ldr	r1, [r8, #48]	; 0x30
   14a90:	tst	r1, #4
   14a94:	strne	r4, [r8]
   14a98:	bne	14804 <__assert_fail@plt+0x3200>
   14a9c:	movw	r2, #46684	; 0xb65c
   14aa0:	movt	r2, #1
   14aa4:	ldr	r0, [r8, #32]
   14aa8:	bl	131c4 <__assert_fail@plt+0x1bc0>
   14aac:	cmp	r0, #0
   14ab0:	str	r0, [r4, #36]	; 0x24
   14ab4:	blt	14b24 <__assert_fail@plt+0x3520>
   14ab8:	ldrh	r3, [r4, #58]	; 0x3a
   14abc:	ldrh	r0, [r4, #56]	; 0x38
   14ac0:	orr	r3, r3, #2
   14ac4:	strh	r3, [r4, #58]	; 0x3a
   14ac8:	b	147f0 <__assert_fail@plt+0x31ec>
   14acc:	ldr	r1, [r8, #48]	; 0x30
   14ad0:	tst	r1, #4
   14ad4:	bne	14a34 <__assert_fail@plt+0x3430>
   14ad8:	movw	r2, #46684	; 0xb65c
   14adc:	movt	r2, #1
   14ae0:	ldr	r0, [r8, #32]
   14ae4:	bl	131c4 <__assert_fail@plt+0x1bc0>
   14ae8:	cmp	r0, #0
   14aec:	str	r0, [r5, #36]	; 0x24
   14af0:	blt	14b40 <__assert_fail@plt+0x353c>
   14af4:	ldrh	r3, [r5, #58]	; 0x3a
   14af8:	orr	r3, r3, #2
   14afc:	strh	r3, [r5, #58]	; 0x3a
   14b00:	b	14a34 <__assert_fail@plt+0x3430>
   14b04:	bl	11484 <__errno_location@plt>
   14b08:	ldr	r3, [r8, #48]	; 0x30
   14b0c:	ldr	r2, [r0]
   14b10:	ldr	r0, [r6, #36]	; 0x24
   14b14:	orr	r3, r3, #8192	; 0x2000
   14b18:	str	r2, [r6, #32]
   14b1c:	str	r3, [r8, #48]	; 0x30
   14b20:	b	14930 <__assert_fail@plt+0x332c>
   14b24:	bl	11484 <__errno_location@plt>
   14b28:	ldr	r3, [r0]
   14b2c:	mov	r2, #7
   14b30:	str	r3, [r4, #32]
   14b34:	strh	r2, [r4, #56]	; 0x38
   14b38:	str	r4, [r8]
   14b3c:	b	145e0 <__assert_fail@plt+0x2fdc>
   14b40:	bl	11484 <__errno_location@plt>
   14b44:	ldr	r3, [r0]
   14b48:	mov	r2, #7
   14b4c:	str	r3, [r5, #32]
   14b50:	strh	r2, [r5, #56]	; 0x38
   14b54:	b	14a34 <__assert_fail@plt+0x3430>
   14b58:	cmp	r2, #4
   14b5c:	bhi	14b70 <__assert_fail@plt+0x356c>
   14b60:	mov	r3, #0
   14b64:	strh	r2, [r1, #60]	; 0x3c
   14b68:	mov	r0, r3
   14b6c:	bx	lr
   14b70:	str	r4, [sp, #-8]!
   14b74:	str	lr, [sp, #4]
   14b78:	bl	11484 <__errno_location@plt>
   14b7c:	mov	r2, #22
   14b80:	mov	r3, #1
   14b84:	ldr	r4, [sp]
   14b88:	add	sp, sp, #4
   14b8c:	str	r2, [r0]
   14b90:	mov	r0, r3
   14b94:	pop	{pc}		; (ldr pc, [sp], #4)
   14b98:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14b9c:	mov	r4, r1
   14ba0:	mov	r5, r0
   14ba4:	strd	r6, [sp, #8]
   14ba8:	str	r8, [sp, #16]
   14bac:	str	lr, [sp, #20]
   14bb0:	bl	11484 <__errno_location@plt>
   14bb4:	bics	r2, r4, #4096	; 0x1000
   14bb8:	mov	r7, r0
   14bbc:	movne	r3, #22
   14bc0:	movne	r0, #0
   14bc4:	strne	r3, [r7]
   14bc8:	bne	14c5c <__assert_fail@plt+0x3658>
   14bcc:	ldr	r6, [r5]
   14bd0:	str	r2, [r7]
   14bd4:	ldr	r3, [r5, #48]	; 0x30
   14bd8:	ands	r0, r3, #8192	; 0x2000
   14bdc:	movne	r0, r2
   14be0:	bne	14c5c <__assert_fail@plt+0x3658>
   14be4:	ldrh	r3, [r6, #56]	; 0x38
   14be8:	cmp	r3, #9
   14bec:	beq	14ccc <__assert_fail@plt+0x36c8>
   14bf0:	cmp	r3, #1
   14bf4:	bne	14c5c <__assert_fail@plt+0x3658>
   14bf8:	ldr	r0, [r5, #4]
   14bfc:	cmp	r0, #0
   14c00:	beq	14c08 <__assert_fail@plt+0x3604>
   14c04:	bl	12ca8 <__assert_fail@plt+0x16a4>
   14c08:	cmp	r4, #4096	; 0x1000
   14c0c:	movne	r4, #1
   14c10:	bne	14c24 <__assert_fail@plt+0x3620>
   14c14:	ldr	r3, [r5, #48]	; 0x30
   14c18:	mov	r4, #2
   14c1c:	orr	r3, r3, #4096	; 0x1000
   14c20:	str	r3, [r5, #48]	; 0x30
   14c24:	ldr	r3, [r6, #48]	; 0x30
   14c28:	cmp	r3, #0
   14c2c:	bne	14c4c <__assert_fail@plt+0x3648>
   14c30:	ldr	r3, [r6, #24]
   14c34:	ldrb	r3, [r3]
   14c38:	cmp	r3, #47	; 0x2f
   14c3c:	beq	14c4c <__assert_fail@plt+0x3648>
   14c40:	ldr	r1, [r5, #48]	; 0x30
   14c44:	ands	r6, r1, #4
   14c48:	beq	14c70 <__assert_fail@plt+0x366c>
   14c4c:	mov	r1, r4
   14c50:	mov	r0, r5
   14c54:	bl	135b0 <__assert_fail@plt+0x1fac>
   14c58:	str	r0, [r5, #4]
   14c5c:	ldrd	r4, [sp]
   14c60:	ldrd	r6, [sp, #8]
   14c64:	ldr	r8, [sp, #16]
   14c68:	add	sp, sp, #20
   14c6c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c70:	movw	r2, #46684	; 0xb65c
   14c74:	movt	r2, #1
   14c78:	ldr	r0, [r5, #32]
   14c7c:	bl	131c4 <__assert_fail@plt+0x1bc0>
   14c80:	subs	r8, r0, #0
   14c84:	movlt	r0, r6
   14c88:	strlt	r6, [r5, #4]
   14c8c:	blt	14c5c <__assert_fail@plt+0x3658>
   14c90:	mov	r1, r4
   14c94:	mov	r0, r5
   14c98:	bl	135b0 <__assert_fail@plt+0x1fac>
   14c9c:	ldr	r3, [r5, #48]	; 0x30
   14ca0:	str	r0, [r5, #4]
   14ca4:	ands	r4, r3, #512	; 0x200
   14ca8:	bne	14cd4 <__assert_fail@plt+0x36d0>
   14cac:	mov	r0, r8
   14cb0:	bl	11568 <fchdir@plt>
   14cb4:	cmp	r0, #0
   14cb8:	bne	14ce8 <__assert_fail@plt+0x36e4>
   14cbc:	mov	r0, r8
   14cc0:	bl	115d4 <close@plt>
   14cc4:	ldr	r0, [r5, #4]
   14cc8:	b	14c5c <__assert_fail@plt+0x3658>
   14ccc:	ldr	r0, [r6, #8]
   14cd0:	b	14c5c <__assert_fail@plt+0x3658>
   14cd4:	mov	r1, r8
   14cd8:	mov	r2, #1
   14cdc:	mov	r0, r5
   14ce0:	bl	12e54 <__assert_fail@plt+0x1850>
   14ce4:	b	14cc4 <__assert_fail@plt+0x36c0>
   14ce8:	ldr	r5, [r7]
   14cec:	mov	r0, r8
   14cf0:	bl	115d4 <close@plt>
   14cf4:	mov	r0, r4
   14cf8:	str	r5, [r7]
   14cfc:	b	14c5c <__assert_fail@plt+0x3658>
   14d00:	cmp	r0, #10
   14d04:	movcc	r0, #10
   14d08:	orr	r0, r0, #1
   14d0c:	cmn	r0, #1
   14d10:	bxeq	lr
   14d14:	push	{lr}		; (str lr, [sp, #-4]!)
   14d18:	movw	lr, #43691	; 0xaaab
   14d1c:	movt	lr, #43690	; 0xaaaa
   14d20:	umull	r2, r3, lr, r0
   14d24:	cmp	r0, #9
   14d28:	lsr	r3, r3, #1
   14d2c:	add	r3, r3, r3, lsl #1
   14d30:	sub	r3, r0, r3
   14d34:	bls	14d74 <__assert_fail@plt+0x3770>
   14d38:	cmp	r3, #0
   14d3c:	beq	14d7c <__assert_fail@plt+0x3778>
   14d40:	mov	ip, #16
   14d44:	mov	r1, #9
   14d48:	mov	r2, #3
   14d4c:	b	14d58 <__assert_fail@plt+0x3754>
   14d50:	cmp	r3, #0
   14d54:	beq	14d7c <__assert_fail@plt+0x3778>
   14d58:	add	r2, r2, #2
   14d5c:	add	r1, r1, ip
   14d60:	cmp	r1, r0
   14d64:	add	ip, ip, #8
   14d68:	udiv	r3, r0, r2
   14d6c:	mls	r3, r2, r3, r0
   14d70:	bcc	14d50 <__assert_fail@plt+0x374c>
   14d74:	cmp	r3, #0
   14d78:	bne	14d88 <__assert_fail@plt+0x3784>
   14d7c:	add	r0, r0, #2
   14d80:	cmn	r0, #1
   14d84:	bne	14d20 <__assert_fail@plt+0x371c>
   14d88:	pop	{pc}		; (ldr pc, [sp], #4)
   14d8c:	ror	r0, r0, #3
   14d90:	udiv	r3, r0, r1
   14d94:	mls	r0, r3, r1, r0
   14d98:	bx	lr
   14d9c:	sub	r0, r1, r0
   14da0:	clz	r0, r0
   14da4:	lsr	r0, r0, #5
   14da8:	bx	lr
   14dac:	str	r4, [sp, #-8]!
   14db0:	mov	r4, r0
   14db4:	mov	r0, r1
   14db8:	ldr	r1, [r4, #8]
   14dbc:	ldr	r3, [r4, #24]
   14dc0:	str	lr, [sp, #4]
   14dc4:	blx	r3
   14dc8:	ldr	r3, [r4, #8]
   14dcc:	cmp	r3, r0
   14dd0:	bls	14de8 <__assert_fail@plt+0x37e4>
   14dd4:	ldr	r3, [r4]
   14dd8:	ldr	r4, [sp]
   14ddc:	add	sp, sp, #4
   14de0:	add	r0, r3, r0, lsl #3
   14de4:	pop	{pc}		; (ldr pc, [sp], #4)
   14de8:	bl	115c8 <abort@plt>
   14dec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14df0:	mov	r5, r1
   14df4:	strd	r6, [sp, #8]
   14df8:	mov	r7, r3
   14dfc:	mov	r6, r0
   14e00:	str	r8, [sp, #16]
   14e04:	mov	r8, r2
   14e08:	str	lr, [sp, #20]
   14e0c:	bl	14dac <__assert_fail@plt+0x37a8>
   14e10:	str	r0, [r8]
   14e14:	ldr	r1, [r0]
   14e18:	cmp	r1, #0
   14e1c:	beq	14f0c <__assert_fail@plt+0x3908>
   14e20:	cmp	r1, r5
   14e24:	mov	r4, r0
   14e28:	beq	14ed4 <__assert_fail@plt+0x38d0>
   14e2c:	mov	r0, r5
   14e30:	ldr	r3, [r6, #28]
   14e34:	blx	r3
   14e38:	cmp	r0, #0
   14e3c:	bne	14ed0 <__assert_fail@plt+0x38cc>
   14e40:	ldr	r3, [r4, #4]
   14e44:	cmp	r3, #0
   14e48:	beq	14f0c <__assert_fail@plt+0x3908>
   14e4c:	ldr	r1, [r3]
   14e50:	cmp	r5, r1
   14e54:	bne	14e78 <__assert_fail@plt+0x3874>
   14e58:	b	14e94 <__assert_fail@plt+0x3890>
   14e5c:	ldr	r4, [r4, #4]
   14e60:	ldr	r3, [r4, #4]
   14e64:	cmp	r3, #0
   14e68:	beq	14f0c <__assert_fail@plt+0x3908>
   14e6c:	ldr	r1, [r3]
   14e70:	cmp	r1, r5
   14e74:	beq	14e94 <__assert_fail@plt+0x3890>
   14e78:	mov	r0, r5
   14e7c:	ldr	r3, [r6, #28]
   14e80:	blx	r3
   14e84:	cmp	r0, #0
   14e88:	beq	14e5c <__assert_fail@plt+0x3858>
   14e8c:	ldr	r3, [r4, #4]
   14e90:	ldr	r1, [r3]
   14e94:	cmp	r7, #0
   14e98:	beq	14eb8 <__assert_fail@plt+0x38b4>
   14e9c:	ldr	r0, [r3, #4]
   14ea0:	mov	r2, #0
   14ea4:	str	r0, [r4, #4]
   14ea8:	str	r2, [r3]
   14eac:	ldr	r2, [r6, #36]	; 0x24
   14eb0:	str	r2, [r3, #4]
   14eb4:	str	r3, [r6, #36]	; 0x24
   14eb8:	ldrd	r4, [sp]
   14ebc:	mov	r0, r1
   14ec0:	ldrd	r6, [sp, #8]
   14ec4:	ldr	r8, [sp, #16]
   14ec8:	add	sp, sp, #20
   14ecc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ed0:	ldr	r1, [r4]
   14ed4:	cmp	r7, #0
   14ed8:	beq	14eb8 <__assert_fail@plt+0x38b4>
   14edc:	ldr	r0, [r4, #4]
   14ee0:	cmp	r0, #0
   14ee4:	streq	r0, [r4]
   14ee8:	beq	14eb8 <__assert_fail@plt+0x38b4>
   14eec:	ldrd	r2, [r0]
   14ef0:	mov	ip, #0
   14ef4:	strd	r2, [r4]
   14ef8:	str	ip, [r0]
   14efc:	ldr	r3, [r6, #36]	; 0x24
   14f00:	str	r3, [r0, #4]
   14f04:	str	r0, [r6, #36]	; 0x24
   14f08:	b	14eb8 <__assert_fail@plt+0x38b4>
   14f0c:	mov	r1, #0
   14f10:	b	14eb8 <__assert_fail@plt+0x38b4>
   14f14:	ldr	r2, [r0]
   14f18:	movw	r3, #46688	; 0xb660
   14f1c:	movt	r3, #1
   14f20:	mov	r1, r0
   14f24:	cmp	r2, r3
   14f28:	beq	14fb0 <__assert_fail@plt+0x39ac>
   14f2c:	vldr	s14, [pc, #132]	; 14fb8 <__assert_fail@plt+0x39b4>
   14f30:	vldr	s15, [r2, #8]
   14f34:	vcmpe.f32	s15, s14
   14f38:	vmrs	APSR_nzcv, fpscr
   14f3c:	ble	14fa4 <__assert_fail@plt+0x39a0>
   14f40:	vldr	s13, [pc, #116]	; 14fbc <__assert_fail@plt+0x39b8>
   14f44:	vcmpe.f32	s15, s13
   14f48:	vmrs	APSR_nzcv, fpscr
   14f4c:	bpl	14fa4 <__assert_fail@plt+0x39a0>
   14f50:	vldr	s13, [pc, #104]	; 14fc0 <__assert_fail@plt+0x39bc>
   14f54:	vldr	s12, [r2, #12]
   14f58:	vcmpe.f32	s12, s13
   14f5c:	vmrs	APSR_nzcv, fpscr
   14f60:	ble	14fa4 <__assert_fail@plt+0x39a0>
   14f64:	vldr	s13, [r2]
   14f68:	vcmpe.f32	s13, #0.0
   14f6c:	vmrs	APSR_nzcv, fpscr
   14f70:	blt	14fa4 <__assert_fail@plt+0x39a0>
   14f74:	vadd.f32	s14, s13, s14
   14f78:	vldr	s13, [r2, #4]
   14f7c:	vcmpe.f32	s14, s13
   14f80:	vmrs	APSR_nzcv, fpscr
   14f84:	bpl	14fa4 <__assert_fail@plt+0x39a0>
   14f88:	vldr	s12, [pc, #52]	; 14fc4 <__assert_fail@plt+0x39c0>
   14f8c:	vcmpe.f32	s13, s12
   14f90:	vmrs	APSR_nzcv, fpscr
   14f94:	bhi	14fa4 <__assert_fail@plt+0x39a0>
   14f98:	vcmpe.f32	s15, s14
   14f9c:	vmrs	APSR_nzcv, fpscr
   14fa0:	bgt	14fb0 <__assert_fail@plt+0x39ac>
   14fa4:	mov	r0, #0
   14fa8:	str	r3, [r1]
   14fac:	bx	lr
   14fb0:	mov	r0, #1
   14fb4:	bx	lr
   14fb8:	stclcc	12, cr12, [ip, #820]	; 0x334
   14fbc:	svccc	0x00666666
   14fc0:	svccc	0x008ccccd
   14fc4:	svccc	0x00800000
   14fc8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14fcc:	ldr	r3, [r1, #4]
   14fd0:	strd	r6, [sp, #8]
   14fd4:	ldr	r6, [r1]
   14fd8:	strd	r8, [sp, #16]
   14fdc:	str	sl, [sp, #24]
   14fe0:	str	lr, [sp, #28]
   14fe4:	cmp	r6, r3
   14fe8:	bcs	150b0 <__assert_fail@plt+0x3aac>
   14fec:	mov	r8, r2
   14ff0:	mov	r5, r0
   14ff4:	mov	r7, r1
   14ff8:	add	r6, r6, #8
   14ffc:	mov	r9, #0
   15000:	b	15010 <__assert_fail@plt+0x3a0c>
   15004:	cmp	r3, r6
   15008:	add	r6, r6, #8
   1500c:	bls	150b0 <__assert_fail@plt+0x3aac>
   15010:	ldr	sl, [r6, #-8]
   15014:	cmp	sl, #0
   15018:	beq	15004 <__assert_fail@plt+0x3a00>
   1501c:	ldr	r4, [r6, #-4]
   15020:	cmp	r4, #0
   15024:	bne	15044 <__assert_fail@plt+0x3a40>
   15028:	b	15094 <__assert_fail@plt+0x3a90>
   1502c:	ldr	r2, [r0, #4]
   15030:	cmp	r3, #0
   15034:	str	r2, [r4, #4]
   15038:	str	r4, [r0, #4]
   1503c:	mov	r4, r3
   15040:	beq	15090 <__assert_fail@plt+0x3a8c>
   15044:	ldr	sl, [r4]
   15048:	mov	r0, r5
   1504c:	mov	r1, sl
   15050:	bl	14dac <__assert_fail@plt+0x37a8>
   15054:	ldr	r2, [r0]
   15058:	ldr	r3, [r4, #4]
   1505c:	cmp	r2, #0
   15060:	bne	1502c <__assert_fail@plt+0x3a28>
   15064:	ldr	r1, [r5, #12]
   15068:	cmp	r3, #0
   1506c:	str	sl, [r0]
   15070:	add	r1, r1, #1
   15074:	str	r1, [r5, #12]
   15078:	str	r2, [r4]
   1507c:	ldr	r2, [r5, #36]	; 0x24
   15080:	str	r2, [r4, #4]
   15084:	str	r4, [r5, #36]	; 0x24
   15088:	mov	r4, r3
   1508c:	bne	15044 <__assert_fail@plt+0x3a40>
   15090:	ldr	sl, [r6, #-8]
   15094:	cmp	r8, #0
   15098:	str	r9, [r6, #-4]
   1509c:	beq	150cc <__assert_fail@plt+0x3ac8>
   150a0:	ldr	r3, [r7, #4]
   150a4:	cmp	r3, r6
   150a8:	add	r6, r6, #8
   150ac:	bhi	15010 <__assert_fail@plt+0x3a0c>
   150b0:	mov	r0, #1
   150b4:	ldrd	r4, [sp]
   150b8:	ldrd	r6, [sp, #8]
   150bc:	ldrd	r8, [sp, #16]
   150c0:	ldr	sl, [sp, #24]
   150c4:	add	sp, sp, #28
   150c8:	pop	{pc}		; (ldr pc, [sp], #4)
   150cc:	mov	r1, sl
   150d0:	mov	r0, r5
   150d4:	bl	14dac <__assert_fail@plt+0x37a8>
   150d8:	ldr	r3, [r0]
   150dc:	mov	r4, r0
   150e0:	cmp	r3, #0
   150e4:	beq	15124 <__assert_fail@plt+0x3b20>
   150e8:	ldr	r0, [r5, #36]	; 0x24
   150ec:	cmp	r0, #0
   150f0:	beq	15138 <__assert_fail@plt+0x3b34>
   150f4:	ldr	r3, [r0, #4]
   150f8:	str	r3, [r5, #36]	; 0x24
   150fc:	ldr	r3, [r4, #4]
   15100:	str	sl, [r0]
   15104:	str	r3, [r0, #4]
   15108:	str	r0, [r4, #4]
   1510c:	ldr	r2, [r7, #12]
   15110:	str	r9, [r6, #-8]
   15114:	ldr	r3, [r7, #4]
   15118:	sub	r2, r2, #1
   1511c:	str	r2, [r7, #12]
   15120:	b	15004 <__assert_fail@plt+0x3a00>
   15124:	ldr	r3, [r5, #12]
   15128:	str	sl, [r0]
   1512c:	add	r3, r3, #1
   15130:	str	r3, [r5, #12]
   15134:	b	1510c <__assert_fail@plt+0x3b08>
   15138:	mov	r0, #8
   1513c:	bl	19770 <__assert_fail@plt+0x816c>
   15140:	cmp	r0, #0
   15144:	bne	150fc <__assert_fail@plt+0x3af8>
   15148:	mov	r0, r8
   1514c:	b	150b4 <__assert_fail@plt+0x3ab0>
   15150:	ldr	r0, [r0, #8]
   15154:	bx	lr
   15158:	ldr	r0, [r0, #12]
   1515c:	bx	lr
   15160:	ldr	r0, [r0, #16]
   15164:	bx	lr
   15168:	ldm	r0, {r1, r3}
   1516c:	cmp	r1, r3
   15170:	bcs	151e4 <__assert_fail@plt+0x3be0>
   15174:	sub	ip, r3, #1
   15178:	add	r3, r1, #16
   1517c:	sub	ip, ip, r1
   15180:	mov	r0, #0
   15184:	bic	ip, ip, #7
   15188:	add	r1, r1, #8
   1518c:	add	ip, ip, r3
   15190:	b	151a0 <__assert_fail@plt+0x3b9c>
   15194:	add	r1, r1, #8
   15198:	cmp	r1, ip
   1519c:	beq	151e0 <__assert_fail@plt+0x3bdc>
   151a0:	ldr	r3, [r1, #-8]
   151a4:	cmp	r3, #0
   151a8:	beq	15194 <__assert_fail@plt+0x3b90>
   151ac:	ldr	r3, [r1, #-4]
   151b0:	mov	r2, #1
   151b4:	cmp	r3, #0
   151b8:	beq	151cc <__assert_fail@plt+0x3bc8>
   151bc:	ldr	r3, [r3, #4]
   151c0:	add	r2, r2, #1
   151c4:	cmp	r3, #0
   151c8:	bne	151bc <__assert_fail@plt+0x3bb8>
   151cc:	cmp	r0, r2
   151d0:	add	r1, r1, #8
   151d4:	movcc	r0, r2
   151d8:	cmp	r1, ip
   151dc:	bne	151a0 <__assert_fail@plt+0x3b9c>
   151e0:	bx	lr
   151e4:	mov	r0, #0
   151e8:	bx	lr
   151ec:	ldm	r0, {r1, r3}
   151f0:	push	{lr}		; (str lr, [sp, #-4]!)
   151f4:	cmp	r1, r3
   151f8:	bcs	1528c <__assert_fail@plt+0x3c88>
   151fc:	sub	ip, r3, #1
   15200:	mov	r2, #0
   15204:	sub	ip, ip, r1
   15208:	add	r3, r1, #16
   1520c:	bic	ip, ip, #7
   15210:	add	r1, r1, #8
   15214:	add	ip, ip, r3
   15218:	mov	lr, r2
   1521c:	b	1522c <__assert_fail@plt+0x3c28>
   15220:	add	r1, r1, #8
   15224:	cmp	r1, ip
   15228:	beq	15268 <__assert_fail@plt+0x3c64>
   1522c:	ldr	r3, [r1, #-8]
   15230:	cmp	r3, #0
   15234:	beq	15220 <__assert_fail@plt+0x3c1c>
   15238:	ldr	r3, [r1, #-4]
   1523c:	add	lr, lr, #1
   15240:	add	r2, r2, #1
   15244:	cmp	r3, #0
   15248:	beq	15220 <__assert_fail@plt+0x3c1c>
   1524c:	ldr	r3, [r3, #4]
   15250:	add	r2, r2, #1
   15254:	cmp	r3, #0
   15258:	bne	1524c <__assert_fail@plt+0x3c48>
   1525c:	add	r1, r1, #8
   15260:	cmp	r1, ip
   15264:	bne	1522c <__assert_fail@plt+0x3c28>
   15268:	ldr	r3, [r0, #12]
   1526c:	cmp	r3, lr
   15270:	movne	r0, #0
   15274:	bne	15288 <__assert_fail@plt+0x3c84>
   15278:	ldr	r0, [r0, #16]
   1527c:	sub	r0, r0, r2
   15280:	clz	r0, r0
   15284:	lsr	r0, r0, #5
   15288:	pop	{pc}		; (ldr pc, [sp], #4)
   1528c:	mov	r2, #0
   15290:	mov	lr, r2
   15294:	b	15268 <__assert_fail@plt+0x3c64>
   15298:	strd	r4, [sp, #-20]!	; 0xffffffec
   1529c:	mov	r4, r1
   152a0:	ldr	r2, [r0]
   152a4:	ldr	r1, [r0, #4]
   152a8:	ldr	r3, [r0, #16]
   152ac:	strd	r6, [sp, #8]
   152b0:	str	lr, [sp, #16]
   152b4:	sub	sp, sp, #12
   152b8:	cmp	r2, r1
   152bc:	ldrd	r6, [r0, #8]
   152c0:	bcs	153c0 <__assert_fail@plt+0x3dbc>
   152c4:	sub	ip, r1, #1
   152c8:	add	r1, r2, #16
   152cc:	sub	ip, ip, r2
   152d0:	add	r0, r2, #8
   152d4:	bic	ip, ip, #7
   152d8:	mov	r5, #0
   152dc:	add	ip, ip, r1
   152e0:	b	152f0 <__assert_fail@plt+0x3cec>
   152e4:	add	r0, r0, #8
   152e8:	cmp	r0, ip
   152ec:	beq	15330 <__assert_fail@plt+0x3d2c>
   152f0:	ldr	r2, [r0, #-8]
   152f4:	cmp	r2, #0
   152f8:	beq	152e4 <__assert_fail@plt+0x3ce0>
   152fc:	ldr	r2, [r0, #-4]
   15300:	mov	r1, #1
   15304:	cmp	r2, #0
   15308:	beq	1531c <__assert_fail@plt+0x3d18>
   1530c:	ldr	r2, [r2, #4]
   15310:	add	r1, r1, #1
   15314:	cmp	r2, #0
   15318:	bne	1530c <__assert_fail@plt+0x3d08>
   1531c:	cmp	r5, r1
   15320:	add	r0, r0, #8
   15324:	movcc	r5, r1
   15328:	cmp	r0, ip
   1532c:	bne	152f0 <__assert_fail@plt+0x3cec>
   15330:	mov	r1, #1
   15334:	mov	r0, r4
   15338:	movw	r2, #46708	; 0xb674
   1533c:	movt	r2, #1
   15340:	bl	114cc <__fprintf_chk@plt>
   15344:	mov	r3, r6
   15348:	mov	r1, #1
   1534c:	mov	r0, r4
   15350:	movw	r2, #46732	; 0xb68c
   15354:	movt	r2, #1
   15358:	bl	114cc <__fprintf_chk@plt>
   1535c:	vmov	s15, r7
   15360:	mov	r3, r7
   15364:	mov	r1, #1
   15368:	vldr	d5, [pc, #88]	; 153c8 <__assert_fail@plt+0x3dc4>
   1536c:	mov	r0, r4
   15370:	movw	r2, #46756	; 0xb6a4
   15374:	movt	r2, #1
   15378:	vcvt.f64.u32	d6, s15
   1537c:	vmov	s15, r6
   15380:	vmul.f64	d6, d6, d5
   15384:	vcvt.f64.u32	d7, s15
   15388:	vdiv.f64	d5, d6, d7
   1538c:	vstr	d5, [sp]
   15390:	bl	114cc <__fprintf_chk@plt>
   15394:	mov	r3, r5
   15398:	mov	r0, r4
   1539c:	movw	r2, #46792	; 0xb6c8
   153a0:	movt	r2, #1
   153a4:	mov	r1, #1
   153a8:	add	sp, sp, #12
   153ac:	ldrd	r4, [sp]
   153b0:	ldrd	r6, [sp, #8]
   153b4:	ldr	lr, [sp, #16]
   153b8:	add	sp, sp, #20
   153bc:	b	114cc <__fprintf_chk@plt>
   153c0:	mov	r5, #0
   153c4:	b	15330 <__assert_fail@plt+0x3d2c>
   153c8:	andeq	r0, r0, r0
   153cc:	subsmi	r0, r9, r0
   153d0:	strd	r4, [sp, #-16]!
   153d4:	mov	r5, r1
   153d8:	str	r6, [sp, #8]
   153dc:	mov	r6, r0
   153e0:	str	lr, [sp, #12]
   153e4:	bl	14dac <__assert_fail@plt+0x37a8>
   153e8:	ldr	r3, [r0]
   153ec:	cmp	r3, #0
   153f0:	beq	1542c <__assert_fail@plt+0x3e28>
   153f4:	mov	r4, r0
   153f8:	b	15400 <__assert_fail@plt+0x3dfc>
   153fc:	ldr	r3, [r4]
   15400:	cmp	r3, r5
   15404:	mov	r1, r3
   15408:	mov	r0, r5
   1540c:	beq	15444 <__assert_fail@plt+0x3e40>
   15410:	ldr	r3, [r6, #28]
   15414:	blx	r3
   15418:	cmp	r0, #0
   1541c:	bne	15440 <__assert_fail@plt+0x3e3c>
   15420:	ldr	r4, [r4, #4]
   15424:	cmp	r4, #0
   15428:	bne	153fc <__assert_fail@plt+0x3df8>
   1542c:	ldrd	r4, [sp]
   15430:	mov	r0, #0
   15434:	ldr	r6, [sp, #8]
   15438:	add	sp, sp, #12
   1543c:	pop	{pc}		; (ldr pc, [sp], #4)
   15440:	ldr	r5, [r4]
   15444:	mov	r0, r5
   15448:	ldrd	r4, [sp]
   1544c:	ldr	r6, [sp, #8]
   15450:	add	sp, sp, #12
   15454:	pop	{pc}		; (ldr pc, [sp], #4)
   15458:	ldr	r3, [r0, #16]
   1545c:	cmp	r3, #0
   15460:	beq	154b4 <__assert_fail@plt+0x3eb0>
   15464:	ldr	r3, [r0]
   15468:	ldr	r2, [r0, #4]
   1546c:	cmp	r3, r2
   15470:	bcs	154a8 <__assert_fail@plt+0x3ea4>
   15474:	ldr	r0, [r3]
   15478:	cmp	r0, #0
   1547c:	bxne	lr
   15480:	sub	r2, r2, #1
   15484:	sub	r2, r2, r3
   15488:	bic	r2, r2, #7
   1548c:	add	r2, r3, r2
   15490:	b	154a0 <__assert_fail@plt+0x3e9c>
   15494:	ldr	r0, [r3, #8]!
   15498:	cmp	r0, #0
   1549c:	bxne	lr
   154a0:	cmp	r3, r2
   154a4:	bne	15494 <__assert_fail@plt+0x3e90>
   154a8:	str	r4, [sp, #-8]!
   154ac:	str	lr, [sp, #4]
   154b0:	bl	115c8 <abort@plt>
   154b4:	mov	r0, r3
   154b8:	bx	lr
   154bc:	strd	r4, [sp, #-16]!
   154c0:	mov	r5, r0
   154c4:	mov	r4, r1
   154c8:	str	r6, [sp, #8]
   154cc:	str	lr, [sp, #12]
   154d0:	bl	14dac <__assert_fail@plt+0x37a8>
   154d4:	mov	r2, r0
   154d8:	mov	r3, r0
   154dc:	b	154e8 <__assert_fail@plt+0x3ee4>
   154e0:	cmp	r3, #0
   154e4:	beq	15500 <__assert_fail@plt+0x3efc>
   154e8:	ldm	r3, {r1, r3}
   154ec:	cmp	r1, r4
   154f0:	bne	154e0 <__assert_fail@plt+0x3edc>
   154f4:	cmp	r3, #0
   154f8:	ldrne	r0, [r3]
   154fc:	bne	15524 <__assert_fail@plt+0x3f20>
   15500:	ldr	r3, [r5, #4]
   15504:	b	15514 <__assert_fail@plt+0x3f10>
   15508:	ldr	r0, [r2]
   1550c:	cmp	r0, #0
   15510:	bne	15524 <__assert_fail@plt+0x3f20>
   15514:	add	r2, r2, #8
   15518:	cmp	r3, r2
   1551c:	bhi	15508 <__assert_fail@plt+0x3f04>
   15520:	mov	r0, #0
   15524:	ldrd	r4, [sp]
   15528:	ldr	r6, [sp, #8]
   1552c:	add	sp, sp, #12
   15530:	pop	{pc}		; (ldr pc, [sp], #4)
   15534:	strd	r4, [sp, #-12]!
   15538:	ldr	r5, [r0]
   1553c:	str	lr, [sp, #8]
   15540:	ldr	lr, [r0, #4]
   15544:	cmp	lr, r5
   15548:	bls	155d4 <__assert_fail@plt+0x3fd0>
   1554c:	mov	ip, #0
   15550:	ldr	r3, [r5]
   15554:	cmp	r3, #0
   15558:	bne	1557c <__assert_fail@plt+0x3f78>
   1555c:	add	r5, r5, #8
   15560:	cmp	lr, r5
   15564:	bhi	15550 <__assert_fail@plt+0x3f4c>
   15568:	mov	r2, ip
   1556c:	ldrd	r4, [sp]
   15570:	add	sp, sp, #8
   15574:	mov	r0, r2
   15578:	pop	{pc}		; (ldr pc, [sp], #4)
   1557c:	cmp	r2, ip
   15580:	bls	15568 <__assert_fail@plt+0x3f64>
   15584:	str	r3, [r1, ip, lsl #2]
   15588:	add	r4, ip, #1
   1558c:	add	lr, r1, ip, lsl #2
   15590:	ldr	r3, [r5, #4]
   15594:	cmp	r3, #0
   15598:	beq	155c8 <__assert_fail@plt+0x3fc4>
   1559c:	mov	ip, r4
   155a0:	cmp	r2, ip
   155a4:	add	ip, ip, #1
   155a8:	beq	1556c <__assert_fail@plt+0x3f68>
   155ac:	ldr	r4, [r3]
   155b0:	str	r4, [lr, #4]!
   155b4:	ldr	r3, [r3, #4]
   155b8:	cmp	r3, #0
   155bc:	bne	155a0 <__assert_fail@plt+0x3f9c>
   155c0:	ldr	lr, [r0, #4]
   155c4:	b	1555c <__assert_fail@plt+0x3f58>
   155c8:	mov	ip, r4
   155cc:	ldr	lr, [r0, #4]
   155d0:	b	1555c <__assert_fail@plt+0x3f58>
   155d4:	mov	r2, #0
   155d8:	b	1556c <__assert_fail@plt+0x3f68>
   155dc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   155e0:	ldr	r3, [r0, #4]
   155e4:	strd	r6, [sp, #8]
   155e8:	strd	r8, [sp, #16]
   155ec:	ldr	r8, [r0]
   155f0:	str	sl, [sp, #24]
   155f4:	str	lr, [sp, #28]
   155f8:	cmp	r3, r8
   155fc:	bls	15678 <__assert_fail@plt+0x4074>
   15600:	mov	r7, r2
   15604:	mov	r6, r1
   15608:	mov	r9, r0
   1560c:	mov	r5, #0
   15610:	ldr	r0, [r8]
   15614:	cmp	r0, #0
   15618:	bne	15644 <__assert_fail@plt+0x4040>
   1561c:	add	r8, r8, #8
   15620:	cmp	r3, r8
   15624:	bhi	15610 <__assert_fail@plt+0x400c>
   15628:	mov	r0, r5
   1562c:	ldrd	r4, [sp]
   15630:	ldrd	r6, [sp, #8]
   15634:	ldrd	r8, [sp, #16]
   15638:	ldr	sl, [sp, #24]
   1563c:	add	sp, sp, #28
   15640:	pop	{pc}		; (ldr pc, [sp], #4)
   15644:	mov	r4, r8
   15648:	b	15650 <__assert_fail@plt+0x404c>
   1564c:	ldr	r0, [r4]
   15650:	mov	r1, r7
   15654:	blx	r6
   15658:	cmp	r0, #0
   1565c:	beq	15628 <__assert_fail@plt+0x4024>
   15660:	ldr	r4, [r4, #4]
   15664:	add	r5, r5, #1
   15668:	cmp	r4, #0
   1566c:	bne	1564c <__assert_fail@plt+0x4048>
   15670:	ldr	r3, [r9, #4]
   15674:	b	1561c <__assert_fail@plt+0x4018>
   15678:	mov	r5, #0
   1567c:	b	15628 <__assert_fail@plt+0x4024>
   15680:	ldrb	r2, [r0]
   15684:	cmp	r2, #0
   15688:	beq	156b4 <__assert_fail@plt+0x40b0>
   1568c:	mov	r3, #0
   15690:	rsb	r3, r3, r3, lsl #5
   15694:	add	r3, r3, r2
   15698:	ldrb	r2, [r0, #1]!
   1569c:	udiv	ip, r3, r1
   156a0:	cmp	r2, #0
   156a4:	mls	r3, r1, ip, r3
   156a8:	bne	15690 <__assert_fail@plt+0x408c>
   156ac:	mov	r0, r3
   156b0:	bx	lr
   156b4:	mov	r3, r2
   156b8:	mov	r0, r3
   156bc:	bx	lr
   156c0:	movw	r3, #46688	; 0xb660
   156c4:	movt	r3, #1
   156c8:	strd	r4, [sp, #-8]!
   156cc:	ldrd	r4, [r3]
   156d0:	ldr	r1, [r3, #16]
   156d4:	ldrd	r2, [r3, #8]
   156d8:	strd	r4, [r0]
   156dc:	ldrd	r4, [sp]
   156e0:	add	sp, sp, #8
   156e4:	strd	r2, [r0, #8]
   156e8:	str	r1, [r0, #16]
   156ec:	bx	lr
   156f0:	strd	r4, [sp, #-20]!	; 0xffffffec
   156f4:	cmp	r2, #0
   156f8:	movw	ip, #19868	; 0x4d9c
   156fc:	movt	ip, #1
   15700:	strd	r6, [sp, #8]
   15704:	movne	r6, r2
   15708:	str	lr, [sp, #16]
   1570c:	sub	sp, sp, #12
   15710:	movw	lr, #19852	; 0x4d8c
   15714:	movt	lr, #1
   15718:	mov	r7, r1
   1571c:	moveq	r6, lr
   15720:	cmp	r3, #0
   15724:	str	r0, [sp, #4]
   15728:	mov	r0, #40	; 0x28
   1572c:	movne	r5, r3
   15730:	moveq	r5, ip
   15734:	bl	19770 <__assert_fail@plt+0x816c>
   15738:	subs	r4, r0, #0
   1573c:	beq	157d4 <__assert_fail@plt+0x41d0>
   15740:	cmp	r7, #0
   15744:	add	r0, r4, #20
   15748:	beq	157ec <__assert_fail@plt+0x41e8>
   1574c:	str	r7, [r4, #20]
   15750:	bl	14f14 <__assert_fail@plt+0x3910>
   15754:	cmp	r0, #0
   15758:	beq	15834 <__assert_fail@plt+0x4230>
   1575c:	ldrb	r3, [r7, #16]
   15760:	cmp	r3, #0
   15764:	beq	15844 <__assert_fail@plt+0x4240>
   15768:	ldr	r0, [sp, #4]
   1576c:	bl	14d00 <__assert_fail@plt+0x36fc>
   15770:	lsrs	r2, r0, #30
   15774:	movne	r7, #1
   15778:	moveq	r7, #0
   1577c:	tst	r0, #536870912	; 0x20000000
   15780:	bne	1582c <__assert_fail@plt+0x4228>
   15784:	cmp	r7, #0
   15788:	bne	1582c <__assert_fail@plt+0x4228>
   1578c:	cmp	r0, #0
   15790:	str	r0, [r4, #8]
   15794:	beq	15834 <__assert_fail@plt+0x4230>
   15798:	mov	r1, #8
   1579c:	bl	196fc <__assert_fail@plt+0x80f8>
   157a0:	cmp	r0, #0
   157a4:	str	r0, [r4]
   157a8:	beq	15834 <__assert_fail@plt+0x4230>
   157ac:	ldr	r3, [r4, #8]
   157b0:	str	r7, [r4, #12]
   157b4:	str	r7, [r4, #16]
   157b8:	str	r6, [r4, #24]
   157bc:	str	r5, [r4, #28]
   157c0:	add	r0, r0, r3, lsl #3
   157c4:	ldr	r3, [sp, #32]
   157c8:	str	r0, [r4, #4]
   157cc:	str	r3, [r4, #32]
   157d0:	str	r7, [r4, #36]	; 0x24
   157d4:	mov	r0, r4
   157d8:	add	sp, sp, #12
   157dc:	ldrd	r4, [sp]
   157e0:	ldrd	r6, [sp, #8]
   157e4:	add	sp, sp, #16
   157e8:	pop	{pc}		; (ldr pc, [sp], #4)
   157ec:	movw	r3, #46688	; 0xb660
   157f0:	movt	r3, #1
   157f4:	str	r3, [r4, #20]
   157f8:	bl	14f14 <__assert_fail@plt+0x3910>
   157fc:	cmp	r0, #0
   15800:	beq	15834 <__assert_fail@plt+0x4230>
   15804:	vldr	s13, [pc, #64]	; 1584c <__assert_fail@plt+0x4248>
   15808:	vldr	s15, [sp, #4]
   1580c:	vldr	s14, [pc, #60]	; 15850 <__assert_fail@plt+0x424c>
   15810:	vcvt.f32.u32	s12, s15
   15814:	vdiv.f32	s15, s12, s13
   15818:	vcmpe.f32	s15, s14
   1581c:	vmrs	APSR_nzcv, fpscr
   15820:	vcvtlt.u32.f32	s15, s15
   15824:	vstrlt	s15, [sp, #4]
   15828:	blt	15768 <__assert_fail@plt+0x4164>
   1582c:	mov	r3, #0
   15830:	str	r3, [r4, #8]
   15834:	mov	r0, r4
   15838:	mov	r4, #0
   1583c:	bl	19e14 <__assert_fail@plt+0x8810>
   15840:	b	157d4 <__assert_fail@plt+0x41d0>
   15844:	vldr	s13, [r7, #8]
   15848:	b	15808 <__assert_fail@plt+0x4204>
   1584c:	svccc	0x004ccccd
   15850:	svcmi	0x00800000
   15854:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15858:	mov	r5, r0
   1585c:	ldr	r2, [r0, #4]
   15860:	strd	r6, [sp, #8]
   15864:	ldr	r6, [r0]
   15868:	str	r8, [sp, #16]
   1586c:	str	lr, [sp, #20]
   15870:	cmp	r6, r2
   15874:	addcc	r6, r6, #8
   15878:	movcc	r7, #0
   1587c:	bcc	15890 <__assert_fail@plt+0x428c>
   15880:	b	15904 <__assert_fail@plt+0x4300>
   15884:	cmp	r2, r6
   15888:	add	r6, r6, #8
   1588c:	bls	15904 <__assert_fail@plt+0x4300>
   15890:	ldr	r3, [r6, #-8]
   15894:	cmp	r3, #0
   15898:	beq	15884 <__assert_fail@plt+0x4280>
   1589c:	ldr	r4, [r6, #-4]
   158a0:	ldr	r2, [r5, #32]
   158a4:	cmp	r4, #0
   158a8:	beq	158dc <__assert_fail@plt+0x42d8>
   158ac:	cmp	r2, #0
   158b0:	beq	158c0 <__assert_fail@plt+0x42bc>
   158b4:	ldr	r0, [r4]
   158b8:	blx	r2
   158bc:	ldr	r2, [r5, #32]
   158c0:	ldr	r3, [r4, #4]
   158c4:	ldr	r1, [r5, #36]	; 0x24
   158c8:	str	r7, [r4]
   158cc:	str	r1, [r4, #4]
   158d0:	str	r4, [r5, #36]	; 0x24
   158d4:	subs	r4, r3, #0
   158d8:	bne	158ac <__assert_fail@plt+0x42a8>
   158dc:	cmp	r2, #0
   158e0:	beq	158ec <__assert_fail@plt+0x42e8>
   158e4:	ldr	r0, [r6, #-8]
   158e8:	blx	r2
   158ec:	str	r7, [r6, #-8]
   158f0:	str	r7, [r6, #-4]
   158f4:	ldr	r2, [r5, #4]
   158f8:	cmp	r2, r6
   158fc:	add	r6, r6, #8
   15900:	bhi	15890 <__assert_fail@plt+0x428c>
   15904:	mov	r3, #0
   15908:	ldrd	r6, [sp, #8]
   1590c:	ldr	r8, [sp, #16]
   15910:	str	r3, [r5, #12]
   15914:	str	r3, [r5, #16]
   15918:	ldrd	r4, [sp]
   1591c:	add	sp, sp, #20
   15920:	pop	{pc}		; (ldr pc, [sp], #4)
   15924:	strd	r4, [sp, #-16]!
   15928:	ldr	r2, [r0, #32]
   1592c:	ldr	r5, [r0]
   15930:	ldr	r3, [r0, #4]
   15934:	cmp	r2, #0
   15938:	str	r6, [sp, #8]
   1593c:	mov	r6, r0
   15940:	str	lr, [sp, #12]
   15944:	beq	159ac <__assert_fail@plt+0x43a8>
   15948:	ldr	r2, [r0, #16]
   1594c:	cmp	r2, #0
   15950:	beq	159ac <__assert_fail@plt+0x43a8>
   15954:	cmp	r5, r3
   15958:	bcc	1596c <__assert_fail@plt+0x4368>
   1595c:	b	159e0 <__assert_fail@plt+0x43dc>
   15960:	add	r5, r5, #8
   15964:	cmp	r3, r5
   15968:	bls	159a8 <__assert_fail@plt+0x43a4>
   1596c:	ldr	r0, [r5]
   15970:	cmp	r0, #0
   15974:	beq	15960 <__assert_fail@plt+0x435c>
   15978:	mov	r4, r5
   1597c:	b	15984 <__assert_fail@plt+0x4380>
   15980:	ldr	r0, [r4]
   15984:	ldr	r3, [r6, #32]
   15988:	blx	r3
   1598c:	ldr	r4, [r4, #4]
   15990:	cmp	r4, #0
   15994:	bne	15980 <__assert_fail@plt+0x437c>
   15998:	ldr	r3, [r6, #4]
   1599c:	add	r5, r5, #8
   159a0:	cmp	r3, r5
   159a4:	bhi	1596c <__assert_fail@plt+0x4368>
   159a8:	ldr	r5, [r6]
   159ac:	cmp	r5, r3
   159b0:	bcs	159e0 <__assert_fail@plt+0x43dc>
   159b4:	ldr	r0, [r5, #4]
   159b8:	cmp	r0, #0
   159bc:	beq	159d4 <__assert_fail@plt+0x43d0>
   159c0:	ldr	r4, [r0, #4]
   159c4:	bl	19e14 <__assert_fail@plt+0x8810>
   159c8:	subs	r0, r4, #0
   159cc:	bne	159c0 <__assert_fail@plt+0x43bc>
   159d0:	ldr	r3, [r6, #4]
   159d4:	add	r5, r5, #8
   159d8:	cmp	r3, r5
   159dc:	bhi	159b4 <__assert_fail@plt+0x43b0>
   159e0:	ldr	r0, [r6, #36]	; 0x24
   159e4:	cmp	r0, #0
   159e8:	beq	159fc <__assert_fail@plt+0x43f8>
   159ec:	ldr	r4, [r0, #4]
   159f0:	bl	19e14 <__assert_fail@plt+0x8810>
   159f4:	subs	r0, r4, #0
   159f8:	bne	159ec <__assert_fail@plt+0x43e8>
   159fc:	ldr	r0, [r6]
   15a00:	bl	19e14 <__assert_fail@plt+0x8810>
   15a04:	mov	r0, r6
   15a08:	ldrd	r4, [sp]
   15a0c:	ldr	r6, [sp, #8]
   15a10:	ldr	lr, [sp, #12]
   15a14:	add	sp, sp, #16
   15a18:	b	19e14 <__assert_fail@plt+0x8810>
   15a1c:	ldr	r3, [r0, #20]
   15a20:	strd	r4, [sp, #-20]!	; 0xffffffec
   15a24:	ldrb	r2, [r3, #16]
   15a28:	strd	r6, [sp, #8]
   15a2c:	mov	r6, r0
   15a30:	str	lr, [sp, #16]
   15a34:	sub	sp, sp, #52	; 0x34
   15a38:	str	r1, [sp, #4]
   15a3c:	cmp	r2, #0
   15a40:	bne	15a6c <__assert_fail@plt+0x4468>
   15a44:	vmov	s15, r1
   15a48:	vldr	s13, [r3, #8]
   15a4c:	vldr	s14, [pc, #340]	; 15ba8 <__assert_fail@plt+0x45a4>
   15a50:	vcvt.f32.u32	s12, s15
   15a54:	vdiv.f32	s15, s12, s13
   15a58:	vcmpe.f32	s15, s14
   15a5c:	vmrs	APSR_nzcv, fpscr
   15a60:	vcvtlt.u32.f32	s15, s15
   15a64:	vstrlt	s15, [sp, #4]
   15a68:	bge	15a9c <__assert_fail@plt+0x4498>
   15a6c:	ldr	r0, [sp, #4]
   15a70:	bl	14d00 <__assert_fail@plt+0x36fc>
   15a74:	lsrs	r3, r0, #30
   15a78:	mov	r5, r0
   15a7c:	movne	r4, #1
   15a80:	moveq	r4, #0
   15a84:	tst	r0, #536870912	; 0x20000000
   15a88:	movne	r4, #1
   15a8c:	cmp	r0, #0
   15a90:	moveq	r4, #1
   15a94:	cmp	r4, #0
   15a98:	beq	15ab8 <__assert_fail@plt+0x44b4>
   15a9c:	mov	r4, #0
   15aa0:	mov	r0, r4
   15aa4:	add	sp, sp, #52	; 0x34
   15aa8:	ldrd	r4, [sp]
   15aac:	ldrd	r6, [sp, #8]
   15ab0:	add	sp, sp, #16
   15ab4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ab8:	ldr	r3, [r6, #8]
   15abc:	cmp	r3, r0
   15ac0:	beq	15b70 <__assert_fail@plt+0x456c>
   15ac4:	mov	r1, #8
   15ac8:	bl	196fc <__assert_fail@plt+0x80f8>
   15acc:	cmp	r0, #0
   15ad0:	str	r0, [sp, #8]
   15ad4:	beq	15a9c <__assert_fail@plt+0x4498>
   15ad8:	add	r3, r0, r5, lsl #3
   15adc:	ldr	r7, [r6, #20]
   15ae0:	mov	r2, r4
   15ae4:	add	r0, sp, #8
   15ae8:	mov	r1, r6
   15aec:	ldr	lr, [r6, #28]
   15af0:	str	r3, [sp, #12]
   15af4:	str	r5, [sp, #16]
   15af8:	ldr	r5, [r6, #24]
   15afc:	str	r4, [sp, #20]
   15b00:	ldr	ip, [r6, #32]
   15b04:	str	r4, [sp, #24]
   15b08:	ldr	r3, [r6, #36]	; 0x24
   15b0c:	str	r7, [sp, #28]
   15b10:	str	r5, [sp, #32]
   15b14:	str	lr, [sp, #36]	; 0x24
   15b18:	str	ip, [sp, #40]	; 0x28
   15b1c:	str	r3, [sp, #44]	; 0x2c
   15b20:	bl	14fc8 <__assert_fail@plt+0x39c4>
   15b24:	subs	r4, r0, #0
   15b28:	bne	15b78 <__assert_fail@plt+0x4574>
   15b2c:	ldr	r3, [sp, #44]	; 0x2c
   15b30:	mov	r2, #1
   15b34:	add	r1, sp, #8
   15b38:	mov	r0, r6
   15b3c:	str	r3, [r6, #36]	; 0x24
   15b40:	bl	14fc8 <__assert_fail@plt+0x39c4>
   15b44:	cmp	r0, #0
   15b48:	beq	15ba4 <__assert_fail@plt+0x45a0>
   15b4c:	add	r1, sp, #8
   15b50:	mov	r0, r6
   15b54:	mov	r2, r4
   15b58:	bl	14fc8 <__assert_fail@plt+0x39c4>
   15b5c:	cmp	r0, #0
   15b60:	beq	15ba4 <__assert_fail@plt+0x45a0>
   15b64:	ldr	r0, [sp, #8]
   15b68:	bl	19e14 <__assert_fail@plt+0x8810>
   15b6c:	b	15aa0 <__assert_fail@plt+0x449c>
   15b70:	mov	r4, #1
   15b74:	b	15aa0 <__assert_fail@plt+0x449c>
   15b78:	ldr	r0, [r6]
   15b7c:	bl	19e14 <__assert_fail@plt+0x8810>
   15b80:	ldrd	r2, [sp, #8]
   15b84:	ldr	r1, [sp, #16]
   15b88:	strd	r2, [r6]
   15b8c:	ldr	r2, [sp, #20]
   15b90:	str	r1, [r6, #8]
   15b94:	ldr	r3, [sp, #44]	; 0x2c
   15b98:	str	r2, [r6, #12]
   15b9c:	str	r3, [r6, #36]	; 0x24
   15ba0:	b	15aa0 <__assert_fail@plt+0x449c>
   15ba4:	bl	115c8 <abort@plt>
   15ba8:	svcmi	0x00800000
   15bac:	strd	r4, [sp, #-16]!
   15bb0:	str	r6, [sp, #8]
   15bb4:	subs	r6, r1, #0
   15bb8:	str	lr, [sp, #12]
   15bbc:	sub	sp, sp, #8
   15bc0:	beq	15d40 <__assert_fail@plt+0x473c>
   15bc4:	mov	r3, #0
   15bc8:	mov	r5, r2
   15bcc:	add	r2, sp, #4
   15bd0:	mov	r4, r0
   15bd4:	bl	14dec <__assert_fail@plt+0x37e8>
   15bd8:	subs	r3, r0, #0
   15bdc:	beq	15c08 <__assert_fail@plt+0x4604>
   15be0:	cmp	r5, #0
   15be4:	moveq	r0, r5
   15be8:	beq	15bf4 <__assert_fail@plt+0x45f0>
   15bec:	mov	r0, #0
   15bf0:	str	r3, [r5]
   15bf4:	add	sp, sp, #8
   15bf8:	ldrd	r4, [sp]
   15bfc:	ldr	r6, [sp, #8]
   15c00:	add	sp, sp, #12
   15c04:	pop	{pc}		; (ldr pc, [sp], #4)
   15c08:	vldr	s15, [r4, #8]
   15c0c:	vldr	s14, [r4, #12]
   15c10:	ldr	r3, [r4, #20]
   15c14:	vcvt.f32.u32	s15, s15
   15c18:	vcvt.f32.u32	s14, s14
   15c1c:	vldr	s13, [r3, #8]
   15c20:	vmul.f32	s15, s15, s13
   15c24:	vcmpe.f32	s14, s15
   15c28:	vmrs	APSR_nzcv, fpscr
   15c2c:	bgt	15c74 <__assert_fail@plt+0x4670>
   15c30:	ldr	r2, [sp, #4]
   15c34:	ldr	r3, [r2]
   15c38:	cmp	r3, #0
   15c3c:	beq	15cd0 <__assert_fail@plt+0x46cc>
   15c40:	ldr	r3, [r4, #36]	; 0x24
   15c44:	cmp	r3, #0
   15c48:	beq	15cf4 <__assert_fail@plt+0x46f0>
   15c4c:	ldr	r1, [r3, #4]
   15c50:	str	r1, [r4, #36]	; 0x24
   15c54:	ldr	r1, [r4, #16]
   15c58:	mov	r0, #1
   15c5c:	ldr	ip, [r2, #4]
   15c60:	add	r1, r1, r0
   15c64:	stm	r3, {r6, ip}
   15c68:	str	r3, [r2, #4]
   15c6c:	str	r1, [r4, #16]
   15c70:	b	15bf4 <__assert_fail@plt+0x45f0>
   15c74:	add	r0, r4, #20
   15c78:	bl	14f14 <__assert_fail@plt+0x3910>
   15c7c:	vldr	s15, [r4, #8]
   15c80:	vldr	s14, [r4, #12]
   15c84:	ldr	r3, [r4, #20]
   15c88:	vcvt.f32.u32	s15, s15
   15c8c:	vcvt.f32.u32	s14, s14
   15c90:	vldr	s13, [r3, #8]
   15c94:	vmul.f32	s12, s13, s15
   15c98:	vcmpe.f32	s14, s12
   15c9c:	vmrs	APSR_nzcv, fpscr
   15ca0:	ble	15c30 <__assert_fail@plt+0x462c>
   15ca4:	vldr	s14, [r3, #12]
   15ca8:	ldrb	r2, [r3, #16]
   15cac:	vmul.f32	s15, s15, s14
   15cb0:	vldr	s14, [pc, #140]	; 15d44 <__assert_fail@plt+0x4740>
   15cb4:	cmp	r2, #0
   15cb8:	vmuleq.f32	s15, s15, s13
   15cbc:	vcmpe.f32	s15, s14
   15cc0:	vmrs	APSR_nzcv, fpscr
   15cc4:	blt	15d0c <__assert_fail@plt+0x4708>
   15cc8:	mvn	r0, #0
   15ccc:	b	15bf4 <__assert_fail@plt+0x45f0>
   15cd0:	ldr	r1, [r4, #12]
   15cd4:	mov	r0, #1
   15cd8:	ldr	r3, [r4, #16]
   15cdc:	str	r6, [r2]
   15ce0:	add	r2, r1, r0
   15ce4:	add	r3, r3, r0
   15ce8:	str	r2, [r4, #12]
   15cec:	str	r3, [r4, #16]
   15cf0:	b	15bf4 <__assert_fail@plt+0x45f0>
   15cf4:	mov	r0, #8
   15cf8:	bl	19770 <__assert_fail@plt+0x816c>
   15cfc:	subs	r3, r0, #0
   15d00:	beq	15cc8 <__assert_fail@plt+0x46c4>
   15d04:	ldr	r2, [sp, #4]
   15d08:	b	15c54 <__assert_fail@plt+0x4650>
   15d0c:	vcvt.u32.f32	s15, s15
   15d10:	mov	r0, r4
   15d14:	vmov	r1, s15
   15d18:	bl	15a1c <__assert_fail@plt+0x4418>
   15d1c:	cmp	r0, #0
   15d20:	beq	15cc8 <__assert_fail@plt+0x46c4>
   15d24:	add	r2, sp, #4
   15d28:	mov	r3, #0
   15d2c:	mov	r1, r6
   15d30:	mov	r0, r4
   15d34:	bl	14dec <__assert_fail@plt+0x37e8>
   15d38:	cmp	r0, #0
   15d3c:	beq	15c30 <__assert_fail@plt+0x462c>
   15d40:	bl	115c8 <abort@plt>
   15d44:	svcmi	0x00800000
   15d48:	str	r4, [sp, #-8]!
   15d4c:	mov	r4, r1
   15d50:	str	lr, [sp, #4]
   15d54:	sub	sp, sp, #8
   15d58:	add	r2, sp, #4
   15d5c:	bl	15bac <__assert_fail@plt+0x45a8>
   15d60:	cmn	r0, #1
   15d64:	moveq	r0, #0
   15d68:	beq	15d78 <__assert_fail@plt+0x4774>
   15d6c:	cmp	r0, #0
   15d70:	ldreq	r0, [sp, #4]
   15d74:	movne	r0, r4
   15d78:	add	sp, sp, #8
   15d7c:	ldr	r4, [sp]
   15d80:	add	sp, sp, #4
   15d84:	pop	{pc}		; (ldr pc, [sp], #4)
   15d88:	strd	r4, [sp, #-16]!
   15d8c:	mov	r3, #1
   15d90:	mov	r4, r0
   15d94:	str	r6, [sp, #8]
   15d98:	str	lr, [sp, #12]
   15d9c:	sub	sp, sp, #8
   15da0:	add	r2, sp, #4
   15da4:	bl	14dec <__assert_fail@plt+0x37e8>
   15da8:	subs	r5, r0, #0
   15dac:	beq	15dcc <__assert_fail@plt+0x47c8>
   15db0:	ldr	r2, [sp, #4]
   15db4:	ldr	r3, [r4, #16]
   15db8:	ldr	r2, [r2]
   15dbc:	sub	r3, r3, #1
   15dc0:	str	r3, [r4, #16]
   15dc4:	cmp	r2, #0
   15dc8:	beq	15de4 <__assert_fail@plt+0x47e0>
   15dcc:	mov	r0, r5
   15dd0:	add	sp, sp, #8
   15dd4:	ldrd	r4, [sp]
   15dd8:	ldr	r6, [sp, #8]
   15ddc:	add	sp, sp, #12
   15de0:	pop	{pc}		; (ldr pc, [sp], #4)
   15de4:	vldr	s15, [r4, #8]
   15de8:	ldr	r3, [r4, #12]
   15dec:	ldr	r2, [r4, #20]
   15df0:	vcvt.f32.u32	s15, s15
   15df4:	sub	r3, r3, #1
   15df8:	vmov	s14, r3
   15dfc:	vldr	s13, [r2]
   15e00:	str	r3, [r4, #12]
   15e04:	vmul.f32	s15, s15, s13
   15e08:	vcvt.f32.u32	s14, s14
   15e0c:	vcmpe.f32	s14, s15
   15e10:	vmrs	APSR_nzcv, fpscr
   15e14:	bpl	15dcc <__assert_fail@plt+0x47c8>
   15e18:	add	r0, r4, #20
   15e1c:	bl	14f14 <__assert_fail@plt+0x3910>
   15e20:	vldr	s15, [r4, #8]
   15e24:	vldr	s13, [r4, #12]
   15e28:	ldr	r3, [r4, #20]
   15e2c:	vcvt.f32.u32	s15, s15
   15e30:	vcvt.f32.u32	s13, s13
   15e34:	vldr	s14, [r3]
   15e38:	vmul.f32	s14, s15, s14
   15e3c:	vcmpe.f32	s13, s14
   15e40:	vmrs	APSR_nzcv, fpscr
   15e44:	bpl	15dcc <__assert_fail@plt+0x47c8>
   15e48:	ldrb	r2, [r3, #16]
   15e4c:	mov	r0, r4
   15e50:	vldr	s14, [r3, #4]
   15e54:	cmp	r2, #0
   15e58:	vmul.f32	s15, s15, s14
   15e5c:	vldreq	s14, [r3, #8]
   15e60:	vmuleq.f32	s15, s15, s14
   15e64:	vcvt.u32.f32	s15, s15
   15e68:	vmov	r1, s15
   15e6c:	bl	15a1c <__assert_fail@plt+0x4418>
   15e70:	cmp	r0, #0
   15e74:	bne	15dcc <__assert_fail@plt+0x47c8>
   15e78:	ldr	r0, [r4, #36]	; 0x24
   15e7c:	cmp	r0, #0
   15e80:	beq	15e94 <__assert_fail@plt+0x4890>
   15e84:	ldr	r6, [r0, #4]
   15e88:	bl	19e14 <__assert_fail@plt+0x8810>
   15e8c:	subs	r0, r6, #0
   15e90:	bne	15e84 <__assert_fail@plt+0x4880>
   15e94:	mov	r3, #0
   15e98:	str	r3, [r4, #36]	; 0x24
   15e9c:	b	15dcc <__assert_fail@plt+0x47c8>
   15ea0:	b	15d88 <__assert_fail@plt+0x4784>
   15ea4:	mov	r3, #0
   15ea8:	mov	r2, #1
   15eac:	str	r1, [r0]
   15eb0:	str	r1, [r0, #4]
   15eb4:	str	r1, [r0, #8]
   15eb8:	str	r1, [r0, #12]
   15ebc:	str	r1, [r0, #16]
   15ec0:	str	r3, [r0, #20]
   15ec4:	str	r3, [r0, #24]
   15ec8:	strb	r2, [r0, #28]
   15ecc:	bx	lr
   15ed0:	ldrb	r0, [r0, #28]
   15ed4:	bx	lr
   15ed8:	ldrb	ip, [r0, #28]
   15edc:	mov	r2, r0
   15ee0:	ldr	r3, [r0, #20]
   15ee4:	eor	ip, ip, #1
   15ee8:	add	r3, ip, r3
   15eec:	and	r3, r3, #3
   15ef0:	ldr	r0, [r0, r3, lsl #2]
   15ef4:	str	r1, [r2, r3, lsl #2]
   15ef8:	ldr	r1, [r2, #24]
   15efc:	str	r3, [r2, #20]
   15f00:	cmp	r1, r3
   15f04:	bne	15f14 <__assert_fail@plt+0x4910>
   15f08:	add	ip, ip, r1
   15f0c:	and	ip, ip, #3
   15f10:	str	ip, [r2, #24]
   15f14:	mov	r3, #0
   15f18:	strb	r3, [r2, #28]
   15f1c:	bx	lr
   15f20:	ldrb	r3, [r0, #28]
   15f24:	cmp	r3, #0
   15f28:	bne	15f64 <__assert_fail@plt+0x4960>
   15f2c:	ldr	r1, [r0, #16]
   15f30:	ldr	r3, [r0, #20]
   15f34:	ldr	r2, [r0, r3, lsl #2]
   15f38:	str	r1, [r0, r3, lsl #2]
   15f3c:	ldr	r1, [r0, #24]
   15f40:	cmp	r3, r1
   15f44:	moveq	r3, #1
   15f48:	strbeq	r3, [r0, #28]
   15f4c:	beq	15f5c <__assert_fail@plt+0x4958>
   15f50:	add	r3, r3, #3
   15f54:	and	r3, r3, #3
   15f58:	str	r3, [r0, #20]
   15f5c:	mov	r0, r2
   15f60:	bx	lr
   15f64:	str	r4, [sp, #-8]!
   15f68:	str	lr, [sp, #4]
   15f6c:	bl	115c8 <abort@plt>
   15f70:	push	{r2, r3}
   15f74:	push	{lr}		; (str lr, [sp, #-4]!)
   15f78:	sub	sp, sp, #12
   15f7c:	ldr	r2, [sp, #16]
   15f80:	ands	r3, r2, #64	; 0x40
   15f84:	bne	15fa0 <__assert_fail@plt+0x499c>
   15f88:	bl	1146c <openat64@plt>
   15f8c:	bl	18bc0 <__assert_fail@plt+0x75bc>
   15f90:	add	sp, sp, #12
   15f94:	pop	{lr}		; (ldr lr, [sp], #4)
   15f98:	add	sp, sp, #8
   15f9c:	bx	lr
   15fa0:	add	ip, sp, #20
   15fa4:	ldr	r3, [sp, #20]
   15fa8:	str	ip, [sp, #4]
   15fac:	b	15f88 <__assert_fail@plt+0x4984>
   15fb0:	orr	r2, r2, #540672	; 0x84000
   15fb4:	strd	r4, [sp, #-16]!
   15fb8:	orr	r2, r2, #2304	; 0x900
   15fbc:	str	r6, [sp, #8]
   15fc0:	mov	r6, r3
   15fc4:	str	lr, [sp, #12]
   15fc8:	bl	15f70 <__assert_fail@plt+0x496c>
   15fcc:	subs	r5, r0, #0
   15fd0:	movlt	r4, #0
   15fd4:	blt	15fe8 <__assert_fail@plt+0x49e4>
   15fd8:	bl	11550 <fdopendir@plt>
   15fdc:	subs	r4, r0, #0
   15fe0:	beq	15ffc <__assert_fail@plt+0x49f8>
   15fe4:	str	r5, [r6]
   15fe8:	mov	r0, r4
   15fec:	ldrd	r4, [sp]
   15ff0:	ldr	r6, [sp, #8]
   15ff4:	add	sp, sp, #12
   15ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   15ffc:	bl	11484 <__errno_location@plt>
   16000:	mov	r6, r0
   16004:	mov	r0, r5
   16008:	ldr	r5, [r6]
   1600c:	bl	115d4 <close@plt>
   16010:	b	15fe4 <__assert_fail@plt+0x49e0>
   16014:	strd	r4, [sp, #-16]!
   16018:	subs	r4, r0, #0
   1601c:	str	r6, [sp, #8]
   16020:	str	lr, [sp, #12]
   16024:	beq	160bc <__assert_fail@plt+0x4ab8>
   16028:	mov	r1, #47	; 0x2f
   1602c:	bl	1152c <strrchr@plt>
   16030:	subs	r5, r0, #0
   16034:	beq	16094 <__assert_fail@plt+0x4a90>
   16038:	add	r6, r5, #1
   1603c:	sub	r3, r6, r4
   16040:	cmp	r3, #6
   16044:	ble	16094 <__assert_fail@plt+0x4a90>
   16048:	movw	r1, #46872	; 0xb718
   1604c:	movt	r1, #1
   16050:	mov	r2, #7
   16054:	sub	r0, r5, #6
   16058:	bl	115bc <strncmp@plt>
   1605c:	cmp	r0, #0
   16060:	bne	16094 <__assert_fail@plt+0x4a90>
   16064:	movw	r1, #46880	; 0xb720
   16068:	movt	r1, #1
   1606c:	mov	r2, #3
   16070:	mov	r0, r6
   16074:	bl	115bc <strncmp@plt>
   16078:	cmp	r0, #0
   1607c:	movne	r4, r6
   16080:	bne	16094 <__assert_fail@plt+0x4a90>
   16084:	add	r4, r5, #4
   16088:	movw	r3, #49584	; 0xc1b0
   1608c:	movt	r3, #2
   16090:	str	r4, [r3]
   16094:	movw	r2, #49676	; 0xc20c
   16098:	movt	r2, #2
   1609c:	ldr	r6, [sp, #8]
   160a0:	movw	r3, #49588	; 0xc1b4
   160a4:	movt	r3, #2
   160a8:	str	r4, [r2]
   160ac:	str	r4, [r3]
   160b0:	ldrd	r4, [sp]
   160b4:	add	sp, sp, #12
   160b8:	pop	{pc}		; (ldr pc, [sp], #4)
   160bc:	movw	r3, #49600	; 0xc1c0
   160c0:	movt	r3, #2
   160c4:	movw	r0, #46816	; 0xb6e0
   160c8:	movt	r0, #1
   160cc:	ldr	r3, [r3]
   160d0:	mov	r2, #55	; 0x37
   160d4:	mov	r1, #1
   160d8:	bl	11364 <fwrite@plt>
   160dc:	bl	115c8 <abort@plt>
   160e0:	strd	r4, [sp, #-16]!
   160e4:	mov	r4, #0
   160e8:	mov	r5, #0
   160ec:	cmp	r1, #10
   160f0:	str	r6, [sp, #8]
   160f4:	strd	r4, [r0]
   160f8:	strd	r4, [r0, #8]
   160fc:	str	lr, [sp, #12]
   16100:	strd	r4, [r0, #16]
   16104:	strd	r4, [r0, #24]
   16108:	strd	r4, [r0, #32]
   1610c:	strd	r4, [r0, #40]	; 0x28
   16110:	beq	16128 <__assert_fail@plt+0x4b24>
   16114:	ldrd	r4, [sp]
   16118:	str	r1, [r0]
   1611c:	ldr	r6, [sp, #8]
   16120:	add	sp, sp, #12
   16124:	pop	{pc}		; (ldr pc, [sp], #4)
   16128:	bl	115c8 <abort@plt>
   1612c:	mov	r2, #5
   16130:	strd	r4, [sp, #-16]!
   16134:	mov	r5, r0
   16138:	str	r6, [sp, #8]
   1613c:	mov	r6, r1
   16140:	mov	r1, r0
   16144:	mov	r0, #0
   16148:	str	lr, [sp, #12]
   1614c:	bl	112f8 <dcgettext@plt>
   16150:	cmp	r5, r0
   16154:	mov	r4, r0
   16158:	beq	16170 <__assert_fail@plt+0x4b6c>
   1615c:	mov	r0, r4
   16160:	ldrd	r4, [sp]
   16164:	ldr	r6, [sp, #8]
   16168:	add	sp, sp, #12
   1616c:	pop	{pc}		; (ldr pc, [sp], #4)
   16170:	bl	19f44 <__assert_fail@plt+0x8940>
   16174:	ldrb	r3, [r0]
   16178:	bic	r3, r3, #32
   1617c:	cmp	r3, #85	; 0x55
   16180:	bne	161e8 <__assert_fail@plt+0x4be4>
   16184:	ldrb	r3, [r0, #1]
   16188:	bic	r3, r3, #32
   1618c:	cmp	r3, #84	; 0x54
   16190:	bne	16268 <__assert_fail@plt+0x4c64>
   16194:	ldrb	r3, [r0, #2]
   16198:	bic	r3, r3, #32
   1619c:	cmp	r3, #70	; 0x46
   161a0:	bne	16268 <__assert_fail@plt+0x4c64>
   161a4:	ldrb	r3, [r0, #3]
   161a8:	cmp	r3, #45	; 0x2d
   161ac:	bne	16268 <__assert_fail@plt+0x4c64>
   161b0:	ldrb	r3, [r0, #4]
   161b4:	cmp	r3, #56	; 0x38
   161b8:	bne	16268 <__assert_fail@plt+0x4c64>
   161bc:	ldrb	r3, [r0, #5]
   161c0:	cmp	r3, #0
   161c4:	bne	16268 <__assert_fail@plt+0x4c64>
   161c8:	ldrb	r2, [r4]
   161cc:	movw	r3, #46972	; 0xb77c
   161d0:	movt	r3, #1
   161d4:	movw	r4, #46984	; 0xb788
   161d8:	movt	r4, #1
   161dc:	cmp	r2, #96	; 0x60
   161e0:	movne	r4, r3
   161e4:	b	1615c <__assert_fail@plt+0x4b58>
   161e8:	cmp	r3, #71	; 0x47
   161ec:	bne	16268 <__assert_fail@plt+0x4c64>
   161f0:	ldrb	r3, [r0, #1]
   161f4:	bic	r3, r3, #32
   161f8:	cmp	r3, #66	; 0x42
   161fc:	bne	16268 <__assert_fail@plt+0x4c64>
   16200:	ldrb	r3, [r0, #2]
   16204:	cmp	r3, #49	; 0x31
   16208:	bne	16268 <__assert_fail@plt+0x4c64>
   1620c:	ldrb	r3, [r0, #3]
   16210:	cmp	r3, #56	; 0x38
   16214:	bne	16268 <__assert_fail@plt+0x4c64>
   16218:	ldrb	r3, [r0, #4]
   1621c:	cmp	r3, #48	; 0x30
   16220:	bne	16268 <__assert_fail@plt+0x4c64>
   16224:	ldrb	r3, [r0, #5]
   16228:	cmp	r3, #51	; 0x33
   1622c:	bne	16268 <__assert_fail@plt+0x4c64>
   16230:	ldrb	r3, [r0, #6]
   16234:	cmp	r3, #48	; 0x30
   16238:	bne	16268 <__assert_fail@plt+0x4c64>
   1623c:	ldrb	r3, [r0, #7]
   16240:	cmp	r3, #0
   16244:	bne	16268 <__assert_fail@plt+0x4c64>
   16248:	ldrb	r2, [r4]
   1624c:	movw	r3, #46976	; 0xb780
   16250:	movt	r3, #1
   16254:	movw	r4, #46980	; 0xb784
   16258:	movt	r4, #1
   1625c:	cmp	r2, #96	; 0x60
   16260:	movne	r4, r3
   16264:	b	1615c <__assert_fail@plt+0x4b58>
   16268:	movw	r3, #46988	; 0xb78c
   1626c:	movt	r3, #1
   16270:	cmp	r6, #9
   16274:	movw	r4, #46968	; 0xb778
   16278:	movt	r4, #1
   1627c:	movne	r4, r3
   16280:	b	1615c <__assert_fail@plt+0x4b58>
   16284:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16288:	strd	r6, [sp, #8]
   1628c:	strd	r8, [sp, #16]
   16290:	strd	sl, [sp, #24]
   16294:	mov	fp, r0
   16298:	mov	sl, r1
   1629c:	str	lr, [sp, #32]
   162a0:	sub	sp, sp, #116	; 0x74
   162a4:	ldr	r8, [sp, #152]	; 0x98
   162a8:	str	r3, [sp, #28]
   162ac:	ldr	r3, [sp, #156]	; 0x9c
   162b0:	str	r2, [sp, #32]
   162b4:	and	r4, r3, #2
   162b8:	ubfx	r3, r3, #1, #1
   162bc:	str	r3, [sp, #44]	; 0x2c
   162c0:	bl	1137c <__ctype_get_mb_cur_max@plt>
   162c4:	str	r0, [sp, #64]	; 0x40
   162c8:	cmp	r8, #10
   162cc:	ldrls	pc, [pc, r8, lsl #2]
   162d0:	b	17a40 <__assert_fail@plt+0x643c>
   162d4:	ldrdeq	r6, [r1], -r8
   162d8:	andeq	r6, r1, r4, ror r7
   162dc:	andeq	r6, r1, r0, asr sp
   162e0:	muleq	r1, r4, r7
   162e4:	andeq	r6, r1, ip, lsr r6
   162e8:	andeq	r6, r1, r8, lsl #13
   162ec:	andeq	r6, r1, r8, lsl #14
   162f0:	andeq	r6, r1, r4, asr #14
   162f4:	andeq	r6, r1, r0, lsl #6
   162f8:	andeq	r6, r1, r0, lsl #6
   162fc:	andeq	r6, r1, r0, lsl #6
   16300:	cmp	r8, #10
   16304:	beq	16330 <__assert_fail@plt+0x4d2c>
   16308:	mov	r1, r8
   1630c:	movw	r0, #46992	; 0xb790
   16310:	movt	r0, #1
   16314:	bl	1612c <__assert_fail@plt+0x4b28>
   16318:	mov	r1, r8
   1631c:	str	r0, [sp, #164]	; 0xa4
   16320:	movw	r0, #46988	; 0xb78c
   16324:	movt	r0, #1
   16328:	bl	1612c <__assert_fail@plt+0x4b28>
   1632c:	str	r0, [sp, #168]	; 0xa8
   16330:	cmp	r4, #0
   16334:	movne	r4, #0
   16338:	beq	1771c <__assert_fail@plt+0x6118>
   1633c:	mov	r3, #1
   16340:	mov	r5, #0
   16344:	ldr	r0, [sp, #168]	; 0xa8
   16348:	str	r3, [sp, #36]	; 0x24
   1634c:	str	r3, [sp, #40]	; 0x28
   16350:	str	r5, [sp, #68]	; 0x44
   16354:	bl	11460 <strlen@plt>
   16358:	ldr	r3, [sp, #168]	; 0xa8
   1635c:	str	r5, [sp, #48]	; 0x30
   16360:	str	r0, [sp, #56]	; 0x38
   16364:	str	r3, [sp, #60]	; 0x3c
   16368:	str	r5, [sp, #72]	; 0x48
   1636c:	str	r8, [sp, #152]	; 0x98
   16370:	mov	r8, fp
   16374:	mov	r9, #0
   16378:	ldr	fp, [sp, #152]	; 0x98
   1637c:	ldr	r3, [sp, #28]
   16380:	cmn	r3, #1
   16384:	beq	168e4 <__assert_fail@plt+0x52e0>
   16388:	ldr	r3, [sp, #28]
   1638c:	subs	r6, r3, r9
   16390:	movne	r6, #1
   16394:	cmp	r6, #0
   16398:	beq	168fc <__assert_fail@plt+0x52f8>
   1639c:	ldr	r0, [sp, #32]
   163a0:	ldr	r7, [sp, #40]	; 0x28
   163a4:	add	r3, r0, r9
   163a8:	cmp	fp, #2
   163ac:	moveq	r7, #0
   163b0:	andne	r7, r7, #1
   163b4:	str	r3, [sp, #52]	; 0x34
   163b8:	cmp	r7, #0
   163bc:	beq	16d98 <__assert_fail@plt+0x5794>
   163c0:	ldr	r2, [sp, #56]	; 0x38
   163c4:	cmp	r2, #0
   163c8:	beq	17034 <__assert_fail@plt+0x5a30>
   163cc:	ldr	r1, [sp, #28]
   163d0:	cmp	r2, #1
   163d4:	mov	r3, r2
   163d8:	movls	r3, #0
   163dc:	movhi	r3, #1
   163e0:	add	r5, r9, r2
   163e4:	cmn	r1, #1
   163e8:	movne	r3, #0
   163ec:	cmp	r3, #0
   163f0:	beq	163fc <__assert_fail@plt+0x4df8>
   163f4:	bl	11460 <strlen@plt>
   163f8:	str	r0, [sp, #28]
   163fc:	ldr	r3, [sp, #28]
   16400:	cmp	r5, r3
   16404:	bhi	17034 <__assert_fail@plt+0x5a30>
   16408:	ldr	r0, [sp, #52]	; 0x34
   1640c:	ldr	r2, [sp, #56]	; 0x38
   16410:	ldr	r1, [sp, #60]	; 0x3c
   16414:	bl	112d4 <memcmp@plt>
   16418:	cmp	r0, #0
   1641c:	bne	17034 <__assert_fail@plt+0x5a30>
   16420:	ldr	r3, [sp, #44]	; 0x2c
   16424:	cmp	r3, #0
   16428:	bne	17964 <__assert_fail@plt+0x6360>
   1642c:	ldr	r3, [sp, #52]	; 0x34
   16430:	ldrb	r5, [r3]
   16434:	cmp	r5, #126	; 0x7e
   16438:	ldrls	pc, [pc, r5, lsl #2]
   1643c:	b	16cf4 <__assert_fail@plt+0x56f0>
   16440:	strdeq	r6, [r1], -r8
   16444:	strdeq	r6, [r1], -r4
   16448:	strdeq	r6, [r1], -r4
   1644c:	strdeq	r6, [r1], -r4
   16450:	strdeq	r6, [r1], -r4
   16454:	strdeq	r6, [r1], -r4
   16458:	strdeq	r6, [r1], -r4
   1645c:	andeq	r6, r1, ip, asr #23
   16460:	andeq	r6, r1, r4, asr #23
   16464:	andeq	r6, r1, ip, lsl #22
   16468:			; <UNDEFINED> instruction: 0x00016bb8
   1646c:	andeq	r6, r1, r4, lsl #22
   16470:	muleq	r1, r4, fp
   16474:	andeq	r6, r1, r0, ror #23
   16478:	strdeq	r6, [r1], -r4
   1647c:	strdeq	r6, [r1], -r4
   16480:	strdeq	r6, [r1], -r4
   16484:	strdeq	r6, [r1], -r4
   16488:	strdeq	r6, [r1], -r4
   1648c:	strdeq	r6, [r1], -r4
   16490:	strdeq	r6, [r1], -r4
   16494:	strdeq	r6, [r1], -r4
   16498:	strdeq	r6, [r1], -r4
   1649c:	strdeq	r6, [r1], -r4
   164a0:	strdeq	r6, [r1], -r4
   164a4:	strdeq	r6, [r1], -r4
   164a8:	strdeq	r6, [r1], -r4
   164ac:	strdeq	r6, [r1], -r4
   164b0:	strdeq	r6, [r1], -r4
   164b4:	strdeq	r6, [r1], -r4
   164b8:	strdeq	r6, [r1], -r4
   164bc:	strdeq	r6, [r1], -r4
   164c0:	ldrdeq	r6, [r1], -r0
   164c4:	ldrdeq	r6, [r1], -r8
   164c8:	ldrdeq	r6, [r1], -r8
   164cc:			; <UNDEFINED> instruction: 0x00016cb4
   164d0:	ldrdeq	r6, [r1], -r8
   164d4:	andeq	r6, r1, r8, ror #25
   164d8:	ldrdeq	r6, [r1], -r8
   164dc:	andeq	r6, r1, r4, lsr sl
   164e0:	ldrdeq	r6, [r1], -r8
   164e4:	ldrdeq	r6, [r1], -r8
   164e8:	ldrdeq	r6, [r1], -r8
   164ec:	andeq	r6, r1, r8, ror #25
   164f0:	andeq	r6, r1, r8, ror #25
   164f4:	andeq	r6, r1, r8, ror #25
   164f8:	andeq	r6, r1, r8, ror #25
   164fc:	andeq	r6, r1, r8, ror #25
   16500:	andeq	r6, r1, r8, ror #25
   16504:	andeq	r6, r1, r8, ror #25
   16508:	andeq	r6, r1, r8, ror #25
   1650c:	andeq	r6, r1, r8, ror #25
   16510:	andeq	r6, r1, r8, ror #25
   16514:	andeq	r6, r1, r8, ror #25
   16518:	andeq	r6, r1, r8, ror #25
   1651c:	andeq	r6, r1, r8, ror #25
   16520:	andeq	r6, r1, r8, ror #25
   16524:	andeq	r6, r1, r8, ror #25
   16528:	andeq	r6, r1, r8, ror #25
   1652c:	ldrdeq	r6, [r1], -r8
   16530:	ldrdeq	r6, [r1], -r8
   16534:	ldrdeq	r6, [r1], -r8
   16538:	ldrdeq	r6, [r1], -r8
   1653c:	andeq	r6, r1, r8, lsl #20
   16540:	strdeq	r6, [r1], -r4
   16544:	andeq	r6, r1, r8, ror #25
   16548:	andeq	r6, r1, r8, ror #25
   1654c:	andeq	r6, r1, r8, ror #25
   16550:	andeq	r6, r1, r8, ror #25
   16554:	andeq	r6, r1, r8, ror #25
   16558:	andeq	r6, r1, r8, ror #25
   1655c:	andeq	r6, r1, r8, ror #25
   16560:	andeq	r6, r1, r8, ror #25
   16564:	andeq	r6, r1, r8, ror #25
   16568:	andeq	r6, r1, r8, ror #25
   1656c:	andeq	r6, r1, r8, ror #25
   16570:	andeq	r6, r1, r8, ror #25
   16574:	andeq	r6, r1, r8, ror #25
   16578:	andeq	r6, r1, r8, ror #25
   1657c:	andeq	r6, r1, r8, ror #25
   16580:	andeq	r6, r1, r8, ror #25
   16584:	andeq	r6, r1, r8, ror #25
   16588:	andeq	r6, r1, r8, ror #25
   1658c:	andeq	r6, r1, r8, ror #25
   16590:	andeq	r6, r1, r8, ror #25
   16594:	andeq	r6, r1, r8, ror #25
   16598:	andeq	r6, r1, r8, ror #25
   1659c:	andeq	r6, r1, r8, ror #25
   165a0:	andeq	r6, r1, r8, ror #25
   165a4:	andeq	r6, r1, r8, ror #25
   165a8:	andeq	r6, r1, r8, ror #25
   165ac:	ldrdeq	r6, [r1], -r8
   165b0:			; <UNDEFINED> instruction: 0x000169b0
   165b4:	andeq	r6, r1, r8, ror #25
   165b8:	ldrdeq	r6, [r1], -r8
   165bc:	andeq	r6, r1, r8, ror #25
   165c0:	ldrdeq	r6, [r1], -r8
   165c4:	andeq	r6, r1, r8, ror #25
   165c8:	andeq	r6, r1, r8, ror #25
   165cc:	andeq	r6, r1, r8, ror #25
   165d0:	andeq	r6, r1, r8, ror #25
   165d4:	andeq	r6, r1, r8, ror #25
   165d8:	andeq	r6, r1, r8, ror #25
   165dc:	andeq	r6, r1, r8, ror #25
   165e0:	andeq	r6, r1, r8, ror #25
   165e4:	andeq	r6, r1, r8, ror #25
   165e8:	andeq	r6, r1, r8, ror #25
   165ec:	andeq	r6, r1, r8, ror #25
   165f0:	andeq	r6, r1, r8, ror #25
   165f4:	andeq	r6, r1, r8, ror #25
   165f8:	andeq	r6, r1, r8, ror #25
   165fc:	andeq	r6, r1, r8, ror #25
   16600:	andeq	r6, r1, r8, ror #25
   16604:	andeq	r6, r1, r8, ror #25
   16608:	andeq	r6, r1, r8, ror #25
   1660c:	andeq	r6, r1, r8, ror #25
   16610:	andeq	r6, r1, r8, ror #25
   16614:	andeq	r6, r1, r8, ror #25
   16618:	andeq	r6, r1, r8, ror #25
   1661c:	andeq	r6, r1, r8, ror #25
   16620:	andeq	r6, r1, r8, ror #25
   16624:	andeq	r6, r1, r8, ror #25
   16628:	andeq	r6, r1, r8, ror #25
   1662c:	ldrdeq	r6, [r1], -r4
   16630:	ldrdeq	r6, [r1], -r8
   16634:	ldrdeq	r6, [r1], -r4
   16638:			; <UNDEFINED> instruction: 0x00016cb4
   1663c:	cmp	r4, #0
   16640:	moveq	r3, #1
   16644:	streq	r3, [sp, #40]	; 0x28
   16648:	beq	16d5c <__assert_fail@plt+0x5758>
   1664c:	mov	r3, #0
   16650:	mov	r2, #1
   16654:	mov	r4, r3
   16658:	str	r2, [sp, #36]	; 0x24
   1665c:	str	r2, [sp, #44]	; 0x2c
   16660:	str	r2, [sp, #56]	; 0x38
   16664:	str	r3, [sp, #68]	; 0x44
   16668:	movw	r3, #46988	; 0xb78c
   1666c:	movt	r3, #1
   16670:	str	r4, [sp, #40]	; 0x28
   16674:	mov	r8, #2
   16678:	str	r4, [sp, #48]	; 0x30
   1667c:	str	r3, [sp, #60]	; 0x3c
   16680:	str	r4, [sp, #72]	; 0x48
   16684:	b	1636c <__assert_fail@plt+0x4d68>
   16688:	cmp	r4, #0
   1668c:	bne	178d8 <__assert_fail@plt+0x62d4>
   16690:	cmp	sl, #0
   16694:	beq	17698 <__assert_fail@plt+0x6094>
   16698:	mov	r3, #34	; 0x22
   1669c:	mov	r1, r4
   166a0:	mov	r2, #1
   166a4:	strb	r3, [fp]
   166a8:	movw	r3, #46968	; 0xb778
   166ac:	movt	r3, #1
   166b0:	mov	r4, r2
   166b4:	str	r2, [sp, #36]	; 0x24
   166b8:	str	r2, [sp, #40]	; 0x28
   166bc:	str	r1, [sp, #44]	; 0x2c
   166c0:	str	r1, [sp, #48]	; 0x30
   166c4:	str	r2, [sp, #56]	; 0x38
   166c8:	str	r3, [sp, #60]	; 0x3c
   166cc:	str	r1, [sp, #68]	; 0x44
   166d0:	str	r1, [sp, #72]	; 0x48
   166d4:	b	1636c <__assert_fail@plt+0x4d68>
   166d8:	mov	r3, #0
   166dc:	mov	r4, r8
   166e0:	str	r3, [sp, #40]	; 0x28
   166e4:	str	r3, [sp, #44]	; 0x2c
   166e8:	str	r3, [sp, #48]	; 0x30
   166ec:	str	r8, [sp, #56]	; 0x38
   166f0:	str	r3, [sp, #60]	; 0x3c
   166f4:	str	r3, [sp, #68]	; 0x44
   166f8:	mov	r3, #1
   166fc:	str	r3, [sp, #36]	; 0x24
   16700:	str	r8, [sp, #72]	; 0x48
   16704:	b	1636c <__assert_fail@plt+0x4d68>
   16708:	mov	r3, #1
   1670c:	mov	r2, #0
   16710:	mov	r4, r2
   16714:	mov	r8, #5
   16718:	str	r3, [sp, #36]	; 0x24
   1671c:	str	r3, [sp, #40]	; 0x28
   16720:	str	r3, [sp, #44]	; 0x2c
   16724:	str	r2, [sp, #48]	; 0x30
   16728:	str	r3, [sp, #56]	; 0x38
   1672c:	movw	r3, #46968	; 0xb778
   16730:	movt	r3, #1
   16734:	str	r3, [sp, #60]	; 0x3c
   16738:	str	r2, [sp, #68]	; 0x44
   1673c:	str	r2, [sp, #72]	; 0x48
   16740:	b	1636c <__assert_fail@plt+0x4d68>
   16744:	mov	r3, #0
   16748:	mov	r2, #1
   1674c:	mov	r4, r3
   16750:	str	r2, [sp, #36]	; 0x24
   16754:	str	r2, [sp, #40]	; 0x28
   16758:	str	r3, [sp, #44]	; 0x2c
   1675c:	str	r3, [sp, #48]	; 0x30
   16760:	str	r3, [sp, #56]	; 0x38
   16764:	str	r3, [sp, #60]	; 0x3c
   16768:	str	r3, [sp, #68]	; 0x44
   1676c:	str	r3, [sp, #72]	; 0x48
   16770:	b	1636c <__assert_fail@plt+0x4d68>
   16774:	mov	r2, #1
   16778:	mov	r3, #0
   1677c:	mov	r4, r3
   16780:	str	r2, [sp, #36]	; 0x24
   16784:	str	r2, [sp, #44]	; 0x2c
   16788:	str	r8, [sp, #56]	; 0x38
   1678c:	str	r3, [sp, #68]	; 0x44
   16790:	b	16668 <__assert_fail@plt+0x5064>
   16794:	mov	r3, #1
   16798:	mov	r2, #0
   1679c:	mov	r4, r2
   167a0:	mov	r8, #2
   167a4:	str	r3, [sp, #36]	; 0x24
   167a8:	str	r3, [sp, #40]	; 0x28
   167ac:	str	r3, [sp, #44]	; 0x2c
   167b0:	str	r2, [sp, #48]	; 0x30
   167b4:	str	r3, [sp, #56]	; 0x38
   167b8:	movw	r3, #46988	; 0xb78c
   167bc:	movt	r3, #1
   167c0:	str	r3, [sp, #60]	; 0x3c
   167c4:	str	r2, [sp, #68]	; 0x44
   167c8:	str	r2, [sp, #72]	; 0x48
   167cc:	b	1636c <__assert_fail@plt+0x4d68>
   167d0:	mov	r7, #0
   167d4:	ldr	r3, [sp, #28]
   167d8:	cmn	r3, #1
   167dc:	beq	172b4 <__assert_fail@plt+0x5cb0>
   167e0:	ldr	r3, [sp, #28]
   167e4:	subs	r2, r3, #1
   167e8:	movne	r2, #1
   167ec:	sub	r3, fp, #2
   167f0:	cmp	r2, #0
   167f4:	clz	r3, r3
   167f8:	lsr	r3, r3, #5
   167fc:	bne	16808 <__assert_fail@plt+0x5204>
   16800:	cmp	r9, #0
   16804:	beq	17014 <__assert_fail@plt+0x5a10>
   16808:	mov	r6, #0
   1680c:	ldr	r2, [sp, #40]	; 0x28
   16810:	eor	r2, r2, #1
   16814:	orrs	r3, r3, r2
   16818:	bne	169f0 <__assert_fail@plt+0x53ec>
   1681c:	ldr	r2, [sp, #160]	; 0xa0
   16820:	cmp	r2, #0
   16824:	beq	16844 <__assert_fail@plt+0x5240>
   16828:	ldr	r0, [sp, #160]	; 0xa0
   1682c:	ubfx	r1, r5, #5, #8
   16830:	and	r2, r5, #31
   16834:	ldr	r1, [r0, r1, lsl #2]
   16838:	lsr	r2, r1, r2
   1683c:	tst	r2, #1
   16840:	bne	1684c <__assert_fail@plt+0x5248>
   16844:	cmp	r7, #0
   16848:	beq	16abc <__assert_fail@plt+0x54b8>
   1684c:	ldr	r2, [sp, #44]	; 0x2c
   16850:	sub	r3, fp, #2
   16854:	clz	r3, r3
   16858:	lsr	r3, r3, #5
   1685c:	cmp	r2, #0
   16860:	bne	17608 <__assert_fail@plt+0x6004>
   16864:	ldr	r2, [sp, #48]	; 0x30
   16868:	eor	r2, r2, #1
   1686c:	ands	r3, r3, r2
   16870:	beq	168a8 <__assert_fail@plt+0x52a4>
   16874:	cmp	sl, r4
   16878:	str	r3, [sp, #48]	; 0x30
   1687c:	movhi	r2, #39	; 0x27
   16880:	strbhi	r2, [r8, r4]
   16884:	add	r2, r4, #1
   16888:	cmp	sl, r2
   1688c:	movhi	r1, #36	; 0x24
   16890:	strbhi	r1, [r8, r2]
   16894:	add	r2, r4, #2
   16898:	add	r4, r4, #3
   1689c:	cmp	sl, r2
   168a0:	movhi	r1, #39	; 0x27
   168a4:	strbhi	r1, [r8, r2]
   168a8:	cmp	r4, sl
   168ac:	add	r9, r9, #1
   168b0:	movcc	r3, #92	; 0x5c
   168b4:	strbcc	r3, [r8, r4]
   168b8:	add	r4, r4, #1
   168bc:	cmp	r4, sl
   168c0:	ldr	r3, [sp, #36]	; 0x24
   168c4:	strbcc	r5, [r8, r4]
   168c8:	cmp	r6, #0
   168cc:	add	r4, r4, #1
   168d0:	moveq	r3, #0
   168d4:	str	r3, [sp, #36]	; 0x24
   168d8:	ldr	r3, [sp, #28]
   168dc:	cmn	r3, #1
   168e0:	bne	16388 <__assert_fail@plt+0x4d84>
   168e4:	ldr	r3, [sp, #32]
   168e8:	ldrb	r6, [r3, r9]
   168ec:	adds	r6, r6, #0
   168f0:	movne	r6, #1
   168f4:	cmp	r6, #0
   168f8:	bne	1639c <__assert_fail@plt+0x4d98>
   168fc:	str	fp, [sp, #152]	; 0x98
   16900:	mov	fp, r8
   16904:	cmp	r4, #0
   16908:	ldr	r1, [sp, #44]	; 0x2c
   1690c:	movne	r3, #0
   16910:	ldr	r8, [sp, #152]	; 0x98
   16914:	sub	r2, r8, #2
   16918:	clz	r2, r2
   1691c:	lsr	r2, r2, #5
   16920:	andeq	r3, r2, r1
   16924:	cmp	r3, #0
   16928:	bne	179e4 <__assert_fail@plt+0x63e0>
   1692c:	eor	r3, r1, #1
   16930:	ands	r2, r2, r3
   16934:	beq	17910 <__assert_fail@plt+0x630c>
   16938:	ldr	r3, [sp, #68]	; 0x44
   1693c:	cmp	r3, #0
   16940:	beq	17914 <__assert_fail@plt+0x6310>
   16944:	ldr	r3, [sp, #36]	; 0x24
   16948:	cmp	r3, #0
   1694c:	bne	179a0 <__assert_fail@plt+0x639c>
   16950:	ldr	r3, [sp, #72]	; 0x48
   16954:	adds	r3, r3, #0
   16958:	movne	r3, #1
   1695c:	cmp	sl, #0
   16960:	movne	r3, #0
   16964:	cmp	r3, #0
   16968:	ldreq	r2, [sp, #68]	; 0x44
   1696c:	beq	17914 <__assert_fail@plt+0x6310>
   16970:	ldr	r2, [sp, #72]	; 0x48
   16974:	str	r3, [sp, #68]	; 0x44
   16978:	movw	r3, #46988	; 0xb78c
   1697c:	movt	r3, #1
   16980:	mov	r1, #39	; 0x27
   16984:	mov	r4, #1
   16988:	ldr	sl, [sp, #72]	; 0x48
   1698c:	mov	r8, #2
   16990:	str	r3, [sp, #60]	; 0x3c
   16994:	mov	r3, #0
   16998:	strb	r1, [fp]
   1699c:	str	r3, [sp, #44]	; 0x2c
   169a0:	str	r4, [sp, #56]	; 0x38
   169a4:	str	r2, [sp, #72]	; 0x48
   169a8:	b	1636c <__assert_fail@plt+0x4d68>
   169ac:	mov	r7, #0
   169b0:	cmp	fp, #2
   169b4:	beq	17294 <__assert_fail@plt+0x5c90>
   169b8:	ldr	r2, [sp, #40]	; 0x28
   169bc:	ldr	r3, [sp, #56]	; 0x38
   169c0:	ldr	r1, [sp, #44]	; 0x2c
   169c4:	cmp	r3, #0
   169c8:	moveq	r3, #0
   169cc:	andne	r3, r2, r1
   169d0:	cmp	r3, #0
   169d4:	moveq	r5, #92	; 0x5c
   169d8:	moveq	r3, r5
   169dc:	bne	172a0 <__assert_fail@plt+0x5c9c>
   169e0:	ldr	r2, [sp, #40]	; 0x28
   169e4:	cmp	r2, #0
   169e8:	bne	176dc <__assert_fail@plt+0x60d8>
   169ec:	mov	r6, #0
   169f0:	ldr	r3, [sp, #44]	; 0x2c
   169f4:	cmp	r3, #0
   169f8:	beq	1728c <__assert_fail@plt+0x5c88>
   169fc:	mov	r3, #0
   16a00:	b	1681c <__assert_fail@plt+0x5218>
   16a04:	mov	r7, #0
   16a08:	cmp	fp, #2
   16a0c:	beq	17304 <__assert_fail@plt+0x5d00>
   16a10:	cmp	fp, #5
   16a14:	beq	172c8 <__assert_fail@plt+0x5cc4>
   16a18:	sub	r3, fp, #2
   16a1c:	mov	r6, #0
   16a20:	clz	r3, r3
   16a24:	mov	r5, #63	; 0x3f
   16a28:	lsr	r3, r3, #5
   16a2c:	b	1680c <__assert_fail@plt+0x5208>
   16a30:	mov	r7, #0
   16a34:	cmp	fp, #2
   16a38:	movne	r3, #0
   16a3c:	movne	r5, #39	; 0x27
   16a40:	strne	r6, [sp, #68]	; 0x44
   16a44:	bne	1680c <__assert_fail@plt+0x5208>
   16a48:	ldr	r3, [sp, #44]	; 0x2c
   16a4c:	cmp	r3, #0
   16a50:	bne	1770c <__assert_fail@plt+0x6108>
   16a54:	ldr	r3, [sp, #72]	; 0x48
   16a58:	cmp	sl, #0
   16a5c:	clz	r3, r3
   16a60:	lsr	r3, r3, #5
   16a64:	moveq	r3, #0
   16a68:	cmp	r3, #0
   16a6c:	bne	17638 <__assert_fail@plt+0x6034>
   16a70:	cmp	sl, r4
   16a74:	movhi	r3, #39	; 0x27
   16a78:	strbhi	r3, [r8, r4]
   16a7c:	add	r3, r4, #1
   16a80:	cmp	sl, r3
   16a84:	movhi	r2, #92	; 0x5c
   16a88:	strbhi	r2, [r8, r3]
   16a8c:	add	r3, r4, #2
   16a90:	cmp	sl, r3
   16a94:	bls	16aa0 <__assert_fail@plt+0x549c>
   16a98:	mov	r2, #39	; 0x27
   16a9c:	strb	r2, [r8, r3]
   16aa0:	mov	r3, #0
   16aa4:	cmp	r7, #0
   16aa8:	add	r4, r4, #3
   16aac:	mov	r5, #39	; 0x27
   16ab0:	str	r3, [sp, #48]	; 0x30
   16ab4:	str	r6, [sp, #68]	; 0x44
   16ab8:	bne	1684c <__assert_fail@plt+0x5248>
   16abc:	ldr	r2, [sp, #48]	; 0x30
   16ac0:	eor	r3, r3, #1
   16ac4:	add	r9, r9, #1
   16ac8:	and	r3, r3, r2
   16acc:	uxtb	r3, r3
   16ad0:	cmp	r3, #0
   16ad4:	beq	168bc <__assert_fail@plt+0x52b8>
   16ad8:	cmp	sl, r4
   16adc:	movhi	r3, #39	; 0x27
   16ae0:	strbhi	r3, [r8, r4]
   16ae4:	add	r3, r4, #1
   16ae8:	add	r4, r4, #2
   16aec:	cmp	sl, r3
   16af0:	movhi	r2, #39	; 0x27
   16af4:	strbhi	r2, [r8, r3]
   16af8:	mov	r3, #0
   16afc:	str	r3, [sp, #48]	; 0x30
   16b00:	b	168bc <__assert_fail@plt+0x52b8>
   16b04:	mov	r3, #118	; 0x76
   16b08:	b	169e0 <__assert_fail@plt+0x53dc>
   16b0c:	mov	r3, #116	; 0x74
   16b10:	ldr	r2, [sp, #44]	; 0x2c
   16b14:	cmp	fp, #2
   16b18:	movne	r2, #0
   16b1c:	andeq	r2, r2, #1
   16b20:	cmp	r2, #0
   16b24:	beq	169e0 <__assert_fail@plt+0x53dc>
   16b28:	mov	fp, r8
   16b2c:	mov	r8, #2
   16b30:	ldr	r3, [sp, #40]	; 0x28
   16b34:	cmp	r3, #0
   16b38:	movne	r8, #4
   16b3c:	mov	lr, #0
   16b40:	mov	r0, fp
   16b44:	ldr	r2, [sp, #32]
   16b48:	ldr	r3, [sp, #156]	; 0x9c
   16b4c:	ldr	r1, [sp, #164]	; 0xa4
   16b50:	bic	ip, r3, #2
   16b54:	ldr	r3, [sp, #28]
   16b58:	stm	sp, {r8, ip, lr}
   16b5c:	ldr	ip, [sp, #168]	; 0xa8
   16b60:	str	r1, [sp, #12]
   16b64:	mov	r1, sl
   16b68:	str	ip, [sp, #16]
   16b6c:	bl	16284 <__assert_fail@plt+0x4c80>
   16b70:	mov	r4, r0
   16b74:	mov	r0, r4
   16b78:	add	sp, sp, #116	; 0x74
   16b7c:	ldrd	r4, [sp]
   16b80:	ldrd	r6, [sp, #8]
   16b84:	ldrd	r8, [sp, #16]
   16b88:	ldrd	sl, [sp, #24]
   16b8c:	add	sp, sp, #32
   16b90:	pop	{pc}		; (ldr pc, [sp], #4)
   16b94:	mov	r5, #102	; 0x66
   16b98:	ldr	r2, [sp, #44]	; 0x2c
   16b9c:	sub	r3, fp, #2
   16ba0:	clz	r3, r3
   16ba4:	lsr	r3, r3, #5
   16ba8:	cmp	r2, #0
   16bac:	bne	17608 <__assert_fail@plt+0x6004>
   16bb0:	mov	r6, r2
   16bb4:	b	168a8 <__assert_fail@plt+0x52a4>
   16bb8:	mov	r5, #110	; 0x6e
   16bbc:	mov	r6, #0
   16bc0:	b	1684c <__assert_fail@plt+0x5248>
   16bc4:	mov	r5, #98	; 0x62
   16bc8:	b	16b98 <__assert_fail@plt+0x5594>
   16bcc:	mov	r5, #97	; 0x61
   16bd0:	b	16b98 <__assert_fail@plt+0x5594>
   16bd4:	mov	r7, #0
   16bd8:	mov	r6, #0
   16bdc:	b	169fc <__assert_fail@plt+0x53f8>
   16be0:	mov	r5, #114	; 0x72
   16be4:	b	16bbc <__assert_fail@plt+0x55b8>
   16be8:	ldr	r3, [sp, #44]	; 0x2c
   16bec:	cmp	r3, #0
   16bf0:	bne	17980 <__assert_fail@plt+0x637c>
   16bf4:	mov	r7, r3
   16bf8:	ldr	r3, [sp, #48]	; 0x30
   16bfc:	sub	r2, fp, #2
   16c00:	clz	r2, r2
   16c04:	lsr	r2, r2, #5
   16c08:	eor	r3, r3, #1
   16c0c:	ands	r3, r2, r3
   16c10:	beq	17624 <__assert_fail@plt+0x6020>
   16c14:	cmp	sl, r4
   16c18:	movhi	r1, #39	; 0x27
   16c1c:	strbhi	r1, [r8, r4]
   16c20:	add	r1, r4, #1
   16c24:	cmp	sl, r1
   16c28:	movhi	r0, #36	; 0x24
   16c2c:	strbhi	r0, [r8, r1]
   16c30:	add	r1, r4, #2
   16c34:	cmp	sl, r1
   16c38:	movhi	r0, #39	; 0x27
   16c3c:	strbhi	r0, [r8, r1]
   16c40:	add	r1, r4, #3
   16c44:	cmp	sl, r1
   16c48:	bls	1767c <__assert_fail@plt+0x6078>
   16c4c:	mov	r4, r1
   16c50:	mov	r1, #92	; 0x5c
   16c54:	mov	r0, r4
   16c58:	str	r3, [sp, #48]	; 0x30
   16c5c:	strb	r1, [r8, r4]
   16c60:	cmp	fp, #2
   16c64:	add	r4, r4, #1
   16c68:	beq	176cc <__assert_fail@plt+0x60c8>
   16c6c:	ldr	r1, [sp, #28]
   16c70:	add	r3, r9, #1
   16c74:	cmp	r3, r1
   16c78:	bcs	16c90 <__assert_fail@plt+0x568c>
   16c7c:	ldr	r1, [sp, #32]
   16c80:	ldrb	r3, [r1, r3]
   16c84:	sub	r3, r3, #48	; 0x30
   16c88:	cmp	r3, #9
   16c8c:	bls	176e4 <__assert_fail@plt+0x60e0>
   16c90:	mov	r5, #48	; 0x30
   16c94:	ldr	r3, [sp, #40]	; 0x28
   16c98:	eor	r3, r3, #1
   16c9c:	orrs	r2, r2, r3
   16ca0:	mov	r3, r6
   16ca4:	moveq	r6, r2
   16ca8:	beq	1681c <__assert_fail@plt+0x5218>
   16cac:	mov	r6, #0
   16cb0:	b	16844 <__assert_fail@plt+0x5240>
   16cb4:	cmp	r9, #0
   16cb8:	mov	r2, r7
   16cbc:	bne	1725c <__assert_fail@plt+0x5c58>
   16cc0:	mov	r6, r7
   16cc4:	mov	r3, r9
   16cc8:	mov	r7, r2
   16ccc:	b	1680c <__assert_fail@plt+0x5208>
   16cd0:	mov	r2, r7
   16cd4:	mov	r6, r7
   16cd8:	mov	r3, #0
   16cdc:	mov	r7, r2
   16ce0:	mov	r5, #32
   16ce4:	b	1680c <__assert_fail@plt+0x5208>
   16ce8:	mov	r6, r7
   16cec:	b	169fc <__assert_fail@plt+0x53f8>
   16cf0:	mov	r7, #0
   16cf4:	ldr	r3, [sp, #64]	; 0x40
   16cf8:	cmp	r3, #1
   16cfc:	bne	1731c <__assert_fail@plt+0x5d18>
   16d00:	bl	11424 <__ctype_b_loc@plt>
   16d04:	ldr	r2, [r0]
   16d08:	sxth	r3, r5
   16d0c:	lsl	r3, r3, #1
   16d10:	ldr	r1, [sp, #64]	; 0x40
   16d14:	ldrh	r3, [r2, r3]
   16d18:	mov	ip, r1
   16d1c:	and	r3, r3, #16384	; 0x4000
   16d20:	cmp	r3, #0
   16d24:	ldr	r3, [sp, #40]	; 0x28
   16d28:	movne	r6, #1
   16d2c:	moveq	r6, #0
   16d30:	movne	r2, #0
   16d34:	andeq	r2, r3, #1
   16d38:	cmp	r2, #0
   16d3c:	bne	17664 <__assert_fail@plt+0x6060>
   16d40:	sub	r3, fp, #2
   16d44:	clz	r3, r3
   16d48:	lsr	r3, r3, #5
   16d4c:	b	1680c <__assert_fail@plt+0x5208>
   16d50:	cmp	r4, #0
   16d54:	bne	179f4 <__assert_fail@plt+0x63f0>
   16d58:	str	r4, [sp, #40]	; 0x28
   16d5c:	cmp	sl, #0
   16d60:	bne	17a24 <__assert_fail@plt+0x6420>
   16d64:	mov	r3, #1
   16d68:	movw	r2, #46988	; 0xb78c
   16d6c:	movt	r2, #1
   16d70:	mov	r4, r3
   16d74:	mov	r8, #2
   16d78:	str	r3, [sp, #36]	; 0x24
   16d7c:	str	sl, [sp, #44]	; 0x2c
   16d80:	str	sl, [sp, #48]	; 0x30
   16d84:	str	r3, [sp, #56]	; 0x38
   16d88:	str	r2, [sp, #60]	; 0x3c
   16d8c:	str	sl, [sp, #68]	; 0x44
   16d90:	str	sl, [sp, #72]	; 0x48
   16d94:	b	1636c <__assert_fail@plt+0x4d68>
   16d98:	ldr	r3, [sp, #32]
   16d9c:	ldrb	r5, [r3, r9]
   16da0:	cmp	r5, #126	; 0x7e
   16da4:	ldrls	pc, [pc, r5, lsl #2]
   16da8:	b	16cf4 <__assert_fail@plt+0x56f0>
   16dac:	ldrdeq	r6, [r1], -r0
   16db0:	strdeq	r6, [r1], -r4
   16db4:	strdeq	r6, [r1], -r4
   16db8:	strdeq	r6, [r1], -r4
   16dbc:	strdeq	r6, [r1], -r4
   16dc0:	strdeq	r6, [r1], -r4
   16dc4:	strdeq	r6, [r1], -r4
   16dc8:	andeq	r6, r1, r8, asr #31
   16dcc:	andeq	r6, r1, r0, asr #31
   16dd0:	andeq	r6, r1, ip, lsl #22
   16dd4:			; <UNDEFINED> instruction: 0x00016fb8
   16dd8:	andeq	r6, r1, r4, lsl #22
   16ddc:			; <UNDEFINED> instruction: 0x00016fb0
   16de0:	andeq	r6, r1, r8, lsr #31
   16de4:	strdeq	r6, [r1], -r4
   16de8:	strdeq	r6, [r1], -r4
   16dec:	strdeq	r6, [r1], -r4
   16df0:	strdeq	r6, [r1], -r4
   16df4:	strdeq	r6, [r1], -r4
   16df8:	strdeq	r6, [r1], -r4
   16dfc:	strdeq	r6, [r1], -r4
   16e00:	strdeq	r6, [r1], -r4
   16e04:	strdeq	r6, [r1], -r4
   16e08:	strdeq	r6, [r1], -r4
   16e0c:	strdeq	r6, [r1], -r4
   16e10:	strdeq	r6, [r1], -r4
   16e14:	strdeq	r6, [r1], -r4
   16e18:	strdeq	r6, [r1], -r4
   16e1c:	strdeq	r6, [r1], -r4
   16e20:	strdeq	r6, [r1], -r4
   16e24:	strdeq	r6, [r1], -r4
   16e28:	strdeq	r6, [r1], -r4
   16e2c:	andeq	r7, r1, r4, lsr #32
   16e30:	andeq	r7, r1, r4
   16e34:	andeq	r7, r1, r4
   16e38:	strdeq	r6, [r1], -r4
   16e3c:	andeq	r7, r1, r4
   16e40:	andeq	r6, r1, r0, asr #26
   16e44:	andeq	r7, r1, r4
   16e48:	andeq	r6, r1, r4, lsr sl
   16e4c:	andeq	r7, r1, r4
   16e50:	andeq	r7, r1, r4
   16e54:	andeq	r7, r1, r4
   16e58:	andeq	r6, r1, r0, asr #26
   16e5c:	andeq	r6, r1, r0, asr #26
   16e60:	andeq	r6, r1, r0, asr #26
   16e64:	andeq	r6, r1, r0, asr #26
   16e68:	andeq	r6, r1, r0, asr #26
   16e6c:	andeq	r6, r1, r0, asr #26
   16e70:	andeq	r6, r1, r0, asr #26
   16e74:	andeq	r6, r1, r0, asr #26
   16e78:	andeq	r6, r1, r0, asr #26
   16e7c:	andeq	r6, r1, r0, asr #26
   16e80:	andeq	r6, r1, r0, asr #26
   16e84:	andeq	r6, r1, r0, asr #26
   16e88:	andeq	r6, r1, r0, asr #26
   16e8c:	andeq	r6, r1, r0, asr #26
   16e90:	andeq	r6, r1, r0, asr #26
   16e94:	andeq	r6, r1, r0, asr #26
   16e98:	andeq	r7, r1, r4
   16e9c:	andeq	r7, r1, r4
   16ea0:	andeq	r7, r1, r4
   16ea4:	andeq	r7, r1, r4
   16ea8:	andeq	r6, r1, r8, lsl #20
   16eac:	strdeq	r6, [r1], -r4
   16eb0:	andeq	r6, r1, r0, asr #26
   16eb4:	andeq	r6, r1, r0, asr #26
   16eb8:	andeq	r6, r1, r0, asr #26
   16ebc:	andeq	r6, r1, r0, asr #26
   16ec0:	andeq	r6, r1, r0, asr #26
   16ec4:	andeq	r6, r1, r0, asr #26
   16ec8:	andeq	r6, r1, r0, asr #26
   16ecc:	andeq	r6, r1, r0, asr #26
   16ed0:	andeq	r6, r1, r0, asr #26
   16ed4:	andeq	r6, r1, r0, asr #26
   16ed8:	andeq	r6, r1, r0, asr #26
   16edc:	andeq	r6, r1, r0, asr #26
   16ee0:	andeq	r6, r1, r0, asr #26
   16ee4:	andeq	r6, r1, r0, asr #26
   16ee8:	andeq	r6, r1, r0, asr #26
   16eec:	andeq	r6, r1, r0, asr #26
   16ef0:	andeq	r6, r1, r0, asr #26
   16ef4:	andeq	r6, r1, r0, asr #26
   16ef8:	andeq	r6, r1, r0, asr #26
   16efc:	andeq	r6, r1, r0, asr #26
   16f00:	andeq	r6, r1, r0, asr #26
   16f04:	andeq	r6, r1, r0, asr #26
   16f08:	andeq	r6, r1, r0, asr #26
   16f0c:	andeq	r6, r1, r0, asr #26
   16f10:	andeq	r6, r1, r0, asr #26
   16f14:	andeq	r6, r1, r0, asr #26
   16f18:	andeq	r7, r1, r4
   16f1c:			; <UNDEFINED> instruction: 0x000169b0
   16f20:	andeq	r6, r1, r0, asr #26
   16f24:	andeq	r7, r1, r4
   16f28:	andeq	r6, r1, r0, asr #26
   16f2c:	andeq	r7, r1, r4
   16f30:	andeq	r6, r1, r0, asr #26
   16f34:	andeq	r6, r1, r0, asr #26
   16f38:	andeq	r6, r1, r0, asr #26
   16f3c:	andeq	r6, r1, r0, asr #26
   16f40:	andeq	r6, r1, r0, asr #26
   16f44:	andeq	r6, r1, r0, asr #26
   16f48:	andeq	r6, r1, r0, asr #26
   16f4c:	andeq	r6, r1, r0, asr #26
   16f50:	andeq	r6, r1, r0, asr #26
   16f54:	andeq	r6, r1, r0, asr #26
   16f58:	andeq	r6, r1, r0, asr #26
   16f5c:	andeq	r6, r1, r0, asr #26
   16f60:	andeq	r6, r1, r0, asr #26
   16f64:	andeq	r6, r1, r0, asr #26
   16f68:	andeq	r6, r1, r0, asr #26
   16f6c:	andeq	r6, r1, r0, asr #26
   16f70:	andeq	r6, r1, r0, asr #26
   16f74:	andeq	r6, r1, r0, asr #26
   16f78:	andeq	r6, r1, r0, asr #26
   16f7c:	andeq	r6, r1, r0, asr #26
   16f80:	andeq	r6, r1, r0, asr #26
   16f84:	andeq	r6, r1, r0, asr #26
   16f88:	andeq	r6, r1, r0, asr #26
   16f8c:	andeq	r6, r1, r0, asr #26
   16f90:	andeq	r6, r1, r0, asr #26
   16f94:	andeq	r6, r1, r0, asr #26
   16f98:	ldrdeq	r6, [r1], -r4
   16f9c:	andeq	r7, r1, r4
   16fa0:	ldrdeq	r6, [r1], -r4
   16fa4:	strdeq	r6, [r1], -r4
   16fa8:	mov	r3, #114	; 0x72
   16fac:	b	16b10 <__assert_fail@plt+0x550c>
   16fb0:	mov	r3, #102	; 0x66
   16fb4:	b	169e0 <__assert_fail@plt+0x53dc>
   16fb8:	mov	r3, #110	; 0x6e
   16fbc:	b	16b10 <__assert_fail@plt+0x550c>
   16fc0:	mov	r3, #98	; 0x62
   16fc4:	b	169e0 <__assert_fail@plt+0x53dc>
   16fc8:	mov	r3, #97	; 0x61
   16fcc:	b	169e0 <__assert_fail@plt+0x53dc>
   16fd0:	ldr	r3, [sp, #40]	; 0x28
   16fd4:	cmp	r3, #0
   16fd8:	bne	16be8 <__assert_fail@plt+0x55e4>
   16fdc:	ldr	r3, [sp, #156]	; 0x9c
   16fe0:	tst	r3, #1
   16fe4:	addne	r9, r9, #1
   16fe8:	bne	1637c <__assert_fail@plt+0x4d78>
   16fec:	ldr	r7, [sp, #40]	; 0x28
   16ff0:	b	169ec <__assert_fail@plt+0x53e8>
   16ff4:	sub	r3, fp, #2
   16ff8:	clz	r3, r3
   16ffc:	lsr	r3, r3, #5
   17000:	b	16800 <__assert_fail@plt+0x51fc>
   17004:	sub	r3, fp, #2
   17008:	mov	r6, #0
   1700c:	clz	r3, r3
   17010:	lsr	r3, r3, #5
   17014:	ldr	r2, [sp, #44]	; 0x2c
   17018:	tst	r2, r3
   1701c:	beq	1680c <__assert_fail@plt+0x5208>
   17020:	b	16b28 <__assert_fail@plt+0x5524>
   17024:	sub	r3, fp, #2
   17028:	clz	r3, r3
   1702c:	lsr	r3, r3, #5
   17030:	b	17014 <__assert_fail@plt+0x5a10>
   17034:	ldr	r3, [sp, #52]	; 0x34
   17038:	ldrb	r5, [r3]
   1703c:	cmp	r5, #126	; 0x7e
   17040:	ldrls	pc, [pc, r5, lsl #2]
   17044:	b	16cf0 <__assert_fail@plt+0x56ec>
   17048:	andeq	r6, r1, r8, ror #23
   1704c:	strdeq	r6, [r1], -r0
   17050:	strdeq	r6, [r1], -r0
   17054:	strdeq	r6, [r1], -r0
   17058:	strdeq	r6, [r1], -r0
   1705c:	strdeq	r6, [r1], -r0
   17060:	strdeq	r6, [r1], -r0
   17064:	andeq	r6, r1, ip, asr #23
   17068:	andeq	r6, r1, r4, asr #23
   1706c:	andeq	r7, r1, r0, lsl #5
   17070:			; <UNDEFINED> instruction: 0x00016bb8
   17074:	andeq	r7, r1, r4, ror r2
   17078:	muleq	r1, r4, fp
   1707c:	andeq	r6, r1, r0, ror #23
   17080:	strdeq	r6, [r1], -r0
   17084:	strdeq	r6, [r1], -r0
   17088:	strdeq	r6, [r1], -r0
   1708c:	strdeq	r6, [r1], -r0
   17090:	strdeq	r6, [r1], -r0
   17094:	strdeq	r6, [r1], -r0
   17098:	strdeq	r6, [r1], -r0
   1709c:	strdeq	r6, [r1], -r0
   170a0:	strdeq	r6, [r1], -r0
   170a4:	strdeq	r6, [r1], -r0
   170a8:	strdeq	r6, [r1], -r0
   170ac:	strdeq	r6, [r1], -r0
   170b0:	strdeq	r6, [r1], -r0
   170b4:	strdeq	r6, [r1], -r0
   170b8:	strdeq	r6, [r1], -r0
   170bc:	strdeq	r6, [r1], -r0
   170c0:	strdeq	r6, [r1], -r0
   170c4:	strdeq	r6, [r1], -r0
   170c8:	andeq	r7, r1, ip, ror #4
   170cc:	ldrdeq	r6, [r1], -r4
   170d0:	ldrdeq	r6, [r1], -r4
   170d4:	andeq	r7, r1, r0, asr r2
   170d8:	ldrdeq	r6, [r1], -r4
   170dc:	andeq	r7, r1, r4, asr #4
   170e0:	ldrdeq	r6, [r1], -r4
   170e4:	andeq	r6, r1, r0, lsr sl
   170e8:	ldrdeq	r6, [r1], -r4
   170ec:	ldrdeq	r6, [r1], -r4
   170f0:	ldrdeq	r6, [r1], -r4
   170f4:	andeq	r7, r1, r4, asr #4
   170f8:	andeq	r7, r1, r4, asr #4
   170fc:	andeq	r7, r1, r4, asr #4
   17100:	andeq	r7, r1, r4, asr #4
   17104:	andeq	r7, r1, r4, asr #4
   17108:	andeq	r7, r1, r4, asr #4
   1710c:	andeq	r7, r1, r4, asr #4
   17110:	andeq	r7, r1, r4, asr #4
   17114:	andeq	r7, r1, r4, asr #4
   17118:	andeq	r7, r1, r4, asr #4
   1711c:	andeq	r7, r1, r4, asr #4
   17120:	andeq	r7, r1, r4, asr #4
   17124:	andeq	r7, r1, r4, asr #4
   17128:	andeq	r7, r1, r4, asr #4
   1712c:	andeq	r7, r1, r4, asr #4
   17130:	andeq	r7, r1, r4, asr #4
   17134:	ldrdeq	r6, [r1], -r4
   17138:	ldrdeq	r6, [r1], -r4
   1713c:	ldrdeq	r6, [r1], -r4
   17140:	ldrdeq	r6, [r1], -r4
   17144:	andeq	r6, r1, r4, lsl #20
   17148:	strdeq	r6, [r1], -r0
   1714c:	andeq	r7, r1, r4, asr #4
   17150:	andeq	r7, r1, r4, asr #4
   17154:	andeq	r7, r1, r4, asr #4
   17158:	andeq	r7, r1, r4, asr #4
   1715c:	andeq	r7, r1, r4, asr #4
   17160:	andeq	r7, r1, r4, asr #4
   17164:	andeq	r7, r1, r4, asr #4
   17168:	andeq	r7, r1, r4, asr #4
   1716c:	andeq	r7, r1, r4, asr #4
   17170:	andeq	r7, r1, r4, asr #4
   17174:	andeq	r7, r1, r4, asr #4
   17178:	andeq	r7, r1, r4, asr #4
   1717c:	andeq	r7, r1, r4, asr #4
   17180:	andeq	r7, r1, r4, asr #4
   17184:	andeq	r7, r1, r4, asr #4
   17188:	andeq	r7, r1, r4, asr #4
   1718c:	andeq	r7, r1, r4, asr #4
   17190:	andeq	r7, r1, r4, asr #4
   17194:	andeq	r7, r1, r4, asr #4
   17198:	andeq	r7, r1, r4, asr #4
   1719c:	andeq	r7, r1, r4, asr #4
   171a0:	andeq	r7, r1, r4, asr #4
   171a4:	andeq	r7, r1, r4, asr #4
   171a8:	andeq	r7, r1, r4, asr #4
   171ac:	andeq	r7, r1, r4, asr #4
   171b0:	andeq	r7, r1, r4, asr #4
   171b4:	ldrdeq	r6, [r1], -r4
   171b8:	andeq	r6, r1, ip, lsr #19
   171bc:	andeq	r7, r1, r4, asr #4
   171c0:	ldrdeq	r6, [r1], -r4
   171c4:	andeq	r7, r1, r4, asr #4
   171c8:	ldrdeq	r6, [r1], -r4
   171cc:	andeq	r7, r1, r4, asr #4
   171d0:	andeq	r7, r1, r4, asr #4
   171d4:	andeq	r7, r1, r4, asr #4
   171d8:	andeq	r7, r1, r4, asr #4
   171dc:	andeq	r7, r1, r4, asr #4
   171e0:	andeq	r7, r1, r4, asr #4
   171e4:	andeq	r7, r1, r4, asr #4
   171e8:	andeq	r7, r1, r4, asr #4
   171ec:	andeq	r7, r1, r4, asr #4
   171f0:	andeq	r7, r1, r4, asr #4
   171f4:	andeq	r7, r1, r4, asr #4
   171f8:	andeq	r7, r1, r4, asr #4
   171fc:	andeq	r7, r1, r4, asr #4
   17200:	andeq	r7, r1, r4, asr #4
   17204:	andeq	r7, r1, r4, asr #4
   17208:	andeq	r7, r1, r4, asr #4
   1720c:	andeq	r7, r1, r4, asr #4
   17210:	andeq	r7, r1, r4, asr #4
   17214:	andeq	r7, r1, r4, asr #4
   17218:	andeq	r7, r1, r4, asr #4
   1721c:	andeq	r7, r1, r4, asr #4
   17220:	andeq	r7, r1, r4, asr #4
   17224:	andeq	r7, r1, r4, asr #4
   17228:	andeq	r7, r1, r4, asr #4
   1722c:	andeq	r7, r1, r4, asr #4
   17230:	andeq	r7, r1, r4, asr #4
   17234:	ldrdeq	r6, [r1], -r0
   17238:	ldrdeq	r6, [r1], -r4
   1723c:	ldrdeq	r6, [r1], -r0
   17240:	andeq	r7, r1, r0, asr r2
   17244:	mov	r6, r7
   17248:	mov	r7, #0
   1724c:	b	169fc <__assert_fail@plt+0x53f8>
   17250:	cmp	r9, #0
   17254:	mov	r2, #0
   17258:	beq	16cc0 <__assert_fail@plt+0x56bc>
   1725c:	mov	r6, #0
   17260:	mov	r7, r2
   17264:	mov	r3, r6
   17268:	b	1681c <__assert_fail@plt+0x5218>
   1726c:	mov	r2, #0
   17270:	b	16cd4 <__assert_fail@plt+0x56d0>
   17274:	mov	r7, #0
   17278:	mov	r3, #118	; 0x76
   1727c:	b	169e0 <__assert_fail@plt+0x53dc>
   17280:	mov	r7, #0
   17284:	mov	r3, #116	; 0x74
   17288:	b	16b10 <__assert_fail@plt+0x550c>
   1728c:	ldr	r3, [sp, #44]	; 0x2c
   17290:	b	16844 <__assert_fail@plt+0x5240>
   17294:	ldr	r3, [sp, #44]	; 0x2c
   17298:	cmp	r3, #0
   1729c:	bne	1770c <__assert_fail@plt+0x6108>
   172a0:	add	r9, r9, #1
   172a4:	mov	r6, #0
   172a8:	ldr	r3, [sp, #48]	; 0x30
   172ac:	mov	r5, #92	; 0x5c
   172b0:	b	16ad0 <__assert_fail@plt+0x54cc>
   172b4:	ldr	r3, [sp, #32]
   172b8:	ldrb	r2, [r3, #1]
   172bc:	adds	r2, r2, #0
   172c0:	movne	r2, #1
   172c4:	b	167ec <__assert_fail@plt+0x51e8>
   172c8:	ldr	r3, [sp, #156]	; 0x9c
   172cc:	ands	r3, r3, #4
   172d0:	beq	172f8 <__assert_fail@plt+0x5cf4>
   172d4:	ldr	r2, [sp, #28]
   172d8:	add	r3, r9, #2
   172dc:	cmp	r3, r2
   172e0:	bcs	172f4 <__assert_fail@plt+0x5cf0>
   172e4:	ldr	r2, [sp, #52]	; 0x34
   172e8:	ldrb	r5, [r2, #1]
   172ec:	cmp	r5, #63	; 0x3f
   172f0:	beq	17770 <__assert_fail@plt+0x616c>
   172f4:	mov	r3, #0
   172f8:	mov	r5, #63	; 0x3f
   172fc:	mov	r6, r3
   17300:	b	1680c <__assert_fail@plt+0x5208>
   17304:	ldr	r3, [sp, #44]	; 0x2c
   17308:	cmp	r3, #0
   1730c:	bne	1770c <__assert_fail@plt+0x6108>
   17310:	mov	r6, r3
   17314:	mov	r5, #63	; 0x3f
   17318:	b	16844 <__assert_fail@plt+0x5240>
   1731c:	ldr	r1, [sp, #28]
   17320:	mov	r2, #0
   17324:	mov	r3, #0
   17328:	strd	r2, [sp, #104]	; 0x68
   1732c:	cmn	r1, #1
   17330:	bne	17340 <__assert_fail@plt+0x5d3c>
   17334:	ldr	r0, [sp, #32]
   17338:	bl	11460 <strlen@plt>
   1733c:	str	r0, [sp, #28]
   17340:	str	r8, [sp, #76]	; 0x4c
   17344:	mov	r3, #0
   17348:	str	sl, [sp, #80]	; 0x50
   1734c:	ldr	sl, [sp, #32]
   17350:	str	r5, [sp, #84]	; 0x54
   17354:	mov	r5, r3
   17358:	ldr	r8, [sp, #44]	; 0x2c
   1735c:	str	r7, [sp, #88]	; 0x58
   17360:	str	r4, [sp, #92]	; 0x5c
   17364:	ldr	r2, [sp, #28]
   17368:	add	r4, r9, r5
   1736c:	add	r3, sp, #104	; 0x68
   17370:	add	r7, sl, r4
   17374:	add	r0, sp, #100	; 0x64
   17378:	mov	r1, r7
   1737c:	sub	r2, r2, r4
   17380:	bl	19f90 <__assert_fail@plt+0x898c>
   17384:	subs	r1, r0, #0
   17388:	beq	173d4 <__assert_fail@plt+0x5dd0>
   1738c:	cmn	r1, #1
   17390:	beq	1774c <__assert_fail@plt+0x6148>
   17394:	cmn	r1, #2
   17398:	beq	1786c <__assert_fail@plt+0x6268>
   1739c:	cmp	fp, #2
   173a0:	movne	r3, #0
   173a4:	andeq	r3, r8, #1
   173a8:	cmp	r3, #0
   173ac:	bne	17538 <__assert_fail@plt+0x5f34>
   173b0:	ldr	r0, [sp, #100]	; 0x64
   173b4:	add	r5, r5, r1
   173b8:	bl	1134c <iswprint@plt>
   173bc:	cmp	r0, #0
   173c0:	add	r0, sp, #104	; 0x68
   173c4:	moveq	r6, #0
   173c8:	bl	112bc <mbsinit@plt>
   173cc:	cmp	r0, #0
   173d0:	beq	17364 <__assert_fail@plt+0x5d60>
   173d4:	ldr	r3, [sp, #40]	; 0x28
   173d8:	mov	ip, r5
   173dc:	eor	r2, r6, #1
   173e0:	ldr	r8, [sp, #76]	; 0x4c
   173e4:	ldr	sl, [sp, #80]	; 0x50
   173e8:	and	r2, r2, r3
   173ec:	ldr	r5, [sp, #84]	; 0x54
   173f0:	ldr	r7, [sp, #88]	; 0x58
   173f4:	ldr	r4, [sp, #92]	; 0x5c
   173f8:	cmp	ip, #1
   173fc:	bls	16d38 <__assert_fail@plt+0x5734>
   17400:	add	r1, ip, r9
   17404:	mov	r0, #39	; 0x27
   17408:	ldr	lr, [sp, #52]	; 0x34
   1740c:	mov	ip, #0
   17410:	str	r6, [sp, #52]	; 0x34
   17414:	ldr	r6, [sp, #48]	; 0x30
   17418:	b	174d4 <__assert_fail@plt+0x5ed0>
   1741c:	ldr	ip, [sp, #44]	; 0x2c
   17420:	sub	r3, fp, #2
   17424:	clz	r3, r3
   17428:	lsr	r3, r3, #5
   1742c:	cmp	ip, #0
   17430:	bne	17644 <__assert_fail@plt+0x6040>
   17434:	eor	ip, r6, #1
   17438:	ands	r3, r3, ip
   1743c:	beq	1746c <__assert_fail@plt+0x5e68>
   17440:	cmp	sl, r4
   17444:	add	ip, r4, #1
   17448:	strbhi	r0, [r8, r4]
   1744c:	cmp	sl, ip
   17450:	movhi	r6, #36	; 0x24
   17454:	strbhi	r6, [r8, ip]
   17458:	add	ip, r4, #2
   1745c:	mov	r6, r3
   17460:	cmp	sl, ip
   17464:	add	r4, r4, #3
   17468:	strbhi	r0, [r8, ip]
   1746c:	cmp	sl, r4
   17470:	movhi	r3, #92	; 0x5c
   17474:	strbhi	r3, [r8, r4]
   17478:	add	r3, r4, #1
   1747c:	cmp	sl, r3
   17480:	bls	17490 <__assert_fail@plt+0x5e8c>
   17484:	lsr	ip, r5, #6
   17488:	add	ip, ip, #48	; 0x30
   1748c:	strb	ip, [r8, r3]
   17490:	add	r3, r4, #2
   17494:	cmp	sl, r3
   17498:	bls	174a8 <__assert_fail@plt+0x5ea4>
   1749c:	ubfx	ip, r5, #3, #3
   174a0:	add	ip, ip, #48	; 0x30
   174a4:	strb	ip, [r8, r3]
   174a8:	add	r9, r9, #1
   174ac:	and	r5, r5, #7
   174b0:	cmp	r9, r1
   174b4:	add	r5, r5, #48	; 0x30
   174b8:	add	r4, r4, #3
   174bc:	bcs	17670 <__assert_fail@plt+0x606c>
   174c0:	mov	ip, r2
   174c4:	cmp	sl, r4
   174c8:	strbhi	r5, [r8, r4]
   174cc:	add	r4, r4, #1
   174d0:	ldrb	r5, [lr, #1]!
   174d4:	cmp	r2, #0
   174d8:	bne	1741c <__assert_fail@plt+0x5e18>
   174dc:	eor	r3, ip, #1
   174e0:	cmp	r7, #0
   174e4:	and	r3, r3, r6
   174e8:	uxtb	r3, r3
   174ec:	beq	17500 <__assert_fail@plt+0x5efc>
   174f0:	cmp	sl, r4
   174f4:	movhi	r7, #92	; 0x5c
   174f8:	strbhi	r7, [r8, r4]
   174fc:	add	r4, r4, #1
   17500:	add	r9, r9, #1
   17504:	cmp	r9, r1
   17508:	bcs	17658 <__assert_fail@plt+0x6054>
   1750c:	cmp	r3, #0
   17510:	beq	17690 <__assert_fail@plt+0x608c>
   17514:	cmp	sl, r4
   17518:	add	r3, r4, #1
   1751c:	mov	r7, #0
   17520:	strbhi	r0, [r8, r4]
   17524:	cmp	sl, r3
   17528:	add	r4, r4, #2
   1752c:	mov	r6, r7
   17530:	strbhi	r0, [r8, r3]
   17534:	b	174c4 <__assert_fail@plt+0x5ec0>
   17538:	cmp	r1, #1
   1753c:	beq	173b0 <__assert_fail@plt+0x5dac>
   17540:	add	r2, r4, #1
   17544:	add	r3, sl, r1
   17548:	add	r2, sl, r2
   1754c:	add	r4, r3, r4
   17550:	ldrb	r3, [r2], #1
   17554:	sub	r3, r3, #91	; 0x5b
   17558:	cmp	r3, #33	; 0x21
   1755c:	ldrls	pc, [pc, r3, lsl #2]
   17560:	b	175ec <__assert_fail@plt+0x5fe8>
   17564:	strdeq	r7, [r1], -r8
   17568:	strdeq	r7, [r1], -r8
   1756c:	andeq	r7, r1, ip, ror #11
   17570:	strdeq	r7, [r1], -r8
   17574:	andeq	r7, r1, ip, ror #11
   17578:	strdeq	r7, [r1], -r8
   1757c:	andeq	r7, r1, ip, ror #11
   17580:	andeq	r7, r1, ip, ror #11
   17584:	andeq	r7, r1, ip, ror #11
   17588:	andeq	r7, r1, ip, ror #11
   1758c:	andeq	r7, r1, ip, ror #11
   17590:	andeq	r7, r1, ip, ror #11
   17594:	andeq	r7, r1, ip, ror #11
   17598:	andeq	r7, r1, ip, ror #11
   1759c:	andeq	r7, r1, ip, ror #11
   175a0:	andeq	r7, r1, ip, ror #11
   175a4:	andeq	r7, r1, ip, ror #11
   175a8:	andeq	r7, r1, ip, ror #11
   175ac:	andeq	r7, r1, ip, ror #11
   175b0:	andeq	r7, r1, ip, ror #11
   175b4:	andeq	r7, r1, ip, ror #11
   175b8:	andeq	r7, r1, ip, ror #11
   175bc:	andeq	r7, r1, ip, ror #11
   175c0:	andeq	r7, r1, ip, ror #11
   175c4:	andeq	r7, r1, ip, ror #11
   175c8:	andeq	r7, r1, ip, ror #11
   175cc:	andeq	r7, r1, ip, ror #11
   175d0:	andeq	r7, r1, ip, ror #11
   175d4:	andeq	r7, r1, ip, ror #11
   175d8:	andeq	r7, r1, ip, ror #11
   175dc:	andeq	r7, r1, ip, ror #11
   175e0:	andeq	r7, r1, ip, ror #11
   175e4:	andeq	r7, r1, ip, ror #11
   175e8:	strdeq	r7, [r1], -r8
   175ec:	cmp	r4, r2
   175f0:	bne	17550 <__assert_fail@plt+0x5f4c>
   175f4:	b	173b0 <__assert_fail@plt+0x5dac>
   175f8:	mov	r8, #2
   175fc:	ldr	fp, [sp, #76]	; 0x4c
   17600:	ldr	sl, [sp, #80]	; 0x50
   17604:	b	16b30 <__assert_fail@plt+0x552c>
   17608:	ldr	r2, [sp, #40]	; 0x28
   1760c:	str	fp, [sp, #152]	; 0x98
   17610:	mov	fp, r8
   17614:	ldr	r8, [sp, #152]	; 0x98
   17618:	and	r2, r2, r3
   1761c:	str	r2, [sp, #40]	; 0x28
   17620:	b	16b30 <__assert_fail@plt+0x552c>
   17624:	cmp	sl, r4
   17628:	movls	r0, r4
   1762c:	bls	16c60 <__assert_fail@plt+0x565c>
   17630:	ldr	r3, [sp, #48]	; 0x30
   17634:	b	16c50 <__assert_fail@plt+0x564c>
   17638:	str	sl, [sp, #72]	; 0x48
   1763c:	ldr	sl, [sp, #44]	; 0x2c
   17640:	b	16aa0 <__assert_fail@plt+0x549c>
   17644:	str	r3, [sp, #40]	; 0x28
   17648:	str	fp, [sp, #152]	; 0x98
   1764c:	mov	fp, r8
   17650:	ldr	r8, [sp, #152]	; 0x98
   17654:	b	16b30 <__assert_fail@plt+0x552c>
   17658:	str	r6, [sp, #48]	; 0x30
   1765c:	ldr	r6, [sp, #52]	; 0x34
   17660:	b	16ad0 <__assert_fail@plt+0x54cc>
   17664:	mov	r6, #0
   17668:	ldr	r2, [sp, #40]	; 0x28
   1766c:	b	17400 <__assert_fail@plt+0x5dfc>
   17670:	str	r6, [sp, #48]	; 0x30
   17674:	ldr	r6, [sp, #52]	; 0x34
   17678:	b	168bc <__assert_fail@plt+0x52b8>
   1767c:	add	r4, r4, #4
   17680:	mov	r6, #0
   17684:	str	r3, [sp, #48]	; 0x30
   17688:	mov	r5, #48	; 0x30
   1768c:	b	16844 <__assert_fail@plt+0x5240>
   17690:	mov	r7, r3
   17694:	b	174c4 <__assert_fail@plt+0x5ec0>
   17698:	mov	r3, #1
   1769c:	movw	r2, #46968	; 0xb778
   176a0:	movt	r2, #1
   176a4:	mov	r4, r3
   176a8:	str	r3, [sp, #36]	; 0x24
   176ac:	str	r3, [sp, #40]	; 0x28
   176b0:	str	sl, [sp, #44]	; 0x2c
   176b4:	str	sl, [sp, #48]	; 0x30
   176b8:	str	r3, [sp, #56]	; 0x38
   176bc:	str	r2, [sp, #60]	; 0x3c
   176c0:	str	sl, [sp, #68]	; 0x44
   176c4:	str	sl, [sp, #72]	; 0x48
   176c8:	b	1636c <__assert_fail@plt+0x4d68>
   176cc:	mov	r3, r6
   176d0:	mov	r5, #48	; 0x30
   176d4:	mov	r6, #0
   176d8:	b	16844 <__assert_fail@plt+0x5240>
   176dc:	mov	r5, r3
   176e0:	b	16bbc <__assert_fail@plt+0x55b8>
   176e4:	cmp	sl, r4
   176e8:	mov	r5, #48	; 0x30
   176ec:	movhi	r3, #48	; 0x30
   176f0:	strbhi	r3, [r8, r4]
   176f4:	add	r3, r0, #2
   176f8:	add	r4, r0, #3
   176fc:	cmp	sl, r3
   17700:	movhi	r1, #48	; 0x30
   17704:	strbhi	r1, [r8, r3]
   17708:	b	16c94 <__assert_fail@plt+0x5690>
   1770c:	str	fp, [sp, #152]	; 0x98
   17710:	mov	fp, r8
   17714:	ldr	r8, [sp, #152]	; 0x98
   17718:	b	16b30 <__assert_fail@plt+0x552c>
   1771c:	ldr	r3, [sp, #164]	; 0xa4
   17720:	ldrb	r3, [r3]
   17724:	cmp	r3, #0
   17728:	beq	1633c <__assert_fail@plt+0x4d38>
   1772c:	ldr	r2, [sp, #164]	; 0xa4
   17730:	cmp	sl, r4
   17734:	strbhi	r3, [fp, r4]
   17738:	add	r4, r4, #1
   1773c:	ldrb	r3, [r2, #1]!
   17740:	cmp	r3, #0
   17744:	bne	17730 <__assert_fail@plt+0x612c>
   17748:	b	1633c <__assert_fail@plt+0x4d38>
   1774c:	mov	ip, r5
   17750:	mov	r6, #0
   17754:	ldr	r2, [sp, #40]	; 0x28
   17758:	ldr	r8, [sp, #76]	; 0x4c
   1775c:	ldr	sl, [sp, #80]	; 0x50
   17760:	ldr	r5, [sp, #84]	; 0x54
   17764:	ldr	r7, [sp, #88]	; 0x58
   17768:	ldr	r4, [sp, #92]	; 0x5c
   1776c:	b	173f8 <__assert_fail@plt+0x5df4>
   17770:	ldr	r2, [sp, #32]
   17774:	ldrb	r1, [r2, r3]
   17778:	sub	r2, r1, #33	; 0x21
   1777c:	cmp	r2, #29
   17780:	ldrls	pc, [pc, r2, lsl #2]
   17784:	b	17860 <__assert_fail@plt+0x625c>
   17788:	andeq	r7, r1, r0, lsl #16
   1778c:	andeq	r7, r1, r0, ror #16
   17790:	andeq	r7, r1, r0, ror #16
   17794:	andeq	r7, r1, r0, ror #16
   17798:	andeq	r7, r1, r0, ror #16
   1779c:	andeq	r7, r1, r0, ror #16
   177a0:	andeq	r7, r1, r0, lsl #16
   177a4:	andeq	r7, r1, r0, lsl #16
   177a8:	andeq	r7, r1, r0, lsl #16
   177ac:	andeq	r7, r1, r0, ror #16
   177b0:	andeq	r7, r1, r0, ror #16
   177b4:	andeq	r7, r1, r0, ror #16
   177b8:	andeq	r7, r1, r0, lsl #16
   177bc:	andeq	r7, r1, r0, ror #16
   177c0:	andeq	r7, r1, r0, lsl #16
   177c4:	andeq	r7, r1, r0, ror #16
   177c8:	andeq	r7, r1, r0, ror #16
   177cc:	andeq	r7, r1, r0, ror #16
   177d0:	andeq	r7, r1, r0, ror #16
   177d4:	andeq	r7, r1, r0, ror #16
   177d8:	andeq	r7, r1, r0, ror #16
   177dc:	andeq	r7, r1, r0, ror #16
   177e0:	andeq	r7, r1, r0, ror #16
   177e4:	andeq	r7, r1, r0, ror #16
   177e8:	andeq	r7, r1, r0, ror #16
   177ec:	andeq	r7, r1, r0, ror #16
   177f0:	andeq	r7, r1, r0, ror #16
   177f4:	andeq	r7, r1, r0, lsl #16
   177f8:	andeq	r7, r1, r0, lsl #16
   177fc:	andeq	r7, r1, r0, lsl #16
   17800:	ldr	r2, [sp, #44]	; 0x2c
   17804:	cmp	r2, #0
   17808:	bne	17964 <__assert_fail@plt+0x6360>
   1780c:	cmp	sl, r4
   17810:	mov	r5, r1
   17814:	movhi	r2, #63	; 0x3f
   17818:	mov	r9, r3
   1781c:	strbhi	r2, [r8, r4]
   17820:	add	r2, r4, #1
   17824:	cmp	sl, r2
   17828:	movhi	r0, #34	; 0x22
   1782c:	strbhi	r0, [r8, r2]
   17830:	add	r2, r4, #2
   17834:	cmp	sl, r2
   17838:	movhi	r0, #34	; 0x22
   1783c:	strbhi	r0, [r8, r2]
   17840:	add	r2, r4, #3
   17844:	add	r4, r4, #4
   17848:	cmp	sl, r2
   1784c:	movhi	r0, #63	; 0x3f
   17850:	strbhi	r0, [r8, r2]
   17854:	mov	r2, #0
   17858:	mov	r6, r2
   1785c:	b	16c94 <__assert_fail@plt+0x5690>
   17860:	mov	r3, #0
   17864:	mov	r6, r3
   17868:	b	1680c <__assert_fail@plt+0x5208>
   1786c:	ldr	r0, [sp, #28]
   17870:	mov	r1, r4
   17874:	mov	r2, r7
   17878:	mov	r3, r5
   1787c:	mov	ip, r5
   17880:	ldr	r8, [sp, #76]	; 0x4c
   17884:	ldr	sl, [sp, #80]	; 0x50
   17888:	cmp	r1, r0
   1788c:	ldr	r5, [sp, #84]	; 0x54
   17890:	ldr	r7, [sp, #88]	; 0x58
   17894:	ldr	r4, [sp, #92]	; 0x5c
   17898:	bcs	178cc <__assert_fail@plt+0x62c8>
   1789c:	ldrb	r6, [r2]
   178a0:	cmp	r6, #0
   178a4:	bne	178b8 <__assert_fail@plt+0x62b4>
   178a8:	b	179ec <__assert_fail@plt+0x63e8>
   178ac:	ldrb	r6, [r2, #1]!
   178b0:	cmp	r6, #0
   178b4:	beq	17974 <__assert_fail@plt+0x6370>
   178b8:	add	r3, r3, #1
   178bc:	add	r1, r9, r3
   178c0:	cmp	r1, r0
   178c4:	bcc	178ac <__assert_fail@plt+0x62a8>
   178c8:	mov	ip, r3
   178cc:	mov	r6, #0
   178d0:	ldr	r2, [sp, #40]	; 0x28
   178d4:	b	173f8 <__assert_fail@plt+0x5df4>
   178d8:	mov	r3, #1
   178dc:	mov	r2, #0
   178e0:	mov	r4, r2
   178e4:	str	r3, [sp, #36]	; 0x24
   178e8:	str	r3, [sp, #40]	; 0x28
   178ec:	str	r3, [sp, #44]	; 0x2c
   178f0:	str	r2, [sp, #48]	; 0x30
   178f4:	str	r3, [sp, #56]	; 0x38
   178f8:	movw	r3, #46968	; 0xb778
   178fc:	movt	r3, #1
   17900:	str	r3, [sp, #60]	; 0x3c
   17904:	str	r2, [sp, #68]	; 0x44
   17908:	str	r2, [sp, #72]	; 0x48
   1790c:	b	1636c <__assert_fail@plt+0x4d68>
   17910:	mov	r2, r3
   17914:	ldr	r3, [sp, #60]	; 0x3c
   17918:	cmp	r3, #0
   1791c:	moveq	r2, #0
   17920:	andne	r2, r2, #1
   17924:	cmp	r2, #0
   17928:	beq	17954 <__assert_fail@plt+0x6350>
   1792c:	mov	r2, r3
   17930:	ldrb	r3, [r3]
   17934:	cmp	r3, #0
   17938:	beq	17954 <__assert_fail@plt+0x6350>
   1793c:	cmp	sl, r4
   17940:	strbhi	r3, [fp, r4]
   17944:	add	r4, r4, #1
   17948:	ldrb	r3, [r2, #1]!
   1794c:	cmp	r3, #0
   17950:	bne	1793c <__assert_fail@plt+0x6338>
   17954:	cmp	sl, r4
   17958:	movhi	r3, #0
   1795c:	strbhi	r3, [fp, r4]
   17960:	b	16b74 <__assert_fail@plt+0x5570>
   17964:	str	fp, [sp, #152]	; 0x98
   17968:	mov	fp, r8
   1796c:	ldr	r8, [sp, #152]	; 0x98
   17970:	b	16b3c <__assert_fail@plt+0x5538>
   17974:	mov	ip, r3
   17978:	ldr	r2, [sp, #40]	; 0x28
   1797c:	b	173f8 <__assert_fail@plt+0x5df4>
   17980:	str	fp, [sp, #152]	; 0x98
   17984:	mov	fp, r8
   17988:	ldr	r8, [sp, #152]	; 0x98
   1798c:	sub	r3, r8, #2
   17990:	clz	r3, r3
   17994:	lsr	r3, r3, #5
   17998:	str	r3, [sp, #40]	; 0x28
   1799c:	b	16b30 <__assert_fail@plt+0x552c>
   179a0:	mov	ip, #5
   179a4:	ldr	r3, [sp, #28]
   179a8:	str	ip, [sp]
   179ac:	ldr	r2, [sp, #156]	; 0x9c
   179b0:	ldr	ip, [sp, #164]	; 0xa4
   179b4:	ldr	r0, [sp, #160]	; 0xa0
   179b8:	str	r2, [sp, #4]
   179bc:	ldr	r2, [sp, #32]
   179c0:	ldr	r1, [sp, #72]	; 0x48
   179c4:	str	ip, [sp, #12]
   179c8:	ldr	ip, [sp, #168]	; 0xa8
   179cc:	str	r0, [sp, #8]
   179d0:	mov	r0, fp
   179d4:	str	ip, [sp, #16]
   179d8:	bl	16284 <__assert_fail@plt+0x4c80>
   179dc:	mov	r4, r0
   179e0:	b	16b74 <__assert_fail@plt+0x5570>
   179e4:	mov	r8, #2
   179e8:	b	16b30 <__assert_fail@plt+0x552c>
   179ec:	ldr	r2, [sp, #40]	; 0x28
   179f0:	b	173f8 <__assert_fail@plt+0x5df4>
   179f4:	mov	r3, #0
   179f8:	mov	r2, #1
   179fc:	mov	r4, r3
   17a00:	strd	r2, [sp, #36]	; 0x24
   17a04:	strd	r2, [sp, #44]	; 0x2c
   17a08:	str	r2, [sp, #56]	; 0x38
   17a0c:	str	r3, [sp, #68]	; 0x44
   17a10:	str	r3, [sp, #72]	; 0x48
   17a14:	movw	r3, #46988	; 0xb78c
   17a18:	movt	r3, #1
   17a1c:	str	r3, [sp, #60]	; 0x3c
   17a20:	b	1636c <__assert_fail@plt+0x4d68>
   17a24:	mov	r3, #0
   17a28:	mov	r1, #1
   17a2c:	mov	r2, r3
   17a30:	str	r1, [sp, #36]	; 0x24
   17a34:	str	r3, [sp, #48]	; 0x30
   17a38:	str	sl, [sp, #72]	; 0x48
   17a3c:	b	16974 <__assert_fail@plt+0x5370>
   17a40:	bl	115c8 <abort@plt>
   17a44:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17a48:	mov	r4, r0
   17a4c:	mov	r5, r3
   17a50:	strd	r6, [sp, #8]
   17a54:	movw	r7, #49516	; 0xc16c
   17a58:	movt	r7, #2
   17a5c:	strd	r8, [sp, #16]
   17a60:	strd	sl, [sp, #24]
   17a64:	mov	sl, r1
   17a68:	mov	fp, r2
   17a6c:	str	lr, [sp, #32]
   17a70:	sub	sp, sp, #60	; 0x3c
   17a74:	bl	11484 <__errno_location@plt>
   17a78:	mov	r8, r0
   17a7c:	cmn	r4, #-2147483647	; 0x80000001
   17a80:	ldr	r6, [r7]
   17a84:	movne	r0, #0
   17a88:	moveq	r0, #1
   17a8c:	ldr	r3, [r8]
   17a90:	orrs	r0, r0, r4, lsr #31
   17a94:	str	r3, [sp, #28]
   17a98:	bne	17c28 <__assert_fail@plt+0x6624>
   17a9c:	ldr	r3, [r7, #4]
   17aa0:	cmp	r3, r4
   17aa4:	bgt	17b04 <__assert_fail@plt+0x6500>
   17aa8:	add	r1, r7, #8
   17aac:	sub	r2, r4, r3
   17ab0:	str	r3, [sp, #52]	; 0x34
   17ab4:	cmp	r6, r1
   17ab8:	add	r2, r2, #1
   17abc:	beq	17c00 <__assert_fail@plt+0x65fc>
   17ac0:	mov	r1, #8
   17ac4:	mov	r0, r6
   17ac8:	mvn	r3, #-2147483648	; 0x80000000
   17acc:	str	r1, [sp]
   17ad0:	add	r1, sp, #52	; 0x34
   17ad4:	bl	193a8 <__assert_fail@plt+0x7da4>
   17ad8:	mov	r6, r0
   17adc:	str	r0, [r7]
   17ae0:	ldr	r0, [r7, #4]
   17ae4:	mov	r1, #0
   17ae8:	ldr	r2, [sp, #52]	; 0x34
   17aec:	sub	r2, r2, r0
   17af0:	add	r0, r6, r0, lsl #3
   17af4:	lsl	r2, r2, #3
   17af8:	bl	114a8 <memset@plt>
   17afc:	ldr	r3, [sp, #52]	; 0x34
   17b00:	str	r3, [r7, #4]
   17b04:	ldr	r1, [r5, #4]
   17b08:	add	r0, r6, r4, lsl #3
   17b0c:	add	ip, r5, #8
   17b10:	mov	r3, fp
   17b14:	mov	r2, sl
   17b18:	ldr	r7, [r0, #4]
   17b1c:	str	r0, [sp, #36]	; 0x24
   17b20:	str	ip, [sp, #40]	; 0x28
   17b24:	orr	r0, r1, #1
   17b28:	ldr	r9, [r6, r4, lsl #3]
   17b2c:	str	ip, [sp, #8]
   17b30:	ldr	lr, [r5, #44]	; 0x2c
   17b34:	str	r0, [sp, #4]
   17b38:	ldr	ip, [r5]
   17b3c:	mov	r1, r9
   17b40:	str	ip, [sp, #32]
   17b44:	ldr	ip, [r5, #40]	; 0x28
   17b48:	str	ip, [sp, #12]
   17b4c:	ldr	ip, [sp, #32]
   17b50:	str	lr, [sp, #16]
   17b54:	str	r0, [sp, #44]	; 0x2c
   17b58:	mov	r0, r7
   17b5c:	str	ip, [sp]
   17b60:	bl	16284 <__assert_fail@plt+0x4c80>
   17b64:	cmp	r9, r0
   17b68:	bhi	17bd8 <__assert_fail@plt+0x65d4>
   17b6c:	add	r9, r0, #1
   17b70:	movw	r3, #49680	; 0xc210
   17b74:	movt	r3, #2
   17b78:	cmp	r7, r3
   17b7c:	str	r9, [r6, r4, lsl #3]
   17b80:	beq	17b8c <__assert_fail@plt+0x6588>
   17b84:	mov	r0, r7
   17b88:	bl	19e14 <__assert_fail@plt+0x8810>
   17b8c:	mov	r0, r9
   17b90:	bl	191f8 <__assert_fail@plt+0x7bf4>
   17b94:	ldr	ip, [r5]
   17b98:	mov	r3, fp
   17b9c:	mov	r2, sl
   17ba0:	mov	r1, r9
   17ba4:	mov	r7, r0
   17ba8:	ldr	lr, [sp, #36]	; 0x24
   17bac:	ldr	r4, [r5, #40]	; 0x28
   17bb0:	str	r0, [lr, #4]
   17bb4:	ldr	lr, [r5, #44]	; 0x2c
   17bb8:	str	ip, [sp]
   17bbc:	ldr	ip, [sp, #44]	; 0x2c
   17bc0:	str	ip, [sp, #4]
   17bc4:	ldr	ip, [sp, #40]	; 0x28
   17bc8:	str	r4, [sp, #12]
   17bcc:	str	lr, [sp, #16]
   17bd0:	str	ip, [sp, #8]
   17bd4:	bl	16284 <__assert_fail@plt+0x4c80>
   17bd8:	ldr	r3, [sp, #28]
   17bdc:	mov	r0, r7
   17be0:	str	r3, [r8]
   17be4:	add	sp, sp, #60	; 0x3c
   17be8:	ldrd	r4, [sp]
   17bec:	ldrd	r6, [sp, #8]
   17bf0:	ldrd	r8, [sp, #16]
   17bf4:	ldrd	sl, [sp, #24]
   17bf8:	add	sp, sp, #32
   17bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   17c00:	mov	r1, #8
   17c04:	mvn	r3, #-2147483648	; 0x80000000
   17c08:	str	r1, [sp]
   17c0c:	add	r1, sp, #52	; 0x34
   17c10:	bl	193a8 <__assert_fail@plt+0x7da4>
   17c14:	ldrd	r2, [r7, #8]
   17c18:	mov	r6, r0
   17c1c:	str	r0, [r7]
   17c20:	strd	r2, [r0]
   17c24:	b	17ae0 <__assert_fail@plt+0x64dc>
   17c28:	bl	115c8 <abort@plt>
   17c2c:	strd	r4, [sp, #-16]!
   17c30:	mov	r5, r0
   17c34:	str	r6, [sp, #8]
   17c38:	str	lr, [sp, #12]
   17c3c:	bl	11484 <__errno_location@plt>
   17c40:	mov	r4, r0
   17c44:	cmp	r5, #0
   17c48:	ldr	r0, [pc, #32]	; 17c70 <__assert_fail@plt+0x666c>
   17c4c:	mov	r1, #48	; 0x30
   17c50:	movne	r0, r5
   17c54:	ldr	r6, [r4]
   17c58:	bl	19520 <__assert_fail@plt+0x7f1c>
   17c5c:	str	r6, [r4]
   17c60:	ldrd	r4, [sp]
   17c64:	ldr	r6, [sp, #8]
   17c68:	add	sp, sp, #12
   17c6c:	pop	{pc}		; (ldr pc, [sp], #4)
   17c70:	andeq	ip, r2, r0, lsl r3
   17c74:	ldr	r3, [pc, #12]	; 17c88 <__assert_fail@plt+0x6684>
   17c78:	cmp	r0, #0
   17c7c:	moveq	r0, r3
   17c80:	ldr	r0, [r0]
   17c84:	bx	lr
   17c88:	andeq	ip, r2, r0, lsl r3
   17c8c:	ldr	r3, [pc, #12]	; 17ca0 <__assert_fail@plt+0x669c>
   17c90:	cmp	r0, #0
   17c94:	moveq	r0, r3
   17c98:	str	r1, [r0]
   17c9c:	bx	lr
   17ca0:	andeq	ip, r2, r0, lsl r3
   17ca4:	ldr	r3, [pc, #52]	; 17ce0 <__assert_fail@plt+0x66dc>
   17ca8:	cmp	r0, #0
   17cac:	push	{lr}		; (str lr, [sp, #-4]!)
   17cb0:	lsr	lr, r1, #5
   17cb4:	and	r1, r1, #31
   17cb8:	moveq	r0, r3
   17cbc:	add	r3, r0, #8
   17cc0:	ldr	ip, [r3, lr, lsl #2]
   17cc4:	lsr	r0, ip, r1
   17cc8:	eor	r2, r2, r0
   17ccc:	and	r0, r0, #1
   17cd0:	and	r2, r2, #1
   17cd4:	eor	r1, ip, r2, lsl r1
   17cd8:	str	r1, [r3, lr, lsl #2]
   17cdc:	pop	{pc}		; (ldr pc, [sp], #4)
   17ce0:	andeq	ip, r2, r0, lsl r3
   17ce4:	ldr	r3, [pc, #16]	; 17cfc <__assert_fail@plt+0x66f8>
   17ce8:	cmp	r0, #0
   17cec:	movne	r3, r0
   17cf0:	ldr	r0, [r3, #4]
   17cf4:	str	r1, [r3, #4]
   17cf8:	bx	lr
   17cfc:	andeq	ip, r2, r0, lsl r3
   17d00:	ldr	r3, [pc, #48]	; 17d38 <__assert_fail@plt+0x6734>
   17d04:	cmp	r0, #0
   17d08:	mov	ip, #10
   17d0c:	moveq	r0, r3
   17d10:	cmp	r2, #0
   17d14:	cmpne	r1, #0
   17d18:	str	ip, [r0]
   17d1c:	beq	17d2c <__assert_fail@plt+0x6728>
   17d20:	str	r1, [r0, #40]	; 0x28
   17d24:	str	r2, [r0, #44]	; 0x2c
   17d28:	bx	lr
   17d2c:	str	r4, [sp, #-8]!
   17d30:	str	lr, [sp, #4]
   17d34:	bl	115c8 <abort@plt>
   17d38:	andeq	ip, r2, r0, lsl r3
   17d3c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17d40:	strd	r6, [sp, #8]
   17d44:	mov	r7, r0
   17d48:	mov	r6, r1
   17d4c:	strd	r8, [sp, #16]
   17d50:	mov	r8, r2
   17d54:	mov	r9, r3
   17d58:	str	lr, [sp, #24]
   17d5c:	sub	sp, sp, #28
   17d60:	ldr	r4, [sp, #56]	; 0x38
   17d64:	ldr	ip, [pc, #104]	; 17dd4 <__assert_fail@plt+0x67d0>
   17d68:	cmp	r4, #0
   17d6c:	moveq	r4, ip
   17d70:	bl	11484 <__errno_location@plt>
   17d74:	ldr	ip, [r4, #44]	; 0x2c
   17d78:	mov	r5, r0
   17d7c:	mov	r1, r6
   17d80:	add	lr, r4, #8
   17d84:	mov	r3, r9
   17d88:	ldr	r6, [r5]
   17d8c:	mov	r2, r8
   17d90:	mov	r0, r7
   17d94:	str	ip, [sp, #16]
   17d98:	ldr	ip, [r4, #40]	; 0x28
   17d9c:	str	lr, [sp, #8]
   17da0:	str	ip, [sp, #12]
   17da4:	ldr	ip, [r4, #4]
   17da8:	str	ip, [sp, #4]
   17dac:	ldr	ip, [r4]
   17db0:	str	ip, [sp]
   17db4:	bl	16284 <__assert_fail@plt+0x4c80>
   17db8:	str	r6, [r5]
   17dbc:	add	sp, sp, #28
   17dc0:	ldrd	r4, [sp]
   17dc4:	ldrd	r6, [sp, #8]
   17dc8:	ldrd	r8, [sp, #16]
   17dcc:	add	sp, sp, #24
   17dd0:	pop	{pc}		; (ldr pc, [sp], #4)
   17dd4:	andeq	ip, r2, r0, lsl r3
   17dd8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17ddc:	cmp	r3, #0
   17de0:	ldr	r4, [pc, #220]	; 17ec4 <__assert_fail@plt+0x68c0>
   17de4:	movne	r4, r3
   17de8:	strd	r6, [sp, #8]
   17dec:	mov	r6, r2
   17df0:	strd	r8, [sp, #16]
   17df4:	mov	r9, r0
   17df8:	strd	sl, [sp, #24]
   17dfc:	mov	sl, r1
   17e00:	str	lr, [sp, #32]
   17e04:	sub	sp, sp, #44	; 0x2c
   17e08:	bl	11484 <__errno_location@plt>
   17e0c:	ldr	r5, [r4, #4]
   17e10:	mov	r7, r0
   17e14:	mov	r1, #0
   17e18:	add	r8, r4, #8
   17e1c:	mov	r3, sl
   17e20:	ldr	ip, [r4, #44]	; 0x2c
   17e24:	mov	r2, r9
   17e28:	mov	r0, r1
   17e2c:	ldr	lr, [r7]
   17e30:	cmp	r6, r1
   17e34:	orreq	r5, r5, #1
   17e38:	str	ip, [sp, #16]
   17e3c:	ldr	ip, [r4, #40]	; 0x28
   17e40:	stmib	sp, {r5, r8, ip}
   17e44:	ldr	ip, [r4]
   17e48:	str	lr, [sp, #28]
   17e4c:	str	ip, [sp]
   17e50:	bl	16284 <__assert_fail@plt+0x4c80>
   17e54:	add	r1, r0, #1
   17e58:	mov	fp, r0
   17e5c:	mov	r0, r1
   17e60:	str	r1, [sp, #36]	; 0x24
   17e64:	bl	191f8 <__assert_fail@plt+0x7bf4>
   17e68:	ldr	ip, [r4, #44]	; 0x2c
   17e6c:	mov	r3, sl
   17e70:	mov	r2, r9
   17e74:	ldr	r1, [sp, #36]	; 0x24
   17e78:	str	ip, [sp, #16]
   17e7c:	ldr	ip, [r4, #40]	; 0x28
   17e80:	str	r0, [sp, #32]
   17e84:	stmib	sp, {r5, r8, ip}
   17e88:	ldr	ip, [r4]
   17e8c:	str	ip, [sp]
   17e90:	bl	16284 <__assert_fail@plt+0x4c80>
   17e94:	ldr	lr, [sp, #28]
   17e98:	cmp	r6, #0
   17e9c:	ldr	r0, [sp, #32]
   17ea0:	str	lr, [r7]
   17ea4:	strne	fp, [r6]
   17ea8:	add	sp, sp, #44	; 0x2c
   17eac:	ldrd	r4, [sp]
   17eb0:	ldrd	r6, [sp, #8]
   17eb4:	ldrd	r8, [sp, #16]
   17eb8:	ldrd	sl, [sp, #24]
   17ebc:	add	sp, sp, #32
   17ec0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ec4:	andeq	ip, r2, r0, lsl r3
   17ec8:	mov	r3, r2
   17ecc:	mov	r2, #0
   17ed0:	b	17dd8 <__assert_fail@plt+0x67d4>
   17ed4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17ed8:	movw	r5, #49516	; 0xc16c
   17edc:	movt	r5, #2
   17ee0:	ldr	r3, [r5, #4]
   17ee4:	strd	r6, [sp, #8]
   17ee8:	str	r8, [sp, #16]
   17eec:	str	lr, [sp, #20]
   17ef0:	ldr	r7, [r5]
   17ef4:	cmp	r3, #1
   17ef8:	ble	17f1c <__assert_fail@plt+0x6918>
   17efc:	mov	r4, #1
   17f00:	add	r6, r7, #4
   17f04:	ldr	r0, [r6, r4, lsl #3]
   17f08:	add	r4, r4, #1
   17f0c:	bl	19e14 <__assert_fail@plt+0x8810>
   17f10:	ldr	r3, [r5, #4]
   17f14:	cmp	r3, r4
   17f18:	bgt	17f04 <__assert_fail@plt+0x6900>
   17f1c:	ldr	r0, [r7, #4]
   17f20:	movw	r4, #49680	; 0xc210
   17f24:	movt	r4, #2
   17f28:	cmp	r0, r4
   17f2c:	beq	17f40 <__assert_fail@plt+0x693c>
   17f30:	bl	19e14 <__assert_fail@plt+0x8810>
   17f34:	mov	r3, #256	; 0x100
   17f38:	str	r3, [r5, #8]
   17f3c:	str	r4, [r5, #12]
   17f40:	ldr	r4, [pc, #44]	; 17f74 <__assert_fail@plt+0x6970>
   17f44:	cmp	r7, r4
   17f48:	beq	17f58 <__assert_fail@plt+0x6954>
   17f4c:	mov	r0, r7
   17f50:	bl	19e14 <__assert_fail@plt+0x8810>
   17f54:	str	r4, [r5]
   17f58:	mov	r3, #1
   17f5c:	ldrd	r6, [sp, #8]
   17f60:	str	r3, [r5, #4]
   17f64:	ldrd	r4, [sp]
   17f68:	ldr	r8, [sp, #16]
   17f6c:	add	sp, sp, #20
   17f70:	pop	{pc}		; (ldr pc, [sp], #4)
   17f74:	andeq	ip, r2, r4, ror r1
   17f78:	ldr	r3, [pc, #4]	; 17f84 <__assert_fail@plt+0x6980>
   17f7c:	mvn	r2, #0
   17f80:	b	17a44 <__assert_fail@plt+0x6440>
   17f84:	andeq	ip, r2, r0, lsl r3
   17f88:	ldr	r3, [pc]	; 17f90 <__assert_fail@plt+0x698c>
   17f8c:	b	17a44 <__assert_fail@plt+0x6440>
   17f90:	andeq	ip, r2, r0, lsl r3
   17f94:	mov	r1, r0
   17f98:	ldr	r3, [pc, #8]	; 17fa8 <__assert_fail@plt+0x69a4>
   17f9c:	mvn	r2, #0
   17fa0:	mov	r0, #0
   17fa4:	b	17a44 <__assert_fail@plt+0x6440>
   17fa8:	andeq	ip, r2, r0, lsl r3
   17fac:	mov	r2, r1
   17fb0:	ldr	r3, [pc, #8]	; 17fc0 <__assert_fail@plt+0x69bc>
   17fb4:	mov	r1, r0
   17fb8:	mov	r0, #0
   17fbc:	b	17a44 <__assert_fail@plt+0x6440>
   17fc0:	andeq	ip, r2, r0, lsl r3
   17fc4:	strd	r4, [sp, #-12]!
   17fc8:	mov	r5, r2
   17fcc:	mov	r4, r0
   17fd0:	str	lr, [sp, #8]
   17fd4:	sub	sp, sp, #52	; 0x34
   17fd8:	mov	r0, sp
   17fdc:	bl	160e0 <__assert_fail@plt+0x4adc>
   17fe0:	mov	r3, sp
   17fe4:	mov	r1, r5
   17fe8:	mov	r0, r4
   17fec:	mvn	r2, #0
   17ff0:	bl	17a44 <__assert_fail@plt+0x6440>
   17ff4:	add	sp, sp, #52	; 0x34
   17ff8:	ldrd	r4, [sp]
   17ffc:	add	sp, sp, #8
   18000:	pop	{pc}		; (ldr pc, [sp], #4)
   18004:	strd	r4, [sp, #-16]!
   18008:	mov	r5, r2
   1800c:	mov	r4, r0
   18010:	str	r6, [sp, #8]
   18014:	mov	r6, r3
   18018:	str	lr, [sp, #12]
   1801c:	sub	sp, sp, #48	; 0x30
   18020:	mov	r0, sp
   18024:	bl	160e0 <__assert_fail@plt+0x4adc>
   18028:	mov	r3, sp
   1802c:	mov	r2, r6
   18030:	mov	r1, r5
   18034:	mov	r0, r4
   18038:	bl	17a44 <__assert_fail@plt+0x6440>
   1803c:	add	sp, sp, #48	; 0x30
   18040:	ldrd	r4, [sp]
   18044:	ldr	r6, [sp, #8]
   18048:	add	sp, sp, #12
   1804c:	pop	{pc}		; (ldr pc, [sp], #4)
   18050:	mov	r2, r1
   18054:	mov	r1, r0
   18058:	mov	r0, #0
   1805c:	b	17fc4 <__assert_fail@plt+0x69c0>
   18060:	mov	r3, r2
   18064:	mov	r2, r1
   18068:	mov	r1, r0
   1806c:	mov	r0, #0
   18070:	b	18004 <__assert_fail@plt+0x6a00>
   18074:	ldr	ip, [pc, #140]	; 18108 <__assert_fail@plt+0x6b04>
   18078:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1807c:	ldrd	r4, [ip]
   18080:	strd	r6, [sp, #8]
   18084:	ldrd	r6, [ip, #8]
   18088:	strd	r8, [sp, #16]
   1808c:	lsr	r9, r2, #5
   18090:	str	lr, [sp, #24]
   18094:	sub	sp, sp, #52	; 0x34
   18098:	and	lr, r2, #31
   1809c:	add	r8, sp, #8
   180a0:	mov	r2, r1
   180a4:	strd	r4, [sp]
   180a8:	mov	r1, r0
   180ac:	mov	r3, sp
   180b0:	strd	r6, [sp, #8]
   180b4:	mov	r0, #0
   180b8:	ldrd	r4, [ip, #16]
   180bc:	ldrd	r6, [ip, #24]
   180c0:	strd	r4, [sp, #16]
   180c4:	ldrd	r4, [ip, #32]
   180c8:	strd	r6, [sp, #24]
   180cc:	ldrd	r6, [ip, #40]	; 0x28
   180d0:	strd	r4, [sp, #32]
   180d4:	strd	r6, [sp, #40]	; 0x28
   180d8:	ldr	ip, [r8, r9, lsl #2]
   180dc:	mvn	r4, ip, lsr lr
   180e0:	and	r4, r4, #1
   180e4:	eor	lr, ip, r4, lsl lr
   180e8:	str	lr, [r8, r9, lsl #2]
   180ec:	bl	17a44 <__assert_fail@plt+0x6440>
   180f0:	add	sp, sp, #52	; 0x34
   180f4:	ldrd	r4, [sp]
   180f8:	ldrd	r6, [sp, #8]
   180fc:	ldrd	r8, [sp, #16]
   18100:	add	sp, sp, #24
   18104:	pop	{pc}		; (ldr pc, [sp], #4)
   18108:	andeq	ip, r2, r0, lsl r3
   1810c:	mov	r2, r1
   18110:	mvn	r1, #0
   18114:	b	18074 <__assert_fail@plt+0x6a70>
   18118:	mov	r2, #58	; 0x3a
   1811c:	mvn	r1, #0
   18120:	b	18074 <__assert_fail@plt+0x6a70>
   18124:	mov	r2, #58	; 0x3a
   18128:	b	18074 <__assert_fail@plt+0x6a70>
   1812c:	strd	r4, [sp, #-20]!	; 0xffffffec
   18130:	strd	r6, [sp, #8]
   18134:	mov	r6, r0
   18138:	mov	r7, r2
   1813c:	str	lr, [sp, #16]
   18140:	sub	sp, sp, #100	; 0x64
   18144:	mov	r0, sp
   18148:	bl	160e0 <__assert_fail@plt+0x4adc>
   1814c:	ldrd	r4, [sp, #8]
   18150:	mov	r1, r7
   18154:	mov	r0, r6
   18158:	add	r3, sp, #48	; 0x30
   1815c:	mvn	r2, #0
   18160:	ldrd	r6, [sp]
   18164:	strd	r4, [sp, #56]	; 0x38
   18168:	ldrd	r4, [sp, #16]
   1816c:	strd	r6, [sp, #48]	; 0x30
   18170:	ldrd	r6, [sp, #32]
   18174:	ldr	lr, [sp, #60]	; 0x3c
   18178:	strd	r4, [sp, #64]	; 0x40
   1817c:	ldrd	r4, [sp, #24]
   18180:	mvn	ip, lr
   18184:	and	ip, ip, #67108864	; 0x4000000
   18188:	strd	r4, [sp, #72]	; 0x48
   1818c:	eor	ip, ip, lr
   18190:	ldrd	r4, [sp, #40]	; 0x28
   18194:	str	ip, [sp, #60]	; 0x3c
   18198:	strd	r6, [sp, #80]	; 0x50
   1819c:	strd	r4, [sp, #88]	; 0x58
   181a0:	bl	17a44 <__assert_fail@plt+0x6440>
   181a4:	add	sp, sp, #100	; 0x64
   181a8:	ldrd	r4, [sp]
   181ac:	ldrd	r6, [sp, #8]
   181b0:	add	sp, sp, #16
   181b4:	pop	{pc}		; (ldr pc, [sp], #4)
   181b8:	ldr	ip, [pc, #156]	; 1825c <__assert_fail@plt+0x6c58>
   181bc:	cmp	r2, #0
   181c0:	cmpne	r1, #0
   181c4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   181c8:	strd	r6, [sp, #8]
   181cc:	mov	r6, r2
   181d0:	str	r8, [sp, #16]
   181d4:	mov	r8, r3
   181d8:	strd	sl, [sp, #20]
   181dc:	ldrd	r4, [ip]
   181e0:	str	lr, [sp, #28]
   181e4:	sub	sp, sp, #48	; 0x30
   181e8:	mov	lr, #10
   181ec:	ldrd	r2, [ip, #8]
   181f0:	ldrd	sl, [ip, #16]
   181f4:	strd	r4, [sp]
   181f8:	ldrd	r4, [ip, #32]
   181fc:	str	lr, [sp]
   18200:	strd	r2, [sp, #8]
   18204:	strd	sl, [sp, #16]
   18208:	ldrd	r2, [ip, #24]
   1820c:	ldrd	sl, [ip, #40]	; 0x28
   18210:	strd	r2, [sp, #24]
   18214:	strd	r4, [sp, #32]
   18218:	strd	sl, [sp, #40]	; 0x28
   1821c:	beq	18258 <__assert_fail@plt+0x6c54>
   18220:	ldr	r2, [sp, #80]	; 0x50
   18224:	mov	r7, r1
   18228:	mov	r3, sp
   1822c:	mov	r1, r8
   18230:	str	r7, [sp, #40]	; 0x28
   18234:	str	r6, [sp, #44]	; 0x2c
   18238:	bl	17a44 <__assert_fail@plt+0x6440>
   1823c:	add	sp, sp, #48	; 0x30
   18240:	ldrd	r4, [sp]
   18244:	ldrd	r6, [sp, #8]
   18248:	ldr	r8, [sp, #16]
   1824c:	ldrd	sl, [sp, #20]
   18250:	add	sp, sp, #28
   18254:	pop	{pc}		; (ldr pc, [sp], #4)
   18258:	bl	115c8 <abort@plt>
   1825c:	andeq	ip, r2, r0, lsl r3
   18260:	mvn	ip, #0
   18264:	push	{lr}		; (str lr, [sp, #-4]!)
   18268:	sub	sp, sp, #12
   1826c:	str	ip, [sp]
   18270:	bl	181b8 <__assert_fail@plt+0x6bb4>
   18274:	add	sp, sp, #12
   18278:	pop	{pc}		; (ldr pc, [sp], #4)
   1827c:	mvn	ip, #0
   18280:	push	{lr}		; (str lr, [sp, #-4]!)
   18284:	sub	sp, sp, #12
   18288:	mov	r3, r2
   1828c:	mov	r2, r1
   18290:	mov	r1, r0
   18294:	mov	r0, #0
   18298:	str	ip, [sp]
   1829c:	bl	181b8 <__assert_fail@plt+0x6bb4>
   182a0:	add	sp, sp, #12
   182a4:	pop	{pc}		; (ldr pc, [sp], #4)
   182a8:	push	{lr}		; (str lr, [sp, #-4]!)
   182ac:	sub	sp, sp, #12
   182b0:	str	r3, [sp]
   182b4:	mov	r3, r2
   182b8:	mov	r2, r1
   182bc:	mov	r1, r0
   182c0:	mov	r0, #0
   182c4:	bl	181b8 <__assert_fail@plt+0x6bb4>
   182c8:	add	sp, sp, #12
   182cc:	pop	{pc}		; (ldr pc, [sp], #4)
   182d0:	ldr	r3, [pc]	; 182d8 <__assert_fail@plt+0x6cd4>
   182d4:	b	17a44 <__assert_fail@plt+0x6440>
   182d8:	andeq	ip, r2, ip, ror r1
   182dc:	mov	r2, r1
   182e0:	ldr	r3, [pc, #8]	; 182f0 <__assert_fail@plt+0x6cec>
   182e4:	mov	r1, r0
   182e8:	mov	r0, #0
   182ec:	b	17a44 <__assert_fail@plt+0x6440>
   182f0:	andeq	ip, r2, ip, ror r1
   182f4:	ldr	r3, [pc, #4]	; 18300 <__assert_fail@plt+0x6cfc>
   182f8:	mvn	r2, #0
   182fc:	b	17a44 <__assert_fail@plt+0x6440>
   18300:	andeq	ip, r2, ip, ror r1
   18304:	mov	r1, r0
   18308:	ldr	r3, [pc, #8]	; 18318 <__assert_fail@plt+0x6d14>
   1830c:	mvn	r2, #0
   18310:	mov	r0, #0
   18314:	b	17a44 <__assert_fail@plt+0x6440>
   18318:	andeq	ip, r2, ip, ror r1
   1831c:	str	r4, [sp, #-16]!
   18320:	movw	r1, #48020	; 0xbb94
   18324:	movt	r1, #1
   18328:	strd	r6, [sp, #4]
   1832c:	mov	r4, r0
   18330:	mov	r0, #3
   18334:	str	lr, [sp, #12]
   18338:	sub	sp, sp, #104	; 0x68
   1833c:	mov	r2, sp
   18340:	bl	115e0 <__lxstat64@plt>
   18344:	cmp	r0, #0
   18348:	movne	r0, #0
   1834c:	bne	18364 <__assert_fail@plt+0x6d60>
   18350:	ldrd	r6, [sp]
   18354:	mov	r0, r4
   18358:	ldrd	r2, [sp, #96]	; 0x60
   1835c:	strd	r2, [r4]
   18360:	strd	r6, [r4, #8]
   18364:	add	sp, sp, #104	; 0x68
   18368:	ldr	r4, [sp]
   1836c:	ldrd	r6, [sp, #4]
   18370:	add	sp, sp, #12
   18374:	pop	{pc}		; (ldr pc, [sp], #4)
   18378:	cmn	r0, #100	; 0x64
   1837c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18380:	mov	r5, r1
   18384:	strd	r6, [sp, #8]
   18388:	strd	r8, [sp, #16]
   1838c:	mov	r8, r2
   18390:	strd	sl, [sp, #24]
   18394:	str	lr, [sp, #32]
   18398:	sub	sp, sp, #4032	; 0xfc0
   1839c:	sub	sp, sp, #4
   183a0:	beq	18490 <__assert_fail@plt+0x6e8c>
   183a4:	ldrb	r3, [r1]
   183a8:	cmp	r3, #47	; 0x2f
   183ac:	beq	18490 <__assert_fail@plt+0x6e8c>
   183b0:	mov	r4, r0
   183b4:	mov	r7, sp
   183b8:	mov	r2, r1
   183bc:	mov	r0, r7
   183c0:	mov	r1, r4
   183c4:	bl	19804 <__assert_fail@plt+0x8200>
   183c8:	subs	r9, r0, #0
   183cc:	beq	18408 <__assert_fail@plt+0x6e04>
   183d0:	mov	r1, r8
   183d4:	bl	18b54 <__assert_fail@plt+0x7550>
   183d8:	mov	r6, r0
   183dc:	bl	11484 <__errno_location@plt>
   183e0:	cmp	r9, r7
   183e4:	mov	fp, r0
   183e8:	ldr	sl, [r0]
   183ec:	beq	183f8 <__assert_fail@plt+0x6df4>
   183f0:	mov	r0, r9
   183f4:	bl	19e14 <__assert_fail@plt+0x8810>
   183f8:	cmn	r6, #1
   183fc:	bne	1846c <__assert_fail@plt+0x6e68>
   18400:	cmp	sl, #20
   18404:	bne	184a4 <__assert_fail@plt+0x6ea0>
   18408:	mov	r0, r7
   1840c:	bl	1a0b8 <__assert_fail@plt+0x8ab4>
   18410:	cmp	r0, #0
   18414:	bne	18540 <__assert_fail@plt+0x6f3c>
   18418:	cmp	r4, #0
   1841c:	blt	1842c <__assert_fail@plt+0x6e28>
   18420:	ldr	r3, [sp]
   18424:	cmp	r3, r4
   18428:	beq	18518 <__assert_fail@plt+0x6f14>
   1842c:	mov	r0, r4
   18430:	bl	11568 <fchdir@plt>
   18434:	cmp	r0, #0
   18438:	bne	184f8 <__assert_fail@plt+0x6ef4>
   1843c:	mov	r1, r8
   18440:	mov	r0, r5
   18444:	bl	18b54 <__assert_fail@plt+0x7550>
   18448:	cmn	r0, #1
   1844c:	mov	r6, r0
   18450:	beq	184c8 <__assert_fail@plt+0x6ec4>
   18454:	mov	r0, r7
   18458:	bl	1a12c <__assert_fail@plt+0x8b28>
   1845c:	cmp	r0, #0
   18460:	bne	18534 <__assert_fail@plt+0x6f30>
   18464:	mov	r0, r7
   18468:	bl	1a148 <__assert_fail@plt+0x8b44>
   1846c:	mov	r0, r6
   18470:	add	sp, sp, #4032	; 0xfc0
   18474:	add	sp, sp, #4
   18478:	ldrd	r4, [sp]
   1847c:	ldrd	r6, [sp, #8]
   18480:	ldrd	r8, [sp, #16]
   18484:	ldrd	sl, [sp, #24]
   18488:	add	sp, sp, #32
   1848c:	pop	{pc}		; (ldr pc, [sp], #4)
   18490:	mov	r1, r8
   18494:	mov	r0, r5
   18498:	bl	18b54 <__assert_fail@plt+0x7550>
   1849c:	mov	r6, r0
   184a0:	b	1846c <__assert_fail@plt+0x6e68>
   184a4:	sub	r3, sl, #1
   184a8:	cmp	sl, #13
   184ac:	cmpne	r3, #1
   184b0:	bls	18408 <__assert_fail@plt+0x6e04>
   184b4:	cmp	sl, #38	; 0x26
   184b8:	cmpne	sl, #95	; 0x5f
   184bc:	strne	sl, [fp]
   184c0:	beq	18408 <__assert_fail@plt+0x6e04>
   184c4:	b	1846c <__assert_fail@plt+0x6e68>
   184c8:	bl	11484 <__errno_location@plt>
   184cc:	mov	r4, r0
   184d0:	mov	r0, r7
   184d4:	ldr	r5, [r4]
   184d8:	bl	1a12c <__assert_fail@plt+0x8b28>
   184dc:	cmp	r0, #0
   184e0:	bne	18534 <__assert_fail@plt+0x6f30>
   184e4:	mov	r0, r7
   184e8:	bl	1a148 <__assert_fail@plt+0x8b44>
   184ec:	cmp	r5, #0
   184f0:	strne	r5, [r4]
   184f4:	b	1846c <__assert_fail@plt+0x6e68>
   184f8:	bl	11484 <__errno_location@plt>
   184fc:	mov	r4, r0
   18500:	mov	r0, r7
   18504:	ldr	r5, [r4]
   18508:	mvn	r6, #0
   1850c:	bl	1a148 <__assert_fail@plt+0x8b44>
   18510:	str	r5, [r4]
   18514:	b	1846c <__assert_fail@plt+0x6e68>
   18518:	mov	r0, r7
   1851c:	mvn	r6, #0
   18520:	bl	1a148 <__assert_fail@plt+0x8b44>
   18524:	bl	11484 <__errno_location@plt>
   18528:	mov	r3, #9
   1852c:	str	r3, [r0]
   18530:	b	1846c <__assert_fail@plt+0x6e68>
   18534:	bl	11484 <__errno_location@plt>
   18538:	ldr	r0, [r0]
   1853c:	bl	1a040 <__assert_fail@plt+0x8a3c>
   18540:	bl	11484 <__errno_location@plt>
   18544:	ldr	r0, [r0]
   18548:	bl	1a000 <__assert_fail@plt+0x89fc>
   1854c:	cmn	r0, #100	; 0x64
   18550:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18554:	mov	r5, r1
   18558:	strd	r6, [sp, #8]
   1855c:	strd	r8, [sp, #16]
   18560:	mov	r8, r2
   18564:	strd	sl, [sp, #24]
   18568:	str	lr, [sp, #32]
   1856c:	sub	sp, sp, #4032	; 0xfc0
   18570:	sub	sp, sp, #4
   18574:	beq	18664 <__assert_fail@plt+0x7060>
   18578:	ldrb	r3, [r1]
   1857c:	cmp	r3, #47	; 0x2f
   18580:	beq	18664 <__assert_fail@plt+0x7060>
   18584:	mov	r4, r0
   18588:	mov	r7, sp
   1858c:	mov	r2, r1
   18590:	mov	r0, r7
   18594:	mov	r1, r4
   18598:	bl	19804 <__assert_fail@plt+0x8200>
   1859c:	subs	r9, r0, #0
   185a0:	beq	185dc <__assert_fail@plt+0x6fd8>
   185a4:	mov	r1, r8
   185a8:	bl	18b78 <__assert_fail@plt+0x7574>
   185ac:	mov	r6, r0
   185b0:	bl	11484 <__errno_location@plt>
   185b4:	cmp	r9, r7
   185b8:	mov	fp, r0
   185bc:	ldr	sl, [r0]
   185c0:	beq	185cc <__assert_fail@plt+0x6fc8>
   185c4:	mov	r0, r9
   185c8:	bl	19e14 <__assert_fail@plt+0x8810>
   185cc:	cmn	r6, #1
   185d0:	bne	18640 <__assert_fail@plt+0x703c>
   185d4:	cmp	sl, #20
   185d8:	bne	18678 <__assert_fail@plt+0x7074>
   185dc:	mov	r0, r7
   185e0:	bl	1a0b8 <__assert_fail@plt+0x8ab4>
   185e4:	cmp	r0, #0
   185e8:	bne	18714 <__assert_fail@plt+0x7110>
   185ec:	cmp	r4, #0
   185f0:	blt	18600 <__assert_fail@plt+0x6ffc>
   185f4:	ldr	r3, [sp]
   185f8:	cmp	r3, r4
   185fc:	beq	186ec <__assert_fail@plt+0x70e8>
   18600:	mov	r0, r4
   18604:	bl	11568 <fchdir@plt>
   18608:	cmp	r0, #0
   1860c:	bne	186cc <__assert_fail@plt+0x70c8>
   18610:	mov	r1, r8
   18614:	mov	r0, r5
   18618:	bl	18b78 <__assert_fail@plt+0x7574>
   1861c:	cmn	r0, #1
   18620:	mov	r6, r0
   18624:	beq	1869c <__assert_fail@plt+0x7098>
   18628:	mov	r0, r7
   1862c:	bl	1a12c <__assert_fail@plt+0x8b28>
   18630:	cmp	r0, #0
   18634:	bne	18708 <__assert_fail@plt+0x7104>
   18638:	mov	r0, r7
   1863c:	bl	1a148 <__assert_fail@plt+0x8b44>
   18640:	mov	r0, r6
   18644:	add	sp, sp, #4032	; 0xfc0
   18648:	add	sp, sp, #4
   1864c:	ldrd	r4, [sp]
   18650:	ldrd	r6, [sp, #8]
   18654:	ldrd	r8, [sp, #16]
   18658:	ldrd	sl, [sp, #24]
   1865c:	add	sp, sp, #32
   18660:	pop	{pc}		; (ldr pc, [sp], #4)
   18664:	mov	r1, r8
   18668:	mov	r0, r5
   1866c:	bl	18b78 <__assert_fail@plt+0x7574>
   18670:	mov	r6, r0
   18674:	b	18640 <__assert_fail@plt+0x703c>
   18678:	sub	r3, sl, #1
   1867c:	cmp	sl, #13
   18680:	cmpne	r3, #1
   18684:	bls	185dc <__assert_fail@plt+0x6fd8>
   18688:	cmp	sl, #38	; 0x26
   1868c:	cmpne	sl, #95	; 0x5f
   18690:	strne	sl, [fp]
   18694:	beq	185dc <__assert_fail@plt+0x6fd8>
   18698:	b	18640 <__assert_fail@plt+0x703c>
   1869c:	bl	11484 <__errno_location@plt>
   186a0:	mov	r4, r0
   186a4:	mov	r0, r7
   186a8:	ldr	r5, [r4]
   186ac:	bl	1a12c <__assert_fail@plt+0x8b28>
   186b0:	cmp	r0, #0
   186b4:	bne	18708 <__assert_fail@plt+0x7104>
   186b8:	mov	r0, r7
   186bc:	bl	1a148 <__assert_fail@plt+0x8b44>
   186c0:	cmp	r5, #0
   186c4:	strne	r5, [r4]
   186c8:	b	18640 <__assert_fail@plt+0x703c>
   186cc:	bl	11484 <__errno_location@plt>
   186d0:	mov	r4, r0
   186d4:	mov	r0, r7
   186d8:	ldr	r5, [r4]
   186dc:	mvn	r6, #0
   186e0:	bl	1a148 <__assert_fail@plt+0x8b44>
   186e4:	str	r5, [r4]
   186e8:	b	18640 <__assert_fail@plt+0x703c>
   186ec:	mov	r0, r7
   186f0:	mvn	r6, #0
   186f4:	bl	1a148 <__assert_fail@plt+0x8b44>
   186f8:	bl	11484 <__errno_location@plt>
   186fc:	mov	r3, #9
   18700:	str	r3, [r0]
   18704:	b	18640 <__assert_fail@plt+0x703c>
   18708:	bl	11484 <__errno_location@plt>
   1870c:	ldr	r0, [r0]
   18710:	bl	1a040 <__assert_fail@plt+0x8a3c>
   18714:	bl	11484 <__errno_location@plt>
   18718:	ldr	r0, [r0]
   1871c:	bl	1a000 <__assert_fail@plt+0x89fc>
   18720:	cmn	r0, #100	; 0x64
   18724:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18728:	mov	r5, r1
   1872c:	strd	r6, [sp, #8]
   18730:	strd	r8, [sp, #16]
   18734:	mov	r8, r2
   18738:	strd	sl, [sp, #24]
   1873c:	str	lr, [sp, #32]
   18740:	sub	sp, sp, #4032	; 0xfc0
   18744:	sub	sp, sp, #4
   18748:	beq	18838 <__assert_fail@plt+0x7234>
   1874c:	ldrb	r3, [r1]
   18750:	cmp	r3, #47	; 0x2f
   18754:	beq	18838 <__assert_fail@plt+0x7234>
   18758:	mov	r4, r0
   1875c:	mov	r7, sp
   18760:	mov	r2, r1
   18764:	mov	r0, r7
   18768:	mov	r1, r4
   1876c:	bl	19804 <__assert_fail@plt+0x8200>
   18770:	subs	r9, r0, #0
   18774:	beq	187b0 <__assert_fail@plt+0x71ac>
   18778:	mov	r1, r8
   1877c:	bl	114e4 <setfilecon@plt>
   18780:	mov	r6, r0
   18784:	bl	11484 <__errno_location@plt>
   18788:	cmp	r9, r7
   1878c:	mov	fp, r0
   18790:	ldr	sl, [r0]
   18794:	beq	187a0 <__assert_fail@plt+0x719c>
   18798:	mov	r0, r9
   1879c:	bl	19e14 <__assert_fail@plt+0x8810>
   187a0:	cmn	r6, #1
   187a4:	bne	18814 <__assert_fail@plt+0x7210>
   187a8:	cmp	sl, #20
   187ac:	bne	1884c <__assert_fail@plt+0x7248>
   187b0:	mov	r0, r7
   187b4:	bl	1a0b8 <__assert_fail@plt+0x8ab4>
   187b8:	cmp	r0, #0
   187bc:	bne	188e8 <__assert_fail@plt+0x72e4>
   187c0:	cmp	r4, #0
   187c4:	blt	187d4 <__assert_fail@plt+0x71d0>
   187c8:	ldr	r3, [sp]
   187cc:	cmp	r3, r4
   187d0:	beq	188c0 <__assert_fail@plt+0x72bc>
   187d4:	mov	r0, r4
   187d8:	bl	11568 <fchdir@plt>
   187dc:	cmp	r0, #0
   187e0:	bne	188a0 <__assert_fail@plt+0x729c>
   187e4:	mov	r1, r8
   187e8:	mov	r0, r5
   187ec:	bl	114e4 <setfilecon@plt>
   187f0:	cmn	r0, #1
   187f4:	mov	r6, r0
   187f8:	beq	18870 <__assert_fail@plt+0x726c>
   187fc:	mov	r0, r7
   18800:	bl	1a12c <__assert_fail@plt+0x8b28>
   18804:	cmp	r0, #0
   18808:	bne	188dc <__assert_fail@plt+0x72d8>
   1880c:	mov	r0, r7
   18810:	bl	1a148 <__assert_fail@plt+0x8b44>
   18814:	mov	r0, r6
   18818:	add	sp, sp, #4032	; 0xfc0
   1881c:	add	sp, sp, #4
   18820:	ldrd	r4, [sp]
   18824:	ldrd	r6, [sp, #8]
   18828:	ldrd	r8, [sp, #16]
   1882c:	ldrd	sl, [sp, #24]
   18830:	add	sp, sp, #32
   18834:	pop	{pc}		; (ldr pc, [sp], #4)
   18838:	mov	r1, r8
   1883c:	mov	r0, r5
   18840:	bl	114e4 <setfilecon@plt>
   18844:	mov	r6, r0
   18848:	b	18814 <__assert_fail@plt+0x7210>
   1884c:	sub	r3, sl, #1
   18850:	cmp	sl, #13
   18854:	cmpne	r3, #1
   18858:	bls	187b0 <__assert_fail@plt+0x71ac>
   1885c:	cmp	sl, #38	; 0x26
   18860:	cmpne	sl, #95	; 0x5f
   18864:	strne	sl, [fp]
   18868:	beq	187b0 <__assert_fail@plt+0x71ac>
   1886c:	b	18814 <__assert_fail@plt+0x7210>
   18870:	bl	11484 <__errno_location@plt>
   18874:	mov	r4, r0
   18878:	mov	r0, r7
   1887c:	ldr	r5, [r4]
   18880:	bl	1a12c <__assert_fail@plt+0x8b28>
   18884:	cmp	r0, #0
   18888:	bne	188dc <__assert_fail@plt+0x72d8>
   1888c:	mov	r0, r7
   18890:	bl	1a148 <__assert_fail@plt+0x8b44>
   18894:	cmp	r5, #0
   18898:	strne	r5, [r4]
   1889c:	b	18814 <__assert_fail@plt+0x7210>
   188a0:	bl	11484 <__errno_location@plt>
   188a4:	mov	r4, r0
   188a8:	mov	r0, r7
   188ac:	ldr	r5, [r4]
   188b0:	mvn	r6, #0
   188b4:	bl	1a148 <__assert_fail@plt+0x8b44>
   188b8:	str	r5, [r4]
   188bc:	b	18814 <__assert_fail@plt+0x7210>
   188c0:	mov	r0, r7
   188c4:	mvn	r6, #0
   188c8:	bl	1a148 <__assert_fail@plt+0x8b44>
   188cc:	bl	11484 <__errno_location@plt>
   188d0:	mov	r3, #9
   188d4:	str	r3, [r0]
   188d8:	b	18814 <__assert_fail@plt+0x7210>
   188dc:	bl	11484 <__errno_location@plt>
   188e0:	ldr	r0, [r0]
   188e4:	bl	1a040 <__assert_fail@plt+0x8a3c>
   188e8:	bl	11484 <__errno_location@plt>
   188ec:	ldr	r0, [r0]
   188f0:	bl	1a000 <__assert_fail@plt+0x89fc>
   188f4:	cmn	r0, #100	; 0x64
   188f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   188fc:	mov	r5, r1
   18900:	strd	r6, [sp, #8]
   18904:	strd	r8, [sp, #16]
   18908:	mov	r8, r2
   1890c:	strd	sl, [sp, #24]
   18910:	str	lr, [sp, #32]
   18914:	sub	sp, sp, #4032	; 0xfc0
   18918:	sub	sp, sp, #4
   1891c:	beq	18a0c <__assert_fail@plt+0x7408>
   18920:	ldrb	r3, [r1]
   18924:	cmp	r3, #47	; 0x2f
   18928:	beq	18a0c <__assert_fail@plt+0x7408>
   1892c:	mov	r4, r0
   18930:	mov	r7, sp
   18934:	mov	r2, r1
   18938:	mov	r0, r7
   1893c:	mov	r1, r4
   18940:	bl	19804 <__assert_fail@plt+0x8200>
   18944:	subs	r9, r0, #0
   18948:	beq	18984 <__assert_fail@plt+0x7380>
   1894c:	mov	r1, r8
   18950:	bl	11280 <lsetfilecon@plt>
   18954:	mov	r6, r0
   18958:	bl	11484 <__errno_location@plt>
   1895c:	cmp	r9, r7
   18960:	mov	fp, r0
   18964:	ldr	sl, [r0]
   18968:	beq	18974 <__assert_fail@plt+0x7370>
   1896c:	mov	r0, r9
   18970:	bl	19e14 <__assert_fail@plt+0x8810>
   18974:	cmn	r6, #1
   18978:	bne	189e8 <__assert_fail@plt+0x73e4>
   1897c:	cmp	sl, #20
   18980:	bne	18a20 <__assert_fail@plt+0x741c>
   18984:	mov	r0, r7
   18988:	bl	1a0b8 <__assert_fail@plt+0x8ab4>
   1898c:	cmp	r0, #0
   18990:	bne	18abc <__assert_fail@plt+0x74b8>
   18994:	cmp	r4, #0
   18998:	blt	189a8 <__assert_fail@plt+0x73a4>
   1899c:	ldr	r3, [sp]
   189a0:	cmp	r3, r4
   189a4:	beq	18a94 <__assert_fail@plt+0x7490>
   189a8:	mov	r0, r4
   189ac:	bl	11568 <fchdir@plt>
   189b0:	cmp	r0, #0
   189b4:	bne	18a74 <__assert_fail@plt+0x7470>
   189b8:	mov	r1, r8
   189bc:	mov	r0, r5
   189c0:	bl	11280 <lsetfilecon@plt>
   189c4:	cmn	r0, #1
   189c8:	mov	r6, r0
   189cc:	beq	18a44 <__assert_fail@plt+0x7440>
   189d0:	mov	r0, r7
   189d4:	bl	1a12c <__assert_fail@plt+0x8b28>
   189d8:	cmp	r0, #0
   189dc:	bne	18ab0 <__assert_fail@plt+0x74ac>
   189e0:	mov	r0, r7
   189e4:	bl	1a148 <__assert_fail@plt+0x8b44>
   189e8:	mov	r0, r6
   189ec:	add	sp, sp, #4032	; 0xfc0
   189f0:	add	sp, sp, #4
   189f4:	ldrd	r4, [sp]
   189f8:	ldrd	r6, [sp, #8]
   189fc:	ldrd	r8, [sp, #16]
   18a00:	ldrd	sl, [sp, #24]
   18a04:	add	sp, sp, #32
   18a08:	pop	{pc}		; (ldr pc, [sp], #4)
   18a0c:	mov	r1, r8
   18a10:	mov	r0, r5
   18a14:	bl	11280 <lsetfilecon@plt>
   18a18:	mov	r6, r0
   18a1c:	b	189e8 <__assert_fail@plt+0x73e4>
   18a20:	sub	r3, sl, #1
   18a24:	cmp	sl, #13
   18a28:	cmpne	r3, #1
   18a2c:	bls	18984 <__assert_fail@plt+0x7380>
   18a30:	cmp	sl, #38	; 0x26
   18a34:	cmpne	sl, #95	; 0x5f
   18a38:	strne	sl, [fp]
   18a3c:	beq	18984 <__assert_fail@plt+0x7380>
   18a40:	b	189e8 <__assert_fail@plt+0x73e4>
   18a44:	bl	11484 <__errno_location@plt>
   18a48:	mov	r4, r0
   18a4c:	mov	r0, r7
   18a50:	ldr	r5, [r4]
   18a54:	bl	1a12c <__assert_fail@plt+0x8b28>
   18a58:	cmp	r0, #0
   18a5c:	bne	18ab0 <__assert_fail@plt+0x74ac>
   18a60:	mov	r0, r7
   18a64:	bl	1a148 <__assert_fail@plt+0x8b44>
   18a68:	cmp	r5, #0
   18a6c:	strne	r5, [r4]
   18a70:	b	189e8 <__assert_fail@plt+0x73e4>
   18a74:	bl	11484 <__errno_location@plt>
   18a78:	mov	r4, r0
   18a7c:	mov	r0, r7
   18a80:	ldr	r5, [r4]
   18a84:	mvn	r6, #0
   18a88:	bl	1a148 <__assert_fail@plt+0x8b44>
   18a8c:	str	r5, [r4]
   18a90:	b	189e8 <__assert_fail@plt+0x73e4>
   18a94:	mov	r0, r7
   18a98:	mvn	r6, #0
   18a9c:	bl	1a148 <__assert_fail@plt+0x8b44>
   18aa0:	bl	11484 <__errno_location@plt>
   18aa4:	mov	r3, #9
   18aa8:	str	r3, [r0]
   18aac:	b	189e8 <__assert_fail@plt+0x73e4>
   18ab0:	bl	11484 <__errno_location@plt>
   18ab4:	ldr	r0, [r0]
   18ab8:	bl	1a040 <__assert_fail@plt+0x8a3c>
   18abc:	bl	11484 <__errno_location@plt>
   18ac0:	ldr	r0, [r0]
   18ac4:	bl	1a000 <__assert_fail@plt+0x89fc>
   18ac8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18acc:	subs	r4, r0, #0
   18ad0:	strd	r6, [sp, #8]
   18ad4:	str	r8, [sp, #16]
   18ad8:	str	lr, [sp, #20]
   18adc:	beq	18b40 <__assert_fail@plt+0x753c>
   18ae0:	cmp	r4, #10
   18ae4:	beq	18b00 <__assert_fail@plt+0x74fc>
   18ae8:	mov	r0, r4
   18aec:	ldrd	r4, [sp]
   18af0:	ldrd	r6, [sp, #8]
   18af4:	ldr	r8, [sp, #16]
   18af8:	add	sp, sp, #20
   18afc:	pop	{pc}		; (ldr pc, [sp], #4)
   18b00:	mov	r5, r1
   18b04:	movw	r1, #47096	; 0xb7f8
   18b08:	movt	r1, #1
   18b0c:	ldr	r6, [r5]
   18b10:	mov	r0, r6
   18b14:	bl	11268 <strcmp@plt>
   18b18:	subs	r7, r0, #0
   18b1c:	bne	18ae8 <__assert_fail@plt+0x74e4>
   18b20:	mov	r0, r6
   18b24:	mvn	r4, #0
   18b28:	bl	11580 <freecon@plt>
   18b2c:	str	r7, [r5]
   18b30:	bl	11484 <__errno_location@plt>
   18b34:	mov	r3, #61	; 0x3d
   18b38:	str	r3, [r0]
   18b3c:	b	18ae8 <__assert_fail@plt+0x74e4>
   18b40:	bl	11484 <__errno_location@plt>
   18b44:	mov	r3, #95	; 0x5f
   18b48:	mvn	r4, #0
   18b4c:	str	r3, [r0]
   18b50:	b	18ae8 <__assert_fail@plt+0x74e4>
   18b54:	str	r4, [sp, #-8]!
   18b58:	mov	r4, r1
   18b5c:	str	lr, [sp, #4]
   18b60:	bl	11454 <getfilecon@plt>
   18b64:	mov	r1, r4
   18b68:	ldr	r4, [sp]
   18b6c:	ldr	lr, [sp, #4]
   18b70:	add	sp, sp, #8
   18b74:	b	18ac8 <__assert_fail@plt+0x74c4>
   18b78:	str	r4, [sp, #-8]!
   18b7c:	mov	r4, r1
   18b80:	str	lr, [sp, #4]
   18b84:	bl	113d0 <lgetfilecon@plt>
   18b88:	mov	r1, r4
   18b8c:	ldr	r4, [sp]
   18b90:	ldr	lr, [sp, #4]
   18b94:	add	sp, sp, #8
   18b98:	b	18ac8 <__assert_fail@plt+0x74c4>
   18b9c:	str	r4, [sp, #-8]!
   18ba0:	mov	r4, r1
   18ba4:	str	lr, [sp, #4]
   18ba8:	bl	1131c <fgetfilecon@plt>
   18bac:	mov	r1, r4
   18bb0:	ldr	r4, [sp]
   18bb4:	ldr	lr, [sp, #4]
   18bb8:	add	sp, sp, #8
   18bbc:	b	18ac8 <__assert_fail@plt+0x74c4>
   18bc0:	cmp	r0, #2
   18bc4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18bc8:	mov	r4, r0
   18bcc:	strd	r6, [sp, #8]
   18bd0:	str	r8, [sp, #16]
   18bd4:	str	lr, [sp, #20]
   18bd8:	bls	18bf4 <__assert_fail@plt+0x75f0>
   18bdc:	mov	r0, r4
   18be0:	ldrd	r4, [sp]
   18be4:	ldrd	r6, [sp, #8]
   18be8:	ldr	r8, [sp, #16]
   18bec:	add	sp, sp, #20
   18bf0:	pop	{pc}		; (ldr pc, [sp], #4)
   18bf4:	bl	1a178 <__assert_fail@plt+0x8b74>
   18bf8:	mov	r7, r0
   18bfc:	bl	11484 <__errno_location@plt>
   18c00:	mov	r5, r0
   18c04:	mov	r0, r4
   18c08:	ldr	r6, [r5]
   18c0c:	mov	r4, r7
   18c10:	bl	115d4 <close@plt>
   18c14:	str	r6, [r5]
   18c18:	b	18bdc <__assert_fail@plt+0x75d8>
   18c1c:	cmp	r1, #0
   18c20:	strd	r4, [sp, #-16]!
   18c24:	mov	ip, r3
   18c28:	str	r6, [sp, #8]
   18c2c:	mov	r4, r0
   18c30:	str	lr, [sp, #12]
   18c34:	sub	sp, sp, #32
   18c38:	ldr	r5, [sp, #48]	; 0x30
   18c3c:	ldr	r6, [sp, #52]	; 0x34
   18c40:	beq	18d84 <__assert_fail@plt+0x7780>
   18c44:	mov	r3, r1
   18c48:	mov	r1, #1
   18c4c:	stm	sp, {r2, ip}
   18c50:	movw	r2, #47108	; 0xb804
   18c54:	movt	r2, #1
   18c58:	bl	114cc <__fprintf_chk@plt>
   18c5c:	mov	r2, #5
   18c60:	movw	r1, #47128	; 0xb818
   18c64:	movt	r1, #1
   18c68:	mov	r0, #0
   18c6c:	bl	112f8 <dcgettext@plt>
   18c70:	movw	ip, #2022	; 0x7e6
   18c74:	mov	r3, r0
   18c78:	mov	r1, #1
   18c7c:	movw	r2, #47856	; 0xbaf0
   18c80:	movt	r2, #1
   18c84:	mov	r0, r4
   18c88:	str	ip, [sp]
   18c8c:	bl	114cc <__fprintf_chk@plt>
   18c90:	mov	r1, r4
   18c94:	mov	r0, #10
   18c98:	bl	112e0 <fputc_unlocked@plt>
   18c9c:	mov	r2, #5
   18ca0:	movw	r1, #47132	; 0xb81c
   18ca4:	movt	r1, #1
   18ca8:	mov	r0, #0
   18cac:	bl	112f8 <dcgettext@plt>
   18cb0:	mov	r2, r0
   18cb4:	mov	r1, #1
   18cb8:	movw	r3, #47304	; 0xb8c8
   18cbc:	movt	r3, #1
   18cc0:	mov	r0, r4
   18cc4:	bl	114cc <__fprintf_chk@plt>
   18cc8:	mov	r1, r4
   18ccc:	mov	r0, #10
   18cd0:	bl	112e0 <fputc_unlocked@plt>
   18cd4:	cmp	r6, #9
   18cd8:	ldrls	pc, [pc, r6, lsl #2]
   18cdc:	b	18ff0 <__assert_fail@plt+0x79ec>
   18ce0:	andeq	r8, r1, r0, ror sp
   18ce4:	andeq	r8, r1, r0, lsr #27
   18ce8:	ldrdeq	r8, [r1], -ip
   18cec:	andeq	r8, r1, ip, lsl lr
   18cf0:	andeq	r8, r1, r4, ror #28
   18cf4:	muleq	r1, ip, lr
   18cf8:	andeq	r8, r1, r4, ror #29
   18cfc:	andeq	r8, r1, r8, lsr pc
   18d00:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   18d04:	andeq	r8, r1, r8, lsl #26
   18d08:	movw	r1, #47608	; 0xb9f8
   18d0c:	movt	r1, #1
   18d10:	mov	r2, #5
   18d14:	mov	r0, #0
   18d18:	bl	112f8 <dcgettext@plt>
   18d1c:	ldr	lr, [r5, #4]
   18d20:	mov	r2, r0
   18d24:	mov	r1, #1
   18d28:	mov	r0, r4
   18d2c:	ldr	r3, [r5, #8]
   18d30:	ldr	ip, [r5, #32]
   18d34:	str	lr, [sp]
   18d38:	ldr	lr, [r5, #12]
   18d3c:	str	ip, [sp, #28]
   18d40:	ldr	ip, [r5, #28]
   18d44:	str	r3, [sp, #4]
   18d48:	ldr	r3, [r5, #16]
   18d4c:	str	lr, [sp, #8]
   18d50:	ldr	lr, [r5, #20]
   18d54:	str	ip, [sp, #24]
   18d58:	ldr	ip, [r5, #24]
   18d5c:	str	r3, [sp, #12]
   18d60:	ldr	r3, [r5]
   18d64:	str	lr, [sp, #16]
   18d68:	str	ip, [sp, #20]
   18d6c:	bl	114cc <__fprintf_chk@plt>
   18d70:	add	sp, sp, #32
   18d74:	ldrd	r4, [sp]
   18d78:	ldr	r6, [sp, #8]
   18d7c:	add	sp, sp, #12
   18d80:	pop	{pc}		; (ldr pc, [sp], #4)
   18d84:	mov	r3, r2
   18d88:	mov	r1, #1
   18d8c:	str	ip, [sp]
   18d90:	movw	r2, #47120	; 0xb810
   18d94:	movt	r2, #1
   18d98:	bl	114cc <__fprintf_chk@plt>
   18d9c:	b	18c5c <__assert_fail@plt+0x7658>
   18da0:	mov	r2, #5
   18da4:	movw	r1, #47340	; 0xb8ec
   18da8:	movt	r1, #1
   18dac:	mov	r0, #0
   18db0:	bl	112f8 <dcgettext@plt>
   18db4:	ldr	r3, [r5]
   18db8:	mov	r2, r0
   18dbc:	mov	r1, #1
   18dc0:	mov	r0, r4
   18dc4:	add	sp, sp, #32
   18dc8:	ldrd	r4, [sp]
   18dcc:	ldr	r6, [sp, #8]
   18dd0:	ldr	lr, [sp, #12]
   18dd4:	add	sp, sp, #16
   18dd8:	b	114cc <__fprintf_chk@plt>
   18ddc:	mov	r2, #5
   18de0:	movw	r1, #47356	; 0xb8fc
   18de4:	movt	r1, #1
   18de8:	mov	r0, #0
   18dec:	bl	112f8 <dcgettext@plt>
   18df0:	ldm	r5, {r3, ip}
   18df4:	mov	r2, r0
   18df8:	mov	r1, #1
   18dfc:	mov	r0, r4
   18e00:	str	ip, [sp, #48]	; 0x30
   18e04:	add	sp, sp, #32
   18e08:	ldrd	r4, [sp]
   18e0c:	ldr	r6, [sp, #8]
   18e10:	ldr	lr, [sp, #12]
   18e14:	add	sp, sp, #16
   18e18:	b	114cc <__fprintf_chk@plt>
   18e1c:	mov	r2, #5
   18e20:	movw	r1, #47380	; 0xb914
   18e24:	movt	r1, #1
   18e28:	mov	r0, #0
   18e2c:	bl	112f8 <dcgettext@plt>
   18e30:	ldm	r5, {r3, lr}
   18e34:	mov	r2, r0
   18e38:	mov	r1, #1
   18e3c:	mov	r0, r4
   18e40:	ldr	ip, [r5, #8]
   18e44:	str	lr, [sp, #48]	; 0x30
   18e48:	str	ip, [sp, #52]	; 0x34
   18e4c:	add	sp, sp, #32
   18e50:	ldrd	r4, [sp]
   18e54:	ldr	r6, [sp, #8]
   18e58:	ldr	lr, [sp, #12]
   18e5c:	add	sp, sp, #16
   18e60:	b	114cc <__fprintf_chk@plt>
   18e64:	mov	r2, #5
   18e68:	movw	r1, #47408	; 0xb930
   18e6c:	movt	r1, #1
   18e70:	mov	r0, #0
   18e74:	bl	112f8 <dcgettext@plt>
   18e78:	ldmib	r5, {r3, ip, lr}
   18e7c:	mov	r2, r0
   18e80:	mov	r1, #1
   18e84:	mov	r0, r4
   18e88:	str	r3, [sp]
   18e8c:	ldr	r3, [r5]
   18e90:	stmib	sp, {ip, lr}
   18e94:	bl	114cc <__fprintf_chk@plt>
   18e98:	b	18d70 <__assert_fail@plt+0x776c>
   18e9c:	mov	r2, #5
   18ea0:	movw	r1, #47440	; 0xb950
   18ea4:	movt	r1, #1
   18ea8:	mov	r0, #0
   18eac:	bl	112f8 <dcgettext@plt>
   18eb0:	ldmib	r5, {ip, lr}
   18eb4:	mov	r2, r0
   18eb8:	mov	r1, #1
   18ebc:	mov	r0, r4
   18ec0:	ldr	r3, [r5, #16]
   18ec4:	str	ip, [sp]
   18ec8:	ldr	ip, [r5, #12]
   18ecc:	str	r3, [sp, #12]
   18ed0:	ldr	r3, [r5]
   18ed4:	str	lr, [sp, #4]
   18ed8:	str	ip, [sp, #8]
   18edc:	bl	114cc <__fprintf_chk@plt>
   18ee0:	b	18d70 <__assert_fail@plt+0x776c>
   18ee4:	mov	r2, #5
   18ee8:	movw	r1, #47476	; 0xb974
   18eec:	movt	r1, #1
   18ef0:	mov	r0, #0
   18ef4:	bl	112f8 <dcgettext@plt>
   18ef8:	ldr	lr, [r5, #4]
   18efc:	mov	r2, r0
   18f00:	mov	r1, #1
   18f04:	mov	r0, r4
   18f08:	ldr	r3, [r5, #8]
   18f0c:	ldr	ip, [r5, #20]
   18f10:	str	lr, [sp]
   18f14:	ldr	lr, [r5, #12]
   18f18:	str	ip, [sp, #16]
   18f1c:	ldr	ip, [r5, #16]
   18f20:	str	r3, [sp, #4]
   18f24:	ldr	r3, [r5]
   18f28:	str	lr, [sp, #8]
   18f2c:	str	ip, [sp, #12]
   18f30:	bl	114cc <__fprintf_chk@plt>
   18f34:	b	18d70 <__assert_fail@plt+0x776c>
   18f38:	mov	r2, #5
   18f3c:	movw	r1, #47516	; 0xb99c
   18f40:	movt	r1, #1
   18f44:	mov	r0, #0
   18f48:	bl	112f8 <dcgettext@plt>
   18f4c:	ldmib	r5, {r3, ip}
   18f50:	mov	r2, r0
   18f54:	mov	r1, #1
   18f58:	mov	r0, r4
   18f5c:	ldr	lr, [r5, #24]
   18f60:	str	r3, [sp]
   18f64:	ldr	r3, [r5, #12]
   18f68:	str	lr, [sp, #20]
   18f6c:	ldr	lr, [r5, #20]
   18f70:	str	ip, [sp, #4]
   18f74:	ldr	ip, [r5, #16]
   18f78:	str	r3, [sp, #8]
   18f7c:	ldr	r3, [r5]
   18f80:	str	ip, [sp, #12]
   18f84:	str	lr, [sp, #16]
   18f88:	bl	114cc <__fprintf_chk@plt>
   18f8c:	b	18d70 <__assert_fail@plt+0x776c>
   18f90:	mov	r2, #5
   18f94:	movw	r1, #47560	; 0xb9c8
   18f98:	movt	r1, #1
   18f9c:	mov	r0, #0
   18fa0:	bl	112f8 <dcgettext@plt>
   18fa4:	ldmib	r5, {ip, lr}
   18fa8:	mov	r2, r0
   18fac:	mov	r1, #1
   18fb0:	mov	r0, r4
   18fb4:	ldr	r3, [r5, #28]
   18fb8:	str	ip, [sp]
   18fbc:	ldr	ip, [r5, #12]
   18fc0:	str	r3, [sp, #24]
   18fc4:	ldr	r3, [r5, #24]
   18fc8:	str	lr, [sp, #4]
   18fcc:	ldr	lr, [r5, #16]
   18fd0:	str	ip, [sp, #8]
   18fd4:	ldr	ip, [r5, #20]
   18fd8:	str	r3, [sp, #20]
   18fdc:	ldr	r3, [r5]
   18fe0:	str	lr, [sp, #12]
   18fe4:	str	ip, [sp, #16]
   18fe8:	bl	114cc <__fprintf_chk@plt>
   18fec:	b	18d70 <__assert_fail@plt+0x776c>
   18ff0:	movw	r1, #47660	; 0xba2c
   18ff4:	movt	r1, #1
   18ff8:	b	18d10 <__assert_fail@plt+0x770c>
   18ffc:	strd	r4, [sp, #-12]!
   19000:	str	lr, [sp, #8]
   19004:	sub	sp, sp, #12
   19008:	ldr	r5, [sp, #24]
   1900c:	ldr	ip, [r5]
   19010:	cmp	ip, #0
   19014:	beq	19030 <__assert_fail@plt+0x7a2c>
   19018:	mov	lr, r5
   1901c:	mov	ip, #0
   19020:	ldr	r4, [lr, #4]!
   19024:	add	ip, ip, #1
   19028:	cmp	r4, #0
   1902c:	bne	19020 <__assert_fail@plt+0x7a1c>
   19030:	stm	sp, {r5, ip}
   19034:	bl	18c1c <__assert_fail@plt+0x7618>
   19038:	add	sp, sp, #12
   1903c:	ldrd	r4, [sp]
   19040:	add	sp, sp, #8
   19044:	pop	{pc}		; (ldr pc, [sp], #4)
   19048:	strd	r4, [sp, #-16]!
   1904c:	mov	ip, #0
   19050:	str	r6, [sp, #8]
   19054:	str	lr, [sp, #12]
   19058:	sub	sp, sp, #48	; 0x30
   1905c:	ldr	r5, [sp, #64]	; 0x40
   19060:	add	r6, sp, #8
   19064:	mov	r4, r6
   19068:	ldr	lr, [r5], #4
   1906c:	cmp	lr, #0
   19070:	str	lr, [r4], #4
   19074:	beq	19084 <__assert_fail@plt+0x7a80>
   19078:	add	ip, ip, #1
   1907c:	cmp	ip, #10
   19080:	bne	19068 <__assert_fail@plt+0x7a64>
   19084:	stm	sp, {r6, ip}
   19088:	bl	18c1c <__assert_fail@plt+0x7618>
   1908c:	add	sp, sp, #48	; 0x30
   19090:	ldrd	r4, [sp]
   19094:	ldr	r6, [sp, #8]
   19098:	add	sp, sp, #12
   1909c:	pop	{pc}		; (ldr pc, [sp], #4)
   190a0:	push	{r3}		; (str r3, [sp, #-4]!)
   190a4:	mov	ip, #0
   190a8:	strd	r4, [sp, #-12]!
   190ac:	str	lr, [sp, #8]
   190b0:	sub	sp, sp, #56	; 0x38
   190b4:	add	r3, sp, #72	; 0x48
   190b8:	add	r5, sp, #16
   190bc:	mov	r4, r3
   190c0:	mov	lr, r5
   190c4:	str	r3, [sp, #12]
   190c8:	ldr	r3, [r4], #4
   190cc:	cmp	r3, #0
   190d0:	str	r3, [lr], #4
   190d4:	beq	190e4 <__assert_fail@plt+0x7ae0>
   190d8:	add	ip, ip, #1
   190dc:	cmp	ip, #10
   190e0:	bne	190c8 <__assert_fail@plt+0x7ac4>
   190e4:	ldr	r3, [sp, #68]	; 0x44
   190e8:	stm	sp, {r5, ip}
   190ec:	bl	18c1c <__assert_fail@plt+0x7618>
   190f0:	add	sp, sp, #56	; 0x38
   190f4:	ldrd	r4, [sp]
   190f8:	ldr	lr, [sp, #8]
   190fc:	add	sp, sp, #12
   19100:	add	sp, sp, #4
   19104:	bx	lr
   19108:	movw	r3, #49604	; 0xc1c4
   1910c:	movt	r3, #2
   19110:	str	r4, [sp, #-8]!
   19114:	mov	r0, #10
   19118:	ldr	r1, [r3]
   1911c:	str	lr, [sp, #4]
   19120:	bl	112e0 <fputc_unlocked@plt>
   19124:	mov	r2, #5
   19128:	movw	r1, #47720	; 0xba68
   1912c:	movt	r1, #1
   19130:	mov	r0, #0
   19134:	bl	112f8 <dcgettext@plt>
   19138:	mov	r1, r0
   1913c:	movw	r2, #47740	; 0xba7c
   19140:	movt	r2, #1
   19144:	mov	r0, #1
   19148:	bl	114b4 <__printf_chk@plt>
   1914c:	mov	r2, #5
   19150:	movw	r1, #47764	; 0xba94
   19154:	movt	r1, #1
   19158:	mov	r0, #0
   1915c:	bl	112f8 <dcgettext@plt>
   19160:	mov	r1, r0
   19164:	movw	r3, #45160	; 0xb068
   19168:	movt	r3, #1
   1916c:	movw	r2, #45200	; 0xb090
   19170:	movt	r2, #1
   19174:	mov	r0, #1
   19178:	bl	114b4 <__printf_chk@plt>
   1917c:	mov	r2, #5
   19180:	movw	r1, #47784	; 0xbaa8
   19184:	movt	r1, #1
   19188:	mov	r0, #0
   1918c:	bl	112f8 <dcgettext@plt>
   19190:	mov	r1, r0
   19194:	movw	r2, #47824	; 0xbad0
   19198:	movt	r2, #1
   1919c:	mov	r0, #1
   191a0:	ldr	r4, [sp]
   191a4:	ldr	lr, [sp, #4]
   191a8:	add	sp, sp, #8
   191ac:	b	114b4 <__printf_chk@plt>
   191b0:	str	r4, [sp, #-8]!
   191b4:	str	lr, [sp, #4]
   191b8:	bl	19770 <__assert_fail@plt+0x816c>
   191bc:	cmp	r0, #0
   191c0:	beq	191d0 <__assert_fail@plt+0x7bcc>
   191c4:	ldr	r4, [sp]
   191c8:	add	sp, sp, #4
   191cc:	pop	{pc}		; (ldr pc, [sp], #4)
   191d0:	bl	19628 <__assert_fail@plt+0x8024>
   191d4:	str	r4, [sp, #-8]!
   191d8:	str	lr, [sp, #4]
   191dc:	bl	19770 <__assert_fail@plt+0x816c>
   191e0:	cmp	r0, #0
   191e4:	beq	191f4 <__assert_fail@plt+0x7bf0>
   191e8:	ldr	r4, [sp]
   191ec:	add	sp, sp, #4
   191f0:	pop	{pc}		; (ldr pc, [sp], #4)
   191f4:	bl	19628 <__assert_fail@plt+0x8024>
   191f8:	str	r4, [sp, #-8]!
   191fc:	str	lr, [sp, #4]
   19200:	bl	19770 <__assert_fail@plt+0x816c>
   19204:	cmp	r0, #0
   19208:	beq	19218 <__assert_fail@plt+0x7c14>
   1920c:	ldr	r4, [sp]
   19210:	add	sp, sp, #4
   19214:	pop	{pc}		; (ldr pc, [sp], #4)
   19218:	bl	19628 <__assert_fail@plt+0x8024>
   1921c:	strd	r4, [sp, #-16]!
   19220:	mov	r5, r0
   19224:	mov	r4, r1
   19228:	str	r6, [sp, #8]
   1922c:	str	lr, [sp, #12]
   19230:	bl	197ac <__assert_fail@plt+0x81a8>
   19234:	cmp	r0, #0
   19238:	beq	1924c <__assert_fail@plt+0x7c48>
   1923c:	ldrd	r4, [sp]
   19240:	ldr	r6, [sp, #8]
   19244:	add	sp, sp, #12
   19248:	pop	{pc}		; (ldr pc, [sp], #4)
   1924c:	adds	r4, r4, #0
   19250:	movne	r4, #1
   19254:	cmp	r5, #0
   19258:	moveq	r4, #1
   1925c:	cmp	r4, #0
   19260:	beq	1923c <__assert_fail@plt+0x7c38>
   19264:	bl	19628 <__assert_fail@plt+0x8024>
   19268:	cmp	r1, #0
   1926c:	orreq	r1, r1, #1
   19270:	str	r4, [sp, #-8]!
   19274:	str	lr, [sp, #4]
   19278:	bl	197ac <__assert_fail@plt+0x81a8>
   1927c:	cmp	r0, #0
   19280:	beq	19290 <__assert_fail@plt+0x7c8c>
   19284:	ldr	r4, [sp]
   19288:	add	sp, sp, #4
   1928c:	pop	{pc}		; (ldr pc, [sp], #4)
   19290:	bl	19628 <__assert_fail@plt+0x8024>
   19294:	strd	r4, [sp, #-16]!
   19298:	mov	r4, r0
   1929c:	mov	r5, r2
   192a0:	str	r6, [sp, #8]
   192a4:	mov	r6, r1
   192a8:	str	lr, [sp, #12]
   192ac:	bl	1a080 <__assert_fail@plt+0x8a7c>
   192b0:	cmp	r0, #0
   192b4:	beq	192c8 <__assert_fail@plt+0x7cc4>
   192b8:	ldrd	r4, [sp]
   192bc:	ldr	r6, [sp, #8]
   192c0:	add	sp, sp, #12
   192c4:	pop	{pc}		; (ldr pc, [sp], #4)
   192c8:	cmp	r4, #0
   192cc:	beq	192dc <__assert_fail@plt+0x7cd8>
   192d0:	cmp	r6, #0
   192d4:	cmpne	r5, #0
   192d8:	beq	192b8 <__assert_fail@plt+0x7cb4>
   192dc:	bl	19628 <__assert_fail@plt+0x8024>
   192e0:	b	19294 <__assert_fail@plt+0x7c90>
   192e4:	cmp	r2, #0
   192e8:	cmpne	r1, #0
   192ec:	str	r4, [sp, #-8]!
   192f0:	moveq	r2, #1
   192f4:	str	lr, [sp, #4]
   192f8:	moveq	r1, r2
   192fc:	bl	1a080 <__assert_fail@plt+0x8a7c>
   19300:	cmp	r0, #0
   19304:	beq	19314 <__assert_fail@plt+0x7d10>
   19308:	ldr	r4, [sp]
   1930c:	add	sp, sp, #4
   19310:	pop	{pc}		; (ldr pc, [sp], #4)
   19314:	bl	19628 <__assert_fail@plt+0x8024>
   19318:	mov	r2, r1
   1931c:	mov	r1, r0
   19320:	mov	r0, #0
   19324:	b	19294 <__assert_fail@plt+0x7c90>
   19328:	mov	r2, r1
   1932c:	mov	r1, r0
   19330:	mov	r0, #0
   19334:	b	192e4 <__assert_fail@plt+0x7ce0>
   19338:	cmp	r0, #0
   1933c:	strd	r4, [sp, #-16]!
   19340:	mov	r5, r1
   19344:	ldr	r4, [r1]
   19348:	str	r6, [sp, #8]
   1934c:	str	lr, [sp, #12]
   19350:	beq	19380 <__assert_fail@plt+0x7d7c>
   19354:	lsr	r3, r4, #1
   19358:	add	r3, r3, #1
   1935c:	adds	r4, r4, r3
   19360:	bcs	1939c <__assert_fail@plt+0x7d98>
   19364:	mov	r1, r4
   19368:	bl	19294 <__assert_fail@plt+0x7c90>
   1936c:	ldr	r6, [sp, #8]
   19370:	str	r4, [r5]
   19374:	ldrd	r4, [sp]
   19378:	add	sp, sp, #12
   1937c:	pop	{pc}		; (ldr pc, [sp], #4)
   19380:	cmp	r4, #0
   19384:	bne	19364 <__assert_fail@plt+0x7d60>
   19388:	mov	r4, #64	; 0x40
   1938c:	udiv	r4, r4, r2
   19390:	cmp	r2, #64	; 0x40
   19394:	addhi	r4, r4, #1
   19398:	b	19364 <__assert_fail@plt+0x7d60>
   1939c:	bl	19628 <__assert_fail@plt+0x8024>
   193a0:	mov	r2, #1
   193a4:	b	19338 <__assert_fail@plt+0x7d34>
   193a8:	ldr	ip, [r1]
   193ac:	strd	r4, [sp, #-32]!	; 0xffffffe0
   193b0:	mov	r5, r1
   193b4:	strd	r6, [sp, #8]
   193b8:	str	lr, [sp, #28]
   193bc:	strd	r8, [sp, #16]
   193c0:	asr	lr, ip, #1
   193c4:	ldr	r8, [sp, #32]
   193c8:	str	sl, [sp, #24]
   193cc:	adds	r4, ip, lr
   193d0:	mvn	lr, r3
   193d4:	lsr	lr, lr, #31
   193d8:	mvnvs	r4, #-2147483648	; 0x80000000
   193dc:	cmp	r3, r4
   193e0:	movge	r1, #0
   193e4:	andlt	r1, lr, #1
   193e8:	cmp	r1, #0
   193ec:	movne	r4, r3
   193f0:	smull	r6, r7, r4, r8
   193f4:	cmp	r7, r6, asr #31
   193f8:	bne	19480 <__assert_fail@plt+0x7e7c>
   193fc:	cmp	r6, #63	; 0x3f
   19400:	mov	r1, r6
   19404:	ble	19468 <__assert_fail@plt+0x7e64>
   19408:	cmp	r0, #0
   1940c:	sub	r6, r4, ip
   19410:	streq	r0, [r5]
   19414:	cmp	r6, r2
   19418:	bge	19448 <__assert_fail@plt+0x7e44>
   1941c:	adds	r4, ip, r2
   19420:	bvs	1947c <__assert_fail@plt+0x7e78>
   19424:	cmp	r4, r3
   19428:	movle	r3, #0
   1942c:	andgt	r3, lr, #1
   19430:	cmp	r3, #0
   19434:	bne	1947c <__assert_fail@plt+0x7e78>
   19438:	smull	r8, r9, r4, r8
   1943c:	cmp	r9, r8, asr #31
   19440:	mov	r1, r8
   19444:	bne	1947c <__assert_fail@plt+0x7e78>
   19448:	bl	1921c <__assert_fail@plt+0x7c18>
   1944c:	ldrd	r6, [sp, #8]
   19450:	ldrd	r8, [sp, #16]
   19454:	ldr	sl, [sp, #24]
   19458:	str	r4, [r5]
   1945c:	ldrd	r4, [sp]
   19460:	add	sp, sp, #28
   19464:	pop	{pc}		; (ldr pc, [sp], #4)
   19468:	mov	r6, #64	; 0x40
   1946c:	sdiv	r4, r6, r8
   19470:	mls	r1, r8, r4, r6
   19474:	sub	r1, r6, r1
   19478:	b	19408 <__assert_fail@plt+0x7e04>
   1947c:	bl	19628 <__assert_fail@plt+0x8024>
   19480:	mvn	r6, #-2147483648	; 0x80000000
   19484:	b	1946c <__assert_fail@plt+0x7e68>
   19488:	mov	r1, #1
   1948c:	str	r4, [sp, #-8]!
   19490:	str	lr, [sp, #4]
   19494:	bl	196fc <__assert_fail@plt+0x80f8>
   19498:	cmp	r0, #0
   1949c:	beq	194ac <__assert_fail@plt+0x7ea8>
   194a0:	ldr	r4, [sp]
   194a4:	add	sp, sp, #4
   194a8:	pop	{pc}		; (ldr pc, [sp], #4)
   194ac:	bl	19628 <__assert_fail@plt+0x8024>
   194b0:	mov	r1, #1
   194b4:	str	r4, [sp, #-8]!
   194b8:	str	lr, [sp, #4]
   194bc:	bl	196fc <__assert_fail@plt+0x80f8>
   194c0:	cmp	r0, #0
   194c4:	beq	194d4 <__assert_fail@plt+0x7ed0>
   194c8:	ldr	r4, [sp]
   194cc:	add	sp, sp, #4
   194d0:	pop	{pc}		; (ldr pc, [sp], #4)
   194d4:	bl	19628 <__assert_fail@plt+0x8024>
   194d8:	str	r4, [sp, #-8]!
   194dc:	str	lr, [sp, #4]
   194e0:	bl	196fc <__assert_fail@plt+0x80f8>
   194e4:	cmp	r0, #0
   194e8:	beq	194f8 <__assert_fail@plt+0x7ef4>
   194ec:	ldr	r4, [sp]
   194f0:	add	sp, sp, #4
   194f4:	pop	{pc}		; (ldr pc, [sp], #4)
   194f8:	bl	19628 <__assert_fail@plt+0x8024>
   194fc:	str	r4, [sp, #-8]!
   19500:	str	lr, [sp, #4]
   19504:	bl	196fc <__assert_fail@plt+0x80f8>
   19508:	cmp	r0, #0
   1950c:	beq	1951c <__assert_fail@plt+0x7f18>
   19510:	ldr	r4, [sp]
   19514:	add	sp, sp, #4
   19518:	pop	{pc}		; (ldr pc, [sp], #4)
   1951c:	bl	19628 <__assert_fail@plt+0x8024>
   19520:	strd	r4, [sp, #-16]!
   19524:	mov	r4, r1
   19528:	str	r6, [sp, #8]
   1952c:	mov	r6, r0
   19530:	mov	r0, r1
   19534:	str	lr, [sp, #12]
   19538:	bl	19770 <__assert_fail@plt+0x816c>
   1953c:	subs	r5, r0, #0
   19540:	beq	19564 <__assert_fail@plt+0x7f60>
   19544:	mov	r2, r4
   19548:	mov	r1, r6
   1954c:	bl	112b0 <memcpy@plt>
   19550:	mov	r0, r5
   19554:	ldrd	r4, [sp]
   19558:	ldr	r6, [sp, #8]
   1955c:	add	sp, sp, #12
   19560:	pop	{pc}		; (ldr pc, [sp], #4)
   19564:	bl	19628 <__assert_fail@plt+0x8024>
   19568:	strd	r4, [sp, #-16]!
   1956c:	mov	r4, r1
   19570:	str	r6, [sp, #8]
   19574:	mov	r6, r0
   19578:	mov	r0, r1
   1957c:	str	lr, [sp, #12]
   19580:	bl	19770 <__assert_fail@plt+0x816c>
   19584:	subs	r5, r0, #0
   19588:	beq	195ac <__assert_fail@plt+0x7fa8>
   1958c:	mov	r2, r4
   19590:	mov	r1, r6
   19594:	bl	112b0 <memcpy@plt>
   19598:	mov	r0, r5
   1959c:	ldrd	r4, [sp]
   195a0:	ldr	r6, [sp, #8]
   195a4:	add	sp, sp, #12
   195a8:	pop	{pc}		; (ldr pc, [sp], #4)
   195ac:	bl	19628 <__assert_fail@plt+0x8024>
   195b0:	strd	r4, [sp, #-16]!
   195b4:	mov	r4, r1
   195b8:	str	r6, [sp, #8]
   195bc:	mov	r6, r0
   195c0:	add	r0, r1, #1
   195c4:	str	lr, [sp, #12]
   195c8:	bl	19770 <__assert_fail@plt+0x816c>
   195cc:	subs	r5, r0, #0
   195d0:	beq	195fc <__assert_fail@plt+0x7ff8>
   195d4:	mov	r3, #0
   195d8:	mov	r1, r6
   195dc:	mov	r2, r4
   195e0:	strb	r3, [r5, r4]
   195e4:	bl	112b0 <memcpy@plt>
   195e8:	mov	r0, r5
   195ec:	ldrd	r4, [sp]
   195f0:	ldr	r6, [sp, #8]
   195f4:	add	sp, sp, #12
   195f8:	pop	{pc}		; (ldr pc, [sp], #4)
   195fc:	bl	19628 <__assert_fail@plt+0x8024>
   19600:	str	r4, [sp, #-8]!
   19604:	mov	r4, r0
   19608:	str	lr, [sp, #4]
   1960c:	bl	11460 <strlen@plt>
   19610:	add	r1, r0, #1
   19614:	mov	r0, r4
   19618:	ldr	r4, [sp]
   1961c:	ldr	lr, [sp, #4]
   19620:	add	sp, sp, #8
   19624:	b	19520 <__assert_fail@plt+0x7f1c>
   19628:	movw	r3, #49512	; 0xc168
   1962c:	movt	r3, #2
   19630:	str	r4, [sp, #-8]!
   19634:	ldr	r4, [r3]
   19638:	mov	r2, #5
   1963c:	movw	r1, #47904	; 0xbb20
   19640:	movt	r1, #1
   19644:	mov	r0, #0
   19648:	str	lr, [sp, #4]
   1964c:	bl	112f8 <dcgettext@plt>
   19650:	mov	r3, r0
   19654:	movw	r2, #46628	; 0xb624
   19658:	movt	r2, #1
   1965c:	mov	r1, #0
   19660:	mov	r0, r4
   19664:	bl	113ac <error@plt>
   19668:	bl	115c8 <abort@plt>
   1966c:	orr	r1, r1, #512	; 0x200
   19670:	str	r4, [sp, #-8]!
   19674:	str	lr, [sp, #4]
   19678:	bl	13f80 <__assert_fail@plt+0x297c>
   1967c:	cmp	r0, #0
   19680:	beq	19690 <__assert_fail@plt+0x808c>
   19684:	ldr	r4, [sp]
   19688:	add	sp, sp, #4
   1968c:	pop	{pc}		; (ldr pc, [sp], #4)
   19690:	bl	11484 <__errno_location@plt>
   19694:	ldr	r3, [r0]
   19698:	cmp	r3, #22
   1969c:	beq	196a4 <__assert_fail@plt+0x80a0>
   196a0:	bl	19628 <__assert_fail@plt+0x8024>
   196a4:	movw	r3, #47924	; 0xbb34
   196a8:	movt	r3, #1
   196ac:	movw	r1, #47936	; 0xbb40
   196b0:	movt	r1, #1
   196b4:	movw	r0, #47948	; 0xbb4c
   196b8:	movt	r0, #1
   196bc:	mov	r2, #41	; 0x29
   196c0:	bl	11604 <__assert_fail@plt>
   196c4:	ldr	r3, [r0, #48]	; 0x30
   196c8:	and	r3, r3, #17
   196cc:	cmp	r3, #16
   196d0:	beq	196f4 <__assert_fail@plt+0x80f0>
   196d4:	cmp	r3, #17
   196d8:	beq	196e4 <__assert_fail@plt+0x80e0>
   196dc:	mov	r0, #0
   196e0:	bx	lr
   196e4:	ldr	r0, [r1, #48]	; 0x30
   196e8:	adds	r0, r0, #0
   196ec:	movne	r0, #1
   196f0:	bx	lr
   196f4:	mov	r0, #1
   196f8:	bx	lr
   196fc:	cmp	r1, #0
   19700:	cmpne	r0, #0
   19704:	beq	19750 <__assert_fail@plt+0x814c>
   19708:	strd	r4, [sp, #-16]!
   1970c:	umull	r4, r5, r0, r1
   19710:	str	r6, [sp, #8]
   19714:	str	lr, [sp, #12]
   19718:	adds	r3, r5, #0
   1971c:	movne	r3, #1
   19720:	cmp	r4, #0
   19724:	blt	19730 <__assert_fail@plt+0x812c>
   19728:	cmp	r3, #0
   1972c:	beq	1975c <__assert_fail@plt+0x8158>
   19730:	bl	11484 <__errno_location@plt>
   19734:	mov	r3, #12
   19738:	ldrd	r4, [sp]
   1973c:	ldr	r6, [sp, #8]
   19740:	add	sp, sp, #12
   19744:	str	r3, [r0]
   19748:	mov	r0, #0
   1974c:	pop	{pc}		; (ldr pc, [sp], #4)
   19750:	mov	r1, #1
   19754:	mov	r0, r1
   19758:	b	11238 <calloc@plt>
   1975c:	ldrd	r4, [sp]
   19760:	ldr	r6, [sp, #8]
   19764:	ldr	lr, [sp, #12]
   19768:	add	sp, sp, #16
   1976c:	b	11238 <calloc@plt>
   19770:	cmp	r0, #0
   19774:	beq	19780 <__assert_fail@plt+0x817c>
   19778:	blt	19788 <__assert_fail@plt+0x8184>
   1977c:	b	113dc <malloc@plt>
   19780:	mov	r0, #1
   19784:	b	113dc <malloc@plt>
   19788:	str	r4, [sp, #-8]!
   1978c:	str	lr, [sp, #4]
   19790:	bl	11484 <__errno_location@plt>
   19794:	mov	r3, #12
   19798:	ldr	r4, [sp]
   1979c:	add	sp, sp, #4
   197a0:	str	r3, [r0]
   197a4:	mov	r0, #0
   197a8:	pop	{pc}		; (ldr pc, [sp], #4)
   197ac:	cmp	r0, #0
   197b0:	beq	197d8 <__assert_fail@plt+0x81d4>
   197b4:	cmp	r1, #0
   197b8:	str	r4, [sp, #-8]!
   197bc:	str	lr, [sp, #4]
   197c0:	beq	197e0 <__assert_fail@plt+0x81dc>
   197c4:	blt	197f4 <__assert_fail@plt+0x81f0>
   197c8:	ldr	r4, [sp]
   197cc:	ldr	lr, [sp, #4]
   197d0:	add	sp, sp, #8
   197d4:	b	11310 <realloc@plt>
   197d8:	mov	r0, r1
   197dc:	b	19770 <__assert_fail@plt+0x816c>
   197e0:	bl	19e14 <__assert_fail@plt+0x8810>
   197e4:	ldr	r4, [sp]
   197e8:	add	sp, sp, #4
   197ec:	mov	r0, #0
   197f0:	pop	{pc}		; (ldr pc, [sp], #4)
   197f4:	bl	11484 <__errno_location@plt>
   197f8:	mov	r3, #12
   197fc:	str	r3, [r0]
   19800:	b	197e4 <__assert_fail@plt+0x81e0>
   19804:	strd	r4, [sp, #-28]!	; 0xffffffe4
   19808:	mov	r5, r0
   1980c:	strd	r6, [sp, #8]
   19810:	strd	r8, [sp, #16]
   19814:	str	lr, [sp, #24]
   19818:	sub	sp, sp, #44	; 0x2c
   1981c:	ldrb	r3, [r2]
   19820:	cmp	r3, #0
   19824:	strbeq	r3, [r5]
   19828:	beq	19890 <__assert_fail@plt+0x828c>
   1982c:	movw	r7, #49984	; 0xc340
   19830:	movt	r7, #2
   19834:	ldr	r4, [r7]
   19838:	mov	r6, r2
   1983c:	mov	r8, r1
   19840:	cmp	r4, #0
   19844:	beq	198bc <__assert_fail@plt+0x82b8>
   19848:	cmp	r4, #0
   1984c:	blt	198b4 <__assert_fail@plt+0x82b0>
   19850:	mov	r0, r6
   19854:	bl	11460 <strlen@plt>
   19858:	add	r0, r0, #27
   1985c:	cmp	r0, #4032	; 0xfc0
   19860:	bhi	198a8 <__assert_fail@plt+0x82a4>
   19864:	mvn	r2, #0
   19868:	mov	r1, #1
   1986c:	str	r8, [sp]
   19870:	movw	r3, #48004	; 0xbb84
   19874:	movt	r3, #1
   19878:	mov	r0, r5
   1987c:	bl	11490 <__sprintf_chk@plt>
   19880:	add	r0, r5, r0
   19884:	mov	r1, r6
   19888:	bl	11388 <strcpy@plt>
   1988c:	mov	r0, r5
   19890:	add	sp, sp, #44	; 0x2c
   19894:	ldrd	r4, [sp]
   19898:	ldrd	r6, [sp, #8]
   1989c:	ldrd	r8, [sp, #16]
   198a0:	add	sp, sp, #24
   198a4:	pop	{pc}		; (ldr pc, [sp], #4)
   198a8:	bl	19770 <__assert_fail@plt+0x816c>
   198ac:	subs	r5, r0, #0
   198b0:	bne	19864 <__assert_fail@plt+0x8260>
   198b4:	mov	r0, #0
   198b8:	b	19890 <__assert_fail@plt+0x828c>
   198bc:	mov	r1, #18688	; 0x4900
   198c0:	movt	r1, #8
   198c4:	movw	r0, #47964	; 0xbb5c
   198c8:	movt	r0, #1
   198cc:	bl	113c4 <open64@plt>
   198d0:	subs	r9, r0, #0
   198d4:	bge	198e8 <__assert_fail@plt+0x82e4>
   198d8:	mvn	r3, #0
   198dc:	mov	r0, r4
   198e0:	str	r3, [r7]
   198e4:	b	19890 <__assert_fail@plt+0x828c>
   198e8:	mov	r2, #32
   198ec:	mov	r1, #1
   198f0:	str	r9, [sp]
   198f4:	movw	r3, #47980	; 0xbb6c
   198f8:	movt	r3, #1
   198fc:	add	r0, sp, #8
   19900:	bl	11490 <__sprintf_chk@plt>
   19904:	mov	r1, r4
   19908:	add	r0, sp, #8
   1990c:	bl	114f0 <access@plt>
   19910:	cmp	r0, #0
   19914:	mov	r0, r9
   19918:	mvnne	r3, #0
   1991c:	moveq	r3, #1
   19920:	str	r3, [r7]
   19924:	bl	115d4 <close@plt>
   19928:	ldr	r4, [r7]
   1992c:	b	19848 <__assert_fail@plt+0x8244>
   19930:	strd	r4, [sp, #-16]!
   19934:	mov	r4, r0
   19938:	str	r6, [sp, #8]
   1993c:	str	lr, [sp, #12]
   19940:	bl	11394 <__fpending@plt>
   19944:	ldr	r5, [r4]
   19948:	mov	r6, r0
   1994c:	mov	r0, r4
   19950:	bl	19ad8 <__assert_fail@plt+0x84d4>
   19954:	mov	r4, r0
   19958:	and	r5, r5, #32
   1995c:	cmp	r5, #0
   19960:	bne	19998 <__assert_fail@plt+0x8394>
   19964:	cmp	r0, #0
   19968:	beq	19984 <__assert_fail@plt+0x8380>
   1996c:	cmp	r6, #0
   19970:	bne	199b0 <__assert_fail@plt+0x83ac>
   19974:	bl	11484 <__errno_location@plt>
   19978:	ldr	r4, [r0]
   1997c:	subs	r4, r4, #9
   19980:	mvnne	r4, #0
   19984:	mov	r0, r4
   19988:	ldrd	r4, [sp]
   1998c:	ldr	r6, [sp, #8]
   19990:	add	sp, sp, #12
   19994:	pop	{pc}		; (ldr pc, [sp], #4)
   19998:	cmp	r0, #0
   1999c:	bne	199b0 <__assert_fail@plt+0x83ac>
   199a0:	bl	11484 <__errno_location@plt>
   199a4:	str	r4, [r0]
   199a8:	mvn	r4, #0
   199ac:	b	19984 <__assert_fail@plt+0x8380>
   199b0:	mvn	r4, #0
   199b4:	b	19984 <__assert_fail@plt+0x8380>
   199b8:	movw	r3, #62998	; 0xf616
   199bc:	movt	r3, #149	; 0x95
   199c0:	strd	r4, [sp, #-8]!
   199c4:	mov	r4, #0
   199c8:	mov	r5, #0
   199cc:	strd	r4, [r0, #16]
   199d0:	str	r3, [r0, #24]
   199d4:	ldrd	r4, [sp]
   199d8:	add	sp, sp, #8
   199dc:	bx	lr
   199e0:	ldr	r2, [r0, #24]
   199e4:	movw	r3, #62998	; 0xf616
   199e8:	movt	r3, #149	; 0x95
   199ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   199f0:	strd	r6, [sp, #8]
   199f4:	strd	r8, [sp, #16]
   199f8:	strd	sl, [sp, #24]
   199fc:	cmp	r2, r3
   19a00:	str	lr, [sp, #32]
   19a04:	sub	sp, sp, #4
   19a08:	bne	19ab8 <__assert_fail@plt+0x84b4>
   19a0c:	ldrd	r6, [r0, #16]
   19a10:	ldrd	sl, [r1, #96]	; 0x60
   19a14:	orrs	r3, r6, r7
   19a18:	beq	19a6c <__assert_fail@plt+0x8468>
   19a1c:	ldrd	r2, [r0]
   19a20:	cmp	r3, fp
   19a24:	cmpeq	r2, sl
   19a28:	beq	19a8c <__assert_fail@plt+0x8488>
   19a2c:	adds	r8, r6, #1
   19a30:	adc	r9, r7, #0
   19a34:	and	r2, r6, r8
   19a38:	and	r3, r7, r9
   19a3c:	orrs	r3, r2, r3
   19a40:	strd	r8, [r0, #16]
   19a44:	movne	r1, #0
   19a48:	beq	19aa8 <__assert_fail@plt+0x84a4>
   19a4c:	mov	r0, r1
   19a50:	add	sp, sp, #4
   19a54:	ldrd	r4, [sp]
   19a58:	ldrd	r6, [sp, #8]
   19a5c:	ldrd	r8, [sp, #16]
   19a60:	ldrd	sl, [sp, #24]
   19a64:	add	sp, sp, #32
   19a68:	pop	{pc}		; (ldr pc, [sp], #4)
   19a6c:	mov	r2, #1
   19a70:	mov	r3, #0
   19a74:	strd	r2, [r0, #16]
   19a78:	ldrd	r2, [r1]
   19a7c:	mov	r1, #0
   19a80:	strd	sl, [r0]
   19a84:	strd	r2, [r0, #8]
   19a88:	b	19a4c <__assert_fail@plt+0x8448>
   19a8c:	ldrd	r4, [r1]
   19a90:	ldrd	r2, [r0, #8]
   19a94:	cmp	r5, r3
   19a98:	cmpeq	r4, r2
   19a9c:	bne	19a2c <__assert_fail@plt+0x8428>
   19aa0:	mov	r1, #1
   19aa4:	b	19a4c <__assert_fail@plt+0x8448>
   19aa8:	orrs	r3, r8, r9
   19aac:	bne	19a78 <__assert_fail@plt+0x8474>
   19ab0:	mov	r1, #1
   19ab4:	b	19a4c <__assert_fail@plt+0x8448>
   19ab8:	movw	r3, #48024	; 0xbb98
   19abc:	movt	r3, #1
   19ac0:	movw	r1, #48036	; 0xbba4
   19ac4:	movt	r1, #1
   19ac8:	movw	r0, #48056	; 0xbbb8
   19acc:	movt	r0, #1
   19ad0:	mov	r2, #60	; 0x3c
   19ad4:	bl	11604 <__assert_fail@plt>
   19ad8:	strd	r4, [sp, #-12]!
   19adc:	mov	r4, r0
   19ae0:	str	lr, [sp, #8]
   19ae4:	sub	sp, sp, #12
   19ae8:	bl	114c0 <fileno@plt>
   19aec:	cmp	r0, #0
   19af0:	mov	r0, r4
   19af4:	blt	19b78 <__assert_fail@plt+0x8574>
   19af8:	bl	113f4 <__freading@plt>
   19afc:	cmp	r0, #0
   19b00:	bne	19b44 <__assert_fail@plt+0x8540>
   19b04:	mov	r0, r4
   19b08:	bl	19db4 <__assert_fail@plt+0x87b0>
   19b0c:	cmp	r0, #0
   19b10:	beq	19b74 <__assert_fail@plt+0x8570>
   19b14:	bl	11484 <__errno_location@plt>
   19b18:	mov	r5, r0
   19b1c:	mov	r0, r4
   19b20:	ldr	r4, [r5]
   19b24:	bl	114fc <fclose@plt>
   19b28:	cmp	r4, #0
   19b2c:	mvnne	r0, #0
   19b30:	strne	r4, [r5]
   19b34:	add	sp, sp, #12
   19b38:	ldrd	r4, [sp]
   19b3c:	add	sp, sp, #8
   19b40:	pop	{pc}		; (ldr pc, [sp], #4)
   19b44:	mov	r0, r4
   19b48:	bl	114c0 <fileno@plt>
   19b4c:	mov	r1, #1
   19b50:	mov	r2, #0
   19b54:	mov	r3, #0
   19b58:	str	r1, [sp]
   19b5c:	bl	11370 <lseek64@plt>
   19b60:	mvn	r3, #0
   19b64:	mvn	r2, #0
   19b68:	cmp	r1, r3
   19b6c:	cmpeq	r0, r2
   19b70:	bne	19b04 <__assert_fail@plt+0x8500>
   19b74:	mov	r0, r4
   19b78:	add	sp, sp, #12
   19b7c:	ldrd	r4, [sp]
   19b80:	ldr	lr, [sp, #8]
   19b84:	add	sp, sp, #12
   19b88:	b	114fc <fclose@plt>
   19b8c:	push	{r1, r2, r3}
   19b90:	strd	r4, [sp, #-20]!	; 0xffffffec
   19b94:	strd	r6, [sp, #8]
   19b98:	str	lr, [sp, #16]
   19b9c:	sub	sp, sp, #8
   19ba0:	ldr	r1, [sp, #28]
   19ba4:	add	r2, sp, #32
   19ba8:	str	r2, [sp, #4]
   19bac:	cmp	r1, #0
   19bb0:	beq	19c8c <__assert_fail@plt+0x8688>
   19bb4:	movw	r3, #1030	; 0x406
   19bb8:	mov	r6, r0
   19bbc:	cmp	r1, r3
   19bc0:	beq	19c9c <__assert_fail@plt+0x8698>
   19bc4:	cmp	r1, #11
   19bc8:	beq	19c44 <__assert_fail@plt+0x8640>
   19bcc:	ble	19c24 <__assert_fail@plt+0x8620>
   19bd0:	movw	r2, #1031	; 0x407
   19bd4:	cmp	r1, r2
   19bd8:	bgt	19c60 <__assert_fail@plt+0x865c>
   19bdc:	cmp	r1, r3
   19be0:	bge	19bf0 <__assert_fail@plt+0x85ec>
   19be4:	movw	r3, #1025	; 0x401
   19be8:	cmp	r1, r3
   19bec:	beq	19c44 <__assert_fail@plt+0x8640>
   19bf0:	ldr	r3, [sp, #4]
   19bf4:	mov	r0, r6
   19bf8:	ldr	r2, [r3]
   19bfc:	bl	11514 <fcntl64@plt>
   19c00:	mov	r4, r0
   19c04:	mov	r0, r4
   19c08:	add	sp, sp, #8
   19c0c:	ldrd	r4, [sp]
   19c10:	ldrd	r6, [sp, #8]
   19c14:	ldr	lr, [sp, #16]
   19c18:	add	sp, sp, #20
   19c1c:	add	sp, sp, #12
   19c20:	bx	lr
   19c24:	cmp	r1, #4
   19c28:	beq	19bf0 <__assert_fail@plt+0x85ec>
   19c2c:	bgt	19c54 <__assert_fail@plt+0x8650>
   19c30:	cmp	r1, #2
   19c34:	beq	19bf0 <__assert_fail@plt+0x85ec>
   19c38:	bgt	19c44 <__assert_fail@plt+0x8640>
   19c3c:	cmp	r1, #1
   19c40:	bne	19bf0 <__assert_fail@plt+0x85ec>
   19c44:	mov	r0, r6
   19c48:	bl	11514 <fcntl64@plt>
   19c4c:	mov	r4, r0
   19c50:	b	19c04 <__assert_fail@plt+0x8600>
   19c54:	cmp	r1, #9
   19c58:	bne	19bf0 <__assert_fail@plt+0x85ec>
   19c5c:	b	19c44 <__assert_fail@plt+0x8640>
   19c60:	movw	r3, #1033	; 0x409
   19c64:	cmp	r1, r3
   19c68:	beq	19bf0 <__assert_fail@plt+0x85ec>
   19c6c:	blt	19c44 <__assert_fail@plt+0x8640>
   19c70:	movw	r3, #1034	; 0x40a
   19c74:	cmp	r1, r3
   19c78:	bne	19bf0 <__assert_fail@plt+0x85ec>
   19c7c:	mov	r0, r6
   19c80:	bl	11514 <fcntl64@plt>
   19c84:	mov	r4, r0
   19c88:	b	19c04 <__assert_fail@plt+0x8600>
   19c8c:	ldr	r2, [sp, #32]
   19c90:	bl	11514 <fcntl64@plt>
   19c94:	mov	r4, r0
   19c98:	b	19c04 <__assert_fail@plt+0x8600>
   19c9c:	movw	r5, #49988	; 0xc344
   19ca0:	movt	r5, #2
   19ca4:	ldr	r7, [r2]
   19ca8:	add	r2, sp, #36	; 0x24
   19cac:	ldr	r3, [r5]
   19cb0:	str	r2, [sp, #4]
   19cb4:	mov	r2, r7
   19cb8:	cmp	r3, #0
   19cbc:	blt	19cd8 <__assert_fail@plt+0x86d4>
   19cc0:	bl	11514 <fcntl64@plt>
   19cc4:	subs	r4, r0, #0
   19cc8:	blt	19d40 <__assert_fail@plt+0x873c>
   19ccc:	mov	r3, #1
   19cd0:	str	r3, [r5]
   19cd4:	b	19c04 <__assert_fail@plt+0x8600>
   19cd8:	mov	r1, #0
   19cdc:	bl	11514 <fcntl64@plt>
   19ce0:	subs	r4, r0, #0
   19ce4:	blt	19c04 <__assert_fail@plt+0x8600>
   19ce8:	ldr	r3, [r5]
   19cec:	cmn	r3, #1
   19cf0:	bne	19c04 <__assert_fail@plt+0x8600>
   19cf4:	mov	r1, #1
   19cf8:	mov	r0, r4
   19cfc:	bl	11514 <fcntl64@plt>
   19d00:	subs	r2, r0, #0
   19d04:	blt	19d20 <__assert_fail@plt+0x871c>
   19d08:	orr	r2, r2, #1
   19d0c:	mov	r1, #2
   19d10:	mov	r0, r4
   19d14:	bl	11514 <fcntl64@plt>
   19d18:	cmn	r0, #1
   19d1c:	bne	19c04 <__assert_fail@plt+0x8600>
   19d20:	bl	11484 <__errno_location@plt>
   19d24:	mov	r5, r0
   19d28:	mov	r0, r4
   19d2c:	ldr	r6, [r5]
   19d30:	mvn	r4, #0
   19d34:	bl	115d4 <close@plt>
   19d38:	str	r6, [r5]
   19d3c:	b	19c04 <__assert_fail@plt+0x8600>
   19d40:	bl	11484 <__errno_location@plt>
   19d44:	ldr	r3, [r0]
   19d48:	cmp	r3, #22
   19d4c:	bne	19ccc <__assert_fail@plt+0x86c8>
   19d50:	mov	r2, r7
   19d54:	mov	r0, r6
   19d58:	mov	r1, #0
   19d5c:	bl	11514 <fcntl64@plt>
   19d60:	subs	r4, r0, #0
   19d64:	mvnge	r3, #0
   19d68:	strge	r3, [r5]
   19d6c:	bge	19cf4 <__assert_fail@plt+0x86f0>
   19d70:	b	19c04 <__assert_fail@plt+0x8600>
   19d74:	push	{r1, r2, r3}
   19d78:	push	{lr}		; (str lr, [sp, #-4]!)
   19d7c:	sub	sp, sp, #8
   19d80:	ldr	r1, [sp, #12]
   19d84:	ands	r2, r1, #64	; 0x40
   19d88:	bne	19da4 <__assert_fail@plt+0x87a0>
   19d8c:	bl	113c4 <open64@plt>
   19d90:	bl	18bc0 <__assert_fail@plt+0x75bc>
   19d94:	add	sp, sp, #8
   19d98:	pop	{lr}		; (ldr lr, [sp], #4)
   19d9c:	add	sp, sp, #12
   19da0:	bx	lr
   19da4:	add	r3, sp, #16
   19da8:	ldr	r2, [sp, #16]
   19dac:	str	r3, [sp, #4]
   19db0:	b	19d8c <__assert_fail@plt+0x8788>
   19db4:	str	r4, [sp, #-8]!
   19db8:	subs	r4, r0, #0
   19dbc:	str	lr, [sp, #4]
   19dc0:	sub	sp, sp, #8
   19dc4:	beq	19de0 <__assert_fail@plt+0x87dc>
   19dc8:	bl	113f4 <__freading@plt>
   19dcc:	cmp	r0, #0
   19dd0:	beq	19de0 <__assert_fail@plt+0x87dc>
   19dd4:	ldr	r3, [r4]
   19dd8:	tst	r3, #256	; 0x100
   19ddc:	bne	19df8 <__assert_fail@plt+0x87f4>
   19de0:	mov	r0, r4
   19de4:	add	sp, sp, #8
   19de8:	ldr	r4, [sp]
   19dec:	ldr	lr, [sp, #4]
   19df0:	add	sp, sp, #8
   19df4:	b	11274 <fflush@plt>
   19df8:	mov	r1, #1
   19dfc:	mov	r2, #0
   19e00:	mov	r3, #0
   19e04:	mov	r0, r4
   19e08:	str	r1, [sp]
   19e0c:	bl	19e74 <__assert_fail@plt+0x8870>
   19e10:	b	19de0 <__assert_fail@plt+0x87dc>
   19e14:	strd	r4, [sp, #-12]!
   19e18:	mov	r5, r0
   19e1c:	str	lr, [sp, #8]
   19e20:	sub	sp, sp, #12
   19e24:	bl	11484 <__errno_location@plt>
   19e28:	mov	r4, r0
   19e2c:	mov	r2, #0
   19e30:	ldr	r3, [r4]
   19e34:	mov	r0, r5
   19e38:	str	r2, [r4]
   19e3c:	str	r3, [sp]
   19e40:	str	r3, [sp, #4]
   19e44:	bl	11298 <free@plt>
   19e48:	ldr	r3, [r4]
   19e4c:	add	r2, sp, #8
   19e50:	clz	r3, r3
   19e54:	lsr	r3, r3, #5
   19e58:	add	r3, r2, r3, lsl #2
   19e5c:	ldr	r3, [r3, #-8]
   19e60:	str	r3, [r4]
   19e64:	add	sp, sp, #12
   19e68:	ldrd	r4, [sp]
   19e6c:	add	sp, sp, #8
   19e70:	pop	{pc}		; (ldr pc, [sp], #4)
   19e74:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19e78:	mov	r4, r0
   19e7c:	ldr	ip, [r0, #4]
   19e80:	strd	r6, [sp, #8]
   19e84:	str	lr, [sp, #20]
   19e88:	ldr	lr, [r0, #8]
   19e8c:	str	r8, [sp, #16]
   19e90:	sub	sp, sp, #8
   19e94:	ldr	r5, [sp, #32]
   19e98:	cmp	lr, ip
   19e9c:	beq	19ec4 <__assert_fail@plt+0x88c0>
   19ea0:	mov	r0, r4
   19ea4:	str	r5, [sp, #32]
   19ea8:	add	sp, sp, #8
   19eac:	ldrd	r4, [sp]
   19eb0:	ldrd	r6, [sp, #8]
   19eb4:	ldr	r8, [sp, #16]
   19eb8:	ldr	lr, [sp, #20]
   19ebc:	add	sp, sp, #24
   19ec0:	b	11508 <fseeko64@plt>
   19ec4:	ldr	ip, [r0, #16]
   19ec8:	ldr	lr, [r0, #20]
   19ecc:	cmp	lr, ip
   19ed0:	bne	19ea0 <__assert_fail@plt+0x889c>
   19ed4:	ldr	r8, [r0, #36]	; 0x24
   19ed8:	cmp	r8, #0
   19edc:	bne	19ea0 <__assert_fail@plt+0x889c>
   19ee0:	mov	r6, r2
   19ee4:	mov	r7, r3
   19ee8:	bl	114c0 <fileno@plt>
   19eec:	mov	r2, r6
   19ef0:	mov	r3, r7
   19ef4:	str	r5, [sp]
   19ef8:	bl	11370 <lseek64@plt>
   19efc:	mvn	r3, #0
   19f00:	mvn	r2, #0
   19f04:	cmp	r1, r3
   19f08:	cmpeq	r0, r2
   19f0c:	beq	19f3c <__assert_fail@plt+0x8938>
   19f10:	ldr	r3, [r4]
   19f14:	strd	r0, [r4, #80]	; 0x50
   19f18:	bic	r3, r3, #16
   19f1c:	str	r3, [r4]
   19f20:	mov	r0, r8
   19f24:	add	sp, sp, #8
   19f28:	ldrd	r4, [sp]
   19f2c:	ldrd	r6, [sp, #8]
   19f30:	ldr	r8, [sp, #16]
   19f34:	add	sp, sp, #20
   19f38:	pop	{pc}		; (ldr pc, [sp], #4)
   19f3c:	mvn	r8, #0
   19f40:	b	19f20 <__assert_fail@plt+0x891c>
   19f44:	mov	r0, #14
   19f48:	str	r4, [sp, #-8]!
   19f4c:	str	lr, [sp, #4]
   19f50:	bl	11538 <nl_langinfo@plt>
   19f54:	cmp	r0, #0
   19f58:	beq	19f7c <__assert_fail@plt+0x8978>
   19f5c:	ldrb	r2, [r0]
   19f60:	movw	r3, #48080	; 0xbbd0
   19f64:	movt	r3, #1
   19f68:	ldr	r4, [sp]
   19f6c:	add	sp, sp, #4
   19f70:	cmp	r2, #0
   19f74:	moveq	r0, r3
   19f78:	pop	{pc}		; (ldr pc, [sp], #4)
   19f7c:	ldr	r4, [sp]
   19f80:	add	sp, sp, #4
   19f84:	movw	r0, #48080	; 0xbbd0
   19f88:	movt	r0, #1
   19f8c:	pop	{pc}		; (ldr pc, [sp], #4)
   19f90:	strd	r4, [sp, #-20]!	; 0xffffffec
   19f94:	mov	r5, r2
   19f98:	strd	r6, [sp, #8]
   19f9c:	subs	r6, r0, #0
   19fa0:	mov	r7, r1
   19fa4:	str	lr, [sp, #16]
   19fa8:	sub	sp, sp, #12
   19fac:	addeq	r6, sp, #4
   19fb0:	mov	r0, r6
   19fb4:	bl	113a0 <mbrtowc@plt>
   19fb8:	cmp	r5, #0
   19fbc:	cmnne	r0, #3
   19fc0:	mov	r4, r0
   19fc4:	bhi	19fe0 <__assert_fail@plt+0x89dc>
   19fc8:	mov	r0, r4
   19fcc:	add	sp, sp, #12
   19fd0:	ldrd	r4, [sp]
   19fd4:	ldrd	r6, [sp, #8]
   19fd8:	add	sp, sp, #16
   19fdc:	pop	{pc}		; (ldr pc, [sp], #4)
   19fe0:	mov	r0, #0
   19fe4:	bl	1a4b0 <__assert_fail@plt+0x8eac>
   19fe8:	cmp	r0, #0
   19fec:	bne	19fc8 <__assert_fail@plt+0x89c4>
   19ff0:	ldrb	r3, [r7]
   19ff4:	mov	r4, #1
   19ff8:	str	r3, [r6]
   19ffc:	b	19fc8 <__assert_fail@plt+0x89c4>
   1a000:	movw	r3, #49512	; 0xc168
   1a004:	movt	r3, #2
   1a008:	str	r4, [sp, #-8]!
   1a00c:	ldr	r4, [r3]
   1a010:	mov	r5, r0
   1a014:	mov	r2, #5
   1a018:	movw	r1, #48088	; 0xbbd8
   1a01c:	movt	r1, #1
   1a020:	str	lr, [sp, #4]
   1a024:	mov	r0, #0
   1a028:	bl	112f8 <dcgettext@plt>
   1a02c:	mov	r2, r0
   1a030:	mov	r1, r5
   1a034:	mov	r0, r4
   1a038:	bl	113ac <error@plt>
   1a03c:	bl	115c8 <abort@plt>
   1a040:	movw	r3, #49512	; 0xc168
   1a044:	movt	r3, #2
   1a048:	str	r4, [sp, #-8]!
   1a04c:	ldr	r4, [r3]
   1a050:	mov	r5, r0
   1a054:	mov	r2, #5
   1a058:	movw	r1, #48132	; 0xbc04
   1a05c:	movt	r1, #1
   1a060:	str	lr, [sp, #4]
   1a064:	mov	r0, #0
   1a068:	bl	112f8 <dcgettext@plt>
   1a06c:	mov	r2, r0
   1a070:	mov	r1, r5
   1a074:	mov	r0, r4
   1a078:	bl	113ac <error@plt>
   1a07c:	bl	115c8 <abort@plt>
   1a080:	umull	r2, r3, r1, r2
   1a084:	cmp	r3, #0
   1a088:	bne	1a094 <__assert_fail@plt+0x8a90>
   1a08c:	mov	r1, r2
   1a090:	b	197ac <__assert_fail@plt+0x81a8>
   1a094:	str	r4, [sp, #-8]!
   1a098:	str	lr, [sp, #4]
   1a09c:	bl	11484 <__errno_location@plt>
   1a0a0:	mov	r3, #12
   1a0a4:	ldr	r4, [sp]
   1a0a8:	add	sp, sp, #4
   1a0ac:	str	r3, [r0]
   1a0b0:	mov	r0, #0
   1a0b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0b8:	strd	r4, [sp, #-16]!
   1a0bc:	mov	r5, r0
   1a0c0:	mov	r4, #0
   1a0c4:	movw	r0, #46684	; 0xb65c
   1a0c8:	movt	r0, #1
   1a0cc:	str	r6, [sp, #8]
   1a0d0:	mov	r1, #524288	; 0x80000
   1a0d4:	str	lr, [sp, #12]
   1a0d8:	str	r4, [r5, #4]
   1a0dc:	bl	19d74 <__assert_fail@plt+0x8770>
   1a0e0:	cmp	r0, r4
   1a0e4:	str	r0, [r5]
   1a0e8:	movge	r0, r4
   1a0ec:	blt	1a100 <__assert_fail@plt+0x8afc>
   1a0f0:	ldrd	r4, [sp]
   1a0f4:	ldr	r6, [sp, #8]
   1a0f8:	add	sp, sp, #12
   1a0fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a100:	mov	r1, r4
   1a104:	mov	r0, r4
   1a108:	bl	11430 <getcwd@plt>
   1a10c:	clz	r4, r0
   1a110:	str	r0, [r5, #4]
   1a114:	lsr	r4, r4, #5
   1a118:	ldr	r6, [sp, #8]
   1a11c:	rsb	r0, r4, #0
   1a120:	ldrd	r4, [sp]
   1a124:	add	sp, sp, #12
   1a128:	pop	{pc}		; (ldr pc, [sp], #4)
   1a12c:	ldr	r3, [r0]
   1a130:	cmp	r3, #0
   1a134:	blt	1a140 <__assert_fail@plt+0x8b3c>
   1a138:	mov	r0, r3
   1a13c:	b	11568 <fchdir@plt>
   1a140:	ldr	r0, [r0, #4]
   1a144:	b	1a218 <__assert_fail@plt+0x8c14>
   1a148:	str	r4, [sp, #-8]!
   1a14c:	mov	r4, r0
   1a150:	ldr	r0, [r0]
   1a154:	str	lr, [sp, #4]
   1a158:	cmp	r0, #0
   1a15c:	blt	1a164 <__assert_fail@plt+0x8b60>
   1a160:	bl	115d4 <close@plt>
   1a164:	ldr	r0, [r4, #4]
   1a168:	ldr	r4, [sp]
   1a16c:	ldr	lr, [sp, #4]
   1a170:	add	sp, sp, #8
   1a174:	b	19e14 <__assert_fail@plt+0x8810>
   1a178:	mov	r2, #3
   1a17c:	mov	r1, #0
   1a180:	b	19b8c <__assert_fail@plt+0x8588>
   1a184:	cmp	r0, #0
   1a188:	bxlt	lr
   1a18c:	str	r4, [sp, #-8]!
   1a190:	str	lr, [sp, #4]
   1a194:	bl	115d4 <close@plt>
   1a198:	cmp	r0, #0
   1a19c:	bne	1a1ac <__assert_fail@plt+0x8ba8>
   1a1a0:	ldr	r4, [sp]
   1a1a4:	add	sp, sp, #4
   1a1a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a1ac:	movw	r3, #48180	; 0xbc34
   1a1b0:	movt	r3, #1
   1a1b4:	movw	r1, #48204	; 0xbc4c
   1a1b8:	movt	r1, #1
   1a1bc:	movw	r0, #48224	; 0xbc60
   1a1c0:	movt	r0, #1
   1a1c4:	mov	r2, #64	; 0x40
   1a1c8:	bl	11604 <__assert_fail@plt>
   1a1cc:	mov	r2, #18688	; 0x4900
   1a1d0:	strd	r4, [sp, #-16]!
   1a1d4:	mov	r4, r0
   1a1d8:	ldr	r0, [r0]
   1a1dc:	str	r6, [sp, #8]
   1a1e0:	str	lr, [sp, #12]
   1a1e4:	bl	1146c <openat64@plt>
   1a1e8:	subs	r5, r0, #0
   1a1ec:	blt	1a210 <__assert_fail@plt+0x8c0c>
   1a1f0:	ldr	r0, [r4]
   1a1f4:	bl	1a184 <__assert_fail@plt+0x8b80>
   1a1f8:	mov	r0, #0
   1a1fc:	str	r5, [r4]
   1a200:	ldrd	r4, [sp]
   1a204:	ldr	r6, [sp, #8]
   1a208:	add	sp, sp, #12
   1a20c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a210:	mvn	r0, #0
   1a214:	b	1a200 <__assert_fail@plt+0x8bfc>
   1a218:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1a21c:	strd	r6, [sp, #8]
   1a220:	mov	r6, r0
   1a224:	strd	r8, [sp, #16]
   1a228:	str	lr, [sp, #24]
   1a22c:	sub	sp, sp, #12
   1a230:	bl	11334 <chdir@plt>
   1a234:	subs	r4, r0, #0
   1a238:	beq	1a33c <__assert_fail@plt+0x8d38>
   1a23c:	bl	11484 <__errno_location@plt>
   1a240:	ldr	r3, [r0]
   1a244:	mov	r9, r0
   1a248:	cmp	r3, #36	; 0x24
   1a24c:	bne	1a33c <__assert_fail@plt+0x8d38>
   1a250:	mov	r0, r6
   1a254:	bl	11460 <strlen@plt>
   1a258:	mvn	r3, #99	; 0x63
   1a25c:	subs	r7, r0, #0
   1a260:	str	r3, [sp, #4]
   1a264:	beq	1a474 <__assert_fail@plt+0x8e70>
   1a268:	cmp	r7, #4096	; 0x1000
   1a26c:	bcc	1a490 <__assert_fail@plt+0x8e8c>
   1a270:	movw	r1, #48020	; 0xbb94
   1a274:	movt	r1, #1
   1a278:	mov	r0, r6
   1a27c:	bl	115f8 <strspn@plt>
   1a280:	cmp	r0, #2
   1a284:	mov	r5, r0
   1a288:	beq	1a38c <__assert_fail@plt+0x8d88>
   1a28c:	cmp	r0, #0
   1a290:	moveq	r5, r6
   1a294:	bne	1a358 <__assert_fail@plt+0x8d54>
   1a298:	ldrb	r3, [r5]
   1a29c:	cmp	r3, #47	; 0x2f
   1a2a0:	beq	1a43c <__assert_fail@plt+0x8e38>
   1a2a4:	add	r6, r6, r7
   1a2a8:	cmp	r5, r6
   1a2ac:	bhi	1a458 <__assert_fail@plt+0x8e54>
   1a2b0:	sub	r3, r6, r5
   1a2b4:	cmp	r3, #4096	; 0x1000
   1a2b8:	blt	1a3e8 <__assert_fail@plt+0x8de4>
   1a2bc:	movw	r7, #48020	; 0xbb94
   1a2c0:	movt	r7, #1
   1a2c4:	mov	r8, #47	; 0x2f
   1a2c8:	b	1a318 <__assert_fail@plt+0x8d14>
   1a2cc:	mov	r3, #0
   1a2d0:	sub	r2, r4, r5
   1a2d4:	cmp	r2, #4096	; 0x1000
   1a2d8:	strb	r3, [r4]
   1a2dc:	bge	1a420 <__assert_fail@plt+0x8e1c>
   1a2e0:	mov	r1, r5
   1a2e4:	add	r0, sp, #4
   1a2e8:	bl	1a1cc <__assert_fail@plt+0x8bc8>
   1a2ec:	cmp	r0, #0
   1a2f0:	strb	r8, [r4]
   1a2f4:	bne	1a374 <__assert_fail@plt+0x8d70>
   1a2f8:	add	r4, r4, #1
   1a2fc:	mov	r1, r7
   1a300:	mov	r0, r4
   1a304:	bl	115f8 <strspn@plt>
   1a308:	add	r5, r4, r0
   1a30c:	sub	r3, r6, r5
   1a310:	cmp	r3, #4096	; 0x1000
   1a314:	blt	1a3e8 <__assert_fail@plt+0x8de4>
   1a318:	mov	r2, #4096	; 0x1000
   1a31c:	mov	r1, #47	; 0x2f
   1a320:	mov	r0, r5
   1a324:	bl	11478 <memrchr@plt>
   1a328:	subs	r4, r0, #0
   1a32c:	bne	1a2cc <__assert_fail@plt+0x8cc8>
   1a330:	mov	r3, #36	; 0x24
   1a334:	mvn	r4, #0
   1a338:	str	r3, [r9]
   1a33c:	mov	r0, r4
   1a340:	add	sp, sp, #12
   1a344:	ldrd	r4, [sp]
   1a348:	ldrd	r6, [sp, #8]
   1a34c:	ldrd	r8, [sp, #16]
   1a350:	add	sp, sp, #24
   1a354:	pop	{pc}		; (ldr pc, [sp], #4)
   1a358:	movw	r1, #48020	; 0xbb94
   1a35c:	movt	r1, #1
   1a360:	add	r0, sp, #4
   1a364:	bl	1a1cc <__assert_fail@plt+0x8bc8>
   1a368:	cmp	r0, #0
   1a36c:	addeq	r5, r6, r5
   1a370:	beq	1a298 <__assert_fail@plt+0x8c94>
   1a374:	ldr	r5, [r9]
   1a378:	mvn	r4, #0
   1a37c:	ldr	r0, [sp, #4]
   1a380:	bl	1a184 <__assert_fail@plt+0x8b80>
   1a384:	str	r5, [r9]
   1a388:	b	1a33c <__assert_fail@plt+0x8d38>
   1a38c:	sub	r2, r7, #3
   1a390:	mov	r1, #47	; 0x2f
   1a394:	add	r0, r6, #3
   1a398:	bl	114d8 <memchr@plt>
   1a39c:	subs	r4, r0, #0
   1a3a0:	mvneq	r4, #0
   1a3a4:	beq	1a33c <__assert_fail@plt+0x8d38>
   1a3a8:	mov	r3, #0
   1a3ac:	mov	r1, r6
   1a3b0:	add	r0, sp, #4
   1a3b4:	strb	r3, [r4]
   1a3b8:	bl	1a1cc <__assert_fail@plt+0x8bc8>
   1a3bc:	mov	r3, #47	; 0x2f
   1a3c0:	cmp	r0, #0
   1a3c4:	strb	r3, [r4]
   1a3c8:	bne	1a374 <__assert_fail@plt+0x8d70>
   1a3cc:	add	r4, r4, #1
   1a3d0:	movw	r1, #48020	; 0xbb94
   1a3d4:	movt	r1, #1
   1a3d8:	mov	r0, r4
   1a3dc:	bl	115f8 <strspn@plt>
   1a3e0:	add	r5, r4, r0
   1a3e4:	b	1a298 <__assert_fail@plt+0x8c94>
   1a3e8:	cmp	r6, r5
   1a3ec:	bls	1a404 <__assert_fail@plt+0x8e00>
   1a3f0:	mov	r1, r5
   1a3f4:	add	r0, sp, #4
   1a3f8:	bl	1a1cc <__assert_fail@plt+0x8bc8>
   1a3fc:	cmp	r0, #0
   1a400:	bne	1a374 <__assert_fail@plt+0x8d70>
   1a404:	ldr	r0, [sp, #4]
   1a408:	bl	11568 <fchdir@plt>
   1a40c:	subs	r4, r0, #0
   1a410:	bne	1a374 <__assert_fail@plt+0x8d70>
   1a414:	ldr	r0, [sp, #4]
   1a418:	bl	1a184 <__assert_fail@plt+0x8b80>
   1a41c:	b	1a33c <__assert_fail@plt+0x8d38>
   1a420:	movw	r1, #48204	; 0xbc4c
   1a424:	movt	r1, #1
   1a428:	ldr	r3, [pc, #124]	; 1a4ac <__assert_fail@plt+0x8ea8>
   1a42c:	movw	r0, #48288	; 0xbca0
   1a430:	movt	r0, #1
   1a434:	mov	r2, #179	; 0xb3
   1a438:	bl	11604 <__assert_fail@plt>
   1a43c:	movw	r1, #48204	; 0xbc4c
   1a440:	movt	r1, #1
   1a444:	ldr	r3, [pc, #96]	; 1a4ac <__assert_fail@plt+0x8ea8>
   1a448:	movw	r0, #48260	; 0xbc84
   1a44c:	movt	r0, #1
   1a450:	mov	r2, #162	; 0xa2
   1a454:	bl	11604 <__assert_fail@plt>
   1a458:	movw	r1, #48204	; 0xbc4c
   1a45c:	movt	r1, #1
   1a460:	ldr	r3, [pc, #68]	; 1a4ac <__assert_fail@plt+0x8ea8>
   1a464:	movw	r0, #48272	; 0xbc90
   1a468:	movt	r0, #1
   1a46c:	mov	r2, #163	; 0xa3
   1a470:	bl	11604 <__assert_fail@plt>
   1a474:	movw	r1, #48204	; 0xbc4c
   1a478:	movt	r1, #1
   1a47c:	ldr	r3, [pc, #40]	; 1a4ac <__assert_fail@plt+0x8ea8>
   1a480:	movw	r0, #48240	; 0xbc70
   1a484:	movt	r0, #1
   1a488:	mov	r2, #126	; 0x7e
   1a48c:	bl	11604 <__assert_fail@plt>
   1a490:	movw	r1, #48204	; 0xbc4c
   1a494:	movt	r1, #1
   1a498:	ldr	r3, [pc, #12]	; 1a4ac <__assert_fail@plt+0x8ea8>
   1a49c:	movw	r0, #48248	; 0xbc78
   1a4a0:	movt	r0, #1
   1a4a4:	mov	r2, #127	; 0x7f
   1a4a8:	bl	11604 <__assert_fail@plt>
   1a4ac:	andeq	fp, r1, r0, asr #24
   1a4b0:	push	{lr}		; (str lr, [sp, #-4]!)
   1a4b4:	sub	sp, sp, #268	; 0x10c
   1a4b8:	movw	r2, #257	; 0x101
   1a4bc:	add	r1, sp, #4
   1a4c0:	bl	1a508 <__assert_fail@plt+0x8f04>
   1a4c4:	cmp	r0, #0
   1a4c8:	movne	r0, #0
   1a4cc:	bne	1a500 <__assert_fail@plt+0x8efc>
   1a4d0:	movw	r1, #48308	; 0xbcb4
   1a4d4:	movt	r1, #1
   1a4d8:	add	r0, sp, #4
   1a4dc:	bl	11268 <strcmp@plt>
   1a4e0:	cmp	r0, #0
   1a4e4:	beq	1a500 <__assert_fail@plt+0x8efc>
   1a4e8:	add	r0, sp, #4
   1a4ec:	movw	r1, #48312	; 0xbcb8
   1a4f0:	movt	r1, #1
   1a4f4:	bl	11268 <strcmp@plt>
   1a4f8:	adds	r0, r0, #0
   1a4fc:	movne	r0, #1
   1a500:	add	sp, sp, #268	; 0x10c
   1a504:	pop	{pc}		; (ldr pc, [sp], #4)
   1a508:	strd	r4, [sp, #-16]!
   1a50c:	mov	r5, r1
   1a510:	mov	r1, #0
   1a514:	mov	r4, r2
   1a518:	str	r6, [sp, #8]
   1a51c:	str	lr, [sp, #12]
   1a520:	bl	11520 <setlocale@plt>
   1a524:	subs	r6, r0, #0
   1a528:	beq	1a5a8 <__assert_fail@plt+0x8fa4>
   1a52c:	bl	11460 <strlen@plt>
   1a530:	cmp	r4, r0
   1a534:	bhi	1a554 <__assert_fail@plt+0x8f50>
   1a538:	cmp	r4, #0
   1a53c:	moveq	r0, #34	; 0x22
   1a540:	bne	1a578 <__assert_fail@plt+0x8f74>
   1a544:	ldrd	r4, [sp]
   1a548:	ldr	r6, [sp, #8]
   1a54c:	add	sp, sp, #12
   1a550:	pop	{pc}		; (ldr pc, [sp], #4)
   1a554:	add	r2, r0, #1
   1a558:	mov	r1, r6
   1a55c:	mov	r0, r5
   1a560:	bl	112b0 <memcpy@plt>
   1a564:	ldrd	r4, [sp]
   1a568:	mov	r0, #0
   1a56c:	ldr	r6, [sp, #8]
   1a570:	add	sp, sp, #12
   1a574:	pop	{pc}		; (ldr pc, [sp], #4)
   1a578:	sub	r4, r4, #1
   1a57c:	mov	r1, r6
   1a580:	mov	r2, r4
   1a584:	mov	r0, r5
   1a588:	bl	112b0 <memcpy@plt>
   1a58c:	mov	r3, #0
   1a590:	mov	r0, #34	; 0x22
   1a594:	strb	r3, [r5, r4]
   1a598:	ldrd	r4, [sp]
   1a59c:	ldr	r6, [sp, #8]
   1a5a0:	add	sp, sp, #12
   1a5a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a5a8:	cmp	r4, #0
   1a5ac:	mov	r0, #22
   1a5b0:	strbne	r6, [r5]
   1a5b4:	ldrd	r4, [sp]
   1a5b8:	ldr	r6, [sp, #8]
   1a5bc:	add	sp, sp, #12
   1a5c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a5c4:	mov	r1, #0
   1a5c8:	b	11520 <setlocale@plt>
   1a5cc:	cmp	r3, #0
   1a5d0:	cmpeq	r2, #0
   1a5d4:	bne	1a5ec <__assert_fail@plt+0x8fe8>
   1a5d8:	cmp	r1, #0
   1a5dc:	cmpeq	r0, #0
   1a5e0:	mvnne	r1, #0
   1a5e4:	mvnne	r0, #0
   1a5e8:	b	1a608 <__assert_fail@plt+0x9004>
   1a5ec:	sub	sp, sp, #8
   1a5f0:	push	{sp, lr}
   1a5f4:	bl	1a618 <__assert_fail@plt+0x9014>
   1a5f8:	ldr	lr, [sp, #4]
   1a5fc:	add	sp, sp, #8
   1a600:	pop	{r2, r3}
   1a604:	bx	lr
   1a608:	push	{r1, lr}
   1a60c:	mov	r0, #8
   1a610:	bl	11250 <raise@plt>
   1a614:	pop	{r1, pc}
   1a618:	cmp	r1, r3
   1a61c:	cmpeq	r0, r2
   1a620:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a624:	mov	r4, r0
   1a628:	movcc	r0, #0
   1a62c:	mov	r5, r1
   1a630:	ldr	lr, [sp, #36]	; 0x24
   1a634:	movcc	r1, r0
   1a638:	bcc	1a734 <__assert_fail@plt+0x9130>
   1a63c:	cmp	r3, #0
   1a640:	clzeq	ip, r2
   1a644:	clzne	ip, r3
   1a648:	addeq	ip, ip, #32
   1a64c:	cmp	r5, #0
   1a650:	clzeq	r1, r4
   1a654:	addeq	r1, r1, #32
   1a658:	clzne	r1, r5
   1a65c:	sub	ip, ip, r1
   1a660:	sub	sl, ip, #32
   1a664:	lsl	r9, r3, ip
   1a668:	rsb	fp, ip, #32
   1a66c:	orr	r9, r9, r2, lsl sl
   1a670:	orr	r9, r9, r2, lsr fp
   1a674:	lsl	r8, r2, ip
   1a678:	cmp	r5, r9
   1a67c:	cmpeq	r4, r8
   1a680:	movcc	r0, #0
   1a684:	movcc	r1, r0
   1a688:	bcc	1a6a4 <__assert_fail@plt+0x90a0>
   1a68c:	mov	r0, #1
   1a690:	subs	r4, r4, r8
   1a694:	lsl	r1, r0, sl
   1a698:	orr	r1, r1, r0, lsr fp
   1a69c:	lsl	r0, r0, ip
   1a6a0:	sbc	r5, r5, r9
   1a6a4:	cmp	ip, #0
   1a6a8:	beq	1a734 <__assert_fail@plt+0x9130>
   1a6ac:	lsr	r6, r8, #1
   1a6b0:	orr	r6, r6, r9, lsl #31
   1a6b4:	lsr	r7, r9, #1
   1a6b8:	mov	r2, ip
   1a6bc:	b	1a6e0 <__assert_fail@plt+0x90dc>
   1a6c0:	subs	r3, r4, r6
   1a6c4:	sbc	r8, r5, r7
   1a6c8:	adds	r3, r3, r3
   1a6cc:	adc	r8, r8, r8
   1a6d0:	adds	r4, r3, #1
   1a6d4:	adc	r5, r8, #0
   1a6d8:	subs	r2, r2, #1
   1a6dc:	beq	1a6fc <__assert_fail@plt+0x90f8>
   1a6e0:	cmp	r5, r7
   1a6e4:	cmpeq	r4, r6
   1a6e8:	bcs	1a6c0 <__assert_fail@plt+0x90bc>
   1a6ec:	adds	r4, r4, r4
   1a6f0:	adc	r5, r5, r5
   1a6f4:	subs	r2, r2, #1
   1a6f8:	bne	1a6e0 <__assert_fail@plt+0x90dc>
   1a6fc:	lsr	r3, r4, ip
   1a700:	orr	r3, r3, r5, lsl fp
   1a704:	lsr	r2, r5, ip
   1a708:	orr	r3, r3, r5, lsr sl
   1a70c:	adds	r0, r0, r4
   1a710:	mov	r4, r3
   1a714:	lsl	r3, r2, ip
   1a718:	orr	r3, r3, r4, lsl sl
   1a71c:	lsl	ip, r4, ip
   1a720:	orr	r3, r3, r4, lsr fp
   1a724:	adc	r1, r1, r5
   1a728:	subs	r0, r0, ip
   1a72c:	mov	r5, r2
   1a730:	sbc	r1, r1, r3
   1a734:	cmp	lr, #0
   1a738:	strdne	r4, [lr]
   1a73c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a740:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a744:	mov	r7, r0
   1a748:	ldr	r6, [pc, #72]	; 1a798 <__assert_fail@plt+0x9194>
   1a74c:	ldr	r5, [pc, #72]	; 1a79c <__assert_fail@plt+0x9198>
   1a750:	add	r6, pc, r6
   1a754:	add	r5, pc, r5
   1a758:	sub	r6, r6, r5
   1a75c:	mov	r8, r1
   1a760:	mov	r9, r2
   1a764:	bl	1120c <fstatfs64@plt-0x20>
   1a768:	asrs	r6, r6, #2
   1a76c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a770:	mov	r4, #0
   1a774:	add	r4, r4, #1
   1a778:	ldr	r3, [r5], #4
   1a77c:	mov	r2, r9
   1a780:	mov	r1, r8
   1a784:	mov	r0, r7
   1a788:	blx	r3
   1a78c:	cmp	r6, r4
   1a790:	bne	1a774 <__assert_fail@plt+0x9170>
   1a794:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a798:			; <UNDEFINED> instruction: 0x000117b4
   1a79c:	andeq	r1, r1, ip, lsr #15
   1a7a0:	bx	lr
   1a7a4:	ldr	r3, [pc, #12]	; 1a7b8 <__assert_fail@plt+0x91b4>
   1a7a8:	mov	r1, #0
   1a7ac:	add	r3, pc, r3
   1a7b0:	ldr	r2, [r3]
   1a7b4:	b	1149c <__cxa_atexit@plt>
   1a7b8:	andeq	r1, r1, ip, lsr #19

Disassembly of section .fini:

0001a7bc <.fini>:
   1a7bc:	push	{r3, lr}
   1a7c0:	pop	{r3, pc}
