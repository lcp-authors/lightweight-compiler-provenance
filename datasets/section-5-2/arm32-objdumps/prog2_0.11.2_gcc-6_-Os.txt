
../repos/prog2/0.11.2:     file format elf32-littlearm


Disassembly of section .init:

000106ac <.init>:
   106ac:	push	{r3, lr}
   106b0:	bl	1082c <_start@@Base+0x3c>
   106b4:	pop	{r3, pc}

Disassembly of section .plt:

000106b8 <strcmp@plt-0x14>:
   106b8:	push	{lr}		; (str lr, [sp, #-4]!)
   106bc:	ldr	lr, [pc, #4]	; 106c8 <strcmp@plt-0x4>
   106c0:	add	lr, pc, lr
   106c4:	ldr	pc, [lr, #8]!
   106c8:	andeq	r0, r1, r8, lsr r9

000106cc <strcmp@plt>:
   106cc:	add	ip, pc, #0, 12
   106d0:	add	ip, ip, #16, 20	; 0x10000
   106d4:	ldr	pc, [ip, #2360]!	; 0x938

000106d8 <strcat@plt>:
   106d8:	add	ip, pc, #0, 12
   106dc:	add	ip, ip, #16, 20	; 0x10000
   106e0:	ldr	pc, [ip, #2352]!	; 0x930

000106e4 <strcpy@plt>:
   106e4:	add	ip, pc, #0, 12
   106e8:	add	ip, ip, #16, 20	; 0x10000
   106ec:	ldr	pc, [ip, #2344]!	; 0x928

000106f0 <puts@plt>:
   106f0:	add	ip, pc, #0, 12
   106f4:	add	ip, ip, #16, 20	; 0x10000
   106f8:	ldr	pc, [ip, #2336]!	; 0x920

000106fc <__libc_start_main@plt>:
   106fc:	add	ip, pc, #0, 12
   10700:	add	ip, ip, #16, 20	; 0x10000
   10704:	ldr	pc, [ip, #2328]!	; 0x918

00010708 <__gmon_start__@plt>:
   10708:	add	ip, pc, #0, 12
   1070c:	add	ip, ip, #16, 20	; 0x10000
   10710:	ldr	pc, [ip, #2320]!	; 0x910

00010714 <strlen@plt>:
   10714:	add	ip, pc, #0, 12
   10718:	add	ip, ip, #16, 20	; 0x10000
   1071c:	ldr	pc, [ip, #2312]!	; 0x908

00010720 <memset@plt>:
   10720:	add	ip, pc, #0, 12
   10724:	add	ip, ip, #16, 20	; 0x10000
   10728:	ldr	pc, [ip, #2304]!	; 0x900

0001072c <__isoc99_scanf@plt>:
   1072c:	add	ip, pc, #0, 12
   10730:	add	ip, ip, #16, 20	; 0x10000
   10734:	ldr	pc, [ip, #2296]!	; 0x8f8

00010738 <abort@plt>:
   10738:	add	ip, pc, #0, 12
   1073c:	add	ip, ip, #16, 20	; 0x10000
   10740:	ldr	pc, [ip, #2288]!	; 0x8f0

Disassembly of section .text:

00010744 <main@@Base>:
   10744:	push	{r4, lr}
   10748:	sub	sp, sp, #104	; 0x68
   1074c:	mov	r1, #0
   10750:	mov	r2, #22
   10754:	add	r0, sp, #24
   10758:	str	r1, [sp, #20]
   1075c:	bl	10720 <memset@plt>
   10760:	add	r1, sp, #8
   10764:	ldr	r0, [pc, #124]	; 107e8 <main@@Base+0xa4>
   10768:	bl	1072c <__isoc99_scanf@plt>
   1076c:	ldrb	r3, [sp, #8]
   10770:	cmp	r3, #46	; 0x2e
   10774:	beq	107dc <main@@Base+0x98>
   10778:	add	r1, sp, #4
   1077c:	ldr	r0, [pc, #104]	; 107ec <main@@Base+0xa8>
   10780:	bl	1072c <__isoc99_scanf@plt>
   10784:	add	r1, sp, #20
   10788:	add	r0, sp, #8
   1078c:	ldr	r2, [sp, #4]
   10790:	bl	109b8 <StringSet@@Base>
   10794:	add	r1, sp, #48	; 0x30
   10798:	add	r0, sp, #20
   1079c:	bl	10918 <R_ShiftString@@Base>
   107a0:	add	r1, sp, #48	; 0x30
   107a4:	add	r0, sp, #20
   107a8:	bl	106cc <strcmp@plt>
   107ac:	mov	r4, r0
   107b0:	add	r0, sp, #20
   107b4:	bl	106f0 <puts@plt>
   107b8:	add	r1, sp, #20
   107bc:	add	r0, sp, #76	; 0x4c
   107c0:	bl	106e4 <strcpy@plt>
   107c4:	add	r1, sp, #20
   107c8:	add	r0, sp, #76	; 0x4c
   107cc:	bl	10968 <L_ShiftString@@Base>
   107d0:	cmp	r4, #0
   107d4:	bne	107a0 <main@@Base+0x5c>
   107d8:	b	10760 <main@@Base+0x1c>
   107dc:	mov	r0, #0
   107e0:	add	sp, sp, #104	; 0x68
   107e4:	pop	{r4, pc}
   107e8:	andeq	r0, r1, ip, ror #20
   107ec:	andeq	r0, r1, pc, ror #20

000107f0 <_start@@Base>:
   107f0:	mov	fp, #0
   107f4:	mov	lr, #0
   107f8:	pop	{r1}		; (ldr r1, [sp], #4)
   107fc:	mov	r2, sp
   10800:	push	{r2}		; (str r2, [sp, #-4]!)
   10804:	push	{r0}		; (str r0, [sp, #-4]!)
   10808:	ldr	ip, [pc, #16]	; 10820 <_start@@Base+0x30>
   1080c:	push	{ip}		; (str ip, [sp, #-4]!)
   10810:	ldr	r0, [pc, #12]	; 10824 <_start@@Base+0x34>
   10814:	ldr	r3, [pc, #12]	; 10828 <_start@@Base+0x38>
   10818:	bl	106fc <__libc_start_main@plt>
   1081c:	bl	10738 <abort@plt>
   10820:	andeq	r0, r1, ip, asr sl
   10824:	andeq	r0, r1, r4, asr #14
   10828:	strdeq	r0, [r1], -ip
   1082c:	ldr	r3, [pc, #20]	; 10848 <_start@@Base+0x58>
   10830:	ldr	r2, [pc, #20]	; 1084c <_start@@Base+0x5c>
   10834:	add	r3, pc, r3
   10838:	ldr	r2, [r3, r2]
   1083c:	cmp	r2, #0
   10840:	bxeq	lr
   10844:	b	10708 <__gmon_start__@plt>
   10848:	andeq	r0, r1, r4, asr #15
   1084c:	andeq	r0, r0, r4, lsr r0
   10850:	ldr	r3, [pc, #28]	; 10874 <_start@@Base+0x84>
   10854:	ldr	r0, [pc, #28]	; 10878 <_start@@Base+0x88>
   10858:	sub	r3, r3, r0
   1085c:	cmp	r3, #6
   10860:	bxls	lr
   10864:	ldr	r3, [pc, #16]	; 1087c <_start@@Base+0x8c>
   10868:	cmp	r3, #0
   1086c:	bxeq	lr
   10870:	bx	r3
   10874:	andeq	r1, r2, r3, asr #32
   10878:	andeq	r1, r2, r0, asr #32
   1087c:	andeq	r0, r0, r0
   10880:	ldr	r1, [pc, #36]	; 108ac <_start@@Base+0xbc>
   10884:	ldr	r0, [pc, #36]	; 108b0 <_start@@Base+0xc0>
   10888:	sub	r1, r1, r0
   1088c:	asr	r1, r1, #2
   10890:	add	r1, r1, r1, lsr #31
   10894:	asrs	r1, r1, #1
   10898:	bxeq	lr
   1089c:	ldr	r3, [pc, #16]	; 108b4 <_start@@Base+0xc4>
   108a0:	cmp	r3, #0
   108a4:	bxeq	lr
   108a8:	bx	r3
   108ac:	andeq	r1, r2, r0, asr #32
   108b0:	andeq	r1, r2, r0, asr #32
   108b4:	andeq	r0, r0, r0
   108b8:	push	{r4, lr}
   108bc:	ldr	r4, [pc, #24]	; 108dc <_start@@Base+0xec>
   108c0:	ldrb	r3, [r4]
   108c4:	cmp	r3, #0
   108c8:	popne	{r4, pc}
   108cc:	bl	10850 <_start@@Base+0x60>
   108d0:	mov	r3, #1
   108d4:	strb	r3, [r4]
   108d8:	pop	{r4, pc}
   108dc:	andeq	r1, r2, r0, asr #32
   108e0:	ldr	r0, [pc, #40]	; 10910 <_start@@Base+0x120>
   108e4:	ldr	r3, [r0]
   108e8:	cmp	r3, #0
   108ec:	bne	108f4 <_start@@Base+0x104>
   108f0:	b	10880 <_start@@Base+0x90>
   108f4:	ldr	r3, [pc, #24]	; 10914 <_start@@Base+0x124>
   108f8:	cmp	r3, #0
   108fc:	beq	108f0 <_start@@Base+0x100>
   10900:	push	{r4, lr}
   10904:	blx	r3
   10908:	pop	{r4, lr}
   1090c:	b	10880 <_start@@Base+0x90>
   10910:	andeq	r0, r2, r4, lsl pc
   10914:	andeq	r0, r0, r0

00010918 <R_ShiftString@@Base>:
   10918:	push	{r4, r5, r6, r7, r8, lr}
   1091c:	mov	r6, r0
   10920:	mov	r5, r1
   10924:	bl	10714 <strlen@plt>
   10928:	mov	r4, r5
   1092c:	sub	r7, r6, #1
   10930:	add	r0, r6, r0
   10934:	ldrb	r3, [r0, #-1]
   10938:	strb	r3, [r4], #1
   1093c:	mov	r0, r6
   10940:	bl	10714 <strlen@plt>
   10944:	sub	r3, r4, r5
   10948:	cmp	r0, r3
   1094c:	bhi	1095c <R_ShiftString@@Base+0x44>
   10950:	mov	r2, #0
   10954:	strb	r2, [r5, r3]
   10958:	pop	{r4, r5, r6, r7, r8, pc}
   1095c:	ldrb	r3, [r7, #1]!
   10960:	strb	r3, [r4], #1
   10964:	b	1093c <R_ShiftString@@Base+0x24>

00010968 <L_ShiftString@@Base>:
   10968:	push	{r4, r5, r6, r7, r8, lr}
   1096c:	mov	r5, r1
   10970:	mov	r6, r0
   10974:	bl	10714 <strlen@plt>
   10978:	mov	r4, r6
   1097c:	sub	r7, r5, #1
   10980:	ldrb	r3, [r4], #1
   10984:	add	r0, r5, r0
   10988:	strb	r3, [r0, #-1]
   1098c:	mov	r0, r6
   10990:	bl	10714 <strlen@plt>
   10994:	sub	r3, r4, r6
   10998:	cmp	r0, r3
   1099c:	bhi	109ac <L_ShiftString@@Base+0x44>
   109a0:	mov	r2, #0
   109a4:	strb	r2, [r5, r3]
   109a8:	pop	{r4, r5, r6, r7, r8, pc}
   109ac:	ldrb	r3, [r4], #1
   109b0:	strb	r3, [r7, #1]!
   109b4:	b	1098c <L_ShiftString@@Base+0x24>

000109b8 <StringSet@@Base>:
   109b8:	push	{r4, r5, r6, r7, r8, lr}
   109bc:	mov	r5, r1
   109c0:	mov	r7, r0
   109c4:	ldr	r1, [pc, #44]	; 109f8 <StringSet@@Base+0x40>
   109c8:	mov	r0, r5
   109cc:	mov	r6, r2
   109d0:	bl	106e4 <strcpy@plt>
   109d4:	mov	r4, #0
   109d8:	cmp	r4, r6
   109dc:	blt	109e4 <StringSet@@Base+0x2c>
   109e0:	pop	{r4, r5, r6, r7, r8, pc}
   109e4:	mov	r1, r7
   109e8:	mov	r0, r5
   109ec:	bl	106d8 <strcat@plt>
   109f0:	add	r4, r4, #1
   109f4:	b	109d8 <StringSet@@Base+0x20>
   109f8:	andeq	r0, r1, r1, ror sl

000109fc <__libc_csu_init@@Base>:
   109fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a00:	mov	r7, r0
   10a04:	ldr	r6, [pc, #72]	; 10a54 <__libc_csu_init@@Base+0x58>
   10a08:	ldr	r5, [pc, #72]	; 10a58 <__libc_csu_init@@Base+0x5c>
   10a0c:	add	r6, pc, r6
   10a10:	add	r5, pc, r5
   10a14:	sub	r6, r6, r5
   10a18:	mov	r8, r1
   10a1c:	mov	r9, r2
   10a20:	bl	106ac <strcmp@plt-0x20>
   10a24:	asrs	r6, r6, #2
   10a28:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a2c:	mov	r4, #0
   10a30:	add	r4, r4, #1
   10a34:	ldr	r3, [r5], #4
   10a38:	mov	r2, r9
   10a3c:	mov	r1, r8
   10a40:	mov	r0, r7
   10a44:	blx	r3
   10a48:	cmp	r6, r4
   10a4c:	bne	10a30 <__libc_csu_init@@Base+0x34>
   10a50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a54:	strdeq	r0, [r1], -ip
   10a58:	strdeq	r0, [r1], -r4

00010a5c <__libc_csu_fini@@Base>:
   10a5c:	bx	lr

Disassembly of section .fini:

00010a60 <.fini>:
   10a60:	push	{r3, lr}
   10a64:	pop	{r3, pc}
