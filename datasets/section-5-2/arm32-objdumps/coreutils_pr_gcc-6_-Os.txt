
../repos/coreutils/src/pr:     file format elf32-littlearm


Disassembly of section .init:

00011088 <.init>:
   11088:	push	{r3, lr}
   1108c:	bl	11d04 <__assert_fail@plt+0x8f0>
   11090:	pop	{r3, pc}

Disassembly of section .plt:

00011094 <fdopen@plt-0x14>:
   11094:	push	{lr}		; (str lr, [sp, #-4]!)
   11098:	ldr	lr, [pc, #4]	; 110a4 <fdopen@plt-0x4>
   1109c:	add	lr, pc, lr
   110a0:	ldr	pc, [lr, #8]!
   110a4:	andeq	sl, r1, ip, asr pc

000110a8 <fdopen@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #106496	; 0x1a000
   110b0:	ldr	pc, [ip, #3932]!	; 0xf5c

000110b4 <calloc@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #106496	; 0x1a000
   110bc:	ldr	pc, [ip, #3924]!	; 0xf54

000110c0 <fputs_unlocked@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #106496	; 0x1a000
   110c8:	ldr	pc, [ip, #3916]!	; 0xf4c

000110cc <raise@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #106496	; 0x1a000
   110d4:	ldr	pc, [ip, #3908]!	; 0xf44

000110d8 <gmtime_r@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #106496	; 0x1a000
   110e0:	ldr	pc, [ip, #3900]!	; 0xf3c

000110e4 <strcmp@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #106496	; 0x1a000
   110ec:	ldr	pc, [ip, #3892]!	; 0xf34

000110f0 <strtol@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #106496	; 0x1a000
   110f8:	ldr	pc, [ip, #3884]!	; 0xf2c

000110fc <posix_fadvise64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #106496	; 0x1a000
   11104:	ldr	pc, [ip, #3876]!	; 0xf24

00011108 <mktime@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #106496	; 0x1a000
   11110:	ldr	pc, [ip, #3868]!	; 0xf1c

00011114 <fflush@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #106496	; 0x1a000
   1111c:	ldr	pc, [ip, #3860]!	; 0xf14

00011120 <wcwidth@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #106496	; 0x1a000
   11128:	ldr	pc, [ip, #3852]!	; 0xf0c

0001112c <free@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #106496	; 0x1a000
   11134:	ldr	pc, [ip, #3844]!	; 0xf04

00011138 <clock_gettime@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #106496	; 0x1a000
   11140:	ldr	pc, [ip, #3836]!	; 0xefc

00011144 <_exit@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #106496	; 0x1a000
   1114c:	ldr	pc, [ip, #3828]!	; 0xef4

00011150 <memcpy@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #106496	; 0x1a000
   11158:	ldr	pc, [ip, #3820]!	; 0xeec

0001115c <mbsinit@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #106496	; 0x1a000
   11164:	ldr	pc, [ip, #3812]!	; 0xee4

00011168 <memcmp@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #106496	; 0x1a000
   11170:	ldr	pc, [ip, #3804]!	; 0xedc

00011174 <fputc_unlocked@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #106496	; 0x1a000
   1117c:	ldr	pc, [ip, #3796]!	; 0xed4

00011180 <getc_unlocked@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #106496	; 0x1a000
   11188:	ldr	pc, [ip, #3788]!	; 0xecc

0001118c <dcgettext@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #106496	; 0x1a000
   11194:	ldr	pc, [ip, #3780]!	; 0xec4

00011198 <realloc@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #106496	; 0x1a000
   111a0:	ldr	pc, [ip, #3772]!	; 0xebc

000111a4 <localtime_r@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #106496	; 0x1a000
   111ac:	ldr	pc, [ip, #3764]!	; 0xeb4

000111b0 <textdomain@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #106496	; 0x1a000
   111b8:	ldr	pc, [ip, #3756]!	; 0xeac

000111bc <iswcntrl@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #106496	; 0x1a000
   111c4:	ldr	pc, [ip, #3748]!	; 0xea4

000111c8 <iswprint@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #106496	; 0x1a000
   111d0:	ldr	pc, [ip, #3740]!	; 0xe9c

000111d4 <tzset@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #106496	; 0x1a000
   111dc:	ldr	pc, [ip, #3732]!	; 0xe94

000111e0 <__fxstat64@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #106496	; 0x1a000
   111e8:	ldr	pc, [ip, #3724]!	; 0xe8c

000111ec <lseek64@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #106496	; 0x1a000
   111f4:	ldr	pc, [ip, #3716]!	; 0xe84

000111f8 <__ctype_get_mb_cur_max@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #106496	; 0x1a000
   11200:	ldr	pc, [ip, #3708]!	; 0xe7c

00011204 <__fpending@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #106496	; 0x1a000
   1120c:	ldr	pc, [ip, #3700]!	; 0xe74

00011210 <ferror_unlocked@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #106496	; 0x1a000
   11218:	ldr	pc, [ip, #3692]!	; 0xe6c

0001121c <mbrtowc@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #106496	; 0x1a000
   11224:	ldr	pc, [ip, #3684]!	; 0xe64

00011228 <error@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #106496	; 0x1a000
   11230:	ldr	pc, [ip, #3676]!	; 0xe5c

00011234 <getenv@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #106496	; 0x1a000
   1123c:	ldr	pc, [ip, #3668]!	; 0xe54

00011240 <malloc@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #106496	; 0x1a000
   11248:	ldr	pc, [ip, #3660]!	; 0xe4c

0001124c <__libc_start_main@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #106496	; 0x1a000
   11254:	ldr	pc, [ip, #3652]!	; 0xe44

00011258 <strftime@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #106496	; 0x1a000
   11260:	ldr	pc, [ip, #3644]!	; 0xe3c

00011264 <__freading@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #106496	; 0x1a000
   1126c:	ldr	pc, [ip, #3636]!	; 0xe34

00011270 <__ctype_tolower_loc@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #106496	; 0x1a000
   11278:	ldr	pc, [ip, #3628]!	; 0xe2c

0001127c <__ctype_toupper_loc@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #106496	; 0x1a000
   11284:	ldr	pc, [ip, #3620]!	; 0xe24

00011288 <__gmon_start__@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #106496	; 0x1a000
   11290:	ldr	pc, [ip, #3612]!	; 0xe1c

00011294 <getopt_long@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #106496	; 0x1a000
   1129c:	ldr	pc, [ip, #3604]!	; 0xe14

000112a0 <__ctype_b_loc@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #106496	; 0x1a000
   112a8:	ldr	pc, [ip, #3596]!	; 0xe0c

000112ac <exit@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #106496	; 0x1a000
   112b4:	ldr	pc, [ip, #3588]!	; 0xe04

000112b8 <strlen@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #106496	; 0x1a000
   112c0:	ldr	pc, [ip, #3580]!	; 0xdfc

000112c4 <strchr@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #106496	; 0x1a000
   112cc:	ldr	pc, [ip, #3572]!	; 0xdf4

000112d0 <setenv@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #106496	; 0x1a000
   112d8:	ldr	pc, [ip, #3564]!	; 0xdec

000112dc <ungetc@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #106496	; 0x1a000
   112e4:	ldr	pc, [ip, #3556]!	; 0xde4

000112e8 <__errno_location@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #106496	; 0x1a000
   112f0:	ldr	pc, [ip, #3548]!	; 0xddc

000112f4 <__sprintf_chk@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #106496	; 0x1a000
   112fc:	ldr	pc, [ip, #3540]!	; 0xdd4

00011300 <__cxa_atexit@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #106496	; 0x1a000
   11308:	ldr	pc, [ip, #3532]!	; 0xdcc

0001130c <memset@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #106496	; 0x1a000
   11314:	ldr	pc, [ip, #3524]!	; 0xdc4

00011318 <__printf_chk@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #106496	; 0x1a000
   11320:	ldr	pc, [ip, #3516]!	; 0xdbc

00011324 <fileno@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #106496	; 0x1a000
   1132c:	ldr	pc, [ip, #3508]!	; 0xdb4

00011330 <strtoumax@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #106496	; 0x1a000
   11338:	ldr	pc, [ip, #3500]!	; 0xdac

0001133c <__fprintf_chk@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #106496	; 0x1a000
   11344:	ldr	pc, [ip, #3492]!	; 0xda4

00011348 <strtoimax@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #106496	; 0x1a000
   11350:	ldr	pc, [ip, #3484]!	; 0xd9c

00011354 <fclose@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #106496	; 0x1a000
   1135c:	ldr	pc, [ip, #3476]!	; 0xd94

00011360 <fseeko64@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #106496	; 0x1a000
   11368:	ldr	pc, [ip, #3468]!	; 0xd8c

0001136c <fcntl64@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #106496	; 0x1a000
   11374:	ldr	pc, [ip, #3460]!	; 0xd84

00011378 <setlocale@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #106496	; 0x1a000
   11380:	ldr	pc, [ip, #3452]!	; 0xd7c

00011384 <strrchr@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #106496	; 0x1a000
   1138c:	ldr	pc, [ip, #3444]!	; 0xd74

00011390 <nl_langinfo@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #106496	; 0x1a000
   11398:	ldr	pc, [ip, #3436]!	; 0xd6c

0001139c <timegm@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #106496	; 0x1a000
   113a4:	ldr	pc, [ip, #3428]!	; 0xd64

000113a8 <clearerr_unlocked@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #106496	; 0x1a000
   113b0:	ldr	pc, [ip, #3420]!	; 0xd5c

000113b4 <fopen64@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #106496	; 0x1a000
   113bc:	ldr	pc, [ip, #3412]!	; 0xd54

000113c0 <bindtextdomain@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #106496	; 0x1a000
   113c8:	ldr	pc, [ip, #3404]!	; 0xd4c

000113cc <unsetenv@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #106496	; 0x1a000
   113d4:	ldr	pc, [ip, #3396]!	; 0xd44

000113d8 <fputs@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #106496	; 0x1a000
   113e0:	ldr	pc, [ip, #3388]!	; 0xd3c

000113e4 <strncmp@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #106496	; 0x1a000
   113ec:	ldr	pc, [ip, #3380]!	; 0xd34

000113f0 <abort@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #106496	; 0x1a000
   113f8:	ldr	pc, [ip, #3372]!	; 0xd2c

000113fc <close@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #106496	; 0x1a000
   11404:	ldr	pc, [ip, #3364]!	; 0xd24

00011408 <putchar_unlocked@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #106496	; 0x1a000
   11410:	ldr	pc, [ip, #3356]!	; 0xd1c

00011414 <__assert_fail@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #106496	; 0x1a000
   1141c:	ldr	pc, [ip, #3348]!	; 0xd14

Disassembly of section .text:

00011420 <.text>:
   11420:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11424:	sub	sp, sp, #52	; 0x34
   11428:	mov	r7, #0
   1142c:	str	r0, [sp, #16]
   11430:	ldr	r0, [r1]
   11434:	str	r1, [sp, #24]
   11438:	str	r7, [sp, #36]	; 0x24
   1143c:	bl	1600c <__assert_fail@plt+0x4bf8>
   11440:	ldr	r1, [pc, #2024]	; 11c30 <__assert_fail@plt+0x81c>
   11444:	mov	r0, #6
   11448:	bl	11378 <setlocale@plt>
   1144c:	ldr	r1, [pc, #2016]	; 11c34 <__assert_fail@plt+0x820>
   11450:	ldr	r0, [pc, #2016]	; 11c38 <__assert_fail@plt+0x824>
   11454:	bl	113c0 <bindtextdomain@plt>
   11458:	ldr	r0, [pc, #2008]	; 11c38 <__assert_fail@plt+0x824>
   1145c:	bl	111b0 <textdomain@plt>
   11460:	ldr	r0, [pc, #2004]	; 11c3c <__assert_fail@plt+0x828>
   11464:	bl	19e08 <__assert_fail@plt+0x89f4>
   11468:	ldr	r3, [sp, #16]
   1146c:	cmp	r3, #1
   11470:	ble	11484 <__assert_fail@plt+0x70>
   11474:	mov	r1, #4
   11478:	sub	r0, r3, #1
   1147c:	bl	180f8 <__assert_fail@plt+0x6ce4>
   11480:	mov	r7, r0
   11484:	mov	r9, #0
   11488:	ldr	r8, [pc, #1968]	; 11c40 <__assert_fail@plt+0x82c>
   1148c:	mov	r6, r9
   11490:	mov	r5, r9
   11494:	mov	fp, r9
   11498:	mov	sl, r9
   1149c:	str	r9, [sp, #20]
   114a0:	mvn	r3, #0
   114a4:	str	r3, [sp, #40]	; 0x28
   114a8:	add	r3, sp, #40	; 0x28
   114ac:	str	r3, [sp]
   114b0:	ldr	r3, [pc, #1932]	; 11c44 <__assert_fail@plt+0x830>
   114b4:	ldr	r1, [sp, #24]
   114b8:	add	r2, r3, #488	; 0x1e8
   114bc:	ldr	r0, [sp, #16]
   114c0:	bl	11294 <getopt_long@plt>
   114c4:	cmn	r0, #1
   114c8:	mov	r4, r0
   114cc:	beq	119e8 <__assert_fail@plt+0x5d4>
   114d0:	sub	r3, r0, #48	; 0x30
   114d4:	cmp	r3, #9
   114d8:	bhi	11518 <__assert_fail@plt+0x104>
   114dc:	ldr	r2, [sp, #36]	; 0x24
   114e0:	add	r3, r9, #1
   114e4:	cmp	r3, r2
   114e8:	bcc	11504 <__assert_fail@plt+0xf0>
   114ec:	mov	r0, r6
   114f0:	add	r1, sp, #36	; 0x24
   114f4:	str	r3, [sp, #28]
   114f8:	bl	18188 <__assert_fail@plt+0x6d74>
   114fc:	ldr	r3, [sp, #28]
   11500:	mov	r6, r0
   11504:	mov	r2, #0
   11508:	strb	r4, [r6, r9]
   1150c:	strb	r2, [r6, r3]
   11510:	mov	r9, r3
   11514:	b	114a0 <__assert_fail@plt+0x8c>
   11518:	cmp	r0, #101	; 0x65
   1151c:	beq	11804 <__assert_fail@plt+0x3f0>
   11520:	bgt	115f8 <__assert_fail@plt+0x1e4>
   11524:	cmp	r0, #78	; 0x4e
   11528:	beq	118bc <__assert_fail@plt+0x4a8>
   1152c:	ldr	r3, [pc, #1812]	; 11c48 <__assert_fail@plt+0x834>
   11530:	bgt	11584 <__assert_fail@plt+0x170>
   11534:	cmp	r0, #1
   11538:	beq	11718 <__assert_fail@plt+0x304>
   1153c:	bgt	1155c <__assert_fail@plt+0x148>
   11540:	cmn	r0, #3
   11544:	beq	119ac <__assert_fail@plt+0x598>
   11548:	cmn	r0, #2
   1154c:	moveq	r0, #0
   11550:	beq	11558 <__assert_fail@plt+0x144>
   11554:	mov	r0, #1
   11558:	bl	13ed4 <__assert_fail@plt+0x2ac0>
   1155c:	cmp	r0, #70	; 0x46
   11560:	beq	11834 <__assert_fail@plt+0x420>
   11564:	cmp	r0, #74	; 0x4a
   11568:	beq	11874 <__assert_fail@plt+0x460>
   1156c:	cmp	r0, #68	; 0x44
   11570:	bne	11554 <__assert_fail@plt+0x140>
   11574:	ldr	r2, [pc, #1744]	; 11c4c <__assert_fail@plt+0x838>
   11578:	ldr	r2, [r2]
   1157c:	str	r2, [r3, #52]	; 0x34
   11580:	b	11734 <__assert_fail@plt+0x320>
   11584:	cmp	r0, #97	; 0x61
   11588:	beq	117f0 <__assert_fail@plt+0x3dc>
   1158c:	bgt	115dc <__assert_fail@plt+0x1c8>
   11590:	cmp	r0, #84	; 0x54
   11594:	beq	11954 <__assert_fail@plt+0x540>
   11598:	cmp	r0, #87	; 0x57
   1159c:	ldr	r2, [pc, #1704]	; 11c4c <__assert_fail@plt+0x838>
   115a0:	beq	11970 <__assert_fail@plt+0x55c>
   115a4:	cmp	r0, #83	; 0x53
   115a8:	bne	11554 <__assert_fail@plt+0x140>
   115ac:	ldr	r1, [pc, #1660]	; 11c30 <__assert_fail@plt+0x81c>
   115b0:	ldr	r0, [r2]
   115b4:	mov	r5, #0
   115b8:	str	r1, [r8, #16]
   115bc:	cmp	r0, r5
   115c0:	mov	r1, #1
   115c4:	str	r5, [r3, #32]
   115c8:	strb	r1, [r3, #144]	; 0x90
   115cc:	moveq	r5, r0
   115d0:	beq	11734 <__assert_fail@plt+0x320>
   115d4:	bl	120e4 <__assert_fail@plt+0xcd0>
   115d8:	b	11734 <__assert_fail@plt+0x320>
   115dc:	cmp	r0, #99	; 0x63
   115e0:	mov	r2, #1
   115e4:	strbeq	r2, [r3, #110]	; 0x6e
   115e8:	beq	11734 <__assert_fail@plt+0x320>
   115ec:	strble	r2, [r3, #177]	; 0xb1
   115f0:	strbgt	r2, [r3, #176]	; 0xb0
   115f4:	b	11734 <__assert_fail@plt+0x320>
   115f8:	cmp	r0, #111	; 0x6f
   115fc:	beq	118e8 <__assert_fail@plt+0x4d4>
   11600:	bgt	11678 <__assert_fail@plt+0x264>
   11604:	cmp	r0, #105	; 0x69
   11608:	beq	11844 <__assert_fail@plt+0x430>
   1160c:	bgt	11634 <__assert_fail@plt+0x220>
   11610:	cmp	r0, #102	; 0x66
   11614:	beq	11834 <__assert_fail@plt+0x420>
   11618:	cmp	r0, #104	; 0x68
   1161c:	bne	11554 <__assert_fail@plt+0x140>
   11620:	ldr	r3, [pc, #1572]	; 11c4c <__assert_fail@plt+0x838>
   11624:	ldr	r2, [r3]
   11628:	ldr	r3, [pc, #1560]	; 11c48 <__assert_fail@plt+0x834>
   1162c:	str	r2, [r3, #60]	; 0x3c
   11630:	b	11734 <__assert_fail@plt+0x320>
   11634:	cmp	r0, #109	; 0x6d
   11638:	beq	11880 <__assert_fail@plt+0x46c>
   1163c:	ldr	r3, [pc, #1544]	; 11c4c <__assert_fail@plt+0x838>
   11640:	bgt	11890 <__assert_fail@plt+0x47c>
   11644:	cmp	r0, #108	; 0x6c
   11648:	bne	11554 <__assert_fail@plt+0x140>
   1164c:	mov	r2, #5
   11650:	ldr	r1, [pc, #1528]	; 11c50 <__assert_fail@plt+0x83c>
   11654:	mov	r0, #0
   11658:	ldr	r4, [r3]
   1165c:	bl	1118c <dcgettext@plt>
   11660:	ldr	r2, [pc, #1516]	; 11c54 <__assert_fail@plt+0x840>
   11664:	mov	r1, #1
   11668:	mov	r3, r0
   1166c:	mov	r0, r4
   11670:	bl	12118 <__assert_fail@plt+0xd04>
   11674:	b	11734 <__assert_fail@plt+0x320>
   11678:	cmp	r0, #118	; 0x76
   1167c:	beq	11960 <__assert_fail@plt+0x54c>
   11680:	bgt	116ac <__assert_fail@plt+0x298>
   11684:	cmp	r0, #115	; 0x73
   11688:	ldr	r3, [pc, #1464]	; 11c48 <__assert_fail@plt+0x834>
   1168c:	beq	11910 <__assert_fail@plt+0x4fc>
   11690:	cmp	r0, #116	; 0x74
   11694:	beq	11940 <__assert_fail@plt+0x52c>
   11698:	cmp	r0, #114	; 0x72
   1169c:	bne	11554 <__assert_fail@plt+0x140>
   116a0:	mov	r2, #1
   116a4:	strb	r2, [r3, #127]	; 0x7f
   116a8:	b	11734 <__assert_fail@plt+0x320>
   116ac:	cmp	r0, #256	; 0x100
   116b0:	ldr	r9, [pc, #1428]	; 11c4c <__assert_fail@plt+0x838>
   116b4:	beq	117d4 <__assert_fail@plt+0x3c0>
   116b8:	ldr	r3, [pc, #1432]	; 11c58 <__assert_fail@plt+0x844>
   116bc:	cmp	r0, r3
   116c0:	beq	11764 <__assert_fail@plt+0x350>
   116c4:	cmp	r0, #119	; 0x77
   116c8:	bne	11554 <__assert_fail@plt+0x140>
   116cc:	mov	r2, #5
   116d0:	ldr	r1, [pc, #1412]	; 11c5c <__assert_fail@plt+0x848>
   116d4:	mov	r0, #0
   116d8:	ldr	r4, [r9]
   116dc:	bl	1118c <dcgettext@plt>
   116e0:	add	r2, sp, #44	; 0x2c
   116e4:	mov	r1, #1
   116e8:	mov	r3, r0
   116ec:	mov	r0, r4
   116f0:	bl	12118 <__assert_fail@plt+0xd04>
   116f4:	ldr	r3, [pc, #1356]	; 11c48 <__assert_fail@plt+0x834>
   116f8:	ldrb	r3, [r3, #124]	; 0x7c
   116fc:	cmp	r3, #0
   11700:	ldreq	r3, [sp, #44]	; 0x2c
   11704:	streq	r3, [r8, #20]
   11708:	mov	r3, #1
   1170c:	str	r3, [sp, #20]
   11710:	mov	fp, r3
   11714:	b	11734 <__assert_fail@plt+0x320>
   11718:	ldrd	r2, [r3, #24]
   1171c:	ldr	r4, [pc, #1320]	; 11c4c <__assert_fail@plt+0x838>
   11720:	orrs	r3, r2, r3
   11724:	beq	1173c <__assert_fail@plt+0x328>
   11728:	ldr	r3, [r4]
   1172c:	str	r3, [r7, sl, lsl #2]
   11730:	add	sl, sl, #1
   11734:	mov	r3, #0
   11738:	b	11510 <__assert_fail@plt+0xfc>
   1173c:	ldr	r2, [r4]
   11740:	ldrb	r1, [r2]
   11744:	cmp	r1, #43	; 0x2b
   11748:	bne	11728 <__assert_fail@plt+0x314>
   1174c:	add	r2, r2, #1
   11750:	mvn	r0, #1
   11754:	bl	11fd4 <__assert_fail@plt+0xbc0>
   11758:	cmp	r0, #0
   1175c:	bne	11734 <__assert_fail@plt+0x320>
   11760:	b	11728 <__assert_fail@plt+0x314>
   11764:	ldr	r4, [r9]
   11768:	cmp	r4, #0
   1176c:	bne	11790 <__assert_fail@plt+0x37c>
   11770:	ldr	r1, [pc, #1256]	; 11c60 <__assert_fail@plt+0x84c>
   11774:	mov	r2, #5
   11778:	mov	r0, #0
   1177c:	bl	1118c <dcgettext@plt>
   11780:	mov	r1, #0
   11784:	mov	r2, r0
   11788:	mov	r0, #1
   1178c:	bl	11228 <error@plt>
   11790:	mov	r2, r4
   11794:	mov	r1, #0
   11798:	ldr	r0, [sp, #40]	; 0x28
   1179c:	bl	11fd4 <__assert_fail@plt+0xbc0>
   117a0:	subs	r4, r0, #0
   117a4:	bne	11734 <__assert_fail@plt+0x320>
   117a8:	mov	r2, #5
   117ac:	ldr	r1, [pc, #1200]	; 11c64 <__assert_fail@plt+0x850>
   117b0:	bl	1118c <dcgettext@plt>
   117b4:	mov	r5, r0
   117b8:	ldr	r0, [r9]
   117bc:	bl	1763c <__assert_fail@plt+0x6228>
   117c0:	mov	r2, r5
   117c4:	mov	r1, r4
   117c8:	mov	r3, r0
   117cc:	mov	r0, #1
   117d0:	bl	11228 <error@plt>
   117d4:	ldr	r0, [r9]
   117d8:	bl	12160 <__assert_fail@plt+0xd4c>
   117dc:	mov	r0, r6
   117e0:	mov	r6, #0
   117e4:	bl	14624 <__assert_fail@plt+0x3210>
   117e8:	str	r6, [sp, #36]	; 0x24
   117ec:	b	11734 <__assert_fail@plt+0x320>
   117f0:	mov	r2, #1
   117f4:	strb	r2, [r3, #181]	; 0xb5
   117f8:	mov	r3, #0
   117fc:	strb	r3, [r8, #4]
   11800:	b	11734 <__assert_fail@plt+0x320>
   11804:	ldr	r3, [pc, #1088]	; 11c4c <__assert_fail@plt+0x838>
   11808:	ldr	r0, [r3]
   1180c:	cmp	r0, #0
   11810:	beq	11824 <__assert_fail@plt+0x410>
   11814:	ldr	r3, [pc, #1100]	; 11c68 <__assert_fail@plt+0x854>
   11818:	mov	r1, r4
   1181c:	sub	r2, r3, #4
   11820:	bl	1429c <__assert_fail@plt+0x2e88>
   11824:	ldr	r3, [pc, #1052]	; 11c48 <__assert_fail@plt+0x834>
   11828:	mov	r2, #1
   1182c:	strb	r2, [r3, #108]	; 0x6c
   11830:	b	11734 <__assert_fail@plt+0x320>
   11834:	ldr	r3, [pc, #1036]	; 11c48 <__assert_fail@plt+0x834>
   11838:	mov	r2, #1
   1183c:	strb	r2, [r3, #180]	; 0xb4
   11840:	b	11734 <__assert_fail@plt+0x320>
   11844:	ldr	r3, [pc, #1024]	; 11c4c <__assert_fail@plt+0x838>
   11848:	ldr	r0, [r3]
   1184c:	cmp	r0, #0
   11850:	beq	11864 <__assert_fail@plt+0x450>
   11854:	ldr	r3, [pc, #1040]	; 11c6c <__assert_fail@plt+0x858>
   11858:	mov	r1, r4
   1185c:	sub	r2, r3, #4
   11860:	bl	1429c <__assert_fail@plt+0x2e88>
   11864:	ldr	r3, [pc, #988]	; 11c48 <__assert_fail@plt+0x834>
   11868:	mov	r2, #1
   1186c:	strb	r2, [r3, #80]	; 0x50
   11870:	b	11734 <__assert_fail@plt+0x320>
   11874:	mov	r2, #1
   11878:	strb	r2, [r3, #178]	; 0xb2
   1187c:	b	11734 <__assert_fail@plt+0x320>
   11880:	ldr	r3, [pc, #960]	; 11c48 <__assert_fail@plt+0x834>
   11884:	mov	r2, #1
   11888:	strb	r2, [r3, #4]
   1188c:	b	117f8 <__assert_fail@plt+0x3e4>
   11890:	ldr	r2, [pc, #944]	; 11c48 <__assert_fail@plt+0x834>
   11894:	ldr	r0, [r3]
   11898:	mov	r1, #1
   1189c:	cmp	r0, #0
   118a0:	strb	r1, [r2, #179]	; 0xb3
   118a4:	beq	11734 <__assert_fail@plt+0x320>
   118a8:	ldr	r3, [pc, #960]	; 11c70 <__assert_fail@plt+0x85c>
   118ac:	mov	r1, #110	; 0x6e
   118b0:	add	r2, r3, #4
   118b4:	bl	1429c <__assert_fail@plt+0x2e88>
   118b8:	b	11734 <__assert_fail@plt+0x320>
   118bc:	ldr	r3, [pc, #904]	; 11c4c <__assert_fail@plt+0x838>
   118c0:	mov	r0, #0
   118c4:	mov	r2, #5
   118c8:	ldr	r1, [pc, #932]	; 11c74 <__assert_fail@plt+0x860>
   118cc:	ldr	r4, [r3]
   118d0:	strb	r0, [r8, #45]	; 0x2d
   118d4:	bl	1118c <dcgettext@plt>
   118d8:	ldr	r2, [pc, #920]	; 11c78 <__assert_fail@plt+0x864>
   118dc:	mov	r1, #-2147483648	; 0x80000000
   118e0:	mov	r3, r0
   118e4:	b	1166c <__assert_fail@plt+0x258>
   118e8:	ldr	r3, [pc, #860]	; 11c4c <__assert_fail@plt+0x838>
   118ec:	mov	r2, #5
   118f0:	ldr	r1, [pc, #900]	; 11c7c <__assert_fail@plt+0x868>
   118f4:	mov	r0, #0
   118f8:	ldr	r4, [r3]
   118fc:	bl	1118c <dcgettext@plt>
   11900:	ldr	r2, [pc, #888]	; 11c80 <__assert_fail@plt+0x86c>
   11904:	mov	r1, #0
   11908:	mov	r3, r0
   1190c:	b	1166c <__assert_fail@plt+0x258>
   11910:	ldrb	fp, [r3, #144]	; 0x90
   11914:	cmp	fp, #0
   11918:	movne	r5, fp
   1191c:	bne	11734 <__assert_fail@plt+0x320>
   11920:	ldr	r3, [pc, #804]	; 11c4c <__assert_fail@plt+0x838>
   11924:	ldr	r0, [r3]
   11928:	cmp	r0, #0
   1192c:	beq	11934 <__assert_fail@plt+0x520>
   11930:	bl	120e4 <__assert_fail@plt+0xcd0>
   11934:	mov	r5, #1
   11938:	mov	fp, r5
   1193c:	b	11734 <__assert_fail@plt+0x320>
   11940:	mov	r2, #0
   11944:	strb	r2, [r8, #52]	; 0x34
   11948:	mov	r2, #1
   1194c:	strb	r2, [r3, #133]	; 0x85
   11950:	b	11734 <__assert_fail@plt+0x320>
   11954:	mov	r2, #0
   11958:	strb	r2, [r8, #52]	; 0x34
   1195c:	b	1194c <__assert_fail@plt+0x538>
   11960:	ldr	r3, [pc, #736]	; 11c48 <__assert_fail@plt+0x834>
   11964:	mov	r2, #1
   11968:	strb	r2, [r3, #109]	; 0x6d
   1196c:	b	11734 <__assert_fail@plt+0x320>
   11970:	ldr	r9, [r2]
   11974:	mov	r4, #1
   11978:	mov	r2, #5
   1197c:	ldr	r1, [pc, #768]	; 11c84 <__assert_fail@plt+0x870>
   11980:	mov	r0, #0
   11984:	strb	r4, [r3, #124]	; 0x7c
   11988:	bl	1118c <dcgettext@plt>
   1198c:	ldr	r2, [pc, #756]	; 11c88 <__assert_fail@plt+0x874>
   11990:	mov	r1, r4
   11994:	mov	r3, r0
   11998:	mov	r0, r9
   1199c:	bl	12118 <__assert_fail@plt+0xd04>
   119a0:	mov	r3, #0
   119a4:	str	r3, [sp, #20]
   119a8:	b	11734 <__assert_fail@plt+0x320>
   119ac:	ldr	r3, [pc, #728]	; 11c8c <__assert_fail@plt+0x878>
   119b0:	ldr	r0, [pc, #728]	; 11c90 <__assert_fail@plt+0x87c>
   119b4:	str	r3, [sp, #4]
   119b8:	ldr	r3, [pc, #724]	; 11c94 <__assert_fail@plt+0x880>
   119bc:	mov	r4, #0
   119c0:	str	r3, [sp]
   119c4:	ldr	r3, [pc, #716]	; 11c98 <__assert_fail@plt+0x884>
   119c8:	str	r4, [sp, #8]
   119cc:	ldr	r2, [pc, #712]	; 11c9c <__assert_fail@plt+0x888>
   119d0:	ldr	r0, [r0]
   119d4:	ldr	r3, [r3]
   119d8:	ldr	r1, [pc, #704]	; 11ca0 <__assert_fail@plt+0x88c>
   119dc:	bl	17f58 <__assert_fail@plt+0x6b44>
   119e0:	mov	r0, r4
   119e4:	bl	112ac <exit@plt>
   119e8:	cmp	r6, #0
   119ec:	beq	11a00 <__assert_fail@plt+0x5ec>
   119f0:	mov	r0, r6
   119f4:	bl	12160 <__assert_fail@plt+0xd4c>
   119f8:	mov	r0, r6
   119fc:	bl	14624 <__assert_fail@plt+0x3210>
   11a00:	ldr	r4, [pc, #576]	; 11c48 <__assert_fail@plt+0x834>
   11a04:	ldr	r3, [r4, #52]	; 0x34
   11a08:	cmp	r3, #0
   11a0c:	bne	11a3c <__assert_fail@plt+0x628>
   11a10:	ldr	r0, [pc, #652]	; 11ca4 <__assert_fail@plt+0x890>
   11a14:	bl	11234 <getenv@plt>
   11a18:	cmp	r0, #0
   11a1c:	beq	11a34 <__assert_fail@plt+0x620>
   11a20:	mov	r0, #2
   11a24:	bl	1473c <__assert_fail@plt+0x3328>
   11a28:	cmp	r0, #0
   11a2c:	ldreq	r3, [pc, #628]	; 11ca8 <__assert_fail@plt+0x894>
   11a30:	beq	11a38 <__assert_fail@plt+0x624>
   11a34:	ldr	r3, [pc, #624]	; 11cac <__assert_fail@plt+0x898>
   11a38:	str	r3, [r4, #52]	; 0x34
   11a3c:	ldr	r0, [pc, #620]	; 11cb0 <__assert_fail@plt+0x89c>
   11a40:	bl	11234 <getenv@plt>
   11a44:	bl	17718 <__assert_fail@plt+0x6304>
   11a48:	ldrd	r2, [r4, #24]
   11a4c:	orrs	r3, r2, r3
   11a50:	str	r0, [r4, #48]	; 0x30
   11a54:	moveq	r2, #1
   11a58:	moveq	r3, #0
   11a5c:	strdeq	r2, [r4, #24]
   11a60:	ldrb	r3, [r4, #4]
   11a64:	cmp	r3, #0
   11a68:	beq	11a94 <__assert_fail@plt+0x680>
   11a6c:	ldrb	r6, [r4, #36]	; 0x24
   11a70:	cmp	r6, #0
   11a74:	movne	r2, #5
   11a78:	ldrne	r1, [pc, #564]	; 11cb4 <__assert_fail@plt+0x8a0>
   11a7c:	bne	11778 <__assert_fail@plt+0x364>
   11a80:	ldrb	r2, [r4, #181]	; 0xb5
   11a84:	cmp	r2, #0
   11a88:	movne	r2, #5
   11a8c:	ldrne	r1, [pc, #548]	; 11cb8 <__assert_fail@plt+0x8a4>
   11a90:	bne	11778 <__assert_fail@plt+0x364>
   11a94:	cmp	fp, #0
   11a98:	beq	11adc <__assert_fail@plt+0x6c8>
   11a9c:	ldr	r2, [sp, #20]
   11aa0:	cmp	r2, #0
   11aa4:	beq	11bac <__assert_fail@plt+0x798>
   11aa8:	cmp	r3, #0
   11aac:	bne	11ac4 <__assert_fail@plt+0x6b0>
   11ab0:	ldrb	r2, [r4, #36]	; 0x24
   11ab4:	cmp	r2, #0
   11ab8:	moveq	r2, #1
   11abc:	strbeq	r2, [r4, #178]	; 0xb2
   11ac0:	beq	11adc <__assert_fail@plt+0x6c8>
   11ac4:	mov	r2, #1
   11ac8:	cmp	r5, #0
   11acc:	strb	r2, [r4, #124]	; 0x7c
   11ad0:	beq	11adc <__assert_fail@plt+0x6c8>
   11ad4:	mov	r2, #1
   11ad8:	strb	r2, [r4, #144]	; 0x90
   11adc:	ldr	r1, [pc, #472]	; 11cbc <__assert_fail@plt+0x8a8>
   11ae0:	add	ip, r7, sl, lsl #2
   11ae4:	mov	r0, #0
   11ae8:	ldr	r2, [r1]
   11aec:	mov	lr, #1
   11af0:	sub	sl, sl, r2
   11af4:	ldr	r5, [sp, #16]
   11af8:	add	r6, sl, r2
   11afc:	cmp	r5, r2
   11b00:	bgt	11bf4 <__assert_fail@plt+0x7e0>
   11b04:	cmp	r0, #0
   11b08:	strne	r2, [r1]
   11b0c:	cmp	r6, #0
   11b10:	moveq	r1, r6
   11b14:	moveq	r0, r1
   11b18:	beq	11b34 <__assert_fail@plt+0x720>
   11b1c:	cmp	r3, #0
   11b20:	moveq	r5, r3
   11b24:	moveq	r8, #1
   11b28:	beq	11c0c <__assert_fail@plt+0x7f8>
   11b2c:	mov	r1, r7
   11b30:	mov	r0, r6
   11b34:	bl	13114 <__assert_fail@plt+0x1d00>
   11b38:	ldr	r0, [r4, #112]	; 0x70
   11b3c:	bl	14624 <__assert_fail@plt+0x3210>
   11b40:	ldr	r0, [r4, #100]	; 0x64
   11b44:	bl	14624 <__assert_fail@plt+0x3210>
   11b48:	ldr	r0, [r4]
   11b4c:	bl	14624 <__assert_fail@plt+0x3210>
   11b50:	ldr	r0, [r4, #148]	; 0x94
   11b54:	bl	14624 <__assert_fail@plt+0x3210>
   11b58:	ldr	r0, [r4, #156]	; 0x9c
   11b5c:	bl	14624 <__assert_fail@plt+0x3210>
   11b60:	ldr	r0, [r4, #20]
   11b64:	bl	14624 <__assert_fail@plt+0x3210>
   11b68:	ldrb	r3, [r4, #125]	; 0x7d
   11b6c:	cmp	r3, #0
   11b70:	beq	11c28 <__assert_fail@plt+0x814>
   11b74:	ldr	r3, [pc, #324]	; 11cc0 <__assert_fail@plt+0x8ac>
   11b78:	ldr	r0, [r3]
   11b7c:	bl	14498 <__assert_fail@plt+0x3084>
   11b80:	cmn	r0, #1
   11b84:	bne	11c28 <__assert_fail@plt+0x814>
   11b88:	bl	112e8 <__errno_location@plt>
   11b8c:	mov	r2, #5
   11b90:	ldr	r1, [pc, #300]	; 11cc4 <__assert_fail@plt+0x8b0>
   11b94:	ldr	r4, [r0]
   11b98:	mov	r0, #0
   11b9c:	bl	1118c <dcgettext@plt>
   11ba0:	mov	r1, r4
   11ba4:	mov	r2, r0
   11ba8:	b	11788 <__assert_fail@plt+0x374>
   11bac:	ldrb	r2, [r4, #144]	; 0x90
   11bb0:	eor	r2, r2, #1
   11bb4:	tst	r5, r2
   11bb8:	beq	11adc <__assert_fail@plt+0x6c8>
   11bbc:	cmp	r3, #0
   11bc0:	bne	11bd0 <__assert_fail@plt+0x7bc>
   11bc4:	ldrb	r2, [r4, #36]	; 0x24
   11bc8:	cmp	r2, #0
   11bcc:	beq	11adc <__assert_fail@plt+0x6c8>
   11bd0:	ldrb	r2, [r4, #124]	; 0x7c
   11bd4:	cmp	r2, #0
   11bd8:	bne	11ad4 <__assert_fail@plt+0x6c0>
   11bdc:	mov	r2, #1
   11be0:	strb	r2, [r4, #178]	; 0xb2
   11be4:	ldr	r2, [r4, #32]
   11be8:	cmp	r2, #0
   11bec:	bgt	11ad4 <__assert_fail@plt+0x6c0>
   11bf0:	b	11adc <__assert_fail@plt+0x6c8>
   11bf4:	ldr	r0, [sp, #24]
   11bf8:	ldr	r0, [r0, r2, lsl #2]
   11bfc:	add	r2, r2, #1
   11c00:	str	r0, [ip], #4
   11c04:	mov	r0, lr
   11c08:	b	11af4 <__assert_fail@plt+0x6e0>
   11c0c:	add	r1, r7, r5, lsl #2
   11c10:	mov	r0, r8
   11c14:	add	r5, r5, #1
   11c18:	bl	13114 <__assert_fail@plt+0x1d00>
   11c1c:	cmp	r5, r6
   11c20:	bne	11c0c <__assert_fail@plt+0x7f8>
   11c24:	b	11b38 <__assert_fail@plt+0x724>
   11c28:	ldrb	r0, [r4, #126]	; 0x7e
   11c2c:	b	119e4 <__assert_fail@plt+0x5d0>
   11c30:	ldrdeq	sl, [r1], -fp
   11c34:	andeq	fp, r1, pc, lsl r2
   11c38:	andeq	fp, r1, r1, lsr #2
   11c3c:	andeq	r4, r1, r8, ror r3
   11c40:	andeq	ip, r2, r0, asr #2
   11c44:	andeq	r9, r1, ip, lsr lr
   11c48:	strdeq	ip, [r2], -r0
   11c4c:	andeq	ip, r2, r8, ror #3
   11c50:	andeq	fp, r1, pc, ror r2
   11c54:	andeq	ip, r2, r8, ror r1
   11c58:	andeq	r0, r0, r1, lsl #2
   11c5c:	strdeq	fp, [r1], -r1
   11c60:	andeq	fp, r1, r7, lsr r2
   11c64:	andeq	fp, r1, r9, ror #4
   11c68:	andeq	ip, r2, r4, ror #2
   11c6c:	andeq	ip, r2, ip, asr r1
   11c70:	andeq	ip, r2, r8, ror #2
   11c74:	andeq	fp, r1, r8, lsr #5
   11c78:	andeq	ip, r2, ip, ror r1
   11c7c:	ldrdeq	fp, [r1], -r1
   11c80:	andeq	ip, r2, r4, asr #4
   11c84:	andeq	fp, r1, lr, lsl r3
   11c88:	andeq	ip, r2, r4, asr r1
   11c8c:	andeq	fp, r1, fp, asr #6
   11c90:	andeq	ip, r2, r4, ror #3
   11c94:	andeq	fp, r1, sl, asr r3
   11c98:	andeq	ip, r2, r0, lsl #3
   11c9c:	andeq	fp, r1, sp, lsl r1
   11ca0:	andeq	sl, r1, r4, lsr #2
   11ca4:	andeq	fp, r1, r7, ror #6
   11ca8:	andeq	fp, r1, r1, lsl #4
   11cac:	andeq	fp, r1, r0, lsl r2
   11cb0:	andeq	fp, r1, r7, ror r3
   11cb4:	andeq	fp, r1, sl, ror r3
   11cb8:			; <UNDEFINED> instruction: 0x0001b3b5
   11cbc:	ldrdeq	ip, [r2], -r0
   11cc0:	andeq	ip, r2, r0, ror #3
   11cc4:	andeq	sl, r1, fp, asr #1
   11cc8:	mov	fp, #0
   11ccc:	mov	lr, #0
   11cd0:	pop	{r1}		; (ldr r1, [sp], #4)
   11cd4:	mov	r2, sp
   11cd8:	push	{r2}		; (str r2, [sp, #-4]!)
   11cdc:	push	{r0}		; (str r0, [sp, #-4]!)
   11ce0:	ldr	ip, [pc, #16]	; 11cf8 <__assert_fail@plt+0x8e4>
   11ce4:	push	{ip}		; (str ip, [sp, #-4]!)
   11ce8:	ldr	r0, [pc, #12]	; 11cfc <__assert_fail@plt+0x8e8>
   11cec:	ldr	r3, [pc, #12]	; 11d00 <__assert_fail@plt+0x8ec>
   11cf0:	bl	1124c <__libc_start_main@plt>
   11cf4:	bl	113f0 <abort@plt>
   11cf8:	andeq	r9, r1, r4, lsl #28
   11cfc:	andeq	r1, r1, r0, lsr #8
   11d00:	andeq	r9, r1, r4, lsr #27
   11d04:	ldr	r3, [pc, #20]	; 11d20 <__assert_fail@plt+0x90c>
   11d08:	ldr	r2, [pc, #20]	; 11d24 <__assert_fail@plt+0x910>
   11d0c:	add	r3, pc, r3
   11d10:	ldr	r2, [r3, r2]
   11d14:	cmp	r2, #0
   11d18:	bxeq	lr
   11d1c:	b	11288 <__gmon_start__@plt>
   11d20:	andeq	sl, r1, ip, ror #5
   11d24:	andeq	r0, r0, r4, lsr r1
   11d28:	ldr	r3, [pc, #28]	; 11d4c <__assert_fail@plt+0x938>
   11d2c:	ldr	r0, [pc, #28]	; 11d50 <__assert_fail@plt+0x93c>
   11d30:	sub	r3, r3, r0
   11d34:	cmp	r3, #6
   11d38:	bxls	lr
   11d3c:	ldr	r3, [pc, #16]	; 11d54 <__assert_fail@plt+0x940>
   11d40:	cmp	r3, #0
   11d44:	bxeq	lr
   11d48:	bx	r3
   11d4c:	andeq	ip, r2, fp, asr #3
   11d50:	andeq	ip, r2, r8, asr #3
   11d54:	andeq	r0, r0, r0
   11d58:	ldr	r1, [pc, #36]	; 11d84 <__assert_fail@plt+0x970>
   11d5c:	ldr	r0, [pc, #36]	; 11d88 <__assert_fail@plt+0x974>
   11d60:	sub	r1, r1, r0
   11d64:	asr	r1, r1, #2
   11d68:	add	r1, r1, r1, lsr #31
   11d6c:	asrs	r1, r1, #1
   11d70:	bxeq	lr
   11d74:	ldr	r3, [pc, #16]	; 11d8c <__assert_fail@plt+0x978>
   11d78:	cmp	r3, #0
   11d7c:	bxeq	lr
   11d80:	bx	r3
   11d84:	andeq	ip, r2, r8, asr #3
   11d88:	andeq	ip, r2, r8, asr #3
   11d8c:	andeq	r0, r0, r0
   11d90:	push	{r4, lr}
   11d94:	ldr	r4, [pc, #24]	; 11db4 <__assert_fail@plt+0x9a0>
   11d98:	ldrb	r3, [r4]
   11d9c:	cmp	r3, #0
   11da0:	popne	{r4, pc}
   11da4:	bl	11d28 <__assert_fail@plt+0x914>
   11da8:	mov	r3, #1
   11dac:	strb	r3, [r4]
   11db0:	pop	{r4, pc}
   11db4:	andeq	ip, r2, ip, ror #3
   11db8:	ldr	r0, [pc, #40]	; 11de8 <__assert_fail@plt+0x9d4>
   11dbc:	ldr	r3, [r0]
   11dc0:	cmp	r3, #0
   11dc4:	bne	11dcc <__assert_fail@plt+0x9b8>
   11dc8:	b	11d58 <__assert_fail@plt+0x944>
   11dcc:	ldr	r3, [pc, #24]	; 11dec <__assert_fail@plt+0x9d8>
   11dd0:	cmp	r3, #0
   11dd4:	beq	11dc8 <__assert_fail@plt+0x9b4>
   11dd8:	push	{r4, lr}
   11ddc:	blx	r3
   11de0:	pop	{r4, lr}
   11de4:	b	11d58 <__assert_fail@plt+0x944>
   11de8:	andeq	fp, r2, r4, lsl pc
   11dec:	andeq	r0, r0, r0
   11df0:	ldr	r2, [pc, #104]	; 11e60 <__assert_fail@plt+0xa4c>
   11df4:	ldr	r3, [pc, #104]	; 11e64 <__assert_fail@plt+0xa50>
   11df8:	mov	r0, #0
   11dfc:	ldr	r1, [r2]
   11e00:	ldrb	ip, [r2, #4]
   11e04:	cmp	r0, r1
   11e08:	ldr	r3, [r3]
   11e0c:	mov	r2, r0
   11e10:	bne	11e18 <__assert_fail@plt+0xa04>
   11e14:	bx	lr
   11e18:	push	{lr}		; (str lr, [sp, #-4]!)
   11e1c:	ldr	lr, [r3, #8]
   11e20:	cmp	lr, #1
   11e24:	bls	11e48 <__assert_fail@plt+0xa34>
   11e28:	cmp	ip, #0
   11e2c:	beq	11e4c <__assert_fail@plt+0xa38>
   11e30:	ldr	lr, [r3, #24]
   11e34:	cmp	lr, #0
   11e38:	ble	11e4c <__assert_fail@plt+0xa38>
   11e3c:	ldr	lr, [r3, #28]
   11e40:	cmp	lr, #0
   11e44:	ble	11e4c <__assert_fail@plt+0xa38>
   11e48:	add	r0, r0, #1
   11e4c:	add	r2, r2, #1
   11e50:	cmp	r2, r1
   11e54:	add	r3, r3, #40	; 0x28
   11e58:	bne	11e1c <__assert_fail@plt+0xa08>
   11e5c:	pop	{pc}		; (ldr pc, [sp], #4)
   11e60:	andeq	ip, r2, r0, asr #2
   11e64:	strdeq	ip, [r2], -r0
   11e68:	ldr	r3, [pc, #104]	; 11ed8 <__assert_fail@plt+0xac4>
   11e6c:	push	{r4, r5, lr}
   11e70:	ldrb	r2, [r3, #4]
   11e74:	cmp	r2, #0
   11e78:	movne	r2, #2
   11e7c:	strne	r2, [r0, #8]
   11e80:	bne	11ea4 <__assert_fail@plt+0xa90>
   11e84:	ldr	ip, [pc, #80]	; 11edc <__assert_fail@plt+0xac8>
   11e88:	ldr	r1, [r3]
   11e8c:	mov	lr, #2
   11e90:	ldr	r2, [ip]
   11e94:	ldrb	ip, [ip, #4]
   11e98:	mov	r4, #1
   11e9c:	cmp	r2, #0
   11ea0:	bne	11ebc <__assert_fail@plt+0xaa8>
   11ea4:	mov	r2, #0
   11ea8:	str	r2, [r0, #28]
   11eac:	ldr	r2, [r3, #8]
   11eb0:	sub	r2, r2, #1
   11eb4:	str	r2, [r3, #8]
   11eb8:	pop	{r4, r5, pc}
   11ebc:	cmp	ip, #0
   11ec0:	moveq	r5, lr
   11ec4:	movne	r5, r4
   11ec8:	str	r5, [r1, #8]
   11ecc:	sub	r2, r2, #1
   11ed0:	add	r1, r1, #40	; 0x28
   11ed4:	b	11e9c <__assert_fail@plt+0xa88>
   11ed8:	strdeq	ip, [r2], -r0
   11edc:	andeq	ip, r2, r0, asr #2
   11ee0:	ldr	r3, [pc, #116]	; 11f5c <__assert_fail@plt+0xb48>
   11ee4:	ldr	r2, [pc, #116]	; 11f60 <__assert_fail@plt+0xb4c>
   11ee8:	push	{r4, r5, r6, r7, lr}
   11eec:	mov	ip, #0
   11ef0:	ldr	r4, [r3]
   11ef4:	ldr	lr, [r2]
   11ef8:	ldr	r0, [r3, #8]
   11efc:	mov	r1, r4
   11f00:	mov	r5, ip
   11f04:	mov	r6, #1
   11f08:	cmp	lr, #0
   11f0c:	bne	11f3c <__assert_fail@plt+0xb28>
   11f10:	ldrb	r2, [r2, #4]
   11f14:	cmp	ip, #0
   11f18:	strne	r0, [r3, #8]
   11f1c:	cmp	r2, #0
   11f20:	popeq	{r4, r5, r6, r7, pc}
   11f24:	ldr	r2, [r4, #8]
   11f28:	cmp	r2, #3
   11f2c:	moveq	r2, #0
   11f30:	movne	r2, #1
   11f34:	str	r2, [r3, #8]
   11f38:	pop	{r4, r5, r6, r7, pc}
   11f3c:	ldr	r7, [r1, #8]
   11f40:	sub	lr, lr, #1
   11f44:	cmp	r7, #2
   11f48:	streq	r5, [r1, #8]
   11f4c:	addeq	r0, r0, #1
   11f50:	moveq	ip, r6
   11f54:	add	r1, r1, #40	; 0x28
   11f58:	b	11f08 <__assert_fail@plt+0xaf4>
   11f5c:	strdeq	ip, [r2], -r0
   11f60:	andeq	ip, r2, r0, asr #2
   11f64:	push	{r4, r5, r6, lr}
   11f68:	mov	r5, r0
   11f6c:	ldr	r4, [pc, #52]	; 11fa8 <__assert_fail@plt+0xb94>
   11f70:	ldr	r2, [r4, #12]
   11f74:	ldr	r3, [r4, #16]
   11f78:	cmp	r2, r3
   11f7c:	bcc	11f90 <__assert_fail@plt+0xb7c>
   11f80:	add	r1, r4, #16
   11f84:	ldr	r0, [r4, #20]
   11f88:	bl	18188 <__assert_fail@plt+0x6d74>
   11f8c:	str	r0, [r4, #20]
   11f90:	ldr	r3, [r4, #12]
   11f94:	ldr	r2, [r4, #20]
   11f98:	add	r1, r3, #1
   11f9c:	str	r1, [r4, #12]
   11fa0:	strb	r5, [r2, r3]
   11fa4:	pop	{r4, r5, r6, pc}
   11fa8:	strdeq	ip, [r2], -r0
   11fac:	mov	r2, #5
   11fb0:	ldr	r1, [pc, #24]	; 11fd0 <__assert_fail@plt+0xbbc>
   11fb4:	push	{r4, lr}
   11fb8:	mov	r0, #0
   11fbc:	bl	1118c <dcgettext@plt>
   11fc0:	mov	r1, #0
   11fc4:	mov	r2, r0
   11fc8:	mov	r0, #1
   11fcc:	bl	11228 <error@plt>
   11fd0:	andeq	sl, r1, r9, asr r0
   11fd4:	push	{r4, r5, r6, r7, r8, lr}
   11fd8:	mvn	r3, #0
   11fdc:	sub	sp, sp, #32
   11fe0:	mov	r5, r2
   11fe4:	ldr	r8, [pc, #232]	; 120d4 <__assert_fail@plt+0xcc0>
   11fe8:	mvn	r2, #0
   11fec:	mov	r6, r0
   11ff0:	strd	r2, [sp, #24]
   11ff4:	mov	r7, r1
   11ff8:	add	r3, sp, #16
   11ffc:	str	r8, [sp]
   12000:	mov	r2, #10
   12004:	add	r1, sp, #12
   12008:	mov	r0, r5
   1200c:	bl	18ffc <__assert_fail@plt+0x7be8>
   12010:	bics	r3, r0, #2
   12014:	beq	1202c <__assert_fail@plt+0xc18>
   12018:	str	r5, [sp]
   1201c:	ldr	r3, [pc, #180]	; 120d8 <__assert_fail@plt+0xcc4>
   12020:	mov	r2, r7
   12024:	mov	r1, r6
   12028:	bl	18e84 <__assert_fail@plt+0x7a70>
   1202c:	ldr	r0, [sp, #12]
   12030:	cmp	r5, r0
   12034:	bne	12044 <__assert_fail@plt+0xc30>
   12038:	mov	r0, #0
   1203c:	add	sp, sp, #32
   12040:	pop	{r4, r5, r6, r7, r8, pc}
   12044:	ldrd	r2, [sp, #16]
   12048:	orrs	r3, r2, r3
   1204c:	beq	12038 <__assert_fail@plt+0xc24>
   12050:	ldrb	r3, [r0]
   12054:	cmp	r3, #58	; 0x3a
   12058:	beq	1208c <__assert_fail@plt+0xc78>
   1205c:	ldr	r3, [sp, #12]
   12060:	ldrb	r3, [r3]
   12064:	cmp	r3, #0
   12068:	bne	12038 <__assert_fail@plt+0xc24>
   1206c:	ldrd	r0, [sp, #16]
   12070:	ldr	r3, [pc, #100]	; 120dc <__assert_fail@plt+0xcc8>
   12074:	strd	r0, [r3, #24]
   12078:	ldrd	r0, [sp, #24]
   1207c:	ldr	r3, [pc, #92]	; 120e0 <__assert_fail@plt+0xccc>
   12080:	strd	r0, [r3, #8]
   12084:	mov	r0, #1
   12088:	b	1203c <__assert_fail@plt+0xc28>
   1208c:	add	r4, r0, #1
   12090:	str	r8, [sp]
   12094:	add	r3, sp, #24
   12098:	mov	r2, #10
   1209c:	add	r1, sp, #12
   120a0:	mov	r0, r4
   120a4:	bl	18ffc <__assert_fail@plt+0x7be8>
   120a8:	cmp	r0, #0
   120ac:	bne	12018 <__assert_fail@plt+0xc04>
   120b0:	ldr	r3, [sp, #12]
   120b4:	cmp	r4, r3
   120b8:	beq	12038 <__assert_fail@plt+0xc24>
   120bc:	ldrd	r2, [sp, #16]
   120c0:	ldrd	r0, [sp, #24]
   120c4:	cmp	r1, r3
   120c8:	cmpeq	r0, r2
   120cc:	bcs	1205c <__assert_fail@plt+0xc48>
   120d0:	b	12038 <__assert_fail@plt+0xc24>
   120d4:	ldrdeq	sl, [r1], -fp
   120d8:	andeq	r9, r1, ip, lsr lr
   120dc:	strdeq	ip, [r2], -r0
   120e0:	andeq	ip, r2, r0, asr #2
   120e4:	push	{r4, lr}
   120e8:	mov	r4, r0
   120ec:	bl	112b8 <strlen@plt>
   120f0:	cmp	r0, #0
   120f4:	bge	120fc <__assert_fail@plt+0xce8>
   120f8:	bl	11fac <__assert_fail@plt+0xb98>
   120fc:	ldr	r3, [pc, #12]	; 12110 <__assert_fail@plt+0xcfc>
   12100:	str	r0, [r3, #32]
   12104:	ldr	r3, [pc, #8]	; 12114 <__assert_fail@plt+0xd00>
   12108:	str	r4, [r3, #16]
   1210c:	pop	{r4, pc}
   12110:	strdeq	ip, [r2], -r0
   12114:	andeq	ip, r2, r0, asr #2
   12118:	push	{r4, lr}
   1211c:	sub	sp, sp, #24
   12120:	mov	r4, r2
   12124:	str	r3, [sp, #12]
   12128:	ldr	r3, [pc, #44]	; 1215c <__assert_fail@plt+0xd48>
   1212c:	mov	r2, #0
   12130:	str	r2, [sp, #16]
   12134:	str	r3, [sp, #8]
   12138:	mvn	r2, #-2147483648	; 0x80000000
   1213c:	mov	r3, #0
   12140:	strd	r2, [sp]
   12144:	mov	r2, r1
   12148:	asr	r3, r1, #31
   1214c:	bl	1862c <__assert_fail@plt+0x7218>
   12150:	str	r0, [r4]
   12154:	add	sp, sp, #24
   12158:	pop	{r4, pc}
   1215c:	ldrdeq	sl, [r1], -fp
   12160:	push	{r4, lr}
   12164:	mov	r2, #5
   12168:	mov	r4, r0
   1216c:	ldr	r1, [pc, #40]	; 1219c <__assert_fail@plt+0xd88>
   12170:	mov	r0, #0
   12174:	bl	1118c <dcgettext@plt>
   12178:	ldr	r2, [pc, #32]	; 121a0 <__assert_fail@plt+0xd8c>
   1217c:	mov	r1, #1
   12180:	mov	r3, r0
   12184:	mov	r0, r4
   12188:	bl	12118 <__assert_fail@plt+0xd04>
   1218c:	ldr	r3, [pc, #16]	; 121a4 <__assert_fail@plt+0xd90>
   12190:	mov	r2, #1
   12194:	strb	r2, [r3, #36]	; 0x24
   12198:	pop	{r4, pc}
   1219c:	andeq	sl, r1, sl, rrx
   121a0:	andeq	ip, r2, r0, asr #2
   121a4:	strdeq	ip, [r2], -r0
   121a8:	push	{r4, r5, r6, r7, r8, r9, lr}
   121ac:	mov	r7, r1
   121b0:	sub	sp, sp, #196	; 0xc4
   121b4:	ldr	r1, [pc, #360]	; 12324 <__assert_fail@plt+0xf10>
   121b8:	mov	r5, r0
   121bc:	bl	110e4 <strcmp@plt>
   121c0:	ldr	r4, [pc, #352]	; 12328 <__assert_fail@plt+0xf14>
   121c4:	add	r6, sp, #12
   121c8:	cmp	r0, #0
   121cc:	beq	122c4 <__assert_fail@plt+0xeb0>
   121d0:	cmp	r7, #0
   121d4:	blt	122c8 <__assert_fail@plt+0xeb4>
   121d8:	add	r1, sp, #88	; 0x58
   121dc:	mov	r0, r7
   121e0:	bl	19e20 <__assert_fail@plt+0x8a0c>
   121e4:	cmp	r0, #0
   121e8:	bne	122c8 <__assert_fail@plt+0xeb4>
   121ec:	ldr	r3, [sp, #168]	; 0xa8
   121f0:	str	r3, [sp, #12]
   121f4:	ldr	r3, [sp, #172]	; 0xac
   121f8:	str	r3, [sp, #16]
   121fc:	add	r2, sp, #44	; 0x2c
   12200:	mov	r1, r6
   12204:	ldr	r0, [r4, #48]	; 0x30
   12208:	ldr	r8, [sp, #16]
   1220c:	bl	179b0 <__assert_fail@plt+0x659c>
   12210:	cmp	r0, #0
   12214:	beq	122ec <__assert_fail@plt+0xed8>
   12218:	ldr	r3, [r4, #48]	; 0x30
   1221c:	ldr	r2, [r4, #52]	; 0x34
   12220:	mvn	r1, #0
   12224:	str	r3, [sp]
   12228:	str	r8, [sp, #4]
   1222c:	add	r3, sp, #44	; 0x2c
   12230:	mov	r0, #0
   12234:	bl	15fcc <__assert_fail@plt+0x4bb8>
   12238:	add	r9, r0, #1
   1223c:	mov	r0, r9
   12240:	bl	18020 <__assert_fail@plt+0x6c0c>
   12244:	ldr	r3, [r4, #48]	; 0x30
   12248:	str	r8, [sp, #4]
   1224c:	str	r3, [sp]
   12250:	ldr	r2, [r4, #52]	; 0x34
   12254:	add	r3, sp, #44	; 0x2c
   12258:	mov	r1, r9
   1225c:	mov	r6, r0
   12260:	bl	15fcc <__assert_fail@plt+0x4bb8>
   12264:	ldr	r0, [r4, #56]	; 0x38
   12268:	bl	14624 <__assert_fail@plt+0x3210>
   1226c:	ldr	r3, [r4, #60]	; 0x3c
   12270:	str	r6, [r4, #56]	; 0x38
   12274:	cmp	r3, #0
   12278:	movne	r5, r3
   1227c:	bne	1228c <__assert_fail@plt+0xe78>
   12280:	ldr	r3, [pc, #164]	; 1232c <__assert_fail@plt+0xf18>
   12284:	cmp	r7, #0
   12288:	movlt	r5, r3
   1228c:	ldr	r3, [pc, #156]	; 12330 <__assert_fail@plt+0xf1c>
   12290:	mov	r1, #0
   12294:	mov	r0, r6
   12298:	str	r5, [r4, #64]	; 0x40
   1229c:	ldr	r5, [r3, #20]
   122a0:	bl	149f4 <__assert_fail@plt+0x35e0>
   122a4:	mov	r1, #0
   122a8:	sub	r5, r5, r0
   122ac:	ldr	r0, [r4, #64]	; 0x40
   122b0:	bl	149f4 <__assert_fail@plt+0x35e0>
   122b4:	sub	r0, r5, r0
   122b8:	str	r0, [r4, #68]	; 0x44
   122bc:	add	sp, sp, #196	; 0xc4
   122c0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   122c4:	mvn	r7, #0
   122c8:	ldr	r3, [r4, #40]	; 0x28
   122cc:	ldr	r8, [pc, #96]	; 12334 <__assert_fail@plt+0xf20>
   122d0:	cmp	r3, #0
   122d4:	bne	122e0 <__assert_fail@plt+0xecc>
   122d8:	mov	r0, r8
   122dc:	bl	1470c <__assert_fail@plt+0x32f8>
   122e0:	ldm	r8, {r0, r1}
   122e4:	stm	r6, {r0, r1}
   122e8:	b	121fc <__assert_fail@plt+0xde8>
   122ec:	mov	r0, #33	; 0x21
   122f0:	bl	18020 <__assert_fail@plt+0x6c0c>
   122f4:	add	r2, sp, #20
   122f8:	mov	r6, r0
   122fc:	ldr	r0, [sp, #12]
   12300:	asr	r1, r0, #31
   12304:	bl	14798 <__assert_fail@plt+0x3384>
   12308:	ldr	r3, [pc, #40]	; 12338 <__assert_fail@plt+0xf24>
   1230c:	mov	r2, #33	; 0x21
   12310:	mov	r1, #1
   12314:	stm	sp, {r0, r8}
   12318:	mov	r0, r6
   1231c:	bl	112f4 <__sprintf_chk@plt>
   12320:	b	12264 <__assert_fail@plt+0xe50>
   12324:	andeq	fp, r1, r9, asr sl
   12328:	strdeq	ip, [r2], -r0
   1232c:	ldrdeq	sl, [r1], -fp
   12330:	andeq	ip, r2, r0, asr #2
   12334:	andeq	ip, r2, r8, lsl r2
   12338:	andeq	sl, r1, r4, lsl #1
   1233c:	ldr	r3, [pc, #124]	; 123c0 <__assert_fail@plt+0xfac>
   12340:	push	{r4, r5, r6, r7, r8, lr}
   12344:	mov	r6, r3
   12348:	ldr	r4, [r3, #72]	; 0x48
   1234c:	ldr	r7, [r3, #76]	; 0x4c
   12350:	ldr	r8, [pc, #108]	; 123c4 <__assert_fail@plt+0xfb0>
   12354:	add	r7, r4, r7
   12358:	sub	r3, r7, r4
   1235c:	cmp	r3, #1
   12360:	bgt	12384 <__assert_fail@plt+0xf70>
   12364:	mov	r5, #32
   12368:	add	r4, r4, #1
   1236c:	cmp	r7, r4
   12370:	bge	123b4 <__assert_fail@plt+0xfa0>
   12374:	mov	r3, #0
   12378:	str	r7, [r6, #72]	; 0x48
   1237c:	str	r3, [r6, #76]	; 0x4c
   12380:	pop	{r4, r5, r6, r7, r8, pc}
   12384:	ldr	r5, [r8, #28]
   12388:	mov	r0, r4
   1238c:	mov	r1, r5
   12390:	bl	19b3c <__assert_fail@plt+0x8728>
   12394:	sub	r5, r5, r1
   12398:	add	r5, r5, r4
   1239c:	cmp	r7, r5
   123a0:	blt	12364 <__assert_fail@plt+0xf50>
   123a4:	ldrb	r0, [r8, #24]
   123a8:	bl	11408 <putchar_unlocked@plt>
   123ac:	mov	r4, r5
   123b0:	b	12358 <__assert_fail@plt+0xf44>
   123b4:	mov	r0, r5
   123b8:	bl	11408 <putchar_unlocked@plt>
   123bc:	b	12368 <__assert_fail@plt+0xf54>
   123c0:	strdeq	ip, [r2], -r0
   123c4:	andeq	ip, r2, r0, asr #2
   123c8:	ldr	r3, [pc, #68]	; 12414 <__assert_fail@plt+0x1000>
   123cc:	push	{r4, r5, r6, r7, r8, lr}
   123d0:	ldrb	r2, [r3, #80]	; 0x50
   123d4:	ldr	r5, [r3, #72]	; 0x48
   123d8:	cmp	r2, #0
   123dc:	moveq	r6, r3
   123e0:	moveq	r4, r0
   123e4:	moveq	r7, #32
   123e8:	beq	12400 <__assert_fail@plt+0xfec>
   123ec:	sub	r0, r0, r5
   123f0:	str	r0, [r3, #76]	; 0x4c
   123f4:	pop	{r4, r5, r6, r7, r8, pc}
   123f8:	mov	r0, r7
   123fc:	bl	11408 <putchar_unlocked@plt>
   12400:	add	r5, r5, #1
   12404:	cmp	r4, r5
   12408:	bge	123f8 <__assert_fail@plt+0xfe4>
   1240c:	str	r4, [r6, #72]	; 0x48
   12410:	pop	{r4, r5, r6, r7, r8, pc}
   12414:	strdeq	ip, [r2], -r0
   12418:	push	{r4, r5, r6, r7, r8, r9, lr}
   1241c:	mov	r6, #0
   12420:	ldr	r4, [pc, #208]	; 124f8 <__assert_fail@plt+0x10e4>
   12424:	sub	sp, sp, #316	; 0x13c
   12428:	ldr	r0, [r4, #84]	; 0x54
   1242c:	str	r6, [r4, #72]	; 0x48
   12430:	bl	123c8 <__assert_fail@plt+0xfb4>
   12434:	bl	1233c <__assert_fail@plt+0xf28>
   12438:	ldrd	r8, [r4, #88]	; 0x58
   1243c:	mov	r2, #5
   12440:	orrs	r3, r8, r9
   12444:	bne	12464 <__assert_fail@plt+0x1050>
   12448:	ldr	r1, [pc, #172]	; 124fc <__assert_fail@plt+0x10e8>
   1244c:	mov	r0, r6
   12450:	bl	1118c <dcgettext@plt>
   12454:	mov	r1, r6
   12458:	mov	r2, r0
   1245c:	mov	r0, #1
   12460:	bl	11228 <error@plt>
   12464:	ldr	r1, [pc, #148]	; 12500 <__assert_fail@plt+0x10ec>
   12468:	mov	r0, r6
   1246c:	bl	1118c <dcgettext@plt>
   12470:	add	r7, sp, #36	; 0x24
   12474:	mov	r2, #276	; 0x114
   12478:	strd	r8, [sp]
   1247c:	mov	r1, #1
   12480:	mov	r3, r0
   12484:	mov	r0, r7
   12488:	bl	112f4 <__sprintf_chk@plt>
   1248c:	mov	r1, r6
   12490:	mov	r0, r7
   12494:	ldr	r5, [r4, #68]	; 0x44
   12498:	bl	149f4 <__assert_fail@plt+0x35e0>
   1249c:	ldr	r1, [r4, #64]	; 0x40
   124a0:	ldr	r2, [pc, #92]	; 12504 <__assert_fail@plt+0x10f0>
   124a4:	str	r1, [sp, #12]
   124a8:	str	r2, [sp, #20]
   124ac:	str	r2, [sp, #8]
   124b0:	str	r7, [sp, #24]
   124b4:	ldr	r2, [r4, #84]	; 0x54
   124b8:	ldr	r1, [pc, #72]	; 12508 <__assert_fail@plt+0x10f4>
   124bc:	sub	r0, r5, r0
   124c0:	bic	r0, r0, r0, asr #31
   124c4:	asr	r3, r0, #1
   124c8:	sub	r0, r0, r3
   124cc:	str	r3, [sp, #4]
   124d0:	ldr	r3, [r4, #56]	; 0x38
   124d4:	str	r0, [sp, #16]
   124d8:	str	r3, [sp]
   124dc:	mov	r0, #1
   124e0:	ldr	r3, [pc, #36]	; 1250c <__assert_fail@plt+0x10f8>
   124e4:	bl	11318 <__printf_chk@plt>
   124e8:	strb	r6, [r4, #96]	; 0x60
   124ec:	str	r6, [r4, #72]	; 0x48
   124f0:	add	sp, sp, #316	; 0x13c
   124f4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   124f8:	strdeq	ip, [r2], -r0
   124fc:	andeq	sl, r1, ip, lsl #1
   12500:	andeq	sl, r1, r1, lsr #1
   12504:	andeq	sl, r1, r0, asr #1
   12508:	andeq	sl, r1, fp, lsr #1
   1250c:	ldrdeq	sl, [r1], -fp
   12510:	ldr	r3, [pc, #356]	; 1267c <__assert_fail@plt+0x1268>
   12514:	push	{r4, r5, r6, r7, lr}
   12518:	mov	r6, r0
   1251c:	ldrb	r2, [r3, #32]
   12520:	ldr	r7, [pc, #344]	; 12680 <__assert_fail@plt+0x126c>
   12524:	sub	sp, sp, #20
   12528:	cmp	r2, r0
   1252c:	ldr	r4, [r7, #100]	; 0x64
   12530:	ldreq	r5, [r3, #36]	; 0x24
   12534:	beq	12544 <__assert_fail@plt+0x1130>
   12538:	cmp	r0, #9
   1253c:	bne	125b8 <__assert_fail@plt+0x11a4>
   12540:	mov	r5, #8
   12544:	mov	r1, r5
   12548:	ldr	r0, [r7, #104]	; 0x68
   1254c:	bl	19b3c <__assert_fail@plt+0x8728>
   12550:	ldrb	r3, [r7, #108]	; 0x6c
   12554:	cmp	r3, #0
   12558:	movne	r2, #32
   1255c:	sub	r1, r5, r1
   12560:	addne	r3, r4, r1
   12564:	bne	12578 <__assert_fail@plt+0x1164>
   12568:	strb	r6, [r4]
   1256c:	mov	r3, #1
   12570:	b	12584 <__assert_fail@plt+0x1170>
   12574:	strb	r2, [r4], #1
   12578:	cmp	r4, r3
   1257c:	bne	12574 <__assert_fail@plt+0x1160>
   12580:	mov	r3, r1
   12584:	cmp	r1, #0
   12588:	bge	12660 <__assert_fail@plt+0x124c>
   1258c:	ldr	r0, [r7, #104]	; 0x68
   12590:	cmp	r0, #0
   12594:	beq	125b0 <__assert_fail@plt+0x119c>
   12598:	rsb	r2, r1, #0
   1259c:	cmp	r0, r2
   125a0:	movle	r2, #0
   125a4:	strle	r2, [r7, #104]	; 0x68
   125a8:	bgt	12660 <__assert_fail@plt+0x124c>
   125ac:	mov	r0, r3
   125b0:	add	sp, sp, #20
   125b4:	pop	{r4, r5, r6, r7, pc}
   125b8:	bl	112a0 <__ctype_b_loc@plt>
   125bc:	lsl	r3, r6, #1
   125c0:	ldr	r2, [r0]
   125c4:	ldrh	r3, [r2, r3]
   125c8:	tst	r3, #16384	; 0x4000
   125cc:	bne	12670 <__assert_fail@plt+0x125c>
   125d0:	ldrb	r3, [r7, #109]	; 0x6d
   125d4:	cmp	r3, #0
   125d8:	beq	1261c <__assert_fail@plt+0x1208>
   125dc:	mov	r3, #92	; 0x5c
   125e0:	strb	r3, [r4]
   125e4:	mov	r2, #4
   125e8:	ldr	r3, [pc, #148]	; 12684 <__assert_fail@plt+0x1270>
   125ec:	str	r6, [sp]
   125f0:	mov	r1, #1
   125f4:	add	r0, sp, #12
   125f8:	bl	112f4 <__sprintf_chk@plt>
   125fc:	ldrb	r3, [sp, #12]
   12600:	strb	r3, [r4, #1]
   12604:	ldrb	r3, [sp, #13]
   12608:	strb	r3, [r4, #2]
   1260c:	ldrb	r3, [sp, #14]
   12610:	strb	r3, [r4, #3]
   12614:	mov	r3, #4
   12618:	b	12644 <__assert_fail@plt+0x1230>
   1261c:	ldrb	r1, [r7, #110]	; 0x6e
   12620:	cmp	r1, #0
   12624:	beq	1264c <__assert_fail@plt+0x1238>
   12628:	tst	r6, #128	; 0x80
   1262c:	bne	125dc <__assert_fail@plt+0x11c8>
   12630:	mov	r3, #94	; 0x5e
   12634:	strb	r3, [r4]
   12638:	mov	r3, #2
   1263c:	eor	r6, r6, #64	; 0x40
   12640:	strb	r6, [r4, #1]
   12644:	mov	r1, r3
   12648:	b	12660 <__assert_fail@plt+0x124c>
   1264c:	cmp	r6, #8
   12650:	strb	r6, [r4]
   12654:	mov	r3, #1
   12658:	mvneq	r1, #0
   1265c:	beq	1258c <__assert_fail@plt+0x1178>
   12660:	ldr	r2, [r7, #104]	; 0x68
   12664:	add	r1, r2, r1
   12668:	str	r1, [r7, #104]	; 0x68
   1266c:	b	125ac <__assert_fail@plt+0x1198>
   12670:	strb	r6, [r4]
   12674:	mov	r3, #1
   12678:	b	12644 <__assert_fail@plt+0x1230>
   1267c:	andeq	ip, r2, r0, asr #2
   12680:	strdeq	ip, [r2], -r0
   12684:	andeq	sl, r1, r2, asr #1
   12688:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1268c:	mov	r6, r0
   12690:	ldr	r4, [pc, #280]	; 127b0 <__assert_fail@plt+0x139c>
   12694:	ldr	r5, [pc, #280]	; 127b4 <__assert_fail@plt+0x13a0>
   12698:	mvn	r2, #0
   1269c:	ldr	r3, [r4, #116]	; 0x74
   126a0:	mov	r1, #1
   126a4:	str	r3, [sp, #4]
   126a8:	ldr	r3, [r5, #40]	; 0x28
   126ac:	ldr	r0, [r4, #112]	; 0x70
   126b0:	str	r3, [sp]
   126b4:	ldr	r3, [pc, #252]	; 127b8 <__assert_fail@plt+0x13a4>
   126b8:	bl	112f4 <__sprintf_chk@plt>
   126bc:	ldr	r9, [r5, #40]	; 0x28
   126c0:	ldr	r7, [r4, #112]	; 0x70
   126c4:	ldr	r3, [r4, #116]	; 0x74
   126c8:	add	r3, r3, #1
   126cc:	str	r3, [r4, #116]	; 0x74
   126d0:	sub	r0, r0, r9
   126d4:	add	r7, r7, r0
   126d8:	mov	r8, r7
   126dc:	sub	r3, r9, r8
   126e0:	add	r3, r7, r3
   126e4:	cmp	r3, #0
   126e8:	bgt	12748 <__assert_fail@plt+0x1334>
   126ec:	ldr	r3, [r5]
   126f0:	ldrb	r0, [r5, #44]	; 0x2c
   126f4:	cmp	r3, #1
   126f8:	ble	12778 <__assert_fail@plt+0x1364>
   126fc:	cmp	r0, #9
   12700:	bne	1276c <__assert_fail@plt+0x1358>
   12704:	ldr	r3, [r4, #120]	; 0x78
   12708:	ldr	r5, [r5, #40]	; 0x28
   1270c:	mov	r7, #32
   12710:	sub	r5, r3, r5
   12714:	cmp	r5, #0
   12718:	bgt	12758 <__assert_fail@plt+0x1344>
   1271c:	ldrb	r3, [r4, #124]	; 0x7c
   12720:	cmp	r3, #0
   12724:	beq	12740 <__assert_fail@plt+0x132c>
   12728:	ldrb	r3, [r4, #4]
   1272c:	cmp	r3, #0
   12730:	ldreq	r3, [r4, #104]	; 0x68
   12734:	ldreq	r2, [r4, #120]	; 0x78
   12738:	addeq	r3, r3, r2
   1273c:	streq	r3, [r4, #104]	; 0x68
   12740:	add	sp, sp, #12
   12744:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12748:	ldr	r3, [r6]
   1274c:	ldrb	r0, [r8], #1
   12750:	blx	r3
   12754:	b	126dc <__assert_fail@plt+0x12c8>
   12758:	ldr	r3, [r6]
   1275c:	mov	r0, r7
   12760:	blx	r3
   12764:	sub	r5, r5, #1
   12768:	b	12714 <__assert_fail@plt+0x1300>
   1276c:	ldr	r3, [r6]
   12770:	blx	r3
   12774:	b	1271c <__assert_fail@plt+0x1308>
   12778:	ldr	r3, [r6]
   1277c:	blx	r3
   12780:	ldrb	r3, [r5, #44]	; 0x2c
   12784:	cmp	r3, #9
   12788:	bne	1271c <__assert_fail@plt+0x1308>
   1278c:	ldr	r6, [r4, #72]	; 0x48
   12790:	ldr	r5, [r5, #28]
   12794:	mov	r0, r6
   12798:	mov	r1, r5
   1279c:	bl	19b3c <__assert_fail@plt+0x8728>
   127a0:	sub	r1, r5, r1
   127a4:	add	r1, r1, r6
   127a8:	str	r1, [r4, #72]	; 0x48
   127ac:	b	1271c <__assert_fail@plt+0x1308>
   127b0:	strdeq	ip, [r2], -r0
   127b4:	andeq	ip, r2, r0, asr #2
   127b8:	andeq	sl, r1, r7, asr #1
   127bc:	push	{r4, r5, r6, lr}
   127c0:	mov	r4, r1
   127c4:	ldr	r1, [pc, #204]	; 12898 <__assert_fail@plt+0x1484>
   127c8:	mov	r6, r0
   127cc:	bl	110e4 <strcmp@plt>
   127d0:	ldr	r5, [pc, #196]	; 1289c <__assert_fail@plt+0x1488>
   127d4:	cmp	r0, #0
   127d8:	bne	12858 <__assert_fail@plt+0x1444>
   127dc:	mov	r2, #5
   127e0:	ldr	r1, [pc, #184]	; 128a0 <__assert_fail@plt+0x148c>
   127e4:	bl	1118c <dcgettext@plt>
   127e8:	ldr	r3, [pc, #180]	; 128a4 <__assert_fail@plt+0x1490>
   127ec:	ldr	r3, [r3]
   127f0:	str	r3, [r4]
   127f4:	mov	r3, #1
   127f8:	strb	r3, [r5, #125]	; 0x7d
   127fc:	str	r0, [r4, #4]
   12800:	ldr	r0, [r4]
   12804:	cmp	r0, #0
   12808:	bne	12870 <__assert_fail@plt+0x145c>
   1280c:	ldrb	r4, [r5, #127]	; 0x7f
   12810:	mov	r3, #1
   12814:	strb	r3, [r5, #126]	; 0x7e
   12818:	cmp	r4, #0
   1281c:	movne	r4, r0
   12820:	bne	12850 <__assert_fail@plt+0x143c>
   12824:	bl	112e8 <__errno_location@plt>
   12828:	mov	r2, r6
   1282c:	mov	r1, #3
   12830:	ldr	r5, [r0]
   12834:	mov	r0, r4
   12838:	bl	174fc <__assert_fail@plt+0x60e8>
   1283c:	ldr	r2, [pc, #100]	; 128a8 <__assert_fail@plt+0x1494>
   12840:	mov	r1, r5
   12844:	mov	r3, r0
   12848:	mov	r0, r4
   1284c:	bl	11228 <error@plt>
   12850:	mov	r0, r4
   12854:	pop	{r4, r5, r6, pc}
   12858:	str	r6, [r4, #4]
   1285c:	ldr	r1, [pc, #72]	; 128ac <__assert_fail@plt+0x1498>
   12860:	mov	r0, r6
   12864:	bl	14590 <__assert_fail@plt+0x317c>
   12868:	str	r0, [r4]
   1286c:	b	12800 <__assert_fail@plt+0x13ec>
   12870:	mov	r1, #2
   12874:	bl	14468 <__assert_fail@plt+0x3054>
   12878:	mov	r3, #0
   1287c:	str	r3, [r4, #8]
   12880:	strb	r3, [r4, #37]	; 0x25
   12884:	ldr	r3, [r5, #128]	; 0x80
   12888:	mov	r4, #1
   1288c:	add	r3, r3, #1
   12890:	str	r3, [r5, #128]	; 0x80
   12894:	b	12850 <__assert_fail@plt+0x143c>
   12898:	andeq	fp, r1, r9, asr sl
   1289c:	strdeq	ip, [r2], -r0
   128a0:	andeq	sl, r1, fp, asr #1
   128a4:	andeq	ip, r2, r0, ror #3
   128a8:	andeq	fp, r1, r4, ror r5
   128ac:	andeq	fp, r1, pc, asr #5
   128b0:	ldr	r3, [r0, #8]
   128b4:	cmp	r3, #3
   128b8:	bxeq	lr
   128bc:	push	{r4, r5, r6, lr}
   128c0:	mov	r4, r0
   128c4:	bl	112e8 <__errno_location@plt>
   128c8:	ldr	r5, [r0]
   128cc:	mov	r6, r0
   128d0:	ldr	r0, [r4]
   128d4:	bl	11210 <ferror_unlocked@plt>
   128d8:	cmp	r0, #0
   128dc:	ldr	r0, [r4]
   128e0:	moveq	r5, #0
   128e4:	bl	11324 <fileno@plt>
   128e8:	cmp	r0, #0
   128ec:	ldr	r0, [r4]
   128f0:	bne	12924 <__assert_fail@plt+0x1510>
   128f4:	bl	113a8 <clearerr_unlocked@plt>
   128f8:	cmp	r5, #0
   128fc:	beq	12940 <__assert_fail@plt+0x152c>
   12900:	ldr	r2, [r4, #4]
   12904:	mov	r1, #3
   12908:	mov	r0, #0
   1290c:	bl	174fc <__assert_fail@plt+0x60e8>
   12910:	ldr	r2, [pc, #136]	; 129a0 <__assert_fail@plt+0x158c>
   12914:	mov	r1, r5
   12918:	mov	r3, r0
   1291c:	mov	r0, #1
   12920:	bl	11228 <error@plt>
   12924:	bl	14498 <__assert_fail@plt+0x3084>
   12928:	cmp	r0, #0
   1292c:	beq	128f8 <__assert_fail@plt+0x14e4>
   12930:	cmp	r5, #0
   12934:	bne	12900 <__assert_fail@plt+0x14ec>
   12938:	ldr	r5, [r6]
   1293c:	b	128f8 <__assert_fail@plt+0x14e4>
   12940:	ldr	r3, [pc, #92]	; 129a4 <__assert_fail@plt+0x1590>
   12944:	ldrb	r2, [r3, #4]
   12948:	cmp	r2, #0
   1294c:	movne	r2, #3
   12950:	strne	r2, [r4, #8]
   12954:	strne	r5, [r4, #28]
   12958:	bne	12974 <__assert_fail@plt+0x1560>
   1295c:	ldr	r1, [pc, #68]	; 129a8 <__assert_fail@plt+0x1594>
   12960:	ldr	r2, [r3]
   12964:	mov	ip, #3
   12968:	ldr	r1, [r1]
   1296c:	cmp	r1, #0
   12970:	bne	12984 <__assert_fail@plt+0x1570>
   12974:	ldr	r2, [r3, #8]
   12978:	sub	r2, r2, #1
   1297c:	str	r2, [r3, #8]
   12980:	pop	{r4, r5, r6, pc}
   12984:	ldr	r0, [r2, #24]
   12988:	str	ip, [r2, #8]
   1298c:	cmp	r0, #0
   12990:	streq	r0, [r2, #28]
   12994:	sub	r1, r1, #1
   12998:	add	r2, r2, #40	; 0x28
   1299c:	b	1296c <__assert_fail@plt+0x1558>
   129a0:	andeq	fp, r1, r4, ror r5
   129a4:	strdeq	ip, [r2], -r0
   129a8:	andeq	ip, r2, r0, asr #2
   129ac:	push	{r4, r5, r6, r7, r8, lr}
   129b0:	mov	r5, r0
   129b4:	ldr	r7, [r0]
   129b8:	mov	r8, r1
   129bc:	mov	r0, r7
   129c0:	bl	11180 <getc_unlocked@plt>
   129c4:	cmp	r0, #12
   129c8:	mov	r6, r0
   129cc:	bne	129fc <__assert_fail@plt+0x15e8>
   129d0:	ldrb	r3, [r5, #37]	; 0x25
   129d4:	cmp	r3, #0
   129d8:	beq	129fc <__assert_fail@plt+0x15e8>
   129dc:	mov	r0, r7
   129e0:	bl	11180 <getc_unlocked@plt>
   129e4:	cmp	r0, #10
   129e8:	mov	r6, r0
   129ec:	bne	129fc <__assert_fail@plt+0x15e8>
   129f0:	mov	r0, r7
   129f4:	bl	11180 <getc_unlocked@plt>
   129f8:	mov	r6, r0
   129fc:	ldr	r4, [pc, #232]	; 12aec <__assert_fail@plt+0x16d8>
   12a00:	mov	r3, #0
   12a04:	strb	r3, [r5, #37]	; 0x25
   12a08:	ldrb	r3, [r4, #132]	; 0x84
   12a0c:	mov	r0, r6
   12a10:	cmp	r3, #0
   12a14:	movne	r3, #1
   12a18:	strbne	r3, [r5, #37]	; 0x25
   12a1c:	cmp	r0, #10
   12a20:	beq	12a80 <__assert_fail@plt+0x166c>
   12a24:	cmp	r0, #12
   12a28:	bne	12acc <__assert_fail@plt+0x16b8>
   12a2c:	ldrb	r3, [r4, #132]	; 0x84
   12a30:	cmp	r3, #0
   12a34:	beq	12a60 <__assert_fail@plt+0x164c>
   12a38:	ldrb	r3, [r4, #4]
   12a3c:	cmp	r3, #0
   12a40:	movne	r3, #0
   12a44:	strbne	r3, [r5, #37]	; 0x25
   12a48:	bne	12a60 <__assert_fail@plt+0x164c>
   12a4c:	ldr	r2, [pc, #156]	; 12af0 <__assert_fail@plt+0x16dc>
   12a50:	ldr	r1, [r4]
   12a54:	ldr	r2, [r2]
   12a58:	cmp	r2, #0
   12a5c:	bne	12abc <__assert_fail@plt+0x16a8>
   12a60:	mov	r0, r7
   12a64:	bl	11180 <getc_unlocked@plt>
   12a68:	cmp	r0, #10
   12a6c:	beq	12a78 <__assert_fail@plt+0x1664>
   12a70:	mov	r1, r7
   12a74:	bl	112dc <ungetc@plt>
   12a78:	mov	r0, r5
   12a7c:	bl	11e68 <__assert_fail@plt+0xa54>
   12a80:	ldr	r3, [pc, #104]	; 12af0 <__assert_fail@plt+0x16dc>
   12a84:	ldrb	r2, [r3, #45]	; 0x2d
   12a88:	cmp	r2, #0
   12a8c:	popeq	{r4, r5, r6, r7, r8, pc}
   12a90:	ldrb	r1, [r4, #4]
   12a94:	eor	r1, r1, #1
   12a98:	cmp	r8, #1
   12a9c:	orreq	r1, r1, #1
   12aa0:	cmp	r1, #0
   12aa4:	popeq	{r4, r5, r6, r7, r8, pc}
   12aa8:	cmp	r6, #12
   12aac:	ldrne	r2, [r3, #48]	; 0x30
   12ab0:	addne	r2, r2, #1
   12ab4:	strne	r2, [r3, #48]	; 0x30
   12ab8:	pop	{r4, r5, r6, r7, r8, pc}
   12abc:	strb	r3, [r1, #37]	; 0x25
   12ac0:	sub	r2, r2, #1
   12ac4:	add	r1, r1, #40	; 0x28
   12ac8:	b	12a58 <__assert_fail@plt+0x1644>
   12acc:	cmn	r0, #1
   12ad0:	bne	12ae0 <__assert_fail@plt+0x16cc>
   12ad4:	mov	r0, r5
   12ad8:	bl	128b0 <__assert_fail@plt+0x149c>
   12adc:	b	12a80 <__assert_fail@plt+0x166c>
   12ae0:	mov	r0, r7
   12ae4:	bl	11180 <getc_unlocked@plt>
   12ae8:	b	12a1c <__assert_fail@plt+0x1608>
   12aec:	strdeq	ip, [r2], -r0
   12af0:	andeq	ip, r2, r0, asr #2
   12af4:	push	{r4, r5, r6, lr}
   12af8:	mov	r5, r0
   12afc:	ldr	r4, [r0]
   12b00:	mov	r0, r4
   12b04:	bl	11180 <getc_unlocked@plt>
   12b08:	cmp	r0, #10
   12b0c:	bne	12b14 <__assert_fail@plt+0x1700>
   12b10:	pop	{r4, r5, r6, pc}
   12b14:	cmp	r0, #12
   12b18:	bne	12b54 <__assert_fail@plt+0x1740>
   12b1c:	mov	r0, r4
   12b20:	bl	11180 <getc_unlocked@plt>
   12b24:	cmp	r0, #10
   12b28:	beq	12b34 <__assert_fail@plt+0x1720>
   12b2c:	mov	r1, r4
   12b30:	bl	112dc <ungetc@plt>
   12b34:	ldr	r3, [pc, #44]	; 12b68 <__assert_fail@plt+0x1754>
   12b38:	mov	r0, r5
   12b3c:	pop	{r4, r5, r6, lr}
   12b40:	ldrb	r2, [r3, #133]	; 0x85
   12b44:	cmp	r2, #0
   12b48:	movne	r2, #1
   12b4c:	strbne	r2, [r3, #134]	; 0x86
   12b50:	b	11e68 <__assert_fail@plt+0xa54>
   12b54:	cmn	r0, #1
   12b58:	bne	12b00 <__assert_fail@plt+0x16ec>
   12b5c:	mov	r0, r5
   12b60:	pop	{r4, r5, r6, lr}
   12b64:	b	128b0 <__assert_fail@plt+0x149c>
   12b68:	strdeq	ip, [r2], -r0
   12b6c:	ldr	r3, [pc, #184]	; 12c2c <__assert_fail@plt+0x1818>
   12b70:	ldr	r2, [r3, #136]	; 0x88
   12b74:	cmp	r2, #0
   12b78:	ble	12ba4 <__assert_fail@plt+0x1790>
   12b7c:	push	{r4, r5, r6, r7, r8, lr}
   12b80:	mov	r4, r3
   12b84:	ldr	r3, [pc, #164]	; 12c30 <__assert_fail@plt+0x181c>
   12b88:	ldr	r5, [r4, #32]
   12b8c:	ldr	r7, [r3, #16]
   12b90:	ldr	r3, [r4, #136]	; 0x88
   12b94:	cmp	r3, #0
   12b98:	pople	{r4, r5, r6, r7, r8, pc}
   12b9c:	mov	r6, r7
   12ba0:	b	12bec <__assert_fail@plt+0x17d8>
   12ba4:	ldr	r3, [r3, #76]	; 0x4c
   12ba8:	cmp	r3, #0
   12bac:	bxle	lr
   12bb0:	b	1233c <__assert_fail@plt+0xf28>
   12bb4:	ldrb	r3, [r6], #1
   12bb8:	cmp	r3, #32
   12bbc:	ldr	r3, [r4, #76]	; 0x4c
   12bc0:	addeq	r3, r3, #1
   12bc4:	streq	r3, [r4, #76]	; 0x4c
   12bc8:	beq	12bec <__assert_fail@plt+0x17d8>
   12bcc:	cmp	r3, #0
   12bd0:	ble	12bd8 <__assert_fail@plt+0x17c4>
   12bd4:	bl	1233c <__assert_fail@plt+0xf28>
   12bd8:	ldrb	r0, [r6, #-1]
   12bdc:	bl	11408 <putchar_unlocked@plt>
   12be0:	ldr	r3, [r4, #72]	; 0x48
   12be4:	add	r3, r3, #1
   12be8:	str	r3, [r4, #72]	; 0x48
   12bec:	sub	r3, r5, r6
   12bf0:	add	r3, r7, r3
   12bf4:	cmp	r3, #0
   12bf8:	bgt	12bb4 <__assert_fail@plt+0x17a0>
   12bfc:	bic	r3, r5, r5, asr #31
   12c00:	sub	r5, r5, #1
   12c04:	add	r7, r7, r3
   12c08:	sub	r5, r5, r3
   12c0c:	ldr	r3, [r4, #76]	; 0x4c
   12c10:	cmp	r3, #0
   12c14:	ble	12c1c <__assert_fail@plt+0x1808>
   12c18:	bl	1233c <__assert_fail@plt+0xf28>
   12c1c:	ldr	r3, [r4, #136]	; 0x88
   12c20:	sub	r3, r3, #1
   12c24:	str	r3, [r4, #136]	; 0x88
   12c28:	b	12b90 <__assert_fail@plt+0x177c>
   12c2c:	strdeq	ip, [r2], -r0
   12c30:	andeq	ip, r2, r0, asr #2
   12c34:	ldr	r3, [pc, #84]	; 12c90 <__assert_fail@plt+0x187c>
   12c38:	push	{r4, r5, r6, lr}
   12c3c:	mov	r5, r0
   12c40:	ldr	r2, [r0, #32]
   12c44:	ldr	r0, [r3, #32]
   12c48:	str	r2, [r3, #140]	; 0x8c
   12c4c:	cmp	r2, r0
   12c50:	mov	r4, r3
   12c54:	ble	12c68 <__assert_fail@plt+0x1854>
   12c58:	sub	r0, r2, r0
   12c5c:	bl	123c8 <__assert_fail@plt+0xfb4>
   12c60:	mov	r3, #0
   12c64:	str	r3, [r4, #140]	; 0x8c
   12c68:	ldrb	r3, [r4, #144]	; 0x90
   12c6c:	cmp	r3, #0
   12c70:	beq	12c78 <__assert_fail@plt+0x1864>
   12c74:	bl	12b6c <__assert_fail@plt+0x1758>
   12c78:	ldrb	r3, [r5, #36]	; 0x24
   12c7c:	cmp	r3, #0
   12c80:	popeq	{r4, r5, r6, pc}
   12c84:	add	r0, r5, #16
   12c88:	pop	{r4, r5, r6, lr}
   12c8c:	b	12688 <__assert_fail@plt+0x1274>
   12c90:	strdeq	ip, [r2], -r0
   12c94:	ldr	r3, [pc, #128]	; 12d1c <__assert_fail@plt+0x1908>
   12c98:	push	{r4, r5, r6, lr}
   12c9c:	mov	r5, r0
   12ca0:	ldrb	r2, [r3, #80]	; 0x50
   12ca4:	cmp	r2, #0
   12ca8:	beq	12d00 <__assert_fail@plt+0x18ec>
   12cac:	cmp	r0, #32
   12cb0:	bne	12cc4 <__assert_fail@plt+0x18b0>
   12cb4:	ldr	r2, [r3, #76]	; 0x4c
   12cb8:	add	r2, r2, #1
   12cbc:	str	r2, [r3, #76]	; 0x4c
   12cc0:	pop	{r4, r5, r6, pc}
   12cc4:	mov	r4, r3
   12cc8:	ldr	r3, [r3, #76]	; 0x4c
   12ccc:	cmp	r3, #0
   12cd0:	ble	12cd8 <__assert_fail@plt+0x18c4>
   12cd4:	bl	1233c <__assert_fail@plt+0xf28>
   12cd8:	bl	112a0 <__ctype_b_loc@plt>
   12cdc:	lsl	r3, r5, #1
   12ce0:	ldr	r2, [r0]
   12ce4:	ldrh	r3, [r2, r3]
   12ce8:	tst	r3, #16384	; 0x4000
   12cec:	bne	12d0c <__assert_fail@plt+0x18f8>
   12cf0:	cmp	r5, #8
   12cf4:	ldreq	r3, [r4, #72]	; 0x48
   12cf8:	subeq	r3, r3, #1
   12cfc:	beq	12d14 <__assert_fail@plt+0x1900>
   12d00:	mov	r0, r5
   12d04:	pop	{r4, r5, r6, lr}
   12d08:	b	11408 <putchar_unlocked@plt>
   12d0c:	ldr	r3, [r4, #72]	; 0x48
   12d10:	add	r3, r3, #1
   12d14:	str	r3, [r4, #72]	; 0x48
   12d18:	b	12d00 <__assert_fail@plt+0x18ec>
   12d1c:	strdeq	ip, [r2], -r0
   12d20:	push	{r4, r5, r6, r7, r8, lr}
   12d24:	mov	r7, r0
   12d28:	ldr	r6, [r0, #20]
   12d2c:	ldr	r4, [pc, #272]	; 12e44 <__assert_fail@plt+0x1a30>
   12d30:	add	r3, r6, #1
   12d34:	str	r3, [r0, #20]
   12d38:	ldr	r3, [r4, #148]	; 0x94
   12d3c:	ldr	r8, [r4, #20]
   12d40:	ldr	r5, [r3, r6, lsl #2]
   12d44:	add	r3, r3, r6, lsl #2
   12d48:	add	r5, r8, r5
   12d4c:	ldr	r3, [r3, #4]
   12d50:	add	r8, r8, r3
   12d54:	mov	r3, #1
   12d58:	strb	r3, [r4, #152]	; 0x98
   12d5c:	ldrb	r3, [r4, #96]	; 0x60
   12d60:	cmp	r3, #0
   12d64:	beq	12d6c <__assert_fail@plt+0x1958>
   12d68:	bl	12418 <__assert_fail@plt+0x1004>
   12d6c:	ldr	r3, [r7, #8]
   12d70:	cmp	r3, #1
   12d74:	bne	12dc4 <__assert_fail@plt+0x19b0>
   12d78:	ldr	r2, [pc, #200]	; 12e48 <__assert_fail@plt+0x1a34>
   12d7c:	ldr	r0, [r4]
   12d80:	mov	lr, #2
   12d84:	ldr	ip, [r2]
   12d88:	mov	r1, r0
   12d8c:	cmp	r3, ip
   12d90:	ble	12db4 <__assert_fail@plt+0x19a0>
   12d94:	ldr	r3, [r0, #28]
   12d98:	cmp	r3, #0
   12d9c:	bgt	12dc4 <__assert_fail@plt+0x19b0>
   12da0:	ldrb	r3, [r2, #52]	; 0x34
   12da4:	cmp	r3, #0
   12da8:	strbeq	r3, [r4, #152]	; 0x98
   12dac:	mov	r0, #1
   12db0:	pop	{r4, r5, r6, r7, r8, pc}
   12db4:	str	lr, [r1, #8]
   12db8:	add	r3, r3, #1
   12dbc:	add	r1, r1, #40	; 0x28
   12dc0:	b	12d8c <__assert_fail@plt+0x1978>
   12dc4:	ldr	r3, [r4, #32]
   12dc8:	ldr	r0, [r4, #140]	; 0x8c
   12dcc:	cmp	r3, r0
   12dd0:	bge	12de4 <__assert_fail@plt+0x19d0>
   12dd4:	sub	r0, r0, r3
   12dd8:	bl	123c8 <__assert_fail@plt+0xfb4>
   12ddc:	mov	r3, #0
   12de0:	str	r3, [r4, #140]	; 0x8c
   12de4:	ldrb	r3, [r4, #144]	; 0x90
   12de8:	cmp	r3, #0
   12dec:	beq	12df4 <__assert_fail@plt+0x19e0>
   12df0:	bl	12b6c <__assert_fail@plt+0x1758>
   12df4:	cmp	r5, r8
   12df8:	bne	12e38 <__assert_fail@plt+0x1a24>
   12dfc:	ldr	r3, [r4, #76]	; 0x4c
   12e00:	cmp	r3, #0
   12e04:	bne	12dac <__assert_fail@plt+0x1998>
   12e08:	ldr	r3, [r4, #156]	; 0x9c
   12e0c:	ldr	r2, [r7, #32]
   12e10:	ldr	r1, [r4, #32]
   12e14:	ldr	r3, [r3, r6, lsl #2]
   12e18:	ldr	r0, [r4, #84]	; 0x54
   12e1c:	add	r3, r2, r3
   12e20:	sub	r2, r2, r1
   12e24:	cmp	r2, r0
   12e28:	str	r3, [r4, #72]	; 0x48
   12e2c:	subeq	r3, r3, r1
   12e30:	streq	r3, [r4, #72]	; 0x48
   12e34:	b	12dac <__assert_fail@plt+0x1998>
   12e38:	ldrb	r0, [r5], #1
   12e3c:	bl	12c94 <__assert_fail@plt+0x1880>
   12e40:	b	12df4 <__assert_fail@plt+0x19e0>
   12e44:	strdeq	ip, [r2], -r0
   12e48:	andeq	ip, r2, r0, asr #2
   12e4c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12e50:	mov	r5, r0
   12e54:	ldr	r0, [r0]
   12e58:	bl	11180 <getc_unlocked@plt>
   12e5c:	ldr	r4, [pc, #676]	; 13108 <__assert_fail@plt+0x1cf4>
   12e60:	ldr	r8, [r4, #104]	; 0x68
   12e64:	cmp	r0, #12
   12e68:	mov	r6, r0
   12e6c:	bne	12e9c <__assert_fail@plt+0x1a88>
   12e70:	ldrb	r3, [r5, #37]	; 0x25
   12e74:	cmp	r3, #0
   12e78:	beq	12e9c <__assert_fail@plt+0x1a88>
   12e7c:	ldr	r0, [r5]
   12e80:	bl	11180 <getc_unlocked@plt>
   12e84:	cmp	r0, #10
   12e88:	mov	r6, r0
   12e8c:	bne	12e9c <__assert_fail@plt+0x1a88>
   12e90:	ldr	r0, [r5]
   12e94:	bl	11180 <getc_unlocked@plt>
   12e98:	mov	r6, r0
   12e9c:	mov	r3, #0
   12ea0:	cmp	r6, #10
   12ea4:	strb	r3, [r5, #37]	; 0x25
   12ea8:	beq	12f28 <__assert_fail@plt+0x1b14>
   12eac:	cmp	r6, #12
   12eb0:	beq	12ec8 <__assert_fail@plt+0x1ab4>
   12eb4:	cmn	r6, #1
   12eb8:	bne	12f1c <__assert_fail@plt+0x1b08>
   12ebc:	mov	r0, r5
   12ec0:	bl	128b0 <__assert_fail@plt+0x149c>
   12ec4:	b	12f14 <__assert_fail@plt+0x1b00>
   12ec8:	ldr	r0, [r5]
   12ecc:	bl	11180 <getc_unlocked@plt>
   12ed0:	cmp	r0, #10
   12ed4:	beq	12ee0 <__assert_fail@plt+0x1acc>
   12ed8:	ldr	r1, [r5]
   12edc:	bl	112dc <ungetc@plt>
   12ee0:	ldrb	r2, [r4, #96]	; 0x60
   12ee4:	mov	r3, #1
   12ee8:	strb	r3, [r4, #160]	; 0xa0
   12eec:	cmp	r2, #0
   12ef0:	beq	130d4 <__assert_fail@plt+0x1cc0>
   12ef4:	ldr	r2, [pc, #528]	; 1310c <__assert_fail@plt+0x1cf8>
   12ef8:	ldrb	r2, [r2, #4]
   12efc:	cmp	r2, #0
   12f00:	bne	130d4 <__assert_fail@plt+0x1cc0>
   12f04:	strb	r3, [r4, #152]	; 0x98
   12f08:	bl	12418 <__assert_fail@plt+0x1004>
   12f0c:	mov	r0, r5
   12f10:	bl	11e68 <__assert_fail@plt+0xa54>
   12f14:	mov	r0, #1
   12f18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12f1c:	uxtb	r0, r6
   12f20:	bl	12510 <__assert_fail@plt+0x10fc>
   12f24:	mov	r7, r0
   12f28:	ldrb	r3, [r4, #124]	; 0x7c
   12f2c:	cmp	r3, #0
   12f30:	beq	12f48 <__assert_fail@plt+0x1b34>
   12f34:	ldr	r2, [r4, #104]	; 0x68
   12f38:	ldr	r3, [r4, #164]	; 0xa4
   12f3c:	cmp	r2, r3
   12f40:	strgt	r8, [r4, #104]	; 0x68
   12f44:	bgt	13084 <__assert_fail@plt+0x1c70>
   12f48:	ldr	r2, [r5, #16]
   12f4c:	ldr	r3, [pc, #444]	; 13110 <__assert_fail@plt+0x1cfc>
   12f50:	cmp	r2, r3
   12f54:	beq	13004 <__assert_fail@plt+0x1bf0>
   12f58:	mov	r3, #1
   12f5c:	strb	r3, [r4, #152]	; 0x98
   12f60:	ldrb	r3, [r4, #96]	; 0x60
   12f64:	cmp	r3, #0
   12f68:	beq	12f80 <__assert_fail@plt+0x1b6c>
   12f6c:	ldr	r3, [pc, #408]	; 1310c <__assert_fail@plt+0x1cf8>
   12f70:	ldrb	r3, [r3, #4]
   12f74:	cmp	r3, #0
   12f78:	bne	12f80 <__assert_fail@plt+0x1b6c>
   12f7c:	bl	12418 <__assert_fail@plt+0x1004>
   12f80:	ldrb	r3, [r4, #4]
   12f84:	cmp	r3, #0
   12f88:	beq	12fd4 <__assert_fail@plt+0x1bc0>
   12f8c:	ldrb	r3, [r4, #168]	; 0xa8
   12f90:	cmp	r3, #0
   12f94:	beq	12fd4 <__assert_fail@plt+0x1bc0>
   12f98:	ldr	r9, [r4]
   12f9c:	mov	r8, #1
   12fa0:	mov	r3, #0
   12fa4:	ldr	sl, [r4, #136]	; 0x88
   12fa8:	str	r3, [r4, #136]	; 0x88
   12fac:	cmp	r8, sl
   12fb0:	ble	1308c <__assert_fail@plt+0x1c78>
   12fb4:	ldr	r3, [r5, #32]
   12fb8:	str	r3, [r4, #140]	; 0x8c
   12fbc:	ldrb	r3, [r4, #124]	; 0x7c
   12fc0:	cmp	r3, #0
   12fc4:	ldrne	r3, [r4, #164]	; 0xa4
   12fc8:	str	r3, [r4, #76]	; 0x4c
   12fcc:	mov	r3, #0
   12fd0:	strb	r3, [r4, #168]	; 0xa8
   12fd4:	ldr	r3, [r4, #32]
   12fd8:	ldr	r0, [r4, #140]	; 0x8c
   12fdc:	cmp	r3, r0
   12fe0:	bge	12ff4 <__assert_fail@plt+0x1be0>
   12fe4:	sub	r0, r0, r3
   12fe8:	bl	123c8 <__assert_fail@plt+0xfb4>
   12fec:	mov	r3, #0
   12ff0:	str	r3, [r4, #140]	; 0x8c
   12ff4:	ldrb	r3, [r4, #144]	; 0x90
   12ff8:	cmp	r3, #0
   12ffc:	beq	13004 <__assert_fail@plt+0x1bf0>
   13000:	bl	12b6c <__assert_fail@plt+0x1758>
   13004:	ldrb	r3, [r5, #36]	; 0x24
   13008:	cmp	r3, #0
   1300c:	beq	13018 <__assert_fail@plt+0x1c04>
   13010:	add	r0, r5, #16
   13014:	bl	12688 <__assert_fail@plt+0x1274>
   13018:	cmp	r6, #10
   1301c:	mov	r3, #0
   13020:	ldrne	r6, [r4, #100]	; 0x64
   13024:	strb	r3, [r4, #169]	; 0xa9
   13028:	addne	r7, r6, r7
   1302c:	beq	12f14 <__assert_fail@plt+0x1b00>
   13030:	cmp	r6, r7
   13034:	bne	130ac <__assert_fail@plt+0x1c98>
   13038:	ldr	r0, [r5]
   1303c:	bl	11180 <getc_unlocked@plt>
   13040:	cmp	r0, #10
   13044:	beq	12f14 <__assert_fail@plt+0x1b00>
   13048:	cmp	r0, #12
   1304c:	beq	130bc <__assert_fail@plt+0x1ca8>
   13050:	cmn	r0, #1
   13054:	beq	12ebc <__assert_fail@plt+0x1aa8>
   13058:	uxtb	r0, r0
   1305c:	ldr	r6, [r4, #104]	; 0x68
   13060:	bl	12510 <__assert_fail@plt+0x10fc>
   13064:	ldrb	r3, [r4, #124]	; 0x7c
   13068:	cmp	r3, #0
   1306c:	beq	130e8 <__assert_fail@plt+0x1cd4>
   13070:	ldr	r2, [r4, #104]	; 0x68
   13074:	ldr	r3, [r4, #164]	; 0xa4
   13078:	cmp	r2, r3
   1307c:	ble	130e8 <__assert_fail@plt+0x1cd4>
   13080:	str	r6, [r4, #104]	; 0x68
   13084:	mov	r0, #0
   13088:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1308c:	mov	r0, r9
   13090:	bl	12c34 <__assert_fail@plt+0x1820>
   13094:	ldr	r3, [r4, #136]	; 0x88
   13098:	add	r8, r8, #1
   1309c:	add	r3, r3, #1
   130a0:	str	r3, [r4, #136]	; 0x88
   130a4:	add	r9, r9, #40	; 0x28
   130a8:	b	12fac <__assert_fail@plt+0x1b98>
   130ac:	ldr	r3, [r5, #16]
   130b0:	ldrb	r0, [r6], #1
   130b4:	blx	r3
   130b8:	b	13030 <__assert_fail@plt+0x1c1c>
   130bc:	ldr	r0, [r5]
   130c0:	bl	11180 <getc_unlocked@plt>
   130c4:	cmp	r0, #10
   130c8:	beq	130d4 <__assert_fail@plt+0x1cc0>
   130cc:	ldr	r1, [r5]
   130d0:	bl	112dc <ungetc@plt>
   130d4:	ldrb	r3, [r4, #133]	; 0x85
   130d8:	cmp	r3, #0
   130dc:	movne	r3, #1
   130e0:	strbne	r3, [r4, #134]	; 0x86
   130e4:	b	12f0c <__assert_fail@plt+0x1af8>
   130e8:	ldr	r6, [r4, #100]	; 0x64
   130ec:	add	r7, r6, r0
   130f0:	cmp	r7, r6
   130f4:	beq	13038 <__assert_fail@plt+0x1c24>
   130f8:	ldr	r3, [r5, #16]
   130fc:	ldrb	r0, [r6], #1
   13100:	blx	r3
   13104:	b	130f0 <__assert_fail@plt+0x1cdc>
   13108:	strdeq	ip, [r2], -r0
   1310c:	andeq	ip, r2, r0, asr #2
   13110:	andeq	r1, r1, r4, ror #30
   13114:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13118:	mov	r7, r0
   1311c:	ldr	r5, [pc, #3452]	; 13ea0 <__assert_fail@plt+0x2a8c>
   13120:	ldr	r4, [pc, #3452]	; 13ea4 <__assert_fail@plt+0x2a90>
   13124:	sub	sp, sp, #36	; 0x24
   13128:	ldr	r3, [r5, #56]	; 0x38
   1312c:	mov	r8, r1
   13130:	sub	r2, r3, #10
   13134:	cmp	r2, #0
   13138:	str	r2, [r4, #172]	; 0xac
   1313c:	movle	r2, #0
   13140:	strble	r2, [r5, #52]	; 0x34
   13144:	movle	r2, #1
   13148:	strble	r2, [r4, #133]	; 0x85
   1314c:	ldrb	r2, [r5, #52]	; 0x34
   13150:	cmp	r2, #0
   13154:	streq	r3, [r4, #172]	; 0xac
   13158:	ldrb	r3, [r4, #176]	; 0xb0
   1315c:	cmp	r3, #0
   13160:	ldrne	r3, [r4, #172]	; 0xac
   13164:	addne	r3, r3, r3, lsr #31
   13168:	asrne	r3, r3, #1
   1316c:	strne	r3, [r4, #172]	; 0xac
   13170:	cmp	r0, #0
   13174:	strbeq	r0, [r4, #4]
   13178:	ldrb	r3, [r4, #4]
   1317c:	cmp	r3, #0
   13180:	ldrb	r3, [r5, #4]
   13184:	strne	r0, [r5]
   13188:	ldr	fp, [r5]
   1318c:	cmp	r3, #0
   13190:	movne	r3, #1
   13194:	strbne	r3, [r4, #177]	; 0xb1
   13198:	cmp	fp, #1
   1319c:	movle	r3, #0
   131a0:	strble	r3, [r5, #4]
   131a4:	ble	13208 <__assert_fail@plt+0x1df4>
   131a8:	ldrb	r3, [r4, #144]	; 0x90
   131ac:	cmp	r3, #0
   131b0:	ldrb	r3, [r4, #178]	; 0xb2
   131b4:	bne	132dc <__assert_fail@plt+0x1ec8>
   131b8:	cmp	r3, #0
   131bc:	ldrne	r3, [pc, #3300]	; 13ea8 <__assert_fail@plt+0x2a94>
   131c0:	ldreq	r3, [pc, #3300]	; 13eac <__assert_fail@plt+0x2a98>
   131c4:	str	r3, [r5, #16]
   131c8:	mov	r3, #1
   131cc:	str	r3, [r4, #32]
   131d0:	strb	r3, [r4, #144]	; 0x90
   131d4:	mov	r3, #1
   131d8:	strb	r3, [r4, #124]	; 0x7c
   131dc:	ldr	r3, [r4, #32]
   131e0:	cmp	r3, #1
   131e4:	bne	131f8 <__assert_fail@plt+0x1de4>
   131e8:	ldr	r3, [r5, #16]
   131ec:	ldrb	r3, [r3]
   131f0:	cmp	r3, #9
   131f4:	beq	13200 <__assert_fail@plt+0x1dec>
   131f8:	mov	r3, #1
   131fc:	strb	r3, [r4, #108]	; 0x6c
   13200:	mov	r3, #1
   13204:	strb	r3, [r4, #80]	; 0x50
   13208:	ldrb	r3, [r4, #178]	; 0xb2
   1320c:	ldrb	r9, [r4, #179]	; 0xb3
   13210:	cmp	r3, #0
   13214:	movne	r3, #0
   13218:	strbne	r3, [r4, #124]	; 0x7c
   1321c:	cmp	r9, #0
   13220:	bne	13308 <__assert_fail@plt+0x1ef4>
   13224:	mov	sl, #0
   13228:	ldr	r6, [r4, #32]
   1322c:	cmp	r6, #0
   13230:	bge	13384 <__assert_fail@plt+0x1f70>
   13234:	cmp	fp, #0
   13238:	bgt	13358 <__assert_fail@plt+0x1f44>
   1323c:	mov	r1, r6
   13240:	mvn	r0, #-2147483648	; 0x80000000
   13244:	bl	1991c <__assert_fail@plt+0x8508>
   13248:	cmp	fp, r0
   1324c:	movgt	r0, #0
   13250:	movle	r0, #1
   13254:	cmp	r0, #0
   13258:	mvnne	r6, #-2147483648	; 0x80000000
   1325c:	bne	13268 <__assert_fail@plt+0x1e54>
   13260:	sub	r0, fp, #1
   13264:	mul	r6, r6, r0
   13268:	ldr	r0, [r5, #20]
   1326c:	sub	sl, r0, sl
   13270:	mvn	r3, sl
   13274:	lsr	r3, r3, #31
   13278:	cmp	r3, r6, lsr #31
   1327c:	bne	132a4 <__assert_fail@plt+0x1e90>
   13280:	cmp	sl, #0
   13284:	bge	133cc <__assert_fail@plt+0x1fb8>
   13288:	add	r3, sl, #-2147483648	; 0x80000000
   1328c:	cmp	r6, r3
   13290:	movle	r3, #0
   13294:	movgt	r3, #1
   13298:	cmp	r3, #0
   1329c:	movne	r0, #0
   132a0:	bne	132a8 <__assert_fail@plt+0x1e94>
   132a4:	sub	r0, sl, r6
   132a8:	mov	r1, fp
   132ac:	bl	1991c <__assert_fail@plt+0x8508>
   132b0:	cmp	r0, #0
   132b4:	str	r0, [r4, #164]	; 0xa4
   132b8:	bgt	133d8 <__assert_fail@plt+0x1fc4>
   132bc:	mov	r2, #5
   132c0:	ldr	r1, [pc, #3048]	; 13eb0 <__assert_fail@plt+0x2a9c>
   132c4:	mov	r0, #0
   132c8:	bl	1118c <dcgettext@plt>
   132cc:	mov	r1, #0
   132d0:	mov	r2, r0
   132d4:	mov	r0, #1
   132d8:	bl	11228 <error@plt>
   132dc:	cmp	r3, #0
   132e0:	bne	131d4 <__assert_fail@plt+0x1dc0>
   132e4:	ldr	r3, [r4, #32]
   132e8:	cmp	r3, #1
   132ec:	bne	131d4 <__assert_fail@plt+0x1dc0>
   132f0:	ldr	r3, [r5, #16]
   132f4:	ldrb	r3, [r3]
   132f8:	cmp	r3, #9
   132fc:	ldreq	r3, [pc, #2984]	; 13eac <__assert_fail@plt+0x2a98>
   13300:	streq	r3, [r5, #16]
   13304:	b	131d4 <__assert_fail@plt+0x1dc0>
   13308:	ldr	r3, [r5, #60]	; 0x3c
   1330c:	str	r3, [r5, #48]	; 0x30
   13310:	ldrb	r3, [r5, #44]	; 0x2c
   13314:	cmp	r3, #9
   13318:	ldrne	r3, [r5, #40]	; 0x28
   1331c:	addne	r3, r3, #1
   13320:	bne	13340 <__assert_fail@plt+0x1f2c>
   13324:	ldr	r2, [r5, #40]	; 0x28
   13328:	rsbs	r1, r2, #0
   1332c:	and	r1, r1, #7
   13330:	and	r3, r2, #7
   13334:	rsbpl	r3, r1, #0
   13338:	rsb	r3, r3, #8
   1333c:	add	r3, r3, r2
   13340:	str	r3, [r4, #120]	; 0x78
   13344:	ldrb	r3, [r4, #4]
   13348:	cmp	r3, #0
   1334c:	beq	13224 <__assert_fail@plt+0x1e10>
   13350:	ldr	sl, [r4, #120]	; 0x78
   13354:	b	13228 <__assert_fail@plt+0x1e14>
   13358:	cmn	r6, #1
   1335c:	moveq	r0, #0
   13360:	beq	13254 <__assert_fail@plt+0x1e40>
   13364:	mov	r1, r6
   13368:	mov	r0, #-2147483648	; 0x80000000
   1336c:	bl	1991c <__assert_fail@plt+0x8508>
   13370:	sub	r3, fp, #1
   13374:	cmp	r0, r3
   13378:	movge	r0, #0
   1337c:	movlt	r0, #1
   13380:	b	13254 <__assert_fail@plt+0x1e40>
   13384:	beq	13260 <__assert_fail@plt+0x1e4c>
   13388:	cmp	fp, #0
   1338c:	sub	r3, fp, #1
   13390:	bgt	133b4 <__assert_fail@plt+0x1fa0>
   13394:	beq	13260 <__assert_fail@plt+0x1e4c>
   13398:	mov	r1, r3
   1339c:	mov	r0, #-2147483648	; 0x80000000
   133a0:	bl	1991c <__assert_fail@plt+0x8508>
   133a4:	cmp	r6, r0
   133a8:	movle	r0, #0
   133ac:	movgt	r0, #1
   133b0:	b	13254 <__assert_fail@plt+0x1e40>
   133b4:	mov	r1, r6
   133b8:	mvn	r0, #-2147483648	; 0x80000000
   133bc:	str	r3, [sp, #16]
   133c0:	bl	1991c <__assert_fail@plt+0x8508>
   133c4:	ldr	r3, [sp, #16]
   133c8:	b	13374 <__assert_fail@plt+0x1f60>
   133cc:	sub	r3, r6, #-2147483647	; 0x80000001
   133d0:	cmp	sl, r3
   133d4:	b	13290 <__assert_fail@plt+0x1e7c>
   133d8:	cmp	r9, #0
   133dc:	beq	13400 <__assert_fail@plt+0x1fec>
   133e0:	ldr	r0, [r4, #112]	; 0x70
   133e4:	bl	14624 <__assert_fail@plt+0x3210>
   133e8:	ldr	r0, [r5, #40]	; 0x28
   133ec:	cmp	r0, #11
   133f0:	movcc	r0, #11
   133f4:	add	r0, r0, #1
   133f8:	bl	18020 <__assert_fail@plt+0x6c0c>
   133fc:	str	r0, [r4, #112]	; 0x70
   13400:	ldr	r0, [r4, #100]	; 0x64
   13404:	bl	14624 <__assert_fail@plt+0x3210>
   13408:	ldr	r0, [r5, #36]	; 0x24
   1340c:	cmp	r0, #8
   13410:	movlt	r0, #8
   13414:	bl	18020 <__assert_fail@plt+0x6c0c>
   13418:	mov	r3, #0
   1341c:	str	r3, [r4, #128]	; 0x80
   13420:	str	r0, [r4, #100]	; 0x64
   13424:	ldr	r0, [r4]
   13428:	bl	14624 <__assert_fail@plt+0x3210>
   1342c:	mov	r1, #40	; 0x28
   13430:	ldr	r0, [r5]
   13434:	bl	180f8 <__assert_fail@plt+0x6ce4>
   13438:	ldrb	r9, [r4, #4]
   1343c:	cmp	r9, #0
   13440:	subne	r8, r8, #4
   13444:	mov	r6, r0
   13448:	str	r0, [r4]
   1344c:	bne	134ec <__assert_fail@plt+0x20d8>
   13450:	cmp	r7, #0
   13454:	ble	13634 <__assert_fail@plt+0x2220>
   13458:	mov	r1, r0
   1345c:	ldr	r0, [r8]
   13460:	bl	127bc <__assert_fail@plt+0x13a8>
   13464:	cmp	r0, #0
   13468:	beq	13e98 <__assert_fail@plt+0x2a84>
   1346c:	ldr	r0, [r6]
   13470:	ldr	r7, [r8]
   13474:	bl	11324 <fileno@plt>
   13478:	mov	r1, r0
   1347c:	mov	r0, r7
   13480:	bl	121a8 <__assert_fail@plt+0xd94>
   13484:	ldr	r3, [r5]
   13488:	str	r9, [r6, #24]
   1348c:	ldr	r1, [r6, #4]
   13490:	ldr	r0, [r6], #40	; 0x28
   13494:	sub	r3, r3, #1
   13498:	mov	r2, #0
   1349c:	cmp	r3, #0
   134a0:	add	r6, r6, #40	; 0x28
   134a4:	beq	1350c <__assert_fail@plt+0x20f8>
   134a8:	str	r1, [r6, #-36]	; 0xffffffdc
   134ac:	str	r0, [r6, #-40]	; 0xffffffd8
   134b0:	str	r2, [r6, #-32]	; 0xffffffe0
   134b4:	strb	r2, [r6, #-3]
   134b8:	str	r2, [r6, #-16]
   134bc:	sub	r3, r3, #1
   134c0:	b	1349c <__assert_fail@plt+0x2088>
   134c4:	mov	r1, r6
   134c8:	ldr	r0, [r8, #4]!
   134cc:	bl	127bc <__assert_fail@plt+0x13a8>
   134d0:	sub	r7, r7, #1
   134d4:	cmp	r0, #0
   134d8:	subeq	r6, r6, #40	; 0x28
   134dc:	ldreq	r3, [r5]
   134e0:	add	r6, r6, #40	; 0x28
   134e4:	subeq	r3, r3, #1
   134e8:	streq	r3, [r5]
   134ec:	cmp	r7, #0
   134f0:	bne	134c4 <__assert_fail@plt+0x20b0>
   134f4:	ldr	r3, [r5]
   134f8:	cmp	r3, #0
   134fc:	beq	13e98 <__assert_fail@plt+0x2a84>
   13500:	mvn	r1, #0
   13504:	ldr	r0, [pc, #2472]	; 13eb4 <__assert_fail@plt+0x2aa0>
   13508:	bl	121a8 <__assert_fail@plt+0xd94>
   1350c:	ldr	r3, [r4, #128]	; 0x80
   13510:	str	r3, [r4, #8]
   13514:	ldrb	r3, [r5, #4]
   13518:	cmp	r3, #0
   1351c:	beq	1360c <__assert_fail@plt+0x21f8>
   13520:	ldr	r8, [r5]
   13524:	cmp	r8, #0
   13528:	bge	1369c <__assert_fail@plt+0x2288>
   1352c:	ldr	r6, [r4, #172]	; 0xac
   13530:	cmp	r6, #0
   13534:	bge	1367c <__assert_fail@plt+0x2268>
   13538:	mov	r1, r8
   1353c:	mvn	r0, #-2147483648	; 0x80000000
   13540:	bl	1991c <__assert_fail@plt+0x8508>
   13544:	cmp	r6, r0
   13548:	movge	r0, #0
   1354c:	movlt	r0, #1
   13550:	cmp	r0, #0
   13554:	bne	13734 <__assert_fail@plt+0x2320>
   13558:	ldr	r7, [r4, #172]	; 0xac
   1355c:	mul	r7, r7, r8
   13560:	cmn	r7, #-2147483647	; 0x80000001
   13564:	beq	13734 <__assert_fail@plt+0x2320>
   13568:	ldr	r6, [r4, #164]	; 0xa4
   1356c:	add	r8, r7, #1
   13570:	cmn	r6, #-2147483647	; 0x80000001
   13574:	beq	13734 <__assert_fail@plt+0x2320>
   13578:	add	r6, r6, #1
   1357c:	cmp	r6, #0
   13580:	bge	136f0 <__assert_fail@plt+0x22dc>
   13584:	cmp	r7, #0
   13588:	bge	136d8 <__assert_fail@plt+0x22c4>
   1358c:	mov	r1, r6
   13590:	mvn	r0, #-2147483648	; 0x80000000
   13594:	bl	1991c <__assert_fail@plt+0x8508>
   13598:	cmp	r7, r0
   1359c:	movge	r0, #0
   135a0:	movlt	r0, #1
   135a4:	cmp	r0, #0
   135a8:	bne	13734 <__assert_fail@plt+0x2320>
   135ac:	ldr	r0, [r4, #148]	; 0x94
   135b0:	bl	14624 <__assert_fail@plt+0x3210>
   135b4:	mov	r1, #4
   135b8:	mov	r0, r8
   135bc:	bl	180f8 <__assert_fail@plt+0x6ce4>
   135c0:	mul	r6, r6, r7
   135c4:	str	r0, [r4, #148]	; 0x94
   135c8:	ldr	r0, [r4, #156]	; 0x9c
   135cc:	bl	14624 <__assert_fail@plt+0x3210>
   135d0:	mov	r1, #4
   135d4:	mov	r0, r7
   135d8:	bl	180f8 <__assert_fail@plt+0x6ce4>
   135dc:	str	r0, [r4, #156]	; 0x9c
   135e0:	ldr	r0, [r4, #20]
   135e4:	bl	14624 <__assert_fail@plt+0x3210>
   135e8:	ldrb	r1, [r4, #144]	; 0x90
   135ec:	mov	r0, r6
   135f0:	add	r1, r1, #1
   135f4:	bl	180f8 <__assert_fail@plt+0x6ce4>
   135f8:	ldrb	r3, [r4, #144]	; 0x90
   135fc:	add	r3, r3, #1
   13600:	mul	r6, r6, r3
   13604:	str	r6, [r4, #16]
   13608:	str	r0, [r4, #20]
   1360c:	ldrd	r2, [r4, #24]
   13610:	cmp	r3, #0
   13614:	cmpeq	r2, #1
   13618:	strd	r2, [sp, #16]
   1361c:	mov	r2, #1
   13620:	mov	r3, #0
   13624:	bhi	13ab4 <__assert_fail@plt+0x26a0>
   13628:	str	r2, [r4, #88]	; 0x58
   1362c:	str	r3, [r4, #92]	; 0x5c
   13630:	b	137d8 <__assert_fail@plt+0x23c4>
   13634:	ldr	r1, [pc, #2172]	; 13eb8 <__assert_fail@plt+0x2aa4>
   13638:	mov	r2, #5
   1363c:	mov	r0, r9
   13640:	bl	1118c <dcgettext@plt>
   13644:	ldr	r3, [pc, #2160]	; 13ebc <__assert_fail@plt+0x2aa8>
   13648:	str	r9, [r6, #8]
   1364c:	strb	r9, [r6, #37]	; 0x25
   13650:	ldr	r3, [r3]
   13654:	mvn	r1, #0
   13658:	str	r3, [r6]
   1365c:	mov	r3, #1
   13660:	strb	r3, [r4, #125]	; 0x7d
   13664:	ldr	r3, [r4, #128]	; 0x80
   13668:	add	r3, r3, #1
   1366c:	str	r3, [r4, #128]	; 0x80
   13670:	str	r0, [r6, #4]
   13674:	ldr	r0, [pc, #2104]	; 13eb4 <__assert_fail@plt+0x2aa0>
   13678:	b	13480 <__assert_fail@plt+0x206c>
   1367c:	cmn	r8, #1
   13680:	movne	r1, r8
   13684:	movne	r0, #-2147483648	; 0x80000000
   13688:	moveq	r0, #0
   1368c:	beq	13550 <__assert_fail@plt+0x213c>
   13690:	bl	1991c <__assert_fail@plt+0x8508>
   13694:	cmp	r6, r0
   13698:	b	136cc <__assert_fail@plt+0x22b8>
   1369c:	beq	13558 <__assert_fail@plt+0x2144>
   136a0:	ldr	r6, [r4, #172]	; 0xac
   136a4:	cmp	r6, #0
   136a8:	movge	r1, r8
   136ac:	mvnge	r0, #-2147483648	; 0x80000000
   136b0:	bge	13690 <__assert_fail@plt+0x227c>
   136b4:	cmn	r6, #1
   136b8:	beq	13558 <__assert_fail@plt+0x2144>
   136bc:	mov	r1, r6
   136c0:	mov	r0, #-2147483648	; 0x80000000
   136c4:	bl	1991c <__assert_fail@plt+0x8508>
   136c8:	cmp	r8, r0
   136cc:	movle	r0, #0
   136d0:	movgt	r0, #1
   136d4:	b	13550 <__assert_fail@plt+0x213c>
   136d8:	cmn	r6, #1
   136dc:	movne	r1, r6
   136e0:	movne	r0, #-2147483648	; 0x80000000
   136e4:	bne	13728 <__assert_fail@plt+0x2314>
   136e8:	mov	r0, #0
   136ec:	b	135a4 <__assert_fail@plt+0x2190>
   136f0:	beq	135ac <__assert_fail@plt+0x2198>
   136f4:	cmp	r7, #0
   136f8:	movge	r1, r6
   136fc:	mvnge	r0, #-2147483648	; 0x80000000
   13700:	bge	13728 <__assert_fail@plt+0x2314>
   13704:	cmn	r7, #1
   13708:	beq	136e8 <__assert_fail@plt+0x22d4>
   1370c:	mov	r1, r7
   13710:	mov	r0, #-2147483648	; 0x80000000
   13714:	bl	1991c <__assert_fail@plt+0x8508>
   13718:	cmp	r6, r0
   1371c:	movle	r0, #0
   13720:	movgt	r0, #1
   13724:	b	135a4 <__assert_fail@plt+0x2190>
   13728:	bl	1991c <__assert_fail@plt+0x8508>
   1372c:	cmp	r7, r0
   13730:	b	1371c <__assert_fail@plt+0x2308>
   13734:	bl	11fac <__assert_fail@plt+0xb98>
   13738:	ldr	r9, [r4]
   1373c:	mov	r8, #1
   13740:	ldr	r2, [r5]
   13744:	cmp	r8, r2
   13748:	ble	13a1c <__assert_fail@plt+0x2608>
   1374c:	add	r3, r3, #1
   13750:	ldr	r2, [r4, #172]	; 0xac
   13754:	cmp	r3, r2
   13758:	blt	13738 <__assert_fail@plt+0x2324>
   1375c:	ldr	r9, [r4]
   13760:	mov	r8, #1
   13764:	strb	sl, [r4, #132]	; 0x84
   13768:	ldr	r1, [r5]
   1376c:	cmp	r8, r1
   13770:	ble	13a48 <__assert_fail@plt+0x2634>
   13774:	ldrb	r3, [r5, #4]
   13778:	cmp	r3, #0
   1377c:	bne	13a6c <__assert_fail@plt+0x2658>
   13780:	bl	11ee0 <__assert_fail@plt+0xacc>
   13784:	ldr	r3, [r4, #8]
   13788:	mov	r8, #0
   1378c:	cmp	r3, r8
   13790:	strb	r8, [r4, #132]	; 0x84
   13794:	bgt	13a94 <__assert_fail@plt+0x2680>
   13798:	mov	r2, #5
   1379c:	ldr	r1, [pc, #1820]	; 13ec0 <__assert_fail@plt+0x2aac>
   137a0:	mov	r0, r8
   137a4:	bl	1118c <dcgettext@plt>
   137a8:	ldrd	r2, [sp, #16]
   137ac:	strd	r6, [sp, #8]
   137b0:	mov	r1, r8
   137b4:	strd	r2, [sp]
   137b8:	mov	r2, r0
   137bc:	mov	r0, r8
   137c0:	bl	11228 <error@plt>
   137c4:	ldr	r3, [r4, #8]
   137c8:	cmp	r3, #0
   137cc:	ble	13e98 <__assert_fail@plt+0x2a84>
   137d0:	ldrd	r2, [r4, #24]
   137d4:	strd	r2, [r4, #88]	; 0x58
   137d8:	ldrb	lr, [r4, #124]	; 0x7c
   137dc:	ldr	r1, [r4, #84]	; 0x54
   137e0:	cmp	lr, #0
   137e4:	moveq	r2, lr
   137e8:	beq	13810 <__assert_fail@plt+0x23fc>
   137ec:	ldrb	r3, [r4, #4]
   137f0:	ldr	r2, [r4, #164]	; 0xa4
   137f4:	cmp	r3, #0
   137f8:	add	r2, r1, r2
   137fc:	beq	13810 <__assert_fail@plt+0x23fc>
   13800:	ldrb	r3, [r4, #179]	; 0xb3
   13804:	cmp	r3, #0
   13808:	ldrne	r3, [r4, #120]	; 0x78
   1380c:	addne	r2, r2, r3
   13810:	ldrb	r0, [r5, #4]
   13814:	ldrb	ip, [r4, #4]
   13818:	ldr	r8, [r4, #32]
   1381c:	str	r0, [sp, #16]
   13820:	ldrb	r0, [r4, #179]	; 0xb3
   13824:	ldr	r3, [r4]
   13828:	ldr	r7, [r5]
   1382c:	ldr	sl, [r4, #164]	; 0xa4
   13830:	ldr	fp, [pc, #1676]	; 13ec4 <__assert_fail@plt+0x2ab0>
   13834:	str	r0, [sp, #28]
   13838:	add	r1, r1, r8
   1383c:	eor	ip, ip, #1
   13840:	mov	r0, #1
   13844:	mov	r6, #0
   13848:	cmp	r0, r7
   1384c:	blt	13ac8 <__assert_fail@plt+0x26b4>
   13850:	ldrb	r2, [r5, #4]
   13854:	cmp	r2, #0
   13858:	beq	13b30 <__assert_fail@plt+0x271c>
   1385c:	ldrb	r2, [r4, #177]	; 0xb1
   13860:	cmp	r2, #0
   13864:	beq	13b30 <__assert_fail@plt+0x271c>
   13868:	ldr	r2, [pc, #1624]	; 13ec8 <__assert_fail@plt+0x2ab4>
   1386c:	str	r2, [r3, #16]
   13870:	ldr	r2, [pc, #1612]	; 13ec4 <__assert_fail@plt+0x2ab0>
   13874:	str	r2, [r3, #12]
   13878:	ldrb	r2, [r4, #179]	; 0xb3
   1387c:	cmp	r2, #0
   13880:	beq	13894 <__assert_fail@plt+0x2480>
   13884:	ldrb	r2, [r4, #4]
   13888:	eor	r2, r2, #1
   1388c:	cmp	r7, #1
   13890:	orrle	r2, r2, #1
   13894:	and	r2, r2, #1
   13898:	ldr	r6, [pc, #1540]	; 13ea4 <__assert_fail@plt+0x2a90>
   1389c:	strb	r2, [r3, #36]	; 0x24
   138a0:	str	r1, [r3, #32]
   138a4:	ldr	r3, [r5, #48]	; 0x30
   138a8:	str	r3, [r4, #116]	; 0x74
   138ac:	ldrb	r2, [r5, #4]
   138b0:	cmp	r2, #0
   138b4:	ldreq	r1, [r5]
   138b8:	ldreq	r3, [r4]
   138bc:	ldreq	ip, [r4, #172]	; 0xac
   138c0:	beq	13c90 <__assert_fail@plt+0x287c>
   138c4:	mov	r3, #0
   138c8:	str	r3, [r4, #12]
   138cc:	ldrb	r3, [r4, #177]	; 0xb1
   138d0:	ldr	sl, [r5]
   138d4:	ldr	r8, [r4]
   138d8:	cmp	r3, #0
   138dc:	subeq	sl, sl, #1
   138e0:	mov	r2, r8
   138e4:	mov	r3, #1
   138e8:	mov	r1, #0
   138ec:	cmp	r3, sl
   138f0:	ble	13b40 <__assert_fail@plt+0x272c>
   138f4:	mov	r9, #0
   138f8:	mov	r7, r9
   138fc:	mov	fp, #1
   13900:	cmp	sl, fp
   13904:	blt	13914 <__assert_fail@plt+0x2500>
   13908:	ldr	r3, [r4, #8]
   1390c:	cmp	r3, #0
   13910:	bne	13b50 <__assert_fail@plt+0x273c>
   13914:	ldrb	fp, [r4, #177]	; 0xb1
   13918:	ldr	r3, [r4, #148]	; 0x94
   1391c:	cmp	fp, #0
   13920:	str	r9, [r3, r7, lsl #2]
   13924:	bne	13bf8 <__assert_fail@plt+0x27e4>
   13928:	ldr	r3, [r5]
   1392c:	ldr	r0, [r4]
   13930:	sub	r3, r3, #1
   13934:	mov	r2, r0
   13938:	mov	r1, r3
   1393c:	cmp	r1, #0
   13940:	bne	13c60 <__assert_fail@plt+0x284c>
   13944:	mov	r2, #40	; 0x28
   13948:	cmp	fp, #0
   1394c:	mla	r3, r2, r3, r0
   13950:	ldrne	r2, [r3, #24]
   13954:	bne	1396c <__assert_fail@plt+0x2558>
   13958:	ldr	r2, [r3, #8]
   1395c:	cmp	r2, #0
   13960:	strne	fp, [r3, #28]
   13964:	bne	13970 <__assert_fail@plt+0x255c>
   13968:	ldr	r2, [r6, #172]	; 0xac
   1396c:	str	r2, [r3, #28]
   13970:	bl	11df0 <__assert_fail@plt+0x9dc>
   13974:	cmp	r0, #0
   13978:	beq	13e98 <__assert_fail@plt+0x2a84>
   1397c:	ldrb	r3, [r5, #52]	; 0x34
   13980:	ldr	r7, [r4, #172]	; 0xac
   13984:	mov	sl, #0
   13988:	cmp	r3, #0
   1398c:	movne	r3, #1
   13990:	strbne	r3, [r4, #96]	; 0x60
   13994:	mov	r3, #0
   13998:	strb	r3, [r4, #152]	; 0x98
   1399c:	ldrb	r3, [r4, #176]	; 0xb0
   139a0:	mov	r8, sl
   139a4:	cmp	r3, #0
   139a8:	lslne	r7, r7, #1
   139ac:	cmp	r7, #0
   139b0:	ble	13e1c <__assert_fail@plt+0x2a08>
   139b4:	bl	11df0 <__assert_fail@plt+0x9dc>
   139b8:	cmp	r0, #0
   139bc:	bne	13c9c <__assert_fail@plt+0x2888>
   139c0:	cmp	sl, #0
   139c4:	strb	sl, [r4, #152]	; 0x98
   139c8:	beq	13e6c <__assert_fail@plt+0x2a58>
   139cc:	ldrb	r3, [r5, #52]	; 0x34
   139d0:	cmp	r3, #0
   139d4:	beq	13e6c <__assert_fail@plt+0x2a58>
   139d8:	ldrb	r3, [r4, #180]	; 0xb4
   139dc:	add	r7, r7, #5
   139e0:	cmp	r3, #0
   139e4:	moveq	r8, #10
   139e8:	beq	13e60 <__assert_fail@plt+0x2a4c>
   139ec:	mov	r0, #12
   139f0:	bl	11408 <putchar_unlocked@plt>
   139f4:	ldrd	r0, [r4, #88]	; 0x58
   139f8:	ldrd	r2, [r5, #8]
   139fc:	adds	r0, r0, #1
   13a00:	adc	r1, r1, #0
   13a04:	cmp	r1, r3
   13a08:	cmpeq	r0, r2
   13a0c:	strd	r0, [r4, #88]	; 0x58
   13a10:	bhi	13e98 <__assert_fail@plt+0x2a84>
   13a14:	bl	11ee0 <__assert_fail@plt+0xacc>
   13a18:	b	138ac <__assert_fail@plt+0x2498>
   13a1c:	ldr	r2, [r9, #8]
   13a20:	cmp	r2, #0
   13a24:	bne	13a3c <__assert_fail@plt+0x2628>
   13a28:	mov	r1, r8
   13a2c:	mov	r0, r9
   13a30:	str	r3, [sp, #28]
   13a34:	bl	129ac <__assert_fail@plt+0x1598>
   13a38:	ldr	r3, [sp, #28]
   13a3c:	add	r8, r8, #1
   13a40:	add	r9, r9, #40	; 0x28
   13a44:	b	13740 <__assert_fail@plt+0x232c>
   13a48:	ldr	r3, [r9, #8]
   13a4c:	cmp	r3, #0
   13a50:	bne	13a60 <__assert_fail@plt+0x264c>
   13a54:	mov	r1, r8
   13a58:	mov	r0, r9
   13a5c:	bl	129ac <__assert_fail@plt+0x1598>
   13a60:	add	r8, r8, #1
   13a64:	add	r9, r9, #40	; 0x28
   13a68:	b	13768 <__assert_fail@plt+0x2354>
   13a6c:	ldr	r3, [r4]
   13a70:	mov	r2, #1
   13a74:	cmp	r1, r2
   13a78:	blt	13780 <__assert_fail@plt+0x236c>
   13a7c:	ldr	r0, [r3, #8]
   13a80:	add	r2, r2, #1
   13a84:	cmp	r0, #3
   13a88:	strne	fp, [r3, #8]
   13a8c:	add	r3, r3, #40	; 0x28
   13a90:	b	13a74 <__assert_fail@plt+0x2660>
   13a94:	ldrd	r2, [sp, #16]
   13a98:	adds	r6, r6, #1
   13a9c:	adc	r7, r7, #0
   13aa0:	cmp	r3, r7
   13aa4:	cmpeq	r2, r6
   13aa8:	beq	137c4 <__assert_fail@plt+0x23b0>
   13aac:	mov	r3, #1
   13ab0:	b	13750 <__assert_fail@plt+0x233c>
   13ab4:	mov	r6, r2
   13ab8:	mov	r7, r3
   13abc:	mov	sl, #1
   13ac0:	mov	fp, #2
   13ac4:	b	13aac <__assert_fail@plt+0x2698>
   13ac8:	ldr	r9, [sp, #16]
   13acc:	cmp	r9, #0
   13ad0:	strne	fp, [r3, #12]
   13ad4:	ldreq	r9, [pc, #1008]	; 13ecc <__assert_fail@plt+0x2ab8>
   13ad8:	ldrne	r9, [pc, #1000]	; 13ec8 <__assert_fail@plt+0x2ab4>
   13adc:	streq	r9, [r3, #16]
   13ae0:	ldreq	r9, [pc, #1000]	; 13ed0 <__assert_fail@plt+0x2abc>
   13ae4:	strne	r9, [r3, #16]
   13ae8:	streq	r9, [r3, #12]
   13aec:	ldr	r9, [sp, #28]
   13af0:	cmp	r9, #0
   13af4:	moveq	r9, r6
   13af8:	beq	13b08 <__assert_fail@plt+0x26f4>
   13afc:	cmp	r0, #1
   13b00:	movne	r9, ip
   13b04:	orreq	r9, ip, #1
   13b08:	cmp	lr, #0
   13b0c:	str	r1, [r3, #32]
   13b10:	addne	r1, r8, r2
   13b14:	strb	r9, [r3, #36]	; 0x24
   13b18:	addne	r2, r1, sl
   13b1c:	moveq	r2, r6
   13b20:	moveq	r1, r6
   13b24:	add	r3, r3, #40	; 0x28
   13b28:	add	r0, r0, #1
   13b2c:	b	13848 <__assert_fail@plt+0x2434>
   13b30:	ldr	r2, [pc, #916]	; 13ecc <__assert_fail@plt+0x2ab8>
   13b34:	str	r2, [r3, #16]
   13b38:	ldr	r2, [pc, #912]	; 13ed0 <__assert_fail@plt+0x2abc>
   13b3c:	b	13874 <__assert_fail@plt+0x2460>
   13b40:	str	r1, [r2, #24]
   13b44:	add	r3, r3, #1
   13b48:	add	r2, r2, #40	; 0x28
   13b4c:	b	138ec <__assert_fail@plt+0x24d8>
   13b50:	ldr	r3, [r4, #172]	; 0xac
   13b54:	str	r7, [r8, #20]
   13b58:	cmp	r3, #0
   13b5c:	beq	13b6c <__assert_fail@plt+0x2758>
   13b60:	ldr	r2, [r6, #8]
   13b64:	cmp	r2, #0
   13b68:	bne	13b78 <__assert_fail@plt+0x2764>
   13b6c:	add	fp, fp, #1
   13b70:	add	r8, r8, #40	; 0x28
   13b74:	b	13900 <__assert_fail@plt+0x24ec>
   13b78:	ldr	r2, [r8, #8]
   13b7c:	cmp	r2, #0
   13b80:	bne	13bf0 <__assert_fail@plt+0x27dc>
   13b84:	mov	r0, r8
   13b88:	str	r3, [sp, #16]
   13b8c:	str	r2, [r6, #104]	; 0x68
   13b90:	bl	12e4c <__assert_fail@plt+0x1a38>
   13b94:	ldr	r3, [sp, #16]
   13b98:	cmp	r0, #0
   13b9c:	bne	13bac <__assert_fail@plt+0x2798>
   13ba0:	mov	r0, r8
   13ba4:	bl	12af4 <__assert_fail@plt+0x16e0>
   13ba8:	ldr	r3, [sp, #16]
   13bac:	ldr	r2, [r8, #8]
   13bb0:	cmp	r2, #0
   13bb4:	beq	13bc4 <__assert_fail@plt+0x27b0>
   13bb8:	ldr	r2, [r6, #12]
   13bbc:	cmp	r2, r9
   13bc0:	beq	13bf0 <__assert_fail@plt+0x27dc>
   13bc4:	ldr	r2, [r8, #24]
   13bc8:	ldr	r1, [r6, #148]	; 0x94
   13bcc:	add	r2, r2, #1
   13bd0:	str	r2, [r8, #24]
   13bd4:	str	r9, [r1, r7, lsl #2]
   13bd8:	ldr	r1, [r6, #156]	; 0x9c
   13bdc:	ldr	r9, [r6, #12]
   13be0:	lsl	r2, r7, #2
   13be4:	ldr	r0, [r6, #104]	; 0x68
   13be8:	add	r7, r7, #1
   13bec:	str	r0, [r1, r2]
   13bf0:	sub	r3, r3, #1
   13bf4:	b	13b58 <__assert_fail@plt+0x2744>
   13bf8:	ldr	r9, [r4]
   13bfc:	ldr	r3, [r5]
   13c00:	mov	r2, #0
   13c04:	mov	r8, #1
   13c08:	cmp	r3, r8
   13c0c:	blt	13928 <__assert_fail@plt+0x2514>
   13c10:	mov	r1, r3
   13c14:	mov	r0, r7
   13c18:	str	r2, [sp, #28]
   13c1c:	str	r3, [sp, #16]
   13c20:	bl	1991c <__assert_fail@plt+0x8508>
   13c24:	ldr	r3, [sp, #16]
   13c28:	add	r9, r9, #40	; 0x28
   13c2c:	mov	r1, r3
   13c30:	mov	sl, r0
   13c34:	mov	r0, r7
   13c38:	bl	19b3c <__assert_fail@plt+0x8728>
   13c3c:	ldr	r2, [sp, #28]
   13c40:	ldr	r3, [sp, #16]
   13c44:	str	r2, [r9, #-20]	; 0xffffffec
   13c48:	cmp	r1, r8
   13c4c:	addge	sl, sl, #1
   13c50:	str	sl, [r9, #-16]
   13c54:	add	r2, r2, sl
   13c58:	add	r8, r8, #1
   13c5c:	b	13c08 <__assert_fail@plt+0x27f4>
   13c60:	ldr	ip, [r2, #24]
   13c64:	sub	r1, r1, #1
   13c68:	str	ip, [r2, #28]
   13c6c:	add	r2, r2, #40	; 0x28
   13c70:	b	1393c <__assert_fail@plt+0x2528>
   13c74:	ldr	r0, [r3, #8]
   13c78:	sub	r1, r1, #1
   13c7c:	cmp	r0, #0
   13c80:	movne	r0, r2
   13c84:	moveq	r0, ip
   13c88:	str	r0, [r3, #28]
   13c8c:	add	r3, r3, #40	; 0x28
   13c90:	cmp	r1, #0
   13c94:	bne	13c74 <__assert_fail@plt+0x2860>
   13c98:	b	13970 <__assert_fail@plt+0x255c>
   13c9c:	ldr	fp, [r4]
   13ca0:	mov	r9, #1
   13ca4:	str	r8, [r4, #72]	; 0x48
   13ca8:	str	r8, [r4, #76]	; 0x4c
   13cac:	str	r8, [r4, #136]	; 0x88
   13cb0:	strb	r8, [r4, #152]	; 0x98
   13cb4:	strb	r8, [r4, #168]	; 0xa8
   13cb8:	strb	r9, [r4, #169]	; 0xa9
   13cbc:	ldr	r2, [r5]
   13cc0:	cmp	r9, r2
   13cc4:	ble	13d20 <__assert_fail@plt+0x290c>
   13cc8:	ldrb	r3, [r6, #152]	; 0x98
   13ccc:	cmp	r3, #0
   13cd0:	beq	13ce0 <__assert_fail@plt+0x28cc>
   13cd4:	mov	r0, #10
   13cd8:	bl	11408 <putchar_unlocked@plt>
   13cdc:	sub	r7, r7, #1
   13ce0:	bl	11df0 <__assert_fail@plt+0x9dc>
   13ce4:	cmp	r0, #0
   13ce8:	bne	13cfc <__assert_fail@plt+0x28e8>
   13cec:	ldr	r3, [pc, #428]	; 13ea0 <__assert_fail@plt+0x2a8c>
   13cf0:	ldrb	r3, [r3, #52]	; 0x34
   13cf4:	cmp	r3, #0
   13cf8:	beq	13e1c <__assert_fail@plt+0x2a08>
   13cfc:	ldrb	r3, [r6, #176]	; 0xb0
   13d00:	cmp	r3, #0
   13d04:	beq	139ac <__assert_fail@plt+0x2598>
   13d08:	cmp	sl, #0
   13d0c:	beq	139ac <__assert_fail@plt+0x2598>
   13d10:	mov	r0, #10
   13d14:	bl	11408 <putchar_unlocked@plt>
   13d18:	sub	r7, r7, #1
   13d1c:	b	139ac <__assert_fail@plt+0x2598>
   13d20:	ldr	r2, [fp, #28]
   13d24:	str	r8, [r6, #104]	; 0x68
   13d28:	cmp	r2, #0
   13d2c:	bgt	13d3c <__assert_fail@plt+0x2928>
   13d30:	ldr	r2, [fp, #8]
   13d34:	cmp	r2, #1
   13d38:	bne	13e00 <__assert_fail@plt+0x29ec>
   13d3c:	ldr	r2, [fp, #32]
   13d40:	mov	r0, fp
   13d44:	str	r2, [r6, #140]	; 0x8c
   13d48:	ldr	r2, [fp, #12]
   13d4c:	strb	r8, [r6, #160]	; 0xa0
   13d50:	blx	r2
   13d54:	cmp	r0, #0
   13d58:	bne	13d64 <__assert_fail@plt+0x2950>
   13d5c:	mov	r0, fp
   13d60:	bl	12af4 <__assert_fail@plt+0x16e0>
   13d64:	ldrb	r2, [r6, #152]	; 0x98
   13d68:	orr	sl, sl, r2
   13d6c:	ldr	r2, [fp, #28]
   13d70:	sub	r2, r2, #1
   13d74:	cmp	r2, #0
   13d78:	str	r2, [fp, #28]
   13d7c:	bgt	13d8c <__assert_fail@plt+0x2978>
   13d80:	bl	11df0 <__assert_fail@plt+0x9dc>
   13d84:	cmp	r0, #0
   13d88:	beq	13cc8 <__assert_fail@plt+0x28b4>
   13d8c:	ldrb	r2, [r6, #4]
   13d90:	cmp	r2, #0
   13d94:	beq	13db8 <__assert_fail@plt+0x29a4>
   13d98:	ldr	r2, [fp, #8]
   13d9c:	cmp	r2, #0
   13da0:	beq	13db8 <__assert_fail@plt+0x29a4>
   13da4:	ldrb	r1, [r6, #169]	; 0xa9
   13da8:	cmp	r1, #0
   13dac:	beq	13dd8 <__assert_fail@plt+0x29c4>
   13db0:	mov	r3, #1
   13db4:	strb	r3, [r6, #168]	; 0xa8
   13db8:	ldrb	r2, [r6, #144]	; 0x90
   13dbc:	add	r9, r9, #1
   13dc0:	add	fp, fp, #40	; 0x28
   13dc4:	cmp	r2, #0
   13dc8:	ldrne	r2, [r6, #136]	; 0x88
   13dcc:	addne	r2, r2, #1
   13dd0:	strne	r2, [r6, #136]	; 0x88
   13dd4:	b	13cbc <__assert_fail@plt+0x28a8>
   13dd8:	cmp	r2, #3
   13ddc:	beq	13df4 <__assert_fail@plt+0x29e0>
   13de0:	cmp	r2, #2
   13de4:	bne	13db8 <__assert_fail@plt+0x29a4>
   13de8:	ldrb	r2, [r6, #160]	; 0xa0
   13dec:	cmp	r2, #0
   13df0:	beq	13db8 <__assert_fail@plt+0x29a4>
   13df4:	mov	r0, fp
   13df8:	bl	12c34 <__assert_fail@plt+0x1820>
   13dfc:	b	13db8 <__assert_fail@plt+0x29a4>
   13e00:	ldrb	r2, [r6, #4]
   13e04:	cmp	r2, #0
   13e08:	beq	13db8 <__assert_fail@plt+0x29a4>
   13e0c:	ldrb	r2, [r6, #169]	; 0xa9
   13e10:	cmp	r2, #0
   13e14:	bne	13db0 <__assert_fail@plt+0x299c>
   13e18:	b	13df4 <__assert_fail@plt+0x29e0>
   13e1c:	cmp	r7, #0
   13e20:	bne	139c0 <__assert_fail@plt+0x25ac>
   13e24:	mov	r3, #1
   13e28:	ldr	r2, [r4]
   13e2c:	ldr	r1, [r5]
   13e30:	mov	r0, r3
   13e34:	cmp	r3, r1
   13e38:	bgt	139c0 <__assert_fail@plt+0x25ac>
   13e3c:	ldr	ip, [r2, #8]
   13e40:	add	r3, r3, #1
   13e44:	cmp	ip, #0
   13e48:	strbeq	r0, [r2, #37]	; 0x25
   13e4c:	add	r2, r2, #40	; 0x28
   13e50:	b	13e34 <__assert_fail@plt+0x2a20>
   13e54:	mov	r0, r8
   13e58:	bl	11408 <putchar_unlocked@plt>
   13e5c:	sub	r7, r7, #1
   13e60:	cmp	r7, #0
   13e64:	bne	13e54 <__assert_fail@plt+0x2a40>
   13e68:	b	139f4 <__assert_fail@plt+0x25e0>
   13e6c:	ldrb	r3, [r4, #133]	; 0x85
   13e70:	cmp	r3, #0
   13e74:	beq	139f4 <__assert_fail@plt+0x25e0>
   13e78:	ldrb	r3, [r4, #134]	; 0x86
   13e7c:	cmp	r3, #0
   13e80:	beq	139f4 <__assert_fail@plt+0x25e0>
   13e84:	mov	r0, #12
   13e88:	bl	11408 <putchar_unlocked@plt>
   13e8c:	mov	r3, #0
   13e90:	strb	r3, [r4, #134]	; 0x86
   13e94:	b	139f4 <__assert_fail@plt+0x25e0>
   13e98:	add	sp, sp, #36	; 0x24
   13e9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ea0:	andeq	ip, r2, r0, asr #2
   13ea4:	strdeq	ip, [r2], -r0
   13ea8:	ldrdeq	sl, [r1], -sl	; <UNPREDICTABLE>
   13eac:	andeq	sl, r1, r0, asr #1
   13eb0:	ldrdeq	sl, [r1], -ip
   13eb4:	ldrdeq	sl, [r1], -fp
   13eb8:	andeq	sl, r1, fp, asr #1
   13ebc:	andeq	ip, r2, r0, ror #3
   13ec0:	strdeq	sl, [r1], -r2
   13ec4:	andeq	r2, r1, r0, lsr #26
   13ec8:	andeq	r1, r1, r4, ror #30
   13ecc:	muleq	r1, r4, ip
   13ed0:	andeq	r2, r1, ip, asr #28
   13ed4:	subs	r5, r0, #0
   13ed8:	push	{r7, lr}
   13edc:	sub	sp, sp, #56	; 0x38
   13ee0:	ldr	r4, [pc, #812]	; 14214 <__assert_fail@plt+0x2e00>
   13ee4:	beq	13f1c <__assert_fail@plt+0x2b08>
   13ee8:	ldr	r3, [pc, #808]	; 14218 <__assert_fail@plt+0x2e04>
   13eec:	mov	r2, #5
   13ef0:	ldr	r1, [pc, #804]	; 1421c <__assert_fail@plt+0x2e08>
   13ef4:	mov	r0, #0
   13ef8:	ldr	r6, [r3]
   13efc:	bl	1118c <dcgettext@plt>
   13f00:	ldr	r3, [r4]
   13f04:	mov	r1, #1
   13f08:	mov	r2, r0
   13f0c:	mov	r0, r6
   13f10:	bl	1133c <__fprintf_chk@plt>
   13f14:	mov	r0, r5
   13f18:	bl	112ac <exit@plt>
   13f1c:	mov	r2, #5
   13f20:	ldr	r1, [pc, #760]	; 14220 <__assert_fail@plt+0x2e0c>
   13f24:	bl	1118c <dcgettext@plt>
   13f28:	ldr	r2, [r4]
   13f2c:	ldr	r4, [pc, #752]	; 14224 <__assert_fail@plt+0x2e10>
   13f30:	ldr	r8, [pc, #752]	; 14228 <__assert_fail@plt+0x2e14>
   13f34:	mov	r6, r5
   13f38:	mov	r1, r0
   13f3c:	mov	r0, #1
   13f40:	bl	11318 <__printf_chk@plt>
   13f44:	mov	r2, #5
   13f48:	ldr	r1, [pc, #732]	; 1422c <__assert_fail@plt+0x2e18>
   13f4c:	mov	r0, r5
   13f50:	bl	1118c <dcgettext@plt>
   13f54:	ldr	r1, [r4]
   13f58:	bl	110c0 <fputs_unlocked@plt>
   13f5c:	mov	r2, #5
   13f60:	ldr	r1, [pc, #712]	; 14230 <__assert_fail@plt+0x2e1c>
   13f64:	mov	r0, r5
   13f68:	bl	1118c <dcgettext@plt>
   13f6c:	ldr	r1, [r4]
   13f70:	bl	110c0 <fputs_unlocked@plt>
   13f74:	mov	r2, #5
   13f78:	ldr	r1, [pc, #692]	; 14234 <__assert_fail@plt+0x2e20>
   13f7c:	mov	r0, r5
   13f80:	bl	1118c <dcgettext@plt>
   13f84:	ldr	r1, [r4]
   13f88:	bl	110c0 <fputs_unlocked@plt>
   13f8c:	mov	r2, #5
   13f90:	ldr	r1, [pc, #672]	; 14238 <__assert_fail@plt+0x2e24>
   13f94:	mov	r0, r5
   13f98:	bl	1118c <dcgettext@plt>
   13f9c:	ldr	r1, [r4]
   13fa0:	bl	110c0 <fputs_unlocked@plt>
   13fa4:	mov	r2, #5
   13fa8:	ldr	r1, [pc, #652]	; 1423c <__assert_fail@plt+0x2e28>
   13fac:	mov	r0, r5
   13fb0:	bl	1118c <dcgettext@plt>
   13fb4:	ldr	r1, [r4]
   13fb8:	bl	110c0 <fputs_unlocked@plt>
   13fbc:	mov	r2, #5
   13fc0:	ldr	r1, [pc, #632]	; 14240 <__assert_fail@plt+0x2e2c>
   13fc4:	mov	r0, r5
   13fc8:	bl	1118c <dcgettext@plt>
   13fcc:	ldr	r1, [r4]
   13fd0:	bl	110c0 <fputs_unlocked@plt>
   13fd4:	mov	r2, #5
   13fd8:	ldr	r1, [pc, #612]	; 14244 <__assert_fail@plt+0x2e30>
   13fdc:	mov	r0, r5
   13fe0:	bl	1118c <dcgettext@plt>
   13fe4:	ldr	r1, [r4]
   13fe8:	bl	110c0 <fputs_unlocked@plt>
   13fec:	mov	r2, #5
   13ff0:	ldr	r1, [pc, #592]	; 14248 <__assert_fail@plt+0x2e34>
   13ff4:	mov	r0, r5
   13ff8:	bl	1118c <dcgettext@plt>
   13ffc:	ldr	r1, [r4]
   14000:	bl	110c0 <fputs_unlocked@plt>
   14004:	mov	r2, #5
   14008:	ldr	r1, [pc, #572]	; 1424c <__assert_fail@plt+0x2e38>
   1400c:	mov	r0, r5
   14010:	bl	1118c <dcgettext@plt>
   14014:	ldr	r1, [r4]
   14018:	bl	110c0 <fputs_unlocked@plt>
   1401c:	mov	r2, #5
   14020:	ldr	r1, [pc, #552]	; 14250 <__assert_fail@plt+0x2e3c>
   14024:	mov	r0, r5
   14028:	bl	1118c <dcgettext@plt>
   1402c:	ldr	r1, [r4]
   14030:	bl	110c0 <fputs_unlocked@plt>
   14034:	mov	r2, #5
   14038:	ldr	r1, [pc, #532]	; 14254 <__assert_fail@plt+0x2e40>
   1403c:	mov	r0, r5
   14040:	bl	1118c <dcgettext@plt>
   14044:	ldr	r1, [r4]
   14048:	bl	110c0 <fputs_unlocked@plt>
   1404c:	mov	r2, #5
   14050:	ldr	r1, [pc, #512]	; 14258 <__assert_fail@plt+0x2e44>
   14054:	mov	r0, r5
   14058:	bl	1118c <dcgettext@plt>
   1405c:	ldr	r1, [r4]
   14060:	bl	110c0 <fputs_unlocked@plt>
   14064:	mov	r2, #5
   14068:	ldr	r1, [pc, #492]	; 1425c <__assert_fail@plt+0x2e48>
   1406c:	mov	r0, r5
   14070:	bl	1118c <dcgettext@plt>
   14074:	ldr	r1, [r4]
   14078:	bl	110c0 <fputs_unlocked@plt>
   1407c:	mov	r2, #5
   14080:	ldr	r1, [pc, #472]	; 14260 <__assert_fail@plt+0x2e4c>
   14084:	mov	r0, r5
   14088:	bl	1118c <dcgettext@plt>
   1408c:	ldr	r1, [r4]
   14090:	bl	110c0 <fputs_unlocked@plt>
   14094:	mov	r2, #5
   14098:	ldr	r1, [pc, #452]	; 14264 <__assert_fail@plt+0x2e50>
   1409c:	mov	r0, r5
   140a0:	bl	1118c <dcgettext@plt>
   140a4:	ldr	r1, [r4]
   140a8:	bl	110c0 <fputs_unlocked@plt>
   140ac:	mov	r2, #5
   140b0:	ldr	r1, [pc, #432]	; 14268 <__assert_fail@plt+0x2e54>
   140b4:	mov	r0, r5
   140b8:	bl	1118c <dcgettext@plt>
   140bc:	ldr	r1, [r4]
   140c0:	bl	110c0 <fputs_unlocked@plt>
   140c4:	mov	r2, #5
   140c8:	ldr	r1, [pc, #412]	; 1426c <__assert_fail@plt+0x2e58>
   140cc:	mov	r0, r5
   140d0:	bl	1118c <dcgettext@plt>
   140d4:	ldr	r1, [r4]
   140d8:	bl	110c0 <fputs_unlocked@plt>
   140dc:	mov	r2, #5
   140e0:	ldr	r1, [pc, #392]	; 14270 <__assert_fail@plt+0x2e5c>
   140e4:	mov	r0, r5
   140e8:	bl	1118c <dcgettext@plt>
   140ec:	ldr	r1, [r4]
   140f0:	bl	110c0 <fputs_unlocked@plt>
   140f4:	ldr	lr, [pc, #376]	; 14274 <__assert_fail@plt+0x2e60>
   140f8:	mov	ip, sp
   140fc:	ldm	lr!, {r0, r1, r2, r3}
   14100:	stmia	ip!, {r0, r1, r2, r3}
   14104:	ldm	lr!, {r0, r1, r2, r3}
   14108:	stmia	ip!, {r0, r1, r2, r3}
   1410c:	ldm	lr!, {r0, r1, r2, r3}
   14110:	stmia	ip!, {r0, r1, r2, r3}
   14114:	ldm	lr, {r0, r1}
   14118:	stm	ip, {r0, r1}
   1411c:	ldr	r1, [sp, r6]
   14120:	add	r7, sp, r6
   14124:	cmp	r1, #0
   14128:	bne	141cc <__assert_fail@plt+0x2db8>
   1412c:	ldr	r6, [r7, #4]
   14130:	ldr	r7, [pc, #240]	; 14228 <__assert_fail@plt+0x2e14>
   14134:	cmp	r6, #0
   14138:	mov	r2, #5
   1413c:	ldr	r1, [pc, #308]	; 14278 <__assert_fail@plt+0x2e64>
   14140:	mov	r0, #0
   14144:	moveq	r6, r7
   14148:	bl	1118c <dcgettext@plt>
   1414c:	ldr	r3, [pc, #296]	; 1427c <__assert_fail@plt+0x2e68>
   14150:	ldr	r2, [pc, #296]	; 14280 <__assert_fail@plt+0x2e6c>
   14154:	mov	r1, r0
   14158:	mov	r0, #1
   1415c:	bl	11318 <__printf_chk@plt>
   14160:	mov	r1, #0
   14164:	mov	r0, #5
   14168:	bl	11378 <setlocale@plt>
   1416c:	cmp	r0, #0
   14170:	bne	141e4 <__assert_fail@plt+0x2dd0>
   14174:	mov	r2, #5
   14178:	ldr	r1, [pc, #260]	; 14284 <__assert_fail@plt+0x2e70>
   1417c:	mov	r0, #0
   14180:	bl	1118c <dcgettext@plt>
   14184:	ldr	r3, [pc, #156]	; 14228 <__assert_fail@plt+0x2e14>
   14188:	ldr	r2, [pc, #236]	; 1427c <__assert_fail@plt+0x2e68>
   1418c:	mov	r1, r0
   14190:	mov	r0, #1
   14194:	bl	11318 <__printf_chk@plt>
   14198:	mov	r2, #5
   1419c:	ldr	r1, [pc, #228]	; 14288 <__assert_fail@plt+0x2e74>
   141a0:	mov	r0, #0
   141a4:	bl	1118c <dcgettext@plt>
   141a8:	ldr	r2, [pc, #220]	; 1428c <__assert_fail@plt+0x2e78>
   141ac:	cmp	r6, r7
   141b0:	ldr	r3, [pc, #216]	; 14290 <__assert_fail@plt+0x2e7c>
   141b4:	moveq	r3, r2
   141b8:	mov	r2, r6
   141bc:	mov	r1, r0
   141c0:	mov	r0, #1
   141c4:	bl	11318 <__printf_chk@plt>
   141c8:	b	13f14 <__assert_fail@plt+0x2b00>
   141cc:	mov	r0, r8
   141d0:	bl	110e4 <strcmp@plt>
   141d4:	add	r6, r6, #8
   141d8:	cmp	r0, #0
   141dc:	bne	1411c <__assert_fail@plt+0x2d08>
   141e0:	b	1412c <__assert_fail@plt+0x2d18>
   141e4:	mov	r2, #3
   141e8:	ldr	r1, [pc, #164]	; 14294 <__assert_fail@plt+0x2e80>
   141ec:	bl	113e4 <strncmp@plt>
   141f0:	cmp	r0, #0
   141f4:	beq	14174 <__assert_fail@plt+0x2d60>
   141f8:	mov	r2, #5
   141fc:	ldr	r1, [pc, #148]	; 14298 <__assert_fail@plt+0x2e84>
   14200:	mov	r0, #0
   14204:	bl	1118c <dcgettext@plt>
   14208:	ldr	r1, [r4]
   1420c:	bl	110c0 <fputs_unlocked@plt>
   14210:	b	14174 <__assert_fail@plt+0x2d60>
   14214:			; <UNDEFINED> instruction: 0x0002c2b0
   14218:	ldrdeq	ip, [r2], -r8
   1421c:	andeq	sl, r1, r7, lsr #2
   14220:	andeq	sl, r1, lr, asr #2
   14224:	andeq	ip, r2, r4, ror #3
   14228:	andeq	sl, r1, r4, lsr #2
   1422c:	andeq	sl, r1, pc, ror #2
   14230:	muleq	r1, ip, r1
   14234:	ldrdeq	sl, [r1], -r4
   14238:	andeq	sl, r1, pc, lsl r2
   1423c:	andeq	sl, r1, sp, ror #6
   14240:	andeq	sl, r1, fp, ror r4
   14244:	andeq	sl, r1, fp, lsl #12
   14248:			; <UNDEFINED> instruction: 0x0001a7b6
   1424c:	muleq	r1, r2, r8
   14250:	andeq	sl, r1, r2, lsr #18
   14254:	andeq	sl, r1, ip, ror sl
   14258:	andeq	sl, r1, r9, ror fp
   1425c:			; <UNDEFINED> instruction: 0x0001acbf
   14260:	andeq	sl, r1, fp, lsr #27
   14264:	andeq	sl, r1, r3, lsl lr
   14268:	andeq	sl, r1, r4, lsr #31
   1426c:	andeq	fp, r1, fp, ror r0
   14270:	andeq	fp, r1, r8, lsr #1
   14274:	andeq	r9, r1, ip, ror #31
   14278:	ldrdeq	fp, [r1], -lr
   1427c:	strdeq	fp, [r1], -r5
   14280:	andeq	fp, r1, sp, lsl r1
   14284:	andeq	fp, r1, r6, ror r1
   14288:	muleq	r1, r1, r1
   1428c:	andeq	fp, r1, lr, lsl #8
   14290:	ldrdeq	sl, [r1], -fp
   14294:	andeq	fp, r1, fp, lsr #2
   14298:	andeq	fp, r1, pc, lsr #2
   1429c:	push	{r4, r5, r6, r7, lr}
   142a0:	mov	r5, r3
   142a4:	ldrb	r3, [r0]
   142a8:	mov	r7, r1
   142ac:	mov	r4, r0
   142b0:	sub	r1, r3, #48	; 0x30
   142b4:	cmp	r1, #9
   142b8:	addhi	r4, r0, #1
   142bc:	strbhi	r3, [r2]
   142c0:	ldrb	r3, [r4]
   142c4:	sub	sp, sp, #20
   142c8:	cmp	r3, #0
   142cc:	beq	14348 <__assert_fail@plt+0x2f34>
   142d0:	ldr	r3, [pc, #120]	; 14350 <__assert_fail@plt+0x2f3c>
   142d4:	mov	r2, #10
   142d8:	str	r3, [sp]
   142dc:	mov	r1, #0
   142e0:	add	r3, sp, #12
   142e4:	mov	r0, r4
   142e8:	bl	18b94 <__assert_fail@plt+0x7780>
   142ec:	cmp	r0, #0
   142f0:	bne	14304 <__assert_fail@plt+0x2ef0>
   142f4:	ldr	r3, [sp, #12]
   142f8:	cmp	r3, #0
   142fc:	strgt	r3, [r5]
   14300:	bgt	14348 <__assert_fail@plt+0x2f34>
   14304:	bl	112e8 <__errno_location@plt>
   14308:	mov	r2, #5
   1430c:	ldr	r1, [pc, #64]	; 14354 <__assert_fail@plt+0x2f40>
   14310:	ldr	r5, [r0]
   14314:	mov	r0, #0
   14318:	bl	1118c <dcgettext@plt>
   1431c:	mov	r6, r0
   14320:	mov	r0, r4
   14324:	bl	1763c <__assert_fail@plt+0x6228>
   14328:	mov	r3, r7
   1432c:	mov	r2, r6
   14330:	mov	r1, r5
   14334:	str	r0, [sp]
   14338:	mov	r0, #0
   1433c:	bl	11228 <error@plt>
   14340:	mov	r0, #1
   14344:	bl	13ed4 <__assert_fail@plt+0x2ac0>
   14348:	add	sp, sp, #20
   1434c:	pop	{r4, r5, r6, r7, pc}
   14350:	ldrdeq	sl, [r1], -fp
   14354:	andeq	fp, r1, r4, asr #3
   14358:	ldr	r3, [pc, #4]	; 14364 <__assert_fail@plt+0x2f50>
   1435c:	str	r0, [r3]
   14360:	bx	lr
   14364:	andeq	ip, r2, r8, lsr #5
   14368:	ldr	r3, [pc, #4]	; 14374 <__assert_fail@plt+0x2f60>
   1436c:	strb	r0, [r3, #4]
   14370:	bx	lr
   14374:	andeq	ip, r2, r8, lsr #5
   14378:	ldr	r3, [pc, #192]	; 14440 <__assert_fail@plt+0x302c>
   1437c:	push	{r0, r1, r4, r5, r6, lr}
   14380:	ldr	r0, [r3]
   14384:	bl	1940c <__assert_fail@plt+0x7ff8>
   14388:	cmp	r0, #0
   1438c:	beq	14424 <__assert_fail@plt+0x3010>
   14390:	ldr	r3, [pc, #172]	; 14444 <__assert_fail@plt+0x3030>
   14394:	mov	r4, r3
   14398:	ldrb	r2, [r3, #4]
   1439c:	cmp	r2, #0
   143a0:	beq	143b4 <__assert_fail@plt+0x2fa0>
   143a4:	bl	112e8 <__errno_location@plt>
   143a8:	ldr	r3, [r0]
   143ac:	cmp	r3, #32
   143b0:	beq	14424 <__assert_fail@plt+0x3010>
   143b4:	mov	r2, #5
   143b8:	ldr	r1, [pc, #136]	; 14448 <__assert_fail@plt+0x3034>
   143bc:	mov	r0, #0
   143c0:	bl	1118c <dcgettext@plt>
   143c4:	ldr	r4, [r4]
   143c8:	cmp	r4, #0
   143cc:	mov	r5, r0
   143d0:	beq	14408 <__assert_fail@plt+0x2ff4>
   143d4:	bl	112e8 <__errno_location@plt>
   143d8:	ldr	r6, [r0]
   143dc:	mov	r0, r4
   143e0:	bl	174ec <__assert_fail@plt+0x60d8>
   143e4:	str	r5, [sp]
   143e8:	ldr	r2, [pc, #92]	; 1444c <__assert_fail@plt+0x3038>
   143ec:	mov	r1, r6
   143f0:	mov	r3, r0
   143f4:	mov	r0, #0
   143f8:	bl	11228 <error@plt>
   143fc:	ldr	r3, [pc, #76]	; 14450 <__assert_fail@plt+0x303c>
   14400:	ldr	r0, [r3]
   14404:	bl	11144 <_exit@plt>
   14408:	bl	112e8 <__errno_location@plt>
   1440c:	mov	r3, r5
   14410:	ldr	r2, [pc, #60]	; 14454 <__assert_fail@plt+0x3040>
   14414:	ldr	r1, [r0]
   14418:	mov	r0, r4
   1441c:	bl	11228 <error@plt>
   14420:	b	143fc <__assert_fail@plt+0x2fe8>
   14424:	ldr	r3, [pc, #44]	; 14458 <__assert_fail@plt+0x3044>
   14428:	ldr	r0, [r3]
   1442c:	bl	1940c <__assert_fail@plt+0x7ff8>
   14430:	cmp	r0, #0
   14434:	bne	143fc <__assert_fail@plt+0x2fe8>
   14438:	add	sp, sp, #8
   1443c:	pop	{r4, r5, r6, pc}
   14440:	andeq	ip, r2, r4, ror #3
   14444:	andeq	ip, r2, r8, lsr #5
   14448:	andeq	fp, r1, r4, ror #10
   1444c:	andeq	fp, r1, r0, ror r5
   14450:	andeq	ip, r2, r4, lsl #3
   14454:	andeq	fp, r1, r4, ror r5
   14458:	ldrdeq	ip, [r2], -r8
   1445c:	push	{r4, r5}
   14460:	pop	{r4, r5}
   14464:	b	110fc <posix_fadvise64@plt>
   14468:	cmp	r0, #0
   1446c:	bxeq	lr
   14470:	push	{r0, r1, r2, r3, r4, lr}
   14474:	mov	r4, r1
   14478:	bl	11324 <fileno@plt>
   1447c:	mov	r2, #0
   14480:	mov	r3, #0
   14484:	str	r4, [sp, #8]
   14488:	strd	r2, [sp]
   1448c:	bl	110fc <posix_fadvise64@plt>
   14490:	add	sp, sp, #16
   14494:	pop	{r4, pc}
   14498:	push	{r0, r1, r2, r4, r5, lr}
   1449c:	mov	r4, r0
   144a0:	bl	11324 <fileno@plt>
   144a4:	cmp	r0, #0
   144a8:	mov	r0, r4
   144ac:	bge	144bc <__assert_fail@plt+0x30a8>
   144b0:	add	sp, sp, #12
   144b4:	pop	{r4, r5, lr}
   144b8:	b	11354 <fclose@plt>
   144bc:	bl	11264 <__freading@plt>
   144c0:	cmp	r0, #0
   144c4:	bne	14500 <__assert_fail@plt+0x30ec>
   144c8:	mov	r0, r4
   144cc:	bl	14540 <__assert_fail@plt+0x312c>
   144d0:	cmp	r0, #0
   144d4:	bne	14534 <__assert_fail@plt+0x3120>
   144d8:	mov	r5, #0
   144dc:	mov	r0, r4
   144e0:	bl	11354 <fclose@plt>
   144e4:	cmp	r5, #0
   144e8:	beq	144f8 <__assert_fail@plt+0x30e4>
   144ec:	bl	112e8 <__errno_location@plt>
   144f0:	str	r5, [r0]
   144f4:	mvn	r0, #0
   144f8:	add	sp, sp, #12
   144fc:	pop	{r4, r5, pc}
   14500:	mov	r0, r4
   14504:	bl	11324 <fileno@plt>
   14508:	mov	r3, #1
   1450c:	str	r3, [sp]
   14510:	mov	r2, #0
   14514:	mov	r3, #0
   14518:	bl	111ec <lseek64@plt>
   1451c:	mvn	r3, #0
   14520:	mvn	r2, #0
   14524:	cmp	r1, r3
   14528:	cmpeq	r0, r2
   1452c:	bne	144c8 <__assert_fail@plt+0x30b4>
   14530:	b	144d8 <__assert_fail@plt+0x30c4>
   14534:	bl	112e8 <__errno_location@plt>
   14538:	ldr	r5, [r0]
   1453c:	b	144dc <__assert_fail@plt+0x30c8>
   14540:	push	{r0, r1, r4, lr}
   14544:	subs	r4, r0, #0
   14548:	bne	1455c <__assert_fail@plt+0x3148>
   1454c:	mov	r0, r4
   14550:	add	sp, sp, #8
   14554:	pop	{r4, lr}
   14558:	b	11114 <fflush@plt>
   1455c:	bl	11264 <__freading@plt>
   14560:	cmp	r0, #0
   14564:	beq	1454c <__assert_fail@plt+0x3138>
   14568:	ldr	r3, [r4]
   1456c:	tst	r3, #256	; 0x100
   14570:	beq	1454c <__assert_fail@plt+0x3138>
   14574:	mov	r3, #1
   14578:	str	r3, [sp]
   1457c:	mov	r2, #0
   14580:	mov	r3, #0
   14584:	mov	r0, r4
   14588:	bl	14678 <__assert_fail@plt+0x3264>
   1458c:	b	1454c <__assert_fail@plt+0x3138>
   14590:	push	{r4, r5, r6, lr}
   14594:	mov	r6, r1
   14598:	bl	113b4 <fopen64@plt>
   1459c:	subs	r4, r0, #0
   145a0:	beq	145d8 <__assert_fail@plt+0x31c4>
   145a4:	bl	11324 <fileno@plt>
   145a8:	cmp	r0, #2
   145ac:	bhi	145d8 <__assert_fail@plt+0x31c4>
   145b0:	bl	17b08 <__assert_fail@plt+0x66f4>
   145b4:	subs	r5, r0, #0
   145b8:	bge	145e0 <__assert_fail@plt+0x31cc>
   145bc:	bl	112e8 <__errno_location@plt>
   145c0:	ldr	r6, [r0]
   145c4:	mov	r5, r0
   145c8:	mov	r0, r4
   145cc:	bl	14498 <__assert_fail@plt+0x3084>
   145d0:	str	r6, [r5]
   145d4:	mov	r4, #0
   145d8:	mov	r0, r4
   145dc:	pop	{r4, r5, r6, pc}
   145e0:	mov	r0, r4
   145e4:	bl	14498 <__assert_fail@plt+0x3084>
   145e8:	cmp	r0, #0
   145ec:	beq	1460c <__assert_fail@plt+0x31f8>
   145f0:	bl	112e8 <__errno_location@plt>
   145f4:	ldr	r6, [r0]
   145f8:	mov	r4, r0
   145fc:	mov	r0, r5
   14600:	bl	113fc <close@plt>
   14604:	str	r6, [r4]
   14608:	b	145d4 <__assert_fail@plt+0x31c0>
   1460c:	mov	r1, r6
   14610:	mov	r0, r5
   14614:	bl	110a8 <fdopen@plt>
   14618:	subs	r4, r0, #0
   1461c:	bne	145d8 <__assert_fail@plt+0x31c4>
   14620:	b	145f0 <__assert_fail@plt+0x31dc>
   14624:	push	{r0, r1, r2, r4, r5, lr}
   14628:	mov	r5, r0
   1462c:	bl	112e8 <__errno_location@plt>
   14630:	ldr	r3, [r0]
   14634:	mov	r4, r0
   14638:	str	r3, [sp]
   1463c:	str	r3, [sp, #4]
   14640:	mov	r3, #0
   14644:	str	r3, [r0]
   14648:	mov	r0, r5
   1464c:	bl	1112c <free@plt>
   14650:	ldr	r3, [r4]
   14654:	add	r2, sp, #8
   14658:	cmp	r3, #0
   1465c:	moveq	r3, #4
   14660:	movne	r3, #0
   14664:	add	r3, r2, r3
   14668:	ldr	r3, [r3, #-8]
   1466c:	str	r3, [r4]
   14670:	add	sp, sp, #12
   14674:	pop	{r4, r5, pc}
   14678:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1467c:	mov	r4, r0
   14680:	ldmib	r0, {ip, lr}
   14684:	ldr	r8, [sp, #32]
   14688:	cmp	lr, ip
   1468c:	bne	146f8 <__assert_fail@plt+0x32e4>
   14690:	ldr	lr, [r0, #20]
   14694:	ldr	ip, [r0, #16]
   14698:	cmp	lr, ip
   1469c:	bne	146f8 <__assert_fail@plt+0x32e4>
   146a0:	ldr	r5, [r0, #36]	; 0x24
   146a4:	cmp	r5, #0
   146a8:	bne	146f8 <__assert_fail@plt+0x32e4>
   146ac:	mov	r6, r2
   146b0:	mov	r7, r3
   146b4:	bl	11324 <fileno@plt>
   146b8:	mov	r2, r6
   146bc:	mov	r3, r7
   146c0:	str	r8, [sp]
   146c4:	bl	111ec <lseek64@plt>
   146c8:	mvn	r3, #0
   146cc:	mvn	r2, #0
   146d0:	cmp	r1, r3
   146d4:	cmpeq	r0, r2
   146d8:	mvneq	r0, #0
   146dc:	ldrne	r3, [r4]
   146e0:	strdne	r0, [r4, #80]	; 0x50
   146e4:	movne	r0, r5
   146e8:	bicne	r3, r3, #16
   146ec:	strne	r3, [r4]
   146f0:	add	sp, sp, #8
   146f4:	pop	{r4, r5, r6, r7, r8, pc}
   146f8:	str	r8, [sp, #32]
   146fc:	mov	r0, r4
   14700:	add	sp, sp, #8
   14704:	pop	{r4, r5, r6, r7, r8, lr}
   14708:	b	11360 <fseeko64@plt>
   1470c:	mov	r1, r0
   14710:	mov	r0, #0
   14714:	b	11138 <clock_gettime@plt>
   14718:	push	{r0, r1, r2, r4, r5, lr}
   1471c:	mov	r4, r0
   14720:	mov	r0, sp
   14724:	bl	1470c <__assert_fail@plt+0x32f8>
   14728:	ldm	sp, {r0, r1}
   1472c:	stm	r4, {r0, r1}
   14730:	mov	r0, r4
   14734:	add	sp, sp, #12
   14738:	pop	{r4, r5, pc}
   1473c:	push	{lr}		; (str lr, [sp, #-4]!)
   14740:	sub	sp, sp, #268	; 0x10c
   14744:	ldr	r2, [pc, #64]	; 1478c <__assert_fail@plt+0x3378>
   14748:	add	r1, sp, #4
   1474c:	bl	17648 <__assert_fail@plt+0x6234>
   14750:	cmp	r0, #0
   14754:	movne	r0, #0
   14758:	bne	14784 <__assert_fail@plt+0x3370>
   1475c:	ldr	r1, [pc, #44]	; 14790 <__assert_fail@plt+0x337c>
   14760:	add	r0, sp, #4
   14764:	bl	110e4 <strcmp@plt>
   14768:	cmp	r0, #0
   1476c:	beq	14784 <__assert_fail@plt+0x3370>
   14770:	ldr	r1, [pc, #28]	; 14794 <__assert_fail@plt+0x3380>
   14774:	add	r0, sp, #4
   14778:	bl	110e4 <strcmp@plt>
   1477c:	adds	r0, r0, #0
   14780:	movne	r0, #1
   14784:	add	sp, sp, #268	; 0x10c
   14788:	pop	{pc}		; (ldr pc, [sp], #4)
   1478c:	andeq	r0, r0, r1, lsl #2
   14790:	andeq	fp, r1, r7, ror r5
   14794:	andeq	fp, r1, r9, ror r5
   14798:	mov	r3, #0
   1479c:	cmp	r0, #0
   147a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   147a4:	mov	r4, r0
   147a8:	strb	r3, [r2, #20]
   147ac:	sbcs	r3, r1, #0
   147b0:	mov	r5, r1
   147b4:	add	r6, r2, #20
   147b8:	mov	r8, #10
   147bc:	mov	r9, #0
   147c0:	bge	14824 <__assert_fail@plt+0x3410>
   147c4:	mov	r0, r4
   147c8:	mov	r1, r5
   147cc:	mov	r2, r8
   147d0:	mov	r3, r9
   147d4:	bl	19b5c <__assert_fail@plt+0x8748>
   147d8:	mov	r3, r9
   147dc:	mov	r0, r4
   147e0:	mov	r1, r5
   147e4:	sub	r7, r6, #1
   147e8:	rsb	r2, r2, #48	; 0x30
   147ec:	strb	r2, [r6, #-1]
   147f0:	mov	r2, r8
   147f4:	bl	19b5c <__assert_fail@plt+0x8748>
   147f8:	mov	r4, r0
   147fc:	mov	r5, r1
   14800:	orrs	r3, r4, r5
   14804:	bne	1481c <__assert_fail@plt+0x3408>
   14808:	sub	r6, r6, #2
   1480c:	mov	r3, #45	; 0x2d
   14810:	strb	r3, [r7, #-1]
   14814:	mov	r0, r6
   14818:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1481c:	mov	r6, r7
   14820:	b	147c4 <__assert_fail@plt+0x33b0>
   14824:	mov	r0, r4
   14828:	mov	r1, r5
   1482c:	mov	r2, r8
   14830:	mov	r3, r9
   14834:	bl	19b5c <__assert_fail@plt+0x8748>
   14838:	mov	r3, r9
   1483c:	mov	r0, r4
   14840:	mov	r1, r5
   14844:	add	r2, r2, #48	; 0x30
   14848:	strb	r2, [r6, #-1]!
   1484c:	mov	r2, r8
   14850:	bl	19b5c <__assert_fail@plt+0x8748>
   14854:	mov	r4, r0
   14858:	mov	r5, r1
   1485c:	orrs	r3, r4, r5
   14860:	bne	14824 <__assert_fail@plt+0x3410>
   14864:	b	14814 <__assert_fail@plt+0x3400>
   14868:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1486c:	mov	r6, r2
   14870:	mov	r5, r0
   14874:	add	r7, r0, r1
   14878:	bl	111f8 <__ctype_get_mb_cur_max@plt>
   1487c:	mov	r4, #0
   14880:	cmp	r0, #1
   14884:	andls	r6, r6, #2
   14888:	bls	149c0 <__assert_fail@plt+0x35ac>
   1488c:	cmp	r5, r7
   14890:	bcs	149a4 <__assert_fail@plt+0x3590>
   14894:	ldrb	r3, [r5]
   14898:	cmp	r3, #63	; 0x3f
   1489c:	bhi	148c0 <__assert_fail@plt+0x34ac>
   148a0:	cmp	r3, #37	; 0x25
   148a4:	bcs	148b4 <__assert_fail@plt+0x34a0>
   148a8:	sub	r3, r3, #32
   148ac:	cmp	r3, #3
   148b0:	bhi	148dc <__assert_fail@plt+0x34c8>
   148b4:	add	r5, r5, #1
   148b8:	add	r4, r4, #1
   148bc:	b	1488c <__assert_fail@plt+0x3478>
   148c0:	cmp	r3, #65	; 0x41
   148c4:	bcc	148dc <__assert_fail@plt+0x34c8>
   148c8:	cmp	r3, #95	; 0x5f
   148cc:	bls	148b4 <__assert_fail@plt+0x34a0>
   148d0:	sub	r3, r3, #97	; 0x61
   148d4:	cmp	r3, #29
   148d8:	b	148b0 <__assert_fail@plt+0x349c>
   148dc:	and	r9, r6, #2
   148e0:	mvn	sl, #-2147483648	; 0x80000000
   148e4:	mov	r3, #0
   148e8:	str	r3, [sp, #8]
   148ec:	str	r3, [sp, #12]
   148f0:	add	r3, sp, #8
   148f4:	sub	r2, r7, r5
   148f8:	mov	r1, r5
   148fc:	add	r0, sp, #4
   14900:	bl	19674 <__assert_fail@plt+0x8260>
   14904:	cmn	r0, #1
   14908:	mov	r8, r0
   1490c:	bne	14920 <__assert_fail@plt+0x350c>
   14910:	tst	r6, #1
   14914:	beq	148b4 <__assert_fail@plt+0x34a0>
   14918:	mvn	r4, #0
   1491c:	b	149a4 <__assert_fail@plt+0x3590>
   14920:	cmn	r0, #2
   14924:	bne	1493c <__assert_fail@plt+0x3528>
   14928:	tst	r6, #1
   1492c:	bne	14918 <__assert_fail@plt+0x3504>
   14930:	add	r4, r4, #1
   14934:	mov	r5, r7
   14938:	b	1488c <__assert_fail@plt+0x3478>
   1493c:	cmp	r0, #0
   14940:	ldr	r0, [sp, #4]
   14944:	moveq	r8, #1
   14948:	bl	11120 <wcwidth@plt>
   1494c:	cmp	r0, #0
   14950:	blt	1497c <__assert_fail@plt+0x3568>
   14954:	sub	r3, sl, r4
   14958:	cmp	r0, r3
   1495c:	bgt	149a0 <__assert_fail@plt+0x358c>
   14960:	add	r4, r4, r0
   14964:	add	r0, sp, #8
   14968:	bl	1115c <mbsinit@plt>
   1496c:	add	r5, r5, r8
   14970:	cmp	r0, #0
   14974:	beq	148f0 <__assert_fail@plt+0x34dc>
   14978:	b	1488c <__assert_fail@plt+0x3478>
   1497c:	cmp	r9, #0
   14980:	bne	14918 <__assert_fail@plt+0x3504>
   14984:	ldr	r0, [sp, #4]
   14988:	bl	111bc <iswcntrl@plt>
   1498c:	cmp	r0, #0
   14990:	bne	14964 <__assert_fail@plt+0x3550>
   14994:	cmn	r4, #-2147483647	; 0x80000001
   14998:	addne	r4, r4, #1
   1499c:	bne	14964 <__assert_fail@plt+0x3550>
   149a0:	mvn	r4, #-2147483648	; 0x80000000
   149a4:	mov	r0, r4
   149a8:	add	sp, sp, #16
   149ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   149b0:	cmp	r6, #0
   149b4:	bne	14918 <__assert_fail@plt+0x3504>
   149b8:	tst	r3, #2
   149bc:	beq	149e4 <__assert_fail@plt+0x35d0>
   149c0:	cmp	r5, r7
   149c4:	bcs	149a4 <__assert_fail@plt+0x3590>
   149c8:	bl	112a0 <__ctype_b_loc@plt>
   149cc:	ldrb	r3, [r5], #1
   149d0:	lsl	r3, r3, #1
   149d4:	ldr	r2, [r0]
   149d8:	ldrh	r3, [r2, r3]
   149dc:	tst	r3, #16384	; 0x4000
   149e0:	beq	149b0 <__assert_fail@plt+0x359c>
   149e4:	cmn	r4, #-2147483647	; 0x80000001
   149e8:	beq	149a4 <__assert_fail@plt+0x3590>
   149ec:	add	r4, r4, #1
   149f0:	b	149c0 <__assert_fail@plt+0x35ac>
   149f4:	push	{r4, r5, r6, lr}
   149f8:	mov	r5, r1
   149fc:	mov	r4, r0
   14a00:	bl	112b8 <strlen@plt>
   14a04:	mov	r2, r5
   14a08:	mov	r1, r0
   14a0c:	mov	r0, r4
   14a10:	pop	{r4, r5, r6, lr}
   14a14:	b	14868 <__assert_fail@plt+0x3454>
   14a18:	push	{r4, r5, r6, r7, r8, lr}
   14a1c:	mov	r6, r0
   14a20:	mov	r7, r1
   14a24:	add	r5, r1, r2
   14a28:	add	r4, r0, r2
   14a2c:	cmp	r5, r7
   14a30:	bne	14a3c <__assert_fail@plt+0x3628>
   14a34:	mov	r0, r6
   14a38:	pop	{r4, r5, r6, r7, r8, pc}
   14a3c:	bl	11270 <__ctype_tolower_loc@plt>
   14a40:	ldrb	r2, [r5, #-1]!
   14a44:	ldr	r3, [r0]
   14a48:	ldr	r3, [r3, r2, lsl #2]
   14a4c:	strb	r3, [r4, #-1]!
   14a50:	b	14a2c <__assert_fail@plt+0x3618>
   14a54:	push	{r4, r5, r6, r7, r8, lr}
   14a58:	mov	r6, r0
   14a5c:	mov	r7, r1
   14a60:	add	r5, r1, r2
   14a64:	add	r4, r0, r2
   14a68:	cmp	r5, r7
   14a6c:	bne	14a78 <__assert_fail@plt+0x3664>
   14a70:	mov	r0, r6
   14a74:	pop	{r4, r5, r6, r7, r8, pc}
   14a78:	bl	1127c <__ctype_toupper_loc@plt>
   14a7c:	ldrb	r2, [r5, #-1]!
   14a80:	ldr	r3, [r0]
   14a84:	ldr	r3, [r3, r2, lsl #2]
   14a88:	strb	r3, [r4, #-1]!
   14a8c:	b	14a68 <__assert_fail@plt+0x3654>
   14a90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a94:	sub	sp, sp, #1120	; 0x460
   14a98:	sub	sp, sp, #4
   14a9c:	mov	r6, r2
   14aa0:	str	r3, [sp, #32]
   14aa4:	ldrb	r3, [sp, #1160]	; 0x488
   14aa8:	mov	r4, r0
   14aac:	str	r1, [sp, #52]	; 0x34
   14ab0:	str	r3, [sp, #76]	; 0x4c
   14ab4:	bl	112e8 <__errno_location@plt>
   14ab8:	ldr	fp, [sp, #1168]	; 0x490
   14abc:	ldr	r3, [r0]
   14ac0:	str	r0, [sp, #48]	; 0x30
   14ac4:	str	r3, [sp, #72]	; 0x48
   14ac8:	ldr	r3, [sp, #32]
   14acc:	ldr	r3, [r3, #8]
   14ad0:	str	r3, [sp, #56]	; 0x38
   14ad4:	ldr	r3, [sp, #32]
   14ad8:	ldr	r3, [r3, #40]	; 0x28
   14adc:	str	r3, [sp, #60]	; 0x3c
   14ae0:	ldr	r2, [sp, #60]	; 0x3c
   14ae4:	ldr	r3, [pc, #4032]	; 15aac <__assert_fail@plt+0x4698>
   14ae8:	cmp	r2, #0
   14aec:	moveq	r2, r3
   14af0:	ldr	r3, [sp, #56]	; 0x38
   14af4:	str	r2, [sp, #60]	; 0x3c
   14af8:	cmp	r3, #12
   14afc:	subgt	r3, r3, #12
   14b00:	bgt	14b10 <__assert_fail@plt+0x36fc>
   14b04:	ldr	r3, [sp, #56]	; 0x38
   14b08:	cmp	r3, #0
   14b0c:	moveq	r3, #12
   14b10:	str	r3, [sp, #56]	; 0x38
   14b14:	mov	r3, #0
   14b18:	str	r3, [sp, #24]
   14b1c:	add	r3, sp, #94	; 0x5e
   14b20:	str	r3, [sp, #68]	; 0x44
   14b24:	ldrb	r3, [r6]
   14b28:	cmp	r3, #0
   14b2c:	bne	14b50 <__assert_fail@plt+0x373c>
   14b30:	ldr	r2, [sp, #52]	; 0x34
   14b34:	cmp	r4, #0
   14b38:	cmpne	r2, #0
   14b3c:	strbne	r3, [r4]
   14b40:	ldr	r3, [sp, #48]	; 0x30
   14b44:	ldr	r2, [sp, #72]	; 0x48
   14b48:	str	r2, [r3]
   14b4c:	b	15a9c <__assert_fail@plt+0x4688>
   14b50:	cmp	r3, #37	; 0x25
   14b54:	bne	14ba4 <__assert_fail@plt+0x3790>
   14b58:	ldr	r3, [sp, #76]	; 0x4c
   14b5c:	mov	r2, #1
   14b60:	mov	r5, #0
   14b64:	str	r3, [sp, #40]	; 0x28
   14b68:	str	r6, [sp, #36]	; 0x24
   14b6c:	str	r5, [sp, #28]
   14b70:	ldr	r1, [sp, #36]	; 0x24
   14b74:	ldrb	r3, [r1, #1]!
   14b78:	cmp	r3, #45	; 0x2d
   14b7c:	str	r1, [sp, #36]	; 0x24
   14b80:	beq	14b9c <__assert_fail@plt+0x3788>
   14b84:	bhi	14c24 <__assert_fail@plt+0x3810>
   14b88:	cmp	r3, #35	; 0x23
   14b8c:	moveq	r5, r2
   14b90:	beq	14b70 <__assert_fail@plt+0x375c>
   14b94:	cmp	r3, #43	; 0x2b
   14b98:	bne	14c3c <__assert_fail@plt+0x3828>
   14b9c:	str	r3, [sp, #28]
   14ba0:	b	14b70 <__assert_fail@plt+0x375c>
   14ba4:	bic	r5, fp, fp, asr #31
   14ba8:	ldr	r3, [sp, #52]	; 0x34
   14bac:	ldr	r2, [sp, #24]
   14bb0:	cmp	r5, #1
   14bb4:	movcs	r7, r5
   14bb8:	movcc	r7, #1
   14bbc:	sub	r3, r3, r2
   14bc0:	cmp	r7, r3
   14bc4:	bcc	14bd0 <__assert_fail@plt+0x37bc>
   14bc8:	mov	r3, #34	; 0x22
   14bcc:	b	15a8c <__assert_fail@plt+0x4678>
   14bd0:	cmp	r4, #0
   14bd4:	beq	14c00 <__assert_fail@plt+0x37ec>
   14bd8:	cmp	r5, #1
   14bdc:	ble	14bf8 <__assert_fail@plt+0x37e4>
   14be0:	sub	r5, r5, #1
   14be4:	mov	r0, r4
   14be8:	mov	r2, r5
   14bec:	mov	r1, #32
   14bf0:	bl	1130c <memset@plt>
   14bf4:	add	r4, r4, r5
   14bf8:	ldrb	r3, [r6]
   14bfc:	strb	r3, [r4], #1
   14c00:	ldr	r3, [sp, #24]
   14c04:	add	r3, r3, r7
   14c08:	str	r3, [sp, #24]
   14c0c:	add	r6, r6, #1
   14c10:	mvn	fp, #0
   14c14:	b	14b24 <__assert_fail@plt+0x3710>
   14c18:	mov	r3, #1
   14c1c:	str	r3, [sp, #40]	; 0x28
   14c20:	b	14b70 <__assert_fail@plt+0x375c>
   14c24:	cmp	r3, #94	; 0x5e
   14c28:	beq	14c18 <__assert_fail@plt+0x3804>
   14c2c:	cmp	r3, #95	; 0x5f
   14c30:	beq	14b9c <__assert_fail@plt+0x3788>
   14c34:	cmp	r3, #48	; 0x30
   14c38:	b	14b98 <__assert_fail@plt+0x3784>
   14c3c:	sub	r3, r3, #48	; 0x30
   14c40:	cmp	r3, #9
   14c44:	bhi	14cdc <__assert_fail@plt+0x38c8>
   14c48:	mov	fp, #0
   14c4c:	ldr	r7, [pc, #3676]	; 15ab0 <__assert_fail@plt+0x469c>
   14c50:	mov	r8, fp
   14c54:	mov	r9, #-2147483648	; 0x80000000
   14c58:	mov	sl, #10
   14c5c:	cmp	fp, #0
   14c60:	bge	14f08 <__assert_fail@plt+0x3af4>
   14c64:	cmn	fp, #1
   14c68:	moveq	r0, r8
   14c6c:	beq	14c88 <__assert_fail@plt+0x3874>
   14c70:	mov	r1, fp
   14c74:	mov	r0, r9
   14c78:	bl	1991c <__assert_fail@plt+0x8508>
   14c7c:	cmp	r0, #9
   14c80:	movgt	r0, #0
   14c84:	movle	r0, #1
   14c88:	cmp	r0, #0
   14c8c:	bne	14f44 <__assert_fail@plt+0x3b30>
   14c90:	ldr	r3, [sp, #36]	; 0x24
   14c94:	mul	r1, sl, fp
   14c98:	ldrb	r2, [r3]
   14c9c:	cmp	r2, #47	; 0x2f
   14ca0:	bgt	14f18 <__assert_fail@plt+0x3b04>
   14ca4:	rsb	r3, r2, #-2147483600	; 0x80000030
   14ca8:	cmp	r1, r3
   14cac:	movge	r3, #0
   14cb0:	movlt	r3, #1
   14cb4:	cmp	r3, #0
   14cb8:	bne	14f44 <__assert_fail@plt+0x3b30>
   14cbc:	add	r2, r2, r1
   14cc0:	sub	fp, r2, #48	; 0x30
   14cc4:	ldr	r2, [sp, #36]	; 0x24
   14cc8:	ldrb	r3, [r2, #1]!
   14ccc:	sub	r3, r3, #48	; 0x30
   14cd0:	cmp	r3, #9
   14cd4:	str	r2, [sp, #36]	; 0x24
   14cd8:	bls	14c5c <__assert_fail@plt+0x3848>
   14cdc:	ldr	r3, [sp, #36]	; 0x24
   14ce0:	ldrb	sl, [r3]
   14ce4:	cmp	sl, #69	; 0x45
   14ce8:	beq	14cf8 <__assert_fail@plt+0x38e4>
   14cec:	cmp	sl, #79	; 0x4f
   14cf0:	movne	sl, #0
   14cf4:	bne	14d04 <__assert_fail@plt+0x38f0>
   14cf8:	ldr	r3, [sp, #36]	; 0x24
   14cfc:	add	r3, r3, #1
   14d00:	str	r3, [sp, #36]	; 0x24
   14d04:	ldr	r3, [sp, #36]	; 0x24
   14d08:	ldrb	r7, [r3]
   14d0c:	str	r7, [sp, #44]	; 0x2c
   14d10:	cmp	r7, #122	; 0x7a
   14d14:	ldrls	pc, [pc, r7, lsl #2]
   14d18:	b	15248 <__assert_fail@plt+0x3e34>
   14d1c:			; <UNDEFINED> instruction: 0x00015fb4
   14d20:	andeq	r5, r1, r8, asr #4
   14d24:	andeq	r5, r1, r8, asr #4
   14d28:	andeq	r5, r1, r8, asr #4
   14d2c:	andeq	r5, r1, r8, asr #4
   14d30:	andeq	r5, r1, r8, asr #4
   14d34:	andeq	r5, r1, r8, asr #4
   14d38:	andeq	r5, r1, r8, asr #4
   14d3c:	andeq	r5, r1, r8, asr #4
   14d40:	andeq	r5, r1, r8, asr #4
   14d44:	andeq	r5, r1, r8, asr #4
   14d48:	andeq	r5, r1, r8, asr #4
   14d4c:	andeq	r5, r1, r8, asr #4
   14d50:	andeq	r5, r1, r8, asr #4
   14d54:	andeq	r5, r1, r8, asr #4
   14d58:	andeq	r5, r1, r8, asr #4
   14d5c:	andeq	r5, r1, r8, asr #4
   14d60:	andeq	r5, r1, r8, asr #4
   14d64:	andeq	r5, r1, r8, asr #4
   14d68:	andeq	r5, r1, r8, asr #4
   14d6c:	andeq	r5, r1, r8, asr #4
   14d70:	andeq	r5, r1, r8, asr #4
   14d74:	andeq	r5, r1, r8, asr #4
   14d78:	andeq	r5, r1, r8, asr #4
   14d7c:	andeq	r5, r1, r8, asr #4
   14d80:	andeq	r5, r1, r8, asr #4
   14d84:	andeq	r5, r1, r8, asr #4
   14d88:	andeq	r5, r1, r8, asr #4
   14d8c:	andeq	r5, r1, r8, asr #4
   14d90:	andeq	r5, r1, r8, asr #4
   14d94:	andeq	r5, r1, r8, asr #4
   14d98:	andeq	r5, r1, r8, asr #4
   14d9c:	andeq	r5, r1, r8, asr #4
   14da0:	andeq	r5, r1, r8, asr #4
   14da4:	andeq	r5, r1, r8, asr #4
   14da8:	andeq	r5, r1, r8, asr #4
   14dac:	andeq	r5, r1, r8, asr #4
   14db0:	andeq	r5, r1, r4, lsr r0
   14db4:	andeq	r5, r1, r8, asr #4
   14db8:	andeq	r5, r1, r8, asr #4
   14dbc:	andeq	r5, r1, r8, asr #4
   14dc0:	andeq	r5, r1, r8, asr #4
   14dc4:	andeq	r5, r1, r8, asr #4
   14dc8:	andeq	r5, r1, r8, asr #4
   14dcc:	andeq	r5, r1, r8, asr #4
   14dd0:	andeq	r5, r1, r8, asr #4
   14dd4:	andeq	r5, r1, r8, asr #4
   14dd8:	andeq	r5, r1, r8, asr #4
   14ddc:	andeq	r5, r1, r8, asr #4
   14de0:	andeq	r5, r1, r8, asr #4
   14de4:	andeq	r5, r1, r8, asr #4
   14de8:	andeq	r5, r1, r8, asr #4
   14dec:	andeq	r5, r1, r8, asr #4
   14df0:	andeq	r5, r1, r8, asr #4
   14df4:	andeq	r5, r1, r8, asr #4
   14df8:	andeq	r5, r1, r8, asr #4
   14dfc:	andeq	r5, r1, r8, asr #4
   14e00:	andeq	r5, r1, r8, asr #4
   14e04:	andeq	r4, r1, r4, ror pc
   14e08:	andeq	r5, r1, r8, asr #4
   14e0c:	andeq	r5, r1, r8, asr #4
   14e10:	andeq	r5, r1, r8, asr #4
   14e14:	andeq	r5, r1, r8, asr #4
   14e18:	andeq	r5, r1, r8, asr #4
   14e1c:	andeq	r5, r1, r8, asr #4
   14e20:	strdeq	r5, [r1], -r0
   14e24:	andeq	r5, r1, ip, lsl r2
   14e28:	andeq	r5, r1, r0, asr #8
   14e2c:	andeq	r5, r1, ip, asr #13
   14e30:	andeq	r5, r1, r8, asr #4
   14e34:	andeq	r5, r1, r0, lsr r7
   14e38:	andeq	r5, r1, r8, lsl #24
   14e3c:	andeq	r5, r1, r4, ror #14
   14e40:	andeq	r5, r1, r8, ror r7
   14e44:	andeq	r5, r1, r8, asr #4
   14e48:	andeq	r5, r1, r8, asr #4
   14e4c:	andeq	r5, r1, r8, asr #4
   14e50:	ldrdeq	r5, [r1], -ip
   14e54:	andeq	r5, r1, r0, lsr #16
   14e58:	andeq	r5, r1, r8, asr #4
   14e5c:	strdeq	r5, [r1], -ip
   14e60:	andeq	r5, r1, r8, asr #4
   14e64:	ldrdeq	r5, [r1], -r8
   14e68:	andeq	r5, r1, r0, lsr sl
   14e6c:	strdeq	r5, [r1], -r0
   14e70:	andeq	r5, r1, r0, ror #23
   14e74:	andeq	r5, r1, r8, lsl #24
   14e78:			; <UNDEFINED> instruction: 0x00015db8
   14e7c:	andeq	r5, r1, r4, lsr fp
   14e80:	strdeq	r5, [r1], -r8
   14e84:	andeq	r5, r1, r4, ror #28
   14e88:	andeq	r5, r1, r8, asr #4
   14e8c:	andeq	r5, r1, r8, asr #4
   14e90:	andeq	r5, r1, r8, asr #4
   14e94:	andeq	r5, r1, r8, asr #4
   14e98:	andeq	r5, r1, r8, asr #4
   14e9c:	andeq	r5, r1, r8, asr #4
   14ea0:	ldrdeq	r5, [r1], -r0
   14ea4:	strdeq	r5, [r1], -ip
   14ea8:	andeq	r5, r1, ip, lsr r2
   14eac:	andeq	r5, r1, r0, ror #13
   14eb0:	strdeq	r5, [r1], -r8
   14eb4:	andeq	r5, r1, r8, asr #4
   14eb8:	andeq	r5, r1, r8, lsl #24
   14ebc:	strdeq	r5, [r1], -ip
   14ec0:	andeq	r5, r1, r8, asr #4
   14ec4:	andeq	r5, r1, ip, lsr #15
   14ec8:	andeq	r5, r1, r8, lsl #15
   14ecc:	muleq	r1, ip, r7
   14ed0:	strdeq	r5, [r1], -r0
   14ed4:	andeq	r5, r1, r0, lsl #19
   14ed8:	andeq	r5, r1, r8, asr #4
   14edc:	andeq	r4, r1, ip, asr #30
   14ee0:	andeq	r5, r1, r4, lsl #20
   14ee4:	andeq	r5, r1, r0, lsl r4
   14ee8:	andeq	r5, r1, r4, asr #20
   14eec:	andeq	r5, r1, r4, asr #22
   14ef0:	andeq	r5, r1, r0, asr #23
   14ef4:	andeq	r5, r1, r8, asr #4
   14ef8:	andeq	r5, r1, r4, ror #27
   14efc:			; <UNDEFINED> instruction: 0x000156bc
   14f00:	andeq	r5, r1, ip, lsr #28
   14f04:	andeq	r5, r1, ip, lsr pc
   14f08:	cmp	fp, r7
   14f0c:	movle	r0, #0
   14f10:	movgt	r0, #1
   14f14:	b	14c88 <__assert_fail@plt+0x3874>
   14f18:	cmp	r1, #0
   14f1c:	blt	14cbc <__assert_fail@plt+0x38a8>
   14f20:	sub	r3, r2, #48	; 0x30
   14f24:	rsb	r3, r3, #2130706432	; 0x7f000000
   14f28:	add	r3, r3, #16711680	; 0xff0000
   14f2c:	add	r3, r3, #65280	; 0xff00
   14f30:	add	r3, r3, #255	; 0xff
   14f34:	cmp	r1, r3
   14f38:	movle	r3, #0
   14f3c:	movgt	r3, #1
   14f40:	b	14cb4 <__assert_fail@plt+0x38a0>
   14f44:	mvn	fp, #-2147483648	; 0x80000000
   14f48:	b	14cc4 <__assert_fail@plt+0x38b0>
   14f4c:	mov	r3, #0
   14f50:	cmp	r5, #0
   14f54:	moveq	r5, r3
   14f58:	moveq	r3, #112	; 0x70
   14f5c:	beq	15104 <__assert_fail@plt+0x3cf0>
   14f60:	mov	r3, #112	; 0x70
   14f64:	str	r3, [sp, #44]	; 0x2c
   14f68:	mov	r3, #0
   14f6c:	str	r3, [sp, #40]	; 0x28
   14f70:	b	15108 <__assert_fail@plt+0x3cf4>
   14f74:	ldr	r3, [sp, #36]	; 0x24
   14f78:	add	r3, r3, #1
   14f7c:	ldr	r2, [sp, #36]	; 0x24
   14f80:	mov	r1, r3
   14f84:	sub	r2, r3, r2
   14f88:	str	r2, [sp, #64]	; 0x40
   14f8c:	ldrb	r2, [r3], #1
   14f90:	cmp	r2, #58	; 0x3a
   14f94:	beq	14f7c <__assert_fail@plt+0x3b68>
   14f98:	cmp	r2, #122	; 0x7a
   14f9c:	streq	r1, [sp, #36]	; 0x24
   14fa0:	bne	15248 <__assert_fail@plt+0x3e34>
   14fa4:	ldr	r3, [sp, #32]
   14fa8:	ldr	r3, [r3, #32]
   14fac:	cmp	r3, #0
   14fb0:	blt	153e8 <__assert_fail@plt+0x3fd4>
   14fb4:	ldr	r3, [sp, #32]
   14fb8:	ldr	r8, [r3, #36]	; 0x24
   14fbc:	cmp	r8, #0
   14fc0:	movlt	r7, #1
   14fc4:	blt	14fe0 <__assert_fail@plt+0x3bcc>
   14fc8:	ldreq	r3, [sp, #60]	; 0x3c
   14fcc:	movne	r7, #0
   14fd0:	ldrbeq	r7, [r3]
   14fd4:	subeq	r7, r7, #45	; 0x2d
   14fd8:	clzeq	r7, r7
   14fdc:	lsreq	r7, r7, #5
   14fe0:	mov	r1, #3600	; 0xe10
   14fe4:	mov	r0, r8
   14fe8:	bl	1991c <__assert_fail@plt+0x8508>
   14fec:	mov	r1, #60	; 0x3c
   14ff0:	mov	r5, r0
   14ff4:	mov	r0, r8
   14ff8:	bl	1991c <__assert_fail@plt+0x8508>
   14ffc:	mov	r1, #60	; 0x3c
   15000:	bl	19b3c <__assert_fail@plt+0x8728>
   15004:	mov	r0, r8
   15008:	mov	r9, r1
   1500c:	mov	r1, #60	; 0x3c
   15010:	bl	19b3c <__assert_fail@plt+0x8728>
   15014:	ldr	r3, [sp, #64]	; 0x40
   15018:	cmp	r3, #3
   1501c:	ldrls	pc, [pc, r3, lsl #2]
   15020:	b	15248 <__assert_fail@plt+0x3e34>
   15024:	andeq	r5, r1, r8, asr #30
   15028:	andeq	r5, r1, r0, ror #30
   1502c:	andeq	r5, r1, r8, ror pc
   15030:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   15034:	ldr	r3, [sp, #36]	; 0x24
   15038:	sub	r3, r3, #1
   1503c:	cmp	r6, r3
   15040:	bne	15fb4 <__assert_fail@plt+0x4ba0>
   15044:	ldr	r2, [sp, #28]
   15048:	mvn	r3, fp
   1504c:	cmp	r2, #45	; 0x2d
   15050:	lsr	r3, r3, #31
   15054:	moveq	r3, #0
   15058:	cmp	r3, #0
   1505c:	moveq	fp, #0
   15060:	ldr	r3, [sp, #52]	; 0x34
   15064:	ldr	r2, [sp, #24]
   15068:	cmp	fp, #1
   1506c:	movcs	r5, fp
   15070:	movcc	r5, #1
   15074:	sub	r3, r3, r2
   15078:	cmp	r5, r3
   1507c:	bcs	14bc8 <__assert_fail@plt+0x37b4>
   15080:	cmp	r4, #0
   15084:	beq	150c4 <__assert_fail@plt+0x3cb0>
   15088:	cmp	fp, #1
   1508c:	ble	150b8 <__assert_fail@plt+0x3ca4>
   15090:	ldr	r3, [sp, #28]
   15094:	sub	fp, fp, #1
   15098:	cmp	r3, #43	; 0x2b
   1509c:	cmpne	r3, #48	; 0x30
   150a0:	mov	r0, r4
   150a4:	mov	r2, fp
   150a8:	moveq	r1, #48	; 0x30
   150ac:	movne	r1, #32
   150b0:	bl	1130c <memset@plt>
   150b4:	add	r4, r4, fp
   150b8:	ldr	r3, [sp, #36]	; 0x24
   150bc:	ldrb	r3, [r3]
   150c0:	strb	r3, [r4], #1
   150c4:	ldr	r3, [sp, #24]
   150c8:	add	r3, r3, r5
   150cc:	b	153e4 <__assert_fail@plt+0x3fd0>
   150d0:	cmp	sl, #0
   150d4:	bne	15248 <__assert_fail@plt+0x3e34>
   150d8:	cmp	r5, #0
   150dc:	moveq	r3, #97	; 0x61
   150e0:	beq	15104 <__assert_fail@plt+0x3cf0>
   150e4:	str	r5, [sp, #40]	; 0x28
   150e8:	mov	r3, #97	; 0x61
   150ec:	b	15414 <__assert_fail@plt+0x4000>
   150f0:	cmp	sl, #0
   150f4:	bne	15248 <__assert_fail@plt+0x3e34>
   150f8:	cmp	r5, #0
   150fc:	bne	1541c <__assert_fail@plt+0x4008>
   15100:	mov	r3, #65	; 0x41
   15104:	str	r3, [sp, #44]	; 0x2c
   15108:	mov	r3, #32
   1510c:	cmp	sl, #0
   15110:	strb	r3, [sp, #80]	; 0x50
   15114:	ldrb	r2, [sp, #44]	; 0x2c
   15118:	mov	r3, #37	; 0x25
   1511c:	strb	r3, [sp, #81]	; 0x51
   15120:	addne	r3, sp, #83	; 0x53
   15124:	addeq	r3, sp, #82	; 0x52
   15128:	strbne	sl, [sp, #82]	; 0x52
   1512c:	strb	r2, [r3]
   15130:	mov	r2, #0
   15134:	strb	r2, [r3, #1]
   15138:	mov	r1, #1024	; 0x400
   1513c:	ldr	r3, [sp, #32]
   15140:	add	r2, sp, #80	; 0x50
   15144:	add	r0, sp, #96	; 0x60
   15148:	bl	11258 <strftime@plt>
   1514c:	cmp	r0, #0
   15150:	beq	153e8 <__assert_fail@plt+0x3fd4>
   15154:	ldr	r2, [sp, #28]
   15158:	mvn	r3, fp
   1515c:	cmp	r2, #45	; 0x2d
   15160:	lsr	r3, r3, #31
   15164:	moveq	r3, #0
   15168:	cmp	r3, #0
   1516c:	sub	r6, r0, #1
   15170:	moveq	fp, #0
   15174:	ldr	r3, [sp, #52]	; 0x34
   15178:	ldr	r2, [sp, #24]
   1517c:	cmp	fp, r6
   15180:	movcs	r7, fp
   15184:	movcc	r7, r6
   15188:	sub	r3, r3, r2
   1518c:	cmp	r7, r3
   15190:	bcs	14bc8 <__assert_fail@plt+0x37b4>
   15194:	cmp	r4, #0
   15198:	beq	15f10 <__assert_fail@plt+0x4afc>
   1519c:	cmp	fp, r6
   151a0:	bls	151cc <__assert_fail@plt+0x3db8>
   151a4:	ldr	r3, [sp, #28]
   151a8:	sub	fp, fp, r6
   151ac:	cmp	r3, #43	; 0x2b
   151b0:	cmpne	r3, #48	; 0x30
   151b4:	mov	r0, r4
   151b8:	mov	r2, fp
   151bc:	moveq	r1, #48	; 0x30
   151c0:	movne	r1, #32
   151c4:	bl	1130c <memset@plt>
   151c8:	add	r4, r4, fp
   151cc:	cmp	r5, #0
   151d0:	movne	r2, r6
   151d4:	addne	r1, sp, #97	; 0x61
   151d8:	bne	15f04 <__assert_fail@plt+0x4af0>
   151dc:	ldr	r3, [sp, #40]	; 0x28
   151e0:	mov	r2, r6
   151e4:	cmp	r3, #0
   151e8:	add	r1, sp, #97	; 0x61
   151ec:	mov	r0, r4
   151f0:	beq	15f34 <__assert_fail@plt+0x4b20>
   151f4:	bl	14a54 <__assert_fail@plt+0x3640>
   151f8:	b	15f0c <__assert_fail@plt+0x4af8>
   151fc:	ldr	r3, [sp, #40]	; 0x28
   15200:	cmp	r5, #0
   15204:	movne	r3, r5
   15208:	cmp	sl, #69	; 0x45
   1520c:	str	r3, [sp, #40]	; 0x28
   15210:	beq	15248 <__assert_fail@plt+0x3e34>
   15214:	mov	r5, #0
   15218:	b	15108 <__assert_fail@plt+0x3cf4>
   1521c:	cmp	sl, #69	; 0x45
   15220:	beq	15248 <__assert_fail@plt+0x3e34>
   15224:	cmp	r5, #0
   15228:	moveq	r3, #66	; 0x42
   1522c:	beq	15104 <__assert_fail@plt+0x3cf0>
   15230:	str	r5, [sp, #40]	; 0x28
   15234:	mov	r3, #66	; 0x42
   15238:	b	15414 <__assert_fail@plt+0x4000>
   1523c:	cmp	sl, #79	; 0x4f
   15240:	movne	r3, #99	; 0x63
   15244:	bne	15414 <__assert_fail@plt+0x4000>
   15248:	ldr	r3, [sp, #36]	; 0x24
   1524c:	ldr	r2, [sp, #28]
   15250:	sub	r7, r3, r6
   15254:	mvn	r3, fp
   15258:	cmp	r2, #45	; 0x2d
   1525c:	lsr	r3, r3, #31
   15260:	moveq	r3, #0
   15264:	cmp	r3, #0
   15268:	add	r7, r7, #1
   1526c:	moveq	fp, #0
   15270:	ldr	r3, [sp, #52]	; 0x34
   15274:	ldr	r2, [sp, #24]
   15278:	cmp	fp, r7
   1527c:	movcs	r5, fp
   15280:	movcc	r5, r7
   15284:	sub	r3, r3, r2
   15288:	cmp	r5, r3
   1528c:	bcs	14bc8 <__assert_fail@plt+0x37b4>
   15290:	cmp	r4, #0
   15294:	beq	150c4 <__assert_fail@plt+0x3cb0>
   15298:	cmp	fp, r7
   1529c:	bls	152c8 <__assert_fail@plt+0x3eb4>
   152a0:	ldr	r3, [sp, #28]
   152a4:	sub	fp, fp, r7
   152a8:	cmp	r3, #43	; 0x2b
   152ac:	cmpne	r3, #48	; 0x30
   152b0:	mov	r0, r4
   152b4:	mov	r2, fp
   152b8:	moveq	r1, #48	; 0x30
   152bc:	movne	r1, #32
   152c0:	bl	1130c <memset@plt>
   152c4:	add	r4, r4, fp
   152c8:	ldr	r3, [sp, #40]	; 0x28
   152cc:	mov	r2, r7
   152d0:	mov	r1, r6
   152d4:	b	156a4 <__assert_fail@plt+0x4290>
   152d8:	ldr	r6, [pc, #2004]	; 15ab4 <__assert_fail@plt+0x46a0>
   152dc:	mvn	r5, #0
   152e0:	ldr	r3, [sp, #1180]	; 0x49c
   152e4:	mov	r2, r6
   152e8:	str	r3, [sp, #20]
   152ec:	ldr	r3, [sp, #1176]	; 0x498
   152f0:	str	r5, [sp, #8]
   152f4:	str	r3, [sp, #16]
   152f8:	ldr	r3, [sp, #1172]	; 0x494
   152fc:	mvn	r1, #0
   15300:	str	r3, [sp, #12]
   15304:	ldr	r3, [sp, #28]
   15308:	mov	r0, #0
   1530c:	str	r3, [sp, #4]
   15310:	ldr	r3, [sp, #40]	; 0x28
   15314:	str	r3, [sp]
   15318:	ldr	r3, [sp, #32]
   1531c:	bl	14a90 <__assert_fail@plt+0x367c>
   15320:	ldr	r2, [sp, #28]
   15324:	mvn	r3, fp
   15328:	cmp	r2, #45	; 0x2d
   1532c:	lsr	r3, r3, #31
   15330:	moveq	r3, #0
   15334:	cmp	r3, #0
   15338:	moveq	fp, #0
   1533c:	ldr	r3, [sp, #52]	; 0x34
   15340:	ldr	r2, [sp, #24]
   15344:	sub	r9, r3, r2
   15348:	cmp	fp, r0
   1534c:	movcs	r8, fp
   15350:	movcc	r8, r0
   15354:	cmp	r8, r9
   15358:	mov	r7, r0
   1535c:	bcs	14bc8 <__assert_fail@plt+0x37b4>
   15360:	cmp	r4, #0
   15364:	beq	153dc <__assert_fail@plt+0x3fc8>
   15368:	cmp	fp, r0
   1536c:	bls	15398 <__assert_fail@plt+0x3f84>
   15370:	ldr	r3, [sp, #28]
   15374:	sub	fp, fp, r0
   15378:	cmp	r3, #43	; 0x2b
   1537c:	cmpne	r3, #48	; 0x30
   15380:	mov	r0, r4
   15384:	mov	r2, fp
   15388:	moveq	r1, #48	; 0x30
   1538c:	movne	r1, #32
   15390:	bl	1130c <memset@plt>
   15394:	add	r4, r4, fp
   15398:	ldr	r3, [sp, #1180]	; 0x49c
   1539c:	mov	r0, r4
   153a0:	str	r3, [sp, #20]
   153a4:	ldr	r3, [sp, #1176]	; 0x498
   153a8:	str	r5, [sp, #8]
   153ac:	str	r3, [sp, #16]
   153b0:	ldr	r3, [sp, #1172]	; 0x494
   153b4:	mov	r2, r6
   153b8:	str	r3, [sp, #12]
   153bc:	ldr	r3, [sp, #28]
   153c0:	mov	r1, r9
   153c4:	str	r3, [sp, #4]
   153c8:	ldr	r3, [sp, #40]	; 0x28
   153cc:	add	r4, r4, r7
   153d0:	str	r3, [sp]
   153d4:	ldr	r3, [sp, #32]
   153d8:	bl	14a90 <__assert_fail@plt+0x367c>
   153dc:	ldr	r3, [sp, #24]
   153e0:	add	r3, r3, r8
   153e4:	str	r3, [sp, #24]
   153e8:	ldr	r6, [sp, #36]	; 0x24
   153ec:	b	14c0c <__assert_fail@plt+0x37f8>
   153f0:	mvn	r5, #0
   153f4:	ldr	r6, [pc, #1724]	; 15ab8 <__assert_fail@plt+0x46a4>
   153f8:	b	152e0 <__assert_fail@plt+0x3ecc>
   153fc:	mov	r3, #43	; 0x2b
   15400:	mov	r5, #4
   15404:	ldr	r6, [pc, #1712]	; 15abc <__assert_fail@plt+0x46a8>
   15408:	str	r3, [sp, #28]
   1540c:	b	152e0 <__assert_fail@plt+0x3ecc>
   15410:	mov	r3, #114	; 0x72
   15414:	str	r3, [sp, #44]	; 0x2c
   15418:	b	15214 <__assert_fail@plt+0x3e00>
   1541c:	str	r5, [sp, #40]	; 0x28
   15420:	mov	r3, #65	; 0x41
   15424:	b	15414 <__assert_fail@plt+0x4000>
   15428:	mov	r3, #67	; 0x43
   1542c:	b	15414 <__assert_fail@plt+0x4000>
   15430:	mov	r3, #89	; 0x59
   15434:	b	15414 <__assert_fail@plt+0x4000>
   15438:	mov	r3, #121	; 0x79
   1543c:	b	15414 <__assert_fail@plt+0x4000>
   15440:	cmp	sl, #69	; 0x45
   15444:	beq	15428 <__assert_fail@plt+0x4014>
   15448:	ldr	r3, [sp, #32]
   1544c:	ldr	r7, [pc, #1656]	; 15acc <__assert_fail@plt+0x46b8>
   15450:	ldr	r0, [pc, #1640]	; 15ac0 <__assert_fail@plt+0x46ac>
   15454:	ldr	r2, [r3, #20]
   15458:	mov	r1, #100	; 0x64
   1545c:	add	r3, r2, #1888	; 0x760
   15460:	add	r3, r3, #12
   15464:	cmp	r2, r7
   15468:	movge	r7, #0
   1546c:	movlt	r7, #1
   15470:	cmp	r3, r0
   15474:	movhi	r3, #0
   15478:	movls	r3, #1
   1547c:	mvn	r0, #98	; 0x62
   15480:	mla	r0, r0, r3, r2
   15484:	bl	1991c <__assert_fail@plt+0x8508>
   15488:	add	r5, r0, #19
   1548c:	mov	r6, #2
   15490:	ldr	r3, [sp, #28]
   15494:	ldr	r2, [sp, #1164]	; 0x48c
   15498:	cmp	r3, #0
   1549c:	moveq	r3, r2
   154a0:	cmp	r3, #43	; 0x2b
   154a4:	str	r3, [sp, #28]
   154a8:	movne	r8, #0
   154ac:	bne	154d4 <__assert_fail@plt+0x40c0>
   154b0:	ldr	r8, [pc, #1548]	; 15ac4 <__assert_fail@plt+0x46b0>
   154b4:	cmp	r6, #2
   154b8:	movne	r3, r8
   154bc:	moveq	r3, #99	; 0x63
   154c0:	cmp	r6, fp
   154c4:	movge	r8, #0
   154c8:	movlt	r8, #1
   154cc:	cmp	r5, r3
   154d0:	orrhi	r8, r8, #1
   154d4:	mov	r9, #0
   154d8:	eor	r3, r7, #1
   154dc:	cmp	sl, #79	; 0x4f
   154e0:	movne	r3, #0
   154e4:	andeq	r3, r3, #1
   154e8:	cmp	r3, #0
   154ec:	bne	15214 <__assert_fail@plt+0x3e00>
   154f0:	cmp	r7, #0
   154f4:	ldr	sl, [sp, #68]	; 0x44
   154f8:	rsbne	r5, r5, #0
   154fc:	mov	r2, #58	; 0x3a
   15500:	tst	r9, #1
   15504:	subne	r3, sl, #1
   15508:	moveq	r3, sl
   1550c:	strbne	r2, [sl, #-1]
   15510:	mov	r0, r5
   15514:	mov	r1, #10
   15518:	str	r2, [sp, #64]	; 0x40
   1551c:	sub	sl, r3, #1
   15520:	str	r3, [sp, #44]	; 0x2c
   15524:	bl	198fc <__assert_fail@plt+0x84e8>
   15528:	ldr	r3, [sp, #44]	; 0x2c
   1552c:	mov	r0, r5
   15530:	asr	r9, r9, #1
   15534:	add	r1, r1, #48	; 0x30
   15538:	strb	r1, [r3, #-1]
   1553c:	mov	r1, #10
   15540:	bl	19710 <__assert_fail@plt+0x82fc>
   15544:	ldr	r2, [sp, #64]	; 0x40
   15548:	cmp	r9, #0
   1554c:	cmpeq	r0, #0
   15550:	mov	r5, r0
   15554:	bne	15500 <__assert_fail@plt+0x40ec>
   15558:	ldr	r3, [sp, #28]
   1555c:	cmp	r3, #0
   15560:	moveq	r3, #48	; 0x30
   15564:	cmp	fp, #0
   15568:	movge	r6, fp
   1556c:	cmp	r7, #0
   15570:	str	r3, [sp, #28]
   15574:	movne	r8, #45	; 0x2d
   15578:	bne	15588 <__assert_fail@plt+0x4174>
   1557c:	cmp	r8, #0
   15580:	movne	r8, #43	; 0x2b
   15584:	moveq	r8, #0
   15588:	ldr	r3, [sp, #68]	; 0x44
   1558c:	cmp	r8, #0
   15590:	moveq	r5, r6
   15594:	subne	r5, r6, #1
   15598:	sub	r7, r3, sl
   1559c:	ldr	r3, [sp, #28]
   155a0:	sub	r5, r5, r7
   155a4:	subs	r9, r3, #45	; 0x2d
   155a8:	movne	r9, #1
   155ac:	cmp	r5, #0
   155b0:	movle	r3, #0
   155b4:	andgt	r3, r9, #1
   155b8:	cmp	r3, #0
   155bc:	moveq	r5, #0
   155c0:	cmp	r8, #0
   155c4:	beq	1562c <__assert_fail@plt+0x4218>
   155c8:	ldr	r3, [sp, #28]
   155cc:	cmp	r3, #95	; 0x5f
   155d0:	bne	15600 <__assert_fail@plt+0x41ec>
   155d4:	cmp	r4, #0
   155d8:	beq	155f0 <__assert_fail@plt+0x41dc>
   155dc:	mov	r0, r4
   155e0:	mov	r2, r5
   155e4:	mov	r1, #32
   155e8:	bl	1130c <memset@plt>
   155ec:	add	r4, r4, r5
   155f0:	ldr	r3, [sp, #24]
   155f4:	sub	r6, r6, r5
   155f8:	add	r3, r3, r5
   155fc:	str	r3, [sp, #24]
   15600:	ldr	r3, [sp, #52]	; 0x34
   15604:	ldr	r2, [sp, #24]
   15608:	sub	r3, r3, r2
   1560c:	cmp	r3, #1
   15610:	bls	14bc8 <__assert_fail@plt+0x37b4>
   15614:	ldr	r3, [sp, #24]
   15618:	sub	r6, r6, #1
   1561c:	cmp	r4, #0
   15620:	add	r3, r3, #1
   15624:	strbne	r8, [r4], #1
   15628:	str	r3, [sp, #24]
   1562c:	cmp	r6, #0
   15630:	movlt	r9, #0
   15634:	andge	r9, r9, #1
   15638:	cmp	r9, #0
   1563c:	moveq	r6, #0
   15640:	ldr	r3, [sp, #52]	; 0x34
   15644:	ldr	r2, [sp, #24]
   15648:	cmp	r6, r7
   1564c:	movcs	r5, r6
   15650:	movcc	r5, r7
   15654:	sub	r3, r3, r2
   15658:	cmp	r5, r3
   1565c:	bcs	14bc8 <__assert_fail@plt+0x37b4>
   15660:	cmp	r4, #0
   15664:	beq	150c4 <__assert_fail@plt+0x3cb0>
   15668:	cmp	r6, r7
   1566c:	bls	15698 <__assert_fail@plt+0x4284>
   15670:	ldr	r3, [sp, #28]
   15674:	sub	r6, r6, r7
   15678:	cmp	r3, #43	; 0x2b
   1567c:	cmpne	r3, #48	; 0x30
   15680:	mov	r0, r4
   15684:	mov	r2, r6
   15688:	moveq	r1, #48	; 0x30
   1568c:	movne	r1, #32
   15690:	bl	1130c <memset@plt>
   15694:	add	r4, r4, r6
   15698:	ldr	r3, [sp, #40]	; 0x28
   1569c:	mov	r2, r7
   156a0:	mov	r1, sl
   156a4:	cmp	r3, #0
   156a8:	mov	r0, r4
   156ac:	beq	15fc4 <__assert_fail@plt+0x4bb0>
   156b0:	bl	14a54 <__assert_fail@plt+0x3640>
   156b4:	add	r4, r4, r7
   156b8:	b	150c4 <__assert_fail@plt+0x3cb0>
   156bc:	cmp	sl, #79	; 0x4f
   156c0:	movne	r3, #120	; 0x78
   156c4:	bne	15414 <__assert_fail@plt+0x4000>
   156c8:	b	15248 <__assert_fail@plt+0x3e34>
   156cc:	cmp	sl, #0
   156d0:	mvneq	r5, #0
   156d4:	ldreq	r6, [pc, #1004]	; 15ac8 <__assert_fail@plt+0x46b4>
   156d8:	beq	152e0 <__assert_fail@plt+0x3ecc>
   156dc:	b	15248 <__assert_fail@plt+0x3e34>
   156e0:	cmp	sl, #69	; 0x45
   156e4:	ldrne	r3, [sp, #32]
   156e8:	ldrne	r0, [r3, #12]
   156ec:	beq	15248 <__assert_fail@plt+0x3e34>
   156f0:	mov	r6, #2
   156f4:	b	1571c <__assert_fail@plt+0x4308>
   156f8:	cmp	sl, #69	; 0x45
   156fc:	ldrne	r3, [sp, #32]
   15700:	ldrne	r0, [r3, #12]
   15704:	beq	15248 <__assert_fail@plt+0x3e34>
   15708:	ldr	r3, [sp, #28]
   1570c:	mov	r6, #2
   15710:	cmp	r3, #0
   15714:	moveq	r3, #95	; 0x5f
   15718:	streq	r3, [sp, #28]
   1571c:	mov	r9, #0
   15720:	lsr	r7, r0, #31
   15724:	mov	r5, r0
   15728:	mov	r8, r9
   1572c:	b	154d8 <__assert_fail@plt+0x40c4>
   15730:	cmp	sl, #0
   15734:	bne	15248 <__assert_fail@plt+0x3e34>
   15738:	ldr	r2, [sp, #28]
   1573c:	lsr	r3, fp, #31
   15740:	cmp	r2, #0
   15744:	movne	r3, #0
   15748:	andeq	r3, r3, #1
   1574c:	cmp	r3, #0
   15750:	bne	153fc <__assert_fail@plt+0x3fe8>
   15754:	sub	r5, fp, #6
   15758:	ldr	r6, [pc, #860]	; 15abc <__assert_fail@plt+0x46a8>
   1575c:	bic	r5, r5, r5, asr #31
   15760:	b	152e0 <__assert_fail@plt+0x3ecc>
   15764:	cmp	sl, #69	; 0x45
   15768:	beq	15248 <__assert_fail@plt+0x3e34>
   1576c:	ldr	r3, [sp, #32]
   15770:	ldr	r0, [r3, #8]
   15774:	b	156f0 <__assert_fail@plt+0x42dc>
   15778:	cmp	sl, #69	; 0x45
   1577c:	ldrne	r0, [sp, #56]	; 0x38
   15780:	bne	156f0 <__assert_fail@plt+0x42dc>
   15784:	b	15248 <__assert_fail@plt+0x3e34>
   15788:	cmp	sl, #69	; 0x45
   1578c:	ldrne	r3, [sp, #32]
   15790:	ldrne	r0, [r3, #8]
   15794:	bne	15708 <__assert_fail@plt+0x42f4>
   15798:	b	15248 <__assert_fail@plt+0x3e34>
   1579c:	cmp	sl, #69	; 0x45
   157a0:	ldrne	r0, [sp, #56]	; 0x38
   157a4:	bne	15708 <__assert_fail@plt+0x42f4>
   157a8:	b	15248 <__assert_fail@plt+0x3e34>
   157ac:	cmp	sl, #69	; 0x45
   157b0:	beq	15248 <__assert_fail@plt+0x3e34>
   157b4:	ldr	r3, [sp, #32]
   157b8:	mov	r9, #0
   157bc:	mov	r8, r9
   157c0:	ldr	r1, [r3, #28]
   157c4:	cmn	r1, #1
   157c8:	movge	r7, #0
   157cc:	movlt	r7, #1
   157d0:	add	r5, r1, #1
   157d4:	mov	r6, #3
   157d8:	b	154d8 <__assert_fail@plt+0x40c4>
   157dc:	cmp	sl, #69	; 0x45
   157e0:	ldrne	r3, [sp, #32]
   157e4:	ldrne	r0, [r3, #4]
   157e8:	bne	156f0 <__assert_fail@plt+0x42dc>
   157ec:	b	15248 <__assert_fail@plt+0x3e34>
   157f0:	cmp	sl, #69	; 0x45
   157f4:	beq	15248 <__assert_fail@plt+0x3e34>
   157f8:	ldr	r3, [sp, #32]
   157fc:	mov	r9, #0
   15800:	mov	r8, r9
   15804:	ldr	r1, [r3, #16]
   15808:	mov	r6, #2
   1580c:	cmn	r1, #1
   15810:	movge	r7, #0
   15814:	movlt	r7, #1
   15818:	add	r5, r1, #1
   1581c:	b	154d8 <__assert_fail@plt+0x40c4>
   15820:	cmp	sl, #69	; 0x45
   15824:	beq	15248 <__assert_fail@plt+0x3e34>
   15828:	cmp	fp, #0
   1582c:	ldr	r7, [sp, #1180]	; 0x49c
   15830:	movle	fp, #9
   15834:	mov	r5, #9
   15838:	mov	r6, #10
   1583c:	cmp	r5, fp
   15840:	bgt	15930 <__assert_fail@plt+0x451c>
   15844:	cmp	r5, #1
   15848:	bgt	1591c <__assert_fail@plt+0x4508>
   1584c:	mov	r8, r5
   15850:	mov	r6, #10
   15854:	cmp	r8, #0
   15858:	bgt	15948 <__assert_fail@plt+0x4534>
   1585c:	ldr	r3, [sp, #28]
   15860:	ldr	r2, [sp, #24]
   15864:	cmp	r3, #0
   15868:	moveq	r3, #48	; 0x30
   1586c:	str	r3, [sp, #28]
   15870:	ldr	r3, [sp, #52]	; 0x34
   15874:	cmp	r5, #0
   15878:	movcs	r6, r5
   1587c:	movcc	r6, #0
   15880:	sub	r3, r3, r2
   15884:	cmp	r6, r3
   15888:	bcs	14bc8 <__assert_fail@plt+0x37b4>
   1588c:	cmp	r4, #0
   15890:	beq	158b4 <__assert_fail@plt+0x44a0>
   15894:	ldr	r3, [sp, #40]	; 0x28
   15898:	mov	r2, r5
   1589c:	cmp	r3, #0
   158a0:	add	r1, sp, #80	; 0x50
   158a4:	mov	r0, r4
   158a8:	beq	15978 <__assert_fail@plt+0x4564>
   158ac:	bl	14a54 <__assert_fail@plt+0x3640>
   158b0:	add	r4, r4, r5
   158b4:	ldr	r3, [sp, #24]
   158b8:	add	r6, r3, r6
   158bc:	ldr	r3, [sp, #28]
   158c0:	cmp	r3, #45	; 0x2d
   158c4:	subne	r5, fp, r5
   158c8:	ldr	r3, [sp, #52]	; 0x34
   158cc:	bicne	r5, r5, r5, asr #31
   158d0:	moveq	r5, #0
   158d4:	sub	r3, r3, r6
   158d8:	cmp	r5, r3
   158dc:	bcs	14bc8 <__assert_fail@plt+0x37b4>
   158e0:	cmp	r4, #0
   158e4:	beq	15914 <__assert_fail@plt+0x4500>
   158e8:	cmp	r5, #0
   158ec:	beq	15914 <__assert_fail@plt+0x4500>
   158f0:	ldr	r3, [sp, #28]
   158f4:	mov	r0, r4
   158f8:	cmp	r3, #43	; 0x2b
   158fc:	cmpne	r3, #48	; 0x30
   15900:	mov	r2, r5
   15904:	moveq	r1, #48	; 0x30
   15908:	movne	r1, #32
   1590c:	bl	1130c <memset@plt>
   15910:	add	r4, r4, r5
   15914:	add	r3, r5, r6
   15918:	b	153e4 <__assert_fail@plt+0x3fd0>
   1591c:	mov	r1, r6
   15920:	mov	r0, r7
   15924:	bl	19b3c <__assert_fail@plt+0x8728>
   15928:	cmp	r1, #0
   1592c:	bne	1584c <__assert_fail@plt+0x4438>
   15930:	mov	r0, r7
   15934:	mov	r1, r6
   15938:	bl	1991c <__assert_fail@plt+0x8508>
   1593c:	sub	r5, r5, #1
   15940:	mov	r7, r0
   15944:	b	1583c <__assert_fail@plt+0x4428>
   15948:	mov	r0, r7
   1594c:	mov	r1, r6
   15950:	bl	19b3c <__assert_fail@plt+0x8728>
   15954:	sub	r8, r8, #1
   15958:	add	r3, sp, #80	; 0x50
   1595c:	mov	r0, r7
   15960:	add	r1, r1, #48	; 0x30
   15964:	strb	r1, [r3, r8]
   15968:	mov	r1, r6
   1596c:	bl	1991c <__assert_fail@plt+0x8508>
   15970:	mov	r7, r0
   15974:	b	15854 <__assert_fail@plt+0x4440>
   15978:	bl	11150 <memcpy@plt>
   1597c:	b	158b0 <__assert_fail@plt+0x449c>
   15980:	ldr	r3, [sp, #28]
   15984:	ldr	r2, [sp, #24]
   15988:	subs	r3, r3, #45	; 0x2d
   1598c:	movne	r3, #1
   15990:	cmp	fp, #0
   15994:	movlt	r3, #0
   15998:	cmp	r3, #0
   1599c:	moveq	fp, #0
   159a0:	ldr	r3, [sp, #52]	; 0x34
   159a4:	cmp	fp, #1
   159a8:	movcs	r5, fp
   159ac:	movcc	r5, #1
   159b0:	sub	r3, r3, r2
   159b4:	cmp	r5, r3
   159b8:	bcs	14bc8 <__assert_fail@plt+0x37b4>
   159bc:	cmp	r4, #0
   159c0:	beq	150c4 <__assert_fail@plt+0x3cb0>
   159c4:	cmp	fp, #1
   159c8:	ble	159f4 <__assert_fail@plt+0x45e0>
   159cc:	ldr	r3, [sp, #28]
   159d0:	sub	fp, fp, #1
   159d4:	cmp	r3, #43	; 0x2b
   159d8:	cmpne	r3, #48	; 0x30
   159dc:	mov	r0, r4
   159e0:	mov	r2, fp
   159e4:	moveq	r1, #48	; 0x30
   159e8:	movne	r1, #32
   159ec:	bl	1130c <memset@plt>
   159f0:	add	r4, r4, fp
   159f4:	mov	r3, #10
   159f8:	b	150c0 <__assert_fail@plt+0x3cac>
   159fc:	mov	r3, #1
   15a00:	b	14f50 <__assert_fail@plt+0x3b3c>
   15a04:	ldr	r3, [sp, #32]
   15a08:	mov	r1, #11
   15a0c:	mov	r9, #0
   15a10:	ldr	r5, [r3, #16]
   15a14:	mov	r8, r9
   15a18:	mov	r7, r9
   15a1c:	mul	r1, r1, r5
   15a20:	mov	r6, #1
   15a24:	asr	r1, r1, #5
   15a28:	add	r5, r1, #1
   15a2c:	b	154d8 <__assert_fail@plt+0x40c4>
   15a30:	cmp	sl, #69	; 0x45
   15a34:	ldrne	r3, [sp, #32]
   15a38:	ldrne	r0, [r3]
   15a3c:	bne	156f0 <__assert_fail@plt+0x42dc>
   15a40:	b	15248 <__assert_fail@plt+0x3e34>
   15a44:	ldr	lr, [sp, #32]
   15a48:	add	ip, sp, #96	; 0x60
   15a4c:	ldm	lr!, {r0, r1, r2, r3}
   15a50:	stmia	ip!, {r0, r1, r2, r3}
   15a54:	ldm	lr!, {r0, r1, r2, r3}
   15a58:	stmia	ip!, {r0, r1, r2, r3}
   15a5c:	mvn	r3, #0
   15a60:	ldm	lr, {r0, r1, r2}
   15a64:	str	r3, [sp, #124]	; 0x7c
   15a68:	stm	ip, {r0, r1, r2}
   15a6c:	add	r1, sp, #96	; 0x60
   15a70:	ldr	r0, [sp, #1176]	; 0x498
   15a74:	bl	17a24 <__assert_fail@plt+0x6610>
   15a78:	ldr	r2, [sp, #124]	; 0x7c
   15a7c:	cmp	r2, #0
   15a80:	mov	r3, r0
   15a84:	bge	15ad4 <__assert_fail@plt+0x46c0>
   15a88:	mov	r3, #75	; 0x4b
   15a8c:	ldr	r2, [sp, #48]	; 0x30
   15a90:	str	r3, [r2]
   15a94:	mov	r3, #0
   15a98:	str	r3, [sp, #24]
   15a9c:	ldr	r0, [sp, #24]
   15aa0:	add	sp, sp, #1120	; 0x460
   15aa4:	add	sp, sp, #4
   15aa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15aac:	ldrdeq	sl, [r1], -fp
   15ab0:	stcleq	12, cr12, [ip], {204}	; 0xcc
   15ab4:	andeq	fp, r1, r9, lsl r2
   15ab8:	andeq	fp, r1, pc, ror r5
   15abc:	andeq	fp, r1, r8, lsl #11
   15ac0:	andeq	r0, r0, fp, ror #14
   15ac4:	andeq	r2, r0, pc, lsl #14
   15ac8:	muleq	r1, r1, r5
   15acc:			; <UNDEFINED> instruction: 0xfffff894
   15ad0:	andeq	r2, r0, r0, lsl r7
   15ad4:	lsr	r7, r0, #31
   15ad8:	add	r9, sp, #93	; 0x5d
   15adc:	mov	r8, r0
   15ae0:	mov	r6, #10
   15ae4:	mov	r0, r8
   15ae8:	mov	r1, r6
   15aec:	str	r3, [sp, #44]	; 0x2c
   15af0:	bl	19b3c <__assert_fail@plt+0x8728>
   15af4:	mov	r0, r8
   15af8:	mov	sl, r9
   15afc:	mov	r5, r1
   15b00:	mov	r1, r6
   15b04:	bl	1991c <__assert_fail@plt+0x8508>
   15b08:	ldr	r3, [sp, #44]	; 0x2c
   15b0c:	cmp	r3, #0
   15b10:	rsblt	r5, r5, #48	; 0x30
   15b14:	addge	r5, r5, #48	; 0x30
   15b18:	uxtb	r5, r5
   15b1c:	strb	r5, [r9], #-1
   15b20:	cmp	r0, #0
   15b24:	mov	r8, r0
   15b28:	bne	15ae4 <__assert_fail@plt+0x46d0>
   15b2c:	mov	r6, #1
   15b30:	b	15558 <__assert_fail@plt+0x4144>
   15b34:	cmp	sl, #79	; 0x4f
   15b38:	movne	r3, #88	; 0x58
   15b3c:	bne	15414 <__assert_fail@plt+0x4000>
   15b40:	b	15248 <__assert_fail@plt+0x3e34>
   15b44:	ldr	r3, [sp, #28]
   15b48:	ldr	r2, [sp, #24]
   15b4c:	subs	r3, r3, #45	; 0x2d
   15b50:	movne	r3, #1
   15b54:	cmp	fp, #0
   15b58:	movlt	r3, #0
   15b5c:	cmp	r3, #0
   15b60:	moveq	fp, #0
   15b64:	ldr	r3, [sp, #52]	; 0x34
   15b68:	cmp	fp, #1
   15b6c:	movcs	r5, fp
   15b70:	movcc	r5, #1
   15b74:	sub	r3, r3, r2
   15b78:	cmp	r5, r3
   15b7c:	bcs	14bc8 <__assert_fail@plt+0x37b4>
   15b80:	cmp	r4, #0
   15b84:	beq	150c4 <__assert_fail@plt+0x3cb0>
   15b88:	cmp	fp, #1
   15b8c:	ble	15bb8 <__assert_fail@plt+0x47a4>
   15b90:	ldr	r3, [sp, #28]
   15b94:	sub	fp, fp, #1
   15b98:	cmp	r3, #43	; 0x2b
   15b9c:	cmpne	r3, #48	; 0x30
   15ba0:	mov	r0, r4
   15ba4:	mov	r2, fp
   15ba8:	moveq	r1, #48	; 0x30
   15bac:	movne	r1, #32
   15bb0:	bl	1130c <memset@plt>
   15bb4:	add	r4, r4, fp
   15bb8:	mov	r3, #9
   15bbc:	b	150c0 <__assert_fail@plt+0x3cac>
   15bc0:	ldr	r3, [sp, #32]
   15bc4:	mov	r1, #7
   15bc8:	ldr	r0, [r3, #24]
   15bcc:	add	r0, r0, #6
   15bd0:	bl	19b3c <__assert_fail@plt+0x8728>
   15bd4:	add	r0, r1, #1
   15bd8:	mov	r6, #1
   15bdc:	b	1571c <__assert_fail@plt+0x4308>
   15be0:	cmp	sl, #69	; 0x45
   15be4:	beq	15248 <__assert_fail@plt+0x3e34>
   15be8:	ldr	r3, [sp, #32]
   15bec:	ldr	r0, [r3, #28]
   15bf0:	ldr	r3, [r3, #24]
   15bf4:	sub	r0, r0, r3
   15bf8:	mov	r1, #7
   15bfc:	add	r0, r0, r1
   15c00:	bl	1991c <__assert_fail@plt+0x8508>
   15c04:	b	156f0 <__assert_fail@plt+0x42dc>
   15c08:	cmp	sl, #69	; 0x45
   15c0c:	beq	15248 <__assert_fail@plt+0x3e34>
   15c10:	ldr	r3, [sp, #32]
   15c14:	mov	r1, #7
   15c18:	ldr	r8, [r3, #20]
   15c1c:	cmp	r8, #0
   15c20:	mvnge	r3, #99	; 0x63
   15c24:	movlt	r3, #300	; 0x12c
   15c28:	add	r5, r3, r8
   15c2c:	ldr	r3, [sp, #32]
   15c30:	ldr	r9, [r3, #28]
   15c34:	ldr	r6, [r3, #24]
   15c38:	sub	r0, r9, r6
   15c3c:	add	r0, r0, #380	; 0x17c
   15c40:	add	r0, r0, #2
   15c44:	bl	19b3c <__assert_fail@plt+0x8728>
   15c48:	sub	r1, r9, r1
   15c4c:	adds	r3, r1, #3
   15c50:	str	r3, [sp, #64]	; 0x40
   15c54:	bpl	15d10 <__assert_fail@plt+0x48fc>
   15c58:	sub	r5, r5, #1
   15c5c:	tst	r5, #3
   15c60:	movne	r1, #0
   15c64:	bne	15c94 <__assert_fail@plt+0x4880>
   15c68:	mov	r1, #100	; 0x64
   15c6c:	mov	r0, r5
   15c70:	bl	19b3c <__assert_fail@plt+0x8728>
   15c74:	cmp	r1, #0
   15c78:	movne	r1, #1
   15c7c:	bne	15c94 <__assert_fail@plt+0x4880>
   15c80:	mov	r1, #400	; 0x190
   15c84:	mov	r0, r5
   15c88:	bl	19b3c <__assert_fail@plt+0x8728>
   15c8c:	clz	r1, r1
   15c90:	lsr	r1, r1, #5
   15c94:	add	r1, r1, #364	; 0x16c
   15c98:	add	r1, r1, #1
   15c9c:	add	r9, r1, r9
   15ca0:	sub	r0, r9, r6
   15ca4:	add	r0, r0, #380	; 0x17c
   15ca8:	mov	r1, #7
   15cac:	add	r0, r0, #2
   15cb0:	bl	19b3c <__assert_fail@plt+0x8728>
   15cb4:	mvn	r5, #0
   15cb8:	sub	r1, r9, r1
   15cbc:	add	r0, r1, #3
   15cc0:	cmp	r7, #71	; 0x47
   15cc4:	beq	15d80 <__assert_fail@plt+0x496c>
   15cc8:	cmp	r7, #103	; 0x67
   15ccc:	bne	15da8 <__assert_fail@plt+0x4994>
   15cd0:	mov	r1, #100	; 0x64
   15cd4:	mov	r0, r8
   15cd8:	bl	19b3c <__assert_fail@plt+0x8728>
   15cdc:	add	r0, r1, r5
   15ce0:	mov	r1, #100	; 0x64
   15ce4:	bl	19b3c <__assert_fail@plt+0x8728>
   15ce8:	cmp	r1, #0
   15cec:	movge	r5, r1
   15cf0:	bge	15d08 <__assert_fail@plt+0x48f4>
   15cf4:	ldr	r3, [pc, #-560]	; 15acc <__assert_fail@plt+0x46b8>
   15cf8:	sub	r3, r3, r5
   15cfc:	cmp	r8, r3
   15d00:	rsblt	r5, r1, #0
   15d04:	addge	r5, r1, #100	; 0x64
   15d08:	mov	r7, #0
   15d0c:	b	1548c <__assert_fail@plt+0x4078>
   15d10:	tst	r5, #3
   15d14:	movne	r1, #0
   15d18:	bne	15d48 <__assert_fail@plt+0x4934>
   15d1c:	mov	r1, #100	; 0x64
   15d20:	mov	r0, r5
   15d24:	bl	19b3c <__assert_fail@plt+0x8728>
   15d28:	cmp	r1, #0
   15d2c:	movne	r1, #1
   15d30:	bne	15d48 <__assert_fail@plt+0x4934>
   15d34:	mov	r1, #400	; 0x190
   15d38:	mov	r0, r5
   15d3c:	bl	19b3c <__assert_fail@plt+0x8728>
   15d40:	clz	r1, r1
   15d44:	lsr	r1, r1, #5
   15d48:	add	r1, r1, #364	; 0x16c
   15d4c:	add	r1, r1, #1
   15d50:	sub	r9, r9, r1
   15d54:	sub	r0, r9, r6
   15d58:	add	r0, r0, #380	; 0x17c
   15d5c:	mov	r1, #7
   15d60:	add	r0, r0, #2
   15d64:	bl	19b3c <__assert_fail@plt+0x8728>
   15d68:	sub	r1, r9, r1
   15d6c:	adds	r0, r1, #3
   15d70:	movmi	r5, #0
   15d74:	ldrmi	r0, [sp, #64]	; 0x40
   15d78:	movpl	r5, #1
   15d7c:	b	15cc0 <__assert_fail@plt+0x48ac>
   15d80:	ldr	r7, [pc, #-700]	; 15acc <__assert_fail@plt+0x46b8>
   15d84:	add	r1, r8, #1888	; 0x760
   15d88:	sub	r7, r7, r5
   15d8c:	cmp	r8, r7
   15d90:	add	r1, r1, #12
   15d94:	movge	r7, #0
   15d98:	movlt	r7, #1
   15d9c:	add	r5, r1, r5
   15da0:	mov	r6, #4
   15da4:	b	15490 <__assert_fail@plt+0x407c>
   15da8:	mov	r1, #7
   15dac:	bl	1991c <__assert_fail@plt+0x8508>
   15db0:	add	r0, r0, #1
   15db4:	b	156f0 <__assert_fail@plt+0x42dc>
   15db8:	cmp	sl, #69	; 0x45
   15dbc:	beq	15248 <__assert_fail@plt+0x3e34>
   15dc0:	ldr	r3, [sp, #32]
   15dc4:	mov	r1, #7
   15dc8:	ldr	r0, [r3, #24]
   15dcc:	add	r0, r0, #6
   15dd0:	bl	19b3c <__assert_fail@plt+0x8728>
   15dd4:	ldr	r3, [sp, #32]
   15dd8:	ldr	r0, [r3, #28]
   15ddc:	sub	r0, r0, r1
   15de0:	b	15bf8 <__assert_fail@plt+0x47e4>
   15de4:	cmp	sl, #69	; 0x45
   15de8:	beq	15248 <__assert_fail@plt+0x3e34>
   15dec:	ldr	r3, [sp, #32]
   15df0:	ldr	r0, [r3, #24]
   15df4:	b	15bd8 <__assert_fail@plt+0x47c4>
   15df8:	cmp	sl, #69	; 0x45
   15dfc:	beq	15430 <__assert_fail@plt+0x401c>
   15e00:	cmp	sl, #79	; 0x4f
   15e04:	beq	15248 <__assert_fail@plt+0x3e34>
   15e08:	ldr	r3, [sp, #32]
   15e0c:	ldr	r7, [pc, #-840]	; 15acc <__assert_fail@plt+0x46b8>
   15e10:	ldr	r5, [r3, #20]
   15e14:	cmp	r5, r7
   15e18:	add	r5, r5, #1888	; 0x760
   15e1c:	movge	r7, #0
   15e20:	movlt	r7, #1
   15e24:	add	r5, r5, #12
   15e28:	b	15da0 <__assert_fail@plt+0x498c>
   15e2c:	cmp	sl, #69	; 0x45
   15e30:	beq	15438 <__assert_fail@plt+0x4024>
   15e34:	ldr	r3, [sp, #32]
   15e38:	mov	r1, #100	; 0x64
   15e3c:	ldr	r6, [r3, #20]
   15e40:	mov	r0, r6
   15e44:	bl	19b3c <__assert_fail@plt+0x8728>
   15e48:	subs	r5, r1, #0
   15e4c:	bge	15d08 <__assert_fail@plt+0x48f4>
   15e50:	ldr	r3, [pc, #-908]	; 15acc <__assert_fail@plt+0x46b8>
   15e54:	cmp	r6, r3
   15e58:	rsblt	r5, r5, #0
   15e5c:	addge	r5, r5, #100	; 0x64
   15e60:	b	15d08 <__assert_fail@plt+0x48f4>
   15e64:	ldr	r3, [sp, #40]	; 0x28
   15e68:	cmp	r5, #0
   15e6c:	movne	r3, #0
   15e70:	ldr	r0, [sp, #60]	; 0x3c
   15e74:	str	r3, [sp, #40]	; 0x28
   15e78:	bl	112b8 <strlen@plt>
   15e7c:	ldr	r2, [sp, #28]
   15e80:	mvn	r3, fp
   15e84:	cmp	r2, #45	; 0x2d
   15e88:	lsr	r3, r3, #31
   15e8c:	moveq	r3, #0
   15e90:	cmp	r3, #0
   15e94:	moveq	fp, #0
   15e98:	ldr	r3, [sp, #52]	; 0x34
   15e9c:	ldr	r2, [sp, #24]
   15ea0:	sub	r3, r3, r2
   15ea4:	cmp	fp, r0
   15ea8:	movcs	r7, fp
   15eac:	movcc	r7, r0
   15eb0:	cmp	r7, r3
   15eb4:	mov	r6, r0
   15eb8:	bcs	14bc8 <__assert_fail@plt+0x37b4>
   15ebc:	cmp	r4, #0
   15ec0:	beq	15f10 <__assert_fail@plt+0x4afc>
   15ec4:	cmp	fp, r0
   15ec8:	bls	15ef4 <__assert_fail@plt+0x4ae0>
   15ecc:	ldr	r3, [sp, #28]
   15ed0:	sub	fp, fp, r0
   15ed4:	cmp	r3, #43	; 0x2b
   15ed8:	cmpne	r3, #48	; 0x30
   15edc:	mov	r0, r4
   15ee0:	mov	r2, fp
   15ee4:	moveq	r1, #48	; 0x30
   15ee8:	movne	r1, #32
   15eec:	bl	1130c <memset@plt>
   15ef0:	add	r4, r4, fp
   15ef4:	cmp	r5, #0
   15ef8:	beq	15f1c <__assert_fail@plt+0x4b08>
   15efc:	ldr	r1, [sp, #60]	; 0x3c
   15f00:	mov	r2, r6
   15f04:	mov	r0, r4
   15f08:	bl	14a18 <__assert_fail@plt+0x3604>
   15f0c:	add	r4, r4, r6
   15f10:	ldr	r3, [sp, #24]
   15f14:	add	r3, r3, r7
   15f18:	b	153e4 <__assert_fail@plt+0x3fd0>
   15f1c:	ldr	r3, [sp, #40]	; 0x28
   15f20:	mov	r2, r6
   15f24:	ldr	r1, [sp, #60]	; 0x3c
   15f28:	mov	r0, r4
   15f2c:	cmp	r3, #0
   15f30:	b	151f0 <__assert_fail@plt+0x3ddc>
   15f34:	bl	11150 <memcpy@plt>
   15f38:	b	15f0c <__assert_fail@plt+0x4af8>
   15f3c:	mov	r3, #0
   15f40:	str	r3, [sp, #64]	; 0x40
   15f44:	b	14fa4 <__assert_fail@plt+0x3b90>
   15f48:	mov	r1, #100	; 0x64
   15f4c:	mov	r8, #1
   15f50:	mla	r5, r1, r5, r9
   15f54:	mov	r6, #5
   15f58:	mov	r9, #0
   15f5c:	b	154d8 <__assert_fail@plt+0x40c4>
   15f60:	mov	r1, #100	; 0x64
   15f64:	mov	r8, #1
   15f68:	mla	r5, r1, r5, r9
   15f6c:	mov	r6, #6
   15f70:	mov	r9, #4
   15f74:	b	154d8 <__assert_fail@plt+0x40c4>
   15f78:	mov	r3, #100	; 0x64
   15f7c:	mov	r8, #1
   15f80:	mul	r9, r3, r9
   15f84:	ldr	r3, [pc, #-1212]	; 15ad0 <__assert_fail@plt+0x46bc>
   15f88:	mov	r6, #9
   15f8c:	mla	r5, r3, r5, r9
   15f90:	mov	r9, #20
   15f94:	add	r5, r5, r1
   15f98:	b	154d8 <__assert_fail@plt+0x40c4>
   15f9c:	cmp	r1, #0
   15fa0:	bne	15f78 <__assert_fail@plt+0x4b64>
   15fa4:	cmp	r9, #0
   15fa8:	bne	15f60 <__assert_fail@plt+0x4b4c>
   15fac:	mov	r8, #1
   15fb0:	b	157d4 <__assert_fail@plt+0x43c0>
   15fb4:	ldr	r3, [sp, #36]	; 0x24
   15fb8:	sub	r3, r3, #1
   15fbc:	str	r3, [sp, #36]	; 0x24
   15fc0:	b	15248 <__assert_fail@plt+0x3e34>
   15fc4:	bl	11150 <memcpy@plt>
   15fc8:	b	156b4 <__assert_fail@plt+0x42a0>
   15fcc:	push	{r4, lr}
   15fd0:	sub	sp, sp, #32
   15fd4:	add	lr, sp, #32
   15fd8:	ldr	r4, [sp, #44]	; 0x2c
   15fdc:	mov	ip, #0
   15fe0:	strb	ip, [lr, #-1]!
   15fe4:	str	r4, [sp, #20]
   15fe8:	str	lr, [sp, #12]
   15fec:	ldr	r4, [sp, #40]	; 0x28
   15ff0:	mvn	lr, #0
   15ff4:	str	r4, [sp, #16]
   15ff8:	stmib	sp, {ip, lr}
   15ffc:	str	ip, [sp]
   16000:	bl	14a90 <__assert_fail@plt+0x367c>
   16004:	add	sp, sp, #32
   16008:	pop	{r4, pc}
   1600c:	push	{r4, r5, r6, lr}
   16010:	subs	r5, r0, #0
   16014:	bne	1602c <__assert_fail@plt+0x4c18>
   16018:	ldr	r3, [pc, #124]	; 1609c <__assert_fail@plt+0x4c88>
   1601c:	ldr	r0, [pc, #124]	; 160a0 <__assert_fail@plt+0x4c8c>
   16020:	ldr	r1, [r3]
   16024:	bl	113d8 <fputs@plt>
   16028:	bl	113f0 <abort@plt>
   1602c:	mov	r1, #47	; 0x2f
   16030:	bl	11384 <strrchr@plt>
   16034:	cmp	r0, #0
   16038:	addne	r4, r0, #1
   1603c:	moveq	r4, r5
   16040:	sub	r3, r4, r5
   16044:	cmp	r3, #6
   16048:	ble	16088 <__assert_fail@plt+0x4c74>
   1604c:	mov	r2, #7
   16050:	ldr	r1, [pc, #76]	; 160a4 <__assert_fail@plt+0x4c90>
   16054:	sub	r0, r4, #7
   16058:	bl	113e4 <strncmp@plt>
   1605c:	cmp	r0, #0
   16060:	bne	16088 <__assert_fail@plt+0x4c74>
   16064:	mov	r2, #3
   16068:	ldr	r1, [pc, #56]	; 160a8 <__assert_fail@plt+0x4c94>
   1606c:	mov	r0, r4
   16070:	bl	113e4 <strncmp@plt>
   16074:	cmp	r0, #0
   16078:	movne	r5, r4
   1607c:	ldreq	r3, [pc, #40]	; 160ac <__assert_fail@plt+0x4c98>
   16080:	addeq	r5, r4, #3
   16084:	streq	r5, [r3]
   16088:	ldr	r3, [pc, #32]	; 160b0 <__assert_fail@plt+0x4c9c>
   1608c:	str	r5, [r3]
   16090:	ldr	r3, [pc, #28]	; 160b4 <__assert_fail@plt+0x4ca0>
   16094:	str	r5, [r3]
   16098:	pop	{r4, r5, r6, pc}
   1609c:	ldrdeq	ip, [r2], -r8
   160a0:	muleq	r1, sl, r5
   160a4:	ldrdeq	fp, [r1], -r2
   160a8:	ldrdeq	fp, [r1], -sl
   160ac:	andeq	ip, r2, r8, asr #3
   160b0:			; <UNDEFINED> instruction: 0x0002c2b0
   160b4:	andeq	ip, r2, ip, asr #3
   160b8:	push	{r4, r5, r6, lr}
   160bc:	mov	r2, #48	; 0x30
   160c0:	mov	r5, r1
   160c4:	mov	r1, #0
   160c8:	mov	r4, r0
   160cc:	bl	1130c <memset@plt>
   160d0:	cmp	r5, #10
   160d4:	bne	160dc <__assert_fail@plt+0x4cc8>
   160d8:	bl	113f0 <abort@plt>
   160dc:	str	r5, [r4]
   160e0:	mov	r0, r4
   160e4:	pop	{r4, r5, r6, pc}
   160e8:	push	{r4, r5, r6, lr}
   160ec:	mov	r4, r0
   160f0:	mov	r5, r1
   160f4:	bl	19640 <__assert_fail@plt+0x822c>
   160f8:	ldrb	r3, [r0]
   160fc:	bic	r3, r3, #32
   16100:	cmp	r3, #85	; 0x55
   16104:	bne	16174 <__assert_fail@plt+0x4d60>
   16108:	ldrb	r3, [r0, #1]
   1610c:	bic	r3, r3, #32
   16110:	cmp	r3, #84	; 0x54
   16114:	bne	1614c <__assert_fail@plt+0x4d38>
   16118:	ldrb	r3, [r0, #2]
   1611c:	bic	r3, r3, #32
   16120:	cmp	r3, #70	; 0x46
   16124:	bne	1614c <__assert_fail@plt+0x4d38>
   16128:	ldrb	r3, [r0, #3]
   1612c:	cmp	r3, #45	; 0x2d
   16130:	bne	1614c <__assert_fail@plt+0x4d38>
   16134:	ldrb	r3, [r0, #4]
   16138:	cmp	r3, #56	; 0x38
   1613c:	bne	1614c <__assert_fail@plt+0x4d38>
   16140:	ldrb	r3, [r0, #5]
   16144:	cmp	r3, #0
   16148:	beq	16160 <__assert_fail@plt+0x4d4c>
   1614c:	ldr	r1, [pc, #144]	; 161e4 <__assert_fail@plt+0x4dd0>
   16150:	ldr	r0, [pc, #144]	; 161e8 <__assert_fail@plt+0x4dd4>
   16154:	cmp	r5, #9
   16158:	movne	r0, r1
   1615c:	pop	{r4, r5, r6, pc}
   16160:	ldrb	r3, [r4]
   16164:	ldr	r1, [pc, #128]	; 161ec <__assert_fail@plt+0x4dd8>
   16168:	ldr	r0, [pc, #128]	; 161f0 <__assert_fail@plt+0x4ddc>
   1616c:	cmp	r3, #96	; 0x60
   16170:	b	16158 <__assert_fail@plt+0x4d44>
   16174:	cmp	r3, #71	; 0x47
   16178:	bne	1614c <__assert_fail@plt+0x4d38>
   1617c:	ldrb	r3, [r0, #1]
   16180:	bic	r3, r3, #32
   16184:	cmp	r3, #66	; 0x42
   16188:	bne	1614c <__assert_fail@plt+0x4d38>
   1618c:	ldrb	r3, [r0, #2]
   16190:	cmp	r3, #49	; 0x31
   16194:	bne	1614c <__assert_fail@plt+0x4d38>
   16198:	ldrb	r3, [r0, #3]
   1619c:	cmp	r3, #56	; 0x38
   161a0:	bne	1614c <__assert_fail@plt+0x4d38>
   161a4:	ldrb	r3, [r0, #4]
   161a8:	cmp	r3, #48	; 0x30
   161ac:	bne	1614c <__assert_fail@plt+0x4d38>
   161b0:	ldrb	r3, [r0, #5]
   161b4:	cmp	r3, #51	; 0x33
   161b8:	bne	1614c <__assert_fail@plt+0x4d38>
   161bc:	ldrb	r3, [r0, #6]
   161c0:	cmp	r3, #48	; 0x30
   161c4:	bne	1614c <__assert_fail@plt+0x4d38>
   161c8:	ldrb	r3, [r0, #7]
   161cc:	cmp	r3, #0
   161d0:	bne	1614c <__assert_fail@plt+0x4d38>
   161d4:	ldrb	r3, [r4]
   161d8:	ldr	r1, [pc, #20]	; 161f4 <__assert_fail@plt+0x4de0>
   161dc:	ldr	r0, [pc, #20]	; 161f8 <__assert_fail@plt+0x4de4>
   161e0:	b	1616c <__assert_fail@plt+0x4d58>
   161e4:	andeq	fp, r1, r4, lsl sl
   161e8:	andeq	fp, r1, r3, asr #12
   161ec:	andeq	fp, r1, r8, lsr r6
   161f0:	andeq	fp, r1, r4, lsr r6
   161f4:	andeq	fp, r1, r0, asr #12
   161f8:	andeq	fp, r1, ip, lsr r6
   161fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16200:	sub	sp, sp, #108	; 0x6c
   16204:	mov	r8, r0
   16208:	str	r3, [sp, #36]	; 0x24
   1620c:	mov	r5, r1
   16210:	str	r2, [sp, #44]	; 0x2c
   16214:	ldr	sl, [sp, #144]	; 0x90
   16218:	bl	111f8 <__ctype_get_mb_cur_max@plt>
   1621c:	ldr	r3, [sp, #148]	; 0x94
   16220:	mov	r7, #0
   16224:	str	r7, [sp, #48]	; 0x30
   16228:	lsr	r6, r3, #1
   1622c:	and	r6, r6, #1
   16230:	mov	r3, #1
   16234:	str	r3, [sp, #72]	; 0x48
   16238:	str	r7, [sp, #24]
   1623c:	str	r7, [sp, #32]
   16240:	str	r7, [sp, #40]	; 0x28
   16244:	str	r7, [sp, #60]	; 0x3c
   16248:	str	r0, [sp, #76]	; 0x4c
   1624c:	cmp	sl, #10
   16250:	ldrls	pc, [pc, sl, lsl #2]
   16254:	b	16490 <__assert_fail@plt+0x507c>
   16258:	andeq	r6, r1, r4, lsl #5
   1625c:	andeq	r6, r1, r8, lsl pc
   16260:	andeq	r6, r1, ip, asr r4
   16264:	andeq	r6, r1, r8, lsr #9
   16268:	andeq	r6, r1, r8, lsr r4
   1626c:	muleq	r1, r0, r2
   16270:	strdeq	r6, [r1], -r8
   16274:	muleq	r1, r4, r4
   16278:	andeq	r6, r1, r8, lsl #7
   1627c:	andeq	r6, r1, r8, lsl #7
   16280:	andeq	r6, r1, r8, lsl #7
   16284:	mov	r6, #0
   16288:	mov	r4, #0
   1628c:	b	162bc <__assert_fail@plt+0x4ea8>
   16290:	cmp	r6, #0
   16294:	bne	164b8 <__assert_fail@plt+0x50a4>
   16298:	cmp	r5, #0
   1629c:	movne	r3, #34	; 0x22
   162a0:	strbne	r3, [r8]
   162a4:	mov	r3, #1
   162a8:	str	r3, [sp, #24]
   162ac:	str	r3, [sp, #32]
   162b0:	mov	r4, #1
   162b4:	ldr	r3, [pc, #3172]	; 16f20 <__assert_fail@plt+0x5b0c>
   162b8:	str	r3, [sp, #40]	; 0x28
   162bc:	mov	r9, r5
   162c0:	mov	r3, #0
   162c4:	str	r7, [sp, #68]	; 0x44
   162c8:	str	r3, [sp, #28]
   162cc:	ldr	r3, [sp, #36]	; 0x24
   162d0:	cmn	r3, #1
   162d4:	bne	16e64 <__assert_fail@plt+0x5a50>
   162d8:	ldr	r3, [sp, #44]	; 0x2c
   162dc:	ldr	r2, [sp, #28]
   162e0:	ldrb	r3, [r3, r2]
   162e4:	adds	r3, r3, #0
   162e8:	movne	r3, #1
   162ec:	str	r3, [sp, #52]	; 0x34
   162f0:	ldr	r3, [sp, #52]	; 0x34
   162f4:	cmp	r3, #0
   162f8:	bne	164e0 <__assert_fail@plt+0x50cc>
   162fc:	sub	r2, sl, #2
   16300:	clz	r2, r2
   16304:	lsr	r2, r2, #5
   16308:	and	r3, r6, r2
   1630c:	cmp	r4, #0
   16310:	movne	r3, #0
   16314:	andeq	r3, r3, #1
   16318:	cmp	r3, #0
   1631c:	bne	166a8 <__assert_fail@plt+0x5294>
   16320:	eor	r3, r6, #1
   16324:	ands	r2, r2, r3
   16328:	beq	16e9c <__assert_fail@plt+0x5a88>
   1632c:	ldr	r3, [sp, #68]	; 0x44
   16330:	cmp	r3, #0
   16334:	beq	16ed4 <__assert_fail@plt+0x5ac0>
   16338:	ldr	r3, [sp, #72]	; 0x48
   1633c:	cmp	r3, #0
   16340:	beq	16e78 <__assert_fail@plt+0x5a64>
   16344:	ldr	r3, [sp, #160]	; 0xa0
   16348:	ldr	r2, [sp, #44]	; 0x2c
   1634c:	str	r3, [sp, #16]
   16350:	ldr	r3, [sp, #156]	; 0x9c
   16354:	ldr	r1, [sp, #60]	; 0x3c
   16358:	str	r3, [sp, #12]
   1635c:	ldr	r3, [sp, #152]	; 0x98
   16360:	str	r3, [sp, #8]
   16364:	ldr	r3, [sp, #148]	; 0x94
   16368:	str	r3, [sp, #4]
   1636c:	mov	r3, #5
   16370:	str	r3, [sp]
   16374:	ldr	r3, [sp, #36]	; 0x24
   16378:	mov	r0, r8
   1637c:	bl	161fc <__assert_fail@plt+0x4de8>
   16380:	mov	r4, r0
   16384:	b	16ec8 <__assert_fail@plt+0x5ab4>
   16388:	cmp	sl, #10
   1638c:	beq	163e8 <__assert_fail@plt+0x4fd4>
   16390:	ldr	r4, [pc, #2956]	; 16f24 <__assert_fail@plt+0x5b10>
   16394:	mov	r2, #5
   16398:	mov	r1, r4
   1639c:	mov	r0, #0
   163a0:	bl	1118c <dcgettext@plt>
   163a4:	cmp	r0, r4
   163a8:	str	r0, [sp, #156]	; 0x9c
   163ac:	bne	163bc <__assert_fail@plt+0x4fa8>
   163b0:	mov	r1, sl
   163b4:	bl	160e8 <__assert_fail@plt+0x4cd4>
   163b8:	str	r0, [sp, #156]	; 0x9c
   163bc:	ldr	r4, [pc, #2916]	; 16f28 <__assert_fail@plt+0x5b14>
   163c0:	mov	r2, #5
   163c4:	mov	r1, r4
   163c8:	mov	r0, #0
   163cc:	bl	1118c <dcgettext@plt>
   163d0:	cmp	r0, r4
   163d4:	str	r0, [sp, #160]	; 0xa0
   163d8:	bne	163e8 <__assert_fail@plt+0x4fd4>
   163dc:	mov	r1, sl
   163e0:	bl	160e8 <__assert_fail@plt+0x4cd4>
   163e4:	str	r0, [sp, #160]	; 0xa0
   163e8:	cmp	r6, #0
   163ec:	moveq	r4, r6
   163f0:	beq	16408 <__assert_fail@plt+0x4ff4>
   163f4:	mov	r4, #0
   163f8:	b	16418 <__assert_fail@plt+0x5004>
   163fc:	cmp	r5, r4
   16400:	strbhi	r3, [r8, r4]
   16404:	add	r4, r4, #1
   16408:	ldr	r3, [sp, #156]	; 0x9c
   1640c:	ldrb	r3, [r3, r4]
   16410:	cmp	r3, #0
   16414:	bne	163fc <__assert_fail@plt+0x4fe8>
   16418:	ldr	r0, [sp, #160]	; 0xa0
   1641c:	bl	112b8 <strlen@plt>
   16420:	ldr	r3, [sp, #160]	; 0xa0
   16424:	str	r3, [sp, #40]	; 0x28
   16428:	mov	r3, #1
   1642c:	str	r3, [sp, #24]
   16430:	str	r0, [sp, #32]
   16434:	b	162bc <__assert_fail@plt+0x4ea8>
   16438:	mov	r3, #1
   1643c:	cmp	r6, #0
   16440:	streq	r3, [sp, #24]
   16444:	beq	16464 <__assert_fail@plt+0x5050>
   16448:	str	r3, [sp, #32]
   1644c:	ldr	r3, [pc, #2772]	; 16f28 <__assert_fail@plt+0x5b14>
   16450:	mov	r4, #0
   16454:	str	r3, [sp, #40]	; 0x28
   16458:	b	16488 <__assert_fail@plt+0x5074>
   1645c:	cmp	r6, #0
   16460:	bne	164d0 <__assert_fail@plt+0x50bc>
   16464:	cmp	r5, #0
   16468:	movne	r3, #39	; 0x27
   1646c:	strbne	r3, [r8]
   16470:	mov	r3, #1
   16474:	str	r3, [sp, #32]
   16478:	mov	r6, #0
   1647c:	ldr	r3, [pc, #2724]	; 16f28 <__assert_fail@plt+0x5b14>
   16480:	mov	r4, #1
   16484:	str	r3, [sp, #40]	; 0x28
   16488:	mov	sl, #2
   1648c:	b	162bc <__assert_fail@plt+0x4ea8>
   16490:	bl	113f0 <abort@plt>
   16494:	mov	r6, #0
   16498:	mov	r3, #1
   1649c:	str	r3, [sp, #24]
   164a0:	mov	r4, r6
   164a4:	b	162bc <__assert_fail@plt+0x4ea8>
   164a8:	mov	r6, #1
   164ac:	str	r6, [sp, #24]
   164b0:	str	r6, [sp, #32]
   164b4:	b	1644c <__assert_fail@plt+0x5038>
   164b8:	mov	r3, #1
   164bc:	str	r3, [sp, #32]
   164c0:	ldr	r3, [pc, #2648]	; 16f20 <__assert_fail@plt+0x5b0c>
   164c4:	str	r6, [sp, #24]
   164c8:	str	r3, [sp, #40]	; 0x28
   164cc:	b	16288 <__assert_fail@plt+0x4e74>
   164d0:	mov	r3, #1
   164d4:	str	r3, [sp, #32]
   164d8:	ldr	r3, [pc, #2632]	; 16f28 <__assert_fail@plt+0x5b14>
   164dc:	b	164c8 <__assert_fail@plt+0x50b4>
   164e0:	ldr	r3, [sp, #32]
   164e4:	ldr	fp, [sp, #24]
   164e8:	cmp	sl, #2
   164ec:	moveq	fp, #0
   164f0:	andne	fp, fp, #1
   164f4:	adds	r5, r3, #0
   164f8:	movne	r5, #1
   164fc:	ands	r3, r5, fp
   16500:	str	r3, [sp, #64]	; 0x40
   16504:	beq	165d4 <__assert_fail@plt+0x51c0>
   16508:	ldr	r2, [sp, #32]
   1650c:	ldr	r3, [sp, #28]
   16510:	add	r7, r3, r2
   16514:	mov	r3, r2
   16518:	ldr	r2, [sp, #36]	; 0x24
   1651c:	cmp	r3, #1
   16520:	movls	r3, #0
   16524:	movhi	r3, #1
   16528:	cmn	r2, #1
   1652c:	movne	r3, #0
   16530:	cmp	r3, #0
   16534:	beq	16544 <__assert_fail@plt+0x5130>
   16538:	ldr	r0, [sp, #44]	; 0x2c
   1653c:	bl	112b8 <strlen@plt>
   16540:	str	r0, [sp, #36]	; 0x24
   16544:	ldr	r3, [sp, #36]	; 0x24
   16548:	cmp	r3, r7
   1654c:	bcc	165cc <__assert_fail@plt+0x51b8>
   16550:	ldr	r3, [sp, #44]	; 0x2c
   16554:	ldr	r0, [sp, #28]
   16558:	ldr	r2, [sp, #32]
   1655c:	ldr	r1, [sp, #40]	; 0x28
   16560:	add	r0, r3, r0
   16564:	bl	11168 <memcmp@plt>
   16568:	cmp	r0, #0
   1656c:	bne	165cc <__assert_fail@plt+0x51b8>
   16570:	cmp	r6, #0
   16574:	beq	165d4 <__assert_fail@plt+0x51c0>
   16578:	str	r6, [sp, #24]
   1657c:	ldr	r3, [sp, #24]
   16580:	ldr	r2, [sp, #44]	; 0x2c
   16584:	cmp	sl, #2
   16588:	movne	r3, #0
   1658c:	andeq	r3, r3, #1
   16590:	cmp	r3, #0
   16594:	ldr	r3, [sp, #160]	; 0xa0
   16598:	movne	sl, #4
   1659c:	str	r3, [sp, #16]
   165a0:	ldr	r3, [sp, #156]	; 0x9c
   165a4:	str	sl, [sp]
   165a8:	str	r3, [sp, #12]
   165ac:	mov	r3, #0
   165b0:	str	r3, [sp, #8]
   165b4:	ldr	r3, [sp, #148]	; 0x94
   165b8:	mov	r1, r9
   165bc:	bic	r3, r3, #2
   165c0:	str	r3, [sp, #4]
   165c4:	ldr	r3, [sp, #36]	; 0x24
   165c8:	b	16378 <__assert_fail@plt+0x4f64>
   165cc:	mov	r3, #0
   165d0:	str	r3, [sp, #64]	; 0x40
   165d4:	ldr	r2, [sp, #28]
   165d8:	ldr	r3, [sp, #44]	; 0x2c
   165dc:	add	r3, r3, r2
   165e0:	str	r3, [sp, #80]	; 0x50
   165e4:	ldr	r3, [sp, #44]	; 0x2c
   165e8:	ldrb	r7, [r3, r2]
   165ec:	cmp	r7, #58	; 0x3a
   165f0:	bhi	16758 <__assert_fail@plt+0x5344>
   165f4:	cmp	r7, #43	; 0x2b
   165f8:	bcs	167ac <__assert_fail@plt+0x5398>
   165fc:	cmp	r7, #32
   16600:	beq	16804 <__assert_fail@plt+0x53f0>
   16604:	bhi	166b0 <__assert_fail@plt+0x529c>
   16608:	cmp	r7, #9
   1660c:	beq	16ab8 <__assert_fail@plt+0x56a4>
   16610:	bhi	16674 <__assert_fail@plt+0x5260>
   16614:	cmp	r7, #7
   16618:	beq	16b64 <__assert_fail@plt+0x5750>
   1661c:	bhi	16820 <__assert_fail@plt+0x540c>
   16620:	cmp	r7, #0
   16624:	beq	1683c <__assert_fail@plt+0x5428>
   16628:	ldr	r3, [sp, #76]	; 0x4c
   1662c:	cmp	r3, #1
   16630:	bne	16ba8 <__assert_fail@plt+0x5794>
   16634:	bl	112a0 <__ctype_b_loc@plt>
   16638:	sxth	r3, r7
   1663c:	lsl	r3, r3, #1
   16640:	ldr	r2, [r0]
   16644:	ldrh	r5, [r2, r3]
   16648:	ldr	r3, [sp, #76]	; 0x4c
   1664c:	str	r3, [sp, #56]	; 0x38
   16650:	lsr	r5, r5, #14
   16654:	and	r5, r5, #1
   16658:	ldr	r3, [sp, #24]
   1665c:	eor	fp, r5, #1
   16660:	and	fp, fp, r3
   16664:	ands	fp, fp, #255	; 0xff
   16668:	beq	169f0 <__assert_fail@plt+0x55dc>
   1666c:	mov	r5, #0
   16670:	b	16c54 <__assert_fail@plt+0x5840>
   16674:	cmp	r7, #11
   16678:	beq	16ac0 <__assert_fail@plt+0x56ac>
   1667c:	bcc	16b5c <__assert_fail@plt+0x5748>
   16680:	cmp	r7, #12
   16684:	beq	16b6c <__assert_fail@plt+0x5758>
   16688:	cmp	r7, #13
   1668c:	moveq	r3, #114	; 0x72
   16690:	bne	16628 <__assert_fail@plt+0x5214>
   16694:	cmp	sl, #2
   16698:	movne	r2, #0
   1669c:	andeq	r2, r6, #1
   166a0:	cmp	r2, #0
   166a4:	beq	16824 <__assert_fail@plt+0x5410>
   166a8:	mov	sl, #2
   166ac:	b	1657c <__assert_fail@plt+0x5168>
   166b0:	cmp	r7, #37	; 0x25
   166b4:	beq	167ac <__assert_fail@plt+0x5398>
   166b8:	bhi	166cc <__assert_fail@plt+0x52b8>
   166bc:	cmp	r7, #35	; 0x23
   166c0:	beq	167f8 <__assert_fail@plt+0x53e4>
   166c4:	mov	r5, #0
   166c8:	b	16808 <__assert_fail@plt+0x53f4>
   166cc:	cmp	r7, #39	; 0x27
   166d0:	bne	166c4 <__assert_fail@plt+0x52b0>
   166d4:	cmp	sl, #2
   166d8:	ldrne	r5, [sp, #52]	; 0x34
   166dc:	movne	r3, r5
   166e0:	strne	r3, [sp, #68]	; 0x44
   166e4:	bne	167b0 <__assert_fail@plt+0x539c>
   166e8:	cmp	r6, #0
   166ec:	bne	1657c <__assert_fail@plt+0x5168>
   166f0:	ldr	r2, [sp, #60]	; 0x3c
   166f4:	adds	r3, r9, #0
   166f8:	movne	r3, #1
   166fc:	cmp	r2, #0
   16700:	movne	r3, #0
   16704:	cmp	r3, #0
   16708:	strne	r9, [sp, #60]	; 0x3c
   1670c:	movne	r9, #0
   16710:	bne	16720 <__assert_fail@plt+0x530c>
   16714:	cmp	r9, r4
   16718:	movhi	r3, #39	; 0x27
   1671c:	strbhi	r3, [r8, r4]
   16720:	add	r3, r4, #1
   16724:	cmp	r3, r9
   16728:	movcc	r2, #92	; 0x5c
   1672c:	strbcc	r2, [r8, r3]
   16730:	add	r3, r4, #2
   16734:	cmp	r3, r9
   16738:	ldr	r5, [sp, #52]	; 0x34
   1673c:	movcc	r2, #39	; 0x27
   16740:	strbcc	r2, [r8, r3]
   16744:	add	r4, r4, #3
   16748:	mov	fp, r6
   1674c:	str	r5, [sp, #68]	; 0x44
   16750:	str	r6, [sp, #48]	; 0x30
   16754:	b	169f0 <__assert_fail@plt+0x55dc>
   16758:	cmp	r7, #94	; 0x5e
   1675c:	beq	166c4 <__assert_fail@plt+0x52b0>
   16760:	bhi	167b8 <__assert_fail@plt+0x53a4>
   16764:	cmp	r7, #90	; 0x5a
   16768:	bhi	167a0 <__assert_fail@plt+0x538c>
   1676c:	cmp	r7, #65	; 0x41
   16770:	bcs	167ac <__assert_fail@plt+0x5398>
   16774:	cmp	r7, #62	; 0x3e
   16778:	bls	166c4 <__assert_fail@plt+0x52b0>
   1677c:	cmp	r7, #63	; 0x3f
   16780:	bne	16628 <__assert_fail@plt+0x5214>
   16784:	cmp	sl, #2
   16788:	beq	1692c <__assert_fail@plt+0x5518>
   1678c:	cmp	sl, #5
   16790:	beq	1693c <__assert_fail@plt+0x5528>
   16794:	mov	fp, #0
   16798:	mov	r5, fp
   1679c:	b	169f0 <__assert_fail@plt+0x55dc>
   167a0:	cmp	r7, #92	; 0x5c
   167a4:	beq	16ac8 <__assert_fail@plt+0x56b4>
   167a8:	bls	166c4 <__assert_fail@plt+0x52b0>
   167ac:	ldr	r5, [sp, #52]	; 0x34
   167b0:	mov	fp, #0
   167b4:	b	169f0 <__assert_fail@plt+0x55dc>
   167b8:	cmp	r7, #122	; 0x7a
   167bc:	bhi	167dc <__assert_fail@plt+0x53c8>
   167c0:	cmp	r7, #97	; 0x61
   167c4:	bcs	167ac <__assert_fail@plt+0x5398>
   167c8:	cmp	r7, #95	; 0x5f
   167cc:	beq	167ac <__assert_fail@plt+0x5398>
   167d0:	cmp	r7, #96	; 0x60
   167d4:	bne	16628 <__assert_fail@plt+0x5214>
   167d8:	b	166c4 <__assert_fail@plt+0x52b0>
   167dc:	cmp	r7, #124	; 0x7c
   167e0:	beq	166c4 <__assert_fail@plt+0x52b0>
   167e4:	bcc	16b74 <__assert_fail@plt+0x5760>
   167e8:	cmp	r7, #125	; 0x7d
   167ec:	beq	16b74 <__assert_fail@plt+0x5760>
   167f0:	cmp	r7, #126	; 0x7e
   167f4:	bne	16628 <__assert_fail@plt+0x5214>
   167f8:	ldr	r3, [sp, #28]
   167fc:	cmp	r3, #0
   16800:	bne	16934 <__assert_fail@plt+0x5520>
   16804:	ldr	r5, [sp, #52]	; 0x34
   16808:	cmp	sl, #2
   1680c:	movne	fp, #0
   16810:	andeq	fp, r6, #1
   16814:	cmp	fp, #0
   16818:	beq	169f0 <__assert_fail@plt+0x55dc>
   1681c:	b	166a8 <__assert_fail@plt+0x5294>
   16820:	mov	r3, #98	; 0x62
   16824:	ldr	r2, [sp, #24]
   16828:	cmp	r2, #0
   1682c:	beq	16934 <__assert_fail@plt+0x5520>
   16830:	mov	r7, r3
   16834:	mov	r5, #0
   16838:	b	16a48 <__assert_fail@plt+0x5634>
   1683c:	ldr	r3, [sp, #24]
   16840:	cmp	r3, #0
   16844:	beq	16910 <__assert_fail@plt+0x54fc>
   16848:	cmp	r6, #0
   1684c:	bne	16578 <__assert_fail@plt+0x5164>
   16850:	ldr	r3, [sp, #48]	; 0x30
   16854:	eor	r2, r3, #1
   16858:	cmp	sl, #2
   1685c:	movne	r2, #0
   16860:	andeq	r2, r2, #1
   16864:	cmp	r2, #0
   16868:	moveq	r3, r4
   1686c:	beq	168a4 <__assert_fail@plt+0x5490>
   16870:	cmp	r9, r4
   16874:	movhi	r3, #39	; 0x27
   16878:	strbhi	r3, [r8, r4]
   1687c:	add	r3, r4, #1
   16880:	cmp	r9, r3
   16884:	movhi	r1, #36	; 0x24
   16888:	strbhi	r1, [r8, r3]
   1688c:	add	r3, r4, #2
   16890:	cmp	r9, r3
   16894:	movhi	r1, #39	; 0x27
   16898:	strbhi	r1, [r8, r3]
   1689c:	add	r3, r4, #3
   168a0:	str	r2, [sp, #48]	; 0x30
   168a4:	cmp	r9, r3
   168a8:	movhi	r2, #92	; 0x5c
   168ac:	strbhi	r2, [r8, r3]
   168b0:	cmp	fp, #0
   168b4:	add	r4, r3, #1
   168b8:	beq	16e48 <__assert_fail@plt+0x5a34>
   168bc:	ldr	r2, [sp, #28]
   168c0:	ldr	r1, [sp, #36]	; 0x24
   168c4:	add	r2, r2, #1
   168c8:	cmp	r1, r2
   168cc:	bls	16908 <__assert_fail@plt+0x54f4>
   168d0:	ldr	r1, [sp, #44]	; 0x2c
   168d4:	mov	r7, #48	; 0x30
   168d8:	ldrb	r2, [r1, r2]
   168dc:	sub	r2, r2, #48	; 0x30
   168e0:	cmp	r2, #9
   168e4:	movhi	r5, r6
   168e8:	bhi	169f0 <__assert_fail@plt+0x55dc>
   168ec:	cmp	r9, r4
   168f0:	add	r2, r3, #2
   168f4:	strbhi	r7, [r8, r4]
   168f8:	cmp	r9, r2
   168fc:	add	r4, r3, #3
   16900:	movhi	r1, #48	; 0x30
   16904:	strbhi	r1, [r8, r2]
   16908:	mov	r5, r6
   1690c:	b	16e50 <__assert_fail@plt+0x5a3c>
   16910:	ldr	r3, [sp, #148]	; 0x94
   16914:	tst	r3, #1
   16918:	ldreq	r5, [sp, #24]
   1691c:	beq	16e5c <__assert_fail@plt+0x5a48>
   16920:	ldr	r3, [sp, #28]
   16924:	add	r3, r3, #1
   16928:	b	162c8 <__assert_fail@plt+0x4eb4>
   1692c:	cmp	r6, #0
   16930:	bne	1657c <__assert_fail@plt+0x5168>
   16934:	mov	r5, #0
   16938:	b	167b0 <__assert_fail@plt+0x539c>
   1693c:	ldr	r3, [sp, #148]	; 0x94
   16940:	tst	r3, #4
   16944:	beq	16934 <__assert_fail@plt+0x5520>
   16948:	ldr	r3, [sp, #28]
   1694c:	add	r2, r3, #2
   16950:	ldr	r3, [sp, #36]	; 0x24
   16954:	cmp	r3, r2
   16958:	bls	16934 <__assert_fail@plt+0x5520>
   1695c:	ldr	r3, [sp, #44]	; 0x2c
   16960:	ldr	r1, [sp, #28]
   16964:	add	r3, r3, r1
   16968:	ldrb	r0, [r3, #1]
   1696c:	cmp	r0, #63	; 0x3f
   16970:	bne	16934 <__assert_fail@plt+0x5520>
   16974:	ldr	r3, [sp, #44]	; 0x2c
   16978:	ldrb	r1, [r3, r2]
   1697c:	sub	r3, r1, #33	; 0x21
   16980:	uxtb	r3, r3
   16984:	cmp	r3, #29
   16988:	bhi	16e58 <__assert_fail@plt+0x5a44>
   1698c:	mov	ip, #1
   16990:	ldr	r5, [pc, #1428]	; 16f2c <__assert_fail@plt+0x5b18>
   16994:	ands	r5, r5, ip, lsl r3
   16998:	beq	167b0 <__assert_fail@plt+0x539c>
   1699c:	cmp	r6, #0
   169a0:	bne	1657c <__assert_fail@plt+0x5168>
   169a4:	add	r3, r4, #1
   169a8:	cmp	r9, r4
   169ac:	strbhi	r0, [r8, r4]
   169b0:	cmp	r9, r3
   169b4:	movhi	r0, #34	; 0x22
   169b8:	strbhi	r0, [r8, r3]
   169bc:	add	r3, r4, #2
   169c0:	cmp	r9, r3
   169c4:	movhi	r0, #34	; 0x22
   169c8:	strbhi	r0, [r8, r3]
   169cc:	add	r3, r4, #3
   169d0:	cmp	r9, r3
   169d4:	add	r4, r4, #4
   169d8:	mov	r5, r6
   169dc:	mov	fp, r6
   169e0:	mov	r7, r1
   169e4:	movhi	r0, #63	; 0x3f
   169e8:	strbhi	r0, [r8, r3]
   169ec:	str	r2, [sp, #28]
   169f0:	ldr	r3, [sp, #24]
   169f4:	eor	r3, r3, #1
   169f8:	cmp	sl, #2
   169fc:	orreq	r3, r3, #1
   16a00:	eor	r3, r3, #1
   16a04:	orr	r3, r6, r3
   16a08:	tst	r3, #255	; 0xff
   16a0c:	beq	16a3c <__assert_fail@plt+0x5628>
   16a10:	ldr	r3, [sp, #152]	; 0x98
   16a14:	cmp	r3, #0
   16a18:	beq	16a3c <__assert_fail@plt+0x5628>
   16a1c:	lsr	r2, r7, #5
   16a20:	ldr	r1, [sp, #152]	; 0x98
   16a24:	uxtb	r2, r2
   16a28:	and	r3, r7, #31
   16a2c:	ldr	r2, [r1, r2, lsl #2]
   16a30:	lsr	r3, r2, r3
   16a34:	tst	r3, #1
   16a38:	bne	16a48 <__assert_fail@plt+0x5634>
   16a3c:	ldr	r3, [sp, #64]	; 0x40
   16a40:	cmp	r3, #0
   16a44:	beq	16ae0 <__assert_fail@plt+0x56cc>
   16a48:	cmp	r6, #0
   16a4c:	bne	1657c <__assert_fail@plt+0x5168>
   16a50:	ldr	r3, [sp, #48]	; 0x30
   16a54:	eor	r3, r3, #1
   16a58:	cmp	sl, #2
   16a5c:	movne	r3, #0
   16a60:	andeq	r3, r3, #1
   16a64:	cmp	r3, #0
   16a68:	beq	16aa0 <__assert_fail@plt+0x568c>
   16a6c:	cmp	r9, r4
   16a70:	movhi	r2, #39	; 0x27
   16a74:	strbhi	r2, [r8, r4]
   16a78:	add	r2, r4, #1
   16a7c:	cmp	r9, r2
   16a80:	movhi	r1, #36	; 0x24
   16a84:	strbhi	r1, [r8, r2]
   16a88:	add	r2, r4, #2
   16a8c:	cmp	r9, r2
   16a90:	add	r4, r4, #3
   16a94:	movhi	r1, #39	; 0x27
   16a98:	strbhi	r1, [r8, r2]
   16a9c:	str	r3, [sp, #48]	; 0x30
   16aa0:	cmp	r9, r4
   16aa4:	movhi	r3, #92	; 0x5c
   16aa8:	strbhi	r3, [r8, r4]
   16aac:	ldr	fp, [sp, #52]	; 0x34
   16ab0:	add	r4, r4, #1
   16ab4:	b	16ae0 <__assert_fail@plt+0x56cc>
   16ab8:	mov	r3, #116	; 0x74
   16abc:	b	16694 <__assert_fail@plt+0x5280>
   16ac0:	mov	r3, #118	; 0x76
   16ac4:	b	16824 <__assert_fail@plt+0x5410>
   16ac8:	cmp	sl, #2
   16acc:	bne	16b3c <__assert_fail@plt+0x5728>
   16ad0:	cmp	r6, #0
   16ad4:	bne	1657c <__assert_fail@plt+0x5168>
   16ad8:	mov	r5, r6
   16adc:	mov	fp, r6
   16ae0:	ldr	r3, [sp, #48]	; 0x30
   16ae4:	eor	fp, fp, #1
   16ae8:	and	fp, fp, r3
   16aec:	tst	fp, #255	; 0xff
   16af0:	beq	16b1c <__assert_fail@plt+0x5708>
   16af4:	cmp	r9, r4
   16af8:	movhi	r3, #39	; 0x27
   16afc:	strbhi	r3, [r8, r4]
   16b00:	add	r3, r4, #1
   16b04:	cmp	r9, r3
   16b08:	movhi	r2, #39	; 0x27
   16b0c:	add	r4, r4, #2
   16b10:	strbhi	r2, [r8, r3]
   16b14:	mov	r3, #0
   16b18:	str	r3, [sp, #48]	; 0x30
   16b1c:	cmp	r9, r4
   16b20:	strbhi	r7, [r8, r4]
   16b24:	ldr	r3, [sp, #72]	; 0x48
   16b28:	cmp	r5, #0
   16b2c:	moveq	r3, #0
   16b30:	add	r4, r4, #1
   16b34:	str	r3, [sp, #72]	; 0x48
   16b38:	b	16920 <__assert_fail@plt+0x550c>
   16b3c:	ldr	r3, [sp, #24]
   16b40:	and	r3, r3, r6
   16b44:	tst	r5, r3
   16b48:	moveq	r3, r7
   16b4c:	beq	16694 <__assert_fail@plt+0x5280>
   16b50:	mov	fp, #0
   16b54:	mov	r5, fp
   16b58:	b	16ae0 <__assert_fail@plt+0x56cc>
   16b5c:	mov	r3, #110	; 0x6e
   16b60:	b	16694 <__assert_fail@plt+0x5280>
   16b64:	mov	r3, #97	; 0x61
   16b68:	b	16824 <__assert_fail@plt+0x5410>
   16b6c:	mov	r3, #102	; 0x66
   16b70:	b	16824 <__assert_fail@plt+0x5410>
   16b74:	ldr	r3, [sp, #36]	; 0x24
   16b78:	cmn	r3, #1
   16b7c:	bne	16b9c <__assert_fail@plt+0x5788>
   16b80:	ldr	r3, [sp, #44]	; 0x2c
   16b84:	ldrb	r3, [r3, #1]
   16b88:	adds	r3, r3, #0
   16b8c:	movne	r3, #1
   16b90:	cmp	r3, #0
   16b94:	bne	16934 <__assert_fail@plt+0x5520>
   16b98:	b	167f8 <__assert_fail@plt+0x53e4>
   16b9c:	ldr	r3, [sp, #36]	; 0x24
   16ba0:	subs	r3, r3, #1
   16ba4:	b	16b8c <__assert_fail@plt+0x5778>
   16ba8:	mov	r3, #0
   16bac:	str	r3, [sp, #96]	; 0x60
   16bb0:	str	r3, [sp, #100]	; 0x64
   16bb4:	ldr	r3, [sp, #36]	; 0x24
   16bb8:	cmn	r3, #1
   16bbc:	bne	16bcc <__assert_fail@plt+0x57b8>
   16bc0:	ldr	r0, [sp, #44]	; 0x2c
   16bc4:	bl	112b8 <strlen@plt>
   16bc8:	str	r0, [sp, #36]	; 0x24
   16bcc:	ldr	r5, [sp, #52]	; 0x34
   16bd0:	mov	r3, #0
   16bd4:	str	r3, [sp, #56]	; 0x38
   16bd8:	ldr	r3, [sp, #28]
   16bdc:	ldr	r2, [sp, #56]	; 0x38
   16be0:	ldr	r1, [sp, #36]	; 0x24
   16be4:	add	r2, r3, r2
   16be8:	ldr	r3, [sp, #44]	; 0x2c
   16bec:	add	r0, sp, #92	; 0x5c
   16bf0:	add	fp, r3, r2
   16bf4:	sub	r2, r1, r2
   16bf8:	add	r3, sp, #96	; 0x60
   16bfc:	mov	r1, fp
   16c00:	bl	19674 <__assert_fail@plt+0x8260>
   16c04:	subs	r2, r0, #0
   16c08:	beq	16c48 <__assert_fail@plt+0x5834>
   16c0c:	cmn	r2, #1
   16c10:	beq	16e20 <__assert_fail@plt+0x5a0c>
   16c14:	cmn	r2, #2
   16c18:	bne	16d90 <__assert_fail@plt+0x597c>
   16c1c:	ldr	r2, [sp, #56]	; 0x38
   16c20:	ldr	r3, [sp, #28]
   16c24:	add	r3, r3, r2
   16c28:	ldr	r2, [sp, #36]	; 0x24
   16c2c:	cmp	r2, r3
   16c30:	bls	16e20 <__assert_fail@plt+0x5a0c>
   16c34:	ldr	r3, [sp, #80]	; 0x50
   16c38:	ldr	r2, [sp, #56]	; 0x38
   16c3c:	ldrb	r5, [r3, r2]
   16c40:	cmp	r5, #0
   16c44:	bne	16d80 <__assert_fail@plt+0x596c>
   16c48:	ldr	r3, [sp, #56]	; 0x38
   16c4c:	cmp	r3, #1
   16c50:	bls	16658 <__assert_fail@plt+0x5244>
   16c54:	ldr	r2, [sp, #56]	; 0x38
   16c58:	ldr	r3, [sp, #28]
   16c5c:	mov	fp, #0
   16c60:	add	r3, r3, r2
   16c64:	ldr	r2, [sp, #24]
   16c68:	str	r3, [sp, #52]	; 0x34
   16c6c:	eor	r3, r5, #1
   16c70:	and	r3, r3, r2
   16c74:	mov	ip, #92	; 0x5c
   16c78:	uxtb	r3, r3
   16c7c:	mov	r2, #39	; 0x27
   16c80:	cmp	r3, #0
   16c84:	beq	16e28 <__assert_fail@plt+0x5a14>
   16c88:	cmp	r6, #0
   16c8c:	bne	16578 <__assert_fail@plt+0x5164>
   16c90:	ldr	r1, [sp, #48]	; 0x30
   16c94:	eor	r1, r1, #1
   16c98:	cmp	sl, #2
   16c9c:	movne	r1, #0
   16ca0:	andeq	r1, r1, #1
   16ca4:	cmp	r1, #0
   16ca8:	beq	16cd8 <__assert_fail@plt+0x58c4>
   16cac:	add	r0, r4, #1
   16cb0:	cmp	r9, r4
   16cb4:	strbhi	r2, [r8, r4]
   16cb8:	cmp	r9, r0
   16cbc:	movhi	lr, #36	; 0x24
   16cc0:	strbhi	lr, [r8, r0]
   16cc4:	add	r0, r4, #2
   16cc8:	add	r4, r4, #3
   16ccc:	cmp	r9, r0
   16cd0:	strbhi	r2, [r8, r0]
   16cd4:	str	r1, [sp, #48]	; 0x30
   16cd8:	add	r0, r4, #1
   16cdc:	cmp	r9, r4
   16ce0:	strbhi	ip, [r8, r4]
   16ce4:	cmp	r9, r0
   16ce8:	lsrhi	r1, r7, #6
   16cec:	addhi	r1, r1, #48	; 0x30
   16cf0:	strbhi	r1, [r8, r0]
   16cf4:	add	r0, r4, #2
   16cf8:	cmp	r9, r0
   16cfc:	lsrhi	r1, r7, #3
   16d00:	and	r7, r7, #7
   16d04:	andhi	r1, r1, #7
   16d08:	add	r4, r4, #3
   16d0c:	add	r7, r7, #48	; 0x30
   16d10:	mov	fp, r3
   16d14:	addhi	r1, r1, #48	; 0x30
   16d18:	strbhi	r1, [r8, r0]
   16d1c:	ldr	r1, [sp, #28]
   16d20:	ldr	r0, [sp, #52]	; 0x34
   16d24:	add	r1, r1, #1
   16d28:	cmp	r0, r1
   16d2c:	bls	16ae0 <__assert_fail@plt+0x56cc>
   16d30:	ldr	lr, [sp, #48]	; 0x30
   16d34:	eor	r0, fp, #1
   16d38:	and	r0, r0, lr
   16d3c:	tst	r0, #255	; 0xff
   16d40:	beq	16d64 <__assert_fail@plt+0x5950>
   16d44:	add	r0, r4, #1
   16d48:	cmp	r9, r4
   16d4c:	strbhi	r2, [r8, r4]
   16d50:	cmp	r9, r0
   16d54:	add	r4, r4, #2
   16d58:	strbhi	r2, [r8, r0]
   16d5c:	mov	r0, #0
   16d60:	str	r0, [sp, #48]	; 0x30
   16d64:	ldr	r0, [sp, #44]	; 0x2c
   16d68:	cmp	r9, r4
   16d6c:	strbhi	r7, [r8, r4]
   16d70:	str	r1, [sp, #28]
   16d74:	add	r4, r4, #1
   16d78:	ldrb	r7, [r0, r1]
   16d7c:	b	16c80 <__assert_fail@plt+0x586c>
   16d80:	ldr	r3, [sp, #56]	; 0x38
   16d84:	add	r3, r3, #1
   16d88:	str	r3, [sp, #56]	; 0x38
   16d8c:	b	16c1c <__assert_fail@plt+0x5808>
   16d90:	cmp	sl, #2
   16d94:	movne	r3, #0
   16d98:	andeq	r3, r6, #1
   16d9c:	cmp	r3, #0
   16da0:	movne	r1, #1
   16da4:	bne	16e00 <__assert_fail@plt+0x59ec>
   16da8:	ldr	r0, [sp, #92]	; 0x5c
   16dac:	str	r2, [sp, #84]	; 0x54
   16db0:	bl	111c8 <iswprint@plt>
   16db4:	ldr	r3, [sp, #56]	; 0x38
   16db8:	ldr	r2, [sp, #84]	; 0x54
   16dbc:	add	r3, r3, r2
   16dc0:	str	r3, [sp, #56]	; 0x38
   16dc4:	cmp	r0, #0
   16dc8:	add	r0, sp, #96	; 0x60
   16dcc:	moveq	r5, #0
   16dd0:	bl	1115c <mbsinit@plt>
   16dd4:	cmp	r0, #0
   16dd8:	beq	16bd8 <__assert_fail@plt+0x57c4>
   16ddc:	b	16c48 <__assert_fail@plt+0x5834>
   16de0:	ldrb	r3, [fp, r1]
   16de4:	cmp	r3, #94	; 0x5e
   16de8:	beq	166a8 <__assert_fail@plt+0x5294>
   16dec:	bhi	16e0c <__assert_fail@plt+0x59f8>
   16df0:	sub	r3, r3, #91	; 0x5b
   16df4:	cmp	r3, #1
   16df8:	bls	166a8 <__assert_fail@plt+0x5294>
   16dfc:	add	r1, r1, #1
   16e00:	cmp	r1, r2
   16e04:	bne	16de0 <__assert_fail@plt+0x59cc>
   16e08:	b	16da8 <__assert_fail@plt+0x5994>
   16e0c:	cmp	r3, #96	; 0x60
   16e10:	beq	166a8 <__assert_fail@plt+0x5294>
   16e14:	cmp	r3, #124	; 0x7c
   16e18:	bne	16dfc <__assert_fail@plt+0x59e8>
   16e1c:	b	166a8 <__assert_fail@plt+0x5294>
   16e20:	mov	r5, #0
   16e24:	b	16c48 <__assert_fail@plt+0x5834>
   16e28:	ldr	r1, [sp, #64]	; 0x40
   16e2c:	cmp	r1, #0
   16e30:	beq	16d1c <__assert_fail@plt+0x5908>
   16e34:	cmp	r9, r4
   16e38:	strbhi	ip, [r8, r4]
   16e3c:	str	r3, [sp, #64]	; 0x40
   16e40:	add	r4, r4, #1
   16e44:	b	16d1c <__assert_fail@plt+0x5908>
   16e48:	mov	r5, fp
   16e4c:	ldr	fp, [sp, #24]
   16e50:	mov	r7, #48	; 0x30
   16e54:	b	169f0 <__assert_fail@plt+0x55dc>
   16e58:	mov	r5, #0
   16e5c:	mov	fp, r5
   16e60:	b	169f0 <__assert_fail@plt+0x55dc>
   16e64:	ldr	r3, [sp, #36]	; 0x24
   16e68:	ldr	r2, [sp, #28]
   16e6c:	subs	r3, r3, r2
   16e70:	movne	r3, #1
   16e74:	b	162ec <__assert_fail@plt+0x4ed8>
   16e78:	ldr	r3, [sp, #60]	; 0x3c
   16e7c:	clz	r7, r9
   16e80:	cmp	r3, #0
   16e84:	lsr	r7, r7, #5
   16e88:	moveq	r7, #0
   16e8c:	cmp	r7, #0
   16e90:	mov	r5, r3
   16e94:	bne	1624c <__assert_fail@plt+0x4e38>
   16e98:	ldr	r3, [sp, #68]	; 0x44
   16e9c:	ldr	r2, [sp, #40]	; 0x28
   16ea0:	cmp	r2, #0
   16ea4:	moveq	r3, #0
   16ea8:	andne	r3, r3, #1
   16eac:	cmp	r3, #0
   16eb0:	movne	r3, r2
   16eb4:	subne	r2, r3, #1
   16eb8:	bne	16ee8 <__assert_fail@plt+0x5ad4>
   16ebc:	cmp	r9, r4
   16ec0:	movhi	r3, #0
   16ec4:	strbhi	r3, [r8, r4]
   16ec8:	mov	r0, r4
   16ecc:	add	sp, sp, #108	; 0x6c
   16ed0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ed4:	mov	r3, r2
   16ed8:	b	16e9c <__assert_fail@plt+0x5a88>
   16edc:	cmp	r9, r4
   16ee0:	strbhi	r3, [r8, r4]
   16ee4:	add	r4, r4, #1
   16ee8:	ldrb	r3, [r2, #1]!
   16eec:	cmp	r3, #0
   16ef0:	bne	16edc <__assert_fail@plt+0x5ac8>
   16ef4:	b	16ebc <__assert_fail@plt+0x5aa8>
   16ef8:	ldr	r3, [pc, #32]	; 16f20 <__assert_fail@plt+0x5b0c>
   16efc:	mov	r6, #1
   16f00:	str	r6, [sp, #24]
   16f04:	str	r6, [sp, #32]
   16f08:	str	r3, [sp, #40]	; 0x28
   16f0c:	mov	r4, #0
   16f10:	mov	sl, #5
   16f14:	b	162bc <__assert_fail@plt+0x4ea8>
   16f18:	mov	r6, #1
   16f1c:	b	164b0 <__assert_fail@plt+0x509c>
   16f20:	andeq	fp, r1, r3, asr #12
   16f24:	andeq	fp, r1, r5, asr #12
   16f28:	andeq	fp, r1, r4, lsl sl
   16f2c:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   16f30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f34:	sub	sp, sp, #52	; 0x34
   16f38:	mov	r6, r0
   16f3c:	mov	r5, r3
   16f40:	mov	r8, r1
   16f44:	mov	r9, r2
   16f48:	bl	112e8 <__errno_location@plt>
   16f4c:	ldr	r7, [pc, #380]	; 170d0 <__assert_fail@plt+0x5cbc>
   16f50:	cmn	r6, #-2147483647	; 0x80000001
   16f54:	ldr	r4, [r7]
   16f58:	ldr	r3, [r0]
   16f5c:	str	r0, [sp, #24]
   16f60:	str	r3, [sp, #32]
   16f64:	movne	r3, #0
   16f68:	moveq	r3, #1
   16f6c:	orrs	r3, r3, r6, lsr #31
   16f70:	beq	16f78 <__assert_fail@plt+0x5b64>
   16f74:	bl	113f0 <abort@plt>
   16f78:	ldr	r2, [r7, #4]
   16f7c:	cmp	r6, r2
   16f80:	blt	16ff0 <__assert_fail@plt+0x5bdc>
   16f84:	add	r1, sp, #48	; 0x30
   16f88:	add	sl, r7, #8
   16f8c:	str	r2, [r1, #-4]!
   16f90:	cmp	r4, sl
   16f94:	mov	r3, #8
   16f98:	sub	r2, r6, r2
   16f9c:	movne	r0, r4
   16fa0:	str	r3, [sp]
   16fa4:	add	r2, r2, #1
   16fa8:	mvn	r3, #-2147483648	; 0x80000000
   16fac:	moveq	r0, #0
   16fb0:	bl	18190 <__assert_fail@plt+0x6d7c>
   16fb4:	cmp	r4, sl
   16fb8:	ldr	r2, [sp, #44]	; 0x2c
   16fbc:	mov	fp, r0
   16fc0:	str	r0, [r7]
   16fc4:	ldmeq	r4, {r0, r1}
   16fc8:	mov	r4, fp
   16fcc:	stmeq	fp, {r0, r1}
   16fd0:	ldr	r0, [r7, #4]
   16fd4:	mov	r1, #0
   16fd8:	sub	r2, r2, r0
   16fdc:	add	r0, fp, r0, lsl #3
   16fe0:	lsl	r2, r2, #3
   16fe4:	bl	1130c <memset@plt>
   16fe8:	ldr	r3, [sp, #44]	; 0x2c
   16fec:	str	r3, [r7, #4]
   16ff0:	ldr	r3, [r5, #4]
   16ff4:	add	sl, r4, r6, lsl #3
   16ff8:	orr	r3, r3, #1
   16ffc:	str	r3, [sp, #28]
   17000:	add	r3, r5, #8
   17004:	str	r3, [sp, #36]	; 0x24
   17008:	ldr	r3, [r5, #44]	; 0x2c
   1700c:	ldr	fp, [r4, r6, lsl #3]
   17010:	ldr	r7, [sl, #4]
   17014:	str	r3, [sp, #16]
   17018:	ldr	r3, [r5, #40]	; 0x28
   1701c:	mov	r2, r8
   17020:	str	r3, [sp, #12]
   17024:	add	r3, r5, #8
   17028:	str	r3, [sp, #8]
   1702c:	ldr	r3, [sp, #28]
   17030:	mov	r1, fp
   17034:	str	r3, [sp, #4]
   17038:	ldr	r3, [r5]
   1703c:	mov	r0, r7
   17040:	str	r3, [sp]
   17044:	mov	r3, r9
   17048:	bl	161fc <__assert_fail@plt+0x4de8>
   1704c:	cmp	fp, r0
   17050:	bhi	170b8 <__assert_fail@plt+0x5ca4>
   17054:	ldr	r3, [pc, #120]	; 170d4 <__assert_fail@plt+0x5cc0>
   17058:	add	fp, r0, #1
   1705c:	cmp	r7, r3
   17060:	str	fp, [r4, r6, lsl #3]
   17064:	beq	17070 <__assert_fail@plt+0x5c5c>
   17068:	mov	r0, r7
   1706c:	bl	14624 <__assert_fail@plt+0x3210>
   17070:	mov	r0, fp
   17074:	bl	18048 <__assert_fail@plt+0x6c34>
   17078:	ldr	r3, [r5, #44]	; 0x2c
   1707c:	mov	r2, r8
   17080:	mov	r1, fp
   17084:	str	r0, [sl, #4]
   17088:	str	r3, [sp, #16]
   1708c:	ldr	r3, [r5, #40]	; 0x28
   17090:	mov	r7, r0
   17094:	str	r3, [sp, #12]
   17098:	add	r3, r5, #8
   1709c:	str	r3, [sp, #8]
   170a0:	ldr	r3, [sp, #28]
   170a4:	str	r3, [sp, #4]
   170a8:	ldr	r3, [r5]
   170ac:	str	r3, [sp]
   170b0:	mov	r3, r9
   170b4:	bl	161fc <__assert_fail@plt+0x4de8>
   170b8:	ldr	r3, [sp, #24]
   170bc:	ldr	r2, [sp, #32]
   170c0:	mov	r0, r7
   170c4:	str	r2, [r3]
   170c8:	add	sp, sp, #52	; 0x34
   170cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170d0:	andeq	ip, r2, r8, lsl #3
   170d4:			; <UNDEFINED> instruction: 0x0002c2b4
   170d8:	push	{r4, r5, r6, lr}
   170dc:	mov	r5, r0
   170e0:	bl	112e8 <__errno_location@plt>
   170e4:	cmp	r5, #0
   170e8:	mov	r1, #48	; 0x30
   170ec:	ldr	r6, [r0]
   170f0:	mov	r4, r0
   170f4:	ldr	r0, [pc, #12]	; 17108 <__assert_fail@plt+0x5cf4>
   170f8:	movne	r0, r5
   170fc:	bl	18424 <__assert_fail@plt+0x7010>
   17100:	str	r6, [r4]
   17104:	pop	{r4, r5, r6, pc}
   17108:			; <UNDEFINED> instruction: 0x0002c3b4
   1710c:	ldr	r3, [pc, #12]	; 17120 <__assert_fail@plt+0x5d0c>
   17110:	cmp	r0, #0
   17114:	moveq	r0, r3
   17118:	ldr	r0, [r0]
   1711c:	bx	lr
   17120:			; <UNDEFINED> instruction: 0x0002c3b4
   17124:	ldr	r3, [pc, #12]	; 17138 <__assert_fail@plt+0x5d24>
   17128:	cmp	r0, #0
   1712c:	moveq	r0, r3
   17130:	str	r1, [r0]
   17134:	bx	lr
   17138:			; <UNDEFINED> instruction: 0x0002c3b4
   1713c:	ldr	r3, [pc, #52]	; 17178 <__assert_fail@plt+0x5d64>
   17140:	cmp	r0, #0
   17144:	moveq	r0, r3
   17148:	add	r3, r0, #8
   1714c:	push	{lr}		; (str lr, [sp, #-4]!)
   17150:	lsr	lr, r1, #5
   17154:	and	r1, r1, #31
   17158:	ldr	ip, [r3, lr, lsl #2]
   1715c:	lsr	r0, ip, r1
   17160:	eor	r2, r2, r0
   17164:	and	r2, r2, #1
   17168:	and	r0, r0, #1
   1716c:	eor	r1, ip, r2, lsl r1
   17170:	str	r1, [r3, lr, lsl #2]
   17174:	pop	{pc}		; (ldr pc, [sp], #4)
   17178:			; <UNDEFINED> instruction: 0x0002c3b4
   1717c:	ldr	r3, [pc, #16]	; 17194 <__assert_fail@plt+0x5d80>
   17180:	cmp	r0, #0
   17184:	movne	r3, r0
   17188:	ldr	r0, [r3, #4]
   1718c:	str	r1, [r3, #4]
   17190:	bx	lr
   17194:			; <UNDEFINED> instruction: 0x0002c3b4
   17198:	ldr	r3, [pc, #44]	; 171cc <__assert_fail@plt+0x5db8>
   1719c:	cmp	r0, #0
   171a0:	moveq	r0, r3
   171a4:	mov	r3, #10
   171a8:	cmp	r2, #0
   171ac:	cmpne	r1, #0
   171b0:	str	r3, [r0]
   171b4:	bne	171c0 <__assert_fail@plt+0x5dac>
   171b8:	push	{r4, lr}
   171bc:	bl	113f0 <abort@plt>
   171c0:	str	r1, [r0, #40]	; 0x28
   171c4:	str	r2, [r0, #44]	; 0x2c
   171c8:	bx	lr
   171cc:			; <UNDEFINED> instruction: 0x0002c3b4
   171d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   171d4:	sub	sp, sp, #24
   171d8:	mov	sl, r3
   171dc:	ldr	r4, [sp, #56]	; 0x38
   171e0:	ldr	r3, [pc, #100]	; 1724c <__assert_fail@plt+0x5e38>
   171e4:	cmp	r4, #0
   171e8:	moveq	r4, r3
   171ec:	mov	r7, r0
   171f0:	mov	r8, r1
   171f4:	mov	r9, r2
   171f8:	bl	112e8 <__errno_location@plt>
   171fc:	ldr	r3, [r4, #44]	; 0x2c
   17200:	mov	r2, r9
   17204:	mov	r1, r8
   17208:	ldr	r6, [r0]
   1720c:	str	r3, [sp, #16]
   17210:	ldr	r3, [r4, #40]	; 0x28
   17214:	mov	r5, r0
   17218:	str	r3, [sp, #12]
   1721c:	add	r3, r4, #8
   17220:	str	r3, [sp, #8]
   17224:	ldr	r3, [r4, #4]
   17228:	mov	r0, r7
   1722c:	str	r3, [sp, #4]
   17230:	ldr	r3, [r4]
   17234:	str	r3, [sp]
   17238:	mov	r3, sl
   1723c:	bl	161fc <__assert_fail@plt+0x4de8>
   17240:	str	r6, [r5]
   17244:	add	sp, sp, #24
   17248:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1724c:			; <UNDEFINED> instruction: 0x0002c3b4
   17250:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17254:	cmp	r3, #0
   17258:	sub	sp, sp, #44	; 0x2c
   1725c:	ldr	r4, [pc, #188]	; 17320 <__assert_fail@plt+0x5f0c>
   17260:	mov	r6, r2
   17264:	movne	r4, r3
   17268:	mov	sl, r1
   1726c:	mov	r9, r0
   17270:	bl	112e8 <__errno_location@plt>
   17274:	ldr	r5, [r4, #4]
   17278:	add	fp, r4, #8
   1727c:	cmp	r6, #0
   17280:	orreq	r5, r5, #1
   17284:	mov	r1, #0
   17288:	mov	r2, r9
   1728c:	ldr	r3, [r0]
   17290:	mov	r8, r0
   17294:	str	r3, [sp, #28]
   17298:	ldr	r3, [r4, #44]	; 0x2c
   1729c:	mov	r0, r1
   172a0:	str	r3, [sp, #16]
   172a4:	ldr	r3, [r4, #40]	; 0x28
   172a8:	stmib	sp, {r5, fp}
   172ac:	str	r3, [sp, #12]
   172b0:	ldr	r3, [r4]
   172b4:	str	r3, [sp]
   172b8:	mov	r3, sl
   172bc:	bl	161fc <__assert_fail@plt+0x4de8>
   172c0:	add	r1, r0, #1
   172c4:	mov	r7, r0
   172c8:	mov	r0, r1
   172cc:	str	r1, [sp, #36]	; 0x24
   172d0:	bl	18048 <__assert_fail@plt+0x6c34>
   172d4:	ldr	r3, [r4, #44]	; 0x2c
   172d8:	mov	r2, r9
   172dc:	str	r3, [sp, #16]
   172e0:	ldr	r3, [r4, #40]	; 0x28
   172e4:	stmib	sp, {r5, fp}
   172e8:	str	r3, [sp, #12]
   172ec:	ldr	r3, [r4]
   172f0:	ldr	r1, [sp, #36]	; 0x24
   172f4:	str	r3, [sp]
   172f8:	mov	r3, sl
   172fc:	str	r0, [sp, #32]
   17300:	bl	161fc <__assert_fail@plt+0x4de8>
   17304:	ldr	r3, [sp, #28]
   17308:	cmp	r6, #0
   1730c:	str	r3, [r8]
   17310:	ldr	r0, [sp, #32]
   17314:	strne	r7, [r6]
   17318:	add	sp, sp, #44	; 0x2c
   1731c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17320:			; <UNDEFINED> instruction: 0x0002c3b4
   17324:	mov	r3, r2
   17328:	mov	r2, #0
   1732c:	b	17250 <__assert_fail@plt+0x5e3c>
   17330:	push	{r4, r5, r6, r7, r8, lr}
   17334:	mov	r6, #1
   17338:	ldr	r4, [pc, #104]	; 173a8 <__assert_fail@plt+0x5f94>
   1733c:	ldr	r5, [r4]
   17340:	add	r7, r5, #12
   17344:	ldr	r3, [r4, #4]
   17348:	add	r7, r7, #8
   1734c:	cmp	r6, r3
   17350:	blt	17398 <__assert_fail@plt+0x5f84>
   17354:	ldr	r0, [r5, #4]
   17358:	ldr	r6, [pc, #76]	; 173ac <__assert_fail@plt+0x5f98>
   1735c:	cmp	r0, r6
   17360:	beq	17374 <__assert_fail@plt+0x5f60>
   17364:	bl	14624 <__assert_fail@plt+0x3210>
   17368:	mov	r3, #256	; 0x100
   1736c:	str	r3, [r4, #8]
   17370:	str	r6, [r4, #12]
   17374:	ldr	r6, [pc, #52]	; 173b0 <__assert_fail@plt+0x5f9c>
   17378:	cmp	r5, r6
   1737c:	beq	1738c <__assert_fail@plt+0x5f78>
   17380:	mov	r0, r5
   17384:	bl	14624 <__assert_fail@plt+0x3210>
   17388:	str	r6, [r4]
   1738c:	mov	r3, #1
   17390:	str	r3, [r4, #4]
   17394:	pop	{r4, r5, r6, r7, r8, pc}
   17398:	ldr	r0, [r7, #-8]
   1739c:	bl	14624 <__assert_fail@plt+0x3210>
   173a0:	add	r6, r6, #1
   173a4:	b	17344 <__assert_fail@plt+0x5f30>
   173a8:	andeq	ip, r2, r8, lsl #3
   173ac:			; <UNDEFINED> instruction: 0x0002c2b4
   173b0:	muleq	r2, r0, r1
   173b4:	ldr	r3, [pc, #4]	; 173c0 <__assert_fail@plt+0x5fac>
   173b8:	mvn	r2, #0
   173bc:	b	16f30 <__assert_fail@plt+0x5b1c>
   173c0:			; <UNDEFINED> instruction: 0x0002c3b4
   173c4:	ldr	r3, [pc]	; 173cc <__assert_fail@plt+0x5fb8>
   173c8:	b	16f30 <__assert_fail@plt+0x5b1c>
   173cc:			; <UNDEFINED> instruction: 0x0002c3b4
   173d0:	mov	r1, r0
   173d4:	mov	r0, #0
   173d8:	b	173b4 <__assert_fail@plt+0x5fa0>
   173dc:	mov	r2, r1
   173e0:	mov	r1, r0
   173e4:	mov	r0, #0
   173e8:	b	173c4 <__assert_fail@plt+0x5fb0>
   173ec:	push	{r4, r5, lr}
   173f0:	sub	sp, sp, #52	; 0x34
   173f4:	mov	r5, r2
   173f8:	mov	r4, r0
   173fc:	mov	r0, sp
   17400:	bl	160b8 <__assert_fail@plt+0x4ca4>
   17404:	mov	r3, sp
   17408:	mvn	r2, #0
   1740c:	mov	r1, r5
   17410:	mov	r0, r4
   17414:	bl	16f30 <__assert_fail@plt+0x5b1c>
   17418:	add	sp, sp, #52	; 0x34
   1741c:	pop	{r4, r5, pc}
   17420:	push	{r4, r5, r6, lr}
   17424:	sub	sp, sp, #48	; 0x30
   17428:	mov	r5, r2
   1742c:	mov	r6, r3
   17430:	mov	r4, r0
   17434:	mov	r0, sp
   17438:	bl	160b8 <__assert_fail@plt+0x4ca4>
   1743c:	mov	r3, sp
   17440:	mov	r2, r6
   17444:	mov	r1, r5
   17448:	mov	r0, r4
   1744c:	bl	16f30 <__assert_fail@plt+0x5b1c>
   17450:	add	sp, sp, #48	; 0x30
   17454:	pop	{r4, r5, r6, pc}
   17458:	mov	r2, r1
   1745c:	mov	r1, r0
   17460:	mov	r0, #0
   17464:	b	173ec <__assert_fail@plt+0x5fd8>
   17468:	mov	r3, r2
   1746c:	mov	r2, r1
   17470:	mov	r1, r0
   17474:	mov	r0, #0
   17478:	b	17420 <__assert_fail@plt+0x600c>
   1747c:	push	{r4, r5, r6, lr}
   17480:	mov	r4, r0
   17484:	ldr	lr, [pc, #80]	; 174dc <__assert_fail@plt+0x60c8>
   17488:	mov	r5, r1
   1748c:	mov	r6, r2
   17490:	ldm	lr!, {r0, r1, r2, r3}
   17494:	sub	sp, sp, #48	; 0x30
   17498:	mov	ip, sp
   1749c:	stmia	ip!, {r0, r1, r2, r3}
   174a0:	ldm	lr!, {r0, r1, r2, r3}
   174a4:	stmia	ip!, {r0, r1, r2, r3}
   174a8:	ldm	lr, {r0, r1, r2, r3}
   174ac:	stm	ip, {r0, r1, r2, r3}
   174b0:	mov	r1, r6
   174b4:	mov	r2, #1
   174b8:	mov	r0, sp
   174bc:	bl	1713c <__assert_fail@plt+0x5d28>
   174c0:	mov	r3, sp
   174c4:	mov	r2, r5
   174c8:	mov	r1, r4
   174cc:	mov	r0, #0
   174d0:	bl	16f30 <__assert_fail@plt+0x5b1c>
   174d4:	add	sp, sp, #48	; 0x30
   174d8:	pop	{r4, r5, r6, pc}
   174dc:			; <UNDEFINED> instruction: 0x0002c3b4
   174e0:	mov	r2, r1
   174e4:	mvn	r1, #0
   174e8:	b	1747c <__assert_fail@plt+0x6068>
   174ec:	mov	r1, #58	; 0x3a
   174f0:	b	174e0 <__assert_fail@plt+0x60cc>
   174f4:	mov	r2, #58	; 0x3a
   174f8:	b	1747c <__assert_fail@plt+0x6068>
   174fc:	push	{r4, r5, lr}
   17500:	sub	sp, sp, #100	; 0x64
   17504:	mov	r4, r0
   17508:	mov	r0, sp
   1750c:	mov	r5, r2
   17510:	bl	160b8 <__assert_fail@plt+0x4ca4>
   17514:	mov	ip, sp
   17518:	add	lr, sp, #48	; 0x30
   1751c:	ldm	ip!, {r0, r1, r2, r3}
   17520:	stmia	lr!, {r0, r1, r2, r3}
   17524:	ldm	ip!, {r0, r1, r2, r3}
   17528:	stmia	lr!, {r0, r1, r2, r3}
   1752c:	ldm	ip, {r0, r1, r2, r3}
   17530:	stm	lr, {r0, r1, r2, r3}
   17534:	mov	r2, #1
   17538:	mov	r1, #58	; 0x3a
   1753c:	add	r0, sp, #48	; 0x30
   17540:	bl	1713c <__assert_fail@plt+0x5d28>
   17544:	add	r3, sp, #48	; 0x30
   17548:	mvn	r2, #0
   1754c:	mov	r1, r5
   17550:	mov	r0, r4
   17554:	bl	16f30 <__assert_fail@plt+0x5b1c>
   17558:	add	sp, sp, #100	; 0x64
   1755c:	pop	{r4, r5, pc}
   17560:	push	{r4, r5, r6, r7, lr}
   17564:	mov	r4, r0
   17568:	ldr	lr, [pc, #84]	; 175c4 <__assert_fail@plt+0x61b0>
   1756c:	mov	r6, r1
   17570:	mov	r7, r2
   17574:	mov	r5, r3
   17578:	ldm	lr!, {r0, r1, r2, r3}
   1757c:	sub	sp, sp, #52	; 0x34
   17580:	mov	ip, sp
   17584:	stmia	ip!, {r0, r1, r2, r3}
   17588:	ldm	lr!, {r0, r1, r2, r3}
   1758c:	stmia	ip!, {r0, r1, r2, r3}
   17590:	ldm	lr, {r0, r1, r2, r3}
   17594:	stm	ip, {r0, r1, r2, r3}
   17598:	mov	r2, r7
   1759c:	mov	r1, r6
   175a0:	mov	r0, sp
   175a4:	bl	17198 <__assert_fail@plt+0x5d84>
   175a8:	mov	r3, sp
   175ac:	ldr	r2, [sp, #72]	; 0x48
   175b0:	mov	r1, r5
   175b4:	mov	r0, r4
   175b8:	bl	16f30 <__assert_fail@plt+0x5b1c>
   175bc:	add	sp, sp, #52	; 0x34
   175c0:	pop	{r4, r5, r6, r7, pc}
   175c4:			; <UNDEFINED> instruction: 0x0002c3b4
   175c8:	mvn	ip, #0
   175cc:	push	{r0, r1, r2, lr}
   175d0:	str	ip, [sp]
   175d4:	bl	17560 <__assert_fail@plt+0x614c>
   175d8:	add	sp, sp, #12
   175dc:	pop	{pc}		; (ldr pc, [sp], #4)
   175e0:	mov	r3, r2
   175e4:	mov	r2, r1
   175e8:	mov	r1, r0
   175ec:	mov	r0, #0
   175f0:	b	175c8 <__assert_fail@plt+0x61b4>
   175f4:	push	{r0, r1, r2, lr}
   175f8:	str	r3, [sp]
   175fc:	mov	r3, r2
   17600:	mov	r2, r1
   17604:	mov	r1, r0
   17608:	mov	r0, #0
   1760c:	bl	17560 <__assert_fail@plt+0x614c>
   17610:	add	sp, sp, #12
   17614:	pop	{pc}		; (ldr pc, [sp], #4)
   17618:	ldr	r3, [pc]	; 17620 <__assert_fail@plt+0x620c>
   1761c:	b	16f30 <__assert_fail@plt+0x5b1c>
   17620:	muleq	r2, r8, r1
   17624:	mov	r2, r1
   17628:	mov	r1, r0
   1762c:	mov	r0, #0
   17630:	b	17618 <__assert_fail@plt+0x6204>
   17634:	mvn	r2, #0
   17638:	b	17618 <__assert_fail@plt+0x6204>
   1763c:	mov	r1, r0
   17640:	mov	r0, #0
   17644:	b	17634 <__assert_fail@plt+0x6220>
   17648:	push	{r4, r5, r6, lr}
   1764c:	mov	r5, r1
   17650:	mov	r1, #0
   17654:	mov	r4, r2
   17658:	bl	11378 <setlocale@plt>
   1765c:	subs	r6, r0, #0
   17660:	bne	17674 <__assert_fail@plt+0x6260>
   17664:	cmp	r4, #0
   17668:	strbne	r6, [r5]
   1766c:	mov	r0, #22
   17670:	pop	{r4, r5, r6, pc}
   17674:	bl	112b8 <strlen@plt>
   17678:	cmp	r4, r0
   1767c:	bls	17698 <__assert_fail@plt+0x6284>
   17680:	add	r2, r0, #1
   17684:	mov	r1, r6
   17688:	mov	r0, r5
   1768c:	bl	11150 <memcpy@plt>
   17690:	mov	r0, #0
   17694:	pop	{r4, r5, r6, pc}
   17698:	cmp	r4, #0
   1769c:	beq	176bc <__assert_fail@plt+0x62a8>
   176a0:	sub	r4, r4, #1
   176a4:	mov	r2, r4
   176a8:	mov	r1, r6
   176ac:	mov	r0, r5
   176b0:	bl	11150 <memcpy@plt>
   176b4:	mov	r3, #0
   176b8:	strb	r3, [r5, r4]
   176bc:	mov	r0, #34	; 0x22
   176c0:	pop	{r4, r5, r6, pc}
   176c4:	mov	r1, #0
   176c8:	b	11378 <setlocale@plt>
   176cc:	push	{r4, lr}
   176d0:	ldrb	r3, [r0, #4]
   176d4:	cmp	r3, #0
   176d8:	beq	17708 <__assert_fail@plt+0x62f4>
   176dc:	add	r1, r0, #5
   176e0:	mov	r2, #1
   176e4:	ldr	r0, [pc, #40]	; 17714 <__assert_fail@plt+0x6300>
   176e8:	bl	112d0 <setenv@plt>
   176ec:	cmp	r0, #0
   176f0:	bne	17700 <__assert_fail@plt+0x62ec>
   176f4:	bl	111d4 <tzset@plt>
   176f8:	mov	r0, #1
   176fc:	pop	{r4, pc}
   17700:	mov	r0, #0
   17704:	pop	{r4, pc}
   17708:	ldr	r0, [pc, #4]	; 17714 <__assert_fail@plt+0x6300>
   1770c:	bl	113cc <unsetenv@plt>
   17710:	b	176ec <__assert_fail@plt+0x62d8>
   17714:	andeq	fp, r1, r7, ror r3
   17718:	push	{r4, r5, r6, r7, r8, lr}
   1771c:	subs	r7, r0, #0
   17720:	beq	17790 <__assert_fail@plt+0x637c>
   17724:	bl	112b8 <strlen@plt>
   17728:	add	r5, r0, #1
   1772c:	cmp	r5, #58	; 0x3a
   17730:	addhi	r0, r0, #2
   17734:	bhi	1773c <__assert_fail@plt+0x6328>
   17738:	mov	r0, #59	; 0x3b
   1773c:	add	r0, r0, #8
   17740:	bic	r0, r0, #3
   17744:	bl	19370 <__assert_fail@plt+0x7f5c>
   17748:	subs	r4, r0, #0
   1774c:	beq	17788 <__assert_fail@plt+0x6374>
   17750:	mov	r6, #0
   17754:	cmp	r7, r6
   17758:	movne	r3, #1
   1775c:	moveq	r3, r6
   17760:	str	r6, [r4]
   17764:	strb	r3, [r4, #4]
   17768:	strb	r6, [r4, #5]
   1776c:	beq	17788 <__assert_fail@plt+0x6374>
   17770:	add	r3, r4, #5
   17774:	mov	r2, r5
   17778:	mov	r1, r7
   1777c:	mov	r0, r3
   17780:	bl	11150 <memcpy@plt>
   17784:	strb	r6, [r0, r5]
   17788:	mov	r0, r4
   1778c:	pop	{r4, r5, r6, r7, r8, pc}
   17790:	mov	r5, r7
   17794:	b	17738 <__assert_fail@plt+0x6324>
   17798:	push	{r4, r5, r6, r7, r8, lr}
   1779c:	ldr	r5, [r1, #40]	; 0x28
   177a0:	cmp	r5, #0
   177a4:	beq	17898 <__assert_fail@plt+0x6484>
   177a8:	cmp	r1, r5
   177ac:	mov	r6, r0
   177b0:	mov	r7, r1
   177b4:	bhi	177c4 <__assert_fail@plt+0x63b0>
   177b8:	add	r3, r1, #44	; 0x2c
   177bc:	cmp	r5, r3
   177c0:	bcc	17898 <__assert_fail@plt+0x6484>
   177c4:	ldrb	r3, [r5]
   177c8:	cmp	r3, #0
   177cc:	addne	r4, r6, #5
   177d0:	bne	17810 <__assert_fail@plt+0x63fc>
   177d4:	ldr	r4, [pc, #196]	; 178a0 <__assert_fail@plt+0x648c>
   177d8:	b	17894 <__assert_fail@plt+0x6480>
   177dc:	ldrb	r3, [r6, #4]
   177e0:	cmp	r3, #0
   177e4:	beq	1783c <__assert_fail@plt+0x6428>
   177e8:	mov	r0, r4
   177ec:	bl	112b8 <strlen@plt>
   177f0:	add	r0, r0, #1
   177f4:	ldrb	r3, [r4, r0]!
   177f8:	cmp	r3, #0
   177fc:	bne	17810 <__assert_fail@plt+0x63fc>
   17800:	ldr	r3, [r6]
   17804:	cmp	r3, #0
   17808:	addne	r4, r3, #5
   1780c:	movne	r6, r3
   17810:	mov	r1, r5
   17814:	mov	r0, r4
   17818:	bl	110e4 <strcmp@plt>
   1781c:	cmp	r0, #0
   17820:	beq	17894 <__assert_fail@plt+0x6480>
   17824:	ldrb	r3, [r4]
   17828:	cmp	r3, #0
   1782c:	bne	177e8 <__assert_fail@plt+0x63d4>
   17830:	add	r3, r6, #5
   17834:	cmp	r4, r3
   17838:	beq	177dc <__assert_fail@plt+0x63c8>
   1783c:	mov	r0, r5
   17840:	bl	112b8 <strlen@plt>
   17844:	add	r3, r6, #64	; 0x40
   17848:	sub	r3, r3, r4
   1784c:	add	r8, r0, #1
   17850:	cmp	r8, r3
   17854:	blt	1787c <__assert_fail@plt+0x6468>
   17858:	mov	r0, r5
   1785c:	bl	17718 <__assert_fail@plt+0x6304>
   17860:	cmp	r0, #0
   17864:	movne	r3, #0
   17868:	str	r0, [r6]
   1786c:	addne	r4, r0, #5
   17870:	strbne	r3, [r0, #4]
   17874:	bne	17894 <__assert_fail@plt+0x6480>
   17878:	pop	{r4, r5, r6, r7, r8, pc}
   1787c:	mov	r2, r8
   17880:	mov	r1, r5
   17884:	mov	r0, r4
   17888:	bl	11150 <memcpy@plt>
   1788c:	mov	r3, #0
   17890:	strb	r3, [r4, r8]
   17894:	str	r4, [r7, #40]	; 0x28
   17898:	mov	r0, #1
   1789c:	pop	{r4, r5, r6, r7, r8, pc}
   178a0:	ldrdeq	sl, [r1], -fp
   178a4:	cmp	r0, #1
   178a8:	bne	178b0 <__assert_fail@plt+0x649c>
   178ac:	bx	lr
   178b0:	cmp	r0, #0
   178b4:	bne	178bc <__assert_fail@plt+0x64a8>
   178b8:	bx	lr
   178bc:	push	{r4, lr}
   178c0:	ldr	r4, [r0]
   178c4:	bl	14624 <__assert_fail@plt+0x3210>
   178c8:	cmp	r4, #0
   178cc:	mov	r0, r4
   178d0:	bne	178c0 <__assert_fail@plt+0x64ac>
   178d4:	pop	{r4, pc}
   178d8:	push	{r4, r5, r6, r7, r8, lr}
   178dc:	mov	r6, r0
   178e0:	ldr	r0, [pc, #128]	; 17968 <__assert_fail@plt+0x6554>
   178e4:	bl	11234 <getenv@plt>
   178e8:	ldrb	r4, [r6, #4]
   178ec:	subs	r5, r0, #0
   178f0:	beq	17960 <__assert_fail@plt+0x654c>
   178f4:	cmp	r4, #0
   178f8:	beq	17910 <__assert_fail@plt+0x64fc>
   178fc:	mov	r1, r5
   17900:	add	r0, r6, #5
   17904:	bl	110e4 <strcmp@plt>
   17908:	clz	r4, r0
   1790c:	lsr	r4, r4, #5
   17910:	cmp	r4, #0
   17914:	movne	r5, #1
   17918:	bne	17958 <__assert_fail@plt+0x6544>
   1791c:	mov	r0, r5
   17920:	bl	17718 <__assert_fail@plt+0x6304>
   17924:	subs	r5, r0, #0
   17928:	beq	17958 <__assert_fail@plt+0x6544>
   1792c:	mov	r0, r6
   17930:	bl	176cc <__assert_fail@plt+0x62b8>
   17934:	cmp	r0, #0
   17938:	bne	17958 <__assert_fail@plt+0x6544>
   1793c:	bl	112e8 <__errno_location@plt>
   17940:	ldr	r7, [r0]
   17944:	mov	r6, r0
   17948:	mov	r0, r5
   1794c:	mov	r5, r4
   17950:	bl	178a4 <__assert_fail@plt+0x6490>
   17954:	str	r7, [r6]
   17958:	mov	r0, r5
   1795c:	pop	{r4, r5, r6, r7, r8, pc}
   17960:	clz	r4, r4
   17964:	b	1790c <__assert_fail@plt+0x64f8>
   17968:	andeq	fp, r1, r7, ror r3
   1796c:	cmp	r0, #1
   17970:	push	{r4, r5, r6, r7, r8, lr}
   17974:	moveq	r4, r0
   17978:	beq	179a8 <__assert_fail@plt+0x6594>
   1797c:	mov	r7, r0
   17980:	bl	112e8 <__errno_location@plt>
   17984:	ldr	r6, [r0]
   17988:	mov	r5, r0
   1798c:	mov	r0, r7
   17990:	bl	176cc <__assert_fail@plt+0x62b8>
   17994:	subs	r4, r0, #0
   17998:	mov	r0, r7
   1799c:	ldreq	r6, [r5]
   179a0:	bl	178a4 <__assert_fail@plt+0x6490>
   179a4:	str	r6, [r5]
   179a8:	mov	r0, r4
   179ac:	pop	{r4, r5, r6, r7, r8, pc}
   179b0:	push	{r4, r5, r6, r7, r8, lr}
   179b4:	subs	r7, r0, #0
   179b8:	mov	r4, r1
   179bc:	mov	r5, r2
   179c0:	bne	179d4 <__assert_fail@plt+0x65c0>
   179c4:	mov	r0, r4
   179c8:	mov	r1, r2
   179cc:	pop	{r4, r5, r6, r7, r8, lr}
   179d0:	b	110d8 <gmtime_r@plt>
   179d4:	bl	178d8 <__assert_fail@plt+0x64c4>
   179d8:	subs	r6, r0, #0
   179dc:	beq	17a18 <__assert_fail@plt+0x6604>
   179e0:	mov	r0, r4
   179e4:	mov	r1, r5
   179e8:	bl	111a4 <localtime_r@plt>
   179ec:	subs	r4, r0, #0
   179f0:	beq	17a04 <__assert_fail@plt+0x65f0>
   179f4:	mov	r1, r5
   179f8:	mov	r0, r7
   179fc:	bl	17798 <__assert_fail@plt+0x6384>
   17a00:	mov	r4, r0
   17a04:	mov	r0, r6
   17a08:	bl	1796c <__assert_fail@plt+0x6558>
   17a0c:	and	r4, r4, #1
   17a10:	tst	r0, r4
   17a14:	bne	17a1c <__assert_fail@plt+0x6608>
   17a18:	mov	r5, #0
   17a1c:	mov	r0, r5
   17a20:	pop	{r4, r5, r6, r7, r8, pc}
   17a24:	push	{r4, r5, r6, r7, lr}
   17a28:	subs	r6, r0, #0
   17a2c:	sub	sp, sp, #52	; 0x34
   17a30:	mov	r4, r1
   17a34:	bne	17a50 <__assert_fail@plt+0x663c>
   17a38:	mov	r0, r1
   17a3c:	bl	1139c <timegm@plt>
   17a40:	mov	r5, r0
   17a44:	mov	r0, r5
   17a48:	add	sp, sp, #52	; 0x34
   17a4c:	pop	{r4, r5, r6, r7, pc}
   17a50:	bl	178d8 <__assert_fail@plt+0x64c4>
   17a54:	subs	r7, r0, #0
   17a58:	beq	17b00 <__assert_fail@plt+0x66ec>
   17a5c:	ldr	r3, [r4]
   17a60:	add	r0, sp, #4
   17a64:	str	r3, [sp, #4]
   17a68:	ldr	r3, [r4, #4]
   17a6c:	str	r3, [sp, #8]
   17a70:	ldr	r3, [r4, #8]
   17a74:	str	r3, [sp, #12]
   17a78:	ldr	r3, [r4, #12]
   17a7c:	str	r3, [sp, #16]
   17a80:	ldr	r3, [r4, #16]
   17a84:	str	r3, [sp, #20]
   17a88:	ldr	r3, [r4, #20]
   17a8c:	str	r3, [sp, #24]
   17a90:	mvn	r3, #0
   17a94:	str	r3, [sp, #32]
   17a98:	ldr	r3, [r4, #32]
   17a9c:	str	r3, [sp, #36]	; 0x24
   17aa0:	bl	11108 <mktime@plt>
   17aa4:	ldr	r3, [sp, #32]
   17aa8:	cmp	r3, #0
   17aac:	movlt	r6, #0
   17ab0:	mov	r5, r0
   17ab4:	blt	17ac8 <__assert_fail@plt+0x66b4>
   17ab8:	mov	r0, r6
   17abc:	add	r1, sp, #4
   17ac0:	bl	17798 <__assert_fail@plt+0x6384>
   17ac4:	mov	r6, r0
   17ac8:	mov	r0, r7
   17acc:	bl	1796c <__assert_fail@plt+0x6558>
   17ad0:	and	r6, r6, #1
   17ad4:	tst	r0, r6
   17ad8:	beq	17b00 <__assert_fail@plt+0x66ec>
   17adc:	add	lr, sp, #4
   17ae0:	mov	ip, r4
   17ae4:	ldm	lr!, {r0, r1, r2, r3}
   17ae8:	stmia	ip!, {r0, r1, r2, r3}
   17aec:	ldm	lr!, {r0, r1, r2, r3}
   17af0:	stmia	ip!, {r0, r1, r2, r3}
   17af4:	ldm	lr, {r0, r1, r2}
   17af8:	stm	ip, {r0, r1, r2}
   17afc:	b	17a44 <__assert_fail@plt+0x6630>
   17b00:	mvn	r5, #0
   17b04:	b	17a44 <__assert_fail@plt+0x6630>
   17b08:	mov	r2, #3
   17b0c:	mov	r1, #0
   17b10:	b	1947c <__assert_fail@plt+0x8068>
   17b14:	push	{r4, r5, r6, lr}
   17b18:	sub	sp, sp, #32
   17b1c:	cmp	r1, #0
   17b20:	mov	r5, r0
   17b24:	ldr	r4, [sp, #48]	; 0x30
   17b28:	ldr	r6, [sp, #52]	; 0x34
   17b2c:	beq	17be0 <__assert_fail@plt+0x67cc>
   17b30:	stm	sp, {r2, r3}
   17b34:	mov	r3, r1
   17b38:	ldr	r2, [pc, #860]	; 17e9c <__assert_fail@plt+0x6a88>
   17b3c:	mov	r1, #1
   17b40:	bl	1133c <__fprintf_chk@plt>
   17b44:	mov	r2, #5
   17b48:	ldr	r1, [pc, #848]	; 17ea0 <__assert_fail@plt+0x6a8c>
   17b4c:	mov	r0, #0
   17b50:	bl	1118c <dcgettext@plt>
   17b54:	ldr	r3, [pc, #840]	; 17ea4 <__assert_fail@plt+0x6a90>
   17b58:	ldr	r2, [pc, #840]	; 17ea8 <__assert_fail@plt+0x6a94>
   17b5c:	str	r3, [sp]
   17b60:	mov	r1, #1
   17b64:	mov	r3, r0
   17b68:	mov	r0, r5
   17b6c:	bl	1133c <__fprintf_chk@plt>
   17b70:	mov	r1, r5
   17b74:	mov	r0, #10
   17b78:	bl	11174 <fputc_unlocked@plt>
   17b7c:	mov	r2, #5
   17b80:	ldr	r1, [pc, #804]	; 17eac <__assert_fail@plt+0x6a98>
   17b84:	mov	r0, #0
   17b88:	bl	1118c <dcgettext@plt>
   17b8c:	mov	r1, #1
   17b90:	ldr	r3, [pc, #792]	; 17eb0 <__assert_fail@plt+0x6a9c>
   17b94:	mov	r2, r0
   17b98:	mov	r0, r5
   17b9c:	bl	1133c <__fprintf_chk@plt>
   17ba0:	mov	r1, r5
   17ba4:	mov	r0, #10
   17ba8:	bl	11174 <fputc_unlocked@plt>
   17bac:	cmp	r6, #9
   17bb0:	ldrls	pc, [pc, r6, lsl #2]
   17bb4:	b	17e90 <__assert_fail@plt+0x6a7c>
   17bb8:	ldrdeq	r7, [r1], -r0
   17bbc:	strdeq	r7, [r1], -r8
   17bc0:	andeq	r7, r1, r4, lsr #24
   17bc4:	andeq	r7, r1, r8, asr ip
   17bc8:	muleq	r1, r4, ip
   17bcc:	ldrdeq	r7, [r1], -r8
   17bd0:	andeq	r7, r1, r0, lsr #26
   17bd4:	andeq	r7, r1, r0, ror sp
   17bd8:	andeq	r7, r1, r8, asr #27
   17bdc:	andeq	r7, r1, r8, lsr #28
   17be0:	str	r3, [sp]
   17be4:	mov	r1, #1
   17be8:	mov	r3, r2
   17bec:	ldr	r2, [pc, #704]	; 17eb4 <__assert_fail@plt+0x6aa0>
   17bf0:	bl	1133c <__fprintf_chk@plt>
   17bf4:	b	17b44 <__assert_fail@plt+0x6730>
   17bf8:	mov	r2, #5
   17bfc:	ldr	r1, [pc, #692]	; 17eb8 <__assert_fail@plt+0x6aa4>
   17c00:	mov	r0, #0
   17c04:	bl	1118c <dcgettext@plt>
   17c08:	ldr	r3, [r4]
   17c0c:	mov	r1, #1
   17c10:	mov	r2, r0
   17c14:	mov	r0, r5
   17c18:	add	sp, sp, #32
   17c1c:	pop	{r4, r5, r6, lr}
   17c20:	b	1133c <__fprintf_chk@plt>
   17c24:	mov	r2, #5
   17c28:	ldr	r1, [pc, #652]	; 17ebc <__assert_fail@plt+0x6aa8>
   17c2c:	mov	r0, #0
   17c30:	bl	1118c <dcgettext@plt>
   17c34:	ldr	r3, [r4, #4]
   17c38:	mov	r1, #1
   17c3c:	str	r3, [sp, #48]	; 0x30
   17c40:	ldr	r3, [r4]
   17c44:	mov	r2, r0
   17c48:	mov	r0, r5
   17c4c:	add	sp, sp, #32
   17c50:	pop	{r4, r5, r6, lr}
   17c54:	b	1133c <__fprintf_chk@plt>
   17c58:	mov	r2, #5
   17c5c:	ldr	r1, [pc, #604]	; 17ec0 <__assert_fail@plt+0x6aac>
   17c60:	mov	r0, #0
   17c64:	bl	1118c <dcgettext@plt>
   17c68:	ldr	r3, [r4, #8]
   17c6c:	mov	r1, #1
   17c70:	str	r3, [sp, #52]	; 0x34
   17c74:	ldr	r3, [r4, #4]
   17c78:	str	r3, [sp, #48]	; 0x30
   17c7c:	ldr	r3, [r4]
   17c80:	mov	r2, r0
   17c84:	mov	r0, r5
   17c88:	add	sp, sp, #32
   17c8c:	pop	{r4, r5, r6, lr}
   17c90:	b	1133c <__fprintf_chk@plt>
   17c94:	mov	r2, #5
   17c98:	ldr	r1, [pc, #548]	; 17ec4 <__assert_fail@plt+0x6ab0>
   17c9c:	mov	r0, #0
   17ca0:	bl	1118c <dcgettext@plt>
   17ca4:	ldr	r3, [r4, #12]
   17ca8:	mov	r1, #1
   17cac:	str	r3, [sp, #8]
   17cb0:	ldr	r3, [r4, #8]
   17cb4:	str	r3, [sp, #4]
   17cb8:	ldr	r3, [r4, #4]
   17cbc:	str	r3, [sp]
   17cc0:	ldr	r3, [r4]
   17cc4:	mov	r2, r0
   17cc8:	mov	r0, r5
   17ccc:	bl	1133c <__fprintf_chk@plt>
   17cd0:	add	sp, sp, #32
   17cd4:	pop	{r4, r5, r6, pc}
   17cd8:	mov	r2, #5
   17cdc:	ldr	r1, [pc, #484]	; 17ec8 <__assert_fail@plt+0x6ab4>
   17ce0:	mov	r0, #0
   17ce4:	bl	1118c <dcgettext@plt>
   17ce8:	ldr	r3, [r4, #16]
   17cec:	mov	r1, #1
   17cf0:	str	r3, [sp, #12]
   17cf4:	ldr	r3, [r4, #12]
   17cf8:	str	r3, [sp, #8]
   17cfc:	ldr	r3, [r4, #8]
   17d00:	str	r3, [sp, #4]
   17d04:	ldr	r3, [r4, #4]
   17d08:	str	r3, [sp]
   17d0c:	ldr	r3, [r4]
   17d10:	mov	r2, r0
   17d14:	mov	r0, r5
   17d18:	bl	1133c <__fprintf_chk@plt>
   17d1c:	b	17cd0 <__assert_fail@plt+0x68bc>
   17d20:	mov	r2, #5
   17d24:	ldr	r1, [pc, #416]	; 17ecc <__assert_fail@plt+0x6ab8>
   17d28:	mov	r0, #0
   17d2c:	bl	1118c <dcgettext@plt>
   17d30:	ldr	r3, [r4, #20]
   17d34:	mov	r1, #1
   17d38:	str	r3, [sp, #16]
   17d3c:	ldr	r3, [r4, #16]
   17d40:	str	r3, [sp, #12]
   17d44:	ldr	r3, [r4, #12]
   17d48:	str	r3, [sp, #8]
   17d4c:	ldr	r3, [r4, #8]
   17d50:	str	r3, [sp, #4]
   17d54:	ldr	r3, [r4, #4]
   17d58:	str	r3, [sp]
   17d5c:	ldr	r3, [r4]
   17d60:	mov	r2, r0
   17d64:	mov	r0, r5
   17d68:	bl	1133c <__fprintf_chk@plt>
   17d6c:	b	17cd0 <__assert_fail@plt+0x68bc>
   17d70:	mov	r2, #5
   17d74:	ldr	r1, [pc, #340]	; 17ed0 <__assert_fail@plt+0x6abc>
   17d78:	mov	r0, #0
   17d7c:	bl	1118c <dcgettext@plt>
   17d80:	ldr	r3, [r4, #24]
   17d84:	mov	r1, #1
   17d88:	str	r3, [sp, #20]
   17d8c:	ldr	r3, [r4, #20]
   17d90:	str	r3, [sp, #16]
   17d94:	ldr	r3, [r4, #16]
   17d98:	str	r3, [sp, #12]
   17d9c:	ldr	r3, [r4, #12]
   17da0:	str	r3, [sp, #8]
   17da4:	ldr	r3, [r4, #8]
   17da8:	str	r3, [sp, #4]
   17dac:	ldr	r3, [r4, #4]
   17db0:	str	r3, [sp]
   17db4:	ldr	r3, [r4]
   17db8:	mov	r2, r0
   17dbc:	mov	r0, r5
   17dc0:	bl	1133c <__fprintf_chk@plt>
   17dc4:	b	17cd0 <__assert_fail@plt+0x68bc>
   17dc8:	mov	r2, #5
   17dcc:	ldr	r1, [pc, #256]	; 17ed4 <__assert_fail@plt+0x6ac0>
   17dd0:	mov	r0, #0
   17dd4:	bl	1118c <dcgettext@plt>
   17dd8:	ldr	r3, [r4, #28]
   17ddc:	mov	r1, #1
   17de0:	str	r3, [sp, #24]
   17de4:	ldr	r3, [r4, #24]
   17de8:	str	r3, [sp, #20]
   17dec:	ldr	r3, [r4, #20]
   17df0:	str	r3, [sp, #16]
   17df4:	ldr	r3, [r4, #16]
   17df8:	str	r3, [sp, #12]
   17dfc:	ldr	r3, [r4, #12]
   17e00:	str	r3, [sp, #8]
   17e04:	ldr	r3, [r4, #8]
   17e08:	str	r3, [sp, #4]
   17e0c:	ldr	r3, [r4, #4]
   17e10:	str	r3, [sp]
   17e14:	ldr	r3, [r4]
   17e18:	mov	r2, r0
   17e1c:	mov	r0, r5
   17e20:	bl	1133c <__fprintf_chk@plt>
   17e24:	b	17cd0 <__assert_fail@plt+0x68bc>
   17e28:	ldr	r1, [pc, #168]	; 17ed8 <__assert_fail@plt+0x6ac4>
   17e2c:	mov	r2, #5
   17e30:	mov	r0, #0
   17e34:	bl	1118c <dcgettext@plt>
   17e38:	ldr	r3, [r4, #32]
   17e3c:	mov	r1, #1
   17e40:	str	r3, [sp, #28]
   17e44:	ldr	r3, [r4, #28]
   17e48:	str	r3, [sp, #24]
   17e4c:	ldr	r3, [r4, #24]
   17e50:	str	r3, [sp, #20]
   17e54:	ldr	r3, [r4, #20]
   17e58:	str	r3, [sp, #16]
   17e5c:	ldr	r3, [r4, #16]
   17e60:	str	r3, [sp, #12]
   17e64:	ldr	r3, [r4, #12]
   17e68:	str	r3, [sp, #8]
   17e6c:	ldr	r3, [r4, #8]
   17e70:	str	r3, [sp, #4]
   17e74:	ldr	r3, [r4, #4]
   17e78:	str	r3, [sp]
   17e7c:	ldr	r3, [r4]
   17e80:	mov	r2, r0
   17e84:	mov	r0, r5
   17e88:	bl	1133c <__fprintf_chk@plt>
   17e8c:	b	17cd0 <__assert_fail@plt+0x68bc>
   17e90:	mov	r2, #5
   17e94:	ldr	r1, [pc, #64]	; 17edc <__assert_fail@plt+0x6ac8>
   17e98:	b	17e30 <__assert_fail@plt+0x6a1c>
   17e9c:	muleq	r1, r3, r6
   17ea0:	andeq	fp, r1, r6, lsr #13
   17ea4:	andeq	r0, r0, r6, ror #15
   17ea8:	andeq	fp, r1, r4, ror r9
   17eac:	andeq	fp, r1, sl, lsr #13
   17eb0:	andeq	fp, r1, r5, asr r7
   17eb4:	muleq	r1, pc, r6	; <UNPREDICTABLE>
   17eb8:	andeq	fp, r1, r7, ror r7
   17ebc:	andeq	fp, r1, r7, lsl #15
   17ec0:	muleq	r1, lr, r7
   17ec4:			; <UNDEFINED> instruction: 0x0001b7ba
   17ec8:	ldrdeq	fp, [r1], -sl
   17ecc:	strdeq	fp, [r1], -lr
   17ed0:	andeq	fp, r1, r6, lsr #16
   17ed4:	andeq	fp, r1, r2, asr r8
   17ed8:	andeq	fp, r1, r2, lsl #17
   17edc:			; <UNDEFINED> instruction: 0x0001b8b6
   17ee0:	push	{r0, r1, r4, lr}
   17ee4:	mov	ip, #0
   17ee8:	ldr	lr, [sp, #16]
   17eec:	ldr	r4, [lr, ip, lsl #2]
   17ef0:	cmp	r4, #0
   17ef4:	bne	17f0c <__assert_fail@plt+0x6af8>
   17ef8:	str	ip, [sp, #4]
   17efc:	str	lr, [sp]
   17f00:	bl	17b14 <__assert_fail@plt+0x6700>
   17f04:	add	sp, sp, #8
   17f08:	pop	{r4, pc}
   17f0c:	add	ip, ip, #1
   17f10:	b	17eec <__assert_fail@plt+0x6ad8>
   17f14:	push	{r4, r5, lr}
   17f18:	sub	sp, sp, #52	; 0x34
   17f1c:	mov	ip, #0
   17f20:	ldr	r5, [sp, #64]	; 0x40
   17f24:	add	lr, sp, #8
   17f28:	ldr	r4, [r5, ip, lsl #2]
   17f2c:	cmp	r4, #0
   17f30:	str	r4, [lr, ip, lsl #2]
   17f34:	beq	17f44 <__assert_fail@plt+0x6b30>
   17f38:	add	ip, ip, #1
   17f3c:	cmp	ip, #10
   17f40:	bne	17f28 <__assert_fail@plt+0x6b14>
   17f44:	str	ip, [sp, #4]
   17f48:	str	lr, [sp]
   17f4c:	bl	17b14 <__assert_fail@plt+0x6700>
   17f50:	add	sp, sp, #52	; 0x34
   17f54:	pop	{r4, r5, pc}
   17f58:	push	{r3}		; (str r3, [sp, #-4]!)
   17f5c:	push	{r0, r1, r2, r3, lr}
   17f60:	add	r3, sp, #24
   17f64:	str	r3, [sp, #12]
   17f68:	str	r3, [sp]
   17f6c:	ldr	r3, [sp, #20]
   17f70:	bl	17f14 <__assert_fail@plt+0x6b00>
   17f74:	add	sp, sp, #16
   17f78:	pop	{lr}		; (ldr lr, [sp], #4)
   17f7c:	add	sp, sp, #4
   17f80:	bx	lr
   17f84:	ldr	r3, [pc, #116]	; 18000 <__assert_fail@plt+0x6bec>
   17f88:	push	{r4, lr}
   17f8c:	mov	r0, #10
   17f90:	ldr	r1, [r3]
   17f94:	bl	11174 <fputc_unlocked@plt>
   17f98:	mov	r2, #5
   17f9c:	ldr	r1, [pc, #96]	; 18004 <__assert_fail@plt+0x6bf0>
   17fa0:	mov	r0, #0
   17fa4:	bl	1118c <dcgettext@plt>
   17fa8:	ldr	r2, [pc, #88]	; 18008 <__assert_fail@plt+0x6bf4>
   17fac:	mov	r1, r0
   17fb0:	mov	r0, #1
   17fb4:	bl	11318 <__printf_chk@plt>
   17fb8:	mov	r2, #5
   17fbc:	ldr	r1, [pc, #72]	; 1800c <__assert_fail@plt+0x6bf8>
   17fc0:	mov	r0, #0
   17fc4:	bl	1118c <dcgettext@plt>
   17fc8:	ldr	r3, [pc, #64]	; 18010 <__assert_fail@plt+0x6bfc>
   17fcc:	ldr	r2, [pc, #64]	; 18014 <__assert_fail@plt+0x6c00>
   17fd0:	mov	r1, r0
   17fd4:	mov	r0, #1
   17fd8:	bl	11318 <__printf_chk@plt>
   17fdc:	mov	r2, #5
   17fe0:	ldr	r1, [pc, #48]	; 18018 <__assert_fail@plt+0x6c04>
   17fe4:	mov	r0, #0
   17fe8:	bl	1118c <dcgettext@plt>
   17fec:	ldr	r2, [pc, #40]	; 1801c <__assert_fail@plt+0x6c08>
   17ff0:	pop	{r4, lr}
   17ff4:	mov	r1, r0
   17ff8:	mov	r0, #1
   17ffc:	b	11318 <__printf_chk@plt>
   18000:	andeq	ip, r2, r4, ror #3
   18004:	strdeq	fp, [r1], -r2
   18008:	andeq	fp, r1, r6, lsl #18
   1800c:	andeq	fp, r1, ip, lsl r9
   18010:	strdeq	fp, [r1], -r5
   18014:	andeq	fp, r1, sp, lsl r1
   18018:	andeq	fp, r1, r0, lsr r9
   1801c:	andeq	fp, r1, r7, asr r9
   18020:	push	{r4, lr}
   18024:	bl	19370 <__assert_fail@plt+0x7f5c>
   18028:	cmp	r0, #0
   1802c:	popne	{r4, pc}
   18030:	bl	184b4 <__assert_fail@plt+0x70a0>
   18034:	push	{r4, lr}
   18038:	bl	19370 <__assert_fail@plt+0x7f5c>
   1803c:	cmp	r0, #0
   18040:	popne	{r4, pc}
   18044:	bl	184b4 <__assert_fail@plt+0x70a0>
   18048:	b	18020 <__assert_fail@plt+0x6c0c>
   1804c:	push	{r4, r5, r6, lr}
   18050:	mov	r5, r0
   18054:	mov	r4, r1
   18058:	bl	193b0 <__assert_fail@plt+0x7f9c>
   1805c:	cmp	r0, #0
   18060:	popne	{r4, r5, r6, pc}
   18064:	adds	r4, r4, #0
   18068:	movne	r4, #1
   1806c:	cmp	r5, #0
   18070:	orreq	r4, r4, #1
   18074:	cmp	r4, #0
   18078:	popeq	{r4, r5, r6, pc}
   1807c:	bl	184b4 <__assert_fail@plt+0x70a0>
   18080:	push	{r4, lr}
   18084:	cmp	r1, #0
   18088:	orreq	r1, r1, #1
   1808c:	bl	193b0 <__assert_fail@plt+0x7f9c>
   18090:	cmp	r0, #0
   18094:	popne	{r4, pc}
   18098:	bl	184b4 <__assert_fail@plt+0x70a0>
   1809c:	push	{r4, r5, r6, lr}
   180a0:	mov	r6, r0
   180a4:	mov	r5, r1
   180a8:	mov	r4, r2
   180ac:	bl	196c4 <__assert_fail@plt+0x82b0>
   180b0:	cmp	r0, #0
   180b4:	popne	{r4, r5, r6, pc}
   180b8:	cmp	r6, #0
   180bc:	beq	180cc <__assert_fail@plt+0x6cb8>
   180c0:	cmp	r5, #0
   180c4:	cmpne	r4, #0
   180c8:	popeq	{r4, r5, r6, pc}
   180cc:	bl	184b4 <__assert_fail@plt+0x70a0>
   180d0:	b	1809c <__assert_fail@plt+0x6c88>
   180d4:	cmp	r2, #0
   180d8:	cmpne	r1, #0
   180dc:	moveq	r2, #1
   180e0:	moveq	r1, r2
   180e4:	push	{r4, lr}
   180e8:	bl	196c4 <__assert_fail@plt+0x82b0>
   180ec:	cmp	r0, #0
   180f0:	popne	{r4, pc}
   180f4:	bl	184b4 <__assert_fail@plt+0x70a0>
   180f8:	mov	r2, r1
   180fc:	mov	r1, r0
   18100:	mov	r0, #0
   18104:	b	1809c <__assert_fail@plt+0x6c88>
   18108:	mov	r2, r1
   1810c:	mov	r1, r0
   18110:	mov	r0, #0
   18114:	b	180d4 <__assert_fail@plt+0x6cc0>
   18118:	push	{r4, r5, r6, r7, r8, lr}
   1811c:	subs	r7, r0, #0
   18120:	mov	r5, r1
   18124:	mov	r6, r2
   18128:	ldr	r4, [r1]
   1812c:	bne	18168 <__assert_fail@plt+0x6d54>
   18130:	cmp	r4, #0
   18134:	bne	18150 <__assert_fail@plt+0x6d3c>
   18138:	mov	r1, r2
   1813c:	mov	r0, #64	; 0x40
   18140:	bl	19710 <__assert_fail@plt+0x82fc>
   18144:	cmp	r0, #0
   18148:	movne	r4, r0
   1814c:	addeq	r4, r0, #1
   18150:	mov	r2, r6
   18154:	mov	r1, r4
   18158:	mov	r0, r7
   1815c:	bl	1809c <__assert_fail@plt+0x6c88>
   18160:	str	r4, [r5]
   18164:	pop	{r4, r5, r6, r7, r8, pc}
   18168:	lsr	r2, r4, #1
   1816c:	add	r3, r2, #1
   18170:	mvn	r3, r3
   18174:	cmp	r4, r3
   18178:	addls	r4, r4, #1
   1817c:	addls	r4, r4, r2
   18180:	bls	18150 <__assert_fail@plt+0x6d3c>
   18184:	bl	184b4 <__assert_fail@plt+0x70a0>
   18188:	mov	r2, #1
   1818c:	b	18118 <__assert_fail@plt+0x6d04>
   18190:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18194:	mov	sl, r0
   18198:	ldr	r8, [r1]
   1819c:	mov	fp, r1
   181a0:	mov	r5, r2
   181a4:	asrs	r4, r8, #1
   181a8:	mov	r9, r3
   181ac:	ldr	r7, [sp, #48]	; 0x30
   181b0:	bpl	1824c <__assert_fail@plt+0x6e38>
   181b4:	rsb	r2, r4, #-2147483648	; 0x80000000
   181b8:	cmp	r8, r2
   181bc:	movge	r2, #0
   181c0:	movlt	r2, #1
   181c4:	mvn	r3, r9
   181c8:	cmp	r2, #0
   181cc:	lsr	r3, r3, #31
   181d0:	addeq	r4, r4, r8
   181d4:	mvnne	r4, #-2147483648	; 0x80000000
   181d8:	mov	r0, r3
   181dc:	cmp	r9, r4
   181e0:	movge	r0, #0
   181e4:	andlt	r0, r0, #1
   181e8:	cmp	r0, #0
   181ec:	str	r3, [sp, #4]
   181f0:	bne	183c0 <__assert_fail@plt+0x6fac>
   181f4:	cmp	r7, #0
   181f8:	bge	1830c <__assert_fail@plt+0x6ef8>
   181fc:	cmp	r4, #0
   18200:	bge	18264 <__assert_fail@plt+0x6e50>
   18204:	mov	r1, r7
   18208:	mvn	r0, #-2147483648	; 0x80000000
   1820c:	bl	1991c <__assert_fail@plt+0x8508>
   18210:	cmp	r0, r4
   18214:	movle	r0, #0
   18218:	movgt	r0, #1
   1821c:	cmp	r0, #0
   18220:	mvnne	r6, #-2147483648	; 0x80000000
   18224:	beq	18274 <__assert_fail@plt+0x6e60>
   18228:	mov	r1, r7
   1822c:	mov	r0, r6
   18230:	bl	1991c <__assert_fail@plt+0x8508>
   18234:	mov	r1, r7
   18238:	mov	r4, r0
   1823c:	mov	r0, r6
   18240:	bl	19b3c <__assert_fail@plt+0x8728>
   18244:	sub	r1, r6, r1
   18248:	b	18284 <__assert_fail@plt+0x6e70>
   1824c:	mvn	r2, #-2147483648	; 0x80000000
   18250:	sub	r2, r2, r4
   18254:	cmp	r8, r2
   18258:	movle	r2, #0
   1825c:	movgt	r2, #1
   18260:	b	181c4 <__assert_fail@plt+0x6db0>
   18264:	cmn	r7, #1
   18268:	movne	r1, r7
   1826c:	movne	r0, #-2147483648	; 0x80000000
   18270:	bne	183d8 <__assert_fail@plt+0x6fc4>
   18274:	mul	r1, r7, r4
   18278:	cmp	r1, #63	; 0x3f
   1827c:	movle	r6, #64	; 0x40
   18280:	ble	18228 <__assert_fail@plt+0x6e14>
   18284:	cmp	sl, #0
   18288:	sub	r2, r4, r8
   1828c:	streq	sl, [fp]
   18290:	cmp	r2, r5
   18294:	bge	18368 <__assert_fail@plt+0x6f54>
   18298:	cmp	r5, #0
   1829c:	bge	18334 <__assert_fail@plt+0x6f20>
   182a0:	rsb	r2, r5, #-2147483648	; 0x80000000
   182a4:	cmp	r8, r2
   182a8:	movge	r2, #0
   182ac:	movlt	r2, #1
   182b0:	cmp	r2, #0
   182b4:	bne	18308 <__assert_fail@plt+0x6ef4>
   182b8:	ldr	r0, [sp, #4]
   182bc:	add	r5, r8, r5
   182c0:	cmp	r9, r5
   182c4:	movge	r0, #0
   182c8:	andlt	r0, r0, #1
   182cc:	cmp	r0, #0
   182d0:	mov	r4, r5
   182d4:	bne	18308 <__assert_fail@plt+0x6ef4>
   182d8:	cmp	r7, #0
   182dc:	bge	1837c <__assert_fail@plt+0x6f68>
   182e0:	cmp	r5, #0
   182e4:	bge	18354 <__assert_fail@plt+0x6f40>
   182e8:	mov	r1, r7
   182ec:	mvn	r0, #-2147483648	; 0x80000000
   182f0:	bl	1991c <__assert_fail@plt+0x8508>
   182f4:	cmp	r5, r0
   182f8:	movge	r0, #0
   182fc:	movlt	r0, #1
   18300:	cmp	r0, #0
   18304:	beq	18364 <__assert_fail@plt+0x6f50>
   18308:	bl	184b4 <__assert_fail@plt+0x70a0>
   1830c:	beq	18274 <__assert_fail@plt+0x6e60>
   18310:	cmp	r4, #0
   18314:	bge	183d0 <__assert_fail@plt+0x6fbc>
   18318:	cmn	r4, #1
   1831c:	beq	18274 <__assert_fail@plt+0x6e60>
   18320:	mov	r1, r4
   18324:	mov	r0, #-2147483648	; 0x80000000
   18328:	bl	1991c <__assert_fail@plt+0x8508>
   1832c:	cmp	r7, r0
   18330:	b	18214 <__assert_fail@plt+0x6e00>
   18334:	cmp	r8, #0
   18338:	blt	182b8 <__assert_fail@plt+0x6ea4>
   1833c:	mvn	r2, #-2147483648	; 0x80000000
   18340:	sub	r2, r2, r5
   18344:	cmp	r8, r2
   18348:	movle	r2, #0
   1834c:	movgt	r2, #1
   18350:	b	182b0 <__assert_fail@plt+0x6e9c>
   18354:	cmn	r7, #1
   18358:	movne	r1, r7
   1835c:	movne	r0, #-2147483648	; 0x80000000
   18360:	bne	183b4 <__assert_fail@plt+0x6fa0>
   18364:	mul	r1, r5, r7
   18368:	mov	r0, sl
   1836c:	bl	1804c <__assert_fail@plt+0x6c38>
   18370:	str	r4, [fp]
   18374:	add	sp, sp, #12
   18378:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1837c:	beq	18364 <__assert_fail@plt+0x6f50>
   18380:	cmp	r5, #0
   18384:	movge	r1, r7
   18388:	mvnge	r0, #-2147483648	; 0x80000000
   1838c:	bge	183b4 <__assert_fail@plt+0x6fa0>
   18390:	cmn	r5, #1
   18394:	beq	18364 <__assert_fail@plt+0x6f50>
   18398:	mov	r1, r5
   1839c:	mov	r0, #-2147483648	; 0x80000000
   183a0:	bl	1991c <__assert_fail@plt+0x8508>
   183a4:	cmp	r7, r0
   183a8:	movle	r0, #0
   183ac:	movgt	r0, #1
   183b0:	b	18300 <__assert_fail@plt+0x6eec>
   183b4:	bl	1991c <__assert_fail@plt+0x8508>
   183b8:	cmp	r5, r0
   183bc:	b	183a8 <__assert_fail@plt+0x6f94>
   183c0:	cmp	r7, #0
   183c4:	mov	r4, r9
   183c8:	blt	18264 <__assert_fail@plt+0x6e50>
   183cc:	beq	18274 <__assert_fail@plt+0x6e60>
   183d0:	mov	r1, r7
   183d4:	mvn	r0, #-2147483648	; 0x80000000
   183d8:	bl	1991c <__assert_fail@plt+0x8508>
   183dc:	cmp	r0, r4
   183e0:	movge	r0, #0
   183e4:	movlt	r0, #1
   183e8:	b	1821c <__assert_fail@plt+0x6e08>
   183ec:	push	{r4, lr}
   183f0:	bl	19328 <__assert_fail@plt+0x7f14>
   183f4:	cmp	r0, #0
   183f8:	popne	{r4, pc}
   183fc:	bl	184b4 <__assert_fail@plt+0x70a0>
   18400:	mov	r1, #1
   18404:	b	183ec <__assert_fail@plt+0x6fd8>
   18408:	push	{r4, lr}
   1840c:	bl	19328 <__assert_fail@plt+0x7f14>
   18410:	cmp	r0, #0
   18414:	popne	{r4, pc}
   18418:	bl	184b4 <__assert_fail@plt+0x70a0>
   1841c:	mov	r1, #1
   18420:	b	18408 <__assert_fail@plt+0x6ff4>
   18424:	push	{r4, r5, r6, lr}
   18428:	mov	r4, r1
   1842c:	mov	r5, r0
   18430:	mov	r0, r1
   18434:	bl	18020 <__assert_fail@plt+0x6c0c>
   18438:	mov	r2, r4
   1843c:	mov	r1, r5
   18440:	pop	{r4, r5, r6, lr}
   18444:	b	11150 <memcpy@plt>
   18448:	push	{r4, r5, r6, lr}
   1844c:	mov	r4, r1
   18450:	mov	r5, r0
   18454:	mov	r0, r1
   18458:	bl	18034 <__assert_fail@plt+0x6c20>
   1845c:	mov	r2, r4
   18460:	mov	r1, r5
   18464:	pop	{r4, r5, r6, lr}
   18468:	b	11150 <memcpy@plt>
   1846c:	push	{r4, r5, r6, lr}
   18470:	mov	r5, r0
   18474:	add	r0, r1, #1
   18478:	mov	r4, r1
   1847c:	bl	18034 <__assert_fail@plt+0x6c20>
   18480:	mov	r2, #0
   18484:	mov	r1, r5
   18488:	strb	r2, [r0, r4]
   1848c:	mov	r2, r4
   18490:	pop	{r4, r5, r6, lr}
   18494:	b	11150 <memcpy@plt>
   18498:	push	{r4, lr}
   1849c:	mov	r4, r0
   184a0:	bl	112b8 <strlen@plt>
   184a4:	add	r1, r0, #1
   184a8:	mov	r0, r4
   184ac:	pop	{r4, lr}
   184b0:	b	18424 <__assert_fail@plt+0x7010>
   184b4:	ldr	r3, [pc, #44]	; 184e8 <__assert_fail@plt+0x70d4>
   184b8:	push	{r4, lr}
   184bc:	mov	r2, #5
   184c0:	ldr	r1, [pc, #36]	; 184ec <__assert_fail@plt+0x70d8>
   184c4:	mov	r0, #0
   184c8:	ldr	r4, [r3]
   184cc:	bl	1118c <dcgettext@plt>
   184d0:	ldr	r2, [pc, #24]	; 184f0 <__assert_fail@plt+0x70dc>
   184d4:	mov	r1, #0
   184d8:	mov	r3, r0
   184dc:	mov	r0, r4
   184e0:	bl	11228 <error@plt>
   184e4:	bl	113f0 <abort@plt>
   184e8:	andeq	ip, r2, r4, lsl #3
   184ec:	andeq	fp, r1, r3, lsr #19
   184f0:	andeq	fp, r1, r4, ror r5
   184f4:	push	{r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
   184f8:	mov	r9, r3
   184fc:	ldr	r3, [sp, #48]	; 0x30
   18500:	mov	r8, r2
   18504:	str	r3, [sp]
   18508:	mov	r2, r1
   1850c:	add	r3, sp, #8
   18510:	mov	r1, #0
   18514:	mov	r6, r0
   18518:	ldr	r4, [sp, #56]	; 0x38
   1851c:	bl	187a8 <__assert_fail@plt+0x7394>
   18520:	cmp	r0, #0
   18524:	bne	185a4 <__assert_fail@plt+0x7190>
   18528:	ldrd	r0, [sp, #8]
   1852c:	cmp	r0, r8
   18530:	sbcs	r3, r1, r9
   18534:	ldrd	r2, [sp, #40]	; 0x28
   18538:	movlt	ip, #1
   1853c:	movge	ip, #0
   18540:	cmp	r2, r0
   18544:	sbcs	r3, r3, r1
   18548:	movge	r3, ip
   1854c:	orrlt	r3, ip, #1
   18550:	cmp	r3, #0
   18554:	beq	18620 <__assert_fail@plt+0x720c>
   18558:	cmp	r0, #1073741824	; 0x40000000
   1855c:	sbcs	r3, r1, #0
   18560:	blt	18584 <__assert_fail@plt+0x7170>
   18564:	bl	112e8 <__errno_location@plt>
   18568:	mov	r3, #75	; 0x4b
   1856c:	cmp	r4, #0
   18570:	str	r3, [r0]
   18574:	beq	185ec <__assert_fail@plt+0x71d8>
   18578:	bl	112e8 <__errno_location@plt>
   1857c:	ldr	r5, [r0]
   18580:	b	18600 <__assert_fail@plt+0x71ec>
   18584:	mov	r2, #-1073741824	; 0xc0000000
   18588:	mvn	r3, #0
   1858c:	cmp	r0, r2
   18590:	sbcs	r3, r1, r3
   18594:	blt	18564 <__assert_fail@plt+0x7150>
   18598:	bl	112e8 <__errno_location@plt>
   1859c:	mov	r3, #34	; 0x22
   185a0:	b	1856c <__assert_fail@plt+0x7158>
   185a4:	cmp	r0, #1
   185a8:	bne	185d0 <__assert_fail@plt+0x71bc>
   185ac:	bl	112e8 <__errno_location@plt>
   185b0:	mov	r3, #75	; 0x4b
   185b4:	cmp	r4, #0
   185b8:	str	r3, [r0]
   185bc:	bne	185f0 <__assert_fail@plt+0x71dc>
   185c0:	bl	112e8 <__errno_location@plt>
   185c4:	mov	r4, #1
   185c8:	ldr	r5, [r0]
   185cc:	b	18600 <__assert_fail@plt+0x71ec>
   185d0:	cmp	r0, #3
   185d4:	bne	185e4 <__assert_fail@plt+0x71d0>
   185d8:	bl	112e8 <__errno_location@plt>
   185dc:	mov	r3, #0
   185e0:	b	185b4 <__assert_fail@plt+0x71a0>
   185e4:	cmp	r4, #0
   185e8:	bne	185f0 <__assert_fail@plt+0x71dc>
   185ec:	mov	r4, #1
   185f0:	bl	112e8 <__errno_location@plt>
   185f4:	ldr	r5, [r0]
   185f8:	cmp	r5, #22
   185fc:	moveq	r5, #0
   18600:	mov	r0, r6
   18604:	bl	1763c <__assert_fail@plt+0x6228>
   18608:	ldr	r3, [sp, #52]	; 0x34
   1860c:	ldr	r2, [pc, #20]	; 18628 <__assert_fail@plt+0x7214>
   18610:	mov	r1, r5
   18614:	str	r0, [sp]
   18618:	mov	r0, r4
   1861c:	bl	11228 <error@plt>
   18620:	add	sp, sp, #16
   18624:	pop	{r4, r5, r6, r8, r9, pc}
   18628:	andeq	fp, r1, r0, ror r5
   1862c:	push	{r4, r5}
   18630:	mov	r1, #10
   18634:	pop	{r4, r5}
   18638:	b	184f4 <__assert_fail@plt+0x70e0>
   1863c:	push	{r4, r5, r6, r7, r8, lr}
   18640:	subs	r4, r1, #0
   18644:	mov	r5, r0
   18648:	bge	18704 <__assert_fail@plt+0x72f0>
   1864c:	ldrd	r6, [r0]
   18650:	cmp	r6, #0
   18654:	sbcs	r3, r7, #0
   18658:	bge	186b8 <__assert_fail@plt+0x72a4>
   1865c:	asr	r3, r4, #31
   18660:	mov	r2, r4
   18664:	mvn	r0, #0
   18668:	mvn	r1, #-2147483648	; 0x80000000
   1866c:	bl	19b5c <__assert_fail@plt+0x8748>
   18670:	cmp	r6, r0
   18674:	sbcs	r3, r7, r1
   18678:	movlt	r3, #1
   1867c:	movge	r3, #0
   18680:	cmp	r3, #0
   18684:	movne	r2, #0
   18688:	movne	r3, #-2147483648	; 0x80000000
   1868c:	bne	186f8 <__assert_fail@plt+0x72e4>
   18690:	ldr	r2, [r5]
   18694:	asr	r3, r4, #31
   18698:	ldr	r1, [r5, #4]
   1869c:	mul	r3, r3, r2
   186a0:	mov	r0, #0
   186a4:	mla	r1, r4, r1, r3
   186a8:	umull	r2, r3, r2, r4
   186ac:	add	r3, r1, r3
   186b0:	strd	r2, [r5]
   186b4:	pop	{r4, r5, r6, r7, r8, pc}
   186b8:	cmn	r4, #1
   186bc:	moveq	r3, #0
   186c0:	beq	186e8 <__assert_fail@plt+0x72d4>
   186c4:	mov	r2, r4
   186c8:	asr	r3, r4, #31
   186cc:	mov	r0, #0
   186d0:	mov	r1, #-2147483648	; 0x80000000
   186d4:	bl	19b5c <__assert_fail@plt+0x8748>
   186d8:	cmp	r0, r6
   186dc:	sbcs	r3, r1, r7
   186e0:	movlt	r3, #1
   186e4:	movge	r3, #0
   186e8:	cmp	r3, #0
   186ec:	mvnne	r2, #0
   186f0:	mvnne	r3, #-2147483648	; 0x80000000
   186f4:	beq	18690 <__assert_fail@plt+0x727c>
   186f8:	strd	r2, [r5]
   186fc:	mov	r0, #1
   18700:	pop	{r4, r5, r6, r7, r8, pc}
   18704:	beq	18690 <__assert_fail@plt+0x727c>
   18708:	ldrd	r6, [r0]
   1870c:	cmp	r6, #0
   18710:	sbcs	r3, r7, #0
   18714:	bge	18758 <__assert_fail@plt+0x7344>
   18718:	mvn	r3, #0
   1871c:	cmp	r7, r3
   18720:	mvn	r2, #0
   18724:	cmpeq	r6, r2
   18728:	moveq	r3, #0
   1872c:	beq	18680 <__assert_fail@plt+0x726c>
   18730:	mov	r2, r6
   18734:	mov	r3, r7
   18738:	mov	r0, #0
   1873c:	mov	r1, #-2147483648	; 0x80000000
   18740:	bl	19b5c <__assert_fail@plt+0x8748>
   18744:	asr	r3, r4, #31
   18748:	mov	r2, r4
   1874c:	cmp	r0, r4
   18750:	sbcs	r3, r1, r3
   18754:	b	18678 <__assert_fail@plt+0x7264>
   18758:	mov	r2, r4
   1875c:	asr	r3, r4, #31
   18760:	mvn	r0, #0
   18764:	mvn	r1, #-2147483648	; 0x80000000
   18768:	b	186d4 <__assert_fail@plt+0x72c0>
   1876c:	push	{r4, r5, r6, r7, r8, lr}
   18770:	mov	r6, r0
   18774:	mov	r7, r1
   18778:	mov	r5, r2
   1877c:	mov	r4, #0
   18780:	cmp	r5, #0
   18784:	bne	18790 <__assert_fail@plt+0x737c>
   18788:	mov	r0, r4
   1878c:	pop	{r4, r5, r6, r7, r8, pc}
   18790:	mov	r1, r7
   18794:	mov	r0, r6
   18798:	bl	1863c <__assert_fail@plt+0x7228>
   1879c:	sub	r5, r5, #1
   187a0:	orr	r4, r4, r0
   187a4:	b	18780 <__assert_fail@plt+0x736c>
   187a8:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   187ac:	cmp	r2, #36	; 0x24
   187b0:	ldr	r9, [sp, #48]	; 0x30
   187b4:	bls	187cc <__assert_fail@plt+0x73b8>
   187b8:	ldr	r3, [pc, #724]	; 18a94 <__assert_fail@plt+0x7680>
   187bc:	mov	r2, #85	; 0x55
   187c0:	ldr	r1, [pc, #720]	; 18a98 <__assert_fail@plt+0x7684>
   187c4:	ldr	r0, [pc, #720]	; 18a9c <__assert_fail@plt+0x7688>
   187c8:	bl	11414 <__assert_fail@plt>
   187cc:	cmp	r1, #0
   187d0:	mov	r7, r1
   187d4:	mov	r4, r0
   187d8:	addeq	r7, sp, #4
   187dc:	mov	r6, r2
   187e0:	mov	r8, r3
   187e4:	bl	112e8 <__errno_location@plt>
   187e8:	mov	r5, #0
   187ec:	mov	r2, r6
   187f0:	mov	r1, r7
   187f4:	str	r5, [r0]
   187f8:	mov	sl, r0
   187fc:	mov	r0, r4
   18800:	bl	11348 <strtoimax@plt>
   18804:	ldr	r6, [r7]
   18808:	cmp	r4, r6
   1880c:	strd	r0, [sp, #8]
   18810:	bne	18874 <__assert_fail@plt+0x7460>
   18814:	cmp	r9, r5
   18818:	beq	18a8c <__assert_fail@plt+0x7678>
   1881c:	ldrb	r1, [r6]
   18820:	cmp	r1, r5
   18824:	beq	18a8c <__assert_fail@plt+0x7678>
   18828:	mov	r0, r9
   1882c:	bl	112c4 <strchr@plt>
   18830:	cmp	r0, r5
   18834:	beq	18a8c <__assert_fail@plt+0x7678>
   18838:	mov	r2, #1
   1883c:	mov	r3, #0
   18840:	strd	r2, [sp, #8]
   18844:	ldrb	r4, [r6]
   18848:	cmp	r4, #0
   1884c:	beq	1898c <__assert_fail@plt+0x7578>
   18850:	mov	r1, r4
   18854:	mov	r0, r9
   18858:	bl	112c4 <strchr@plt>
   1885c:	cmp	r0, #0
   18860:	bne	188a4 <__assert_fail@plt+0x7490>
   18864:	ldrd	r2, [sp, #8]
   18868:	orr	r5, r5, #2
   1886c:	strd	r2, [r8]
   18870:	b	18898 <__assert_fail@plt+0x7484>
   18874:	ldr	r5, [sl]
   18878:	cmp	r5, #0
   1887c:	beq	1888c <__assert_fail@plt+0x7478>
   18880:	cmp	r5, #34	; 0x22
   18884:	bne	18a8c <__assert_fail@plt+0x7678>
   18888:	mov	r5, #1
   1888c:	cmp	r9, #0
   18890:	bne	18844 <__assert_fail@plt+0x7430>
   18894:	strd	r0, [r8]
   18898:	mov	r0, r5
   1889c:	add	sp, sp, #16
   188a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   188a4:	cmp	r4, #84	; 0x54
   188a8:	beq	188fc <__assert_fail@plt+0x74e8>
   188ac:	bhi	188e4 <__assert_fail@plt+0x74d0>
   188b0:	cmp	r4, #75	; 0x4b
   188b4:	beq	188fc <__assert_fail@plt+0x74e8>
   188b8:	bhi	188d4 <__assert_fail@plt+0x74c0>
   188bc:	cmp	r4, #69	; 0x45
   188c0:	beq	188fc <__assert_fail@plt+0x74e8>
   188c4:	cmp	r4, #71	; 0x47
   188c8:	beq	188fc <__assert_fail@plt+0x74e8>
   188cc:	mov	r6, #1
   188d0:	b	189c0 <__assert_fail@plt+0x75ac>
   188d4:	cmp	r4, #77	; 0x4d
   188d8:	beq	188fc <__assert_fail@plt+0x74e8>
   188dc:	cmp	r4, #80	; 0x50
   188e0:	b	188c8 <__assert_fail@plt+0x74b4>
   188e4:	cmp	r4, #103	; 0x67
   188e8:	beq	188fc <__assert_fail@plt+0x74e8>
   188ec:	bhi	18998 <__assert_fail@plt+0x7584>
   188f0:	sub	r3, r4, #89	; 0x59
   188f4:	cmp	r3, #1
   188f8:	bhi	188cc <__assert_fail@plt+0x74b8>
   188fc:	mov	r1, #48	; 0x30
   18900:	mov	r0, r9
   18904:	bl	112c4 <strchr@plt>
   18908:	cmp	r0, #0
   1890c:	beq	188cc <__assert_fail@plt+0x74b8>
   18910:	ldrb	r3, [r6, #1]
   18914:	cmp	r3, #68	; 0x44
   18918:	beq	1892c <__assert_fail@plt+0x7518>
   1891c:	cmp	r3, #105	; 0x69
   18920:	beq	189b0 <__assert_fail@plt+0x759c>
   18924:	cmp	r3, #66	; 0x42
   18928:	bne	188cc <__assert_fail@plt+0x74b8>
   1892c:	mov	r6, #2
   18930:	mov	r1, #1000	; 0x3e8
   18934:	cmp	r4, #89	; 0x59
   18938:	beq	18a74 <__assert_fail@plt+0x7660>
   1893c:	bhi	189e8 <__assert_fail@plt+0x75d4>
   18940:	cmp	r4, #75	; 0x4b
   18944:	beq	18a28 <__assert_fail@plt+0x7614>
   18948:	bhi	189c8 <__assert_fail@plt+0x75b4>
   1894c:	cmp	r4, #69	; 0x45
   18950:	beq	18a50 <__assert_fail@plt+0x763c>
   18954:	cmp	r4, #71	; 0x47
   18958:	beq	18a5c <__assert_fail@plt+0x7648>
   1895c:	cmp	r4, #66	; 0x42
   18960:	moveq	r1, #1024	; 0x400
   18964:	bne	18864 <__assert_fail@plt+0x7450>
   18968:	add	r0, sp, #8
   1896c:	bl	1863c <__assert_fail@plt+0x7228>
   18970:	ldr	r3, [r7]
   18974:	orr	r5, r5, r0
   18978:	add	r2, r3, r6
   1897c:	str	r2, [r7]
   18980:	ldrb	r3, [r3, r6]
   18984:	cmp	r3, #0
   18988:	orrne	r5, r5, #2
   1898c:	ldrd	r2, [sp, #8]
   18990:	strd	r2, [r8]
   18994:	b	18898 <__assert_fail@plt+0x7484>
   18998:	cmp	r4, #109	; 0x6d
   1899c:	beq	188fc <__assert_fail@plt+0x74e8>
   189a0:	cmp	r4, #116	; 0x74
   189a4:	beq	188fc <__assert_fail@plt+0x74e8>
   189a8:	cmp	r4, #107	; 0x6b
   189ac:	b	188c8 <__assert_fail@plt+0x74b4>
   189b0:	ldrb	r6, [r6, #2]
   189b4:	cmp	r6, #66	; 0x42
   189b8:	movne	r6, #1
   189bc:	moveq	r6, #3
   189c0:	mov	r1, #1024	; 0x400
   189c4:	b	18934 <__assert_fail@plt+0x7520>
   189c8:	cmp	r4, #80	; 0x50
   189cc:	beq	18a64 <__assert_fail@plt+0x7650>
   189d0:	cmp	r4, #84	; 0x54
   189d4:	beq	18a6c <__assert_fail@plt+0x7658>
   189d8:	cmp	r4, #77	; 0x4d
   189dc:	bne	18864 <__assert_fail@plt+0x7450>
   189e0:	mov	r2, #2
   189e4:	b	18a54 <__assert_fail@plt+0x7640>
   189e8:	cmp	r4, #103	; 0x67
   189ec:	beq	18a5c <__assert_fail@plt+0x7648>
   189f0:	bhi	18a14 <__assert_fail@plt+0x7600>
   189f4:	cmp	r4, #98	; 0x62
   189f8:	beq	18a48 <__assert_fail@plt+0x7634>
   189fc:	cmp	r4, #99	; 0x63
   18a00:	beq	18a84 <__assert_fail@plt+0x7670>
   18a04:	cmp	r4, #90	; 0x5a
   18a08:	bne	18864 <__assert_fail@plt+0x7450>
   18a0c:	mov	r2, #7
   18a10:	b	18a54 <__assert_fail@plt+0x7640>
   18a14:	cmp	r4, #109	; 0x6d
   18a18:	beq	189e0 <__assert_fail@plt+0x75cc>
   18a1c:	bhi	18a30 <__assert_fail@plt+0x761c>
   18a20:	cmp	r4, #107	; 0x6b
   18a24:	bne	18864 <__assert_fail@plt+0x7450>
   18a28:	mov	r2, #1
   18a2c:	b	18a54 <__assert_fail@plt+0x7640>
   18a30:	cmp	r4, #116	; 0x74
   18a34:	beq	18a6c <__assert_fail@plt+0x7658>
   18a38:	cmp	r4, #119	; 0x77
   18a3c:	moveq	r1, #2
   18a40:	beq	18968 <__assert_fail@plt+0x7554>
   18a44:	b	18864 <__assert_fail@plt+0x7450>
   18a48:	mov	r1, #512	; 0x200
   18a4c:	b	18968 <__assert_fail@plt+0x7554>
   18a50:	mov	r2, #6
   18a54:	add	r0, sp, #8
   18a58:	b	18a7c <__assert_fail@plt+0x7668>
   18a5c:	mov	r2, #3
   18a60:	b	18a54 <__assert_fail@plt+0x7640>
   18a64:	mov	r2, #5
   18a68:	b	18a54 <__assert_fail@plt+0x7640>
   18a6c:	mov	r2, #4
   18a70:	b	18a54 <__assert_fail@plt+0x7640>
   18a74:	mov	r2, #8
   18a78:	add	r0, sp, r2
   18a7c:	bl	1876c <__assert_fail@plt+0x7358>
   18a80:	b	18970 <__assert_fail@plt+0x755c>
   18a84:	mov	r0, #0
   18a88:	b	18970 <__assert_fail@plt+0x755c>
   18a8c:	mov	r5, #4
   18a90:	b	18898 <__assert_fail@plt+0x7484>
   18a94:			; <UNDEFINED> instruction: 0x0001b9b4
   18a98:			; <UNDEFINED> instruction: 0x0001b9bf
   18a9c:	andeq	fp, r1, sp, asr #19
   18aa0:	push	{r4, r5, r6, lr}
   18aa4:	subs	r5, r1, #0
   18aa8:	mov	r6, r0
   18aac:	ldr	r4, [r0]
   18ab0:	bge	18b24 <__assert_fail@plt+0x7710>
   18ab4:	cmp	r4, #0
   18ab8:	bge	18aec <__assert_fail@plt+0x76d8>
   18abc:	mvn	r0, #-2147483648	; 0x80000000
   18ac0:	bl	1991c <__assert_fail@plt+0x8508>
   18ac4:	cmp	r4, r0
   18ac8:	movge	r0, #0
   18acc:	movlt	r0, #1
   18ad0:	cmp	r0, #0
   18ad4:	movne	r3, #-2147483648	; 0x80000000
   18ad8:	bne	18b18 <__assert_fail@plt+0x7704>
   18adc:	mul	r4, r5, r4
   18ae0:	mov	r0, #0
   18ae4:	str	r4, [r6]
   18ae8:	pop	{r4, r5, r6, pc}
   18aec:	cmn	r5, #1
   18af0:	movne	r0, #-2147483648	; 0x80000000
   18af4:	moveq	r0, #0
   18af8:	beq	18b0c <__assert_fail@plt+0x76f8>
   18afc:	bl	1991c <__assert_fail@plt+0x8508>
   18b00:	cmp	r4, r0
   18b04:	movle	r0, #0
   18b08:	movgt	r0, #1
   18b0c:	cmp	r0, #0
   18b10:	mvnne	r3, #-2147483648	; 0x80000000
   18b14:	beq	18adc <__assert_fail@plt+0x76c8>
   18b18:	str	r3, [r6]
   18b1c:	mov	r0, #1
   18b20:	pop	{r4, r5, r6, pc}
   18b24:	beq	18adc <__assert_fail@plt+0x76c8>
   18b28:	cmp	r4, #0
   18b2c:	mvnge	r0, #-2147483648	; 0x80000000
   18b30:	bge	18afc <__assert_fail@plt+0x76e8>
   18b34:	cmn	r4, #1
   18b38:	beq	18adc <__assert_fail@plt+0x76c8>
   18b3c:	mov	r1, r4
   18b40:	mov	r0, #-2147483648	; 0x80000000
   18b44:	bl	1991c <__assert_fail@plt+0x8508>
   18b48:	cmp	r5, r0
   18b4c:	movle	r0, #0
   18b50:	movgt	r0, #1
   18b54:	b	18ad0 <__assert_fail@plt+0x76bc>
   18b58:	push	{r4, r5, r6, r7, r8, lr}
   18b5c:	mov	r6, r0
   18b60:	mov	r7, r1
   18b64:	mov	r5, r2
   18b68:	mov	r4, #0
   18b6c:	cmp	r5, #0
   18b70:	bne	18b7c <__assert_fail@plt+0x7768>
   18b74:	mov	r0, r4
   18b78:	pop	{r4, r5, r6, r7, r8, pc}
   18b7c:	mov	r1, r7
   18b80:	mov	r0, r6
   18b84:	bl	18aa0 <__assert_fail@plt+0x768c>
   18b88:	sub	r5, r5, #1
   18b8c:	orr	r4, r4, r0
   18b90:	b	18b6c <__assert_fail@plt+0x7758>
   18b94:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   18b98:	cmp	r2, #36	; 0x24
   18b9c:	ldr	r9, [sp, #40]	; 0x28
   18ba0:	bls	18bb8 <__assert_fail@plt+0x77a4>
   18ba4:	ldr	r3, [pc, #716]	; 18e78 <__assert_fail@plt+0x7a64>
   18ba8:	mov	r2, #85	; 0x55
   18bac:	ldr	r1, [pc, #712]	; 18e7c <__assert_fail@plt+0x7a68>
   18bb0:	ldr	r0, [pc, #712]	; 18e80 <__assert_fail@plt+0x7a6c>
   18bb4:	bl	11414 <__assert_fail@plt>
   18bb8:	cmp	r1, #0
   18bbc:	mov	r7, r1
   18bc0:	mov	sl, r0
   18bc4:	moveq	r7, sp
   18bc8:	mov	r6, r2
   18bcc:	mov	r8, r3
   18bd0:	bl	112e8 <__errno_location@plt>
   18bd4:	mov	r5, #0
   18bd8:	mov	r2, r6
   18bdc:	mov	r1, r7
   18be0:	str	r5, [r0]
   18be4:	mov	r4, r0
   18be8:	mov	r0, sl
   18bec:	bl	110f0 <strtol@plt>
   18bf0:	ldr	r6, [r7]
   18bf4:	cmp	sl, r6
   18bf8:	str	r0, [sp, #4]
   18bfc:	bne	18c34 <__assert_fail@plt+0x7820>
   18c00:	cmp	r9, r5
   18c04:	beq	18c2c <__assert_fail@plt+0x7818>
   18c08:	ldrb	r1, [r6]
   18c0c:	cmp	r1, r5
   18c10:	beq	18c2c <__assert_fail@plt+0x7818>
   18c14:	mov	r0, r9
   18c18:	bl	112c4 <strchr@plt>
   18c1c:	cmp	r0, r5
   18c20:	movne	r3, #1
   18c24:	strne	r3, [sp, #4]
   18c28:	bne	18c58 <__assert_fail@plt+0x7844>
   18c2c:	mov	r5, #4
   18c30:	b	18c84 <__assert_fail@plt+0x7870>
   18c34:	ldr	r5, [r4]
   18c38:	cmp	r5, #0
   18c3c:	beq	18c4c <__assert_fail@plt+0x7838>
   18c40:	cmp	r5, #34	; 0x22
   18c44:	bne	18c2c <__assert_fail@plt+0x7818>
   18c48:	mov	r5, #1
   18c4c:	cmp	r9, #0
   18c50:	streq	r0, [r8]
   18c54:	beq	18c84 <__assert_fail@plt+0x7870>
   18c58:	ldrb	r4, [r6]
   18c5c:	cmp	r4, #0
   18c60:	beq	18d78 <__assert_fail@plt+0x7964>
   18c64:	mov	r1, r4
   18c68:	mov	r0, r9
   18c6c:	bl	112c4 <strchr@plt>
   18c70:	cmp	r0, #0
   18c74:	bne	18c90 <__assert_fail@plt+0x787c>
   18c78:	ldr	r3, [sp, #4]
   18c7c:	orr	r5, r5, #2
   18c80:	str	r3, [r8]
   18c84:	mov	r0, r5
   18c88:	add	sp, sp, #8
   18c8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18c90:	cmp	r4, #84	; 0x54
   18c94:	beq	18ce8 <__assert_fail@plt+0x78d4>
   18c98:	bhi	18cd0 <__assert_fail@plt+0x78bc>
   18c9c:	cmp	r4, #75	; 0x4b
   18ca0:	beq	18ce8 <__assert_fail@plt+0x78d4>
   18ca4:	bhi	18cc0 <__assert_fail@plt+0x78ac>
   18ca8:	cmp	r4, #69	; 0x45
   18cac:	beq	18ce8 <__assert_fail@plt+0x78d4>
   18cb0:	cmp	r4, #71	; 0x47
   18cb4:	beq	18ce8 <__assert_fail@plt+0x78d4>
   18cb8:	mov	r6, #1
   18cbc:	b	18dac <__assert_fail@plt+0x7998>
   18cc0:	cmp	r4, #77	; 0x4d
   18cc4:	beq	18ce8 <__assert_fail@plt+0x78d4>
   18cc8:	cmp	r4, #80	; 0x50
   18ccc:	b	18cb4 <__assert_fail@plt+0x78a0>
   18cd0:	cmp	r4, #103	; 0x67
   18cd4:	beq	18ce8 <__assert_fail@plt+0x78d4>
   18cd8:	bhi	18d84 <__assert_fail@plt+0x7970>
   18cdc:	sub	r3, r4, #89	; 0x59
   18ce0:	cmp	r3, #1
   18ce4:	bhi	18cb8 <__assert_fail@plt+0x78a4>
   18ce8:	mov	r1, #48	; 0x30
   18cec:	mov	r0, r9
   18cf0:	bl	112c4 <strchr@plt>
   18cf4:	cmp	r0, #0
   18cf8:	beq	18cb8 <__assert_fail@plt+0x78a4>
   18cfc:	ldrb	r3, [r6, #1]
   18d00:	cmp	r3, #68	; 0x44
   18d04:	beq	18d18 <__assert_fail@plt+0x7904>
   18d08:	cmp	r3, #105	; 0x69
   18d0c:	beq	18d9c <__assert_fail@plt+0x7988>
   18d10:	cmp	r3, #66	; 0x42
   18d14:	bne	18cb8 <__assert_fail@plt+0x78a4>
   18d18:	mov	r6, #2
   18d1c:	mov	r1, #1000	; 0x3e8
   18d20:	cmp	r4, #89	; 0x59
   18d24:	beq	18e68 <__assert_fail@plt+0x7a54>
   18d28:	bhi	18dd4 <__assert_fail@plt+0x79c0>
   18d2c:	cmp	r4, #75	; 0x4b
   18d30:	beq	18e14 <__assert_fail@plt+0x7a00>
   18d34:	bhi	18db4 <__assert_fail@plt+0x79a0>
   18d38:	cmp	r4, #69	; 0x45
   18d3c:	beq	18e3c <__assert_fail@plt+0x7a28>
   18d40:	cmp	r4, #71	; 0x47
   18d44:	beq	18e48 <__assert_fail@plt+0x7a34>
   18d48:	cmp	r4, #66	; 0x42
   18d4c:	moveq	r1, #1024	; 0x400
   18d50:	bne	18c78 <__assert_fail@plt+0x7864>
   18d54:	add	r0, sp, #4
   18d58:	bl	18aa0 <__assert_fail@plt+0x768c>
   18d5c:	ldr	r3, [r7]
   18d60:	orr	r5, r5, r0
   18d64:	add	r2, r3, r6
   18d68:	str	r2, [r7]
   18d6c:	ldrb	r3, [r3, r6]
   18d70:	cmp	r3, #0
   18d74:	orrne	r5, r5, #2
   18d78:	ldr	r3, [sp, #4]
   18d7c:	str	r3, [r8]
   18d80:	b	18c84 <__assert_fail@plt+0x7870>
   18d84:	cmp	r4, #109	; 0x6d
   18d88:	beq	18ce8 <__assert_fail@plt+0x78d4>
   18d8c:	cmp	r4, #116	; 0x74
   18d90:	beq	18ce8 <__assert_fail@plt+0x78d4>
   18d94:	cmp	r4, #107	; 0x6b
   18d98:	b	18cb4 <__assert_fail@plt+0x78a0>
   18d9c:	ldrb	r6, [r6, #2]
   18da0:	cmp	r6, #66	; 0x42
   18da4:	movne	r6, #1
   18da8:	moveq	r6, #3
   18dac:	mov	r1, #1024	; 0x400
   18db0:	b	18d20 <__assert_fail@plt+0x790c>
   18db4:	cmp	r4, #80	; 0x50
   18db8:	beq	18e50 <__assert_fail@plt+0x7a3c>
   18dbc:	cmp	r4, #84	; 0x54
   18dc0:	beq	18e58 <__assert_fail@plt+0x7a44>
   18dc4:	cmp	r4, #77	; 0x4d
   18dc8:	bne	18c78 <__assert_fail@plt+0x7864>
   18dcc:	mov	r2, #2
   18dd0:	b	18e40 <__assert_fail@plt+0x7a2c>
   18dd4:	cmp	r4, #103	; 0x67
   18dd8:	beq	18e48 <__assert_fail@plt+0x7a34>
   18ddc:	bhi	18e00 <__assert_fail@plt+0x79ec>
   18de0:	cmp	r4, #98	; 0x62
   18de4:	beq	18e34 <__assert_fail@plt+0x7a20>
   18de8:	cmp	r4, #99	; 0x63
   18dec:	beq	18e70 <__assert_fail@plt+0x7a5c>
   18df0:	cmp	r4, #90	; 0x5a
   18df4:	bne	18c78 <__assert_fail@plt+0x7864>
   18df8:	mov	r2, #7
   18dfc:	b	18e40 <__assert_fail@plt+0x7a2c>
   18e00:	cmp	r4, #109	; 0x6d
   18e04:	beq	18dcc <__assert_fail@plt+0x79b8>
   18e08:	bhi	18e1c <__assert_fail@plt+0x7a08>
   18e0c:	cmp	r4, #107	; 0x6b
   18e10:	bne	18c78 <__assert_fail@plt+0x7864>
   18e14:	mov	r2, #1
   18e18:	b	18e40 <__assert_fail@plt+0x7a2c>
   18e1c:	cmp	r4, #116	; 0x74
   18e20:	beq	18e58 <__assert_fail@plt+0x7a44>
   18e24:	cmp	r4, #119	; 0x77
   18e28:	moveq	r1, #2
   18e2c:	beq	18d54 <__assert_fail@plt+0x7940>
   18e30:	b	18c78 <__assert_fail@plt+0x7864>
   18e34:	mov	r1, #512	; 0x200
   18e38:	b	18d54 <__assert_fail@plt+0x7940>
   18e3c:	mov	r2, #6
   18e40:	add	r0, sp, #4
   18e44:	b	18e60 <__assert_fail@plt+0x7a4c>
   18e48:	mov	r2, #3
   18e4c:	b	18e40 <__assert_fail@plt+0x7a2c>
   18e50:	mov	r2, #5
   18e54:	b	18e40 <__assert_fail@plt+0x7a2c>
   18e58:	mov	r2, #4
   18e5c:	add	r0, sp, r2
   18e60:	bl	18b58 <__assert_fail@plt+0x7744>
   18e64:	b	18d5c <__assert_fail@plt+0x7948>
   18e68:	mov	r2, #8
   18e6c:	b	18e40 <__assert_fail@plt+0x7a2c>
   18e70:	mov	r0, #0
   18e74:	b	18d5c <__assert_fail@plt+0x7948>
   18e78:	strdeq	fp, [r1], -r3
   18e7c:			; <UNDEFINED> instruction: 0x0001b9bf
   18e80:	andeq	fp, r1, sp, asr #19
   18e84:	ldr	ip, [pc, #140]	; 18f18 <__assert_fail@plt+0x7b04>
   18e88:	push	{r0, r1, r2, r3, r4, lr}
   18e8c:	sub	r0, r0, #1
   18e90:	ldr	r6, [ip]
   18e94:	cmp	r0, #3
   18e98:	ldrls	pc, [pc, r0, lsl #2]
   18e9c:	b	18f04 <__assert_fail@plt+0x7af0>
   18ea0:	andeq	r8, r1, r8, lsl #30
   18ea4:			; <UNDEFINED> instruction: 0x00018eb0
   18ea8:			; <UNDEFINED> instruction: 0x00018eb0
   18eac:	andeq	r8, r1, r0, lsl pc
   18eb0:	ldr	r0, [pc, #100]	; 18f1c <__assert_fail@plt+0x7b08>
   18eb4:	cmp	r1, #0
   18eb8:	ldr	r4, [pc, #96]	; 18f20 <__assert_fail@plt+0x7b0c>
   18ebc:	ldrge	r5, [r3, r1, lsl #4]
   18ec0:	sublt	r4, r4, r1
   18ec4:	movlt	r3, #0
   18ec8:	mov	r1, r0
   18ecc:	strblt	r2, [sp, #12]
   18ed0:	mov	r0, #0
   18ed4:	mov	r2, #5
   18ed8:	strblt	r3, [sp, #13]
   18edc:	addlt	r5, sp, #12
   18ee0:	bl	1118c <dcgettext@plt>
   18ee4:	ldr	r3, [sp, #24]
   18ee8:	str	r5, [sp]
   18eec:	str	r3, [sp, #4]
   18ef0:	mov	r1, #0
   18ef4:	mov	r3, r4
   18ef8:	mov	r2, r0
   18efc:	mov	r0, r6
   18f00:	bl	11228 <error@plt>
   18f04:	bl	113f0 <abort@plt>
   18f08:	ldr	r0, [pc, #20]	; 18f24 <__assert_fail@plt+0x7b10>
   18f0c:	b	18eb4 <__assert_fail@plt+0x7aa0>
   18f10:	ldr	r0, [pc, #16]	; 18f28 <__assert_fail@plt+0x7b14>
   18f14:	b	18eb4 <__assert_fail@plt+0x7aa0>
   18f18:	andeq	ip, r2, r4, lsl #3
   18f1c:	andeq	fp, r1, r6, lsl sl
   18f20:	andeq	fp, r1, r8, asr sl
   18f24:	andeq	fp, r1, fp, lsr sl
   18f28:	strdeq	fp, [r1], -fp	; <UNPREDICTABLE>
   18f2c:	push	{r4, r5, r6, lr}
   18f30:	subs	r5, r1, #0
   18f34:	mov	r4, r0
   18f38:	bge	18f78 <__assert_fail@plt+0x7b64>
   18f3c:	ldm	r0, {r0, r3}
   18f40:	orr	r0, r0, r3
   18f44:	adds	r0, r0, #0
   18f48:	movne	r0, #1
   18f4c:	cmp	r0, #0
   18f50:	bne	18fac <__assert_fail@plt+0x7b98>
   18f54:	ldr	r2, [r4]
   18f58:	asr	r3, r5, #31
   18f5c:	ldr	r1, [r4, #4]
   18f60:	mul	r3, r3, r2
   18f64:	mla	r1, r5, r1, r3
   18f68:	umull	r2, r3, r2, r5
   18f6c:	add	r3, r1, r3
   18f70:	strd	r2, [r4]
   18f74:	pop	{r4, r5, r6, pc}
   18f78:	moveq	r0, r5
   18f7c:	beq	18f4c <__assert_fail@plt+0x7b38>
   18f80:	mov	r2, r5
   18f84:	asr	r3, r5, #31
   18f88:	mvn	r0, #0
   18f8c:	mvn	r1, #0
   18f90:	bl	19c30 <__assert_fail@plt+0x881c>
   18f94:	ldrd	r2, [r4]
   18f98:	cmp	r1, r3
   18f9c:	cmpeq	r0, r2
   18fa0:	movcc	r0, #1
   18fa4:	movcs	r0, #0
   18fa8:	b	18f4c <__assert_fail@plt+0x7b38>
   18fac:	mvn	r2, #0
   18fb0:	mvn	r3, #0
   18fb4:	mov	r0, #1
   18fb8:	strd	r2, [r4]
   18fbc:	pop	{r4, r5, r6, pc}
   18fc0:	push	{r4, r5, r6, r7, r8, lr}
   18fc4:	mov	r6, r0
   18fc8:	mov	r7, r1
   18fcc:	mov	r5, r2
   18fd0:	mov	r4, #0
   18fd4:	cmp	r5, #0
   18fd8:	bne	18fe4 <__assert_fail@plt+0x7bd0>
   18fdc:	mov	r0, r4
   18fe0:	pop	{r4, r5, r6, r7, r8, pc}
   18fe4:	mov	r1, r7
   18fe8:	mov	r0, r6
   18fec:	bl	18f2c <__assert_fail@plt+0x7b18>
   18ff0:	sub	r5, r5, #1
   18ff4:	orr	r4, r4, r0
   18ff8:	b	18fd4 <__assert_fail@plt+0x7bc0>
   18ffc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19000:	sub	sp, sp, #20
   19004:	cmp	r2, #36	; 0x24
   19008:	ldr	r9, [sp, #56]	; 0x38
   1900c:	bls	19024 <__assert_fail@plt+0x7c10>
   19010:	ldr	r3, [pc, #772]	; 1931c <__assert_fail@plt+0x7f08>
   19014:	mov	r2, #85	; 0x55
   19018:	ldr	r1, [pc, #768]	; 19320 <__assert_fail@plt+0x7f0c>
   1901c:	ldr	r0, [pc, #768]	; 19324 <__assert_fail@plt+0x7f10>
   19020:	bl	11414 <__assert_fail@plt>
   19024:	cmp	r1, #0
   19028:	mov	r7, r1
   1902c:	mov	r4, r0
   19030:	mov	fp, r2
   19034:	mov	r8, r3
   19038:	addeq	r7, sp, #4
   1903c:	bl	112e8 <__errno_location@plt>
   19040:	mov	r3, #0
   19044:	str	r3, [r0]
   19048:	mov	sl, r0
   1904c:	bl	112a0 <__ctype_b_loc@plt>
   19050:	ldrb	r6, [r4]
   19054:	mov	r3, r4
   19058:	ldr	r1, [r0]
   1905c:	lsl	r2, r6, #1
   19060:	ldrh	r5, [r1, r2]
   19064:	ands	r5, r5, #8192	; 0x2000
   19068:	bne	19084 <__assert_fail@plt+0x7c70>
   1906c:	cmp	r6, #45	; 0x2d
   19070:	bne	1908c <__assert_fail@plt+0x7c78>
   19074:	mov	r5, #4
   19078:	mov	r0, r5
   1907c:	add	sp, sp, #20
   19080:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19084:	ldrb	r6, [r3, #1]!
   19088:	b	1905c <__assert_fail@plt+0x7c48>
   1908c:	mov	r2, fp
   19090:	mov	r1, r7
   19094:	mov	r0, r4
   19098:	bl	11330 <strtoumax@plt>
   1909c:	ldr	r6, [r7]
   190a0:	cmp	r4, r6
   190a4:	strd	r0, [sp, #8]
   190a8:	bne	1910c <__assert_fail@plt+0x7cf8>
   190ac:	cmp	r9, #0
   190b0:	beq	19074 <__assert_fail@plt+0x7c60>
   190b4:	ldrb	r1, [r6]
   190b8:	cmp	r1, #0
   190bc:	beq	19074 <__assert_fail@plt+0x7c60>
   190c0:	mov	r0, r9
   190c4:	bl	112c4 <strchr@plt>
   190c8:	cmp	r0, #0
   190cc:	beq	19074 <__assert_fail@plt+0x7c60>
   190d0:	mov	r2, #1
   190d4:	mov	r3, #0
   190d8:	strd	r2, [sp, #8]
   190dc:	ldrb	r4, [r6]
   190e0:	cmp	r4, #0
   190e4:	beq	1921c <__assert_fail@plt+0x7e08>
   190e8:	mov	r1, r4
   190ec:	mov	r0, r9
   190f0:	bl	112c4 <strchr@plt>
   190f4:	cmp	r0, #0
   190f8:	bne	19134 <__assert_fail@plt+0x7d20>
   190fc:	ldrd	r2, [sp, #8]
   19100:	orr	r5, r5, #2
   19104:	strd	r2, [r8]
   19108:	b	19078 <__assert_fail@plt+0x7c64>
   1910c:	ldr	r5, [sl]
   19110:	cmp	r5, #0
   19114:	beq	19124 <__assert_fail@plt+0x7d10>
   19118:	cmp	r5, #34	; 0x22
   1911c:	bne	19074 <__assert_fail@plt+0x7c60>
   19120:	mov	r5, #1
   19124:	cmp	r9, #0
   19128:	bne	190dc <__assert_fail@plt+0x7cc8>
   1912c:	strd	r0, [r8]
   19130:	b	19078 <__assert_fail@plt+0x7c64>
   19134:	cmp	r4, #84	; 0x54
   19138:	beq	1918c <__assert_fail@plt+0x7d78>
   1913c:	bhi	19174 <__assert_fail@plt+0x7d60>
   19140:	cmp	r4, #75	; 0x4b
   19144:	beq	1918c <__assert_fail@plt+0x7d78>
   19148:	bhi	19164 <__assert_fail@plt+0x7d50>
   1914c:	cmp	r4, #69	; 0x45
   19150:	beq	1918c <__assert_fail@plt+0x7d78>
   19154:	cmp	r4, #71	; 0x47
   19158:	beq	1918c <__assert_fail@plt+0x7d78>
   1915c:	mov	r6, #1
   19160:	b	19250 <__assert_fail@plt+0x7e3c>
   19164:	cmp	r4, #77	; 0x4d
   19168:	beq	1918c <__assert_fail@plt+0x7d78>
   1916c:	cmp	r4, #80	; 0x50
   19170:	b	19158 <__assert_fail@plt+0x7d44>
   19174:	cmp	r4, #103	; 0x67
   19178:	beq	1918c <__assert_fail@plt+0x7d78>
   1917c:	bhi	19228 <__assert_fail@plt+0x7e14>
   19180:	sub	r3, r4, #89	; 0x59
   19184:	cmp	r3, #1
   19188:	bhi	1915c <__assert_fail@plt+0x7d48>
   1918c:	mov	r1, #48	; 0x30
   19190:	mov	r0, r9
   19194:	bl	112c4 <strchr@plt>
   19198:	cmp	r0, #0
   1919c:	beq	1915c <__assert_fail@plt+0x7d48>
   191a0:	ldrb	r3, [r6, #1]
   191a4:	cmp	r3, #68	; 0x44
   191a8:	beq	191bc <__assert_fail@plt+0x7da8>
   191ac:	cmp	r3, #105	; 0x69
   191b0:	beq	19240 <__assert_fail@plt+0x7e2c>
   191b4:	cmp	r3, #66	; 0x42
   191b8:	bne	1915c <__assert_fail@plt+0x7d48>
   191bc:	mov	r6, #2
   191c0:	mov	r1, #1000	; 0x3e8
   191c4:	cmp	r4, #89	; 0x59
   191c8:	beq	19304 <__assert_fail@plt+0x7ef0>
   191cc:	bhi	19278 <__assert_fail@plt+0x7e64>
   191d0:	cmp	r4, #75	; 0x4b
   191d4:	beq	192b8 <__assert_fail@plt+0x7ea4>
   191d8:	bhi	19258 <__assert_fail@plt+0x7e44>
   191dc:	cmp	r4, #69	; 0x45
   191e0:	beq	192e0 <__assert_fail@plt+0x7ecc>
   191e4:	cmp	r4, #71	; 0x47
   191e8:	beq	192ec <__assert_fail@plt+0x7ed8>
   191ec:	cmp	r4, #66	; 0x42
   191f0:	moveq	r1, #1024	; 0x400
   191f4:	bne	190fc <__assert_fail@plt+0x7ce8>
   191f8:	add	r0, sp, #8
   191fc:	bl	18f2c <__assert_fail@plt+0x7b18>
   19200:	ldr	r3, [r7]
   19204:	orr	r5, r5, r0
   19208:	add	r2, r3, r6
   1920c:	str	r2, [r7]
   19210:	ldrb	r3, [r3, r6]
   19214:	cmp	r3, #0
   19218:	orrne	r5, r5, #2
   1921c:	ldrd	r2, [sp, #8]
   19220:	strd	r2, [r8]
   19224:	b	19078 <__assert_fail@plt+0x7c64>
   19228:	cmp	r4, #109	; 0x6d
   1922c:	beq	1918c <__assert_fail@plt+0x7d78>
   19230:	cmp	r4, #116	; 0x74
   19234:	beq	1918c <__assert_fail@plt+0x7d78>
   19238:	cmp	r4, #107	; 0x6b
   1923c:	b	19158 <__assert_fail@plt+0x7d44>
   19240:	ldrb	r6, [r6, #2]
   19244:	cmp	r6, #66	; 0x42
   19248:	movne	r6, #1
   1924c:	moveq	r6, #3
   19250:	mov	r1, #1024	; 0x400
   19254:	b	191c4 <__assert_fail@plt+0x7db0>
   19258:	cmp	r4, #80	; 0x50
   1925c:	beq	192f4 <__assert_fail@plt+0x7ee0>
   19260:	cmp	r4, #84	; 0x54
   19264:	beq	192fc <__assert_fail@plt+0x7ee8>
   19268:	cmp	r4, #77	; 0x4d
   1926c:	bne	190fc <__assert_fail@plt+0x7ce8>
   19270:	mov	r2, #2
   19274:	b	192e4 <__assert_fail@plt+0x7ed0>
   19278:	cmp	r4, #103	; 0x67
   1927c:	beq	192ec <__assert_fail@plt+0x7ed8>
   19280:	bhi	192a4 <__assert_fail@plt+0x7e90>
   19284:	cmp	r4, #98	; 0x62
   19288:	beq	192d8 <__assert_fail@plt+0x7ec4>
   1928c:	cmp	r4, #99	; 0x63
   19290:	beq	19314 <__assert_fail@plt+0x7f00>
   19294:	cmp	r4, #90	; 0x5a
   19298:	bne	190fc <__assert_fail@plt+0x7ce8>
   1929c:	mov	r2, #7
   192a0:	b	192e4 <__assert_fail@plt+0x7ed0>
   192a4:	cmp	r4, #109	; 0x6d
   192a8:	beq	19270 <__assert_fail@plt+0x7e5c>
   192ac:	bhi	192c0 <__assert_fail@plt+0x7eac>
   192b0:	cmp	r4, #107	; 0x6b
   192b4:	bne	190fc <__assert_fail@plt+0x7ce8>
   192b8:	mov	r2, #1
   192bc:	b	192e4 <__assert_fail@plt+0x7ed0>
   192c0:	cmp	r4, #116	; 0x74
   192c4:	beq	192fc <__assert_fail@plt+0x7ee8>
   192c8:	cmp	r4, #119	; 0x77
   192cc:	moveq	r1, #2
   192d0:	beq	191f8 <__assert_fail@plt+0x7de4>
   192d4:	b	190fc <__assert_fail@plt+0x7ce8>
   192d8:	mov	r1, #512	; 0x200
   192dc:	b	191f8 <__assert_fail@plt+0x7de4>
   192e0:	mov	r2, #6
   192e4:	add	r0, sp, #8
   192e8:	b	1930c <__assert_fail@plt+0x7ef8>
   192ec:	mov	r2, #3
   192f0:	b	192e4 <__assert_fail@plt+0x7ed0>
   192f4:	mov	r2, #5
   192f8:	b	192e4 <__assert_fail@plt+0x7ed0>
   192fc:	mov	r2, #4
   19300:	b	192e4 <__assert_fail@plt+0x7ed0>
   19304:	mov	r2, #8
   19308:	add	r0, sp, r2
   1930c:	bl	18fc0 <__assert_fail@plt+0x7bac>
   19310:	b	19200 <__assert_fail@plt+0x7dec>
   19314:	mov	r0, #0
   19318:	b	19200 <__assert_fail@plt+0x7dec>
   1931c:	andeq	fp, r1, fp, asr sl
   19320:			; <UNDEFINED> instruction: 0x0001b9bf
   19324:	andeq	fp, r1, sp, asr #19
   19328:	cmp	r1, #0
   1932c:	cmpne	r0, #0
   19330:	moveq	r1, #1
   19334:	moveq	r0, r1
   19338:	umull	r2, r3, r0, r1
   1933c:	adds	r3, r3, #0
   19340:	movne	r3, #1
   19344:	cmp	r2, #0
   19348:	blt	19358 <__assert_fail@plt+0x7f44>
   1934c:	cmp	r3, #0
   19350:	bne	19358 <__assert_fail@plt+0x7f44>
   19354:	b	110b4 <calloc@plt>
   19358:	push	{r4, lr}
   1935c:	bl	112e8 <__errno_location@plt>
   19360:	mov	r3, #12
   19364:	str	r3, [r0]
   19368:	mov	r0, #0
   1936c:	pop	{r4, pc}
   19370:	cmp	r0, #0
   19374:	mov	r3, #0
   19378:	moveq	r0, #1
   1937c:	adds	r3, r3, #0
   19380:	movne	r3, #1
   19384:	cmp	r0, #0
   19388:	blt	19398 <__assert_fail@plt+0x7f84>
   1938c:	cmp	r3, #0
   19390:	bne	19398 <__assert_fail@plt+0x7f84>
   19394:	b	11240 <malloc@plt>
   19398:	push	{r4, lr}
   1939c:	bl	112e8 <__errno_location@plt>
   193a0:	mov	r3, #12
   193a4:	str	r3, [r0]
   193a8:	mov	r0, #0
   193ac:	pop	{r4, pc}
   193b0:	cmp	r0, #0
   193b4:	push	{r4, lr}
   193b8:	mov	r4, r1
   193bc:	bne	193cc <__assert_fail@plt+0x7fb8>
   193c0:	mov	r0, r1
   193c4:	pop	{r4, lr}
   193c8:	b	19370 <__assert_fail@plt+0x7f5c>
   193cc:	cmp	r1, #0
   193d0:	bne	193e0 <__assert_fail@plt+0x7fcc>
   193d4:	bl	14624 <__assert_fail@plt+0x3210>
   193d8:	mov	r0, #0
   193dc:	pop	{r4, pc}
   193e0:	cmp	r1, #0
   193e4:	blt	193f4 <__assert_fail@plt+0x7fe0>
   193e8:	mov	r3, #0
   193ec:	cmp	r3, r3
   193f0:	beq	19404 <__assert_fail@plt+0x7ff0>
   193f4:	bl	112e8 <__errno_location@plt>
   193f8:	mov	r3, #12
   193fc:	str	r3, [r0]
   19400:	b	193d8 <__assert_fail@plt+0x7fc4>
   19404:	pop	{r4, lr}
   19408:	b	11198 <realloc@plt>
   1940c:	push	{r4, r5, r6, lr}
   19410:	mov	r4, r0
   19414:	bl	11204 <__fpending@plt>
   19418:	mov	r5, r0
   1941c:	mov	r0, r4
   19420:	bl	11210 <ferror_unlocked@plt>
   19424:	mov	r6, r0
   19428:	mov	r0, r4
   1942c:	bl	14498 <__assert_fail@plt+0x3084>
   19430:	cmp	r6, #0
   19434:	mov	r4, r0
   19438:	bne	19464 <__assert_fail@plt+0x8050>
   1943c:	cmp	r0, #0
   19440:	beq	1945c <__assert_fail@plt+0x8048>
   19444:	cmp	r5, #0
   19448:	bne	19474 <__assert_fail@plt+0x8060>
   1944c:	bl	112e8 <__errno_location@plt>
   19450:	ldr	r4, [r0]
   19454:	subs	r4, r4, #9
   19458:	mvnne	r4, #0
   1945c:	mov	r0, r4
   19460:	pop	{r4, r5, r6, pc}
   19464:	cmp	r0, #0
   19468:	bne	19474 <__assert_fail@plt+0x8060>
   1946c:	bl	112e8 <__errno_location@plt>
   19470:	str	r4, [r0]
   19474:	mvn	r4, #0
   19478:	b	1945c <__assert_fail@plt+0x8048>
   1947c:	push	{r1, r2, r3}
   19480:	push	{r0, r1, r4, r5, r6, r7, lr}
   19484:	add	r2, sp, #32
   19488:	ldr	r1, [sp, #28]
   1948c:	str	r2, [sp, #4]
   19490:	cmp	r1, #0
   19494:	beq	194d8 <__assert_fail@plt+0x80c4>
   19498:	ldr	r3, [pc, #396]	; 1962c <__assert_fail@plt+0x8218>
   1949c:	mov	r6, r0
   194a0:	cmp	r1, r3
   194a4:	beq	194e4 <__assert_fail@plt+0x80d0>
   194a8:	cmp	r1, #11
   194ac:	beq	194c8 <__assert_fail@plt+0x80b4>
   194b0:	bgt	195f4 <__assert_fail@plt+0x81e0>
   194b4:	cmp	r1, #3
   194b8:	beq	194c8 <__assert_fail@plt+0x80b4>
   194bc:	bgt	195d0 <__assert_fail@plt+0x81bc>
   194c0:	cmp	r1, #1
   194c4:	bne	195dc <__assert_fail@plt+0x81c8>
   194c8:	mov	r0, r6
   194cc:	bl	1136c <fcntl64@plt>
   194d0:	mov	r4, r0
   194d4:	b	19590 <__assert_fail@plt+0x817c>
   194d8:	ldr	r2, [sp, #32]
   194dc:	bl	1136c <fcntl64@plt>
   194e0:	b	194d0 <__assert_fail@plt+0x80bc>
   194e4:	ldr	r5, [pc, #324]	; 19630 <__assert_fail@plt+0x821c>
   194e8:	add	r3, sp, #36	; 0x24
   194ec:	str	r3, [sp, #4]
   194f0:	ldr	r3, [r5]
   194f4:	ldr	r7, [r2]
   194f8:	cmp	r3, #0
   194fc:	mov	r2, r7
   19500:	blt	195a4 <__assert_fail@plt+0x8190>
   19504:	bl	1136c <fcntl64@plt>
   19508:	subs	r4, r0, #0
   1950c:	bge	19520 <__assert_fail@plt+0x810c>
   19510:	bl	112e8 <__errno_location@plt>
   19514:	ldr	r3, [r0]
   19518:	cmp	r3, #22
   1951c:	beq	19570 <__assert_fail@plt+0x815c>
   19520:	mov	r3, #1
   19524:	str	r3, [r5]
   19528:	cmp	r4, #0
   1952c:	blt	19590 <__assert_fail@plt+0x817c>
   19530:	ldr	r5, [r5]
   19534:	cmn	r5, #1
   19538:	bne	19590 <__assert_fail@plt+0x817c>
   1953c:	mov	r1, #1
   19540:	mov	r0, r4
   19544:	bl	1136c <fcntl64@plt>
   19548:	subs	r2, r0, #0
   1954c:	bge	195b4 <__assert_fail@plt+0x81a0>
   19550:	bl	112e8 <__errno_location@plt>
   19554:	ldr	r7, [r0]
   19558:	mov	r6, r0
   1955c:	mov	r0, r4
   19560:	bl	113fc <close@plt>
   19564:	mov	r4, r5
   19568:	str	r7, [r6]
   1956c:	b	19590 <__assert_fail@plt+0x817c>
   19570:	mov	r2, r7
   19574:	mov	r1, #0
   19578:	mov	r0, r6
   1957c:	bl	1136c <fcntl64@plt>
   19580:	subs	r4, r0, #0
   19584:	mvnge	r3, #0
   19588:	strge	r3, [r5]
   1958c:	bge	19530 <__assert_fail@plt+0x811c>
   19590:	mov	r0, r4
   19594:	add	sp, sp, #8
   19598:	pop	{r4, r5, r6, r7, lr}
   1959c:	add	sp, sp, #12
   195a0:	bx	lr
   195a4:	mov	r1, #0
   195a8:	bl	1136c <fcntl64@plt>
   195ac:	mov	r4, r0
   195b0:	b	19528 <__assert_fail@plt+0x8114>
   195b4:	orr	r2, r2, #1
   195b8:	mov	r1, #2
   195bc:	mov	r0, r4
   195c0:	bl	1136c <fcntl64@plt>
   195c4:	cmn	r0, #1
   195c8:	bne	19590 <__assert_fail@plt+0x817c>
   195cc:	b	19550 <__assert_fail@plt+0x813c>
   195d0:	cmp	r1, #8
   195d4:	beq	195dc <__assert_fail@plt+0x81c8>
   195d8:	bgt	195ec <__assert_fail@plt+0x81d8>
   195dc:	ldr	r3, [sp, #4]
   195e0:	mov	r0, r6
   195e4:	ldr	r2, [r3]
   195e8:	b	194dc <__assert_fail@plt+0x80c8>
   195ec:	cmp	r1, #9
   195f0:	b	194c4 <__assert_fail@plt+0x80b0>
   195f4:	ldr	r2, [pc, #56]	; 19634 <__assert_fail@plt+0x8220>
   195f8:	cmp	r1, r2
   195fc:	bgt	19614 <__assert_fail@plt+0x8200>
   19600:	cmp	r1, r3
   19604:	ldrlt	r3, [pc, #44]	; 19638 <__assert_fail@plt+0x8224>
   19608:	bge	195dc <__assert_fail@plt+0x81c8>
   1960c:	cmp	r1, r3
   19610:	b	194c4 <__assert_fail@plt+0x80b0>
   19614:	ldr	r3, [pc, #32]	; 1963c <__assert_fail@plt+0x8228>
   19618:	cmp	r1, r3
   1961c:	beq	195dc <__assert_fail@plt+0x81c8>
   19620:	blt	194c8 <__assert_fail@plt+0x80b4>
   19624:	add	r3, r3, #1
   19628:	b	1960c <__assert_fail@plt+0x81f8>
   1962c:	andeq	r0, r0, r6, lsl #8
   19630:	andeq	ip, r2, r4, ror #7
   19634:	andeq	r0, r0, r7, lsl #8
   19638:	andeq	r0, r0, r1, lsl #8
   1963c:	andeq	r0, r0, r9, lsl #8
   19640:	push	{r4, lr}
   19644:	mov	r0, #14
   19648:	bl	11390 <nl_langinfo@plt>
   1964c:	ldr	r3, [pc, #24]	; 1966c <__assert_fail@plt+0x8258>
   19650:	cmp	r0, #0
   19654:	moveq	r0, r3
   19658:	ldr	r3, [pc, #16]	; 19670 <__assert_fail@plt+0x825c>
   1965c:	ldrb	r2, [r0]
   19660:	cmp	r2, #0
   19664:	moveq	r0, r3
   19668:	pop	{r4, pc}
   1966c:	ldrdeq	sl, [r1], -fp
   19670:	andeq	fp, r1, r6, ror #20
   19674:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19678:	subs	r5, r0, #0
   1967c:	addeq	r5, sp, #4
   19680:	mov	r0, r5
   19684:	mov	r7, r2
   19688:	mov	r6, r1
   1968c:	bl	1121c <mbrtowc@plt>
   19690:	cmp	r7, #0
   19694:	cmnne	r0, #3
   19698:	mov	r4, r0
   1969c:	bls	196b8 <__assert_fail@plt+0x82a4>
   196a0:	mov	r0, #0
   196a4:	bl	1473c <__assert_fail@plt+0x3328>
   196a8:	cmp	r0, #0
   196ac:	moveq	r4, #1
   196b0:	ldrbeq	r3, [r6]
   196b4:	streq	r3, [r5]
   196b8:	mov	r0, r4
   196bc:	add	sp, sp, #12
   196c0:	pop	{r4, r5, r6, r7, pc}
   196c4:	push	{r4, r5, r6, lr}
   196c8:	subs	r4, r2, #0
   196cc:	mov	r6, r0
   196d0:	mov	r5, r1
   196d4:	beq	196ec <__assert_fail@plt+0x82d8>
   196d8:	mov	r1, r4
   196dc:	mvn	r0, #0
   196e0:	bl	19710 <__assert_fail@plt+0x82fc>
   196e4:	cmp	r0, r5
   196e8:	bcc	196fc <__assert_fail@plt+0x82e8>
   196ec:	mul	r1, r5, r4
   196f0:	mov	r0, r6
   196f4:	pop	{r4, r5, r6, lr}
   196f8:	b	193b0 <__assert_fail@plt+0x7f9c>
   196fc:	bl	112e8 <__errno_location@plt>
   19700:	mov	r3, #12
   19704:	str	r3, [r0]
   19708:	mov	r0, #0
   1970c:	pop	{r4, r5, r6, pc}
   19710:	subs	r2, r1, #1
   19714:	bxeq	lr
   19718:	bcc	198f0 <__assert_fail@plt+0x84dc>
   1971c:	cmp	r0, r1
   19720:	bls	198d4 <__assert_fail@plt+0x84c0>
   19724:	tst	r1, r2
   19728:	beq	198e0 <__assert_fail@plt+0x84cc>
   1972c:	clz	r3, r0
   19730:	clz	r2, r1
   19734:	sub	r3, r2, r3
   19738:	rsbs	r3, r3, #31
   1973c:	addne	r3, r3, r3, lsl #1
   19740:	mov	r2, #0
   19744:	addne	pc, pc, r3, lsl #2
   19748:	nop			; (mov r0, r0)
   1974c:	cmp	r0, r1, lsl #31
   19750:	adc	r2, r2, r2
   19754:	subcs	r0, r0, r1, lsl #31
   19758:	cmp	r0, r1, lsl #30
   1975c:	adc	r2, r2, r2
   19760:	subcs	r0, r0, r1, lsl #30
   19764:	cmp	r0, r1, lsl #29
   19768:	adc	r2, r2, r2
   1976c:	subcs	r0, r0, r1, lsl #29
   19770:	cmp	r0, r1, lsl #28
   19774:	adc	r2, r2, r2
   19778:	subcs	r0, r0, r1, lsl #28
   1977c:	cmp	r0, r1, lsl #27
   19780:	adc	r2, r2, r2
   19784:	subcs	r0, r0, r1, lsl #27
   19788:	cmp	r0, r1, lsl #26
   1978c:	adc	r2, r2, r2
   19790:	subcs	r0, r0, r1, lsl #26
   19794:	cmp	r0, r1, lsl #25
   19798:	adc	r2, r2, r2
   1979c:	subcs	r0, r0, r1, lsl #25
   197a0:	cmp	r0, r1, lsl #24
   197a4:	adc	r2, r2, r2
   197a8:	subcs	r0, r0, r1, lsl #24
   197ac:	cmp	r0, r1, lsl #23
   197b0:	adc	r2, r2, r2
   197b4:	subcs	r0, r0, r1, lsl #23
   197b8:	cmp	r0, r1, lsl #22
   197bc:	adc	r2, r2, r2
   197c0:	subcs	r0, r0, r1, lsl #22
   197c4:	cmp	r0, r1, lsl #21
   197c8:	adc	r2, r2, r2
   197cc:	subcs	r0, r0, r1, lsl #21
   197d0:	cmp	r0, r1, lsl #20
   197d4:	adc	r2, r2, r2
   197d8:	subcs	r0, r0, r1, lsl #20
   197dc:	cmp	r0, r1, lsl #19
   197e0:	adc	r2, r2, r2
   197e4:	subcs	r0, r0, r1, lsl #19
   197e8:	cmp	r0, r1, lsl #18
   197ec:	adc	r2, r2, r2
   197f0:	subcs	r0, r0, r1, lsl #18
   197f4:	cmp	r0, r1, lsl #17
   197f8:	adc	r2, r2, r2
   197fc:	subcs	r0, r0, r1, lsl #17
   19800:	cmp	r0, r1, lsl #16
   19804:	adc	r2, r2, r2
   19808:	subcs	r0, r0, r1, lsl #16
   1980c:	cmp	r0, r1, lsl #15
   19810:	adc	r2, r2, r2
   19814:	subcs	r0, r0, r1, lsl #15
   19818:	cmp	r0, r1, lsl #14
   1981c:	adc	r2, r2, r2
   19820:	subcs	r0, r0, r1, lsl #14
   19824:	cmp	r0, r1, lsl #13
   19828:	adc	r2, r2, r2
   1982c:	subcs	r0, r0, r1, lsl #13
   19830:	cmp	r0, r1, lsl #12
   19834:	adc	r2, r2, r2
   19838:	subcs	r0, r0, r1, lsl #12
   1983c:	cmp	r0, r1, lsl #11
   19840:	adc	r2, r2, r2
   19844:	subcs	r0, r0, r1, lsl #11
   19848:	cmp	r0, r1, lsl #10
   1984c:	adc	r2, r2, r2
   19850:	subcs	r0, r0, r1, lsl #10
   19854:	cmp	r0, r1, lsl #9
   19858:	adc	r2, r2, r2
   1985c:	subcs	r0, r0, r1, lsl #9
   19860:	cmp	r0, r1, lsl #8
   19864:	adc	r2, r2, r2
   19868:	subcs	r0, r0, r1, lsl #8
   1986c:	cmp	r0, r1, lsl #7
   19870:	adc	r2, r2, r2
   19874:	subcs	r0, r0, r1, lsl #7
   19878:	cmp	r0, r1, lsl #6
   1987c:	adc	r2, r2, r2
   19880:	subcs	r0, r0, r1, lsl #6
   19884:	cmp	r0, r1, lsl #5
   19888:	adc	r2, r2, r2
   1988c:	subcs	r0, r0, r1, lsl #5
   19890:	cmp	r0, r1, lsl #4
   19894:	adc	r2, r2, r2
   19898:	subcs	r0, r0, r1, lsl #4
   1989c:	cmp	r0, r1, lsl #3
   198a0:	adc	r2, r2, r2
   198a4:	subcs	r0, r0, r1, lsl #3
   198a8:	cmp	r0, r1, lsl #2
   198ac:	adc	r2, r2, r2
   198b0:	subcs	r0, r0, r1, lsl #2
   198b4:	cmp	r0, r1, lsl #1
   198b8:	adc	r2, r2, r2
   198bc:	subcs	r0, r0, r1, lsl #1
   198c0:	cmp	r0, r1
   198c4:	adc	r2, r2, r2
   198c8:	subcs	r0, r0, r1
   198cc:	mov	r0, r2
   198d0:	bx	lr
   198d4:	moveq	r0, #1
   198d8:	movne	r0, #0
   198dc:	bx	lr
   198e0:	clz	r2, r1
   198e4:	rsb	r2, r2, #31
   198e8:	lsr	r0, r0, r2
   198ec:	bx	lr
   198f0:	cmp	r0, #0
   198f4:	mvnne	r0, #0
   198f8:	b	19c6c <__assert_fail@plt+0x8858>
   198fc:	cmp	r1, #0
   19900:	beq	198f0 <__assert_fail@plt+0x84dc>
   19904:	push	{r0, r1, lr}
   19908:	bl	19710 <__assert_fail@plt+0x82fc>
   1990c:	pop	{r1, r2, lr}
   19910:	mul	r3, r2, r0
   19914:	sub	r1, r1, r3
   19918:	bx	lr
   1991c:	cmp	r1, #0
   19920:	beq	19b2c <__assert_fail@plt+0x8718>
   19924:	eor	ip, r0, r1
   19928:	rsbmi	r1, r1, #0
   1992c:	subs	r2, r1, #1
   19930:	beq	19af8 <__assert_fail@plt+0x86e4>
   19934:	movs	r3, r0
   19938:	rsbmi	r3, r0, #0
   1993c:	cmp	r3, r1
   19940:	bls	19b04 <__assert_fail@plt+0x86f0>
   19944:	tst	r1, r2
   19948:	beq	19b14 <__assert_fail@plt+0x8700>
   1994c:	clz	r2, r3
   19950:	clz	r0, r1
   19954:	sub	r2, r0, r2
   19958:	rsbs	r2, r2, #31
   1995c:	addne	r2, r2, r2, lsl #1
   19960:	mov	r0, #0
   19964:	addne	pc, pc, r2, lsl #2
   19968:	nop			; (mov r0, r0)
   1996c:	cmp	r3, r1, lsl #31
   19970:	adc	r0, r0, r0
   19974:	subcs	r3, r3, r1, lsl #31
   19978:	cmp	r3, r1, lsl #30
   1997c:	adc	r0, r0, r0
   19980:	subcs	r3, r3, r1, lsl #30
   19984:	cmp	r3, r1, lsl #29
   19988:	adc	r0, r0, r0
   1998c:	subcs	r3, r3, r1, lsl #29
   19990:	cmp	r3, r1, lsl #28
   19994:	adc	r0, r0, r0
   19998:	subcs	r3, r3, r1, lsl #28
   1999c:	cmp	r3, r1, lsl #27
   199a0:	adc	r0, r0, r0
   199a4:	subcs	r3, r3, r1, lsl #27
   199a8:	cmp	r3, r1, lsl #26
   199ac:	adc	r0, r0, r0
   199b0:	subcs	r3, r3, r1, lsl #26
   199b4:	cmp	r3, r1, lsl #25
   199b8:	adc	r0, r0, r0
   199bc:	subcs	r3, r3, r1, lsl #25
   199c0:	cmp	r3, r1, lsl #24
   199c4:	adc	r0, r0, r0
   199c8:	subcs	r3, r3, r1, lsl #24
   199cc:	cmp	r3, r1, lsl #23
   199d0:	adc	r0, r0, r0
   199d4:	subcs	r3, r3, r1, lsl #23
   199d8:	cmp	r3, r1, lsl #22
   199dc:	adc	r0, r0, r0
   199e0:	subcs	r3, r3, r1, lsl #22
   199e4:	cmp	r3, r1, lsl #21
   199e8:	adc	r0, r0, r0
   199ec:	subcs	r3, r3, r1, lsl #21
   199f0:	cmp	r3, r1, lsl #20
   199f4:	adc	r0, r0, r0
   199f8:	subcs	r3, r3, r1, lsl #20
   199fc:	cmp	r3, r1, lsl #19
   19a00:	adc	r0, r0, r0
   19a04:	subcs	r3, r3, r1, lsl #19
   19a08:	cmp	r3, r1, lsl #18
   19a0c:	adc	r0, r0, r0
   19a10:	subcs	r3, r3, r1, lsl #18
   19a14:	cmp	r3, r1, lsl #17
   19a18:	adc	r0, r0, r0
   19a1c:	subcs	r3, r3, r1, lsl #17
   19a20:	cmp	r3, r1, lsl #16
   19a24:	adc	r0, r0, r0
   19a28:	subcs	r3, r3, r1, lsl #16
   19a2c:	cmp	r3, r1, lsl #15
   19a30:	adc	r0, r0, r0
   19a34:	subcs	r3, r3, r1, lsl #15
   19a38:	cmp	r3, r1, lsl #14
   19a3c:	adc	r0, r0, r0
   19a40:	subcs	r3, r3, r1, lsl #14
   19a44:	cmp	r3, r1, lsl #13
   19a48:	adc	r0, r0, r0
   19a4c:	subcs	r3, r3, r1, lsl #13
   19a50:	cmp	r3, r1, lsl #12
   19a54:	adc	r0, r0, r0
   19a58:	subcs	r3, r3, r1, lsl #12
   19a5c:	cmp	r3, r1, lsl #11
   19a60:	adc	r0, r0, r0
   19a64:	subcs	r3, r3, r1, lsl #11
   19a68:	cmp	r3, r1, lsl #10
   19a6c:	adc	r0, r0, r0
   19a70:	subcs	r3, r3, r1, lsl #10
   19a74:	cmp	r3, r1, lsl #9
   19a78:	adc	r0, r0, r0
   19a7c:	subcs	r3, r3, r1, lsl #9
   19a80:	cmp	r3, r1, lsl #8
   19a84:	adc	r0, r0, r0
   19a88:	subcs	r3, r3, r1, lsl #8
   19a8c:	cmp	r3, r1, lsl #7
   19a90:	adc	r0, r0, r0
   19a94:	subcs	r3, r3, r1, lsl #7
   19a98:	cmp	r3, r1, lsl #6
   19a9c:	adc	r0, r0, r0
   19aa0:	subcs	r3, r3, r1, lsl #6
   19aa4:	cmp	r3, r1, lsl #5
   19aa8:	adc	r0, r0, r0
   19aac:	subcs	r3, r3, r1, lsl #5
   19ab0:	cmp	r3, r1, lsl #4
   19ab4:	adc	r0, r0, r0
   19ab8:	subcs	r3, r3, r1, lsl #4
   19abc:	cmp	r3, r1, lsl #3
   19ac0:	adc	r0, r0, r0
   19ac4:	subcs	r3, r3, r1, lsl #3
   19ac8:	cmp	r3, r1, lsl #2
   19acc:	adc	r0, r0, r0
   19ad0:	subcs	r3, r3, r1, lsl #2
   19ad4:	cmp	r3, r1, lsl #1
   19ad8:	adc	r0, r0, r0
   19adc:	subcs	r3, r3, r1, lsl #1
   19ae0:	cmp	r3, r1
   19ae4:	adc	r0, r0, r0
   19ae8:	subcs	r3, r3, r1
   19aec:	cmp	ip, #0
   19af0:	rsbmi	r0, r0, #0
   19af4:	bx	lr
   19af8:	teq	ip, r0
   19afc:	rsbmi	r0, r0, #0
   19b00:	bx	lr
   19b04:	movcc	r0, #0
   19b08:	asreq	r0, ip, #31
   19b0c:	orreq	r0, r0, #1
   19b10:	bx	lr
   19b14:	clz	r2, r1
   19b18:	rsb	r2, r2, #31
   19b1c:	cmp	ip, #0
   19b20:	lsr	r0, r3, r2
   19b24:	rsbmi	r0, r0, #0
   19b28:	bx	lr
   19b2c:	cmp	r0, #0
   19b30:	mvngt	r0, #-2147483648	; 0x80000000
   19b34:	movlt	r0, #-2147483648	; 0x80000000
   19b38:	b	19c6c <__assert_fail@plt+0x8858>
   19b3c:	cmp	r1, #0
   19b40:	beq	19b2c <__assert_fail@plt+0x8718>
   19b44:	push	{r0, r1, lr}
   19b48:	bl	19924 <__assert_fail@plt+0x8510>
   19b4c:	pop	{r1, r2, lr}
   19b50:	mul	r3, r2, r0
   19b54:	sub	r1, r1, r3
   19b58:	bx	lr
   19b5c:	cmp	r3, #0
   19b60:	cmpeq	r2, #0
   19b64:	bne	19b88 <__assert_fail@plt+0x8774>
   19b68:	cmp	r1, #0
   19b6c:	movlt	r1, #-2147483648	; 0x80000000
   19b70:	movlt	r0, #0
   19b74:	blt	19b84 <__assert_fail@plt+0x8770>
   19b78:	cmpeq	r0, #0
   19b7c:	mvnne	r1, #-2147483648	; 0x80000000
   19b80:	mvnne	r0, #0
   19b84:	b	19c6c <__assert_fail@plt+0x8858>
   19b88:	sub	sp, sp, #8
   19b8c:	push	{sp, lr}
   19b90:	cmp	r1, #0
   19b94:	blt	19bb4 <__assert_fail@plt+0x87a0>
   19b98:	cmp	r3, #0
   19b9c:	blt	19be8 <__assert_fail@plt+0x87d4>
   19ba0:	bl	19c7c <__assert_fail@plt+0x8868>
   19ba4:	ldr	lr, [sp, #4]
   19ba8:	add	sp, sp, #8
   19bac:	pop	{r2, r3}
   19bb0:	bx	lr
   19bb4:	rsbs	r0, r0, #0
   19bb8:	sbc	r1, r1, r1, lsl #1
   19bbc:	cmp	r3, #0
   19bc0:	blt	19c0c <__assert_fail@plt+0x87f8>
   19bc4:	bl	19c7c <__assert_fail@plt+0x8868>
   19bc8:	ldr	lr, [sp, #4]
   19bcc:	add	sp, sp, #8
   19bd0:	pop	{r2, r3}
   19bd4:	rsbs	r0, r0, #0
   19bd8:	sbc	r1, r1, r1, lsl #1
   19bdc:	rsbs	r2, r2, #0
   19be0:	sbc	r3, r3, r3, lsl #1
   19be4:	bx	lr
   19be8:	rsbs	r2, r2, #0
   19bec:	sbc	r3, r3, r3, lsl #1
   19bf0:	bl	19c7c <__assert_fail@plt+0x8868>
   19bf4:	ldr	lr, [sp, #4]
   19bf8:	add	sp, sp, #8
   19bfc:	pop	{r2, r3}
   19c00:	rsbs	r0, r0, #0
   19c04:	sbc	r1, r1, r1, lsl #1
   19c08:	bx	lr
   19c0c:	rsbs	r2, r2, #0
   19c10:	sbc	r3, r3, r3, lsl #1
   19c14:	bl	19c7c <__assert_fail@plt+0x8868>
   19c18:	ldr	lr, [sp, #4]
   19c1c:	add	sp, sp, #8
   19c20:	pop	{r2, r3}
   19c24:	rsbs	r2, r2, #0
   19c28:	sbc	r3, r3, r3, lsl #1
   19c2c:	bx	lr
   19c30:	cmp	r3, #0
   19c34:	cmpeq	r2, #0
   19c38:	bne	19c50 <__assert_fail@plt+0x883c>
   19c3c:	cmp	r1, #0
   19c40:	cmpeq	r0, #0
   19c44:	mvnne	r1, #0
   19c48:	mvnne	r0, #0
   19c4c:	b	19c6c <__assert_fail@plt+0x8858>
   19c50:	sub	sp, sp, #8
   19c54:	push	{sp, lr}
   19c58:	bl	19c7c <__assert_fail@plt+0x8868>
   19c5c:	ldr	lr, [sp, #4]
   19c60:	add	sp, sp, #8
   19c64:	pop	{r2, r3}
   19c68:	bx	lr
   19c6c:	push	{r1, lr}
   19c70:	mov	r0, #8
   19c74:	bl	110cc <raise@plt>
   19c78:	pop	{r1, pc}
   19c7c:	cmp	r1, r3
   19c80:	push	{r4, r5, r6, r7, r8, r9, lr}
   19c84:	cmpeq	r0, r2
   19c88:	mov	r4, r0
   19c8c:	mov	r5, r1
   19c90:	ldr	r9, [sp, #28]
   19c94:	movcc	r0, #0
   19c98:	movcc	r1, #0
   19c9c:	bcc	19d94 <__assert_fail@plt+0x8980>
   19ca0:	cmp	r3, #0
   19ca4:	clzeq	ip, r2
   19ca8:	clzne	ip, r3
   19cac:	addeq	ip, ip, #32
   19cb0:	cmp	r5, #0
   19cb4:	clzeq	r1, r4
   19cb8:	addeq	r1, r1, #32
   19cbc:	clzne	r1, r5
   19cc0:	sub	ip, ip, r1
   19cc4:	sub	lr, ip, #32
   19cc8:	lsl	r7, r3, ip
   19ccc:	rsb	r8, ip, #32
   19cd0:	orr	r7, r7, r2, lsl lr
   19cd4:	orr	r7, r7, r2, lsr r8
   19cd8:	lsl	r6, r2, ip
   19cdc:	cmp	r5, r7
   19ce0:	cmpeq	r4, r6
   19ce4:	movcc	r0, #0
   19ce8:	movcc	r1, #0
   19cec:	bcc	19d08 <__assert_fail@plt+0x88f4>
   19cf0:	mov	r3, #1
   19cf4:	subs	r4, r4, r6
   19cf8:	lsl	r1, r3, lr
   19cfc:	lsl	r0, r3, ip
   19d00:	orr	r1, r1, r3, lsr r8
   19d04:	sbc	r5, r5, r7
   19d08:	cmp	ip, #0
   19d0c:	beq	19d94 <__assert_fail@plt+0x8980>
   19d10:	lsrs	r3, r7, #1
   19d14:	rrx	r2, r6
   19d18:	mov	r6, ip
   19d1c:	b	19d40 <__assert_fail@plt+0x892c>
   19d20:	subs	r4, r4, r2
   19d24:	sbc	r5, r5, r3
   19d28:	adds	r4, r4, r4
   19d2c:	adc	r5, r5, r5
   19d30:	adds	r4, r4, #1
   19d34:	adc	r5, r5, #0
   19d38:	subs	r6, r6, #1
   19d3c:	beq	19d5c <__assert_fail@plt+0x8948>
   19d40:	cmp	r5, r3
   19d44:	cmpeq	r4, r2
   19d48:	bcs	19d20 <__assert_fail@plt+0x890c>
   19d4c:	adds	r4, r4, r4
   19d50:	adc	r5, r5, r5
   19d54:	subs	r6, r6, #1
   19d58:	bne	19d40 <__assert_fail@plt+0x892c>
   19d5c:	lsr	r6, r4, ip
   19d60:	lsr	r7, r5, ip
   19d64:	orr	r6, r6, r5, lsl r8
   19d68:	adds	r2, r0, r4
   19d6c:	orr	r6, r6, r5, lsr lr
   19d70:	adc	r3, r1, r5
   19d74:	lsl	r1, r7, ip
   19d78:	orr	r1, r1, r6, lsl lr
   19d7c:	lsl	r0, r6, ip
   19d80:	orr	r1, r1, r6, lsr r8
   19d84:	subs	r0, r2, r0
   19d88:	mov	r4, r6
   19d8c:	mov	r5, r7
   19d90:	sbc	r1, r3, r1
   19d94:	cmp	r9, #0
   19d98:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   19d9c:	strd	r4, [r9]
   19da0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19da4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19da8:	mov	r7, r0
   19dac:	ldr	r6, [pc, #72]	; 19dfc <__assert_fail@plt+0x89e8>
   19db0:	ldr	r5, [pc, #72]	; 19e00 <__assert_fail@plt+0x89ec>
   19db4:	add	r6, pc, r6
   19db8:	add	r5, pc, r5
   19dbc:	sub	r6, r6, r5
   19dc0:	mov	r8, r1
   19dc4:	mov	r9, r2
   19dc8:	bl	11088 <fdopen@plt-0x20>
   19dcc:	asrs	r6, r6, #2
   19dd0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19dd4:	mov	r4, #0
   19dd8:	add	r4, r4, #1
   19ddc:	ldr	r3, [r5], #4
   19de0:	mov	r2, r9
   19de4:	mov	r1, r8
   19de8:	mov	r0, r7
   19dec:	blx	r3
   19df0:	cmp	r6, r4
   19df4:	bne	19dd8 <__assert_fail@plt+0x89c4>
   19df8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19dfc:	andeq	r2, r1, r4, asr r1
   19e00:	andeq	r2, r1, ip, asr #2
   19e04:	bx	lr
   19e08:	ldr	r3, [pc, #12]	; 19e1c <__assert_fail@plt+0x8a08>
   19e0c:	mov	r1, #0
   19e10:	add	r3, pc, r3
   19e14:	ldr	r2, [r3]
   19e18:	b	11300 <__cxa_atexit@plt>
   19e1c:	andeq	r2, r1, r4, lsr #6
   19e20:	mov	r2, r1
   19e24:	mov	r1, r0
   19e28:	mov	r0, #3
   19e2c:	b	111e0 <__fxstat64@plt>

Disassembly of section .fini:

00019e30 <.fini>:
   19e30:	push	{r3, lr}
   19e34:	pop	{r3, pc}
