
../repos/dvidelabs-flatcc-3b39ef7/test/flatc_compat/flatc_compat:     file format elf32-littlearm


Disassembly of section .init:

00010c94 <.init>:
   10c94:	push	{r3, lr}
   10c98:	bl	110d4 <_start@@Base+0x3c>
   10c9c:	pop	{r3, pc}

Disassembly of section .plt:

00010ca0 <strcmp@plt-0x14>:
   10ca0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ca4:	ldr	lr, [pc, #4]	; 10cb0 <strcmp@plt-0x4>
   10ca8:	add	lr, pc, lr
   10cac:	ldr	pc, [lr, #8]!
   10cb0:	andeq	r3, r1, r0, asr r3

00010cb4 <strcmp@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #77824	; 0x13000
   10cbc:	ldr	pc, [ip, #848]!	; 0x350

00010cc0 <printf@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #77824	; 0x13000
   10cc8:	ldr	pc, [ip, #840]!	; 0x348

00010ccc <fopen@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #77824	; 0x13000
   10cd4:	ldr	pc, [ip, #832]!	; 0x340

00010cd8 <free@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #77824	; 0x13000
   10ce0:	ldr	pc, [ip, #824]!	; 0x338

00010ce4 <memcpy@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #77824	; 0x13000
   10cec:	ldr	pc, [ip, #816]!	; 0x330

00010cf0 <ftell@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #77824	; 0x13000
   10cf8:	ldr	pc, [ip, #808]!	; 0x328

00010cfc <rewind@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #77824	; 0x13000
   10d04:	ldr	pc, [ip, #800]!	; 0x320

00010d08 <fread@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #77824	; 0x13000
   10d10:	ldr	pc, [ip, #792]!	; 0x318

00010d14 <puts@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #77824	; 0x13000
   10d1c:	ldr	pc, [ip, #784]!	; 0x310

00010d20 <malloc@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #77824	; 0x13000
   10d28:	ldr	pc, [ip, #776]!	; 0x308

00010d2c <__libc_start_main@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #77824	; 0x13000
   10d34:	ldr	pc, [ip, #768]!	; 0x300

00010d38 <__gmon_start__@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #77824	; 0x13000
   10d40:	ldr	pc, [ip, #760]!	; 0x2f8

00010d44 <exit@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #77824	; 0x13000
   10d4c:	ldr	pc, [ip, #752]!	; 0x2f0

00010d50 <fprintf@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #77824	; 0x13000
   10d58:	ldr	pc, [ip, #744]!	; 0x2e8

00010d5c <posix_memalign@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #77824	; 0x13000
   10d64:	ldr	pc, [ip, #736]!	; 0x2e0

00010d68 <strncpy@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #77824	; 0x13000
   10d70:	ldr	pc, [ip, #728]!	; 0x2d8

00010d74 <fclose@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #77824	; 0x13000
   10d7c:	ldr	pc, [ip, #720]!	; 0x2d0

00010d80 <fputc@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #77824	; 0x13000
   10d88:	ldr	pc, [ip, #712]!	; 0x2c8

00010d8c <fseek@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #77824	; 0x13000
   10d94:	ldr	pc, [ip, #704]!	; 0x2c0

00010d98 <fputs@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #77824	; 0x13000
   10da0:	ldr	pc, [ip, #696]!	; 0x2b8

00010da4 <abort@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #77824	; 0x13000
   10dac:	ldr	pc, [ip, #688]!	; 0x2b0

00010db0 <__assert_fail@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #77824	; 0x13000
   10db8:	ldr	pc, [ip, #680]!	; 0x2a8

Disassembly of section .text:

00010dc0 <main@@Base>:
   10dc0:	sub	r3, r0, #1
   10dc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10dc8:	sub	sp, sp, #28
   10dcc:	cmp	r3, #1
   10dd0:	bls	10dec <main@@Base+0x2c>
   10dd4:	ldr	r3, [pc, #644]	; 11060 <main@@Base+0x2a0>
   10dd8:	ldr	r0, [pc, #644]	; 11064 <main@@Base+0x2a4>
   10ddc:	ldr	r1, [r3]
   10de0:	bl	10d98 <fputs@plt>
   10de4:	mov	r0, #1
   10de8:	bl	10d44 <exit@plt>
   10dec:	cmp	r0, #2
   10df0:	ldr	r3, [pc, #624]	; 11068 <main@@Base+0x2a8>
   10df4:	ldreq	r2, [r1, #4]
   10df8:	ldr	r1, [pc, #620]	; 1106c <main@@Base+0x2ac>
   10dfc:	streq	r2, [r3]
   10e00:	ldr	r0, [r3]
   10e04:	bl	10ccc <fopen@plt>
   10e08:	subs	r6, r0, #0
   10e0c:	moveq	r5, r6
   10e10:	moveq	r4, r5
   10e14:	beq	10eb0 <main@@Base+0xf0>
   10e18:	mov	r2, #2
   10e1c:	mov	r1, #0
   10e20:	bl	10d8c <fseek@plt>
   10e24:	mov	r0, r6
   10e28:	bl	10cf0 <ftell@plt>
   10e2c:	cmp	r0, #1024	; 0x400
   10e30:	mov	r4, r0
   10e34:	bhi	10e5c <main@@Base+0x9c>
   10e38:	mov	r0, r6
   10e3c:	bl	10cfc <rewind@plt>
   10e40:	cmp	r4, #0
   10e44:	movne	r0, r4
   10e48:	moveq	r0, #1
   10e4c:	bl	10d20 <malloc@plt>
   10e50:	subs	r5, r0, #0
   10e54:	movne	r7, #0
   10e58:	bne	10e84 <main@@Base+0xc4>
   10e5c:	mov	r5, #0
   10e60:	mov	r0, r6
   10e64:	bl	10d74 <fclose@plt>
   10e68:	cmp	r5, #0
   10e6c:	beq	10eb0 <main@@Base+0xf0>
   10e70:	mov	r0, r5
   10e74:	mov	r5, #0
   10e78:	bl	10cd8 <free@plt>
   10e7c:	b	10eb0 <main@@Base+0xf0>
   10e80:	add	r7, r7, r0
   10e84:	mov	r3, r6
   10e88:	sub	r2, r4, r7
   10e8c:	mov	r1, #1
   10e90:	add	r0, r5, r7
   10e94:	bl	10d08 <fread@plt>
   10e98:	cmp	r0, #0
   10e9c:	bne	10e80 <main@@Base+0xc0>
   10ea0:	cmp	r4, r7
   10ea4:	bne	10e60 <main@@Base+0xa0>
   10ea8:	mov	r0, r6
   10eac:	bl	10d74 <fclose@plt>
   10eb0:	mov	r6, #0
   10eb4:	add	r2, r4, #255	; 0xff
   10eb8:	bic	r2, r2, #255	; 0xff
   10ebc:	mov	r1, #256	; 0x100
   10ec0:	add	r0, sp, #4
   10ec4:	str	r6, [sp, #4]
   10ec8:	bl	10d5c <posix_memalign@plt>
   10ecc:	cmp	r0, r6
   10ed0:	beq	10ee8 <main@@Base+0x128>
   10ed4:	ldr	r0, [sp, #4]
   10ed8:	cmp	r0, r6
   10edc:	beq	10ee8 <main@@Base+0x128>
   10ee0:	bl	10cd8 <free@plt>
   10ee4:	str	r6, [sp, #4]
   10ee8:	ldr	r6, [sp, #4]
   10eec:	mov	r1, r5
   10ef0:	mov	r2, r4
   10ef4:	mov	sl, #0
   10ef8:	ldr	r7, [pc, #352]	; 11060 <main@@Base+0x2a0>
   10efc:	ldr	fp, [pc, #364]	; 11070 <main@@Base+0x2b0>
   10f00:	mov	r0, r6
   10f04:	sub	r9, r6, #1
   10f08:	bl	10ce4 <memcpy@plt>
   10f0c:	mov	r0, r5
   10f10:	bl	10cd8 <free@plt>
   10f14:	ldr	r5, [r7]
   10f18:	ldr	r2, [pc, #340]	; 11074 <main@@Base+0x2b4>
   10f1c:	ldr	r1, [pc, #340]	; 11078 <main@@Base+0x2b8>
   10f20:	mov	r0, r5
   10f24:	bl	10d50 <fprintf@plt>
   10f28:	cmp	sl, r4
   10f2c:	and	r8, sl, #15
   10f30:	bne	10fb8 <main@@Base+0x1f8>
   10f34:	ldr	r9, [pc, #320]	; 1107c <main@@Base+0x2bc>
   10f38:	mov	r8, r4
   10f3c:	tst	r8, #15
   10f40:	bne	1103c <main@@Base+0x27c>
   10f44:	add	r2, sp, #4
   10f48:	ldr	r1, [pc, #304]	; 11080 <main@@Base+0x2c0>
   10f4c:	mov	r0, r5
   10f50:	bl	10d50 <fprintf@plt>
   10f54:	mov	r1, r4
   10f58:	ldr	r3, [pc, #292]	; 11084 <main@@Base+0x2c4>
   10f5c:	mov	r0, r6
   10f60:	ldr	r2, [pc, #288]	; 11088 <main@@Base+0x2c8>
   10f64:	bl	12808 <flatcc_verify_table_as_root@@Base>
   10f68:	cmp	r0, #0
   10f6c:	ldrne	r0, [pc, #280]	; 1108c <main@@Base+0x2cc>
   10f70:	ldrne	r1, [r7]
   10f74:	bne	10f9c <main@@Base+0x1dc>
   10f78:	mov	r1, r4
   10f7c:	mov	r0, r6
   10f80:	ldr	r3, [pc, #252]	; 11084 <main@@Base+0x2c4>
   10f84:	ldr	r2, [pc, #252]	; 11088 <main@@Base+0x2c8>
   10f88:	bl	12808 <flatcc_verify_table_as_root@@Base>
   10f8c:	cmp	r0, #0
   10f90:	beq	11050 <main@@Base+0x290>
   10f94:	ldr	r0, [pc, #244]	; 11090 <main@@Base+0x2d0>
   10f98:	ldr	r1, [r7]
   10f9c:	mvn	r4, #0
   10fa0:	bl	10d98 <fputs@plt>
   10fa4:	mov	r0, r6
   10fa8:	bl	10cd8 <free@plt>
   10fac:	mov	r0, r4
   10fb0:	add	sp, sp, #28
   10fb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10fb8:	cmp	r8, #0
   10fbc:	bne	11024 <main@@Base+0x264>
   10fc0:	cmp	sl, #0
   10fc4:	beq	10fd8 <main@@Base+0x218>
   10fc8:	add	r2, sp, #4
   10fcc:	ldr	r1, [pc, #172]	; 11080 <main@@Base+0x2c0>
   10fd0:	mov	r0, r5
   10fd4:	bl	10d50 <fprintf@plt>
   10fd8:	mov	r2, sl
   10fdc:	ldr	r1, [pc, #176]	; 11094 <main@@Base+0x2d4>
   10fe0:	mov	r0, r5
   10fe4:	bl	10d50 <fprintf@plt>
   10fe8:	ldrb	r2, [r9, #1]!
   10fec:	mov	r1, fp
   10ff0:	mov	r0, r5
   10ff4:	bl	10d50 <fprintf@plt>
   10ff8:	add	r3, sp, #24
   10ffc:	add	sl, sl, #1
   11000:	add	r8, r3, r8
   11004:	ldrb	r2, [r9]
   11008:	sub	r1, r2, #32
   1100c:	cmp	r1, #94	; 0x5e
   11010:	movhi	r2, #46	; 0x2e
   11014:	strb	r2, [r8, #-20]	; 0xffffffec
   11018:	mov	r2, #0
   1101c:	strb	r2, [r8, #-19]	; 0xffffffed
   11020:	b	10f28 <main@@Base+0x168>
   11024:	tst	sl, #7
   11028:	bne	10fe8 <main@@Base+0x228>
   1102c:	mov	r1, r5
   11030:	mov	r0, #32
   11034:	bl	10d80 <fputc@plt>
   11038:	b	10fe8 <main@@Base+0x228>
   1103c:	mov	r1, r5
   11040:	mov	r0, r9
   11044:	bl	10d98 <fputs@plt>
   11048:	add	r8, r8, #1
   1104c:	b	10f3c <main@@Base+0x17c>
   11050:	mov	r0, r6
   11054:	bl	11af8 <verify_monster@@Base>
   11058:	mov	r4, r0
   1105c:	b	10fa4 <main@@Base+0x1e4>
   11060:	andeq	r4, r2, r8, ror r0
   11064:	andeq	r3, r1, r1, lsr #8
   11068:	andeq	r4, r2, r0, ror r0
   1106c:	andeq	r3, r1, r1, ror #8
   11070:	andeq	r3, r1, ip, lsl #9
   11074:	andeq	r3, r1, r4, ror #8
   11078:	andeq	r3, r1, r9, ror r4
   1107c:	muleq	r1, r2, r4
   11080:	andeq	r3, r1, lr, ror r4
   11084:	andeq	r1, r1, r8, lsr #9
   11088:	muleq	r1, r6, r4
   1108c:	muleq	r1, fp, r4
   11090:	andeq	r3, r1, r2, asr #9
   11094:	andeq	r3, r1, r4, lsl #9

00011098 <_start@@Base>:
   11098:	mov	fp, #0
   1109c:	mov	lr, #0
   110a0:	pop	{r1}		; (ldr r1, [sp], #4)
   110a4:	mov	r2, sp
   110a8:	push	{r2}		; (str r2, [sp, #-4]!)
   110ac:	push	{r0}		; (str r0, [sp, #-4]!)
   110b0:	ldr	ip, [pc, #16]	; 110c8 <_start@@Base+0x30>
   110b4:	push	{ip}		; (str ip, [sp, #-4]!)
   110b8:	ldr	r0, [pc, #12]	; 110cc <_start@@Base+0x34>
   110bc:	ldr	r3, [pc, #12]	; 110d0 <_start@@Base+0x38>
   110c0:	bl	10d2c <__libc_start_main@plt>
   110c4:	bl	10da4 <abort@plt>
   110c8:	andeq	r2, r1, r8, ror #26
   110cc:	andeq	r0, r1, r0, asr #27
   110d0:	andeq	r2, r1, r8, lsl #26
   110d4:	ldr	r3, [pc, #20]	; 110f0 <_start@@Base+0x58>
   110d8:	ldr	r2, [pc, #20]	; 110f4 <_start@@Base+0x5c>
   110dc:	add	r3, pc, r3
   110e0:	ldr	r2, [r3, r2]
   110e4:	cmp	r2, #0
   110e8:	bxeq	lr
   110ec:	b	10d38 <__gmon_start__@plt>
   110f0:	andeq	r2, r1, ip, lsl pc
   110f4:	andeq	r0, r0, r4, rrx
   110f8:	ldr	r0, [pc, #24]	; 11118 <_start@@Base+0x80>
   110fc:	ldr	r3, [pc, #24]	; 1111c <_start@@Base+0x84>
   11100:	cmp	r3, r0
   11104:	bxeq	lr
   11108:	ldr	r3, [pc, #16]	; 11120 <_start@@Base+0x88>
   1110c:	cmp	r3, #0
   11110:	bxeq	lr
   11114:	bx	r3
   11118:	andeq	r4, r2, r4, ror r0
   1111c:	andeq	r4, r2, r4, ror r0
   11120:	andeq	r0, r0, r0
   11124:	ldr	r0, [pc, #36]	; 11150 <_start@@Base+0xb8>
   11128:	ldr	r1, [pc, #36]	; 11154 <_start@@Base+0xbc>
   1112c:	sub	r1, r1, r0
   11130:	asr	r1, r1, #2
   11134:	add	r1, r1, r1, lsr #31
   11138:	asrs	r1, r1, #1
   1113c:	bxeq	lr
   11140:	ldr	r3, [pc, #16]	; 11158 <_start@@Base+0xc0>
   11144:	cmp	r3, #0
   11148:	bxeq	lr
   1114c:	bx	r3
   11150:	andeq	r4, r2, r4, ror r0
   11154:	andeq	r4, r2, r4, ror r0
   11158:	andeq	r0, r0, r0
   1115c:	push	{r4, lr}
   11160:	ldr	r4, [pc, #24]	; 11180 <_start@@Base+0xe8>
   11164:	ldrb	r3, [r4]
   11168:	cmp	r3, #0
   1116c:	popne	{r4, pc}
   11170:	bl	110f8 <_start@@Base+0x60>
   11174:	mov	r3, #1
   11178:	strb	r3, [r4]
   1117c:	pop	{r4, pc}
   11180:	andeq	r4, r2, ip, ror r0
   11184:	b	11124 <_start@@Base+0x8c>
   11188:	mov	r0, #0
   1118c:	bx	lr
   11190:	mov	r3, #4
   11194:	mov	r1, #0
   11198:	mov	r2, r3
   1119c:	b	12394 <flatcc_verify_field@@Base>
   111a0:	push	{r4, lr}
   111a4:	mov	r2, #108	; 0x6c
   111a8:	ldr	r3, [pc, #8]	; 111b8 <_start@@Base+0x120>
   111ac:	ldr	r1, [pc, #8]	; 111bc <_start@@Base+0x124>
   111b0:	ldr	r0, [pc, #8]	; 111c0 <_start@@Base+0x128>
   111b4:	bl	10db0 <__assert_fail@plt>
   111b8:	andeq	r2, r1, r8, ror sp
   111bc:	ldrdeq	r2, [r1], -r8
   111c0:	andeq	r2, r1, r0, asr #28
   111c4:	cmp	r0, #0
   111c8:	push	{r4, lr}
   111cc:	bne	111e4 <_start@@Base+0x14c>
   111d0:	ldr	r3, [pc, #84]	; 1122c <_start@@Base+0x194>
   111d4:	movw	r2, #699	; 0x2bb
   111d8:	ldr	r1, [pc, #80]	; 11230 <_start@@Base+0x198>
   111dc:	ldr	r0, [pc, #80]	; 11234 <_start@@Base+0x19c>
   111e0:	bl	10db0 <__assert_fail@plt>
   111e4:	ldr	r3, [r0]
   111e8:	sub	r3, r0, r3
   111ec:	ldrh	r2, [r3]
   111f0:	cmp	r2, #11
   111f4:	bls	11204 <_start@@Base+0x16c>
   111f8:	ldrh	r2, [r3, #10]
   111fc:	cmp	r2, #0
   11200:	bne	11218 <_start@@Base+0x180>
   11204:	ldr	r3, [pc, #32]	; 1122c <_start@@Base+0x194>
   11208:	movw	r2, #699	; 0x2bb
   1120c:	ldr	r1, [pc, #28]	; 11230 <_start@@Base+0x198>
   11210:	ldr	r0, [pc, #32]	; 11238 <_start@@Base+0x1a0>
   11214:	b	111e0 <_start@@Base+0x148>
   11218:	add	r3, r0, r2
   1121c:	ldr	r0, [r0, r2]
   11220:	add	r0, r0, #4
   11224:	add	r0, r3, r0
   11228:	pop	{r4, pc}
   1122c:	muleq	r1, r2, sp
   11230:	andeq	r2, r1, r7, ror lr
   11234:	ldrdeq	r2, [r1], -r9
   11238:	strdeq	r2, [r1], -pc	; <UNPREDICTABLE>
   1123c:	push	{r4, lr}
   11240:	mov	r2, #380	; 0x17c
   11244:	ldr	r3, [pc, #8]	; 11254 <_start@@Base+0x1bc>
   11248:	ldr	r1, [pc, #8]	; 11258 <_start@@Base+0x1c0>
   1124c:	ldr	r0, [pc, #8]	; 1125c <_start@@Base+0x1c4>
   11250:	bl	10db0 <__assert_fail@plt>
   11254:	andeq	r2, r1, lr, lsr #27
   11258:	andeq	r2, r1, r7, ror lr
   1125c:	andeq	r2, r1, r0, asr #28
   11260:	mov	r3, #8
   11264:	push	{r4, lr}
   11268:	mov	r1, #0
   1126c:	mov	r2, r3
   11270:	mov	r4, r0
   11274:	bl	12394 <flatcc_verify_field@@Base>
   11278:	cmp	r0, #0
   1127c:	popne	{r4, pc}
   11280:	mov	r3, #4
   11284:	mov	r0, r4
   11288:	pop	{r4, lr}
   1128c:	mov	r2, r3
   11290:	mov	r1, #1
   11294:	b	12394 <flatcc_verify_field@@Base>
   11298:	mov	r3, #1
   1129c:	push	{r4, lr}
   112a0:	mov	r1, #0
   112a4:	mov	r2, r3
   112a8:	mov	r4, r0
   112ac:	bl	12394 <flatcc_verify_field@@Base>
   112b0:	cmp	r0, #0
   112b4:	popne	{r4, pc}
   112b8:	mov	r3, #1
   112bc:	mov	r0, r4
   112c0:	mov	r2, r3
   112c4:	mov	r1, r3
   112c8:	bl	12394 <flatcc_verify_field@@Base>
   112cc:	cmp	r0, #0
   112d0:	popne	{r4, pc}
   112d4:	mov	r3, #1
   112d8:	mov	r1, #2
   112dc:	mov	r2, r3
   112e0:	mov	r0, r4
   112e4:	bl	12394 <flatcc_verify_field@@Base>
   112e8:	cmp	r0, #0
   112ec:	popne	{r4, pc}
   112f0:	mov	r3, #1
   112f4:	mov	r0, r4
   112f8:	pop	{r4, lr}
   112fc:	mov	r2, r3
   11300:	mov	r1, #3
   11304:	b	12394 <flatcc_verify_field@@Base>
   11308:	mov	r2, #0
   1130c:	push	{r4, lr}
   11310:	mov	r4, r0
   11314:	mov	r1, r2
   11318:	bl	123f4 <flatcc_verify_string_field@@Base>
   1131c:	cmp	r0, #0
   11320:	popne	{r4, pc}
   11324:	mov	r3, #8
   11328:	mov	r1, #1
   1132c:	mov	r2, r3
   11330:	mov	r0, r4
   11334:	bl	12394 <flatcc_verify_field@@Base>
   11338:	cmp	r0, #0
   1133c:	popne	{r4, pc}
   11340:	mov	r3, #2
   11344:	mov	r0, r4
   11348:	pop	{r4, lr}
   1134c:	mov	r2, r3
   11350:	mov	r1, r3
   11354:	b	12394 <flatcc_verify_field@@Base>
   11358:	mov	r2, #0
   1135c:	push	{r4, lr}
   11360:	mov	r4, r0
   11364:	mov	r1, r2
   11368:	bl	123f4 <flatcc_verify_string_field@@Base>
   1136c:	subs	r2, r0, #0
   11370:	bne	11440 <_start@@Base+0x3a8>
   11374:	mov	r3, #4
   11378:	mov	r1, #1
   1137c:	mov	r2, r3
   11380:	mov	r0, r4
   11384:	bl	12394 <flatcc_verify_field@@Base>
   11388:	subs	r2, r0, #0
   1138c:	bne	11440 <_start@@Base+0x3a8>
   11390:	mov	r1, #2
   11394:	mov	r0, r4
   11398:	bl	123f4 <flatcc_verify_string_field@@Base>
   1139c:	subs	r2, r0, #0
   113a0:	bne	11440 <_start@@Base+0x3a8>
   113a4:	mov	r3, #8
   113a8:	mov	r1, #3
   113ac:	mov	r2, r3
   113b0:	mov	r0, r4
   113b4:	bl	12394 <flatcc_verify_field@@Base>
   113b8:	subs	r2, r0, #0
   113bc:	bne	11440 <_start@@Base+0x3a8>
   113c0:	mov	r1, #4
   113c4:	mov	r0, r4
   113c8:	bl	123f4 <flatcc_verify_string_field@@Base>
   113cc:	subs	r2, r0, #0
   113d0:	bne	11440 <_start@@Base+0x3a8>
   113d4:	mov	r3, #8
   113d8:	mov	r1, #5
   113dc:	mov	r2, r3
   113e0:	mov	r0, r4
   113e4:	bl	12394 <flatcc_verify_field@@Base>
   113e8:	subs	r2, r0, #0
   113ec:	bne	11440 <_start@@Base+0x3a8>
   113f0:	mov	r3, #4
   113f4:	mov	r1, #6
   113f8:	mov	r2, r3
   113fc:	mov	r0, r4
   11400:	bl	12394 <flatcc_verify_field@@Base>
   11404:	subs	r2, r0, #0
   11408:	bne	11440 <_start@@Base+0x3a8>
   1140c:	mov	r3, #8
   11410:	mov	r1, #7
   11414:	mov	r2, r3
   11418:	mov	r0, r4
   1141c:	bl	12394 <flatcc_verify_field@@Base>
   11420:	subs	r2, r0, #0
   11424:	bne	11440 <_start@@Base+0x3a8>
   11428:	mov	r3, #4
   1142c:	mov	r0, r4
   11430:	pop	{r4, lr}
   11434:	mov	r2, r3
   11438:	mov	r1, #8
   1143c:	b	12394 <flatcc_verify_field@@Base>
   11440:	mov	r0, r2
   11444:	pop	{r4, pc}
   11448:	mov	r2, #0
   1144c:	push	{r4, lr}
   11450:	mov	r4, r0
   11454:	mov	r1, r2
   11458:	ldr	r3, [pc, #60]	; 1149c <_start@@Base+0x404>
   1145c:	bl	12530 <flatcc_verify_table_field@@Base>
   11460:	subs	r2, r0, #0
   11464:	bne	11494 <_start@@Base+0x3fc>
   11468:	ldr	r3, [pc, #48]	; 114a0 <_start@@Base+0x408>
   1146c:	mov	r1, #1
   11470:	mov	r0, r4
   11474:	bl	12530 <flatcc_verify_table_field@@Base>
   11478:	subs	r2, r0, #0
   1147c:	bne	11494 <_start@@Base+0x3fc>
   11480:	mov	r0, r4
   11484:	ldr	r3, [pc, #24]	; 114a4 <_start@@Base+0x40c>
   11488:	mov	r1, #2
   1148c:	pop	{r4, lr}
   11490:	b	12530 <flatcc_verify_table_field@@Base>
   11494:	mov	r0, r2
   11498:	pop	{r4, pc}
   1149c:	andeq	r1, r1, r8, asr r3
   114a0:	andeq	r1, r1, r0, asr #21
   114a4:	andeq	r1, r1, r0, ror #4
   114a8:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   114ac:	mov	r2, #32
   114b0:	mov	r3, #16
   114b4:	mov	r1, #0
   114b8:	mov	r4, r0
   114bc:	bl	12394 <flatcc_verify_field@@Base>
   114c0:	subs	r2, r0, #0
   114c4:	bne	11878 <_start@@Base+0x7e0>
   114c8:	mov	r3, #2
   114cc:	mov	r0, r4
   114d0:	mov	r2, r3
   114d4:	mov	r1, r3
   114d8:	bl	12394 <flatcc_verify_field@@Base>
   114dc:	subs	r2, r0, #0
   114e0:	bne	11878 <_start@@Base+0x7e0>
   114e4:	mov	r3, #2
   114e8:	mov	r1, #1
   114ec:	mov	r2, r3
   114f0:	mov	r0, r4
   114f4:	bl	12394 <flatcc_verify_field@@Base>
   114f8:	subs	r2, r0, #0
   114fc:	bne	11878 <_start@@Base+0x7e0>
   11500:	mov	r2, #1
   11504:	mov	r1, #3
   11508:	mov	r0, r4
   1150c:	bl	123f4 <flatcc_verify_string_field@@Base>
   11510:	subs	r2, r0, #0
   11514:	bne	11878 <_start@@Base+0x7e0>
   11518:	mov	r3, #1
   1151c:	mov	r1, #6
   11520:	mov	r2, r3
   11524:	mov	r0, r4
   11528:	bl	12394 <flatcc_verify_field@@Base>
   1152c:	subs	r2, r0, #0
   11530:	bne	11878 <_start@@Base+0x7e0>
   11534:	mov	r5, #1
   11538:	mvn	r6, #0
   1153c:	mov	r3, r5
   11540:	mov	r1, #5
   11544:	mov	r0, r4
   11548:	stm	sp, {r5, r6}
   1154c:	bl	1242c <flatcc_verify_vector_field@@Base>
   11550:	subs	r2, r0, #0
   11554:	bne	11878 <_start@@Base+0x7e0>
   11558:	ldr	r3, [pc, #804]	; 11884 <_start@@Base+0x7ec>
   1155c:	mov	r1, #11
   11560:	mov	r0, r4
   11564:	bl	12578 <flatcc_verify_table_vector_field@@Base>
   11568:	subs	r2, r0, #0
   1156c:	bne	11878 <_start@@Base+0x7e0>
   11570:	mov	r1, #10
   11574:	mov	r0, r4
   11578:	bl	12480 <flatcc_verify_string_vector_field@@Base>
   1157c:	subs	r2, r0, #0
   11580:	bne	11878 <_start@@Base+0x7e0>
   11584:	mov	r1, #28
   11588:	mov	r0, r4
   1158c:	bl	12480 <flatcc_verify_string_vector_field@@Base>
   11590:	subs	r2, r0, #0
   11594:	bne	11878 <_start@@Base+0x7e0>
   11598:	mov	r3, r5
   1159c:	mov	r1, #24
   115a0:	stm	sp, {r5, r6}
   115a4:	mov	r0, r4
   115a8:	bl	1242c <flatcc_verify_vector_field@@Base>
   115ac:	subs	r2, r0, #0
   115b0:	bne	11878 <_start@@Base+0x7e0>
   115b4:	mvn	r3, #-536870912	; 0xe0000000
   115b8:	mov	r5, #4
   115bc:	mov	r2, #0
   115c0:	mov	r1, #29
   115c4:	mov	r0, r4
   115c8:	str	r5, [sp]
   115cc:	str	r3, [sp, #4]
   115d0:	mov	r3, #8
   115d4:	bl	1242c <flatcc_verify_vector_field@@Base>
   115d8:	subs	r2, r0, #0
   115dc:	bne	11878 <_start@@Base+0x7e0>
   115e0:	ldr	r6, [pc, #668]	; 11884 <_start@@Base+0x7ec>
   115e4:	mov	r1, #12
   115e8:	mov	r0, r4
   115ec:	mov	r3, r6
   115f0:	bl	12530 <flatcc_verify_table_field@@Base>
   115f4:	subs	r2, r0, #0
   115f8:	bne	11878 <_start@@Base+0x7e0>
   115fc:	ldr	r3, [pc, #644]	; 11888 <_start@@Base+0x7f0>
   11600:	mov	r1, #8
   11604:	mov	r0, r4
   11608:	bl	12a14 <flatcc_verify_union_field@@Base>
   1160c:	subs	r2, r0, #0
   11610:	bne	11878 <_start@@Base+0x7e0>
   11614:	mvn	r8, #-1073741824	; 0xc0000000
   11618:	mov	r7, #2
   1161c:	mov	r3, r5
   11620:	mov	r1, #9
   11624:	mov	r0, r4
   11628:	stm	sp, {r7, r8}
   1162c:	bl	1242c <flatcc_verify_vector_field@@Base>
   11630:	subs	r2, r0, #0
   11634:	bne	11878 <_start@@Base+0x7e0>
   11638:	mov	r3, r5
   1163c:	mov	r1, #31
   11640:	stm	sp, {r7, r8}
   11644:	mov	r0, r4
   11648:	bl	1242c <flatcc_verify_vector_field@@Base>
   1164c:	subs	r2, r0, #0
   11650:	bne	11878 <_start@@Base+0x7e0>
   11654:	str	r6, [sp, #4]
   11658:	mov	r6, #1
   1165c:	mov	r3, r2
   11660:	mov	r1, #13
   11664:	mov	r0, r4
   11668:	str	r6, [sp]
   1166c:	bl	12938 <flatcc_verify_table_as_nested_root@@Base>
   11670:	subs	r2, r0, #0
   11674:	bne	11878 <_start@@Base+0x7e0>
   11678:	ldr	r3, [pc, #524]	; 1188c <_start@@Base+0x7f4>
   1167c:	mov	r1, #14
   11680:	mov	r0, r4
   11684:	bl	12530 <flatcc_verify_table_field@@Base>
   11688:	subs	r2, r0, #0
   1168c:	bne	11878 <_start@@Base+0x7e0>
   11690:	mov	r2, r6
   11694:	mov	r3, r6
   11698:	mov	r1, #15
   1169c:	mov	r0, r4
   116a0:	bl	12394 <flatcc_verify_field@@Base>
   116a4:	subs	r2, r0, #0
   116a8:	bne	11878 <_start@@Base+0x7e0>
   116ac:	mov	r2, r5
   116b0:	mov	r3, r5
   116b4:	mov	r1, #16
   116b8:	mov	r0, r4
   116bc:	bl	12394 <flatcc_verify_field@@Base>
   116c0:	subs	r2, r0, #0
   116c4:	bne	11878 <_start@@Base+0x7e0>
   116c8:	mov	r2, r5
   116cc:	mov	r3, r5
   116d0:	mov	r1, #17
   116d4:	mov	r0, r4
   116d8:	bl	12394 <flatcc_verify_field@@Base>
   116dc:	subs	r2, r0, #0
   116e0:	bne	11878 <_start@@Base+0x7e0>
   116e4:	mov	r3, #8
   116e8:	mov	r1, #18
   116ec:	mov	r2, r3
   116f0:	mov	r0, r4
   116f4:	bl	12394 <flatcc_verify_field@@Base>
   116f8:	subs	r2, r0, #0
   116fc:	bne	11878 <_start@@Base+0x7e0>
   11700:	mov	r3, #8
   11704:	mov	r1, #19
   11708:	mov	r2, r3
   1170c:	mov	r0, r4
   11710:	bl	12394 <flatcc_verify_field@@Base>
   11714:	subs	r2, r0, #0
   11718:	bne	11878 <_start@@Base+0x7e0>
   1171c:	mov	r2, r5
   11720:	mov	r3, r5
   11724:	mov	r1, #20
   11728:	mov	r0, r4
   1172c:	bl	12394 <flatcc_verify_field@@Base>
   11730:	subs	r2, r0, #0
   11734:	bne	11878 <_start@@Base+0x7e0>
   11738:	mov	r2, r5
   1173c:	mov	r3, r5
   11740:	mov	r1, #21
   11744:	mov	r0, r4
   11748:	bl	12394 <flatcc_verify_field@@Base>
   1174c:	subs	r2, r0, #0
   11750:	bne	11878 <_start@@Base+0x7e0>
   11754:	mov	r3, #8
   11758:	mov	r1, #22
   1175c:	mov	r2, r3
   11760:	mov	r0, r4
   11764:	bl	12394 <flatcc_verify_field@@Base>
   11768:	subs	r2, r0, #0
   1176c:	bne	11878 <_start@@Base+0x7e0>
   11770:	mov	r3, #8
   11774:	mov	r1, #23
   11778:	mov	r2, r3
   1177c:	mov	r0, r4
   11780:	bl	12394 <flatcc_verify_field@@Base>
   11784:	subs	r2, r0, #0
   11788:	bne	11878 <_start@@Base+0x7e0>
   1178c:	mov	r2, r5
   11790:	mov	r3, r5
   11794:	mov	r1, #25
   11798:	mov	r0, r4
   1179c:	bl	12394 <flatcc_verify_field@@Base>
   117a0:	subs	r2, r0, #0
   117a4:	bne	11878 <_start@@Base+0x7e0>
   117a8:	mov	r2, r5
   117ac:	mov	r3, r5
   117b0:	mov	r1, #26
   117b4:	mov	r0, r4
   117b8:	bl	12394 <flatcc_verify_field@@Base>
   117bc:	subs	r2, r0, #0
   117c0:	bne	11878 <_start@@Base+0x7e0>
   117c4:	mov	r2, r5
   117c8:	mov	r3, r5
   117cc:	mov	r1, #27
   117d0:	mov	r0, r4
   117d4:	bl	12394 <flatcc_verify_field@@Base>
   117d8:	subs	r2, r0, #0
   117dc:	bne	11878 <_start@@Base+0x7e0>
   117e0:	mvn	r3, #0
   117e4:	mov	r1, #30
   117e8:	str	r6, [sp]
   117ec:	mov	r0, r4
   117f0:	str	r3, [sp, #4]
   117f4:	mov	r3, r6
   117f8:	bl	1242c <flatcc_verify_vector_field@@Base>
   117fc:	subs	r2, r0, #0
   11800:	bne	11878 <_start@@Base+0x7e0>
   11804:	mov	r5, #8
   11808:	mvn	r6, #-536870912	; 0xe0000000
   1180c:	mov	r2, #0
   11810:	mov	r3, r5
   11814:	mov	r1, #32
   11818:	mov	r0, r4
   1181c:	stm	sp, {r5, r6}
   11820:	bl	1242c <flatcc_verify_vector_field@@Base>
   11824:	subs	r2, r0, #0
   11828:	bne	11878 <_start@@Base+0x7e0>
   1182c:	mov	r3, r5
   11830:	mov	r1, #33	; 0x21
   11834:	stm	sp, {r5, r6}
   11838:	mov	r0, r4
   1183c:	bl	1242c <flatcc_verify_vector_field@@Base>
   11840:	subs	r2, r0, #0
   11844:	bne	11878 <_start@@Base+0x7e0>
   11848:	ldr	r3, [pc, #64]	; 11890 <_start@@Base+0x7f8>
   1184c:	mov	r1, #34	; 0x22
   11850:	mov	r0, r4
   11854:	bl	12530 <flatcc_verify_table_field@@Base>
   11858:	subs	r2, r0, #0
   1185c:	bne	11878 <_start@@Base+0x7e0>
   11860:	ldr	r3, [pc, #44]	; 11894 <_start@@Base+0x7fc>
   11864:	mov	r1, #35	; 0x23
   11868:	mov	r0, r4
   1186c:	add	sp, sp, #8
   11870:	pop	{r4, r5, r6, r7, r8, lr}
   11874:	b	12530 <flatcc_verify_table_field@@Base>
   11878:	mov	r0, r2
   1187c:	add	sp, sp, #8
   11880:	pop	{r4, r5, r6, r7, r8, pc}
   11884:	andeq	r1, r1, r8, lsr #9
   11888:	andeq	r1, r1, r0, lsl r9
   1188c:	andeq	r1, r1, r8, lsl #6
   11890:	andeq	r1, r1, r8, lsl #3
   11894:	muleq	r1, r8, r8
   11898:	push	{r0, r1, r4, r5, r6, lr}
   1189c:	mov	r4, #1
   118a0:	mvn	r6, #0
   118a4:	mov	r2, #0
   118a8:	mov	r3, r4
   118ac:	mov	r1, r2
   118b0:	mov	r5, r0
   118b4:	stm	sp, {r4, r6}
   118b8:	bl	1242c <flatcc_verify_vector_field@@Base>
   118bc:	cmp	r0, #0
   118c0:	bne	11904 <_start@@Base+0x86c>
   118c4:	mov	r2, r0
   118c8:	mov	r3, r4
   118cc:	stm	sp, {r4, r6}
   118d0:	mov	r1, r4
   118d4:	mov	r0, r5
   118d8:	bl	1242c <flatcc_verify_vector_field@@Base>
   118dc:	cmp	r0, #0
   118e0:	bne	11904 <_start@@Base+0x86c>
   118e4:	ldr	r3, [pc, #32]	; 1190c <_start@@Base+0x874>
   118e8:	mov	r2, r0
   118ec:	mov	r1, #2
   118f0:	str	r4, [sp]
   118f4:	str	r3, [sp, #4]
   118f8:	mov	r3, r0
   118fc:	mov	r0, r5
   11900:	bl	12938 <flatcc_verify_table_as_nested_root@@Base>
   11904:	add	sp, sp, #8
   11908:	pop	{r4, r5, r6, pc}
   1190c:	andeq	r1, r1, r8, lsr #9
   11910:	ldrb	r3, [r0, #12]
   11914:	sub	r3, r3, #1
   11918:	cmp	r3, #3
   1191c:	ldrls	pc, [pc, r3, lsl #2]
   11920:	b	11954 <_start@@Base+0x8bc>
   11924:	andeq	r1, r1, r4, lsr r9
   11928:	andeq	r1, r1, ip, lsr r9
   1192c:	andeq	r1, r1, r4, asr #18
   11930:	andeq	r1, r1, ip, asr #18
   11934:	ldr	r1, [pc, #32]	; 1195c <_start@@Base+0x8c4>
   11938:	b	1266c <flatcc_verify_union_table@@Base>
   1193c:	ldr	r1, [pc, #28]	; 11960 <_start@@Base+0x8c8>
   11940:	b	11938 <_start@@Base+0x8a0>
   11944:	ldr	r1, [pc, #24]	; 11964 <_start@@Base+0x8cc>
   11948:	b	11938 <_start@@Base+0x8a0>
   1194c:	ldr	r1, [pc, #20]	; 11968 <_start@@Base+0x8d0>
   11950:	b	11938 <_start@@Base+0x8a0>
   11954:	mov	r0, #0
   11958:	bx	lr
   1195c:	andeq	r1, r1, r8, lsr #9
   11960:	muleq	r1, r8, r2
   11964:			; <UNDEFINED> instruction: 0x00011ab8
   11968:	andeq	r1, r1, ip, ror #18
   1196c:	mov	r2, #0
   11970:	push	{r4, lr}
   11974:	mov	r4, r0
   11978:	mov	r1, r2
   1197c:	ldr	r3, [pc, #60]	; 119c0 <_start@@Base+0x928>
   11980:	bl	12530 <flatcc_verify_table_field@@Base>
   11984:	subs	r2, r0, #0
   11988:	bne	119b8 <_start@@Base+0x920>
   1198c:	ldr	r3, [pc, #48]	; 119c4 <_start@@Base+0x92c>
   11990:	mov	r1, #1
   11994:	mov	r0, r4
   11998:	bl	12530 <flatcc_verify_table_field@@Base>
   1199c:	subs	r2, r0, #0
   119a0:	bne	119b8 <_start@@Base+0x920>
   119a4:	mov	r0, r4
   119a8:	ldr	r3, [pc, #24]	; 119c8 <_start@@Base+0x930>
   119ac:	mov	r1, #3
   119b0:	pop	{r4, lr}
   119b4:	b	12b20 <flatcc_verify_union_vector_field@@Base>
   119b8:	mov	r0, r2
   119bc:	pop	{r4, pc}
   119c0:	andeq	r1, r1, r8, asr #8
   119c4:	andeq	r1, r1, ip, asr #19
   119c8:	andeq	r1, r1, r0, lsl r9
   119cc:	push	{r4, lr}
   119d0:	mov	r2, #0
   119d4:	mov	r1, #1
   119d8:	mov	r4, r0
   119dc:	ldr	r3, [pc, #108]	; 11a50 <_start@@Base+0x9b8>
   119e0:	bl	12a14 <flatcc_verify_union_field@@Base>
   119e4:	subs	r2, r0, #0
   119e8:	bne	11a48 <_start@@Base+0x9b0>
   119ec:	ldr	r3, [pc, #92]	; 11a50 <_start@@Base+0x9b8>
   119f0:	mov	r1, #3
   119f4:	mov	r0, r4
   119f8:	bl	12a14 <flatcc_verify_union_field@@Base>
   119fc:	subs	r2, r0, #0
   11a00:	bne	11a48 <_start@@Base+0x9b0>
   11a04:	ldr	r3, [pc, #68]	; 11a50 <_start@@Base+0x9b8>
   11a08:	mov	r1, #5
   11a0c:	mov	r0, r4
   11a10:	bl	12a14 <flatcc_verify_union_field@@Base>
   11a14:	subs	r2, r0, #0
   11a18:	bne	11a48 <_start@@Base+0x9b0>
   11a1c:	ldr	r3, [pc, #44]	; 11a50 <_start@@Base+0x9b8>
   11a20:	mov	r1, #7
   11a24:	mov	r0, r4
   11a28:	bl	12a14 <flatcc_verify_union_field@@Base>
   11a2c:	subs	r2, r0, #0
   11a30:	bne	11a48 <_start@@Base+0x9b0>
   11a34:	mov	r0, r4
   11a38:	ldr	r3, [pc, #16]	; 11a50 <_start@@Base+0x9b8>
   11a3c:	mov	r1, #9
   11a40:	pop	{r4, lr}
   11a44:	b	12b20 <flatcc_verify_union_vector_field@@Base>
   11a48:	mov	r0, r2
   11a4c:	pop	{r4, pc}
   11a50:	andeq	r1, r1, r4, asr sl
   11a54:	ldrb	r3, [r0, #12]
   11a58:	mov	r2, r0
   11a5c:	cmp	r3, #10
   11a60:	bhi	11a88 <_start@@Base+0x9f0>
   11a64:	cmp	r3, #9
   11a68:	bcs	11aa8 <_start@@Base+0xa10>
   11a6c:	cmp	r3, #2
   11a70:	beq	11aa0 <_start@@Base+0xa08>
   11a74:	cmp	r3, #8
   11a78:	moveq	r2, #2
   11a7c:	beq	11aac <_start@@Base+0xa14>
   11a80:	mov	r0, #0
   11a84:	bx	lr
   11a88:	cmp	r3, #11
   11a8c:	beq	11a98 <_start@@Base+0xa00>
   11a90:	cmp	r3, #255	; 0xff
   11a94:	bne	11a80 <_start@@Base+0x9e8>
   11a98:	mov	r0, r2
   11a9c:	b	126b8 <flatcc_verify_union_string@@Base>
   11aa0:	ldr	r1, [pc, #12]	; 11ab4 <_start@@Base+0xa1c>
   11aa4:	b	1266c <flatcc_verify_union_table@@Base>
   11aa8:	mov	r2, #4
   11aac:	mov	r1, r2
   11ab0:	b	12694 <flatcc_verify_union_struct@@Base>
   11ab4:	muleq	r1, r0, r1
   11ab8:	mov	r0, #0
   11abc:	bx	lr
   11ac0:	mov	r3, #8
   11ac4:	push	{r4, lr}
   11ac8:	mov	r1, #0
   11acc:	mov	r2, r3
   11ad0:	mov	r4, r0
   11ad4:	bl	12394 <flatcc_verify_field@@Base>
   11ad8:	cmp	r0, #0
   11adc:	popne	{r4, pc}
   11ae0:	mov	r3, #4
   11ae4:	mov	r0, r4
   11ae8:	pop	{r4, lr}
   11aec:	mov	r2, r3
   11af0:	mov	r1, #1
   11af4:	b	12394 <flatcc_verify_field@@Base>

00011af8 <verify_monster@@Base>:
   11af8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   11afc:	cmp	r0, #0
   11b00:	beq	11b24 <verify_monster@@Base+0x2c>
   11b04:	ldr	r3, [pc, #1104]	; 11f5c <verify_monster@@Base+0x464>
   11b08:	ldr	r2, [r0, #4]
   11b0c:	str	r3, [sp, #4]
   11b10:	cmp	r2, r3
   11b14:	bne	11b24 <verify_monster@@Base+0x2c>
   11b18:	ldr	r3, [r0]
   11b1c:	adds	r4, r0, r3
   11b20:	bne	11b30 <verify_monster@@Base+0x38>
   11b24:	ldr	r0, [pc, #1076]	; 11f60 <verify_monster@@Base+0x468>
   11b28:	bl	10d14 <puts@plt>
   11b2c:	b	11ca8 <verify_monster@@Base+0x1b0>
   11b30:	ldr	r5, [r0, r3]
   11b34:	sub	r5, r4, r5
   11b38:	ldrh	r6, [r5]
   11b3c:	cmp	r6, #9
   11b40:	bls	11b5c <verify_monster@@Base+0x64>
   11b44:	ldrh	r3, [r5, #8]
   11b48:	cmp	r3, #0
   11b4c:	beq	11b5c <verify_monster@@Base+0x64>
   11b50:	ldrsh	r3, [r4, r3]
   11b54:	cmp	r3, #80	; 0x50
   11b58:	beq	11b64 <verify_monster@@Base+0x6c>
   11b5c:	ldr	r0, [pc, #1024]	; 11f64 <verify_monster@@Base+0x46c>
   11b60:	b	11b28 <verify_monster@@Base+0x30>
   11b64:	ldrh	r3, [r5, #4]
   11b68:	cmp	r3, #0
   11b6c:	beq	11b78 <verify_monster@@Base+0x80>
   11b70:	adds	r3, r4, r3
   11b74:	bne	11b80 <verify_monster@@Base+0x88>
   11b78:	ldr	r0, [pc, #1000]	; 11f68 <verify_monster@@Base+0x470>
   11b7c:	b	11b28 <verify_monster@@Base+0x30>
   11b80:	sub	r0, r3, r0
   11b84:	tst	r0, #15
   11b88:	ldrne	r0, [pc, #988]	; 11f6c <verify_monster@@Base+0x474>
   11b8c:	bne	11b28 <verify_monster@@Base+0x30>
   11b90:	vldr	s15, [pc, #952]	; 11f50 <verify_monster@@Base+0x458>
   11b94:	vldr	s14, [r3]
   11b98:	vcmp.f32	s14, s15
   11b9c:	vmrs	APSR_nzcv, fpscr
   11ba0:	ldrne	r0, [pc, #968]	; 11f70 <verify_monster@@Base+0x478>
   11ba4:	bne	11b28 <verify_monster@@Base+0x30>
   11ba8:	vldr	s15, [pc, #932]	; 11f54 <verify_monster@@Base+0x45c>
   11bac:	vldr	s14, [r3, #4]
   11bb0:	vcmp.f32	s14, s15
   11bb4:	vmrs	APSR_nzcv, fpscr
   11bb8:	ldrne	r0, [pc, #948]	; 11f74 <verify_monster@@Base+0x47c>
   11bbc:	bne	11b28 <verify_monster@@Base+0x30>
   11bc0:	vldr	s15, [pc, #912]	; 11f58 <verify_monster@@Base+0x460>
   11bc4:	vldr	s14, [r3, #8]
   11bc8:	vcmp.f32	s14, s15
   11bcc:	vmrs	APSR_nzcv, fpscr
   11bd0:	ldrne	r0, [pc, #928]	; 11f78 <verify_monster@@Base+0x480>
   11bd4:	bne	11b28 <verify_monster@@Base+0x30>
   11bd8:	vldr	d7, [pc, #864]	; 11f40 <verify_monster@@Base+0x448>
   11bdc:	vldr	d6, [r3, #16]
   11be0:	vcmp.f64	d6, d7
   11be4:	vmrs	APSR_nzcv, fpscr
   11be8:	ldrne	r0, [pc, #908]	; 11f7c <verify_monster@@Base+0x484>
   11bec:	bne	11b28 <verify_monster@@Base+0x30>
   11bf0:	ldrsb	r2, [r3, #24]
   11bf4:	cmp	r2, #2
   11bf8:	ldrne	r0, [pc, #896]	; 11f80 <verify_monster@@Base+0x488>
   11bfc:	bne	11b28 <verify_monster@@Base+0x30>
   11c00:	ldrsh	r2, [r3, #26]
   11c04:	cmp	r2, #5
   11c08:	bne	11c18 <verify_monster@@Base+0x120>
   11c0c:	ldrsb	r3, [r3, #28]
   11c10:	cmp	r3, #6
   11c14:	beq	11c20 <verify_monster@@Base+0x128>
   11c18:	ldr	r0, [pc, #868]	; 11f84 <verify_monster@@Base+0x48c>
   11c1c:	b	11b28 <verify_monster@@Base+0x30>
   11c20:	mov	r0, r4
   11c24:	bl	111c4 <_start@@Base+0x12c>
   11c28:	subs	r3, r0, #0
   11c2c:	beq	11c3c <verify_monster@@Base+0x144>
   11c30:	ldr	r3, [r3, #-4]
   11c34:	cmp	r3, #9
   11c38:	beq	11c44 <verify_monster@@Base+0x14c>
   11c3c:	ldr	r0, [pc, #836]	; 11f88 <verify_monster@@Base+0x490>
   11c40:	b	11b28 <verify_monster@@Base+0x30>
   11c44:	ldr	r1, [pc, #832]	; 11f8c <verify_monster@@Base+0x494>
   11c48:	bl	10cb4 <strcmp@plt>
   11c4c:	subs	r1, r0, #0
   11c50:	ldrne	r0, [pc, #824]	; 11f90 <verify_monster@@Base+0x498>
   11c54:	bne	11b28 <verify_monster@@Base+0x30>
   11c58:	cmp	r6, #15
   11c5c:	bls	11c8c <verify_monster@@Base+0x194>
   11c60:	ldrh	r2, [r5, #14]
   11c64:	cmp	r2, #0
   11c68:	beq	11c8c <verify_monster@@Base+0x194>
   11c6c:	add	r3, r4, r2
   11c70:	ldr	r2, [r4, r2]
   11c74:	add	r2, r2, #4
   11c78:	adds	r3, r3, r2
   11c7c:	beq	11c8c <verify_monster@@Base+0x194>
   11c80:	ldr	r2, [r3, #-4]
   11c84:	cmp	r2, #5
   11c88:	beq	11c94 <verify_monster@@Base+0x19c>
   11c8c:	ldr	r0, [pc, #768]	; 11f94 <verify_monster@@Base+0x49c>
   11c90:	b	11b28 <verify_monster@@Base+0x30>
   11c94:	ldrb	r2, [r3, r1]
   11c98:	cmp	r2, r1
   11c9c:	beq	11cb4 <verify_monster@@Base+0x1bc>
   11ca0:	ldr	r0, [pc, #752]	; 11f98 <verify_monster@@Base+0x4a0>
   11ca4:	bl	10cc0 <printf@plt>
   11ca8:	mvn	r0, #0
   11cac:	add	sp, sp, #12
   11cb0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11cb4:	add	r1, r1, #1
   11cb8:	cmp	r1, #5
   11cbc:	bne	11c94 <verify_monster@@Base+0x19c>
   11cc0:	cmp	r6, #25
   11cc4:	bls	11ce8 <verify_monster@@Base+0x1f0>
   11cc8:	ldrh	r3, [r5, #24]
   11ccc:	cmp	r3, #0
   11cd0:	beq	11ce8 <verify_monster@@Base+0x1f0>
   11cd4:	add	r2, r4, r3
   11cd8:	ldr	r3, [r4, r3]
   11cdc:	add	r3, r3, #4
   11ce0:	adds	r7, r2, r3
   11ce4:	bne	11cf0 <verify_monster@@Base+0x1f8>
   11ce8:	ldr	r0, [pc, #684]	; 11f9c <verify_monster@@Base+0x4a4>
   11cec:	b	11b28 <verify_monster@@Base+0x30>
   11cf0:	ldr	r1, [r7, #-4]
   11cf4:	cmp	r1, #2
   11cf8:	ldrne	r0, [pc, #672]	; 11fa0 <verify_monster@@Base+0x4a8>
   11cfc:	bne	11b28 <verify_monster@@Base+0x30>
   11d00:	ldr	r0, [r2, r3]
   11d04:	ldr	r1, [pc, #664]	; 11fa4 <verify_monster@@Base+0x4ac>
   11d08:	add	r0, r0, #4
   11d0c:	add	r0, r7, r0
   11d10:	bl	10cb4 <strcmp@plt>
   11d14:	cmp	r0, #0
   11d18:	ldrne	r0, [pc, #648]	; 11fa8 <verify_monster@@Base+0x4b0>
   11d1c:	bne	11b28 <verify_monster@@Base+0x30>
   11d20:	ldr	r0, [r7, #4]
   11d24:	ldr	r1, [pc, #640]	; 11fac <verify_monster@@Base+0x4b4>
   11d28:	add	r0, r0, #8
   11d2c:	add	r0, r7, r0
   11d30:	bl	10cb4 <strcmp@plt>
   11d34:	cmp	r0, #0
   11d38:	ldrne	r0, [pc, #624]	; 11fb0 <verify_monster@@Base+0x4b8>
   11d3c:	bne	11b28 <verify_monster@@Base+0x30>
   11d40:	ldrh	r3, [r5, #18]
   11d44:	cmp	r3, #0
   11d48:	beq	11d58 <verify_monster@@Base+0x260>
   11d4c:	ldrb	r3, [r4, r3]
   11d50:	cmp	r3, #1
   11d54:	beq	11d60 <verify_monster@@Base+0x268>
   11d58:	ldr	r0, [pc, #596]	; 11fb4 <verify_monster@@Base+0x4bc>
   11d5c:	b	11b28 <verify_monster@@Base+0x30>
   11d60:	ldrh	r3, [r5, #20]
   11d64:	cmp	r3, #0
   11d68:	beq	11d7c <verify_monster@@Base+0x284>
   11d6c:	add	r0, r4, r3
   11d70:	ldr	r3, [r4, r3]
   11d74:	adds	r0, r0, r3
   11d78:	bne	11d84 <verify_monster@@Base+0x28c>
   11d7c:	ldr	r0, [pc, #564]	; 11fb8 <verify_monster@@Base+0x4c0>
   11d80:	b	11b28 <verify_monster@@Base+0x30>
   11d84:	bl	111c4 <_start@@Base+0x12c>
   11d88:	ldr	r1, [pc, #556]	; 11fbc <verify_monster@@Base+0x4c4>
   11d8c:	bl	10cb4 <strcmp@plt>
   11d90:	cmp	r0, #0
   11d94:	ldrne	r0, [pc, #548]	; 11fc0 <verify_monster@@Base+0x4c8>
   11d98:	bne	11b28 <verify_monster@@Base+0x30>
   11d9c:	ldrh	r3, [r5, #22]
   11da0:	cmp	r3, #0
   11da4:	beq	11dc8 <verify_monster@@Base+0x2d0>
   11da8:	ldr	r2, [r4, r3]
   11dac:	add	r1, r4, r3
   11db0:	add	r2, r2, #4
   11db4:	adds	r3, r1, r2
   11db8:	beq	11dc8 <verify_monster@@Base+0x2d0>
   11dbc:	ldr	ip, [r3, #-4]
   11dc0:	cmp	ip, #2
   11dc4:	beq	11dd0 <verify_monster@@Base+0x2d8>
   11dc8:	ldr	r0, [pc, #500]	; 11fc4 <verify_monster@@Base+0x4cc>
   11dcc:	b	11b28 <verify_monster@@Base+0x30>
   11dd0:	ldrsh	r2, [r1, r2]
   11dd4:	cmp	r2, #10
   11dd8:	ldrne	r0, [pc, #488]	; 11fc8 <verify_monster@@Base+0x4d0>
   11ddc:	bne	11b28 <verify_monster@@Base+0x30>
   11de0:	ldrsb	r2, [r3, #2]
   11de4:	cmp	r2, #20
   11de8:	ldrne	r0, [pc, #476]	; 11fcc <verify_monster@@Base+0x4d4>
   11dec:	bne	11b28 <verify_monster@@Base+0x30>
   11df0:	cmn	r3, #4
   11df4:	beq	11e04 <verify_monster@@Base+0x30c>
   11df8:	ldrsh	r2, [r3, #4]
   11dfc:	cmp	r2, #30
   11e00:	beq	11e0c <verify_monster@@Base+0x314>
   11e04:	ldr	r0, [pc, #452]	; 11fd0 <verify_monster@@Base+0x4d8>
   11e08:	b	11b28 <verify_monster@@Base+0x30>
   11e0c:	ldrsb	r3, [r3, #6]
   11e10:	cmp	r3, #40	; 0x28
   11e14:	ldrne	r0, [pc, #440]	; 11fd4 <verify_monster@@Base+0x4dc>
   11e18:	bne	11b28 <verify_monster@@Base+0x30>
   11e1c:	cmp	r6, #37	; 0x25
   11e20:	bls	11e40 <verify_monster@@Base+0x348>
   11e24:	ldrh	r3, [r5, #36]	; 0x24
   11e28:	cmp	r3, #0
   11e2c:	beq	11e40 <verify_monster@@Base+0x348>
   11e30:	ldr	r2, [pc, #416]	; 11fd8 <verify_monster@@Base+0x4e0>
   11e34:	ldr	r3, [r4, r3]
   11e38:	cmp	r3, r2
   11e3c:	beq	11e54 <verify_monster@@Base+0x35c>
   11e40:	ldr	r3, [pc, #428]	; 11ff4 <verify_monster@@Base+0x4fc>
   11e44:	mov	r2, #148	; 0x94
   11e48:	ldr	r1, [pc, #424]	; 11ff8 <verify_monster@@Base+0x500>
   11e4c:	ldr	r0, [pc, #392]	; 11fdc <verify_monster@@Base+0x4e4>
   11e50:	bl	10db0 <__assert_fail@plt>
   11e54:	cmp	r6, #39	; 0x27
   11e58:	bls	11e74 <verify_monster@@Base+0x37c>
   11e5c:	ldrh	r2, [r5, #38]	; 0x26
   11e60:	cmp	r2, #0
   11e64:	beq	11e74 <verify_monster@@Base+0x37c>
   11e68:	ldr	r2, [r4, r2]
   11e6c:	cmp	r2, r3
   11e70:	beq	11e88 <verify_monster@@Base+0x390>
   11e74:	ldr	r3, [pc, #376]	; 11ff4 <verify_monster@@Base+0x4fc>
   11e78:	mov	r2, #149	; 0x95
   11e7c:	ldr	r1, [pc, #372]	; 11ff8 <verify_monster@@Base+0x500>
   11e80:	ldr	r0, [pc, #344]	; 11fe0 <verify_monster@@Base+0x4e8>
   11e84:	b	11e50 <verify_monster@@Base+0x358>
   11e88:	cmp	r6, #41	; 0x29
   11e8c:	bls	11ebc <verify_monster@@Base+0x3c4>
   11e90:	ldrh	r1, [r5, #40]	; 0x28
   11e94:	cmp	r1, #0
   11e98:	beq	11ebc <verify_monster@@Base+0x3c4>
   11e9c:	add	r3, pc, #164	; 0xa4
   11ea0:	ldrd	r2, [r3]
   11ea4:	ldrd	r8, [r4, r1]
   11ea8:	cmp	r9, r3
   11eac:	mov	r9, r3
   11eb0:	cmpeq	r8, r2
   11eb4:	mov	r8, r2
   11eb8:	beq	11ed0 <verify_monster@@Base+0x3d8>
   11ebc:	ldr	r3, [pc, #304]	; 11ff4 <verify_monster@@Base+0x4fc>
   11ec0:	mov	r2, #150	; 0x96
   11ec4:	ldr	r1, [pc, #300]	; 11ff8 <verify_monster@@Base+0x500>
   11ec8:	ldr	r0, [pc, #276]	; 11fe4 <verify_monster@@Base+0x4ec>
   11ecc:	b	11e50 <verify_monster@@Base+0x358>
   11ed0:	cmp	r6, #43	; 0x2b
   11ed4:	bls	11ef4 <verify_monster@@Base+0x3fc>
   11ed8:	ldrh	r3, [r5, #42]	; 0x2a
   11edc:	cmp	r3, #0
   11ee0:	beq	11ef4 <verify_monster@@Base+0x3fc>
   11ee4:	ldrd	r2, [r3, r4]
   11ee8:	cmp	r3, r9
   11eec:	cmpeq	r2, r8
   11ef0:	beq	11f08 <verify_monster@@Base+0x410>
   11ef4:	ldr	r3, [pc, #248]	; 11ff4 <verify_monster@@Base+0x4fc>
   11ef8:	mov	r2, #151	; 0x97
   11efc:	ldr	r1, [pc, #244]	; 11ff8 <verify_monster@@Base+0x500>
   11f00:	ldr	r0, [pc, #224]	; 11fe8 <verify_monster@@Base+0x4f0>
   11f04:	b	11e50 <verify_monster@@Base+0x358>
   11f08:	cmp	r6, #45	; 0x2d
   11f0c:	bls	11f2c <verify_monster@@Base+0x434>
   11f10:	ldrh	r3, [r5, #44]	; 0x2c
   11f14:	cmp	r3, #0
   11f18:	beq	11f2c <verify_monster@@Base+0x434>
   11f1c:	ldr	r2, [pc, #200]	; 11fec <verify_monster@@Base+0x4f4>
   11f20:	ldr	r3, [r4, r3]
   11f24:	cmp	r3, r2
   11f28:	beq	12000 <verify_monster@@Base+0x508>
   11f2c:	ldr	r3, [pc, #192]	; 11ff4 <verify_monster@@Base+0x4fc>
   11f30:	mov	r2, #152	; 0x98
   11f34:	ldr	r1, [pc, #188]	; 11ff8 <verify_monster@@Base+0x500>
   11f38:	ldr	r0, [pc, #176]	; 11ff0 <verify_monster@@Base+0x4f8>
   11f3c:	b	11e50 <verify_monster@@Base+0x358>
   11f40:	andeq	r0, r0, r0
   11f44:	andmi	r0, r8, r0
   11f48:	vrhadd.s<illegal width 64>	d25, d27, d1
   11f4c:	cdpvs	0, 0, cr8, cr15, cr13, {6}
   11f50:	svccc	0x00800000
   11f54:	andmi	r0, r0, r0
   11f58:	submi	r0, r0, r0
   11f5c:	movtpl	r4, #61261	; 0xef4d
   11f60:	andeq	r2, r1, r0, lsr #30
   11f64:	andeq	r2, r1, r6, lsr pc
   11f68:	andeq	r2, r1, r8, asr pc
   11f6c:	andeq	r2, r1, fp, ror #30
   11f70:	muleq	r1, r2, pc	; <UNPREDICTABLE>
   11f74:			; <UNDEFINED> instruction: 0x00012fb3
   11f78:	ldrdeq	r2, [r1], -r4
   11f7c:	strdeq	r2, [r1], -r5
   11f80:	andeq	r3, r1, r9
   11f84:	andeq	r3, r1, lr, lsl r0
   11f88:	andeq	r3, r1, r6, lsr r0
   11f8c:	andeq	r3, r1, r1, asr r0
   11f90:	andeq	r3, r1, fp, asr r0
   11f94:	andeq	r3, r1, pc, rrx
   11f98:	andeq	r3, r1, sl, lsl #1
   11f9c:	andeq	r3, r1, r7, lsr #1
   11fa0:	andeq	r3, r1, r3, asr #1
   11fa4:	andeq	r3, r1, fp, ror #1
   11fa8:	strdeq	r3, [r1], -r1
   11fac:	andeq	r3, r1, r5, lsl r1
   11fb0:	andeq	r3, r1, fp, lsl r1
   11fb4:	andeq	r3, r1, r0, asr #2
   11fb8:	andeq	r3, r1, r0, asr r1
   11fbc:	andeq	r3, r1, sl, ror r1
   11fc0:	andeq	r3, r1, r7, ror #2
   11fc4:	andeq	r3, r1, pc, ror r1
   11fc8:	andeq	r3, r1, r3, lsr #3
   11fcc:			; <UNDEFINED> instruction: 0x000131b9
   11fd0:	andeq	r3, r1, pc, asr #3
   11fd4:	andeq	r3, r1, r5, ror #3
   11fd8:			; <UNDEFINED> instruction: 0xdd79c941
   11fdc:	andeq	r3, r1, ip, asr #4
   11fe0:	andeq	r3, r1, r1, lsl #5
   11fe4:			; <UNDEFINED> instruction: 0x000132b6
   11fe8:	strdeq	r3, [r1], -r5
   11fec:	mcrhi	4, 4, sl, cr1, cr1, {3}
   11ff0:	andeq	r3, r1, r4, lsr r3
   11ff4:	andeq	r2, r1, r9, asr #27
   11ff8:	strdeq	r3, [r1], -fp
   11ffc:	andeq	r3, r1, fp, ror #6
   12000:	cmp	r6, #47	; 0x2f
   12004:	bls	12020 <verify_monster@@Base+0x528>
   12008:	ldrh	r2, [r5, #46]	; 0x2e
   1200c:	cmp	r2, #0
   12010:	beq	12020 <verify_monster@@Base+0x528>
   12014:	ldr	r2, [r4, r2]
   12018:	cmp	r2, r3
   1201c:	beq	12034 <verify_monster@@Base+0x53c>
   12020:	ldr	r3, [pc, #-52]	; 11ff4 <verify_monster@@Base+0x4fc>
   12024:	mov	r2, #153	; 0x99
   12028:	ldr	r1, [pc, #-56]	; 11ff8 <verify_monster@@Base+0x500>
   1202c:	ldr	r0, [pc, #-56]	; 11ffc <verify_monster@@Base+0x504>
   12030:	b	11e50 <verify_monster@@Base+0x358>
   12034:	cmp	r6, #49	; 0x31
   12038:	bls	12060 <verify_monster@@Base+0x568>
   1203c:	ldrh	r3, [r5, #48]	; 0x30
   12040:	cmp	r3, #0
   12044:	beq	12060 <verify_monster@@Base+0x568>
   12048:	ldrd	r8, [r4, r3]
   1204c:	add	r3, pc, #92	; 0x5c
   12050:	ldrd	r2, [r3]
   12054:	cmp	r9, r3
   12058:	cmpeq	r8, r2
   1205c:	beq	12074 <verify_monster@@Base+0x57c>
   12060:	ldr	r3, [pc, #80]	; 120b8 <verify_monster@@Base+0x5c0>
   12064:	mov	r2, #154	; 0x9a
   12068:	ldr	r1, [pc, #76]	; 120bc <verify_monster@@Base+0x5c4>
   1206c:	ldr	r0, [pc, #76]	; 120c0 <verify_monster@@Base+0x5c8>
   12070:	b	11e50 <verify_monster@@Base+0x358>
   12074:	cmp	r6, #51	; 0x33
   12078:	bls	12098 <verify_monster@@Base+0x5a0>
   1207c:	ldrh	r3, [r5, #50]	; 0x32
   12080:	cmp	r3, #0
   12084:	beq	12098 <verify_monster@@Base+0x5a0>
   12088:	ldrd	r2, [r3, r4]
   1208c:	cmp	r3, r9
   12090:	cmpeq	r2, r8
   12094:	beq	11cac <verify_monster@@Base+0x1b4>
   12098:	ldr	r3, [pc, #24]	; 120b8 <verify_monster@@Base+0x5c0>
   1209c:	mov	r2, #155	; 0x9b
   120a0:	ldr	r1, [pc, #20]	; 120bc <verify_monster@@Base+0x5c4>
   120a4:	ldr	r0, [pc, #24]	; 120c4 <verify_monster@@Base+0x5cc>
   120a8:	b	11e50 <verify_monster@@Base+0x358>
   120ac:	nop	{0}
   120b0:			; <UNDEFINED> instruction: 0xc767ddf1
   120b4:	mvnsmi	r4, #220, 16	; 0xdc0000
   120b8:	andeq	r2, r1, r9, asr #27
   120bc:	strdeq	r3, [r1], -fp
   120c0:	andeq	r3, r1, r1, lsr #7
   120c4:	andeq	r3, r1, r1, ror #7
   120c8:	cmp	r2, #0
   120cc:	beq	12114 <verify_monster@@Base+0x61c>
   120d0:	add	r1, r2, r1
   120d4:	cmp	r1, r0
   120d8:	bhi	12114 <verify_monster@@Base+0x61c>
   120dc:	adds	r3, r1, r3
   120e0:	bcs	120f4 <verify_monster@@Base+0x5fc>
   120e4:	cmp	r3, r0
   120e8:	bls	120fc <verify_monster@@Base+0x604>
   120ec:	mov	r0, #9
   120f0:	bx	lr
   120f4:	mov	r0, #10
   120f8:	bx	lr
   120fc:	ldrh	r3, [sp]
   12100:	sub	r3, r3, #1
   12104:	tst	r3, r1
   12108:	moveq	r0, #0
   1210c:	movne	r0, #11
   12110:	bx	lr
   12114:	mov	r0, #18
   12118:	bx	lr
   1211c:	ldrh	r3, [r0, #22]
   12120:	add	r1, r1, #2
   12124:	lsl	r1, r1, #1
   12128:	uxth	r1, r1
   1212c:	cmp	r3, r1
   12130:	ldrhi	r3, [r0, #12]
   12134:	ldrhhi	r0, [r3, r1]
   12138:	movls	r0, #0
   1213c:	bx	lr
   12140:	push	{r4, lr}
   12144:	mov	r2, r0
   12148:	bl	1211c <verify_monster@@Base+0x624>
   1214c:	uxth	r3, r0
   12150:	cmp	r3, #0
   12154:	ldrne	r3, [r2, #16]
   12158:	uxtahne	r0, r3, r0
   1215c:	ldrne	r3, [r2]
   12160:	addne	r0, r3, r0
   12164:	moveq	r0, r3
   12168:	pop	{r4, pc}
   1216c:	push	{r4, r5, r6, lr}
   12170:	mov	r4, r3
   12174:	mov	r5, r0
   12178:	bl	1211c <verify_monster@@Base+0x624>
   1217c:	uxth	r3, r0
   12180:	cmp	r3, #0
   12184:	bne	1219c <verify_monster@@Base+0x6a4>
   12188:	cmp	r2, #0
   1218c:	str	r3, [r4]
   12190:	movne	r2, #4
   12194:	mov	r0, r2
   12198:	pop	{r4, r5, r6, pc}
   1219c:	ldrh	r2, [r5, #20]
   121a0:	uxth	r0, r0
   121a4:	add	r3, r0, #4
   121a8:	cmp	r2, r3
   121ac:	movcc	r2, #13
   121b0:	bcc	12194 <verify_monster@@Base+0x69c>
   121b4:	ldr	r3, [r5, #16]
   121b8:	add	r0, r0, r3
   121bc:	ands	r2, r0, #3
   121c0:	movne	r2, #12
   121c4:	streq	r0, [r4]
   121c8:	b	12194 <verify_monster@@Base+0x69c>
   121cc:	add	r3, r2, r3
   121d0:	ldrh	ip, [sp, #4]
   121d4:	cmp	r2, r3
   121d8:	bcs	1222c <verify_monster@@Base+0x734>
   121dc:	add	r2, r3, #4
   121e0:	cmp	r1, r2
   121e4:	bcc	1222c <verify_monster@@Base+0x734>
   121e8:	cmp	ip, #4
   121ec:	movcc	ip, #4
   121f0:	sub	ip, ip, #1
   121f4:	orr	ip, ip, #3
   121f8:	tst	ip, r2
   121fc:	bne	1222c <verify_monster@@Base+0x734>
   12200:	ldr	r3, [r0, r3]
   12204:	ldr	r0, [sp, #8]
   12208:	cmp	r3, r0
   1220c:	bhi	12234 <verify_monster@@Base+0x73c>
   12210:	ldr	r0, [sp]
   12214:	sub	r1, r1, r2
   12218:	mul	r0, r0, r3
   1221c:	cmp	r1, r0
   12220:	movcc	r0, #26
   12224:	movcs	r0, #0
   12228:	bx	lr
   1222c:	mov	r0, #16
   12230:	bx	lr
   12234:	mov	r0, #25
   12238:	bx	lr
   1223c:	push	{r4, lr}
   12240:	sub	sp, sp, #24
   12244:	ldr	ip, [sp, #32]
   12248:	sub	ip, ip, #1
   1224c:	cmp	ip, #0
   12250:	moveq	r0, #3
   12254:	str	ip, [sp, #8]
   12258:	beq	122fc <verify_monster@@Base+0x804>
   1225c:	add	r3, r2, r3
   12260:	cmp	r2, r3
   12264:	bcs	12304 <verify_monster@@Base+0x80c>
   12268:	add	r2, r3, #4
   1226c:	cmp	r1, r2
   12270:	bcc	12304 <verify_monster@@Base+0x80c>
   12274:	tst	r3, #3
   12278:	bne	12304 <verify_monster@@Base+0x80c>
   1227c:	ldr	r2, [r0, r3]
   12280:	str	r3, [sp, #16]
   12284:	subs	r2, r3, r2
   12288:	bmi	1230c <verify_monster@@Base+0x814>
   1228c:	tst	r2, #1
   12290:	bne	1230c <verify_monster@@Base+0x814>
   12294:	add	lr, r2, #2
   12298:	cmp	lr, r1
   1229c:	movhi	r0, #27
   122a0:	bhi	122fc <verify_monster@@Base+0x804>
   122a4:	ldrh	ip, [r0, r2]
   122a8:	add	r4, r0, r2
   122ac:	add	r2, ip, r2
   122b0:	strh	ip, [sp, #22]
   122b4:	cmp	r1, r2
   122b8:	bcc	12314 <verify_monster@@Base+0x81c>
   122bc:	tst	ip, #1
   122c0:	bne	12314 <verify_monster@@Base+0x81c>
   122c4:	cmp	ip, #3
   122c8:	movls	r0, #28
   122cc:	bls	122fc <verify_monster@@Base+0x804>
   122d0:	ldrh	r2, [r0, lr]
   122d4:	sub	r3, r1, r3
   122d8:	cmp	r3, r2
   122dc:	strh	r2, [sp, #20]
   122e0:	movcc	r0, #20
   122e4:	bcc	122fc <verify_monster@@Base+0x804>
   122e8:	strd	r0, [sp]
   122ec:	mov	r0, sp
   122f0:	ldr	r3, [sp, #36]	; 0x24
   122f4:	str	r4, [sp, #12]
   122f8:	blx	r3
   122fc:	add	sp, sp, #24
   12300:	pop	{r4, pc}
   12304:	mov	r0, #15
   12308:	b	122fc <verify_monster@@Base+0x804>
   1230c:	mov	r0, #29
   12310:	b	122fc <verify_monster@@Base+0x804>
   12314:	mov	r0, #30
   12318:	b	122fc <verify_monster@@Base+0x804>
   1231c:	add	r3, r2, r3
   12320:	cmp	r2, r3
   12324:	bcs	12368 <verify_monster@@Base+0x870>
   12328:	add	r2, r3, #4
   1232c:	cmp	r1, r2
   12330:	bcc	12368 <verify_monster@@Base+0x870>
   12334:	tst	r3, #3
   12338:	bne	12368 <verify_monster@@Base+0x870>
   1233c:	ldr	r3, [r0, r3]
   12340:	sub	r1, r1, r2
   12344:	add	ip, r3, #1
   12348:	cmp	r1, ip
   1234c:	bcc	12370 <verify_monster@@Base+0x878>
   12350:	add	r0, r0, r3
   12354:	ldrb	r3, [r0, r2]
   12358:	cmp	r3, #0
   1235c:	moveq	r0, #0
   12360:	movne	r0, #7
   12364:	bx	lr
   12368:	mov	r0, #17
   1236c:	bx	lr
   12370:	mov	r0, #8
   12374:	bx	lr

00012378 <flatcc_verify_error_string@@Base>:
   12378:	cmp	r0, #36	; 0x24
   1237c:	ldrls	r3, [pc, #8]	; 1238c <flatcc_verify_error_string@@Base+0x14>
   12380:	ldrls	r0, [r3, r0, lsl #2]
   12384:	ldrhi	r0, [pc, #4]	; 12390 <flatcc_verify_error_string@@Base+0x18>
   12388:	bx	lr
   1238c:	andeq	r3, r1, r4, lsl #10
   12390:	muleq	r1, r8, r5

00012394 <flatcc_verify_field@@Base>:
   12394:	push	{r4, r5, r6, lr}
   12398:	mov	r5, r0
   1239c:	mov	r4, r3
   123a0:	bl	1211c <verify_monster@@Base+0x624>
   123a4:	uxth	r1, r0
   123a8:	cmp	r1, #0
   123ac:	beq	123e4 <flatcc_verify_field@@Base+0x50>
   123b0:	ldrh	r3, [r5, #20]
   123b4:	add	r2, r2, r1
   123b8:	cmp	r2, r3
   123bc:	bhi	123ec <flatcc_verify_field@@Base+0x58>
   123c0:	ldr	r0, [r5]
   123c4:	sub	r4, r4, #1
   123c8:	ldr	r3, [r5, #16]
   123cc:	add	r0, r0, r3
   123d0:	add	r0, r0, r1
   123d4:	tst	r0, r4
   123d8:	moveq	r0, #0
   123dc:	movne	r0, #12
   123e0:	pop	{r4, r5, r6, pc}
   123e4:	mov	r0, r1
   123e8:	pop	{r4, r5, r6, pc}
   123ec:	mov	r0, #13
   123f0:	pop	{r4, r5, r6, pc}

000123f4 <flatcc_verify_string_field@@Base>:
   123f4:	push	{r0, r1, r4, lr}
   123f8:	add	r3, sp, #4
   123fc:	mov	r4, r0
   12400:	bl	1216c <verify_monster@@Base+0x674>
   12404:	cmp	r0, #0
   12408:	bne	12424 <flatcc_verify_string_field@@Base+0x30>
   1240c:	ldr	r2, [sp, #4]
   12410:	cmp	r2, #0
   12414:	beq	12424 <flatcc_verify_string_field@@Base+0x30>
   12418:	ldrd	r0, [r4]
   1241c:	ldr	r3, [r0, r2]
   12420:	bl	1231c <verify_monster@@Base+0x824>
   12424:	add	sp, sp, #8
   12428:	pop	{r4, pc}

0001242c <flatcc_verify_vector_field@@Base>:
   1242c:	push	{r4, r5, lr}
   12430:	sub	sp, sp, #28
   12434:	mov	r5, r3
   12438:	add	r3, sp, #20
   1243c:	mov	r4, r0
   12440:	bl	1216c <verify_monster@@Base+0x674>
   12444:	cmp	r0, #0
   12448:	bne	12478 <flatcc_verify_vector_field@@Base+0x4c>
   1244c:	ldr	r2, [sp, #20]
   12450:	cmp	r2, #0
   12454:	beq	12478 <flatcc_verify_vector_field@@Base+0x4c>
   12458:	ldr	r3, [sp, #44]	; 0x2c
   1245c:	ldrd	r0, [r4]
   12460:	str	r5, [sp]
   12464:	str	r3, [sp, #8]
   12468:	ldrh	r3, [sp, #40]	; 0x28
   1246c:	str	r3, [sp, #4]
   12470:	ldr	r3, [r0, r2]
   12474:	bl	121cc <verify_monster@@Base+0x6d4>
   12478:	add	sp, sp, #28
   1247c:	pop	{r4, r5, pc}

00012480 <flatcc_verify_string_vector_field@@Base>:
   12480:	push	{r4, r5, r6, r7, r8, r9, lr}
   12484:	sub	sp, sp, #28
   12488:	mov	r7, r0
   1248c:	add	r3, sp, #20
   12490:	bl	1216c <verify_monster@@Base+0x674>
   12494:	subs	r6, r0, #0
   12498:	bne	124f8 <flatcc_verify_string_vector_field@@Base+0x78>
   1249c:	ldr	r4, [sp, #20]
   124a0:	cmp	r4, #0
   124a4:	beq	124f8 <flatcc_verify_string_vector_field@@Base+0x78>
   124a8:	ldm	r7, {r5, r8}
   124ac:	mvn	r3, #-1073741824	; 0xc0000000
   124b0:	mov	r2, r4
   124b4:	ldr	r7, [r5, r4]
   124b8:	mov	r1, r8
   124bc:	mov	r0, r5
   124c0:	str	r3, [sp, #8]
   124c4:	mov	r3, #4
   124c8:	str	r3, [sp]
   124cc:	str	r3, [sp, #4]
   124d0:	mov	r3, r7
   124d4:	bl	121cc <verify_monster@@Base+0x6d4>
   124d8:	subs	r6, r0, #0
   124dc:	bne	124f8 <flatcc_verify_string_vector_field@@Base+0x78>
   124e0:	add	r4, r4, r7
   124e4:	mov	r7, r6
   124e8:	ldr	r9, [r5, r4]
   124ec:	add	r4, r4, #4
   124f0:	cmp	r9, r7
   124f4:	bne	12504 <flatcc_verify_string_vector_field@@Base+0x84>
   124f8:	mov	r0, r6
   124fc:	add	sp, sp, #28
   12500:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12504:	mov	r2, r4
   12508:	mov	r1, r8
   1250c:	ldr	r3, [r5, r4]
   12510:	mov	r0, r5
   12514:	bl	1231c <verify_monster@@Base+0x824>
   12518:	cmp	r0, #0
   1251c:	addeq	r7, r7, #1
   12520:	addeq	r4, r4, #4
   12524:	beq	124f0 <flatcc_verify_string_vector_field@@Base+0x70>
   12528:	mov	r6, r0
   1252c:	b	124f8 <flatcc_verify_string_vector_field@@Base+0x78>

00012530 <flatcc_verify_table_field@@Base>:
   12530:	push	{r4, r5, lr}
   12534:	sub	sp, sp, #20
   12538:	mov	r5, r3
   1253c:	add	r3, sp, #12
   12540:	mov	r4, r0
   12544:	bl	1216c <verify_monster@@Base+0x674>
   12548:	cmp	r0, #0
   1254c:	bne	12570 <flatcc_verify_table_field@@Base+0x40>
   12550:	ldr	r2, [sp, #12]
   12554:	cmp	r2, #0
   12558:	beq	12570 <flatcc_verify_table_field@@Base+0x40>
   1255c:	ldrd	r0, [r4]
   12560:	ldr	r3, [r4, #8]
   12564:	stm	sp, {r3, r5}
   12568:	ldr	r3, [r0, r2]
   1256c:	bl	1223c <verify_monster@@Base+0x744>
   12570:	add	sp, sp, #20
   12574:	pop	{r4, r5, pc}

00012578 <flatcc_verify_table_vector_field@@Base>:
   12578:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1257c:	sub	sp, sp, #36	; 0x24
   12580:	mov	sl, r3
   12584:	add	r3, sp, #28
   12588:	mov	r7, r0
   1258c:	bl	1216c <verify_monster@@Base+0x674>
   12590:	subs	r6, r0, #0
   12594:	bne	12610 <flatcc_verify_table_vector_field@@Base+0x98>
   12598:	ldr	r4, [sp, #28]
   1259c:	cmp	r4, #0
   125a0:	beq	12610 <flatcc_verify_table_vector_field@@Base+0x98>
   125a4:	ldm	r7, {r5, r9}
   125a8:	ldr	r7, [r7, #8]
   125ac:	ldr	r8, [r5, r4]
   125b0:	cmp	r7, #0
   125b4:	movle	r6, #3
   125b8:	ble	12610 <flatcc_verify_table_vector_field@@Base+0x98>
   125bc:	mvn	r3, #-1073741824	; 0xc0000000
   125c0:	mov	r2, r4
   125c4:	mov	r1, r9
   125c8:	mov	r0, r5
   125cc:	str	r3, [sp, #8]
   125d0:	mov	r3, #4
   125d4:	str	r3, [sp]
   125d8:	str	r3, [sp, #4]
   125dc:	mov	r3, r8
   125e0:	bl	121cc <verify_monster@@Base+0x6d4>
   125e4:	cmp	r0, #0
   125e8:	bne	12658 <flatcc_verify_table_vector_field@@Base+0xe0>
   125ec:	add	r4, r4, r8
   125f0:	sub	r7, r7, #1
   125f4:	ldr	r3, [r5, r4]
   125f8:	mov	r8, r6
   125fc:	add	r4, r4, #4
   12600:	str	r3, [sp, #20]
   12604:	ldr	r3, [sp, #20]
   12608:	cmp	r3, r8
   1260c:	bne	1261c <flatcc_verify_table_vector_field@@Base+0xa4>
   12610:	mov	r0, r6
   12614:	add	sp, sp, #36	; 0x24
   12618:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1261c:	mov	r2, r4
   12620:	mov	r1, r9
   12624:	stm	sp, {r7, sl}
   12628:	mov	r0, r5
   1262c:	ldr	r3, [r5, r4]
   12630:	add	fp, r5, r4
   12634:	bl	1223c <verify_monster@@Base+0x744>
   12638:	cmp	r0, #0
   1263c:	beq	12660 <flatcc_verify_table_vector_field@@Base+0xe8>
   12640:	mov	r2, r4
   12644:	mov	r1, r9
   12648:	stm	sp, {r7, sl}
   1264c:	mov	r0, r5
   12650:	ldr	r3, [fp]
   12654:	bl	1223c <verify_monster@@Base+0x744>
   12658:	mov	r6, r0
   1265c:	b	12610 <flatcc_verify_table_vector_field@@Base+0x98>
   12660:	add	r8, r8, #1
   12664:	add	r4, r4, #4
   12668:	b	12604 <flatcc_verify_table_vector_field@@Base+0x8c>

0001266c <flatcc_verify_union_table@@Base>:
   1266c:	push	{r0, r1, r2, lr}
   12670:	str	r1, [sp, #4]
   12674:	ldr	r3, [r0, #8]
   12678:	str	r3, [sp]
   1267c:	ldr	r1, [r0, #4]
   12680:	ldrd	r2, [r0, #16]
   12684:	ldr	r0, [r0]
   12688:	bl	1223c <verify_monster@@Base+0x744>
   1268c:	add	sp, sp, #12
   12690:	pop	{pc}		; (ldr pc, [sp], #4)

00012694 <flatcc_verify_union_struct@@Base>:
   12694:	push	{r0, r1, r2, lr}
   12698:	mov	r3, r1
   1269c:	str	r2, [sp]
   126a0:	ldr	r1, [r0, #16]
   126a4:	ldr	r2, [r0, #20]
   126a8:	ldr	r0, [r0, #4]
   126ac:	bl	120c8 <verify_monster@@Base+0x5d0>
   126b0:	add	sp, sp, #12
   126b4:	pop	{pc}		; (ldr pc, [sp], #4)

000126b8 <flatcc_verify_union_string@@Base>:
   126b8:	ldr	r1, [r0, #4]
   126bc:	ldrd	r2, [r0, #16]
   126c0:	ldr	r0, [r0]
   126c4:	b	1231c <verify_monster@@Base+0x824>

000126c8 <flatcc_verify_buffer_header@@Base>:
   126c8:	tst	r0, #3
   126cc:	push	{r0, r1, r4, lr}
   126d0:	movne	r0, #5
   126d4:	bne	126fc <flatcc_verify_buffer_header@@Base+0x34>
   126d8:	cmn	r1, #9
   126dc:	movhi	r0, #6
   126e0:	bhi	126fc <flatcc_verify_buffer_header@@Base+0x34>
   126e4:	cmp	r1, #7
   126e8:	movls	r0, #1
   126ec:	bls	126fc <flatcc_verify_buffer_header@@Base+0x34>
   126f0:	cmp	r2, #0
   126f4:	bne	12704 <flatcc_verify_buffer_header@@Base+0x3c>
   126f8:	mov	r0, #0
   126fc:	add	sp, sp, #8
   12700:	pop	{r4, pc}
   12704:	mov	r1, r2
   12708:	mov	r2, #4
   1270c:	mov	r4, r0
   12710:	add	r0, sp, r2
   12714:	bl	10d68 <strncpy@plt>
   12718:	ldr	r2, [r4, #4]
   1271c:	ldr	r3, [sp, #4]
   12720:	cmp	r3, #0
   12724:	cmpne	r2, r3
   12728:	movne	r0, #2
   1272c:	beq	126f8 <flatcc_verify_buffer_header@@Base+0x30>
   12730:	b	126fc <flatcc_verify_buffer_header@@Base+0x34>

00012734 <flatcc_verify_typed_buffer_header@@Base>:
   12734:	tst	r0, #3
   12738:	bne	12768 <flatcc_verify_typed_buffer_header@@Base+0x34>
   1273c:	cmn	r1, #9
   12740:	bhi	12770 <flatcc_verify_typed_buffer_header@@Base+0x3c>
   12744:	cmp	r1, #7
   12748:	bls	12778 <flatcc_verify_typed_buffer_header@@Base+0x44>
   1274c:	cmp	r2, #0
   12750:	beq	12780 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   12754:	ldr	r0, [r0, #4]
   12758:	cmp	r2, r0
   1275c:	movne	r0, #2
   12760:	moveq	r0, #0
   12764:	bx	lr
   12768:	mov	r0, #5
   1276c:	bx	lr
   12770:	mov	r0, #6
   12774:	bx	lr
   12778:	mov	r0, #1
   1277c:	bx	lr
   12780:	mov	r0, r2
   12784:	bx	lr

00012788 <flatcc_verify_struct_as_root@@Base>:
   12788:	push	{r4, r5, r6, r7, r8, lr}
   1278c:	mov	r4, r1
   12790:	mov	r5, r0
   12794:	mov	r8, r2
   12798:	mov	r6, r3
   1279c:	ldrh	r7, [sp, #24]
   127a0:	bl	126c8 <flatcc_verify_buffer_header@@Base>
   127a4:	subs	r1, r0, #0
   127a8:	beq	127c0 <flatcc_verify_struct_as_root@@Base+0x38>
   127ac:	mov	r2, r8
   127b0:	mov	r1, r4
   127b4:	mov	r0, r5
   127b8:	pop	{r4, r5, r6, r7, r8, lr}
   127bc:	b	126c8 <flatcc_verify_buffer_header@@Base>
   127c0:	mov	r3, r6
   127c4:	mov	r0, r4
   127c8:	ldr	r2, [r5]
   127cc:	str	r7, [sp, #24]
   127d0:	pop	{r4, r5, r6, r7, r8, lr}
   127d4:	b	120c8 <verify_monster@@Base+0x5d0>

000127d8 <flatcc_verify_struct_as_typed_root@@Base>:
   127d8:	push	{r4, r5, r6, lr}
   127dc:	mov	r4, r1
   127e0:	mov	r5, r0
   127e4:	bl	12734 <flatcc_verify_typed_buffer_header@@Base>
   127e8:	subs	r1, r0, #0
   127ec:	ldrh	r6, [sp, #16]
   127f0:	popne	{r4, r5, r6, pc}
   127f4:	mov	r0, r4
   127f8:	ldr	r2, [r5]
   127fc:	str	r6, [sp, #16]
   12800:	pop	{r4, r5, r6, lr}
   12804:	b	120c8 <verify_monster@@Base+0x5d0>

00012808 <flatcc_verify_table_as_root@@Base>:
   12808:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1280c:	mov	r7, r2
   12810:	mov	r4, r0
   12814:	mov	r5, r1
   12818:	mov	r6, r3
   1281c:	bl	126c8 <flatcc_verify_buffer_header@@Base>
   12820:	subs	r2, r0, #0
   12824:	beq	12840 <flatcc_verify_table_as_root@@Base+0x38>
   12828:	mov	r2, r7
   1282c:	mov	r1, r5
   12830:	mov	r0, r4
   12834:	add	sp, sp, #12
   12838:	pop	{r4, r5, r6, r7, lr}
   1283c:	b	126c8 <flatcc_verify_buffer_header@@Base>
   12840:	mov	r3, #100	; 0x64
   12844:	mov	r1, r5
   12848:	mov	r0, r4
   1284c:	stm	sp, {r3, r6}
   12850:	ldr	r3, [r4]
   12854:	bl	1223c <verify_monster@@Base+0x744>
   12858:	add	sp, sp, #12
   1285c:	pop	{r4, r5, r6, r7, pc}

00012860 <flatcc_verify_table_as_typed_root@@Base>:
   12860:	push	{r0, r1, r2, r4, r5, lr}
   12864:	mov	r4, r0
   12868:	bl	12734 <flatcc_verify_typed_buffer_header@@Base>
   1286c:	cmp	r0, #0
   12870:	bne	12890 <flatcc_verify_table_as_typed_root@@Base+0x30>
   12874:	str	r3, [sp, #4]
   12878:	mov	r3, #100	; 0x64
   1287c:	mov	r2, r0
   12880:	mov	r0, r4
   12884:	str	r3, [sp]
   12888:	ldr	r3, [r4]
   1288c:	bl	1223c <verify_monster@@Base+0x744>
   12890:	add	sp, sp, #12
   12894:	pop	{r4, r5, pc}

00012898 <flatcc_verify_struct_as_nested_root@@Base>:
   12898:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1289c:	mvn	sl, #0
   128a0:	mov	r7, #1
   128a4:	mov	r8, r3
   128a8:	mov	r5, r0
   128ac:	mov	r6, r1
   128b0:	mov	fp, r2
   128b4:	ldrh	r4, [sp, #52]	; 0x34
   128b8:	stm	sp, {r7, sl}
   128bc:	ldr	r9, [sp, #48]	; 0x30
   128c0:	mov	r3, r4
   128c4:	bl	1242c <flatcc_verify_vector_field@@Base>
   128c8:	cmp	r0, #0
   128cc:	beq	128f4 <flatcc_verify_struct_as_nested_root@@Base+0x5c>
   128d0:	mov	r3, r4
   128d4:	mov	r2, fp
   128d8:	str	r7, [sp, #48]	; 0x30
   128dc:	mov	r1, r6
   128e0:	mov	r0, r5
   128e4:	str	sl, [sp, #52]	; 0x34
   128e8:	add	sp, sp, #12
   128ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128f0:	b	1242c <flatcc_verify_vector_field@@Base>
   128f4:	mov	r1, r6
   128f8:	mov	r0, r5
   128fc:	bl	12140 <verify_monster@@Base+0x648>
   12900:	subs	r1, r0, #0
   12904:	beq	12930 <flatcc_verify_struct_as_nested_root@@Base+0x98>
   12908:	ldr	ip, [r1]
   1290c:	mov	r3, r9
   12910:	mov	r2, r8
   12914:	str	r4, [sp, #48]	; 0x30
   12918:	add	r0, r1, ip
   1291c:	ldr	r1, [r1, ip]
   12920:	add	r0, r0, #4
   12924:	add	sp, sp, #12
   12928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1292c:	b	12788 <flatcc_verify_struct_as_root@@Base>
   12930:	add	sp, sp, #12
   12934:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012938 <flatcc_verify_table_as_nested_root@@Base>:
   12938:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1293c:	mvn	sl, #0
   12940:	mov	r7, #1
   12944:	mov	r8, r3
   12948:	mov	r6, r0
   1294c:	mov	r4, r1
   12950:	mov	fp, r2
   12954:	ldrh	r5, [sp, #48]	; 0x30
   12958:	stm	sp, {r7, sl}
   1295c:	ldr	r9, [sp, #52]	; 0x34
   12960:	mov	r3, r5
   12964:	bl	1242c <flatcc_verify_vector_field@@Base>
   12968:	cmp	r0, #0
   1296c:	beq	12994 <flatcc_verify_table_as_nested_root@@Base+0x5c>
   12970:	mov	r3, r5
   12974:	mov	r2, fp
   12978:	str	r7, [sp, #48]	; 0x30
   1297c:	mov	r1, r4
   12980:	mov	r0, r6
   12984:	str	sl, [sp, #52]	; 0x34
   12988:	add	sp, sp, #12
   1298c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12990:	b	1242c <flatcc_verify_vector_field@@Base>
   12994:	mov	r1, r4
   12998:	mov	r0, r6
   1299c:	bl	12140 <verify_monster@@Base+0x648>
   129a0:	subs	r3, r0, #0
   129a4:	beq	12a0c <flatcc_verify_table_as_nested_root@@Base+0xd4>
   129a8:	ldr	r2, [r3]
   129ac:	ldr	r5, [r3, r2]
   129b0:	add	r7, r3, r2
   129b4:	mov	r2, r8
   129b8:	add	r4, r7, #4
   129bc:	mov	r0, r4
   129c0:	mov	r1, r5
   129c4:	bl	126c8 <flatcc_verify_buffer_header@@Base>
   129c8:	subs	r2, r0, #0
   129cc:	beq	129e8 <flatcc_verify_table_as_nested_root@@Base+0xb0>
   129d0:	mov	r2, r8
   129d4:	mov	r1, r5
   129d8:	mov	r0, r4
   129dc:	add	sp, sp, #12
   129e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129e4:	b	126c8 <flatcc_verify_buffer_header@@Base>
   129e8:	ldr	r3, [r6, #8]
   129ec:	mov	r1, r5
   129f0:	mov	r0, r4
   129f4:	str	r3, [sp, #48]	; 0x30
   129f8:	str	r9, [sp, #52]	; 0x34
   129fc:	ldr	r3, [r7, #4]
   12a00:	add	sp, sp, #12
   12a04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a08:	b	1223c <verify_monster@@Base+0x744>
   12a0c:	add	sp, sp, #12
   12a10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012a14 <flatcc_verify_union_field@@Base>:
   12a14:	push	{r4, r5, r6, r7, r8, lr}
   12a18:	mov	r6, r1
   12a1c:	sub	r1, r1, #1
   12a20:	sub	sp, sp, #32
   12a24:	uxth	r1, r1
   12a28:	mov	r7, r3
   12a2c:	mov	r4, r0
   12a30:	bl	1211c <verify_monster@@Base+0x624>
   12a34:	uxth	r3, r0
   12a38:	cmp	r3, #0
   12a3c:	bne	12a74 <flatcc_verify_union_field@@Base+0x60>
   12a40:	mov	r1, r6
   12a44:	mov	r0, r4
   12a48:	bl	1211c <verify_monster@@Base+0x624>
   12a4c:	uxth	r0, r0
   12a50:	cmp	r0, #0
   12a54:	movne	r0, #23
   12a58:	bne	12a6c <flatcc_verify_union_field@@Base+0x58>
   12a5c:	cmp	r2, #0
   12a60:	movne	r0, #21
   12a64:	bne	12a6c <flatcc_verify_union_field@@Base+0x58>
   12a68:	mov	r0, #0
   12a6c:	add	sp, sp, #32
   12a70:	pop	{r4, r5, r6, r7, r8, pc}
   12a74:	ldrh	r3, [r4, #20]
   12a78:	uxth	r5, r0
   12a7c:	add	r1, r5, #1
   12a80:	cmp	r1, r3
   12a84:	movhi	r0, #13
   12a88:	bhi	12a6c <flatcc_verify_union_field@@Base+0x58>
   12a8c:	ldr	r8, [r4]
   12a90:	ldr	r0, [r4, #16]
   12a94:	add	r5, r5, r0
   12a98:	ldrb	r3, [r8, r5]
   12a9c:	cmp	r3, #0
   12aa0:	bne	12ac4 <flatcc_verify_union_field@@Base+0xb0>
   12aa4:	mov	r1, r6
   12aa8:	mov	r0, r4
   12aac:	bl	1211c <verify_monster@@Base+0x624>
   12ab0:	uxth	r0, r0
   12ab4:	cmp	r0, #0
   12ab8:	movne	r0, #24
   12abc:	beq	12a68 <flatcc_verify_union_field@@Base+0x54>
   12ac0:	b	12a6c <flatcc_verify_union_field@@Base+0x58>
   12ac4:	add	r3, sp, #4
   12ac8:	mov	r1, r6
   12acc:	mov	r0, r4
   12ad0:	bl	1216c <verify_monster@@Base+0x674>
   12ad4:	cmp	r0, #0
   12ad8:	bne	12a6c <flatcc_verify_union_field@@Base+0x58>
   12adc:	ldr	r3, [sp, #4]
   12ae0:	cmp	r3, #0
   12ae4:	beq	12a68 <flatcc_verify_union_field@@Base+0x54>
   12ae8:	ldr	r2, [r4]
   12aec:	add	r0, sp, #8
   12af0:	ldr	r1, [r4, #4]
   12af4:	str	r3, [sp, #24]
   12af8:	str	r2, [sp, #8]
   12afc:	str	r1, [sp, #12]
   12b00:	ldr	r1, [r4, #8]
   12b04:	str	r1, [sp, #16]
   12b08:	ldr	r3, [r2, r3]
   12b0c:	str	r3, [sp, #28]
   12b10:	ldrb	r3, [r8, r5]
   12b14:	strb	r3, [sp, #20]
   12b18:	blx	r7
   12b1c:	b	12a6c <flatcc_verify_union_field@@Base+0x58>

00012b20 <flatcc_verify_union_vector_field@@Base>:
   12b20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b24:	sub	r4, r1, #1
   12b28:	sub	sp, sp, #60	; 0x3c
   12b2c:	uxth	r4, r4
   12b30:	mov	sl, r1
   12b34:	mov	r1, r4
   12b38:	mov	r8, r0
   12b3c:	mov	r6, r2
   12b40:	mov	r9, r3
   12b44:	bl	1211c <verify_monster@@Base+0x624>
   12b48:	uxth	r0, r0
   12b4c:	cmp	r0, #0
   12b50:	bne	12b80 <flatcc_verify_union_vector_field@@Base+0x60>
   12b54:	mov	r1, sl
   12b58:	mov	r0, r8
   12b5c:	bl	1211c <verify_monster@@Base+0x624>
   12b60:	adds	r3, r2, #0
   12b64:	uxth	r0, r0
   12b68:	movne	r3, #1
   12b6c:	cmp	r0, #0
   12b70:	movne	r3, #0
   12b74:	cmp	r3, #0
   12b78:	movne	r3, #22
   12b7c:	bne	12be0 <flatcc_verify_union_vector_field@@Base+0xc0>
   12b80:	mov	r5, #1
   12b84:	mvn	r7, #0
   12b88:	mov	r3, r5
   12b8c:	mov	r2, r6
   12b90:	mov	r1, r4
   12b94:	mov	r0, r8
   12b98:	stm	sp, {r5, r7}
   12b9c:	bl	1242c <flatcc_verify_vector_field@@Base>
   12ba0:	cmp	r0, #0
   12ba4:	beq	12bc8 <flatcc_verify_union_vector_field@@Base+0xa8>
   12ba8:	mov	r3, r5
   12bac:	mov	r2, r6
   12bb0:	stm	sp, {r5, r7}
   12bb4:	mov	r1, r4
   12bb8:	mov	r0, r8
   12bbc:	bl	1242c <flatcc_verify_vector_field@@Base>
   12bc0:	mov	r3, r0
   12bc4:	b	12be0 <flatcc_verify_union_vector_field@@Base+0xc0>
   12bc8:	mov	r1, r4
   12bcc:	mov	r0, r8
   12bd0:	bl	12140 <verify_monster@@Base+0x648>
   12bd4:	cmp	r0, #0
   12bd8:	bne	12bec <flatcc_verify_union_vector_field@@Base+0xcc>
   12bdc:	mov	r3, #0
   12be0:	mov	r0, r3
   12be4:	add	sp, sp, #60	; 0x3c
   12be8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bec:	ldr	r3, [r0]
   12bf0:	mov	r2, r6
   12bf4:	mov	r1, sl
   12bf8:	add	r5, r0, r3
   12bfc:	ldr	r7, [r0, r3]
   12c00:	add	r3, sp, #28
   12c04:	mov	r0, r8
   12c08:	bl	1216c <verify_monster@@Base+0x674>
   12c0c:	subs	r3, r0, #0
   12c10:	bne	12be0 <flatcc_verify_union_vector_field@@Base+0xc0>
   12c14:	ldr	r4, [sp, #28]
   12c18:	cmp	r4, #0
   12c1c:	beq	12bdc <flatcc_verify_union_vector_field@@Base+0xbc>
   12c20:	ldm	r8, {r6, sl}
   12c24:	ldr	r8, [r8, #8]
   12c28:	ldr	fp, [r6, r4]
   12c2c:	cmp	r8, #0
   12c30:	movle	r3, #3
   12c34:	ble	12be0 <flatcc_verify_union_vector_field@@Base+0xc0>
   12c38:	mvn	r3, #-1073741824	; 0xc0000000
   12c3c:	mov	r2, r4
   12c40:	mov	r1, sl
   12c44:	mov	r0, r6
   12c48:	str	r3, [sp, #8]
   12c4c:	mov	r3, #4
   12c50:	str	r3, [sp]
   12c54:	str	r3, [sp, #4]
   12c58:	mov	r3, fp
   12c5c:	bl	121cc <verify_monster@@Base+0x6d4>
   12c60:	subs	r3, r0, #0
   12c64:	bne	12be0 <flatcc_verify_union_vector_field@@Base+0xc0>
   12c68:	add	r4, r4, fp
   12c6c:	ldr	r2, [r6, r4]
   12c70:	cmp	r7, r2
   12c74:	movne	r3, #34	; 0x22
   12c78:	bne	12be0 <flatcc_verify_union_vector_field@@Base+0xc0>
   12c7c:	sub	r8, r8, #1
   12c80:	add	r4, r4, #4
   12c84:	str	r6, [sp, #32]
   12c88:	add	r7, r5, r7
   12c8c:	str	sl, [sp, #36]	; 0x24
   12c90:	str	r8, [sp, #40]	; 0x28
   12c94:	cmp	r7, r5
   12c98:	beq	12be0 <flatcc_verify_union_vector_field@@Base+0xc0>
   12c9c:	ldr	r1, [r6, r4]
   12ca0:	ldrb	r2, [r5, #4]
   12ca4:	cmp	r1, #0
   12ca8:	bne	12cbc <flatcc_verify_union_vector_field@@Base+0x19c>
   12cac:	cmp	r2, #0
   12cb0:	beq	12cf4 <flatcc_verify_union_vector_field@@Base+0x1d4>
   12cb4:	mov	r3, #32
   12cb8:	b	12be0 <flatcc_verify_union_vector_field@@Base+0xc0>
   12cbc:	cmp	r2, #0
   12cc0:	str	r3, [sp, #20]
   12cc4:	beq	12d00 <flatcc_verify_union_vector_field@@Base+0x1e0>
   12cc8:	add	r0, sp, #32
   12ccc:	strb	r2, [sp, #44]	; 0x2c
   12cd0:	str	r4, [sp, #48]	; 0x30
   12cd4:	str	r1, [sp, #52]	; 0x34
   12cd8:	blx	r9
   12cdc:	cmp	r0, #0
   12ce0:	ldr	r3, [sp, #20]
   12ce4:	beq	12cf4 <flatcc_verify_union_vector_field@@Base+0x1d4>
   12ce8:	add	r0, sp, #32
   12cec:	blx	r9
   12cf0:	b	12bc0 <flatcc_verify_union_vector_field@@Base+0xa0>
   12cf4:	add	r4, r4, #4
   12cf8:	add	r5, r5, #1
   12cfc:	b	12c94 <flatcc_verify_union_vector_field@@Base+0x174>
   12d00:	mov	r3, #33	; 0x21
   12d04:	b	12be0 <flatcc_verify_union_vector_field@@Base+0xc0>

00012d08 <__libc_csu_init@@Base>:
   12d08:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12d0c:	mov	r7, r0
   12d10:	ldr	r6, [pc, #72]	; 12d60 <__libc_csu_init@@Base+0x58>
   12d14:	ldr	r5, [pc, #72]	; 12d64 <__libc_csu_init@@Base+0x5c>
   12d18:	add	r6, pc, r6
   12d1c:	add	r5, pc, r5
   12d20:	sub	r6, r6, r5
   12d24:	mov	r8, r1
   12d28:	mov	r9, r2
   12d2c:	bl	10c94 <strcmp@plt-0x20>
   12d30:	asrs	r6, r6, #2
   12d34:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12d38:	mov	r4, #0
   12d3c:	add	r4, r4, #1
   12d40:	ldr	r3, [r5], #4
   12d44:	mov	r2, r9
   12d48:	mov	r1, r8
   12d4c:	mov	r0, r7
   12d50:	blx	r3
   12d54:	cmp	r6, r4
   12d58:	bne	12d3c <__libc_csu_init@@Base+0x34>
   12d5c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12d60:	strdeq	r1, [r1], -r4
   12d64:	andeq	r1, r1, ip, ror #3

00012d68 <__libc_csu_fini@@Base>:
   12d68:	bx	lr

Disassembly of section .fini:

00012d6c <.fini>:
   12d6c:	push	{r3, lr}
   12d70:	pop	{r3, pc}
