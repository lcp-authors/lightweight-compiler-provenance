
../repos/tbeu-matio-3dd266d/src/.libs/libmatio.so.9.1.0:     file format elf32-littlearm


Disassembly of section .init:

00001778 <_init>:
    1778:	push	{r3, lr}
    177c:	bl	1a60 <call_weak_fn>
    1780:	pop	{r3, pc}

Disassembly of section .plt:

00001784 <.plt>:
    1784:	push	{lr}		; (str lr, [sp, #-4]!)
    1788:	ldr	lr, [pc, #4]	; 1794 <.plt+0x10>
    178c:	add	lr, pc, lr
    1790:	ldr	pc, [lr, #8]!
    1794:	.word	0x0006f86c

00001798 <calloc@plt>:
    1798:	add	ip, pc, #0, 12
    179c:	add	ip, ip, #454656	; 0x6f000
    17a0:	ldr	pc, [ip, #2156]!	; 0x86c

000017a4 <Mat_VarReadNext@plt>:
    17a4:	add	ip, pc, #0, 12
    17a8:	add	ip, ip, #454656	; 0x6f000
    17ac:	ldr	pc, [ip, #2148]!	; 0x864

000017b0 <strcmp@plt>:
    17b0:	add	ip, pc, #0, 12
    17b4:	add	ip, ip, #454656	; 0x6f000
    17b8:	ldr	pc, [ip, #2140]!	; 0x85c

000017bc <__cxa_finalize@plt>:
    17bc:	add	ip, pc, #0, 12
    17c0:	add	ip, ip, #454656	; 0x6f000
    17c4:	ldr	pc, [ip, #2132]!	; 0x854

000017c8 <Mat_Open@plt>:
    17c8:	add	ip, pc, #0, 12
    17cc:	add	ip, ip, #454656	; 0x6f000
    17d0:	ldr	pc, [ip, #2124]!	; 0x84c

000017d4 <printf@plt>:
    17d4:	add	ip, pc, #0, 12
    17d8:	add	ip, ip, #454656	; 0x6f000
    17dc:	ldr	pc, [ip, #2116]!	; 0x844

000017e0 <fopen@plt>:
    17e0:	add	ip, pc, #0, 12
    17e4:	add	ip, ip, #454656	; 0x6f000
    17e8:	ldr	pc, [ip, #2108]!	; 0x83c

000017ec <inflate@plt>:
    17ec:	add	ip, pc, #0, 12
    17f0:	add	ip, ip, #454656	; 0x6f000
    17f4:	ldr	pc, [ip, #2100]!	; 0x834

000017f8 <fflush@plt>:
    17f8:	add	ip, pc, #0, 12
    17fc:	add	ip, ip, #454656	; 0x6f000
    1800:	ldr	pc, [ip, #2092]!	; 0x82c

00001804 <free@plt>:
    1804:	add	ip, pc, #0, 12
    1808:	add	ip, ip, #454656	; 0x6f000
    180c:	ldr	pc, [ip, #2084]!	; 0x824

00001810 <Mat_Warning@plt>:
    1810:	add	ip, pc, #0, 12
    1814:	add	ip, ip, #454656	; 0x6f000
    1818:	ldr	pc, [ip, #2076]!	; 0x81c

0000181c <memcpy@plt>:
    181c:	add	ip, pc, #0, 12
    1820:	add	ip, ip, #454656	; 0x6f000
    1824:	ldr	pc, [ip, #2068]!	; 0x814

00001828 <Mat_VarWrite@plt>:
    1828:	add	ip, pc, #0, 12
    182c:	add	ip, ip, #454656	; 0x6f000
    1830:	ldr	pc, [ip, #2060]!	; 0x80c

00001834 <time@plt>:
    1834:	add	ip, pc, #0, 12
    1838:	add	ip, ip, #454656	; 0x6f000
    183c:	ldr	pc, [ip, #2052]!	; 0x804

00001840 <ftell@plt>:
    1840:	add	ip, pc, #0, 12
    1844:	add	ip, ip, #454656	; 0x6f000
    1848:	ldr	pc, [ip, #2044]!	; 0x7fc

0000184c <fwrite_unlocked@plt>:
    184c:	add	ip, pc, #0, 12
    1850:	add	ip, ip, #454656	; 0x6f000
    1854:	ldr	pc, [ip, #2036]!	; 0x7f4

00001858 <ctime@plt>:
    1858:	add	ip, pc, #0, 12
    185c:	add	ip, ip, #454656	; 0x6f000
    1860:	ldr	pc, [ip, #2028]!	; 0x7ec

00001864 <strdup@plt>:
    1864:	add	ip, pc, #0, 12
    1868:	add	ip, ip, #454656	; 0x6f000
    186c:	ldr	pc, [ip, #2020]!	; 0x7e4

00001870 <realloc@plt>:
    1870:	add	ip, pc, #0, 12
    1874:	add	ip, ip, #454656	; 0x6f000
    1878:	ldr	pc, [ip, #2012]!	; 0x7dc

0000187c <Mat_VarReadInfo@plt>:
    187c:	add	ip, pc, #0, 12
    1880:	add	ip, ip, #454656	; 0x6f000
    1884:	ldr	pc, [ip, #2004]!	; 0x7d4

00001888 <zError@plt>:
    1888:	add	ip, pc, #0, 12
    188c:	add	ip, ip, #454656	; 0x6f000
    1890:	ldr	pc, [ip, #1996]!	; 0x7cc

00001894 <deflate@plt>:
    1894:	add	ip, pc, #0, 12
    1898:	add	ip, ip, #454656	; 0x6f000
    189c:	ldr	pc, [ip, #1988]!	; 0x7c4

000018a0 <Mat_VarCalloc@plt>:
    18a0:	add	ip, pc, #0, 12
    18a4:	add	ip, ip, #454656	; 0x6f000
    18a8:	ldr	pc, [ip, #1980]!	; 0x7bc

000018ac <fwrite@plt>:
    18ac:	add	ip, pc, #0, 12
    18b0:	add	ip, ip, #454656	; 0x6f000
    18b4:	ldr	pc, [ip, #1972]!	; 0x7b4

000018b8 <fread@plt>:
    18b8:	add	ip, pc, #0, 12
    18bc:	add	ip, ip, #454656	; 0x6f000
    18c0:	ldr	pc, [ip, #1964]!	; 0x7ac

000018c4 <puts@plt>:
    18c4:	add	ip, pc, #0, 12
    18c8:	add	ip, ip, #454656	; 0x6f000
    18cc:	ldr	pc, [ip, #1956]!	; 0x7a4

000018d0 <malloc@plt>:
    18d0:	add	ip, pc, #0, 12
    18d4:	add	ip, ip, #454656	; 0x6f000
    18d8:	ldr	pc, [ip, #1948]!	; 0x79c

000018dc <deflateInit_@plt>:
    18dc:	add	ip, pc, #0, 12
    18e0:	add	ip, ip, #454656	; 0x6f000
    18e4:	ldr	pc, [ip, #1940]!	; 0x794

000018e8 <mktemp@plt>:
    18e8:	add	ip, pc, #0, 12
    18ec:	add	ip, ip, #454656	; 0x6f000
    18f0:	ldr	pc, [ip, #1932]!	; 0x78c

000018f4 <__gmon_start__@plt>:
    18f4:	add	ip, pc, #0, 12
    18f8:	add	ip, ip, #454656	; 0x6f000
    18fc:	ldr	pc, [ip, #1924]!	; 0x784

00001900 <exit@plt>:
    1900:	add	ip, pc, #0, 12
    1904:	add	ip, ip, #454656	; 0x6f000
    1908:	ldr	pc, [ip, #1916]!	; 0x77c

0000190c <feof@plt>:
    190c:	add	ip, pc, #0, 12
    1910:	add	ip, ip, #454656	; 0x6f000
    1914:	ldr	pc, [ip, #1908]!	; 0x774

00001918 <Mat_VarFree@plt>:
    1918:	add	ip, pc, #0, 12
    191c:	add	ip, ip, #454656	; 0x6f000
    1920:	ldr	pc, [ip, #1900]!	; 0x76c

00001924 <Mat_SizeOf@plt>:
    1924:	add	ip, pc, #0, 12
    1928:	add	ip, ip, #454656	; 0x6f000
    192c:	ldr	pc, [ip, #1892]!	; 0x764

00001930 <Mat_GetDir@plt>:
    1930:	add	ip, pc, #0, 12
    1934:	add	ip, ip, #454656	; 0x6f000
    1938:	ldr	pc, [ip, #1884]!	; 0x75c

0000193c <inflateEnd@plt>:
    193c:	add	ip, pc, #0, 12
    1940:	add	ip, ip, #454656	; 0x6f000
    1944:	ldr	pc, [ip, #1876]!	; 0x754

00001948 <inflateCopy@plt>:
    1948:	add	ip, pc, #0, 12
    194c:	add	ip, ip, #454656	; 0x6f000
    1950:	ldr	pc, [ip, #1868]!	; 0x74c

00001954 <strlen@plt>:
    1954:	add	ip, pc, #0, 12
    1958:	add	ip, ip, #454656	; 0x6f000
    195c:	ldr	pc, [ip, #1860]!	; 0x744

00001960 <fprintf@plt>:
    1960:	add	ip, pc, #0, 12
    1964:	add	ip, ip, #454656	; 0x6f000
    1968:	ldr	pc, [ip, #1852]!	; 0x73c

0000196c <Mat_VarPrint@plt>:
    196c:	add	ip, pc, #0, 12
    1970:	add	ip, ip, #454656	; 0x6f000
    1974:	ldr	pc, [ip, #1844]!	; 0x734

00001978 <snprintf@plt>:
    1978:	add	ip, pc, #0, 12
    197c:	add	ip, ip, #454656	; 0x6f000
    1980:	ldr	pc, [ip, #1836]!	; 0x72c

00001984 <Mat_Rewind@plt>:
    1984:	add	ip, pc, #0, 12
    1988:	add	ip, ip, #454656	; 0x6f000
    198c:	ldr	pc, [ip, #1828]!	; 0x724

00001990 <memset@plt>:
    1990:	add	ip, pc, #0, 12
    1994:	add	ip, ip, #454656	; 0x6f000
    1998:	ldr	pc, [ip, #1820]!	; 0x71c

0000199c <putchar@plt>:
    199c:	add	ip, pc, #0, 12
    19a0:	add	ip, ip, #454656	; 0x6f000
    19a4:	ldr	pc, [ip, #1812]!	; 0x714

000019a8 <Mat_Close@plt>:
    19a8:	add	ip, pc, #0, 12
    19ac:	add	ip, ip, #454656	; 0x6f000
    19b0:	ldr	pc, [ip, #1804]!	; 0x70c

000019b4 <Mat_Critical@plt>:
    19b4:	add	ip, pc, #0, 12
    19b8:	add	ip, ip, #454656	; 0x6f000
    19bc:	ldr	pc, [ip, #1796]!	; 0x704

000019c0 <deflateEnd@plt>:
    19c0:	add	ip, pc, #0, 12
    19c4:	add	ip, ip, #454656	; 0x6f000
    19c8:	ldr	pc, [ip, #1788]!	; 0x6fc

000019cc <fclose@plt>:
    19cc:	add	ip, pc, #0, 12
    19d0:	add	ip, ip, #454656	; 0x6f000
    19d4:	ldr	pc, [ip, #1780]!	; 0x6f4

000019d8 <inflateInit_@plt>:
    19d8:	add	ip, pc, #0, 12
    19dc:	add	ip, ip, #454656	; 0x6f000
    19e0:	ldr	pc, [ip, #1772]!	; 0x6ec

000019e4 <fputc@plt>:
    19e4:	add	ip, pc, #0, 12
    19e8:	add	ip, ip, #454656	; 0x6f000
    19ec:	ldr	pc, [ip, #1764]!	; 0x6e4

000019f0 <remove@plt>:
    19f0:	add	ip, pc, #0, 12
    19f4:	add	ip, ip, #454656	; 0x6f000
    19f8:	ldr	pc, [ip, #1756]!	; 0x6dc

000019fc <vsnprintf@plt>:
    19fc:	add	ip, pc, #0, 12
    1a00:	add	ip, ip, #454656	; 0x6f000
    1a04:	ldr	pc, [ip, #1748]!	; 0x6d4

00001a08 <Mat_SizeOfClass@plt>:
    1a08:	add	ip, pc, #0, 12
    1a0c:	add	ip, ip, #454656	; 0x6f000
    1a10:	ldr	pc, [ip, #1740]!	; 0x6cc

00001a14 <fread_unlocked@plt>:
    1a14:	add	ip, pc, #0, 12
    1a18:	add	ip, ip, #454656	; 0x6f000
    1a1c:	ldr	pc, [ip, #1732]!	; 0x6c4

00001a20 <Mat_VarGetSize@plt>:
    1a20:	add	ip, pc, #0, 12
    1a24:	add	ip, ip, #454656	; 0x6f000
    1a28:	ldr	pc, [ip, #1724]!	; 0x6bc

00001a2c <fseek@plt>:
    1a2c:	add	ip, pc, #0, 12
    1a30:	add	ip, ip, #454656	; 0x6f000
    1a34:	ldr	pc, [ip, #1716]!	; 0x6b4

00001a38 <abort@plt>:
    1a38:	add	ip, pc, #0, 12
    1a3c:	add	ip, ip, #454656	; 0x6f000
    1a40:	ldr	pc, [ip, #1708]!	; 0x6ac

00001a44 <Mat_VarDuplicate@plt>:
    1a44:	add	ip, pc, #0, 12
    1a48:	add	ip, ip, #454656	; 0x6f000
    1a4c:	ldr	pc, [ip, #1700]!	; 0x6a4

00001a50 <Mat_VarReadNextInfo@plt>:
    1a50:	add	ip, pc, #0, 12
    1a54:	add	ip, ip, #454656	; 0x6f000
    1a58:	ldr	pc, [ip, #1692]!	; 0x69c

Disassembly of section .text:

00001a60 <call_weak_fn>:
    1a60:	ldr	r3, [pc, #20]	; 1a7c <call_weak_fn+0x1c>
    1a64:	ldr	r2, [pc, #20]	; 1a80 <call_weak_fn+0x20>
    1a68:	add	r3, pc, r3
    1a6c:	ldr	r2, [r3, r2]
    1a70:	cmp	r2, #0
    1a74:	bxeq	lr
    1a78:	b	18f4 <__gmon_start__@plt>
    1a7c:	.word	0x0006f590
    1a80:	.word	0x00000104

00001a84 <deregister_tm_clones>:
    1a84:	ldr	r0, [pc, #44]	; 1ab8 <deregister_tm_clones+0x34>
    1a88:	ldr	r3, [pc, #44]	; 1abc <deregister_tm_clones+0x38>
    1a8c:	add	r0, pc, r0
    1a90:	add	r3, pc, r3
    1a94:	cmp	r3, r0
    1a98:	ldr	r3, [pc, #32]	; 1ac0 <deregister_tm_clones+0x3c>
    1a9c:	add	r3, pc, r3
    1aa0:	bxeq	lr
    1aa4:	ldr	r2, [pc, #24]	; 1ac4 <deregister_tm_clones+0x40>
    1aa8:	ldr	r3, [r3, r2]
    1aac:	cmp	r3, #0
    1ab0:	bxeq	lr
    1ab4:	bx	r3
    1ab8:	.word	0x0006f680
    1abc:	.word	0x0006f67c
    1ac0:	.word	0x0006f55c
    1ac4:	.word	0x000000fc

00001ac8 <register_tm_clones>:
    1ac8:	ldr	r0, [pc, #56]	; 1b08 <register_tm_clones+0x40>
    1acc:	ldr	r3, [pc, #56]	; 1b0c <register_tm_clones+0x44>
    1ad0:	add	r0, pc, r0
    1ad4:	add	r3, pc, r3
    1ad8:	sub	r1, r3, r0
    1adc:	ldr	r3, [pc, #44]	; 1b10 <register_tm_clones+0x48>
    1ae0:	asr	r1, r1, #2
    1ae4:	add	r3, pc, r3
    1ae8:	add	r1, r1, r1, lsr #31
    1aec:	asrs	r1, r1, #1
    1af0:	bxeq	lr
    1af4:	ldr	r2, [pc, #24]	; 1b14 <register_tm_clones+0x4c>
    1af8:	ldr	r3, [r3, r2]
    1afc:	cmp	r3, #0
    1b00:	bxeq	lr
    1b04:	bx	r3
    1b08:	.word	0x0006f63c
    1b0c:	.word	0x0006f638
    1b10:	.word	0x0006f514
    1b14:	.word	0x0000010c

00001b18 <__do_global_dtors_aux>:
    1b18:	ldr	r3, [pc, #76]	; 1b6c <__do_global_dtors_aux+0x54>
    1b1c:	ldr	r2, [pc, #76]	; 1b70 <__do_global_dtors_aux+0x58>
    1b20:	add	r3, pc, r3
    1b24:	add	r2, pc, r2
    1b28:	ldrb	r3, [r3]
    1b2c:	cmp	r3, #0
    1b30:	bxne	lr
    1b34:	ldr	r3, [pc, #56]	; 1b74 <__do_global_dtors_aux+0x5c>
    1b38:	push	{r4, lr}
    1b3c:	ldr	r3, [r2, r3]
    1b40:	cmp	r3, #0
    1b44:	beq	1b54 <__do_global_dtors_aux+0x3c>
    1b48:	ldr	r3, [pc, #40]	; 1b78 <__do_global_dtors_aux+0x60>
    1b4c:	ldr	r0, [pc, r3]
    1b50:	bl	17bc <__cxa_finalize@plt>
    1b54:	bl	1a84 <deregister_tm_clones>
    1b58:	ldr	r3, [pc, #28]	; 1b7c <__do_global_dtors_aux+0x64>
    1b5c:	mov	r2, #1
    1b60:	add	r3, pc, r3
    1b64:	strb	r2, [r3]
    1b68:	pop	{r4, pc}
    1b6c:	.word	0x0006f5ec
    1b70:	.word	0x0006f4d4
    1b74:	.word	0x000000f8
    1b78:	.word	0x0006f5bc
    1b7c:	.word	0x0006f5ac

00001b80 <frame_dummy>:
    1b80:	b	1ac8 <register_tm_clones>

00001b84 <Mat_int64Swap>:
    1b84:	push	{r4, r5, fp, lr}
    1b88:	add	fp, sp, #8
    1b8c:	ldrd	r2, [r0]
    1b90:	mov	ip, #65280	; 0xff00
    1b94:	lsr	r1, r3, #24
    1b98:	and	lr, ip, r3, lsr #8
    1b9c:	orr	r1, r1, r3, lsl #24
    1ba0:	and	r3, r3, #65280	; 0xff00
    1ba4:	orr	r1, r1, r3, lsl #8
    1ba8:	lsl	r3, r2, #8
    1bac:	uxtb16	r3, r3
    1bb0:	orr	r4, r1, lr
    1bb4:	and	r1, ip, r2, lsr #8
    1bb8:	orr	r3, r3, r2, lsl #24
    1bbc:	orr	r1, r3, r1
    1bc0:	orr	r5, r1, r2, lsr #24
    1bc4:	strd	r4, [r0]
    1bc8:	mov	r0, r4
    1bcc:	mov	r1, r5
    1bd0:	pop	{r4, r5, fp, pc}

00001bd4 <Mat_uint64Swap>:
    1bd4:	ldrd	r2, [r0]
    1bd8:	rev	r1, r2
    1bdc:	rev	r2, r3
    1be0:	str	r2, [r0]
    1be4:	str	r1, [r0, #4]
    1be8:	mov	r0, r2
    1bec:	bx	lr

00001bf0 <Mat_int32Swap>:
    1bf0:	ldr	r1, [r0]
    1bf4:	rev	r1, r1
    1bf8:	str	r1, [r0]
    1bfc:	mov	r0, r1
    1c00:	bx	lr

00001c04 <Mat_uint32Swap>:
    1c04:	ldr	r1, [r0]
    1c08:	rev	r1, r1
    1c0c:	str	r1, [r0]
    1c10:	mov	r0, r1
    1c14:	bx	lr

00001c18 <Mat_int16Swap>:
    1c18:	ldrh	r1, [r0]
    1c1c:	rev16	r2, r1
    1c20:	strh	r2, [r0]
    1c24:	revsh	r0, r1
    1c28:	bx	lr

00001c2c <Mat_uint16Swap>:
    1c2c:	ldrh	r1, [r0]
    1c30:	rev16	r2, r1
    1c34:	strh	r2, [r0]
    1c38:	rev	r0, r1
    1c3c:	lsr	r0, r0, #16
    1c40:	bx	lr

00001c44 <Mat_floatSwap>:
    1c44:	ldr	r1, [r0]
    1c48:	uxtb	r2, r1
    1c4c:	and	r3, r1, #-16777216	; 0xff000000
    1c50:	eor	r2, r2, r1, lsr #24
    1c54:	eor	r3, r3, r2, lsl #24
    1c58:	eor	ip, r2, r3, lsr #24
    1c5c:	and	r2, r1, #16711680	; 0xff0000
    1c60:	eor	r1, r1, r1, lsr #8
    1c64:	and	r1, r1, #65280	; 0xff00
    1c68:	eor	r2, r2, r1, lsl #8
    1c6c:	orr	r3, r2, r3
    1c70:	eor	r1, r1, r2, lsr #8
    1c74:	orr	r3, r3, ip
    1c78:	orr	r1, r3, r1
    1c7c:	vmov	s0, r1
    1c80:	str	r1, [r0]
    1c84:	bx	lr

00001c88 <Mat_doubleSwap>:
    1c88:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    1c8c:	add	fp, sp, #24
    1c90:	ldr	r4, [r0]
    1c94:	ldr	r3, [r0, #4]
    1c98:	uxtb	r1, r4
    1c9c:	lsr	r5, r4, #24
    1ca0:	mov	r2, r4
    1ca4:	eor	r6, r3, r3, lsr #24
    1ca8:	eor	ip, r1, r3, lsr #24
    1cac:	and	r1, r3, #-16777216	; 0xff000000
    1cb0:	orr	r5, r5, r3, lsl #8
    1cb4:	bfc	r2, #0, #16
    1cb8:	lsl	r6, r6, #24
    1cbc:	eor	lr, r1, ip, lsl #24
    1cc0:	eor	r1, r4, r3, lsr #8
    1cc4:	eor	r5, r5, r4
    1cc8:	eor	ip, ip, lr, lsr #24
    1ccc:	orr	r6, r6, r5, lsr #8
    1cd0:	and	r1, r1, #65280	; 0xff00
    1cd4:	orr	r2, r2, ip
    1cd8:	eor	r6, r6, r3
    1cdc:	orr	r1, r2, r1
    1ce0:	and	r7, r6, #65280	; 0xff00
    1ce4:	eor	r2, r3, r1, lsl #8
    1ce8:	orr	r7, r7, lr
    1cec:	eor	r1, r1, r2, lsr #8
    1cf0:	and	r2, r2, #16711680	; 0xff0000
    1cf4:	orr	r2, r7, r2
    1cf8:	lsr	r7, r4, #8
    1cfc:	and	r1, r1, #65280	; 0xff00
    1d00:	orr	r7, r7, r3, lsl #24
    1d04:	orr	r1, ip, r1
    1d08:	eor	r7, r7, r4
    1d0c:	eor	r4, r3, r3, lsr #8
    1d10:	lsl	r4, r4, #8
    1d14:	orr	r4, r4, r7, lsr #24
    1d18:	eor	r3, r4, r3
    1d1c:	uxtb	r4, r3
    1d20:	orr	r9, r4, r2
    1d24:	eor	r2, r7, r3, lsl #24
    1d28:	and	r2, r2, #-16777216	; 0xff000000
    1d2c:	orr	r1, r2, r1
    1d30:	eor	r2, r5, r6, lsl #8
    1d34:	and	r2, r2, #16711680	; 0xff0000
    1d38:	orr	r8, r1, r2
    1d3c:	vmov	d0, r8, r9
    1d40:	strd	r8, [r0]
    1d44:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00001d48 <strdup_vprintf>:
    1d48:	push	{r4, r5, r6, sl, fp, lr}
    1d4c:	add	fp, sp, #16
    1d50:	sub	sp, sp, #8
    1d54:	str	r1, [sp, #4]
    1d58:	mov	r4, r0
    1d5c:	mov	r0, #0
    1d60:	mov	r1, #0
    1d64:	ldr	r3, [sp, #4]
    1d68:	mov	r2, r4
    1d6c:	str	r3, [sp]
    1d70:	bl	19fc <vsnprintf@plt>
    1d74:	mov	r6, r0
    1d78:	add	r0, r0, #2
    1d7c:	bl	18d0 <malloc@plt>
    1d80:	mov	r5, r0
    1d84:	cmp	r0, #0
    1d88:	beq	1da0 <strdup_vprintf+0x58>
    1d8c:	ldr	r3, [sp, #4]
    1d90:	add	r1, r6, #1
    1d94:	mov	r0, r5
    1d98:	mov	r2, r4
    1d9c:	bl	19fc <vsnprintf@plt>
    1da0:	mov	r0, r5
    1da4:	sub	sp, fp, #16
    1da8:	pop	{r4, r5, r6, sl, fp, pc}

00001dac <strdup_printf>:
    1dac:	sub	sp, sp, #12
    1db0:	push	{fp, lr}
    1db4:	mov	fp, sp
    1db8:	sub	sp, sp, #4
    1dbc:	add	ip, fp, #8
    1dc0:	stm	ip, {r1, r2, r3}
    1dc4:	add	r1, fp, #8
    1dc8:	str	r1, [sp]
    1dcc:	bl	1d48 <strdup_vprintf>
    1dd0:	mov	sp, fp
    1dd4:	pop	{fp, lr}
    1dd8:	add	sp, sp, #12
    1ddc:	bx	lr

00001de0 <Mat_SetVerbose>:
    1de0:	ldr	r2, [pc, #12]	; 1df4 <Mat_SetVerbose+0x14>
    1de4:	add	r2, pc, r2
    1de8:	stm	r2, {r0, r1}
    1dec:	mov	r0, #0
    1df0:	bx	lr
    1df4:	.word	0x0006f32c

00001df8 <Mat_SetDebug>:
    1df8:	ldr	r1, [pc, #12]	; 1e0c <Mat_SetDebug+0x14>
    1dfc:	add	r1, pc, r1
    1e00:	str	r0, [r1, #8]
    1e04:	mov	r0, #0
    1e08:	bx	lr
    1e0c:	.word	0x0006f314

00001e10 <Mat_Message>:
    1e10:	sub	sp, sp, #12
    1e14:	push	{r4, r5, fp, lr}
    1e18:	add	fp, sp, #8
    1e1c:	sub	sp, sp, #4
    1e20:	add	ip, fp, #8
    1e24:	stm	ip, {r1, r2, r3}
    1e28:	ldr	r5, [pc, #84]	; 1e84 <Mat_Message+0x74>
    1e2c:	add	r5, pc, r5
    1e30:	ldr	r1, [r5, #4]
    1e34:	cmp	r1, #0
    1e38:	bne	1e70 <Mat_Message+0x60>
    1e3c:	ldr	r1, [r5, #12]
    1e40:	cmp	r1, #0
    1e44:	beq	1e70 <Mat_Message+0x60>
    1e48:	add	r1, fp, #8
    1e4c:	str	r1, [sp]
    1e50:	bl	1d48 <strdup_vprintf>
    1e54:	ldr	r2, [r5, #12]
    1e58:	mov	r4, r0
    1e5c:	mov	r0, #8
    1e60:	mov	r1, r4
    1e64:	blx	r2
    1e68:	mov	r0, r4
    1e6c:	bl	1804 <free@plt>
    1e70:	mov	r0, #0
    1e74:	sub	sp, fp, #8
    1e78:	pop	{r4, r5, fp, lr}
    1e7c:	add	sp, sp, #12
    1e80:	bx	lr
    1e84:	.word	0x0006f2e4

00001e88 <mat_log>:
    1e88:	push	{r4, r5, r6, sl, fp, lr}
    1e8c:	add	fp, sp, #16
    1e90:	ldr	r6, [pc, #60]	; 1ed4 <mat_log+0x4c>
    1e94:	mov	r4, r0
    1e98:	add	r6, pc, r6
    1e9c:	ldr	r0, [r6, #12]
    1ea0:	cmp	r0, #0
    1ea4:	popeq	{r4, r5, r6, sl, fp, pc}
    1ea8:	mov	r0, r1
    1eac:	mov	r1, r2
    1eb0:	bl	1d48 <strdup_vprintf>
    1eb4:	ldr	r2, [r6, #12]
    1eb8:	mov	r5, r0
    1ebc:	mov	r0, r4
    1ec0:	mov	r1, r5
    1ec4:	blx	r2
    1ec8:	mov	r0, r5
    1ecc:	pop	{r4, r5, r6, sl, fp, lr}
    1ed0:	b	1804 <free@plt>
    1ed4:	.word	0x0006f278

00001ed8 <Mat_DebugMessage>:
    1ed8:	sub	sp, sp, #8
    1edc:	push	{r4, r5, fp, lr}
    1ee0:	add	fp, sp, #8
    1ee4:	sub	sp, sp, #8
    1ee8:	str	r3, [fp, #12]
    1eec:	str	r2, [fp, #8]
    1ef0:	ldr	r5, [pc, #108]	; 1f64 <Mat_DebugMessage+0x8c>
    1ef4:	add	r5, pc, r5
    1ef8:	ldr	r2, [r5, #4]
    1efc:	cmp	r2, #0
    1f00:	bne	1f50 <Mat_DebugMessage+0x78>
    1f04:	ldr	r2, [r5, #8]
    1f08:	cmp	r2, r0
    1f0c:	blt	1f50 <Mat_DebugMessage+0x78>
    1f10:	add	r0, fp, #8
    1f14:	str	r0, [sp, #4]
    1f18:	ldr	r0, [r5, #12]
    1f1c:	cmp	r0, #0
    1f20:	beq	1f50 <Mat_DebugMessage+0x78>
    1f24:	ldr	r2, [sp, #4]
    1f28:	mov	r0, r1
    1f2c:	mov	r1, r2
    1f30:	bl	1d48 <strdup_vprintf>
    1f34:	ldr	r2, [r5, #12]
    1f38:	mov	r4, r0
    1f3c:	mov	r0, #16
    1f40:	mov	r1, r4
    1f44:	blx	r2
    1f48:	mov	r0, r4
    1f4c:	bl	1804 <free@plt>
    1f50:	mov	r0, #0
    1f54:	sub	sp, fp, #8
    1f58:	pop	{r4, r5, fp, lr}
    1f5c:	add	sp, sp, #8
    1f60:	bx	lr
    1f64:	.word	0x0006f21c

00001f68 <Mat_VerbMessage>:
    1f68:	sub	sp, sp, #8
    1f6c:	push	{r4, r5, fp, lr}
    1f70:	add	fp, sp, #8
    1f74:	sub	sp, sp, #8
    1f78:	str	r3, [fp, #12]
    1f7c:	str	r2, [fp, #8]
    1f80:	ldr	r5, [pc, #112]	; 1ff8 <Mat_VerbMessage+0x90>
    1f84:	add	r5, pc, r5
    1f88:	ldr	r2, [r5, #4]
    1f8c:	cmp	r2, #0
    1f90:	bne	1fe4 <Mat_VerbMessage+0x7c>
    1f94:	ldr	r2, [pc, #96]	; 1ffc <Mat_VerbMessage+0x94>
    1f98:	ldr	r2, [pc, r2]
    1f9c:	cmp	r2, r0
    1fa0:	blt	1fe4 <Mat_VerbMessage+0x7c>
    1fa4:	add	r0, fp, #8
    1fa8:	str	r0, [sp, #4]
    1fac:	ldr	r0, [r5, #12]
    1fb0:	cmp	r0, #0
    1fb4:	beq	1fe4 <Mat_VerbMessage+0x7c>
    1fb8:	ldr	r2, [sp, #4]
    1fbc:	mov	r0, r1
    1fc0:	mov	r1, r2
    1fc4:	bl	1d48 <strdup_vprintf>
    1fc8:	ldr	r2, [r5, #12]
    1fcc:	mov	r4, r0
    1fd0:	mov	r0, #8
    1fd4:	mov	r1, r4
    1fd8:	blx	r2
    1fdc:	mov	r0, r4
    1fe0:	bl	1804 <free@plt>
    1fe4:	mov	r0, #0
    1fe8:	sub	sp, fp, #8
    1fec:	pop	{r4, r5, fp, lr}
    1ff0:	add	sp, sp, #8
    1ff4:	bx	lr
    1ff8:	.word	0x0006f18c
    1ffc:	.word	0x0006f178

00002000 <Mat_Critical>:
    2000:	sub	sp, sp, #12
    2004:	push	{r4, r5, fp, lr}
    2008:	add	fp, sp, #8
    200c:	sub	sp, sp, #4
    2010:	add	ip, fp, #8
    2014:	stm	ip, {r1, r2, r3}
    2018:	add	r1, fp, #8
    201c:	str	r1, [sp]
    2020:	ldr	r5, [pc, #64]	; 2068 <Mat_Critical+0x68>
    2024:	add	r5, pc, r5
    2028:	ldr	r1, [r5, #12]
    202c:	cmp	r1, #0
    2030:	beq	2058 <Mat_Critical+0x58>
    2034:	ldr	r1, [sp]
    2038:	bl	1d48 <strdup_vprintf>
    203c:	ldr	r2, [r5, #12]
    2040:	mov	r4, r0
    2044:	mov	r0, #2
    2048:	mov	r1, r4
    204c:	blx	r2
    2050:	mov	r0, r4
    2054:	bl	1804 <free@plt>
    2058:	sub	sp, fp, #8
    205c:	pop	{r4, r5, fp, lr}
    2060:	add	sp, sp, #12
    2064:	bx	lr
    2068:	.word	0x0006f0ec

0000206c <Mat_Error>:
    206c:	sub	sp, sp, #12
    2070:	push	{fp, lr}
    2074:	mov	fp, sp
    2078:	sub	sp, sp, #4
    207c:	mov	ip, r0
    2080:	add	r0, fp, #8
    2084:	stm	r0, {r1, r2, r3}
    2088:	add	r2, fp, #8
    208c:	mov	r0, #1
    2090:	mov	r1, ip
    2094:	str	r2, [sp]
    2098:	bl	1e88 <mat_log>
    209c:	bl	1a38 <abort@plt>

000020a0 <Mat_Help>:
    20a0:	push	{fp, lr}
    20a4:	mov	fp, sp
    20a8:	mov	r1, r0
    20ac:	ldr	r0, [r0]
    20b0:	cmp	r0, #0
    20b4:	beq	20cc <Mat_Help+0x2c>
    20b8:	add	r4, r1, #4
    20bc:	bl	18c4 <puts@plt>
    20c0:	ldr	r0, [r4], #4
    20c4:	cmp	r0, #0
    20c8:	bne	20bc <Mat_Help+0x1c>
    20cc:	mov	r0, #0
    20d0:	bl	1900 <exit@plt>

000020d4 <Mat_LogClose>:
    20d4:	ldr	r0, [pc, #16]	; 20ec <Mat_LogClose+0x18>
    20d8:	mov	r1, #0
    20dc:	add	r0, pc, r0
    20e0:	str	r1, [r0, #12]
    20e4:	mov	r0, #1
    20e8:	bx	lr
    20ec:	.word	0x0006f034

000020f0 <Mat_LogInit>:
    20f0:	ldr	r0, [pc, #32]	; 2118 <Mat_LogInit+0x28>
    20f4:	ldr	r2, [pc, #32]	; 211c <Mat_LogInit+0x2c>
    20f8:	mov	r1, #0
    20fc:	add	r0, pc, r0
    2100:	add	r2, pc, r2
    2104:	str	r2, [r0, #12]
    2108:	str	r1, [r0]
    210c:	str	r1, [r0, #4]
    2110:	mov	r0, #0
    2114:	bx	lr
    2118:	.word	0x0006f014
    211c:	.word	0x00000018

00002120 <mat_logfunc>:
    2120:	push	{r4, sl, fp, lr}
    2124:	add	fp, sp, #8
    2128:	ldr	r2, [pc, #388]	; 22b4 <mat_logfunc+0x194>
    212c:	mov	r3, r1
    2130:	and	r1, r0, #2
    2134:	add	r2, pc, r2
    2138:	ldr	r2, [r2, #16]
    213c:	cmp	r2, #0
    2140:	beq	2170 <mat_logfunc+0x50>
    2144:	cmp	r1, #0
    2148:	beq	2190 <mat_logfunc+0x70>
    214c:	ldr	r4, [pc, #356]	; 22b8 <mat_logfunc+0x198>
    2150:	ldr	r4, [pc, r4]
    2154:	ldr	r0, [r4]
    2158:	ldr	r1, [pc, #348]	; 22bc <mat_logfunc+0x19c>
    215c:	add	r1, pc, r1
    2160:	bl	1960 <fprintf@plt>
    2164:	ldr	r0, [r4]
    2168:	pop	{r4, sl, fp, lr}
    216c:	b	17f8 <fflush@plt>
    2170:	cmp	r1, #0
    2174:	beq	21cc <mat_logfunc+0xac>
    2178:	ldr	r4, [pc, #352]	; 22e0 <mat_logfunc+0x1c0>
    217c:	ldr	r4, [pc, r4]
    2180:	ldr	r0, [r4]
    2184:	ldr	r1, [pc, #344]	; 22e4 <mat_logfunc+0x1c4>
    2188:	add	r1, pc, r1
    218c:	b	2254 <mat_logfunc+0x134>
    2190:	tst	r0, #1
    2194:	bne	2268 <mat_logfunc+0x148>
    2198:	tst	r0, #4
    219c:	bne	2204 <mat_logfunc+0xe4>
    21a0:	tst	r0, #16
    21a4:	beq	21e4 <mat_logfunc+0xc4>
    21a8:	ldr	r4, [pc, #288]	; 22d0 <mat_logfunc+0x1b0>
    21ac:	ldr	r4, [pc, r4]
    21b0:	ldr	r0, [r4]
    21b4:	ldr	r1, [pc, #280]	; 22d4 <mat_logfunc+0x1b4>
    21b8:	add	r1, pc, r1
    21bc:	bl	1960 <fprintf@plt>
    21c0:	ldr	r0, [r4]
    21c4:	pop	{r4, sl, fp, lr}
    21c8:	b	17f8 <fflush@plt>
    21cc:	tst	r0, #1
    21d0:	bne	228c <mat_logfunc+0x16c>
    21d4:	tst	r0, #4
    21d8:	bne	2228 <mat_logfunc+0x108>
    21dc:	tst	r0, #16
    21e0:	bne	2240 <mat_logfunc+0x120>
    21e4:	tst	r0, #8
    21e8:	popeq	{r4, sl, fp, pc}
    21ec:	ldr	r4, [pc, #228]	; 22d8 <mat_logfunc+0x1b8>
    21f0:	ldr	r4, [pc, r4]
    21f4:	ldr	r0, [r4]
    21f8:	ldr	r1, [pc, #220]	; 22dc <mat_logfunc+0x1bc>
    21fc:	add	r1, pc, r1
    2200:	b	2254 <mat_logfunc+0x134>
    2204:	ldr	r4, [pc, #188]	; 22c8 <mat_logfunc+0x1a8>
    2208:	ldr	r4, [pc, r4]
    220c:	ldr	r0, [r4]
    2210:	ldr	r1, [pc, #180]	; 22cc <mat_logfunc+0x1ac>
    2214:	add	r1, pc, r1
    2218:	bl	1960 <fprintf@plt>
    221c:	ldr	r0, [r4]
    2220:	pop	{r4, sl, fp, lr}
    2224:	b	17f8 <fflush@plt>
    2228:	ldr	r4, [pc, #192]	; 22f0 <mat_logfunc+0x1d0>
    222c:	ldr	r4, [pc, r4]
    2230:	ldr	r0, [r4]
    2234:	ldr	r1, [pc, #184]	; 22f4 <mat_logfunc+0x1d4>
    2238:	add	r1, pc, r1
    223c:	b	2254 <mat_logfunc+0x134>
    2240:	ldr	r4, [pc, #176]	; 22f8 <mat_logfunc+0x1d8>
    2244:	ldr	r4, [pc, r4]
    2248:	ldr	r0, [r4]
    224c:	ldr	r1, [pc, #168]	; 22fc <mat_logfunc+0x1dc>
    2250:	add	r1, pc, r1
    2254:	mov	r2, r3
    2258:	bl	1960 <fprintf@plt>
    225c:	ldr	r0, [r4]
    2260:	pop	{r4, sl, fp, lr}
    2264:	b	17f8 <fflush@plt>
    2268:	ldr	r4, [pc, #80]	; 22c0 <mat_logfunc+0x1a0>
    226c:	ldr	r4, [pc, r4]
    2270:	ldr	r0, [r4]
    2274:	ldr	r1, [pc, #72]	; 22c4 <mat_logfunc+0x1a4>
    2278:	add	r1, pc, r1
    227c:	bl	1960 <fprintf@plt>
    2280:	ldr	r0, [r4]
    2284:	bl	17f8 <fflush@plt>
    2288:	bl	1a38 <abort@plt>
    228c:	ldr	r4, [pc, #84]	; 22e8 <mat_logfunc+0x1c8>
    2290:	mov	r2, r3
    2294:	ldr	r4, [pc, r4]
    2298:	ldr	r0, [r4]
    229c:	ldr	r1, [pc, #72]	; 22ec <mat_logfunc+0x1cc>
    22a0:	add	r1, pc, r1
    22a4:	bl	1960 <fprintf@plt>
    22a8:	ldr	r0, [r4]
    22ac:	bl	17f8 <fflush@plt>
    22b0:	bl	1a38 <abort@plt>
    22b4:	.word	0x0006efdc
    22b8:	.word	0x0006efa8
    22bc:	.word	0x0005d2cc
    22c0:	.word	0x0006ee8c
    22c4:	.word	0x0005d1b0
    22c8:	.word	0x0006eef0
    22cc:	.word	0x0005d220
    22d0:	.word	0x0006ef4c
    22d4:	.word	0x0005d288
    22d8:	.word	0x0006ef10
    22dc:	.word	0x0005d26a
    22e0:	.word	0x0006ef7c
    22e4:	.word	0x0005d2c4
    22e8:	.word	0x0006ee64
    22ec:	.word	0x0005d1ac
    22f0:	.word	0x0006eecc
    22f4:	.word	0x0005d21e
    22f8:	.word	0x0006eeb4
    22fc:	.word	0x0005d210

00002300 <Mat_LogInitFunc>:
    2300:	ldr	r2, [pc, #28]	; 2324 <Mat_LogInitFunc+0x24>
    2304:	add	r2, pc, r2
    2308:	str	r1, [r2, #12]
    230c:	str	r0, [r2, #16]
    2310:	mov	r0, #0
    2314:	str	r0, [r2]
    2318:	str	r0, [r2, #4]
    231c:	mov	r0, #0
    2320:	bx	lr
    2324:	.word	0x0006ee0c

00002328 <Mat_Warning>:
    2328:	sub	sp, sp, #12
    232c:	push	{r4, r5, fp, lr}
    2330:	add	fp, sp, #8
    2334:	sub	sp, sp, #4
    2338:	add	ip, fp, #8
    233c:	stm	ip, {r1, r2, r3}
    2340:	add	r1, fp, #8
    2344:	str	r1, [sp]
    2348:	ldr	r5, [pc, #64]	; 2390 <Mat_Warning+0x68>
    234c:	add	r5, pc, r5
    2350:	ldr	r1, [r5, #12]
    2354:	cmp	r1, #0
    2358:	beq	2380 <Mat_Warning+0x58>
    235c:	ldr	r1, [sp]
    2360:	bl	1d48 <strdup_vprintf>
    2364:	ldr	r2, [r5, #12]
    2368:	mov	r4, r0
    236c:	mov	r0, #4
    2370:	mov	r1, r4
    2374:	blx	r2
    2378:	mov	r0, r4
    237c:	bl	1804 <free@plt>
    2380:	sub	sp, fp, #8
    2384:	pop	{r4, r5, fp, lr}
    2388:	add	sp, sp, #12
    238c:	bx	lr
    2390:	.word	0x0006edc4

00002394 <Mat_SizeOf>:
    2394:	sub	r0, r0, #1
    2398:	cmp	r0, #17
    239c:	ldrls	r1, [pc, #12]	; 23b0 <Mat_SizeOf+0x1c>
    23a0:	movhi	r0, #0
    23a4:	addls	r1, pc, r1
    23a8:	ldrls	r0, [r1, r0, lsl #2]
    23ac:	bx	lr
    23b0:	.word	0x0005d0d4

000023b4 <InflateSkip>:
    23b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23b8:	add	fp, sp, #28
    23bc:	sub	sp, sp, #4
    23c0:	sub	sp, sp, #1024	; 0x400
    23c4:	cmp	r2, #1
    23c8:	blt	2468 <InflateSkip+0xb4>
    23cc:	mov	r8, r0
    23d0:	ldr	r0, [r1, #4]
    23d4:	cmp	r2, #512	; 0x200
    23d8:	mov	r6, r2
    23dc:	mov	r4, r2
    23e0:	mov	r5, r1
    23e4:	mov	r9, #0
    23e8:	movge	r6, #512	; 0x200
    23ec:	cmp	r0, #0
    23f0:	bne	2418 <InflateSkip+0x64>
    23f4:	add	r0, sp, #512	; 0x200
    23f8:	mov	r1, #1
    23fc:	mov	r2, r6
    2400:	str	r0, [r5]
    2404:	ldr	r3, [r8]
    2408:	bl	18b8 <fread@plt>
    240c:	ldr	r1, [r5, #4]
    2410:	add	r9, r1, r0
    2414:	str	r9, [r5, #4]
    2418:	mov	sl, sp
    241c:	mov	r0, r5
    2420:	mov	r1, #3
    2424:	str	sl, [r5, #12]
    2428:	str	r6, [r5, #16]
    242c:	bl	17ec <inflate@plt>
    2430:	cmp	r0, #0
    2434:	beq	2478 <InflateSkip+0xc4>
    2438:	cmp	r0, #1
    243c:	beq	2560 <InflateSkip+0x1ac>
    2440:	cmp	r0, #2
    2444:	mvneq	r0, #2
    2448:	bl	1888 <zError@plt>
    244c:	mov	r1, r0
    2450:	ldr	r0, [pc, #276]	; 256c <InflateSkip+0x1b8>
    2454:	add	r0, pc, r0
    2458:	bl	19b4 <Mat_Critical@plt>
    245c:	mov	r0, r9
    2460:	sub	sp, fp, #28
    2464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2468:	mov	r9, #0
    246c:	mov	r0, r9
    2470:	sub	sp, fp, #28
    2474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2478:	ldr	r0, [r5, #16]
    247c:	cmp	r0, #0
    2480:	beq	2498 <InflateSkip+0xe4>
    2484:	mov	r7, r6
    2488:	mov	r6, #0
    248c:	cmp	r6, r4
    2490:	blt	24b4 <InflateSkip+0x100>
    2494:	b	2534 <InflateSkip+0x180>
    2498:	sub	r7, r4, r6
    249c:	str	sl, [r5, #12]
    24a0:	cmp	r7, #512	; 0x200
    24a4:	movge	r7, #512	; 0x200
    24a8:	str	r7, [r5, #16]
    24ac:	cmp	r6, r4
    24b0:	bge	2534 <InflateSkip+0x180>
    24b4:	ldr	r0, [r5, #4]
    24b8:	cmp	r0, #0
    24bc:	bne	24e8 <InflateSkip+0x134>
    24c0:	add	r0, sp, #512	; 0x200
    24c4:	mov	r1, #1
    24c8:	mov	r2, r7
    24cc:	str	r0, [r5]
    24d0:	ldr	r3, [r8]
    24d4:	bl	18b8 <fread@plt>
    24d8:	ldr	r1, [r5, #4]
    24dc:	add	r0, r1, r0
    24e0:	add	r9, r0, r9
    24e4:	str	r0, [r5, #4]
    24e8:	mov	r0, r5
    24ec:	mov	r1, #3
    24f0:	bl	17ec <inflate@plt>
    24f4:	cmp	r0, #0
    24f8:	bne	2510 <InflateSkip+0x15c>
    24fc:	ldr	r0, [r5, #16]
    2500:	cmp	r0, #0
    2504:	bne	24ac <InflateSkip+0xf8>
    2508:	add	r6, r6, r7
    250c:	b	2498 <InflateSkip+0xe4>
    2510:	cmp	r0, #1
    2514:	beq	2534 <InflateSkip+0x180>
    2518:	cmp	r0, #2
    251c:	mvneq	r0, #2
    2520:	bl	1888 <zError@plt>
    2524:	mov	r1, r0
    2528:	ldr	r0, [pc, #64]	; 2570 <InflateSkip+0x1bc>
    252c:	add	r0, pc, r0
    2530:	bl	19b4 <Mat_Critical@plt>
    2534:	ldr	r1, [r5, #4]
    2538:	cmp	r1, #0
    253c:	beq	2560 <InflateSkip+0x1ac>
    2540:	ldr	r0, [r8]
    2544:	rsb	r1, r1, #0
    2548:	mov	r2, #1
    254c:	bl	1a2c <fseek@plt>
    2550:	ldr	r0, [r5, #4]
    2554:	mov	r1, #0
    2558:	str	r1, [r5, #4]
    255c:	sub	r9, r9, r0
    2560:	mov	r0, r9
    2564:	sub	sp, fp, #28
    2568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    256c:	.word	0x0005d06c
    2570:	.word	0x0005cf94

00002574 <InflateSkip2>:
    2574:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2578:	add	fp, sp, #28
    257c:	sub	sp, sp, #68	; 0x44
    2580:	mov	r8, r0
    2584:	ldr	r0, [r1, #52]	; 0x34
    2588:	mov	r5, r1
    258c:	mov	r7, r2
    2590:	mov	r9, #0
    2594:	ldr	r0, [r0, #12]
    2598:	ldr	r1, [r0, #4]
    259c:	cmp	r1, #0
    25a0:	bne	25d0 <InflateSkip2+0x5c>
    25a4:	add	r1, sp, #36	; 0x24
    25a8:	mov	r2, #1
    25ac:	stm	r0, {r1, r2}
    25b0:	mov	r0, r1
    25b4:	mov	r1, #1
    25b8:	mov	r2, #1
    25bc:	ldr	r3, [r8]
    25c0:	bl	18b8 <fread@plt>
    25c4:	mov	r9, r0
    25c8:	ldr	r0, [r5, #52]	; 0x34
    25cc:	ldr	r0, [r0, #12]
    25d0:	add	r4, sp, #4
    25d4:	mov	r1, #1
    25d8:	str	r4, [r0, #12]
    25dc:	str	r1, [r0, #16]
    25e0:	mov	r1, #0
    25e4:	bl	17ec <inflate@plt>
    25e8:	cmp	r0, #0
    25ec:	beq	2620 <InflateSkip2+0xac>
    25f0:	ldr	r5, [r5, #36]	; 0x24
    25f4:	cmp	r0, #2
    25f8:	mvneq	r0, #2
    25fc:	bl	1888 <zError@plt>
    2600:	mov	r2, r0
    2604:	ldr	r0, [pc, #280]	; 2724 <InflateSkip2+0x1b0>
    2608:	mov	r1, r5
    260c:	add	r0, pc, r0
    2610:	bl	19b4 <Mat_Critical@plt>
    2614:	mov	r0, r9
    2618:	sub	sp, fp, #28
    261c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2620:	ldr	r0, [r5, #52]	; 0x34
    2624:	ldr	r1, [r0, #12]
    2628:	ldr	r2, [r1, #16]
    262c:	mov	r3, r1
    2630:	cmp	r2, #0
    2634:	moveq	r2, #1
    2638:	streq	r4, [r1, #12]
    263c:	streq	r2, [r1, #16]
    2640:	ldr	r4, [r3, #4]!
    2644:	cmp	r4, #0
    2648:	mov	r2, r4
    264c:	movwne	r2, #1
    2650:	cmp	r7, #1
    2654:	blt	26e8 <InflateSkip2+0x174>
    2658:	mov	r6, #0
    265c:	add	sl, sp, #36	; 0x24
    2660:	tst	r2, #1
    2664:	bne	2694 <InflateSkip2+0x120>
    2668:	mov	r0, #1
    266c:	mov	r2, #1
    2670:	str	r0, [r3]
    2674:	str	sl, [r1]
    2678:	mov	r0, sl
    267c:	mov	r1, #1
    2680:	ldr	r3, [r8]
    2684:	bl	18b8 <fread@plt>
    2688:	add	r9, r0, r9
    268c:	ldr	r0, [r5, #52]	; 0x34
    2690:	add	r6, r6, #1
    2694:	ldr	r0, [r0, #12]
    2698:	mov	r1, #0
    269c:	bl	17ec <inflate@plt>
    26a0:	cmp	r0, #0
    26a4:	bne	25f0 <InflateSkip2+0x7c>
    26a8:	ldr	r0, [r5, #52]	; 0x34
    26ac:	ldr	r1, [r0, #12]
    26b0:	ldr	r2, [r1, #16]
    26b4:	cmp	r2, #0
    26b8:	bne	26cc <InflateSkip2+0x158>
    26bc:	add	r2, sp, #4
    26c0:	str	r2, [r1, #12]
    26c4:	mov	r2, #1
    26c8:	str	r2, [r1, #16]
    26cc:	mov	r3, r1
    26d0:	ldr	r4, [r3, #4]!
    26d4:	cmp	r4, #0
    26d8:	mov	r2, r4
    26dc:	movwne	r2, #1
    26e0:	cmp	r6, r7
    26e4:	blt	2660 <InflateSkip2+0xec>
    26e8:	cmp	r2, #0
    26ec:	beq	2614 <InflateSkip2+0xa0>
    26f0:	ldr	r0, [r8]
    26f4:	rsb	r1, r4, #0
    26f8:	mov	r2, #1
    26fc:	bl	1a2c <fseek@plt>
    2700:	ldr	r0, [r5, #52]	; 0x34
    2704:	mov	r2, #0
    2708:	ldr	r0, [r0, #12]
    270c:	ldr	r1, [r0, #4]
    2710:	str	r2, [r0, #4]
    2714:	sub	r9, r9, r1
    2718:	mov	r0, r9
    271c:	sub	sp, fp, #28
    2720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2724:	.word	0x0005ced5

00002728 <InflateSkipData>:
    2728:	push	{r4, r5, fp, lr}
    272c:	add	fp, sp, #8
    2730:	mov	r4, r3
    2734:	mov	r3, r0
    2738:	mov	r0, #0
    273c:	cmp	r3, #0
    2740:	cmpne	r1, #0
    2744:	bne	274c <InflateSkipData+0x24>
    2748:	pop	{r4, r5, fp, pc}
    274c:	cmp	r4, #1
    2750:	blt	2748 <InflateSkipData+0x20>
    2754:	sub	r2, r2, #1
    2758:	cmp	r2, #12
    275c:	bhi	2748 <InflateSkipData+0x20>
    2760:	uxth	ip, r2
    2764:	movw	lr, #6527	; 0x197f
    2768:	mov	r5, #1
    276c:	tst	r5, lr, lsr ip
    2770:	popeq	{r4, r5, fp, pc}
    2774:	ldr	r0, [pc, #24]	; 2794 <InflateSkipData+0x6c>
    2778:	add	r0, pc, r0
    277c:	ldr	r0, [r0, r2, lsl #2]
    2780:	mul	r2, r0, r4
    2784:	mov	r0, r3
    2788:	bl	23b4 <InflateSkip>
    278c:	mov	r0, r4
    2790:	pop	{r4, r5, fp, pc}
    2794:	.word	0x0005cfa0

00002798 <InflateVarTag>:
    2798:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    279c:	add	fp, sp, #24
    27a0:	sub	sp, sp, #32
    27a4:	cmp	r2, #0
    27a8:	beq	2840 <InflateVarTag+0xa8>
    27ac:	mov	r8, r0
    27b0:	ldr	r0, [r1, #52]	; 0x34
    27b4:	mov	r5, r1
    27b8:	mov	r7, r2
    27bc:	mov	r4, #0
    27c0:	ldr	r0, [r0, #12]
    27c4:	ldr	r1, [r0, #4]
    27c8:	cmp	r1, #0
    27cc:	bne	27fc <InflateVarTag+0x64>
    27d0:	mov	r1, sp
    27d4:	mov	r2, #1
    27d8:	stm	r0, {r1, r2}
    27dc:	mov	r0, r1
    27e0:	mov	r1, #1
    27e4:	mov	r2, #1
    27e8:	ldr	r3, [r8]
    27ec:	bl	18b8 <fread@plt>
    27f0:	mov	r4, r0
    27f4:	ldr	r0, [r5, #52]	; 0x34
    27f8:	ldr	r0, [r0, #12]
    27fc:	mov	r1, #8
    2800:	str	r7, [r0, #12]
    2804:	str	r1, [r0, #16]
    2808:	mov	r1, #0
    280c:	bl	17ec <inflate@plt>
    2810:	cmp	r0, #0
    2814:	beq	2850 <InflateVarTag+0xb8>
    2818:	cmp	r0, #2
    281c:	mvneq	r0, #2
    2820:	bl	1888 <zError@plt>
    2824:	mov	r1, r0
    2828:	ldr	r0, [pc, #200]	; 28f8 <InflateVarTag+0x160>
    282c:	add	r0, pc, r0
    2830:	bl	19b4 <Mat_Critical@plt>
    2834:	mov	r0, r4
    2838:	sub	sp, fp, #24
    283c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    2840:	mov	r4, #0
    2844:	mov	r0, r4
    2848:	sub	sp, fp, #24
    284c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    2850:	mov	r9, #1
    2854:	mov	r7, sp
    2858:	mov	r6, #1
    285c:	ldr	r0, [r5, #52]	; 0x34
    2860:	ldr	r0, [r0, #12]
    2864:	ldr	r2, [r0, #16]
    2868:	ldr	r1, [r0, #4]
    286c:	cmp	r2, #0
    2870:	beq	28bc <InflateVarTag+0x124>
    2874:	cmp	r6, #1
    2878:	cmpeq	r1, #0
    287c:	bne	28bc <InflateVarTag+0x124>
    2880:	stm	r0, {r7, r9}
    2884:	mov	r0, r7
    2888:	mov	r1, #1
    288c:	mov	r2, #1
    2890:	ldr	r3, [r8]
    2894:	bl	18b8 <fread@plt>
    2898:	mov	r6, r0
    289c:	add	r4, r0, r4
    28a0:	ldr	r0, [r5, #52]	; 0x34
    28a4:	mov	r1, #0
    28a8:	ldr	r0, [r0, #12]
    28ac:	bl	17ec <inflate@plt>
    28b0:	cmp	r0, #0
    28b4:	beq	285c <InflateVarTag+0xc4>
    28b8:	b	2818 <InflateVarTag+0x80>
    28bc:	cmp	r1, #0
    28c0:	beq	28ec <InflateVarTag+0x154>
    28c4:	ldr	r0, [r8]
    28c8:	rsb	r1, r1, #0
    28cc:	mov	r2, #1
    28d0:	bl	1a2c <fseek@plt>
    28d4:	ldr	r0, [r5, #52]	; 0x34
    28d8:	mov	r2, #0
    28dc:	ldr	r0, [r0, #12]
    28e0:	ldr	r1, [r0, #4]
    28e4:	str	r2, [r0, #4]
    28e8:	sub	r4, r4, r1
    28ec:	mov	r0, r4
    28f0:	sub	sp, fp, #24
    28f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    28f8:	.word	0x0005ccdc

000028fc <InflateArrayFlags>:
    28fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    2900:	add	fp, sp, #24
    2904:	sub	sp, sp, #32
    2908:	cmp	r2, #0
    290c:	beq	29a4 <InflateArrayFlags+0xa8>
    2910:	mov	r8, r0
    2914:	ldr	r0, [r1, #52]	; 0x34
    2918:	mov	r5, r1
    291c:	mov	r7, r2
    2920:	mov	r4, #0
    2924:	ldr	r0, [r0, #12]
    2928:	ldr	r1, [r0, #4]
    292c:	cmp	r1, #0
    2930:	bne	2960 <InflateArrayFlags+0x64>
    2934:	mov	r1, sp
    2938:	mov	r2, #1
    293c:	stm	r0, {r1, r2}
    2940:	mov	r0, r1
    2944:	mov	r1, #1
    2948:	mov	r2, #1
    294c:	ldr	r3, [r8]
    2950:	bl	18b8 <fread@plt>
    2954:	mov	r4, r0
    2958:	ldr	r0, [r5, #52]	; 0x34
    295c:	ldr	r0, [r0, #12]
    2960:	mov	r1, #16
    2964:	str	r7, [r0, #12]
    2968:	str	r1, [r0, #16]
    296c:	mov	r1, #0
    2970:	bl	17ec <inflate@plt>
    2974:	cmp	r0, #0
    2978:	beq	29b4 <InflateArrayFlags+0xb8>
    297c:	cmp	r0, #2
    2980:	mvneq	r0, #2
    2984:	bl	1888 <zError@plt>
    2988:	mov	r1, r0
    298c:	ldr	r0, [pc, #200]	; 2a5c <InflateArrayFlags+0x160>
    2990:	add	r0, pc, r0
    2994:	bl	19b4 <Mat_Critical@plt>
    2998:	mov	r0, r4
    299c:	sub	sp, fp, #24
    29a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    29a4:	mov	r4, #0
    29a8:	mov	r0, r4
    29ac:	sub	sp, fp, #24
    29b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    29b4:	mov	r9, #1
    29b8:	mov	r7, sp
    29bc:	mov	r6, #1
    29c0:	ldr	r0, [r5, #52]	; 0x34
    29c4:	ldr	r0, [r0, #12]
    29c8:	ldr	r2, [r0, #16]
    29cc:	ldr	r1, [r0, #4]
    29d0:	cmp	r2, #0
    29d4:	beq	2a20 <InflateArrayFlags+0x124>
    29d8:	cmp	r6, #1
    29dc:	cmpeq	r1, #0
    29e0:	bne	2a20 <InflateArrayFlags+0x124>
    29e4:	stm	r0, {r7, r9}
    29e8:	mov	r0, r7
    29ec:	mov	r1, #1
    29f0:	mov	r2, #1
    29f4:	ldr	r3, [r8]
    29f8:	bl	18b8 <fread@plt>
    29fc:	mov	r6, r0
    2a00:	add	r4, r0, r4
    2a04:	ldr	r0, [r5, #52]	; 0x34
    2a08:	mov	r1, #0
    2a0c:	ldr	r0, [r0, #12]
    2a10:	bl	17ec <inflate@plt>
    2a14:	cmp	r0, #0
    2a18:	beq	29c0 <InflateArrayFlags+0xc4>
    2a1c:	b	297c <InflateArrayFlags+0x80>
    2a20:	cmp	r1, #0
    2a24:	beq	2a50 <InflateArrayFlags+0x154>
    2a28:	ldr	r0, [r8]
    2a2c:	rsb	r1, r1, #0
    2a30:	mov	r2, #1
    2a34:	bl	1a2c <fseek@plt>
    2a38:	ldr	r0, [r5, #52]	; 0x34
    2a3c:	mov	r2, #0
    2a40:	ldr	r0, [r0, #12]
    2a44:	ldr	r1, [r0, #4]
    2a48:	str	r2, [r0, #4]
    2a4c:	sub	r4, r4, r1
    2a50:	mov	r0, r4
    2a54:	sub	sp, fp, #24
    2a58:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    2a5c:	.word	0x0005cb9b

00002a60 <InflateRankDims>:
    2a60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a64:	add	fp, sp, #28
    2a68:	sub	sp, sp, #44	; 0x2c
    2a6c:	cmp	r2, #0
    2a70:	beq	2b0c <InflateRankDims+0xac>
    2a74:	mov	sl, r0
    2a78:	ldr	r0, [r1, #52]	; 0x34
    2a7c:	mov	r5, r1
    2a80:	mov	r6, r3
    2a84:	mov	r9, r2
    2a88:	mov	r4, #0
    2a8c:	ldr	r0, [r0, #12]
    2a90:	ldr	r1, [r0, #4]
    2a94:	cmp	r1, #0
    2a98:	bne	2ac8 <InflateRankDims+0x68>
    2a9c:	add	r1, sp, #12
    2aa0:	mov	r2, #1
    2aa4:	stm	r0, {r1, r2}
    2aa8:	mov	r0, r1
    2aac:	mov	r1, #1
    2ab0:	mov	r2, #1
    2ab4:	ldr	r3, [sl]
    2ab8:	bl	18b8 <fread@plt>
    2abc:	mov	r4, r0
    2ac0:	ldr	r0, [r5, #52]	; 0x34
    2ac4:	ldr	r0, [r0, #12]
    2ac8:	mov	r1, #8
    2acc:	str	r9, [r0, #12]
    2ad0:	str	r1, [r0, #16]
    2ad4:	mov	r1, #0
    2ad8:	bl	17ec <inflate@plt>
    2adc:	cmp	r0, #0
    2ae0:	beq	2b1c <InflateRankDims+0xbc>
    2ae4:	cmp	r0, #2
    2ae8:	mvneq	r0, #2
    2aec:	bl	1888 <zError@plt>
    2af0:	mov	r1, r0
    2af4:	ldr	r0, [pc, #620]	; 2d68 <InflateRankDims+0x308>
    2af8:	add	r0, pc, r0
    2afc:	bl	19b4 <Mat_Critical@plt>
    2b00:	mov	r0, r4
    2b04:	sub	sp, fp, #28
    2b08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b0c:	mov	r4, #0
    2b10:	mov	r0, r4
    2b14:	sub	sp, fp, #28
    2b18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b1c:	str	r6, [sp]
    2b20:	mov	r6, #1
    2b24:	add	r8, sp, #12
    2b28:	mov	r7, #1
    2b2c:	ldr	r0, [r5, #52]	; 0x34
    2b30:	ldr	r0, [r0, #12]
    2b34:	ldr	r1, [r0, #16]
    2b38:	cmp	r1, #0
    2b3c:	beq	2b90 <InflateRankDims+0x130>
    2b40:	cmp	r7, #1
    2b44:	ldreq	r1, [r0, #4]
    2b48:	cmpeq	r1, #0
    2b4c:	bne	2b90 <InflateRankDims+0x130>
    2b50:	str	r8, [r0]
    2b54:	str	r6, [r0, #4]
    2b58:	mov	r0, r8
    2b5c:	mov	r1, #1
    2b60:	mov	r2, #1
    2b64:	ldr	r3, [sl]
    2b68:	bl	18b8 <fread@plt>
    2b6c:	mov	r7, r0
    2b70:	add	r4, r0, r4
    2b74:	ldr	r0, [r5, #52]	; 0x34
    2b78:	mov	r1, #0
    2b7c:	ldr	r0, [r0, #12]
    2b80:	bl	17ec <inflate@plt>
    2b84:	cmp	r0, #0
    2b88:	beq	2b2c <InflateRankDims+0xcc>
    2b8c:	b	2ae4 <InflateRankDims+0x84>
    2b90:	ldm	r9, {r0, r1}
    2b94:	stmib	sp, {r0, r1}
    2b98:	ldr	r1, [sl, #20]
    2b9c:	cmp	r1, #0
    2ba0:	beq	2bc0 <InflateRankDims+0x160>
    2ba4:	add	r0, sp, #4
    2ba8:	add	r7, r0, #4
    2bac:	add	r0, sp, #4
    2bb0:	bl	1bf0 <Mat_int32Swap>
    2bb4:	mov	r0, r7
    2bb8:	bl	1bf0 <Mat_int32Swap>
    2bbc:	ldrh	r0, [sp, #4]
    2bc0:	uxth	r0, r0
    2bc4:	cmp	r0, #5
    2bc8:	bne	2c6c <InflateRankDims+0x20c>
    2bcc:	ldr	r6, [sp, #8]
    2bd0:	asr	r0, r6, #31
    2bd4:	add	r0, r6, r0, lsr #29
    2bd8:	bic	r0, r0, #7
    2bdc:	subs	r0, r6, r0
    2be0:	rsb	r0, r0, #8
    2be4:	addne	r6, r6, r0
    2be8:	ldr	r0, [r5, #52]	; 0x34
    2bec:	ldr	r0, [r0, #12]
    2bf0:	ldr	r1, [r0, #4]
    2bf4:	cmp	r1, #0
    2bf8:	bne	2c28 <InflateRankDims+0x1c8>
    2bfc:	mov	r1, #1
    2c00:	str	r8, [r0]
    2c04:	mov	r2, #1
    2c08:	str	r1, [r0, #4]
    2c0c:	mov	r0, r8
    2c10:	mov	r1, #1
    2c14:	ldr	r3, [sl]
    2c18:	bl	18b8 <fread@plt>
    2c1c:	add	r4, r0, r4
    2c20:	ldr	r0, [r5, #52]	; 0x34
    2c24:	ldr	r0, [r0, #12]
    2c28:	ldr	r2, [sp]
    2c2c:	add	r1, r6, #2
    2c30:	str	r6, [r0, #16]
    2c34:	lsl	r1, r1, #2
    2c38:	cmp	r1, r2
    2c3c:	bls	2c84 <InflateRankDims+0x224>
    2c40:	mov	r0, r6
    2c44:	mov	r1, #4
    2c48:	bl	1798 <calloc@plt>
    2c4c:	mov	r1, r0
    2c50:	ldr	r0, [fp, #8]
    2c54:	cmp	r1, #0
    2c58:	str	r1, [r0]
    2c5c:	beq	2d44 <InflateRankDims+0x2e4>
    2c60:	ldr	r0, [r5, #52]	; 0x34
    2c64:	ldr	r0, [r0, #12]
    2c68:	b	2c88 <InflateRankDims+0x228>
    2c6c:	ldr	r0, [pc, #240]	; 2d64 <InflateRankDims+0x304>
    2c70:	add	r0, pc, r0
    2c74:	bl	19b4 <Mat_Critical@plt>
    2c78:	mov	r0, r4
    2c7c:	sub	sp, fp, #28
    2c80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c84:	add	r1, r9, #8
    2c88:	str	r1, [r0, #12]
    2c8c:	mov	r1, #0
    2c90:	bl	17ec <inflate@plt>
    2c94:	cmp	r0, #0
    2c98:	bne	2ae4 <InflateRankDims+0x84>
    2c9c:	mov	r6, #1
    2ca0:	mov	r7, #1
    2ca4:	ldr	r0, [r5, #52]	; 0x34
    2ca8:	ldr	r0, [r0, #12]
    2cac:	ldr	r2, [r0, #16]
    2cb0:	ldr	r1, [r0, #4]
    2cb4:	cmp	r2, #0
    2cb8:	beq	2d08 <InflateRankDims+0x2a8>
    2cbc:	cmp	r7, #1
    2cc0:	cmpeq	r1, #0
    2cc4:	bne	2d08 <InflateRankDims+0x2a8>
    2cc8:	str	r8, [r0]
    2ccc:	str	r6, [r0, #4]
    2cd0:	mov	r0, r8
    2cd4:	mov	r1, #1
    2cd8:	mov	r2, #1
    2cdc:	ldr	r3, [sl]
    2ce0:	bl	18b8 <fread@plt>
    2ce4:	mov	r7, r0
    2ce8:	add	r4, r0, r4
    2cec:	ldr	r0, [r5, #52]	; 0x34
    2cf0:	mov	r1, #0
    2cf4:	ldr	r0, [r0, #12]
    2cf8:	bl	17ec <inflate@plt>
    2cfc:	cmp	r0, #0
    2d00:	beq	2ca4 <InflateRankDims+0x244>
    2d04:	b	2ae4 <InflateRankDims+0x84>
    2d08:	cmp	r1, #0
    2d0c:	beq	2c78 <InflateRankDims+0x218>
    2d10:	ldr	r0, [sl]
    2d14:	rsb	r1, r1, #0
    2d18:	mov	r2, #1
    2d1c:	bl	1a2c <fseek@plt>
    2d20:	ldr	r0, [r5, #52]	; 0x34
    2d24:	mov	r2, #0
    2d28:	ldr	r0, [r0, #12]
    2d2c:	ldr	r1, [r0, #4]
    2d30:	str	r2, [r0, #4]
    2d34:	sub	r4, r4, r1
    2d38:	mov	r0, r4
    2d3c:	sub	sp, fp, #28
    2d40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d44:	mov	r0, #0
    2d48:	str	r0, [r9, #4]
    2d4c:	ldr	r0, [pc, #24]	; 2d6c <InflateRankDims+0x30c>
    2d50:	add	r0, pc, r0
    2d54:	bl	19b4 <Mat_Critical@plt>
    2d58:	mov	r0, r4
    2d5c:	sub	sp, fp, #28
    2d60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d64:	.word	0x0005c907
    2d68:	.word	0x0005ca5a
    2d6c:	.word	0x0005c865

00002d70 <InflateVarNameTag>:
    2d70:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    2d74:	add	fp, sp, #24
    2d78:	sub	sp, sp, #32
    2d7c:	cmp	r2, #0
    2d80:	beq	2e18 <InflateVarNameTag+0xa8>
    2d84:	mov	r8, r0
    2d88:	ldr	r0, [r1, #52]	; 0x34
    2d8c:	mov	r5, r1
    2d90:	mov	r7, r2
    2d94:	mov	r4, #0
    2d98:	ldr	r0, [r0, #12]
    2d9c:	ldr	r1, [r0, #4]
    2da0:	cmp	r1, #0
    2da4:	bne	2dd4 <InflateVarNameTag+0x64>
    2da8:	mov	r1, sp
    2dac:	mov	r2, #1
    2db0:	stm	r0, {r1, r2}
    2db4:	mov	r0, r1
    2db8:	mov	r1, #1
    2dbc:	mov	r2, #1
    2dc0:	ldr	r3, [r8]
    2dc4:	bl	18b8 <fread@plt>
    2dc8:	mov	r4, r0
    2dcc:	ldr	r0, [r5, #52]	; 0x34
    2dd0:	ldr	r0, [r0, #12]
    2dd4:	mov	r1, #8
    2dd8:	str	r7, [r0, #12]
    2ddc:	str	r1, [r0, #16]
    2de0:	mov	r1, #0
    2de4:	bl	17ec <inflate@plt>
    2de8:	cmp	r0, #0
    2dec:	beq	2e28 <InflateVarNameTag+0xb8>
    2df0:	cmp	r0, #2
    2df4:	mvneq	r0, #2
    2df8:	bl	1888 <zError@plt>
    2dfc:	mov	r1, r0
    2e00:	ldr	r0, [pc, #200]	; 2ed0 <InflateVarNameTag+0x160>
    2e04:	add	r0, pc, r0
    2e08:	bl	19b4 <Mat_Critical@plt>
    2e0c:	mov	r0, r4
    2e10:	sub	sp, fp, #24
    2e14:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    2e18:	mov	r4, #0
    2e1c:	mov	r0, r4
    2e20:	sub	sp, fp, #24
    2e24:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    2e28:	mov	r9, #1
    2e2c:	mov	r7, sp
    2e30:	mov	r6, #1
    2e34:	ldr	r0, [r5, #52]	; 0x34
    2e38:	ldr	r0, [r0, #12]
    2e3c:	ldr	r2, [r0, #16]
    2e40:	ldr	r1, [r0, #4]
    2e44:	cmp	r2, #0
    2e48:	beq	2e94 <InflateVarNameTag+0x124>
    2e4c:	cmp	r6, #1
    2e50:	cmpeq	r1, #0
    2e54:	bne	2e94 <InflateVarNameTag+0x124>
    2e58:	stm	r0, {r7, r9}
    2e5c:	mov	r0, r7
    2e60:	mov	r1, #1
    2e64:	mov	r2, #1
    2e68:	ldr	r3, [r8]
    2e6c:	bl	18b8 <fread@plt>
    2e70:	mov	r6, r0
    2e74:	add	r4, r0, r4
    2e78:	ldr	r0, [r5, #52]	; 0x34
    2e7c:	mov	r1, #0
    2e80:	ldr	r0, [r0, #12]
    2e84:	bl	17ec <inflate@plt>
    2e88:	cmp	r0, #0
    2e8c:	beq	2e34 <InflateVarNameTag+0xc4>
    2e90:	b	2df0 <InflateVarNameTag+0x80>
    2e94:	cmp	r1, #0
    2e98:	beq	2ec4 <InflateVarNameTag+0x154>
    2e9c:	ldr	r0, [r8]
    2ea0:	rsb	r1, r1, #0
    2ea4:	mov	r2, #1
    2ea8:	bl	1a2c <fseek@plt>
    2eac:	ldr	r0, [r5, #52]	; 0x34
    2eb0:	mov	r2, #0
    2eb4:	ldr	r0, [r0, #12]
    2eb8:	ldr	r1, [r0, #4]
    2ebc:	str	r2, [r0, #4]
    2ec0:	sub	r4, r4, r1
    2ec4:	mov	r0, r4
    2ec8:	sub	sp, fp, #24
    2ecc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    2ed0:	.word	0x0005c7d2

00002ed4 <InflateVarName>:
    2ed4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    2ed8:	add	fp, sp, #24
    2edc:	sub	sp, sp, #32
    2ee0:	cmp	r2, #0
    2ee4:	beq	2f7c <InflateVarName+0xa8>
    2ee8:	mov	r9, r0
    2eec:	ldr	r0, [r1, #52]	; 0x34
    2ef0:	mov	r5, r1
    2ef4:	mov	r8, r3
    2ef8:	mov	r7, r2
    2efc:	mov	r4, #0
    2f00:	ldr	r0, [r0, #12]
    2f04:	ldr	r1, [r0, #4]
    2f08:	cmp	r1, #0
    2f0c:	bne	2f3c <InflateVarName+0x68>
    2f10:	mov	r1, sp
    2f14:	mov	r2, #1
    2f18:	stm	r0, {r1, r2}
    2f1c:	mov	r0, r1
    2f20:	mov	r1, #1
    2f24:	mov	r2, #1
    2f28:	ldr	r3, [r9]
    2f2c:	bl	18b8 <fread@plt>
    2f30:	mov	r4, r0
    2f34:	ldr	r0, [r5, #52]	; 0x34
    2f38:	ldr	r0, [r0, #12]
    2f3c:	mov	r1, #0
    2f40:	str	r7, [r0, #12]
    2f44:	str	r8, [r0, #16]
    2f48:	bl	17ec <inflate@plt>
    2f4c:	cmp	r0, #0
    2f50:	beq	2f8c <InflateVarName+0xb8>
    2f54:	cmp	r0, #2
    2f58:	mvneq	r0, #2
    2f5c:	bl	1888 <zError@plt>
    2f60:	mov	r1, r0
    2f64:	ldr	r0, [pc, #200]	; 3034 <InflateVarName+0x160>
    2f68:	add	r0, pc, r0
    2f6c:	bl	19b4 <Mat_Critical@plt>
    2f70:	mov	r0, r4
    2f74:	sub	sp, fp, #24
    2f78:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    2f7c:	mov	r4, #0
    2f80:	mov	r0, r4
    2f84:	sub	sp, fp, #24
    2f88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    2f8c:	mov	r8, #1
    2f90:	mov	r7, sp
    2f94:	mov	r6, #1
    2f98:	ldr	r0, [r5, #52]	; 0x34
    2f9c:	ldr	r0, [r0, #12]
    2fa0:	ldr	r2, [r0, #16]
    2fa4:	ldr	r1, [r0, #4]
    2fa8:	cmp	r2, #0
    2fac:	beq	2ff8 <InflateVarName+0x124>
    2fb0:	cmp	r6, #1
    2fb4:	cmpeq	r1, #0
    2fb8:	bne	2ff8 <InflateVarName+0x124>
    2fbc:	stm	r0, {r7, r8}
    2fc0:	mov	r0, r7
    2fc4:	mov	r1, #1
    2fc8:	mov	r2, #1
    2fcc:	ldr	r3, [r9]
    2fd0:	bl	18b8 <fread@plt>
    2fd4:	mov	r6, r0
    2fd8:	add	r4, r0, r4
    2fdc:	ldr	r0, [r5, #52]	; 0x34
    2fe0:	mov	r1, #0
    2fe4:	ldr	r0, [r0, #12]
    2fe8:	bl	17ec <inflate@plt>
    2fec:	cmp	r0, #0
    2ff0:	beq	2f98 <InflateVarName+0xc4>
    2ff4:	b	2f54 <InflateVarName+0x80>
    2ff8:	cmp	r1, #0
    2ffc:	beq	3028 <InflateVarName+0x154>
    3000:	ldr	r0, [r9]
    3004:	rsb	r1, r1, #0
    3008:	mov	r2, #1
    300c:	bl	1a2c <fseek@plt>
    3010:	ldr	r0, [r5, #52]	; 0x34
    3014:	mov	r2, #0
    3018:	ldr	r0, [r0, #12]
    301c:	ldr	r1, [r0, #4]
    3020:	str	r2, [r0, #4]
    3024:	sub	r4, r4, r1
    3028:	mov	r0, r4
    302c:	sub	sp, fp, #24
    3030:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3034:	.word	0x0005c695

00003038 <InflateDataTag>:
    3038:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    303c:	add	fp, sp, #24
    3040:	sub	sp, sp, #32
    3044:	cmp	r2, #0
    3048:	beq	3178 <InflateDataTag+0x140>
    304c:	mov	r8, r0
    3050:	ldr	r0, [r1, #52]	; 0x34
    3054:	mov	r5, r1
    3058:	mov	r7, r2
    305c:	mov	r4, #0
    3060:	ldr	r0, [r0, #12]
    3064:	ldr	r1, [r0, #4]
    3068:	cmp	r1, #0
    306c:	bne	309c <InflateDataTag+0x64>
    3070:	mov	r1, sp
    3074:	mov	r2, #1
    3078:	stm	r0, {r1, r2}
    307c:	mov	r0, r1
    3080:	mov	r1, #1
    3084:	mov	r2, #1
    3088:	ldr	r3, [r8]
    308c:	bl	18b8 <fread@plt>
    3090:	mov	r4, r0
    3094:	ldr	r0, [r5, #52]	; 0x34
    3098:	ldr	r0, [r0, #12]
    309c:	mov	r1, #8
    30a0:	str	r7, [r0, #12]
    30a4:	str	r1, [r0, #16]
    30a8:	mov	r1, #0
    30ac:	bl	17ec <inflate@plt>
    30b0:	cmp	r0, #1
    30b4:	beq	316c <InflateDataTag+0x134>
    30b8:	cmp	r0, #0
    30bc:	bne	3188 <InflateDataTag+0x150>
    30c0:	mov	r9, #1
    30c4:	mov	r7, sp
    30c8:	mov	r6, #1
    30cc:	ldr	r0, [r5, #52]	; 0x34
    30d0:	ldr	r0, [r0, #12]
    30d4:	ldr	r1, [r0, #16]
    30d8:	cmp	r1, #0
    30dc:	beq	3138 <InflateDataTag+0x100>
    30e0:	cmp	r6, #1
    30e4:	ldreq	r1, [r0, #4]
    30e8:	cmpeq	r1, #0
    30ec:	bne	3138 <InflateDataTag+0x100>
    30f0:	stm	r0, {r7, r9}
    30f4:	mov	r0, r7
    30f8:	mov	r1, #1
    30fc:	mov	r2, #1
    3100:	ldr	r3, [r8]
    3104:	bl	18b8 <fread@plt>
    3108:	mov	r6, r0
    310c:	add	r4, r0, r4
    3110:	ldr	r0, [r5, #52]	; 0x34
    3114:	mov	r1, #0
    3118:	ldr	r0, [r0, #12]
    311c:	bl	17ec <inflate@plt>
    3120:	cmp	r0, #0
    3124:	beq	30cc <InflateDataTag+0x94>
    3128:	cmp	r0, #1
    312c:	bne	3188 <InflateDataTag+0x150>
    3130:	ldr	r0, [r5, #52]	; 0x34
    3134:	ldr	r0, [r0, #12]
    3138:	ldr	r1, [r0, #4]
    313c:	cmp	r1, #0
    3140:	beq	316c <InflateDataTag+0x134>
    3144:	ldr	r0, [r8]
    3148:	rsb	r1, r1, #0
    314c:	mov	r2, #1
    3150:	bl	1a2c <fseek@plt>
    3154:	ldr	r0, [r5, #52]	; 0x34
    3158:	mov	r2, #0
    315c:	ldr	r0, [r0, #12]
    3160:	ldr	r1, [r0, #4]
    3164:	str	r2, [r0, #4]
    3168:	sub	r4, r4, r1
    316c:	mov	r0, r4
    3170:	sub	sp, fp, #24
    3174:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3178:	mov	r4, #0
    317c:	mov	r0, r4
    3180:	sub	sp, fp, #24
    3184:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3188:	ldr	r5, [r5, #36]	; 0x24
    318c:	cmp	r0, #2
    3190:	mvneq	r0, #2
    3194:	bl	1888 <zError@plt>
    3198:	mov	r2, r0
    319c:	ldr	r0, [pc, #20]	; 31b8 <InflateDataTag+0x180>
    31a0:	mov	r1, r5
    31a4:	add	r0, pc, r0
    31a8:	bl	19b4 <Mat_Critical@plt>
    31ac:	mov	r0, r4
    31b0:	sub	sp, fp, #24
    31b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    31b8:	.word	0x0005c47d

000031bc <InflateDataType>:
    31bc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    31c0:	add	fp, sp, #24
    31c4:	sub	sp, sp, #32
    31c8:	cmp	r2, #0
    31cc:	beq	3254 <InflateDataType+0x98>
    31d0:	mov	r8, r0
    31d4:	ldr	r0, [r1, #4]
    31d8:	mov	r7, r2
    31dc:	mov	r5, r1
    31e0:	mov	r4, #0
    31e4:	cmp	r0, #0
    31e8:	bne	320c <InflateDataType+0x50>
    31ec:	mov	r0, sp
    31f0:	mov	r1, #1
    31f4:	mov	r2, #1
    31f8:	stm	r5, {r0, r1}
    31fc:	mov	r1, #1
    3200:	ldr	r3, [r8]
    3204:	bl	18b8 <fread@plt>
    3208:	mov	r4, r0
    320c:	mov	r0, #4
    3210:	str	r7, [r5, #12]
    3214:	mov	r1, #0
    3218:	str	r0, [r5, #16]
    321c:	mov	r0, r5
    3220:	bl	17ec <inflate@plt>
    3224:	cmp	r0, #0
    3228:	beq	3264 <InflateDataType+0xa8>
    322c:	cmp	r0, #2
    3230:	mvneq	r0, #2
    3234:	bl	1888 <zError@plt>
    3238:	mov	r1, r0
    323c:	ldr	r0, [pc, #180]	; 32f8 <InflateDataType+0x13c>
    3240:	add	r0, pc, r0
    3244:	bl	19b4 <Mat_Critical@plt>
    3248:	mov	r0, r4
    324c:	sub	sp, fp, #24
    3250:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3254:	mov	r4, #0
    3258:	mov	r0, r4
    325c:	sub	sp, fp, #24
    3260:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3264:	mov	r9, #1
    3268:	mov	r7, sp
    326c:	mov	r6, #1
    3270:	ldr	r0, [r5, #16]
    3274:	ldr	r1, [r5, #4]
    3278:	cmp	r0, #0
    327c:	beq	32c4 <InflateDataType+0x108>
    3280:	cmp	r6, #1
    3284:	cmpeq	r1, #0
    3288:	bne	32c4 <InflateDataType+0x108>
    328c:	stm	r5, {r7, r9}
    3290:	mov	r0, r7
    3294:	mov	r1, #1
    3298:	mov	r2, #1
    329c:	ldr	r3, [r8]
    32a0:	bl	18b8 <fread@plt>
    32a4:	mov	r6, r0
    32a8:	add	r4, r0, r4
    32ac:	mov	r0, r5
    32b0:	mov	r1, #0
    32b4:	bl	17ec <inflate@plt>
    32b8:	cmp	r0, #0
    32bc:	beq	3270 <InflateDataType+0xb4>
    32c0:	b	322c <InflateDataType+0x70>
    32c4:	cmp	r1, #0
    32c8:	beq	32ec <InflateDataType+0x130>
    32cc:	ldr	r0, [r8]
    32d0:	rsb	r1, r1, #0
    32d4:	mov	r2, #1
    32d8:	bl	1a2c <fseek@plt>
    32dc:	ldr	r0, [r5, #4]
    32e0:	mov	r1, #0
    32e4:	str	r1, [r5, #4]
    32e8:	sub	r4, r4, r0
    32ec:	mov	r0, r4
    32f0:	sub	sp, fp, #24
    32f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    32f8:	.word	0x0005c40a

000032fc <InflateData>:
    32fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    3300:	add	fp, sp, #24
    3304:	sub	sp, sp, #8
    3308:	sub	sp, sp, #1024	; 0x400
    330c:	cmp	r2, #0
    3310:	mov	r4, #0
    3314:	movne	r7, r3
    3318:	cmpne	r3, #0
    331c:	bne	332c <InflateData+0x30>
    3320:	mov	r0, r4
    3324:	sub	sp, fp, #24
    3328:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    332c:	mov	r8, r0
    3330:	ldr	r0, [r1, #4]
    3334:	mov	r6, r2
    3338:	mov	r5, r1
    333c:	mov	r4, #0
    3340:	cmp	r0, #0
    3344:	bne	3374 <InflateData+0x78>
    3348:	ldr	r3, [r8]
    334c:	add	r9, sp, #4
    3350:	cmp	r7, #1024	; 0x400
    3354:	mov	r2, r7
    3358:	mov	r1, #1
    335c:	movcs	r2, #1024	; 0x400
    3360:	mov	r0, r9
    3364:	bl	18b8 <fread@plt>
    3368:	mov	r4, r0
    336c:	str	r9, [r5]
    3370:	str	r0, [r5, #4]
    3374:	mov	r0, r5
    3378:	mov	r1, #3
    337c:	str	r6, [r5, #12]
    3380:	str	r7, [r5, #16]
    3384:	bl	17ec <inflate@plt>
    3388:	cmp	r0, #1
    338c:	beq	3320 <InflateData+0x24>
    3390:	cmp	r0, #0
    3394:	bne	3418 <InflateData+0x11c>
    3398:	ldr	r0, [r5, #16]
    339c:	cmp	r0, #0
    33a0:	beq	3464 <InflateData+0x168>
    33a4:	add	r6, sp, #4
    33a8:	ldr	r1, [r5, #4]
    33ac:	cmp	r1, #0
    33b0:	bne	3470 <InflateData+0x174>
    33b4:	add	r0, r4, #1024	; 0x400
    33b8:	mov	r2, #1024	; 0x400
    33bc:	cmp	r0, r7
    33c0:	bcc	33d4 <InflateData+0xd8>
    33c4:	add	r0, r4, #1
    33c8:	sub	r2, r7, r4
    33cc:	cmp	r0, r7
    33d0:	movwhi	r2, #1
    33d4:	ldr	r3, [r8]
    33d8:	mov	r0, r6
    33dc:	mov	r1, #1
    33e0:	bl	18b8 <fread@plt>
    33e4:	str	r6, [r5]
    33e8:	str	r0, [r5, #4]
    33ec:	add	r4, r0, r4
    33f0:	mov	r0, r5
    33f4:	mov	r1, #3
    33f8:	bl	17ec <inflate@plt>
    33fc:	cmn	r0, #5
    3400:	cmpne	r0, #0
    3404:	bne	3440 <InflateData+0x144>
    3408:	ldr	r0, [r5, #16]
    340c:	cmp	r0, #0
    3410:	bne	33a8 <InflateData+0xac>
    3414:	b	3464 <InflateData+0x168>
    3418:	cmp	r0, #2
    341c:	mvneq	r0, #2
    3420:	bl	1888 <zError@plt>
    3424:	mov	r1, r0
    3428:	ldr	r0, [pc, #112]	; 34a0 <InflateData+0x1a4>
    342c:	add	r0, pc, r0
    3430:	bl	19b4 <Mat_Critical@plt>
    3434:	mov	r0, r4
    3438:	sub	sp, fp, #24
    343c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3440:	cmp	r0, #1
    3444:	beq	3464 <InflateData+0x168>
    3448:	cmp	r0, #2
    344c:	mvneq	r0, #2
    3450:	bl	1888 <zError@plt>
    3454:	mov	r1, r0
    3458:	ldr	r0, [pc, #60]	; 349c <InflateData+0x1a0>
    345c:	add	r0, pc, r0
    3460:	bl	19b4 <Mat_Critical@plt>
    3464:	ldr	r1, [r5, #4]
    3468:	cmp	r1, #0
    346c:	beq	3320 <InflateData+0x24>
    3470:	ldr	r0, [r8]
    3474:	rsb	r1, r1, #0
    3478:	mov	r2, #1
    347c:	bl	1a2c <fseek@plt>
    3480:	ldr	r0, [r5, #4]
    3484:	mov	r1, #0
    3488:	str	r1, [r5, #4]
    348c:	sub	r4, r4, r0
    3490:	mov	r0, r4
    3494:	sub	sp, fp, #24
    3498:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    349c:	.word	0x0005c213
    34a0:	.word	0x0005c243

000034a4 <InflateFieldNameLength>:
    34a4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    34a8:	add	fp, sp, #24
    34ac:	sub	sp, sp, #32
    34b0:	cmp	r2, #0
    34b4:	beq	354c <InflateFieldNameLength+0xa8>
    34b8:	mov	r8, r0
    34bc:	ldr	r0, [r1, #52]	; 0x34
    34c0:	mov	r5, r1
    34c4:	mov	r7, r2
    34c8:	mov	r4, #0
    34cc:	ldr	r0, [r0, #12]
    34d0:	ldr	r1, [r0, #4]
    34d4:	cmp	r1, #0
    34d8:	bne	3508 <InflateFieldNameLength+0x64>
    34dc:	mov	r1, sp
    34e0:	mov	r2, #1
    34e4:	stm	r0, {r1, r2}
    34e8:	mov	r0, r1
    34ec:	mov	r1, #1
    34f0:	mov	r2, #1
    34f4:	ldr	r3, [r8]
    34f8:	bl	18b8 <fread@plt>
    34fc:	mov	r4, r0
    3500:	ldr	r0, [r5, #52]	; 0x34
    3504:	ldr	r0, [r0, #12]
    3508:	mov	r1, #8
    350c:	str	r7, [r0, #12]
    3510:	str	r1, [r0, #16]
    3514:	mov	r1, #0
    3518:	bl	17ec <inflate@plt>
    351c:	cmp	r0, #0
    3520:	beq	355c <InflateFieldNameLength+0xb8>
    3524:	cmp	r0, #2
    3528:	mvneq	r0, #2
    352c:	bl	1888 <zError@plt>
    3530:	mov	r1, r0
    3534:	ldr	r0, [pc, #200]	; 3604 <InflateFieldNameLength+0x160>
    3538:	add	r0, pc, r0
    353c:	bl	19b4 <Mat_Critical@plt>
    3540:	mov	r0, r4
    3544:	sub	sp, fp, #24
    3548:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    354c:	mov	r4, #0
    3550:	mov	r0, r4
    3554:	sub	sp, fp, #24
    3558:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    355c:	mov	r9, #1
    3560:	mov	r7, sp
    3564:	mov	r6, #1
    3568:	ldr	r0, [r5, #52]	; 0x34
    356c:	ldr	r0, [r0, #12]
    3570:	ldr	r2, [r0, #16]
    3574:	ldr	r1, [r0, #4]
    3578:	cmp	r2, #0
    357c:	beq	35c8 <InflateFieldNameLength+0x124>
    3580:	cmp	r6, #1
    3584:	cmpeq	r1, #0
    3588:	bne	35c8 <InflateFieldNameLength+0x124>
    358c:	stm	r0, {r7, r9}
    3590:	mov	r0, r7
    3594:	mov	r1, #1
    3598:	mov	r2, #1
    359c:	ldr	r3, [r8]
    35a0:	bl	18b8 <fread@plt>
    35a4:	mov	r6, r0
    35a8:	add	r4, r0, r4
    35ac:	ldr	r0, [r5, #52]	; 0x34
    35b0:	mov	r1, #0
    35b4:	ldr	r0, [r0, #12]
    35b8:	bl	17ec <inflate@plt>
    35bc:	cmp	r0, #0
    35c0:	beq	3568 <InflateFieldNameLength+0xc4>
    35c4:	b	3524 <InflateFieldNameLength+0x80>
    35c8:	cmp	r1, #0
    35cc:	beq	35f8 <InflateFieldNameLength+0x154>
    35d0:	ldr	r0, [r8]
    35d4:	rsb	r1, r1, #0
    35d8:	mov	r2, #1
    35dc:	bl	1a2c <fseek@plt>
    35e0:	ldr	r0, [r5, #52]	; 0x34
    35e4:	mov	r2, #0
    35e8:	ldr	r0, [r0, #12]
    35ec:	ldr	r1, [r0, #4]
    35f0:	str	r2, [r0, #4]
    35f4:	sub	r4, r4, r1
    35f8:	mov	r0, r4
    35fc:	sub	sp, fp, #24
    3600:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3604:	.word	0x0005c158

00003608 <InflateFieldNamesTag>:
    3608:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    360c:	add	fp, sp, #24
    3610:	sub	sp, sp, #32
    3614:	cmp	r2, #0
    3618:	beq	36b0 <InflateFieldNamesTag+0xa8>
    361c:	mov	r8, r0
    3620:	ldr	r0, [r1, #52]	; 0x34
    3624:	mov	r5, r1
    3628:	mov	r7, r2
    362c:	mov	r4, #0
    3630:	ldr	r0, [r0, #12]
    3634:	ldr	r1, [r0, #4]
    3638:	cmp	r1, #0
    363c:	bne	366c <InflateFieldNamesTag+0x64>
    3640:	mov	r1, sp
    3644:	mov	r2, #1
    3648:	stm	r0, {r1, r2}
    364c:	mov	r0, r1
    3650:	mov	r1, #1
    3654:	mov	r2, #1
    3658:	ldr	r3, [r8]
    365c:	bl	18b8 <fread@plt>
    3660:	mov	r4, r0
    3664:	ldr	r0, [r5, #52]	; 0x34
    3668:	ldr	r0, [r0, #12]
    366c:	mov	r1, #8
    3670:	str	r7, [r0, #12]
    3674:	str	r1, [r0, #16]
    3678:	mov	r1, #0
    367c:	bl	17ec <inflate@plt>
    3680:	cmp	r0, #0
    3684:	beq	36c0 <InflateFieldNamesTag+0xb8>
    3688:	cmp	r0, #2
    368c:	mvneq	r0, #2
    3690:	bl	1888 <zError@plt>
    3694:	mov	r1, r0
    3698:	ldr	r0, [pc, #200]	; 3768 <InflateFieldNamesTag+0x160>
    369c:	add	r0, pc, r0
    36a0:	bl	19b4 <Mat_Critical@plt>
    36a4:	mov	r0, r4
    36a8:	sub	sp, fp, #24
    36ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    36b0:	mov	r4, #0
    36b4:	mov	r0, r4
    36b8:	sub	sp, fp, #24
    36bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    36c0:	mov	r9, #1
    36c4:	mov	r7, sp
    36c8:	mov	r6, #1
    36cc:	ldr	r0, [r5, #52]	; 0x34
    36d0:	ldr	r0, [r0, #12]
    36d4:	ldr	r2, [r0, #16]
    36d8:	ldr	r1, [r0, #4]
    36dc:	cmp	r2, #0
    36e0:	beq	372c <InflateFieldNamesTag+0x124>
    36e4:	cmp	r6, #1
    36e8:	cmpeq	r1, #0
    36ec:	bne	372c <InflateFieldNamesTag+0x124>
    36f0:	stm	r0, {r7, r9}
    36f4:	mov	r0, r7
    36f8:	mov	r1, #1
    36fc:	mov	r2, #1
    3700:	ldr	r3, [r8]
    3704:	bl	18b8 <fread@plt>
    3708:	mov	r6, r0
    370c:	add	r4, r0, r4
    3710:	ldr	r0, [r5, #52]	; 0x34
    3714:	mov	r1, #0
    3718:	ldr	r0, [r0, #12]
    371c:	bl	17ec <inflate@plt>
    3720:	cmp	r0, #0
    3724:	beq	36cc <InflateFieldNamesTag+0xc4>
    3728:	b	3688 <InflateFieldNamesTag+0x80>
    372c:	cmp	r1, #0
    3730:	beq	375c <InflateFieldNamesTag+0x154>
    3734:	ldr	r0, [r8]
    3738:	rsb	r1, r1, #0
    373c:	mov	r2, #1
    3740:	bl	1a2c <fseek@plt>
    3744:	ldr	r0, [r5, #52]	; 0x34
    3748:	mov	r2, #0
    374c:	ldr	r0, [r0, #12]
    3750:	ldr	r1, [r0, #4]
    3754:	str	r2, [r0, #4]
    3758:	sub	r4, r4, r1
    375c:	mov	r0, r4
    3760:	sub	sp, fp, #24
    3764:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    3768:	.word	0x0005c020

0000376c <InflateFieldNames>:
    376c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3770:	add	fp, sp, #28
    3774:	sub	sp, sp, #36	; 0x24
    3778:	cmp	r2, #0
    377c:	beq	3820 <InflateFieldNames+0xb4>
    3780:	mov	r9, r0
    3784:	ldr	r0, [r1, #52]	; 0x34
    3788:	mov	r5, r1
    378c:	ldr	sl, [fp, #12]
    3790:	ldr	r6, [fp, #8]
    3794:	mov	r8, r3
    3798:	mov	r7, r2
    379c:	mov	r4, #0
    37a0:	ldr	r0, [r0, #12]
    37a4:	ldr	r1, [r0, #4]
    37a8:	cmp	r1, #0
    37ac:	bne	37dc <InflateFieldNames+0x70>
    37b0:	add	r1, sp, #4
    37b4:	mov	r2, #1
    37b8:	stm	r0, {r1, r2}
    37bc:	mov	r0, r1
    37c0:	mov	r1, #1
    37c4:	mov	r2, #1
    37c8:	ldr	r3, [r9]
    37cc:	bl	18b8 <fread@plt>
    37d0:	mov	r4, r0
    37d4:	ldr	r0, [r5, #52]	; 0x34
    37d8:	ldr	r0, [r0, #12]
    37dc:	mla	r1, r6, r8, sl
    37e0:	str	r7, [r0, #12]
    37e4:	str	r1, [r0, #16]
    37e8:	mov	r1, #0
    37ec:	bl	17ec <inflate@plt>
    37f0:	cmp	r0, #0
    37f4:	beq	3830 <InflateFieldNames+0xc4>
    37f8:	cmp	r0, #2
    37fc:	mvneq	r0, #2
    3800:	bl	1888 <zError@plt>
    3804:	mov	r1, r0
    3808:	ldr	r0, [pc, #200]	; 38d8 <InflateFieldNames+0x16c>
    380c:	add	r0, pc, r0
    3810:	bl	19b4 <Mat_Critical@plt>
    3814:	mov	r0, r4
    3818:	sub	sp, fp, #28
    381c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3820:	mov	r4, #0
    3824:	mov	r0, r4
    3828:	sub	sp, fp, #28
    382c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3830:	mov	r8, #1
    3834:	add	r7, sp, #4
    3838:	mov	r6, #1
    383c:	ldr	r0, [r5, #52]	; 0x34
    3840:	ldr	r0, [r0, #12]
    3844:	ldr	r2, [r0, #16]
    3848:	ldr	r1, [r0, #4]
    384c:	cmp	r2, #0
    3850:	beq	389c <InflateFieldNames+0x130>
    3854:	cmp	r6, #1
    3858:	cmpeq	r1, #0
    385c:	bne	389c <InflateFieldNames+0x130>
    3860:	stm	r0, {r7, r8}
    3864:	mov	r0, r7
    3868:	mov	r1, #1
    386c:	mov	r2, #1
    3870:	ldr	r3, [r9]
    3874:	bl	18b8 <fread@plt>
    3878:	mov	r6, r0
    387c:	add	r4, r0, r4
    3880:	ldr	r0, [r5, #52]	; 0x34
    3884:	mov	r1, #0
    3888:	ldr	r0, [r0, #12]
    388c:	bl	17ec <inflate@plt>
    3890:	cmp	r0, #0
    3894:	beq	383c <InflateFieldNames+0xd0>
    3898:	b	37f8 <InflateFieldNames+0x8c>
    389c:	cmp	r1, #0
    38a0:	beq	38cc <InflateFieldNames+0x160>
    38a4:	ldr	r0, [r9]
    38a8:	rsb	r1, r1, #0
    38ac:	mov	r2, #1
    38b0:	bl	1a2c <fseek@plt>
    38b4:	ldr	r0, [r5, #52]	; 0x34
    38b8:	mov	r2, #0
    38bc:	ldr	r0, [r0, #12]
    38c0:	ldr	r1, [r0, #4]
    38c4:	str	r2, [r0, #4]
    38c8:	sub	r4, r4, r1
    38cc:	mov	r0, r4
    38d0:	sub	sp, fp, #28
    38d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    38d8:	.word	0x0005beda

000038dc <ReadDoubleData>:
    38dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    38e0:	add	fp, sp, #28
    38e4:	sub	sp, sp, #4
    38e8:	vpush	{d8-d9}
    38ec:	sub	sp, sp, #2128	; 0x850
    38f0:	cmp	r0, #0
    38f4:	mov	r4, #0
    38f8:	str	r0, [sp, #20]
    38fc:	movne	r9, r1
    3900:	cmpne	r1, #0
    3904:	bne	391c <ReadDoubleData+0x40>
    3908:	mov	r0, r4
    390c:	sub	sp, fp, #48	; 0x30
    3910:	vpop	{d8-d9}
    3914:	add	sp, sp, #4
    3918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    391c:	ldr	r0, [sp, #20]
    3920:	ldr	r0, [r0]
    3924:	cmp	r0, #0
    3928:	beq	3908 <ReadDoubleData+0x2c>
    392c:	mov	r0, r2
    3930:	mov	r6, r3
    3934:	mov	r5, r2
    3938:	bl	1924 <Mat_SizeOf@plt>
    393c:	str	r0, [sp, #16]
    3940:	sub	r0, r5, #1
    3944:	cmp	r0, #12
    3948:	bhi	3908 <ReadDoubleData+0x2c>
    394c:	add	r1, pc, #4
    3950:	ldr	r0, [r1, r0, lsl #2]
    3954:	add	pc, r1, r0
    3958:	.word	0x00000034
    395c:	.word	0x000000dc
    3960:	.word	0x00000184
    3964:	.word	0x000001ec
    3968:	.word	0x00000254
    396c:	.word	0x000002bc
    3970:	.word	0x00000324
    3974:	.word	0xffffffb0
    3978:	.word	0x00000388
    397c:	.word	0xffffffb0
    3980:	.word	0xffffffb0
    3984:	.word	0x000003d0
    3988:	.word	0x00000434
    398c:	cmp	r6, #256	; 0x100
    3990:	bgt	3df0 <ReadDoubleData+0x514>
    3994:	ldr	r0, [sp, #20]
    3998:	ldr	r1, [sp, #16]
    399c:	add	r4, sp, #72	; 0x48
    39a0:	mov	r2, r6
    39a4:	ldr	r3, [r0]
    39a8:	mov	r0, r4
    39ac:	bl	18b8 <fread@plt>
    39b0:	mov	sl, r0
    39b4:	cmp	r6, #1
    39b8:	blt	4bdc <ReadDoubleData+0x1300>
    39bc:	mov	r0, #0
    39c0:	beq	3a04 <ReadDoubleData+0x128>
    39c4:	bic	r0, r6, #1
    39c8:	add	r1, sp, #48	; 0x30
    39cc:	mov	r3, r9
    39d0:	mov	r2, r0
    39d4:	ldrh	r7, [r4], #2
    39d8:	subs	r2, r2, #2
    39dc:	strh	r7, [sp, #48]	; 0x30
    39e0:	vld1.16	{d16[0]}, [r1 :16]
    39e4:	vmovl.s8	q8, d16
    39e8:	vmovl.s16	q0, d16
    39ec:	vcvt.f64.s32	d17, s1
    39f0:	vcvt.f64.s32	d16, s0
    39f4:	vst1.64	{d16-d17}, [r3]!
    39f8:	bne	39d4 <ReadDoubleData+0xf8>
    39fc:	cmp	r0, r6
    3a00:	beq	4bdc <ReadDoubleData+0x1300>
    3a04:	add	r3, sp, #72	; 0x48
    3a08:	sub	r1, r6, r0
    3a0c:	add	r2, r9, r0, lsl #3
    3a10:	add	r0, r3, r0
    3a14:	ldrsb	r3, [r0], #1
    3a18:	subs	r1, r1, #1
    3a1c:	vmov	s0, r3
    3a20:	vcvt.f64.s32	d16, s0
    3a24:	vstr	d16, [r2]
    3a28:	add	r2, r2, #8
    3a2c:	bne	3a14 <ReadDoubleData+0x138>
    3a30:	b	4bdc <ReadDoubleData+0x1300>
    3a34:	cmp	r6, #256	; 0x100
    3a38:	bgt	3f5c <ReadDoubleData+0x680>
    3a3c:	ldr	r0, [sp, #20]
    3a40:	ldr	r1, [sp, #16]
    3a44:	add	r4, sp, #72	; 0x48
    3a48:	mov	r2, r6
    3a4c:	ldr	r3, [r0]
    3a50:	mov	r0, r4
    3a54:	bl	18b8 <fread@plt>
    3a58:	mov	sl, r0
    3a5c:	cmp	r6, #1
    3a60:	blt	4bdc <ReadDoubleData+0x1300>
    3a64:	mov	r0, #0
    3a68:	beq	3aac <ReadDoubleData+0x1d0>
    3a6c:	bic	r0, r6, #1
    3a70:	add	r1, sp, #60	; 0x3c
    3a74:	mov	r3, r9
    3a78:	mov	r2, r0
    3a7c:	ldrh	r7, [r4], #2
    3a80:	subs	r2, r2, #2
    3a84:	strh	r7, [sp, #60]	; 0x3c
    3a88:	vld1.16	{d16[0]}, [r1 :16]
    3a8c:	vmovl.u8	q8, d16
    3a90:	vmovl.u16	q0, d16
    3a94:	vcvt.f64.u32	d17, s1
    3a98:	vcvt.f64.u32	d16, s0
    3a9c:	vst1.64	{d16-d17}, [r3]!
    3aa0:	bne	3a7c <ReadDoubleData+0x1a0>
    3aa4:	cmp	r0, r6
    3aa8:	beq	4bdc <ReadDoubleData+0x1300>
    3aac:	add	r3, sp, #72	; 0x48
    3ab0:	sub	r1, r6, r0
    3ab4:	add	r2, r9, r0, lsl #3
    3ab8:	add	r0, r3, r0
    3abc:	ldrb	r3, [r0], #1
    3ac0:	subs	r1, r1, #1
    3ac4:	vmov	s0, r3
    3ac8:	vcvt.f64.u32	d16, s0
    3acc:	vstr	d16, [r2]
    3ad0:	add	r2, r2, #8
    3ad4:	bne	3abc <ReadDoubleData+0x1e0>
    3ad8:	b	4bdc <ReadDoubleData+0x1300>
    3adc:	ldr	r0, [sp, #20]
    3ae0:	ldr	r0, [r0, #20]
    3ae4:	cmp	r0, #0
    3ae8:	beq	40c4 <ReadDoubleData+0x7e8>
    3aec:	cmp	r6, #256	; 0x100
    3af0:	bgt	4540 <ReadDoubleData+0xc64>
    3af4:	ldr	r0, [sp, #20]
    3af8:	ldr	r1, [sp, #16]
    3afc:	add	r4, sp, #72	; 0x48
    3b00:	mov	r2, r6
    3b04:	ldr	r3, [r0]
    3b08:	mov	r0, r4
    3b0c:	bl	18b8 <fread@plt>
    3b10:	mov	sl, r0
    3b14:	cmp	r6, #1
    3b18:	blt	4bdc <ReadDoubleData+0x1300>
    3b1c:	mov	r0, r4
    3b20:	bl	1c18 <Mat_int16Swap>
    3b24:	vmov	s0, r0
    3b28:	subs	r6, r6, #1
    3b2c:	add	r4, r4, #2
    3b30:	vcvt.f64.s32	d16, s0
    3b34:	vstr	d16, [r9]
    3b38:	add	r9, r9, #8
    3b3c:	bne	3b1c <ReadDoubleData+0x240>
    3b40:	b	4bdc <ReadDoubleData+0x1300>
    3b44:	ldr	r0, [sp, #20]
    3b48:	ldr	r0, [r0, #20]
    3b4c:	cmp	r0, #0
    3b50:	beq	4168 <ReadDoubleData+0x88c>
    3b54:	cmp	r6, #256	; 0x100
    3b58:	bgt	4634 <ReadDoubleData+0xd58>
    3b5c:	ldr	r0, [sp, #20]
    3b60:	ldr	r1, [sp, #16]
    3b64:	add	r4, sp, #72	; 0x48
    3b68:	mov	r2, r6
    3b6c:	ldr	r3, [r0]
    3b70:	mov	r0, r4
    3b74:	bl	18b8 <fread@plt>
    3b78:	mov	sl, r0
    3b7c:	cmp	r6, #1
    3b80:	blt	4bdc <ReadDoubleData+0x1300>
    3b84:	mov	r0, r4
    3b88:	bl	1c2c <Mat_uint16Swap>
    3b8c:	vmov	s0, r0
    3b90:	subs	r6, r6, #1
    3b94:	add	r4, r4, #2
    3b98:	vcvt.f64.u32	d16, s0
    3b9c:	vstr	d16, [r9]
    3ba0:	add	r9, r9, #8
    3ba4:	bne	3b84 <ReadDoubleData+0x2a8>
    3ba8:	b	4bdc <ReadDoubleData+0x1300>
    3bac:	ldr	r0, [sp, #20]
    3bb0:	ldr	r0, [r0, #20]
    3bb4:	cmp	r0, #0
    3bb8:	beq	420c <ReadDoubleData+0x930>
    3bbc:	cmp	r6, #256	; 0x100
    3bc0:	bgt	4728 <ReadDoubleData+0xe4c>
    3bc4:	ldr	r0, [sp, #20]
    3bc8:	ldr	r1, [sp, #16]
    3bcc:	add	r4, sp, #72	; 0x48
    3bd0:	mov	r2, r6
    3bd4:	ldr	r3, [r0]
    3bd8:	mov	r0, r4
    3bdc:	bl	18b8 <fread@plt>
    3be0:	mov	sl, r0
    3be4:	cmp	r6, #1
    3be8:	blt	4bdc <ReadDoubleData+0x1300>
    3bec:	mov	r0, r4
    3bf0:	bl	1bf0 <Mat_int32Swap>
    3bf4:	vmov	s0, r0
    3bf8:	subs	r6, r6, #1
    3bfc:	add	r4, r4, #4
    3c00:	vcvt.f64.s32	d16, s0
    3c04:	vstr	d16, [r9]
    3c08:	add	r9, r9, #8
    3c0c:	bne	3bec <ReadDoubleData+0x310>
    3c10:	b	4bdc <ReadDoubleData+0x1300>
    3c14:	ldr	r0, [sp, #20]
    3c18:	ldr	r0, [r0, #20]
    3c1c:	cmp	r0, #0
    3c20:	beq	42a0 <ReadDoubleData+0x9c4>
    3c24:	cmp	r6, #256	; 0x100
    3c28:	bgt	481c <ReadDoubleData+0xf40>
    3c2c:	ldr	r0, [sp, #20]
    3c30:	ldr	r1, [sp, #16]
    3c34:	add	r4, sp, #72	; 0x48
    3c38:	mov	r2, r6
    3c3c:	ldr	r3, [r0]
    3c40:	mov	r0, r4
    3c44:	bl	18b8 <fread@plt>
    3c48:	mov	sl, r0
    3c4c:	cmp	r6, #1
    3c50:	blt	4bdc <ReadDoubleData+0x1300>
    3c54:	mov	r0, r4
    3c58:	bl	1c04 <Mat_uint32Swap>
    3c5c:	vmov	s0, r0
    3c60:	subs	r6, r6, #1
    3c64:	add	r4, r4, #4
    3c68:	vcvt.f64.u32	d16, s0
    3c6c:	vstr	d16, [r9]
    3c70:	add	r9, r9, #8
    3c74:	bne	3c54 <ReadDoubleData+0x378>
    3c78:	b	4bdc <ReadDoubleData+0x1300>
    3c7c:	ldr	r0, [sp, #20]
    3c80:	ldr	r0, [r0, #20]
    3c84:	cmp	r0, #0
    3c88:	beq	4334 <ReadDoubleData+0xa58>
    3c8c:	cmp	r6, #256	; 0x100
    3c90:	bgt	4910 <ReadDoubleData+0x1034>
    3c94:	ldr	r0, [sp, #20]
    3c98:	ldr	r1, [sp, #16]
    3c9c:	add	r4, sp, #72	; 0x48
    3ca0:	mov	r2, r6
    3ca4:	ldr	r3, [r0]
    3ca8:	mov	r0, r4
    3cac:	bl	18b8 <fread@plt>
    3cb0:	mov	sl, r0
    3cb4:	cmp	r6, #1
    3cb8:	blt	4bdc <ReadDoubleData+0x1300>
    3cbc:	mov	r0, r4
    3cc0:	bl	1c44 <Mat_floatSwap>
    3cc4:	vcvt.f64.f32	d16, s0
    3cc8:	subs	r6, r6, #1
    3ccc:	add	r4, r4, #4
    3cd0:	vstr	d16, [r9]
    3cd4:	add	r9, r9, #8
    3cd8:	bne	3cbc <ReadDoubleData+0x3e0>
    3cdc:	b	4bdc <ReadDoubleData+0x1300>
    3ce0:	ldr	r4, [sp, #20]
    3ce4:	ldr	r1, [sp, #16]
    3ce8:	mov	r0, r9
    3cec:	mov	r2, r6
    3cf0:	ldr	r3, [r4]
    3cf4:	bl	18b8 <fread@plt>
    3cf8:	mov	sl, r0
    3cfc:	ldr	r0, [r4, #20]
    3d00:	cmp	r0, #0
    3d04:	beq	4bdc <ReadDoubleData+0x1300>
    3d08:	cmp	r6, #1
    3d0c:	blt	4bdc <ReadDoubleData+0x1300>
    3d10:	mov	r0, r9
    3d14:	bl	1c88 <Mat_doubleSwap>
    3d18:	subs	r6, r6, #1
    3d1c:	add	r9, r9, #8
    3d20:	bne	3d10 <ReadDoubleData+0x434>
    3d24:	b	4bdc <ReadDoubleData+0x1300>
    3d28:	ldr	r0, [sp, #20]
    3d2c:	ldr	r0, [r0, #20]
    3d30:	cmp	r0, #0
    3d34:	beq	43c8 <ReadDoubleData+0xaec>
    3d38:	cmp	r6, #256	; 0x100
    3d3c:	bgt	49fc <ReadDoubleData+0x1120>
    3d40:	ldr	r0, [sp, #20]
    3d44:	ldr	r1, [sp, #16]
    3d48:	add	r4, sp, #72	; 0x48
    3d4c:	mov	r2, r6
    3d50:	ldr	r3, [r0]
    3d54:	mov	r0, r4
    3d58:	bl	18b8 <fread@plt>
    3d5c:	mov	sl, r0
    3d60:	cmp	r6, #1
    3d64:	blt	4bdc <ReadDoubleData+0x1300>
    3d68:	mov	r0, r4
    3d6c:	bl	1b84 <Mat_int64Swap>
    3d70:	bl	5f094 <__aeabi_l2d>
    3d74:	strd	r0, [r9]
    3d78:	subs	r6, r6, #1
    3d7c:	add	r9, r9, #8
    3d80:	add	r4, r4, #8
    3d84:	bne	3d68 <ReadDoubleData+0x48c>
    3d88:	b	4bdc <ReadDoubleData+0x1300>
    3d8c:	ldr	r0, [sp, #20]
    3d90:	ldr	r0, [r0, #20]
    3d94:	cmp	r0, #0
    3d98:	beq	4484 <ReadDoubleData+0xba8>
    3d9c:	cmp	r6, #256	; 0x100
    3da0:	bgt	4aec <ReadDoubleData+0x1210>
    3da4:	ldr	r0, [sp, #20]
    3da8:	ldr	r1, [sp, #16]
    3dac:	add	r4, sp, #72	; 0x48
    3db0:	mov	r2, r6
    3db4:	ldr	r3, [r0]
    3db8:	mov	r0, r4
    3dbc:	bl	18b8 <fread@plt>
    3dc0:	mov	sl, r0
    3dc4:	cmp	r6, #1
    3dc8:	blt	4bdc <ReadDoubleData+0x1300>
    3dcc:	mov	r0, r4
    3dd0:	bl	1bd4 <Mat_uint64Swap>
    3dd4:	bl	5f080 <__aeabi_ul2d>
    3dd8:	strd	r0, [r9]
    3ddc:	subs	r6, r6, #1
    3de0:	add	r9, r9, #8
    3de4:	add	r4, r4, #8
    3de8:	bne	3dcc <ReadDoubleData+0x4f0>
    3dec:	b	4bdc <ReadDoubleData+0x1300>
    3df0:	sub	r1, r6, #256	; 0x100
    3df4:	str	r6, [sp, #4]
    3df8:	add	r0, r9, #2048	; 0x800
    3dfc:	mov	r2, #256	; 0x100
    3e00:	add	r4, sp, #72	; 0x48
    3e04:	add	r6, sp, #56	; 0x38
    3e08:	mov	sl, r9
    3e0c:	mov	r8, #0
    3e10:	str	r9, [sp]
    3e14:	str	r1, [sp, #12]
    3e18:	mov	r1, #0
    3e1c:	mov	r7, r0
    3e20:	ldr	r0, [sp, #20]
    3e24:	mov	r5, r1
    3e28:	ldr	r1, [sp, #16]
    3e2c:	mov	r9, r2
    3e30:	mov	r2, #256	; 0x100
    3e34:	ldr	r3, [r0]
    3e38:	mov	r0, r4
    3e3c:	bl	18b8 <fread@plt>
    3e40:	mov	r1, sl
    3e44:	mov	r2, #0
    3e48:	add	r3, r4, r2
    3e4c:	add	r2, r2, #2
    3e50:	ldrh	r3, [r3]
    3e54:	cmp	r2, #256	; 0x100
    3e58:	strh	r3, [sp, #56]	; 0x38
    3e5c:	vld1.16	{d16[0]}, [r6 :16]
    3e60:	vmovl.s8	q8, d16
    3e64:	vmovl.s16	q0, d16
    3e68:	vcvt.f64.s32	d17, s1
    3e6c:	vcvt.f64.s32	d16, s0
    3e70:	vst1.64	{d16-d17}, [r1]!
    3e74:	bne	3e48 <ReadDoubleData+0x56c>
    3e78:	ldr	r3, [sp, #12]
    3e7c:	add	r1, r5, #256	; 0x100
    3e80:	add	r8, r0, r8
    3e84:	add	sl, sl, #2048	; 0x800
    3e88:	add	r0, r7, #2048	; 0x800
    3e8c:	add	r2, r9, #256	; 0x100
    3e90:	cmp	r1, r3
    3e94:	blt	3e1c <ReadDoubleData+0x540>
    3e98:	ldr	r0, [sp, #4]
    3e9c:	cmp	r1, r0
    3ea0:	bge	4be8 <ReadDoubleData+0x130c>
    3ea4:	sub	r6, r0, r1
    3ea8:	ldr	r0, [sp, #20]
    3eac:	ldr	r1, [sp, #16]
    3eb0:	add	r4, sp, #72	; 0x48
    3eb4:	mov	r2, r6
    3eb8:	ldr	r3, [r0]
    3ebc:	mov	r0, r4
    3ec0:	bl	18b8 <fread@plt>
    3ec4:	mov	sl, r8
    3ec8:	cmp	r6, #1
    3ecc:	add	sl, r0, r8
    3ed0:	blt	4bdc <ReadDoubleData+0x1300>
    3ed4:	mov	r0, #0
    3ed8:	beq	3f20 <ReadDoubleData+0x644>
    3edc:	ldr	r0, [sp, #12]
    3ee0:	add	r2, sp, #52	; 0x34
    3ee4:	sub	r0, r0, r5
    3ee8:	bic	r1, r0, #1
    3eec:	bic	r0, r6, #1
    3ef0:	ldrh	r3, [r4], #2
    3ef4:	subs	r1, r1, #2
    3ef8:	strh	r3, [sp, #52]	; 0x34
    3efc:	vld1.16	{d16[0]}, [r2 :16]
    3f00:	vmovl.s8	q8, d16
    3f04:	vmovl.s16	q0, d16
    3f08:	vcvt.f64.s32	d17, s1
    3f0c:	vcvt.f64.s32	d16, s0
    3f10:	vst1.64	{d16-d17}, [r7]!
    3f14:	bne	3ef0 <ReadDoubleData+0x614>
    3f18:	cmp	r6, r0
    3f1c:	beq	4bdc <ReadDoubleData+0x1300>
    3f20:	ldr	r3, [sp]
    3f24:	add	r2, r0, r9
    3f28:	add	r1, sp, #72	; 0x48
    3f2c:	add	r1, r1, r0
    3f30:	add	r2, r3, r2, lsl #3
    3f34:	ldr	r3, [sp, #12]
    3f38:	sub	r3, r3, r5
    3f3c:	sub	r0, r3, r0
    3f40:	ldrsb	r3, [r1], #1
    3f44:	subs	r0, r0, #1
    3f48:	vmov	s0, r3
    3f4c:	vcvt.f64.s32	d16, s0
    3f50:	vstmia	r2!, {d16}
    3f54:	bne	3f40 <ReadDoubleData+0x664>
    3f58:	b	4bdc <ReadDoubleData+0x1300>
    3f5c:	sub	r1, r6, #256	; 0x100
    3f60:	str	r6, [sp, #4]
    3f64:	add	r0, r9, #2048	; 0x800
    3f68:	mov	r2, #256	; 0x100
    3f6c:	add	r4, sp, #72	; 0x48
    3f70:	add	r6, sp, #68	; 0x44
    3f74:	mov	r5, r9
    3f78:	mov	sl, #0
    3f7c:	str	r9, [sp]
    3f80:	str	r1, [sp, #12]
    3f84:	mov	r1, #0
    3f88:	mov	r7, r0
    3f8c:	ldr	r0, [sp, #20]
    3f90:	mov	r8, r1
    3f94:	ldr	r1, [sp, #16]
    3f98:	mov	r9, r2
    3f9c:	mov	r2, #256	; 0x100
    3fa0:	ldr	r3, [r0]
    3fa4:	mov	r0, r4
    3fa8:	bl	18b8 <fread@plt>
    3fac:	mov	r1, r5
    3fb0:	mov	r2, #0
    3fb4:	add	r3, r4, r2
    3fb8:	add	r2, r2, #2
    3fbc:	ldrh	r3, [r3]
    3fc0:	cmp	r2, #256	; 0x100
    3fc4:	strh	r3, [sp, #68]	; 0x44
    3fc8:	vld1.16	{d16[0]}, [r6 :16]
    3fcc:	vmovl.u8	q8, d16
    3fd0:	vmovl.u16	q0, d16
    3fd4:	vcvt.f64.u32	d17, s1
    3fd8:	vcvt.f64.u32	d16, s0
    3fdc:	vst1.64	{d16-d17}, [r1]!
    3fe0:	bne	3fb4 <ReadDoubleData+0x6d8>
    3fe4:	ldr	r3, [sp, #12]
    3fe8:	add	r1, r8, #256	; 0x100
    3fec:	add	sl, r0, sl
    3ff0:	add	r5, r5, #2048	; 0x800
    3ff4:	add	r0, r7, #2048	; 0x800
    3ff8:	add	r2, r9, #256	; 0x100
    3ffc:	cmp	r1, r3
    4000:	blt	3f88 <ReadDoubleData+0x6ac>
    4004:	ldr	r0, [sp, #4]
    4008:	cmp	r1, r0
    400c:	bge	4bdc <ReadDoubleData+0x1300>
    4010:	sub	r5, r0, r1
    4014:	ldr	r0, [sp, #20]
    4018:	ldr	r1, [sp, #16]
    401c:	add	r4, sp, #72	; 0x48
    4020:	mov	r2, r5
    4024:	ldr	r3, [r0]
    4028:	mov	r0, r4
    402c:	bl	18b8 <fread@plt>
    4030:	add	sl, r0, sl
    4034:	cmp	r5, #1
    4038:	blt	4bdc <ReadDoubleData+0x1300>
    403c:	mov	r0, #0
    4040:	beq	4088 <ReadDoubleData+0x7ac>
    4044:	ldr	r0, [sp, #12]
    4048:	add	r2, sp, #64	; 0x40
    404c:	sub	r0, r0, r8
    4050:	bic	r1, r0, #1
    4054:	bic	r0, r5, #1
    4058:	ldrh	r3, [r4], #2
    405c:	subs	r1, r1, #2
    4060:	strh	r3, [sp, #64]	; 0x40
    4064:	vld1.16	{d16[0]}, [r2 :16]
    4068:	vmovl.u8	q8, d16
    406c:	vmovl.u16	q0, d16
    4070:	vcvt.f64.u32	d17, s1
    4074:	vcvt.f64.u32	d16, s0
    4078:	vst1.64	{d16-d17}, [r7]!
    407c:	bne	4058 <ReadDoubleData+0x77c>
    4080:	cmp	r5, r0
    4084:	beq	4bdc <ReadDoubleData+0x1300>
    4088:	ldr	r3, [sp]
    408c:	add	r2, r0, r9
    4090:	add	r1, sp, #72	; 0x48
    4094:	add	r1, r1, r0
    4098:	add	r2, r3, r2, lsl #3
    409c:	ldr	r3, [sp, #12]
    40a0:	sub	r3, r3, r8
    40a4:	sub	r0, r3, r0
    40a8:	ldrb	r3, [r1], #1
    40ac:	subs	r0, r0, #1
    40b0:	vmov	s0, r3
    40b4:	vcvt.f64.u32	d16, s0
    40b8:	vstmia	r2!, {d16}
    40bc:	bne	40a8 <ReadDoubleData+0x7cc>
    40c0:	b	4bdc <ReadDoubleData+0x1300>
    40c4:	cmp	r6, #256	; 0x100
    40c8:	bgt	4bf0 <ReadDoubleData+0x1314>
    40cc:	ldr	r0, [sp, #20]
    40d0:	ldr	r1, [sp, #16]
    40d4:	add	r4, sp, #72	; 0x48
    40d8:	mov	r2, r6
    40dc:	ldr	r3, [r0]
    40e0:	mov	r0, r4
    40e4:	bl	18b8 <fread@plt>
    40e8:	mov	sl, r0
    40ec:	cmp	r6, #1
    40f0:	blt	4bdc <ReadDoubleData+0x1300>
    40f4:	mov	r0, #0
    40f8:	beq	4138 <ReadDoubleData+0x85c>
    40fc:	bic	r0, r6, #1
    4100:	add	r1, sp, #24
    4104:	mov	r3, r9
    4108:	mov	r2, r0
    410c:	ldr	r7, [r4], #4
    4110:	subs	r2, r2, #2
    4114:	str	r7, [sp, #24]
    4118:	vld1.32	{d16[0]}, [r1 :32]
    411c:	vmovl.s16	q0, d16
    4120:	vcvt.f64.s32	d17, s1
    4124:	vcvt.f64.s32	d16, s0
    4128:	vst1.64	{d16-d17}, [r3]!
    412c:	bne	410c <ReadDoubleData+0x830>
    4130:	cmp	r0, r6
    4134:	beq	4bdc <ReadDoubleData+0x1300>
    4138:	add	r3, sp, #72	; 0x48
    413c:	sub	r1, r6, r0
    4140:	add	r2, r9, r0, lsl #3
    4144:	add	r0, r3, r0, lsl #1
    4148:	ldrsh	r3, [r0], #2
    414c:	subs	r1, r1, #1
    4150:	vmov	s0, r3
    4154:	vcvt.f64.s32	d16, s0
    4158:	vstr	d16, [r2]
    415c:	add	r2, r2, #8
    4160:	bne	4148 <ReadDoubleData+0x86c>
    4164:	b	4bdc <ReadDoubleData+0x1300>
    4168:	cmp	r6, #256	; 0x100
    416c:	bgt	4d4c <ReadDoubleData+0x1470>
    4170:	ldr	r0, [sp, #20]
    4174:	ldr	r1, [sp, #16]
    4178:	add	r4, sp, #72	; 0x48
    417c:	mov	r2, r6
    4180:	ldr	r3, [r0]
    4184:	mov	r0, r4
    4188:	bl	18b8 <fread@plt>
    418c:	mov	sl, r0
    4190:	cmp	r6, #1
    4194:	blt	4bdc <ReadDoubleData+0x1300>
    4198:	mov	r0, #0
    419c:	beq	41dc <ReadDoubleData+0x900>
    41a0:	bic	r0, r6, #1
    41a4:	add	r1, sp, #36	; 0x24
    41a8:	mov	r3, r9
    41ac:	mov	r2, r0
    41b0:	ldr	r7, [r4], #4
    41b4:	subs	r2, r2, #2
    41b8:	str	r7, [sp, #36]	; 0x24
    41bc:	vld1.32	{d16[0]}, [r1 :32]
    41c0:	vmovl.u16	q0, d16
    41c4:	vcvt.f64.u32	d17, s1
    41c8:	vcvt.f64.u32	d16, s0
    41cc:	vst1.64	{d16-d17}, [r3]!
    41d0:	bne	41b0 <ReadDoubleData+0x8d4>
    41d4:	cmp	r0, r6
    41d8:	beq	4bdc <ReadDoubleData+0x1300>
    41dc:	add	r3, sp, #72	; 0x48
    41e0:	sub	r1, r6, r0
    41e4:	add	r2, r9, r0, lsl #3
    41e8:	add	r0, r3, r0, lsl #1
    41ec:	ldrh	r3, [r0], #2
    41f0:	subs	r1, r1, #1
    41f4:	vmov	s0, r3
    41f8:	vcvt.f64.u32	d16, s0
    41fc:	vstr	d16, [r2]
    4200:	add	r2, r2, #8
    4204:	bne	41ec <ReadDoubleData+0x910>
    4208:	b	4bdc <ReadDoubleData+0x1300>
    420c:	cmp	r6, #256	; 0x100
    4210:	bgt	4ea8 <ReadDoubleData+0x15cc>
    4214:	ldr	r0, [sp, #20]
    4218:	ldr	r1, [sp, #16]
    421c:	add	r4, sp, #72	; 0x48
    4220:	mov	r2, r6
    4224:	ldr	r3, [r0]
    4228:	mov	r0, r4
    422c:	bl	18b8 <fread@plt>
    4230:	mov	sl, r0
    4234:	cmp	r6, #1
    4238:	blt	4bdc <ReadDoubleData+0x1300>
    423c:	mov	r0, #0
    4240:	beq	4270 <ReadDoubleData+0x994>
    4244:	bic	r0, r6, #1
    4248:	mov	r2, r9
    424c:	mov	r1, r0
    4250:	vld1.32	{d0}, [r4]!
    4254:	subs	r1, r1, #2
    4258:	vcvt.f64.s32	d17, s1
    425c:	vcvt.f64.s32	d16, s0
    4260:	vst1.64	{d16-d17}, [r2]!
    4264:	bne	4250 <ReadDoubleData+0x974>
    4268:	cmp	r0, r6
    426c:	beq	4bdc <ReadDoubleData+0x1300>
    4270:	add	r3, sp, #72	; 0x48
    4274:	sub	r1, r6, r0
    4278:	add	r2, r9, r0, lsl #3
    427c:	add	r0, r3, r0, lsl #2
    4280:	ldr	r3, [r0], #4
    4284:	subs	r1, r1, #1
    4288:	vmov	s0, r3
    428c:	vcvt.f64.s32	d16, s0
    4290:	vstr	d16, [r2]
    4294:	add	r2, r2, #8
    4298:	bne	4280 <ReadDoubleData+0x9a4>
    429c:	b	4bdc <ReadDoubleData+0x1300>
    42a0:	cmp	r6, #256	; 0x100
    42a4:	bgt	4fe4 <ReadDoubleData+0x1708>
    42a8:	ldr	r0, [sp, #20]
    42ac:	ldr	r1, [sp, #16]
    42b0:	add	r4, sp, #72	; 0x48
    42b4:	mov	r2, r6
    42b8:	ldr	r3, [r0]
    42bc:	mov	r0, r4
    42c0:	bl	18b8 <fread@plt>
    42c4:	mov	sl, r0
    42c8:	cmp	r6, #1
    42cc:	blt	4bdc <ReadDoubleData+0x1300>
    42d0:	mov	r0, #0
    42d4:	beq	4304 <ReadDoubleData+0xa28>
    42d8:	bic	r0, r6, #1
    42dc:	mov	r2, r9
    42e0:	mov	r1, r0
    42e4:	vld1.32	{d0}, [r4]!
    42e8:	subs	r1, r1, #2
    42ec:	vcvt.f64.u32	d17, s1
    42f0:	vcvt.f64.u32	d16, s0
    42f4:	vst1.64	{d16-d17}, [r2]!
    42f8:	bne	42e4 <ReadDoubleData+0xa08>
    42fc:	cmp	r0, r6
    4300:	beq	4bdc <ReadDoubleData+0x1300>
    4304:	add	r3, sp, #72	; 0x48
    4308:	sub	r1, r6, r0
    430c:	add	r2, r9, r0, lsl #3
    4310:	add	r0, r3, r0, lsl #2
    4314:	ldr	r3, [r0], #4
    4318:	subs	r1, r1, #1
    431c:	vmov	s0, r3
    4320:	vcvt.f64.u32	d16, s0
    4324:	vstr	d16, [r2]
    4328:	add	r2, r2, #8
    432c:	bne	4314 <ReadDoubleData+0xa38>
    4330:	b	4bdc <ReadDoubleData+0x1300>
    4334:	cmp	r6, #256	; 0x100
    4338:	bgt	5120 <ReadDoubleData+0x1844>
    433c:	ldr	r0, [sp, #20]
    4340:	ldr	r1, [sp, #16]
    4344:	add	r4, sp, #72	; 0x48
    4348:	mov	r2, r6
    434c:	ldr	r3, [r0]
    4350:	mov	r0, r4
    4354:	bl	18b8 <fread@plt>
    4358:	mov	sl, r0
    435c:	cmp	r6, #1
    4360:	blt	4bdc <ReadDoubleData+0x1300>
    4364:	mov	r0, #0
    4368:	beq	4398 <ReadDoubleData+0xabc>
    436c:	bic	r0, r6, #1
    4370:	mov	r2, r9
    4374:	mov	r1, r0
    4378:	vld1.32	{d0}, [r4]!
    437c:	subs	r1, r1, #2
    4380:	vcvt.f64.f32	d17, s1
    4384:	vcvt.f64.f32	d16, s0
    4388:	vst1.64	{d16-d17}, [r2]!
    438c:	bne	4378 <ReadDoubleData+0xa9c>
    4390:	cmp	r0, r6
    4394:	beq	4bdc <ReadDoubleData+0x1300>
    4398:	add	r3, sp, #72	; 0x48
    439c:	sub	r1, r6, r0
    43a0:	add	r2, r9, r0, lsl #3
    43a4:	add	r0, r3, r0, lsl #2
    43a8:	vldr	s0, [r0]
    43ac:	subs	r1, r1, #1
    43b0:	add	r0, r0, #4
    43b4:	vcvt.f64.f32	d16, s0
    43b8:	vstr	d16, [r2]
    43bc:	add	r2, r2, #8
    43c0:	bne	43a8 <ReadDoubleData+0xacc>
    43c4:	b	4bdc <ReadDoubleData+0x1300>
    43c8:	cmp	r6, #256	; 0x100
    43cc:	bgt	525c <ReadDoubleData+0x1980>
    43d0:	ldr	r0, [sp, #20]
    43d4:	ldr	r1, [sp, #16]
    43d8:	add	r4, sp, #72	; 0x48
    43dc:	mov	r2, r6
    43e0:	ldr	r3, [r0]
    43e4:	mov	r0, r4
    43e8:	bl	18b8 <fread@plt>
    43ec:	mov	sl, r0
    43f0:	cmp	r6, #1
    43f4:	blt	4bdc <ReadDoubleData+0x1300>
    43f8:	mov	r5, #0
    43fc:	beq	4454 <ReadDoubleData+0xb78>
    4400:	bic	r5, r6, #1
    4404:	mov	r8, r6
    4408:	mov	r7, r9
    440c:	mov	r6, r5
    4410:	vld1.64	{d8-d9}, [r4]!
    4414:	vmov.32	r0, d9[0]
    4418:	vmov.32	r1, d9[1]
    441c:	bl	5f094 <__aeabi_l2d>
    4420:	vmov.32	r2, d8[0]
    4424:	vmov.32	r3, d8[1]
    4428:	vmov	d9, r0, r1
    442c:	mov	r0, r2
    4430:	mov	r1, r3
    4434:	bl	5f094 <__aeabi_l2d>
    4438:	vmov	d8, r0, r1
    443c:	subs	r6, r6, #2
    4440:	vst1.64	{d8-d9}, [r7]!
    4444:	bne	4410 <ReadDoubleData+0xb34>
    4448:	mov	r6, r8
    444c:	cmp	r5, r8
    4450:	beq	4bdc <ReadDoubleData+0x1300>
    4454:	add	r0, sp, #72	; 0x48
    4458:	sub	r4, r6, r5
    445c:	add	r6, r9, r5, lsl #3
    4460:	add	r5, r0, r5, lsl #3
    4464:	ldrd	r0, [r5]
    4468:	bl	5f094 <__aeabi_l2d>
    446c:	strd	r0, [r6]
    4470:	subs	r4, r4, #1
    4474:	add	r6, r6, #8
    4478:	add	r5, r5, #8
    447c:	bne	4464 <ReadDoubleData+0xb88>
    4480:	b	4bdc <ReadDoubleData+0x1300>
    4484:	cmp	r6, #256	; 0x100
    4488:	bgt	53f0 <ReadDoubleData+0x1b14>
    448c:	ldr	r0, [sp, #20]
    4490:	ldr	r1, [sp, #16]
    4494:	add	r4, sp, #72	; 0x48
    4498:	mov	r2, r6
    449c:	ldr	r3, [r0]
    44a0:	mov	r0, r4
    44a4:	bl	18b8 <fread@plt>
    44a8:	mov	sl, r0
    44ac:	cmp	r6, #1
    44b0:	blt	4bdc <ReadDoubleData+0x1300>
    44b4:	mov	r5, #0
    44b8:	beq	4510 <ReadDoubleData+0xc34>
    44bc:	bic	r5, r6, #1
    44c0:	mov	r8, r6
    44c4:	mov	r7, r9
    44c8:	mov	r6, r5
    44cc:	vld1.64	{d8-d9}, [r4]!
    44d0:	vmov.32	r0, d9[0]
    44d4:	vmov.32	r1, d9[1]
    44d8:	bl	5f080 <__aeabi_ul2d>
    44dc:	vmov.32	r2, d8[0]
    44e0:	vmov.32	r3, d8[1]
    44e4:	vmov	d9, r0, r1
    44e8:	mov	r0, r2
    44ec:	mov	r1, r3
    44f0:	bl	5f080 <__aeabi_ul2d>
    44f4:	vmov	d8, r0, r1
    44f8:	subs	r6, r6, #2
    44fc:	vst1.64	{d8-d9}, [r7]!
    4500:	bne	44cc <ReadDoubleData+0xbf0>
    4504:	mov	r6, r8
    4508:	cmp	r5, r8
    450c:	beq	4bdc <ReadDoubleData+0x1300>
    4510:	add	r0, sp, #72	; 0x48
    4514:	sub	r4, r6, r5
    4518:	add	r6, r9, r5, lsl #3
    451c:	add	r5, r0, r5, lsl #3
    4520:	ldrd	r0, [r5]
    4524:	bl	5f080 <__aeabi_ul2d>
    4528:	strd	r0, [r6]
    452c:	subs	r4, r4, #1
    4530:	add	r6, r6, #8
    4534:	add	r5, r5, #8
    4538:	bne	4520 <ReadDoubleData+0xc44>
    453c:	b	4bdc <ReadDoubleData+0x1300>
    4540:	sub	r0, r6, #256	; 0x100
    4544:	add	r1, r9, #2048	; 0x800
    4548:	add	r4, sp, #72	; 0x48
    454c:	mov	r5, #0
    4550:	str	r6, [sp, #4]
    4554:	str	r0, [sp, #8]
    4558:	mov	r0, #0
    455c:	str	r0, [sp, #12]
    4560:	ldr	r0, [sp, #20]
    4564:	mov	r8, r1
    4568:	ldr	r1, [sp, #16]
    456c:	mov	r2, #256	; 0x100
    4570:	ldr	r3, [r0]
    4574:	mov	r0, r4
    4578:	bl	18b8 <fread@plt>
    457c:	mov	r7, r0
    4580:	mov	sl, r9
    4584:	mov	r6, r9
    4588:	mov	r9, #0
    458c:	add	r0, r4, r9
    4590:	bl	1c18 <Mat_int16Swap>
    4594:	vmov	s0, r0
    4598:	add	r9, r9, #2
    459c:	vcvt.f64.s32	d16, s0
    45a0:	cmp	r9, #512	; 0x200
    45a4:	vstmia	r6!, {d16}
    45a8:	bne	458c <ReadDoubleData+0xcb0>
    45ac:	ldr	r6, [sp, #12]
    45b0:	ldr	r2, [sp, #8]
    45b4:	mov	r9, sl
    45b8:	add	r5, r7, r5
    45bc:	add	r1, r8, #2048	; 0x800
    45c0:	add	r9, sl, #2048	; 0x800
    45c4:	add	r0, r6, #256	; 0x100
    45c8:	cmp	r0, r2
    45cc:	blt	455c <ReadDoubleData+0xc80>
    45d0:	ldr	r1, [sp, #4]
    45d4:	cmp	r0, r1
    45d8:	bge	4bd8 <ReadDoubleData+0x12fc>
    45dc:	sub	r7, r1, r0
    45e0:	ldr	r0, [sp, #20]
    45e4:	ldr	r1, [sp, #16]
    45e8:	add	r4, sp, #72	; 0x48
    45ec:	mov	r2, r7
    45f0:	ldr	r3, [r0]
    45f4:	mov	r0, r4
    45f8:	bl	18b8 <fread@plt>
    45fc:	add	r5, r0, r5
    4600:	cmp	r7, #1
    4604:	blt	4bd8 <ReadDoubleData+0x12fc>
    4608:	ldr	r0, [sp, #8]
    460c:	sub	r6, r0, r6
    4610:	mov	r0, r4
    4614:	bl	1c18 <Mat_int16Swap>
    4618:	vmov	s0, r0
    461c:	subs	r6, r6, #1
    4620:	add	r4, r4, #2
    4624:	vcvt.f64.s32	d16, s0
    4628:	vstmia	r8!, {d16}
    462c:	bne	4610 <ReadDoubleData+0xd34>
    4630:	b	4bd8 <ReadDoubleData+0x12fc>
    4634:	sub	r0, r6, #256	; 0x100
    4638:	add	r1, r9, #2048	; 0x800
    463c:	add	r4, sp, #72	; 0x48
    4640:	mov	r5, #0
    4644:	str	r6, [sp, #4]
    4648:	str	r0, [sp, #8]
    464c:	mov	r0, #0
    4650:	str	r0, [sp, #12]
    4654:	ldr	r0, [sp, #20]
    4658:	mov	r8, r1
    465c:	ldr	r1, [sp, #16]
    4660:	mov	r2, #256	; 0x100
    4664:	ldr	r3, [r0]
    4668:	mov	r0, r4
    466c:	bl	18b8 <fread@plt>
    4670:	mov	r7, r0
    4674:	mov	sl, r9
    4678:	mov	r6, r9
    467c:	mov	r9, #0
    4680:	add	r0, r4, r9
    4684:	bl	1c2c <Mat_uint16Swap>
    4688:	vmov	s0, r0
    468c:	add	r9, r9, #2
    4690:	vcvt.f64.u32	d16, s0
    4694:	cmp	r9, #512	; 0x200
    4698:	vstmia	r6!, {d16}
    469c:	bne	4680 <ReadDoubleData+0xda4>
    46a0:	ldr	r6, [sp, #12]
    46a4:	ldr	r2, [sp, #8]
    46a8:	mov	r9, sl
    46ac:	add	r5, r7, r5
    46b0:	add	r1, r8, #2048	; 0x800
    46b4:	add	r9, sl, #2048	; 0x800
    46b8:	add	r0, r6, #256	; 0x100
    46bc:	cmp	r0, r2
    46c0:	blt	4650 <ReadDoubleData+0xd74>
    46c4:	ldr	r1, [sp, #4]
    46c8:	cmp	r0, r1
    46cc:	bge	4bd8 <ReadDoubleData+0x12fc>
    46d0:	sub	r7, r1, r0
    46d4:	ldr	r0, [sp, #20]
    46d8:	ldr	r1, [sp, #16]
    46dc:	add	r4, sp, #72	; 0x48
    46e0:	mov	r2, r7
    46e4:	ldr	r3, [r0]
    46e8:	mov	r0, r4
    46ec:	bl	18b8 <fread@plt>
    46f0:	add	r5, r0, r5
    46f4:	cmp	r7, #1
    46f8:	blt	4bd8 <ReadDoubleData+0x12fc>
    46fc:	ldr	r0, [sp, #8]
    4700:	sub	r6, r0, r6
    4704:	mov	r0, r4
    4708:	bl	1c2c <Mat_uint16Swap>
    470c:	vmov	s0, r0
    4710:	subs	r6, r6, #1
    4714:	add	r4, r4, #2
    4718:	vcvt.f64.u32	d16, s0
    471c:	vstmia	r8!, {d16}
    4720:	bne	4704 <ReadDoubleData+0xe28>
    4724:	b	4bd8 <ReadDoubleData+0x12fc>
    4728:	sub	r0, r6, #256	; 0x100
    472c:	add	r1, r9, #2048	; 0x800
    4730:	add	r4, sp, #72	; 0x48
    4734:	mov	r5, #0
    4738:	str	r6, [sp, #4]
    473c:	str	r0, [sp, #8]
    4740:	mov	r0, #0
    4744:	str	r0, [sp, #12]
    4748:	ldr	r0, [sp, #20]
    474c:	mov	r8, r1
    4750:	ldr	r1, [sp, #16]
    4754:	mov	r2, #256	; 0x100
    4758:	ldr	r3, [r0]
    475c:	mov	r0, r4
    4760:	bl	18b8 <fread@plt>
    4764:	mov	r7, r0
    4768:	mov	sl, r9
    476c:	mov	r6, r9
    4770:	mov	r9, #0
    4774:	add	r0, r4, r9
    4778:	bl	1bf0 <Mat_int32Swap>
    477c:	vmov	s0, r0
    4780:	add	r9, r9, #4
    4784:	vcvt.f64.s32	d16, s0
    4788:	cmp	r9, #1024	; 0x400
    478c:	vstmia	r6!, {d16}
    4790:	bne	4774 <ReadDoubleData+0xe98>
    4794:	ldr	r6, [sp, #12]
    4798:	ldr	r2, [sp, #8]
    479c:	mov	r9, sl
    47a0:	add	r5, r7, r5
    47a4:	add	r1, r8, #2048	; 0x800
    47a8:	add	r9, sl, #2048	; 0x800
    47ac:	add	r0, r6, #256	; 0x100
    47b0:	cmp	r0, r2
    47b4:	blt	4744 <ReadDoubleData+0xe68>
    47b8:	ldr	r1, [sp, #4]
    47bc:	cmp	r0, r1
    47c0:	bge	4bd8 <ReadDoubleData+0x12fc>
    47c4:	sub	r7, r1, r0
    47c8:	ldr	r0, [sp, #20]
    47cc:	ldr	r1, [sp, #16]
    47d0:	add	r4, sp, #72	; 0x48
    47d4:	mov	r2, r7
    47d8:	ldr	r3, [r0]
    47dc:	mov	r0, r4
    47e0:	bl	18b8 <fread@plt>
    47e4:	add	r5, r0, r5
    47e8:	cmp	r7, #1
    47ec:	blt	4bd8 <ReadDoubleData+0x12fc>
    47f0:	ldr	r0, [sp, #8]
    47f4:	sub	r6, r0, r6
    47f8:	mov	r0, r4
    47fc:	bl	1bf0 <Mat_int32Swap>
    4800:	vmov	s0, r0
    4804:	subs	r6, r6, #1
    4808:	add	r4, r4, #4
    480c:	vcvt.f64.s32	d16, s0
    4810:	vstmia	r8!, {d16}
    4814:	bne	47f8 <ReadDoubleData+0xf1c>
    4818:	b	4bd8 <ReadDoubleData+0x12fc>
    481c:	sub	r0, r6, #256	; 0x100
    4820:	add	r1, r9, #2048	; 0x800
    4824:	add	r4, sp, #72	; 0x48
    4828:	mov	r5, #0
    482c:	str	r6, [sp, #4]
    4830:	str	r0, [sp, #8]
    4834:	mov	r0, #0
    4838:	str	r0, [sp, #12]
    483c:	ldr	r0, [sp, #20]
    4840:	mov	r8, r1
    4844:	ldr	r1, [sp, #16]
    4848:	mov	r2, #256	; 0x100
    484c:	ldr	r3, [r0]
    4850:	mov	r0, r4
    4854:	bl	18b8 <fread@plt>
    4858:	mov	r7, r0
    485c:	mov	sl, r9
    4860:	mov	r6, r9
    4864:	mov	r9, #0
    4868:	add	r0, r4, r9
    486c:	bl	1c04 <Mat_uint32Swap>
    4870:	vmov	s0, r0
    4874:	add	r9, r9, #4
    4878:	vcvt.f64.u32	d16, s0
    487c:	cmp	r9, #1024	; 0x400
    4880:	vstmia	r6!, {d16}
    4884:	bne	4868 <ReadDoubleData+0xf8c>
    4888:	ldr	r6, [sp, #12]
    488c:	ldr	r2, [sp, #8]
    4890:	mov	r9, sl
    4894:	add	r5, r7, r5
    4898:	add	r1, r8, #2048	; 0x800
    489c:	add	r9, sl, #2048	; 0x800
    48a0:	add	r0, r6, #256	; 0x100
    48a4:	cmp	r0, r2
    48a8:	blt	4838 <ReadDoubleData+0xf5c>
    48ac:	ldr	r1, [sp, #4]
    48b0:	cmp	r0, r1
    48b4:	bge	4bd8 <ReadDoubleData+0x12fc>
    48b8:	sub	r7, r1, r0
    48bc:	ldr	r0, [sp, #20]
    48c0:	ldr	r1, [sp, #16]
    48c4:	add	r4, sp, #72	; 0x48
    48c8:	mov	r2, r7
    48cc:	ldr	r3, [r0]
    48d0:	mov	r0, r4
    48d4:	bl	18b8 <fread@plt>
    48d8:	add	r5, r0, r5
    48dc:	cmp	r7, #1
    48e0:	blt	4bd8 <ReadDoubleData+0x12fc>
    48e4:	ldr	r0, [sp, #8]
    48e8:	sub	r6, r0, r6
    48ec:	mov	r0, r4
    48f0:	bl	1c04 <Mat_uint32Swap>
    48f4:	vmov	s0, r0
    48f8:	subs	r6, r6, #1
    48fc:	add	r4, r4, #4
    4900:	vcvt.f64.u32	d16, s0
    4904:	vstmia	r8!, {d16}
    4908:	bne	48ec <ReadDoubleData+0x1010>
    490c:	b	4bd8 <ReadDoubleData+0x12fc>
    4910:	sub	r0, r6, #256	; 0x100
    4914:	add	r1, r9, #2048	; 0x800
    4918:	add	r4, sp, #72	; 0x48
    491c:	mov	r5, #0
    4920:	str	r6, [sp, #4]
    4924:	str	r0, [sp, #8]
    4928:	mov	r0, #0
    492c:	str	r0, [sp, #12]
    4930:	ldr	r0, [sp, #20]
    4934:	mov	r8, r1
    4938:	ldr	r1, [sp, #16]
    493c:	mov	r2, #256	; 0x100
    4940:	ldr	r3, [r0]
    4944:	mov	r0, r4
    4948:	bl	18b8 <fread@plt>
    494c:	mov	r7, r0
    4950:	mov	sl, r9
    4954:	mov	r6, r9
    4958:	mov	r9, #0
    495c:	add	r0, r4, r9
    4960:	bl	1c44 <Mat_floatSwap>
    4964:	vcvt.f64.f32	d16, s0
    4968:	add	r9, r9, #4
    496c:	vstmia	r6!, {d16}
    4970:	cmp	r9, #1024	; 0x400
    4974:	bne	495c <ReadDoubleData+0x1080>
    4978:	ldr	r6, [sp, #12]
    497c:	ldr	r2, [sp, #8]
    4980:	mov	r9, sl
    4984:	add	r5, r7, r5
    4988:	add	r1, r8, #2048	; 0x800
    498c:	add	r9, sl, #2048	; 0x800
    4990:	add	r0, r6, #256	; 0x100
    4994:	cmp	r0, r2
    4998:	blt	492c <ReadDoubleData+0x1050>
    499c:	ldr	r1, [sp, #4]
    49a0:	cmp	r0, r1
    49a4:	bge	4bd8 <ReadDoubleData+0x12fc>
    49a8:	sub	r7, r1, r0
    49ac:	ldr	r0, [sp, #20]
    49b0:	ldr	r1, [sp, #16]
    49b4:	add	r4, sp, #72	; 0x48
    49b8:	mov	r2, r7
    49bc:	ldr	r3, [r0]
    49c0:	mov	r0, r4
    49c4:	bl	18b8 <fread@plt>
    49c8:	add	r5, r0, r5
    49cc:	cmp	r7, #1
    49d0:	blt	4bd8 <ReadDoubleData+0x12fc>
    49d4:	ldr	r0, [sp, #8]
    49d8:	sub	r6, r0, r6
    49dc:	mov	r0, r4
    49e0:	bl	1c44 <Mat_floatSwap>
    49e4:	vcvt.f64.f32	d16, s0
    49e8:	subs	r6, r6, #1
    49ec:	add	r4, r4, #4
    49f0:	vstmia	r8!, {d16}
    49f4:	bne	49dc <ReadDoubleData+0x1100>
    49f8:	b	4bd8 <ReadDoubleData+0x12fc>
    49fc:	sub	r0, r6, #256	; 0x100
    4a00:	mov	sl, r9
    4a04:	add	r1, r9, #2048	; 0x800
    4a08:	add	r4, sp, #72	; 0x48
    4a0c:	mov	r5, #0
    4a10:	str	r6, [sp, #4]
    4a14:	str	r0, [sp, #8]
    4a18:	mov	r0, #0
    4a1c:	str	r0, [sp, #12]
    4a20:	ldr	r0, [sp, #20]
    4a24:	mov	r8, r1
    4a28:	ldr	r1, [sp, #16]
    4a2c:	mov	r2, #256	; 0x100
    4a30:	ldr	r3, [r0]
    4a34:	mov	r0, r4
    4a38:	bl	18b8 <fread@plt>
    4a3c:	mov	r7, r0
    4a40:	mov	r6, #0
    4a44:	add	r0, r4, r6
    4a48:	bl	1b84 <Mat_int64Swap>
    4a4c:	bl	5f094 <__aeabi_l2d>
    4a50:	mov	r2, sl
    4a54:	str	r0, [r2, r6]!
    4a58:	add	r6, r6, #8
    4a5c:	cmp	r6, #2048	; 0x800
    4a60:	str	r1, [r2, #4]
    4a64:	bne	4a44 <ReadDoubleData+0x1168>
    4a68:	ldr	r6, [sp, #12]
    4a6c:	ldr	r2, [sp, #8]
    4a70:	add	r5, r7, r5
    4a74:	add	sl, sl, #2048	; 0x800
    4a78:	add	r1, r8, #2048	; 0x800
    4a7c:	add	r0, r6, #256	; 0x100
    4a80:	cmp	r0, r2
    4a84:	blt	4a1c <ReadDoubleData+0x1140>
    4a88:	ldr	r1, [sp, #4]
    4a8c:	cmp	r0, r1
    4a90:	bge	4bd8 <ReadDoubleData+0x12fc>
    4a94:	sub	r7, r1, r0
    4a98:	ldr	r0, [sp, #20]
    4a9c:	ldr	r1, [sp, #16]
    4aa0:	add	r4, sp, #72	; 0x48
    4aa4:	mov	r2, r7
    4aa8:	ldr	r3, [r0]
    4aac:	mov	r0, r4
    4ab0:	bl	18b8 <fread@plt>
    4ab4:	add	r5, r0, r5
    4ab8:	cmp	r7, #1
    4abc:	blt	4bd8 <ReadDoubleData+0x12fc>
    4ac0:	ldr	r0, [sp, #8]
    4ac4:	sub	r6, r0, r6
    4ac8:	mov	r0, r4
    4acc:	bl	1b84 <Mat_int64Swap>
    4ad0:	bl	5f094 <__aeabi_l2d>
    4ad4:	strd	r0, [r8]
    4ad8:	add	r8, r8, #8
    4adc:	subs	r6, r6, #1
    4ae0:	add	r4, r4, #8
    4ae4:	bne	4ac8 <ReadDoubleData+0x11ec>
    4ae8:	b	4bd8 <ReadDoubleData+0x12fc>
    4aec:	sub	r0, r6, #256	; 0x100
    4af0:	mov	sl, r9
    4af4:	add	r1, r9, #2048	; 0x800
    4af8:	add	r4, sp, #72	; 0x48
    4afc:	mov	r5, #0
    4b00:	str	r6, [sp, #4]
    4b04:	str	r0, [sp, #8]
    4b08:	mov	r0, #0
    4b0c:	str	r0, [sp, #12]
    4b10:	ldr	r0, [sp, #20]
    4b14:	mov	r8, r1
    4b18:	ldr	r1, [sp, #16]
    4b1c:	mov	r2, #256	; 0x100
    4b20:	ldr	r3, [r0]
    4b24:	mov	r0, r4
    4b28:	bl	18b8 <fread@plt>
    4b2c:	mov	r7, r0
    4b30:	mov	r6, #0
    4b34:	add	r0, r4, r6
    4b38:	bl	1bd4 <Mat_uint64Swap>
    4b3c:	bl	5f080 <__aeabi_ul2d>
    4b40:	mov	r2, sl
    4b44:	str	r0, [r2, r6]!
    4b48:	add	r6, r6, #8
    4b4c:	cmp	r6, #2048	; 0x800
    4b50:	str	r1, [r2, #4]
    4b54:	bne	4b34 <ReadDoubleData+0x1258>
    4b58:	ldr	r6, [sp, #12]
    4b5c:	ldr	r2, [sp, #8]
    4b60:	add	r5, r7, r5
    4b64:	add	sl, sl, #2048	; 0x800
    4b68:	add	r1, r8, #2048	; 0x800
    4b6c:	add	r0, r6, #256	; 0x100
    4b70:	cmp	r0, r2
    4b74:	blt	4b0c <ReadDoubleData+0x1230>
    4b78:	ldr	r1, [sp, #4]
    4b7c:	cmp	r0, r1
    4b80:	bge	4bd8 <ReadDoubleData+0x12fc>
    4b84:	sub	r7, r1, r0
    4b88:	ldr	r0, [sp, #20]
    4b8c:	ldr	r1, [sp, #16]
    4b90:	add	r4, sp, #72	; 0x48
    4b94:	mov	r2, r7
    4b98:	ldr	r3, [r0]
    4b9c:	mov	r0, r4
    4ba0:	bl	18b8 <fread@plt>
    4ba4:	add	r5, r0, r5
    4ba8:	cmp	r7, #1
    4bac:	blt	4bd8 <ReadDoubleData+0x12fc>
    4bb0:	ldr	r0, [sp, #8]
    4bb4:	sub	r6, r0, r6
    4bb8:	mov	r0, r4
    4bbc:	bl	1bd4 <Mat_uint64Swap>
    4bc0:	bl	5f080 <__aeabi_ul2d>
    4bc4:	strd	r0, [r8]
    4bc8:	add	r8, r8, #8
    4bcc:	subs	r6, r6, #1
    4bd0:	add	r4, r4, #8
    4bd4:	bne	4bb8 <ReadDoubleData+0x12dc>
    4bd8:	mov	sl, r5
    4bdc:	ldr	r0, [sp, #16]
    4be0:	mul	r4, sl, r0
    4be4:	b	3908 <ReadDoubleData+0x2c>
    4be8:	mov	sl, r8
    4bec:	b	4bdc <ReadDoubleData+0x1300>
    4bf0:	sub	r1, r6, #256	; 0x100
    4bf4:	str	r6, [sp, #4]
    4bf8:	add	r0, r9, #2048	; 0x800
    4bfc:	mov	r2, #256	; 0x100
    4c00:	add	r4, sp, #72	; 0x48
    4c04:	add	r6, sp, #32
    4c08:	mov	r7, r9
    4c0c:	mov	sl, #0
    4c10:	str	r9, [sp]
    4c14:	str	r1, [sp, #12]
    4c18:	mov	r1, #0
    4c1c:	mov	r5, r0
    4c20:	ldr	r0, [sp, #20]
    4c24:	mov	r9, r1
    4c28:	ldr	r1, [sp, #16]
    4c2c:	mov	r8, r2
    4c30:	mov	r2, #256	; 0x100
    4c34:	ldr	r3, [r0]
    4c38:	mov	r0, r4
    4c3c:	bl	18b8 <fread@plt>
    4c40:	mov	r1, r7
    4c44:	mov	r2, #0
    4c48:	ldr	r3, [r4, r2]
    4c4c:	add	r2, r2, #4
    4c50:	cmp	r2, #512	; 0x200
    4c54:	str	r3, [sp, #32]
    4c58:	vld1.32	{d16[0]}, [r6 :32]
    4c5c:	vmovl.s16	q0, d16
    4c60:	vcvt.f64.s32	d17, s1
    4c64:	vcvt.f64.s32	d16, s0
    4c68:	vst1.64	{d16-d17}, [r1]!
    4c6c:	bne	4c48 <ReadDoubleData+0x136c>
    4c70:	ldr	r3, [sp, #12]
    4c74:	add	r1, r9, #256	; 0x100
    4c78:	add	sl, r0, sl
    4c7c:	add	r7, r7, #2048	; 0x800
    4c80:	add	r0, r5, #2048	; 0x800
    4c84:	add	r2, r8, #256	; 0x100
    4c88:	cmp	r1, r3
    4c8c:	blt	4c1c <ReadDoubleData+0x1340>
    4c90:	ldr	r0, [sp, #4]
    4c94:	cmp	r1, r0
    4c98:	bge	4bdc <ReadDoubleData+0x1300>
    4c9c:	sub	r6, r0, r1
    4ca0:	ldr	r0, [sp, #20]
    4ca4:	ldr	r1, [sp, #16]
    4ca8:	add	r4, sp, #72	; 0x48
    4cac:	mov	r2, r6
    4cb0:	ldr	r3, [r0]
    4cb4:	mov	r0, r4
    4cb8:	bl	18b8 <fread@plt>
    4cbc:	add	sl, r0, sl
    4cc0:	cmp	r6, #1
    4cc4:	blt	4bdc <ReadDoubleData+0x1300>
    4cc8:	mov	r0, #0
    4ccc:	beq	4d10 <ReadDoubleData+0x1434>
    4cd0:	ldr	r0, [sp, #12]
    4cd4:	add	r2, sp, #28
    4cd8:	sub	r0, r0, r9
    4cdc:	bic	r1, r0, #1
    4ce0:	bic	r0, r6, #1
    4ce4:	ldr	r3, [r4], #4
    4ce8:	subs	r1, r1, #2
    4cec:	str	r3, [sp, #28]
    4cf0:	vld1.32	{d16[0]}, [r2 :32]
    4cf4:	vmovl.s16	q0, d16
    4cf8:	vcvt.f64.s32	d17, s1
    4cfc:	vcvt.f64.s32	d16, s0
    4d00:	vst1.64	{d16-d17}, [r5]!
    4d04:	bne	4ce4 <ReadDoubleData+0x1408>
    4d08:	cmp	r6, r0
    4d0c:	beq	4bdc <ReadDoubleData+0x1300>
    4d10:	ldr	r3, [sp]
    4d14:	add	r2, r0, r8
    4d18:	add	r1, sp, #72	; 0x48
    4d1c:	add	r1, r1, r0, lsl #1
    4d20:	add	r2, r3, r2, lsl #3
    4d24:	ldr	r3, [sp, #12]
    4d28:	sub	r3, r3, r9
    4d2c:	sub	r0, r3, r0
    4d30:	ldrsh	r3, [r1], #2
    4d34:	subs	r0, r0, #1
    4d38:	vmov	s0, r3
    4d3c:	vcvt.f64.s32	d16, s0
    4d40:	vstmia	r2!, {d16}
    4d44:	bne	4d30 <ReadDoubleData+0x1454>
    4d48:	b	4bdc <ReadDoubleData+0x1300>
    4d4c:	sub	r1, r6, #256	; 0x100
    4d50:	str	r6, [sp, #4]
    4d54:	add	r0, r9, #2048	; 0x800
    4d58:	mov	r2, #256	; 0x100
    4d5c:	add	r4, sp, #72	; 0x48
    4d60:	add	r6, sp, #44	; 0x2c
    4d64:	mov	r7, r9
    4d68:	mov	sl, #0
    4d6c:	str	r9, [sp]
    4d70:	str	r1, [sp, #12]
    4d74:	mov	r1, #0
    4d78:	mov	r5, r0
    4d7c:	ldr	r0, [sp, #20]
    4d80:	mov	r9, r1
    4d84:	ldr	r1, [sp, #16]
    4d88:	mov	r8, r2
    4d8c:	mov	r2, #256	; 0x100
    4d90:	ldr	r3, [r0]
    4d94:	mov	r0, r4
    4d98:	bl	18b8 <fread@plt>
    4d9c:	mov	r1, r7
    4da0:	mov	r2, #0
    4da4:	ldr	r3, [r4, r2]
    4da8:	add	r2, r2, #4
    4dac:	cmp	r2, #512	; 0x200
    4db0:	str	r3, [sp, #44]	; 0x2c
    4db4:	vld1.32	{d16[0]}, [r6 :32]
    4db8:	vmovl.u16	q0, d16
    4dbc:	vcvt.f64.u32	d17, s1
    4dc0:	vcvt.f64.u32	d16, s0
    4dc4:	vst1.64	{d16-d17}, [r1]!
    4dc8:	bne	4da4 <ReadDoubleData+0x14c8>
    4dcc:	ldr	r3, [sp, #12]
    4dd0:	add	r1, r9, #256	; 0x100
    4dd4:	add	sl, r0, sl
    4dd8:	add	r7, r7, #2048	; 0x800
    4ddc:	add	r0, r5, #2048	; 0x800
    4de0:	add	r2, r8, #256	; 0x100
    4de4:	cmp	r1, r3
    4de8:	blt	4d78 <ReadDoubleData+0x149c>
    4dec:	ldr	r0, [sp, #4]
    4df0:	cmp	r1, r0
    4df4:	bge	4bdc <ReadDoubleData+0x1300>
    4df8:	sub	r6, r0, r1
    4dfc:	ldr	r0, [sp, #20]
    4e00:	ldr	r1, [sp, #16]
    4e04:	add	r4, sp, #72	; 0x48
    4e08:	mov	r2, r6
    4e0c:	ldr	r3, [r0]
    4e10:	mov	r0, r4
    4e14:	bl	18b8 <fread@plt>
    4e18:	add	sl, r0, sl
    4e1c:	cmp	r6, #1
    4e20:	blt	4bdc <ReadDoubleData+0x1300>
    4e24:	mov	r0, #0
    4e28:	beq	4e6c <ReadDoubleData+0x1590>
    4e2c:	ldr	r0, [sp, #12]
    4e30:	add	r2, sp, #40	; 0x28
    4e34:	sub	r0, r0, r9
    4e38:	bic	r1, r0, #1
    4e3c:	bic	r0, r6, #1
    4e40:	ldr	r3, [r4], #4
    4e44:	subs	r1, r1, #2
    4e48:	str	r3, [sp, #40]	; 0x28
    4e4c:	vld1.32	{d16[0]}, [r2 :32]
    4e50:	vmovl.u16	q0, d16
    4e54:	vcvt.f64.u32	d17, s1
    4e58:	vcvt.f64.u32	d16, s0
    4e5c:	vst1.64	{d16-d17}, [r5]!
    4e60:	bne	4e40 <ReadDoubleData+0x1564>
    4e64:	cmp	r6, r0
    4e68:	beq	4bdc <ReadDoubleData+0x1300>
    4e6c:	ldr	r3, [sp]
    4e70:	add	r2, r0, r8
    4e74:	add	r1, sp, #72	; 0x48
    4e78:	add	r1, r1, r0, lsl #1
    4e7c:	add	r2, r3, r2, lsl #3
    4e80:	ldr	r3, [sp, #12]
    4e84:	sub	r3, r3, r9
    4e88:	sub	r0, r3, r0
    4e8c:	ldrh	r3, [r1], #2
    4e90:	subs	r0, r0, #1
    4e94:	vmov	s0, r3
    4e98:	vcvt.f64.u32	d16, s0
    4e9c:	vstmia	r2!, {d16}
    4ea0:	bne	4e8c <ReadDoubleData+0x15b0>
    4ea4:	b	4bdc <ReadDoubleData+0x1300>
    4ea8:	sub	r1, r6, #256	; 0x100
    4eac:	mov	r8, r6
    4eb0:	add	r0, r9, #2048	; 0x800
    4eb4:	mov	r2, #256	; 0x100
    4eb8:	add	r4, sp, #72	; 0x48
    4ebc:	mov	r6, r9
    4ec0:	mov	sl, #0
    4ec4:	str	r9, [sp]
    4ec8:	str	r1, [sp, #12]
    4ecc:	mov	r1, #0
    4ed0:	mov	r5, r0
    4ed4:	ldr	r0, [sp, #20]
    4ed8:	mov	r9, r1
    4edc:	ldr	r1, [sp, #16]
    4ee0:	mov	r7, r2
    4ee4:	mov	r2, #256	; 0x100
    4ee8:	ldr	r3, [r0]
    4eec:	mov	r0, r4
    4ef0:	bl	18b8 <fread@plt>
    4ef4:	mov	r1, r6
    4ef8:	mov	r2, #0
    4efc:	add	r3, r4, r2
    4f00:	add	r2, r2, #8
    4f04:	vldr	d0, [r3]
    4f08:	cmp	r2, #1024	; 0x400
    4f0c:	vcvt.f64.s32	d17, s1
    4f10:	vcvt.f64.s32	d16, s0
    4f14:	vst1.64	{d16-d17}, [r1]!
    4f18:	bne	4efc <ReadDoubleData+0x1620>
    4f1c:	ldr	r3, [sp, #12]
    4f20:	add	r1, r9, #256	; 0x100
    4f24:	add	sl, r0, sl
    4f28:	add	r6, r6, #2048	; 0x800
    4f2c:	add	r0, r5, #2048	; 0x800
    4f30:	add	r2, r7, #256	; 0x100
    4f34:	cmp	r1, r3
    4f38:	blt	4ed0 <ReadDoubleData+0x15f4>
    4f3c:	cmp	r1, r8
    4f40:	bge	4bdc <ReadDoubleData+0x1300>
    4f44:	ldr	r0, [sp, #20]
    4f48:	sub	r8, r8, r1
    4f4c:	ldr	r1, [sp, #16]
    4f50:	add	r4, sp, #72	; 0x48
    4f54:	mov	r2, r8
    4f58:	ldr	r3, [r0]
    4f5c:	mov	r0, r4
    4f60:	bl	18b8 <fread@plt>
    4f64:	add	sl, r0, sl
    4f68:	cmp	r8, #1
    4f6c:	blt	4bdc <ReadDoubleData+0x1300>
    4f70:	mov	r0, #0
    4f74:	beq	4fa8 <ReadDoubleData+0x16cc>
    4f78:	ldr	r0, [sp, #12]
    4f7c:	sub	r0, r0, r9
    4f80:	bic	r1, r0, #1
    4f84:	bic	r0, r8, #1
    4f88:	vld1.32	{d0}, [r4]!
    4f8c:	subs	r1, r1, #2
    4f90:	vcvt.f64.s32	d17, s1
    4f94:	vcvt.f64.s32	d16, s0
    4f98:	vst1.64	{d16-d17}, [r5]!
    4f9c:	bne	4f88 <ReadDoubleData+0x16ac>
    4fa0:	cmp	r8, r0
    4fa4:	beq	4bdc <ReadDoubleData+0x1300>
    4fa8:	ldr	r3, [sp]
    4fac:	add	r2, r0, r7
    4fb0:	add	r1, sp, #72	; 0x48
    4fb4:	add	r1, r1, r0, lsl #2
    4fb8:	add	r2, r3, r2, lsl #3
    4fbc:	ldr	r3, [sp, #12]
    4fc0:	sub	r3, r3, r9
    4fc4:	sub	r0, r3, r0
    4fc8:	ldr	r3, [r1], #4
    4fcc:	subs	r0, r0, #1
    4fd0:	vmov	s0, r3
    4fd4:	vcvt.f64.s32	d16, s0
    4fd8:	vstmia	r2!, {d16}
    4fdc:	bne	4fc8 <ReadDoubleData+0x16ec>
    4fe0:	b	4bdc <ReadDoubleData+0x1300>
    4fe4:	sub	r1, r6, #256	; 0x100
    4fe8:	mov	r8, r6
    4fec:	add	r0, r9, #2048	; 0x800
    4ff0:	mov	r2, #256	; 0x100
    4ff4:	add	r4, sp, #72	; 0x48
    4ff8:	mov	r6, r9
    4ffc:	mov	sl, #0
    5000:	str	r9, [sp]
    5004:	str	r1, [sp, #12]
    5008:	mov	r1, #0
    500c:	mov	r5, r0
    5010:	ldr	r0, [sp, #20]
    5014:	mov	r9, r1
    5018:	ldr	r1, [sp, #16]
    501c:	mov	r7, r2
    5020:	mov	r2, #256	; 0x100
    5024:	ldr	r3, [r0]
    5028:	mov	r0, r4
    502c:	bl	18b8 <fread@plt>
    5030:	mov	r1, r6
    5034:	mov	r2, #0
    5038:	add	r3, r4, r2
    503c:	add	r2, r2, #8
    5040:	vldr	d0, [r3]
    5044:	cmp	r2, #1024	; 0x400
    5048:	vcvt.f64.u32	d17, s1
    504c:	vcvt.f64.u32	d16, s0
    5050:	vst1.64	{d16-d17}, [r1]!
    5054:	bne	5038 <ReadDoubleData+0x175c>
    5058:	ldr	r3, [sp, #12]
    505c:	add	r1, r9, #256	; 0x100
    5060:	add	sl, r0, sl
    5064:	add	r6, r6, #2048	; 0x800
    5068:	add	r0, r5, #2048	; 0x800
    506c:	add	r2, r7, #256	; 0x100
    5070:	cmp	r1, r3
    5074:	blt	500c <ReadDoubleData+0x1730>
    5078:	cmp	r1, r8
    507c:	bge	4bdc <ReadDoubleData+0x1300>
    5080:	ldr	r0, [sp, #20]
    5084:	sub	r8, r8, r1
    5088:	ldr	r1, [sp, #16]
    508c:	add	r4, sp, #72	; 0x48
    5090:	mov	r2, r8
    5094:	ldr	r3, [r0]
    5098:	mov	r0, r4
    509c:	bl	18b8 <fread@plt>
    50a0:	add	sl, r0, sl
    50a4:	cmp	r8, #1
    50a8:	blt	4bdc <ReadDoubleData+0x1300>
    50ac:	mov	r0, #0
    50b0:	beq	50e4 <ReadDoubleData+0x1808>
    50b4:	ldr	r0, [sp, #12]
    50b8:	sub	r0, r0, r9
    50bc:	bic	r1, r0, #1
    50c0:	bic	r0, r8, #1
    50c4:	vld1.32	{d0}, [r4]!
    50c8:	subs	r1, r1, #2
    50cc:	vcvt.f64.u32	d17, s1
    50d0:	vcvt.f64.u32	d16, s0
    50d4:	vst1.64	{d16-d17}, [r5]!
    50d8:	bne	50c4 <ReadDoubleData+0x17e8>
    50dc:	cmp	r8, r0
    50e0:	beq	4bdc <ReadDoubleData+0x1300>
    50e4:	ldr	r3, [sp]
    50e8:	add	r2, r0, r7
    50ec:	add	r1, sp, #72	; 0x48
    50f0:	add	r1, r1, r0, lsl #2
    50f4:	add	r2, r3, r2, lsl #3
    50f8:	ldr	r3, [sp, #12]
    50fc:	sub	r3, r3, r9
    5100:	sub	r0, r3, r0
    5104:	ldr	r3, [r1], #4
    5108:	subs	r0, r0, #1
    510c:	vmov	s0, r3
    5110:	vcvt.f64.u32	d16, s0
    5114:	vstmia	r2!, {d16}
    5118:	bne	5104 <ReadDoubleData+0x1828>
    511c:	b	4bdc <ReadDoubleData+0x1300>
    5120:	sub	r1, r6, #256	; 0x100
    5124:	mov	r8, r6
    5128:	add	r0, r9, #2048	; 0x800
    512c:	mov	r2, #256	; 0x100
    5130:	add	r4, sp, #72	; 0x48
    5134:	mov	r6, r9
    5138:	mov	sl, #0
    513c:	str	r9, [sp]
    5140:	str	r1, [sp, #12]
    5144:	mov	r1, #0
    5148:	mov	r5, r0
    514c:	ldr	r0, [sp, #20]
    5150:	mov	r9, r1
    5154:	ldr	r1, [sp, #16]
    5158:	mov	r7, r2
    515c:	mov	r2, #256	; 0x100
    5160:	ldr	r3, [r0]
    5164:	mov	r0, r4
    5168:	bl	18b8 <fread@plt>
    516c:	mov	r1, r6
    5170:	mov	r2, #0
    5174:	add	r3, r4, r2
    5178:	add	r2, r2, #8
    517c:	vldr	d0, [r3]
    5180:	cmp	r2, #1024	; 0x400
    5184:	vcvt.f64.f32	d17, s1
    5188:	vcvt.f64.f32	d16, s0
    518c:	vst1.64	{d16-d17}, [r1]!
    5190:	bne	5174 <ReadDoubleData+0x1898>
    5194:	ldr	r3, [sp, #12]
    5198:	add	r1, r9, #256	; 0x100
    519c:	add	sl, r0, sl
    51a0:	add	r6, r6, #2048	; 0x800
    51a4:	add	r0, r5, #2048	; 0x800
    51a8:	add	r2, r7, #256	; 0x100
    51ac:	cmp	r1, r3
    51b0:	blt	5148 <ReadDoubleData+0x186c>
    51b4:	cmp	r1, r8
    51b8:	bge	4bdc <ReadDoubleData+0x1300>
    51bc:	ldr	r0, [sp, #20]
    51c0:	sub	r8, r8, r1
    51c4:	ldr	r1, [sp, #16]
    51c8:	add	r4, sp, #72	; 0x48
    51cc:	mov	r2, r8
    51d0:	ldr	r3, [r0]
    51d4:	mov	r0, r4
    51d8:	bl	18b8 <fread@plt>
    51dc:	add	sl, r0, sl
    51e0:	cmp	r8, #1
    51e4:	blt	4bdc <ReadDoubleData+0x1300>
    51e8:	mov	r0, #0
    51ec:	beq	5220 <ReadDoubleData+0x1944>
    51f0:	ldr	r0, [sp, #12]
    51f4:	sub	r0, r0, r9
    51f8:	bic	r1, r0, #1
    51fc:	bic	r0, r8, #1
    5200:	vld1.32	{d0}, [r4]!
    5204:	subs	r1, r1, #2
    5208:	vcvt.f64.f32	d17, s1
    520c:	vcvt.f64.f32	d16, s0
    5210:	vst1.64	{d16-d17}, [r5]!
    5214:	bne	5200 <ReadDoubleData+0x1924>
    5218:	cmp	r8, r0
    521c:	beq	4bdc <ReadDoubleData+0x1300>
    5220:	ldr	r3, [sp]
    5224:	add	r2, r0, r7
    5228:	add	r1, sp, #72	; 0x48
    522c:	add	r1, r1, r0, lsl #2
    5230:	add	r2, r3, r2, lsl #3
    5234:	ldr	r3, [sp, #12]
    5238:	sub	r3, r3, r9
    523c:	sub	r0, r3, r0
    5240:	vldr	s0, [r1]
    5244:	subs	r0, r0, #1
    5248:	add	r1, r1, #4
    524c:	vcvt.f64.f32	d16, s0
    5250:	vstmia	r2!, {d16}
    5254:	bne	5240 <ReadDoubleData+0x1964>
    5258:	b	4bdc <ReadDoubleData+0x1300>
    525c:	sub	r1, r6, #256	; 0x100
    5260:	str	r6, [sp, #4]
    5264:	add	r0, r9, #2048	; 0x800
    5268:	mov	r2, #256	; 0x100
    526c:	add	r4, sp, #72	; 0x48
    5270:	mov	r6, r9
    5274:	mov	sl, #0
    5278:	str	r9, [sp]
    527c:	str	r1, [sp, #8]
    5280:	mov	r1, #0
    5284:	mov	r9, r0
    5288:	ldr	r0, [sp, #20]
    528c:	mov	r8, r1
    5290:	ldr	r1, [sp, #16]
    5294:	str	r2, [sp, #12]
    5298:	mov	r2, #256	; 0x100
    529c:	ldr	r3, [r0]
    52a0:	mov	r0, r4
    52a4:	bl	18b8 <fread@plt>
    52a8:	mov	r5, r0
    52ac:	mov	r7, #0
    52b0:	add	r0, r4, r7
    52b4:	vld1.64	{d8-d9}, [r0]
    52b8:	vmov.32	r0, d9[0]
    52bc:	vmov.32	r1, d9[1]
    52c0:	bl	5f094 <__aeabi_l2d>
    52c4:	vmov.32	r2, d8[0]
    52c8:	vmov.32	r3, d8[1]
    52cc:	vmov	d9, r0, r1
    52d0:	mov	r0, r2
    52d4:	mov	r1, r3
    52d8:	bl	5f094 <__aeabi_l2d>
    52dc:	vmov	d8, r0, r1
    52e0:	add	r0, r6, r7
    52e4:	add	r7, r7, #16
    52e8:	cmp	r7, #2048	; 0x800
    52ec:	vst1.64	{d8-d9}, [r0]
    52f0:	bne	52b0 <ReadDoubleData+0x19d4>
    52f4:	ldr	r1, [sp, #12]
    52f8:	ldr	r3, [sp, #8]
    52fc:	add	sl, r5, sl
    5300:	add	r6, r6, #2048	; 0x800
    5304:	add	r0, r9, #2048	; 0x800
    5308:	add	r2, r1, #256	; 0x100
    530c:	add	r1, r8, #256	; 0x100
    5310:	cmp	r1, r3
    5314:	blt	5284 <ReadDoubleData+0x19a8>
    5318:	mov	r7, r8
    531c:	ldr	r8, [sp, #4]
    5320:	cmp	r1, r8
    5324:	bge	4bdc <ReadDoubleData+0x1300>
    5328:	ldr	r0, [sp, #20]
    532c:	sub	r8, r8, r1
    5330:	ldr	r1, [sp, #16]
    5334:	add	r4, sp, #72	; 0x48
    5338:	mov	r2, r8
    533c:	ldr	r3, [r0]
    5340:	mov	r0, r4
    5344:	bl	18b8 <fread@plt>
    5348:	add	sl, r0, sl
    534c:	cmp	r8, #1
    5350:	blt	4bdc <ReadDoubleData+0x1300>
    5354:	mov	r5, #0
    5358:	beq	53ac <ReadDoubleData+0x1ad0>
    535c:	ldr	r0, [sp, #8]
    5360:	bic	r5, r8, #1
    5364:	sub	r0, r0, r7
    5368:	bic	r6, r0, #1
    536c:	vld1.64	{d8-d9}, [r4]!
    5370:	vmov.32	r0, d9[0]
    5374:	vmov.32	r1, d9[1]
    5378:	bl	5f094 <__aeabi_l2d>
    537c:	vmov.32	r2, d8[0]
    5380:	vmov.32	r3, d8[1]
    5384:	vmov	d9, r0, r1
    5388:	mov	r0, r2
    538c:	mov	r1, r3
    5390:	bl	5f094 <__aeabi_l2d>
    5394:	vmov	d8, r0, r1
    5398:	subs	r6, r6, #2
    539c:	vst1.64	{d8-d9}, [r9]!
    53a0:	bne	536c <ReadDoubleData+0x1a90>
    53a4:	cmp	r8, r5
    53a8:	beq	4bdc <ReadDoubleData+0x1300>
    53ac:	add	r0, sp, #72	; 0x48
    53b0:	ldr	r1, [sp]
    53b4:	add	r4, r0, r5, lsl #3
    53b8:	ldr	r0, [sp, #12]
    53bc:	add	r0, r5, r0
    53c0:	add	r6, r1, r0, lsl #3
    53c4:	ldr	r0, [sp, #8]
    53c8:	sub	r0, r0, r7
    53cc:	sub	r5, r0, r5
    53d0:	ldrd	r0, [r4]
    53d4:	bl	5f094 <__aeabi_l2d>
    53d8:	strd	r0, [r6]
    53dc:	add	r6, r6, #8
    53e0:	subs	r5, r5, #1
    53e4:	add	r4, r4, #8
    53e8:	bne	53d0 <ReadDoubleData+0x1af4>
    53ec:	b	4bdc <ReadDoubleData+0x1300>
    53f0:	sub	r1, r6, #256	; 0x100
    53f4:	str	r6, [sp, #4]
    53f8:	add	r0, r9, #2048	; 0x800
    53fc:	mov	r2, #256	; 0x100
    5400:	add	r4, sp, #72	; 0x48
    5404:	mov	r6, r9
    5408:	mov	sl, #0
    540c:	str	r9, [sp]
    5410:	str	r1, [sp, #8]
    5414:	mov	r1, #0
    5418:	mov	r9, r0
    541c:	ldr	r0, [sp, #20]
    5420:	mov	r8, r1
    5424:	ldr	r1, [sp, #16]
    5428:	str	r2, [sp, #12]
    542c:	mov	r2, #256	; 0x100
    5430:	ldr	r3, [r0]
    5434:	mov	r0, r4
    5438:	bl	18b8 <fread@plt>
    543c:	mov	r5, r0
    5440:	mov	r7, #0
    5444:	add	r0, r4, r7
    5448:	vld1.64	{d8-d9}, [r0]
    544c:	vmov.32	r0, d9[0]
    5450:	vmov.32	r1, d9[1]
    5454:	bl	5f080 <__aeabi_ul2d>
    5458:	vmov.32	r2, d8[0]
    545c:	vmov.32	r3, d8[1]
    5460:	vmov	d9, r0, r1
    5464:	mov	r0, r2
    5468:	mov	r1, r3
    546c:	bl	5f080 <__aeabi_ul2d>
    5470:	vmov	d8, r0, r1
    5474:	add	r0, r6, r7
    5478:	add	r7, r7, #16
    547c:	cmp	r7, #2048	; 0x800
    5480:	vst1.64	{d8-d9}, [r0]
    5484:	bne	5444 <ReadDoubleData+0x1b68>
    5488:	ldr	r1, [sp, #12]
    548c:	ldr	r3, [sp, #8]
    5490:	add	sl, r5, sl
    5494:	add	r6, r6, #2048	; 0x800
    5498:	add	r0, r9, #2048	; 0x800
    549c:	add	r2, r1, #256	; 0x100
    54a0:	add	r1, r8, #256	; 0x100
    54a4:	cmp	r1, r3
    54a8:	blt	5418 <ReadDoubleData+0x1b3c>
    54ac:	mov	r7, r8
    54b0:	ldr	r8, [sp, #4]
    54b4:	cmp	r1, r8
    54b8:	bge	4bdc <ReadDoubleData+0x1300>
    54bc:	ldr	r0, [sp, #20]
    54c0:	sub	r8, r8, r1
    54c4:	ldr	r1, [sp, #16]
    54c8:	add	r4, sp, #72	; 0x48
    54cc:	mov	r2, r8
    54d0:	ldr	r3, [r0]
    54d4:	mov	r0, r4
    54d8:	bl	18b8 <fread@plt>
    54dc:	add	sl, r0, sl
    54e0:	cmp	r8, #1
    54e4:	blt	4bdc <ReadDoubleData+0x1300>
    54e8:	mov	r5, #0
    54ec:	beq	5540 <ReadDoubleData+0x1c64>
    54f0:	ldr	r0, [sp, #8]
    54f4:	bic	r5, r8, #1
    54f8:	sub	r0, r0, r7
    54fc:	bic	r6, r0, #1
    5500:	vld1.64	{d8-d9}, [r4]!
    5504:	vmov.32	r0, d9[0]
    5508:	vmov.32	r1, d9[1]
    550c:	bl	5f080 <__aeabi_ul2d>
    5510:	vmov.32	r2, d8[0]
    5514:	vmov.32	r3, d8[1]
    5518:	vmov	d9, r0, r1
    551c:	mov	r0, r2
    5520:	mov	r1, r3
    5524:	bl	5f080 <__aeabi_ul2d>
    5528:	vmov	d8, r0, r1
    552c:	subs	r6, r6, #2
    5530:	vst1.64	{d8-d9}, [r9]!
    5534:	bne	5500 <ReadDoubleData+0x1c24>
    5538:	cmp	r8, r5
    553c:	beq	4bdc <ReadDoubleData+0x1300>
    5540:	add	r0, sp, #72	; 0x48
    5544:	ldr	r1, [sp]
    5548:	add	r4, r0, r5, lsl #3
    554c:	ldr	r0, [sp, #12]
    5550:	add	r0, r5, r0
    5554:	add	r6, r1, r0, lsl #3
    5558:	ldr	r0, [sp, #8]
    555c:	sub	r0, r0, r7
    5560:	sub	r5, r0, r5
    5564:	ldrd	r0, [r4]
    5568:	bl	5f080 <__aeabi_ul2d>
    556c:	strd	r0, [r6]
    5570:	add	r6, r6, #8
    5574:	subs	r5, r5, #1
    5578:	add	r4, r4, #8
    557c:	bne	5564 <ReadDoubleData+0x1c88>
    5580:	b	4bdc <ReadDoubleData+0x1300>

00005584 <ReadCompressedDoubleData>:
    5584:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5588:	add	fp, sp, #28
    558c:	sub	sp, sp, #4
    5590:	vpush	{d8-d9}
    5594:	sub	sp, sp, #1056	; 0x420
    5598:	str	r0, [sp, #20]
    559c:	mov	r0, r3
    55a0:	mov	r5, r3
    55a4:	mov	r9, r2
    55a8:	str	r1, [sp, #16]
    55ac:	bl	1924 <Mat_SizeOf@plt>
    55b0:	mov	r2, r0
    55b4:	sub	r0, r5, #1
    55b8:	mov	sl, #0
    55bc:	cmp	r0, #12
    55c0:	bhi	6c78 <ReadCompressedDoubleData+0x16f4>
    55c4:	add	r1, pc, #8
    55c8:	ldr	r6, [fp, #8]
    55cc:	ldr	r0, [r1, r0, lsl #2]
    55d0:	add	pc, r1, r0
    55d4:	.word	0x00000034
    55d8:	.word	0x000000d0
    55dc:	.word	0x0000016c
    55e0:	.word	0x000001d0
    55e4:	.word	0x00000234
    55e8:	.word	0x00000298
    55ec:	.word	0x000002fc
    55f0:	.word	0x000016a4
    55f4:	.word	0x0000035c
    55f8:	.word	0x000016a4
    55fc:	.word	0x000016a4
    5600:	.word	0x000003a0
    5604:	.word	0x00000400
    5608:	cmp	r6, #1024	; 0x400
    560c:	bgt	5a34 <ReadCompressedDoubleData+0x4b0>
    5610:	ldr	r0, [sp, #20]
    5614:	ldr	r1, [sp, #16]
    5618:	mul	sl, r2, r6
    561c:	add	r5, sp, #24
    5620:	mov	r2, r5
    5624:	mov	r3, sl
    5628:	bl	32fc <InflateData>
    562c:	cmp	r6, #1
    5630:	blt	6c78 <ReadCompressedDoubleData+0x16f4>
    5634:	mov	r0, #0
    5638:	beq	5674 <ReadCompressedDoubleData+0xf0>
    563c:	bic	r0, r6, #1
    5640:	mov	r2, r9
    5644:	mov	r1, r0
    5648:	vld1.16	{d16[0]}, [r5 :16]
    564c:	subs	r1, r1, #2
    5650:	add	r5, r5, #2
    5654:	vmovl.s8	q8, d16
    5658:	vmovl.s16	q0, d16
    565c:	vcvt.f64.s32	d17, s1
    5660:	vcvt.f64.s32	d16, s0
    5664:	vst1.64	{d16-d17}, [r2]!
    5668:	bne	5648 <ReadCompressedDoubleData+0xc4>
    566c:	cmp	r0, r6
    5670:	beq	6c78 <ReadCompressedDoubleData+0x16f4>
    5674:	add	r3, sp, #24
    5678:	sub	r1, r6, r0
    567c:	add	r2, r9, r0, lsl #3
    5680:	add	r0, r3, r0
    5684:	ldrsb	r3, [r0], #1
    5688:	subs	r1, r1, #1
    568c:	vmov	s0, r3
    5690:	vcvt.f64.s32	d16, s0
    5694:	vstr	d16, [r2]
    5698:	add	r2, r2, #8
    569c:	bne	5684 <ReadCompressedDoubleData+0x100>
    56a0:	b	6c78 <ReadCompressedDoubleData+0x16f4>
    56a4:	cmp	r6, #1024	; 0x400
    56a8:	bgt	5b70 <ReadCompressedDoubleData+0x5ec>
    56ac:	ldr	r0, [sp, #20]
    56b0:	ldr	r1, [sp, #16]
    56b4:	mul	sl, r2, r6
    56b8:	add	r5, sp, #24
    56bc:	mov	r2, r5
    56c0:	mov	r3, sl
    56c4:	bl	32fc <InflateData>
    56c8:	cmp	r6, #1
    56cc:	blt	6c78 <ReadCompressedDoubleData+0x16f4>
    56d0:	mov	r0, #0
    56d4:	beq	5710 <ReadCompressedDoubleData+0x18c>
    56d8:	bic	r0, r6, #1
    56dc:	mov	r2, r9
    56e0:	mov	r1, r0
    56e4:	vld1.16	{d16[0]}, [r5 :16]
    56e8:	subs	r1, r1, #2
    56ec:	add	r5, r5, #2
    56f0:	vmovl.u8	q8, d16
    56f4:	vmovl.u16	q0, d16
    56f8:	vcvt.f64.u32	d17, s1
    56fc:	vcvt.f64.u32	d16, s0
    5700:	vst1.64	{d16-d17}, [r2]!
    5704:	bne	56e4 <ReadCompressedDoubleData+0x160>
    5708:	cmp	r0, r6
    570c:	beq	6c78 <ReadCompressedDoubleData+0x16f4>
    5710:	add	r3, sp, #24
    5714:	sub	r1, r6, r0
    5718:	add	r2, r9, r0, lsl #3
    571c:	add	r0, r3, r0
    5720:	ldrb	r3, [r0], #1
    5724:	subs	r1, r1, #1
    5728:	vmov	s0, r3
    572c:	vcvt.f64.u32	d16, s0
    5730:	vstr	d16, [r2]
    5734:	add	r2, r2, #8
    5738:	bne	5720 <ReadCompressedDoubleData+0x19c>
    573c:	b	6c78 <ReadCompressedDoubleData+0x16f4>
    5740:	ldr	r0, [sp, #20]
    5744:	ldr	r0, [r0, #20]
    5748:	cmp	r0, #0
    574c:	beq	5cac <ReadCompressedDoubleData+0x728>
    5750:	cmp	r6, #512	; 0x200
    5754:	bgt	60ec <ReadCompressedDoubleData+0xb68>
    5758:	ldr	r0, [sp, #20]
    575c:	ldr	r1, [sp, #16]
    5760:	mul	sl, r2, r6
    5764:	add	r5, sp, #24
    5768:	mov	r2, r5
    576c:	mov	r3, sl
    5770:	bl	32fc <InflateData>
    5774:	cmp	r6, #1
    5778:	blt	6c78 <ReadCompressedDoubleData+0x16f4>
    577c:	mov	r0, r5
    5780:	bl	1c18 <Mat_int16Swap>
    5784:	vmov	s0, r0
    5788:	subs	r6, r6, #1
    578c:	add	r5, r5, #2
    5790:	vcvt.f64.s32	d16, s0
    5794:	vstr	d16, [r9]
    5798:	add	r9, r9, #8
    579c:	bne	577c <ReadCompressedDoubleData+0x1f8>
    57a0:	b	6c78 <ReadCompressedDoubleData+0x16f4>
    57a4:	ldr	r0, [sp, #20]
    57a8:	ldr	r0, [r0, #20]
    57ac:	cmp	r0, #0
    57b0:	beq	5d44 <ReadCompressedDoubleData+0x7c0>
    57b4:	cmp	r6, #512	; 0x200
    57b8:	bgt	61c0 <ReadCompressedDoubleData+0xc3c>
    57bc:	ldr	r0, [sp, #20]
    57c0:	ldr	r1, [sp, #16]
    57c4:	mul	sl, r2, r6
    57c8:	add	r5, sp, #24
    57cc:	mov	r2, r5
    57d0:	mov	r3, sl
    57d4:	bl	32fc <InflateData>
    57d8:	cmp	r6, #1
    57dc:	blt	6c78 <ReadCompressedDoubleData+0x16f4>
    57e0:	mov	r0, r5
    57e4:	bl	1c2c <Mat_uint16Swap>
    57e8:	vmov	s0, r0
    57ec:	subs	r6, r6, #1
    57f0:	add	r5, r5, #2
    57f4:	vcvt.f64.u32	d16, s0
    57f8:	vstr	d16, [r9]
    57fc:	add	r9, r9, #8
    5800:	bne	57e0 <ReadCompressedDoubleData+0x25c>
    5804:	b	6c78 <ReadCompressedDoubleData+0x16f4>
    5808:	ldr	r0, [sp, #20]
    580c:	ldr	r0, [r0, #20]
    5810:	cmp	r0, #0
    5814:	beq	5ddc <ReadCompressedDoubleData+0x858>
    5818:	cmp	r6, #256	; 0x100
    581c:	bgt	6294 <ReadCompressedDoubleData+0xd10>
    5820:	ldr	r0, [sp, #20]
    5824:	ldr	r1, [sp, #16]
    5828:	mul	sl, r2, r6
    582c:	add	r5, sp, #24
    5830:	mov	r2, r5
    5834:	mov	r3, sl
    5838:	bl	32fc <InflateData>
    583c:	cmp	r6, #1
    5840:	blt	6c78 <ReadCompressedDoubleData+0x16f4>
    5844:	mov	r0, r5
    5848:	bl	1bf0 <Mat_int32Swap>
    584c:	vmov	s0, r0
    5850:	subs	r6, r6, #1
    5854:	add	r5, r5, #4
    5858:	vcvt.f64.s32	d16, s0
    585c:	vstr	d16, [r9]
    5860:	add	r9, r9, #8
    5864:	bne	5844 <ReadCompressedDoubleData+0x2c0>
    5868:	b	6c78 <ReadCompressedDoubleData+0x16f4>
    586c:	ldr	r0, [sp, #20]
    5870:	ldr	r0, [r0, #20]
    5874:	cmp	r0, #0
    5878:	beq	5e6c <ReadCompressedDoubleData+0x8e8>
    587c:	cmp	r6, #256	; 0x100
    5880:	bgt	6368 <ReadCompressedDoubleData+0xde4>
    5884:	ldr	r0, [sp, #20]
    5888:	ldr	r1, [sp, #16]
    588c:	mul	sl, r2, r6
    5890:	add	r5, sp, #24
    5894:	mov	r2, r5
    5898:	mov	r3, sl
    589c:	bl	32fc <InflateData>
    58a0:	cmp	r6, #1
    58a4:	blt	6c78 <ReadCompressedDoubleData+0x16f4>
    58a8:	mov	r0, r5
    58ac:	bl	1c04 <Mat_uint32Swap>
    58b0:	vmov	s0, r0
    58b4:	subs	r6, r6, #1
    58b8:	add	r5, r5, #4
    58bc:	vcvt.f64.u32	d16, s0
    58c0:	vstr	d16, [r9]
    58c4:	add	r9, r9, #8
    58c8:	bne	58a8 <ReadCompressedDoubleData+0x324>
    58cc:	b	6c78 <ReadCompressedDoubleData+0x16f4>
    58d0:	ldr	r0, [sp, #20]
    58d4:	ldr	r0, [r0, #20]
    58d8:	cmp	r0, #0
    58dc:	beq	5efc <ReadCompressedDoubleData+0x978>
    58e0:	cmp	r6, #256	; 0x100
    58e4:	bgt	643c <ReadCompressedDoubleData+0xeb8>
    58e8:	ldr	r0, [sp, #20]
    58ec:	ldr	r1, [sp, #16]
    58f0:	mul	sl, r2, r6
    58f4:	add	r5, sp, #24
    58f8:	mov	r2, r5
    58fc:	mov	r3, sl
    5900:	bl	32fc <InflateData>
    5904:	cmp	r6, #1
    5908:	blt	6c78 <ReadCompressedDoubleData+0x16f4>
    590c:	mov	r0, r5
    5910:	bl	1c44 <Mat_floatSwap>
    5914:	vcvt.f64.f32	d16, s0
    5918:	subs	r6, r6, #1
    591c:	add	r5, r5, #4
    5920:	vstr	d16, [r9]
    5924:	add	r9, r9, #8
    5928:	bne	590c <ReadCompressedDoubleData+0x388>
    592c:	b	6c78 <ReadCompressedDoubleData+0x16f4>
    5930:	ldr	r0, [sp, #20]
    5934:	ldr	r1, [sp, #16]
    5938:	mul	sl, r2, r6
    593c:	mov	r2, r9
    5940:	mov	r3, sl
    5944:	ldr	r4, [r0, #20]
    5948:	bl	32fc <InflateData>
    594c:	cmp	r4, #0
    5950:	beq	6c78 <ReadCompressedDoubleData+0x16f4>
    5954:	cmp	r6, #1
    5958:	blt	6c78 <ReadCompressedDoubleData+0x16f4>
    595c:	mov	r0, r9
    5960:	bl	1c88 <Mat_doubleSwap>
    5964:	subs	r6, r6, #1
    5968:	add	r9, r9, #8
    596c:	bne	595c <ReadCompressedDoubleData+0x3d8>
    5970:	b	6c78 <ReadCompressedDoubleData+0x16f4>
    5974:	ldr	r0, [sp, #20]
    5978:	ldr	r0, [r0, #20]
    597c:	cmp	r0, #0
    5980:	beq	5f8c <ReadCompressedDoubleData+0xa08>
    5984:	cmp	r6, #128	; 0x80
    5988:	bgt	6508 <ReadCompressedDoubleData+0xf84>
    598c:	ldr	r0, [sp, #20]
    5990:	ldr	r1, [sp, #16]
    5994:	mul	sl, r2, r6
    5998:	add	r5, sp, #24
    599c:	mov	r2, r5
    59a0:	mov	r3, sl
    59a4:	bl	32fc <InflateData>
    59a8:	cmp	r6, #1
    59ac:	blt	6c78 <ReadCompressedDoubleData+0x16f4>
    59b0:	mov	r0, r5
    59b4:	bl	1b84 <Mat_int64Swap>
    59b8:	bl	5f094 <__aeabi_l2d>
    59bc:	strd	r0, [r9]
    59c0:	add	r5, r5, #8
    59c4:	subs	r6, r6, #1
    59c8:	add	r9, r9, #8
    59cc:	bne	59b0 <ReadCompressedDoubleData+0x42c>
    59d0:	b	6c78 <ReadCompressedDoubleData+0x16f4>
    59d4:	ldr	r0, [sp, #20]
    59d8:	ldr	r0, [r0, #20]
    59dc:	cmp	r0, #0
    59e0:	beq	603c <ReadCompressedDoubleData+0xab8>
    59e4:	cmp	r6, #128	; 0x80
    59e8:	bgt	65d0 <ReadCompressedDoubleData+0x104c>
    59ec:	ldr	r0, [sp, #20]
    59f0:	ldr	r1, [sp, #16]
    59f4:	mul	sl, r2, r6
    59f8:	add	r5, sp, #24
    59fc:	mov	r2, r5
    5a00:	mov	r3, sl
    5a04:	bl	32fc <InflateData>
    5a08:	cmp	r6, #1
    5a0c:	blt	6c78 <ReadCompressedDoubleData+0x16f4>
    5a10:	mov	r0, r5
    5a14:	bl	1bd4 <Mat_uint64Swap>
    5a18:	bl	5f080 <__aeabi_ul2d>
    5a1c:	strd	r0, [r9]
    5a20:	add	r5, r5, #8
    5a24:	subs	r6, r6, #1
    5a28:	add	r9, r9, #8
    5a2c:	bne	5a10 <ReadCompressedDoubleData+0x48c>
    5a30:	b	6c78 <ReadCompressedDoubleData+0x16f4>
    5a34:	sub	r1, r6, #1024	; 0x400
    5a38:	add	r0, r9, #8192	; 0x2000
    5a3c:	str	r2, [sp, #8]
    5a40:	lsl	r5, r2, #10
    5a44:	mov	r2, #1024	; 0x400
    5a48:	add	r6, sp, #24
    5a4c:	mov	r4, r9
    5a50:	str	r1, [sp, #12]
    5a54:	mov	r1, #0
    5a58:	mov	r8, r1
    5a5c:	mov	r7, r0
    5a60:	ldr	r0, [sp, #20]
    5a64:	ldr	r1, [sp, #16]
    5a68:	mov	sl, r2
    5a6c:	mov	r2, r6
    5a70:	mov	r3, r5
    5a74:	bl	32fc <InflateData>
    5a78:	mov	r0, r4
    5a7c:	mov	r1, #0
    5a80:	add	r2, r6, r1
    5a84:	add	r1, r1, #2
    5a88:	vld1.16	{d16[0]}, [r2 :16]
    5a8c:	cmp	r1, #1024	; 0x400
    5a90:	vmovl.s8	q8, d16
    5a94:	vmovl.s16	q0, d16
    5a98:	vcvt.f64.s32	d17, s1
    5a9c:	vcvt.f64.s32	d16, s0
    5aa0:	vst1.64	{d16-d17}, [r0]!
    5aa4:	bne	5a80 <ReadCompressedDoubleData+0x4fc>
    5aa8:	ldr	r3, [sp, #12]
    5aac:	add	r1, r8, #1024	; 0x400
    5ab0:	add	r4, r4, #8192	; 0x2000
    5ab4:	add	r0, r7, #8192	; 0x2000
    5ab8:	add	r2, sl, #1024	; 0x400
    5abc:	cmp	r1, r3
    5ac0:	blt	5a58 <ReadCompressedDoubleData+0x4d4>
    5ac4:	ldr	r0, [fp, #8]
    5ac8:	add	r5, sp, #24
    5acc:	mov	r2, r5
    5ad0:	sub	r4, r0, r1
    5ad4:	ldr	r0, [sp, #8]
    5ad8:	ldr	r1, [sp, #16]
    5adc:	mul	r3, r4, r0
    5ae0:	ldr	r0, [sp, #20]
    5ae4:	mov	r6, r3
    5ae8:	bl	32fc <InflateData>
    5aec:	cmp	r4, #1
    5af0:	blt	6c74 <ReadCompressedDoubleData+0x16f0>
    5af4:	mov	r0, #0
    5af8:	beq	5b38 <ReadCompressedDoubleData+0x5b4>
    5afc:	ldr	r0, [sp, #12]
    5b00:	sub	r0, r0, r8
    5b04:	bic	r1, r0, #1
    5b08:	bic	r0, r4, #1
    5b0c:	vld1.16	{d16[0]}, [r5 :16]
    5b10:	subs	r1, r1, #2
    5b14:	add	r5, r5, #2
    5b18:	vmovl.s8	q8, d16
    5b1c:	vmovl.s16	q0, d16
    5b20:	vcvt.f64.s32	d17, s1
    5b24:	vcvt.f64.s32	d16, s0
    5b28:	vst1.64	{d16-d17}, [r7]!
    5b2c:	bne	5b0c <ReadCompressedDoubleData+0x588>
    5b30:	cmp	r4, r0
    5b34:	beq	6c74 <ReadCompressedDoubleData+0x16f0>
    5b38:	ldr	r3, [sp, #12]
    5b3c:	add	r1, sp, #24
    5b40:	add	r2, r0, sl
    5b44:	add	r1, r1, r0
    5b48:	add	r2, r9, r2, lsl #3
    5b4c:	sub	r3, r3, r8
    5b50:	sub	r0, r3, r0
    5b54:	ldrsb	r3, [r1], #1
    5b58:	subs	r0, r0, #1
    5b5c:	vmov	s0, r3
    5b60:	vcvt.f64.s32	d16, s0
    5b64:	vstmia	r2!, {d16}
    5b68:	bne	5b54 <ReadCompressedDoubleData+0x5d0>
    5b6c:	b	6c74 <ReadCompressedDoubleData+0x16f0>
    5b70:	sub	r1, r6, #1024	; 0x400
    5b74:	add	r0, r9, #8192	; 0x2000
    5b78:	str	r2, [sp, #8]
    5b7c:	lsl	r5, r2, #10
    5b80:	mov	r2, #1024	; 0x400
    5b84:	add	r6, sp, #24
    5b88:	mov	r4, r9
    5b8c:	str	r1, [sp, #12]
    5b90:	mov	r1, #0
    5b94:	mov	r8, r1
    5b98:	mov	r7, r0
    5b9c:	ldr	r0, [sp, #20]
    5ba0:	ldr	r1, [sp, #16]
    5ba4:	mov	sl, r2
    5ba8:	mov	r2, r6
    5bac:	mov	r3, r5
    5bb0:	bl	32fc <InflateData>
    5bb4:	mov	r0, r4
    5bb8:	mov	r1, #0
    5bbc:	add	r2, r6, r1
    5bc0:	add	r1, r1, #2
    5bc4:	vld1.16	{d16[0]}, [r2 :16]
    5bc8:	cmp	r1, #1024	; 0x400
    5bcc:	vmovl.u8	q8, d16
    5bd0:	vmovl.u16	q0, d16
    5bd4:	vcvt.f64.u32	d17, s1
    5bd8:	vcvt.f64.u32	d16, s0
    5bdc:	vst1.64	{d16-d17}, [r0]!
    5be0:	bne	5bbc <ReadCompressedDoubleData+0x638>
    5be4:	ldr	r3, [sp, #12]
    5be8:	add	r1, r8, #1024	; 0x400
    5bec:	add	r4, r4, #8192	; 0x2000
    5bf0:	add	r0, r7, #8192	; 0x2000
    5bf4:	add	r2, sl, #1024	; 0x400
    5bf8:	cmp	r1, r3
    5bfc:	blt	5b94 <ReadCompressedDoubleData+0x610>
    5c00:	ldr	r0, [fp, #8]
    5c04:	add	r5, sp, #24
    5c08:	mov	r2, r5
    5c0c:	sub	r4, r0, r1
    5c10:	ldr	r0, [sp, #8]
    5c14:	ldr	r1, [sp, #16]
    5c18:	mul	r3, r4, r0
    5c1c:	ldr	r0, [sp, #20]
    5c20:	mov	r6, r3
    5c24:	bl	32fc <InflateData>
    5c28:	cmp	r4, #1
    5c2c:	blt	6c74 <ReadCompressedDoubleData+0x16f0>
    5c30:	mov	r0, #0
    5c34:	beq	5c74 <ReadCompressedDoubleData+0x6f0>
    5c38:	ldr	r0, [sp, #12]
    5c3c:	sub	r0, r0, r8
    5c40:	bic	r1, r0, #1
    5c44:	bic	r0, r4, #1
    5c48:	vld1.16	{d16[0]}, [r5 :16]
    5c4c:	subs	r1, r1, #2
    5c50:	add	r5, r5, #2
    5c54:	vmovl.u8	q8, d16
    5c58:	vmovl.u16	q0, d16
    5c5c:	vcvt.f64.u32	d17, s1
    5c60:	vcvt.f64.u32	d16, s0
    5c64:	vst1.64	{d16-d17}, [r7]!
    5c68:	bne	5c48 <ReadCompressedDoubleData+0x6c4>
    5c6c:	cmp	r4, r0
    5c70:	beq	6c74 <ReadCompressedDoubleData+0x16f0>
    5c74:	ldr	r3, [sp, #12]
    5c78:	add	r1, sp, #24
    5c7c:	add	r2, r0, sl
    5c80:	add	r1, r1, r0
    5c84:	add	r2, r9, r2, lsl #3
    5c88:	sub	r3, r3, r8
    5c8c:	sub	r0, r3, r0
    5c90:	ldrb	r3, [r1], #1
    5c94:	subs	r0, r0, #1
    5c98:	vmov	s0, r3
    5c9c:	vcvt.f64.u32	d16, s0
    5ca0:	vstmia	r2!, {d16}
    5ca4:	bne	5c90 <ReadCompressedDoubleData+0x70c>
    5ca8:	b	6c74 <ReadCompressedDoubleData+0x16f0>
    5cac:	cmp	r6, #512	; 0x200
    5cb0:	bgt	6698 <ReadCompressedDoubleData+0x1114>
    5cb4:	ldr	r0, [sp, #20]
    5cb8:	ldr	r1, [sp, #16]
    5cbc:	mul	sl, r2, r6
    5cc0:	add	r5, sp, #24
    5cc4:	mov	r2, r5
    5cc8:	mov	r3, sl
    5ccc:	bl	32fc <InflateData>
    5cd0:	cmp	r6, #1
    5cd4:	blt	6c78 <ReadCompressedDoubleData+0x16f4>
    5cd8:	mov	r0, #0
    5cdc:	beq	5d14 <ReadCompressedDoubleData+0x790>
    5ce0:	bic	r0, r6, #1
    5ce4:	mov	r2, r9
    5ce8:	mov	r1, r0
    5cec:	vld1.32	{d16[0]}, [r5 :32]
    5cf0:	subs	r1, r1, #2
    5cf4:	add	r5, r5, #4
    5cf8:	vmovl.s16	q0, d16
    5cfc:	vcvt.f64.s32	d17, s1
    5d00:	vcvt.f64.s32	d16, s0
    5d04:	vst1.64	{d16-d17}, [r2]!
    5d08:	bne	5cec <ReadCompressedDoubleData+0x768>
    5d0c:	cmp	r0, r6
    5d10:	beq	6c78 <ReadCompressedDoubleData+0x16f4>
    5d14:	add	r3, sp, #24
    5d18:	sub	r1, r6, r0
    5d1c:	add	r2, r9, r0, lsl #3
    5d20:	add	r0, r3, r0, lsl #1
    5d24:	ldrsh	r3, [r0], #2
    5d28:	subs	r1, r1, #1
    5d2c:	vmov	s0, r3
    5d30:	vcvt.f64.s32	d16, s0
    5d34:	vstr	d16, [r2]
    5d38:	add	r2, r2, #8
    5d3c:	bne	5d24 <ReadCompressedDoubleData+0x7a0>
    5d40:	b	6c78 <ReadCompressedDoubleData+0x16f4>
    5d44:	cmp	r6, #512	; 0x200
    5d48:	bgt	67cc <ReadCompressedDoubleData+0x1248>
    5d4c:	ldr	r0, [sp, #20]
    5d50:	ldr	r1, [sp, #16]
    5d54:	mul	sl, r2, r6
    5d58:	add	r5, sp, #24
    5d5c:	mov	r2, r5
    5d60:	mov	r3, sl
    5d64:	bl	32fc <InflateData>
    5d68:	cmp	r6, #1
    5d6c:	blt	6c78 <ReadCompressedDoubleData+0x16f4>
    5d70:	mov	r0, #0
    5d74:	beq	5dac <ReadCompressedDoubleData+0x828>
    5d78:	bic	r0, r6, #1
    5d7c:	mov	r2, r9
    5d80:	mov	r1, r0
    5d84:	vld1.32	{d16[0]}, [r5 :32]
    5d88:	subs	r1, r1, #2
    5d8c:	add	r5, r5, #4
    5d90:	vmovl.u16	q0, d16
    5d94:	vcvt.f64.u32	d17, s1
    5d98:	vcvt.f64.u32	d16, s0
    5d9c:	vst1.64	{d16-d17}, [r2]!
    5da0:	bne	5d84 <ReadCompressedDoubleData+0x800>
    5da4:	cmp	r0, r6
    5da8:	beq	6c78 <ReadCompressedDoubleData+0x16f4>
    5dac:	add	r3, sp, #24
    5db0:	sub	r1, r6, r0
    5db4:	add	r2, r9, r0, lsl #3
    5db8:	add	r0, r3, r0, lsl #1
    5dbc:	ldrh	r3, [r0], #2
    5dc0:	subs	r1, r1, #1
    5dc4:	vmov	s0, r3
    5dc8:	vcvt.f64.u32	d16, s0
    5dcc:	vstr	d16, [r2]
    5dd0:	add	r2, r2, #8
    5dd4:	bne	5dbc <ReadCompressedDoubleData+0x838>
    5dd8:	b	6c78 <ReadCompressedDoubleData+0x16f4>
    5ddc:	cmp	r6, #256	; 0x100
    5de0:	bgt	6900 <ReadCompressedDoubleData+0x137c>
    5de4:	ldr	r0, [sp, #20]
    5de8:	ldr	r1, [sp, #16]
    5dec:	mul	sl, r2, r6
    5df0:	add	r5, sp, #24
    5df4:	mov	r2, r5
    5df8:	mov	r3, sl
    5dfc:	bl	32fc <InflateData>
    5e00:	cmp	r6, #1
    5e04:	blt	6c78 <ReadCompressedDoubleData+0x16f4>
    5e08:	mov	r0, #0
    5e0c:	beq	5e3c <ReadCompressedDoubleData+0x8b8>
    5e10:	bic	r0, r6, #1
    5e14:	mov	r2, r9
    5e18:	mov	r1, r0
    5e1c:	vld1.32	{d0}, [r5 :64]!
    5e20:	subs	r1, r1, #2
    5e24:	vcvt.f64.s32	d17, s1
    5e28:	vcvt.f64.s32	d16, s0
    5e2c:	vst1.64	{d16-d17}, [r2]!
    5e30:	bne	5e1c <ReadCompressedDoubleData+0x898>
    5e34:	cmp	r0, r6
    5e38:	beq	6c78 <ReadCompressedDoubleData+0x16f4>
    5e3c:	add	r3, sp, #24
    5e40:	sub	r1, r6, r0
    5e44:	add	r2, r9, r0, lsl #3
    5e48:	add	r0, r3, r0, lsl #2
    5e4c:	ldr	r3, [r0], #4
    5e50:	subs	r1, r1, #1
    5e54:	vmov	s0, r3
    5e58:	vcvt.f64.s32	d16, s0
    5e5c:	vstr	d16, [r2]
    5e60:	add	r2, r2, #8
    5e64:	bne	5e4c <ReadCompressedDoubleData+0x8c8>
    5e68:	b	6c78 <ReadCompressedDoubleData+0x16f4>
    5e6c:	cmp	r6, #256	; 0x100
    5e70:	bgt	6a28 <ReadCompressedDoubleData+0x14a4>
    5e74:	ldr	r0, [sp, #20]
    5e78:	ldr	r1, [sp, #16]
    5e7c:	mul	sl, r2, r6
    5e80:	add	r5, sp, #24
    5e84:	mov	r2, r5
    5e88:	mov	r3, sl
    5e8c:	bl	32fc <InflateData>
    5e90:	cmp	r6, #1
    5e94:	blt	6c78 <ReadCompressedDoubleData+0x16f4>
    5e98:	mov	r0, #0
    5e9c:	beq	5ecc <ReadCompressedDoubleData+0x948>
    5ea0:	bic	r0, r6, #1
    5ea4:	mov	r2, r9
    5ea8:	mov	r1, r0
    5eac:	vld1.32	{d0}, [r5 :64]!
    5eb0:	subs	r1, r1, #2
    5eb4:	vcvt.f64.u32	d17, s1
    5eb8:	vcvt.f64.u32	d16, s0
    5ebc:	vst1.64	{d16-d17}, [r2]!
    5ec0:	bne	5eac <ReadCompressedDoubleData+0x928>
    5ec4:	cmp	r0, r6
    5ec8:	beq	6c78 <ReadCompressedDoubleData+0x16f4>
    5ecc:	add	r3, sp, #24
    5ed0:	sub	r1, r6, r0
    5ed4:	add	r2, r9, r0, lsl #3
    5ed8:	add	r0, r3, r0, lsl #2
    5edc:	ldr	r3, [r0], #4
    5ee0:	subs	r1, r1, #1
    5ee4:	vmov	s0, r3
    5ee8:	vcvt.f64.u32	d16, s0
    5eec:	vstr	d16, [r2]
    5ef0:	add	r2, r2, #8
    5ef4:	bne	5edc <ReadCompressedDoubleData+0x958>
    5ef8:	b	6c78 <ReadCompressedDoubleData+0x16f4>
    5efc:	cmp	r6, #256	; 0x100
    5f00:	bgt	6b50 <ReadCompressedDoubleData+0x15cc>
    5f04:	ldr	r0, [sp, #20]
    5f08:	ldr	r1, [sp, #16]
    5f0c:	mul	sl, r2, r6
    5f10:	add	r5, sp, #24
    5f14:	mov	r2, r5
    5f18:	mov	r3, sl
    5f1c:	bl	32fc <InflateData>
    5f20:	cmp	r6, #1
    5f24:	blt	6c78 <ReadCompressedDoubleData+0x16f4>
    5f28:	mov	r0, #0
    5f2c:	beq	5f5c <ReadCompressedDoubleData+0x9d8>
    5f30:	bic	r0, r6, #1
    5f34:	mov	r2, r9
    5f38:	mov	r1, r0
    5f3c:	vld1.32	{d0}, [r5 :64]!
    5f40:	subs	r1, r1, #2
    5f44:	vcvt.f64.f32	d17, s1
    5f48:	vcvt.f64.f32	d16, s0
    5f4c:	vst1.64	{d16-d17}, [r2]!
    5f50:	bne	5f3c <ReadCompressedDoubleData+0x9b8>
    5f54:	cmp	r0, r6
    5f58:	beq	6c78 <ReadCompressedDoubleData+0x16f4>
    5f5c:	add	r3, sp, #24
    5f60:	sub	r1, r6, r0
    5f64:	add	r2, r9, r0, lsl #3
    5f68:	add	r0, r3, r0, lsl #2
    5f6c:	vldr	s0, [r0]
    5f70:	subs	r1, r1, #1
    5f74:	add	r0, r0, #4
    5f78:	vcvt.f64.f32	d16, s0
    5f7c:	vstr	d16, [r2]
    5f80:	add	r2, r2, #8
    5f84:	bne	5f6c <ReadCompressedDoubleData+0x9e8>
    5f88:	b	6c78 <ReadCompressedDoubleData+0x16f4>
    5f8c:	cmp	r6, #128	; 0x80
    5f90:	bgt	6c8c <ReadCompressedDoubleData+0x1708>
    5f94:	ldr	r0, [sp, #20]
    5f98:	ldr	r1, [sp, #16]
    5f9c:	mul	sl, r2, r6
    5fa0:	add	r5, sp, #24
    5fa4:	mov	r2, r5
    5fa8:	mov	r3, sl
    5fac:	bl	32fc <InflateData>
    5fb0:	cmp	r6, #1
    5fb4:	blt	6c78 <ReadCompressedDoubleData+0x16f4>
    5fb8:	mov	r8, #0
    5fbc:	beq	600c <ReadCompressedDoubleData+0xa88>
    5fc0:	bic	r8, r6, #1
    5fc4:	mov	r7, r9
    5fc8:	mov	r4, r8
    5fcc:	vld1.64	{d8-d9}, [r5]!
    5fd0:	vmov.32	r0, d9[0]
    5fd4:	vmov.32	r1, d9[1]
    5fd8:	bl	5f094 <__aeabi_l2d>
    5fdc:	vmov.32	r2, d8[0]
    5fe0:	vmov.32	r3, d8[1]
    5fe4:	vmov	d9, r0, r1
    5fe8:	mov	r0, r2
    5fec:	mov	r1, r3
    5ff0:	bl	5f094 <__aeabi_l2d>
    5ff4:	vmov	d8, r0, r1
    5ff8:	subs	r4, r4, #2
    5ffc:	vst1.64	{d8-d9}, [r7]!
    6000:	bne	5fcc <ReadCompressedDoubleData+0xa48>
    6004:	cmp	r8, r6
    6008:	beq	6c78 <ReadCompressedDoubleData+0x16f4>
    600c:	add	r0, sp, #24
    6010:	sub	r5, r6, r8
    6014:	add	r6, r9, r8, lsl #3
    6018:	add	r4, r0, r8, lsl #3
    601c:	ldrd	r0, [r4]
    6020:	bl	5f094 <__aeabi_l2d>
    6024:	strd	r0, [r6]
    6028:	add	r4, r4, #8
    602c:	subs	r5, r5, #1
    6030:	add	r6, r6, #8
    6034:	bne	601c <ReadCompressedDoubleData+0xa98>
    6038:	b	6c78 <ReadCompressedDoubleData+0x16f4>
    603c:	cmp	r6, #128	; 0x80
    6040:	bgt	6e14 <ReadCompressedDoubleData+0x1890>
    6044:	ldr	r0, [sp, #20]
    6048:	ldr	r1, [sp, #16]
    604c:	mul	sl, r2, r6
    6050:	add	r5, sp, #24
    6054:	mov	r2, r5
    6058:	mov	r3, sl
    605c:	bl	32fc <InflateData>
    6060:	cmp	r6, #1
    6064:	blt	6c78 <ReadCompressedDoubleData+0x16f4>
    6068:	mov	r8, #0
    606c:	beq	60bc <ReadCompressedDoubleData+0xb38>
    6070:	bic	r8, r6, #1
    6074:	mov	r7, r9
    6078:	mov	r4, r8
    607c:	vld1.64	{d8-d9}, [r5]!
    6080:	vmov.32	r0, d9[0]
    6084:	vmov.32	r1, d9[1]
    6088:	bl	5f080 <__aeabi_ul2d>
    608c:	vmov.32	r2, d8[0]
    6090:	vmov.32	r3, d8[1]
    6094:	vmov	d9, r0, r1
    6098:	mov	r0, r2
    609c:	mov	r1, r3
    60a0:	bl	5f080 <__aeabi_ul2d>
    60a4:	vmov	d8, r0, r1
    60a8:	subs	r4, r4, #2
    60ac:	vst1.64	{d8-d9}, [r7]!
    60b0:	bne	607c <ReadCompressedDoubleData+0xaf8>
    60b4:	cmp	r8, r6
    60b8:	beq	6c78 <ReadCompressedDoubleData+0x16f4>
    60bc:	add	r0, sp, #24
    60c0:	sub	r5, r6, r8
    60c4:	add	r6, r9, r8, lsl #3
    60c8:	add	r4, r0, r8, lsl #3
    60cc:	ldrd	r0, [r4]
    60d0:	bl	5f080 <__aeabi_ul2d>
    60d4:	strd	r0, [r6]
    60d8:	add	r4, r4, #8
    60dc:	subs	r5, r5, #1
    60e0:	add	r6, r6, #8
    60e4:	bne	60cc <ReadCompressedDoubleData+0xb48>
    60e8:	b	6c78 <ReadCompressedDoubleData+0x16f4>
    60ec:	sub	r1, r6, #512	; 0x200
    60f0:	add	r0, r9, #4096	; 0x1000
    60f4:	lsl	sl, r2, #9
    60f8:	add	r6, sp, #24
    60fc:	str	r2, [sp, #8]
    6100:	str	r1, [sp, #12]
    6104:	mov	r1, #0
    6108:	mov	r5, r1
    610c:	mov	r7, r0
    6110:	ldr	r0, [sp, #20]
    6114:	ldr	r1, [sp, #16]
    6118:	mov	r2, r6
    611c:	mov	r3, sl
    6120:	bl	32fc <InflateData>
    6124:	mov	r4, r9
    6128:	mov	r8, #0
    612c:	add	r0, r6, r8
    6130:	bl	1c18 <Mat_int16Swap>
    6134:	vmov	s0, r0
    6138:	add	r8, r8, #2
    613c:	vcvt.f64.s32	d16, s0
    6140:	cmp	r8, #1024	; 0x400
    6144:	vstmia	r4!, {d16}
    6148:	bne	612c <ReadCompressedDoubleData+0xba8>
    614c:	ldr	r2, [sp, #12]
    6150:	add	r1, r5, #512	; 0x200
    6154:	add	r9, r9, #4096	; 0x1000
    6158:	add	r0, r7, #4096	; 0x1000
    615c:	cmp	r1, r2
    6160:	blt	6108 <ReadCompressedDoubleData+0xb84>
    6164:	ldr	r0, [fp, #8]
    6168:	add	r4, sp, #24
    616c:	mov	r2, r4
    6170:	sub	r6, r0, r1
    6174:	ldr	r0, [sp, #8]
    6178:	ldr	r1, [sp, #16]
    617c:	mul	sl, r6, r0
    6180:	ldr	r0, [sp, #20]
    6184:	mov	r3, sl
    6188:	bl	32fc <InflateData>
    618c:	cmp	r6, #1
    6190:	blt	6c78 <ReadCompressedDoubleData+0x16f4>
    6194:	ldr	r0, [sp, #12]
    6198:	sub	r5, r0, r5
    619c:	mov	r0, r4
    61a0:	bl	1c18 <Mat_int16Swap>
    61a4:	vmov	s0, r0
    61a8:	subs	r5, r5, #1
    61ac:	add	r4, r4, #2
    61b0:	vcvt.f64.s32	d16, s0
    61b4:	vstmia	r7!, {d16}
    61b8:	bne	619c <ReadCompressedDoubleData+0xc18>
    61bc:	b	6c78 <ReadCompressedDoubleData+0x16f4>
    61c0:	sub	r1, r6, #512	; 0x200
    61c4:	add	r0, r9, #4096	; 0x1000
    61c8:	lsl	sl, r2, #9
    61cc:	add	r6, sp, #24
    61d0:	str	r2, [sp, #8]
    61d4:	str	r1, [sp, #12]
    61d8:	mov	r1, #0
    61dc:	mov	r5, r1
    61e0:	mov	r7, r0
    61e4:	ldr	r0, [sp, #20]
    61e8:	ldr	r1, [sp, #16]
    61ec:	mov	r2, r6
    61f0:	mov	r3, sl
    61f4:	bl	32fc <InflateData>
    61f8:	mov	r4, r9
    61fc:	mov	r8, #0
    6200:	add	r0, r6, r8
    6204:	bl	1c2c <Mat_uint16Swap>
    6208:	vmov	s0, r0
    620c:	add	r8, r8, #2
    6210:	vcvt.f64.u32	d16, s0
    6214:	cmp	r8, #1024	; 0x400
    6218:	vstmia	r4!, {d16}
    621c:	bne	6200 <ReadCompressedDoubleData+0xc7c>
    6220:	ldr	r2, [sp, #12]
    6224:	add	r1, r5, #512	; 0x200
    6228:	add	r9, r9, #4096	; 0x1000
    622c:	add	r0, r7, #4096	; 0x1000
    6230:	cmp	r1, r2
    6234:	blt	61dc <ReadCompressedDoubleData+0xc58>
    6238:	ldr	r0, [fp, #8]
    623c:	add	r4, sp, #24
    6240:	mov	r2, r4
    6244:	sub	r6, r0, r1
    6248:	ldr	r0, [sp, #8]
    624c:	ldr	r1, [sp, #16]
    6250:	mul	sl, r6, r0
    6254:	ldr	r0, [sp, #20]
    6258:	mov	r3, sl
    625c:	bl	32fc <InflateData>
    6260:	cmp	r6, #1
    6264:	blt	6c78 <ReadCompressedDoubleData+0x16f4>
    6268:	ldr	r0, [sp, #12]
    626c:	sub	r5, r0, r5
    6270:	mov	r0, r4
    6274:	bl	1c2c <Mat_uint16Swap>
    6278:	vmov	s0, r0
    627c:	subs	r5, r5, #1
    6280:	add	r4, r4, #2
    6284:	vcvt.f64.u32	d16, s0
    6288:	vstmia	r7!, {d16}
    628c:	bne	6270 <ReadCompressedDoubleData+0xcec>
    6290:	b	6c78 <ReadCompressedDoubleData+0x16f4>
    6294:	sub	r1, r6, #256	; 0x100
    6298:	add	r0, r9, #2048	; 0x800
    629c:	lsl	sl, r2, #8
    62a0:	add	r6, sp, #24
    62a4:	str	r2, [sp, #8]
    62a8:	str	r1, [sp, #12]
    62ac:	mov	r1, #0
    62b0:	mov	r5, r1
    62b4:	mov	r7, r0
    62b8:	ldr	r0, [sp, #20]
    62bc:	ldr	r1, [sp, #16]
    62c0:	mov	r2, r6
    62c4:	mov	r3, sl
    62c8:	bl	32fc <InflateData>
    62cc:	mov	r4, r9
    62d0:	mov	r8, #0
    62d4:	add	r0, r6, r8
    62d8:	bl	1bf0 <Mat_int32Swap>
    62dc:	vmov	s0, r0
    62e0:	add	r8, r8, #4
    62e4:	vcvt.f64.s32	d16, s0
    62e8:	cmp	r8, #1024	; 0x400
    62ec:	vstmia	r4!, {d16}
    62f0:	bne	62d4 <ReadCompressedDoubleData+0xd50>
    62f4:	ldr	r2, [sp, #12]
    62f8:	add	r1, r5, #256	; 0x100
    62fc:	add	r9, r9, #2048	; 0x800
    6300:	add	r0, r7, #2048	; 0x800
    6304:	cmp	r1, r2
    6308:	blt	62b0 <ReadCompressedDoubleData+0xd2c>
    630c:	ldr	r0, [fp, #8]
    6310:	add	r4, sp, #24
    6314:	mov	r2, r4
    6318:	sub	r6, r0, r1
    631c:	ldr	r0, [sp, #8]
    6320:	ldr	r1, [sp, #16]
    6324:	mul	sl, r6, r0
    6328:	ldr	r0, [sp, #20]
    632c:	mov	r3, sl
    6330:	bl	32fc <InflateData>
    6334:	cmp	r6, #1
    6338:	blt	6c78 <ReadCompressedDoubleData+0x16f4>
    633c:	ldr	r0, [sp, #12]
    6340:	sub	r5, r0, r5
    6344:	mov	r0, r4
    6348:	bl	1bf0 <Mat_int32Swap>
    634c:	vmov	s0, r0
    6350:	subs	r5, r5, #1
    6354:	add	r4, r4, #4
    6358:	vcvt.f64.s32	d16, s0
    635c:	vstmia	r7!, {d16}
    6360:	bne	6344 <ReadCompressedDoubleData+0xdc0>
    6364:	b	6c78 <ReadCompressedDoubleData+0x16f4>
    6368:	sub	r1, r6, #256	; 0x100
    636c:	add	r0, r9, #2048	; 0x800
    6370:	lsl	sl, r2, #8
    6374:	add	r6, sp, #24
    6378:	str	r2, [sp, #8]
    637c:	str	r1, [sp, #12]
    6380:	mov	r1, #0
    6384:	mov	r5, r1
    6388:	mov	r7, r0
    638c:	ldr	r0, [sp, #20]
    6390:	ldr	r1, [sp, #16]
    6394:	mov	r2, r6
    6398:	mov	r3, sl
    639c:	bl	32fc <InflateData>
    63a0:	mov	r4, r9
    63a4:	mov	r8, #0
    63a8:	add	r0, r6, r8
    63ac:	bl	1c04 <Mat_uint32Swap>
    63b0:	vmov	s0, r0
    63b4:	add	r8, r8, #4
    63b8:	vcvt.f64.u32	d16, s0
    63bc:	cmp	r8, #1024	; 0x400
    63c0:	vstmia	r4!, {d16}
    63c4:	bne	63a8 <ReadCompressedDoubleData+0xe24>
    63c8:	ldr	r2, [sp, #12]
    63cc:	add	r1, r5, #256	; 0x100
    63d0:	add	r9, r9, #2048	; 0x800
    63d4:	add	r0, r7, #2048	; 0x800
    63d8:	cmp	r1, r2
    63dc:	blt	6384 <ReadCompressedDoubleData+0xe00>
    63e0:	ldr	r0, [fp, #8]
    63e4:	add	r4, sp, #24
    63e8:	mov	r2, r4
    63ec:	sub	r6, r0, r1
    63f0:	ldr	r0, [sp, #8]
    63f4:	ldr	r1, [sp, #16]
    63f8:	mul	sl, r6, r0
    63fc:	ldr	r0, [sp, #20]
    6400:	mov	r3, sl
    6404:	bl	32fc <InflateData>
    6408:	cmp	r6, #1
    640c:	blt	6c78 <ReadCompressedDoubleData+0x16f4>
    6410:	ldr	r0, [sp, #12]
    6414:	sub	r5, r0, r5
    6418:	mov	r0, r4
    641c:	bl	1c04 <Mat_uint32Swap>
    6420:	vmov	s0, r0
    6424:	subs	r5, r5, #1
    6428:	add	r4, r4, #4
    642c:	vcvt.f64.u32	d16, s0
    6430:	vstmia	r7!, {d16}
    6434:	bne	6418 <ReadCompressedDoubleData+0xe94>
    6438:	b	6c78 <ReadCompressedDoubleData+0x16f4>
    643c:	sub	r1, r6, #256	; 0x100
    6440:	add	r0, r9, #2048	; 0x800
    6444:	lsl	sl, r2, #8
    6448:	add	r6, sp, #24
    644c:	str	r2, [sp, #8]
    6450:	str	r1, [sp, #12]
    6454:	mov	r1, #0
    6458:	mov	r5, r1
    645c:	mov	r7, r0
    6460:	ldr	r0, [sp, #20]
    6464:	ldr	r1, [sp, #16]
    6468:	mov	r2, r6
    646c:	mov	r3, sl
    6470:	bl	32fc <InflateData>
    6474:	mov	r4, r9
    6478:	mov	r8, #0
    647c:	add	r0, r6, r8
    6480:	bl	1c44 <Mat_floatSwap>
    6484:	vcvt.f64.f32	d16, s0
    6488:	add	r8, r8, #4
    648c:	vstmia	r4!, {d16}
    6490:	cmp	r8, #1024	; 0x400
    6494:	bne	647c <ReadCompressedDoubleData+0xef8>
    6498:	ldr	r2, [sp, #12]
    649c:	add	r1, r5, #256	; 0x100
    64a0:	add	r9, r9, #2048	; 0x800
    64a4:	add	r0, r7, #2048	; 0x800
    64a8:	cmp	r1, r2
    64ac:	blt	6458 <ReadCompressedDoubleData+0xed4>
    64b0:	ldr	r0, [fp, #8]
    64b4:	add	r4, sp, #24
    64b8:	mov	r2, r4
    64bc:	sub	r6, r0, r1
    64c0:	ldr	r0, [sp, #8]
    64c4:	ldr	r1, [sp, #16]
    64c8:	mul	sl, r6, r0
    64cc:	ldr	r0, [sp, #20]
    64d0:	mov	r3, sl
    64d4:	bl	32fc <InflateData>
    64d8:	cmp	r6, #1
    64dc:	blt	6c78 <ReadCompressedDoubleData+0x16f4>
    64e0:	ldr	r0, [sp, #12]
    64e4:	sub	r5, r0, r5
    64e8:	mov	r0, r4
    64ec:	bl	1c44 <Mat_floatSwap>
    64f0:	vcvt.f64.f32	d16, s0
    64f4:	subs	r5, r5, #1
    64f8:	add	r4, r4, #4
    64fc:	vstmia	r7!, {d16}
    6500:	bne	64e8 <ReadCompressedDoubleData+0xf64>
    6504:	b	6c78 <ReadCompressedDoubleData+0x16f4>
    6508:	sub	r8, r6, #128	; 0x80
    650c:	add	r0, r9, #1024	; 0x400
    6510:	lsl	sl, r2, #7
    6514:	mov	r1, #0
    6518:	add	r6, sp, #24
    651c:	str	r2, [sp, #8]
    6520:	mov	r5, r1
    6524:	mov	r7, r0
    6528:	ldr	r0, [sp, #20]
    652c:	ldr	r1, [sp, #16]
    6530:	mov	r2, r6
    6534:	mov	r3, sl
    6538:	bl	32fc <InflateData>
    653c:	mov	r4, #0
    6540:	add	r0, r6, r4
    6544:	bl	1b84 <Mat_int64Swap>
    6548:	bl	5f094 <__aeabi_l2d>
    654c:	mov	r2, r9
    6550:	str	r0, [r2, r4]!
    6554:	add	r4, r4, #8
    6558:	cmp	r4, #1024	; 0x400
    655c:	str	r1, [r2, #4]
    6560:	bne	6540 <ReadCompressedDoubleData+0xfbc>
    6564:	add	r1, r5, #128	; 0x80
    6568:	add	r9, r9, #1024	; 0x400
    656c:	add	r0, r7, #1024	; 0x400
    6570:	cmp	r1, r8
    6574:	blt	6520 <ReadCompressedDoubleData+0xf9c>
    6578:	ldr	r0, [fp, #8]
    657c:	add	r4, sp, #24
    6580:	mov	r2, r4
    6584:	sub	r6, r0, r1
    6588:	ldr	r0, [sp, #8]
    658c:	ldr	r1, [sp, #16]
    6590:	mul	sl, r6, r0
    6594:	ldr	r0, [sp, #20]
    6598:	mov	r3, sl
    659c:	bl	32fc <InflateData>
    65a0:	cmp	r6, #1
    65a4:	blt	6c78 <ReadCompressedDoubleData+0x16f4>
    65a8:	sub	r5, r8, r5
    65ac:	mov	r0, r4
    65b0:	bl	1b84 <Mat_int64Swap>
    65b4:	bl	5f094 <__aeabi_l2d>
    65b8:	strd	r0, [r7]
    65bc:	add	r7, r7, #8
    65c0:	add	r4, r4, #8
    65c4:	subs	r5, r5, #1
    65c8:	bne	65ac <ReadCompressedDoubleData+0x1028>
    65cc:	b	6c78 <ReadCompressedDoubleData+0x16f4>
    65d0:	sub	r8, r6, #128	; 0x80
    65d4:	add	r0, r9, #1024	; 0x400
    65d8:	lsl	sl, r2, #7
    65dc:	mov	r1, #0
    65e0:	add	r6, sp, #24
    65e4:	str	r2, [sp, #8]
    65e8:	mov	r5, r1
    65ec:	mov	r7, r0
    65f0:	ldr	r0, [sp, #20]
    65f4:	ldr	r1, [sp, #16]
    65f8:	mov	r2, r6
    65fc:	mov	r3, sl
    6600:	bl	32fc <InflateData>
    6604:	mov	r4, #0
    6608:	add	r0, r6, r4
    660c:	bl	1bd4 <Mat_uint64Swap>
    6610:	bl	5f080 <__aeabi_ul2d>
    6614:	mov	r2, r9
    6618:	str	r0, [r2, r4]!
    661c:	add	r4, r4, #8
    6620:	cmp	r4, #1024	; 0x400
    6624:	str	r1, [r2, #4]
    6628:	bne	6608 <ReadCompressedDoubleData+0x1084>
    662c:	add	r1, r5, #128	; 0x80
    6630:	add	r9, r9, #1024	; 0x400
    6634:	add	r0, r7, #1024	; 0x400
    6638:	cmp	r1, r8
    663c:	blt	65e8 <ReadCompressedDoubleData+0x1064>
    6640:	ldr	r0, [fp, #8]
    6644:	add	r4, sp, #24
    6648:	mov	r2, r4
    664c:	sub	r6, r0, r1
    6650:	ldr	r0, [sp, #8]
    6654:	ldr	r1, [sp, #16]
    6658:	mul	sl, r6, r0
    665c:	ldr	r0, [sp, #20]
    6660:	mov	r3, sl
    6664:	bl	32fc <InflateData>
    6668:	cmp	r6, #1
    666c:	blt	6c78 <ReadCompressedDoubleData+0x16f4>
    6670:	sub	r5, r8, r5
    6674:	mov	r0, r4
    6678:	bl	1bd4 <Mat_uint64Swap>
    667c:	bl	5f080 <__aeabi_ul2d>
    6680:	strd	r0, [r7]
    6684:	add	r7, r7, #8
    6688:	add	r4, r4, #8
    668c:	subs	r5, r5, #1
    6690:	bne	6674 <ReadCompressedDoubleData+0x10f0>
    6694:	b	6c78 <ReadCompressedDoubleData+0x16f4>
    6698:	sub	r1, r6, #512	; 0x200
    669c:	add	r0, r9, #4096	; 0x1000
    66a0:	str	r2, [sp, #8]
    66a4:	lsl	r5, r2, #9
    66a8:	mov	r2, #512	; 0x200
    66ac:	add	r6, sp, #24
    66b0:	mov	r4, r9
    66b4:	str	r1, [sp, #12]
    66b8:	mov	r1, #0
    66bc:	mov	sl, r1
    66c0:	mov	r8, r0
    66c4:	ldr	r0, [sp, #20]
    66c8:	ldr	r1, [sp, #16]
    66cc:	mov	r7, r2
    66d0:	mov	r2, r6
    66d4:	mov	r3, r5
    66d8:	bl	32fc <InflateData>
    66dc:	mov	r0, r4
    66e0:	mov	r1, #0
    66e4:	add	r2, r6, r1
    66e8:	add	r1, r1, #4
    66ec:	vld1.32	{d16[0]}, [r2 :32]
    66f0:	cmp	r1, #1024	; 0x400
    66f4:	vmovl.s16	q0, d16
    66f8:	vcvt.f64.s32	d17, s1
    66fc:	vcvt.f64.s32	d16, s0
    6700:	vst1.64	{d16-d17}, [r0]!
    6704:	bne	66e4 <ReadCompressedDoubleData+0x1160>
    6708:	ldr	r3, [sp, #12]
    670c:	add	r1, sl, #512	; 0x200
    6710:	add	r4, r4, #4096	; 0x1000
    6714:	add	r0, r8, #4096	; 0x1000
    6718:	add	r2, r7, #512	; 0x200
    671c:	cmp	r1, r3
    6720:	blt	66bc <ReadCompressedDoubleData+0x1138>
    6724:	ldr	r0, [fp, #8]
    6728:	add	r5, sp, #24
    672c:	mov	r2, r5
    6730:	sub	r4, r0, r1
    6734:	ldr	r0, [sp, #8]
    6738:	ldr	r1, [sp, #16]
    673c:	mul	r3, r4, r0
    6740:	ldr	r0, [sp, #20]
    6744:	mov	r6, r3
    6748:	bl	32fc <InflateData>
    674c:	cmp	r4, #1
    6750:	blt	6c74 <ReadCompressedDoubleData+0x16f0>
    6754:	mov	r0, #0
    6758:	beq	6794 <ReadCompressedDoubleData+0x1210>
    675c:	ldr	r0, [sp, #12]
    6760:	sub	r0, r0, sl
    6764:	bic	r1, r0, #1
    6768:	bic	r0, r4, #1
    676c:	vld1.32	{d16[0]}, [r5 :32]
    6770:	subs	r1, r1, #2
    6774:	add	r5, r5, #4
    6778:	vmovl.s16	q0, d16
    677c:	vcvt.f64.s32	d17, s1
    6780:	vcvt.f64.s32	d16, s0
    6784:	vst1.64	{d16-d17}, [r8]!
    6788:	bne	676c <ReadCompressedDoubleData+0x11e8>
    678c:	cmp	r4, r0
    6790:	beq	6c74 <ReadCompressedDoubleData+0x16f0>
    6794:	ldr	r3, [sp, #12]
    6798:	add	r1, sp, #24
    679c:	add	r2, r0, r7
    67a0:	add	r1, r1, r0, lsl #1
    67a4:	add	r2, r9, r2, lsl #3
    67a8:	sub	r3, r3, sl
    67ac:	sub	r0, r3, r0
    67b0:	ldrsh	r3, [r1], #2
    67b4:	subs	r0, r0, #1
    67b8:	vmov	s0, r3
    67bc:	vcvt.f64.s32	d16, s0
    67c0:	vstmia	r2!, {d16}
    67c4:	bne	67b0 <ReadCompressedDoubleData+0x122c>
    67c8:	b	6c74 <ReadCompressedDoubleData+0x16f0>
    67cc:	sub	r1, r6, #512	; 0x200
    67d0:	add	r0, r9, #4096	; 0x1000
    67d4:	str	r2, [sp, #8]
    67d8:	lsl	r5, r2, #9
    67dc:	mov	r2, #512	; 0x200
    67e0:	add	r6, sp, #24
    67e4:	mov	r4, r9
    67e8:	str	r1, [sp, #12]
    67ec:	mov	r1, #0
    67f0:	mov	sl, r1
    67f4:	mov	r8, r0
    67f8:	ldr	r0, [sp, #20]
    67fc:	ldr	r1, [sp, #16]
    6800:	mov	r7, r2
    6804:	mov	r2, r6
    6808:	mov	r3, r5
    680c:	bl	32fc <InflateData>
    6810:	mov	r0, r4
    6814:	mov	r1, #0
    6818:	add	r2, r6, r1
    681c:	add	r1, r1, #4
    6820:	vld1.32	{d16[0]}, [r2 :32]
    6824:	cmp	r1, #1024	; 0x400
    6828:	vmovl.u16	q0, d16
    682c:	vcvt.f64.u32	d17, s1
    6830:	vcvt.f64.u32	d16, s0
    6834:	vst1.64	{d16-d17}, [r0]!
    6838:	bne	6818 <ReadCompressedDoubleData+0x1294>
    683c:	ldr	r3, [sp, #12]
    6840:	add	r1, sl, #512	; 0x200
    6844:	add	r4, r4, #4096	; 0x1000
    6848:	add	r0, r8, #4096	; 0x1000
    684c:	add	r2, r7, #512	; 0x200
    6850:	cmp	r1, r3
    6854:	blt	67f0 <ReadCompressedDoubleData+0x126c>
    6858:	ldr	r0, [fp, #8]
    685c:	add	r5, sp, #24
    6860:	mov	r2, r5
    6864:	sub	r4, r0, r1
    6868:	ldr	r0, [sp, #8]
    686c:	ldr	r1, [sp, #16]
    6870:	mul	r3, r4, r0
    6874:	ldr	r0, [sp, #20]
    6878:	mov	r6, r3
    687c:	bl	32fc <InflateData>
    6880:	cmp	r4, #1
    6884:	blt	6c74 <ReadCompressedDoubleData+0x16f0>
    6888:	mov	r0, #0
    688c:	beq	68c8 <ReadCompressedDoubleData+0x1344>
    6890:	ldr	r0, [sp, #12]
    6894:	sub	r0, r0, sl
    6898:	bic	r1, r0, #1
    689c:	bic	r0, r4, #1
    68a0:	vld1.32	{d16[0]}, [r5 :32]
    68a4:	subs	r1, r1, #2
    68a8:	add	r5, r5, #4
    68ac:	vmovl.u16	q0, d16
    68b0:	vcvt.f64.u32	d17, s1
    68b4:	vcvt.f64.u32	d16, s0
    68b8:	vst1.64	{d16-d17}, [r8]!
    68bc:	bne	68a0 <ReadCompressedDoubleData+0x131c>
    68c0:	cmp	r4, r0
    68c4:	beq	6c74 <ReadCompressedDoubleData+0x16f0>
    68c8:	ldr	r3, [sp, #12]
    68cc:	add	r1, sp, #24
    68d0:	add	r2, r0, r7
    68d4:	add	r1, r1, r0, lsl #1
    68d8:	add	r2, r9, r2, lsl #3
    68dc:	sub	r3, r3, sl
    68e0:	sub	r0, r3, r0
    68e4:	ldrh	r3, [r1], #2
    68e8:	subs	r0, r0, #1
    68ec:	vmov	s0, r3
    68f0:	vcvt.f64.u32	d16, s0
    68f4:	vstmia	r2!, {d16}
    68f8:	bne	68e4 <ReadCompressedDoubleData+0x1360>
    68fc:	b	6c74 <ReadCompressedDoubleData+0x16f0>
    6900:	sub	r1, r6, #256	; 0x100
    6904:	add	r0, r9, #2048	; 0x800
    6908:	str	r2, [sp, #8]
    690c:	lsl	r5, r2, #8
    6910:	mov	r2, #256	; 0x100
    6914:	add	r6, sp, #24
    6918:	mov	r4, r9
    691c:	str	r1, [sp, #12]
    6920:	mov	r1, #0
    6924:	mov	sl, r1
    6928:	mov	r8, r0
    692c:	ldr	r0, [sp, #20]
    6930:	ldr	r1, [sp, #16]
    6934:	mov	r7, r2
    6938:	mov	r2, r6
    693c:	mov	r3, r5
    6940:	bl	32fc <InflateData>
    6944:	mov	r0, r4
    6948:	mov	r1, #0
    694c:	add	r2, r6, r1
    6950:	add	r1, r1, #8
    6954:	vldr	d0, [r2]
    6958:	cmp	r1, #1024	; 0x400
    695c:	vcvt.f64.s32	d17, s1
    6960:	vcvt.f64.s32	d16, s0
    6964:	vst1.64	{d16-d17}, [r0]!
    6968:	bne	694c <ReadCompressedDoubleData+0x13c8>
    696c:	ldr	r3, [sp, #12]
    6970:	add	r1, sl, #256	; 0x100
    6974:	add	r4, r4, #2048	; 0x800
    6978:	add	r0, r8, #2048	; 0x800
    697c:	add	r2, r7, #256	; 0x100
    6980:	cmp	r1, r3
    6984:	blt	6924 <ReadCompressedDoubleData+0x13a0>
    6988:	ldr	r0, [fp, #8]
    698c:	add	r5, sp, #24
    6990:	mov	r2, r5
    6994:	sub	r4, r0, r1
    6998:	ldr	r0, [sp, #8]
    699c:	ldr	r1, [sp, #16]
    69a0:	mul	r3, r4, r0
    69a4:	ldr	r0, [sp, #20]
    69a8:	mov	r6, r3
    69ac:	bl	32fc <InflateData>
    69b0:	cmp	r4, #1
    69b4:	blt	6c74 <ReadCompressedDoubleData+0x16f0>
    69b8:	mov	r0, #0
    69bc:	beq	69f0 <ReadCompressedDoubleData+0x146c>
    69c0:	ldr	r0, [sp, #12]
    69c4:	sub	r0, r0, sl
    69c8:	bic	r1, r0, #1
    69cc:	bic	r0, r4, #1
    69d0:	vld1.32	{d0}, [r5 :64]!
    69d4:	subs	r1, r1, #2
    69d8:	vcvt.f64.s32	d17, s1
    69dc:	vcvt.f64.s32	d16, s0
    69e0:	vst1.64	{d16-d17}, [r8]!
    69e4:	bne	69d0 <ReadCompressedDoubleData+0x144c>
    69e8:	cmp	r4, r0
    69ec:	beq	6c74 <ReadCompressedDoubleData+0x16f0>
    69f0:	ldr	r3, [sp, #12]
    69f4:	add	r1, sp, #24
    69f8:	add	r2, r0, r7
    69fc:	add	r1, r1, r0, lsl #2
    6a00:	add	r2, r9, r2, lsl #3
    6a04:	sub	r3, r3, sl
    6a08:	sub	r0, r3, r0
    6a0c:	ldr	r3, [r1], #4
    6a10:	subs	r0, r0, #1
    6a14:	vmov	s0, r3
    6a18:	vcvt.f64.s32	d16, s0
    6a1c:	vstmia	r2!, {d16}
    6a20:	bne	6a0c <ReadCompressedDoubleData+0x1488>
    6a24:	b	6c74 <ReadCompressedDoubleData+0x16f0>
    6a28:	sub	r1, r6, #256	; 0x100
    6a2c:	add	r0, r9, #2048	; 0x800
    6a30:	str	r2, [sp, #8]
    6a34:	lsl	r5, r2, #8
    6a38:	mov	r2, #256	; 0x100
    6a3c:	add	r6, sp, #24
    6a40:	mov	r4, r9
    6a44:	str	r1, [sp, #12]
    6a48:	mov	r1, #0
    6a4c:	mov	sl, r1
    6a50:	mov	r8, r0
    6a54:	ldr	r0, [sp, #20]
    6a58:	ldr	r1, [sp, #16]
    6a5c:	mov	r7, r2
    6a60:	mov	r2, r6
    6a64:	mov	r3, r5
    6a68:	bl	32fc <InflateData>
    6a6c:	mov	r0, r4
    6a70:	mov	r1, #0
    6a74:	add	r2, r6, r1
    6a78:	add	r1, r1, #8
    6a7c:	vldr	d0, [r2]
    6a80:	cmp	r1, #1024	; 0x400
    6a84:	vcvt.f64.u32	d17, s1
    6a88:	vcvt.f64.u32	d16, s0
    6a8c:	vst1.64	{d16-d17}, [r0]!
    6a90:	bne	6a74 <ReadCompressedDoubleData+0x14f0>
    6a94:	ldr	r3, [sp, #12]
    6a98:	add	r1, sl, #256	; 0x100
    6a9c:	add	r4, r4, #2048	; 0x800
    6aa0:	add	r0, r8, #2048	; 0x800
    6aa4:	add	r2, r7, #256	; 0x100
    6aa8:	cmp	r1, r3
    6aac:	blt	6a4c <ReadCompressedDoubleData+0x14c8>
    6ab0:	ldr	r0, [fp, #8]
    6ab4:	add	r5, sp, #24
    6ab8:	mov	r2, r5
    6abc:	sub	r4, r0, r1
    6ac0:	ldr	r0, [sp, #8]
    6ac4:	ldr	r1, [sp, #16]
    6ac8:	mul	r3, r4, r0
    6acc:	ldr	r0, [sp, #20]
    6ad0:	mov	r6, r3
    6ad4:	bl	32fc <InflateData>
    6ad8:	cmp	r4, #1
    6adc:	blt	6c74 <ReadCompressedDoubleData+0x16f0>
    6ae0:	mov	r0, #0
    6ae4:	beq	6b18 <ReadCompressedDoubleData+0x1594>
    6ae8:	ldr	r0, [sp, #12]
    6aec:	sub	r0, r0, sl
    6af0:	bic	r1, r0, #1
    6af4:	bic	r0, r4, #1
    6af8:	vld1.32	{d0}, [r5 :64]!
    6afc:	subs	r1, r1, #2
    6b00:	vcvt.f64.u32	d17, s1
    6b04:	vcvt.f64.u32	d16, s0
    6b08:	vst1.64	{d16-d17}, [r8]!
    6b0c:	bne	6af8 <ReadCompressedDoubleData+0x1574>
    6b10:	cmp	r4, r0
    6b14:	beq	6c74 <ReadCompressedDoubleData+0x16f0>
    6b18:	ldr	r3, [sp, #12]
    6b1c:	add	r1, sp, #24
    6b20:	add	r2, r0, r7
    6b24:	add	r1, r1, r0, lsl #2
    6b28:	add	r2, r9, r2, lsl #3
    6b2c:	sub	r3, r3, sl
    6b30:	sub	r0, r3, r0
    6b34:	ldr	r3, [r1], #4
    6b38:	subs	r0, r0, #1
    6b3c:	vmov	s0, r3
    6b40:	vcvt.f64.u32	d16, s0
    6b44:	vstmia	r2!, {d16}
    6b48:	bne	6b34 <ReadCompressedDoubleData+0x15b0>
    6b4c:	b	6c74 <ReadCompressedDoubleData+0x16f0>
    6b50:	sub	r1, r6, #256	; 0x100
    6b54:	add	r0, r9, #2048	; 0x800
    6b58:	str	r2, [sp, #8]
    6b5c:	lsl	r5, r2, #8
    6b60:	mov	r2, #256	; 0x100
    6b64:	add	r6, sp, #24
    6b68:	mov	r4, r9
    6b6c:	str	r1, [sp, #12]
    6b70:	mov	r1, #0
    6b74:	mov	sl, r1
    6b78:	mov	r8, r0
    6b7c:	ldr	r0, [sp, #20]
    6b80:	ldr	r1, [sp, #16]
    6b84:	mov	r7, r2
    6b88:	mov	r2, r6
    6b8c:	mov	r3, r5
    6b90:	bl	32fc <InflateData>
    6b94:	mov	r0, r4
    6b98:	mov	r1, #0
    6b9c:	add	r2, r6, r1
    6ba0:	add	r1, r1, #8
    6ba4:	vldr	d0, [r2]
    6ba8:	cmp	r1, #1024	; 0x400
    6bac:	vcvt.f64.f32	d17, s1
    6bb0:	vcvt.f64.f32	d16, s0
    6bb4:	vst1.64	{d16-d17}, [r0]!
    6bb8:	bne	6b9c <ReadCompressedDoubleData+0x1618>
    6bbc:	ldr	r3, [sp, #12]
    6bc0:	add	r1, sl, #256	; 0x100
    6bc4:	add	r4, r4, #2048	; 0x800
    6bc8:	add	r0, r8, #2048	; 0x800
    6bcc:	add	r2, r7, #256	; 0x100
    6bd0:	cmp	r1, r3
    6bd4:	blt	6b74 <ReadCompressedDoubleData+0x15f0>
    6bd8:	ldr	r0, [fp, #8]
    6bdc:	add	r5, sp, #24
    6be0:	mov	r2, r5
    6be4:	sub	r4, r0, r1
    6be8:	ldr	r0, [sp, #8]
    6bec:	ldr	r1, [sp, #16]
    6bf0:	mul	r3, r4, r0
    6bf4:	ldr	r0, [sp, #20]
    6bf8:	mov	r6, r3
    6bfc:	bl	32fc <InflateData>
    6c00:	cmp	r4, #1
    6c04:	blt	6c74 <ReadCompressedDoubleData+0x16f0>
    6c08:	mov	r0, #0
    6c0c:	beq	6c40 <ReadCompressedDoubleData+0x16bc>
    6c10:	ldr	r0, [sp, #12]
    6c14:	sub	r0, r0, sl
    6c18:	bic	r1, r0, #1
    6c1c:	bic	r0, r4, #1
    6c20:	vld1.32	{d0}, [r5 :64]!
    6c24:	subs	r1, r1, #2
    6c28:	vcvt.f64.f32	d17, s1
    6c2c:	vcvt.f64.f32	d16, s0
    6c30:	vst1.64	{d16-d17}, [r8]!
    6c34:	bne	6c20 <ReadCompressedDoubleData+0x169c>
    6c38:	cmp	r4, r0
    6c3c:	beq	6c74 <ReadCompressedDoubleData+0x16f0>
    6c40:	ldr	r3, [sp, #12]
    6c44:	add	r1, sp, #24
    6c48:	add	r2, r0, r7
    6c4c:	add	r1, r1, r0, lsl #2
    6c50:	add	r2, r9, r2, lsl #3
    6c54:	sub	r3, r3, sl
    6c58:	sub	r0, r3, r0
    6c5c:	vldr	s0, [r1]
    6c60:	subs	r0, r0, #1
    6c64:	add	r1, r1, #4
    6c68:	vcvt.f64.f32	d16, s0
    6c6c:	vstmia	r2!, {d16}
    6c70:	bne	6c5c <ReadCompressedDoubleData+0x16d8>
    6c74:	mov	sl, r6
    6c78:	mov	r0, sl
    6c7c:	sub	sp, fp, #48	; 0x30
    6c80:	vpop	{d8-d9}
    6c84:	add	sp, sp, #4
    6c88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6c8c:	lsl	r1, r2, #7
    6c90:	str	r2, [sp, #8]
    6c94:	add	r0, r9, #1024	; 0x400
    6c98:	mov	r2, #128	; 0x80
    6c9c:	add	r5, sp, #24
    6ca0:	mov	r7, r9
    6ca4:	str	r1, [sp, #4]
    6ca8:	sub	r1, r6, #128	; 0x80
    6cac:	str	r1, [sp, #12]
    6cb0:	mov	r1, #0
    6cb4:	mov	sl, r1
    6cb8:	mov	r6, r0
    6cbc:	ldr	r0, [sp, #20]
    6cc0:	ldr	r1, [sp, #16]
    6cc4:	ldr	r3, [sp, #4]
    6cc8:	mov	r8, r2
    6ccc:	mov	r2, r5
    6cd0:	bl	32fc <InflateData>
    6cd4:	mov	r4, #0
    6cd8:	add	r0, r5, r4
    6cdc:	vld1.64	{d8-d9}, [r0]
    6ce0:	vmov.32	r0, d9[0]
    6ce4:	vmov.32	r1, d9[1]
    6ce8:	bl	5f094 <__aeabi_l2d>
    6cec:	vmov.32	r2, d8[0]
    6cf0:	vmov.32	r3, d8[1]
    6cf4:	vmov	d9, r0, r1
    6cf8:	mov	r0, r2
    6cfc:	mov	r1, r3
    6d00:	bl	5f094 <__aeabi_l2d>
    6d04:	vmov	d8, r0, r1
    6d08:	add	r0, r7, r4
    6d0c:	add	r4, r4, #16
    6d10:	cmp	r4, #1024	; 0x400
    6d14:	vst1.64	{d8-d9}, [r0]
    6d18:	bne	6cd8 <ReadCompressedDoubleData+0x1754>
    6d1c:	ldr	r3, [sp, #12]
    6d20:	add	r1, sl, #128	; 0x80
    6d24:	add	r7, r7, #1024	; 0x400
    6d28:	add	r0, r6, #1024	; 0x400
    6d2c:	add	r2, r8, #128	; 0x80
    6d30:	cmp	r1, r3
    6d34:	blt	6cb4 <ReadCompressedDoubleData+0x1730>
    6d38:	ldr	r0, [fp, #8]
    6d3c:	add	r5, sp, #24
    6d40:	mov	r4, sl
    6d44:	mov	r2, r5
    6d48:	sub	r7, r0, r1
    6d4c:	ldr	r0, [sp, #8]
    6d50:	ldr	r1, [sp, #16]
    6d54:	mul	r3, r7, r0
    6d58:	ldr	r0, [sp, #20]
    6d5c:	str	r3, [sp, #20]
    6d60:	bl	32fc <InflateData>
    6d64:	cmp	r7, #1
    6d68:	blt	6f98 <ReadCompressedDoubleData+0x1a14>
    6d6c:	mov	r2, #0
    6d70:	beq	6dd4 <ReadCompressedDoubleData+0x1850>
    6d74:	ldr	r0, [sp, #12]
    6d78:	mov	r1, r7
    6d7c:	sub	r0, r0, r4
    6d80:	bic	r4, r0, #1
    6d84:	bic	r0, r1, #1
    6d88:	str	r0, [sp, #16]
    6d8c:	vld1.64	{d8-d9}, [r5]!
    6d90:	vmov.32	r0, d9[0]
    6d94:	vmov.32	r1, d9[1]
    6d98:	bl	5f094 <__aeabi_l2d>
    6d9c:	vmov.32	r2, d8[0]
    6da0:	vmov.32	r3, d8[1]
    6da4:	vmov	d9, r0, r1
    6da8:	mov	r0, r2
    6dac:	mov	r1, r3
    6db0:	bl	5f094 <__aeabi_l2d>
    6db4:	vmov	d8, r0, r1
    6db8:	subs	r4, r4, #2
    6dbc:	vst1.64	{d8-d9}, [r6]!
    6dc0:	bne	6d8c <ReadCompressedDoubleData+0x1808>
    6dc4:	ldr	r2, [sp, #16]
    6dc8:	mov	r4, sl
    6dcc:	cmp	r7, r2
    6dd0:	beq	6f98 <ReadCompressedDoubleData+0x1a14>
    6dd4:	add	r0, sp, #24
    6dd8:	mov	r1, r4
    6ddc:	add	r4, r0, r2, lsl #3
    6de0:	add	r0, r2, r8
    6de4:	add	r5, r9, r0, lsl #3
    6de8:	ldr	r0, [sp, #12]
    6dec:	sub	r0, r0, r1
    6df0:	sub	r6, r0, r2
    6df4:	ldrd	r0, [r4]
    6df8:	bl	5f094 <__aeabi_l2d>
    6dfc:	strd	r0, [r5]
    6e00:	add	r5, r5, #8
    6e04:	add	r4, r4, #8
    6e08:	subs	r6, r6, #1
    6e0c:	bne	6df4 <ReadCompressedDoubleData+0x1870>
    6e10:	b	6f98 <ReadCompressedDoubleData+0x1a14>
    6e14:	lsl	r1, r2, #7
    6e18:	str	r2, [sp, #8]
    6e1c:	add	r0, r9, #1024	; 0x400
    6e20:	mov	r2, #128	; 0x80
    6e24:	add	r5, sp, #24
    6e28:	mov	r7, r9
    6e2c:	str	r1, [sp, #4]
    6e30:	sub	r1, r6, #128	; 0x80
    6e34:	str	r1, [sp, #12]
    6e38:	mov	r1, #0
    6e3c:	mov	sl, r1
    6e40:	mov	r6, r0
    6e44:	ldr	r0, [sp, #20]
    6e48:	ldr	r1, [sp, #16]
    6e4c:	ldr	r3, [sp, #4]
    6e50:	mov	r8, r2
    6e54:	mov	r2, r5
    6e58:	bl	32fc <InflateData>
    6e5c:	mov	r4, #0
    6e60:	add	r0, r5, r4
    6e64:	vld1.64	{d8-d9}, [r0]
    6e68:	vmov.32	r0, d9[0]
    6e6c:	vmov.32	r1, d9[1]
    6e70:	bl	5f080 <__aeabi_ul2d>
    6e74:	vmov.32	r2, d8[0]
    6e78:	vmov.32	r3, d8[1]
    6e7c:	vmov	d9, r0, r1
    6e80:	mov	r0, r2
    6e84:	mov	r1, r3
    6e88:	bl	5f080 <__aeabi_ul2d>
    6e8c:	vmov	d8, r0, r1
    6e90:	add	r0, r7, r4
    6e94:	add	r4, r4, #16
    6e98:	cmp	r4, #1024	; 0x400
    6e9c:	vst1.64	{d8-d9}, [r0]
    6ea0:	bne	6e60 <ReadCompressedDoubleData+0x18dc>
    6ea4:	ldr	r3, [sp, #12]
    6ea8:	add	r1, sl, #128	; 0x80
    6eac:	add	r7, r7, #1024	; 0x400
    6eb0:	add	r0, r6, #1024	; 0x400
    6eb4:	add	r2, r8, #128	; 0x80
    6eb8:	cmp	r1, r3
    6ebc:	blt	6e3c <ReadCompressedDoubleData+0x18b8>
    6ec0:	ldr	r0, [fp, #8]
    6ec4:	add	r5, sp, #24
    6ec8:	mov	r4, sl
    6ecc:	mov	r2, r5
    6ed0:	sub	r7, r0, r1
    6ed4:	ldr	r0, [sp, #8]
    6ed8:	ldr	r1, [sp, #16]
    6edc:	mul	r3, r7, r0
    6ee0:	ldr	r0, [sp, #20]
    6ee4:	str	r3, [sp, #20]
    6ee8:	bl	32fc <InflateData>
    6eec:	cmp	r7, #1
    6ef0:	blt	6f98 <ReadCompressedDoubleData+0x1a14>
    6ef4:	mov	r2, #0
    6ef8:	beq	6f5c <ReadCompressedDoubleData+0x19d8>
    6efc:	ldr	r0, [sp, #12]
    6f00:	mov	r1, r7
    6f04:	sub	r0, r0, r4
    6f08:	bic	r4, r0, #1
    6f0c:	bic	r0, r1, #1
    6f10:	str	r0, [sp, #16]
    6f14:	vld1.64	{d8-d9}, [r5]!
    6f18:	vmov.32	r0, d9[0]
    6f1c:	vmov.32	r1, d9[1]
    6f20:	bl	5f080 <__aeabi_ul2d>
    6f24:	vmov.32	r2, d8[0]
    6f28:	vmov.32	r3, d8[1]
    6f2c:	vmov	d9, r0, r1
    6f30:	mov	r0, r2
    6f34:	mov	r1, r3
    6f38:	bl	5f080 <__aeabi_ul2d>
    6f3c:	vmov	d8, r0, r1
    6f40:	subs	r4, r4, #2
    6f44:	vst1.64	{d8-d9}, [r6]!
    6f48:	bne	6f14 <ReadCompressedDoubleData+0x1990>
    6f4c:	ldr	r2, [sp, #16]
    6f50:	mov	r4, sl
    6f54:	cmp	r7, r2
    6f58:	beq	6f98 <ReadCompressedDoubleData+0x1a14>
    6f5c:	add	r0, sp, #24
    6f60:	mov	r1, r4
    6f64:	add	r4, r0, r2, lsl #3
    6f68:	add	r0, r2, r8
    6f6c:	add	r5, r9, r0, lsl #3
    6f70:	ldr	r0, [sp, #12]
    6f74:	sub	r0, r0, r1
    6f78:	sub	r6, r0, r2
    6f7c:	ldrd	r0, [r4]
    6f80:	bl	5f080 <__aeabi_ul2d>
    6f84:	strd	r0, [r5]
    6f88:	add	r5, r5, #8
    6f8c:	add	r4, r4, #8
    6f90:	subs	r6, r6, #1
    6f94:	bne	6f7c <ReadCompressedDoubleData+0x19f8>
    6f98:	ldr	sl, [sp, #20]
    6f9c:	b	6c78 <ReadCompressedDoubleData+0x16f4>

00006fa0 <ReadSingleData>:
    6fa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6fa4:	add	fp, sp, #28
    6fa8:	sub	sp, sp, #4
    6fac:	vpush	{d8-d9}
    6fb0:	sub	sp, sp, #2128	; 0x850
    6fb4:	mov	r4, r0
    6fb8:	mov	r0, #0
    6fbc:	cmp	r4, #0
    6fc0:	beq	6fd8 <ReadSingleData+0x38>
    6fc4:	cmp	r1, #0
    6fc8:	mov	r6, r1
    6fcc:	ldrne	r1, [r4]
    6fd0:	cmpne	r1, #0
    6fd4:	bne	6fe8 <ReadSingleData+0x48>
    6fd8:	sub	sp, fp, #48	; 0x30
    6fdc:	vpop	{d8-d9}
    6fe0:	add	sp, sp, #4
    6fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6fe8:	mov	r0, r2
    6fec:	mov	r8, r3
    6ff0:	mov	r5, r2
    6ff4:	bl	1924 <Mat_SizeOf@plt>
    6ff8:	mov	ip, r0
    6ffc:	sub	r0, r5, #1
    7000:	mov	r9, #0
    7004:	str	r4, [sp, #28]
    7008:	cmp	r0, #11
    700c:	bhi	8b18 <ReadSingleData+0x1b78>
    7010:	add	r1, pc, #4
    7014:	ldr	r0, [r1, r0, lsl #2]
    7018:	add	pc, r1, r0
    701c:	.word	0x00000030
    7020:	.word	0x000000dc
    7024:	.word	0x00000188
    7028:	.word	0x000001ec
    702c:	.word	0x00000250
    7030:	.word	0x000002b4
    7034:	.word	0x00000318
    7038:	.word	0x00001afc
    703c:	.word	0x00000374
    7040:	.word	0x00001afc
    7044:	.word	0x00001afc
    7048:	.word	0x000003d4
    704c:	cmp	r8, #256	; 0x100
    7050:	bgt	745c <ReadSingleData+0x4bc>
    7054:	ldr	r3, [r4]
    7058:	add	r4, sp, #72	; 0x48
    705c:	mov	r1, ip
    7060:	mov	r2, r8
    7064:	mov	r5, ip
    7068:	mov	r0, r4
    706c:	bl	18b8 <fread@plt>
    7070:	mov	r9, r0
    7074:	cmp	r8, #1
    7078:	blt	8b78 <ReadSingleData+0x1bd8>
    707c:	mov	r0, #0
    7080:	cmp	r8, #4
    7084:	mov	ip, r5
    7088:	bcc	70c8 <ReadSingleData+0x128>
    708c:	bic	r0, r8, #3
    7090:	add	r1, sp, #48	; 0x30
    7094:	mov	r3, r6
    7098:	mov	r2, r0
    709c:	ldr	r7, [r4], #4
    70a0:	subs	r2, r2, #4
    70a4:	str	r7, [sp, #48]	; 0x30
    70a8:	vld1.32	{d16[0]}, [r1 :32]
    70ac:	vmovl.s8	q8, d16
    70b0:	vmovl.s16	q8, d16
    70b4:	vcvt.f32.s32	q8, q8
    70b8:	vst1.32	{d16-d17}, [r3]!
    70bc:	bne	709c <ReadSingleData+0xfc>
    70c0:	cmp	r0, r8
    70c4:	beq	8ec8 <ReadSingleData+0x1f28>
    70c8:	add	r3, sp, #72	; 0x48
    70cc:	sub	r1, r8, r0
    70d0:	add	r2, r6, r0, lsl #2
    70d4:	add	r0, r3, r0
    70d8:	ldrsb	r3, [r0], #1
    70dc:	subs	r1, r1, #1
    70e0:	vmov	s0, r3
    70e4:	vcvt.f32.s32	s0, s0
    70e8:	vstr	s0, [r2]
    70ec:	add	r2, r2, #4
    70f0:	bne	70d8 <ReadSingleData+0x138>
    70f4:	b	8ec8 <ReadSingleData+0x1f28>
    70f8:	cmp	r8, #256	; 0x100
    70fc:	bgt	75c0 <ReadSingleData+0x620>
    7100:	ldr	r3, [r4]
    7104:	add	r4, sp, #72	; 0x48
    7108:	mov	r1, ip
    710c:	mov	r2, r8
    7110:	mov	r5, ip
    7114:	mov	r0, r4
    7118:	bl	18b8 <fread@plt>
    711c:	mov	r9, r0
    7120:	cmp	r8, #1
    7124:	blt	8b78 <ReadSingleData+0x1bd8>
    7128:	mov	r0, #0
    712c:	cmp	r8, #4
    7130:	mov	ip, r5
    7134:	bcc	7174 <ReadSingleData+0x1d4>
    7138:	bic	r0, r8, #3
    713c:	add	r1, sp, #60	; 0x3c
    7140:	mov	r3, r6
    7144:	mov	r2, r0
    7148:	ldr	r7, [r4], #4
    714c:	subs	r2, r2, #4
    7150:	str	r7, [sp, #60]	; 0x3c
    7154:	vld1.32	{d16[0]}, [r1 :32]
    7158:	vmovl.u8	q8, d16
    715c:	vmovl.u16	q8, d16
    7160:	vcvt.f32.u32	q8, q8
    7164:	vst1.32	{d16-d17}, [r3]!
    7168:	bne	7148 <ReadSingleData+0x1a8>
    716c:	cmp	r0, r8
    7170:	beq	8ec8 <ReadSingleData+0x1f28>
    7174:	add	r3, sp, #72	; 0x48
    7178:	sub	r1, r8, r0
    717c:	add	r2, r6, r0, lsl #2
    7180:	add	r0, r3, r0
    7184:	ldrb	r3, [r0], #1
    7188:	subs	r1, r1, #1
    718c:	vmov	s0, r3
    7190:	vcvt.f32.u32	s0, s0
    7194:	vstr	s0, [r2]
    7198:	add	r2, r2, #4
    719c:	bne	7184 <ReadSingleData+0x1e4>
    71a0:	b	8ec8 <ReadSingleData+0x1f28>
    71a4:	ldr	r0, [r4, #20]
    71a8:	cmp	r0, #0
    71ac:	beq	7724 <ReadSingleData+0x784>
    71b0:	cmp	r8, #256	; 0x100
    71b4:	bgt	7b00 <ReadSingleData+0xb60>
    71b8:	ldr	r3, [r4]
    71bc:	add	r4, sp, #72	; 0x48
    71c0:	mov	r1, ip
    71c4:	mov	r2, r8
    71c8:	mov	r5, ip
    71cc:	mov	r0, r4
    71d0:	bl	18b8 <fread@plt>
    71d4:	mov	r9, r0
    71d8:	cmp	r8, #1
    71dc:	blt	8b78 <ReadSingleData+0x1bd8>
    71e0:	mov	r0, r4
    71e4:	bl	1c18 <Mat_int16Swap>
    71e8:	vmov	s0, r0
    71ec:	subs	r8, r8, #1
    71f0:	add	r4, r4, #2
    71f4:	vcvt.f32.s32	s0, s0
    71f8:	vstr	s0, [r6]
    71fc:	add	r6, r6, #4
    7200:	bne	71e0 <ReadSingleData+0x240>
    7204:	b	8b78 <ReadSingleData+0x1bd8>
    7208:	ldr	r0, [r4, #20]
    720c:	cmp	r0, #0
    7210:	beq	77c0 <ReadSingleData+0x820>
    7214:	cmp	r8, #256	; 0x100
    7218:	bgt	7bf0 <ReadSingleData+0xc50>
    721c:	ldr	r3, [r4]
    7220:	add	r4, sp, #72	; 0x48
    7224:	mov	r1, ip
    7228:	mov	r2, r8
    722c:	mov	r5, ip
    7230:	mov	r0, r4
    7234:	bl	18b8 <fread@plt>
    7238:	mov	r9, r0
    723c:	cmp	r8, #1
    7240:	blt	8b78 <ReadSingleData+0x1bd8>
    7244:	mov	r0, r4
    7248:	bl	1c2c <Mat_uint16Swap>
    724c:	vmov	s0, r0
    7250:	subs	r8, r8, #1
    7254:	add	r4, r4, #2
    7258:	vcvt.f32.u32	s0, s0
    725c:	vstr	s0, [r6]
    7260:	add	r6, r6, #4
    7264:	bne	7244 <ReadSingleData+0x2a4>
    7268:	b	8b78 <ReadSingleData+0x1bd8>
    726c:	ldr	r0, [r4, #20]
    7270:	cmp	r0, #0
    7274:	beq	785c <ReadSingleData+0x8bc>
    7278:	cmp	r8, #256	; 0x100
    727c:	bgt	7ce0 <ReadSingleData+0xd40>
    7280:	ldr	r3, [r4]
    7284:	add	r4, sp, #72	; 0x48
    7288:	mov	r1, ip
    728c:	mov	r2, r8
    7290:	mov	r5, ip
    7294:	mov	r0, r4
    7298:	bl	18b8 <fread@plt>
    729c:	mov	r9, r0
    72a0:	cmp	r8, #1
    72a4:	blt	8b78 <ReadSingleData+0x1bd8>
    72a8:	mov	r0, r4
    72ac:	bl	1bf0 <Mat_int32Swap>
    72b0:	vmov	s0, r0
    72b4:	subs	r8, r8, #1
    72b8:	add	r4, r4, #4
    72bc:	vcvt.f32.s32	s0, s0
    72c0:	vstr	s0, [r6]
    72c4:	add	r6, r6, #4
    72c8:	bne	72a8 <ReadSingleData+0x308>
    72cc:	b	8b78 <ReadSingleData+0x1bd8>
    72d0:	ldr	r0, [r4, #20]
    72d4:	cmp	r0, #0
    72d8:	beq	78f4 <ReadSingleData+0x954>
    72dc:	cmp	r8, #256	; 0x100
    72e0:	bgt	7dd0 <ReadSingleData+0xe30>
    72e4:	ldr	r3, [r4]
    72e8:	add	r4, sp, #72	; 0x48
    72ec:	mov	r1, ip
    72f0:	mov	r2, r8
    72f4:	mov	r5, ip
    72f8:	mov	r0, r4
    72fc:	bl	18b8 <fread@plt>
    7300:	mov	r9, r0
    7304:	cmp	r8, #1
    7308:	blt	8b78 <ReadSingleData+0x1bd8>
    730c:	mov	r0, r4
    7310:	bl	1c04 <Mat_uint32Swap>
    7314:	vmov	s0, r0
    7318:	subs	r8, r8, #1
    731c:	add	r4, r4, #4
    7320:	vcvt.f32.u32	s0, s0
    7324:	vstr	s0, [r6]
    7328:	add	r6, r6, #4
    732c:	bne	730c <ReadSingleData+0x36c>
    7330:	b	8b78 <ReadSingleData+0x1bd8>
    7334:	ldr	r0, [r4, #20]
    7338:	cmp	r0, #0
    733c:	beq	798c <ReadSingleData+0x9ec>
    7340:	cmp	r8, #256	; 0x100
    7344:	bgt	7ec0 <ReadSingleData+0xf20>
    7348:	ldr	r3, [r4]
    734c:	add	r4, sp, #72	; 0x48
    7350:	mov	r1, ip
    7354:	mov	r2, r8
    7358:	mov	r5, ip
    735c:	mov	r0, r4
    7360:	bl	18b8 <fread@plt>
    7364:	mov	r9, r0
    7368:	cmp	r8, #1
    736c:	blt	8b78 <ReadSingleData+0x1bd8>
    7370:	mov	r0, r4
    7374:	bl	1c44 <Mat_floatSwap>
    7378:	vstr	s0, [r6]
    737c:	subs	r8, r8, #1
    7380:	add	r6, r6, #4
    7384:	add	r4, r4, #4
    7388:	bne	7370 <ReadSingleData+0x3d0>
    738c:	b	8b78 <ReadSingleData+0x1bd8>
    7390:	ldr	r0, [r4, #20]
    7394:	cmp	r0, #0
    7398:	beq	79c8 <ReadSingleData+0xa28>
    739c:	cmp	r8, #256	; 0x100
    73a0:	bgt	7fa0 <ReadSingleData+0x1000>
    73a4:	ldr	r3, [r4]
    73a8:	add	r4, sp, #72	; 0x48
    73ac:	mov	r1, ip
    73b0:	mov	r2, r8
    73b4:	mov	r5, ip
    73b8:	mov	r0, r4
    73bc:	bl	18b8 <fread@plt>
    73c0:	mov	r9, r0
    73c4:	cmp	r8, #1
    73c8:	blt	8b78 <ReadSingleData+0x1bd8>
    73cc:	mov	r0, r4
    73d0:	bl	1c88 <Mat_doubleSwap>
    73d4:	vcvt.f32.f64	s0, d0
    73d8:	subs	r8, r8, #1
    73dc:	add	r4, r4, #8
    73e0:	vstr	s0, [r6]
    73e4:	add	r6, r6, #4
    73e8:	bne	73cc <ReadSingleData+0x42c>
    73ec:	b	8b78 <ReadSingleData+0x1bd8>
    73f0:	ldr	r0, [r4, #20]
    73f4:	cmp	r0, #0
    73f8:	beq	7a68 <ReadSingleData+0xac8>
    73fc:	cmp	r8, #256	; 0x100
    7400:	bgt	809c <ReadSingleData+0x10fc>
    7404:	ldr	r3, [r4]
    7408:	add	r7, sp, #72	; 0x48
    740c:	mov	r1, ip
    7410:	mov	r2, r8
    7414:	mov	sl, ip
    7418:	mov	r0, r7
    741c:	bl	18b8 <fread@plt>
    7420:	mov	r9, r0
    7424:	cmp	r8, #1
    7428:	blt	8a4c <ReadSingleData+0x1aac>
    742c:	str	r5, [sp, #8]
    7430:	mov	r4, r8
    7434:	mov	r5, r6
    7438:	mov	r0, r7
    743c:	bl	1b84 <Mat_int64Swap>
    7440:	bl	5f2c8 <__aeabi_l2f>
    7444:	str	r0, [r5], #4
    7448:	subs	r4, r4, #1
    744c:	add	r7, r7, #8
    7450:	bne	7438 <ReadSingleData+0x498>
    7454:	mov	ip, sl
    7458:	b	8b10 <ReadSingleData+0x1b70>
    745c:	sub	r1, r8, #256	; 0x100
    7460:	add	r0, r6, #1024	; 0x400
    7464:	mov	r2, #256	; 0x100
    7468:	add	r7, sp, #72	; 0x48
    746c:	add	r4, sp, #56	; 0x38
    7470:	mov	r5, r6
    7474:	mov	r9, #0
    7478:	str	ip, [sp, #24]
    747c:	str	r8, [sp, #12]
    7480:	str	r6, [sp, #4]
    7484:	str	r1, [sp, #20]
    7488:	mov	r1, #0
    748c:	mov	r6, r0
    7490:	ldr	r0, [sp, #28]
    7494:	mov	sl, r1
    7498:	ldr	r1, [sp, #24]
    749c:	mov	r8, r2
    74a0:	mov	r2, #256	; 0x100
    74a4:	ldr	r3, [r0]
    74a8:	mov	r0, r7
    74ac:	bl	18b8 <fread@plt>
    74b0:	mov	r1, r5
    74b4:	mov	r2, #0
    74b8:	ldr	r3, [r7, r2]
    74bc:	add	r2, r2, #4
    74c0:	cmp	r2, #256	; 0x100
    74c4:	str	r3, [sp, #56]	; 0x38
    74c8:	vld1.32	{d16[0]}, [r4 :32]
    74cc:	vmovl.s8	q8, d16
    74d0:	vmovl.s16	q8, d16
    74d4:	vcvt.f32.s32	q8, q8
    74d8:	vst1.32	{d16-d17}, [r1]!
    74dc:	bne	74b8 <ReadSingleData+0x518>
    74e0:	ldr	r3, [sp, #20]
    74e4:	add	r1, sl, #256	; 0x100
    74e8:	add	r9, r0, r9
    74ec:	add	r5, r5, #1024	; 0x400
    74f0:	add	r0, r6, #1024	; 0x400
    74f4:	add	r2, r8, #256	; 0x100
    74f8:	cmp	r1, r3
    74fc:	blt	748c <ReadSingleData+0x4ec>
    7500:	ldr	r0, [sp, #12]
    7504:	cmp	r1, r0
    7508:	bge	8ec4 <ReadSingleData+0x1f24>
    750c:	sub	r7, r0, r1
    7510:	ldr	r0, [sp, #28]
    7514:	ldr	r1, [sp, #24]
    7518:	add	r4, sp, #72	; 0x48
    751c:	mov	r2, r7
    7520:	ldr	r3, [r0]
    7524:	mov	r0, r4
    7528:	bl	18b8 <fread@plt>
    752c:	add	r9, r0, r9
    7530:	cmp	r7, #1
    7534:	blt	8ec4 <ReadSingleData+0x1f24>
    7538:	mov	r0, #0
    753c:	cmp	r7, #4
    7540:	bcc	7584 <ReadSingleData+0x5e4>
    7544:	ldr	r0, [sp, #20]
    7548:	add	r2, sp, #52	; 0x34
    754c:	sub	r0, r0, sl
    7550:	bic	r1, r0, #3
    7554:	bic	r0, r7, #3
    7558:	ldr	r3, [r4], #4
    755c:	subs	r1, r1, #4
    7560:	str	r3, [sp, #52]	; 0x34
    7564:	vld1.32	{d16[0]}, [r2 :32]
    7568:	vmovl.s8	q8, d16
    756c:	vmovl.s16	q8, d16
    7570:	vcvt.f32.s32	q8, q8
    7574:	vst1.32	{d16-d17}, [r6]!
    7578:	bne	7558 <ReadSingleData+0x5b8>
    757c:	cmp	r7, r0
    7580:	beq	8ec4 <ReadSingleData+0x1f24>
    7584:	ldr	r3, [sp, #4]
    7588:	add	r2, r0, r8
    758c:	add	r1, sp, #72	; 0x48
    7590:	add	r1, r1, r0
    7594:	add	r2, r3, r2, lsl #2
    7598:	ldr	r3, [sp, #20]
    759c:	sub	r3, r3, sl
    75a0:	sub	r0, r3, r0
    75a4:	ldrsb	r3, [r1], #1
    75a8:	subs	r0, r0, #1
    75ac:	vmov	s0, r3
    75b0:	vcvt.f32.s32	s0, s0
    75b4:	vstmia	r2!, {s0}
    75b8:	bne	75a4 <ReadSingleData+0x604>
    75bc:	b	8ec4 <ReadSingleData+0x1f24>
    75c0:	sub	r1, r8, #256	; 0x100
    75c4:	add	r0, r6, #1024	; 0x400
    75c8:	mov	r3, #0
    75cc:	mov	r2, #256	; 0x100
    75d0:	add	r7, sp, #72	; 0x48
    75d4:	add	r5, sp, #68	; 0x44
    75d8:	mov	r9, #0
    75dc:	str	ip, [sp, #24]
    75e0:	str	r8, [sp, #12]
    75e4:	str	r6, [sp, #4]
    75e8:	str	r1, [sp, #20]
    75ec:	mov	r4, r0
    75f0:	ldr	r0, [sp, #28]
    75f4:	mov	sl, r3
    75f8:	ldr	r1, [sp, #24]
    75fc:	mov	r8, r2
    7600:	mov	r2, #256	; 0x100
    7604:	ldr	r3, [r0]
    7608:	mov	r0, r7
    760c:	bl	18b8 <fread@plt>
    7610:	mov	r1, r6
    7614:	mov	r2, #0
    7618:	ldr	r3, [r7, r2]
    761c:	add	r2, r2, #4
    7620:	cmp	r2, #256	; 0x100
    7624:	str	r3, [sp, #68]	; 0x44
    7628:	vld1.32	{d16[0]}, [r5 :32]
    762c:	vmovl.u8	q8, d16
    7630:	vmovl.u16	q8, d16
    7634:	vcvt.f32.u32	q8, q8
    7638:	vst1.32	{d16-d17}, [r1]!
    763c:	bne	7618 <ReadSingleData+0x678>
    7640:	ldr	r1, [sp, #20]
    7644:	add	r3, sl, #256	; 0x100
    7648:	add	r9, r0, r9
    764c:	add	r6, r6, #1024	; 0x400
    7650:	add	r0, r4, #1024	; 0x400
    7654:	add	r2, r8, #256	; 0x100
    7658:	cmp	r3, r1
    765c:	blt	75ec <ReadSingleData+0x64c>
    7660:	ldr	r0, [sp, #12]
    7664:	cmp	r3, r0
    7668:	bge	8ec4 <ReadSingleData+0x1f24>
    766c:	sub	r6, r0, r3
    7670:	ldr	r0, [sp, #28]
    7674:	ldr	r1, [sp, #24]
    7678:	add	r7, sp, #72	; 0x48
    767c:	mov	r2, r6
    7680:	ldr	r3, [r0]
    7684:	mov	r0, r7
    7688:	mov	r5, r1
    768c:	bl	18b8 <fread@plt>
    7690:	add	r9, r0, r9
    7694:	cmp	r6, #1
    7698:	blt	8b78 <ReadSingleData+0x1bd8>
    769c:	mov	r0, #0
    76a0:	cmp	r6, #4
    76a4:	bcc	76e8 <ReadSingleData+0x748>
    76a8:	ldr	r0, [sp, #20]
    76ac:	add	r2, sp, #64	; 0x40
    76b0:	sub	r0, r0, sl
    76b4:	bic	r1, r0, #3
    76b8:	bic	r0, r6, #3
    76bc:	ldr	r3, [r7], #4
    76c0:	subs	r1, r1, #4
    76c4:	str	r3, [sp, #64]	; 0x40
    76c8:	vld1.32	{d16[0]}, [r2 :32]
    76cc:	vmovl.u8	q8, d16
    76d0:	vmovl.u16	q8, d16
    76d4:	vcvt.f32.u32	q8, q8
    76d8:	vst1.32	{d16-d17}, [r4]!
    76dc:	bne	76bc <ReadSingleData+0x71c>
    76e0:	cmp	r6, r0
    76e4:	beq	8b78 <ReadSingleData+0x1bd8>
    76e8:	ldr	r3, [sp, #4]
    76ec:	add	r2, r0, r8
    76f0:	add	r1, sp, #72	; 0x48
    76f4:	add	r1, r1, r0
    76f8:	add	r2, r3, r2, lsl #2
    76fc:	ldr	r3, [sp, #20]
    7700:	sub	r3, r3, sl
    7704:	sub	r0, r3, r0
    7708:	ldrb	r3, [r1], #1
    770c:	subs	r0, r0, #1
    7710:	vmov	s0, r3
    7714:	vcvt.f32.u32	s0, s0
    7718:	vstmia	r2!, {s0}
    771c:	bne	7708 <ReadSingleData+0x768>
    7720:	b	8b78 <ReadSingleData+0x1bd8>
    7724:	cmp	r8, #256	; 0x100
    7728:	bgt	8198 <ReadSingleData+0x11f8>
    772c:	ldr	r3, [r4]
    7730:	add	r4, sp, #72	; 0x48
    7734:	mov	r1, ip
    7738:	mov	r2, r8
    773c:	mov	r5, ip
    7740:	mov	r0, r4
    7744:	bl	18b8 <fread@plt>
    7748:	mov	r9, r0
    774c:	cmp	r8, #1
    7750:	blt	8b78 <ReadSingleData+0x1bd8>
    7754:	mov	r0, #0
    7758:	cmp	r8, #4
    775c:	mov	ip, r5
    7760:	bcc	7790 <ReadSingleData+0x7f0>
    7764:	bic	r0, r8, #3
    7768:	mov	r2, r6
    776c:	mov	r1, r0
    7770:	vld1.16	{d16}, [r4]!
    7774:	subs	r1, r1, #4
    7778:	vmovl.s16	q8, d16
    777c:	vcvt.f32.s32	q8, q8
    7780:	vst1.32	{d16-d17}, [r2]!
    7784:	bne	7770 <ReadSingleData+0x7d0>
    7788:	cmp	r0, r8
    778c:	beq	8ec8 <ReadSingleData+0x1f28>
    7790:	add	r3, sp, #72	; 0x48
    7794:	sub	r1, r8, r0
    7798:	add	r2, r6, r0, lsl #2
    779c:	add	r0, r3, r0, lsl #1
    77a0:	ldrsh	r3, [r0], #2
    77a4:	subs	r1, r1, #1
    77a8:	vmov	s0, r3
    77ac:	vcvt.f32.s32	s0, s0
    77b0:	vstr	s0, [r2]
    77b4:	add	r2, r2, #4
    77b8:	bne	77a0 <ReadSingleData+0x800>
    77bc:	b	8ec8 <ReadSingleData+0x1f28>
    77c0:	cmp	r8, #256	; 0x100
    77c4:	bgt	82f4 <ReadSingleData+0x1354>
    77c8:	ldr	r3, [r4]
    77cc:	add	r4, sp, #72	; 0x48
    77d0:	mov	r1, ip
    77d4:	mov	r2, r8
    77d8:	mov	r5, ip
    77dc:	mov	r0, r4
    77e0:	bl	18b8 <fread@plt>
    77e4:	mov	r9, r0
    77e8:	cmp	r8, #1
    77ec:	blt	8b78 <ReadSingleData+0x1bd8>
    77f0:	mov	r0, #0
    77f4:	cmp	r8, #4
    77f8:	mov	ip, r5
    77fc:	bcc	782c <ReadSingleData+0x88c>
    7800:	bic	r0, r8, #3
    7804:	mov	r2, r6
    7808:	mov	r1, r0
    780c:	vld1.16	{d16}, [r4]!
    7810:	subs	r1, r1, #4
    7814:	vmovl.u16	q8, d16
    7818:	vcvt.f32.u32	q8, q8
    781c:	vst1.32	{d16-d17}, [r2]!
    7820:	bne	780c <ReadSingleData+0x86c>
    7824:	cmp	r0, r8
    7828:	beq	8ec8 <ReadSingleData+0x1f28>
    782c:	add	r3, sp, #72	; 0x48
    7830:	sub	r1, r8, r0
    7834:	add	r2, r6, r0, lsl #2
    7838:	add	r0, r3, r0, lsl #1
    783c:	ldrh	r3, [r0], #2
    7840:	subs	r1, r1, #1
    7844:	vmov	s0, r3
    7848:	vcvt.f32.u32	s0, s0
    784c:	vstr	s0, [r2]
    7850:	add	r2, r2, #4
    7854:	bne	783c <ReadSingleData+0x89c>
    7858:	b	8ec8 <ReadSingleData+0x1f28>
    785c:	cmp	r8, #256	; 0x100
    7860:	bgt	8450 <ReadSingleData+0x14b0>
    7864:	ldr	r3, [r4]
    7868:	add	r4, sp, #72	; 0x48
    786c:	mov	r1, ip
    7870:	mov	r2, r8
    7874:	mov	r5, ip
    7878:	mov	r0, r4
    787c:	bl	18b8 <fread@plt>
    7880:	mov	r9, r0
    7884:	cmp	r8, #1
    7888:	blt	8b78 <ReadSingleData+0x1bd8>
    788c:	mov	r0, #0
    7890:	cmp	r8, #4
    7894:	mov	ip, r5
    7898:	bcc	78c4 <ReadSingleData+0x924>
    789c:	bic	r0, r8, #3
    78a0:	mov	r2, r6
    78a4:	mov	r1, r0
    78a8:	vld1.32	{d16-d17}, [r4]!
    78ac:	subs	r1, r1, #4
    78b0:	vcvt.f32.s32	q8, q8
    78b4:	vst1.32	{d16-d17}, [r2]!
    78b8:	bne	78a8 <ReadSingleData+0x908>
    78bc:	cmp	r0, r8
    78c0:	beq	8ec8 <ReadSingleData+0x1f28>
    78c4:	add	r3, sp, #72	; 0x48
    78c8:	sub	r1, r8, r0
    78cc:	add	r2, r6, r0, lsl #2
    78d0:	add	r0, r3, r0, lsl #2
    78d4:	ldr	r3, [r0], #4
    78d8:	subs	r1, r1, #1
    78dc:	vmov	s0, r3
    78e0:	vcvt.f32.s32	s0, s0
    78e4:	vstr	s0, [r2]
    78e8:	add	r2, r2, #4
    78ec:	bne	78d4 <ReadSingleData+0x934>
    78f0:	b	8ec8 <ReadSingleData+0x1f28>
    78f4:	cmp	r8, #256	; 0x100
    78f8:	bgt	8590 <ReadSingleData+0x15f0>
    78fc:	ldr	r3, [r4]
    7900:	add	r4, sp, #72	; 0x48
    7904:	mov	r1, ip
    7908:	mov	r2, r8
    790c:	mov	r5, ip
    7910:	mov	r0, r4
    7914:	bl	18b8 <fread@plt>
    7918:	mov	r9, r0
    791c:	cmp	r8, #1
    7920:	blt	8b78 <ReadSingleData+0x1bd8>
    7924:	mov	r0, #0
    7928:	cmp	r8, #4
    792c:	mov	ip, r5
    7930:	bcc	795c <ReadSingleData+0x9bc>
    7934:	bic	r0, r8, #3
    7938:	mov	r2, r6
    793c:	mov	r1, r0
    7940:	vld1.32	{d16-d17}, [r4]!
    7944:	subs	r1, r1, #4
    7948:	vcvt.f32.u32	q8, q8
    794c:	vst1.32	{d16-d17}, [r2]!
    7950:	bne	7940 <ReadSingleData+0x9a0>
    7954:	cmp	r0, r8
    7958:	beq	8ec8 <ReadSingleData+0x1f28>
    795c:	add	r3, sp, #72	; 0x48
    7960:	sub	r1, r8, r0
    7964:	add	r2, r6, r0, lsl #2
    7968:	add	r0, r3, r0, lsl #2
    796c:	ldr	r3, [r0], #4
    7970:	subs	r1, r1, #1
    7974:	vmov	s0, r3
    7978:	vcvt.f32.u32	s0, s0
    797c:	vstr	s0, [r2]
    7980:	add	r2, r2, #4
    7984:	bne	796c <ReadSingleData+0x9cc>
    7988:	b	8ec8 <ReadSingleData+0x1f28>
    798c:	cmp	r8, #256	; 0x100
    7990:	bgt	86d0 <ReadSingleData+0x1730>
    7994:	ldr	r3, [r4]
    7998:	add	r0, sp, #72	; 0x48
    799c:	mov	r1, ip
    79a0:	mov	r2, r8
    79a4:	mov	r4, ip
    79a8:	bl	18b8 <fread@plt>
    79ac:	mov	r9, r0
    79b0:	cmp	r8, #1
    79b4:	blt	877c <ReadSingleData+0x17dc>
    79b8:	lsl	r2, r8, #2
    79bc:	add	r1, sp, #72	; 0x48
    79c0:	mov	r0, r6
    79c4:	b	8778 <ReadSingleData+0x17d8>
    79c8:	cmp	r8, #256	; 0x100
    79cc:	str	r6, [sp, #4]
    79d0:	bgt	8784 <ReadSingleData+0x17e4>
    79d4:	ldr	r3, [r4]
    79d8:	add	r4, sp, #72	; 0x48
    79dc:	mov	r1, ip
    79e0:	mov	r2, r8
    79e4:	mov	r5, ip
    79e8:	mov	r0, r4
    79ec:	bl	18b8 <fread@plt>
    79f0:	mov	r9, r0
    79f4:	cmp	r8, #1
    79f8:	blt	8b78 <ReadSingleData+0x1bd8>
    79fc:	ldr	r3, [sp, #4]
    7a00:	mov	r0, #0
    7a04:	mov	ip, r5
    7a08:	beq	7a38 <ReadSingleData+0xa98>
    7a0c:	bic	r0, r8, #1
    7a10:	mov	r2, r3
    7a14:	mov	r1, r0
    7a18:	vld1.64	{d16-d17}, [r4]!
    7a1c:	subs	r1, r1, #2
    7a20:	vcvt.f32.f64	s1, d17
    7a24:	vcvt.f32.f64	s0, d16
    7a28:	vst1.32	{d0}, [r2]!
    7a2c:	bne	7a18 <ReadSingleData+0xa78>
    7a30:	cmp	r0, r8
    7a34:	beq	8ec8 <ReadSingleData+0x1f28>
    7a38:	add	r2, r3, r0, lsl #2
    7a3c:	add	r3, sp, #72	; 0x48
    7a40:	sub	r1, r8, r0
    7a44:	add	r0, r3, r0, lsl #3
    7a48:	vldr	d16, [r0]
    7a4c:	subs	r1, r1, #1
    7a50:	add	r0, r0, #8
    7a54:	vcvt.f32.f64	s0, d16
    7a58:	vstr	s0, [r2]
    7a5c:	add	r2, r2, #4
    7a60:	bne	7a48 <ReadSingleData+0xaa8>
    7a64:	b	8ec8 <ReadSingleData+0x1f28>
    7a68:	cmp	r8, #256	; 0x100
    7a6c:	str	ip, [sp, #24]
    7a70:	bgt	88d0 <ReadSingleData+0x1930>
    7a74:	ldr	r3, [r4]
    7a78:	add	r7, sp, #72	; 0x48
    7a7c:	mov	r1, ip
    7a80:	mov	r2, r8
    7a84:	mov	r0, r7
    7a88:	bl	18b8 <fread@plt>
    7a8c:	mov	r9, r0
    7a90:	cmp	r8, #1
    7a94:	blt	8ab4 <ReadSingleData+0x1b14>
    7a98:	mov	r4, #0
    7a9c:	str	r5, [sp, #8]
    7aa0:	beq	8a7c <ReadSingleData+0x1adc>
    7aa4:	bic	r4, r8, #1
    7aa8:	mov	sl, r8
    7aac:	mov	r8, r6
    7ab0:	mov	r5, r4
    7ab4:	vld1.64	{d8-d9}, [r7]!
    7ab8:	vmov.32	r0, d9[0]
    7abc:	vmov.32	r1, d9[1]
    7ac0:	bl	5f2c8 <__aeabi_l2f>
    7ac4:	vmov.32	r2, d8[0]
    7ac8:	vmov.32	r1, d8[1]
    7acc:	vmov	s17, r0
    7ad0:	mov	r0, r2
    7ad4:	bl	5f2c8 <__aeabi_l2f>
    7ad8:	vmov	s16, r0
    7adc:	subs	r5, r5, #2
    7ae0:	vst1.32	{d8}, [r6]!
    7ae4:	bne	7ab4 <ReadSingleData+0xb14>
    7ae8:	mov	r6, r8
    7aec:	cmp	r4, sl
    7af0:	mov	r8, sl
    7af4:	bne	8a7c <ReadSingleData+0x1adc>
    7af8:	ldr	ip, [sp, #24]
    7afc:	b	8b10 <ReadSingleData+0x1b70>
    7b00:	sub	r0, r8, #256	; 0x100
    7b04:	add	r1, r6, #1024	; 0x400
    7b08:	add	r7, sp, #72	; 0x48
    7b0c:	mov	r9, #0
    7b10:	str	ip, [sp, #24]
    7b14:	str	r8, [sp, #12]
    7b18:	str	r0, [sp, #16]
    7b1c:	mov	r0, #0
    7b20:	mov	sl, r1
    7b24:	ldr	r3, [r4]
    7b28:	ldr	r1, [sp, #24]
    7b2c:	str	r0, [sp, #20]
    7b30:	mov	r0, r7
    7b34:	mov	r2, #256	; 0x100
    7b38:	bl	18b8 <fread@plt>
    7b3c:	mov	r4, r0
    7b40:	mov	r8, r6
    7b44:	mov	r5, #0
    7b48:	add	r0, r7, r5
    7b4c:	bl	1c18 <Mat_int16Swap>
    7b50:	vmov	s0, r0
    7b54:	add	r5, r5, #2
    7b58:	vcvt.f32.s32	s0, s0
    7b5c:	cmp	r5, #512	; 0x200
    7b60:	vstmia	r6!, {s0}
    7b64:	bne	7b48 <ReadSingleData+0xba8>
    7b68:	ldr	r5, [sp, #20]
    7b6c:	ldr	r2, [sp, #16]
    7b70:	add	r9, r4, r9
    7b74:	ldr	r4, [sp, #28]
    7b78:	mov	r6, r8
    7b7c:	add	r1, sl, #1024	; 0x400
    7b80:	add	r6, r8, #1024	; 0x400
    7b84:	add	r0, r5, #256	; 0x100
    7b88:	cmp	r0, r2
    7b8c:	blt	7b20 <ReadSingleData+0xb80>
    7b90:	ldr	r1, [sp, #12]
    7b94:	cmp	r0, r1
    7b98:	bge	8ec4 <ReadSingleData+0x1f24>
    7b9c:	sub	r6, r1, r0
    7ba0:	ldr	r3, [r4]
    7ba4:	ldr	r1, [sp, #24]
    7ba8:	add	r4, sp, #72	; 0x48
    7bac:	mov	r0, r4
    7bb0:	mov	r2, r6
    7bb4:	bl	18b8 <fread@plt>
    7bb8:	add	r9, r0, r9
    7bbc:	cmp	r6, #1
    7bc0:	blt	8ec4 <ReadSingleData+0x1f24>
    7bc4:	ldr	r0, [sp, #16]
    7bc8:	sub	r6, r0, r5
    7bcc:	mov	r0, r4
    7bd0:	bl	1c18 <Mat_int16Swap>
    7bd4:	vmov	s0, r0
    7bd8:	subs	r6, r6, #1
    7bdc:	add	r4, r4, #2
    7be0:	vcvt.f32.s32	s0, s0
    7be4:	vstmia	sl!, {s0}
    7be8:	bne	7bcc <ReadSingleData+0xc2c>
    7bec:	b	8ec4 <ReadSingleData+0x1f24>
    7bf0:	sub	r0, r8, #256	; 0x100
    7bf4:	add	r1, r6, #1024	; 0x400
    7bf8:	add	r7, sp, #72	; 0x48
    7bfc:	mov	r9, #0
    7c00:	str	ip, [sp, #24]
    7c04:	str	r8, [sp, #12]
    7c08:	str	r0, [sp, #16]
    7c0c:	mov	r0, #0
    7c10:	mov	sl, r1
    7c14:	ldr	r3, [r4]
    7c18:	ldr	r1, [sp, #24]
    7c1c:	str	r0, [sp, #20]
    7c20:	mov	r0, r7
    7c24:	mov	r2, #256	; 0x100
    7c28:	bl	18b8 <fread@plt>
    7c2c:	mov	r4, r0
    7c30:	mov	r8, r6
    7c34:	mov	r5, #0
    7c38:	add	r0, r7, r5
    7c3c:	bl	1c2c <Mat_uint16Swap>
    7c40:	vmov	s0, r0
    7c44:	add	r5, r5, #2
    7c48:	vcvt.f32.u32	s0, s0
    7c4c:	cmp	r5, #512	; 0x200
    7c50:	vstmia	r6!, {s0}
    7c54:	bne	7c38 <ReadSingleData+0xc98>
    7c58:	ldr	r5, [sp, #20]
    7c5c:	ldr	r2, [sp, #16]
    7c60:	add	r9, r4, r9
    7c64:	ldr	r4, [sp, #28]
    7c68:	mov	r6, r8
    7c6c:	add	r1, sl, #1024	; 0x400
    7c70:	add	r6, r8, #1024	; 0x400
    7c74:	add	r0, r5, #256	; 0x100
    7c78:	cmp	r0, r2
    7c7c:	blt	7c10 <ReadSingleData+0xc70>
    7c80:	ldr	r1, [sp, #12]
    7c84:	cmp	r0, r1
    7c88:	bge	8ec4 <ReadSingleData+0x1f24>
    7c8c:	sub	r6, r1, r0
    7c90:	ldr	r3, [r4]
    7c94:	ldr	r1, [sp, #24]
    7c98:	add	r4, sp, #72	; 0x48
    7c9c:	mov	r0, r4
    7ca0:	mov	r2, r6
    7ca4:	bl	18b8 <fread@plt>
    7ca8:	add	r9, r0, r9
    7cac:	cmp	r6, #1
    7cb0:	blt	8ec4 <ReadSingleData+0x1f24>
    7cb4:	ldr	r0, [sp, #16]
    7cb8:	sub	r6, r0, r5
    7cbc:	mov	r0, r4
    7cc0:	bl	1c2c <Mat_uint16Swap>
    7cc4:	vmov	s0, r0
    7cc8:	subs	r6, r6, #1
    7ccc:	add	r4, r4, #2
    7cd0:	vcvt.f32.u32	s0, s0
    7cd4:	vstmia	sl!, {s0}
    7cd8:	bne	7cbc <ReadSingleData+0xd1c>
    7cdc:	b	8ec4 <ReadSingleData+0x1f24>
    7ce0:	sub	r0, r8, #256	; 0x100
    7ce4:	add	r1, r6, #1024	; 0x400
    7ce8:	add	r7, sp, #72	; 0x48
    7cec:	mov	r9, #0
    7cf0:	str	ip, [sp, #24]
    7cf4:	str	r8, [sp, #12]
    7cf8:	str	r0, [sp, #20]
    7cfc:	mov	r0, #0
    7d00:	mov	r5, r1
    7d04:	ldr	r3, [r4]
    7d08:	ldr	r1, [sp, #24]
    7d0c:	mov	sl, r0
    7d10:	mov	r0, r7
    7d14:	mov	r2, #256	; 0x100
    7d18:	bl	18b8 <fread@plt>
    7d1c:	mov	r8, r6
    7d20:	mov	r4, r0
    7d24:	mov	r6, #0
    7d28:	add	r0, r7, r6
    7d2c:	bl	1bf0 <Mat_int32Swap>
    7d30:	vmov	s0, r0
    7d34:	add	r1, r8, r6
    7d38:	add	r6, r6, #4
    7d3c:	vcvt.f32.s32	s0, s0
    7d40:	cmp	r6, #1024	; 0x400
    7d44:	vstr	s0, [r1]
    7d48:	bne	7d28 <ReadSingleData+0xd88>
    7d4c:	ldr	r2, [sp, #20]
    7d50:	add	r9, r4, r9
    7d54:	ldr	r4, [sp, #28]
    7d58:	add	r8, r8, #1024	; 0x400
    7d5c:	add	r0, sl, #256	; 0x100
    7d60:	add	r1, r5, #1024	; 0x400
    7d64:	mov	r6, r8
    7d68:	cmp	r0, r2
    7d6c:	blt	7d00 <ReadSingleData+0xd60>
    7d70:	ldr	r1, [sp, #12]
    7d74:	cmp	r0, r1
    7d78:	bge	8ec4 <ReadSingleData+0x1f24>
    7d7c:	sub	r6, r1, r0
    7d80:	ldr	r3, [r4]
    7d84:	ldr	r1, [sp, #24]
    7d88:	add	r4, sp, #72	; 0x48
    7d8c:	mov	r0, r4
    7d90:	mov	r2, r6
    7d94:	bl	18b8 <fread@plt>
    7d98:	add	r9, r0, r9
    7d9c:	cmp	r6, #1
    7da0:	blt	8ec4 <ReadSingleData+0x1f24>
    7da4:	ldr	r0, [sp, #20]
    7da8:	sub	r6, r0, sl
    7dac:	mov	r0, r4
    7db0:	bl	1bf0 <Mat_int32Swap>
    7db4:	vmov	s0, r0
    7db8:	subs	r6, r6, #1
    7dbc:	add	r4, r4, #4
    7dc0:	vcvt.f32.s32	s0, s0
    7dc4:	vstmia	r5!, {s0}
    7dc8:	bne	7dac <ReadSingleData+0xe0c>
    7dcc:	b	8ec4 <ReadSingleData+0x1f24>
    7dd0:	sub	r0, r8, #256	; 0x100
    7dd4:	add	r1, r6, #1024	; 0x400
    7dd8:	add	r7, sp, #72	; 0x48
    7ddc:	mov	r9, #0
    7de0:	str	ip, [sp, #24]
    7de4:	str	r8, [sp, #12]
    7de8:	str	r0, [sp, #20]
    7dec:	mov	r0, #0
    7df0:	mov	r5, r1
    7df4:	ldr	r3, [r4]
    7df8:	ldr	r1, [sp, #24]
    7dfc:	mov	sl, r0
    7e00:	mov	r0, r7
    7e04:	mov	r2, #256	; 0x100
    7e08:	bl	18b8 <fread@plt>
    7e0c:	mov	r8, r6
    7e10:	mov	r4, r0
    7e14:	mov	r6, #0
    7e18:	add	r0, r7, r6
    7e1c:	bl	1c04 <Mat_uint32Swap>
    7e20:	vmov	s0, r0
    7e24:	add	r1, r8, r6
    7e28:	add	r6, r6, #4
    7e2c:	vcvt.f32.u32	s0, s0
    7e30:	cmp	r6, #1024	; 0x400
    7e34:	vstr	s0, [r1]
    7e38:	bne	7e18 <ReadSingleData+0xe78>
    7e3c:	ldr	r2, [sp, #20]
    7e40:	add	r9, r4, r9
    7e44:	ldr	r4, [sp, #28]
    7e48:	add	r8, r8, #1024	; 0x400
    7e4c:	add	r0, sl, #256	; 0x100
    7e50:	add	r1, r5, #1024	; 0x400
    7e54:	mov	r6, r8
    7e58:	cmp	r0, r2
    7e5c:	blt	7df0 <ReadSingleData+0xe50>
    7e60:	ldr	r1, [sp, #12]
    7e64:	cmp	r0, r1
    7e68:	bge	8ec4 <ReadSingleData+0x1f24>
    7e6c:	sub	r6, r1, r0
    7e70:	ldr	r3, [r4]
    7e74:	ldr	r1, [sp, #24]
    7e78:	add	r4, sp, #72	; 0x48
    7e7c:	mov	r0, r4
    7e80:	mov	r2, r6
    7e84:	bl	18b8 <fread@plt>
    7e88:	add	r9, r0, r9
    7e8c:	cmp	r6, #1
    7e90:	blt	8ec4 <ReadSingleData+0x1f24>
    7e94:	ldr	r0, [sp, #20]
    7e98:	sub	r6, r0, sl
    7e9c:	mov	r0, r4
    7ea0:	bl	1c04 <Mat_uint32Swap>
    7ea4:	vmov	s0, r0
    7ea8:	subs	r6, r6, #1
    7eac:	add	r4, r4, #4
    7eb0:	vcvt.f32.u32	s0, s0
    7eb4:	vstmia	r5!, {s0}
    7eb8:	bne	7e9c <ReadSingleData+0xefc>
    7ebc:	b	8ec4 <ReadSingleData+0x1f24>
    7ec0:	sub	r0, r8, #256	; 0x100
    7ec4:	add	r1, r6, #1024	; 0x400
    7ec8:	add	r7, sp, #72	; 0x48
    7ecc:	mov	r9, #0
    7ed0:	str	ip, [sp, #24]
    7ed4:	str	r8, [sp, #12]
    7ed8:	str	r0, [sp, #20]
    7edc:	mov	r0, #0
    7ee0:	mov	r5, r1
    7ee4:	ldr	r3, [r4]
    7ee8:	ldr	r1, [sp, #24]
    7eec:	mov	sl, r0
    7ef0:	mov	r0, r7
    7ef4:	mov	r2, #256	; 0x100
    7ef8:	bl	18b8 <fread@plt>
    7efc:	mov	r8, r6
    7f00:	mov	r4, r0
    7f04:	mov	r6, #0
    7f08:	add	r0, r7, r6
    7f0c:	bl	1c44 <Mat_floatSwap>
    7f10:	add	r0, r8, r6
    7f14:	add	r6, r6, #4
    7f18:	cmp	r6, #1024	; 0x400
    7f1c:	vstr	s0, [r0]
    7f20:	bne	7f08 <ReadSingleData+0xf68>
    7f24:	ldr	r2, [sp, #20]
    7f28:	add	r9, r4, r9
    7f2c:	ldr	r4, [sp, #28]
    7f30:	add	r8, r8, #1024	; 0x400
    7f34:	add	r0, sl, #256	; 0x100
    7f38:	add	r1, r5, #1024	; 0x400
    7f3c:	mov	r6, r8
    7f40:	cmp	r0, r2
    7f44:	blt	7ee0 <ReadSingleData+0xf40>
    7f48:	ldr	r1, [sp, #12]
    7f4c:	cmp	r0, r1
    7f50:	bge	8ec4 <ReadSingleData+0x1f24>
    7f54:	sub	r6, r1, r0
    7f58:	ldr	r3, [r4]
    7f5c:	ldr	r1, [sp, #24]
    7f60:	add	r4, sp, #72	; 0x48
    7f64:	mov	r0, r4
    7f68:	mov	r2, r6
    7f6c:	bl	18b8 <fread@plt>
    7f70:	add	r9, r0, r9
    7f74:	cmp	r6, #1
    7f78:	blt	8ec4 <ReadSingleData+0x1f24>
    7f7c:	ldr	r0, [sp, #20]
    7f80:	sub	r6, r0, sl
    7f84:	mov	r0, r4
    7f88:	bl	1c44 <Mat_floatSwap>
    7f8c:	vstmia	r5!, {s0}
    7f90:	subs	r6, r6, #1
    7f94:	add	r4, r4, #4
    7f98:	bne	7f84 <ReadSingleData+0xfe4>
    7f9c:	b	8ec4 <ReadSingleData+0x1f24>
    7fa0:	sub	r0, r8, #256	; 0x100
    7fa4:	add	r1, r6, #1024	; 0x400
    7fa8:	mov	r9, #0
    7fac:	str	r8, [sp, #12]
    7fb0:	str	ip, [sp, #24]
    7fb4:	str	r0, [sp, #16]
    7fb8:	mov	r0, #0
    7fbc:	ldr	r3, [r4]
    7fc0:	add	r7, sp, #72	; 0x48
    7fc4:	str	r0, [sp, #20]
    7fc8:	mov	r5, r1
    7fcc:	mov	r1, ip
    7fd0:	mov	r2, #256	; 0x100
    7fd4:	mov	r0, r7
    7fd8:	bl	18b8 <fread@plt>
    7fdc:	mov	sl, r6
    7fe0:	mov	r4, r0
    7fe4:	mov	r6, #0
    7fe8:	mov	r0, r7
    7fec:	add	r8, sl, r6
    7ff0:	bl	1c88 <Mat_doubleSwap>
    7ff4:	add	r6, r6, #4
    7ff8:	vcvt.f32.f64	s0, d0
    7ffc:	add	r7, r7, #8
    8000:	cmp	r6, #1024	; 0x400
    8004:	vstr	s0, [r8]
    8008:	bne	7fe8 <ReadSingleData+0x1048>
    800c:	ldr	r7, [sp, #20]
    8010:	ldr	r2, [sp, #16]
    8014:	add	r9, r4, r9
    8018:	ldr	ip, [sp, #24]
    801c:	ldr	r4, [sp, #28]
    8020:	add	sl, sl, #1024	; 0x400
    8024:	add	r1, r5, #1024	; 0x400
    8028:	mov	r6, sl
    802c:	add	r0, r7, #256	; 0x100
    8030:	cmp	r0, r2
    8034:	blt	7fbc <ReadSingleData+0x101c>
    8038:	ldr	r1, [sp, #12]
    803c:	cmp	r0, r1
    8040:	bge	8ec8 <ReadSingleData+0x1f28>
    8044:	ldr	r3, [r4]
    8048:	sub	r6, r1, r0
    804c:	add	r4, sp, #72	; 0x48
    8050:	mov	r1, ip
    8054:	mov	r8, ip
    8058:	mov	r0, r4
    805c:	mov	r2, r6
    8060:	bl	18b8 <fread@plt>
    8064:	add	r9, r0, r9
    8068:	cmp	r6, #1
    806c:	blt	8094 <ReadSingleData+0x10f4>
    8070:	ldr	r0, [sp, #16]
    8074:	sub	r6, r0, r7
    8078:	mov	r0, r4
    807c:	bl	1c88 <Mat_doubleSwap>
    8080:	vcvt.f32.f64	s0, d0
    8084:	subs	r6, r6, #1
    8088:	add	r4, r4, #8
    808c:	vstmia	r5!, {s0}
    8090:	bne	8078 <ReadSingleData+0x10d8>
    8094:	mov	ip, r8
    8098:	b	8ec8 <ReadSingleData+0x1f28>
    809c:	sub	r0, r8, #256	; 0x100
    80a0:	add	r1, r6, #1024	; 0x400
    80a4:	mov	r9, #0
    80a8:	str	r5, [sp, #8]
    80ac:	str	ip, [sp, #24]
    80b0:	str	r8, [sp, #12]
    80b4:	str	r6, [sp, #4]
    80b8:	str	r0, [sp, #20]
    80bc:	mov	r0, #0
    80c0:	mov	r5, r0
    80c4:	ldr	r0, [sp, #28]
    80c8:	mov	r4, r1
    80cc:	ldr	r1, [sp, #24]
    80d0:	add	sl, sp, #72	; 0x48
    80d4:	mov	r2, #256	; 0x100
    80d8:	mov	r8, r9
    80dc:	ldr	r3, [r0]
    80e0:	mov	r0, sl
    80e4:	bl	18b8 <fread@plt>
    80e8:	mov	r7, r0
    80ec:	mov	r9, #0
    80f0:	mov	r0, sl
    80f4:	bl	1b84 <Mat_int64Swap>
    80f8:	bl	5f2c8 <__aeabi_l2f>
    80fc:	str	r0, [r6, r9]
    8100:	add	r9, r9, #4
    8104:	add	sl, sl, #8
    8108:	cmp	r9, #1024	; 0x400
    810c:	bne	80f0 <ReadSingleData+0x1150>
    8110:	ldr	r2, [sp, #20]
    8114:	mov	r9, r8
    8118:	add	r0, r5, #256	; 0x100
    811c:	add	r6, r6, #1024	; 0x400
    8120:	add	r1, r4, #1024	; 0x400
    8124:	add	r9, r7, r8
    8128:	cmp	r0, r2
    812c:	blt	80c0 <ReadSingleData+0x1120>
    8130:	ldr	r8, [sp, #12]
    8134:	cmp	r0, r8
    8138:	bge	8a40 <ReadSingleData+0x1aa0>
    813c:	sub	r8, r8, r0
    8140:	ldr	r0, [sp, #28]
    8144:	ldr	r1, [sp, #24]
    8148:	add	r7, sp, #72	; 0x48
    814c:	mov	r2, r8
    8150:	ldr	r3, [r0]
    8154:	mov	r0, r7
    8158:	bl	18b8 <fread@plt>
    815c:	ldr	r6, [sp, #4]
    8160:	add	r9, r0, r9
    8164:	cmp	r8, #1
    8168:	blt	8190 <ReadSingleData+0x11f0>
    816c:	ldr	r0, [sp, #20]
    8170:	sub	r5, r0, r5
    8174:	mov	r0, r7
    8178:	bl	1b84 <Mat_int64Swap>
    817c:	bl	5f2c8 <__aeabi_l2f>
    8180:	str	r0, [r4], #4
    8184:	subs	r5, r5, #1
    8188:	add	r7, r7, #8
    818c:	bne	8174 <ReadSingleData+0x11d4>
    8190:	ldr	ip, [sp, #24]
    8194:	b	8b0c <ReadSingleData+0x1b6c>
    8198:	sub	r1, r8, #256	; 0x100
    819c:	add	r0, r6, #1024	; 0x400
    81a0:	mov	r2, #256	; 0x100
    81a4:	add	r7, sp, #72	; 0x48
    81a8:	add	r4, sp, #32
    81ac:	mov	sl, r6
    81b0:	mov	r9, #0
    81b4:	str	ip, [sp, #24]
    81b8:	str	r8, [sp, #12]
    81bc:	str	r6, [sp, #4]
    81c0:	str	r1, [sp, #20]
    81c4:	mov	r1, #0
    81c8:	mov	r5, r0
    81cc:	ldr	r0, [sp, #28]
    81d0:	mov	r6, r1
    81d4:	ldr	r1, [sp, #24]
    81d8:	mov	r8, r2
    81dc:	mov	r2, #256	; 0x100
    81e0:	ldr	r3, [r0]
    81e4:	mov	r0, r7
    81e8:	bl	18b8 <fread@plt>
    81ec:	mov	r1, sl
    81f0:	mov	r2, #0
    81f4:	ldr	r3, [r7, r2]
    81f8:	str	r3, [sp, #32]
    81fc:	add	r3, r7, r2
    8200:	add	r2, r2, #8
    8204:	ldr	r3, [r3, #4]
    8208:	cmp	r2, #512	; 0x200
    820c:	str	r3, [sp, #36]	; 0x24
    8210:	vld1.16	{d16}, [r4 :64]
    8214:	vmovl.s16	q8, d16
    8218:	vcvt.f32.s32	q8, q8
    821c:	vst1.32	{d16-d17}, [r1]!
    8220:	bne	81f4 <ReadSingleData+0x1254>
    8224:	ldr	r3, [sp, #20]
    8228:	add	r1, r6, #256	; 0x100
    822c:	add	r9, r0, r9
    8230:	add	sl, sl, #1024	; 0x400
    8234:	add	r0, r5, #1024	; 0x400
    8238:	add	r2, r8, #256	; 0x100
    823c:	cmp	r1, r3
    8240:	blt	81c8 <ReadSingleData+0x1228>
    8244:	ldr	r0, [sp, #12]
    8248:	cmp	r1, r0
    824c:	bge	8ec4 <ReadSingleData+0x1f24>
    8250:	sub	r4, r0, r1
    8254:	ldr	r0, [sp, #28]
    8258:	ldr	r1, [sp, #24]
    825c:	add	r7, sp, #72	; 0x48
    8260:	mov	r2, r4
    8264:	ldr	r3, [r0]
    8268:	mov	r0, r7
    826c:	bl	18b8 <fread@plt>
    8270:	add	r9, r0, r9
    8274:	cmp	r4, #1
    8278:	blt	8ec4 <ReadSingleData+0x1f24>
    827c:	mov	r0, #0
    8280:	cmp	r4, #4
    8284:	bcc	82b8 <ReadSingleData+0x1318>
    8288:	ldr	r0, [sp, #20]
    828c:	sub	r0, r0, r6
    8290:	bic	r1, r0, #3
    8294:	bic	r0, r4, #3
    8298:	vld1.16	{d16}, [r7]!
    829c:	subs	r1, r1, #4
    82a0:	vmovl.s16	q8, d16
    82a4:	vcvt.f32.s32	q8, q8
    82a8:	vst1.32	{d16-d17}, [r5]!
    82ac:	bne	8298 <ReadSingleData+0x12f8>
    82b0:	cmp	r4, r0
    82b4:	beq	8ec4 <ReadSingleData+0x1f24>
    82b8:	ldr	r3, [sp, #4]
    82bc:	add	r2, r0, r8
    82c0:	add	r1, sp, #72	; 0x48
    82c4:	add	r1, r1, r0, lsl #1
    82c8:	add	r2, r3, r2, lsl #2
    82cc:	ldr	r3, [sp, #20]
    82d0:	sub	r3, r3, r6
    82d4:	sub	r0, r3, r0
    82d8:	ldrsh	r3, [r1], #2
    82dc:	subs	r0, r0, #1
    82e0:	vmov	s0, r3
    82e4:	vcvt.f32.s32	s0, s0
    82e8:	vstmia	r2!, {s0}
    82ec:	bne	82d8 <ReadSingleData+0x1338>
    82f0:	b	8ec4 <ReadSingleData+0x1f24>
    82f4:	sub	r1, r8, #256	; 0x100
    82f8:	add	r0, r6, #1024	; 0x400
    82fc:	mov	r2, #256	; 0x100
    8300:	add	r7, sp, #72	; 0x48
    8304:	add	r4, sp, #40	; 0x28
    8308:	mov	sl, r6
    830c:	mov	r9, #0
    8310:	str	ip, [sp, #24]
    8314:	str	r8, [sp, #12]
    8318:	str	r6, [sp, #4]
    831c:	str	r1, [sp, #20]
    8320:	mov	r1, #0
    8324:	mov	r5, r0
    8328:	ldr	r0, [sp, #28]
    832c:	mov	r6, r1
    8330:	ldr	r1, [sp, #24]
    8334:	mov	r8, r2
    8338:	mov	r2, #256	; 0x100
    833c:	ldr	r3, [r0]
    8340:	mov	r0, r7
    8344:	bl	18b8 <fread@plt>
    8348:	mov	r1, sl
    834c:	mov	r2, #0
    8350:	ldr	r3, [r7, r2]
    8354:	str	r3, [sp, #40]	; 0x28
    8358:	add	r3, r7, r2
    835c:	add	r2, r2, #8
    8360:	ldr	r3, [r3, #4]
    8364:	cmp	r2, #512	; 0x200
    8368:	str	r3, [sp, #44]	; 0x2c
    836c:	vld1.16	{d16}, [r4 :64]
    8370:	vmovl.u16	q8, d16
    8374:	vcvt.f32.u32	q8, q8
    8378:	vst1.32	{d16-d17}, [r1]!
    837c:	bne	8350 <ReadSingleData+0x13b0>
    8380:	ldr	r3, [sp, #20]
    8384:	add	r1, r6, #256	; 0x100
    8388:	add	r9, r0, r9
    838c:	add	sl, sl, #1024	; 0x400
    8390:	add	r0, r5, #1024	; 0x400
    8394:	add	r2, r8, #256	; 0x100
    8398:	cmp	r1, r3
    839c:	blt	8324 <ReadSingleData+0x1384>
    83a0:	ldr	r0, [sp, #12]
    83a4:	cmp	r1, r0
    83a8:	bge	8ec4 <ReadSingleData+0x1f24>
    83ac:	sub	r4, r0, r1
    83b0:	ldr	r0, [sp, #28]
    83b4:	ldr	r1, [sp, #24]
    83b8:	add	r7, sp, #72	; 0x48
    83bc:	mov	r2, r4
    83c0:	ldr	r3, [r0]
    83c4:	mov	r0, r7
    83c8:	bl	18b8 <fread@plt>
    83cc:	add	r9, r0, r9
    83d0:	cmp	r4, #1
    83d4:	blt	8ec4 <ReadSingleData+0x1f24>
    83d8:	mov	r0, #0
    83dc:	cmp	r4, #4
    83e0:	bcc	8414 <ReadSingleData+0x1474>
    83e4:	ldr	r0, [sp, #20]
    83e8:	sub	r0, r0, r6
    83ec:	bic	r1, r0, #3
    83f0:	bic	r0, r4, #3
    83f4:	vld1.16	{d16}, [r7]!
    83f8:	subs	r1, r1, #4
    83fc:	vmovl.u16	q8, d16
    8400:	vcvt.f32.u32	q8, q8
    8404:	vst1.32	{d16-d17}, [r5]!
    8408:	bne	83f4 <ReadSingleData+0x1454>
    840c:	cmp	r4, r0
    8410:	beq	8ec4 <ReadSingleData+0x1f24>
    8414:	ldr	r3, [sp, #4]
    8418:	add	r2, r0, r8
    841c:	add	r1, sp, #72	; 0x48
    8420:	add	r1, r1, r0, lsl #1
    8424:	add	r2, r3, r2, lsl #2
    8428:	ldr	r3, [sp, #20]
    842c:	sub	r3, r3, r6
    8430:	sub	r0, r3, r0
    8434:	ldrh	r3, [r1], #2
    8438:	subs	r0, r0, #1
    843c:	vmov	s0, r3
    8440:	vcvt.f32.u32	s0, s0
    8444:	vstmia	r2!, {s0}
    8448:	bne	8434 <ReadSingleData+0x1494>
    844c:	b	8ec4 <ReadSingleData+0x1f24>
    8450:	sub	r1, r8, #256	; 0x100
    8454:	mov	sl, ip
    8458:	add	r0, r6, #1024	; 0x400
    845c:	mov	r3, #0
    8460:	mov	r2, #256	; 0x100
    8464:	add	r7, sp, #72	; 0x48
    8468:	mov	r9, #0
    846c:	str	r8, [sp, #12]
    8470:	str	r6, [sp, #4]
    8474:	str	r1, [sp, #20]
    8478:	mov	r4, r0
    847c:	ldr	r0, [sp, #28]
    8480:	mov	r8, r3
    8484:	mov	r5, r2
    8488:	mov	r1, sl
    848c:	mov	r2, #256	; 0x100
    8490:	ldr	r3, [r0]
    8494:	mov	r0, r7
    8498:	bl	18b8 <fread@plt>
    849c:	mov	r1, #0
    84a0:	add	r2, r7, r1
    84a4:	vld1.32	{d16-d17}, [r2]
    84a8:	add	r2, r6, r1
    84ac:	add	r1, r1, #16
    84b0:	cmp	r1, #1024	; 0x400
    84b4:	vcvt.f32.s32	q8, q8
    84b8:	vst1.32	{d16-d17}, [r2]
    84bc:	bne	84a0 <ReadSingleData+0x1500>
    84c0:	ldr	r1, [sp, #20]
    84c4:	add	r3, r8, #256	; 0x100
    84c8:	add	r9, r0, r9
    84cc:	add	r6, r6, #1024	; 0x400
    84d0:	add	r0, r4, #1024	; 0x400
    84d4:	add	r2, r5, #256	; 0x100
    84d8:	cmp	r3, r1
    84dc:	blt	8478 <ReadSingleData+0x14d8>
    84e0:	ldr	r0, [sp, #12]
    84e4:	cmp	r3, r0
    84e8:	bge	8a38 <ReadSingleData+0x1a98>
    84ec:	sub	r6, r0, r3
    84f0:	ldr	r0, [sp, #28]
    84f4:	add	r7, sp, #72	; 0x48
    84f8:	mov	r1, sl
    84fc:	str	sl, [sp, #24]
    8500:	mov	r2, r6
    8504:	ldr	r3, [r0]
    8508:	mov	r0, r7
    850c:	bl	18b8 <fread@plt>
    8510:	add	r9, r0, r9
    8514:	cmp	r6, #1
    8518:	blt	8ec4 <ReadSingleData+0x1f24>
    851c:	mov	r0, #0
    8520:	cmp	r6, #4
    8524:	bcc	8554 <ReadSingleData+0x15b4>
    8528:	ldr	r0, [sp, #20]
    852c:	sub	r0, r0, r8
    8530:	bic	r1, r0, #3
    8534:	bic	r0, r6, #3
    8538:	vld1.32	{d16-d17}, [r7]!
    853c:	subs	r1, r1, #4
    8540:	vcvt.f32.s32	q8, q8
    8544:	vst1.32	{d16-d17}, [r4]!
    8548:	bne	8538 <ReadSingleData+0x1598>
    854c:	cmp	r6, r0
    8550:	beq	8ec4 <ReadSingleData+0x1f24>
    8554:	ldr	r3, [sp, #4]
    8558:	add	r2, r0, r5
    855c:	add	r1, sp, #72	; 0x48
    8560:	add	r1, r1, r0, lsl #2
    8564:	add	r2, r3, r2, lsl #2
    8568:	ldr	r3, [sp, #20]
    856c:	sub	r3, r3, r8
    8570:	sub	r0, r3, r0
    8574:	ldr	r3, [r1], #4
    8578:	subs	r0, r0, #1
    857c:	vmov	s0, r3
    8580:	vcvt.f32.s32	s0, s0
    8584:	vstmia	r2!, {s0}
    8588:	bne	8574 <ReadSingleData+0x15d4>
    858c:	b	8ec4 <ReadSingleData+0x1f24>
    8590:	sub	r1, r8, #256	; 0x100
    8594:	mov	sl, ip
    8598:	add	r0, r6, #1024	; 0x400
    859c:	mov	r3, #0
    85a0:	mov	r2, #256	; 0x100
    85a4:	add	r7, sp, #72	; 0x48
    85a8:	mov	r9, #0
    85ac:	str	r8, [sp, #12]
    85b0:	str	r6, [sp, #4]
    85b4:	str	r1, [sp, #20]
    85b8:	mov	r4, r0
    85bc:	ldr	r0, [sp, #28]
    85c0:	mov	r8, r3
    85c4:	mov	r5, r2
    85c8:	mov	r1, sl
    85cc:	mov	r2, #256	; 0x100
    85d0:	ldr	r3, [r0]
    85d4:	mov	r0, r7
    85d8:	bl	18b8 <fread@plt>
    85dc:	mov	r1, #0
    85e0:	add	r2, r7, r1
    85e4:	vld1.32	{d16-d17}, [r2]
    85e8:	add	r2, r6, r1
    85ec:	add	r1, r1, #16
    85f0:	cmp	r1, #1024	; 0x400
    85f4:	vcvt.f32.u32	q8, q8
    85f8:	vst1.32	{d16-d17}, [r2]
    85fc:	bne	85e0 <ReadSingleData+0x1640>
    8600:	ldr	r1, [sp, #20]
    8604:	add	r3, r8, #256	; 0x100
    8608:	add	r9, r0, r9
    860c:	add	r6, r6, #1024	; 0x400
    8610:	add	r0, r4, #1024	; 0x400
    8614:	add	r2, r5, #256	; 0x100
    8618:	cmp	r3, r1
    861c:	blt	85b8 <ReadSingleData+0x1618>
    8620:	ldr	r0, [sp, #12]
    8624:	cmp	r3, r0
    8628:	bge	8a38 <ReadSingleData+0x1a98>
    862c:	sub	r6, r0, r3
    8630:	ldr	r0, [sp, #28]
    8634:	add	r7, sp, #72	; 0x48
    8638:	mov	r1, sl
    863c:	str	sl, [sp, #24]
    8640:	mov	r2, r6
    8644:	ldr	r3, [r0]
    8648:	mov	r0, r7
    864c:	bl	18b8 <fread@plt>
    8650:	add	r9, r0, r9
    8654:	cmp	r6, #1
    8658:	blt	8ec4 <ReadSingleData+0x1f24>
    865c:	mov	r0, #0
    8660:	cmp	r6, #4
    8664:	bcc	8694 <ReadSingleData+0x16f4>
    8668:	ldr	r0, [sp, #20]
    866c:	sub	r0, r0, r8
    8670:	bic	r1, r0, #3
    8674:	bic	r0, r6, #3
    8678:	vld1.32	{d16-d17}, [r7]!
    867c:	subs	r1, r1, #4
    8680:	vcvt.f32.u32	q8, q8
    8684:	vst1.32	{d16-d17}, [r4]!
    8688:	bne	8678 <ReadSingleData+0x16d8>
    868c:	cmp	r6, r0
    8690:	beq	8ec4 <ReadSingleData+0x1f24>
    8694:	ldr	r3, [sp, #4]
    8698:	add	r2, r0, r5
    869c:	add	r1, sp, #72	; 0x48
    86a0:	add	r1, r1, r0, lsl #2
    86a4:	add	r2, r3, r2, lsl #2
    86a8:	ldr	r3, [sp, #20]
    86ac:	sub	r3, r3, r8
    86b0:	sub	r0, r3, r0
    86b4:	ldr	r3, [r1], #4
    86b8:	subs	r0, r0, #1
    86bc:	vmov	s0, r3
    86c0:	vcvt.f32.u32	s0, s0
    86c4:	vstmia	r2!, {s0}
    86c8:	bne	86b4 <ReadSingleData+0x1714>
    86cc:	b	8ec4 <ReadSingleData+0x1f24>
    86d0:	sub	r0, r8, #256	; 0x100
    86d4:	lsl	r7, r8, #2
    86d8:	str	r8, [sp, #12]
    86dc:	mov	r5, #0
    86e0:	add	sl, sp, #72	; 0x48
    86e4:	mov	r9, #0
    86e8:	mov	r8, r4
    86ec:	str	ip, [sp, #24]
    86f0:	str	r0, [sp, #20]
    86f4:	ldr	r3, [r8]
    86f8:	ldr	r1, [sp, #24]
    86fc:	mov	r0, sl
    8700:	mov	r2, #256	; 0x100
    8704:	bl	18b8 <fread@plt>
    8708:	mov	r4, r0
    870c:	add	r0, r6, r5, lsl #2
    8710:	mov	r1, sl
    8714:	mov	r2, #1024	; 0x400
    8718:	bl	181c <memcpy@plt>
    871c:	ldr	r0, [sp, #20]
    8720:	add	r5, r5, #256	; 0x100
    8724:	add	r9, r4, r9
    8728:	sub	r7, r7, #1024	; 0x400
    872c:	cmp	r5, r0
    8730:	blt	86f4 <ReadSingleData+0x1754>
    8734:	ldr	r0, [sp, #12]
    8738:	ldr	r4, [sp, #24]
    873c:	cmp	r5, r0
    8740:	bge	877c <ReadSingleData+0x17dc>
    8744:	sub	r8, r0, r5
    8748:	ldr	r0, [sp, #28]
    874c:	mov	r1, r4
    8750:	mov	r2, r8
    8754:	ldr	r3, [r0]
    8758:	add	r0, sp, #72	; 0x48
    875c:	bl	18b8 <fread@plt>
    8760:	add	r9, r0, r9
    8764:	cmp	r8, #1
    8768:	blt	877c <ReadSingleData+0x17dc>
    876c:	add	r0, r6, r5, lsl #2
    8770:	add	r1, sp, #72	; 0x48
    8774:	mov	r2, r7
    8778:	bl	181c <memcpy@plt>
    877c:	mov	ip, r4
    8780:	b	8ec8 <ReadSingleData+0x1f28>
    8784:	ldr	r5, [sp, #4]
    8788:	sub	r1, r8, #256	; 0x100
    878c:	str	r8, [sp, #12]
    8790:	mov	r6, ip
    8794:	mov	r2, #256	; 0x100
    8798:	add	r8, sp, #72	; 0x48
    879c:	mov	r9, #0
    87a0:	str	r1, [sp, #20]
    87a4:	mov	r1, #0
    87a8:	add	r0, r5, #1024	; 0x400
    87ac:	mov	r4, r0
    87b0:	ldr	r0, [sp, #28]
    87b4:	mov	sl, r1
    87b8:	mov	r7, r2
    87bc:	mov	r1, r6
    87c0:	mov	r2, #256	; 0x100
    87c4:	ldr	r3, [r0]
    87c8:	mov	r0, r8
    87cc:	bl	18b8 <fread@plt>
    87d0:	mov	r1, #0
    87d4:	mov	r2, r8
    87d8:	vld1.64	{d16-d17}, [r2]!
    87dc:	add	r3, r5, r1
    87e0:	add	r1, r1, #8
    87e4:	cmp	r1, #1024	; 0x400
    87e8:	vcvt.f32.f64	s1, d17
    87ec:	vcvt.f32.f64	s0, d16
    87f0:	vstr	d0, [r3]
    87f4:	bne	87d8 <ReadSingleData+0x1838>
    87f8:	ldr	r3, [sp, #20]
    87fc:	add	r1, sl, #256	; 0x100
    8800:	add	r9, r0, r9
    8804:	add	r5, r5, #1024	; 0x400
    8808:	add	r0, r4, #1024	; 0x400
    880c:	add	r2, r7, #256	; 0x100
    8810:	cmp	r1, r3
    8814:	blt	87ac <ReadSingleData+0x180c>
    8818:	ldr	r0, [sp, #12]
    881c:	cmp	r1, r0
    8820:	bge	8a5c <ReadSingleData+0x1abc>
    8824:	sub	r8, r0, r1
    8828:	ldr	r0, [sp, #28]
    882c:	mov	r5, r9
    8830:	add	r9, sp, #72	; 0x48
    8834:	mov	r1, r6
    8838:	mov	r2, r8
    883c:	ldr	r3, [r0]
    8840:	mov	r0, r9
    8844:	bl	18b8 <fread@plt>
    8848:	add	r5, r0, r5
    884c:	cmp	r8, #1
    8850:	blt	88c4 <ReadSingleData+0x1924>
    8854:	mov	r0, #0
    8858:	beq	888c <ReadSingleData+0x18ec>
    885c:	ldr	r0, [sp, #20]
    8860:	sub	r0, r0, sl
    8864:	bic	r1, r0, #1
    8868:	bic	r0, r8, #1
    886c:	vld1.64	{d16-d17}, [r9]!
    8870:	subs	r1, r1, #2
    8874:	vcvt.f32.f64	s1, d17
    8878:	vcvt.f32.f64	s0, d16
    887c:	vst1.32	{d0}, [r4]!
    8880:	bne	886c <ReadSingleData+0x18cc>
    8884:	cmp	r8, r0
    8888:	beq	88c4 <ReadSingleData+0x1924>
    888c:	ldr	r3, [sp, #4]
    8890:	add	r2, r0, r7
    8894:	add	r1, sp, #72	; 0x48
    8898:	add	r1, r1, r0, lsl #3
    889c:	add	r2, r3, r2, lsl #2
    88a0:	ldr	r3, [sp, #20]
    88a4:	sub	r3, r3, sl
    88a8:	sub	r0, r3, r0
    88ac:	vldr	d16, [r1]
    88b0:	subs	r0, r0, #1
    88b4:	add	r1, r1, #8
    88b8:	vcvt.f32.f64	s0, d16
    88bc:	vstmia	r2!, {s0}
    88c0:	bne	88ac <ReadSingleData+0x190c>
    88c4:	mov	ip, r6
    88c8:	mov	r9, r5
    88cc:	b	8ec8 <ReadSingleData+0x1f28>
    88d0:	sub	r1, r8, #256	; 0x100
    88d4:	str	r5, [sp, #8]
    88d8:	add	r0, r6, #1024	; 0x400
    88dc:	mov	r2, #256	; 0x100
    88e0:	mov	r5, r6
    88e4:	mov	r9, #0
    88e8:	str	r8, [sp, #12]
    88ec:	str	r6, [sp, #4]
    88f0:	str	r1, [sp, #16]
    88f4:	mov	r1, #0
    88f8:	mov	sl, r1
    88fc:	ldr	r3, [r4]
    8900:	ldr	r1, [sp, #24]
    8904:	add	r4, sp, #72	; 0x48
    8908:	str	r2, [sp, #20]
    890c:	mov	r8, r0
    8910:	mov	r2, #256	; 0x100
    8914:	mov	r0, r4
    8918:	bl	18b8 <fread@plt>
    891c:	mov	r7, r0
    8920:	mov	r6, #0
    8924:	vld1.64	{d8-d9}, [r4]!
    8928:	vmov.32	r0, d9[0]
    892c:	vmov.32	r1, d9[1]
    8930:	bl	5f2c8 <__aeabi_l2f>
    8934:	vmov.32	r2, d8[0]
    8938:	vmov.32	r1, d8[1]
    893c:	vmov	s17, r0
    8940:	mov	r0, r2
    8944:	bl	5f2c8 <__aeabi_l2f>
    8948:	vmov	s16, r0
    894c:	add	r0, r5, r6
    8950:	add	r6, r6, #8
    8954:	cmp	r6, #1024	; 0x400
    8958:	vstr	d8, [r0]
    895c:	bne	8924 <ReadSingleData+0x1984>
    8960:	ldr	r1, [sp, #20]
    8964:	ldr	r3, [sp, #16]
    8968:	ldr	r4, [sp, #28]
    896c:	add	r9, r7, r9
    8970:	add	r5, r5, #1024	; 0x400
    8974:	add	r0, r8, #1024	; 0x400
    8978:	add	r2, r1, #256	; 0x100
    897c:	add	r1, sl, #256	; 0x100
    8980:	cmp	r1, r3
    8984:	blt	88f8 <ReadSingleData+0x1958>
    8988:	ldr	r0, [sp, #12]
    898c:	ldr	r5, [sp, #8]
    8990:	cmp	r1, r0
    8994:	bge	8a64 <ReadSingleData+0x1ac4>
    8998:	sub	r2, r0, r1
    899c:	ldr	r3, [r4]
    89a0:	ldr	r1, [sp, #24]
    89a4:	add	r7, sp, #72	; 0x48
    89a8:	mov	r6, sl
    89ac:	mov	r0, r7
    89b0:	str	r2, [sp]
    89b4:	bl	18b8 <fread@plt>
    89b8:	add	r9, r0, r9
    89bc:	ldr	r0, [sp]
    89c0:	cmp	r0, #1
    89c4:	blt	8edc <ReadSingleData+0x1f3c>
    89c8:	mov	r5, #0
    89cc:	beq	8ac4 <ReadSingleData+0x1b24>
    89d0:	ldr	r0, [sp, #16]
    89d4:	sub	r0, r0, r6
    89d8:	bic	r6, r0, #1
    89dc:	ldr	r0, [sp]
    89e0:	bic	r5, r0, #1
    89e4:	vld1.64	{d8-d9}, [r7]!
    89e8:	vmov.32	r0, d9[0]
    89ec:	vmov.32	r1, d9[1]
    89f0:	bl	5f2c8 <__aeabi_l2f>
    89f4:	vmov.32	r2, d8[0]
    89f8:	vmov.32	r1, d8[1]
    89fc:	vmov	s17, r0
    8a00:	mov	r0, r2
    8a04:	bl	5f2c8 <__aeabi_l2f>
    8a08:	vmov	s16, r0
    8a0c:	subs	r6, r6, #2
    8a10:	vst1.32	{d8}, [r8]!
    8a14:	bne	89e4 <ReadSingleData+0x1a44>
    8a18:	ldr	r0, [sp]
    8a1c:	mov	r6, sl
    8a20:	cmp	r0, r5
    8a24:	bne	8ac4 <ReadSingleData+0x1b24>
    8a28:	ldr	ip, [sp, #24]
    8a2c:	ldr	r6, [sp, #4]
    8a30:	ldr	r8, [sp, #12]
    8a34:	b	8b14 <ReadSingleData+0x1b74>
    8a38:	mov	ip, sl
    8a3c:	b	8ec8 <ReadSingleData+0x1f28>
    8a40:	ldr	ip, [sp, #24]
    8a44:	ldr	r6, [sp, #4]
    8a48:	b	8b10 <ReadSingleData+0x1b70>
    8a4c:	mov	ip, sl
    8a50:	cmp	r5, #13
    8a54:	beq	8b20 <ReadSingleData+0x1b80>
    8a58:	b	8ec8 <ReadSingleData+0x1f28>
    8a5c:	mov	ip, r6
    8a60:	b	8ec8 <ReadSingleData+0x1f28>
    8a64:	ldr	ip, [sp, #24]
    8a68:	ldr	r6, [sp, #4]
    8a6c:	mov	r8, r0
    8a70:	cmp	r5, #13
    8a74:	beq	8b20 <ReadSingleData+0x1b80>
    8a78:	b	8ec8 <ReadSingleData+0x1f28>
    8a7c:	add	r0, sp, #72	; 0x48
    8a80:	mov	r7, r6
    8a84:	sub	r5, r8, r4
    8a88:	add	r6, r6, r4, lsl #2
    8a8c:	add	r4, r0, r4, lsl #3
    8a90:	ldrd	r0, [r4]
    8a94:	bl	5f2c8 <__aeabi_l2f>
    8a98:	str	r0, [r6], #4
    8a9c:	subs	r5, r5, #1
    8aa0:	add	r4, r4, #8
    8aa4:	bne	8a90 <ReadSingleData+0x1af0>
    8aa8:	ldr	ip, [sp, #24]
    8aac:	mov	r6, r7
    8ab0:	b	8b10 <ReadSingleData+0x1b70>
    8ab4:	ldr	ip, [sp, #24]
    8ab8:	cmp	r5, #13
    8abc:	beq	8b20 <ReadSingleData+0x1b80>
    8ac0:	b	8ec8 <ReadSingleData+0x1f28>
    8ac4:	add	r0, sp, #72	; 0x48
    8ac8:	ldr	r1, [sp, #4]
    8acc:	mov	r2, r6
    8ad0:	add	r4, r0, r5, lsl #3
    8ad4:	ldr	r0, [sp, #20]
    8ad8:	add	r0, r5, r0
    8adc:	add	r6, r1, r0, lsl #2
    8ae0:	ldr	r0, [sp, #16]
    8ae4:	sub	r0, r0, r2
    8ae8:	sub	r5, r0, r5
    8aec:	ldrd	r0, [r4]
    8af0:	bl	5f2c8 <__aeabi_l2f>
    8af4:	str	r0, [r6], #4
    8af8:	subs	r5, r5, #1
    8afc:	add	r4, r4, #8
    8b00:	bne	8aec <ReadSingleData+0x1b4c>
    8b04:	ldr	ip, [sp, #24]
    8b08:	ldr	r6, [sp, #4]
    8b0c:	ldr	r8, [sp, #12]
    8b10:	ldr	r4, [sp, #28]
    8b14:	ldr	r5, [sp, #8]
    8b18:	cmp	r5, #13
    8b1c:	bne	8ec8 <ReadSingleData+0x1f28>
    8b20:	ldr	r0, [r4, #20]
    8b24:	cmp	r0, #0
    8b28:	beq	8b80 <ReadSingleData+0x1be0>
    8b2c:	cmp	r8, #256	; 0x100
    8b30:	bgt	8c50 <ReadSingleData+0x1cb0>
    8b34:	ldr	r3, [r4]
    8b38:	add	r4, sp, #72	; 0x48
    8b3c:	mov	r1, ip
    8b40:	mov	r2, r8
    8b44:	mov	r5, ip
    8b48:	mov	r0, r4
    8b4c:	bl	18b8 <fread@plt>
    8b50:	add	r9, r0, r9
    8b54:	cmp	r8, #1
    8b58:	blt	8b78 <ReadSingleData+0x1bd8>
    8b5c:	mov	r0, r4
    8b60:	bl	1bd4 <Mat_uint64Swap>
    8b64:	bl	5f2b8 <__aeabi_ul2f>
    8b68:	str	r0, [r6], #4
    8b6c:	subs	r8, r8, #1
    8b70:	add	r4, r4, #8
    8b74:	bne	8b5c <ReadSingleData+0x1bbc>
    8b78:	mov	ip, r5
    8b7c:	b	8ec8 <ReadSingleData+0x1f28>
    8b80:	cmp	r8, #256	; 0x100
    8b84:	bgt	8d34 <ReadSingleData+0x1d94>
    8b88:	ldr	r3, [r4]
    8b8c:	add	r4, sp, #72	; 0x48
    8b90:	mov	r1, ip
    8b94:	mov	r2, r8
    8b98:	mov	r7, ip
    8b9c:	mov	r0, r4
    8ba0:	bl	18b8 <fread@plt>
    8ba4:	add	r9, r0, r9
    8ba8:	cmp	r8, #1
    8bac:	blt	8c48 <ReadSingleData+0x1ca8>
    8bb0:	mov	r5, #0
    8bb4:	mov	ip, r7
    8bb8:	beq	8c1c <ReadSingleData+0x1c7c>
    8bbc:	bic	r5, r8, #1
    8bc0:	mov	r7, r6
    8bc4:	mov	sl, r8
    8bc8:	str	ip, [sp, #24]
    8bcc:	mov	r6, r5
    8bd0:	mov	r8, r7
    8bd4:	vld1.64	{d8-d9}, [r4]!
    8bd8:	vmov.32	r0, d9[0]
    8bdc:	vmov.32	r1, d9[1]
    8be0:	bl	5f2b8 <__aeabi_ul2f>
    8be4:	vmov.32	r2, d8[0]
    8be8:	vmov.32	r1, d8[1]
    8bec:	vmov	s17, r0
    8bf0:	mov	r0, r2
    8bf4:	bl	5f2b8 <__aeabi_ul2f>
    8bf8:	vmov	s16, r0
    8bfc:	subs	r6, r6, #2
    8c00:	vst1.32	{d8}, [r7]!
    8c04:	bne	8bd4 <ReadSingleData+0x1c34>
    8c08:	ldr	ip, [sp, #24]
    8c0c:	mov	r6, r8
    8c10:	cmp	r5, sl
    8c14:	mov	r8, sl
    8c18:	beq	8ec8 <ReadSingleData+0x1f28>
    8c1c:	add	r0, sp, #72	; 0x48
    8c20:	mov	r7, ip
    8c24:	sub	r4, r8, r5
    8c28:	add	r6, r6, r5, lsl #2
    8c2c:	add	r5, r0, r5, lsl #3
    8c30:	ldrd	r0, [r5]
    8c34:	bl	5f2b8 <__aeabi_ul2f>
    8c38:	str	r0, [r6], #4
    8c3c:	subs	r4, r4, #1
    8c40:	add	r5, r5, #8
    8c44:	bne	8c30 <ReadSingleData+0x1c90>
    8c48:	mov	ip, r7
    8c4c:	b	8ec8 <ReadSingleData+0x1f28>
    8c50:	sub	r0, r8, #256	; 0x100
    8c54:	add	r1, r6, #1024	; 0x400
    8c58:	str	ip, [sp, #24]
    8c5c:	str	r8, [sp, #12]
    8c60:	str	r0, [sp, #20]
    8c64:	mov	r0, #0
    8c68:	mov	r5, r1
    8c6c:	ldr	r3, [r4]
    8c70:	ldr	r1, [sp, #24]
    8c74:	add	r4, sp, #72	; 0x48
    8c78:	mov	r8, r0
    8c7c:	mov	r2, #256	; 0x100
    8c80:	mov	r0, r4
    8c84:	bl	18b8 <fread@plt>
    8c88:	mov	sl, r6
    8c8c:	mov	r7, r0
    8c90:	mov	r6, #0
    8c94:	mov	r0, r4
    8c98:	bl	1bd4 <Mat_uint64Swap>
    8c9c:	bl	5f2b8 <__aeabi_ul2f>
    8ca0:	str	r0, [sl, r6]
    8ca4:	add	r6, r6, #4
    8ca8:	add	r4, r4, #8
    8cac:	cmp	r6, #1024	; 0x400
    8cb0:	bne	8c94 <ReadSingleData+0x1cf4>
    8cb4:	ldr	r2, [sp, #20]
    8cb8:	ldr	r4, [sp, #28]
    8cbc:	add	sl, sl, #1024	; 0x400
    8cc0:	add	r0, r8, #256	; 0x100
    8cc4:	add	r9, r7, r9
    8cc8:	add	r1, r5, #1024	; 0x400
    8ccc:	mov	r6, sl
    8cd0:	cmp	r0, r2
    8cd4:	blt	8c68 <ReadSingleData+0x1cc8>
    8cd8:	ldr	r1, [sp, #12]
    8cdc:	cmp	r0, r1
    8ce0:	bge	8ec4 <ReadSingleData+0x1f24>
    8ce4:	sub	r6, r1, r0
    8ce8:	ldr	r3, [r4]
    8cec:	ldr	r1, [sp, #24]
    8cf0:	add	r4, sp, #72	; 0x48
    8cf4:	mov	r0, r4
    8cf8:	mov	r2, r6
    8cfc:	bl	18b8 <fread@plt>
    8d00:	add	r9, r0, r9
    8d04:	cmp	r6, #1
    8d08:	blt	8ec4 <ReadSingleData+0x1f24>
    8d0c:	ldr	r0, [sp, #20]
    8d10:	sub	r6, r0, r8
    8d14:	mov	r0, r4
    8d18:	bl	1bd4 <Mat_uint64Swap>
    8d1c:	bl	5f2b8 <__aeabi_ul2f>
    8d20:	str	r0, [r5], #4
    8d24:	subs	r6, r6, #1
    8d28:	add	r4, r4, #8
    8d2c:	bne	8d14 <ReadSingleData+0x1d74>
    8d30:	b	8ec4 <ReadSingleData+0x1f24>
    8d34:	sub	r1, r8, #256	; 0x100
    8d38:	add	r0, r6, #1024	; 0x400
    8d3c:	mov	r3, #0
    8d40:	mov	r2, #256	; 0x100
    8d44:	mov	r5, r6
    8d48:	str	r8, [sp, #12]
    8d4c:	str	r6, [sp, #4]
    8d50:	str	r1, [sp, #8]
    8d54:	str	r3, [sp, #16]
    8d58:	ldr	r3, [r4]
    8d5c:	add	r4, sp, #72	; 0x48
    8d60:	str	r2, [sp, #20]
    8d64:	mov	sl, r0
    8d68:	mov	r1, ip
    8d6c:	mov	r2, #256	; 0x100
    8d70:	mov	r8, ip
    8d74:	mov	r0, r4
    8d78:	bl	18b8 <fread@plt>
    8d7c:	mov	r7, r0
    8d80:	mov	r6, #0
    8d84:	vld1.64	{d8-d9}, [r4]!
    8d88:	vmov.32	r0, d9[0]
    8d8c:	vmov.32	r1, d9[1]
    8d90:	bl	5f2b8 <__aeabi_ul2f>
    8d94:	vmov.32	r2, d8[0]
    8d98:	vmov.32	r1, d8[1]
    8d9c:	vmov	s17, r0
    8da0:	mov	r0, r2
    8da4:	bl	5f2b8 <__aeabi_ul2f>
    8da8:	vmov	s16, r0
    8dac:	add	r0, r5, r6
    8db0:	add	r6, r6, #8
    8db4:	cmp	r6, #1024	; 0x400
    8db8:	vstr	d8, [r0]
    8dbc:	bne	8d84 <ReadSingleData+0x1de4>
    8dc0:	ldr	r1, [sp, #20]
    8dc4:	ldr	r6, [sp, #16]
    8dc8:	ldr	r4, [sp, #28]
    8dcc:	add	r9, r7, r9
    8dd0:	add	r5, r5, #1024	; 0x400
    8dd4:	add	r0, sl, #1024	; 0x400
    8dd8:	mov	ip, r8
    8ddc:	add	r2, r1, #256	; 0x100
    8de0:	ldr	r1, [sp, #8]
    8de4:	add	r3, r6, #256	; 0x100
    8de8:	cmp	r3, r1
    8dec:	blt	8d54 <ReadSingleData+0x1db4>
    8df0:	ldr	r0, [sp, #12]
    8df4:	cmp	r3, r0
    8df8:	bge	8ec8 <ReadSingleData+0x1f28>
    8dfc:	mov	r2, r4
    8e00:	sub	r4, r0, r3
    8e04:	add	r7, sp, #72	; 0x48
    8e08:	mov	r1, ip
    8e0c:	str	ip, [sp, #24]
    8e10:	ldr	r3, [r2]
    8e14:	mov	r0, r7
    8e18:	mov	r2, r4
    8e1c:	bl	18b8 <fread@plt>
    8e20:	add	r9, r0, r9
    8e24:	cmp	r4, #1
    8e28:	blt	8ec4 <ReadSingleData+0x1f24>
    8e2c:	mov	r5, #0
    8e30:	beq	8e84 <ReadSingleData+0x1ee4>
    8e34:	ldr	r0, [sp, #8]
    8e38:	bic	r5, r4, #1
    8e3c:	sub	r0, r0, r6
    8e40:	bic	r6, r0, #1
    8e44:	vld1.64	{d8-d9}, [r7]!
    8e48:	vmov.32	r0, d9[0]
    8e4c:	vmov.32	r1, d9[1]
    8e50:	bl	5f2b8 <__aeabi_ul2f>
    8e54:	vmov.32	r2, d8[0]
    8e58:	vmov.32	r1, d8[1]
    8e5c:	vmov	s17, r0
    8e60:	mov	r0, r2
    8e64:	bl	5f2b8 <__aeabi_ul2f>
    8e68:	vmov	s16, r0
    8e6c:	subs	r6, r6, #2
    8e70:	vst1.32	{d8}, [sl]!
    8e74:	bne	8e44 <ReadSingleData+0x1ea4>
    8e78:	ldr	r6, [sp, #16]
    8e7c:	cmp	r4, r5
    8e80:	beq	8ec4 <ReadSingleData+0x1f24>
    8e84:	add	r0, sp, #72	; 0x48
    8e88:	ldr	r1, [sp, #4]
    8e8c:	mov	r2, r6
    8e90:	add	r4, r0, r5, lsl #3
    8e94:	ldr	r0, [sp, #20]
    8e98:	add	r0, r5, r0
    8e9c:	add	r6, r1, r0, lsl #2
    8ea0:	ldr	r0, [sp, #8]
    8ea4:	sub	r0, r0, r2
    8ea8:	sub	r5, r0, r5
    8eac:	ldrd	r0, [r4]
    8eb0:	bl	5f2b8 <__aeabi_ul2f>
    8eb4:	str	r0, [r6], #4
    8eb8:	subs	r5, r5, #1
    8ebc:	add	r4, r4, #8
    8ec0:	bne	8eac <ReadSingleData+0x1f0c>
    8ec4:	ldr	ip, [sp, #24]
    8ec8:	mul	r0, r9, ip
    8ecc:	sub	sp, fp, #48	; 0x30
    8ed0:	vpop	{d8-d9}
    8ed4:	add	sp, sp, #4
    8ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8edc:	ldr	ip, [sp, #24]
    8ee0:	ldr	r6, [sp, #4]
    8ee4:	ldr	r8, [sp, #12]
    8ee8:	cmp	r5, #13
    8eec:	beq	8b20 <ReadSingleData+0x1b80>
    8ef0:	b	8ec8 <ReadSingleData+0x1f28>

00008ef4 <ReadCompressedSingleData>:
    8ef4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ef8:	add	fp, sp, #28
    8efc:	sub	sp, sp, #12
    8f00:	mov	r7, r0
    8f04:	mov	r0, #0
    8f08:	cmp	r1, #0
    8f0c:	beq	8f20 <ReadCompressedSingleData+0x2c>
    8f10:	cmp	r7, #0
    8f14:	movne	r5, r2
    8f18:	cmpne	r2, #0
    8f1c:	bne	8f28 <ReadCompressedSingleData+0x34>
    8f20:	sub	sp, fp, #28
    8f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f28:	ldr	sl, [fp, #8]
    8f2c:	mov	r0, r3
    8f30:	mov	r4, r3
    8f34:	mov	r6, r1
    8f38:	bl	1924 <Mat_SizeOf@plt>
    8f3c:	mov	r9, r0
    8f40:	sub	r0, r4, #1
    8f44:	cmp	r0, #12
    8f48:	bhi	948c <ReadCompressedSingleData+0x598>
    8f4c:	add	r1, pc, #4
    8f50:	ldr	r0, [r1, r0, lsl #2]
    8f54:	add	pc, r1, r0
    8f58:	.word	0x00000034
    8f5c:	.word	0x00000078
    8f60:	.word	0x000000bc
    8f64:	.word	0x00000110
    8f68:	.word	0x00000164
    8f6c:	.word	0x000001b8
    8f70:	.word	0x0000020c
    8f74:	.word	0x00000534
    8f78:	.word	0x00000258
    8f7c:	.word	0x00000534
    8f80:	.word	0x00000534
    8f84:	.word	0x000002a8
    8f88:	.word	0x000002f4
    8f8c:	cmp	sl, #1
    8f90:	blt	948c <ReadCompressedSingleData+0x598>
    8f94:	mov	r8, sp
    8f98:	mov	r4, sl
    8f9c:	mov	r0, r7
    8fa0:	mov	r1, r6
    8fa4:	mov	r2, r8
    8fa8:	mov	r3, r9
    8fac:	bl	32fc <InflateData>
    8fb0:	ldrsb	r0, [sp]
    8fb4:	subs	r4, r4, #1
    8fb8:	vmov	s0, r0
    8fbc:	vcvt.f32.s32	s0, s0
    8fc0:	vstr	s0, [r5]
    8fc4:	add	r5, r5, #4
    8fc8:	bne	8f9c <ReadCompressedSingleData+0xa8>
    8fcc:	b	948c <ReadCompressedSingleData+0x598>
    8fd0:	cmp	sl, #1
    8fd4:	blt	948c <ReadCompressedSingleData+0x598>
    8fd8:	mov	r8, sp
    8fdc:	mov	r4, sl
    8fe0:	mov	r0, r7
    8fe4:	mov	r1, r6
    8fe8:	mov	r2, r8
    8fec:	mov	r3, r9
    8ff0:	bl	32fc <InflateData>
    8ff4:	ldrb	r0, [sp]
    8ff8:	subs	r4, r4, #1
    8ffc:	vmov	s0, r0
    9000:	vcvt.f32.u32	s0, s0
    9004:	vstr	s0, [r5]
    9008:	add	r5, r5, #4
    900c:	bne	8fe0 <ReadCompressedSingleData+0xec>
    9010:	b	948c <ReadCompressedSingleData+0x598>
    9014:	ldr	r0, [r7, #20]
    9018:	cmp	r0, #0
    901c:	beq	9298 <ReadCompressedSingleData+0x3a4>
    9020:	cmp	sl, #1
    9024:	blt	948c <ReadCompressedSingleData+0x598>
    9028:	mov	r8, sp
    902c:	mov	r4, sl
    9030:	mov	r0, r7
    9034:	mov	r1, r6
    9038:	mov	r2, r8
    903c:	mov	r3, r9
    9040:	bl	32fc <InflateData>
    9044:	mov	r0, r8
    9048:	bl	1c18 <Mat_int16Swap>
    904c:	vmov	s0, r0
    9050:	subs	r4, r4, #1
    9054:	vcvt.f32.s32	s0, s0
    9058:	vstr	s0, [r5]
    905c:	add	r5, r5, #4
    9060:	bne	9030 <ReadCompressedSingleData+0x13c>
    9064:	b	948c <ReadCompressedSingleData+0x598>
    9068:	ldr	r0, [r7, #20]
    906c:	cmp	r0, #0
    9070:	beq	92dc <ReadCompressedSingleData+0x3e8>
    9074:	cmp	sl, #1
    9078:	blt	948c <ReadCompressedSingleData+0x598>
    907c:	mov	r8, sp
    9080:	mov	r4, sl
    9084:	mov	r0, r7
    9088:	mov	r1, r6
    908c:	mov	r2, r8
    9090:	mov	r3, r9
    9094:	bl	32fc <InflateData>
    9098:	mov	r0, r8
    909c:	bl	1c2c <Mat_uint16Swap>
    90a0:	vmov	s0, r0
    90a4:	subs	r4, r4, #1
    90a8:	vcvt.f32.u32	s0, s0
    90ac:	vstr	s0, [r5]
    90b0:	add	r5, r5, #4
    90b4:	bne	9084 <ReadCompressedSingleData+0x190>
    90b8:	b	948c <ReadCompressedSingleData+0x598>
    90bc:	ldr	r0, [r7, #20]
    90c0:	cmp	r0, #0
    90c4:	beq	9320 <ReadCompressedSingleData+0x42c>
    90c8:	cmp	sl, #1
    90cc:	blt	948c <ReadCompressedSingleData+0x598>
    90d0:	mov	r8, sp
    90d4:	mov	r4, sl
    90d8:	mov	r0, r7
    90dc:	mov	r1, r6
    90e0:	mov	r2, r8
    90e4:	mov	r3, r9
    90e8:	bl	32fc <InflateData>
    90ec:	mov	r0, r8
    90f0:	bl	1bf0 <Mat_int32Swap>
    90f4:	vmov	s0, r0
    90f8:	subs	r4, r4, #1
    90fc:	vcvt.f32.s32	s0, s0
    9100:	vstr	s0, [r5]
    9104:	add	r5, r5, #4
    9108:	bne	90d8 <ReadCompressedSingleData+0x1e4>
    910c:	b	948c <ReadCompressedSingleData+0x598>
    9110:	ldr	r0, [r7, #20]
    9114:	cmp	r0, #0
    9118:	beq	9360 <ReadCompressedSingleData+0x46c>
    911c:	cmp	sl, #1
    9120:	blt	948c <ReadCompressedSingleData+0x598>
    9124:	mov	r8, sp
    9128:	mov	r4, sl
    912c:	mov	r0, r7
    9130:	mov	r1, r6
    9134:	mov	r2, r8
    9138:	mov	r3, r9
    913c:	bl	32fc <InflateData>
    9140:	mov	r0, r8
    9144:	bl	1c04 <Mat_uint32Swap>
    9148:	vmov	s0, r0
    914c:	subs	r4, r4, #1
    9150:	vcvt.f32.u32	s0, s0
    9154:	vstr	s0, [r5]
    9158:	add	r5, r5, #4
    915c:	bne	912c <ReadCompressedSingleData+0x238>
    9160:	b	948c <ReadCompressedSingleData+0x598>
    9164:	ldr	r0, [r7, #20]
    9168:	cmp	r0, #0
    916c:	beq	93a0 <ReadCompressedSingleData+0x4ac>
    9170:	cmp	sl, #1
    9174:	blt	948c <ReadCompressedSingleData+0x598>
    9178:	mov	r8, sp
    917c:	mov	r4, sl
    9180:	mov	r0, r7
    9184:	mov	r1, r6
    9188:	mov	r2, r8
    918c:	mov	r3, r9
    9190:	bl	32fc <InflateData>
    9194:	mov	r0, r8
    9198:	bl	1c44 <Mat_floatSwap>
    919c:	vstr	s0, [r5]
    91a0:	subs	r4, r4, #1
    91a4:	add	r5, r5, #4
    91a8:	bne	9180 <ReadCompressedSingleData+0x28c>
    91ac:	b	948c <ReadCompressedSingleData+0x598>
    91b0:	ldr	r0, [r7, #20]
    91b4:	cmp	r0, #0
    91b8:	beq	93d8 <ReadCompressedSingleData+0x4e4>
    91bc:	cmp	sl, #1
    91c0:	blt	948c <ReadCompressedSingleData+0x598>
    91c4:	mov	r8, sp
    91c8:	mov	r4, sl
    91cc:	mov	r0, r7
    91d0:	mov	r1, r6
    91d4:	mov	r2, r8
    91d8:	mov	r3, r9
    91dc:	bl	32fc <InflateData>
    91e0:	mov	r0, r8
    91e4:	bl	1c88 <Mat_doubleSwap>
    91e8:	vcvt.f32.f64	s0, d0
    91ec:	subs	r4, r4, #1
    91f0:	vstr	s0, [r5]
    91f4:	add	r5, r5, #4
    91f8:	bne	91cc <ReadCompressedSingleData+0x2d8>
    91fc:	b	948c <ReadCompressedSingleData+0x598>
    9200:	ldr	r0, [r7, #20]
    9204:	cmp	r0, #0
    9208:	beq	9418 <ReadCompressedSingleData+0x524>
    920c:	cmp	sl, #1
    9210:	blt	948c <ReadCompressedSingleData+0x598>
    9214:	mov	r8, sp
    9218:	mov	r4, sl
    921c:	mov	r0, r7
    9220:	mov	r1, r6
    9224:	mov	r2, r8
    9228:	mov	r3, r9
    922c:	bl	32fc <InflateData>
    9230:	mov	r0, r8
    9234:	bl	1b84 <Mat_int64Swap>
    9238:	bl	5f2c8 <__aeabi_l2f>
    923c:	str	r0, [r5], #4
    9240:	subs	r4, r4, #1
    9244:	bne	921c <ReadCompressedSingleData+0x328>
    9248:	b	948c <ReadCompressedSingleData+0x598>
    924c:	ldr	r0, [r7, #20]
    9250:	cmp	r0, #0
    9254:	beq	9454 <ReadCompressedSingleData+0x560>
    9258:	cmp	sl, #1
    925c:	blt	948c <ReadCompressedSingleData+0x598>
    9260:	mov	r8, sp
    9264:	mov	r4, sl
    9268:	mov	r0, r7
    926c:	mov	r1, r6
    9270:	mov	r2, r8
    9274:	mov	r3, r9
    9278:	bl	32fc <InflateData>
    927c:	mov	r0, r8
    9280:	bl	1bd4 <Mat_uint64Swap>
    9284:	bl	5f2b8 <__aeabi_ul2f>
    9288:	str	r0, [r5], #4
    928c:	subs	r4, r4, #1
    9290:	bne	9268 <ReadCompressedSingleData+0x374>
    9294:	b	948c <ReadCompressedSingleData+0x598>
    9298:	cmp	sl, #1
    929c:	blt	948c <ReadCompressedSingleData+0x598>
    92a0:	mov	r8, sp
    92a4:	mov	r4, sl
    92a8:	mov	r0, r7
    92ac:	mov	r1, r6
    92b0:	mov	r2, r8
    92b4:	mov	r3, r9
    92b8:	bl	32fc <InflateData>
    92bc:	ldrsh	r0, [sp]
    92c0:	subs	r4, r4, #1
    92c4:	vmov	s0, r0
    92c8:	vcvt.f32.s32	s0, s0
    92cc:	vstr	s0, [r5]
    92d0:	add	r5, r5, #4
    92d4:	bne	92a8 <ReadCompressedSingleData+0x3b4>
    92d8:	b	948c <ReadCompressedSingleData+0x598>
    92dc:	cmp	sl, #1
    92e0:	blt	948c <ReadCompressedSingleData+0x598>
    92e4:	mov	r8, sp
    92e8:	mov	r4, sl
    92ec:	mov	r0, r7
    92f0:	mov	r1, r6
    92f4:	mov	r2, r8
    92f8:	mov	r3, r9
    92fc:	bl	32fc <InflateData>
    9300:	ldrh	r0, [sp]
    9304:	subs	r4, r4, #1
    9308:	vmov	s0, r0
    930c:	vcvt.f32.u32	s0, s0
    9310:	vstr	s0, [r5]
    9314:	add	r5, r5, #4
    9318:	bne	92ec <ReadCompressedSingleData+0x3f8>
    931c:	b	948c <ReadCompressedSingleData+0x598>
    9320:	cmp	sl, #1
    9324:	blt	948c <ReadCompressedSingleData+0x598>
    9328:	mov	r8, sp
    932c:	mov	r4, sl
    9330:	mov	r0, r7
    9334:	mov	r1, r6
    9338:	mov	r2, r8
    933c:	mov	r3, r9
    9340:	bl	32fc <InflateData>
    9344:	vldr	s0, [sp]
    9348:	subs	r4, r4, #1
    934c:	vcvt.f32.s32	s0, s0
    9350:	vstr	s0, [r5]
    9354:	add	r5, r5, #4
    9358:	bne	9330 <ReadCompressedSingleData+0x43c>
    935c:	b	948c <ReadCompressedSingleData+0x598>
    9360:	cmp	sl, #1
    9364:	blt	948c <ReadCompressedSingleData+0x598>
    9368:	mov	r8, sp
    936c:	mov	r4, sl
    9370:	mov	r0, r7
    9374:	mov	r1, r6
    9378:	mov	r2, r8
    937c:	mov	r3, r9
    9380:	bl	32fc <InflateData>
    9384:	vldr	s0, [sp]
    9388:	subs	r4, r4, #1
    938c:	vcvt.f32.u32	s0, s0
    9390:	vstr	s0, [r5]
    9394:	add	r5, r5, #4
    9398:	bne	9370 <ReadCompressedSingleData+0x47c>
    939c:	b	948c <ReadCompressedSingleData+0x598>
    93a0:	cmp	sl, #1
    93a4:	blt	948c <ReadCompressedSingleData+0x598>
    93a8:	mov	r8, sp
    93ac:	mov	r4, sl
    93b0:	mov	r0, r7
    93b4:	mov	r1, r6
    93b8:	mov	r2, r8
    93bc:	mov	r3, r9
    93c0:	bl	32fc <InflateData>
    93c4:	ldr	r0, [sp]
    93c8:	subs	r4, r4, #1
    93cc:	str	r0, [r5], #4
    93d0:	bne	93b0 <ReadCompressedSingleData+0x4bc>
    93d4:	b	948c <ReadCompressedSingleData+0x598>
    93d8:	cmp	sl, #1
    93dc:	blt	948c <ReadCompressedSingleData+0x598>
    93e0:	mov	r8, sp
    93e4:	mov	r4, sl
    93e8:	mov	r0, r7
    93ec:	mov	r1, r6
    93f0:	mov	r2, r8
    93f4:	mov	r3, r9
    93f8:	bl	32fc <InflateData>
    93fc:	vldr	d16, [sp]
    9400:	subs	r4, r4, #1
    9404:	vcvt.f32.f64	s0, d16
    9408:	vstr	s0, [r5]
    940c:	add	r5, r5, #4
    9410:	bne	93e8 <ReadCompressedSingleData+0x4f4>
    9414:	b	948c <ReadCompressedSingleData+0x598>
    9418:	cmp	sl, #1
    941c:	blt	948c <ReadCompressedSingleData+0x598>
    9420:	mov	r8, sp
    9424:	mov	r4, sl
    9428:	mov	r0, r7
    942c:	mov	r1, r6
    9430:	mov	r2, r8
    9434:	mov	r3, r9
    9438:	bl	32fc <InflateData>
    943c:	ldm	sp, {r0, r1}
    9440:	bl	5f2c8 <__aeabi_l2f>
    9444:	str	r0, [r5], #4
    9448:	subs	r4, r4, #1
    944c:	bne	9428 <ReadCompressedSingleData+0x534>
    9450:	b	948c <ReadCompressedSingleData+0x598>
    9454:	cmp	sl, #1
    9458:	blt	948c <ReadCompressedSingleData+0x598>
    945c:	mov	r8, sp
    9460:	mov	r4, sl
    9464:	mov	r0, r7
    9468:	mov	r1, r6
    946c:	mov	r2, r8
    9470:	mov	r3, r9
    9474:	bl	32fc <InflateData>
    9478:	ldm	sp, {r0, r1}
    947c:	bl	5f2b8 <__aeabi_ul2f>
    9480:	str	r0, [r5], #4
    9484:	subs	r4, r4, #1
    9488:	bne	9464 <ReadCompressedSingleData+0x570>
    948c:	mul	r0, r9, sl
    9490:	sub	sp, fp, #28
    9494:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00009498 <ReadInt64Data>:
    9498:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    949c:	add	fp, sp, #28
    94a0:	sub	sp, sp, #124	; 0x7c
    94a4:	sub	sp, sp, #2048	; 0x800
    94a8:	mov	r4, r0
    94ac:	mov	r0, #0
    94b0:	cmp	r4, #0
    94b4:	beq	94cc <ReadInt64Data+0x34>
    94b8:	cmp	r1, #0
    94bc:	mov	sl, r1
    94c0:	ldrne	r1, [r4]
    94c4:	cmpne	r1, #0
    94c8:	bne	94d4 <ReadInt64Data+0x3c>
    94cc:	sub	sp, fp, #28
    94d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    94d4:	mov	r0, r2
    94d8:	mov	r7, r3
    94dc:	mov	r8, r2
    94e0:	bl	1924 <Mat_SizeOf@plt>
    94e4:	mov	r6, r0
    94e8:	sub	r0, r8, #1
    94ec:	mov	r9, #0
    94f0:	str	r4, [sp, #20]
    94f4:	cmp	r0, #11
    94f8:	str	r6, [sp, #16]
    94fc:	bhi	aefc <ReadInt64Data+0x1a64>
    9500:	add	r1, pc, #4
    9504:	ldr	r0, [r1, r0, lsl #2]
    9508:	add	pc, r1, r0
    950c:	.word	0x00000030
    9510:	.word	0x000000d4
    9514:	.word	0x00000180
    9518:	.word	0x000001dc
    951c:	.word	0x00000238
    9520:	.word	0x00000294
    9524:	.word	0x000002f0
    9528:	.word	0x000019f0
    952c:	.word	0x00000350
    9530:	.word	0x000019f0
    9534:	.word	0x000019f0
    9538:	.word	0x000003b0
    953c:	cmp	r7, #256	; 0x100
    9540:	bgt	991c <ReadInt64Data+0x484>
    9544:	ldr	r3, [r4]
    9548:	add	r4, sp, #120	; 0x78
    954c:	mov	r1, r6
    9550:	mov	r2, r7
    9554:	mov	r0, r4
    9558:	bl	18b8 <fread@plt>
    955c:	mov	r9, r0
    9560:	cmp	r7, #1
    9564:	blt	b1c4 <ReadInt64Data+0x1d2c>
    9568:	mov	r0, #0
    956c:	beq	95b4 <ReadInt64Data+0x11c>
    9570:	bic	r0, r7, #1
    9574:	mov	r5, r7
    9578:	add	r1, sp, #96	; 0x60
    957c:	mov	r3, sl
    9580:	mov	r2, r0
    9584:	ldrh	r7, [r4], #2
    9588:	subs	r2, r2, #2
    958c:	strh	r7, [sp, #96]	; 0x60
    9590:	vld1.16	{d16[0]}, [r1 :16]
    9594:	vmovl.s8	q8, d16
    9598:	vmovl.s16	q8, d16
    959c:	vmovl.s32	q8, d16
    95a0:	vst1.64	{d16-d17}, [r3]!
    95a4:	bne	9584 <ReadInt64Data+0xec>
    95a8:	mov	r7, r5
    95ac:	cmp	r0, r5
    95b0:	beq	b1c4 <ReadInt64Data+0x1d2c>
    95b4:	add	r3, sp, #120	; 0x78
    95b8:	sub	r1, r7, r0
    95bc:	add	r2, sl, r0, lsl #3
    95c0:	add	r0, r3, r0
    95c4:	ldrsb	r4, [r0], #1
    95c8:	subs	r1, r1, #1
    95cc:	asr	r5, r4, #31
    95d0:	strd	r4, [r2]
    95d4:	add	r2, r2, #8
    95d8:	bne	95c4 <ReadInt64Data+0x12c>
    95dc:	b	b1c4 <ReadInt64Data+0x1d2c>
    95e0:	cmp	r7, #256	; 0x100
    95e4:	bgt	9a88 <ReadInt64Data+0x5f0>
    95e8:	ldr	r3, [r4]
    95ec:	add	r4, sp, #120	; 0x78
    95f0:	mov	r1, r6
    95f4:	mov	r2, r7
    95f8:	mov	r0, r4
    95fc:	bl	18b8 <fread@plt>
    9600:	mov	r9, r0
    9604:	cmp	r7, #1
    9608:	blt	b1c4 <ReadInt64Data+0x1d2c>
    960c:	mov	r1, #0
    9610:	mov	r0, #0
    9614:	beq	9660 <ReadInt64Data+0x1c8>
    9618:	bic	r0, r7, #1
    961c:	mov	r5, r7
    9620:	add	r2, sp, #108	; 0x6c
    9624:	mov	r7, sl
    9628:	mov	r3, r0
    962c:	ldrh	r6, [r4], #2
    9630:	subs	r3, r3, #2
    9634:	strh	r6, [sp, #108]	; 0x6c
    9638:	vld1.16	{d16[0]}, [r2 :16]
    963c:	vmovl.u8	q8, d16
    9640:	vmovl.u16	q8, d16
    9644:	vmovl.u32	q8, d16
    9648:	vst1.64	{d16-d17}, [r7]!
    964c:	bne	962c <ReadInt64Data+0x194>
    9650:	ldr	r6, [sp, #16]
    9654:	mov	r7, r5
    9658:	cmp	r0, r5
    965c:	beq	b1c4 <ReadInt64Data+0x1d2c>
    9660:	sub	r2, r7, r0
    9664:	add	r7, sp, #120	; 0x78
    9668:	add	r3, sl, r0, lsl #3
    966c:	add	r0, r7, r0
    9670:	ldrb	r4, [r0], #1
    9674:	subs	r2, r2, #1
    9678:	str	r4, [r3]
    967c:	str	r1, [r3, #4]
    9680:	add	r3, r3, #8
    9684:	bne	9670 <ReadInt64Data+0x1d8>
    9688:	b	b1c4 <ReadInt64Data+0x1d2c>
    968c:	ldr	r0, [r4, #20]
    9690:	cmp	r0, #0
    9694:	beq	9bfc <ReadInt64Data+0x764>
    9698:	cmp	r7, #256	; 0x100
    969c:	bgt	9f7c <ReadInt64Data+0xae4>
    96a0:	ldr	r3, [r4]
    96a4:	add	r4, sp, #120	; 0x78
    96a8:	mov	r1, r6
    96ac:	mov	r2, r7
    96b0:	mov	r0, r4
    96b4:	bl	18b8 <fread@plt>
    96b8:	mov	r9, r0
    96bc:	cmp	r7, #1
    96c0:	blt	b1c4 <ReadInt64Data+0x1d2c>
    96c4:	mov	r0, r4
    96c8:	bl	1c18 <Mat_int16Swap>
    96cc:	asr	r1, r0, #31
    96d0:	subs	r7, r7, #1
    96d4:	add	r4, r4, #2
    96d8:	strd	r0, [sl]
    96dc:	add	sl, sl, #8
    96e0:	bne	96c4 <ReadInt64Data+0x22c>
    96e4:	b	b1c4 <ReadInt64Data+0x1d2c>
    96e8:	ldr	r0, [r4, #20]
    96ec:	cmp	r0, #0
    96f0:	beq	9c9c <ReadInt64Data+0x804>
    96f4:	cmp	r7, #256	; 0x100
    96f8:	bgt	a074 <ReadInt64Data+0xbdc>
    96fc:	ldr	r3, [r4]
    9700:	add	r4, sp, #120	; 0x78
    9704:	mov	r1, r6
    9708:	mov	r2, r7
    970c:	mov	r0, r4
    9710:	bl	18b8 <fread@plt>
    9714:	mov	r9, r0
    9718:	cmp	r7, #1
    971c:	blt	b1c4 <ReadInt64Data+0x1d2c>
    9720:	mov	r5, #0
    9724:	mov	r0, r4
    9728:	bl	1c2c <Mat_uint16Swap>
    972c:	stm	sl, {r0, r5}
    9730:	subs	r7, r7, #1
    9734:	add	sl, sl, #8
    9738:	add	r4, r4, #2
    973c:	bne	9724 <ReadInt64Data+0x28c>
    9740:	b	b1c4 <ReadInt64Data+0x1d2c>
    9744:	ldr	r0, [r4, #20]
    9748:	cmp	r0, #0
    974c:	beq	9d44 <ReadInt64Data+0x8ac>
    9750:	cmp	r7, #256	; 0x100
    9754:	bgt	a174 <ReadInt64Data+0xcdc>
    9758:	ldr	r3, [r4]
    975c:	add	r4, sp, #120	; 0x78
    9760:	mov	r1, r6
    9764:	mov	r2, r7
    9768:	mov	r0, r4
    976c:	bl	18b8 <fread@plt>
    9770:	mov	r9, r0
    9774:	cmp	r7, #1
    9778:	blt	b1c4 <ReadInt64Data+0x1d2c>
    977c:	mov	r0, r4
    9780:	bl	1bf0 <Mat_int32Swap>
    9784:	asr	r1, r0, #31
    9788:	subs	r7, r7, #1
    978c:	add	r4, r4, #4
    9790:	strd	r0, [sl]
    9794:	add	sl, sl, #8
    9798:	bne	977c <ReadInt64Data+0x2e4>
    979c:	b	b1c4 <ReadInt64Data+0x1d2c>
    97a0:	ldr	r0, [r4, #20]
    97a4:	cmp	r0, #0
    97a8:	beq	9df0 <ReadInt64Data+0x958>
    97ac:	cmp	r7, #256	; 0x100
    97b0:	bgt	a26c <ReadInt64Data+0xdd4>
    97b4:	ldr	r3, [r4]
    97b8:	add	r4, sp, #120	; 0x78
    97bc:	mov	r1, r6
    97c0:	mov	r2, r7
    97c4:	mov	r0, r4
    97c8:	bl	18b8 <fread@plt>
    97cc:	mov	r9, r0
    97d0:	cmp	r7, #1
    97d4:	blt	b1c4 <ReadInt64Data+0x1d2c>
    97d8:	mov	r5, #0
    97dc:	mov	r0, r4
    97e0:	bl	1c04 <Mat_uint32Swap>
    97e4:	stm	sl, {r0, r5}
    97e8:	subs	r7, r7, #1
    97ec:	add	sl, sl, #8
    97f0:	add	r4, r4, #4
    97f4:	bne	97dc <ReadInt64Data+0x344>
    97f8:	b	b1c4 <ReadInt64Data+0x1d2c>
    97fc:	ldr	r0, [r4, #20]
    9800:	cmp	r0, #0
    9804:	beq	9ea0 <ReadInt64Data+0xa08>
    9808:	cmp	r7, #256	; 0x100
    980c:	bgt	a36c <ReadInt64Data+0xed4>
    9810:	ldr	r3, [r4]
    9814:	add	r4, sp, #120	; 0x78
    9818:	mov	r1, r6
    981c:	mov	r2, r7
    9820:	mov	r0, r4
    9824:	bl	18b8 <fread@plt>
    9828:	mov	r9, r0
    982c:	cmp	r7, #1
    9830:	blt	b1c4 <ReadInt64Data+0x1d2c>
    9834:	mov	r0, r4
    9838:	bl	1c44 <Mat_floatSwap>
    983c:	vmov	r0, s0
    9840:	bl	5f344 <__aeabi_f2lz>
    9844:	strd	r0, [sl]
    9848:	subs	r7, r7, #1
    984c:	add	sl, sl, #8
    9850:	add	r4, r4, #4
    9854:	bne	9834 <ReadInt64Data+0x39c>
    9858:	b	b1c4 <ReadInt64Data+0x1d2c>
    985c:	ldr	r0, [r4, #20]
    9860:	cmp	r0, #0
    9864:	beq	9ee8 <ReadInt64Data+0xa50>
    9868:	cmp	r7, #256	; 0x100
    986c:	bgt	a460 <ReadInt64Data+0xfc8>
    9870:	ldr	r3, [r4]
    9874:	add	r4, sp, #120	; 0x78
    9878:	mov	r1, r6
    987c:	mov	r2, r7
    9880:	mov	r0, r4
    9884:	bl	18b8 <fread@plt>
    9888:	mov	r9, r0
    988c:	cmp	r7, #1
    9890:	blt	b1c4 <ReadInt64Data+0x1d2c>
    9894:	mov	r0, r4
    9898:	bl	1c88 <Mat_doubleSwap>
    989c:	vmov	r0, r1, d0
    98a0:	bl	5f370 <__aeabi_d2lz>
    98a4:	strd	r0, [sl]
    98a8:	subs	r7, r7, #1
    98ac:	add	sl, sl, #8
    98b0:	add	r4, r4, #8
    98b4:	bne	9894 <ReadInt64Data+0x3fc>
    98b8:	b	b1c4 <ReadInt64Data+0x1d2c>
    98bc:	ldr	r0, [r4, #20]
    98c0:	cmp	r0, #0
    98c4:	beq	9f38 <ReadInt64Data+0xaa0>
    98c8:	cmp	r7, #256	; 0x100
    98cc:	bgt	a554 <ReadInt64Data+0x10bc>
    98d0:	ldr	r3, [r4]
    98d4:	add	r4, sp, #120	; 0x78
    98d8:	mov	r1, r6
    98dc:	mov	r2, r7
    98e0:	mov	r0, r4
    98e4:	bl	18b8 <fread@plt>
    98e8:	mov	r9, r0
    98ec:	cmp	r7, #1
    98f0:	blt	aeac <ReadInt64Data+0x1a14>
    98f4:	mov	r5, r7
    98f8:	mov	r6, sl
    98fc:	mov	r0, r4
    9900:	bl	1b84 <Mat_int64Swap>
    9904:	strd	r0, [r6]
    9908:	subs	r5, r5, #1
    990c:	add	r6, r6, #8
    9910:	add	r4, r4, #8
    9914:	bne	98fc <ReadInt64Data+0x464>
    9918:	b	aebc <ReadInt64Data+0x1a24>
    991c:	sub	r1, r7, #256	; 0x100
    9920:	str	r7, [sp, #4]
    9924:	add	r0, sl, #2048	; 0x800
    9928:	mov	r2, #256	; 0x100
    992c:	add	r4, sp, #120	; 0x78
    9930:	add	r7, sp, #104	; 0x68
    9934:	mov	r9, sl
    9938:	mov	r6, #0
    993c:	str	r1, [sp, #8]
    9940:	mov	r1, #0
    9944:	mov	r8, r0
    9948:	ldr	r0, [sp, #20]
    994c:	str	r1, [sp, #12]
    9950:	ldr	r1, [sp, #16]
    9954:	mov	r5, r2
    9958:	mov	r2, #256	; 0x100
    995c:	ldr	r3, [r0]
    9960:	mov	r0, r4
    9964:	bl	18b8 <fread@plt>
    9968:	mov	r1, r9
    996c:	mov	r2, #0
    9970:	add	r3, r4, r2
    9974:	add	r2, r2, #2
    9978:	ldrh	r3, [r3]
    997c:	cmp	r2, #256	; 0x100
    9980:	strh	r3, [sp, #104]	; 0x68
    9984:	vld1.16	{d16[0]}, [r7 :16]
    9988:	vmovl.s8	q8, d16
    998c:	vmovl.s16	q8, d16
    9990:	vmovl.s32	q8, d16
    9994:	vst1.64	{d16-d17}, [r1]!
    9998:	bne	9970 <ReadInt64Data+0x4d8>
    999c:	mov	r1, r5
    99a0:	ldr	r3, [sp, #8]
    99a4:	add	r6, r0, r6
    99a8:	add	r9, r9, #2048	; 0x800
    99ac:	add	r0, r8, #2048	; 0x800
    99b0:	add	r2, r5, #256	; 0x100
    99b4:	ldr	r1, [sp, #12]
    99b8:	add	r1, r1, #256	; 0x100
    99bc:	cmp	r1, r3
    99c0:	blt	9944 <ReadInt64Data+0x4ac>
    99c4:	ldr	r0, [sp, #4]
    99c8:	cmp	r1, r0
    99cc:	bge	a920 <ReadInt64Data+0x1488>
    99d0:	sub	r4, r0, r1
    99d4:	ldr	r0, [sp, #20]
    99d8:	ldr	r1, [sp, #16]
    99dc:	add	r7, sp, #120	; 0x78
    99e0:	mov	r2, r4
    99e4:	ldr	r3, [r0]
    99e8:	mov	r0, r7
    99ec:	bl	18b8 <fread@plt>
    99f0:	mov	r9, r6
    99f4:	cmp	r4, #1
    99f8:	add	r9, r0, r6
    99fc:	blt	b130 <ReadInt64Data+0x1c98>
    9a00:	ldr	r6, [sp, #16]
    9a04:	ldr	ip, [sp, #12]
    9a08:	mov	r0, #0
    9a0c:	beq	9a50 <ReadInt64Data+0x5b8>
    9a10:	ldr	r0, [sp, #8]
    9a14:	add	r2, sp, #100	; 0x64
    9a18:	sub	r0, r0, ip
    9a1c:	bic	r1, r0, #1
    9a20:	bic	r0, r4, #1
    9a24:	ldrh	r3, [r7], #2
    9a28:	subs	r1, r1, #2
    9a2c:	strh	r3, [sp, #100]	; 0x64
    9a30:	vld1.16	{d16[0]}, [r2 :16]
    9a34:	vmovl.s8	q8, d16
    9a38:	vmovl.s16	q8, d16
    9a3c:	vmovl.s32	q8, d16
    9a40:	vst1.64	{d16-d17}, [r8]!
    9a44:	bne	9a24 <ReadInt64Data+0x58c>
    9a48:	cmp	r4, r0
    9a4c:	beq	b1c4 <ReadInt64Data+0x1d2c>
    9a50:	ldr	r3, [sp, #8]
    9a54:	add	r1, sp, #120	; 0x78
    9a58:	add	r2, r0, r5
    9a5c:	add	r1, r1, r0
    9a60:	add	r2, sl, r2, lsl #3
    9a64:	sub	r3, r3, ip
    9a68:	sub	r0, r3, r0
    9a6c:	ldrsb	r4, [r1], #1
    9a70:	subs	r0, r0, #1
    9a74:	asr	r5, r4, #31
    9a78:	strd	r4, [r2]
    9a7c:	add	r2, r2, #8
    9a80:	bne	9a6c <ReadInt64Data+0x5d4>
    9a84:	b	b1c4 <ReadInt64Data+0x1d2c>
    9a88:	sub	r1, r7, #256	; 0x100
    9a8c:	add	r0, sl, #2048	; 0x800
    9a90:	mov	r2, #256	; 0x100
    9a94:	add	r4, sp, #120	; 0x78
    9a98:	add	r5, sp, #116	; 0x74
    9a9c:	mov	r9, sl
    9aa0:	mov	r6, #0
    9aa4:	str	r7, [sp, #4]
    9aa8:	str	r1, [sp, #8]
    9aac:	mov	r1, #0
    9ab0:	mov	r7, r0
    9ab4:	ldr	r0, [sp, #20]
    9ab8:	str	r1, [sp, #12]
    9abc:	ldr	r1, [sp, #16]
    9ac0:	mov	r8, r2
    9ac4:	mov	r2, #256	; 0x100
    9ac8:	ldr	r3, [r0]
    9acc:	mov	r0, r4
    9ad0:	bl	18b8 <fread@plt>
    9ad4:	mov	r1, r9
    9ad8:	mov	r2, #0
    9adc:	add	r3, r4, r2
    9ae0:	add	r2, r2, #2
    9ae4:	ldrh	r3, [r3]
    9ae8:	cmp	r2, #256	; 0x100
    9aec:	strh	r3, [sp, #116]	; 0x74
    9af0:	vld1.16	{d16[0]}, [r5 :16]
    9af4:	vmovl.u8	q8, d16
    9af8:	vmovl.u16	q8, d16
    9afc:	vmovl.u32	q8, d16
    9b00:	vst1.64	{d16-d17}, [r1]!
    9b04:	bne	9adc <ReadInt64Data+0x644>
    9b08:	mov	r1, r8
    9b0c:	ldr	r3, [sp, #8]
    9b10:	add	r6, r0, r6
    9b14:	add	r9, r9, #2048	; 0x800
    9b18:	add	r0, r7, #2048	; 0x800
    9b1c:	add	r2, r8, #256	; 0x100
    9b20:	ldr	r1, [sp, #12]
    9b24:	add	r1, r1, #256	; 0x100
    9b28:	cmp	r1, r3
    9b2c:	blt	9ab0 <ReadInt64Data+0x618>
    9b30:	ldr	r0, [sp, #4]
    9b34:	cmp	r1, r0
    9b38:	bge	a920 <ReadInt64Data+0x1488>
    9b3c:	sub	r5, r0, r1
    9b40:	ldr	r0, [sp, #20]
    9b44:	ldr	r1, [sp, #16]
    9b48:	add	r4, sp, #120	; 0x78
    9b4c:	mov	r2, r5
    9b50:	ldr	r3, [r0]
    9b54:	mov	r0, r4
    9b58:	bl	18b8 <fread@plt>
    9b5c:	mov	r9, r6
    9b60:	cmp	r5, #1
    9b64:	add	r9, r0, r6
    9b68:	blt	b140 <ReadInt64Data+0x1ca8>
    9b6c:	ldr	r6, [sp, #16]
    9b70:	ldr	ip, [sp, #12]
    9b74:	mov	r1, #0
    9b78:	mov	r0, #0
    9b7c:	beq	9bc4 <ReadInt64Data+0x72c>
    9b80:	ldr	r0, [sp, #8]
    9b84:	add	r3, sp, #112	; 0x70
    9b88:	sub	r0, r0, ip
    9b8c:	bic	r2, r0, #1
    9b90:	bic	r0, r5, #1
    9b94:	ldrh	r6, [r4], #2
    9b98:	subs	r2, r2, #2
    9b9c:	strh	r6, [sp, #112]	; 0x70
    9ba0:	vld1.16	{d16[0]}, [r3 :16]
    9ba4:	vmovl.u8	q8, d16
    9ba8:	vmovl.u16	q8, d16
    9bac:	vmovl.u32	q8, d16
    9bb0:	vst1.64	{d16-d17}, [r7]!
    9bb4:	bne	9b94 <ReadInt64Data+0x6fc>
    9bb8:	ldr	r6, [sp, #16]
    9bbc:	cmp	r5, r0
    9bc0:	beq	b1c4 <ReadInt64Data+0x1d2c>
    9bc4:	ldr	r7, [sp, #8]
    9bc8:	add	r2, sp, #120	; 0x78
    9bcc:	add	r3, r0, r8
    9bd0:	add	r2, r2, r0
    9bd4:	add	r3, sl, r3, lsl #3
    9bd8:	sub	r7, r7, ip
    9bdc:	sub	r0, r7, r0
    9be0:	ldrb	r4, [r2], #1
    9be4:	subs	r0, r0, #1
    9be8:	str	r4, [r3]
    9bec:	str	r1, [r3, #4]
    9bf0:	add	r3, r3, #8
    9bf4:	bne	9be0 <ReadInt64Data+0x748>
    9bf8:	b	b1c4 <ReadInt64Data+0x1d2c>
    9bfc:	cmp	r7, #256	; 0x100
    9c00:	bgt	a658 <ReadInt64Data+0x11c0>
    9c04:	ldr	r3, [r4]
    9c08:	add	r4, sp, #120	; 0x78
    9c0c:	mov	r1, r6
    9c10:	mov	r2, r7
    9c14:	mov	r0, r4
    9c18:	bl	18b8 <fread@plt>
    9c1c:	mov	r9, r0
    9c20:	cmp	r7, #1
    9c24:	blt	b1c4 <ReadInt64Data+0x1d2c>
    9c28:	mov	r0, #0
    9c2c:	beq	9c70 <ReadInt64Data+0x7d8>
    9c30:	bic	r0, r7, #1
    9c34:	mov	r5, r7
    9c38:	add	r1, sp, #72	; 0x48
    9c3c:	mov	r3, sl
    9c40:	mov	r2, r0
    9c44:	ldr	r7, [r4], #4
    9c48:	subs	r2, r2, #2
    9c4c:	str	r7, [sp, #72]	; 0x48
    9c50:	vld1.32	{d16[0]}, [r1 :32]
    9c54:	vmovl.s16	q8, d16
    9c58:	vmovl.s32	q8, d16
    9c5c:	vst1.64	{d16-d17}, [r3]!
    9c60:	bne	9c44 <ReadInt64Data+0x7ac>
    9c64:	mov	r7, r5
    9c68:	cmp	r0, r5
    9c6c:	beq	b1c4 <ReadInt64Data+0x1d2c>
    9c70:	add	r3, sp, #120	; 0x78
    9c74:	sub	r1, r7, r0
    9c78:	add	r2, sl, r0, lsl #3
    9c7c:	add	r0, r3, r0, lsl #1
    9c80:	ldrsh	r4, [r0], #2
    9c84:	subs	r1, r1, #1
    9c88:	asr	r5, r4, #31
    9c8c:	strd	r4, [r2]
    9c90:	add	r2, r2, #8
    9c94:	bne	9c80 <ReadInt64Data+0x7e8>
    9c98:	b	b1c4 <ReadInt64Data+0x1d2c>
    9c9c:	cmp	r7, #256	; 0x100
    9ca0:	bgt	a7b8 <ReadInt64Data+0x1320>
    9ca4:	ldr	r3, [r4]
    9ca8:	add	r4, sp, #120	; 0x78
    9cac:	mov	r1, r6
    9cb0:	mov	r2, r7
    9cb4:	mov	r0, r4
    9cb8:	bl	18b8 <fread@plt>
    9cbc:	mov	r9, r0
    9cc0:	cmp	r7, #1
    9cc4:	blt	b1c4 <ReadInt64Data+0x1d2c>
    9cc8:	mov	r1, #0
    9ccc:	mov	r0, #0
    9cd0:	beq	9d18 <ReadInt64Data+0x880>
    9cd4:	bic	r0, r7, #1
    9cd8:	mov	r5, r7
    9cdc:	add	r2, sp, #84	; 0x54
    9ce0:	mov	r7, sl
    9ce4:	mov	r3, r0
    9ce8:	ldr	r6, [r4], #4
    9cec:	subs	r3, r3, #2
    9cf0:	str	r6, [sp, #84]	; 0x54
    9cf4:	vld1.32	{d16[0]}, [r2 :32]
    9cf8:	vmovl.u16	q8, d16
    9cfc:	vmovl.u32	q8, d16
    9d00:	vst1.64	{d16-d17}, [r7]!
    9d04:	bne	9ce8 <ReadInt64Data+0x850>
    9d08:	ldr	r6, [sp, #16]
    9d0c:	mov	r7, r5
    9d10:	cmp	r0, r5
    9d14:	beq	b1c4 <ReadInt64Data+0x1d2c>
    9d18:	sub	r2, r7, r0
    9d1c:	add	r7, sp, #120	; 0x78
    9d20:	add	r3, sl, r0, lsl #3
    9d24:	add	r0, r7, r0, lsl #1
    9d28:	ldrh	r4, [r0], #2
    9d2c:	subs	r2, r2, #1
    9d30:	str	r4, [r3]
    9d34:	str	r1, [r3, #4]
    9d38:	add	r3, r3, #8
    9d3c:	bne	9d28 <ReadInt64Data+0x890>
    9d40:	b	b1c4 <ReadInt64Data+0x1d2c>
    9d44:	cmp	r7, #256	; 0x100
    9d48:	bgt	a934 <ReadInt64Data+0x149c>
    9d4c:	ldr	r3, [r4]
    9d50:	add	r4, sp, #120	; 0x78
    9d54:	mov	r1, r6
    9d58:	mov	r2, r7
    9d5c:	mov	r0, r4
    9d60:	bl	18b8 <fread@plt>
    9d64:	mov	r9, r0
    9d68:	cmp	r7, #1
    9d6c:	blt	b1c4 <ReadInt64Data+0x1d2c>
    9d70:	mov	r0, #0
    9d74:	beq	9dc4 <ReadInt64Data+0x92c>
    9d78:	bic	r0, r7, #1
    9d7c:	mov	r5, r7
    9d80:	add	r1, sp, #24
    9d84:	mov	r3, sl
    9d88:	mov	r2, r0
    9d8c:	ldr	r7, [r4]
    9d90:	ldr	r6, [r4, #4]
    9d94:	subs	r2, r2, #2
    9d98:	add	r4, r4, #8
    9d9c:	str	r6, [sp, #28]
    9da0:	str	r7, [sp, #24]
    9da4:	vld1.32	{d16}, [r1 :64]
    9da8:	vmovl.s32	q8, d16
    9dac:	vst1.64	{d16-d17}, [r3]!
    9db0:	bne	9d8c <ReadInt64Data+0x8f4>
    9db4:	ldr	r6, [sp, #16]
    9db8:	mov	r7, r5
    9dbc:	cmp	r0, r5
    9dc0:	beq	b1c4 <ReadInt64Data+0x1d2c>
    9dc4:	add	r3, sp, #120	; 0x78
    9dc8:	sub	r1, r7, r0
    9dcc:	add	r2, sl, r0, lsl #3
    9dd0:	add	r0, r3, r0, lsl #2
    9dd4:	ldr	r4, [r0], #4
    9dd8:	subs	r1, r1, #1
    9ddc:	asr	r5, r4, #31
    9de0:	strd	r4, [r2]
    9de4:	add	r2, r2, #8
    9de8:	bne	9dd4 <ReadInt64Data+0x93c>
    9dec:	b	b1c4 <ReadInt64Data+0x1d2c>
    9df0:	cmp	r7, #256	; 0x100
    9df4:	bgt	aaa0 <ReadInt64Data+0x1608>
    9df8:	ldr	r3, [r4]
    9dfc:	add	r4, sp, #120	; 0x78
    9e00:	mov	r1, r6
    9e04:	mov	r2, r7
    9e08:	mov	r0, r4
    9e0c:	bl	18b8 <fread@plt>
    9e10:	mov	r9, r0
    9e14:	cmp	r7, #1
    9e18:	blt	b1c4 <ReadInt64Data+0x1d2c>
    9e1c:	mov	r1, #0
    9e20:	mov	r0, #0
    9e24:	beq	9e74 <ReadInt64Data+0x9dc>
    9e28:	bic	r0, r7, #1
    9e2c:	mov	ip, r7
    9e30:	add	r2, sp, #48	; 0x30
    9e34:	mov	r7, sl
    9e38:	mov	r3, r0
    9e3c:	ldr	r6, [r4]
    9e40:	ldr	r5, [r4, #4]
    9e44:	subs	r3, r3, #2
    9e48:	add	r4, r4, #8
    9e4c:	str	r5, [sp, #52]	; 0x34
    9e50:	str	r6, [sp, #48]	; 0x30
    9e54:	vld1.32	{d16}, [r2 :64]
    9e58:	vmovl.u32	q8, d16
    9e5c:	vst1.64	{d16-d17}, [r7]!
    9e60:	bne	9e3c <ReadInt64Data+0x9a4>
    9e64:	ldr	r6, [sp, #16]
    9e68:	mov	r7, ip
    9e6c:	cmp	r0, ip
    9e70:	beq	b1c4 <ReadInt64Data+0x1d2c>
    9e74:	sub	r2, r7, r0
    9e78:	add	r7, sp, #120	; 0x78
    9e7c:	add	r3, sl, r0, lsl #3
    9e80:	add	r0, r7, r0, lsl #2
    9e84:	ldr	r4, [r0], #4
    9e88:	subs	r2, r2, #1
    9e8c:	str	r4, [r3]
    9e90:	str	r1, [r3, #4]
    9e94:	add	r3, r3, #8
    9e98:	bne	9e84 <ReadInt64Data+0x9ec>
    9e9c:	b	b1c4 <ReadInt64Data+0x1d2c>
    9ea0:	cmp	r7, #256	; 0x100
    9ea4:	bgt	ac14 <ReadInt64Data+0x177c>
    9ea8:	ldr	r3, [r4]
    9eac:	add	r4, sp, #120	; 0x78
    9eb0:	mov	r1, r6
    9eb4:	mov	r2, r7
    9eb8:	mov	r0, r4
    9ebc:	bl	18b8 <fread@plt>
    9ec0:	mov	r9, r0
    9ec4:	cmp	r7, #1
    9ec8:	blt	b1c4 <ReadInt64Data+0x1d2c>
    9ecc:	ldr	r0, [r4], #4
    9ed0:	bl	5f344 <__aeabi_f2lz>
    9ed4:	strd	r0, [sl]
    9ed8:	subs	r7, r7, #1
    9edc:	add	sl, sl, #8
    9ee0:	bne	9ecc <ReadInt64Data+0xa34>
    9ee4:	b	b1c4 <ReadInt64Data+0x1d2c>
    9ee8:	cmp	r7, #256	; 0x100
    9eec:	bgt	acfc <ReadInt64Data+0x1864>
    9ef0:	ldr	r3, [r4]
    9ef4:	add	r4, sp, #120	; 0x78
    9ef8:	mov	r1, r6
    9efc:	mov	r2, r7
    9f00:	mov	r0, r4
    9f04:	bl	18b8 <fread@plt>
    9f08:	mov	r9, r0
    9f0c:	cmp	r7, #1
    9f10:	blt	b1c4 <ReadInt64Data+0x1d2c>
    9f14:	vldr	d16, [r4]
    9f18:	vmov	r0, r1, d16
    9f1c:	bl	5f370 <__aeabi_d2lz>
    9f20:	strd	r0, [sl]
    9f24:	subs	r7, r7, #1
    9f28:	add	sl, sl, #8
    9f2c:	add	r4, r4, #8
    9f30:	bne	9f14 <ReadInt64Data+0xa7c>
    9f34:	b	b1c4 <ReadInt64Data+0x1d2c>
    9f38:	cmp	r7, #256	; 0x100
    9f3c:	bgt	adf8 <ReadInt64Data+0x1960>
    9f40:	ldr	r3, [r4]
    9f44:	add	r0, sp, #120	; 0x78
    9f48:	mov	r1, r6
    9f4c:	mov	r2, r7
    9f50:	bl	18b8 <fread@plt>
    9f54:	mov	r9, r0
    9f58:	cmp	r7, #1
    9f5c:	blt	aefc <ReadInt64Data+0x1a64>
    9f60:	lsl	r2, r7, #3
    9f64:	add	r1, sp, #120	; 0x78
    9f68:	mov	r0, sl
    9f6c:	bl	181c <memcpy@plt>
    9f70:	cmp	r8, #13
    9f74:	beq	af04 <ReadInt64Data+0x1a6c>
    9f78:	b	b1c4 <ReadInt64Data+0x1d2c>
    9f7c:	sub	r0, r7, #256	; 0x100
    9f80:	add	r1, sl, #2048	; 0x800
    9f84:	mov	r9, #0
    9f88:	str	r7, [sp, #4]
    9f8c:	str	r0, [sp, #12]
    9f90:	mov	r0, #0
    9f94:	ldr	r3, [r4]
    9f98:	add	r4, sp, #120	; 0x78
    9f9c:	mov	r8, r0
    9fa0:	mov	r5, r1
    9fa4:	mov	r1, r6
    9fa8:	mov	r2, #256	; 0x100
    9fac:	mov	r0, r4
    9fb0:	bl	18b8 <fread@plt>
    9fb4:	mov	r7, r0
    9fb8:	mov	r6, #0
    9fbc:	mov	r0, r4
    9fc0:	bl	1c18 <Mat_int16Swap>
    9fc4:	mov	r1, sl
    9fc8:	add	r4, r4, #2
    9fcc:	str	r0, [r1, r6]!
    9fd0:	add	r6, r6, #8
    9fd4:	asr	r0, r0, #31
    9fd8:	cmp	r6, #2048	; 0x800
    9fdc:	str	r0, [r1, #4]
    9fe0:	bne	9fbc <ReadInt64Data+0xb24>
    9fe4:	ldr	r2, [sp, #12]
    9fe8:	ldr	r6, [sp, #16]
    9fec:	ldr	r4, [sp, #20]
    9ff0:	add	r0, r8, #256	; 0x100
    9ff4:	add	r9, r7, r9
    9ff8:	add	sl, sl, #2048	; 0x800
    9ffc:	add	r1, r5, #2048	; 0x800
    a000:	cmp	r0, r2
    a004:	blt	9f94 <ReadInt64Data+0xafc>
    a008:	ldr	r2, [sp, #4]
    a00c:	cmp	r0, r2
    a010:	bge	b1c4 <ReadInt64Data+0x1d2c>
    a014:	ldr	r3, [r4]
    a018:	mov	r1, r6
    a01c:	sub	r6, r2, r0
    a020:	add	r4, sp, #120	; 0x78
    a024:	mov	r0, r4
    a028:	mov	r2, r6
    a02c:	bl	18b8 <fread@plt>
    a030:	add	r9, r0, r9
    a034:	cmp	r6, #1
    a038:	blt	b160 <ReadInt64Data+0x1cc8>
    a03c:	ldr	r0, [sp, #12]
    a040:	sub	r6, r0, r8
    a044:	mov	r0, r4
    a048:	bl	1c18 <Mat_int16Swap>
    a04c:	asr	r1, r0, #31
    a050:	subs	r6, r6, #1
    a054:	add	r4, r4, #2
    a058:	strd	r0, [r5]
    a05c:	add	r5, r5, #8
    a060:	bne	a044 <ReadInt64Data+0xbac>
    a064:	ldr	r6, [sp, #16]
    a068:	mul	r0, r9, r6
    a06c:	sub	sp, fp, #28
    a070:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a074:	sub	r1, r7, #256	; 0x100
    a078:	add	r0, sl, #2048	; 0x800
    a07c:	mov	r9, #0
    a080:	mov	r2, #0
    a084:	mov	r8, #0
    a088:	str	r7, [sp, #4]
    a08c:	str	r1, [sp, #8]
    a090:	ldr	r3, [r4]
    a094:	add	r4, sp, #120	; 0x78
    a098:	str	r2, [sp, #12]
    a09c:	mov	r5, r0
    a0a0:	mov	r1, r6
    a0a4:	mov	r2, #256	; 0x100
    a0a8:	mov	r0, r4
    a0ac:	bl	18b8 <fread@plt>
    a0b0:	mov	r7, r0
    a0b4:	mov	r6, #0
    a0b8:	mov	r0, r4
    a0bc:	bl	1c2c <Mat_uint16Swap>
    a0c0:	mov	r1, sl
    a0c4:	add	r4, r4, #2
    a0c8:	str	r0, [r1, r6]!
    a0cc:	add	r6, r6, #8
    a0d0:	cmp	r6, #2048	; 0x800
    a0d4:	str	r9, [r1, #4]
    a0d8:	bne	a0b8 <ReadInt64Data+0xc20>
    a0dc:	add	r8, r7, r8
    a0e0:	ldr	r7, [sp, #12]
    a0e4:	ldr	r1, [sp, #8]
    a0e8:	ldr	r6, [sp, #16]
    a0ec:	ldr	r4, [sp, #20]
    a0f0:	add	sl, sl, #2048	; 0x800
    a0f4:	add	r0, r5, #2048	; 0x800
    a0f8:	add	r2, r7, #256	; 0x100
    a0fc:	cmp	r2, r1
    a100:	blt	a090 <ReadInt64Data+0xbf8>
    a104:	ldr	r0, [sp, #4]
    a108:	cmp	r2, r0
    a10c:	bge	aed0 <ReadInt64Data+0x1a38>
    a110:	ldr	r3, [r4]
    a114:	mov	r1, r6
    a118:	sub	r6, r0, r2
    a11c:	add	r4, sp, #120	; 0x78
    a120:	mov	r0, r4
    a124:	mov	r2, r6
    a128:	bl	18b8 <fread@plt>
    a12c:	mov	r9, r8
    a130:	cmp	r6, #1
    a134:	add	r9, r0, r8
    a138:	blt	b170 <ReadInt64Data+0x1cd8>
    a13c:	ldr	r0, [sp, #8]
    a140:	sub	r6, r0, r7
    a144:	mov	r7, #0
    a148:	mov	r0, r4
    a14c:	bl	1c2c <Mat_uint16Swap>
    a150:	stm	r5, {r0, r7}
    a154:	add	r5, r5, #8
    a158:	subs	r6, r6, #1
    a15c:	add	r4, r4, #2
    a160:	bne	a148 <ReadInt64Data+0xcb0>
    a164:	ldr	r6, [sp, #16]
    a168:	mul	r0, r9, r6
    a16c:	sub	sp, fp, #28
    a170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a174:	sub	r0, r7, #256	; 0x100
    a178:	add	r1, sl, #2048	; 0x800
    a17c:	mov	r9, #0
    a180:	str	r7, [sp, #4]
    a184:	str	r0, [sp, #12]
    a188:	mov	r0, #0
    a18c:	ldr	r3, [r4]
    a190:	add	r4, sp, #120	; 0x78
    a194:	mov	r8, r0
    a198:	mov	r5, r1
    a19c:	mov	r1, r6
    a1a0:	mov	r2, #256	; 0x100
    a1a4:	mov	r0, r4
    a1a8:	bl	18b8 <fread@plt>
    a1ac:	mov	r7, r0
    a1b0:	mov	r6, #0
    a1b4:	mov	r0, r4
    a1b8:	bl	1bf0 <Mat_int32Swap>
    a1bc:	mov	r1, sl
    a1c0:	add	r4, r4, #4
    a1c4:	str	r0, [r1, r6]!
    a1c8:	add	r6, r6, #8
    a1cc:	asr	r0, r0, #31
    a1d0:	cmp	r6, #2048	; 0x800
    a1d4:	str	r0, [r1, #4]
    a1d8:	bne	a1b4 <ReadInt64Data+0xd1c>
    a1dc:	ldr	r2, [sp, #12]
    a1e0:	ldr	r6, [sp, #16]
    a1e4:	ldr	r4, [sp, #20]
    a1e8:	add	r0, r8, #256	; 0x100
    a1ec:	add	r9, r7, r9
    a1f0:	add	sl, sl, #2048	; 0x800
    a1f4:	add	r1, r5, #2048	; 0x800
    a1f8:	cmp	r0, r2
    a1fc:	blt	a18c <ReadInt64Data+0xcf4>
    a200:	ldr	r2, [sp, #4]
    a204:	cmp	r0, r2
    a208:	bge	b1c4 <ReadInt64Data+0x1d2c>
    a20c:	ldr	r3, [r4]
    a210:	mov	r1, r6
    a214:	sub	r6, r2, r0
    a218:	add	r4, sp, #120	; 0x78
    a21c:	mov	r0, r4
    a220:	mov	r2, r6
    a224:	bl	18b8 <fread@plt>
    a228:	add	r9, r0, r9
    a22c:	cmp	r6, #1
    a230:	blt	b180 <ReadInt64Data+0x1ce8>
    a234:	ldr	r0, [sp, #12]
    a238:	sub	r6, r0, r8
    a23c:	mov	r0, r4
    a240:	bl	1bf0 <Mat_int32Swap>
    a244:	asr	r1, r0, #31
    a248:	subs	r6, r6, #1
    a24c:	add	r4, r4, #4
    a250:	strd	r0, [r5]
    a254:	add	r5, r5, #8
    a258:	bne	a23c <ReadInt64Data+0xda4>
    a25c:	ldr	r6, [sp, #16]
    a260:	mul	r0, r9, r6
    a264:	sub	sp, fp, #28
    a268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a26c:	sub	r1, r7, #256	; 0x100
    a270:	add	r0, sl, #2048	; 0x800
    a274:	mov	r9, #0
    a278:	mov	r2, #0
    a27c:	mov	r8, #0
    a280:	str	r7, [sp, #4]
    a284:	str	r1, [sp, #8]
    a288:	ldr	r3, [r4]
    a28c:	add	r4, sp, #120	; 0x78
    a290:	str	r2, [sp, #12]
    a294:	mov	r5, r0
    a298:	mov	r1, r6
    a29c:	mov	r2, #256	; 0x100
    a2a0:	mov	r0, r4
    a2a4:	bl	18b8 <fread@plt>
    a2a8:	mov	r7, r0
    a2ac:	mov	r6, #0
    a2b0:	mov	r0, r4
    a2b4:	bl	1c04 <Mat_uint32Swap>
    a2b8:	mov	r1, sl
    a2bc:	add	r4, r4, #4
    a2c0:	str	r0, [r1, r6]!
    a2c4:	add	r6, r6, #8
    a2c8:	cmp	r6, #2048	; 0x800
    a2cc:	str	r9, [r1, #4]
    a2d0:	bne	a2b0 <ReadInt64Data+0xe18>
    a2d4:	add	r8, r7, r8
    a2d8:	ldr	r7, [sp, #12]
    a2dc:	ldr	r1, [sp, #8]
    a2e0:	ldr	r6, [sp, #16]
    a2e4:	ldr	r4, [sp, #20]
    a2e8:	add	sl, sl, #2048	; 0x800
    a2ec:	add	r0, r5, #2048	; 0x800
    a2f0:	add	r2, r7, #256	; 0x100
    a2f4:	cmp	r2, r1
    a2f8:	blt	a288 <ReadInt64Data+0xdf0>
    a2fc:	ldr	r0, [sp, #4]
    a300:	cmp	r2, r0
    a304:	bge	aee0 <ReadInt64Data+0x1a48>
    a308:	ldr	r3, [r4]
    a30c:	mov	r1, r6
    a310:	sub	r6, r0, r2
    a314:	add	r4, sp, #120	; 0x78
    a318:	mov	r0, r4
    a31c:	mov	r2, r6
    a320:	bl	18b8 <fread@plt>
    a324:	mov	r9, r8
    a328:	cmp	r6, #1
    a32c:	add	r9, r0, r8
    a330:	blt	b190 <ReadInt64Data+0x1cf8>
    a334:	ldr	r0, [sp, #8]
    a338:	sub	r6, r0, r7
    a33c:	mov	r7, #0
    a340:	mov	r0, r4
    a344:	bl	1c04 <Mat_uint32Swap>
    a348:	stm	r5, {r0, r7}
    a34c:	add	r5, r5, #8
    a350:	subs	r6, r6, #1
    a354:	add	r4, r4, #4
    a358:	bne	a340 <ReadInt64Data+0xea8>
    a35c:	ldr	r6, [sp, #16]
    a360:	mul	r0, r9, r6
    a364:	sub	sp, fp, #28
    a368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a36c:	sub	r0, r7, #256	; 0x100
    a370:	add	r1, sl, #2048	; 0x800
    a374:	mov	r9, #0
    a378:	str	r7, [sp, #4]
    a37c:	str	r0, [sp, #12]
    a380:	mov	r0, #0
    a384:	ldr	r3, [r4]
    a388:	add	r7, sp, #120	; 0x78
    a38c:	mov	r8, r0
    a390:	mov	r5, r1
    a394:	mov	r1, r6
    a398:	mov	r2, #256	; 0x100
    a39c:	mov	r0, r7
    a3a0:	bl	18b8 <fread@plt>
    a3a4:	mov	r4, r0
    a3a8:	mov	r6, #0
    a3ac:	mov	r0, r7
    a3b0:	bl	1c44 <Mat_floatSwap>
    a3b4:	vmov	r0, s0
    a3b8:	bl	5f344 <__aeabi_f2lz>
    a3bc:	mov	r2, sl
    a3c0:	add	r7, r7, #4
    a3c4:	str	r0, [r2, r6]!
    a3c8:	add	r6, r6, #8
    a3cc:	cmp	r6, #2048	; 0x800
    a3d0:	str	r1, [r2, #4]
    a3d4:	bne	a3ac <ReadInt64Data+0xf14>
    a3d8:	ldr	r2, [sp, #12]
    a3dc:	add	r9, r4, r9
    a3e0:	ldr	r6, [sp, #16]
    a3e4:	ldr	r4, [sp, #20]
    a3e8:	add	r0, r8, #256	; 0x100
    a3ec:	add	sl, sl, #2048	; 0x800
    a3f0:	add	r1, r5, #2048	; 0x800
    a3f4:	cmp	r0, r2
    a3f8:	blt	a384 <ReadInt64Data+0xeec>
    a3fc:	ldr	r2, [sp, #4]
    a400:	cmp	r0, r2
    a404:	bge	b1c4 <ReadInt64Data+0x1d2c>
    a408:	ldr	r3, [r4]
    a40c:	mov	r1, r6
    a410:	sub	r6, r2, r0
    a414:	add	r4, sp, #120	; 0x78
    a418:	mov	r0, r4
    a41c:	mov	r2, r6
    a420:	bl	18b8 <fread@plt>
    a424:	add	r9, r0, r9
    a428:	cmp	r6, #1
    a42c:	blt	acec <ReadInt64Data+0x1854>
    a430:	ldr	r0, [sp, #12]
    a434:	sub	r6, r0, r8
    a438:	mov	r0, r4
    a43c:	bl	1c44 <Mat_floatSwap>
    a440:	vmov	r0, s0
    a444:	bl	5f344 <__aeabi_f2lz>
    a448:	strd	r0, [r5]
    a44c:	add	r5, r5, #8
    a450:	subs	r6, r6, #1
    a454:	add	r4, r4, #4
    a458:	bne	a438 <ReadInt64Data+0xfa0>
    a45c:	b	acec <ReadInt64Data+0x1854>
    a460:	sub	r0, r7, #256	; 0x100
    a464:	add	r1, sl, #2048	; 0x800
    a468:	add	r4, sp, #120	; 0x78
    a46c:	mov	r9, #0
    a470:	str	r7, [sp, #4]
    a474:	str	r0, [sp, #12]
    a478:	mov	r0, #0
    a47c:	mov	r8, r0
    a480:	ldr	r0, [sp, #20]
    a484:	mov	r5, r1
    a488:	mov	r1, r6
    a48c:	mov	r2, #256	; 0x100
    a490:	ldr	r3, [r0]
    a494:	mov	r0, r4
    a498:	bl	18b8 <fread@plt>
    a49c:	mov	r7, r0
    a4a0:	mov	r6, #0
    a4a4:	add	r0, r4, r6
    a4a8:	bl	1c88 <Mat_doubleSwap>
    a4ac:	vmov	r0, r1, d0
    a4b0:	bl	5f370 <__aeabi_d2lz>
    a4b4:	mov	r2, sl
    a4b8:	str	r0, [r2, r6]!
    a4bc:	add	r6, r6, #8
    a4c0:	cmp	r6, #2048	; 0x800
    a4c4:	str	r1, [r2, #4]
    a4c8:	bne	a4a4 <ReadInt64Data+0x100c>
    a4cc:	ldr	r2, [sp, #12]
    a4d0:	ldr	r6, [sp, #16]
    a4d4:	add	r0, r8, #256	; 0x100
    a4d8:	add	r9, r7, r9
    a4dc:	add	sl, sl, #2048	; 0x800
    a4e0:	add	r1, r5, #2048	; 0x800
    a4e4:	cmp	r0, r2
    a4e8:	blt	a47c <ReadInt64Data+0xfe4>
    a4ec:	ldr	r2, [sp, #4]
    a4f0:	cmp	r0, r2
    a4f4:	bge	b1c4 <ReadInt64Data+0x1d2c>
    a4f8:	mov	r1, r6
    a4fc:	sub	r6, r2, r0
    a500:	ldr	r0, [sp, #20]
    a504:	add	r4, sp, #120	; 0x78
    a508:	mov	r2, r6
    a50c:	ldr	r3, [r0]
    a510:	mov	r0, r4
    a514:	bl	18b8 <fread@plt>
    a518:	add	r9, r0, r9
    a51c:	cmp	r6, #1
    a520:	blt	ade8 <ReadInt64Data+0x1950>
    a524:	ldr	r0, [sp, #12]
    a528:	sub	r6, r0, r8
    a52c:	mov	r0, r4
    a530:	bl	1c88 <Mat_doubleSwap>
    a534:	vmov	r0, r1, d0
    a538:	bl	5f370 <__aeabi_d2lz>
    a53c:	strd	r0, [r5]
    a540:	add	r5, r5, #8
    a544:	subs	r6, r6, #1
    a548:	add	r4, r4, #8
    a54c:	bne	a52c <ReadInt64Data+0x1094>
    a550:	b	ade8 <ReadInt64Data+0x1950>
    a554:	sub	r0, r7, #256	; 0x100
    a558:	add	r1, sl, #2048	; 0x800
    a55c:	add	r4, sp, #120	; 0x78
    a560:	mov	r6, sl
    a564:	mov	r9, #0
    a568:	str	r8, [sp]
    a56c:	str	r7, [sp, #4]
    a570:	str	r0, [sp, #8]
    a574:	mov	r0, #0
    a578:	str	r0, [sp, #12]
    a57c:	ldr	r0, [sp, #20]
    a580:	mov	r5, r1
    a584:	ldr	r1, [sp, #16]
    a588:	mov	r2, #256	; 0x100
    a58c:	mov	r8, r9
    a590:	ldr	r3, [r0]
    a594:	mov	r0, r4
    a598:	bl	18b8 <fread@plt>
    a59c:	mov	r7, r0
    a5a0:	mov	r9, #0
    a5a4:	add	r0, r4, r9
    a5a8:	bl	1b84 <Mat_int64Swap>
    a5ac:	mov	r2, r6
    a5b0:	str	r0, [r2, r9]!
    a5b4:	add	r9, r9, #8
    a5b8:	cmp	r9, #2048	; 0x800
    a5bc:	str	r1, [r2, #4]
    a5c0:	bne	a5a4 <ReadInt64Data+0x110c>
    a5c4:	ldr	r0, [sp, #12]
    a5c8:	ldr	r2, [sp, #8]
    a5cc:	mov	r9, r8
    a5d0:	add	r6, r6, #2048	; 0x800
    a5d4:	add	r1, r5, #2048	; 0x800
    a5d8:	add	r9, r7, r8
    a5dc:	add	r0, r0, #256	; 0x100
    a5e0:	cmp	r0, r2
    a5e4:	blt	a578 <ReadInt64Data+0x10e0>
    a5e8:	ldr	r7, [sp, #4]
    a5ec:	cmp	r0, r7
    a5f0:	bge	aef0 <ReadInt64Data+0x1a58>
    a5f4:	sub	r7, r7, r0
    a5f8:	ldr	r0, [sp, #20]
    a5fc:	ldr	r6, [sp, #16]
    a600:	add	r4, sp, #120	; 0x78
    a604:	mov	r2, r7
    a608:	ldr	r3, [r0]
    a60c:	mov	r0, r4
    a610:	mov	r1, r6
    a614:	bl	18b8 <fread@plt>
    a618:	ldr	r8, [sp]
    a61c:	add	r9, r0, r9
    a620:	cmp	r7, #1
    a624:	blt	aea8 <ReadInt64Data+0x1a10>
    a628:	ldr	r0, [sp, #8]
    a62c:	ldr	r1, [sp, #12]
    a630:	sub	r6, r0, r1
    a634:	mov	r0, r4
    a638:	bl	1b84 <Mat_int64Swap>
    a63c:	strd	r0, [r5]
    a640:	add	r5, r5, #8
    a644:	subs	r6, r6, #1
    a648:	add	r4, r4, #8
    a64c:	bne	a634 <ReadInt64Data+0x119c>
    a650:	ldr	r6, [sp, #16]
    a654:	b	aea8 <ReadInt64Data+0x1a10>
    a658:	sub	r1, r7, #256	; 0x100
    a65c:	add	r0, sl, #2048	; 0x800
    a660:	mov	r2, #256	; 0x100
    a664:	add	r4, sp, #120	; 0x78
    a668:	add	r9, sp, #80	; 0x50
    a66c:	mov	r5, sl
    a670:	mov	r6, #0
    a674:	str	r7, [sp, #4]
    a678:	str	r1, [sp, #8]
    a67c:	mov	r1, #0
    a680:	mov	r8, r0
    a684:	ldr	r0, [sp, #20]
    a688:	str	r1, [sp, #12]
    a68c:	ldr	r1, [sp, #16]
    a690:	mov	r7, r2
    a694:	mov	r2, #256	; 0x100
    a698:	ldr	r3, [r0]
    a69c:	mov	r0, r4
    a6a0:	bl	18b8 <fread@plt>
    a6a4:	mov	r1, r5
    a6a8:	mov	r2, #0
    a6ac:	ldr	r3, [r4, r2]
    a6b0:	add	r2, r2, #4
    a6b4:	cmp	r2, #512	; 0x200
    a6b8:	str	r3, [sp, #80]	; 0x50
    a6bc:	vld1.32	{d16[0]}, [r9 :32]
    a6c0:	vmovl.s16	q8, d16
    a6c4:	vmovl.s32	q8, d16
    a6c8:	vst1.64	{d16-d17}, [r1]!
    a6cc:	bne	a6ac <ReadInt64Data+0x1214>
    a6d0:	mov	r1, r7
    a6d4:	ldr	r3, [sp, #8]
    a6d8:	add	r6, r0, r6
    a6dc:	add	r5, r5, #2048	; 0x800
    a6e0:	add	r0, r8, #2048	; 0x800
    a6e4:	add	r2, r7, #256	; 0x100
    a6e8:	ldr	r1, [sp, #12]
    a6ec:	add	r1, r1, #256	; 0x100
    a6f0:	cmp	r1, r3
    a6f4:	blt	a680 <ReadInt64Data+0x11e8>
    a6f8:	ldr	r0, [sp, #4]
    a6fc:	cmp	r1, r0
    a700:	bge	a920 <ReadInt64Data+0x1488>
    a704:	sub	r5, r0, r1
    a708:	ldr	r0, [sp, #20]
    a70c:	ldr	r1, [sp, #16]
    a710:	add	r4, sp, #120	; 0x78
    a714:	mov	r2, r5
    a718:	ldr	r3, [r0]
    a71c:	mov	r0, r4
    a720:	bl	18b8 <fread@plt>
    a724:	mov	r9, r6
    a728:	cmp	r5, #1
    a72c:	add	r9, r0, r6
    a730:	blt	b1b0 <ReadInt64Data+0x1d18>
    a734:	ldr	r6, [sp, #16]
    a738:	ldr	ip, [sp, #12]
    a73c:	mov	r0, #0
    a740:	beq	a780 <ReadInt64Data+0x12e8>
    a744:	ldr	r0, [sp, #8]
    a748:	add	r2, sp, #76	; 0x4c
    a74c:	sub	r0, r0, ip
    a750:	bic	r1, r0, #1
    a754:	bic	r0, r5, #1
    a758:	ldr	r3, [r4], #4
    a75c:	subs	r1, r1, #2
    a760:	str	r3, [sp, #76]	; 0x4c
    a764:	vld1.32	{d16[0]}, [r2 :32]
    a768:	vmovl.s16	q8, d16
    a76c:	vmovl.s32	q8, d16
    a770:	vst1.64	{d16-d17}, [r8]!
    a774:	bne	a758 <ReadInt64Data+0x12c0>
    a778:	cmp	r5, r0
    a77c:	beq	b1c4 <ReadInt64Data+0x1d2c>
    a780:	ldr	r3, [sp, #8]
    a784:	add	r1, sp, #120	; 0x78
    a788:	add	r2, r0, r7
    a78c:	add	r1, r1, r0, lsl #1
    a790:	add	r2, sl, r2, lsl #3
    a794:	sub	r3, r3, ip
    a798:	sub	r0, r3, r0
    a79c:	ldrsh	r4, [r1], #2
    a7a0:	subs	r0, r0, #1
    a7a4:	asr	r5, r4, #31
    a7a8:	strd	r4, [r2]
    a7ac:	add	r2, r2, #8
    a7b0:	bne	a79c <ReadInt64Data+0x1304>
    a7b4:	b	b1c4 <ReadInt64Data+0x1d2c>
    a7b8:	sub	r1, r7, #256	; 0x100
    a7bc:	add	r0, sl, #2048	; 0x800
    a7c0:	mov	r2, #256	; 0x100
    a7c4:	add	r4, sp, #120	; 0x78
    a7c8:	add	r9, sp, #92	; 0x5c
    a7cc:	mov	r5, sl
    a7d0:	mov	r6, #0
    a7d4:	str	r7, [sp, #4]
    a7d8:	str	r1, [sp, #8]
    a7dc:	mov	r1, #0
    a7e0:	mov	r8, r0
    a7e4:	ldr	r0, [sp, #20]
    a7e8:	str	r1, [sp, #12]
    a7ec:	ldr	r1, [sp, #16]
    a7f0:	mov	r7, r2
    a7f4:	mov	r2, #256	; 0x100
    a7f8:	ldr	r3, [r0]
    a7fc:	mov	r0, r4
    a800:	bl	18b8 <fread@plt>
    a804:	mov	r1, r5
    a808:	mov	r2, #0
    a80c:	ldr	r3, [r4, r2]
    a810:	add	r2, r2, #4
    a814:	cmp	r2, #512	; 0x200
    a818:	str	r3, [sp, #92]	; 0x5c
    a81c:	vld1.32	{d16[0]}, [r9 :32]
    a820:	vmovl.u16	q8, d16
    a824:	vmovl.u32	q8, d16
    a828:	vst1.64	{d16-d17}, [r1]!
    a82c:	bne	a80c <ReadInt64Data+0x1374>
    a830:	mov	r1, r7
    a834:	ldr	r3, [sp, #8]
    a838:	add	r6, r0, r6
    a83c:	add	r5, r5, #2048	; 0x800
    a840:	add	r0, r8, #2048	; 0x800
    a844:	add	r2, r7, #256	; 0x100
    a848:	ldr	r1, [sp, #12]
    a84c:	add	r1, r1, #256	; 0x100
    a850:	cmp	r1, r3
    a854:	blt	a7e0 <ReadInt64Data+0x1348>
    a858:	ldr	r0, [sp, #4]
    a85c:	cmp	r1, r0
    a860:	bge	a920 <ReadInt64Data+0x1488>
    a864:	sub	r5, r0, r1
    a868:	ldr	r0, [sp, #20]
    a86c:	ldr	r1, [sp, #16]
    a870:	add	r4, sp, #120	; 0x78
    a874:	mov	r2, r5
    a878:	ldr	r3, [r0]
    a87c:	mov	r0, r4
    a880:	bl	18b8 <fread@plt>
    a884:	mov	r9, r6
    a888:	cmp	r5, #1
    a88c:	add	r9, r0, r6
    a890:	blt	b1c0 <ReadInt64Data+0x1d28>
    a894:	ldr	r6, [sp, #16]
    a898:	ldr	ip, [sp, #12]
    a89c:	mov	r1, #0
    a8a0:	mov	r0, #0
    a8a4:	beq	a8e8 <ReadInt64Data+0x1450>
    a8a8:	ldr	r0, [sp, #8]
    a8ac:	add	r3, sp, #88	; 0x58
    a8b0:	sub	r0, r0, ip
    a8b4:	bic	r2, r0, #1
    a8b8:	bic	r0, r5, #1
    a8bc:	ldr	r6, [r4], #4
    a8c0:	subs	r2, r2, #2
    a8c4:	str	r6, [sp, #88]	; 0x58
    a8c8:	vld1.32	{d16[0]}, [r3 :32]
    a8cc:	vmovl.u16	q8, d16
    a8d0:	vmovl.u32	q8, d16
    a8d4:	vst1.64	{d16-d17}, [r8]!
    a8d8:	bne	a8bc <ReadInt64Data+0x1424>
    a8dc:	ldr	r6, [sp, #16]
    a8e0:	cmp	r5, r0
    a8e4:	beq	b1c4 <ReadInt64Data+0x1d2c>
    a8e8:	add	r3, r0, r7
    a8ec:	ldr	r7, [sp, #8]
    a8f0:	add	r2, sp, #120	; 0x78
    a8f4:	add	r2, r2, r0, lsl #1
    a8f8:	add	r3, sl, r3, lsl #3
    a8fc:	sub	r7, r7, ip
    a900:	sub	r0, r7, r0
    a904:	ldrh	r4, [r2], #2
    a908:	subs	r0, r0, #1
    a90c:	str	r4, [r3]
    a910:	str	r1, [r3, #4]
    a914:	add	r3, r3, #8
    a918:	bne	a904 <ReadInt64Data+0x146c>
    a91c:	b	b1c4 <ReadInt64Data+0x1d2c>
    a920:	mov	r9, r6
    a924:	ldr	r6, [sp, #16]
    a928:	mul	r0, r9, r6
    a92c:	sub	sp, fp, #28
    a930:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a934:	sub	r1, r7, #256	; 0x100
    a938:	str	r7, [sp, #4]
    a93c:	add	r0, sl, #2048	; 0x800
    a940:	mov	r2, #256	; 0x100
    a944:	add	r4, sp, #120	; 0x78
    a948:	add	r7, sp, #40	; 0x28
    a94c:	mov	r8, sl
    a950:	mov	r9, #0
    a954:	str	r1, [sp]
    a958:	mov	r1, #0
    a95c:	mov	r5, r0
    a960:	ldr	r0, [sp, #20]
    a964:	str	r1, [sp, #12]
    a968:	str	r2, [sp, #8]
    a96c:	mov	r1, r6
    a970:	mov	r2, #256	; 0x100
    a974:	ldr	r3, [r0]
    a978:	mov	r0, r4
    a97c:	bl	18b8 <fread@plt>
    a980:	mov	r1, r8
    a984:	mov	r2, #0
    a988:	ldr	r3, [r4, r2]
    a98c:	str	r3, [sp, #40]	; 0x28
    a990:	add	r3, r4, r2
    a994:	add	r2, r2, #8
    a998:	ldr	r3, [r3, #4]
    a99c:	cmp	r2, #1024	; 0x400
    a9a0:	str	r3, [sp, #44]	; 0x2c
    a9a4:	vld1.32	{d16}, [r7 :64]
    a9a8:	vmovl.s32	q8, d16
    a9ac:	vst1.64	{d16-d17}, [r1]!
    a9b0:	bne	a988 <ReadInt64Data+0x14f0>
    a9b4:	ldr	r1, [sp, #8]
    a9b8:	ldr	r3, [sp]
    a9bc:	add	r9, r0, r9
    a9c0:	add	r8, r8, #2048	; 0x800
    a9c4:	add	r0, r5, #2048	; 0x800
    a9c8:	add	r2, r1, #256	; 0x100
    a9cc:	ldr	r1, [sp, #12]
    a9d0:	add	r1, r1, #256	; 0x100
    a9d4:	cmp	r1, r3
    a9d8:	blt	a95c <ReadInt64Data+0x14c4>
    a9dc:	ldr	r0, [sp, #4]
    a9e0:	cmp	r1, r0
    a9e4:	bge	b1c4 <ReadInt64Data+0x1d2c>
    a9e8:	sub	r4, r0, r1
    a9ec:	ldr	r0, [sp, #20]
    a9f0:	add	r7, sp, #120	; 0x78
    a9f4:	mov	r1, r6
    a9f8:	mov	r2, r4
    a9fc:	ldr	r3, [r0]
    aa00:	mov	r0, r7
    aa04:	bl	18b8 <fread@plt>
    aa08:	add	r9, r0, r9
    aa0c:	cmp	r4, #1
    aa10:	blt	b1c4 <ReadInt64Data+0x1d2c>
    aa14:	ldr	ip, [sp, #12]
    aa18:	mov	r0, #0
    aa1c:	beq	aa64 <ReadInt64Data+0x15cc>
    aa20:	ldr	r0, [sp]
    aa24:	add	r2, sp, #32
    aa28:	sub	r0, r0, ip
    aa2c:	bic	r1, r0, #1
    aa30:	bic	r0, r4, #1
    aa34:	ldm	r7, {r3, r6}
    aa38:	subs	r1, r1, #2
    aa3c:	add	r7, r7, #8
    aa40:	str	r6, [sp, #36]	; 0x24
    aa44:	str	r3, [sp, #32]
    aa48:	vld1.32	{d16}, [r2 :64]
    aa4c:	vmovl.s32	q8, d16
    aa50:	vst1.64	{d16-d17}, [r5]!
    aa54:	bne	aa34 <ReadInt64Data+0x159c>
    aa58:	ldr	r6, [sp, #16]
    aa5c:	cmp	r4, r0
    aa60:	beq	b1c4 <ReadInt64Data+0x1d2c>
    aa64:	ldr	r2, [sp, #8]
    aa68:	ldr	r3, [sp]
    aa6c:	add	r1, sp, #120	; 0x78
    aa70:	add	r1, r1, r0, lsl #2
    aa74:	add	r2, r0, r2
    aa78:	sub	r3, r3, ip
    aa7c:	add	r2, sl, r2, lsl #3
    aa80:	sub	r0, r3, r0
    aa84:	ldr	r4, [r1], #4
    aa88:	subs	r0, r0, #1
    aa8c:	asr	r5, r4, #31
    aa90:	strd	r4, [r2]
    aa94:	add	r2, r2, #8
    aa98:	bne	aa84 <ReadInt64Data+0x15ec>
    aa9c:	b	b1c4 <ReadInt64Data+0x1d2c>
    aaa0:	sub	r1, r7, #256	; 0x100
    aaa4:	str	r7, [sp, #4]
    aaa8:	add	r0, sl, #2048	; 0x800
    aaac:	mov	r2, #256	; 0x100
    aab0:	add	r4, sp, #120	; 0x78
    aab4:	add	r7, sp, #64	; 0x40
    aab8:	mov	r8, sl
    aabc:	mov	r9, #0
    aac0:	str	r1, [sp]
    aac4:	mov	r1, #0
    aac8:	mov	r5, r0
    aacc:	ldr	r0, [sp, #20]
    aad0:	str	r1, [sp, #12]
    aad4:	str	r2, [sp, #8]
    aad8:	mov	r1, r6
    aadc:	mov	r2, #256	; 0x100
    aae0:	ldr	r3, [r0]
    aae4:	mov	r0, r4
    aae8:	bl	18b8 <fread@plt>
    aaec:	mov	r1, r8
    aaf0:	mov	r2, #0
    aaf4:	ldr	r3, [r4, r2]
    aaf8:	str	r3, [sp, #64]	; 0x40
    aafc:	add	r3, r4, r2
    ab00:	add	r2, r2, #8
    ab04:	ldr	r3, [r3, #4]
    ab08:	cmp	r2, #1024	; 0x400
    ab0c:	str	r3, [sp, #68]	; 0x44
    ab10:	vld1.32	{d16}, [r7 :64]
    ab14:	vmovl.u32	q8, d16
    ab18:	vst1.64	{d16-d17}, [r1]!
    ab1c:	bne	aaf4 <ReadInt64Data+0x165c>
    ab20:	ldr	r1, [sp, #8]
    ab24:	ldr	r3, [sp]
    ab28:	add	r9, r0, r9
    ab2c:	add	r8, r8, #2048	; 0x800
    ab30:	add	r0, r5, #2048	; 0x800
    ab34:	add	r2, r1, #256	; 0x100
    ab38:	ldr	r1, [sp, #12]
    ab3c:	add	r1, r1, #256	; 0x100
    ab40:	cmp	r1, r3
    ab44:	blt	aac8 <ReadInt64Data+0x1630>
    ab48:	ldr	r0, [sp, #4]
    ab4c:	cmp	r1, r0
    ab50:	bge	b1c4 <ReadInt64Data+0x1d2c>
    ab54:	sub	r4, r0, r1
    ab58:	ldr	r0, [sp, #20]
    ab5c:	add	r7, sp, #120	; 0x78
    ab60:	mov	r1, r6
    ab64:	mov	r2, r4
    ab68:	ldr	r3, [r0]
    ab6c:	mov	r0, r7
    ab70:	bl	18b8 <fread@plt>
    ab74:	add	r9, r0, r9
    ab78:	cmp	r4, #1
    ab7c:	blt	b1c4 <ReadInt64Data+0x1d2c>
    ab80:	ldr	lr, [sp, #12]
    ab84:	mov	r1, #0
    ab88:	mov	ip, #0
    ab8c:	beq	abd8 <ReadInt64Data+0x1740>
    ab90:	ldr	r0, [sp]
    ab94:	bic	ip, r4, #1
    ab98:	add	r3, sp, #56	; 0x38
    ab9c:	sub	r0, r0, lr
    aba0:	bic	r2, r0, #1
    aba4:	ldr	r6, [r7]
    aba8:	ldr	r0, [r7, #4]
    abac:	subs	r2, r2, #2
    abb0:	add	r7, r7, #8
    abb4:	str	r0, [sp, #60]	; 0x3c
    abb8:	str	r6, [sp, #56]	; 0x38
    abbc:	vld1.32	{d16}, [r3 :64]
    abc0:	vmovl.u32	q8, d16
    abc4:	vst1.64	{d16-d17}, [r5]!
    abc8:	bne	aba4 <ReadInt64Data+0x170c>
    abcc:	ldr	r6, [sp, #16]
    abd0:	cmp	r4, ip
    abd4:	beq	b1c4 <ReadInt64Data+0x1d2c>
    abd8:	add	r0, sp, #120	; 0x78
    abdc:	add	r2, r0, ip, lsl #2
    abe0:	ldr	r0, [sp, #8]
    abe4:	add	r0, ip, r0
    abe8:	add	r3, sl, r0, lsl #3
    abec:	ldr	r0, [sp]
    abf0:	sub	r0, r0, lr
    abf4:	sub	r0, r0, ip
    abf8:	ldr	r4, [r2], #4
    abfc:	subs	r0, r0, #1
    ac00:	str	r4, [r3]
    ac04:	str	r1, [r3, #4]
    ac08:	add	r3, r3, #8
    ac0c:	bne	abf8 <ReadInt64Data+0x1760>
    ac10:	b	b1c4 <ReadInt64Data+0x1d2c>
    ac14:	sub	r0, r7, #256	; 0x100
    ac18:	add	r1, sl, #2048	; 0x800
    ac1c:	mov	r9, #0
    ac20:	str	r7, [sp, #4]
    ac24:	str	r0, [sp, #12]
    ac28:	mov	r0, #0
    ac2c:	ldr	r3, [r4]
    ac30:	add	r4, sp, #120	; 0x78
    ac34:	mov	r8, r0
    ac38:	mov	r5, r1
    ac3c:	mov	r1, r6
    ac40:	mov	r2, #256	; 0x100
    ac44:	mov	r0, r4
    ac48:	bl	18b8 <fread@plt>
    ac4c:	mov	r7, r0
    ac50:	mov	r6, #0
    ac54:	ldr	r0, [r4], #4
    ac58:	bl	5f344 <__aeabi_f2lz>
    ac5c:	mov	r2, sl
    ac60:	str	r0, [r2, r6]!
    ac64:	add	r6, r6, #8
    ac68:	cmp	r6, #2048	; 0x800
    ac6c:	str	r1, [r2, #4]
    ac70:	bne	ac54 <ReadInt64Data+0x17bc>
    ac74:	ldr	r2, [sp, #12]
    ac78:	ldr	r6, [sp, #16]
    ac7c:	ldr	r4, [sp, #20]
    ac80:	add	r0, r8, #256	; 0x100
    ac84:	add	r9, r7, r9
    ac88:	add	sl, sl, #2048	; 0x800
    ac8c:	add	r1, r5, #2048	; 0x800
    ac90:	cmp	r0, r2
    ac94:	blt	ac2c <ReadInt64Data+0x1794>
    ac98:	ldr	r2, [sp, #4]
    ac9c:	cmp	r0, r2
    aca0:	bge	b1c4 <ReadInt64Data+0x1d2c>
    aca4:	ldr	r3, [r4]
    aca8:	mov	r1, r6
    acac:	sub	r6, r2, r0
    acb0:	add	r4, sp, #120	; 0x78
    acb4:	mov	r0, r4
    acb8:	mov	r2, r6
    acbc:	bl	18b8 <fread@plt>
    acc0:	add	r9, r0, r9
    acc4:	cmp	r6, #1
    acc8:	blt	acec <ReadInt64Data+0x1854>
    accc:	ldr	r0, [sp, #12]
    acd0:	sub	r6, r0, r8
    acd4:	ldr	r0, [r4], #4
    acd8:	bl	5f344 <__aeabi_f2lz>
    acdc:	strd	r0, [r5]
    ace0:	add	r5, r5, #8
    ace4:	subs	r6, r6, #1
    ace8:	bne	acd4 <ReadInt64Data+0x183c>
    acec:	ldr	r6, [sp, #16]
    acf0:	mul	r0, r9, r6
    acf4:	sub	sp, fp, #28
    acf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    acfc:	sub	r0, r7, #256	; 0x100
    ad00:	add	r1, sl, #2048	; 0x800
    ad04:	add	r4, sp, #120	; 0x78
    ad08:	mov	r9, #0
    ad0c:	str	r7, [sp, #4]
    ad10:	str	r0, [sp, #12]
    ad14:	mov	r0, #0
    ad18:	mov	r8, r0
    ad1c:	ldr	r0, [sp, #20]
    ad20:	mov	r5, r1
    ad24:	mov	r1, r6
    ad28:	mov	r2, #256	; 0x100
    ad2c:	ldr	r3, [r0]
    ad30:	mov	r0, r4
    ad34:	bl	18b8 <fread@plt>
    ad38:	mov	r7, r0
    ad3c:	mov	r6, #0
    ad40:	add	r0, r4, r6
    ad44:	vldr	d16, [r0]
    ad48:	vmov	r0, r1, d16
    ad4c:	bl	5f370 <__aeabi_d2lz>
    ad50:	mov	r2, sl
    ad54:	str	r0, [r2, r6]!
    ad58:	add	r6, r6, #8
    ad5c:	cmp	r6, #2048	; 0x800
    ad60:	str	r1, [r2, #4]
    ad64:	bne	ad40 <ReadInt64Data+0x18a8>
    ad68:	ldr	r2, [sp, #12]
    ad6c:	ldr	r6, [sp, #16]
    ad70:	add	r0, r8, #256	; 0x100
    ad74:	add	r9, r7, r9
    ad78:	add	sl, sl, #2048	; 0x800
    ad7c:	add	r1, r5, #2048	; 0x800
    ad80:	cmp	r0, r2
    ad84:	blt	ad18 <ReadInt64Data+0x1880>
    ad88:	ldr	r2, [sp, #4]
    ad8c:	cmp	r0, r2
    ad90:	bge	b1c4 <ReadInt64Data+0x1d2c>
    ad94:	mov	r1, r6
    ad98:	sub	r6, r2, r0
    ad9c:	ldr	r0, [sp, #20]
    ada0:	add	r4, sp, #120	; 0x78
    ada4:	mov	r2, r6
    ada8:	ldr	r3, [r0]
    adac:	mov	r0, r4
    adb0:	bl	18b8 <fread@plt>
    adb4:	add	r9, r0, r9
    adb8:	cmp	r6, #1
    adbc:	blt	ade8 <ReadInt64Data+0x1950>
    adc0:	ldr	r0, [sp, #12]
    adc4:	sub	r6, r0, r8
    adc8:	vldr	d16, [r4]
    adcc:	vmov	r0, r1, d16
    add0:	bl	5f370 <__aeabi_d2lz>
    add4:	strd	r0, [r5]
    add8:	add	r5, r5, #8
    addc:	subs	r6, r6, #1
    ade0:	add	r4, r4, #8
    ade4:	bne	adc8 <ReadInt64Data+0x1930>
    ade8:	ldr	r6, [sp, #16]
    adec:	mul	r0, r9, r6
    adf0:	sub	sp, fp, #28
    adf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    adf8:	sub	r0, r7, #256	; 0x100
    adfc:	lsl	r4, r7, #3
    ae00:	mov	r5, #0
    ae04:	mov	r9, #0
    ae08:	str	r8, [sp]
    ae0c:	str	r7, [sp, #4]
    ae10:	str	r0, [sp, #12]
    ae14:	ldr	r0, [sp, #20]
    ae18:	add	r8, sp, #120	; 0x78
    ae1c:	mov	r1, r6
    ae20:	mov	r2, #256	; 0x100
    ae24:	ldr	r3, [r0]
    ae28:	mov	r0, r8
    ae2c:	bl	18b8 <fread@plt>
    ae30:	mov	r7, r0
    ae34:	add	r0, sl, r5, lsl #3
    ae38:	mov	r1, r8
    ae3c:	mov	r2, #2048	; 0x800
    ae40:	bl	181c <memcpy@plt>
    ae44:	ldr	r0, [sp, #12]
    ae48:	add	r5, r5, #256	; 0x100
    ae4c:	add	r9, r7, r9
    ae50:	sub	r4, r4, #2048	; 0x800
    ae54:	cmp	r5, r0
    ae58:	blt	ae14 <ReadInt64Data+0x197c>
    ae5c:	ldr	r7, [sp, #4]
    ae60:	ldr	r8, [sp]
    ae64:	cmp	r5, r7
    ae68:	bge	aebc <ReadInt64Data+0x1a24>
    ae6c:	ldr	r0, [sp, #20]
    ae70:	ldr	r6, [sp, #16]
    ae74:	sub	r7, r7, r5
    ae78:	mov	r2, r7
    ae7c:	ldr	r3, [r0]
    ae80:	add	r0, sp, #120	; 0x78
    ae84:	mov	r1, r6
    ae88:	bl	18b8 <fread@plt>
    ae8c:	add	r9, r0, r9
    ae90:	cmp	r7, #1
    ae94:	blt	aea8 <ReadInt64Data+0x1a10>
    ae98:	add	r0, sl, r5, lsl #3
    ae9c:	add	r1, sp, #120	; 0x78
    aea0:	mov	r2, r4
    aea4:	bl	181c <memcpy@plt>
    aea8:	ldr	r7, [sp, #4]
    aeac:	ldr	r4, [sp, #20]
    aeb0:	cmp	r8, #13
    aeb4:	beq	af04 <ReadInt64Data+0x1a6c>
    aeb8:	b	b1c4 <ReadInt64Data+0x1d2c>
    aebc:	ldr	r6, [sp, #16]
    aec0:	ldr	r4, [sp, #20]
    aec4:	cmp	r8, #13
    aec8:	beq	af04 <ReadInt64Data+0x1a6c>
    aecc:	b	b1c4 <ReadInt64Data+0x1d2c>
    aed0:	mov	r9, r8
    aed4:	mul	r0, r9, r6
    aed8:	sub	sp, fp, #28
    aedc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aee0:	mov	r9, r8
    aee4:	mul	r0, r9, r6
    aee8:	sub	sp, fp, #28
    aeec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aef0:	ldr	r6, [sp, #16]
    aef4:	ldr	r4, [sp, #20]
    aef8:	ldr	r8, [sp]
    aefc:	cmp	r8, #13
    af00:	bne	b1c4 <ReadInt64Data+0x1d2c>
    af04:	ldr	r0, [r4, #20]
    af08:	cmp	r0, #0
    af0c:	beq	af5c <ReadInt64Data+0x1ac4>
    af10:	cmp	r7, #256	; 0x100
    af14:	bgt	af94 <ReadInt64Data+0x1afc>
    af18:	ldr	r3, [r4]
    af1c:	add	r4, sp, #120	; 0x78
    af20:	mov	r1, r6
    af24:	mov	r2, r7
    af28:	mov	r0, r4
    af2c:	bl	18b8 <fread@plt>
    af30:	add	r9, r0, r9
    af34:	cmp	r7, #1
    af38:	blt	b1c4 <ReadInt64Data+0x1d2c>
    af3c:	mov	r0, r4
    af40:	bl	1bd4 <Mat_uint64Swap>
    af44:	strd	r0, [sl]
    af48:	subs	r7, r7, #1
    af4c:	add	sl, sl, #8
    af50:	add	r4, r4, #8
    af54:	bne	af3c <ReadInt64Data+0x1aa4>
    af58:	b	b1c4 <ReadInt64Data+0x1d2c>
    af5c:	cmp	r7, #256	; 0x100
    af60:	bgt	b080 <ReadInt64Data+0x1be8>
    af64:	ldr	r3, [r4]
    af68:	add	r0, sp, #120	; 0x78
    af6c:	mov	r1, r6
    af70:	mov	r2, r7
    af74:	bl	18b8 <fread@plt>
    af78:	add	r9, r0, r9
    af7c:	cmp	r7, #1
    af80:	blt	b1c4 <ReadInt64Data+0x1d2c>
    af84:	lsl	r2, r7, #3
    af88:	add	r1, sp, #120	; 0x78
    af8c:	mov	r0, sl
    af90:	b	b120 <ReadInt64Data+0x1c88>
    af94:	sub	r0, r7, #256	; 0x100
    af98:	add	r1, sl, #2048	; 0x800
    af9c:	add	r4, sp, #120	; 0x78
    afa0:	str	r7, [sp, #4]
    afa4:	str	r0, [sp, #12]
    afa8:	mov	r0, #0
    afac:	mov	r8, r0
    afb0:	ldr	r0, [sp, #20]
    afb4:	mov	r5, r1
    afb8:	mov	r1, r6
    afbc:	mov	r2, #256	; 0x100
    afc0:	ldr	r3, [r0]
    afc4:	mov	r0, r4
    afc8:	bl	18b8 <fread@plt>
    afcc:	mov	r7, r0
    afd0:	mov	r6, #0
    afd4:	add	r0, r4, r6
    afd8:	bl	1bd4 <Mat_uint64Swap>
    afdc:	mov	r2, sl
    afe0:	str	r0, [r2, r6]!
    afe4:	add	r6, r6, #8
    afe8:	cmp	r6, #2048	; 0x800
    afec:	str	r1, [r2, #4]
    aff0:	bne	afd4 <ReadInt64Data+0x1b3c>
    aff4:	ldr	r2, [sp, #12]
    aff8:	ldr	r6, [sp, #16]
    affc:	add	r0, r8, #256	; 0x100
    b000:	add	r9, r7, r9
    b004:	add	sl, sl, #2048	; 0x800
    b008:	add	r1, r5, #2048	; 0x800
    b00c:	cmp	r0, r2
    b010:	blt	afac <ReadInt64Data+0x1b14>
    b014:	ldr	r2, [sp, #4]
    b018:	cmp	r0, r2
    b01c:	bge	b1c4 <ReadInt64Data+0x1d2c>
    b020:	mov	r1, r6
    b024:	sub	r6, r2, r0
    b028:	ldr	r0, [sp, #20]
    b02c:	add	r4, sp, #120	; 0x78
    b030:	mov	r2, r6
    b034:	ldr	r3, [r0]
    b038:	mov	r0, r4
    b03c:	bl	18b8 <fread@plt>
    b040:	add	r9, r0, r9
    b044:	cmp	r6, #1
    b048:	blt	b1a0 <ReadInt64Data+0x1d08>
    b04c:	ldr	r0, [sp, #12]
    b050:	sub	r6, r0, r8
    b054:	mov	r0, r4
    b058:	bl	1bd4 <Mat_uint64Swap>
    b05c:	strd	r0, [r5]
    b060:	add	r5, r5, #8
    b064:	subs	r6, r6, #1
    b068:	add	r4, r4, #8
    b06c:	bne	b054 <ReadInt64Data+0x1bbc>
    b070:	ldr	r6, [sp, #16]
    b074:	mul	r0, r9, r6
    b078:	sub	sp, fp, #28
    b07c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b080:	sub	r0, r7, #256	; 0x100
    b084:	lsl	r4, r7, #3
    b088:	mov	r5, #0
    b08c:	add	r8, sp, #120	; 0x78
    b090:	str	r7, [sp, #4]
    b094:	str	r0, [sp, #12]
    b098:	ldr	r0, [sp, #20]
    b09c:	mov	r1, r6
    b0a0:	mov	r2, #256	; 0x100
    b0a4:	ldr	r3, [r0]
    b0a8:	mov	r0, r8
    b0ac:	bl	18b8 <fread@plt>
    b0b0:	mov	r7, r0
    b0b4:	add	r0, sl, r5, lsl #3
    b0b8:	mov	r1, r8
    b0bc:	mov	r2, #2048	; 0x800
    b0c0:	bl	181c <memcpy@plt>
    b0c4:	ldr	r0, [sp, #12]
    b0c8:	add	r5, r5, #256	; 0x100
    b0cc:	add	r9, r7, r9
    b0d0:	sub	r4, r4, #2048	; 0x800
    b0d4:	cmp	r5, r0
    b0d8:	blt	b098 <ReadInt64Data+0x1c00>
    b0dc:	ldr	r0, [sp, #4]
    b0e0:	cmp	r5, r0
    b0e4:	bge	b150 <ReadInt64Data+0x1cb8>
    b0e8:	sub	r7, r0, r5
    b0ec:	ldr	r0, [sp, #20]
    b0f0:	ldr	r6, [sp, #16]
    b0f4:	mov	r2, r7
    b0f8:	ldr	r3, [r0]
    b0fc:	add	r0, sp, #120	; 0x78
    b100:	mov	r1, r6
    b104:	bl	18b8 <fread@plt>
    b108:	add	r9, r0, r9
    b10c:	cmp	r7, #1
    b110:	blt	b1c4 <ReadInt64Data+0x1d2c>
    b114:	add	r0, sl, r5, lsl #3
    b118:	add	r1, sp, #120	; 0x78
    b11c:	mov	r2, r4
    b120:	bl	181c <memcpy@plt>
    b124:	mul	r0, r9, r6
    b128:	sub	sp, fp, #28
    b12c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b130:	ldr	r6, [sp, #16]
    b134:	mul	r0, r9, r6
    b138:	sub	sp, fp, #28
    b13c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b140:	ldr	r6, [sp, #16]
    b144:	mul	r0, r9, r6
    b148:	sub	sp, fp, #28
    b14c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b150:	ldr	r6, [sp, #16]
    b154:	mul	r0, r9, r6
    b158:	sub	sp, fp, #28
    b15c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b160:	ldr	r6, [sp, #16]
    b164:	mul	r0, r9, r6
    b168:	sub	sp, fp, #28
    b16c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b170:	ldr	r6, [sp, #16]
    b174:	mul	r0, r9, r6
    b178:	sub	sp, fp, #28
    b17c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b180:	ldr	r6, [sp, #16]
    b184:	mul	r0, r9, r6
    b188:	sub	sp, fp, #28
    b18c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b190:	ldr	r6, [sp, #16]
    b194:	mul	r0, r9, r6
    b198:	sub	sp, fp, #28
    b19c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1a0:	ldr	r6, [sp, #16]
    b1a4:	mul	r0, r9, r6
    b1a8:	sub	sp, fp, #28
    b1ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1b0:	ldr	r6, [sp, #16]
    b1b4:	mul	r0, r9, r6
    b1b8:	sub	sp, fp, #28
    b1bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b1c0:	ldr	r6, [sp, #16]
    b1c4:	mul	r0, r9, r6
    b1c8:	sub	sp, fp, #28
    b1cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000b1d0 <ReadCompressedInt64Data>:
    b1d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b1d4:	add	fp, sp, #28
    b1d8:	sub	sp, sp, #12
    b1dc:	mov	r7, r0
    b1e0:	mov	r0, #0
    b1e4:	cmp	r1, #0
    b1e8:	beq	b1fc <ReadCompressedInt64Data+0x2c>
    b1ec:	cmp	r7, #0
    b1f0:	movne	r5, r2
    b1f4:	cmpne	r2, #0
    b1f8:	bne	b204 <ReadCompressedInt64Data+0x34>
    b1fc:	sub	sp, fp, #28
    b200:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b204:	ldr	sl, [fp, #8]
    b208:	mov	r0, r3
    b20c:	mov	r4, r3
    b210:	mov	r6, r1
    b214:	bl	1924 <Mat_SizeOf@plt>
    b218:	mov	r9, r0
    b21c:	sub	r0, r4, #1
    b220:	cmp	r0, #12
    b224:	bhi	b784 <ReadCompressedInt64Data+0x5b4>
    b228:	add	r1, pc, #4
    b22c:	ldr	r0, [r1, r0, lsl #2]
    b230:	add	pc, r1, r0
    b234:	.word	0x00000034
    b238:	.word	0x00000074
    b23c:	.word	0x000000c0
    b240:	.word	0x00000110
    b244:	.word	0x00000160
    b248:	.word	0x000001b0
    b24c:	.word	0x00000200
    b250:	.word	0x00000550
    b254:	.word	0x00000254
    b258:	.word	0x00000550
    b25c:	.word	0x00000550
    b260:	.word	0x000002a8
    b264:	.word	0x000002f4
    b268:	cmp	sl, #1
    b26c:	blt	b784 <ReadCompressedInt64Data+0x5b4>
    b270:	mov	r8, sp
    b274:	mov	r4, sl
    b278:	mov	r0, r7
    b27c:	mov	r1, r6
    b280:	mov	r2, r8
    b284:	mov	r3, r9
    b288:	bl	32fc <InflateData>
    b28c:	ldrsb	r0, [sp]
    b290:	subs	r4, r4, #1
    b294:	asr	r1, r0, #31
    b298:	strd	r0, [r5]
    b29c:	add	r5, r5, #8
    b2a0:	bne	b278 <ReadCompressedInt64Data+0xa8>
    b2a4:	b	b784 <ReadCompressedInt64Data+0x5b4>
    b2a8:	cmp	sl, #1
    b2ac:	blt	b2e4 <ReadCompressedInt64Data+0x114>
    b2b0:	ldr	r4, [fp, #8]
    b2b4:	mov	r8, sp
    b2b8:	mov	sl, #0
    b2bc:	mov	r0, r7
    b2c0:	mov	r1, r6
    b2c4:	mov	r2, r8
    b2c8:	mov	r3, r9
    b2cc:	bl	32fc <InflateData>
    b2d0:	ldrb	r0, [sp]
    b2d4:	subs	r4, r4, #1
    b2d8:	stm	r5, {r0, sl}
    b2dc:	add	r5, r5, #8
    b2e0:	bne	b2bc <ReadCompressedInt64Data+0xec>
    b2e4:	ldr	sl, [fp, #8]
    b2e8:	mul	r0, r9, sl
    b2ec:	sub	sp, fp, #28
    b2f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b2f4:	ldr	r0, [r7, #20]
    b2f8:	cmp	r0, #0
    b2fc:	beq	b574 <ReadCompressedInt64Data+0x3a4>
    b300:	cmp	sl, #1
    b304:	blt	b784 <ReadCompressedInt64Data+0x5b4>
    b308:	mov	r8, sp
    b30c:	mov	r4, sl
    b310:	mov	r0, r7
    b314:	mov	r1, r6
    b318:	mov	r2, r8
    b31c:	mov	r3, r9
    b320:	bl	32fc <InflateData>
    b324:	mov	r0, r8
    b328:	bl	1c18 <Mat_int16Swap>
    b32c:	asr	r1, r0, #31
    b330:	subs	r4, r4, #1
    b334:	strd	r0, [r5]
    b338:	add	r5, r5, #8
    b33c:	bne	b310 <ReadCompressedInt64Data+0x140>
    b340:	b	b784 <ReadCompressedInt64Data+0x5b4>
    b344:	ldr	r0, [r7, #20]
    b348:	cmp	r0, #0
    b34c:	beq	b5b4 <ReadCompressedInt64Data+0x3e4>
    b350:	cmp	sl, #1
    b354:	blt	b5f0 <ReadCompressedInt64Data+0x420>
    b358:	ldr	r4, [fp, #8]
    b35c:	mov	r8, sp
    b360:	mov	sl, #0
    b364:	mov	r0, r7
    b368:	mov	r1, r6
    b36c:	mov	r2, r8
    b370:	mov	r3, r9
    b374:	bl	32fc <InflateData>
    b378:	mov	r0, r8
    b37c:	bl	1c2c <Mat_uint16Swap>
    b380:	stm	r5, {r0, sl}
    b384:	subs	r4, r4, #1
    b388:	add	r5, r5, #8
    b38c:	bne	b364 <ReadCompressedInt64Data+0x194>
    b390:	b	b5f0 <ReadCompressedInt64Data+0x420>
    b394:	ldr	r0, [r7, #20]
    b398:	cmp	r0, #0
    b39c:	beq	b600 <ReadCompressedInt64Data+0x430>
    b3a0:	cmp	sl, #1
    b3a4:	blt	b784 <ReadCompressedInt64Data+0x5b4>
    b3a8:	mov	r8, sp
    b3ac:	mov	r4, sl
    b3b0:	mov	r0, r7
    b3b4:	mov	r1, r6
    b3b8:	mov	r2, r8
    b3bc:	mov	r3, r9
    b3c0:	bl	32fc <InflateData>
    b3c4:	mov	r0, r8
    b3c8:	bl	1bf0 <Mat_int32Swap>
    b3cc:	asr	r1, r0, #31
    b3d0:	subs	r4, r4, #1
    b3d4:	strd	r0, [r5]
    b3d8:	add	r5, r5, #8
    b3dc:	bne	b3b0 <ReadCompressedInt64Data+0x1e0>
    b3e0:	b	b784 <ReadCompressedInt64Data+0x5b4>
    b3e4:	ldr	r0, [r7, #20]
    b3e8:	cmp	r0, #0
    b3ec:	beq	b640 <ReadCompressedInt64Data+0x470>
    b3f0:	cmp	sl, #1
    b3f4:	blt	b67c <ReadCompressedInt64Data+0x4ac>
    b3f8:	ldr	sl, [fp, #8]
    b3fc:	mov	r8, sp
    b400:	mov	r4, #0
    b404:	mov	r0, r7
    b408:	mov	r1, r6
    b40c:	mov	r2, r8
    b410:	mov	r3, r9
    b414:	bl	32fc <InflateData>
    b418:	mov	r0, r8
    b41c:	bl	1c04 <Mat_uint32Swap>
    b420:	stm	r5, {r0, r4}
    b424:	subs	sl, sl, #1
    b428:	add	r5, r5, #8
    b42c:	bne	b404 <ReadCompressedInt64Data+0x234>
    b430:	b	b67c <ReadCompressedInt64Data+0x4ac>
    b434:	ldr	r0, [r7, #20]
    b438:	cmp	r0, #0
    b43c:	beq	b68c <ReadCompressedInt64Data+0x4bc>
    b440:	cmp	sl, #1
    b444:	blt	b784 <ReadCompressedInt64Data+0x5b4>
    b448:	mov	r8, sp
    b44c:	mov	r4, sl
    b450:	mov	r0, r7
    b454:	mov	r1, r6
    b458:	mov	r2, r8
    b45c:	mov	r3, r9
    b460:	bl	32fc <InflateData>
    b464:	mov	r0, r8
    b468:	bl	1c44 <Mat_floatSwap>
    b46c:	vmov	r0, s0
    b470:	bl	5f344 <__aeabi_f2lz>
    b474:	strd	r0, [r5]
    b478:	subs	r4, r4, #1
    b47c:	add	r5, r5, #8
    b480:	bne	b450 <ReadCompressedInt64Data+0x280>
    b484:	b	b784 <ReadCompressedInt64Data+0x5b4>
    b488:	ldr	r0, [r7, #20]
    b48c:	cmp	r0, #0
    b490:	beq	b6cc <ReadCompressedInt64Data+0x4fc>
    b494:	cmp	sl, #1
    b498:	blt	b784 <ReadCompressedInt64Data+0x5b4>
    b49c:	mov	r8, sp
    b4a0:	mov	r4, sl
    b4a4:	mov	r0, r7
    b4a8:	mov	r1, r6
    b4ac:	mov	r2, r8
    b4b0:	mov	r3, r9
    b4b4:	bl	32fc <InflateData>
    b4b8:	mov	r0, r8
    b4bc:	bl	1c88 <Mat_doubleSwap>
    b4c0:	vmov	r0, r1, d0
    b4c4:	bl	5f370 <__aeabi_d2lz>
    b4c8:	strd	r0, [r5]
    b4cc:	subs	r4, r4, #1
    b4d0:	add	r5, r5, #8
    b4d4:	bne	b4a4 <ReadCompressedInt64Data+0x2d4>
    b4d8:	b	b784 <ReadCompressedInt64Data+0x5b4>
    b4dc:	ldr	r0, [r7, #20]
    b4e0:	cmp	r0, #0
    b4e4:	beq	b710 <ReadCompressedInt64Data+0x540>
    b4e8:	cmp	sl, #1
    b4ec:	blt	b784 <ReadCompressedInt64Data+0x5b4>
    b4f0:	mov	r8, sp
    b4f4:	mov	r4, sl
    b4f8:	mov	r0, r7
    b4fc:	mov	r1, r6
    b500:	mov	r2, r8
    b504:	mov	r3, r9
    b508:	bl	32fc <InflateData>
    b50c:	mov	r0, r8
    b510:	bl	1b84 <Mat_int64Swap>
    b514:	strd	r0, [r5]
    b518:	subs	r4, r4, #1
    b51c:	add	r5, r5, #8
    b520:	bne	b4f8 <ReadCompressedInt64Data+0x328>
    b524:	b	b784 <ReadCompressedInt64Data+0x5b4>
    b528:	ldr	r0, [r7, #20]
    b52c:	cmp	r0, #0
    b530:	beq	b74c <ReadCompressedInt64Data+0x57c>
    b534:	cmp	sl, #1
    b538:	blt	b784 <ReadCompressedInt64Data+0x5b4>
    b53c:	mov	r8, sp
    b540:	mov	r4, sl
    b544:	mov	r0, r7
    b548:	mov	r1, r6
    b54c:	mov	r2, r8
    b550:	mov	r3, r9
    b554:	bl	32fc <InflateData>
    b558:	mov	r0, r8
    b55c:	bl	1bd4 <Mat_uint64Swap>
    b560:	strd	r0, [r5]
    b564:	subs	r4, r4, #1
    b568:	add	r5, r5, #8
    b56c:	bne	b544 <ReadCompressedInt64Data+0x374>
    b570:	b	b784 <ReadCompressedInt64Data+0x5b4>
    b574:	cmp	sl, #1
    b578:	blt	b784 <ReadCompressedInt64Data+0x5b4>
    b57c:	mov	r8, sp
    b580:	mov	r4, sl
    b584:	mov	r0, r7
    b588:	mov	r1, r6
    b58c:	mov	r2, r8
    b590:	mov	r3, r9
    b594:	bl	32fc <InflateData>
    b598:	ldrsh	r0, [sp]
    b59c:	subs	r4, r4, #1
    b5a0:	asr	r1, r0, #31
    b5a4:	strd	r0, [r5]
    b5a8:	add	r5, r5, #8
    b5ac:	bne	b584 <ReadCompressedInt64Data+0x3b4>
    b5b0:	b	b784 <ReadCompressedInt64Data+0x5b4>
    b5b4:	cmp	sl, #1
    b5b8:	blt	b5f0 <ReadCompressedInt64Data+0x420>
    b5bc:	ldr	r4, [fp, #8]
    b5c0:	mov	r8, sp
    b5c4:	mov	sl, #0
    b5c8:	mov	r0, r7
    b5cc:	mov	r1, r6
    b5d0:	mov	r2, r8
    b5d4:	mov	r3, r9
    b5d8:	bl	32fc <InflateData>
    b5dc:	ldrh	r0, [sp]
    b5e0:	subs	r4, r4, #1
    b5e4:	stm	r5, {r0, sl}
    b5e8:	add	r5, r5, #8
    b5ec:	bne	b5c8 <ReadCompressedInt64Data+0x3f8>
    b5f0:	ldr	sl, [fp, #8]
    b5f4:	mul	r0, r9, sl
    b5f8:	sub	sp, fp, #28
    b5fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b600:	cmp	sl, #1
    b604:	blt	b784 <ReadCompressedInt64Data+0x5b4>
    b608:	mov	r8, sp
    b60c:	mov	r4, sl
    b610:	mov	r0, r7
    b614:	mov	r1, r6
    b618:	mov	r2, r8
    b61c:	mov	r3, r9
    b620:	bl	32fc <InflateData>
    b624:	ldr	r0, [sp]
    b628:	subs	r4, r4, #1
    b62c:	asr	r1, r0, #31
    b630:	strd	r0, [r5]
    b634:	add	r5, r5, #8
    b638:	bne	b610 <ReadCompressedInt64Data+0x440>
    b63c:	b	b784 <ReadCompressedInt64Data+0x5b4>
    b640:	cmp	sl, #1
    b644:	blt	b67c <ReadCompressedInt64Data+0x4ac>
    b648:	ldr	r4, [fp, #8]
    b64c:	mov	r8, sp
    b650:	mov	sl, #0
    b654:	mov	r0, r7
    b658:	mov	r1, r6
    b65c:	mov	r2, r8
    b660:	mov	r3, r9
    b664:	bl	32fc <InflateData>
    b668:	ldr	r0, [sp]
    b66c:	subs	r4, r4, #1
    b670:	stm	r5, {r0, sl}
    b674:	add	r5, r5, #8
    b678:	bne	b654 <ReadCompressedInt64Data+0x484>
    b67c:	ldr	sl, [fp, #8]
    b680:	mul	r0, r9, sl
    b684:	sub	sp, fp, #28
    b688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b68c:	cmp	sl, #1
    b690:	blt	b784 <ReadCompressedInt64Data+0x5b4>
    b694:	mov	r8, sp
    b698:	mov	r4, sl
    b69c:	mov	r0, r7
    b6a0:	mov	r1, r6
    b6a4:	mov	r2, r8
    b6a8:	mov	r3, r9
    b6ac:	bl	32fc <InflateData>
    b6b0:	ldr	r0, [sp]
    b6b4:	bl	5f344 <__aeabi_f2lz>
    b6b8:	strd	r0, [r5]
    b6bc:	subs	r4, r4, #1
    b6c0:	add	r5, r5, #8
    b6c4:	bne	b69c <ReadCompressedInt64Data+0x4cc>
    b6c8:	b	b784 <ReadCompressedInt64Data+0x5b4>
    b6cc:	cmp	sl, #1
    b6d0:	blt	b784 <ReadCompressedInt64Data+0x5b4>
    b6d4:	mov	r8, sp
    b6d8:	mov	r4, sl
    b6dc:	mov	r0, r7
    b6e0:	mov	r1, r6
    b6e4:	mov	r2, r8
    b6e8:	mov	r3, r9
    b6ec:	bl	32fc <InflateData>
    b6f0:	vldr	d16, [sp]
    b6f4:	vmov	r0, r1, d16
    b6f8:	bl	5f370 <__aeabi_d2lz>
    b6fc:	strd	r0, [r5]
    b700:	subs	r4, r4, #1
    b704:	add	r5, r5, #8
    b708:	bne	b6dc <ReadCompressedInt64Data+0x50c>
    b70c:	b	b784 <ReadCompressedInt64Data+0x5b4>
    b710:	cmp	sl, #1
    b714:	blt	b784 <ReadCompressedInt64Data+0x5b4>
    b718:	mov	r8, sp
    b71c:	mov	r4, sl
    b720:	mov	r0, r7
    b724:	mov	r1, r6
    b728:	mov	r2, r8
    b72c:	mov	r3, r9
    b730:	bl	32fc <InflateData>
    b734:	ldm	sp, {r0, r1}
    b738:	subs	r4, r4, #1
    b73c:	strd	r0, [r5]
    b740:	add	r5, r5, #8
    b744:	bne	b720 <ReadCompressedInt64Data+0x550>
    b748:	b	b784 <ReadCompressedInt64Data+0x5b4>
    b74c:	cmp	sl, #1
    b750:	blt	b784 <ReadCompressedInt64Data+0x5b4>
    b754:	mov	r8, sp
    b758:	mov	r4, sl
    b75c:	mov	r0, r7
    b760:	mov	r1, r6
    b764:	mov	r2, r8
    b768:	mov	r3, r9
    b76c:	bl	32fc <InflateData>
    b770:	ldm	sp, {r0, r1}
    b774:	subs	r4, r4, #1
    b778:	strd	r0, [r5]
    b77c:	add	r5, r5, #8
    b780:	bne	b75c <ReadCompressedInt64Data+0x58c>
    b784:	mul	r0, r9, sl
    b788:	sub	sp, fp, #28
    b78c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000b790 <ReadUInt64Data>:
    b790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b794:	add	fp, sp, #28
    b798:	sub	sp, sp, #124	; 0x7c
    b79c:	sub	sp, sp, #2048	; 0x800
    b7a0:	mov	r4, r0
    b7a4:	mov	r0, #0
    b7a8:	cmp	r4, #0
    b7ac:	beq	b7c4 <ReadUInt64Data+0x34>
    b7b0:	cmp	r1, #0
    b7b4:	mov	sl, r1
    b7b8:	ldrne	r1, [r4]
    b7bc:	cmpne	r1, #0
    b7c0:	bne	b7cc <ReadUInt64Data+0x3c>
    b7c4:	sub	sp, fp, #28
    b7c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b7cc:	mov	r0, r2
    b7d0:	mov	r7, r3
    b7d4:	mov	r8, r2
    b7d8:	bl	1924 <Mat_SizeOf@plt>
    b7dc:	mov	r6, r0
    b7e0:	sub	r0, r8, #1
    b7e4:	mov	r9, #0
    b7e8:	str	r4, [sp, #20]
    b7ec:	cmp	r0, #11
    b7f0:	str	r6, [sp, #16]
    b7f4:	bhi	d1f4 <ReadUInt64Data+0x1a64>
    b7f8:	add	r1, pc, #4
    b7fc:	ldr	r0, [r1, r0, lsl #2]
    b800:	add	pc, r1, r0
    b804:	.word	0x00000030
    b808:	.word	0x000000d4
    b80c:	.word	0x00000180
    b810:	.word	0x000001dc
    b814:	.word	0x00000238
    b818:	.word	0x00000294
    b81c:	.word	0x000002f0
    b820:	.word	0x000019f0
    b824:	.word	0x00000350
    b828:	.word	0x000019f0
    b82c:	.word	0x000019f0
    b830:	.word	0x000003b0
    b834:	cmp	r7, #256	; 0x100
    b838:	bgt	bc14 <ReadUInt64Data+0x484>
    b83c:	ldr	r3, [r4]
    b840:	add	r4, sp, #120	; 0x78
    b844:	mov	r1, r6
    b848:	mov	r2, r7
    b84c:	mov	r0, r4
    b850:	bl	18b8 <fread@plt>
    b854:	mov	r9, r0
    b858:	cmp	r7, #1
    b85c:	blt	d4bc <ReadUInt64Data+0x1d2c>
    b860:	mov	r0, #0
    b864:	beq	b8ac <ReadUInt64Data+0x11c>
    b868:	bic	r0, r7, #1
    b86c:	mov	r5, r7
    b870:	add	r1, sp, #96	; 0x60
    b874:	mov	r3, sl
    b878:	mov	r2, r0
    b87c:	ldrh	r7, [r4], #2
    b880:	subs	r2, r2, #2
    b884:	strh	r7, [sp, #96]	; 0x60
    b888:	vld1.16	{d16[0]}, [r1 :16]
    b88c:	vmovl.s8	q8, d16
    b890:	vmovl.s16	q8, d16
    b894:	vmovl.s32	q8, d16
    b898:	vst1.64	{d16-d17}, [r3]!
    b89c:	bne	b87c <ReadUInt64Data+0xec>
    b8a0:	mov	r7, r5
    b8a4:	cmp	r0, r5
    b8a8:	beq	d4bc <ReadUInt64Data+0x1d2c>
    b8ac:	add	r3, sp, #120	; 0x78
    b8b0:	sub	r1, r7, r0
    b8b4:	add	r2, sl, r0, lsl #3
    b8b8:	add	r0, r3, r0
    b8bc:	ldrsb	r4, [r0], #1
    b8c0:	subs	r1, r1, #1
    b8c4:	asr	r5, r4, #31
    b8c8:	strd	r4, [r2]
    b8cc:	add	r2, r2, #8
    b8d0:	bne	b8bc <ReadUInt64Data+0x12c>
    b8d4:	b	d4bc <ReadUInt64Data+0x1d2c>
    b8d8:	cmp	r7, #256	; 0x100
    b8dc:	bgt	bd80 <ReadUInt64Data+0x5f0>
    b8e0:	ldr	r3, [r4]
    b8e4:	add	r4, sp, #120	; 0x78
    b8e8:	mov	r1, r6
    b8ec:	mov	r2, r7
    b8f0:	mov	r0, r4
    b8f4:	bl	18b8 <fread@plt>
    b8f8:	mov	r9, r0
    b8fc:	cmp	r7, #1
    b900:	blt	d4bc <ReadUInt64Data+0x1d2c>
    b904:	mov	r1, #0
    b908:	mov	r0, #0
    b90c:	beq	b958 <ReadUInt64Data+0x1c8>
    b910:	bic	r0, r7, #1
    b914:	mov	r5, r7
    b918:	add	r2, sp, #108	; 0x6c
    b91c:	mov	r7, sl
    b920:	mov	r3, r0
    b924:	ldrh	r6, [r4], #2
    b928:	subs	r3, r3, #2
    b92c:	strh	r6, [sp, #108]	; 0x6c
    b930:	vld1.16	{d16[0]}, [r2 :16]
    b934:	vmovl.u8	q8, d16
    b938:	vmovl.u16	q8, d16
    b93c:	vmovl.u32	q8, d16
    b940:	vst1.64	{d16-d17}, [r7]!
    b944:	bne	b924 <ReadUInt64Data+0x194>
    b948:	ldr	r6, [sp, #16]
    b94c:	mov	r7, r5
    b950:	cmp	r0, r5
    b954:	beq	d4bc <ReadUInt64Data+0x1d2c>
    b958:	sub	r2, r7, r0
    b95c:	add	r7, sp, #120	; 0x78
    b960:	add	r3, sl, r0, lsl #3
    b964:	add	r0, r7, r0
    b968:	ldrb	r4, [r0], #1
    b96c:	subs	r2, r2, #1
    b970:	str	r4, [r3]
    b974:	str	r1, [r3, #4]
    b978:	add	r3, r3, #8
    b97c:	bne	b968 <ReadUInt64Data+0x1d8>
    b980:	b	d4bc <ReadUInt64Data+0x1d2c>
    b984:	ldr	r0, [r4, #20]
    b988:	cmp	r0, #0
    b98c:	beq	bef4 <ReadUInt64Data+0x764>
    b990:	cmp	r7, #256	; 0x100
    b994:	bgt	c274 <ReadUInt64Data+0xae4>
    b998:	ldr	r3, [r4]
    b99c:	add	r4, sp, #120	; 0x78
    b9a0:	mov	r1, r6
    b9a4:	mov	r2, r7
    b9a8:	mov	r0, r4
    b9ac:	bl	18b8 <fread@plt>
    b9b0:	mov	r9, r0
    b9b4:	cmp	r7, #1
    b9b8:	blt	d4bc <ReadUInt64Data+0x1d2c>
    b9bc:	mov	r0, r4
    b9c0:	bl	1c18 <Mat_int16Swap>
    b9c4:	asr	r1, r0, #31
    b9c8:	subs	r7, r7, #1
    b9cc:	add	r4, r4, #2
    b9d0:	strd	r0, [sl]
    b9d4:	add	sl, sl, #8
    b9d8:	bne	b9bc <ReadUInt64Data+0x22c>
    b9dc:	b	d4bc <ReadUInt64Data+0x1d2c>
    b9e0:	ldr	r0, [r4, #20]
    b9e4:	cmp	r0, #0
    b9e8:	beq	bf94 <ReadUInt64Data+0x804>
    b9ec:	cmp	r7, #256	; 0x100
    b9f0:	bgt	c36c <ReadUInt64Data+0xbdc>
    b9f4:	ldr	r3, [r4]
    b9f8:	add	r4, sp, #120	; 0x78
    b9fc:	mov	r1, r6
    ba00:	mov	r2, r7
    ba04:	mov	r0, r4
    ba08:	bl	18b8 <fread@plt>
    ba0c:	mov	r9, r0
    ba10:	cmp	r7, #1
    ba14:	blt	d4bc <ReadUInt64Data+0x1d2c>
    ba18:	mov	r5, #0
    ba1c:	mov	r0, r4
    ba20:	bl	1c2c <Mat_uint16Swap>
    ba24:	stm	sl, {r0, r5}
    ba28:	subs	r7, r7, #1
    ba2c:	add	sl, sl, #8
    ba30:	add	r4, r4, #2
    ba34:	bne	ba1c <ReadUInt64Data+0x28c>
    ba38:	b	d4bc <ReadUInt64Data+0x1d2c>
    ba3c:	ldr	r0, [r4, #20]
    ba40:	cmp	r0, #0
    ba44:	beq	c03c <ReadUInt64Data+0x8ac>
    ba48:	cmp	r7, #256	; 0x100
    ba4c:	bgt	c46c <ReadUInt64Data+0xcdc>
    ba50:	ldr	r3, [r4]
    ba54:	add	r4, sp, #120	; 0x78
    ba58:	mov	r1, r6
    ba5c:	mov	r2, r7
    ba60:	mov	r0, r4
    ba64:	bl	18b8 <fread@plt>
    ba68:	mov	r9, r0
    ba6c:	cmp	r7, #1
    ba70:	blt	d4bc <ReadUInt64Data+0x1d2c>
    ba74:	mov	r0, r4
    ba78:	bl	1bf0 <Mat_int32Swap>
    ba7c:	asr	r1, r0, #31
    ba80:	subs	r7, r7, #1
    ba84:	add	r4, r4, #4
    ba88:	strd	r0, [sl]
    ba8c:	add	sl, sl, #8
    ba90:	bne	ba74 <ReadUInt64Data+0x2e4>
    ba94:	b	d4bc <ReadUInt64Data+0x1d2c>
    ba98:	ldr	r0, [r4, #20]
    ba9c:	cmp	r0, #0
    baa0:	beq	c0e8 <ReadUInt64Data+0x958>
    baa4:	cmp	r7, #256	; 0x100
    baa8:	bgt	c564 <ReadUInt64Data+0xdd4>
    baac:	ldr	r3, [r4]
    bab0:	add	r4, sp, #120	; 0x78
    bab4:	mov	r1, r6
    bab8:	mov	r2, r7
    babc:	mov	r0, r4
    bac0:	bl	18b8 <fread@plt>
    bac4:	mov	r9, r0
    bac8:	cmp	r7, #1
    bacc:	blt	d4bc <ReadUInt64Data+0x1d2c>
    bad0:	mov	r5, #0
    bad4:	mov	r0, r4
    bad8:	bl	1c04 <Mat_uint32Swap>
    badc:	stm	sl, {r0, r5}
    bae0:	subs	r7, r7, #1
    bae4:	add	sl, sl, #8
    bae8:	add	r4, r4, #4
    baec:	bne	bad4 <ReadUInt64Data+0x344>
    baf0:	b	d4bc <ReadUInt64Data+0x1d2c>
    baf4:	ldr	r0, [r4, #20]
    baf8:	cmp	r0, #0
    bafc:	beq	c198 <ReadUInt64Data+0xa08>
    bb00:	cmp	r7, #256	; 0x100
    bb04:	bgt	c664 <ReadUInt64Data+0xed4>
    bb08:	ldr	r3, [r4]
    bb0c:	add	r4, sp, #120	; 0x78
    bb10:	mov	r1, r6
    bb14:	mov	r2, r7
    bb18:	mov	r0, r4
    bb1c:	bl	18b8 <fread@plt>
    bb20:	mov	r9, r0
    bb24:	cmp	r7, #1
    bb28:	blt	d4bc <ReadUInt64Data+0x1d2c>
    bb2c:	mov	r0, r4
    bb30:	bl	1c44 <Mat_floatSwap>
    bb34:	vmov	r0, s0
    bb38:	bl	5f3a0 <__aeabi_f2ulz>
    bb3c:	strd	r0, [sl]
    bb40:	subs	r7, r7, #1
    bb44:	add	sl, sl, #8
    bb48:	add	r4, r4, #4
    bb4c:	bne	bb2c <ReadUInt64Data+0x39c>
    bb50:	b	d4bc <ReadUInt64Data+0x1d2c>
    bb54:	ldr	r0, [r4, #20]
    bb58:	cmp	r0, #0
    bb5c:	beq	c1e0 <ReadUInt64Data+0xa50>
    bb60:	cmp	r7, #256	; 0x100
    bb64:	bgt	c758 <ReadUInt64Data+0xfc8>
    bb68:	ldr	r3, [r4]
    bb6c:	add	r4, sp, #120	; 0x78
    bb70:	mov	r1, r6
    bb74:	mov	r2, r7
    bb78:	mov	r0, r4
    bb7c:	bl	18b8 <fread@plt>
    bb80:	mov	r9, r0
    bb84:	cmp	r7, #1
    bb88:	blt	d4bc <ReadUInt64Data+0x1d2c>
    bb8c:	mov	r0, r4
    bb90:	bl	1c88 <Mat_doubleSwap>
    bb94:	vmov	r0, r1, d0
    bb98:	bl	5f3e0 <__aeabi_d2ulz>
    bb9c:	strd	r0, [sl]
    bba0:	subs	r7, r7, #1
    bba4:	add	sl, sl, #8
    bba8:	add	r4, r4, #8
    bbac:	bne	bb8c <ReadUInt64Data+0x3fc>
    bbb0:	b	d4bc <ReadUInt64Data+0x1d2c>
    bbb4:	ldr	r0, [r4, #20]
    bbb8:	cmp	r0, #0
    bbbc:	beq	c230 <ReadUInt64Data+0xaa0>
    bbc0:	cmp	r7, #256	; 0x100
    bbc4:	bgt	c84c <ReadUInt64Data+0x10bc>
    bbc8:	ldr	r3, [r4]
    bbcc:	add	r4, sp, #120	; 0x78
    bbd0:	mov	r1, r6
    bbd4:	mov	r2, r7
    bbd8:	mov	r0, r4
    bbdc:	bl	18b8 <fread@plt>
    bbe0:	mov	r9, r0
    bbe4:	cmp	r7, #1
    bbe8:	blt	d1a4 <ReadUInt64Data+0x1a14>
    bbec:	mov	r5, r7
    bbf0:	mov	r6, sl
    bbf4:	mov	r0, r4
    bbf8:	bl	1b84 <Mat_int64Swap>
    bbfc:	strd	r0, [r6]
    bc00:	subs	r5, r5, #1
    bc04:	add	r6, r6, #8
    bc08:	add	r4, r4, #8
    bc0c:	bne	bbf4 <ReadUInt64Data+0x464>
    bc10:	b	d1b4 <ReadUInt64Data+0x1a24>
    bc14:	sub	r1, r7, #256	; 0x100
    bc18:	str	r7, [sp, #4]
    bc1c:	add	r0, sl, #2048	; 0x800
    bc20:	mov	r2, #256	; 0x100
    bc24:	add	r4, sp, #120	; 0x78
    bc28:	add	r7, sp, #104	; 0x68
    bc2c:	mov	r9, sl
    bc30:	mov	r6, #0
    bc34:	str	r1, [sp, #8]
    bc38:	mov	r1, #0
    bc3c:	mov	r8, r0
    bc40:	ldr	r0, [sp, #20]
    bc44:	str	r1, [sp, #12]
    bc48:	ldr	r1, [sp, #16]
    bc4c:	mov	r5, r2
    bc50:	mov	r2, #256	; 0x100
    bc54:	ldr	r3, [r0]
    bc58:	mov	r0, r4
    bc5c:	bl	18b8 <fread@plt>
    bc60:	mov	r1, r9
    bc64:	mov	r2, #0
    bc68:	add	r3, r4, r2
    bc6c:	add	r2, r2, #2
    bc70:	ldrh	r3, [r3]
    bc74:	cmp	r2, #256	; 0x100
    bc78:	strh	r3, [sp, #104]	; 0x68
    bc7c:	vld1.16	{d16[0]}, [r7 :16]
    bc80:	vmovl.s8	q8, d16
    bc84:	vmovl.s16	q8, d16
    bc88:	vmovl.s32	q8, d16
    bc8c:	vst1.64	{d16-d17}, [r1]!
    bc90:	bne	bc68 <ReadUInt64Data+0x4d8>
    bc94:	mov	r1, r5
    bc98:	ldr	r3, [sp, #8]
    bc9c:	add	r6, r0, r6
    bca0:	add	r9, r9, #2048	; 0x800
    bca4:	add	r0, r8, #2048	; 0x800
    bca8:	add	r2, r5, #256	; 0x100
    bcac:	ldr	r1, [sp, #12]
    bcb0:	add	r1, r1, #256	; 0x100
    bcb4:	cmp	r1, r3
    bcb8:	blt	bc3c <ReadUInt64Data+0x4ac>
    bcbc:	ldr	r0, [sp, #4]
    bcc0:	cmp	r1, r0
    bcc4:	bge	cc18 <ReadUInt64Data+0x1488>
    bcc8:	sub	r4, r0, r1
    bccc:	ldr	r0, [sp, #20]
    bcd0:	ldr	r1, [sp, #16]
    bcd4:	add	r7, sp, #120	; 0x78
    bcd8:	mov	r2, r4
    bcdc:	ldr	r3, [r0]
    bce0:	mov	r0, r7
    bce4:	bl	18b8 <fread@plt>
    bce8:	mov	r9, r6
    bcec:	cmp	r4, #1
    bcf0:	add	r9, r0, r6
    bcf4:	blt	d428 <ReadUInt64Data+0x1c98>
    bcf8:	ldr	r6, [sp, #16]
    bcfc:	ldr	ip, [sp, #12]
    bd00:	mov	r0, #0
    bd04:	beq	bd48 <ReadUInt64Data+0x5b8>
    bd08:	ldr	r0, [sp, #8]
    bd0c:	add	r2, sp, #100	; 0x64
    bd10:	sub	r0, r0, ip
    bd14:	bic	r1, r0, #1
    bd18:	bic	r0, r4, #1
    bd1c:	ldrh	r3, [r7], #2
    bd20:	subs	r1, r1, #2
    bd24:	strh	r3, [sp, #100]	; 0x64
    bd28:	vld1.16	{d16[0]}, [r2 :16]
    bd2c:	vmovl.s8	q8, d16
    bd30:	vmovl.s16	q8, d16
    bd34:	vmovl.s32	q8, d16
    bd38:	vst1.64	{d16-d17}, [r8]!
    bd3c:	bne	bd1c <ReadUInt64Data+0x58c>
    bd40:	cmp	r4, r0
    bd44:	beq	d4bc <ReadUInt64Data+0x1d2c>
    bd48:	ldr	r3, [sp, #8]
    bd4c:	add	r1, sp, #120	; 0x78
    bd50:	add	r2, r0, r5
    bd54:	add	r1, r1, r0
    bd58:	add	r2, sl, r2, lsl #3
    bd5c:	sub	r3, r3, ip
    bd60:	sub	r0, r3, r0
    bd64:	ldrsb	r4, [r1], #1
    bd68:	subs	r0, r0, #1
    bd6c:	asr	r5, r4, #31
    bd70:	strd	r4, [r2]
    bd74:	add	r2, r2, #8
    bd78:	bne	bd64 <ReadUInt64Data+0x5d4>
    bd7c:	b	d4bc <ReadUInt64Data+0x1d2c>
    bd80:	sub	r1, r7, #256	; 0x100
    bd84:	add	r0, sl, #2048	; 0x800
    bd88:	mov	r2, #256	; 0x100
    bd8c:	add	r4, sp, #120	; 0x78
    bd90:	add	r5, sp, #116	; 0x74
    bd94:	mov	r9, sl
    bd98:	mov	r6, #0
    bd9c:	str	r7, [sp, #4]
    bda0:	str	r1, [sp, #8]
    bda4:	mov	r1, #0
    bda8:	mov	r7, r0
    bdac:	ldr	r0, [sp, #20]
    bdb0:	str	r1, [sp, #12]
    bdb4:	ldr	r1, [sp, #16]
    bdb8:	mov	r8, r2
    bdbc:	mov	r2, #256	; 0x100
    bdc0:	ldr	r3, [r0]
    bdc4:	mov	r0, r4
    bdc8:	bl	18b8 <fread@plt>
    bdcc:	mov	r1, r9
    bdd0:	mov	r2, #0
    bdd4:	add	r3, r4, r2
    bdd8:	add	r2, r2, #2
    bddc:	ldrh	r3, [r3]
    bde0:	cmp	r2, #256	; 0x100
    bde4:	strh	r3, [sp, #116]	; 0x74
    bde8:	vld1.16	{d16[0]}, [r5 :16]
    bdec:	vmovl.u8	q8, d16
    bdf0:	vmovl.u16	q8, d16
    bdf4:	vmovl.u32	q8, d16
    bdf8:	vst1.64	{d16-d17}, [r1]!
    bdfc:	bne	bdd4 <ReadUInt64Data+0x644>
    be00:	mov	r1, r8
    be04:	ldr	r3, [sp, #8]
    be08:	add	r6, r0, r6
    be0c:	add	r9, r9, #2048	; 0x800
    be10:	add	r0, r7, #2048	; 0x800
    be14:	add	r2, r8, #256	; 0x100
    be18:	ldr	r1, [sp, #12]
    be1c:	add	r1, r1, #256	; 0x100
    be20:	cmp	r1, r3
    be24:	blt	bda8 <ReadUInt64Data+0x618>
    be28:	ldr	r0, [sp, #4]
    be2c:	cmp	r1, r0
    be30:	bge	cc18 <ReadUInt64Data+0x1488>
    be34:	sub	r5, r0, r1
    be38:	ldr	r0, [sp, #20]
    be3c:	ldr	r1, [sp, #16]
    be40:	add	r4, sp, #120	; 0x78
    be44:	mov	r2, r5
    be48:	ldr	r3, [r0]
    be4c:	mov	r0, r4
    be50:	bl	18b8 <fread@plt>
    be54:	mov	r9, r6
    be58:	cmp	r5, #1
    be5c:	add	r9, r0, r6
    be60:	blt	d438 <ReadUInt64Data+0x1ca8>
    be64:	ldr	r6, [sp, #16]
    be68:	ldr	ip, [sp, #12]
    be6c:	mov	r1, #0
    be70:	mov	r0, #0
    be74:	beq	bebc <ReadUInt64Data+0x72c>
    be78:	ldr	r0, [sp, #8]
    be7c:	add	r3, sp, #112	; 0x70
    be80:	sub	r0, r0, ip
    be84:	bic	r2, r0, #1
    be88:	bic	r0, r5, #1
    be8c:	ldrh	r6, [r4], #2
    be90:	subs	r2, r2, #2
    be94:	strh	r6, [sp, #112]	; 0x70
    be98:	vld1.16	{d16[0]}, [r3 :16]
    be9c:	vmovl.u8	q8, d16
    bea0:	vmovl.u16	q8, d16
    bea4:	vmovl.u32	q8, d16
    bea8:	vst1.64	{d16-d17}, [r7]!
    beac:	bne	be8c <ReadUInt64Data+0x6fc>
    beb0:	ldr	r6, [sp, #16]
    beb4:	cmp	r5, r0
    beb8:	beq	d4bc <ReadUInt64Data+0x1d2c>
    bebc:	ldr	r7, [sp, #8]
    bec0:	add	r2, sp, #120	; 0x78
    bec4:	add	r3, r0, r8
    bec8:	add	r2, r2, r0
    becc:	add	r3, sl, r3, lsl #3
    bed0:	sub	r7, r7, ip
    bed4:	sub	r0, r7, r0
    bed8:	ldrb	r4, [r2], #1
    bedc:	subs	r0, r0, #1
    bee0:	str	r4, [r3]
    bee4:	str	r1, [r3, #4]
    bee8:	add	r3, r3, #8
    beec:	bne	bed8 <ReadUInt64Data+0x748>
    bef0:	b	d4bc <ReadUInt64Data+0x1d2c>
    bef4:	cmp	r7, #256	; 0x100
    bef8:	bgt	c950 <ReadUInt64Data+0x11c0>
    befc:	ldr	r3, [r4]
    bf00:	add	r4, sp, #120	; 0x78
    bf04:	mov	r1, r6
    bf08:	mov	r2, r7
    bf0c:	mov	r0, r4
    bf10:	bl	18b8 <fread@plt>
    bf14:	mov	r9, r0
    bf18:	cmp	r7, #1
    bf1c:	blt	d4bc <ReadUInt64Data+0x1d2c>
    bf20:	mov	r0, #0
    bf24:	beq	bf68 <ReadUInt64Data+0x7d8>
    bf28:	bic	r0, r7, #1
    bf2c:	mov	r5, r7
    bf30:	add	r1, sp, #72	; 0x48
    bf34:	mov	r3, sl
    bf38:	mov	r2, r0
    bf3c:	ldr	r7, [r4], #4
    bf40:	subs	r2, r2, #2
    bf44:	str	r7, [sp, #72]	; 0x48
    bf48:	vld1.32	{d16[0]}, [r1 :32]
    bf4c:	vmovl.s16	q8, d16
    bf50:	vmovl.s32	q8, d16
    bf54:	vst1.64	{d16-d17}, [r3]!
    bf58:	bne	bf3c <ReadUInt64Data+0x7ac>
    bf5c:	mov	r7, r5
    bf60:	cmp	r0, r5
    bf64:	beq	d4bc <ReadUInt64Data+0x1d2c>
    bf68:	add	r3, sp, #120	; 0x78
    bf6c:	sub	r1, r7, r0
    bf70:	add	r2, sl, r0, lsl #3
    bf74:	add	r0, r3, r0, lsl #1
    bf78:	ldrsh	r4, [r0], #2
    bf7c:	subs	r1, r1, #1
    bf80:	asr	r5, r4, #31
    bf84:	strd	r4, [r2]
    bf88:	add	r2, r2, #8
    bf8c:	bne	bf78 <ReadUInt64Data+0x7e8>
    bf90:	b	d4bc <ReadUInt64Data+0x1d2c>
    bf94:	cmp	r7, #256	; 0x100
    bf98:	bgt	cab0 <ReadUInt64Data+0x1320>
    bf9c:	ldr	r3, [r4]
    bfa0:	add	r4, sp, #120	; 0x78
    bfa4:	mov	r1, r6
    bfa8:	mov	r2, r7
    bfac:	mov	r0, r4
    bfb0:	bl	18b8 <fread@plt>
    bfb4:	mov	r9, r0
    bfb8:	cmp	r7, #1
    bfbc:	blt	d4bc <ReadUInt64Data+0x1d2c>
    bfc0:	mov	r1, #0
    bfc4:	mov	r0, #0
    bfc8:	beq	c010 <ReadUInt64Data+0x880>
    bfcc:	bic	r0, r7, #1
    bfd0:	mov	r5, r7
    bfd4:	add	r2, sp, #84	; 0x54
    bfd8:	mov	r7, sl
    bfdc:	mov	r3, r0
    bfe0:	ldr	r6, [r4], #4
    bfe4:	subs	r3, r3, #2
    bfe8:	str	r6, [sp, #84]	; 0x54
    bfec:	vld1.32	{d16[0]}, [r2 :32]
    bff0:	vmovl.u16	q8, d16
    bff4:	vmovl.u32	q8, d16
    bff8:	vst1.64	{d16-d17}, [r7]!
    bffc:	bne	bfe0 <ReadUInt64Data+0x850>
    c000:	ldr	r6, [sp, #16]
    c004:	mov	r7, r5
    c008:	cmp	r0, r5
    c00c:	beq	d4bc <ReadUInt64Data+0x1d2c>
    c010:	sub	r2, r7, r0
    c014:	add	r7, sp, #120	; 0x78
    c018:	add	r3, sl, r0, lsl #3
    c01c:	add	r0, r7, r0, lsl #1
    c020:	ldrh	r4, [r0], #2
    c024:	subs	r2, r2, #1
    c028:	str	r4, [r3]
    c02c:	str	r1, [r3, #4]
    c030:	add	r3, r3, #8
    c034:	bne	c020 <ReadUInt64Data+0x890>
    c038:	b	d4bc <ReadUInt64Data+0x1d2c>
    c03c:	cmp	r7, #256	; 0x100
    c040:	bgt	cc2c <ReadUInt64Data+0x149c>
    c044:	ldr	r3, [r4]
    c048:	add	r4, sp, #120	; 0x78
    c04c:	mov	r1, r6
    c050:	mov	r2, r7
    c054:	mov	r0, r4
    c058:	bl	18b8 <fread@plt>
    c05c:	mov	r9, r0
    c060:	cmp	r7, #1
    c064:	blt	d4bc <ReadUInt64Data+0x1d2c>
    c068:	mov	r0, #0
    c06c:	beq	c0bc <ReadUInt64Data+0x92c>
    c070:	bic	r0, r7, #1
    c074:	mov	r5, r7
    c078:	add	r1, sp, #24
    c07c:	mov	r3, sl
    c080:	mov	r2, r0
    c084:	ldr	r7, [r4]
    c088:	ldr	r6, [r4, #4]
    c08c:	subs	r2, r2, #2
    c090:	add	r4, r4, #8
    c094:	str	r6, [sp, #28]
    c098:	str	r7, [sp, #24]
    c09c:	vld1.32	{d16}, [r1 :64]
    c0a0:	vmovl.s32	q8, d16
    c0a4:	vst1.64	{d16-d17}, [r3]!
    c0a8:	bne	c084 <ReadUInt64Data+0x8f4>
    c0ac:	ldr	r6, [sp, #16]
    c0b0:	mov	r7, r5
    c0b4:	cmp	r0, r5
    c0b8:	beq	d4bc <ReadUInt64Data+0x1d2c>
    c0bc:	add	r3, sp, #120	; 0x78
    c0c0:	sub	r1, r7, r0
    c0c4:	add	r2, sl, r0, lsl #3
    c0c8:	add	r0, r3, r0, lsl #2
    c0cc:	ldr	r4, [r0], #4
    c0d0:	subs	r1, r1, #1
    c0d4:	asr	r5, r4, #31
    c0d8:	strd	r4, [r2]
    c0dc:	add	r2, r2, #8
    c0e0:	bne	c0cc <ReadUInt64Data+0x93c>
    c0e4:	b	d4bc <ReadUInt64Data+0x1d2c>
    c0e8:	cmp	r7, #256	; 0x100
    c0ec:	bgt	cd98 <ReadUInt64Data+0x1608>
    c0f0:	ldr	r3, [r4]
    c0f4:	add	r4, sp, #120	; 0x78
    c0f8:	mov	r1, r6
    c0fc:	mov	r2, r7
    c100:	mov	r0, r4
    c104:	bl	18b8 <fread@plt>
    c108:	mov	r9, r0
    c10c:	cmp	r7, #1
    c110:	blt	d4bc <ReadUInt64Data+0x1d2c>
    c114:	mov	r1, #0
    c118:	mov	r0, #0
    c11c:	beq	c16c <ReadUInt64Data+0x9dc>
    c120:	bic	r0, r7, #1
    c124:	mov	ip, r7
    c128:	add	r2, sp, #48	; 0x30
    c12c:	mov	r7, sl
    c130:	mov	r3, r0
    c134:	ldr	r6, [r4]
    c138:	ldr	r5, [r4, #4]
    c13c:	subs	r3, r3, #2
    c140:	add	r4, r4, #8
    c144:	str	r5, [sp, #52]	; 0x34
    c148:	str	r6, [sp, #48]	; 0x30
    c14c:	vld1.32	{d16}, [r2 :64]
    c150:	vmovl.u32	q8, d16
    c154:	vst1.64	{d16-d17}, [r7]!
    c158:	bne	c134 <ReadUInt64Data+0x9a4>
    c15c:	ldr	r6, [sp, #16]
    c160:	mov	r7, ip
    c164:	cmp	r0, ip
    c168:	beq	d4bc <ReadUInt64Data+0x1d2c>
    c16c:	sub	r2, r7, r0
    c170:	add	r7, sp, #120	; 0x78
    c174:	add	r3, sl, r0, lsl #3
    c178:	add	r0, r7, r0, lsl #2
    c17c:	ldr	r4, [r0], #4
    c180:	subs	r2, r2, #1
    c184:	str	r4, [r3]
    c188:	str	r1, [r3, #4]
    c18c:	add	r3, r3, #8
    c190:	bne	c17c <ReadUInt64Data+0x9ec>
    c194:	b	d4bc <ReadUInt64Data+0x1d2c>
    c198:	cmp	r7, #256	; 0x100
    c19c:	bgt	cf0c <ReadUInt64Data+0x177c>
    c1a0:	ldr	r3, [r4]
    c1a4:	add	r4, sp, #120	; 0x78
    c1a8:	mov	r1, r6
    c1ac:	mov	r2, r7
    c1b0:	mov	r0, r4
    c1b4:	bl	18b8 <fread@plt>
    c1b8:	mov	r9, r0
    c1bc:	cmp	r7, #1
    c1c0:	blt	d4bc <ReadUInt64Data+0x1d2c>
    c1c4:	ldr	r0, [r4], #4
    c1c8:	bl	5f3a0 <__aeabi_f2ulz>
    c1cc:	strd	r0, [sl]
    c1d0:	subs	r7, r7, #1
    c1d4:	add	sl, sl, #8
    c1d8:	bne	c1c4 <ReadUInt64Data+0xa34>
    c1dc:	b	d4bc <ReadUInt64Data+0x1d2c>
    c1e0:	cmp	r7, #256	; 0x100
    c1e4:	bgt	cff4 <ReadUInt64Data+0x1864>
    c1e8:	ldr	r3, [r4]
    c1ec:	add	r4, sp, #120	; 0x78
    c1f0:	mov	r1, r6
    c1f4:	mov	r2, r7
    c1f8:	mov	r0, r4
    c1fc:	bl	18b8 <fread@plt>
    c200:	mov	r9, r0
    c204:	cmp	r7, #1
    c208:	blt	d4bc <ReadUInt64Data+0x1d2c>
    c20c:	vldr	d16, [r4]
    c210:	vmov	r0, r1, d16
    c214:	bl	5f3e0 <__aeabi_d2ulz>
    c218:	strd	r0, [sl]
    c21c:	subs	r7, r7, #1
    c220:	add	sl, sl, #8
    c224:	add	r4, r4, #8
    c228:	bne	c20c <ReadUInt64Data+0xa7c>
    c22c:	b	d4bc <ReadUInt64Data+0x1d2c>
    c230:	cmp	r7, #256	; 0x100
    c234:	bgt	d0f0 <ReadUInt64Data+0x1960>
    c238:	ldr	r3, [r4]
    c23c:	add	r0, sp, #120	; 0x78
    c240:	mov	r1, r6
    c244:	mov	r2, r7
    c248:	bl	18b8 <fread@plt>
    c24c:	mov	r9, r0
    c250:	cmp	r7, #1
    c254:	blt	d1f4 <ReadUInt64Data+0x1a64>
    c258:	lsl	r2, r7, #3
    c25c:	add	r1, sp, #120	; 0x78
    c260:	mov	r0, sl
    c264:	bl	181c <memcpy@plt>
    c268:	cmp	r8, #13
    c26c:	beq	d1fc <ReadUInt64Data+0x1a6c>
    c270:	b	d4bc <ReadUInt64Data+0x1d2c>
    c274:	sub	r0, r7, #256	; 0x100
    c278:	add	r1, sl, #2048	; 0x800
    c27c:	mov	r9, #0
    c280:	str	r7, [sp, #4]
    c284:	str	r0, [sp, #12]
    c288:	mov	r0, #0
    c28c:	ldr	r3, [r4]
    c290:	add	r4, sp, #120	; 0x78
    c294:	mov	r8, r0
    c298:	mov	r5, r1
    c29c:	mov	r1, r6
    c2a0:	mov	r2, #256	; 0x100
    c2a4:	mov	r0, r4
    c2a8:	bl	18b8 <fread@plt>
    c2ac:	mov	r7, r0
    c2b0:	mov	r6, #0
    c2b4:	mov	r0, r4
    c2b8:	bl	1c18 <Mat_int16Swap>
    c2bc:	mov	r1, sl
    c2c0:	add	r4, r4, #2
    c2c4:	str	r0, [r1, r6]!
    c2c8:	add	r6, r6, #8
    c2cc:	asr	r0, r0, #31
    c2d0:	cmp	r6, #2048	; 0x800
    c2d4:	str	r0, [r1, #4]
    c2d8:	bne	c2b4 <ReadUInt64Data+0xb24>
    c2dc:	ldr	r2, [sp, #12]
    c2e0:	ldr	r6, [sp, #16]
    c2e4:	ldr	r4, [sp, #20]
    c2e8:	add	r0, r8, #256	; 0x100
    c2ec:	add	r9, r7, r9
    c2f0:	add	sl, sl, #2048	; 0x800
    c2f4:	add	r1, r5, #2048	; 0x800
    c2f8:	cmp	r0, r2
    c2fc:	blt	c28c <ReadUInt64Data+0xafc>
    c300:	ldr	r2, [sp, #4]
    c304:	cmp	r0, r2
    c308:	bge	d4bc <ReadUInt64Data+0x1d2c>
    c30c:	ldr	r3, [r4]
    c310:	mov	r1, r6
    c314:	sub	r6, r2, r0
    c318:	add	r4, sp, #120	; 0x78
    c31c:	mov	r0, r4
    c320:	mov	r2, r6
    c324:	bl	18b8 <fread@plt>
    c328:	add	r9, r0, r9
    c32c:	cmp	r6, #1
    c330:	blt	d458 <ReadUInt64Data+0x1cc8>
    c334:	ldr	r0, [sp, #12]
    c338:	sub	r6, r0, r8
    c33c:	mov	r0, r4
    c340:	bl	1c18 <Mat_int16Swap>
    c344:	asr	r1, r0, #31
    c348:	subs	r6, r6, #1
    c34c:	add	r4, r4, #2
    c350:	strd	r0, [r5]
    c354:	add	r5, r5, #8
    c358:	bne	c33c <ReadUInt64Data+0xbac>
    c35c:	ldr	r6, [sp, #16]
    c360:	mul	r0, r9, r6
    c364:	sub	sp, fp, #28
    c368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c36c:	sub	r1, r7, #256	; 0x100
    c370:	add	r0, sl, #2048	; 0x800
    c374:	mov	r9, #0
    c378:	mov	r2, #0
    c37c:	mov	r8, #0
    c380:	str	r7, [sp, #4]
    c384:	str	r1, [sp, #8]
    c388:	ldr	r3, [r4]
    c38c:	add	r4, sp, #120	; 0x78
    c390:	str	r2, [sp, #12]
    c394:	mov	r5, r0
    c398:	mov	r1, r6
    c39c:	mov	r2, #256	; 0x100
    c3a0:	mov	r0, r4
    c3a4:	bl	18b8 <fread@plt>
    c3a8:	mov	r7, r0
    c3ac:	mov	r6, #0
    c3b0:	mov	r0, r4
    c3b4:	bl	1c2c <Mat_uint16Swap>
    c3b8:	mov	r1, sl
    c3bc:	add	r4, r4, #2
    c3c0:	str	r0, [r1, r6]!
    c3c4:	add	r6, r6, #8
    c3c8:	cmp	r6, #2048	; 0x800
    c3cc:	str	r9, [r1, #4]
    c3d0:	bne	c3b0 <ReadUInt64Data+0xc20>
    c3d4:	add	r8, r7, r8
    c3d8:	ldr	r7, [sp, #12]
    c3dc:	ldr	r1, [sp, #8]
    c3e0:	ldr	r6, [sp, #16]
    c3e4:	ldr	r4, [sp, #20]
    c3e8:	add	sl, sl, #2048	; 0x800
    c3ec:	add	r0, r5, #2048	; 0x800
    c3f0:	add	r2, r7, #256	; 0x100
    c3f4:	cmp	r2, r1
    c3f8:	blt	c388 <ReadUInt64Data+0xbf8>
    c3fc:	ldr	r0, [sp, #4]
    c400:	cmp	r2, r0
    c404:	bge	d1c8 <ReadUInt64Data+0x1a38>
    c408:	ldr	r3, [r4]
    c40c:	mov	r1, r6
    c410:	sub	r6, r0, r2
    c414:	add	r4, sp, #120	; 0x78
    c418:	mov	r0, r4
    c41c:	mov	r2, r6
    c420:	bl	18b8 <fread@plt>
    c424:	mov	r9, r8
    c428:	cmp	r6, #1
    c42c:	add	r9, r0, r8
    c430:	blt	d468 <ReadUInt64Data+0x1cd8>
    c434:	ldr	r0, [sp, #8]
    c438:	sub	r6, r0, r7
    c43c:	mov	r7, #0
    c440:	mov	r0, r4
    c444:	bl	1c2c <Mat_uint16Swap>
    c448:	stm	r5, {r0, r7}
    c44c:	add	r5, r5, #8
    c450:	subs	r6, r6, #1
    c454:	add	r4, r4, #2
    c458:	bne	c440 <ReadUInt64Data+0xcb0>
    c45c:	ldr	r6, [sp, #16]
    c460:	mul	r0, r9, r6
    c464:	sub	sp, fp, #28
    c468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c46c:	sub	r0, r7, #256	; 0x100
    c470:	add	r1, sl, #2048	; 0x800
    c474:	mov	r9, #0
    c478:	str	r7, [sp, #4]
    c47c:	str	r0, [sp, #12]
    c480:	mov	r0, #0
    c484:	ldr	r3, [r4]
    c488:	add	r4, sp, #120	; 0x78
    c48c:	mov	r8, r0
    c490:	mov	r5, r1
    c494:	mov	r1, r6
    c498:	mov	r2, #256	; 0x100
    c49c:	mov	r0, r4
    c4a0:	bl	18b8 <fread@plt>
    c4a4:	mov	r7, r0
    c4a8:	mov	r6, #0
    c4ac:	mov	r0, r4
    c4b0:	bl	1bf0 <Mat_int32Swap>
    c4b4:	mov	r1, sl
    c4b8:	add	r4, r4, #4
    c4bc:	str	r0, [r1, r6]!
    c4c0:	add	r6, r6, #8
    c4c4:	asr	r0, r0, #31
    c4c8:	cmp	r6, #2048	; 0x800
    c4cc:	str	r0, [r1, #4]
    c4d0:	bne	c4ac <ReadUInt64Data+0xd1c>
    c4d4:	ldr	r2, [sp, #12]
    c4d8:	ldr	r6, [sp, #16]
    c4dc:	ldr	r4, [sp, #20]
    c4e0:	add	r0, r8, #256	; 0x100
    c4e4:	add	r9, r7, r9
    c4e8:	add	sl, sl, #2048	; 0x800
    c4ec:	add	r1, r5, #2048	; 0x800
    c4f0:	cmp	r0, r2
    c4f4:	blt	c484 <ReadUInt64Data+0xcf4>
    c4f8:	ldr	r2, [sp, #4]
    c4fc:	cmp	r0, r2
    c500:	bge	d4bc <ReadUInt64Data+0x1d2c>
    c504:	ldr	r3, [r4]
    c508:	mov	r1, r6
    c50c:	sub	r6, r2, r0
    c510:	add	r4, sp, #120	; 0x78
    c514:	mov	r0, r4
    c518:	mov	r2, r6
    c51c:	bl	18b8 <fread@plt>
    c520:	add	r9, r0, r9
    c524:	cmp	r6, #1
    c528:	blt	d478 <ReadUInt64Data+0x1ce8>
    c52c:	ldr	r0, [sp, #12]
    c530:	sub	r6, r0, r8
    c534:	mov	r0, r4
    c538:	bl	1bf0 <Mat_int32Swap>
    c53c:	asr	r1, r0, #31
    c540:	subs	r6, r6, #1
    c544:	add	r4, r4, #4
    c548:	strd	r0, [r5]
    c54c:	add	r5, r5, #8
    c550:	bne	c534 <ReadUInt64Data+0xda4>
    c554:	ldr	r6, [sp, #16]
    c558:	mul	r0, r9, r6
    c55c:	sub	sp, fp, #28
    c560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c564:	sub	r1, r7, #256	; 0x100
    c568:	add	r0, sl, #2048	; 0x800
    c56c:	mov	r9, #0
    c570:	mov	r2, #0
    c574:	mov	r8, #0
    c578:	str	r7, [sp, #4]
    c57c:	str	r1, [sp, #8]
    c580:	ldr	r3, [r4]
    c584:	add	r4, sp, #120	; 0x78
    c588:	str	r2, [sp, #12]
    c58c:	mov	r5, r0
    c590:	mov	r1, r6
    c594:	mov	r2, #256	; 0x100
    c598:	mov	r0, r4
    c59c:	bl	18b8 <fread@plt>
    c5a0:	mov	r7, r0
    c5a4:	mov	r6, #0
    c5a8:	mov	r0, r4
    c5ac:	bl	1c04 <Mat_uint32Swap>
    c5b0:	mov	r1, sl
    c5b4:	add	r4, r4, #4
    c5b8:	str	r0, [r1, r6]!
    c5bc:	add	r6, r6, #8
    c5c0:	cmp	r6, #2048	; 0x800
    c5c4:	str	r9, [r1, #4]
    c5c8:	bne	c5a8 <ReadUInt64Data+0xe18>
    c5cc:	add	r8, r7, r8
    c5d0:	ldr	r7, [sp, #12]
    c5d4:	ldr	r1, [sp, #8]
    c5d8:	ldr	r6, [sp, #16]
    c5dc:	ldr	r4, [sp, #20]
    c5e0:	add	sl, sl, #2048	; 0x800
    c5e4:	add	r0, r5, #2048	; 0x800
    c5e8:	add	r2, r7, #256	; 0x100
    c5ec:	cmp	r2, r1
    c5f0:	blt	c580 <ReadUInt64Data+0xdf0>
    c5f4:	ldr	r0, [sp, #4]
    c5f8:	cmp	r2, r0
    c5fc:	bge	d1d8 <ReadUInt64Data+0x1a48>
    c600:	ldr	r3, [r4]
    c604:	mov	r1, r6
    c608:	sub	r6, r0, r2
    c60c:	add	r4, sp, #120	; 0x78
    c610:	mov	r0, r4
    c614:	mov	r2, r6
    c618:	bl	18b8 <fread@plt>
    c61c:	mov	r9, r8
    c620:	cmp	r6, #1
    c624:	add	r9, r0, r8
    c628:	blt	d488 <ReadUInt64Data+0x1cf8>
    c62c:	ldr	r0, [sp, #8]
    c630:	sub	r6, r0, r7
    c634:	mov	r7, #0
    c638:	mov	r0, r4
    c63c:	bl	1c04 <Mat_uint32Swap>
    c640:	stm	r5, {r0, r7}
    c644:	add	r5, r5, #8
    c648:	subs	r6, r6, #1
    c64c:	add	r4, r4, #4
    c650:	bne	c638 <ReadUInt64Data+0xea8>
    c654:	ldr	r6, [sp, #16]
    c658:	mul	r0, r9, r6
    c65c:	sub	sp, fp, #28
    c660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c664:	sub	r0, r7, #256	; 0x100
    c668:	add	r1, sl, #2048	; 0x800
    c66c:	mov	r9, #0
    c670:	str	r7, [sp, #4]
    c674:	str	r0, [sp, #12]
    c678:	mov	r0, #0
    c67c:	ldr	r3, [r4]
    c680:	add	r7, sp, #120	; 0x78
    c684:	mov	r8, r0
    c688:	mov	r5, r1
    c68c:	mov	r1, r6
    c690:	mov	r2, #256	; 0x100
    c694:	mov	r0, r7
    c698:	bl	18b8 <fread@plt>
    c69c:	mov	r4, r0
    c6a0:	mov	r6, #0
    c6a4:	mov	r0, r7
    c6a8:	bl	1c44 <Mat_floatSwap>
    c6ac:	vmov	r0, s0
    c6b0:	bl	5f3a0 <__aeabi_f2ulz>
    c6b4:	mov	r2, sl
    c6b8:	add	r7, r7, #4
    c6bc:	str	r0, [r2, r6]!
    c6c0:	add	r6, r6, #8
    c6c4:	cmp	r6, #2048	; 0x800
    c6c8:	str	r1, [r2, #4]
    c6cc:	bne	c6a4 <ReadUInt64Data+0xf14>
    c6d0:	ldr	r2, [sp, #12]
    c6d4:	add	r9, r4, r9
    c6d8:	ldr	r6, [sp, #16]
    c6dc:	ldr	r4, [sp, #20]
    c6e0:	add	r0, r8, #256	; 0x100
    c6e4:	add	sl, sl, #2048	; 0x800
    c6e8:	add	r1, r5, #2048	; 0x800
    c6ec:	cmp	r0, r2
    c6f0:	blt	c67c <ReadUInt64Data+0xeec>
    c6f4:	ldr	r2, [sp, #4]
    c6f8:	cmp	r0, r2
    c6fc:	bge	d4bc <ReadUInt64Data+0x1d2c>
    c700:	ldr	r3, [r4]
    c704:	mov	r1, r6
    c708:	sub	r6, r2, r0
    c70c:	add	r4, sp, #120	; 0x78
    c710:	mov	r0, r4
    c714:	mov	r2, r6
    c718:	bl	18b8 <fread@plt>
    c71c:	add	r9, r0, r9
    c720:	cmp	r6, #1
    c724:	blt	cfe4 <ReadUInt64Data+0x1854>
    c728:	ldr	r0, [sp, #12]
    c72c:	sub	r6, r0, r8
    c730:	mov	r0, r4
    c734:	bl	1c44 <Mat_floatSwap>
    c738:	vmov	r0, s0
    c73c:	bl	5f3a0 <__aeabi_f2ulz>
    c740:	strd	r0, [r5]
    c744:	add	r5, r5, #8
    c748:	subs	r6, r6, #1
    c74c:	add	r4, r4, #4
    c750:	bne	c730 <ReadUInt64Data+0xfa0>
    c754:	b	cfe4 <ReadUInt64Data+0x1854>
    c758:	sub	r0, r7, #256	; 0x100
    c75c:	add	r1, sl, #2048	; 0x800
    c760:	add	r4, sp, #120	; 0x78
    c764:	mov	r9, #0
    c768:	str	r7, [sp, #4]
    c76c:	str	r0, [sp, #12]
    c770:	mov	r0, #0
    c774:	mov	r8, r0
    c778:	ldr	r0, [sp, #20]
    c77c:	mov	r5, r1
    c780:	mov	r1, r6
    c784:	mov	r2, #256	; 0x100
    c788:	ldr	r3, [r0]
    c78c:	mov	r0, r4
    c790:	bl	18b8 <fread@plt>
    c794:	mov	r7, r0
    c798:	mov	r6, #0
    c79c:	add	r0, r4, r6
    c7a0:	bl	1c88 <Mat_doubleSwap>
    c7a4:	vmov	r0, r1, d0
    c7a8:	bl	5f3e0 <__aeabi_d2ulz>
    c7ac:	mov	r2, sl
    c7b0:	str	r0, [r2, r6]!
    c7b4:	add	r6, r6, #8
    c7b8:	cmp	r6, #2048	; 0x800
    c7bc:	str	r1, [r2, #4]
    c7c0:	bne	c79c <ReadUInt64Data+0x100c>
    c7c4:	ldr	r2, [sp, #12]
    c7c8:	ldr	r6, [sp, #16]
    c7cc:	add	r0, r8, #256	; 0x100
    c7d0:	add	r9, r7, r9
    c7d4:	add	sl, sl, #2048	; 0x800
    c7d8:	add	r1, r5, #2048	; 0x800
    c7dc:	cmp	r0, r2
    c7e0:	blt	c774 <ReadUInt64Data+0xfe4>
    c7e4:	ldr	r2, [sp, #4]
    c7e8:	cmp	r0, r2
    c7ec:	bge	d4bc <ReadUInt64Data+0x1d2c>
    c7f0:	mov	r1, r6
    c7f4:	sub	r6, r2, r0
    c7f8:	ldr	r0, [sp, #20]
    c7fc:	add	r4, sp, #120	; 0x78
    c800:	mov	r2, r6
    c804:	ldr	r3, [r0]
    c808:	mov	r0, r4
    c80c:	bl	18b8 <fread@plt>
    c810:	add	r9, r0, r9
    c814:	cmp	r6, #1
    c818:	blt	d0e0 <ReadUInt64Data+0x1950>
    c81c:	ldr	r0, [sp, #12]
    c820:	sub	r6, r0, r8
    c824:	mov	r0, r4
    c828:	bl	1c88 <Mat_doubleSwap>
    c82c:	vmov	r0, r1, d0
    c830:	bl	5f3e0 <__aeabi_d2ulz>
    c834:	strd	r0, [r5]
    c838:	add	r5, r5, #8
    c83c:	subs	r6, r6, #1
    c840:	add	r4, r4, #8
    c844:	bne	c824 <ReadUInt64Data+0x1094>
    c848:	b	d0e0 <ReadUInt64Data+0x1950>
    c84c:	sub	r0, r7, #256	; 0x100
    c850:	add	r1, sl, #2048	; 0x800
    c854:	add	r4, sp, #120	; 0x78
    c858:	mov	r6, sl
    c85c:	mov	r9, #0
    c860:	str	r8, [sp]
    c864:	str	r7, [sp, #4]
    c868:	str	r0, [sp, #8]
    c86c:	mov	r0, #0
    c870:	str	r0, [sp, #12]
    c874:	ldr	r0, [sp, #20]
    c878:	mov	r5, r1
    c87c:	ldr	r1, [sp, #16]
    c880:	mov	r2, #256	; 0x100
    c884:	mov	r8, r9
    c888:	ldr	r3, [r0]
    c88c:	mov	r0, r4
    c890:	bl	18b8 <fread@plt>
    c894:	mov	r7, r0
    c898:	mov	r9, #0
    c89c:	add	r0, r4, r9
    c8a0:	bl	1b84 <Mat_int64Swap>
    c8a4:	mov	r2, r6
    c8a8:	str	r0, [r2, r9]!
    c8ac:	add	r9, r9, #8
    c8b0:	cmp	r9, #2048	; 0x800
    c8b4:	str	r1, [r2, #4]
    c8b8:	bne	c89c <ReadUInt64Data+0x110c>
    c8bc:	ldr	r0, [sp, #12]
    c8c0:	ldr	r2, [sp, #8]
    c8c4:	mov	r9, r8
    c8c8:	add	r6, r6, #2048	; 0x800
    c8cc:	add	r1, r5, #2048	; 0x800
    c8d0:	add	r9, r7, r8
    c8d4:	add	r0, r0, #256	; 0x100
    c8d8:	cmp	r0, r2
    c8dc:	blt	c870 <ReadUInt64Data+0x10e0>
    c8e0:	ldr	r7, [sp, #4]
    c8e4:	cmp	r0, r7
    c8e8:	bge	d1e8 <ReadUInt64Data+0x1a58>
    c8ec:	sub	r7, r7, r0
    c8f0:	ldr	r0, [sp, #20]
    c8f4:	ldr	r6, [sp, #16]
    c8f8:	add	r4, sp, #120	; 0x78
    c8fc:	mov	r2, r7
    c900:	ldr	r3, [r0]
    c904:	mov	r0, r4
    c908:	mov	r1, r6
    c90c:	bl	18b8 <fread@plt>
    c910:	ldr	r8, [sp]
    c914:	add	r9, r0, r9
    c918:	cmp	r7, #1
    c91c:	blt	d1a0 <ReadUInt64Data+0x1a10>
    c920:	ldr	r0, [sp, #8]
    c924:	ldr	r1, [sp, #12]
    c928:	sub	r6, r0, r1
    c92c:	mov	r0, r4
    c930:	bl	1b84 <Mat_int64Swap>
    c934:	strd	r0, [r5]
    c938:	add	r5, r5, #8
    c93c:	subs	r6, r6, #1
    c940:	add	r4, r4, #8
    c944:	bne	c92c <ReadUInt64Data+0x119c>
    c948:	ldr	r6, [sp, #16]
    c94c:	b	d1a0 <ReadUInt64Data+0x1a10>
    c950:	sub	r1, r7, #256	; 0x100
    c954:	add	r0, sl, #2048	; 0x800
    c958:	mov	r2, #256	; 0x100
    c95c:	add	r4, sp, #120	; 0x78
    c960:	add	r9, sp, #80	; 0x50
    c964:	mov	r5, sl
    c968:	mov	r6, #0
    c96c:	str	r7, [sp, #4]
    c970:	str	r1, [sp, #8]
    c974:	mov	r1, #0
    c978:	mov	r8, r0
    c97c:	ldr	r0, [sp, #20]
    c980:	str	r1, [sp, #12]
    c984:	ldr	r1, [sp, #16]
    c988:	mov	r7, r2
    c98c:	mov	r2, #256	; 0x100
    c990:	ldr	r3, [r0]
    c994:	mov	r0, r4
    c998:	bl	18b8 <fread@plt>
    c99c:	mov	r1, r5
    c9a0:	mov	r2, #0
    c9a4:	ldr	r3, [r4, r2]
    c9a8:	add	r2, r2, #4
    c9ac:	cmp	r2, #512	; 0x200
    c9b0:	str	r3, [sp, #80]	; 0x50
    c9b4:	vld1.32	{d16[0]}, [r9 :32]
    c9b8:	vmovl.s16	q8, d16
    c9bc:	vmovl.s32	q8, d16
    c9c0:	vst1.64	{d16-d17}, [r1]!
    c9c4:	bne	c9a4 <ReadUInt64Data+0x1214>
    c9c8:	mov	r1, r7
    c9cc:	ldr	r3, [sp, #8]
    c9d0:	add	r6, r0, r6
    c9d4:	add	r5, r5, #2048	; 0x800
    c9d8:	add	r0, r8, #2048	; 0x800
    c9dc:	add	r2, r7, #256	; 0x100
    c9e0:	ldr	r1, [sp, #12]
    c9e4:	add	r1, r1, #256	; 0x100
    c9e8:	cmp	r1, r3
    c9ec:	blt	c978 <ReadUInt64Data+0x11e8>
    c9f0:	ldr	r0, [sp, #4]
    c9f4:	cmp	r1, r0
    c9f8:	bge	cc18 <ReadUInt64Data+0x1488>
    c9fc:	sub	r5, r0, r1
    ca00:	ldr	r0, [sp, #20]
    ca04:	ldr	r1, [sp, #16]
    ca08:	add	r4, sp, #120	; 0x78
    ca0c:	mov	r2, r5
    ca10:	ldr	r3, [r0]
    ca14:	mov	r0, r4
    ca18:	bl	18b8 <fread@plt>
    ca1c:	mov	r9, r6
    ca20:	cmp	r5, #1
    ca24:	add	r9, r0, r6
    ca28:	blt	d4a8 <ReadUInt64Data+0x1d18>
    ca2c:	ldr	r6, [sp, #16]
    ca30:	ldr	ip, [sp, #12]
    ca34:	mov	r0, #0
    ca38:	beq	ca78 <ReadUInt64Data+0x12e8>
    ca3c:	ldr	r0, [sp, #8]
    ca40:	add	r2, sp, #76	; 0x4c
    ca44:	sub	r0, r0, ip
    ca48:	bic	r1, r0, #1
    ca4c:	bic	r0, r5, #1
    ca50:	ldr	r3, [r4], #4
    ca54:	subs	r1, r1, #2
    ca58:	str	r3, [sp, #76]	; 0x4c
    ca5c:	vld1.32	{d16[0]}, [r2 :32]
    ca60:	vmovl.s16	q8, d16
    ca64:	vmovl.s32	q8, d16
    ca68:	vst1.64	{d16-d17}, [r8]!
    ca6c:	bne	ca50 <ReadUInt64Data+0x12c0>
    ca70:	cmp	r5, r0
    ca74:	beq	d4bc <ReadUInt64Data+0x1d2c>
    ca78:	ldr	r3, [sp, #8]
    ca7c:	add	r1, sp, #120	; 0x78
    ca80:	add	r2, r0, r7
    ca84:	add	r1, r1, r0, lsl #1
    ca88:	add	r2, sl, r2, lsl #3
    ca8c:	sub	r3, r3, ip
    ca90:	sub	r0, r3, r0
    ca94:	ldrsh	r4, [r1], #2
    ca98:	subs	r0, r0, #1
    ca9c:	asr	r5, r4, #31
    caa0:	strd	r4, [r2]
    caa4:	add	r2, r2, #8
    caa8:	bne	ca94 <ReadUInt64Data+0x1304>
    caac:	b	d4bc <ReadUInt64Data+0x1d2c>
    cab0:	sub	r1, r7, #256	; 0x100
    cab4:	add	r0, sl, #2048	; 0x800
    cab8:	mov	r2, #256	; 0x100
    cabc:	add	r4, sp, #120	; 0x78
    cac0:	add	r9, sp, #92	; 0x5c
    cac4:	mov	r5, sl
    cac8:	mov	r6, #0
    cacc:	str	r7, [sp, #4]
    cad0:	str	r1, [sp, #8]
    cad4:	mov	r1, #0
    cad8:	mov	r8, r0
    cadc:	ldr	r0, [sp, #20]
    cae0:	str	r1, [sp, #12]
    cae4:	ldr	r1, [sp, #16]
    cae8:	mov	r7, r2
    caec:	mov	r2, #256	; 0x100
    caf0:	ldr	r3, [r0]
    caf4:	mov	r0, r4
    caf8:	bl	18b8 <fread@plt>
    cafc:	mov	r1, r5
    cb00:	mov	r2, #0
    cb04:	ldr	r3, [r4, r2]
    cb08:	add	r2, r2, #4
    cb0c:	cmp	r2, #512	; 0x200
    cb10:	str	r3, [sp, #92]	; 0x5c
    cb14:	vld1.32	{d16[0]}, [r9 :32]
    cb18:	vmovl.u16	q8, d16
    cb1c:	vmovl.u32	q8, d16
    cb20:	vst1.64	{d16-d17}, [r1]!
    cb24:	bne	cb04 <ReadUInt64Data+0x1374>
    cb28:	mov	r1, r7
    cb2c:	ldr	r3, [sp, #8]
    cb30:	add	r6, r0, r6
    cb34:	add	r5, r5, #2048	; 0x800
    cb38:	add	r0, r8, #2048	; 0x800
    cb3c:	add	r2, r7, #256	; 0x100
    cb40:	ldr	r1, [sp, #12]
    cb44:	add	r1, r1, #256	; 0x100
    cb48:	cmp	r1, r3
    cb4c:	blt	cad8 <ReadUInt64Data+0x1348>
    cb50:	ldr	r0, [sp, #4]
    cb54:	cmp	r1, r0
    cb58:	bge	cc18 <ReadUInt64Data+0x1488>
    cb5c:	sub	r5, r0, r1
    cb60:	ldr	r0, [sp, #20]
    cb64:	ldr	r1, [sp, #16]
    cb68:	add	r4, sp, #120	; 0x78
    cb6c:	mov	r2, r5
    cb70:	ldr	r3, [r0]
    cb74:	mov	r0, r4
    cb78:	bl	18b8 <fread@plt>
    cb7c:	mov	r9, r6
    cb80:	cmp	r5, #1
    cb84:	add	r9, r0, r6
    cb88:	blt	d4b8 <ReadUInt64Data+0x1d28>
    cb8c:	ldr	r6, [sp, #16]
    cb90:	ldr	ip, [sp, #12]
    cb94:	mov	r1, #0
    cb98:	mov	r0, #0
    cb9c:	beq	cbe0 <ReadUInt64Data+0x1450>
    cba0:	ldr	r0, [sp, #8]
    cba4:	add	r3, sp, #88	; 0x58
    cba8:	sub	r0, r0, ip
    cbac:	bic	r2, r0, #1
    cbb0:	bic	r0, r5, #1
    cbb4:	ldr	r6, [r4], #4
    cbb8:	subs	r2, r2, #2
    cbbc:	str	r6, [sp, #88]	; 0x58
    cbc0:	vld1.32	{d16[0]}, [r3 :32]
    cbc4:	vmovl.u16	q8, d16
    cbc8:	vmovl.u32	q8, d16
    cbcc:	vst1.64	{d16-d17}, [r8]!
    cbd0:	bne	cbb4 <ReadUInt64Data+0x1424>
    cbd4:	ldr	r6, [sp, #16]
    cbd8:	cmp	r5, r0
    cbdc:	beq	d4bc <ReadUInt64Data+0x1d2c>
    cbe0:	add	r3, r0, r7
    cbe4:	ldr	r7, [sp, #8]
    cbe8:	add	r2, sp, #120	; 0x78
    cbec:	add	r2, r2, r0, lsl #1
    cbf0:	add	r3, sl, r3, lsl #3
    cbf4:	sub	r7, r7, ip
    cbf8:	sub	r0, r7, r0
    cbfc:	ldrh	r4, [r2], #2
    cc00:	subs	r0, r0, #1
    cc04:	str	r4, [r3]
    cc08:	str	r1, [r3, #4]
    cc0c:	add	r3, r3, #8
    cc10:	bne	cbfc <ReadUInt64Data+0x146c>
    cc14:	b	d4bc <ReadUInt64Data+0x1d2c>
    cc18:	mov	r9, r6
    cc1c:	ldr	r6, [sp, #16]
    cc20:	mul	r0, r9, r6
    cc24:	sub	sp, fp, #28
    cc28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc2c:	sub	r1, r7, #256	; 0x100
    cc30:	str	r7, [sp, #4]
    cc34:	add	r0, sl, #2048	; 0x800
    cc38:	mov	r2, #256	; 0x100
    cc3c:	add	r4, sp, #120	; 0x78
    cc40:	add	r7, sp, #40	; 0x28
    cc44:	mov	r8, sl
    cc48:	mov	r9, #0
    cc4c:	str	r1, [sp]
    cc50:	mov	r1, #0
    cc54:	mov	r5, r0
    cc58:	ldr	r0, [sp, #20]
    cc5c:	str	r1, [sp, #12]
    cc60:	str	r2, [sp, #8]
    cc64:	mov	r1, r6
    cc68:	mov	r2, #256	; 0x100
    cc6c:	ldr	r3, [r0]
    cc70:	mov	r0, r4
    cc74:	bl	18b8 <fread@plt>
    cc78:	mov	r1, r8
    cc7c:	mov	r2, #0
    cc80:	ldr	r3, [r4, r2]
    cc84:	str	r3, [sp, #40]	; 0x28
    cc88:	add	r3, r4, r2
    cc8c:	add	r2, r2, #8
    cc90:	ldr	r3, [r3, #4]
    cc94:	cmp	r2, #1024	; 0x400
    cc98:	str	r3, [sp, #44]	; 0x2c
    cc9c:	vld1.32	{d16}, [r7 :64]
    cca0:	vmovl.s32	q8, d16
    cca4:	vst1.64	{d16-d17}, [r1]!
    cca8:	bne	cc80 <ReadUInt64Data+0x14f0>
    ccac:	ldr	r1, [sp, #8]
    ccb0:	ldr	r3, [sp]
    ccb4:	add	r9, r0, r9
    ccb8:	add	r8, r8, #2048	; 0x800
    ccbc:	add	r0, r5, #2048	; 0x800
    ccc0:	add	r2, r1, #256	; 0x100
    ccc4:	ldr	r1, [sp, #12]
    ccc8:	add	r1, r1, #256	; 0x100
    cccc:	cmp	r1, r3
    ccd0:	blt	cc54 <ReadUInt64Data+0x14c4>
    ccd4:	ldr	r0, [sp, #4]
    ccd8:	cmp	r1, r0
    ccdc:	bge	d4bc <ReadUInt64Data+0x1d2c>
    cce0:	sub	r4, r0, r1
    cce4:	ldr	r0, [sp, #20]
    cce8:	add	r7, sp, #120	; 0x78
    ccec:	mov	r1, r6
    ccf0:	mov	r2, r4
    ccf4:	ldr	r3, [r0]
    ccf8:	mov	r0, r7
    ccfc:	bl	18b8 <fread@plt>
    cd00:	add	r9, r0, r9
    cd04:	cmp	r4, #1
    cd08:	blt	d4bc <ReadUInt64Data+0x1d2c>
    cd0c:	ldr	ip, [sp, #12]
    cd10:	mov	r0, #0
    cd14:	beq	cd5c <ReadUInt64Data+0x15cc>
    cd18:	ldr	r0, [sp]
    cd1c:	add	r2, sp, #32
    cd20:	sub	r0, r0, ip
    cd24:	bic	r1, r0, #1
    cd28:	bic	r0, r4, #1
    cd2c:	ldm	r7, {r3, r6}
    cd30:	subs	r1, r1, #2
    cd34:	add	r7, r7, #8
    cd38:	str	r6, [sp, #36]	; 0x24
    cd3c:	str	r3, [sp, #32]
    cd40:	vld1.32	{d16}, [r2 :64]
    cd44:	vmovl.s32	q8, d16
    cd48:	vst1.64	{d16-d17}, [r5]!
    cd4c:	bne	cd2c <ReadUInt64Data+0x159c>
    cd50:	ldr	r6, [sp, #16]
    cd54:	cmp	r4, r0
    cd58:	beq	d4bc <ReadUInt64Data+0x1d2c>
    cd5c:	ldr	r2, [sp, #8]
    cd60:	ldr	r3, [sp]
    cd64:	add	r1, sp, #120	; 0x78
    cd68:	add	r1, r1, r0, lsl #2
    cd6c:	add	r2, r0, r2
    cd70:	sub	r3, r3, ip
    cd74:	add	r2, sl, r2, lsl #3
    cd78:	sub	r0, r3, r0
    cd7c:	ldr	r4, [r1], #4
    cd80:	subs	r0, r0, #1
    cd84:	asr	r5, r4, #31
    cd88:	strd	r4, [r2]
    cd8c:	add	r2, r2, #8
    cd90:	bne	cd7c <ReadUInt64Data+0x15ec>
    cd94:	b	d4bc <ReadUInt64Data+0x1d2c>
    cd98:	sub	r1, r7, #256	; 0x100
    cd9c:	str	r7, [sp, #4]
    cda0:	add	r0, sl, #2048	; 0x800
    cda4:	mov	r2, #256	; 0x100
    cda8:	add	r4, sp, #120	; 0x78
    cdac:	add	r7, sp, #64	; 0x40
    cdb0:	mov	r8, sl
    cdb4:	mov	r9, #0
    cdb8:	str	r1, [sp]
    cdbc:	mov	r1, #0
    cdc0:	mov	r5, r0
    cdc4:	ldr	r0, [sp, #20]
    cdc8:	str	r1, [sp, #12]
    cdcc:	str	r2, [sp, #8]
    cdd0:	mov	r1, r6
    cdd4:	mov	r2, #256	; 0x100
    cdd8:	ldr	r3, [r0]
    cddc:	mov	r0, r4
    cde0:	bl	18b8 <fread@plt>
    cde4:	mov	r1, r8
    cde8:	mov	r2, #0
    cdec:	ldr	r3, [r4, r2]
    cdf0:	str	r3, [sp, #64]	; 0x40
    cdf4:	add	r3, r4, r2
    cdf8:	add	r2, r2, #8
    cdfc:	ldr	r3, [r3, #4]
    ce00:	cmp	r2, #1024	; 0x400
    ce04:	str	r3, [sp, #68]	; 0x44
    ce08:	vld1.32	{d16}, [r7 :64]
    ce0c:	vmovl.u32	q8, d16
    ce10:	vst1.64	{d16-d17}, [r1]!
    ce14:	bne	cdec <ReadUInt64Data+0x165c>
    ce18:	ldr	r1, [sp, #8]
    ce1c:	ldr	r3, [sp]
    ce20:	add	r9, r0, r9
    ce24:	add	r8, r8, #2048	; 0x800
    ce28:	add	r0, r5, #2048	; 0x800
    ce2c:	add	r2, r1, #256	; 0x100
    ce30:	ldr	r1, [sp, #12]
    ce34:	add	r1, r1, #256	; 0x100
    ce38:	cmp	r1, r3
    ce3c:	blt	cdc0 <ReadUInt64Data+0x1630>
    ce40:	ldr	r0, [sp, #4]
    ce44:	cmp	r1, r0
    ce48:	bge	d4bc <ReadUInt64Data+0x1d2c>
    ce4c:	sub	r4, r0, r1
    ce50:	ldr	r0, [sp, #20]
    ce54:	add	r7, sp, #120	; 0x78
    ce58:	mov	r1, r6
    ce5c:	mov	r2, r4
    ce60:	ldr	r3, [r0]
    ce64:	mov	r0, r7
    ce68:	bl	18b8 <fread@plt>
    ce6c:	add	r9, r0, r9
    ce70:	cmp	r4, #1
    ce74:	blt	d4bc <ReadUInt64Data+0x1d2c>
    ce78:	ldr	lr, [sp, #12]
    ce7c:	mov	r1, #0
    ce80:	mov	ip, #0
    ce84:	beq	ced0 <ReadUInt64Data+0x1740>
    ce88:	ldr	r0, [sp]
    ce8c:	bic	ip, r4, #1
    ce90:	add	r3, sp, #56	; 0x38
    ce94:	sub	r0, r0, lr
    ce98:	bic	r2, r0, #1
    ce9c:	ldr	r6, [r7]
    cea0:	ldr	r0, [r7, #4]
    cea4:	subs	r2, r2, #2
    cea8:	add	r7, r7, #8
    ceac:	str	r0, [sp, #60]	; 0x3c
    ceb0:	str	r6, [sp, #56]	; 0x38
    ceb4:	vld1.32	{d16}, [r3 :64]
    ceb8:	vmovl.u32	q8, d16
    cebc:	vst1.64	{d16-d17}, [r5]!
    cec0:	bne	ce9c <ReadUInt64Data+0x170c>
    cec4:	ldr	r6, [sp, #16]
    cec8:	cmp	r4, ip
    cecc:	beq	d4bc <ReadUInt64Data+0x1d2c>
    ced0:	add	r0, sp, #120	; 0x78
    ced4:	add	r2, r0, ip, lsl #2
    ced8:	ldr	r0, [sp, #8]
    cedc:	add	r0, ip, r0
    cee0:	add	r3, sl, r0, lsl #3
    cee4:	ldr	r0, [sp]
    cee8:	sub	r0, r0, lr
    ceec:	sub	r0, r0, ip
    cef0:	ldr	r4, [r2], #4
    cef4:	subs	r0, r0, #1
    cef8:	str	r4, [r3]
    cefc:	str	r1, [r3, #4]
    cf00:	add	r3, r3, #8
    cf04:	bne	cef0 <ReadUInt64Data+0x1760>
    cf08:	b	d4bc <ReadUInt64Data+0x1d2c>
    cf0c:	sub	r0, r7, #256	; 0x100
    cf10:	add	r1, sl, #2048	; 0x800
    cf14:	mov	r9, #0
    cf18:	str	r7, [sp, #4]
    cf1c:	str	r0, [sp, #12]
    cf20:	mov	r0, #0
    cf24:	ldr	r3, [r4]
    cf28:	add	r4, sp, #120	; 0x78
    cf2c:	mov	r8, r0
    cf30:	mov	r5, r1
    cf34:	mov	r1, r6
    cf38:	mov	r2, #256	; 0x100
    cf3c:	mov	r0, r4
    cf40:	bl	18b8 <fread@plt>
    cf44:	mov	r7, r0
    cf48:	mov	r6, #0
    cf4c:	ldr	r0, [r4], #4
    cf50:	bl	5f3a0 <__aeabi_f2ulz>
    cf54:	mov	r2, sl
    cf58:	str	r0, [r2, r6]!
    cf5c:	add	r6, r6, #8
    cf60:	cmp	r6, #2048	; 0x800
    cf64:	str	r1, [r2, #4]
    cf68:	bne	cf4c <ReadUInt64Data+0x17bc>
    cf6c:	ldr	r2, [sp, #12]
    cf70:	ldr	r6, [sp, #16]
    cf74:	ldr	r4, [sp, #20]
    cf78:	add	r0, r8, #256	; 0x100
    cf7c:	add	r9, r7, r9
    cf80:	add	sl, sl, #2048	; 0x800
    cf84:	add	r1, r5, #2048	; 0x800
    cf88:	cmp	r0, r2
    cf8c:	blt	cf24 <ReadUInt64Data+0x1794>
    cf90:	ldr	r2, [sp, #4]
    cf94:	cmp	r0, r2
    cf98:	bge	d4bc <ReadUInt64Data+0x1d2c>
    cf9c:	ldr	r3, [r4]
    cfa0:	mov	r1, r6
    cfa4:	sub	r6, r2, r0
    cfa8:	add	r4, sp, #120	; 0x78
    cfac:	mov	r0, r4
    cfb0:	mov	r2, r6
    cfb4:	bl	18b8 <fread@plt>
    cfb8:	add	r9, r0, r9
    cfbc:	cmp	r6, #1
    cfc0:	blt	cfe4 <ReadUInt64Data+0x1854>
    cfc4:	ldr	r0, [sp, #12]
    cfc8:	sub	r6, r0, r8
    cfcc:	ldr	r0, [r4], #4
    cfd0:	bl	5f3a0 <__aeabi_f2ulz>
    cfd4:	strd	r0, [r5]
    cfd8:	add	r5, r5, #8
    cfdc:	subs	r6, r6, #1
    cfe0:	bne	cfcc <ReadUInt64Data+0x183c>
    cfe4:	ldr	r6, [sp, #16]
    cfe8:	mul	r0, r9, r6
    cfec:	sub	sp, fp, #28
    cff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cff4:	sub	r0, r7, #256	; 0x100
    cff8:	add	r1, sl, #2048	; 0x800
    cffc:	add	r4, sp, #120	; 0x78
    d000:	mov	r9, #0
    d004:	str	r7, [sp, #4]
    d008:	str	r0, [sp, #12]
    d00c:	mov	r0, #0
    d010:	mov	r8, r0
    d014:	ldr	r0, [sp, #20]
    d018:	mov	r5, r1
    d01c:	mov	r1, r6
    d020:	mov	r2, #256	; 0x100
    d024:	ldr	r3, [r0]
    d028:	mov	r0, r4
    d02c:	bl	18b8 <fread@plt>
    d030:	mov	r7, r0
    d034:	mov	r6, #0
    d038:	add	r0, r4, r6
    d03c:	vldr	d16, [r0]
    d040:	vmov	r0, r1, d16
    d044:	bl	5f3e0 <__aeabi_d2ulz>
    d048:	mov	r2, sl
    d04c:	str	r0, [r2, r6]!
    d050:	add	r6, r6, #8
    d054:	cmp	r6, #2048	; 0x800
    d058:	str	r1, [r2, #4]
    d05c:	bne	d038 <ReadUInt64Data+0x18a8>
    d060:	ldr	r2, [sp, #12]
    d064:	ldr	r6, [sp, #16]
    d068:	add	r0, r8, #256	; 0x100
    d06c:	add	r9, r7, r9
    d070:	add	sl, sl, #2048	; 0x800
    d074:	add	r1, r5, #2048	; 0x800
    d078:	cmp	r0, r2
    d07c:	blt	d010 <ReadUInt64Data+0x1880>
    d080:	ldr	r2, [sp, #4]
    d084:	cmp	r0, r2
    d088:	bge	d4bc <ReadUInt64Data+0x1d2c>
    d08c:	mov	r1, r6
    d090:	sub	r6, r2, r0
    d094:	ldr	r0, [sp, #20]
    d098:	add	r4, sp, #120	; 0x78
    d09c:	mov	r2, r6
    d0a0:	ldr	r3, [r0]
    d0a4:	mov	r0, r4
    d0a8:	bl	18b8 <fread@plt>
    d0ac:	add	r9, r0, r9
    d0b0:	cmp	r6, #1
    d0b4:	blt	d0e0 <ReadUInt64Data+0x1950>
    d0b8:	ldr	r0, [sp, #12]
    d0bc:	sub	r6, r0, r8
    d0c0:	vldr	d16, [r4]
    d0c4:	vmov	r0, r1, d16
    d0c8:	bl	5f3e0 <__aeabi_d2ulz>
    d0cc:	strd	r0, [r5]
    d0d0:	add	r5, r5, #8
    d0d4:	subs	r6, r6, #1
    d0d8:	add	r4, r4, #8
    d0dc:	bne	d0c0 <ReadUInt64Data+0x1930>
    d0e0:	ldr	r6, [sp, #16]
    d0e4:	mul	r0, r9, r6
    d0e8:	sub	sp, fp, #28
    d0ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d0f0:	sub	r0, r7, #256	; 0x100
    d0f4:	lsl	r4, r7, #3
    d0f8:	mov	r5, #0
    d0fc:	mov	r9, #0
    d100:	str	r8, [sp]
    d104:	str	r7, [sp, #4]
    d108:	str	r0, [sp, #12]
    d10c:	ldr	r0, [sp, #20]
    d110:	add	r8, sp, #120	; 0x78
    d114:	mov	r1, r6
    d118:	mov	r2, #256	; 0x100
    d11c:	ldr	r3, [r0]
    d120:	mov	r0, r8
    d124:	bl	18b8 <fread@plt>
    d128:	mov	r7, r0
    d12c:	add	r0, sl, r5, lsl #3
    d130:	mov	r1, r8
    d134:	mov	r2, #2048	; 0x800
    d138:	bl	181c <memcpy@plt>
    d13c:	ldr	r0, [sp, #12]
    d140:	add	r5, r5, #256	; 0x100
    d144:	add	r9, r7, r9
    d148:	sub	r4, r4, #2048	; 0x800
    d14c:	cmp	r5, r0
    d150:	blt	d10c <ReadUInt64Data+0x197c>
    d154:	ldr	r7, [sp, #4]
    d158:	ldr	r8, [sp]
    d15c:	cmp	r5, r7
    d160:	bge	d1b4 <ReadUInt64Data+0x1a24>
    d164:	ldr	r0, [sp, #20]
    d168:	ldr	r6, [sp, #16]
    d16c:	sub	r7, r7, r5
    d170:	mov	r2, r7
    d174:	ldr	r3, [r0]
    d178:	add	r0, sp, #120	; 0x78
    d17c:	mov	r1, r6
    d180:	bl	18b8 <fread@plt>
    d184:	add	r9, r0, r9
    d188:	cmp	r7, #1
    d18c:	blt	d1a0 <ReadUInt64Data+0x1a10>
    d190:	add	r0, sl, r5, lsl #3
    d194:	add	r1, sp, #120	; 0x78
    d198:	mov	r2, r4
    d19c:	bl	181c <memcpy@plt>
    d1a0:	ldr	r7, [sp, #4]
    d1a4:	ldr	r4, [sp, #20]
    d1a8:	cmp	r8, #13
    d1ac:	beq	d1fc <ReadUInt64Data+0x1a6c>
    d1b0:	b	d4bc <ReadUInt64Data+0x1d2c>
    d1b4:	ldr	r6, [sp, #16]
    d1b8:	ldr	r4, [sp, #20]
    d1bc:	cmp	r8, #13
    d1c0:	beq	d1fc <ReadUInt64Data+0x1a6c>
    d1c4:	b	d4bc <ReadUInt64Data+0x1d2c>
    d1c8:	mov	r9, r8
    d1cc:	mul	r0, r9, r6
    d1d0:	sub	sp, fp, #28
    d1d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d1d8:	mov	r9, r8
    d1dc:	mul	r0, r9, r6
    d1e0:	sub	sp, fp, #28
    d1e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d1e8:	ldr	r6, [sp, #16]
    d1ec:	ldr	r4, [sp, #20]
    d1f0:	ldr	r8, [sp]
    d1f4:	cmp	r8, #13
    d1f8:	bne	d4bc <ReadUInt64Data+0x1d2c>
    d1fc:	ldr	r0, [r4, #20]
    d200:	cmp	r0, #0
    d204:	beq	d254 <ReadUInt64Data+0x1ac4>
    d208:	cmp	r7, #256	; 0x100
    d20c:	bgt	d28c <ReadUInt64Data+0x1afc>
    d210:	ldr	r3, [r4]
    d214:	add	r4, sp, #120	; 0x78
    d218:	mov	r1, r6
    d21c:	mov	r2, r7
    d220:	mov	r0, r4
    d224:	bl	18b8 <fread@plt>
    d228:	add	r9, r0, r9
    d22c:	cmp	r7, #1
    d230:	blt	d4bc <ReadUInt64Data+0x1d2c>
    d234:	mov	r0, r4
    d238:	bl	1bd4 <Mat_uint64Swap>
    d23c:	strd	r0, [sl]
    d240:	subs	r7, r7, #1
    d244:	add	sl, sl, #8
    d248:	add	r4, r4, #8
    d24c:	bne	d234 <ReadUInt64Data+0x1aa4>
    d250:	b	d4bc <ReadUInt64Data+0x1d2c>
    d254:	cmp	r7, #256	; 0x100
    d258:	bgt	d378 <ReadUInt64Data+0x1be8>
    d25c:	ldr	r3, [r4]
    d260:	add	r0, sp, #120	; 0x78
    d264:	mov	r1, r6
    d268:	mov	r2, r7
    d26c:	bl	18b8 <fread@plt>
    d270:	add	r9, r0, r9
    d274:	cmp	r7, #1
    d278:	blt	d4bc <ReadUInt64Data+0x1d2c>
    d27c:	lsl	r2, r7, #3
    d280:	add	r1, sp, #120	; 0x78
    d284:	mov	r0, sl
    d288:	b	d418 <ReadUInt64Data+0x1c88>
    d28c:	sub	r0, r7, #256	; 0x100
    d290:	add	r1, sl, #2048	; 0x800
    d294:	add	r4, sp, #120	; 0x78
    d298:	str	r7, [sp, #4]
    d29c:	str	r0, [sp, #12]
    d2a0:	mov	r0, #0
    d2a4:	mov	r8, r0
    d2a8:	ldr	r0, [sp, #20]
    d2ac:	mov	r5, r1
    d2b0:	mov	r1, r6
    d2b4:	mov	r2, #256	; 0x100
    d2b8:	ldr	r3, [r0]
    d2bc:	mov	r0, r4
    d2c0:	bl	18b8 <fread@plt>
    d2c4:	mov	r7, r0
    d2c8:	mov	r6, #0
    d2cc:	add	r0, r4, r6
    d2d0:	bl	1bd4 <Mat_uint64Swap>
    d2d4:	mov	r2, sl
    d2d8:	str	r0, [r2, r6]!
    d2dc:	add	r6, r6, #8
    d2e0:	cmp	r6, #2048	; 0x800
    d2e4:	str	r1, [r2, #4]
    d2e8:	bne	d2cc <ReadUInt64Data+0x1b3c>
    d2ec:	ldr	r2, [sp, #12]
    d2f0:	ldr	r6, [sp, #16]
    d2f4:	add	r0, r8, #256	; 0x100
    d2f8:	add	r9, r7, r9
    d2fc:	add	sl, sl, #2048	; 0x800
    d300:	add	r1, r5, #2048	; 0x800
    d304:	cmp	r0, r2
    d308:	blt	d2a4 <ReadUInt64Data+0x1b14>
    d30c:	ldr	r2, [sp, #4]
    d310:	cmp	r0, r2
    d314:	bge	d4bc <ReadUInt64Data+0x1d2c>
    d318:	mov	r1, r6
    d31c:	sub	r6, r2, r0
    d320:	ldr	r0, [sp, #20]
    d324:	add	r4, sp, #120	; 0x78
    d328:	mov	r2, r6
    d32c:	ldr	r3, [r0]
    d330:	mov	r0, r4
    d334:	bl	18b8 <fread@plt>
    d338:	add	r9, r0, r9
    d33c:	cmp	r6, #1
    d340:	blt	d498 <ReadUInt64Data+0x1d08>
    d344:	ldr	r0, [sp, #12]
    d348:	sub	r6, r0, r8
    d34c:	mov	r0, r4
    d350:	bl	1bd4 <Mat_uint64Swap>
    d354:	strd	r0, [r5]
    d358:	add	r5, r5, #8
    d35c:	subs	r6, r6, #1
    d360:	add	r4, r4, #8
    d364:	bne	d34c <ReadUInt64Data+0x1bbc>
    d368:	ldr	r6, [sp, #16]
    d36c:	mul	r0, r9, r6
    d370:	sub	sp, fp, #28
    d374:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d378:	sub	r0, r7, #256	; 0x100
    d37c:	lsl	r4, r7, #3
    d380:	mov	r5, #0
    d384:	add	r8, sp, #120	; 0x78
    d388:	str	r7, [sp, #4]
    d38c:	str	r0, [sp, #12]
    d390:	ldr	r0, [sp, #20]
    d394:	mov	r1, r6
    d398:	mov	r2, #256	; 0x100
    d39c:	ldr	r3, [r0]
    d3a0:	mov	r0, r8
    d3a4:	bl	18b8 <fread@plt>
    d3a8:	mov	r7, r0
    d3ac:	add	r0, sl, r5, lsl #3
    d3b0:	mov	r1, r8
    d3b4:	mov	r2, #2048	; 0x800
    d3b8:	bl	181c <memcpy@plt>
    d3bc:	ldr	r0, [sp, #12]
    d3c0:	add	r5, r5, #256	; 0x100
    d3c4:	add	r9, r7, r9
    d3c8:	sub	r4, r4, #2048	; 0x800
    d3cc:	cmp	r5, r0
    d3d0:	blt	d390 <ReadUInt64Data+0x1c00>
    d3d4:	ldr	r0, [sp, #4]
    d3d8:	cmp	r5, r0
    d3dc:	bge	d448 <ReadUInt64Data+0x1cb8>
    d3e0:	sub	r7, r0, r5
    d3e4:	ldr	r0, [sp, #20]
    d3e8:	ldr	r6, [sp, #16]
    d3ec:	mov	r2, r7
    d3f0:	ldr	r3, [r0]
    d3f4:	add	r0, sp, #120	; 0x78
    d3f8:	mov	r1, r6
    d3fc:	bl	18b8 <fread@plt>
    d400:	add	r9, r0, r9
    d404:	cmp	r7, #1
    d408:	blt	d4bc <ReadUInt64Data+0x1d2c>
    d40c:	add	r0, sl, r5, lsl #3
    d410:	add	r1, sp, #120	; 0x78
    d414:	mov	r2, r4
    d418:	bl	181c <memcpy@plt>
    d41c:	mul	r0, r9, r6
    d420:	sub	sp, fp, #28
    d424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d428:	ldr	r6, [sp, #16]
    d42c:	mul	r0, r9, r6
    d430:	sub	sp, fp, #28
    d434:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d438:	ldr	r6, [sp, #16]
    d43c:	mul	r0, r9, r6
    d440:	sub	sp, fp, #28
    d444:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d448:	ldr	r6, [sp, #16]
    d44c:	mul	r0, r9, r6
    d450:	sub	sp, fp, #28
    d454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d458:	ldr	r6, [sp, #16]
    d45c:	mul	r0, r9, r6
    d460:	sub	sp, fp, #28
    d464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d468:	ldr	r6, [sp, #16]
    d46c:	mul	r0, r9, r6
    d470:	sub	sp, fp, #28
    d474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d478:	ldr	r6, [sp, #16]
    d47c:	mul	r0, r9, r6
    d480:	sub	sp, fp, #28
    d484:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d488:	ldr	r6, [sp, #16]
    d48c:	mul	r0, r9, r6
    d490:	sub	sp, fp, #28
    d494:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d498:	ldr	r6, [sp, #16]
    d49c:	mul	r0, r9, r6
    d4a0:	sub	sp, fp, #28
    d4a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d4a8:	ldr	r6, [sp, #16]
    d4ac:	mul	r0, r9, r6
    d4b0:	sub	sp, fp, #28
    d4b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d4b8:	ldr	r6, [sp, #16]
    d4bc:	mul	r0, r9, r6
    d4c0:	sub	sp, fp, #28
    d4c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d4c8 <ReadCompressedUInt64Data>:
    d4c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4cc:	add	fp, sp, #28
    d4d0:	sub	sp, sp, #12
    d4d4:	mov	r7, r0
    d4d8:	mov	r0, #0
    d4dc:	cmp	r1, #0
    d4e0:	beq	d4f4 <ReadCompressedUInt64Data+0x2c>
    d4e4:	cmp	r7, #0
    d4e8:	movne	r5, r2
    d4ec:	cmpne	r2, #0
    d4f0:	bne	d4fc <ReadCompressedUInt64Data+0x34>
    d4f4:	sub	sp, fp, #28
    d4f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d4fc:	ldr	sl, [fp, #8]
    d500:	mov	r0, r3
    d504:	mov	r4, r3
    d508:	mov	r6, r1
    d50c:	bl	1924 <Mat_SizeOf@plt>
    d510:	mov	r9, r0
    d514:	sub	r0, r4, #1
    d518:	cmp	r0, #12
    d51c:	bhi	da7c <ReadCompressedUInt64Data+0x5b4>
    d520:	add	r1, pc, #4
    d524:	ldr	r0, [r1, r0, lsl #2]
    d528:	add	pc, r1, r0
    d52c:	.word	0x00000034
    d530:	.word	0x00000074
    d534:	.word	0x000000c0
    d538:	.word	0x00000110
    d53c:	.word	0x00000160
    d540:	.word	0x000001b0
    d544:	.word	0x00000200
    d548:	.word	0x00000550
    d54c:	.word	0x00000254
    d550:	.word	0x00000550
    d554:	.word	0x00000550
    d558:	.word	0x000002a8
    d55c:	.word	0x000002f4
    d560:	cmp	sl, #1
    d564:	blt	da7c <ReadCompressedUInt64Data+0x5b4>
    d568:	mov	r8, sp
    d56c:	mov	r4, sl
    d570:	mov	r0, r7
    d574:	mov	r1, r6
    d578:	mov	r2, r8
    d57c:	mov	r3, r9
    d580:	bl	32fc <InflateData>
    d584:	ldrsb	r0, [sp]
    d588:	subs	r4, r4, #1
    d58c:	asr	r1, r0, #31
    d590:	strd	r0, [r5]
    d594:	add	r5, r5, #8
    d598:	bne	d570 <ReadCompressedUInt64Data+0xa8>
    d59c:	b	da7c <ReadCompressedUInt64Data+0x5b4>
    d5a0:	cmp	sl, #1
    d5a4:	blt	d5dc <ReadCompressedUInt64Data+0x114>
    d5a8:	ldr	r4, [fp, #8]
    d5ac:	mov	r8, sp
    d5b0:	mov	sl, #0
    d5b4:	mov	r0, r7
    d5b8:	mov	r1, r6
    d5bc:	mov	r2, r8
    d5c0:	mov	r3, r9
    d5c4:	bl	32fc <InflateData>
    d5c8:	ldrb	r0, [sp]
    d5cc:	subs	r4, r4, #1
    d5d0:	stm	r5, {r0, sl}
    d5d4:	add	r5, r5, #8
    d5d8:	bne	d5b4 <ReadCompressedUInt64Data+0xec>
    d5dc:	ldr	sl, [fp, #8]
    d5e0:	mul	r0, r9, sl
    d5e4:	sub	sp, fp, #28
    d5e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d5ec:	ldr	r0, [r7, #20]
    d5f0:	cmp	r0, #0
    d5f4:	beq	d86c <ReadCompressedUInt64Data+0x3a4>
    d5f8:	cmp	sl, #1
    d5fc:	blt	da7c <ReadCompressedUInt64Data+0x5b4>
    d600:	mov	r8, sp
    d604:	mov	r4, sl
    d608:	mov	r0, r7
    d60c:	mov	r1, r6
    d610:	mov	r2, r8
    d614:	mov	r3, r9
    d618:	bl	32fc <InflateData>
    d61c:	mov	r0, r8
    d620:	bl	1c18 <Mat_int16Swap>
    d624:	asr	r1, r0, #31
    d628:	subs	r4, r4, #1
    d62c:	strd	r0, [r5]
    d630:	add	r5, r5, #8
    d634:	bne	d608 <ReadCompressedUInt64Data+0x140>
    d638:	b	da7c <ReadCompressedUInt64Data+0x5b4>
    d63c:	ldr	r0, [r7, #20]
    d640:	cmp	r0, #0
    d644:	beq	d8ac <ReadCompressedUInt64Data+0x3e4>
    d648:	cmp	sl, #1
    d64c:	blt	d8e8 <ReadCompressedUInt64Data+0x420>
    d650:	ldr	r4, [fp, #8]
    d654:	mov	r8, sp
    d658:	mov	sl, #0
    d65c:	mov	r0, r7
    d660:	mov	r1, r6
    d664:	mov	r2, r8
    d668:	mov	r3, r9
    d66c:	bl	32fc <InflateData>
    d670:	mov	r0, r8
    d674:	bl	1c2c <Mat_uint16Swap>
    d678:	stm	r5, {r0, sl}
    d67c:	subs	r4, r4, #1
    d680:	add	r5, r5, #8
    d684:	bne	d65c <ReadCompressedUInt64Data+0x194>
    d688:	b	d8e8 <ReadCompressedUInt64Data+0x420>
    d68c:	ldr	r0, [r7, #20]
    d690:	cmp	r0, #0
    d694:	beq	d8f8 <ReadCompressedUInt64Data+0x430>
    d698:	cmp	sl, #1
    d69c:	blt	da7c <ReadCompressedUInt64Data+0x5b4>
    d6a0:	mov	r8, sp
    d6a4:	mov	r4, sl
    d6a8:	mov	r0, r7
    d6ac:	mov	r1, r6
    d6b0:	mov	r2, r8
    d6b4:	mov	r3, r9
    d6b8:	bl	32fc <InflateData>
    d6bc:	mov	r0, r8
    d6c0:	bl	1bf0 <Mat_int32Swap>
    d6c4:	asr	r1, r0, #31
    d6c8:	subs	r4, r4, #1
    d6cc:	strd	r0, [r5]
    d6d0:	add	r5, r5, #8
    d6d4:	bne	d6a8 <ReadCompressedUInt64Data+0x1e0>
    d6d8:	b	da7c <ReadCompressedUInt64Data+0x5b4>
    d6dc:	ldr	r0, [r7, #20]
    d6e0:	cmp	r0, #0
    d6e4:	beq	d938 <ReadCompressedUInt64Data+0x470>
    d6e8:	cmp	sl, #1
    d6ec:	blt	d974 <ReadCompressedUInt64Data+0x4ac>
    d6f0:	ldr	sl, [fp, #8]
    d6f4:	mov	r8, sp
    d6f8:	mov	r4, #0
    d6fc:	mov	r0, r7
    d700:	mov	r1, r6
    d704:	mov	r2, r8
    d708:	mov	r3, r9
    d70c:	bl	32fc <InflateData>
    d710:	mov	r0, r8
    d714:	bl	1c04 <Mat_uint32Swap>
    d718:	stm	r5, {r0, r4}
    d71c:	subs	sl, sl, #1
    d720:	add	r5, r5, #8
    d724:	bne	d6fc <ReadCompressedUInt64Data+0x234>
    d728:	b	d974 <ReadCompressedUInt64Data+0x4ac>
    d72c:	ldr	r0, [r7, #20]
    d730:	cmp	r0, #0
    d734:	beq	d984 <ReadCompressedUInt64Data+0x4bc>
    d738:	cmp	sl, #1
    d73c:	blt	da7c <ReadCompressedUInt64Data+0x5b4>
    d740:	mov	r8, sp
    d744:	mov	r4, sl
    d748:	mov	r0, r7
    d74c:	mov	r1, r6
    d750:	mov	r2, r8
    d754:	mov	r3, r9
    d758:	bl	32fc <InflateData>
    d75c:	mov	r0, r8
    d760:	bl	1c44 <Mat_floatSwap>
    d764:	vmov	r0, s0
    d768:	bl	5f3a0 <__aeabi_f2ulz>
    d76c:	strd	r0, [r5]
    d770:	subs	r4, r4, #1
    d774:	add	r5, r5, #8
    d778:	bne	d748 <ReadCompressedUInt64Data+0x280>
    d77c:	b	da7c <ReadCompressedUInt64Data+0x5b4>
    d780:	ldr	r0, [r7, #20]
    d784:	cmp	r0, #0
    d788:	beq	d9c4 <ReadCompressedUInt64Data+0x4fc>
    d78c:	cmp	sl, #1
    d790:	blt	da7c <ReadCompressedUInt64Data+0x5b4>
    d794:	mov	r8, sp
    d798:	mov	r4, sl
    d79c:	mov	r0, r7
    d7a0:	mov	r1, r6
    d7a4:	mov	r2, r8
    d7a8:	mov	r3, r9
    d7ac:	bl	32fc <InflateData>
    d7b0:	mov	r0, r8
    d7b4:	bl	1c88 <Mat_doubleSwap>
    d7b8:	vmov	r0, r1, d0
    d7bc:	bl	5f3e0 <__aeabi_d2ulz>
    d7c0:	strd	r0, [r5]
    d7c4:	subs	r4, r4, #1
    d7c8:	add	r5, r5, #8
    d7cc:	bne	d79c <ReadCompressedUInt64Data+0x2d4>
    d7d0:	b	da7c <ReadCompressedUInt64Data+0x5b4>
    d7d4:	ldr	r0, [r7, #20]
    d7d8:	cmp	r0, #0
    d7dc:	beq	da08 <ReadCompressedUInt64Data+0x540>
    d7e0:	cmp	sl, #1
    d7e4:	blt	da7c <ReadCompressedUInt64Data+0x5b4>
    d7e8:	mov	r8, sp
    d7ec:	mov	r4, sl
    d7f0:	mov	r0, r7
    d7f4:	mov	r1, r6
    d7f8:	mov	r2, r8
    d7fc:	mov	r3, r9
    d800:	bl	32fc <InflateData>
    d804:	mov	r0, r8
    d808:	bl	1b84 <Mat_int64Swap>
    d80c:	strd	r0, [r5]
    d810:	subs	r4, r4, #1
    d814:	add	r5, r5, #8
    d818:	bne	d7f0 <ReadCompressedUInt64Data+0x328>
    d81c:	b	da7c <ReadCompressedUInt64Data+0x5b4>
    d820:	ldr	r0, [r7, #20]
    d824:	cmp	r0, #0
    d828:	beq	da44 <ReadCompressedUInt64Data+0x57c>
    d82c:	cmp	sl, #1
    d830:	blt	da7c <ReadCompressedUInt64Data+0x5b4>
    d834:	mov	r8, sp
    d838:	mov	r4, sl
    d83c:	mov	r0, r7
    d840:	mov	r1, r6
    d844:	mov	r2, r8
    d848:	mov	r3, r9
    d84c:	bl	32fc <InflateData>
    d850:	mov	r0, r8
    d854:	bl	1bd4 <Mat_uint64Swap>
    d858:	strd	r0, [r5]
    d85c:	subs	r4, r4, #1
    d860:	add	r5, r5, #8
    d864:	bne	d83c <ReadCompressedUInt64Data+0x374>
    d868:	b	da7c <ReadCompressedUInt64Data+0x5b4>
    d86c:	cmp	sl, #1
    d870:	blt	da7c <ReadCompressedUInt64Data+0x5b4>
    d874:	mov	r8, sp
    d878:	mov	r4, sl
    d87c:	mov	r0, r7
    d880:	mov	r1, r6
    d884:	mov	r2, r8
    d888:	mov	r3, r9
    d88c:	bl	32fc <InflateData>
    d890:	ldrsh	r0, [sp]
    d894:	subs	r4, r4, #1
    d898:	asr	r1, r0, #31
    d89c:	strd	r0, [r5]
    d8a0:	add	r5, r5, #8
    d8a4:	bne	d87c <ReadCompressedUInt64Data+0x3b4>
    d8a8:	b	da7c <ReadCompressedUInt64Data+0x5b4>
    d8ac:	cmp	sl, #1
    d8b0:	blt	d8e8 <ReadCompressedUInt64Data+0x420>
    d8b4:	ldr	r4, [fp, #8]
    d8b8:	mov	r8, sp
    d8bc:	mov	sl, #0
    d8c0:	mov	r0, r7
    d8c4:	mov	r1, r6
    d8c8:	mov	r2, r8
    d8cc:	mov	r3, r9
    d8d0:	bl	32fc <InflateData>
    d8d4:	ldrh	r0, [sp]
    d8d8:	subs	r4, r4, #1
    d8dc:	stm	r5, {r0, sl}
    d8e0:	add	r5, r5, #8
    d8e4:	bne	d8c0 <ReadCompressedUInt64Data+0x3f8>
    d8e8:	ldr	sl, [fp, #8]
    d8ec:	mul	r0, r9, sl
    d8f0:	sub	sp, fp, #28
    d8f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8f8:	cmp	sl, #1
    d8fc:	blt	da7c <ReadCompressedUInt64Data+0x5b4>
    d900:	mov	r8, sp
    d904:	mov	r4, sl
    d908:	mov	r0, r7
    d90c:	mov	r1, r6
    d910:	mov	r2, r8
    d914:	mov	r3, r9
    d918:	bl	32fc <InflateData>
    d91c:	ldr	r0, [sp]
    d920:	subs	r4, r4, #1
    d924:	asr	r1, r0, #31
    d928:	strd	r0, [r5]
    d92c:	add	r5, r5, #8
    d930:	bne	d908 <ReadCompressedUInt64Data+0x440>
    d934:	b	da7c <ReadCompressedUInt64Data+0x5b4>
    d938:	cmp	sl, #1
    d93c:	blt	d974 <ReadCompressedUInt64Data+0x4ac>
    d940:	ldr	r4, [fp, #8]
    d944:	mov	r8, sp
    d948:	mov	sl, #0
    d94c:	mov	r0, r7
    d950:	mov	r1, r6
    d954:	mov	r2, r8
    d958:	mov	r3, r9
    d95c:	bl	32fc <InflateData>
    d960:	ldr	r0, [sp]
    d964:	subs	r4, r4, #1
    d968:	stm	r5, {r0, sl}
    d96c:	add	r5, r5, #8
    d970:	bne	d94c <ReadCompressedUInt64Data+0x484>
    d974:	ldr	sl, [fp, #8]
    d978:	mul	r0, r9, sl
    d97c:	sub	sp, fp, #28
    d980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d984:	cmp	sl, #1
    d988:	blt	da7c <ReadCompressedUInt64Data+0x5b4>
    d98c:	mov	r8, sp
    d990:	mov	r4, sl
    d994:	mov	r0, r7
    d998:	mov	r1, r6
    d99c:	mov	r2, r8
    d9a0:	mov	r3, r9
    d9a4:	bl	32fc <InflateData>
    d9a8:	ldr	r0, [sp]
    d9ac:	bl	5f3a0 <__aeabi_f2ulz>
    d9b0:	strd	r0, [r5]
    d9b4:	subs	r4, r4, #1
    d9b8:	add	r5, r5, #8
    d9bc:	bne	d994 <ReadCompressedUInt64Data+0x4cc>
    d9c0:	b	da7c <ReadCompressedUInt64Data+0x5b4>
    d9c4:	cmp	sl, #1
    d9c8:	blt	da7c <ReadCompressedUInt64Data+0x5b4>
    d9cc:	mov	r8, sp
    d9d0:	mov	r4, sl
    d9d4:	mov	r0, r7
    d9d8:	mov	r1, r6
    d9dc:	mov	r2, r8
    d9e0:	mov	r3, r9
    d9e4:	bl	32fc <InflateData>
    d9e8:	vldr	d16, [sp]
    d9ec:	vmov	r0, r1, d16
    d9f0:	bl	5f3e0 <__aeabi_d2ulz>
    d9f4:	strd	r0, [r5]
    d9f8:	subs	r4, r4, #1
    d9fc:	add	r5, r5, #8
    da00:	bne	d9d4 <ReadCompressedUInt64Data+0x50c>
    da04:	b	da7c <ReadCompressedUInt64Data+0x5b4>
    da08:	cmp	sl, #1
    da0c:	blt	da7c <ReadCompressedUInt64Data+0x5b4>
    da10:	mov	r8, sp
    da14:	mov	r4, sl
    da18:	mov	r0, r7
    da1c:	mov	r1, r6
    da20:	mov	r2, r8
    da24:	mov	r3, r9
    da28:	bl	32fc <InflateData>
    da2c:	ldm	sp, {r0, r1}
    da30:	subs	r4, r4, #1
    da34:	strd	r0, [r5]
    da38:	add	r5, r5, #8
    da3c:	bne	da18 <ReadCompressedUInt64Data+0x550>
    da40:	b	da7c <ReadCompressedUInt64Data+0x5b4>
    da44:	cmp	sl, #1
    da48:	blt	da7c <ReadCompressedUInt64Data+0x5b4>
    da4c:	mov	r8, sp
    da50:	mov	r4, sl
    da54:	mov	r0, r7
    da58:	mov	r1, r6
    da5c:	mov	r2, r8
    da60:	mov	r3, r9
    da64:	bl	32fc <InflateData>
    da68:	ldm	sp, {r0, r1}
    da6c:	subs	r4, r4, #1
    da70:	strd	r0, [r5]
    da74:	add	r5, r5, #8
    da78:	bne	da54 <ReadCompressedUInt64Data+0x58c>
    da7c:	mul	r0, r9, sl
    da80:	sub	sp, fp, #28
    da84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000da88 <ReadInt32Data>:
    da88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da8c:	add	fp, sp, #28
    da90:	sub	sp, sp, #324	; 0x144
    da94:	sub	sp, sp, #2048	; 0x800
    da98:	mov	sl, r0
    da9c:	mov	r0, #0
    daa0:	cmp	sl, #0
    daa4:	beq	dabc <ReadInt32Data+0x34>
    daa8:	cmp	r1, #0
    daac:	mov	r8, r1
    dab0:	ldrne	r1, [sl]
    dab4:	cmpne	r1, #0
    dab8:	bne	dac4 <ReadInt32Data+0x3c>
    dabc:	sub	sp, fp, #28
    dac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dac4:	mov	r0, r2
    dac8:	mov	r7, r3
    dacc:	mov	r5, r2
    dad0:	bl	1924 <Mat_SizeOf@plt>
    dad4:	sub	r2, r5, #1
    dad8:	mov	r6, r0
    dadc:	mov	r0, #0
    dae0:	cmp	r2, #11
    dae4:	str	r6, [sp, #264]	; 0x108
    dae8:	bhi	10324 <ReadInt32Data+0x289c>
    daec:	add	r1, pc, #4
    daf0:	ldr	r2, [r1, r2, lsl #2]
    daf4:	add	pc, r1, r2
    daf8:	.word	0x00000030
    dafc:	.word	0x000000bc
    db00:	.word	0x00000148
    db04:	.word	0x0000019c
    db08:	.word	0x000001f0
    db0c:	.word	0x00000244
    db10:	.word	0x00000298
    db14:	.word	0x0000282c
    db18:	.word	0x000002f4
    db1c:	.word	0x0000282c
    db20:	.word	0x0000282c
    db24:	.word	0x00000350
    db28:	cmp	r7, #256	; 0x100
    db2c:	bgt	decc <ReadInt32Data+0x444>
    db30:	ldr	r3, [sl]
    db34:	add	r4, sp, #320	; 0x140
    db38:	mov	r1, r6
    db3c:	mov	r2, r7
    db40:	mov	r0, r4
    db44:	bl	18b8 <fread@plt>
    db48:	mov	r5, r0
    db4c:	cmp	r7, #1
    db50:	blt	10618 <ReadInt32Data+0x2b90>
    db54:	mov	r0, #0
    db58:	cmp	r7, #4
    db5c:	bcc	db90 <ReadInt32Data+0x108>
    db60:	bic	r0, r7, #3
    db64:	mov	r2, r8
    db68:	mov	r1, r0
    db6c:	vld1.32	{d16[0]}, [r4 :32]
    db70:	subs	r1, r1, #4
    db74:	add	r4, r4, #4
    db78:	vmovl.s8	q8, d16
    db7c:	vmovl.s16	q8, d16
    db80:	vst1.32	{d16-d17}, [r2]!
    db84:	bne	db6c <ReadInt32Data+0xe4>
    db88:	cmp	r0, r7
    db8c:	beq	10618 <ReadInt32Data+0x2b90>
    db90:	add	r3, sp, #320	; 0x140
    db94:	sub	r1, r7, r0
    db98:	add	r2, r8, r0, lsl #2
    db9c:	add	r0, r3, r0
    dba0:	ldrsb	r3, [r0], #1
    dba4:	subs	r1, r1, #1
    dba8:	str	r3, [r2], #4
    dbac:	bne	dba0 <ReadInt32Data+0x118>
    dbb0:	b	10618 <ReadInt32Data+0x2b90>
    dbb4:	cmp	r7, #256	; 0x100
    dbb8:	bgt	e7b8 <ReadInt32Data+0xd30>
    dbbc:	ldr	r3, [sl]
    dbc0:	add	r4, sp, #320	; 0x140
    dbc4:	mov	r1, r6
    dbc8:	mov	r2, r7
    dbcc:	mov	r0, r4
    dbd0:	bl	18b8 <fread@plt>
    dbd4:	mov	r5, r0
    dbd8:	cmp	r7, #1
    dbdc:	blt	10618 <ReadInt32Data+0x2b90>
    dbe0:	mov	r0, #0
    dbe4:	cmp	r7, #4
    dbe8:	bcc	dc1c <ReadInt32Data+0x194>
    dbec:	bic	r0, r7, #3
    dbf0:	mov	r2, r8
    dbf4:	mov	r1, r0
    dbf8:	vld1.32	{d16[0]}, [r4 :32]
    dbfc:	subs	r1, r1, #4
    dc00:	add	r4, r4, #4
    dc04:	vmovl.u8	q8, d16
    dc08:	vmovl.u16	q8, d16
    dc0c:	vst1.32	{d16-d17}, [r2]!
    dc10:	bne	dbf8 <ReadInt32Data+0x170>
    dc14:	cmp	r0, r7
    dc18:	beq	10618 <ReadInt32Data+0x2b90>
    dc1c:	add	r3, sp, #320	; 0x140
    dc20:	sub	r1, r7, r0
    dc24:	add	r2, r8, r0, lsl #2
    dc28:	add	r0, r3, r0
    dc2c:	ldrb	r3, [r0], #1
    dc30:	subs	r1, r1, #1
    dc34:	str	r3, [r2], #4
    dc38:	bne	dc2c <ReadInt32Data+0x1a4>
    dc3c:	b	10618 <ReadInt32Data+0x2b90>
    dc40:	ldr	r0, [sl, #20]
    dc44:	cmp	r0, #0
    dc48:	beq	f0a4 <ReadInt32Data+0x161c>
    dc4c:	cmp	r7, #256	; 0x100
    dc50:	bgt	f4a4 <ReadInt32Data+0x1a1c>
    dc54:	ldr	r3, [sl]
    dc58:	add	r4, sp, #320	; 0x140
    dc5c:	mov	r1, r6
    dc60:	mov	r2, r7
    dc64:	mov	r0, r4
    dc68:	bl	18b8 <fread@plt>
    dc6c:	mov	r5, r0
    dc70:	cmp	r7, #1
    dc74:	blt	10618 <ReadInt32Data+0x2b90>
    dc78:	mov	r0, r4
    dc7c:	bl	1c18 <Mat_int16Swap>
    dc80:	str	r0, [r8], #4
    dc84:	subs	r7, r7, #1
    dc88:	add	r4, r4, #2
    dc8c:	bne	dc78 <ReadInt32Data+0x1f0>
    dc90:	b	10618 <ReadInt32Data+0x2b90>
    dc94:	ldr	r0, [sl, #20]
    dc98:	cmp	r0, #0
    dc9c:	beq	f14c <ReadInt32Data+0x16c4>
    dca0:	cmp	r7, #256	; 0x100
    dca4:	bgt	f580 <ReadInt32Data+0x1af8>
    dca8:	ldr	r3, [sl]
    dcac:	add	r4, sp, #320	; 0x140
    dcb0:	mov	r1, r6
    dcb4:	mov	r2, r7
    dcb8:	mov	r0, r4
    dcbc:	bl	18b8 <fread@plt>
    dcc0:	mov	r5, r0
    dcc4:	cmp	r7, #1
    dcc8:	blt	10618 <ReadInt32Data+0x2b90>
    dccc:	mov	r0, r4
    dcd0:	bl	1c2c <Mat_uint16Swap>
    dcd4:	str	r0, [r8], #4
    dcd8:	subs	r7, r7, #1
    dcdc:	add	r4, r4, #2
    dce0:	bne	dccc <ReadInt32Data+0x244>
    dce4:	b	10618 <ReadInt32Data+0x2b90>
    dce8:	ldr	r0, [sl, #20]
    dcec:	cmp	r0, #0
    dcf0:	beq	f1f4 <ReadInt32Data+0x176c>
    dcf4:	cmp	r7, #256	; 0x100
    dcf8:	bgt	f65c <ReadInt32Data+0x1bd4>
    dcfc:	ldr	r3, [sl]
    dd00:	add	r4, sp, #320	; 0x140
    dd04:	mov	r1, r6
    dd08:	mov	r2, r7
    dd0c:	mov	r0, r4
    dd10:	bl	18b8 <fread@plt>
    dd14:	mov	r5, r0
    dd18:	cmp	r7, #1
    dd1c:	blt	10618 <ReadInt32Data+0x2b90>
    dd20:	mov	r0, r4
    dd24:	bl	1bf0 <Mat_int32Swap>
    dd28:	str	r0, [r8], #4
    dd2c:	subs	r7, r7, #1
    dd30:	add	r4, r4, #4
    dd34:	bne	dd20 <ReadInt32Data+0x298>
    dd38:	b	10618 <ReadInt32Data+0x2b90>
    dd3c:	ldr	r0, [sl, #20]
    dd40:	cmp	r0, #0
    dd44:	beq	f2b4 <ReadInt32Data+0x182c>
    dd48:	cmp	r7, #256	; 0x100
    dd4c:	bgt	f738 <ReadInt32Data+0x1cb0>
    dd50:	ldr	r3, [sl]
    dd54:	add	r4, sp, #320	; 0x140
    dd58:	mov	r1, r6
    dd5c:	mov	r2, r7
    dd60:	mov	r0, r4
    dd64:	bl	18b8 <fread@plt>
    dd68:	mov	r5, r0
    dd6c:	cmp	r7, #1
    dd70:	blt	10618 <ReadInt32Data+0x2b90>
    dd74:	mov	r0, r4
    dd78:	bl	1c04 <Mat_uint32Swap>
    dd7c:	str	r0, [r8], #4
    dd80:	subs	r7, r7, #1
    dd84:	add	r4, r4, #4
    dd88:	bne	dd74 <ReadInt32Data+0x2ec>
    dd8c:	b	10618 <ReadInt32Data+0x2b90>
    dd90:	ldr	r0, [sl, #20]
    dd94:	cmp	r0, #0
    dd98:	beq	f2f8 <ReadInt32Data+0x1870>
    dd9c:	cmp	r7, #256	; 0x100
    dda0:	bgt	f814 <ReadInt32Data+0x1d8c>
    dda4:	ldr	r3, [sl]
    dda8:	add	r4, sp, #320	; 0x140
    ddac:	mov	r1, r6
    ddb0:	mov	r2, r7
    ddb4:	mov	r0, r4
    ddb8:	bl	18b8 <fread@plt>
    ddbc:	mov	r5, r0
    ddc0:	cmp	r7, #1
    ddc4:	blt	10618 <ReadInt32Data+0x2b90>
    ddc8:	mov	r0, r4
    ddcc:	bl	1c44 <Mat_floatSwap>
    ddd0:	vcvt.s32.f32	s0, s0
    ddd4:	subs	r7, r7, #1
    ddd8:	add	r4, r4, #4
    dddc:	vmov	r0, s0
    dde0:	str	r0, [r8], #4
    dde4:	bne	ddc8 <ReadInt32Data+0x340>
    dde8:	b	10618 <ReadInt32Data+0x2b90>
    ddec:	ldr	r0, [sl, #20]
    ddf0:	cmp	r0, #0
    ddf4:	beq	f388 <ReadInt32Data+0x1900>
    ddf8:	cmp	r7, #256	; 0x100
    ddfc:	bgt	f900 <ReadInt32Data+0x1e78>
    de00:	ldr	r3, [sl]
    de04:	add	r4, sp, #320	; 0x140
    de08:	mov	r1, r6
    de0c:	mov	r2, r7
    de10:	mov	r0, r4
    de14:	bl	18b8 <fread@plt>
    de18:	mov	r5, r0
    de1c:	cmp	r7, #1
    de20:	blt	10618 <ReadInt32Data+0x2b90>
    de24:	mov	r0, r4
    de28:	bl	1c88 <Mat_doubleSwap>
    de2c:	vcvt.s32.f64	s0, d0
    de30:	subs	r7, r7, #1
    de34:	add	r4, r4, #8
    de38:	vmov	r0, s0
    de3c:	str	r0, [r8], #4
    de40:	bne	de24 <ReadInt32Data+0x39c>
    de44:	b	10618 <ReadInt32Data+0x2b90>
    de48:	ldr	r0, [sl, #20]
    de4c:	cmp	r0, #0
    de50:	beq	f428 <ReadInt32Data+0x19a0>
    de54:	cmp	r7, #256	; 0x100
    de58:	bgt	f9f0 <ReadInt32Data+0x1f68>
    de5c:	ldr	r3, [sl]
    de60:	add	r4, sp, #320	; 0x140
    de64:	mov	r1, r6
    de68:	mov	r2, r7
    de6c:	mov	r0, r4
    de70:	bl	18b8 <fread@plt>
    de74:	mov	r9, r0
    de78:	cmp	r7, #1
    de7c:	blt	102e4 <ReadInt32Data+0x285c>
    de80:	str	r5, [sp, #252]	; 0xfc
    de84:	mov	r5, r7
    de88:	mov	r6, r8
    de8c:	mov	r0, r7
    de90:	mov	r0, r4
    de94:	bl	1b84 <Mat_int64Swap>
    de98:	str	r0, [r6], #4
    de9c:	subs	r5, r5, #1
    dea0:	add	r4, r4, #8
    dea4:	bne	de90 <ReadInt32Data+0x408>
    dea8:	ldr	r6, [sp, #264]	; 0x108
    deac:	ldr	r5, [sp, #252]	; 0xfc
    deb0:	mov	r0, r9
    deb4:	cmp	r5, #13
    deb8:	beq	1032c <ReadInt32Data+0x28a4>
    debc:	mov	r5, r0
    dec0:	mul	r0, r5, r6
    dec4:	sub	sp, fp, #28
    dec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    decc:	mov	r0, r7
    ded0:	add	r7, sp, #320	; 0x140
    ded4:	str	sl, [sp, #268]	; 0x10c
    ded8:	mov	sl, #0
    dedc:	mov	r4, r8
    dee0:	mov	r5, #0
    dee4:	mov	r9, r8
    dee8:	add	r1, r7, #252	; 0xfc
    deec:	str	r0, [sp, #4]
    def0:	sub	r0, r0, #256	; 0x100
    def4:	str	r1, [sp, #260]	; 0x104
    def8:	add	r1, r7, #248	; 0xf8
    defc:	str	r0, [sp, #8]
    df00:	str	r1, [sp, #256]	; 0x100
    df04:	add	r1, r7, #244	; 0xf4
    df08:	str	r1, [sp, #252]	; 0xfc
    df0c:	add	r1, r7, #240	; 0xf0
    df10:	str	r1, [sp, #248]	; 0xf8
    df14:	add	r1, r7, #236	; 0xec
    df18:	str	r1, [sp, #244]	; 0xf4
    df1c:	add	r1, r7, #232	; 0xe8
    df20:	str	r1, [sp, #240]	; 0xf0
    df24:	add	r1, r7, #228	; 0xe4
    df28:	str	r1, [sp, #236]	; 0xec
    df2c:	add	r1, r7, #224	; 0xe0
    df30:	str	r1, [sp, #232]	; 0xe8
    df34:	add	r1, r7, #220	; 0xdc
    df38:	str	r1, [sp, #228]	; 0xe4
    df3c:	add	r1, r7, #216	; 0xd8
    df40:	str	r1, [sp, #224]	; 0xe0
    df44:	add	r1, r7, #212	; 0xd4
    df48:	str	r1, [sp, #220]	; 0xdc
    df4c:	add	r1, r7, #208	; 0xd0
    df50:	str	r1, [sp, #216]	; 0xd8
    df54:	add	r1, r7, #204	; 0xcc
    df58:	str	r1, [sp, #212]	; 0xd4
    df5c:	add	r1, r7, #200	; 0xc8
    df60:	str	r1, [sp, #208]	; 0xd0
    df64:	add	r1, r7, #196	; 0xc4
    df68:	str	r1, [sp, #204]	; 0xcc
    df6c:	add	r1, r7, #192	; 0xc0
    df70:	str	r1, [sp, #200]	; 0xc8
    df74:	add	r1, r7, #188	; 0xbc
    df78:	str	r1, [sp, #196]	; 0xc4
    df7c:	add	r1, r7, #184	; 0xb8
    df80:	str	r1, [sp, #192]	; 0xc0
    df84:	add	r1, r7, #180	; 0xb4
    df88:	str	r1, [sp, #188]	; 0xbc
    df8c:	add	r1, r7, #176	; 0xb0
    df90:	str	r1, [sp, #184]	; 0xb8
    df94:	add	r1, r7, #172	; 0xac
    df98:	str	r1, [sp, #180]	; 0xb4
    df9c:	add	r1, r7, #168	; 0xa8
    dfa0:	str	r1, [sp, #176]	; 0xb0
    dfa4:	add	r1, r7, #164	; 0xa4
    dfa8:	str	r1, [sp, #172]	; 0xac
    dfac:	add	r1, r7, #160	; 0xa0
    dfb0:	str	r1, [sp, #168]	; 0xa8
    dfb4:	add	r1, r7, #156	; 0x9c
    dfb8:	str	r1, [sp, #164]	; 0xa4
    dfbc:	add	r1, r7, #152	; 0x98
    dfc0:	str	r1, [sp, #160]	; 0xa0
    dfc4:	add	r1, r7, #148	; 0x94
    dfc8:	str	r1, [sp, #156]	; 0x9c
    dfcc:	add	r1, r7, #144	; 0x90
    dfd0:	str	r1, [sp, #152]	; 0x98
    dfd4:	add	r1, r7, #140	; 0x8c
    dfd8:	str	r1, [sp, #148]	; 0x94
    dfdc:	add	r1, r7, #136	; 0x88
    dfe0:	str	r1, [sp, #144]	; 0x90
    dfe4:	add	r1, r7, #132	; 0x84
    dfe8:	str	r1, [sp, #140]	; 0x8c
    dfec:	add	r1, r7, #128	; 0x80
    dff0:	str	r1, [sp, #136]	; 0x88
    dff4:	add	r1, r7, #124	; 0x7c
    dff8:	str	r1, [sp, #132]	; 0x84
    dffc:	add	r1, r7, #120	; 0x78
    e000:	str	r1, [sp, #128]	; 0x80
    e004:	add	r1, r7, #116	; 0x74
    e008:	str	r1, [sp, #124]	; 0x7c
    e00c:	add	r1, r7, #112	; 0x70
    e010:	str	r1, [sp, #120]	; 0x78
    e014:	add	r1, r7, #108	; 0x6c
    e018:	str	r1, [sp, #116]	; 0x74
    e01c:	add	r1, r7, #104	; 0x68
    e020:	str	r1, [sp, #112]	; 0x70
    e024:	add	r1, r7, #100	; 0x64
    e028:	str	r1, [sp, #108]	; 0x6c
    e02c:	add	r1, r7, #96	; 0x60
    e030:	str	r1, [sp, #104]	; 0x68
    e034:	add	r1, r7, #92	; 0x5c
    e038:	str	r1, [sp, #100]	; 0x64
    e03c:	add	r1, r7, #88	; 0x58
    e040:	str	r1, [sp, #96]	; 0x60
    e044:	add	r1, r7, #84	; 0x54
    e048:	str	r1, [sp, #92]	; 0x5c
    e04c:	add	r1, r7, #80	; 0x50
    e050:	str	r1, [sp, #88]	; 0x58
    e054:	add	r1, r7, #76	; 0x4c
    e058:	str	r1, [sp, #84]	; 0x54
    e05c:	add	r1, r7, #72	; 0x48
    e060:	str	r1, [sp, #80]	; 0x50
    e064:	add	r1, r7, #68	; 0x44
    e068:	str	r1, [sp, #76]	; 0x4c
    e06c:	add	r1, r7, #64	; 0x40
    e070:	str	r1, [sp, #72]	; 0x48
    e074:	add	r1, r7, #60	; 0x3c
    e078:	str	r1, [sp, #68]	; 0x44
    e07c:	add	r1, r7, #56	; 0x38
    e080:	str	r1, [sp, #64]	; 0x40
    e084:	add	r1, r7, #52	; 0x34
    e088:	str	r1, [sp, #60]	; 0x3c
    e08c:	add	r1, r7, #48	; 0x30
    e090:	str	r1, [sp, #56]	; 0x38
    e094:	add	r1, r7, #44	; 0x2c
    e098:	str	r1, [sp, #52]	; 0x34
    e09c:	add	r1, r7, #40	; 0x28
    e0a0:	str	r1, [sp, #48]	; 0x30
    e0a4:	add	r1, r7, #36	; 0x24
    e0a8:	str	r1, [sp, #44]	; 0x2c
    e0ac:	add	r1, r7, #32
    e0b0:	str	r1, [sp, #40]	; 0x28
    e0b4:	add	r1, r7, #28
    e0b8:	str	r1, [sp, #36]	; 0x24
    e0bc:	add	r1, r7, #24
    e0c0:	str	r1, [sp, #32]
    e0c4:	add	r1, r7, #20
    e0c8:	str	r1, [sp, #28]
    e0cc:	add	r1, r7, #16
    e0d0:	str	r1, [sp, #24]
    e0d4:	add	r1, r7, #12
    e0d8:	str	r1, [sp, #20]
    e0dc:	add	r1, r7, #8
    e0e0:	str	r1, [sp, #16]
    e0e4:	add	r1, r7, #4
    e0e8:	str	r1, [sp, #12]
    e0ec:	ldr	r0, [sp, #268]	; 0x10c
    e0f0:	mov	r1, r6
    e0f4:	mov	r2, #256	; 0x100
    e0f8:	ldr	r3, [r0]
    e0fc:	mov	r0, r7
    e100:	bl	18b8 <fread@plt>
    e104:	vld1.32	{d16[0]}, [r7 :32]
    e108:	mov	r1, #1024	; 0x400
    e10c:	add	r5, r0, r5
    e110:	ldr	r0, [sp, #8]
    e114:	add	sl, sl, #256	; 0x100
    e118:	vmovl.s8	q8, d16
    e11c:	cmp	sl, r0
    e120:	vmovl.s16	q8, d16
    e124:	vst1.32	{d16-d17}, [r9], r1
    e128:	ldr	r1, [sp, #12]
    e12c:	vld1.32	{d16[0]}, [r1 :32]
    e130:	add	r1, r4, #16
    e134:	vmovl.s8	q8, d16
    e138:	vmovl.s16	q8, d16
    e13c:	vst1.32	{d16-d17}, [r1]
    e140:	ldr	r1, [sp, #16]
    e144:	vld1.32	{d16[0]}, [r1 :32]
    e148:	add	r1, r4, #32
    e14c:	vmovl.s8	q8, d16
    e150:	vmovl.s16	q8, d16
    e154:	vst1.32	{d16-d17}, [r1]
    e158:	ldr	r1, [sp, #20]
    e15c:	vld1.32	{d16[0]}, [r1 :32]
    e160:	add	r1, r4, #48	; 0x30
    e164:	vmovl.s8	q8, d16
    e168:	vmovl.s16	q8, d16
    e16c:	vst1.32	{d16-d17}, [r1]
    e170:	ldr	r1, [sp, #24]
    e174:	vld1.32	{d16[0]}, [r1 :32]
    e178:	add	r1, r4, #64	; 0x40
    e17c:	vmovl.s8	q8, d16
    e180:	vmovl.s16	q8, d16
    e184:	vst1.32	{d16-d17}, [r1]
    e188:	ldr	r1, [sp, #28]
    e18c:	vld1.32	{d16[0]}, [r1 :32]
    e190:	add	r1, r4, #80	; 0x50
    e194:	vmovl.s8	q8, d16
    e198:	vmovl.s16	q8, d16
    e19c:	vst1.32	{d16-d17}, [r1]
    e1a0:	ldr	r1, [sp, #32]
    e1a4:	vld1.32	{d16[0]}, [r1 :32]
    e1a8:	add	r1, r4, #96	; 0x60
    e1ac:	vmovl.s8	q8, d16
    e1b0:	vmovl.s16	q8, d16
    e1b4:	vst1.32	{d16-d17}, [r1]
    e1b8:	ldr	r1, [sp, #36]	; 0x24
    e1bc:	vld1.32	{d16[0]}, [r1 :32]
    e1c0:	add	r1, r4, #112	; 0x70
    e1c4:	vmovl.s8	q8, d16
    e1c8:	vmovl.s16	q8, d16
    e1cc:	vst1.32	{d16-d17}, [r1]
    e1d0:	ldr	r1, [sp, #40]	; 0x28
    e1d4:	vld1.32	{d16[0]}, [r1 :32]
    e1d8:	add	r1, r4, #128	; 0x80
    e1dc:	vmovl.s8	q8, d16
    e1e0:	vmovl.s16	q8, d16
    e1e4:	vst1.32	{d16-d17}, [r1]
    e1e8:	ldr	r1, [sp, #44]	; 0x2c
    e1ec:	vld1.32	{d16[0]}, [r1 :32]
    e1f0:	add	r1, r4, #144	; 0x90
    e1f4:	vmovl.s8	q8, d16
    e1f8:	vmovl.s16	q8, d16
    e1fc:	vst1.32	{d16-d17}, [r1]
    e200:	ldr	r1, [sp, #48]	; 0x30
    e204:	vld1.32	{d16[0]}, [r1 :32]
    e208:	add	r1, r4, #160	; 0xa0
    e20c:	vmovl.s8	q8, d16
    e210:	vmovl.s16	q8, d16
    e214:	vst1.32	{d16-d17}, [r1]
    e218:	ldr	r1, [sp, #52]	; 0x34
    e21c:	vld1.32	{d16[0]}, [r1 :32]
    e220:	add	r1, r4, #176	; 0xb0
    e224:	vmovl.s8	q8, d16
    e228:	vmovl.s16	q8, d16
    e22c:	vst1.32	{d16-d17}, [r1]
    e230:	ldr	r1, [sp, #56]	; 0x38
    e234:	vld1.32	{d16[0]}, [r1 :32]
    e238:	add	r1, r4, #192	; 0xc0
    e23c:	vmovl.s8	q8, d16
    e240:	vmovl.s16	q8, d16
    e244:	vst1.32	{d16-d17}, [r1]
    e248:	ldr	r1, [sp, #60]	; 0x3c
    e24c:	vld1.32	{d16[0]}, [r1 :32]
    e250:	add	r1, r4, #208	; 0xd0
    e254:	vmovl.s8	q8, d16
    e258:	vmovl.s16	q8, d16
    e25c:	vst1.32	{d16-d17}, [r1]
    e260:	ldr	r1, [sp, #64]	; 0x40
    e264:	vld1.32	{d16[0]}, [r1 :32]
    e268:	add	r1, r4, #224	; 0xe0
    e26c:	vmovl.s8	q8, d16
    e270:	vmovl.s16	q8, d16
    e274:	vst1.32	{d16-d17}, [r1]
    e278:	ldr	r1, [sp, #68]	; 0x44
    e27c:	vld1.32	{d16[0]}, [r1 :32]
    e280:	add	r1, r4, #240	; 0xf0
    e284:	vmovl.s8	q8, d16
    e288:	vmovl.s16	q8, d16
    e28c:	vst1.32	{d16-d17}, [r1]
    e290:	ldr	r1, [sp, #72]	; 0x48
    e294:	vld1.32	{d16[0]}, [r1 :32]
    e298:	add	r1, r4, #256	; 0x100
    e29c:	vmovl.s8	q8, d16
    e2a0:	vmovl.s16	q8, d16
    e2a4:	vst1.32	{d16-d17}, [r1]
    e2a8:	ldr	r1, [sp, #76]	; 0x4c
    e2ac:	vld1.32	{d16[0]}, [r1 :32]
    e2b0:	add	r1, r4, #272	; 0x110
    e2b4:	vmovl.s8	q8, d16
    e2b8:	vmovl.s16	q8, d16
    e2bc:	vst1.32	{d16-d17}, [r1]
    e2c0:	ldr	r1, [sp, #80]	; 0x50
    e2c4:	vld1.32	{d16[0]}, [r1 :32]
    e2c8:	add	r1, r4, #288	; 0x120
    e2cc:	vmovl.s8	q8, d16
    e2d0:	vmovl.s16	q8, d16
    e2d4:	vst1.32	{d16-d17}, [r1]
    e2d8:	ldr	r1, [sp, #84]	; 0x54
    e2dc:	vld1.32	{d16[0]}, [r1 :32]
    e2e0:	add	r1, r4, #304	; 0x130
    e2e4:	vmovl.s8	q8, d16
    e2e8:	vmovl.s16	q8, d16
    e2ec:	vst1.32	{d16-d17}, [r1]
    e2f0:	ldr	r1, [sp, #88]	; 0x58
    e2f4:	vld1.32	{d16[0]}, [r1 :32]
    e2f8:	add	r1, r4, #320	; 0x140
    e2fc:	vmovl.s8	q8, d16
    e300:	vmovl.s16	q8, d16
    e304:	vst1.32	{d16-d17}, [r1]
    e308:	ldr	r1, [sp, #92]	; 0x5c
    e30c:	vld1.32	{d16[0]}, [r1 :32]
    e310:	add	r1, r4, #336	; 0x150
    e314:	vmovl.s8	q8, d16
    e318:	vmovl.s16	q8, d16
    e31c:	vst1.32	{d16-d17}, [r1]
    e320:	ldr	r1, [sp, #96]	; 0x60
    e324:	vld1.32	{d16[0]}, [r1 :32]
    e328:	add	r1, r4, #352	; 0x160
    e32c:	vmovl.s8	q8, d16
    e330:	vmovl.s16	q8, d16
    e334:	vst1.32	{d16-d17}, [r1]
    e338:	ldr	r1, [sp, #100]	; 0x64
    e33c:	vld1.32	{d16[0]}, [r1 :32]
    e340:	add	r1, r4, #368	; 0x170
    e344:	vmovl.s8	q8, d16
    e348:	vmovl.s16	q8, d16
    e34c:	vst1.32	{d16-d17}, [r1]
    e350:	ldr	r1, [sp, #104]	; 0x68
    e354:	vld1.32	{d16[0]}, [r1 :32]
    e358:	add	r1, r4, #384	; 0x180
    e35c:	vmovl.s8	q8, d16
    e360:	vmovl.s16	q8, d16
    e364:	vst1.32	{d16-d17}, [r1]
    e368:	ldr	r1, [sp, #108]	; 0x6c
    e36c:	vld1.32	{d16[0]}, [r1 :32]
    e370:	add	r1, r4, #400	; 0x190
    e374:	vmovl.s8	q8, d16
    e378:	vmovl.s16	q8, d16
    e37c:	vst1.32	{d16-d17}, [r1]
    e380:	ldr	r1, [sp, #112]	; 0x70
    e384:	vld1.32	{d16[0]}, [r1 :32]
    e388:	add	r1, r4, #416	; 0x1a0
    e38c:	vmovl.s8	q8, d16
    e390:	vmovl.s16	q8, d16
    e394:	vst1.32	{d16-d17}, [r1]
    e398:	ldr	r1, [sp, #116]	; 0x74
    e39c:	vld1.32	{d16[0]}, [r1 :32]
    e3a0:	add	r1, r4, #432	; 0x1b0
    e3a4:	vmovl.s8	q8, d16
    e3a8:	vmovl.s16	q8, d16
    e3ac:	vst1.32	{d16-d17}, [r1]
    e3b0:	ldr	r1, [sp, #120]	; 0x78
    e3b4:	vld1.32	{d16[0]}, [r1 :32]
    e3b8:	add	r1, r4, #448	; 0x1c0
    e3bc:	vmovl.s8	q8, d16
    e3c0:	vmovl.s16	q8, d16
    e3c4:	vst1.32	{d16-d17}, [r1]
    e3c8:	ldr	r1, [sp, #124]	; 0x7c
    e3cc:	vld1.32	{d16[0]}, [r1 :32]
    e3d0:	add	r1, r4, #464	; 0x1d0
    e3d4:	vmovl.s8	q8, d16
    e3d8:	vmovl.s16	q8, d16
    e3dc:	vst1.32	{d16-d17}, [r1]
    e3e0:	ldr	r1, [sp, #128]	; 0x80
    e3e4:	vld1.32	{d16[0]}, [r1 :32]
    e3e8:	add	r1, r4, #480	; 0x1e0
    e3ec:	vmovl.s8	q8, d16
    e3f0:	vmovl.s16	q8, d16
    e3f4:	vst1.32	{d16-d17}, [r1]
    e3f8:	ldr	r1, [sp, #132]	; 0x84
    e3fc:	vld1.32	{d16[0]}, [r1 :32]
    e400:	add	r1, r4, #496	; 0x1f0
    e404:	vmovl.s8	q8, d16
    e408:	vmovl.s16	q8, d16
    e40c:	vst1.32	{d16-d17}, [r1]
    e410:	ldr	r1, [sp, #136]	; 0x88
    e414:	vld1.32	{d16[0]}, [r1 :32]
    e418:	add	r1, r4, #512	; 0x200
    e41c:	vmovl.s8	q8, d16
    e420:	vmovl.s16	q8, d16
    e424:	vst1.32	{d16-d17}, [r1]
    e428:	ldr	r1, [sp, #140]	; 0x8c
    e42c:	vld1.32	{d16[0]}, [r1 :32]
    e430:	add	r1, r4, #528	; 0x210
    e434:	vmovl.s8	q8, d16
    e438:	vmovl.s16	q8, d16
    e43c:	vst1.32	{d16-d17}, [r1]
    e440:	ldr	r1, [sp, #144]	; 0x90
    e444:	vld1.32	{d16[0]}, [r1 :32]
    e448:	add	r1, r4, #544	; 0x220
    e44c:	vmovl.s8	q8, d16
    e450:	vmovl.s16	q8, d16
    e454:	vst1.32	{d16-d17}, [r1]
    e458:	ldr	r1, [sp, #148]	; 0x94
    e45c:	vld1.32	{d16[0]}, [r1 :32]
    e460:	add	r1, r4, #560	; 0x230
    e464:	vmovl.s8	q8, d16
    e468:	vmovl.s16	q8, d16
    e46c:	vst1.32	{d16-d17}, [r1]
    e470:	ldr	r1, [sp, #152]	; 0x98
    e474:	vld1.32	{d16[0]}, [r1 :32]
    e478:	add	r1, r4, #576	; 0x240
    e47c:	vmovl.s8	q8, d16
    e480:	vmovl.s16	q8, d16
    e484:	vst1.32	{d16-d17}, [r1]
    e488:	ldr	r1, [sp, #156]	; 0x9c
    e48c:	vld1.32	{d16[0]}, [r1 :32]
    e490:	add	r1, r4, #592	; 0x250
    e494:	vmovl.s8	q8, d16
    e498:	vmovl.s16	q8, d16
    e49c:	vst1.32	{d16-d17}, [r1]
    e4a0:	ldr	r1, [sp, #160]	; 0xa0
    e4a4:	vld1.32	{d16[0]}, [r1 :32]
    e4a8:	add	r1, r4, #608	; 0x260
    e4ac:	vmovl.s8	q8, d16
    e4b0:	vmovl.s16	q8, d16
    e4b4:	vst1.32	{d16-d17}, [r1]
    e4b8:	ldr	r1, [sp, #164]	; 0xa4
    e4bc:	vld1.32	{d16[0]}, [r1 :32]
    e4c0:	add	r1, r4, #624	; 0x270
    e4c4:	vmovl.s8	q8, d16
    e4c8:	vmovl.s16	q8, d16
    e4cc:	vst1.32	{d16-d17}, [r1]
    e4d0:	ldr	r1, [sp, #168]	; 0xa8
    e4d4:	vld1.32	{d16[0]}, [r1 :32]
    e4d8:	add	r1, r4, #640	; 0x280
    e4dc:	vmovl.s8	q8, d16
    e4e0:	vmovl.s16	q8, d16
    e4e4:	vst1.32	{d16-d17}, [r1]
    e4e8:	ldr	r1, [sp, #172]	; 0xac
    e4ec:	vld1.32	{d16[0]}, [r1 :32]
    e4f0:	add	r1, r4, #656	; 0x290
    e4f4:	vmovl.s8	q8, d16
    e4f8:	vmovl.s16	q8, d16
    e4fc:	vst1.32	{d16-d17}, [r1]
    e500:	ldr	r1, [sp, #176]	; 0xb0
    e504:	vld1.32	{d16[0]}, [r1 :32]
    e508:	add	r1, r4, #672	; 0x2a0
    e50c:	vmovl.s8	q8, d16
    e510:	vmovl.s16	q8, d16
    e514:	vst1.32	{d16-d17}, [r1]
    e518:	ldr	r1, [sp, #180]	; 0xb4
    e51c:	vld1.32	{d16[0]}, [r1 :32]
    e520:	add	r1, r4, #688	; 0x2b0
    e524:	vmovl.s8	q8, d16
    e528:	vmovl.s16	q8, d16
    e52c:	vst1.32	{d16-d17}, [r1]
    e530:	ldr	r1, [sp, #184]	; 0xb8
    e534:	vld1.32	{d16[0]}, [r1 :32]
    e538:	add	r1, r4, #704	; 0x2c0
    e53c:	vmovl.s8	q8, d16
    e540:	vmovl.s16	q8, d16
    e544:	vst1.32	{d16-d17}, [r1]
    e548:	ldr	r1, [sp, #188]	; 0xbc
    e54c:	vld1.32	{d16[0]}, [r1 :32]
    e550:	add	r1, r4, #720	; 0x2d0
    e554:	vmovl.s8	q8, d16
    e558:	vmovl.s16	q8, d16
    e55c:	vst1.32	{d16-d17}, [r1]
    e560:	ldr	r1, [sp, #192]	; 0xc0
    e564:	vld1.32	{d16[0]}, [r1 :32]
    e568:	add	r1, r4, #736	; 0x2e0
    e56c:	vmovl.s8	q8, d16
    e570:	vmovl.s16	q8, d16
    e574:	vst1.32	{d16-d17}, [r1]
    e578:	ldr	r1, [sp, #196]	; 0xc4
    e57c:	vld1.32	{d16[0]}, [r1 :32]
    e580:	add	r1, r4, #752	; 0x2f0
    e584:	vmovl.s8	q8, d16
    e588:	vmovl.s16	q8, d16
    e58c:	vst1.32	{d16-d17}, [r1]
    e590:	ldr	r1, [sp, #200]	; 0xc8
    e594:	vld1.32	{d16[0]}, [r1 :32]
    e598:	add	r1, r4, #768	; 0x300
    e59c:	vmovl.s8	q8, d16
    e5a0:	vmovl.s16	q8, d16
    e5a4:	vst1.32	{d16-d17}, [r1]
    e5a8:	ldr	r1, [sp, #204]	; 0xcc
    e5ac:	vld1.32	{d16[0]}, [r1 :32]
    e5b0:	add	r1, r4, #784	; 0x310
    e5b4:	vmovl.s8	q8, d16
    e5b8:	vmovl.s16	q8, d16
    e5bc:	vst1.32	{d16-d17}, [r1]
    e5c0:	ldr	r1, [sp, #208]	; 0xd0
    e5c4:	vld1.32	{d16[0]}, [r1 :32]
    e5c8:	add	r1, r4, #800	; 0x320
    e5cc:	vmovl.s8	q8, d16
    e5d0:	vmovl.s16	q8, d16
    e5d4:	vst1.32	{d16-d17}, [r1]
    e5d8:	ldr	r1, [sp, #212]	; 0xd4
    e5dc:	vld1.32	{d16[0]}, [r1 :32]
    e5e0:	add	r1, r4, #816	; 0x330
    e5e4:	vmovl.s8	q8, d16
    e5e8:	vmovl.s16	q8, d16
    e5ec:	vst1.32	{d16-d17}, [r1]
    e5f0:	ldr	r1, [sp, #216]	; 0xd8
    e5f4:	vld1.32	{d16[0]}, [r1 :32]
    e5f8:	add	r1, r4, #832	; 0x340
    e5fc:	vmovl.s8	q8, d16
    e600:	vmovl.s16	q8, d16
    e604:	vst1.32	{d16-d17}, [r1]
    e608:	ldr	r1, [sp, #220]	; 0xdc
    e60c:	vld1.32	{d16[0]}, [r1 :32]
    e610:	add	r1, r4, #848	; 0x350
    e614:	vmovl.s8	q8, d16
    e618:	vmovl.s16	q8, d16
    e61c:	vst1.32	{d16-d17}, [r1]
    e620:	ldr	r1, [sp, #224]	; 0xe0
    e624:	vld1.32	{d16[0]}, [r1 :32]
    e628:	add	r1, r4, #864	; 0x360
    e62c:	vmovl.s8	q8, d16
    e630:	vmovl.s16	q8, d16
    e634:	vst1.32	{d16-d17}, [r1]
    e638:	ldr	r1, [sp, #228]	; 0xe4
    e63c:	vld1.32	{d16[0]}, [r1 :32]
    e640:	add	r1, r4, #880	; 0x370
    e644:	vmovl.s8	q8, d16
    e648:	vmovl.s16	q8, d16
    e64c:	vst1.32	{d16-d17}, [r1]
    e650:	ldr	r1, [sp, #232]	; 0xe8
    e654:	vld1.32	{d16[0]}, [r1 :32]
    e658:	add	r1, r4, #896	; 0x380
    e65c:	vmovl.s8	q8, d16
    e660:	vmovl.s16	q8, d16
    e664:	vst1.32	{d16-d17}, [r1]
    e668:	ldr	r1, [sp, #236]	; 0xec
    e66c:	vld1.32	{d16[0]}, [r1 :32]
    e670:	add	r1, r4, #912	; 0x390
    e674:	vmovl.s8	q8, d16
    e678:	vmovl.s16	q8, d16
    e67c:	vst1.32	{d16-d17}, [r1]
    e680:	ldr	r1, [sp, #240]	; 0xf0
    e684:	vld1.32	{d16[0]}, [r1 :32]
    e688:	add	r1, r4, #928	; 0x3a0
    e68c:	vmovl.s8	q8, d16
    e690:	vmovl.s16	q8, d16
    e694:	vst1.32	{d16-d17}, [r1]
    e698:	ldr	r1, [sp, #244]	; 0xf4
    e69c:	vld1.32	{d16[0]}, [r1 :32]
    e6a0:	add	r1, r4, #944	; 0x3b0
    e6a4:	vmovl.s8	q8, d16
    e6a8:	vmovl.s16	q8, d16
    e6ac:	vst1.32	{d16-d17}, [r1]
    e6b0:	ldr	r1, [sp, #248]	; 0xf8
    e6b4:	vld1.32	{d16[0]}, [r1 :32]
    e6b8:	add	r1, r4, #960	; 0x3c0
    e6bc:	vmovl.s8	q8, d16
    e6c0:	vmovl.s16	q8, d16
    e6c4:	vst1.32	{d16-d17}, [r1]
    e6c8:	ldr	r1, [sp, #252]	; 0xfc
    e6cc:	vld1.32	{d16[0]}, [r1 :32]
    e6d0:	add	r1, r4, #976	; 0x3d0
    e6d4:	vmovl.s8	q8, d16
    e6d8:	vmovl.s16	q8, d16
    e6dc:	vst1.32	{d16-d17}, [r1]
    e6e0:	ldr	r1, [sp, #256]	; 0x100
    e6e4:	vld1.32	{d16[0]}, [r1 :32]
    e6e8:	add	r1, r4, #992	; 0x3e0
    e6ec:	vmovl.s8	q8, d16
    e6f0:	vmovl.s16	q8, d16
    e6f4:	vst1.32	{d16-d17}, [r1]
    e6f8:	ldr	r1, [sp, #260]	; 0x104
    e6fc:	vld1.32	{d16[0]}, [r1 :32]
    e700:	add	r1, r4, #1008	; 0x3f0
    e704:	mov	r4, r9
    e708:	vmovl.s8	q8, d16
    e70c:	vmovl.s16	q8, d16
    e710:	vst1.32	{d16-d17}, [r1]
    e714:	blt	e0ec <ReadInt32Data+0x664>
    e718:	ldr	r0, [sp, #4]
    e71c:	ldr	r1, [sp, #268]	; 0x10c
    e720:	cmp	sl, r0
    e724:	bge	10618 <ReadInt32Data+0x2b90>
    e728:	ldr	r3, [r1]
    e72c:	sub	r4, r0, sl
    e730:	add	r7, sp, #320	; 0x140
    e734:	mov	r1, r6
    e738:	mov	r0, r7
    e73c:	mov	r2, r4
    e740:	bl	18b8 <fread@plt>
    e744:	add	r5, r0, r5
    e748:	cmp	r4, #1
    e74c:	blt	10618 <ReadInt32Data+0x2b90>
    e750:	mov	r0, #0
    e754:	cmp	r4, #4
    e758:	bcc	e788 <ReadInt32Data+0xd00>
    e75c:	bic	r1, r4, #3
    e760:	bic	r0, r4, #3
    e764:	vld1.32	{d16[0]}, [r7 :32]
    e768:	subs	r1, r1, #4
    e76c:	add	r7, r7, #4
    e770:	vmovl.s8	q8, d16
    e774:	vmovl.s16	q8, d16
    e778:	vst1.32	{d16-d17}, [r9]!
    e77c:	bne	e764 <ReadInt32Data+0xcdc>
    e780:	cmp	r4, r0
    e784:	beq	10618 <ReadInt32Data+0x2b90>
    e788:	ldr	r3, [sp, #4]
    e78c:	add	r1, sp, #320	; 0x140
    e790:	add	r2, r0, sl
    e794:	add	r1, r1, r0
    e798:	add	r2, r8, r2, lsl #2
    e79c:	sub	r0, r3, r0
    e7a0:	sub	r0, r0, sl
    e7a4:	ldrsb	r3, [r1], #1
    e7a8:	subs	r0, r0, #1
    e7ac:	str	r3, [r2], #4
    e7b0:	bne	e7a4 <ReadInt32Data+0xd1c>
    e7b4:	b	10618 <ReadInt32Data+0x2b90>
    e7b8:	mov	r0, r7
    e7bc:	add	r7, sp, #320	; 0x140
    e7c0:	str	sl, [sp, #268]	; 0x10c
    e7c4:	mov	sl, #0
    e7c8:	mov	r4, r8
    e7cc:	mov	r5, #0
    e7d0:	mov	r9, r8
    e7d4:	add	r1, r7, #252	; 0xfc
    e7d8:	str	r0, [sp, #4]
    e7dc:	sub	r0, r0, #256	; 0x100
    e7e0:	str	r1, [sp, #260]	; 0x104
    e7e4:	add	r1, r7, #248	; 0xf8
    e7e8:	str	r0, [sp, #8]
    e7ec:	str	r1, [sp, #256]	; 0x100
    e7f0:	add	r1, r7, #244	; 0xf4
    e7f4:	str	r1, [sp, #252]	; 0xfc
    e7f8:	add	r1, r7, #240	; 0xf0
    e7fc:	str	r1, [sp, #248]	; 0xf8
    e800:	add	r1, r7, #236	; 0xec
    e804:	str	r1, [sp, #244]	; 0xf4
    e808:	add	r1, r7, #232	; 0xe8
    e80c:	str	r1, [sp, #240]	; 0xf0
    e810:	add	r1, r7, #228	; 0xe4
    e814:	str	r1, [sp, #236]	; 0xec
    e818:	add	r1, r7, #224	; 0xe0
    e81c:	str	r1, [sp, #232]	; 0xe8
    e820:	add	r1, r7, #220	; 0xdc
    e824:	str	r1, [sp, #228]	; 0xe4
    e828:	add	r1, r7, #216	; 0xd8
    e82c:	str	r1, [sp, #224]	; 0xe0
    e830:	add	r1, r7, #212	; 0xd4
    e834:	str	r1, [sp, #220]	; 0xdc
    e838:	add	r1, r7, #208	; 0xd0
    e83c:	str	r1, [sp, #216]	; 0xd8
    e840:	add	r1, r7, #204	; 0xcc
    e844:	str	r1, [sp, #212]	; 0xd4
    e848:	add	r1, r7, #200	; 0xc8
    e84c:	str	r1, [sp, #208]	; 0xd0
    e850:	add	r1, r7, #196	; 0xc4
    e854:	str	r1, [sp, #204]	; 0xcc
    e858:	add	r1, r7, #192	; 0xc0
    e85c:	str	r1, [sp, #200]	; 0xc8
    e860:	add	r1, r7, #188	; 0xbc
    e864:	str	r1, [sp, #196]	; 0xc4
    e868:	add	r1, r7, #184	; 0xb8
    e86c:	str	r1, [sp, #192]	; 0xc0
    e870:	add	r1, r7, #180	; 0xb4
    e874:	str	r1, [sp, #188]	; 0xbc
    e878:	add	r1, r7, #176	; 0xb0
    e87c:	str	r1, [sp, #184]	; 0xb8
    e880:	add	r1, r7, #172	; 0xac
    e884:	str	r1, [sp, #180]	; 0xb4
    e888:	add	r1, r7, #168	; 0xa8
    e88c:	str	r1, [sp, #176]	; 0xb0
    e890:	add	r1, r7, #164	; 0xa4
    e894:	str	r1, [sp, #172]	; 0xac
    e898:	add	r1, r7, #160	; 0xa0
    e89c:	str	r1, [sp, #168]	; 0xa8
    e8a0:	add	r1, r7, #156	; 0x9c
    e8a4:	str	r1, [sp, #164]	; 0xa4
    e8a8:	add	r1, r7, #152	; 0x98
    e8ac:	str	r1, [sp, #160]	; 0xa0
    e8b0:	add	r1, r7, #148	; 0x94
    e8b4:	str	r1, [sp, #156]	; 0x9c
    e8b8:	add	r1, r7, #144	; 0x90
    e8bc:	str	r1, [sp, #152]	; 0x98
    e8c0:	add	r1, r7, #140	; 0x8c
    e8c4:	str	r1, [sp, #148]	; 0x94
    e8c8:	add	r1, r7, #136	; 0x88
    e8cc:	str	r1, [sp, #144]	; 0x90
    e8d0:	add	r1, r7, #132	; 0x84
    e8d4:	str	r1, [sp, #140]	; 0x8c
    e8d8:	add	r1, r7, #128	; 0x80
    e8dc:	str	r1, [sp, #136]	; 0x88
    e8e0:	add	r1, r7, #124	; 0x7c
    e8e4:	str	r1, [sp, #132]	; 0x84
    e8e8:	add	r1, r7, #120	; 0x78
    e8ec:	str	r1, [sp, #128]	; 0x80
    e8f0:	add	r1, r7, #116	; 0x74
    e8f4:	str	r1, [sp, #124]	; 0x7c
    e8f8:	add	r1, r7, #112	; 0x70
    e8fc:	str	r1, [sp, #120]	; 0x78
    e900:	add	r1, r7, #108	; 0x6c
    e904:	str	r1, [sp, #116]	; 0x74
    e908:	add	r1, r7, #104	; 0x68
    e90c:	str	r1, [sp, #112]	; 0x70
    e910:	add	r1, r7, #100	; 0x64
    e914:	str	r1, [sp, #108]	; 0x6c
    e918:	add	r1, r7, #96	; 0x60
    e91c:	str	r1, [sp, #104]	; 0x68
    e920:	add	r1, r7, #92	; 0x5c
    e924:	str	r1, [sp, #100]	; 0x64
    e928:	add	r1, r7, #88	; 0x58
    e92c:	str	r1, [sp, #96]	; 0x60
    e930:	add	r1, r7, #84	; 0x54
    e934:	str	r1, [sp, #92]	; 0x5c
    e938:	add	r1, r7, #80	; 0x50
    e93c:	str	r1, [sp, #88]	; 0x58
    e940:	add	r1, r7, #76	; 0x4c
    e944:	str	r1, [sp, #84]	; 0x54
    e948:	add	r1, r7, #72	; 0x48
    e94c:	str	r1, [sp, #80]	; 0x50
    e950:	add	r1, r7, #68	; 0x44
    e954:	str	r1, [sp, #76]	; 0x4c
    e958:	add	r1, r7, #64	; 0x40
    e95c:	str	r1, [sp, #72]	; 0x48
    e960:	add	r1, r7, #60	; 0x3c
    e964:	str	r1, [sp, #68]	; 0x44
    e968:	add	r1, r7, #56	; 0x38
    e96c:	str	r1, [sp, #64]	; 0x40
    e970:	add	r1, r7, #52	; 0x34
    e974:	str	r1, [sp, #60]	; 0x3c
    e978:	add	r1, r7, #48	; 0x30
    e97c:	str	r1, [sp, #56]	; 0x38
    e980:	add	r1, r7, #44	; 0x2c
    e984:	str	r1, [sp, #52]	; 0x34
    e988:	add	r1, r7, #40	; 0x28
    e98c:	str	r1, [sp, #48]	; 0x30
    e990:	add	r1, r7, #36	; 0x24
    e994:	str	r1, [sp, #44]	; 0x2c
    e998:	add	r1, r7, #32
    e99c:	str	r1, [sp, #40]	; 0x28
    e9a0:	add	r1, r7, #28
    e9a4:	str	r1, [sp, #36]	; 0x24
    e9a8:	add	r1, r7, #24
    e9ac:	str	r1, [sp, #32]
    e9b0:	add	r1, r7, #20
    e9b4:	str	r1, [sp, #28]
    e9b8:	add	r1, r7, #16
    e9bc:	str	r1, [sp, #24]
    e9c0:	add	r1, r7, #12
    e9c4:	str	r1, [sp, #20]
    e9c8:	add	r1, r7, #8
    e9cc:	str	r1, [sp, #16]
    e9d0:	add	r1, r7, #4
    e9d4:	str	r1, [sp, #12]
    e9d8:	ldr	r0, [sp, #268]	; 0x10c
    e9dc:	mov	r1, r6
    e9e0:	mov	r2, #256	; 0x100
    e9e4:	ldr	r3, [r0]
    e9e8:	mov	r0, r7
    e9ec:	bl	18b8 <fread@plt>
    e9f0:	vld1.32	{d16[0]}, [r7 :32]
    e9f4:	mov	r1, #1024	; 0x400
    e9f8:	add	r5, r0, r5
    e9fc:	ldr	r0, [sp, #8]
    ea00:	add	sl, sl, #256	; 0x100
    ea04:	vmovl.u8	q8, d16
    ea08:	cmp	sl, r0
    ea0c:	vmovl.u16	q8, d16
    ea10:	vst1.32	{d16-d17}, [r9], r1
    ea14:	ldr	r1, [sp, #12]
    ea18:	vld1.32	{d16[0]}, [r1 :32]
    ea1c:	add	r1, r4, #16
    ea20:	vmovl.u8	q8, d16
    ea24:	vmovl.u16	q8, d16
    ea28:	vst1.32	{d16-d17}, [r1]
    ea2c:	ldr	r1, [sp, #16]
    ea30:	vld1.32	{d16[0]}, [r1 :32]
    ea34:	add	r1, r4, #32
    ea38:	vmovl.u8	q8, d16
    ea3c:	vmovl.u16	q8, d16
    ea40:	vst1.32	{d16-d17}, [r1]
    ea44:	ldr	r1, [sp, #20]
    ea48:	vld1.32	{d16[0]}, [r1 :32]
    ea4c:	add	r1, r4, #48	; 0x30
    ea50:	vmovl.u8	q8, d16
    ea54:	vmovl.u16	q8, d16
    ea58:	vst1.32	{d16-d17}, [r1]
    ea5c:	ldr	r1, [sp, #24]
    ea60:	vld1.32	{d16[0]}, [r1 :32]
    ea64:	add	r1, r4, #64	; 0x40
    ea68:	vmovl.u8	q8, d16
    ea6c:	vmovl.u16	q8, d16
    ea70:	vst1.32	{d16-d17}, [r1]
    ea74:	ldr	r1, [sp, #28]
    ea78:	vld1.32	{d16[0]}, [r1 :32]
    ea7c:	add	r1, r4, #80	; 0x50
    ea80:	vmovl.u8	q8, d16
    ea84:	vmovl.u16	q8, d16
    ea88:	vst1.32	{d16-d17}, [r1]
    ea8c:	ldr	r1, [sp, #32]
    ea90:	vld1.32	{d16[0]}, [r1 :32]
    ea94:	add	r1, r4, #96	; 0x60
    ea98:	vmovl.u8	q8, d16
    ea9c:	vmovl.u16	q8, d16
    eaa0:	vst1.32	{d16-d17}, [r1]
    eaa4:	ldr	r1, [sp, #36]	; 0x24
    eaa8:	vld1.32	{d16[0]}, [r1 :32]
    eaac:	add	r1, r4, #112	; 0x70
    eab0:	vmovl.u8	q8, d16
    eab4:	vmovl.u16	q8, d16
    eab8:	vst1.32	{d16-d17}, [r1]
    eabc:	ldr	r1, [sp, #40]	; 0x28
    eac0:	vld1.32	{d16[0]}, [r1 :32]
    eac4:	add	r1, r4, #128	; 0x80
    eac8:	vmovl.u8	q8, d16
    eacc:	vmovl.u16	q8, d16
    ead0:	vst1.32	{d16-d17}, [r1]
    ead4:	ldr	r1, [sp, #44]	; 0x2c
    ead8:	vld1.32	{d16[0]}, [r1 :32]
    eadc:	add	r1, r4, #144	; 0x90
    eae0:	vmovl.u8	q8, d16
    eae4:	vmovl.u16	q8, d16
    eae8:	vst1.32	{d16-d17}, [r1]
    eaec:	ldr	r1, [sp, #48]	; 0x30
    eaf0:	vld1.32	{d16[0]}, [r1 :32]
    eaf4:	add	r1, r4, #160	; 0xa0
    eaf8:	vmovl.u8	q8, d16
    eafc:	vmovl.u16	q8, d16
    eb00:	vst1.32	{d16-d17}, [r1]
    eb04:	ldr	r1, [sp, #52]	; 0x34
    eb08:	vld1.32	{d16[0]}, [r1 :32]
    eb0c:	add	r1, r4, #176	; 0xb0
    eb10:	vmovl.u8	q8, d16
    eb14:	vmovl.u16	q8, d16
    eb18:	vst1.32	{d16-d17}, [r1]
    eb1c:	ldr	r1, [sp, #56]	; 0x38
    eb20:	vld1.32	{d16[0]}, [r1 :32]
    eb24:	add	r1, r4, #192	; 0xc0
    eb28:	vmovl.u8	q8, d16
    eb2c:	vmovl.u16	q8, d16
    eb30:	vst1.32	{d16-d17}, [r1]
    eb34:	ldr	r1, [sp, #60]	; 0x3c
    eb38:	vld1.32	{d16[0]}, [r1 :32]
    eb3c:	add	r1, r4, #208	; 0xd0
    eb40:	vmovl.u8	q8, d16
    eb44:	vmovl.u16	q8, d16
    eb48:	vst1.32	{d16-d17}, [r1]
    eb4c:	ldr	r1, [sp, #64]	; 0x40
    eb50:	vld1.32	{d16[0]}, [r1 :32]
    eb54:	add	r1, r4, #224	; 0xe0
    eb58:	vmovl.u8	q8, d16
    eb5c:	vmovl.u16	q8, d16
    eb60:	vst1.32	{d16-d17}, [r1]
    eb64:	ldr	r1, [sp, #68]	; 0x44
    eb68:	vld1.32	{d16[0]}, [r1 :32]
    eb6c:	add	r1, r4, #240	; 0xf0
    eb70:	vmovl.u8	q8, d16
    eb74:	vmovl.u16	q8, d16
    eb78:	vst1.32	{d16-d17}, [r1]
    eb7c:	ldr	r1, [sp, #72]	; 0x48
    eb80:	vld1.32	{d16[0]}, [r1 :32]
    eb84:	add	r1, r4, #256	; 0x100
    eb88:	vmovl.u8	q8, d16
    eb8c:	vmovl.u16	q8, d16
    eb90:	vst1.32	{d16-d17}, [r1]
    eb94:	ldr	r1, [sp, #76]	; 0x4c
    eb98:	vld1.32	{d16[0]}, [r1 :32]
    eb9c:	add	r1, r4, #272	; 0x110
    eba0:	vmovl.u8	q8, d16
    eba4:	vmovl.u16	q8, d16
    eba8:	vst1.32	{d16-d17}, [r1]
    ebac:	ldr	r1, [sp, #80]	; 0x50
    ebb0:	vld1.32	{d16[0]}, [r1 :32]
    ebb4:	add	r1, r4, #288	; 0x120
    ebb8:	vmovl.u8	q8, d16
    ebbc:	vmovl.u16	q8, d16
    ebc0:	vst1.32	{d16-d17}, [r1]
    ebc4:	ldr	r1, [sp, #84]	; 0x54
    ebc8:	vld1.32	{d16[0]}, [r1 :32]
    ebcc:	add	r1, r4, #304	; 0x130
    ebd0:	vmovl.u8	q8, d16
    ebd4:	vmovl.u16	q8, d16
    ebd8:	vst1.32	{d16-d17}, [r1]
    ebdc:	ldr	r1, [sp, #88]	; 0x58
    ebe0:	vld1.32	{d16[0]}, [r1 :32]
    ebe4:	add	r1, r4, #320	; 0x140
    ebe8:	vmovl.u8	q8, d16
    ebec:	vmovl.u16	q8, d16
    ebf0:	vst1.32	{d16-d17}, [r1]
    ebf4:	ldr	r1, [sp, #92]	; 0x5c
    ebf8:	vld1.32	{d16[0]}, [r1 :32]
    ebfc:	add	r1, r4, #336	; 0x150
    ec00:	vmovl.u8	q8, d16
    ec04:	vmovl.u16	q8, d16
    ec08:	vst1.32	{d16-d17}, [r1]
    ec0c:	ldr	r1, [sp, #96]	; 0x60
    ec10:	vld1.32	{d16[0]}, [r1 :32]
    ec14:	add	r1, r4, #352	; 0x160
    ec18:	vmovl.u8	q8, d16
    ec1c:	vmovl.u16	q8, d16
    ec20:	vst1.32	{d16-d17}, [r1]
    ec24:	ldr	r1, [sp, #100]	; 0x64
    ec28:	vld1.32	{d16[0]}, [r1 :32]
    ec2c:	add	r1, r4, #368	; 0x170
    ec30:	vmovl.u8	q8, d16
    ec34:	vmovl.u16	q8, d16
    ec38:	vst1.32	{d16-d17}, [r1]
    ec3c:	ldr	r1, [sp, #104]	; 0x68
    ec40:	vld1.32	{d16[0]}, [r1 :32]
    ec44:	add	r1, r4, #384	; 0x180
    ec48:	vmovl.u8	q8, d16
    ec4c:	vmovl.u16	q8, d16
    ec50:	vst1.32	{d16-d17}, [r1]
    ec54:	ldr	r1, [sp, #108]	; 0x6c
    ec58:	vld1.32	{d16[0]}, [r1 :32]
    ec5c:	add	r1, r4, #400	; 0x190
    ec60:	vmovl.u8	q8, d16
    ec64:	vmovl.u16	q8, d16
    ec68:	vst1.32	{d16-d17}, [r1]
    ec6c:	ldr	r1, [sp, #112]	; 0x70
    ec70:	vld1.32	{d16[0]}, [r1 :32]
    ec74:	add	r1, r4, #416	; 0x1a0
    ec78:	vmovl.u8	q8, d16
    ec7c:	vmovl.u16	q8, d16
    ec80:	vst1.32	{d16-d17}, [r1]
    ec84:	ldr	r1, [sp, #116]	; 0x74
    ec88:	vld1.32	{d16[0]}, [r1 :32]
    ec8c:	add	r1, r4, #432	; 0x1b0
    ec90:	vmovl.u8	q8, d16
    ec94:	vmovl.u16	q8, d16
    ec98:	vst1.32	{d16-d17}, [r1]
    ec9c:	ldr	r1, [sp, #120]	; 0x78
    eca0:	vld1.32	{d16[0]}, [r1 :32]
    eca4:	add	r1, r4, #448	; 0x1c0
    eca8:	vmovl.u8	q8, d16
    ecac:	vmovl.u16	q8, d16
    ecb0:	vst1.32	{d16-d17}, [r1]
    ecb4:	ldr	r1, [sp, #124]	; 0x7c
    ecb8:	vld1.32	{d16[0]}, [r1 :32]
    ecbc:	add	r1, r4, #464	; 0x1d0
    ecc0:	vmovl.u8	q8, d16
    ecc4:	vmovl.u16	q8, d16
    ecc8:	vst1.32	{d16-d17}, [r1]
    eccc:	ldr	r1, [sp, #128]	; 0x80
    ecd0:	vld1.32	{d16[0]}, [r1 :32]
    ecd4:	add	r1, r4, #480	; 0x1e0
    ecd8:	vmovl.u8	q8, d16
    ecdc:	vmovl.u16	q8, d16
    ece0:	vst1.32	{d16-d17}, [r1]
    ece4:	ldr	r1, [sp, #132]	; 0x84
    ece8:	vld1.32	{d16[0]}, [r1 :32]
    ecec:	add	r1, r4, #496	; 0x1f0
    ecf0:	vmovl.u8	q8, d16
    ecf4:	vmovl.u16	q8, d16
    ecf8:	vst1.32	{d16-d17}, [r1]
    ecfc:	ldr	r1, [sp, #136]	; 0x88
    ed00:	vld1.32	{d16[0]}, [r1 :32]
    ed04:	add	r1, r4, #512	; 0x200
    ed08:	vmovl.u8	q8, d16
    ed0c:	vmovl.u16	q8, d16
    ed10:	vst1.32	{d16-d17}, [r1]
    ed14:	ldr	r1, [sp, #140]	; 0x8c
    ed18:	vld1.32	{d16[0]}, [r1 :32]
    ed1c:	add	r1, r4, #528	; 0x210
    ed20:	vmovl.u8	q8, d16
    ed24:	vmovl.u16	q8, d16
    ed28:	vst1.32	{d16-d17}, [r1]
    ed2c:	ldr	r1, [sp, #144]	; 0x90
    ed30:	vld1.32	{d16[0]}, [r1 :32]
    ed34:	add	r1, r4, #544	; 0x220
    ed38:	vmovl.u8	q8, d16
    ed3c:	vmovl.u16	q8, d16
    ed40:	vst1.32	{d16-d17}, [r1]
    ed44:	ldr	r1, [sp, #148]	; 0x94
    ed48:	vld1.32	{d16[0]}, [r1 :32]
    ed4c:	add	r1, r4, #560	; 0x230
    ed50:	vmovl.u8	q8, d16
    ed54:	vmovl.u16	q8, d16
    ed58:	vst1.32	{d16-d17}, [r1]
    ed5c:	ldr	r1, [sp, #152]	; 0x98
    ed60:	vld1.32	{d16[0]}, [r1 :32]
    ed64:	add	r1, r4, #576	; 0x240
    ed68:	vmovl.u8	q8, d16
    ed6c:	vmovl.u16	q8, d16
    ed70:	vst1.32	{d16-d17}, [r1]
    ed74:	ldr	r1, [sp, #156]	; 0x9c
    ed78:	vld1.32	{d16[0]}, [r1 :32]
    ed7c:	add	r1, r4, #592	; 0x250
    ed80:	vmovl.u8	q8, d16
    ed84:	vmovl.u16	q8, d16
    ed88:	vst1.32	{d16-d17}, [r1]
    ed8c:	ldr	r1, [sp, #160]	; 0xa0
    ed90:	vld1.32	{d16[0]}, [r1 :32]
    ed94:	add	r1, r4, #608	; 0x260
    ed98:	vmovl.u8	q8, d16
    ed9c:	vmovl.u16	q8, d16
    eda0:	vst1.32	{d16-d17}, [r1]
    eda4:	ldr	r1, [sp, #164]	; 0xa4
    eda8:	vld1.32	{d16[0]}, [r1 :32]
    edac:	add	r1, r4, #624	; 0x270
    edb0:	vmovl.u8	q8, d16
    edb4:	vmovl.u16	q8, d16
    edb8:	vst1.32	{d16-d17}, [r1]
    edbc:	ldr	r1, [sp, #168]	; 0xa8
    edc0:	vld1.32	{d16[0]}, [r1 :32]
    edc4:	add	r1, r4, #640	; 0x280
    edc8:	vmovl.u8	q8, d16
    edcc:	vmovl.u16	q8, d16
    edd0:	vst1.32	{d16-d17}, [r1]
    edd4:	ldr	r1, [sp, #172]	; 0xac
    edd8:	vld1.32	{d16[0]}, [r1 :32]
    eddc:	add	r1, r4, #656	; 0x290
    ede0:	vmovl.u8	q8, d16
    ede4:	vmovl.u16	q8, d16
    ede8:	vst1.32	{d16-d17}, [r1]
    edec:	ldr	r1, [sp, #176]	; 0xb0
    edf0:	vld1.32	{d16[0]}, [r1 :32]
    edf4:	add	r1, r4, #672	; 0x2a0
    edf8:	vmovl.u8	q8, d16
    edfc:	vmovl.u16	q8, d16
    ee00:	vst1.32	{d16-d17}, [r1]
    ee04:	ldr	r1, [sp, #180]	; 0xb4
    ee08:	vld1.32	{d16[0]}, [r1 :32]
    ee0c:	add	r1, r4, #688	; 0x2b0
    ee10:	vmovl.u8	q8, d16
    ee14:	vmovl.u16	q8, d16
    ee18:	vst1.32	{d16-d17}, [r1]
    ee1c:	ldr	r1, [sp, #184]	; 0xb8
    ee20:	vld1.32	{d16[0]}, [r1 :32]
    ee24:	add	r1, r4, #704	; 0x2c0
    ee28:	vmovl.u8	q8, d16
    ee2c:	vmovl.u16	q8, d16
    ee30:	vst1.32	{d16-d17}, [r1]
    ee34:	ldr	r1, [sp, #188]	; 0xbc
    ee38:	vld1.32	{d16[0]}, [r1 :32]
    ee3c:	add	r1, r4, #720	; 0x2d0
    ee40:	vmovl.u8	q8, d16
    ee44:	vmovl.u16	q8, d16
    ee48:	vst1.32	{d16-d17}, [r1]
    ee4c:	ldr	r1, [sp, #192]	; 0xc0
    ee50:	vld1.32	{d16[0]}, [r1 :32]
    ee54:	add	r1, r4, #736	; 0x2e0
    ee58:	vmovl.u8	q8, d16
    ee5c:	vmovl.u16	q8, d16
    ee60:	vst1.32	{d16-d17}, [r1]
    ee64:	ldr	r1, [sp, #196]	; 0xc4
    ee68:	vld1.32	{d16[0]}, [r1 :32]
    ee6c:	add	r1, r4, #752	; 0x2f0
    ee70:	vmovl.u8	q8, d16
    ee74:	vmovl.u16	q8, d16
    ee78:	vst1.32	{d16-d17}, [r1]
    ee7c:	ldr	r1, [sp, #200]	; 0xc8
    ee80:	vld1.32	{d16[0]}, [r1 :32]
    ee84:	add	r1, r4, #768	; 0x300
    ee88:	vmovl.u8	q8, d16
    ee8c:	vmovl.u16	q8, d16
    ee90:	vst1.32	{d16-d17}, [r1]
    ee94:	ldr	r1, [sp, #204]	; 0xcc
    ee98:	vld1.32	{d16[0]}, [r1 :32]
    ee9c:	add	r1, r4, #784	; 0x310
    eea0:	vmovl.u8	q8, d16
    eea4:	vmovl.u16	q8, d16
    eea8:	vst1.32	{d16-d17}, [r1]
    eeac:	ldr	r1, [sp, #208]	; 0xd0
    eeb0:	vld1.32	{d16[0]}, [r1 :32]
    eeb4:	add	r1, r4, #800	; 0x320
    eeb8:	vmovl.u8	q8, d16
    eebc:	vmovl.u16	q8, d16
    eec0:	vst1.32	{d16-d17}, [r1]
    eec4:	ldr	r1, [sp, #212]	; 0xd4
    eec8:	vld1.32	{d16[0]}, [r1 :32]
    eecc:	add	r1, r4, #816	; 0x330
    eed0:	vmovl.u8	q8, d16
    eed4:	vmovl.u16	q8, d16
    eed8:	vst1.32	{d16-d17}, [r1]
    eedc:	ldr	r1, [sp, #216]	; 0xd8
    eee0:	vld1.32	{d16[0]}, [r1 :32]
    eee4:	add	r1, r4, #832	; 0x340
    eee8:	vmovl.u8	q8, d16
    eeec:	vmovl.u16	q8, d16
    eef0:	vst1.32	{d16-d17}, [r1]
    eef4:	ldr	r1, [sp, #220]	; 0xdc
    eef8:	vld1.32	{d16[0]}, [r1 :32]
    eefc:	add	r1, r4, #848	; 0x350
    ef00:	vmovl.u8	q8, d16
    ef04:	vmovl.u16	q8, d16
    ef08:	vst1.32	{d16-d17}, [r1]
    ef0c:	ldr	r1, [sp, #224]	; 0xe0
    ef10:	vld1.32	{d16[0]}, [r1 :32]
    ef14:	add	r1, r4, #864	; 0x360
    ef18:	vmovl.u8	q8, d16
    ef1c:	vmovl.u16	q8, d16
    ef20:	vst1.32	{d16-d17}, [r1]
    ef24:	ldr	r1, [sp, #228]	; 0xe4
    ef28:	vld1.32	{d16[0]}, [r1 :32]
    ef2c:	add	r1, r4, #880	; 0x370
    ef30:	vmovl.u8	q8, d16
    ef34:	vmovl.u16	q8, d16
    ef38:	vst1.32	{d16-d17}, [r1]
    ef3c:	ldr	r1, [sp, #232]	; 0xe8
    ef40:	vld1.32	{d16[0]}, [r1 :32]
    ef44:	add	r1, r4, #896	; 0x380
    ef48:	vmovl.u8	q8, d16
    ef4c:	vmovl.u16	q8, d16
    ef50:	vst1.32	{d16-d17}, [r1]
    ef54:	ldr	r1, [sp, #236]	; 0xec
    ef58:	vld1.32	{d16[0]}, [r1 :32]
    ef5c:	add	r1, r4, #912	; 0x390
    ef60:	vmovl.u8	q8, d16
    ef64:	vmovl.u16	q8, d16
    ef68:	vst1.32	{d16-d17}, [r1]
    ef6c:	ldr	r1, [sp, #240]	; 0xf0
    ef70:	vld1.32	{d16[0]}, [r1 :32]
    ef74:	add	r1, r4, #928	; 0x3a0
    ef78:	vmovl.u8	q8, d16
    ef7c:	vmovl.u16	q8, d16
    ef80:	vst1.32	{d16-d17}, [r1]
    ef84:	ldr	r1, [sp, #244]	; 0xf4
    ef88:	vld1.32	{d16[0]}, [r1 :32]
    ef8c:	add	r1, r4, #944	; 0x3b0
    ef90:	vmovl.u8	q8, d16
    ef94:	vmovl.u16	q8, d16
    ef98:	vst1.32	{d16-d17}, [r1]
    ef9c:	ldr	r1, [sp, #248]	; 0xf8
    efa0:	vld1.32	{d16[0]}, [r1 :32]
    efa4:	add	r1, r4, #960	; 0x3c0
    efa8:	vmovl.u8	q8, d16
    efac:	vmovl.u16	q8, d16
    efb0:	vst1.32	{d16-d17}, [r1]
    efb4:	ldr	r1, [sp, #252]	; 0xfc
    efb8:	vld1.32	{d16[0]}, [r1 :32]
    efbc:	add	r1, r4, #976	; 0x3d0
    efc0:	vmovl.u8	q8, d16
    efc4:	vmovl.u16	q8, d16
    efc8:	vst1.32	{d16-d17}, [r1]
    efcc:	ldr	r1, [sp, #256]	; 0x100
    efd0:	vld1.32	{d16[0]}, [r1 :32]
    efd4:	add	r1, r4, #992	; 0x3e0
    efd8:	vmovl.u8	q8, d16
    efdc:	vmovl.u16	q8, d16
    efe0:	vst1.32	{d16-d17}, [r1]
    efe4:	ldr	r1, [sp, #260]	; 0x104
    efe8:	vld1.32	{d16[0]}, [r1 :32]
    efec:	add	r1, r4, #1008	; 0x3f0
    eff0:	mov	r4, r9
    eff4:	vmovl.u8	q8, d16
    eff8:	vmovl.u16	q8, d16
    effc:	vst1.32	{d16-d17}, [r1]
    f000:	blt	e9d8 <ReadInt32Data+0xf50>
    f004:	ldr	r0, [sp, #4]
    f008:	ldr	r1, [sp, #268]	; 0x10c
    f00c:	cmp	sl, r0
    f010:	bge	10618 <ReadInt32Data+0x2b90>
    f014:	ldr	r3, [r1]
    f018:	sub	r4, r0, sl
    f01c:	add	r7, sp, #320	; 0x140
    f020:	mov	r1, r6
    f024:	mov	r0, r7
    f028:	mov	r2, r4
    f02c:	bl	18b8 <fread@plt>
    f030:	add	r5, r0, r5
    f034:	cmp	r4, #1
    f038:	blt	10618 <ReadInt32Data+0x2b90>
    f03c:	mov	r0, #0
    f040:	cmp	r4, #4
    f044:	bcc	f074 <ReadInt32Data+0x15ec>
    f048:	bic	r1, r4, #3
    f04c:	bic	r0, r4, #3
    f050:	vld1.32	{d16[0]}, [r7 :32]
    f054:	subs	r1, r1, #4
    f058:	add	r7, r7, #4
    f05c:	vmovl.u8	q8, d16
    f060:	vmovl.u16	q8, d16
    f064:	vst1.32	{d16-d17}, [r9]!
    f068:	bne	f050 <ReadInt32Data+0x15c8>
    f06c:	cmp	r4, r0
    f070:	beq	10618 <ReadInt32Data+0x2b90>
    f074:	ldr	r3, [sp, #4]
    f078:	add	r1, sp, #320	; 0x140
    f07c:	add	r2, r0, sl
    f080:	add	r1, r1, r0
    f084:	add	r2, r8, r2, lsl #2
    f088:	sub	r0, r3, r0
    f08c:	sub	r0, r0, sl
    f090:	ldrb	r3, [r1], #1
    f094:	subs	r0, r0, #1
    f098:	str	r3, [r2], #4
    f09c:	bne	f090 <ReadInt32Data+0x1608>
    f0a0:	b	10618 <ReadInt32Data+0x2b90>
    f0a4:	cmp	r7, #256	; 0x100
    f0a8:	bgt	faf4 <ReadInt32Data+0x206c>
    f0ac:	ldr	r3, [sl]
    f0b0:	add	r4, sp, #320	; 0x140
    f0b4:	mov	r1, r6
    f0b8:	mov	r2, r7
    f0bc:	mov	r0, r4
    f0c0:	bl	18b8 <fread@plt>
    f0c4:	mov	r5, r0
    f0c8:	cmp	r7, #1
    f0cc:	blt	10618 <ReadInt32Data+0x2b90>
    f0d0:	mov	r0, #0
    f0d4:	cmp	r7, #4
    f0d8:	bcc	f128 <ReadInt32Data+0x16a0>
    f0dc:	bic	r0, r7, #3
    f0e0:	mov	ip, r7
    f0e4:	add	r1, sp, #272	; 0x110
    f0e8:	mov	r3, r8
    f0ec:	mov	r2, r0
    f0f0:	ldr	r7, [r4]
    f0f4:	ldr	r6, [r4, #4]
    f0f8:	subs	r2, r2, #4
    f0fc:	add	r4, r4, #8
    f100:	str	r6, [sp, #276]	; 0x114
    f104:	str	r7, [sp, #272]	; 0x110
    f108:	vld1.16	{d16}, [r1 :64]
    f10c:	vmovl.s16	q8, d16
    f110:	vst1.32	{d16-d17}, [r3]!
    f114:	bne	f0f0 <ReadInt32Data+0x1668>
    f118:	ldr	r6, [sp, #264]	; 0x108
    f11c:	mov	r7, ip
    f120:	cmp	r0, ip
    f124:	beq	10618 <ReadInt32Data+0x2b90>
    f128:	add	r3, sp, #320	; 0x140
    f12c:	sub	r1, r7, r0
    f130:	add	r2, r8, r0, lsl #2
    f134:	add	r0, r3, r0, lsl #1
    f138:	ldrsh	r3, [r0], #2
    f13c:	subs	r1, r1, #1
    f140:	str	r3, [r2], #4
    f144:	bne	f138 <ReadInt32Data+0x16b0>
    f148:	b	10618 <ReadInt32Data+0x2b90>
    f14c:	cmp	r7, #256	; 0x100
    f150:	bgt	fc80 <ReadInt32Data+0x21f8>
    f154:	ldr	r3, [sl]
    f158:	add	r4, sp, #320	; 0x140
    f15c:	mov	r1, r6
    f160:	mov	r2, r7
    f164:	mov	r0, r4
    f168:	bl	18b8 <fread@plt>
    f16c:	mov	r5, r0
    f170:	cmp	r7, #1
    f174:	blt	10618 <ReadInt32Data+0x2b90>
    f178:	mov	r0, #0
    f17c:	cmp	r7, #4
    f180:	bcc	f1d0 <ReadInt32Data+0x1748>
    f184:	bic	r0, r7, #3
    f188:	mov	ip, r7
    f18c:	add	r1, sp, #296	; 0x128
    f190:	mov	r3, r8
    f194:	mov	r2, r0
    f198:	ldr	r7, [r4]
    f19c:	ldr	r6, [r4, #4]
    f1a0:	subs	r2, r2, #4
    f1a4:	add	r4, r4, #8
    f1a8:	str	r6, [sp, #300]	; 0x12c
    f1ac:	str	r7, [sp, #296]	; 0x128
    f1b0:	vld1.16	{d16}, [r1 :64]
    f1b4:	vmovl.u16	q8, d16
    f1b8:	vst1.32	{d16-d17}, [r3]!
    f1bc:	bne	f198 <ReadInt32Data+0x1710>
    f1c0:	ldr	r6, [sp, #264]	; 0x108
    f1c4:	mov	r7, ip
    f1c8:	cmp	r0, ip
    f1cc:	beq	10618 <ReadInt32Data+0x2b90>
    f1d0:	add	r3, sp, #320	; 0x140
    f1d4:	sub	r1, r7, r0
    f1d8:	add	r2, r8, r0, lsl #2
    f1dc:	add	r0, r3, r0, lsl #1
    f1e0:	ldrh	r3, [r0], #2
    f1e4:	subs	r1, r1, #1
    f1e8:	str	r3, [r2], #4
    f1ec:	bne	f1e0 <ReadInt32Data+0x1758>
    f1f0:	b	10618 <ReadInt32Data+0x2b90>
    f1f4:	cmp	r7, #256	; 0x100
    f1f8:	ble	f2bc <ReadInt32Data+0x1834>
    f1fc:	mov	r0, r7
    f200:	mov	r6, sl
    f204:	lsl	r7, r7, #2
    f208:	mov	r5, #0
    f20c:	add	r9, sp, #320	; 0x140
    f210:	mov	sl, #0
    f214:	str	r0, [sp, #4]
    f218:	sub	r0, r0, #256	; 0x100
    f21c:	str	r0, [sp, #260]	; 0x104
    f220:	ldr	r3, [r6]
    f224:	ldr	r1, [sp, #264]	; 0x108
    f228:	mov	r0, r9
    f22c:	mov	r2, #256	; 0x100
    f230:	bl	18b8 <fread@plt>
    f234:	mov	r4, r0
    f238:	add	r0, r8, r5, lsl #2
    f23c:	mov	r1, r9
    f240:	mov	r2, #1024	; 0x400
    f244:	bl	181c <memcpy@plt>
    f248:	ldr	r0, [sp, #260]	; 0x104
    f24c:	add	r5, r5, #256	; 0x100
    f250:	add	sl, r4, sl
    f254:	sub	r7, r7, #1024	; 0x400
    f258:	cmp	r5, r0
    f25c:	blt	f220 <ReadInt32Data+0x1798>
    f260:	ldr	r0, [sp, #4]
    f264:	cmp	r5, r0
    f268:	bge	102b8 <ReadInt32Data+0x2830>
    f26c:	ldr	r3, [r6]
    f270:	ldr	r6, [sp, #264]	; 0x108
    f274:	sub	r4, r0, r5
    f278:	add	r0, sp, #320	; 0x140
    f27c:	mov	r2, r4
    f280:	mov	r1, r6
    f284:	bl	18b8 <fread@plt>
    f288:	add	sl, r0, sl
    f28c:	cmp	r4, #1
    f290:	blt	f2a4 <ReadInt32Data+0x181c>
    f294:	add	r0, r8, r5, lsl #2
    f298:	add	r1, sp, #320	; 0x140
    f29c:	mov	r2, r7
    f2a0:	bl	181c <memcpy@plt>
    f2a4:	mov	r5, sl
    f2a8:	mul	r0, r5, r6
    f2ac:	sub	sp, fp, #28
    f2b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f2b4:	cmp	r7, #256	; 0x100
    f2b8:	bgt	fe0c <ReadInt32Data+0x2384>
    f2bc:	ldr	r3, [sl]
    f2c0:	add	r0, sp, #320	; 0x140
    f2c4:	mov	r1, r6
    f2c8:	mov	r2, r7
    f2cc:	bl	18b8 <fread@plt>
    f2d0:	mov	r5, r0
    f2d4:	cmp	r7, #1
    f2d8:	blt	10618 <ReadInt32Data+0x2b90>
    f2dc:	lsl	r2, r7, #2
    f2e0:	add	r1, sp, #320	; 0x140
    f2e4:	mov	r0, r8
    f2e8:	bl	181c <memcpy@plt>
    f2ec:	mul	r0, r5, r6
    f2f0:	sub	sp, fp, #28
    f2f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f2f8:	cmp	r7, #256	; 0x100
    f2fc:	bgt	fec4 <ReadInt32Data+0x243c>
    f300:	ldr	r3, [sl]
    f304:	add	r4, sp, #320	; 0x140
    f308:	mov	r1, r6
    f30c:	mov	r2, r7
    f310:	mov	r0, r4
    f314:	bl	18b8 <fread@plt>
    f318:	mov	r5, r0
    f31c:	cmp	r7, #1
    f320:	blt	10618 <ReadInt32Data+0x2b90>
    f324:	mov	r0, #0
    f328:	cmp	r7, #4
    f32c:	bcc	f358 <ReadInt32Data+0x18d0>
    f330:	bic	r0, r7, #3
    f334:	mov	r2, r8
    f338:	mov	r1, r0
    f33c:	vld1.32	{d16-d17}, [r4]!
    f340:	subs	r1, r1, #4
    f344:	vcvt.s32.f32	q8, q8
    f348:	vst1.32	{d16-d17}, [r2]!
    f34c:	bne	f33c <ReadInt32Data+0x18b4>
    f350:	cmp	r0, r7
    f354:	beq	10618 <ReadInt32Data+0x2b90>
    f358:	add	r3, sp, #320	; 0x140
    f35c:	sub	r1, r7, r0
    f360:	add	r2, r8, r0, lsl #2
    f364:	add	r0, r3, r0, lsl #2
    f368:	vldr	s0, [r0]
    f36c:	subs	r1, r1, #1
    f370:	add	r0, r0, #4
    f374:	vcvt.s32.f32	s0, s0
    f378:	vmov	r3, s0
    f37c:	str	r3, [r2], #4
    f380:	bne	f368 <ReadInt32Data+0x18e0>
    f384:	b	10618 <ReadInt32Data+0x2b90>
    f388:	cmp	r7, #256	; 0x100
    f38c:	bgt	10008 <ReadInt32Data+0x2580>
    f390:	ldr	r3, [sl]
    f394:	add	r4, sp, #320	; 0x140
    f398:	mov	r1, r6
    f39c:	mov	r2, r7
    f3a0:	mov	r0, r4
    f3a4:	bl	18b8 <fread@plt>
    f3a8:	mov	r5, r0
    f3ac:	cmp	r7, #1
    f3b0:	blt	10618 <ReadInt32Data+0x2b90>
    f3b4:	mov	r0, #0
    f3b8:	beq	f3f8 <ReadInt32Data+0x1970>
    f3bc:	bic	r0, r7, #1
    f3c0:	mov	r2, r8
    f3c4:	mov	r1, r0
    f3c8:	vld1.64	{d16-d17}, [r4]!
    f3cc:	subs	r1, r1, #2
    f3d0:	vcvt.s32.f64	s0, d16
    f3d4:	vcvt.s32.f64	s2, d17
    f3d8:	vmov	r3, s0
    f3dc:	vmov.32	d16[0], r3
    f3e0:	vmov	r3, s2
    f3e4:	vmov.32	d16[1], r3
    f3e8:	vst1.32	{d16}, [r2]!
    f3ec:	bne	f3c8 <ReadInt32Data+0x1940>
    f3f0:	cmp	r0, r7
    f3f4:	beq	10618 <ReadInt32Data+0x2b90>
    f3f8:	add	r3, sp, #320	; 0x140
    f3fc:	sub	r1, r7, r0
    f400:	add	r2, r8, r0, lsl #2
    f404:	add	r0, r3, r0, lsl #3
    f408:	vldr	d16, [r0]
    f40c:	subs	r1, r1, #1
    f410:	add	r0, r0, #8
    f414:	vcvt.s32.f64	s0, d16
    f418:	vmov	r3, s0
    f41c:	str	r3, [r2], #4
    f420:	bne	f408 <ReadInt32Data+0x1980>
    f424:	b	10618 <ReadInt32Data+0x2b90>
    f428:	cmp	r7, #256	; 0x100
    f42c:	bgt	10178 <ReadInt32Data+0x26f0>
    f430:	ldr	r3, [sl]
    f434:	add	r4, sp, #320	; 0x140
    f438:	mov	r1, r6
    f43c:	mov	r2, r7
    f440:	mov	r0, r4
    f444:	bl	18b8 <fread@plt>
    f448:	cmp	r7, #1
    f44c:	blt	10324 <ReadInt32Data+0x289c>
    f450:	mov	ip, #0
    f454:	beq	f480 <ReadInt32Data+0x19f8>
    f458:	bic	ip, r7, #1
    f45c:	mov	r2, r8
    f460:	mov	r1, ip
    f464:	vld1.64	{d16-d17}, [r4]!
    f468:	subs	r1, r1, #2
    f46c:	vmovn.i64	d16, q8
    f470:	vst1.32	{d16}, [r2]!
    f474:	bne	f464 <ReadInt32Data+0x19dc>
    f478:	cmp	ip, r7
    f47c:	beq	10324 <ReadInt32Data+0x289c>
    f480:	add	r3, sp, #320	; 0x140
    f484:	sub	r1, r7, ip
    f488:	add	r2, r8, ip, lsl #2
    f48c:	add	r4, r3, ip, lsl #3
    f490:	ldr	r3, [r4], #8
    f494:	subs	r1, r1, #1
    f498:	str	r3, [r2], #4
    f49c:	bne	f490 <ReadInt32Data+0x1a08>
    f4a0:	b	10324 <ReadInt32Data+0x289c>
    f4a4:	sub	r0, r7, #256	; 0x100
    f4a8:	add	r1, r8, #1024	; 0x400
    f4ac:	add	r4, sp, #320	; 0x140
    f4b0:	mov	r5, #0
    f4b4:	str	sl, [sp, #268]	; 0x10c
    f4b8:	str	r7, [sp, #4]
    f4bc:	str	r0, [sp, #260]	; 0x104
    f4c0:	mov	r0, #0
    f4c4:	mov	sl, r0
    f4c8:	ldr	r0, [sp, #268]	; 0x10c
    f4cc:	mov	r9, r1
    f4d0:	mov	r1, r6
    f4d4:	mov	r2, #256	; 0x100
    f4d8:	ldr	r3, [r0]
    f4dc:	mov	r0, r4
    f4e0:	bl	18b8 <fread@plt>
    f4e4:	mov	r7, r0
    f4e8:	mov	r6, #0
    f4ec:	add	r0, r4, r6
    f4f0:	bl	1c18 <Mat_int16Swap>
    f4f4:	str	r0, [r8, r6, lsl #1]
    f4f8:	add	r6, r6, #2
    f4fc:	cmp	r6, #512	; 0x200
    f500:	bne	f4ec <ReadInt32Data+0x1a64>
    f504:	ldr	r2, [sp, #260]	; 0x104
    f508:	ldr	r6, [sp, #264]	; 0x108
    f50c:	add	r0, sl, #256	; 0x100
    f510:	add	r5, r7, r5
    f514:	add	r8, r8, #1024	; 0x400
    f518:	add	r1, r9, #1024	; 0x400
    f51c:	cmp	r0, r2
    f520:	blt	f4c4 <ReadInt32Data+0x1a3c>
    f524:	ldr	r2, [sp, #4]
    f528:	cmp	r0, r2
    f52c:	bge	10618 <ReadInt32Data+0x2b90>
    f530:	mov	r1, r6
    f534:	sub	r6, r2, r0
    f538:	ldr	r0, [sp, #268]	; 0x10c
    f53c:	add	r4, sp, #320	; 0x140
    f540:	mov	r2, r6
    f544:	ldr	r3, [r0]
    f548:	mov	r0, r4
    f54c:	bl	18b8 <fread@plt>
    f550:	add	r5, r0, r5
    f554:	cmp	r6, #1
    f558:	blt	10614 <ReadInt32Data+0x2b8c>
    f55c:	ldr	r0, [sp, #260]	; 0x104
    f560:	sub	r6, r0, sl
    f564:	mov	r0, r4
    f568:	bl	1c18 <Mat_int16Swap>
    f56c:	str	r0, [r9], #4
    f570:	subs	r6, r6, #1
    f574:	add	r4, r4, #2
    f578:	bne	f564 <ReadInt32Data+0x1adc>
    f57c:	b	10614 <ReadInt32Data+0x2b8c>
    f580:	sub	r0, r7, #256	; 0x100
    f584:	add	r1, r8, #1024	; 0x400
    f588:	add	r4, sp, #320	; 0x140
    f58c:	mov	r5, #0
    f590:	str	sl, [sp, #268]	; 0x10c
    f594:	str	r7, [sp, #4]
    f598:	str	r0, [sp, #260]	; 0x104
    f59c:	mov	r0, #0
    f5a0:	mov	sl, r0
    f5a4:	ldr	r0, [sp, #268]	; 0x10c
    f5a8:	mov	r9, r1
    f5ac:	mov	r1, r6
    f5b0:	mov	r2, #256	; 0x100
    f5b4:	ldr	r3, [r0]
    f5b8:	mov	r0, r4
    f5bc:	bl	18b8 <fread@plt>
    f5c0:	mov	r7, r0
    f5c4:	mov	r6, #0
    f5c8:	add	r0, r4, r6
    f5cc:	bl	1c2c <Mat_uint16Swap>
    f5d0:	str	r0, [r8, r6, lsl #1]
    f5d4:	add	r6, r6, #2
    f5d8:	cmp	r6, #512	; 0x200
    f5dc:	bne	f5c8 <ReadInt32Data+0x1b40>
    f5e0:	ldr	r2, [sp, #260]	; 0x104
    f5e4:	ldr	r6, [sp, #264]	; 0x108
    f5e8:	add	r0, sl, #256	; 0x100
    f5ec:	add	r5, r7, r5
    f5f0:	add	r8, r8, #1024	; 0x400
    f5f4:	add	r1, r9, #1024	; 0x400
    f5f8:	cmp	r0, r2
    f5fc:	blt	f5a0 <ReadInt32Data+0x1b18>
    f600:	ldr	r2, [sp, #4]
    f604:	cmp	r0, r2
    f608:	bge	10618 <ReadInt32Data+0x2b90>
    f60c:	mov	r1, r6
    f610:	sub	r6, r2, r0
    f614:	ldr	r0, [sp, #268]	; 0x10c
    f618:	add	r4, sp, #320	; 0x140
    f61c:	mov	r2, r6
    f620:	ldr	r3, [r0]
    f624:	mov	r0, r4
    f628:	bl	18b8 <fread@plt>
    f62c:	add	r5, r0, r5
    f630:	cmp	r6, #1
    f634:	blt	10614 <ReadInt32Data+0x2b8c>
    f638:	ldr	r0, [sp, #260]	; 0x104
    f63c:	sub	r6, r0, sl
    f640:	mov	r0, r4
    f644:	bl	1c2c <Mat_uint16Swap>
    f648:	str	r0, [r9], #4
    f64c:	subs	r6, r6, #1
    f650:	add	r4, r4, #2
    f654:	bne	f640 <ReadInt32Data+0x1bb8>
    f658:	b	10614 <ReadInt32Data+0x2b8c>
    f65c:	sub	r0, r7, #256	; 0x100
    f660:	add	r1, r8, #1024	; 0x400
    f664:	add	r4, sp, #320	; 0x140
    f668:	mov	r5, #0
    f66c:	str	sl, [sp, #268]	; 0x10c
    f670:	str	r7, [sp, #4]
    f674:	str	r0, [sp, #260]	; 0x104
    f678:	mov	r0, #0
    f67c:	mov	sl, r0
    f680:	ldr	r0, [sp, #268]	; 0x10c
    f684:	mov	r9, r1
    f688:	mov	r1, r6
    f68c:	mov	r2, #256	; 0x100
    f690:	ldr	r3, [r0]
    f694:	mov	r0, r4
    f698:	bl	18b8 <fread@plt>
    f69c:	mov	r7, r0
    f6a0:	mov	r6, #0
    f6a4:	add	r0, r4, r6
    f6a8:	bl	1bf0 <Mat_int32Swap>
    f6ac:	str	r0, [r8, r6]
    f6b0:	add	r6, r6, #4
    f6b4:	cmp	r6, #1024	; 0x400
    f6b8:	bne	f6a4 <ReadInt32Data+0x1c1c>
    f6bc:	ldr	r2, [sp, #260]	; 0x104
    f6c0:	ldr	r6, [sp, #264]	; 0x108
    f6c4:	add	r0, sl, #256	; 0x100
    f6c8:	add	r5, r7, r5
    f6cc:	add	r8, r8, #1024	; 0x400
    f6d0:	add	r1, r9, #1024	; 0x400
    f6d4:	cmp	r0, r2
    f6d8:	blt	f67c <ReadInt32Data+0x1bf4>
    f6dc:	ldr	r2, [sp, #4]
    f6e0:	cmp	r0, r2
    f6e4:	bge	10618 <ReadInt32Data+0x2b90>
    f6e8:	mov	r1, r6
    f6ec:	sub	r6, r2, r0
    f6f0:	ldr	r0, [sp, #268]	; 0x10c
    f6f4:	add	r4, sp, #320	; 0x140
    f6f8:	mov	r2, r6
    f6fc:	ldr	r3, [r0]
    f700:	mov	r0, r4
    f704:	bl	18b8 <fread@plt>
    f708:	add	r5, r0, r5
    f70c:	cmp	r6, #1
    f710:	blt	10614 <ReadInt32Data+0x2b8c>
    f714:	ldr	r0, [sp, #260]	; 0x104
    f718:	sub	r6, r0, sl
    f71c:	mov	r0, r4
    f720:	bl	1bf0 <Mat_int32Swap>
    f724:	str	r0, [r9], #4
    f728:	subs	r6, r6, #1
    f72c:	add	r4, r4, #4
    f730:	bne	f71c <ReadInt32Data+0x1c94>
    f734:	b	10614 <ReadInt32Data+0x2b8c>
    f738:	sub	r0, r7, #256	; 0x100
    f73c:	add	r1, r8, #1024	; 0x400
    f740:	add	r4, sp, #320	; 0x140
    f744:	mov	r5, #0
    f748:	str	sl, [sp, #268]	; 0x10c
    f74c:	str	r7, [sp, #4]
    f750:	str	r0, [sp, #260]	; 0x104
    f754:	mov	r0, #0
    f758:	mov	sl, r0
    f75c:	ldr	r0, [sp, #268]	; 0x10c
    f760:	mov	r9, r1
    f764:	mov	r1, r6
    f768:	mov	r2, #256	; 0x100
    f76c:	ldr	r3, [r0]
    f770:	mov	r0, r4
    f774:	bl	18b8 <fread@plt>
    f778:	mov	r7, r0
    f77c:	mov	r6, #0
    f780:	add	r0, r4, r6
    f784:	bl	1c04 <Mat_uint32Swap>
    f788:	str	r0, [r8, r6]
    f78c:	add	r6, r6, #4
    f790:	cmp	r6, #1024	; 0x400
    f794:	bne	f780 <ReadInt32Data+0x1cf8>
    f798:	ldr	r2, [sp, #260]	; 0x104
    f79c:	ldr	r6, [sp, #264]	; 0x108
    f7a0:	add	r0, sl, #256	; 0x100
    f7a4:	add	r5, r7, r5
    f7a8:	add	r8, r8, #1024	; 0x400
    f7ac:	add	r1, r9, #1024	; 0x400
    f7b0:	cmp	r0, r2
    f7b4:	blt	f758 <ReadInt32Data+0x1cd0>
    f7b8:	ldr	r2, [sp, #4]
    f7bc:	cmp	r0, r2
    f7c0:	bge	10618 <ReadInt32Data+0x2b90>
    f7c4:	mov	r1, r6
    f7c8:	sub	r6, r2, r0
    f7cc:	ldr	r0, [sp, #268]	; 0x10c
    f7d0:	add	r4, sp, #320	; 0x140
    f7d4:	mov	r2, r6
    f7d8:	ldr	r3, [r0]
    f7dc:	mov	r0, r4
    f7e0:	bl	18b8 <fread@plt>
    f7e4:	add	r5, r0, r5
    f7e8:	cmp	r6, #1
    f7ec:	blt	10614 <ReadInt32Data+0x2b8c>
    f7f0:	ldr	r0, [sp, #260]	; 0x104
    f7f4:	sub	r6, r0, sl
    f7f8:	mov	r0, r4
    f7fc:	bl	1c04 <Mat_uint32Swap>
    f800:	str	r0, [r9], #4
    f804:	subs	r6, r6, #1
    f808:	add	r4, r4, #4
    f80c:	bne	f7f8 <ReadInt32Data+0x1d70>
    f810:	b	10614 <ReadInt32Data+0x2b8c>
    f814:	sub	r0, r7, #256	; 0x100
    f818:	add	r1, r8, #1024	; 0x400
    f81c:	add	r4, sp, #320	; 0x140
    f820:	mov	r5, #0
    f824:	str	sl, [sp, #268]	; 0x10c
    f828:	str	r7, [sp, #4]
    f82c:	str	r0, [sp, #260]	; 0x104
    f830:	mov	r0, #0
    f834:	mov	sl, r0
    f838:	ldr	r0, [sp, #268]	; 0x10c
    f83c:	mov	r9, r1
    f840:	mov	r1, r6
    f844:	mov	r2, #256	; 0x100
    f848:	ldr	r3, [r0]
    f84c:	mov	r0, r4
    f850:	bl	18b8 <fread@plt>
    f854:	mov	r7, r0
    f858:	mov	r6, #0
    f85c:	add	r0, r4, r6
    f860:	bl	1c44 <Mat_floatSwap>
    f864:	vcvt.s32.f32	s0, s0
    f868:	vmov	r0, s0
    f86c:	str	r0, [r8, r6]
    f870:	add	r6, r6, #4
    f874:	cmp	r6, #1024	; 0x400
    f878:	bne	f85c <ReadInt32Data+0x1dd4>
    f87c:	ldr	r2, [sp, #260]	; 0x104
    f880:	ldr	r6, [sp, #264]	; 0x108
    f884:	add	r0, sl, #256	; 0x100
    f888:	add	r5, r7, r5
    f88c:	add	r8, r8, #1024	; 0x400
    f890:	add	r1, r9, #1024	; 0x400
    f894:	cmp	r0, r2
    f898:	blt	f834 <ReadInt32Data+0x1dac>
    f89c:	ldr	r2, [sp, #4]
    f8a0:	cmp	r0, r2
    f8a4:	bge	10618 <ReadInt32Data+0x2b90>
    f8a8:	mov	r1, r6
    f8ac:	sub	r6, r2, r0
    f8b0:	ldr	r0, [sp, #268]	; 0x10c
    f8b4:	add	r4, sp, #320	; 0x140
    f8b8:	mov	r2, r6
    f8bc:	ldr	r3, [r0]
    f8c0:	mov	r0, r4
    f8c4:	bl	18b8 <fread@plt>
    f8c8:	add	r5, r0, r5
    f8cc:	cmp	r6, #1
    f8d0:	blt	10614 <ReadInt32Data+0x2b8c>
    f8d4:	ldr	r0, [sp, #260]	; 0x104
    f8d8:	sub	r6, r0, sl
    f8dc:	mov	r0, r4
    f8e0:	bl	1c44 <Mat_floatSwap>
    f8e4:	vcvt.s32.f32	s0, s0
    f8e8:	subs	r6, r6, #1
    f8ec:	add	r4, r4, #4
    f8f0:	vmov	r0, s0
    f8f4:	str	r0, [r9], #4
    f8f8:	bne	f8dc <ReadInt32Data+0x1e54>
    f8fc:	b	10614 <ReadInt32Data+0x2b8c>
    f900:	sub	r0, r7, #256	; 0x100
    f904:	add	r1, r8, #1024	; 0x400
    f908:	mov	r5, #0
    f90c:	str	sl, [sp, #268]	; 0x10c
    f910:	str	r7, [sp, #4]
    f914:	str	r0, [sp, #260]	; 0x104
    f918:	mov	r0, #0
    f91c:	mov	sl, r0
    f920:	ldr	r0, [sp, #268]	; 0x10c
    f924:	add	r7, sp, #320	; 0x140
    f928:	mov	r9, r1
    f92c:	mov	r1, r6
    f930:	mov	r2, #256	; 0x100
    f934:	ldr	r3, [r0]
    f938:	mov	r0, r7
    f93c:	bl	18b8 <fread@plt>
    f940:	mov	r4, r0
    f944:	mov	r6, #0
    f948:	mov	r0, r7
    f94c:	bl	1c88 <Mat_doubleSwap>
    f950:	vcvt.s32.f64	s0, d0
    f954:	add	r7, r7, #8
    f958:	vmov	r0, s0
    f95c:	str	r0, [r8, r6, lsl #2]
    f960:	add	r6, r6, #1
    f964:	cmp	r6, #256	; 0x100
    f968:	bne	f948 <ReadInt32Data+0x1ec0>
    f96c:	ldr	r2, [sp, #260]	; 0x104
    f970:	ldr	r6, [sp, #264]	; 0x108
    f974:	add	r0, sl, #256	; 0x100
    f978:	add	r5, r4, r5
    f97c:	add	r8, r8, #1024	; 0x400
    f980:	add	r1, r9, #1024	; 0x400
    f984:	cmp	r0, r2
    f988:	blt	f91c <ReadInt32Data+0x1e94>
    f98c:	ldr	r2, [sp, #4]
    f990:	cmp	r0, r2
    f994:	bge	10618 <ReadInt32Data+0x2b90>
    f998:	mov	r1, r6
    f99c:	sub	r6, r2, r0
    f9a0:	ldr	r0, [sp, #268]	; 0x10c
    f9a4:	add	r4, sp, #320	; 0x140
    f9a8:	mov	r2, r6
    f9ac:	ldr	r3, [r0]
    f9b0:	mov	r0, r4
    f9b4:	bl	18b8 <fread@plt>
    f9b8:	add	r5, r0, r5
    f9bc:	cmp	r6, #1
    f9c0:	blt	10614 <ReadInt32Data+0x2b8c>
    f9c4:	ldr	r0, [sp, #260]	; 0x104
    f9c8:	sub	r6, r0, sl
    f9cc:	mov	r0, r4
    f9d0:	bl	1c88 <Mat_doubleSwap>
    f9d4:	vcvt.s32.f64	s0, d0
    f9d8:	subs	r6, r6, #1
    f9dc:	add	r4, r4, #8
    f9e0:	vmov	r0, s0
    f9e4:	str	r0, [r9], #4
    f9e8:	bne	f9cc <ReadInt32Data+0x1f44>
    f9ec:	b	10614 <ReadInt32Data+0x2b8c>
    f9f0:	sub	r0, r7, #256	; 0x100
    f9f4:	str	r5, [sp, #252]	; 0xfc
    f9f8:	add	r1, r8, #1024	; 0x400
    f9fc:	mov	r6, r8
    fa00:	mov	r5, #0
    fa04:	str	r7, [sp, #4]
    fa08:	str	sl, [sp, #268]	; 0x10c
    fa0c:	str	r0, [sp, #256]	; 0x100
    fa10:	mov	r0, #0
    fa14:	mov	r9, r1
    fa18:	ldr	r3, [sl]
    fa1c:	ldr	r1, [sp, #264]	; 0x108
    fa20:	add	r4, sp, #320	; 0x140
    fa24:	str	r0, [sp, #260]	; 0x104
    fa28:	mov	r2, #256	; 0x100
    fa2c:	mov	r0, r4
    fa30:	bl	18b8 <fread@plt>
    fa34:	mov	r7, r0
    fa38:	mov	sl, #0
    fa3c:	mov	r0, r4
    fa40:	bl	1b84 <Mat_int64Swap>
    fa44:	str	r0, [r6, sl, lsl #2]
    fa48:	add	sl, sl, #1
    fa4c:	add	r4, r4, #8
    fa50:	cmp	sl, #256	; 0x100
    fa54:	bne	fa3c <ReadInt32Data+0x1fb4>
    fa58:	ldr	r0, [sp, #260]	; 0x104
    fa5c:	ldr	r2, [sp, #256]	; 0x100
    fa60:	ldr	sl, [sp, #268]	; 0x10c
    fa64:	add	r5, r7, r5
    fa68:	add	r6, r6, #1024	; 0x400
    fa6c:	add	r1, r9, #1024	; 0x400
    fa70:	add	r0, r0, #256	; 0x100
    fa74:	cmp	r0, r2
    fa78:	blt	fa14 <ReadInt32Data+0x1f8c>
    fa7c:	ldr	r7, [sp, #4]
    fa80:	cmp	r0, r7
    fa84:	bge	102cc <ReadInt32Data+0x2844>
    fa88:	ldr	r6, [sp, #264]	; 0x108
    fa8c:	ldr	r3, [sl]
    fa90:	sub	r7, r7, r0
    fa94:	add	r4, sp, #320	; 0x140
    fa98:	mov	r0, r4
    fa9c:	mov	r2, r7
    faa0:	mov	r1, r6
    faa4:	bl	18b8 <fread@plt>
    faa8:	add	r5, r0, r5
    faac:	cmp	r7, #1
    fab0:	blt	fadc <ReadInt32Data+0x2054>
    fab4:	ldr	r0, [sp, #256]	; 0x100
    fab8:	ldr	r1, [sp, #260]	; 0x104
    fabc:	sub	r6, r0, r1
    fac0:	mov	r0, r4
    fac4:	bl	1b84 <Mat_int64Swap>
    fac8:	str	r0, [r9], #4
    facc:	subs	r6, r6, #1
    fad0:	add	r4, r4, #8
    fad4:	bne	fac0 <ReadInt32Data+0x2038>
    fad8:	ldr	r6, [sp, #264]	; 0x108
    fadc:	mov	r0, r5
    fae0:	ldr	r7, [sp, #4]
    fae4:	ldr	r5, [sp, #252]	; 0xfc
    fae8:	cmp	r5, #13
    faec:	beq	1032c <ReadInt32Data+0x28a4>
    faf0:	b	debc <ReadInt32Data+0x434>
    faf4:	sub	r1, r7, #256	; 0x100
    faf8:	str	r7, [sp, #4]
    fafc:	add	r0, r8, #1024	; 0x400
    fb00:	mov	r2, #256	; 0x100
    fb04:	add	r7, sp, #320	; 0x140
    fb08:	add	r5, sp, #288	; 0x120
    fb0c:	mov	r4, r8
    fb10:	mov	r9, #0
    fb14:	str	sl, [sp, #268]	; 0x10c
    fb18:	str	r1, [sp, #256]	; 0x100
    fb1c:	mov	r1, #0
    fb20:	mov	sl, r0
    fb24:	ldr	r0, [sp, #268]	; 0x10c
    fb28:	str	r1, [sp, #260]	; 0x104
    fb2c:	ldr	r1, [sp, #264]	; 0x108
    fb30:	mov	r6, r2
    fb34:	mov	r2, #256	; 0x100
    fb38:	ldr	r3, [r0]
    fb3c:	mov	r0, r7
    fb40:	bl	18b8 <fread@plt>
    fb44:	mov	r1, r4
    fb48:	mov	r2, #0
    fb4c:	ldr	r3, [r7, r2]
    fb50:	str	r3, [sp, #288]	; 0x120
    fb54:	add	r3, r7, r2
    fb58:	add	r2, r2, #8
    fb5c:	ldr	r3, [r3, #4]
    fb60:	cmp	r2, #512	; 0x200
    fb64:	str	r3, [sp, #292]	; 0x124
    fb68:	vld1.16	{d16}, [r5 :64]
    fb6c:	vmovl.s16	q8, d16
    fb70:	vst1.32	{d16-d17}, [r1]!
    fb74:	bne	fb4c <ReadInt32Data+0x20c4>
    fb78:	mov	r1, r6
    fb7c:	ldr	r3, [sp, #256]	; 0x100
    fb80:	add	r9, r0, r9
    fb84:	add	r4, r4, #1024	; 0x400
    fb88:	add	r0, sl, #1024	; 0x400
    fb8c:	add	r2, r6, #256	; 0x100
    fb90:	ldr	r1, [sp, #260]	; 0x104
    fb94:	add	r1, r1, #256	; 0x100
    fb98:	cmp	r1, r3
    fb9c:	blt	fb20 <ReadInt32Data+0x2098>
    fba0:	ldr	r0, [sp, #4]
    fba4:	cmp	r1, r0
    fba8:	bge	102b0 <ReadInt32Data+0x2828>
    fbac:	sub	r4, r0, r1
    fbb0:	ldr	r0, [sp, #268]	; 0x10c
    fbb4:	ldr	r1, [sp, #264]	; 0x108
    fbb8:	add	r7, sp, #320	; 0x140
    fbbc:	mov	r2, r4
    fbc0:	ldr	r3, [r0]
    fbc4:	mov	r0, r7
    fbc8:	bl	18b8 <fread@plt>
    fbcc:	mov	r5, r9
    fbd0:	cmp	r4, #1
    fbd4:	add	r5, r0, r9
    fbd8:	blt	10614 <ReadInt32Data+0x2b8c>
    fbdc:	cmp	r4, #4
    fbe0:	mov	r3, r4
    fbe4:	ldr	lr, [sp, #260]	; 0x104
    fbe8:	ldr	r4, [sp, #264]	; 0x108
    fbec:	mov	r0, #0
    fbf0:	mov	ip, r6
    fbf4:	bcc	fc44 <ReadInt32Data+0x21bc>
    fbf8:	ldr	r0, [sp, #256]	; 0x100
    fbfc:	add	r2, sp, #280	; 0x118
    fc00:	mov	r4, r3
    fc04:	sub	r0, r0, lr
    fc08:	bic	r1, r0, #3
    fc0c:	bic	r0, r3, #3
    fc10:	ldr	r3, [r7]
    fc14:	ldr	r6, [r7, #4]
    fc18:	subs	r1, r1, #4
    fc1c:	add	r7, r7, #8
    fc20:	str	r6, [sp, #284]	; 0x11c
    fc24:	str	r3, [sp, #280]	; 0x118
    fc28:	vld1.16	{d16}, [r2 :64]
    fc2c:	vmovl.s16	q8, d16
    fc30:	vst1.32	{d16-d17}, [sl]!
    fc34:	bne	fc10 <ReadInt32Data+0x2188>
    fc38:	cmp	r4, r0
    fc3c:	ldr	r4, [sp, #264]	; 0x108
    fc40:	beq	fc70 <ReadInt32Data+0x21e8>
    fc44:	ldr	r3, [sp, #256]	; 0x100
    fc48:	add	r1, sp, #320	; 0x140
    fc4c:	add	r2, r0, ip
    fc50:	add	r1, r1, r0, lsl #1
    fc54:	add	r2, r8, r2, lsl #2
    fc58:	sub	r3, r3, lr
    fc5c:	sub	r0, r3, r0
    fc60:	ldrsh	r3, [r1], #2
    fc64:	subs	r0, r0, #1
    fc68:	str	r3, [r2], #4
    fc6c:	bne	fc60 <ReadInt32Data+0x21d8>
    fc70:	mov	r6, r4
    fc74:	mul	r0, r5, r6
    fc78:	sub	sp, fp, #28
    fc7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fc80:	sub	r1, r7, #256	; 0x100
    fc84:	str	r7, [sp, #4]
    fc88:	add	r0, r8, #1024	; 0x400
    fc8c:	mov	r2, #256	; 0x100
    fc90:	add	r7, sp, #320	; 0x140
    fc94:	add	r5, sp, #312	; 0x138
    fc98:	mov	r4, r8
    fc9c:	mov	r9, #0
    fca0:	str	sl, [sp, #268]	; 0x10c
    fca4:	str	r1, [sp, #256]	; 0x100
    fca8:	mov	r1, #0
    fcac:	mov	sl, r0
    fcb0:	ldr	r0, [sp, #268]	; 0x10c
    fcb4:	str	r1, [sp, #260]	; 0x104
    fcb8:	ldr	r1, [sp, #264]	; 0x108
    fcbc:	mov	r6, r2
    fcc0:	mov	r2, #256	; 0x100
    fcc4:	ldr	r3, [r0]
    fcc8:	mov	r0, r7
    fccc:	bl	18b8 <fread@plt>
    fcd0:	mov	r1, r4
    fcd4:	mov	r2, #0
    fcd8:	ldr	r3, [r7, r2]
    fcdc:	str	r3, [sp, #312]	; 0x138
    fce0:	add	r3, r7, r2
    fce4:	add	r2, r2, #8
    fce8:	ldr	r3, [r3, #4]
    fcec:	cmp	r2, #512	; 0x200
    fcf0:	str	r3, [sp, #316]	; 0x13c
    fcf4:	vld1.16	{d16}, [r5 :64]
    fcf8:	vmovl.u16	q8, d16
    fcfc:	vst1.32	{d16-d17}, [r1]!
    fd00:	bne	fcd8 <ReadInt32Data+0x2250>
    fd04:	mov	r1, r6
    fd08:	ldr	r3, [sp, #256]	; 0x100
    fd0c:	add	r9, r0, r9
    fd10:	add	r4, r4, #1024	; 0x400
    fd14:	add	r0, sl, #1024	; 0x400
    fd18:	add	r2, r6, #256	; 0x100
    fd1c:	ldr	r1, [sp, #260]	; 0x104
    fd20:	add	r1, r1, #256	; 0x100
    fd24:	cmp	r1, r3
    fd28:	blt	fcac <ReadInt32Data+0x2224>
    fd2c:	ldr	r0, [sp, #4]
    fd30:	cmp	r1, r0
    fd34:	bge	102b0 <ReadInt32Data+0x2828>
    fd38:	sub	r4, r0, r1
    fd3c:	ldr	r0, [sp, #268]	; 0x10c
    fd40:	ldr	r1, [sp, #264]	; 0x108
    fd44:	add	r7, sp, #320	; 0x140
    fd48:	mov	r2, r4
    fd4c:	ldr	r3, [r0]
    fd50:	mov	r0, r7
    fd54:	bl	18b8 <fread@plt>
    fd58:	mov	r5, r9
    fd5c:	cmp	r4, #1
    fd60:	add	r5, r0, r9
    fd64:	blt	10614 <ReadInt32Data+0x2b8c>
    fd68:	cmp	r4, #4
    fd6c:	mov	r3, r4
    fd70:	ldr	lr, [sp, #260]	; 0x104
    fd74:	ldr	r4, [sp, #264]	; 0x108
    fd78:	mov	r0, #0
    fd7c:	mov	ip, r6
    fd80:	bcc	fdd0 <ReadInt32Data+0x2348>
    fd84:	ldr	r0, [sp, #256]	; 0x100
    fd88:	add	r2, sp, #304	; 0x130
    fd8c:	mov	r4, r3
    fd90:	sub	r0, r0, lr
    fd94:	bic	r1, r0, #3
    fd98:	bic	r0, r3, #3
    fd9c:	ldr	r3, [r7]
    fda0:	ldr	r6, [r7, #4]
    fda4:	subs	r1, r1, #4
    fda8:	add	r7, r7, #8
    fdac:	str	r6, [sp, #308]	; 0x134
    fdb0:	str	r3, [sp, #304]	; 0x130
    fdb4:	vld1.16	{d16}, [r2 :64]
    fdb8:	vmovl.u16	q8, d16
    fdbc:	vst1.32	{d16-d17}, [sl]!
    fdc0:	bne	fd9c <ReadInt32Data+0x2314>
    fdc4:	cmp	r4, r0
    fdc8:	ldr	r4, [sp, #264]	; 0x108
    fdcc:	beq	fdfc <ReadInt32Data+0x2374>
    fdd0:	ldr	r3, [sp, #256]	; 0x100
    fdd4:	add	r1, sp, #320	; 0x140
    fdd8:	add	r2, r0, ip
    fddc:	add	r1, r1, r0, lsl #1
    fde0:	add	r2, r8, r2, lsl #2
    fde4:	sub	r3, r3, lr
    fde8:	sub	r0, r3, r0
    fdec:	ldrh	r3, [r1], #2
    fdf0:	subs	r0, r0, #1
    fdf4:	str	r3, [r2], #4
    fdf8:	bne	fdec <ReadInt32Data+0x2364>
    fdfc:	mov	r6, r4
    fe00:	mul	r0, r5, r6
    fe04:	sub	sp, fp, #28
    fe08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fe0c:	mov	r0, r7
    fe10:	mov	r6, sl
    fe14:	lsl	r7, r7, #2
    fe18:	mov	r5, #0
    fe1c:	add	r9, sp, #320	; 0x140
    fe20:	mov	sl, #0
    fe24:	str	r0, [sp, #4]
    fe28:	sub	r0, r0, #256	; 0x100
    fe2c:	str	r0, [sp, #260]	; 0x104
    fe30:	ldr	r3, [r6]
    fe34:	ldr	r1, [sp, #264]	; 0x108
    fe38:	mov	r0, r9
    fe3c:	mov	r2, #256	; 0x100
    fe40:	bl	18b8 <fread@plt>
    fe44:	mov	r4, r0
    fe48:	add	r0, r8, r5, lsl #2
    fe4c:	mov	r1, r9
    fe50:	mov	r2, #1024	; 0x400
    fe54:	bl	181c <memcpy@plt>
    fe58:	ldr	r0, [sp, #260]	; 0x104
    fe5c:	add	r5, r5, #256	; 0x100
    fe60:	add	sl, r4, sl
    fe64:	sub	r7, r7, #1024	; 0x400
    fe68:	cmp	r5, r0
    fe6c:	blt	fe30 <ReadInt32Data+0x23a8>
    fe70:	ldr	r0, [sp, #4]
    fe74:	cmp	r5, r0
    fe78:	bge	102b8 <ReadInt32Data+0x2830>
    fe7c:	ldr	r3, [r6]
    fe80:	ldr	r6, [sp, #264]	; 0x108
    fe84:	sub	r4, r0, r5
    fe88:	add	r0, sp, #320	; 0x140
    fe8c:	mov	r2, r4
    fe90:	mov	r1, r6
    fe94:	bl	18b8 <fread@plt>
    fe98:	add	sl, r0, sl
    fe9c:	cmp	r4, #1
    fea0:	blt	feb4 <ReadInt32Data+0x242c>
    fea4:	add	r0, r8, r5, lsl #2
    fea8:	add	r1, sp, #320	; 0x140
    feac:	mov	r2, r7
    feb0:	bl	181c <memcpy@plt>
    feb4:	mov	r5, sl
    feb8:	mul	r0, r5, r6
    febc:	sub	sp, fp, #28
    fec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fec4:	sub	r1, r7, #256	; 0x100
    fec8:	add	r0, r8, #1024	; 0x400
    fecc:	mov	r2, #256	; 0x100
    fed0:	add	r4, sp, #320	; 0x140
    fed4:	mov	r6, r8
    fed8:	mov	r5, #0
    fedc:	str	sl, [sp, #268]	; 0x10c
    fee0:	str	r7, [sp, #4]
    fee4:	str	r1, [sp, #260]	; 0x104
    fee8:	mov	r1, #0
    feec:	mov	r9, r0
    fef0:	ldr	r0, [sp, #268]	; 0x10c
    fef4:	mov	r7, r1
    fef8:	ldr	r1, [sp, #264]	; 0x108
    fefc:	mov	sl, r2
    ff00:	mov	r2, #256	; 0x100
    ff04:	ldr	r3, [r0]
    ff08:	mov	r0, r4
    ff0c:	bl	18b8 <fread@plt>
    ff10:	mov	r1, #0
    ff14:	add	r2, r4, r1
    ff18:	vld1.32	{d16-d17}, [r2]
    ff1c:	add	r2, r6, r1
    ff20:	add	r1, r1, #16
    ff24:	cmp	r1, #1024	; 0x400
    ff28:	vcvt.s32.f32	q8, q8
    ff2c:	vst1.32	{d16-d17}, [r2]
    ff30:	bne	ff14 <ReadInt32Data+0x248c>
    ff34:	ldr	r3, [sp, #260]	; 0x104
    ff38:	add	r1, r7, #256	; 0x100
    ff3c:	add	r5, r0, r5
    ff40:	add	r6, r6, #1024	; 0x400
    ff44:	add	r0, r9, #1024	; 0x400
    ff48:	add	r2, sl, #256	; 0x100
    ff4c:	cmp	r1, r3
    ff50:	blt	feec <ReadInt32Data+0x2464>
    ff54:	ldr	r0, [sp, #4]
    ff58:	cmp	r1, r0
    ff5c:	bge	10614 <ReadInt32Data+0x2b8c>
    ff60:	sub	r2, r0, r1
    ff64:	ldr	r0, [sp, #268]	; 0x10c
    ff68:	ldr	r6, [sp, #264]	; 0x108
    ff6c:	add	r4, sp, #320	; 0x140
    ff70:	str	r2, [sp, #256]	; 0x100
    ff74:	ldr	r3, [r0]
    ff78:	mov	r0, r4
    ff7c:	mov	r1, r6
    ff80:	bl	18b8 <fread@plt>
    ff84:	ldr	r2, [sp, #256]	; 0x100
    ff88:	add	r5, r0, r5
    ff8c:	cmp	r2, #1
    ff90:	blt	10618 <ReadInt32Data+0x2b90>
    ff94:	mov	r0, #0
    ff98:	cmp	r2, #4
    ff9c:	bcc	ffcc <ReadInt32Data+0x2544>
    ffa0:	ldr	r0, [sp, #260]	; 0x104
    ffa4:	sub	r0, r0, r7
    ffa8:	bic	r1, r0, #3
    ffac:	bic	r0, r2, #3
    ffb0:	vld1.32	{d16-d17}, [r4]!
    ffb4:	subs	r1, r1, #4
    ffb8:	vcvt.s32.f32	q8, q8
    ffbc:	vst1.32	{d16-d17}, [r9]!
    ffc0:	bne	ffb0 <ReadInt32Data+0x2528>
    ffc4:	cmp	r2, r0
    ffc8:	beq	10618 <ReadInt32Data+0x2b90>
    ffcc:	ldr	r3, [sp, #260]	; 0x104
    ffd0:	add	r1, sp, #320	; 0x140
    ffd4:	add	r2, r0, sl
    ffd8:	add	r1, r1, r0, lsl #2
    ffdc:	add	r2, r8, r2, lsl #2
    ffe0:	sub	r3, r3, r7
    ffe4:	sub	r0, r3, r0
    ffe8:	vldr	s0, [r1]
    ffec:	subs	r0, r0, #1
    fff0:	add	r1, r1, #4
    fff4:	vcvt.s32.f32	s0, s0
    fff8:	vmov	r3, s0
    fffc:	str	r3, [r2], #4
   10000:	bne	ffe8 <ReadInt32Data+0x2560>
   10004:	b	10618 <ReadInt32Data+0x2b90>
   10008:	sub	r1, r7, #256	; 0x100
   1000c:	str	r7, [sp, #4]
   10010:	add	r0, r8, #1024	; 0x400
   10014:	mov	r2, #256	; 0x100
   10018:	mov	r5, r8
   1001c:	mov	r7, #0
   10020:	str	sl, [sp, #268]	; 0x10c
   10024:	str	r1, [sp, #256]	; 0x100
   10028:	mov	r1, #0
   1002c:	mov	r9, r0
   10030:	ldr	r0, [sp, #268]	; 0x10c
   10034:	add	r4, sp, #320	; 0x140
   10038:	str	r1, [sp, #260]	; 0x104
   1003c:	mov	sl, r2
   10040:	mov	r1, r6
   10044:	mov	r2, #256	; 0x100
   10048:	ldr	r3, [r0]
   1004c:	mov	r0, r4
   10050:	bl	18b8 <fread@plt>
   10054:	mov	r1, #0
   10058:	vld1.64	{d16-d17}, [r4]!
   1005c:	vcvt.s32.f64	s0, d16
   10060:	vmov	r3, s0
   10064:	vcvt.s32.f64	s0, d17
   10068:	vmov.32	d16[0], r3
   1006c:	add	r3, r5, r1
   10070:	vmov	r6, s0
   10074:	add	r1, r1, #8
   10078:	vmov.32	d16[1], r6
   1007c:	cmp	r1, #1024	; 0x400
   10080:	vstr	d16, [r3]
   10084:	bne	10058 <ReadInt32Data+0x25d0>
   10088:	add	r7, r0, r7
   1008c:	mov	r4, r9
   10090:	add	r0, r9, #1024	; 0x400
   10094:	ldr	r9, [sp, #260]	; 0x104
   10098:	ldr	r3, [sp, #256]	; 0x100
   1009c:	ldr	r6, [sp, #264]	; 0x108
   100a0:	add	r5, r5, #1024	; 0x400
   100a4:	add	r2, sl, #256	; 0x100
   100a8:	add	r1, r9, #256	; 0x100
   100ac:	cmp	r1, r3
   100b0:	blt	1002c <ReadInt32Data+0x25a4>
   100b4:	ldr	r0, [sp, #4]
   100b8:	cmp	r1, r0
   100bc:	bge	102f4 <ReadInt32Data+0x286c>
   100c0:	sub	r5, r0, r1
   100c4:	ldr	r0, [sp, #268]	; 0x10c
   100c8:	mov	r1, r6
   100cc:	mov	r2, r5
   100d0:	ldr	r3, [r0]
   100d4:	add	r0, sp, #320	; 0x140
   100d8:	bl	18b8 <fread@plt>
   100dc:	mov	r3, r5
   100e0:	mov	r5, r7
   100e4:	add	r5, r0, r7
   100e8:	cmp	r3, #1
   100ec:	blt	10618 <ReadInt32Data+0x2b90>
   100f0:	mov	r0, #0
   100f4:	beq	1013c <ReadInt32Data+0x26b4>
   100f8:	ldr	r0, [sp, #256]	; 0x100
   100fc:	add	r7, sp, #320	; 0x140
   10100:	sub	r0, r0, r9
   10104:	bic	r1, r0, #1
   10108:	bic	r0, r3, #1
   1010c:	vld1.64	{d16-d17}, [r7]!
   10110:	subs	r1, r1, #2
   10114:	vcvt.s32.f64	s0, d16
   10118:	vcvt.s32.f64	s2, d17
   1011c:	vmov	r2, s0
   10120:	vmov.32	d16[0], r2
   10124:	vmov	r2, s2
   10128:	vmov.32	d16[1], r2
   1012c:	vst1.32	{d16}, [r4]!
   10130:	bne	1010c <ReadInt32Data+0x2684>
   10134:	cmp	r3, r0
   10138:	beq	10618 <ReadInt32Data+0x2b90>
   1013c:	ldr	r3, [sp, #256]	; 0x100
   10140:	add	r1, sp, #320	; 0x140
   10144:	add	r2, r0, sl
   10148:	add	r1, r1, r0, lsl #3
   1014c:	add	r2, r8, r2, lsl #2
   10150:	sub	r3, r3, r9
   10154:	sub	r0, r3, r0
   10158:	vldr	d16, [r1]
   1015c:	subs	r0, r0, #1
   10160:	add	r1, r1, #8
   10164:	vcvt.s32.f64	s0, d16
   10168:	vmov	r3, s0
   1016c:	str	r3, [r2], #4
   10170:	bne	10158 <ReadInt32Data+0x26d0>
   10174:	b	10618 <ReadInt32Data+0x2b90>
   10178:	sub	r1, r7, #256	; 0x100
   1017c:	str	r5, [sp, #252]	; 0xfc
   10180:	str	r7, [sp, #4]
   10184:	add	r0, r8, #1024	; 0x400
   10188:	mov	r2, #256	; 0x100
   1018c:	mov	r5, r8
   10190:	mov	r7, #0
   10194:	str	sl, [sp, #268]	; 0x10c
   10198:	str	r1, [sp, #260]	; 0x104
   1019c:	mov	r1, #0
   101a0:	mov	r4, r0
   101a4:	ldr	r0, [sp, #268]	; 0x10c
   101a8:	mov	r9, r1
   101ac:	ldr	r1, [sp, #264]	; 0x108
   101b0:	add	sl, sp, #320	; 0x140
   101b4:	mov	r6, r2
   101b8:	mov	r2, #256	; 0x100
   101bc:	ldr	r3, [r0]
   101c0:	mov	r0, sl
   101c4:	bl	18b8 <fread@plt>
   101c8:	mov	r1, #0
   101cc:	vld1.64	{d16-d17}, [sl]!
   101d0:	add	r3, r5, r1
   101d4:	add	r1, r1, #8
   101d8:	cmp	r1, #1024	; 0x400
   101dc:	vmovn.i64	d16, q8
   101e0:	vstr	d16, [r3]
   101e4:	bne	101cc <ReadInt32Data+0x2744>
   101e8:	ldr	r3, [sp, #260]	; 0x104
   101ec:	add	r1, r9, #256	; 0x100
   101f0:	add	r7, r0, r7
   101f4:	add	r5, r5, #1024	; 0x400
   101f8:	add	r0, r4, #1024	; 0x400
   101fc:	add	r2, r6, #256	; 0x100
   10200:	cmp	r1, r3
   10204:	blt	101a0 <ReadInt32Data+0x2718>
   10208:	ldr	r2, [sp, #4]
   1020c:	cmp	r1, r2
   10210:	bge	10304 <ReadInt32Data+0x287c>
   10214:	ldr	r0, [sp, #268]	; 0x10c
   10218:	sub	sl, r2, r1
   1021c:	ldr	r1, [sp, #264]	; 0x108
   10220:	mov	r2, sl
   10224:	ldr	r3, [r0]
   10228:	add	r0, sp, #320	; 0x140
   1022c:	bl	18b8 <fread@plt>
   10230:	mov	r2, r7
   10234:	cmp	sl, #1
   10238:	add	r2, r0, r7
   1023c:	blt	10310 <ReadInt32Data+0x2888>
   10240:	ldr	r7, [sp, #4]
   10244:	mov	r5, #0
   10248:	beq	1027c <ReadInt32Data+0x27f4>
   1024c:	ldr	r0, [sp, #260]	; 0x104
   10250:	bic	r5, sl, #1
   10254:	sub	r0, r0, r9
   10258:	bic	r1, r0, #1
   1025c:	add	r0, sp, #320	; 0x140
   10260:	vld1.64	{d16-d17}, [r0]!
   10264:	subs	r1, r1, #2
   10268:	vmovn.i64	d16, q8
   1026c:	vst1.32	{d16}, [r4]!
   10270:	bne	10260 <ReadInt32Data+0x27d8>
   10274:	cmp	sl, r5
   10278:	beq	10314 <ReadInt32Data+0x288c>
   1027c:	ldr	r3, [sp, #260]	; 0x104
   10280:	add	r1, sp, #320	; 0x140
   10284:	mov	r0, r2
   10288:	add	r2, r5, r6
   1028c:	add	r1, r1, r5, lsl #3
   10290:	add	r2, r8, r2, lsl #2
   10294:	sub	r3, r3, r9
   10298:	sub	r5, r3, r5
   1029c:	ldr	r3, [r1], #8
   102a0:	subs	r5, r5, #1
   102a4:	str	r3, [r2], #4
   102a8:	bne	1029c <ReadInt32Data+0x2814>
   102ac:	b	10318 <ReadInt32Data+0x2890>
   102b0:	mov	r5, r9
   102b4:	b	10614 <ReadInt32Data+0x2b8c>
   102b8:	ldr	r6, [sp, #264]	; 0x108
   102bc:	mov	r5, sl
   102c0:	mul	r0, r5, r6
   102c4:	sub	sp, fp, #28
   102c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   102cc:	mov	r0, r5
   102d0:	ldr	r6, [sp, #264]	; 0x108
   102d4:	ldr	r5, [sp, #252]	; 0xfc
   102d8:	cmp	r5, #13
   102dc:	beq	1032c <ReadInt32Data+0x28a4>
   102e0:	b	debc <ReadInt32Data+0x434>
   102e4:	mov	r0, r9
   102e8:	cmp	r5, #13
   102ec:	beq	1032c <ReadInt32Data+0x28a4>
   102f0:	b	debc <ReadInt32Data+0x434>
   102f4:	mov	r5, r7
   102f8:	mul	r0, r5, r6
   102fc:	sub	sp, fp, #28
   10300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10304:	mov	r0, r7
   10308:	mov	r7, r2
   1030c:	b	10318 <ReadInt32Data+0x2890>
   10310:	ldr	r7, [sp, #4]
   10314:	mov	r0, r2
   10318:	ldr	sl, [sp, #268]	; 0x10c
   1031c:	ldr	r5, [sp, #252]	; 0xfc
   10320:	ldr	r6, [sp, #264]	; 0x108
   10324:	cmp	r5, #13
   10328:	bne	debc <ReadInt32Data+0x434>
   1032c:	ldr	r1, [sl, #20]
   10330:	mov	r5, r0
   10334:	cmp	r1, #0
   10338:	beq	10384 <ReadInt32Data+0x28fc>
   1033c:	cmp	r7, #256	; 0x100
   10340:	bgt	10404 <ReadInt32Data+0x297c>
   10344:	ldr	r3, [sl]
   10348:	add	r4, sp, #320	; 0x140
   1034c:	mov	r1, r6
   10350:	mov	r2, r7
   10354:	mov	r0, r4
   10358:	bl	18b8 <fread@plt>
   1035c:	add	r5, r0, r5
   10360:	cmp	r7, #1
   10364:	blt	10618 <ReadInt32Data+0x2b90>
   10368:	mov	r0, r4
   1036c:	bl	1bd4 <Mat_uint64Swap>
   10370:	str	r0, [r8], #4
   10374:	subs	r7, r7, #1
   10378:	add	r4, r4, #8
   1037c:	bne	10368 <ReadInt32Data+0x28e0>
   10380:	b	10618 <ReadInt32Data+0x2b90>
   10384:	cmp	r7, #256	; 0x100
   10388:	bgt	104e0 <ReadInt32Data+0x2a58>
   1038c:	ldr	r3, [sl]
   10390:	add	r4, sp, #320	; 0x140
   10394:	mov	r1, r6
   10398:	mov	r2, r7
   1039c:	mov	r0, r4
   103a0:	bl	18b8 <fread@plt>
   103a4:	add	r5, r0, r5
   103a8:	cmp	r7, #1
   103ac:	blt	10618 <ReadInt32Data+0x2b90>
   103b0:	mov	r0, #0
   103b4:	beq	103e0 <ReadInt32Data+0x2958>
   103b8:	bic	r0, r7, #1
   103bc:	mov	r2, r8
   103c0:	mov	r1, r0
   103c4:	vld1.64	{d16-d17}, [r4]!
   103c8:	subs	r1, r1, #2
   103cc:	vmovn.i64	d16, q8
   103d0:	vst1.32	{d16}, [r2]!
   103d4:	bne	103c4 <ReadInt32Data+0x293c>
   103d8:	cmp	r0, r7
   103dc:	beq	10618 <ReadInt32Data+0x2b90>
   103e0:	add	r3, sp, #320	; 0x140
   103e4:	sub	r1, r7, r0
   103e8:	add	r2, r8, r0, lsl #2
   103ec:	add	r0, r3, r0, lsl #3
   103f0:	ldr	r3, [r0], #8
   103f4:	subs	r1, r1, #1
   103f8:	str	r3, [r2], #4
   103fc:	bne	103f0 <ReadInt32Data+0x2968>
   10400:	b	10618 <ReadInt32Data+0x2b90>
   10404:	sub	r0, r7, #256	; 0x100
   10408:	add	r1, r8, #1024	; 0x400
   1040c:	str	sl, [sp, #268]	; 0x10c
   10410:	str	r7, [sp, #4]
   10414:	str	r0, [sp, #260]	; 0x104
   10418:	mov	r0, #0
   1041c:	mov	sl, r0
   10420:	ldr	r0, [sp, #268]	; 0x10c
   10424:	add	r4, sp, #320	; 0x140
   10428:	mov	r9, r1
   1042c:	mov	r1, r6
   10430:	mov	r2, #256	; 0x100
   10434:	ldr	r3, [r0]
   10438:	mov	r0, r4
   1043c:	bl	18b8 <fread@plt>
   10440:	mov	r7, r0
   10444:	mov	r6, #0
   10448:	mov	r0, r4
   1044c:	bl	1bd4 <Mat_uint64Swap>
   10450:	str	r0, [r8, r6, lsl #2]
   10454:	add	r6, r6, #1
   10458:	add	r4, r4, #8
   1045c:	cmp	r6, #256	; 0x100
   10460:	bne	10448 <ReadInt32Data+0x29c0>
   10464:	ldr	r2, [sp, #260]	; 0x104
   10468:	ldr	r6, [sp, #264]	; 0x108
   1046c:	add	r0, sl, #256	; 0x100
   10470:	add	r5, r7, r5
   10474:	add	r8, r8, #1024	; 0x400
   10478:	add	r1, r9, #1024	; 0x400
   1047c:	cmp	r0, r2
   10480:	blt	1041c <ReadInt32Data+0x2994>
   10484:	ldr	r2, [sp, #4]
   10488:	cmp	r0, r2
   1048c:	bge	10618 <ReadInt32Data+0x2b90>
   10490:	mov	r1, r6
   10494:	sub	r6, r2, r0
   10498:	ldr	r0, [sp, #268]	; 0x10c
   1049c:	add	r4, sp, #320	; 0x140
   104a0:	mov	r2, r6
   104a4:	ldr	r3, [r0]
   104a8:	mov	r0, r4
   104ac:	bl	18b8 <fread@plt>
   104b0:	add	r5, r0, r5
   104b4:	cmp	r6, #1
   104b8:	blt	10614 <ReadInt32Data+0x2b8c>
   104bc:	ldr	r0, [sp, #260]	; 0x104
   104c0:	sub	r6, r0, sl
   104c4:	mov	r0, r4
   104c8:	bl	1bd4 <Mat_uint64Swap>
   104cc:	str	r0, [r9], #4
   104d0:	subs	r6, r6, #1
   104d4:	add	r4, r4, #8
   104d8:	bne	104c4 <ReadInt32Data+0x2a3c>
   104dc:	b	10614 <ReadInt32Data+0x2b8c>
   104e0:	mov	r1, r7
   104e4:	mov	r7, r5
   104e8:	add	r0, r8, #1024	; 0x400
   104ec:	mov	r2, #256	; 0x100
   104f0:	mov	r5, r8
   104f4:	str	sl, [sp, #268]	; 0x10c
   104f8:	str	r1, [sp, #4]
   104fc:	sub	r1, r1, #256	; 0x100
   10500:	str	r1, [sp, #260]	; 0x104
   10504:	mov	r1, #0
   10508:	mov	sl, r0
   1050c:	ldr	r0, [sp, #268]	; 0x10c
   10510:	mov	r9, r1
   10514:	ldr	r1, [sp, #264]	; 0x108
   10518:	add	r4, sp, #320	; 0x140
   1051c:	mov	r6, r2
   10520:	mov	r2, #256	; 0x100
   10524:	ldr	r3, [r0]
   10528:	mov	r0, r4
   1052c:	bl	18b8 <fread@plt>
   10530:	mov	r1, #0
   10534:	vld1.64	{d16-d17}, [r4]!
   10538:	add	r3, r5, r1
   1053c:	add	r1, r1, #8
   10540:	cmp	r1, #1024	; 0x400
   10544:	vmovn.i64	d16, q8
   10548:	vstr	d16, [r3]
   1054c:	bne	10534 <ReadInt32Data+0x2aac>
   10550:	ldr	r3, [sp, #260]	; 0x104
   10554:	add	r1, r9, #256	; 0x100
   10558:	add	r7, r0, r7
   1055c:	add	r5, r5, #1024	; 0x400
   10560:	add	r0, sl, #1024	; 0x400
   10564:	add	r2, r6, #256	; 0x100
   10568:	cmp	r1, r3
   1056c:	blt	10508 <ReadInt32Data+0x2a80>
   10570:	ldr	r0, [sp, #4]
   10574:	cmp	r1, r0
   10578:	bge	10610 <ReadInt32Data+0x2b88>
   1057c:	sub	r4, r0, r1
   10580:	ldr	r0, [sp, #268]	; 0x10c
   10584:	ldr	r1, [sp, #264]	; 0x108
   10588:	mov	r2, r4
   1058c:	ldr	r3, [r0]
   10590:	add	r0, sp, #320	; 0x140
   10594:	bl	18b8 <fread@plt>
   10598:	mov	r5, r7
   1059c:	cmp	r4, #1
   105a0:	add	r5, r0, r7
   105a4:	blt	10614 <ReadInt32Data+0x2b8c>
   105a8:	mov	r0, #0
   105ac:	beq	105e0 <ReadInt32Data+0x2b58>
   105b0:	ldr	r0, [sp, #260]	; 0x104
   105b4:	add	r2, sp, #320	; 0x140
   105b8:	sub	r0, r0, r9
   105bc:	bic	r1, r0, #1
   105c0:	bic	r0, r4, #1
   105c4:	vld1.64	{d16-d17}, [r2]!
   105c8:	subs	r1, r1, #2
   105cc:	vmovn.i64	d16, q8
   105d0:	vst1.32	{d16}, [sl]!
   105d4:	bne	105c4 <ReadInt32Data+0x2b3c>
   105d8:	cmp	r4, r0
   105dc:	beq	10614 <ReadInt32Data+0x2b8c>
   105e0:	ldr	r3, [sp, #260]	; 0x104
   105e4:	add	r1, sp, #320	; 0x140
   105e8:	add	r2, r0, r6
   105ec:	add	r1, r1, r0, lsl #3
   105f0:	add	r2, r8, r2, lsl #2
   105f4:	sub	r3, r3, r9
   105f8:	sub	r0, r3, r0
   105fc:	ldr	r3, [r1], #8
   10600:	subs	r0, r0, #1
   10604:	str	r3, [r2], #4
   10608:	bne	105fc <ReadInt32Data+0x2b74>
   1060c:	b	10614 <ReadInt32Data+0x2b8c>
   10610:	mov	r5, r7
   10614:	ldr	r6, [sp, #264]	; 0x108
   10618:	mul	r0, r5, r6
   1061c:	sub	sp, fp, #28
   10620:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010624 <ReadCompressedInt32Data>:
   10624:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10628:	add	fp, sp, #28
   1062c:	sub	sp, sp, #12
   10630:	mov	r7, r0
   10634:	mov	r0, #0
   10638:	cmp	r1, #0
   1063c:	beq	10650 <ReadCompressedInt32Data+0x2c>
   10640:	cmp	r7, #0
   10644:	movne	r5, r2
   10648:	cmpne	r2, #0
   1064c:	bne	10658 <ReadCompressedInt32Data+0x34>
   10650:	sub	sp, fp, #28
   10654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10658:	ldr	sl, [fp, #8]
   1065c:	mov	r0, r3
   10660:	mov	r4, r3
   10664:	mov	r6, r1
   10668:	bl	1924 <Mat_SizeOf@plt>
   1066c:	mov	r9, r0
   10670:	sub	r0, r4, #1
   10674:	cmp	r0, #12
   10678:	bhi	10b48 <ReadCompressedInt32Data+0x524>
   1067c:	add	r1, pc, #4
   10680:	ldr	r0, [r1, r0, lsl #2]
   10684:	add	pc, r1, r0
   10688:	.word	0x00000034
   1068c:	.word	0x0000006c
   10690:	.word	0x000000a4
   10694:	.word	0x000000ec
   10698:	.word	0x00000134
   1069c:	.word	0x0000017c
   106a0:	.word	0x000001c4
   106a4:	.word	0x000004c0
   106a8:	.word	0x00000214
   106ac:	.word	0x000004c0
   106b0:	.word	0x000004c0
   106b4:	.word	0x00000264
   106b8:	.word	0x000002ac
   106bc:	cmp	sl, #1
   106c0:	blt	10b48 <ReadCompressedInt32Data+0x524>
   106c4:	mov	r8, sp
   106c8:	mov	r4, sl
   106cc:	mov	r0, r7
   106d0:	mov	r1, r6
   106d4:	mov	r2, r8
   106d8:	mov	r3, r9
   106dc:	bl	32fc <InflateData>
   106e0:	ldrsb	r0, [sp]
   106e4:	subs	r4, r4, #1
   106e8:	str	r0, [r5], #4
   106ec:	bne	106cc <ReadCompressedInt32Data+0xa8>
   106f0:	b	10b48 <ReadCompressedInt32Data+0x524>
   106f4:	cmp	sl, #1
   106f8:	blt	10b48 <ReadCompressedInt32Data+0x524>
   106fc:	mov	r8, sp
   10700:	mov	r4, sl
   10704:	mov	r0, r7
   10708:	mov	r1, r6
   1070c:	mov	r2, r8
   10710:	mov	r3, r9
   10714:	bl	32fc <InflateData>
   10718:	ldrb	r0, [sp]
   1071c:	subs	r4, r4, #1
   10720:	str	r0, [r5], #4
   10724:	bne	10704 <ReadCompressedInt32Data+0xe0>
   10728:	b	10b48 <ReadCompressedInt32Data+0x524>
   1072c:	ldr	r0, [r7, #20]
   10730:	cmp	r0, #0
   10734:	beq	1097c <ReadCompressedInt32Data+0x358>
   10738:	cmp	sl, #1
   1073c:	blt	10b48 <ReadCompressedInt32Data+0x524>
   10740:	mov	r8, sp
   10744:	mov	r4, sl
   10748:	mov	r0, r7
   1074c:	mov	r1, r6
   10750:	mov	r2, r8
   10754:	mov	r3, r9
   10758:	bl	32fc <InflateData>
   1075c:	mov	r0, r8
   10760:	bl	1c18 <Mat_int16Swap>
   10764:	str	r0, [r5], #4
   10768:	subs	r4, r4, #1
   1076c:	bne	10748 <ReadCompressedInt32Data+0x124>
   10770:	b	10b48 <ReadCompressedInt32Data+0x524>
   10774:	ldr	r0, [r7, #20]
   10778:	cmp	r0, #0
   1077c:	beq	109b4 <ReadCompressedInt32Data+0x390>
   10780:	cmp	sl, #1
   10784:	blt	10b48 <ReadCompressedInt32Data+0x524>
   10788:	mov	r8, sp
   1078c:	mov	r4, sl
   10790:	mov	r0, r7
   10794:	mov	r1, r6
   10798:	mov	r2, r8
   1079c:	mov	r3, r9
   107a0:	bl	32fc <InflateData>
   107a4:	mov	r0, r8
   107a8:	bl	1c2c <Mat_uint16Swap>
   107ac:	str	r0, [r5], #4
   107b0:	subs	r4, r4, #1
   107b4:	bne	10790 <ReadCompressedInt32Data+0x16c>
   107b8:	b	10b48 <ReadCompressedInt32Data+0x524>
   107bc:	ldr	r0, [r7, #20]
   107c0:	cmp	r0, #0
   107c4:	beq	109ec <ReadCompressedInt32Data+0x3c8>
   107c8:	cmp	sl, #1
   107cc:	blt	10b48 <ReadCompressedInt32Data+0x524>
   107d0:	mov	r8, sp
   107d4:	mov	r4, sl
   107d8:	mov	r0, r7
   107dc:	mov	r1, r6
   107e0:	mov	r2, r8
   107e4:	mov	r3, r9
   107e8:	bl	32fc <InflateData>
   107ec:	mov	r0, r8
   107f0:	bl	1bf0 <Mat_int32Swap>
   107f4:	str	r0, [r5], #4
   107f8:	subs	r4, r4, #1
   107fc:	bne	107d8 <ReadCompressedInt32Data+0x1b4>
   10800:	b	10b48 <ReadCompressedInt32Data+0x524>
   10804:	ldr	r0, [r7, #20]
   10808:	cmp	r0, #0
   1080c:	beq	10a24 <ReadCompressedInt32Data+0x400>
   10810:	cmp	sl, #1
   10814:	blt	10b48 <ReadCompressedInt32Data+0x524>
   10818:	mov	r8, sp
   1081c:	mov	r4, sl
   10820:	mov	r0, r7
   10824:	mov	r1, r6
   10828:	mov	r2, r8
   1082c:	mov	r3, r9
   10830:	bl	32fc <InflateData>
   10834:	mov	r0, r8
   10838:	bl	1c04 <Mat_uint32Swap>
   1083c:	str	r0, [r5], #4
   10840:	subs	r4, r4, #1
   10844:	bne	10820 <ReadCompressedInt32Data+0x1fc>
   10848:	b	10b48 <ReadCompressedInt32Data+0x524>
   1084c:	ldr	r0, [r7, #20]
   10850:	cmp	r0, #0
   10854:	beq	10a5c <ReadCompressedInt32Data+0x438>
   10858:	cmp	sl, #1
   1085c:	blt	10b48 <ReadCompressedInt32Data+0x524>
   10860:	mov	r8, sp
   10864:	mov	r4, sl
   10868:	mov	r0, r7
   1086c:	mov	r1, r6
   10870:	mov	r2, r8
   10874:	mov	r3, r9
   10878:	bl	32fc <InflateData>
   1087c:	mov	r0, r8
   10880:	bl	1c44 <Mat_floatSwap>
   10884:	vcvt.s32.f32	s0, s0
   10888:	subs	r4, r4, #1
   1088c:	vmov	r0, s0
   10890:	str	r0, [r5], #4
   10894:	bne	10868 <ReadCompressedInt32Data+0x244>
   10898:	b	10b48 <ReadCompressedInt32Data+0x524>
   1089c:	ldr	r0, [r7, #20]
   108a0:	cmp	r0, #0
   108a4:	beq	10a9c <ReadCompressedInt32Data+0x478>
   108a8:	cmp	sl, #1
   108ac:	blt	10b48 <ReadCompressedInt32Data+0x524>
   108b0:	mov	r8, sp
   108b4:	mov	r4, sl
   108b8:	mov	r0, r7
   108bc:	mov	r1, r6
   108c0:	mov	r2, r8
   108c4:	mov	r3, r9
   108c8:	bl	32fc <InflateData>
   108cc:	mov	r0, r8
   108d0:	bl	1c88 <Mat_doubleSwap>
   108d4:	vcvt.s32.f64	s0, d0
   108d8:	subs	r4, r4, #1
   108dc:	vmov	r0, s0
   108e0:	str	r0, [r5], #4
   108e4:	bne	108b8 <ReadCompressedInt32Data+0x294>
   108e8:	b	10b48 <ReadCompressedInt32Data+0x524>
   108ec:	ldr	r0, [r7, #20]
   108f0:	cmp	r0, #0
   108f4:	beq	10adc <ReadCompressedInt32Data+0x4b8>
   108f8:	cmp	sl, #1
   108fc:	blt	10b48 <ReadCompressedInt32Data+0x524>
   10900:	mov	r8, sp
   10904:	mov	r4, sl
   10908:	mov	r0, r7
   1090c:	mov	r1, r6
   10910:	mov	r2, r8
   10914:	mov	r3, r9
   10918:	bl	32fc <InflateData>
   1091c:	mov	r0, r8
   10920:	bl	1b84 <Mat_int64Swap>
   10924:	str	r0, [r5], #4
   10928:	subs	r4, r4, #1
   1092c:	bne	10908 <ReadCompressedInt32Data+0x2e4>
   10930:	b	10b48 <ReadCompressedInt32Data+0x524>
   10934:	ldr	r0, [r7, #20]
   10938:	cmp	r0, #0
   1093c:	beq	10b14 <ReadCompressedInt32Data+0x4f0>
   10940:	cmp	sl, #1
   10944:	blt	10b48 <ReadCompressedInt32Data+0x524>
   10948:	mov	r8, sp
   1094c:	mov	r4, sl
   10950:	mov	r0, r7
   10954:	mov	r1, r6
   10958:	mov	r2, r8
   1095c:	mov	r3, r9
   10960:	bl	32fc <InflateData>
   10964:	mov	r0, r8
   10968:	bl	1bd4 <Mat_uint64Swap>
   1096c:	str	r0, [r5], #4
   10970:	subs	r4, r4, #1
   10974:	bne	10950 <ReadCompressedInt32Data+0x32c>
   10978:	b	10b48 <ReadCompressedInt32Data+0x524>
   1097c:	cmp	sl, #1
   10980:	blt	10b48 <ReadCompressedInt32Data+0x524>
   10984:	mov	r8, sp
   10988:	mov	r4, sl
   1098c:	mov	r0, r7
   10990:	mov	r1, r6
   10994:	mov	r2, r8
   10998:	mov	r3, r9
   1099c:	bl	32fc <InflateData>
   109a0:	ldrsh	r0, [sp]
   109a4:	subs	r4, r4, #1
   109a8:	str	r0, [r5], #4
   109ac:	bne	1098c <ReadCompressedInt32Data+0x368>
   109b0:	b	10b48 <ReadCompressedInt32Data+0x524>
   109b4:	cmp	sl, #1
   109b8:	blt	10b48 <ReadCompressedInt32Data+0x524>
   109bc:	mov	r8, sp
   109c0:	mov	r4, sl
   109c4:	mov	r0, r7
   109c8:	mov	r1, r6
   109cc:	mov	r2, r8
   109d0:	mov	r3, r9
   109d4:	bl	32fc <InflateData>
   109d8:	ldrh	r0, [sp]
   109dc:	subs	r4, r4, #1
   109e0:	str	r0, [r5], #4
   109e4:	bne	109c4 <ReadCompressedInt32Data+0x3a0>
   109e8:	b	10b48 <ReadCompressedInt32Data+0x524>
   109ec:	cmp	sl, #1
   109f0:	blt	10b48 <ReadCompressedInt32Data+0x524>
   109f4:	mov	r8, sp
   109f8:	mov	r4, sl
   109fc:	mov	r0, r7
   10a00:	mov	r1, r6
   10a04:	mov	r2, r8
   10a08:	mov	r3, r9
   10a0c:	bl	32fc <InflateData>
   10a10:	ldr	r0, [sp]
   10a14:	subs	r4, r4, #1
   10a18:	str	r0, [r5], #4
   10a1c:	bne	109fc <ReadCompressedInt32Data+0x3d8>
   10a20:	b	10b48 <ReadCompressedInt32Data+0x524>
   10a24:	cmp	sl, #1
   10a28:	blt	10b48 <ReadCompressedInt32Data+0x524>
   10a2c:	mov	r8, sp
   10a30:	mov	r4, sl
   10a34:	mov	r0, r7
   10a38:	mov	r1, r6
   10a3c:	mov	r2, r8
   10a40:	mov	r3, r9
   10a44:	bl	32fc <InflateData>
   10a48:	ldr	r0, [sp]
   10a4c:	subs	r4, r4, #1
   10a50:	str	r0, [r5], #4
   10a54:	bne	10a34 <ReadCompressedInt32Data+0x410>
   10a58:	b	10b48 <ReadCompressedInt32Data+0x524>
   10a5c:	cmp	sl, #1
   10a60:	blt	10b48 <ReadCompressedInt32Data+0x524>
   10a64:	mov	r8, sp
   10a68:	mov	r4, sl
   10a6c:	mov	r0, r7
   10a70:	mov	r1, r6
   10a74:	mov	r2, r8
   10a78:	mov	r3, r9
   10a7c:	bl	32fc <InflateData>
   10a80:	vldr	s0, [sp]
   10a84:	subs	r4, r4, #1
   10a88:	vcvt.s32.f32	s0, s0
   10a8c:	vmov	r0, s0
   10a90:	str	r0, [r5], #4
   10a94:	bne	10a6c <ReadCompressedInt32Data+0x448>
   10a98:	b	10b48 <ReadCompressedInt32Data+0x524>
   10a9c:	cmp	sl, #1
   10aa0:	blt	10b48 <ReadCompressedInt32Data+0x524>
   10aa4:	mov	r8, sp
   10aa8:	mov	r4, sl
   10aac:	mov	r0, r7
   10ab0:	mov	r1, r6
   10ab4:	mov	r2, r8
   10ab8:	mov	r3, r9
   10abc:	bl	32fc <InflateData>
   10ac0:	vldr	d16, [sp]
   10ac4:	subs	r4, r4, #1
   10ac8:	vcvt.s32.f64	s0, d16
   10acc:	vmov	r0, s0
   10ad0:	str	r0, [r5], #4
   10ad4:	bne	10aac <ReadCompressedInt32Data+0x488>
   10ad8:	b	10b48 <ReadCompressedInt32Data+0x524>
   10adc:	cmp	sl, #1
   10ae0:	blt	10b48 <ReadCompressedInt32Data+0x524>
   10ae4:	mov	r8, sp
   10ae8:	mov	r4, sl
   10aec:	mov	r0, r7
   10af0:	mov	r1, r6
   10af4:	mov	r2, r8
   10af8:	mov	r3, r9
   10afc:	bl	32fc <InflateData>
   10b00:	ldr	r0, [sp]
   10b04:	subs	r4, r4, #1
   10b08:	str	r0, [r5], #4
   10b0c:	bne	10aec <ReadCompressedInt32Data+0x4c8>
   10b10:	b	10b48 <ReadCompressedInt32Data+0x524>
   10b14:	cmp	sl, #1
   10b18:	blt	10b48 <ReadCompressedInt32Data+0x524>
   10b1c:	mov	r8, sp
   10b20:	mov	r4, sl
   10b24:	mov	r0, r7
   10b28:	mov	r1, r6
   10b2c:	mov	r2, r8
   10b30:	mov	r3, r9
   10b34:	bl	32fc <InflateData>
   10b38:	ldr	r0, [sp]
   10b3c:	subs	r4, r4, #1
   10b40:	str	r0, [r5], #4
   10b44:	bne	10b24 <ReadCompressedInt32Data+0x500>
   10b48:	mul	r0, r9, sl
   10b4c:	sub	sp, fp, #28
   10b50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010b54 <ReadUInt32Data>:
   10b54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b58:	add	fp, sp, #28
   10b5c:	sub	sp, sp, #324	; 0x144
   10b60:	sub	sp, sp, #2048	; 0x800
   10b64:	mov	sl, r0
   10b68:	mov	r0, #0
   10b6c:	cmp	sl, #0
   10b70:	beq	10b88 <ReadUInt32Data+0x34>
   10b74:	cmp	r1, #0
   10b78:	mov	r8, r1
   10b7c:	ldrne	r1, [sl]
   10b80:	cmpne	r1, #0
   10b84:	bne	10b90 <ReadUInt32Data+0x3c>
   10b88:	sub	sp, fp, #28
   10b8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b90:	mov	r0, r2
   10b94:	mov	r7, r3
   10b98:	mov	r5, r2
   10b9c:	bl	1924 <Mat_SizeOf@plt>
   10ba0:	sub	r2, r5, #1
   10ba4:	mov	r6, r0
   10ba8:	mov	r0, #0
   10bac:	cmp	r2, #11
   10bb0:	str	r6, [sp, #264]	; 0x108
   10bb4:	bhi	133f0 <ReadUInt32Data+0x289c>
   10bb8:	add	r1, pc, #4
   10bbc:	ldr	r2, [r1, r2, lsl #2]
   10bc0:	add	pc, r1, r2
   10bc4:	.word	0x00000030
   10bc8:	.word	0x000000bc
   10bcc:	.word	0x00000148
   10bd0:	.word	0x0000019c
   10bd4:	.word	0x000001f0
   10bd8:	.word	0x00000244
   10bdc:	.word	0x00000298
   10be0:	.word	0x0000282c
   10be4:	.word	0x000002f4
   10be8:	.word	0x0000282c
   10bec:	.word	0x0000282c
   10bf0:	.word	0x00000350
   10bf4:	cmp	r7, #256	; 0x100
   10bf8:	bgt	10f98 <ReadUInt32Data+0x444>
   10bfc:	ldr	r3, [sl]
   10c00:	add	r4, sp, #320	; 0x140
   10c04:	mov	r1, r6
   10c08:	mov	r2, r7
   10c0c:	mov	r0, r4
   10c10:	bl	18b8 <fread@plt>
   10c14:	mov	r5, r0
   10c18:	cmp	r7, #1
   10c1c:	blt	136e4 <ReadUInt32Data+0x2b90>
   10c20:	mov	r0, #0
   10c24:	cmp	r7, #4
   10c28:	bcc	10c5c <ReadUInt32Data+0x108>
   10c2c:	bic	r0, r7, #3
   10c30:	mov	r2, r8
   10c34:	mov	r1, r0
   10c38:	vld1.32	{d16[0]}, [r4 :32]
   10c3c:	subs	r1, r1, #4
   10c40:	add	r4, r4, #4
   10c44:	vmovl.s8	q8, d16
   10c48:	vmovl.s16	q8, d16
   10c4c:	vst1.32	{d16-d17}, [r2]!
   10c50:	bne	10c38 <ReadUInt32Data+0xe4>
   10c54:	cmp	r0, r7
   10c58:	beq	136e4 <ReadUInt32Data+0x2b90>
   10c5c:	add	r3, sp, #320	; 0x140
   10c60:	sub	r1, r7, r0
   10c64:	add	r2, r8, r0, lsl #2
   10c68:	add	r0, r3, r0
   10c6c:	ldrsb	r3, [r0], #1
   10c70:	subs	r1, r1, #1
   10c74:	str	r3, [r2], #4
   10c78:	bne	10c6c <ReadUInt32Data+0x118>
   10c7c:	b	136e4 <ReadUInt32Data+0x2b90>
   10c80:	cmp	r7, #256	; 0x100
   10c84:	bgt	11884 <ReadUInt32Data+0xd30>
   10c88:	ldr	r3, [sl]
   10c8c:	add	r4, sp, #320	; 0x140
   10c90:	mov	r1, r6
   10c94:	mov	r2, r7
   10c98:	mov	r0, r4
   10c9c:	bl	18b8 <fread@plt>
   10ca0:	mov	r5, r0
   10ca4:	cmp	r7, #1
   10ca8:	blt	136e4 <ReadUInt32Data+0x2b90>
   10cac:	mov	r0, #0
   10cb0:	cmp	r7, #4
   10cb4:	bcc	10ce8 <ReadUInt32Data+0x194>
   10cb8:	bic	r0, r7, #3
   10cbc:	mov	r2, r8
   10cc0:	mov	r1, r0
   10cc4:	vld1.32	{d16[0]}, [r4 :32]
   10cc8:	subs	r1, r1, #4
   10ccc:	add	r4, r4, #4
   10cd0:	vmovl.u8	q8, d16
   10cd4:	vmovl.u16	q8, d16
   10cd8:	vst1.32	{d16-d17}, [r2]!
   10cdc:	bne	10cc4 <ReadUInt32Data+0x170>
   10ce0:	cmp	r0, r7
   10ce4:	beq	136e4 <ReadUInt32Data+0x2b90>
   10ce8:	add	r3, sp, #320	; 0x140
   10cec:	sub	r1, r7, r0
   10cf0:	add	r2, r8, r0, lsl #2
   10cf4:	add	r0, r3, r0
   10cf8:	ldrb	r3, [r0], #1
   10cfc:	subs	r1, r1, #1
   10d00:	str	r3, [r2], #4
   10d04:	bne	10cf8 <ReadUInt32Data+0x1a4>
   10d08:	b	136e4 <ReadUInt32Data+0x2b90>
   10d0c:	ldr	r0, [sl, #20]
   10d10:	cmp	r0, #0
   10d14:	beq	12170 <ReadUInt32Data+0x161c>
   10d18:	cmp	r7, #256	; 0x100
   10d1c:	bgt	12570 <ReadUInt32Data+0x1a1c>
   10d20:	ldr	r3, [sl]
   10d24:	add	r4, sp, #320	; 0x140
   10d28:	mov	r1, r6
   10d2c:	mov	r2, r7
   10d30:	mov	r0, r4
   10d34:	bl	18b8 <fread@plt>
   10d38:	mov	r5, r0
   10d3c:	cmp	r7, #1
   10d40:	blt	136e4 <ReadUInt32Data+0x2b90>
   10d44:	mov	r0, r4
   10d48:	bl	1c18 <Mat_int16Swap>
   10d4c:	str	r0, [r8], #4
   10d50:	subs	r7, r7, #1
   10d54:	add	r4, r4, #2
   10d58:	bne	10d44 <ReadUInt32Data+0x1f0>
   10d5c:	b	136e4 <ReadUInt32Data+0x2b90>
   10d60:	ldr	r0, [sl, #20]
   10d64:	cmp	r0, #0
   10d68:	beq	12218 <ReadUInt32Data+0x16c4>
   10d6c:	cmp	r7, #256	; 0x100
   10d70:	bgt	1264c <ReadUInt32Data+0x1af8>
   10d74:	ldr	r3, [sl]
   10d78:	add	r4, sp, #320	; 0x140
   10d7c:	mov	r1, r6
   10d80:	mov	r2, r7
   10d84:	mov	r0, r4
   10d88:	bl	18b8 <fread@plt>
   10d8c:	mov	r5, r0
   10d90:	cmp	r7, #1
   10d94:	blt	136e4 <ReadUInt32Data+0x2b90>
   10d98:	mov	r0, r4
   10d9c:	bl	1c2c <Mat_uint16Swap>
   10da0:	str	r0, [r8], #4
   10da4:	subs	r7, r7, #1
   10da8:	add	r4, r4, #2
   10dac:	bne	10d98 <ReadUInt32Data+0x244>
   10db0:	b	136e4 <ReadUInt32Data+0x2b90>
   10db4:	ldr	r0, [sl, #20]
   10db8:	cmp	r0, #0
   10dbc:	beq	122c0 <ReadUInt32Data+0x176c>
   10dc0:	cmp	r7, #256	; 0x100
   10dc4:	bgt	12728 <ReadUInt32Data+0x1bd4>
   10dc8:	ldr	r3, [sl]
   10dcc:	add	r4, sp, #320	; 0x140
   10dd0:	mov	r1, r6
   10dd4:	mov	r2, r7
   10dd8:	mov	r0, r4
   10ddc:	bl	18b8 <fread@plt>
   10de0:	mov	r5, r0
   10de4:	cmp	r7, #1
   10de8:	blt	136e4 <ReadUInt32Data+0x2b90>
   10dec:	mov	r0, r4
   10df0:	bl	1bf0 <Mat_int32Swap>
   10df4:	str	r0, [r8], #4
   10df8:	subs	r7, r7, #1
   10dfc:	add	r4, r4, #4
   10e00:	bne	10dec <ReadUInt32Data+0x298>
   10e04:	b	136e4 <ReadUInt32Data+0x2b90>
   10e08:	ldr	r0, [sl, #20]
   10e0c:	cmp	r0, #0
   10e10:	beq	12380 <ReadUInt32Data+0x182c>
   10e14:	cmp	r7, #256	; 0x100
   10e18:	bgt	12804 <ReadUInt32Data+0x1cb0>
   10e1c:	ldr	r3, [sl]
   10e20:	add	r4, sp, #320	; 0x140
   10e24:	mov	r1, r6
   10e28:	mov	r2, r7
   10e2c:	mov	r0, r4
   10e30:	bl	18b8 <fread@plt>
   10e34:	mov	r5, r0
   10e38:	cmp	r7, #1
   10e3c:	blt	136e4 <ReadUInt32Data+0x2b90>
   10e40:	mov	r0, r4
   10e44:	bl	1c04 <Mat_uint32Swap>
   10e48:	str	r0, [r8], #4
   10e4c:	subs	r7, r7, #1
   10e50:	add	r4, r4, #4
   10e54:	bne	10e40 <ReadUInt32Data+0x2ec>
   10e58:	b	136e4 <ReadUInt32Data+0x2b90>
   10e5c:	ldr	r0, [sl, #20]
   10e60:	cmp	r0, #0
   10e64:	beq	123c4 <ReadUInt32Data+0x1870>
   10e68:	cmp	r7, #256	; 0x100
   10e6c:	bgt	128e0 <ReadUInt32Data+0x1d8c>
   10e70:	ldr	r3, [sl]
   10e74:	add	r4, sp, #320	; 0x140
   10e78:	mov	r1, r6
   10e7c:	mov	r2, r7
   10e80:	mov	r0, r4
   10e84:	bl	18b8 <fread@plt>
   10e88:	mov	r5, r0
   10e8c:	cmp	r7, #1
   10e90:	blt	136e4 <ReadUInt32Data+0x2b90>
   10e94:	mov	r0, r4
   10e98:	bl	1c44 <Mat_floatSwap>
   10e9c:	vcvt.u32.f32	s0, s0
   10ea0:	subs	r7, r7, #1
   10ea4:	add	r4, r4, #4
   10ea8:	vmov	r0, s0
   10eac:	str	r0, [r8], #4
   10eb0:	bne	10e94 <ReadUInt32Data+0x340>
   10eb4:	b	136e4 <ReadUInt32Data+0x2b90>
   10eb8:	ldr	r0, [sl, #20]
   10ebc:	cmp	r0, #0
   10ec0:	beq	12454 <ReadUInt32Data+0x1900>
   10ec4:	cmp	r7, #256	; 0x100
   10ec8:	bgt	129cc <ReadUInt32Data+0x1e78>
   10ecc:	ldr	r3, [sl]
   10ed0:	add	r4, sp, #320	; 0x140
   10ed4:	mov	r1, r6
   10ed8:	mov	r2, r7
   10edc:	mov	r0, r4
   10ee0:	bl	18b8 <fread@plt>
   10ee4:	mov	r5, r0
   10ee8:	cmp	r7, #1
   10eec:	blt	136e4 <ReadUInt32Data+0x2b90>
   10ef0:	mov	r0, r4
   10ef4:	bl	1c88 <Mat_doubleSwap>
   10ef8:	vcvt.u32.f64	s0, d0
   10efc:	subs	r7, r7, #1
   10f00:	add	r4, r4, #8
   10f04:	vmov	r0, s0
   10f08:	str	r0, [r8], #4
   10f0c:	bne	10ef0 <ReadUInt32Data+0x39c>
   10f10:	b	136e4 <ReadUInt32Data+0x2b90>
   10f14:	ldr	r0, [sl, #20]
   10f18:	cmp	r0, #0
   10f1c:	beq	124f4 <ReadUInt32Data+0x19a0>
   10f20:	cmp	r7, #256	; 0x100
   10f24:	bgt	12abc <ReadUInt32Data+0x1f68>
   10f28:	ldr	r3, [sl]
   10f2c:	add	r4, sp, #320	; 0x140
   10f30:	mov	r1, r6
   10f34:	mov	r2, r7
   10f38:	mov	r0, r4
   10f3c:	bl	18b8 <fread@plt>
   10f40:	mov	r9, r0
   10f44:	cmp	r7, #1
   10f48:	blt	133b0 <ReadUInt32Data+0x285c>
   10f4c:	str	r5, [sp, #252]	; 0xfc
   10f50:	mov	r5, r7
   10f54:	mov	r6, r8
   10f58:	mov	r0, r7
   10f5c:	mov	r0, r4
   10f60:	bl	1b84 <Mat_int64Swap>
   10f64:	str	r0, [r6], #4
   10f68:	subs	r5, r5, #1
   10f6c:	add	r4, r4, #8
   10f70:	bne	10f5c <ReadUInt32Data+0x408>
   10f74:	ldr	r6, [sp, #264]	; 0x108
   10f78:	ldr	r5, [sp, #252]	; 0xfc
   10f7c:	mov	r0, r9
   10f80:	cmp	r5, #13
   10f84:	beq	133f8 <ReadUInt32Data+0x28a4>
   10f88:	mov	r5, r0
   10f8c:	mul	r0, r5, r6
   10f90:	sub	sp, fp, #28
   10f94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f98:	mov	r0, r7
   10f9c:	add	r7, sp, #320	; 0x140
   10fa0:	str	sl, [sp, #268]	; 0x10c
   10fa4:	mov	sl, #0
   10fa8:	mov	r4, r8
   10fac:	mov	r5, #0
   10fb0:	mov	r9, r8
   10fb4:	add	r1, r7, #252	; 0xfc
   10fb8:	str	r0, [sp, #4]
   10fbc:	sub	r0, r0, #256	; 0x100
   10fc0:	str	r1, [sp, #260]	; 0x104
   10fc4:	add	r1, r7, #248	; 0xf8
   10fc8:	str	r0, [sp, #8]
   10fcc:	str	r1, [sp, #256]	; 0x100
   10fd0:	add	r1, r7, #244	; 0xf4
   10fd4:	str	r1, [sp, #252]	; 0xfc
   10fd8:	add	r1, r7, #240	; 0xf0
   10fdc:	str	r1, [sp, #248]	; 0xf8
   10fe0:	add	r1, r7, #236	; 0xec
   10fe4:	str	r1, [sp, #244]	; 0xf4
   10fe8:	add	r1, r7, #232	; 0xe8
   10fec:	str	r1, [sp, #240]	; 0xf0
   10ff0:	add	r1, r7, #228	; 0xe4
   10ff4:	str	r1, [sp, #236]	; 0xec
   10ff8:	add	r1, r7, #224	; 0xe0
   10ffc:	str	r1, [sp, #232]	; 0xe8
   11000:	add	r1, r7, #220	; 0xdc
   11004:	str	r1, [sp, #228]	; 0xe4
   11008:	add	r1, r7, #216	; 0xd8
   1100c:	str	r1, [sp, #224]	; 0xe0
   11010:	add	r1, r7, #212	; 0xd4
   11014:	str	r1, [sp, #220]	; 0xdc
   11018:	add	r1, r7, #208	; 0xd0
   1101c:	str	r1, [sp, #216]	; 0xd8
   11020:	add	r1, r7, #204	; 0xcc
   11024:	str	r1, [sp, #212]	; 0xd4
   11028:	add	r1, r7, #200	; 0xc8
   1102c:	str	r1, [sp, #208]	; 0xd0
   11030:	add	r1, r7, #196	; 0xc4
   11034:	str	r1, [sp, #204]	; 0xcc
   11038:	add	r1, r7, #192	; 0xc0
   1103c:	str	r1, [sp, #200]	; 0xc8
   11040:	add	r1, r7, #188	; 0xbc
   11044:	str	r1, [sp, #196]	; 0xc4
   11048:	add	r1, r7, #184	; 0xb8
   1104c:	str	r1, [sp, #192]	; 0xc0
   11050:	add	r1, r7, #180	; 0xb4
   11054:	str	r1, [sp, #188]	; 0xbc
   11058:	add	r1, r7, #176	; 0xb0
   1105c:	str	r1, [sp, #184]	; 0xb8
   11060:	add	r1, r7, #172	; 0xac
   11064:	str	r1, [sp, #180]	; 0xb4
   11068:	add	r1, r7, #168	; 0xa8
   1106c:	str	r1, [sp, #176]	; 0xb0
   11070:	add	r1, r7, #164	; 0xa4
   11074:	str	r1, [sp, #172]	; 0xac
   11078:	add	r1, r7, #160	; 0xa0
   1107c:	str	r1, [sp, #168]	; 0xa8
   11080:	add	r1, r7, #156	; 0x9c
   11084:	str	r1, [sp, #164]	; 0xa4
   11088:	add	r1, r7, #152	; 0x98
   1108c:	str	r1, [sp, #160]	; 0xa0
   11090:	add	r1, r7, #148	; 0x94
   11094:	str	r1, [sp, #156]	; 0x9c
   11098:	add	r1, r7, #144	; 0x90
   1109c:	str	r1, [sp, #152]	; 0x98
   110a0:	add	r1, r7, #140	; 0x8c
   110a4:	str	r1, [sp, #148]	; 0x94
   110a8:	add	r1, r7, #136	; 0x88
   110ac:	str	r1, [sp, #144]	; 0x90
   110b0:	add	r1, r7, #132	; 0x84
   110b4:	str	r1, [sp, #140]	; 0x8c
   110b8:	add	r1, r7, #128	; 0x80
   110bc:	str	r1, [sp, #136]	; 0x88
   110c0:	add	r1, r7, #124	; 0x7c
   110c4:	str	r1, [sp, #132]	; 0x84
   110c8:	add	r1, r7, #120	; 0x78
   110cc:	str	r1, [sp, #128]	; 0x80
   110d0:	add	r1, r7, #116	; 0x74
   110d4:	str	r1, [sp, #124]	; 0x7c
   110d8:	add	r1, r7, #112	; 0x70
   110dc:	str	r1, [sp, #120]	; 0x78
   110e0:	add	r1, r7, #108	; 0x6c
   110e4:	str	r1, [sp, #116]	; 0x74
   110e8:	add	r1, r7, #104	; 0x68
   110ec:	str	r1, [sp, #112]	; 0x70
   110f0:	add	r1, r7, #100	; 0x64
   110f4:	str	r1, [sp, #108]	; 0x6c
   110f8:	add	r1, r7, #96	; 0x60
   110fc:	str	r1, [sp, #104]	; 0x68
   11100:	add	r1, r7, #92	; 0x5c
   11104:	str	r1, [sp, #100]	; 0x64
   11108:	add	r1, r7, #88	; 0x58
   1110c:	str	r1, [sp, #96]	; 0x60
   11110:	add	r1, r7, #84	; 0x54
   11114:	str	r1, [sp, #92]	; 0x5c
   11118:	add	r1, r7, #80	; 0x50
   1111c:	str	r1, [sp, #88]	; 0x58
   11120:	add	r1, r7, #76	; 0x4c
   11124:	str	r1, [sp, #84]	; 0x54
   11128:	add	r1, r7, #72	; 0x48
   1112c:	str	r1, [sp, #80]	; 0x50
   11130:	add	r1, r7, #68	; 0x44
   11134:	str	r1, [sp, #76]	; 0x4c
   11138:	add	r1, r7, #64	; 0x40
   1113c:	str	r1, [sp, #72]	; 0x48
   11140:	add	r1, r7, #60	; 0x3c
   11144:	str	r1, [sp, #68]	; 0x44
   11148:	add	r1, r7, #56	; 0x38
   1114c:	str	r1, [sp, #64]	; 0x40
   11150:	add	r1, r7, #52	; 0x34
   11154:	str	r1, [sp, #60]	; 0x3c
   11158:	add	r1, r7, #48	; 0x30
   1115c:	str	r1, [sp, #56]	; 0x38
   11160:	add	r1, r7, #44	; 0x2c
   11164:	str	r1, [sp, #52]	; 0x34
   11168:	add	r1, r7, #40	; 0x28
   1116c:	str	r1, [sp, #48]	; 0x30
   11170:	add	r1, r7, #36	; 0x24
   11174:	str	r1, [sp, #44]	; 0x2c
   11178:	add	r1, r7, #32
   1117c:	str	r1, [sp, #40]	; 0x28
   11180:	add	r1, r7, #28
   11184:	str	r1, [sp, #36]	; 0x24
   11188:	add	r1, r7, #24
   1118c:	str	r1, [sp, #32]
   11190:	add	r1, r7, #20
   11194:	str	r1, [sp, #28]
   11198:	add	r1, r7, #16
   1119c:	str	r1, [sp, #24]
   111a0:	add	r1, r7, #12
   111a4:	str	r1, [sp, #20]
   111a8:	add	r1, r7, #8
   111ac:	str	r1, [sp, #16]
   111b0:	add	r1, r7, #4
   111b4:	str	r1, [sp, #12]
   111b8:	ldr	r0, [sp, #268]	; 0x10c
   111bc:	mov	r1, r6
   111c0:	mov	r2, #256	; 0x100
   111c4:	ldr	r3, [r0]
   111c8:	mov	r0, r7
   111cc:	bl	18b8 <fread@plt>
   111d0:	vld1.32	{d16[0]}, [r7 :32]
   111d4:	mov	r1, #1024	; 0x400
   111d8:	add	r5, r0, r5
   111dc:	ldr	r0, [sp, #8]
   111e0:	add	sl, sl, #256	; 0x100
   111e4:	vmovl.s8	q8, d16
   111e8:	cmp	sl, r0
   111ec:	vmovl.s16	q8, d16
   111f0:	vst1.32	{d16-d17}, [r9], r1
   111f4:	ldr	r1, [sp, #12]
   111f8:	vld1.32	{d16[0]}, [r1 :32]
   111fc:	add	r1, r4, #16
   11200:	vmovl.s8	q8, d16
   11204:	vmovl.s16	q8, d16
   11208:	vst1.32	{d16-d17}, [r1]
   1120c:	ldr	r1, [sp, #16]
   11210:	vld1.32	{d16[0]}, [r1 :32]
   11214:	add	r1, r4, #32
   11218:	vmovl.s8	q8, d16
   1121c:	vmovl.s16	q8, d16
   11220:	vst1.32	{d16-d17}, [r1]
   11224:	ldr	r1, [sp, #20]
   11228:	vld1.32	{d16[0]}, [r1 :32]
   1122c:	add	r1, r4, #48	; 0x30
   11230:	vmovl.s8	q8, d16
   11234:	vmovl.s16	q8, d16
   11238:	vst1.32	{d16-d17}, [r1]
   1123c:	ldr	r1, [sp, #24]
   11240:	vld1.32	{d16[0]}, [r1 :32]
   11244:	add	r1, r4, #64	; 0x40
   11248:	vmovl.s8	q8, d16
   1124c:	vmovl.s16	q8, d16
   11250:	vst1.32	{d16-d17}, [r1]
   11254:	ldr	r1, [sp, #28]
   11258:	vld1.32	{d16[0]}, [r1 :32]
   1125c:	add	r1, r4, #80	; 0x50
   11260:	vmovl.s8	q8, d16
   11264:	vmovl.s16	q8, d16
   11268:	vst1.32	{d16-d17}, [r1]
   1126c:	ldr	r1, [sp, #32]
   11270:	vld1.32	{d16[0]}, [r1 :32]
   11274:	add	r1, r4, #96	; 0x60
   11278:	vmovl.s8	q8, d16
   1127c:	vmovl.s16	q8, d16
   11280:	vst1.32	{d16-d17}, [r1]
   11284:	ldr	r1, [sp, #36]	; 0x24
   11288:	vld1.32	{d16[0]}, [r1 :32]
   1128c:	add	r1, r4, #112	; 0x70
   11290:	vmovl.s8	q8, d16
   11294:	vmovl.s16	q8, d16
   11298:	vst1.32	{d16-d17}, [r1]
   1129c:	ldr	r1, [sp, #40]	; 0x28
   112a0:	vld1.32	{d16[0]}, [r1 :32]
   112a4:	add	r1, r4, #128	; 0x80
   112a8:	vmovl.s8	q8, d16
   112ac:	vmovl.s16	q8, d16
   112b0:	vst1.32	{d16-d17}, [r1]
   112b4:	ldr	r1, [sp, #44]	; 0x2c
   112b8:	vld1.32	{d16[0]}, [r1 :32]
   112bc:	add	r1, r4, #144	; 0x90
   112c0:	vmovl.s8	q8, d16
   112c4:	vmovl.s16	q8, d16
   112c8:	vst1.32	{d16-d17}, [r1]
   112cc:	ldr	r1, [sp, #48]	; 0x30
   112d0:	vld1.32	{d16[0]}, [r1 :32]
   112d4:	add	r1, r4, #160	; 0xa0
   112d8:	vmovl.s8	q8, d16
   112dc:	vmovl.s16	q8, d16
   112e0:	vst1.32	{d16-d17}, [r1]
   112e4:	ldr	r1, [sp, #52]	; 0x34
   112e8:	vld1.32	{d16[0]}, [r1 :32]
   112ec:	add	r1, r4, #176	; 0xb0
   112f0:	vmovl.s8	q8, d16
   112f4:	vmovl.s16	q8, d16
   112f8:	vst1.32	{d16-d17}, [r1]
   112fc:	ldr	r1, [sp, #56]	; 0x38
   11300:	vld1.32	{d16[0]}, [r1 :32]
   11304:	add	r1, r4, #192	; 0xc0
   11308:	vmovl.s8	q8, d16
   1130c:	vmovl.s16	q8, d16
   11310:	vst1.32	{d16-d17}, [r1]
   11314:	ldr	r1, [sp, #60]	; 0x3c
   11318:	vld1.32	{d16[0]}, [r1 :32]
   1131c:	add	r1, r4, #208	; 0xd0
   11320:	vmovl.s8	q8, d16
   11324:	vmovl.s16	q8, d16
   11328:	vst1.32	{d16-d17}, [r1]
   1132c:	ldr	r1, [sp, #64]	; 0x40
   11330:	vld1.32	{d16[0]}, [r1 :32]
   11334:	add	r1, r4, #224	; 0xe0
   11338:	vmovl.s8	q8, d16
   1133c:	vmovl.s16	q8, d16
   11340:	vst1.32	{d16-d17}, [r1]
   11344:	ldr	r1, [sp, #68]	; 0x44
   11348:	vld1.32	{d16[0]}, [r1 :32]
   1134c:	add	r1, r4, #240	; 0xf0
   11350:	vmovl.s8	q8, d16
   11354:	vmovl.s16	q8, d16
   11358:	vst1.32	{d16-d17}, [r1]
   1135c:	ldr	r1, [sp, #72]	; 0x48
   11360:	vld1.32	{d16[0]}, [r1 :32]
   11364:	add	r1, r4, #256	; 0x100
   11368:	vmovl.s8	q8, d16
   1136c:	vmovl.s16	q8, d16
   11370:	vst1.32	{d16-d17}, [r1]
   11374:	ldr	r1, [sp, #76]	; 0x4c
   11378:	vld1.32	{d16[0]}, [r1 :32]
   1137c:	add	r1, r4, #272	; 0x110
   11380:	vmovl.s8	q8, d16
   11384:	vmovl.s16	q8, d16
   11388:	vst1.32	{d16-d17}, [r1]
   1138c:	ldr	r1, [sp, #80]	; 0x50
   11390:	vld1.32	{d16[0]}, [r1 :32]
   11394:	add	r1, r4, #288	; 0x120
   11398:	vmovl.s8	q8, d16
   1139c:	vmovl.s16	q8, d16
   113a0:	vst1.32	{d16-d17}, [r1]
   113a4:	ldr	r1, [sp, #84]	; 0x54
   113a8:	vld1.32	{d16[0]}, [r1 :32]
   113ac:	add	r1, r4, #304	; 0x130
   113b0:	vmovl.s8	q8, d16
   113b4:	vmovl.s16	q8, d16
   113b8:	vst1.32	{d16-d17}, [r1]
   113bc:	ldr	r1, [sp, #88]	; 0x58
   113c0:	vld1.32	{d16[0]}, [r1 :32]
   113c4:	add	r1, r4, #320	; 0x140
   113c8:	vmovl.s8	q8, d16
   113cc:	vmovl.s16	q8, d16
   113d0:	vst1.32	{d16-d17}, [r1]
   113d4:	ldr	r1, [sp, #92]	; 0x5c
   113d8:	vld1.32	{d16[0]}, [r1 :32]
   113dc:	add	r1, r4, #336	; 0x150
   113e0:	vmovl.s8	q8, d16
   113e4:	vmovl.s16	q8, d16
   113e8:	vst1.32	{d16-d17}, [r1]
   113ec:	ldr	r1, [sp, #96]	; 0x60
   113f0:	vld1.32	{d16[0]}, [r1 :32]
   113f4:	add	r1, r4, #352	; 0x160
   113f8:	vmovl.s8	q8, d16
   113fc:	vmovl.s16	q8, d16
   11400:	vst1.32	{d16-d17}, [r1]
   11404:	ldr	r1, [sp, #100]	; 0x64
   11408:	vld1.32	{d16[0]}, [r1 :32]
   1140c:	add	r1, r4, #368	; 0x170
   11410:	vmovl.s8	q8, d16
   11414:	vmovl.s16	q8, d16
   11418:	vst1.32	{d16-d17}, [r1]
   1141c:	ldr	r1, [sp, #104]	; 0x68
   11420:	vld1.32	{d16[0]}, [r1 :32]
   11424:	add	r1, r4, #384	; 0x180
   11428:	vmovl.s8	q8, d16
   1142c:	vmovl.s16	q8, d16
   11430:	vst1.32	{d16-d17}, [r1]
   11434:	ldr	r1, [sp, #108]	; 0x6c
   11438:	vld1.32	{d16[0]}, [r1 :32]
   1143c:	add	r1, r4, #400	; 0x190
   11440:	vmovl.s8	q8, d16
   11444:	vmovl.s16	q8, d16
   11448:	vst1.32	{d16-d17}, [r1]
   1144c:	ldr	r1, [sp, #112]	; 0x70
   11450:	vld1.32	{d16[0]}, [r1 :32]
   11454:	add	r1, r4, #416	; 0x1a0
   11458:	vmovl.s8	q8, d16
   1145c:	vmovl.s16	q8, d16
   11460:	vst1.32	{d16-d17}, [r1]
   11464:	ldr	r1, [sp, #116]	; 0x74
   11468:	vld1.32	{d16[0]}, [r1 :32]
   1146c:	add	r1, r4, #432	; 0x1b0
   11470:	vmovl.s8	q8, d16
   11474:	vmovl.s16	q8, d16
   11478:	vst1.32	{d16-d17}, [r1]
   1147c:	ldr	r1, [sp, #120]	; 0x78
   11480:	vld1.32	{d16[0]}, [r1 :32]
   11484:	add	r1, r4, #448	; 0x1c0
   11488:	vmovl.s8	q8, d16
   1148c:	vmovl.s16	q8, d16
   11490:	vst1.32	{d16-d17}, [r1]
   11494:	ldr	r1, [sp, #124]	; 0x7c
   11498:	vld1.32	{d16[0]}, [r1 :32]
   1149c:	add	r1, r4, #464	; 0x1d0
   114a0:	vmovl.s8	q8, d16
   114a4:	vmovl.s16	q8, d16
   114a8:	vst1.32	{d16-d17}, [r1]
   114ac:	ldr	r1, [sp, #128]	; 0x80
   114b0:	vld1.32	{d16[0]}, [r1 :32]
   114b4:	add	r1, r4, #480	; 0x1e0
   114b8:	vmovl.s8	q8, d16
   114bc:	vmovl.s16	q8, d16
   114c0:	vst1.32	{d16-d17}, [r1]
   114c4:	ldr	r1, [sp, #132]	; 0x84
   114c8:	vld1.32	{d16[0]}, [r1 :32]
   114cc:	add	r1, r4, #496	; 0x1f0
   114d0:	vmovl.s8	q8, d16
   114d4:	vmovl.s16	q8, d16
   114d8:	vst1.32	{d16-d17}, [r1]
   114dc:	ldr	r1, [sp, #136]	; 0x88
   114e0:	vld1.32	{d16[0]}, [r1 :32]
   114e4:	add	r1, r4, #512	; 0x200
   114e8:	vmovl.s8	q8, d16
   114ec:	vmovl.s16	q8, d16
   114f0:	vst1.32	{d16-d17}, [r1]
   114f4:	ldr	r1, [sp, #140]	; 0x8c
   114f8:	vld1.32	{d16[0]}, [r1 :32]
   114fc:	add	r1, r4, #528	; 0x210
   11500:	vmovl.s8	q8, d16
   11504:	vmovl.s16	q8, d16
   11508:	vst1.32	{d16-d17}, [r1]
   1150c:	ldr	r1, [sp, #144]	; 0x90
   11510:	vld1.32	{d16[0]}, [r1 :32]
   11514:	add	r1, r4, #544	; 0x220
   11518:	vmovl.s8	q8, d16
   1151c:	vmovl.s16	q8, d16
   11520:	vst1.32	{d16-d17}, [r1]
   11524:	ldr	r1, [sp, #148]	; 0x94
   11528:	vld1.32	{d16[0]}, [r1 :32]
   1152c:	add	r1, r4, #560	; 0x230
   11530:	vmovl.s8	q8, d16
   11534:	vmovl.s16	q8, d16
   11538:	vst1.32	{d16-d17}, [r1]
   1153c:	ldr	r1, [sp, #152]	; 0x98
   11540:	vld1.32	{d16[0]}, [r1 :32]
   11544:	add	r1, r4, #576	; 0x240
   11548:	vmovl.s8	q8, d16
   1154c:	vmovl.s16	q8, d16
   11550:	vst1.32	{d16-d17}, [r1]
   11554:	ldr	r1, [sp, #156]	; 0x9c
   11558:	vld1.32	{d16[0]}, [r1 :32]
   1155c:	add	r1, r4, #592	; 0x250
   11560:	vmovl.s8	q8, d16
   11564:	vmovl.s16	q8, d16
   11568:	vst1.32	{d16-d17}, [r1]
   1156c:	ldr	r1, [sp, #160]	; 0xa0
   11570:	vld1.32	{d16[0]}, [r1 :32]
   11574:	add	r1, r4, #608	; 0x260
   11578:	vmovl.s8	q8, d16
   1157c:	vmovl.s16	q8, d16
   11580:	vst1.32	{d16-d17}, [r1]
   11584:	ldr	r1, [sp, #164]	; 0xa4
   11588:	vld1.32	{d16[0]}, [r1 :32]
   1158c:	add	r1, r4, #624	; 0x270
   11590:	vmovl.s8	q8, d16
   11594:	vmovl.s16	q8, d16
   11598:	vst1.32	{d16-d17}, [r1]
   1159c:	ldr	r1, [sp, #168]	; 0xa8
   115a0:	vld1.32	{d16[0]}, [r1 :32]
   115a4:	add	r1, r4, #640	; 0x280
   115a8:	vmovl.s8	q8, d16
   115ac:	vmovl.s16	q8, d16
   115b0:	vst1.32	{d16-d17}, [r1]
   115b4:	ldr	r1, [sp, #172]	; 0xac
   115b8:	vld1.32	{d16[0]}, [r1 :32]
   115bc:	add	r1, r4, #656	; 0x290
   115c0:	vmovl.s8	q8, d16
   115c4:	vmovl.s16	q8, d16
   115c8:	vst1.32	{d16-d17}, [r1]
   115cc:	ldr	r1, [sp, #176]	; 0xb0
   115d0:	vld1.32	{d16[0]}, [r1 :32]
   115d4:	add	r1, r4, #672	; 0x2a0
   115d8:	vmovl.s8	q8, d16
   115dc:	vmovl.s16	q8, d16
   115e0:	vst1.32	{d16-d17}, [r1]
   115e4:	ldr	r1, [sp, #180]	; 0xb4
   115e8:	vld1.32	{d16[0]}, [r1 :32]
   115ec:	add	r1, r4, #688	; 0x2b0
   115f0:	vmovl.s8	q8, d16
   115f4:	vmovl.s16	q8, d16
   115f8:	vst1.32	{d16-d17}, [r1]
   115fc:	ldr	r1, [sp, #184]	; 0xb8
   11600:	vld1.32	{d16[0]}, [r1 :32]
   11604:	add	r1, r4, #704	; 0x2c0
   11608:	vmovl.s8	q8, d16
   1160c:	vmovl.s16	q8, d16
   11610:	vst1.32	{d16-d17}, [r1]
   11614:	ldr	r1, [sp, #188]	; 0xbc
   11618:	vld1.32	{d16[0]}, [r1 :32]
   1161c:	add	r1, r4, #720	; 0x2d0
   11620:	vmovl.s8	q8, d16
   11624:	vmovl.s16	q8, d16
   11628:	vst1.32	{d16-d17}, [r1]
   1162c:	ldr	r1, [sp, #192]	; 0xc0
   11630:	vld1.32	{d16[0]}, [r1 :32]
   11634:	add	r1, r4, #736	; 0x2e0
   11638:	vmovl.s8	q8, d16
   1163c:	vmovl.s16	q8, d16
   11640:	vst1.32	{d16-d17}, [r1]
   11644:	ldr	r1, [sp, #196]	; 0xc4
   11648:	vld1.32	{d16[0]}, [r1 :32]
   1164c:	add	r1, r4, #752	; 0x2f0
   11650:	vmovl.s8	q8, d16
   11654:	vmovl.s16	q8, d16
   11658:	vst1.32	{d16-d17}, [r1]
   1165c:	ldr	r1, [sp, #200]	; 0xc8
   11660:	vld1.32	{d16[0]}, [r1 :32]
   11664:	add	r1, r4, #768	; 0x300
   11668:	vmovl.s8	q8, d16
   1166c:	vmovl.s16	q8, d16
   11670:	vst1.32	{d16-d17}, [r1]
   11674:	ldr	r1, [sp, #204]	; 0xcc
   11678:	vld1.32	{d16[0]}, [r1 :32]
   1167c:	add	r1, r4, #784	; 0x310
   11680:	vmovl.s8	q8, d16
   11684:	vmovl.s16	q8, d16
   11688:	vst1.32	{d16-d17}, [r1]
   1168c:	ldr	r1, [sp, #208]	; 0xd0
   11690:	vld1.32	{d16[0]}, [r1 :32]
   11694:	add	r1, r4, #800	; 0x320
   11698:	vmovl.s8	q8, d16
   1169c:	vmovl.s16	q8, d16
   116a0:	vst1.32	{d16-d17}, [r1]
   116a4:	ldr	r1, [sp, #212]	; 0xd4
   116a8:	vld1.32	{d16[0]}, [r1 :32]
   116ac:	add	r1, r4, #816	; 0x330
   116b0:	vmovl.s8	q8, d16
   116b4:	vmovl.s16	q8, d16
   116b8:	vst1.32	{d16-d17}, [r1]
   116bc:	ldr	r1, [sp, #216]	; 0xd8
   116c0:	vld1.32	{d16[0]}, [r1 :32]
   116c4:	add	r1, r4, #832	; 0x340
   116c8:	vmovl.s8	q8, d16
   116cc:	vmovl.s16	q8, d16
   116d0:	vst1.32	{d16-d17}, [r1]
   116d4:	ldr	r1, [sp, #220]	; 0xdc
   116d8:	vld1.32	{d16[0]}, [r1 :32]
   116dc:	add	r1, r4, #848	; 0x350
   116e0:	vmovl.s8	q8, d16
   116e4:	vmovl.s16	q8, d16
   116e8:	vst1.32	{d16-d17}, [r1]
   116ec:	ldr	r1, [sp, #224]	; 0xe0
   116f0:	vld1.32	{d16[0]}, [r1 :32]
   116f4:	add	r1, r4, #864	; 0x360
   116f8:	vmovl.s8	q8, d16
   116fc:	vmovl.s16	q8, d16
   11700:	vst1.32	{d16-d17}, [r1]
   11704:	ldr	r1, [sp, #228]	; 0xe4
   11708:	vld1.32	{d16[0]}, [r1 :32]
   1170c:	add	r1, r4, #880	; 0x370
   11710:	vmovl.s8	q8, d16
   11714:	vmovl.s16	q8, d16
   11718:	vst1.32	{d16-d17}, [r1]
   1171c:	ldr	r1, [sp, #232]	; 0xe8
   11720:	vld1.32	{d16[0]}, [r1 :32]
   11724:	add	r1, r4, #896	; 0x380
   11728:	vmovl.s8	q8, d16
   1172c:	vmovl.s16	q8, d16
   11730:	vst1.32	{d16-d17}, [r1]
   11734:	ldr	r1, [sp, #236]	; 0xec
   11738:	vld1.32	{d16[0]}, [r1 :32]
   1173c:	add	r1, r4, #912	; 0x390
   11740:	vmovl.s8	q8, d16
   11744:	vmovl.s16	q8, d16
   11748:	vst1.32	{d16-d17}, [r1]
   1174c:	ldr	r1, [sp, #240]	; 0xf0
   11750:	vld1.32	{d16[0]}, [r1 :32]
   11754:	add	r1, r4, #928	; 0x3a0
   11758:	vmovl.s8	q8, d16
   1175c:	vmovl.s16	q8, d16
   11760:	vst1.32	{d16-d17}, [r1]
   11764:	ldr	r1, [sp, #244]	; 0xf4
   11768:	vld1.32	{d16[0]}, [r1 :32]
   1176c:	add	r1, r4, #944	; 0x3b0
   11770:	vmovl.s8	q8, d16
   11774:	vmovl.s16	q8, d16
   11778:	vst1.32	{d16-d17}, [r1]
   1177c:	ldr	r1, [sp, #248]	; 0xf8
   11780:	vld1.32	{d16[0]}, [r1 :32]
   11784:	add	r1, r4, #960	; 0x3c0
   11788:	vmovl.s8	q8, d16
   1178c:	vmovl.s16	q8, d16
   11790:	vst1.32	{d16-d17}, [r1]
   11794:	ldr	r1, [sp, #252]	; 0xfc
   11798:	vld1.32	{d16[0]}, [r1 :32]
   1179c:	add	r1, r4, #976	; 0x3d0
   117a0:	vmovl.s8	q8, d16
   117a4:	vmovl.s16	q8, d16
   117a8:	vst1.32	{d16-d17}, [r1]
   117ac:	ldr	r1, [sp, #256]	; 0x100
   117b0:	vld1.32	{d16[0]}, [r1 :32]
   117b4:	add	r1, r4, #992	; 0x3e0
   117b8:	vmovl.s8	q8, d16
   117bc:	vmovl.s16	q8, d16
   117c0:	vst1.32	{d16-d17}, [r1]
   117c4:	ldr	r1, [sp, #260]	; 0x104
   117c8:	vld1.32	{d16[0]}, [r1 :32]
   117cc:	add	r1, r4, #1008	; 0x3f0
   117d0:	mov	r4, r9
   117d4:	vmovl.s8	q8, d16
   117d8:	vmovl.s16	q8, d16
   117dc:	vst1.32	{d16-d17}, [r1]
   117e0:	blt	111b8 <ReadUInt32Data+0x664>
   117e4:	ldr	r0, [sp, #4]
   117e8:	ldr	r1, [sp, #268]	; 0x10c
   117ec:	cmp	sl, r0
   117f0:	bge	136e4 <ReadUInt32Data+0x2b90>
   117f4:	ldr	r3, [r1]
   117f8:	sub	r4, r0, sl
   117fc:	add	r7, sp, #320	; 0x140
   11800:	mov	r1, r6
   11804:	mov	r0, r7
   11808:	mov	r2, r4
   1180c:	bl	18b8 <fread@plt>
   11810:	add	r5, r0, r5
   11814:	cmp	r4, #1
   11818:	blt	136e4 <ReadUInt32Data+0x2b90>
   1181c:	mov	r0, #0
   11820:	cmp	r4, #4
   11824:	bcc	11854 <ReadUInt32Data+0xd00>
   11828:	bic	r1, r4, #3
   1182c:	bic	r0, r4, #3
   11830:	vld1.32	{d16[0]}, [r7 :32]
   11834:	subs	r1, r1, #4
   11838:	add	r7, r7, #4
   1183c:	vmovl.s8	q8, d16
   11840:	vmovl.s16	q8, d16
   11844:	vst1.32	{d16-d17}, [r9]!
   11848:	bne	11830 <ReadUInt32Data+0xcdc>
   1184c:	cmp	r4, r0
   11850:	beq	136e4 <ReadUInt32Data+0x2b90>
   11854:	ldr	r3, [sp, #4]
   11858:	add	r1, sp, #320	; 0x140
   1185c:	add	r2, r0, sl
   11860:	add	r1, r1, r0
   11864:	add	r2, r8, r2, lsl #2
   11868:	sub	r0, r3, r0
   1186c:	sub	r0, r0, sl
   11870:	ldrsb	r3, [r1], #1
   11874:	subs	r0, r0, #1
   11878:	str	r3, [r2], #4
   1187c:	bne	11870 <ReadUInt32Data+0xd1c>
   11880:	b	136e4 <ReadUInt32Data+0x2b90>
   11884:	mov	r0, r7
   11888:	add	r7, sp, #320	; 0x140
   1188c:	str	sl, [sp, #268]	; 0x10c
   11890:	mov	sl, #0
   11894:	mov	r4, r8
   11898:	mov	r5, #0
   1189c:	mov	r9, r8
   118a0:	add	r1, r7, #252	; 0xfc
   118a4:	str	r0, [sp, #4]
   118a8:	sub	r0, r0, #256	; 0x100
   118ac:	str	r1, [sp, #260]	; 0x104
   118b0:	add	r1, r7, #248	; 0xf8
   118b4:	str	r0, [sp, #8]
   118b8:	str	r1, [sp, #256]	; 0x100
   118bc:	add	r1, r7, #244	; 0xf4
   118c0:	str	r1, [sp, #252]	; 0xfc
   118c4:	add	r1, r7, #240	; 0xf0
   118c8:	str	r1, [sp, #248]	; 0xf8
   118cc:	add	r1, r7, #236	; 0xec
   118d0:	str	r1, [sp, #244]	; 0xf4
   118d4:	add	r1, r7, #232	; 0xe8
   118d8:	str	r1, [sp, #240]	; 0xf0
   118dc:	add	r1, r7, #228	; 0xe4
   118e0:	str	r1, [sp, #236]	; 0xec
   118e4:	add	r1, r7, #224	; 0xe0
   118e8:	str	r1, [sp, #232]	; 0xe8
   118ec:	add	r1, r7, #220	; 0xdc
   118f0:	str	r1, [sp, #228]	; 0xe4
   118f4:	add	r1, r7, #216	; 0xd8
   118f8:	str	r1, [sp, #224]	; 0xe0
   118fc:	add	r1, r7, #212	; 0xd4
   11900:	str	r1, [sp, #220]	; 0xdc
   11904:	add	r1, r7, #208	; 0xd0
   11908:	str	r1, [sp, #216]	; 0xd8
   1190c:	add	r1, r7, #204	; 0xcc
   11910:	str	r1, [sp, #212]	; 0xd4
   11914:	add	r1, r7, #200	; 0xc8
   11918:	str	r1, [sp, #208]	; 0xd0
   1191c:	add	r1, r7, #196	; 0xc4
   11920:	str	r1, [sp, #204]	; 0xcc
   11924:	add	r1, r7, #192	; 0xc0
   11928:	str	r1, [sp, #200]	; 0xc8
   1192c:	add	r1, r7, #188	; 0xbc
   11930:	str	r1, [sp, #196]	; 0xc4
   11934:	add	r1, r7, #184	; 0xb8
   11938:	str	r1, [sp, #192]	; 0xc0
   1193c:	add	r1, r7, #180	; 0xb4
   11940:	str	r1, [sp, #188]	; 0xbc
   11944:	add	r1, r7, #176	; 0xb0
   11948:	str	r1, [sp, #184]	; 0xb8
   1194c:	add	r1, r7, #172	; 0xac
   11950:	str	r1, [sp, #180]	; 0xb4
   11954:	add	r1, r7, #168	; 0xa8
   11958:	str	r1, [sp, #176]	; 0xb0
   1195c:	add	r1, r7, #164	; 0xa4
   11960:	str	r1, [sp, #172]	; 0xac
   11964:	add	r1, r7, #160	; 0xa0
   11968:	str	r1, [sp, #168]	; 0xa8
   1196c:	add	r1, r7, #156	; 0x9c
   11970:	str	r1, [sp, #164]	; 0xa4
   11974:	add	r1, r7, #152	; 0x98
   11978:	str	r1, [sp, #160]	; 0xa0
   1197c:	add	r1, r7, #148	; 0x94
   11980:	str	r1, [sp, #156]	; 0x9c
   11984:	add	r1, r7, #144	; 0x90
   11988:	str	r1, [sp, #152]	; 0x98
   1198c:	add	r1, r7, #140	; 0x8c
   11990:	str	r1, [sp, #148]	; 0x94
   11994:	add	r1, r7, #136	; 0x88
   11998:	str	r1, [sp, #144]	; 0x90
   1199c:	add	r1, r7, #132	; 0x84
   119a0:	str	r1, [sp, #140]	; 0x8c
   119a4:	add	r1, r7, #128	; 0x80
   119a8:	str	r1, [sp, #136]	; 0x88
   119ac:	add	r1, r7, #124	; 0x7c
   119b0:	str	r1, [sp, #132]	; 0x84
   119b4:	add	r1, r7, #120	; 0x78
   119b8:	str	r1, [sp, #128]	; 0x80
   119bc:	add	r1, r7, #116	; 0x74
   119c0:	str	r1, [sp, #124]	; 0x7c
   119c4:	add	r1, r7, #112	; 0x70
   119c8:	str	r1, [sp, #120]	; 0x78
   119cc:	add	r1, r7, #108	; 0x6c
   119d0:	str	r1, [sp, #116]	; 0x74
   119d4:	add	r1, r7, #104	; 0x68
   119d8:	str	r1, [sp, #112]	; 0x70
   119dc:	add	r1, r7, #100	; 0x64
   119e0:	str	r1, [sp, #108]	; 0x6c
   119e4:	add	r1, r7, #96	; 0x60
   119e8:	str	r1, [sp, #104]	; 0x68
   119ec:	add	r1, r7, #92	; 0x5c
   119f0:	str	r1, [sp, #100]	; 0x64
   119f4:	add	r1, r7, #88	; 0x58
   119f8:	str	r1, [sp, #96]	; 0x60
   119fc:	add	r1, r7, #84	; 0x54
   11a00:	str	r1, [sp, #92]	; 0x5c
   11a04:	add	r1, r7, #80	; 0x50
   11a08:	str	r1, [sp, #88]	; 0x58
   11a0c:	add	r1, r7, #76	; 0x4c
   11a10:	str	r1, [sp, #84]	; 0x54
   11a14:	add	r1, r7, #72	; 0x48
   11a18:	str	r1, [sp, #80]	; 0x50
   11a1c:	add	r1, r7, #68	; 0x44
   11a20:	str	r1, [sp, #76]	; 0x4c
   11a24:	add	r1, r7, #64	; 0x40
   11a28:	str	r1, [sp, #72]	; 0x48
   11a2c:	add	r1, r7, #60	; 0x3c
   11a30:	str	r1, [sp, #68]	; 0x44
   11a34:	add	r1, r7, #56	; 0x38
   11a38:	str	r1, [sp, #64]	; 0x40
   11a3c:	add	r1, r7, #52	; 0x34
   11a40:	str	r1, [sp, #60]	; 0x3c
   11a44:	add	r1, r7, #48	; 0x30
   11a48:	str	r1, [sp, #56]	; 0x38
   11a4c:	add	r1, r7, #44	; 0x2c
   11a50:	str	r1, [sp, #52]	; 0x34
   11a54:	add	r1, r7, #40	; 0x28
   11a58:	str	r1, [sp, #48]	; 0x30
   11a5c:	add	r1, r7, #36	; 0x24
   11a60:	str	r1, [sp, #44]	; 0x2c
   11a64:	add	r1, r7, #32
   11a68:	str	r1, [sp, #40]	; 0x28
   11a6c:	add	r1, r7, #28
   11a70:	str	r1, [sp, #36]	; 0x24
   11a74:	add	r1, r7, #24
   11a78:	str	r1, [sp, #32]
   11a7c:	add	r1, r7, #20
   11a80:	str	r1, [sp, #28]
   11a84:	add	r1, r7, #16
   11a88:	str	r1, [sp, #24]
   11a8c:	add	r1, r7, #12
   11a90:	str	r1, [sp, #20]
   11a94:	add	r1, r7, #8
   11a98:	str	r1, [sp, #16]
   11a9c:	add	r1, r7, #4
   11aa0:	str	r1, [sp, #12]
   11aa4:	ldr	r0, [sp, #268]	; 0x10c
   11aa8:	mov	r1, r6
   11aac:	mov	r2, #256	; 0x100
   11ab0:	ldr	r3, [r0]
   11ab4:	mov	r0, r7
   11ab8:	bl	18b8 <fread@plt>
   11abc:	vld1.32	{d16[0]}, [r7 :32]
   11ac0:	mov	r1, #1024	; 0x400
   11ac4:	add	r5, r0, r5
   11ac8:	ldr	r0, [sp, #8]
   11acc:	add	sl, sl, #256	; 0x100
   11ad0:	vmovl.u8	q8, d16
   11ad4:	cmp	sl, r0
   11ad8:	vmovl.u16	q8, d16
   11adc:	vst1.32	{d16-d17}, [r9], r1
   11ae0:	ldr	r1, [sp, #12]
   11ae4:	vld1.32	{d16[0]}, [r1 :32]
   11ae8:	add	r1, r4, #16
   11aec:	vmovl.u8	q8, d16
   11af0:	vmovl.u16	q8, d16
   11af4:	vst1.32	{d16-d17}, [r1]
   11af8:	ldr	r1, [sp, #16]
   11afc:	vld1.32	{d16[0]}, [r1 :32]
   11b00:	add	r1, r4, #32
   11b04:	vmovl.u8	q8, d16
   11b08:	vmovl.u16	q8, d16
   11b0c:	vst1.32	{d16-d17}, [r1]
   11b10:	ldr	r1, [sp, #20]
   11b14:	vld1.32	{d16[0]}, [r1 :32]
   11b18:	add	r1, r4, #48	; 0x30
   11b1c:	vmovl.u8	q8, d16
   11b20:	vmovl.u16	q8, d16
   11b24:	vst1.32	{d16-d17}, [r1]
   11b28:	ldr	r1, [sp, #24]
   11b2c:	vld1.32	{d16[0]}, [r1 :32]
   11b30:	add	r1, r4, #64	; 0x40
   11b34:	vmovl.u8	q8, d16
   11b38:	vmovl.u16	q8, d16
   11b3c:	vst1.32	{d16-d17}, [r1]
   11b40:	ldr	r1, [sp, #28]
   11b44:	vld1.32	{d16[0]}, [r1 :32]
   11b48:	add	r1, r4, #80	; 0x50
   11b4c:	vmovl.u8	q8, d16
   11b50:	vmovl.u16	q8, d16
   11b54:	vst1.32	{d16-d17}, [r1]
   11b58:	ldr	r1, [sp, #32]
   11b5c:	vld1.32	{d16[0]}, [r1 :32]
   11b60:	add	r1, r4, #96	; 0x60
   11b64:	vmovl.u8	q8, d16
   11b68:	vmovl.u16	q8, d16
   11b6c:	vst1.32	{d16-d17}, [r1]
   11b70:	ldr	r1, [sp, #36]	; 0x24
   11b74:	vld1.32	{d16[0]}, [r1 :32]
   11b78:	add	r1, r4, #112	; 0x70
   11b7c:	vmovl.u8	q8, d16
   11b80:	vmovl.u16	q8, d16
   11b84:	vst1.32	{d16-d17}, [r1]
   11b88:	ldr	r1, [sp, #40]	; 0x28
   11b8c:	vld1.32	{d16[0]}, [r1 :32]
   11b90:	add	r1, r4, #128	; 0x80
   11b94:	vmovl.u8	q8, d16
   11b98:	vmovl.u16	q8, d16
   11b9c:	vst1.32	{d16-d17}, [r1]
   11ba0:	ldr	r1, [sp, #44]	; 0x2c
   11ba4:	vld1.32	{d16[0]}, [r1 :32]
   11ba8:	add	r1, r4, #144	; 0x90
   11bac:	vmovl.u8	q8, d16
   11bb0:	vmovl.u16	q8, d16
   11bb4:	vst1.32	{d16-d17}, [r1]
   11bb8:	ldr	r1, [sp, #48]	; 0x30
   11bbc:	vld1.32	{d16[0]}, [r1 :32]
   11bc0:	add	r1, r4, #160	; 0xa0
   11bc4:	vmovl.u8	q8, d16
   11bc8:	vmovl.u16	q8, d16
   11bcc:	vst1.32	{d16-d17}, [r1]
   11bd0:	ldr	r1, [sp, #52]	; 0x34
   11bd4:	vld1.32	{d16[0]}, [r1 :32]
   11bd8:	add	r1, r4, #176	; 0xb0
   11bdc:	vmovl.u8	q8, d16
   11be0:	vmovl.u16	q8, d16
   11be4:	vst1.32	{d16-d17}, [r1]
   11be8:	ldr	r1, [sp, #56]	; 0x38
   11bec:	vld1.32	{d16[0]}, [r1 :32]
   11bf0:	add	r1, r4, #192	; 0xc0
   11bf4:	vmovl.u8	q8, d16
   11bf8:	vmovl.u16	q8, d16
   11bfc:	vst1.32	{d16-d17}, [r1]
   11c00:	ldr	r1, [sp, #60]	; 0x3c
   11c04:	vld1.32	{d16[0]}, [r1 :32]
   11c08:	add	r1, r4, #208	; 0xd0
   11c0c:	vmovl.u8	q8, d16
   11c10:	vmovl.u16	q8, d16
   11c14:	vst1.32	{d16-d17}, [r1]
   11c18:	ldr	r1, [sp, #64]	; 0x40
   11c1c:	vld1.32	{d16[0]}, [r1 :32]
   11c20:	add	r1, r4, #224	; 0xe0
   11c24:	vmovl.u8	q8, d16
   11c28:	vmovl.u16	q8, d16
   11c2c:	vst1.32	{d16-d17}, [r1]
   11c30:	ldr	r1, [sp, #68]	; 0x44
   11c34:	vld1.32	{d16[0]}, [r1 :32]
   11c38:	add	r1, r4, #240	; 0xf0
   11c3c:	vmovl.u8	q8, d16
   11c40:	vmovl.u16	q8, d16
   11c44:	vst1.32	{d16-d17}, [r1]
   11c48:	ldr	r1, [sp, #72]	; 0x48
   11c4c:	vld1.32	{d16[0]}, [r1 :32]
   11c50:	add	r1, r4, #256	; 0x100
   11c54:	vmovl.u8	q8, d16
   11c58:	vmovl.u16	q8, d16
   11c5c:	vst1.32	{d16-d17}, [r1]
   11c60:	ldr	r1, [sp, #76]	; 0x4c
   11c64:	vld1.32	{d16[0]}, [r1 :32]
   11c68:	add	r1, r4, #272	; 0x110
   11c6c:	vmovl.u8	q8, d16
   11c70:	vmovl.u16	q8, d16
   11c74:	vst1.32	{d16-d17}, [r1]
   11c78:	ldr	r1, [sp, #80]	; 0x50
   11c7c:	vld1.32	{d16[0]}, [r1 :32]
   11c80:	add	r1, r4, #288	; 0x120
   11c84:	vmovl.u8	q8, d16
   11c88:	vmovl.u16	q8, d16
   11c8c:	vst1.32	{d16-d17}, [r1]
   11c90:	ldr	r1, [sp, #84]	; 0x54
   11c94:	vld1.32	{d16[0]}, [r1 :32]
   11c98:	add	r1, r4, #304	; 0x130
   11c9c:	vmovl.u8	q8, d16
   11ca0:	vmovl.u16	q8, d16
   11ca4:	vst1.32	{d16-d17}, [r1]
   11ca8:	ldr	r1, [sp, #88]	; 0x58
   11cac:	vld1.32	{d16[0]}, [r1 :32]
   11cb0:	add	r1, r4, #320	; 0x140
   11cb4:	vmovl.u8	q8, d16
   11cb8:	vmovl.u16	q8, d16
   11cbc:	vst1.32	{d16-d17}, [r1]
   11cc0:	ldr	r1, [sp, #92]	; 0x5c
   11cc4:	vld1.32	{d16[0]}, [r1 :32]
   11cc8:	add	r1, r4, #336	; 0x150
   11ccc:	vmovl.u8	q8, d16
   11cd0:	vmovl.u16	q8, d16
   11cd4:	vst1.32	{d16-d17}, [r1]
   11cd8:	ldr	r1, [sp, #96]	; 0x60
   11cdc:	vld1.32	{d16[0]}, [r1 :32]
   11ce0:	add	r1, r4, #352	; 0x160
   11ce4:	vmovl.u8	q8, d16
   11ce8:	vmovl.u16	q8, d16
   11cec:	vst1.32	{d16-d17}, [r1]
   11cf0:	ldr	r1, [sp, #100]	; 0x64
   11cf4:	vld1.32	{d16[0]}, [r1 :32]
   11cf8:	add	r1, r4, #368	; 0x170
   11cfc:	vmovl.u8	q8, d16
   11d00:	vmovl.u16	q8, d16
   11d04:	vst1.32	{d16-d17}, [r1]
   11d08:	ldr	r1, [sp, #104]	; 0x68
   11d0c:	vld1.32	{d16[0]}, [r1 :32]
   11d10:	add	r1, r4, #384	; 0x180
   11d14:	vmovl.u8	q8, d16
   11d18:	vmovl.u16	q8, d16
   11d1c:	vst1.32	{d16-d17}, [r1]
   11d20:	ldr	r1, [sp, #108]	; 0x6c
   11d24:	vld1.32	{d16[0]}, [r1 :32]
   11d28:	add	r1, r4, #400	; 0x190
   11d2c:	vmovl.u8	q8, d16
   11d30:	vmovl.u16	q8, d16
   11d34:	vst1.32	{d16-d17}, [r1]
   11d38:	ldr	r1, [sp, #112]	; 0x70
   11d3c:	vld1.32	{d16[0]}, [r1 :32]
   11d40:	add	r1, r4, #416	; 0x1a0
   11d44:	vmovl.u8	q8, d16
   11d48:	vmovl.u16	q8, d16
   11d4c:	vst1.32	{d16-d17}, [r1]
   11d50:	ldr	r1, [sp, #116]	; 0x74
   11d54:	vld1.32	{d16[0]}, [r1 :32]
   11d58:	add	r1, r4, #432	; 0x1b0
   11d5c:	vmovl.u8	q8, d16
   11d60:	vmovl.u16	q8, d16
   11d64:	vst1.32	{d16-d17}, [r1]
   11d68:	ldr	r1, [sp, #120]	; 0x78
   11d6c:	vld1.32	{d16[0]}, [r1 :32]
   11d70:	add	r1, r4, #448	; 0x1c0
   11d74:	vmovl.u8	q8, d16
   11d78:	vmovl.u16	q8, d16
   11d7c:	vst1.32	{d16-d17}, [r1]
   11d80:	ldr	r1, [sp, #124]	; 0x7c
   11d84:	vld1.32	{d16[0]}, [r1 :32]
   11d88:	add	r1, r4, #464	; 0x1d0
   11d8c:	vmovl.u8	q8, d16
   11d90:	vmovl.u16	q8, d16
   11d94:	vst1.32	{d16-d17}, [r1]
   11d98:	ldr	r1, [sp, #128]	; 0x80
   11d9c:	vld1.32	{d16[0]}, [r1 :32]
   11da0:	add	r1, r4, #480	; 0x1e0
   11da4:	vmovl.u8	q8, d16
   11da8:	vmovl.u16	q8, d16
   11dac:	vst1.32	{d16-d17}, [r1]
   11db0:	ldr	r1, [sp, #132]	; 0x84
   11db4:	vld1.32	{d16[0]}, [r1 :32]
   11db8:	add	r1, r4, #496	; 0x1f0
   11dbc:	vmovl.u8	q8, d16
   11dc0:	vmovl.u16	q8, d16
   11dc4:	vst1.32	{d16-d17}, [r1]
   11dc8:	ldr	r1, [sp, #136]	; 0x88
   11dcc:	vld1.32	{d16[0]}, [r1 :32]
   11dd0:	add	r1, r4, #512	; 0x200
   11dd4:	vmovl.u8	q8, d16
   11dd8:	vmovl.u16	q8, d16
   11ddc:	vst1.32	{d16-d17}, [r1]
   11de0:	ldr	r1, [sp, #140]	; 0x8c
   11de4:	vld1.32	{d16[0]}, [r1 :32]
   11de8:	add	r1, r4, #528	; 0x210
   11dec:	vmovl.u8	q8, d16
   11df0:	vmovl.u16	q8, d16
   11df4:	vst1.32	{d16-d17}, [r1]
   11df8:	ldr	r1, [sp, #144]	; 0x90
   11dfc:	vld1.32	{d16[0]}, [r1 :32]
   11e00:	add	r1, r4, #544	; 0x220
   11e04:	vmovl.u8	q8, d16
   11e08:	vmovl.u16	q8, d16
   11e0c:	vst1.32	{d16-d17}, [r1]
   11e10:	ldr	r1, [sp, #148]	; 0x94
   11e14:	vld1.32	{d16[0]}, [r1 :32]
   11e18:	add	r1, r4, #560	; 0x230
   11e1c:	vmovl.u8	q8, d16
   11e20:	vmovl.u16	q8, d16
   11e24:	vst1.32	{d16-d17}, [r1]
   11e28:	ldr	r1, [sp, #152]	; 0x98
   11e2c:	vld1.32	{d16[0]}, [r1 :32]
   11e30:	add	r1, r4, #576	; 0x240
   11e34:	vmovl.u8	q8, d16
   11e38:	vmovl.u16	q8, d16
   11e3c:	vst1.32	{d16-d17}, [r1]
   11e40:	ldr	r1, [sp, #156]	; 0x9c
   11e44:	vld1.32	{d16[0]}, [r1 :32]
   11e48:	add	r1, r4, #592	; 0x250
   11e4c:	vmovl.u8	q8, d16
   11e50:	vmovl.u16	q8, d16
   11e54:	vst1.32	{d16-d17}, [r1]
   11e58:	ldr	r1, [sp, #160]	; 0xa0
   11e5c:	vld1.32	{d16[0]}, [r1 :32]
   11e60:	add	r1, r4, #608	; 0x260
   11e64:	vmovl.u8	q8, d16
   11e68:	vmovl.u16	q8, d16
   11e6c:	vst1.32	{d16-d17}, [r1]
   11e70:	ldr	r1, [sp, #164]	; 0xa4
   11e74:	vld1.32	{d16[0]}, [r1 :32]
   11e78:	add	r1, r4, #624	; 0x270
   11e7c:	vmovl.u8	q8, d16
   11e80:	vmovl.u16	q8, d16
   11e84:	vst1.32	{d16-d17}, [r1]
   11e88:	ldr	r1, [sp, #168]	; 0xa8
   11e8c:	vld1.32	{d16[0]}, [r1 :32]
   11e90:	add	r1, r4, #640	; 0x280
   11e94:	vmovl.u8	q8, d16
   11e98:	vmovl.u16	q8, d16
   11e9c:	vst1.32	{d16-d17}, [r1]
   11ea0:	ldr	r1, [sp, #172]	; 0xac
   11ea4:	vld1.32	{d16[0]}, [r1 :32]
   11ea8:	add	r1, r4, #656	; 0x290
   11eac:	vmovl.u8	q8, d16
   11eb0:	vmovl.u16	q8, d16
   11eb4:	vst1.32	{d16-d17}, [r1]
   11eb8:	ldr	r1, [sp, #176]	; 0xb0
   11ebc:	vld1.32	{d16[0]}, [r1 :32]
   11ec0:	add	r1, r4, #672	; 0x2a0
   11ec4:	vmovl.u8	q8, d16
   11ec8:	vmovl.u16	q8, d16
   11ecc:	vst1.32	{d16-d17}, [r1]
   11ed0:	ldr	r1, [sp, #180]	; 0xb4
   11ed4:	vld1.32	{d16[0]}, [r1 :32]
   11ed8:	add	r1, r4, #688	; 0x2b0
   11edc:	vmovl.u8	q8, d16
   11ee0:	vmovl.u16	q8, d16
   11ee4:	vst1.32	{d16-d17}, [r1]
   11ee8:	ldr	r1, [sp, #184]	; 0xb8
   11eec:	vld1.32	{d16[0]}, [r1 :32]
   11ef0:	add	r1, r4, #704	; 0x2c0
   11ef4:	vmovl.u8	q8, d16
   11ef8:	vmovl.u16	q8, d16
   11efc:	vst1.32	{d16-d17}, [r1]
   11f00:	ldr	r1, [sp, #188]	; 0xbc
   11f04:	vld1.32	{d16[0]}, [r1 :32]
   11f08:	add	r1, r4, #720	; 0x2d0
   11f0c:	vmovl.u8	q8, d16
   11f10:	vmovl.u16	q8, d16
   11f14:	vst1.32	{d16-d17}, [r1]
   11f18:	ldr	r1, [sp, #192]	; 0xc0
   11f1c:	vld1.32	{d16[0]}, [r1 :32]
   11f20:	add	r1, r4, #736	; 0x2e0
   11f24:	vmovl.u8	q8, d16
   11f28:	vmovl.u16	q8, d16
   11f2c:	vst1.32	{d16-d17}, [r1]
   11f30:	ldr	r1, [sp, #196]	; 0xc4
   11f34:	vld1.32	{d16[0]}, [r1 :32]
   11f38:	add	r1, r4, #752	; 0x2f0
   11f3c:	vmovl.u8	q8, d16
   11f40:	vmovl.u16	q8, d16
   11f44:	vst1.32	{d16-d17}, [r1]
   11f48:	ldr	r1, [sp, #200]	; 0xc8
   11f4c:	vld1.32	{d16[0]}, [r1 :32]
   11f50:	add	r1, r4, #768	; 0x300
   11f54:	vmovl.u8	q8, d16
   11f58:	vmovl.u16	q8, d16
   11f5c:	vst1.32	{d16-d17}, [r1]
   11f60:	ldr	r1, [sp, #204]	; 0xcc
   11f64:	vld1.32	{d16[0]}, [r1 :32]
   11f68:	add	r1, r4, #784	; 0x310
   11f6c:	vmovl.u8	q8, d16
   11f70:	vmovl.u16	q8, d16
   11f74:	vst1.32	{d16-d17}, [r1]
   11f78:	ldr	r1, [sp, #208]	; 0xd0
   11f7c:	vld1.32	{d16[0]}, [r1 :32]
   11f80:	add	r1, r4, #800	; 0x320
   11f84:	vmovl.u8	q8, d16
   11f88:	vmovl.u16	q8, d16
   11f8c:	vst1.32	{d16-d17}, [r1]
   11f90:	ldr	r1, [sp, #212]	; 0xd4
   11f94:	vld1.32	{d16[0]}, [r1 :32]
   11f98:	add	r1, r4, #816	; 0x330
   11f9c:	vmovl.u8	q8, d16
   11fa0:	vmovl.u16	q8, d16
   11fa4:	vst1.32	{d16-d17}, [r1]
   11fa8:	ldr	r1, [sp, #216]	; 0xd8
   11fac:	vld1.32	{d16[0]}, [r1 :32]
   11fb0:	add	r1, r4, #832	; 0x340
   11fb4:	vmovl.u8	q8, d16
   11fb8:	vmovl.u16	q8, d16
   11fbc:	vst1.32	{d16-d17}, [r1]
   11fc0:	ldr	r1, [sp, #220]	; 0xdc
   11fc4:	vld1.32	{d16[0]}, [r1 :32]
   11fc8:	add	r1, r4, #848	; 0x350
   11fcc:	vmovl.u8	q8, d16
   11fd0:	vmovl.u16	q8, d16
   11fd4:	vst1.32	{d16-d17}, [r1]
   11fd8:	ldr	r1, [sp, #224]	; 0xe0
   11fdc:	vld1.32	{d16[0]}, [r1 :32]
   11fe0:	add	r1, r4, #864	; 0x360
   11fe4:	vmovl.u8	q8, d16
   11fe8:	vmovl.u16	q8, d16
   11fec:	vst1.32	{d16-d17}, [r1]
   11ff0:	ldr	r1, [sp, #228]	; 0xe4
   11ff4:	vld1.32	{d16[0]}, [r1 :32]
   11ff8:	add	r1, r4, #880	; 0x370
   11ffc:	vmovl.u8	q8, d16
   12000:	vmovl.u16	q8, d16
   12004:	vst1.32	{d16-d17}, [r1]
   12008:	ldr	r1, [sp, #232]	; 0xe8
   1200c:	vld1.32	{d16[0]}, [r1 :32]
   12010:	add	r1, r4, #896	; 0x380
   12014:	vmovl.u8	q8, d16
   12018:	vmovl.u16	q8, d16
   1201c:	vst1.32	{d16-d17}, [r1]
   12020:	ldr	r1, [sp, #236]	; 0xec
   12024:	vld1.32	{d16[0]}, [r1 :32]
   12028:	add	r1, r4, #912	; 0x390
   1202c:	vmovl.u8	q8, d16
   12030:	vmovl.u16	q8, d16
   12034:	vst1.32	{d16-d17}, [r1]
   12038:	ldr	r1, [sp, #240]	; 0xf0
   1203c:	vld1.32	{d16[0]}, [r1 :32]
   12040:	add	r1, r4, #928	; 0x3a0
   12044:	vmovl.u8	q8, d16
   12048:	vmovl.u16	q8, d16
   1204c:	vst1.32	{d16-d17}, [r1]
   12050:	ldr	r1, [sp, #244]	; 0xf4
   12054:	vld1.32	{d16[0]}, [r1 :32]
   12058:	add	r1, r4, #944	; 0x3b0
   1205c:	vmovl.u8	q8, d16
   12060:	vmovl.u16	q8, d16
   12064:	vst1.32	{d16-d17}, [r1]
   12068:	ldr	r1, [sp, #248]	; 0xf8
   1206c:	vld1.32	{d16[0]}, [r1 :32]
   12070:	add	r1, r4, #960	; 0x3c0
   12074:	vmovl.u8	q8, d16
   12078:	vmovl.u16	q8, d16
   1207c:	vst1.32	{d16-d17}, [r1]
   12080:	ldr	r1, [sp, #252]	; 0xfc
   12084:	vld1.32	{d16[0]}, [r1 :32]
   12088:	add	r1, r4, #976	; 0x3d0
   1208c:	vmovl.u8	q8, d16
   12090:	vmovl.u16	q8, d16
   12094:	vst1.32	{d16-d17}, [r1]
   12098:	ldr	r1, [sp, #256]	; 0x100
   1209c:	vld1.32	{d16[0]}, [r1 :32]
   120a0:	add	r1, r4, #992	; 0x3e0
   120a4:	vmovl.u8	q8, d16
   120a8:	vmovl.u16	q8, d16
   120ac:	vst1.32	{d16-d17}, [r1]
   120b0:	ldr	r1, [sp, #260]	; 0x104
   120b4:	vld1.32	{d16[0]}, [r1 :32]
   120b8:	add	r1, r4, #1008	; 0x3f0
   120bc:	mov	r4, r9
   120c0:	vmovl.u8	q8, d16
   120c4:	vmovl.u16	q8, d16
   120c8:	vst1.32	{d16-d17}, [r1]
   120cc:	blt	11aa4 <ReadUInt32Data+0xf50>
   120d0:	ldr	r0, [sp, #4]
   120d4:	ldr	r1, [sp, #268]	; 0x10c
   120d8:	cmp	sl, r0
   120dc:	bge	136e4 <ReadUInt32Data+0x2b90>
   120e0:	ldr	r3, [r1]
   120e4:	sub	r4, r0, sl
   120e8:	add	r7, sp, #320	; 0x140
   120ec:	mov	r1, r6
   120f0:	mov	r0, r7
   120f4:	mov	r2, r4
   120f8:	bl	18b8 <fread@plt>
   120fc:	add	r5, r0, r5
   12100:	cmp	r4, #1
   12104:	blt	136e4 <ReadUInt32Data+0x2b90>
   12108:	mov	r0, #0
   1210c:	cmp	r4, #4
   12110:	bcc	12140 <ReadUInt32Data+0x15ec>
   12114:	bic	r1, r4, #3
   12118:	bic	r0, r4, #3
   1211c:	vld1.32	{d16[0]}, [r7 :32]
   12120:	subs	r1, r1, #4
   12124:	add	r7, r7, #4
   12128:	vmovl.u8	q8, d16
   1212c:	vmovl.u16	q8, d16
   12130:	vst1.32	{d16-d17}, [r9]!
   12134:	bne	1211c <ReadUInt32Data+0x15c8>
   12138:	cmp	r4, r0
   1213c:	beq	136e4 <ReadUInt32Data+0x2b90>
   12140:	ldr	r3, [sp, #4]
   12144:	add	r1, sp, #320	; 0x140
   12148:	add	r2, r0, sl
   1214c:	add	r1, r1, r0
   12150:	add	r2, r8, r2, lsl #2
   12154:	sub	r0, r3, r0
   12158:	sub	r0, r0, sl
   1215c:	ldrb	r3, [r1], #1
   12160:	subs	r0, r0, #1
   12164:	str	r3, [r2], #4
   12168:	bne	1215c <ReadUInt32Data+0x1608>
   1216c:	b	136e4 <ReadUInt32Data+0x2b90>
   12170:	cmp	r7, #256	; 0x100
   12174:	bgt	12bc0 <ReadUInt32Data+0x206c>
   12178:	ldr	r3, [sl]
   1217c:	add	r4, sp, #320	; 0x140
   12180:	mov	r1, r6
   12184:	mov	r2, r7
   12188:	mov	r0, r4
   1218c:	bl	18b8 <fread@plt>
   12190:	mov	r5, r0
   12194:	cmp	r7, #1
   12198:	blt	136e4 <ReadUInt32Data+0x2b90>
   1219c:	mov	r0, #0
   121a0:	cmp	r7, #4
   121a4:	bcc	121f4 <ReadUInt32Data+0x16a0>
   121a8:	bic	r0, r7, #3
   121ac:	mov	ip, r7
   121b0:	add	r1, sp, #272	; 0x110
   121b4:	mov	r3, r8
   121b8:	mov	r2, r0
   121bc:	ldr	r7, [r4]
   121c0:	ldr	r6, [r4, #4]
   121c4:	subs	r2, r2, #4
   121c8:	add	r4, r4, #8
   121cc:	str	r6, [sp, #276]	; 0x114
   121d0:	str	r7, [sp, #272]	; 0x110
   121d4:	vld1.16	{d16}, [r1 :64]
   121d8:	vmovl.s16	q8, d16
   121dc:	vst1.32	{d16-d17}, [r3]!
   121e0:	bne	121bc <ReadUInt32Data+0x1668>
   121e4:	ldr	r6, [sp, #264]	; 0x108
   121e8:	mov	r7, ip
   121ec:	cmp	r0, ip
   121f0:	beq	136e4 <ReadUInt32Data+0x2b90>
   121f4:	add	r3, sp, #320	; 0x140
   121f8:	sub	r1, r7, r0
   121fc:	add	r2, r8, r0, lsl #2
   12200:	add	r0, r3, r0, lsl #1
   12204:	ldrsh	r3, [r0], #2
   12208:	subs	r1, r1, #1
   1220c:	str	r3, [r2], #4
   12210:	bne	12204 <ReadUInt32Data+0x16b0>
   12214:	b	136e4 <ReadUInt32Data+0x2b90>
   12218:	cmp	r7, #256	; 0x100
   1221c:	bgt	12d4c <ReadUInt32Data+0x21f8>
   12220:	ldr	r3, [sl]
   12224:	add	r4, sp, #320	; 0x140
   12228:	mov	r1, r6
   1222c:	mov	r2, r7
   12230:	mov	r0, r4
   12234:	bl	18b8 <fread@plt>
   12238:	mov	r5, r0
   1223c:	cmp	r7, #1
   12240:	blt	136e4 <ReadUInt32Data+0x2b90>
   12244:	mov	r0, #0
   12248:	cmp	r7, #4
   1224c:	bcc	1229c <ReadUInt32Data+0x1748>
   12250:	bic	r0, r7, #3
   12254:	mov	ip, r7
   12258:	add	r1, sp, #296	; 0x128
   1225c:	mov	r3, r8
   12260:	mov	r2, r0
   12264:	ldr	r7, [r4]
   12268:	ldr	r6, [r4, #4]
   1226c:	subs	r2, r2, #4
   12270:	add	r4, r4, #8
   12274:	str	r6, [sp, #300]	; 0x12c
   12278:	str	r7, [sp, #296]	; 0x128
   1227c:	vld1.16	{d16}, [r1 :64]
   12280:	vmovl.u16	q8, d16
   12284:	vst1.32	{d16-d17}, [r3]!
   12288:	bne	12264 <ReadUInt32Data+0x1710>
   1228c:	ldr	r6, [sp, #264]	; 0x108
   12290:	mov	r7, ip
   12294:	cmp	r0, ip
   12298:	beq	136e4 <ReadUInt32Data+0x2b90>
   1229c:	add	r3, sp, #320	; 0x140
   122a0:	sub	r1, r7, r0
   122a4:	add	r2, r8, r0, lsl #2
   122a8:	add	r0, r3, r0, lsl #1
   122ac:	ldrh	r3, [r0], #2
   122b0:	subs	r1, r1, #1
   122b4:	str	r3, [r2], #4
   122b8:	bne	122ac <ReadUInt32Data+0x1758>
   122bc:	b	136e4 <ReadUInt32Data+0x2b90>
   122c0:	cmp	r7, #256	; 0x100
   122c4:	ble	12388 <ReadUInt32Data+0x1834>
   122c8:	mov	r0, r7
   122cc:	mov	r6, sl
   122d0:	lsl	r7, r7, #2
   122d4:	mov	r5, #0
   122d8:	add	r9, sp, #320	; 0x140
   122dc:	mov	sl, #0
   122e0:	str	r0, [sp, #4]
   122e4:	sub	r0, r0, #256	; 0x100
   122e8:	str	r0, [sp, #260]	; 0x104
   122ec:	ldr	r3, [r6]
   122f0:	ldr	r1, [sp, #264]	; 0x108
   122f4:	mov	r0, r9
   122f8:	mov	r2, #256	; 0x100
   122fc:	bl	18b8 <fread@plt>
   12300:	mov	r4, r0
   12304:	add	r0, r8, r5, lsl #2
   12308:	mov	r1, r9
   1230c:	mov	r2, #1024	; 0x400
   12310:	bl	181c <memcpy@plt>
   12314:	ldr	r0, [sp, #260]	; 0x104
   12318:	add	r5, r5, #256	; 0x100
   1231c:	add	sl, r4, sl
   12320:	sub	r7, r7, #1024	; 0x400
   12324:	cmp	r5, r0
   12328:	blt	122ec <ReadUInt32Data+0x1798>
   1232c:	ldr	r0, [sp, #4]
   12330:	cmp	r5, r0
   12334:	bge	13384 <ReadUInt32Data+0x2830>
   12338:	ldr	r3, [r6]
   1233c:	ldr	r6, [sp, #264]	; 0x108
   12340:	sub	r4, r0, r5
   12344:	add	r0, sp, #320	; 0x140
   12348:	mov	r2, r4
   1234c:	mov	r1, r6
   12350:	bl	18b8 <fread@plt>
   12354:	add	sl, r0, sl
   12358:	cmp	r4, #1
   1235c:	blt	12370 <ReadUInt32Data+0x181c>
   12360:	add	r0, r8, r5, lsl #2
   12364:	add	r1, sp, #320	; 0x140
   12368:	mov	r2, r7
   1236c:	bl	181c <memcpy@plt>
   12370:	mov	r5, sl
   12374:	mul	r0, r5, r6
   12378:	sub	sp, fp, #28
   1237c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12380:	cmp	r7, #256	; 0x100
   12384:	bgt	12ed8 <ReadUInt32Data+0x2384>
   12388:	ldr	r3, [sl]
   1238c:	add	r0, sp, #320	; 0x140
   12390:	mov	r1, r6
   12394:	mov	r2, r7
   12398:	bl	18b8 <fread@plt>
   1239c:	mov	r5, r0
   123a0:	cmp	r7, #1
   123a4:	blt	136e4 <ReadUInt32Data+0x2b90>
   123a8:	lsl	r2, r7, #2
   123ac:	add	r1, sp, #320	; 0x140
   123b0:	mov	r0, r8
   123b4:	bl	181c <memcpy@plt>
   123b8:	mul	r0, r5, r6
   123bc:	sub	sp, fp, #28
   123c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123c4:	cmp	r7, #256	; 0x100
   123c8:	bgt	12f90 <ReadUInt32Data+0x243c>
   123cc:	ldr	r3, [sl]
   123d0:	add	r4, sp, #320	; 0x140
   123d4:	mov	r1, r6
   123d8:	mov	r2, r7
   123dc:	mov	r0, r4
   123e0:	bl	18b8 <fread@plt>
   123e4:	mov	r5, r0
   123e8:	cmp	r7, #1
   123ec:	blt	136e4 <ReadUInt32Data+0x2b90>
   123f0:	mov	r0, #0
   123f4:	cmp	r7, #4
   123f8:	bcc	12424 <ReadUInt32Data+0x18d0>
   123fc:	bic	r0, r7, #3
   12400:	mov	r2, r8
   12404:	mov	r1, r0
   12408:	vld1.32	{d16-d17}, [r4]!
   1240c:	subs	r1, r1, #4
   12410:	vcvt.u32.f32	q8, q8
   12414:	vst1.32	{d16-d17}, [r2]!
   12418:	bne	12408 <ReadUInt32Data+0x18b4>
   1241c:	cmp	r0, r7
   12420:	beq	136e4 <ReadUInt32Data+0x2b90>
   12424:	add	r3, sp, #320	; 0x140
   12428:	sub	r1, r7, r0
   1242c:	add	r2, r8, r0, lsl #2
   12430:	add	r0, r3, r0, lsl #2
   12434:	vldr	s0, [r0]
   12438:	subs	r1, r1, #1
   1243c:	add	r0, r0, #4
   12440:	vcvt.u32.f32	s0, s0
   12444:	vmov	r3, s0
   12448:	str	r3, [r2], #4
   1244c:	bne	12434 <ReadUInt32Data+0x18e0>
   12450:	b	136e4 <ReadUInt32Data+0x2b90>
   12454:	cmp	r7, #256	; 0x100
   12458:	bgt	130d4 <ReadUInt32Data+0x2580>
   1245c:	ldr	r3, [sl]
   12460:	add	r4, sp, #320	; 0x140
   12464:	mov	r1, r6
   12468:	mov	r2, r7
   1246c:	mov	r0, r4
   12470:	bl	18b8 <fread@plt>
   12474:	mov	r5, r0
   12478:	cmp	r7, #1
   1247c:	blt	136e4 <ReadUInt32Data+0x2b90>
   12480:	mov	r0, #0
   12484:	beq	124c4 <ReadUInt32Data+0x1970>
   12488:	bic	r0, r7, #1
   1248c:	mov	r2, r8
   12490:	mov	r1, r0
   12494:	vld1.64	{d16-d17}, [r4]!
   12498:	subs	r1, r1, #2
   1249c:	vcvt.u32.f64	s0, d16
   124a0:	vcvt.u32.f64	s2, d17
   124a4:	vmov	r3, s0
   124a8:	vmov.32	d16[0], r3
   124ac:	vmov	r3, s2
   124b0:	vmov.32	d16[1], r3
   124b4:	vst1.32	{d16}, [r2]!
   124b8:	bne	12494 <ReadUInt32Data+0x1940>
   124bc:	cmp	r0, r7
   124c0:	beq	136e4 <ReadUInt32Data+0x2b90>
   124c4:	add	r3, sp, #320	; 0x140
   124c8:	sub	r1, r7, r0
   124cc:	add	r2, r8, r0, lsl #2
   124d0:	add	r0, r3, r0, lsl #3
   124d4:	vldr	d16, [r0]
   124d8:	subs	r1, r1, #1
   124dc:	add	r0, r0, #8
   124e0:	vcvt.u32.f64	s0, d16
   124e4:	vmov	r3, s0
   124e8:	str	r3, [r2], #4
   124ec:	bne	124d4 <ReadUInt32Data+0x1980>
   124f0:	b	136e4 <ReadUInt32Data+0x2b90>
   124f4:	cmp	r7, #256	; 0x100
   124f8:	bgt	13244 <ReadUInt32Data+0x26f0>
   124fc:	ldr	r3, [sl]
   12500:	add	r4, sp, #320	; 0x140
   12504:	mov	r1, r6
   12508:	mov	r2, r7
   1250c:	mov	r0, r4
   12510:	bl	18b8 <fread@plt>
   12514:	cmp	r7, #1
   12518:	blt	133f0 <ReadUInt32Data+0x289c>
   1251c:	mov	ip, #0
   12520:	beq	1254c <ReadUInt32Data+0x19f8>
   12524:	bic	ip, r7, #1
   12528:	mov	r2, r8
   1252c:	mov	r1, ip
   12530:	vld1.64	{d16-d17}, [r4]!
   12534:	subs	r1, r1, #2
   12538:	vmovn.i64	d16, q8
   1253c:	vst1.32	{d16}, [r2]!
   12540:	bne	12530 <ReadUInt32Data+0x19dc>
   12544:	cmp	ip, r7
   12548:	beq	133f0 <ReadUInt32Data+0x289c>
   1254c:	add	r3, sp, #320	; 0x140
   12550:	sub	r1, r7, ip
   12554:	add	r2, r8, ip, lsl #2
   12558:	add	r4, r3, ip, lsl #3
   1255c:	ldr	r3, [r4], #8
   12560:	subs	r1, r1, #1
   12564:	str	r3, [r2], #4
   12568:	bne	1255c <ReadUInt32Data+0x1a08>
   1256c:	b	133f0 <ReadUInt32Data+0x289c>
   12570:	sub	r0, r7, #256	; 0x100
   12574:	add	r1, r8, #1024	; 0x400
   12578:	add	r4, sp, #320	; 0x140
   1257c:	mov	r5, #0
   12580:	str	sl, [sp, #268]	; 0x10c
   12584:	str	r7, [sp, #4]
   12588:	str	r0, [sp, #260]	; 0x104
   1258c:	mov	r0, #0
   12590:	mov	sl, r0
   12594:	ldr	r0, [sp, #268]	; 0x10c
   12598:	mov	r9, r1
   1259c:	mov	r1, r6
   125a0:	mov	r2, #256	; 0x100
   125a4:	ldr	r3, [r0]
   125a8:	mov	r0, r4
   125ac:	bl	18b8 <fread@plt>
   125b0:	mov	r7, r0
   125b4:	mov	r6, #0
   125b8:	add	r0, r4, r6
   125bc:	bl	1c18 <Mat_int16Swap>
   125c0:	str	r0, [r8, r6, lsl #1]
   125c4:	add	r6, r6, #2
   125c8:	cmp	r6, #512	; 0x200
   125cc:	bne	125b8 <ReadUInt32Data+0x1a64>
   125d0:	ldr	r2, [sp, #260]	; 0x104
   125d4:	ldr	r6, [sp, #264]	; 0x108
   125d8:	add	r0, sl, #256	; 0x100
   125dc:	add	r5, r7, r5
   125e0:	add	r8, r8, #1024	; 0x400
   125e4:	add	r1, r9, #1024	; 0x400
   125e8:	cmp	r0, r2
   125ec:	blt	12590 <ReadUInt32Data+0x1a3c>
   125f0:	ldr	r2, [sp, #4]
   125f4:	cmp	r0, r2
   125f8:	bge	136e4 <ReadUInt32Data+0x2b90>
   125fc:	mov	r1, r6
   12600:	sub	r6, r2, r0
   12604:	ldr	r0, [sp, #268]	; 0x10c
   12608:	add	r4, sp, #320	; 0x140
   1260c:	mov	r2, r6
   12610:	ldr	r3, [r0]
   12614:	mov	r0, r4
   12618:	bl	18b8 <fread@plt>
   1261c:	add	r5, r0, r5
   12620:	cmp	r6, #1
   12624:	blt	136e0 <ReadUInt32Data+0x2b8c>
   12628:	ldr	r0, [sp, #260]	; 0x104
   1262c:	sub	r6, r0, sl
   12630:	mov	r0, r4
   12634:	bl	1c18 <Mat_int16Swap>
   12638:	str	r0, [r9], #4
   1263c:	subs	r6, r6, #1
   12640:	add	r4, r4, #2
   12644:	bne	12630 <ReadUInt32Data+0x1adc>
   12648:	b	136e0 <ReadUInt32Data+0x2b8c>
   1264c:	sub	r0, r7, #256	; 0x100
   12650:	add	r1, r8, #1024	; 0x400
   12654:	add	r4, sp, #320	; 0x140
   12658:	mov	r5, #0
   1265c:	str	sl, [sp, #268]	; 0x10c
   12660:	str	r7, [sp, #4]
   12664:	str	r0, [sp, #260]	; 0x104
   12668:	mov	r0, #0
   1266c:	mov	sl, r0
   12670:	ldr	r0, [sp, #268]	; 0x10c
   12674:	mov	r9, r1
   12678:	mov	r1, r6
   1267c:	mov	r2, #256	; 0x100
   12680:	ldr	r3, [r0]
   12684:	mov	r0, r4
   12688:	bl	18b8 <fread@plt>
   1268c:	mov	r7, r0
   12690:	mov	r6, #0
   12694:	add	r0, r4, r6
   12698:	bl	1c2c <Mat_uint16Swap>
   1269c:	str	r0, [r8, r6, lsl #1]
   126a0:	add	r6, r6, #2
   126a4:	cmp	r6, #512	; 0x200
   126a8:	bne	12694 <ReadUInt32Data+0x1b40>
   126ac:	ldr	r2, [sp, #260]	; 0x104
   126b0:	ldr	r6, [sp, #264]	; 0x108
   126b4:	add	r0, sl, #256	; 0x100
   126b8:	add	r5, r7, r5
   126bc:	add	r8, r8, #1024	; 0x400
   126c0:	add	r1, r9, #1024	; 0x400
   126c4:	cmp	r0, r2
   126c8:	blt	1266c <ReadUInt32Data+0x1b18>
   126cc:	ldr	r2, [sp, #4]
   126d0:	cmp	r0, r2
   126d4:	bge	136e4 <ReadUInt32Data+0x2b90>
   126d8:	mov	r1, r6
   126dc:	sub	r6, r2, r0
   126e0:	ldr	r0, [sp, #268]	; 0x10c
   126e4:	add	r4, sp, #320	; 0x140
   126e8:	mov	r2, r6
   126ec:	ldr	r3, [r0]
   126f0:	mov	r0, r4
   126f4:	bl	18b8 <fread@plt>
   126f8:	add	r5, r0, r5
   126fc:	cmp	r6, #1
   12700:	blt	136e0 <ReadUInt32Data+0x2b8c>
   12704:	ldr	r0, [sp, #260]	; 0x104
   12708:	sub	r6, r0, sl
   1270c:	mov	r0, r4
   12710:	bl	1c2c <Mat_uint16Swap>
   12714:	str	r0, [r9], #4
   12718:	subs	r6, r6, #1
   1271c:	add	r4, r4, #2
   12720:	bne	1270c <ReadUInt32Data+0x1bb8>
   12724:	b	136e0 <ReadUInt32Data+0x2b8c>
   12728:	sub	r0, r7, #256	; 0x100
   1272c:	add	r1, r8, #1024	; 0x400
   12730:	add	r4, sp, #320	; 0x140
   12734:	mov	r5, #0
   12738:	str	sl, [sp, #268]	; 0x10c
   1273c:	str	r7, [sp, #4]
   12740:	str	r0, [sp, #260]	; 0x104
   12744:	mov	r0, #0
   12748:	mov	sl, r0
   1274c:	ldr	r0, [sp, #268]	; 0x10c
   12750:	mov	r9, r1
   12754:	mov	r1, r6
   12758:	mov	r2, #256	; 0x100
   1275c:	ldr	r3, [r0]
   12760:	mov	r0, r4
   12764:	bl	18b8 <fread@plt>
   12768:	mov	r7, r0
   1276c:	mov	r6, #0
   12770:	add	r0, r4, r6
   12774:	bl	1bf0 <Mat_int32Swap>
   12778:	str	r0, [r8, r6]
   1277c:	add	r6, r6, #4
   12780:	cmp	r6, #1024	; 0x400
   12784:	bne	12770 <ReadUInt32Data+0x1c1c>
   12788:	ldr	r2, [sp, #260]	; 0x104
   1278c:	ldr	r6, [sp, #264]	; 0x108
   12790:	add	r0, sl, #256	; 0x100
   12794:	add	r5, r7, r5
   12798:	add	r8, r8, #1024	; 0x400
   1279c:	add	r1, r9, #1024	; 0x400
   127a0:	cmp	r0, r2
   127a4:	blt	12748 <ReadUInt32Data+0x1bf4>
   127a8:	ldr	r2, [sp, #4]
   127ac:	cmp	r0, r2
   127b0:	bge	136e4 <ReadUInt32Data+0x2b90>
   127b4:	mov	r1, r6
   127b8:	sub	r6, r2, r0
   127bc:	ldr	r0, [sp, #268]	; 0x10c
   127c0:	add	r4, sp, #320	; 0x140
   127c4:	mov	r2, r6
   127c8:	ldr	r3, [r0]
   127cc:	mov	r0, r4
   127d0:	bl	18b8 <fread@plt>
   127d4:	add	r5, r0, r5
   127d8:	cmp	r6, #1
   127dc:	blt	136e0 <ReadUInt32Data+0x2b8c>
   127e0:	ldr	r0, [sp, #260]	; 0x104
   127e4:	sub	r6, r0, sl
   127e8:	mov	r0, r4
   127ec:	bl	1bf0 <Mat_int32Swap>
   127f0:	str	r0, [r9], #4
   127f4:	subs	r6, r6, #1
   127f8:	add	r4, r4, #4
   127fc:	bne	127e8 <ReadUInt32Data+0x1c94>
   12800:	b	136e0 <ReadUInt32Data+0x2b8c>
   12804:	sub	r0, r7, #256	; 0x100
   12808:	add	r1, r8, #1024	; 0x400
   1280c:	add	r4, sp, #320	; 0x140
   12810:	mov	r5, #0
   12814:	str	sl, [sp, #268]	; 0x10c
   12818:	str	r7, [sp, #4]
   1281c:	str	r0, [sp, #260]	; 0x104
   12820:	mov	r0, #0
   12824:	mov	sl, r0
   12828:	ldr	r0, [sp, #268]	; 0x10c
   1282c:	mov	r9, r1
   12830:	mov	r1, r6
   12834:	mov	r2, #256	; 0x100
   12838:	ldr	r3, [r0]
   1283c:	mov	r0, r4
   12840:	bl	18b8 <fread@plt>
   12844:	mov	r7, r0
   12848:	mov	r6, #0
   1284c:	add	r0, r4, r6
   12850:	bl	1c04 <Mat_uint32Swap>
   12854:	str	r0, [r8, r6]
   12858:	add	r6, r6, #4
   1285c:	cmp	r6, #1024	; 0x400
   12860:	bne	1284c <ReadUInt32Data+0x1cf8>
   12864:	ldr	r2, [sp, #260]	; 0x104
   12868:	ldr	r6, [sp, #264]	; 0x108
   1286c:	add	r0, sl, #256	; 0x100
   12870:	add	r5, r7, r5
   12874:	add	r8, r8, #1024	; 0x400
   12878:	add	r1, r9, #1024	; 0x400
   1287c:	cmp	r0, r2
   12880:	blt	12824 <ReadUInt32Data+0x1cd0>
   12884:	ldr	r2, [sp, #4]
   12888:	cmp	r0, r2
   1288c:	bge	136e4 <ReadUInt32Data+0x2b90>
   12890:	mov	r1, r6
   12894:	sub	r6, r2, r0
   12898:	ldr	r0, [sp, #268]	; 0x10c
   1289c:	add	r4, sp, #320	; 0x140
   128a0:	mov	r2, r6
   128a4:	ldr	r3, [r0]
   128a8:	mov	r0, r4
   128ac:	bl	18b8 <fread@plt>
   128b0:	add	r5, r0, r5
   128b4:	cmp	r6, #1
   128b8:	blt	136e0 <ReadUInt32Data+0x2b8c>
   128bc:	ldr	r0, [sp, #260]	; 0x104
   128c0:	sub	r6, r0, sl
   128c4:	mov	r0, r4
   128c8:	bl	1c04 <Mat_uint32Swap>
   128cc:	str	r0, [r9], #4
   128d0:	subs	r6, r6, #1
   128d4:	add	r4, r4, #4
   128d8:	bne	128c4 <ReadUInt32Data+0x1d70>
   128dc:	b	136e0 <ReadUInt32Data+0x2b8c>
   128e0:	sub	r0, r7, #256	; 0x100
   128e4:	add	r1, r8, #1024	; 0x400
   128e8:	add	r4, sp, #320	; 0x140
   128ec:	mov	r5, #0
   128f0:	str	sl, [sp, #268]	; 0x10c
   128f4:	str	r7, [sp, #4]
   128f8:	str	r0, [sp, #260]	; 0x104
   128fc:	mov	r0, #0
   12900:	mov	sl, r0
   12904:	ldr	r0, [sp, #268]	; 0x10c
   12908:	mov	r9, r1
   1290c:	mov	r1, r6
   12910:	mov	r2, #256	; 0x100
   12914:	ldr	r3, [r0]
   12918:	mov	r0, r4
   1291c:	bl	18b8 <fread@plt>
   12920:	mov	r7, r0
   12924:	mov	r6, #0
   12928:	add	r0, r4, r6
   1292c:	bl	1c44 <Mat_floatSwap>
   12930:	vcvt.u32.f32	s0, s0
   12934:	vmov	r0, s0
   12938:	str	r0, [r8, r6]
   1293c:	add	r6, r6, #4
   12940:	cmp	r6, #1024	; 0x400
   12944:	bne	12928 <ReadUInt32Data+0x1dd4>
   12948:	ldr	r2, [sp, #260]	; 0x104
   1294c:	ldr	r6, [sp, #264]	; 0x108
   12950:	add	r0, sl, #256	; 0x100
   12954:	add	r5, r7, r5
   12958:	add	r8, r8, #1024	; 0x400
   1295c:	add	r1, r9, #1024	; 0x400
   12960:	cmp	r0, r2
   12964:	blt	12900 <ReadUInt32Data+0x1dac>
   12968:	ldr	r2, [sp, #4]
   1296c:	cmp	r0, r2
   12970:	bge	136e4 <ReadUInt32Data+0x2b90>
   12974:	mov	r1, r6
   12978:	sub	r6, r2, r0
   1297c:	ldr	r0, [sp, #268]	; 0x10c
   12980:	add	r4, sp, #320	; 0x140
   12984:	mov	r2, r6
   12988:	ldr	r3, [r0]
   1298c:	mov	r0, r4
   12990:	bl	18b8 <fread@plt>
   12994:	add	r5, r0, r5
   12998:	cmp	r6, #1
   1299c:	blt	136e0 <ReadUInt32Data+0x2b8c>
   129a0:	ldr	r0, [sp, #260]	; 0x104
   129a4:	sub	r6, r0, sl
   129a8:	mov	r0, r4
   129ac:	bl	1c44 <Mat_floatSwap>
   129b0:	vcvt.u32.f32	s0, s0
   129b4:	subs	r6, r6, #1
   129b8:	add	r4, r4, #4
   129bc:	vmov	r0, s0
   129c0:	str	r0, [r9], #4
   129c4:	bne	129a8 <ReadUInt32Data+0x1e54>
   129c8:	b	136e0 <ReadUInt32Data+0x2b8c>
   129cc:	sub	r0, r7, #256	; 0x100
   129d0:	add	r1, r8, #1024	; 0x400
   129d4:	mov	r5, #0
   129d8:	str	sl, [sp, #268]	; 0x10c
   129dc:	str	r7, [sp, #4]
   129e0:	str	r0, [sp, #260]	; 0x104
   129e4:	mov	r0, #0
   129e8:	mov	sl, r0
   129ec:	ldr	r0, [sp, #268]	; 0x10c
   129f0:	add	r7, sp, #320	; 0x140
   129f4:	mov	r9, r1
   129f8:	mov	r1, r6
   129fc:	mov	r2, #256	; 0x100
   12a00:	ldr	r3, [r0]
   12a04:	mov	r0, r7
   12a08:	bl	18b8 <fread@plt>
   12a0c:	mov	r4, r0
   12a10:	mov	r6, #0
   12a14:	mov	r0, r7
   12a18:	bl	1c88 <Mat_doubleSwap>
   12a1c:	vcvt.u32.f64	s0, d0
   12a20:	add	r7, r7, #8
   12a24:	vmov	r0, s0
   12a28:	str	r0, [r8, r6, lsl #2]
   12a2c:	add	r6, r6, #1
   12a30:	cmp	r6, #256	; 0x100
   12a34:	bne	12a14 <ReadUInt32Data+0x1ec0>
   12a38:	ldr	r2, [sp, #260]	; 0x104
   12a3c:	ldr	r6, [sp, #264]	; 0x108
   12a40:	add	r0, sl, #256	; 0x100
   12a44:	add	r5, r4, r5
   12a48:	add	r8, r8, #1024	; 0x400
   12a4c:	add	r1, r9, #1024	; 0x400
   12a50:	cmp	r0, r2
   12a54:	blt	129e8 <ReadUInt32Data+0x1e94>
   12a58:	ldr	r2, [sp, #4]
   12a5c:	cmp	r0, r2
   12a60:	bge	136e4 <ReadUInt32Data+0x2b90>
   12a64:	mov	r1, r6
   12a68:	sub	r6, r2, r0
   12a6c:	ldr	r0, [sp, #268]	; 0x10c
   12a70:	add	r4, sp, #320	; 0x140
   12a74:	mov	r2, r6
   12a78:	ldr	r3, [r0]
   12a7c:	mov	r0, r4
   12a80:	bl	18b8 <fread@plt>
   12a84:	add	r5, r0, r5
   12a88:	cmp	r6, #1
   12a8c:	blt	136e0 <ReadUInt32Data+0x2b8c>
   12a90:	ldr	r0, [sp, #260]	; 0x104
   12a94:	sub	r6, r0, sl
   12a98:	mov	r0, r4
   12a9c:	bl	1c88 <Mat_doubleSwap>
   12aa0:	vcvt.u32.f64	s0, d0
   12aa4:	subs	r6, r6, #1
   12aa8:	add	r4, r4, #8
   12aac:	vmov	r0, s0
   12ab0:	str	r0, [r9], #4
   12ab4:	bne	12a98 <ReadUInt32Data+0x1f44>
   12ab8:	b	136e0 <ReadUInt32Data+0x2b8c>
   12abc:	sub	r0, r7, #256	; 0x100
   12ac0:	str	r5, [sp, #252]	; 0xfc
   12ac4:	add	r1, r8, #1024	; 0x400
   12ac8:	mov	r6, r8
   12acc:	mov	r5, #0
   12ad0:	str	r7, [sp, #4]
   12ad4:	str	sl, [sp, #268]	; 0x10c
   12ad8:	str	r0, [sp, #256]	; 0x100
   12adc:	mov	r0, #0
   12ae0:	mov	r9, r1
   12ae4:	ldr	r3, [sl]
   12ae8:	ldr	r1, [sp, #264]	; 0x108
   12aec:	add	r4, sp, #320	; 0x140
   12af0:	str	r0, [sp, #260]	; 0x104
   12af4:	mov	r2, #256	; 0x100
   12af8:	mov	r0, r4
   12afc:	bl	18b8 <fread@plt>
   12b00:	mov	r7, r0
   12b04:	mov	sl, #0
   12b08:	mov	r0, r4
   12b0c:	bl	1b84 <Mat_int64Swap>
   12b10:	str	r0, [r6, sl, lsl #2]
   12b14:	add	sl, sl, #1
   12b18:	add	r4, r4, #8
   12b1c:	cmp	sl, #256	; 0x100
   12b20:	bne	12b08 <ReadUInt32Data+0x1fb4>
   12b24:	ldr	r0, [sp, #260]	; 0x104
   12b28:	ldr	r2, [sp, #256]	; 0x100
   12b2c:	ldr	sl, [sp, #268]	; 0x10c
   12b30:	add	r5, r7, r5
   12b34:	add	r6, r6, #1024	; 0x400
   12b38:	add	r1, r9, #1024	; 0x400
   12b3c:	add	r0, r0, #256	; 0x100
   12b40:	cmp	r0, r2
   12b44:	blt	12ae0 <ReadUInt32Data+0x1f8c>
   12b48:	ldr	r7, [sp, #4]
   12b4c:	cmp	r0, r7
   12b50:	bge	13398 <ReadUInt32Data+0x2844>
   12b54:	ldr	r6, [sp, #264]	; 0x108
   12b58:	ldr	r3, [sl]
   12b5c:	sub	r7, r7, r0
   12b60:	add	r4, sp, #320	; 0x140
   12b64:	mov	r0, r4
   12b68:	mov	r2, r7
   12b6c:	mov	r1, r6
   12b70:	bl	18b8 <fread@plt>
   12b74:	add	r5, r0, r5
   12b78:	cmp	r7, #1
   12b7c:	blt	12ba8 <ReadUInt32Data+0x2054>
   12b80:	ldr	r0, [sp, #256]	; 0x100
   12b84:	ldr	r1, [sp, #260]	; 0x104
   12b88:	sub	r6, r0, r1
   12b8c:	mov	r0, r4
   12b90:	bl	1b84 <Mat_int64Swap>
   12b94:	str	r0, [r9], #4
   12b98:	subs	r6, r6, #1
   12b9c:	add	r4, r4, #8
   12ba0:	bne	12b8c <ReadUInt32Data+0x2038>
   12ba4:	ldr	r6, [sp, #264]	; 0x108
   12ba8:	mov	r0, r5
   12bac:	ldr	r7, [sp, #4]
   12bb0:	ldr	r5, [sp, #252]	; 0xfc
   12bb4:	cmp	r5, #13
   12bb8:	beq	133f8 <ReadUInt32Data+0x28a4>
   12bbc:	b	10f88 <ReadUInt32Data+0x434>
   12bc0:	sub	r1, r7, #256	; 0x100
   12bc4:	str	r7, [sp, #4]
   12bc8:	add	r0, r8, #1024	; 0x400
   12bcc:	mov	r2, #256	; 0x100
   12bd0:	add	r7, sp, #320	; 0x140
   12bd4:	add	r5, sp, #288	; 0x120
   12bd8:	mov	r4, r8
   12bdc:	mov	r9, #0
   12be0:	str	sl, [sp, #268]	; 0x10c
   12be4:	str	r1, [sp, #256]	; 0x100
   12be8:	mov	r1, #0
   12bec:	mov	sl, r0
   12bf0:	ldr	r0, [sp, #268]	; 0x10c
   12bf4:	str	r1, [sp, #260]	; 0x104
   12bf8:	ldr	r1, [sp, #264]	; 0x108
   12bfc:	mov	r6, r2
   12c00:	mov	r2, #256	; 0x100
   12c04:	ldr	r3, [r0]
   12c08:	mov	r0, r7
   12c0c:	bl	18b8 <fread@plt>
   12c10:	mov	r1, r4
   12c14:	mov	r2, #0
   12c18:	ldr	r3, [r7, r2]
   12c1c:	str	r3, [sp, #288]	; 0x120
   12c20:	add	r3, r7, r2
   12c24:	add	r2, r2, #8
   12c28:	ldr	r3, [r3, #4]
   12c2c:	cmp	r2, #512	; 0x200
   12c30:	str	r3, [sp, #292]	; 0x124
   12c34:	vld1.16	{d16}, [r5 :64]
   12c38:	vmovl.s16	q8, d16
   12c3c:	vst1.32	{d16-d17}, [r1]!
   12c40:	bne	12c18 <ReadUInt32Data+0x20c4>
   12c44:	mov	r1, r6
   12c48:	ldr	r3, [sp, #256]	; 0x100
   12c4c:	add	r9, r0, r9
   12c50:	add	r4, r4, #1024	; 0x400
   12c54:	add	r0, sl, #1024	; 0x400
   12c58:	add	r2, r6, #256	; 0x100
   12c5c:	ldr	r1, [sp, #260]	; 0x104
   12c60:	add	r1, r1, #256	; 0x100
   12c64:	cmp	r1, r3
   12c68:	blt	12bec <ReadUInt32Data+0x2098>
   12c6c:	ldr	r0, [sp, #4]
   12c70:	cmp	r1, r0
   12c74:	bge	1337c <ReadUInt32Data+0x2828>
   12c78:	sub	r4, r0, r1
   12c7c:	ldr	r0, [sp, #268]	; 0x10c
   12c80:	ldr	r1, [sp, #264]	; 0x108
   12c84:	add	r7, sp, #320	; 0x140
   12c88:	mov	r2, r4
   12c8c:	ldr	r3, [r0]
   12c90:	mov	r0, r7
   12c94:	bl	18b8 <fread@plt>
   12c98:	mov	r5, r9
   12c9c:	cmp	r4, #1
   12ca0:	add	r5, r0, r9
   12ca4:	blt	136e0 <ReadUInt32Data+0x2b8c>
   12ca8:	cmp	r4, #4
   12cac:	mov	r3, r4
   12cb0:	ldr	lr, [sp, #260]	; 0x104
   12cb4:	ldr	r4, [sp, #264]	; 0x108
   12cb8:	mov	r0, #0
   12cbc:	mov	ip, r6
   12cc0:	bcc	12d10 <ReadUInt32Data+0x21bc>
   12cc4:	ldr	r0, [sp, #256]	; 0x100
   12cc8:	add	r2, sp, #280	; 0x118
   12ccc:	mov	r4, r3
   12cd0:	sub	r0, r0, lr
   12cd4:	bic	r1, r0, #3
   12cd8:	bic	r0, r3, #3
   12cdc:	ldr	r3, [r7]
   12ce0:	ldr	r6, [r7, #4]
   12ce4:	subs	r1, r1, #4
   12ce8:	add	r7, r7, #8
   12cec:	str	r6, [sp, #284]	; 0x11c
   12cf0:	str	r3, [sp, #280]	; 0x118
   12cf4:	vld1.16	{d16}, [r2 :64]
   12cf8:	vmovl.s16	q8, d16
   12cfc:	vst1.32	{d16-d17}, [sl]!
   12d00:	bne	12cdc <ReadUInt32Data+0x2188>
   12d04:	cmp	r4, r0
   12d08:	ldr	r4, [sp, #264]	; 0x108
   12d0c:	beq	12d3c <ReadUInt32Data+0x21e8>
   12d10:	ldr	r3, [sp, #256]	; 0x100
   12d14:	add	r1, sp, #320	; 0x140
   12d18:	add	r2, r0, ip
   12d1c:	add	r1, r1, r0, lsl #1
   12d20:	add	r2, r8, r2, lsl #2
   12d24:	sub	r3, r3, lr
   12d28:	sub	r0, r3, r0
   12d2c:	ldrsh	r3, [r1], #2
   12d30:	subs	r0, r0, #1
   12d34:	str	r3, [r2], #4
   12d38:	bne	12d2c <ReadUInt32Data+0x21d8>
   12d3c:	mov	r6, r4
   12d40:	mul	r0, r5, r6
   12d44:	sub	sp, fp, #28
   12d48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d4c:	sub	r1, r7, #256	; 0x100
   12d50:	str	r7, [sp, #4]
   12d54:	add	r0, r8, #1024	; 0x400
   12d58:	mov	r2, #256	; 0x100
   12d5c:	add	r7, sp, #320	; 0x140
   12d60:	add	r5, sp, #312	; 0x138
   12d64:	mov	r4, r8
   12d68:	mov	r9, #0
   12d6c:	str	sl, [sp, #268]	; 0x10c
   12d70:	str	r1, [sp, #256]	; 0x100
   12d74:	mov	r1, #0
   12d78:	mov	sl, r0
   12d7c:	ldr	r0, [sp, #268]	; 0x10c
   12d80:	str	r1, [sp, #260]	; 0x104
   12d84:	ldr	r1, [sp, #264]	; 0x108
   12d88:	mov	r6, r2
   12d8c:	mov	r2, #256	; 0x100
   12d90:	ldr	r3, [r0]
   12d94:	mov	r0, r7
   12d98:	bl	18b8 <fread@plt>
   12d9c:	mov	r1, r4
   12da0:	mov	r2, #0
   12da4:	ldr	r3, [r7, r2]
   12da8:	str	r3, [sp, #312]	; 0x138
   12dac:	add	r3, r7, r2
   12db0:	add	r2, r2, #8
   12db4:	ldr	r3, [r3, #4]
   12db8:	cmp	r2, #512	; 0x200
   12dbc:	str	r3, [sp, #316]	; 0x13c
   12dc0:	vld1.16	{d16}, [r5 :64]
   12dc4:	vmovl.u16	q8, d16
   12dc8:	vst1.32	{d16-d17}, [r1]!
   12dcc:	bne	12da4 <ReadUInt32Data+0x2250>
   12dd0:	mov	r1, r6
   12dd4:	ldr	r3, [sp, #256]	; 0x100
   12dd8:	add	r9, r0, r9
   12ddc:	add	r4, r4, #1024	; 0x400
   12de0:	add	r0, sl, #1024	; 0x400
   12de4:	add	r2, r6, #256	; 0x100
   12de8:	ldr	r1, [sp, #260]	; 0x104
   12dec:	add	r1, r1, #256	; 0x100
   12df0:	cmp	r1, r3
   12df4:	blt	12d78 <ReadUInt32Data+0x2224>
   12df8:	ldr	r0, [sp, #4]
   12dfc:	cmp	r1, r0
   12e00:	bge	1337c <ReadUInt32Data+0x2828>
   12e04:	sub	r4, r0, r1
   12e08:	ldr	r0, [sp, #268]	; 0x10c
   12e0c:	ldr	r1, [sp, #264]	; 0x108
   12e10:	add	r7, sp, #320	; 0x140
   12e14:	mov	r2, r4
   12e18:	ldr	r3, [r0]
   12e1c:	mov	r0, r7
   12e20:	bl	18b8 <fread@plt>
   12e24:	mov	r5, r9
   12e28:	cmp	r4, #1
   12e2c:	add	r5, r0, r9
   12e30:	blt	136e0 <ReadUInt32Data+0x2b8c>
   12e34:	cmp	r4, #4
   12e38:	mov	r3, r4
   12e3c:	ldr	lr, [sp, #260]	; 0x104
   12e40:	ldr	r4, [sp, #264]	; 0x108
   12e44:	mov	r0, #0
   12e48:	mov	ip, r6
   12e4c:	bcc	12e9c <ReadUInt32Data+0x2348>
   12e50:	ldr	r0, [sp, #256]	; 0x100
   12e54:	add	r2, sp, #304	; 0x130
   12e58:	mov	r4, r3
   12e5c:	sub	r0, r0, lr
   12e60:	bic	r1, r0, #3
   12e64:	bic	r0, r3, #3
   12e68:	ldr	r3, [r7]
   12e6c:	ldr	r6, [r7, #4]
   12e70:	subs	r1, r1, #4
   12e74:	add	r7, r7, #8
   12e78:	str	r6, [sp, #308]	; 0x134
   12e7c:	str	r3, [sp, #304]	; 0x130
   12e80:	vld1.16	{d16}, [r2 :64]
   12e84:	vmovl.u16	q8, d16
   12e88:	vst1.32	{d16-d17}, [sl]!
   12e8c:	bne	12e68 <ReadUInt32Data+0x2314>
   12e90:	cmp	r4, r0
   12e94:	ldr	r4, [sp, #264]	; 0x108
   12e98:	beq	12ec8 <ReadUInt32Data+0x2374>
   12e9c:	ldr	r3, [sp, #256]	; 0x100
   12ea0:	add	r1, sp, #320	; 0x140
   12ea4:	add	r2, r0, ip
   12ea8:	add	r1, r1, r0, lsl #1
   12eac:	add	r2, r8, r2, lsl #2
   12eb0:	sub	r3, r3, lr
   12eb4:	sub	r0, r3, r0
   12eb8:	ldrh	r3, [r1], #2
   12ebc:	subs	r0, r0, #1
   12ec0:	str	r3, [r2], #4
   12ec4:	bne	12eb8 <ReadUInt32Data+0x2364>
   12ec8:	mov	r6, r4
   12ecc:	mul	r0, r5, r6
   12ed0:	sub	sp, fp, #28
   12ed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ed8:	mov	r0, r7
   12edc:	mov	r6, sl
   12ee0:	lsl	r7, r7, #2
   12ee4:	mov	r5, #0
   12ee8:	add	r9, sp, #320	; 0x140
   12eec:	mov	sl, #0
   12ef0:	str	r0, [sp, #4]
   12ef4:	sub	r0, r0, #256	; 0x100
   12ef8:	str	r0, [sp, #260]	; 0x104
   12efc:	ldr	r3, [r6]
   12f00:	ldr	r1, [sp, #264]	; 0x108
   12f04:	mov	r0, r9
   12f08:	mov	r2, #256	; 0x100
   12f0c:	bl	18b8 <fread@plt>
   12f10:	mov	r4, r0
   12f14:	add	r0, r8, r5, lsl #2
   12f18:	mov	r1, r9
   12f1c:	mov	r2, #1024	; 0x400
   12f20:	bl	181c <memcpy@plt>
   12f24:	ldr	r0, [sp, #260]	; 0x104
   12f28:	add	r5, r5, #256	; 0x100
   12f2c:	add	sl, r4, sl
   12f30:	sub	r7, r7, #1024	; 0x400
   12f34:	cmp	r5, r0
   12f38:	blt	12efc <ReadUInt32Data+0x23a8>
   12f3c:	ldr	r0, [sp, #4]
   12f40:	cmp	r5, r0
   12f44:	bge	13384 <ReadUInt32Data+0x2830>
   12f48:	ldr	r3, [r6]
   12f4c:	ldr	r6, [sp, #264]	; 0x108
   12f50:	sub	r4, r0, r5
   12f54:	add	r0, sp, #320	; 0x140
   12f58:	mov	r2, r4
   12f5c:	mov	r1, r6
   12f60:	bl	18b8 <fread@plt>
   12f64:	add	sl, r0, sl
   12f68:	cmp	r4, #1
   12f6c:	blt	12f80 <ReadUInt32Data+0x242c>
   12f70:	add	r0, r8, r5, lsl #2
   12f74:	add	r1, sp, #320	; 0x140
   12f78:	mov	r2, r7
   12f7c:	bl	181c <memcpy@plt>
   12f80:	mov	r5, sl
   12f84:	mul	r0, r5, r6
   12f88:	sub	sp, fp, #28
   12f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f90:	sub	r1, r7, #256	; 0x100
   12f94:	add	r0, r8, #1024	; 0x400
   12f98:	mov	r2, #256	; 0x100
   12f9c:	add	r4, sp, #320	; 0x140
   12fa0:	mov	r6, r8
   12fa4:	mov	r5, #0
   12fa8:	str	sl, [sp, #268]	; 0x10c
   12fac:	str	r7, [sp, #4]
   12fb0:	str	r1, [sp, #260]	; 0x104
   12fb4:	mov	r1, #0
   12fb8:	mov	r9, r0
   12fbc:	ldr	r0, [sp, #268]	; 0x10c
   12fc0:	mov	r7, r1
   12fc4:	ldr	r1, [sp, #264]	; 0x108
   12fc8:	mov	sl, r2
   12fcc:	mov	r2, #256	; 0x100
   12fd0:	ldr	r3, [r0]
   12fd4:	mov	r0, r4
   12fd8:	bl	18b8 <fread@plt>
   12fdc:	mov	r1, #0
   12fe0:	add	r2, r4, r1
   12fe4:	vld1.32	{d16-d17}, [r2]
   12fe8:	add	r2, r6, r1
   12fec:	add	r1, r1, #16
   12ff0:	cmp	r1, #1024	; 0x400
   12ff4:	vcvt.u32.f32	q8, q8
   12ff8:	vst1.32	{d16-d17}, [r2]
   12ffc:	bne	12fe0 <ReadUInt32Data+0x248c>
   13000:	ldr	r3, [sp, #260]	; 0x104
   13004:	add	r1, r7, #256	; 0x100
   13008:	add	r5, r0, r5
   1300c:	add	r6, r6, #1024	; 0x400
   13010:	add	r0, r9, #1024	; 0x400
   13014:	add	r2, sl, #256	; 0x100
   13018:	cmp	r1, r3
   1301c:	blt	12fb8 <ReadUInt32Data+0x2464>
   13020:	ldr	r0, [sp, #4]
   13024:	cmp	r1, r0
   13028:	bge	136e0 <ReadUInt32Data+0x2b8c>
   1302c:	sub	r2, r0, r1
   13030:	ldr	r0, [sp, #268]	; 0x10c
   13034:	ldr	r6, [sp, #264]	; 0x108
   13038:	add	r4, sp, #320	; 0x140
   1303c:	str	r2, [sp, #256]	; 0x100
   13040:	ldr	r3, [r0]
   13044:	mov	r0, r4
   13048:	mov	r1, r6
   1304c:	bl	18b8 <fread@plt>
   13050:	ldr	r2, [sp, #256]	; 0x100
   13054:	add	r5, r0, r5
   13058:	cmp	r2, #1
   1305c:	blt	136e4 <ReadUInt32Data+0x2b90>
   13060:	mov	r0, #0
   13064:	cmp	r2, #4
   13068:	bcc	13098 <ReadUInt32Data+0x2544>
   1306c:	ldr	r0, [sp, #260]	; 0x104
   13070:	sub	r0, r0, r7
   13074:	bic	r1, r0, #3
   13078:	bic	r0, r2, #3
   1307c:	vld1.32	{d16-d17}, [r4]!
   13080:	subs	r1, r1, #4
   13084:	vcvt.u32.f32	q8, q8
   13088:	vst1.32	{d16-d17}, [r9]!
   1308c:	bne	1307c <ReadUInt32Data+0x2528>
   13090:	cmp	r2, r0
   13094:	beq	136e4 <ReadUInt32Data+0x2b90>
   13098:	ldr	r3, [sp, #260]	; 0x104
   1309c:	add	r1, sp, #320	; 0x140
   130a0:	add	r2, r0, sl
   130a4:	add	r1, r1, r0, lsl #2
   130a8:	add	r2, r8, r2, lsl #2
   130ac:	sub	r3, r3, r7
   130b0:	sub	r0, r3, r0
   130b4:	vldr	s0, [r1]
   130b8:	subs	r0, r0, #1
   130bc:	add	r1, r1, #4
   130c0:	vcvt.u32.f32	s0, s0
   130c4:	vmov	r3, s0
   130c8:	str	r3, [r2], #4
   130cc:	bne	130b4 <ReadUInt32Data+0x2560>
   130d0:	b	136e4 <ReadUInt32Data+0x2b90>
   130d4:	sub	r1, r7, #256	; 0x100
   130d8:	str	r7, [sp, #4]
   130dc:	add	r0, r8, #1024	; 0x400
   130e0:	mov	r2, #256	; 0x100
   130e4:	mov	r5, r8
   130e8:	mov	r7, #0
   130ec:	str	sl, [sp, #268]	; 0x10c
   130f0:	str	r1, [sp, #256]	; 0x100
   130f4:	mov	r1, #0
   130f8:	mov	r9, r0
   130fc:	ldr	r0, [sp, #268]	; 0x10c
   13100:	add	r4, sp, #320	; 0x140
   13104:	str	r1, [sp, #260]	; 0x104
   13108:	mov	sl, r2
   1310c:	mov	r1, r6
   13110:	mov	r2, #256	; 0x100
   13114:	ldr	r3, [r0]
   13118:	mov	r0, r4
   1311c:	bl	18b8 <fread@plt>
   13120:	mov	r1, #0
   13124:	vld1.64	{d16-d17}, [r4]!
   13128:	vcvt.u32.f64	s0, d16
   1312c:	vmov	r3, s0
   13130:	vcvt.u32.f64	s0, d17
   13134:	vmov.32	d16[0], r3
   13138:	add	r3, r5, r1
   1313c:	vmov	r6, s0
   13140:	add	r1, r1, #8
   13144:	vmov.32	d16[1], r6
   13148:	cmp	r1, #1024	; 0x400
   1314c:	vstr	d16, [r3]
   13150:	bne	13124 <ReadUInt32Data+0x25d0>
   13154:	add	r7, r0, r7
   13158:	mov	r4, r9
   1315c:	add	r0, r9, #1024	; 0x400
   13160:	ldr	r9, [sp, #260]	; 0x104
   13164:	ldr	r3, [sp, #256]	; 0x100
   13168:	ldr	r6, [sp, #264]	; 0x108
   1316c:	add	r5, r5, #1024	; 0x400
   13170:	add	r2, sl, #256	; 0x100
   13174:	add	r1, r9, #256	; 0x100
   13178:	cmp	r1, r3
   1317c:	blt	130f8 <ReadUInt32Data+0x25a4>
   13180:	ldr	r0, [sp, #4]
   13184:	cmp	r1, r0
   13188:	bge	133c0 <ReadUInt32Data+0x286c>
   1318c:	sub	r5, r0, r1
   13190:	ldr	r0, [sp, #268]	; 0x10c
   13194:	mov	r1, r6
   13198:	mov	r2, r5
   1319c:	ldr	r3, [r0]
   131a0:	add	r0, sp, #320	; 0x140
   131a4:	bl	18b8 <fread@plt>
   131a8:	mov	r3, r5
   131ac:	mov	r5, r7
   131b0:	add	r5, r0, r7
   131b4:	cmp	r3, #1
   131b8:	blt	136e4 <ReadUInt32Data+0x2b90>
   131bc:	mov	r0, #0
   131c0:	beq	13208 <ReadUInt32Data+0x26b4>
   131c4:	ldr	r0, [sp, #256]	; 0x100
   131c8:	add	r7, sp, #320	; 0x140
   131cc:	sub	r0, r0, r9
   131d0:	bic	r1, r0, #1
   131d4:	bic	r0, r3, #1
   131d8:	vld1.64	{d16-d17}, [r7]!
   131dc:	subs	r1, r1, #2
   131e0:	vcvt.u32.f64	s0, d16
   131e4:	vcvt.u32.f64	s2, d17
   131e8:	vmov	r2, s0
   131ec:	vmov.32	d16[0], r2
   131f0:	vmov	r2, s2
   131f4:	vmov.32	d16[1], r2
   131f8:	vst1.32	{d16}, [r4]!
   131fc:	bne	131d8 <ReadUInt32Data+0x2684>
   13200:	cmp	r3, r0
   13204:	beq	136e4 <ReadUInt32Data+0x2b90>
   13208:	ldr	r3, [sp, #256]	; 0x100
   1320c:	add	r1, sp, #320	; 0x140
   13210:	add	r2, r0, sl
   13214:	add	r1, r1, r0, lsl #3
   13218:	add	r2, r8, r2, lsl #2
   1321c:	sub	r3, r3, r9
   13220:	sub	r0, r3, r0
   13224:	vldr	d16, [r1]
   13228:	subs	r0, r0, #1
   1322c:	add	r1, r1, #8
   13230:	vcvt.u32.f64	s0, d16
   13234:	vmov	r3, s0
   13238:	str	r3, [r2], #4
   1323c:	bne	13224 <ReadUInt32Data+0x26d0>
   13240:	b	136e4 <ReadUInt32Data+0x2b90>
   13244:	sub	r1, r7, #256	; 0x100
   13248:	str	r5, [sp, #252]	; 0xfc
   1324c:	str	r7, [sp, #4]
   13250:	add	r0, r8, #1024	; 0x400
   13254:	mov	r2, #256	; 0x100
   13258:	mov	r5, r8
   1325c:	mov	r7, #0
   13260:	str	sl, [sp, #268]	; 0x10c
   13264:	str	r1, [sp, #260]	; 0x104
   13268:	mov	r1, #0
   1326c:	mov	r4, r0
   13270:	ldr	r0, [sp, #268]	; 0x10c
   13274:	mov	r9, r1
   13278:	ldr	r1, [sp, #264]	; 0x108
   1327c:	add	sl, sp, #320	; 0x140
   13280:	mov	r6, r2
   13284:	mov	r2, #256	; 0x100
   13288:	ldr	r3, [r0]
   1328c:	mov	r0, sl
   13290:	bl	18b8 <fread@plt>
   13294:	mov	r1, #0
   13298:	vld1.64	{d16-d17}, [sl]!
   1329c:	add	r3, r5, r1
   132a0:	add	r1, r1, #8
   132a4:	cmp	r1, #1024	; 0x400
   132a8:	vmovn.i64	d16, q8
   132ac:	vstr	d16, [r3]
   132b0:	bne	13298 <ReadUInt32Data+0x2744>
   132b4:	ldr	r3, [sp, #260]	; 0x104
   132b8:	add	r1, r9, #256	; 0x100
   132bc:	add	r7, r0, r7
   132c0:	add	r5, r5, #1024	; 0x400
   132c4:	add	r0, r4, #1024	; 0x400
   132c8:	add	r2, r6, #256	; 0x100
   132cc:	cmp	r1, r3
   132d0:	blt	1326c <ReadUInt32Data+0x2718>
   132d4:	ldr	r2, [sp, #4]
   132d8:	cmp	r1, r2
   132dc:	bge	133d0 <ReadUInt32Data+0x287c>
   132e0:	ldr	r0, [sp, #268]	; 0x10c
   132e4:	sub	sl, r2, r1
   132e8:	ldr	r1, [sp, #264]	; 0x108
   132ec:	mov	r2, sl
   132f0:	ldr	r3, [r0]
   132f4:	add	r0, sp, #320	; 0x140
   132f8:	bl	18b8 <fread@plt>
   132fc:	mov	r2, r7
   13300:	cmp	sl, #1
   13304:	add	r2, r0, r7
   13308:	blt	133dc <ReadUInt32Data+0x2888>
   1330c:	ldr	r7, [sp, #4]
   13310:	mov	r5, #0
   13314:	beq	13348 <ReadUInt32Data+0x27f4>
   13318:	ldr	r0, [sp, #260]	; 0x104
   1331c:	bic	r5, sl, #1
   13320:	sub	r0, r0, r9
   13324:	bic	r1, r0, #1
   13328:	add	r0, sp, #320	; 0x140
   1332c:	vld1.64	{d16-d17}, [r0]!
   13330:	subs	r1, r1, #2
   13334:	vmovn.i64	d16, q8
   13338:	vst1.32	{d16}, [r4]!
   1333c:	bne	1332c <ReadUInt32Data+0x27d8>
   13340:	cmp	sl, r5
   13344:	beq	133e0 <ReadUInt32Data+0x288c>
   13348:	ldr	r3, [sp, #260]	; 0x104
   1334c:	add	r1, sp, #320	; 0x140
   13350:	mov	r0, r2
   13354:	add	r2, r5, r6
   13358:	add	r1, r1, r5, lsl #3
   1335c:	add	r2, r8, r2, lsl #2
   13360:	sub	r3, r3, r9
   13364:	sub	r5, r3, r5
   13368:	ldr	r3, [r1], #8
   1336c:	subs	r5, r5, #1
   13370:	str	r3, [r2], #4
   13374:	bne	13368 <ReadUInt32Data+0x2814>
   13378:	b	133e4 <ReadUInt32Data+0x2890>
   1337c:	mov	r5, r9
   13380:	b	136e0 <ReadUInt32Data+0x2b8c>
   13384:	ldr	r6, [sp, #264]	; 0x108
   13388:	mov	r5, sl
   1338c:	mul	r0, r5, r6
   13390:	sub	sp, fp, #28
   13394:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13398:	mov	r0, r5
   1339c:	ldr	r6, [sp, #264]	; 0x108
   133a0:	ldr	r5, [sp, #252]	; 0xfc
   133a4:	cmp	r5, #13
   133a8:	beq	133f8 <ReadUInt32Data+0x28a4>
   133ac:	b	10f88 <ReadUInt32Data+0x434>
   133b0:	mov	r0, r9
   133b4:	cmp	r5, #13
   133b8:	beq	133f8 <ReadUInt32Data+0x28a4>
   133bc:	b	10f88 <ReadUInt32Data+0x434>
   133c0:	mov	r5, r7
   133c4:	mul	r0, r5, r6
   133c8:	sub	sp, fp, #28
   133cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133d0:	mov	r0, r7
   133d4:	mov	r7, r2
   133d8:	b	133e4 <ReadUInt32Data+0x2890>
   133dc:	ldr	r7, [sp, #4]
   133e0:	mov	r0, r2
   133e4:	ldr	sl, [sp, #268]	; 0x10c
   133e8:	ldr	r5, [sp, #252]	; 0xfc
   133ec:	ldr	r6, [sp, #264]	; 0x108
   133f0:	cmp	r5, #13
   133f4:	bne	10f88 <ReadUInt32Data+0x434>
   133f8:	ldr	r1, [sl, #20]
   133fc:	mov	r5, r0
   13400:	cmp	r1, #0
   13404:	beq	13450 <ReadUInt32Data+0x28fc>
   13408:	cmp	r7, #256	; 0x100
   1340c:	bgt	134d0 <ReadUInt32Data+0x297c>
   13410:	ldr	r3, [sl]
   13414:	add	r4, sp, #320	; 0x140
   13418:	mov	r1, r6
   1341c:	mov	r2, r7
   13420:	mov	r0, r4
   13424:	bl	18b8 <fread@plt>
   13428:	add	r5, r0, r5
   1342c:	cmp	r7, #1
   13430:	blt	136e4 <ReadUInt32Data+0x2b90>
   13434:	mov	r0, r4
   13438:	bl	1bd4 <Mat_uint64Swap>
   1343c:	str	r0, [r8], #4
   13440:	subs	r7, r7, #1
   13444:	add	r4, r4, #8
   13448:	bne	13434 <ReadUInt32Data+0x28e0>
   1344c:	b	136e4 <ReadUInt32Data+0x2b90>
   13450:	cmp	r7, #256	; 0x100
   13454:	bgt	135ac <ReadUInt32Data+0x2a58>
   13458:	ldr	r3, [sl]
   1345c:	add	r4, sp, #320	; 0x140
   13460:	mov	r1, r6
   13464:	mov	r2, r7
   13468:	mov	r0, r4
   1346c:	bl	18b8 <fread@plt>
   13470:	add	r5, r0, r5
   13474:	cmp	r7, #1
   13478:	blt	136e4 <ReadUInt32Data+0x2b90>
   1347c:	mov	r0, #0
   13480:	beq	134ac <ReadUInt32Data+0x2958>
   13484:	bic	r0, r7, #1
   13488:	mov	r2, r8
   1348c:	mov	r1, r0
   13490:	vld1.64	{d16-d17}, [r4]!
   13494:	subs	r1, r1, #2
   13498:	vmovn.i64	d16, q8
   1349c:	vst1.32	{d16}, [r2]!
   134a0:	bne	13490 <ReadUInt32Data+0x293c>
   134a4:	cmp	r0, r7
   134a8:	beq	136e4 <ReadUInt32Data+0x2b90>
   134ac:	add	r3, sp, #320	; 0x140
   134b0:	sub	r1, r7, r0
   134b4:	add	r2, r8, r0, lsl #2
   134b8:	add	r0, r3, r0, lsl #3
   134bc:	ldr	r3, [r0], #8
   134c0:	subs	r1, r1, #1
   134c4:	str	r3, [r2], #4
   134c8:	bne	134bc <ReadUInt32Data+0x2968>
   134cc:	b	136e4 <ReadUInt32Data+0x2b90>
   134d0:	sub	r0, r7, #256	; 0x100
   134d4:	add	r1, r8, #1024	; 0x400
   134d8:	str	sl, [sp, #268]	; 0x10c
   134dc:	str	r7, [sp, #4]
   134e0:	str	r0, [sp, #260]	; 0x104
   134e4:	mov	r0, #0
   134e8:	mov	sl, r0
   134ec:	ldr	r0, [sp, #268]	; 0x10c
   134f0:	add	r4, sp, #320	; 0x140
   134f4:	mov	r9, r1
   134f8:	mov	r1, r6
   134fc:	mov	r2, #256	; 0x100
   13500:	ldr	r3, [r0]
   13504:	mov	r0, r4
   13508:	bl	18b8 <fread@plt>
   1350c:	mov	r7, r0
   13510:	mov	r6, #0
   13514:	mov	r0, r4
   13518:	bl	1bd4 <Mat_uint64Swap>
   1351c:	str	r0, [r8, r6, lsl #2]
   13520:	add	r6, r6, #1
   13524:	add	r4, r4, #8
   13528:	cmp	r6, #256	; 0x100
   1352c:	bne	13514 <ReadUInt32Data+0x29c0>
   13530:	ldr	r2, [sp, #260]	; 0x104
   13534:	ldr	r6, [sp, #264]	; 0x108
   13538:	add	r0, sl, #256	; 0x100
   1353c:	add	r5, r7, r5
   13540:	add	r8, r8, #1024	; 0x400
   13544:	add	r1, r9, #1024	; 0x400
   13548:	cmp	r0, r2
   1354c:	blt	134e8 <ReadUInt32Data+0x2994>
   13550:	ldr	r2, [sp, #4]
   13554:	cmp	r0, r2
   13558:	bge	136e4 <ReadUInt32Data+0x2b90>
   1355c:	mov	r1, r6
   13560:	sub	r6, r2, r0
   13564:	ldr	r0, [sp, #268]	; 0x10c
   13568:	add	r4, sp, #320	; 0x140
   1356c:	mov	r2, r6
   13570:	ldr	r3, [r0]
   13574:	mov	r0, r4
   13578:	bl	18b8 <fread@plt>
   1357c:	add	r5, r0, r5
   13580:	cmp	r6, #1
   13584:	blt	136e0 <ReadUInt32Data+0x2b8c>
   13588:	ldr	r0, [sp, #260]	; 0x104
   1358c:	sub	r6, r0, sl
   13590:	mov	r0, r4
   13594:	bl	1bd4 <Mat_uint64Swap>
   13598:	str	r0, [r9], #4
   1359c:	subs	r6, r6, #1
   135a0:	add	r4, r4, #8
   135a4:	bne	13590 <ReadUInt32Data+0x2a3c>
   135a8:	b	136e0 <ReadUInt32Data+0x2b8c>
   135ac:	mov	r1, r7
   135b0:	mov	r7, r5
   135b4:	add	r0, r8, #1024	; 0x400
   135b8:	mov	r2, #256	; 0x100
   135bc:	mov	r5, r8
   135c0:	str	sl, [sp, #268]	; 0x10c
   135c4:	str	r1, [sp, #4]
   135c8:	sub	r1, r1, #256	; 0x100
   135cc:	str	r1, [sp, #260]	; 0x104
   135d0:	mov	r1, #0
   135d4:	mov	sl, r0
   135d8:	ldr	r0, [sp, #268]	; 0x10c
   135dc:	mov	r9, r1
   135e0:	ldr	r1, [sp, #264]	; 0x108
   135e4:	add	r4, sp, #320	; 0x140
   135e8:	mov	r6, r2
   135ec:	mov	r2, #256	; 0x100
   135f0:	ldr	r3, [r0]
   135f4:	mov	r0, r4
   135f8:	bl	18b8 <fread@plt>
   135fc:	mov	r1, #0
   13600:	vld1.64	{d16-d17}, [r4]!
   13604:	add	r3, r5, r1
   13608:	add	r1, r1, #8
   1360c:	cmp	r1, #1024	; 0x400
   13610:	vmovn.i64	d16, q8
   13614:	vstr	d16, [r3]
   13618:	bne	13600 <ReadUInt32Data+0x2aac>
   1361c:	ldr	r3, [sp, #260]	; 0x104
   13620:	add	r1, r9, #256	; 0x100
   13624:	add	r7, r0, r7
   13628:	add	r5, r5, #1024	; 0x400
   1362c:	add	r0, sl, #1024	; 0x400
   13630:	add	r2, r6, #256	; 0x100
   13634:	cmp	r1, r3
   13638:	blt	135d4 <ReadUInt32Data+0x2a80>
   1363c:	ldr	r0, [sp, #4]
   13640:	cmp	r1, r0
   13644:	bge	136dc <ReadUInt32Data+0x2b88>
   13648:	sub	r4, r0, r1
   1364c:	ldr	r0, [sp, #268]	; 0x10c
   13650:	ldr	r1, [sp, #264]	; 0x108
   13654:	mov	r2, r4
   13658:	ldr	r3, [r0]
   1365c:	add	r0, sp, #320	; 0x140
   13660:	bl	18b8 <fread@plt>
   13664:	mov	r5, r7
   13668:	cmp	r4, #1
   1366c:	add	r5, r0, r7
   13670:	blt	136e0 <ReadUInt32Data+0x2b8c>
   13674:	mov	r0, #0
   13678:	beq	136ac <ReadUInt32Data+0x2b58>
   1367c:	ldr	r0, [sp, #260]	; 0x104
   13680:	add	r2, sp, #320	; 0x140
   13684:	sub	r0, r0, r9
   13688:	bic	r1, r0, #1
   1368c:	bic	r0, r4, #1
   13690:	vld1.64	{d16-d17}, [r2]!
   13694:	subs	r1, r1, #2
   13698:	vmovn.i64	d16, q8
   1369c:	vst1.32	{d16}, [sl]!
   136a0:	bne	13690 <ReadUInt32Data+0x2b3c>
   136a4:	cmp	r4, r0
   136a8:	beq	136e0 <ReadUInt32Data+0x2b8c>
   136ac:	ldr	r3, [sp, #260]	; 0x104
   136b0:	add	r1, sp, #320	; 0x140
   136b4:	add	r2, r0, r6
   136b8:	add	r1, r1, r0, lsl #3
   136bc:	add	r2, r8, r2, lsl #2
   136c0:	sub	r3, r3, r9
   136c4:	sub	r0, r3, r0
   136c8:	ldr	r3, [r1], #8
   136cc:	subs	r0, r0, #1
   136d0:	str	r3, [r2], #4
   136d4:	bne	136c8 <ReadUInt32Data+0x2b74>
   136d8:	b	136e0 <ReadUInt32Data+0x2b8c>
   136dc:	mov	r5, r7
   136e0:	ldr	r6, [sp, #264]	; 0x108
   136e4:	mul	r0, r5, r6
   136e8:	sub	sp, fp, #28
   136ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000136f0 <ReadCompressedUInt32Data>:
   136f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136f4:	add	fp, sp, #28
   136f8:	sub	sp, sp, #12
   136fc:	mov	r7, r0
   13700:	mov	r0, #0
   13704:	cmp	r1, #0
   13708:	beq	1371c <ReadCompressedUInt32Data+0x2c>
   1370c:	cmp	r7, #0
   13710:	movne	r5, r2
   13714:	cmpne	r2, #0
   13718:	bne	13724 <ReadCompressedUInt32Data+0x34>
   1371c:	sub	sp, fp, #28
   13720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13724:	ldr	sl, [fp, #8]
   13728:	mov	r0, r3
   1372c:	mov	r4, r3
   13730:	mov	r6, r1
   13734:	bl	1924 <Mat_SizeOf@plt>
   13738:	mov	r9, r0
   1373c:	sub	r0, r4, #1
   13740:	cmp	r0, #12
   13744:	bhi	13c14 <ReadCompressedUInt32Data+0x524>
   13748:	add	r1, pc, #4
   1374c:	ldr	r0, [r1, r0, lsl #2]
   13750:	add	pc, r1, r0
   13754:	.word	0x00000034
   13758:	.word	0x0000006c
   1375c:	.word	0x000000a4
   13760:	.word	0x000000ec
   13764:	.word	0x00000134
   13768:	.word	0x0000017c
   1376c:	.word	0x000001c4
   13770:	.word	0x000004c0
   13774:	.word	0x00000214
   13778:	.word	0x000004c0
   1377c:	.word	0x000004c0
   13780:	.word	0x00000264
   13784:	.word	0x000002ac
   13788:	cmp	sl, #1
   1378c:	blt	13c14 <ReadCompressedUInt32Data+0x524>
   13790:	mov	r8, sp
   13794:	mov	r4, sl
   13798:	mov	r0, r7
   1379c:	mov	r1, r6
   137a0:	mov	r2, r8
   137a4:	mov	r3, r9
   137a8:	bl	32fc <InflateData>
   137ac:	ldrsb	r0, [sp]
   137b0:	subs	r4, r4, #1
   137b4:	str	r0, [r5], #4
   137b8:	bne	13798 <ReadCompressedUInt32Data+0xa8>
   137bc:	b	13c14 <ReadCompressedUInt32Data+0x524>
   137c0:	cmp	sl, #1
   137c4:	blt	13c14 <ReadCompressedUInt32Data+0x524>
   137c8:	mov	r8, sp
   137cc:	mov	r4, sl
   137d0:	mov	r0, r7
   137d4:	mov	r1, r6
   137d8:	mov	r2, r8
   137dc:	mov	r3, r9
   137e0:	bl	32fc <InflateData>
   137e4:	ldrb	r0, [sp]
   137e8:	subs	r4, r4, #1
   137ec:	str	r0, [r5], #4
   137f0:	bne	137d0 <ReadCompressedUInt32Data+0xe0>
   137f4:	b	13c14 <ReadCompressedUInt32Data+0x524>
   137f8:	ldr	r0, [r7, #20]
   137fc:	cmp	r0, #0
   13800:	beq	13a48 <ReadCompressedUInt32Data+0x358>
   13804:	cmp	sl, #1
   13808:	blt	13c14 <ReadCompressedUInt32Data+0x524>
   1380c:	mov	r8, sp
   13810:	mov	r4, sl
   13814:	mov	r0, r7
   13818:	mov	r1, r6
   1381c:	mov	r2, r8
   13820:	mov	r3, r9
   13824:	bl	32fc <InflateData>
   13828:	mov	r0, r8
   1382c:	bl	1c18 <Mat_int16Swap>
   13830:	str	r0, [r5], #4
   13834:	subs	r4, r4, #1
   13838:	bne	13814 <ReadCompressedUInt32Data+0x124>
   1383c:	b	13c14 <ReadCompressedUInt32Data+0x524>
   13840:	ldr	r0, [r7, #20]
   13844:	cmp	r0, #0
   13848:	beq	13a80 <ReadCompressedUInt32Data+0x390>
   1384c:	cmp	sl, #1
   13850:	blt	13c14 <ReadCompressedUInt32Data+0x524>
   13854:	mov	r8, sp
   13858:	mov	r4, sl
   1385c:	mov	r0, r7
   13860:	mov	r1, r6
   13864:	mov	r2, r8
   13868:	mov	r3, r9
   1386c:	bl	32fc <InflateData>
   13870:	mov	r0, r8
   13874:	bl	1c2c <Mat_uint16Swap>
   13878:	str	r0, [r5], #4
   1387c:	subs	r4, r4, #1
   13880:	bne	1385c <ReadCompressedUInt32Data+0x16c>
   13884:	b	13c14 <ReadCompressedUInt32Data+0x524>
   13888:	ldr	r0, [r7, #20]
   1388c:	cmp	r0, #0
   13890:	beq	13ab8 <ReadCompressedUInt32Data+0x3c8>
   13894:	cmp	sl, #1
   13898:	blt	13c14 <ReadCompressedUInt32Data+0x524>
   1389c:	mov	r8, sp
   138a0:	mov	r4, sl
   138a4:	mov	r0, r7
   138a8:	mov	r1, r6
   138ac:	mov	r2, r8
   138b0:	mov	r3, r9
   138b4:	bl	32fc <InflateData>
   138b8:	mov	r0, r8
   138bc:	bl	1bf0 <Mat_int32Swap>
   138c0:	str	r0, [r5], #4
   138c4:	subs	r4, r4, #1
   138c8:	bne	138a4 <ReadCompressedUInt32Data+0x1b4>
   138cc:	b	13c14 <ReadCompressedUInt32Data+0x524>
   138d0:	ldr	r0, [r7, #20]
   138d4:	cmp	r0, #0
   138d8:	beq	13af0 <ReadCompressedUInt32Data+0x400>
   138dc:	cmp	sl, #1
   138e0:	blt	13c14 <ReadCompressedUInt32Data+0x524>
   138e4:	mov	r8, sp
   138e8:	mov	r4, sl
   138ec:	mov	r0, r7
   138f0:	mov	r1, r6
   138f4:	mov	r2, r8
   138f8:	mov	r3, r9
   138fc:	bl	32fc <InflateData>
   13900:	mov	r0, r8
   13904:	bl	1c04 <Mat_uint32Swap>
   13908:	str	r0, [r5], #4
   1390c:	subs	r4, r4, #1
   13910:	bne	138ec <ReadCompressedUInt32Data+0x1fc>
   13914:	b	13c14 <ReadCompressedUInt32Data+0x524>
   13918:	ldr	r0, [r7, #20]
   1391c:	cmp	r0, #0
   13920:	beq	13b28 <ReadCompressedUInt32Data+0x438>
   13924:	cmp	sl, #1
   13928:	blt	13c14 <ReadCompressedUInt32Data+0x524>
   1392c:	mov	r8, sp
   13930:	mov	r4, sl
   13934:	mov	r0, r7
   13938:	mov	r1, r6
   1393c:	mov	r2, r8
   13940:	mov	r3, r9
   13944:	bl	32fc <InflateData>
   13948:	mov	r0, r8
   1394c:	bl	1c44 <Mat_floatSwap>
   13950:	vcvt.u32.f32	s0, s0
   13954:	subs	r4, r4, #1
   13958:	vmov	r0, s0
   1395c:	str	r0, [r5], #4
   13960:	bne	13934 <ReadCompressedUInt32Data+0x244>
   13964:	b	13c14 <ReadCompressedUInt32Data+0x524>
   13968:	ldr	r0, [r7, #20]
   1396c:	cmp	r0, #0
   13970:	beq	13b68 <ReadCompressedUInt32Data+0x478>
   13974:	cmp	sl, #1
   13978:	blt	13c14 <ReadCompressedUInt32Data+0x524>
   1397c:	mov	r8, sp
   13980:	mov	r4, sl
   13984:	mov	r0, r7
   13988:	mov	r1, r6
   1398c:	mov	r2, r8
   13990:	mov	r3, r9
   13994:	bl	32fc <InflateData>
   13998:	mov	r0, r8
   1399c:	bl	1c88 <Mat_doubleSwap>
   139a0:	vcvt.u32.f64	s0, d0
   139a4:	subs	r4, r4, #1
   139a8:	vmov	r0, s0
   139ac:	str	r0, [r5], #4
   139b0:	bne	13984 <ReadCompressedUInt32Data+0x294>
   139b4:	b	13c14 <ReadCompressedUInt32Data+0x524>
   139b8:	ldr	r0, [r7, #20]
   139bc:	cmp	r0, #0
   139c0:	beq	13ba8 <ReadCompressedUInt32Data+0x4b8>
   139c4:	cmp	sl, #1
   139c8:	blt	13c14 <ReadCompressedUInt32Data+0x524>
   139cc:	mov	r8, sp
   139d0:	mov	r4, sl
   139d4:	mov	r0, r7
   139d8:	mov	r1, r6
   139dc:	mov	r2, r8
   139e0:	mov	r3, r9
   139e4:	bl	32fc <InflateData>
   139e8:	mov	r0, r8
   139ec:	bl	1b84 <Mat_int64Swap>
   139f0:	str	r0, [r5], #4
   139f4:	subs	r4, r4, #1
   139f8:	bne	139d4 <ReadCompressedUInt32Data+0x2e4>
   139fc:	b	13c14 <ReadCompressedUInt32Data+0x524>
   13a00:	ldr	r0, [r7, #20]
   13a04:	cmp	r0, #0
   13a08:	beq	13be0 <ReadCompressedUInt32Data+0x4f0>
   13a0c:	cmp	sl, #1
   13a10:	blt	13c14 <ReadCompressedUInt32Data+0x524>
   13a14:	mov	r8, sp
   13a18:	mov	r4, sl
   13a1c:	mov	r0, r7
   13a20:	mov	r1, r6
   13a24:	mov	r2, r8
   13a28:	mov	r3, r9
   13a2c:	bl	32fc <InflateData>
   13a30:	mov	r0, r8
   13a34:	bl	1bd4 <Mat_uint64Swap>
   13a38:	str	r0, [r5], #4
   13a3c:	subs	r4, r4, #1
   13a40:	bne	13a1c <ReadCompressedUInt32Data+0x32c>
   13a44:	b	13c14 <ReadCompressedUInt32Data+0x524>
   13a48:	cmp	sl, #1
   13a4c:	blt	13c14 <ReadCompressedUInt32Data+0x524>
   13a50:	mov	r8, sp
   13a54:	mov	r4, sl
   13a58:	mov	r0, r7
   13a5c:	mov	r1, r6
   13a60:	mov	r2, r8
   13a64:	mov	r3, r9
   13a68:	bl	32fc <InflateData>
   13a6c:	ldrsh	r0, [sp]
   13a70:	subs	r4, r4, #1
   13a74:	str	r0, [r5], #4
   13a78:	bne	13a58 <ReadCompressedUInt32Data+0x368>
   13a7c:	b	13c14 <ReadCompressedUInt32Data+0x524>
   13a80:	cmp	sl, #1
   13a84:	blt	13c14 <ReadCompressedUInt32Data+0x524>
   13a88:	mov	r8, sp
   13a8c:	mov	r4, sl
   13a90:	mov	r0, r7
   13a94:	mov	r1, r6
   13a98:	mov	r2, r8
   13a9c:	mov	r3, r9
   13aa0:	bl	32fc <InflateData>
   13aa4:	ldrh	r0, [sp]
   13aa8:	subs	r4, r4, #1
   13aac:	str	r0, [r5], #4
   13ab0:	bne	13a90 <ReadCompressedUInt32Data+0x3a0>
   13ab4:	b	13c14 <ReadCompressedUInt32Data+0x524>
   13ab8:	cmp	sl, #1
   13abc:	blt	13c14 <ReadCompressedUInt32Data+0x524>
   13ac0:	mov	r8, sp
   13ac4:	mov	r4, sl
   13ac8:	mov	r0, r7
   13acc:	mov	r1, r6
   13ad0:	mov	r2, r8
   13ad4:	mov	r3, r9
   13ad8:	bl	32fc <InflateData>
   13adc:	ldr	r0, [sp]
   13ae0:	subs	r4, r4, #1
   13ae4:	str	r0, [r5], #4
   13ae8:	bne	13ac8 <ReadCompressedUInt32Data+0x3d8>
   13aec:	b	13c14 <ReadCompressedUInt32Data+0x524>
   13af0:	cmp	sl, #1
   13af4:	blt	13c14 <ReadCompressedUInt32Data+0x524>
   13af8:	mov	r8, sp
   13afc:	mov	r4, sl
   13b00:	mov	r0, r7
   13b04:	mov	r1, r6
   13b08:	mov	r2, r8
   13b0c:	mov	r3, r9
   13b10:	bl	32fc <InflateData>
   13b14:	ldr	r0, [sp]
   13b18:	subs	r4, r4, #1
   13b1c:	str	r0, [r5], #4
   13b20:	bne	13b00 <ReadCompressedUInt32Data+0x410>
   13b24:	b	13c14 <ReadCompressedUInt32Data+0x524>
   13b28:	cmp	sl, #1
   13b2c:	blt	13c14 <ReadCompressedUInt32Data+0x524>
   13b30:	mov	r8, sp
   13b34:	mov	r4, sl
   13b38:	mov	r0, r7
   13b3c:	mov	r1, r6
   13b40:	mov	r2, r8
   13b44:	mov	r3, r9
   13b48:	bl	32fc <InflateData>
   13b4c:	vldr	s0, [sp]
   13b50:	subs	r4, r4, #1
   13b54:	vcvt.u32.f32	s0, s0
   13b58:	vmov	r0, s0
   13b5c:	str	r0, [r5], #4
   13b60:	bne	13b38 <ReadCompressedUInt32Data+0x448>
   13b64:	b	13c14 <ReadCompressedUInt32Data+0x524>
   13b68:	cmp	sl, #1
   13b6c:	blt	13c14 <ReadCompressedUInt32Data+0x524>
   13b70:	mov	r8, sp
   13b74:	mov	r4, sl
   13b78:	mov	r0, r7
   13b7c:	mov	r1, r6
   13b80:	mov	r2, r8
   13b84:	mov	r3, r9
   13b88:	bl	32fc <InflateData>
   13b8c:	vldr	d16, [sp]
   13b90:	subs	r4, r4, #1
   13b94:	vcvt.u32.f64	s0, d16
   13b98:	vmov	r0, s0
   13b9c:	str	r0, [r5], #4
   13ba0:	bne	13b78 <ReadCompressedUInt32Data+0x488>
   13ba4:	b	13c14 <ReadCompressedUInt32Data+0x524>
   13ba8:	cmp	sl, #1
   13bac:	blt	13c14 <ReadCompressedUInt32Data+0x524>
   13bb0:	mov	r8, sp
   13bb4:	mov	r4, sl
   13bb8:	mov	r0, r7
   13bbc:	mov	r1, r6
   13bc0:	mov	r2, r8
   13bc4:	mov	r3, r9
   13bc8:	bl	32fc <InflateData>
   13bcc:	ldr	r0, [sp]
   13bd0:	subs	r4, r4, #1
   13bd4:	str	r0, [r5], #4
   13bd8:	bne	13bb8 <ReadCompressedUInt32Data+0x4c8>
   13bdc:	b	13c14 <ReadCompressedUInt32Data+0x524>
   13be0:	cmp	sl, #1
   13be4:	blt	13c14 <ReadCompressedUInt32Data+0x524>
   13be8:	mov	r8, sp
   13bec:	mov	r4, sl
   13bf0:	mov	r0, r7
   13bf4:	mov	r1, r6
   13bf8:	mov	r2, r8
   13bfc:	mov	r3, r9
   13c00:	bl	32fc <InflateData>
   13c04:	ldr	r0, [sp]
   13c08:	subs	r4, r4, #1
   13c0c:	str	r0, [r5], #4
   13c10:	bne	13bf0 <ReadCompressedUInt32Data+0x500>
   13c14:	mul	r0, r9, sl
   13c18:	sub	sp, fp, #28
   13c1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013c20 <ReadInt16Data>:
   13c20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c24:	add	fp, sp, #28
   13c28:	sub	sp, sp, #148	; 0x94
   13c2c:	sub	sp, sp, #2048	; 0x800
   13c30:	mov	r7, r3
   13c34:	mov	r3, r0
   13c38:	mov	r0, #0
   13c3c:	cmp	r3, #0
   13c40:	cmpne	r1, #0
   13c44:	bne	13c50 <ReadInt16Data+0x30>
   13c48:	sub	sp, fp, #28
   13c4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c50:	mov	sl, r2
   13c54:	ldr	r2, [r3]
   13c58:	cmp	r2, #0
   13c5c:	beq	13c48 <ReadInt16Data+0x28>
   13c60:	mov	r0, sl
   13c64:	str	r3, [sp, #140]	; 0x8c
   13c68:	str	r1, [sp, #132]	; 0x84
   13c6c:	bl	1924 <Mat_SizeOf@plt>
   13c70:	mov	r9, r0
   13c74:	sub	r0, sl, #1
   13c78:	mov	r5, #0
   13c7c:	cmp	r0, #11
   13c80:	bhi	14cc8 <ReadInt16Data+0x10a8>
   13c84:	add	r1, pc, #8
   13c88:	ldr	r6, [sp, #132]	; 0x84
   13c8c:	ldr	r0, [r1, r0, lsl #2]
   13c90:	add	pc, r1, r0
   13c94:	.word	0x00000030
   13c98:	.word	0x000000c0
   13c9c:	.word	0x00000150
   13ca0:	.word	0x000001b0
   13ca4:	.word	0x00000210
   13ca8:	.word	0x00000270
   13cac:	.word	0x000002d0
   13cb0:	.word	0x00001ea4
   13cb4:	.word	0x00000338
   13cb8:	.word	0x00001ea4
   13cbc:	.word	0x00001ea4
   13cc0:	.word	0x000003a0
   13cc4:	cmp	r7, #256	; 0x100
   13cc8:	bgt	140b8 <ReadInt16Data+0x498>
   13ccc:	ldr	r0, [sp, #140]	; 0x8c
   13cd0:	add	r4, sp, #144	; 0x90
   13cd4:	mov	r1, r9
   13cd8:	mov	r2, r7
   13cdc:	ldr	r3, [r0]
   13ce0:	mov	r0, r4
   13ce4:	bl	18b8 <fread@plt>
   13ce8:	mov	r5, r0
   13cec:	cmp	r7, #1
   13cf0:	blt	15eb0 <ReadInt16Data+0x2290>
   13cf4:	ldr	r3, [sp, #132]	; 0x84
   13cf8:	mov	r0, #0
   13cfc:	cmp	r7, #8
   13d00:	bcc	13d30 <ReadInt16Data+0x110>
   13d04:	bic	r0, r7, #7
   13d08:	mov	r2, r3
   13d0c:	mov	r1, r0
   13d10:	vld1.8	{d16}, [r4 :64]
   13d14:	subs	r1, r1, #8
   13d18:	add	r4, r4, #8
   13d1c:	vmovl.s8	q8, d16
   13d20:	vst1.16	{d16-d17}, [r2]!
   13d24:	bne	13d10 <ReadInt16Data+0xf0>
   13d28:	cmp	r0, r7
   13d2c:	beq	15eb0 <ReadInt16Data+0x2290>
   13d30:	add	r2, r3, r0, lsl #1
   13d34:	add	r3, sp, #144	; 0x90
   13d38:	sub	r1, r7, r0
   13d3c:	add	r0, r3, r0
   13d40:	ldrsb	r3, [r0], #1
   13d44:	subs	r1, r1, #1
   13d48:	strh	r3, [r2], #2
   13d4c:	bne	13d40 <ReadInt16Data+0x120>
   13d50:	b	15eb0 <ReadInt16Data+0x2290>
   13d54:	cmp	r7, #256	; 0x100
   13d58:	bgt	14518 <ReadInt16Data+0x8f8>
   13d5c:	ldr	r0, [sp, #140]	; 0x8c
   13d60:	add	r4, sp, #144	; 0x90
   13d64:	mov	r1, r9
   13d68:	mov	r2, r7
   13d6c:	ldr	r3, [r0]
   13d70:	mov	r0, r4
   13d74:	bl	18b8 <fread@plt>
   13d78:	mov	r5, r0
   13d7c:	cmp	r7, #1
   13d80:	blt	15eb0 <ReadInt16Data+0x2290>
   13d84:	ldr	r3, [sp, #132]	; 0x84
   13d88:	mov	r0, #0
   13d8c:	cmp	r7, #8
   13d90:	bcc	13dc0 <ReadInt16Data+0x1a0>
   13d94:	bic	r0, r7, #7
   13d98:	mov	r2, r3
   13d9c:	mov	r1, r0
   13da0:	vld1.8	{d16}, [r4 :64]
   13da4:	subs	r1, r1, #8
   13da8:	add	r4, r4, #8
   13dac:	vmovl.u8	q8, d16
   13db0:	vst1.16	{d16-d17}, [r2]!
   13db4:	bne	13da0 <ReadInt16Data+0x180>
   13db8:	cmp	r0, r7
   13dbc:	beq	15eb0 <ReadInt16Data+0x2290>
   13dc0:	add	r2, r3, r0, lsl #1
   13dc4:	add	r3, sp, #144	; 0x90
   13dc8:	sub	r1, r7, r0
   13dcc:	add	r0, r3, r0
   13dd0:	ldrb	r3, [r0], #1
   13dd4:	subs	r1, r1, #1
   13dd8:	strh	r3, [r2], #2
   13ddc:	bne	13dd0 <ReadInt16Data+0x1b0>
   13de0:	b	15eb0 <ReadInt16Data+0x2290>
   13de4:	ldr	r0, [sp, #140]	; 0x8c
   13de8:	ldr	r0, [r0, #20]
   13dec:	cmp	r0, #0
   13df0:	beq	14978 <ReadInt16Data+0xd58>
   13df4:	cmp	r7, #256	; 0x100
   13df8:	bgt	14cd8 <ReadInt16Data+0x10b8>
   13dfc:	ldr	r0, [sp, #140]	; 0x8c
   13e00:	add	r4, sp, #144	; 0x90
   13e04:	mov	r1, r9
   13e08:	mov	r2, r7
   13e0c:	ldr	r3, [r0]
   13e10:	mov	r0, r4
   13e14:	bl	18b8 <fread@plt>
   13e18:	mov	r5, r0
   13e1c:	cmp	r7, #1
   13e20:	blt	15eb0 <ReadInt16Data+0x2290>
   13e24:	ldr	r6, [sp, #132]	; 0x84
   13e28:	mov	r0, r4
   13e2c:	bl	1c18 <Mat_int16Swap>
   13e30:	strh	r0, [r6], #2
   13e34:	subs	r7, r7, #1
   13e38:	add	r4, r4, #2
   13e3c:	bne	13e28 <ReadInt16Data+0x208>
   13e40:	b	15eb0 <ReadInt16Data+0x2290>
   13e44:	ldr	r0, [sp, #140]	; 0x8c
   13e48:	ldr	r0, [r0, #20]
   13e4c:	cmp	r0, #0
   13e50:	beq	149ec <ReadInt16Data+0xdcc>
   13e54:	cmp	r7, #256	; 0x100
   13e58:	bgt	14dd0 <ReadInt16Data+0x11b0>
   13e5c:	ldr	r0, [sp, #140]	; 0x8c
   13e60:	add	r4, sp, #144	; 0x90
   13e64:	mov	r1, r9
   13e68:	mov	r2, r7
   13e6c:	ldr	r3, [r0]
   13e70:	mov	r0, r4
   13e74:	bl	18b8 <fread@plt>
   13e78:	mov	r5, r0
   13e7c:	cmp	r7, #1
   13e80:	blt	15eb0 <ReadInt16Data+0x2290>
   13e84:	ldr	r6, [sp, #132]	; 0x84
   13e88:	mov	r0, r4
   13e8c:	bl	1c2c <Mat_uint16Swap>
   13e90:	strh	r0, [r6], #2
   13e94:	subs	r7, r7, #1
   13e98:	add	r4, r4, #2
   13e9c:	bne	13e88 <ReadInt16Data+0x268>
   13ea0:	b	15eb0 <ReadInt16Data+0x2290>
   13ea4:	ldr	r0, [sp, #140]	; 0x8c
   13ea8:	ldr	r0, [r0, #20]
   13eac:	cmp	r0, #0
   13eb0:	beq	14a34 <ReadInt16Data+0xe14>
   13eb4:	cmp	r7, #256	; 0x100
   13eb8:	bgt	14ec8 <ReadInt16Data+0x12a8>
   13ebc:	ldr	r0, [sp, #140]	; 0x8c
   13ec0:	add	r4, sp, #144	; 0x90
   13ec4:	mov	r1, r9
   13ec8:	mov	r2, r7
   13ecc:	ldr	r3, [r0]
   13ed0:	mov	r0, r4
   13ed4:	bl	18b8 <fread@plt>
   13ed8:	mov	r5, r0
   13edc:	cmp	r7, #1
   13ee0:	blt	15eb0 <ReadInt16Data+0x2290>
   13ee4:	ldr	r6, [sp, #132]	; 0x84
   13ee8:	mov	r0, r4
   13eec:	bl	1bf0 <Mat_int32Swap>
   13ef0:	strh	r0, [r6], #2
   13ef4:	subs	r7, r7, #1
   13ef8:	add	r4, r4, #4
   13efc:	bne	13ee8 <ReadInt16Data+0x2c8>
   13f00:	b	15eb0 <ReadInt16Data+0x2290>
   13f04:	ldr	r0, [sp, #140]	; 0x8c
   13f08:	ldr	r0, [r0, #20]
   13f0c:	cmp	r0, #0
   13f10:	beq	14ac0 <ReadInt16Data+0xea0>
   13f14:	cmp	r7, #256	; 0x100
   13f18:	bgt	14fc0 <ReadInt16Data+0x13a0>
   13f1c:	ldr	r0, [sp, #140]	; 0x8c
   13f20:	add	r4, sp, #144	; 0x90
   13f24:	mov	r1, r9
   13f28:	mov	r2, r7
   13f2c:	ldr	r3, [r0]
   13f30:	mov	r0, r4
   13f34:	bl	18b8 <fread@plt>
   13f38:	mov	r5, r0
   13f3c:	cmp	r7, #1
   13f40:	blt	15eb0 <ReadInt16Data+0x2290>
   13f44:	ldr	r6, [sp, #132]	; 0x84
   13f48:	mov	r0, r4
   13f4c:	bl	1c04 <Mat_uint32Swap>
   13f50:	strh	r0, [r6], #2
   13f54:	subs	r7, r7, #1
   13f58:	add	r4, r4, #4
   13f5c:	bne	13f48 <ReadInt16Data+0x328>
   13f60:	b	15eb0 <ReadInt16Data+0x2290>
   13f64:	ldr	r0, [sp, #140]	; 0x8c
   13f68:	ldr	r0, [r0, #20]
   13f6c:	cmp	r0, #0
   13f70:	beq	14b4c <ReadInt16Data+0xf2c>
   13f74:	cmp	r7, #256	; 0x100
   13f78:	bgt	150b8 <ReadInt16Data+0x1498>
   13f7c:	ldr	r0, [sp, #140]	; 0x8c
   13f80:	add	r4, sp, #144	; 0x90
   13f84:	mov	r1, r9
   13f88:	mov	r2, r7
   13f8c:	ldr	r3, [r0]
   13f90:	mov	r0, r4
   13f94:	bl	18b8 <fread@plt>
   13f98:	mov	r5, r0
   13f9c:	cmp	r7, #1
   13fa0:	blt	15eb0 <ReadInt16Data+0x2290>
   13fa4:	ldr	r6, [sp, #132]	; 0x84
   13fa8:	mov	r0, r4
   13fac:	bl	1c44 <Mat_floatSwap>
   13fb0:	vcvt.s32.f32	s0, s0
   13fb4:	subs	r7, r7, #1
   13fb8:	add	r4, r4, #4
   13fbc:	vmov	r0, s0
   13fc0:	strh	r0, [r6], #2
   13fc4:	bne	13fa8 <ReadInt16Data+0x388>
   13fc8:	b	15eb0 <ReadInt16Data+0x2290>
   13fcc:	ldr	r0, [sp, #140]	; 0x8c
   13fd0:	ldr	r0, [r0, #20]
   13fd4:	cmp	r0, #0
   13fd8:	beq	14be8 <ReadInt16Data+0xfc8>
   13fdc:	cmp	r7, #256	; 0x100
   13fe0:	bgt	151c4 <ReadInt16Data+0x15a4>
   13fe4:	ldr	r0, [sp, #140]	; 0x8c
   13fe8:	add	r4, sp, #144	; 0x90
   13fec:	mov	r1, r9
   13ff0:	mov	r2, r7
   13ff4:	ldr	r3, [r0]
   13ff8:	mov	r0, r4
   13ffc:	bl	18b8 <fread@plt>
   14000:	mov	r5, r0
   14004:	cmp	r7, #1
   14008:	blt	15eb0 <ReadInt16Data+0x2290>
   1400c:	ldr	r6, [sp, #132]	; 0x84
   14010:	mov	r0, r4
   14014:	bl	1c88 <Mat_doubleSwap>
   14018:	vcvt.s32.f64	s0, d0
   1401c:	subs	r7, r7, #1
   14020:	add	r4, r4, #8
   14024:	vmov	r0, s0
   14028:	strh	r0, [r6], #2
   1402c:	bne	14010 <ReadInt16Data+0x3f0>
   14030:	b	15eb0 <ReadInt16Data+0x2290>
   14034:	ldr	r0, [sp, #140]	; 0x8c
   14038:	ldr	r0, [r0, #20]
   1403c:	cmp	r0, #0
   14040:	beq	14c3c <ReadInt16Data+0x101c>
   14044:	cmp	r7, #256	; 0x100
   14048:	bgt	152d0 <ReadInt16Data+0x16b0>
   1404c:	ldr	r0, [sp, #140]	; 0x8c
   14050:	add	r4, sp, #144	; 0x90
   14054:	mov	r1, r9
   14058:	mov	r2, r7
   1405c:	ldr	r3, [r0]
   14060:	mov	r0, r4
   14064:	bl	18b8 <fread@plt>
   14068:	mov	r5, r0
   1406c:	cmp	r7, #1
   14070:	blt	14cc8 <ReadInt16Data+0x10a8>
   14074:	ldr	r6, [sp, #132]	; 0x84
   14078:	mov	r0, r7
   1407c:	mov	r7, r5
   14080:	mov	r8, r0
   14084:	mov	r5, r0
   14088:	mov	r0, r4
   1408c:	bl	1b84 <Mat_int64Swap>
   14090:	strh	r0, [r6], #2
   14094:	subs	r5, r5, #1
   14098:	add	r4, r4, #8
   1409c:	bne	14088 <ReadInt16Data+0x468>
   140a0:	ldr	r6, [sp, #132]	; 0x84
   140a4:	mov	r5, r7
   140a8:	mov	r7, r8
   140ac:	cmp	sl, #13
   140b0:	beq	15b40 <ReadInt16Data+0x1f20>
   140b4:	b	15eb0 <ReadInt16Data+0x2290>
   140b8:	add	r4, sp, #144	; 0x90
   140bc:	mov	r8, r6
   140c0:	mov	sl, r6
   140c4:	ldr	r6, [sp, #140]	; 0x8c
   140c8:	str	r7, [sp]
   140cc:	mov	r5, #0
   140d0:	add	r0, r4, #248	; 0xf8
   140d4:	str	r0, [sp, #128]	; 0x80
   140d8:	add	r0, r4, #240	; 0xf0
   140dc:	str	r0, [sp, #124]	; 0x7c
   140e0:	add	r0, r4, #232	; 0xe8
   140e4:	str	r0, [sp, #120]	; 0x78
   140e8:	add	r0, r4, #224	; 0xe0
   140ec:	str	r0, [sp, #116]	; 0x74
   140f0:	add	r0, r4, #216	; 0xd8
   140f4:	str	r0, [sp, #112]	; 0x70
   140f8:	add	r0, r4, #208	; 0xd0
   140fc:	str	r0, [sp, #108]	; 0x6c
   14100:	add	r0, r4, #200	; 0xc8
   14104:	str	r0, [sp, #104]	; 0x68
   14108:	add	r0, r4, #192	; 0xc0
   1410c:	str	r0, [sp, #100]	; 0x64
   14110:	add	r0, r4, #184	; 0xb8
   14114:	str	r0, [sp, #96]	; 0x60
   14118:	add	r0, r4, #176	; 0xb0
   1411c:	str	r0, [sp, #92]	; 0x5c
   14120:	add	r0, r4, #168	; 0xa8
   14124:	str	r0, [sp, #88]	; 0x58
   14128:	add	r0, r4, #160	; 0xa0
   1412c:	str	r0, [sp, #84]	; 0x54
   14130:	add	r0, r4, #152	; 0x98
   14134:	str	r0, [sp, #80]	; 0x50
   14138:	add	r0, r4, #144	; 0x90
   1413c:	str	r0, [sp, #76]	; 0x4c
   14140:	add	r0, r4, #136	; 0x88
   14144:	str	r0, [sp, #72]	; 0x48
   14148:	add	r0, r4, #128	; 0x80
   1414c:	str	r0, [sp, #68]	; 0x44
   14150:	add	r0, r4, #120	; 0x78
   14154:	str	r0, [sp, #64]	; 0x40
   14158:	add	r0, r4, #112	; 0x70
   1415c:	str	r0, [sp, #60]	; 0x3c
   14160:	add	r0, r4, #104	; 0x68
   14164:	str	r0, [sp, #56]	; 0x38
   14168:	add	r0, r4, #96	; 0x60
   1416c:	str	r0, [sp, #52]	; 0x34
   14170:	add	r0, r4, #88	; 0x58
   14174:	str	r0, [sp, #48]	; 0x30
   14178:	add	r0, r4, #80	; 0x50
   1417c:	str	r0, [sp, #44]	; 0x2c
   14180:	add	r0, r4, #72	; 0x48
   14184:	str	r0, [sp, #40]	; 0x28
   14188:	add	r0, r4, #64	; 0x40
   1418c:	str	r0, [sp, #36]	; 0x24
   14190:	add	r0, r4, #56	; 0x38
   14194:	str	r0, [sp, #32]
   14198:	add	r0, r4, #48	; 0x30
   1419c:	str	r0, [sp, #28]
   141a0:	add	r0, r4, #40	; 0x28
   141a4:	str	r0, [sp, #24]
   141a8:	add	r0, r4, #32
   141ac:	str	r0, [sp, #20]
   141b0:	add	r0, r4, #24
   141b4:	str	r0, [sp, #16]
   141b8:	add	r0, r4, #16
   141bc:	str	r0, [sp, #12]
   141c0:	add	r0, r4, #8
   141c4:	str	r0, [sp, #8]
   141c8:	sub	r0, r7, #256	; 0x100
   141cc:	mov	r7, #0
   141d0:	str	r0, [sp, #4]
   141d4:	ldr	r3, [r6]
   141d8:	mov	r0, r4
   141dc:	mov	r1, r9
   141e0:	mov	r2, #256	; 0x100
   141e4:	bl	18b8 <fread@plt>
   141e8:	vld1.8	{d16}, [r4 :64]
   141ec:	mov	r1, #512	; 0x200
   141f0:	add	r5, r0, r5
   141f4:	ldr	r0, [sp, #4]
   141f8:	add	r7, r7, #256	; 0x100
   141fc:	vmovl.s8	q8, d16
   14200:	cmp	r7, r0
   14204:	vst1.16	{d16-d17}, [sl], r1
   14208:	ldr	r1, [sp, #8]
   1420c:	vld1.8	{d16}, [r1 :64]
   14210:	add	r1, r8, #16
   14214:	vmovl.s8	q8, d16
   14218:	vst1.16	{d16-d17}, [r1]
   1421c:	ldr	r1, [sp, #12]
   14220:	vld1.8	{d16}, [r1 :64]
   14224:	add	r1, r8, #32
   14228:	vmovl.s8	q8, d16
   1422c:	vst1.16	{d16-d17}, [r1]
   14230:	ldr	r1, [sp, #16]
   14234:	vld1.8	{d16}, [r1 :64]
   14238:	add	r1, r8, #48	; 0x30
   1423c:	vmovl.s8	q8, d16
   14240:	vst1.16	{d16-d17}, [r1]
   14244:	ldr	r1, [sp, #20]
   14248:	vld1.8	{d16}, [r1 :64]
   1424c:	add	r1, r8, #64	; 0x40
   14250:	vmovl.s8	q8, d16
   14254:	vst1.16	{d16-d17}, [r1]
   14258:	ldr	r1, [sp, #24]
   1425c:	vld1.8	{d16}, [r1 :64]
   14260:	add	r1, r8, #80	; 0x50
   14264:	vmovl.s8	q8, d16
   14268:	vst1.16	{d16-d17}, [r1]
   1426c:	ldr	r1, [sp, #28]
   14270:	vld1.8	{d16}, [r1 :64]
   14274:	add	r1, r8, #96	; 0x60
   14278:	vmovl.s8	q8, d16
   1427c:	vst1.16	{d16-d17}, [r1]
   14280:	ldr	r1, [sp, #32]
   14284:	vld1.8	{d16}, [r1 :64]
   14288:	add	r1, r8, #112	; 0x70
   1428c:	vmovl.s8	q8, d16
   14290:	vst1.16	{d16-d17}, [r1]
   14294:	ldr	r1, [sp, #36]	; 0x24
   14298:	vld1.8	{d16}, [r1 :64]
   1429c:	add	r1, r8, #128	; 0x80
   142a0:	vmovl.s8	q8, d16
   142a4:	vst1.16	{d16-d17}, [r1]
   142a8:	ldr	r1, [sp, #40]	; 0x28
   142ac:	vld1.8	{d16}, [r1 :64]
   142b0:	add	r1, r8, #144	; 0x90
   142b4:	vmovl.s8	q8, d16
   142b8:	vst1.16	{d16-d17}, [r1]
   142bc:	ldr	r1, [sp, #44]	; 0x2c
   142c0:	vld1.8	{d16}, [r1 :64]
   142c4:	add	r1, r8, #160	; 0xa0
   142c8:	vmovl.s8	q8, d16
   142cc:	vst1.16	{d16-d17}, [r1]
   142d0:	ldr	r1, [sp, #48]	; 0x30
   142d4:	vld1.8	{d16}, [r1 :64]
   142d8:	add	r1, r8, #176	; 0xb0
   142dc:	vmovl.s8	q8, d16
   142e0:	vst1.16	{d16-d17}, [r1]
   142e4:	ldr	r1, [sp, #52]	; 0x34
   142e8:	vld1.8	{d16}, [r1 :64]
   142ec:	add	r1, r8, #192	; 0xc0
   142f0:	vmovl.s8	q8, d16
   142f4:	vst1.16	{d16-d17}, [r1]
   142f8:	ldr	r1, [sp, #56]	; 0x38
   142fc:	vld1.8	{d16}, [r1 :64]
   14300:	add	r1, r8, #208	; 0xd0
   14304:	vmovl.s8	q8, d16
   14308:	vst1.16	{d16-d17}, [r1]
   1430c:	ldr	r1, [sp, #60]	; 0x3c
   14310:	vld1.8	{d16}, [r1 :64]
   14314:	add	r1, r8, #224	; 0xe0
   14318:	vmovl.s8	q8, d16
   1431c:	vst1.16	{d16-d17}, [r1]
   14320:	ldr	r1, [sp, #64]	; 0x40
   14324:	vld1.8	{d16}, [r1 :64]
   14328:	add	r1, r8, #240	; 0xf0
   1432c:	vmovl.s8	q8, d16
   14330:	vst1.16	{d16-d17}, [r1]
   14334:	ldr	r1, [sp, #68]	; 0x44
   14338:	vld1.8	{d16}, [r1 :64]
   1433c:	add	r1, r8, #256	; 0x100
   14340:	vmovl.s8	q8, d16
   14344:	vst1.16	{d16-d17}, [r1]
   14348:	ldr	r1, [sp, #72]	; 0x48
   1434c:	vld1.8	{d16}, [r1 :64]
   14350:	add	r1, r8, #272	; 0x110
   14354:	vmovl.s8	q8, d16
   14358:	vst1.16	{d16-d17}, [r1]
   1435c:	ldr	r1, [sp, #76]	; 0x4c
   14360:	vld1.8	{d16}, [r1 :64]
   14364:	add	r1, r8, #288	; 0x120
   14368:	vmovl.s8	q8, d16
   1436c:	vst1.16	{d16-d17}, [r1]
   14370:	ldr	r1, [sp, #80]	; 0x50
   14374:	vld1.8	{d16}, [r1 :64]
   14378:	add	r1, r8, #304	; 0x130
   1437c:	vmovl.s8	q8, d16
   14380:	vst1.16	{d16-d17}, [r1]
   14384:	ldr	r1, [sp, #84]	; 0x54
   14388:	vld1.8	{d16}, [r1 :64]
   1438c:	add	r1, r8, #320	; 0x140
   14390:	vmovl.s8	q8, d16
   14394:	vst1.16	{d16-d17}, [r1]
   14398:	ldr	r1, [sp, #88]	; 0x58
   1439c:	vld1.8	{d16}, [r1 :64]
   143a0:	add	r1, r8, #336	; 0x150
   143a4:	vmovl.s8	q8, d16
   143a8:	vst1.16	{d16-d17}, [r1]
   143ac:	ldr	r1, [sp, #92]	; 0x5c
   143b0:	vld1.8	{d16}, [r1 :64]
   143b4:	add	r1, r8, #352	; 0x160
   143b8:	vmovl.s8	q8, d16
   143bc:	vst1.16	{d16-d17}, [r1]
   143c0:	ldr	r1, [sp, #96]	; 0x60
   143c4:	vld1.8	{d16}, [r1 :64]
   143c8:	add	r1, r8, #368	; 0x170
   143cc:	vmovl.s8	q8, d16
   143d0:	vst1.16	{d16-d17}, [r1]
   143d4:	ldr	r1, [sp, #100]	; 0x64
   143d8:	vld1.8	{d16}, [r1 :64]
   143dc:	add	r1, r8, #384	; 0x180
   143e0:	vmovl.s8	q8, d16
   143e4:	vst1.16	{d16-d17}, [r1]
   143e8:	ldr	r1, [sp, #104]	; 0x68
   143ec:	vld1.8	{d16}, [r1 :64]
   143f0:	add	r1, r8, #400	; 0x190
   143f4:	vmovl.s8	q8, d16
   143f8:	vst1.16	{d16-d17}, [r1]
   143fc:	ldr	r1, [sp, #108]	; 0x6c
   14400:	vld1.8	{d16}, [r1 :64]
   14404:	add	r1, r8, #416	; 0x1a0
   14408:	vmovl.s8	q8, d16
   1440c:	vst1.16	{d16-d17}, [r1]
   14410:	ldr	r1, [sp, #112]	; 0x70
   14414:	vld1.8	{d16}, [r1 :64]
   14418:	add	r1, r8, #432	; 0x1b0
   1441c:	vmovl.s8	q8, d16
   14420:	vst1.16	{d16-d17}, [r1]
   14424:	ldr	r1, [sp, #116]	; 0x74
   14428:	vld1.8	{d16}, [r1 :64]
   1442c:	add	r1, r8, #448	; 0x1c0
   14430:	vmovl.s8	q8, d16
   14434:	vst1.16	{d16-d17}, [r1]
   14438:	ldr	r1, [sp, #120]	; 0x78
   1443c:	vld1.8	{d16}, [r1 :64]
   14440:	add	r1, r8, #464	; 0x1d0
   14444:	vmovl.s8	q8, d16
   14448:	vst1.16	{d16-d17}, [r1]
   1444c:	ldr	r1, [sp, #124]	; 0x7c
   14450:	vld1.8	{d16}, [r1 :64]
   14454:	add	r1, r8, #480	; 0x1e0
   14458:	vmovl.s8	q8, d16
   1445c:	vst1.16	{d16-d17}, [r1]
   14460:	ldr	r1, [sp, #128]	; 0x80
   14464:	vld1.8	{d16}, [r1 :64]
   14468:	add	r1, r8, #496	; 0x1f0
   1446c:	mov	r8, sl
   14470:	vmovl.s8	q8, d16
   14474:	vst1.16	{d16-d17}, [r1]
   14478:	blt	141d4 <ReadInt16Data+0x5b4>
   1447c:	ldr	r0, [sp]
   14480:	cmp	r7, r0
   14484:	bge	15eb0 <ReadInt16Data+0x2290>
   14488:	ldr	r3, [r6]
   1448c:	sub	r8, r0, r7
   14490:	add	r4, sp, #144	; 0x90
   14494:	mov	r1, r9
   14498:	mov	r0, r4
   1449c:	mov	r2, r8
   144a0:	bl	18b8 <fread@plt>
   144a4:	add	r5, r0, r5
   144a8:	cmp	r8, #1
   144ac:	blt	15eb0 <ReadInt16Data+0x2290>
   144b0:	ldr	r3, [sp, #132]	; 0x84
   144b4:	mov	r0, #0
   144b8:	cmp	r8, #8
   144bc:	bcc	144e8 <ReadInt16Data+0x8c8>
   144c0:	bic	r1, r8, #7
   144c4:	bic	r0, r8, #7
   144c8:	vld1.8	{d16}, [r4 :64]
   144cc:	subs	r1, r1, #8
   144d0:	add	r4, r4, #8
   144d4:	vmovl.s8	q8, d16
   144d8:	vst1.16	{d16-d17}, [sl]!
   144dc:	bne	144c8 <ReadInt16Data+0x8a8>
   144e0:	cmp	r8, r0
   144e4:	beq	15eb0 <ReadInt16Data+0x2290>
   144e8:	add	r2, r0, r7
   144ec:	add	r1, sp, #144	; 0x90
   144f0:	add	r2, r3, r2, lsl #1
   144f4:	ldr	r3, [sp]
   144f8:	add	r1, r1, r0
   144fc:	sub	r0, r3, r0
   14500:	sub	r0, r0, r7
   14504:	ldrsb	r3, [r1], #1
   14508:	subs	r0, r0, #1
   1450c:	strh	r3, [r2], #2
   14510:	bne	14504 <ReadInt16Data+0x8e4>
   14514:	b	15eb0 <ReadInt16Data+0x2290>
   14518:	add	r4, sp, #144	; 0x90
   1451c:	ldr	sl, [sp, #140]	; 0x8c
   14520:	str	r7, [sp]
   14524:	mov	r5, #0
   14528:	mov	r8, r6
   1452c:	add	r0, r4, #248	; 0xf8
   14530:	str	r0, [sp, #128]	; 0x80
   14534:	add	r0, r4, #240	; 0xf0
   14538:	str	r0, [sp, #124]	; 0x7c
   1453c:	add	r0, r4, #232	; 0xe8
   14540:	str	r0, [sp, #120]	; 0x78
   14544:	add	r0, r4, #224	; 0xe0
   14548:	str	r0, [sp, #116]	; 0x74
   1454c:	add	r0, r4, #216	; 0xd8
   14550:	str	r0, [sp, #112]	; 0x70
   14554:	add	r0, r4, #208	; 0xd0
   14558:	str	r0, [sp, #108]	; 0x6c
   1455c:	add	r0, r4, #200	; 0xc8
   14560:	str	r0, [sp, #104]	; 0x68
   14564:	add	r0, r4, #192	; 0xc0
   14568:	str	r0, [sp, #100]	; 0x64
   1456c:	add	r0, r4, #184	; 0xb8
   14570:	str	r0, [sp, #96]	; 0x60
   14574:	add	r0, r4, #176	; 0xb0
   14578:	str	r0, [sp, #92]	; 0x5c
   1457c:	add	r0, r4, #168	; 0xa8
   14580:	str	r0, [sp, #88]	; 0x58
   14584:	add	r0, r4, #160	; 0xa0
   14588:	str	r0, [sp, #84]	; 0x54
   1458c:	add	r0, r4, #152	; 0x98
   14590:	str	r0, [sp, #80]	; 0x50
   14594:	add	r0, r4, #144	; 0x90
   14598:	str	r0, [sp, #76]	; 0x4c
   1459c:	add	r0, r4, #136	; 0x88
   145a0:	str	r0, [sp, #72]	; 0x48
   145a4:	add	r0, r4, #128	; 0x80
   145a8:	str	r0, [sp, #68]	; 0x44
   145ac:	add	r0, r4, #120	; 0x78
   145b0:	str	r0, [sp, #64]	; 0x40
   145b4:	add	r0, r4, #112	; 0x70
   145b8:	str	r0, [sp, #60]	; 0x3c
   145bc:	add	r0, r4, #104	; 0x68
   145c0:	str	r0, [sp, #56]	; 0x38
   145c4:	add	r0, r4, #96	; 0x60
   145c8:	str	r0, [sp, #52]	; 0x34
   145cc:	add	r0, r4, #88	; 0x58
   145d0:	str	r0, [sp, #48]	; 0x30
   145d4:	add	r0, r4, #80	; 0x50
   145d8:	str	r0, [sp, #44]	; 0x2c
   145dc:	add	r0, r4, #72	; 0x48
   145e0:	str	r0, [sp, #40]	; 0x28
   145e4:	add	r0, r4, #64	; 0x40
   145e8:	str	r0, [sp, #36]	; 0x24
   145ec:	add	r0, r4, #56	; 0x38
   145f0:	str	r0, [sp, #32]
   145f4:	add	r0, r4, #48	; 0x30
   145f8:	str	r0, [sp, #28]
   145fc:	add	r0, r4, #40	; 0x28
   14600:	str	r0, [sp, #24]
   14604:	add	r0, r4, #32
   14608:	str	r0, [sp, #20]
   1460c:	add	r0, r4, #24
   14610:	str	r0, [sp, #16]
   14614:	add	r0, r4, #16
   14618:	str	r0, [sp, #12]
   1461c:	add	r0, r4, #8
   14620:	str	r0, [sp, #8]
   14624:	sub	r0, r7, #256	; 0x100
   14628:	mov	r7, #0
   1462c:	str	r0, [sp, #4]
   14630:	ldr	r3, [sl]
   14634:	mov	r0, r4
   14638:	mov	r1, r9
   1463c:	mov	r2, #256	; 0x100
   14640:	bl	18b8 <fread@plt>
   14644:	vld1.8	{d16}, [r4 :64]
   14648:	mov	r1, #512	; 0x200
   1464c:	add	r5, r0, r5
   14650:	ldr	r0, [sp, #4]
   14654:	add	r7, r7, #256	; 0x100
   14658:	vmovl.u8	q8, d16
   1465c:	cmp	r7, r0
   14660:	vst1.16	{d16-d17}, [r8], r1
   14664:	ldr	r1, [sp, #8]
   14668:	vld1.8	{d16}, [r1 :64]
   1466c:	add	r1, r6, #16
   14670:	vmovl.u8	q8, d16
   14674:	vst1.16	{d16-d17}, [r1]
   14678:	ldr	r1, [sp, #12]
   1467c:	vld1.8	{d16}, [r1 :64]
   14680:	add	r1, r6, #32
   14684:	vmovl.u8	q8, d16
   14688:	vst1.16	{d16-d17}, [r1]
   1468c:	ldr	r1, [sp, #16]
   14690:	vld1.8	{d16}, [r1 :64]
   14694:	add	r1, r6, #48	; 0x30
   14698:	vmovl.u8	q8, d16
   1469c:	vst1.16	{d16-d17}, [r1]
   146a0:	ldr	r1, [sp, #20]
   146a4:	vld1.8	{d16}, [r1 :64]
   146a8:	add	r1, r6, #64	; 0x40
   146ac:	vmovl.u8	q8, d16
   146b0:	vst1.16	{d16-d17}, [r1]
   146b4:	ldr	r1, [sp, #24]
   146b8:	vld1.8	{d16}, [r1 :64]
   146bc:	add	r1, r6, #80	; 0x50
   146c0:	vmovl.u8	q8, d16
   146c4:	vst1.16	{d16-d17}, [r1]
   146c8:	ldr	r1, [sp, #28]
   146cc:	vld1.8	{d16}, [r1 :64]
   146d0:	add	r1, r6, #96	; 0x60
   146d4:	vmovl.u8	q8, d16
   146d8:	vst1.16	{d16-d17}, [r1]
   146dc:	ldr	r1, [sp, #32]
   146e0:	vld1.8	{d16}, [r1 :64]
   146e4:	add	r1, r6, #112	; 0x70
   146e8:	vmovl.u8	q8, d16
   146ec:	vst1.16	{d16-d17}, [r1]
   146f0:	ldr	r1, [sp, #36]	; 0x24
   146f4:	vld1.8	{d16}, [r1 :64]
   146f8:	add	r1, r6, #128	; 0x80
   146fc:	vmovl.u8	q8, d16
   14700:	vst1.16	{d16-d17}, [r1]
   14704:	ldr	r1, [sp, #40]	; 0x28
   14708:	vld1.8	{d16}, [r1 :64]
   1470c:	add	r1, r6, #144	; 0x90
   14710:	vmovl.u8	q8, d16
   14714:	vst1.16	{d16-d17}, [r1]
   14718:	ldr	r1, [sp, #44]	; 0x2c
   1471c:	vld1.8	{d16}, [r1 :64]
   14720:	add	r1, r6, #160	; 0xa0
   14724:	vmovl.u8	q8, d16
   14728:	vst1.16	{d16-d17}, [r1]
   1472c:	ldr	r1, [sp, #48]	; 0x30
   14730:	vld1.8	{d16}, [r1 :64]
   14734:	add	r1, r6, #176	; 0xb0
   14738:	vmovl.u8	q8, d16
   1473c:	vst1.16	{d16-d17}, [r1]
   14740:	ldr	r1, [sp, #52]	; 0x34
   14744:	vld1.8	{d16}, [r1 :64]
   14748:	add	r1, r6, #192	; 0xc0
   1474c:	vmovl.u8	q8, d16
   14750:	vst1.16	{d16-d17}, [r1]
   14754:	ldr	r1, [sp, #56]	; 0x38
   14758:	vld1.8	{d16}, [r1 :64]
   1475c:	add	r1, r6, #208	; 0xd0
   14760:	vmovl.u8	q8, d16
   14764:	vst1.16	{d16-d17}, [r1]
   14768:	ldr	r1, [sp, #60]	; 0x3c
   1476c:	vld1.8	{d16}, [r1 :64]
   14770:	add	r1, r6, #224	; 0xe0
   14774:	vmovl.u8	q8, d16
   14778:	vst1.16	{d16-d17}, [r1]
   1477c:	ldr	r1, [sp, #64]	; 0x40
   14780:	vld1.8	{d16}, [r1 :64]
   14784:	add	r1, r6, #240	; 0xf0
   14788:	vmovl.u8	q8, d16
   1478c:	vst1.16	{d16-d17}, [r1]
   14790:	ldr	r1, [sp, #68]	; 0x44
   14794:	vld1.8	{d16}, [r1 :64]
   14798:	add	r1, r6, #256	; 0x100
   1479c:	vmovl.u8	q8, d16
   147a0:	vst1.16	{d16-d17}, [r1]
   147a4:	ldr	r1, [sp, #72]	; 0x48
   147a8:	vld1.8	{d16}, [r1 :64]
   147ac:	add	r1, r6, #272	; 0x110
   147b0:	vmovl.u8	q8, d16
   147b4:	vst1.16	{d16-d17}, [r1]
   147b8:	ldr	r1, [sp, #76]	; 0x4c
   147bc:	vld1.8	{d16}, [r1 :64]
   147c0:	add	r1, r6, #288	; 0x120
   147c4:	vmovl.u8	q8, d16
   147c8:	vst1.16	{d16-d17}, [r1]
   147cc:	ldr	r1, [sp, #80]	; 0x50
   147d0:	vld1.8	{d16}, [r1 :64]
   147d4:	add	r1, r6, #304	; 0x130
   147d8:	vmovl.u8	q8, d16
   147dc:	vst1.16	{d16-d17}, [r1]
   147e0:	ldr	r1, [sp, #84]	; 0x54
   147e4:	vld1.8	{d16}, [r1 :64]
   147e8:	add	r1, r6, #320	; 0x140
   147ec:	vmovl.u8	q8, d16
   147f0:	vst1.16	{d16-d17}, [r1]
   147f4:	ldr	r1, [sp, #88]	; 0x58
   147f8:	vld1.8	{d16}, [r1 :64]
   147fc:	add	r1, r6, #336	; 0x150
   14800:	vmovl.u8	q8, d16
   14804:	vst1.16	{d16-d17}, [r1]
   14808:	ldr	r1, [sp, #92]	; 0x5c
   1480c:	vld1.8	{d16}, [r1 :64]
   14810:	add	r1, r6, #352	; 0x160
   14814:	vmovl.u8	q8, d16
   14818:	vst1.16	{d16-d17}, [r1]
   1481c:	ldr	r1, [sp, #96]	; 0x60
   14820:	vld1.8	{d16}, [r1 :64]
   14824:	add	r1, r6, #368	; 0x170
   14828:	vmovl.u8	q8, d16
   1482c:	vst1.16	{d16-d17}, [r1]
   14830:	ldr	r1, [sp, #100]	; 0x64
   14834:	vld1.8	{d16}, [r1 :64]
   14838:	add	r1, r6, #384	; 0x180
   1483c:	vmovl.u8	q8, d16
   14840:	vst1.16	{d16-d17}, [r1]
   14844:	ldr	r1, [sp, #104]	; 0x68
   14848:	vld1.8	{d16}, [r1 :64]
   1484c:	add	r1, r6, #400	; 0x190
   14850:	vmovl.u8	q8, d16
   14854:	vst1.16	{d16-d17}, [r1]
   14858:	ldr	r1, [sp, #108]	; 0x6c
   1485c:	vld1.8	{d16}, [r1 :64]
   14860:	add	r1, r6, #416	; 0x1a0
   14864:	vmovl.u8	q8, d16
   14868:	vst1.16	{d16-d17}, [r1]
   1486c:	ldr	r1, [sp, #112]	; 0x70
   14870:	vld1.8	{d16}, [r1 :64]
   14874:	add	r1, r6, #432	; 0x1b0
   14878:	vmovl.u8	q8, d16
   1487c:	vst1.16	{d16-d17}, [r1]
   14880:	ldr	r1, [sp, #116]	; 0x74
   14884:	vld1.8	{d16}, [r1 :64]
   14888:	add	r1, r6, #448	; 0x1c0
   1488c:	vmovl.u8	q8, d16
   14890:	vst1.16	{d16-d17}, [r1]
   14894:	ldr	r1, [sp, #120]	; 0x78
   14898:	vld1.8	{d16}, [r1 :64]
   1489c:	add	r1, r6, #464	; 0x1d0
   148a0:	vmovl.u8	q8, d16
   148a4:	vst1.16	{d16-d17}, [r1]
   148a8:	ldr	r1, [sp, #124]	; 0x7c
   148ac:	vld1.8	{d16}, [r1 :64]
   148b0:	add	r1, r6, #480	; 0x1e0
   148b4:	vmovl.u8	q8, d16
   148b8:	vst1.16	{d16-d17}, [r1]
   148bc:	ldr	r1, [sp, #128]	; 0x80
   148c0:	vld1.8	{d16}, [r1 :64]
   148c4:	add	r1, r6, #496	; 0x1f0
   148c8:	mov	r6, r8
   148cc:	vmovl.u8	q8, d16
   148d0:	vst1.16	{d16-d17}, [r1]
   148d4:	blt	14630 <ReadInt16Data+0xa10>
   148d8:	ldr	r0, [sp]
   148dc:	cmp	r7, r0
   148e0:	bge	15eb0 <ReadInt16Data+0x2290>
   148e4:	sub	r6, r0, r7
   148e8:	ldr	r0, [sp, #140]	; 0x8c
   148ec:	add	r4, sp, #144	; 0x90
   148f0:	mov	r1, r9
   148f4:	mov	r2, r6
   148f8:	ldr	r3, [r0]
   148fc:	mov	r0, r4
   14900:	bl	18b8 <fread@plt>
   14904:	add	r5, r0, r5
   14908:	cmp	r6, #1
   1490c:	blt	15eb0 <ReadInt16Data+0x2290>
   14910:	ldr	r3, [sp, #132]	; 0x84
   14914:	mov	r0, #0
   14918:	cmp	r6, #8
   1491c:	bcc	14948 <ReadInt16Data+0xd28>
   14920:	bic	r1, r6, #7
   14924:	bic	r0, r6, #7
   14928:	vld1.8	{d16}, [r4 :64]
   1492c:	subs	r1, r1, #8
   14930:	add	r4, r4, #8
   14934:	vmovl.u8	q8, d16
   14938:	vst1.16	{d16-d17}, [r8]!
   1493c:	bne	14928 <ReadInt16Data+0xd08>
   14940:	cmp	r6, r0
   14944:	beq	15eb0 <ReadInt16Data+0x2290>
   14948:	add	r2, r0, r7
   1494c:	add	r1, sp, #144	; 0x90
   14950:	add	r2, r3, r2, lsl #1
   14954:	ldr	r3, [sp]
   14958:	add	r1, r1, r0
   1495c:	sub	r0, r3, r0
   14960:	sub	r0, r0, r7
   14964:	ldrb	r3, [r1], #1
   14968:	subs	r0, r0, #1
   1496c:	strh	r3, [r2], #2
   14970:	bne	14964 <ReadInt16Data+0xd44>
   14974:	b	15eb0 <ReadInt16Data+0x2290>
   14978:	cmp	r7, #256	; 0x100
   1497c:	ble	149f4 <ReadInt16Data+0xdd4>
   14980:	str	r9, [sp, #136]	; 0x88
   14984:	ldr	r9, [sp, #132]	; 0x84
   14988:	ldr	sl, [sp, #140]	; 0x8c
   1498c:	sub	r0, r7, #256	; 0x100
   14990:	lsl	r4, r7, #1
   14994:	mov	r6, #0
   14998:	add	r8, sp, #144	; 0x90
   1499c:	mov	r5, #0
   149a0:	str	r7, [sp]
   149a4:	str	r0, [sp, #128]	; 0x80
   149a8:	ldr	r3, [sl]
   149ac:	ldr	r1, [sp, #136]	; 0x88
   149b0:	mov	r0, r8
   149b4:	mov	r2, #256	; 0x100
   149b8:	bl	18b8 <fread@plt>
   149bc:	mov	r7, r0
   149c0:	add	r0, r9, r6, lsl #1
   149c4:	mov	r1, r8
   149c8:	mov	r2, #512	; 0x200
   149cc:	bl	181c <memcpy@plt>
   149d0:	ldr	r0, [sp, #128]	; 0x80
   149d4:	add	r6, r6, #256	; 0x100
   149d8:	add	r5, r7, r5
   149dc:	sub	r4, r4, #512	; 0x200
   149e0:	cmp	r6, r0
   149e4:	blt	149a8 <ReadInt16Data+0xd88>
   149e8:	b	1544c <ReadInt16Data+0x182c>
   149ec:	cmp	r7, #256	; 0x100
   149f0:	bgt	153e4 <ReadInt16Data+0x17c4>
   149f4:	ldr	r0, [sp, #140]	; 0x8c
   149f8:	mov	r1, r9
   149fc:	mov	r2, r7
   14a00:	ldr	r3, [r0]
   14a04:	add	r0, sp, #144	; 0x90
   14a08:	bl	18b8 <fread@plt>
   14a0c:	mov	r5, r0
   14a10:	cmp	r7, #1
   14a14:	blt	15eb0 <ReadInt16Data+0x2290>
   14a18:	ldr	r0, [sp, #132]	; 0x84
   14a1c:	lsl	r2, r7, #1
   14a20:	add	r1, sp, #144	; 0x90
   14a24:	bl	181c <memcpy@plt>
   14a28:	mul	r0, r5, r9
   14a2c:	sub	sp, fp, #28
   14a30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a34:	cmp	r7, #256	; 0x100
   14a38:	bgt	154a4 <ReadInt16Data+0x1884>
   14a3c:	ldr	r0, [sp, #140]	; 0x8c
   14a40:	add	r4, sp, #144	; 0x90
   14a44:	mov	r1, r9
   14a48:	mov	r2, r7
   14a4c:	ldr	r3, [r0]
   14a50:	mov	r0, r4
   14a54:	bl	18b8 <fread@plt>
   14a58:	mov	r5, r0
   14a5c:	cmp	r7, #1
   14a60:	blt	15eb0 <ReadInt16Data+0x2290>
   14a64:	ldr	r3, [sp, #132]	; 0x84
   14a68:	mov	r0, #0
   14a6c:	cmp	r7, #4
   14a70:	bcc	14a9c <ReadInt16Data+0xe7c>
   14a74:	bic	r0, r7, #3
   14a78:	mov	r2, r3
   14a7c:	mov	r1, r0
   14a80:	vld1.32	{d16-d17}, [r4]!
   14a84:	subs	r1, r1, #4
   14a88:	vmovn.i32	d16, q8
   14a8c:	vst1.16	{d16}, [r2]!
   14a90:	bne	14a80 <ReadInt16Data+0xe60>
   14a94:	cmp	r0, r7
   14a98:	beq	15eb0 <ReadInt16Data+0x2290>
   14a9c:	add	r2, r3, r0, lsl #1
   14aa0:	add	r3, sp, #144	; 0x90
   14aa4:	sub	r1, r7, r0
   14aa8:	add	r0, r3, r0, lsl #2
   14aac:	ldr	r3, [r0], #4
   14ab0:	subs	r1, r1, #1
   14ab4:	strh	r3, [r2], #2
   14ab8:	bne	14aac <ReadInt16Data+0xe8c>
   14abc:	b	15eb0 <ReadInt16Data+0x2290>
   14ac0:	cmp	r7, #256	; 0x100
   14ac4:	bgt	155dc <ReadInt16Data+0x19bc>
   14ac8:	ldr	r0, [sp, #140]	; 0x8c
   14acc:	add	r4, sp, #144	; 0x90
   14ad0:	mov	r1, r9
   14ad4:	mov	r2, r7
   14ad8:	ldr	r3, [r0]
   14adc:	mov	r0, r4
   14ae0:	bl	18b8 <fread@plt>
   14ae4:	mov	r5, r0
   14ae8:	cmp	r7, #1
   14aec:	blt	15eb0 <ReadInt16Data+0x2290>
   14af0:	ldr	r3, [sp, #132]	; 0x84
   14af4:	mov	r0, #0
   14af8:	cmp	r7, #4
   14afc:	bcc	14b28 <ReadInt16Data+0xf08>
   14b00:	bic	r0, r7, #3
   14b04:	mov	r2, r3
   14b08:	mov	r1, r0
   14b0c:	vld1.32	{d16-d17}, [r4]!
   14b10:	subs	r1, r1, #4
   14b14:	vmovn.i32	d16, q8
   14b18:	vst1.16	{d16}, [r2]!
   14b1c:	bne	14b0c <ReadInt16Data+0xeec>
   14b20:	cmp	r0, r7
   14b24:	beq	15eb0 <ReadInt16Data+0x2290>
   14b28:	add	r2, r3, r0, lsl #1
   14b2c:	add	r3, sp, #144	; 0x90
   14b30:	sub	r1, r7, r0
   14b34:	add	r0, r3, r0, lsl #2
   14b38:	ldr	r3, [r0], #4
   14b3c:	subs	r1, r1, #1
   14b40:	strh	r3, [r2], #2
   14b44:	bne	14b38 <ReadInt16Data+0xf18>
   14b48:	b	15eb0 <ReadInt16Data+0x2290>
   14b4c:	cmp	r7, #256	; 0x100
   14b50:	bgt	15714 <ReadInt16Data+0x1af4>
   14b54:	ldr	r0, [sp, #140]	; 0x8c
   14b58:	add	r4, sp, #144	; 0x90
   14b5c:	mov	r1, r9
   14b60:	mov	r2, r7
   14b64:	ldr	r3, [r0]
   14b68:	mov	r0, r4
   14b6c:	bl	18b8 <fread@plt>
   14b70:	mov	r5, r0
   14b74:	cmp	r7, #1
   14b78:	blt	15eb0 <ReadInt16Data+0x2290>
   14b7c:	ldr	r3, [sp, #132]	; 0x84
   14b80:	mov	r0, #0
   14b84:	cmp	r7, #4
   14b88:	bcc	14bb8 <ReadInt16Data+0xf98>
   14b8c:	bic	r0, r7, #3
   14b90:	mov	r2, r3
   14b94:	mov	r1, r0
   14b98:	vld1.32	{d16-d17}, [r4]!
   14b9c:	subs	r1, r1, #4
   14ba0:	vcvt.s32.f32	q8, q8
   14ba4:	vmovn.i32	d16, q8
   14ba8:	vst1.16	{d16}, [r2]!
   14bac:	bne	14b98 <ReadInt16Data+0xf78>
   14bb0:	cmp	r0, r7
   14bb4:	beq	15eb0 <ReadInt16Data+0x2290>
   14bb8:	add	r2, r3, r0, lsl #1
   14bbc:	add	r3, sp, #144	; 0x90
   14bc0:	sub	r1, r7, r0
   14bc4:	add	r0, r3, r0, lsl #2
   14bc8:	vldr	s0, [r0]
   14bcc:	subs	r1, r1, #1
   14bd0:	add	r0, r0, #4
   14bd4:	vcvt.s32.f32	s0, s0
   14bd8:	vmov	r3, s0
   14bdc:	strh	r3, [r2], #2
   14be0:	bne	14bc8 <ReadInt16Data+0xfa8>
   14be4:	b	15eb0 <ReadInt16Data+0x2290>
   14be8:	cmp	r7, #256	; 0x100
   14bec:	bgt	15860 <ReadInt16Data+0x1c40>
   14bf0:	ldr	r0, [sp, #140]	; 0x8c
   14bf4:	add	r4, sp, #144	; 0x90
   14bf8:	mov	r1, r9
   14bfc:	mov	r2, r7
   14c00:	ldr	r3, [r0]
   14c04:	mov	r0, r4
   14c08:	bl	18b8 <fread@plt>
   14c0c:	mov	r5, r0
   14c10:	cmp	r7, #1
   14c14:	blt	15eb0 <ReadInt16Data+0x2290>
   14c18:	ldr	r1, [sp, #132]	; 0x84
   14c1c:	vldr	d16, [r4]
   14c20:	subs	r7, r7, #1
   14c24:	add	r4, r4, #8
   14c28:	vcvt.s32.f64	s0, d16
   14c2c:	vmov	r0, s0
   14c30:	strh	r0, [r1], #2
   14c34:	bne	14c1c <ReadInt16Data+0xffc>
   14c38:	b	15eb0 <ReadInt16Data+0x2290>
   14c3c:	cmp	r7, #256	; 0x100
   14c40:	bgt	15950 <ReadInt16Data+0x1d30>
   14c44:	ldr	r0, [sp, #140]	; 0x8c
   14c48:	add	r4, sp, #144	; 0x90
   14c4c:	mov	r1, r9
   14c50:	mov	r2, r7
   14c54:	ldr	r3, [r0]
   14c58:	mov	r0, r4
   14c5c:	bl	18b8 <fread@plt>
   14c60:	mov	r5, r0
   14c64:	cmp	r7, #1
   14c68:	blt	14cc8 <ReadInt16Data+0x10a8>
   14c6c:	ldr	r6, [sp, #132]	; 0x84
   14c70:	mov	r0, #0
   14c74:	beq	14ca4 <ReadInt16Data+0x1084>
   14c78:	bic	r0, r7, #1
   14c7c:	mov	r2, r6
   14c80:	mov	r1, r0
   14c84:	vld1.64	{d16-d17}, [r4]!
   14c88:	subs	r1, r1, #2
   14c8c:	vmovn.i64	d16, q8
   14c90:	vuzp.16	d16, d17
   14c94:	vst1.32	{d16[0]}, [r2]!
   14c98:	bne	14c84 <ReadInt16Data+0x1064>
   14c9c:	cmp	r0, r7
   14ca0:	beq	15b38 <ReadInt16Data+0x1f18>
   14ca4:	add	r3, sp, #144	; 0x90
   14ca8:	sub	r1, r7, r0
   14cac:	add	r2, r6, r0, lsl #1
   14cb0:	add	r0, r3, r0, lsl #3
   14cb4:	ldrh	r3, [r0], #8
   14cb8:	subs	r1, r1, #1
   14cbc:	strh	r3, [r2], #2
   14cc0:	bne	14cb4 <ReadInt16Data+0x1094>
   14cc4:	b	15b38 <ReadInt16Data+0x1f18>
   14cc8:	ldr	r6, [sp, #132]	; 0x84
   14ccc:	cmp	sl, #13
   14cd0:	beq	15b40 <ReadInt16Data+0x1f20>
   14cd4:	b	15eb0 <ReadInt16Data+0x2290>
   14cd8:	sub	r0, r7, #256	; 0x100
   14cdc:	add	r1, r6, #512	; 0x200
   14ce0:	add	r4, sp, #144	; 0x90
   14ce4:	mov	r5, #0
   14ce8:	str	r9, [sp, #136]	; 0x88
   14cec:	str	r7, [sp]
   14cf0:	str	r0, [sp, #128]	; 0x80
   14cf4:	mov	r0, #0
   14cf8:	mov	sl, r0
   14cfc:	ldr	r0, [sp, #140]	; 0x8c
   14d00:	mov	r8, r1
   14d04:	ldr	r1, [sp, #136]	; 0x88
   14d08:	mov	r2, #256	; 0x100
   14d0c:	mov	r9, r5
   14d10:	ldr	r3, [r0]
   14d14:	mov	r0, r4
   14d18:	bl	18b8 <fread@plt>
   14d1c:	mov	r7, r0
   14d20:	mov	r5, #0
   14d24:	add	r0, r4, r5
   14d28:	bl	1c18 <Mat_int16Swap>
   14d2c:	add	r1, r6, r5
   14d30:	add	r5, r5, #2
   14d34:	cmp	r5, #512	; 0x200
   14d38:	strh	r0, [r1]
   14d3c:	bne	14d24 <ReadInt16Data+0x1104>
   14d40:	ldr	r2, [sp, #128]	; 0x80
   14d44:	mov	r5, r9
   14d48:	add	r0, sl, #256	; 0x100
   14d4c:	add	r6, r6, #512	; 0x200
   14d50:	add	r1, r8, #512	; 0x200
   14d54:	add	r5, r7, r9
   14d58:	cmp	r0, r2
   14d5c:	blt	14cf8 <ReadInt16Data+0x10d8>
   14d60:	ldr	r1, [sp]
   14d64:	cmp	r0, r1
   14d68:	bge	15a90 <ReadInt16Data+0x1e70>
   14d6c:	sub	r7, r1, r0
   14d70:	ldr	r0, [sp, #140]	; 0x8c
   14d74:	ldr	r9, [sp, #136]	; 0x88
   14d78:	add	r4, sp, #144	; 0x90
   14d7c:	mov	r2, r7
   14d80:	ldr	r3, [r0]
   14d84:	mov	r0, r4
   14d88:	mov	r1, r9
   14d8c:	bl	18b8 <fread@plt>
   14d90:	add	r5, r0, r5
   14d94:	cmp	r7, #1
   14d98:	blt	15eb0 <ReadInt16Data+0x2290>
   14d9c:	ldr	r0, [sp, #128]	; 0x80
   14da0:	mov	r7, r5
   14da4:	sub	r5, r0, sl
   14da8:	mov	r0, r4
   14dac:	bl	1c18 <Mat_int16Swap>
   14db0:	strh	r0, [r8], #2
   14db4:	subs	r5, r5, #1
   14db8:	add	r4, r4, #2
   14dbc:	bne	14da8 <ReadInt16Data+0x1188>
   14dc0:	mov	r5, r7
   14dc4:	mul	r0, r5, r9
   14dc8:	sub	sp, fp, #28
   14dcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14dd0:	sub	r0, r7, #256	; 0x100
   14dd4:	add	r1, r6, #512	; 0x200
   14dd8:	add	r4, sp, #144	; 0x90
   14ddc:	mov	r5, #0
   14de0:	str	r9, [sp, #136]	; 0x88
   14de4:	str	r7, [sp]
   14de8:	str	r0, [sp, #128]	; 0x80
   14dec:	mov	r0, #0
   14df0:	mov	sl, r0
   14df4:	ldr	r0, [sp, #140]	; 0x8c
   14df8:	mov	r8, r1
   14dfc:	ldr	r1, [sp, #136]	; 0x88
   14e00:	mov	r2, #256	; 0x100
   14e04:	mov	r9, r5
   14e08:	ldr	r3, [r0]
   14e0c:	mov	r0, r4
   14e10:	bl	18b8 <fread@plt>
   14e14:	mov	r7, r0
   14e18:	mov	r5, #0
   14e1c:	add	r0, r4, r5
   14e20:	bl	1c2c <Mat_uint16Swap>
   14e24:	add	r1, r6, r5
   14e28:	add	r5, r5, #2
   14e2c:	cmp	r5, #512	; 0x200
   14e30:	strh	r0, [r1]
   14e34:	bne	14e1c <ReadInt16Data+0x11fc>
   14e38:	ldr	r2, [sp, #128]	; 0x80
   14e3c:	mov	r5, r9
   14e40:	add	r0, sl, #256	; 0x100
   14e44:	add	r6, r6, #512	; 0x200
   14e48:	add	r1, r8, #512	; 0x200
   14e4c:	add	r5, r7, r9
   14e50:	cmp	r0, r2
   14e54:	blt	14df0 <ReadInt16Data+0x11d0>
   14e58:	ldr	r1, [sp]
   14e5c:	cmp	r0, r1
   14e60:	bge	15aa0 <ReadInt16Data+0x1e80>
   14e64:	sub	r7, r1, r0
   14e68:	ldr	r0, [sp, #140]	; 0x8c
   14e6c:	ldr	r9, [sp, #136]	; 0x88
   14e70:	add	r4, sp, #144	; 0x90
   14e74:	mov	r2, r7
   14e78:	ldr	r3, [r0]
   14e7c:	mov	r0, r4
   14e80:	mov	r1, r9
   14e84:	bl	18b8 <fread@plt>
   14e88:	add	r5, r0, r5
   14e8c:	cmp	r7, #1
   14e90:	blt	15eb0 <ReadInt16Data+0x2290>
   14e94:	ldr	r0, [sp, #128]	; 0x80
   14e98:	mov	r7, r5
   14e9c:	sub	r5, r0, sl
   14ea0:	mov	r0, r4
   14ea4:	bl	1c2c <Mat_uint16Swap>
   14ea8:	strh	r0, [r8], #2
   14eac:	subs	r5, r5, #1
   14eb0:	add	r4, r4, #2
   14eb4:	bne	14ea0 <ReadInt16Data+0x1280>
   14eb8:	mov	r5, r7
   14ebc:	mul	r0, r5, r9
   14ec0:	sub	sp, fp, #28
   14ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ec8:	sub	r0, r7, #256	; 0x100
   14ecc:	add	r1, r6, #512	; 0x200
   14ed0:	mov	r5, #0
   14ed4:	str	r9, [sp, #136]	; 0x88
   14ed8:	str	r7, [sp]
   14edc:	str	r0, [sp, #128]	; 0x80
   14ee0:	mov	r0, #0
   14ee4:	str	r0, [sp, #132]	; 0x84
   14ee8:	ldr	r0, [sp, #140]	; 0x8c
   14eec:	mov	r9, r1
   14ef0:	ldr	r1, [sp, #136]	; 0x88
   14ef4:	add	r7, sp, #144	; 0x90
   14ef8:	mov	r2, #256	; 0x100
   14efc:	mov	r8, r5
   14f00:	mov	sl, r6
   14f04:	ldr	r3, [r0]
   14f08:	mov	r0, r7
   14f0c:	bl	18b8 <fread@plt>
   14f10:	mov	r4, r0
   14f14:	mov	r5, #0
   14f18:	mov	r0, r7
   14f1c:	add	r6, sl, r5
   14f20:	bl	1bf0 <Mat_int32Swap>
   14f24:	add	r5, r5, #2
   14f28:	add	r7, r7, #4
   14f2c:	strh	r0, [r6]
   14f30:	cmp	r5, #512	; 0x200
   14f34:	bne	14f18 <ReadInt16Data+0x12f8>
   14f38:	ldr	r7, [sp, #132]	; 0x84
   14f3c:	ldr	r2, [sp, #128]	; 0x80
   14f40:	mov	r5, r8
   14f44:	add	sl, sl, #512	; 0x200
   14f48:	add	r1, r9, #512	; 0x200
   14f4c:	add	r5, r4, r8
   14f50:	mov	r6, sl
   14f54:	add	r0, r7, #256	; 0x100
   14f58:	cmp	r0, r2
   14f5c:	blt	14ee4 <ReadInt16Data+0x12c4>
   14f60:	ldr	r1, [sp]
   14f64:	cmp	r0, r1
   14f68:	bge	15ab0 <ReadInt16Data+0x1e90>
   14f6c:	sub	r6, r1, r0
   14f70:	ldr	r0, [sp, #140]	; 0x8c
   14f74:	ldr	r1, [sp, #136]	; 0x88
   14f78:	add	r4, sp, #144	; 0x90
   14f7c:	mov	r2, r6
   14f80:	ldr	r3, [r0]
   14f84:	mov	r0, r4
   14f88:	bl	18b8 <fread@plt>
   14f8c:	add	r5, r0, r5
   14f90:	cmp	r6, #1
   14f94:	blt	15e8c <ReadInt16Data+0x226c>
   14f98:	ldr	r0, [sp, #128]	; 0x80
   14f9c:	mov	r6, r5
   14fa0:	sub	r5, r0, r7
   14fa4:	mov	r0, r4
   14fa8:	bl	1bf0 <Mat_int32Swap>
   14fac:	strh	r0, [r9], #2
   14fb0:	subs	r5, r5, #1
   14fb4:	add	r4, r4, #4
   14fb8:	bne	14fa4 <ReadInt16Data+0x1384>
   14fbc:	b	15d1c <ReadInt16Data+0x20fc>
   14fc0:	sub	r0, r7, #256	; 0x100
   14fc4:	add	r1, r6, #512	; 0x200
   14fc8:	mov	r5, #0
   14fcc:	str	r9, [sp, #136]	; 0x88
   14fd0:	str	r7, [sp]
   14fd4:	str	r0, [sp, #128]	; 0x80
   14fd8:	mov	r0, #0
   14fdc:	str	r0, [sp, #132]	; 0x84
   14fe0:	ldr	r0, [sp, #140]	; 0x8c
   14fe4:	mov	r9, r1
   14fe8:	ldr	r1, [sp, #136]	; 0x88
   14fec:	add	r7, sp, #144	; 0x90
   14ff0:	mov	r2, #256	; 0x100
   14ff4:	mov	r8, r5
   14ff8:	mov	sl, r6
   14ffc:	ldr	r3, [r0]
   15000:	mov	r0, r7
   15004:	bl	18b8 <fread@plt>
   15008:	mov	r4, r0
   1500c:	mov	r5, #0
   15010:	mov	r0, r7
   15014:	add	r6, sl, r5
   15018:	bl	1c04 <Mat_uint32Swap>
   1501c:	add	r5, r5, #2
   15020:	add	r7, r7, #4
   15024:	strh	r0, [r6]
   15028:	cmp	r5, #512	; 0x200
   1502c:	bne	15010 <ReadInt16Data+0x13f0>
   15030:	ldr	r7, [sp, #132]	; 0x84
   15034:	ldr	r2, [sp, #128]	; 0x80
   15038:	mov	r5, r8
   1503c:	add	sl, sl, #512	; 0x200
   15040:	add	r1, r9, #512	; 0x200
   15044:	add	r5, r4, r8
   15048:	mov	r6, sl
   1504c:	add	r0, r7, #256	; 0x100
   15050:	cmp	r0, r2
   15054:	blt	14fdc <ReadInt16Data+0x13bc>
   15058:	ldr	r1, [sp]
   1505c:	cmp	r0, r1
   15060:	bge	15ac0 <ReadInt16Data+0x1ea0>
   15064:	sub	r6, r1, r0
   15068:	ldr	r0, [sp, #140]	; 0x8c
   1506c:	ldr	r1, [sp, #136]	; 0x88
   15070:	add	r4, sp, #144	; 0x90
   15074:	mov	r2, r6
   15078:	ldr	r3, [r0]
   1507c:	mov	r0, r4
   15080:	bl	18b8 <fread@plt>
   15084:	add	r5, r0, r5
   15088:	cmp	r6, #1
   1508c:	blt	15e9c <ReadInt16Data+0x227c>
   15090:	ldr	r0, [sp, #128]	; 0x80
   15094:	mov	r6, r5
   15098:	sub	r5, r0, r7
   1509c:	mov	r0, r4
   150a0:	bl	1c04 <Mat_uint32Swap>
   150a4:	strh	r0, [r9], #2
   150a8:	subs	r5, r5, #1
   150ac:	add	r4, r4, #4
   150b0:	bne	1509c <ReadInt16Data+0x147c>
   150b4:	b	15d1c <ReadInt16Data+0x20fc>
   150b8:	sub	r0, r7, #256	; 0x100
   150bc:	add	r1, r6, #512	; 0x200
   150c0:	mov	r5, #0
   150c4:	str	r9, [sp, #136]	; 0x88
   150c8:	str	r7, [sp]
   150cc:	str	r0, [sp, #128]	; 0x80
   150d0:	mov	r0, #0
   150d4:	mov	sl, r0
   150d8:	ldr	r0, [sp, #140]	; 0x8c
   150dc:	mov	r8, r1
   150e0:	ldr	r1, [sp, #136]	; 0x88
   150e4:	add	r7, sp, #144	; 0x90
   150e8:	mov	r2, #256	; 0x100
   150ec:	mov	r9, r5
   150f0:	ldr	r3, [r0]
   150f4:	mov	r0, r7
   150f8:	bl	18b8 <fread@plt>
   150fc:	mov	r4, r0
   15100:	mov	r5, #0
   15104:	mov	r0, r7
   15108:	bl	1c44 <Mat_floatSwap>
   1510c:	vcvt.s32.f32	s0, s0
   15110:	add	r0, r6, r5
   15114:	add	r5, r5, #2
   15118:	add	r7, r7, #4
   1511c:	vmov	r1, s0
   15120:	cmp	r5, #512	; 0x200
   15124:	strh	r1, [r0]
   15128:	bne	15104 <ReadInt16Data+0x14e4>
   1512c:	ldr	r2, [sp, #128]	; 0x80
   15130:	mov	r5, r9
   15134:	add	r0, sl, #256	; 0x100
   15138:	add	r6, r6, #512	; 0x200
   1513c:	add	r1, r8, #512	; 0x200
   15140:	add	r5, r4, r9
   15144:	cmp	r0, r2
   15148:	blt	150d4 <ReadInt16Data+0x14b4>
   1514c:	ldr	r1, [sp]
   15150:	cmp	r0, r1
   15154:	bge	15ad0 <ReadInt16Data+0x1eb0>
   15158:	sub	r7, r1, r0
   1515c:	ldr	r0, [sp, #140]	; 0x8c
   15160:	ldr	r9, [sp, #136]	; 0x88
   15164:	add	r4, sp, #144	; 0x90
   15168:	mov	r2, r7
   1516c:	ldr	r3, [r0]
   15170:	mov	r0, r4
   15174:	mov	r1, r9
   15178:	bl	18b8 <fread@plt>
   1517c:	add	r5, r0, r5
   15180:	cmp	r7, #1
   15184:	blt	15eb0 <ReadInt16Data+0x2290>
   15188:	ldr	r0, [sp, #128]	; 0x80
   1518c:	mov	r7, r5
   15190:	sub	r5, r0, sl
   15194:	mov	r0, r4
   15198:	bl	1c44 <Mat_floatSwap>
   1519c:	vcvt.s32.f32	s0, s0
   151a0:	subs	r5, r5, #1
   151a4:	add	r4, r4, #4
   151a8:	vmov	r0, s0
   151ac:	strh	r0, [r8], #2
   151b0:	bne	15194 <ReadInt16Data+0x1574>
   151b4:	mov	r5, r7
   151b8:	mul	r0, r5, r9
   151bc:	sub	sp, fp, #28
   151c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151c4:	sub	r0, r7, #256	; 0x100
   151c8:	add	r1, r6, #512	; 0x200
   151cc:	mov	r5, #0
   151d0:	str	r9, [sp, #136]	; 0x88
   151d4:	str	r7, [sp]
   151d8:	str	r0, [sp, #128]	; 0x80
   151dc:	mov	r0, #0
   151e0:	mov	sl, r0
   151e4:	ldr	r0, [sp, #140]	; 0x8c
   151e8:	mov	r8, r1
   151ec:	ldr	r1, [sp, #136]	; 0x88
   151f0:	add	r7, sp, #144	; 0x90
   151f4:	mov	r2, #256	; 0x100
   151f8:	mov	r9, r5
   151fc:	ldr	r3, [r0]
   15200:	mov	r0, r7
   15204:	bl	18b8 <fread@plt>
   15208:	mov	r4, r0
   1520c:	mov	r5, #0
   15210:	mov	r0, r7
   15214:	bl	1c88 <Mat_doubleSwap>
   15218:	vcvt.s32.f64	s0, d0
   1521c:	add	r0, r6, r5
   15220:	add	r5, r5, #2
   15224:	add	r7, r7, #8
   15228:	vmov	r1, s0
   1522c:	cmp	r5, #512	; 0x200
   15230:	strh	r1, [r0]
   15234:	bne	15210 <ReadInt16Data+0x15f0>
   15238:	ldr	r2, [sp, #128]	; 0x80
   1523c:	mov	r5, r9
   15240:	add	r0, sl, #256	; 0x100
   15244:	add	r6, r6, #512	; 0x200
   15248:	add	r1, r8, #512	; 0x200
   1524c:	add	r5, r4, r9
   15250:	cmp	r0, r2
   15254:	blt	151e0 <ReadInt16Data+0x15c0>
   15258:	ldr	r1, [sp]
   1525c:	cmp	r0, r1
   15260:	bge	15940 <ReadInt16Data+0x1d20>
   15264:	sub	r7, r1, r0
   15268:	ldr	r0, [sp, #140]	; 0x8c
   1526c:	ldr	r9, [sp, #136]	; 0x88
   15270:	add	r4, sp, #144	; 0x90
   15274:	mov	r2, r7
   15278:	ldr	r3, [r0]
   1527c:	mov	r0, r4
   15280:	mov	r1, r9
   15284:	bl	18b8 <fread@plt>
   15288:	add	r5, r0, r5
   1528c:	cmp	r7, #1
   15290:	blt	15eb0 <ReadInt16Data+0x2290>
   15294:	ldr	r0, [sp, #128]	; 0x80
   15298:	mov	r7, r5
   1529c:	sub	r5, r0, sl
   152a0:	mov	r0, r4
   152a4:	bl	1c88 <Mat_doubleSwap>
   152a8:	vcvt.s32.f64	s0, d0
   152ac:	subs	r5, r5, #1
   152b0:	add	r4, r4, #8
   152b4:	vmov	r0, s0
   152b8:	strh	r0, [r8], #2
   152bc:	bne	152a0 <ReadInt16Data+0x1680>
   152c0:	mov	r5, r7
   152c4:	mul	r0, r5, r9
   152c8:	sub	sp, fp, #28
   152cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152d0:	sub	r0, r7, #256	; 0x100
   152d4:	str	sl, [sp, #120]	; 0x78
   152d8:	add	r1, r6, #512	; 0x200
   152dc:	mov	r5, r6
   152e0:	mov	sl, #0
   152e4:	str	r7, [sp]
   152e8:	str	r9, [sp, #136]	; 0x88
   152ec:	str	r0, [sp, #124]	; 0x7c
   152f0:	mov	r0, #0
   152f4:	str	r0, [sp, #128]	; 0x80
   152f8:	ldr	r0, [sp, #140]	; 0x8c
   152fc:	add	r4, sp, #144	; 0x90
   15300:	mov	r6, r1
   15304:	mov	r1, r9
   15308:	mov	r2, #256	; 0x100
   1530c:	ldr	r3, [r0]
   15310:	mov	r0, r4
   15314:	bl	18b8 <fread@plt>
   15318:	mov	r8, r0
   1531c:	mov	r7, #0
   15320:	mov	r0, r4
   15324:	add	r9, r5, r7
   15328:	bl	1b84 <Mat_int64Swap>
   1532c:	add	r7, r7, #2
   15330:	add	r4, r4, #8
   15334:	strh	r0, [r9]
   15338:	cmp	r7, #512	; 0x200
   1533c:	bne	15320 <ReadInt16Data+0x1700>
   15340:	add	sl, r8, sl
   15344:	add	r1, r6, #512	; 0x200
   15348:	mov	r8, r6
   1534c:	ldr	r6, [sp, #128]	; 0x80
   15350:	ldr	r2, [sp, #124]	; 0x7c
   15354:	ldr	r9, [sp, #136]	; 0x88
   15358:	add	r5, r5, #512	; 0x200
   1535c:	add	r0, r6, #256	; 0x100
   15360:	cmp	r0, r2
   15364:	blt	152f4 <ReadInt16Data+0x16d4>
   15368:	ldr	r7, [sp]
   1536c:	cmp	r0, r7
   15370:	bge	15ae0 <ReadInt16Data+0x1ec0>
   15374:	sub	r7, r7, r0
   15378:	ldr	r0, [sp, #140]	; 0x8c
   1537c:	add	r4, sp, #144	; 0x90
   15380:	mov	r1, r9
   15384:	mov	r2, r7
   15388:	ldr	r3, [r0]
   1538c:	mov	r0, r4
   15390:	bl	18b8 <fread@plt>
   15394:	mov	r5, sl
   15398:	cmp	r7, #1
   1539c:	add	r5, r0, sl
   153a0:	blt	15b2c <ReadInt16Data+0x1f0c>
   153a4:	ldr	r0, [sp, #124]	; 0x7c
   153a8:	ldr	sl, [sp, #120]	; 0x78
   153ac:	mov	r7, r5
   153b0:	sub	r5, r0, r6
   153b4:	mov	r0, r4
   153b8:	bl	1b84 <Mat_int64Swap>
   153bc:	strh	r0, [r8], #2
   153c0:	subs	r5, r5, #1
   153c4:	add	r4, r4, #8
   153c8:	bne	153b4 <ReadInt16Data+0x1794>
   153cc:	mov	r5, r7
   153d0:	ldr	r6, [sp, #132]	; 0x84
   153d4:	ldr	r7, [sp]
   153d8:	cmp	sl, #13
   153dc:	beq	15b40 <ReadInt16Data+0x1f20>
   153e0:	b	15eb0 <ReadInt16Data+0x2290>
   153e4:	str	r9, [sp, #136]	; 0x88
   153e8:	ldr	r9, [sp, #132]	; 0x84
   153ec:	ldr	sl, [sp, #140]	; 0x8c
   153f0:	sub	r0, r7, #256	; 0x100
   153f4:	lsl	r4, r7, #1
   153f8:	mov	r6, #0
   153fc:	add	r8, sp, #144	; 0x90
   15400:	mov	r5, #0
   15404:	str	r7, [sp]
   15408:	str	r0, [sp, #128]	; 0x80
   1540c:	ldr	r3, [sl]
   15410:	ldr	r1, [sp, #136]	; 0x88
   15414:	mov	r0, r8
   15418:	mov	r2, #256	; 0x100
   1541c:	bl	18b8 <fread@plt>
   15420:	mov	r7, r0
   15424:	add	r0, r9, r6, lsl #1
   15428:	mov	r1, r8
   1542c:	mov	r2, #512	; 0x200
   15430:	bl	181c <memcpy@plt>
   15434:	ldr	r0, [sp, #128]	; 0x80
   15438:	add	r6, r6, #256	; 0x100
   1543c:	add	r5, r7, r5
   15440:	sub	r4, r4, #512	; 0x200
   15444:	cmp	r6, r0
   15448:	blt	1540c <ReadInt16Data+0x17ec>
   1544c:	ldr	r0, [sp]
   15450:	ldr	r9, [sp, #136]	; 0x88
   15454:	cmp	r6, r0
   15458:	bge	15eb0 <ReadInt16Data+0x2290>
   1545c:	sub	r7, r0, r6
   15460:	ldr	r0, [sp, #140]	; 0x8c
   15464:	mov	r1, r9
   15468:	mov	r2, r7
   1546c:	ldr	r3, [r0]
   15470:	add	r0, sp, #144	; 0x90
   15474:	bl	18b8 <fread@plt>
   15478:	add	r5, r0, r5
   1547c:	cmp	r7, #1
   15480:	blt	15eb0 <ReadInt16Data+0x2290>
   15484:	ldr	r0, [sp, #132]	; 0x84
   15488:	add	r1, sp, #144	; 0x90
   1548c:	mov	r2, r4
   15490:	add	r0, r0, r6, lsl #1
   15494:	bl	181c <memcpy@plt>
   15498:	mul	r0, r5, r9
   1549c:	sub	sp, fp, #28
   154a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154a4:	sub	r1, r7, #256	; 0x100
   154a8:	str	r7, [sp]
   154ac:	add	r0, r6, #512	; 0x200
   154b0:	mov	r2, #256	; 0x100
   154b4:	add	r7, sp, #144	; 0x90
   154b8:	mov	r5, r6
   154bc:	mov	r8, #0
   154c0:	str	r1, [sp, #128]	; 0x80
   154c4:	mov	r1, #0
   154c8:	mov	sl, r0
   154cc:	ldr	r0, [sp, #140]	; 0x8c
   154d0:	mov	r6, r1
   154d4:	mov	r4, r2
   154d8:	mov	r1, r9
   154dc:	mov	r2, #256	; 0x100
   154e0:	ldr	r3, [r0]
   154e4:	mov	r0, r7
   154e8:	bl	18b8 <fread@plt>
   154ec:	mov	r1, #0
   154f0:	mov	r2, r7
   154f4:	vld1.32	{d16-d17}, [r2]!
   154f8:	add	r3, r5, r1
   154fc:	add	r1, r1, #8
   15500:	cmp	r1, #512	; 0x200
   15504:	vmovn.i32	d16, q8
   15508:	vst1.16	{d16}, [r3]
   1550c:	bne	154f4 <ReadInt16Data+0x18d4>
   15510:	ldr	r3, [sp, #128]	; 0x80
   15514:	add	r1, r6, #256	; 0x100
   15518:	add	r8, r0, r8
   1551c:	add	r5, r5, #512	; 0x200
   15520:	add	r0, sl, #512	; 0x200
   15524:	add	r2, r4, #256	; 0x100
   15528:	cmp	r1, r3
   1552c:	blt	154c8 <ReadInt16Data+0x18a8>
   15530:	ldr	r0, [sp]
   15534:	cmp	r1, r0
   15538:	bge	15aec <ReadInt16Data+0x1ecc>
   1553c:	sub	r5, r0, r1
   15540:	ldr	r0, [sp, #140]	; 0x8c
   15544:	add	r7, sp, #144	; 0x90
   15548:	mov	r1, r9
   1554c:	mov	r2, r5
   15550:	ldr	r3, [r0]
   15554:	mov	r0, r7
   15558:	bl	18b8 <fread@plt>
   1555c:	mov	r2, r5
   15560:	mov	r5, r8
   15564:	add	r5, r0, r8
   15568:	cmp	r2, #1
   1556c:	blt	15eb0 <ReadInt16Data+0x2290>
   15570:	ldr	r3, [sp, #132]	; 0x84
   15574:	mov	r0, #0
   15578:	cmp	r2, #4
   1557c:	bcc	155ac <ReadInt16Data+0x198c>
   15580:	ldr	r0, [sp, #128]	; 0x80
   15584:	sub	r0, r0, r6
   15588:	bic	r1, r0, #3
   1558c:	bic	r0, r2, #3
   15590:	vld1.32	{d16-d17}, [r7]!
   15594:	subs	r1, r1, #4
   15598:	vmovn.i32	d16, q8
   1559c:	vst1.16	{d16}, [sl]!
   155a0:	bne	15590 <ReadInt16Data+0x1970>
   155a4:	cmp	r2, r0
   155a8:	beq	15eb0 <ReadInt16Data+0x2290>
   155ac:	add	r2, r0, r4
   155b0:	add	r1, sp, #144	; 0x90
   155b4:	add	r2, r3, r2, lsl #1
   155b8:	ldr	r3, [sp, #128]	; 0x80
   155bc:	add	r1, r1, r0, lsl #2
   155c0:	sub	r3, r3, r6
   155c4:	sub	r0, r3, r0
   155c8:	ldr	r3, [r1], #4
   155cc:	subs	r0, r0, #1
   155d0:	strh	r3, [r2], #2
   155d4:	bne	155c8 <ReadInt16Data+0x19a8>
   155d8:	b	15eb0 <ReadInt16Data+0x2290>
   155dc:	sub	r1, r7, #256	; 0x100
   155e0:	str	r7, [sp]
   155e4:	add	r0, r6, #512	; 0x200
   155e8:	mov	r2, #256	; 0x100
   155ec:	add	r7, sp, #144	; 0x90
   155f0:	mov	r5, r6
   155f4:	mov	r8, #0
   155f8:	str	r1, [sp, #128]	; 0x80
   155fc:	mov	r1, #0
   15600:	mov	sl, r0
   15604:	ldr	r0, [sp, #140]	; 0x8c
   15608:	mov	r6, r1
   1560c:	mov	r4, r2
   15610:	mov	r1, r9
   15614:	mov	r2, #256	; 0x100
   15618:	ldr	r3, [r0]
   1561c:	mov	r0, r7
   15620:	bl	18b8 <fread@plt>
   15624:	mov	r1, #0
   15628:	mov	r2, r7
   1562c:	vld1.32	{d16-d17}, [r2]!
   15630:	add	r3, r5, r1
   15634:	add	r1, r1, #8
   15638:	cmp	r1, #512	; 0x200
   1563c:	vmovn.i32	d16, q8
   15640:	vst1.16	{d16}, [r3]
   15644:	bne	1562c <ReadInt16Data+0x1a0c>
   15648:	ldr	r3, [sp, #128]	; 0x80
   1564c:	add	r1, r6, #256	; 0x100
   15650:	add	r8, r0, r8
   15654:	add	r5, r5, #512	; 0x200
   15658:	add	r0, sl, #512	; 0x200
   1565c:	add	r2, r4, #256	; 0x100
   15660:	cmp	r1, r3
   15664:	blt	15600 <ReadInt16Data+0x19e0>
   15668:	ldr	r0, [sp]
   1566c:	cmp	r1, r0
   15670:	bge	15afc <ReadInt16Data+0x1edc>
   15674:	sub	r5, r0, r1
   15678:	ldr	r0, [sp, #140]	; 0x8c
   1567c:	add	r7, sp, #144	; 0x90
   15680:	mov	r1, r9
   15684:	mov	r2, r5
   15688:	ldr	r3, [r0]
   1568c:	mov	r0, r7
   15690:	bl	18b8 <fread@plt>
   15694:	mov	r2, r5
   15698:	mov	r5, r8
   1569c:	add	r5, r0, r8
   156a0:	cmp	r2, #1
   156a4:	blt	15eb0 <ReadInt16Data+0x2290>
   156a8:	ldr	r3, [sp, #132]	; 0x84
   156ac:	mov	r0, #0
   156b0:	cmp	r2, #4
   156b4:	bcc	156e4 <ReadInt16Data+0x1ac4>
   156b8:	ldr	r0, [sp, #128]	; 0x80
   156bc:	sub	r0, r0, r6
   156c0:	bic	r1, r0, #3
   156c4:	bic	r0, r2, #3
   156c8:	vld1.32	{d16-d17}, [r7]!
   156cc:	subs	r1, r1, #4
   156d0:	vmovn.i32	d16, q8
   156d4:	vst1.16	{d16}, [sl]!
   156d8:	bne	156c8 <ReadInt16Data+0x1aa8>
   156dc:	cmp	r2, r0
   156e0:	beq	15eb0 <ReadInt16Data+0x2290>
   156e4:	add	r2, r0, r4
   156e8:	add	r1, sp, #144	; 0x90
   156ec:	add	r2, r3, r2, lsl #1
   156f0:	ldr	r3, [sp, #128]	; 0x80
   156f4:	add	r1, r1, r0, lsl #2
   156f8:	sub	r3, r3, r6
   156fc:	sub	r0, r3, r0
   15700:	ldr	r3, [r1], #4
   15704:	subs	r0, r0, #1
   15708:	strh	r3, [r2], #2
   1570c:	bne	15700 <ReadInt16Data+0x1ae0>
   15710:	b	15eb0 <ReadInt16Data+0x2290>
   15714:	sub	r1, r7, #256	; 0x100
   15718:	str	r7, [sp]
   1571c:	add	r0, r6, #512	; 0x200
   15720:	mov	r2, #256	; 0x100
   15724:	add	r7, sp, #144	; 0x90
   15728:	mov	r5, r6
   1572c:	mov	r8, #0
   15730:	str	r1, [sp, #128]	; 0x80
   15734:	mov	r1, #0
   15738:	mov	sl, r0
   1573c:	ldr	r0, [sp, #140]	; 0x8c
   15740:	mov	r6, r1
   15744:	mov	r4, r2
   15748:	mov	r1, r9
   1574c:	mov	r2, #256	; 0x100
   15750:	ldr	r3, [r0]
   15754:	mov	r0, r7
   15758:	bl	18b8 <fread@plt>
   1575c:	mov	r1, #0
   15760:	mov	r2, r7
   15764:	vld1.32	{d16-d17}, [r2]!
   15768:	add	r3, r5, r1
   1576c:	add	r1, r1, #8
   15770:	cmp	r1, #512	; 0x200
   15774:	vcvt.s32.f32	q8, q8
   15778:	vmovn.i32	d16, q8
   1577c:	vst1.16	{d16}, [r3]
   15780:	bne	15764 <ReadInt16Data+0x1b44>
   15784:	ldr	r3, [sp, #128]	; 0x80
   15788:	add	r1, r6, #256	; 0x100
   1578c:	add	r8, r0, r8
   15790:	add	r5, r5, #512	; 0x200
   15794:	add	r0, sl, #512	; 0x200
   15798:	add	r2, r4, #256	; 0x100
   1579c:	cmp	r1, r3
   157a0:	blt	15738 <ReadInt16Data+0x1b18>
   157a4:	ldr	r0, [sp]
   157a8:	cmp	r1, r0
   157ac:	bge	15b0c <ReadInt16Data+0x1eec>
   157b0:	sub	r5, r0, r1
   157b4:	ldr	r0, [sp, #140]	; 0x8c
   157b8:	add	r7, sp, #144	; 0x90
   157bc:	mov	r1, r9
   157c0:	mov	r2, r5
   157c4:	ldr	r3, [r0]
   157c8:	mov	r0, r7
   157cc:	bl	18b8 <fread@plt>
   157d0:	mov	r2, r5
   157d4:	mov	r5, r8
   157d8:	add	r5, r0, r8
   157dc:	cmp	r2, #1
   157e0:	blt	15eb0 <ReadInt16Data+0x2290>
   157e4:	ldr	r3, [sp, #132]	; 0x84
   157e8:	mov	r0, #0
   157ec:	cmp	r2, #4
   157f0:	bcc	15824 <ReadInt16Data+0x1c04>
   157f4:	ldr	r0, [sp, #128]	; 0x80
   157f8:	sub	r0, r0, r6
   157fc:	bic	r1, r0, #3
   15800:	bic	r0, r2, #3
   15804:	vld1.32	{d16-d17}, [r7]!
   15808:	subs	r1, r1, #4
   1580c:	vcvt.s32.f32	q8, q8
   15810:	vmovn.i32	d16, q8
   15814:	vst1.16	{d16}, [sl]!
   15818:	bne	15804 <ReadInt16Data+0x1be4>
   1581c:	cmp	r2, r0
   15820:	beq	15eb0 <ReadInt16Data+0x2290>
   15824:	add	r2, r0, r4
   15828:	add	r1, sp, #144	; 0x90
   1582c:	add	r2, r3, r2, lsl #1
   15830:	ldr	r3, [sp, #128]	; 0x80
   15834:	add	r1, r1, r0, lsl #2
   15838:	sub	r3, r3, r6
   1583c:	sub	r0, r3, r0
   15840:	vldr	s0, [r1]
   15844:	subs	r0, r0, #1
   15848:	add	r1, r1, #4
   1584c:	vcvt.s32.f32	s0, s0
   15850:	vmov	r3, s0
   15854:	strh	r3, [r2], #2
   15858:	bne	15840 <ReadInt16Data+0x1c20>
   1585c:	b	15eb0 <ReadInt16Data+0x2290>
   15860:	add	r1, r6, #512	; 0x200
   15864:	sub	sl, r7, #256	; 0x100
   15868:	mov	r0, #0
   1586c:	add	r8, sp, #144	; 0x90
   15870:	mov	r5, #0
   15874:	str	r9, [sp, #136]	; 0x88
   15878:	str	r7, [sp]
   1587c:	mov	r9, r0
   15880:	ldr	r0, [sp, #140]	; 0x8c
   15884:	mov	r7, r1
   15888:	ldr	r1, [sp, #136]	; 0x88
   1588c:	mov	r2, #256	; 0x100
   15890:	mov	r4, r5
   15894:	ldr	r3, [r0]
   15898:	mov	r0, r8
   1589c:	bl	18b8 <fread@plt>
   158a0:	mov	r1, #0
   158a4:	mov	r2, r8
   158a8:	vldr	d16, [r2]
   158ac:	add	r3, r6, r1
   158b0:	add	r1, r1, #2
   158b4:	add	r2, r2, #8
   158b8:	cmp	r1, #512	; 0x200
   158bc:	vcvt.s32.f64	s0, d16
   158c0:	vmov	r5, s0
   158c4:	strh	r5, [r3]
   158c8:	bne	158a8 <ReadInt16Data+0x1c88>
   158cc:	mov	r5, r4
   158d0:	add	r6, r6, #512	; 0x200
   158d4:	add	r1, r7, #512	; 0x200
   158d8:	add	r5, r0, r4
   158dc:	add	r0, r9, #256	; 0x100
   158e0:	cmp	r0, sl
   158e4:	blt	1587c <ReadInt16Data+0x1c5c>
   158e8:	ldr	r1, [sp]
   158ec:	cmp	r0, r1
   158f0:	bge	15940 <ReadInt16Data+0x1d20>
   158f4:	sub	r8, r1, r0
   158f8:	ldr	r0, [sp, #140]	; 0x8c
   158fc:	ldr	r1, [sp, #136]	; 0x88
   15900:	add	r4, sp, #144	; 0x90
   15904:	mov	r2, r8
   15908:	ldr	r3, [r0]
   1590c:	mov	r0, r4
   15910:	bl	18b8 <fread@plt>
   15914:	add	r5, r0, r5
   15918:	cmp	r8, #1
   1591c:	blt	15940 <ReadInt16Data+0x1d20>
   15920:	sub	r0, sl, r9
   15924:	vldr	d16, [r4]
   15928:	subs	r0, r0, #1
   1592c:	add	r4, r4, #8
   15930:	vcvt.s32.f64	s0, d16
   15934:	vmov	r1, s0
   15938:	strh	r1, [r7], #2
   1593c:	bne	15924 <ReadInt16Data+0x1d04>
   15940:	ldr	r9, [sp, #136]	; 0x88
   15944:	mul	r0, r5, r9
   15948:	sub	sp, fp, #28
   1594c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15950:	str	r9, [sp, #136]	; 0x88
   15954:	add	r0, r6, #512	; 0x200
   15958:	mov	r9, r6
   1595c:	ldr	r6, [sp, #140]	; 0x8c
   15960:	sub	r1, r7, #256	; 0x100
   15964:	str	sl, [sp, #120]	; 0x78
   15968:	mov	r2, #256	; 0x100
   1596c:	add	sl, sp, #144	; 0x90
   15970:	mov	r5, #0
   15974:	str	r7, [sp]
   15978:	str	r1, [sp, #128]	; 0x80
   1597c:	mov	r1, #0
   15980:	mov	r7, r1
   15984:	ldr	r3, [r6]
   15988:	ldr	r1, [sp, #136]	; 0x88
   1598c:	mov	r8, r2
   15990:	mov	r4, r0
   15994:	mov	r0, sl
   15998:	mov	r2, #256	; 0x100
   1599c:	bl	18b8 <fread@plt>
   159a0:	mov	r1, #0
   159a4:	mov	r2, sl
   159a8:	vld1.64	{d16-d17}, [r2]!
   159ac:	add	r3, r9, r1
   159b0:	add	r1, r1, #4
   159b4:	cmp	r1, #512	; 0x200
   159b8:	vmovn.i64	d16, q8
   159bc:	vuzp.16	d16, d17
   159c0:	vst1.32	{d16[0]}, [r3]
   159c4:	bne	159a8 <ReadInt16Data+0x1d88>
   159c8:	ldr	r3, [sp, #128]	; 0x80
   159cc:	add	r1, r7, #256	; 0x100
   159d0:	add	r5, r0, r5
   159d4:	add	r9, r9, #512	; 0x200
   159d8:	add	r0, r4, #512	; 0x200
   159dc:	add	r2, r8, #256	; 0x100
   159e0:	cmp	r1, r3
   159e4:	blt	15980 <ReadInt16Data+0x1d60>
   159e8:	ldr	r0, [sp]
   159ec:	cmp	r1, r0
   159f0:	bge	15b1c <ReadInt16Data+0x1efc>
   159f4:	ldr	r9, [sp, #136]	; 0x88
   159f8:	ldr	r3, [r6]
   159fc:	add	sl, sp, #144	; 0x90
   15a00:	sub	r2, r0, r1
   15a04:	mov	r0, sl
   15a08:	mov	r6, r2
   15a0c:	mov	r1, r9
   15a10:	bl	18b8 <fread@plt>
   15a14:	add	r5, r0, r5
   15a18:	cmp	r6, #1
   15a1c:	blt	15b2c <ReadInt16Data+0x1f0c>
   15a20:	mov	r2, r6
   15a24:	ldr	r6, [sp, #132]	; 0x84
   15a28:	mov	r0, #0
   15a2c:	beq	15a60 <ReadInt16Data+0x1e40>
   15a30:	ldr	r0, [sp, #128]	; 0x80
   15a34:	sub	r0, r0, r7
   15a38:	bic	r1, r0, #1
   15a3c:	bic	r0, r2, #1
   15a40:	vld1.64	{d16-d17}, [sl]!
   15a44:	subs	r1, r1, #2
   15a48:	vmovn.i64	d16, q8
   15a4c:	vuzp.16	d16, d17
   15a50:	vst1.32	{d16[0]}, [r4]!
   15a54:	bne	15a40 <ReadInt16Data+0x1e20>
   15a58:	cmp	r2, r0
   15a5c:	beq	15b30 <ReadInt16Data+0x1f10>
   15a60:	ldr	r3, [sp, #128]	; 0x80
   15a64:	add	r1, sp, #144	; 0x90
   15a68:	add	r2, r0, r8
   15a6c:	add	r1, r1, r0, lsl #3
   15a70:	add	r2, r6, r2, lsl #1
   15a74:	sub	r3, r3, r7
   15a78:	sub	r0, r3, r0
   15a7c:	ldrh	r3, [r1], #8
   15a80:	subs	r0, r0, #1
   15a84:	strh	r3, [r2], #2
   15a88:	bne	15a7c <ReadInt16Data+0x1e5c>
   15a8c:	b	15b30 <ReadInt16Data+0x1f10>
   15a90:	ldr	r9, [sp, #136]	; 0x88
   15a94:	mul	r0, r5, r9
   15a98:	sub	sp, fp, #28
   15a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15aa0:	ldr	r9, [sp, #136]	; 0x88
   15aa4:	mul	r0, r5, r9
   15aa8:	sub	sp, fp, #28
   15aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ab0:	ldr	r9, [sp, #136]	; 0x88
   15ab4:	mul	r0, r5, r9
   15ab8:	sub	sp, fp, #28
   15abc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ac0:	ldr	r9, [sp, #136]	; 0x88
   15ac4:	mul	r0, r5, r9
   15ac8:	sub	sp, fp, #28
   15acc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ad0:	ldr	r9, [sp, #136]	; 0x88
   15ad4:	mul	r0, r5, r9
   15ad8:	sub	sp, fp, #28
   15adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ae0:	ldr	r6, [sp, #132]	; 0x84
   15ae4:	mov	r5, sl
   15ae8:	b	15b34 <ReadInt16Data+0x1f14>
   15aec:	mov	r5, r8
   15af0:	mul	r0, r5, r9
   15af4:	sub	sp, fp, #28
   15af8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15afc:	mov	r5, r8
   15b00:	mul	r0, r5, r9
   15b04:	sub	sp, fp, #28
   15b08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b0c:	mov	r5, r8
   15b10:	mul	r0, r5, r9
   15b14:	sub	sp, fp, #28
   15b18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b1c:	ldr	r9, [sp, #136]	; 0x88
   15b20:	ldr	r6, [sp, #132]	; 0x84
   15b24:	mov	r7, r0
   15b28:	b	15b34 <ReadInt16Data+0x1f14>
   15b2c:	ldr	r6, [sp, #132]	; 0x84
   15b30:	ldr	r7, [sp]
   15b34:	ldr	sl, [sp, #120]	; 0x78
   15b38:	cmp	sl, #13
   15b3c:	bne	15eb0 <ReadInt16Data+0x2290>
   15b40:	ldr	r0, [sp, #140]	; 0x8c
   15b44:	ldr	r0, [r0, #20]
   15b48:	cmp	r0, #0
   15b4c:	beq	15ba0 <ReadInt16Data+0x1f80>
   15b50:	cmp	r7, #256	; 0x100
   15b54:	bgt	15c2c <ReadInt16Data+0x200c>
   15b58:	ldr	r0, [sp, #140]	; 0x8c
   15b5c:	add	r4, sp, #144	; 0x90
   15b60:	mov	r1, r9
   15b64:	mov	r2, r7
   15b68:	ldr	r3, [r0]
   15b6c:	mov	r0, r4
   15b70:	bl	18b8 <fread@plt>
   15b74:	add	r5, r0, r5
   15b78:	cmp	r7, #1
   15b7c:	blt	15eb0 <ReadInt16Data+0x2290>
   15b80:	ldr	r6, [sp, #132]	; 0x84
   15b84:	mov	r0, r4
   15b88:	bl	1bd4 <Mat_uint64Swap>
   15b8c:	strh	r0, [r6], #2
   15b90:	subs	r7, r7, #1
   15b94:	add	r4, r4, #8
   15b98:	bne	15b84 <ReadInt16Data+0x1f64>
   15b9c:	b	15eb0 <ReadInt16Data+0x2290>
   15ba0:	cmp	r7, #256	; 0x100
   15ba4:	bgt	15d30 <ReadInt16Data+0x2110>
   15ba8:	ldr	r0, [sp, #140]	; 0x8c
   15bac:	add	r4, sp, #144	; 0x90
   15bb0:	mov	r1, r9
   15bb4:	mov	r2, r7
   15bb8:	ldr	r3, [r0]
   15bbc:	mov	r0, r4
   15bc0:	bl	18b8 <fread@plt>
   15bc4:	add	r5, r0, r5
   15bc8:	cmp	r7, #1
   15bcc:	blt	15eb0 <ReadInt16Data+0x2290>
   15bd0:	ldr	r3, [sp, #132]	; 0x84
   15bd4:	mov	r0, #0
   15bd8:	beq	15c08 <ReadInt16Data+0x1fe8>
   15bdc:	bic	r0, r7, #1
   15be0:	mov	r2, r3
   15be4:	mov	r1, r0
   15be8:	vld1.64	{d16-d17}, [r4]!
   15bec:	subs	r1, r1, #2
   15bf0:	vmovn.i64	d16, q8
   15bf4:	vuzp.16	d16, d17
   15bf8:	vst1.32	{d16[0]}, [r2]!
   15bfc:	bne	15be8 <ReadInt16Data+0x1fc8>
   15c00:	cmp	r0, r7
   15c04:	beq	15eb0 <ReadInt16Data+0x2290>
   15c08:	add	r2, r3, r0, lsl #1
   15c0c:	add	r3, sp, #144	; 0x90
   15c10:	sub	r1, r7, r0
   15c14:	add	r0, r3, r0, lsl #3
   15c18:	ldrh	r3, [r0], #8
   15c1c:	subs	r1, r1, #1
   15c20:	strh	r3, [r2], #2
   15c24:	bne	15c18 <ReadInt16Data+0x1ff8>
   15c28:	b	15eb0 <ReadInt16Data+0x2290>
   15c2c:	sub	r0, r7, #256	; 0x100
   15c30:	add	r1, r6, #512	; 0x200
   15c34:	str	r9, [sp, #136]	; 0x88
   15c38:	str	r7, [sp]
   15c3c:	str	r0, [sp, #128]	; 0x80
   15c40:	mov	r0, #0
   15c44:	str	r0, [sp, #132]	; 0x84
   15c48:	ldr	r0, [sp, #140]	; 0x8c
   15c4c:	mov	r9, r1
   15c50:	ldr	r1, [sp, #136]	; 0x88
   15c54:	add	r7, sp, #144	; 0x90
   15c58:	mov	r2, #256	; 0x100
   15c5c:	mov	r8, r5
   15c60:	mov	sl, r6
   15c64:	ldr	r3, [r0]
   15c68:	mov	r0, r7
   15c6c:	bl	18b8 <fread@plt>
   15c70:	mov	r4, r0
   15c74:	mov	r5, #0
   15c78:	mov	r0, r7
   15c7c:	add	r6, sl, r5
   15c80:	bl	1bd4 <Mat_uint64Swap>
   15c84:	add	r5, r5, #2
   15c88:	add	r7, r7, #8
   15c8c:	strh	r0, [r6]
   15c90:	cmp	r5, #512	; 0x200
   15c94:	bne	15c78 <ReadInt16Data+0x2058>
   15c98:	ldr	r7, [sp, #132]	; 0x84
   15c9c:	ldr	r2, [sp, #128]	; 0x80
   15ca0:	mov	r5, r8
   15ca4:	add	sl, sl, #512	; 0x200
   15ca8:	add	r1, r9, #512	; 0x200
   15cac:	add	r5, r4, r8
   15cb0:	mov	r6, sl
   15cb4:	add	r0, r7, #256	; 0x100
   15cb8:	cmp	r0, r2
   15cbc:	blt	15c44 <ReadInt16Data+0x2024>
   15cc0:	ldr	r1, [sp]
   15cc4:	cmp	r0, r1
   15cc8:	bge	15e6c <ReadInt16Data+0x224c>
   15ccc:	sub	r6, r1, r0
   15cd0:	ldr	r0, [sp, #140]	; 0x8c
   15cd4:	ldr	r1, [sp, #136]	; 0x88
   15cd8:	add	r4, sp, #144	; 0x90
   15cdc:	mov	r2, r6
   15ce0:	ldr	r3, [r0]
   15ce4:	mov	r0, r4
   15ce8:	bl	18b8 <fread@plt>
   15cec:	add	r5, r0, r5
   15cf0:	cmp	r6, #1
   15cf4:	blt	15eac <ReadInt16Data+0x228c>
   15cf8:	ldr	r0, [sp, #128]	; 0x80
   15cfc:	mov	r6, r5
   15d00:	sub	r5, r0, r7
   15d04:	mov	r0, r4
   15d08:	bl	1bd4 <Mat_uint64Swap>
   15d0c:	strh	r0, [r9], #2
   15d10:	subs	r5, r5, #1
   15d14:	add	r4, r4, #8
   15d18:	bne	15d04 <ReadInt16Data+0x20e4>
   15d1c:	ldr	r9, [sp, #136]	; 0x88
   15d20:	mov	r5, r6
   15d24:	mul	r0, r5, r9
   15d28:	sub	sp, fp, #28
   15d2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d30:	sub	r1, r7, #256	; 0x100
   15d34:	mov	r8, r5
   15d38:	str	r7, [sp]
   15d3c:	add	r0, r6, #512	; 0x200
   15d40:	mov	r2, #256	; 0x100
   15d44:	add	r7, sp, #144	; 0x90
   15d48:	mov	r5, r6
   15d4c:	str	r1, [sp, #128]	; 0x80
   15d50:	mov	r1, #0
   15d54:	mov	sl, r0
   15d58:	ldr	r0, [sp, #140]	; 0x8c
   15d5c:	mov	r6, r1
   15d60:	mov	r4, r2
   15d64:	mov	r1, r9
   15d68:	mov	r2, #256	; 0x100
   15d6c:	ldr	r3, [r0]
   15d70:	mov	r0, r7
   15d74:	bl	18b8 <fread@plt>
   15d78:	mov	r1, #0
   15d7c:	mov	r2, r7
   15d80:	vld1.64	{d16-d17}, [r2]!
   15d84:	add	r3, r5, r1
   15d88:	add	r1, r1, #4
   15d8c:	cmp	r1, #512	; 0x200
   15d90:	vmovn.i64	d16, q8
   15d94:	vuzp.16	d16, d17
   15d98:	vst1.32	{d16[0]}, [r3]
   15d9c:	bne	15d80 <ReadInt16Data+0x2160>
   15da0:	ldr	r3, [sp, #128]	; 0x80
   15da4:	add	r1, r6, #256	; 0x100
   15da8:	add	r8, r0, r8
   15dac:	add	r5, r5, #512	; 0x200
   15db0:	add	r0, sl, #512	; 0x200
   15db4:	add	r2, r4, #256	; 0x100
   15db8:	cmp	r1, r3
   15dbc:	blt	15d54 <ReadInt16Data+0x2134>
   15dc0:	ldr	r0, [sp]
   15dc4:	cmp	r1, r0
   15dc8:	bge	15e7c <ReadInt16Data+0x225c>
   15dcc:	sub	r5, r0, r1
   15dd0:	ldr	r0, [sp, #140]	; 0x8c
   15dd4:	add	r7, sp, #144	; 0x90
   15dd8:	mov	r1, r9
   15ddc:	mov	r2, r5
   15de0:	ldr	r3, [r0]
   15de4:	mov	r0, r7
   15de8:	bl	18b8 <fread@plt>
   15dec:	mov	r2, r5
   15df0:	mov	r5, r8
   15df4:	add	r5, r0, r8
   15df8:	cmp	r2, #1
   15dfc:	blt	15eb0 <ReadInt16Data+0x2290>
   15e00:	ldr	r3, [sp, #132]	; 0x84
   15e04:	mov	r0, #0
   15e08:	beq	15e3c <ReadInt16Data+0x221c>
   15e0c:	ldr	r0, [sp, #128]	; 0x80
   15e10:	sub	r0, r0, r6
   15e14:	bic	r1, r0, #1
   15e18:	bic	r0, r2, #1
   15e1c:	vld1.64	{d16-d17}, [r7]!
   15e20:	subs	r1, r1, #2
   15e24:	vmovn.i64	d16, q8
   15e28:	vuzp.16	d16, d17
   15e2c:	vst1.32	{d16[0]}, [sl]!
   15e30:	bne	15e1c <ReadInt16Data+0x21fc>
   15e34:	cmp	r2, r0
   15e38:	beq	15eb0 <ReadInt16Data+0x2290>
   15e3c:	add	r2, r0, r4
   15e40:	add	r1, sp, #144	; 0x90
   15e44:	add	r2, r3, r2, lsl #1
   15e48:	ldr	r3, [sp, #128]	; 0x80
   15e4c:	add	r1, r1, r0, lsl #3
   15e50:	sub	r3, r3, r6
   15e54:	sub	r0, r3, r0
   15e58:	ldrh	r3, [r1], #8
   15e5c:	subs	r0, r0, #1
   15e60:	strh	r3, [r2], #2
   15e64:	bne	15e58 <ReadInt16Data+0x2238>
   15e68:	b	15eb0 <ReadInt16Data+0x2290>
   15e6c:	ldr	r9, [sp, #136]	; 0x88
   15e70:	mul	r0, r5, r9
   15e74:	sub	sp, fp, #28
   15e78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e7c:	mov	r5, r8
   15e80:	mul	r0, r5, r9
   15e84:	sub	sp, fp, #28
   15e88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e8c:	ldr	r9, [sp, #136]	; 0x88
   15e90:	mul	r0, r5, r9
   15e94:	sub	sp, fp, #28
   15e98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e9c:	ldr	r9, [sp, #136]	; 0x88
   15ea0:	mul	r0, r5, r9
   15ea4:	sub	sp, fp, #28
   15ea8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15eac:	ldr	r9, [sp, #136]	; 0x88
   15eb0:	mul	r0, r5, r9
   15eb4:	sub	sp, fp, #28
   15eb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015ebc <ReadCompressedInt16Data>:
   15ebc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ec0:	add	fp, sp, #28
   15ec4:	sub	sp, sp, #12
   15ec8:	mov	r7, r0
   15ecc:	mov	r0, #0
   15ed0:	cmp	r1, #0
   15ed4:	beq	15ee8 <ReadCompressedInt16Data+0x2c>
   15ed8:	cmp	r7, #0
   15edc:	movne	r5, r2
   15ee0:	cmpne	r2, #0
   15ee4:	bne	15ef0 <ReadCompressedInt16Data+0x34>
   15ee8:	sub	sp, fp, #28
   15eec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ef0:	ldr	sl, [fp, #8]
   15ef4:	mov	r0, r3
   15ef8:	mov	r4, r3
   15efc:	mov	r6, r1
   15f00:	bl	1924 <Mat_SizeOf@plt>
   15f04:	mov	r9, r0
   15f08:	sub	r0, r4, #1
   15f0c:	cmp	r0, #12
   15f10:	bhi	163e0 <ReadCompressedInt16Data+0x524>
   15f14:	add	r1, pc, #4
   15f18:	ldr	r0, [r1, r0, lsl #2]
   15f1c:	add	pc, r1, r0
   15f20:	.word	0x00000034
   15f24:	.word	0x0000006c
   15f28:	.word	0x000000a4
   15f2c:	.word	0x000000ec
   15f30:	.word	0x00000134
   15f34:	.word	0x0000017c
   15f38:	.word	0x000001c4
   15f3c:	.word	0x000004c0
   15f40:	.word	0x00000214
   15f44:	.word	0x000004c0
   15f48:	.word	0x000004c0
   15f4c:	.word	0x00000264
   15f50:	.word	0x000002ac
   15f54:	cmp	sl, #1
   15f58:	blt	163e0 <ReadCompressedInt16Data+0x524>
   15f5c:	mov	r8, sp
   15f60:	mov	r4, sl
   15f64:	mov	r0, r7
   15f68:	mov	r1, r6
   15f6c:	mov	r2, r8
   15f70:	mov	r3, r9
   15f74:	bl	32fc <InflateData>
   15f78:	ldrsb	r0, [sp]
   15f7c:	subs	r4, r4, #1
   15f80:	strh	r0, [r5], #2
   15f84:	bne	15f64 <ReadCompressedInt16Data+0xa8>
   15f88:	b	163e0 <ReadCompressedInt16Data+0x524>
   15f8c:	cmp	sl, #1
   15f90:	blt	163e0 <ReadCompressedInt16Data+0x524>
   15f94:	mov	r8, sp
   15f98:	mov	r4, sl
   15f9c:	mov	r0, r7
   15fa0:	mov	r1, r6
   15fa4:	mov	r2, r8
   15fa8:	mov	r3, r9
   15fac:	bl	32fc <InflateData>
   15fb0:	ldrb	r0, [sp]
   15fb4:	subs	r4, r4, #1
   15fb8:	strh	r0, [r5], #2
   15fbc:	bne	15f9c <ReadCompressedInt16Data+0xe0>
   15fc0:	b	163e0 <ReadCompressedInt16Data+0x524>
   15fc4:	ldr	r0, [r7, #20]
   15fc8:	cmp	r0, #0
   15fcc:	beq	16214 <ReadCompressedInt16Data+0x358>
   15fd0:	cmp	sl, #1
   15fd4:	blt	163e0 <ReadCompressedInt16Data+0x524>
   15fd8:	mov	r8, sp
   15fdc:	mov	r4, sl
   15fe0:	mov	r0, r7
   15fe4:	mov	r1, r6
   15fe8:	mov	r2, r8
   15fec:	mov	r3, r9
   15ff0:	bl	32fc <InflateData>
   15ff4:	mov	r0, r8
   15ff8:	bl	1c18 <Mat_int16Swap>
   15ffc:	strh	r0, [r5], #2
   16000:	subs	r4, r4, #1
   16004:	bne	15fe0 <ReadCompressedInt16Data+0x124>
   16008:	b	163e0 <ReadCompressedInt16Data+0x524>
   1600c:	ldr	r0, [r7, #20]
   16010:	cmp	r0, #0
   16014:	beq	1624c <ReadCompressedInt16Data+0x390>
   16018:	cmp	sl, #1
   1601c:	blt	163e0 <ReadCompressedInt16Data+0x524>
   16020:	mov	r8, sp
   16024:	mov	r4, sl
   16028:	mov	r0, r7
   1602c:	mov	r1, r6
   16030:	mov	r2, r8
   16034:	mov	r3, r9
   16038:	bl	32fc <InflateData>
   1603c:	mov	r0, r8
   16040:	bl	1c2c <Mat_uint16Swap>
   16044:	strh	r0, [r5], #2
   16048:	subs	r4, r4, #1
   1604c:	bne	16028 <ReadCompressedInt16Data+0x16c>
   16050:	b	163e0 <ReadCompressedInt16Data+0x524>
   16054:	ldr	r0, [r7, #20]
   16058:	cmp	r0, #0
   1605c:	beq	16284 <ReadCompressedInt16Data+0x3c8>
   16060:	cmp	sl, #1
   16064:	blt	163e0 <ReadCompressedInt16Data+0x524>
   16068:	mov	r8, sp
   1606c:	mov	r4, sl
   16070:	mov	r0, r7
   16074:	mov	r1, r6
   16078:	mov	r2, r8
   1607c:	mov	r3, r9
   16080:	bl	32fc <InflateData>
   16084:	mov	r0, r8
   16088:	bl	1bf0 <Mat_int32Swap>
   1608c:	strh	r0, [r5], #2
   16090:	subs	r4, r4, #1
   16094:	bne	16070 <ReadCompressedInt16Data+0x1b4>
   16098:	b	163e0 <ReadCompressedInt16Data+0x524>
   1609c:	ldr	r0, [r7, #20]
   160a0:	cmp	r0, #0
   160a4:	beq	162bc <ReadCompressedInt16Data+0x400>
   160a8:	cmp	sl, #1
   160ac:	blt	163e0 <ReadCompressedInt16Data+0x524>
   160b0:	mov	r8, sp
   160b4:	mov	r4, sl
   160b8:	mov	r0, r7
   160bc:	mov	r1, r6
   160c0:	mov	r2, r8
   160c4:	mov	r3, r9
   160c8:	bl	32fc <InflateData>
   160cc:	mov	r0, r8
   160d0:	bl	1c04 <Mat_uint32Swap>
   160d4:	strh	r0, [r5], #2
   160d8:	subs	r4, r4, #1
   160dc:	bne	160b8 <ReadCompressedInt16Data+0x1fc>
   160e0:	b	163e0 <ReadCompressedInt16Data+0x524>
   160e4:	ldr	r0, [r7, #20]
   160e8:	cmp	r0, #0
   160ec:	beq	162f4 <ReadCompressedInt16Data+0x438>
   160f0:	cmp	sl, #1
   160f4:	blt	163e0 <ReadCompressedInt16Data+0x524>
   160f8:	mov	r8, sp
   160fc:	mov	r4, sl
   16100:	mov	r0, r7
   16104:	mov	r1, r6
   16108:	mov	r2, r8
   1610c:	mov	r3, r9
   16110:	bl	32fc <InflateData>
   16114:	mov	r0, r8
   16118:	bl	1c44 <Mat_floatSwap>
   1611c:	vcvt.s32.f32	s0, s0
   16120:	subs	r4, r4, #1
   16124:	vmov	r0, s0
   16128:	strh	r0, [r5], #2
   1612c:	bne	16100 <ReadCompressedInt16Data+0x244>
   16130:	b	163e0 <ReadCompressedInt16Data+0x524>
   16134:	ldr	r0, [r7, #20]
   16138:	cmp	r0, #0
   1613c:	beq	16334 <ReadCompressedInt16Data+0x478>
   16140:	cmp	sl, #1
   16144:	blt	163e0 <ReadCompressedInt16Data+0x524>
   16148:	mov	r8, sp
   1614c:	mov	r4, sl
   16150:	mov	r0, r7
   16154:	mov	r1, r6
   16158:	mov	r2, r8
   1615c:	mov	r3, r9
   16160:	bl	32fc <InflateData>
   16164:	mov	r0, r8
   16168:	bl	1c88 <Mat_doubleSwap>
   1616c:	vcvt.s32.f64	s0, d0
   16170:	subs	r4, r4, #1
   16174:	vmov	r0, s0
   16178:	strh	r0, [r5], #2
   1617c:	bne	16150 <ReadCompressedInt16Data+0x294>
   16180:	b	163e0 <ReadCompressedInt16Data+0x524>
   16184:	ldr	r0, [r7, #20]
   16188:	cmp	r0, #0
   1618c:	beq	16374 <ReadCompressedInt16Data+0x4b8>
   16190:	cmp	sl, #1
   16194:	blt	163e0 <ReadCompressedInt16Data+0x524>
   16198:	mov	r8, sp
   1619c:	mov	r4, sl
   161a0:	mov	r0, r7
   161a4:	mov	r1, r6
   161a8:	mov	r2, r8
   161ac:	mov	r3, r9
   161b0:	bl	32fc <InflateData>
   161b4:	mov	r0, r8
   161b8:	bl	1b84 <Mat_int64Swap>
   161bc:	strh	r0, [r5], #2
   161c0:	subs	r4, r4, #1
   161c4:	bne	161a0 <ReadCompressedInt16Data+0x2e4>
   161c8:	b	163e0 <ReadCompressedInt16Data+0x524>
   161cc:	ldr	r0, [r7, #20]
   161d0:	cmp	r0, #0
   161d4:	beq	163ac <ReadCompressedInt16Data+0x4f0>
   161d8:	cmp	sl, #1
   161dc:	blt	163e0 <ReadCompressedInt16Data+0x524>
   161e0:	mov	r8, sp
   161e4:	mov	r4, sl
   161e8:	mov	r0, r7
   161ec:	mov	r1, r6
   161f0:	mov	r2, r8
   161f4:	mov	r3, r9
   161f8:	bl	32fc <InflateData>
   161fc:	mov	r0, r8
   16200:	bl	1bd4 <Mat_uint64Swap>
   16204:	strh	r0, [r5], #2
   16208:	subs	r4, r4, #1
   1620c:	bne	161e8 <ReadCompressedInt16Data+0x32c>
   16210:	b	163e0 <ReadCompressedInt16Data+0x524>
   16214:	cmp	sl, #1
   16218:	blt	163e0 <ReadCompressedInt16Data+0x524>
   1621c:	mov	r8, sp
   16220:	mov	r4, sl
   16224:	mov	r0, r7
   16228:	mov	r1, r6
   1622c:	mov	r2, r8
   16230:	mov	r3, r9
   16234:	bl	32fc <InflateData>
   16238:	ldrh	r0, [sp]
   1623c:	subs	r4, r4, #1
   16240:	strh	r0, [r5], #2
   16244:	bne	16224 <ReadCompressedInt16Data+0x368>
   16248:	b	163e0 <ReadCompressedInt16Data+0x524>
   1624c:	cmp	sl, #1
   16250:	blt	163e0 <ReadCompressedInt16Data+0x524>
   16254:	mov	r8, sp
   16258:	mov	r4, sl
   1625c:	mov	r0, r7
   16260:	mov	r1, r6
   16264:	mov	r2, r8
   16268:	mov	r3, r9
   1626c:	bl	32fc <InflateData>
   16270:	ldrh	r0, [sp]
   16274:	subs	r4, r4, #1
   16278:	strh	r0, [r5], #2
   1627c:	bne	1625c <ReadCompressedInt16Data+0x3a0>
   16280:	b	163e0 <ReadCompressedInt16Data+0x524>
   16284:	cmp	sl, #1
   16288:	blt	163e0 <ReadCompressedInt16Data+0x524>
   1628c:	mov	r8, sp
   16290:	mov	r4, sl
   16294:	mov	r0, r7
   16298:	mov	r1, r6
   1629c:	mov	r2, r8
   162a0:	mov	r3, r9
   162a4:	bl	32fc <InflateData>
   162a8:	ldr	r0, [sp]
   162ac:	subs	r4, r4, #1
   162b0:	strh	r0, [r5], #2
   162b4:	bne	16294 <ReadCompressedInt16Data+0x3d8>
   162b8:	b	163e0 <ReadCompressedInt16Data+0x524>
   162bc:	cmp	sl, #1
   162c0:	blt	163e0 <ReadCompressedInt16Data+0x524>
   162c4:	mov	r8, sp
   162c8:	mov	r4, sl
   162cc:	mov	r0, r7
   162d0:	mov	r1, r6
   162d4:	mov	r2, r8
   162d8:	mov	r3, r9
   162dc:	bl	32fc <InflateData>
   162e0:	ldr	r0, [sp]
   162e4:	subs	r4, r4, #1
   162e8:	strh	r0, [r5], #2
   162ec:	bne	162cc <ReadCompressedInt16Data+0x410>
   162f0:	b	163e0 <ReadCompressedInt16Data+0x524>
   162f4:	cmp	sl, #1
   162f8:	blt	163e0 <ReadCompressedInt16Data+0x524>
   162fc:	mov	r8, sp
   16300:	mov	r4, sl
   16304:	mov	r0, r7
   16308:	mov	r1, r6
   1630c:	mov	r2, r8
   16310:	mov	r3, r9
   16314:	bl	32fc <InflateData>
   16318:	vldr	s0, [sp]
   1631c:	subs	r4, r4, #1
   16320:	vcvt.s32.f32	s0, s0
   16324:	vmov	r0, s0
   16328:	strh	r0, [r5], #2
   1632c:	bne	16304 <ReadCompressedInt16Data+0x448>
   16330:	b	163e0 <ReadCompressedInt16Data+0x524>
   16334:	cmp	sl, #1
   16338:	blt	163e0 <ReadCompressedInt16Data+0x524>
   1633c:	mov	r8, sp
   16340:	mov	r4, sl
   16344:	mov	r0, r7
   16348:	mov	r1, r6
   1634c:	mov	r2, r8
   16350:	mov	r3, r9
   16354:	bl	32fc <InflateData>
   16358:	vldr	d16, [sp]
   1635c:	subs	r4, r4, #1
   16360:	vcvt.s32.f64	s0, d16
   16364:	vmov	r0, s0
   16368:	strh	r0, [r5], #2
   1636c:	bne	16344 <ReadCompressedInt16Data+0x488>
   16370:	b	163e0 <ReadCompressedInt16Data+0x524>
   16374:	cmp	sl, #1
   16378:	blt	163e0 <ReadCompressedInt16Data+0x524>
   1637c:	mov	r8, sp
   16380:	mov	r4, sl
   16384:	mov	r0, r7
   16388:	mov	r1, r6
   1638c:	mov	r2, r8
   16390:	mov	r3, r9
   16394:	bl	32fc <InflateData>
   16398:	ldrh	r0, [sp]
   1639c:	subs	r4, r4, #1
   163a0:	strh	r0, [r5], #2
   163a4:	bne	16384 <ReadCompressedInt16Data+0x4c8>
   163a8:	b	163e0 <ReadCompressedInt16Data+0x524>
   163ac:	cmp	sl, #1
   163b0:	blt	163e0 <ReadCompressedInt16Data+0x524>
   163b4:	mov	r8, sp
   163b8:	mov	r4, sl
   163bc:	mov	r0, r7
   163c0:	mov	r1, r6
   163c4:	mov	r2, r8
   163c8:	mov	r3, r9
   163cc:	bl	32fc <InflateData>
   163d0:	ldrh	r0, [sp]
   163d4:	subs	r4, r4, #1
   163d8:	strh	r0, [r5], #2
   163dc:	bne	163bc <ReadCompressedInt16Data+0x500>
   163e0:	mul	r0, r9, sl
   163e4:	sub	sp, fp, #28
   163e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000163ec <ReadUInt16Data>:
   163ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163f0:	add	fp, sp, #28
   163f4:	sub	sp, sp, #148	; 0x94
   163f8:	sub	sp, sp, #2048	; 0x800
   163fc:	mov	r7, r3
   16400:	mov	r3, r0
   16404:	mov	r0, #0
   16408:	cmp	r3, #0
   1640c:	cmpne	r1, #0
   16410:	bne	1641c <ReadUInt16Data+0x30>
   16414:	sub	sp, fp, #28
   16418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1641c:	mov	sl, r2
   16420:	ldr	r2, [r3]
   16424:	cmp	r2, #0
   16428:	beq	16414 <ReadUInt16Data+0x28>
   1642c:	mov	r0, sl
   16430:	str	r3, [sp, #140]	; 0x8c
   16434:	str	r1, [sp, #132]	; 0x84
   16438:	bl	1924 <Mat_SizeOf@plt>
   1643c:	mov	r9, r0
   16440:	sub	r0, sl, #1
   16444:	mov	r5, #0
   16448:	cmp	r0, #11
   1644c:	bhi	17494 <ReadUInt16Data+0x10a8>
   16450:	add	r1, pc, #8
   16454:	ldr	r6, [sp, #132]	; 0x84
   16458:	ldr	r0, [r1, r0, lsl #2]
   1645c:	add	pc, r1, r0
   16460:	.word	0x00000030
   16464:	.word	0x000000c0
   16468:	.word	0x00000150
   1646c:	.word	0x000001b0
   16470:	.word	0x00000210
   16474:	.word	0x00000270
   16478:	.word	0x000002d0
   1647c:	.word	0x00001ea4
   16480:	.word	0x00000338
   16484:	.word	0x00001ea4
   16488:	.word	0x00001ea4
   1648c:	.word	0x000003a0
   16490:	cmp	r7, #256	; 0x100
   16494:	bgt	16884 <ReadUInt16Data+0x498>
   16498:	ldr	r0, [sp, #140]	; 0x8c
   1649c:	add	r4, sp, #144	; 0x90
   164a0:	mov	r1, r9
   164a4:	mov	r2, r7
   164a8:	ldr	r3, [r0]
   164ac:	mov	r0, r4
   164b0:	bl	18b8 <fread@plt>
   164b4:	mov	r5, r0
   164b8:	cmp	r7, #1
   164bc:	blt	1867c <ReadUInt16Data+0x2290>
   164c0:	ldr	r3, [sp, #132]	; 0x84
   164c4:	mov	r0, #0
   164c8:	cmp	r7, #8
   164cc:	bcc	164fc <ReadUInt16Data+0x110>
   164d0:	bic	r0, r7, #7
   164d4:	mov	r2, r3
   164d8:	mov	r1, r0
   164dc:	vld1.8	{d16}, [r4 :64]
   164e0:	subs	r1, r1, #8
   164e4:	add	r4, r4, #8
   164e8:	vmovl.s8	q8, d16
   164ec:	vst1.16	{d16-d17}, [r2]!
   164f0:	bne	164dc <ReadUInt16Data+0xf0>
   164f4:	cmp	r0, r7
   164f8:	beq	1867c <ReadUInt16Data+0x2290>
   164fc:	add	r2, r3, r0, lsl #1
   16500:	add	r3, sp, #144	; 0x90
   16504:	sub	r1, r7, r0
   16508:	add	r0, r3, r0
   1650c:	ldrsb	r3, [r0], #1
   16510:	subs	r1, r1, #1
   16514:	strh	r3, [r2], #2
   16518:	bne	1650c <ReadUInt16Data+0x120>
   1651c:	b	1867c <ReadUInt16Data+0x2290>
   16520:	cmp	r7, #256	; 0x100
   16524:	bgt	16ce4 <ReadUInt16Data+0x8f8>
   16528:	ldr	r0, [sp, #140]	; 0x8c
   1652c:	add	r4, sp, #144	; 0x90
   16530:	mov	r1, r9
   16534:	mov	r2, r7
   16538:	ldr	r3, [r0]
   1653c:	mov	r0, r4
   16540:	bl	18b8 <fread@plt>
   16544:	mov	r5, r0
   16548:	cmp	r7, #1
   1654c:	blt	1867c <ReadUInt16Data+0x2290>
   16550:	ldr	r3, [sp, #132]	; 0x84
   16554:	mov	r0, #0
   16558:	cmp	r7, #8
   1655c:	bcc	1658c <ReadUInt16Data+0x1a0>
   16560:	bic	r0, r7, #7
   16564:	mov	r2, r3
   16568:	mov	r1, r0
   1656c:	vld1.8	{d16}, [r4 :64]
   16570:	subs	r1, r1, #8
   16574:	add	r4, r4, #8
   16578:	vmovl.u8	q8, d16
   1657c:	vst1.16	{d16-d17}, [r2]!
   16580:	bne	1656c <ReadUInt16Data+0x180>
   16584:	cmp	r0, r7
   16588:	beq	1867c <ReadUInt16Data+0x2290>
   1658c:	add	r2, r3, r0, lsl #1
   16590:	add	r3, sp, #144	; 0x90
   16594:	sub	r1, r7, r0
   16598:	add	r0, r3, r0
   1659c:	ldrb	r3, [r0], #1
   165a0:	subs	r1, r1, #1
   165a4:	strh	r3, [r2], #2
   165a8:	bne	1659c <ReadUInt16Data+0x1b0>
   165ac:	b	1867c <ReadUInt16Data+0x2290>
   165b0:	ldr	r0, [sp, #140]	; 0x8c
   165b4:	ldr	r0, [r0, #20]
   165b8:	cmp	r0, #0
   165bc:	beq	17144 <ReadUInt16Data+0xd58>
   165c0:	cmp	r7, #256	; 0x100
   165c4:	bgt	174a4 <ReadUInt16Data+0x10b8>
   165c8:	ldr	r0, [sp, #140]	; 0x8c
   165cc:	add	r4, sp, #144	; 0x90
   165d0:	mov	r1, r9
   165d4:	mov	r2, r7
   165d8:	ldr	r3, [r0]
   165dc:	mov	r0, r4
   165e0:	bl	18b8 <fread@plt>
   165e4:	mov	r5, r0
   165e8:	cmp	r7, #1
   165ec:	blt	1867c <ReadUInt16Data+0x2290>
   165f0:	ldr	r6, [sp, #132]	; 0x84
   165f4:	mov	r0, r4
   165f8:	bl	1c18 <Mat_int16Swap>
   165fc:	strh	r0, [r6], #2
   16600:	subs	r7, r7, #1
   16604:	add	r4, r4, #2
   16608:	bne	165f4 <ReadUInt16Data+0x208>
   1660c:	b	1867c <ReadUInt16Data+0x2290>
   16610:	ldr	r0, [sp, #140]	; 0x8c
   16614:	ldr	r0, [r0, #20]
   16618:	cmp	r0, #0
   1661c:	beq	171b8 <ReadUInt16Data+0xdcc>
   16620:	cmp	r7, #256	; 0x100
   16624:	bgt	1759c <ReadUInt16Data+0x11b0>
   16628:	ldr	r0, [sp, #140]	; 0x8c
   1662c:	add	r4, sp, #144	; 0x90
   16630:	mov	r1, r9
   16634:	mov	r2, r7
   16638:	ldr	r3, [r0]
   1663c:	mov	r0, r4
   16640:	bl	18b8 <fread@plt>
   16644:	mov	r5, r0
   16648:	cmp	r7, #1
   1664c:	blt	1867c <ReadUInt16Data+0x2290>
   16650:	ldr	r6, [sp, #132]	; 0x84
   16654:	mov	r0, r4
   16658:	bl	1c2c <Mat_uint16Swap>
   1665c:	strh	r0, [r6], #2
   16660:	subs	r7, r7, #1
   16664:	add	r4, r4, #2
   16668:	bne	16654 <ReadUInt16Data+0x268>
   1666c:	b	1867c <ReadUInt16Data+0x2290>
   16670:	ldr	r0, [sp, #140]	; 0x8c
   16674:	ldr	r0, [r0, #20]
   16678:	cmp	r0, #0
   1667c:	beq	17200 <ReadUInt16Data+0xe14>
   16680:	cmp	r7, #256	; 0x100
   16684:	bgt	17694 <ReadUInt16Data+0x12a8>
   16688:	ldr	r0, [sp, #140]	; 0x8c
   1668c:	add	r4, sp, #144	; 0x90
   16690:	mov	r1, r9
   16694:	mov	r2, r7
   16698:	ldr	r3, [r0]
   1669c:	mov	r0, r4
   166a0:	bl	18b8 <fread@plt>
   166a4:	mov	r5, r0
   166a8:	cmp	r7, #1
   166ac:	blt	1867c <ReadUInt16Data+0x2290>
   166b0:	ldr	r6, [sp, #132]	; 0x84
   166b4:	mov	r0, r4
   166b8:	bl	1bf0 <Mat_int32Swap>
   166bc:	strh	r0, [r6], #2
   166c0:	subs	r7, r7, #1
   166c4:	add	r4, r4, #4
   166c8:	bne	166b4 <ReadUInt16Data+0x2c8>
   166cc:	b	1867c <ReadUInt16Data+0x2290>
   166d0:	ldr	r0, [sp, #140]	; 0x8c
   166d4:	ldr	r0, [r0, #20]
   166d8:	cmp	r0, #0
   166dc:	beq	1728c <ReadUInt16Data+0xea0>
   166e0:	cmp	r7, #256	; 0x100
   166e4:	bgt	1778c <ReadUInt16Data+0x13a0>
   166e8:	ldr	r0, [sp, #140]	; 0x8c
   166ec:	add	r4, sp, #144	; 0x90
   166f0:	mov	r1, r9
   166f4:	mov	r2, r7
   166f8:	ldr	r3, [r0]
   166fc:	mov	r0, r4
   16700:	bl	18b8 <fread@plt>
   16704:	mov	r5, r0
   16708:	cmp	r7, #1
   1670c:	blt	1867c <ReadUInt16Data+0x2290>
   16710:	ldr	r6, [sp, #132]	; 0x84
   16714:	mov	r0, r4
   16718:	bl	1c04 <Mat_uint32Swap>
   1671c:	strh	r0, [r6], #2
   16720:	subs	r7, r7, #1
   16724:	add	r4, r4, #4
   16728:	bne	16714 <ReadUInt16Data+0x328>
   1672c:	b	1867c <ReadUInt16Data+0x2290>
   16730:	ldr	r0, [sp, #140]	; 0x8c
   16734:	ldr	r0, [r0, #20]
   16738:	cmp	r0, #0
   1673c:	beq	17318 <ReadUInt16Data+0xf2c>
   16740:	cmp	r7, #256	; 0x100
   16744:	bgt	17884 <ReadUInt16Data+0x1498>
   16748:	ldr	r0, [sp, #140]	; 0x8c
   1674c:	add	r4, sp, #144	; 0x90
   16750:	mov	r1, r9
   16754:	mov	r2, r7
   16758:	ldr	r3, [r0]
   1675c:	mov	r0, r4
   16760:	bl	18b8 <fread@plt>
   16764:	mov	r5, r0
   16768:	cmp	r7, #1
   1676c:	blt	1867c <ReadUInt16Data+0x2290>
   16770:	ldr	r6, [sp, #132]	; 0x84
   16774:	mov	r0, r4
   16778:	bl	1c44 <Mat_floatSwap>
   1677c:	vcvt.u32.f32	s0, s0
   16780:	subs	r7, r7, #1
   16784:	add	r4, r4, #4
   16788:	vmov	r0, s0
   1678c:	strh	r0, [r6], #2
   16790:	bne	16774 <ReadUInt16Data+0x388>
   16794:	b	1867c <ReadUInt16Data+0x2290>
   16798:	ldr	r0, [sp, #140]	; 0x8c
   1679c:	ldr	r0, [r0, #20]
   167a0:	cmp	r0, #0
   167a4:	beq	173b4 <ReadUInt16Data+0xfc8>
   167a8:	cmp	r7, #256	; 0x100
   167ac:	bgt	17990 <ReadUInt16Data+0x15a4>
   167b0:	ldr	r0, [sp, #140]	; 0x8c
   167b4:	add	r4, sp, #144	; 0x90
   167b8:	mov	r1, r9
   167bc:	mov	r2, r7
   167c0:	ldr	r3, [r0]
   167c4:	mov	r0, r4
   167c8:	bl	18b8 <fread@plt>
   167cc:	mov	r5, r0
   167d0:	cmp	r7, #1
   167d4:	blt	1867c <ReadUInt16Data+0x2290>
   167d8:	ldr	r6, [sp, #132]	; 0x84
   167dc:	mov	r0, r4
   167e0:	bl	1c88 <Mat_doubleSwap>
   167e4:	vcvt.u32.f64	s0, d0
   167e8:	subs	r7, r7, #1
   167ec:	add	r4, r4, #8
   167f0:	vmov	r0, s0
   167f4:	strh	r0, [r6], #2
   167f8:	bne	167dc <ReadUInt16Data+0x3f0>
   167fc:	b	1867c <ReadUInt16Data+0x2290>
   16800:	ldr	r0, [sp, #140]	; 0x8c
   16804:	ldr	r0, [r0, #20]
   16808:	cmp	r0, #0
   1680c:	beq	17408 <ReadUInt16Data+0x101c>
   16810:	cmp	r7, #256	; 0x100
   16814:	bgt	17a9c <ReadUInt16Data+0x16b0>
   16818:	ldr	r0, [sp, #140]	; 0x8c
   1681c:	add	r4, sp, #144	; 0x90
   16820:	mov	r1, r9
   16824:	mov	r2, r7
   16828:	ldr	r3, [r0]
   1682c:	mov	r0, r4
   16830:	bl	18b8 <fread@plt>
   16834:	mov	r5, r0
   16838:	cmp	r7, #1
   1683c:	blt	17494 <ReadUInt16Data+0x10a8>
   16840:	ldr	r6, [sp, #132]	; 0x84
   16844:	mov	r0, r7
   16848:	mov	r7, r5
   1684c:	mov	r8, r0
   16850:	mov	r5, r0
   16854:	mov	r0, r4
   16858:	bl	1b84 <Mat_int64Swap>
   1685c:	strh	r0, [r6], #2
   16860:	subs	r5, r5, #1
   16864:	add	r4, r4, #8
   16868:	bne	16854 <ReadUInt16Data+0x468>
   1686c:	ldr	r6, [sp, #132]	; 0x84
   16870:	mov	r5, r7
   16874:	mov	r7, r8
   16878:	cmp	sl, #13
   1687c:	beq	1830c <ReadUInt16Data+0x1f20>
   16880:	b	1867c <ReadUInt16Data+0x2290>
   16884:	add	r4, sp, #144	; 0x90
   16888:	mov	r8, r6
   1688c:	mov	sl, r6
   16890:	ldr	r6, [sp, #140]	; 0x8c
   16894:	str	r7, [sp]
   16898:	mov	r5, #0
   1689c:	add	r0, r4, #248	; 0xf8
   168a0:	str	r0, [sp, #128]	; 0x80
   168a4:	add	r0, r4, #240	; 0xf0
   168a8:	str	r0, [sp, #124]	; 0x7c
   168ac:	add	r0, r4, #232	; 0xe8
   168b0:	str	r0, [sp, #120]	; 0x78
   168b4:	add	r0, r4, #224	; 0xe0
   168b8:	str	r0, [sp, #116]	; 0x74
   168bc:	add	r0, r4, #216	; 0xd8
   168c0:	str	r0, [sp, #112]	; 0x70
   168c4:	add	r0, r4, #208	; 0xd0
   168c8:	str	r0, [sp, #108]	; 0x6c
   168cc:	add	r0, r4, #200	; 0xc8
   168d0:	str	r0, [sp, #104]	; 0x68
   168d4:	add	r0, r4, #192	; 0xc0
   168d8:	str	r0, [sp, #100]	; 0x64
   168dc:	add	r0, r4, #184	; 0xb8
   168e0:	str	r0, [sp, #96]	; 0x60
   168e4:	add	r0, r4, #176	; 0xb0
   168e8:	str	r0, [sp, #92]	; 0x5c
   168ec:	add	r0, r4, #168	; 0xa8
   168f0:	str	r0, [sp, #88]	; 0x58
   168f4:	add	r0, r4, #160	; 0xa0
   168f8:	str	r0, [sp, #84]	; 0x54
   168fc:	add	r0, r4, #152	; 0x98
   16900:	str	r0, [sp, #80]	; 0x50
   16904:	add	r0, r4, #144	; 0x90
   16908:	str	r0, [sp, #76]	; 0x4c
   1690c:	add	r0, r4, #136	; 0x88
   16910:	str	r0, [sp, #72]	; 0x48
   16914:	add	r0, r4, #128	; 0x80
   16918:	str	r0, [sp, #68]	; 0x44
   1691c:	add	r0, r4, #120	; 0x78
   16920:	str	r0, [sp, #64]	; 0x40
   16924:	add	r0, r4, #112	; 0x70
   16928:	str	r0, [sp, #60]	; 0x3c
   1692c:	add	r0, r4, #104	; 0x68
   16930:	str	r0, [sp, #56]	; 0x38
   16934:	add	r0, r4, #96	; 0x60
   16938:	str	r0, [sp, #52]	; 0x34
   1693c:	add	r0, r4, #88	; 0x58
   16940:	str	r0, [sp, #48]	; 0x30
   16944:	add	r0, r4, #80	; 0x50
   16948:	str	r0, [sp, #44]	; 0x2c
   1694c:	add	r0, r4, #72	; 0x48
   16950:	str	r0, [sp, #40]	; 0x28
   16954:	add	r0, r4, #64	; 0x40
   16958:	str	r0, [sp, #36]	; 0x24
   1695c:	add	r0, r4, #56	; 0x38
   16960:	str	r0, [sp, #32]
   16964:	add	r0, r4, #48	; 0x30
   16968:	str	r0, [sp, #28]
   1696c:	add	r0, r4, #40	; 0x28
   16970:	str	r0, [sp, #24]
   16974:	add	r0, r4, #32
   16978:	str	r0, [sp, #20]
   1697c:	add	r0, r4, #24
   16980:	str	r0, [sp, #16]
   16984:	add	r0, r4, #16
   16988:	str	r0, [sp, #12]
   1698c:	add	r0, r4, #8
   16990:	str	r0, [sp, #8]
   16994:	sub	r0, r7, #256	; 0x100
   16998:	mov	r7, #0
   1699c:	str	r0, [sp, #4]
   169a0:	ldr	r3, [r6]
   169a4:	mov	r0, r4
   169a8:	mov	r1, r9
   169ac:	mov	r2, #256	; 0x100
   169b0:	bl	18b8 <fread@plt>
   169b4:	vld1.8	{d16}, [r4 :64]
   169b8:	mov	r1, #512	; 0x200
   169bc:	add	r5, r0, r5
   169c0:	ldr	r0, [sp, #4]
   169c4:	add	r7, r7, #256	; 0x100
   169c8:	vmovl.s8	q8, d16
   169cc:	cmp	r7, r0
   169d0:	vst1.16	{d16-d17}, [sl], r1
   169d4:	ldr	r1, [sp, #8]
   169d8:	vld1.8	{d16}, [r1 :64]
   169dc:	add	r1, r8, #16
   169e0:	vmovl.s8	q8, d16
   169e4:	vst1.16	{d16-d17}, [r1]
   169e8:	ldr	r1, [sp, #12]
   169ec:	vld1.8	{d16}, [r1 :64]
   169f0:	add	r1, r8, #32
   169f4:	vmovl.s8	q8, d16
   169f8:	vst1.16	{d16-d17}, [r1]
   169fc:	ldr	r1, [sp, #16]
   16a00:	vld1.8	{d16}, [r1 :64]
   16a04:	add	r1, r8, #48	; 0x30
   16a08:	vmovl.s8	q8, d16
   16a0c:	vst1.16	{d16-d17}, [r1]
   16a10:	ldr	r1, [sp, #20]
   16a14:	vld1.8	{d16}, [r1 :64]
   16a18:	add	r1, r8, #64	; 0x40
   16a1c:	vmovl.s8	q8, d16
   16a20:	vst1.16	{d16-d17}, [r1]
   16a24:	ldr	r1, [sp, #24]
   16a28:	vld1.8	{d16}, [r1 :64]
   16a2c:	add	r1, r8, #80	; 0x50
   16a30:	vmovl.s8	q8, d16
   16a34:	vst1.16	{d16-d17}, [r1]
   16a38:	ldr	r1, [sp, #28]
   16a3c:	vld1.8	{d16}, [r1 :64]
   16a40:	add	r1, r8, #96	; 0x60
   16a44:	vmovl.s8	q8, d16
   16a48:	vst1.16	{d16-d17}, [r1]
   16a4c:	ldr	r1, [sp, #32]
   16a50:	vld1.8	{d16}, [r1 :64]
   16a54:	add	r1, r8, #112	; 0x70
   16a58:	vmovl.s8	q8, d16
   16a5c:	vst1.16	{d16-d17}, [r1]
   16a60:	ldr	r1, [sp, #36]	; 0x24
   16a64:	vld1.8	{d16}, [r1 :64]
   16a68:	add	r1, r8, #128	; 0x80
   16a6c:	vmovl.s8	q8, d16
   16a70:	vst1.16	{d16-d17}, [r1]
   16a74:	ldr	r1, [sp, #40]	; 0x28
   16a78:	vld1.8	{d16}, [r1 :64]
   16a7c:	add	r1, r8, #144	; 0x90
   16a80:	vmovl.s8	q8, d16
   16a84:	vst1.16	{d16-d17}, [r1]
   16a88:	ldr	r1, [sp, #44]	; 0x2c
   16a8c:	vld1.8	{d16}, [r1 :64]
   16a90:	add	r1, r8, #160	; 0xa0
   16a94:	vmovl.s8	q8, d16
   16a98:	vst1.16	{d16-d17}, [r1]
   16a9c:	ldr	r1, [sp, #48]	; 0x30
   16aa0:	vld1.8	{d16}, [r1 :64]
   16aa4:	add	r1, r8, #176	; 0xb0
   16aa8:	vmovl.s8	q8, d16
   16aac:	vst1.16	{d16-d17}, [r1]
   16ab0:	ldr	r1, [sp, #52]	; 0x34
   16ab4:	vld1.8	{d16}, [r1 :64]
   16ab8:	add	r1, r8, #192	; 0xc0
   16abc:	vmovl.s8	q8, d16
   16ac0:	vst1.16	{d16-d17}, [r1]
   16ac4:	ldr	r1, [sp, #56]	; 0x38
   16ac8:	vld1.8	{d16}, [r1 :64]
   16acc:	add	r1, r8, #208	; 0xd0
   16ad0:	vmovl.s8	q8, d16
   16ad4:	vst1.16	{d16-d17}, [r1]
   16ad8:	ldr	r1, [sp, #60]	; 0x3c
   16adc:	vld1.8	{d16}, [r1 :64]
   16ae0:	add	r1, r8, #224	; 0xe0
   16ae4:	vmovl.s8	q8, d16
   16ae8:	vst1.16	{d16-d17}, [r1]
   16aec:	ldr	r1, [sp, #64]	; 0x40
   16af0:	vld1.8	{d16}, [r1 :64]
   16af4:	add	r1, r8, #240	; 0xf0
   16af8:	vmovl.s8	q8, d16
   16afc:	vst1.16	{d16-d17}, [r1]
   16b00:	ldr	r1, [sp, #68]	; 0x44
   16b04:	vld1.8	{d16}, [r1 :64]
   16b08:	add	r1, r8, #256	; 0x100
   16b0c:	vmovl.s8	q8, d16
   16b10:	vst1.16	{d16-d17}, [r1]
   16b14:	ldr	r1, [sp, #72]	; 0x48
   16b18:	vld1.8	{d16}, [r1 :64]
   16b1c:	add	r1, r8, #272	; 0x110
   16b20:	vmovl.s8	q8, d16
   16b24:	vst1.16	{d16-d17}, [r1]
   16b28:	ldr	r1, [sp, #76]	; 0x4c
   16b2c:	vld1.8	{d16}, [r1 :64]
   16b30:	add	r1, r8, #288	; 0x120
   16b34:	vmovl.s8	q8, d16
   16b38:	vst1.16	{d16-d17}, [r1]
   16b3c:	ldr	r1, [sp, #80]	; 0x50
   16b40:	vld1.8	{d16}, [r1 :64]
   16b44:	add	r1, r8, #304	; 0x130
   16b48:	vmovl.s8	q8, d16
   16b4c:	vst1.16	{d16-d17}, [r1]
   16b50:	ldr	r1, [sp, #84]	; 0x54
   16b54:	vld1.8	{d16}, [r1 :64]
   16b58:	add	r1, r8, #320	; 0x140
   16b5c:	vmovl.s8	q8, d16
   16b60:	vst1.16	{d16-d17}, [r1]
   16b64:	ldr	r1, [sp, #88]	; 0x58
   16b68:	vld1.8	{d16}, [r1 :64]
   16b6c:	add	r1, r8, #336	; 0x150
   16b70:	vmovl.s8	q8, d16
   16b74:	vst1.16	{d16-d17}, [r1]
   16b78:	ldr	r1, [sp, #92]	; 0x5c
   16b7c:	vld1.8	{d16}, [r1 :64]
   16b80:	add	r1, r8, #352	; 0x160
   16b84:	vmovl.s8	q8, d16
   16b88:	vst1.16	{d16-d17}, [r1]
   16b8c:	ldr	r1, [sp, #96]	; 0x60
   16b90:	vld1.8	{d16}, [r1 :64]
   16b94:	add	r1, r8, #368	; 0x170
   16b98:	vmovl.s8	q8, d16
   16b9c:	vst1.16	{d16-d17}, [r1]
   16ba0:	ldr	r1, [sp, #100]	; 0x64
   16ba4:	vld1.8	{d16}, [r1 :64]
   16ba8:	add	r1, r8, #384	; 0x180
   16bac:	vmovl.s8	q8, d16
   16bb0:	vst1.16	{d16-d17}, [r1]
   16bb4:	ldr	r1, [sp, #104]	; 0x68
   16bb8:	vld1.8	{d16}, [r1 :64]
   16bbc:	add	r1, r8, #400	; 0x190
   16bc0:	vmovl.s8	q8, d16
   16bc4:	vst1.16	{d16-d17}, [r1]
   16bc8:	ldr	r1, [sp, #108]	; 0x6c
   16bcc:	vld1.8	{d16}, [r1 :64]
   16bd0:	add	r1, r8, #416	; 0x1a0
   16bd4:	vmovl.s8	q8, d16
   16bd8:	vst1.16	{d16-d17}, [r1]
   16bdc:	ldr	r1, [sp, #112]	; 0x70
   16be0:	vld1.8	{d16}, [r1 :64]
   16be4:	add	r1, r8, #432	; 0x1b0
   16be8:	vmovl.s8	q8, d16
   16bec:	vst1.16	{d16-d17}, [r1]
   16bf0:	ldr	r1, [sp, #116]	; 0x74
   16bf4:	vld1.8	{d16}, [r1 :64]
   16bf8:	add	r1, r8, #448	; 0x1c0
   16bfc:	vmovl.s8	q8, d16
   16c00:	vst1.16	{d16-d17}, [r1]
   16c04:	ldr	r1, [sp, #120]	; 0x78
   16c08:	vld1.8	{d16}, [r1 :64]
   16c0c:	add	r1, r8, #464	; 0x1d0
   16c10:	vmovl.s8	q8, d16
   16c14:	vst1.16	{d16-d17}, [r1]
   16c18:	ldr	r1, [sp, #124]	; 0x7c
   16c1c:	vld1.8	{d16}, [r1 :64]
   16c20:	add	r1, r8, #480	; 0x1e0
   16c24:	vmovl.s8	q8, d16
   16c28:	vst1.16	{d16-d17}, [r1]
   16c2c:	ldr	r1, [sp, #128]	; 0x80
   16c30:	vld1.8	{d16}, [r1 :64]
   16c34:	add	r1, r8, #496	; 0x1f0
   16c38:	mov	r8, sl
   16c3c:	vmovl.s8	q8, d16
   16c40:	vst1.16	{d16-d17}, [r1]
   16c44:	blt	169a0 <ReadUInt16Data+0x5b4>
   16c48:	ldr	r0, [sp]
   16c4c:	cmp	r7, r0
   16c50:	bge	1867c <ReadUInt16Data+0x2290>
   16c54:	ldr	r3, [r6]
   16c58:	sub	r8, r0, r7
   16c5c:	add	r4, sp, #144	; 0x90
   16c60:	mov	r1, r9
   16c64:	mov	r0, r4
   16c68:	mov	r2, r8
   16c6c:	bl	18b8 <fread@plt>
   16c70:	add	r5, r0, r5
   16c74:	cmp	r8, #1
   16c78:	blt	1867c <ReadUInt16Data+0x2290>
   16c7c:	ldr	r3, [sp, #132]	; 0x84
   16c80:	mov	r0, #0
   16c84:	cmp	r8, #8
   16c88:	bcc	16cb4 <ReadUInt16Data+0x8c8>
   16c8c:	bic	r1, r8, #7
   16c90:	bic	r0, r8, #7
   16c94:	vld1.8	{d16}, [r4 :64]
   16c98:	subs	r1, r1, #8
   16c9c:	add	r4, r4, #8
   16ca0:	vmovl.s8	q8, d16
   16ca4:	vst1.16	{d16-d17}, [sl]!
   16ca8:	bne	16c94 <ReadUInt16Data+0x8a8>
   16cac:	cmp	r8, r0
   16cb0:	beq	1867c <ReadUInt16Data+0x2290>
   16cb4:	add	r2, r0, r7
   16cb8:	add	r1, sp, #144	; 0x90
   16cbc:	add	r2, r3, r2, lsl #1
   16cc0:	ldr	r3, [sp]
   16cc4:	add	r1, r1, r0
   16cc8:	sub	r0, r3, r0
   16ccc:	sub	r0, r0, r7
   16cd0:	ldrsb	r3, [r1], #1
   16cd4:	subs	r0, r0, #1
   16cd8:	strh	r3, [r2], #2
   16cdc:	bne	16cd0 <ReadUInt16Data+0x8e4>
   16ce0:	b	1867c <ReadUInt16Data+0x2290>
   16ce4:	add	r4, sp, #144	; 0x90
   16ce8:	ldr	sl, [sp, #140]	; 0x8c
   16cec:	str	r7, [sp]
   16cf0:	mov	r5, #0
   16cf4:	mov	r8, r6
   16cf8:	add	r0, r4, #248	; 0xf8
   16cfc:	str	r0, [sp, #128]	; 0x80
   16d00:	add	r0, r4, #240	; 0xf0
   16d04:	str	r0, [sp, #124]	; 0x7c
   16d08:	add	r0, r4, #232	; 0xe8
   16d0c:	str	r0, [sp, #120]	; 0x78
   16d10:	add	r0, r4, #224	; 0xe0
   16d14:	str	r0, [sp, #116]	; 0x74
   16d18:	add	r0, r4, #216	; 0xd8
   16d1c:	str	r0, [sp, #112]	; 0x70
   16d20:	add	r0, r4, #208	; 0xd0
   16d24:	str	r0, [sp, #108]	; 0x6c
   16d28:	add	r0, r4, #200	; 0xc8
   16d2c:	str	r0, [sp, #104]	; 0x68
   16d30:	add	r0, r4, #192	; 0xc0
   16d34:	str	r0, [sp, #100]	; 0x64
   16d38:	add	r0, r4, #184	; 0xb8
   16d3c:	str	r0, [sp, #96]	; 0x60
   16d40:	add	r0, r4, #176	; 0xb0
   16d44:	str	r0, [sp, #92]	; 0x5c
   16d48:	add	r0, r4, #168	; 0xa8
   16d4c:	str	r0, [sp, #88]	; 0x58
   16d50:	add	r0, r4, #160	; 0xa0
   16d54:	str	r0, [sp, #84]	; 0x54
   16d58:	add	r0, r4, #152	; 0x98
   16d5c:	str	r0, [sp, #80]	; 0x50
   16d60:	add	r0, r4, #144	; 0x90
   16d64:	str	r0, [sp, #76]	; 0x4c
   16d68:	add	r0, r4, #136	; 0x88
   16d6c:	str	r0, [sp, #72]	; 0x48
   16d70:	add	r0, r4, #128	; 0x80
   16d74:	str	r0, [sp, #68]	; 0x44
   16d78:	add	r0, r4, #120	; 0x78
   16d7c:	str	r0, [sp, #64]	; 0x40
   16d80:	add	r0, r4, #112	; 0x70
   16d84:	str	r0, [sp, #60]	; 0x3c
   16d88:	add	r0, r4, #104	; 0x68
   16d8c:	str	r0, [sp, #56]	; 0x38
   16d90:	add	r0, r4, #96	; 0x60
   16d94:	str	r0, [sp, #52]	; 0x34
   16d98:	add	r0, r4, #88	; 0x58
   16d9c:	str	r0, [sp, #48]	; 0x30
   16da0:	add	r0, r4, #80	; 0x50
   16da4:	str	r0, [sp, #44]	; 0x2c
   16da8:	add	r0, r4, #72	; 0x48
   16dac:	str	r0, [sp, #40]	; 0x28
   16db0:	add	r0, r4, #64	; 0x40
   16db4:	str	r0, [sp, #36]	; 0x24
   16db8:	add	r0, r4, #56	; 0x38
   16dbc:	str	r0, [sp, #32]
   16dc0:	add	r0, r4, #48	; 0x30
   16dc4:	str	r0, [sp, #28]
   16dc8:	add	r0, r4, #40	; 0x28
   16dcc:	str	r0, [sp, #24]
   16dd0:	add	r0, r4, #32
   16dd4:	str	r0, [sp, #20]
   16dd8:	add	r0, r4, #24
   16ddc:	str	r0, [sp, #16]
   16de0:	add	r0, r4, #16
   16de4:	str	r0, [sp, #12]
   16de8:	add	r0, r4, #8
   16dec:	str	r0, [sp, #8]
   16df0:	sub	r0, r7, #256	; 0x100
   16df4:	mov	r7, #0
   16df8:	str	r0, [sp, #4]
   16dfc:	ldr	r3, [sl]
   16e00:	mov	r0, r4
   16e04:	mov	r1, r9
   16e08:	mov	r2, #256	; 0x100
   16e0c:	bl	18b8 <fread@plt>
   16e10:	vld1.8	{d16}, [r4 :64]
   16e14:	mov	r1, #512	; 0x200
   16e18:	add	r5, r0, r5
   16e1c:	ldr	r0, [sp, #4]
   16e20:	add	r7, r7, #256	; 0x100
   16e24:	vmovl.u8	q8, d16
   16e28:	cmp	r7, r0
   16e2c:	vst1.16	{d16-d17}, [r8], r1
   16e30:	ldr	r1, [sp, #8]
   16e34:	vld1.8	{d16}, [r1 :64]
   16e38:	add	r1, r6, #16
   16e3c:	vmovl.u8	q8, d16
   16e40:	vst1.16	{d16-d17}, [r1]
   16e44:	ldr	r1, [sp, #12]
   16e48:	vld1.8	{d16}, [r1 :64]
   16e4c:	add	r1, r6, #32
   16e50:	vmovl.u8	q8, d16
   16e54:	vst1.16	{d16-d17}, [r1]
   16e58:	ldr	r1, [sp, #16]
   16e5c:	vld1.8	{d16}, [r1 :64]
   16e60:	add	r1, r6, #48	; 0x30
   16e64:	vmovl.u8	q8, d16
   16e68:	vst1.16	{d16-d17}, [r1]
   16e6c:	ldr	r1, [sp, #20]
   16e70:	vld1.8	{d16}, [r1 :64]
   16e74:	add	r1, r6, #64	; 0x40
   16e78:	vmovl.u8	q8, d16
   16e7c:	vst1.16	{d16-d17}, [r1]
   16e80:	ldr	r1, [sp, #24]
   16e84:	vld1.8	{d16}, [r1 :64]
   16e88:	add	r1, r6, #80	; 0x50
   16e8c:	vmovl.u8	q8, d16
   16e90:	vst1.16	{d16-d17}, [r1]
   16e94:	ldr	r1, [sp, #28]
   16e98:	vld1.8	{d16}, [r1 :64]
   16e9c:	add	r1, r6, #96	; 0x60
   16ea0:	vmovl.u8	q8, d16
   16ea4:	vst1.16	{d16-d17}, [r1]
   16ea8:	ldr	r1, [sp, #32]
   16eac:	vld1.8	{d16}, [r1 :64]
   16eb0:	add	r1, r6, #112	; 0x70
   16eb4:	vmovl.u8	q8, d16
   16eb8:	vst1.16	{d16-d17}, [r1]
   16ebc:	ldr	r1, [sp, #36]	; 0x24
   16ec0:	vld1.8	{d16}, [r1 :64]
   16ec4:	add	r1, r6, #128	; 0x80
   16ec8:	vmovl.u8	q8, d16
   16ecc:	vst1.16	{d16-d17}, [r1]
   16ed0:	ldr	r1, [sp, #40]	; 0x28
   16ed4:	vld1.8	{d16}, [r1 :64]
   16ed8:	add	r1, r6, #144	; 0x90
   16edc:	vmovl.u8	q8, d16
   16ee0:	vst1.16	{d16-d17}, [r1]
   16ee4:	ldr	r1, [sp, #44]	; 0x2c
   16ee8:	vld1.8	{d16}, [r1 :64]
   16eec:	add	r1, r6, #160	; 0xa0
   16ef0:	vmovl.u8	q8, d16
   16ef4:	vst1.16	{d16-d17}, [r1]
   16ef8:	ldr	r1, [sp, #48]	; 0x30
   16efc:	vld1.8	{d16}, [r1 :64]
   16f00:	add	r1, r6, #176	; 0xb0
   16f04:	vmovl.u8	q8, d16
   16f08:	vst1.16	{d16-d17}, [r1]
   16f0c:	ldr	r1, [sp, #52]	; 0x34
   16f10:	vld1.8	{d16}, [r1 :64]
   16f14:	add	r1, r6, #192	; 0xc0
   16f18:	vmovl.u8	q8, d16
   16f1c:	vst1.16	{d16-d17}, [r1]
   16f20:	ldr	r1, [sp, #56]	; 0x38
   16f24:	vld1.8	{d16}, [r1 :64]
   16f28:	add	r1, r6, #208	; 0xd0
   16f2c:	vmovl.u8	q8, d16
   16f30:	vst1.16	{d16-d17}, [r1]
   16f34:	ldr	r1, [sp, #60]	; 0x3c
   16f38:	vld1.8	{d16}, [r1 :64]
   16f3c:	add	r1, r6, #224	; 0xe0
   16f40:	vmovl.u8	q8, d16
   16f44:	vst1.16	{d16-d17}, [r1]
   16f48:	ldr	r1, [sp, #64]	; 0x40
   16f4c:	vld1.8	{d16}, [r1 :64]
   16f50:	add	r1, r6, #240	; 0xf0
   16f54:	vmovl.u8	q8, d16
   16f58:	vst1.16	{d16-d17}, [r1]
   16f5c:	ldr	r1, [sp, #68]	; 0x44
   16f60:	vld1.8	{d16}, [r1 :64]
   16f64:	add	r1, r6, #256	; 0x100
   16f68:	vmovl.u8	q8, d16
   16f6c:	vst1.16	{d16-d17}, [r1]
   16f70:	ldr	r1, [sp, #72]	; 0x48
   16f74:	vld1.8	{d16}, [r1 :64]
   16f78:	add	r1, r6, #272	; 0x110
   16f7c:	vmovl.u8	q8, d16
   16f80:	vst1.16	{d16-d17}, [r1]
   16f84:	ldr	r1, [sp, #76]	; 0x4c
   16f88:	vld1.8	{d16}, [r1 :64]
   16f8c:	add	r1, r6, #288	; 0x120
   16f90:	vmovl.u8	q8, d16
   16f94:	vst1.16	{d16-d17}, [r1]
   16f98:	ldr	r1, [sp, #80]	; 0x50
   16f9c:	vld1.8	{d16}, [r1 :64]
   16fa0:	add	r1, r6, #304	; 0x130
   16fa4:	vmovl.u8	q8, d16
   16fa8:	vst1.16	{d16-d17}, [r1]
   16fac:	ldr	r1, [sp, #84]	; 0x54
   16fb0:	vld1.8	{d16}, [r1 :64]
   16fb4:	add	r1, r6, #320	; 0x140
   16fb8:	vmovl.u8	q8, d16
   16fbc:	vst1.16	{d16-d17}, [r1]
   16fc0:	ldr	r1, [sp, #88]	; 0x58
   16fc4:	vld1.8	{d16}, [r1 :64]
   16fc8:	add	r1, r6, #336	; 0x150
   16fcc:	vmovl.u8	q8, d16
   16fd0:	vst1.16	{d16-d17}, [r1]
   16fd4:	ldr	r1, [sp, #92]	; 0x5c
   16fd8:	vld1.8	{d16}, [r1 :64]
   16fdc:	add	r1, r6, #352	; 0x160
   16fe0:	vmovl.u8	q8, d16
   16fe4:	vst1.16	{d16-d17}, [r1]
   16fe8:	ldr	r1, [sp, #96]	; 0x60
   16fec:	vld1.8	{d16}, [r1 :64]
   16ff0:	add	r1, r6, #368	; 0x170
   16ff4:	vmovl.u8	q8, d16
   16ff8:	vst1.16	{d16-d17}, [r1]
   16ffc:	ldr	r1, [sp, #100]	; 0x64
   17000:	vld1.8	{d16}, [r1 :64]
   17004:	add	r1, r6, #384	; 0x180
   17008:	vmovl.u8	q8, d16
   1700c:	vst1.16	{d16-d17}, [r1]
   17010:	ldr	r1, [sp, #104]	; 0x68
   17014:	vld1.8	{d16}, [r1 :64]
   17018:	add	r1, r6, #400	; 0x190
   1701c:	vmovl.u8	q8, d16
   17020:	vst1.16	{d16-d17}, [r1]
   17024:	ldr	r1, [sp, #108]	; 0x6c
   17028:	vld1.8	{d16}, [r1 :64]
   1702c:	add	r1, r6, #416	; 0x1a0
   17030:	vmovl.u8	q8, d16
   17034:	vst1.16	{d16-d17}, [r1]
   17038:	ldr	r1, [sp, #112]	; 0x70
   1703c:	vld1.8	{d16}, [r1 :64]
   17040:	add	r1, r6, #432	; 0x1b0
   17044:	vmovl.u8	q8, d16
   17048:	vst1.16	{d16-d17}, [r1]
   1704c:	ldr	r1, [sp, #116]	; 0x74
   17050:	vld1.8	{d16}, [r1 :64]
   17054:	add	r1, r6, #448	; 0x1c0
   17058:	vmovl.u8	q8, d16
   1705c:	vst1.16	{d16-d17}, [r1]
   17060:	ldr	r1, [sp, #120]	; 0x78
   17064:	vld1.8	{d16}, [r1 :64]
   17068:	add	r1, r6, #464	; 0x1d0
   1706c:	vmovl.u8	q8, d16
   17070:	vst1.16	{d16-d17}, [r1]
   17074:	ldr	r1, [sp, #124]	; 0x7c
   17078:	vld1.8	{d16}, [r1 :64]
   1707c:	add	r1, r6, #480	; 0x1e0
   17080:	vmovl.u8	q8, d16
   17084:	vst1.16	{d16-d17}, [r1]
   17088:	ldr	r1, [sp, #128]	; 0x80
   1708c:	vld1.8	{d16}, [r1 :64]
   17090:	add	r1, r6, #496	; 0x1f0
   17094:	mov	r6, r8
   17098:	vmovl.u8	q8, d16
   1709c:	vst1.16	{d16-d17}, [r1]
   170a0:	blt	16dfc <ReadUInt16Data+0xa10>
   170a4:	ldr	r0, [sp]
   170a8:	cmp	r7, r0
   170ac:	bge	1867c <ReadUInt16Data+0x2290>
   170b0:	sub	r6, r0, r7
   170b4:	ldr	r0, [sp, #140]	; 0x8c
   170b8:	add	r4, sp, #144	; 0x90
   170bc:	mov	r1, r9
   170c0:	mov	r2, r6
   170c4:	ldr	r3, [r0]
   170c8:	mov	r0, r4
   170cc:	bl	18b8 <fread@plt>
   170d0:	add	r5, r0, r5
   170d4:	cmp	r6, #1
   170d8:	blt	1867c <ReadUInt16Data+0x2290>
   170dc:	ldr	r3, [sp, #132]	; 0x84
   170e0:	mov	r0, #0
   170e4:	cmp	r6, #8
   170e8:	bcc	17114 <ReadUInt16Data+0xd28>
   170ec:	bic	r1, r6, #7
   170f0:	bic	r0, r6, #7
   170f4:	vld1.8	{d16}, [r4 :64]
   170f8:	subs	r1, r1, #8
   170fc:	add	r4, r4, #8
   17100:	vmovl.u8	q8, d16
   17104:	vst1.16	{d16-d17}, [r8]!
   17108:	bne	170f4 <ReadUInt16Data+0xd08>
   1710c:	cmp	r6, r0
   17110:	beq	1867c <ReadUInt16Data+0x2290>
   17114:	add	r2, r0, r7
   17118:	add	r1, sp, #144	; 0x90
   1711c:	add	r2, r3, r2, lsl #1
   17120:	ldr	r3, [sp]
   17124:	add	r1, r1, r0
   17128:	sub	r0, r3, r0
   1712c:	sub	r0, r0, r7
   17130:	ldrb	r3, [r1], #1
   17134:	subs	r0, r0, #1
   17138:	strh	r3, [r2], #2
   1713c:	bne	17130 <ReadUInt16Data+0xd44>
   17140:	b	1867c <ReadUInt16Data+0x2290>
   17144:	cmp	r7, #256	; 0x100
   17148:	ble	171c0 <ReadUInt16Data+0xdd4>
   1714c:	str	r9, [sp, #136]	; 0x88
   17150:	ldr	r9, [sp, #132]	; 0x84
   17154:	ldr	sl, [sp, #140]	; 0x8c
   17158:	sub	r0, r7, #256	; 0x100
   1715c:	lsl	r4, r7, #1
   17160:	mov	r6, #0
   17164:	add	r8, sp, #144	; 0x90
   17168:	mov	r5, #0
   1716c:	str	r7, [sp]
   17170:	str	r0, [sp, #128]	; 0x80
   17174:	ldr	r3, [sl]
   17178:	ldr	r1, [sp, #136]	; 0x88
   1717c:	mov	r0, r8
   17180:	mov	r2, #256	; 0x100
   17184:	bl	18b8 <fread@plt>
   17188:	mov	r7, r0
   1718c:	add	r0, r9, r6, lsl #1
   17190:	mov	r1, r8
   17194:	mov	r2, #512	; 0x200
   17198:	bl	181c <memcpy@plt>
   1719c:	ldr	r0, [sp, #128]	; 0x80
   171a0:	add	r6, r6, #256	; 0x100
   171a4:	add	r5, r7, r5
   171a8:	sub	r4, r4, #512	; 0x200
   171ac:	cmp	r6, r0
   171b0:	blt	17174 <ReadUInt16Data+0xd88>
   171b4:	b	17c18 <ReadUInt16Data+0x182c>
   171b8:	cmp	r7, #256	; 0x100
   171bc:	bgt	17bb0 <ReadUInt16Data+0x17c4>
   171c0:	ldr	r0, [sp, #140]	; 0x8c
   171c4:	mov	r1, r9
   171c8:	mov	r2, r7
   171cc:	ldr	r3, [r0]
   171d0:	add	r0, sp, #144	; 0x90
   171d4:	bl	18b8 <fread@plt>
   171d8:	mov	r5, r0
   171dc:	cmp	r7, #1
   171e0:	blt	1867c <ReadUInt16Data+0x2290>
   171e4:	ldr	r0, [sp, #132]	; 0x84
   171e8:	lsl	r2, r7, #1
   171ec:	add	r1, sp, #144	; 0x90
   171f0:	bl	181c <memcpy@plt>
   171f4:	mul	r0, r5, r9
   171f8:	sub	sp, fp, #28
   171fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17200:	cmp	r7, #256	; 0x100
   17204:	bgt	17c70 <ReadUInt16Data+0x1884>
   17208:	ldr	r0, [sp, #140]	; 0x8c
   1720c:	add	r4, sp, #144	; 0x90
   17210:	mov	r1, r9
   17214:	mov	r2, r7
   17218:	ldr	r3, [r0]
   1721c:	mov	r0, r4
   17220:	bl	18b8 <fread@plt>
   17224:	mov	r5, r0
   17228:	cmp	r7, #1
   1722c:	blt	1867c <ReadUInt16Data+0x2290>
   17230:	ldr	r3, [sp, #132]	; 0x84
   17234:	mov	r0, #0
   17238:	cmp	r7, #4
   1723c:	bcc	17268 <ReadUInt16Data+0xe7c>
   17240:	bic	r0, r7, #3
   17244:	mov	r2, r3
   17248:	mov	r1, r0
   1724c:	vld1.32	{d16-d17}, [r4]!
   17250:	subs	r1, r1, #4
   17254:	vmovn.i32	d16, q8
   17258:	vst1.16	{d16}, [r2]!
   1725c:	bne	1724c <ReadUInt16Data+0xe60>
   17260:	cmp	r0, r7
   17264:	beq	1867c <ReadUInt16Data+0x2290>
   17268:	add	r2, r3, r0, lsl #1
   1726c:	add	r3, sp, #144	; 0x90
   17270:	sub	r1, r7, r0
   17274:	add	r0, r3, r0, lsl #2
   17278:	ldr	r3, [r0], #4
   1727c:	subs	r1, r1, #1
   17280:	strh	r3, [r2], #2
   17284:	bne	17278 <ReadUInt16Data+0xe8c>
   17288:	b	1867c <ReadUInt16Data+0x2290>
   1728c:	cmp	r7, #256	; 0x100
   17290:	bgt	17da8 <ReadUInt16Data+0x19bc>
   17294:	ldr	r0, [sp, #140]	; 0x8c
   17298:	add	r4, sp, #144	; 0x90
   1729c:	mov	r1, r9
   172a0:	mov	r2, r7
   172a4:	ldr	r3, [r0]
   172a8:	mov	r0, r4
   172ac:	bl	18b8 <fread@plt>
   172b0:	mov	r5, r0
   172b4:	cmp	r7, #1
   172b8:	blt	1867c <ReadUInt16Data+0x2290>
   172bc:	ldr	r3, [sp, #132]	; 0x84
   172c0:	mov	r0, #0
   172c4:	cmp	r7, #4
   172c8:	bcc	172f4 <ReadUInt16Data+0xf08>
   172cc:	bic	r0, r7, #3
   172d0:	mov	r2, r3
   172d4:	mov	r1, r0
   172d8:	vld1.32	{d16-d17}, [r4]!
   172dc:	subs	r1, r1, #4
   172e0:	vmovn.i32	d16, q8
   172e4:	vst1.16	{d16}, [r2]!
   172e8:	bne	172d8 <ReadUInt16Data+0xeec>
   172ec:	cmp	r0, r7
   172f0:	beq	1867c <ReadUInt16Data+0x2290>
   172f4:	add	r2, r3, r0, lsl #1
   172f8:	add	r3, sp, #144	; 0x90
   172fc:	sub	r1, r7, r0
   17300:	add	r0, r3, r0, lsl #2
   17304:	ldr	r3, [r0], #4
   17308:	subs	r1, r1, #1
   1730c:	strh	r3, [r2], #2
   17310:	bne	17304 <ReadUInt16Data+0xf18>
   17314:	b	1867c <ReadUInt16Data+0x2290>
   17318:	cmp	r7, #256	; 0x100
   1731c:	bgt	17ee0 <ReadUInt16Data+0x1af4>
   17320:	ldr	r0, [sp, #140]	; 0x8c
   17324:	add	r4, sp, #144	; 0x90
   17328:	mov	r1, r9
   1732c:	mov	r2, r7
   17330:	ldr	r3, [r0]
   17334:	mov	r0, r4
   17338:	bl	18b8 <fread@plt>
   1733c:	mov	r5, r0
   17340:	cmp	r7, #1
   17344:	blt	1867c <ReadUInt16Data+0x2290>
   17348:	ldr	r3, [sp, #132]	; 0x84
   1734c:	mov	r0, #0
   17350:	cmp	r7, #4
   17354:	bcc	17384 <ReadUInt16Data+0xf98>
   17358:	bic	r0, r7, #3
   1735c:	mov	r2, r3
   17360:	mov	r1, r0
   17364:	vld1.32	{d16-d17}, [r4]!
   17368:	subs	r1, r1, #4
   1736c:	vcvt.u32.f32	q8, q8
   17370:	vmovn.i32	d16, q8
   17374:	vst1.16	{d16}, [r2]!
   17378:	bne	17364 <ReadUInt16Data+0xf78>
   1737c:	cmp	r0, r7
   17380:	beq	1867c <ReadUInt16Data+0x2290>
   17384:	add	r2, r3, r0, lsl #1
   17388:	add	r3, sp, #144	; 0x90
   1738c:	sub	r1, r7, r0
   17390:	add	r0, r3, r0, lsl #2
   17394:	vldr	s0, [r0]
   17398:	subs	r1, r1, #1
   1739c:	add	r0, r0, #4
   173a0:	vcvt.u32.f32	s0, s0
   173a4:	vmov	r3, s0
   173a8:	strh	r3, [r2], #2
   173ac:	bne	17394 <ReadUInt16Data+0xfa8>
   173b0:	b	1867c <ReadUInt16Data+0x2290>
   173b4:	cmp	r7, #256	; 0x100
   173b8:	bgt	1802c <ReadUInt16Data+0x1c40>
   173bc:	ldr	r0, [sp, #140]	; 0x8c
   173c0:	add	r4, sp, #144	; 0x90
   173c4:	mov	r1, r9
   173c8:	mov	r2, r7
   173cc:	ldr	r3, [r0]
   173d0:	mov	r0, r4
   173d4:	bl	18b8 <fread@plt>
   173d8:	mov	r5, r0
   173dc:	cmp	r7, #1
   173e0:	blt	1867c <ReadUInt16Data+0x2290>
   173e4:	ldr	r1, [sp, #132]	; 0x84
   173e8:	vldr	d16, [r4]
   173ec:	subs	r7, r7, #1
   173f0:	add	r4, r4, #8
   173f4:	vcvt.u32.f64	s0, d16
   173f8:	vmov	r0, s0
   173fc:	strh	r0, [r1], #2
   17400:	bne	173e8 <ReadUInt16Data+0xffc>
   17404:	b	1867c <ReadUInt16Data+0x2290>
   17408:	cmp	r7, #256	; 0x100
   1740c:	bgt	1811c <ReadUInt16Data+0x1d30>
   17410:	ldr	r0, [sp, #140]	; 0x8c
   17414:	add	r4, sp, #144	; 0x90
   17418:	mov	r1, r9
   1741c:	mov	r2, r7
   17420:	ldr	r3, [r0]
   17424:	mov	r0, r4
   17428:	bl	18b8 <fread@plt>
   1742c:	mov	r5, r0
   17430:	cmp	r7, #1
   17434:	blt	17494 <ReadUInt16Data+0x10a8>
   17438:	ldr	r6, [sp, #132]	; 0x84
   1743c:	mov	r0, #0
   17440:	beq	17470 <ReadUInt16Data+0x1084>
   17444:	bic	r0, r7, #1
   17448:	mov	r2, r6
   1744c:	mov	r1, r0
   17450:	vld1.64	{d16-d17}, [r4]!
   17454:	subs	r1, r1, #2
   17458:	vmovn.i64	d16, q8
   1745c:	vuzp.16	d16, d17
   17460:	vst1.32	{d16[0]}, [r2]!
   17464:	bne	17450 <ReadUInt16Data+0x1064>
   17468:	cmp	r0, r7
   1746c:	beq	18304 <ReadUInt16Data+0x1f18>
   17470:	add	r3, sp, #144	; 0x90
   17474:	sub	r1, r7, r0
   17478:	add	r2, r6, r0, lsl #1
   1747c:	add	r0, r3, r0, lsl #3
   17480:	ldrh	r3, [r0], #8
   17484:	subs	r1, r1, #1
   17488:	strh	r3, [r2], #2
   1748c:	bne	17480 <ReadUInt16Data+0x1094>
   17490:	b	18304 <ReadUInt16Data+0x1f18>
   17494:	ldr	r6, [sp, #132]	; 0x84
   17498:	cmp	sl, #13
   1749c:	beq	1830c <ReadUInt16Data+0x1f20>
   174a0:	b	1867c <ReadUInt16Data+0x2290>
   174a4:	sub	r0, r7, #256	; 0x100
   174a8:	add	r1, r6, #512	; 0x200
   174ac:	add	r4, sp, #144	; 0x90
   174b0:	mov	r5, #0
   174b4:	str	r9, [sp, #136]	; 0x88
   174b8:	str	r7, [sp]
   174bc:	str	r0, [sp, #128]	; 0x80
   174c0:	mov	r0, #0
   174c4:	mov	sl, r0
   174c8:	ldr	r0, [sp, #140]	; 0x8c
   174cc:	mov	r8, r1
   174d0:	ldr	r1, [sp, #136]	; 0x88
   174d4:	mov	r2, #256	; 0x100
   174d8:	mov	r9, r5
   174dc:	ldr	r3, [r0]
   174e0:	mov	r0, r4
   174e4:	bl	18b8 <fread@plt>
   174e8:	mov	r7, r0
   174ec:	mov	r5, #0
   174f0:	add	r0, r4, r5
   174f4:	bl	1c18 <Mat_int16Swap>
   174f8:	add	r1, r6, r5
   174fc:	add	r5, r5, #2
   17500:	cmp	r5, #512	; 0x200
   17504:	strh	r0, [r1]
   17508:	bne	174f0 <ReadUInt16Data+0x1104>
   1750c:	ldr	r2, [sp, #128]	; 0x80
   17510:	mov	r5, r9
   17514:	add	r0, sl, #256	; 0x100
   17518:	add	r6, r6, #512	; 0x200
   1751c:	add	r1, r8, #512	; 0x200
   17520:	add	r5, r7, r9
   17524:	cmp	r0, r2
   17528:	blt	174c4 <ReadUInt16Data+0x10d8>
   1752c:	ldr	r1, [sp]
   17530:	cmp	r0, r1
   17534:	bge	1825c <ReadUInt16Data+0x1e70>
   17538:	sub	r7, r1, r0
   1753c:	ldr	r0, [sp, #140]	; 0x8c
   17540:	ldr	r9, [sp, #136]	; 0x88
   17544:	add	r4, sp, #144	; 0x90
   17548:	mov	r2, r7
   1754c:	ldr	r3, [r0]
   17550:	mov	r0, r4
   17554:	mov	r1, r9
   17558:	bl	18b8 <fread@plt>
   1755c:	add	r5, r0, r5
   17560:	cmp	r7, #1
   17564:	blt	1867c <ReadUInt16Data+0x2290>
   17568:	ldr	r0, [sp, #128]	; 0x80
   1756c:	mov	r7, r5
   17570:	sub	r5, r0, sl
   17574:	mov	r0, r4
   17578:	bl	1c18 <Mat_int16Swap>
   1757c:	strh	r0, [r8], #2
   17580:	subs	r5, r5, #1
   17584:	add	r4, r4, #2
   17588:	bne	17574 <ReadUInt16Data+0x1188>
   1758c:	mov	r5, r7
   17590:	mul	r0, r5, r9
   17594:	sub	sp, fp, #28
   17598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1759c:	sub	r0, r7, #256	; 0x100
   175a0:	add	r1, r6, #512	; 0x200
   175a4:	add	r4, sp, #144	; 0x90
   175a8:	mov	r5, #0
   175ac:	str	r9, [sp, #136]	; 0x88
   175b0:	str	r7, [sp]
   175b4:	str	r0, [sp, #128]	; 0x80
   175b8:	mov	r0, #0
   175bc:	mov	sl, r0
   175c0:	ldr	r0, [sp, #140]	; 0x8c
   175c4:	mov	r8, r1
   175c8:	ldr	r1, [sp, #136]	; 0x88
   175cc:	mov	r2, #256	; 0x100
   175d0:	mov	r9, r5
   175d4:	ldr	r3, [r0]
   175d8:	mov	r0, r4
   175dc:	bl	18b8 <fread@plt>
   175e0:	mov	r7, r0
   175e4:	mov	r5, #0
   175e8:	add	r0, r4, r5
   175ec:	bl	1c2c <Mat_uint16Swap>
   175f0:	add	r1, r6, r5
   175f4:	add	r5, r5, #2
   175f8:	cmp	r5, #512	; 0x200
   175fc:	strh	r0, [r1]
   17600:	bne	175e8 <ReadUInt16Data+0x11fc>
   17604:	ldr	r2, [sp, #128]	; 0x80
   17608:	mov	r5, r9
   1760c:	add	r0, sl, #256	; 0x100
   17610:	add	r6, r6, #512	; 0x200
   17614:	add	r1, r8, #512	; 0x200
   17618:	add	r5, r7, r9
   1761c:	cmp	r0, r2
   17620:	blt	175bc <ReadUInt16Data+0x11d0>
   17624:	ldr	r1, [sp]
   17628:	cmp	r0, r1
   1762c:	bge	1826c <ReadUInt16Data+0x1e80>
   17630:	sub	r7, r1, r0
   17634:	ldr	r0, [sp, #140]	; 0x8c
   17638:	ldr	r9, [sp, #136]	; 0x88
   1763c:	add	r4, sp, #144	; 0x90
   17640:	mov	r2, r7
   17644:	ldr	r3, [r0]
   17648:	mov	r0, r4
   1764c:	mov	r1, r9
   17650:	bl	18b8 <fread@plt>
   17654:	add	r5, r0, r5
   17658:	cmp	r7, #1
   1765c:	blt	1867c <ReadUInt16Data+0x2290>
   17660:	ldr	r0, [sp, #128]	; 0x80
   17664:	mov	r7, r5
   17668:	sub	r5, r0, sl
   1766c:	mov	r0, r4
   17670:	bl	1c2c <Mat_uint16Swap>
   17674:	strh	r0, [r8], #2
   17678:	subs	r5, r5, #1
   1767c:	add	r4, r4, #2
   17680:	bne	1766c <ReadUInt16Data+0x1280>
   17684:	mov	r5, r7
   17688:	mul	r0, r5, r9
   1768c:	sub	sp, fp, #28
   17690:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17694:	sub	r0, r7, #256	; 0x100
   17698:	add	r1, r6, #512	; 0x200
   1769c:	mov	r5, #0
   176a0:	str	r9, [sp, #136]	; 0x88
   176a4:	str	r7, [sp]
   176a8:	str	r0, [sp, #128]	; 0x80
   176ac:	mov	r0, #0
   176b0:	str	r0, [sp, #132]	; 0x84
   176b4:	ldr	r0, [sp, #140]	; 0x8c
   176b8:	mov	r9, r1
   176bc:	ldr	r1, [sp, #136]	; 0x88
   176c0:	add	r7, sp, #144	; 0x90
   176c4:	mov	r2, #256	; 0x100
   176c8:	mov	r8, r5
   176cc:	mov	sl, r6
   176d0:	ldr	r3, [r0]
   176d4:	mov	r0, r7
   176d8:	bl	18b8 <fread@plt>
   176dc:	mov	r4, r0
   176e0:	mov	r5, #0
   176e4:	mov	r0, r7
   176e8:	add	r6, sl, r5
   176ec:	bl	1bf0 <Mat_int32Swap>
   176f0:	add	r5, r5, #2
   176f4:	add	r7, r7, #4
   176f8:	strh	r0, [r6]
   176fc:	cmp	r5, #512	; 0x200
   17700:	bne	176e4 <ReadUInt16Data+0x12f8>
   17704:	ldr	r7, [sp, #132]	; 0x84
   17708:	ldr	r2, [sp, #128]	; 0x80
   1770c:	mov	r5, r8
   17710:	add	sl, sl, #512	; 0x200
   17714:	add	r1, r9, #512	; 0x200
   17718:	add	r5, r4, r8
   1771c:	mov	r6, sl
   17720:	add	r0, r7, #256	; 0x100
   17724:	cmp	r0, r2
   17728:	blt	176b0 <ReadUInt16Data+0x12c4>
   1772c:	ldr	r1, [sp]
   17730:	cmp	r0, r1
   17734:	bge	1827c <ReadUInt16Data+0x1e90>
   17738:	sub	r6, r1, r0
   1773c:	ldr	r0, [sp, #140]	; 0x8c
   17740:	ldr	r1, [sp, #136]	; 0x88
   17744:	add	r4, sp, #144	; 0x90
   17748:	mov	r2, r6
   1774c:	ldr	r3, [r0]
   17750:	mov	r0, r4
   17754:	bl	18b8 <fread@plt>
   17758:	add	r5, r0, r5
   1775c:	cmp	r6, #1
   17760:	blt	18658 <ReadUInt16Data+0x226c>
   17764:	ldr	r0, [sp, #128]	; 0x80
   17768:	mov	r6, r5
   1776c:	sub	r5, r0, r7
   17770:	mov	r0, r4
   17774:	bl	1bf0 <Mat_int32Swap>
   17778:	strh	r0, [r9], #2
   1777c:	subs	r5, r5, #1
   17780:	add	r4, r4, #4
   17784:	bne	17770 <ReadUInt16Data+0x1384>
   17788:	b	184e8 <ReadUInt16Data+0x20fc>
   1778c:	sub	r0, r7, #256	; 0x100
   17790:	add	r1, r6, #512	; 0x200
   17794:	mov	r5, #0
   17798:	str	r9, [sp, #136]	; 0x88
   1779c:	str	r7, [sp]
   177a0:	str	r0, [sp, #128]	; 0x80
   177a4:	mov	r0, #0
   177a8:	str	r0, [sp, #132]	; 0x84
   177ac:	ldr	r0, [sp, #140]	; 0x8c
   177b0:	mov	r9, r1
   177b4:	ldr	r1, [sp, #136]	; 0x88
   177b8:	add	r7, sp, #144	; 0x90
   177bc:	mov	r2, #256	; 0x100
   177c0:	mov	r8, r5
   177c4:	mov	sl, r6
   177c8:	ldr	r3, [r0]
   177cc:	mov	r0, r7
   177d0:	bl	18b8 <fread@plt>
   177d4:	mov	r4, r0
   177d8:	mov	r5, #0
   177dc:	mov	r0, r7
   177e0:	add	r6, sl, r5
   177e4:	bl	1c04 <Mat_uint32Swap>
   177e8:	add	r5, r5, #2
   177ec:	add	r7, r7, #4
   177f0:	strh	r0, [r6]
   177f4:	cmp	r5, #512	; 0x200
   177f8:	bne	177dc <ReadUInt16Data+0x13f0>
   177fc:	ldr	r7, [sp, #132]	; 0x84
   17800:	ldr	r2, [sp, #128]	; 0x80
   17804:	mov	r5, r8
   17808:	add	sl, sl, #512	; 0x200
   1780c:	add	r1, r9, #512	; 0x200
   17810:	add	r5, r4, r8
   17814:	mov	r6, sl
   17818:	add	r0, r7, #256	; 0x100
   1781c:	cmp	r0, r2
   17820:	blt	177a8 <ReadUInt16Data+0x13bc>
   17824:	ldr	r1, [sp]
   17828:	cmp	r0, r1
   1782c:	bge	1828c <ReadUInt16Data+0x1ea0>
   17830:	sub	r6, r1, r0
   17834:	ldr	r0, [sp, #140]	; 0x8c
   17838:	ldr	r1, [sp, #136]	; 0x88
   1783c:	add	r4, sp, #144	; 0x90
   17840:	mov	r2, r6
   17844:	ldr	r3, [r0]
   17848:	mov	r0, r4
   1784c:	bl	18b8 <fread@plt>
   17850:	add	r5, r0, r5
   17854:	cmp	r6, #1
   17858:	blt	18668 <ReadUInt16Data+0x227c>
   1785c:	ldr	r0, [sp, #128]	; 0x80
   17860:	mov	r6, r5
   17864:	sub	r5, r0, r7
   17868:	mov	r0, r4
   1786c:	bl	1c04 <Mat_uint32Swap>
   17870:	strh	r0, [r9], #2
   17874:	subs	r5, r5, #1
   17878:	add	r4, r4, #4
   1787c:	bne	17868 <ReadUInt16Data+0x147c>
   17880:	b	184e8 <ReadUInt16Data+0x20fc>
   17884:	sub	r0, r7, #256	; 0x100
   17888:	add	r1, r6, #512	; 0x200
   1788c:	mov	r5, #0
   17890:	str	r9, [sp, #136]	; 0x88
   17894:	str	r7, [sp]
   17898:	str	r0, [sp, #128]	; 0x80
   1789c:	mov	r0, #0
   178a0:	mov	sl, r0
   178a4:	ldr	r0, [sp, #140]	; 0x8c
   178a8:	mov	r8, r1
   178ac:	ldr	r1, [sp, #136]	; 0x88
   178b0:	add	r7, sp, #144	; 0x90
   178b4:	mov	r2, #256	; 0x100
   178b8:	mov	r9, r5
   178bc:	ldr	r3, [r0]
   178c0:	mov	r0, r7
   178c4:	bl	18b8 <fread@plt>
   178c8:	mov	r4, r0
   178cc:	mov	r5, #0
   178d0:	mov	r0, r7
   178d4:	bl	1c44 <Mat_floatSwap>
   178d8:	vcvt.u32.f32	s0, s0
   178dc:	add	r0, r6, r5
   178e0:	add	r5, r5, #2
   178e4:	add	r7, r7, #4
   178e8:	vmov	r1, s0
   178ec:	cmp	r5, #512	; 0x200
   178f0:	strh	r1, [r0]
   178f4:	bne	178d0 <ReadUInt16Data+0x14e4>
   178f8:	ldr	r2, [sp, #128]	; 0x80
   178fc:	mov	r5, r9
   17900:	add	r0, sl, #256	; 0x100
   17904:	add	r6, r6, #512	; 0x200
   17908:	add	r1, r8, #512	; 0x200
   1790c:	add	r5, r4, r9
   17910:	cmp	r0, r2
   17914:	blt	178a0 <ReadUInt16Data+0x14b4>
   17918:	ldr	r1, [sp]
   1791c:	cmp	r0, r1
   17920:	bge	1829c <ReadUInt16Data+0x1eb0>
   17924:	sub	r7, r1, r0
   17928:	ldr	r0, [sp, #140]	; 0x8c
   1792c:	ldr	r9, [sp, #136]	; 0x88
   17930:	add	r4, sp, #144	; 0x90
   17934:	mov	r2, r7
   17938:	ldr	r3, [r0]
   1793c:	mov	r0, r4
   17940:	mov	r1, r9
   17944:	bl	18b8 <fread@plt>
   17948:	add	r5, r0, r5
   1794c:	cmp	r7, #1
   17950:	blt	1867c <ReadUInt16Data+0x2290>
   17954:	ldr	r0, [sp, #128]	; 0x80
   17958:	mov	r7, r5
   1795c:	sub	r5, r0, sl
   17960:	mov	r0, r4
   17964:	bl	1c44 <Mat_floatSwap>
   17968:	vcvt.u32.f32	s0, s0
   1796c:	subs	r5, r5, #1
   17970:	add	r4, r4, #4
   17974:	vmov	r0, s0
   17978:	strh	r0, [r8], #2
   1797c:	bne	17960 <ReadUInt16Data+0x1574>
   17980:	mov	r5, r7
   17984:	mul	r0, r5, r9
   17988:	sub	sp, fp, #28
   1798c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17990:	sub	r0, r7, #256	; 0x100
   17994:	add	r1, r6, #512	; 0x200
   17998:	mov	r5, #0
   1799c:	str	r9, [sp, #136]	; 0x88
   179a0:	str	r7, [sp]
   179a4:	str	r0, [sp, #128]	; 0x80
   179a8:	mov	r0, #0
   179ac:	mov	sl, r0
   179b0:	ldr	r0, [sp, #140]	; 0x8c
   179b4:	mov	r8, r1
   179b8:	ldr	r1, [sp, #136]	; 0x88
   179bc:	add	r7, sp, #144	; 0x90
   179c0:	mov	r2, #256	; 0x100
   179c4:	mov	r9, r5
   179c8:	ldr	r3, [r0]
   179cc:	mov	r0, r7
   179d0:	bl	18b8 <fread@plt>
   179d4:	mov	r4, r0
   179d8:	mov	r5, #0
   179dc:	mov	r0, r7
   179e0:	bl	1c88 <Mat_doubleSwap>
   179e4:	vcvt.u32.f64	s0, d0
   179e8:	add	r0, r6, r5
   179ec:	add	r5, r5, #2
   179f0:	add	r7, r7, #8
   179f4:	vmov	r1, s0
   179f8:	cmp	r5, #512	; 0x200
   179fc:	strh	r1, [r0]
   17a00:	bne	179dc <ReadUInt16Data+0x15f0>
   17a04:	ldr	r2, [sp, #128]	; 0x80
   17a08:	mov	r5, r9
   17a0c:	add	r0, sl, #256	; 0x100
   17a10:	add	r6, r6, #512	; 0x200
   17a14:	add	r1, r8, #512	; 0x200
   17a18:	add	r5, r4, r9
   17a1c:	cmp	r0, r2
   17a20:	blt	179ac <ReadUInt16Data+0x15c0>
   17a24:	ldr	r1, [sp]
   17a28:	cmp	r0, r1
   17a2c:	bge	1810c <ReadUInt16Data+0x1d20>
   17a30:	sub	r7, r1, r0
   17a34:	ldr	r0, [sp, #140]	; 0x8c
   17a38:	ldr	r9, [sp, #136]	; 0x88
   17a3c:	add	r4, sp, #144	; 0x90
   17a40:	mov	r2, r7
   17a44:	ldr	r3, [r0]
   17a48:	mov	r0, r4
   17a4c:	mov	r1, r9
   17a50:	bl	18b8 <fread@plt>
   17a54:	add	r5, r0, r5
   17a58:	cmp	r7, #1
   17a5c:	blt	1867c <ReadUInt16Data+0x2290>
   17a60:	ldr	r0, [sp, #128]	; 0x80
   17a64:	mov	r7, r5
   17a68:	sub	r5, r0, sl
   17a6c:	mov	r0, r4
   17a70:	bl	1c88 <Mat_doubleSwap>
   17a74:	vcvt.u32.f64	s0, d0
   17a78:	subs	r5, r5, #1
   17a7c:	add	r4, r4, #8
   17a80:	vmov	r0, s0
   17a84:	strh	r0, [r8], #2
   17a88:	bne	17a6c <ReadUInt16Data+0x1680>
   17a8c:	mov	r5, r7
   17a90:	mul	r0, r5, r9
   17a94:	sub	sp, fp, #28
   17a98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a9c:	sub	r0, r7, #256	; 0x100
   17aa0:	str	sl, [sp, #120]	; 0x78
   17aa4:	add	r1, r6, #512	; 0x200
   17aa8:	mov	r5, r6
   17aac:	mov	sl, #0
   17ab0:	str	r7, [sp]
   17ab4:	str	r9, [sp, #136]	; 0x88
   17ab8:	str	r0, [sp, #124]	; 0x7c
   17abc:	mov	r0, #0
   17ac0:	str	r0, [sp, #128]	; 0x80
   17ac4:	ldr	r0, [sp, #140]	; 0x8c
   17ac8:	add	r4, sp, #144	; 0x90
   17acc:	mov	r6, r1
   17ad0:	mov	r1, r9
   17ad4:	mov	r2, #256	; 0x100
   17ad8:	ldr	r3, [r0]
   17adc:	mov	r0, r4
   17ae0:	bl	18b8 <fread@plt>
   17ae4:	mov	r8, r0
   17ae8:	mov	r7, #0
   17aec:	mov	r0, r4
   17af0:	add	r9, r5, r7
   17af4:	bl	1b84 <Mat_int64Swap>
   17af8:	add	r7, r7, #2
   17afc:	add	r4, r4, #8
   17b00:	strh	r0, [r9]
   17b04:	cmp	r7, #512	; 0x200
   17b08:	bne	17aec <ReadUInt16Data+0x1700>
   17b0c:	add	sl, r8, sl
   17b10:	add	r1, r6, #512	; 0x200
   17b14:	mov	r8, r6
   17b18:	ldr	r6, [sp, #128]	; 0x80
   17b1c:	ldr	r2, [sp, #124]	; 0x7c
   17b20:	ldr	r9, [sp, #136]	; 0x88
   17b24:	add	r5, r5, #512	; 0x200
   17b28:	add	r0, r6, #256	; 0x100
   17b2c:	cmp	r0, r2
   17b30:	blt	17ac0 <ReadUInt16Data+0x16d4>
   17b34:	ldr	r7, [sp]
   17b38:	cmp	r0, r7
   17b3c:	bge	182ac <ReadUInt16Data+0x1ec0>
   17b40:	sub	r7, r7, r0
   17b44:	ldr	r0, [sp, #140]	; 0x8c
   17b48:	add	r4, sp, #144	; 0x90
   17b4c:	mov	r1, r9
   17b50:	mov	r2, r7
   17b54:	ldr	r3, [r0]
   17b58:	mov	r0, r4
   17b5c:	bl	18b8 <fread@plt>
   17b60:	mov	r5, sl
   17b64:	cmp	r7, #1
   17b68:	add	r5, r0, sl
   17b6c:	blt	182f8 <ReadUInt16Data+0x1f0c>
   17b70:	ldr	r0, [sp, #124]	; 0x7c
   17b74:	ldr	sl, [sp, #120]	; 0x78
   17b78:	mov	r7, r5
   17b7c:	sub	r5, r0, r6
   17b80:	mov	r0, r4
   17b84:	bl	1b84 <Mat_int64Swap>
   17b88:	strh	r0, [r8], #2
   17b8c:	subs	r5, r5, #1
   17b90:	add	r4, r4, #8
   17b94:	bne	17b80 <ReadUInt16Data+0x1794>
   17b98:	mov	r5, r7
   17b9c:	ldr	r6, [sp, #132]	; 0x84
   17ba0:	ldr	r7, [sp]
   17ba4:	cmp	sl, #13
   17ba8:	beq	1830c <ReadUInt16Data+0x1f20>
   17bac:	b	1867c <ReadUInt16Data+0x2290>
   17bb0:	str	r9, [sp, #136]	; 0x88
   17bb4:	ldr	r9, [sp, #132]	; 0x84
   17bb8:	ldr	sl, [sp, #140]	; 0x8c
   17bbc:	sub	r0, r7, #256	; 0x100
   17bc0:	lsl	r4, r7, #1
   17bc4:	mov	r6, #0
   17bc8:	add	r8, sp, #144	; 0x90
   17bcc:	mov	r5, #0
   17bd0:	str	r7, [sp]
   17bd4:	str	r0, [sp, #128]	; 0x80
   17bd8:	ldr	r3, [sl]
   17bdc:	ldr	r1, [sp, #136]	; 0x88
   17be0:	mov	r0, r8
   17be4:	mov	r2, #256	; 0x100
   17be8:	bl	18b8 <fread@plt>
   17bec:	mov	r7, r0
   17bf0:	add	r0, r9, r6, lsl #1
   17bf4:	mov	r1, r8
   17bf8:	mov	r2, #512	; 0x200
   17bfc:	bl	181c <memcpy@plt>
   17c00:	ldr	r0, [sp, #128]	; 0x80
   17c04:	add	r6, r6, #256	; 0x100
   17c08:	add	r5, r7, r5
   17c0c:	sub	r4, r4, #512	; 0x200
   17c10:	cmp	r6, r0
   17c14:	blt	17bd8 <ReadUInt16Data+0x17ec>
   17c18:	ldr	r0, [sp]
   17c1c:	ldr	r9, [sp, #136]	; 0x88
   17c20:	cmp	r6, r0
   17c24:	bge	1867c <ReadUInt16Data+0x2290>
   17c28:	sub	r7, r0, r6
   17c2c:	ldr	r0, [sp, #140]	; 0x8c
   17c30:	mov	r1, r9
   17c34:	mov	r2, r7
   17c38:	ldr	r3, [r0]
   17c3c:	add	r0, sp, #144	; 0x90
   17c40:	bl	18b8 <fread@plt>
   17c44:	add	r5, r0, r5
   17c48:	cmp	r7, #1
   17c4c:	blt	1867c <ReadUInt16Data+0x2290>
   17c50:	ldr	r0, [sp, #132]	; 0x84
   17c54:	add	r1, sp, #144	; 0x90
   17c58:	mov	r2, r4
   17c5c:	add	r0, r0, r6, lsl #1
   17c60:	bl	181c <memcpy@plt>
   17c64:	mul	r0, r5, r9
   17c68:	sub	sp, fp, #28
   17c6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c70:	sub	r1, r7, #256	; 0x100
   17c74:	str	r7, [sp]
   17c78:	add	r0, r6, #512	; 0x200
   17c7c:	mov	r2, #256	; 0x100
   17c80:	add	r7, sp, #144	; 0x90
   17c84:	mov	r5, r6
   17c88:	mov	r8, #0
   17c8c:	str	r1, [sp, #128]	; 0x80
   17c90:	mov	r1, #0
   17c94:	mov	sl, r0
   17c98:	ldr	r0, [sp, #140]	; 0x8c
   17c9c:	mov	r6, r1
   17ca0:	mov	r4, r2
   17ca4:	mov	r1, r9
   17ca8:	mov	r2, #256	; 0x100
   17cac:	ldr	r3, [r0]
   17cb0:	mov	r0, r7
   17cb4:	bl	18b8 <fread@plt>
   17cb8:	mov	r1, #0
   17cbc:	mov	r2, r7
   17cc0:	vld1.32	{d16-d17}, [r2]!
   17cc4:	add	r3, r5, r1
   17cc8:	add	r1, r1, #8
   17ccc:	cmp	r1, #512	; 0x200
   17cd0:	vmovn.i32	d16, q8
   17cd4:	vst1.16	{d16}, [r3]
   17cd8:	bne	17cc0 <ReadUInt16Data+0x18d4>
   17cdc:	ldr	r3, [sp, #128]	; 0x80
   17ce0:	add	r1, r6, #256	; 0x100
   17ce4:	add	r8, r0, r8
   17ce8:	add	r5, r5, #512	; 0x200
   17cec:	add	r0, sl, #512	; 0x200
   17cf0:	add	r2, r4, #256	; 0x100
   17cf4:	cmp	r1, r3
   17cf8:	blt	17c94 <ReadUInt16Data+0x18a8>
   17cfc:	ldr	r0, [sp]
   17d00:	cmp	r1, r0
   17d04:	bge	182b8 <ReadUInt16Data+0x1ecc>
   17d08:	sub	r5, r0, r1
   17d0c:	ldr	r0, [sp, #140]	; 0x8c
   17d10:	add	r7, sp, #144	; 0x90
   17d14:	mov	r1, r9
   17d18:	mov	r2, r5
   17d1c:	ldr	r3, [r0]
   17d20:	mov	r0, r7
   17d24:	bl	18b8 <fread@plt>
   17d28:	mov	r2, r5
   17d2c:	mov	r5, r8
   17d30:	add	r5, r0, r8
   17d34:	cmp	r2, #1
   17d38:	blt	1867c <ReadUInt16Data+0x2290>
   17d3c:	ldr	r3, [sp, #132]	; 0x84
   17d40:	mov	r0, #0
   17d44:	cmp	r2, #4
   17d48:	bcc	17d78 <ReadUInt16Data+0x198c>
   17d4c:	ldr	r0, [sp, #128]	; 0x80
   17d50:	sub	r0, r0, r6
   17d54:	bic	r1, r0, #3
   17d58:	bic	r0, r2, #3
   17d5c:	vld1.32	{d16-d17}, [r7]!
   17d60:	subs	r1, r1, #4
   17d64:	vmovn.i32	d16, q8
   17d68:	vst1.16	{d16}, [sl]!
   17d6c:	bne	17d5c <ReadUInt16Data+0x1970>
   17d70:	cmp	r2, r0
   17d74:	beq	1867c <ReadUInt16Data+0x2290>
   17d78:	add	r2, r0, r4
   17d7c:	add	r1, sp, #144	; 0x90
   17d80:	add	r2, r3, r2, lsl #1
   17d84:	ldr	r3, [sp, #128]	; 0x80
   17d88:	add	r1, r1, r0, lsl #2
   17d8c:	sub	r3, r3, r6
   17d90:	sub	r0, r3, r0
   17d94:	ldr	r3, [r1], #4
   17d98:	subs	r0, r0, #1
   17d9c:	strh	r3, [r2], #2
   17da0:	bne	17d94 <ReadUInt16Data+0x19a8>
   17da4:	b	1867c <ReadUInt16Data+0x2290>
   17da8:	sub	r1, r7, #256	; 0x100
   17dac:	str	r7, [sp]
   17db0:	add	r0, r6, #512	; 0x200
   17db4:	mov	r2, #256	; 0x100
   17db8:	add	r7, sp, #144	; 0x90
   17dbc:	mov	r5, r6
   17dc0:	mov	r8, #0
   17dc4:	str	r1, [sp, #128]	; 0x80
   17dc8:	mov	r1, #0
   17dcc:	mov	sl, r0
   17dd0:	ldr	r0, [sp, #140]	; 0x8c
   17dd4:	mov	r6, r1
   17dd8:	mov	r4, r2
   17ddc:	mov	r1, r9
   17de0:	mov	r2, #256	; 0x100
   17de4:	ldr	r3, [r0]
   17de8:	mov	r0, r7
   17dec:	bl	18b8 <fread@plt>
   17df0:	mov	r1, #0
   17df4:	mov	r2, r7
   17df8:	vld1.32	{d16-d17}, [r2]!
   17dfc:	add	r3, r5, r1
   17e00:	add	r1, r1, #8
   17e04:	cmp	r1, #512	; 0x200
   17e08:	vmovn.i32	d16, q8
   17e0c:	vst1.16	{d16}, [r3]
   17e10:	bne	17df8 <ReadUInt16Data+0x1a0c>
   17e14:	ldr	r3, [sp, #128]	; 0x80
   17e18:	add	r1, r6, #256	; 0x100
   17e1c:	add	r8, r0, r8
   17e20:	add	r5, r5, #512	; 0x200
   17e24:	add	r0, sl, #512	; 0x200
   17e28:	add	r2, r4, #256	; 0x100
   17e2c:	cmp	r1, r3
   17e30:	blt	17dcc <ReadUInt16Data+0x19e0>
   17e34:	ldr	r0, [sp]
   17e38:	cmp	r1, r0
   17e3c:	bge	182c8 <ReadUInt16Data+0x1edc>
   17e40:	sub	r5, r0, r1
   17e44:	ldr	r0, [sp, #140]	; 0x8c
   17e48:	add	r7, sp, #144	; 0x90
   17e4c:	mov	r1, r9
   17e50:	mov	r2, r5
   17e54:	ldr	r3, [r0]
   17e58:	mov	r0, r7
   17e5c:	bl	18b8 <fread@plt>
   17e60:	mov	r2, r5
   17e64:	mov	r5, r8
   17e68:	add	r5, r0, r8
   17e6c:	cmp	r2, #1
   17e70:	blt	1867c <ReadUInt16Data+0x2290>
   17e74:	ldr	r3, [sp, #132]	; 0x84
   17e78:	mov	r0, #0
   17e7c:	cmp	r2, #4
   17e80:	bcc	17eb0 <ReadUInt16Data+0x1ac4>
   17e84:	ldr	r0, [sp, #128]	; 0x80
   17e88:	sub	r0, r0, r6
   17e8c:	bic	r1, r0, #3
   17e90:	bic	r0, r2, #3
   17e94:	vld1.32	{d16-d17}, [r7]!
   17e98:	subs	r1, r1, #4
   17e9c:	vmovn.i32	d16, q8
   17ea0:	vst1.16	{d16}, [sl]!
   17ea4:	bne	17e94 <ReadUInt16Data+0x1aa8>
   17ea8:	cmp	r2, r0
   17eac:	beq	1867c <ReadUInt16Data+0x2290>
   17eb0:	add	r2, r0, r4
   17eb4:	add	r1, sp, #144	; 0x90
   17eb8:	add	r2, r3, r2, lsl #1
   17ebc:	ldr	r3, [sp, #128]	; 0x80
   17ec0:	add	r1, r1, r0, lsl #2
   17ec4:	sub	r3, r3, r6
   17ec8:	sub	r0, r3, r0
   17ecc:	ldr	r3, [r1], #4
   17ed0:	subs	r0, r0, #1
   17ed4:	strh	r3, [r2], #2
   17ed8:	bne	17ecc <ReadUInt16Data+0x1ae0>
   17edc:	b	1867c <ReadUInt16Data+0x2290>
   17ee0:	sub	r1, r7, #256	; 0x100
   17ee4:	str	r7, [sp]
   17ee8:	add	r0, r6, #512	; 0x200
   17eec:	mov	r2, #256	; 0x100
   17ef0:	add	r7, sp, #144	; 0x90
   17ef4:	mov	r5, r6
   17ef8:	mov	r8, #0
   17efc:	str	r1, [sp, #128]	; 0x80
   17f00:	mov	r1, #0
   17f04:	mov	sl, r0
   17f08:	ldr	r0, [sp, #140]	; 0x8c
   17f0c:	mov	r6, r1
   17f10:	mov	r4, r2
   17f14:	mov	r1, r9
   17f18:	mov	r2, #256	; 0x100
   17f1c:	ldr	r3, [r0]
   17f20:	mov	r0, r7
   17f24:	bl	18b8 <fread@plt>
   17f28:	mov	r1, #0
   17f2c:	mov	r2, r7
   17f30:	vld1.32	{d16-d17}, [r2]!
   17f34:	add	r3, r5, r1
   17f38:	add	r1, r1, #8
   17f3c:	cmp	r1, #512	; 0x200
   17f40:	vcvt.u32.f32	q8, q8
   17f44:	vmovn.i32	d16, q8
   17f48:	vst1.16	{d16}, [r3]
   17f4c:	bne	17f30 <ReadUInt16Data+0x1b44>
   17f50:	ldr	r3, [sp, #128]	; 0x80
   17f54:	add	r1, r6, #256	; 0x100
   17f58:	add	r8, r0, r8
   17f5c:	add	r5, r5, #512	; 0x200
   17f60:	add	r0, sl, #512	; 0x200
   17f64:	add	r2, r4, #256	; 0x100
   17f68:	cmp	r1, r3
   17f6c:	blt	17f04 <ReadUInt16Data+0x1b18>
   17f70:	ldr	r0, [sp]
   17f74:	cmp	r1, r0
   17f78:	bge	182d8 <ReadUInt16Data+0x1eec>
   17f7c:	sub	r5, r0, r1
   17f80:	ldr	r0, [sp, #140]	; 0x8c
   17f84:	add	r7, sp, #144	; 0x90
   17f88:	mov	r1, r9
   17f8c:	mov	r2, r5
   17f90:	ldr	r3, [r0]
   17f94:	mov	r0, r7
   17f98:	bl	18b8 <fread@plt>
   17f9c:	mov	r2, r5
   17fa0:	mov	r5, r8
   17fa4:	add	r5, r0, r8
   17fa8:	cmp	r2, #1
   17fac:	blt	1867c <ReadUInt16Data+0x2290>
   17fb0:	ldr	r3, [sp, #132]	; 0x84
   17fb4:	mov	r0, #0
   17fb8:	cmp	r2, #4
   17fbc:	bcc	17ff0 <ReadUInt16Data+0x1c04>
   17fc0:	ldr	r0, [sp, #128]	; 0x80
   17fc4:	sub	r0, r0, r6
   17fc8:	bic	r1, r0, #3
   17fcc:	bic	r0, r2, #3
   17fd0:	vld1.32	{d16-d17}, [r7]!
   17fd4:	subs	r1, r1, #4
   17fd8:	vcvt.u32.f32	q8, q8
   17fdc:	vmovn.i32	d16, q8
   17fe0:	vst1.16	{d16}, [sl]!
   17fe4:	bne	17fd0 <ReadUInt16Data+0x1be4>
   17fe8:	cmp	r2, r0
   17fec:	beq	1867c <ReadUInt16Data+0x2290>
   17ff0:	add	r2, r0, r4
   17ff4:	add	r1, sp, #144	; 0x90
   17ff8:	add	r2, r3, r2, lsl #1
   17ffc:	ldr	r3, [sp, #128]	; 0x80
   18000:	add	r1, r1, r0, lsl #2
   18004:	sub	r3, r3, r6
   18008:	sub	r0, r3, r0
   1800c:	vldr	s0, [r1]
   18010:	subs	r0, r0, #1
   18014:	add	r1, r1, #4
   18018:	vcvt.u32.f32	s0, s0
   1801c:	vmov	r3, s0
   18020:	strh	r3, [r2], #2
   18024:	bne	1800c <ReadUInt16Data+0x1c20>
   18028:	b	1867c <ReadUInt16Data+0x2290>
   1802c:	add	r1, r6, #512	; 0x200
   18030:	sub	sl, r7, #256	; 0x100
   18034:	mov	r0, #0
   18038:	add	r8, sp, #144	; 0x90
   1803c:	mov	r5, #0
   18040:	str	r9, [sp, #136]	; 0x88
   18044:	str	r7, [sp]
   18048:	mov	r9, r0
   1804c:	ldr	r0, [sp, #140]	; 0x8c
   18050:	mov	r7, r1
   18054:	ldr	r1, [sp, #136]	; 0x88
   18058:	mov	r2, #256	; 0x100
   1805c:	mov	r4, r5
   18060:	ldr	r3, [r0]
   18064:	mov	r0, r8
   18068:	bl	18b8 <fread@plt>
   1806c:	mov	r1, #0
   18070:	mov	r2, r8
   18074:	vldr	d16, [r2]
   18078:	add	r3, r6, r1
   1807c:	add	r1, r1, #2
   18080:	add	r2, r2, #8
   18084:	cmp	r1, #512	; 0x200
   18088:	vcvt.u32.f64	s0, d16
   1808c:	vmov	r5, s0
   18090:	strh	r5, [r3]
   18094:	bne	18074 <ReadUInt16Data+0x1c88>
   18098:	mov	r5, r4
   1809c:	add	r6, r6, #512	; 0x200
   180a0:	add	r1, r7, #512	; 0x200
   180a4:	add	r5, r0, r4
   180a8:	add	r0, r9, #256	; 0x100
   180ac:	cmp	r0, sl
   180b0:	blt	18048 <ReadUInt16Data+0x1c5c>
   180b4:	ldr	r1, [sp]
   180b8:	cmp	r0, r1
   180bc:	bge	1810c <ReadUInt16Data+0x1d20>
   180c0:	sub	r8, r1, r0
   180c4:	ldr	r0, [sp, #140]	; 0x8c
   180c8:	ldr	r1, [sp, #136]	; 0x88
   180cc:	add	r4, sp, #144	; 0x90
   180d0:	mov	r2, r8
   180d4:	ldr	r3, [r0]
   180d8:	mov	r0, r4
   180dc:	bl	18b8 <fread@plt>
   180e0:	add	r5, r0, r5
   180e4:	cmp	r8, #1
   180e8:	blt	1810c <ReadUInt16Data+0x1d20>
   180ec:	sub	r0, sl, r9
   180f0:	vldr	d16, [r4]
   180f4:	subs	r0, r0, #1
   180f8:	add	r4, r4, #8
   180fc:	vcvt.u32.f64	s0, d16
   18100:	vmov	r1, s0
   18104:	strh	r1, [r7], #2
   18108:	bne	180f0 <ReadUInt16Data+0x1d04>
   1810c:	ldr	r9, [sp, #136]	; 0x88
   18110:	mul	r0, r5, r9
   18114:	sub	sp, fp, #28
   18118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1811c:	str	r9, [sp, #136]	; 0x88
   18120:	add	r0, r6, #512	; 0x200
   18124:	mov	r9, r6
   18128:	ldr	r6, [sp, #140]	; 0x8c
   1812c:	sub	r1, r7, #256	; 0x100
   18130:	str	sl, [sp, #120]	; 0x78
   18134:	mov	r2, #256	; 0x100
   18138:	add	sl, sp, #144	; 0x90
   1813c:	mov	r5, #0
   18140:	str	r7, [sp]
   18144:	str	r1, [sp, #128]	; 0x80
   18148:	mov	r1, #0
   1814c:	mov	r7, r1
   18150:	ldr	r3, [r6]
   18154:	ldr	r1, [sp, #136]	; 0x88
   18158:	mov	r8, r2
   1815c:	mov	r4, r0
   18160:	mov	r0, sl
   18164:	mov	r2, #256	; 0x100
   18168:	bl	18b8 <fread@plt>
   1816c:	mov	r1, #0
   18170:	mov	r2, sl
   18174:	vld1.64	{d16-d17}, [r2]!
   18178:	add	r3, r9, r1
   1817c:	add	r1, r1, #4
   18180:	cmp	r1, #512	; 0x200
   18184:	vmovn.i64	d16, q8
   18188:	vuzp.16	d16, d17
   1818c:	vst1.32	{d16[0]}, [r3]
   18190:	bne	18174 <ReadUInt16Data+0x1d88>
   18194:	ldr	r3, [sp, #128]	; 0x80
   18198:	add	r1, r7, #256	; 0x100
   1819c:	add	r5, r0, r5
   181a0:	add	r9, r9, #512	; 0x200
   181a4:	add	r0, r4, #512	; 0x200
   181a8:	add	r2, r8, #256	; 0x100
   181ac:	cmp	r1, r3
   181b0:	blt	1814c <ReadUInt16Data+0x1d60>
   181b4:	ldr	r0, [sp]
   181b8:	cmp	r1, r0
   181bc:	bge	182e8 <ReadUInt16Data+0x1efc>
   181c0:	ldr	r9, [sp, #136]	; 0x88
   181c4:	ldr	r3, [r6]
   181c8:	add	sl, sp, #144	; 0x90
   181cc:	sub	r2, r0, r1
   181d0:	mov	r0, sl
   181d4:	mov	r6, r2
   181d8:	mov	r1, r9
   181dc:	bl	18b8 <fread@plt>
   181e0:	add	r5, r0, r5
   181e4:	cmp	r6, #1
   181e8:	blt	182f8 <ReadUInt16Data+0x1f0c>
   181ec:	mov	r2, r6
   181f0:	ldr	r6, [sp, #132]	; 0x84
   181f4:	mov	r0, #0
   181f8:	beq	1822c <ReadUInt16Data+0x1e40>
   181fc:	ldr	r0, [sp, #128]	; 0x80
   18200:	sub	r0, r0, r7
   18204:	bic	r1, r0, #1
   18208:	bic	r0, r2, #1
   1820c:	vld1.64	{d16-d17}, [sl]!
   18210:	subs	r1, r1, #2
   18214:	vmovn.i64	d16, q8
   18218:	vuzp.16	d16, d17
   1821c:	vst1.32	{d16[0]}, [r4]!
   18220:	bne	1820c <ReadUInt16Data+0x1e20>
   18224:	cmp	r2, r0
   18228:	beq	182fc <ReadUInt16Data+0x1f10>
   1822c:	ldr	r3, [sp, #128]	; 0x80
   18230:	add	r1, sp, #144	; 0x90
   18234:	add	r2, r0, r8
   18238:	add	r1, r1, r0, lsl #3
   1823c:	add	r2, r6, r2, lsl #1
   18240:	sub	r3, r3, r7
   18244:	sub	r0, r3, r0
   18248:	ldrh	r3, [r1], #8
   1824c:	subs	r0, r0, #1
   18250:	strh	r3, [r2], #2
   18254:	bne	18248 <ReadUInt16Data+0x1e5c>
   18258:	b	182fc <ReadUInt16Data+0x1f10>
   1825c:	ldr	r9, [sp, #136]	; 0x88
   18260:	mul	r0, r5, r9
   18264:	sub	sp, fp, #28
   18268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1826c:	ldr	r9, [sp, #136]	; 0x88
   18270:	mul	r0, r5, r9
   18274:	sub	sp, fp, #28
   18278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1827c:	ldr	r9, [sp, #136]	; 0x88
   18280:	mul	r0, r5, r9
   18284:	sub	sp, fp, #28
   18288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1828c:	ldr	r9, [sp, #136]	; 0x88
   18290:	mul	r0, r5, r9
   18294:	sub	sp, fp, #28
   18298:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1829c:	ldr	r9, [sp, #136]	; 0x88
   182a0:	mul	r0, r5, r9
   182a4:	sub	sp, fp, #28
   182a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182ac:	ldr	r6, [sp, #132]	; 0x84
   182b0:	mov	r5, sl
   182b4:	b	18300 <ReadUInt16Data+0x1f14>
   182b8:	mov	r5, r8
   182bc:	mul	r0, r5, r9
   182c0:	sub	sp, fp, #28
   182c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182c8:	mov	r5, r8
   182cc:	mul	r0, r5, r9
   182d0:	sub	sp, fp, #28
   182d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182d8:	mov	r5, r8
   182dc:	mul	r0, r5, r9
   182e0:	sub	sp, fp, #28
   182e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182e8:	ldr	r9, [sp, #136]	; 0x88
   182ec:	ldr	r6, [sp, #132]	; 0x84
   182f0:	mov	r7, r0
   182f4:	b	18300 <ReadUInt16Data+0x1f14>
   182f8:	ldr	r6, [sp, #132]	; 0x84
   182fc:	ldr	r7, [sp]
   18300:	ldr	sl, [sp, #120]	; 0x78
   18304:	cmp	sl, #13
   18308:	bne	1867c <ReadUInt16Data+0x2290>
   1830c:	ldr	r0, [sp, #140]	; 0x8c
   18310:	ldr	r0, [r0, #20]
   18314:	cmp	r0, #0
   18318:	beq	1836c <ReadUInt16Data+0x1f80>
   1831c:	cmp	r7, #256	; 0x100
   18320:	bgt	183f8 <ReadUInt16Data+0x200c>
   18324:	ldr	r0, [sp, #140]	; 0x8c
   18328:	add	r4, sp, #144	; 0x90
   1832c:	mov	r1, r9
   18330:	mov	r2, r7
   18334:	ldr	r3, [r0]
   18338:	mov	r0, r4
   1833c:	bl	18b8 <fread@plt>
   18340:	add	r5, r0, r5
   18344:	cmp	r7, #1
   18348:	blt	1867c <ReadUInt16Data+0x2290>
   1834c:	ldr	r6, [sp, #132]	; 0x84
   18350:	mov	r0, r4
   18354:	bl	1bd4 <Mat_uint64Swap>
   18358:	strh	r0, [r6], #2
   1835c:	subs	r7, r7, #1
   18360:	add	r4, r4, #8
   18364:	bne	18350 <ReadUInt16Data+0x1f64>
   18368:	b	1867c <ReadUInt16Data+0x2290>
   1836c:	cmp	r7, #256	; 0x100
   18370:	bgt	184fc <ReadUInt16Data+0x2110>
   18374:	ldr	r0, [sp, #140]	; 0x8c
   18378:	add	r4, sp, #144	; 0x90
   1837c:	mov	r1, r9
   18380:	mov	r2, r7
   18384:	ldr	r3, [r0]
   18388:	mov	r0, r4
   1838c:	bl	18b8 <fread@plt>
   18390:	add	r5, r0, r5
   18394:	cmp	r7, #1
   18398:	blt	1867c <ReadUInt16Data+0x2290>
   1839c:	ldr	r3, [sp, #132]	; 0x84
   183a0:	mov	r0, #0
   183a4:	beq	183d4 <ReadUInt16Data+0x1fe8>
   183a8:	bic	r0, r7, #1
   183ac:	mov	r2, r3
   183b0:	mov	r1, r0
   183b4:	vld1.64	{d16-d17}, [r4]!
   183b8:	subs	r1, r1, #2
   183bc:	vmovn.i64	d16, q8
   183c0:	vuzp.16	d16, d17
   183c4:	vst1.32	{d16[0]}, [r2]!
   183c8:	bne	183b4 <ReadUInt16Data+0x1fc8>
   183cc:	cmp	r0, r7
   183d0:	beq	1867c <ReadUInt16Data+0x2290>
   183d4:	add	r2, r3, r0, lsl #1
   183d8:	add	r3, sp, #144	; 0x90
   183dc:	sub	r1, r7, r0
   183e0:	add	r0, r3, r0, lsl #3
   183e4:	ldrh	r3, [r0], #8
   183e8:	subs	r1, r1, #1
   183ec:	strh	r3, [r2], #2
   183f0:	bne	183e4 <ReadUInt16Data+0x1ff8>
   183f4:	b	1867c <ReadUInt16Data+0x2290>
   183f8:	sub	r0, r7, #256	; 0x100
   183fc:	add	r1, r6, #512	; 0x200
   18400:	str	r9, [sp, #136]	; 0x88
   18404:	str	r7, [sp]
   18408:	str	r0, [sp, #128]	; 0x80
   1840c:	mov	r0, #0
   18410:	str	r0, [sp, #132]	; 0x84
   18414:	ldr	r0, [sp, #140]	; 0x8c
   18418:	mov	r9, r1
   1841c:	ldr	r1, [sp, #136]	; 0x88
   18420:	add	r7, sp, #144	; 0x90
   18424:	mov	r2, #256	; 0x100
   18428:	mov	r8, r5
   1842c:	mov	sl, r6
   18430:	ldr	r3, [r0]
   18434:	mov	r0, r7
   18438:	bl	18b8 <fread@plt>
   1843c:	mov	r4, r0
   18440:	mov	r5, #0
   18444:	mov	r0, r7
   18448:	add	r6, sl, r5
   1844c:	bl	1bd4 <Mat_uint64Swap>
   18450:	add	r5, r5, #2
   18454:	add	r7, r7, #8
   18458:	strh	r0, [r6]
   1845c:	cmp	r5, #512	; 0x200
   18460:	bne	18444 <ReadUInt16Data+0x2058>
   18464:	ldr	r7, [sp, #132]	; 0x84
   18468:	ldr	r2, [sp, #128]	; 0x80
   1846c:	mov	r5, r8
   18470:	add	sl, sl, #512	; 0x200
   18474:	add	r1, r9, #512	; 0x200
   18478:	add	r5, r4, r8
   1847c:	mov	r6, sl
   18480:	add	r0, r7, #256	; 0x100
   18484:	cmp	r0, r2
   18488:	blt	18410 <ReadUInt16Data+0x2024>
   1848c:	ldr	r1, [sp]
   18490:	cmp	r0, r1
   18494:	bge	18638 <ReadUInt16Data+0x224c>
   18498:	sub	r6, r1, r0
   1849c:	ldr	r0, [sp, #140]	; 0x8c
   184a0:	ldr	r1, [sp, #136]	; 0x88
   184a4:	add	r4, sp, #144	; 0x90
   184a8:	mov	r2, r6
   184ac:	ldr	r3, [r0]
   184b0:	mov	r0, r4
   184b4:	bl	18b8 <fread@plt>
   184b8:	add	r5, r0, r5
   184bc:	cmp	r6, #1
   184c0:	blt	18678 <ReadUInt16Data+0x228c>
   184c4:	ldr	r0, [sp, #128]	; 0x80
   184c8:	mov	r6, r5
   184cc:	sub	r5, r0, r7
   184d0:	mov	r0, r4
   184d4:	bl	1bd4 <Mat_uint64Swap>
   184d8:	strh	r0, [r9], #2
   184dc:	subs	r5, r5, #1
   184e0:	add	r4, r4, #8
   184e4:	bne	184d0 <ReadUInt16Data+0x20e4>
   184e8:	ldr	r9, [sp, #136]	; 0x88
   184ec:	mov	r5, r6
   184f0:	mul	r0, r5, r9
   184f4:	sub	sp, fp, #28
   184f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184fc:	sub	r1, r7, #256	; 0x100
   18500:	mov	r8, r5
   18504:	str	r7, [sp]
   18508:	add	r0, r6, #512	; 0x200
   1850c:	mov	r2, #256	; 0x100
   18510:	add	r7, sp, #144	; 0x90
   18514:	mov	r5, r6
   18518:	str	r1, [sp, #128]	; 0x80
   1851c:	mov	r1, #0
   18520:	mov	sl, r0
   18524:	ldr	r0, [sp, #140]	; 0x8c
   18528:	mov	r6, r1
   1852c:	mov	r4, r2
   18530:	mov	r1, r9
   18534:	mov	r2, #256	; 0x100
   18538:	ldr	r3, [r0]
   1853c:	mov	r0, r7
   18540:	bl	18b8 <fread@plt>
   18544:	mov	r1, #0
   18548:	mov	r2, r7
   1854c:	vld1.64	{d16-d17}, [r2]!
   18550:	add	r3, r5, r1
   18554:	add	r1, r1, #4
   18558:	cmp	r1, #512	; 0x200
   1855c:	vmovn.i64	d16, q8
   18560:	vuzp.16	d16, d17
   18564:	vst1.32	{d16[0]}, [r3]
   18568:	bne	1854c <ReadUInt16Data+0x2160>
   1856c:	ldr	r3, [sp, #128]	; 0x80
   18570:	add	r1, r6, #256	; 0x100
   18574:	add	r8, r0, r8
   18578:	add	r5, r5, #512	; 0x200
   1857c:	add	r0, sl, #512	; 0x200
   18580:	add	r2, r4, #256	; 0x100
   18584:	cmp	r1, r3
   18588:	blt	18520 <ReadUInt16Data+0x2134>
   1858c:	ldr	r0, [sp]
   18590:	cmp	r1, r0
   18594:	bge	18648 <ReadUInt16Data+0x225c>
   18598:	sub	r5, r0, r1
   1859c:	ldr	r0, [sp, #140]	; 0x8c
   185a0:	add	r7, sp, #144	; 0x90
   185a4:	mov	r1, r9
   185a8:	mov	r2, r5
   185ac:	ldr	r3, [r0]
   185b0:	mov	r0, r7
   185b4:	bl	18b8 <fread@plt>
   185b8:	mov	r2, r5
   185bc:	mov	r5, r8
   185c0:	add	r5, r0, r8
   185c4:	cmp	r2, #1
   185c8:	blt	1867c <ReadUInt16Data+0x2290>
   185cc:	ldr	r3, [sp, #132]	; 0x84
   185d0:	mov	r0, #0
   185d4:	beq	18608 <ReadUInt16Data+0x221c>
   185d8:	ldr	r0, [sp, #128]	; 0x80
   185dc:	sub	r0, r0, r6
   185e0:	bic	r1, r0, #1
   185e4:	bic	r0, r2, #1
   185e8:	vld1.64	{d16-d17}, [r7]!
   185ec:	subs	r1, r1, #2
   185f0:	vmovn.i64	d16, q8
   185f4:	vuzp.16	d16, d17
   185f8:	vst1.32	{d16[0]}, [sl]!
   185fc:	bne	185e8 <ReadUInt16Data+0x21fc>
   18600:	cmp	r2, r0
   18604:	beq	1867c <ReadUInt16Data+0x2290>
   18608:	add	r2, r0, r4
   1860c:	add	r1, sp, #144	; 0x90
   18610:	add	r2, r3, r2, lsl #1
   18614:	ldr	r3, [sp, #128]	; 0x80
   18618:	add	r1, r1, r0, lsl #3
   1861c:	sub	r3, r3, r6
   18620:	sub	r0, r3, r0
   18624:	ldrh	r3, [r1], #8
   18628:	subs	r0, r0, #1
   1862c:	strh	r3, [r2], #2
   18630:	bne	18624 <ReadUInt16Data+0x2238>
   18634:	b	1867c <ReadUInt16Data+0x2290>
   18638:	ldr	r9, [sp, #136]	; 0x88
   1863c:	mul	r0, r5, r9
   18640:	sub	sp, fp, #28
   18644:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18648:	mov	r5, r8
   1864c:	mul	r0, r5, r9
   18650:	sub	sp, fp, #28
   18654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18658:	ldr	r9, [sp, #136]	; 0x88
   1865c:	mul	r0, r5, r9
   18660:	sub	sp, fp, #28
   18664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18668:	ldr	r9, [sp, #136]	; 0x88
   1866c:	mul	r0, r5, r9
   18670:	sub	sp, fp, #28
   18674:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18678:	ldr	r9, [sp, #136]	; 0x88
   1867c:	mul	r0, r5, r9
   18680:	sub	sp, fp, #28
   18684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018688 <ReadCompressedUInt16Data>:
   18688:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1868c:	add	fp, sp, #28
   18690:	sub	sp, sp, #12
   18694:	mov	r7, r0
   18698:	mov	r0, #0
   1869c:	cmp	r1, #0
   186a0:	beq	186b4 <ReadCompressedUInt16Data+0x2c>
   186a4:	cmp	r7, #0
   186a8:	movne	r5, r2
   186ac:	cmpne	r2, #0
   186b0:	bne	186bc <ReadCompressedUInt16Data+0x34>
   186b4:	sub	sp, fp, #28
   186b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186bc:	ldr	sl, [fp, #8]
   186c0:	mov	r0, r3
   186c4:	mov	r4, r3
   186c8:	mov	r6, r1
   186cc:	bl	1924 <Mat_SizeOf@plt>
   186d0:	mov	r9, r0
   186d4:	sub	r0, r4, #1
   186d8:	cmp	r0, #12
   186dc:	bhi	18bac <ReadCompressedUInt16Data+0x524>
   186e0:	add	r1, pc, #4
   186e4:	ldr	r0, [r1, r0, lsl #2]
   186e8:	add	pc, r1, r0
   186ec:	.word	0x00000034
   186f0:	.word	0x0000006c
   186f4:	.word	0x000000a4
   186f8:	.word	0x000000ec
   186fc:	.word	0x00000134
   18700:	.word	0x0000017c
   18704:	.word	0x000001c4
   18708:	.word	0x000004c0
   1870c:	.word	0x00000214
   18710:	.word	0x000004c0
   18714:	.word	0x000004c0
   18718:	.word	0x00000264
   1871c:	.word	0x000002ac
   18720:	cmp	sl, #1
   18724:	blt	18bac <ReadCompressedUInt16Data+0x524>
   18728:	mov	r8, sp
   1872c:	mov	r4, sl
   18730:	mov	r0, r7
   18734:	mov	r1, r6
   18738:	mov	r2, r8
   1873c:	mov	r3, r9
   18740:	bl	32fc <InflateData>
   18744:	ldrsb	r0, [sp]
   18748:	subs	r4, r4, #1
   1874c:	strh	r0, [r5], #2
   18750:	bne	18730 <ReadCompressedUInt16Data+0xa8>
   18754:	b	18bac <ReadCompressedUInt16Data+0x524>
   18758:	cmp	sl, #1
   1875c:	blt	18bac <ReadCompressedUInt16Data+0x524>
   18760:	mov	r8, sp
   18764:	mov	r4, sl
   18768:	mov	r0, r7
   1876c:	mov	r1, r6
   18770:	mov	r2, r8
   18774:	mov	r3, r9
   18778:	bl	32fc <InflateData>
   1877c:	ldrb	r0, [sp]
   18780:	subs	r4, r4, #1
   18784:	strh	r0, [r5], #2
   18788:	bne	18768 <ReadCompressedUInt16Data+0xe0>
   1878c:	b	18bac <ReadCompressedUInt16Data+0x524>
   18790:	ldr	r0, [r7, #20]
   18794:	cmp	r0, #0
   18798:	beq	189e0 <ReadCompressedUInt16Data+0x358>
   1879c:	cmp	sl, #1
   187a0:	blt	18bac <ReadCompressedUInt16Data+0x524>
   187a4:	mov	r8, sp
   187a8:	mov	r4, sl
   187ac:	mov	r0, r7
   187b0:	mov	r1, r6
   187b4:	mov	r2, r8
   187b8:	mov	r3, r9
   187bc:	bl	32fc <InflateData>
   187c0:	mov	r0, r8
   187c4:	bl	1c18 <Mat_int16Swap>
   187c8:	strh	r0, [r5], #2
   187cc:	subs	r4, r4, #1
   187d0:	bne	187ac <ReadCompressedUInt16Data+0x124>
   187d4:	b	18bac <ReadCompressedUInt16Data+0x524>
   187d8:	ldr	r0, [r7, #20]
   187dc:	cmp	r0, #0
   187e0:	beq	18a18 <ReadCompressedUInt16Data+0x390>
   187e4:	cmp	sl, #1
   187e8:	blt	18bac <ReadCompressedUInt16Data+0x524>
   187ec:	mov	r8, sp
   187f0:	mov	r4, sl
   187f4:	mov	r0, r7
   187f8:	mov	r1, r6
   187fc:	mov	r2, r8
   18800:	mov	r3, r9
   18804:	bl	32fc <InflateData>
   18808:	mov	r0, r8
   1880c:	bl	1c2c <Mat_uint16Swap>
   18810:	strh	r0, [r5], #2
   18814:	subs	r4, r4, #1
   18818:	bne	187f4 <ReadCompressedUInt16Data+0x16c>
   1881c:	b	18bac <ReadCompressedUInt16Data+0x524>
   18820:	ldr	r0, [r7, #20]
   18824:	cmp	r0, #0
   18828:	beq	18a50 <ReadCompressedUInt16Data+0x3c8>
   1882c:	cmp	sl, #1
   18830:	blt	18bac <ReadCompressedUInt16Data+0x524>
   18834:	mov	r8, sp
   18838:	mov	r4, sl
   1883c:	mov	r0, r7
   18840:	mov	r1, r6
   18844:	mov	r2, r8
   18848:	mov	r3, r9
   1884c:	bl	32fc <InflateData>
   18850:	mov	r0, r8
   18854:	bl	1bf0 <Mat_int32Swap>
   18858:	strh	r0, [r5], #2
   1885c:	subs	r4, r4, #1
   18860:	bne	1883c <ReadCompressedUInt16Data+0x1b4>
   18864:	b	18bac <ReadCompressedUInt16Data+0x524>
   18868:	ldr	r0, [r7, #20]
   1886c:	cmp	r0, #0
   18870:	beq	18a88 <ReadCompressedUInt16Data+0x400>
   18874:	cmp	sl, #1
   18878:	blt	18bac <ReadCompressedUInt16Data+0x524>
   1887c:	mov	r8, sp
   18880:	mov	r4, sl
   18884:	mov	r0, r7
   18888:	mov	r1, r6
   1888c:	mov	r2, r8
   18890:	mov	r3, r9
   18894:	bl	32fc <InflateData>
   18898:	mov	r0, r8
   1889c:	bl	1c04 <Mat_uint32Swap>
   188a0:	strh	r0, [r5], #2
   188a4:	subs	r4, r4, #1
   188a8:	bne	18884 <ReadCompressedUInt16Data+0x1fc>
   188ac:	b	18bac <ReadCompressedUInt16Data+0x524>
   188b0:	ldr	r0, [r7, #20]
   188b4:	cmp	r0, #0
   188b8:	beq	18ac0 <ReadCompressedUInt16Data+0x438>
   188bc:	cmp	sl, #1
   188c0:	blt	18bac <ReadCompressedUInt16Data+0x524>
   188c4:	mov	r8, sp
   188c8:	mov	r4, sl
   188cc:	mov	r0, r7
   188d0:	mov	r1, r6
   188d4:	mov	r2, r8
   188d8:	mov	r3, r9
   188dc:	bl	32fc <InflateData>
   188e0:	mov	r0, r8
   188e4:	bl	1c44 <Mat_floatSwap>
   188e8:	vcvt.u32.f32	s0, s0
   188ec:	subs	r4, r4, #1
   188f0:	vmov	r0, s0
   188f4:	strh	r0, [r5], #2
   188f8:	bne	188cc <ReadCompressedUInt16Data+0x244>
   188fc:	b	18bac <ReadCompressedUInt16Data+0x524>
   18900:	ldr	r0, [r7, #20]
   18904:	cmp	r0, #0
   18908:	beq	18b00 <ReadCompressedUInt16Data+0x478>
   1890c:	cmp	sl, #1
   18910:	blt	18bac <ReadCompressedUInt16Data+0x524>
   18914:	mov	r8, sp
   18918:	mov	r4, sl
   1891c:	mov	r0, r7
   18920:	mov	r1, r6
   18924:	mov	r2, r8
   18928:	mov	r3, r9
   1892c:	bl	32fc <InflateData>
   18930:	mov	r0, r8
   18934:	bl	1c88 <Mat_doubleSwap>
   18938:	vcvt.u32.f64	s0, d0
   1893c:	subs	r4, r4, #1
   18940:	vmov	r0, s0
   18944:	strh	r0, [r5], #2
   18948:	bne	1891c <ReadCompressedUInt16Data+0x294>
   1894c:	b	18bac <ReadCompressedUInt16Data+0x524>
   18950:	ldr	r0, [r7, #20]
   18954:	cmp	r0, #0
   18958:	beq	18b40 <ReadCompressedUInt16Data+0x4b8>
   1895c:	cmp	sl, #1
   18960:	blt	18bac <ReadCompressedUInt16Data+0x524>
   18964:	mov	r8, sp
   18968:	mov	r4, sl
   1896c:	mov	r0, r7
   18970:	mov	r1, r6
   18974:	mov	r2, r8
   18978:	mov	r3, r9
   1897c:	bl	32fc <InflateData>
   18980:	mov	r0, r8
   18984:	bl	1b84 <Mat_int64Swap>
   18988:	strh	r0, [r5], #2
   1898c:	subs	r4, r4, #1
   18990:	bne	1896c <ReadCompressedUInt16Data+0x2e4>
   18994:	b	18bac <ReadCompressedUInt16Data+0x524>
   18998:	ldr	r0, [r7, #20]
   1899c:	cmp	r0, #0
   189a0:	beq	18b78 <ReadCompressedUInt16Data+0x4f0>
   189a4:	cmp	sl, #1
   189a8:	blt	18bac <ReadCompressedUInt16Data+0x524>
   189ac:	mov	r8, sp
   189b0:	mov	r4, sl
   189b4:	mov	r0, r7
   189b8:	mov	r1, r6
   189bc:	mov	r2, r8
   189c0:	mov	r3, r9
   189c4:	bl	32fc <InflateData>
   189c8:	mov	r0, r8
   189cc:	bl	1bd4 <Mat_uint64Swap>
   189d0:	strh	r0, [r5], #2
   189d4:	subs	r4, r4, #1
   189d8:	bne	189b4 <ReadCompressedUInt16Data+0x32c>
   189dc:	b	18bac <ReadCompressedUInt16Data+0x524>
   189e0:	cmp	sl, #1
   189e4:	blt	18bac <ReadCompressedUInt16Data+0x524>
   189e8:	mov	r8, sp
   189ec:	mov	r4, sl
   189f0:	mov	r0, r7
   189f4:	mov	r1, r6
   189f8:	mov	r2, r8
   189fc:	mov	r3, r9
   18a00:	bl	32fc <InflateData>
   18a04:	ldrh	r0, [sp]
   18a08:	subs	r4, r4, #1
   18a0c:	strh	r0, [r5], #2
   18a10:	bne	189f0 <ReadCompressedUInt16Data+0x368>
   18a14:	b	18bac <ReadCompressedUInt16Data+0x524>
   18a18:	cmp	sl, #1
   18a1c:	blt	18bac <ReadCompressedUInt16Data+0x524>
   18a20:	mov	r8, sp
   18a24:	mov	r4, sl
   18a28:	mov	r0, r7
   18a2c:	mov	r1, r6
   18a30:	mov	r2, r8
   18a34:	mov	r3, r9
   18a38:	bl	32fc <InflateData>
   18a3c:	ldrh	r0, [sp]
   18a40:	subs	r4, r4, #1
   18a44:	strh	r0, [r5], #2
   18a48:	bne	18a28 <ReadCompressedUInt16Data+0x3a0>
   18a4c:	b	18bac <ReadCompressedUInt16Data+0x524>
   18a50:	cmp	sl, #1
   18a54:	blt	18bac <ReadCompressedUInt16Data+0x524>
   18a58:	mov	r8, sp
   18a5c:	mov	r4, sl
   18a60:	mov	r0, r7
   18a64:	mov	r1, r6
   18a68:	mov	r2, r8
   18a6c:	mov	r3, r9
   18a70:	bl	32fc <InflateData>
   18a74:	ldr	r0, [sp]
   18a78:	subs	r4, r4, #1
   18a7c:	strh	r0, [r5], #2
   18a80:	bne	18a60 <ReadCompressedUInt16Data+0x3d8>
   18a84:	b	18bac <ReadCompressedUInt16Data+0x524>
   18a88:	cmp	sl, #1
   18a8c:	blt	18bac <ReadCompressedUInt16Data+0x524>
   18a90:	mov	r8, sp
   18a94:	mov	r4, sl
   18a98:	mov	r0, r7
   18a9c:	mov	r1, r6
   18aa0:	mov	r2, r8
   18aa4:	mov	r3, r9
   18aa8:	bl	32fc <InflateData>
   18aac:	ldr	r0, [sp]
   18ab0:	subs	r4, r4, #1
   18ab4:	strh	r0, [r5], #2
   18ab8:	bne	18a98 <ReadCompressedUInt16Data+0x410>
   18abc:	b	18bac <ReadCompressedUInt16Data+0x524>
   18ac0:	cmp	sl, #1
   18ac4:	blt	18bac <ReadCompressedUInt16Data+0x524>
   18ac8:	mov	r8, sp
   18acc:	mov	r4, sl
   18ad0:	mov	r0, r7
   18ad4:	mov	r1, r6
   18ad8:	mov	r2, r8
   18adc:	mov	r3, r9
   18ae0:	bl	32fc <InflateData>
   18ae4:	vldr	s0, [sp]
   18ae8:	subs	r4, r4, #1
   18aec:	vcvt.u32.f32	s0, s0
   18af0:	vmov	r0, s0
   18af4:	strh	r0, [r5], #2
   18af8:	bne	18ad0 <ReadCompressedUInt16Data+0x448>
   18afc:	b	18bac <ReadCompressedUInt16Data+0x524>
   18b00:	cmp	sl, #1
   18b04:	blt	18bac <ReadCompressedUInt16Data+0x524>
   18b08:	mov	r8, sp
   18b0c:	mov	r4, sl
   18b10:	mov	r0, r7
   18b14:	mov	r1, r6
   18b18:	mov	r2, r8
   18b1c:	mov	r3, r9
   18b20:	bl	32fc <InflateData>
   18b24:	vldr	d16, [sp]
   18b28:	subs	r4, r4, #1
   18b2c:	vcvt.u32.f64	s0, d16
   18b30:	vmov	r0, s0
   18b34:	strh	r0, [r5], #2
   18b38:	bne	18b10 <ReadCompressedUInt16Data+0x488>
   18b3c:	b	18bac <ReadCompressedUInt16Data+0x524>
   18b40:	cmp	sl, #1
   18b44:	blt	18bac <ReadCompressedUInt16Data+0x524>
   18b48:	mov	r8, sp
   18b4c:	mov	r4, sl
   18b50:	mov	r0, r7
   18b54:	mov	r1, r6
   18b58:	mov	r2, r8
   18b5c:	mov	r3, r9
   18b60:	bl	32fc <InflateData>
   18b64:	ldrh	r0, [sp]
   18b68:	subs	r4, r4, #1
   18b6c:	strh	r0, [r5], #2
   18b70:	bne	18b50 <ReadCompressedUInt16Data+0x4c8>
   18b74:	b	18bac <ReadCompressedUInt16Data+0x524>
   18b78:	cmp	sl, #1
   18b7c:	blt	18bac <ReadCompressedUInt16Data+0x524>
   18b80:	mov	r8, sp
   18b84:	mov	r4, sl
   18b88:	mov	r0, r7
   18b8c:	mov	r1, r6
   18b90:	mov	r2, r8
   18b94:	mov	r3, r9
   18b98:	bl	32fc <InflateData>
   18b9c:	ldrh	r0, [sp]
   18ba0:	subs	r4, r4, #1
   18ba4:	strh	r0, [r5], #2
   18ba8:	bne	18b88 <ReadCompressedUInt16Data+0x500>
   18bac:	mul	r0, r9, sl
   18bb0:	sub	sp, fp, #28
   18bb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018bb8 <ReadInt8Data>:
   18bb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bbc:	add	fp, sp, #28
   18bc0:	sub	sp, sp, #140	; 0x8c
   18bc4:	sub	sp, sp, #2048	; 0x800
   18bc8:	mov	r4, r0
   18bcc:	mov	r0, #0
   18bd0:	cmp	r4, #0
   18bd4:	beq	18bec <ReadInt8Data+0x34>
   18bd8:	cmp	r1, #0
   18bdc:	mov	sl, r1
   18be0:	ldrne	r1, [r4]
   18be4:	cmpne	r1, #0
   18be8:	bne	18bf4 <ReadInt8Data+0x3c>
   18bec:	sub	sp, fp, #28
   18bf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18bf4:	mov	r0, r2
   18bf8:	mov	r9, r3
   18bfc:	mov	r6, r2
   18c00:	bl	1924 <Mat_SizeOf@plt>
   18c04:	mov	r8, r0
   18c08:	sub	r0, r6, #1
   18c0c:	mov	r5, #0
   18c10:	str	r4, [sp, #132]	; 0x84
   18c14:	cmp	r0, #11
   18c18:	bhi	1a93c <ReadInt8Data+0x1d84>
   18c1c:	add	r1, pc, #4
   18c20:	ldr	r0, [r1, r0, lsl #2]
   18c24:	add	pc, r1, r0
   18c28:	.word	0x00000030
   18c2c:	.word	0x00000090
   18c30:	.word	0x000000d4
   18c34:	.word	0x00000128
   18c38:	.word	0x0000017c
   18c3c:	.word	0x000001d0
   18c40:	.word	0x00000224
   18c44:	.word	0x00001d14
   18c48:	.word	0x00000280
   18c4c:	.word	0x00001d14
   18c50:	.word	0x00001d14
   18c54:	.word	0x000002dc
   18c58:	cmp	r9, #256	; 0x100
   18c5c:	ble	18cc0 <ReadInt8Data+0x108>
   18c60:	str	r9, [sp, #120]	; 0x78
   18c64:	mov	r5, r8
   18c68:	sub	r9, r9, #256	; 0x100
   18c6c:	mov	r7, #0
   18c70:	add	r8, sp, #136	; 0x88
   18c74:	mov	r6, #0
   18c78:	ldr	r3, [r4]
   18c7c:	mov	r0, r8
   18c80:	mov	r1, r5
   18c84:	mov	r2, #256	; 0x100
   18c88:	bl	18b8 <fread@plt>
   18c8c:	mov	r4, r0
   18c90:	add	r0, sl, r7
   18c94:	mov	r1, r8
   18c98:	mov	r2, #256	; 0x100
   18c9c:	bl	181c <memcpy@plt>
   18ca0:	add	r6, r4, r6
   18ca4:	ldr	r4, [sp, #132]	; 0x84
   18ca8:	add	r7, r7, #256	; 0x100
   18cac:	cmp	r7, r9
   18cb0:	blt	18c78 <ReadInt8Data+0xc0>
   18cb4:	b	18fc0 <ReadInt8Data+0x408>
   18cb8:	cmp	r9, #256	; 0x100
   18cbc:	bgt	18f6c <ReadInt8Data+0x3b4>
   18cc0:	ldr	r3, [r4]
   18cc4:	add	r0, sp, #136	; 0x88
   18cc8:	mov	r1, r8
   18ccc:	mov	r2, r9
   18cd0:	bl	18b8 <fread@plt>
   18cd4:	mov	r5, r0
   18cd8:	cmp	r9, #1
   18cdc:	blt	1acb0 <ReadInt8Data+0x20f8>
   18ce0:	add	r1, sp, #136	; 0x88
   18ce4:	mov	r0, sl
   18ce8:	mov	r2, r9
   18cec:	bl	181c <memcpy@plt>
   18cf0:	mul	r0, r5, r8
   18cf4:	sub	sp, fp, #28
   18cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cfc:	ldr	r0, [r4, #20]
   18d00:	cmp	r0, #0
   18d04:	beq	19018 <ReadInt8Data+0x460>
   18d08:	cmp	r9, #256	; 0x100
   18d0c:	bgt	193a4 <ReadInt8Data+0x7ec>
   18d10:	ldr	r3, [r4]
   18d14:	add	r4, sp, #136	; 0x88
   18d18:	mov	r1, r8
   18d1c:	mov	r2, r9
   18d20:	mov	r0, r4
   18d24:	bl	18b8 <fread@plt>
   18d28:	mov	r5, r0
   18d2c:	cmp	r9, #1
   18d30:	blt	1acb0 <ReadInt8Data+0x20f8>
   18d34:	mov	r0, r4
   18d38:	bl	1c18 <Mat_int16Swap>
   18d3c:	strb	r0, [sl], #1
   18d40:	subs	r9, r9, #1
   18d44:	add	r4, r4, #2
   18d48:	bne	18d34 <ReadInt8Data+0x17c>
   18d4c:	b	1acb0 <ReadInt8Data+0x20f8>
   18d50:	ldr	r0, [r4, #20]
   18d54:	cmp	r0, #0
   18d58:	beq	1909c <ReadInt8Data+0x4e4>
   18d5c:	cmp	r9, #256	; 0x100
   18d60:	bgt	1948c <ReadInt8Data+0x8d4>
   18d64:	ldr	r3, [r4]
   18d68:	add	r4, sp, #136	; 0x88
   18d6c:	mov	r1, r8
   18d70:	mov	r2, r9
   18d74:	mov	r0, r4
   18d78:	bl	18b8 <fread@plt>
   18d7c:	mov	r5, r0
   18d80:	cmp	r9, #1
   18d84:	blt	1acb0 <ReadInt8Data+0x20f8>
   18d88:	mov	r0, r4
   18d8c:	bl	1c2c <Mat_uint16Swap>
   18d90:	strb	r0, [sl], #1
   18d94:	subs	r9, r9, #1
   18d98:	add	r4, r4, #2
   18d9c:	bne	18d88 <ReadInt8Data+0x1d0>
   18da0:	b	1acb0 <ReadInt8Data+0x20f8>
   18da4:	ldr	r0, [r4, #20]
   18da8:	cmp	r0, #0
   18dac:	beq	19120 <ReadInt8Data+0x568>
   18db0:	cmp	r9, #256	; 0x100
   18db4:	bgt	19574 <ReadInt8Data+0x9bc>
   18db8:	ldr	r3, [r4]
   18dbc:	add	r4, sp, #136	; 0x88
   18dc0:	mov	r1, r8
   18dc4:	mov	r2, r9
   18dc8:	mov	r0, r4
   18dcc:	bl	18b8 <fread@plt>
   18dd0:	mov	r5, r0
   18dd4:	cmp	r9, #1
   18dd8:	blt	1acb0 <ReadInt8Data+0x20f8>
   18ddc:	mov	r0, r4
   18de0:	bl	1bf0 <Mat_int32Swap>
   18de4:	strb	r0, [sl], #1
   18de8:	subs	r9, r9, #1
   18dec:	add	r4, r4, #4
   18df0:	bne	18ddc <ReadInt8Data+0x224>
   18df4:	b	1acb0 <ReadInt8Data+0x20f8>
   18df8:	ldr	r0, [r4, #20]
   18dfc:	cmp	r0, #0
   18e00:	beq	191a8 <ReadInt8Data+0x5f0>
   18e04:	cmp	r9, #256	; 0x100
   18e08:	bgt	1965c <ReadInt8Data+0xaa4>
   18e0c:	ldr	r3, [r4]
   18e10:	add	r4, sp, #136	; 0x88
   18e14:	mov	r1, r8
   18e18:	mov	r2, r9
   18e1c:	mov	r0, r4
   18e20:	bl	18b8 <fread@plt>
   18e24:	mov	r5, r0
   18e28:	cmp	r9, #1
   18e2c:	blt	1acb0 <ReadInt8Data+0x20f8>
   18e30:	mov	r0, r4
   18e34:	bl	1c04 <Mat_uint32Swap>
   18e38:	strb	r0, [sl], #1
   18e3c:	subs	r9, r9, #1
   18e40:	add	r4, r4, #4
   18e44:	bne	18e30 <ReadInt8Data+0x278>
   18e48:	b	1acb0 <ReadInt8Data+0x20f8>
   18e4c:	ldr	r0, [r4, #20]
   18e50:	cmp	r0, #0
   18e54:	beq	19230 <ReadInt8Data+0x678>
   18e58:	cmp	r9, #256	; 0x100
   18e5c:	bgt	19744 <ReadInt8Data+0xb8c>
   18e60:	ldr	r3, [r4]
   18e64:	add	r4, sp, #136	; 0x88
   18e68:	mov	r1, r8
   18e6c:	mov	r2, r9
   18e70:	mov	r0, r4
   18e74:	bl	18b8 <fread@plt>
   18e78:	mov	r5, r0
   18e7c:	cmp	r9, #1
   18e80:	blt	1acb0 <ReadInt8Data+0x20f8>
   18e84:	mov	r0, r4
   18e88:	bl	1c44 <Mat_floatSwap>
   18e8c:	vcvt.s32.f32	s0, s0
   18e90:	subs	r9, r9, #1
   18e94:	add	r4, r4, #4
   18e98:	vmov	r0, s0
   18e9c:	strb	r0, [sl], #1
   18ea0:	bne	18e84 <ReadInt8Data+0x2cc>
   18ea4:	b	1acb0 <ReadInt8Data+0x20f8>
   18ea8:	ldr	r0, [r4, #20]
   18eac:	cmp	r0, #0
   18eb0:	beq	192c8 <ReadInt8Data+0x710>
   18eb4:	cmp	r9, #256	; 0x100
   18eb8:	bgt	1983c <ReadInt8Data+0xc84>
   18ebc:	ldr	r3, [r4]
   18ec0:	add	r4, sp, #136	; 0x88
   18ec4:	mov	r1, r8
   18ec8:	mov	r2, r9
   18ecc:	mov	r0, r4
   18ed0:	bl	18b8 <fread@plt>
   18ed4:	mov	r5, r0
   18ed8:	cmp	r9, #1
   18edc:	blt	1acb0 <ReadInt8Data+0x20f8>
   18ee0:	mov	r0, r4
   18ee4:	bl	1c88 <Mat_doubleSwap>
   18ee8:	vcvt.s32.f64	s0, d0
   18eec:	subs	r9, r9, #1
   18ef0:	add	r4, r4, #8
   18ef4:	vmov	r0, s0
   18ef8:	strb	r0, [sl], #1
   18efc:	bne	18ee0 <ReadInt8Data+0x328>
   18f00:	b	1acb0 <ReadInt8Data+0x20f8>
   18f04:	ldr	r0, [r4, #20]
   18f08:	cmp	r0, #0
   18f0c:	beq	19314 <ReadInt8Data+0x75c>
   18f10:	cmp	r9, #256	; 0x100
   18f14:	bgt	19938 <ReadInt8Data+0xd80>
   18f18:	ldr	r3, [r4]
   18f1c:	add	r7, sp, #136	; 0x88
   18f20:	mov	r1, r8
   18f24:	mov	r2, r9
   18f28:	mov	r0, r7
   18f2c:	bl	18b8 <fread@plt>
   18f30:	mov	r5, r0
   18f34:	cmp	r9, #1
   18f38:	blt	1a93c <ReadInt8Data+0x1d84>
   18f3c:	str	r6, [sp, #116]	; 0x74
   18f40:	mov	r6, r5
   18f44:	mov	r4, r9
   18f48:	mov	r5, sl
   18f4c:	mov	r0, r7
   18f50:	bl	1b84 <Mat_int64Swap>
   18f54:	strb	r0, [r5], #1
   18f58:	subs	r4, r4, #1
   18f5c:	add	r7, r7, #8
   18f60:	bne	18f4c <ReadInt8Data+0x394>
   18f64:	mov	r5, r6
   18f68:	b	19a30 <ReadInt8Data+0xe78>
   18f6c:	str	r9, [sp, #120]	; 0x78
   18f70:	mov	r5, r8
   18f74:	sub	r9, r9, #256	; 0x100
   18f78:	mov	r7, #0
   18f7c:	add	r8, sp, #136	; 0x88
   18f80:	mov	r6, #0
   18f84:	ldr	r3, [r4]
   18f88:	mov	r0, r8
   18f8c:	mov	r1, r5
   18f90:	mov	r2, #256	; 0x100
   18f94:	bl	18b8 <fread@plt>
   18f98:	mov	r4, r0
   18f9c:	add	r0, sl, r7
   18fa0:	mov	r1, r8
   18fa4:	mov	r2, #256	; 0x100
   18fa8:	bl	181c <memcpy@plt>
   18fac:	add	r6, r4, r6
   18fb0:	ldr	r4, [sp, #132]	; 0x84
   18fb4:	add	r7, r7, #256	; 0x100
   18fb8:	cmp	r7, r9
   18fbc:	blt	18f84 <ReadInt8Data+0x3cc>
   18fc0:	ldr	r0, [sp, #120]	; 0x78
   18fc4:	cmp	r7, r0
   18fc8:	bge	1a734 <ReadInt8Data+0x1b7c>
   18fcc:	mov	r1, r4
   18fd0:	sub	r4, r0, r7
   18fd4:	add	r0, sp, #136	; 0x88
   18fd8:	mov	r8, r5
   18fdc:	ldr	r3, [r1]
   18fe0:	mov	r1, r5
   18fe4:	mov	r2, r4
   18fe8:	bl	18b8 <fread@plt>
   18fec:	mov	r5, r6
   18ff0:	cmp	r4, #1
   18ff4:	add	r5, r0, r6
   18ff8:	blt	1acb0 <ReadInt8Data+0x20f8>
   18ffc:	add	r0, sl, r7
   19000:	add	r1, sp, #136	; 0x88
   19004:	mov	r2, r4
   19008:	bl	181c <memcpy@plt>
   1900c:	mul	r0, r5, r8
   19010:	sub	sp, fp, #28
   19014:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19018:	cmp	r9, #256	; 0x100
   1901c:	bgt	19a44 <ReadInt8Data+0xe8c>
   19020:	ldr	r3, [r4]
   19024:	add	r4, sp, #136	; 0x88
   19028:	mov	r1, r8
   1902c:	mov	r2, r9
   19030:	mov	r0, r4
   19034:	bl	18b8 <fread@plt>
   19038:	mov	r5, r0
   1903c:	cmp	r9, #1
   19040:	blt	1acb0 <ReadInt8Data+0x20f8>
   19044:	mov	r0, #0
   19048:	cmp	r9, #8
   1904c:	bcc	19078 <ReadInt8Data+0x4c0>
   19050:	bic	r0, r9, #7
   19054:	mov	r2, sl
   19058:	mov	r1, r0
   1905c:	vld1.16	{d16-d17}, [r4]!
   19060:	subs	r1, r1, #8
   19064:	vmovn.i16	d16, q8
   19068:	vst1.8	{d16}, [r2]!
   1906c:	bne	1905c <ReadInt8Data+0x4a4>
   19070:	cmp	r0, r9
   19074:	beq	1acb0 <ReadInt8Data+0x20f8>
   19078:	add	r3, sp, #136	; 0x88
   1907c:	sub	r1, r9, r0
   19080:	add	r2, sl, r0
   19084:	add	r0, r3, r0, lsl #1
   19088:	ldrb	r3, [r0], #2
   1908c:	subs	r1, r1, #1
   19090:	strb	r3, [r2], #1
   19094:	bne	19088 <ReadInt8Data+0x4d0>
   19098:	b	1acb0 <ReadInt8Data+0x20f8>
   1909c:	cmp	r9, #256	; 0x100
   190a0:	bgt	19e94 <ReadInt8Data+0x12dc>
   190a4:	ldr	r3, [r4]
   190a8:	add	r4, sp, #136	; 0x88
   190ac:	mov	r1, r8
   190b0:	mov	r2, r9
   190b4:	mov	r0, r4
   190b8:	bl	18b8 <fread@plt>
   190bc:	mov	r5, r0
   190c0:	cmp	r9, #1
   190c4:	blt	1acb0 <ReadInt8Data+0x20f8>
   190c8:	mov	r0, #0
   190cc:	cmp	r9, #8
   190d0:	bcc	190fc <ReadInt8Data+0x544>
   190d4:	bic	r0, r9, #7
   190d8:	mov	r2, sl
   190dc:	mov	r1, r0
   190e0:	vld1.16	{d16-d17}, [r4]!
   190e4:	subs	r1, r1, #8
   190e8:	vmovn.i16	d16, q8
   190ec:	vst1.8	{d16}, [r2]!
   190f0:	bne	190e0 <ReadInt8Data+0x528>
   190f4:	cmp	r0, r9
   190f8:	beq	1acb0 <ReadInt8Data+0x20f8>
   190fc:	add	r3, sp, #136	; 0x88
   19100:	sub	r1, r9, r0
   19104:	add	r2, sl, r0
   19108:	add	r0, r3, r0, lsl #1
   1910c:	ldrb	r3, [r0], #2
   19110:	subs	r1, r1, #1
   19114:	strb	r3, [r2], #1
   19118:	bne	1910c <ReadInt8Data+0x554>
   1911c:	b	1acb0 <ReadInt8Data+0x20f8>
   19120:	cmp	r9, #256	; 0x100
   19124:	bgt	1a2e4 <ReadInt8Data+0x172c>
   19128:	ldr	r3, [r4]
   1912c:	add	r4, sp, #136	; 0x88
   19130:	mov	r1, r8
   19134:	mov	r2, r9
   19138:	mov	r0, r4
   1913c:	bl	18b8 <fread@plt>
   19140:	mov	r5, r0
   19144:	cmp	r9, #1
   19148:	blt	1acb0 <ReadInt8Data+0x20f8>
   1914c:	mov	r0, #0
   19150:	cmp	r9, #4
   19154:	bcc	19184 <ReadInt8Data+0x5cc>
   19158:	bic	r0, r9, #3
   1915c:	mov	r2, sl
   19160:	mov	r1, r0
   19164:	vld1.32	{d16-d17}, [r4]!
   19168:	subs	r1, r1, #4
   1916c:	vmovn.i32	d16, q8
   19170:	vuzp.8	d16, d17
   19174:	vst1.32	{d16[0]}, [r2]!
   19178:	bne	19164 <ReadInt8Data+0x5ac>
   1917c:	cmp	r0, r9
   19180:	beq	1acb0 <ReadInt8Data+0x20f8>
   19184:	add	r3, sp, #136	; 0x88
   19188:	sub	r1, r9, r0
   1918c:	add	r2, sl, r0
   19190:	add	r0, r3, r0, lsl #2
   19194:	ldr	r3, [r0], #4
   19198:	subs	r1, r1, #1
   1919c:	strb	r3, [r2], #1
   191a0:	bne	19194 <ReadInt8Data+0x5dc>
   191a4:	b	1acb0 <ReadInt8Data+0x20f8>
   191a8:	cmp	r9, #256	; 0x100
   191ac:	bgt	1a404 <ReadInt8Data+0x184c>
   191b0:	ldr	r3, [r4]
   191b4:	add	r4, sp, #136	; 0x88
   191b8:	mov	r1, r8
   191bc:	mov	r2, r9
   191c0:	mov	r0, r4
   191c4:	bl	18b8 <fread@plt>
   191c8:	mov	r5, r0
   191cc:	cmp	r9, #1
   191d0:	blt	1acb0 <ReadInt8Data+0x20f8>
   191d4:	mov	r0, #0
   191d8:	cmp	r9, #4
   191dc:	bcc	1920c <ReadInt8Data+0x654>
   191e0:	bic	r0, r9, #3
   191e4:	mov	r2, sl
   191e8:	mov	r1, r0
   191ec:	vld1.32	{d16-d17}, [r4]!
   191f0:	subs	r1, r1, #4
   191f4:	vmovn.i32	d16, q8
   191f8:	vuzp.8	d16, d17
   191fc:	vst1.32	{d16[0]}, [r2]!
   19200:	bne	191ec <ReadInt8Data+0x634>
   19204:	cmp	r0, r9
   19208:	beq	1acb0 <ReadInt8Data+0x20f8>
   1920c:	add	r3, sp, #136	; 0x88
   19210:	sub	r1, r9, r0
   19214:	add	r2, sl, r0
   19218:	add	r0, r3, r0, lsl #2
   1921c:	ldr	r3, [r0], #4
   19220:	subs	r1, r1, #1
   19224:	strb	r3, [r2], #1
   19228:	bne	1921c <ReadInt8Data+0x664>
   1922c:	b	1acb0 <ReadInt8Data+0x20f8>
   19230:	cmp	r9, #256	; 0x100
   19234:	bgt	1a524 <ReadInt8Data+0x196c>
   19238:	ldr	r3, [r4]
   1923c:	add	r4, sp, #136	; 0x88
   19240:	mov	r1, r8
   19244:	mov	r2, r9
   19248:	mov	r0, r4
   1924c:	bl	18b8 <fread@plt>
   19250:	mov	r5, r0
   19254:	cmp	r9, #1
   19258:	blt	1acb0 <ReadInt8Data+0x20f8>
   1925c:	mov	r0, #0
   19260:	cmp	r9, #4
   19264:	bcc	19298 <ReadInt8Data+0x6e0>
   19268:	bic	r0, r9, #3
   1926c:	mov	r2, sl
   19270:	mov	r1, r0
   19274:	vld1.32	{d16-d17}, [r4]!
   19278:	subs	r1, r1, #4
   1927c:	vcvt.s32.f32	q8, q8
   19280:	vmovn.i32	d16, q8
   19284:	vuzp.8	d16, d17
   19288:	vst1.32	{d16[0]}, [r2]!
   1928c:	bne	19274 <ReadInt8Data+0x6bc>
   19290:	cmp	r0, r9
   19294:	beq	1acb0 <ReadInt8Data+0x20f8>
   19298:	add	r3, sp, #136	; 0x88
   1929c:	sub	r1, r9, r0
   192a0:	add	r2, sl, r0
   192a4:	add	r0, r3, r0, lsl #2
   192a8:	vldr	s0, [r0]
   192ac:	subs	r1, r1, #1
   192b0:	add	r0, r0, #4
   192b4:	vcvt.s32.f32	s0, s0
   192b8:	vmov	r3, s0
   192bc:	strb	r3, [r2], #1
   192c0:	bne	192a8 <ReadInt8Data+0x6f0>
   192c4:	b	1acb0 <ReadInt8Data+0x20f8>
   192c8:	cmp	r9, #256	; 0x100
   192cc:	bgt	1a658 <ReadInt8Data+0x1aa0>
   192d0:	ldr	r3, [r4]
   192d4:	add	r4, sp, #136	; 0x88
   192d8:	mov	r1, r8
   192dc:	mov	r2, r9
   192e0:	mov	r0, r4
   192e4:	bl	18b8 <fread@plt>
   192e8:	mov	r5, r0
   192ec:	cmp	r9, #1
   192f0:	blt	1acb0 <ReadInt8Data+0x20f8>
   192f4:	vldr	d16, [r4]
   192f8:	subs	r9, r9, #1
   192fc:	add	r4, r4, #8
   19300:	vcvt.s32.f64	s0, d16
   19304:	vmov	r0, s0
   19308:	strb	r0, [sl], #1
   1930c:	bne	192f4 <ReadInt8Data+0x73c>
   19310:	b	1acb0 <ReadInt8Data+0x20f8>
   19314:	cmp	r9, #256	; 0x100
   19318:	bgt	1a748 <ReadInt8Data+0x1b90>
   1931c:	ldr	r3, [r4]
   19320:	add	r7, sp, #136	; 0x88
   19324:	mov	r1, r8
   19328:	mov	r2, r9
   1932c:	mov	r0, r7
   19330:	bl	18b8 <fread@plt>
   19334:	mov	r5, r0
   19338:	cmp	r9, #1
   1933c:	blt	1a93c <ReadInt8Data+0x1d84>
   19340:	mov	r0, #0
   19344:	beq	19380 <ReadInt8Data+0x7c8>
   19348:	bic	r0, r9, #1
   1934c:	mov	r2, sl
   19350:	mov	r1, r0
   19354:	vld1.64	{d16-d17}, [r7]!
   19358:	subs	r1, r1, #2
   1935c:	vmovn.i64	d16, q8
   19360:	vmov.32	r3, d16[1]
   19364:	strb	r3, [r2, #1]
   19368:	vmov.32	r3, d16[0]
   1936c:	strb	r3, [r2]
   19370:	add	r2, r2, #2
   19374:	bne	19354 <ReadInt8Data+0x79c>
   19378:	cmp	r0, r9
   1937c:	beq	1a93c <ReadInt8Data+0x1d84>
   19380:	add	r3, sp, #136	; 0x88
   19384:	sub	r1, r9, r0
   19388:	add	r2, sl, r0
   1938c:	add	r0, r3, r0, lsl #3
   19390:	ldrb	r3, [r0], #8
   19394:	subs	r1, r1, #1
   19398:	strb	r3, [r2], #1
   1939c:	bne	19390 <ReadInt8Data+0x7d8>
   193a0:	b	1a93c <ReadInt8Data+0x1d84>
   193a4:	sub	r0, r9, #256	; 0x100
   193a8:	mov	r7, #0
   193ac:	mov	r6, sl
   193b0:	mov	r5, #0
   193b4:	str	r8, [sp, #128]	; 0x80
   193b8:	str	r9, [sp, #120]	; 0x78
   193bc:	str	r0, [sp, #124]	; 0x7c
   193c0:	ldr	r3, [r4]
   193c4:	ldr	r1, [sp, #128]	; 0x80
   193c8:	add	r4, sp, #136	; 0x88
   193cc:	mov	r2, #256	; 0x100
   193d0:	mov	r8, r5
   193d4:	mov	r9, r7
   193d8:	mov	r0, r4
   193dc:	bl	18b8 <fread@plt>
   193e0:	mov	r7, r0
   193e4:	mov	r5, #0
   193e8:	mov	r0, r4
   193ec:	bl	1c18 <Mat_int16Swap>
   193f0:	strb	r0, [r6, r5]
   193f4:	add	r5, r5, #1
   193f8:	add	r4, r4, #2
   193fc:	cmp	r5, #256	; 0x100
   19400:	bne	193e8 <ReadInt8Data+0x830>
   19404:	ldr	r0, [sp, #124]	; 0x7c
   19408:	ldr	r4, [sp, #132]	; 0x84
   1940c:	mov	r5, r8
   19410:	add	r6, r6, #256	; 0x100
   19414:	add	r5, r7, r8
   19418:	add	r7, r9, #256	; 0x100
   1941c:	cmp	r7, r0
   19420:	blt	193c0 <ReadInt8Data+0x808>
   19424:	ldr	r0, [sp, #120]	; 0x78
   19428:	cmp	r7, r0
   1942c:	bge	1a890 <ReadInt8Data+0x1cd8>
   19430:	ldr	r3, [r4]
   19434:	ldr	r1, [sp, #128]	; 0x80
   19438:	sub	r8, r0, r7
   1943c:	add	r4, sp, #136	; 0x88
   19440:	mov	r0, r4
   19444:	mov	r2, r8
   19448:	bl	18b8 <fread@plt>
   1944c:	add	r5, r0, r5
   19450:	cmp	r8, #1
   19454:	blt	1ac4c <ReadInt8Data+0x2094>
   19458:	ldr	r0, [sp, #124]	; 0x7c
   1945c:	sub	r6, r0, r9
   19460:	mov	r0, r4
   19464:	bl	1c18 <Mat_int16Swap>
   19468:	strb	r0, [sl, r7]
   1946c:	add	sl, sl, #1
   19470:	subs	r6, r6, #1
   19474:	add	r4, r4, #2
   19478:	bne	19460 <ReadInt8Data+0x8a8>
   1947c:	ldr	r8, [sp, #128]	; 0x80
   19480:	mul	r0, r5, r8
   19484:	sub	sp, fp, #28
   19488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1948c:	sub	r0, r9, #256	; 0x100
   19490:	mov	r7, #0
   19494:	mov	r6, sl
   19498:	mov	r5, #0
   1949c:	str	r8, [sp, #128]	; 0x80
   194a0:	str	r9, [sp, #120]	; 0x78
   194a4:	str	r0, [sp, #124]	; 0x7c
   194a8:	ldr	r3, [r4]
   194ac:	ldr	r1, [sp, #128]	; 0x80
   194b0:	add	r4, sp, #136	; 0x88
   194b4:	mov	r2, #256	; 0x100
   194b8:	mov	r8, r5
   194bc:	mov	r9, r7
   194c0:	mov	r0, r4
   194c4:	bl	18b8 <fread@plt>
   194c8:	mov	r7, r0
   194cc:	mov	r5, #0
   194d0:	mov	r0, r4
   194d4:	bl	1c2c <Mat_uint16Swap>
   194d8:	strb	r0, [r6, r5]
   194dc:	add	r5, r5, #1
   194e0:	add	r4, r4, #2
   194e4:	cmp	r5, #256	; 0x100
   194e8:	bne	194d0 <ReadInt8Data+0x918>
   194ec:	ldr	r0, [sp, #124]	; 0x7c
   194f0:	ldr	r4, [sp, #132]	; 0x84
   194f4:	mov	r5, r8
   194f8:	add	r6, r6, #256	; 0x100
   194fc:	add	r5, r7, r8
   19500:	add	r7, r9, #256	; 0x100
   19504:	cmp	r7, r0
   19508:	blt	194a8 <ReadInt8Data+0x8f0>
   1950c:	ldr	r0, [sp, #120]	; 0x78
   19510:	cmp	r7, r0
   19514:	bge	1a8a0 <ReadInt8Data+0x1ce8>
   19518:	ldr	r3, [r4]
   1951c:	ldr	r1, [sp, #128]	; 0x80
   19520:	sub	r8, r0, r7
   19524:	add	r4, sp, #136	; 0x88
   19528:	mov	r0, r4
   1952c:	mov	r2, r8
   19530:	bl	18b8 <fread@plt>
   19534:	add	r5, r0, r5
   19538:	cmp	r8, #1
   1953c:	blt	1ac5c <ReadInt8Data+0x20a4>
   19540:	ldr	r0, [sp, #124]	; 0x7c
   19544:	sub	r6, r0, r9
   19548:	mov	r0, r4
   1954c:	bl	1c2c <Mat_uint16Swap>
   19550:	strb	r0, [sl, r7]
   19554:	add	sl, sl, #1
   19558:	subs	r6, r6, #1
   1955c:	add	r4, r4, #2
   19560:	bne	19548 <ReadInt8Data+0x990>
   19564:	ldr	r8, [sp, #128]	; 0x80
   19568:	mul	r0, r5, r8
   1956c:	sub	sp, fp, #28
   19570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19574:	sub	r0, r9, #256	; 0x100
   19578:	mov	r7, #0
   1957c:	mov	r6, sl
   19580:	mov	r5, #0
   19584:	str	r8, [sp, #128]	; 0x80
   19588:	str	r9, [sp, #120]	; 0x78
   1958c:	str	r0, [sp, #124]	; 0x7c
   19590:	ldr	r3, [r4]
   19594:	ldr	r1, [sp, #128]	; 0x80
   19598:	add	r4, sp, #136	; 0x88
   1959c:	mov	r2, #256	; 0x100
   195a0:	mov	r8, r5
   195a4:	mov	r9, r7
   195a8:	mov	r0, r4
   195ac:	bl	18b8 <fread@plt>
   195b0:	mov	r7, r0
   195b4:	mov	r5, #0
   195b8:	mov	r0, r4
   195bc:	bl	1bf0 <Mat_int32Swap>
   195c0:	strb	r0, [r6, r5]
   195c4:	add	r5, r5, #1
   195c8:	add	r4, r4, #4
   195cc:	cmp	r5, #256	; 0x100
   195d0:	bne	195b8 <ReadInt8Data+0xa00>
   195d4:	ldr	r0, [sp, #124]	; 0x7c
   195d8:	ldr	r4, [sp, #132]	; 0x84
   195dc:	mov	r5, r8
   195e0:	add	r6, r6, #256	; 0x100
   195e4:	add	r5, r7, r8
   195e8:	add	r7, r9, #256	; 0x100
   195ec:	cmp	r7, r0
   195f0:	blt	19590 <ReadInt8Data+0x9d8>
   195f4:	ldr	r0, [sp, #120]	; 0x78
   195f8:	cmp	r7, r0
   195fc:	bge	1a8b0 <ReadInt8Data+0x1cf8>
   19600:	ldr	r3, [r4]
   19604:	ldr	r1, [sp, #128]	; 0x80
   19608:	sub	r8, r0, r7
   1960c:	add	r4, sp, #136	; 0x88
   19610:	mov	r0, r4
   19614:	mov	r2, r8
   19618:	bl	18b8 <fread@plt>
   1961c:	add	r5, r0, r5
   19620:	cmp	r8, #1
   19624:	blt	1ac6c <ReadInt8Data+0x20b4>
   19628:	ldr	r0, [sp, #124]	; 0x7c
   1962c:	sub	r6, r0, r9
   19630:	mov	r0, r4
   19634:	bl	1bf0 <Mat_int32Swap>
   19638:	strb	r0, [sl, r7]
   1963c:	add	sl, sl, #1
   19640:	subs	r6, r6, #1
   19644:	add	r4, r4, #4
   19648:	bne	19630 <ReadInt8Data+0xa78>
   1964c:	ldr	r8, [sp, #128]	; 0x80
   19650:	mul	r0, r5, r8
   19654:	sub	sp, fp, #28
   19658:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1965c:	sub	r0, r9, #256	; 0x100
   19660:	mov	r7, #0
   19664:	mov	r6, sl
   19668:	mov	r5, #0
   1966c:	str	r8, [sp, #128]	; 0x80
   19670:	str	r9, [sp, #120]	; 0x78
   19674:	str	r0, [sp, #124]	; 0x7c
   19678:	ldr	r3, [r4]
   1967c:	ldr	r1, [sp, #128]	; 0x80
   19680:	add	r4, sp, #136	; 0x88
   19684:	mov	r2, #256	; 0x100
   19688:	mov	r8, r5
   1968c:	mov	r9, r7
   19690:	mov	r0, r4
   19694:	bl	18b8 <fread@plt>
   19698:	mov	r7, r0
   1969c:	mov	r5, #0
   196a0:	mov	r0, r4
   196a4:	bl	1c04 <Mat_uint32Swap>
   196a8:	strb	r0, [r6, r5]
   196ac:	add	r5, r5, #1
   196b0:	add	r4, r4, #4
   196b4:	cmp	r5, #256	; 0x100
   196b8:	bne	196a0 <ReadInt8Data+0xae8>
   196bc:	ldr	r0, [sp, #124]	; 0x7c
   196c0:	ldr	r4, [sp, #132]	; 0x84
   196c4:	mov	r5, r8
   196c8:	add	r6, r6, #256	; 0x100
   196cc:	add	r5, r7, r8
   196d0:	add	r7, r9, #256	; 0x100
   196d4:	cmp	r7, r0
   196d8:	blt	19678 <ReadInt8Data+0xac0>
   196dc:	ldr	r0, [sp, #120]	; 0x78
   196e0:	cmp	r7, r0
   196e4:	bge	1a8c0 <ReadInt8Data+0x1d08>
   196e8:	ldr	r3, [r4]
   196ec:	ldr	r1, [sp, #128]	; 0x80
   196f0:	sub	r8, r0, r7
   196f4:	add	r4, sp, #136	; 0x88
   196f8:	mov	r0, r4
   196fc:	mov	r2, r8
   19700:	bl	18b8 <fread@plt>
   19704:	add	r5, r0, r5
   19708:	cmp	r8, #1
   1970c:	blt	1ac7c <ReadInt8Data+0x20c4>
   19710:	ldr	r0, [sp, #124]	; 0x7c
   19714:	sub	r6, r0, r9
   19718:	mov	r0, r4
   1971c:	bl	1c04 <Mat_uint32Swap>
   19720:	strb	r0, [sl, r7]
   19724:	add	sl, sl, #1
   19728:	subs	r6, r6, #1
   1972c:	add	r4, r4, #4
   19730:	bne	19718 <ReadInt8Data+0xb60>
   19734:	ldr	r8, [sp, #128]	; 0x80
   19738:	mul	r0, r5, r8
   1973c:	sub	sp, fp, #28
   19740:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19744:	sub	r0, r9, #256	; 0x100
   19748:	mov	r7, #0
   1974c:	mov	r6, sl
   19750:	mov	r5, #0
   19754:	str	r8, [sp, #128]	; 0x80
   19758:	str	r9, [sp, #120]	; 0x78
   1975c:	str	r0, [sp, #124]	; 0x7c
   19760:	ldr	r3, [r4]
   19764:	ldr	r1, [sp, #128]	; 0x80
   19768:	add	r4, sp, #136	; 0x88
   1976c:	mov	r2, #256	; 0x100
   19770:	mov	r8, r5
   19774:	mov	r9, r7
   19778:	mov	r0, r4
   1977c:	bl	18b8 <fread@plt>
   19780:	mov	r7, r0
   19784:	mov	r5, #0
   19788:	mov	r0, r4
   1978c:	bl	1c44 <Mat_floatSwap>
   19790:	vcvt.s32.f32	s0, s0
   19794:	add	r4, r4, #4
   19798:	vmov	r0, s0
   1979c:	strb	r0, [r6, r5]
   197a0:	add	r5, r5, #1
   197a4:	cmp	r5, #256	; 0x100
   197a8:	bne	19788 <ReadInt8Data+0xbd0>
   197ac:	ldr	r0, [sp, #124]	; 0x7c
   197b0:	ldr	r4, [sp, #132]	; 0x84
   197b4:	mov	r5, r8
   197b8:	add	r6, r6, #256	; 0x100
   197bc:	add	r5, r7, r8
   197c0:	add	r7, r9, #256	; 0x100
   197c4:	cmp	r7, r0
   197c8:	blt	19760 <ReadInt8Data+0xba8>
   197cc:	ldr	r0, [sp, #120]	; 0x78
   197d0:	cmp	r7, r0
   197d4:	bge	1a8d0 <ReadInt8Data+0x1d18>
   197d8:	ldr	r3, [r4]
   197dc:	ldr	r1, [sp, #128]	; 0x80
   197e0:	sub	r8, r0, r7
   197e4:	add	r4, sp, #136	; 0x88
   197e8:	mov	r0, r4
   197ec:	mov	r2, r8
   197f0:	bl	18b8 <fread@plt>
   197f4:	add	r5, r0, r5
   197f8:	cmp	r8, #1
   197fc:	blt	1ac8c <ReadInt8Data+0x20d4>
   19800:	ldr	r0, [sp, #124]	; 0x7c
   19804:	sub	r6, r0, r9
   19808:	mov	r0, r4
   1980c:	bl	1c44 <Mat_floatSwap>
   19810:	vcvt.s32.f32	s0, s0
   19814:	subs	r6, r6, #1
   19818:	add	r4, r4, #4
   1981c:	vmov	r0, s0
   19820:	strb	r0, [sl, r7]
   19824:	add	sl, sl, #1
   19828:	bne	19808 <ReadInt8Data+0xc50>
   1982c:	ldr	r8, [sp, #128]	; 0x80
   19830:	mul	r0, r5, r8
   19834:	sub	sp, fp, #28
   19838:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1983c:	sub	r0, r9, #256	; 0x100
   19840:	str	r9, [sp, #120]	; 0x78
   19844:	mov	r9, #0
   19848:	mov	r6, sl
   1984c:	mov	r5, #0
   19850:	str	r8, [sp, #128]	; 0x80
   19854:	str	r0, [sp, #124]	; 0x7c
   19858:	ldr	r3, [r4]
   1985c:	ldr	r1, [sp, #128]	; 0x80
   19860:	add	r4, sp, #136	; 0x88
   19864:	mov	r2, #256	; 0x100
   19868:	mov	r8, r5
   1986c:	mov	r0, r4
   19870:	bl	18b8 <fread@plt>
   19874:	mov	r7, r0
   19878:	mov	r5, #0
   1987c:	mov	r0, r4
   19880:	bl	1c88 <Mat_doubleSwap>
   19884:	vcvt.s32.f64	s0, d0
   19888:	add	r4, r4, #8
   1988c:	vmov	r0, s0
   19890:	strb	r0, [r6, r5]
   19894:	add	r5, r5, #1
   19898:	cmp	r5, #256	; 0x100
   1989c:	bne	1987c <ReadInt8Data+0xcc4>
   198a0:	ldr	r0, [sp, #124]	; 0x7c
   198a4:	ldr	r4, [sp, #132]	; 0x84
   198a8:	mov	r5, r8
   198ac:	mov	r1, r9
   198b0:	add	r9, r9, #256	; 0x100
   198b4:	add	r6, r6, #256	; 0x100
   198b8:	add	r5, r7, r8
   198bc:	cmp	r9, r0
   198c0:	blt	19858 <ReadInt8Data+0xca0>
   198c4:	ldr	r0, [sp, #120]	; 0x78
   198c8:	cmp	r9, r0
   198cc:	bge	1a8e0 <ReadInt8Data+0x1d28>
   198d0:	mov	r6, r1
   198d4:	ldr	r3, [r4]
   198d8:	ldr	r1, [sp, #128]	; 0x80
   198dc:	sub	r7, r0, r9
   198e0:	add	r4, sp, #136	; 0x88
   198e4:	mov	r0, r4
   198e8:	mov	r2, r7
   198ec:	bl	18b8 <fread@plt>
   198f0:	add	r5, r0, r5
   198f4:	cmp	r7, #1
   198f8:	blt	1ac9c <ReadInt8Data+0x20e4>
   198fc:	ldr	r0, [sp, #124]	; 0x7c
   19900:	sub	r6, r0, r6
   19904:	mov	r0, r4
   19908:	bl	1c88 <Mat_doubleSwap>
   1990c:	vcvt.s32.f64	s0, d0
   19910:	subs	r6, r6, #1
   19914:	add	r4, r4, #8
   19918:	vmov	r0, s0
   1991c:	strb	r0, [sl, r9]
   19920:	add	sl, sl, #1
   19924:	bne	19904 <ReadInt8Data+0xd4c>
   19928:	ldr	r8, [sp, #128]	; 0x80
   1992c:	mul	r0, r5, r8
   19930:	sub	sp, fp, #28
   19934:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19938:	str	r6, [sp, #116]	; 0x74
   1993c:	sub	r0, r9, #256	; 0x100
   19940:	mov	r4, #0
   19944:	mov	r6, sl
   19948:	mov	r5, #0
   1994c:	str	r8, [sp, #128]	; 0x80
   19950:	str	r9, [sp, #120]	; 0x78
   19954:	str	r0, [sp, #124]	; 0x7c
   19958:	ldr	r0, [sp, #132]	; 0x84
   1995c:	ldr	r1, [sp, #128]	; 0x80
   19960:	mov	r9, r4
   19964:	add	r4, sp, #136	; 0x88
   19968:	mov	r2, #256	; 0x100
   1996c:	mov	r8, r5
   19970:	ldr	r3, [r0]
   19974:	mov	r0, r4
   19978:	bl	18b8 <fread@plt>
   1997c:	mov	r7, r0
   19980:	mov	r5, #0
   19984:	mov	r0, r4
   19988:	bl	1b84 <Mat_int64Swap>
   1998c:	strb	r0, [r6, r5]
   19990:	add	r5, r5, #1
   19994:	add	r4, r4, #8
   19998:	cmp	r5, #256	; 0x100
   1999c:	bne	19984 <ReadInt8Data+0xdcc>
   199a0:	ldr	r0, [sp, #124]	; 0x7c
   199a4:	mov	r5, r8
   199a8:	add	r4, r9, #256	; 0x100
   199ac:	add	r6, r6, #256	; 0x100
   199b0:	add	r5, r7, r8
   199b4:	cmp	r4, r0
   199b8:	blt	19958 <ReadInt8Data+0xda0>
   199bc:	ldr	r0, [sp, #120]	; 0x78
   199c0:	cmp	r4, r0
   199c4:	bge	1a8f0 <ReadInt8Data+0x1d38>
   199c8:	sub	r8, r0, r4
   199cc:	ldr	r0, [sp, #132]	; 0x84
   199d0:	ldr	r1, [sp, #128]	; 0x80
   199d4:	add	r7, sp, #136	; 0x88
   199d8:	mov	r2, r8
   199dc:	ldr	r3, [r0]
   199e0:	mov	r0, r7
   199e4:	bl	18b8 <fread@plt>
   199e8:	add	r5, r0, r5
   199ec:	cmp	r8, #1
   199f0:	blt	1a92c <ReadInt8Data+0x1d74>
   199f4:	ldr	r0, [sp, #124]	; 0x7c
   199f8:	mov	r8, r5
   199fc:	mov	r5, sl
   19a00:	sub	r6, r0, r9
   19a04:	mov	r0, r7
   19a08:	bl	1b84 <Mat_int64Swap>
   19a0c:	strb	r0, [r5, r4]
   19a10:	add	r5, r5, #1
   19a14:	subs	r6, r6, #1
   19a18:	add	r7, r7, #8
   19a1c:	bne	19a04 <ReadInt8Data+0xe4c>
   19a20:	ldr	r0, [sp, #128]	; 0x80
   19a24:	ldr	r9, [sp, #120]	; 0x78
   19a28:	mov	r5, r8
   19a2c:	mov	r8, r0
   19a30:	ldr	r4, [sp, #132]	; 0x84
   19a34:	ldr	r6, [sp, #116]	; 0x74
   19a38:	cmp	r6, #13
   19a3c:	beq	1a944 <ReadInt8Data+0x1d8c>
   19a40:	b	1acb0 <ReadInt8Data+0x20f8>
   19a44:	mov	r0, r9
   19a48:	add	r9, sp, #136	; 0x88
   19a4c:	mov	r7, #0
   19a50:	mov	r5, #0
   19a54:	add	r1, r9, #496	; 0x1f0
   19a58:	mov	r6, r0
   19a5c:	sub	r0, r0, #256	; 0x100
   19a60:	str	r1, [sp, #128]	; 0x80
   19a64:	add	r1, r9, #480	; 0x1e0
   19a68:	str	r0, [sp]
   19a6c:	str	r1, [sp, #124]	; 0x7c
   19a70:	add	r1, r9, #464	; 0x1d0
   19a74:	str	r1, [sp, #116]	; 0x74
   19a78:	add	r1, r9, #448	; 0x1c0
   19a7c:	str	r1, [sp, #112]	; 0x70
   19a80:	add	r1, r9, #432	; 0x1b0
   19a84:	str	r1, [sp, #108]	; 0x6c
   19a88:	add	r1, r9, #416	; 0x1a0
   19a8c:	str	r1, [sp, #104]	; 0x68
   19a90:	add	r1, r9, #400	; 0x190
   19a94:	str	r1, [sp, #100]	; 0x64
   19a98:	add	r1, r9, #384	; 0x180
   19a9c:	str	r1, [sp, #96]	; 0x60
   19aa0:	add	r1, r9, #368	; 0x170
   19aa4:	str	r1, [sp, #92]	; 0x5c
   19aa8:	add	r1, r9, #352	; 0x160
   19aac:	str	r1, [sp, #88]	; 0x58
   19ab0:	add	r1, r9, #336	; 0x150
   19ab4:	str	r1, [sp, #84]	; 0x54
   19ab8:	add	r1, r9, #320	; 0x140
   19abc:	str	r1, [sp, #80]	; 0x50
   19ac0:	add	r1, r9, #304	; 0x130
   19ac4:	str	r1, [sp, #76]	; 0x4c
   19ac8:	add	r1, r9, #288	; 0x120
   19acc:	str	r1, [sp, #72]	; 0x48
   19ad0:	add	r1, r9, #272	; 0x110
   19ad4:	str	r1, [sp, #68]	; 0x44
   19ad8:	add	r1, r9, #256	; 0x100
   19adc:	str	r1, [sp, #64]	; 0x40
   19ae0:	add	r1, r9, #240	; 0xf0
   19ae4:	str	r1, [sp, #60]	; 0x3c
   19ae8:	add	r1, r9, #224	; 0xe0
   19aec:	str	r1, [sp, #56]	; 0x38
   19af0:	add	r1, r9, #208	; 0xd0
   19af4:	str	r1, [sp, #52]	; 0x34
   19af8:	add	r1, r9, #192	; 0xc0
   19afc:	str	r1, [sp, #48]	; 0x30
   19b00:	add	r1, r9, #176	; 0xb0
   19b04:	str	r1, [sp, #44]	; 0x2c
   19b08:	add	r1, r9, #160	; 0xa0
   19b0c:	str	r1, [sp, #40]	; 0x28
   19b10:	add	r1, r9, #144	; 0x90
   19b14:	str	r1, [sp, #36]	; 0x24
   19b18:	add	r1, r9, #128	; 0x80
   19b1c:	str	r1, [sp, #32]
   19b20:	add	r1, r9, #112	; 0x70
   19b24:	str	r1, [sp, #28]
   19b28:	add	r1, r9, #96	; 0x60
   19b2c:	str	r1, [sp, #24]
   19b30:	add	r1, r9, #80	; 0x50
   19b34:	str	r1, [sp, #20]
   19b38:	add	r1, r9, #64	; 0x40
   19b3c:	str	r1, [sp, #16]
   19b40:	add	r1, r9, #48	; 0x30
   19b44:	str	r1, [sp, #12]
   19b48:	add	r1, r9, #32
   19b4c:	str	r1, [sp, #8]
   19b50:	add	r1, r9, #16
   19b54:	str	r1, [sp, #4]
   19b58:	ldr	r3, [r4]
   19b5c:	mov	r0, r9
   19b60:	mov	r1, r8
   19b64:	mov	r2, #256	; 0x100
   19b68:	bl	18b8 <fread@plt>
   19b6c:	vld1.16	{d16-d17}, [r9]
   19b70:	add	r2, sl, r7
   19b74:	mov	r3, #248	; 0xf8
   19b78:	add	r5, r0, r5
   19b7c:	ldr	r0, [sp]
   19b80:	add	r7, r7, #256	; 0x100
   19b84:	mov	r1, r2
   19b88:	vmovn.i16	d16, q8
   19b8c:	cmp	r7, r0
   19b90:	vst1.8	{d16}, [r1], r3
   19b94:	ldr	r3, [sp, #4]
   19b98:	vld1.16	{d16-d17}, [r3]
   19b9c:	add	r3, r2, #8
   19ba0:	vmovn.i16	d16, q8
   19ba4:	vst1.8	{d16}, [r3]
   19ba8:	ldr	r3, [sp, #8]
   19bac:	vld1.16	{d16-d17}, [r3]
   19bb0:	add	r3, r2, #16
   19bb4:	vmovn.i16	d16, q8
   19bb8:	vst1.8	{d16}, [r3]
   19bbc:	ldr	r3, [sp, #12]
   19bc0:	vld1.16	{d16-d17}, [r3]
   19bc4:	add	r3, r2, #24
   19bc8:	vmovn.i16	d16, q8
   19bcc:	vst1.8	{d16}, [r3]
   19bd0:	ldr	r3, [sp, #16]
   19bd4:	vld1.16	{d16-d17}, [r3]
   19bd8:	add	r3, r2, #32
   19bdc:	vmovn.i16	d16, q8
   19be0:	vst1.8	{d16}, [r3]
   19be4:	ldr	r3, [sp, #20]
   19be8:	vld1.16	{d16-d17}, [r3]
   19bec:	add	r3, r2, #40	; 0x28
   19bf0:	vmovn.i16	d16, q8
   19bf4:	vst1.8	{d16}, [r3]
   19bf8:	ldr	r3, [sp, #24]
   19bfc:	vld1.16	{d16-d17}, [r3]
   19c00:	add	r3, r2, #48	; 0x30
   19c04:	vmovn.i16	d16, q8
   19c08:	vst1.8	{d16}, [r3]
   19c0c:	ldr	r3, [sp, #28]
   19c10:	vld1.16	{d16-d17}, [r3]
   19c14:	add	r3, r2, #56	; 0x38
   19c18:	vmovn.i16	d16, q8
   19c1c:	vst1.8	{d16}, [r3]
   19c20:	ldr	r3, [sp, #32]
   19c24:	vld1.16	{d16-d17}, [r3]
   19c28:	add	r3, r2, #64	; 0x40
   19c2c:	vmovn.i16	d16, q8
   19c30:	vst1.8	{d16}, [r3]
   19c34:	ldr	r3, [sp, #36]	; 0x24
   19c38:	vld1.16	{d16-d17}, [r3]
   19c3c:	add	r3, r2, #72	; 0x48
   19c40:	vmovn.i16	d16, q8
   19c44:	vst1.8	{d16}, [r3]
   19c48:	ldr	r3, [sp, #40]	; 0x28
   19c4c:	vld1.16	{d16-d17}, [r3]
   19c50:	add	r3, r2, #80	; 0x50
   19c54:	vmovn.i16	d16, q8
   19c58:	vst1.8	{d16}, [r3]
   19c5c:	ldr	r3, [sp, #44]	; 0x2c
   19c60:	vld1.16	{d16-d17}, [r3]
   19c64:	add	r3, r2, #88	; 0x58
   19c68:	vmovn.i16	d16, q8
   19c6c:	vst1.8	{d16}, [r3]
   19c70:	ldr	r3, [sp, #48]	; 0x30
   19c74:	vld1.16	{d16-d17}, [r3]
   19c78:	add	r3, r2, #96	; 0x60
   19c7c:	vmovn.i16	d16, q8
   19c80:	vst1.8	{d16}, [r3]
   19c84:	ldr	r3, [sp, #52]	; 0x34
   19c88:	vld1.16	{d16-d17}, [r3]
   19c8c:	add	r3, r2, #104	; 0x68
   19c90:	vmovn.i16	d16, q8
   19c94:	vst1.8	{d16}, [r3]
   19c98:	ldr	r3, [sp, #56]	; 0x38
   19c9c:	vld1.16	{d16-d17}, [r3]
   19ca0:	add	r3, r2, #112	; 0x70
   19ca4:	vmovn.i16	d16, q8
   19ca8:	vst1.8	{d16}, [r3]
   19cac:	ldr	r3, [sp, #60]	; 0x3c
   19cb0:	vld1.16	{d16-d17}, [r3]
   19cb4:	add	r3, r2, #120	; 0x78
   19cb8:	vmovn.i16	d16, q8
   19cbc:	vst1.8	{d16}, [r3]
   19cc0:	ldr	r3, [sp, #64]	; 0x40
   19cc4:	vld1.16	{d16-d17}, [r3]
   19cc8:	add	r3, r2, #128	; 0x80
   19ccc:	vmovn.i16	d16, q8
   19cd0:	vst1.8	{d16}, [r3]
   19cd4:	ldr	r3, [sp, #68]	; 0x44
   19cd8:	vld1.16	{d16-d17}, [r3]
   19cdc:	add	r3, r2, #136	; 0x88
   19ce0:	vmovn.i16	d16, q8
   19ce4:	vst1.8	{d16}, [r3]
   19ce8:	ldr	r3, [sp, #72]	; 0x48
   19cec:	vld1.16	{d16-d17}, [r3]
   19cf0:	add	r3, r2, #144	; 0x90
   19cf4:	vmovn.i16	d16, q8
   19cf8:	vst1.8	{d16}, [r3]
   19cfc:	ldr	r3, [sp, #76]	; 0x4c
   19d00:	vld1.16	{d16-d17}, [r3]
   19d04:	add	r3, r2, #152	; 0x98
   19d08:	vmovn.i16	d16, q8
   19d0c:	vst1.8	{d16}, [r3]
   19d10:	ldr	r3, [sp, #80]	; 0x50
   19d14:	vld1.16	{d16-d17}, [r3]
   19d18:	add	r3, r2, #160	; 0xa0
   19d1c:	vmovn.i16	d16, q8
   19d20:	vst1.8	{d16}, [r3]
   19d24:	ldr	r3, [sp, #84]	; 0x54
   19d28:	vld1.16	{d16-d17}, [r3]
   19d2c:	add	r3, r2, #168	; 0xa8
   19d30:	vmovn.i16	d16, q8
   19d34:	vst1.8	{d16}, [r3]
   19d38:	ldr	r3, [sp, #88]	; 0x58
   19d3c:	vld1.16	{d16-d17}, [r3]
   19d40:	add	r3, r2, #176	; 0xb0
   19d44:	vmovn.i16	d16, q8
   19d48:	vst1.8	{d16}, [r3]
   19d4c:	ldr	r3, [sp, #92]	; 0x5c
   19d50:	vld1.16	{d16-d17}, [r3]
   19d54:	add	r3, r2, #184	; 0xb8
   19d58:	vmovn.i16	d16, q8
   19d5c:	vst1.8	{d16}, [r3]
   19d60:	ldr	r3, [sp, #96]	; 0x60
   19d64:	vld1.16	{d16-d17}, [r3]
   19d68:	add	r3, r2, #192	; 0xc0
   19d6c:	vmovn.i16	d16, q8
   19d70:	vst1.8	{d16}, [r3]
   19d74:	ldr	r3, [sp, #100]	; 0x64
   19d78:	vld1.16	{d16-d17}, [r3]
   19d7c:	add	r3, r2, #200	; 0xc8
   19d80:	vmovn.i16	d16, q8
   19d84:	vst1.8	{d16}, [r3]
   19d88:	ldr	r3, [sp, #104]	; 0x68
   19d8c:	vld1.16	{d16-d17}, [r3]
   19d90:	add	r3, r2, #208	; 0xd0
   19d94:	vmovn.i16	d16, q8
   19d98:	vst1.8	{d16}, [r3]
   19d9c:	ldr	r3, [sp, #108]	; 0x6c
   19da0:	vld1.16	{d16-d17}, [r3]
   19da4:	add	r3, r2, #216	; 0xd8
   19da8:	vmovn.i16	d16, q8
   19dac:	vst1.8	{d16}, [r3]
   19db0:	ldr	r3, [sp, #112]	; 0x70
   19db4:	vld1.16	{d16-d17}, [r3]
   19db8:	add	r3, r2, #224	; 0xe0
   19dbc:	vmovn.i16	d16, q8
   19dc0:	vst1.8	{d16}, [r3]
   19dc4:	ldr	r3, [sp, #116]	; 0x74
   19dc8:	vld1.16	{d16-d17}, [r3]
   19dcc:	add	r3, r2, #232	; 0xe8
   19dd0:	add	r2, r2, #240	; 0xf0
   19dd4:	vmovn.i16	d16, q8
   19dd8:	vst1.8	{d16}, [r3]
   19ddc:	ldr	r3, [sp, #124]	; 0x7c
   19de0:	vld1.16	{d16-d17}, [r3]
   19de4:	vmovn.i16	d16, q8
   19de8:	vst1.8	{d16}, [r2]
   19dec:	ldr	r2, [sp, #128]	; 0x80
   19df0:	vld1.16	{d16-d17}, [r2]
   19df4:	vmovn.i16	d16, q8
   19df8:	vst1.8	{d16}, [r1]
   19dfc:	blt	19b58 <ReadInt8Data+0xfa0>
   19e00:	cmp	r7, r6
   19e04:	bge	1acb0 <ReadInt8Data+0x20f8>
   19e08:	ldr	r0, [sp, #132]	; 0x84
   19e0c:	sub	r9, r6, r7
   19e10:	add	r4, sp, #136	; 0x88
   19e14:	mov	r1, r8
   19e18:	mov	r2, r9
   19e1c:	ldr	r3, [r0]
   19e20:	mov	r0, r4
   19e24:	bl	18b8 <fread@plt>
   19e28:	add	r5, r0, r5
   19e2c:	cmp	r9, #1
   19e30:	blt	1acb0 <ReadInt8Data+0x20f8>
   19e34:	mov	r0, #0
   19e38:	cmp	r9, #8
   19e3c:	bcc	19e68 <ReadInt8Data+0x12b0>
   19e40:	add	r1, sl, r7
   19e44:	bic	r2, r9, #7
   19e48:	bic	r0, r9, #7
   19e4c:	vld1.16	{d16-d17}, [r4]!
   19e50:	subs	r2, r2, #8
   19e54:	vmovn.i16	d16, q8
   19e58:	vst1.8	{d16}, [r1]!
   19e5c:	bne	19e4c <ReadInt8Data+0x1294>
   19e60:	cmp	r9, r0
   19e64:	beq	1acb0 <ReadInt8Data+0x20f8>
   19e68:	add	r1, sp, #136	; 0x88
   19e6c:	add	r2, sl, r0
   19e70:	add	r1, r1, r0, lsl #1
   19e74:	sub	r0, r6, r0
   19e78:	add	r2, r2, r7
   19e7c:	sub	r0, r0, r7
   19e80:	ldrb	r3, [r1], #2
   19e84:	subs	r0, r0, #1
   19e88:	strb	r3, [r2], #1
   19e8c:	bne	19e80 <ReadInt8Data+0x12c8>
   19e90:	b	1acb0 <ReadInt8Data+0x20f8>
   19e94:	mov	r0, r9
   19e98:	add	r9, sp, #136	; 0x88
   19e9c:	mov	r7, #0
   19ea0:	mov	r5, #0
   19ea4:	add	r1, r9, #496	; 0x1f0
   19ea8:	mov	r6, r0
   19eac:	sub	r0, r0, #256	; 0x100
   19eb0:	str	r1, [sp, #128]	; 0x80
   19eb4:	add	r1, r9, #480	; 0x1e0
   19eb8:	str	r0, [sp]
   19ebc:	str	r1, [sp, #124]	; 0x7c
   19ec0:	add	r1, r9, #464	; 0x1d0
   19ec4:	str	r1, [sp, #116]	; 0x74
   19ec8:	add	r1, r9, #448	; 0x1c0
   19ecc:	str	r1, [sp, #112]	; 0x70
   19ed0:	add	r1, r9, #432	; 0x1b0
   19ed4:	str	r1, [sp, #108]	; 0x6c
   19ed8:	add	r1, r9, #416	; 0x1a0
   19edc:	str	r1, [sp, #104]	; 0x68
   19ee0:	add	r1, r9, #400	; 0x190
   19ee4:	str	r1, [sp, #100]	; 0x64
   19ee8:	add	r1, r9, #384	; 0x180
   19eec:	str	r1, [sp, #96]	; 0x60
   19ef0:	add	r1, r9, #368	; 0x170
   19ef4:	str	r1, [sp, #92]	; 0x5c
   19ef8:	add	r1, r9, #352	; 0x160
   19efc:	str	r1, [sp, #88]	; 0x58
   19f00:	add	r1, r9, #336	; 0x150
   19f04:	str	r1, [sp, #84]	; 0x54
   19f08:	add	r1, r9, #320	; 0x140
   19f0c:	str	r1, [sp, #80]	; 0x50
   19f10:	add	r1, r9, #304	; 0x130
   19f14:	str	r1, [sp, #76]	; 0x4c
   19f18:	add	r1, r9, #288	; 0x120
   19f1c:	str	r1, [sp, #72]	; 0x48
   19f20:	add	r1, r9, #272	; 0x110
   19f24:	str	r1, [sp, #68]	; 0x44
   19f28:	add	r1, r9, #256	; 0x100
   19f2c:	str	r1, [sp, #64]	; 0x40
   19f30:	add	r1, r9, #240	; 0xf0
   19f34:	str	r1, [sp, #60]	; 0x3c
   19f38:	add	r1, r9, #224	; 0xe0
   19f3c:	str	r1, [sp, #56]	; 0x38
   19f40:	add	r1, r9, #208	; 0xd0
   19f44:	str	r1, [sp, #52]	; 0x34
   19f48:	add	r1, r9, #192	; 0xc0
   19f4c:	str	r1, [sp, #48]	; 0x30
   19f50:	add	r1, r9, #176	; 0xb0
   19f54:	str	r1, [sp, #44]	; 0x2c
   19f58:	add	r1, r9, #160	; 0xa0
   19f5c:	str	r1, [sp, #40]	; 0x28
   19f60:	add	r1, r9, #144	; 0x90
   19f64:	str	r1, [sp, #36]	; 0x24
   19f68:	add	r1, r9, #128	; 0x80
   19f6c:	str	r1, [sp, #32]
   19f70:	add	r1, r9, #112	; 0x70
   19f74:	str	r1, [sp, #28]
   19f78:	add	r1, r9, #96	; 0x60
   19f7c:	str	r1, [sp, #24]
   19f80:	add	r1, r9, #80	; 0x50
   19f84:	str	r1, [sp, #20]
   19f88:	add	r1, r9, #64	; 0x40
   19f8c:	str	r1, [sp, #16]
   19f90:	add	r1, r9, #48	; 0x30
   19f94:	str	r1, [sp, #12]
   19f98:	add	r1, r9, #32
   19f9c:	str	r1, [sp, #8]
   19fa0:	add	r1, r9, #16
   19fa4:	str	r1, [sp, #4]
   19fa8:	ldr	r3, [r4]
   19fac:	mov	r0, r9
   19fb0:	mov	r1, r8
   19fb4:	mov	r2, #256	; 0x100
   19fb8:	bl	18b8 <fread@plt>
   19fbc:	vld1.16	{d16-d17}, [r9]
   19fc0:	add	r2, sl, r7
   19fc4:	mov	r3, #248	; 0xf8
   19fc8:	add	r5, r0, r5
   19fcc:	ldr	r0, [sp]
   19fd0:	add	r7, r7, #256	; 0x100
   19fd4:	mov	r1, r2
   19fd8:	vmovn.i16	d16, q8
   19fdc:	cmp	r7, r0
   19fe0:	vst1.8	{d16}, [r1], r3
   19fe4:	ldr	r3, [sp, #4]
   19fe8:	vld1.16	{d16-d17}, [r3]
   19fec:	add	r3, r2, #8
   19ff0:	vmovn.i16	d16, q8
   19ff4:	vst1.8	{d16}, [r3]
   19ff8:	ldr	r3, [sp, #8]
   19ffc:	vld1.16	{d16-d17}, [r3]
   1a000:	add	r3, r2, #16
   1a004:	vmovn.i16	d16, q8
   1a008:	vst1.8	{d16}, [r3]
   1a00c:	ldr	r3, [sp, #12]
   1a010:	vld1.16	{d16-d17}, [r3]
   1a014:	add	r3, r2, #24
   1a018:	vmovn.i16	d16, q8
   1a01c:	vst1.8	{d16}, [r3]
   1a020:	ldr	r3, [sp, #16]
   1a024:	vld1.16	{d16-d17}, [r3]
   1a028:	add	r3, r2, #32
   1a02c:	vmovn.i16	d16, q8
   1a030:	vst1.8	{d16}, [r3]
   1a034:	ldr	r3, [sp, #20]
   1a038:	vld1.16	{d16-d17}, [r3]
   1a03c:	add	r3, r2, #40	; 0x28
   1a040:	vmovn.i16	d16, q8
   1a044:	vst1.8	{d16}, [r3]
   1a048:	ldr	r3, [sp, #24]
   1a04c:	vld1.16	{d16-d17}, [r3]
   1a050:	add	r3, r2, #48	; 0x30
   1a054:	vmovn.i16	d16, q8
   1a058:	vst1.8	{d16}, [r3]
   1a05c:	ldr	r3, [sp, #28]
   1a060:	vld1.16	{d16-d17}, [r3]
   1a064:	add	r3, r2, #56	; 0x38
   1a068:	vmovn.i16	d16, q8
   1a06c:	vst1.8	{d16}, [r3]
   1a070:	ldr	r3, [sp, #32]
   1a074:	vld1.16	{d16-d17}, [r3]
   1a078:	add	r3, r2, #64	; 0x40
   1a07c:	vmovn.i16	d16, q8
   1a080:	vst1.8	{d16}, [r3]
   1a084:	ldr	r3, [sp, #36]	; 0x24
   1a088:	vld1.16	{d16-d17}, [r3]
   1a08c:	add	r3, r2, #72	; 0x48
   1a090:	vmovn.i16	d16, q8
   1a094:	vst1.8	{d16}, [r3]
   1a098:	ldr	r3, [sp, #40]	; 0x28
   1a09c:	vld1.16	{d16-d17}, [r3]
   1a0a0:	add	r3, r2, #80	; 0x50
   1a0a4:	vmovn.i16	d16, q8
   1a0a8:	vst1.8	{d16}, [r3]
   1a0ac:	ldr	r3, [sp, #44]	; 0x2c
   1a0b0:	vld1.16	{d16-d17}, [r3]
   1a0b4:	add	r3, r2, #88	; 0x58
   1a0b8:	vmovn.i16	d16, q8
   1a0bc:	vst1.8	{d16}, [r3]
   1a0c0:	ldr	r3, [sp, #48]	; 0x30
   1a0c4:	vld1.16	{d16-d17}, [r3]
   1a0c8:	add	r3, r2, #96	; 0x60
   1a0cc:	vmovn.i16	d16, q8
   1a0d0:	vst1.8	{d16}, [r3]
   1a0d4:	ldr	r3, [sp, #52]	; 0x34
   1a0d8:	vld1.16	{d16-d17}, [r3]
   1a0dc:	add	r3, r2, #104	; 0x68
   1a0e0:	vmovn.i16	d16, q8
   1a0e4:	vst1.8	{d16}, [r3]
   1a0e8:	ldr	r3, [sp, #56]	; 0x38
   1a0ec:	vld1.16	{d16-d17}, [r3]
   1a0f0:	add	r3, r2, #112	; 0x70
   1a0f4:	vmovn.i16	d16, q8
   1a0f8:	vst1.8	{d16}, [r3]
   1a0fc:	ldr	r3, [sp, #60]	; 0x3c
   1a100:	vld1.16	{d16-d17}, [r3]
   1a104:	add	r3, r2, #120	; 0x78
   1a108:	vmovn.i16	d16, q8
   1a10c:	vst1.8	{d16}, [r3]
   1a110:	ldr	r3, [sp, #64]	; 0x40
   1a114:	vld1.16	{d16-d17}, [r3]
   1a118:	add	r3, r2, #128	; 0x80
   1a11c:	vmovn.i16	d16, q8
   1a120:	vst1.8	{d16}, [r3]
   1a124:	ldr	r3, [sp, #68]	; 0x44
   1a128:	vld1.16	{d16-d17}, [r3]
   1a12c:	add	r3, r2, #136	; 0x88
   1a130:	vmovn.i16	d16, q8
   1a134:	vst1.8	{d16}, [r3]
   1a138:	ldr	r3, [sp, #72]	; 0x48
   1a13c:	vld1.16	{d16-d17}, [r3]
   1a140:	add	r3, r2, #144	; 0x90
   1a144:	vmovn.i16	d16, q8
   1a148:	vst1.8	{d16}, [r3]
   1a14c:	ldr	r3, [sp, #76]	; 0x4c
   1a150:	vld1.16	{d16-d17}, [r3]
   1a154:	add	r3, r2, #152	; 0x98
   1a158:	vmovn.i16	d16, q8
   1a15c:	vst1.8	{d16}, [r3]
   1a160:	ldr	r3, [sp, #80]	; 0x50
   1a164:	vld1.16	{d16-d17}, [r3]
   1a168:	add	r3, r2, #160	; 0xa0
   1a16c:	vmovn.i16	d16, q8
   1a170:	vst1.8	{d16}, [r3]
   1a174:	ldr	r3, [sp, #84]	; 0x54
   1a178:	vld1.16	{d16-d17}, [r3]
   1a17c:	add	r3, r2, #168	; 0xa8
   1a180:	vmovn.i16	d16, q8
   1a184:	vst1.8	{d16}, [r3]
   1a188:	ldr	r3, [sp, #88]	; 0x58
   1a18c:	vld1.16	{d16-d17}, [r3]
   1a190:	add	r3, r2, #176	; 0xb0
   1a194:	vmovn.i16	d16, q8
   1a198:	vst1.8	{d16}, [r3]
   1a19c:	ldr	r3, [sp, #92]	; 0x5c
   1a1a0:	vld1.16	{d16-d17}, [r3]
   1a1a4:	add	r3, r2, #184	; 0xb8
   1a1a8:	vmovn.i16	d16, q8
   1a1ac:	vst1.8	{d16}, [r3]
   1a1b0:	ldr	r3, [sp, #96]	; 0x60
   1a1b4:	vld1.16	{d16-d17}, [r3]
   1a1b8:	add	r3, r2, #192	; 0xc0
   1a1bc:	vmovn.i16	d16, q8
   1a1c0:	vst1.8	{d16}, [r3]
   1a1c4:	ldr	r3, [sp, #100]	; 0x64
   1a1c8:	vld1.16	{d16-d17}, [r3]
   1a1cc:	add	r3, r2, #200	; 0xc8
   1a1d0:	vmovn.i16	d16, q8
   1a1d4:	vst1.8	{d16}, [r3]
   1a1d8:	ldr	r3, [sp, #104]	; 0x68
   1a1dc:	vld1.16	{d16-d17}, [r3]
   1a1e0:	add	r3, r2, #208	; 0xd0
   1a1e4:	vmovn.i16	d16, q8
   1a1e8:	vst1.8	{d16}, [r3]
   1a1ec:	ldr	r3, [sp, #108]	; 0x6c
   1a1f0:	vld1.16	{d16-d17}, [r3]
   1a1f4:	add	r3, r2, #216	; 0xd8
   1a1f8:	vmovn.i16	d16, q8
   1a1fc:	vst1.8	{d16}, [r3]
   1a200:	ldr	r3, [sp, #112]	; 0x70
   1a204:	vld1.16	{d16-d17}, [r3]
   1a208:	add	r3, r2, #224	; 0xe0
   1a20c:	vmovn.i16	d16, q8
   1a210:	vst1.8	{d16}, [r3]
   1a214:	ldr	r3, [sp, #116]	; 0x74
   1a218:	vld1.16	{d16-d17}, [r3]
   1a21c:	add	r3, r2, #232	; 0xe8
   1a220:	add	r2, r2, #240	; 0xf0
   1a224:	vmovn.i16	d16, q8
   1a228:	vst1.8	{d16}, [r3]
   1a22c:	ldr	r3, [sp, #124]	; 0x7c
   1a230:	vld1.16	{d16-d17}, [r3]
   1a234:	vmovn.i16	d16, q8
   1a238:	vst1.8	{d16}, [r2]
   1a23c:	ldr	r2, [sp, #128]	; 0x80
   1a240:	vld1.16	{d16-d17}, [r2]
   1a244:	vmovn.i16	d16, q8
   1a248:	vst1.8	{d16}, [r1]
   1a24c:	blt	19fa8 <ReadInt8Data+0x13f0>
   1a250:	cmp	r7, r6
   1a254:	bge	1acb0 <ReadInt8Data+0x20f8>
   1a258:	ldr	r0, [sp, #132]	; 0x84
   1a25c:	sub	r9, r6, r7
   1a260:	add	r4, sp, #136	; 0x88
   1a264:	mov	r1, r8
   1a268:	mov	r2, r9
   1a26c:	ldr	r3, [r0]
   1a270:	mov	r0, r4
   1a274:	bl	18b8 <fread@plt>
   1a278:	add	r5, r0, r5
   1a27c:	cmp	r9, #1
   1a280:	blt	1acb0 <ReadInt8Data+0x20f8>
   1a284:	mov	r0, #0
   1a288:	cmp	r9, #8
   1a28c:	bcc	1a2b8 <ReadInt8Data+0x1700>
   1a290:	add	r1, sl, r7
   1a294:	bic	r2, r9, #7
   1a298:	bic	r0, r9, #7
   1a29c:	vld1.16	{d16-d17}, [r4]!
   1a2a0:	subs	r2, r2, #8
   1a2a4:	vmovn.i16	d16, q8
   1a2a8:	vst1.8	{d16}, [r1]!
   1a2ac:	bne	1a29c <ReadInt8Data+0x16e4>
   1a2b0:	cmp	r9, r0
   1a2b4:	beq	1acb0 <ReadInt8Data+0x20f8>
   1a2b8:	add	r1, sp, #136	; 0x88
   1a2bc:	add	r2, sl, r0
   1a2c0:	add	r1, r1, r0, lsl #1
   1a2c4:	sub	r0, r6, r0
   1a2c8:	add	r2, r2, r7
   1a2cc:	sub	r0, r0, r7
   1a2d0:	ldrb	r3, [r1], #2
   1a2d4:	subs	r0, r0, #1
   1a2d8:	strb	r3, [r2], #1
   1a2dc:	bne	1a2d0 <ReadInt8Data+0x1718>
   1a2e0:	b	1acb0 <ReadInt8Data+0x20f8>
   1a2e4:	sub	r0, r9, #256	; 0x100
   1a2e8:	add	r1, sl, #256	; 0x100
   1a2ec:	mov	r6, r9
   1a2f0:	add	r4, sp, #136	; 0x88
   1a2f4:	mov	r5, #0
   1a2f8:	str	r0, [sp, #128]	; 0x80
   1a2fc:	mov	r0, #0
   1a300:	mov	r7, r0
   1a304:	ldr	r0, [sp, #132]	; 0x84
   1a308:	mov	r9, r1
   1a30c:	mov	r1, r8
   1a310:	mov	r2, #256	; 0x100
   1a314:	ldr	r3, [r0]
   1a318:	mov	r0, r4
   1a31c:	bl	18b8 <fread@plt>
   1a320:	mov	r1, r4
   1a324:	mov	r2, #0
   1a328:	vld1.32	{d16-d17}, [r1]!
   1a32c:	add	r3, sl, r2
   1a330:	add	r2, r2, #4
   1a334:	cmp	r2, #256	; 0x100
   1a338:	vmovn.i32	d16, q8
   1a33c:	vuzp.8	d16, d17
   1a340:	vst1.32	{d16[0]}, [r3]
   1a344:	bne	1a328 <ReadInt8Data+0x1770>
   1a348:	ldr	r2, [sp, #128]	; 0x80
   1a34c:	add	r5, r0, r5
   1a350:	add	r0, r7, #256	; 0x100
   1a354:	add	sl, sl, #256	; 0x100
   1a358:	add	r1, r9, #256	; 0x100
   1a35c:	cmp	r0, r2
   1a360:	blt	1a300 <ReadInt8Data+0x1748>
   1a364:	cmp	r0, r6
   1a368:	bge	1acb0 <ReadInt8Data+0x20f8>
   1a36c:	sub	r6, r6, r0
   1a370:	ldr	r0, [sp, #132]	; 0x84
   1a374:	add	r4, sp, #136	; 0x88
   1a378:	mov	r1, r8
   1a37c:	mov	r2, r6
   1a380:	ldr	r3, [r0]
   1a384:	mov	r0, r4
   1a388:	bl	18b8 <fread@plt>
   1a38c:	add	r5, r0, r5
   1a390:	cmp	r6, #1
   1a394:	blt	1acb0 <ReadInt8Data+0x20f8>
   1a398:	mov	r0, #0
   1a39c:	cmp	r6, #4
   1a3a0:	bcc	1a3d8 <ReadInt8Data+0x1820>
   1a3a4:	ldr	r0, [sp, #128]	; 0x80
   1a3a8:	mov	r2, r9
   1a3ac:	sub	r0, r0, r7
   1a3b0:	bic	r1, r0, #3
   1a3b4:	bic	r0, r6, #3
   1a3b8:	vld1.32	{d16-d17}, [r4]!
   1a3bc:	subs	r1, r1, #4
   1a3c0:	vmovn.i32	d16, q8
   1a3c4:	vuzp.8	d16, d17
   1a3c8:	vst1.32	{d16[0]}, [r2]!
   1a3cc:	bne	1a3b8 <ReadInt8Data+0x1800>
   1a3d0:	cmp	r6, r0
   1a3d4:	beq	1acb0 <ReadInt8Data+0x20f8>
   1a3d8:	ldr	r3, [sp, #128]	; 0x80
   1a3dc:	add	r2, sp, #136	; 0x88
   1a3e0:	add	r1, r9, r0
   1a3e4:	add	r2, r2, r0, lsl #2
   1a3e8:	sub	r3, r3, r7
   1a3ec:	sub	r0, r3, r0
   1a3f0:	ldr	r3, [r2], #4
   1a3f4:	subs	r0, r0, #1
   1a3f8:	strb	r3, [r1], #1
   1a3fc:	bne	1a3f0 <ReadInt8Data+0x1838>
   1a400:	b	1acb0 <ReadInt8Data+0x20f8>
   1a404:	sub	r0, r9, #256	; 0x100
   1a408:	add	r1, sl, #256	; 0x100
   1a40c:	mov	r6, r9
   1a410:	add	r4, sp, #136	; 0x88
   1a414:	mov	r5, #0
   1a418:	str	r0, [sp, #128]	; 0x80
   1a41c:	mov	r0, #0
   1a420:	mov	r7, r0
   1a424:	ldr	r0, [sp, #132]	; 0x84
   1a428:	mov	r9, r1
   1a42c:	mov	r1, r8
   1a430:	mov	r2, #256	; 0x100
   1a434:	ldr	r3, [r0]
   1a438:	mov	r0, r4
   1a43c:	bl	18b8 <fread@plt>
   1a440:	mov	r1, r4
   1a444:	mov	r2, #0
   1a448:	vld1.32	{d16-d17}, [r1]!
   1a44c:	add	r3, sl, r2
   1a450:	add	r2, r2, #4
   1a454:	cmp	r2, #256	; 0x100
   1a458:	vmovn.i32	d16, q8
   1a45c:	vuzp.8	d16, d17
   1a460:	vst1.32	{d16[0]}, [r3]
   1a464:	bne	1a448 <ReadInt8Data+0x1890>
   1a468:	ldr	r2, [sp, #128]	; 0x80
   1a46c:	add	r5, r0, r5
   1a470:	add	r0, r7, #256	; 0x100
   1a474:	add	sl, sl, #256	; 0x100
   1a478:	add	r1, r9, #256	; 0x100
   1a47c:	cmp	r0, r2
   1a480:	blt	1a420 <ReadInt8Data+0x1868>
   1a484:	cmp	r0, r6
   1a488:	bge	1acb0 <ReadInt8Data+0x20f8>
   1a48c:	sub	r6, r6, r0
   1a490:	ldr	r0, [sp, #132]	; 0x84
   1a494:	add	r4, sp, #136	; 0x88
   1a498:	mov	r1, r8
   1a49c:	mov	r2, r6
   1a4a0:	ldr	r3, [r0]
   1a4a4:	mov	r0, r4
   1a4a8:	bl	18b8 <fread@plt>
   1a4ac:	add	r5, r0, r5
   1a4b0:	cmp	r6, #1
   1a4b4:	blt	1acb0 <ReadInt8Data+0x20f8>
   1a4b8:	mov	r0, #0
   1a4bc:	cmp	r6, #4
   1a4c0:	bcc	1a4f8 <ReadInt8Data+0x1940>
   1a4c4:	ldr	r0, [sp, #128]	; 0x80
   1a4c8:	mov	r2, r9
   1a4cc:	sub	r0, r0, r7
   1a4d0:	bic	r1, r0, #3
   1a4d4:	bic	r0, r6, #3
   1a4d8:	vld1.32	{d16-d17}, [r4]!
   1a4dc:	subs	r1, r1, #4
   1a4e0:	vmovn.i32	d16, q8
   1a4e4:	vuzp.8	d16, d17
   1a4e8:	vst1.32	{d16[0]}, [r2]!
   1a4ec:	bne	1a4d8 <ReadInt8Data+0x1920>
   1a4f0:	cmp	r6, r0
   1a4f4:	beq	1acb0 <ReadInt8Data+0x20f8>
   1a4f8:	ldr	r3, [sp, #128]	; 0x80
   1a4fc:	add	r2, sp, #136	; 0x88
   1a500:	add	r1, r9, r0
   1a504:	add	r2, r2, r0, lsl #2
   1a508:	sub	r3, r3, r7
   1a50c:	sub	r0, r3, r0
   1a510:	ldr	r3, [r2], #4
   1a514:	subs	r0, r0, #1
   1a518:	strb	r3, [r1], #1
   1a51c:	bne	1a510 <ReadInt8Data+0x1958>
   1a520:	b	1acb0 <ReadInt8Data+0x20f8>
   1a524:	sub	r0, r9, #256	; 0x100
   1a528:	add	r1, sl, #256	; 0x100
   1a52c:	mov	r6, r9
   1a530:	add	r4, sp, #136	; 0x88
   1a534:	mov	r5, #0
   1a538:	str	r0, [sp, #128]	; 0x80
   1a53c:	mov	r0, #0
   1a540:	mov	r7, r0
   1a544:	ldr	r0, [sp, #132]	; 0x84
   1a548:	mov	r9, r1
   1a54c:	mov	r1, r8
   1a550:	mov	r2, #256	; 0x100
   1a554:	ldr	r3, [r0]
   1a558:	mov	r0, r4
   1a55c:	bl	18b8 <fread@plt>
   1a560:	mov	r1, r4
   1a564:	mov	r2, #0
   1a568:	vld1.32	{d16-d17}, [r1]!
   1a56c:	add	r3, sl, r2
   1a570:	add	r2, r2, #4
   1a574:	cmp	r2, #256	; 0x100
   1a578:	vcvt.s32.f32	q8, q8
   1a57c:	vmovn.i32	d16, q8
   1a580:	vuzp.8	d16, d17
   1a584:	vst1.32	{d16[0]}, [r3]
   1a588:	bne	1a568 <ReadInt8Data+0x19b0>
   1a58c:	ldr	r2, [sp, #128]	; 0x80
   1a590:	add	r5, r0, r5
   1a594:	add	r0, r7, #256	; 0x100
   1a598:	add	sl, sl, #256	; 0x100
   1a59c:	add	r1, r9, #256	; 0x100
   1a5a0:	cmp	r0, r2
   1a5a4:	blt	1a540 <ReadInt8Data+0x1988>
   1a5a8:	cmp	r0, r6
   1a5ac:	bge	1acb0 <ReadInt8Data+0x20f8>
   1a5b0:	sub	r6, r6, r0
   1a5b4:	ldr	r0, [sp, #132]	; 0x84
   1a5b8:	add	r4, sp, #136	; 0x88
   1a5bc:	mov	r1, r8
   1a5c0:	mov	r2, r6
   1a5c4:	ldr	r3, [r0]
   1a5c8:	mov	r0, r4
   1a5cc:	bl	18b8 <fread@plt>
   1a5d0:	add	r5, r0, r5
   1a5d4:	cmp	r6, #1
   1a5d8:	blt	1acb0 <ReadInt8Data+0x20f8>
   1a5dc:	mov	r0, #0
   1a5e0:	cmp	r6, #4
   1a5e4:	bcc	1a620 <ReadInt8Data+0x1a68>
   1a5e8:	ldr	r0, [sp, #128]	; 0x80
   1a5ec:	mov	r2, r9
   1a5f0:	sub	r0, r0, r7
   1a5f4:	bic	r1, r0, #3
   1a5f8:	bic	r0, r6, #3
   1a5fc:	vld1.32	{d16-d17}, [r4]!
   1a600:	subs	r1, r1, #4
   1a604:	vcvt.s32.f32	q8, q8
   1a608:	vmovn.i32	d16, q8
   1a60c:	vuzp.8	d16, d17
   1a610:	vst1.32	{d16[0]}, [r2]!
   1a614:	bne	1a5fc <ReadInt8Data+0x1a44>
   1a618:	cmp	r6, r0
   1a61c:	beq	1acb0 <ReadInt8Data+0x20f8>
   1a620:	ldr	r3, [sp, #128]	; 0x80
   1a624:	add	r2, sp, #136	; 0x88
   1a628:	add	r1, r9, r0
   1a62c:	add	r2, r2, r0, lsl #2
   1a630:	sub	r3, r3, r7
   1a634:	sub	r0, r3, r0
   1a638:	vldr	s0, [r2]
   1a63c:	subs	r0, r0, #1
   1a640:	add	r2, r2, #4
   1a644:	vcvt.s32.f32	s0, s0
   1a648:	vmov	r3, s0
   1a64c:	strb	r3, [r1], #1
   1a650:	bne	1a638 <ReadInt8Data+0x1a80>
   1a654:	b	1acb0 <ReadInt8Data+0x20f8>
   1a658:	mov	r5, r8
   1a65c:	sub	r0, r9, #256	; 0x100
   1a660:	str	r9, [sp, #120]	; 0x78
   1a664:	mov	r8, #0
   1a668:	add	r9, sp, #136	; 0x88
   1a66c:	mov	r4, sl
   1a670:	mov	r6, #0
   1a674:	str	r0, [sp, #128]	; 0x80
   1a678:	ldr	r0, [sp, #132]	; 0x84
   1a67c:	mov	r1, r5
   1a680:	mov	r2, #256	; 0x100
   1a684:	mov	r7, r8
   1a688:	ldr	r3, [r0]
   1a68c:	mov	r0, r9
   1a690:	bl	18b8 <fread@plt>
   1a694:	mov	r1, r9
   1a698:	mov	r2, #0
   1a69c:	vldr	d16, [r1]
   1a6a0:	add	r1, r1, #8
   1a6a4:	vcvt.s32.f64	s0, d16
   1a6a8:	vmov	r3, s0
   1a6ac:	strb	r3, [r4, r2]
   1a6b0:	add	r2, r2, #1
   1a6b4:	cmp	r2, #256	; 0x100
   1a6b8:	bne	1a69c <ReadInt8Data+0x1ae4>
   1a6bc:	add	r6, r0, r6
   1a6c0:	ldr	r0, [sp, #128]	; 0x80
   1a6c4:	add	r8, r7, #256	; 0x100
   1a6c8:	add	r4, r4, #256	; 0x100
   1a6cc:	cmp	r8, r0
   1a6d0:	blt	1a678 <ReadInt8Data+0x1ac0>
   1a6d4:	ldr	r0, [sp, #120]	; 0x78
   1a6d8:	cmp	r8, r0
   1a6dc:	bge	1a734 <ReadInt8Data+0x1b7c>
   1a6e0:	sub	r9, r0, r8
   1a6e4:	ldr	r0, [sp, #132]	; 0x84
   1a6e8:	add	r4, sp, #136	; 0x88
   1a6ec:	mov	r1, r5
   1a6f0:	mov	r2, r9
   1a6f4:	ldr	r3, [r0]
   1a6f8:	mov	r0, r4
   1a6fc:	bl	18b8 <fread@plt>
   1a700:	add	r6, r0, r6
   1a704:	cmp	r9, #1
   1a708:	blt	1a734 <ReadInt8Data+0x1b7c>
   1a70c:	ldr	r0, [sp, #128]	; 0x80
   1a710:	sub	r0, r0, r7
   1a714:	vldr	d16, [r4]
   1a718:	subs	r0, r0, #1
   1a71c:	add	r4, r4, #8
   1a720:	vcvt.s32.f64	s0, d16
   1a724:	vmov	r1, s0
   1a728:	strb	r1, [sl, r8]
   1a72c:	add	sl, sl, #1
   1a730:	bne	1a714 <ReadInt8Data+0x1b5c>
   1a734:	mov	r8, r5
   1a738:	mov	r5, r6
   1a73c:	mul	r0, r5, r8
   1a740:	sub	sp, fp, #28
   1a744:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a748:	sub	r0, r9, #256	; 0x100
   1a74c:	str	r8, [sp, #128]	; 0x80
   1a750:	add	r1, sl, #256	; 0x100
   1a754:	add	r4, sp, #136	; 0x88
   1a758:	mov	r5, sl
   1a75c:	mov	r8, #0
   1a760:	str	r6, [sp, #116]	; 0x74
   1a764:	str	r9, [sp, #120]	; 0x78
   1a768:	str	r0, [sp, #124]	; 0x7c
   1a76c:	mov	r0, #0
   1a770:	mov	r7, r0
   1a774:	ldr	r0, [sp, #132]	; 0x84
   1a778:	mov	r9, r1
   1a77c:	ldr	r1, [sp, #128]	; 0x80
   1a780:	mov	r2, #256	; 0x100
   1a784:	ldr	r3, [r0]
   1a788:	mov	r0, r4
   1a78c:	bl	18b8 <fread@plt>
   1a790:	mov	r1, r4
   1a794:	mov	r2, #0
   1a798:	vld1.64	{d16-d17}, [r1]!
   1a79c:	mov	r6, r5
   1a7a0:	vmovn.i64	d16, q8
   1a7a4:	vmov.32	r3, d16[0]
   1a7a8:	strb	r3, [r6, r2]!
   1a7ac:	add	r2, r2, #2
   1a7b0:	vmov.32	r3, d16[1]
   1a7b4:	cmp	r2, #256	; 0x100
   1a7b8:	strb	r3, [r6, #1]
   1a7bc:	bne	1a798 <ReadInt8Data+0x1be0>
   1a7c0:	ldr	r2, [sp, #124]	; 0x7c
   1a7c4:	add	r8, r0, r8
   1a7c8:	add	r0, r7, #256	; 0x100
   1a7cc:	add	r5, r5, #256	; 0x100
   1a7d0:	add	r1, r9, #256	; 0x100
   1a7d4:	cmp	r0, r2
   1a7d8:	blt	1a770 <ReadInt8Data+0x1bb8>
   1a7dc:	ldr	r1, [sp, #120]	; 0x78
   1a7e0:	cmp	r0, r1
   1a7e4:	bge	1a90c <ReadInt8Data+0x1d54>
   1a7e8:	sub	r6, r1, r0
   1a7ec:	ldr	r0, [sp, #132]	; 0x84
   1a7f0:	ldr	r1, [sp, #128]	; 0x80
   1a7f4:	add	r4, sp, #136	; 0x88
   1a7f8:	mov	r2, r6
   1a7fc:	ldr	r3, [r0]
   1a800:	mov	r0, r4
   1a804:	bl	18b8 <fread@plt>
   1a808:	mov	r5, r8
   1a80c:	cmp	r6, #1
   1a810:	add	r5, r0, r8
   1a814:	blt	1a92c <ReadInt8Data+0x1d74>
   1a818:	ldr	r8, [sp, #128]	; 0x80
   1a81c:	mov	r0, #0
   1a820:	beq	1a864 <ReadInt8Data+0x1cac>
   1a824:	ldr	r0, [sp, #124]	; 0x7c
   1a828:	mov	r2, r9
   1a82c:	sub	r0, r0, r7
   1a830:	bic	r1, r0, #1
   1a834:	bic	r0, r6, #1
   1a838:	vld1.64	{d16-d17}, [r4]!
   1a83c:	subs	r1, r1, #2
   1a840:	vmovn.i64	d16, q8
   1a844:	vmov.32	r3, d16[1]
   1a848:	strb	r3, [r2, #1]
   1a84c:	vmov.32	r3, d16[0]
   1a850:	strb	r3, [r2]
   1a854:	add	r2, r2, #2
   1a858:	bne	1a838 <ReadInt8Data+0x1c80>
   1a85c:	cmp	r6, r0
   1a860:	beq	1a930 <ReadInt8Data+0x1d78>
   1a864:	ldr	r3, [sp, #124]	; 0x7c
   1a868:	add	r2, sp, #136	; 0x88
   1a86c:	add	r1, r9, r0
   1a870:	add	r2, r2, r0, lsl #3
   1a874:	sub	r3, r3, r7
   1a878:	sub	r0, r3, r0
   1a87c:	ldrb	r3, [r2], #8
   1a880:	subs	r0, r0, #1
   1a884:	strb	r3, [r1], #1
   1a888:	bne	1a87c <ReadInt8Data+0x1cc4>
   1a88c:	b	1a930 <ReadInt8Data+0x1d78>
   1a890:	ldr	r8, [sp, #128]	; 0x80
   1a894:	mul	r0, r5, r8
   1a898:	sub	sp, fp, #28
   1a89c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8a0:	ldr	r8, [sp, #128]	; 0x80
   1a8a4:	mul	r0, r5, r8
   1a8a8:	sub	sp, fp, #28
   1a8ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8b0:	ldr	r8, [sp, #128]	; 0x80
   1a8b4:	mul	r0, r5, r8
   1a8b8:	sub	sp, fp, #28
   1a8bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8c0:	ldr	r8, [sp, #128]	; 0x80
   1a8c4:	mul	r0, r5, r8
   1a8c8:	sub	sp, fp, #28
   1a8cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8d0:	ldr	r8, [sp, #128]	; 0x80
   1a8d4:	mul	r0, r5, r8
   1a8d8:	sub	sp, fp, #28
   1a8dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8e0:	ldr	r8, [sp, #128]	; 0x80
   1a8e4:	mul	r0, r5, r8
   1a8e8:	sub	sp, fp, #28
   1a8ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8f0:	ldr	r8, [sp, #128]	; 0x80
   1a8f4:	ldr	r4, [sp, #132]	; 0x84
   1a8f8:	ldr	r6, [sp, #116]	; 0x74
   1a8fc:	mov	r9, r0
   1a900:	cmp	r6, #13
   1a904:	beq	1a944 <ReadInt8Data+0x1d8c>
   1a908:	b	1acb0 <ReadInt8Data+0x20f8>
   1a90c:	mov	r5, r8
   1a910:	ldr	r8, [sp, #128]	; 0x80
   1a914:	ldr	r4, [sp, #132]	; 0x84
   1a918:	ldr	r6, [sp, #116]	; 0x74
   1a91c:	mov	r9, r1
   1a920:	cmp	r6, #13
   1a924:	beq	1a944 <ReadInt8Data+0x1d8c>
   1a928:	b	1acb0 <ReadInt8Data+0x20f8>
   1a92c:	ldr	r8, [sp, #128]	; 0x80
   1a930:	ldr	r4, [sp, #132]	; 0x84
   1a934:	ldr	r6, [sp, #116]	; 0x74
   1a938:	ldr	r9, [sp, #120]	; 0x78
   1a93c:	cmp	r6, #13
   1a940:	bne	1acb0 <ReadInt8Data+0x20f8>
   1a944:	ldr	r0, [r4, #20]
   1a948:	cmp	r0, #0
   1a94c:	beq	1a998 <ReadInt8Data+0x1de0>
   1a950:	cmp	r9, #256	; 0x100
   1a954:	bgt	1aa28 <ReadInt8Data+0x1e70>
   1a958:	ldr	r3, [r4]
   1a95c:	add	r4, sp, #136	; 0x88
   1a960:	mov	r1, r8
   1a964:	mov	r2, r9
   1a968:	mov	r0, r4
   1a96c:	bl	18b8 <fread@plt>
   1a970:	add	r5, r0, r5
   1a974:	cmp	r9, #1
   1a978:	blt	1acb0 <ReadInt8Data+0x20f8>
   1a97c:	mov	r0, r4
   1a980:	bl	1bd4 <Mat_uint64Swap>
   1a984:	strb	r0, [sl], #1
   1a988:	subs	r9, r9, #1
   1a98c:	add	r4, r4, #8
   1a990:	bne	1a97c <ReadInt8Data+0x1dc4>
   1a994:	b	1acb0 <ReadInt8Data+0x20f8>
   1a998:	cmp	r9, #256	; 0x100
   1a99c:	bgt	1ab0c <ReadInt8Data+0x1f54>
   1a9a0:	ldr	r3, [r4]
   1a9a4:	add	r4, sp, #136	; 0x88
   1a9a8:	mov	r1, r8
   1a9ac:	mov	r2, r9
   1a9b0:	mov	r0, r4
   1a9b4:	bl	18b8 <fread@plt>
   1a9b8:	add	r5, r0, r5
   1a9bc:	cmp	r9, #1
   1a9c0:	blt	1acb0 <ReadInt8Data+0x20f8>
   1a9c4:	mov	r0, #0
   1a9c8:	beq	1aa04 <ReadInt8Data+0x1e4c>
   1a9cc:	bic	r0, r9, #1
   1a9d0:	mov	r2, sl
   1a9d4:	mov	r1, r0
   1a9d8:	vld1.64	{d16-d17}, [r4]!
   1a9dc:	subs	r1, r1, #2
   1a9e0:	vmovn.i64	d16, q8
   1a9e4:	vmov.32	r3, d16[1]
   1a9e8:	strb	r3, [r2, #1]
   1a9ec:	vmov.32	r3, d16[0]
   1a9f0:	strb	r3, [r2]
   1a9f4:	add	r2, r2, #2
   1a9f8:	bne	1a9d8 <ReadInt8Data+0x1e20>
   1a9fc:	cmp	r0, r9
   1aa00:	beq	1acb0 <ReadInt8Data+0x20f8>
   1aa04:	add	r3, sp, #136	; 0x88
   1aa08:	sub	r1, r9, r0
   1aa0c:	add	r2, sl, r0
   1aa10:	add	r0, r3, r0, lsl #3
   1aa14:	ldrb	r3, [r0], #8
   1aa18:	subs	r1, r1, #1
   1aa1c:	strb	r3, [r2], #1
   1aa20:	bne	1aa14 <ReadInt8Data+0x1e5c>
   1aa24:	b	1acb0 <ReadInt8Data+0x20f8>
   1aa28:	sub	r0, r9, #256	; 0x100
   1aa2c:	mov	r7, #0
   1aa30:	mov	r6, sl
   1aa34:	str	r8, [sp, #128]	; 0x80
   1aa38:	str	r9, [sp, #120]	; 0x78
   1aa3c:	str	r0, [sp, #124]	; 0x7c
   1aa40:	ldr	r3, [r4]
   1aa44:	ldr	r1, [sp, #128]	; 0x80
   1aa48:	add	r4, sp, #136	; 0x88
   1aa4c:	mov	r2, #256	; 0x100
   1aa50:	mov	r8, r5
   1aa54:	mov	r9, r7
   1aa58:	mov	r0, r4
   1aa5c:	bl	18b8 <fread@plt>
   1aa60:	mov	r7, r0
   1aa64:	mov	r5, #0
   1aa68:	mov	r0, r4
   1aa6c:	bl	1bd4 <Mat_uint64Swap>
   1aa70:	strb	r0, [r6, r5]
   1aa74:	add	r5, r5, #1
   1aa78:	add	r4, r4, #8
   1aa7c:	cmp	r5, #256	; 0x100
   1aa80:	bne	1aa68 <ReadInt8Data+0x1eb0>
   1aa84:	ldr	r0, [sp, #124]	; 0x7c
   1aa88:	ldr	r4, [sp, #132]	; 0x84
   1aa8c:	mov	r5, r8
   1aa90:	add	r6, r6, #256	; 0x100
   1aa94:	add	r5, r7, r8
   1aa98:	add	r7, r9, #256	; 0x100
   1aa9c:	cmp	r7, r0
   1aaa0:	blt	1aa40 <ReadInt8Data+0x1e88>
   1aaa4:	ldr	r0, [sp, #120]	; 0x78
   1aaa8:	cmp	r7, r0
   1aaac:	bge	1ac3c <ReadInt8Data+0x2084>
   1aab0:	ldr	r3, [r4]
   1aab4:	ldr	r1, [sp, #128]	; 0x80
   1aab8:	sub	r8, r0, r7
   1aabc:	add	r4, sp, #136	; 0x88
   1aac0:	mov	r0, r4
   1aac4:	mov	r2, r8
   1aac8:	bl	18b8 <fread@plt>
   1aacc:	add	r5, r0, r5
   1aad0:	cmp	r8, #1
   1aad4:	blt	1acac <ReadInt8Data+0x20f4>
   1aad8:	ldr	r0, [sp, #124]	; 0x7c
   1aadc:	sub	r6, r0, r9
   1aae0:	mov	r0, r4
   1aae4:	bl	1bd4 <Mat_uint64Swap>
   1aae8:	strb	r0, [sl, r7]
   1aaec:	add	sl, sl, #1
   1aaf0:	subs	r6, r6, #1
   1aaf4:	add	r4, r4, #8
   1aaf8:	bne	1aae0 <ReadInt8Data+0x1f28>
   1aafc:	ldr	r8, [sp, #128]	; 0x80
   1ab00:	mul	r0, r5, r8
   1ab04:	sub	sp, fp, #28
   1ab08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab0c:	sub	r0, r9, #256	; 0x100
   1ab10:	add	r1, sl, #256	; 0x100
   1ab14:	add	r4, sp, #136	; 0x88
   1ab18:	str	r9, [sp, #120]	; 0x78
   1ab1c:	str	r0, [sp, #128]	; 0x80
   1ab20:	mov	r0, #0
   1ab24:	mov	r7, r0
   1ab28:	ldr	r0, [sp, #132]	; 0x84
   1ab2c:	mov	r9, r1
   1ab30:	mov	r1, r8
   1ab34:	mov	r2, #256	; 0x100
   1ab38:	ldr	r3, [r0]
   1ab3c:	mov	r0, r4
   1ab40:	bl	18b8 <fread@plt>
   1ab44:	mov	r1, r4
   1ab48:	mov	r2, #0
   1ab4c:	vld1.64	{d16-d17}, [r1]!
   1ab50:	mov	r6, sl
   1ab54:	vmovn.i64	d16, q8
   1ab58:	vmov.32	r3, d16[0]
   1ab5c:	strb	r3, [r6, r2]!
   1ab60:	add	r2, r2, #2
   1ab64:	vmov.32	r3, d16[1]
   1ab68:	cmp	r2, #256	; 0x100
   1ab6c:	strb	r3, [r6, #1]
   1ab70:	bne	1ab4c <ReadInt8Data+0x1f94>
   1ab74:	ldr	r2, [sp, #128]	; 0x80
   1ab78:	add	r5, r0, r5
   1ab7c:	add	r0, r7, #256	; 0x100
   1ab80:	add	sl, sl, #256	; 0x100
   1ab84:	add	r1, r9, #256	; 0x100
   1ab88:	cmp	r0, r2
   1ab8c:	blt	1ab24 <ReadInt8Data+0x1f6c>
   1ab90:	ldr	r1, [sp, #120]	; 0x78
   1ab94:	cmp	r0, r1
   1ab98:	bge	1acb0 <ReadInt8Data+0x20f8>
   1ab9c:	sub	r6, r1, r0
   1aba0:	ldr	r0, [sp, #132]	; 0x84
   1aba4:	add	r4, sp, #136	; 0x88
   1aba8:	mov	r1, r8
   1abac:	mov	r2, r6
   1abb0:	ldr	r3, [r0]
   1abb4:	mov	r0, r4
   1abb8:	bl	18b8 <fread@plt>
   1abbc:	add	r5, r0, r5
   1abc0:	cmp	r6, #1
   1abc4:	blt	1acb0 <ReadInt8Data+0x20f8>
   1abc8:	mov	r0, #0
   1abcc:	beq	1ac10 <ReadInt8Data+0x2058>
   1abd0:	ldr	r0, [sp, #128]	; 0x80
   1abd4:	mov	r2, r9
   1abd8:	sub	r0, r0, r7
   1abdc:	bic	r1, r0, #1
   1abe0:	bic	r0, r6, #1
   1abe4:	vld1.64	{d16-d17}, [r4]!
   1abe8:	subs	r1, r1, #2
   1abec:	vmovn.i64	d16, q8
   1abf0:	vmov.32	r3, d16[1]
   1abf4:	strb	r3, [r2, #1]
   1abf8:	vmov.32	r3, d16[0]
   1abfc:	strb	r3, [r2]
   1ac00:	add	r2, r2, #2
   1ac04:	bne	1abe4 <ReadInt8Data+0x202c>
   1ac08:	cmp	r6, r0
   1ac0c:	beq	1acb0 <ReadInt8Data+0x20f8>
   1ac10:	ldr	r3, [sp, #128]	; 0x80
   1ac14:	add	r2, sp, #136	; 0x88
   1ac18:	add	r1, r9, r0
   1ac1c:	add	r2, r2, r0, lsl #3
   1ac20:	sub	r3, r3, r7
   1ac24:	sub	r0, r3, r0
   1ac28:	ldrb	r3, [r2], #8
   1ac2c:	subs	r0, r0, #1
   1ac30:	strb	r3, [r1], #1
   1ac34:	bne	1ac28 <ReadInt8Data+0x2070>
   1ac38:	b	1acb0 <ReadInt8Data+0x20f8>
   1ac3c:	ldr	r8, [sp, #128]	; 0x80
   1ac40:	mul	r0, r5, r8
   1ac44:	sub	sp, fp, #28
   1ac48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac4c:	ldr	r8, [sp, #128]	; 0x80
   1ac50:	mul	r0, r5, r8
   1ac54:	sub	sp, fp, #28
   1ac58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac5c:	ldr	r8, [sp, #128]	; 0x80
   1ac60:	mul	r0, r5, r8
   1ac64:	sub	sp, fp, #28
   1ac68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac6c:	ldr	r8, [sp, #128]	; 0x80
   1ac70:	mul	r0, r5, r8
   1ac74:	sub	sp, fp, #28
   1ac78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac7c:	ldr	r8, [sp, #128]	; 0x80
   1ac80:	mul	r0, r5, r8
   1ac84:	sub	sp, fp, #28
   1ac88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac8c:	ldr	r8, [sp, #128]	; 0x80
   1ac90:	mul	r0, r5, r8
   1ac94:	sub	sp, fp, #28
   1ac98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac9c:	ldr	r8, [sp, #128]	; 0x80
   1aca0:	mul	r0, r5, r8
   1aca4:	sub	sp, fp, #28
   1aca8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1acac:	ldr	r8, [sp, #128]	; 0x80
   1acb0:	mul	r0, r5, r8
   1acb4:	sub	sp, fp, #28
   1acb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001acbc <ReadCompressedInt8Data>:
   1acbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1acc0:	add	fp, sp, #28
   1acc4:	sub	sp, sp, #12
   1acc8:	mov	r7, r0
   1accc:	mov	r0, #0
   1acd0:	cmp	r1, #0
   1acd4:	beq	1ace8 <ReadCompressedInt8Data+0x2c>
   1acd8:	cmp	r7, #0
   1acdc:	movne	r5, r2
   1ace0:	cmpne	r2, #0
   1ace4:	bne	1acf0 <ReadCompressedInt8Data+0x34>
   1ace8:	sub	sp, fp, #28
   1acec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1acf0:	ldr	sl, [fp, #8]
   1acf4:	mov	r0, r3
   1acf8:	mov	r4, r3
   1acfc:	mov	r6, r1
   1ad00:	bl	1924 <Mat_SizeOf@plt>
   1ad04:	mov	r9, r0
   1ad08:	sub	r0, r4, #1
   1ad0c:	cmp	r0, #12
   1ad10:	bhi	1b1e0 <ReadCompressedInt8Data+0x524>
   1ad14:	add	r1, pc, #4
   1ad18:	ldr	r0, [r1, r0, lsl #2]
   1ad1c:	add	pc, r1, r0
   1ad20:	.word	0x00000034
   1ad24:	.word	0x0000006c
   1ad28:	.word	0x000000a4
   1ad2c:	.word	0x000000ec
   1ad30:	.word	0x00000134
   1ad34:	.word	0x0000017c
   1ad38:	.word	0x000001c4
   1ad3c:	.word	0x000004c0
   1ad40:	.word	0x00000214
   1ad44:	.word	0x000004c0
   1ad48:	.word	0x000004c0
   1ad4c:	.word	0x00000264
   1ad50:	.word	0x000002ac
   1ad54:	cmp	sl, #1
   1ad58:	blt	1b1e0 <ReadCompressedInt8Data+0x524>
   1ad5c:	mov	r8, sp
   1ad60:	mov	r4, sl
   1ad64:	mov	r0, r7
   1ad68:	mov	r1, r6
   1ad6c:	mov	r2, r8
   1ad70:	mov	r3, r9
   1ad74:	bl	32fc <InflateData>
   1ad78:	ldrb	r0, [sp]
   1ad7c:	subs	r4, r4, #1
   1ad80:	strb	r0, [r5], #1
   1ad84:	bne	1ad64 <ReadCompressedInt8Data+0xa8>
   1ad88:	b	1b1e0 <ReadCompressedInt8Data+0x524>
   1ad8c:	cmp	sl, #1
   1ad90:	blt	1b1e0 <ReadCompressedInt8Data+0x524>
   1ad94:	mov	r8, sp
   1ad98:	mov	r4, sl
   1ad9c:	mov	r0, r7
   1ada0:	mov	r1, r6
   1ada4:	mov	r2, r8
   1ada8:	mov	r3, r9
   1adac:	bl	32fc <InflateData>
   1adb0:	ldrb	r0, [sp]
   1adb4:	subs	r4, r4, #1
   1adb8:	strb	r0, [r5], #1
   1adbc:	bne	1ad9c <ReadCompressedInt8Data+0xe0>
   1adc0:	b	1b1e0 <ReadCompressedInt8Data+0x524>
   1adc4:	ldr	r0, [r7, #20]
   1adc8:	cmp	r0, #0
   1adcc:	beq	1b014 <ReadCompressedInt8Data+0x358>
   1add0:	cmp	sl, #1
   1add4:	blt	1b1e0 <ReadCompressedInt8Data+0x524>
   1add8:	mov	r8, sp
   1addc:	mov	r4, sl
   1ade0:	mov	r0, r7
   1ade4:	mov	r1, r6
   1ade8:	mov	r2, r8
   1adec:	mov	r3, r9
   1adf0:	bl	32fc <InflateData>
   1adf4:	mov	r0, r8
   1adf8:	bl	1c18 <Mat_int16Swap>
   1adfc:	strb	r0, [r5], #1
   1ae00:	subs	r4, r4, #1
   1ae04:	bne	1ade0 <ReadCompressedInt8Data+0x124>
   1ae08:	b	1b1e0 <ReadCompressedInt8Data+0x524>
   1ae0c:	ldr	r0, [r7, #20]
   1ae10:	cmp	r0, #0
   1ae14:	beq	1b04c <ReadCompressedInt8Data+0x390>
   1ae18:	cmp	sl, #1
   1ae1c:	blt	1b1e0 <ReadCompressedInt8Data+0x524>
   1ae20:	mov	r8, sp
   1ae24:	mov	r4, sl
   1ae28:	mov	r0, r7
   1ae2c:	mov	r1, r6
   1ae30:	mov	r2, r8
   1ae34:	mov	r3, r9
   1ae38:	bl	32fc <InflateData>
   1ae3c:	mov	r0, r8
   1ae40:	bl	1c2c <Mat_uint16Swap>
   1ae44:	strb	r0, [r5], #1
   1ae48:	subs	r4, r4, #1
   1ae4c:	bne	1ae28 <ReadCompressedInt8Data+0x16c>
   1ae50:	b	1b1e0 <ReadCompressedInt8Data+0x524>
   1ae54:	ldr	r0, [r7, #20]
   1ae58:	cmp	r0, #0
   1ae5c:	beq	1b084 <ReadCompressedInt8Data+0x3c8>
   1ae60:	cmp	sl, #1
   1ae64:	blt	1b1e0 <ReadCompressedInt8Data+0x524>
   1ae68:	mov	r8, sp
   1ae6c:	mov	r4, sl
   1ae70:	mov	r0, r7
   1ae74:	mov	r1, r6
   1ae78:	mov	r2, r8
   1ae7c:	mov	r3, r9
   1ae80:	bl	32fc <InflateData>
   1ae84:	mov	r0, r8
   1ae88:	bl	1bf0 <Mat_int32Swap>
   1ae8c:	strb	r0, [r5], #1
   1ae90:	subs	r4, r4, #1
   1ae94:	bne	1ae70 <ReadCompressedInt8Data+0x1b4>
   1ae98:	b	1b1e0 <ReadCompressedInt8Data+0x524>
   1ae9c:	ldr	r0, [r7, #20]
   1aea0:	cmp	r0, #0
   1aea4:	beq	1b0bc <ReadCompressedInt8Data+0x400>
   1aea8:	cmp	sl, #1
   1aeac:	blt	1b1e0 <ReadCompressedInt8Data+0x524>
   1aeb0:	mov	r8, sp
   1aeb4:	mov	r4, sl
   1aeb8:	mov	r0, r7
   1aebc:	mov	r1, r6
   1aec0:	mov	r2, r8
   1aec4:	mov	r3, r9
   1aec8:	bl	32fc <InflateData>
   1aecc:	mov	r0, r8
   1aed0:	bl	1c04 <Mat_uint32Swap>
   1aed4:	strb	r0, [r5], #1
   1aed8:	subs	r4, r4, #1
   1aedc:	bne	1aeb8 <ReadCompressedInt8Data+0x1fc>
   1aee0:	b	1b1e0 <ReadCompressedInt8Data+0x524>
   1aee4:	ldr	r0, [r7, #20]
   1aee8:	cmp	r0, #0
   1aeec:	beq	1b0f4 <ReadCompressedInt8Data+0x438>
   1aef0:	cmp	sl, #1
   1aef4:	blt	1b1e0 <ReadCompressedInt8Data+0x524>
   1aef8:	mov	r8, sp
   1aefc:	mov	r4, sl
   1af00:	mov	r0, r7
   1af04:	mov	r1, r6
   1af08:	mov	r2, r8
   1af0c:	mov	r3, r9
   1af10:	bl	32fc <InflateData>
   1af14:	mov	r0, r8
   1af18:	bl	1c44 <Mat_floatSwap>
   1af1c:	vcvt.s32.f32	s0, s0
   1af20:	subs	r4, r4, #1
   1af24:	vmov	r0, s0
   1af28:	strb	r0, [r5], #1
   1af2c:	bne	1af00 <ReadCompressedInt8Data+0x244>
   1af30:	b	1b1e0 <ReadCompressedInt8Data+0x524>
   1af34:	ldr	r0, [r7, #20]
   1af38:	cmp	r0, #0
   1af3c:	beq	1b134 <ReadCompressedInt8Data+0x478>
   1af40:	cmp	sl, #1
   1af44:	blt	1b1e0 <ReadCompressedInt8Data+0x524>
   1af48:	mov	r8, sp
   1af4c:	mov	r4, sl
   1af50:	mov	r0, r7
   1af54:	mov	r1, r6
   1af58:	mov	r2, r8
   1af5c:	mov	r3, r9
   1af60:	bl	32fc <InflateData>
   1af64:	mov	r0, r8
   1af68:	bl	1c88 <Mat_doubleSwap>
   1af6c:	vcvt.s32.f64	s0, d0
   1af70:	subs	r4, r4, #1
   1af74:	vmov	r0, s0
   1af78:	strb	r0, [r5], #1
   1af7c:	bne	1af50 <ReadCompressedInt8Data+0x294>
   1af80:	b	1b1e0 <ReadCompressedInt8Data+0x524>
   1af84:	ldr	r0, [r7, #20]
   1af88:	cmp	r0, #0
   1af8c:	beq	1b174 <ReadCompressedInt8Data+0x4b8>
   1af90:	cmp	sl, #1
   1af94:	blt	1b1e0 <ReadCompressedInt8Data+0x524>
   1af98:	mov	r8, sp
   1af9c:	mov	r4, sl
   1afa0:	mov	r0, r7
   1afa4:	mov	r1, r6
   1afa8:	mov	r2, r8
   1afac:	mov	r3, r9
   1afb0:	bl	32fc <InflateData>
   1afb4:	mov	r0, r8
   1afb8:	bl	1b84 <Mat_int64Swap>
   1afbc:	strb	r0, [r5], #1
   1afc0:	subs	r4, r4, #1
   1afc4:	bne	1afa0 <ReadCompressedInt8Data+0x2e4>
   1afc8:	b	1b1e0 <ReadCompressedInt8Data+0x524>
   1afcc:	ldr	r0, [r7, #20]
   1afd0:	cmp	r0, #0
   1afd4:	beq	1b1ac <ReadCompressedInt8Data+0x4f0>
   1afd8:	cmp	sl, #1
   1afdc:	blt	1b1e0 <ReadCompressedInt8Data+0x524>
   1afe0:	mov	r8, sp
   1afe4:	mov	r4, sl
   1afe8:	mov	r0, r7
   1afec:	mov	r1, r6
   1aff0:	mov	r2, r8
   1aff4:	mov	r3, r9
   1aff8:	bl	32fc <InflateData>
   1affc:	mov	r0, r8
   1b000:	bl	1bd4 <Mat_uint64Swap>
   1b004:	strb	r0, [r5], #1
   1b008:	subs	r4, r4, #1
   1b00c:	bne	1afe8 <ReadCompressedInt8Data+0x32c>
   1b010:	b	1b1e0 <ReadCompressedInt8Data+0x524>
   1b014:	cmp	sl, #1
   1b018:	blt	1b1e0 <ReadCompressedInt8Data+0x524>
   1b01c:	mov	r8, sp
   1b020:	mov	r4, sl
   1b024:	mov	r0, r7
   1b028:	mov	r1, r6
   1b02c:	mov	r2, r8
   1b030:	mov	r3, r9
   1b034:	bl	32fc <InflateData>
   1b038:	ldrb	r0, [sp]
   1b03c:	subs	r4, r4, #1
   1b040:	strb	r0, [r5], #1
   1b044:	bne	1b024 <ReadCompressedInt8Data+0x368>
   1b048:	b	1b1e0 <ReadCompressedInt8Data+0x524>
   1b04c:	cmp	sl, #1
   1b050:	blt	1b1e0 <ReadCompressedInt8Data+0x524>
   1b054:	mov	r8, sp
   1b058:	mov	r4, sl
   1b05c:	mov	r0, r7
   1b060:	mov	r1, r6
   1b064:	mov	r2, r8
   1b068:	mov	r3, r9
   1b06c:	bl	32fc <InflateData>
   1b070:	ldrb	r0, [sp]
   1b074:	subs	r4, r4, #1
   1b078:	strb	r0, [r5], #1
   1b07c:	bne	1b05c <ReadCompressedInt8Data+0x3a0>
   1b080:	b	1b1e0 <ReadCompressedInt8Data+0x524>
   1b084:	cmp	sl, #1
   1b088:	blt	1b1e0 <ReadCompressedInt8Data+0x524>
   1b08c:	mov	r8, sp
   1b090:	mov	r4, sl
   1b094:	mov	r0, r7
   1b098:	mov	r1, r6
   1b09c:	mov	r2, r8
   1b0a0:	mov	r3, r9
   1b0a4:	bl	32fc <InflateData>
   1b0a8:	ldr	r0, [sp]
   1b0ac:	subs	r4, r4, #1
   1b0b0:	strb	r0, [r5], #1
   1b0b4:	bne	1b094 <ReadCompressedInt8Data+0x3d8>
   1b0b8:	b	1b1e0 <ReadCompressedInt8Data+0x524>
   1b0bc:	cmp	sl, #1
   1b0c0:	blt	1b1e0 <ReadCompressedInt8Data+0x524>
   1b0c4:	mov	r8, sp
   1b0c8:	mov	r4, sl
   1b0cc:	mov	r0, r7
   1b0d0:	mov	r1, r6
   1b0d4:	mov	r2, r8
   1b0d8:	mov	r3, r9
   1b0dc:	bl	32fc <InflateData>
   1b0e0:	ldr	r0, [sp]
   1b0e4:	subs	r4, r4, #1
   1b0e8:	strb	r0, [r5], #1
   1b0ec:	bne	1b0cc <ReadCompressedInt8Data+0x410>
   1b0f0:	b	1b1e0 <ReadCompressedInt8Data+0x524>
   1b0f4:	cmp	sl, #1
   1b0f8:	blt	1b1e0 <ReadCompressedInt8Data+0x524>
   1b0fc:	mov	r8, sp
   1b100:	mov	r4, sl
   1b104:	mov	r0, r7
   1b108:	mov	r1, r6
   1b10c:	mov	r2, r8
   1b110:	mov	r3, r9
   1b114:	bl	32fc <InflateData>
   1b118:	vldr	s0, [sp]
   1b11c:	subs	r4, r4, #1
   1b120:	vcvt.s32.f32	s0, s0
   1b124:	vmov	r0, s0
   1b128:	strb	r0, [r5], #1
   1b12c:	bne	1b104 <ReadCompressedInt8Data+0x448>
   1b130:	b	1b1e0 <ReadCompressedInt8Data+0x524>
   1b134:	cmp	sl, #1
   1b138:	blt	1b1e0 <ReadCompressedInt8Data+0x524>
   1b13c:	mov	r8, sp
   1b140:	mov	r4, sl
   1b144:	mov	r0, r7
   1b148:	mov	r1, r6
   1b14c:	mov	r2, r8
   1b150:	mov	r3, r9
   1b154:	bl	32fc <InflateData>
   1b158:	vldr	d16, [sp]
   1b15c:	subs	r4, r4, #1
   1b160:	vcvt.s32.f64	s0, d16
   1b164:	vmov	r0, s0
   1b168:	strb	r0, [r5], #1
   1b16c:	bne	1b144 <ReadCompressedInt8Data+0x488>
   1b170:	b	1b1e0 <ReadCompressedInt8Data+0x524>
   1b174:	cmp	sl, #1
   1b178:	blt	1b1e0 <ReadCompressedInt8Data+0x524>
   1b17c:	mov	r8, sp
   1b180:	mov	r4, sl
   1b184:	mov	r0, r7
   1b188:	mov	r1, r6
   1b18c:	mov	r2, r8
   1b190:	mov	r3, r9
   1b194:	bl	32fc <InflateData>
   1b198:	ldrb	r0, [sp]
   1b19c:	subs	r4, r4, #1
   1b1a0:	strb	r0, [r5], #1
   1b1a4:	bne	1b184 <ReadCompressedInt8Data+0x4c8>
   1b1a8:	b	1b1e0 <ReadCompressedInt8Data+0x524>
   1b1ac:	cmp	sl, #1
   1b1b0:	blt	1b1e0 <ReadCompressedInt8Data+0x524>
   1b1b4:	mov	r8, sp
   1b1b8:	mov	r4, sl
   1b1bc:	mov	r0, r7
   1b1c0:	mov	r1, r6
   1b1c4:	mov	r2, r8
   1b1c8:	mov	r3, r9
   1b1cc:	bl	32fc <InflateData>
   1b1d0:	ldrb	r0, [sp]
   1b1d4:	subs	r4, r4, #1
   1b1d8:	strb	r0, [r5], #1
   1b1dc:	bne	1b1bc <ReadCompressedInt8Data+0x500>
   1b1e0:	mul	r0, r9, sl
   1b1e4:	sub	sp, fp, #28
   1b1e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001b1ec <ReadUInt8Data>:
   1b1ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1f0:	add	fp, sp, #28
   1b1f4:	sub	sp, sp, #140	; 0x8c
   1b1f8:	sub	sp, sp, #2048	; 0x800
   1b1fc:	mov	r4, r0
   1b200:	mov	r0, #0
   1b204:	cmp	r4, #0
   1b208:	beq	1b220 <ReadUInt8Data+0x34>
   1b20c:	cmp	r1, #0
   1b210:	mov	sl, r1
   1b214:	ldrne	r1, [r4]
   1b218:	cmpne	r1, #0
   1b21c:	bne	1b228 <ReadUInt8Data+0x3c>
   1b220:	sub	sp, fp, #28
   1b224:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b228:	mov	r0, r2
   1b22c:	mov	r9, r3
   1b230:	mov	r6, r2
   1b234:	bl	1924 <Mat_SizeOf@plt>
   1b238:	mov	r8, r0
   1b23c:	sub	r0, r6, #1
   1b240:	mov	r5, #0
   1b244:	str	r4, [sp, #132]	; 0x84
   1b248:	cmp	r0, #11
   1b24c:	bhi	1cf70 <ReadUInt8Data+0x1d84>
   1b250:	add	r1, pc, #4
   1b254:	ldr	r0, [r1, r0, lsl #2]
   1b258:	add	pc, r1, r0
   1b25c:	.word	0x00000030
   1b260:	.word	0x00000090
   1b264:	.word	0x000000d4
   1b268:	.word	0x00000128
   1b26c:	.word	0x0000017c
   1b270:	.word	0x000001d0
   1b274:	.word	0x00000224
   1b278:	.word	0x00001d14
   1b27c:	.word	0x00000280
   1b280:	.word	0x00001d14
   1b284:	.word	0x00001d14
   1b288:	.word	0x000002dc
   1b28c:	cmp	r9, #256	; 0x100
   1b290:	ble	1b2f4 <ReadUInt8Data+0x108>
   1b294:	str	r9, [sp, #120]	; 0x78
   1b298:	mov	r5, r8
   1b29c:	sub	r9, r9, #256	; 0x100
   1b2a0:	mov	r7, #0
   1b2a4:	add	r8, sp, #136	; 0x88
   1b2a8:	mov	r6, #0
   1b2ac:	ldr	r3, [r4]
   1b2b0:	mov	r0, r8
   1b2b4:	mov	r1, r5
   1b2b8:	mov	r2, #256	; 0x100
   1b2bc:	bl	18b8 <fread@plt>
   1b2c0:	mov	r4, r0
   1b2c4:	add	r0, sl, r7
   1b2c8:	mov	r1, r8
   1b2cc:	mov	r2, #256	; 0x100
   1b2d0:	bl	181c <memcpy@plt>
   1b2d4:	add	r6, r4, r6
   1b2d8:	ldr	r4, [sp, #132]	; 0x84
   1b2dc:	add	r7, r7, #256	; 0x100
   1b2e0:	cmp	r7, r9
   1b2e4:	blt	1b2ac <ReadUInt8Data+0xc0>
   1b2e8:	b	1b5f4 <ReadUInt8Data+0x408>
   1b2ec:	cmp	r9, #256	; 0x100
   1b2f0:	bgt	1b5a0 <ReadUInt8Data+0x3b4>
   1b2f4:	ldr	r3, [r4]
   1b2f8:	add	r0, sp, #136	; 0x88
   1b2fc:	mov	r1, r8
   1b300:	mov	r2, r9
   1b304:	bl	18b8 <fread@plt>
   1b308:	mov	r5, r0
   1b30c:	cmp	r9, #1
   1b310:	blt	1d2e4 <ReadUInt8Data+0x20f8>
   1b314:	add	r1, sp, #136	; 0x88
   1b318:	mov	r0, sl
   1b31c:	mov	r2, r9
   1b320:	bl	181c <memcpy@plt>
   1b324:	mul	r0, r5, r8
   1b328:	sub	sp, fp, #28
   1b32c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b330:	ldr	r0, [r4, #20]
   1b334:	cmp	r0, #0
   1b338:	beq	1b64c <ReadUInt8Data+0x460>
   1b33c:	cmp	r9, #256	; 0x100
   1b340:	bgt	1b9d8 <ReadUInt8Data+0x7ec>
   1b344:	ldr	r3, [r4]
   1b348:	add	r4, sp, #136	; 0x88
   1b34c:	mov	r1, r8
   1b350:	mov	r2, r9
   1b354:	mov	r0, r4
   1b358:	bl	18b8 <fread@plt>
   1b35c:	mov	r5, r0
   1b360:	cmp	r9, #1
   1b364:	blt	1d2e4 <ReadUInt8Data+0x20f8>
   1b368:	mov	r0, r4
   1b36c:	bl	1c18 <Mat_int16Swap>
   1b370:	strb	r0, [sl], #1
   1b374:	subs	r9, r9, #1
   1b378:	add	r4, r4, #2
   1b37c:	bne	1b368 <ReadUInt8Data+0x17c>
   1b380:	b	1d2e4 <ReadUInt8Data+0x20f8>
   1b384:	ldr	r0, [r4, #20]
   1b388:	cmp	r0, #0
   1b38c:	beq	1b6d0 <ReadUInt8Data+0x4e4>
   1b390:	cmp	r9, #256	; 0x100
   1b394:	bgt	1bac0 <ReadUInt8Data+0x8d4>
   1b398:	ldr	r3, [r4]
   1b39c:	add	r4, sp, #136	; 0x88
   1b3a0:	mov	r1, r8
   1b3a4:	mov	r2, r9
   1b3a8:	mov	r0, r4
   1b3ac:	bl	18b8 <fread@plt>
   1b3b0:	mov	r5, r0
   1b3b4:	cmp	r9, #1
   1b3b8:	blt	1d2e4 <ReadUInt8Data+0x20f8>
   1b3bc:	mov	r0, r4
   1b3c0:	bl	1c2c <Mat_uint16Swap>
   1b3c4:	strb	r0, [sl], #1
   1b3c8:	subs	r9, r9, #1
   1b3cc:	add	r4, r4, #2
   1b3d0:	bne	1b3bc <ReadUInt8Data+0x1d0>
   1b3d4:	b	1d2e4 <ReadUInt8Data+0x20f8>
   1b3d8:	ldr	r0, [r4, #20]
   1b3dc:	cmp	r0, #0
   1b3e0:	beq	1b754 <ReadUInt8Data+0x568>
   1b3e4:	cmp	r9, #256	; 0x100
   1b3e8:	bgt	1bba8 <ReadUInt8Data+0x9bc>
   1b3ec:	ldr	r3, [r4]
   1b3f0:	add	r4, sp, #136	; 0x88
   1b3f4:	mov	r1, r8
   1b3f8:	mov	r2, r9
   1b3fc:	mov	r0, r4
   1b400:	bl	18b8 <fread@plt>
   1b404:	mov	r5, r0
   1b408:	cmp	r9, #1
   1b40c:	blt	1d2e4 <ReadUInt8Data+0x20f8>
   1b410:	mov	r0, r4
   1b414:	bl	1bf0 <Mat_int32Swap>
   1b418:	strb	r0, [sl], #1
   1b41c:	subs	r9, r9, #1
   1b420:	add	r4, r4, #4
   1b424:	bne	1b410 <ReadUInt8Data+0x224>
   1b428:	b	1d2e4 <ReadUInt8Data+0x20f8>
   1b42c:	ldr	r0, [r4, #20]
   1b430:	cmp	r0, #0
   1b434:	beq	1b7dc <ReadUInt8Data+0x5f0>
   1b438:	cmp	r9, #256	; 0x100
   1b43c:	bgt	1bc90 <ReadUInt8Data+0xaa4>
   1b440:	ldr	r3, [r4]
   1b444:	add	r4, sp, #136	; 0x88
   1b448:	mov	r1, r8
   1b44c:	mov	r2, r9
   1b450:	mov	r0, r4
   1b454:	bl	18b8 <fread@plt>
   1b458:	mov	r5, r0
   1b45c:	cmp	r9, #1
   1b460:	blt	1d2e4 <ReadUInt8Data+0x20f8>
   1b464:	mov	r0, r4
   1b468:	bl	1c04 <Mat_uint32Swap>
   1b46c:	strb	r0, [sl], #1
   1b470:	subs	r9, r9, #1
   1b474:	add	r4, r4, #4
   1b478:	bne	1b464 <ReadUInt8Data+0x278>
   1b47c:	b	1d2e4 <ReadUInt8Data+0x20f8>
   1b480:	ldr	r0, [r4, #20]
   1b484:	cmp	r0, #0
   1b488:	beq	1b864 <ReadUInt8Data+0x678>
   1b48c:	cmp	r9, #256	; 0x100
   1b490:	bgt	1bd78 <ReadUInt8Data+0xb8c>
   1b494:	ldr	r3, [r4]
   1b498:	add	r4, sp, #136	; 0x88
   1b49c:	mov	r1, r8
   1b4a0:	mov	r2, r9
   1b4a4:	mov	r0, r4
   1b4a8:	bl	18b8 <fread@plt>
   1b4ac:	mov	r5, r0
   1b4b0:	cmp	r9, #1
   1b4b4:	blt	1d2e4 <ReadUInt8Data+0x20f8>
   1b4b8:	mov	r0, r4
   1b4bc:	bl	1c44 <Mat_floatSwap>
   1b4c0:	vcvt.u32.f32	s0, s0
   1b4c4:	subs	r9, r9, #1
   1b4c8:	add	r4, r4, #4
   1b4cc:	vmov	r0, s0
   1b4d0:	strb	r0, [sl], #1
   1b4d4:	bne	1b4b8 <ReadUInt8Data+0x2cc>
   1b4d8:	b	1d2e4 <ReadUInt8Data+0x20f8>
   1b4dc:	ldr	r0, [r4, #20]
   1b4e0:	cmp	r0, #0
   1b4e4:	beq	1b8fc <ReadUInt8Data+0x710>
   1b4e8:	cmp	r9, #256	; 0x100
   1b4ec:	bgt	1be70 <ReadUInt8Data+0xc84>
   1b4f0:	ldr	r3, [r4]
   1b4f4:	add	r4, sp, #136	; 0x88
   1b4f8:	mov	r1, r8
   1b4fc:	mov	r2, r9
   1b500:	mov	r0, r4
   1b504:	bl	18b8 <fread@plt>
   1b508:	mov	r5, r0
   1b50c:	cmp	r9, #1
   1b510:	blt	1d2e4 <ReadUInt8Data+0x20f8>
   1b514:	mov	r0, r4
   1b518:	bl	1c88 <Mat_doubleSwap>
   1b51c:	vcvt.u32.f64	s0, d0
   1b520:	subs	r9, r9, #1
   1b524:	add	r4, r4, #8
   1b528:	vmov	r0, s0
   1b52c:	strb	r0, [sl], #1
   1b530:	bne	1b514 <ReadUInt8Data+0x328>
   1b534:	b	1d2e4 <ReadUInt8Data+0x20f8>
   1b538:	ldr	r0, [r4, #20]
   1b53c:	cmp	r0, #0
   1b540:	beq	1b948 <ReadUInt8Data+0x75c>
   1b544:	cmp	r9, #256	; 0x100
   1b548:	bgt	1bf6c <ReadUInt8Data+0xd80>
   1b54c:	ldr	r3, [r4]
   1b550:	add	r7, sp, #136	; 0x88
   1b554:	mov	r1, r8
   1b558:	mov	r2, r9
   1b55c:	mov	r0, r7
   1b560:	bl	18b8 <fread@plt>
   1b564:	mov	r5, r0
   1b568:	cmp	r9, #1
   1b56c:	blt	1cf70 <ReadUInt8Data+0x1d84>
   1b570:	str	r6, [sp, #116]	; 0x74
   1b574:	mov	r6, r5
   1b578:	mov	r4, r9
   1b57c:	mov	r5, sl
   1b580:	mov	r0, r7
   1b584:	bl	1b84 <Mat_int64Swap>
   1b588:	strb	r0, [r5], #1
   1b58c:	subs	r4, r4, #1
   1b590:	add	r7, r7, #8
   1b594:	bne	1b580 <ReadUInt8Data+0x394>
   1b598:	mov	r5, r6
   1b59c:	b	1c064 <ReadUInt8Data+0xe78>
   1b5a0:	str	r9, [sp, #120]	; 0x78
   1b5a4:	mov	r5, r8
   1b5a8:	sub	r9, r9, #256	; 0x100
   1b5ac:	mov	r7, #0
   1b5b0:	add	r8, sp, #136	; 0x88
   1b5b4:	mov	r6, #0
   1b5b8:	ldr	r3, [r4]
   1b5bc:	mov	r0, r8
   1b5c0:	mov	r1, r5
   1b5c4:	mov	r2, #256	; 0x100
   1b5c8:	bl	18b8 <fread@plt>
   1b5cc:	mov	r4, r0
   1b5d0:	add	r0, sl, r7
   1b5d4:	mov	r1, r8
   1b5d8:	mov	r2, #256	; 0x100
   1b5dc:	bl	181c <memcpy@plt>
   1b5e0:	add	r6, r4, r6
   1b5e4:	ldr	r4, [sp, #132]	; 0x84
   1b5e8:	add	r7, r7, #256	; 0x100
   1b5ec:	cmp	r7, r9
   1b5f0:	blt	1b5b8 <ReadUInt8Data+0x3cc>
   1b5f4:	ldr	r0, [sp, #120]	; 0x78
   1b5f8:	cmp	r7, r0
   1b5fc:	bge	1cd68 <ReadUInt8Data+0x1b7c>
   1b600:	mov	r1, r4
   1b604:	sub	r4, r0, r7
   1b608:	add	r0, sp, #136	; 0x88
   1b60c:	mov	r8, r5
   1b610:	ldr	r3, [r1]
   1b614:	mov	r1, r5
   1b618:	mov	r2, r4
   1b61c:	bl	18b8 <fread@plt>
   1b620:	mov	r5, r6
   1b624:	cmp	r4, #1
   1b628:	add	r5, r0, r6
   1b62c:	blt	1d2e4 <ReadUInt8Data+0x20f8>
   1b630:	add	r0, sl, r7
   1b634:	add	r1, sp, #136	; 0x88
   1b638:	mov	r2, r4
   1b63c:	bl	181c <memcpy@plt>
   1b640:	mul	r0, r5, r8
   1b644:	sub	sp, fp, #28
   1b648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b64c:	cmp	r9, #256	; 0x100
   1b650:	bgt	1c078 <ReadUInt8Data+0xe8c>
   1b654:	ldr	r3, [r4]
   1b658:	add	r4, sp, #136	; 0x88
   1b65c:	mov	r1, r8
   1b660:	mov	r2, r9
   1b664:	mov	r0, r4
   1b668:	bl	18b8 <fread@plt>
   1b66c:	mov	r5, r0
   1b670:	cmp	r9, #1
   1b674:	blt	1d2e4 <ReadUInt8Data+0x20f8>
   1b678:	mov	r0, #0
   1b67c:	cmp	r9, #8
   1b680:	bcc	1b6ac <ReadUInt8Data+0x4c0>
   1b684:	bic	r0, r9, #7
   1b688:	mov	r2, sl
   1b68c:	mov	r1, r0
   1b690:	vld1.16	{d16-d17}, [r4]!
   1b694:	subs	r1, r1, #8
   1b698:	vmovn.i16	d16, q8
   1b69c:	vst1.8	{d16}, [r2]!
   1b6a0:	bne	1b690 <ReadUInt8Data+0x4a4>
   1b6a4:	cmp	r0, r9
   1b6a8:	beq	1d2e4 <ReadUInt8Data+0x20f8>
   1b6ac:	add	r3, sp, #136	; 0x88
   1b6b0:	sub	r1, r9, r0
   1b6b4:	add	r2, sl, r0
   1b6b8:	add	r0, r3, r0, lsl #1
   1b6bc:	ldrb	r3, [r0], #2
   1b6c0:	subs	r1, r1, #1
   1b6c4:	strb	r3, [r2], #1
   1b6c8:	bne	1b6bc <ReadUInt8Data+0x4d0>
   1b6cc:	b	1d2e4 <ReadUInt8Data+0x20f8>
   1b6d0:	cmp	r9, #256	; 0x100
   1b6d4:	bgt	1c4c8 <ReadUInt8Data+0x12dc>
   1b6d8:	ldr	r3, [r4]
   1b6dc:	add	r4, sp, #136	; 0x88
   1b6e0:	mov	r1, r8
   1b6e4:	mov	r2, r9
   1b6e8:	mov	r0, r4
   1b6ec:	bl	18b8 <fread@plt>
   1b6f0:	mov	r5, r0
   1b6f4:	cmp	r9, #1
   1b6f8:	blt	1d2e4 <ReadUInt8Data+0x20f8>
   1b6fc:	mov	r0, #0
   1b700:	cmp	r9, #8
   1b704:	bcc	1b730 <ReadUInt8Data+0x544>
   1b708:	bic	r0, r9, #7
   1b70c:	mov	r2, sl
   1b710:	mov	r1, r0
   1b714:	vld1.16	{d16-d17}, [r4]!
   1b718:	subs	r1, r1, #8
   1b71c:	vmovn.i16	d16, q8
   1b720:	vst1.8	{d16}, [r2]!
   1b724:	bne	1b714 <ReadUInt8Data+0x528>
   1b728:	cmp	r0, r9
   1b72c:	beq	1d2e4 <ReadUInt8Data+0x20f8>
   1b730:	add	r3, sp, #136	; 0x88
   1b734:	sub	r1, r9, r0
   1b738:	add	r2, sl, r0
   1b73c:	add	r0, r3, r0, lsl #1
   1b740:	ldrb	r3, [r0], #2
   1b744:	subs	r1, r1, #1
   1b748:	strb	r3, [r2], #1
   1b74c:	bne	1b740 <ReadUInt8Data+0x554>
   1b750:	b	1d2e4 <ReadUInt8Data+0x20f8>
   1b754:	cmp	r9, #256	; 0x100
   1b758:	bgt	1c918 <ReadUInt8Data+0x172c>
   1b75c:	ldr	r3, [r4]
   1b760:	add	r4, sp, #136	; 0x88
   1b764:	mov	r1, r8
   1b768:	mov	r2, r9
   1b76c:	mov	r0, r4
   1b770:	bl	18b8 <fread@plt>
   1b774:	mov	r5, r0
   1b778:	cmp	r9, #1
   1b77c:	blt	1d2e4 <ReadUInt8Data+0x20f8>
   1b780:	mov	r0, #0
   1b784:	cmp	r9, #4
   1b788:	bcc	1b7b8 <ReadUInt8Data+0x5cc>
   1b78c:	bic	r0, r9, #3
   1b790:	mov	r2, sl
   1b794:	mov	r1, r0
   1b798:	vld1.32	{d16-d17}, [r4]!
   1b79c:	subs	r1, r1, #4
   1b7a0:	vmovn.i32	d16, q8
   1b7a4:	vuzp.8	d16, d17
   1b7a8:	vst1.32	{d16[0]}, [r2]!
   1b7ac:	bne	1b798 <ReadUInt8Data+0x5ac>
   1b7b0:	cmp	r0, r9
   1b7b4:	beq	1d2e4 <ReadUInt8Data+0x20f8>
   1b7b8:	add	r3, sp, #136	; 0x88
   1b7bc:	sub	r1, r9, r0
   1b7c0:	add	r2, sl, r0
   1b7c4:	add	r0, r3, r0, lsl #2
   1b7c8:	ldr	r3, [r0], #4
   1b7cc:	subs	r1, r1, #1
   1b7d0:	strb	r3, [r2], #1
   1b7d4:	bne	1b7c8 <ReadUInt8Data+0x5dc>
   1b7d8:	b	1d2e4 <ReadUInt8Data+0x20f8>
   1b7dc:	cmp	r9, #256	; 0x100
   1b7e0:	bgt	1ca38 <ReadUInt8Data+0x184c>
   1b7e4:	ldr	r3, [r4]
   1b7e8:	add	r4, sp, #136	; 0x88
   1b7ec:	mov	r1, r8
   1b7f0:	mov	r2, r9
   1b7f4:	mov	r0, r4
   1b7f8:	bl	18b8 <fread@plt>
   1b7fc:	mov	r5, r0
   1b800:	cmp	r9, #1
   1b804:	blt	1d2e4 <ReadUInt8Data+0x20f8>
   1b808:	mov	r0, #0
   1b80c:	cmp	r9, #4
   1b810:	bcc	1b840 <ReadUInt8Data+0x654>
   1b814:	bic	r0, r9, #3
   1b818:	mov	r2, sl
   1b81c:	mov	r1, r0
   1b820:	vld1.32	{d16-d17}, [r4]!
   1b824:	subs	r1, r1, #4
   1b828:	vmovn.i32	d16, q8
   1b82c:	vuzp.8	d16, d17
   1b830:	vst1.32	{d16[0]}, [r2]!
   1b834:	bne	1b820 <ReadUInt8Data+0x634>
   1b838:	cmp	r0, r9
   1b83c:	beq	1d2e4 <ReadUInt8Data+0x20f8>
   1b840:	add	r3, sp, #136	; 0x88
   1b844:	sub	r1, r9, r0
   1b848:	add	r2, sl, r0
   1b84c:	add	r0, r3, r0, lsl #2
   1b850:	ldr	r3, [r0], #4
   1b854:	subs	r1, r1, #1
   1b858:	strb	r3, [r2], #1
   1b85c:	bne	1b850 <ReadUInt8Data+0x664>
   1b860:	b	1d2e4 <ReadUInt8Data+0x20f8>
   1b864:	cmp	r9, #256	; 0x100
   1b868:	bgt	1cb58 <ReadUInt8Data+0x196c>
   1b86c:	ldr	r3, [r4]
   1b870:	add	r4, sp, #136	; 0x88
   1b874:	mov	r1, r8
   1b878:	mov	r2, r9
   1b87c:	mov	r0, r4
   1b880:	bl	18b8 <fread@plt>
   1b884:	mov	r5, r0
   1b888:	cmp	r9, #1
   1b88c:	blt	1d2e4 <ReadUInt8Data+0x20f8>
   1b890:	mov	r0, #0
   1b894:	cmp	r9, #4
   1b898:	bcc	1b8cc <ReadUInt8Data+0x6e0>
   1b89c:	bic	r0, r9, #3
   1b8a0:	mov	r2, sl
   1b8a4:	mov	r1, r0
   1b8a8:	vld1.32	{d16-d17}, [r4]!
   1b8ac:	subs	r1, r1, #4
   1b8b0:	vcvt.s32.f32	q8, q8
   1b8b4:	vmovn.i32	d16, q8
   1b8b8:	vuzp.8	d16, d17
   1b8bc:	vst1.32	{d16[0]}, [r2]!
   1b8c0:	bne	1b8a8 <ReadUInt8Data+0x6bc>
   1b8c4:	cmp	r0, r9
   1b8c8:	beq	1d2e4 <ReadUInt8Data+0x20f8>
   1b8cc:	add	r3, sp, #136	; 0x88
   1b8d0:	sub	r1, r9, r0
   1b8d4:	add	r2, sl, r0
   1b8d8:	add	r0, r3, r0, lsl #2
   1b8dc:	vldr	s0, [r0]
   1b8e0:	subs	r1, r1, #1
   1b8e4:	add	r0, r0, #4
   1b8e8:	vcvt.u32.f32	s0, s0
   1b8ec:	vmov	r3, s0
   1b8f0:	strb	r3, [r2], #1
   1b8f4:	bne	1b8dc <ReadUInt8Data+0x6f0>
   1b8f8:	b	1d2e4 <ReadUInt8Data+0x20f8>
   1b8fc:	cmp	r9, #256	; 0x100
   1b900:	bgt	1cc8c <ReadUInt8Data+0x1aa0>
   1b904:	ldr	r3, [r4]
   1b908:	add	r4, sp, #136	; 0x88
   1b90c:	mov	r1, r8
   1b910:	mov	r2, r9
   1b914:	mov	r0, r4
   1b918:	bl	18b8 <fread@plt>
   1b91c:	mov	r5, r0
   1b920:	cmp	r9, #1
   1b924:	blt	1d2e4 <ReadUInt8Data+0x20f8>
   1b928:	vldr	d16, [r4]
   1b92c:	subs	r9, r9, #1
   1b930:	add	r4, r4, #8
   1b934:	vcvt.u32.f64	s0, d16
   1b938:	vmov	r0, s0
   1b93c:	strb	r0, [sl], #1
   1b940:	bne	1b928 <ReadUInt8Data+0x73c>
   1b944:	b	1d2e4 <ReadUInt8Data+0x20f8>
   1b948:	cmp	r9, #256	; 0x100
   1b94c:	bgt	1cd7c <ReadUInt8Data+0x1b90>
   1b950:	ldr	r3, [r4]
   1b954:	add	r7, sp, #136	; 0x88
   1b958:	mov	r1, r8
   1b95c:	mov	r2, r9
   1b960:	mov	r0, r7
   1b964:	bl	18b8 <fread@plt>
   1b968:	mov	r5, r0
   1b96c:	cmp	r9, #1
   1b970:	blt	1cf70 <ReadUInt8Data+0x1d84>
   1b974:	mov	r0, #0
   1b978:	beq	1b9b4 <ReadUInt8Data+0x7c8>
   1b97c:	bic	r0, r9, #1
   1b980:	mov	r2, sl
   1b984:	mov	r1, r0
   1b988:	vld1.64	{d16-d17}, [r7]!
   1b98c:	subs	r1, r1, #2
   1b990:	vmovn.i64	d16, q8
   1b994:	vmov.32	r3, d16[1]
   1b998:	strb	r3, [r2, #1]
   1b99c:	vmov.32	r3, d16[0]
   1b9a0:	strb	r3, [r2]
   1b9a4:	add	r2, r2, #2
   1b9a8:	bne	1b988 <ReadUInt8Data+0x79c>
   1b9ac:	cmp	r0, r9
   1b9b0:	beq	1cf70 <ReadUInt8Data+0x1d84>
   1b9b4:	add	r3, sp, #136	; 0x88
   1b9b8:	sub	r1, r9, r0
   1b9bc:	add	r2, sl, r0
   1b9c0:	add	r0, r3, r0, lsl #3
   1b9c4:	ldrb	r3, [r0], #8
   1b9c8:	subs	r1, r1, #1
   1b9cc:	strb	r3, [r2], #1
   1b9d0:	bne	1b9c4 <ReadUInt8Data+0x7d8>
   1b9d4:	b	1cf70 <ReadUInt8Data+0x1d84>
   1b9d8:	sub	r0, r9, #256	; 0x100
   1b9dc:	mov	r7, #0
   1b9e0:	mov	r6, sl
   1b9e4:	mov	r5, #0
   1b9e8:	str	r8, [sp, #128]	; 0x80
   1b9ec:	str	r9, [sp, #120]	; 0x78
   1b9f0:	str	r0, [sp, #124]	; 0x7c
   1b9f4:	ldr	r3, [r4]
   1b9f8:	ldr	r1, [sp, #128]	; 0x80
   1b9fc:	add	r4, sp, #136	; 0x88
   1ba00:	mov	r2, #256	; 0x100
   1ba04:	mov	r8, r5
   1ba08:	mov	r9, r7
   1ba0c:	mov	r0, r4
   1ba10:	bl	18b8 <fread@plt>
   1ba14:	mov	r7, r0
   1ba18:	mov	r5, #0
   1ba1c:	mov	r0, r4
   1ba20:	bl	1c18 <Mat_int16Swap>
   1ba24:	strb	r0, [r6, r5]
   1ba28:	add	r5, r5, #1
   1ba2c:	add	r4, r4, #2
   1ba30:	cmp	r5, #256	; 0x100
   1ba34:	bne	1ba1c <ReadUInt8Data+0x830>
   1ba38:	ldr	r0, [sp, #124]	; 0x7c
   1ba3c:	ldr	r4, [sp, #132]	; 0x84
   1ba40:	mov	r5, r8
   1ba44:	add	r6, r6, #256	; 0x100
   1ba48:	add	r5, r7, r8
   1ba4c:	add	r7, r9, #256	; 0x100
   1ba50:	cmp	r7, r0
   1ba54:	blt	1b9f4 <ReadUInt8Data+0x808>
   1ba58:	ldr	r0, [sp, #120]	; 0x78
   1ba5c:	cmp	r7, r0
   1ba60:	bge	1cec4 <ReadUInt8Data+0x1cd8>
   1ba64:	ldr	r3, [r4]
   1ba68:	ldr	r1, [sp, #128]	; 0x80
   1ba6c:	sub	r8, r0, r7
   1ba70:	add	r4, sp, #136	; 0x88
   1ba74:	mov	r0, r4
   1ba78:	mov	r2, r8
   1ba7c:	bl	18b8 <fread@plt>
   1ba80:	add	r5, r0, r5
   1ba84:	cmp	r8, #1
   1ba88:	blt	1d280 <ReadUInt8Data+0x2094>
   1ba8c:	ldr	r0, [sp, #124]	; 0x7c
   1ba90:	sub	r6, r0, r9
   1ba94:	mov	r0, r4
   1ba98:	bl	1c18 <Mat_int16Swap>
   1ba9c:	strb	r0, [sl, r7]
   1baa0:	add	sl, sl, #1
   1baa4:	subs	r6, r6, #1
   1baa8:	add	r4, r4, #2
   1baac:	bne	1ba94 <ReadUInt8Data+0x8a8>
   1bab0:	ldr	r8, [sp, #128]	; 0x80
   1bab4:	mul	r0, r5, r8
   1bab8:	sub	sp, fp, #28
   1babc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bac0:	sub	r0, r9, #256	; 0x100
   1bac4:	mov	r7, #0
   1bac8:	mov	r6, sl
   1bacc:	mov	r5, #0
   1bad0:	str	r8, [sp, #128]	; 0x80
   1bad4:	str	r9, [sp, #120]	; 0x78
   1bad8:	str	r0, [sp, #124]	; 0x7c
   1badc:	ldr	r3, [r4]
   1bae0:	ldr	r1, [sp, #128]	; 0x80
   1bae4:	add	r4, sp, #136	; 0x88
   1bae8:	mov	r2, #256	; 0x100
   1baec:	mov	r8, r5
   1baf0:	mov	r9, r7
   1baf4:	mov	r0, r4
   1baf8:	bl	18b8 <fread@plt>
   1bafc:	mov	r7, r0
   1bb00:	mov	r5, #0
   1bb04:	mov	r0, r4
   1bb08:	bl	1c2c <Mat_uint16Swap>
   1bb0c:	strb	r0, [r6, r5]
   1bb10:	add	r5, r5, #1
   1bb14:	add	r4, r4, #2
   1bb18:	cmp	r5, #256	; 0x100
   1bb1c:	bne	1bb04 <ReadUInt8Data+0x918>
   1bb20:	ldr	r0, [sp, #124]	; 0x7c
   1bb24:	ldr	r4, [sp, #132]	; 0x84
   1bb28:	mov	r5, r8
   1bb2c:	add	r6, r6, #256	; 0x100
   1bb30:	add	r5, r7, r8
   1bb34:	add	r7, r9, #256	; 0x100
   1bb38:	cmp	r7, r0
   1bb3c:	blt	1badc <ReadUInt8Data+0x8f0>
   1bb40:	ldr	r0, [sp, #120]	; 0x78
   1bb44:	cmp	r7, r0
   1bb48:	bge	1ced4 <ReadUInt8Data+0x1ce8>
   1bb4c:	ldr	r3, [r4]
   1bb50:	ldr	r1, [sp, #128]	; 0x80
   1bb54:	sub	r8, r0, r7
   1bb58:	add	r4, sp, #136	; 0x88
   1bb5c:	mov	r0, r4
   1bb60:	mov	r2, r8
   1bb64:	bl	18b8 <fread@plt>
   1bb68:	add	r5, r0, r5
   1bb6c:	cmp	r8, #1
   1bb70:	blt	1d290 <ReadUInt8Data+0x20a4>
   1bb74:	ldr	r0, [sp, #124]	; 0x7c
   1bb78:	sub	r6, r0, r9
   1bb7c:	mov	r0, r4
   1bb80:	bl	1c2c <Mat_uint16Swap>
   1bb84:	strb	r0, [sl, r7]
   1bb88:	add	sl, sl, #1
   1bb8c:	subs	r6, r6, #1
   1bb90:	add	r4, r4, #2
   1bb94:	bne	1bb7c <ReadUInt8Data+0x990>
   1bb98:	ldr	r8, [sp, #128]	; 0x80
   1bb9c:	mul	r0, r5, r8
   1bba0:	sub	sp, fp, #28
   1bba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bba8:	sub	r0, r9, #256	; 0x100
   1bbac:	mov	r7, #0
   1bbb0:	mov	r6, sl
   1bbb4:	mov	r5, #0
   1bbb8:	str	r8, [sp, #128]	; 0x80
   1bbbc:	str	r9, [sp, #120]	; 0x78
   1bbc0:	str	r0, [sp, #124]	; 0x7c
   1bbc4:	ldr	r3, [r4]
   1bbc8:	ldr	r1, [sp, #128]	; 0x80
   1bbcc:	add	r4, sp, #136	; 0x88
   1bbd0:	mov	r2, #256	; 0x100
   1bbd4:	mov	r8, r5
   1bbd8:	mov	r9, r7
   1bbdc:	mov	r0, r4
   1bbe0:	bl	18b8 <fread@plt>
   1bbe4:	mov	r7, r0
   1bbe8:	mov	r5, #0
   1bbec:	mov	r0, r4
   1bbf0:	bl	1bf0 <Mat_int32Swap>
   1bbf4:	strb	r0, [r6, r5]
   1bbf8:	add	r5, r5, #1
   1bbfc:	add	r4, r4, #4
   1bc00:	cmp	r5, #256	; 0x100
   1bc04:	bne	1bbec <ReadUInt8Data+0xa00>
   1bc08:	ldr	r0, [sp, #124]	; 0x7c
   1bc0c:	ldr	r4, [sp, #132]	; 0x84
   1bc10:	mov	r5, r8
   1bc14:	add	r6, r6, #256	; 0x100
   1bc18:	add	r5, r7, r8
   1bc1c:	add	r7, r9, #256	; 0x100
   1bc20:	cmp	r7, r0
   1bc24:	blt	1bbc4 <ReadUInt8Data+0x9d8>
   1bc28:	ldr	r0, [sp, #120]	; 0x78
   1bc2c:	cmp	r7, r0
   1bc30:	bge	1cee4 <ReadUInt8Data+0x1cf8>
   1bc34:	ldr	r3, [r4]
   1bc38:	ldr	r1, [sp, #128]	; 0x80
   1bc3c:	sub	r8, r0, r7
   1bc40:	add	r4, sp, #136	; 0x88
   1bc44:	mov	r0, r4
   1bc48:	mov	r2, r8
   1bc4c:	bl	18b8 <fread@plt>
   1bc50:	add	r5, r0, r5
   1bc54:	cmp	r8, #1
   1bc58:	blt	1d2a0 <ReadUInt8Data+0x20b4>
   1bc5c:	ldr	r0, [sp, #124]	; 0x7c
   1bc60:	sub	r6, r0, r9
   1bc64:	mov	r0, r4
   1bc68:	bl	1bf0 <Mat_int32Swap>
   1bc6c:	strb	r0, [sl, r7]
   1bc70:	add	sl, sl, #1
   1bc74:	subs	r6, r6, #1
   1bc78:	add	r4, r4, #4
   1bc7c:	bne	1bc64 <ReadUInt8Data+0xa78>
   1bc80:	ldr	r8, [sp, #128]	; 0x80
   1bc84:	mul	r0, r5, r8
   1bc88:	sub	sp, fp, #28
   1bc8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc90:	sub	r0, r9, #256	; 0x100
   1bc94:	mov	r7, #0
   1bc98:	mov	r6, sl
   1bc9c:	mov	r5, #0
   1bca0:	str	r8, [sp, #128]	; 0x80
   1bca4:	str	r9, [sp, #120]	; 0x78
   1bca8:	str	r0, [sp, #124]	; 0x7c
   1bcac:	ldr	r3, [r4]
   1bcb0:	ldr	r1, [sp, #128]	; 0x80
   1bcb4:	add	r4, sp, #136	; 0x88
   1bcb8:	mov	r2, #256	; 0x100
   1bcbc:	mov	r8, r5
   1bcc0:	mov	r9, r7
   1bcc4:	mov	r0, r4
   1bcc8:	bl	18b8 <fread@plt>
   1bccc:	mov	r7, r0
   1bcd0:	mov	r5, #0
   1bcd4:	mov	r0, r4
   1bcd8:	bl	1c04 <Mat_uint32Swap>
   1bcdc:	strb	r0, [r6, r5]
   1bce0:	add	r5, r5, #1
   1bce4:	add	r4, r4, #4
   1bce8:	cmp	r5, #256	; 0x100
   1bcec:	bne	1bcd4 <ReadUInt8Data+0xae8>
   1bcf0:	ldr	r0, [sp, #124]	; 0x7c
   1bcf4:	ldr	r4, [sp, #132]	; 0x84
   1bcf8:	mov	r5, r8
   1bcfc:	add	r6, r6, #256	; 0x100
   1bd00:	add	r5, r7, r8
   1bd04:	add	r7, r9, #256	; 0x100
   1bd08:	cmp	r7, r0
   1bd0c:	blt	1bcac <ReadUInt8Data+0xac0>
   1bd10:	ldr	r0, [sp, #120]	; 0x78
   1bd14:	cmp	r7, r0
   1bd18:	bge	1cef4 <ReadUInt8Data+0x1d08>
   1bd1c:	ldr	r3, [r4]
   1bd20:	ldr	r1, [sp, #128]	; 0x80
   1bd24:	sub	r8, r0, r7
   1bd28:	add	r4, sp, #136	; 0x88
   1bd2c:	mov	r0, r4
   1bd30:	mov	r2, r8
   1bd34:	bl	18b8 <fread@plt>
   1bd38:	add	r5, r0, r5
   1bd3c:	cmp	r8, #1
   1bd40:	blt	1d2b0 <ReadUInt8Data+0x20c4>
   1bd44:	ldr	r0, [sp, #124]	; 0x7c
   1bd48:	sub	r6, r0, r9
   1bd4c:	mov	r0, r4
   1bd50:	bl	1c04 <Mat_uint32Swap>
   1bd54:	strb	r0, [sl, r7]
   1bd58:	add	sl, sl, #1
   1bd5c:	subs	r6, r6, #1
   1bd60:	add	r4, r4, #4
   1bd64:	bne	1bd4c <ReadUInt8Data+0xb60>
   1bd68:	ldr	r8, [sp, #128]	; 0x80
   1bd6c:	mul	r0, r5, r8
   1bd70:	sub	sp, fp, #28
   1bd74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd78:	sub	r0, r9, #256	; 0x100
   1bd7c:	mov	r7, #0
   1bd80:	mov	r6, sl
   1bd84:	mov	r5, #0
   1bd88:	str	r8, [sp, #128]	; 0x80
   1bd8c:	str	r9, [sp, #120]	; 0x78
   1bd90:	str	r0, [sp, #124]	; 0x7c
   1bd94:	ldr	r3, [r4]
   1bd98:	ldr	r1, [sp, #128]	; 0x80
   1bd9c:	add	r4, sp, #136	; 0x88
   1bda0:	mov	r2, #256	; 0x100
   1bda4:	mov	r8, r5
   1bda8:	mov	r9, r7
   1bdac:	mov	r0, r4
   1bdb0:	bl	18b8 <fread@plt>
   1bdb4:	mov	r7, r0
   1bdb8:	mov	r5, #0
   1bdbc:	mov	r0, r4
   1bdc0:	bl	1c44 <Mat_floatSwap>
   1bdc4:	vcvt.u32.f32	s0, s0
   1bdc8:	add	r4, r4, #4
   1bdcc:	vmov	r0, s0
   1bdd0:	strb	r0, [r6, r5]
   1bdd4:	add	r5, r5, #1
   1bdd8:	cmp	r5, #256	; 0x100
   1bddc:	bne	1bdbc <ReadUInt8Data+0xbd0>
   1bde0:	ldr	r0, [sp, #124]	; 0x7c
   1bde4:	ldr	r4, [sp, #132]	; 0x84
   1bde8:	mov	r5, r8
   1bdec:	add	r6, r6, #256	; 0x100
   1bdf0:	add	r5, r7, r8
   1bdf4:	add	r7, r9, #256	; 0x100
   1bdf8:	cmp	r7, r0
   1bdfc:	blt	1bd94 <ReadUInt8Data+0xba8>
   1be00:	ldr	r0, [sp, #120]	; 0x78
   1be04:	cmp	r7, r0
   1be08:	bge	1cf04 <ReadUInt8Data+0x1d18>
   1be0c:	ldr	r3, [r4]
   1be10:	ldr	r1, [sp, #128]	; 0x80
   1be14:	sub	r8, r0, r7
   1be18:	add	r4, sp, #136	; 0x88
   1be1c:	mov	r0, r4
   1be20:	mov	r2, r8
   1be24:	bl	18b8 <fread@plt>
   1be28:	add	r5, r0, r5
   1be2c:	cmp	r8, #1
   1be30:	blt	1d2c0 <ReadUInt8Data+0x20d4>
   1be34:	ldr	r0, [sp, #124]	; 0x7c
   1be38:	sub	r6, r0, r9
   1be3c:	mov	r0, r4
   1be40:	bl	1c44 <Mat_floatSwap>
   1be44:	vcvt.u32.f32	s0, s0
   1be48:	subs	r6, r6, #1
   1be4c:	add	r4, r4, #4
   1be50:	vmov	r0, s0
   1be54:	strb	r0, [sl, r7]
   1be58:	add	sl, sl, #1
   1be5c:	bne	1be3c <ReadUInt8Data+0xc50>
   1be60:	ldr	r8, [sp, #128]	; 0x80
   1be64:	mul	r0, r5, r8
   1be68:	sub	sp, fp, #28
   1be6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be70:	sub	r0, r9, #256	; 0x100
   1be74:	str	r9, [sp, #120]	; 0x78
   1be78:	mov	r9, #0
   1be7c:	mov	r6, sl
   1be80:	mov	r5, #0
   1be84:	str	r8, [sp, #128]	; 0x80
   1be88:	str	r0, [sp, #124]	; 0x7c
   1be8c:	ldr	r3, [r4]
   1be90:	ldr	r1, [sp, #128]	; 0x80
   1be94:	add	r4, sp, #136	; 0x88
   1be98:	mov	r2, #256	; 0x100
   1be9c:	mov	r8, r5
   1bea0:	mov	r0, r4
   1bea4:	bl	18b8 <fread@plt>
   1bea8:	mov	r7, r0
   1beac:	mov	r5, #0
   1beb0:	mov	r0, r4
   1beb4:	bl	1c88 <Mat_doubleSwap>
   1beb8:	vcvt.u32.f64	s0, d0
   1bebc:	add	r4, r4, #8
   1bec0:	vmov	r0, s0
   1bec4:	strb	r0, [r6, r5]
   1bec8:	add	r5, r5, #1
   1becc:	cmp	r5, #256	; 0x100
   1bed0:	bne	1beb0 <ReadUInt8Data+0xcc4>
   1bed4:	ldr	r0, [sp, #124]	; 0x7c
   1bed8:	ldr	r4, [sp, #132]	; 0x84
   1bedc:	mov	r5, r8
   1bee0:	mov	r1, r9
   1bee4:	add	r9, r9, #256	; 0x100
   1bee8:	add	r6, r6, #256	; 0x100
   1beec:	add	r5, r7, r8
   1bef0:	cmp	r9, r0
   1bef4:	blt	1be8c <ReadUInt8Data+0xca0>
   1bef8:	ldr	r0, [sp, #120]	; 0x78
   1befc:	cmp	r9, r0
   1bf00:	bge	1cf14 <ReadUInt8Data+0x1d28>
   1bf04:	mov	r6, r1
   1bf08:	ldr	r3, [r4]
   1bf0c:	ldr	r1, [sp, #128]	; 0x80
   1bf10:	sub	r7, r0, r9
   1bf14:	add	r4, sp, #136	; 0x88
   1bf18:	mov	r0, r4
   1bf1c:	mov	r2, r7
   1bf20:	bl	18b8 <fread@plt>
   1bf24:	add	r5, r0, r5
   1bf28:	cmp	r7, #1
   1bf2c:	blt	1d2d0 <ReadUInt8Data+0x20e4>
   1bf30:	ldr	r0, [sp, #124]	; 0x7c
   1bf34:	sub	r6, r0, r6
   1bf38:	mov	r0, r4
   1bf3c:	bl	1c88 <Mat_doubleSwap>
   1bf40:	vcvt.u32.f64	s0, d0
   1bf44:	subs	r6, r6, #1
   1bf48:	add	r4, r4, #8
   1bf4c:	vmov	r0, s0
   1bf50:	strb	r0, [sl, r9]
   1bf54:	add	sl, sl, #1
   1bf58:	bne	1bf38 <ReadUInt8Data+0xd4c>
   1bf5c:	ldr	r8, [sp, #128]	; 0x80
   1bf60:	mul	r0, r5, r8
   1bf64:	sub	sp, fp, #28
   1bf68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf6c:	str	r6, [sp, #116]	; 0x74
   1bf70:	sub	r0, r9, #256	; 0x100
   1bf74:	mov	r4, #0
   1bf78:	mov	r6, sl
   1bf7c:	mov	r5, #0
   1bf80:	str	r8, [sp, #128]	; 0x80
   1bf84:	str	r9, [sp, #120]	; 0x78
   1bf88:	str	r0, [sp, #124]	; 0x7c
   1bf8c:	ldr	r0, [sp, #132]	; 0x84
   1bf90:	ldr	r1, [sp, #128]	; 0x80
   1bf94:	mov	r9, r4
   1bf98:	add	r4, sp, #136	; 0x88
   1bf9c:	mov	r2, #256	; 0x100
   1bfa0:	mov	r8, r5
   1bfa4:	ldr	r3, [r0]
   1bfa8:	mov	r0, r4
   1bfac:	bl	18b8 <fread@plt>
   1bfb0:	mov	r7, r0
   1bfb4:	mov	r5, #0
   1bfb8:	mov	r0, r4
   1bfbc:	bl	1b84 <Mat_int64Swap>
   1bfc0:	strb	r0, [r6, r5]
   1bfc4:	add	r5, r5, #1
   1bfc8:	add	r4, r4, #8
   1bfcc:	cmp	r5, #256	; 0x100
   1bfd0:	bne	1bfb8 <ReadUInt8Data+0xdcc>
   1bfd4:	ldr	r0, [sp, #124]	; 0x7c
   1bfd8:	mov	r5, r8
   1bfdc:	add	r4, r9, #256	; 0x100
   1bfe0:	add	r6, r6, #256	; 0x100
   1bfe4:	add	r5, r7, r8
   1bfe8:	cmp	r4, r0
   1bfec:	blt	1bf8c <ReadUInt8Data+0xda0>
   1bff0:	ldr	r0, [sp, #120]	; 0x78
   1bff4:	cmp	r4, r0
   1bff8:	bge	1cf24 <ReadUInt8Data+0x1d38>
   1bffc:	sub	r8, r0, r4
   1c000:	ldr	r0, [sp, #132]	; 0x84
   1c004:	ldr	r1, [sp, #128]	; 0x80
   1c008:	add	r7, sp, #136	; 0x88
   1c00c:	mov	r2, r8
   1c010:	ldr	r3, [r0]
   1c014:	mov	r0, r7
   1c018:	bl	18b8 <fread@plt>
   1c01c:	add	r5, r0, r5
   1c020:	cmp	r8, #1
   1c024:	blt	1cf60 <ReadUInt8Data+0x1d74>
   1c028:	ldr	r0, [sp, #124]	; 0x7c
   1c02c:	mov	r8, r5
   1c030:	mov	r5, sl
   1c034:	sub	r6, r0, r9
   1c038:	mov	r0, r7
   1c03c:	bl	1b84 <Mat_int64Swap>
   1c040:	strb	r0, [r5, r4]
   1c044:	add	r5, r5, #1
   1c048:	subs	r6, r6, #1
   1c04c:	add	r7, r7, #8
   1c050:	bne	1c038 <ReadUInt8Data+0xe4c>
   1c054:	ldr	r0, [sp, #128]	; 0x80
   1c058:	ldr	r9, [sp, #120]	; 0x78
   1c05c:	mov	r5, r8
   1c060:	mov	r8, r0
   1c064:	ldr	r4, [sp, #132]	; 0x84
   1c068:	ldr	r6, [sp, #116]	; 0x74
   1c06c:	cmp	r6, #13
   1c070:	beq	1cf78 <ReadUInt8Data+0x1d8c>
   1c074:	b	1d2e4 <ReadUInt8Data+0x20f8>
   1c078:	mov	r0, r9
   1c07c:	add	r9, sp, #136	; 0x88
   1c080:	mov	r7, #0
   1c084:	mov	r5, #0
   1c088:	add	r1, r9, #496	; 0x1f0
   1c08c:	mov	r6, r0
   1c090:	sub	r0, r0, #256	; 0x100
   1c094:	str	r1, [sp, #128]	; 0x80
   1c098:	add	r1, r9, #480	; 0x1e0
   1c09c:	str	r0, [sp]
   1c0a0:	str	r1, [sp, #124]	; 0x7c
   1c0a4:	add	r1, r9, #464	; 0x1d0
   1c0a8:	str	r1, [sp, #116]	; 0x74
   1c0ac:	add	r1, r9, #448	; 0x1c0
   1c0b0:	str	r1, [sp, #112]	; 0x70
   1c0b4:	add	r1, r9, #432	; 0x1b0
   1c0b8:	str	r1, [sp, #108]	; 0x6c
   1c0bc:	add	r1, r9, #416	; 0x1a0
   1c0c0:	str	r1, [sp, #104]	; 0x68
   1c0c4:	add	r1, r9, #400	; 0x190
   1c0c8:	str	r1, [sp, #100]	; 0x64
   1c0cc:	add	r1, r9, #384	; 0x180
   1c0d0:	str	r1, [sp, #96]	; 0x60
   1c0d4:	add	r1, r9, #368	; 0x170
   1c0d8:	str	r1, [sp, #92]	; 0x5c
   1c0dc:	add	r1, r9, #352	; 0x160
   1c0e0:	str	r1, [sp, #88]	; 0x58
   1c0e4:	add	r1, r9, #336	; 0x150
   1c0e8:	str	r1, [sp, #84]	; 0x54
   1c0ec:	add	r1, r9, #320	; 0x140
   1c0f0:	str	r1, [sp, #80]	; 0x50
   1c0f4:	add	r1, r9, #304	; 0x130
   1c0f8:	str	r1, [sp, #76]	; 0x4c
   1c0fc:	add	r1, r9, #288	; 0x120
   1c100:	str	r1, [sp, #72]	; 0x48
   1c104:	add	r1, r9, #272	; 0x110
   1c108:	str	r1, [sp, #68]	; 0x44
   1c10c:	add	r1, r9, #256	; 0x100
   1c110:	str	r1, [sp, #64]	; 0x40
   1c114:	add	r1, r9, #240	; 0xf0
   1c118:	str	r1, [sp, #60]	; 0x3c
   1c11c:	add	r1, r9, #224	; 0xe0
   1c120:	str	r1, [sp, #56]	; 0x38
   1c124:	add	r1, r9, #208	; 0xd0
   1c128:	str	r1, [sp, #52]	; 0x34
   1c12c:	add	r1, r9, #192	; 0xc0
   1c130:	str	r1, [sp, #48]	; 0x30
   1c134:	add	r1, r9, #176	; 0xb0
   1c138:	str	r1, [sp, #44]	; 0x2c
   1c13c:	add	r1, r9, #160	; 0xa0
   1c140:	str	r1, [sp, #40]	; 0x28
   1c144:	add	r1, r9, #144	; 0x90
   1c148:	str	r1, [sp, #36]	; 0x24
   1c14c:	add	r1, r9, #128	; 0x80
   1c150:	str	r1, [sp, #32]
   1c154:	add	r1, r9, #112	; 0x70
   1c158:	str	r1, [sp, #28]
   1c15c:	add	r1, r9, #96	; 0x60
   1c160:	str	r1, [sp, #24]
   1c164:	add	r1, r9, #80	; 0x50
   1c168:	str	r1, [sp, #20]
   1c16c:	add	r1, r9, #64	; 0x40
   1c170:	str	r1, [sp, #16]
   1c174:	add	r1, r9, #48	; 0x30
   1c178:	str	r1, [sp, #12]
   1c17c:	add	r1, r9, #32
   1c180:	str	r1, [sp, #8]
   1c184:	add	r1, r9, #16
   1c188:	str	r1, [sp, #4]
   1c18c:	ldr	r3, [r4]
   1c190:	mov	r0, r9
   1c194:	mov	r1, r8
   1c198:	mov	r2, #256	; 0x100
   1c19c:	bl	18b8 <fread@plt>
   1c1a0:	vld1.16	{d16-d17}, [r9]
   1c1a4:	add	r2, sl, r7
   1c1a8:	mov	r3, #248	; 0xf8
   1c1ac:	add	r5, r0, r5
   1c1b0:	ldr	r0, [sp]
   1c1b4:	add	r7, r7, #256	; 0x100
   1c1b8:	mov	r1, r2
   1c1bc:	vmovn.i16	d16, q8
   1c1c0:	cmp	r7, r0
   1c1c4:	vst1.8	{d16}, [r1], r3
   1c1c8:	ldr	r3, [sp, #4]
   1c1cc:	vld1.16	{d16-d17}, [r3]
   1c1d0:	add	r3, r2, #8
   1c1d4:	vmovn.i16	d16, q8
   1c1d8:	vst1.8	{d16}, [r3]
   1c1dc:	ldr	r3, [sp, #8]
   1c1e0:	vld1.16	{d16-d17}, [r3]
   1c1e4:	add	r3, r2, #16
   1c1e8:	vmovn.i16	d16, q8
   1c1ec:	vst1.8	{d16}, [r3]
   1c1f0:	ldr	r3, [sp, #12]
   1c1f4:	vld1.16	{d16-d17}, [r3]
   1c1f8:	add	r3, r2, #24
   1c1fc:	vmovn.i16	d16, q8
   1c200:	vst1.8	{d16}, [r3]
   1c204:	ldr	r3, [sp, #16]
   1c208:	vld1.16	{d16-d17}, [r3]
   1c20c:	add	r3, r2, #32
   1c210:	vmovn.i16	d16, q8
   1c214:	vst1.8	{d16}, [r3]
   1c218:	ldr	r3, [sp, #20]
   1c21c:	vld1.16	{d16-d17}, [r3]
   1c220:	add	r3, r2, #40	; 0x28
   1c224:	vmovn.i16	d16, q8
   1c228:	vst1.8	{d16}, [r3]
   1c22c:	ldr	r3, [sp, #24]
   1c230:	vld1.16	{d16-d17}, [r3]
   1c234:	add	r3, r2, #48	; 0x30
   1c238:	vmovn.i16	d16, q8
   1c23c:	vst1.8	{d16}, [r3]
   1c240:	ldr	r3, [sp, #28]
   1c244:	vld1.16	{d16-d17}, [r3]
   1c248:	add	r3, r2, #56	; 0x38
   1c24c:	vmovn.i16	d16, q8
   1c250:	vst1.8	{d16}, [r3]
   1c254:	ldr	r3, [sp, #32]
   1c258:	vld1.16	{d16-d17}, [r3]
   1c25c:	add	r3, r2, #64	; 0x40
   1c260:	vmovn.i16	d16, q8
   1c264:	vst1.8	{d16}, [r3]
   1c268:	ldr	r3, [sp, #36]	; 0x24
   1c26c:	vld1.16	{d16-d17}, [r3]
   1c270:	add	r3, r2, #72	; 0x48
   1c274:	vmovn.i16	d16, q8
   1c278:	vst1.8	{d16}, [r3]
   1c27c:	ldr	r3, [sp, #40]	; 0x28
   1c280:	vld1.16	{d16-d17}, [r3]
   1c284:	add	r3, r2, #80	; 0x50
   1c288:	vmovn.i16	d16, q8
   1c28c:	vst1.8	{d16}, [r3]
   1c290:	ldr	r3, [sp, #44]	; 0x2c
   1c294:	vld1.16	{d16-d17}, [r3]
   1c298:	add	r3, r2, #88	; 0x58
   1c29c:	vmovn.i16	d16, q8
   1c2a0:	vst1.8	{d16}, [r3]
   1c2a4:	ldr	r3, [sp, #48]	; 0x30
   1c2a8:	vld1.16	{d16-d17}, [r3]
   1c2ac:	add	r3, r2, #96	; 0x60
   1c2b0:	vmovn.i16	d16, q8
   1c2b4:	vst1.8	{d16}, [r3]
   1c2b8:	ldr	r3, [sp, #52]	; 0x34
   1c2bc:	vld1.16	{d16-d17}, [r3]
   1c2c0:	add	r3, r2, #104	; 0x68
   1c2c4:	vmovn.i16	d16, q8
   1c2c8:	vst1.8	{d16}, [r3]
   1c2cc:	ldr	r3, [sp, #56]	; 0x38
   1c2d0:	vld1.16	{d16-d17}, [r3]
   1c2d4:	add	r3, r2, #112	; 0x70
   1c2d8:	vmovn.i16	d16, q8
   1c2dc:	vst1.8	{d16}, [r3]
   1c2e0:	ldr	r3, [sp, #60]	; 0x3c
   1c2e4:	vld1.16	{d16-d17}, [r3]
   1c2e8:	add	r3, r2, #120	; 0x78
   1c2ec:	vmovn.i16	d16, q8
   1c2f0:	vst1.8	{d16}, [r3]
   1c2f4:	ldr	r3, [sp, #64]	; 0x40
   1c2f8:	vld1.16	{d16-d17}, [r3]
   1c2fc:	add	r3, r2, #128	; 0x80
   1c300:	vmovn.i16	d16, q8
   1c304:	vst1.8	{d16}, [r3]
   1c308:	ldr	r3, [sp, #68]	; 0x44
   1c30c:	vld1.16	{d16-d17}, [r3]
   1c310:	add	r3, r2, #136	; 0x88
   1c314:	vmovn.i16	d16, q8
   1c318:	vst1.8	{d16}, [r3]
   1c31c:	ldr	r3, [sp, #72]	; 0x48
   1c320:	vld1.16	{d16-d17}, [r3]
   1c324:	add	r3, r2, #144	; 0x90
   1c328:	vmovn.i16	d16, q8
   1c32c:	vst1.8	{d16}, [r3]
   1c330:	ldr	r3, [sp, #76]	; 0x4c
   1c334:	vld1.16	{d16-d17}, [r3]
   1c338:	add	r3, r2, #152	; 0x98
   1c33c:	vmovn.i16	d16, q8
   1c340:	vst1.8	{d16}, [r3]
   1c344:	ldr	r3, [sp, #80]	; 0x50
   1c348:	vld1.16	{d16-d17}, [r3]
   1c34c:	add	r3, r2, #160	; 0xa0
   1c350:	vmovn.i16	d16, q8
   1c354:	vst1.8	{d16}, [r3]
   1c358:	ldr	r3, [sp, #84]	; 0x54
   1c35c:	vld1.16	{d16-d17}, [r3]
   1c360:	add	r3, r2, #168	; 0xa8
   1c364:	vmovn.i16	d16, q8
   1c368:	vst1.8	{d16}, [r3]
   1c36c:	ldr	r3, [sp, #88]	; 0x58
   1c370:	vld1.16	{d16-d17}, [r3]
   1c374:	add	r3, r2, #176	; 0xb0
   1c378:	vmovn.i16	d16, q8
   1c37c:	vst1.8	{d16}, [r3]
   1c380:	ldr	r3, [sp, #92]	; 0x5c
   1c384:	vld1.16	{d16-d17}, [r3]
   1c388:	add	r3, r2, #184	; 0xb8
   1c38c:	vmovn.i16	d16, q8
   1c390:	vst1.8	{d16}, [r3]
   1c394:	ldr	r3, [sp, #96]	; 0x60
   1c398:	vld1.16	{d16-d17}, [r3]
   1c39c:	add	r3, r2, #192	; 0xc0
   1c3a0:	vmovn.i16	d16, q8
   1c3a4:	vst1.8	{d16}, [r3]
   1c3a8:	ldr	r3, [sp, #100]	; 0x64
   1c3ac:	vld1.16	{d16-d17}, [r3]
   1c3b0:	add	r3, r2, #200	; 0xc8
   1c3b4:	vmovn.i16	d16, q8
   1c3b8:	vst1.8	{d16}, [r3]
   1c3bc:	ldr	r3, [sp, #104]	; 0x68
   1c3c0:	vld1.16	{d16-d17}, [r3]
   1c3c4:	add	r3, r2, #208	; 0xd0
   1c3c8:	vmovn.i16	d16, q8
   1c3cc:	vst1.8	{d16}, [r3]
   1c3d0:	ldr	r3, [sp, #108]	; 0x6c
   1c3d4:	vld1.16	{d16-d17}, [r3]
   1c3d8:	add	r3, r2, #216	; 0xd8
   1c3dc:	vmovn.i16	d16, q8
   1c3e0:	vst1.8	{d16}, [r3]
   1c3e4:	ldr	r3, [sp, #112]	; 0x70
   1c3e8:	vld1.16	{d16-d17}, [r3]
   1c3ec:	add	r3, r2, #224	; 0xe0
   1c3f0:	vmovn.i16	d16, q8
   1c3f4:	vst1.8	{d16}, [r3]
   1c3f8:	ldr	r3, [sp, #116]	; 0x74
   1c3fc:	vld1.16	{d16-d17}, [r3]
   1c400:	add	r3, r2, #232	; 0xe8
   1c404:	add	r2, r2, #240	; 0xf0
   1c408:	vmovn.i16	d16, q8
   1c40c:	vst1.8	{d16}, [r3]
   1c410:	ldr	r3, [sp, #124]	; 0x7c
   1c414:	vld1.16	{d16-d17}, [r3]
   1c418:	vmovn.i16	d16, q8
   1c41c:	vst1.8	{d16}, [r2]
   1c420:	ldr	r2, [sp, #128]	; 0x80
   1c424:	vld1.16	{d16-d17}, [r2]
   1c428:	vmovn.i16	d16, q8
   1c42c:	vst1.8	{d16}, [r1]
   1c430:	blt	1c18c <ReadUInt8Data+0xfa0>
   1c434:	cmp	r7, r6
   1c438:	bge	1d2e4 <ReadUInt8Data+0x20f8>
   1c43c:	ldr	r0, [sp, #132]	; 0x84
   1c440:	sub	r9, r6, r7
   1c444:	add	r4, sp, #136	; 0x88
   1c448:	mov	r1, r8
   1c44c:	mov	r2, r9
   1c450:	ldr	r3, [r0]
   1c454:	mov	r0, r4
   1c458:	bl	18b8 <fread@plt>
   1c45c:	add	r5, r0, r5
   1c460:	cmp	r9, #1
   1c464:	blt	1d2e4 <ReadUInt8Data+0x20f8>
   1c468:	mov	r0, #0
   1c46c:	cmp	r9, #8
   1c470:	bcc	1c49c <ReadUInt8Data+0x12b0>
   1c474:	add	r1, sl, r7
   1c478:	bic	r2, r9, #7
   1c47c:	bic	r0, r9, #7
   1c480:	vld1.16	{d16-d17}, [r4]!
   1c484:	subs	r2, r2, #8
   1c488:	vmovn.i16	d16, q8
   1c48c:	vst1.8	{d16}, [r1]!
   1c490:	bne	1c480 <ReadUInt8Data+0x1294>
   1c494:	cmp	r9, r0
   1c498:	beq	1d2e4 <ReadUInt8Data+0x20f8>
   1c49c:	add	r1, sp, #136	; 0x88
   1c4a0:	add	r2, sl, r0
   1c4a4:	add	r1, r1, r0, lsl #1
   1c4a8:	sub	r0, r6, r0
   1c4ac:	add	r2, r2, r7
   1c4b0:	sub	r0, r0, r7
   1c4b4:	ldrb	r3, [r1], #2
   1c4b8:	subs	r0, r0, #1
   1c4bc:	strb	r3, [r2], #1
   1c4c0:	bne	1c4b4 <ReadUInt8Data+0x12c8>
   1c4c4:	b	1d2e4 <ReadUInt8Data+0x20f8>
   1c4c8:	mov	r0, r9
   1c4cc:	add	r9, sp, #136	; 0x88
   1c4d0:	mov	r7, #0
   1c4d4:	mov	r5, #0
   1c4d8:	add	r1, r9, #496	; 0x1f0
   1c4dc:	mov	r6, r0
   1c4e0:	sub	r0, r0, #256	; 0x100
   1c4e4:	str	r1, [sp, #128]	; 0x80
   1c4e8:	add	r1, r9, #480	; 0x1e0
   1c4ec:	str	r0, [sp]
   1c4f0:	str	r1, [sp, #124]	; 0x7c
   1c4f4:	add	r1, r9, #464	; 0x1d0
   1c4f8:	str	r1, [sp, #116]	; 0x74
   1c4fc:	add	r1, r9, #448	; 0x1c0
   1c500:	str	r1, [sp, #112]	; 0x70
   1c504:	add	r1, r9, #432	; 0x1b0
   1c508:	str	r1, [sp, #108]	; 0x6c
   1c50c:	add	r1, r9, #416	; 0x1a0
   1c510:	str	r1, [sp, #104]	; 0x68
   1c514:	add	r1, r9, #400	; 0x190
   1c518:	str	r1, [sp, #100]	; 0x64
   1c51c:	add	r1, r9, #384	; 0x180
   1c520:	str	r1, [sp, #96]	; 0x60
   1c524:	add	r1, r9, #368	; 0x170
   1c528:	str	r1, [sp, #92]	; 0x5c
   1c52c:	add	r1, r9, #352	; 0x160
   1c530:	str	r1, [sp, #88]	; 0x58
   1c534:	add	r1, r9, #336	; 0x150
   1c538:	str	r1, [sp, #84]	; 0x54
   1c53c:	add	r1, r9, #320	; 0x140
   1c540:	str	r1, [sp, #80]	; 0x50
   1c544:	add	r1, r9, #304	; 0x130
   1c548:	str	r1, [sp, #76]	; 0x4c
   1c54c:	add	r1, r9, #288	; 0x120
   1c550:	str	r1, [sp, #72]	; 0x48
   1c554:	add	r1, r9, #272	; 0x110
   1c558:	str	r1, [sp, #68]	; 0x44
   1c55c:	add	r1, r9, #256	; 0x100
   1c560:	str	r1, [sp, #64]	; 0x40
   1c564:	add	r1, r9, #240	; 0xf0
   1c568:	str	r1, [sp, #60]	; 0x3c
   1c56c:	add	r1, r9, #224	; 0xe0
   1c570:	str	r1, [sp, #56]	; 0x38
   1c574:	add	r1, r9, #208	; 0xd0
   1c578:	str	r1, [sp, #52]	; 0x34
   1c57c:	add	r1, r9, #192	; 0xc0
   1c580:	str	r1, [sp, #48]	; 0x30
   1c584:	add	r1, r9, #176	; 0xb0
   1c588:	str	r1, [sp, #44]	; 0x2c
   1c58c:	add	r1, r9, #160	; 0xa0
   1c590:	str	r1, [sp, #40]	; 0x28
   1c594:	add	r1, r9, #144	; 0x90
   1c598:	str	r1, [sp, #36]	; 0x24
   1c59c:	add	r1, r9, #128	; 0x80
   1c5a0:	str	r1, [sp, #32]
   1c5a4:	add	r1, r9, #112	; 0x70
   1c5a8:	str	r1, [sp, #28]
   1c5ac:	add	r1, r9, #96	; 0x60
   1c5b0:	str	r1, [sp, #24]
   1c5b4:	add	r1, r9, #80	; 0x50
   1c5b8:	str	r1, [sp, #20]
   1c5bc:	add	r1, r9, #64	; 0x40
   1c5c0:	str	r1, [sp, #16]
   1c5c4:	add	r1, r9, #48	; 0x30
   1c5c8:	str	r1, [sp, #12]
   1c5cc:	add	r1, r9, #32
   1c5d0:	str	r1, [sp, #8]
   1c5d4:	add	r1, r9, #16
   1c5d8:	str	r1, [sp, #4]
   1c5dc:	ldr	r3, [r4]
   1c5e0:	mov	r0, r9
   1c5e4:	mov	r1, r8
   1c5e8:	mov	r2, #256	; 0x100
   1c5ec:	bl	18b8 <fread@plt>
   1c5f0:	vld1.16	{d16-d17}, [r9]
   1c5f4:	add	r2, sl, r7
   1c5f8:	mov	r3, #248	; 0xf8
   1c5fc:	add	r5, r0, r5
   1c600:	ldr	r0, [sp]
   1c604:	add	r7, r7, #256	; 0x100
   1c608:	mov	r1, r2
   1c60c:	vmovn.i16	d16, q8
   1c610:	cmp	r7, r0
   1c614:	vst1.8	{d16}, [r1], r3
   1c618:	ldr	r3, [sp, #4]
   1c61c:	vld1.16	{d16-d17}, [r3]
   1c620:	add	r3, r2, #8
   1c624:	vmovn.i16	d16, q8
   1c628:	vst1.8	{d16}, [r3]
   1c62c:	ldr	r3, [sp, #8]
   1c630:	vld1.16	{d16-d17}, [r3]
   1c634:	add	r3, r2, #16
   1c638:	vmovn.i16	d16, q8
   1c63c:	vst1.8	{d16}, [r3]
   1c640:	ldr	r3, [sp, #12]
   1c644:	vld1.16	{d16-d17}, [r3]
   1c648:	add	r3, r2, #24
   1c64c:	vmovn.i16	d16, q8
   1c650:	vst1.8	{d16}, [r3]
   1c654:	ldr	r3, [sp, #16]
   1c658:	vld1.16	{d16-d17}, [r3]
   1c65c:	add	r3, r2, #32
   1c660:	vmovn.i16	d16, q8
   1c664:	vst1.8	{d16}, [r3]
   1c668:	ldr	r3, [sp, #20]
   1c66c:	vld1.16	{d16-d17}, [r3]
   1c670:	add	r3, r2, #40	; 0x28
   1c674:	vmovn.i16	d16, q8
   1c678:	vst1.8	{d16}, [r3]
   1c67c:	ldr	r3, [sp, #24]
   1c680:	vld1.16	{d16-d17}, [r3]
   1c684:	add	r3, r2, #48	; 0x30
   1c688:	vmovn.i16	d16, q8
   1c68c:	vst1.8	{d16}, [r3]
   1c690:	ldr	r3, [sp, #28]
   1c694:	vld1.16	{d16-d17}, [r3]
   1c698:	add	r3, r2, #56	; 0x38
   1c69c:	vmovn.i16	d16, q8
   1c6a0:	vst1.8	{d16}, [r3]
   1c6a4:	ldr	r3, [sp, #32]
   1c6a8:	vld1.16	{d16-d17}, [r3]
   1c6ac:	add	r3, r2, #64	; 0x40
   1c6b0:	vmovn.i16	d16, q8
   1c6b4:	vst1.8	{d16}, [r3]
   1c6b8:	ldr	r3, [sp, #36]	; 0x24
   1c6bc:	vld1.16	{d16-d17}, [r3]
   1c6c0:	add	r3, r2, #72	; 0x48
   1c6c4:	vmovn.i16	d16, q8
   1c6c8:	vst1.8	{d16}, [r3]
   1c6cc:	ldr	r3, [sp, #40]	; 0x28
   1c6d0:	vld1.16	{d16-d17}, [r3]
   1c6d4:	add	r3, r2, #80	; 0x50
   1c6d8:	vmovn.i16	d16, q8
   1c6dc:	vst1.8	{d16}, [r3]
   1c6e0:	ldr	r3, [sp, #44]	; 0x2c
   1c6e4:	vld1.16	{d16-d17}, [r3]
   1c6e8:	add	r3, r2, #88	; 0x58
   1c6ec:	vmovn.i16	d16, q8
   1c6f0:	vst1.8	{d16}, [r3]
   1c6f4:	ldr	r3, [sp, #48]	; 0x30
   1c6f8:	vld1.16	{d16-d17}, [r3]
   1c6fc:	add	r3, r2, #96	; 0x60
   1c700:	vmovn.i16	d16, q8
   1c704:	vst1.8	{d16}, [r3]
   1c708:	ldr	r3, [sp, #52]	; 0x34
   1c70c:	vld1.16	{d16-d17}, [r3]
   1c710:	add	r3, r2, #104	; 0x68
   1c714:	vmovn.i16	d16, q8
   1c718:	vst1.8	{d16}, [r3]
   1c71c:	ldr	r3, [sp, #56]	; 0x38
   1c720:	vld1.16	{d16-d17}, [r3]
   1c724:	add	r3, r2, #112	; 0x70
   1c728:	vmovn.i16	d16, q8
   1c72c:	vst1.8	{d16}, [r3]
   1c730:	ldr	r3, [sp, #60]	; 0x3c
   1c734:	vld1.16	{d16-d17}, [r3]
   1c738:	add	r3, r2, #120	; 0x78
   1c73c:	vmovn.i16	d16, q8
   1c740:	vst1.8	{d16}, [r3]
   1c744:	ldr	r3, [sp, #64]	; 0x40
   1c748:	vld1.16	{d16-d17}, [r3]
   1c74c:	add	r3, r2, #128	; 0x80
   1c750:	vmovn.i16	d16, q8
   1c754:	vst1.8	{d16}, [r3]
   1c758:	ldr	r3, [sp, #68]	; 0x44
   1c75c:	vld1.16	{d16-d17}, [r3]
   1c760:	add	r3, r2, #136	; 0x88
   1c764:	vmovn.i16	d16, q8
   1c768:	vst1.8	{d16}, [r3]
   1c76c:	ldr	r3, [sp, #72]	; 0x48
   1c770:	vld1.16	{d16-d17}, [r3]
   1c774:	add	r3, r2, #144	; 0x90
   1c778:	vmovn.i16	d16, q8
   1c77c:	vst1.8	{d16}, [r3]
   1c780:	ldr	r3, [sp, #76]	; 0x4c
   1c784:	vld1.16	{d16-d17}, [r3]
   1c788:	add	r3, r2, #152	; 0x98
   1c78c:	vmovn.i16	d16, q8
   1c790:	vst1.8	{d16}, [r3]
   1c794:	ldr	r3, [sp, #80]	; 0x50
   1c798:	vld1.16	{d16-d17}, [r3]
   1c79c:	add	r3, r2, #160	; 0xa0
   1c7a0:	vmovn.i16	d16, q8
   1c7a4:	vst1.8	{d16}, [r3]
   1c7a8:	ldr	r3, [sp, #84]	; 0x54
   1c7ac:	vld1.16	{d16-d17}, [r3]
   1c7b0:	add	r3, r2, #168	; 0xa8
   1c7b4:	vmovn.i16	d16, q8
   1c7b8:	vst1.8	{d16}, [r3]
   1c7bc:	ldr	r3, [sp, #88]	; 0x58
   1c7c0:	vld1.16	{d16-d17}, [r3]
   1c7c4:	add	r3, r2, #176	; 0xb0
   1c7c8:	vmovn.i16	d16, q8
   1c7cc:	vst1.8	{d16}, [r3]
   1c7d0:	ldr	r3, [sp, #92]	; 0x5c
   1c7d4:	vld1.16	{d16-d17}, [r3]
   1c7d8:	add	r3, r2, #184	; 0xb8
   1c7dc:	vmovn.i16	d16, q8
   1c7e0:	vst1.8	{d16}, [r3]
   1c7e4:	ldr	r3, [sp, #96]	; 0x60
   1c7e8:	vld1.16	{d16-d17}, [r3]
   1c7ec:	add	r3, r2, #192	; 0xc0
   1c7f0:	vmovn.i16	d16, q8
   1c7f4:	vst1.8	{d16}, [r3]
   1c7f8:	ldr	r3, [sp, #100]	; 0x64
   1c7fc:	vld1.16	{d16-d17}, [r3]
   1c800:	add	r3, r2, #200	; 0xc8
   1c804:	vmovn.i16	d16, q8
   1c808:	vst1.8	{d16}, [r3]
   1c80c:	ldr	r3, [sp, #104]	; 0x68
   1c810:	vld1.16	{d16-d17}, [r3]
   1c814:	add	r3, r2, #208	; 0xd0
   1c818:	vmovn.i16	d16, q8
   1c81c:	vst1.8	{d16}, [r3]
   1c820:	ldr	r3, [sp, #108]	; 0x6c
   1c824:	vld1.16	{d16-d17}, [r3]
   1c828:	add	r3, r2, #216	; 0xd8
   1c82c:	vmovn.i16	d16, q8
   1c830:	vst1.8	{d16}, [r3]
   1c834:	ldr	r3, [sp, #112]	; 0x70
   1c838:	vld1.16	{d16-d17}, [r3]
   1c83c:	add	r3, r2, #224	; 0xe0
   1c840:	vmovn.i16	d16, q8
   1c844:	vst1.8	{d16}, [r3]
   1c848:	ldr	r3, [sp, #116]	; 0x74
   1c84c:	vld1.16	{d16-d17}, [r3]
   1c850:	add	r3, r2, #232	; 0xe8
   1c854:	add	r2, r2, #240	; 0xf0
   1c858:	vmovn.i16	d16, q8
   1c85c:	vst1.8	{d16}, [r3]
   1c860:	ldr	r3, [sp, #124]	; 0x7c
   1c864:	vld1.16	{d16-d17}, [r3]
   1c868:	vmovn.i16	d16, q8
   1c86c:	vst1.8	{d16}, [r2]
   1c870:	ldr	r2, [sp, #128]	; 0x80
   1c874:	vld1.16	{d16-d17}, [r2]
   1c878:	vmovn.i16	d16, q8
   1c87c:	vst1.8	{d16}, [r1]
   1c880:	blt	1c5dc <ReadUInt8Data+0x13f0>
   1c884:	cmp	r7, r6
   1c888:	bge	1d2e4 <ReadUInt8Data+0x20f8>
   1c88c:	ldr	r0, [sp, #132]	; 0x84
   1c890:	sub	r9, r6, r7
   1c894:	add	r4, sp, #136	; 0x88
   1c898:	mov	r1, r8
   1c89c:	mov	r2, r9
   1c8a0:	ldr	r3, [r0]
   1c8a4:	mov	r0, r4
   1c8a8:	bl	18b8 <fread@plt>
   1c8ac:	add	r5, r0, r5
   1c8b0:	cmp	r9, #1
   1c8b4:	blt	1d2e4 <ReadUInt8Data+0x20f8>
   1c8b8:	mov	r0, #0
   1c8bc:	cmp	r9, #8
   1c8c0:	bcc	1c8ec <ReadUInt8Data+0x1700>
   1c8c4:	add	r1, sl, r7
   1c8c8:	bic	r2, r9, #7
   1c8cc:	bic	r0, r9, #7
   1c8d0:	vld1.16	{d16-d17}, [r4]!
   1c8d4:	subs	r2, r2, #8
   1c8d8:	vmovn.i16	d16, q8
   1c8dc:	vst1.8	{d16}, [r1]!
   1c8e0:	bne	1c8d0 <ReadUInt8Data+0x16e4>
   1c8e4:	cmp	r9, r0
   1c8e8:	beq	1d2e4 <ReadUInt8Data+0x20f8>
   1c8ec:	add	r1, sp, #136	; 0x88
   1c8f0:	add	r2, sl, r0
   1c8f4:	add	r1, r1, r0, lsl #1
   1c8f8:	sub	r0, r6, r0
   1c8fc:	add	r2, r2, r7
   1c900:	sub	r0, r0, r7
   1c904:	ldrb	r3, [r1], #2
   1c908:	subs	r0, r0, #1
   1c90c:	strb	r3, [r2], #1
   1c910:	bne	1c904 <ReadUInt8Data+0x1718>
   1c914:	b	1d2e4 <ReadUInt8Data+0x20f8>
   1c918:	sub	r0, r9, #256	; 0x100
   1c91c:	add	r1, sl, #256	; 0x100
   1c920:	mov	r6, r9
   1c924:	add	r4, sp, #136	; 0x88
   1c928:	mov	r5, #0
   1c92c:	str	r0, [sp, #128]	; 0x80
   1c930:	mov	r0, #0
   1c934:	mov	r7, r0
   1c938:	ldr	r0, [sp, #132]	; 0x84
   1c93c:	mov	r9, r1
   1c940:	mov	r1, r8
   1c944:	mov	r2, #256	; 0x100
   1c948:	ldr	r3, [r0]
   1c94c:	mov	r0, r4
   1c950:	bl	18b8 <fread@plt>
   1c954:	mov	r1, r4
   1c958:	mov	r2, #0
   1c95c:	vld1.32	{d16-d17}, [r1]!
   1c960:	add	r3, sl, r2
   1c964:	add	r2, r2, #4
   1c968:	cmp	r2, #256	; 0x100
   1c96c:	vmovn.i32	d16, q8
   1c970:	vuzp.8	d16, d17
   1c974:	vst1.32	{d16[0]}, [r3]
   1c978:	bne	1c95c <ReadUInt8Data+0x1770>
   1c97c:	ldr	r2, [sp, #128]	; 0x80
   1c980:	add	r5, r0, r5
   1c984:	add	r0, r7, #256	; 0x100
   1c988:	add	sl, sl, #256	; 0x100
   1c98c:	add	r1, r9, #256	; 0x100
   1c990:	cmp	r0, r2
   1c994:	blt	1c934 <ReadUInt8Data+0x1748>
   1c998:	cmp	r0, r6
   1c99c:	bge	1d2e4 <ReadUInt8Data+0x20f8>
   1c9a0:	sub	r6, r6, r0
   1c9a4:	ldr	r0, [sp, #132]	; 0x84
   1c9a8:	add	r4, sp, #136	; 0x88
   1c9ac:	mov	r1, r8
   1c9b0:	mov	r2, r6
   1c9b4:	ldr	r3, [r0]
   1c9b8:	mov	r0, r4
   1c9bc:	bl	18b8 <fread@plt>
   1c9c0:	add	r5, r0, r5
   1c9c4:	cmp	r6, #1
   1c9c8:	blt	1d2e4 <ReadUInt8Data+0x20f8>
   1c9cc:	mov	r0, #0
   1c9d0:	cmp	r6, #4
   1c9d4:	bcc	1ca0c <ReadUInt8Data+0x1820>
   1c9d8:	ldr	r0, [sp, #128]	; 0x80
   1c9dc:	mov	r2, r9
   1c9e0:	sub	r0, r0, r7
   1c9e4:	bic	r1, r0, #3
   1c9e8:	bic	r0, r6, #3
   1c9ec:	vld1.32	{d16-d17}, [r4]!
   1c9f0:	subs	r1, r1, #4
   1c9f4:	vmovn.i32	d16, q8
   1c9f8:	vuzp.8	d16, d17
   1c9fc:	vst1.32	{d16[0]}, [r2]!
   1ca00:	bne	1c9ec <ReadUInt8Data+0x1800>
   1ca04:	cmp	r6, r0
   1ca08:	beq	1d2e4 <ReadUInt8Data+0x20f8>
   1ca0c:	ldr	r3, [sp, #128]	; 0x80
   1ca10:	add	r2, sp, #136	; 0x88
   1ca14:	add	r1, r9, r0
   1ca18:	add	r2, r2, r0, lsl #2
   1ca1c:	sub	r3, r3, r7
   1ca20:	sub	r0, r3, r0
   1ca24:	ldr	r3, [r2], #4
   1ca28:	subs	r0, r0, #1
   1ca2c:	strb	r3, [r1], #1
   1ca30:	bne	1ca24 <ReadUInt8Data+0x1838>
   1ca34:	b	1d2e4 <ReadUInt8Data+0x20f8>
   1ca38:	sub	r0, r9, #256	; 0x100
   1ca3c:	add	r1, sl, #256	; 0x100
   1ca40:	mov	r6, r9
   1ca44:	add	r4, sp, #136	; 0x88
   1ca48:	mov	r5, #0
   1ca4c:	str	r0, [sp, #128]	; 0x80
   1ca50:	mov	r0, #0
   1ca54:	mov	r7, r0
   1ca58:	ldr	r0, [sp, #132]	; 0x84
   1ca5c:	mov	r9, r1
   1ca60:	mov	r1, r8
   1ca64:	mov	r2, #256	; 0x100
   1ca68:	ldr	r3, [r0]
   1ca6c:	mov	r0, r4
   1ca70:	bl	18b8 <fread@plt>
   1ca74:	mov	r1, r4
   1ca78:	mov	r2, #0
   1ca7c:	vld1.32	{d16-d17}, [r1]!
   1ca80:	add	r3, sl, r2
   1ca84:	add	r2, r2, #4
   1ca88:	cmp	r2, #256	; 0x100
   1ca8c:	vmovn.i32	d16, q8
   1ca90:	vuzp.8	d16, d17
   1ca94:	vst1.32	{d16[0]}, [r3]
   1ca98:	bne	1ca7c <ReadUInt8Data+0x1890>
   1ca9c:	ldr	r2, [sp, #128]	; 0x80
   1caa0:	add	r5, r0, r5
   1caa4:	add	r0, r7, #256	; 0x100
   1caa8:	add	sl, sl, #256	; 0x100
   1caac:	add	r1, r9, #256	; 0x100
   1cab0:	cmp	r0, r2
   1cab4:	blt	1ca54 <ReadUInt8Data+0x1868>
   1cab8:	cmp	r0, r6
   1cabc:	bge	1d2e4 <ReadUInt8Data+0x20f8>
   1cac0:	sub	r6, r6, r0
   1cac4:	ldr	r0, [sp, #132]	; 0x84
   1cac8:	add	r4, sp, #136	; 0x88
   1cacc:	mov	r1, r8
   1cad0:	mov	r2, r6
   1cad4:	ldr	r3, [r0]
   1cad8:	mov	r0, r4
   1cadc:	bl	18b8 <fread@plt>
   1cae0:	add	r5, r0, r5
   1cae4:	cmp	r6, #1
   1cae8:	blt	1d2e4 <ReadUInt8Data+0x20f8>
   1caec:	mov	r0, #0
   1caf0:	cmp	r6, #4
   1caf4:	bcc	1cb2c <ReadUInt8Data+0x1940>
   1caf8:	ldr	r0, [sp, #128]	; 0x80
   1cafc:	mov	r2, r9
   1cb00:	sub	r0, r0, r7
   1cb04:	bic	r1, r0, #3
   1cb08:	bic	r0, r6, #3
   1cb0c:	vld1.32	{d16-d17}, [r4]!
   1cb10:	subs	r1, r1, #4
   1cb14:	vmovn.i32	d16, q8
   1cb18:	vuzp.8	d16, d17
   1cb1c:	vst1.32	{d16[0]}, [r2]!
   1cb20:	bne	1cb0c <ReadUInt8Data+0x1920>
   1cb24:	cmp	r6, r0
   1cb28:	beq	1d2e4 <ReadUInt8Data+0x20f8>
   1cb2c:	ldr	r3, [sp, #128]	; 0x80
   1cb30:	add	r2, sp, #136	; 0x88
   1cb34:	add	r1, r9, r0
   1cb38:	add	r2, r2, r0, lsl #2
   1cb3c:	sub	r3, r3, r7
   1cb40:	sub	r0, r3, r0
   1cb44:	ldr	r3, [r2], #4
   1cb48:	subs	r0, r0, #1
   1cb4c:	strb	r3, [r1], #1
   1cb50:	bne	1cb44 <ReadUInt8Data+0x1958>
   1cb54:	b	1d2e4 <ReadUInt8Data+0x20f8>
   1cb58:	sub	r0, r9, #256	; 0x100
   1cb5c:	add	r1, sl, #256	; 0x100
   1cb60:	mov	r6, r9
   1cb64:	add	r4, sp, #136	; 0x88
   1cb68:	mov	r5, #0
   1cb6c:	str	r0, [sp, #128]	; 0x80
   1cb70:	mov	r0, #0
   1cb74:	mov	r7, r0
   1cb78:	ldr	r0, [sp, #132]	; 0x84
   1cb7c:	mov	r9, r1
   1cb80:	mov	r1, r8
   1cb84:	mov	r2, #256	; 0x100
   1cb88:	ldr	r3, [r0]
   1cb8c:	mov	r0, r4
   1cb90:	bl	18b8 <fread@plt>
   1cb94:	mov	r1, r4
   1cb98:	mov	r2, #0
   1cb9c:	vld1.32	{d16-d17}, [r1]!
   1cba0:	add	r3, sl, r2
   1cba4:	add	r2, r2, #4
   1cba8:	cmp	r2, #256	; 0x100
   1cbac:	vcvt.s32.f32	q8, q8
   1cbb0:	vmovn.i32	d16, q8
   1cbb4:	vuzp.8	d16, d17
   1cbb8:	vst1.32	{d16[0]}, [r3]
   1cbbc:	bne	1cb9c <ReadUInt8Data+0x19b0>
   1cbc0:	ldr	r2, [sp, #128]	; 0x80
   1cbc4:	add	r5, r0, r5
   1cbc8:	add	r0, r7, #256	; 0x100
   1cbcc:	add	sl, sl, #256	; 0x100
   1cbd0:	add	r1, r9, #256	; 0x100
   1cbd4:	cmp	r0, r2
   1cbd8:	blt	1cb74 <ReadUInt8Data+0x1988>
   1cbdc:	cmp	r0, r6
   1cbe0:	bge	1d2e4 <ReadUInt8Data+0x20f8>
   1cbe4:	sub	r6, r6, r0
   1cbe8:	ldr	r0, [sp, #132]	; 0x84
   1cbec:	add	r4, sp, #136	; 0x88
   1cbf0:	mov	r1, r8
   1cbf4:	mov	r2, r6
   1cbf8:	ldr	r3, [r0]
   1cbfc:	mov	r0, r4
   1cc00:	bl	18b8 <fread@plt>
   1cc04:	add	r5, r0, r5
   1cc08:	cmp	r6, #1
   1cc0c:	blt	1d2e4 <ReadUInt8Data+0x20f8>
   1cc10:	mov	r0, #0
   1cc14:	cmp	r6, #4
   1cc18:	bcc	1cc54 <ReadUInt8Data+0x1a68>
   1cc1c:	ldr	r0, [sp, #128]	; 0x80
   1cc20:	mov	r2, r9
   1cc24:	sub	r0, r0, r7
   1cc28:	bic	r1, r0, #3
   1cc2c:	bic	r0, r6, #3
   1cc30:	vld1.32	{d16-d17}, [r4]!
   1cc34:	subs	r1, r1, #4
   1cc38:	vcvt.s32.f32	q8, q8
   1cc3c:	vmovn.i32	d16, q8
   1cc40:	vuzp.8	d16, d17
   1cc44:	vst1.32	{d16[0]}, [r2]!
   1cc48:	bne	1cc30 <ReadUInt8Data+0x1a44>
   1cc4c:	cmp	r6, r0
   1cc50:	beq	1d2e4 <ReadUInt8Data+0x20f8>
   1cc54:	ldr	r3, [sp, #128]	; 0x80
   1cc58:	add	r2, sp, #136	; 0x88
   1cc5c:	add	r1, r9, r0
   1cc60:	add	r2, r2, r0, lsl #2
   1cc64:	sub	r3, r3, r7
   1cc68:	sub	r0, r3, r0
   1cc6c:	vldr	s0, [r2]
   1cc70:	subs	r0, r0, #1
   1cc74:	add	r2, r2, #4
   1cc78:	vcvt.u32.f32	s0, s0
   1cc7c:	vmov	r3, s0
   1cc80:	strb	r3, [r1], #1
   1cc84:	bne	1cc6c <ReadUInt8Data+0x1a80>
   1cc88:	b	1d2e4 <ReadUInt8Data+0x20f8>
   1cc8c:	mov	r5, r8
   1cc90:	sub	r0, r9, #256	; 0x100
   1cc94:	str	r9, [sp, #120]	; 0x78
   1cc98:	mov	r8, #0
   1cc9c:	add	r9, sp, #136	; 0x88
   1cca0:	mov	r4, sl
   1cca4:	mov	r6, #0
   1cca8:	str	r0, [sp, #128]	; 0x80
   1ccac:	ldr	r0, [sp, #132]	; 0x84
   1ccb0:	mov	r1, r5
   1ccb4:	mov	r2, #256	; 0x100
   1ccb8:	mov	r7, r8
   1ccbc:	ldr	r3, [r0]
   1ccc0:	mov	r0, r9
   1ccc4:	bl	18b8 <fread@plt>
   1ccc8:	mov	r1, r9
   1cccc:	mov	r2, #0
   1ccd0:	vldr	d16, [r1]
   1ccd4:	add	r1, r1, #8
   1ccd8:	vcvt.u32.f64	s0, d16
   1ccdc:	vmov	r3, s0
   1cce0:	strb	r3, [r4, r2]
   1cce4:	add	r2, r2, #1
   1cce8:	cmp	r2, #256	; 0x100
   1ccec:	bne	1ccd0 <ReadUInt8Data+0x1ae4>
   1ccf0:	add	r6, r0, r6
   1ccf4:	ldr	r0, [sp, #128]	; 0x80
   1ccf8:	add	r8, r7, #256	; 0x100
   1ccfc:	add	r4, r4, #256	; 0x100
   1cd00:	cmp	r8, r0
   1cd04:	blt	1ccac <ReadUInt8Data+0x1ac0>
   1cd08:	ldr	r0, [sp, #120]	; 0x78
   1cd0c:	cmp	r8, r0
   1cd10:	bge	1cd68 <ReadUInt8Data+0x1b7c>
   1cd14:	sub	r9, r0, r8
   1cd18:	ldr	r0, [sp, #132]	; 0x84
   1cd1c:	add	r4, sp, #136	; 0x88
   1cd20:	mov	r1, r5
   1cd24:	mov	r2, r9
   1cd28:	ldr	r3, [r0]
   1cd2c:	mov	r0, r4
   1cd30:	bl	18b8 <fread@plt>
   1cd34:	add	r6, r0, r6
   1cd38:	cmp	r9, #1
   1cd3c:	blt	1cd68 <ReadUInt8Data+0x1b7c>
   1cd40:	ldr	r0, [sp, #128]	; 0x80
   1cd44:	sub	r0, r0, r7
   1cd48:	vldr	d16, [r4]
   1cd4c:	subs	r0, r0, #1
   1cd50:	add	r4, r4, #8
   1cd54:	vcvt.u32.f64	s0, d16
   1cd58:	vmov	r1, s0
   1cd5c:	strb	r1, [sl, r8]
   1cd60:	add	sl, sl, #1
   1cd64:	bne	1cd48 <ReadUInt8Data+0x1b5c>
   1cd68:	mov	r8, r5
   1cd6c:	mov	r5, r6
   1cd70:	mul	r0, r5, r8
   1cd74:	sub	sp, fp, #28
   1cd78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cd7c:	sub	r0, r9, #256	; 0x100
   1cd80:	str	r8, [sp, #128]	; 0x80
   1cd84:	add	r1, sl, #256	; 0x100
   1cd88:	add	r4, sp, #136	; 0x88
   1cd8c:	mov	r5, sl
   1cd90:	mov	r8, #0
   1cd94:	str	r6, [sp, #116]	; 0x74
   1cd98:	str	r9, [sp, #120]	; 0x78
   1cd9c:	str	r0, [sp, #124]	; 0x7c
   1cda0:	mov	r0, #0
   1cda4:	mov	r7, r0
   1cda8:	ldr	r0, [sp, #132]	; 0x84
   1cdac:	mov	r9, r1
   1cdb0:	ldr	r1, [sp, #128]	; 0x80
   1cdb4:	mov	r2, #256	; 0x100
   1cdb8:	ldr	r3, [r0]
   1cdbc:	mov	r0, r4
   1cdc0:	bl	18b8 <fread@plt>
   1cdc4:	mov	r1, r4
   1cdc8:	mov	r2, #0
   1cdcc:	vld1.64	{d16-d17}, [r1]!
   1cdd0:	mov	r6, r5
   1cdd4:	vmovn.i64	d16, q8
   1cdd8:	vmov.32	r3, d16[0]
   1cddc:	strb	r3, [r6, r2]!
   1cde0:	add	r2, r2, #2
   1cde4:	vmov.32	r3, d16[1]
   1cde8:	cmp	r2, #256	; 0x100
   1cdec:	strb	r3, [r6, #1]
   1cdf0:	bne	1cdcc <ReadUInt8Data+0x1be0>
   1cdf4:	ldr	r2, [sp, #124]	; 0x7c
   1cdf8:	add	r8, r0, r8
   1cdfc:	add	r0, r7, #256	; 0x100
   1ce00:	add	r5, r5, #256	; 0x100
   1ce04:	add	r1, r9, #256	; 0x100
   1ce08:	cmp	r0, r2
   1ce0c:	blt	1cda4 <ReadUInt8Data+0x1bb8>
   1ce10:	ldr	r1, [sp, #120]	; 0x78
   1ce14:	cmp	r0, r1
   1ce18:	bge	1cf40 <ReadUInt8Data+0x1d54>
   1ce1c:	sub	r6, r1, r0
   1ce20:	ldr	r0, [sp, #132]	; 0x84
   1ce24:	ldr	r1, [sp, #128]	; 0x80
   1ce28:	add	r4, sp, #136	; 0x88
   1ce2c:	mov	r2, r6
   1ce30:	ldr	r3, [r0]
   1ce34:	mov	r0, r4
   1ce38:	bl	18b8 <fread@plt>
   1ce3c:	mov	r5, r8
   1ce40:	cmp	r6, #1
   1ce44:	add	r5, r0, r8
   1ce48:	blt	1cf60 <ReadUInt8Data+0x1d74>
   1ce4c:	ldr	r8, [sp, #128]	; 0x80
   1ce50:	mov	r0, #0
   1ce54:	beq	1ce98 <ReadUInt8Data+0x1cac>
   1ce58:	ldr	r0, [sp, #124]	; 0x7c
   1ce5c:	mov	r2, r9
   1ce60:	sub	r0, r0, r7
   1ce64:	bic	r1, r0, #1
   1ce68:	bic	r0, r6, #1
   1ce6c:	vld1.64	{d16-d17}, [r4]!
   1ce70:	subs	r1, r1, #2
   1ce74:	vmovn.i64	d16, q8
   1ce78:	vmov.32	r3, d16[1]
   1ce7c:	strb	r3, [r2, #1]
   1ce80:	vmov.32	r3, d16[0]
   1ce84:	strb	r3, [r2]
   1ce88:	add	r2, r2, #2
   1ce8c:	bne	1ce6c <ReadUInt8Data+0x1c80>
   1ce90:	cmp	r6, r0
   1ce94:	beq	1cf64 <ReadUInt8Data+0x1d78>
   1ce98:	ldr	r3, [sp, #124]	; 0x7c
   1ce9c:	add	r2, sp, #136	; 0x88
   1cea0:	add	r1, r9, r0
   1cea4:	add	r2, r2, r0, lsl #3
   1cea8:	sub	r3, r3, r7
   1ceac:	sub	r0, r3, r0
   1ceb0:	ldrb	r3, [r2], #8
   1ceb4:	subs	r0, r0, #1
   1ceb8:	strb	r3, [r1], #1
   1cebc:	bne	1ceb0 <ReadUInt8Data+0x1cc4>
   1cec0:	b	1cf64 <ReadUInt8Data+0x1d78>
   1cec4:	ldr	r8, [sp, #128]	; 0x80
   1cec8:	mul	r0, r5, r8
   1cecc:	sub	sp, fp, #28
   1ced0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ced4:	ldr	r8, [sp, #128]	; 0x80
   1ced8:	mul	r0, r5, r8
   1cedc:	sub	sp, fp, #28
   1cee0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cee4:	ldr	r8, [sp, #128]	; 0x80
   1cee8:	mul	r0, r5, r8
   1ceec:	sub	sp, fp, #28
   1cef0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cef4:	ldr	r8, [sp, #128]	; 0x80
   1cef8:	mul	r0, r5, r8
   1cefc:	sub	sp, fp, #28
   1cf00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf04:	ldr	r8, [sp, #128]	; 0x80
   1cf08:	mul	r0, r5, r8
   1cf0c:	sub	sp, fp, #28
   1cf10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf14:	ldr	r8, [sp, #128]	; 0x80
   1cf18:	mul	r0, r5, r8
   1cf1c:	sub	sp, fp, #28
   1cf20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf24:	ldr	r8, [sp, #128]	; 0x80
   1cf28:	ldr	r4, [sp, #132]	; 0x84
   1cf2c:	ldr	r6, [sp, #116]	; 0x74
   1cf30:	mov	r9, r0
   1cf34:	cmp	r6, #13
   1cf38:	beq	1cf78 <ReadUInt8Data+0x1d8c>
   1cf3c:	b	1d2e4 <ReadUInt8Data+0x20f8>
   1cf40:	mov	r5, r8
   1cf44:	ldr	r8, [sp, #128]	; 0x80
   1cf48:	ldr	r4, [sp, #132]	; 0x84
   1cf4c:	ldr	r6, [sp, #116]	; 0x74
   1cf50:	mov	r9, r1
   1cf54:	cmp	r6, #13
   1cf58:	beq	1cf78 <ReadUInt8Data+0x1d8c>
   1cf5c:	b	1d2e4 <ReadUInt8Data+0x20f8>
   1cf60:	ldr	r8, [sp, #128]	; 0x80
   1cf64:	ldr	r4, [sp, #132]	; 0x84
   1cf68:	ldr	r6, [sp, #116]	; 0x74
   1cf6c:	ldr	r9, [sp, #120]	; 0x78
   1cf70:	cmp	r6, #13
   1cf74:	bne	1d2e4 <ReadUInt8Data+0x20f8>
   1cf78:	ldr	r0, [r4, #20]
   1cf7c:	cmp	r0, #0
   1cf80:	beq	1cfcc <ReadUInt8Data+0x1de0>
   1cf84:	cmp	r9, #256	; 0x100
   1cf88:	bgt	1d05c <ReadUInt8Data+0x1e70>
   1cf8c:	ldr	r3, [r4]
   1cf90:	add	r4, sp, #136	; 0x88
   1cf94:	mov	r1, r8
   1cf98:	mov	r2, r9
   1cf9c:	mov	r0, r4
   1cfa0:	bl	18b8 <fread@plt>
   1cfa4:	add	r5, r0, r5
   1cfa8:	cmp	r9, #1
   1cfac:	blt	1d2e4 <ReadUInt8Data+0x20f8>
   1cfb0:	mov	r0, r4
   1cfb4:	bl	1bd4 <Mat_uint64Swap>
   1cfb8:	strb	r0, [sl], #1
   1cfbc:	subs	r9, r9, #1
   1cfc0:	add	r4, r4, #8
   1cfc4:	bne	1cfb0 <ReadUInt8Data+0x1dc4>
   1cfc8:	b	1d2e4 <ReadUInt8Data+0x20f8>
   1cfcc:	cmp	r9, #256	; 0x100
   1cfd0:	bgt	1d140 <ReadUInt8Data+0x1f54>
   1cfd4:	ldr	r3, [r4]
   1cfd8:	add	r4, sp, #136	; 0x88
   1cfdc:	mov	r1, r8
   1cfe0:	mov	r2, r9
   1cfe4:	mov	r0, r4
   1cfe8:	bl	18b8 <fread@plt>
   1cfec:	add	r5, r0, r5
   1cff0:	cmp	r9, #1
   1cff4:	blt	1d2e4 <ReadUInt8Data+0x20f8>
   1cff8:	mov	r0, #0
   1cffc:	beq	1d038 <ReadUInt8Data+0x1e4c>
   1d000:	bic	r0, r9, #1
   1d004:	mov	r2, sl
   1d008:	mov	r1, r0
   1d00c:	vld1.64	{d16-d17}, [r4]!
   1d010:	subs	r1, r1, #2
   1d014:	vmovn.i64	d16, q8
   1d018:	vmov.32	r3, d16[1]
   1d01c:	strb	r3, [r2, #1]
   1d020:	vmov.32	r3, d16[0]
   1d024:	strb	r3, [r2]
   1d028:	add	r2, r2, #2
   1d02c:	bne	1d00c <ReadUInt8Data+0x1e20>
   1d030:	cmp	r0, r9
   1d034:	beq	1d2e4 <ReadUInt8Data+0x20f8>
   1d038:	add	r3, sp, #136	; 0x88
   1d03c:	sub	r1, r9, r0
   1d040:	add	r2, sl, r0
   1d044:	add	r0, r3, r0, lsl #3
   1d048:	ldrb	r3, [r0], #8
   1d04c:	subs	r1, r1, #1
   1d050:	strb	r3, [r2], #1
   1d054:	bne	1d048 <ReadUInt8Data+0x1e5c>
   1d058:	b	1d2e4 <ReadUInt8Data+0x20f8>
   1d05c:	sub	r0, r9, #256	; 0x100
   1d060:	mov	r7, #0
   1d064:	mov	r6, sl
   1d068:	str	r8, [sp, #128]	; 0x80
   1d06c:	str	r9, [sp, #120]	; 0x78
   1d070:	str	r0, [sp, #124]	; 0x7c
   1d074:	ldr	r3, [r4]
   1d078:	ldr	r1, [sp, #128]	; 0x80
   1d07c:	add	r4, sp, #136	; 0x88
   1d080:	mov	r2, #256	; 0x100
   1d084:	mov	r8, r5
   1d088:	mov	r9, r7
   1d08c:	mov	r0, r4
   1d090:	bl	18b8 <fread@plt>
   1d094:	mov	r7, r0
   1d098:	mov	r5, #0
   1d09c:	mov	r0, r4
   1d0a0:	bl	1bd4 <Mat_uint64Swap>
   1d0a4:	strb	r0, [r6, r5]
   1d0a8:	add	r5, r5, #1
   1d0ac:	add	r4, r4, #8
   1d0b0:	cmp	r5, #256	; 0x100
   1d0b4:	bne	1d09c <ReadUInt8Data+0x1eb0>
   1d0b8:	ldr	r0, [sp, #124]	; 0x7c
   1d0bc:	ldr	r4, [sp, #132]	; 0x84
   1d0c0:	mov	r5, r8
   1d0c4:	add	r6, r6, #256	; 0x100
   1d0c8:	add	r5, r7, r8
   1d0cc:	add	r7, r9, #256	; 0x100
   1d0d0:	cmp	r7, r0
   1d0d4:	blt	1d074 <ReadUInt8Data+0x1e88>
   1d0d8:	ldr	r0, [sp, #120]	; 0x78
   1d0dc:	cmp	r7, r0
   1d0e0:	bge	1d270 <ReadUInt8Data+0x2084>
   1d0e4:	ldr	r3, [r4]
   1d0e8:	ldr	r1, [sp, #128]	; 0x80
   1d0ec:	sub	r8, r0, r7
   1d0f0:	add	r4, sp, #136	; 0x88
   1d0f4:	mov	r0, r4
   1d0f8:	mov	r2, r8
   1d0fc:	bl	18b8 <fread@plt>
   1d100:	add	r5, r0, r5
   1d104:	cmp	r8, #1
   1d108:	blt	1d2e0 <ReadUInt8Data+0x20f4>
   1d10c:	ldr	r0, [sp, #124]	; 0x7c
   1d110:	sub	r6, r0, r9
   1d114:	mov	r0, r4
   1d118:	bl	1bd4 <Mat_uint64Swap>
   1d11c:	strb	r0, [sl, r7]
   1d120:	add	sl, sl, #1
   1d124:	subs	r6, r6, #1
   1d128:	add	r4, r4, #8
   1d12c:	bne	1d114 <ReadUInt8Data+0x1f28>
   1d130:	ldr	r8, [sp, #128]	; 0x80
   1d134:	mul	r0, r5, r8
   1d138:	sub	sp, fp, #28
   1d13c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d140:	sub	r0, r9, #256	; 0x100
   1d144:	add	r1, sl, #256	; 0x100
   1d148:	add	r4, sp, #136	; 0x88
   1d14c:	str	r9, [sp, #120]	; 0x78
   1d150:	str	r0, [sp, #128]	; 0x80
   1d154:	mov	r0, #0
   1d158:	mov	r7, r0
   1d15c:	ldr	r0, [sp, #132]	; 0x84
   1d160:	mov	r9, r1
   1d164:	mov	r1, r8
   1d168:	mov	r2, #256	; 0x100
   1d16c:	ldr	r3, [r0]
   1d170:	mov	r0, r4
   1d174:	bl	18b8 <fread@plt>
   1d178:	mov	r1, r4
   1d17c:	mov	r2, #0
   1d180:	vld1.64	{d16-d17}, [r1]!
   1d184:	mov	r6, sl
   1d188:	vmovn.i64	d16, q8
   1d18c:	vmov.32	r3, d16[0]
   1d190:	strb	r3, [r6, r2]!
   1d194:	add	r2, r2, #2
   1d198:	vmov.32	r3, d16[1]
   1d19c:	cmp	r2, #256	; 0x100
   1d1a0:	strb	r3, [r6, #1]
   1d1a4:	bne	1d180 <ReadUInt8Data+0x1f94>
   1d1a8:	ldr	r2, [sp, #128]	; 0x80
   1d1ac:	add	r5, r0, r5
   1d1b0:	add	r0, r7, #256	; 0x100
   1d1b4:	add	sl, sl, #256	; 0x100
   1d1b8:	add	r1, r9, #256	; 0x100
   1d1bc:	cmp	r0, r2
   1d1c0:	blt	1d158 <ReadUInt8Data+0x1f6c>
   1d1c4:	ldr	r1, [sp, #120]	; 0x78
   1d1c8:	cmp	r0, r1
   1d1cc:	bge	1d2e4 <ReadUInt8Data+0x20f8>
   1d1d0:	sub	r6, r1, r0
   1d1d4:	ldr	r0, [sp, #132]	; 0x84
   1d1d8:	add	r4, sp, #136	; 0x88
   1d1dc:	mov	r1, r8
   1d1e0:	mov	r2, r6
   1d1e4:	ldr	r3, [r0]
   1d1e8:	mov	r0, r4
   1d1ec:	bl	18b8 <fread@plt>
   1d1f0:	add	r5, r0, r5
   1d1f4:	cmp	r6, #1
   1d1f8:	blt	1d2e4 <ReadUInt8Data+0x20f8>
   1d1fc:	mov	r0, #0
   1d200:	beq	1d244 <ReadUInt8Data+0x2058>
   1d204:	ldr	r0, [sp, #128]	; 0x80
   1d208:	mov	r2, r9
   1d20c:	sub	r0, r0, r7
   1d210:	bic	r1, r0, #1
   1d214:	bic	r0, r6, #1
   1d218:	vld1.64	{d16-d17}, [r4]!
   1d21c:	subs	r1, r1, #2
   1d220:	vmovn.i64	d16, q8
   1d224:	vmov.32	r3, d16[1]
   1d228:	strb	r3, [r2, #1]
   1d22c:	vmov.32	r3, d16[0]
   1d230:	strb	r3, [r2]
   1d234:	add	r2, r2, #2
   1d238:	bne	1d218 <ReadUInt8Data+0x202c>
   1d23c:	cmp	r6, r0
   1d240:	beq	1d2e4 <ReadUInt8Data+0x20f8>
   1d244:	ldr	r3, [sp, #128]	; 0x80
   1d248:	add	r2, sp, #136	; 0x88
   1d24c:	add	r1, r9, r0
   1d250:	add	r2, r2, r0, lsl #3
   1d254:	sub	r3, r3, r7
   1d258:	sub	r0, r3, r0
   1d25c:	ldrb	r3, [r2], #8
   1d260:	subs	r0, r0, #1
   1d264:	strb	r3, [r1], #1
   1d268:	bne	1d25c <ReadUInt8Data+0x2070>
   1d26c:	b	1d2e4 <ReadUInt8Data+0x20f8>
   1d270:	ldr	r8, [sp, #128]	; 0x80
   1d274:	mul	r0, r5, r8
   1d278:	sub	sp, fp, #28
   1d27c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d280:	ldr	r8, [sp, #128]	; 0x80
   1d284:	mul	r0, r5, r8
   1d288:	sub	sp, fp, #28
   1d28c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d290:	ldr	r8, [sp, #128]	; 0x80
   1d294:	mul	r0, r5, r8
   1d298:	sub	sp, fp, #28
   1d29c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2a0:	ldr	r8, [sp, #128]	; 0x80
   1d2a4:	mul	r0, r5, r8
   1d2a8:	sub	sp, fp, #28
   1d2ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2b0:	ldr	r8, [sp, #128]	; 0x80
   1d2b4:	mul	r0, r5, r8
   1d2b8:	sub	sp, fp, #28
   1d2bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2c0:	ldr	r8, [sp, #128]	; 0x80
   1d2c4:	mul	r0, r5, r8
   1d2c8:	sub	sp, fp, #28
   1d2cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2d0:	ldr	r8, [sp, #128]	; 0x80
   1d2d4:	mul	r0, r5, r8
   1d2d8:	sub	sp, fp, #28
   1d2dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2e0:	ldr	r8, [sp, #128]	; 0x80
   1d2e4:	mul	r0, r5, r8
   1d2e8:	sub	sp, fp, #28
   1d2ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001d2f0 <ReadCompressedUInt8Data>:
   1d2f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d2f4:	add	fp, sp, #28
   1d2f8:	sub	sp, sp, #12
   1d2fc:	mov	r7, r0
   1d300:	mov	r0, #0
   1d304:	cmp	r1, #0
   1d308:	beq	1d31c <ReadCompressedUInt8Data+0x2c>
   1d30c:	cmp	r7, #0
   1d310:	movne	r5, r2
   1d314:	cmpne	r2, #0
   1d318:	bne	1d324 <ReadCompressedUInt8Data+0x34>
   1d31c:	sub	sp, fp, #28
   1d320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d324:	ldr	sl, [fp, #8]
   1d328:	mov	r0, r3
   1d32c:	mov	r4, r3
   1d330:	mov	r6, r1
   1d334:	bl	1924 <Mat_SizeOf@plt>
   1d338:	mov	r9, r0
   1d33c:	sub	r0, r4, #1
   1d340:	cmp	r0, #12
   1d344:	bhi	1d814 <ReadCompressedUInt8Data+0x524>
   1d348:	add	r1, pc, #4
   1d34c:	ldr	r0, [r1, r0, lsl #2]
   1d350:	add	pc, r1, r0
   1d354:	.word	0x00000034
   1d358:	.word	0x0000006c
   1d35c:	.word	0x000000a4
   1d360:	.word	0x000000ec
   1d364:	.word	0x00000134
   1d368:	.word	0x0000017c
   1d36c:	.word	0x000001c4
   1d370:	.word	0x000004c0
   1d374:	.word	0x00000214
   1d378:	.word	0x000004c0
   1d37c:	.word	0x000004c0
   1d380:	.word	0x00000264
   1d384:	.word	0x000002ac
   1d388:	cmp	sl, #1
   1d38c:	blt	1d814 <ReadCompressedUInt8Data+0x524>
   1d390:	mov	r8, sp
   1d394:	mov	r4, sl
   1d398:	mov	r0, r7
   1d39c:	mov	r1, r6
   1d3a0:	mov	r2, r8
   1d3a4:	mov	r3, r9
   1d3a8:	bl	32fc <InflateData>
   1d3ac:	ldrb	r0, [sp]
   1d3b0:	subs	r4, r4, #1
   1d3b4:	strb	r0, [r5], #1
   1d3b8:	bne	1d398 <ReadCompressedUInt8Data+0xa8>
   1d3bc:	b	1d814 <ReadCompressedUInt8Data+0x524>
   1d3c0:	cmp	sl, #1
   1d3c4:	blt	1d814 <ReadCompressedUInt8Data+0x524>
   1d3c8:	mov	r8, sp
   1d3cc:	mov	r4, sl
   1d3d0:	mov	r0, r7
   1d3d4:	mov	r1, r6
   1d3d8:	mov	r2, r8
   1d3dc:	mov	r3, r9
   1d3e0:	bl	32fc <InflateData>
   1d3e4:	ldrb	r0, [sp]
   1d3e8:	subs	r4, r4, #1
   1d3ec:	strb	r0, [r5], #1
   1d3f0:	bne	1d3d0 <ReadCompressedUInt8Data+0xe0>
   1d3f4:	b	1d814 <ReadCompressedUInt8Data+0x524>
   1d3f8:	ldr	r0, [r7, #20]
   1d3fc:	cmp	r0, #0
   1d400:	beq	1d648 <ReadCompressedUInt8Data+0x358>
   1d404:	cmp	sl, #1
   1d408:	blt	1d814 <ReadCompressedUInt8Data+0x524>
   1d40c:	mov	r8, sp
   1d410:	mov	r4, sl
   1d414:	mov	r0, r7
   1d418:	mov	r1, r6
   1d41c:	mov	r2, r8
   1d420:	mov	r3, r9
   1d424:	bl	32fc <InflateData>
   1d428:	mov	r0, r8
   1d42c:	bl	1c18 <Mat_int16Swap>
   1d430:	strb	r0, [r5], #1
   1d434:	subs	r4, r4, #1
   1d438:	bne	1d414 <ReadCompressedUInt8Data+0x124>
   1d43c:	b	1d814 <ReadCompressedUInt8Data+0x524>
   1d440:	ldr	r0, [r7, #20]
   1d444:	cmp	r0, #0
   1d448:	beq	1d680 <ReadCompressedUInt8Data+0x390>
   1d44c:	cmp	sl, #1
   1d450:	blt	1d814 <ReadCompressedUInt8Data+0x524>
   1d454:	mov	r8, sp
   1d458:	mov	r4, sl
   1d45c:	mov	r0, r7
   1d460:	mov	r1, r6
   1d464:	mov	r2, r8
   1d468:	mov	r3, r9
   1d46c:	bl	32fc <InflateData>
   1d470:	mov	r0, r8
   1d474:	bl	1c2c <Mat_uint16Swap>
   1d478:	strb	r0, [r5], #1
   1d47c:	subs	r4, r4, #1
   1d480:	bne	1d45c <ReadCompressedUInt8Data+0x16c>
   1d484:	b	1d814 <ReadCompressedUInt8Data+0x524>
   1d488:	ldr	r0, [r7, #20]
   1d48c:	cmp	r0, #0
   1d490:	beq	1d6b8 <ReadCompressedUInt8Data+0x3c8>
   1d494:	cmp	sl, #1
   1d498:	blt	1d814 <ReadCompressedUInt8Data+0x524>
   1d49c:	mov	r8, sp
   1d4a0:	mov	r4, sl
   1d4a4:	mov	r0, r7
   1d4a8:	mov	r1, r6
   1d4ac:	mov	r2, r8
   1d4b0:	mov	r3, r9
   1d4b4:	bl	32fc <InflateData>
   1d4b8:	mov	r0, r8
   1d4bc:	bl	1bf0 <Mat_int32Swap>
   1d4c0:	strb	r0, [r5], #1
   1d4c4:	subs	r4, r4, #1
   1d4c8:	bne	1d4a4 <ReadCompressedUInt8Data+0x1b4>
   1d4cc:	b	1d814 <ReadCompressedUInt8Data+0x524>
   1d4d0:	ldr	r0, [r7, #20]
   1d4d4:	cmp	r0, #0
   1d4d8:	beq	1d6f0 <ReadCompressedUInt8Data+0x400>
   1d4dc:	cmp	sl, #1
   1d4e0:	blt	1d814 <ReadCompressedUInt8Data+0x524>
   1d4e4:	mov	r8, sp
   1d4e8:	mov	r4, sl
   1d4ec:	mov	r0, r7
   1d4f0:	mov	r1, r6
   1d4f4:	mov	r2, r8
   1d4f8:	mov	r3, r9
   1d4fc:	bl	32fc <InflateData>
   1d500:	mov	r0, r8
   1d504:	bl	1c04 <Mat_uint32Swap>
   1d508:	strb	r0, [r5], #1
   1d50c:	subs	r4, r4, #1
   1d510:	bne	1d4ec <ReadCompressedUInt8Data+0x1fc>
   1d514:	b	1d814 <ReadCompressedUInt8Data+0x524>
   1d518:	ldr	r0, [r7, #20]
   1d51c:	cmp	r0, #0
   1d520:	beq	1d728 <ReadCompressedUInt8Data+0x438>
   1d524:	cmp	sl, #1
   1d528:	blt	1d814 <ReadCompressedUInt8Data+0x524>
   1d52c:	mov	r8, sp
   1d530:	mov	r4, sl
   1d534:	mov	r0, r7
   1d538:	mov	r1, r6
   1d53c:	mov	r2, r8
   1d540:	mov	r3, r9
   1d544:	bl	32fc <InflateData>
   1d548:	mov	r0, r8
   1d54c:	bl	1c44 <Mat_floatSwap>
   1d550:	vcvt.u32.f32	s0, s0
   1d554:	subs	r4, r4, #1
   1d558:	vmov	r0, s0
   1d55c:	strb	r0, [r5], #1
   1d560:	bne	1d534 <ReadCompressedUInt8Data+0x244>
   1d564:	b	1d814 <ReadCompressedUInt8Data+0x524>
   1d568:	ldr	r0, [r7, #20]
   1d56c:	cmp	r0, #0
   1d570:	beq	1d768 <ReadCompressedUInt8Data+0x478>
   1d574:	cmp	sl, #1
   1d578:	blt	1d814 <ReadCompressedUInt8Data+0x524>
   1d57c:	mov	r8, sp
   1d580:	mov	r4, sl
   1d584:	mov	r0, r7
   1d588:	mov	r1, r6
   1d58c:	mov	r2, r8
   1d590:	mov	r3, r9
   1d594:	bl	32fc <InflateData>
   1d598:	mov	r0, r8
   1d59c:	bl	1c88 <Mat_doubleSwap>
   1d5a0:	vcvt.u32.f64	s0, d0
   1d5a4:	subs	r4, r4, #1
   1d5a8:	vmov	r0, s0
   1d5ac:	strb	r0, [r5], #1
   1d5b0:	bne	1d584 <ReadCompressedUInt8Data+0x294>
   1d5b4:	b	1d814 <ReadCompressedUInt8Data+0x524>
   1d5b8:	ldr	r0, [r7, #20]
   1d5bc:	cmp	r0, #0
   1d5c0:	beq	1d7a8 <ReadCompressedUInt8Data+0x4b8>
   1d5c4:	cmp	sl, #1
   1d5c8:	blt	1d814 <ReadCompressedUInt8Data+0x524>
   1d5cc:	mov	r8, sp
   1d5d0:	mov	r4, sl
   1d5d4:	mov	r0, r7
   1d5d8:	mov	r1, r6
   1d5dc:	mov	r2, r8
   1d5e0:	mov	r3, r9
   1d5e4:	bl	32fc <InflateData>
   1d5e8:	mov	r0, r8
   1d5ec:	bl	1b84 <Mat_int64Swap>
   1d5f0:	strb	r0, [r5], #1
   1d5f4:	subs	r4, r4, #1
   1d5f8:	bne	1d5d4 <ReadCompressedUInt8Data+0x2e4>
   1d5fc:	b	1d814 <ReadCompressedUInt8Data+0x524>
   1d600:	ldr	r0, [r7, #20]
   1d604:	cmp	r0, #0
   1d608:	beq	1d7e0 <ReadCompressedUInt8Data+0x4f0>
   1d60c:	cmp	sl, #1
   1d610:	blt	1d814 <ReadCompressedUInt8Data+0x524>
   1d614:	mov	r8, sp
   1d618:	mov	r4, sl
   1d61c:	mov	r0, r7
   1d620:	mov	r1, r6
   1d624:	mov	r2, r8
   1d628:	mov	r3, r9
   1d62c:	bl	32fc <InflateData>
   1d630:	mov	r0, r8
   1d634:	bl	1bd4 <Mat_uint64Swap>
   1d638:	strb	r0, [r5], #1
   1d63c:	subs	r4, r4, #1
   1d640:	bne	1d61c <ReadCompressedUInt8Data+0x32c>
   1d644:	b	1d814 <ReadCompressedUInt8Data+0x524>
   1d648:	cmp	sl, #1
   1d64c:	blt	1d814 <ReadCompressedUInt8Data+0x524>
   1d650:	mov	r8, sp
   1d654:	mov	r4, sl
   1d658:	mov	r0, r7
   1d65c:	mov	r1, r6
   1d660:	mov	r2, r8
   1d664:	mov	r3, r9
   1d668:	bl	32fc <InflateData>
   1d66c:	ldrb	r0, [sp]
   1d670:	subs	r4, r4, #1
   1d674:	strb	r0, [r5], #1
   1d678:	bne	1d658 <ReadCompressedUInt8Data+0x368>
   1d67c:	b	1d814 <ReadCompressedUInt8Data+0x524>
   1d680:	cmp	sl, #1
   1d684:	blt	1d814 <ReadCompressedUInt8Data+0x524>
   1d688:	mov	r8, sp
   1d68c:	mov	r4, sl
   1d690:	mov	r0, r7
   1d694:	mov	r1, r6
   1d698:	mov	r2, r8
   1d69c:	mov	r3, r9
   1d6a0:	bl	32fc <InflateData>
   1d6a4:	ldrb	r0, [sp]
   1d6a8:	subs	r4, r4, #1
   1d6ac:	strb	r0, [r5], #1
   1d6b0:	bne	1d690 <ReadCompressedUInt8Data+0x3a0>
   1d6b4:	b	1d814 <ReadCompressedUInt8Data+0x524>
   1d6b8:	cmp	sl, #1
   1d6bc:	blt	1d814 <ReadCompressedUInt8Data+0x524>
   1d6c0:	mov	r8, sp
   1d6c4:	mov	r4, sl
   1d6c8:	mov	r0, r7
   1d6cc:	mov	r1, r6
   1d6d0:	mov	r2, r8
   1d6d4:	mov	r3, r9
   1d6d8:	bl	32fc <InflateData>
   1d6dc:	ldr	r0, [sp]
   1d6e0:	subs	r4, r4, #1
   1d6e4:	strb	r0, [r5], #1
   1d6e8:	bne	1d6c8 <ReadCompressedUInt8Data+0x3d8>
   1d6ec:	b	1d814 <ReadCompressedUInt8Data+0x524>
   1d6f0:	cmp	sl, #1
   1d6f4:	blt	1d814 <ReadCompressedUInt8Data+0x524>
   1d6f8:	mov	r8, sp
   1d6fc:	mov	r4, sl
   1d700:	mov	r0, r7
   1d704:	mov	r1, r6
   1d708:	mov	r2, r8
   1d70c:	mov	r3, r9
   1d710:	bl	32fc <InflateData>
   1d714:	ldr	r0, [sp]
   1d718:	subs	r4, r4, #1
   1d71c:	strb	r0, [r5], #1
   1d720:	bne	1d700 <ReadCompressedUInt8Data+0x410>
   1d724:	b	1d814 <ReadCompressedUInt8Data+0x524>
   1d728:	cmp	sl, #1
   1d72c:	blt	1d814 <ReadCompressedUInt8Data+0x524>
   1d730:	mov	r8, sp
   1d734:	mov	r4, sl
   1d738:	mov	r0, r7
   1d73c:	mov	r1, r6
   1d740:	mov	r2, r8
   1d744:	mov	r3, r9
   1d748:	bl	32fc <InflateData>
   1d74c:	vldr	s0, [sp]
   1d750:	subs	r4, r4, #1
   1d754:	vcvt.u32.f32	s0, s0
   1d758:	vmov	r0, s0
   1d75c:	strb	r0, [r5], #1
   1d760:	bne	1d738 <ReadCompressedUInt8Data+0x448>
   1d764:	b	1d814 <ReadCompressedUInt8Data+0x524>
   1d768:	cmp	sl, #1
   1d76c:	blt	1d814 <ReadCompressedUInt8Data+0x524>
   1d770:	mov	r8, sp
   1d774:	mov	r4, sl
   1d778:	mov	r0, r7
   1d77c:	mov	r1, r6
   1d780:	mov	r2, r8
   1d784:	mov	r3, r9
   1d788:	bl	32fc <InflateData>
   1d78c:	vldr	d16, [sp]
   1d790:	subs	r4, r4, #1
   1d794:	vcvt.u32.f64	s0, d16
   1d798:	vmov	r0, s0
   1d79c:	strb	r0, [r5], #1
   1d7a0:	bne	1d778 <ReadCompressedUInt8Data+0x488>
   1d7a4:	b	1d814 <ReadCompressedUInt8Data+0x524>
   1d7a8:	cmp	sl, #1
   1d7ac:	blt	1d814 <ReadCompressedUInt8Data+0x524>
   1d7b0:	mov	r8, sp
   1d7b4:	mov	r4, sl
   1d7b8:	mov	r0, r7
   1d7bc:	mov	r1, r6
   1d7c0:	mov	r2, r8
   1d7c4:	mov	r3, r9
   1d7c8:	bl	32fc <InflateData>
   1d7cc:	ldrb	r0, [sp]
   1d7d0:	subs	r4, r4, #1
   1d7d4:	strb	r0, [r5], #1
   1d7d8:	bne	1d7b8 <ReadCompressedUInt8Data+0x4c8>
   1d7dc:	b	1d814 <ReadCompressedUInt8Data+0x524>
   1d7e0:	cmp	sl, #1
   1d7e4:	blt	1d814 <ReadCompressedUInt8Data+0x524>
   1d7e8:	mov	r8, sp
   1d7ec:	mov	r4, sl
   1d7f0:	mov	r0, r7
   1d7f4:	mov	r1, r6
   1d7f8:	mov	r2, r8
   1d7fc:	mov	r3, r9
   1d800:	bl	32fc <InflateData>
   1d804:	ldrb	r0, [sp]
   1d808:	subs	r4, r4, #1
   1d80c:	strb	r0, [r5], #1
   1d810:	bne	1d7f0 <ReadCompressedUInt8Data+0x500>
   1d814:	mul	r0, r9, sl
   1d818:	sub	sp, fp, #28
   1d81c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001d820 <ReadCompressedCharData>:
   1d820:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d824:	add	fp, sp, #24
   1d828:	cmp	r0, #0
   1d82c:	mov	r9, #0
   1d830:	movne	r5, r2
   1d834:	cmpne	r2, #0
   1d838:	bne	1d844 <ReadCompressedCharData+0x24>
   1d83c:	mov	r0, r9
   1d840:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d844:	mov	r6, r0
   1d848:	ldr	r0, [r0]
   1d84c:	cmp	r0, #0
   1d850:	beq	1d83c <ReadCompressedCharData+0x1c>
   1d854:	ldr	r4, [fp, #8]
   1d858:	mov	r0, r3
   1d85c:	mov	r7, r3
   1d860:	mov	r8, r1
   1d864:	bl	1924 <Mat_SizeOf@plt>
   1d868:	mov	r9, r0
   1d86c:	sub	r0, r7, #2
   1d870:	cmp	r0, #15
   1d874:	bhi	1d928 <ReadCompressedCharData+0x108>
   1d878:	add	r1, pc, #4
   1d87c:	ldr	r0, [r1, r0, lsl #2]
   1d880:	add	pc, r1, r0
   1d884:	.word	0x00000040
   1d888:	.word	0x000000a4
   1d88c:	.word	0x00000060
   1d890:	.word	0x000000a4
   1d894:	.word	0x000000a4
   1d898:	.word	0x000000a4
   1d89c:	.word	0x000000a4
   1d8a0:	.word	0x000000a4
   1d8a4:	.word	0x000000a4
   1d8a8:	.word	0x000000a4
   1d8ac:	.word	0x000000a4
   1d8b0:	.word	0x000000a4
   1d8b4:	.word	0x000000a4
   1d8b8:	.word	0x000000a4
   1d8bc:	.word	0x00000040
   1d8c0:	.word	0x00000060
   1d8c4:	mul	r9, r9, r4
   1d8c8:	mov	r0, r6
   1d8cc:	mov	r1, r8
   1d8d0:	mov	r2, r5
   1d8d4:	mov	r3, r9
   1d8d8:	bl	32fc <InflateData>
   1d8dc:	mov	r0, r9
   1d8e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d8e4:	mul	r9, r9, r4
   1d8e8:	mov	r0, r6
   1d8ec:	mov	r1, r8
   1d8f0:	mov	r2, r5
   1d8f4:	mov	r3, r9
   1d8f8:	bl	32fc <InflateData>
   1d8fc:	ldr	r0, [r6, #20]
   1d900:	cmp	r0, #0
   1d904:	beq	1d83c <ReadCompressedCharData+0x1c>
   1d908:	cmp	r4, #1
   1d90c:	blt	1d83c <ReadCompressedCharData+0x1c>
   1d910:	mov	r0, r5
   1d914:	bl	1c2c <Mat_uint16Swap>
   1d918:	add	r5, r5, #2
   1d91c:	subs	r4, r4, #1
   1d920:	bne	1d910 <ReadCompressedCharData+0xf0>
   1d924:	b	1d83c <ReadCompressedCharData+0x1c>
   1d928:	ldr	r0, [pc, #20]	; 1d944 <ReadCompressedCharData+0x124>
   1d92c:	mov	r1, r7
   1d930:	add	r0, pc, r0
   1d934:	bl	1810 <Mat_Warning@plt>
   1d938:	mul	r9, r9, r4
   1d93c:	mov	r0, r9
   1d940:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d944:	.word	0x00041e1c

0001d948 <ReadCharData>:
   1d948:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1d94c:	add	fp, sp, #24
   1d950:	sub	sp, sp, #8
   1d954:	cmp	r0, #0
   1d958:	mov	r4, #0
   1d95c:	movne	r6, r1
   1d960:	cmpne	r1, #0
   1d964:	bne	1d974 <ReadCharData+0x2c>
   1d968:	mov	r0, r4
   1d96c:	sub	sp, fp, #24
   1d970:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1d974:	mov	r7, r0
   1d978:	ldr	r0, [r0]
   1d97c:	cmp	r0, #0
   1d980:	beq	1d968 <ReadCharData+0x20>
   1d984:	mov	r0, r2
   1d988:	mov	r5, r3
   1d98c:	mov	r9, r2
   1d990:	bl	1924 <Mat_SizeOf@plt>
   1d994:	mov	r8, r0
   1d998:	sub	r0, r9, #2
   1d99c:	cmp	r0, #15
   1d9a0:	bhi	1da58 <ReadCharData+0x110>
   1d9a4:	add	r1, pc, #4
   1d9a8:	ldr	r0, [r1, r0, lsl #2]
   1d9ac:	add	pc, r1, r0
   1d9b0:	.word	0x00000040
   1d9b4:	.word	0x000000a8
   1d9b8:	.word	0x0000005c
   1d9bc:	.word	0x000000a8
   1d9c0:	.word	0x000000a8
   1d9c4:	.word	0x000000a8
   1d9c8:	.word	0x000000a8
   1d9cc:	.word	0x000000a8
   1d9d0:	.word	0x000000a8
   1d9d4:	.word	0x000000a8
   1d9d8:	.word	0x000000a8
   1d9dc:	.word	0x000000a8
   1d9e0:	.word	0x000000a8
   1d9e4:	.word	0x000000a8
   1d9e8:	.word	0x00000040
   1d9ec:	.word	0x0000005c
   1d9f0:	ldr	r3, [r7]
   1d9f4:	mov	r0, r6
   1d9f8:	mov	r1, r8
   1d9fc:	mov	r2, r5
   1da00:	sub	sp, fp, #24
   1da04:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1da08:	b	18b8 <fread@plt>
   1da0c:	ldr	r0, [r7, #20]
   1da10:	mov	r4, #0
   1da14:	cmp	r0, #0
   1da18:	beq	1da74 <ReadCharData+0x12c>
   1da1c:	cmp	r5, #1
   1da20:	blt	1d968 <ReadCharData+0x20>
   1da24:	add	r9, sp, #6
   1da28:	ldr	r3, [r7]
   1da2c:	mov	r0, r9
   1da30:	mov	r1, r8
   1da34:	mov	r2, #1
   1da38:	bl	18b8 <fread@plt>
   1da3c:	add	r4, r0, r4
   1da40:	mov	r0, r9
   1da44:	bl	1c2c <Mat_uint16Swap>
   1da48:	strb	r0, [r6], #1
   1da4c:	subs	r5, r5, #1
   1da50:	bne	1da28 <ReadCharData+0xe0>
   1da54:	b	1d968 <ReadCharData+0x20>
   1da58:	ldr	r0, [pc, #76]	; 1daac <ReadCharData+0x164>
   1da5c:	mov	r1, r9
   1da60:	add	r0, pc, r0
   1da64:	bl	1810 <Mat_Warning@plt>
   1da68:	mov	r0, r4
   1da6c:	sub	sp, fp, #24
   1da70:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1da74:	cmp	r5, #1
   1da78:	blt	1d968 <ReadCharData+0x20>
   1da7c:	add	r9, sp, #6
   1da80:	ldr	r3, [r7]
   1da84:	mov	r0, r9
   1da88:	mov	r1, r8
   1da8c:	mov	r2, #1
   1da90:	bl	18b8 <fread@plt>
   1da94:	add	r4, r0, r4
   1da98:	ldrb	r0, [sp, #6]
   1da9c:	subs	r5, r5, #1
   1daa0:	strb	r0, [r6], #1
   1daa4:	bne	1da80 <ReadCharData+0x138>
   1daa8:	b	1d968 <ReadCharData+0x20>
   1daac:	.word	0x00041d37

0001dab0 <ReadDataSlabN>:
   1dab0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dab4:	add	fp, sp, #28
   1dab8:	sub	sp, sp, #164	; 0xa4
   1dabc:	sub	r4, fp, #72	; 0x48
   1dac0:	vmov.i32	q8, #0	; 0x00000000
   1dac4:	mov	r6, #36	; 0x24
   1dac8:	mov	r8, r2
   1dacc:	mov	r2, #0
   1dad0:	add	r5, sp, #80	; 0x50
   1dad4:	mov	r7, r4
   1dad8:	str	r2, [fp, #-40]	; 0xffffffd8
   1dadc:	str	r2, [sp, #112]	; 0x70
   1dae0:	str	r2, [sp, #72]	; 0x48
   1dae4:	vst1.64	{d16-d17}, [r7], r6
   1dae8:	str	r2, [r7]
   1daec:	add	r7, r4, #16
   1daf0:	add	r4, sp, #40	; 0x28
   1daf4:	vst1.64	{d16-d17}, [r7]
   1daf8:	add	r7, r5, #16
   1dafc:	vst1.64	{d16-d17}, [r7]
   1db00:	mov	r7, r5
   1db04:	vst1.64	{d16-d17}, [r7], r6
   1db08:	str	r2, [r7]
   1db0c:	add	r7, r4, #16
   1db10:	vst1.64	{d16-d17}, [r7]
   1db14:	mov	r7, r4
   1db18:	vst1.64	{d16-d17}, [r7], r6
   1db1c:	str	r2, [r7]
   1db20:	mov	r7, r0
   1db24:	mvn	r0, #0
   1db28:	cmp	r7, #0
   1db2c:	cmpne	r1, #0
   1db30:	bne	1db3c <ReadDataSlabN+0x8c>
   1db34:	sub	sp, fp, #28
   1db38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db3c:	ldr	r2, [fp, #8]
   1db40:	cmp	r2, #10
   1db44:	bgt	1db34 <ReadDataSlabN+0x84>
   1db48:	ldr	r2, [fp, #24]
   1db4c:	cmp	r2, #0
   1db50:	ldrne	r2, [fp, #20]
   1db54:	cmpne	r2, #0
   1db58:	beq	1db34 <ReadDataSlabN+0x84>
   1db5c:	ldr	r2, [fp, #16]
   1db60:	cmp	r2, #0
   1db64:	addne	r2, sp, #24
   1db68:	stmne	r2, {r1, r3, r7}
   1db6c:	ldrne	r1, [r7]
   1db70:	cmpne	r1, #0
   1db74:	beq	1db34 <ReadDataSlabN+0x84>
   1db78:	ldr	r0, [sp, #28]
   1db7c:	bl	1924 <Mat_SizeOf@plt>
   1db80:	sub	r2, r8, #6
   1db84:	cmp	r2, #9
   1db88:	bhi	21a6c <ReadDataSlabN+0x3fbc>
   1db8c:	add	r1, pc, #16
   1db90:	ldr	ip, [fp, #12]
   1db94:	add	r6, sp, #40	; 0x28
   1db98:	str	r0, [sp, #36]	; 0x24
   1db9c:	ldr	r2, [r1, r2, lsl #2]
   1dba0:	add	pc, r1, r2
   1dba4:	.word	0x00000028
   1dba8:	.word	0x000003f0
   1dbac:	.word	0x00000584
   1dbb0:	.word	0x00000718
   1dbb4:	.word	0x000008ac
   1dbb8:	.word	0x00000a40
   1dbbc:	.word	0x00000bd4
   1dbc0:	.word	0x00000d68
   1dbc4:	.word	0x00000efc
   1dbc8:	.word	0x00001090
   1dbcc:	ldr	r0, [fp, #20]
   1dbd0:	ldr	sl, [fp, #24]
   1dbd4:	mov	r8, #0
   1dbd8:	ldr	r0, [r0]
   1dbdc:	sub	r0, r0, #1
   1dbe0:	str	r0, [fp, #-72]	; 0xffffffb8
   1dbe4:	ldr	r5, [ip]
   1dbe8:	str	r5, [sp, #40]	; 0x28
   1dbec:	ldr	r0, [sl]
   1dbf0:	str	r0, [sp, #12]
   1dbf4:	ldr	r0, [fp, #8]
   1dbf8:	cmp	r0, #2
   1dbfc:	blt	1dd5c <ReadDataSlabN+0x2ac>
   1dc00:	mov	r1, #0
   1dc04:	sub	r0, ip, #4
   1dc08:	sub	lr, ip, #12
   1dc0c:	mov	r3, #1
   1dc10:	mvn	r9, #15
   1dc14:	mov	r4, r5
   1dc18:	mov	r8, #0
   1dc1c:	sub	r2, fp, #72	; 0x48
   1dc20:	str	r1, [sp, #20]
   1dc24:	ldr	r1, [fp, #20]
   1dc28:	mov	sl, r5
   1dc2c:	ldr	r5, [sp, #20]
   1dc30:	ldr	r1, [r1, r3, lsl #2]
   1dc34:	str	r4, [r6, r3, lsl #2]
   1dc38:	add	r5, r5, #1
   1dc3c:	cmp	r5, #4
   1dc40:	str	r5, [sp, #20]
   1dc44:	sub	r7, r1, #1
   1dc48:	str	r7, [r2, r3, lsl #2]
   1dc4c:	ldr	r1, [ip, r3, lsl #2]
   1dc50:	str	r1, [sp, #16]
   1dc54:	bcs	1dc60 <ReadDataSlabN+0x1b0>
   1dc58:	mov	r2, r3
   1dc5c:	b	1dcf8 <ReadDataSlabN+0x248>
   1dc60:	vmov.i32	q9, #1	; 0x00000001
   1dc64:	vmov.i32	q10, #1	; 0x00000001
   1dc68:	vmov.i32	q8, #1	; 0x00000001
   1dc6c:	bic	r6, r5, #3
   1dc70:	vmov.32	d23[1], r1
   1dc74:	bic	ip, r3, #3
   1dc78:	mov	r1, lr
   1dc7c:	vmov.32	d18[0], r4
   1dc80:	vmov.32	d20[0], r7
   1dc84:	sub	r2, r3, r6
   1dc88:	vorr	d16, d18, d18
   1dc8c:	vmov.i32	q9, #1	; 0x00000001
   1dc90:	vorr	d18, d20, d20
   1dc94:	vld1.32	{d20-d21}, [r1], r9
   1dc98:	subs	ip, ip, #4
   1dc9c:	vrev64.32	q12, q10
   1dca0:	vext.8	q12, q12, q12, #8
   1dca4:	vext.8	q11, q11, q12, #12
   1dca8:	vmul.i32	q9, q9, q12
   1dcac:	vmul.i32	q8, q11, q8
   1dcb0:	vorr	q11, q12, q12
   1dcb4:	bne	1dc94 <ReadDataSlabN+0x1e4>
   1dcb8:	vext.8	q11, q9, q8, #8
   1dcbc:	vext.8	q12, q8, q8, #8
   1dcc0:	cmp	r5, r6
   1dcc4:	vmul.i32	q0, q9, q11
   1dcc8:	vmul.i32	q1, q8, q12
   1dccc:	vmul.i32	q8, q0, d0[1]
   1dcd0:	vmul.i32	q9, q1, d2[1]
   1dcd4:	vmov.32	r7, d16[0]
   1dcd8:	vmov.32	r4, d18[0]
   1dcdc:	bne	1dcec <ReadDataSlabN+0x23c>
   1dce0:	ldr	ip, [fp, #12]
   1dce4:	add	r6, sp, #40	; 0x28
   1dce8:	b	1dd0c <ReadDataSlabN+0x25c>
   1dcec:	ldr	ip, [fp, #12]
   1dcf0:	vmov.32	r1, d20[0]
   1dcf4:	add	r6, sp, #40	; 0x28
   1dcf8:	mul	r4, r1, r4
   1dcfc:	ldr	r1, [r0, r2, lsl #2]
   1dd00:	subs	r2, r2, #1
   1dd04:	mul	r7, r7, r1
   1dd08:	bne	1dcf8 <ReadDataSlabN+0x248>
   1dd0c:	ldr	r1, [fp, #16]
   1dd10:	sub	r2, fp, #72	; 0x48
   1dd14:	str	r4, [r6, r3, lsl #2]
   1dd18:	mov	r5, r6
   1dd1c:	ldr	r6, [sp, #12]
   1dd20:	add	lr, lr, #4
   1dd24:	str	r7, [r2, r3, lsl #2]
   1dd28:	ldr	r1, [r1, r3, lsl #2]
   1dd2c:	mla	r8, r1, sl, r8
   1dd30:	ldr	sl, [fp, #24]
   1dd34:	ldr	r1, [sl, r3, lsl #2]
   1dd38:	add	r3, r3, #1
   1dd3c:	mul	r6, r1, r6
   1dd40:	ldr	r1, [fp, #8]
   1dd44:	str	r6, [sp, #12]
   1dd48:	mov	r6, r5
   1dd4c:	mov	r5, r4
   1dd50:	ldr	r4, [sp, #16]
   1dd54:	cmp	r3, r1
   1dd58:	bne	1dc24 <ReadDataSlabN+0x174>
   1dd5c:	ldr	r0, [sp, #36]	; 0x24
   1dd60:	mov	r2, #1
   1dd64:	mul	r1, r8, r0
   1dd68:	ldr	r0, [sp, #32]
   1dd6c:	ldr	r0, [r0]
   1dd70:	bl	1a2c <fseek@plt>
   1dd74:	ldr	r0, [fp, #20]
   1dd78:	ldr	r0, [r0]
   1dd7c:	cmp	r0, #1
   1dd80:	bne	1edc8 <ReadDataSlabN+0x1318>
   1dd84:	ldr	r0, [sp, #12]
   1dd88:	sub	r1, fp, #72	; 0x48
   1dd8c:	add	r2, sp, #80	; 0x50
   1dd90:	cmp	r0, #1
   1dd94:	blt	21a6c <ReadDataSlabN+0x3fbc>
   1dd98:	ldr	r0, [fp, #16]
   1dd9c:	add	r7, r0, #4
   1dda0:	add	r0, sl, #4
   1dda4:	orr	sl, r2, #4
   1dda8:	str	r0, [sp, #20]
   1ddac:	orr	r0, r1, #4
   1ddb0:	str	r7, [sp, #16]
   1ddb4:	str	r0, [sp, #4]
   1ddb8:	mov	r0, #0
   1ddbc:	str	r0, [sp, #8]
   1ddc0:	ldr	r5, [fp, #16]
   1ddc4:	ldr	r0, [r5]
   1ddc8:	cmp	r0, #0
   1ddcc:	beq	1ddfc <ReadDataSlabN+0x34c>
   1ddd0:	ldr	r7, [sp, #36]	; 0x24
   1ddd4:	ldr	r4, [sp, #32]
   1ddd8:	mov	r2, #1
   1dddc:	mul	r1, r0, r7
   1dde0:	ldr	r0, [r4]
   1dde4:	bl	1a2c <fseek@plt>
   1dde8:	ldr	r0, [r5]
   1ddec:	ldr	r2, [sp, #28]
   1ddf0:	add	r8, r0, r8
   1ddf4:	ldr	r0, [sp, #24]
   1ddf8:	b	1de04 <ReadDataSlabN+0x354>
   1ddfc:	add	r7, sp, #24
   1de00:	ldm	r7, {r0, r2, r4, r7}
   1de04:	ldr	r1, [sp, #8]
   1de08:	add	r1, r0, r1, lsl #3
   1de0c:	ldr	r0, [fp, #24]
   1de10:	ldr	r3, [r0]
   1de14:	mov	r9, r0
   1de18:	mov	r0, r4
   1de1c:	bl	38dc <ReadDoubleData>
   1de20:	ldr	r0, [fp, #12]
   1de24:	ldr	r5, [r5]
   1de28:	ldr	r1, [r9]
   1de2c:	mov	r2, #1
   1de30:	ldr	r6, [r0]
   1de34:	sub	r0, r6, r5
   1de38:	sub	r0, r0, r1
   1de3c:	mul	r1, r0, r7
   1de40:	ldr	r0, [r4]
   1de44:	bl	1a2c <fseek@plt>
   1de48:	add	r0, r6, r8
   1de4c:	sub	r8, r0, r5
   1de50:	ldr	r0, [fp, #8]
   1de54:	cmp	r0, #2
   1de58:	blt	1df6c <ReadDataSlabN+0x4bc>
   1de5c:	ldr	r7, [sp, #16]
   1de60:	mov	r0, #0
   1de64:	add	r3, sp, #40	; 0x28
   1de68:	mov	r5, r0
   1de6c:	ldr	r0, [sl, r0, lsl #2]
   1de70:	ldr	r1, [sp, #20]
   1de74:	add	r0, r0, #1
   1de78:	str	r0, [sl, r5, lsl #2]
   1de7c:	ldr	r1, [r1, r5, lsl #2]
   1de80:	sdiv	r2, r0, r1
   1de84:	mls	r0, r2, r1, r0
   1de88:	cmp	r0, #0
   1de8c:	bne	1df48 <ReadDataSlabN+0x498>
   1de90:	mov	r0, #0
   1de94:	str	r0, [sl, r5, lsl #2]
   1de98:	add	r0, r3, r5, lsl #2
   1de9c:	ldr	r6, [r0, #4]
   1dea0:	sdiv	r0, r8, r6
   1dea4:	mls	r9, r0, r6, r8
   1dea8:	cmp	r9, #0
   1deac:	beq	1def4 <ReadDataSlabN+0x444>
   1deb0:	ldr	r4, [r3, r5, lsl #2]
   1deb4:	ldr	r0, [r7, r5, lsl #2]
   1deb8:	sub	r1, r6, r9
   1debc:	mov	r2, #1
   1dec0:	mla	r0, r0, r4, r1
   1dec4:	ldr	r1, [sp, #36]	; 0x24
   1dec8:	mul	r1, r0, r1
   1decc:	ldr	r0, [sp, #32]
   1ded0:	ldr	r0, [r0]
   1ded4:	bl	1a2c <fseek@plt>
   1ded8:	ldr	r7, [sp, #16]
   1dedc:	add	r1, r6, r8
   1dee0:	add	r3, sp, #40	; 0x28
   1dee4:	sub	r1, r1, r9
   1dee8:	ldr	r0, [r7, r5, lsl #2]
   1deec:	mla	r8, r0, r4, r1
   1def0:	b	1df30 <ReadDataSlabN+0x480>
   1def4:	ldr	r0, [r7, r5, lsl #2]
   1def8:	cmp	r0, #0
   1defc:	beq	1df30 <ReadDataSlabN+0x480>
   1df00:	ldr	r1, [sp, #36]	; 0x24
   1df04:	ldr	r4, [r3, r5, lsl #2]
   1df08:	mov	r2, #1
   1df0c:	mul	r0, r0, r1
   1df10:	mul	r1, r0, r4
   1df14:	ldr	r0, [sp, #32]
   1df18:	ldr	r0, [r0]
   1df1c:	bl	1a2c <fseek@plt>
   1df20:	ldr	r7, [sp, #16]
   1df24:	add	r3, sp, #40	; 0x28
   1df28:	ldr	r0, [r7, r5, lsl #2]
   1df2c:	mla	r8, r0, r4, r8
   1df30:	ldr	r2, [fp, #8]
   1df34:	add	r1, r5, #2
   1df38:	add	r0, r5, #1
   1df3c:	cmp	r1, r2
   1df40:	blt	1de68 <ReadDataSlabN+0x3b8>
   1df44:	b	1df6c <ReadDataSlabN+0x4bc>
   1df48:	ldr	r0, [sp, #4]
   1df4c:	mov	r2, #1
   1df50:	ldr	r4, [r0, r5, lsl #2]
   1df54:	ldr	r0, [sp, #36]	; 0x24
   1df58:	mul	r1, r4, r0
   1df5c:	ldr	r0, [sp, #32]
   1df60:	ldr	r0, [r0]
   1df64:	bl	1a2c <fseek@plt>
   1df68:	add	r8, r4, r8
   1df6c:	ldr	r0, [fp, #24]
   1df70:	ldr	r2, [sp, #8]
   1df74:	ldr	r1, [sp, #12]
   1df78:	ldr	r0, [r0]
   1df7c:	add	r2, r0, r2
   1df80:	mov	r0, #0
   1df84:	cmp	r2, r1
   1df88:	str	r2, [sp, #8]
   1df8c:	blt	1ddc0 <ReadDataSlabN+0x310>
   1df90:	b	1db34 <ReadDataSlabN+0x84>
   1df94:	ldr	r0, [fp, #20]
   1df98:	mov	sl, #0
   1df9c:	ldr	r0, [r0]
   1dfa0:	sub	r0, r0, #1
   1dfa4:	str	r0, [fp, #-72]	; 0xffffffb8
   1dfa8:	ldr	r0, [fp, #24]
   1dfac:	ldr	r1, [ip]
   1dfb0:	str	r1, [sp, #40]	; 0x28
   1dfb4:	ldr	r0, [r0]
   1dfb8:	str	r0, [sp, #12]
   1dfbc:	ldr	r0, [fp, #8]
   1dfc0:	cmp	r0, #2
   1dfc4:	blt	1f050 <ReadDataSlabN+0x15a0>
   1dfc8:	sub	r0, ip, #4
   1dfcc:	sub	r9, ip, #12
   1dfd0:	mov	r3, #1
   1dfd4:	mov	r5, #0
   1dfd8:	mvn	lr, #15
   1dfdc:	mov	r7, r1
   1dfe0:	mov	sl, #0
   1dfe4:	sub	r4, fp, #72	; 0x48
   1dfe8:	str	r1, [sp, #16]
   1dfec:	ldr	r1, [fp, #20]
   1dff0:	add	r5, r5, #1
   1dff4:	cmp	r5, #4
   1dff8:	str	r5, [sp, #20]
   1dffc:	ldr	r1, [r1, r3, lsl #2]
   1e000:	str	r7, [r6, r3, lsl #2]
   1e004:	sub	r1, r1, #1
   1e008:	str	r1, [r4, r3, lsl #2]
   1e00c:	ldr	r4, [ip, r3, lsl #2]
   1e010:	bcs	1e024 <ReadDataSlabN+0x574>
   1e014:	mov	r8, r4
   1e018:	mov	r5, r4
   1e01c:	mov	r2, r3
   1e020:	b	1e0c0 <ReadDataSlabN+0x610>
   1e024:	vmov.i32	q9, #1	; 0x00000001
   1e028:	vmov.i32	q10, #1	; 0x00000001
   1e02c:	vmov.i32	q8, #1	; 0x00000001
   1e030:	bic	r6, r5, #3
   1e034:	bic	ip, r3, #3
   1e038:	vmov.32	d23[1], r4
   1e03c:	vmov.32	d18[0], r7
   1e040:	vmov.32	d20[0], r1
   1e044:	sub	r2, r3, r6
   1e048:	mov	r1, r9
   1e04c:	vorr	d16, d18, d18
   1e050:	vmov.i32	q9, #1	; 0x00000001
   1e054:	vorr	d18, d20, d20
   1e058:	vld1.32	{d20-d21}, [r1], lr
   1e05c:	subs	ip, ip, #4
   1e060:	vrev64.32	q12, q10
   1e064:	vext.8	q12, q12, q12, #8
   1e068:	vext.8	q11, q11, q12, #12
   1e06c:	vmul.i32	q9, q9, q12
   1e070:	vmul.i32	q8, q11, q8
   1e074:	vorr	q11, q12, q12
   1e078:	bne	1e058 <ReadDataSlabN+0x5a8>
   1e07c:	vext.8	q11, q9, q8, #8
   1e080:	vext.8	q12, q8, q8, #8
   1e084:	mov	r8, r4
   1e088:	cmp	r5, r6
   1e08c:	vmul.i32	q0, q9, q11
   1e090:	vmul.i32	q1, q8, q12
   1e094:	vmul.i32	q8, q0, d0[1]
   1e098:	vmul.i32	q9, q1, d2[1]
   1e09c:	vmov.32	r1, d16[0]
   1e0a0:	vmov.32	r7, d18[0]
   1e0a4:	bne	1e0b4 <ReadDataSlabN+0x604>
   1e0a8:	ldr	ip, [fp, #12]
   1e0ac:	add	r6, sp, #40	; 0x28
   1e0b0:	b	1e0d4 <ReadDataSlabN+0x624>
   1e0b4:	ldr	ip, [fp, #12]
   1e0b8:	vmov.32	r5, d20[0]
   1e0bc:	add	r6, sp, #40	; 0x28
   1e0c0:	mul	r7, r5, r7
   1e0c4:	ldr	r5, [r0, r2, lsl #2]
   1e0c8:	subs	r2, r2, #1
   1e0cc:	mul	r1, r1, r5
   1e0d0:	bne	1e0c0 <ReadDataSlabN+0x610>
   1e0d4:	sub	r4, fp, #72	; 0x48
   1e0d8:	str	r7, [r6, r3, lsl #2]
   1e0dc:	ldr	r2, [sp, #16]
   1e0e0:	ldr	r5, [sp, #20]
   1e0e4:	add	r9, r9, #4
   1e0e8:	str	r1, [r4, r3, lsl #2]
   1e0ec:	ldr	r1, [fp, #16]
   1e0f0:	ldr	r1, [r1, r3, lsl #2]
   1e0f4:	mla	sl, r1, r2, sl
   1e0f8:	ldr	r1, [fp, #24]
   1e0fc:	ldr	r2, [sp, #12]
   1e100:	ldr	r1, [r1, r3, lsl #2]
   1e104:	add	r3, r3, #1
   1e108:	mul	r2, r1, r2
   1e10c:	ldr	r1, [fp, #8]
   1e110:	str	r2, [sp, #12]
   1e114:	cmp	r3, r1
   1e118:	mov	r1, r7
   1e11c:	mov	r7, r8
   1e120:	bne	1dfe8 <ReadDataSlabN+0x538>
   1e124:	b	1f054 <ReadDataSlabN+0x15a4>
   1e128:	ldr	r0, [fp, #20]
   1e12c:	mov	sl, #0
   1e130:	ldr	r0, [r0]
   1e134:	sub	r0, r0, #1
   1e138:	str	r0, [fp, #-72]	; 0xffffffb8
   1e13c:	ldr	r0, [fp, #24]
   1e140:	ldr	r1, [ip]
   1e144:	str	r1, [sp, #40]	; 0x28
   1e148:	ldr	r0, [r0]
   1e14c:	str	r0, [sp, #12]
   1e150:	ldr	r0, [fp, #8]
   1e154:	cmp	r0, #2
   1e158:	blt	1f280 <ReadDataSlabN+0x17d0>
   1e15c:	sub	r0, ip, #4
   1e160:	sub	r9, ip, #12
   1e164:	mov	r3, #1
   1e168:	mov	r5, #0
   1e16c:	mvn	lr, #15
   1e170:	mov	r7, r1
   1e174:	mov	sl, #0
   1e178:	sub	r4, fp, #72	; 0x48
   1e17c:	str	r1, [sp, #16]
   1e180:	ldr	r1, [fp, #20]
   1e184:	add	r5, r5, #1
   1e188:	cmp	r5, #4
   1e18c:	str	r5, [sp, #20]
   1e190:	ldr	r1, [r1, r3, lsl #2]
   1e194:	str	r7, [r6, r3, lsl #2]
   1e198:	sub	r1, r1, #1
   1e19c:	str	r1, [r4, r3, lsl #2]
   1e1a0:	ldr	r4, [ip, r3, lsl #2]
   1e1a4:	bcs	1e1b8 <ReadDataSlabN+0x708>
   1e1a8:	mov	r8, r4
   1e1ac:	mov	r5, r4
   1e1b0:	mov	r2, r3
   1e1b4:	b	1e254 <ReadDataSlabN+0x7a4>
   1e1b8:	vmov.i32	q9, #1	; 0x00000001
   1e1bc:	vmov.i32	q10, #1	; 0x00000001
   1e1c0:	vmov.i32	q8, #1	; 0x00000001
   1e1c4:	bic	r6, r5, #3
   1e1c8:	bic	ip, r3, #3
   1e1cc:	vmov.32	d23[1], r4
   1e1d0:	vmov.32	d18[0], r7
   1e1d4:	vmov.32	d20[0], r1
   1e1d8:	sub	r2, r3, r6
   1e1dc:	mov	r1, r9
   1e1e0:	vorr	d16, d18, d18
   1e1e4:	vmov.i32	q9, #1	; 0x00000001
   1e1e8:	vorr	d18, d20, d20
   1e1ec:	vld1.32	{d20-d21}, [r1], lr
   1e1f0:	subs	ip, ip, #4
   1e1f4:	vrev64.32	q12, q10
   1e1f8:	vext.8	q12, q12, q12, #8
   1e1fc:	vext.8	q11, q11, q12, #12
   1e200:	vmul.i32	q9, q9, q12
   1e204:	vmul.i32	q8, q11, q8
   1e208:	vorr	q11, q12, q12
   1e20c:	bne	1e1ec <ReadDataSlabN+0x73c>
   1e210:	vext.8	q11, q9, q8, #8
   1e214:	vext.8	q12, q8, q8, #8
   1e218:	mov	r8, r4
   1e21c:	cmp	r5, r6
   1e220:	vmul.i32	q0, q9, q11
   1e224:	vmul.i32	q1, q8, q12
   1e228:	vmul.i32	q8, q0, d0[1]
   1e22c:	vmul.i32	q9, q1, d2[1]
   1e230:	vmov.32	r1, d16[0]
   1e234:	vmov.32	r7, d18[0]
   1e238:	bne	1e248 <ReadDataSlabN+0x798>
   1e23c:	ldr	ip, [fp, #12]
   1e240:	add	r6, sp, #40	; 0x28
   1e244:	b	1e268 <ReadDataSlabN+0x7b8>
   1e248:	ldr	ip, [fp, #12]
   1e24c:	vmov.32	r5, d20[0]
   1e250:	add	r6, sp, #40	; 0x28
   1e254:	mul	r7, r5, r7
   1e258:	ldr	r5, [r0, r2, lsl #2]
   1e25c:	subs	r2, r2, #1
   1e260:	mul	r1, r1, r5
   1e264:	bne	1e254 <ReadDataSlabN+0x7a4>
   1e268:	sub	r4, fp, #72	; 0x48
   1e26c:	str	r7, [r6, r3, lsl #2]
   1e270:	ldr	r2, [sp, #16]
   1e274:	ldr	r5, [sp, #20]
   1e278:	add	r9, r9, #4
   1e27c:	str	r1, [r4, r3, lsl #2]
   1e280:	ldr	r1, [fp, #16]
   1e284:	ldr	r1, [r1, r3, lsl #2]
   1e288:	mla	sl, r1, r2, sl
   1e28c:	ldr	r1, [fp, #24]
   1e290:	ldr	r2, [sp, #12]
   1e294:	ldr	r1, [r1, r3, lsl #2]
   1e298:	add	r3, r3, #1
   1e29c:	mul	r2, r1, r2
   1e2a0:	ldr	r1, [fp, #8]
   1e2a4:	str	r2, [sp, #12]
   1e2a8:	cmp	r3, r1
   1e2ac:	mov	r1, r7
   1e2b0:	mov	r7, r8
   1e2b4:	bne	1e17c <ReadDataSlabN+0x6cc>
   1e2b8:	b	1f284 <ReadDataSlabN+0x17d4>
   1e2bc:	ldr	r0, [fp, #20]
   1e2c0:	mov	sl, #0
   1e2c4:	ldr	r0, [r0]
   1e2c8:	sub	r0, r0, #1
   1e2cc:	str	r0, [fp, #-72]	; 0xffffffb8
   1e2d0:	ldr	r0, [fp, #24]
   1e2d4:	ldr	r1, [ip]
   1e2d8:	str	r1, [sp, #40]	; 0x28
   1e2dc:	ldr	r0, [r0]
   1e2e0:	str	r0, [sp, #12]
   1e2e4:	ldr	r0, [fp, #8]
   1e2e8:	cmp	r0, #2
   1e2ec:	blt	1f4a8 <ReadDataSlabN+0x19f8>
   1e2f0:	sub	r0, ip, #4
   1e2f4:	sub	r9, ip, #12
   1e2f8:	mov	r3, #1
   1e2fc:	mov	r5, #0
   1e300:	mvn	lr, #15
   1e304:	mov	r7, r1
   1e308:	mov	sl, #0
   1e30c:	sub	r4, fp, #72	; 0x48
   1e310:	str	r1, [sp, #16]
   1e314:	ldr	r1, [fp, #20]
   1e318:	add	r5, r5, #1
   1e31c:	cmp	r5, #4
   1e320:	str	r5, [sp, #20]
   1e324:	ldr	r1, [r1, r3, lsl #2]
   1e328:	str	r7, [r6, r3, lsl #2]
   1e32c:	sub	r1, r1, #1
   1e330:	str	r1, [r4, r3, lsl #2]
   1e334:	ldr	r4, [ip, r3, lsl #2]
   1e338:	bcs	1e34c <ReadDataSlabN+0x89c>
   1e33c:	mov	r8, r4
   1e340:	mov	r5, r4
   1e344:	mov	r2, r3
   1e348:	b	1e3e8 <ReadDataSlabN+0x938>
   1e34c:	vmov.i32	q9, #1	; 0x00000001
   1e350:	vmov.i32	q10, #1	; 0x00000001
   1e354:	vmov.i32	q8, #1	; 0x00000001
   1e358:	bic	r6, r5, #3
   1e35c:	bic	ip, r3, #3
   1e360:	vmov.32	d23[1], r4
   1e364:	vmov.32	d18[0], r7
   1e368:	vmov.32	d20[0], r1
   1e36c:	sub	r2, r3, r6
   1e370:	mov	r1, r9
   1e374:	vorr	d16, d18, d18
   1e378:	vmov.i32	q9, #1	; 0x00000001
   1e37c:	vorr	d18, d20, d20
   1e380:	vld1.32	{d20-d21}, [r1], lr
   1e384:	subs	ip, ip, #4
   1e388:	vrev64.32	q12, q10
   1e38c:	vext.8	q12, q12, q12, #8
   1e390:	vext.8	q11, q11, q12, #12
   1e394:	vmul.i32	q9, q9, q12
   1e398:	vmul.i32	q8, q11, q8
   1e39c:	vorr	q11, q12, q12
   1e3a0:	bne	1e380 <ReadDataSlabN+0x8d0>
   1e3a4:	vext.8	q11, q9, q8, #8
   1e3a8:	vext.8	q12, q8, q8, #8
   1e3ac:	mov	r8, r4
   1e3b0:	cmp	r5, r6
   1e3b4:	vmul.i32	q0, q9, q11
   1e3b8:	vmul.i32	q1, q8, q12
   1e3bc:	vmul.i32	q8, q0, d0[1]
   1e3c0:	vmul.i32	q9, q1, d2[1]
   1e3c4:	vmov.32	r1, d16[0]
   1e3c8:	vmov.32	r7, d18[0]
   1e3cc:	bne	1e3dc <ReadDataSlabN+0x92c>
   1e3d0:	ldr	ip, [fp, #12]
   1e3d4:	add	r6, sp, #40	; 0x28
   1e3d8:	b	1e3fc <ReadDataSlabN+0x94c>
   1e3dc:	ldr	ip, [fp, #12]
   1e3e0:	vmov.32	r5, d20[0]
   1e3e4:	add	r6, sp, #40	; 0x28
   1e3e8:	mul	r7, r5, r7
   1e3ec:	ldr	r5, [r0, r2, lsl #2]
   1e3f0:	subs	r2, r2, #1
   1e3f4:	mul	r1, r1, r5
   1e3f8:	bne	1e3e8 <ReadDataSlabN+0x938>
   1e3fc:	sub	r4, fp, #72	; 0x48
   1e400:	str	r7, [r6, r3, lsl #2]
   1e404:	ldr	r2, [sp, #16]
   1e408:	ldr	r5, [sp, #20]
   1e40c:	add	r9, r9, #4
   1e410:	str	r1, [r4, r3, lsl #2]
   1e414:	ldr	r1, [fp, #16]
   1e418:	ldr	r1, [r1, r3, lsl #2]
   1e41c:	mla	sl, r1, r2, sl
   1e420:	ldr	r1, [fp, #24]
   1e424:	ldr	r2, [sp, #12]
   1e428:	ldr	r1, [r1, r3, lsl #2]
   1e42c:	add	r3, r3, #1
   1e430:	mul	r2, r1, r2
   1e434:	ldr	r1, [fp, #8]
   1e438:	str	r2, [sp, #12]
   1e43c:	cmp	r3, r1
   1e440:	mov	r1, r7
   1e444:	mov	r7, r8
   1e448:	bne	1e310 <ReadDataSlabN+0x860>
   1e44c:	b	1f4ac <ReadDataSlabN+0x19fc>
   1e450:	ldr	r0, [fp, #20]
   1e454:	mov	sl, #0
   1e458:	ldr	r0, [r0]
   1e45c:	sub	r0, r0, #1
   1e460:	str	r0, [fp, #-72]	; 0xffffffb8
   1e464:	ldr	r0, [fp, #24]
   1e468:	ldr	r1, [ip]
   1e46c:	str	r1, [sp, #40]	; 0x28
   1e470:	ldr	r0, [r0]
   1e474:	str	r0, [sp, #12]
   1e478:	ldr	r0, [fp, #8]
   1e47c:	cmp	r0, #2
   1e480:	blt	1f6d0 <ReadDataSlabN+0x1c20>
   1e484:	sub	r0, ip, #4
   1e488:	sub	r9, ip, #12
   1e48c:	mov	r3, #1
   1e490:	mov	r5, #0
   1e494:	mvn	lr, #15
   1e498:	mov	r7, r1
   1e49c:	mov	sl, #0
   1e4a0:	sub	r4, fp, #72	; 0x48
   1e4a4:	str	r1, [sp, #16]
   1e4a8:	ldr	r1, [fp, #20]
   1e4ac:	add	r5, r5, #1
   1e4b0:	cmp	r5, #4
   1e4b4:	str	r5, [sp, #20]
   1e4b8:	ldr	r1, [r1, r3, lsl #2]
   1e4bc:	str	r7, [r6, r3, lsl #2]
   1e4c0:	sub	r1, r1, #1
   1e4c4:	str	r1, [r4, r3, lsl #2]
   1e4c8:	ldr	r4, [ip, r3, lsl #2]
   1e4cc:	bcs	1e4e0 <ReadDataSlabN+0xa30>
   1e4d0:	mov	r8, r4
   1e4d4:	mov	r5, r4
   1e4d8:	mov	r2, r3
   1e4dc:	b	1e57c <ReadDataSlabN+0xacc>
   1e4e0:	vmov.i32	q9, #1	; 0x00000001
   1e4e4:	vmov.i32	q10, #1	; 0x00000001
   1e4e8:	vmov.i32	q8, #1	; 0x00000001
   1e4ec:	bic	r6, r5, #3
   1e4f0:	bic	ip, r3, #3
   1e4f4:	vmov.32	d23[1], r4
   1e4f8:	vmov.32	d18[0], r7
   1e4fc:	vmov.32	d20[0], r1
   1e500:	sub	r2, r3, r6
   1e504:	mov	r1, r9
   1e508:	vorr	d16, d18, d18
   1e50c:	vmov.i32	q9, #1	; 0x00000001
   1e510:	vorr	d18, d20, d20
   1e514:	vld1.32	{d20-d21}, [r1], lr
   1e518:	subs	ip, ip, #4
   1e51c:	vrev64.32	q12, q10
   1e520:	vext.8	q12, q12, q12, #8
   1e524:	vext.8	q11, q11, q12, #12
   1e528:	vmul.i32	q9, q9, q12
   1e52c:	vmul.i32	q8, q11, q8
   1e530:	vorr	q11, q12, q12
   1e534:	bne	1e514 <ReadDataSlabN+0xa64>
   1e538:	vext.8	q11, q9, q8, #8
   1e53c:	vext.8	q12, q8, q8, #8
   1e540:	mov	r8, r4
   1e544:	cmp	r5, r6
   1e548:	vmul.i32	q0, q9, q11
   1e54c:	vmul.i32	q1, q8, q12
   1e550:	vmul.i32	q8, q0, d0[1]
   1e554:	vmul.i32	q9, q1, d2[1]
   1e558:	vmov.32	r1, d16[0]
   1e55c:	vmov.32	r7, d18[0]
   1e560:	bne	1e570 <ReadDataSlabN+0xac0>
   1e564:	ldr	ip, [fp, #12]
   1e568:	add	r6, sp, #40	; 0x28
   1e56c:	b	1e590 <ReadDataSlabN+0xae0>
   1e570:	ldr	ip, [fp, #12]
   1e574:	vmov.32	r5, d20[0]
   1e578:	add	r6, sp, #40	; 0x28
   1e57c:	mul	r7, r5, r7
   1e580:	ldr	r5, [r0, r2, lsl #2]
   1e584:	subs	r2, r2, #1
   1e588:	mul	r1, r1, r5
   1e58c:	bne	1e57c <ReadDataSlabN+0xacc>
   1e590:	sub	r4, fp, #72	; 0x48
   1e594:	str	r7, [r6, r3, lsl #2]
   1e598:	ldr	r2, [sp, #16]
   1e59c:	ldr	r5, [sp, #20]
   1e5a0:	add	r9, r9, #4
   1e5a4:	str	r1, [r4, r3, lsl #2]
   1e5a8:	ldr	r1, [fp, #16]
   1e5ac:	ldr	r1, [r1, r3, lsl #2]
   1e5b0:	mla	sl, r1, r2, sl
   1e5b4:	ldr	r1, [fp, #24]
   1e5b8:	ldr	r2, [sp, #12]
   1e5bc:	ldr	r1, [r1, r3, lsl #2]
   1e5c0:	add	r3, r3, #1
   1e5c4:	mul	r2, r1, r2
   1e5c8:	ldr	r1, [fp, #8]
   1e5cc:	str	r2, [sp, #12]
   1e5d0:	cmp	r3, r1
   1e5d4:	mov	r1, r7
   1e5d8:	mov	r7, r8
   1e5dc:	bne	1e4a4 <ReadDataSlabN+0x9f4>
   1e5e0:	b	1f6d4 <ReadDataSlabN+0x1c24>
   1e5e4:	ldr	r0, [fp, #20]
   1e5e8:	mov	sl, #0
   1e5ec:	ldr	r0, [r0]
   1e5f0:	sub	r0, r0, #1
   1e5f4:	str	r0, [fp, #-72]	; 0xffffffb8
   1e5f8:	ldr	r0, [fp, #24]
   1e5fc:	ldr	r1, [ip]
   1e600:	str	r1, [sp, #40]	; 0x28
   1e604:	ldr	r0, [r0]
   1e608:	str	r0, [sp, #12]
   1e60c:	ldr	r0, [fp, #8]
   1e610:	cmp	r0, #2
   1e614:	blt	1f8f8 <ReadDataSlabN+0x1e48>
   1e618:	sub	r0, ip, #4
   1e61c:	sub	r9, ip, #12
   1e620:	mov	r3, #1
   1e624:	mov	r5, #0
   1e628:	mvn	lr, #15
   1e62c:	mov	r7, r1
   1e630:	mov	sl, #0
   1e634:	sub	r4, fp, #72	; 0x48
   1e638:	str	r1, [sp, #16]
   1e63c:	ldr	r1, [fp, #20]
   1e640:	add	r5, r5, #1
   1e644:	cmp	r5, #4
   1e648:	str	r5, [sp, #20]
   1e64c:	ldr	r1, [r1, r3, lsl #2]
   1e650:	str	r7, [r6, r3, lsl #2]
   1e654:	sub	r1, r1, #1
   1e658:	str	r1, [r4, r3, lsl #2]
   1e65c:	ldr	r4, [ip, r3, lsl #2]
   1e660:	bcs	1e674 <ReadDataSlabN+0xbc4>
   1e664:	mov	r8, r4
   1e668:	mov	r5, r4
   1e66c:	mov	r2, r3
   1e670:	b	1e710 <ReadDataSlabN+0xc60>
   1e674:	vmov.i32	q9, #1	; 0x00000001
   1e678:	vmov.i32	q10, #1	; 0x00000001
   1e67c:	vmov.i32	q8, #1	; 0x00000001
   1e680:	bic	r6, r5, #3
   1e684:	bic	ip, r3, #3
   1e688:	vmov.32	d23[1], r4
   1e68c:	vmov.32	d18[0], r7
   1e690:	vmov.32	d20[0], r1
   1e694:	sub	r2, r3, r6
   1e698:	mov	r1, r9
   1e69c:	vorr	d16, d18, d18
   1e6a0:	vmov.i32	q9, #1	; 0x00000001
   1e6a4:	vorr	d18, d20, d20
   1e6a8:	vld1.32	{d20-d21}, [r1], lr
   1e6ac:	subs	ip, ip, #4
   1e6b0:	vrev64.32	q12, q10
   1e6b4:	vext.8	q12, q12, q12, #8
   1e6b8:	vext.8	q11, q11, q12, #12
   1e6bc:	vmul.i32	q9, q9, q12
   1e6c0:	vmul.i32	q8, q11, q8
   1e6c4:	vorr	q11, q12, q12
   1e6c8:	bne	1e6a8 <ReadDataSlabN+0xbf8>
   1e6cc:	vext.8	q11, q9, q8, #8
   1e6d0:	vext.8	q12, q8, q8, #8
   1e6d4:	mov	r8, r4
   1e6d8:	cmp	r5, r6
   1e6dc:	vmul.i32	q0, q9, q11
   1e6e0:	vmul.i32	q1, q8, q12
   1e6e4:	vmul.i32	q8, q0, d0[1]
   1e6e8:	vmul.i32	q9, q1, d2[1]
   1e6ec:	vmov.32	r1, d16[0]
   1e6f0:	vmov.32	r7, d18[0]
   1e6f4:	bne	1e704 <ReadDataSlabN+0xc54>
   1e6f8:	ldr	ip, [fp, #12]
   1e6fc:	add	r6, sp, #40	; 0x28
   1e700:	b	1e724 <ReadDataSlabN+0xc74>
   1e704:	ldr	ip, [fp, #12]
   1e708:	vmov.32	r5, d20[0]
   1e70c:	add	r6, sp, #40	; 0x28
   1e710:	mul	r7, r5, r7
   1e714:	ldr	r5, [r0, r2, lsl #2]
   1e718:	subs	r2, r2, #1
   1e71c:	mul	r1, r1, r5
   1e720:	bne	1e710 <ReadDataSlabN+0xc60>
   1e724:	sub	r4, fp, #72	; 0x48
   1e728:	str	r7, [r6, r3, lsl #2]
   1e72c:	ldr	r2, [sp, #16]
   1e730:	ldr	r5, [sp, #20]
   1e734:	add	r9, r9, #4
   1e738:	str	r1, [r4, r3, lsl #2]
   1e73c:	ldr	r1, [fp, #16]
   1e740:	ldr	r1, [r1, r3, lsl #2]
   1e744:	mla	sl, r1, r2, sl
   1e748:	ldr	r1, [fp, #24]
   1e74c:	ldr	r2, [sp, #12]
   1e750:	ldr	r1, [r1, r3, lsl #2]
   1e754:	add	r3, r3, #1
   1e758:	mul	r2, r1, r2
   1e75c:	ldr	r1, [fp, #8]
   1e760:	str	r2, [sp, #12]
   1e764:	cmp	r3, r1
   1e768:	mov	r1, r7
   1e76c:	mov	r7, r8
   1e770:	bne	1e638 <ReadDataSlabN+0xb88>
   1e774:	b	1f8fc <ReadDataSlabN+0x1e4c>
   1e778:	ldr	r0, [fp, #20]
   1e77c:	mov	sl, #0
   1e780:	ldr	r0, [r0]
   1e784:	sub	r0, r0, #1
   1e788:	str	r0, [fp, #-72]	; 0xffffffb8
   1e78c:	ldr	r0, [fp, #24]
   1e790:	ldr	r1, [ip]
   1e794:	str	r1, [sp, #40]	; 0x28
   1e798:	ldr	r0, [r0]
   1e79c:	str	r0, [sp, #12]
   1e7a0:	ldr	r0, [fp, #8]
   1e7a4:	cmp	r0, #2
   1e7a8:	blt	1fb20 <ReadDataSlabN+0x2070>
   1e7ac:	sub	r0, ip, #4
   1e7b0:	sub	r9, ip, #12
   1e7b4:	mov	r3, #1
   1e7b8:	mov	r5, #0
   1e7bc:	mvn	lr, #15
   1e7c0:	mov	r7, r1
   1e7c4:	mov	sl, #0
   1e7c8:	sub	r4, fp, #72	; 0x48
   1e7cc:	str	r1, [sp, #16]
   1e7d0:	ldr	r1, [fp, #20]
   1e7d4:	add	r5, r5, #1
   1e7d8:	cmp	r5, #4
   1e7dc:	str	r5, [sp, #20]
   1e7e0:	ldr	r1, [r1, r3, lsl #2]
   1e7e4:	str	r7, [r6, r3, lsl #2]
   1e7e8:	sub	r1, r1, #1
   1e7ec:	str	r1, [r4, r3, lsl #2]
   1e7f0:	ldr	r4, [ip, r3, lsl #2]
   1e7f4:	bcs	1e808 <ReadDataSlabN+0xd58>
   1e7f8:	mov	r8, r4
   1e7fc:	mov	r5, r4
   1e800:	mov	r2, r3
   1e804:	b	1e8a4 <ReadDataSlabN+0xdf4>
   1e808:	vmov.i32	q9, #1	; 0x00000001
   1e80c:	vmov.i32	q10, #1	; 0x00000001
   1e810:	vmov.i32	q8, #1	; 0x00000001
   1e814:	bic	r6, r5, #3
   1e818:	bic	ip, r3, #3
   1e81c:	vmov.32	d23[1], r4
   1e820:	vmov.32	d18[0], r7
   1e824:	vmov.32	d20[0], r1
   1e828:	sub	r2, r3, r6
   1e82c:	mov	r1, r9
   1e830:	vorr	d16, d18, d18
   1e834:	vmov.i32	q9, #1	; 0x00000001
   1e838:	vorr	d18, d20, d20
   1e83c:	vld1.32	{d20-d21}, [r1], lr
   1e840:	subs	ip, ip, #4
   1e844:	vrev64.32	q12, q10
   1e848:	vext.8	q12, q12, q12, #8
   1e84c:	vext.8	q11, q11, q12, #12
   1e850:	vmul.i32	q9, q9, q12
   1e854:	vmul.i32	q8, q11, q8
   1e858:	vorr	q11, q12, q12
   1e85c:	bne	1e83c <ReadDataSlabN+0xd8c>
   1e860:	vext.8	q11, q9, q8, #8
   1e864:	vext.8	q12, q8, q8, #8
   1e868:	mov	r8, r4
   1e86c:	cmp	r5, r6
   1e870:	vmul.i32	q0, q9, q11
   1e874:	vmul.i32	q1, q8, q12
   1e878:	vmul.i32	q8, q0, d0[1]
   1e87c:	vmul.i32	q9, q1, d2[1]
   1e880:	vmov.32	r1, d16[0]
   1e884:	vmov.32	r7, d18[0]
   1e888:	bne	1e898 <ReadDataSlabN+0xde8>
   1e88c:	ldr	ip, [fp, #12]
   1e890:	add	r6, sp, #40	; 0x28
   1e894:	b	1e8b8 <ReadDataSlabN+0xe08>
   1e898:	ldr	ip, [fp, #12]
   1e89c:	vmov.32	r5, d20[0]
   1e8a0:	add	r6, sp, #40	; 0x28
   1e8a4:	mul	r7, r5, r7
   1e8a8:	ldr	r5, [r0, r2, lsl #2]
   1e8ac:	subs	r2, r2, #1
   1e8b0:	mul	r1, r1, r5
   1e8b4:	bne	1e8a4 <ReadDataSlabN+0xdf4>
   1e8b8:	sub	r4, fp, #72	; 0x48
   1e8bc:	str	r7, [r6, r3, lsl #2]
   1e8c0:	ldr	r2, [sp, #16]
   1e8c4:	ldr	r5, [sp, #20]
   1e8c8:	add	r9, r9, #4
   1e8cc:	str	r1, [r4, r3, lsl #2]
   1e8d0:	ldr	r1, [fp, #16]
   1e8d4:	ldr	r1, [r1, r3, lsl #2]
   1e8d8:	mla	sl, r1, r2, sl
   1e8dc:	ldr	r1, [fp, #24]
   1e8e0:	ldr	r2, [sp, #12]
   1e8e4:	ldr	r1, [r1, r3, lsl #2]
   1e8e8:	add	r3, r3, #1
   1e8ec:	mul	r2, r1, r2
   1e8f0:	ldr	r1, [fp, #8]
   1e8f4:	str	r2, [sp, #12]
   1e8f8:	cmp	r3, r1
   1e8fc:	mov	r1, r7
   1e900:	mov	r7, r8
   1e904:	bne	1e7cc <ReadDataSlabN+0xd1c>
   1e908:	b	1fb24 <ReadDataSlabN+0x2074>
   1e90c:	ldr	r0, [fp, #20]
   1e910:	mov	sl, #0
   1e914:	ldr	r0, [r0]
   1e918:	sub	r0, r0, #1
   1e91c:	str	r0, [fp, #-72]	; 0xffffffb8
   1e920:	ldr	r0, [fp, #24]
   1e924:	ldr	r1, [ip]
   1e928:	str	r1, [sp, #40]	; 0x28
   1e92c:	ldr	r0, [r0]
   1e930:	str	r0, [sp, #12]
   1e934:	ldr	r0, [fp, #8]
   1e938:	cmp	r0, #2
   1e93c:	blt	1fd48 <ReadDataSlabN+0x2298>
   1e940:	sub	r0, ip, #4
   1e944:	sub	r9, ip, #12
   1e948:	mov	r3, #1
   1e94c:	mov	r5, #0
   1e950:	mvn	lr, #15
   1e954:	mov	r7, r1
   1e958:	mov	sl, #0
   1e95c:	sub	r4, fp, #72	; 0x48
   1e960:	str	r1, [sp, #16]
   1e964:	ldr	r1, [fp, #20]
   1e968:	add	r5, r5, #1
   1e96c:	cmp	r5, #4
   1e970:	str	r5, [sp, #20]
   1e974:	ldr	r1, [r1, r3, lsl #2]
   1e978:	str	r7, [r6, r3, lsl #2]
   1e97c:	sub	r1, r1, #1
   1e980:	str	r1, [r4, r3, lsl #2]
   1e984:	ldr	r4, [ip, r3, lsl #2]
   1e988:	bcs	1e99c <ReadDataSlabN+0xeec>
   1e98c:	mov	r8, r4
   1e990:	mov	r5, r4
   1e994:	mov	r2, r3
   1e998:	b	1ea38 <ReadDataSlabN+0xf88>
   1e99c:	vmov.i32	q9, #1	; 0x00000001
   1e9a0:	vmov.i32	q10, #1	; 0x00000001
   1e9a4:	vmov.i32	q8, #1	; 0x00000001
   1e9a8:	bic	r6, r5, #3
   1e9ac:	bic	ip, r3, #3
   1e9b0:	vmov.32	d23[1], r4
   1e9b4:	vmov.32	d18[0], r7
   1e9b8:	vmov.32	d20[0], r1
   1e9bc:	sub	r2, r3, r6
   1e9c0:	mov	r1, r9
   1e9c4:	vorr	d16, d18, d18
   1e9c8:	vmov.i32	q9, #1	; 0x00000001
   1e9cc:	vorr	d18, d20, d20
   1e9d0:	vld1.32	{d20-d21}, [r1], lr
   1e9d4:	subs	ip, ip, #4
   1e9d8:	vrev64.32	q12, q10
   1e9dc:	vext.8	q12, q12, q12, #8
   1e9e0:	vext.8	q11, q11, q12, #12
   1e9e4:	vmul.i32	q9, q9, q12
   1e9e8:	vmul.i32	q8, q11, q8
   1e9ec:	vorr	q11, q12, q12
   1e9f0:	bne	1e9d0 <ReadDataSlabN+0xf20>
   1e9f4:	vext.8	q11, q9, q8, #8
   1e9f8:	vext.8	q12, q8, q8, #8
   1e9fc:	mov	r8, r4
   1ea00:	cmp	r5, r6
   1ea04:	vmul.i32	q0, q9, q11
   1ea08:	vmul.i32	q1, q8, q12
   1ea0c:	vmul.i32	q8, q0, d0[1]
   1ea10:	vmul.i32	q9, q1, d2[1]
   1ea14:	vmov.32	r1, d16[0]
   1ea18:	vmov.32	r7, d18[0]
   1ea1c:	bne	1ea2c <ReadDataSlabN+0xf7c>
   1ea20:	ldr	ip, [fp, #12]
   1ea24:	add	r6, sp, #40	; 0x28
   1ea28:	b	1ea4c <ReadDataSlabN+0xf9c>
   1ea2c:	ldr	ip, [fp, #12]
   1ea30:	vmov.32	r5, d20[0]
   1ea34:	add	r6, sp, #40	; 0x28
   1ea38:	mul	r7, r5, r7
   1ea3c:	ldr	r5, [r0, r2, lsl #2]
   1ea40:	subs	r2, r2, #1
   1ea44:	mul	r1, r1, r5
   1ea48:	bne	1ea38 <ReadDataSlabN+0xf88>
   1ea4c:	sub	r4, fp, #72	; 0x48
   1ea50:	str	r7, [r6, r3, lsl #2]
   1ea54:	ldr	r2, [sp, #16]
   1ea58:	ldr	r5, [sp, #20]
   1ea5c:	add	r9, r9, #4
   1ea60:	str	r1, [r4, r3, lsl #2]
   1ea64:	ldr	r1, [fp, #16]
   1ea68:	ldr	r1, [r1, r3, lsl #2]
   1ea6c:	mla	sl, r1, r2, sl
   1ea70:	ldr	r1, [fp, #24]
   1ea74:	ldr	r2, [sp, #12]
   1ea78:	ldr	r1, [r1, r3, lsl #2]
   1ea7c:	add	r3, r3, #1
   1ea80:	mul	r2, r1, r2
   1ea84:	ldr	r1, [fp, #8]
   1ea88:	str	r2, [sp, #12]
   1ea8c:	cmp	r3, r1
   1ea90:	mov	r1, r7
   1ea94:	mov	r7, r8
   1ea98:	bne	1e960 <ReadDataSlabN+0xeb0>
   1ea9c:	b	1fd4c <ReadDataSlabN+0x229c>
   1eaa0:	ldr	r0, [fp, #20]
   1eaa4:	mov	sl, #0
   1eaa8:	ldr	r0, [r0]
   1eaac:	sub	r0, r0, #1
   1eab0:	str	r0, [fp, #-72]	; 0xffffffb8
   1eab4:	ldr	r0, [fp, #24]
   1eab8:	ldr	r1, [ip]
   1eabc:	str	r1, [sp, #40]	; 0x28
   1eac0:	ldr	r0, [r0]
   1eac4:	str	r0, [sp, #12]
   1eac8:	ldr	r0, [fp, #8]
   1eacc:	cmp	r0, #2
   1ead0:	blt	1ff70 <ReadDataSlabN+0x24c0>
   1ead4:	sub	r0, ip, #4
   1ead8:	sub	r9, ip, #12
   1eadc:	mov	r3, #1
   1eae0:	mov	r5, #0
   1eae4:	mvn	lr, #15
   1eae8:	mov	r7, r1
   1eaec:	mov	sl, #0
   1eaf0:	sub	r4, fp, #72	; 0x48
   1eaf4:	str	r1, [sp, #16]
   1eaf8:	ldr	r1, [fp, #20]
   1eafc:	add	r5, r5, #1
   1eb00:	cmp	r5, #4
   1eb04:	str	r5, [sp, #20]
   1eb08:	ldr	r1, [r1, r3, lsl #2]
   1eb0c:	str	r7, [r6, r3, lsl #2]
   1eb10:	sub	r1, r1, #1
   1eb14:	str	r1, [r4, r3, lsl #2]
   1eb18:	ldr	r4, [ip, r3, lsl #2]
   1eb1c:	bcs	1eb30 <ReadDataSlabN+0x1080>
   1eb20:	mov	r8, r4
   1eb24:	mov	r5, r4
   1eb28:	mov	r2, r3
   1eb2c:	b	1ebcc <ReadDataSlabN+0x111c>
   1eb30:	vmov.i32	q9, #1	; 0x00000001
   1eb34:	vmov.i32	q10, #1	; 0x00000001
   1eb38:	vmov.i32	q8, #1	; 0x00000001
   1eb3c:	bic	r6, r5, #3
   1eb40:	bic	ip, r3, #3
   1eb44:	vmov.32	d23[1], r4
   1eb48:	vmov.32	d18[0], r7
   1eb4c:	vmov.32	d20[0], r1
   1eb50:	sub	r2, r3, r6
   1eb54:	mov	r1, r9
   1eb58:	vorr	d16, d18, d18
   1eb5c:	vmov.i32	q9, #1	; 0x00000001
   1eb60:	vorr	d18, d20, d20
   1eb64:	vld1.32	{d20-d21}, [r1], lr
   1eb68:	subs	ip, ip, #4
   1eb6c:	vrev64.32	q12, q10
   1eb70:	vext.8	q12, q12, q12, #8
   1eb74:	vext.8	q11, q11, q12, #12
   1eb78:	vmul.i32	q9, q9, q12
   1eb7c:	vmul.i32	q8, q11, q8
   1eb80:	vorr	q11, q12, q12
   1eb84:	bne	1eb64 <ReadDataSlabN+0x10b4>
   1eb88:	vext.8	q11, q9, q8, #8
   1eb8c:	vext.8	q12, q8, q8, #8
   1eb90:	mov	r8, r4
   1eb94:	cmp	r5, r6
   1eb98:	vmul.i32	q0, q9, q11
   1eb9c:	vmul.i32	q1, q8, q12
   1eba0:	vmul.i32	q8, q0, d0[1]
   1eba4:	vmul.i32	q9, q1, d2[1]
   1eba8:	vmov.32	r1, d16[0]
   1ebac:	vmov.32	r7, d18[0]
   1ebb0:	bne	1ebc0 <ReadDataSlabN+0x1110>
   1ebb4:	ldr	ip, [fp, #12]
   1ebb8:	add	r6, sp, #40	; 0x28
   1ebbc:	b	1ebe0 <ReadDataSlabN+0x1130>
   1ebc0:	ldr	ip, [fp, #12]
   1ebc4:	vmov.32	r5, d20[0]
   1ebc8:	add	r6, sp, #40	; 0x28
   1ebcc:	mul	r7, r5, r7
   1ebd0:	ldr	r5, [r0, r2, lsl #2]
   1ebd4:	subs	r2, r2, #1
   1ebd8:	mul	r1, r1, r5
   1ebdc:	bne	1ebcc <ReadDataSlabN+0x111c>
   1ebe0:	sub	r4, fp, #72	; 0x48
   1ebe4:	str	r7, [r6, r3, lsl #2]
   1ebe8:	ldr	r2, [sp, #16]
   1ebec:	ldr	r5, [sp, #20]
   1ebf0:	add	r9, r9, #4
   1ebf4:	str	r1, [r4, r3, lsl #2]
   1ebf8:	ldr	r1, [fp, #16]
   1ebfc:	ldr	r1, [r1, r3, lsl #2]
   1ec00:	mla	sl, r1, r2, sl
   1ec04:	ldr	r1, [fp, #24]
   1ec08:	ldr	r2, [sp, #12]
   1ec0c:	ldr	r1, [r1, r3, lsl #2]
   1ec10:	add	r3, r3, #1
   1ec14:	mul	r2, r1, r2
   1ec18:	ldr	r1, [fp, #8]
   1ec1c:	str	r2, [sp, #12]
   1ec20:	cmp	r3, r1
   1ec24:	mov	r1, r7
   1ec28:	mov	r7, r8
   1ec2c:	bne	1eaf4 <ReadDataSlabN+0x1044>
   1ec30:	b	1ff74 <ReadDataSlabN+0x24c4>
   1ec34:	ldr	r0, [fp, #20]
   1ec38:	mov	sl, #0
   1ec3c:	ldr	r0, [r0]
   1ec40:	sub	r0, r0, #1
   1ec44:	str	r0, [fp, #-72]	; 0xffffffb8
   1ec48:	ldr	r0, [fp, #24]
   1ec4c:	ldr	r1, [ip]
   1ec50:	str	r1, [sp, #40]	; 0x28
   1ec54:	ldr	r0, [r0]
   1ec58:	str	r0, [sp, #12]
   1ec5c:	ldr	r0, [fp, #8]
   1ec60:	cmp	r0, #2
   1ec64:	blt	20198 <ReadDataSlabN+0x26e8>
   1ec68:	sub	r0, ip, #4
   1ec6c:	sub	r9, ip, #12
   1ec70:	mov	r3, #1
   1ec74:	mov	r5, #0
   1ec78:	mvn	lr, #15
   1ec7c:	mov	r7, r1
   1ec80:	mov	sl, #0
   1ec84:	sub	r4, fp, #72	; 0x48
   1ec88:	str	r1, [sp, #16]
   1ec8c:	ldr	r1, [fp, #20]
   1ec90:	add	r5, r5, #1
   1ec94:	cmp	r5, #4
   1ec98:	str	r5, [sp, #20]
   1ec9c:	ldr	r1, [r1, r3, lsl #2]
   1eca0:	str	r7, [r6, r3, lsl #2]
   1eca4:	sub	r1, r1, #1
   1eca8:	str	r1, [r4, r3, lsl #2]
   1ecac:	ldr	r4, [ip, r3, lsl #2]
   1ecb0:	bcs	1ecc4 <ReadDataSlabN+0x1214>
   1ecb4:	mov	r8, r4
   1ecb8:	mov	r5, r4
   1ecbc:	mov	r2, r3
   1ecc0:	b	1ed60 <ReadDataSlabN+0x12b0>
   1ecc4:	vmov.i32	q9, #1	; 0x00000001
   1ecc8:	vmov.i32	q10, #1	; 0x00000001
   1eccc:	vmov.i32	q8, #1	; 0x00000001
   1ecd0:	bic	r6, r5, #3
   1ecd4:	bic	ip, r3, #3
   1ecd8:	vmov.32	d23[1], r4
   1ecdc:	vmov.32	d18[0], r7
   1ece0:	vmov.32	d20[0], r1
   1ece4:	sub	r2, r3, r6
   1ece8:	mov	r1, r9
   1ecec:	vorr	d16, d18, d18
   1ecf0:	vmov.i32	q9, #1	; 0x00000001
   1ecf4:	vorr	d18, d20, d20
   1ecf8:	vld1.32	{d20-d21}, [r1], lr
   1ecfc:	subs	ip, ip, #4
   1ed00:	vrev64.32	q12, q10
   1ed04:	vext.8	q12, q12, q12, #8
   1ed08:	vext.8	q11, q11, q12, #12
   1ed0c:	vmul.i32	q9, q9, q12
   1ed10:	vmul.i32	q8, q11, q8
   1ed14:	vorr	q11, q12, q12
   1ed18:	bne	1ecf8 <ReadDataSlabN+0x1248>
   1ed1c:	vext.8	q11, q9, q8, #8
   1ed20:	vext.8	q12, q8, q8, #8
   1ed24:	mov	r8, r4
   1ed28:	cmp	r5, r6
   1ed2c:	vmul.i32	q0, q9, q11
   1ed30:	vmul.i32	q1, q8, q12
   1ed34:	vmul.i32	q8, q0, d0[1]
   1ed38:	vmul.i32	q9, q1, d2[1]
   1ed3c:	vmov.32	r1, d16[0]
   1ed40:	vmov.32	r7, d18[0]
   1ed44:	bne	1ed54 <ReadDataSlabN+0x12a4>
   1ed48:	ldr	ip, [fp, #12]
   1ed4c:	add	r6, sp, #40	; 0x28
   1ed50:	b	1ed74 <ReadDataSlabN+0x12c4>
   1ed54:	ldr	ip, [fp, #12]
   1ed58:	vmov.32	r5, d20[0]
   1ed5c:	add	r6, sp, #40	; 0x28
   1ed60:	mul	r7, r5, r7
   1ed64:	ldr	r5, [r0, r2, lsl #2]
   1ed68:	subs	r2, r2, #1
   1ed6c:	mul	r1, r1, r5
   1ed70:	bne	1ed60 <ReadDataSlabN+0x12b0>
   1ed74:	sub	r4, fp, #72	; 0x48
   1ed78:	str	r7, [r6, r3, lsl #2]
   1ed7c:	ldr	r2, [sp, #16]
   1ed80:	ldr	r5, [sp, #20]
   1ed84:	add	r9, r9, #4
   1ed88:	str	r1, [r4, r3, lsl #2]
   1ed8c:	ldr	r1, [fp, #16]
   1ed90:	ldr	r1, [r1, r3, lsl #2]
   1ed94:	mla	sl, r1, r2, sl
   1ed98:	ldr	r1, [fp, #24]
   1ed9c:	ldr	r2, [sp, #12]
   1eda0:	ldr	r1, [r1, r3, lsl #2]
   1eda4:	add	r3, r3, #1
   1eda8:	mul	r2, r1, r2
   1edac:	ldr	r1, [fp, #8]
   1edb0:	str	r2, [sp, #12]
   1edb4:	cmp	r3, r1
   1edb8:	mov	r1, r7
   1edbc:	mov	r7, r8
   1edc0:	bne	1ec88 <ReadDataSlabN+0x11d8>
   1edc4:	b	2019c <ReadDataSlabN+0x26ec>
   1edc8:	ldr	r0, [sp, #12]
   1edcc:	sub	r1, fp, #72	; 0x48
   1edd0:	add	r2, sp, #80	; 0x50
   1edd4:	cmp	r0, #1
   1edd8:	blt	21a6c <ReadDataSlabN+0x3fbc>
   1eddc:	ldr	r0, [fp, #16]
   1ede0:	orr	ip, r2, #4
   1ede4:	mov	r5, #0
   1ede8:	str	ip, [sp, #16]
   1edec:	add	r9, r0, #4
   1edf0:	add	r0, sl, #4
   1edf4:	str	r0, [sp, #20]
   1edf8:	orr	r0, r1, #4
   1edfc:	str	r9, [sp, #4]
   1ee00:	str	r0, [sp]
   1ee04:	ldr	r4, [fp, #16]
   1ee08:	ldr	r0, [r4]
   1ee0c:	cmp	r0, #0
   1ee10:	beq	1ee40 <ReadDataSlabN+0x1390>
   1ee14:	ldr	sl, [sp, #36]	; 0x24
   1ee18:	ldr	r6, [sp, #32]
   1ee1c:	mov	r2, #1
   1ee20:	mul	r1, r0, sl
   1ee24:	ldr	r0, [r6]
   1ee28:	bl	1a2c <fseek@plt>
   1ee2c:	ldr	r0, [r4]
   1ee30:	ldr	r2, [sp, #24]
   1ee34:	ldr	r7, [fp, #24]
   1ee38:	add	r8, r0, r8
   1ee3c:	b	1ee54 <ReadDataSlabN+0x13a4>
   1ee40:	ldr	r2, [sp, #24]
   1ee44:	ldr	r6, [sp, #32]
   1ee48:	ldr	r7, [fp, #24]
   1ee4c:	ldr	sl, [sp, #36]	; 0x24
   1ee50:	mov	r0, #0
   1ee54:	ldr	r1, [r7]
   1ee58:	ldr	r3, [fp, #12]
   1ee5c:	ldr	r4, [sp, #28]
   1ee60:	str	r5, [sp, #8]
   1ee64:	cmp	r1, #0
   1ee68:	ble	1eee4 <ReadDataSlabN+0x1434>
   1ee6c:	ldr	r9, [fp, #20]
   1ee70:	mov	sl, r7
   1ee74:	add	r5, r2, r5, lsl #3
   1ee78:	mov	r7, #0
   1ee7c:	mov	r0, r6
   1ee80:	mov	r1, r5
   1ee84:	mov	r2, r4
   1ee88:	mov	r3, #1
   1ee8c:	bl	38dc <ReadDoubleData>
   1ee90:	ldr	r0, [r9]
   1ee94:	ldr	r1, [sp, #36]	; 0x24
   1ee98:	mov	r2, #1
   1ee9c:	sub	r0, r0, #1
   1eea0:	mul	r1, r0, r1
   1eea4:	ldr	r0, [r6]
   1eea8:	bl	1a2c <fseek@plt>
   1eeac:	ldr	r2, [r9]
   1eeb0:	ldr	r1, [sl]
   1eeb4:	add	r7, r7, #1
   1eeb8:	add	r5, r5, #8
   1eebc:	add	r8, r2, r8
   1eec0:	cmp	r7, r1
   1eec4:	blt	1ee7c <ReadDataSlabN+0x13cc>
   1eec8:	ldr	r0, [fp, #16]
   1eecc:	mov	r7, sl
   1eed0:	ldr	sl, [sp, #36]	; 0x24
   1eed4:	ldr	r3, [fp, #12]
   1eed8:	ldr	r9, [sp, #4]
   1eedc:	ldr	r0, [r0]
   1eee0:	b	1eeec <ReadDataSlabN+0x143c>
   1eee4:	ldr	r2, [fp, #20]
   1eee8:	ldr	r2, [r2]
   1eeec:	ldr	r3, [r3]
   1eef0:	mls	r1, r2, r1, r3
   1eef4:	mov	r2, #1
   1eef8:	sub	r5, r1, r0
   1eefc:	ldr	r0, [r6]
   1ef00:	mul	r1, r5, sl
   1ef04:	bl	1a2c <fseek@plt>
   1ef08:	ldr	r0, [fp, #8]
   1ef0c:	add	r8, r5, r8
   1ef10:	cmp	r0, #2
   1ef14:	blt	1f030 <ReadDataSlabN+0x1580>
   1ef18:	ldr	ip, [sp, #16]
   1ef1c:	mov	r0, #0
   1ef20:	add	r3, sp, #40	; 0x28
   1ef24:	mov	r5, r0
   1ef28:	ldr	r0, [ip, r0, lsl #2]
   1ef2c:	ldr	r1, [sp, #20]
   1ef30:	add	r0, r0, #1
   1ef34:	str	r0, [ip, r5, lsl #2]
   1ef38:	ldr	r1, [r1, r5, lsl #2]
   1ef3c:	sdiv	r2, r0, r1
   1ef40:	mls	r0, r2, r1, r0
   1ef44:	cmp	r0, #0
   1ef48:	bne	1f014 <ReadDataSlabN+0x1564>
   1ef4c:	mov	r0, #0
   1ef50:	str	r0, [ip, r5, lsl #2]
   1ef54:	add	r0, r3, r5, lsl #2
   1ef58:	ldr	r6, [r0, #4]
   1ef5c:	sdiv	r0, r8, r6
   1ef60:	mls	r7, r0, r6, r8
   1ef64:	cmp	r7, #0
   1ef68:	beq	1efb8 <ReadDataSlabN+0x1508>
   1ef6c:	ldr	sl, [r3, r5, lsl #2]
   1ef70:	ldr	r0, [r9, r5, lsl #2]
   1ef74:	sub	r1, r6, r7
   1ef78:	ldr	r4, [sp, #32]
   1ef7c:	mov	r2, #1
   1ef80:	mla	r0, r0, sl, r1
   1ef84:	ldr	r1, [sp, #36]	; 0x24
   1ef88:	mul	r1, r0, r1
   1ef8c:	ldr	r0, [r4]
   1ef90:	bl	1a2c <fseek@plt>
   1ef94:	ldr	r0, [r9, r5, lsl #2]
   1ef98:	add	r1, r6, r8
   1ef9c:	ldr	ip, [sp, #16]
   1efa0:	add	r3, sp, #40	; 0x28
   1efa4:	mov	r6, r4
   1efa8:	sub	r1, r1, r7
   1efac:	mla	r8, r0, sl, r1
   1efb0:	ldr	sl, [sp, #36]	; 0x24
   1efb4:	b	1eff8 <ReadDataSlabN+0x1548>
   1efb8:	ldr	r0, [r9, r5, lsl #2]
   1efbc:	cmp	r0, #0
   1efc0:	beq	1eff4 <ReadDataSlabN+0x1544>
   1efc4:	ldr	r4, [r3, r5, lsl #2]
   1efc8:	ldr	r6, [sp, #32]
   1efcc:	mul	r0, r0, sl
   1efd0:	mov	r2, #1
   1efd4:	mul	r1, r0, r4
   1efd8:	ldr	r0, [r6]
   1efdc:	bl	1a2c <fseek@plt>
   1efe0:	ldr	r0, [r9, r5, lsl #2]
   1efe4:	ldr	ip, [sp, #16]
   1efe8:	add	r3, sp, #40	; 0x28
   1efec:	mla	r8, r0, r4, r8
   1eff0:	b	1eff8 <ReadDataSlabN+0x1548>
   1eff4:	ldr	r6, [sp, #32]
   1eff8:	ldr	r2, [fp, #8]
   1effc:	ldr	r7, [fp, #24]
   1f000:	add	r1, r5, #2
   1f004:	add	r0, r5, #1
   1f008:	cmp	r1, r2
   1f00c:	blt	1ef24 <ReadDataSlabN+0x1474>
   1f010:	b	1f030 <ReadDataSlabN+0x1580>
   1f014:	ldr	r0, [sp]
   1f018:	mov	r2, #1
   1f01c:	ldr	r4, [r0, r5, lsl #2]
   1f020:	ldr	r0, [r6]
   1f024:	mul	r1, r4, sl
   1f028:	bl	1a2c <fseek@plt>
   1f02c:	add	r8, r4, r8
   1f030:	ldr	r0, [r7]
   1f034:	ldr	r5, [sp, #8]
   1f038:	ldr	r1, [sp, #12]
   1f03c:	add	r5, r0, r5
   1f040:	mov	r0, #0
   1f044:	cmp	r5, r1
   1f048:	blt	1ee04 <ReadDataSlabN+0x1354>
   1f04c:	b	1db34 <ReadDataSlabN+0x84>
   1f050:	sub	r4, fp, #72	; 0x48
   1f054:	ldr	r0, [sp, #36]	; 0x24
   1f058:	mov	r2, #1
   1f05c:	mul	r1, sl, r0
   1f060:	ldr	r0, [sp, #32]
   1f064:	ldr	r0, [r0]
   1f068:	bl	1a2c <fseek@plt>
   1f06c:	ldr	r0, [fp, #20]
   1f070:	ldr	r0, [r0]
   1f074:	cmp	r0, #1
   1f078:	bne	203c0 <ReadDataSlabN+0x2910>
   1f07c:	ldr	r0, [sp, #12]
   1f080:	ldr	r1, [fp, #16]
   1f084:	cmp	r0, #1
   1f088:	ldr	r0, [fp, #24]
   1f08c:	blt	21a6c <ReadDataSlabN+0x3fbc>
   1f090:	add	r0, r0, #4
   1f094:	add	r1, r1, #4
   1f098:	mov	r5, #0
   1f09c:	str	r0, [sp, #20]
   1f0a0:	add	r0, sp, #80	; 0x50
   1f0a4:	str	r1, [sp, #8]
   1f0a8:	orr	r7, r0, #4
   1f0ac:	orr	r0, r4, #4
   1f0b0:	mov	r4, r1
   1f0b4:	str	r0, [sp, #4]
   1f0b8:	ldr	r6, [fp, #16]
   1f0bc:	ldr	r0, [r6]
   1f0c0:	cmp	r0, #0
   1f0c4:	beq	1f0f0 <ReadDataSlabN+0x1640>
   1f0c8:	ldr	r9, [sp, #36]	; 0x24
   1f0cc:	ldr	r4, [sp, #32]
   1f0d0:	mov	r2, #1
   1f0d4:	mul	r1, r0, r9
   1f0d8:	ldr	r0, [r4]
   1f0dc:	bl	1a2c <fseek@plt>
   1f0e0:	ldr	r0, [r6]
   1f0e4:	ldr	r2, [sp, #28]
   1f0e8:	add	sl, r0, sl
   1f0ec:	b	1f0f8 <ReadDataSlabN+0x1648>
   1f0f0:	add	r9, sp, #28
   1f0f4:	ldm	r9, {r2, r4, r9}
   1f0f8:	ldr	r0, [sp, #24]
   1f0fc:	str	r5, [sp, #16]
   1f100:	add	r1, r0, r5, lsl #2
   1f104:	ldr	r0, [fp, #24]
   1f108:	ldr	r3, [r0]
   1f10c:	mov	r5, r0
   1f110:	mov	r0, r4
   1f114:	bl	6fa0 <ReadSingleData>
   1f118:	ldr	r0, [fp, #12]
   1f11c:	ldr	r8, [r6]
   1f120:	ldr	r1, [r5]
   1f124:	mov	r2, #1
   1f128:	ldr	r6, [r0]
   1f12c:	sub	r0, r6, r8
   1f130:	sub	r0, r0, r1
   1f134:	mul	r1, r0, r9
   1f138:	ldr	r0, [r4]
   1f13c:	bl	1a2c <fseek@plt>
   1f140:	add	r0, r6, sl
   1f144:	sub	sl, r0, r8
   1f148:	ldr	r0, [fp, #8]
   1f14c:	cmp	r0, #2
   1f150:	blt	1f25c <ReadDataSlabN+0x17ac>
   1f154:	ldr	r4, [sp, #8]
   1f158:	mov	r0, #0
   1f15c:	add	r3, sp, #40	; 0x28
   1f160:	mov	r8, r0
   1f164:	ldr	r0, [r7, r0, lsl #2]
   1f168:	ldr	r1, [sp, #20]
   1f16c:	add	r0, r0, #1
   1f170:	str	r0, [r7, r8, lsl #2]
   1f174:	ldr	r1, [r1, r8, lsl #2]
   1f178:	sdiv	r2, r0, r1
   1f17c:	mls	r0, r2, r1, r0
   1f180:	cmp	r0, #0
   1f184:	bne	1f238 <ReadDataSlabN+0x1788>
   1f188:	mov	r0, #0
   1f18c:	str	r0, [r7, r8, lsl #2]
   1f190:	add	r0, r3, r8, lsl #2
   1f194:	ldr	r6, [r0, #4]
   1f198:	sdiv	r0, sl, r6
   1f19c:	mls	r9, r0, r6, sl
   1f1a0:	cmp	r9, #0
   1f1a4:	beq	1f1e8 <ReadDataSlabN+0x1738>
   1f1a8:	ldr	r5, [r3, r8, lsl #2]
   1f1ac:	ldr	r0, [r4, r8, lsl #2]
   1f1b0:	sub	r1, r6, r9
   1f1b4:	mov	r2, #1
   1f1b8:	mla	r0, r0, r5, r1
   1f1bc:	ldr	r1, [sp, #36]	; 0x24
   1f1c0:	mul	r1, r0, r1
   1f1c4:	ldr	r0, [sp, #32]
   1f1c8:	ldr	r0, [r0]
   1f1cc:	bl	1a2c <fseek@plt>
   1f1d0:	ldr	r0, [r4, r8, lsl #2]
   1f1d4:	add	r1, r6, sl
   1f1d8:	add	r3, sp, #40	; 0x28
   1f1dc:	sub	r1, r1, r9
   1f1e0:	mla	sl, r0, r5, r1
   1f1e4:	b	1f220 <ReadDataSlabN+0x1770>
   1f1e8:	ldr	r0, [r4, r8, lsl #2]
   1f1ec:	cmp	r0, #0
   1f1f0:	beq	1f220 <ReadDataSlabN+0x1770>
   1f1f4:	ldr	r1, [sp, #36]	; 0x24
   1f1f8:	ldr	r5, [r3, r8, lsl #2]
   1f1fc:	mov	r2, #1
   1f200:	mul	r0, r0, r1
   1f204:	mul	r1, r0, r5
   1f208:	ldr	r0, [sp, #32]
   1f20c:	ldr	r0, [r0]
   1f210:	bl	1a2c <fseek@plt>
   1f214:	ldr	r0, [r4, r8, lsl #2]
   1f218:	add	r3, sp, #40	; 0x28
   1f21c:	mla	sl, r0, r5, sl
   1f220:	ldr	r2, [fp, #8]
   1f224:	add	r1, r8, #2
   1f228:	add	r0, r8, #1
   1f22c:	cmp	r1, r2
   1f230:	blt	1f160 <ReadDataSlabN+0x16b0>
   1f234:	b	1f25c <ReadDataSlabN+0x17ac>
   1f238:	ldr	r0, [sp, #4]
   1f23c:	mov	r2, #1
   1f240:	ldr	r5, [r0, r8, lsl #2]
   1f244:	ldr	r0, [sp, #36]	; 0x24
   1f248:	mul	r1, r5, r0
   1f24c:	ldr	r0, [sp, #32]
   1f250:	ldr	r0, [r0]
   1f254:	bl	1a2c <fseek@plt>
   1f258:	add	sl, r5, sl
   1f25c:	ldr	r0, [fp, #24]
   1f260:	ldr	r5, [sp, #16]
   1f264:	ldr	r1, [sp, #12]
   1f268:	ldr	r0, [r0]
   1f26c:	add	r5, r0, r5
   1f270:	mov	r0, #0
   1f274:	cmp	r5, r1
   1f278:	blt	1f0b8 <ReadDataSlabN+0x1608>
   1f27c:	b	1db34 <ReadDataSlabN+0x84>
   1f280:	sub	r4, fp, #72	; 0x48
   1f284:	ldr	r0, [sp, #36]	; 0x24
   1f288:	mov	r2, #1
   1f28c:	mul	r1, sl, r0
   1f290:	ldr	r0, [sp, #32]
   1f294:	ldr	r0, [r0]
   1f298:	bl	1a2c <fseek@plt>
   1f29c:	ldr	r0, [fp, #20]
   1f2a0:	ldr	r0, [r0]
   1f2a4:	cmp	r0, #1
   1f2a8:	bne	20648 <ReadDataSlabN+0x2b98>
   1f2ac:	ldr	r0, [sp, #12]
   1f2b0:	ldr	r1, [fp, #16]
   1f2b4:	cmp	r0, #1
   1f2b8:	ldr	r0, [fp, #24]
   1f2bc:	blt	21a6c <ReadDataSlabN+0x3fbc>
   1f2c0:	add	r0, r0, #4
   1f2c4:	mov	r2, r4
   1f2c8:	add	r4, r1, #4
   1f2cc:	mov	r5, #0
   1f2d0:	str	r0, [sp, #20]
   1f2d4:	add	r0, sp, #80	; 0x50
   1f2d8:	orr	r7, r0, #4
   1f2dc:	orr	r0, r2, #4
   1f2e0:	str	r0, [sp, #8]
   1f2e4:	ldr	r6, [fp, #16]
   1f2e8:	ldr	r0, [r6]
   1f2ec:	cmp	r0, #0
   1f2f0:	beq	1f318 <ReadDataSlabN+0x1868>
   1f2f4:	ldr	r1, [sp, #36]	; 0x24
   1f2f8:	ldr	r9, [sp, #32]
   1f2fc:	mov	r2, #1
   1f300:	mul	r1, r0, r1
   1f304:	ldr	r0, [r9]
   1f308:	bl	1a2c <fseek@plt>
   1f30c:	ldr	r0, [r6]
   1f310:	add	sl, r0, sl
   1f314:	b	1f31c <ReadDataSlabN+0x186c>
   1f318:	ldr	r9, [sp, #32]
   1f31c:	ldr	r0, [sp, #24]
   1f320:	ldr	r2, [sp, #28]
   1f324:	str	r5, [sp, #16]
   1f328:	add	r1, r0, r5
   1f32c:	ldr	r0, [fp, #24]
   1f330:	ldr	r3, [r0]
   1f334:	mov	r5, r0
   1f338:	mov	r0, r9
   1f33c:	bl	18bb8 <ReadInt8Data>
   1f340:	ldr	r0, [fp, #12]
   1f344:	ldr	r8, [r6]
   1f348:	ldr	r1, [r5]
   1f34c:	mov	r2, #1
   1f350:	ldr	r6, [r0]
   1f354:	sub	r0, r6, r8
   1f358:	sub	r0, r0, r1
   1f35c:	ldr	r1, [sp, #36]	; 0x24
   1f360:	mul	r1, r0, r1
   1f364:	ldr	r0, [r9]
   1f368:	bl	1a2c <fseek@plt>
   1f36c:	add	r0, r6, sl
   1f370:	sub	sl, r0, r8
   1f374:	ldr	r0, [fp, #8]
   1f378:	cmp	r0, #2
   1f37c:	blt	1f484 <ReadDataSlabN+0x19d4>
   1f380:	mov	r0, #0
   1f384:	add	r3, sp, #40	; 0x28
   1f388:	mov	r8, r0
   1f38c:	ldr	r0, [r7, r0, lsl #2]
   1f390:	ldr	r1, [sp, #20]
   1f394:	add	r0, r0, #1
   1f398:	str	r0, [r7, r8, lsl #2]
   1f39c:	ldr	r1, [r1, r8, lsl #2]
   1f3a0:	sdiv	r2, r0, r1
   1f3a4:	mls	r0, r2, r1, r0
   1f3a8:	cmp	r0, #0
   1f3ac:	bne	1f460 <ReadDataSlabN+0x19b0>
   1f3b0:	mov	r0, #0
   1f3b4:	str	r0, [r7, r8, lsl #2]
   1f3b8:	add	r0, r3, r8, lsl #2
   1f3bc:	ldr	r6, [r0, #4]
   1f3c0:	sdiv	r0, sl, r6
   1f3c4:	mls	r9, r0, r6, sl
   1f3c8:	cmp	r9, #0
   1f3cc:	beq	1f410 <ReadDataSlabN+0x1960>
   1f3d0:	ldr	r5, [r3, r8, lsl #2]
   1f3d4:	ldr	r0, [r4, r8, lsl #2]
   1f3d8:	sub	r1, r6, r9
   1f3dc:	mov	r2, #1
   1f3e0:	mla	r0, r0, r5, r1
   1f3e4:	ldr	r1, [sp, #36]	; 0x24
   1f3e8:	mul	r1, r0, r1
   1f3ec:	ldr	r0, [sp, #32]
   1f3f0:	ldr	r0, [r0]
   1f3f4:	bl	1a2c <fseek@plt>
   1f3f8:	ldr	r0, [r4, r8, lsl #2]
   1f3fc:	add	r1, r6, sl
   1f400:	add	r3, sp, #40	; 0x28
   1f404:	sub	r1, r1, r9
   1f408:	mla	sl, r0, r5, r1
   1f40c:	b	1f448 <ReadDataSlabN+0x1998>
   1f410:	ldr	r0, [r4, r8, lsl #2]
   1f414:	cmp	r0, #0
   1f418:	beq	1f448 <ReadDataSlabN+0x1998>
   1f41c:	ldr	r1, [sp, #36]	; 0x24
   1f420:	ldr	r5, [r3, r8, lsl #2]
   1f424:	mov	r2, #1
   1f428:	mul	r0, r0, r1
   1f42c:	mul	r1, r0, r5
   1f430:	ldr	r0, [sp, #32]
   1f434:	ldr	r0, [r0]
   1f438:	bl	1a2c <fseek@plt>
   1f43c:	ldr	r0, [r4, r8, lsl #2]
   1f440:	add	r3, sp, #40	; 0x28
   1f444:	mla	sl, r0, r5, sl
   1f448:	ldr	r2, [fp, #8]
   1f44c:	add	r1, r8, #2
   1f450:	add	r0, r8, #1
   1f454:	cmp	r1, r2
   1f458:	blt	1f388 <ReadDataSlabN+0x18d8>
   1f45c:	b	1f484 <ReadDataSlabN+0x19d4>
   1f460:	ldr	r0, [sp, #8]
   1f464:	mov	r2, #1
   1f468:	ldr	r5, [r0, r8, lsl #2]
   1f46c:	ldr	r0, [sp, #36]	; 0x24
   1f470:	mul	r1, r5, r0
   1f474:	ldr	r0, [sp, #32]
   1f478:	ldr	r0, [r0]
   1f47c:	bl	1a2c <fseek@plt>
   1f480:	add	sl, r5, sl
   1f484:	ldr	r0, [fp, #24]
   1f488:	ldr	r5, [sp, #16]
   1f48c:	ldr	r1, [sp, #12]
   1f490:	ldr	r0, [r0]
   1f494:	add	r5, r0, r5
   1f498:	mov	r0, #0
   1f49c:	cmp	r5, r1
   1f4a0:	blt	1f2e4 <ReadDataSlabN+0x1834>
   1f4a4:	b	1db34 <ReadDataSlabN+0x84>
   1f4a8:	sub	r4, fp, #72	; 0x48
   1f4ac:	ldr	r0, [sp, #36]	; 0x24
   1f4b0:	mov	r2, #1
   1f4b4:	mul	r1, sl, r0
   1f4b8:	ldr	r0, [sp, #32]
   1f4bc:	ldr	r0, [r0]
   1f4c0:	bl	1a2c <fseek@plt>
   1f4c4:	ldr	r0, [fp, #20]
   1f4c8:	ldr	r0, [r0]
   1f4cc:	cmp	r0, #1
   1f4d0:	bne	208c0 <ReadDataSlabN+0x2e10>
   1f4d4:	ldr	r0, [sp, #12]
   1f4d8:	ldr	r1, [fp, #16]
   1f4dc:	cmp	r0, #1
   1f4e0:	ldr	r0, [fp, #24]
   1f4e4:	blt	21a6c <ReadDataSlabN+0x3fbc>
   1f4e8:	add	r0, r0, #4
   1f4ec:	mov	r2, r4
   1f4f0:	add	r4, r1, #4
   1f4f4:	mov	r5, #0
   1f4f8:	str	r0, [sp, #20]
   1f4fc:	add	r0, sp, #80	; 0x50
   1f500:	orr	r7, r0, #4
   1f504:	orr	r0, r2, #4
   1f508:	str	r0, [sp, #8]
   1f50c:	ldr	r6, [fp, #16]
   1f510:	ldr	r0, [r6]
   1f514:	cmp	r0, #0
   1f518:	beq	1f540 <ReadDataSlabN+0x1a90>
   1f51c:	ldr	r1, [sp, #36]	; 0x24
   1f520:	ldr	r9, [sp, #32]
   1f524:	mov	r2, #1
   1f528:	mul	r1, r0, r1
   1f52c:	ldr	r0, [r9]
   1f530:	bl	1a2c <fseek@plt>
   1f534:	ldr	r0, [r6]
   1f538:	add	sl, r0, sl
   1f53c:	b	1f544 <ReadDataSlabN+0x1a94>
   1f540:	ldr	r9, [sp, #32]
   1f544:	ldr	r0, [sp, #24]
   1f548:	ldr	r2, [sp, #28]
   1f54c:	str	r5, [sp, #16]
   1f550:	add	r1, r0, r5
   1f554:	ldr	r0, [fp, #24]
   1f558:	ldr	r3, [r0]
   1f55c:	mov	r5, r0
   1f560:	mov	r0, r9
   1f564:	bl	1b1ec <ReadUInt8Data>
   1f568:	ldr	r0, [fp, #12]
   1f56c:	ldr	r8, [r6]
   1f570:	ldr	r1, [r5]
   1f574:	mov	r2, #1
   1f578:	ldr	r6, [r0]
   1f57c:	sub	r0, r6, r8
   1f580:	sub	r0, r0, r1
   1f584:	ldr	r1, [sp, #36]	; 0x24
   1f588:	mul	r1, r0, r1
   1f58c:	ldr	r0, [r9]
   1f590:	bl	1a2c <fseek@plt>
   1f594:	add	r0, r6, sl
   1f598:	sub	sl, r0, r8
   1f59c:	ldr	r0, [fp, #8]
   1f5a0:	cmp	r0, #2
   1f5a4:	blt	1f6ac <ReadDataSlabN+0x1bfc>
   1f5a8:	mov	r0, #0
   1f5ac:	add	r3, sp, #40	; 0x28
   1f5b0:	mov	r8, r0
   1f5b4:	ldr	r0, [r7, r0, lsl #2]
   1f5b8:	ldr	r1, [sp, #20]
   1f5bc:	add	r0, r0, #1
   1f5c0:	str	r0, [r7, r8, lsl #2]
   1f5c4:	ldr	r1, [r1, r8, lsl #2]
   1f5c8:	sdiv	r2, r0, r1
   1f5cc:	mls	r0, r2, r1, r0
   1f5d0:	cmp	r0, #0
   1f5d4:	bne	1f688 <ReadDataSlabN+0x1bd8>
   1f5d8:	mov	r0, #0
   1f5dc:	str	r0, [r7, r8, lsl #2]
   1f5e0:	add	r0, r3, r8, lsl #2
   1f5e4:	ldr	r6, [r0, #4]
   1f5e8:	sdiv	r0, sl, r6
   1f5ec:	mls	r9, r0, r6, sl
   1f5f0:	cmp	r9, #0
   1f5f4:	beq	1f638 <ReadDataSlabN+0x1b88>
   1f5f8:	ldr	r5, [r3, r8, lsl #2]
   1f5fc:	ldr	r0, [r4, r8, lsl #2]
   1f600:	sub	r1, r6, r9
   1f604:	mov	r2, #1
   1f608:	mla	r0, r0, r5, r1
   1f60c:	ldr	r1, [sp, #36]	; 0x24
   1f610:	mul	r1, r0, r1
   1f614:	ldr	r0, [sp, #32]
   1f618:	ldr	r0, [r0]
   1f61c:	bl	1a2c <fseek@plt>
   1f620:	ldr	r0, [r4, r8, lsl #2]
   1f624:	add	r1, r6, sl
   1f628:	add	r3, sp, #40	; 0x28
   1f62c:	sub	r1, r1, r9
   1f630:	mla	sl, r0, r5, r1
   1f634:	b	1f670 <ReadDataSlabN+0x1bc0>
   1f638:	ldr	r0, [r4, r8, lsl #2]
   1f63c:	cmp	r0, #0
   1f640:	beq	1f670 <ReadDataSlabN+0x1bc0>
   1f644:	ldr	r1, [sp, #36]	; 0x24
   1f648:	ldr	r5, [r3, r8, lsl #2]
   1f64c:	mov	r2, #1
   1f650:	mul	r0, r0, r1
   1f654:	mul	r1, r0, r5
   1f658:	ldr	r0, [sp, #32]
   1f65c:	ldr	r0, [r0]
   1f660:	bl	1a2c <fseek@plt>
   1f664:	ldr	r0, [r4, r8, lsl #2]
   1f668:	add	r3, sp, #40	; 0x28
   1f66c:	mla	sl, r0, r5, sl
   1f670:	ldr	r2, [fp, #8]
   1f674:	add	r1, r8, #2
   1f678:	add	r0, r8, #1
   1f67c:	cmp	r1, r2
   1f680:	blt	1f5b0 <ReadDataSlabN+0x1b00>
   1f684:	b	1f6ac <ReadDataSlabN+0x1bfc>
   1f688:	ldr	r0, [sp, #8]
   1f68c:	mov	r2, #1
   1f690:	ldr	r5, [r0, r8, lsl #2]
   1f694:	ldr	r0, [sp, #36]	; 0x24
   1f698:	mul	r1, r5, r0
   1f69c:	ldr	r0, [sp, #32]
   1f6a0:	ldr	r0, [r0]
   1f6a4:	bl	1a2c <fseek@plt>
   1f6a8:	add	sl, r5, sl
   1f6ac:	ldr	r0, [fp, #24]
   1f6b0:	ldr	r5, [sp, #16]
   1f6b4:	ldr	r1, [sp, #12]
   1f6b8:	ldr	r0, [r0]
   1f6bc:	add	r5, r0, r5
   1f6c0:	mov	r0, #0
   1f6c4:	cmp	r5, r1
   1f6c8:	blt	1f50c <ReadDataSlabN+0x1a5c>
   1f6cc:	b	1db34 <ReadDataSlabN+0x84>
   1f6d0:	sub	r4, fp, #72	; 0x48
   1f6d4:	ldr	r0, [sp, #36]	; 0x24
   1f6d8:	mov	r2, #1
   1f6dc:	mul	r1, sl, r0
   1f6e0:	ldr	r0, [sp, #32]
   1f6e4:	ldr	r0, [r0]
   1f6e8:	bl	1a2c <fseek@plt>
   1f6ec:	ldr	r0, [fp, #20]
   1f6f0:	ldr	r0, [r0]
   1f6f4:	cmp	r0, #1
   1f6f8:	bne	20b38 <ReadDataSlabN+0x3088>
   1f6fc:	ldr	r0, [sp, #12]
   1f700:	ldr	r1, [fp, #16]
   1f704:	cmp	r0, #1
   1f708:	ldr	r0, [fp, #24]
   1f70c:	blt	21a6c <ReadDataSlabN+0x3fbc>
   1f710:	add	r0, r0, #4
   1f714:	mov	r2, r4
   1f718:	add	r4, r1, #4
   1f71c:	mov	r5, #0
   1f720:	str	r0, [sp, #20]
   1f724:	add	r0, sp, #80	; 0x50
   1f728:	orr	r7, r0, #4
   1f72c:	orr	r0, r2, #4
   1f730:	str	r0, [sp, #8]
   1f734:	ldr	r6, [fp, #16]
   1f738:	ldr	r0, [r6]
   1f73c:	cmp	r0, #0
   1f740:	beq	1f768 <ReadDataSlabN+0x1cb8>
   1f744:	ldr	r1, [sp, #36]	; 0x24
   1f748:	ldr	r9, [sp, #32]
   1f74c:	mov	r2, #1
   1f750:	mul	r1, r0, r1
   1f754:	ldr	r0, [r9]
   1f758:	bl	1a2c <fseek@plt>
   1f75c:	ldr	r0, [r6]
   1f760:	add	sl, r0, sl
   1f764:	b	1f76c <ReadDataSlabN+0x1cbc>
   1f768:	ldr	r9, [sp, #32]
   1f76c:	ldr	r0, [sp, #24]
   1f770:	ldr	r2, [sp, #28]
   1f774:	str	r5, [sp, #16]
   1f778:	add	r1, r0, r5, lsl #1
   1f77c:	ldr	r0, [fp, #24]
   1f780:	ldr	r3, [r0]
   1f784:	mov	r5, r0
   1f788:	mov	r0, r9
   1f78c:	bl	13c20 <ReadInt16Data>
   1f790:	ldr	r0, [fp, #12]
   1f794:	ldr	r8, [r6]
   1f798:	ldr	r1, [r5]
   1f79c:	mov	r2, #1
   1f7a0:	ldr	r6, [r0]
   1f7a4:	sub	r0, r6, r8
   1f7a8:	sub	r0, r0, r1
   1f7ac:	ldr	r1, [sp, #36]	; 0x24
   1f7b0:	mul	r1, r0, r1
   1f7b4:	ldr	r0, [r9]
   1f7b8:	bl	1a2c <fseek@plt>
   1f7bc:	add	r0, r6, sl
   1f7c0:	sub	sl, r0, r8
   1f7c4:	ldr	r0, [fp, #8]
   1f7c8:	cmp	r0, #2
   1f7cc:	blt	1f8d4 <ReadDataSlabN+0x1e24>
   1f7d0:	mov	r0, #0
   1f7d4:	add	r3, sp, #40	; 0x28
   1f7d8:	mov	r8, r0
   1f7dc:	ldr	r0, [r7, r0, lsl #2]
   1f7e0:	ldr	r1, [sp, #20]
   1f7e4:	add	r0, r0, #1
   1f7e8:	str	r0, [r7, r8, lsl #2]
   1f7ec:	ldr	r1, [r1, r8, lsl #2]
   1f7f0:	sdiv	r2, r0, r1
   1f7f4:	mls	r0, r2, r1, r0
   1f7f8:	cmp	r0, #0
   1f7fc:	bne	1f8b0 <ReadDataSlabN+0x1e00>
   1f800:	mov	r0, #0
   1f804:	str	r0, [r7, r8, lsl #2]
   1f808:	add	r0, r3, r8, lsl #2
   1f80c:	ldr	r6, [r0, #4]
   1f810:	sdiv	r0, sl, r6
   1f814:	mls	r9, r0, r6, sl
   1f818:	cmp	r9, #0
   1f81c:	beq	1f860 <ReadDataSlabN+0x1db0>
   1f820:	ldr	r5, [r3, r8, lsl #2]
   1f824:	ldr	r0, [r4, r8, lsl #2]
   1f828:	sub	r1, r6, r9
   1f82c:	mov	r2, #1
   1f830:	mla	r0, r0, r5, r1
   1f834:	ldr	r1, [sp, #36]	; 0x24
   1f838:	mul	r1, r0, r1
   1f83c:	ldr	r0, [sp, #32]
   1f840:	ldr	r0, [r0]
   1f844:	bl	1a2c <fseek@plt>
   1f848:	ldr	r0, [r4, r8, lsl #2]
   1f84c:	add	r1, r6, sl
   1f850:	add	r3, sp, #40	; 0x28
   1f854:	sub	r1, r1, r9
   1f858:	mla	sl, r0, r5, r1
   1f85c:	b	1f898 <ReadDataSlabN+0x1de8>
   1f860:	ldr	r0, [r4, r8, lsl #2]
   1f864:	cmp	r0, #0
   1f868:	beq	1f898 <ReadDataSlabN+0x1de8>
   1f86c:	ldr	r1, [sp, #36]	; 0x24
   1f870:	ldr	r5, [r3, r8, lsl #2]
   1f874:	mov	r2, #1
   1f878:	mul	r0, r0, r1
   1f87c:	mul	r1, r0, r5
   1f880:	ldr	r0, [sp, #32]
   1f884:	ldr	r0, [r0]
   1f888:	bl	1a2c <fseek@plt>
   1f88c:	ldr	r0, [r4, r8, lsl #2]
   1f890:	add	r3, sp, #40	; 0x28
   1f894:	mla	sl, r0, r5, sl
   1f898:	ldr	r2, [fp, #8]
   1f89c:	add	r1, r8, #2
   1f8a0:	add	r0, r8, #1
   1f8a4:	cmp	r1, r2
   1f8a8:	blt	1f7d8 <ReadDataSlabN+0x1d28>
   1f8ac:	b	1f8d4 <ReadDataSlabN+0x1e24>
   1f8b0:	ldr	r0, [sp, #8]
   1f8b4:	mov	r2, #1
   1f8b8:	ldr	r5, [r0, r8, lsl #2]
   1f8bc:	ldr	r0, [sp, #36]	; 0x24
   1f8c0:	mul	r1, r5, r0
   1f8c4:	ldr	r0, [sp, #32]
   1f8c8:	ldr	r0, [r0]
   1f8cc:	bl	1a2c <fseek@plt>
   1f8d0:	add	sl, r5, sl
   1f8d4:	ldr	r0, [fp, #24]
   1f8d8:	ldr	r5, [sp, #16]
   1f8dc:	ldr	r1, [sp, #12]
   1f8e0:	ldr	r0, [r0]
   1f8e4:	add	r5, r0, r5
   1f8e8:	mov	r0, #0
   1f8ec:	cmp	r5, r1
   1f8f0:	blt	1f734 <ReadDataSlabN+0x1c84>
   1f8f4:	b	1db34 <ReadDataSlabN+0x84>
   1f8f8:	sub	r4, fp, #72	; 0x48
   1f8fc:	ldr	r0, [sp, #36]	; 0x24
   1f900:	mov	r2, #1
   1f904:	mul	r1, sl, r0
   1f908:	ldr	r0, [sp, #32]
   1f90c:	ldr	r0, [r0]
   1f910:	bl	1a2c <fseek@plt>
   1f914:	ldr	r0, [fp, #20]
   1f918:	ldr	r0, [r0]
   1f91c:	cmp	r0, #1
   1f920:	bne	20dc0 <ReadDataSlabN+0x3310>
   1f924:	ldr	r0, [sp, #12]
   1f928:	ldr	r1, [fp, #16]
   1f92c:	cmp	r0, #1
   1f930:	ldr	r0, [fp, #24]
   1f934:	blt	21a6c <ReadDataSlabN+0x3fbc>
   1f938:	add	r0, r0, #4
   1f93c:	mov	r2, r4
   1f940:	add	r4, r1, #4
   1f944:	mov	r5, #0
   1f948:	str	r0, [sp, #20]
   1f94c:	add	r0, sp, #80	; 0x50
   1f950:	orr	r7, r0, #4
   1f954:	orr	r0, r2, #4
   1f958:	str	r0, [sp, #8]
   1f95c:	ldr	r6, [fp, #16]
   1f960:	ldr	r0, [r6]
   1f964:	cmp	r0, #0
   1f968:	beq	1f990 <ReadDataSlabN+0x1ee0>
   1f96c:	ldr	r1, [sp, #36]	; 0x24
   1f970:	ldr	r9, [sp, #32]
   1f974:	mov	r2, #1
   1f978:	mul	r1, r0, r1
   1f97c:	ldr	r0, [r9]
   1f980:	bl	1a2c <fseek@plt>
   1f984:	ldr	r0, [r6]
   1f988:	add	sl, r0, sl
   1f98c:	b	1f994 <ReadDataSlabN+0x1ee4>
   1f990:	ldr	r9, [sp, #32]
   1f994:	ldr	r0, [sp, #24]
   1f998:	ldr	r2, [sp, #28]
   1f99c:	str	r5, [sp, #16]
   1f9a0:	add	r1, r0, r5, lsl #1
   1f9a4:	ldr	r0, [fp, #24]
   1f9a8:	ldr	r3, [r0]
   1f9ac:	mov	r5, r0
   1f9b0:	mov	r0, r9
   1f9b4:	bl	163ec <ReadUInt16Data>
   1f9b8:	ldr	r0, [fp, #12]
   1f9bc:	ldr	r8, [r6]
   1f9c0:	ldr	r1, [r5]
   1f9c4:	mov	r2, #1
   1f9c8:	ldr	r6, [r0]
   1f9cc:	sub	r0, r6, r8
   1f9d0:	sub	r0, r0, r1
   1f9d4:	ldr	r1, [sp, #36]	; 0x24
   1f9d8:	mul	r1, r0, r1
   1f9dc:	ldr	r0, [r9]
   1f9e0:	bl	1a2c <fseek@plt>
   1f9e4:	add	r0, r6, sl
   1f9e8:	sub	sl, r0, r8
   1f9ec:	ldr	r0, [fp, #8]
   1f9f0:	cmp	r0, #2
   1f9f4:	blt	1fafc <ReadDataSlabN+0x204c>
   1f9f8:	mov	r0, #0
   1f9fc:	add	r3, sp, #40	; 0x28
   1fa00:	mov	r8, r0
   1fa04:	ldr	r0, [r7, r0, lsl #2]
   1fa08:	ldr	r1, [sp, #20]
   1fa0c:	add	r0, r0, #1
   1fa10:	str	r0, [r7, r8, lsl #2]
   1fa14:	ldr	r1, [r1, r8, lsl #2]
   1fa18:	sdiv	r2, r0, r1
   1fa1c:	mls	r0, r2, r1, r0
   1fa20:	cmp	r0, #0
   1fa24:	bne	1fad8 <ReadDataSlabN+0x2028>
   1fa28:	mov	r0, #0
   1fa2c:	str	r0, [r7, r8, lsl #2]
   1fa30:	add	r0, r3, r8, lsl #2
   1fa34:	ldr	r6, [r0, #4]
   1fa38:	sdiv	r0, sl, r6
   1fa3c:	mls	r9, r0, r6, sl
   1fa40:	cmp	r9, #0
   1fa44:	beq	1fa88 <ReadDataSlabN+0x1fd8>
   1fa48:	ldr	r5, [r3, r8, lsl #2]
   1fa4c:	ldr	r0, [r4, r8, lsl #2]
   1fa50:	sub	r1, r6, r9
   1fa54:	mov	r2, #1
   1fa58:	mla	r0, r0, r5, r1
   1fa5c:	ldr	r1, [sp, #36]	; 0x24
   1fa60:	mul	r1, r0, r1
   1fa64:	ldr	r0, [sp, #32]
   1fa68:	ldr	r0, [r0]
   1fa6c:	bl	1a2c <fseek@plt>
   1fa70:	ldr	r0, [r4, r8, lsl #2]
   1fa74:	add	r1, r6, sl
   1fa78:	add	r3, sp, #40	; 0x28
   1fa7c:	sub	r1, r1, r9
   1fa80:	mla	sl, r0, r5, r1
   1fa84:	b	1fac0 <ReadDataSlabN+0x2010>
   1fa88:	ldr	r0, [r4, r8, lsl #2]
   1fa8c:	cmp	r0, #0
   1fa90:	beq	1fac0 <ReadDataSlabN+0x2010>
   1fa94:	ldr	r1, [sp, #36]	; 0x24
   1fa98:	ldr	r5, [r3, r8, lsl #2]
   1fa9c:	mov	r2, #1
   1faa0:	mul	r0, r0, r1
   1faa4:	mul	r1, r0, r5
   1faa8:	ldr	r0, [sp, #32]
   1faac:	ldr	r0, [r0]
   1fab0:	bl	1a2c <fseek@plt>
   1fab4:	ldr	r0, [r4, r8, lsl #2]
   1fab8:	add	r3, sp, #40	; 0x28
   1fabc:	mla	sl, r0, r5, sl
   1fac0:	ldr	r2, [fp, #8]
   1fac4:	add	r1, r8, #2
   1fac8:	add	r0, r8, #1
   1facc:	cmp	r1, r2
   1fad0:	blt	1fa00 <ReadDataSlabN+0x1f50>
   1fad4:	b	1fafc <ReadDataSlabN+0x204c>
   1fad8:	ldr	r0, [sp, #8]
   1fadc:	mov	r2, #1
   1fae0:	ldr	r5, [r0, r8, lsl #2]
   1fae4:	ldr	r0, [sp, #36]	; 0x24
   1fae8:	mul	r1, r5, r0
   1faec:	ldr	r0, [sp, #32]
   1faf0:	ldr	r0, [r0]
   1faf4:	bl	1a2c <fseek@plt>
   1faf8:	add	sl, r5, sl
   1fafc:	ldr	r0, [fp, #24]
   1fb00:	ldr	r5, [sp, #16]
   1fb04:	ldr	r1, [sp, #12]
   1fb08:	ldr	r0, [r0]
   1fb0c:	add	r5, r0, r5
   1fb10:	mov	r0, #0
   1fb14:	cmp	r5, r1
   1fb18:	blt	1f95c <ReadDataSlabN+0x1eac>
   1fb1c:	b	1db34 <ReadDataSlabN+0x84>
   1fb20:	sub	r4, fp, #72	; 0x48
   1fb24:	ldr	r0, [sp, #36]	; 0x24
   1fb28:	mov	r2, #1
   1fb2c:	mul	r1, sl, r0
   1fb30:	ldr	r0, [sp, #32]
   1fb34:	ldr	r0, [r0]
   1fb38:	bl	1a2c <fseek@plt>
   1fb3c:	ldr	r0, [fp, #20]
   1fb40:	ldr	r0, [r0]
   1fb44:	cmp	r0, #1
   1fb48:	bne	21048 <ReadDataSlabN+0x3598>
   1fb4c:	ldr	r0, [sp, #12]
   1fb50:	ldr	r1, [fp, #16]
   1fb54:	cmp	r0, #1
   1fb58:	ldr	r0, [fp, #24]
   1fb5c:	blt	21a6c <ReadDataSlabN+0x3fbc>
   1fb60:	add	r0, r0, #4
   1fb64:	mov	r2, r4
   1fb68:	add	r4, r1, #4
   1fb6c:	mov	r5, #0
   1fb70:	str	r0, [sp, #20]
   1fb74:	add	r0, sp, #80	; 0x50
   1fb78:	orr	r7, r0, #4
   1fb7c:	orr	r0, r2, #4
   1fb80:	str	r0, [sp, #8]
   1fb84:	ldr	r6, [fp, #16]
   1fb88:	ldr	r0, [r6]
   1fb8c:	cmp	r0, #0
   1fb90:	beq	1fbb8 <ReadDataSlabN+0x2108>
   1fb94:	ldr	r1, [sp, #36]	; 0x24
   1fb98:	ldr	r9, [sp, #32]
   1fb9c:	mov	r2, #1
   1fba0:	mul	r1, r0, r1
   1fba4:	ldr	r0, [r9]
   1fba8:	bl	1a2c <fseek@plt>
   1fbac:	ldr	r0, [r6]
   1fbb0:	add	sl, r0, sl
   1fbb4:	b	1fbbc <ReadDataSlabN+0x210c>
   1fbb8:	ldr	r9, [sp, #32]
   1fbbc:	ldr	r0, [sp, #24]
   1fbc0:	ldr	r2, [sp, #28]
   1fbc4:	str	r5, [sp, #16]
   1fbc8:	add	r1, r0, r5, lsl #2
   1fbcc:	ldr	r0, [fp, #24]
   1fbd0:	ldr	r3, [r0]
   1fbd4:	mov	r5, r0
   1fbd8:	mov	r0, r9
   1fbdc:	bl	da88 <ReadInt32Data>
   1fbe0:	ldr	r0, [fp, #12]
   1fbe4:	ldr	r8, [r6]
   1fbe8:	ldr	r1, [r5]
   1fbec:	mov	r2, #1
   1fbf0:	ldr	r6, [r0]
   1fbf4:	sub	r0, r6, r8
   1fbf8:	sub	r0, r0, r1
   1fbfc:	ldr	r1, [sp, #36]	; 0x24
   1fc00:	mul	r1, r0, r1
   1fc04:	ldr	r0, [r9]
   1fc08:	bl	1a2c <fseek@plt>
   1fc0c:	add	r0, r6, sl
   1fc10:	sub	sl, r0, r8
   1fc14:	ldr	r0, [fp, #8]
   1fc18:	cmp	r0, #2
   1fc1c:	blt	1fd24 <ReadDataSlabN+0x2274>
   1fc20:	mov	r0, #0
   1fc24:	add	r3, sp, #40	; 0x28
   1fc28:	mov	r8, r0
   1fc2c:	ldr	r0, [r7, r0, lsl #2]
   1fc30:	ldr	r1, [sp, #20]
   1fc34:	add	r0, r0, #1
   1fc38:	str	r0, [r7, r8, lsl #2]
   1fc3c:	ldr	r1, [r1, r8, lsl #2]
   1fc40:	sdiv	r2, r0, r1
   1fc44:	mls	r0, r2, r1, r0
   1fc48:	cmp	r0, #0
   1fc4c:	bne	1fd00 <ReadDataSlabN+0x2250>
   1fc50:	mov	r0, #0
   1fc54:	str	r0, [r7, r8, lsl #2]
   1fc58:	add	r0, r3, r8, lsl #2
   1fc5c:	ldr	r6, [r0, #4]
   1fc60:	sdiv	r0, sl, r6
   1fc64:	mls	r9, r0, r6, sl
   1fc68:	cmp	r9, #0
   1fc6c:	beq	1fcb0 <ReadDataSlabN+0x2200>
   1fc70:	ldr	r5, [r3, r8, lsl #2]
   1fc74:	ldr	r0, [r4, r8, lsl #2]
   1fc78:	sub	r1, r6, r9
   1fc7c:	mov	r2, #1
   1fc80:	mla	r0, r0, r5, r1
   1fc84:	ldr	r1, [sp, #36]	; 0x24
   1fc88:	mul	r1, r0, r1
   1fc8c:	ldr	r0, [sp, #32]
   1fc90:	ldr	r0, [r0]
   1fc94:	bl	1a2c <fseek@plt>
   1fc98:	ldr	r0, [r4, r8, lsl #2]
   1fc9c:	add	r1, r6, sl
   1fca0:	add	r3, sp, #40	; 0x28
   1fca4:	sub	r1, r1, r9
   1fca8:	mla	sl, r0, r5, r1
   1fcac:	b	1fce8 <ReadDataSlabN+0x2238>
   1fcb0:	ldr	r0, [r4, r8, lsl #2]
   1fcb4:	cmp	r0, #0
   1fcb8:	beq	1fce8 <ReadDataSlabN+0x2238>
   1fcbc:	ldr	r1, [sp, #36]	; 0x24
   1fcc0:	ldr	r5, [r3, r8, lsl #2]
   1fcc4:	mov	r2, #1
   1fcc8:	mul	r0, r0, r1
   1fccc:	mul	r1, r0, r5
   1fcd0:	ldr	r0, [sp, #32]
   1fcd4:	ldr	r0, [r0]
   1fcd8:	bl	1a2c <fseek@plt>
   1fcdc:	ldr	r0, [r4, r8, lsl #2]
   1fce0:	add	r3, sp, #40	; 0x28
   1fce4:	mla	sl, r0, r5, sl
   1fce8:	ldr	r2, [fp, #8]
   1fcec:	add	r1, r8, #2
   1fcf0:	add	r0, r8, #1
   1fcf4:	cmp	r1, r2
   1fcf8:	blt	1fc28 <ReadDataSlabN+0x2178>
   1fcfc:	b	1fd24 <ReadDataSlabN+0x2274>
   1fd00:	ldr	r0, [sp, #8]
   1fd04:	mov	r2, #1
   1fd08:	ldr	r5, [r0, r8, lsl #2]
   1fd0c:	ldr	r0, [sp, #36]	; 0x24
   1fd10:	mul	r1, r5, r0
   1fd14:	ldr	r0, [sp, #32]
   1fd18:	ldr	r0, [r0]
   1fd1c:	bl	1a2c <fseek@plt>
   1fd20:	add	sl, r5, sl
   1fd24:	ldr	r0, [fp, #24]
   1fd28:	ldr	r5, [sp, #16]
   1fd2c:	ldr	r1, [sp, #12]
   1fd30:	ldr	r0, [r0]
   1fd34:	add	r5, r0, r5
   1fd38:	mov	r0, #0
   1fd3c:	cmp	r5, r1
   1fd40:	blt	1fb84 <ReadDataSlabN+0x20d4>
   1fd44:	b	1db34 <ReadDataSlabN+0x84>
   1fd48:	sub	r4, fp, #72	; 0x48
   1fd4c:	ldr	r0, [sp, #36]	; 0x24
   1fd50:	mov	r2, #1
   1fd54:	mul	r1, sl, r0
   1fd58:	ldr	r0, [sp, #32]
   1fd5c:	ldr	r0, [r0]
   1fd60:	bl	1a2c <fseek@plt>
   1fd64:	ldr	r0, [fp, #20]
   1fd68:	ldr	r0, [r0]
   1fd6c:	cmp	r0, #1
   1fd70:	bne	212d0 <ReadDataSlabN+0x3820>
   1fd74:	ldr	r0, [sp, #12]
   1fd78:	ldr	r1, [fp, #16]
   1fd7c:	cmp	r0, #1
   1fd80:	ldr	r0, [fp, #24]
   1fd84:	blt	21a6c <ReadDataSlabN+0x3fbc>
   1fd88:	add	r0, r0, #4
   1fd8c:	mov	r2, r4
   1fd90:	add	r4, r1, #4
   1fd94:	mov	r5, #0
   1fd98:	str	r0, [sp, #20]
   1fd9c:	add	r0, sp, #80	; 0x50
   1fda0:	orr	r7, r0, #4
   1fda4:	orr	r0, r2, #4
   1fda8:	str	r0, [sp, #8]
   1fdac:	ldr	r6, [fp, #16]
   1fdb0:	ldr	r0, [r6]
   1fdb4:	cmp	r0, #0
   1fdb8:	beq	1fde0 <ReadDataSlabN+0x2330>
   1fdbc:	ldr	r1, [sp, #36]	; 0x24
   1fdc0:	ldr	r9, [sp, #32]
   1fdc4:	mov	r2, #1
   1fdc8:	mul	r1, r0, r1
   1fdcc:	ldr	r0, [r9]
   1fdd0:	bl	1a2c <fseek@plt>
   1fdd4:	ldr	r0, [r6]
   1fdd8:	add	sl, r0, sl
   1fddc:	b	1fde4 <ReadDataSlabN+0x2334>
   1fde0:	ldr	r9, [sp, #32]
   1fde4:	ldr	r0, [sp, #24]
   1fde8:	ldr	r2, [sp, #28]
   1fdec:	str	r5, [sp, #16]
   1fdf0:	add	r1, r0, r5, lsl #2
   1fdf4:	ldr	r0, [fp, #24]
   1fdf8:	ldr	r3, [r0]
   1fdfc:	mov	r5, r0
   1fe00:	mov	r0, r9
   1fe04:	bl	10b54 <ReadUInt32Data>
   1fe08:	ldr	r0, [fp, #12]
   1fe0c:	ldr	r8, [r6]
   1fe10:	ldr	r1, [r5]
   1fe14:	mov	r2, #1
   1fe18:	ldr	r6, [r0]
   1fe1c:	sub	r0, r6, r8
   1fe20:	sub	r0, r0, r1
   1fe24:	ldr	r1, [sp, #36]	; 0x24
   1fe28:	mul	r1, r0, r1
   1fe2c:	ldr	r0, [r9]
   1fe30:	bl	1a2c <fseek@plt>
   1fe34:	add	r0, r6, sl
   1fe38:	sub	sl, r0, r8
   1fe3c:	ldr	r0, [fp, #8]
   1fe40:	cmp	r0, #2
   1fe44:	blt	1ff4c <ReadDataSlabN+0x249c>
   1fe48:	mov	r0, #0
   1fe4c:	add	r3, sp, #40	; 0x28
   1fe50:	mov	r8, r0
   1fe54:	ldr	r0, [r7, r0, lsl #2]
   1fe58:	ldr	r1, [sp, #20]
   1fe5c:	add	r0, r0, #1
   1fe60:	str	r0, [r7, r8, lsl #2]
   1fe64:	ldr	r1, [r1, r8, lsl #2]
   1fe68:	sdiv	r2, r0, r1
   1fe6c:	mls	r0, r2, r1, r0
   1fe70:	cmp	r0, #0
   1fe74:	bne	1ff28 <ReadDataSlabN+0x2478>
   1fe78:	mov	r0, #0
   1fe7c:	str	r0, [r7, r8, lsl #2]
   1fe80:	add	r0, r3, r8, lsl #2
   1fe84:	ldr	r6, [r0, #4]
   1fe88:	sdiv	r0, sl, r6
   1fe8c:	mls	r9, r0, r6, sl
   1fe90:	cmp	r9, #0
   1fe94:	beq	1fed8 <ReadDataSlabN+0x2428>
   1fe98:	ldr	r5, [r3, r8, lsl #2]
   1fe9c:	ldr	r0, [r4, r8, lsl #2]
   1fea0:	sub	r1, r6, r9
   1fea4:	mov	r2, #1
   1fea8:	mla	r0, r0, r5, r1
   1feac:	ldr	r1, [sp, #36]	; 0x24
   1feb0:	mul	r1, r0, r1
   1feb4:	ldr	r0, [sp, #32]
   1feb8:	ldr	r0, [r0]
   1febc:	bl	1a2c <fseek@plt>
   1fec0:	ldr	r0, [r4, r8, lsl #2]
   1fec4:	add	r1, r6, sl
   1fec8:	add	r3, sp, #40	; 0x28
   1fecc:	sub	r1, r1, r9
   1fed0:	mla	sl, r0, r5, r1
   1fed4:	b	1ff10 <ReadDataSlabN+0x2460>
   1fed8:	ldr	r0, [r4, r8, lsl #2]
   1fedc:	cmp	r0, #0
   1fee0:	beq	1ff10 <ReadDataSlabN+0x2460>
   1fee4:	ldr	r1, [sp, #36]	; 0x24
   1fee8:	ldr	r5, [r3, r8, lsl #2]
   1feec:	mov	r2, #1
   1fef0:	mul	r0, r0, r1
   1fef4:	mul	r1, r0, r5
   1fef8:	ldr	r0, [sp, #32]
   1fefc:	ldr	r0, [r0]
   1ff00:	bl	1a2c <fseek@plt>
   1ff04:	ldr	r0, [r4, r8, lsl #2]
   1ff08:	add	r3, sp, #40	; 0x28
   1ff0c:	mla	sl, r0, r5, sl
   1ff10:	ldr	r2, [fp, #8]
   1ff14:	add	r1, r8, #2
   1ff18:	add	r0, r8, #1
   1ff1c:	cmp	r1, r2
   1ff20:	blt	1fe50 <ReadDataSlabN+0x23a0>
   1ff24:	b	1ff4c <ReadDataSlabN+0x249c>
   1ff28:	ldr	r0, [sp, #8]
   1ff2c:	mov	r2, #1
   1ff30:	ldr	r5, [r0, r8, lsl #2]
   1ff34:	ldr	r0, [sp, #36]	; 0x24
   1ff38:	mul	r1, r5, r0
   1ff3c:	ldr	r0, [sp, #32]
   1ff40:	ldr	r0, [r0]
   1ff44:	bl	1a2c <fseek@plt>
   1ff48:	add	sl, r5, sl
   1ff4c:	ldr	r0, [fp, #24]
   1ff50:	ldr	r5, [sp, #16]
   1ff54:	ldr	r1, [sp, #12]
   1ff58:	ldr	r0, [r0]
   1ff5c:	add	r5, r0, r5
   1ff60:	mov	r0, #0
   1ff64:	cmp	r5, r1
   1ff68:	blt	1fdac <ReadDataSlabN+0x22fc>
   1ff6c:	b	1db34 <ReadDataSlabN+0x84>
   1ff70:	sub	r4, fp, #72	; 0x48
   1ff74:	ldr	r0, [sp, #36]	; 0x24
   1ff78:	mov	r2, #1
   1ff7c:	mul	r1, sl, r0
   1ff80:	ldr	r0, [sp, #32]
   1ff84:	ldr	r0, [r0]
   1ff88:	bl	1a2c <fseek@plt>
   1ff8c:	ldr	r0, [fp, #20]
   1ff90:	ldr	r0, [r0]
   1ff94:	cmp	r0, #1
   1ff98:	bne	21558 <ReadDataSlabN+0x3aa8>
   1ff9c:	ldr	r0, [sp, #12]
   1ffa0:	ldr	r1, [fp, #16]
   1ffa4:	cmp	r0, #1
   1ffa8:	ldr	r0, [fp, #24]
   1ffac:	blt	21a6c <ReadDataSlabN+0x3fbc>
   1ffb0:	add	r0, r0, #4
   1ffb4:	mov	r2, r4
   1ffb8:	add	r4, r1, #4
   1ffbc:	mov	r5, #0
   1ffc0:	str	r0, [sp, #20]
   1ffc4:	add	r0, sp, #80	; 0x50
   1ffc8:	orr	r7, r0, #4
   1ffcc:	orr	r0, r2, #4
   1ffd0:	str	r0, [sp, #8]
   1ffd4:	ldr	r6, [fp, #16]
   1ffd8:	ldr	r0, [r6]
   1ffdc:	cmp	r0, #0
   1ffe0:	beq	20008 <ReadDataSlabN+0x2558>
   1ffe4:	ldr	r1, [sp, #36]	; 0x24
   1ffe8:	ldr	r9, [sp, #32]
   1ffec:	mov	r2, #1
   1fff0:	mul	r1, r0, r1
   1fff4:	ldr	r0, [r9]
   1fff8:	bl	1a2c <fseek@plt>
   1fffc:	ldr	r0, [r6]
   20000:	add	sl, r0, sl
   20004:	b	2000c <ReadDataSlabN+0x255c>
   20008:	ldr	r9, [sp, #32]
   2000c:	ldr	r0, [sp, #24]
   20010:	ldr	r2, [sp, #28]
   20014:	str	r5, [sp, #16]
   20018:	add	r1, r0, r5, lsl #3
   2001c:	ldr	r0, [fp, #24]
   20020:	ldr	r3, [r0]
   20024:	mov	r5, r0
   20028:	mov	r0, r9
   2002c:	bl	9498 <ReadInt64Data>
   20030:	ldr	r0, [fp, #12]
   20034:	ldr	r8, [r6]
   20038:	ldr	r1, [r5]
   2003c:	mov	r2, #1
   20040:	ldr	r6, [r0]
   20044:	sub	r0, r6, r8
   20048:	sub	r0, r0, r1
   2004c:	ldr	r1, [sp, #36]	; 0x24
   20050:	mul	r1, r0, r1
   20054:	ldr	r0, [r9]
   20058:	bl	1a2c <fseek@plt>
   2005c:	add	r0, r6, sl
   20060:	sub	sl, r0, r8
   20064:	ldr	r0, [fp, #8]
   20068:	cmp	r0, #2
   2006c:	blt	20174 <ReadDataSlabN+0x26c4>
   20070:	mov	r0, #0
   20074:	add	r3, sp, #40	; 0x28
   20078:	mov	r8, r0
   2007c:	ldr	r0, [r7, r0, lsl #2]
   20080:	ldr	r1, [sp, #20]
   20084:	add	r0, r0, #1
   20088:	str	r0, [r7, r8, lsl #2]
   2008c:	ldr	r1, [r1, r8, lsl #2]
   20090:	sdiv	r2, r0, r1
   20094:	mls	r0, r2, r1, r0
   20098:	cmp	r0, #0
   2009c:	bne	20150 <ReadDataSlabN+0x26a0>
   200a0:	mov	r0, #0
   200a4:	str	r0, [r7, r8, lsl #2]
   200a8:	add	r0, r3, r8, lsl #2
   200ac:	ldr	r6, [r0, #4]
   200b0:	sdiv	r0, sl, r6
   200b4:	mls	r9, r0, r6, sl
   200b8:	cmp	r9, #0
   200bc:	beq	20100 <ReadDataSlabN+0x2650>
   200c0:	ldr	r5, [r3, r8, lsl #2]
   200c4:	ldr	r0, [r4, r8, lsl #2]
   200c8:	sub	r1, r6, r9
   200cc:	mov	r2, #1
   200d0:	mla	r0, r0, r5, r1
   200d4:	ldr	r1, [sp, #36]	; 0x24
   200d8:	mul	r1, r0, r1
   200dc:	ldr	r0, [sp, #32]
   200e0:	ldr	r0, [r0]
   200e4:	bl	1a2c <fseek@plt>
   200e8:	ldr	r0, [r4, r8, lsl #2]
   200ec:	add	r1, r6, sl
   200f0:	add	r3, sp, #40	; 0x28
   200f4:	sub	r1, r1, r9
   200f8:	mla	sl, r0, r5, r1
   200fc:	b	20138 <ReadDataSlabN+0x2688>
   20100:	ldr	r0, [r4, r8, lsl #2]
   20104:	cmp	r0, #0
   20108:	beq	20138 <ReadDataSlabN+0x2688>
   2010c:	ldr	r1, [sp, #36]	; 0x24
   20110:	ldr	r5, [r3, r8, lsl #2]
   20114:	mov	r2, #1
   20118:	mul	r0, r0, r1
   2011c:	mul	r1, r0, r5
   20120:	ldr	r0, [sp, #32]
   20124:	ldr	r0, [r0]
   20128:	bl	1a2c <fseek@plt>
   2012c:	ldr	r0, [r4, r8, lsl #2]
   20130:	add	r3, sp, #40	; 0x28
   20134:	mla	sl, r0, r5, sl
   20138:	ldr	r2, [fp, #8]
   2013c:	add	r1, r8, #2
   20140:	add	r0, r8, #1
   20144:	cmp	r1, r2
   20148:	blt	20078 <ReadDataSlabN+0x25c8>
   2014c:	b	20174 <ReadDataSlabN+0x26c4>
   20150:	ldr	r0, [sp, #8]
   20154:	mov	r2, #1
   20158:	ldr	r5, [r0, r8, lsl #2]
   2015c:	ldr	r0, [sp, #36]	; 0x24
   20160:	mul	r1, r5, r0
   20164:	ldr	r0, [sp, #32]
   20168:	ldr	r0, [r0]
   2016c:	bl	1a2c <fseek@plt>
   20170:	add	sl, r5, sl
   20174:	ldr	r0, [fp, #24]
   20178:	ldr	r5, [sp, #16]
   2017c:	ldr	r1, [sp, #12]
   20180:	ldr	r0, [r0]
   20184:	add	r5, r0, r5
   20188:	mov	r0, #0
   2018c:	cmp	r5, r1
   20190:	blt	1ffd4 <ReadDataSlabN+0x2524>
   20194:	b	1db34 <ReadDataSlabN+0x84>
   20198:	sub	r4, fp, #72	; 0x48
   2019c:	ldr	r0, [sp, #36]	; 0x24
   201a0:	mov	r2, #1
   201a4:	mul	r1, sl, r0
   201a8:	ldr	r0, [sp, #32]
   201ac:	ldr	r0, [r0]
   201b0:	bl	1a2c <fseek@plt>
   201b4:	ldr	r0, [fp, #20]
   201b8:	ldr	r0, [r0]
   201bc:	cmp	r0, #1
   201c0:	bne	217e4 <ReadDataSlabN+0x3d34>
   201c4:	ldr	r0, [sp, #12]
   201c8:	ldr	r1, [fp, #16]
   201cc:	cmp	r0, #1
   201d0:	ldr	r0, [fp, #24]
   201d4:	blt	21a6c <ReadDataSlabN+0x3fbc>
   201d8:	add	r0, r0, #4
   201dc:	mov	r2, r4
   201e0:	add	r4, r1, #4
   201e4:	mov	r5, #0
   201e8:	str	r0, [sp, #20]
   201ec:	add	r0, sp, #80	; 0x50
   201f0:	orr	r7, r0, #4
   201f4:	orr	r0, r2, #4
   201f8:	str	r0, [sp, #8]
   201fc:	ldr	r6, [fp, #16]
   20200:	ldr	r0, [r6]
   20204:	cmp	r0, #0
   20208:	beq	20230 <ReadDataSlabN+0x2780>
   2020c:	ldr	r1, [sp, #36]	; 0x24
   20210:	ldr	r9, [sp, #32]
   20214:	mov	r2, #1
   20218:	mul	r1, r0, r1
   2021c:	ldr	r0, [r9]
   20220:	bl	1a2c <fseek@plt>
   20224:	ldr	r0, [r6]
   20228:	add	sl, r0, sl
   2022c:	b	20234 <ReadDataSlabN+0x2784>
   20230:	ldr	r9, [sp, #32]
   20234:	ldr	r0, [sp, #24]
   20238:	ldr	r2, [sp, #28]
   2023c:	str	r5, [sp, #16]
   20240:	add	r1, r0, r5, lsl #3
   20244:	ldr	r0, [fp, #24]
   20248:	ldr	r3, [r0]
   2024c:	mov	r5, r0
   20250:	mov	r0, r9
   20254:	bl	b790 <ReadUInt64Data>
   20258:	ldr	r0, [fp, #12]
   2025c:	ldr	r8, [r6]
   20260:	ldr	r1, [r5]
   20264:	mov	r2, #1
   20268:	ldr	r6, [r0]
   2026c:	sub	r0, r6, r8
   20270:	sub	r0, r0, r1
   20274:	ldr	r1, [sp, #36]	; 0x24
   20278:	mul	r1, r0, r1
   2027c:	ldr	r0, [r9]
   20280:	bl	1a2c <fseek@plt>
   20284:	add	r0, r6, sl
   20288:	sub	sl, r0, r8
   2028c:	ldr	r0, [fp, #8]
   20290:	cmp	r0, #2
   20294:	blt	2039c <ReadDataSlabN+0x28ec>
   20298:	mov	r0, #0
   2029c:	add	r3, sp, #40	; 0x28
   202a0:	mov	r8, r0
   202a4:	ldr	r0, [r7, r0, lsl #2]
   202a8:	ldr	r1, [sp, #20]
   202ac:	add	r0, r0, #1
   202b0:	str	r0, [r7, r8, lsl #2]
   202b4:	ldr	r1, [r1, r8, lsl #2]
   202b8:	sdiv	r2, r0, r1
   202bc:	mls	r0, r2, r1, r0
   202c0:	cmp	r0, #0
   202c4:	bne	20378 <ReadDataSlabN+0x28c8>
   202c8:	mov	r0, #0
   202cc:	str	r0, [r7, r8, lsl #2]
   202d0:	add	r0, r3, r8, lsl #2
   202d4:	ldr	r6, [r0, #4]
   202d8:	sdiv	r0, sl, r6
   202dc:	mls	r9, r0, r6, sl
   202e0:	cmp	r9, #0
   202e4:	beq	20328 <ReadDataSlabN+0x2878>
   202e8:	ldr	r5, [r3, r8, lsl #2]
   202ec:	ldr	r0, [r4, r8, lsl #2]
   202f0:	sub	r1, r6, r9
   202f4:	mov	r2, #1
   202f8:	mla	r0, r0, r5, r1
   202fc:	ldr	r1, [sp, #36]	; 0x24
   20300:	mul	r1, r0, r1
   20304:	ldr	r0, [sp, #32]
   20308:	ldr	r0, [r0]
   2030c:	bl	1a2c <fseek@plt>
   20310:	ldr	r0, [r4, r8, lsl #2]
   20314:	add	r1, r6, sl
   20318:	add	r3, sp, #40	; 0x28
   2031c:	sub	r1, r1, r9
   20320:	mla	sl, r0, r5, r1
   20324:	b	20360 <ReadDataSlabN+0x28b0>
   20328:	ldr	r0, [r4, r8, lsl #2]
   2032c:	cmp	r0, #0
   20330:	beq	20360 <ReadDataSlabN+0x28b0>
   20334:	ldr	r1, [sp, #36]	; 0x24
   20338:	ldr	r5, [r3, r8, lsl #2]
   2033c:	mov	r2, #1
   20340:	mul	r0, r0, r1
   20344:	mul	r1, r0, r5
   20348:	ldr	r0, [sp, #32]
   2034c:	ldr	r0, [r0]
   20350:	bl	1a2c <fseek@plt>
   20354:	ldr	r0, [r4, r8, lsl #2]
   20358:	add	r3, sp, #40	; 0x28
   2035c:	mla	sl, r0, r5, sl
   20360:	ldr	r2, [fp, #8]
   20364:	add	r1, r8, #2
   20368:	add	r0, r8, #1
   2036c:	cmp	r1, r2
   20370:	blt	202a0 <ReadDataSlabN+0x27f0>
   20374:	b	2039c <ReadDataSlabN+0x28ec>
   20378:	ldr	r0, [sp, #8]
   2037c:	mov	r2, #1
   20380:	ldr	r5, [r0, r8, lsl #2]
   20384:	ldr	r0, [sp, #36]	; 0x24
   20388:	mul	r1, r5, r0
   2038c:	ldr	r0, [sp, #32]
   20390:	ldr	r0, [r0]
   20394:	bl	1a2c <fseek@plt>
   20398:	add	sl, r5, sl
   2039c:	ldr	r0, [fp, #24]
   203a0:	ldr	r5, [sp, #16]
   203a4:	ldr	r1, [sp, #12]
   203a8:	ldr	r0, [r0]
   203ac:	add	r5, r0, r5
   203b0:	mov	r0, #0
   203b4:	cmp	r5, r1
   203b8:	blt	201fc <ReadDataSlabN+0x274c>
   203bc:	b	1db34 <ReadDataSlabN+0x84>
   203c0:	ldr	r0, [sp, #12]
   203c4:	ldr	r1, [fp, #16]
   203c8:	cmp	r0, #1
   203cc:	ldr	r0, [fp, #24]
   203d0:	blt	21a6c <ReadDataSlabN+0x3fbc>
   203d4:	add	r0, r0, #4
   203d8:	add	r8, r1, #4
   203dc:	mov	r5, #0
   203e0:	str	r0, [sp, #20]
   203e4:	add	r0, sp, #80	; 0x50
   203e8:	str	r8, [sp, #4]
   203ec:	orr	r9, r0, #4
   203f0:	orr	r0, r4, #4
   203f4:	str	r0, [sp]
   203f8:	str	r9, [sp, #16]
   203fc:	ldr	r4, [fp, #16]
   20400:	ldr	r0, [r4]
   20404:	cmp	r0, #0
   20408:	beq	20434 <ReadDataSlabN+0x2984>
   2040c:	ldr	r1, [sp, #36]	; 0x24
   20410:	ldr	r6, [sp, #32]
   20414:	mov	r2, #1
   20418:	mul	r1, r0, r1
   2041c:	ldr	r0, [r6]
   20420:	bl	1a2c <fseek@plt>
   20424:	ldr	r0, [r4]
   20428:	mov	r4, r6
   2042c:	add	sl, r0, sl
   20430:	b	2043c <ReadDataSlabN+0x298c>
   20434:	ldr	r4, [sp, #32]
   20438:	mov	r0, #0
   2043c:	ldr	r7, [fp, #24]
   20440:	ldr	r3, [fp, #12]
   20444:	ldr	r2, [sp, #28]
   20448:	str	r5, [sp, #8]
   2044c:	ldr	r1, [r7]
   20450:	cmp	r1, #0
   20454:	ble	204d8 <ReadDataSlabN+0x2a28>
   20458:	ldr	r0, [sp, #24]
   2045c:	ldr	r8, [sp, #36]	; 0x24
   20460:	ldr	r7, [fp, #20]
   20464:	mov	r9, #0
   20468:	add	r5, r0, r5, lsl #2
   2046c:	mov	r0, r4
   20470:	mov	r1, r5
   20474:	mov	r3, #1
   20478:	mov	r6, r2
   2047c:	bl	6fa0 <ReadSingleData>
   20480:	ldr	r0, [r7]
   20484:	mov	r2, #1
   20488:	sub	r0, r0, #1
   2048c:	mul	r1, r0, r8
   20490:	ldr	r0, [r4]
   20494:	bl	1a2c <fseek@plt>
   20498:	ldr	r0, [fp, #24]
   2049c:	mov	r2, r6
   204a0:	ldr	r6, [r7]
   204a4:	add	r9, r9, #1
   204a8:	add	r5, r5, #4
   204ac:	ldr	r1, [r0]
   204b0:	add	sl, r6, sl
   204b4:	cmp	r9, r1
   204b8:	blt	2046c <ReadDataSlabN+0x29bc>
   204bc:	ldr	r0, [fp, #16]
   204c0:	ldr	r3, [fp, #12]
   204c4:	ldr	r8, [sp, #4]
   204c8:	ldr	r9, [sp, #16]
   204cc:	ldr	r7, [fp, #24]
   204d0:	ldr	r0, [r0]
   204d4:	b	204e0 <ReadDataSlabN+0x2a30>
   204d8:	ldr	r2, [fp, #20]
   204dc:	ldr	r6, [r2]
   204e0:	ldr	r3, [r3]
   204e4:	mov	r2, #1
   204e8:	mls	r1, r6, r1, r3
   204ec:	sub	r5, r1, r0
   204f0:	ldr	r0, [sp, #36]	; 0x24
   204f4:	mul	r1, r5, r0
   204f8:	ldr	r0, [r4]
   204fc:	bl	1a2c <fseek@plt>
   20500:	ldr	r0, [fp, #8]
   20504:	add	sl, r5, sl
   20508:	cmp	r0, #2
   2050c:	blt	20628 <ReadDataSlabN+0x2b78>
   20510:	mov	r0, #0
   20514:	add	r3, sp, #40	; 0x28
   20518:	mov	r5, r0
   2051c:	ldr	r0, [r9, r0, lsl #2]
   20520:	ldr	r1, [sp, #20]
   20524:	add	r0, r0, #1
   20528:	str	r0, [r9, r5, lsl #2]
   2052c:	ldr	r1, [r1, r5, lsl #2]
   20530:	sdiv	r2, r0, r1
   20534:	mls	r0, r2, r1, r0
   20538:	cmp	r0, #0
   2053c:	bne	20604 <ReadDataSlabN+0x2b54>
   20540:	mov	r0, #0
   20544:	str	r0, [r9, r5, lsl #2]
   20548:	add	r0, r3, r5, lsl #2
   2054c:	ldr	r6, [r0, #4]
   20550:	sdiv	r0, sl, r6
   20554:	mls	r7, r0, r6, sl
   20558:	cmp	r7, #0
   2055c:	beq	205a4 <ReadDataSlabN+0x2af4>
   20560:	ldr	r9, [r3, r5, lsl #2]
   20564:	ldr	r0, [r8, r5, lsl #2]
   20568:	sub	r1, r6, r7
   2056c:	ldr	r4, [sp, #32]
   20570:	mov	r2, #1
   20574:	mla	r0, r0, r9, r1
   20578:	ldr	r1, [sp, #36]	; 0x24
   2057c:	mul	r1, r0, r1
   20580:	ldr	r0, [r4]
   20584:	bl	1a2c <fseek@plt>
   20588:	ldr	r0, [r8, r5, lsl #2]
   2058c:	add	r1, r6, sl
   20590:	add	r3, sp, #40	; 0x28
   20594:	sub	r1, r1, r7
   20598:	mla	sl, r0, r9, r1
   2059c:	ldr	r9, [sp, #16]
   205a0:	b	205e8 <ReadDataSlabN+0x2b38>
   205a4:	ldr	r0, [r8, r5, lsl #2]
   205a8:	cmp	r0, #0
   205ac:	beq	205e4 <ReadDataSlabN+0x2b34>
   205b0:	ldr	r1, [sp, #36]	; 0x24
   205b4:	ldr	r4, [r3, r5, lsl #2]
   205b8:	ldr	r6, [sp, #32]
   205bc:	mov	r2, #1
   205c0:	mul	r0, r0, r1
   205c4:	mul	r1, r0, r4
   205c8:	ldr	r0, [r6]
   205cc:	bl	1a2c <fseek@plt>
   205d0:	ldr	r0, [r8, r5, lsl #2]
   205d4:	add	r3, sp, #40	; 0x28
   205d8:	mla	sl, r0, r4, sl
   205dc:	mov	r4, r6
   205e0:	b	205e8 <ReadDataSlabN+0x2b38>
   205e4:	ldr	r4, [sp, #32]
   205e8:	ldr	r2, [fp, #8]
   205ec:	ldr	r7, [fp, #24]
   205f0:	add	r1, r5, #2
   205f4:	add	r0, r5, #1
   205f8:	cmp	r1, r2
   205fc:	blt	20518 <ReadDataSlabN+0x2a68>
   20600:	b	20628 <ReadDataSlabN+0x2b78>
   20604:	ldr	r0, [sp]
   20608:	mov	r2, r4
   2060c:	ldr	r4, [r0, r5, lsl #2]
   20610:	ldr	r0, [sp, #36]	; 0x24
   20614:	mul	r1, r4, r0
   20618:	ldr	r0, [r2]
   2061c:	mov	r2, #1
   20620:	bl	1a2c <fseek@plt>
   20624:	add	sl, r4, sl
   20628:	ldr	r0, [r7]
   2062c:	ldr	r5, [sp, #8]
   20630:	ldr	r1, [sp, #12]
   20634:	add	r5, r0, r5
   20638:	mov	r0, #0
   2063c:	cmp	r5, r1
   20640:	blt	203fc <ReadDataSlabN+0x294c>
   20644:	b	1db34 <ReadDataSlabN+0x84>
   20648:	ldr	r0, [sp, #12]
   2064c:	ldr	r1, [fp, #16]
   20650:	cmp	r0, #1
   20654:	ldr	r0, [fp, #24]
   20658:	blt	21a6c <ReadDataSlabN+0x3fbc>
   2065c:	add	r0, r0, #4
   20660:	add	r9, r1, #4
   20664:	mov	r6, #0
   20668:	str	r0, [sp, #20]
   2066c:	add	r0, sp, #80	; 0x50
   20670:	str	r9, [sp, #4]
   20674:	orr	ip, r0, #4
   20678:	orr	r0, r4, #4
   2067c:	str	r0, [sp]
   20680:	str	ip, [sp, #16]
   20684:	ldr	r5, [fp, #16]
   20688:	ldr	r0, [r5]
   2068c:	cmp	r0, #0
   20690:	beq	206b8 <ReadDataSlabN+0x2c08>
   20694:	ldr	r1, [sp, #36]	; 0x24
   20698:	ldr	r4, [sp, #32]
   2069c:	mov	r2, #1
   206a0:	mul	r1, r0, r1
   206a4:	ldr	r0, [r4]
   206a8:	bl	1a2c <fseek@plt>
   206ac:	ldr	r0, [r5]
   206b0:	add	sl, r0, sl
   206b4:	b	206c0 <ReadDataSlabN+0x2c10>
   206b8:	ldr	r4, [sp, #32]
   206bc:	mov	r0, #0
   206c0:	ldr	r7, [fp, #24]
   206c4:	ldr	r3, [fp, #12]
   206c8:	str	r6, [sp, #8]
   206cc:	ldr	r1, [r7]
   206d0:	cmp	r1, #0
   206d4:	ble	20750 <ReadDataSlabN+0x2ca0>
   206d8:	ldr	r0, [sp, #24]
   206dc:	ldr	r5, [sp, #28]
   206e0:	ldr	r9, [sp, #36]	; 0x24
   206e4:	ldr	r8, [fp, #20]
   206e8:	add	r7, r0, r6
   206ec:	mov	r6, #0
   206f0:	add	r1, r7, r6
   206f4:	mov	r0, r4
   206f8:	mov	r2, r5
   206fc:	mov	r3, #1
   20700:	bl	18bb8 <ReadInt8Data>
   20704:	ldr	r0, [r8]
   20708:	mov	r2, #1
   2070c:	sub	r0, r0, #1
   20710:	mul	r1, r0, r9
   20714:	ldr	r0, [r4]
   20718:	bl	1a2c <fseek@plt>
   2071c:	ldr	r0, [fp, #24]
   20720:	ldr	r2, [r8]
   20724:	add	r6, r6, #1
   20728:	ldr	r1, [r0]
   2072c:	add	sl, r2, sl
   20730:	cmp	r6, r1
   20734:	blt	206f0 <ReadDataSlabN+0x2c40>
   20738:	ldr	r0, [fp, #16]
   2073c:	ldr	r7, [fp, #24]
   20740:	ldr	r3, [fp, #12]
   20744:	ldr	r9, [sp, #4]
   20748:	ldr	r0, [r0]
   2074c:	b	20758 <ReadDataSlabN+0x2ca8>
   20750:	ldr	r2, [fp, #20]
   20754:	ldr	r2, [r2]
   20758:	ldr	r3, [r3]
   2075c:	mls	r1, r2, r1, r3
   20760:	mov	r2, #1
   20764:	sub	r6, r1, r0
   20768:	ldr	r0, [sp, #36]	; 0x24
   2076c:	mul	r1, r6, r0
   20770:	ldr	r0, [r4]
   20774:	bl	1a2c <fseek@plt>
   20778:	ldr	r0, [fp, #8]
   2077c:	add	sl, r6, sl
   20780:	cmp	r0, #2
   20784:	blt	208a0 <ReadDataSlabN+0x2df0>
   20788:	ldr	ip, [sp, #16]
   2078c:	mov	r0, #0
   20790:	add	r3, sp, #40	; 0x28
   20794:	mov	r8, r0
   20798:	ldr	r0, [ip, r0, lsl #2]
   2079c:	ldr	r1, [sp, #20]
   207a0:	add	r0, r0, #1
   207a4:	str	r0, [ip, r8, lsl #2]
   207a8:	ldr	r1, [r1, r8, lsl #2]
   207ac:	sdiv	r2, r0, r1
   207b0:	mls	r0, r2, r1, r0
   207b4:	cmp	r0, #0
   207b8:	bne	20880 <ReadDataSlabN+0x2dd0>
   207bc:	mov	r0, #0
   207c0:	str	r0, [ip, r8, lsl #2]
   207c4:	add	r0, r3, r8, lsl #2
   207c8:	ldr	r6, [r0, #4]
   207cc:	sdiv	r0, sl, r6
   207d0:	mls	r7, r0, r6, sl
   207d4:	cmp	r7, #0
   207d8:	beq	20820 <ReadDataSlabN+0x2d70>
   207dc:	ldr	r5, [r3, r8, lsl #2]
   207e0:	ldr	r0, [r9, r8, lsl #2]
   207e4:	sub	r1, r6, r7
   207e8:	ldr	r4, [sp, #32]
   207ec:	mov	r2, #1
   207f0:	mla	r0, r0, r5, r1
   207f4:	ldr	r1, [sp, #36]	; 0x24
   207f8:	mul	r1, r0, r1
   207fc:	ldr	r0, [r4]
   20800:	bl	1a2c <fseek@plt>
   20804:	ldr	r0, [r9, r8, lsl #2]
   20808:	ldr	ip, [sp, #16]
   2080c:	add	r1, r6, sl
   20810:	add	r3, sp, #40	; 0x28
   20814:	sub	r1, r1, r7
   20818:	mla	sl, r0, r5, r1
   2081c:	b	20864 <ReadDataSlabN+0x2db4>
   20820:	ldr	r0, [r9, r8, lsl #2]
   20824:	cmp	r0, #0
   20828:	beq	20860 <ReadDataSlabN+0x2db0>
   2082c:	ldr	r1, [sp, #36]	; 0x24
   20830:	ldr	r5, [r3, r8, lsl #2]
   20834:	ldr	r4, [sp, #32]
   20838:	mov	r2, #1
   2083c:	mul	r0, r0, r1
   20840:	mul	r1, r0, r5
   20844:	ldr	r0, [r4]
   20848:	bl	1a2c <fseek@plt>
   2084c:	ldr	r0, [r9, r8, lsl #2]
   20850:	ldr	ip, [sp, #16]
   20854:	add	r3, sp, #40	; 0x28
   20858:	mla	sl, r0, r5, sl
   2085c:	b	20864 <ReadDataSlabN+0x2db4>
   20860:	ldr	r4, [sp, #32]
   20864:	ldr	r2, [fp, #8]
   20868:	ldr	r7, [fp, #24]
   2086c:	add	r1, r8, #2
   20870:	add	r0, r8, #1
   20874:	cmp	r1, r2
   20878:	blt	20794 <ReadDataSlabN+0x2ce4>
   2087c:	b	208a0 <ReadDataSlabN+0x2df0>
   20880:	ldr	r0, [sp]
   20884:	mov	r2, #1
   20888:	ldr	r5, [r0, r8, lsl #2]
   2088c:	ldr	r0, [sp, #36]	; 0x24
   20890:	mul	r1, r5, r0
   20894:	ldr	r0, [r4]
   20898:	bl	1a2c <fseek@plt>
   2089c:	add	sl, r5, sl
   208a0:	ldr	r0, [r7]
   208a4:	ldr	r6, [sp, #8]
   208a8:	ldr	r1, [sp, #12]
   208ac:	add	r6, r0, r6
   208b0:	mov	r0, #0
   208b4:	cmp	r6, r1
   208b8:	blt	20684 <ReadDataSlabN+0x2bd4>
   208bc:	b	1db34 <ReadDataSlabN+0x84>
   208c0:	ldr	r0, [sp, #12]
   208c4:	ldr	r1, [fp, #16]
   208c8:	cmp	r0, #1
   208cc:	ldr	r0, [fp, #24]
   208d0:	blt	21a6c <ReadDataSlabN+0x3fbc>
   208d4:	add	r0, r0, #4
   208d8:	add	r9, r1, #4
   208dc:	mov	r6, #0
   208e0:	str	r0, [sp, #20]
   208e4:	add	r0, sp, #80	; 0x50
   208e8:	str	r9, [sp, #4]
   208ec:	orr	ip, r0, #4
   208f0:	orr	r0, r4, #4
   208f4:	str	r0, [sp]
   208f8:	str	ip, [sp, #16]
   208fc:	ldr	r5, [fp, #16]
   20900:	ldr	r0, [r5]
   20904:	cmp	r0, #0
   20908:	beq	20930 <ReadDataSlabN+0x2e80>
   2090c:	ldr	r1, [sp, #36]	; 0x24
   20910:	ldr	r4, [sp, #32]
   20914:	mov	r2, #1
   20918:	mul	r1, r0, r1
   2091c:	ldr	r0, [r4]
   20920:	bl	1a2c <fseek@plt>
   20924:	ldr	r0, [r5]
   20928:	add	sl, r0, sl
   2092c:	b	20938 <ReadDataSlabN+0x2e88>
   20930:	ldr	r4, [sp, #32]
   20934:	mov	r0, #0
   20938:	ldr	r7, [fp, #24]
   2093c:	ldr	r3, [fp, #12]
   20940:	str	r6, [sp, #8]
   20944:	ldr	r1, [r7]
   20948:	cmp	r1, #0
   2094c:	ble	209c8 <ReadDataSlabN+0x2f18>
   20950:	ldr	r0, [sp, #24]
   20954:	ldr	r5, [sp, #28]
   20958:	ldr	r9, [sp, #36]	; 0x24
   2095c:	ldr	r8, [fp, #20]
   20960:	add	r7, r0, r6
   20964:	mov	r6, #0
   20968:	add	r1, r7, r6
   2096c:	mov	r0, r4
   20970:	mov	r2, r5
   20974:	mov	r3, #1
   20978:	bl	1b1ec <ReadUInt8Data>
   2097c:	ldr	r0, [r8]
   20980:	mov	r2, #1
   20984:	sub	r0, r0, #1
   20988:	mul	r1, r0, r9
   2098c:	ldr	r0, [r4]
   20990:	bl	1a2c <fseek@plt>
   20994:	ldr	r0, [fp, #24]
   20998:	ldr	r2, [r8]
   2099c:	add	r6, r6, #1
   209a0:	ldr	r1, [r0]
   209a4:	add	sl, r2, sl
   209a8:	cmp	r6, r1
   209ac:	blt	20968 <ReadDataSlabN+0x2eb8>
   209b0:	ldr	r0, [fp, #16]
   209b4:	ldr	r7, [fp, #24]
   209b8:	ldr	r3, [fp, #12]
   209bc:	ldr	r9, [sp, #4]
   209c0:	ldr	r0, [r0]
   209c4:	b	209d0 <ReadDataSlabN+0x2f20>
   209c8:	ldr	r2, [fp, #20]
   209cc:	ldr	r2, [r2]
   209d0:	ldr	r3, [r3]
   209d4:	mls	r1, r2, r1, r3
   209d8:	mov	r2, #1
   209dc:	sub	r6, r1, r0
   209e0:	ldr	r0, [sp, #36]	; 0x24
   209e4:	mul	r1, r6, r0
   209e8:	ldr	r0, [r4]
   209ec:	bl	1a2c <fseek@plt>
   209f0:	ldr	r0, [fp, #8]
   209f4:	add	sl, r6, sl
   209f8:	cmp	r0, #2
   209fc:	blt	20b18 <ReadDataSlabN+0x3068>
   20a00:	ldr	ip, [sp, #16]
   20a04:	mov	r0, #0
   20a08:	add	r3, sp, #40	; 0x28
   20a0c:	mov	r8, r0
   20a10:	ldr	r0, [ip, r0, lsl #2]
   20a14:	ldr	r1, [sp, #20]
   20a18:	add	r0, r0, #1
   20a1c:	str	r0, [ip, r8, lsl #2]
   20a20:	ldr	r1, [r1, r8, lsl #2]
   20a24:	sdiv	r2, r0, r1
   20a28:	mls	r0, r2, r1, r0
   20a2c:	cmp	r0, #0
   20a30:	bne	20af8 <ReadDataSlabN+0x3048>
   20a34:	mov	r0, #0
   20a38:	str	r0, [ip, r8, lsl #2]
   20a3c:	add	r0, r3, r8, lsl #2
   20a40:	ldr	r6, [r0, #4]
   20a44:	sdiv	r0, sl, r6
   20a48:	mls	r7, r0, r6, sl
   20a4c:	cmp	r7, #0
   20a50:	beq	20a98 <ReadDataSlabN+0x2fe8>
   20a54:	ldr	r5, [r3, r8, lsl #2]
   20a58:	ldr	r0, [r9, r8, lsl #2]
   20a5c:	sub	r1, r6, r7
   20a60:	ldr	r4, [sp, #32]
   20a64:	mov	r2, #1
   20a68:	mla	r0, r0, r5, r1
   20a6c:	ldr	r1, [sp, #36]	; 0x24
   20a70:	mul	r1, r0, r1
   20a74:	ldr	r0, [r4]
   20a78:	bl	1a2c <fseek@plt>
   20a7c:	ldr	r0, [r9, r8, lsl #2]
   20a80:	ldr	ip, [sp, #16]
   20a84:	add	r1, r6, sl
   20a88:	add	r3, sp, #40	; 0x28
   20a8c:	sub	r1, r1, r7
   20a90:	mla	sl, r0, r5, r1
   20a94:	b	20adc <ReadDataSlabN+0x302c>
   20a98:	ldr	r0, [r9, r8, lsl #2]
   20a9c:	cmp	r0, #0
   20aa0:	beq	20ad8 <ReadDataSlabN+0x3028>
   20aa4:	ldr	r1, [sp, #36]	; 0x24
   20aa8:	ldr	r5, [r3, r8, lsl #2]
   20aac:	ldr	r4, [sp, #32]
   20ab0:	mov	r2, #1
   20ab4:	mul	r0, r0, r1
   20ab8:	mul	r1, r0, r5
   20abc:	ldr	r0, [r4]
   20ac0:	bl	1a2c <fseek@plt>
   20ac4:	ldr	r0, [r9, r8, lsl #2]
   20ac8:	ldr	ip, [sp, #16]
   20acc:	add	r3, sp, #40	; 0x28
   20ad0:	mla	sl, r0, r5, sl
   20ad4:	b	20adc <ReadDataSlabN+0x302c>
   20ad8:	ldr	r4, [sp, #32]
   20adc:	ldr	r2, [fp, #8]
   20ae0:	ldr	r7, [fp, #24]
   20ae4:	add	r1, r8, #2
   20ae8:	add	r0, r8, #1
   20aec:	cmp	r1, r2
   20af0:	blt	20a0c <ReadDataSlabN+0x2f5c>
   20af4:	b	20b18 <ReadDataSlabN+0x3068>
   20af8:	ldr	r0, [sp]
   20afc:	mov	r2, #1
   20b00:	ldr	r5, [r0, r8, lsl #2]
   20b04:	ldr	r0, [sp, #36]	; 0x24
   20b08:	mul	r1, r5, r0
   20b0c:	ldr	r0, [r4]
   20b10:	bl	1a2c <fseek@plt>
   20b14:	add	sl, r5, sl
   20b18:	ldr	r0, [r7]
   20b1c:	ldr	r6, [sp, #8]
   20b20:	ldr	r1, [sp, #12]
   20b24:	add	r6, r0, r6
   20b28:	mov	r0, #0
   20b2c:	cmp	r6, r1
   20b30:	blt	208fc <ReadDataSlabN+0x2e4c>
   20b34:	b	1db34 <ReadDataSlabN+0x84>
   20b38:	ldr	r0, [sp, #12]
   20b3c:	ldr	r1, [fp, #16]
   20b40:	cmp	r0, #1
   20b44:	ldr	r0, [fp, #24]
   20b48:	blt	21a6c <ReadDataSlabN+0x3fbc>
   20b4c:	add	r0, r0, #4
   20b50:	add	r8, r1, #4
   20b54:	mov	r5, #0
   20b58:	str	r0, [sp, #20]
   20b5c:	add	r0, sp, #80	; 0x50
   20b60:	str	r8, [sp, #4]
   20b64:	orr	r9, r0, #4
   20b68:	orr	r0, r4, #4
   20b6c:	str	r0, [sp]
   20b70:	str	r9, [sp, #16]
   20b74:	ldr	r4, [fp, #16]
   20b78:	ldr	r0, [r4]
   20b7c:	cmp	r0, #0
   20b80:	beq	20bac <ReadDataSlabN+0x30fc>
   20b84:	ldr	r1, [sp, #36]	; 0x24
   20b88:	ldr	r6, [sp, #32]
   20b8c:	mov	r2, #1
   20b90:	mul	r1, r0, r1
   20b94:	ldr	r0, [r6]
   20b98:	bl	1a2c <fseek@plt>
   20b9c:	ldr	r0, [r4]
   20ba0:	mov	r4, r6
   20ba4:	add	sl, r0, sl
   20ba8:	b	20bb4 <ReadDataSlabN+0x3104>
   20bac:	ldr	r4, [sp, #32]
   20bb0:	mov	r0, #0
   20bb4:	ldr	r7, [fp, #24]
   20bb8:	ldr	r3, [fp, #12]
   20bbc:	ldr	r2, [sp, #28]
   20bc0:	str	r5, [sp, #8]
   20bc4:	ldr	r1, [r7]
   20bc8:	cmp	r1, #0
   20bcc:	ble	20c50 <ReadDataSlabN+0x31a0>
   20bd0:	ldr	r0, [sp, #24]
   20bd4:	ldr	r8, [sp, #36]	; 0x24
   20bd8:	ldr	r7, [fp, #20]
   20bdc:	mov	r9, #0
   20be0:	add	r5, r0, r5, lsl #1
   20be4:	mov	r0, r4
   20be8:	mov	r1, r5
   20bec:	mov	r3, #1
   20bf0:	mov	r6, r2
   20bf4:	bl	13c20 <ReadInt16Data>
   20bf8:	ldr	r0, [r7]
   20bfc:	mov	r2, #1
   20c00:	sub	r0, r0, #1
   20c04:	mul	r1, r0, r8
   20c08:	ldr	r0, [r4]
   20c0c:	bl	1a2c <fseek@plt>
   20c10:	ldr	r0, [fp, #24]
   20c14:	mov	r2, r6
   20c18:	ldr	r6, [r7]
   20c1c:	add	r9, r9, #1
   20c20:	add	r5, r5, #2
   20c24:	ldr	r1, [r0]
   20c28:	add	sl, r6, sl
   20c2c:	cmp	r9, r1
   20c30:	blt	20be4 <ReadDataSlabN+0x3134>
   20c34:	ldr	r0, [fp, #16]
   20c38:	ldr	r3, [fp, #12]
   20c3c:	ldr	r8, [sp, #4]
   20c40:	ldr	r9, [sp, #16]
   20c44:	ldr	r7, [fp, #24]
   20c48:	ldr	r0, [r0]
   20c4c:	b	20c58 <ReadDataSlabN+0x31a8>
   20c50:	ldr	r2, [fp, #20]
   20c54:	ldr	r6, [r2]
   20c58:	ldr	r3, [r3]
   20c5c:	mov	r2, #1
   20c60:	mls	r1, r6, r1, r3
   20c64:	sub	r5, r1, r0
   20c68:	ldr	r0, [sp, #36]	; 0x24
   20c6c:	mul	r1, r5, r0
   20c70:	ldr	r0, [r4]
   20c74:	bl	1a2c <fseek@plt>
   20c78:	ldr	r0, [fp, #8]
   20c7c:	add	sl, r5, sl
   20c80:	cmp	r0, #2
   20c84:	blt	20da0 <ReadDataSlabN+0x32f0>
   20c88:	mov	r0, #0
   20c8c:	add	r3, sp, #40	; 0x28
   20c90:	mov	r5, r0
   20c94:	ldr	r0, [r9, r0, lsl #2]
   20c98:	ldr	r1, [sp, #20]
   20c9c:	add	r0, r0, #1
   20ca0:	str	r0, [r9, r5, lsl #2]
   20ca4:	ldr	r1, [r1, r5, lsl #2]
   20ca8:	sdiv	r2, r0, r1
   20cac:	mls	r0, r2, r1, r0
   20cb0:	cmp	r0, #0
   20cb4:	bne	20d7c <ReadDataSlabN+0x32cc>
   20cb8:	mov	r0, #0
   20cbc:	str	r0, [r9, r5, lsl #2]
   20cc0:	add	r0, r3, r5, lsl #2
   20cc4:	ldr	r6, [r0, #4]
   20cc8:	sdiv	r0, sl, r6
   20ccc:	mls	r7, r0, r6, sl
   20cd0:	cmp	r7, #0
   20cd4:	beq	20d1c <ReadDataSlabN+0x326c>
   20cd8:	ldr	r9, [r3, r5, lsl #2]
   20cdc:	ldr	r0, [r8, r5, lsl #2]
   20ce0:	sub	r1, r6, r7
   20ce4:	ldr	r4, [sp, #32]
   20ce8:	mov	r2, #1
   20cec:	mla	r0, r0, r9, r1
   20cf0:	ldr	r1, [sp, #36]	; 0x24
   20cf4:	mul	r1, r0, r1
   20cf8:	ldr	r0, [r4]
   20cfc:	bl	1a2c <fseek@plt>
   20d00:	ldr	r0, [r8, r5, lsl #2]
   20d04:	add	r1, r6, sl
   20d08:	add	r3, sp, #40	; 0x28
   20d0c:	sub	r1, r1, r7
   20d10:	mla	sl, r0, r9, r1
   20d14:	ldr	r9, [sp, #16]
   20d18:	b	20d60 <ReadDataSlabN+0x32b0>
   20d1c:	ldr	r0, [r8, r5, lsl #2]
   20d20:	cmp	r0, #0
   20d24:	beq	20d5c <ReadDataSlabN+0x32ac>
   20d28:	ldr	r1, [sp, #36]	; 0x24
   20d2c:	ldr	r4, [r3, r5, lsl #2]
   20d30:	ldr	r6, [sp, #32]
   20d34:	mov	r2, #1
   20d38:	mul	r0, r0, r1
   20d3c:	mul	r1, r0, r4
   20d40:	ldr	r0, [r6]
   20d44:	bl	1a2c <fseek@plt>
   20d48:	ldr	r0, [r8, r5, lsl #2]
   20d4c:	add	r3, sp, #40	; 0x28
   20d50:	mla	sl, r0, r4, sl
   20d54:	mov	r4, r6
   20d58:	b	20d60 <ReadDataSlabN+0x32b0>
   20d5c:	ldr	r4, [sp, #32]
   20d60:	ldr	r2, [fp, #8]
   20d64:	ldr	r7, [fp, #24]
   20d68:	add	r1, r5, #2
   20d6c:	add	r0, r5, #1
   20d70:	cmp	r1, r2
   20d74:	blt	20c90 <ReadDataSlabN+0x31e0>
   20d78:	b	20da0 <ReadDataSlabN+0x32f0>
   20d7c:	ldr	r0, [sp]
   20d80:	mov	r2, r4
   20d84:	ldr	r4, [r0, r5, lsl #2]
   20d88:	ldr	r0, [sp, #36]	; 0x24
   20d8c:	mul	r1, r4, r0
   20d90:	ldr	r0, [r2]
   20d94:	mov	r2, #1
   20d98:	bl	1a2c <fseek@plt>
   20d9c:	add	sl, r4, sl
   20da0:	ldr	r0, [r7]
   20da4:	ldr	r5, [sp, #8]
   20da8:	ldr	r1, [sp, #12]
   20dac:	add	r5, r0, r5
   20db0:	mov	r0, #0
   20db4:	cmp	r5, r1
   20db8:	blt	20b74 <ReadDataSlabN+0x30c4>
   20dbc:	b	1db34 <ReadDataSlabN+0x84>
   20dc0:	ldr	r0, [sp, #12]
   20dc4:	ldr	r1, [fp, #16]
   20dc8:	cmp	r0, #1
   20dcc:	ldr	r0, [fp, #24]
   20dd0:	blt	21a6c <ReadDataSlabN+0x3fbc>
   20dd4:	add	r0, r0, #4
   20dd8:	add	r8, r1, #4
   20ddc:	mov	r5, #0
   20de0:	str	r0, [sp, #20]
   20de4:	add	r0, sp, #80	; 0x50
   20de8:	str	r8, [sp, #4]
   20dec:	orr	r9, r0, #4
   20df0:	orr	r0, r4, #4
   20df4:	str	r0, [sp]
   20df8:	str	r9, [sp, #16]
   20dfc:	ldr	r4, [fp, #16]
   20e00:	ldr	r0, [r4]
   20e04:	cmp	r0, #0
   20e08:	beq	20e34 <ReadDataSlabN+0x3384>
   20e0c:	ldr	r1, [sp, #36]	; 0x24
   20e10:	ldr	r6, [sp, #32]
   20e14:	mov	r2, #1
   20e18:	mul	r1, r0, r1
   20e1c:	ldr	r0, [r6]
   20e20:	bl	1a2c <fseek@plt>
   20e24:	ldr	r0, [r4]
   20e28:	mov	r4, r6
   20e2c:	add	sl, r0, sl
   20e30:	b	20e3c <ReadDataSlabN+0x338c>
   20e34:	ldr	r4, [sp, #32]
   20e38:	mov	r0, #0
   20e3c:	ldr	r7, [fp, #24]
   20e40:	ldr	r3, [fp, #12]
   20e44:	ldr	r2, [sp, #28]
   20e48:	str	r5, [sp, #8]
   20e4c:	ldr	r1, [r7]
   20e50:	cmp	r1, #0
   20e54:	ble	20ed8 <ReadDataSlabN+0x3428>
   20e58:	ldr	r0, [sp, #24]
   20e5c:	ldr	r8, [sp, #36]	; 0x24
   20e60:	ldr	r7, [fp, #20]
   20e64:	mov	r9, #0
   20e68:	add	r5, r0, r5, lsl #1
   20e6c:	mov	r0, r4
   20e70:	mov	r1, r5
   20e74:	mov	r3, #1
   20e78:	mov	r6, r2
   20e7c:	bl	163ec <ReadUInt16Data>
   20e80:	ldr	r0, [r7]
   20e84:	mov	r2, #1
   20e88:	sub	r0, r0, #1
   20e8c:	mul	r1, r0, r8
   20e90:	ldr	r0, [r4]
   20e94:	bl	1a2c <fseek@plt>
   20e98:	ldr	r0, [fp, #24]
   20e9c:	mov	r2, r6
   20ea0:	ldr	r6, [r7]
   20ea4:	add	r9, r9, #1
   20ea8:	add	r5, r5, #2
   20eac:	ldr	r1, [r0]
   20eb0:	add	sl, r6, sl
   20eb4:	cmp	r9, r1
   20eb8:	blt	20e6c <ReadDataSlabN+0x33bc>
   20ebc:	ldr	r0, [fp, #16]
   20ec0:	ldr	r3, [fp, #12]
   20ec4:	ldr	r8, [sp, #4]
   20ec8:	ldr	r9, [sp, #16]
   20ecc:	ldr	r7, [fp, #24]
   20ed0:	ldr	r0, [r0]
   20ed4:	b	20ee0 <ReadDataSlabN+0x3430>
   20ed8:	ldr	r2, [fp, #20]
   20edc:	ldr	r6, [r2]
   20ee0:	ldr	r3, [r3]
   20ee4:	mov	r2, #1
   20ee8:	mls	r1, r6, r1, r3
   20eec:	sub	r5, r1, r0
   20ef0:	ldr	r0, [sp, #36]	; 0x24
   20ef4:	mul	r1, r5, r0
   20ef8:	ldr	r0, [r4]
   20efc:	bl	1a2c <fseek@plt>
   20f00:	ldr	r0, [fp, #8]
   20f04:	add	sl, r5, sl
   20f08:	cmp	r0, #2
   20f0c:	blt	21028 <ReadDataSlabN+0x3578>
   20f10:	mov	r0, #0
   20f14:	add	r3, sp, #40	; 0x28
   20f18:	mov	r5, r0
   20f1c:	ldr	r0, [r9, r0, lsl #2]
   20f20:	ldr	r1, [sp, #20]
   20f24:	add	r0, r0, #1
   20f28:	str	r0, [r9, r5, lsl #2]
   20f2c:	ldr	r1, [r1, r5, lsl #2]
   20f30:	sdiv	r2, r0, r1
   20f34:	mls	r0, r2, r1, r0
   20f38:	cmp	r0, #0
   20f3c:	bne	21004 <ReadDataSlabN+0x3554>
   20f40:	mov	r0, #0
   20f44:	str	r0, [r9, r5, lsl #2]
   20f48:	add	r0, r3, r5, lsl #2
   20f4c:	ldr	r6, [r0, #4]
   20f50:	sdiv	r0, sl, r6
   20f54:	mls	r7, r0, r6, sl
   20f58:	cmp	r7, #0
   20f5c:	beq	20fa4 <ReadDataSlabN+0x34f4>
   20f60:	ldr	r9, [r3, r5, lsl #2]
   20f64:	ldr	r0, [r8, r5, lsl #2]
   20f68:	sub	r1, r6, r7
   20f6c:	ldr	r4, [sp, #32]
   20f70:	mov	r2, #1
   20f74:	mla	r0, r0, r9, r1
   20f78:	ldr	r1, [sp, #36]	; 0x24
   20f7c:	mul	r1, r0, r1
   20f80:	ldr	r0, [r4]
   20f84:	bl	1a2c <fseek@plt>
   20f88:	ldr	r0, [r8, r5, lsl #2]
   20f8c:	add	r1, r6, sl
   20f90:	add	r3, sp, #40	; 0x28
   20f94:	sub	r1, r1, r7
   20f98:	mla	sl, r0, r9, r1
   20f9c:	ldr	r9, [sp, #16]
   20fa0:	b	20fe8 <ReadDataSlabN+0x3538>
   20fa4:	ldr	r0, [r8, r5, lsl #2]
   20fa8:	cmp	r0, #0
   20fac:	beq	20fe4 <ReadDataSlabN+0x3534>
   20fb0:	ldr	r1, [sp, #36]	; 0x24
   20fb4:	ldr	r4, [r3, r5, lsl #2]
   20fb8:	ldr	r6, [sp, #32]
   20fbc:	mov	r2, #1
   20fc0:	mul	r0, r0, r1
   20fc4:	mul	r1, r0, r4
   20fc8:	ldr	r0, [r6]
   20fcc:	bl	1a2c <fseek@plt>
   20fd0:	ldr	r0, [r8, r5, lsl #2]
   20fd4:	add	r3, sp, #40	; 0x28
   20fd8:	mla	sl, r0, r4, sl
   20fdc:	mov	r4, r6
   20fe0:	b	20fe8 <ReadDataSlabN+0x3538>
   20fe4:	ldr	r4, [sp, #32]
   20fe8:	ldr	r2, [fp, #8]
   20fec:	ldr	r7, [fp, #24]
   20ff0:	add	r1, r5, #2
   20ff4:	add	r0, r5, #1
   20ff8:	cmp	r1, r2
   20ffc:	blt	20f18 <ReadDataSlabN+0x3468>
   21000:	b	21028 <ReadDataSlabN+0x3578>
   21004:	ldr	r0, [sp]
   21008:	mov	r2, r4
   2100c:	ldr	r4, [r0, r5, lsl #2]
   21010:	ldr	r0, [sp, #36]	; 0x24
   21014:	mul	r1, r4, r0
   21018:	ldr	r0, [r2]
   2101c:	mov	r2, #1
   21020:	bl	1a2c <fseek@plt>
   21024:	add	sl, r4, sl
   21028:	ldr	r0, [r7]
   2102c:	ldr	r5, [sp, #8]
   21030:	ldr	r1, [sp, #12]
   21034:	add	r5, r0, r5
   21038:	mov	r0, #0
   2103c:	cmp	r5, r1
   21040:	blt	20dfc <ReadDataSlabN+0x334c>
   21044:	b	1db34 <ReadDataSlabN+0x84>
   21048:	ldr	r0, [sp, #12]
   2104c:	ldr	r1, [fp, #16]
   21050:	cmp	r0, #1
   21054:	ldr	r0, [fp, #24]
   21058:	blt	21a6c <ReadDataSlabN+0x3fbc>
   2105c:	add	r0, r0, #4
   21060:	add	r8, r1, #4
   21064:	mov	r5, #0
   21068:	str	r0, [sp, #20]
   2106c:	add	r0, sp, #80	; 0x50
   21070:	str	r8, [sp, #4]
   21074:	orr	r9, r0, #4
   21078:	orr	r0, r4, #4
   2107c:	str	r0, [sp]
   21080:	str	r9, [sp, #16]
   21084:	ldr	r4, [fp, #16]
   21088:	ldr	r0, [r4]
   2108c:	cmp	r0, #0
   21090:	beq	210bc <ReadDataSlabN+0x360c>
   21094:	ldr	r1, [sp, #36]	; 0x24
   21098:	ldr	r6, [sp, #32]
   2109c:	mov	r2, #1
   210a0:	mul	r1, r0, r1
   210a4:	ldr	r0, [r6]
   210a8:	bl	1a2c <fseek@plt>
   210ac:	ldr	r0, [r4]
   210b0:	mov	r4, r6
   210b4:	add	sl, r0, sl
   210b8:	b	210c4 <ReadDataSlabN+0x3614>
   210bc:	ldr	r4, [sp, #32]
   210c0:	mov	r0, #0
   210c4:	ldr	r7, [fp, #24]
   210c8:	ldr	r3, [fp, #12]
   210cc:	ldr	r2, [sp, #28]
   210d0:	str	r5, [sp, #8]
   210d4:	ldr	r1, [r7]
   210d8:	cmp	r1, #0
   210dc:	ble	21160 <ReadDataSlabN+0x36b0>
   210e0:	ldr	r0, [sp, #24]
   210e4:	ldr	r8, [sp, #36]	; 0x24
   210e8:	ldr	r7, [fp, #20]
   210ec:	mov	r9, #0
   210f0:	add	r5, r0, r5, lsl #2
   210f4:	mov	r0, r4
   210f8:	mov	r1, r5
   210fc:	mov	r3, #1
   21100:	mov	r6, r2
   21104:	bl	da88 <ReadInt32Data>
   21108:	ldr	r0, [r7]
   2110c:	mov	r2, #1
   21110:	sub	r0, r0, #1
   21114:	mul	r1, r0, r8
   21118:	ldr	r0, [r4]
   2111c:	bl	1a2c <fseek@plt>
   21120:	ldr	r0, [fp, #24]
   21124:	mov	r2, r6
   21128:	ldr	r6, [r7]
   2112c:	add	r9, r9, #1
   21130:	add	r5, r5, #4
   21134:	ldr	r1, [r0]
   21138:	add	sl, r6, sl
   2113c:	cmp	r9, r1
   21140:	blt	210f4 <ReadDataSlabN+0x3644>
   21144:	ldr	r0, [fp, #16]
   21148:	ldr	r3, [fp, #12]
   2114c:	ldr	r8, [sp, #4]
   21150:	ldr	r9, [sp, #16]
   21154:	ldr	r7, [fp, #24]
   21158:	ldr	r0, [r0]
   2115c:	b	21168 <ReadDataSlabN+0x36b8>
   21160:	ldr	r2, [fp, #20]
   21164:	ldr	r6, [r2]
   21168:	ldr	r3, [r3]
   2116c:	mov	r2, #1
   21170:	mls	r1, r6, r1, r3
   21174:	sub	r5, r1, r0
   21178:	ldr	r0, [sp, #36]	; 0x24
   2117c:	mul	r1, r5, r0
   21180:	ldr	r0, [r4]
   21184:	bl	1a2c <fseek@plt>
   21188:	ldr	r0, [fp, #8]
   2118c:	add	sl, r5, sl
   21190:	cmp	r0, #2
   21194:	blt	212b0 <ReadDataSlabN+0x3800>
   21198:	mov	r0, #0
   2119c:	add	r3, sp, #40	; 0x28
   211a0:	mov	r5, r0
   211a4:	ldr	r0, [r9, r0, lsl #2]
   211a8:	ldr	r1, [sp, #20]
   211ac:	add	r0, r0, #1
   211b0:	str	r0, [r9, r5, lsl #2]
   211b4:	ldr	r1, [r1, r5, lsl #2]
   211b8:	sdiv	r2, r0, r1
   211bc:	mls	r0, r2, r1, r0
   211c0:	cmp	r0, #0
   211c4:	bne	2128c <ReadDataSlabN+0x37dc>
   211c8:	mov	r0, #0
   211cc:	str	r0, [r9, r5, lsl #2]
   211d0:	add	r0, r3, r5, lsl #2
   211d4:	ldr	r6, [r0, #4]
   211d8:	sdiv	r0, sl, r6
   211dc:	mls	r7, r0, r6, sl
   211e0:	cmp	r7, #0
   211e4:	beq	2122c <ReadDataSlabN+0x377c>
   211e8:	ldr	r9, [r3, r5, lsl #2]
   211ec:	ldr	r0, [r8, r5, lsl #2]
   211f0:	sub	r1, r6, r7
   211f4:	ldr	r4, [sp, #32]
   211f8:	mov	r2, #1
   211fc:	mla	r0, r0, r9, r1
   21200:	ldr	r1, [sp, #36]	; 0x24
   21204:	mul	r1, r0, r1
   21208:	ldr	r0, [r4]
   2120c:	bl	1a2c <fseek@plt>
   21210:	ldr	r0, [r8, r5, lsl #2]
   21214:	add	r1, r6, sl
   21218:	add	r3, sp, #40	; 0x28
   2121c:	sub	r1, r1, r7
   21220:	mla	sl, r0, r9, r1
   21224:	ldr	r9, [sp, #16]
   21228:	b	21270 <ReadDataSlabN+0x37c0>
   2122c:	ldr	r0, [r8, r5, lsl #2]
   21230:	cmp	r0, #0
   21234:	beq	2126c <ReadDataSlabN+0x37bc>
   21238:	ldr	r1, [sp, #36]	; 0x24
   2123c:	ldr	r4, [r3, r5, lsl #2]
   21240:	ldr	r6, [sp, #32]
   21244:	mov	r2, #1
   21248:	mul	r0, r0, r1
   2124c:	mul	r1, r0, r4
   21250:	ldr	r0, [r6]
   21254:	bl	1a2c <fseek@plt>
   21258:	ldr	r0, [r8, r5, lsl #2]
   2125c:	add	r3, sp, #40	; 0x28
   21260:	mla	sl, r0, r4, sl
   21264:	mov	r4, r6
   21268:	b	21270 <ReadDataSlabN+0x37c0>
   2126c:	ldr	r4, [sp, #32]
   21270:	ldr	r2, [fp, #8]
   21274:	ldr	r7, [fp, #24]
   21278:	add	r1, r5, #2
   2127c:	add	r0, r5, #1
   21280:	cmp	r1, r2
   21284:	blt	211a0 <ReadDataSlabN+0x36f0>
   21288:	b	212b0 <ReadDataSlabN+0x3800>
   2128c:	ldr	r0, [sp]
   21290:	mov	r2, r4
   21294:	ldr	r4, [r0, r5, lsl #2]
   21298:	ldr	r0, [sp, #36]	; 0x24
   2129c:	mul	r1, r4, r0
   212a0:	ldr	r0, [r2]
   212a4:	mov	r2, #1
   212a8:	bl	1a2c <fseek@plt>
   212ac:	add	sl, r4, sl
   212b0:	ldr	r0, [r7]
   212b4:	ldr	r5, [sp, #8]
   212b8:	ldr	r1, [sp, #12]
   212bc:	add	r5, r0, r5
   212c0:	mov	r0, #0
   212c4:	cmp	r5, r1
   212c8:	blt	21084 <ReadDataSlabN+0x35d4>
   212cc:	b	1db34 <ReadDataSlabN+0x84>
   212d0:	ldr	r0, [sp, #12]
   212d4:	ldr	r1, [fp, #16]
   212d8:	cmp	r0, #1
   212dc:	ldr	r0, [fp, #24]
   212e0:	blt	21a6c <ReadDataSlabN+0x3fbc>
   212e4:	add	r0, r0, #4
   212e8:	add	r8, r1, #4
   212ec:	mov	r5, #0
   212f0:	str	r0, [sp, #20]
   212f4:	add	r0, sp, #80	; 0x50
   212f8:	str	r8, [sp, #4]
   212fc:	orr	r9, r0, #4
   21300:	orr	r0, r4, #4
   21304:	str	r0, [sp]
   21308:	str	r9, [sp, #16]
   2130c:	ldr	r4, [fp, #16]
   21310:	ldr	r0, [r4]
   21314:	cmp	r0, #0
   21318:	beq	21344 <ReadDataSlabN+0x3894>
   2131c:	ldr	r1, [sp, #36]	; 0x24
   21320:	ldr	r6, [sp, #32]
   21324:	mov	r2, #1
   21328:	mul	r1, r0, r1
   2132c:	ldr	r0, [r6]
   21330:	bl	1a2c <fseek@plt>
   21334:	ldr	r0, [r4]
   21338:	mov	r4, r6
   2133c:	add	sl, r0, sl
   21340:	b	2134c <ReadDataSlabN+0x389c>
   21344:	ldr	r4, [sp, #32]
   21348:	mov	r0, #0
   2134c:	ldr	r7, [fp, #24]
   21350:	ldr	r3, [fp, #12]
   21354:	ldr	r2, [sp, #28]
   21358:	str	r5, [sp, #8]
   2135c:	ldr	r1, [r7]
   21360:	cmp	r1, #0
   21364:	ble	213e8 <ReadDataSlabN+0x3938>
   21368:	ldr	r0, [sp, #24]
   2136c:	ldr	r8, [sp, #36]	; 0x24
   21370:	ldr	r7, [fp, #20]
   21374:	mov	r9, #0
   21378:	add	r5, r0, r5, lsl #2
   2137c:	mov	r0, r4
   21380:	mov	r1, r5
   21384:	mov	r3, #1
   21388:	mov	r6, r2
   2138c:	bl	10b54 <ReadUInt32Data>
   21390:	ldr	r0, [r7]
   21394:	mov	r2, #1
   21398:	sub	r0, r0, #1
   2139c:	mul	r1, r0, r8
   213a0:	ldr	r0, [r4]
   213a4:	bl	1a2c <fseek@plt>
   213a8:	ldr	r0, [fp, #24]
   213ac:	mov	r2, r6
   213b0:	ldr	r6, [r7]
   213b4:	add	r9, r9, #1
   213b8:	add	r5, r5, #4
   213bc:	ldr	r1, [r0]
   213c0:	add	sl, r6, sl
   213c4:	cmp	r9, r1
   213c8:	blt	2137c <ReadDataSlabN+0x38cc>
   213cc:	ldr	r0, [fp, #16]
   213d0:	ldr	r3, [fp, #12]
   213d4:	ldr	r8, [sp, #4]
   213d8:	ldr	r9, [sp, #16]
   213dc:	ldr	r7, [fp, #24]
   213e0:	ldr	r0, [r0]
   213e4:	b	213f0 <ReadDataSlabN+0x3940>
   213e8:	ldr	r2, [fp, #20]
   213ec:	ldr	r6, [r2]
   213f0:	ldr	r3, [r3]
   213f4:	mov	r2, #1
   213f8:	mls	r1, r6, r1, r3
   213fc:	sub	r5, r1, r0
   21400:	ldr	r0, [sp, #36]	; 0x24
   21404:	mul	r1, r5, r0
   21408:	ldr	r0, [r4]
   2140c:	bl	1a2c <fseek@plt>
   21410:	ldr	r0, [fp, #8]
   21414:	add	sl, r5, sl
   21418:	cmp	r0, #2
   2141c:	blt	21538 <ReadDataSlabN+0x3a88>
   21420:	mov	r0, #0
   21424:	add	r3, sp, #40	; 0x28
   21428:	mov	r5, r0
   2142c:	ldr	r0, [r9, r0, lsl #2]
   21430:	ldr	r1, [sp, #20]
   21434:	add	r0, r0, #1
   21438:	str	r0, [r9, r5, lsl #2]
   2143c:	ldr	r1, [r1, r5, lsl #2]
   21440:	sdiv	r2, r0, r1
   21444:	mls	r0, r2, r1, r0
   21448:	cmp	r0, #0
   2144c:	bne	21514 <ReadDataSlabN+0x3a64>
   21450:	mov	r0, #0
   21454:	str	r0, [r9, r5, lsl #2]
   21458:	add	r0, r3, r5, lsl #2
   2145c:	ldr	r6, [r0, #4]
   21460:	sdiv	r0, sl, r6
   21464:	mls	r7, r0, r6, sl
   21468:	cmp	r7, #0
   2146c:	beq	214b4 <ReadDataSlabN+0x3a04>
   21470:	ldr	r9, [r3, r5, lsl #2]
   21474:	ldr	r0, [r8, r5, lsl #2]
   21478:	sub	r1, r6, r7
   2147c:	ldr	r4, [sp, #32]
   21480:	mov	r2, #1
   21484:	mla	r0, r0, r9, r1
   21488:	ldr	r1, [sp, #36]	; 0x24
   2148c:	mul	r1, r0, r1
   21490:	ldr	r0, [r4]
   21494:	bl	1a2c <fseek@plt>
   21498:	ldr	r0, [r8, r5, lsl #2]
   2149c:	add	r1, r6, sl
   214a0:	add	r3, sp, #40	; 0x28
   214a4:	sub	r1, r1, r7
   214a8:	mla	sl, r0, r9, r1
   214ac:	ldr	r9, [sp, #16]
   214b0:	b	214f8 <ReadDataSlabN+0x3a48>
   214b4:	ldr	r0, [r8, r5, lsl #2]
   214b8:	cmp	r0, #0
   214bc:	beq	214f4 <ReadDataSlabN+0x3a44>
   214c0:	ldr	r1, [sp, #36]	; 0x24
   214c4:	ldr	r4, [r3, r5, lsl #2]
   214c8:	ldr	r6, [sp, #32]
   214cc:	mov	r2, #1
   214d0:	mul	r0, r0, r1
   214d4:	mul	r1, r0, r4
   214d8:	ldr	r0, [r6]
   214dc:	bl	1a2c <fseek@plt>
   214e0:	ldr	r0, [r8, r5, lsl #2]
   214e4:	add	r3, sp, #40	; 0x28
   214e8:	mla	sl, r0, r4, sl
   214ec:	mov	r4, r6
   214f0:	b	214f8 <ReadDataSlabN+0x3a48>
   214f4:	ldr	r4, [sp, #32]
   214f8:	ldr	r2, [fp, #8]
   214fc:	ldr	r7, [fp, #24]
   21500:	add	r1, r5, #2
   21504:	add	r0, r5, #1
   21508:	cmp	r1, r2
   2150c:	blt	21428 <ReadDataSlabN+0x3978>
   21510:	b	21538 <ReadDataSlabN+0x3a88>
   21514:	ldr	r0, [sp]
   21518:	mov	r2, r4
   2151c:	ldr	r4, [r0, r5, lsl #2]
   21520:	ldr	r0, [sp, #36]	; 0x24
   21524:	mul	r1, r4, r0
   21528:	ldr	r0, [r2]
   2152c:	mov	r2, #1
   21530:	bl	1a2c <fseek@plt>
   21534:	add	sl, r4, sl
   21538:	ldr	r0, [r7]
   2153c:	ldr	r5, [sp, #8]
   21540:	ldr	r1, [sp, #12]
   21544:	add	r5, r0, r5
   21548:	mov	r0, #0
   2154c:	cmp	r5, r1
   21550:	blt	2130c <ReadDataSlabN+0x385c>
   21554:	b	1db34 <ReadDataSlabN+0x84>
   21558:	ldr	r0, [sp, #12]
   2155c:	ldr	r1, [fp, #16]
   21560:	cmp	r0, #1
   21564:	ldr	r0, [fp, #24]
   21568:	blt	21a6c <ReadDataSlabN+0x3fbc>
   2156c:	add	r0, r0, #4
   21570:	add	r8, r1, #4
   21574:	mov	r5, #0
   21578:	str	r0, [sp, #20]
   2157c:	add	r0, sp, #80	; 0x50
   21580:	str	r8, [sp, #4]
   21584:	orr	r9, r0, #4
   21588:	orr	r0, r4, #4
   2158c:	str	r0, [sp]
   21590:	str	r9, [sp, #16]
   21594:	ldr	r4, [fp, #16]
   21598:	ldr	r0, [r4]
   2159c:	cmp	r0, #0
   215a0:	beq	215d0 <ReadDataSlabN+0x3b20>
   215a4:	ldr	r1, [sp, #36]	; 0x24
   215a8:	ldr	r6, [sp, #32]
   215ac:	mov	r2, #1
   215b0:	mul	r1, r0, r1
   215b4:	ldr	r0, [r6]
   215b8:	bl	1a2c <fseek@plt>
   215bc:	ldr	r0, [r4]
   215c0:	ldr	r2, [sp, #28]
   215c4:	mov	r4, r6
   215c8:	add	sl, r0, sl
   215cc:	b	215dc <ReadDataSlabN+0x3b2c>
   215d0:	ldr	r2, [sp, #28]
   215d4:	ldr	r4, [sp, #32]
   215d8:	mov	r0, #0
   215dc:	ldr	r7, [fp, #24]
   215e0:	ldr	r3, [fp, #12]
   215e4:	str	r5, [sp, #8]
   215e8:	ldr	r1, [r7]
   215ec:	cmp	r1, #0
   215f0:	ble	21674 <ReadDataSlabN+0x3bc4>
   215f4:	ldr	r0, [sp, #24]
   215f8:	ldr	r8, [sp, #36]	; 0x24
   215fc:	ldr	r7, [fp, #20]
   21600:	mov	r9, #0
   21604:	add	r5, r0, r5, lsl #3
   21608:	mov	r0, r4
   2160c:	mov	r1, r5
   21610:	mov	r3, #1
   21614:	mov	r6, r2
   21618:	bl	9498 <ReadInt64Data>
   2161c:	ldr	r0, [r7]
   21620:	mov	r2, #1
   21624:	sub	r0, r0, #1
   21628:	mul	r1, r0, r8
   2162c:	ldr	r0, [r4]
   21630:	bl	1a2c <fseek@plt>
   21634:	ldr	r0, [fp, #24]
   21638:	mov	r2, r6
   2163c:	ldr	r6, [r7]
   21640:	add	r9, r9, #1
   21644:	add	r5, r5, #8
   21648:	ldr	r1, [r0]
   2164c:	add	sl, r6, sl
   21650:	cmp	r9, r1
   21654:	blt	21608 <ReadDataSlabN+0x3b58>
   21658:	ldr	r0, [fp, #16]
   2165c:	ldr	r3, [fp, #12]
   21660:	ldr	r8, [sp, #4]
   21664:	ldr	r9, [sp, #16]
   21668:	ldr	r7, [fp, #24]
   2166c:	ldr	r0, [r0]
   21670:	b	2167c <ReadDataSlabN+0x3bcc>
   21674:	ldr	r2, [fp, #20]
   21678:	ldr	r6, [r2]
   2167c:	ldr	r3, [r3]
   21680:	mov	r2, #1
   21684:	mls	r1, r6, r1, r3
   21688:	sub	r5, r1, r0
   2168c:	ldr	r0, [sp, #36]	; 0x24
   21690:	mul	r1, r5, r0
   21694:	ldr	r0, [r4]
   21698:	bl	1a2c <fseek@plt>
   2169c:	ldr	r0, [fp, #8]
   216a0:	add	sl, r5, sl
   216a4:	cmp	r0, #2
   216a8:	blt	217c4 <ReadDataSlabN+0x3d14>
   216ac:	mov	r0, #0
   216b0:	add	r3, sp, #40	; 0x28
   216b4:	mov	r5, r0
   216b8:	ldr	r0, [r9, r0, lsl #2]
   216bc:	ldr	r1, [sp, #20]
   216c0:	add	r0, r0, #1
   216c4:	str	r0, [r9, r5, lsl #2]
   216c8:	ldr	r1, [r1, r5, lsl #2]
   216cc:	sdiv	r2, r0, r1
   216d0:	mls	r0, r2, r1, r0
   216d4:	cmp	r0, #0
   216d8:	bne	217a0 <ReadDataSlabN+0x3cf0>
   216dc:	mov	r0, #0
   216e0:	str	r0, [r9, r5, lsl #2]
   216e4:	add	r0, r3, r5, lsl #2
   216e8:	ldr	r6, [r0, #4]
   216ec:	sdiv	r0, sl, r6
   216f0:	mls	r7, r0, r6, sl
   216f4:	cmp	r7, #0
   216f8:	beq	21740 <ReadDataSlabN+0x3c90>
   216fc:	ldr	r9, [r3, r5, lsl #2]
   21700:	ldr	r0, [r8, r5, lsl #2]
   21704:	sub	r1, r6, r7
   21708:	ldr	r4, [sp, #32]
   2170c:	mov	r2, #1
   21710:	mla	r0, r0, r9, r1
   21714:	ldr	r1, [sp, #36]	; 0x24
   21718:	mul	r1, r0, r1
   2171c:	ldr	r0, [r4]
   21720:	bl	1a2c <fseek@plt>
   21724:	ldr	r0, [r8, r5, lsl #2]
   21728:	add	r1, r6, sl
   2172c:	add	r3, sp, #40	; 0x28
   21730:	sub	r1, r1, r7
   21734:	mla	sl, r0, r9, r1
   21738:	ldr	r9, [sp, #16]
   2173c:	b	21784 <ReadDataSlabN+0x3cd4>
   21740:	ldr	r0, [r8, r5, lsl #2]
   21744:	cmp	r0, #0
   21748:	beq	21780 <ReadDataSlabN+0x3cd0>
   2174c:	ldr	r1, [sp, #36]	; 0x24
   21750:	ldr	r4, [r3, r5, lsl #2]
   21754:	ldr	r6, [sp, #32]
   21758:	mov	r2, #1
   2175c:	mul	r0, r0, r1
   21760:	mul	r1, r0, r4
   21764:	ldr	r0, [r6]
   21768:	bl	1a2c <fseek@plt>
   2176c:	ldr	r0, [r8, r5, lsl #2]
   21770:	add	r3, sp, #40	; 0x28
   21774:	mla	sl, r0, r4, sl
   21778:	mov	r4, r6
   2177c:	b	21784 <ReadDataSlabN+0x3cd4>
   21780:	ldr	r4, [sp, #32]
   21784:	ldr	r2, [fp, #8]
   21788:	ldr	r7, [fp, #24]
   2178c:	add	r1, r5, #2
   21790:	add	r0, r5, #1
   21794:	cmp	r1, r2
   21798:	blt	216b4 <ReadDataSlabN+0x3c04>
   2179c:	b	217c4 <ReadDataSlabN+0x3d14>
   217a0:	ldr	r0, [sp]
   217a4:	mov	r2, r4
   217a8:	ldr	r4, [r0, r5, lsl #2]
   217ac:	ldr	r0, [sp, #36]	; 0x24
   217b0:	mul	r1, r4, r0
   217b4:	ldr	r0, [r2]
   217b8:	mov	r2, #1
   217bc:	bl	1a2c <fseek@plt>
   217c0:	add	sl, r4, sl
   217c4:	ldr	r0, [r7]
   217c8:	ldr	r5, [sp, #8]
   217cc:	ldr	r1, [sp, #12]
   217d0:	add	r5, r0, r5
   217d4:	mov	r0, #0
   217d8:	cmp	r5, r1
   217dc:	blt	21594 <ReadDataSlabN+0x3ae4>
   217e0:	b	1db34 <ReadDataSlabN+0x84>
   217e4:	ldr	r0, [sp, #12]
   217e8:	ldr	r1, [fp, #16]
   217ec:	cmp	r0, #1
   217f0:	ldr	r0, [fp, #24]
   217f4:	blt	21a6c <ReadDataSlabN+0x3fbc>
   217f8:	add	r0, r0, #4
   217fc:	add	r8, r1, #4
   21800:	mov	r5, #0
   21804:	str	r0, [sp, #20]
   21808:	add	r0, sp, #80	; 0x50
   2180c:	str	r8, [sp, #4]
   21810:	orr	r9, r0, #4
   21814:	orr	r0, r4, #4
   21818:	str	r0, [sp]
   2181c:	str	r9, [sp, #16]
   21820:	ldr	r4, [fp, #16]
   21824:	ldr	r0, [r4]
   21828:	cmp	r0, #0
   2182c:	beq	21858 <ReadDataSlabN+0x3da8>
   21830:	ldr	r1, [sp, #36]	; 0x24
   21834:	ldr	r6, [sp, #32]
   21838:	mov	r2, #1
   2183c:	mul	r1, r0, r1
   21840:	ldr	r0, [r6]
   21844:	bl	1a2c <fseek@plt>
   21848:	ldr	r0, [r4]
   2184c:	mov	r4, r6
   21850:	add	sl, r0, sl
   21854:	b	21860 <ReadDataSlabN+0x3db0>
   21858:	ldr	r4, [sp, #32]
   2185c:	mov	r0, #0
   21860:	ldr	r7, [fp, #24]
   21864:	ldr	r3, [fp, #12]
   21868:	ldr	r2, [sp, #28]
   2186c:	str	r5, [sp, #8]
   21870:	ldr	r1, [r7]
   21874:	cmp	r1, #0
   21878:	ble	218fc <ReadDataSlabN+0x3e4c>
   2187c:	ldr	r0, [sp, #24]
   21880:	ldr	r8, [sp, #36]	; 0x24
   21884:	ldr	r7, [fp, #20]
   21888:	mov	r9, #0
   2188c:	add	r5, r0, r5, lsl #3
   21890:	mov	r0, r4
   21894:	mov	r1, r5
   21898:	mov	r3, #1
   2189c:	mov	r6, r2
   218a0:	bl	b790 <ReadUInt64Data>
   218a4:	ldr	r0, [r7]
   218a8:	mov	r2, #1
   218ac:	sub	r0, r0, #1
   218b0:	mul	r1, r0, r8
   218b4:	ldr	r0, [r4]
   218b8:	bl	1a2c <fseek@plt>
   218bc:	ldr	r0, [fp, #24]
   218c0:	mov	r2, r6
   218c4:	ldr	r6, [r7]
   218c8:	add	r9, r9, #1
   218cc:	add	r5, r5, #8
   218d0:	ldr	r1, [r0]
   218d4:	add	sl, r6, sl
   218d8:	cmp	r9, r1
   218dc:	blt	21890 <ReadDataSlabN+0x3de0>
   218e0:	ldr	r0, [fp, #16]
   218e4:	ldr	r3, [fp, #12]
   218e8:	ldr	r8, [sp, #4]
   218ec:	ldr	r9, [sp, #16]
   218f0:	ldr	r7, [fp, #24]
   218f4:	ldr	r0, [r0]
   218f8:	b	21904 <ReadDataSlabN+0x3e54>
   218fc:	ldr	r2, [fp, #20]
   21900:	ldr	r6, [r2]
   21904:	ldr	r3, [r3]
   21908:	mov	r2, #1
   2190c:	mls	r1, r6, r1, r3
   21910:	sub	r5, r1, r0
   21914:	ldr	r0, [sp, #36]	; 0x24
   21918:	mul	r1, r5, r0
   2191c:	ldr	r0, [r4]
   21920:	bl	1a2c <fseek@plt>
   21924:	ldr	r0, [fp, #8]
   21928:	add	sl, r5, sl
   2192c:	cmp	r0, #2
   21930:	blt	21a4c <ReadDataSlabN+0x3f9c>
   21934:	mov	r0, #0
   21938:	add	r3, sp, #40	; 0x28
   2193c:	mov	r5, r0
   21940:	ldr	r0, [r9, r0, lsl #2]
   21944:	ldr	r1, [sp, #20]
   21948:	add	r0, r0, #1
   2194c:	str	r0, [r9, r5, lsl #2]
   21950:	ldr	r1, [r1, r5, lsl #2]
   21954:	sdiv	r2, r0, r1
   21958:	mls	r0, r2, r1, r0
   2195c:	cmp	r0, #0
   21960:	bne	21a28 <ReadDataSlabN+0x3f78>
   21964:	mov	r0, #0
   21968:	str	r0, [r9, r5, lsl #2]
   2196c:	add	r0, r3, r5, lsl #2
   21970:	ldr	r6, [r0, #4]
   21974:	sdiv	r0, sl, r6
   21978:	mls	r7, r0, r6, sl
   2197c:	cmp	r7, #0
   21980:	beq	219c8 <ReadDataSlabN+0x3f18>
   21984:	ldr	r9, [r3, r5, lsl #2]
   21988:	ldr	r0, [r8, r5, lsl #2]
   2198c:	sub	r1, r6, r7
   21990:	ldr	r4, [sp, #32]
   21994:	mov	r2, #1
   21998:	mla	r0, r0, r9, r1
   2199c:	ldr	r1, [sp, #36]	; 0x24
   219a0:	mul	r1, r0, r1
   219a4:	ldr	r0, [r4]
   219a8:	bl	1a2c <fseek@plt>
   219ac:	ldr	r0, [r8, r5, lsl #2]
   219b0:	add	r1, r6, sl
   219b4:	add	r3, sp, #40	; 0x28
   219b8:	sub	r1, r1, r7
   219bc:	mla	sl, r0, r9, r1
   219c0:	ldr	r9, [sp, #16]
   219c4:	b	21a0c <ReadDataSlabN+0x3f5c>
   219c8:	ldr	r0, [r8, r5, lsl #2]
   219cc:	cmp	r0, #0
   219d0:	beq	21a08 <ReadDataSlabN+0x3f58>
   219d4:	ldr	r1, [sp, #36]	; 0x24
   219d8:	ldr	r4, [r3, r5, lsl #2]
   219dc:	ldr	r6, [sp, #32]
   219e0:	mov	r2, #1
   219e4:	mul	r0, r0, r1
   219e8:	mul	r1, r0, r4
   219ec:	ldr	r0, [r6]
   219f0:	bl	1a2c <fseek@plt>
   219f4:	ldr	r0, [r8, r5, lsl #2]
   219f8:	add	r3, sp, #40	; 0x28
   219fc:	mla	sl, r0, r4, sl
   21a00:	mov	r4, r6
   21a04:	b	21a0c <ReadDataSlabN+0x3f5c>
   21a08:	ldr	r4, [sp, #32]
   21a0c:	ldr	r2, [fp, #8]
   21a10:	ldr	r7, [fp, #24]
   21a14:	add	r1, r5, #2
   21a18:	add	r0, r5, #1
   21a1c:	cmp	r1, r2
   21a20:	blt	2193c <ReadDataSlabN+0x3e8c>
   21a24:	b	21a4c <ReadDataSlabN+0x3f9c>
   21a28:	ldr	r0, [sp]
   21a2c:	mov	r2, r4
   21a30:	ldr	r4, [r0, r5, lsl #2]
   21a34:	ldr	r0, [sp, #36]	; 0x24
   21a38:	mul	r1, r4, r0
   21a3c:	ldr	r0, [r2]
   21a40:	mov	r2, #1
   21a44:	bl	1a2c <fseek@plt>
   21a48:	add	sl, r4, sl
   21a4c:	ldr	r0, [r7]
   21a50:	ldr	r5, [sp, #8]
   21a54:	ldr	r1, [sp, #12]
   21a58:	add	r5, r0, r5
   21a5c:	mov	r0, #0
   21a60:	cmp	r5, r1
   21a64:	blt	21820 <ReadDataSlabN+0x3d70>
   21a68:	b	1db34 <ReadDataSlabN+0x84>
   21a6c:	mov	r0, #0
   21a70:	sub	sp, fp, #28
   21a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00021a78 <ReadCompressedDataSlabN>:
   21a78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21a7c:	add	fp, sp, #28
   21a80:	sub	sp, sp, #228	; 0xe4
   21a84:	sub	r5, fp, #72	; 0x48
   21a88:	mov	r6, r0
   21a8c:	mov	r7, r2
   21a90:	vmov.i32	q8, #0	; 0x00000000
   21a94:	mov	r0, #36	; 0x24
   21a98:	mov	r8, r3
   21a9c:	mov	r3, #0
   21aa0:	mov	r2, r5
   21aa4:	cmp	r6, #0
   21aa8:	str	r3, [fp, #-40]	; 0xffffffd8
   21aac:	str	r3, [fp, #-80]	; 0xffffffb0
   21ab0:	str	r3, [sp, #136]	; 0x88
   21ab4:	str	r3, [sp, #96]	; 0x60
   21ab8:	vst1.64	{d16-d17}, [r2], r0
   21abc:	cmpne	r7, #0
   21ac0:	str	r3, [r2]
   21ac4:	add	r2, r5, #16
   21ac8:	sub	r5, fp, #112	; 0x70
   21acc:	vst1.64	{d16-d17}, [r2]
   21ad0:	add	r2, r5, #16
   21ad4:	vst1.64	{d16-d17}, [r2]
   21ad8:	mov	r2, r5
   21adc:	add	r5, sp, #104	; 0x68
   21ae0:	vst1.64	{d16-d17}, [r2], r0
   21ae4:	str	r3, [r2]
   21ae8:	add	r2, r5, #16
   21aec:	vst1.64	{d16-d17}, [r2]
   21af0:	mov	r2, r5
   21af4:	vst1.64	{d16-d17}, [r2], r0
   21af8:	add	r0, sp, #48	; 0x30
   21afc:	str	r3, [r2]
   21b00:	add	r2, r0, #32
   21b04:	vst1.64	{d16-d17}, [r2]
   21b08:	add	r2, r0, #16
   21b0c:	vst1.64	{d16-d17}, [r2]
   21b10:	mov	r2, #52	; 0x34
   21b14:	vst1.64	{d16-d17}, [r0], r2
   21b18:	str	r3, [r0]
   21b1c:	mov	r0, #1
   21b20:	bne	21b2c <ReadCompressedDataSlabN+0xb4>
   21b24:	sub	sp, fp, #28
   21b28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b2c:	ldr	r2, [fp, #12]
   21b30:	cmp	r2, #10
   21b34:	bgt	21b24 <ReadCompressedDataSlabN+0xac>
   21b38:	ldr	r2, [fp, #28]
   21b3c:	cmp	r2, #0
   21b40:	ldrne	r5, [fp, #24]
   21b44:	cmpne	r5, #0
   21b48:	beq	21b24 <ReadCompressedDataSlabN+0xac>
   21b4c:	ldr	r2, [fp, #20]
   21b50:	cmp	r2, #0
   21b54:	ldrne	r2, [r6]
   21b58:	cmpne	r2, #0
   21b5c:	beq	21b24 <ReadCompressedDataSlabN+0xac>
   21b60:	add	r0, sp, #48	; 0x30
   21b64:	str	r6, [sp, #44]	; 0x2c
   21b68:	str	r7, [sp, #36]	; 0x24
   21b6c:	bl	1948 <inflateCopy@plt>
   21b70:	sub	r0, r8, #6
   21b74:	add	ip, sp, #104	; 0x68
   21b78:	cmp	r0, #9
   21b7c:	bhi	26074 <ReadCompressedDataSlabN+0x45fc>
   21b80:	add	r1, pc, #8
   21b84:	ldr	r2, [fp, #16]
   21b88:	ldr	r0, [r1, r0, lsl #2]
   21b8c:	add	pc, r1, r0
   21b90:	.word	0x00000028
   21b94:	.word	0x00000194
   21b98:	.word	0x00000310
   21b9c:	.word	0x000006dc
   21ba0:	.word	0x00000aa8
   21ba4:	.word	0x00000c28
   21ba8:	.word	0x00000da8
   21bac:	.word	0x00000f28
   21bb0:	.word	0x000010a8
   21bb4:	.word	0x00001228
   21bb8:	ldr	r0, [r5]
   21bbc:	sub	r0, r0, #1
   21bc0:	str	r0, [fp, #-72]	; 0xffffffb8
   21bc4:	ldr	r0, [fp, #28]
   21bc8:	ldr	lr, [r2]
   21bcc:	str	lr, [sp, #104]	; 0x68
   21bd0:	ldr	r7, [r0]
   21bd4:	ldr	r0, [fp, #12]
   21bd8:	cmp	r0, #2
   21bdc:	blt	22f38 <ReadCompressedDataSlabN+0x14c0>
   21be0:	sub	r4, r2, #4
   21be4:	sub	sl, r2, #12
   21be8:	mov	r3, #1
   21bec:	mov	r0, #0
   21bf0:	sub	r2, fp, #72	; 0x48
   21bf4:	mvn	r9, #15
   21bf8:	mov	r6, lr
   21bfc:	mov	r8, #0
   21c00:	ldr	r1, [fp, #24]
   21c04:	add	r0, r0, #1
   21c08:	cmp	r0, #4
   21c0c:	ldr	r1, [r1, r3, lsl #2]
   21c10:	str	r6, [ip, r3, lsl #2]
   21c14:	sub	r1, r1, #1
   21c18:	str	r1, [r2, r3, lsl #2]
   21c1c:	ldr	r2, [fp, #16]
   21c20:	ldr	r5, [r2, r3, lsl #2]
   21c24:	str	r5, [sp, #40]	; 0x28
   21c28:	bcs	21c34 <ReadCompressedDataSlabN+0x1bc>
   21c2c:	mov	r2, r3
   21c30:	b	21ccc <ReadCompressedDataSlabN+0x254>
   21c34:	vmov.i32	q9, #1	; 0x00000001
   21c38:	vmov.i32	q10, #1	; 0x00000001
   21c3c:	vmov.i32	q8, #1	; 0x00000001
   21c40:	bic	ip, r3, #3
   21c44:	vmov.32	d23[1], r5
   21c48:	vmov.32	d18[0], r6
   21c4c:	vmov.32	d20[0], r1
   21c50:	bic	r1, r0, #3
   21c54:	vorr	d16, d18, d18
   21c58:	vmov.i32	q9, #1	; 0x00000001
   21c5c:	str	r1, [sp, #32]
   21c60:	sub	r2, r3, r1
   21c64:	mov	r1, sl
   21c68:	vorr	d18, d20, d20
   21c6c:	vld1.32	{d20-d21}, [r1], r9
   21c70:	subs	ip, ip, #4
   21c74:	vrev64.32	q12, q10
   21c78:	vext.8	q12, q12, q12, #8
   21c7c:	vext.8	q11, q11, q12, #12
   21c80:	vmul.i32	q9, q9, q12
   21c84:	vmul.i32	q8, q11, q8
   21c88:	vorr	q11, q12, q12
   21c8c:	bne	21c6c <ReadCompressedDataSlabN+0x1f4>
   21c90:	ldr	r5, [sp, #32]
   21c94:	vext.8	q11, q9, q8, #8
   21c98:	vext.8	q12, q8, q8, #8
   21c9c:	vmul.i32	q0, q9, q11
   21ca0:	vmul.i32	q1, q8, q12
   21ca4:	vmul.i32	q8, q0, d0[1]
   21ca8:	vmul.i32	q9, q1, d2[1]
   21cac:	vmov.32	r1, d16[0]
   21cb0:	vmov.32	r6, d18[0]
   21cb4:	cmp	r0, r5
   21cb8:	bne	21cc4 <ReadCompressedDataSlabN+0x24c>
   21cbc:	add	ip, sp, #104	; 0x68
   21cc0:	b	21ce0 <ReadCompressedDataSlabN+0x268>
   21cc4:	vmov.32	r5, d20[0]
   21cc8:	add	ip, sp, #104	; 0x68
   21ccc:	mul	r6, r5, r6
   21cd0:	ldr	r5, [r4, r2, lsl #2]
   21cd4:	subs	r2, r2, #1
   21cd8:	mul	r1, r1, r5
   21cdc:	bne	21ccc <ReadCompressedDataSlabN+0x254>
   21ce0:	sub	r2, fp, #72	; 0x48
   21ce4:	str	r6, [ip, r3, lsl #2]
   21ce8:	add	sl, sl, #4
   21cec:	str	r1, [r2, r3, lsl #2]
   21cf0:	ldr	r1, [fp, #20]
   21cf4:	ldr	r1, [r1, r3, lsl #2]
   21cf8:	mla	r8, r1, lr, r8
   21cfc:	ldr	r1, [fp, #28]
   21d00:	mov	lr, r6
   21d04:	ldr	r6, [sp, #40]	; 0x28
   21d08:	ldr	r1, [r1, r3, lsl #2]
   21d0c:	add	r3, r3, #1
   21d10:	mul	r7, r1, r7
   21d14:	ldr	r1, [fp, #12]
   21d18:	cmp	r3, r1
   21d1c:	bne	21c00 <ReadCompressedDataSlabN+0x188>
   21d20:	b	22f3c <ReadCompressedDataSlabN+0x14c4>
   21d24:	ldr	r0, [r5]
   21d28:	sub	r0, r0, #1
   21d2c:	str	r0, [fp, #-72]	; 0xffffffb8
   21d30:	ldr	r0, [fp, #28]
   21d34:	ldr	r8, [r2]
   21d38:	str	r8, [sp, #104]	; 0x68
   21d3c:	ldr	r0, [r0]
   21d40:	str	r0, [sp, #28]
   21d44:	ldr	r0, [fp, #12]
   21d48:	cmp	r0, #2
   21d4c:	blt	23190 <ReadCompressedDataSlabN+0x1718>
   21d50:	sub	r4, r2, #4
   21d54:	sub	sl, r2, #12
   21d58:	mov	r3, #1
   21d5c:	mov	lr, #0
   21d60:	mvn	r7, #15
   21d64:	mov	r6, r8
   21d68:	mov	r9, #0
   21d6c:	sub	r5, fp, #72	; 0x48
   21d70:	ldr	r1, [fp, #24]
   21d74:	ldr	r2, [fp, #16]
   21d78:	add	lr, lr, #1
   21d7c:	cmp	lr, #4
   21d80:	ldr	r1, [r1, r3, lsl #2]
   21d84:	str	r6, [ip, r3, lsl #2]
   21d88:	sub	r1, r1, #1
   21d8c:	str	r1, [r5, r3, lsl #2]
   21d90:	ldr	r5, [r2, r3, lsl #2]
   21d94:	bcs	21da4 <ReadCompressedDataSlabN+0x32c>
   21d98:	mov	r0, r5
   21d9c:	mov	r2, r3
   21da0:	b	21e40 <ReadCompressedDataSlabN+0x3c8>
   21da4:	vmov.i32	q9, #1	; 0x00000001
   21da8:	vmov.i32	q10, #1	; 0x00000001
   21dac:	vmov.i32	q8, #1	; 0x00000001
   21db0:	bic	r0, lr, #3
   21db4:	bic	ip, r3, #3
   21db8:	vmov.32	d23[1], r5
   21dbc:	vmov.32	d18[0], r6
   21dc0:	vmov.32	d20[0], r1
   21dc4:	sub	r2, r3, r0
   21dc8:	mov	r1, sl
   21dcc:	str	r0, [sp, #40]	; 0x28
   21dd0:	vorr	d16, d18, d18
   21dd4:	vmov.i32	q9, #1	; 0x00000001
   21dd8:	vorr	d18, d20, d20
   21ddc:	vld1.32	{d20-d21}, [r1], r7
   21de0:	subs	ip, ip, #4
   21de4:	vrev64.32	q12, q10
   21de8:	vext.8	q12, q12, q12, #8
   21dec:	vext.8	q11, q11, q12, #12
   21df0:	vmul.i32	q9, q9, q12
   21df4:	vmul.i32	q8, q11, q8
   21df8:	vorr	q11, q12, q12
   21dfc:	bne	21ddc <ReadCompressedDataSlabN+0x364>
   21e00:	mov	r0, r5
   21e04:	ldr	r5, [sp, #40]	; 0x28
   21e08:	vext.8	q11, q9, q8, #8
   21e0c:	vext.8	q12, q8, q8, #8
   21e10:	vmul.i32	q0, q9, q11
   21e14:	vmul.i32	q1, q8, q12
   21e18:	vmul.i32	q8, q0, d0[1]
   21e1c:	vmul.i32	q9, q1, d2[1]
   21e20:	vmov.32	r1, d16[0]
   21e24:	vmov.32	r6, d18[0]
   21e28:	cmp	lr, r5
   21e2c:	bne	21e38 <ReadCompressedDataSlabN+0x3c0>
   21e30:	add	ip, sp, #104	; 0x68
   21e34:	b	21e54 <ReadCompressedDataSlabN+0x3dc>
   21e38:	vmov.32	r5, d20[0]
   21e3c:	add	ip, sp, #104	; 0x68
   21e40:	mul	r6, r5, r6
   21e44:	ldr	r5, [r4, r2, lsl #2]
   21e48:	subs	r2, r2, #1
   21e4c:	mul	r1, r1, r5
   21e50:	bne	21e40 <ReadCompressedDataSlabN+0x3c8>
   21e54:	sub	r5, fp, #72	; 0x48
   21e58:	str	r6, [ip, r3, lsl #2]
   21e5c:	ldr	r2, [sp, #28]
   21e60:	add	sl, sl, #4
   21e64:	str	r1, [r5, r3, lsl #2]
   21e68:	ldr	r1, [fp, #20]
   21e6c:	ldr	r1, [r1, r3, lsl #2]
   21e70:	mla	r9, r1, r8, r9
   21e74:	ldr	r1, [fp, #28]
   21e78:	mov	r8, r6
   21e7c:	mov	r6, r0
   21e80:	ldr	r1, [r1, r3, lsl #2]
   21e84:	add	r3, r3, #1
   21e88:	mul	r2, r1, r2
   21e8c:	ldr	r1, [fp, #12]
   21e90:	str	r2, [sp, #28]
   21e94:	cmp	r3, r1
   21e98:	bne	21d70 <ReadCompressedDataSlabN+0x2f8>
   21e9c:	b	23194 <ReadCompressedDataSlabN+0x171c>
   21ea0:	ldr	r0, [r5]
   21ea4:	mov	r7, #0
   21ea8:	sub	r0, r0, #1
   21eac:	str	r0, [fp, #-72]	; 0xffffffb8
   21eb0:	ldr	r0, [fp, #28]
   21eb4:	ldr	r8, [r2]
   21eb8:	str	r8, [sp, #104]	; 0x68
   21ebc:	ldr	r0, [r0]
   21ec0:	str	r0, [sp, #24]
   21ec4:	ldr	r0, [fp, #12]
   21ec8:	cmp	r0, #2
   21ecc:	blt	2201c <ReadCompressedDataSlabN+0x5a4>
   21ed0:	sub	r4, r2, #4
   21ed4:	sub	sl, r2, #12
   21ed8:	mov	r3, #1
   21edc:	mov	lr, #0
   21ee0:	sub	r2, fp, #72	; 0x48
   21ee4:	mvn	r9, #15
   21ee8:	mov	r6, r8
   21eec:	mov	r7, #0
   21ef0:	ldr	r1, [fp, #24]
   21ef4:	add	lr, lr, #1
   21ef8:	cmp	lr, #4
   21efc:	ldr	r1, [r1, r3, lsl #2]
   21f00:	str	r6, [ip, r3, lsl #2]
   21f04:	sub	r1, r1, #1
   21f08:	str	r1, [r2, r3, lsl #2]
   21f0c:	ldr	r2, [fp, #16]
   21f10:	ldr	r5, [r2, r3, lsl #2]
   21f14:	bcs	21f24 <ReadCompressedDataSlabN+0x4ac>
   21f18:	mov	r0, r5
   21f1c:	mov	r2, r3
   21f20:	b	21fc0 <ReadCompressedDataSlabN+0x548>
   21f24:	vmov.i32	q9, #1	; 0x00000001
   21f28:	vmov.i32	q10, #1	; 0x00000001
   21f2c:	vmov.i32	q8, #1	; 0x00000001
   21f30:	bic	r0, lr, #3
   21f34:	bic	ip, r3, #3
   21f38:	vmov.32	d23[1], r5
   21f3c:	vmov.32	d18[0], r6
   21f40:	vmov.32	d20[0], r1
   21f44:	sub	r2, r3, r0
   21f48:	mov	r1, sl
   21f4c:	str	r0, [sp, #40]	; 0x28
   21f50:	vorr	d16, d18, d18
   21f54:	vmov.i32	q9, #1	; 0x00000001
   21f58:	vorr	d18, d20, d20
   21f5c:	vld1.32	{d20-d21}, [r1], r9
   21f60:	subs	ip, ip, #4
   21f64:	vrev64.32	q12, q10
   21f68:	vext.8	q12, q12, q12, #8
   21f6c:	vext.8	q11, q11, q12, #12
   21f70:	vmul.i32	q9, q9, q12
   21f74:	vmul.i32	q8, q11, q8
   21f78:	vorr	q11, q12, q12
   21f7c:	bne	21f5c <ReadCompressedDataSlabN+0x4e4>
   21f80:	mov	r0, r5
   21f84:	ldr	r5, [sp, #40]	; 0x28
   21f88:	vext.8	q11, q9, q8, #8
   21f8c:	vext.8	q12, q8, q8, #8
   21f90:	vmul.i32	q0, q9, q11
   21f94:	vmul.i32	q1, q8, q12
   21f98:	vmul.i32	q8, q0, d0[1]
   21f9c:	vmul.i32	q9, q1, d2[1]
   21fa0:	vmov.32	r1, d16[0]
   21fa4:	vmov.32	r6, d18[0]
   21fa8:	cmp	lr, r5
   21fac:	bne	21fb8 <ReadCompressedDataSlabN+0x540>
   21fb0:	add	ip, sp, #104	; 0x68
   21fb4:	b	21fd4 <ReadCompressedDataSlabN+0x55c>
   21fb8:	vmov.32	r5, d20[0]
   21fbc:	add	ip, sp, #104	; 0x68
   21fc0:	mul	r6, r5, r6
   21fc4:	ldr	r5, [r4, r2, lsl #2]
   21fc8:	subs	r2, r2, #1
   21fcc:	mul	r1, r1, r5
   21fd0:	bne	21fc0 <ReadCompressedDataSlabN+0x548>
   21fd4:	sub	r2, fp, #72	; 0x48
   21fd8:	str	r6, [ip, r3, lsl #2]
   21fdc:	ldr	r5, [sp, #24]
   21fe0:	add	sl, sl, #4
   21fe4:	str	r1, [r2, r3, lsl #2]
   21fe8:	ldr	r1, [fp, #20]
   21fec:	ldr	r1, [r1, r3, lsl #2]
   21ff0:	mla	r7, r1, r8, r7
   21ff4:	ldr	r1, [fp, #28]
   21ff8:	mov	r8, r6
   21ffc:	mov	r6, r0
   22000:	ldr	r1, [r1, r3, lsl #2]
   22004:	add	r3, r3, #1
   22008:	mul	r5, r1, r5
   2200c:	ldr	r1, [fp, #12]
   22010:	str	r5, [sp, #24]
   22014:	cmp	r3, r1
   22018:	bne	21ef0 <ReadCompressedDataSlabN+0x478>
   2201c:	ldr	r0, [sp, #44]	; 0x2c
   22020:	ldr	r2, [fp, #8]
   22024:	add	r1, sp, #48	; 0x30
   22028:	mov	r3, r7
   2202c:	bl	2728 <InflateSkipData>
   22030:	ldr	r0, [fp, #24]
   22034:	ldr	r0, [r0]
   22038:	cmp	r0, #1
   2203c:	bne	233e4 <ReadCompressedDataSlabN+0x196c>
   22040:	ldr	r0, [sp, #24]
   22044:	sub	r1, fp, #72	; 0x48
   22048:	cmp	r0, #1
   2204c:	blt	26074 <ReadCompressedDataSlabN+0x45fc>
   22050:	ldr	r0, [fp, #20]
   22054:	add	r6, r0, #4
   22058:	ldr	r0, [fp, #28]
   2205c:	add	r0, r0, #4
   22060:	str	r0, [sp, #40]	; 0x28
   22064:	sub	r0, fp, #112	; 0x70
   22068:	orr	r8, r0, #4
   2206c:	orr	r0, r1, #4
   22070:	add	r1, sp, #48	; 0x30
   22074:	str	r0, [sp, #28]
   22078:	mov	r0, #0
   2207c:	str	r0, [sp, #32]
   22080:	ldr	sl, [fp, #20]
   22084:	ldr	r3, [sl]
   22088:	cmp	r3, #0
   2208c:	beq	220b4 <ReadCompressedDataSlabN+0x63c>
   22090:	ldr	r9, [sp, #44]	; 0x2c
   22094:	ldr	r4, [fp, #8]
   22098:	mov	r5, r1
   2209c:	mov	r0, r9
   220a0:	mov	r2, r4
   220a4:	bl	2728 <InflateSkipData>
   220a8:	ldr	r0, [sl]
   220ac:	add	r7, r0, r7
   220b0:	b	220c0 <ReadCompressedDataSlabN+0x648>
   220b4:	ldr	r9, [sp, #44]	; 0x2c
   220b8:	ldr	r4, [fp, #8]
   220bc:	mov	r5, r1
   220c0:	ldr	r0, [fp, #28]
   220c4:	ldr	r1, [sp, #32]
   220c8:	mov	r3, r4
   220cc:	ldr	r0, [r0]
   220d0:	str	r0, [sp]
   220d4:	ldr	r0, [sp, #36]	; 0x24
   220d8:	add	r2, r0, r1
   220dc:	mov	r0, r9
   220e0:	mov	r1, r5
   220e4:	bl	1acbc <ReadCompressedInt8Data>
   220e8:	ldr	r1, [fp, #16]
   220ec:	ldr	r0, [sl]
   220f0:	mov	r2, r4
   220f4:	ldr	r1, [r1]
   220f8:	sub	r0, r1, r0
   220fc:	ldr	r1, [fp, #28]
   22100:	ldr	r1, [r1]
   22104:	sub	r3, r0, r1
   22108:	mov	r0, r9
   2210c:	mov	r1, r5
   22110:	bl	2728 <InflateSkipData>
   22114:	ldr	r0, [fp, #16]
   22118:	ldr	r1, [sl]
   2211c:	ldr	r0, [r0]
   22120:	add	r0, r0, r7
   22124:	sub	r7, r0, r1
   22128:	ldr	r0, [fp, #12]
   2212c:	cmp	r0, #2
   22130:	blt	22244 <ReadCompressedDataSlabN+0x7cc>
   22134:	mov	r0, #0
   22138:	add	r3, sp, #104	; 0x68
   2213c:	mov	r4, r0
   22140:	ldr	r0, [r8, r0, lsl #2]
   22144:	ldr	r1, [sp, #40]	; 0x28
   22148:	add	r0, r0, #1
   2214c:	str	r0, [r8, r4, lsl #2]
   22150:	ldr	r1, [r1, r4, lsl #2]
   22154:	sdiv	r2, r0, r1
   22158:	mls	r0, r2, r1, r0
   2215c:	cmp	r0, #0
   22160:	bne	2221c <ReadCompressedDataSlabN+0x7a4>
   22164:	mov	r0, #0
   22168:	add	r5, r3, r4, lsl #2
   2216c:	str	r0, [r8, r4, lsl #2]
   22170:	ldr	r0, [r5, #4]
   22174:	sdiv	r1, r7, r0
   22178:	mls	r1, r1, r0, r7
   2217c:	cmp	r1, #0
   22180:	beq	221d0 <ReadCompressedDataSlabN+0x758>
   22184:	ldr	r2, [r3, r4, lsl #2]
   22188:	ldr	r3, [r6, r4, lsl #2]
   2218c:	sub	r0, r0, r1
   22190:	add	r1, sp, #48	; 0x30
   22194:	mla	r3, r3, r2, r0
   22198:	ldr	r2, [fp, #8]
   2219c:	mov	r0, r9
   221a0:	bl	2728 <InflateSkipData>
   221a4:	ldr	r0, [r5, #4]
   221a8:	add	r3, sp, #104	; 0x68
   221ac:	sdiv	r2, r7, r0
   221b0:	add	r1, r0, r7
   221b4:	mul	r0, r2, r0
   221b8:	ldr	r2, [r6, r4, lsl #2]
   221bc:	sub	r0, r0, r7
   221c0:	add	r0, r1, r0
   221c4:	ldr	r1, [r3, r4, lsl #2]
   221c8:	mla	r7, r2, r1, r0
   221cc:	b	22204 <ReadCompressedDataSlabN+0x78c>
   221d0:	ldr	r0, [r6, r4, lsl #2]
   221d4:	cmp	r0, #0
   221d8:	beq	22204 <ReadCompressedDataSlabN+0x78c>
   221dc:	ldr	r1, [r3, r4, lsl #2]
   221e0:	ldr	r2, [fp, #8]
   221e4:	mul	r3, r1, r0
   221e8:	mov	r0, r9
   221ec:	add	r1, sp, #48	; 0x30
   221f0:	bl	2728 <InflateSkipData>
   221f4:	add	r3, sp, #104	; 0x68
   221f8:	ldr	r1, [r6, r4, lsl #2]
   221fc:	ldr	r0, [r3, r4, lsl #2]
   22200:	mla	r7, r1, r0, r7
   22204:	ldr	r2, [fp, #12]
   22208:	add	r1, r4, #2
   2220c:	add	r0, r4, #1
   22210:	cmp	r1, r2
   22214:	blt	2213c <ReadCompressedDataSlabN+0x6c4>
   22218:	b	22244 <ReadCompressedDataSlabN+0x7cc>
   2221c:	ldr	r0, [sp, #28]
   22220:	ldr	r4, [r0, r4, lsl #2]
   22224:	cmp	r4, #0
   22228:	beq	22244 <ReadCompressedDataSlabN+0x7cc>
   2222c:	ldr	r2, [fp, #8]
   22230:	mov	r0, r9
   22234:	add	r1, sp, #48	; 0x30
   22238:	mov	r3, r4
   2223c:	bl	2728 <InflateSkipData>
   22240:	add	r7, r4, r7
   22244:	ldr	r0, [fp, #28]
   22248:	ldr	r1, [sp, #32]
   2224c:	ldr	r0, [r0]
   22250:	add	r1, r0, r1
   22254:	ldr	r0, [sp, #24]
   22258:	str	r1, [sp, #32]
   2225c:	cmp	r1, r0
   22260:	add	r1, sp, #48	; 0x30
   22264:	blt	22080 <ReadCompressedDataSlabN+0x608>
   22268:	b	26074 <ReadCompressedDataSlabN+0x45fc>
   2226c:	ldr	r0, [r5]
   22270:	mov	r7, #0
   22274:	sub	r0, r0, #1
   22278:	str	r0, [fp, #-72]	; 0xffffffb8
   2227c:	ldr	r0, [fp, #28]
   22280:	ldr	r8, [r2]
   22284:	str	r8, [sp, #104]	; 0x68
   22288:	ldr	r0, [r0]
   2228c:	str	r0, [sp, #24]
   22290:	ldr	r0, [fp, #12]
   22294:	cmp	r0, #2
   22298:	blt	223e8 <ReadCompressedDataSlabN+0x970>
   2229c:	sub	r4, r2, #4
   222a0:	sub	sl, r2, #12
   222a4:	mov	r3, #1
   222a8:	mov	lr, #0
   222ac:	sub	r2, fp, #72	; 0x48
   222b0:	mvn	r9, #15
   222b4:	mov	r6, r8
   222b8:	mov	r7, #0
   222bc:	ldr	r1, [fp, #24]
   222c0:	add	lr, lr, #1
   222c4:	cmp	lr, #4
   222c8:	ldr	r1, [r1, r3, lsl #2]
   222cc:	str	r6, [ip, r3, lsl #2]
   222d0:	sub	r1, r1, #1
   222d4:	str	r1, [r2, r3, lsl #2]
   222d8:	ldr	r2, [fp, #16]
   222dc:	ldr	r5, [r2, r3, lsl #2]
   222e0:	bcs	222f0 <ReadCompressedDataSlabN+0x878>
   222e4:	mov	r0, r5
   222e8:	mov	r2, r3
   222ec:	b	2238c <ReadCompressedDataSlabN+0x914>
   222f0:	vmov.i32	q9, #1	; 0x00000001
   222f4:	vmov.i32	q10, #1	; 0x00000001
   222f8:	vmov.i32	q8, #1	; 0x00000001
   222fc:	bic	r0, lr, #3
   22300:	bic	ip, r3, #3
   22304:	vmov.32	d23[1], r5
   22308:	vmov.32	d18[0], r6
   2230c:	vmov.32	d20[0], r1
   22310:	sub	r2, r3, r0
   22314:	mov	r1, sl
   22318:	str	r0, [sp, #40]	; 0x28
   2231c:	vorr	d16, d18, d18
   22320:	vmov.i32	q9, #1	; 0x00000001
   22324:	vorr	d18, d20, d20
   22328:	vld1.32	{d20-d21}, [r1], r9
   2232c:	subs	ip, ip, #4
   22330:	vrev64.32	q12, q10
   22334:	vext.8	q12, q12, q12, #8
   22338:	vext.8	q11, q11, q12, #12
   2233c:	vmul.i32	q9, q9, q12
   22340:	vmul.i32	q8, q11, q8
   22344:	vorr	q11, q12, q12
   22348:	bne	22328 <ReadCompressedDataSlabN+0x8b0>
   2234c:	mov	r0, r5
   22350:	ldr	r5, [sp, #40]	; 0x28
   22354:	vext.8	q11, q9, q8, #8
   22358:	vext.8	q12, q8, q8, #8
   2235c:	vmul.i32	q0, q9, q11
   22360:	vmul.i32	q1, q8, q12
   22364:	vmul.i32	q8, q0, d0[1]
   22368:	vmul.i32	q9, q1, d2[1]
   2236c:	vmov.32	r1, d16[0]
   22370:	vmov.32	r6, d18[0]
   22374:	cmp	lr, r5
   22378:	bne	22384 <ReadCompressedDataSlabN+0x90c>
   2237c:	add	ip, sp, #104	; 0x68
   22380:	b	223a0 <ReadCompressedDataSlabN+0x928>
   22384:	vmov.32	r5, d20[0]
   22388:	add	ip, sp, #104	; 0x68
   2238c:	mul	r6, r5, r6
   22390:	ldr	r5, [r4, r2, lsl #2]
   22394:	subs	r2, r2, #1
   22398:	mul	r1, r1, r5
   2239c:	bne	2238c <ReadCompressedDataSlabN+0x914>
   223a0:	sub	r2, fp, #72	; 0x48
   223a4:	str	r6, [ip, r3, lsl #2]
   223a8:	ldr	r5, [sp, #24]
   223ac:	add	sl, sl, #4
   223b0:	str	r1, [r2, r3, lsl #2]
   223b4:	ldr	r1, [fp, #20]
   223b8:	ldr	r1, [r1, r3, lsl #2]
   223bc:	mla	r7, r1, r8, r7
   223c0:	ldr	r1, [fp, #28]
   223c4:	mov	r8, r6
   223c8:	mov	r6, r0
   223cc:	ldr	r1, [r1, r3, lsl #2]
   223d0:	add	r3, r3, #1
   223d4:	mul	r5, r1, r5
   223d8:	ldr	r1, [fp, #12]
   223dc:	str	r5, [sp, #24]
   223e0:	cmp	r3, r1
   223e4:	bne	222bc <ReadCompressedDataSlabN+0x844>
   223e8:	ldr	r0, [sp, #44]	; 0x2c
   223ec:	ldr	r2, [fp, #8]
   223f0:	add	r1, sp, #48	; 0x30
   223f4:	mov	r3, r7
   223f8:	bl	2728 <InflateSkipData>
   223fc:	ldr	r0, [fp, #24]
   22400:	ldr	r0, [r0]
   22404:	cmp	r0, #1
   22408:	bne	23710 <ReadCompressedDataSlabN+0x1c98>
   2240c:	ldr	r0, [sp, #24]
   22410:	sub	r1, fp, #72	; 0x48
   22414:	cmp	r0, #1
   22418:	blt	26074 <ReadCompressedDataSlabN+0x45fc>
   2241c:	ldr	r0, [fp, #20]
   22420:	add	r6, r0, #4
   22424:	ldr	r0, [fp, #28]
   22428:	add	r0, r0, #4
   2242c:	str	r0, [sp, #40]	; 0x28
   22430:	sub	r0, fp, #112	; 0x70
   22434:	orr	r8, r0, #4
   22438:	orr	r0, r1, #4
   2243c:	add	r1, sp, #48	; 0x30
   22440:	str	r0, [sp, #28]
   22444:	mov	r0, #0
   22448:	str	r0, [sp, #32]
   2244c:	ldr	sl, [fp, #20]
   22450:	ldr	r3, [sl]
   22454:	cmp	r3, #0
   22458:	beq	22480 <ReadCompressedDataSlabN+0xa08>
   2245c:	ldr	r9, [sp, #44]	; 0x2c
   22460:	ldr	r4, [fp, #8]
   22464:	mov	r5, r1
   22468:	mov	r0, r9
   2246c:	mov	r2, r4
   22470:	bl	2728 <InflateSkipData>
   22474:	ldr	r0, [sl]
   22478:	add	r7, r0, r7
   2247c:	b	2248c <ReadCompressedDataSlabN+0xa14>
   22480:	ldr	r9, [sp, #44]	; 0x2c
   22484:	ldr	r4, [fp, #8]
   22488:	mov	r5, r1
   2248c:	ldr	r0, [fp, #28]
   22490:	ldr	r1, [sp, #32]
   22494:	mov	r3, r4
   22498:	ldr	r0, [r0]
   2249c:	str	r0, [sp]
   224a0:	ldr	r0, [sp, #36]	; 0x24
   224a4:	add	r2, r0, r1
   224a8:	mov	r0, r9
   224ac:	mov	r1, r5
   224b0:	bl	1d2f0 <ReadCompressedUInt8Data>
   224b4:	ldr	r1, [fp, #16]
   224b8:	ldr	r0, [sl]
   224bc:	mov	r2, r4
   224c0:	ldr	r1, [r1]
   224c4:	sub	r0, r1, r0
   224c8:	ldr	r1, [fp, #28]
   224cc:	ldr	r1, [r1]
   224d0:	sub	r3, r0, r1
   224d4:	mov	r0, r9
   224d8:	mov	r1, r5
   224dc:	bl	2728 <InflateSkipData>
   224e0:	ldr	r0, [fp, #16]
   224e4:	ldr	r1, [sl]
   224e8:	ldr	r0, [r0]
   224ec:	add	r0, r0, r7
   224f0:	sub	r7, r0, r1
   224f4:	ldr	r0, [fp, #12]
   224f8:	cmp	r0, #2
   224fc:	blt	22610 <ReadCompressedDataSlabN+0xb98>
   22500:	mov	r0, #0
   22504:	add	r3, sp, #104	; 0x68
   22508:	mov	r4, r0
   2250c:	ldr	r0, [r8, r0, lsl #2]
   22510:	ldr	r1, [sp, #40]	; 0x28
   22514:	add	r0, r0, #1
   22518:	str	r0, [r8, r4, lsl #2]
   2251c:	ldr	r1, [r1, r4, lsl #2]
   22520:	sdiv	r2, r0, r1
   22524:	mls	r0, r2, r1, r0
   22528:	cmp	r0, #0
   2252c:	bne	225e8 <ReadCompressedDataSlabN+0xb70>
   22530:	mov	r0, #0
   22534:	add	r5, r3, r4, lsl #2
   22538:	str	r0, [r8, r4, lsl #2]
   2253c:	ldr	r0, [r5, #4]
   22540:	sdiv	r1, r7, r0
   22544:	mls	r1, r1, r0, r7
   22548:	cmp	r1, #0
   2254c:	beq	2259c <ReadCompressedDataSlabN+0xb24>
   22550:	ldr	r2, [r3, r4, lsl #2]
   22554:	ldr	r3, [r6, r4, lsl #2]
   22558:	sub	r0, r0, r1
   2255c:	add	r1, sp, #48	; 0x30
   22560:	mla	r3, r3, r2, r0
   22564:	ldr	r2, [fp, #8]
   22568:	mov	r0, r9
   2256c:	bl	2728 <InflateSkipData>
   22570:	ldr	r0, [r5, #4]
   22574:	add	r3, sp, #104	; 0x68
   22578:	sdiv	r2, r7, r0
   2257c:	add	r1, r0, r7
   22580:	mul	r0, r2, r0
   22584:	ldr	r2, [r6, r4, lsl #2]
   22588:	sub	r0, r0, r7
   2258c:	add	r0, r1, r0
   22590:	ldr	r1, [r3, r4, lsl #2]
   22594:	mla	r7, r2, r1, r0
   22598:	b	225d0 <ReadCompressedDataSlabN+0xb58>
   2259c:	ldr	r0, [r6, r4, lsl #2]
   225a0:	cmp	r0, #0
   225a4:	beq	225d0 <ReadCompressedDataSlabN+0xb58>
   225a8:	ldr	r1, [r3, r4, lsl #2]
   225ac:	ldr	r2, [fp, #8]
   225b0:	mul	r3, r1, r0
   225b4:	mov	r0, r9
   225b8:	add	r1, sp, #48	; 0x30
   225bc:	bl	2728 <InflateSkipData>
   225c0:	add	r3, sp, #104	; 0x68
   225c4:	ldr	r1, [r6, r4, lsl #2]
   225c8:	ldr	r0, [r3, r4, lsl #2]
   225cc:	mla	r7, r1, r0, r7
   225d0:	ldr	r2, [fp, #12]
   225d4:	add	r1, r4, #2
   225d8:	add	r0, r4, #1
   225dc:	cmp	r1, r2
   225e0:	blt	22508 <ReadCompressedDataSlabN+0xa90>
   225e4:	b	22610 <ReadCompressedDataSlabN+0xb98>
   225e8:	ldr	r0, [sp, #28]
   225ec:	ldr	r4, [r0, r4, lsl #2]
   225f0:	cmp	r4, #0
   225f4:	beq	22610 <ReadCompressedDataSlabN+0xb98>
   225f8:	ldr	r2, [fp, #8]
   225fc:	mov	r0, r9
   22600:	add	r1, sp, #48	; 0x30
   22604:	mov	r3, r4
   22608:	bl	2728 <InflateSkipData>
   2260c:	add	r7, r4, r7
   22610:	ldr	r0, [fp, #28]
   22614:	ldr	r1, [sp, #32]
   22618:	ldr	r0, [r0]
   2261c:	add	r1, r0, r1
   22620:	ldr	r0, [sp, #24]
   22624:	str	r1, [sp, #32]
   22628:	cmp	r1, r0
   2262c:	add	r1, sp, #48	; 0x30
   22630:	blt	2244c <ReadCompressedDataSlabN+0x9d4>
   22634:	b	26074 <ReadCompressedDataSlabN+0x45fc>
   22638:	ldr	r0, [r5]
   2263c:	sub	r0, r0, #1
   22640:	str	r0, [fp, #-72]	; 0xffffffb8
   22644:	ldr	r0, [fp, #28]
   22648:	ldr	r8, [r2]
   2264c:	str	r8, [sp, #104]	; 0x68
   22650:	ldr	r0, [r0]
   22654:	str	r0, [sp, #28]
   22658:	ldr	r0, [fp, #12]
   2265c:	cmp	r0, #2
   22660:	blt	23a3c <ReadCompressedDataSlabN+0x1fc4>
   22664:	sub	r9, fp, #72	; 0x48
   22668:	sub	r4, r2, #4
   2266c:	sub	sl, r2, #12
   22670:	mov	r3, #1
   22674:	mov	r0, #0
   22678:	mvn	r7, #15
   2267c:	mov	r6, r8
   22680:	mov	lr, #0
   22684:	mov	r5, r9
   22688:	ldr	r1, [fp, #24]
   2268c:	ldr	r2, [fp, #16]
   22690:	add	r0, r0, #1
   22694:	cmp	r0, #4
   22698:	ldr	r1, [r1, r3, lsl #2]
   2269c:	str	r6, [ip, r3, lsl #2]
   226a0:	sub	r1, r1, #1
   226a4:	str	r1, [r5, r3, lsl #2]
   226a8:	ldr	r5, [r2, r3, lsl #2]
   226ac:	bcs	226bc <ReadCompressedDataSlabN+0xc44>
   226b0:	mov	r9, r5
   226b4:	mov	r2, r3
   226b8:	b	22758 <ReadCompressedDataSlabN+0xce0>
   226bc:	vmov.i32	q9, #1	; 0x00000001
   226c0:	vmov.i32	q10, #1	; 0x00000001
   226c4:	vmov.i32	q8, #1	; 0x00000001
   226c8:	bic	ip, r3, #3
   226cc:	vmov.32	d23[1], r5
   226d0:	vmov.32	d18[0], r6
   226d4:	vmov.32	d20[0], r1
   226d8:	bic	r1, r0, #3
   226dc:	vorr	d16, d18, d18
   226e0:	vmov.i32	q9, #1	; 0x00000001
   226e4:	str	r1, [sp, #40]	; 0x28
   226e8:	sub	r2, r3, r1
   226ec:	mov	r1, sl
   226f0:	vorr	d18, d20, d20
   226f4:	vld1.32	{d20-d21}, [r1], r7
   226f8:	subs	ip, ip, #4
   226fc:	vrev64.32	q12, q10
   22700:	vext.8	q12, q12, q12, #8
   22704:	vext.8	q11, q11, q12, #12
   22708:	vmul.i32	q9, q9, q12
   2270c:	vmul.i32	q8, q11, q8
   22710:	vorr	q11, q12, q12
   22714:	bne	226f4 <ReadCompressedDataSlabN+0xc7c>
   22718:	mov	r9, r5
   2271c:	ldr	r5, [sp, #40]	; 0x28
   22720:	vext.8	q11, q9, q8, #8
   22724:	vext.8	q12, q8, q8, #8
   22728:	vmul.i32	q0, q9, q11
   2272c:	vmul.i32	q1, q8, q12
   22730:	vmul.i32	q8, q0, d0[1]
   22734:	vmul.i32	q9, q1, d2[1]
   22738:	vmov.32	r1, d16[0]
   2273c:	vmov.32	r6, d18[0]
   22740:	cmp	r0, r5
   22744:	bne	22750 <ReadCompressedDataSlabN+0xcd8>
   22748:	add	ip, sp, #104	; 0x68
   2274c:	b	2276c <ReadCompressedDataSlabN+0xcf4>
   22750:	vmov.32	r5, d20[0]
   22754:	add	ip, sp, #104	; 0x68
   22758:	mul	r6, r5, r6
   2275c:	ldr	r5, [r4, r2, lsl #2]
   22760:	subs	r2, r2, #1
   22764:	mul	r1, r1, r5
   22768:	bne	22758 <ReadCompressedDataSlabN+0xce0>
   2276c:	sub	r5, fp, #72	; 0x48
   22770:	str	r6, [ip, r3, lsl #2]
   22774:	ldr	r2, [sp, #28]
   22778:	add	sl, sl, #4
   2277c:	str	r1, [r5, r3, lsl #2]
   22780:	ldr	r1, [fp, #20]
   22784:	ldr	r1, [r1, r3, lsl #2]
   22788:	mla	lr, r1, r8, lr
   2278c:	ldr	r1, [fp, #28]
   22790:	mov	r8, r6
   22794:	mov	r6, r9
   22798:	ldr	r1, [r1, r3, lsl #2]
   2279c:	add	r3, r3, #1
   227a0:	mul	r2, r1, r2
   227a4:	ldr	r1, [fp, #12]
   227a8:	str	r2, [sp, #28]
   227ac:	cmp	r3, r1
   227b0:	bne	22688 <ReadCompressedDataSlabN+0xc10>
   227b4:	b	23a40 <ReadCompressedDataSlabN+0x1fc8>
   227b8:	ldr	r0, [r5]
   227bc:	sub	r0, r0, #1
   227c0:	str	r0, [fp, #-72]	; 0xffffffb8
   227c4:	ldr	r0, [fp, #28]
   227c8:	ldr	r8, [r2]
   227cc:	str	r8, [sp, #104]	; 0x68
   227d0:	ldr	r0, [r0]
   227d4:	str	r0, [sp, #28]
   227d8:	ldr	r0, [fp, #12]
   227dc:	cmp	r0, #2
   227e0:	blt	23c9c <ReadCompressedDataSlabN+0x2224>
   227e4:	sub	r9, fp, #72	; 0x48
   227e8:	sub	r4, r2, #4
   227ec:	sub	sl, r2, #12
   227f0:	mov	r3, #1
   227f4:	mov	r0, #0
   227f8:	mvn	r7, #15
   227fc:	mov	r6, r8
   22800:	mov	lr, #0
   22804:	mov	r5, r9
   22808:	ldr	r1, [fp, #24]
   2280c:	ldr	r2, [fp, #16]
   22810:	add	r0, r0, #1
   22814:	cmp	r0, #4
   22818:	ldr	r1, [r1, r3, lsl #2]
   2281c:	str	r6, [ip, r3, lsl #2]
   22820:	sub	r1, r1, #1
   22824:	str	r1, [r5, r3, lsl #2]
   22828:	ldr	r5, [r2, r3, lsl #2]
   2282c:	bcs	2283c <ReadCompressedDataSlabN+0xdc4>
   22830:	mov	r9, r5
   22834:	mov	r2, r3
   22838:	b	228d8 <ReadCompressedDataSlabN+0xe60>
   2283c:	vmov.i32	q9, #1	; 0x00000001
   22840:	vmov.i32	q10, #1	; 0x00000001
   22844:	vmov.i32	q8, #1	; 0x00000001
   22848:	bic	ip, r3, #3
   2284c:	vmov.32	d23[1], r5
   22850:	vmov.32	d18[0], r6
   22854:	vmov.32	d20[0], r1
   22858:	bic	r1, r0, #3
   2285c:	vorr	d16, d18, d18
   22860:	vmov.i32	q9, #1	; 0x00000001
   22864:	str	r1, [sp, #40]	; 0x28
   22868:	sub	r2, r3, r1
   2286c:	mov	r1, sl
   22870:	vorr	d18, d20, d20
   22874:	vld1.32	{d20-d21}, [r1], r7
   22878:	subs	ip, ip, #4
   2287c:	vrev64.32	q12, q10
   22880:	vext.8	q12, q12, q12, #8
   22884:	vext.8	q11, q11, q12, #12
   22888:	vmul.i32	q9, q9, q12
   2288c:	vmul.i32	q8, q11, q8
   22890:	vorr	q11, q12, q12
   22894:	bne	22874 <ReadCompressedDataSlabN+0xdfc>
   22898:	mov	r9, r5
   2289c:	ldr	r5, [sp, #40]	; 0x28
   228a0:	vext.8	q11, q9, q8, #8
   228a4:	vext.8	q12, q8, q8, #8
   228a8:	vmul.i32	q0, q9, q11
   228ac:	vmul.i32	q1, q8, q12
   228b0:	vmul.i32	q8, q0, d0[1]
   228b4:	vmul.i32	q9, q1, d2[1]
   228b8:	vmov.32	r1, d16[0]
   228bc:	vmov.32	r6, d18[0]
   228c0:	cmp	r0, r5
   228c4:	bne	228d0 <ReadCompressedDataSlabN+0xe58>
   228c8:	add	ip, sp, #104	; 0x68
   228cc:	b	228ec <ReadCompressedDataSlabN+0xe74>
   228d0:	vmov.32	r5, d20[0]
   228d4:	add	ip, sp, #104	; 0x68
   228d8:	mul	r6, r5, r6
   228dc:	ldr	r5, [r4, r2, lsl #2]
   228e0:	subs	r2, r2, #1
   228e4:	mul	r1, r1, r5
   228e8:	bne	228d8 <ReadCompressedDataSlabN+0xe60>
   228ec:	sub	r5, fp, #72	; 0x48
   228f0:	str	r6, [ip, r3, lsl #2]
   228f4:	ldr	r2, [sp, #28]
   228f8:	add	sl, sl, #4
   228fc:	str	r1, [r5, r3, lsl #2]
   22900:	ldr	r1, [fp, #20]
   22904:	ldr	r1, [r1, r3, lsl #2]
   22908:	mla	lr, r1, r8, lr
   2290c:	ldr	r1, [fp, #28]
   22910:	mov	r8, r6
   22914:	mov	r6, r9
   22918:	ldr	r1, [r1, r3, lsl #2]
   2291c:	add	r3, r3, #1
   22920:	mul	r2, r1, r2
   22924:	ldr	r1, [fp, #12]
   22928:	str	r2, [sp, #28]
   2292c:	cmp	r3, r1
   22930:	bne	22808 <ReadCompressedDataSlabN+0xd90>
   22934:	b	23ca0 <ReadCompressedDataSlabN+0x2228>
   22938:	ldr	r0, [r5]
   2293c:	sub	r0, r0, #1
   22940:	str	r0, [fp, #-72]	; 0xffffffb8
   22944:	ldr	r0, [fp, #28]
   22948:	ldr	r8, [r2]
   2294c:	str	r8, [sp, #104]	; 0x68
   22950:	ldr	r0, [r0]
   22954:	str	r0, [sp, #28]
   22958:	ldr	r0, [fp, #12]
   2295c:	cmp	r0, #2
   22960:	blt	23efc <ReadCompressedDataSlabN+0x2484>
   22964:	sub	r9, fp, #72	; 0x48
   22968:	sub	r4, r2, #4
   2296c:	sub	sl, r2, #12
   22970:	mov	r3, #1
   22974:	mov	r0, #0
   22978:	mvn	r7, #15
   2297c:	mov	r6, r8
   22980:	mov	lr, #0
   22984:	mov	r5, r9
   22988:	ldr	r1, [fp, #24]
   2298c:	ldr	r2, [fp, #16]
   22990:	add	r0, r0, #1
   22994:	cmp	r0, #4
   22998:	ldr	r1, [r1, r3, lsl #2]
   2299c:	str	r6, [ip, r3, lsl #2]
   229a0:	sub	r1, r1, #1
   229a4:	str	r1, [r5, r3, lsl #2]
   229a8:	ldr	r5, [r2, r3, lsl #2]
   229ac:	bcs	229bc <ReadCompressedDataSlabN+0xf44>
   229b0:	mov	r9, r5
   229b4:	mov	r2, r3
   229b8:	b	22a58 <ReadCompressedDataSlabN+0xfe0>
   229bc:	vmov.i32	q9, #1	; 0x00000001
   229c0:	vmov.i32	q10, #1	; 0x00000001
   229c4:	vmov.i32	q8, #1	; 0x00000001
   229c8:	bic	ip, r3, #3
   229cc:	vmov.32	d23[1], r5
   229d0:	vmov.32	d18[0], r6
   229d4:	vmov.32	d20[0], r1
   229d8:	bic	r1, r0, #3
   229dc:	vorr	d16, d18, d18
   229e0:	vmov.i32	q9, #1	; 0x00000001
   229e4:	str	r1, [sp, #40]	; 0x28
   229e8:	sub	r2, r3, r1
   229ec:	mov	r1, sl
   229f0:	vorr	d18, d20, d20
   229f4:	vld1.32	{d20-d21}, [r1], r7
   229f8:	subs	ip, ip, #4
   229fc:	vrev64.32	q12, q10
   22a00:	vext.8	q12, q12, q12, #8
   22a04:	vext.8	q11, q11, q12, #12
   22a08:	vmul.i32	q9, q9, q12
   22a0c:	vmul.i32	q8, q11, q8
   22a10:	vorr	q11, q12, q12
   22a14:	bne	229f4 <ReadCompressedDataSlabN+0xf7c>
   22a18:	mov	r9, r5
   22a1c:	ldr	r5, [sp, #40]	; 0x28
   22a20:	vext.8	q11, q9, q8, #8
   22a24:	vext.8	q12, q8, q8, #8
   22a28:	vmul.i32	q0, q9, q11
   22a2c:	vmul.i32	q1, q8, q12
   22a30:	vmul.i32	q8, q0, d0[1]
   22a34:	vmul.i32	q9, q1, d2[1]
   22a38:	vmov.32	r1, d16[0]
   22a3c:	vmov.32	r6, d18[0]
   22a40:	cmp	r0, r5
   22a44:	bne	22a50 <ReadCompressedDataSlabN+0xfd8>
   22a48:	add	ip, sp, #104	; 0x68
   22a4c:	b	22a6c <ReadCompressedDataSlabN+0xff4>
   22a50:	vmov.32	r5, d20[0]
   22a54:	add	ip, sp, #104	; 0x68
   22a58:	mul	r6, r5, r6
   22a5c:	ldr	r5, [r4, r2, lsl #2]
   22a60:	subs	r2, r2, #1
   22a64:	mul	r1, r1, r5
   22a68:	bne	22a58 <ReadCompressedDataSlabN+0xfe0>
   22a6c:	sub	r5, fp, #72	; 0x48
   22a70:	str	r6, [ip, r3, lsl #2]
   22a74:	ldr	r2, [sp, #28]
   22a78:	add	sl, sl, #4
   22a7c:	str	r1, [r5, r3, lsl #2]
   22a80:	ldr	r1, [fp, #20]
   22a84:	ldr	r1, [r1, r3, lsl #2]
   22a88:	mla	lr, r1, r8, lr
   22a8c:	ldr	r1, [fp, #28]
   22a90:	mov	r8, r6
   22a94:	mov	r6, r9
   22a98:	ldr	r1, [r1, r3, lsl #2]
   22a9c:	add	r3, r3, #1
   22aa0:	mul	r2, r1, r2
   22aa4:	ldr	r1, [fp, #12]
   22aa8:	str	r2, [sp, #28]
   22aac:	cmp	r3, r1
   22ab0:	bne	22988 <ReadCompressedDataSlabN+0xf10>
   22ab4:	b	23f00 <ReadCompressedDataSlabN+0x2488>
   22ab8:	ldr	r0, [r5]
   22abc:	sub	r0, r0, #1
   22ac0:	str	r0, [fp, #-72]	; 0xffffffb8
   22ac4:	ldr	r0, [fp, #28]
   22ac8:	ldr	r8, [r2]
   22acc:	str	r8, [sp, #104]	; 0x68
   22ad0:	ldr	r0, [r0]
   22ad4:	str	r0, [sp, #28]
   22ad8:	ldr	r0, [fp, #12]
   22adc:	cmp	r0, #2
   22ae0:	blt	2415c <ReadCompressedDataSlabN+0x26e4>
   22ae4:	sub	r9, fp, #72	; 0x48
   22ae8:	sub	r4, r2, #4
   22aec:	sub	sl, r2, #12
   22af0:	mov	r3, #1
   22af4:	mov	r0, #0
   22af8:	mvn	r7, #15
   22afc:	mov	r6, r8
   22b00:	mov	lr, #0
   22b04:	mov	r5, r9
   22b08:	ldr	r1, [fp, #24]
   22b0c:	ldr	r2, [fp, #16]
   22b10:	add	r0, r0, #1
   22b14:	cmp	r0, #4
   22b18:	ldr	r1, [r1, r3, lsl #2]
   22b1c:	str	r6, [ip, r3, lsl #2]
   22b20:	sub	r1, r1, #1
   22b24:	str	r1, [r5, r3, lsl #2]
   22b28:	ldr	r5, [r2, r3, lsl #2]
   22b2c:	bcs	22b3c <ReadCompressedDataSlabN+0x10c4>
   22b30:	mov	r9, r5
   22b34:	mov	r2, r3
   22b38:	b	22bd8 <ReadCompressedDataSlabN+0x1160>
   22b3c:	vmov.i32	q9, #1	; 0x00000001
   22b40:	vmov.i32	q10, #1	; 0x00000001
   22b44:	vmov.i32	q8, #1	; 0x00000001
   22b48:	bic	ip, r3, #3
   22b4c:	vmov.32	d23[1], r5
   22b50:	vmov.32	d18[0], r6
   22b54:	vmov.32	d20[0], r1
   22b58:	bic	r1, r0, #3
   22b5c:	vorr	d16, d18, d18
   22b60:	vmov.i32	q9, #1	; 0x00000001
   22b64:	str	r1, [sp, #40]	; 0x28
   22b68:	sub	r2, r3, r1
   22b6c:	mov	r1, sl
   22b70:	vorr	d18, d20, d20
   22b74:	vld1.32	{d20-d21}, [r1], r7
   22b78:	subs	ip, ip, #4
   22b7c:	vrev64.32	q12, q10
   22b80:	vext.8	q12, q12, q12, #8
   22b84:	vext.8	q11, q11, q12, #12
   22b88:	vmul.i32	q9, q9, q12
   22b8c:	vmul.i32	q8, q11, q8
   22b90:	vorr	q11, q12, q12
   22b94:	bne	22b74 <ReadCompressedDataSlabN+0x10fc>
   22b98:	mov	r9, r5
   22b9c:	ldr	r5, [sp, #40]	; 0x28
   22ba0:	vext.8	q11, q9, q8, #8
   22ba4:	vext.8	q12, q8, q8, #8
   22ba8:	vmul.i32	q0, q9, q11
   22bac:	vmul.i32	q1, q8, q12
   22bb0:	vmul.i32	q8, q0, d0[1]
   22bb4:	vmul.i32	q9, q1, d2[1]
   22bb8:	vmov.32	r1, d16[0]
   22bbc:	vmov.32	r6, d18[0]
   22bc0:	cmp	r0, r5
   22bc4:	bne	22bd0 <ReadCompressedDataSlabN+0x1158>
   22bc8:	add	ip, sp, #104	; 0x68
   22bcc:	b	22bec <ReadCompressedDataSlabN+0x1174>
   22bd0:	vmov.32	r5, d20[0]
   22bd4:	add	ip, sp, #104	; 0x68
   22bd8:	mul	r6, r5, r6
   22bdc:	ldr	r5, [r4, r2, lsl #2]
   22be0:	subs	r2, r2, #1
   22be4:	mul	r1, r1, r5
   22be8:	bne	22bd8 <ReadCompressedDataSlabN+0x1160>
   22bec:	sub	r5, fp, #72	; 0x48
   22bf0:	str	r6, [ip, r3, lsl #2]
   22bf4:	ldr	r2, [sp, #28]
   22bf8:	add	sl, sl, #4
   22bfc:	str	r1, [r5, r3, lsl #2]
   22c00:	ldr	r1, [fp, #20]
   22c04:	ldr	r1, [r1, r3, lsl #2]
   22c08:	mla	lr, r1, r8, lr
   22c0c:	ldr	r1, [fp, #28]
   22c10:	mov	r8, r6
   22c14:	mov	r6, r9
   22c18:	ldr	r1, [r1, r3, lsl #2]
   22c1c:	add	r3, r3, #1
   22c20:	mul	r2, r1, r2
   22c24:	ldr	r1, [fp, #12]
   22c28:	str	r2, [sp, #28]
   22c2c:	cmp	r3, r1
   22c30:	bne	22b08 <ReadCompressedDataSlabN+0x1090>
   22c34:	b	24160 <ReadCompressedDataSlabN+0x26e8>
   22c38:	ldr	r0, [r5]
   22c3c:	sub	r0, r0, #1
   22c40:	str	r0, [fp, #-72]	; 0xffffffb8
   22c44:	ldr	r0, [fp, #28]
   22c48:	ldr	r8, [r2]
   22c4c:	str	r8, [sp, #104]	; 0x68
   22c50:	ldr	r0, [r0]
   22c54:	str	r0, [sp, #24]
   22c58:	ldr	r0, [fp, #12]
   22c5c:	cmp	r0, #2
   22c60:	blt	243bc <ReadCompressedDataSlabN+0x2944>
   22c64:	sub	r9, fp, #72	; 0x48
   22c68:	sub	r4, r2, #4
   22c6c:	sub	sl, r2, #12
   22c70:	mov	r3, #1
   22c74:	mov	r0, #0
   22c78:	mvn	r7, #15
   22c7c:	mov	r6, r8
   22c80:	mov	lr, #0
   22c84:	mov	r5, r9
   22c88:	ldr	r1, [fp, #24]
   22c8c:	ldr	r2, [fp, #16]
   22c90:	add	r0, r0, #1
   22c94:	cmp	r0, #4
   22c98:	ldr	r1, [r1, r3, lsl #2]
   22c9c:	str	r6, [ip, r3, lsl #2]
   22ca0:	sub	r1, r1, #1
   22ca4:	str	r1, [r5, r3, lsl #2]
   22ca8:	ldr	r5, [r2, r3, lsl #2]
   22cac:	bcs	22cbc <ReadCompressedDataSlabN+0x1244>
   22cb0:	mov	r9, r5
   22cb4:	mov	r2, r3
   22cb8:	b	22d58 <ReadCompressedDataSlabN+0x12e0>
   22cbc:	vmov.i32	q9, #1	; 0x00000001
   22cc0:	vmov.i32	q10, #1	; 0x00000001
   22cc4:	vmov.i32	q8, #1	; 0x00000001
   22cc8:	bic	ip, r3, #3
   22ccc:	vmov.32	d23[1], r5
   22cd0:	vmov.32	d18[0], r6
   22cd4:	vmov.32	d20[0], r1
   22cd8:	bic	r1, r0, #3
   22cdc:	vorr	d16, d18, d18
   22ce0:	vmov.i32	q9, #1	; 0x00000001
   22ce4:	str	r1, [sp, #40]	; 0x28
   22ce8:	sub	r2, r3, r1
   22cec:	mov	r1, sl
   22cf0:	vorr	d18, d20, d20
   22cf4:	vld1.32	{d20-d21}, [r1], r7
   22cf8:	subs	ip, ip, #4
   22cfc:	vrev64.32	q12, q10
   22d00:	vext.8	q12, q12, q12, #8
   22d04:	vext.8	q11, q11, q12, #12
   22d08:	vmul.i32	q9, q9, q12
   22d0c:	vmul.i32	q8, q11, q8
   22d10:	vorr	q11, q12, q12
   22d14:	bne	22cf4 <ReadCompressedDataSlabN+0x127c>
   22d18:	mov	r9, r5
   22d1c:	ldr	r5, [sp, #40]	; 0x28
   22d20:	vext.8	q11, q9, q8, #8
   22d24:	vext.8	q12, q8, q8, #8
   22d28:	vmul.i32	q0, q9, q11
   22d2c:	vmul.i32	q1, q8, q12
   22d30:	vmul.i32	q8, q0, d0[1]
   22d34:	vmul.i32	q9, q1, d2[1]
   22d38:	vmov.32	r1, d16[0]
   22d3c:	vmov.32	r6, d18[0]
   22d40:	cmp	r0, r5
   22d44:	bne	22d50 <ReadCompressedDataSlabN+0x12d8>
   22d48:	add	ip, sp, #104	; 0x68
   22d4c:	b	22d6c <ReadCompressedDataSlabN+0x12f4>
   22d50:	vmov.32	r5, d20[0]
   22d54:	add	ip, sp, #104	; 0x68
   22d58:	mul	r6, r5, r6
   22d5c:	ldr	r5, [r4, r2, lsl #2]
   22d60:	subs	r2, r2, #1
   22d64:	mul	r1, r1, r5
   22d68:	bne	22d58 <ReadCompressedDataSlabN+0x12e0>
   22d6c:	sub	r5, fp, #72	; 0x48
   22d70:	str	r6, [ip, r3, lsl #2]
   22d74:	ldr	r2, [sp, #24]
   22d78:	add	sl, sl, #4
   22d7c:	str	r1, [r5, r3, lsl #2]
   22d80:	ldr	r1, [fp, #20]
   22d84:	ldr	r1, [r1, r3, lsl #2]
   22d88:	mla	lr, r1, r8, lr
   22d8c:	ldr	r1, [fp, #28]
   22d90:	mov	r8, r6
   22d94:	mov	r6, r9
   22d98:	ldr	r1, [r1, r3, lsl #2]
   22d9c:	add	r3, r3, #1
   22da0:	mul	r2, r1, r2
   22da4:	ldr	r1, [fp, #12]
   22da8:	str	r2, [sp, #24]
   22dac:	cmp	r3, r1
   22db0:	bne	22c88 <ReadCompressedDataSlabN+0x1210>
   22db4:	b	243c0 <ReadCompressedDataSlabN+0x2948>
   22db8:	ldr	r0, [r5]
   22dbc:	sub	r0, r0, #1
   22dc0:	str	r0, [fp, #-72]	; 0xffffffb8
   22dc4:	ldr	r0, [fp, #28]
   22dc8:	ldr	r8, [r2]
   22dcc:	str	r8, [sp, #104]	; 0x68
   22dd0:	ldr	r0, [r0]
   22dd4:	str	r0, [sp, #28]
   22dd8:	ldr	r0, [fp, #12]
   22ddc:	cmp	r0, #2
   22de0:	blt	2461c <ReadCompressedDataSlabN+0x2ba4>
   22de4:	sub	r9, fp, #72	; 0x48
   22de8:	sub	r4, r2, #4
   22dec:	sub	sl, r2, #12
   22df0:	mov	r3, #1
   22df4:	mov	r0, #0
   22df8:	mvn	r7, #15
   22dfc:	mov	r6, r8
   22e00:	mov	lr, #0
   22e04:	mov	r5, r9
   22e08:	ldr	r1, [fp, #24]
   22e0c:	ldr	r2, [fp, #16]
   22e10:	add	r0, r0, #1
   22e14:	cmp	r0, #4
   22e18:	ldr	r1, [r1, r3, lsl #2]
   22e1c:	str	r6, [ip, r3, lsl #2]
   22e20:	sub	r1, r1, #1
   22e24:	str	r1, [r5, r3, lsl #2]
   22e28:	ldr	r5, [r2, r3, lsl #2]
   22e2c:	bcs	22e3c <ReadCompressedDataSlabN+0x13c4>
   22e30:	mov	r9, r5
   22e34:	mov	r2, r3
   22e38:	b	22ed8 <ReadCompressedDataSlabN+0x1460>
   22e3c:	vmov.i32	q9, #1	; 0x00000001
   22e40:	vmov.i32	q10, #1	; 0x00000001
   22e44:	vmov.i32	q8, #1	; 0x00000001
   22e48:	bic	ip, r3, #3
   22e4c:	vmov.32	d23[1], r5
   22e50:	vmov.32	d18[0], r6
   22e54:	vmov.32	d20[0], r1
   22e58:	bic	r1, r0, #3
   22e5c:	vorr	d16, d18, d18
   22e60:	vmov.i32	q9, #1	; 0x00000001
   22e64:	str	r1, [sp, #40]	; 0x28
   22e68:	sub	r2, r3, r1
   22e6c:	mov	r1, sl
   22e70:	vorr	d18, d20, d20
   22e74:	vld1.32	{d20-d21}, [r1], r7
   22e78:	subs	ip, ip, #4
   22e7c:	vrev64.32	q12, q10
   22e80:	vext.8	q12, q12, q12, #8
   22e84:	vext.8	q11, q11, q12, #12
   22e88:	vmul.i32	q9, q9, q12
   22e8c:	vmul.i32	q8, q11, q8
   22e90:	vorr	q11, q12, q12
   22e94:	bne	22e74 <ReadCompressedDataSlabN+0x13fc>
   22e98:	mov	r9, r5
   22e9c:	ldr	r5, [sp, #40]	; 0x28
   22ea0:	vext.8	q11, q9, q8, #8
   22ea4:	vext.8	q12, q8, q8, #8
   22ea8:	vmul.i32	q0, q9, q11
   22eac:	vmul.i32	q1, q8, q12
   22eb0:	vmul.i32	q8, q0, d0[1]
   22eb4:	vmul.i32	q9, q1, d2[1]
   22eb8:	vmov.32	r1, d16[0]
   22ebc:	vmov.32	r6, d18[0]
   22ec0:	cmp	r0, r5
   22ec4:	bne	22ed0 <ReadCompressedDataSlabN+0x1458>
   22ec8:	add	ip, sp, #104	; 0x68
   22ecc:	b	22eec <ReadCompressedDataSlabN+0x1474>
   22ed0:	vmov.32	r5, d20[0]
   22ed4:	add	ip, sp, #104	; 0x68
   22ed8:	mul	r6, r5, r6
   22edc:	ldr	r5, [r4, r2, lsl #2]
   22ee0:	subs	r2, r2, #1
   22ee4:	mul	r1, r1, r5
   22ee8:	bne	22ed8 <ReadCompressedDataSlabN+0x1460>
   22eec:	sub	r5, fp, #72	; 0x48
   22ef0:	str	r6, [ip, r3, lsl #2]
   22ef4:	ldr	r2, [sp, #28]
   22ef8:	add	sl, sl, #4
   22efc:	str	r1, [r5, r3, lsl #2]
   22f00:	ldr	r1, [fp, #20]
   22f04:	ldr	r1, [r1, r3, lsl #2]
   22f08:	mla	lr, r1, r8, lr
   22f0c:	ldr	r1, [fp, #28]
   22f10:	mov	r8, r6
   22f14:	mov	r6, r9
   22f18:	ldr	r1, [r1, r3, lsl #2]
   22f1c:	add	r3, r3, #1
   22f20:	mul	r2, r1, r2
   22f24:	ldr	r1, [fp, #12]
   22f28:	str	r2, [sp, #28]
   22f2c:	cmp	r3, r1
   22f30:	bne	22e08 <ReadCompressedDataSlabN+0x1390>
   22f34:	b	24620 <ReadCompressedDataSlabN+0x2ba8>
   22f38:	mov	r8, #0
   22f3c:	ldr	r0, [sp, #44]	; 0x2c
   22f40:	ldr	r2, [fp, #8]
   22f44:	add	r1, sp, #48	; 0x30
   22f48:	mov	r3, r8
   22f4c:	bl	2728 <InflateSkipData>
   22f50:	ldr	sl, [fp, #24]
   22f54:	str	r7, [sp, #16]
   22f58:	ldr	r0, [sl]
   22f5c:	cmp	r0, #1
   22f60:	bne	2487c <ReadCompressedDataSlabN+0x2e04>
   22f64:	cmp	r7, #1
   22f68:	sub	r1, fp, #72	; 0x48
   22f6c:	blt	26074 <ReadCompressedDataSlabN+0x45fc>
   22f70:	ldr	r0, [fp, #20]
   22f74:	mov	r6, r8
   22f78:	add	r8, r0, #4
   22f7c:	ldr	r0, [fp, #28]
   22f80:	add	r0, r0, #4
   22f84:	str	r0, [sp, #40]	; 0x28
   22f88:	sub	r0, fp, #112	; 0x70
   22f8c:	orr	r7, r0, #4
   22f90:	orr	r0, r1, #4
   22f94:	add	r1, sp, #48	; 0x30
   22f98:	str	r0, [sp, #28]
   22f9c:	mov	r0, #0
   22fa0:	str	r0, [sp, #32]
   22fa4:	ldr	sl, [fp, #20]
   22fa8:	ldr	r3, [sl]
   22fac:	cmp	r3, #0
   22fb0:	beq	22fd8 <ReadCompressedDataSlabN+0x1560>
   22fb4:	ldr	r9, [sp, #44]	; 0x2c
   22fb8:	ldr	r4, [fp, #8]
   22fbc:	mov	r5, r1
   22fc0:	mov	r0, r9
   22fc4:	mov	r2, r4
   22fc8:	bl	2728 <InflateSkipData>
   22fcc:	ldr	r0, [sl]
   22fd0:	add	r6, r0, r6
   22fd4:	b	22fe4 <ReadCompressedDataSlabN+0x156c>
   22fd8:	ldr	r9, [sp, #44]	; 0x2c
   22fdc:	ldr	r4, [fp, #8]
   22fe0:	mov	r5, r1
   22fe4:	ldr	r0, [fp, #28]
   22fe8:	ldr	r1, [sp, #32]
   22fec:	mov	r3, r4
   22ff0:	ldr	r0, [r0]
   22ff4:	str	r0, [sp]
   22ff8:	ldr	r0, [sp, #36]	; 0x24
   22ffc:	add	r2, r0, r1, lsl #3
   23000:	mov	r0, r9
   23004:	mov	r1, r5
   23008:	bl	5584 <ReadCompressedDoubleData>
   2300c:	ldr	r1, [fp, #16]
   23010:	ldr	r0, [sl]
   23014:	mov	r2, r4
   23018:	ldr	r1, [r1]
   2301c:	sub	r0, r1, r0
   23020:	ldr	r1, [fp, #28]
   23024:	ldr	r1, [r1]
   23028:	sub	r3, r0, r1
   2302c:	mov	r0, r9
   23030:	mov	r1, r5
   23034:	bl	2728 <InflateSkipData>
   23038:	ldr	r0, [fp, #16]
   2303c:	ldr	r1, [sl]
   23040:	ldr	r0, [r0]
   23044:	add	r0, r0, r6
   23048:	sub	r6, r0, r1
   2304c:	ldr	r0, [fp, #12]
   23050:	cmp	r0, #2
   23054:	blt	23168 <ReadCompressedDataSlabN+0x16f0>
   23058:	mov	r0, #0
   2305c:	add	r3, sp, #104	; 0x68
   23060:	mov	r4, r0
   23064:	ldr	r0, [r7, r0, lsl #2]
   23068:	ldr	r1, [sp, #40]	; 0x28
   2306c:	add	r0, r0, #1
   23070:	str	r0, [r7, r4, lsl #2]
   23074:	ldr	r1, [r1, r4, lsl #2]
   23078:	sdiv	r2, r0, r1
   2307c:	mls	r0, r2, r1, r0
   23080:	cmp	r0, #0
   23084:	bne	23140 <ReadCompressedDataSlabN+0x16c8>
   23088:	mov	r0, #0
   2308c:	add	r5, r3, r4, lsl #2
   23090:	str	r0, [r7, r4, lsl #2]
   23094:	ldr	r0, [r5, #4]
   23098:	sdiv	r1, r6, r0
   2309c:	mls	r1, r1, r0, r6
   230a0:	cmp	r1, #0
   230a4:	beq	230f4 <ReadCompressedDataSlabN+0x167c>
   230a8:	ldr	r2, [r3, r4, lsl #2]
   230ac:	ldr	r3, [r8, r4, lsl #2]
   230b0:	sub	r0, r0, r1
   230b4:	add	r1, sp, #48	; 0x30
   230b8:	mla	r3, r3, r2, r0
   230bc:	ldr	r2, [fp, #8]
   230c0:	mov	r0, r9
   230c4:	bl	2728 <InflateSkipData>
   230c8:	ldr	r0, [r5, #4]
   230cc:	add	r3, sp, #104	; 0x68
   230d0:	sdiv	r2, r6, r0
   230d4:	add	r1, r0, r6
   230d8:	mul	r0, r2, r0
   230dc:	ldr	r2, [r8, r4, lsl #2]
   230e0:	sub	r0, r0, r6
   230e4:	add	r0, r1, r0
   230e8:	ldr	r1, [r3, r4, lsl #2]
   230ec:	mla	r6, r2, r1, r0
   230f0:	b	23128 <ReadCompressedDataSlabN+0x16b0>
   230f4:	ldr	r0, [r8, r4, lsl #2]
   230f8:	cmp	r0, #0
   230fc:	beq	23128 <ReadCompressedDataSlabN+0x16b0>
   23100:	ldr	r1, [r3, r4, lsl #2]
   23104:	ldr	r2, [fp, #8]
   23108:	mul	r3, r1, r0
   2310c:	mov	r0, r9
   23110:	add	r1, sp, #48	; 0x30
   23114:	bl	2728 <InflateSkipData>
   23118:	add	r3, sp, #104	; 0x68
   2311c:	ldr	r1, [r8, r4, lsl #2]
   23120:	ldr	r0, [r3, r4, lsl #2]
   23124:	mla	r6, r1, r0, r6
   23128:	ldr	r2, [fp, #12]
   2312c:	add	r1, r4, #2
   23130:	add	r0, r4, #1
   23134:	cmp	r1, r2
   23138:	blt	23060 <ReadCompressedDataSlabN+0x15e8>
   2313c:	b	23168 <ReadCompressedDataSlabN+0x16f0>
   23140:	ldr	r0, [sp, #28]
   23144:	ldr	r4, [r0, r4, lsl #2]
   23148:	cmp	r4, #0
   2314c:	beq	23168 <ReadCompressedDataSlabN+0x16f0>
   23150:	ldr	r2, [fp, #8]
   23154:	mov	r0, r9
   23158:	add	r1, sp, #48	; 0x30
   2315c:	mov	r3, r4
   23160:	bl	2728 <InflateSkipData>
   23164:	add	r6, r4, r6
   23168:	ldr	r0, [fp, #28]
   2316c:	ldr	r1, [sp, #32]
   23170:	ldr	r0, [r0]
   23174:	add	r1, r0, r1
   23178:	ldr	r0, [sp, #16]
   2317c:	str	r1, [sp, #32]
   23180:	cmp	r1, r0
   23184:	add	r1, sp, #48	; 0x30
   23188:	blt	22fa4 <ReadCompressedDataSlabN+0x152c>
   2318c:	b	26074 <ReadCompressedDataSlabN+0x45fc>
   23190:	mov	r9, #0
   23194:	ldr	r0, [sp, #44]	; 0x2c
   23198:	ldr	r2, [fp, #8]
   2319c:	add	r1, sp, #48	; 0x30
   231a0:	mov	r3, r9
   231a4:	bl	2728 <InflateSkipData>
   231a8:	ldr	sl, [fp, #24]
   231ac:	ldr	r0, [sl]
   231b0:	cmp	r0, #1
   231b4:	bne	24b7c <ReadCompressedDataSlabN+0x3104>
   231b8:	ldr	r0, [sp, #28]
   231bc:	cmp	r0, #1
   231c0:	blt	26074 <ReadCompressedDataSlabN+0x45fc>
   231c4:	ldr	r0, [fp, #20]
   231c8:	add	r1, sp, #48	; 0x30
   231cc:	add	r6, r0, #4
   231d0:	ldr	r0, [fp, #28]
   231d4:	add	r0, r0, #4
   231d8:	str	r0, [sp, #40]	; 0x28
   231dc:	sub	r0, fp, #112	; 0x70
   231e0:	orr	r8, r0, #4
   231e4:	sub	r0, fp, #72	; 0x48
   231e8:	orr	r0, r0, #4
   231ec:	str	r0, [sp, #24]
   231f0:	mov	r0, #0
   231f4:	str	r0, [sp, #32]
   231f8:	ldr	sl, [fp, #20]
   231fc:	ldr	r3, [sl]
   23200:	cmp	r3, #0
   23204:	beq	2322c <ReadCompressedDataSlabN+0x17b4>
   23208:	ldr	r7, [sp, #44]	; 0x2c
   2320c:	ldr	r4, [fp, #8]
   23210:	mov	r5, r1
   23214:	mov	r0, r7
   23218:	mov	r2, r4
   2321c:	bl	2728 <InflateSkipData>
   23220:	ldr	r0, [sl]
   23224:	add	r9, r0, r9
   23228:	b	23238 <ReadCompressedDataSlabN+0x17c0>
   2322c:	ldr	r7, [sp, #44]	; 0x2c
   23230:	ldr	r4, [fp, #8]
   23234:	mov	r5, r1
   23238:	ldr	r0, [fp, #28]
   2323c:	ldr	r1, [sp, #32]
   23240:	mov	r3, r4
   23244:	ldr	r0, [r0]
   23248:	str	r0, [sp]
   2324c:	ldr	r0, [sp, #36]	; 0x24
   23250:	add	r2, r0, r1, lsl #2
   23254:	mov	r0, r7
   23258:	mov	r1, r5
   2325c:	bl	8ef4 <ReadCompressedSingleData>
   23260:	ldr	r1, [fp, #16]
   23264:	ldr	r0, [sl]
   23268:	mov	r2, r4
   2326c:	ldr	r1, [r1]
   23270:	sub	r0, r1, r0
   23274:	ldr	r1, [fp, #28]
   23278:	ldr	r1, [r1]
   2327c:	sub	r3, r0, r1
   23280:	mov	r0, r7
   23284:	mov	r1, r5
   23288:	bl	2728 <InflateSkipData>
   2328c:	ldr	r0, [fp, #16]
   23290:	ldr	r1, [sl]
   23294:	ldr	r0, [r0]
   23298:	add	r0, r0, r9
   2329c:	sub	r9, r0, r1
   232a0:	ldr	r0, [fp, #12]
   232a4:	cmp	r0, #2
   232a8:	blt	233bc <ReadCompressedDataSlabN+0x1944>
   232ac:	mov	r0, #0
   232b0:	add	r3, sp, #104	; 0x68
   232b4:	mov	r4, r0
   232b8:	ldr	r0, [r8, r0, lsl #2]
   232bc:	ldr	r1, [sp, #40]	; 0x28
   232c0:	add	r0, r0, #1
   232c4:	str	r0, [r8, r4, lsl #2]
   232c8:	ldr	r1, [r1, r4, lsl #2]
   232cc:	sdiv	r2, r0, r1
   232d0:	mls	r0, r2, r1, r0
   232d4:	cmp	r0, #0
   232d8:	bne	23394 <ReadCompressedDataSlabN+0x191c>
   232dc:	mov	r0, #0
   232e0:	add	r5, r3, r4, lsl #2
   232e4:	str	r0, [r8, r4, lsl #2]
   232e8:	ldr	r0, [r5, #4]
   232ec:	sdiv	r1, r9, r0
   232f0:	mls	r1, r1, r0, r9
   232f4:	cmp	r1, #0
   232f8:	beq	23348 <ReadCompressedDataSlabN+0x18d0>
   232fc:	ldr	r2, [r3, r4, lsl #2]
   23300:	ldr	r3, [r6, r4, lsl #2]
   23304:	sub	r0, r0, r1
   23308:	add	r1, sp, #48	; 0x30
   2330c:	mla	r3, r3, r2, r0
   23310:	ldr	r2, [fp, #8]
   23314:	mov	r0, r7
   23318:	bl	2728 <InflateSkipData>
   2331c:	ldr	r0, [r5, #4]
   23320:	add	r3, sp, #104	; 0x68
   23324:	sdiv	r2, r9, r0
   23328:	add	r1, r0, r9
   2332c:	mul	r0, r2, r0
   23330:	ldr	r2, [r6, r4, lsl #2]
   23334:	sub	r0, r0, r9
   23338:	add	r0, r1, r0
   2333c:	ldr	r1, [r3, r4, lsl #2]
   23340:	mla	r9, r2, r1, r0
   23344:	b	2337c <ReadCompressedDataSlabN+0x1904>
   23348:	ldr	r0, [r6, r4, lsl #2]
   2334c:	cmp	r0, #0
   23350:	beq	2337c <ReadCompressedDataSlabN+0x1904>
   23354:	ldr	r1, [r3, r4, lsl #2]
   23358:	ldr	r2, [fp, #8]
   2335c:	mul	r3, r1, r0
   23360:	mov	r0, r7
   23364:	add	r1, sp, #48	; 0x30
   23368:	bl	2728 <InflateSkipData>
   2336c:	add	r3, sp, #104	; 0x68
   23370:	ldr	r1, [r6, r4, lsl #2]
   23374:	ldr	r0, [r3, r4, lsl #2]
   23378:	mla	r9, r1, r0, r9
   2337c:	ldr	r2, [fp, #12]
   23380:	add	r1, r4, #2
   23384:	add	r0, r4, #1
   23388:	cmp	r1, r2
   2338c:	blt	232b4 <ReadCompressedDataSlabN+0x183c>
   23390:	b	233bc <ReadCompressedDataSlabN+0x1944>
   23394:	ldr	r0, [sp, #24]
   23398:	ldr	r4, [r0, r4, lsl #2]
   2339c:	cmp	r4, #0
   233a0:	beq	233bc <ReadCompressedDataSlabN+0x1944>
   233a4:	ldr	r2, [fp, #8]
   233a8:	mov	r0, r7
   233ac:	add	r1, sp, #48	; 0x30
   233b0:	mov	r3, r4
   233b4:	bl	2728 <InflateSkipData>
   233b8:	add	r9, r4, r9
   233bc:	ldr	r0, [fp, #28]
   233c0:	ldr	r1, [sp, #32]
   233c4:	ldr	r0, [r0]
   233c8:	add	r1, r0, r1
   233cc:	ldr	r0, [sp, #28]
   233d0:	str	r1, [sp, #32]
   233d4:	cmp	r1, r0
   233d8:	add	r1, sp, #48	; 0x30
   233dc:	blt	231f8 <ReadCompressedDataSlabN+0x1780>
   233e0:	b	26074 <ReadCompressedDataSlabN+0x45fc>
   233e4:	ldr	r0, [sp, #24]
   233e8:	sub	r1, fp, #72	; 0x48
   233ec:	str	r7, [sp, #40]	; 0x28
   233f0:	cmp	r0, #1
   233f4:	blt	26074 <ReadCompressedDataSlabN+0x45fc>
   233f8:	ldr	r0, [fp, #20]
   233fc:	mov	sl, #1
   23400:	add	r7, sp, #48	; 0x30
   23404:	add	r6, r0, #4
   23408:	ldr	r0, [fp, #28]
   2340c:	str	r6, [sp, #16]
   23410:	add	r0, r0, #4
   23414:	str	r0, [sp, #28]
   23418:	sub	r0, fp, #112	; 0x70
   2341c:	orr	r4, r0, #4
   23420:	orr	r0, r1, #4
   23424:	mov	r1, #0
   23428:	str	r0, [sp, #4]
   2342c:	ldr	r0, [sp, #36]	; 0x24
   23430:	str	r4, [sp, #12]
   23434:	add	r0, r0, #1
   23438:	str	r0, [sp, #8]
   2343c:	ldr	r5, [fp, #20]
   23440:	str	r1, [sp, #20]
   23444:	ldr	r3, [r5]
   23448:	cmp	r3, #0
   2344c:	beq	2348c <ReadCompressedDataSlabN+0x1a14>
   23450:	mov	r9, r5
   23454:	ldr	r5, [sp, #44]	; 0x2c
   23458:	ldr	r6, [fp, #8]
   2345c:	mov	r1, r7
   23460:	mov	r0, r5
   23464:	mov	r2, r6
   23468:	bl	2728 <InflateSkipData>
   2346c:	ldr	r0, [r9]
   23470:	ldr	r1, [sp, #40]	; 0x28
   23474:	add	r7, sp, #48	; 0x30
   23478:	add	r1, r0, r1
   2347c:	ldr	r0, [sp, #36]	; 0x24
   23480:	str	r1, [sp, #40]	; 0x28
   23484:	ldr	r1, [fp, #28]
   23488:	b	2349c <ReadCompressedDataSlabN+0x1a24>
   2348c:	ldr	r0, [sp, #36]	; 0x24
   23490:	ldr	r5, [sp, #44]	; 0x2c
   23494:	ldr	r1, [fp, #28]
   23498:	ldr	r6, [fp, #8]
   2349c:	ldr	r4, [sp, #20]
   234a0:	ldr	r8, [r1]
   234a4:	mov	r1, r7
   234a8:	mov	r3, r6
   234ac:	str	sl, [sp]
   234b0:	add	r2, r0, r4
   234b4:	mov	r0, r5
   234b8:	bl	1acbc <ReadCompressedInt8Data>
   234bc:	cmp	r8, #2
   234c0:	blt	23548 <ReadCompressedDataSlabN+0x1ad0>
   234c4:	ldr	r0, [sp, #8]
   234c8:	ldr	sl, [sp, #40]	; 0x28
   234cc:	mov	r6, #0
   234d0:	add	r0, r0, r4
   234d4:	str	r0, [sp, #32]
   234d8:	ldr	r0, [fp, #24]
   234dc:	ldr	r9, [fp, #8]
   234e0:	ldr	r7, [sp, #44]	; 0x2c
   234e4:	add	r8, sp, #48	; 0x30
   234e8:	mov	r1, r8
   234ec:	mov	r5, r0
   234f0:	ldr	r0, [r0]
   234f4:	mov	r2, r9
   234f8:	sub	r3, r0, #1
   234fc:	mov	r0, r7
   23500:	bl	2728 <InflateSkipData>
   23504:	ldr	r0, [fp, #28]
   23508:	ldr	r5, [r5]
   2350c:	mov	r1, r8
   23510:	mov	r3, r9
   23514:	ldr	r4, [r0]
   23518:	mov	r0, #1
   2351c:	str	r0, [sp]
   23520:	ldr	r0, [sp, #32]
   23524:	add	r2, r0, r6
   23528:	mov	r0, r7
   2352c:	bl	1acbc <ReadCompressedInt8Data>
   23530:	add	r6, r6, #1
   23534:	sub	r0, r4, #1
   23538:	add	sl, r5, sl
   2353c:	cmp	r6, r0
   23540:	blt	234d8 <ReadCompressedDataSlabN+0x1a60>
   23544:	b	2354c <ReadCompressedDataSlabN+0x1ad4>
   23548:	ldr	sl, [sp, #40]	; 0x28
   2354c:	ldr	r2, [fp, #28]
   23550:	ldr	r0, [fp, #16]
   23554:	ldr	r1, [fp, #24]
   23558:	ldr	r9, [fp, #8]
   2355c:	ldr	r2, [r2]
   23560:	ldr	r0, [r0]
   23564:	ldr	r1, [r1]
   23568:	sub	r2, r2, #1
   2356c:	mls	r0, r2, r1, r0
   23570:	ldr	r1, [fp, #20]
   23574:	mov	r2, r9
   23578:	ldr	r1, [r1]
   2357c:	sub	r4, r0, r1
   23580:	ldr	r0, [sp, #44]	; 0x2c
   23584:	add	r1, sp, #48	; 0x30
   23588:	sub	r3, r4, #1
   2358c:	bl	2728 <InflateSkipData>
   23590:	ldr	r0, [fp, #12]
   23594:	add	sl, r4, sl
   23598:	str	sl, [sp, #40]	; 0x28
   2359c:	cmp	r0, #2
   235a0:	blt	236b0 <ReadCompressedDataSlabN+0x1c38>
   235a4:	ldr	r6, [sp, #16]
   235a8:	ldr	r4, [sp, #12]
   235ac:	mov	r0, #0
   235b0:	add	r3, sp, #104	; 0x68
   235b4:	add	r7, sp, #48	; 0x30
   235b8:	mov	sl, r0
   235bc:	ldr	r0, [r4, r0, lsl #2]
   235c0:	ldr	r1, [sp, #28]
   235c4:	add	r0, r0, #1
   235c8:	str	r0, [r4, sl, lsl #2]
   235cc:	ldr	r1, [r1, sl, lsl #2]
   235d0:	sdiv	r2, r0, r1
   235d4:	mls	r0, r2, r1, r0
   235d8:	cmp	r0, #0
   235dc:	bne	236b8 <ReadCompressedDataSlabN+0x1c40>
   235e0:	mov	r0, #0
   235e4:	add	r5, r3, sl, lsl #2
   235e8:	ldr	r8, [sp, #40]	; 0x28
   235ec:	str	r0, [r4, sl, lsl #2]
   235f0:	ldr	r0, [r5, #4]
   235f4:	sdiv	r1, r8, r0
   235f8:	mls	r1, r1, r0, r8
   235fc:	cmp	r1, #0
   23600:	beq	23658 <ReadCompressedDataSlabN+0x1be0>
   23604:	ldr	r2, [r3, sl, lsl #2]
   23608:	ldr	r3, [r6, sl, lsl #2]
   2360c:	sub	r0, r0, r1
   23610:	mov	r1, r7
   23614:	mla	r3, r3, r2, r0
   23618:	ldr	r0, [sp, #44]	; 0x2c
   2361c:	mov	r2, r9
   23620:	bl	2728 <InflateSkipData>
   23624:	ldr	r0, [r5, #4]
   23628:	add	r3, sp, #104	; 0x68
   2362c:	add	r7, sp, #48	; 0x30
   23630:	sdiv	r2, r8, r0
   23634:	add	r1, r0, r8
   23638:	mul	r0, r2, r0
   2363c:	ldr	r2, [r6, sl, lsl #2]
   23640:	sub	r0, r0, r8
   23644:	add	r0, r1, r0
   23648:	ldr	r1, [r3, sl, lsl #2]
   2364c:	mla	r0, r2, r1, r0
   23650:	str	r0, [sp, #40]	; 0x28
   23654:	b	23698 <ReadCompressedDataSlabN+0x1c20>
   23658:	ldr	r0, [r6, sl, lsl #2]
   2365c:	cmp	r0, #0
   23660:	beq	23698 <ReadCompressedDataSlabN+0x1c20>
   23664:	ldr	r1, [r3, sl, lsl #2]
   23668:	mov	r2, r9
   2366c:	mul	r3, r1, r0
   23670:	ldr	r0, [sp, #44]	; 0x2c
   23674:	mov	r1, r7
   23678:	bl	2728 <InflateSkipData>
   2367c:	add	r3, sp, #104	; 0x68
   23680:	ldr	r1, [r6, sl, lsl #2]
   23684:	ldr	r2, [sp, #40]	; 0x28
   23688:	add	r7, sp, #48	; 0x30
   2368c:	ldr	r0, [r3, sl, lsl #2]
   23690:	mla	r2, r1, r0, r2
   23694:	str	r2, [sp, #40]	; 0x28
   23698:	ldr	r2, [fp, #12]
   2369c:	add	r1, sl, #2
   236a0:	add	r0, sl, #1
   236a4:	cmp	r1, r2
   236a8:	blt	235b8 <ReadCompressedDataSlabN+0x1b40>
   236ac:	b	236ec <ReadCompressedDataSlabN+0x1c74>
   236b0:	add	r7, sp, #48	; 0x30
   236b4:	b	236ec <ReadCompressedDataSlabN+0x1c74>
   236b8:	ldr	r0, [sp, #4]
   236bc:	ldr	r5, [r0, sl, lsl #2]
   236c0:	cmp	r5, #0
   236c4:	beq	236ec <ReadCompressedDataSlabN+0x1c74>
   236c8:	ldr	r0, [sp, #44]	; 0x2c
   236cc:	mov	r1, r7
   236d0:	mov	r2, r9
   236d4:	mov	r3, r5
   236d8:	bl	2728 <InflateSkipData>
   236dc:	ldr	r0, [sp, #40]	; 0x28
   236e0:	add	r7, sp, #48	; 0x30
   236e4:	add	r0, r5, r0
   236e8:	str	r0, [sp, #40]	; 0x28
   236ec:	ldr	r0, [fp, #28]
   236f0:	ldr	r1, [sp, #20]
   236f4:	mov	sl, #1
   236f8:	ldr	r0, [r0]
   236fc:	add	r1, r0, r1
   23700:	ldr	r0, [sp, #24]
   23704:	cmp	r1, r0
   23708:	blt	2343c <ReadCompressedDataSlabN+0x19c4>
   2370c:	b	26074 <ReadCompressedDataSlabN+0x45fc>
   23710:	ldr	r0, [sp, #24]
   23714:	sub	r1, fp, #72	; 0x48
   23718:	str	r7, [sp, #40]	; 0x28
   2371c:	cmp	r0, #1
   23720:	blt	26074 <ReadCompressedDataSlabN+0x45fc>
   23724:	ldr	r0, [fp, #20]
   23728:	mov	sl, #1
   2372c:	add	r7, sp, #48	; 0x30
   23730:	add	r6, r0, #4
   23734:	ldr	r0, [fp, #28]
   23738:	str	r6, [sp, #16]
   2373c:	add	r0, r0, #4
   23740:	str	r0, [sp, #28]
   23744:	sub	r0, fp, #112	; 0x70
   23748:	orr	r4, r0, #4
   2374c:	orr	r0, r1, #4
   23750:	mov	r1, #0
   23754:	str	r0, [sp, #4]
   23758:	ldr	r0, [sp, #36]	; 0x24
   2375c:	str	r4, [sp, #12]
   23760:	add	r0, r0, #1
   23764:	str	r0, [sp, #8]
   23768:	ldr	r5, [fp, #20]
   2376c:	str	r1, [sp, #20]
   23770:	ldr	r3, [r5]
   23774:	cmp	r3, #0
   23778:	beq	237b8 <ReadCompressedDataSlabN+0x1d40>
   2377c:	mov	r9, r5
   23780:	ldr	r5, [sp, #44]	; 0x2c
   23784:	ldr	r6, [fp, #8]
   23788:	mov	r1, r7
   2378c:	mov	r0, r5
   23790:	mov	r2, r6
   23794:	bl	2728 <InflateSkipData>
   23798:	ldr	r0, [r9]
   2379c:	ldr	r1, [sp, #40]	; 0x28
   237a0:	add	r7, sp, #48	; 0x30
   237a4:	add	r1, r0, r1
   237a8:	ldr	r0, [sp, #36]	; 0x24
   237ac:	str	r1, [sp, #40]	; 0x28
   237b0:	ldr	r1, [fp, #28]
   237b4:	b	237c8 <ReadCompressedDataSlabN+0x1d50>
   237b8:	ldr	r0, [sp, #36]	; 0x24
   237bc:	ldr	r5, [sp, #44]	; 0x2c
   237c0:	ldr	r1, [fp, #28]
   237c4:	ldr	r6, [fp, #8]
   237c8:	ldr	r4, [sp, #20]
   237cc:	ldr	r8, [r1]
   237d0:	mov	r1, r7
   237d4:	mov	r3, r6
   237d8:	str	sl, [sp]
   237dc:	add	r2, r0, r4
   237e0:	mov	r0, r5
   237e4:	bl	1d2f0 <ReadCompressedUInt8Data>
   237e8:	cmp	r8, #2
   237ec:	blt	23874 <ReadCompressedDataSlabN+0x1dfc>
   237f0:	ldr	r0, [sp, #8]
   237f4:	ldr	sl, [sp, #40]	; 0x28
   237f8:	mov	r6, #0
   237fc:	add	r0, r0, r4
   23800:	str	r0, [sp, #32]
   23804:	ldr	r0, [fp, #24]
   23808:	ldr	r9, [fp, #8]
   2380c:	ldr	r7, [sp, #44]	; 0x2c
   23810:	add	r8, sp, #48	; 0x30
   23814:	mov	r1, r8
   23818:	mov	r5, r0
   2381c:	ldr	r0, [r0]
   23820:	mov	r2, r9
   23824:	sub	r3, r0, #1
   23828:	mov	r0, r7
   2382c:	bl	2728 <InflateSkipData>
   23830:	ldr	r0, [fp, #28]
   23834:	ldr	r5, [r5]
   23838:	mov	r1, r8
   2383c:	mov	r3, r9
   23840:	ldr	r4, [r0]
   23844:	mov	r0, #1
   23848:	str	r0, [sp]
   2384c:	ldr	r0, [sp, #32]
   23850:	add	r2, r0, r6
   23854:	mov	r0, r7
   23858:	bl	1d2f0 <ReadCompressedUInt8Data>
   2385c:	add	r6, r6, #1
   23860:	sub	r0, r4, #1
   23864:	add	sl, r5, sl
   23868:	cmp	r6, r0
   2386c:	blt	23804 <ReadCompressedDataSlabN+0x1d8c>
   23870:	b	23878 <ReadCompressedDataSlabN+0x1e00>
   23874:	ldr	sl, [sp, #40]	; 0x28
   23878:	ldr	r2, [fp, #28]
   2387c:	ldr	r0, [fp, #16]
   23880:	ldr	r1, [fp, #24]
   23884:	ldr	r9, [fp, #8]
   23888:	ldr	r2, [r2]
   2388c:	ldr	r0, [r0]
   23890:	ldr	r1, [r1]
   23894:	sub	r2, r2, #1
   23898:	mls	r0, r2, r1, r0
   2389c:	ldr	r1, [fp, #20]
   238a0:	mov	r2, r9
   238a4:	ldr	r1, [r1]
   238a8:	sub	r4, r0, r1
   238ac:	ldr	r0, [sp, #44]	; 0x2c
   238b0:	add	r1, sp, #48	; 0x30
   238b4:	sub	r3, r4, #1
   238b8:	bl	2728 <InflateSkipData>
   238bc:	ldr	r0, [fp, #12]
   238c0:	add	sl, r4, sl
   238c4:	str	sl, [sp, #40]	; 0x28
   238c8:	cmp	r0, #2
   238cc:	blt	239dc <ReadCompressedDataSlabN+0x1f64>
   238d0:	ldr	r6, [sp, #16]
   238d4:	ldr	r4, [sp, #12]
   238d8:	mov	r0, #0
   238dc:	add	r3, sp, #104	; 0x68
   238e0:	add	r7, sp, #48	; 0x30
   238e4:	mov	sl, r0
   238e8:	ldr	r0, [r4, r0, lsl #2]
   238ec:	ldr	r1, [sp, #28]
   238f0:	add	r0, r0, #1
   238f4:	str	r0, [r4, sl, lsl #2]
   238f8:	ldr	r1, [r1, sl, lsl #2]
   238fc:	sdiv	r2, r0, r1
   23900:	mls	r0, r2, r1, r0
   23904:	cmp	r0, #0
   23908:	bne	239e4 <ReadCompressedDataSlabN+0x1f6c>
   2390c:	mov	r0, #0
   23910:	add	r5, r3, sl, lsl #2
   23914:	ldr	r8, [sp, #40]	; 0x28
   23918:	str	r0, [r4, sl, lsl #2]
   2391c:	ldr	r0, [r5, #4]
   23920:	sdiv	r1, r8, r0
   23924:	mls	r1, r1, r0, r8
   23928:	cmp	r1, #0
   2392c:	beq	23984 <ReadCompressedDataSlabN+0x1f0c>
   23930:	ldr	r2, [r3, sl, lsl #2]
   23934:	ldr	r3, [r6, sl, lsl #2]
   23938:	sub	r0, r0, r1
   2393c:	mov	r1, r7
   23940:	mla	r3, r3, r2, r0
   23944:	ldr	r0, [sp, #44]	; 0x2c
   23948:	mov	r2, r9
   2394c:	bl	2728 <InflateSkipData>
   23950:	ldr	r0, [r5, #4]
   23954:	add	r3, sp, #104	; 0x68
   23958:	add	r7, sp, #48	; 0x30
   2395c:	sdiv	r2, r8, r0
   23960:	add	r1, r0, r8
   23964:	mul	r0, r2, r0
   23968:	ldr	r2, [r6, sl, lsl #2]
   2396c:	sub	r0, r0, r8
   23970:	add	r0, r1, r0
   23974:	ldr	r1, [r3, sl, lsl #2]
   23978:	mla	r0, r2, r1, r0
   2397c:	str	r0, [sp, #40]	; 0x28
   23980:	b	239c4 <ReadCompressedDataSlabN+0x1f4c>
   23984:	ldr	r0, [r6, sl, lsl #2]
   23988:	cmp	r0, #0
   2398c:	beq	239c4 <ReadCompressedDataSlabN+0x1f4c>
   23990:	ldr	r1, [r3, sl, lsl #2]
   23994:	mov	r2, r9
   23998:	mul	r3, r1, r0
   2399c:	ldr	r0, [sp, #44]	; 0x2c
   239a0:	mov	r1, r7
   239a4:	bl	2728 <InflateSkipData>
   239a8:	add	r3, sp, #104	; 0x68
   239ac:	ldr	r1, [r6, sl, lsl #2]
   239b0:	ldr	r2, [sp, #40]	; 0x28
   239b4:	add	r7, sp, #48	; 0x30
   239b8:	ldr	r0, [r3, sl, lsl #2]
   239bc:	mla	r2, r1, r0, r2
   239c0:	str	r2, [sp, #40]	; 0x28
   239c4:	ldr	r2, [fp, #12]
   239c8:	add	r1, sl, #2
   239cc:	add	r0, sl, #1
   239d0:	cmp	r1, r2
   239d4:	blt	238e4 <ReadCompressedDataSlabN+0x1e6c>
   239d8:	b	23a18 <ReadCompressedDataSlabN+0x1fa0>
   239dc:	add	r7, sp, #48	; 0x30
   239e0:	b	23a18 <ReadCompressedDataSlabN+0x1fa0>
   239e4:	ldr	r0, [sp, #4]
   239e8:	ldr	r5, [r0, sl, lsl #2]
   239ec:	cmp	r5, #0
   239f0:	beq	23a18 <ReadCompressedDataSlabN+0x1fa0>
   239f4:	ldr	r0, [sp, #44]	; 0x2c
   239f8:	mov	r1, r7
   239fc:	mov	r2, r9
   23a00:	mov	r3, r5
   23a04:	bl	2728 <InflateSkipData>
   23a08:	ldr	r0, [sp, #40]	; 0x28
   23a0c:	add	r7, sp, #48	; 0x30
   23a10:	add	r0, r5, r0
   23a14:	str	r0, [sp, #40]	; 0x28
   23a18:	ldr	r0, [fp, #28]
   23a1c:	ldr	r1, [sp, #20]
   23a20:	mov	sl, #1
   23a24:	ldr	r0, [r0]
   23a28:	add	r1, r0, r1
   23a2c:	ldr	r0, [sp, #24]
   23a30:	cmp	r1, r0
   23a34:	blt	23768 <ReadCompressedDataSlabN+0x1cf0>
   23a38:	b	26074 <ReadCompressedDataSlabN+0x45fc>
   23a3c:	mov	lr, #0
   23a40:	ldr	r0, [sp, #44]	; 0x2c
   23a44:	ldr	r2, [fp, #8]
   23a48:	add	r1, sp, #48	; 0x30
   23a4c:	mov	r3, lr
   23a50:	mov	r9, lr
   23a54:	bl	2728 <InflateSkipData>
   23a58:	ldr	sl, [fp, #24]
   23a5c:	ldr	r0, [sl]
   23a60:	cmp	r0, #1
   23a64:	bne	24e78 <ReadCompressedDataSlabN+0x3400>
   23a68:	ldr	r0, [sp, #28]
   23a6c:	cmp	r0, #1
   23a70:	blt	26074 <ReadCompressedDataSlabN+0x45fc>
   23a74:	ldr	r0, [fp, #20]
   23a78:	add	r1, sp, #48	; 0x30
   23a7c:	add	r6, r0, #4
   23a80:	ldr	r0, [fp, #28]
   23a84:	add	r0, r0, #4
   23a88:	str	r0, [sp, #40]	; 0x28
   23a8c:	sub	r0, fp, #112	; 0x70
   23a90:	orr	r8, r0, #4
   23a94:	sub	r0, fp, #72	; 0x48
   23a98:	orr	r0, r0, #4
   23a9c:	str	r0, [sp, #20]
   23aa0:	mov	r0, #0
   23aa4:	str	r0, [sp, #32]
   23aa8:	ldr	sl, [fp, #20]
   23aac:	ldr	r3, [sl]
   23ab0:	cmp	r3, #0
   23ab4:	beq	23ae0 <ReadCompressedDataSlabN+0x2068>
   23ab8:	ldr	r7, [sp, #44]	; 0x2c
   23abc:	ldr	r4, [fp, #8]
   23ac0:	mov	r5, r1
   23ac4:	mov	r0, r7
   23ac8:	mov	r2, r4
   23acc:	bl	2728 <InflateSkipData>
   23ad0:	ldr	r0, [sl]
   23ad4:	add	r9, r0, r9
   23ad8:	str	r9, [sp, #24]
   23adc:	b	23af0 <ReadCompressedDataSlabN+0x2078>
   23ae0:	ldr	r7, [sp, #44]	; 0x2c
   23ae4:	ldr	r4, [fp, #8]
   23ae8:	str	r9, [sp, #24]
   23aec:	mov	r5, r1
   23af0:	ldr	r0, [fp, #28]
   23af4:	ldr	r1, [sp, #32]
   23af8:	mov	r3, r4
   23afc:	ldr	r0, [r0]
   23b00:	str	r0, [sp]
   23b04:	ldr	r0, [sp, #36]	; 0x24
   23b08:	add	r2, r0, r1, lsl #1
   23b0c:	mov	r0, r7
   23b10:	mov	r1, r5
   23b14:	bl	15ebc <ReadCompressedInt16Data>
   23b18:	ldr	r9, [fp, #16]
   23b1c:	ldr	r0, [sl]
   23b20:	mov	r2, r4
   23b24:	ldr	r1, [r9]
   23b28:	sub	r0, r1, r0
   23b2c:	ldr	r1, [fp, #28]
   23b30:	ldr	r1, [r1]
   23b34:	sub	r3, r0, r1
   23b38:	mov	r0, r7
   23b3c:	mov	r1, r5
   23b40:	bl	2728 <InflateSkipData>
   23b44:	ldr	r0, [r9]
   23b48:	ldr	r1, [sp, #24]
   23b4c:	add	r0, r0, r1
   23b50:	ldr	r1, [sl]
   23b54:	sub	r9, r0, r1
   23b58:	ldr	r0, [fp, #12]
   23b5c:	cmp	r0, #2
   23b60:	blt	23c74 <ReadCompressedDataSlabN+0x21fc>
   23b64:	mov	r0, #0
   23b68:	add	r3, sp, #104	; 0x68
   23b6c:	mov	r4, r0
   23b70:	ldr	r0, [r8, r0, lsl #2]
   23b74:	ldr	r1, [sp, #40]	; 0x28
   23b78:	add	r0, r0, #1
   23b7c:	str	r0, [r8, r4, lsl #2]
   23b80:	ldr	r1, [r1, r4, lsl #2]
   23b84:	sdiv	r2, r0, r1
   23b88:	mls	r0, r2, r1, r0
   23b8c:	cmp	r0, #0
   23b90:	bne	23c4c <ReadCompressedDataSlabN+0x21d4>
   23b94:	mov	r0, #0
   23b98:	add	r5, r3, r4, lsl #2
   23b9c:	str	r0, [r8, r4, lsl #2]
   23ba0:	ldr	r0, [r5, #4]
   23ba4:	sdiv	r1, r9, r0
   23ba8:	mls	r1, r1, r0, r9
   23bac:	cmp	r1, #0
   23bb0:	beq	23c00 <ReadCompressedDataSlabN+0x2188>
   23bb4:	ldr	r2, [r3, r4, lsl #2]
   23bb8:	ldr	r3, [r6, r4, lsl #2]
   23bbc:	sub	r0, r0, r1
   23bc0:	add	r1, sp, #48	; 0x30
   23bc4:	mla	r3, r3, r2, r0
   23bc8:	ldr	r2, [fp, #8]
   23bcc:	mov	r0, r7
   23bd0:	bl	2728 <InflateSkipData>
   23bd4:	ldr	r0, [r5, #4]
   23bd8:	add	r3, sp, #104	; 0x68
   23bdc:	sdiv	r2, r9, r0
   23be0:	add	r1, r0, r9
   23be4:	mul	r0, r2, r0
   23be8:	ldr	r2, [r6, r4, lsl #2]
   23bec:	sub	r0, r0, r9
   23bf0:	add	r0, r1, r0
   23bf4:	ldr	r1, [r3, r4, lsl #2]
   23bf8:	mla	r9, r2, r1, r0
   23bfc:	b	23c34 <ReadCompressedDataSlabN+0x21bc>
   23c00:	ldr	r0, [r6, r4, lsl #2]
   23c04:	cmp	r0, #0
   23c08:	beq	23c34 <ReadCompressedDataSlabN+0x21bc>
   23c0c:	ldr	r1, [r3, r4, lsl #2]
   23c10:	ldr	r2, [fp, #8]
   23c14:	mul	r3, r1, r0
   23c18:	mov	r0, r7
   23c1c:	add	r1, sp, #48	; 0x30
   23c20:	bl	2728 <InflateSkipData>
   23c24:	add	r3, sp, #104	; 0x68
   23c28:	ldr	r1, [r6, r4, lsl #2]
   23c2c:	ldr	r0, [r3, r4, lsl #2]
   23c30:	mla	r9, r1, r0, r9
   23c34:	ldr	r2, [fp, #12]
   23c38:	add	r1, r4, #2
   23c3c:	add	r0, r4, #1
   23c40:	cmp	r1, r2
   23c44:	blt	23b6c <ReadCompressedDataSlabN+0x20f4>
   23c48:	b	23c74 <ReadCompressedDataSlabN+0x21fc>
   23c4c:	ldr	r0, [sp, #20]
   23c50:	ldr	r4, [r0, r4, lsl #2]
   23c54:	cmp	r4, #0
   23c58:	beq	23c74 <ReadCompressedDataSlabN+0x21fc>
   23c5c:	ldr	r2, [fp, #8]
   23c60:	mov	r0, r7
   23c64:	add	r1, sp, #48	; 0x30
   23c68:	mov	r3, r4
   23c6c:	bl	2728 <InflateSkipData>
   23c70:	add	r9, r4, r9
   23c74:	ldr	r0, [fp, #28]
   23c78:	ldr	r1, [sp, #32]
   23c7c:	ldr	r0, [r0]
   23c80:	add	r1, r0, r1
   23c84:	ldr	r0, [sp, #28]
   23c88:	str	r1, [sp, #32]
   23c8c:	cmp	r1, r0
   23c90:	add	r1, sp, #48	; 0x30
   23c94:	blt	23aa8 <ReadCompressedDataSlabN+0x2030>
   23c98:	b	26074 <ReadCompressedDataSlabN+0x45fc>
   23c9c:	mov	lr, #0
   23ca0:	ldr	r0, [sp, #44]	; 0x2c
   23ca4:	ldr	r2, [fp, #8]
   23ca8:	add	r1, sp, #48	; 0x30
   23cac:	mov	r3, lr
   23cb0:	mov	r9, lr
   23cb4:	bl	2728 <InflateSkipData>
   23cb8:	ldr	sl, [fp, #24]
   23cbc:	ldr	r0, [sl]
   23cc0:	cmp	r0, #1
   23cc4:	bne	25174 <ReadCompressedDataSlabN+0x36fc>
   23cc8:	ldr	r0, [sp, #28]
   23ccc:	cmp	r0, #1
   23cd0:	blt	26074 <ReadCompressedDataSlabN+0x45fc>
   23cd4:	ldr	r0, [fp, #20]
   23cd8:	add	r1, sp, #48	; 0x30
   23cdc:	add	r6, r0, #4
   23ce0:	ldr	r0, [fp, #28]
   23ce4:	add	r0, r0, #4
   23ce8:	str	r0, [sp, #40]	; 0x28
   23cec:	sub	r0, fp, #112	; 0x70
   23cf0:	orr	r8, r0, #4
   23cf4:	sub	r0, fp, #72	; 0x48
   23cf8:	orr	r0, r0, #4
   23cfc:	str	r0, [sp, #20]
   23d00:	mov	r0, #0
   23d04:	str	r0, [sp, #32]
   23d08:	ldr	sl, [fp, #20]
   23d0c:	ldr	r3, [sl]
   23d10:	cmp	r3, #0
   23d14:	beq	23d40 <ReadCompressedDataSlabN+0x22c8>
   23d18:	ldr	r7, [sp, #44]	; 0x2c
   23d1c:	ldr	r4, [fp, #8]
   23d20:	mov	r5, r1
   23d24:	mov	r0, r7
   23d28:	mov	r2, r4
   23d2c:	bl	2728 <InflateSkipData>
   23d30:	ldr	r0, [sl]
   23d34:	add	r9, r0, r9
   23d38:	str	r9, [sp, #24]
   23d3c:	b	23d50 <ReadCompressedDataSlabN+0x22d8>
   23d40:	ldr	r7, [sp, #44]	; 0x2c
   23d44:	ldr	r4, [fp, #8]
   23d48:	str	r9, [sp, #24]
   23d4c:	mov	r5, r1
   23d50:	ldr	r0, [fp, #28]
   23d54:	ldr	r1, [sp, #32]
   23d58:	mov	r3, r4
   23d5c:	ldr	r0, [r0]
   23d60:	str	r0, [sp]
   23d64:	ldr	r0, [sp, #36]	; 0x24
   23d68:	add	r2, r0, r1, lsl #1
   23d6c:	mov	r0, r7
   23d70:	mov	r1, r5
   23d74:	bl	18688 <ReadCompressedUInt16Data>
   23d78:	ldr	r9, [fp, #16]
   23d7c:	ldr	r0, [sl]
   23d80:	mov	r2, r4
   23d84:	ldr	r1, [r9]
   23d88:	sub	r0, r1, r0
   23d8c:	ldr	r1, [fp, #28]
   23d90:	ldr	r1, [r1]
   23d94:	sub	r3, r0, r1
   23d98:	mov	r0, r7
   23d9c:	mov	r1, r5
   23da0:	bl	2728 <InflateSkipData>
   23da4:	ldr	r0, [r9]
   23da8:	ldr	r1, [sp, #24]
   23dac:	add	r0, r0, r1
   23db0:	ldr	r1, [sl]
   23db4:	sub	r9, r0, r1
   23db8:	ldr	r0, [fp, #12]
   23dbc:	cmp	r0, #2
   23dc0:	blt	23ed4 <ReadCompressedDataSlabN+0x245c>
   23dc4:	mov	r0, #0
   23dc8:	add	r3, sp, #104	; 0x68
   23dcc:	mov	r4, r0
   23dd0:	ldr	r0, [r8, r0, lsl #2]
   23dd4:	ldr	r1, [sp, #40]	; 0x28
   23dd8:	add	r0, r0, #1
   23ddc:	str	r0, [r8, r4, lsl #2]
   23de0:	ldr	r1, [r1, r4, lsl #2]
   23de4:	sdiv	r2, r0, r1
   23de8:	mls	r0, r2, r1, r0
   23dec:	cmp	r0, #0
   23df0:	bne	23eac <ReadCompressedDataSlabN+0x2434>
   23df4:	mov	r0, #0
   23df8:	add	r5, r3, r4, lsl #2
   23dfc:	str	r0, [r8, r4, lsl #2]
   23e00:	ldr	r0, [r5, #4]
   23e04:	sdiv	r1, r9, r0
   23e08:	mls	r1, r1, r0, r9
   23e0c:	cmp	r1, #0
   23e10:	beq	23e60 <ReadCompressedDataSlabN+0x23e8>
   23e14:	ldr	r2, [r3, r4, lsl #2]
   23e18:	ldr	r3, [r6, r4, lsl #2]
   23e1c:	sub	r0, r0, r1
   23e20:	add	r1, sp, #48	; 0x30
   23e24:	mla	r3, r3, r2, r0
   23e28:	ldr	r2, [fp, #8]
   23e2c:	mov	r0, r7
   23e30:	bl	2728 <InflateSkipData>
   23e34:	ldr	r0, [r5, #4]
   23e38:	add	r3, sp, #104	; 0x68
   23e3c:	sdiv	r2, r9, r0
   23e40:	add	r1, r0, r9
   23e44:	mul	r0, r2, r0
   23e48:	ldr	r2, [r6, r4, lsl #2]
   23e4c:	sub	r0, r0, r9
   23e50:	add	r0, r1, r0
   23e54:	ldr	r1, [r3, r4, lsl #2]
   23e58:	mla	r9, r2, r1, r0
   23e5c:	b	23e94 <ReadCompressedDataSlabN+0x241c>
   23e60:	ldr	r0, [r6, r4, lsl #2]
   23e64:	cmp	r0, #0
   23e68:	beq	23e94 <ReadCompressedDataSlabN+0x241c>
   23e6c:	ldr	r1, [r3, r4, lsl #2]
   23e70:	ldr	r2, [fp, #8]
   23e74:	mul	r3, r1, r0
   23e78:	mov	r0, r7
   23e7c:	add	r1, sp, #48	; 0x30
   23e80:	bl	2728 <InflateSkipData>
   23e84:	add	r3, sp, #104	; 0x68
   23e88:	ldr	r1, [r6, r4, lsl #2]
   23e8c:	ldr	r0, [r3, r4, lsl #2]
   23e90:	mla	r9, r1, r0, r9
   23e94:	ldr	r2, [fp, #12]
   23e98:	add	r1, r4, #2
   23e9c:	add	r0, r4, #1
   23ea0:	cmp	r1, r2
   23ea4:	blt	23dcc <ReadCompressedDataSlabN+0x2354>
   23ea8:	b	23ed4 <ReadCompressedDataSlabN+0x245c>
   23eac:	ldr	r0, [sp, #20]
   23eb0:	ldr	r4, [r0, r4, lsl #2]
   23eb4:	cmp	r4, #0
   23eb8:	beq	23ed4 <ReadCompressedDataSlabN+0x245c>
   23ebc:	ldr	r2, [fp, #8]
   23ec0:	mov	r0, r7
   23ec4:	add	r1, sp, #48	; 0x30
   23ec8:	mov	r3, r4
   23ecc:	bl	2728 <InflateSkipData>
   23ed0:	add	r9, r4, r9
   23ed4:	ldr	r0, [fp, #28]
   23ed8:	ldr	r1, [sp, #32]
   23edc:	ldr	r0, [r0]
   23ee0:	add	r1, r0, r1
   23ee4:	ldr	r0, [sp, #28]
   23ee8:	str	r1, [sp, #32]
   23eec:	cmp	r1, r0
   23ef0:	add	r1, sp, #48	; 0x30
   23ef4:	blt	23d08 <ReadCompressedDataSlabN+0x2290>
   23ef8:	b	26074 <ReadCompressedDataSlabN+0x45fc>
   23efc:	mov	lr, #0
   23f00:	ldr	r0, [sp, #44]	; 0x2c
   23f04:	ldr	r2, [fp, #8]
   23f08:	add	r1, sp, #48	; 0x30
   23f0c:	mov	r3, lr
   23f10:	mov	r9, lr
   23f14:	bl	2728 <InflateSkipData>
   23f18:	ldr	sl, [fp, #24]
   23f1c:	ldr	r0, [sl]
   23f20:	cmp	r0, #1
   23f24:	bne	25470 <ReadCompressedDataSlabN+0x39f8>
   23f28:	ldr	r0, [sp, #28]
   23f2c:	cmp	r0, #1
   23f30:	blt	26074 <ReadCompressedDataSlabN+0x45fc>
   23f34:	ldr	r0, [fp, #20]
   23f38:	add	r1, sp, #48	; 0x30
   23f3c:	add	r6, r0, #4
   23f40:	ldr	r0, [fp, #28]
   23f44:	add	r0, r0, #4
   23f48:	str	r0, [sp, #40]	; 0x28
   23f4c:	sub	r0, fp, #112	; 0x70
   23f50:	orr	r8, r0, #4
   23f54:	sub	r0, fp, #72	; 0x48
   23f58:	orr	r0, r0, #4
   23f5c:	str	r0, [sp, #20]
   23f60:	mov	r0, #0
   23f64:	str	r0, [sp, #32]
   23f68:	ldr	sl, [fp, #20]
   23f6c:	ldr	r3, [sl]
   23f70:	cmp	r3, #0
   23f74:	beq	23fa0 <ReadCompressedDataSlabN+0x2528>
   23f78:	ldr	r7, [sp, #44]	; 0x2c
   23f7c:	ldr	r4, [fp, #8]
   23f80:	mov	r5, r1
   23f84:	mov	r0, r7
   23f88:	mov	r2, r4
   23f8c:	bl	2728 <InflateSkipData>
   23f90:	ldr	r0, [sl]
   23f94:	add	r9, r0, r9
   23f98:	str	r9, [sp, #24]
   23f9c:	b	23fb0 <ReadCompressedDataSlabN+0x2538>
   23fa0:	ldr	r7, [sp, #44]	; 0x2c
   23fa4:	ldr	r4, [fp, #8]
   23fa8:	str	r9, [sp, #24]
   23fac:	mov	r5, r1
   23fb0:	ldr	r0, [fp, #28]
   23fb4:	ldr	r1, [sp, #32]
   23fb8:	mov	r3, r4
   23fbc:	ldr	r0, [r0]
   23fc0:	str	r0, [sp]
   23fc4:	ldr	r0, [sp, #36]	; 0x24
   23fc8:	add	r2, r0, r1, lsl #2
   23fcc:	mov	r0, r7
   23fd0:	mov	r1, r5
   23fd4:	bl	10624 <ReadCompressedInt32Data>
   23fd8:	ldr	r9, [fp, #16]
   23fdc:	ldr	r0, [sl]
   23fe0:	mov	r2, r4
   23fe4:	ldr	r1, [r9]
   23fe8:	sub	r0, r1, r0
   23fec:	ldr	r1, [fp, #28]
   23ff0:	ldr	r1, [r1]
   23ff4:	sub	r3, r0, r1
   23ff8:	mov	r0, r7
   23ffc:	mov	r1, r5
   24000:	bl	2728 <InflateSkipData>
   24004:	ldr	r0, [r9]
   24008:	ldr	r1, [sp, #24]
   2400c:	add	r0, r0, r1
   24010:	ldr	r1, [sl]
   24014:	sub	r9, r0, r1
   24018:	ldr	r0, [fp, #12]
   2401c:	cmp	r0, #2
   24020:	blt	24134 <ReadCompressedDataSlabN+0x26bc>
   24024:	mov	r0, #0
   24028:	add	r3, sp, #104	; 0x68
   2402c:	mov	r4, r0
   24030:	ldr	r0, [r8, r0, lsl #2]
   24034:	ldr	r1, [sp, #40]	; 0x28
   24038:	add	r0, r0, #1
   2403c:	str	r0, [r8, r4, lsl #2]
   24040:	ldr	r1, [r1, r4, lsl #2]
   24044:	sdiv	r2, r0, r1
   24048:	mls	r0, r2, r1, r0
   2404c:	cmp	r0, #0
   24050:	bne	2410c <ReadCompressedDataSlabN+0x2694>
   24054:	mov	r0, #0
   24058:	add	r5, r3, r4, lsl #2
   2405c:	str	r0, [r8, r4, lsl #2]
   24060:	ldr	r0, [r5, #4]
   24064:	sdiv	r1, r9, r0
   24068:	mls	r1, r1, r0, r9
   2406c:	cmp	r1, #0
   24070:	beq	240c0 <ReadCompressedDataSlabN+0x2648>
   24074:	ldr	r2, [r3, r4, lsl #2]
   24078:	ldr	r3, [r6, r4, lsl #2]
   2407c:	sub	r0, r0, r1
   24080:	add	r1, sp, #48	; 0x30
   24084:	mla	r3, r3, r2, r0
   24088:	ldr	r2, [fp, #8]
   2408c:	mov	r0, r7
   24090:	bl	2728 <InflateSkipData>
   24094:	ldr	r0, [r5, #4]
   24098:	add	r3, sp, #104	; 0x68
   2409c:	sdiv	r2, r9, r0
   240a0:	add	r1, r0, r9
   240a4:	mul	r0, r2, r0
   240a8:	ldr	r2, [r6, r4, lsl #2]
   240ac:	sub	r0, r0, r9
   240b0:	add	r0, r1, r0
   240b4:	ldr	r1, [r3, r4, lsl #2]
   240b8:	mla	r9, r2, r1, r0
   240bc:	b	240f4 <ReadCompressedDataSlabN+0x267c>
   240c0:	ldr	r0, [r6, r4, lsl #2]
   240c4:	cmp	r0, #0
   240c8:	beq	240f4 <ReadCompressedDataSlabN+0x267c>
   240cc:	ldr	r1, [r3, r4, lsl #2]
   240d0:	ldr	r2, [fp, #8]
   240d4:	mul	r3, r1, r0
   240d8:	mov	r0, r7
   240dc:	add	r1, sp, #48	; 0x30
   240e0:	bl	2728 <InflateSkipData>
   240e4:	add	r3, sp, #104	; 0x68
   240e8:	ldr	r1, [r6, r4, lsl #2]
   240ec:	ldr	r0, [r3, r4, lsl #2]
   240f0:	mla	r9, r1, r0, r9
   240f4:	ldr	r2, [fp, #12]
   240f8:	add	r1, r4, #2
   240fc:	add	r0, r4, #1
   24100:	cmp	r1, r2
   24104:	blt	2402c <ReadCompressedDataSlabN+0x25b4>
   24108:	b	24134 <ReadCompressedDataSlabN+0x26bc>
   2410c:	ldr	r0, [sp, #20]
   24110:	ldr	r4, [r0, r4, lsl #2]
   24114:	cmp	r4, #0
   24118:	beq	24134 <ReadCompressedDataSlabN+0x26bc>
   2411c:	ldr	r2, [fp, #8]
   24120:	mov	r0, r7
   24124:	add	r1, sp, #48	; 0x30
   24128:	mov	r3, r4
   2412c:	bl	2728 <InflateSkipData>
   24130:	add	r9, r4, r9
   24134:	ldr	r0, [fp, #28]
   24138:	ldr	r1, [sp, #32]
   2413c:	ldr	r0, [r0]
   24140:	add	r1, r0, r1
   24144:	ldr	r0, [sp, #28]
   24148:	str	r1, [sp, #32]
   2414c:	cmp	r1, r0
   24150:	add	r1, sp, #48	; 0x30
   24154:	blt	23f68 <ReadCompressedDataSlabN+0x24f0>
   24158:	b	26074 <ReadCompressedDataSlabN+0x45fc>
   2415c:	mov	lr, #0
   24160:	ldr	r0, [sp, #44]	; 0x2c
   24164:	ldr	r2, [fp, #8]
   24168:	add	r1, sp, #48	; 0x30
   2416c:	mov	r3, lr
   24170:	mov	r9, lr
   24174:	bl	2728 <InflateSkipData>
   24178:	ldr	sl, [fp, #24]
   2417c:	ldr	r0, [sl]
   24180:	cmp	r0, #1
   24184:	bne	2576c <ReadCompressedDataSlabN+0x3cf4>
   24188:	ldr	r0, [sp, #28]
   2418c:	cmp	r0, #1
   24190:	blt	26074 <ReadCompressedDataSlabN+0x45fc>
   24194:	ldr	r0, [fp, #20]
   24198:	add	r1, sp, #48	; 0x30
   2419c:	add	r6, r0, #4
   241a0:	ldr	r0, [fp, #28]
   241a4:	add	r0, r0, #4
   241a8:	str	r0, [sp, #40]	; 0x28
   241ac:	sub	r0, fp, #112	; 0x70
   241b0:	orr	r8, r0, #4
   241b4:	sub	r0, fp, #72	; 0x48
   241b8:	orr	r0, r0, #4
   241bc:	str	r0, [sp, #20]
   241c0:	mov	r0, #0
   241c4:	str	r0, [sp, #32]
   241c8:	ldr	sl, [fp, #20]
   241cc:	ldr	r3, [sl]
   241d0:	cmp	r3, #0
   241d4:	beq	24200 <ReadCompressedDataSlabN+0x2788>
   241d8:	ldr	r7, [sp, #44]	; 0x2c
   241dc:	ldr	r4, [fp, #8]
   241e0:	mov	r5, r1
   241e4:	mov	r0, r7
   241e8:	mov	r2, r4
   241ec:	bl	2728 <InflateSkipData>
   241f0:	ldr	r0, [sl]
   241f4:	add	r9, r0, r9
   241f8:	str	r9, [sp, #24]
   241fc:	b	24210 <ReadCompressedDataSlabN+0x2798>
   24200:	ldr	r7, [sp, #44]	; 0x2c
   24204:	ldr	r4, [fp, #8]
   24208:	str	r9, [sp, #24]
   2420c:	mov	r5, r1
   24210:	ldr	r0, [fp, #28]
   24214:	ldr	r1, [sp, #32]
   24218:	mov	r3, r4
   2421c:	ldr	r0, [r0]
   24220:	str	r0, [sp]
   24224:	ldr	r0, [sp, #36]	; 0x24
   24228:	add	r2, r0, r1, lsl #2
   2422c:	mov	r0, r7
   24230:	mov	r1, r5
   24234:	bl	136f0 <ReadCompressedUInt32Data>
   24238:	ldr	r9, [fp, #16]
   2423c:	ldr	r0, [sl]
   24240:	mov	r2, r4
   24244:	ldr	r1, [r9]
   24248:	sub	r0, r1, r0
   2424c:	ldr	r1, [fp, #28]
   24250:	ldr	r1, [r1]
   24254:	sub	r3, r0, r1
   24258:	mov	r0, r7
   2425c:	mov	r1, r5
   24260:	bl	2728 <InflateSkipData>
   24264:	ldr	r0, [r9]
   24268:	ldr	r1, [sp, #24]
   2426c:	add	r0, r0, r1
   24270:	ldr	r1, [sl]
   24274:	sub	r9, r0, r1
   24278:	ldr	r0, [fp, #12]
   2427c:	cmp	r0, #2
   24280:	blt	24394 <ReadCompressedDataSlabN+0x291c>
   24284:	mov	r0, #0
   24288:	add	r3, sp, #104	; 0x68
   2428c:	mov	r4, r0
   24290:	ldr	r0, [r8, r0, lsl #2]
   24294:	ldr	r1, [sp, #40]	; 0x28
   24298:	add	r0, r0, #1
   2429c:	str	r0, [r8, r4, lsl #2]
   242a0:	ldr	r1, [r1, r4, lsl #2]
   242a4:	sdiv	r2, r0, r1
   242a8:	mls	r0, r2, r1, r0
   242ac:	cmp	r0, #0
   242b0:	bne	2436c <ReadCompressedDataSlabN+0x28f4>
   242b4:	mov	r0, #0
   242b8:	add	r5, r3, r4, lsl #2
   242bc:	str	r0, [r8, r4, lsl #2]
   242c0:	ldr	r0, [r5, #4]
   242c4:	sdiv	r1, r9, r0
   242c8:	mls	r1, r1, r0, r9
   242cc:	cmp	r1, #0
   242d0:	beq	24320 <ReadCompressedDataSlabN+0x28a8>
   242d4:	ldr	r2, [r3, r4, lsl #2]
   242d8:	ldr	r3, [r6, r4, lsl #2]
   242dc:	sub	r0, r0, r1
   242e0:	add	r1, sp, #48	; 0x30
   242e4:	mla	r3, r3, r2, r0
   242e8:	ldr	r2, [fp, #8]
   242ec:	mov	r0, r7
   242f0:	bl	2728 <InflateSkipData>
   242f4:	ldr	r0, [r5, #4]
   242f8:	add	r3, sp, #104	; 0x68
   242fc:	sdiv	r2, r9, r0
   24300:	add	r1, r0, r9
   24304:	mul	r0, r2, r0
   24308:	ldr	r2, [r6, r4, lsl #2]
   2430c:	sub	r0, r0, r9
   24310:	add	r0, r1, r0
   24314:	ldr	r1, [r3, r4, lsl #2]
   24318:	mla	r9, r2, r1, r0
   2431c:	b	24354 <ReadCompressedDataSlabN+0x28dc>
   24320:	ldr	r0, [r6, r4, lsl #2]
   24324:	cmp	r0, #0
   24328:	beq	24354 <ReadCompressedDataSlabN+0x28dc>
   2432c:	ldr	r1, [r3, r4, lsl #2]
   24330:	ldr	r2, [fp, #8]
   24334:	mul	r3, r1, r0
   24338:	mov	r0, r7
   2433c:	add	r1, sp, #48	; 0x30
   24340:	bl	2728 <InflateSkipData>
   24344:	add	r3, sp, #104	; 0x68
   24348:	ldr	r1, [r6, r4, lsl #2]
   2434c:	ldr	r0, [r3, r4, lsl #2]
   24350:	mla	r9, r1, r0, r9
   24354:	ldr	r2, [fp, #12]
   24358:	add	r1, r4, #2
   2435c:	add	r0, r4, #1
   24360:	cmp	r1, r2
   24364:	blt	2428c <ReadCompressedDataSlabN+0x2814>
   24368:	b	24394 <ReadCompressedDataSlabN+0x291c>
   2436c:	ldr	r0, [sp, #20]
   24370:	ldr	r4, [r0, r4, lsl #2]
   24374:	cmp	r4, #0
   24378:	beq	24394 <ReadCompressedDataSlabN+0x291c>
   2437c:	ldr	r2, [fp, #8]
   24380:	mov	r0, r7
   24384:	add	r1, sp, #48	; 0x30
   24388:	mov	r3, r4
   2438c:	bl	2728 <InflateSkipData>
   24390:	add	r9, r4, r9
   24394:	ldr	r0, [fp, #28]
   24398:	ldr	r1, [sp, #32]
   2439c:	ldr	r0, [r0]
   243a0:	add	r1, r0, r1
   243a4:	ldr	r0, [sp, #28]
   243a8:	str	r1, [sp, #32]
   243ac:	cmp	r1, r0
   243b0:	add	r1, sp, #48	; 0x30
   243b4:	blt	241c8 <ReadCompressedDataSlabN+0x2750>
   243b8:	b	26074 <ReadCompressedDataSlabN+0x45fc>
   243bc:	mov	lr, #0
   243c0:	ldr	r0, [sp, #44]	; 0x2c
   243c4:	ldr	r2, [fp, #8]
   243c8:	add	r1, sp, #48	; 0x30
   243cc:	mov	r3, lr
   243d0:	mov	r9, lr
   243d4:	bl	2728 <InflateSkipData>
   243d8:	ldr	sl, [fp, #24]
   243dc:	ldr	r0, [sl]
   243e0:	cmp	r0, #1
   243e4:	bne	25a68 <ReadCompressedDataSlabN+0x3ff0>
   243e8:	ldr	r0, [sp, #24]
   243ec:	cmp	r0, #1
   243f0:	blt	26074 <ReadCompressedDataSlabN+0x45fc>
   243f4:	ldr	r0, [fp, #20]
   243f8:	add	r1, sp, #48	; 0x30
   243fc:	add	r6, r0, #4
   24400:	ldr	r0, [fp, #28]
   24404:	add	r0, r0, #4
   24408:	str	r0, [sp, #40]	; 0x28
   2440c:	sub	r0, fp, #112	; 0x70
   24410:	orr	r8, r0, #4
   24414:	sub	r0, fp, #72	; 0x48
   24418:	orr	r0, r0, #4
   2441c:	str	r0, [sp, #28]
   24420:	mov	r0, #0
   24424:	str	r0, [sp, #32]
   24428:	ldr	sl, [fp, #20]
   2442c:	ldr	r3, [sl]
   24430:	cmp	r3, #0
   24434:	beq	24460 <ReadCompressedDataSlabN+0x29e8>
   24438:	ldr	r7, [sp, #44]	; 0x2c
   2443c:	ldr	r4, [fp, #8]
   24440:	mov	r5, r1
   24444:	mov	r0, r7
   24448:	mov	r2, r4
   2444c:	bl	2728 <InflateSkipData>
   24450:	ldr	r0, [sl]
   24454:	add	r9, r0, r9
   24458:	str	r9, [sp, #20]
   2445c:	b	24470 <ReadCompressedDataSlabN+0x29f8>
   24460:	ldr	r7, [sp, #44]	; 0x2c
   24464:	ldr	r4, [fp, #8]
   24468:	str	r9, [sp, #20]
   2446c:	mov	r5, r1
   24470:	ldr	r0, [fp, #28]
   24474:	ldr	r1, [sp, #32]
   24478:	mov	r3, r4
   2447c:	ldr	r0, [r0]
   24480:	str	r0, [sp]
   24484:	ldr	r0, [sp, #36]	; 0x24
   24488:	add	r2, r0, r1, lsl #3
   2448c:	mov	r0, r7
   24490:	mov	r1, r5
   24494:	bl	b1d0 <ReadCompressedInt64Data>
   24498:	ldr	r9, [fp, #16]
   2449c:	ldr	r0, [sl]
   244a0:	mov	r2, r4
   244a4:	ldr	r1, [r9]
   244a8:	sub	r0, r1, r0
   244ac:	ldr	r1, [fp, #28]
   244b0:	ldr	r1, [r1]
   244b4:	sub	r3, r0, r1
   244b8:	mov	r0, r7
   244bc:	mov	r1, r5
   244c0:	bl	2728 <InflateSkipData>
   244c4:	ldr	r0, [r9]
   244c8:	ldr	r1, [sp, #20]
   244cc:	add	r0, r0, r1
   244d0:	ldr	r1, [sl]
   244d4:	sub	r9, r0, r1
   244d8:	ldr	r0, [fp, #12]
   244dc:	cmp	r0, #2
   244e0:	blt	245f4 <ReadCompressedDataSlabN+0x2b7c>
   244e4:	mov	r0, #0
   244e8:	add	r3, sp, #104	; 0x68
   244ec:	mov	r4, r0
   244f0:	ldr	r0, [r8, r0, lsl #2]
   244f4:	ldr	r1, [sp, #40]	; 0x28
   244f8:	add	r0, r0, #1
   244fc:	str	r0, [r8, r4, lsl #2]
   24500:	ldr	r1, [r1, r4, lsl #2]
   24504:	sdiv	r2, r0, r1
   24508:	mls	r0, r2, r1, r0
   2450c:	cmp	r0, #0
   24510:	bne	245cc <ReadCompressedDataSlabN+0x2b54>
   24514:	mov	r0, #0
   24518:	add	r5, r3, r4, lsl #2
   2451c:	str	r0, [r8, r4, lsl #2]
   24520:	ldr	r0, [r5, #4]
   24524:	sdiv	r1, r9, r0
   24528:	mls	r1, r1, r0, r9
   2452c:	cmp	r1, #0
   24530:	beq	24580 <ReadCompressedDataSlabN+0x2b08>
   24534:	ldr	r2, [r3, r4, lsl #2]
   24538:	ldr	r3, [r6, r4, lsl #2]
   2453c:	sub	r0, r0, r1
   24540:	add	r1, sp, #48	; 0x30
   24544:	mla	r3, r3, r2, r0
   24548:	ldr	r2, [fp, #8]
   2454c:	mov	r0, r7
   24550:	bl	2728 <InflateSkipData>
   24554:	ldr	r0, [r5, #4]
   24558:	add	r3, sp, #104	; 0x68
   2455c:	sdiv	r2, r9, r0
   24560:	add	r1, r0, r9
   24564:	mul	r0, r2, r0
   24568:	ldr	r2, [r6, r4, lsl #2]
   2456c:	sub	r0, r0, r9
   24570:	add	r0, r1, r0
   24574:	ldr	r1, [r3, r4, lsl #2]
   24578:	mla	r9, r2, r1, r0
   2457c:	b	245b4 <ReadCompressedDataSlabN+0x2b3c>
   24580:	ldr	r0, [r6, r4, lsl #2]
   24584:	cmp	r0, #0
   24588:	beq	245b4 <ReadCompressedDataSlabN+0x2b3c>
   2458c:	ldr	r1, [r3, r4, lsl #2]
   24590:	ldr	r2, [fp, #8]
   24594:	mul	r3, r1, r0
   24598:	mov	r0, r7
   2459c:	add	r1, sp, #48	; 0x30
   245a0:	bl	2728 <InflateSkipData>
   245a4:	add	r3, sp, #104	; 0x68
   245a8:	ldr	r1, [r6, r4, lsl #2]
   245ac:	ldr	r0, [r3, r4, lsl #2]
   245b0:	mla	r9, r1, r0, r9
   245b4:	ldr	r2, [fp, #12]
   245b8:	add	r1, r4, #2
   245bc:	add	r0, r4, #1
   245c0:	cmp	r1, r2
   245c4:	blt	244ec <ReadCompressedDataSlabN+0x2a74>
   245c8:	b	245f4 <ReadCompressedDataSlabN+0x2b7c>
   245cc:	ldr	r0, [sp, #28]
   245d0:	ldr	r4, [r0, r4, lsl #2]
   245d4:	cmp	r4, #0
   245d8:	beq	245f4 <ReadCompressedDataSlabN+0x2b7c>
   245dc:	ldr	r2, [fp, #8]
   245e0:	mov	r0, r7
   245e4:	add	r1, sp, #48	; 0x30
   245e8:	mov	r3, r4
   245ec:	bl	2728 <InflateSkipData>
   245f0:	add	r9, r4, r9
   245f4:	ldr	r0, [fp, #28]
   245f8:	ldr	r1, [sp, #32]
   245fc:	ldr	r0, [r0]
   24600:	add	r1, r0, r1
   24604:	ldr	r0, [sp, #24]
   24608:	str	r1, [sp, #32]
   2460c:	cmp	r1, r0
   24610:	add	r1, sp, #48	; 0x30
   24614:	blt	24428 <ReadCompressedDataSlabN+0x29b0>
   24618:	b	26074 <ReadCompressedDataSlabN+0x45fc>
   2461c:	mov	lr, #0
   24620:	ldr	r0, [sp, #44]	; 0x2c
   24624:	ldr	r2, [fp, #8]
   24628:	add	r1, sp, #48	; 0x30
   2462c:	mov	r3, lr
   24630:	mov	r9, lr
   24634:	bl	2728 <InflateSkipData>
   24638:	ldr	sl, [fp, #24]
   2463c:	ldr	r0, [sl]
   24640:	cmp	r0, #1
   24644:	bne	25d7c <ReadCompressedDataSlabN+0x4304>
   24648:	ldr	r0, [sp, #28]
   2464c:	cmp	r0, #1
   24650:	blt	26074 <ReadCompressedDataSlabN+0x45fc>
   24654:	ldr	r0, [fp, #20]
   24658:	add	r1, sp, #48	; 0x30
   2465c:	add	r6, r0, #4
   24660:	ldr	r0, [fp, #28]
   24664:	add	r0, r0, #4
   24668:	str	r0, [sp, #40]	; 0x28
   2466c:	sub	r0, fp, #112	; 0x70
   24670:	orr	r8, r0, #4
   24674:	sub	r0, fp, #72	; 0x48
   24678:	orr	r0, r0, #4
   2467c:	str	r0, [sp, #20]
   24680:	mov	r0, #0
   24684:	str	r0, [sp, #32]
   24688:	ldr	sl, [fp, #20]
   2468c:	ldr	r3, [sl]
   24690:	cmp	r3, #0
   24694:	beq	246c0 <ReadCompressedDataSlabN+0x2c48>
   24698:	ldr	r7, [sp, #44]	; 0x2c
   2469c:	ldr	r4, [fp, #8]
   246a0:	mov	r5, r1
   246a4:	mov	r0, r7
   246a8:	mov	r2, r4
   246ac:	bl	2728 <InflateSkipData>
   246b0:	ldr	r0, [sl]
   246b4:	add	r9, r0, r9
   246b8:	str	r9, [sp, #24]
   246bc:	b	246d0 <ReadCompressedDataSlabN+0x2c58>
   246c0:	ldr	r7, [sp, #44]	; 0x2c
   246c4:	ldr	r4, [fp, #8]
   246c8:	str	r9, [sp, #24]
   246cc:	mov	r5, r1
   246d0:	ldr	r0, [fp, #28]
   246d4:	ldr	r1, [sp, #32]
   246d8:	mov	r3, r4
   246dc:	ldr	r0, [r0]
   246e0:	str	r0, [sp]
   246e4:	ldr	r0, [sp, #36]	; 0x24
   246e8:	add	r2, r0, r1, lsl #3
   246ec:	mov	r0, r7
   246f0:	mov	r1, r5
   246f4:	bl	d4c8 <ReadCompressedUInt64Data>
   246f8:	ldr	r9, [fp, #16]
   246fc:	ldr	r0, [sl]
   24700:	mov	r2, r4
   24704:	ldr	r1, [r9]
   24708:	sub	r0, r1, r0
   2470c:	ldr	r1, [fp, #28]
   24710:	ldr	r1, [r1]
   24714:	sub	r3, r0, r1
   24718:	mov	r0, r7
   2471c:	mov	r1, r5
   24720:	bl	2728 <InflateSkipData>
   24724:	ldr	r0, [r9]
   24728:	ldr	r1, [sp, #24]
   2472c:	add	r0, r0, r1
   24730:	ldr	r1, [sl]
   24734:	sub	r9, r0, r1
   24738:	ldr	r0, [fp, #12]
   2473c:	cmp	r0, #2
   24740:	blt	24854 <ReadCompressedDataSlabN+0x2ddc>
   24744:	mov	r0, #0
   24748:	add	r3, sp, #104	; 0x68
   2474c:	mov	r4, r0
   24750:	ldr	r0, [r8, r0, lsl #2]
   24754:	ldr	r1, [sp, #40]	; 0x28
   24758:	add	r0, r0, #1
   2475c:	str	r0, [r8, r4, lsl #2]
   24760:	ldr	r1, [r1, r4, lsl #2]
   24764:	sdiv	r2, r0, r1
   24768:	mls	r0, r2, r1, r0
   2476c:	cmp	r0, #0
   24770:	bne	2482c <ReadCompressedDataSlabN+0x2db4>
   24774:	mov	r0, #0
   24778:	add	r5, r3, r4, lsl #2
   2477c:	str	r0, [r8, r4, lsl #2]
   24780:	ldr	r0, [r5, #4]
   24784:	sdiv	r1, r9, r0
   24788:	mls	r1, r1, r0, r9
   2478c:	cmp	r1, #0
   24790:	beq	247e0 <ReadCompressedDataSlabN+0x2d68>
   24794:	ldr	r2, [r3, r4, lsl #2]
   24798:	ldr	r3, [r6, r4, lsl #2]
   2479c:	sub	r0, r0, r1
   247a0:	add	r1, sp, #48	; 0x30
   247a4:	mla	r3, r3, r2, r0
   247a8:	ldr	r2, [fp, #8]
   247ac:	mov	r0, r7
   247b0:	bl	2728 <InflateSkipData>
   247b4:	ldr	r0, [r5, #4]
   247b8:	add	r3, sp, #104	; 0x68
   247bc:	sdiv	r2, r9, r0
   247c0:	add	r1, r0, r9
   247c4:	mul	r0, r2, r0
   247c8:	ldr	r2, [r6, r4, lsl #2]
   247cc:	sub	r0, r0, r9
   247d0:	add	r0, r1, r0
   247d4:	ldr	r1, [r3, r4, lsl #2]
   247d8:	mla	r9, r2, r1, r0
   247dc:	b	24814 <ReadCompressedDataSlabN+0x2d9c>
   247e0:	ldr	r0, [r6, r4, lsl #2]
   247e4:	cmp	r0, #0
   247e8:	beq	24814 <ReadCompressedDataSlabN+0x2d9c>
   247ec:	ldr	r1, [r3, r4, lsl #2]
   247f0:	ldr	r2, [fp, #8]
   247f4:	mul	r3, r1, r0
   247f8:	mov	r0, r7
   247fc:	add	r1, sp, #48	; 0x30
   24800:	bl	2728 <InflateSkipData>
   24804:	add	r3, sp, #104	; 0x68
   24808:	ldr	r1, [r6, r4, lsl #2]
   2480c:	ldr	r0, [r3, r4, lsl #2]
   24810:	mla	r9, r1, r0, r9
   24814:	ldr	r2, [fp, #12]
   24818:	add	r1, r4, #2
   2481c:	add	r0, r4, #1
   24820:	cmp	r1, r2
   24824:	blt	2474c <ReadCompressedDataSlabN+0x2cd4>
   24828:	b	24854 <ReadCompressedDataSlabN+0x2ddc>
   2482c:	ldr	r0, [sp, #20]
   24830:	ldr	r4, [r0, r4, lsl #2]
   24834:	cmp	r4, #0
   24838:	beq	24854 <ReadCompressedDataSlabN+0x2ddc>
   2483c:	ldr	r2, [fp, #8]
   24840:	mov	r0, r7
   24844:	add	r1, sp, #48	; 0x30
   24848:	mov	r3, r4
   2484c:	bl	2728 <InflateSkipData>
   24850:	add	r9, r4, r9
   24854:	ldr	r0, [fp, #28]
   24858:	ldr	r1, [sp, #32]
   2485c:	ldr	r0, [r0]
   24860:	add	r1, r0, r1
   24864:	ldr	r0, [sp, #28]
   24868:	str	r1, [sp, #32]
   2486c:	cmp	r1, r0
   24870:	add	r1, sp, #48	; 0x30
   24874:	blt	24688 <ReadCompressedDataSlabN+0x2c10>
   24878:	b	26074 <ReadCompressedDataSlabN+0x45fc>
   2487c:	cmp	r7, #1
   24880:	sub	r1, fp, #72	; 0x48
   24884:	blt	26074 <ReadCompressedDataSlabN+0x45fc>
   24888:	ldr	r0, [fp, #20]
   2488c:	mov	r9, #1
   24890:	add	ip, r0, #4
   24894:	ldr	r0, [fp, #28]
   24898:	str	ip, [sp, #32]
   2489c:	add	r0, r0, #4
   248a0:	str	r0, [sp, #40]	; 0x28
   248a4:	sub	r0, fp, #112	; 0x70
   248a8:	orr	r4, r0, #4
   248ac:	orr	r0, r1, #4
   248b0:	str	r0, [sp, #8]
   248b4:	ldr	r0, [sp, #36]	; 0x24
   248b8:	str	r4, [sp, #28]
   248bc:	add	r0, r0, #8
   248c0:	str	r0, [sp, #12]
   248c4:	mov	r0, #0
   248c8:	str	r0, [sp, #20]
   248cc:	ldr	r5, [fp, #20]
   248d0:	str	r8, [sp, #24]
   248d4:	ldr	r3, [r5]
   248d8:	cmp	r3, #0
   248dc:	beq	2491c <ReadCompressedDataSlabN+0x2ea4>
   248e0:	ldr	r4, [sp, #44]	; 0x2c
   248e4:	ldr	r8, [fp, #8]
   248e8:	mov	r7, r5
   248ec:	add	r5, sp, #48	; 0x30
   248f0:	mov	r1, r5
   248f4:	mov	r0, r4
   248f8:	mov	r2, r8
   248fc:	bl	2728 <InflateSkipData>
   24900:	ldr	r0, [r7]
   24904:	ldr	r1, [sp, #24]
   24908:	ldr	sl, [fp, #28]
   2490c:	add	r1, r0, r1
   24910:	ldr	r0, [sp, #36]	; 0x24
   24914:	str	r1, [sp, #24]
   24918:	b	24930 <ReadCompressedDataSlabN+0x2eb8>
   2491c:	ldr	r0, [sp, #36]	; 0x24
   24920:	ldr	r4, [sp, #44]	; 0x2c
   24924:	ldr	sl, [fp, #28]
   24928:	ldr	r8, [fp, #8]
   2492c:	add	r5, sp, #48	; 0x30
   24930:	ldr	r6, [sp, #20]
   24934:	ldr	r7, [sl]
   24938:	mov	r1, r5
   2493c:	mov	r3, r8
   24940:	str	r9, [sp]
   24944:	add	r2, r0, r6, lsl #3
   24948:	mov	r0, r4
   2494c:	bl	5584 <ReadCompressedDoubleData>
   24950:	cmp	r7, #2
   24954:	blt	249dc <ReadCompressedDataSlabN+0x2f64>
   24958:	ldr	r0, [sp, #12]
   2495c:	ldr	r8, [sp, #24]
   24960:	ldr	r1, [fp, #24]
   24964:	mov	r9, #0
   24968:	add	r6, r0, r6, lsl #3
   2496c:	ldr	r0, [r1]
   24970:	ldr	r4, [fp, #8]
   24974:	ldr	r7, [sp, #44]	; 0x2c
   24978:	add	r1, sp, #48	; 0x30
   2497c:	sub	r3, r0, #1
   24980:	mov	r0, r7
   24984:	mov	r2, r4
   24988:	bl	2728 <InflateSkipData>
   2498c:	ldr	r0, [fp, #24]
   24990:	ldr	r5, [sl]
   24994:	add	r1, sp, #48	; 0x30
   24998:	mov	r2, r6
   2499c:	mov	r3, r4
   249a0:	ldr	sl, [r0]
   249a4:	mov	r0, #1
   249a8:	str	r0, [sp]
   249ac:	mov	r0, r7
   249b0:	bl	5584 <ReadCompressedDoubleData>
   249b4:	add	r8, sl, r8
   249b8:	ldr	sl, [fp, #24]
   249bc:	add	r9, r9, #1
   249c0:	sub	r0, r5, #1
   249c4:	add	r6, r6, #8
   249c8:	cmp	r9, r0
   249cc:	mov	r1, sl
   249d0:	ldr	sl, [fp, #28]
   249d4:	blt	2496c <ReadCompressedDataSlabN+0x2ef4>
   249d8:	b	249e4 <ReadCompressedDataSlabN+0x2f6c>
   249dc:	ldr	r8, [sp, #24]
   249e0:	ldr	r1, [fp, #24]
   249e4:	ldr	r0, [fp, #16]
   249e8:	ldr	r2, [sl]
   249ec:	ldr	r1, [r1]
   249f0:	ldr	r9, [sp, #44]	; 0x2c
   249f4:	ldr	r0, [r0]
   249f8:	sub	r2, r2, #1
   249fc:	mls	r0, r2, r1, r0
   24a00:	ldr	r1, [fp, #20]
   24a04:	ldr	r2, [fp, #8]
   24a08:	ldr	r1, [r1]
   24a0c:	sub	r5, r0, r1
   24a10:	mov	r0, r9
   24a14:	add	r1, sp, #48	; 0x30
   24a18:	sub	r3, r5, #1
   24a1c:	bl	2728 <InflateSkipData>
   24a20:	ldr	r0, [fp, #12]
   24a24:	add	r8, r5, r8
   24a28:	cmp	r0, #2
   24a2c:	blt	24b58 <ReadCompressedDataSlabN+0x30e0>
   24a30:	ldr	ip, [sp, #32]
   24a34:	ldr	r4, [sp, #28]
   24a38:	mov	r0, #0
   24a3c:	add	r3, sp, #104	; 0x68
   24a40:	mov	r6, r0
   24a44:	ldr	r0, [r4, r0, lsl #2]
   24a48:	ldr	r1, [sp, #40]	; 0x28
   24a4c:	add	r0, r0, #1
   24a50:	str	r0, [r4, r6, lsl #2]
   24a54:	ldr	r1, [r1, r6, lsl #2]
   24a58:	sdiv	r2, r0, r1
   24a5c:	mls	r0, r2, r1, r0
   24a60:	cmp	r0, #0
   24a64:	bne	24b30 <ReadCompressedDataSlabN+0x30b8>
   24a68:	mov	r0, #0
   24a6c:	add	r5, r3, r6, lsl #2
   24a70:	str	r0, [r4, r6, lsl #2]
   24a74:	ldr	r0, [r5, #4]
   24a78:	sdiv	r1, r8, r0
   24a7c:	mls	r1, r1, r0, r8
   24a80:	cmp	r1, #0
   24a84:	beq	24adc <ReadCompressedDataSlabN+0x3064>
   24a88:	ldr	r2, [r3, r6, lsl #2]
   24a8c:	ldr	r3, [ip, r6, lsl #2]
   24a90:	sub	r0, r0, r1
   24a94:	add	r1, sp, #48	; 0x30
   24a98:	mla	r3, r3, r2, r0
   24a9c:	ldr	r2, [fp, #8]
   24aa0:	mov	r0, r9
   24aa4:	bl	2728 <InflateSkipData>
   24aa8:	ldr	r0, [r5, #4]
   24aac:	ldr	ip, [sp, #32]
   24ab0:	add	r3, sp, #104	; 0x68
   24ab4:	ldr	r4, [sp, #28]
   24ab8:	sdiv	r2, r8, r0
   24abc:	add	r1, r0, r8
   24ac0:	mul	r0, r2, r0
   24ac4:	ldr	r2, [ip, r6, lsl #2]
   24ac8:	sub	r0, r0, r8
   24acc:	add	r0, r1, r0
   24ad0:	ldr	r1, [r3, r6, lsl #2]
   24ad4:	mla	r8, r2, r1, r0
   24ad8:	b	24b18 <ReadCompressedDataSlabN+0x30a0>
   24adc:	ldr	r0, [ip, r6, lsl #2]
   24ae0:	cmp	r0, #0
   24ae4:	beq	24b18 <ReadCompressedDataSlabN+0x30a0>
   24ae8:	ldr	r1, [r3, r6, lsl #2]
   24aec:	ldr	r2, [fp, #8]
   24af0:	mul	r3, r1, r0
   24af4:	mov	r0, r9
   24af8:	add	r1, sp, #48	; 0x30
   24afc:	bl	2728 <InflateSkipData>
   24b00:	ldr	ip, [sp, #32]
   24b04:	add	r3, sp, #104	; 0x68
   24b08:	ldr	r4, [sp, #28]
   24b0c:	ldr	r0, [r3, r6, lsl #2]
   24b10:	ldr	r1, [ip, r6, lsl #2]
   24b14:	mla	r8, r1, r0, r8
   24b18:	ldr	r2, [fp, #12]
   24b1c:	add	r1, r6, #2
   24b20:	add	r0, r6, #1
   24b24:	cmp	r1, r2
   24b28:	blt	24a40 <ReadCompressedDataSlabN+0x2fc8>
   24b2c:	b	24b58 <ReadCompressedDataSlabN+0x30e0>
   24b30:	ldr	r0, [sp, #8]
   24b34:	ldr	r6, [r0, r6, lsl #2]
   24b38:	cmp	r6, #0
   24b3c:	beq	24b58 <ReadCompressedDataSlabN+0x30e0>
   24b40:	ldr	r2, [fp, #8]
   24b44:	mov	r0, r9
   24b48:	add	r1, sp, #48	; 0x30
   24b4c:	mov	r3, r6
   24b50:	bl	2728 <InflateSkipData>
   24b54:	add	r8, r6, r8
   24b58:	ldr	r0, [sl]
   24b5c:	ldr	r1, [sp, #20]
   24b60:	mov	r9, #1
   24b64:	add	r1, r0, r1
   24b68:	ldr	r0, [sp, #16]
   24b6c:	str	r1, [sp, #20]
   24b70:	cmp	r1, r0
   24b74:	blt	248cc <ReadCompressedDataSlabN+0x2e54>
   24b78:	b	26074 <ReadCompressedDataSlabN+0x45fc>
   24b7c:	ldr	r0, [sp, #28]
   24b80:	cmp	r0, #1
   24b84:	blt	26074 <ReadCompressedDataSlabN+0x45fc>
   24b88:	ldr	r0, [fp, #20]
   24b8c:	mov	r2, #1
   24b90:	add	r1, sp, #48	; 0x30
   24b94:	add	r8, r0, #4
   24b98:	ldr	r0, [fp, #28]
   24b9c:	str	r8, [sp, #16]
   24ba0:	add	r0, r0, #4
   24ba4:	str	r0, [sp, #40]	; 0x28
   24ba8:	sub	r0, fp, #112	; 0x70
   24bac:	orr	r4, r0, #4
   24bb0:	sub	r0, fp, #72	; 0x48
   24bb4:	orr	r0, r0, #4
   24bb8:	str	r4, [sp, #32]
   24bbc:	str	r0, [sp, #8]
   24bc0:	ldr	r0, [sp, #36]	; 0x24
   24bc4:	add	r0, r0, #4
   24bc8:	str	r0, [sp, #12]
   24bcc:	mov	r0, #0
   24bd0:	str	r0, [sp, #24]
   24bd4:	ldr	r5, [fp, #20]
   24bd8:	ldr	r3, [r5]
   24bdc:	cmp	r3, #0
   24be0:	beq	24c1c <ReadCompressedDataSlabN+0x31a4>
   24be4:	mov	r7, r5
   24be8:	ldr	r5, [sp, #44]	; 0x2c
   24bec:	ldr	r6, [fp, #8]
   24bf0:	mov	r4, r1
   24bf4:	mov	r0, r5
   24bf8:	mov	r2, r6
   24bfc:	bl	2728 <InflateSkipData>
   24c00:	ldr	r0, [r7]
   24c04:	ldr	sl, [fp, #28]
   24c08:	mov	r3, r6
   24c0c:	mov	r2, #1
   24c10:	add	r9, r0, r9
   24c14:	ldr	r0, [sp, #36]	; 0x24
   24c18:	b	24c34 <ReadCompressedDataSlabN+0x31bc>
   24c1c:	ldr	r6, [fp, #8]
   24c20:	ldr	r0, [sp, #36]	; 0x24
   24c24:	ldr	r5, [sp, #44]	; 0x2c
   24c28:	ldr	sl, [fp, #28]
   24c2c:	mov	r4, r1
   24c30:	mov	r3, r6
   24c34:	ldr	r6, [sp, #24]
   24c38:	ldr	r8, [sl]
   24c3c:	str	r2, [sp]
   24c40:	mov	r1, r4
   24c44:	str	r9, [sp, #20]
   24c48:	add	r2, r0, r6, lsl #2
   24c4c:	mov	r0, r5
   24c50:	bl	8ef4 <ReadCompressedSingleData>
   24c54:	cmp	r8, #2
   24c58:	blt	24ce0 <ReadCompressedDataSlabN+0x3268>
   24c5c:	ldr	r0, [sp, #12]
   24c60:	ldr	r9, [sp, #20]
   24c64:	ldr	r1, [fp, #24]
   24c68:	mov	r5, #0
   24c6c:	add	r6, r0, r6, lsl #2
   24c70:	ldr	r0, [r1]
   24c74:	ldr	r7, [fp, #8]
   24c78:	ldr	r8, [sp, #44]	; 0x2c
   24c7c:	add	r1, sp, #48	; 0x30
   24c80:	sub	r3, r0, #1
   24c84:	mov	r0, r8
   24c88:	mov	r2, r7
   24c8c:	bl	2728 <InflateSkipData>
   24c90:	ldr	r0, [fp, #24]
   24c94:	ldr	r4, [sl]
   24c98:	add	r1, sp, #48	; 0x30
   24c9c:	mov	r2, r6
   24ca0:	mov	r3, r7
   24ca4:	ldr	sl, [r0]
   24ca8:	mov	r0, #1
   24cac:	str	r0, [sp]
   24cb0:	mov	r0, r8
   24cb4:	bl	8ef4 <ReadCompressedSingleData>
   24cb8:	add	r9, sl, r9
   24cbc:	ldr	sl, [fp, #24]
   24cc0:	add	r5, r5, #1
   24cc4:	sub	r0, r4, #1
   24cc8:	add	r6, r6, #4
   24ccc:	cmp	r5, r0
   24cd0:	mov	r1, sl
   24cd4:	ldr	sl, [fp, #28]
   24cd8:	blt	24c70 <ReadCompressedDataSlabN+0x31f8>
   24cdc:	b	24ce8 <ReadCompressedDataSlabN+0x3270>
   24ce0:	ldr	r9, [sp, #20]
   24ce4:	ldr	r1, [fp, #24]
   24ce8:	ldr	r0, [fp, #16]
   24cec:	ldr	r2, [sl]
   24cf0:	ldr	r1, [r1]
   24cf4:	ldr	r0, [r0]
   24cf8:	sub	r2, r2, #1
   24cfc:	mls	r0, r2, r1, r0
   24d00:	ldr	r1, [fp, #20]
   24d04:	ldr	r2, [fp, #8]
   24d08:	ldr	r1, [r1]
   24d0c:	sub	r4, r0, r1
   24d10:	ldr	r0, [sp, #44]	; 0x2c
   24d14:	add	r1, sp, #48	; 0x30
   24d18:	sub	r3, r4, #1
   24d1c:	bl	2728 <InflateSkipData>
   24d20:	ldr	r0, [fp, #12]
   24d24:	add	r9, r4, r9
   24d28:	cmp	r0, #2
   24d2c:	blt	24e50 <ReadCompressedDataSlabN+0x33d8>
   24d30:	ldr	r8, [sp, #16]
   24d34:	ldr	r4, [sp, #32]
   24d38:	mov	r0, #0
   24d3c:	add	r3, sp, #104	; 0x68
   24d40:	mov	r6, r0
   24d44:	ldr	r0, [r4, r0, lsl #2]
   24d48:	ldr	r1, [sp, #40]	; 0x28
   24d4c:	add	r0, r0, #1
   24d50:	str	r0, [r4, r6, lsl #2]
   24d54:	ldr	r1, [r1, r6, lsl #2]
   24d58:	sdiv	r2, r0, r1
   24d5c:	mls	r0, r2, r1, r0
   24d60:	cmp	r0, #0
   24d64:	bne	24e28 <ReadCompressedDataSlabN+0x33b0>
   24d68:	mov	r0, #0
   24d6c:	add	r5, r3, r6, lsl #2
   24d70:	str	r0, [r4, r6, lsl #2]
   24d74:	ldr	r0, [r5, #4]
   24d78:	sdiv	r1, r9, r0
   24d7c:	mls	r1, r1, r0, r9
   24d80:	cmp	r1, #0
   24d84:	beq	24dd8 <ReadCompressedDataSlabN+0x3360>
   24d88:	ldr	r2, [r3, r6, lsl #2]
   24d8c:	ldr	r3, [r8, r6, lsl #2]
   24d90:	sub	r0, r0, r1
   24d94:	add	r1, sp, #48	; 0x30
   24d98:	mla	r3, r3, r2, r0
   24d9c:	ldr	r0, [sp, #44]	; 0x2c
   24da0:	ldr	r2, [fp, #8]
   24da4:	bl	2728 <InflateSkipData>
   24da8:	ldr	r0, [r5, #4]
   24dac:	add	r3, sp, #104	; 0x68
   24db0:	ldr	r4, [sp, #32]
   24db4:	sdiv	r2, r9, r0
   24db8:	add	r1, r0, r9
   24dbc:	mul	r0, r2, r0
   24dc0:	ldr	r2, [r8, r6, lsl #2]
   24dc4:	sub	r0, r0, r9
   24dc8:	add	r0, r1, r0
   24dcc:	ldr	r1, [r3, r6, lsl #2]
   24dd0:	mla	r9, r2, r1, r0
   24dd4:	b	24e10 <ReadCompressedDataSlabN+0x3398>
   24dd8:	ldr	r0, [r8, r6, lsl #2]
   24ddc:	cmp	r0, #0
   24de0:	beq	24e10 <ReadCompressedDataSlabN+0x3398>
   24de4:	ldr	r1, [r3, r6, lsl #2]
   24de8:	ldr	r2, [fp, #8]
   24dec:	mul	r3, r1, r0
   24df0:	ldr	r0, [sp, #44]	; 0x2c
   24df4:	add	r1, sp, #48	; 0x30
   24df8:	bl	2728 <InflateSkipData>
   24dfc:	add	r3, sp, #104	; 0x68
   24e00:	ldr	r1, [r8, r6, lsl #2]
   24e04:	ldr	r4, [sp, #32]
   24e08:	ldr	r0, [r3, r6, lsl #2]
   24e0c:	mla	r9, r1, r0, r9
   24e10:	ldr	r2, [fp, #12]
   24e14:	add	r1, r6, #2
   24e18:	add	r0, r6, #1
   24e1c:	cmp	r1, r2
   24e20:	blt	24d40 <ReadCompressedDataSlabN+0x32c8>
   24e24:	b	24e50 <ReadCompressedDataSlabN+0x33d8>
   24e28:	ldr	r0, [sp, #8]
   24e2c:	ldr	r6, [r0, r6, lsl #2]
   24e30:	cmp	r6, #0
   24e34:	beq	24e50 <ReadCompressedDataSlabN+0x33d8>
   24e38:	ldr	r0, [sp, #44]	; 0x2c
   24e3c:	ldr	r2, [fp, #8]
   24e40:	add	r1, sp, #48	; 0x30
   24e44:	mov	r3, r6
   24e48:	bl	2728 <InflateSkipData>
   24e4c:	add	r9, r6, r9
   24e50:	ldr	r0, [sl]
   24e54:	ldr	r1, [sp, #24]
   24e58:	mov	r2, #1
   24e5c:	add	r1, r0, r1
   24e60:	ldr	r0, [sp, #28]
   24e64:	str	r1, [sp, #24]
   24e68:	cmp	r1, r0
   24e6c:	add	r1, sp, #48	; 0x30
   24e70:	blt	24bd4 <ReadCompressedDataSlabN+0x315c>
   24e74:	b	26074 <ReadCompressedDataSlabN+0x45fc>
   24e78:	ldr	r0, [sp, #28]
   24e7c:	cmp	r0, #1
   24e80:	blt	26074 <ReadCompressedDataSlabN+0x45fc>
   24e84:	ldr	r0, [fp, #20]
   24e88:	mov	r2, #1
   24e8c:	add	r1, sp, #48	; 0x30
   24e90:	add	r8, r0, #4
   24e94:	ldr	r0, [fp, #28]
   24e98:	str	r8, [sp, #16]
   24e9c:	add	r0, r0, #4
   24ea0:	str	r0, [sp, #40]	; 0x28
   24ea4:	sub	r0, fp, #112	; 0x70
   24ea8:	orr	r4, r0, #4
   24eac:	sub	r0, fp, #72	; 0x48
   24eb0:	orr	r0, r0, #4
   24eb4:	str	r4, [sp, #32]
   24eb8:	str	r0, [sp, #8]
   24ebc:	ldr	r0, [sp, #36]	; 0x24
   24ec0:	add	r0, r0, #2
   24ec4:	str	r0, [sp, #12]
   24ec8:	mov	r0, #0
   24ecc:	str	r0, [sp, #20]
   24ed0:	ldr	r5, [fp, #20]
   24ed4:	ldr	r3, [r5]
   24ed8:	cmp	r3, #0
   24edc:	beq	24f18 <ReadCompressedDataSlabN+0x34a0>
   24ee0:	mov	r7, r5
   24ee4:	ldr	r5, [sp, #44]	; 0x2c
   24ee8:	ldr	r6, [fp, #8]
   24eec:	mov	r4, r1
   24ef0:	mov	r0, r5
   24ef4:	mov	r2, r6
   24ef8:	bl	2728 <InflateSkipData>
   24efc:	ldr	r0, [r7]
   24f00:	ldr	sl, [fp, #28]
   24f04:	mov	r3, r6
   24f08:	mov	r2, #1
   24f0c:	add	r9, r0, r9
   24f10:	ldr	r0, [sp, #36]	; 0x24
   24f14:	b	24f30 <ReadCompressedDataSlabN+0x34b8>
   24f18:	ldr	r6, [fp, #8]
   24f1c:	ldr	r0, [sp, #36]	; 0x24
   24f20:	ldr	r5, [sp, #44]	; 0x2c
   24f24:	ldr	sl, [fp, #28]
   24f28:	mov	r4, r1
   24f2c:	mov	r3, r6
   24f30:	ldr	r6, [sp, #20]
   24f34:	ldr	r8, [sl]
   24f38:	str	r2, [sp]
   24f3c:	mov	r1, r4
   24f40:	str	r9, [sp, #24]
   24f44:	add	r2, r0, r6, lsl #1
   24f48:	mov	r0, r5
   24f4c:	bl	15ebc <ReadCompressedInt16Data>
   24f50:	cmp	r8, #2
   24f54:	blt	24fdc <ReadCompressedDataSlabN+0x3564>
   24f58:	ldr	r0, [sp, #12]
   24f5c:	ldr	r9, [sp, #24]
   24f60:	ldr	r1, [fp, #24]
   24f64:	mov	r5, #0
   24f68:	add	r6, r0, r6, lsl #1
   24f6c:	ldr	r0, [r1]
   24f70:	ldr	r7, [fp, #8]
   24f74:	ldr	r8, [sp, #44]	; 0x2c
   24f78:	add	r1, sp, #48	; 0x30
   24f7c:	sub	r3, r0, #1
   24f80:	mov	r0, r8
   24f84:	mov	r2, r7
   24f88:	bl	2728 <InflateSkipData>
   24f8c:	ldr	r0, [fp, #24]
   24f90:	ldr	r4, [sl]
   24f94:	add	r1, sp, #48	; 0x30
   24f98:	mov	r2, r6
   24f9c:	mov	r3, r7
   24fa0:	ldr	sl, [r0]
   24fa4:	mov	r0, #1
   24fa8:	str	r0, [sp]
   24fac:	mov	r0, r8
   24fb0:	bl	15ebc <ReadCompressedInt16Data>
   24fb4:	add	r9, sl, r9
   24fb8:	ldr	sl, [fp, #24]
   24fbc:	add	r5, r5, #1
   24fc0:	sub	r0, r4, #1
   24fc4:	add	r6, r6, #2
   24fc8:	cmp	r5, r0
   24fcc:	mov	r1, sl
   24fd0:	ldr	sl, [fp, #28]
   24fd4:	blt	24f6c <ReadCompressedDataSlabN+0x34f4>
   24fd8:	b	24fe4 <ReadCompressedDataSlabN+0x356c>
   24fdc:	ldr	r9, [sp, #24]
   24fe0:	ldr	r1, [fp, #24]
   24fe4:	ldr	r0, [fp, #16]
   24fe8:	ldr	r2, [sl]
   24fec:	ldr	r1, [r1]
   24ff0:	ldr	r0, [r0]
   24ff4:	sub	r2, r2, #1
   24ff8:	mls	r0, r2, r1, r0
   24ffc:	ldr	r1, [fp, #20]
   25000:	ldr	r2, [fp, #8]
   25004:	ldr	r1, [r1]
   25008:	sub	r4, r0, r1
   2500c:	ldr	r0, [sp, #44]	; 0x2c
   25010:	add	r1, sp, #48	; 0x30
   25014:	sub	r3, r4, #1
   25018:	bl	2728 <InflateSkipData>
   2501c:	ldr	r0, [fp, #12]
   25020:	add	r9, r4, r9
   25024:	cmp	r0, #2
   25028:	blt	2514c <ReadCompressedDataSlabN+0x36d4>
   2502c:	ldr	r8, [sp, #16]
   25030:	ldr	r4, [sp, #32]
   25034:	mov	r0, #0
   25038:	add	r3, sp, #104	; 0x68
   2503c:	mov	r6, r0
   25040:	ldr	r0, [r4, r0, lsl #2]
   25044:	ldr	r1, [sp, #40]	; 0x28
   25048:	add	r0, r0, #1
   2504c:	str	r0, [r4, r6, lsl #2]
   25050:	ldr	r1, [r1, r6, lsl #2]
   25054:	sdiv	r2, r0, r1
   25058:	mls	r0, r2, r1, r0
   2505c:	cmp	r0, #0
   25060:	bne	25124 <ReadCompressedDataSlabN+0x36ac>
   25064:	mov	r0, #0
   25068:	add	r5, r3, r6, lsl #2
   2506c:	str	r0, [r4, r6, lsl #2]
   25070:	ldr	r0, [r5, #4]
   25074:	sdiv	r1, r9, r0
   25078:	mls	r1, r1, r0, r9
   2507c:	cmp	r1, #0
   25080:	beq	250d4 <ReadCompressedDataSlabN+0x365c>
   25084:	ldr	r2, [r3, r6, lsl #2]
   25088:	ldr	r3, [r8, r6, lsl #2]
   2508c:	sub	r0, r0, r1
   25090:	add	r1, sp, #48	; 0x30
   25094:	mla	r3, r3, r2, r0
   25098:	ldr	r0, [sp, #44]	; 0x2c
   2509c:	ldr	r2, [fp, #8]
   250a0:	bl	2728 <InflateSkipData>
   250a4:	ldr	r0, [r5, #4]
   250a8:	add	r3, sp, #104	; 0x68
   250ac:	ldr	r4, [sp, #32]
   250b0:	sdiv	r2, r9, r0
   250b4:	add	r1, r0, r9
   250b8:	mul	r0, r2, r0
   250bc:	ldr	r2, [r8, r6, lsl #2]
   250c0:	sub	r0, r0, r9
   250c4:	add	r0, r1, r0
   250c8:	ldr	r1, [r3, r6, lsl #2]
   250cc:	mla	r9, r2, r1, r0
   250d0:	b	2510c <ReadCompressedDataSlabN+0x3694>
   250d4:	ldr	r0, [r8, r6, lsl #2]
   250d8:	cmp	r0, #0
   250dc:	beq	2510c <ReadCompressedDataSlabN+0x3694>
   250e0:	ldr	r1, [r3, r6, lsl #2]
   250e4:	ldr	r2, [fp, #8]
   250e8:	mul	r3, r1, r0
   250ec:	ldr	r0, [sp, #44]	; 0x2c
   250f0:	add	r1, sp, #48	; 0x30
   250f4:	bl	2728 <InflateSkipData>
   250f8:	add	r3, sp, #104	; 0x68
   250fc:	ldr	r1, [r8, r6, lsl #2]
   25100:	ldr	r4, [sp, #32]
   25104:	ldr	r0, [r3, r6, lsl #2]
   25108:	mla	r9, r1, r0, r9
   2510c:	ldr	r2, [fp, #12]
   25110:	add	r1, r6, #2
   25114:	add	r0, r6, #1
   25118:	cmp	r1, r2
   2511c:	blt	2503c <ReadCompressedDataSlabN+0x35c4>
   25120:	b	2514c <ReadCompressedDataSlabN+0x36d4>
   25124:	ldr	r0, [sp, #8]
   25128:	ldr	r6, [r0, r6, lsl #2]
   2512c:	cmp	r6, #0
   25130:	beq	2514c <ReadCompressedDataSlabN+0x36d4>
   25134:	ldr	r0, [sp, #44]	; 0x2c
   25138:	ldr	r2, [fp, #8]
   2513c:	add	r1, sp, #48	; 0x30
   25140:	mov	r3, r6
   25144:	bl	2728 <InflateSkipData>
   25148:	add	r9, r6, r9
   2514c:	ldr	r0, [sl]
   25150:	ldr	r1, [sp, #20]
   25154:	mov	r2, #1
   25158:	add	r1, r0, r1
   2515c:	ldr	r0, [sp, #28]
   25160:	str	r1, [sp, #20]
   25164:	cmp	r1, r0
   25168:	add	r1, sp, #48	; 0x30
   2516c:	blt	24ed0 <ReadCompressedDataSlabN+0x3458>
   25170:	b	26074 <ReadCompressedDataSlabN+0x45fc>
   25174:	ldr	r0, [sp, #28]
   25178:	cmp	r0, #1
   2517c:	blt	26074 <ReadCompressedDataSlabN+0x45fc>
   25180:	ldr	r0, [fp, #20]
   25184:	mov	r2, #1
   25188:	add	r1, sp, #48	; 0x30
   2518c:	add	r8, r0, #4
   25190:	ldr	r0, [fp, #28]
   25194:	str	r8, [sp, #16]
   25198:	add	r0, r0, #4
   2519c:	str	r0, [sp, #40]	; 0x28
   251a0:	sub	r0, fp, #112	; 0x70
   251a4:	orr	r4, r0, #4
   251a8:	sub	r0, fp, #72	; 0x48
   251ac:	orr	r0, r0, #4
   251b0:	str	r4, [sp, #32]
   251b4:	str	r0, [sp, #8]
   251b8:	ldr	r0, [sp, #36]	; 0x24
   251bc:	add	r0, r0, #2
   251c0:	str	r0, [sp, #12]
   251c4:	mov	r0, #0
   251c8:	str	r0, [sp, #20]
   251cc:	ldr	r5, [fp, #20]
   251d0:	ldr	r3, [r5]
   251d4:	cmp	r3, #0
   251d8:	beq	25214 <ReadCompressedDataSlabN+0x379c>
   251dc:	mov	r7, r5
   251e0:	ldr	r5, [sp, #44]	; 0x2c
   251e4:	ldr	r6, [fp, #8]
   251e8:	mov	r4, r1
   251ec:	mov	r0, r5
   251f0:	mov	r2, r6
   251f4:	bl	2728 <InflateSkipData>
   251f8:	ldr	r0, [r7]
   251fc:	ldr	sl, [fp, #28]
   25200:	mov	r3, r6
   25204:	mov	r2, #1
   25208:	add	r9, r0, r9
   2520c:	ldr	r0, [sp, #36]	; 0x24
   25210:	b	2522c <ReadCompressedDataSlabN+0x37b4>
   25214:	ldr	r6, [fp, #8]
   25218:	ldr	r0, [sp, #36]	; 0x24
   2521c:	ldr	r5, [sp, #44]	; 0x2c
   25220:	ldr	sl, [fp, #28]
   25224:	mov	r4, r1
   25228:	mov	r3, r6
   2522c:	ldr	r6, [sp, #20]
   25230:	ldr	r8, [sl]
   25234:	str	r2, [sp]
   25238:	mov	r1, r4
   2523c:	str	r9, [sp, #24]
   25240:	add	r2, r0, r6, lsl #1
   25244:	mov	r0, r5
   25248:	bl	18688 <ReadCompressedUInt16Data>
   2524c:	cmp	r8, #2
   25250:	blt	252d8 <ReadCompressedDataSlabN+0x3860>
   25254:	ldr	r0, [sp, #12]
   25258:	ldr	r9, [sp, #24]
   2525c:	ldr	r1, [fp, #24]
   25260:	mov	r5, #0
   25264:	add	r6, r0, r6, lsl #1
   25268:	ldr	r0, [r1]
   2526c:	ldr	r7, [fp, #8]
   25270:	ldr	r8, [sp, #44]	; 0x2c
   25274:	add	r1, sp, #48	; 0x30
   25278:	sub	r3, r0, #1
   2527c:	mov	r0, r8
   25280:	mov	r2, r7
   25284:	bl	2728 <InflateSkipData>
   25288:	ldr	r0, [fp, #24]
   2528c:	ldr	r4, [sl]
   25290:	add	r1, sp, #48	; 0x30
   25294:	mov	r2, r6
   25298:	mov	r3, r7
   2529c:	ldr	sl, [r0]
   252a0:	mov	r0, #1
   252a4:	str	r0, [sp]
   252a8:	mov	r0, r8
   252ac:	bl	18688 <ReadCompressedUInt16Data>
   252b0:	add	r9, sl, r9
   252b4:	ldr	sl, [fp, #24]
   252b8:	add	r5, r5, #1
   252bc:	sub	r0, r4, #1
   252c0:	add	r6, r6, #2
   252c4:	cmp	r5, r0
   252c8:	mov	r1, sl
   252cc:	ldr	sl, [fp, #28]
   252d0:	blt	25268 <ReadCompressedDataSlabN+0x37f0>
   252d4:	b	252e0 <ReadCompressedDataSlabN+0x3868>
   252d8:	ldr	r9, [sp, #24]
   252dc:	ldr	r1, [fp, #24]
   252e0:	ldr	r0, [fp, #16]
   252e4:	ldr	r2, [sl]
   252e8:	ldr	r1, [r1]
   252ec:	ldr	r0, [r0]
   252f0:	sub	r2, r2, #1
   252f4:	mls	r0, r2, r1, r0
   252f8:	ldr	r1, [fp, #20]
   252fc:	ldr	r2, [fp, #8]
   25300:	ldr	r1, [r1]
   25304:	sub	r4, r0, r1
   25308:	ldr	r0, [sp, #44]	; 0x2c
   2530c:	add	r1, sp, #48	; 0x30
   25310:	sub	r3, r4, #1
   25314:	bl	2728 <InflateSkipData>
   25318:	ldr	r0, [fp, #12]
   2531c:	add	r9, r4, r9
   25320:	cmp	r0, #2
   25324:	blt	25448 <ReadCompressedDataSlabN+0x39d0>
   25328:	ldr	r8, [sp, #16]
   2532c:	ldr	r4, [sp, #32]
   25330:	mov	r0, #0
   25334:	add	r3, sp, #104	; 0x68
   25338:	mov	r6, r0
   2533c:	ldr	r0, [r4, r0, lsl #2]
   25340:	ldr	r1, [sp, #40]	; 0x28
   25344:	add	r0, r0, #1
   25348:	str	r0, [r4, r6, lsl #2]
   2534c:	ldr	r1, [r1, r6, lsl #2]
   25350:	sdiv	r2, r0, r1
   25354:	mls	r0, r2, r1, r0
   25358:	cmp	r0, #0
   2535c:	bne	25420 <ReadCompressedDataSlabN+0x39a8>
   25360:	mov	r0, #0
   25364:	add	r5, r3, r6, lsl #2
   25368:	str	r0, [r4, r6, lsl #2]
   2536c:	ldr	r0, [r5, #4]
   25370:	sdiv	r1, r9, r0
   25374:	mls	r1, r1, r0, r9
   25378:	cmp	r1, #0
   2537c:	beq	253d0 <ReadCompressedDataSlabN+0x3958>
   25380:	ldr	r2, [r3, r6, lsl #2]
   25384:	ldr	r3, [r8, r6, lsl #2]
   25388:	sub	r0, r0, r1
   2538c:	add	r1, sp, #48	; 0x30
   25390:	mla	r3, r3, r2, r0
   25394:	ldr	r0, [sp, #44]	; 0x2c
   25398:	ldr	r2, [fp, #8]
   2539c:	bl	2728 <InflateSkipData>
   253a0:	ldr	r0, [r5, #4]
   253a4:	add	r3, sp, #104	; 0x68
   253a8:	ldr	r4, [sp, #32]
   253ac:	sdiv	r2, r9, r0
   253b0:	add	r1, r0, r9
   253b4:	mul	r0, r2, r0
   253b8:	ldr	r2, [r8, r6, lsl #2]
   253bc:	sub	r0, r0, r9
   253c0:	add	r0, r1, r0
   253c4:	ldr	r1, [r3, r6, lsl #2]
   253c8:	mla	r9, r2, r1, r0
   253cc:	b	25408 <ReadCompressedDataSlabN+0x3990>
   253d0:	ldr	r0, [r8, r6, lsl #2]
   253d4:	cmp	r0, #0
   253d8:	beq	25408 <ReadCompressedDataSlabN+0x3990>
   253dc:	ldr	r1, [r3, r6, lsl #2]
   253e0:	ldr	r2, [fp, #8]
   253e4:	mul	r3, r1, r0
   253e8:	ldr	r0, [sp, #44]	; 0x2c
   253ec:	add	r1, sp, #48	; 0x30
   253f0:	bl	2728 <InflateSkipData>
   253f4:	add	r3, sp, #104	; 0x68
   253f8:	ldr	r1, [r8, r6, lsl #2]
   253fc:	ldr	r4, [sp, #32]
   25400:	ldr	r0, [r3, r6, lsl #2]
   25404:	mla	r9, r1, r0, r9
   25408:	ldr	r2, [fp, #12]
   2540c:	add	r1, r6, #2
   25410:	add	r0, r6, #1
   25414:	cmp	r1, r2
   25418:	blt	25338 <ReadCompressedDataSlabN+0x38c0>
   2541c:	b	25448 <ReadCompressedDataSlabN+0x39d0>
   25420:	ldr	r0, [sp, #8]
   25424:	ldr	r6, [r0, r6, lsl #2]
   25428:	cmp	r6, #0
   2542c:	beq	25448 <ReadCompressedDataSlabN+0x39d0>
   25430:	ldr	r0, [sp, #44]	; 0x2c
   25434:	ldr	r2, [fp, #8]
   25438:	add	r1, sp, #48	; 0x30
   2543c:	mov	r3, r6
   25440:	bl	2728 <InflateSkipData>
   25444:	add	r9, r6, r9
   25448:	ldr	r0, [sl]
   2544c:	ldr	r1, [sp, #20]
   25450:	mov	r2, #1
   25454:	add	r1, r0, r1
   25458:	ldr	r0, [sp, #28]
   2545c:	str	r1, [sp, #20]
   25460:	cmp	r1, r0
   25464:	add	r1, sp, #48	; 0x30
   25468:	blt	251cc <ReadCompressedDataSlabN+0x3754>
   2546c:	b	26074 <ReadCompressedDataSlabN+0x45fc>
   25470:	ldr	r0, [sp, #28]
   25474:	cmp	r0, #1
   25478:	blt	26074 <ReadCompressedDataSlabN+0x45fc>
   2547c:	ldr	r0, [fp, #20]
   25480:	mov	r2, #1
   25484:	add	r1, sp, #48	; 0x30
   25488:	add	r8, r0, #4
   2548c:	ldr	r0, [fp, #28]
   25490:	str	r8, [sp, #16]
   25494:	add	r0, r0, #4
   25498:	str	r0, [sp, #40]	; 0x28
   2549c:	sub	r0, fp, #112	; 0x70
   254a0:	orr	r4, r0, #4
   254a4:	sub	r0, fp, #72	; 0x48
   254a8:	orr	r0, r0, #4
   254ac:	str	r4, [sp, #32]
   254b0:	str	r0, [sp, #8]
   254b4:	ldr	r0, [sp, #36]	; 0x24
   254b8:	add	r0, r0, #4
   254bc:	str	r0, [sp, #12]
   254c0:	mov	r0, #0
   254c4:	str	r0, [sp, #20]
   254c8:	ldr	r5, [fp, #20]
   254cc:	ldr	r3, [r5]
   254d0:	cmp	r3, #0
   254d4:	beq	25510 <ReadCompressedDataSlabN+0x3a98>
   254d8:	mov	r7, r5
   254dc:	ldr	r5, [sp, #44]	; 0x2c
   254e0:	ldr	r6, [fp, #8]
   254e4:	mov	r4, r1
   254e8:	mov	r0, r5
   254ec:	mov	r2, r6
   254f0:	bl	2728 <InflateSkipData>
   254f4:	ldr	r0, [r7]
   254f8:	ldr	sl, [fp, #28]
   254fc:	mov	r3, r6
   25500:	mov	r2, #1
   25504:	add	r9, r0, r9
   25508:	ldr	r0, [sp, #36]	; 0x24
   2550c:	b	25528 <ReadCompressedDataSlabN+0x3ab0>
   25510:	ldr	r6, [fp, #8]
   25514:	ldr	r0, [sp, #36]	; 0x24
   25518:	ldr	r5, [sp, #44]	; 0x2c
   2551c:	ldr	sl, [fp, #28]
   25520:	mov	r4, r1
   25524:	mov	r3, r6
   25528:	ldr	r6, [sp, #20]
   2552c:	ldr	r8, [sl]
   25530:	str	r2, [sp]
   25534:	mov	r1, r4
   25538:	str	r9, [sp, #24]
   2553c:	add	r2, r0, r6, lsl #2
   25540:	mov	r0, r5
   25544:	bl	10624 <ReadCompressedInt32Data>
   25548:	cmp	r8, #2
   2554c:	blt	255d4 <ReadCompressedDataSlabN+0x3b5c>
   25550:	ldr	r0, [sp, #12]
   25554:	ldr	r9, [sp, #24]
   25558:	ldr	r1, [fp, #24]
   2555c:	mov	r5, #0
   25560:	add	r6, r0, r6, lsl #2
   25564:	ldr	r0, [r1]
   25568:	ldr	r7, [fp, #8]
   2556c:	ldr	r8, [sp, #44]	; 0x2c
   25570:	add	r1, sp, #48	; 0x30
   25574:	sub	r3, r0, #1
   25578:	mov	r0, r8
   2557c:	mov	r2, r7
   25580:	bl	2728 <InflateSkipData>
   25584:	ldr	r0, [fp, #24]
   25588:	ldr	r4, [sl]
   2558c:	add	r1, sp, #48	; 0x30
   25590:	mov	r2, r6
   25594:	mov	r3, r7
   25598:	ldr	sl, [r0]
   2559c:	mov	r0, #1
   255a0:	str	r0, [sp]
   255a4:	mov	r0, r8
   255a8:	bl	10624 <ReadCompressedInt32Data>
   255ac:	add	r9, sl, r9
   255b0:	ldr	sl, [fp, #24]
   255b4:	add	r5, r5, #1
   255b8:	sub	r0, r4, #1
   255bc:	add	r6, r6, #4
   255c0:	cmp	r5, r0
   255c4:	mov	r1, sl
   255c8:	ldr	sl, [fp, #28]
   255cc:	blt	25564 <ReadCompressedDataSlabN+0x3aec>
   255d0:	b	255dc <ReadCompressedDataSlabN+0x3b64>
   255d4:	ldr	r9, [sp, #24]
   255d8:	ldr	r1, [fp, #24]
   255dc:	ldr	r0, [fp, #16]
   255e0:	ldr	r2, [sl]
   255e4:	ldr	r1, [r1]
   255e8:	ldr	r0, [r0]
   255ec:	sub	r2, r2, #1
   255f0:	mls	r0, r2, r1, r0
   255f4:	ldr	r1, [fp, #20]
   255f8:	ldr	r2, [fp, #8]
   255fc:	ldr	r1, [r1]
   25600:	sub	r4, r0, r1
   25604:	ldr	r0, [sp, #44]	; 0x2c
   25608:	add	r1, sp, #48	; 0x30
   2560c:	sub	r3, r4, #1
   25610:	bl	2728 <InflateSkipData>
   25614:	ldr	r0, [fp, #12]
   25618:	add	r9, r4, r9
   2561c:	cmp	r0, #2
   25620:	blt	25744 <ReadCompressedDataSlabN+0x3ccc>
   25624:	ldr	r8, [sp, #16]
   25628:	ldr	r4, [sp, #32]
   2562c:	mov	r0, #0
   25630:	add	r3, sp, #104	; 0x68
   25634:	mov	r6, r0
   25638:	ldr	r0, [r4, r0, lsl #2]
   2563c:	ldr	r1, [sp, #40]	; 0x28
   25640:	add	r0, r0, #1
   25644:	str	r0, [r4, r6, lsl #2]
   25648:	ldr	r1, [r1, r6, lsl #2]
   2564c:	sdiv	r2, r0, r1
   25650:	mls	r0, r2, r1, r0
   25654:	cmp	r0, #0
   25658:	bne	2571c <ReadCompressedDataSlabN+0x3ca4>
   2565c:	mov	r0, #0
   25660:	add	r5, r3, r6, lsl #2
   25664:	str	r0, [r4, r6, lsl #2]
   25668:	ldr	r0, [r5, #4]
   2566c:	sdiv	r1, r9, r0
   25670:	mls	r1, r1, r0, r9
   25674:	cmp	r1, #0
   25678:	beq	256cc <ReadCompressedDataSlabN+0x3c54>
   2567c:	ldr	r2, [r3, r6, lsl #2]
   25680:	ldr	r3, [r8, r6, lsl #2]
   25684:	sub	r0, r0, r1
   25688:	add	r1, sp, #48	; 0x30
   2568c:	mla	r3, r3, r2, r0
   25690:	ldr	r0, [sp, #44]	; 0x2c
   25694:	ldr	r2, [fp, #8]
   25698:	bl	2728 <InflateSkipData>
   2569c:	ldr	r0, [r5, #4]
   256a0:	add	r3, sp, #104	; 0x68
   256a4:	ldr	r4, [sp, #32]
   256a8:	sdiv	r2, r9, r0
   256ac:	add	r1, r0, r9
   256b0:	mul	r0, r2, r0
   256b4:	ldr	r2, [r8, r6, lsl #2]
   256b8:	sub	r0, r0, r9
   256bc:	add	r0, r1, r0
   256c0:	ldr	r1, [r3, r6, lsl #2]
   256c4:	mla	r9, r2, r1, r0
   256c8:	b	25704 <ReadCompressedDataSlabN+0x3c8c>
   256cc:	ldr	r0, [r8, r6, lsl #2]
   256d0:	cmp	r0, #0
   256d4:	beq	25704 <ReadCompressedDataSlabN+0x3c8c>
   256d8:	ldr	r1, [r3, r6, lsl #2]
   256dc:	ldr	r2, [fp, #8]
   256e0:	mul	r3, r1, r0
   256e4:	ldr	r0, [sp, #44]	; 0x2c
   256e8:	add	r1, sp, #48	; 0x30
   256ec:	bl	2728 <InflateSkipData>
   256f0:	add	r3, sp, #104	; 0x68
   256f4:	ldr	r1, [r8, r6, lsl #2]
   256f8:	ldr	r4, [sp, #32]
   256fc:	ldr	r0, [r3, r6, lsl #2]
   25700:	mla	r9, r1, r0, r9
   25704:	ldr	r2, [fp, #12]
   25708:	add	r1, r6, #2
   2570c:	add	r0, r6, #1
   25710:	cmp	r1, r2
   25714:	blt	25634 <ReadCompressedDataSlabN+0x3bbc>
   25718:	b	25744 <ReadCompressedDataSlabN+0x3ccc>
   2571c:	ldr	r0, [sp, #8]
   25720:	ldr	r6, [r0, r6, lsl #2]
   25724:	cmp	r6, #0
   25728:	beq	25744 <ReadCompressedDataSlabN+0x3ccc>
   2572c:	ldr	r0, [sp, #44]	; 0x2c
   25730:	ldr	r2, [fp, #8]
   25734:	add	r1, sp, #48	; 0x30
   25738:	mov	r3, r6
   2573c:	bl	2728 <InflateSkipData>
   25740:	add	r9, r6, r9
   25744:	ldr	r0, [sl]
   25748:	ldr	r1, [sp, #20]
   2574c:	mov	r2, #1
   25750:	add	r1, r0, r1
   25754:	ldr	r0, [sp, #28]
   25758:	str	r1, [sp, #20]
   2575c:	cmp	r1, r0
   25760:	add	r1, sp, #48	; 0x30
   25764:	blt	254c8 <ReadCompressedDataSlabN+0x3a50>
   25768:	b	26074 <ReadCompressedDataSlabN+0x45fc>
   2576c:	ldr	r0, [sp, #28]
   25770:	cmp	r0, #1
   25774:	blt	26074 <ReadCompressedDataSlabN+0x45fc>
   25778:	ldr	r0, [fp, #20]
   2577c:	mov	r2, #1
   25780:	add	r1, sp, #48	; 0x30
   25784:	add	r8, r0, #4
   25788:	ldr	r0, [fp, #28]
   2578c:	str	r8, [sp, #16]
   25790:	add	r0, r0, #4
   25794:	str	r0, [sp, #40]	; 0x28
   25798:	sub	r0, fp, #112	; 0x70
   2579c:	orr	r4, r0, #4
   257a0:	sub	r0, fp, #72	; 0x48
   257a4:	orr	r0, r0, #4
   257a8:	str	r4, [sp, #32]
   257ac:	str	r0, [sp, #8]
   257b0:	ldr	r0, [sp, #36]	; 0x24
   257b4:	add	r0, r0, #4
   257b8:	str	r0, [sp, #12]
   257bc:	mov	r0, #0
   257c0:	str	r0, [sp, #20]
   257c4:	ldr	r5, [fp, #20]
   257c8:	ldr	r3, [r5]
   257cc:	cmp	r3, #0
   257d0:	beq	2580c <ReadCompressedDataSlabN+0x3d94>
   257d4:	mov	r7, r5
   257d8:	ldr	r5, [sp, #44]	; 0x2c
   257dc:	ldr	r6, [fp, #8]
   257e0:	mov	r4, r1
   257e4:	mov	r0, r5
   257e8:	mov	r2, r6
   257ec:	bl	2728 <InflateSkipData>
   257f0:	ldr	r0, [r7]
   257f4:	ldr	sl, [fp, #28]
   257f8:	mov	r3, r6
   257fc:	mov	r2, #1
   25800:	add	r9, r0, r9
   25804:	ldr	r0, [sp, #36]	; 0x24
   25808:	b	25824 <ReadCompressedDataSlabN+0x3dac>
   2580c:	ldr	r6, [fp, #8]
   25810:	ldr	r0, [sp, #36]	; 0x24
   25814:	ldr	r5, [sp, #44]	; 0x2c
   25818:	ldr	sl, [fp, #28]
   2581c:	mov	r4, r1
   25820:	mov	r3, r6
   25824:	ldr	r6, [sp, #20]
   25828:	ldr	r8, [sl]
   2582c:	str	r2, [sp]
   25830:	mov	r1, r4
   25834:	str	r9, [sp, #24]
   25838:	add	r2, r0, r6, lsl #2
   2583c:	mov	r0, r5
   25840:	bl	136f0 <ReadCompressedUInt32Data>
   25844:	cmp	r8, #2
   25848:	blt	258d0 <ReadCompressedDataSlabN+0x3e58>
   2584c:	ldr	r0, [sp, #12]
   25850:	ldr	r9, [sp, #24]
   25854:	ldr	r1, [fp, #24]
   25858:	mov	r5, #0
   2585c:	add	r6, r0, r6, lsl #2
   25860:	ldr	r0, [r1]
   25864:	ldr	r7, [fp, #8]
   25868:	ldr	r8, [sp, #44]	; 0x2c
   2586c:	add	r1, sp, #48	; 0x30
   25870:	sub	r3, r0, #1
   25874:	mov	r0, r8
   25878:	mov	r2, r7
   2587c:	bl	2728 <InflateSkipData>
   25880:	ldr	r0, [fp, #24]
   25884:	ldr	r4, [sl]
   25888:	add	r1, sp, #48	; 0x30
   2588c:	mov	r2, r6
   25890:	mov	r3, r7
   25894:	ldr	sl, [r0]
   25898:	mov	r0, #1
   2589c:	str	r0, [sp]
   258a0:	mov	r0, r8
   258a4:	bl	136f0 <ReadCompressedUInt32Data>
   258a8:	add	r9, sl, r9
   258ac:	ldr	sl, [fp, #24]
   258b0:	add	r5, r5, #1
   258b4:	sub	r0, r4, #1
   258b8:	add	r6, r6, #4
   258bc:	cmp	r5, r0
   258c0:	mov	r1, sl
   258c4:	ldr	sl, [fp, #28]
   258c8:	blt	25860 <ReadCompressedDataSlabN+0x3de8>
   258cc:	b	258d8 <ReadCompressedDataSlabN+0x3e60>
   258d0:	ldr	r9, [sp, #24]
   258d4:	ldr	r1, [fp, #24]
   258d8:	ldr	r0, [fp, #16]
   258dc:	ldr	r2, [sl]
   258e0:	ldr	r1, [r1]
   258e4:	ldr	r0, [r0]
   258e8:	sub	r2, r2, #1
   258ec:	mls	r0, r2, r1, r0
   258f0:	ldr	r1, [fp, #20]
   258f4:	ldr	r2, [fp, #8]
   258f8:	ldr	r1, [r1]
   258fc:	sub	r4, r0, r1
   25900:	ldr	r0, [sp, #44]	; 0x2c
   25904:	add	r1, sp, #48	; 0x30
   25908:	sub	r3, r4, #1
   2590c:	bl	2728 <InflateSkipData>
   25910:	ldr	r0, [fp, #12]
   25914:	add	r9, r4, r9
   25918:	cmp	r0, #2
   2591c:	blt	25a40 <ReadCompressedDataSlabN+0x3fc8>
   25920:	ldr	r8, [sp, #16]
   25924:	ldr	r4, [sp, #32]
   25928:	mov	r0, #0
   2592c:	add	r3, sp, #104	; 0x68
   25930:	mov	r6, r0
   25934:	ldr	r0, [r4, r0, lsl #2]
   25938:	ldr	r1, [sp, #40]	; 0x28
   2593c:	add	r0, r0, #1
   25940:	str	r0, [r4, r6, lsl #2]
   25944:	ldr	r1, [r1, r6, lsl #2]
   25948:	sdiv	r2, r0, r1
   2594c:	mls	r0, r2, r1, r0
   25950:	cmp	r0, #0
   25954:	bne	25a18 <ReadCompressedDataSlabN+0x3fa0>
   25958:	mov	r0, #0
   2595c:	add	r5, r3, r6, lsl #2
   25960:	str	r0, [r4, r6, lsl #2]
   25964:	ldr	r0, [r5, #4]
   25968:	sdiv	r1, r9, r0
   2596c:	mls	r1, r1, r0, r9
   25970:	cmp	r1, #0
   25974:	beq	259c8 <ReadCompressedDataSlabN+0x3f50>
   25978:	ldr	r2, [r3, r6, lsl #2]
   2597c:	ldr	r3, [r8, r6, lsl #2]
   25980:	sub	r0, r0, r1
   25984:	add	r1, sp, #48	; 0x30
   25988:	mla	r3, r3, r2, r0
   2598c:	ldr	r0, [sp, #44]	; 0x2c
   25990:	ldr	r2, [fp, #8]
   25994:	bl	2728 <InflateSkipData>
   25998:	ldr	r0, [r5, #4]
   2599c:	add	r3, sp, #104	; 0x68
   259a0:	ldr	r4, [sp, #32]
   259a4:	sdiv	r2, r9, r0
   259a8:	add	r1, r0, r9
   259ac:	mul	r0, r2, r0
   259b0:	ldr	r2, [r8, r6, lsl #2]
   259b4:	sub	r0, r0, r9
   259b8:	add	r0, r1, r0
   259bc:	ldr	r1, [r3, r6, lsl #2]
   259c0:	mla	r9, r2, r1, r0
   259c4:	b	25a00 <ReadCompressedDataSlabN+0x3f88>
   259c8:	ldr	r0, [r8, r6, lsl #2]
   259cc:	cmp	r0, #0
   259d0:	beq	25a00 <ReadCompressedDataSlabN+0x3f88>
   259d4:	ldr	r1, [r3, r6, lsl #2]
   259d8:	ldr	r2, [fp, #8]
   259dc:	mul	r3, r1, r0
   259e0:	ldr	r0, [sp, #44]	; 0x2c
   259e4:	add	r1, sp, #48	; 0x30
   259e8:	bl	2728 <InflateSkipData>
   259ec:	add	r3, sp, #104	; 0x68
   259f0:	ldr	r1, [r8, r6, lsl #2]
   259f4:	ldr	r4, [sp, #32]
   259f8:	ldr	r0, [r3, r6, lsl #2]
   259fc:	mla	r9, r1, r0, r9
   25a00:	ldr	r2, [fp, #12]
   25a04:	add	r1, r6, #2
   25a08:	add	r0, r6, #1
   25a0c:	cmp	r1, r2
   25a10:	blt	25930 <ReadCompressedDataSlabN+0x3eb8>
   25a14:	b	25a40 <ReadCompressedDataSlabN+0x3fc8>
   25a18:	ldr	r0, [sp, #8]
   25a1c:	ldr	r6, [r0, r6, lsl #2]
   25a20:	cmp	r6, #0
   25a24:	beq	25a40 <ReadCompressedDataSlabN+0x3fc8>
   25a28:	ldr	r0, [sp, #44]	; 0x2c
   25a2c:	ldr	r2, [fp, #8]
   25a30:	add	r1, sp, #48	; 0x30
   25a34:	mov	r3, r6
   25a38:	bl	2728 <InflateSkipData>
   25a3c:	add	r9, r6, r9
   25a40:	ldr	r0, [sl]
   25a44:	ldr	r1, [sp, #20]
   25a48:	mov	r2, #1
   25a4c:	add	r1, r0, r1
   25a50:	ldr	r0, [sp, #28]
   25a54:	str	r1, [sp, #20]
   25a58:	cmp	r1, r0
   25a5c:	add	r1, sp, #48	; 0x30
   25a60:	blt	257c4 <ReadCompressedDataSlabN+0x3d4c>
   25a64:	b	26074 <ReadCompressedDataSlabN+0x45fc>
   25a68:	ldr	r0, [sp, #24]
   25a6c:	cmp	r0, #1
   25a70:	blt	26074 <ReadCompressedDataSlabN+0x45fc>
   25a74:	ldr	r0, [fp, #20]
   25a78:	mov	r8, #1
   25a7c:	add	r4, sp, #48	; 0x30
   25a80:	add	r0, r0, #4
   25a84:	str	r0, [sp, #12]
   25a88:	ldr	r0, [fp, #28]
   25a8c:	add	r0, r0, #4
   25a90:	str	r0, [sp, #32]
   25a94:	sub	r0, fp, #112	; 0x70
   25a98:	orr	r0, r0, #4
   25a9c:	str	r0, [sp, #28]
   25aa0:	sub	r0, fp, #72	; 0x48
   25aa4:	orr	r0, r0, #4
   25aa8:	str	r0, [sp, #4]
   25aac:	ldr	r0, [sp, #36]	; 0x24
   25ab0:	add	r0, r0, #8
   25ab4:	str	r0, [sp, #8]
   25ab8:	mov	r0, #0
   25abc:	str	r0, [sp, #16]
   25ac0:	ldr	r5, [fp, #20]
   25ac4:	ldr	r3, [r5]
   25ac8:	cmp	r3, #0
   25acc:	beq	25b0c <ReadCompressedDataSlabN+0x4094>
   25ad0:	mov	sl, r5
   25ad4:	ldr	r7, [sp, #44]	; 0x2c
   25ad8:	ldr	r5, [fp, #8]
   25adc:	mov	r1, r4
   25ae0:	mov	r6, r9
   25ae4:	mov	r0, r7
   25ae8:	mov	r2, r5
   25aec:	bl	2728 <InflateSkipData>
   25af0:	ldr	r1, [sl]
   25af4:	ldr	sl, [fp, #28]
   25af8:	mov	r0, r7
   25afc:	add	r6, r1, r9
   25b00:	ldr	r1, [sp, #36]	; 0x24
   25b04:	str	r6, [sp, #20]
   25b08:	b	25b20 <ReadCompressedDataSlabN+0x40a8>
   25b0c:	ldr	r1, [sp, #36]	; 0x24
   25b10:	ldr	r0, [sp, #44]	; 0x2c
   25b14:	ldr	sl, [fp, #28]
   25b18:	ldr	r5, [fp, #8]
   25b1c:	str	r9, [sp, #20]
   25b20:	ldr	r6, [sp, #16]
   25b24:	ldr	r7, [sl]
   25b28:	mov	r3, r5
   25b2c:	str	r8, [sp]
   25b30:	add	r2, r1, r6, lsl #3
   25b34:	mov	r1, r4
   25b38:	bl	b1d0 <ReadCompressedInt64Data>
   25b3c:	cmp	r7, #2
   25b40:	blt	25bd4 <ReadCompressedDataSlabN+0x415c>
   25b44:	ldr	r0, [sp, #8]
   25b48:	ldr	r9, [sp, #20]
   25b4c:	ldr	r1, [fp, #24]
   25b50:	mov	r5, #0
   25b54:	add	r6, r0, r6, lsl #3
   25b58:	ldr	r0, [r1]
   25b5c:	ldr	r7, [fp, #8]
   25b60:	ldr	r8, [sp, #44]	; 0x2c
   25b64:	add	r4, sp, #48	; 0x30
   25b68:	mov	r1, r4
   25b6c:	sub	r3, r0, #1
   25b70:	mov	r0, r8
   25b74:	mov	r2, r7
   25b78:	bl	2728 <InflateSkipData>
   25b7c:	ldr	r0, [sl]
   25b80:	mov	r1, r4
   25b84:	mov	r2, r6
   25b88:	mov	r3, r7
   25b8c:	str	r0, [sp, #40]	; 0x28
   25b90:	ldr	r0, [fp, #24]
   25b94:	ldr	sl, [r0]
   25b98:	mov	r0, #1
   25b9c:	str	r0, [sp]
   25ba0:	mov	r0, r8
   25ba4:	bl	b1d0 <ReadCompressedInt64Data>
   25ba8:	add	r9, sl, r9
   25bac:	ldr	sl, [fp, #24]
   25bb0:	ldr	r0, [sp, #40]	; 0x28
   25bb4:	add	r5, r5, #1
   25bb8:	add	r6, r6, #8
   25bbc:	mov	r1, sl
   25bc0:	ldr	sl, [fp, #28]
   25bc4:	sub	r0, r0, #1
   25bc8:	cmp	r5, r0
   25bcc:	blt	25b58 <ReadCompressedDataSlabN+0x40e0>
   25bd0:	b	25bdc <ReadCompressedDataSlabN+0x4164>
   25bd4:	ldr	r9, [sp, #20]
   25bd8:	ldr	r1, [fp, #24]
   25bdc:	ldr	r0, [fp, #16]
   25be0:	ldr	r2, [sl]
   25be4:	ldr	r1, [r1]
   25be8:	ldr	r5, [fp, #8]
   25bec:	ldr	r0, [r0]
   25bf0:	sub	r2, r2, #1
   25bf4:	mls	r0, r2, r1, r0
   25bf8:	ldr	r1, [fp, #20]
   25bfc:	mov	r2, r5
   25c00:	ldr	r1, [r1]
   25c04:	sub	r4, r0, r1
   25c08:	ldr	r0, [sp, #44]	; 0x2c
   25c0c:	add	r1, sp, #48	; 0x30
   25c10:	sub	r3, r4, #1
   25c14:	bl	2728 <InflateSkipData>
   25c18:	ldr	r0, [fp, #12]
   25c1c:	add	r9, r4, r9
   25c20:	cmp	r0, #2
   25c24:	blt	25d54 <ReadCompressedDataSlabN+0x42dc>
   25c28:	ldr	r8, [sp, #12]
   25c2c:	ldr	r4, [sp, #28]
   25c30:	mov	ip, r5
   25c34:	mov	r0, #0
   25c38:	add	r3, sp, #104	; 0x68
   25c3c:	mov	r6, r0
   25c40:	ldr	r0, [r4, r0, lsl #2]
   25c44:	ldr	r1, [sp, #32]
   25c48:	add	r0, r0, #1
   25c4c:	str	r0, [r4, r6, lsl #2]
   25c50:	ldr	r1, [r1, r6, lsl #2]
   25c54:	sdiv	r2, r0, r1
   25c58:	mls	r0, r2, r1, r0
   25c5c:	cmp	r0, #0
   25c60:	bne	25d2c <ReadCompressedDataSlabN+0x42b4>
   25c64:	mov	r0, #0
   25c68:	add	r5, r3, r6, lsl #2
   25c6c:	str	r0, [r4, r6, lsl #2]
   25c70:	ldr	r0, [r5, #4]
   25c74:	sdiv	r1, r9, r0
   25c78:	mls	r1, r1, r0, r9
   25c7c:	cmp	r1, #0
   25c80:	beq	25cd8 <ReadCompressedDataSlabN+0x4260>
   25c84:	ldr	r2, [r3, r6, lsl #2]
   25c88:	ldr	r3, [r8, r6, lsl #2]
   25c8c:	sub	r0, r0, r1
   25c90:	add	r1, sp, #48	; 0x30
   25c94:	mla	r3, r3, r2, r0
   25c98:	ldr	r0, [sp, #44]	; 0x2c
   25c9c:	mov	r2, ip
   25ca0:	bl	2728 <InflateSkipData>
   25ca4:	ldr	r0, [r5, #4]
   25ca8:	add	r3, sp, #104	; 0x68
   25cac:	ldr	ip, [fp, #8]
   25cb0:	ldr	r4, [sp, #28]
   25cb4:	sdiv	r2, r9, r0
   25cb8:	add	r1, r0, r9
   25cbc:	mul	r0, r2, r0
   25cc0:	ldr	r2, [r8, r6, lsl #2]
   25cc4:	sub	r0, r0, r9
   25cc8:	add	r0, r1, r0
   25ccc:	ldr	r1, [r3, r6, lsl #2]
   25cd0:	mla	r9, r2, r1, r0
   25cd4:	b	25d14 <ReadCompressedDataSlabN+0x429c>
   25cd8:	ldr	r0, [r8, r6, lsl #2]
   25cdc:	cmp	r0, #0
   25ce0:	beq	25d14 <ReadCompressedDataSlabN+0x429c>
   25ce4:	ldr	r1, [r3, r6, lsl #2]
   25ce8:	mov	r2, ip
   25cec:	mul	r3, r1, r0
   25cf0:	ldr	r0, [sp, #44]	; 0x2c
   25cf4:	add	r1, sp, #48	; 0x30
   25cf8:	bl	2728 <InflateSkipData>
   25cfc:	add	r3, sp, #104	; 0x68
   25d00:	ldr	r1, [r8, r6, lsl #2]
   25d04:	ldr	ip, [fp, #8]
   25d08:	ldr	r4, [sp, #28]
   25d0c:	ldr	r0, [r3, r6, lsl #2]
   25d10:	mla	r9, r1, r0, r9
   25d14:	ldr	r2, [fp, #12]
   25d18:	add	r1, r6, #2
   25d1c:	add	r0, r6, #1
   25d20:	cmp	r1, r2
   25d24:	blt	25c3c <ReadCompressedDataSlabN+0x41c4>
   25d28:	b	25d54 <ReadCompressedDataSlabN+0x42dc>
   25d2c:	ldr	r0, [sp, #4]
   25d30:	ldr	r6, [r0, r6, lsl #2]
   25d34:	cmp	r6, #0
   25d38:	beq	25d54 <ReadCompressedDataSlabN+0x42dc>
   25d3c:	ldr	r0, [sp, #44]	; 0x2c
   25d40:	add	r1, sp, #48	; 0x30
   25d44:	mov	r2, ip
   25d48:	mov	r3, r6
   25d4c:	bl	2728 <InflateSkipData>
   25d50:	add	r9, r6, r9
   25d54:	ldr	r0, [sl]
   25d58:	ldr	r1, [sp, #16]
   25d5c:	mov	r8, #1
   25d60:	add	r4, sp, #48	; 0x30
   25d64:	add	r1, r0, r1
   25d68:	ldr	r0, [sp, #24]
   25d6c:	str	r1, [sp, #16]
   25d70:	cmp	r1, r0
   25d74:	blt	25ac0 <ReadCompressedDataSlabN+0x4048>
   25d78:	b	26074 <ReadCompressedDataSlabN+0x45fc>
   25d7c:	ldr	r0, [sp, #28]
   25d80:	cmp	r0, #1
   25d84:	blt	26074 <ReadCompressedDataSlabN+0x45fc>
   25d88:	ldr	r0, [fp, #20]
   25d8c:	mov	r2, #1
   25d90:	add	r1, sp, #48	; 0x30
   25d94:	add	r8, r0, #4
   25d98:	ldr	r0, [fp, #28]
   25d9c:	str	r8, [sp, #16]
   25da0:	add	r0, r0, #4
   25da4:	str	r0, [sp, #40]	; 0x28
   25da8:	sub	r0, fp, #112	; 0x70
   25dac:	orr	r4, r0, #4
   25db0:	sub	r0, fp, #72	; 0x48
   25db4:	orr	r0, r0, #4
   25db8:	str	r4, [sp, #32]
   25dbc:	str	r0, [sp, #8]
   25dc0:	ldr	r0, [sp, #36]	; 0x24
   25dc4:	add	r0, r0, #8
   25dc8:	str	r0, [sp, #12]
   25dcc:	mov	r0, #0
   25dd0:	str	r0, [sp, #20]
   25dd4:	ldr	r5, [fp, #20]
   25dd8:	ldr	r3, [r5]
   25ddc:	cmp	r3, #0
   25de0:	beq	25e1c <ReadCompressedDataSlabN+0x43a4>
   25de4:	mov	r7, r5
   25de8:	ldr	r5, [sp, #44]	; 0x2c
   25dec:	ldr	r6, [fp, #8]
   25df0:	mov	r4, r1
   25df4:	mov	r0, r5
   25df8:	mov	r2, r6
   25dfc:	bl	2728 <InflateSkipData>
   25e00:	ldr	r0, [r7]
   25e04:	ldr	sl, [fp, #28]
   25e08:	mov	r3, r6
   25e0c:	mov	r2, #1
   25e10:	add	r9, r0, r9
   25e14:	ldr	r0, [sp, #36]	; 0x24
   25e18:	b	25e34 <ReadCompressedDataSlabN+0x43bc>
   25e1c:	ldr	r6, [fp, #8]
   25e20:	ldr	r0, [sp, #36]	; 0x24
   25e24:	ldr	r5, [sp, #44]	; 0x2c
   25e28:	ldr	sl, [fp, #28]
   25e2c:	mov	r4, r1
   25e30:	mov	r3, r6
   25e34:	ldr	r6, [sp, #20]
   25e38:	ldr	r8, [sl]
   25e3c:	str	r2, [sp]
   25e40:	mov	r1, r4
   25e44:	str	r9, [sp, #24]
   25e48:	add	r2, r0, r6, lsl #3
   25e4c:	mov	r0, r5
   25e50:	bl	d4c8 <ReadCompressedUInt64Data>
   25e54:	cmp	r8, #2
   25e58:	blt	25ee0 <ReadCompressedDataSlabN+0x4468>
   25e5c:	ldr	r0, [sp, #12]
   25e60:	ldr	r9, [sp, #24]
   25e64:	ldr	r1, [fp, #24]
   25e68:	mov	r5, #0
   25e6c:	add	r6, r0, r6, lsl #3
   25e70:	ldr	r0, [r1]
   25e74:	ldr	r7, [fp, #8]
   25e78:	ldr	r8, [sp, #44]	; 0x2c
   25e7c:	add	r1, sp, #48	; 0x30
   25e80:	sub	r3, r0, #1
   25e84:	mov	r0, r8
   25e88:	mov	r2, r7
   25e8c:	bl	2728 <InflateSkipData>
   25e90:	ldr	r0, [fp, #24]
   25e94:	ldr	r4, [sl]
   25e98:	add	r1, sp, #48	; 0x30
   25e9c:	mov	r2, r6
   25ea0:	mov	r3, r7
   25ea4:	ldr	sl, [r0]
   25ea8:	mov	r0, #1
   25eac:	str	r0, [sp]
   25eb0:	mov	r0, r8
   25eb4:	bl	d4c8 <ReadCompressedUInt64Data>
   25eb8:	add	r9, sl, r9
   25ebc:	ldr	sl, [fp, #24]
   25ec0:	add	r5, r5, #1
   25ec4:	sub	r0, r4, #1
   25ec8:	add	r6, r6, #8
   25ecc:	cmp	r5, r0
   25ed0:	mov	r1, sl
   25ed4:	ldr	sl, [fp, #28]
   25ed8:	blt	25e70 <ReadCompressedDataSlabN+0x43f8>
   25edc:	b	25ee8 <ReadCompressedDataSlabN+0x4470>
   25ee0:	ldr	r9, [sp, #24]
   25ee4:	ldr	r1, [fp, #24]
   25ee8:	ldr	r0, [fp, #16]
   25eec:	ldr	r2, [sl]
   25ef0:	ldr	r1, [r1]
   25ef4:	ldr	r0, [r0]
   25ef8:	sub	r2, r2, #1
   25efc:	mls	r0, r2, r1, r0
   25f00:	ldr	r1, [fp, #20]
   25f04:	ldr	r2, [fp, #8]
   25f08:	ldr	r1, [r1]
   25f0c:	sub	r4, r0, r1
   25f10:	ldr	r0, [sp, #44]	; 0x2c
   25f14:	add	r1, sp, #48	; 0x30
   25f18:	sub	r3, r4, #1
   25f1c:	bl	2728 <InflateSkipData>
   25f20:	ldr	r0, [fp, #12]
   25f24:	add	r9, r4, r9
   25f28:	cmp	r0, #2
   25f2c:	blt	26050 <ReadCompressedDataSlabN+0x45d8>
   25f30:	ldr	r8, [sp, #16]
   25f34:	ldr	r4, [sp, #32]
   25f38:	mov	r0, #0
   25f3c:	add	r3, sp, #104	; 0x68
   25f40:	mov	r6, r0
   25f44:	ldr	r0, [r4, r0, lsl #2]
   25f48:	ldr	r1, [sp, #40]	; 0x28
   25f4c:	add	r0, r0, #1
   25f50:	str	r0, [r4, r6, lsl #2]
   25f54:	ldr	r1, [r1, r6, lsl #2]
   25f58:	sdiv	r2, r0, r1
   25f5c:	mls	r0, r2, r1, r0
   25f60:	cmp	r0, #0
   25f64:	bne	26028 <ReadCompressedDataSlabN+0x45b0>
   25f68:	mov	r0, #0
   25f6c:	add	r5, r3, r6, lsl #2
   25f70:	str	r0, [r4, r6, lsl #2]
   25f74:	ldr	r0, [r5, #4]
   25f78:	sdiv	r1, r9, r0
   25f7c:	mls	r1, r1, r0, r9
   25f80:	cmp	r1, #0
   25f84:	beq	25fd8 <ReadCompressedDataSlabN+0x4560>
   25f88:	ldr	r2, [r3, r6, lsl #2]
   25f8c:	ldr	r3, [r8, r6, lsl #2]
   25f90:	sub	r0, r0, r1
   25f94:	add	r1, sp, #48	; 0x30
   25f98:	mla	r3, r3, r2, r0
   25f9c:	ldr	r0, [sp, #44]	; 0x2c
   25fa0:	ldr	r2, [fp, #8]
   25fa4:	bl	2728 <InflateSkipData>
   25fa8:	ldr	r0, [r5, #4]
   25fac:	add	r3, sp, #104	; 0x68
   25fb0:	ldr	r4, [sp, #32]
   25fb4:	sdiv	r2, r9, r0
   25fb8:	add	r1, r0, r9
   25fbc:	mul	r0, r2, r0
   25fc0:	ldr	r2, [r8, r6, lsl #2]
   25fc4:	sub	r0, r0, r9
   25fc8:	add	r0, r1, r0
   25fcc:	ldr	r1, [r3, r6, lsl #2]
   25fd0:	mla	r9, r2, r1, r0
   25fd4:	b	26010 <ReadCompressedDataSlabN+0x4598>
   25fd8:	ldr	r0, [r8, r6, lsl #2]
   25fdc:	cmp	r0, #0
   25fe0:	beq	26010 <ReadCompressedDataSlabN+0x4598>
   25fe4:	ldr	r1, [r3, r6, lsl #2]
   25fe8:	ldr	r2, [fp, #8]
   25fec:	mul	r3, r1, r0
   25ff0:	ldr	r0, [sp, #44]	; 0x2c
   25ff4:	add	r1, sp, #48	; 0x30
   25ff8:	bl	2728 <InflateSkipData>
   25ffc:	add	r3, sp, #104	; 0x68
   26000:	ldr	r1, [r8, r6, lsl #2]
   26004:	ldr	r4, [sp, #32]
   26008:	ldr	r0, [r3, r6, lsl #2]
   2600c:	mla	r9, r1, r0, r9
   26010:	ldr	r2, [fp, #12]
   26014:	add	r1, r6, #2
   26018:	add	r0, r6, #1
   2601c:	cmp	r1, r2
   26020:	blt	25f40 <ReadCompressedDataSlabN+0x44c8>
   26024:	b	26050 <ReadCompressedDataSlabN+0x45d8>
   26028:	ldr	r0, [sp, #8]
   2602c:	ldr	r6, [r0, r6, lsl #2]
   26030:	cmp	r6, #0
   26034:	beq	26050 <ReadCompressedDataSlabN+0x45d8>
   26038:	ldr	r0, [sp, #44]	; 0x2c
   2603c:	ldr	r2, [fp, #8]
   26040:	add	r1, sp, #48	; 0x30
   26044:	mov	r3, r6
   26048:	bl	2728 <InflateSkipData>
   2604c:	add	r9, r6, r9
   26050:	ldr	r0, [sl]
   26054:	ldr	r1, [sp, #20]
   26058:	mov	r2, #1
   2605c:	add	r1, r0, r1
   26060:	ldr	r0, [sp, #28]
   26064:	str	r1, [sp, #20]
   26068:	cmp	r1, r0
   2606c:	add	r1, sp, #48	; 0x30
   26070:	blt	25dd4 <ReadCompressedDataSlabN+0x435c>
   26074:	add	r0, sp, #48	; 0x30
   26078:	bl	193c <inflateEnd@plt>
   2607c:	mov	r0, #0
   26080:	sub	sp, fp, #28
   26084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00026088 <ReadDataSlab1>:
   26088:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2608c:	add	fp, sp, #28
   26090:	sub	sp, sp, #4
   26094:	mov	sl, r0
   26098:	mov	r0, r3
   2609c:	mov	r8, r3
   260a0:	mov	r4, r2
   260a4:	mov	r5, r1
   260a8:	bl	1924 <Mat_SizeOf@plt>
   260ac:	mov	r6, r0
   260b0:	ldr	r0, [fp, #8]
   260b4:	mov	r2, #1
   260b8:	mul	r1, r6, r0
   260bc:	ldr	r0, [sl]
   260c0:	bl	1a2c <fseek@plt>
   260c4:	sub	r0, r4, #6
   260c8:	mov	r4, #0
   260cc:	cmp	r0, #9
   260d0:	bhi	26434 <ReadDataSlab1+0x3ac>
   260d4:	ldr	r1, [fp, #12]
   260d8:	sub	r1, r1, #1
   260dc:	mul	r9, r6, r1
   260e0:	ldr	r6, [fp, #16]
   260e4:	add	r1, pc, #4
   260e8:	ldr	r0, [r1, r0, lsl #2]
   260ec:	add	pc, r1, r0
   260f0:	.word	0x00000028
   260f4:	.word	0x00000078
   260f8:	.word	0x000000c8
   260fc:	.word	0x00000118
   26100:	.word	0x00000168
   26104:	.word	0x000001b8
   26108:	.word	0x00000208
   2610c:	.word	0x00000258
   26110:	.word	0x000002a8
   26114:	.word	0x000002f8
   26118:	cmp	r9, #0
   2611c:	beq	26440 <ReadDataSlab1+0x3b8>
   26120:	cmp	r6, #1
   26124:	blt	26434 <ReadDataSlab1+0x3ac>
   26128:	mov	r4, #0
   2612c:	mov	r0, sl
   26130:	mov	r1, r5
   26134:	mov	r2, r8
   26138:	mov	r3, #1
   2613c:	bl	38dc <ReadDoubleData>
   26140:	mov	r7, r0
   26144:	ldr	r0, [sl]
   26148:	mov	r1, r9
   2614c:	mov	r2, #1
   26150:	bl	1a2c <fseek@plt>
   26154:	add	r4, r7, r4
   26158:	subs	r6, r6, #1
   2615c:	add	r5, r5, #8
   26160:	bne	2612c <ReadDataSlab1+0xa4>
   26164:	b	26434 <ReadDataSlab1+0x3ac>
   26168:	cmp	r9, #0
   2616c:	beq	2645c <ReadDataSlab1+0x3d4>
   26170:	cmp	r6, #1
   26174:	blt	26434 <ReadDataSlab1+0x3ac>
   26178:	mov	r4, #0
   2617c:	mov	r0, sl
   26180:	mov	r1, r5
   26184:	mov	r2, r8
   26188:	mov	r3, #1
   2618c:	bl	6fa0 <ReadSingleData>
   26190:	mov	r7, r0
   26194:	ldr	r0, [sl]
   26198:	mov	r1, r9
   2619c:	mov	r2, #1
   261a0:	bl	1a2c <fseek@plt>
   261a4:	add	r4, r7, r4
   261a8:	subs	r6, r6, #1
   261ac:	add	r5, r5, #4
   261b0:	bne	2617c <ReadDataSlab1+0xf4>
   261b4:	b	26434 <ReadDataSlab1+0x3ac>
   261b8:	cmp	r9, #0
   261bc:	beq	26478 <ReadDataSlab1+0x3f0>
   261c0:	cmp	r6, #1
   261c4:	blt	26434 <ReadDataSlab1+0x3ac>
   261c8:	mov	r4, #0
   261cc:	mov	r0, sl
   261d0:	mov	r1, r5
   261d4:	mov	r2, r8
   261d8:	mov	r3, #1
   261dc:	bl	18bb8 <ReadInt8Data>
   261e0:	mov	r7, r0
   261e4:	ldr	r0, [sl]
   261e8:	mov	r1, r9
   261ec:	mov	r2, #1
   261f0:	bl	1a2c <fseek@plt>
   261f4:	add	r4, r7, r4
   261f8:	subs	r6, r6, #1
   261fc:	add	r5, r5, #1
   26200:	bne	261cc <ReadDataSlab1+0x144>
   26204:	b	26434 <ReadDataSlab1+0x3ac>
   26208:	cmp	r9, #0
   2620c:	beq	26494 <ReadDataSlab1+0x40c>
   26210:	cmp	r6, #1
   26214:	blt	26434 <ReadDataSlab1+0x3ac>
   26218:	mov	r4, #0
   2621c:	mov	r0, sl
   26220:	mov	r1, r5
   26224:	mov	r2, r8
   26228:	mov	r3, #1
   2622c:	bl	1b1ec <ReadUInt8Data>
   26230:	mov	r7, r0
   26234:	ldr	r0, [sl]
   26238:	mov	r1, r9
   2623c:	mov	r2, #1
   26240:	bl	1a2c <fseek@plt>
   26244:	add	r4, r7, r4
   26248:	subs	r6, r6, #1
   2624c:	add	r5, r5, #1
   26250:	bne	2621c <ReadDataSlab1+0x194>
   26254:	b	26434 <ReadDataSlab1+0x3ac>
   26258:	cmp	r9, #0
   2625c:	beq	264b0 <ReadDataSlab1+0x428>
   26260:	cmp	r6, #1
   26264:	blt	26434 <ReadDataSlab1+0x3ac>
   26268:	mov	r4, #0
   2626c:	mov	r0, sl
   26270:	mov	r1, r5
   26274:	mov	r2, r8
   26278:	mov	r3, #1
   2627c:	bl	13c20 <ReadInt16Data>
   26280:	mov	r7, r0
   26284:	ldr	r0, [sl]
   26288:	mov	r1, r9
   2628c:	mov	r2, #1
   26290:	bl	1a2c <fseek@plt>
   26294:	add	r4, r7, r4
   26298:	subs	r6, r6, #1
   2629c:	add	r5, r5, #2
   262a0:	bne	2626c <ReadDataSlab1+0x1e4>
   262a4:	b	26434 <ReadDataSlab1+0x3ac>
   262a8:	cmp	r9, #0
   262ac:	beq	264cc <ReadDataSlab1+0x444>
   262b0:	cmp	r6, #1
   262b4:	blt	26434 <ReadDataSlab1+0x3ac>
   262b8:	mov	r4, #0
   262bc:	mov	r0, sl
   262c0:	mov	r1, r5
   262c4:	mov	r2, r8
   262c8:	mov	r3, #1
   262cc:	bl	163ec <ReadUInt16Data>
   262d0:	mov	r7, r0
   262d4:	ldr	r0, [sl]
   262d8:	mov	r1, r9
   262dc:	mov	r2, #1
   262e0:	bl	1a2c <fseek@plt>
   262e4:	add	r4, r7, r4
   262e8:	subs	r6, r6, #1
   262ec:	add	r5, r5, #2
   262f0:	bne	262bc <ReadDataSlab1+0x234>
   262f4:	b	26434 <ReadDataSlab1+0x3ac>
   262f8:	cmp	r9, #0
   262fc:	beq	264e8 <ReadDataSlab1+0x460>
   26300:	cmp	r6, #1
   26304:	blt	26434 <ReadDataSlab1+0x3ac>
   26308:	mov	r4, #0
   2630c:	mov	r0, sl
   26310:	mov	r1, r5
   26314:	mov	r2, r8
   26318:	mov	r3, #1
   2631c:	bl	da88 <ReadInt32Data>
   26320:	mov	r7, r0
   26324:	ldr	r0, [sl]
   26328:	mov	r1, r9
   2632c:	mov	r2, #1
   26330:	bl	1a2c <fseek@plt>
   26334:	add	r4, r7, r4
   26338:	subs	r6, r6, #1
   2633c:	add	r5, r5, #4
   26340:	bne	2630c <ReadDataSlab1+0x284>
   26344:	b	26434 <ReadDataSlab1+0x3ac>
   26348:	cmp	r9, #0
   2634c:	beq	26504 <ReadDataSlab1+0x47c>
   26350:	cmp	r6, #1
   26354:	blt	26434 <ReadDataSlab1+0x3ac>
   26358:	mov	r4, #0
   2635c:	mov	r0, sl
   26360:	mov	r1, r5
   26364:	mov	r2, r8
   26368:	mov	r3, #1
   2636c:	bl	10b54 <ReadUInt32Data>
   26370:	mov	r7, r0
   26374:	ldr	r0, [sl]
   26378:	mov	r1, r9
   2637c:	mov	r2, #1
   26380:	bl	1a2c <fseek@plt>
   26384:	add	r4, r7, r4
   26388:	subs	r6, r6, #1
   2638c:	add	r5, r5, #4
   26390:	bne	2635c <ReadDataSlab1+0x2d4>
   26394:	b	26434 <ReadDataSlab1+0x3ac>
   26398:	cmp	r9, #0
   2639c:	beq	26520 <ReadDataSlab1+0x498>
   263a0:	cmp	r6, #1
   263a4:	blt	26434 <ReadDataSlab1+0x3ac>
   263a8:	mov	r4, #0
   263ac:	mov	r0, sl
   263b0:	mov	r1, r5
   263b4:	mov	r2, r8
   263b8:	mov	r3, #1
   263bc:	bl	9498 <ReadInt64Data>
   263c0:	mov	r7, r0
   263c4:	ldr	r0, [sl]
   263c8:	mov	r1, r9
   263cc:	mov	r2, #1
   263d0:	bl	1a2c <fseek@plt>
   263d4:	add	r4, r7, r4
   263d8:	subs	r6, r6, #1
   263dc:	add	r5, r5, #8
   263e0:	bne	263ac <ReadDataSlab1+0x324>
   263e4:	b	26434 <ReadDataSlab1+0x3ac>
   263e8:	cmp	r9, #0
   263ec:	beq	2653c <ReadDataSlab1+0x4b4>
   263f0:	cmp	r6, #1
   263f4:	blt	26434 <ReadDataSlab1+0x3ac>
   263f8:	mov	r4, #0
   263fc:	mov	r0, sl
   26400:	mov	r1, r5
   26404:	mov	r2, r8
   26408:	mov	r3, #1
   2640c:	bl	b790 <ReadUInt64Data>
   26410:	mov	r7, r0
   26414:	ldr	r0, [sl]
   26418:	mov	r1, r9
   2641c:	mov	r2, #1
   26420:	bl	1a2c <fseek@plt>
   26424:	add	r4, r7, r4
   26428:	subs	r6, r6, #1
   2642c:	add	r5, r5, #8
   26430:	bne	263fc <ReadDataSlab1+0x374>
   26434:	mov	r0, r4
   26438:	sub	sp, fp, #28
   2643c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26440:	mov	r0, sl
   26444:	mov	r1, r5
   26448:	mov	r2, r8
   2644c:	mov	r3, r6
   26450:	sub	sp, fp, #28
   26454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26458:	b	38dc <ReadDoubleData>
   2645c:	mov	r0, sl
   26460:	mov	r1, r5
   26464:	mov	r2, r8
   26468:	mov	r3, r6
   2646c:	sub	sp, fp, #28
   26470:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26474:	b	6fa0 <ReadSingleData>
   26478:	mov	r0, sl
   2647c:	mov	r1, r5
   26480:	mov	r2, r8
   26484:	mov	r3, r6
   26488:	sub	sp, fp, #28
   2648c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26490:	b	18bb8 <ReadInt8Data>
   26494:	mov	r0, sl
   26498:	mov	r1, r5
   2649c:	mov	r2, r8
   264a0:	mov	r3, r6
   264a4:	sub	sp, fp, #28
   264a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   264ac:	b	1b1ec <ReadUInt8Data>
   264b0:	mov	r0, sl
   264b4:	mov	r1, r5
   264b8:	mov	r2, r8
   264bc:	mov	r3, r6
   264c0:	sub	sp, fp, #28
   264c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   264c8:	b	13c20 <ReadInt16Data>
   264cc:	mov	r0, sl
   264d0:	mov	r1, r5
   264d4:	mov	r2, r8
   264d8:	mov	r3, r6
   264dc:	sub	sp, fp, #28
   264e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   264e4:	b	163ec <ReadUInt16Data>
   264e8:	mov	r0, sl
   264ec:	mov	r1, r5
   264f0:	mov	r2, r8
   264f4:	mov	r3, r6
   264f8:	sub	sp, fp, #28
   264fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26500:	b	da88 <ReadInt32Data>
   26504:	mov	r0, sl
   26508:	mov	r1, r5
   2650c:	mov	r2, r8
   26510:	mov	r3, r6
   26514:	sub	sp, fp, #28
   26518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2651c:	b	10b54 <ReadUInt32Data>
   26520:	mov	r0, sl
   26524:	mov	r1, r5
   26528:	mov	r2, r8
   2652c:	mov	r3, r6
   26530:	sub	sp, fp, #28
   26534:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26538:	b	9498 <ReadInt64Data>
   2653c:	mov	r0, sl
   26540:	mov	r1, r5
   26544:	mov	r2, r8
   26548:	mov	r3, r6
   2654c:	sub	sp, fp, #28
   26550:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26554:	b	b790 <ReadUInt64Data>

00026558 <ReadDataSlab2>:
   26558:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2655c:	add	fp, sp, #28
   26560:	sub	sp, sp, #20
   26564:	cmp	r0, #0
   26568:	mov	r9, #0
   2656c:	movne	r5, r1
   26570:	cmpne	r1, #0
   26574:	beq	265a4 <ReadDataSlab2+0x4c>
   26578:	ldr	r4, [fp, #20]
   2657c:	cmp	r4, #0
   26580:	ldrne	r8, [fp, #16]
   26584:	cmpne	r8, #0
   26588:	beq	265a4 <ReadDataSlab2+0x4c>
   2658c:	mov	r6, r0
   26590:	ldr	r0, [fp, #12]
   26594:	cmp	r0, #0
   26598:	ldrne	r0, [r6]
   2659c:	cmpne	r0, #0
   265a0:	bne	265b0 <ReadDataSlab2+0x58>
   265a4:	mov	r0, r9
   265a8:	sub	sp, fp, #28
   265ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   265b0:	mov	r0, r3
   265b4:	mov	sl, r3
   265b8:	mov	r7, r2
   265bc:	bl	1924 <Mat_SizeOf@plt>
   265c0:	str	r0, [sp, #16]
   265c4:	sub	r0, r7, #6
   265c8:	cmp	r0, #9
   265cc:	bhi	265a4 <ReadDataSlab2+0x4c>
   265d0:	add	r1, pc, #8
   265d4:	ldr	r7, [fp, #8]
   265d8:	ldr	r0, [r1, r0, lsl #2]
   265dc:	add	pc, r1, r0
   265e0:	.word	0x00000028
   265e4:	.word	0x00000074
   265e8:	.word	0x000000c0
   265ec:	.word	0x0000010c
   265f0:	.word	0x00000158
   265f4:	.word	0x000001a4
   265f8:	.word	0x000001f0
   265fc:	.word	0x0000023c
   26600:	.word	0x000002d4
   26604:	.word	0x00000288
   26608:	ldr	r2, [r8]
   2660c:	cmp	r2, #1
   26610:	bne	26900 <ReadDataSlab2+0x3a8>
   26614:	ldr	r1, [r7]
   26618:	ldr	r0, [r4]
   2661c:	cmp	r0, r1
   26620:	bne	26954 <ReadDataSlab2+0x3fc>
   26624:	ldr	r1, [r8, #4]
   26628:	cmp	r1, #1
   2662c:	bne	26950 <ReadDataSlab2+0x3f8>
   26630:	ldr	r1, [r4, #4]
   26634:	mov	r2, sl
   26638:	mul	r3, r1, r0
   2663c:	mov	r0, r6
   26640:	mov	r1, r5
   26644:	bl	38dc <ReadDoubleData>
   26648:	mov	r0, r9
   2664c:	sub	sp, fp, #28
   26650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26654:	ldr	r2, [r8]
   26658:	cmp	r2, #1
   2665c:	bne	26908 <ReadDataSlab2+0x3b0>
   26660:	ldr	r1, [r7]
   26664:	ldr	r0, [r4]
   26668:	cmp	r0, r1
   2666c:	bne	26a90 <ReadDataSlab2+0x538>
   26670:	ldr	r1, [r8, #4]
   26674:	cmp	r1, #1
   26678:	bne	26a8c <ReadDataSlab2+0x534>
   2667c:	ldr	r1, [r4, #4]
   26680:	mov	r2, sl
   26684:	mul	r3, r1, r0
   26688:	mov	r0, r6
   2668c:	mov	r1, r5
   26690:	bl	6fa0 <ReadSingleData>
   26694:	mov	r0, r9
   26698:	sub	sp, fp, #28
   2669c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   266a0:	ldr	r2, [r8]
   266a4:	cmp	r2, #1
   266a8:	bne	26910 <ReadDataSlab2+0x3b8>
   266ac:	ldr	r1, [r7]
   266b0:	ldr	r0, [r4]
   266b4:	cmp	r0, r1
   266b8:	bne	26bc8 <ReadDataSlab2+0x670>
   266bc:	ldr	r1, [r8, #4]
   266c0:	cmp	r1, #1
   266c4:	bne	26bc4 <ReadDataSlab2+0x66c>
   266c8:	ldr	r1, [r4, #4]
   266cc:	mov	r2, sl
   266d0:	mul	r3, r1, r0
   266d4:	mov	r0, r6
   266d8:	mov	r1, r5
   266dc:	bl	18bb8 <ReadInt8Data>
   266e0:	mov	r0, r9
   266e4:	sub	sp, fp, #28
   266e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   266ec:	ldr	r2, [r8]
   266f0:	cmp	r2, #1
   266f4:	bne	26918 <ReadDataSlab2+0x3c0>
   266f8:	ldr	r1, [r7]
   266fc:	ldr	r0, [r4]
   26700:	cmp	r0, r1
   26704:	bne	26d00 <ReadDataSlab2+0x7a8>
   26708:	ldr	r1, [r8, #4]
   2670c:	cmp	r1, #1
   26710:	bne	26cfc <ReadDataSlab2+0x7a4>
   26714:	ldr	r1, [r4, #4]
   26718:	mov	r2, sl
   2671c:	mul	r3, r1, r0
   26720:	mov	r0, r6
   26724:	mov	r1, r5
   26728:	bl	1b1ec <ReadUInt8Data>
   2672c:	mov	r0, r9
   26730:	sub	sp, fp, #28
   26734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26738:	ldr	r2, [r8]
   2673c:	cmp	r2, #1
   26740:	bne	26920 <ReadDataSlab2+0x3c8>
   26744:	ldr	r1, [r7]
   26748:	ldr	r0, [r4]
   2674c:	cmp	r0, r1
   26750:	bne	26e38 <ReadDataSlab2+0x8e0>
   26754:	ldr	r1, [r8, #4]
   26758:	cmp	r1, #1
   2675c:	bne	26e34 <ReadDataSlab2+0x8dc>
   26760:	ldr	r1, [r4, #4]
   26764:	mov	r2, sl
   26768:	mul	r3, r1, r0
   2676c:	mov	r0, r6
   26770:	mov	r1, r5
   26774:	bl	13c20 <ReadInt16Data>
   26778:	mov	r0, r9
   2677c:	sub	sp, fp, #28
   26780:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26784:	ldr	r2, [r8]
   26788:	cmp	r2, #1
   2678c:	bne	26928 <ReadDataSlab2+0x3d0>
   26790:	ldr	r1, [r7]
   26794:	ldr	r0, [r4]
   26798:	cmp	r0, r1
   2679c:	bne	26f70 <ReadDataSlab2+0xa18>
   267a0:	ldr	r1, [r8, #4]
   267a4:	cmp	r1, #1
   267a8:	bne	26f6c <ReadDataSlab2+0xa14>
   267ac:	ldr	r1, [r4, #4]
   267b0:	mov	r2, sl
   267b4:	mul	r3, r1, r0
   267b8:	mov	r0, r6
   267bc:	mov	r1, r5
   267c0:	bl	163ec <ReadUInt16Data>
   267c4:	mov	r0, r9
   267c8:	sub	sp, fp, #28
   267cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   267d0:	ldr	r2, [r8]
   267d4:	cmp	r2, #1
   267d8:	bne	26930 <ReadDataSlab2+0x3d8>
   267dc:	ldr	r1, [r7]
   267e0:	ldr	r0, [r4]
   267e4:	cmp	r0, r1
   267e8:	bne	270a8 <ReadDataSlab2+0xb50>
   267ec:	ldr	r1, [r8, #4]
   267f0:	cmp	r1, #1
   267f4:	bne	270a4 <ReadDataSlab2+0xb4c>
   267f8:	ldr	r1, [r4, #4]
   267fc:	mov	r2, sl
   26800:	mul	r3, r1, r0
   26804:	mov	r0, r6
   26808:	mov	r1, r5
   2680c:	bl	da88 <ReadInt32Data>
   26810:	mov	r0, r9
   26814:	sub	sp, fp, #28
   26818:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2681c:	ldr	r2, [r8]
   26820:	cmp	r2, #1
   26824:	bne	26938 <ReadDataSlab2+0x3e0>
   26828:	ldr	r1, [r7]
   2682c:	ldr	r0, [r4]
   26830:	cmp	r0, r1
   26834:	bne	271e0 <ReadDataSlab2+0xc88>
   26838:	ldr	r1, [r8, #4]
   2683c:	cmp	r1, #1
   26840:	bne	271dc <ReadDataSlab2+0xc84>
   26844:	ldr	r1, [r4, #4]
   26848:	mov	r2, sl
   2684c:	mul	r3, r1, r0
   26850:	mov	r0, r6
   26854:	mov	r1, r5
   26858:	bl	10b54 <ReadUInt32Data>
   2685c:	mov	r0, r9
   26860:	sub	sp, fp, #28
   26864:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26868:	ldr	r2, [r8]
   2686c:	cmp	r2, #1
   26870:	bne	26940 <ReadDataSlab2+0x3e8>
   26874:	ldr	r1, [r7]
   26878:	ldr	r0, [r4]
   2687c:	cmp	r0, r1
   26880:	bne	27318 <ReadDataSlab2+0xdc0>
   26884:	ldr	r1, [r8, #4]
   26888:	cmp	r1, #1
   2688c:	bne	27314 <ReadDataSlab2+0xdbc>
   26890:	ldr	r1, [r4, #4]
   26894:	mov	r2, sl
   26898:	mul	r3, r1, r0
   2689c:	mov	r0, r6
   268a0:	mov	r1, r5
   268a4:	bl	b790 <ReadUInt64Data>
   268a8:	mov	r0, r9
   268ac:	sub	sp, fp, #28
   268b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   268b4:	ldr	r2, [r8]
   268b8:	cmp	r2, #1
   268bc:	bne	26948 <ReadDataSlab2+0x3f0>
   268c0:	ldr	r1, [r7]
   268c4:	ldr	r0, [r4]
   268c8:	cmp	r0, r1
   268cc:	bne	27450 <ReadDataSlab2+0xef8>
   268d0:	ldr	r1, [r8, #4]
   268d4:	cmp	r1, #1
   268d8:	bne	2744c <ReadDataSlab2+0xef4>
   268dc:	ldr	r1, [r4, #4]
   268e0:	mov	r2, sl
   268e4:	mul	r3, r1, r0
   268e8:	mov	r0, r6
   268ec:	mov	r1, r5
   268f0:	bl	9498 <ReadInt64Data>
   268f4:	mov	r0, r9
   268f8:	sub	sp, fp, #28
   268fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26900:	ldr	r1, [r7]
   26904:	b	26954 <ReadDataSlab2+0x3fc>
   26908:	ldr	r1, [r7]
   2690c:	b	26a90 <ReadDataSlab2+0x538>
   26910:	ldr	r1, [r7]
   26914:	b	26bc8 <ReadDataSlab2+0x670>
   26918:	ldr	r1, [r7]
   2691c:	b	26d00 <ReadDataSlab2+0x7a8>
   26920:	ldr	r1, [r7]
   26924:	b	26e38 <ReadDataSlab2+0x8e0>
   26928:	ldr	r1, [r7]
   2692c:	b	26f70 <ReadDataSlab2+0xa18>
   26930:	ldr	r1, [r7]
   26934:	b	270a8 <ReadDataSlab2+0xb50>
   26938:	ldr	r1, [r7]
   2693c:	b	271e0 <ReadDataSlab2+0xc88>
   26940:	ldr	r1, [r7]
   26944:	b	27318 <ReadDataSlab2+0xdc0>
   26948:	ldr	r1, [r7]
   2694c:	b	27450 <ReadDataSlab2+0xef8>
   26950:	mov	r1, r0
   26954:	ldr	r0, [r6]
   26958:	ldr	r8, [r8, #4]
   2695c:	str	r1, [sp, #8]
   26960:	str	r2, [sp, #12]
   26964:	bl	1840 <ftell@plt>
   26968:	cmn	r0, #1
   2696c:	beq	27584 <ReadDataSlab2+0x102c>
   26970:	ldr	r0, [fp, #12]
   26974:	ldr	r1, [sp, #16]
   26978:	mov	r2, #1
   2697c:	ldr	r0, [r0, #4]
   26980:	mul	r0, r0, r1
   26984:	ldr	r1, [r7]
   26988:	mul	r1, r0, r1
   2698c:	ldr	r0, [r6]
   26990:	bl	1a2c <fseek@plt>
   26994:	ldr	r0, [r4, #4]
   26998:	cmp	r0, #1
   2699c:	blt	265a4 <ReadDataSlab2+0x4c>
   269a0:	ldr	r0, [sp, #12]
   269a4:	ldr	r1, [sp, #16]
   269a8:	mov	r4, #0
   269ac:	sub	r0, r0, #1
   269b0:	mul	r7, r0, r1
   269b4:	mul	r0, r8, r1
   269b8:	ldr	r1, [sp, #8]
   269bc:	mul	r0, r0, r1
   269c0:	str	r0, [sp, #8]
   269c4:	ldr	r0, [r6]
   269c8:	bl	1840 <ftell@plt>
   269cc:	cmn	r0, #1
   269d0:	beq	27584 <ReadDataSlab2+0x102c>
   269d4:	mov	r9, r0
   269d8:	ldr	r0, [fp, #12]
   269dc:	ldr	r1, [sp, #16]
   269e0:	mov	r2, #1
   269e4:	str	r4, [sp, #12]
   269e8:	ldr	r0, [r0]
   269ec:	mul	r1, r0, r1
   269f0:	ldr	r0, [r6]
   269f4:	bl	1a2c <fseek@plt>
   269f8:	ldr	r4, [fp, #20]
   269fc:	ldr	r0, [r4]
   26a00:	cmp	r0, #1
   26a04:	blt	26a44 <ReadDataSlab2+0x4ec>
   26a08:	mov	r8, #0
   26a0c:	mov	r0, r6
   26a10:	mov	r1, r5
   26a14:	mov	r2, sl
   26a18:	mov	r3, #1
   26a1c:	bl	38dc <ReadDoubleData>
   26a20:	ldr	r0, [r6]
   26a24:	mov	r1, r7
   26a28:	mov	r2, #1
   26a2c:	bl	1a2c <fseek@plt>
   26a30:	ldr	r0, [r4]
   26a34:	add	r8, r8, #1
   26a38:	add	r5, r5, #8
   26a3c:	cmp	r8, r0
   26a40:	blt	26a0c <ReadDataSlab2+0x4b4>
   26a44:	ldr	r0, [r6]
   26a48:	bl	1840 <ftell@plt>
   26a4c:	cmn	r0, #1
   26a50:	beq	27584 <ReadDataSlab2+0x102c>
   26a54:	ldr	r1, [sp, #8]
   26a58:	mov	r2, #1
   26a5c:	add	r1, r9, r1
   26a60:	sub	r1, r1, r0
   26a64:	ldr	r0, [r6]
   26a68:	bl	1a2c <fseek@plt>
   26a6c:	mov	r0, r4
   26a70:	ldr	r4, [sp, #12]
   26a74:	mov	r9, #0
   26a78:	ldr	r0, [r0, #4]
   26a7c:	add	r4, r4, #1
   26a80:	cmp	r4, r0
   26a84:	blt	269c4 <ReadDataSlab2+0x46c>
   26a88:	b	265a4 <ReadDataSlab2+0x4c>
   26a8c:	mov	r1, r0
   26a90:	ldr	r0, [r6]
   26a94:	ldr	r8, [r8, #4]
   26a98:	str	r1, [sp, #8]
   26a9c:	str	r2, [sp, #12]
   26aa0:	bl	1840 <ftell@plt>
   26aa4:	cmn	r0, #1
   26aa8:	beq	27584 <ReadDataSlab2+0x102c>
   26aac:	ldr	r0, [fp, #12]
   26ab0:	ldr	r1, [sp, #16]
   26ab4:	mov	r2, #1
   26ab8:	ldr	r0, [r0, #4]
   26abc:	mul	r0, r0, r1
   26ac0:	ldr	r1, [r7]
   26ac4:	mul	r1, r0, r1
   26ac8:	ldr	r0, [r6]
   26acc:	bl	1a2c <fseek@plt>
   26ad0:	ldr	r0, [r4, #4]
   26ad4:	cmp	r0, #1
   26ad8:	blt	265a4 <ReadDataSlab2+0x4c>
   26adc:	ldr	r0, [sp, #12]
   26ae0:	ldr	r1, [sp, #16]
   26ae4:	mov	r4, #0
   26ae8:	sub	r0, r0, #1
   26aec:	mul	r7, r0, r1
   26af0:	mul	r0, r8, r1
   26af4:	ldr	r1, [sp, #8]
   26af8:	mul	r0, r0, r1
   26afc:	str	r0, [sp, #4]
   26b00:	ldr	r0, [r6]
   26b04:	bl	1840 <ftell@plt>
   26b08:	cmn	r0, #1
   26b0c:	beq	27584 <ReadDataSlab2+0x102c>
   26b10:	str	r0, [sp, #8]
   26b14:	ldr	r0, [fp, #12]
   26b18:	ldr	r1, [sp, #16]
   26b1c:	mov	r2, #1
   26b20:	str	r4, [sp, #12]
   26b24:	ldr	r0, [r0]
   26b28:	mul	r1, r0, r1
   26b2c:	ldr	r0, [r6]
   26b30:	bl	1a2c <fseek@plt>
   26b34:	ldr	r9, [fp, #20]
   26b38:	ldr	r0, [r9]
   26b3c:	cmp	r0, #1
   26b40:	blt	26b80 <ReadDataSlab2+0x628>
   26b44:	mov	r8, #0
   26b48:	mov	r0, r6
   26b4c:	mov	r1, r5
   26b50:	mov	r2, sl
   26b54:	mov	r3, #1
   26b58:	bl	6fa0 <ReadSingleData>
   26b5c:	ldr	r0, [r6]
   26b60:	mov	r1, r7
   26b64:	mov	r2, #1
   26b68:	bl	1a2c <fseek@plt>
   26b6c:	ldr	r0, [r9]
   26b70:	add	r8, r8, #1
   26b74:	add	r5, r5, #4
   26b78:	cmp	r8, r0
   26b7c:	blt	26b48 <ReadDataSlab2+0x5f0>
   26b80:	ldr	r0, [r6]
   26b84:	bl	1840 <ftell@plt>
   26b88:	cmn	r0, #1
   26b8c:	beq	27584 <ReadDataSlab2+0x102c>
   26b90:	ldmib	sp, {r1, r2}
   26b94:	add	r1, r2, r1
   26b98:	mov	r2, #1
   26b9c:	sub	r1, r1, r0
   26ba0:	ldr	r0, [r6]
   26ba4:	bl	1a2c <fseek@plt>
   26ba8:	ldr	r4, [sp, #12]
   26bac:	ldr	r0, [r9, #4]
   26bb0:	mov	r9, #0
   26bb4:	add	r4, r4, #1
   26bb8:	cmp	r4, r0
   26bbc:	blt	26b00 <ReadDataSlab2+0x5a8>
   26bc0:	b	265a4 <ReadDataSlab2+0x4c>
   26bc4:	mov	r1, r0
   26bc8:	ldr	r0, [r6]
   26bcc:	ldr	r8, [r8, #4]
   26bd0:	str	r1, [sp, #8]
   26bd4:	str	r2, [sp, #12]
   26bd8:	bl	1840 <ftell@plt>
   26bdc:	cmn	r0, #1
   26be0:	beq	27584 <ReadDataSlab2+0x102c>
   26be4:	ldr	r0, [fp, #12]
   26be8:	ldr	r1, [sp, #16]
   26bec:	mov	r2, #1
   26bf0:	ldr	r0, [r0, #4]
   26bf4:	mul	r0, r0, r1
   26bf8:	ldr	r1, [r7]
   26bfc:	mul	r1, r0, r1
   26c00:	ldr	r0, [r6]
   26c04:	bl	1a2c <fseek@plt>
   26c08:	ldr	r0, [r4, #4]
   26c0c:	cmp	r0, #1
   26c10:	blt	265a4 <ReadDataSlab2+0x4c>
   26c14:	ldr	r0, [sp, #12]
   26c18:	ldr	r1, [sp, #16]
   26c1c:	sub	r0, r0, #1
   26c20:	mul	r7, r0, r1
   26c24:	mul	r0, r8, r1
   26c28:	ldr	r1, [sp, #8]
   26c2c:	mov	r8, #0
   26c30:	mul	r0, r0, r1
   26c34:	str	r0, [sp, #8]
   26c38:	ldr	r0, [r6]
   26c3c:	bl	1840 <ftell@plt>
   26c40:	cmn	r0, #1
   26c44:	beq	27584 <ReadDataSlab2+0x102c>
   26c48:	mov	r9, r0
   26c4c:	ldr	r0, [fp, #12]
   26c50:	ldr	r1, [sp, #16]
   26c54:	mov	r2, #1
   26c58:	ldr	r0, [r0]
   26c5c:	mul	r1, r0, r1
   26c60:	ldr	r0, [r6]
   26c64:	bl	1a2c <fseek@plt>
   26c68:	ldr	r4, [fp, #20]
   26c6c:	ldr	r0, [r4]
   26c70:	cmp	r0, #1
   26c74:	blt	26cbc <ReadDataSlab2+0x764>
   26c78:	str	r8, [sp, #12]
   26c7c:	mov	r8, #0
   26c80:	add	r1, r5, r8
   26c84:	mov	r0, r6
   26c88:	mov	r2, sl
   26c8c:	mov	r3, #1
   26c90:	bl	18bb8 <ReadInt8Data>
   26c94:	ldr	r0, [r6]
   26c98:	mov	r1, r7
   26c9c:	mov	r2, #1
   26ca0:	bl	1a2c <fseek@plt>
   26ca4:	ldr	r0, [r4]
   26ca8:	add	r8, r8, #1
   26cac:	cmp	r8, r0
   26cb0:	blt	26c80 <ReadDataSlab2+0x728>
   26cb4:	add	r5, r5, r8
   26cb8:	ldr	r8, [sp, #12]
   26cbc:	ldr	r0, [r6]
   26cc0:	bl	1840 <ftell@plt>
   26cc4:	cmn	r0, #1
   26cc8:	beq	27584 <ReadDataSlab2+0x102c>
   26ccc:	ldr	r1, [sp, #8]
   26cd0:	mov	r2, #1
   26cd4:	add	r1, r9, r1
   26cd8:	sub	r1, r1, r0
   26cdc:	ldr	r0, [r6]
   26ce0:	bl	1a2c <fseek@plt>
   26ce4:	ldr	r0, [r4, #4]
   26ce8:	add	r8, r8, #1
   26cec:	mov	r9, #0
   26cf0:	cmp	r8, r0
   26cf4:	blt	26c38 <ReadDataSlab2+0x6e0>
   26cf8:	b	265a4 <ReadDataSlab2+0x4c>
   26cfc:	mov	r1, r0
   26d00:	ldr	r0, [r6]
   26d04:	ldr	r8, [r8, #4]
   26d08:	str	r1, [sp, #8]
   26d0c:	str	r2, [sp, #12]
   26d10:	bl	1840 <ftell@plt>
   26d14:	cmn	r0, #1
   26d18:	beq	27584 <ReadDataSlab2+0x102c>
   26d1c:	ldr	r0, [fp, #12]
   26d20:	ldr	r1, [sp, #16]
   26d24:	mov	r2, #1
   26d28:	ldr	r0, [r0, #4]
   26d2c:	mul	r0, r0, r1
   26d30:	ldr	r1, [r7]
   26d34:	mul	r1, r0, r1
   26d38:	ldr	r0, [r6]
   26d3c:	bl	1a2c <fseek@plt>
   26d40:	ldr	r0, [r4, #4]
   26d44:	cmp	r0, #1
   26d48:	blt	265a4 <ReadDataSlab2+0x4c>
   26d4c:	ldr	r0, [sp, #12]
   26d50:	ldr	r1, [sp, #16]
   26d54:	sub	r0, r0, #1
   26d58:	mul	r7, r0, r1
   26d5c:	mul	r0, r8, r1
   26d60:	ldr	r1, [sp, #8]
   26d64:	mov	r8, #0
   26d68:	mul	r0, r0, r1
   26d6c:	str	r0, [sp, #8]
   26d70:	ldr	r0, [r6]
   26d74:	bl	1840 <ftell@plt>
   26d78:	cmn	r0, #1
   26d7c:	beq	27584 <ReadDataSlab2+0x102c>
   26d80:	mov	r9, r0
   26d84:	ldr	r0, [fp, #12]
   26d88:	ldr	r1, [sp, #16]
   26d8c:	mov	r2, #1
   26d90:	ldr	r0, [r0]
   26d94:	mul	r1, r0, r1
   26d98:	ldr	r0, [r6]
   26d9c:	bl	1a2c <fseek@plt>
   26da0:	ldr	r4, [fp, #20]
   26da4:	ldr	r0, [r4]
   26da8:	cmp	r0, #1
   26dac:	blt	26df4 <ReadDataSlab2+0x89c>
   26db0:	str	r8, [sp, #12]
   26db4:	mov	r8, #0
   26db8:	add	r1, r5, r8
   26dbc:	mov	r0, r6
   26dc0:	mov	r2, sl
   26dc4:	mov	r3, #1
   26dc8:	bl	1b1ec <ReadUInt8Data>
   26dcc:	ldr	r0, [r6]
   26dd0:	mov	r1, r7
   26dd4:	mov	r2, #1
   26dd8:	bl	1a2c <fseek@plt>
   26ddc:	ldr	r0, [r4]
   26de0:	add	r8, r8, #1
   26de4:	cmp	r8, r0
   26de8:	blt	26db8 <ReadDataSlab2+0x860>
   26dec:	add	r5, r5, r8
   26df0:	ldr	r8, [sp, #12]
   26df4:	ldr	r0, [r6]
   26df8:	bl	1840 <ftell@plt>
   26dfc:	cmn	r0, #1
   26e00:	beq	27584 <ReadDataSlab2+0x102c>
   26e04:	ldr	r1, [sp, #8]
   26e08:	mov	r2, #1
   26e0c:	add	r1, r9, r1
   26e10:	sub	r1, r1, r0
   26e14:	ldr	r0, [r6]
   26e18:	bl	1a2c <fseek@plt>
   26e1c:	ldr	r0, [r4, #4]
   26e20:	add	r8, r8, #1
   26e24:	mov	r9, #0
   26e28:	cmp	r8, r0
   26e2c:	blt	26d70 <ReadDataSlab2+0x818>
   26e30:	b	265a4 <ReadDataSlab2+0x4c>
   26e34:	mov	r1, r0
   26e38:	ldr	r0, [r6]
   26e3c:	ldr	r8, [r8, #4]
   26e40:	str	r1, [sp, #8]
   26e44:	str	r2, [sp, #12]
   26e48:	bl	1840 <ftell@plt>
   26e4c:	cmn	r0, #1
   26e50:	beq	27584 <ReadDataSlab2+0x102c>
   26e54:	ldr	r0, [fp, #12]
   26e58:	ldr	r1, [sp, #16]
   26e5c:	mov	r2, #1
   26e60:	ldr	r0, [r0, #4]
   26e64:	mul	r0, r0, r1
   26e68:	ldr	r1, [r7]
   26e6c:	mul	r1, r0, r1
   26e70:	ldr	r0, [r6]
   26e74:	bl	1a2c <fseek@plt>
   26e78:	ldr	r0, [r4, #4]
   26e7c:	cmp	r0, #1
   26e80:	blt	265a4 <ReadDataSlab2+0x4c>
   26e84:	ldr	r0, [sp, #12]
   26e88:	ldr	r1, [sp, #16]
   26e8c:	mov	r4, #0
   26e90:	sub	r0, r0, #1
   26e94:	mul	r7, r0, r1
   26e98:	mul	r0, r8, r1
   26e9c:	ldr	r1, [sp, #8]
   26ea0:	mul	r0, r0, r1
   26ea4:	str	r0, [sp, #4]
   26ea8:	ldr	r0, [r6]
   26eac:	bl	1840 <ftell@plt>
   26eb0:	cmn	r0, #1
   26eb4:	beq	27584 <ReadDataSlab2+0x102c>
   26eb8:	str	r0, [sp, #8]
   26ebc:	ldr	r0, [fp, #12]
   26ec0:	ldr	r1, [sp, #16]
   26ec4:	mov	r2, #1
   26ec8:	str	r4, [sp, #12]
   26ecc:	ldr	r0, [r0]
   26ed0:	mul	r1, r0, r1
   26ed4:	ldr	r0, [r6]
   26ed8:	bl	1a2c <fseek@plt>
   26edc:	ldr	r9, [fp, #20]
   26ee0:	ldr	r0, [r9]
   26ee4:	cmp	r0, #1
   26ee8:	blt	26f28 <ReadDataSlab2+0x9d0>
   26eec:	mov	r8, #0
   26ef0:	mov	r0, r6
   26ef4:	mov	r1, r5
   26ef8:	mov	r2, sl
   26efc:	mov	r3, #1
   26f00:	bl	13c20 <ReadInt16Data>
   26f04:	ldr	r0, [r6]
   26f08:	mov	r1, r7
   26f0c:	mov	r2, #1
   26f10:	bl	1a2c <fseek@plt>
   26f14:	ldr	r0, [r9]
   26f18:	add	r8, r8, #1
   26f1c:	add	r5, r5, #2
   26f20:	cmp	r8, r0
   26f24:	blt	26ef0 <ReadDataSlab2+0x998>
   26f28:	ldr	r0, [r6]
   26f2c:	bl	1840 <ftell@plt>
   26f30:	cmn	r0, #1
   26f34:	beq	27584 <ReadDataSlab2+0x102c>
   26f38:	ldmib	sp, {r1, r2}
   26f3c:	add	r1, r2, r1
   26f40:	mov	r2, #1
   26f44:	sub	r1, r1, r0
   26f48:	ldr	r0, [r6]
   26f4c:	bl	1a2c <fseek@plt>
   26f50:	ldr	r4, [sp, #12]
   26f54:	ldr	r0, [r9, #4]
   26f58:	mov	r9, #0
   26f5c:	add	r4, r4, #1
   26f60:	cmp	r4, r0
   26f64:	blt	26ea8 <ReadDataSlab2+0x950>
   26f68:	b	265a4 <ReadDataSlab2+0x4c>
   26f6c:	mov	r1, r0
   26f70:	ldr	r0, [r6]
   26f74:	ldr	r8, [r8, #4]
   26f78:	str	r1, [sp, #8]
   26f7c:	str	r2, [sp, #12]
   26f80:	bl	1840 <ftell@plt>
   26f84:	cmn	r0, #1
   26f88:	beq	27584 <ReadDataSlab2+0x102c>
   26f8c:	ldr	r0, [fp, #12]
   26f90:	ldr	r1, [sp, #16]
   26f94:	mov	r2, #1
   26f98:	ldr	r0, [r0, #4]
   26f9c:	mul	r0, r0, r1
   26fa0:	ldr	r1, [r7]
   26fa4:	mul	r1, r0, r1
   26fa8:	ldr	r0, [r6]
   26fac:	bl	1a2c <fseek@plt>
   26fb0:	ldr	r0, [r4, #4]
   26fb4:	cmp	r0, #1
   26fb8:	blt	265a4 <ReadDataSlab2+0x4c>
   26fbc:	ldr	r0, [sp, #12]
   26fc0:	ldr	r1, [sp, #16]
   26fc4:	mov	r4, #0
   26fc8:	sub	r0, r0, #1
   26fcc:	mul	r7, r0, r1
   26fd0:	mul	r0, r8, r1
   26fd4:	ldr	r1, [sp, #8]
   26fd8:	mul	r0, r0, r1
   26fdc:	str	r0, [sp, #4]
   26fe0:	ldr	r0, [r6]
   26fe4:	bl	1840 <ftell@plt>
   26fe8:	cmn	r0, #1
   26fec:	beq	27584 <ReadDataSlab2+0x102c>
   26ff0:	str	r0, [sp, #8]
   26ff4:	ldr	r0, [fp, #12]
   26ff8:	ldr	r1, [sp, #16]
   26ffc:	mov	r2, #1
   27000:	str	r4, [sp, #12]
   27004:	ldr	r0, [r0]
   27008:	mul	r1, r0, r1
   2700c:	ldr	r0, [r6]
   27010:	bl	1a2c <fseek@plt>
   27014:	ldr	r9, [fp, #20]
   27018:	ldr	r0, [r9]
   2701c:	cmp	r0, #1
   27020:	blt	27060 <ReadDataSlab2+0xb08>
   27024:	mov	r8, #0
   27028:	mov	r0, r6
   2702c:	mov	r1, r5
   27030:	mov	r2, sl
   27034:	mov	r3, #1
   27038:	bl	163ec <ReadUInt16Data>
   2703c:	ldr	r0, [r6]
   27040:	mov	r1, r7
   27044:	mov	r2, #1
   27048:	bl	1a2c <fseek@plt>
   2704c:	ldr	r0, [r9]
   27050:	add	r8, r8, #1
   27054:	add	r5, r5, #2
   27058:	cmp	r8, r0
   2705c:	blt	27028 <ReadDataSlab2+0xad0>
   27060:	ldr	r0, [r6]
   27064:	bl	1840 <ftell@plt>
   27068:	cmn	r0, #1
   2706c:	beq	27584 <ReadDataSlab2+0x102c>
   27070:	ldmib	sp, {r1, r2}
   27074:	add	r1, r2, r1
   27078:	mov	r2, #1
   2707c:	sub	r1, r1, r0
   27080:	ldr	r0, [r6]
   27084:	bl	1a2c <fseek@plt>
   27088:	ldr	r4, [sp, #12]
   2708c:	ldr	r0, [r9, #4]
   27090:	mov	r9, #0
   27094:	add	r4, r4, #1
   27098:	cmp	r4, r0
   2709c:	blt	26fe0 <ReadDataSlab2+0xa88>
   270a0:	b	265a4 <ReadDataSlab2+0x4c>
   270a4:	mov	r1, r0
   270a8:	ldr	r0, [r6]
   270ac:	ldr	r8, [r8, #4]
   270b0:	str	r1, [sp, #8]
   270b4:	str	r2, [sp, #12]
   270b8:	bl	1840 <ftell@plt>
   270bc:	cmn	r0, #1
   270c0:	beq	27584 <ReadDataSlab2+0x102c>
   270c4:	ldr	r0, [fp, #12]
   270c8:	ldr	r1, [sp, #16]
   270cc:	mov	r2, #1
   270d0:	ldr	r0, [r0, #4]
   270d4:	mul	r0, r0, r1
   270d8:	ldr	r1, [r7]
   270dc:	mul	r1, r0, r1
   270e0:	ldr	r0, [r6]
   270e4:	bl	1a2c <fseek@plt>
   270e8:	ldr	r0, [r4, #4]
   270ec:	cmp	r0, #1
   270f0:	blt	265a4 <ReadDataSlab2+0x4c>
   270f4:	ldr	r0, [sp, #12]
   270f8:	ldr	r1, [sp, #16]
   270fc:	sub	r0, r0, #1
   27100:	mul	r7, r0, r1
   27104:	mul	r0, r8, r1
   27108:	ldr	r1, [sp, #8]
   2710c:	mov	r8, #0
   27110:	mul	r0, r0, r1
   27114:	str	r0, [sp, #8]
   27118:	ldr	r0, [r6]
   2711c:	bl	1840 <ftell@plt>
   27120:	cmn	r0, #1
   27124:	beq	27584 <ReadDataSlab2+0x102c>
   27128:	mov	r9, r0
   2712c:	ldr	r0, [fp, #12]
   27130:	ldr	r1, [sp, #16]
   27134:	mov	r2, #1
   27138:	ldr	r0, [r0]
   2713c:	mul	r1, r0, r1
   27140:	ldr	r0, [r6]
   27144:	bl	1a2c <fseek@plt>
   27148:	ldr	r4, [fp, #20]
   2714c:	str	r8, [sp, #12]
   27150:	ldr	r0, [r4]
   27154:	cmp	r0, #1
   27158:	blt	27198 <ReadDataSlab2+0xc40>
   2715c:	mov	r8, #0
   27160:	mov	r0, r6
   27164:	mov	r1, r5
   27168:	mov	r2, sl
   2716c:	mov	r3, #1
   27170:	bl	da88 <ReadInt32Data>
   27174:	ldr	r0, [r6]
   27178:	mov	r1, r7
   2717c:	mov	r2, #1
   27180:	bl	1a2c <fseek@plt>
   27184:	ldr	r0, [r4]
   27188:	add	r8, r8, #1
   2718c:	add	r5, r5, #4
   27190:	cmp	r8, r0
   27194:	blt	27160 <ReadDataSlab2+0xc08>
   27198:	ldr	r0, [r6]
   2719c:	bl	1840 <ftell@plt>
   271a0:	cmn	r0, #1
   271a4:	beq	27584 <ReadDataSlab2+0x102c>
   271a8:	ldr	r1, [sp, #8]
   271ac:	mov	r2, #1
   271b0:	add	r1, r9, r1
   271b4:	sub	r1, r1, r0
   271b8:	ldr	r0, [r6]
   271bc:	bl	1a2c <fseek@plt>
   271c0:	ldr	r8, [sp, #12]
   271c4:	ldr	r0, [r4, #4]
   271c8:	mov	r9, #0
   271cc:	add	r8, r8, #1
   271d0:	cmp	r8, r0
   271d4:	blt	27118 <ReadDataSlab2+0xbc0>
   271d8:	b	265a4 <ReadDataSlab2+0x4c>
   271dc:	mov	r1, r0
   271e0:	ldr	r0, [r6]
   271e4:	ldr	r8, [r8, #4]
   271e8:	str	r1, [sp, #8]
   271ec:	str	r2, [sp, #12]
   271f0:	bl	1840 <ftell@plt>
   271f4:	cmn	r0, #1
   271f8:	beq	27584 <ReadDataSlab2+0x102c>
   271fc:	ldr	r0, [fp, #12]
   27200:	ldr	r1, [sp, #16]
   27204:	mov	r2, #1
   27208:	ldr	r0, [r0, #4]
   2720c:	mul	r0, r0, r1
   27210:	ldr	r1, [r7]
   27214:	mul	r1, r0, r1
   27218:	ldr	r0, [r6]
   2721c:	bl	1a2c <fseek@plt>
   27220:	ldr	r0, [r4, #4]
   27224:	cmp	r0, #1
   27228:	blt	265a4 <ReadDataSlab2+0x4c>
   2722c:	ldr	r0, [sp, #12]
   27230:	ldr	r1, [sp, #16]
   27234:	mov	r4, #0
   27238:	sub	r0, r0, #1
   2723c:	mul	r7, r0, r1
   27240:	mul	r0, r8, r1
   27244:	ldr	r1, [sp, #8]
   27248:	mul	r0, r0, r1
   2724c:	str	r0, [sp, #4]
   27250:	ldr	r0, [r6]
   27254:	bl	1840 <ftell@plt>
   27258:	cmn	r0, #1
   2725c:	beq	27584 <ReadDataSlab2+0x102c>
   27260:	str	r0, [sp, #8]
   27264:	ldr	r0, [fp, #12]
   27268:	ldr	r1, [sp, #16]
   2726c:	mov	r2, #1
   27270:	str	r4, [sp, #12]
   27274:	ldr	r0, [r0]
   27278:	mul	r1, r0, r1
   2727c:	ldr	r0, [r6]
   27280:	bl	1a2c <fseek@plt>
   27284:	ldr	r9, [fp, #20]
   27288:	ldr	r0, [r9]
   2728c:	cmp	r0, #1
   27290:	blt	272d0 <ReadDataSlab2+0xd78>
   27294:	mov	r8, #0
   27298:	mov	r0, r6
   2729c:	mov	r1, r5
   272a0:	mov	r2, sl
   272a4:	mov	r3, #1
   272a8:	bl	10b54 <ReadUInt32Data>
   272ac:	ldr	r0, [r6]
   272b0:	mov	r1, r7
   272b4:	mov	r2, #1
   272b8:	bl	1a2c <fseek@plt>
   272bc:	ldr	r0, [r9]
   272c0:	add	r8, r8, #1
   272c4:	add	r5, r5, #4
   272c8:	cmp	r8, r0
   272cc:	blt	27298 <ReadDataSlab2+0xd40>
   272d0:	ldr	r0, [r6]
   272d4:	bl	1840 <ftell@plt>
   272d8:	cmn	r0, #1
   272dc:	beq	27584 <ReadDataSlab2+0x102c>
   272e0:	ldmib	sp, {r1, r2}
   272e4:	add	r1, r2, r1
   272e8:	mov	r2, #1
   272ec:	sub	r1, r1, r0
   272f0:	ldr	r0, [r6]
   272f4:	bl	1a2c <fseek@plt>
   272f8:	ldr	r4, [sp, #12]
   272fc:	ldr	r0, [r9, #4]
   27300:	mov	r9, #0
   27304:	add	r4, r4, #1
   27308:	cmp	r4, r0
   2730c:	blt	27250 <ReadDataSlab2+0xcf8>
   27310:	b	265a4 <ReadDataSlab2+0x4c>
   27314:	mov	r1, r0
   27318:	ldr	r0, [r6]
   2731c:	ldr	r8, [r8, #4]
   27320:	str	r1, [sp, #8]
   27324:	str	r2, [sp, #12]
   27328:	bl	1840 <ftell@plt>
   2732c:	cmn	r0, #1
   27330:	beq	27584 <ReadDataSlab2+0x102c>
   27334:	ldr	r0, [fp, #12]
   27338:	ldr	r1, [sp, #16]
   2733c:	mov	r2, #1
   27340:	ldr	r0, [r0, #4]
   27344:	mul	r0, r0, r1
   27348:	ldr	r1, [r7]
   2734c:	mul	r1, r0, r1
   27350:	ldr	r0, [r6]
   27354:	bl	1a2c <fseek@plt>
   27358:	ldr	r0, [r4, #4]
   2735c:	cmp	r0, #1
   27360:	blt	265a4 <ReadDataSlab2+0x4c>
   27364:	ldr	r0, [sp, #12]
   27368:	ldr	r1, [sp, #16]
   2736c:	mov	r4, #0
   27370:	sub	r0, r0, #1
   27374:	mul	r7, r0, r1
   27378:	mul	r0, r8, r1
   2737c:	ldr	r1, [sp, #8]
   27380:	mul	r0, r0, r1
   27384:	str	r0, [sp, #4]
   27388:	ldr	r0, [r6]
   2738c:	bl	1840 <ftell@plt>
   27390:	cmn	r0, #1
   27394:	beq	27584 <ReadDataSlab2+0x102c>
   27398:	str	r0, [sp, #8]
   2739c:	ldr	r0, [fp, #12]
   273a0:	ldr	r1, [sp, #16]
   273a4:	mov	r2, #1
   273a8:	str	r4, [sp, #12]
   273ac:	ldr	r0, [r0]
   273b0:	mul	r1, r0, r1
   273b4:	ldr	r0, [r6]
   273b8:	bl	1a2c <fseek@plt>
   273bc:	ldr	r9, [fp, #20]
   273c0:	ldr	r0, [r9]
   273c4:	cmp	r0, #1
   273c8:	blt	27408 <ReadDataSlab2+0xeb0>
   273cc:	mov	r8, #0
   273d0:	mov	r0, r6
   273d4:	mov	r1, r5
   273d8:	mov	r2, sl
   273dc:	mov	r3, #1
   273e0:	bl	b790 <ReadUInt64Data>
   273e4:	ldr	r0, [r6]
   273e8:	mov	r1, r7
   273ec:	mov	r2, #1
   273f0:	bl	1a2c <fseek@plt>
   273f4:	ldr	r0, [r9]
   273f8:	add	r8, r8, #1
   273fc:	add	r5, r5, #8
   27400:	cmp	r8, r0
   27404:	blt	273d0 <ReadDataSlab2+0xe78>
   27408:	ldr	r0, [r6]
   2740c:	bl	1840 <ftell@plt>
   27410:	cmn	r0, #1
   27414:	beq	27584 <ReadDataSlab2+0x102c>
   27418:	ldmib	sp, {r1, r2}
   2741c:	add	r1, r2, r1
   27420:	mov	r2, #1
   27424:	sub	r1, r1, r0
   27428:	ldr	r0, [r6]
   2742c:	bl	1a2c <fseek@plt>
   27430:	ldr	r4, [sp, #12]
   27434:	ldr	r0, [r9, #4]
   27438:	mov	r9, #0
   2743c:	add	r4, r4, #1
   27440:	cmp	r4, r0
   27444:	blt	27388 <ReadDataSlab2+0xe30>
   27448:	b	265a4 <ReadDataSlab2+0x4c>
   2744c:	mov	r1, r0
   27450:	ldr	r0, [r6]
   27454:	ldr	r8, [r8, #4]
   27458:	str	r1, [sp, #8]
   2745c:	str	r2, [sp, #12]
   27460:	bl	1840 <ftell@plt>
   27464:	cmn	r0, #1
   27468:	beq	27584 <ReadDataSlab2+0x102c>
   2746c:	ldr	r0, [fp, #12]
   27470:	ldr	r1, [sp, #16]
   27474:	mov	r2, #1
   27478:	ldr	r0, [r0, #4]
   2747c:	mul	r0, r0, r1
   27480:	ldr	r1, [r7]
   27484:	mul	r1, r0, r1
   27488:	ldr	r0, [r6]
   2748c:	bl	1a2c <fseek@plt>
   27490:	ldr	r0, [r4, #4]
   27494:	cmp	r0, #1
   27498:	blt	265a4 <ReadDataSlab2+0x4c>
   2749c:	ldr	r0, [sp, #12]
   274a0:	ldr	r1, [sp, #16]
   274a4:	sub	r0, r0, #1
   274a8:	mul	r7, r0, r1
   274ac:	mul	r0, r8, r1
   274b0:	ldr	r1, [sp, #8]
   274b4:	mov	r8, #0
   274b8:	mul	r0, r0, r1
   274bc:	str	r0, [sp, #8]
   274c0:	ldr	r0, [r6]
   274c4:	bl	1840 <ftell@plt>
   274c8:	cmn	r0, #1
   274cc:	beq	27584 <ReadDataSlab2+0x102c>
   274d0:	mov	r9, r0
   274d4:	ldr	r0, [fp, #12]
   274d8:	ldr	r1, [sp, #16]
   274dc:	mov	r2, #1
   274e0:	ldr	r0, [r0]
   274e4:	mul	r1, r0, r1
   274e8:	ldr	r0, [r6]
   274ec:	bl	1a2c <fseek@plt>
   274f0:	ldr	r4, [fp, #20]
   274f4:	str	r8, [sp, #12]
   274f8:	ldr	r0, [r4]
   274fc:	cmp	r0, #1
   27500:	blt	27540 <ReadDataSlab2+0xfe8>
   27504:	mov	r8, #0
   27508:	mov	r0, r6
   2750c:	mov	r1, r5
   27510:	mov	r2, sl
   27514:	mov	r3, #1
   27518:	bl	9498 <ReadInt64Data>
   2751c:	ldr	r0, [r6]
   27520:	mov	r1, r7
   27524:	mov	r2, #1
   27528:	bl	1a2c <fseek@plt>
   2752c:	ldr	r0, [r4]
   27530:	add	r8, r8, #1
   27534:	add	r5, r5, #8
   27538:	cmp	r8, r0
   2753c:	blt	27508 <ReadDataSlab2+0xfb0>
   27540:	ldr	r0, [r6]
   27544:	bl	1840 <ftell@plt>
   27548:	cmn	r0, #1
   2754c:	beq	27584 <ReadDataSlab2+0x102c>
   27550:	ldr	r1, [sp, #8]
   27554:	mov	r2, #1
   27558:	add	r1, r9, r1
   2755c:	sub	r1, r1, r0
   27560:	ldr	r0, [r6]
   27564:	bl	1a2c <fseek@plt>
   27568:	ldr	r8, [sp, #12]
   2756c:	ldr	r0, [r4, #4]
   27570:	mov	r9, #0
   27574:	add	r8, r8, #1
   27578:	cmp	r8, r0
   2757c:	blt	274c0 <ReadDataSlab2+0xf68>
   27580:	b	265a4 <ReadDataSlab2+0x4c>
   27584:	ldr	r0, [pc, #20]	; 275a0 <ReadDataSlab2+0x1048>
   27588:	add	r0, pc, r0
   2758c:	bl	19b4 <Mat_Critical@plt>
   27590:	mvn	r9, #0
   27594:	mov	r0, r9
   27598:	sub	sp, fp, #28
   2759c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   275a0:	.word	0x00038250

000275a4 <ReadCompressedDataSlab1>:
   275a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   275a8:	add	fp, sp, #28
   275ac:	sub	sp, sp, #68	; 0x44
   275b0:	mov	r4, r2
   275b4:	add	r2, sp, #8
   275b8:	mov	r6, r0
   275bc:	mov	r5, r3
   275c0:	vmov.i32	q8, #0	; 0x00000000
   275c4:	mov	r0, #52	; 0x34
   275c8:	mov	r7, #0
   275cc:	mov	r3, r2
   275d0:	cmp	r6, #0
   275d4:	str	r7, [sp, #56]	; 0x38
   275d8:	vst1.64	{d16-d17}, [r3], r0
   275dc:	add	r0, r2, #32
   275e0:	vst1.64	{d16-d17}, [r0]
   275e4:	add	r0, r2, #16
   275e8:	str	r7, [r3]
   275ec:	vst1.64	{d16-d17}, [r0]
   275f0:	beq	27604 <ReadCompressedDataSlab1+0x60>
   275f4:	cmp	r4, #0
   275f8:	ldrne	r0, [r6]
   275fc:	cmpne	r0, #0
   27600:	bne	27610 <ReadCompressedDataSlab1+0x6c>
   27604:	mov	r0, r7
   27608:	sub	sp, fp, #28
   2760c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27610:	ldr	r9, [fp, #12]
   27614:	ldr	r8, [fp, #8]
   27618:	add	r7, sp, #8
   2761c:	mov	r0, r7
   27620:	bl	1948 <inflateCopy@plt>
   27624:	mov	r0, r6
   27628:	mov	r1, r7
   2762c:	mov	r2, r8
   27630:	mov	r3, r9
   27634:	bl	2728 <InflateSkipData>
   27638:	sub	r0, r5, #6
   2763c:	mov	r7, #0
   27640:	cmp	r0, #9
   27644:	bhi	27b90 <ReadCompressedDataSlab1+0x5ec>
   27648:	ldr	r1, [fp, #16]
   2764c:	mov	r9, r8
   27650:	ldr	r8, [fp, #20]
   27654:	sub	r1, r1, #1
   27658:	str	r1, [sp, #4]
   2765c:	add	r1, pc, #4
   27660:	ldr	r0, [r1, r0, lsl #2]
   27664:	add	pc, r1, r0
   27668:	.word	0x00000028
   2766c:	.word	0x0000008c
   27670:	.word	0x000000f0
   27674:	.word	0x00000154
   27678:	.word	0x000001b8
   2767c:	.word	0x0000021c
   27680:	.word	0x00000280
   27684:	.word	0x000002e4
   27688:	.word	0x00000348
   2768c:	.word	0x000003ac
   27690:	ldr	r0, [sp, #4]
   27694:	cmp	r0, #0
   27698:	beq	27a78 <ReadCompressedDataSlab1+0x4d4>
   2769c:	cmp	r8, #1
   276a0:	blt	27b90 <ReadCompressedDataSlab1+0x5ec>
   276a4:	mov	r7, #0
   276a8:	add	sl, sp, #8
   276ac:	mov	r0, #1
   276b0:	mov	r1, sl
   276b4:	mov	r2, r4
   276b8:	mov	r3, r9
   276bc:	str	r0, [sp]
   276c0:	mov	r0, r6
   276c4:	bl	5584 <ReadCompressedDoubleData>
   276c8:	ldr	r3, [sp, #4]
   276cc:	mov	r5, r0
   276d0:	mov	r0, r6
   276d4:	mov	r1, sl
   276d8:	mov	r2, r9
   276dc:	bl	2728 <InflateSkipData>
   276e0:	add	r7, r5, r7
   276e4:	subs	r8, r8, #1
   276e8:	add	r4, r4, #8
   276ec:	bne	276ac <ReadCompressedDataSlab1+0x108>
   276f0:	b	27b90 <ReadCompressedDataSlab1+0x5ec>
   276f4:	ldr	r0, [sp, #4]
   276f8:	cmp	r0, #0
   276fc:	beq	27a94 <ReadCompressedDataSlab1+0x4f0>
   27700:	cmp	r8, #1
   27704:	blt	27b90 <ReadCompressedDataSlab1+0x5ec>
   27708:	mov	r7, #0
   2770c:	add	sl, sp, #8
   27710:	mov	r0, #1
   27714:	mov	r1, sl
   27718:	mov	r2, r4
   2771c:	mov	r3, r9
   27720:	str	r0, [sp]
   27724:	mov	r0, r6
   27728:	bl	8ef4 <ReadCompressedSingleData>
   2772c:	ldr	r3, [sp, #4]
   27730:	mov	r5, r0
   27734:	mov	r0, r6
   27738:	mov	r1, sl
   2773c:	mov	r2, r9
   27740:	bl	2728 <InflateSkipData>
   27744:	add	r7, r5, r7
   27748:	subs	r8, r8, #1
   2774c:	add	r4, r4, #4
   27750:	bne	27710 <ReadCompressedDataSlab1+0x16c>
   27754:	b	27b90 <ReadCompressedDataSlab1+0x5ec>
   27758:	ldr	r0, [sp, #4]
   2775c:	cmp	r0, #0
   27760:	beq	27ab0 <ReadCompressedDataSlab1+0x50c>
   27764:	cmp	r8, #1
   27768:	blt	27b90 <ReadCompressedDataSlab1+0x5ec>
   2776c:	mov	r7, #0
   27770:	mov	r0, #1
   27774:	add	sl, sp, #8
   27778:	mov	r2, r4
   2777c:	mov	r3, r9
   27780:	str	r0, [sp]
   27784:	mov	r0, r6
   27788:	mov	r1, sl
   2778c:	bl	1acbc <ReadCompressedInt8Data>
   27790:	ldr	r3, [sp, #4]
   27794:	mov	r5, r0
   27798:	mov	r0, r6
   2779c:	mov	r1, sl
   277a0:	mov	r2, r9
   277a4:	bl	2728 <InflateSkipData>
   277a8:	add	r7, r5, r7
   277ac:	subs	r8, r8, #1
   277b0:	add	r4, r4, #1
   277b4:	bne	27770 <ReadCompressedDataSlab1+0x1cc>
   277b8:	b	27b90 <ReadCompressedDataSlab1+0x5ec>
   277bc:	ldr	r0, [sp, #4]
   277c0:	cmp	r0, #0
   277c4:	beq	27acc <ReadCompressedDataSlab1+0x528>
   277c8:	cmp	r8, #1
   277cc:	blt	27b90 <ReadCompressedDataSlab1+0x5ec>
   277d0:	mov	r7, #0
   277d4:	mov	r0, #1
   277d8:	add	sl, sp, #8
   277dc:	mov	r2, r4
   277e0:	mov	r3, r9
   277e4:	str	r0, [sp]
   277e8:	mov	r0, r6
   277ec:	mov	r1, sl
   277f0:	bl	1d2f0 <ReadCompressedUInt8Data>
   277f4:	ldr	r3, [sp, #4]
   277f8:	mov	r5, r0
   277fc:	mov	r0, r6
   27800:	mov	r1, sl
   27804:	mov	r2, r9
   27808:	bl	2728 <InflateSkipData>
   2780c:	add	r7, r5, r7
   27810:	subs	r8, r8, #1
   27814:	add	r4, r4, #1
   27818:	bne	277d4 <ReadCompressedDataSlab1+0x230>
   2781c:	b	27b90 <ReadCompressedDataSlab1+0x5ec>
   27820:	ldr	r0, [sp, #4]
   27824:	cmp	r0, #0
   27828:	beq	27ae8 <ReadCompressedDataSlab1+0x544>
   2782c:	cmp	r8, #1
   27830:	blt	27b90 <ReadCompressedDataSlab1+0x5ec>
   27834:	mov	r7, #0
   27838:	add	sl, sp, #8
   2783c:	mov	r0, #1
   27840:	mov	r1, sl
   27844:	mov	r2, r4
   27848:	mov	r3, r9
   2784c:	str	r0, [sp]
   27850:	mov	r0, r6
   27854:	bl	15ebc <ReadCompressedInt16Data>
   27858:	ldr	r3, [sp, #4]
   2785c:	mov	r5, r0
   27860:	mov	r0, r6
   27864:	mov	r1, sl
   27868:	mov	r2, r9
   2786c:	bl	2728 <InflateSkipData>
   27870:	add	r7, r5, r7
   27874:	subs	r8, r8, #1
   27878:	add	r4, r4, #2
   2787c:	bne	2783c <ReadCompressedDataSlab1+0x298>
   27880:	b	27b90 <ReadCompressedDataSlab1+0x5ec>
   27884:	ldr	r0, [sp, #4]
   27888:	cmp	r0, #0
   2788c:	beq	27b04 <ReadCompressedDataSlab1+0x560>
   27890:	cmp	r8, #1
   27894:	blt	27b90 <ReadCompressedDataSlab1+0x5ec>
   27898:	mov	r7, #0
   2789c:	add	sl, sp, #8
   278a0:	mov	r0, #1
   278a4:	mov	r1, sl
   278a8:	mov	r2, r4
   278ac:	mov	r3, r9
   278b0:	str	r0, [sp]
   278b4:	mov	r0, r6
   278b8:	bl	18688 <ReadCompressedUInt16Data>
   278bc:	ldr	r3, [sp, #4]
   278c0:	mov	r5, r0
   278c4:	mov	r0, r6
   278c8:	mov	r1, sl
   278cc:	mov	r2, r9
   278d0:	bl	2728 <InflateSkipData>
   278d4:	add	r7, r5, r7
   278d8:	subs	r8, r8, #1
   278dc:	add	r4, r4, #2
   278e0:	bne	278a0 <ReadCompressedDataSlab1+0x2fc>
   278e4:	b	27b90 <ReadCompressedDataSlab1+0x5ec>
   278e8:	ldr	r0, [sp, #4]
   278ec:	cmp	r0, #0
   278f0:	beq	27b20 <ReadCompressedDataSlab1+0x57c>
   278f4:	cmp	r8, #1
   278f8:	blt	27b90 <ReadCompressedDataSlab1+0x5ec>
   278fc:	mov	r7, #0
   27900:	add	sl, sp, #8
   27904:	mov	r0, #1
   27908:	mov	r1, sl
   2790c:	mov	r2, r4
   27910:	mov	r3, r9
   27914:	str	r0, [sp]
   27918:	mov	r0, r6
   2791c:	bl	10624 <ReadCompressedInt32Data>
   27920:	ldr	r3, [sp, #4]
   27924:	mov	r5, r0
   27928:	mov	r0, r6
   2792c:	mov	r1, sl
   27930:	mov	r2, r9
   27934:	bl	2728 <InflateSkipData>
   27938:	add	r7, r5, r7
   2793c:	subs	r8, r8, #1
   27940:	add	r4, r4, #4
   27944:	bne	27904 <ReadCompressedDataSlab1+0x360>
   27948:	b	27b90 <ReadCompressedDataSlab1+0x5ec>
   2794c:	ldr	r0, [sp, #4]
   27950:	cmp	r0, #0
   27954:	beq	27b3c <ReadCompressedDataSlab1+0x598>
   27958:	cmp	r8, #1
   2795c:	blt	27b90 <ReadCompressedDataSlab1+0x5ec>
   27960:	mov	r7, #0
   27964:	add	sl, sp, #8
   27968:	mov	r0, #1
   2796c:	mov	r1, sl
   27970:	mov	r2, r4
   27974:	mov	r3, r9
   27978:	str	r0, [sp]
   2797c:	mov	r0, r6
   27980:	bl	136f0 <ReadCompressedUInt32Data>
   27984:	ldr	r3, [sp, #4]
   27988:	mov	r5, r0
   2798c:	mov	r0, r6
   27990:	mov	r1, sl
   27994:	mov	r2, r9
   27998:	bl	2728 <InflateSkipData>
   2799c:	add	r7, r5, r7
   279a0:	subs	r8, r8, #1
   279a4:	add	r4, r4, #4
   279a8:	bne	27968 <ReadCompressedDataSlab1+0x3c4>
   279ac:	b	27b90 <ReadCompressedDataSlab1+0x5ec>
   279b0:	ldr	r0, [sp, #4]
   279b4:	cmp	r0, #0
   279b8:	beq	27b58 <ReadCompressedDataSlab1+0x5b4>
   279bc:	cmp	r8, #1
   279c0:	blt	27b90 <ReadCompressedDataSlab1+0x5ec>
   279c4:	mov	r7, #0
   279c8:	add	sl, sp, #8
   279cc:	mov	r0, #1
   279d0:	mov	r1, sl
   279d4:	mov	r2, r4
   279d8:	mov	r3, r9
   279dc:	str	r0, [sp]
   279e0:	mov	r0, r6
   279e4:	bl	b1d0 <ReadCompressedInt64Data>
   279e8:	ldr	r3, [sp, #4]
   279ec:	mov	r5, r0
   279f0:	mov	r0, r6
   279f4:	mov	r1, sl
   279f8:	mov	r2, r9
   279fc:	bl	2728 <InflateSkipData>
   27a00:	add	r7, r5, r7
   27a04:	subs	r8, r8, #1
   27a08:	add	r4, r4, #8
   27a0c:	bne	279cc <ReadCompressedDataSlab1+0x428>
   27a10:	b	27b90 <ReadCompressedDataSlab1+0x5ec>
   27a14:	ldr	r0, [sp, #4]
   27a18:	cmp	r0, #0
   27a1c:	beq	27b74 <ReadCompressedDataSlab1+0x5d0>
   27a20:	cmp	r8, #1
   27a24:	blt	27b90 <ReadCompressedDataSlab1+0x5ec>
   27a28:	mov	r7, #0
   27a2c:	add	sl, sp, #8
   27a30:	mov	r0, #1
   27a34:	mov	r1, sl
   27a38:	mov	r2, r4
   27a3c:	mov	r3, r9
   27a40:	str	r0, [sp]
   27a44:	mov	r0, r6
   27a48:	bl	d4c8 <ReadCompressedUInt64Data>
   27a4c:	ldr	r3, [sp, #4]
   27a50:	mov	r5, r0
   27a54:	mov	r0, r6
   27a58:	mov	r1, sl
   27a5c:	mov	r2, r9
   27a60:	bl	2728 <InflateSkipData>
   27a64:	add	r7, r5, r7
   27a68:	subs	r8, r8, #1
   27a6c:	add	r4, r4, #8
   27a70:	bne	27a30 <ReadCompressedDataSlab1+0x48c>
   27a74:	b	27b90 <ReadCompressedDataSlab1+0x5ec>
   27a78:	add	r1, sp, #8
   27a7c:	mov	r0, r6
   27a80:	mov	r2, r4
   27a84:	mov	r3, r9
   27a88:	str	r8, [sp]
   27a8c:	bl	5584 <ReadCompressedDoubleData>
   27a90:	b	27b8c <ReadCompressedDataSlab1+0x5e8>
   27a94:	add	r1, sp, #8
   27a98:	mov	r0, r6
   27a9c:	mov	r2, r4
   27aa0:	mov	r3, r9
   27aa4:	str	r8, [sp]
   27aa8:	bl	8ef4 <ReadCompressedSingleData>
   27aac:	b	27b8c <ReadCompressedDataSlab1+0x5e8>
   27ab0:	add	r1, sp, #8
   27ab4:	mov	r0, r6
   27ab8:	mov	r2, r4
   27abc:	mov	r3, r9
   27ac0:	str	r8, [sp]
   27ac4:	bl	1acbc <ReadCompressedInt8Data>
   27ac8:	b	27b8c <ReadCompressedDataSlab1+0x5e8>
   27acc:	add	r1, sp, #8
   27ad0:	mov	r0, r6
   27ad4:	mov	r2, r4
   27ad8:	mov	r3, r9
   27adc:	str	r8, [sp]
   27ae0:	bl	1d2f0 <ReadCompressedUInt8Data>
   27ae4:	b	27b8c <ReadCompressedDataSlab1+0x5e8>
   27ae8:	add	r1, sp, #8
   27aec:	mov	r0, r6
   27af0:	mov	r2, r4
   27af4:	mov	r3, r9
   27af8:	str	r8, [sp]
   27afc:	bl	15ebc <ReadCompressedInt16Data>
   27b00:	b	27b8c <ReadCompressedDataSlab1+0x5e8>
   27b04:	add	r1, sp, #8
   27b08:	mov	r0, r6
   27b0c:	mov	r2, r4
   27b10:	mov	r3, r9
   27b14:	str	r8, [sp]
   27b18:	bl	18688 <ReadCompressedUInt16Data>
   27b1c:	b	27b8c <ReadCompressedDataSlab1+0x5e8>
   27b20:	add	r1, sp, #8
   27b24:	mov	r0, r6
   27b28:	mov	r2, r4
   27b2c:	mov	r3, r9
   27b30:	str	r8, [sp]
   27b34:	bl	10624 <ReadCompressedInt32Data>
   27b38:	b	27b8c <ReadCompressedDataSlab1+0x5e8>
   27b3c:	add	r1, sp, #8
   27b40:	mov	r0, r6
   27b44:	mov	r2, r4
   27b48:	mov	r3, r9
   27b4c:	str	r8, [sp]
   27b50:	bl	136f0 <ReadCompressedUInt32Data>
   27b54:	b	27b8c <ReadCompressedDataSlab1+0x5e8>
   27b58:	add	r1, sp, #8
   27b5c:	mov	r0, r6
   27b60:	mov	r2, r4
   27b64:	mov	r3, r9
   27b68:	str	r8, [sp]
   27b6c:	bl	b1d0 <ReadCompressedInt64Data>
   27b70:	b	27b8c <ReadCompressedDataSlab1+0x5e8>
   27b74:	add	r1, sp, #8
   27b78:	mov	r0, r6
   27b7c:	mov	r2, r4
   27b80:	mov	r3, r9
   27b84:	str	r8, [sp]
   27b88:	bl	d4c8 <ReadCompressedUInt64Data>
   27b8c:	mov	r7, r0
   27b90:	add	r0, sp, #8
   27b94:	bl	193c <inflateEnd@plt>
   27b98:	mov	r0, r7
   27b9c:	sub	sp, fp, #28
   27ba0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00027ba4 <ReadCompressedDataSlab2>:
   27ba4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27ba8:	add	fp, sp, #28
   27bac:	sub	sp, sp, #84	; 0x54
   27bb0:	mov	r4, r2
   27bb4:	add	r2, sp, #24
   27bb8:	mov	r5, r0
   27bbc:	mov	r6, r3
   27bc0:	vmov.i32	q8, #0	; 0x00000000
   27bc4:	mov	r0, #52	; 0x34
   27bc8:	mov	r3, r2
   27bcc:	cmp	r5, #0
   27bd0:	vst1.64	{d16-d17}, [r3], r0
   27bd4:	mov	r0, #0
   27bd8:	cmpne	r4, #0
   27bdc:	str	r0, [r3]
   27be0:	add	r3, r2, #32
   27be4:	add	r2, r2, #16
   27be8:	str	r0, [sp, #72]	; 0x48
   27bec:	vst1.64	{d16-d17}, [r3]
   27bf0:	vst1.64	{d16-d17}, [r2]
   27bf4:	beq	27c20 <ReadCompressedDataSlab2+0x7c>
   27bf8:	ldr	r7, [fp, #24]
   27bfc:	cmp	r7, #0
   27c00:	ldrne	r0, [fp, #20]
   27c04:	cmpne	r0, #0
   27c08:	beq	27c20 <ReadCompressedDataSlab2+0x7c>
   27c0c:	ldr	r0, [fp, #16]
   27c10:	cmp	r0, #0
   27c14:	ldrne	r0, [r5]
   27c18:	cmpne	r0, #0
   27c1c:	bne	27c2c <ReadCompressedDataSlab2+0x88>
   27c20:	mov	r0, #0
   27c24:	sub	sp, fp, #28
   27c28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27c2c:	add	r0, sp, #24
   27c30:	bl	1948 <inflateCopy@plt>
   27c34:	sub	r0, r6, #6
   27c38:	cmp	r0, #9
   27c3c:	bhi	29644 <ReadCompressedDataSlab2+0x1aa0>
   27c40:	str	r5, [sp, #20]
   27c44:	add	r1, pc, #16
   27c48:	ldr	r2, [fp, #12]
   27c4c:	ldr	r8, [fp, #8]
   27c50:	mov	sl, r7
   27c54:	ldr	r0, [r1, r0, lsl #2]
   27c58:	add	pc, r1, r0
   27c5c:	.word	0x00000028
   27c60:	.word	0x000000b8
   27c64:	.word	0x00000148
   27c68:	.word	0x000001d8
   27c6c:	.word	0x00000268
   27c70:	.word	0x000002f8
   27c74:	.word	0x00000388
   27c78:	.word	0x00000418
   27c7c:	.word	0x00000538
   27c80:	.word	0x000004a8
   27c84:	ldr	r0, [fp, #16]
   27c88:	ldr	r7, [r2]
   27c8c:	ldr	r9, [fp, #20]
   27c90:	ldr	r5, [sp, #20]
   27c94:	add	r1, sp, #24
   27c98:	mov	r2, r8
   27c9c:	ldr	r0, [r0, #4]
   27ca0:	ldr	r6, [r9, #4]
   27ca4:	mul	r3, r0, r7
   27ca8:	ldr	r0, [r9]
   27cac:	str	r0, [sp, #12]
   27cb0:	mov	r0, r5
   27cb4:	bl	2728 <InflateSkipData>
   27cb8:	sub	r0, r6, #1
   27cbc:	mul	r3, r0, r7
   27cc0:	ldr	r0, [r9]
   27cc4:	cmp	r0, #1
   27cc8:	bne	28224 <ReadCompressedDataSlab2+0x680>
   27ccc:	ldr	r2, [fp, #12]
   27cd0:	ldr	r0, [sl]
   27cd4:	ldr	r1, [r2]
   27cd8:	cmp	r0, r1
   27cdc:	bne	28ef0 <ReadCompressedDataSlab2+0x134c>
   27ce0:	ldr	r1, [fp, #20]
   27ce4:	ldr	r1, [r1, #4]
   27ce8:	cmp	r1, #1
   27cec:	bne	28ef0 <ReadCompressedDataSlab2+0x134c>
   27cf0:	ldr	r1, [sl, #4]
   27cf4:	mov	r2, r4
   27cf8:	mov	r3, r8
   27cfc:	mul	r0, r1, r0
   27d00:	add	r1, sp, #24
   27d04:	str	r0, [sp]
   27d08:	mov	r0, r5
   27d0c:	bl	5584 <ReadCompressedDoubleData>
   27d10:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   27d14:	ldr	r0, [fp, #16]
   27d18:	ldr	r7, [r2]
   27d1c:	ldr	r9, [fp, #20]
   27d20:	ldr	r5, [sp, #20]
   27d24:	add	r1, sp, #24
   27d28:	mov	r2, r8
   27d2c:	ldr	r0, [r0, #4]
   27d30:	ldr	r6, [r9, #4]
   27d34:	mul	r3, r0, r7
   27d38:	ldr	r0, [r9]
   27d3c:	str	r0, [sp, #12]
   27d40:	mov	r0, r5
   27d44:	bl	2728 <InflateSkipData>
   27d48:	sub	r0, r6, #1
   27d4c:	mul	r3, r0, r7
   27d50:	ldr	r0, [r9]
   27d54:	cmp	r0, #1
   27d58:	bne	2836c <ReadCompressedDataSlab2+0x7c8>
   27d5c:	ldr	r2, [fp, #12]
   27d60:	ldr	r0, [sl]
   27d64:	ldr	r1, [r2]
   27d68:	cmp	r0, r1
   27d6c:	bne	28fac <ReadCompressedDataSlab2+0x1408>
   27d70:	ldr	r1, [fp, #20]
   27d74:	ldr	r1, [r1, #4]
   27d78:	cmp	r1, #1
   27d7c:	bne	28fac <ReadCompressedDataSlab2+0x1408>
   27d80:	ldr	r1, [sl, #4]
   27d84:	mov	r2, r4
   27d88:	mov	r3, r8
   27d8c:	mul	r0, r1, r0
   27d90:	add	r1, sp, #24
   27d94:	str	r0, [sp]
   27d98:	mov	r0, r5
   27d9c:	bl	8ef4 <ReadCompressedSingleData>
   27da0:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   27da4:	ldr	r0, [fp, #16]
   27da8:	ldr	r7, [r2]
   27dac:	ldr	r9, [fp, #20]
   27db0:	ldr	r5, [sp, #20]
   27db4:	add	r1, sp, #24
   27db8:	mov	r2, r8
   27dbc:	ldr	r0, [r0, #4]
   27dc0:	ldr	r6, [r9, #4]
   27dc4:	mul	r3, r0, r7
   27dc8:	ldr	r0, [r9]
   27dcc:	str	r0, [sp, #12]
   27dd0:	mov	r0, r5
   27dd4:	bl	2728 <InflateSkipData>
   27dd8:	sub	r0, r6, #1
   27ddc:	mul	r3, r0, r7
   27de0:	ldr	r0, [r9]
   27de4:	cmp	r0, #1
   27de8:	bne	284b4 <ReadCompressedDataSlab2+0x910>
   27dec:	ldr	r2, [fp, #12]
   27df0:	ldr	r0, [sl]
   27df4:	ldr	r1, [r2]
   27df8:	cmp	r0, r1
   27dfc:	bne	29068 <ReadCompressedDataSlab2+0x14c4>
   27e00:	ldr	r1, [fp, #20]
   27e04:	ldr	r1, [r1, #4]
   27e08:	cmp	r1, #1
   27e0c:	bne	29068 <ReadCompressedDataSlab2+0x14c4>
   27e10:	ldr	r1, [sl, #4]
   27e14:	mov	r2, r4
   27e18:	mov	r3, r8
   27e1c:	mul	r0, r1, r0
   27e20:	add	r1, sp, #24
   27e24:	str	r0, [sp]
   27e28:	mov	r0, r5
   27e2c:	bl	1acbc <ReadCompressedInt8Data>
   27e30:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   27e34:	ldr	r0, [fp, #16]
   27e38:	ldr	r7, [r2]
   27e3c:	ldr	r9, [fp, #20]
   27e40:	ldr	r5, [sp, #20]
   27e44:	add	r1, sp, #24
   27e48:	mov	r2, r8
   27e4c:	ldr	r0, [r0, #4]
   27e50:	ldr	r6, [r9, #4]
   27e54:	mul	r3, r0, r7
   27e58:	ldr	r0, [r9]
   27e5c:	str	r0, [sp, #12]
   27e60:	mov	r0, r5
   27e64:	bl	2728 <InflateSkipData>
   27e68:	sub	r0, r6, #1
   27e6c:	mul	r3, r0, r7
   27e70:	ldr	r0, [r9]
   27e74:	cmp	r0, #1
   27e78:	bne	28600 <ReadCompressedDataSlab2+0xa5c>
   27e7c:	ldr	r2, [fp, #12]
   27e80:	ldr	r0, [sl]
   27e84:	ldr	r1, [r2]
   27e88:	cmp	r0, r1
   27e8c:	bne	29124 <ReadCompressedDataSlab2+0x1580>
   27e90:	ldr	r1, [fp, #20]
   27e94:	ldr	r1, [r1, #4]
   27e98:	cmp	r1, #1
   27e9c:	bne	29124 <ReadCompressedDataSlab2+0x1580>
   27ea0:	ldr	r1, [sl, #4]
   27ea4:	mov	r2, r4
   27ea8:	mov	r3, r8
   27eac:	mul	r0, r1, r0
   27eb0:	add	r1, sp, #24
   27eb4:	str	r0, [sp]
   27eb8:	mov	r0, r5
   27ebc:	bl	1d2f0 <ReadCompressedUInt8Data>
   27ec0:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   27ec4:	ldr	r0, [fp, #16]
   27ec8:	ldr	r7, [r2]
   27ecc:	ldr	r9, [fp, #20]
   27ed0:	ldr	r5, [sp, #20]
   27ed4:	add	r1, sp, #24
   27ed8:	mov	r2, r8
   27edc:	ldr	r0, [r0, #4]
   27ee0:	ldr	r6, [r9, #4]
   27ee4:	mul	r3, r0, r7
   27ee8:	ldr	r0, [r9]
   27eec:	str	r0, [sp, #12]
   27ef0:	mov	r0, r5
   27ef4:	bl	2728 <InflateSkipData>
   27ef8:	sub	r0, r6, #1
   27efc:	mul	r3, r0, r7
   27f00:	ldr	r0, [r9]
   27f04:	cmp	r0, #1
   27f08:	bne	2874c <ReadCompressedDataSlab2+0xba8>
   27f0c:	ldr	r2, [fp, #12]
   27f10:	ldr	r0, [sl]
   27f14:	ldr	r1, [r2]
   27f18:	cmp	r0, r1
   27f1c:	bne	291e0 <ReadCompressedDataSlab2+0x163c>
   27f20:	ldr	r1, [fp, #20]
   27f24:	ldr	r1, [r1, #4]
   27f28:	cmp	r1, #1
   27f2c:	bne	291e0 <ReadCompressedDataSlab2+0x163c>
   27f30:	ldr	r1, [sl, #4]
   27f34:	mov	r2, r4
   27f38:	mov	r3, r8
   27f3c:	mul	r0, r1, r0
   27f40:	add	r1, sp, #24
   27f44:	str	r0, [sp]
   27f48:	mov	r0, r5
   27f4c:	bl	15ebc <ReadCompressedInt16Data>
   27f50:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   27f54:	ldr	r0, [fp, #16]
   27f58:	ldr	r7, [r2]
   27f5c:	ldr	r9, [fp, #20]
   27f60:	ldr	r5, [sp, #20]
   27f64:	add	r1, sp, #24
   27f68:	mov	r2, r8
   27f6c:	ldr	r0, [r0, #4]
   27f70:	ldr	r6, [r9, #4]
   27f74:	mul	r3, r0, r7
   27f78:	ldr	r0, [r9]
   27f7c:	str	r0, [sp, #16]
   27f80:	mov	r0, r5
   27f84:	bl	2728 <InflateSkipData>
   27f88:	sub	r0, r6, #1
   27f8c:	mul	r3, r0, r7
   27f90:	ldr	r0, [r9]
   27f94:	cmp	r0, #1
   27f98:	bne	28894 <ReadCompressedDataSlab2+0xcf0>
   27f9c:	ldr	r2, [fp, #12]
   27fa0:	ldr	r0, [sl]
   27fa4:	ldr	r1, [r2]
   27fa8:	cmp	r0, r1
   27fac:	bne	2929c <ReadCompressedDataSlab2+0x16f8>
   27fb0:	ldr	r1, [fp, #20]
   27fb4:	ldr	r1, [r1, #4]
   27fb8:	cmp	r1, #1
   27fbc:	bne	2929c <ReadCompressedDataSlab2+0x16f8>
   27fc0:	ldr	r1, [sl, #4]
   27fc4:	mov	r2, r4
   27fc8:	mov	r3, r8
   27fcc:	mul	r0, r1, r0
   27fd0:	add	r1, sp, #24
   27fd4:	str	r0, [sp]
   27fd8:	mov	r0, r5
   27fdc:	bl	18688 <ReadCompressedUInt16Data>
   27fe0:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   27fe4:	ldr	r0, [fp, #16]
   27fe8:	ldr	r7, [r2]
   27fec:	ldr	r9, [fp, #20]
   27ff0:	ldr	r5, [sp, #20]
   27ff4:	add	r1, sp, #24
   27ff8:	mov	r2, r8
   27ffc:	ldr	r0, [r0, #4]
   28000:	ldr	r6, [r9, #4]
   28004:	mul	r3, r0, r7
   28008:	ldr	r0, [r9]
   2800c:	str	r0, [sp, #12]
   28010:	mov	r0, r5
   28014:	bl	2728 <InflateSkipData>
   28018:	sub	r0, r6, #1
   2801c:	mul	r3, r0, r7
   28020:	ldr	r0, [r9]
   28024:	cmp	r0, #1
   28028:	bne	289e8 <ReadCompressedDataSlab2+0xe44>
   2802c:	ldr	r2, [fp, #12]
   28030:	ldr	r0, [sl]
   28034:	ldr	r1, [r2]
   28038:	cmp	r0, r1
   2803c:	bne	29358 <ReadCompressedDataSlab2+0x17b4>
   28040:	ldr	r1, [fp, #20]
   28044:	ldr	r1, [r1, #4]
   28048:	cmp	r1, #1
   2804c:	bne	29358 <ReadCompressedDataSlab2+0x17b4>
   28050:	ldr	r1, [sl, #4]
   28054:	mov	r2, r4
   28058:	mov	r3, r8
   2805c:	mul	r0, r1, r0
   28060:	add	r1, sp, #24
   28064:	str	r0, [sp]
   28068:	mov	r0, r5
   2806c:	bl	10624 <ReadCompressedInt32Data>
   28070:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   28074:	ldr	r0, [fp, #16]
   28078:	ldr	r7, [r2]
   2807c:	ldr	r9, [fp, #20]
   28080:	ldr	r5, [sp, #20]
   28084:	add	r1, sp, #24
   28088:	mov	r2, r8
   2808c:	ldr	r0, [r0, #4]
   28090:	ldr	r6, [r9, #4]
   28094:	mul	r3, r0, r7
   28098:	ldr	r0, [r9]
   2809c:	str	r0, [sp, #12]
   280a0:	mov	r0, r5
   280a4:	bl	2728 <InflateSkipData>
   280a8:	sub	r0, r6, #1
   280ac:	mul	r3, r0, r7
   280b0:	ldr	r0, [r9]
   280b4:	cmp	r0, #1
   280b8:	bne	28b30 <ReadCompressedDataSlab2+0xf8c>
   280bc:	ldr	r2, [fp, #12]
   280c0:	ldr	r0, [sl]
   280c4:	ldr	r1, [r2]
   280c8:	cmp	r0, r1
   280cc:	bne	29414 <ReadCompressedDataSlab2+0x1870>
   280d0:	ldr	r1, [fp, #20]
   280d4:	ldr	r1, [r1, #4]
   280d8:	cmp	r1, #1
   280dc:	bne	29414 <ReadCompressedDataSlab2+0x1870>
   280e0:	ldr	r1, [sl, #4]
   280e4:	mov	r2, r4
   280e8:	mov	r3, r8
   280ec:	mul	r0, r1, r0
   280f0:	add	r1, sp, #24
   280f4:	str	r0, [sp]
   280f8:	mov	r0, r5
   280fc:	bl	136f0 <ReadCompressedUInt32Data>
   28100:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   28104:	ldr	r0, [fp, #16]
   28108:	ldr	r7, [r2]
   2810c:	ldr	r9, [fp, #20]
   28110:	ldr	r5, [sp, #20]
   28114:	add	r1, sp, #24
   28118:	mov	r2, r8
   2811c:	ldr	r0, [r0, #4]
   28120:	ldr	r6, [r9, #4]
   28124:	mul	r3, r0, r7
   28128:	ldr	r0, [r9]
   2812c:	str	r0, [sp, #12]
   28130:	mov	r0, r5
   28134:	bl	2728 <InflateSkipData>
   28138:	sub	r0, r6, #1
   2813c:	mul	r3, r0, r7
   28140:	ldr	r0, [r9]
   28144:	cmp	r0, #1
   28148:	bne	28c78 <ReadCompressedDataSlab2+0x10d4>
   2814c:	ldr	r2, [fp, #12]
   28150:	ldr	r0, [sl]
   28154:	ldr	r1, [r2]
   28158:	cmp	r0, r1
   2815c:	bne	294d0 <ReadCompressedDataSlab2+0x192c>
   28160:	ldr	r1, [fp, #20]
   28164:	ldr	r1, [r1, #4]
   28168:	cmp	r1, #1
   2816c:	bne	294d0 <ReadCompressedDataSlab2+0x192c>
   28170:	ldr	r1, [sl, #4]
   28174:	mov	r2, r4
   28178:	mov	r3, r8
   2817c:	mul	r0, r1, r0
   28180:	add	r1, sp, #24
   28184:	str	r0, [sp]
   28188:	mov	r0, r5
   2818c:	bl	d4c8 <ReadCompressedUInt64Data>
   28190:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   28194:	ldr	r0, [fp, #16]
   28198:	ldr	r7, [r2]
   2819c:	ldr	r9, [fp, #20]
   281a0:	ldr	r5, [sp, #20]
   281a4:	add	r1, sp, #24
   281a8:	mov	r2, r8
   281ac:	ldr	r0, [r0, #4]
   281b0:	ldr	r6, [r9, #4]
   281b4:	mul	r3, r0, r7
   281b8:	ldr	r0, [r9]
   281bc:	str	r0, [sp, #12]
   281c0:	mov	r0, r5
   281c4:	bl	2728 <InflateSkipData>
   281c8:	sub	r0, r6, #1
   281cc:	mul	r3, r0, r7
   281d0:	ldr	r0, [r9]
   281d4:	cmp	r0, #1
   281d8:	bne	28dc0 <ReadCompressedDataSlab2+0x121c>
   281dc:	ldr	r2, [fp, #12]
   281e0:	ldr	r0, [sl]
   281e4:	ldr	r1, [r2]
   281e8:	cmp	r0, r1
   281ec:	bne	2958c <ReadCompressedDataSlab2+0x19e8>
   281f0:	ldr	r1, [fp, #20]
   281f4:	ldr	r1, [r1, #4]
   281f8:	cmp	r1, #1
   281fc:	bne	2958c <ReadCompressedDataSlab2+0x19e8>
   28200:	ldr	r1, [sl, #4]
   28204:	mov	r2, r4
   28208:	mov	r3, r8
   2820c:	mul	r0, r1, r0
   28210:	add	r1, sp, #24
   28214:	str	r0, [sp]
   28218:	mov	r0, r5
   2821c:	bl	b1d0 <ReadCompressedInt64Data>
   28220:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   28224:	ldr	r0, [sl, #4]
   28228:	ldr	r9, [fp, #16]
   2822c:	cmp	r0, #1
   28230:	blt	29644 <ReadCompressedDataSlab2+0x1aa0>
   28234:	ldr	r0, [sp, #12]
   28238:	mov	r7, sl
   2823c:	mov	r1, #0
   28240:	add	r6, sp, #24
   28244:	mov	sl, r3
   28248:	str	r3, [sp, #16]
   2824c:	sub	r0, r0, #1
   28250:	str	r0, [sp, #12]
   28254:	ldr	r3, [r9]
   28258:	str	r1, [sp, #20]
   2825c:	mov	r0, r5
   28260:	mov	r1, r6
   28264:	mov	r2, r8
   28268:	bl	2728 <InflateSkipData>
   2826c:	mov	sl, r7
   28270:	mov	r0, #1
   28274:	mov	r1, r6
   28278:	mov	r2, r4
   2827c:	mov	r3, r8
   28280:	mov	r9, r6
   28284:	ldr	sl, [r7]
   28288:	str	r0, [sp]
   2828c:	mov	r0, r5
   28290:	bl	5584 <ReadCompressedDoubleData>
   28294:	add	r4, r4, #8
   28298:	cmp	sl, #2
   2829c:	blt	28300 <ReadCompressedDataSlab2+0x75c>
   282a0:	ldr	r8, [fp, #8]
   282a4:	ldr	r7, [sp, #12]
   282a8:	mov	sl, #0
   282ac:	mov	r6, r9
   282b0:	mov	r0, r5
   282b4:	mov	r1, r6
   282b8:	mov	r2, r8
   282bc:	mov	r3, r7
   282c0:	bl	2728 <InflateSkipData>
   282c4:	ldr	r0, [fp, #24]
   282c8:	mov	r1, r6
   282cc:	mov	r2, r4
   282d0:	mov	r3, r8
   282d4:	ldr	r9, [r0]
   282d8:	mov	r0, #1
   282dc:	str	r0, [sp]
   282e0:	mov	r0, r5
   282e4:	bl	5584 <ReadCompressedDoubleData>
   282e8:	add	sl, sl, #1
   282ec:	sub	r0, r9, #1
   282f0:	add	r4, r4, #8
   282f4:	cmp	sl, r0
   282f8:	blt	282b0 <ReadCompressedDataSlab2+0x70c>
   282fc:	b	28308 <ReadCompressedDataSlab2+0x764>
   28300:	ldr	r8, [fp, #8]
   28304:	mov	r6, r9
   28308:	ldr	r7, [fp, #24]
   2830c:	ldr	r1, [fp, #20]
   28310:	ldr	r0, [fp, #12]
   28314:	ldr	sl, [sp, #16]
   28318:	ldr	r9, [fp, #16]
   2831c:	ldr	r2, [r7]
   28320:	ldr	r1, [r1]
   28324:	ldr	r0, [r0]
   28328:	sub	r2, r2, #1
   2832c:	add	r0, r0, sl
   28330:	mul	r1, r2, r1
   28334:	mov	r2, r8
   28338:	mvn	r1, r1
   2833c:	add	r0, r0, r1
   28340:	ldr	r1, [r9]
   28344:	sub	r3, r0, r1
   28348:	mov	r0, r5
   2834c:	mov	r1, r6
   28350:	bl	2728 <InflateSkipData>
   28354:	ldr	r1, [sp, #20]
   28358:	ldr	r0, [r7, #4]
   2835c:	add	r1, r1, #1
   28360:	cmp	r1, r0
   28364:	blt	28254 <ReadCompressedDataSlab2+0x6b0>
   28368:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   2836c:	ldr	r0, [sl, #4]
   28370:	ldr	r9, [fp, #16]
   28374:	cmp	r0, #1
   28378:	blt	29644 <ReadCompressedDataSlab2+0x1aa0>
   2837c:	ldr	r0, [sp, #12]
   28380:	mov	r7, sl
   28384:	mov	r1, #0
   28388:	add	r6, sp, #24
   2838c:	mov	sl, r3
   28390:	str	r3, [sp, #16]
   28394:	sub	r0, r0, #1
   28398:	str	r0, [sp, #12]
   2839c:	ldr	r3, [r9]
   283a0:	str	r1, [sp, #20]
   283a4:	mov	r0, r5
   283a8:	mov	r1, r6
   283ac:	mov	r2, r8
   283b0:	bl	2728 <InflateSkipData>
   283b4:	mov	sl, r7
   283b8:	mov	r0, #1
   283bc:	mov	r1, r6
   283c0:	mov	r2, r4
   283c4:	mov	r3, r8
   283c8:	mov	r9, r6
   283cc:	ldr	sl, [r7]
   283d0:	str	r0, [sp]
   283d4:	mov	r0, r5
   283d8:	bl	8ef4 <ReadCompressedSingleData>
   283dc:	add	r4, r4, #4
   283e0:	cmp	sl, #2
   283e4:	blt	28448 <ReadCompressedDataSlab2+0x8a4>
   283e8:	ldr	r8, [fp, #8]
   283ec:	ldr	r7, [sp, #12]
   283f0:	mov	sl, #0
   283f4:	mov	r6, r9
   283f8:	mov	r0, r5
   283fc:	mov	r1, r6
   28400:	mov	r2, r8
   28404:	mov	r3, r7
   28408:	bl	2728 <InflateSkipData>
   2840c:	ldr	r0, [fp, #24]
   28410:	mov	r1, r6
   28414:	mov	r2, r4
   28418:	mov	r3, r8
   2841c:	ldr	r9, [r0]
   28420:	mov	r0, #1
   28424:	str	r0, [sp]
   28428:	mov	r0, r5
   2842c:	bl	8ef4 <ReadCompressedSingleData>
   28430:	add	sl, sl, #1
   28434:	sub	r0, r9, #1
   28438:	add	r4, r4, #4
   2843c:	cmp	sl, r0
   28440:	blt	283f8 <ReadCompressedDataSlab2+0x854>
   28444:	b	28450 <ReadCompressedDataSlab2+0x8ac>
   28448:	ldr	r8, [fp, #8]
   2844c:	mov	r6, r9
   28450:	ldr	r7, [fp, #24]
   28454:	ldr	r1, [fp, #20]
   28458:	ldr	r0, [fp, #12]
   2845c:	ldr	sl, [sp, #16]
   28460:	ldr	r9, [fp, #16]
   28464:	ldr	r2, [r7]
   28468:	ldr	r1, [r1]
   2846c:	ldr	r0, [r0]
   28470:	sub	r2, r2, #1
   28474:	add	r0, r0, sl
   28478:	mul	r1, r2, r1
   2847c:	mov	r2, r8
   28480:	mvn	r1, r1
   28484:	add	r0, r0, r1
   28488:	ldr	r1, [r9]
   2848c:	sub	r3, r0, r1
   28490:	mov	r0, r5
   28494:	mov	r1, r6
   28498:	bl	2728 <InflateSkipData>
   2849c:	ldr	r1, [sp, #20]
   284a0:	ldr	r0, [r7, #4]
   284a4:	add	r1, r1, #1
   284a8:	cmp	r1, r0
   284ac:	blt	2839c <ReadCompressedDataSlab2+0x7f8>
   284b0:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   284b4:	ldr	r0, [sl, #4]
   284b8:	mov	r7, r8
   284bc:	ldr	r8, [fp, #16]
   284c0:	cmp	r0, #1
   284c4:	blt	29644 <ReadCompressedDataSlab2+0x1aa0>
   284c8:	ldr	r0, [sp, #12]
   284cc:	mov	r1, r8
   284d0:	mov	r6, #0
   284d4:	add	r9, sp, #24
   284d8:	mov	r8, r3
   284dc:	str	r3, [sp, #16]
   284e0:	sub	r0, r0, #1
   284e4:	str	r0, [sp, #12]
   284e8:	ldr	r3, [r1]
   284ec:	mov	r8, r1
   284f0:	mov	r0, r5
   284f4:	mov	r1, r9
   284f8:	mov	r2, r7
   284fc:	bl	2728 <InflateSkipData>
   28500:	ldr	sl, [sl]
   28504:	mov	r0, #1
   28508:	mov	r1, r9
   2850c:	mov	r2, r4
   28510:	mov	r3, r7
   28514:	str	r0, [sp]
   28518:	mov	r0, r5
   2851c:	bl	1acbc <ReadCompressedInt8Data>
   28520:	add	r4, r4, #1
   28524:	cmp	sl, #2
   28528:	blt	28594 <ReadCompressedDataSlab2+0x9f0>
   2852c:	str	r6, [sp, #20]
   28530:	ldr	r8, [fp, #8]
   28534:	ldr	r6, [sp, #12]
   28538:	mov	r1, r9
   2853c:	mov	sl, #0
   28540:	mov	r7, #1
   28544:	mov	r0, r5
   28548:	mov	r2, r8
   2854c:	mov	r3, r6
   28550:	bl	2728 <InflateSkipData>
   28554:	ldr	r0, [fp, #24]
   28558:	add	r2, r4, sl
   2855c:	add	r1, sp, #24
   28560:	mov	r3, r8
   28564:	ldr	r9, [r0]
   28568:	mov	r0, r5
   2856c:	str	r7, [sp]
   28570:	bl	1acbc <ReadCompressedInt8Data>
   28574:	add	sl, sl, #1
   28578:	sub	r0, r9, #1
   2857c:	add	r1, sp, #24
   28580:	cmp	sl, r0
   28584:	blt	28544 <ReadCompressedDataSlab2+0x9a0>
   28588:	ldr	r8, [fp, #16]
   2858c:	ldr	r6, [sp, #20]
   28590:	add	r4, r4, sl
   28594:	mov	r3, r8
   28598:	ldr	sl, [fp, #24]
   2859c:	ldr	r1, [fp, #20]
   285a0:	ldr	r0, [fp, #12]
   285a4:	ldr	r8, [sp, #16]
   285a8:	ldr	r7, [fp, #8]
   285ac:	add	r9, sp, #24
   285b0:	ldr	r2, [sl]
   285b4:	ldr	r1, [r1]
   285b8:	ldr	r0, [r0]
   285bc:	sub	r2, r2, #1
   285c0:	add	r0, r0, r8
   285c4:	mul	r1, r2, r1
   285c8:	mov	r2, r7
   285cc:	mvn	r1, r1
   285d0:	add	r0, r0, r1
   285d4:	ldr	r1, [r3]
   285d8:	sub	r3, r0, r1
   285dc:	mov	r0, r5
   285e0:	mov	r1, r9
   285e4:	bl	2728 <InflateSkipData>
   285e8:	ldr	r0, [sl, #4]
   285ec:	ldr	r1, [fp, #16]
   285f0:	add	r6, r6, #1
   285f4:	cmp	r6, r0
   285f8:	blt	284e8 <ReadCompressedDataSlab2+0x944>
   285fc:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   28600:	ldr	r0, [sl, #4]
   28604:	mov	r7, r8
   28608:	ldr	r8, [fp, #16]
   2860c:	cmp	r0, #1
   28610:	blt	29644 <ReadCompressedDataSlab2+0x1aa0>
   28614:	ldr	r0, [sp, #12]
   28618:	mov	r1, r8
   2861c:	mov	r6, #0
   28620:	add	r9, sp, #24
   28624:	mov	r8, r3
   28628:	str	r3, [sp, #16]
   2862c:	sub	r0, r0, #1
   28630:	str	r0, [sp, #12]
   28634:	ldr	r3, [r1]
   28638:	mov	r8, r1
   2863c:	mov	r0, r5
   28640:	mov	r1, r9
   28644:	mov	r2, r7
   28648:	bl	2728 <InflateSkipData>
   2864c:	ldr	sl, [sl]
   28650:	mov	r0, #1
   28654:	mov	r1, r9
   28658:	mov	r2, r4
   2865c:	mov	r3, r7
   28660:	str	r0, [sp]
   28664:	mov	r0, r5
   28668:	bl	1d2f0 <ReadCompressedUInt8Data>
   2866c:	add	r4, r4, #1
   28670:	cmp	sl, #2
   28674:	blt	286e0 <ReadCompressedDataSlab2+0xb3c>
   28678:	str	r6, [sp, #20]
   2867c:	ldr	r8, [fp, #8]
   28680:	ldr	r6, [sp, #12]
   28684:	mov	r1, r9
   28688:	mov	sl, #0
   2868c:	mov	r7, #1
   28690:	mov	r0, r5
   28694:	mov	r2, r8
   28698:	mov	r3, r6
   2869c:	bl	2728 <InflateSkipData>
   286a0:	ldr	r0, [fp, #24]
   286a4:	add	r2, r4, sl
   286a8:	add	r1, sp, #24
   286ac:	mov	r3, r8
   286b0:	ldr	r9, [r0]
   286b4:	mov	r0, r5
   286b8:	str	r7, [sp]
   286bc:	bl	1d2f0 <ReadCompressedUInt8Data>
   286c0:	add	sl, sl, #1
   286c4:	sub	r0, r9, #1
   286c8:	add	r1, sp, #24
   286cc:	cmp	sl, r0
   286d0:	blt	28690 <ReadCompressedDataSlab2+0xaec>
   286d4:	ldr	r8, [fp, #16]
   286d8:	ldr	r6, [sp, #20]
   286dc:	add	r4, r4, sl
   286e0:	mov	r3, r8
   286e4:	ldr	sl, [fp, #24]
   286e8:	ldr	r1, [fp, #20]
   286ec:	ldr	r0, [fp, #12]
   286f0:	ldr	r8, [sp, #16]
   286f4:	ldr	r7, [fp, #8]
   286f8:	add	r9, sp, #24
   286fc:	ldr	r2, [sl]
   28700:	ldr	r1, [r1]
   28704:	ldr	r0, [r0]
   28708:	sub	r2, r2, #1
   2870c:	add	r0, r0, r8
   28710:	mul	r1, r2, r1
   28714:	mov	r2, r7
   28718:	mvn	r1, r1
   2871c:	add	r0, r0, r1
   28720:	ldr	r1, [r3]
   28724:	sub	r3, r0, r1
   28728:	mov	r0, r5
   2872c:	mov	r1, r9
   28730:	bl	2728 <InflateSkipData>
   28734:	ldr	r0, [sl, #4]
   28738:	ldr	r1, [fp, #16]
   2873c:	add	r6, r6, #1
   28740:	cmp	r6, r0
   28744:	blt	28634 <ReadCompressedDataSlab2+0xa90>
   28748:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   2874c:	ldr	r0, [sl, #4]
   28750:	ldr	r9, [fp, #16]
   28754:	cmp	r0, #1
   28758:	blt	29644 <ReadCompressedDataSlab2+0x1aa0>
   2875c:	ldr	r0, [sp, #12]
   28760:	mov	r7, sl
   28764:	mov	r1, #0
   28768:	add	r6, sp, #24
   2876c:	mov	sl, r3
   28770:	str	r3, [sp, #16]
   28774:	sub	r0, r0, #1
   28778:	str	r0, [sp, #12]
   2877c:	ldr	r3, [r9]
   28780:	str	r1, [sp, #20]
   28784:	mov	r0, r5
   28788:	mov	r1, r6
   2878c:	mov	r2, r8
   28790:	bl	2728 <InflateSkipData>
   28794:	mov	sl, r7
   28798:	mov	r0, #1
   2879c:	mov	r1, r6
   287a0:	mov	r2, r4
   287a4:	mov	r3, r8
   287a8:	mov	r9, r6
   287ac:	ldr	sl, [r7]
   287b0:	str	r0, [sp]
   287b4:	mov	r0, r5
   287b8:	bl	15ebc <ReadCompressedInt16Data>
   287bc:	add	r4, r4, #2
   287c0:	cmp	sl, #2
   287c4:	blt	28828 <ReadCompressedDataSlab2+0xc84>
   287c8:	ldr	r8, [fp, #8]
   287cc:	ldr	r7, [sp, #12]
   287d0:	mov	sl, #0
   287d4:	mov	r6, r9
   287d8:	mov	r0, r5
   287dc:	mov	r1, r6
   287e0:	mov	r2, r8
   287e4:	mov	r3, r7
   287e8:	bl	2728 <InflateSkipData>
   287ec:	ldr	r0, [fp, #24]
   287f0:	mov	r1, r6
   287f4:	mov	r2, r4
   287f8:	mov	r3, r8
   287fc:	ldr	r9, [r0]
   28800:	mov	r0, #1
   28804:	str	r0, [sp]
   28808:	mov	r0, r5
   2880c:	bl	15ebc <ReadCompressedInt16Data>
   28810:	add	sl, sl, #1
   28814:	sub	r0, r9, #1
   28818:	add	r4, r4, #2
   2881c:	cmp	sl, r0
   28820:	blt	287d8 <ReadCompressedDataSlab2+0xc34>
   28824:	b	28830 <ReadCompressedDataSlab2+0xc8c>
   28828:	ldr	r8, [fp, #8]
   2882c:	mov	r6, r9
   28830:	ldr	r7, [fp, #24]
   28834:	ldr	r1, [fp, #20]
   28838:	ldr	r0, [fp, #12]
   2883c:	ldr	sl, [sp, #16]
   28840:	ldr	r9, [fp, #16]
   28844:	ldr	r2, [r7]
   28848:	ldr	r1, [r1]
   2884c:	ldr	r0, [r0]
   28850:	sub	r2, r2, #1
   28854:	add	r0, r0, sl
   28858:	mul	r1, r2, r1
   2885c:	mov	r2, r8
   28860:	mvn	r1, r1
   28864:	add	r0, r0, r1
   28868:	ldr	r1, [r9]
   2886c:	sub	r3, r0, r1
   28870:	mov	r0, r5
   28874:	mov	r1, r6
   28878:	bl	2728 <InflateSkipData>
   2887c:	ldr	r1, [sp, #20]
   28880:	ldr	r0, [r7, #4]
   28884:	add	r1, r1, #1
   28888:	cmp	r1, r0
   2888c:	blt	2877c <ReadCompressedDataSlab2+0xbd8>
   28890:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   28894:	ldr	r0, [sl, #4]
   28898:	ldr	r9, [fp, #16]
   2889c:	cmp	r0, #1
   288a0:	blt	29644 <ReadCompressedDataSlab2+0x1aa0>
   288a4:	ldr	r0, [sp, #16]
   288a8:	mov	r7, sl
   288ac:	mov	r6, r5
   288b0:	mov	r1, #0
   288b4:	add	r5, sp, #24
   288b8:	mov	sl, r3
   288bc:	str	r3, [sp, #12]
   288c0:	sub	r0, r0, #1
   288c4:	str	r0, [sp, #8]
   288c8:	ldr	r3, [r9]
   288cc:	str	r1, [sp, #16]
   288d0:	mov	r0, r6
   288d4:	mov	r1, r5
   288d8:	mov	r2, r8
   288dc:	bl	2728 <InflateSkipData>
   288e0:	mov	sl, r7
   288e4:	mov	r0, #1
   288e8:	mov	r1, r5
   288ec:	mov	r2, r4
   288f0:	mov	r3, r8
   288f4:	mov	r9, r5
   288f8:	ldr	sl, [r7]
   288fc:	str	r0, [sp]
   28900:	mov	r0, r6
   28904:	bl	18688 <ReadCompressedUInt16Data>
   28908:	add	r4, r4, #2
   2890c:	cmp	sl, #2
   28910:	blt	28978 <ReadCompressedDataSlab2+0xdd4>
   28914:	ldr	r8, [fp, #8]
   28918:	ldr	r7, [sp, #8]
   2891c:	ldr	r6, [sp, #20]
   28920:	mov	sl, #0
   28924:	mov	r5, r9
   28928:	mov	r0, r6
   2892c:	mov	r1, r5
   28930:	mov	r2, r8
   28934:	mov	r3, r7
   28938:	bl	2728 <InflateSkipData>
   2893c:	ldr	r0, [fp, #24]
   28940:	mov	r1, r5
   28944:	mov	r2, r4
   28948:	mov	r3, r8
   2894c:	ldr	r9, [r0]
   28950:	mov	r0, #1
   28954:	str	r0, [sp]
   28958:	mov	r0, r6
   2895c:	bl	18688 <ReadCompressedUInt16Data>
   28960:	add	sl, sl, #1
   28964:	sub	r0, r9, #1
   28968:	add	r4, r4, #2
   2896c:	cmp	sl, r0
   28970:	blt	28928 <ReadCompressedDataSlab2+0xd84>
   28974:	b	28984 <ReadCompressedDataSlab2+0xde0>
   28978:	ldr	r8, [fp, #8]
   2897c:	ldr	r6, [sp, #20]
   28980:	mov	r5, r9
   28984:	ldr	r7, [fp, #24]
   28988:	ldr	r1, [fp, #20]
   2898c:	ldr	r0, [fp, #12]
   28990:	ldr	sl, [sp, #12]
   28994:	ldr	r9, [fp, #16]
   28998:	ldr	r2, [r7]
   2899c:	ldr	r1, [r1]
   289a0:	ldr	r0, [r0]
   289a4:	sub	r2, r2, #1
   289a8:	add	r0, r0, sl
   289ac:	mul	r1, r2, r1
   289b0:	mov	r2, r8
   289b4:	mvn	r1, r1
   289b8:	add	r0, r0, r1
   289bc:	ldr	r1, [r9]
   289c0:	sub	r3, r0, r1
   289c4:	mov	r0, r6
   289c8:	mov	r1, r5
   289cc:	bl	2728 <InflateSkipData>
   289d0:	ldr	r1, [sp, #16]
   289d4:	ldr	r0, [r7, #4]
   289d8:	add	r1, r1, #1
   289dc:	cmp	r1, r0
   289e0:	blt	288c8 <ReadCompressedDataSlab2+0xd24>
   289e4:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   289e8:	ldr	r0, [sl, #4]
   289ec:	ldr	r9, [fp, #16]
   289f0:	cmp	r0, #1
   289f4:	blt	29644 <ReadCompressedDataSlab2+0x1aa0>
   289f8:	ldr	r0, [sp, #12]
   289fc:	mov	r7, sl
   28a00:	mov	r1, #0
   28a04:	add	r6, sp, #24
   28a08:	mov	sl, r3
   28a0c:	str	r3, [sp, #16]
   28a10:	sub	r0, r0, #1
   28a14:	str	r0, [sp, #12]
   28a18:	ldr	r3, [r9]
   28a1c:	str	r1, [sp, #20]
   28a20:	mov	r0, r5
   28a24:	mov	r1, r6
   28a28:	mov	r2, r8
   28a2c:	bl	2728 <InflateSkipData>
   28a30:	mov	sl, r7
   28a34:	mov	r0, #1
   28a38:	mov	r1, r6
   28a3c:	mov	r2, r4
   28a40:	mov	r3, r8
   28a44:	mov	r9, r6
   28a48:	ldr	sl, [r7]
   28a4c:	str	r0, [sp]
   28a50:	mov	r0, r5
   28a54:	bl	10624 <ReadCompressedInt32Data>
   28a58:	add	r4, r4, #4
   28a5c:	cmp	sl, #2
   28a60:	blt	28ac4 <ReadCompressedDataSlab2+0xf20>
   28a64:	ldr	r8, [fp, #8]
   28a68:	ldr	r7, [sp, #12]
   28a6c:	mov	sl, #0
   28a70:	mov	r6, r9
   28a74:	mov	r0, r5
   28a78:	mov	r1, r6
   28a7c:	mov	r2, r8
   28a80:	mov	r3, r7
   28a84:	bl	2728 <InflateSkipData>
   28a88:	ldr	r0, [fp, #24]
   28a8c:	mov	r1, r6
   28a90:	mov	r2, r4
   28a94:	mov	r3, r8
   28a98:	ldr	r9, [r0]
   28a9c:	mov	r0, #1
   28aa0:	str	r0, [sp]
   28aa4:	mov	r0, r5
   28aa8:	bl	10624 <ReadCompressedInt32Data>
   28aac:	add	sl, sl, #1
   28ab0:	sub	r0, r9, #1
   28ab4:	add	r4, r4, #4
   28ab8:	cmp	sl, r0
   28abc:	blt	28a74 <ReadCompressedDataSlab2+0xed0>
   28ac0:	b	28acc <ReadCompressedDataSlab2+0xf28>
   28ac4:	ldr	r8, [fp, #8]
   28ac8:	mov	r6, r9
   28acc:	ldr	r7, [fp, #24]
   28ad0:	ldr	r1, [fp, #20]
   28ad4:	ldr	r0, [fp, #12]
   28ad8:	ldr	sl, [sp, #16]
   28adc:	ldr	r9, [fp, #16]
   28ae0:	ldr	r2, [r7]
   28ae4:	ldr	r1, [r1]
   28ae8:	ldr	r0, [r0]
   28aec:	sub	r2, r2, #1
   28af0:	add	r0, r0, sl
   28af4:	mul	r1, r2, r1
   28af8:	mov	r2, r8
   28afc:	mvn	r1, r1
   28b00:	add	r0, r0, r1
   28b04:	ldr	r1, [r9]
   28b08:	sub	r3, r0, r1
   28b0c:	mov	r0, r5
   28b10:	mov	r1, r6
   28b14:	bl	2728 <InflateSkipData>
   28b18:	ldr	r1, [sp, #20]
   28b1c:	ldr	r0, [r7, #4]
   28b20:	add	r1, r1, #1
   28b24:	cmp	r1, r0
   28b28:	blt	28a18 <ReadCompressedDataSlab2+0xe74>
   28b2c:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   28b30:	ldr	r0, [sl, #4]
   28b34:	ldr	r9, [fp, #16]
   28b38:	cmp	r0, #1
   28b3c:	blt	29644 <ReadCompressedDataSlab2+0x1aa0>
   28b40:	ldr	r0, [sp, #12]
   28b44:	mov	r7, sl
   28b48:	mov	r1, #0
   28b4c:	add	r6, sp, #24
   28b50:	mov	sl, r3
   28b54:	str	r3, [sp, #16]
   28b58:	sub	r0, r0, #1
   28b5c:	str	r0, [sp, #12]
   28b60:	ldr	r3, [r9]
   28b64:	str	r1, [sp, #20]
   28b68:	mov	r0, r5
   28b6c:	mov	r1, r6
   28b70:	mov	r2, r8
   28b74:	bl	2728 <InflateSkipData>
   28b78:	mov	sl, r7
   28b7c:	mov	r0, #1
   28b80:	mov	r1, r6
   28b84:	mov	r2, r4
   28b88:	mov	r3, r8
   28b8c:	mov	r9, r6
   28b90:	ldr	sl, [r7]
   28b94:	str	r0, [sp]
   28b98:	mov	r0, r5
   28b9c:	bl	136f0 <ReadCompressedUInt32Data>
   28ba0:	add	r4, r4, #4
   28ba4:	cmp	sl, #2
   28ba8:	blt	28c0c <ReadCompressedDataSlab2+0x1068>
   28bac:	ldr	r8, [fp, #8]
   28bb0:	ldr	r7, [sp, #12]
   28bb4:	mov	sl, #0
   28bb8:	mov	r6, r9
   28bbc:	mov	r0, r5
   28bc0:	mov	r1, r6
   28bc4:	mov	r2, r8
   28bc8:	mov	r3, r7
   28bcc:	bl	2728 <InflateSkipData>
   28bd0:	ldr	r0, [fp, #24]
   28bd4:	mov	r1, r6
   28bd8:	mov	r2, r4
   28bdc:	mov	r3, r8
   28be0:	ldr	r9, [r0]
   28be4:	mov	r0, #1
   28be8:	str	r0, [sp]
   28bec:	mov	r0, r5
   28bf0:	bl	136f0 <ReadCompressedUInt32Data>
   28bf4:	add	sl, sl, #1
   28bf8:	sub	r0, r9, #1
   28bfc:	add	r4, r4, #4
   28c00:	cmp	sl, r0
   28c04:	blt	28bbc <ReadCompressedDataSlab2+0x1018>
   28c08:	b	28c14 <ReadCompressedDataSlab2+0x1070>
   28c0c:	ldr	r8, [fp, #8]
   28c10:	mov	r6, r9
   28c14:	ldr	r7, [fp, #24]
   28c18:	ldr	r1, [fp, #20]
   28c1c:	ldr	r0, [fp, #12]
   28c20:	ldr	sl, [sp, #16]
   28c24:	ldr	r9, [fp, #16]
   28c28:	ldr	r2, [r7]
   28c2c:	ldr	r1, [r1]
   28c30:	ldr	r0, [r0]
   28c34:	sub	r2, r2, #1
   28c38:	add	r0, r0, sl
   28c3c:	mul	r1, r2, r1
   28c40:	mov	r2, r8
   28c44:	mvn	r1, r1
   28c48:	add	r0, r0, r1
   28c4c:	ldr	r1, [r9]
   28c50:	sub	r3, r0, r1
   28c54:	mov	r0, r5
   28c58:	mov	r1, r6
   28c5c:	bl	2728 <InflateSkipData>
   28c60:	ldr	r1, [sp, #20]
   28c64:	ldr	r0, [r7, #4]
   28c68:	add	r1, r1, #1
   28c6c:	cmp	r1, r0
   28c70:	blt	28b60 <ReadCompressedDataSlab2+0xfbc>
   28c74:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   28c78:	ldr	r0, [sl, #4]
   28c7c:	ldr	r9, [fp, #16]
   28c80:	cmp	r0, #1
   28c84:	blt	29644 <ReadCompressedDataSlab2+0x1aa0>
   28c88:	ldr	r0, [sp, #12]
   28c8c:	mov	r7, sl
   28c90:	mov	r1, #0
   28c94:	add	r6, sp, #24
   28c98:	mov	sl, r3
   28c9c:	str	r3, [sp, #16]
   28ca0:	sub	r0, r0, #1
   28ca4:	str	r0, [sp, #12]
   28ca8:	ldr	r3, [r9]
   28cac:	str	r1, [sp, #20]
   28cb0:	mov	r0, r5
   28cb4:	mov	r1, r6
   28cb8:	mov	r2, r8
   28cbc:	bl	2728 <InflateSkipData>
   28cc0:	mov	sl, r7
   28cc4:	mov	r0, #1
   28cc8:	mov	r1, r6
   28ccc:	mov	r2, r4
   28cd0:	mov	r3, r8
   28cd4:	mov	r9, r6
   28cd8:	ldr	sl, [r7]
   28cdc:	str	r0, [sp]
   28ce0:	mov	r0, r5
   28ce4:	bl	d4c8 <ReadCompressedUInt64Data>
   28ce8:	add	r4, r4, #8
   28cec:	cmp	sl, #2
   28cf0:	blt	28d54 <ReadCompressedDataSlab2+0x11b0>
   28cf4:	ldr	r8, [fp, #8]
   28cf8:	ldr	r7, [sp, #12]
   28cfc:	mov	sl, #0
   28d00:	mov	r6, r9
   28d04:	mov	r0, r5
   28d08:	mov	r1, r6
   28d0c:	mov	r2, r8
   28d10:	mov	r3, r7
   28d14:	bl	2728 <InflateSkipData>
   28d18:	ldr	r0, [fp, #24]
   28d1c:	mov	r1, r6
   28d20:	mov	r2, r4
   28d24:	mov	r3, r8
   28d28:	ldr	r9, [r0]
   28d2c:	mov	r0, #1
   28d30:	str	r0, [sp]
   28d34:	mov	r0, r5
   28d38:	bl	d4c8 <ReadCompressedUInt64Data>
   28d3c:	add	sl, sl, #1
   28d40:	sub	r0, r9, #1
   28d44:	add	r4, r4, #8
   28d48:	cmp	sl, r0
   28d4c:	blt	28d04 <ReadCompressedDataSlab2+0x1160>
   28d50:	b	28d5c <ReadCompressedDataSlab2+0x11b8>
   28d54:	ldr	r8, [fp, #8]
   28d58:	mov	r6, r9
   28d5c:	ldr	r7, [fp, #24]
   28d60:	ldr	r1, [fp, #20]
   28d64:	ldr	r0, [fp, #12]
   28d68:	ldr	sl, [sp, #16]
   28d6c:	ldr	r9, [fp, #16]
   28d70:	ldr	r2, [r7]
   28d74:	ldr	r1, [r1]
   28d78:	ldr	r0, [r0]
   28d7c:	sub	r2, r2, #1
   28d80:	add	r0, r0, sl
   28d84:	mul	r1, r2, r1
   28d88:	mov	r2, r8
   28d8c:	mvn	r1, r1
   28d90:	add	r0, r0, r1
   28d94:	ldr	r1, [r9]
   28d98:	sub	r3, r0, r1
   28d9c:	mov	r0, r5
   28da0:	mov	r1, r6
   28da4:	bl	2728 <InflateSkipData>
   28da8:	ldr	r1, [sp, #20]
   28dac:	ldr	r0, [r7, #4]
   28db0:	add	r1, r1, #1
   28db4:	cmp	r1, r0
   28db8:	blt	28ca8 <ReadCompressedDataSlab2+0x1104>
   28dbc:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   28dc0:	ldr	r0, [sl, #4]
   28dc4:	ldr	r1, [sp, #12]
   28dc8:	ldr	r9, [fp, #16]
   28dcc:	cmp	r0, #1
   28dd0:	blt	29644 <ReadCompressedDataSlab2+0x1aa0>
   28dd4:	sub	r0, r1, #1
   28dd8:	mov	r7, #0
   28ddc:	add	r6, sp, #24
   28de0:	str	r3, [sp, #16]
   28de4:	str	r0, [sp, #12]
   28de8:	ldr	r3, [r9]
   28dec:	mov	r0, r5
   28df0:	mov	r1, r6
   28df4:	mov	r2, r8
   28df8:	bl	2728 <InflateSkipData>
   28dfc:	ldr	sl, [sl]
   28e00:	mov	r0, #1
   28e04:	mov	r1, r6
   28e08:	mov	r2, r4
   28e0c:	mov	r3, r8
   28e10:	str	r0, [sp]
   28e14:	mov	r0, r5
   28e18:	bl	b1d0 <ReadCompressedInt64Data>
   28e1c:	add	r4, r4, #8
   28e20:	cmp	sl, #2
   28e24:	str	r7, [sp, #20]
   28e28:	blt	28e88 <ReadCompressedDataSlab2+0x12e4>
   28e2c:	ldr	r8, [fp, #8]
   28e30:	ldr	r7, [sp, #12]
   28e34:	mov	sl, #0
   28e38:	mov	r0, r5
   28e3c:	mov	r1, r6
   28e40:	mov	r2, r8
   28e44:	mov	r3, r7
   28e48:	bl	2728 <InflateSkipData>
   28e4c:	ldr	r0, [fp, #24]
   28e50:	mov	r1, r6
   28e54:	mov	r2, r4
   28e58:	mov	r3, r8
   28e5c:	ldr	r9, [r0]
   28e60:	mov	r0, #1
   28e64:	str	r0, [sp]
   28e68:	mov	r0, r5
   28e6c:	bl	b1d0 <ReadCompressedInt64Data>
   28e70:	add	sl, sl, #1
   28e74:	sub	r0, r9, #1
   28e78:	add	r4, r4, #8
   28e7c:	cmp	sl, r0
   28e80:	blt	28e38 <ReadCompressedDataSlab2+0x1294>
   28e84:	b	28e8c <ReadCompressedDataSlab2+0x12e8>
   28e88:	ldr	r8, [fp, #8]
   28e8c:	ldr	sl, [fp, #24]
   28e90:	ldr	r1, [fp, #20]
   28e94:	ldr	r0, [fp, #12]
   28e98:	ldr	r7, [sp, #16]
   28e9c:	ldr	r9, [fp, #16]
   28ea0:	ldr	r2, [sl]
   28ea4:	ldr	r1, [r1]
   28ea8:	ldr	r0, [r0]
   28eac:	sub	r2, r2, #1
   28eb0:	add	r0, r0, r7
   28eb4:	mul	r1, r2, r1
   28eb8:	mov	r2, r8
   28ebc:	mvn	r1, r1
   28ec0:	add	r0, r0, r1
   28ec4:	ldr	r1, [r9]
   28ec8:	sub	r3, r0, r1
   28ecc:	mov	r0, r5
   28ed0:	mov	r1, r6
   28ed4:	bl	2728 <InflateSkipData>
   28ed8:	ldr	r7, [sp, #20]
   28edc:	ldr	r0, [sl, #4]
   28ee0:	add	r7, r7, #1
   28ee4:	cmp	r7, r0
   28ee8:	blt	28de8 <ReadCompressedDataSlab2+0x1244>
   28eec:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   28ef0:	ldr	r0, [sl, #4]
   28ef4:	str	r3, [sp, #16]
   28ef8:	cmp	r0, #1
   28efc:	ldr	r0, [fp, #16]
   28f00:	blt	29644 <ReadCompressedDataSlab2+0x1aa0>
   28f04:	mov	r9, r8
   28f08:	mov	r6, r2
   28f0c:	mov	r7, #0
   28f10:	ldr	r3, [r0]
   28f14:	add	r1, sp, #24
   28f18:	mov	r0, r5
   28f1c:	mov	r2, r9
   28f20:	mov	r8, r1
   28f24:	bl	2728 <InflateSkipData>
   28f28:	ldr	r0, [sl]
   28f2c:	mov	r1, r8
   28f30:	mov	r2, r4
   28f34:	mov	r3, r9
   28f38:	str	r0, [sp]
   28f3c:	mov	r0, r5
   28f40:	bl	5584 <ReadCompressedDoubleData>
   28f44:	ldr	r0, [r6]
   28f48:	ldr	r1, [sp, #16]
   28f4c:	mov	r8, r6
   28f50:	ldr	r6, [sl]
   28f54:	add	r0, r0, r1
   28f58:	ldr	r1, [fp, #20]
   28f5c:	sub	r2, r6, #1
   28f60:	ldr	r1, [r1]
   28f64:	mul	r1, r1, r2
   28f68:	mov	r2, r9
   28f6c:	mvn	r1, r1
   28f70:	add	r0, r0, r1
   28f74:	ldr	r1, [fp, #16]
   28f78:	ldr	r1, [r1]
   28f7c:	sub	r3, r0, r1
   28f80:	mov	r0, r5
   28f84:	add	r1, sp, #24
   28f88:	bl	2728 <InflateSkipData>
   28f8c:	ldr	r0, [sl, #4]
   28f90:	add	r7, r7, #1
   28f94:	add	r4, r4, r6, lsl #3
   28f98:	mov	r6, r8
   28f9c:	cmp	r7, r0
   28fa0:	ldr	r0, [fp, #16]
   28fa4:	blt	28f10 <ReadCompressedDataSlab2+0x136c>
   28fa8:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   28fac:	ldr	r0, [sl, #4]
   28fb0:	str	r3, [sp, #16]
   28fb4:	cmp	r0, #1
   28fb8:	ldr	r0, [fp, #16]
   28fbc:	blt	29644 <ReadCompressedDataSlab2+0x1aa0>
   28fc0:	mov	r9, r8
   28fc4:	mov	r6, r2
   28fc8:	mov	r7, #0
   28fcc:	ldr	r3, [r0]
   28fd0:	add	r1, sp, #24
   28fd4:	mov	r0, r5
   28fd8:	mov	r2, r9
   28fdc:	mov	r8, r1
   28fe0:	bl	2728 <InflateSkipData>
   28fe4:	ldr	r0, [sl]
   28fe8:	mov	r1, r8
   28fec:	mov	r2, r4
   28ff0:	mov	r3, r9
   28ff4:	str	r0, [sp]
   28ff8:	mov	r0, r5
   28ffc:	bl	8ef4 <ReadCompressedSingleData>
   29000:	ldr	r0, [r6]
   29004:	ldr	r1, [sp, #16]
   29008:	mov	r8, r6
   2900c:	ldr	r6, [sl]
   29010:	add	r0, r0, r1
   29014:	ldr	r1, [fp, #20]
   29018:	sub	r2, r6, #1
   2901c:	ldr	r1, [r1]
   29020:	mul	r1, r1, r2
   29024:	mov	r2, r9
   29028:	mvn	r1, r1
   2902c:	add	r0, r0, r1
   29030:	ldr	r1, [fp, #16]
   29034:	ldr	r1, [r1]
   29038:	sub	r3, r0, r1
   2903c:	mov	r0, r5
   29040:	add	r1, sp, #24
   29044:	bl	2728 <InflateSkipData>
   29048:	ldr	r0, [sl, #4]
   2904c:	add	r7, r7, #1
   29050:	add	r4, r4, r6, lsl #2
   29054:	mov	r6, r8
   29058:	cmp	r7, r0
   2905c:	ldr	r0, [fp, #16]
   29060:	blt	28fcc <ReadCompressedDataSlab2+0x1428>
   29064:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   29068:	ldr	r0, [sl, #4]
   2906c:	str	r3, [sp, #16]
   29070:	cmp	r0, #1
   29074:	ldr	r0, [fp, #16]
   29078:	blt	29644 <ReadCompressedDataSlab2+0x1aa0>
   2907c:	mov	r9, r8
   29080:	mov	r6, r2
   29084:	mov	r7, #0
   29088:	ldr	r3, [r0]
   2908c:	add	r1, sp, #24
   29090:	mov	r0, r5
   29094:	mov	r2, r9
   29098:	mov	r8, r1
   2909c:	bl	2728 <InflateSkipData>
   290a0:	ldr	r0, [sl]
   290a4:	mov	r1, r8
   290a8:	mov	r2, r4
   290ac:	mov	r3, r9
   290b0:	str	r0, [sp]
   290b4:	mov	r0, r5
   290b8:	bl	1acbc <ReadCompressedInt8Data>
   290bc:	ldr	r0, [r6]
   290c0:	ldr	r1, [sp, #16]
   290c4:	mov	r8, r6
   290c8:	ldr	r6, [sl]
   290cc:	add	r0, r0, r1
   290d0:	ldr	r1, [fp, #20]
   290d4:	sub	r2, r6, #1
   290d8:	ldr	r1, [r1]
   290dc:	mul	r1, r1, r2
   290e0:	mov	r2, r9
   290e4:	mvn	r1, r1
   290e8:	add	r0, r0, r1
   290ec:	ldr	r1, [fp, #16]
   290f0:	ldr	r1, [r1]
   290f4:	sub	r3, r0, r1
   290f8:	mov	r0, r5
   290fc:	add	r1, sp, #24
   29100:	bl	2728 <InflateSkipData>
   29104:	ldr	r0, [sl, #4]
   29108:	add	r7, r7, #1
   2910c:	add	r4, r4, r6
   29110:	mov	r6, r8
   29114:	cmp	r7, r0
   29118:	ldr	r0, [fp, #16]
   2911c:	blt	29088 <ReadCompressedDataSlab2+0x14e4>
   29120:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   29124:	ldr	r0, [sl, #4]
   29128:	str	r3, [sp, #16]
   2912c:	cmp	r0, #1
   29130:	ldr	r0, [fp, #16]
   29134:	blt	29644 <ReadCompressedDataSlab2+0x1aa0>
   29138:	mov	r9, r8
   2913c:	mov	r6, r2
   29140:	mov	r7, #0
   29144:	ldr	r3, [r0]
   29148:	add	r1, sp, #24
   2914c:	mov	r0, r5
   29150:	mov	r2, r9
   29154:	mov	r8, r1
   29158:	bl	2728 <InflateSkipData>
   2915c:	ldr	r0, [sl]
   29160:	mov	r1, r8
   29164:	mov	r2, r4
   29168:	mov	r3, r9
   2916c:	str	r0, [sp]
   29170:	mov	r0, r5
   29174:	bl	1d2f0 <ReadCompressedUInt8Data>
   29178:	ldr	r0, [r6]
   2917c:	ldr	r1, [sp, #16]
   29180:	mov	r8, r6
   29184:	ldr	r6, [sl]
   29188:	add	r0, r0, r1
   2918c:	ldr	r1, [fp, #20]
   29190:	sub	r2, r6, #1
   29194:	ldr	r1, [r1]
   29198:	mul	r1, r1, r2
   2919c:	mov	r2, r9
   291a0:	mvn	r1, r1
   291a4:	add	r0, r0, r1
   291a8:	ldr	r1, [fp, #16]
   291ac:	ldr	r1, [r1]
   291b0:	sub	r3, r0, r1
   291b4:	mov	r0, r5
   291b8:	add	r1, sp, #24
   291bc:	bl	2728 <InflateSkipData>
   291c0:	ldr	r0, [sl, #4]
   291c4:	add	r7, r7, #1
   291c8:	add	r4, r4, r6
   291cc:	mov	r6, r8
   291d0:	cmp	r7, r0
   291d4:	ldr	r0, [fp, #16]
   291d8:	blt	29144 <ReadCompressedDataSlab2+0x15a0>
   291dc:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   291e0:	ldr	r0, [sl, #4]
   291e4:	str	r3, [sp, #16]
   291e8:	cmp	r0, #1
   291ec:	ldr	r0, [fp, #16]
   291f0:	blt	29644 <ReadCompressedDataSlab2+0x1aa0>
   291f4:	mov	r9, r8
   291f8:	mov	r6, r2
   291fc:	mov	r7, #0
   29200:	ldr	r3, [r0]
   29204:	add	r1, sp, #24
   29208:	mov	r0, r5
   2920c:	mov	r2, r9
   29210:	mov	r8, r1
   29214:	bl	2728 <InflateSkipData>
   29218:	ldr	r0, [sl]
   2921c:	mov	r1, r8
   29220:	mov	r2, r4
   29224:	mov	r3, r9
   29228:	str	r0, [sp]
   2922c:	mov	r0, r5
   29230:	bl	15ebc <ReadCompressedInt16Data>
   29234:	ldr	r0, [r6]
   29238:	ldr	r1, [sp, #16]
   2923c:	mov	r8, r6
   29240:	ldr	r6, [sl]
   29244:	add	r0, r0, r1
   29248:	ldr	r1, [fp, #20]
   2924c:	sub	r2, r6, #1
   29250:	ldr	r1, [r1]
   29254:	mul	r1, r1, r2
   29258:	mov	r2, r9
   2925c:	mvn	r1, r1
   29260:	add	r0, r0, r1
   29264:	ldr	r1, [fp, #16]
   29268:	ldr	r1, [r1]
   2926c:	sub	r3, r0, r1
   29270:	mov	r0, r5
   29274:	add	r1, sp, #24
   29278:	bl	2728 <InflateSkipData>
   2927c:	ldr	r0, [sl, #4]
   29280:	add	r7, r7, #1
   29284:	add	r4, r4, r6, lsl #1
   29288:	mov	r6, r8
   2928c:	cmp	r7, r0
   29290:	ldr	r0, [fp, #16]
   29294:	blt	29200 <ReadCompressedDataSlab2+0x165c>
   29298:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   2929c:	ldr	r0, [sl, #4]
   292a0:	str	r3, [sp, #12]
   292a4:	cmp	r0, #1
   292a8:	ldr	r0, [fp, #16]
   292ac:	blt	29644 <ReadCompressedDataSlab2+0x1aa0>
   292b0:	mov	r9, r8
   292b4:	mov	r6, r2
   292b8:	mov	r7, #0
   292bc:	ldr	r3, [r0]
   292c0:	add	r1, sp, #24
   292c4:	mov	r0, r5
   292c8:	mov	r2, r9
   292cc:	mov	r8, r1
   292d0:	bl	2728 <InflateSkipData>
   292d4:	ldr	r0, [sl]
   292d8:	mov	r1, r8
   292dc:	mov	r2, r4
   292e0:	mov	r3, r9
   292e4:	str	r0, [sp]
   292e8:	mov	r0, r5
   292ec:	bl	18688 <ReadCompressedUInt16Data>
   292f0:	ldr	r0, [r6]
   292f4:	ldr	r1, [sp, #12]
   292f8:	mov	r8, r6
   292fc:	ldr	r6, [sl]
   29300:	add	r0, r0, r1
   29304:	ldr	r1, [fp, #20]
   29308:	sub	r2, r6, #1
   2930c:	ldr	r1, [r1]
   29310:	mul	r1, r1, r2
   29314:	mov	r2, r9
   29318:	mvn	r1, r1
   2931c:	add	r0, r0, r1
   29320:	ldr	r1, [fp, #16]
   29324:	ldr	r1, [r1]
   29328:	sub	r3, r0, r1
   2932c:	mov	r0, r5
   29330:	add	r1, sp, #24
   29334:	bl	2728 <InflateSkipData>
   29338:	ldr	r0, [sl, #4]
   2933c:	add	r7, r7, #1
   29340:	add	r4, r4, r6, lsl #1
   29344:	mov	r6, r8
   29348:	cmp	r7, r0
   2934c:	ldr	r0, [fp, #16]
   29350:	blt	292bc <ReadCompressedDataSlab2+0x1718>
   29354:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   29358:	ldr	r0, [sl, #4]
   2935c:	str	r3, [sp, #16]
   29360:	cmp	r0, #1
   29364:	ldr	r0, [fp, #16]
   29368:	blt	29644 <ReadCompressedDataSlab2+0x1aa0>
   2936c:	mov	r9, r8
   29370:	mov	r6, r2
   29374:	mov	r7, #0
   29378:	ldr	r3, [r0]
   2937c:	add	r1, sp, #24
   29380:	mov	r0, r5
   29384:	mov	r2, r9
   29388:	mov	r8, r1
   2938c:	bl	2728 <InflateSkipData>
   29390:	ldr	r0, [sl]
   29394:	mov	r1, r8
   29398:	mov	r2, r4
   2939c:	mov	r3, r9
   293a0:	str	r0, [sp]
   293a4:	mov	r0, r5
   293a8:	bl	10624 <ReadCompressedInt32Data>
   293ac:	ldr	r0, [r6]
   293b0:	ldr	r1, [sp, #16]
   293b4:	mov	r8, r6
   293b8:	ldr	r6, [sl]
   293bc:	add	r0, r0, r1
   293c0:	ldr	r1, [fp, #20]
   293c4:	sub	r2, r6, #1
   293c8:	ldr	r1, [r1]
   293cc:	mul	r1, r1, r2
   293d0:	mov	r2, r9
   293d4:	mvn	r1, r1
   293d8:	add	r0, r0, r1
   293dc:	ldr	r1, [fp, #16]
   293e0:	ldr	r1, [r1]
   293e4:	sub	r3, r0, r1
   293e8:	mov	r0, r5
   293ec:	add	r1, sp, #24
   293f0:	bl	2728 <InflateSkipData>
   293f4:	ldr	r0, [sl, #4]
   293f8:	add	r7, r7, #1
   293fc:	add	r4, r4, r6, lsl #2
   29400:	mov	r6, r8
   29404:	cmp	r7, r0
   29408:	ldr	r0, [fp, #16]
   2940c:	blt	29378 <ReadCompressedDataSlab2+0x17d4>
   29410:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   29414:	ldr	r0, [sl, #4]
   29418:	str	r3, [sp, #16]
   2941c:	cmp	r0, #1
   29420:	ldr	r0, [fp, #16]
   29424:	blt	29644 <ReadCompressedDataSlab2+0x1aa0>
   29428:	mov	r9, r8
   2942c:	mov	r6, r2
   29430:	mov	r7, #0
   29434:	ldr	r3, [r0]
   29438:	add	r1, sp, #24
   2943c:	mov	r0, r5
   29440:	mov	r2, r9
   29444:	mov	r8, r1
   29448:	bl	2728 <InflateSkipData>
   2944c:	ldr	r0, [sl]
   29450:	mov	r1, r8
   29454:	mov	r2, r4
   29458:	mov	r3, r9
   2945c:	str	r0, [sp]
   29460:	mov	r0, r5
   29464:	bl	136f0 <ReadCompressedUInt32Data>
   29468:	ldr	r0, [r6]
   2946c:	ldr	r1, [sp, #16]
   29470:	mov	r8, r6
   29474:	ldr	r6, [sl]
   29478:	add	r0, r0, r1
   2947c:	ldr	r1, [fp, #20]
   29480:	sub	r2, r6, #1
   29484:	ldr	r1, [r1]
   29488:	mul	r1, r1, r2
   2948c:	mov	r2, r9
   29490:	mvn	r1, r1
   29494:	add	r0, r0, r1
   29498:	ldr	r1, [fp, #16]
   2949c:	ldr	r1, [r1]
   294a0:	sub	r3, r0, r1
   294a4:	mov	r0, r5
   294a8:	add	r1, sp, #24
   294ac:	bl	2728 <InflateSkipData>
   294b0:	ldr	r0, [sl, #4]
   294b4:	add	r7, r7, #1
   294b8:	add	r4, r4, r6, lsl #2
   294bc:	mov	r6, r8
   294c0:	cmp	r7, r0
   294c4:	ldr	r0, [fp, #16]
   294c8:	blt	29434 <ReadCompressedDataSlab2+0x1890>
   294cc:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   294d0:	ldr	r0, [sl, #4]
   294d4:	str	r3, [sp, #16]
   294d8:	cmp	r0, #1
   294dc:	ldr	r0, [fp, #16]
   294e0:	blt	29644 <ReadCompressedDataSlab2+0x1aa0>
   294e4:	mov	r9, r8
   294e8:	mov	r6, r2
   294ec:	mov	r7, #0
   294f0:	ldr	r3, [r0]
   294f4:	add	r1, sp, #24
   294f8:	mov	r0, r5
   294fc:	mov	r2, r9
   29500:	mov	r8, r1
   29504:	bl	2728 <InflateSkipData>
   29508:	ldr	r0, [sl]
   2950c:	mov	r1, r8
   29510:	mov	r2, r4
   29514:	mov	r3, r9
   29518:	str	r0, [sp]
   2951c:	mov	r0, r5
   29520:	bl	d4c8 <ReadCompressedUInt64Data>
   29524:	ldr	r0, [r6]
   29528:	ldr	r1, [sp, #16]
   2952c:	mov	r8, r6
   29530:	ldr	r6, [sl]
   29534:	add	r0, r0, r1
   29538:	ldr	r1, [fp, #20]
   2953c:	sub	r2, r6, #1
   29540:	ldr	r1, [r1]
   29544:	mul	r1, r1, r2
   29548:	mov	r2, r9
   2954c:	mvn	r1, r1
   29550:	add	r0, r0, r1
   29554:	ldr	r1, [fp, #16]
   29558:	ldr	r1, [r1]
   2955c:	sub	r3, r0, r1
   29560:	mov	r0, r5
   29564:	add	r1, sp, #24
   29568:	bl	2728 <InflateSkipData>
   2956c:	ldr	r0, [sl, #4]
   29570:	add	r7, r7, #1
   29574:	add	r4, r4, r6, lsl #3
   29578:	mov	r6, r8
   2957c:	cmp	r7, r0
   29580:	ldr	r0, [fp, #16]
   29584:	blt	294f0 <ReadCompressedDataSlab2+0x194c>
   29588:	b	29644 <ReadCompressedDataSlab2+0x1aa0>
   2958c:	ldr	r0, [sl, #4]
   29590:	str	r3, [sp, #16]
   29594:	cmp	r0, #1
   29598:	ldr	r0, [fp, #16]
   2959c:	blt	29644 <ReadCompressedDataSlab2+0x1aa0>
   295a0:	mov	r9, r8
   295a4:	mov	r6, r2
   295a8:	mov	r7, #0
   295ac:	ldr	r3, [r0]
   295b0:	add	r1, sp, #24
   295b4:	mov	r0, r5
   295b8:	mov	r2, r9
   295bc:	mov	r8, r1
   295c0:	bl	2728 <InflateSkipData>
   295c4:	ldr	r0, [sl]
   295c8:	mov	r1, r8
   295cc:	mov	r2, r4
   295d0:	mov	r3, r9
   295d4:	str	r0, [sp]
   295d8:	mov	r0, r5
   295dc:	bl	b1d0 <ReadCompressedInt64Data>
   295e0:	ldr	r0, [r6]
   295e4:	ldr	r1, [sp, #16]
   295e8:	mov	r8, r6
   295ec:	ldr	r6, [sl]
   295f0:	add	r0, r0, r1
   295f4:	ldr	r1, [fp, #20]
   295f8:	sub	r2, r6, #1
   295fc:	ldr	r1, [r1]
   29600:	mul	r1, r1, r2
   29604:	mov	r2, r9
   29608:	mvn	r1, r1
   2960c:	add	r0, r0, r1
   29610:	ldr	r1, [fp, #16]
   29614:	ldr	r1, [r1]
   29618:	sub	r3, r0, r1
   2961c:	mov	r0, r5
   29620:	add	r1, sp, #24
   29624:	bl	2728 <InflateSkipData>
   29628:	ldr	r0, [sl, #4]
   2962c:	add	r7, r7, #1
   29630:	add	r4, r4, r6, lsl #3
   29634:	mov	r6, r8
   29638:	cmp	r7, r0
   2963c:	ldr	r0, [fp, #16]
   29640:	blt	295ac <ReadCompressedDataSlab2+0x1a08>
   29644:	add	r0, sp, #24
   29648:	bl	193c <inflateEnd@plt>
   2964c:	mov	r0, #0
   29650:	sub	sp, fp, #28
   29654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

00029660 <Mat_Create5>:
   29660:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   29664:	add	fp, sp, #24
   29668:	sub	sp, sp, #24
   2966c:	mov	r4, #0
   29670:	mov	r8, r1
   29674:	mov	r6, r0
   29678:	strh	r4, [sp, #22]
   2967c:	ldr	r1, [pc, #416]	; 29824 <Mat_Create5+0x1c4>
   29680:	add	r1, pc, r1
   29684:	bl	17e0 <fopen@plt>
   29688:	cmp	r0, #0
   2968c:	beq	29750 <Mat_Create5+0xf0>
   29690:	mov	r5, r0
   29694:	mov	r0, #44	; 0x2c
   29698:	bl	18d0 <malloc@plt>
   2969c:	cmp	r0, #0
   296a0:	beq	29744 <Mat_Create5+0xe4>
   296a4:	mov	r4, r0
   296a8:	mov	r7, #0
   296ac:	mov	r0, #128	; 0x80
   296b0:	str	r7, [r4, #16]
   296b4:	str	r0, [r4, #28]
   296b8:	mov	r0, #0
   296bc:	str	r7, [r4, #32]
   296c0:	str	r7, [r4, #36]	; 0x24
   296c4:	str	r7, [r4, #40]	; 0x28
   296c8:	bl	1834 <time@plt>
   296cc:	str	r0, [sp, #16]
   296d0:	str	r5, [r4]
   296d4:	mov	r1, r6
   296d8:	ldr	r0, [pc, #328]	; 29828 <Mat_Create5+0x1c8>
   296dc:	add	r0, pc, r0
   296e0:	bl	1dac <strdup_printf>
   296e4:	str	r0, [r4, #12]
   296e8:	mov	r0, #128	; 0x80
   296ec:	mov	r9, #1
   296f0:	str	r7, [r4, #20]
   296f4:	str	r9, [r4, #24]
   296f8:	bl	18d0 <malloc@plt>
   296fc:	mov	r7, r0
   29700:	str	r0, [r4, #4]
   29704:	mov	r0, #8
   29708:	bl	18d0 <malloc@plt>
   2970c:	mov	r6, r0
   29710:	str	r0, [r4, #8]
   29714:	mov	r0, r7
   29718:	mov	r1, #32
   2971c:	mov	r2, #128	; 0x80
   29720:	bl	1990 <memset@plt>
   29724:	cmp	r8, #0
   29728:	beq	2975c <Mat_Create5+0xfc>
   2972c:	ldr	r2, [pc, #256]	; 29834 <Mat_Create5+0x1d4>
   29730:	mov	r0, r7
   29734:	mov	r1, #116	; 0x74
   29738:	mov	r3, r8
   2973c:	add	r2, pc, r2
   29740:	b	29794 <Mat_Create5+0x134>
   29744:	mov	r0, r5
   29748:	bl	19cc <fclose@plt>
   2974c:	mov	r4, #0
   29750:	mov	r0, r4
   29754:	sub	sp, fp, #24
   29758:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2975c:	add	r0, sp, #16
   29760:	bl	1858 <ctime@plt>
   29764:	mov	r1, #15
   29768:	mov	r2, #5
   2976c:	str	r0, [sp, #12]
   29770:	str	r9, [sp]
   29774:	mov	r0, r7
   29778:	str	r1, [sp, #8]
   2977c:	str	r2, [sp, #4]
   29780:	mov	r1, #116	; 0x74
   29784:	ldr	r2, [pc, #160]	; 2982c <Mat_Create5+0x1cc>
   29788:	ldr	r3, [pc, #160]	; 29830 <Mat_Create5+0x1d0>
   2978c:	add	r2, pc, r2
   29790:	add	r3, pc, r3
   29794:	bl	1978 <snprintf@plt>
   29798:	cmp	r0, #116	; 0x74
   2979c:	mov	r1, #1
   297a0:	mov	r2, #116	; 0x74
   297a4:	mov	r3, r5
   297a8:	movcs	r0, #0
   297ac:	strbcs	r0, [r7, #115]	; 0x73
   297b0:	movw	r0, #8224	; 0x2020
   297b4:	movt	r0, #8224	; 0x2020
   297b8:	str	r0, [r6, #4]
   297bc:	str	r0, [r6]
   297c0:	mov	r0, #256	; 0x100
   297c4:	str	r0, [r4, #16]
   297c8:	strh	r0, [sp, #20]
   297cc:	movw	r0, #19785	; 0x4d49
   297d0:	strh	r0, [sp, #22]
   297d4:	mov	r0, r7
   297d8:	bl	18ac <fwrite@plt>
   297dc:	mov	r0, r6
   297e0:	mov	r1, #1
   297e4:	mov	r2, #8
   297e8:	mov	r3, r5
   297ec:	bl	18ac <fwrite@plt>
   297f0:	add	r0, sp, #20
   297f4:	mov	r1, #2
   297f8:	mov	r2, #1
   297fc:	mov	r3, r5
   29800:	bl	18ac <fwrite@plt>
   29804:	add	r0, sp, #22
   29808:	mov	r1, #2
   2980c:	mov	r2, #1
   29810:	mov	r3, r5
   29814:	bl	18ac <fwrite@plt>
   29818:	mov	r0, r4
   2981c:	sub	sp, fp, #24
   29820:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29824:	.word	0x00036179
   29828:	.word	0x00036a47
   2982c:	.word	0x00036071
   29830:	.word	0x000360b5
   29834:	.word	0x000369e7
   29838:	.word	0xe320f000
   2983c:	.word	0xe320f000

00029840 <Mat_VarRead5>:
   29840:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29844:	add	fp, sp, #28
   29848:	sub	sp, sp, #44	; 0x2c
   2984c:	mov	r4, r0
   29850:	mov	r0, #1
   29854:	cmp	r1, #0
   29858:	str	r0, [fp, #-32]	; 0xffffffe0
   2985c:	beq	2a638 <Mat_VarRead5+0xdf8>
   29860:	ldr	r0, [r1, #4]
   29864:	mov	r5, r1
   29868:	cmp	r0, #0
   2986c:	beq	2a638 <Mat_VarRead5+0xdf8>
   29870:	mov	r9, r5
   29874:	ldr	r0, [r9, #52]!	; 0x34
   29878:	ldr	r1, [r0, #16]
   2987c:	cmp	r1, #0
   29880:	strne	r1, [r5, #40]	; 0x28
   29884:	movne	r1, #0
   29888:	strne	r1, [r0, #16]
   2988c:	subne	sp, fp, #28
   29890:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29894:	ldr	r0, [r4]
   29898:	bl	1840 <ftell@plt>
   2989c:	cmn	r0, #1
   298a0:	beq	298d0 <Mat_VarRead5+0x90>
   298a4:	mov	sl, r0
   298a8:	sub	r1, fp, #32
   298ac:	mov	r0, r5
   298b0:	bl	5a144 <SafeMulDims>
   298b4:	cmp	r0, #0
   298b8:	beq	298e4 <Mat_VarRead5+0xa4>
   298bc:	ldr	r0, [pc, #3976]	; 2a84c <Mat_VarRead5+0x100c>
   298c0:	add	r0, pc, r0
   298c4:	bl	19b4 <Mat_Critical@plt>
   298c8:	sub	sp, fp, #28
   298cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   298d0:	ldr	r0, [pc, #3960]	; 2a850 <Mat_VarRead5+0x1010>
   298d4:	add	r0, pc, r0
   298d8:	bl	19b4 <Mat_Critical@plt>
   298dc:	sub	sp, fp, #28
   298e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   298e4:	ldr	r1, [r5, #16]
   298e8:	cmp	r1, #16
   298ec:	bhi	29a44 <Mat_VarRead5+0x204>
   298f0:	ldr	r7, [r4, #20]
   298f4:	add	r0, pc, #4
   298f8:	ldr	r2, [r0, r1, lsl #2]
   298fc:	add	pc, r0, r2
   29900:	.word	0x00000044
   29904:	.word	0x00000084
   29908:	.word	0x000000cc
   2990c:	.word	0x00000144
   29910:	.word	0x00000150
   29914:	.word	0x000001f0
   29918:	.word	0x000002c0
   2991c:	.word	0x000002e0
   29920:	.word	0x00000300
   29924:	.word	0x00000334
   29928:	.word	0x00000354
   2992c:	.word	0x00000374
   29930:	.word	0x00000394
   29934:	.word	0x000003b4
   29938:	.word	0x000003d4
   2993c:	.word	0x00000410
   29940:	.word	0x000004ec
   29944:	add	r0, pc, #948	; 0x3b4
   29948:	mov	r6, r5
   2994c:	vld1.64	{d16-d17}, [r0 :128]
   29950:	mov	r0, #32
   29954:	vst1.32	{d16-d17}, [r6], r0
   29958:	mov	r0, #8
   2995c:	bl	18d0 <malloc@plt>
   29960:	mov	r1, #0
   29964:	str	r0, [r6]
   29968:	str	r1, [r0]
   2996c:	str	r1, [r0, #4]
   29970:	ldr	r0, [r5, #16]
   29974:	sub	r0, r0, #6
   29978:	cmp	r0, #9
   2997c:	bls	29d44 <Mat_VarRead5+0x504>
   29980:	b	2a628 <Mat_VarRead5+0xde8>
   29984:	ldr	r7, [r5, #40]	; 0x28
   29988:	cmp	r7, #0
   2998c:	beq	29f08 <Mat_VarRead5+0x6c8>
   29990:	ldr	r0, [fp, #-32]	; 0xffffffe0
   29994:	cmp	r0, #0
   29998:	beq	299c4 <Mat_VarRead5+0x184>
   2999c:	mov	r6, #0
   299a0:	ldr	r1, [r7, r6, lsl #2]
   299a4:	cmp	r1, #0
   299a8:	beq	299b8 <Mat_VarRead5+0x178>
   299ac:	mov	r0, r4
   299b0:	bl	29840 <Mat_VarRead5>
   299b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   299b8:	add	r6, r6, #1
   299bc:	cmp	r6, r0
   299c0:	bcc	299a0 <Mat_VarRead5+0x160>
   299c4:	mov	r0, #21
   299c8:	b	29e38 <Mat_VarRead5+0x5f8>
   299cc:	mov	r0, #22
   299d0:	str	r0, [r5, #8]
   299d4:	ldr	r0, [r5]
   299d8:	cmp	r0, #0
   299dc:	beq	29d34 <Mat_VarRead5+0x4f4>
   299e0:	ldr	r0, [r5, #12]
   299e4:	cmp	r0, #0
   299e8:	ldrne	r0, [r5, #40]	; 0x28
   299ec:	cmpne	r0, #0
   299f0:	beq	29d34 <Mat_VarRead5+0x4f4>
   299f4:	ldr	r0, [r5, #52]	; 0x34
   299f8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   299fc:	ldr	r2, [r0, #4]
   29a00:	add	r0, sp, #32
   29a04:	bl	5a1a4 <SafeMul>
   29a08:	ldr	r0, [sp, #32]
   29a0c:	cmp	r0, #0
   29a10:	beq	29d34 <Mat_VarRead5+0x4f4>
   29a14:	ldr	r7, [r5, #40]	; 0x28
   29a18:	mov	r6, #0
   29a1c:	ldr	r1, [r7, r6, lsl #2]
   29a20:	cmp	r1, #0
   29a24:	beq	29a34 <Mat_VarRead5+0x1f4>
   29a28:	mov	r0, r4
   29a2c:	bl	29840 <Mat_VarRead5>
   29a30:	ldr	r0, [sp, #32]
   29a34:	add	r6, r6, #1
   29a38:	cmp	r6, r0
   29a3c:	bcc	29a1c <Mat_VarRead5+0x1dc>
   29a40:	b	29d34 <Mat_VarRead5+0x4f4>
   29a44:	ldr	r0, [pc, #4088]	; 2aa44 <Mat_VarRead5+0x1204>
   29a48:	add	r0, pc, r0
   29a4c:	b	29f14 <Mat_VarRead5+0x6d4>
   29a50:	ldr	r1, [r5, #52]	; 0x34
   29a54:	ldr	r0, [r4]
   29a58:	mov	r2, #0
   29a5c:	mov	r6, #0
   29a60:	ldr	r1, [r1]
   29a64:	bl	1a2c <fseek@plt>
   29a68:	ldr	r0, [r5, #48]	; 0x30
   29a6c:	cmp	r0, #1
   29a70:	bne	29e50 <Mat_VarRead5+0x610>
   29a74:	ldr	r0, [r9]
   29a78:	add	r8, sp, #32
   29a7c:	mov	r2, r8
   29a80:	ldr	r1, [r0, #12]
   29a84:	mov	r0, r4
   29a88:	str	r6, [r1, #4]
   29a8c:	bl	31bc <InflateDataType>
   29a90:	mov	r6, r7
   29a94:	cmp	r7, #0
   29a98:	beq	29aa4 <Mat_VarRead5+0x264>
   29a9c:	add	r0, sp, #32
   29aa0:	bl	1c04 <Mat_uint32Swap>
   29aa4:	ldr	r0, [sp, #32]
   29aa8:	uxtb	r7, r0
   29aac:	cmp	r7, #25
   29ab0:	movcs	r7, #0
   29ab4:	cmp	r0, #65536	; 0x10000
   29ab8:	bcs	2a0d8 <Mat_VarRead5+0x898>
   29abc:	ldr	r0, [r9]
   29ac0:	add	r8, r8, #4
   29ac4:	mov	r2, r8
   29ac8:	ldr	r1, [r0, #12]
   29acc:	mov	r0, r4
   29ad0:	bl	31bc <InflateDataType>
   29ad4:	cmp	r6, #0
   29ad8:	beq	29ae4 <Mat_VarRead5+0x2a4>
   29adc:	mov	r0, r8
   29ae0:	bl	1c04 <Mat_uint32Swap>
   29ae4:	ldr	r6, [sp, #36]	; 0x24
   29ae8:	mov	r0, #0
   29aec:	b	2a0e0 <Mat_VarRead5+0x8a0>
   29af0:	mov	r0, #0
   29af4:	str	r7, [sp, #20]
   29af8:	str	r0, [sp, #28]
   29afc:	mov	r0, #28
   29b00:	str	r0, [r5, #12]
   29b04:	mov	r0, #28
   29b08:	bl	18d0 <malloc@plt>
   29b0c:	cmp	r0, #0
   29b10:	str	r0, [r5, #40]	; 0x28
   29b14:	beq	29f2c <Mat_VarRead5+0x6ec>
   29b18:	mov	r7, r0
   29b1c:	ldr	r0, [r5]
   29b20:	mov	r2, #0
   29b24:	mov	r6, #0
   29b28:	str	r0, [r7]
   29b2c:	ldr	r1, [r5, #52]	; 0x34
   29b30:	ldr	r0, [r4]
   29b34:	ldr	r1, [r1]
   29b38:	bl	1a2c <fseek@plt>
   29b3c:	ldr	r0, [r5, #48]	; 0x30
   29b40:	str	r7, [sp, #24]
   29b44:	cmp	r0, #1
   29b48:	bne	29f38 <Mat_VarRead5+0x6f8>
   29b4c:	ldr	r0, [r9]
   29b50:	add	r2, sp, #32
   29b54:	ldr	r1, [r0, #12]
   29b58:	mov	r0, r4
   29b5c:	str	r6, [r1, #4]
   29b60:	bl	31bc <InflateDataType>
   29b64:	ldr	r0, [r4, #20]
   29b68:	cmp	r0, #0
   29b6c:	beq	29b78 <Mat_VarRead5+0x338>
   29b70:	add	r0, sp, #32
   29b74:	bl	1c04 <Mat_uint32Swap>
   29b78:	ldr	r0, [sp, #32]
   29b7c:	mov	r1, #0
   29b80:	uxtb	r6, r0
   29b84:	cmp	r6, #25
   29b88:	movcs	r6, r1
   29b8c:	cmp	r0, #65536	; 0x10000
   29b90:	bcs	29fb0 <Mat_VarRead5+0x770>
   29b94:	mov	r0, #0
   29b98:	add	r2, sp, #28
   29b9c:	mov	r3, #5
   29ba0:	str	r0, [sp, #16]
   29ba4:	ldr	r0, [r9]
   29ba8:	ldr	r1, [r0, #12]
   29bac:	mov	r0, #1
   29bb0:	str	r0, [sp]
   29bb4:	mov	r0, r4
   29bb8:	bl	10624 <ReadCompressedInt32Data>
   29bbc:	b	29fc0 <Mat_VarRead5+0x780>
   29bc0:	ldr	r1, [r5, #52]	; 0x34
   29bc4:	ldr	r0, [r4]
   29bc8:	mov	r2, #0
   29bcc:	ldr	r1, [r1]
   29bd0:	bl	1a2c <fseek@plt>
   29bd4:	mov	r0, #8
   29bd8:	mov	r1, #9
   29bdc:	b	29d2c <Mat_VarRead5+0x4ec>
   29be0:	ldr	r1, [r5, #52]	; 0x34
   29be4:	ldr	r0, [r4]
   29be8:	mov	r2, #0
   29bec:	ldr	r1, [r1]
   29bf0:	bl	1a2c <fseek@plt>
   29bf4:	mov	r0, #4
   29bf8:	mov	r1, #7
   29bfc:	b	29d2c <Mat_VarRead5+0x4ec>
   29c00:	ldr	r1, [r5, #52]	; 0x34
   29c04:	ldr	r0, [r4]
   29c08:	mov	r2, #0
   29c0c:	ldr	r1, [r1]
   29c10:	bl	1a2c <fseek@plt>
   29c14:	mov	r0, #1
   29c18:	str	r0, [r5, #8]
   29c1c:	str	r0, [r5, #12]
   29c20:	ldr	r0, [r5, #16]
   29c24:	sub	r0, r0, #6
   29c28:	cmp	r0, #9
   29c2c:	bls	29d44 <Mat_VarRead5+0x504>
   29c30:	b	2a628 <Mat_VarRead5+0xde8>
   29c34:	ldr	r1, [r5, #52]	; 0x34
   29c38:	ldr	r0, [r4]
   29c3c:	mov	r2, #0
   29c40:	ldr	r1, [r1]
   29c44:	bl	1a2c <fseek@plt>
   29c48:	mov	r0, #1
   29c4c:	mov	r1, #2
   29c50:	b	29d2c <Mat_VarRead5+0x4ec>
   29c54:	ldr	r1, [r5, #52]	; 0x34
   29c58:	ldr	r0, [r4]
   29c5c:	mov	r2, #0
   29c60:	ldr	r1, [r1]
   29c64:	bl	1a2c <fseek@plt>
   29c68:	mov	r0, #2
   29c6c:	mov	r1, #3
   29c70:	b	29d2c <Mat_VarRead5+0x4ec>
   29c74:	ldr	r1, [r5, #52]	; 0x34
   29c78:	ldr	r0, [r4]
   29c7c:	mov	r2, #0
   29c80:	ldr	r1, [r1]
   29c84:	bl	1a2c <fseek@plt>
   29c88:	mov	r0, #2
   29c8c:	mov	r1, #4
   29c90:	b	29d2c <Mat_VarRead5+0x4ec>
   29c94:	ldr	r1, [r5, #52]	; 0x34
   29c98:	ldr	r0, [r4]
   29c9c:	mov	r2, #0
   29ca0:	ldr	r1, [r1]
   29ca4:	bl	1a2c <fseek@plt>
   29ca8:	mov	r0, #4
   29cac:	mov	r1, #5
   29cb0:	b	29d2c <Mat_VarRead5+0x4ec>
   29cb4:	ldr	r1, [r5, #52]	; 0x34
   29cb8:	ldr	r0, [r4]
   29cbc:	mov	r2, #0
   29cc0:	ldr	r1, [r1]
   29cc4:	bl	1a2c <fseek@plt>
   29cc8:	mov	r0, #4
   29ccc:	mov	r1, #6
   29cd0:	b	29d2c <Mat_VarRead5+0x4ec>
   29cd4:	ldr	r1, [r5, #52]	; 0x34
   29cd8:	ldr	r0, [r4]
   29cdc:	mov	r2, #0
   29ce0:	ldr	r1, [r1]
   29ce4:	bl	1a2c <fseek@plt>
   29ce8:	mov	r0, #8
   29cec:	mov	r1, #12
   29cf0:	b	29d2c <Mat_VarRead5+0x4ec>
   29cf4:	nop	{0}
   29cf8:	nop	{0}
   29cfc:	nop	{0}
   29d00:	.word	0x00000000
   29d04:	.word	0x00000002
   29d08:	.word	0x00000009
   29d0c:	.word	0x00000008
   29d10:	ldr	r1, [r5, #52]	; 0x34
   29d14:	ldr	r0, [r4]
   29d18:	mov	r2, #0
   29d1c:	ldr	r1, [r1]
   29d20:	bl	1a2c <fseek@plt>
   29d24:	mov	r0, #8
   29d28:	mov	r1, #13
   29d2c:	str	r1, [r5, #8]
   29d30:	str	r0, [r5, #12]
   29d34:	ldr	r0, [r5, #16]
   29d38:	sub	r0, r0, #6
   29d3c:	cmp	r0, #9
   29d40:	bhi	2a628 <Mat_VarRead5+0xde8>
   29d44:	ldr	r2, [r5, #12]
   29d48:	ldr	r1, [fp, #-32]	; 0xffffffe0
   29d4c:	ldr	r6, [r5, #20]
   29d50:	mov	r0, r5
   29d54:	bl	5a1a4 <SafeMul>
   29d58:	ldr	r0, [r5]
   29d5c:	cmp	r6, #0
   29d60:	beq	29da4 <Mat_VarRead5+0x564>
   29d64:	bl	5a0b4 <ComplexMalloc>
   29d68:	cmp	r0, #0
   29d6c:	beq	29dcc <Mat_VarRead5+0x58c>
   29d70:	ldr	r2, [r0]
   29d74:	ldr	r3, [fp, #-32]	; 0xffffffe0
   29d78:	mov	r7, r0
   29d7c:	mov	r0, r4
   29d80:	mov	r1, r5
   29d84:	bl	2b1e0 <Mat_VarReadNumeric5>
   29d88:	ldr	r2, [r7, #4]
   29d8c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   29d90:	mov	r0, r4
   29d94:	mov	r1, r5
   29d98:	bl	2b1e0 <Mat_VarReadNumeric5>
   29d9c:	str	r7, [r5, #40]	; 0x28
   29da0:	b	2a628 <Mat_VarRead5+0xde8>
   29da4:	bl	18d0 <malloc@plt>
   29da8:	cmp	r0, #0
   29dac:	str	r0, [r5, #40]	; 0x28
   29db0:	beq	29ddc <Mat_VarRead5+0x59c>
   29db4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   29db8:	mov	r2, r0
   29dbc:	mov	r0, r4
   29dc0:	mov	r1, r5
   29dc4:	bl	2b1e0 <Mat_VarReadNumeric5>
   29dc8:	b	2a628 <Mat_VarRead5+0xde8>
   29dcc:	ldr	r0, [pc, #4088]	; 2adcc <Mat_VarRead5+0x158c>
   29dd0:	add	r0, pc, r0
   29dd4:	bl	19b4 <Mat_Critical@plt>
   29dd8:	b	2a628 <Mat_VarRead5+0xde8>
   29ddc:	ldr	r0, [pc, #4076]	; 2add0 <Mat_VarRead5+0x1590>
   29de0:	add	r0, pc, r0
   29de4:	bl	19b4 <Mat_Critical@plt>
   29de8:	b	2a628 <Mat_VarRead5+0xde8>
   29dec:	ldr	r0, [r5]
   29df0:	cmp	r0, #0
   29df4:	ldrne	r1, [r5, #12]
   29df8:	cmpne	r1, #0
   29dfc:	beq	29d34 <Mat_VarRead5+0x4f4>
   29e00:	ldr	r8, [r5, #40]	; 0x28
   29e04:	cmp	r8, #0
   29e08:	beq	29e34 <Mat_VarRead5+0x5f4>
   29e0c:	cmp	r1, r0
   29e10:	bhi	29e34 <Mat_VarRead5+0x5f4>
   29e14:	udiv	r7, r0, r1
   29e18:	mov	r6, #0
   29e1c:	ldr	r1, [r8, r6, lsl #2]
   29e20:	mov	r0, r4
   29e24:	bl	29840 <Mat_VarRead5>
   29e28:	add	r6, r6, #1
   29e2c:	cmp	r6, r7
   29e30:	bcc	29e1c <Mat_VarRead5+0x5dc>
   29e34:	mov	r0, #24
   29e38:	str	r0, [r5, #8]
   29e3c:	ldr	r0, [r5, #16]
   29e40:	sub	r0, r0, #6
   29e44:	cmp	r0, #9
   29e48:	bls	29d44 <Mat_VarRead5+0x504>
   29e4c:	b	2a628 <Mat_VarRead5+0xde8>
   29e50:	ldr	r3, [r4]
   29e54:	mov	r0, #1
   29e58:	add	r8, sp, #32
   29e5c:	mov	r1, #4
   29e60:	mov	r2, #1
   29e64:	str	r0, [sp, #24]
   29e68:	mov	r0, r8
   29e6c:	bl	18b8 <fread@plt>
   29e70:	mov	r6, r7
   29e74:	cmp	r7, #0
   29e78:	beq	29e84 <Mat_VarRead5+0x644>
   29e7c:	add	r0, sp, #32
   29e80:	bl	1c04 <Mat_uint32Swap>
   29e84:	ldr	r0, [sp, #32]
   29e88:	mov	r1, #0
   29e8c:	uxtb	r7, r0
   29e90:	cmp	r7, #25
   29e94:	movcs	r7, r1
   29e98:	cmp	r1, r0, lsr #16
   29e9c:	bne	29ed0 <Mat_VarRead5+0x690>
   29ea0:	ldr	r3, [r4]
   29ea4:	add	r8, r8, #4
   29ea8:	mov	r1, #4
   29eac:	mov	r2, #1
   29eb0:	mov	r0, r8
   29eb4:	bl	18b8 <fread@plt>
   29eb8:	cmp	r6, #0
   29ebc:	beq	29ec8 <Mat_VarRead5+0x688>
   29ec0:	mov	r0, r8
   29ec4:	bl	1c04 <Mat_uint32Swap>
   29ec8:	mov	r0, #0
   29ecc:	str	r0, [sp, #24]
   29ed0:	mov	r0, #2
   29ed4:	str	r0, [r5, #8]
   29ed8:	mov	r0, #2
   29edc:	bl	1924 <Mat_SizeOf@plt>
   29ee0:	str	r0, [r5, #12]
   29ee4:	mov	r2, r0
   29ee8:	mov	r0, r5
   29eec:	ldr	r1, [fp, #-32]	; 0xffffffe0
   29ef0:	bl	5a1a4 <SafeMul>
   29ef4:	cmp	r0, #0
   29ef8:	beq	2a0f8 <Mat_VarRead5+0x8b8>
   29efc:	ldr	r0, [pc, #4032]	; 2aec4 <Mat_VarRead5+0x1684>
   29f00:	add	r0, pc, r0
   29f04:	b	2a614 <Mat_VarRead5+0xdd4>
   29f08:	ldr	r1, [r5, #36]	; 0x24
   29f0c:	ldr	r0, [pc, #4020]	; 2aec8 <Mat_VarRead5+0x1688>
   29f10:	add	r0, pc, r0
   29f14:	bl	19b4 <Mat_Critical@plt>
   29f18:	ldr	r0, [r5, #16]
   29f1c:	sub	r0, r0, #6
   29f20:	cmp	r0, #9
   29f24:	bls	29d44 <Mat_VarRead5+0x504>
   29f28:	b	2a628 <Mat_VarRead5+0xde8>
   29f2c:	ldr	r0, [pc, #3992]	; 2aecc <Mat_VarRead5+0x168c>
   29f30:	add	r0, pc, r0
   29f34:	b	2a614 <Mat_VarRead5+0xdd4>
   29f38:	ldr	r3, [r4]
   29f3c:	add	r0, sp, #32
   29f40:	mov	r1, #4
   29f44:	mov	r2, #1
   29f48:	bl	18b8 <fread@plt>
   29f4c:	ldr	r0, [r4, #20]
   29f50:	cmp	r0, #0
   29f54:	beq	29f60 <Mat_VarRead5+0x720>
   29f58:	add	r0, sp, #32
   29f5c:	bl	1c04 <Mat_uint32Swap>
   29f60:	ldr	r0, [sp, #32]
   29f64:	mov	r1, #0
   29f68:	uxtb	r6, r0
   29f6c:	cmp	r6, #25
   29f70:	movcs	r6, r1
   29f74:	cmp	r0, #65536	; 0x10000
   29f78:	bcs	29fb0 <Mat_VarRead5+0x770>
   29f7c:	ldr	r3, [r4]
   29f80:	mov	r0, #0
   29f84:	mov	r1, #4
   29f88:	mov	r2, #1
   29f8c:	str	r0, [sp, #16]
   29f90:	add	r0, sp, #28
   29f94:	bl	18b8 <fread@plt>
   29f98:	ldr	r0, [r4, #20]
   29f9c:	cmp	r0, #0
   29fa0:	beq	29fc0 <Mat_VarRead5+0x780>
   29fa4:	add	r0, sp, #28
   29fa8:	bl	1bf0 <Mat_int32Swap>
   29fac:	b	29fc0 <Mat_VarRead5+0x780>
   29fb0:	lsr	r0, r0, #16
   29fb4:	str	r0, [sp, #28]
   29fb8:	mov	r0, #1
   29fbc:	str	r0, [sp, #16]
   29fc0:	ldr	r0, [sp, #28]
   29fc4:	ldr	r8, [sp, #24]
   29fc8:	asr	r1, r0, #31
   29fcc:	add	r0, r0, r1, lsr #30
   29fd0:	asr	r7, r0, #2
   29fd4:	bic	r0, r0, #3
   29fd8:	str	r7, [r8, #8]
   29fdc:	bl	18d0 <malloc@plt>
   29fe0:	cmp	r0, #0
   29fe4:	str	r0, [r8, #4]
   29fe8:	beq	2a19c <Mat_VarRead5+0x95c>
   29fec:	mov	r2, r0
   29ff0:	ldr	r0, [r5, #48]	; 0x30
   29ff4:	cmp	r0, #1
   29ff8:	beq	2a1a8 <Mat_VarRead5+0x968>
   29ffc:	mov	r1, #0
   2a000:	cmp	r0, #0
   2a004:	str	r1, [sp, #12]
   2a008:	bne	2a060 <Mat_VarRead5+0x820>
   2a00c:	mov	r1, r2
   2a010:	mov	r0, r4
   2a014:	mov	r2, r6
   2a018:	mov	r3, r7
   2a01c:	bl	da88 <ReadInt32Data>
   2a020:	ldr	r1, [sp, #16]
   2a024:	cmp	r1, #0
   2a028:	addne	r0, r0, #4
   2a02c:	asr	r1, r0, #31
   2a030:	str	r0, [sp, #12]
   2a034:	add	r1, r0, r1, lsr #29
   2a038:	bic	r1, r1, #7
   2a03c:	subs	r1, r0, r1
   2a040:	beq	2a1f8 <Mat_VarRead5+0x9b8>
   2a044:	ldr	r0, [r4]
   2a048:	rsb	r1, r1, #8
   2a04c:	mov	r2, #1
   2a050:	bl	1a2c <fseek@plt>
   2a054:	ldr	r0, [r5, #48]	; 0x30
   2a058:	cmp	r0, #1
   2a05c:	beq	2a204 <Mat_VarRead5+0x9c4>
   2a060:	ldr	r3, [r4]
   2a064:	add	r0, sp, #32
   2a068:	mov	r1, #4
   2a06c:	mov	r2, #1
   2a070:	bl	18b8 <fread@plt>
   2a074:	ldr	r0, [r4, #20]
   2a078:	cmp	r0, #0
   2a07c:	beq	2a088 <Mat_VarRead5+0x848>
   2a080:	add	r0, sp, #32
   2a084:	bl	1c04 <Mat_uint32Swap>
   2a088:	ldr	r0, [sp, #32]
   2a08c:	mov	r1, #0
   2a090:	uxtb	r6, r0
   2a094:	cmp	r6, #25
   2a098:	movcs	r6, r1
   2a09c:	cmp	r0, #65536	; 0x10000
   2a0a0:	bcs	2a274 <Mat_VarRead5+0xa34>
   2a0a4:	ldr	r3, [r4]
   2a0a8:	add	r0, sp, #28
   2a0ac:	mov	r1, #4
   2a0b0:	mov	r2, #1
   2a0b4:	bl	18b8 <fread@plt>
   2a0b8:	ldr	r0, [r4, #20]
   2a0bc:	cmp	r0, #0
   2a0c0:	beq	2a26c <Mat_VarRead5+0xa2c>
   2a0c4:	mov	r0, #0
   2a0c8:	str	r0, [sp, #16]
   2a0cc:	add	r0, sp, #28
   2a0d0:	bl	1bf0 <Mat_int32Swap>
   2a0d4:	b	2a284 <Mat_VarRead5+0xa44>
   2a0d8:	lsr	r6, r0, #16
   2a0dc:	mov	r0, #1
   2a0e0:	str	r0, [sp, #24]
   2a0e4:	mov	r0, r7
   2a0e8:	str	r7, [r5, #8]
   2a0ec:	bl	1924 <Mat_SizeOf@plt>
   2a0f0:	str	r0, [r5, #12]
   2a0f4:	str	r6, [r5]
   2a0f8:	ldr	r0, [r5, #20]
   2a0fc:	cmp	r0, #0
   2a100:	bne	29d34 <Mat_VarRead5+0x4f4>
   2a104:	ldr	r6, [r5]
   2a108:	mov	r1, #1
   2a10c:	add	r0, r6, #1
   2a110:	bl	1798 <calloc@plt>
   2a114:	cmp	r0, #0
   2a118:	str	r0, [r5, #40]	; 0x28
   2a11c:	beq	2a398 <Mat_VarRead5+0xb58>
   2a120:	cmp	r6, #0
   2a124:	beq	29d34 <Mat_VarRead5+0x4f4>
   2a128:	ldr	r2, [r5, #12]
   2a12c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2a130:	add	r0, sp, #28
   2a134:	bl	5a1a4 <SafeMul>
   2a138:	cmp	r0, #0
   2a13c:	bne	29d34 <Mat_VarRead5+0x4f4>
   2a140:	ldr	r0, [r5]
   2a144:	ldr	r1, [sp, #28]
   2a148:	cmp	r1, r0
   2a14c:	bhi	29d34 <Mat_VarRead5+0x4f4>
   2a150:	ldr	r0, [r5, #48]	; 0x30
   2a154:	cmp	r0, #1
   2a158:	beq	2a728 <Mat_VarRead5+0xee8>
   2a15c:	cmp	r0, #0
   2a160:	bne	29d34 <Mat_VarRead5+0x4f4>
   2a164:	ldr	r1, [r5, #40]	; 0x28
   2a168:	ldr	r3, [fp, #-32]	; 0xffffffe0
   2a16c:	mov	r0, r4
   2a170:	mov	r2, r7
   2a174:	bl	1d948 <ReadCharData>
   2a178:	ldr	r1, [sp, #24]
   2a17c:	cmp	r1, #0
   2a180:	addne	r0, r0, #4
   2a184:	asr	r1, r0, #31
   2a188:	add	r1, r0, r1, lsr #29
   2a18c:	bic	r1, r1, #7
   2a190:	subs	r1, r0, r1
   2a194:	bne	2b03c <Mat_VarRead5+0x17fc>
   2a198:	b	29d34 <Mat_VarRead5+0x4f4>
   2a19c:	ldr	r0, [pc, #4028]	; 2b160 <Mat_VarRead5+0x1920>
   2a1a0:	add	r0, pc, r0
   2a1a4:	b	2a614 <Mat_VarRead5+0xdd4>
   2a1a8:	ldr	r0, [r9]
   2a1ac:	mov	r3, r6
   2a1b0:	ldr	r1, [r0, #12]
   2a1b4:	mov	r0, r4
   2a1b8:	str	r7, [sp]
   2a1bc:	bl	10624 <ReadCompressedInt32Data>
   2a1c0:	ldr	r1, [sp, #16]
   2a1c4:	cmp	r1, #0
   2a1c8:	addne	r0, r0, #4
   2a1cc:	asr	r1, r0, #31
   2a1d0:	str	r0, [sp, #12]
   2a1d4:	add	r1, r0, r1, lsr #29
   2a1d8:	bic	r1, r1, #7
   2a1dc:	subs	r0, r0, r1
   2a1e0:	beq	2a1f8 <Mat_VarRead5+0x9b8>
   2a1e4:	ldr	r1, [r9]
   2a1e8:	rsb	r2, r0, #8
   2a1ec:	mov	r0, r4
   2a1f0:	ldr	r1, [r1, #12]
   2a1f4:	bl	23b4 <InflateSkip>
   2a1f8:	ldr	r0, [r5, #48]	; 0x30
   2a1fc:	cmp	r0, #1
   2a200:	bne	2a060 <Mat_VarRead5+0x820>
   2a204:	ldr	r0, [r9]
   2a208:	mov	r6, #0
   2a20c:	add	r2, sp, #32
   2a210:	ldr	r1, [r0, #12]
   2a214:	mov	r0, r4
   2a218:	str	r6, [r1, #4]
   2a21c:	bl	31bc <InflateDataType>
   2a220:	ldr	r0, [r4, #20]
   2a224:	cmp	r0, #0
   2a228:	beq	2a234 <Mat_VarRead5+0x9f4>
   2a22c:	add	r0, sp, #32
   2a230:	bl	1c04 <Mat_uint32Swap>
   2a234:	ldr	r0, [sp, #32]
   2a238:	uxtb	r1, r0
   2a23c:	cmp	r1, #25
   2a240:	movcc	r6, r1
   2a244:	cmp	r0, #65536	; 0x10000
   2a248:	bcs	2a274 <Mat_VarRead5+0xa34>
   2a24c:	ldr	r0, [r9]
   2a250:	add	r2, sp, #28
   2a254:	mov	r3, #5
   2a258:	ldr	r1, [r0, #12]
   2a25c:	mov	r0, #1
   2a260:	str	r0, [sp]
   2a264:	mov	r0, r4
   2a268:	bl	10624 <ReadCompressedInt32Data>
   2a26c:	mov	r0, #0
   2a270:	b	2a280 <Mat_VarRead5+0xa40>
   2a274:	lsr	r0, r0, #16
   2a278:	str	r0, [sp, #28]
   2a27c:	mov	r0, #1
   2a280:	str	r0, [sp, #16]
   2a284:	ldr	r0, [sp, #28]
   2a288:	ldr	r8, [sp, #24]
   2a28c:	asr	r1, r0, #31
   2a290:	add	r0, r0, r1, lsr #30
   2a294:	asr	r7, r0, #2
   2a298:	bic	r0, r0, #3
   2a29c:	str	r7, [r8, #16]
   2a2a0:	bl	18d0 <malloc@plt>
   2a2a4:	cmp	r0, #0
   2a2a8:	str	r0, [r8, #12]
   2a2ac:	beq	2a38c <Mat_VarRead5+0xb4c>
   2a2b0:	mov	r2, r0
   2a2b4:	ldr	r0, [r5, #48]	; 0x30
   2a2b8:	cmp	r0, #1
   2a2bc:	beq	2a3a4 <Mat_VarRead5+0xb64>
   2a2c0:	cmp	r0, #0
   2a2c4:	bne	2a31c <Mat_VarRead5+0xadc>
   2a2c8:	mov	r1, r2
   2a2cc:	mov	r0, r4
   2a2d0:	mov	r2, r6
   2a2d4:	mov	r3, r7
   2a2d8:	bl	da88 <ReadInt32Data>
   2a2dc:	ldr	r1, [sp, #16]
   2a2e0:	cmp	r1, #0
   2a2e4:	addne	r0, r0, #4
   2a2e8:	asr	r1, r0, #31
   2a2ec:	str	r0, [sp, #12]
   2a2f0:	add	r1, r0, r1, lsr #29
   2a2f4:	bic	r1, r1, #7
   2a2f8:	subs	r1, r0, r1
   2a2fc:	beq	2a3f4 <Mat_VarRead5+0xbb4>
   2a300:	ldr	r0, [r4]
   2a304:	rsb	r1, r1, #8
   2a308:	mov	r2, #1
   2a30c:	bl	1a2c <fseek@plt>
   2a310:	ldr	r0, [r5, #48]	; 0x30
   2a314:	cmp	r0, #1
   2a318:	beq	2a400 <Mat_VarRead5+0xbc0>
   2a31c:	ldr	r3, [r4]
   2a320:	add	r0, sp, #32
   2a324:	mov	r1, #4
   2a328:	mov	r2, #1
   2a32c:	bl	18b8 <fread@plt>
   2a330:	ldr	r0, [r4, #20]
   2a334:	cmp	r0, #0
   2a338:	beq	2a344 <Mat_VarRead5+0xb04>
   2a33c:	add	r0, sp, #32
   2a340:	bl	1c04 <Mat_uint32Swap>
   2a344:	ldr	r0, [sp, #32]
   2a348:	mov	r8, #0
   2a34c:	uxtb	r6, r0
   2a350:	cmp	r6, #25
   2a354:	movcs	r6, r8
   2a358:	cmp	r0, #65536	; 0x10000
   2a35c:	bcs	2a470 <Mat_VarRead5+0xc30>
   2a360:	ldr	r3, [r4]
   2a364:	add	r0, sp, #28
   2a368:	mov	r1, #4
   2a36c:	mov	r2, #1
   2a370:	bl	18b8 <fread@plt>
   2a374:	ldr	r0, [r4, #20]
   2a378:	cmp	r0, #0
   2a37c:	beq	2a47c <Mat_VarRead5+0xc3c>
   2a380:	add	r0, sp, #28
   2a384:	bl	1bf0 <Mat_int32Swap>
   2a388:	b	2a47c <Mat_VarRead5+0xc3c>
   2a38c:	ldr	r0, [pc, #3656]	; 2b1dc <Mat_VarRead5+0x199c>
   2a390:	add	r0, pc, r0
   2a394:	b	2a614 <Mat_VarRead5+0xdd4>
   2a398:	ldr	r0, [pc, #3632]	; 2b1d0 <Mat_VarRead5+0x1990>
   2a39c:	add	r0, pc, r0
   2a3a0:	b	2a614 <Mat_VarRead5+0xdd4>
   2a3a4:	ldr	r0, [r9]
   2a3a8:	mov	r3, r6
   2a3ac:	ldr	r1, [r0, #12]
   2a3b0:	mov	r0, r4
   2a3b4:	str	r7, [sp]
   2a3b8:	bl	10624 <ReadCompressedInt32Data>
   2a3bc:	ldr	r1, [sp, #16]
   2a3c0:	cmp	r1, #0
   2a3c4:	addne	r0, r0, #4
   2a3c8:	asr	r1, r0, #31
   2a3cc:	str	r0, [sp, #12]
   2a3d0:	add	r1, r0, r1, lsr #29
   2a3d4:	bic	r1, r1, #7
   2a3d8:	subs	r0, r0, r1
   2a3dc:	beq	2a3f4 <Mat_VarRead5+0xbb4>
   2a3e0:	ldr	r1, [r9]
   2a3e4:	rsb	r2, r0, #8
   2a3e8:	mov	r0, r4
   2a3ec:	ldr	r1, [r1, #12]
   2a3f0:	bl	23b4 <InflateSkip>
   2a3f4:	ldr	r0, [r5, #48]	; 0x30
   2a3f8:	cmp	r0, #1
   2a3fc:	bne	2a31c <Mat_VarRead5+0xadc>
   2a400:	ldr	r0, [r9]
   2a404:	mov	r6, #0
   2a408:	add	r2, sp, #32
   2a40c:	ldr	r1, [r0, #12]
   2a410:	mov	r0, r4
   2a414:	str	r6, [r1, #4]
   2a418:	bl	31bc <InflateDataType>
   2a41c:	ldr	r0, [r4, #20]
   2a420:	cmp	r0, #0
   2a424:	beq	2a430 <Mat_VarRead5+0xbf0>
   2a428:	add	r0, sp, #32
   2a42c:	bl	1c04 <Mat_uint32Swap>
   2a430:	ldr	r0, [sp, #32]
   2a434:	uxtb	r1, r0
   2a438:	cmp	r1, #25
   2a43c:	movcc	r6, r1
   2a440:	cmp	r0, #65536	; 0x10000
   2a444:	bcs	2a470 <Mat_VarRead5+0xc30>
   2a448:	ldr	r0, [r9]
   2a44c:	add	r2, sp, #28
   2a450:	mov	r3, #5
   2a454:	ldr	r1, [r0, #12]
   2a458:	mov	r0, #1
   2a45c:	str	r0, [sp]
   2a460:	mov	r0, r4
   2a464:	bl	10624 <ReadCompressedInt32Data>
   2a468:	mov	r8, #0
   2a46c:	b	2a47c <Mat_VarRead5+0xc3c>
   2a470:	lsr	r0, r0, #16
   2a474:	mov	r8, #1
   2a478:	str	r0, [sp, #28]
   2a47c:	ldr	r0, [r5, #28]
   2a480:	mov	r7, r6
   2a484:	cmp	r0, #0
   2a488:	movwne	r7, #2
   2a48c:	cmp	r6, #9
   2a490:	movne	r7, r6
   2a494:	mov	r0, r7
   2a498:	str	r7, [r5, #8]
   2a49c:	bl	1924 <Mat_SizeOf@plt>
   2a4a0:	cmp	r0, #0
   2a4a4:	beq	29d34 <Mat_VarRead5+0x4f4>
   2a4a8:	ldr	r1, [sp, #28]
   2a4ac:	ldr	r6, [sp, #24]
   2a4b0:	str	r7, [sp, #8]
   2a4b4:	str	r8, [sp, #16]
   2a4b8:	udiv	r7, r1, r0
   2a4bc:	str	r7, [r6, #20]!
   2a4c0:	ldr	r0, [r5, #8]
   2a4c4:	ldr	r8, [r5, #20]
   2a4c8:	bl	1924 <Mat_SizeOf@plt>
   2a4cc:	mul	r0, r0, r7
   2a4d0:	cmp	r8, #0
   2a4d4:	beq	2a56c <Mat_VarRead5+0xd2c>
   2a4d8:	bl	5a0b4 <ComplexMalloc>
   2a4dc:	cmp	r0, #0
   2a4e0:	beq	2a600 <Mat_VarRead5+0xdc0>
   2a4e4:	mov	r8, r0
   2a4e8:	ldr	r0, [r5, #48]	; 0x30
   2a4ec:	str	r6, [sp, #4]
   2a4f0:	cmp	r0, #1
   2a4f4:	beq	2a640 <Mat_VarRead5+0xe00>
   2a4f8:	cmp	r0, #0
   2a4fc:	bne	2af24 <Mat_VarRead5+0x16e4>
   2a500:	ldr	r0, [r5, #8]
   2a504:	sub	r0, r0, #1
   2a508:	cmp	r0, #12
   2a50c:	bhi	2a870 <Mat_VarRead5+0x1030>
   2a510:	add	r1, pc, #4
   2a514:	ldr	r0, [r1, r0, lsl #2]
   2a518:	add	pc, r1, r0
   2a51c:	.word	0x00000034
   2a520:	.word	0x00000250
   2a524:	.word	0x0000026c
   2a528:	.word	0x00000288
   2a52c:	.word	0x000002a4
   2a530:	.word	0x000002c0
   2a534:	.word	0x000002dc
   2a538:	.word	0x00000354
   2a53c:	.word	0x000002f8
   2a540:	.word	0x00000354
   2a544:	.word	0x00000354
   2a548:	.word	0x00000314
   2a54c:	.word	0x00000338
   2a550:	ldr	r0, [sp, #4]
   2a554:	ldr	r1, [r8]
   2a558:	ldr	r2, [sp, #8]
   2a55c:	ldr	r3, [r0]
   2a560:	mov	r0, r4
   2a564:	bl	18bb8 <ReadInt8Data>
   2a568:	b	2a86c <Mat_VarRead5+0x102c>
   2a56c:	bl	18d0 <malloc@plt>
   2a570:	mov	r2, r0
   2a574:	ldr	r0, [sp, #24]
   2a578:	cmp	r2, #0
   2a57c:	str	r2, [r0, #24]
   2a580:	beq	2a60c <Mat_VarRead5+0xdcc>
   2a584:	ldr	r0, [r5, #48]	; 0x30
   2a588:	cmp	r0, #1
   2a58c:	beq	2a6b8 <Mat_VarRead5+0xe78>
   2a590:	cmp	r0, #0
   2a594:	bne	29d34 <Mat_VarRead5+0x4f4>
   2a598:	ldr	r0, [r5, #8]
   2a59c:	sub	r0, r0, #1
   2a5a0:	cmp	r0, #12
   2a5a4:	bhi	2b018 <Mat_VarRead5+0x17d8>
   2a5a8:	add	r1, pc, #4
   2a5ac:	ldr	r0, [r1, r0, lsl #2]
   2a5b0:	add	pc, r1, r0
   2a5b4:	.word	0x00000034
   2a5b8:	.word	0x0000098c
   2a5bc:	.word	0x000009a4
   2a5c0:	.word	0x000009bc
   2a5c4:	.word	0x000009d4
   2a5c8:	.word	0x000009ec
   2a5cc:	.word	0x00000a04
   2a5d0:	.word	0x00000a64
   2a5d4:	.word	0x00000a1c
   2a5d8:	.word	0x00000a64
   2a5dc:	.word	0x00000a64
   2a5e0:	.word	0x00000a34
   2a5e4:	.word	0x00000a4c
   2a5e8:	mov	r1, r2
   2a5ec:	ldr	r3, [r6]
   2a5f0:	ldr	r2, [sp, #8]
   2a5f4:	mov	r0, r4
   2a5f8:	bl	18bb8 <ReadInt8Data>
   2a5fc:	b	2b014 <Mat_VarRead5+0x17d4>
   2a600:	ldr	r0, [pc, #3020]	; 2b1d4 <Mat_VarRead5+0x1994>
   2a604:	add	r0, pc, r0
   2a608:	b	2a614 <Mat_VarRead5+0xdd4>
   2a60c:	ldr	r0, [pc, #3012]	; 2b1d8 <Mat_VarRead5+0x1998>
   2a610:	add	r0, pc, r0
   2a614:	bl	19b4 <Mat_Critical@plt>
   2a618:	ldr	r0, [r5, #16]
   2a61c:	sub	r0, r0, #6
   2a620:	cmp	r0, #9
   2a624:	bls	29d44 <Mat_VarRead5+0x504>
   2a628:	ldr	r0, [r4]
   2a62c:	mov	r1, sl
   2a630:	mov	r2, #0
   2a634:	bl	1a2c <fseek@plt>
   2a638:	sub	sp, fp, #28
   2a63c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a640:	ldr	r0, [r5, #8]
   2a644:	sub	r0, r0, #1
   2a648:	cmp	r0, #12
   2a64c:	bhi	2ab10 <Mat_VarRead5+0x12d0>
   2a650:	add	r1, pc, #4
   2a654:	ldr	r0, [r1, r0, lsl #2]
   2a658:	add	pc, r1, r0
   2a65c:	.word	0x00000034
   2a660:	.word	0x00000348
   2a664:	.word	0x00000370
   2a668:	.word	0x00000398
   2a66c:	.word	0x000003c0
   2a670:	.word	0x000003ec
   2a674:	.word	0x00000414
   2a678:	.word	0x000004b4
   2a67c:	.word	0x0000043c
   2a680:	.word	0x000004b4
   2a684:	.word	0x000004b4
   2a688:	.word	0x00000464
   2a68c:	.word	0x0000048c
   2a690:	ldr	r0, [r9]
   2a694:	ldr	r2, [r8]
   2a698:	ldr	r3, [sp, #8]
   2a69c:	ldr	r1, [r0, #12]
   2a6a0:	ldr	r0, [sp, #4]
   2a6a4:	ldr	r0, [r0]
   2a6a8:	str	r0, [sp]
   2a6ac:	mov	r0, r4
   2a6b0:	bl	1acbc <ReadCompressedInt8Data>
   2a6b4:	b	2ab0c <Mat_VarRead5+0x12cc>
   2a6b8:	ldr	r0, [r5, #8]
   2a6bc:	sub	r0, r0, #1
   2a6c0:	cmp	r0, #12
   2a6c4:	bhi	2b184 <Mat_VarRead5+0x1944>
   2a6c8:	add	r1, pc, #4
   2a6cc:	ldr	r0, [r1, r0, lsl #2]
   2a6d0:	add	pc, r1, r0
   2a6d4:	.word	0x00000034
   2a6d8:	.word	0x0000098c
   2a6dc:	.word	0x000009ac
   2a6e0:	.word	0x000009cc
   2a6e4:	.word	0x000009ec
   2a6e8:	.word	0x00000a0c
   2a6ec:	.word	0x00000a2c
   2a6f0:	.word	0x00000ab0
   2a6f4:	.word	0x00000a4c
   2a6f8:	.word	0x00000ab0
   2a6fc:	.word	0x00000ab0
   2a700:	.word	0x00000a6c
   2a704:	.word	0x00000a90
   2a708:	ldr	r0, [r9]
   2a70c:	ldr	r3, [sp, #8]
   2a710:	ldr	r1, [r0, #12]
   2a714:	ldr	r0, [r6]
   2a718:	str	r0, [sp]
   2a71c:	mov	r0, r4
   2a720:	bl	1acbc <ReadCompressedInt8Data>
   2a724:	b	2b180 <Mat_VarRead5+0x1940>
   2a728:	ldr	r0, [r5, #52]	; 0x34
   2a72c:	ldr	r2, [r5, #40]	; 0x28
   2a730:	mov	r3, r7
   2a734:	ldr	r1, [r0, #12]
   2a738:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2a73c:	str	r0, [sp]
   2a740:	mov	r0, r4
   2a744:	bl	1d820 <ReadCompressedCharData>
   2a748:	ldr	r1, [sp, #24]
   2a74c:	cmp	r1, #0
   2a750:	addne	r0, r0, #4
   2a754:	asr	r1, r0, #31
   2a758:	add	r1, r0, r1, lsr #29
   2a75c:	bic	r1, r1, #7
   2a760:	subs	r0, r0, r1
   2a764:	bne	2b1a8 <Mat_VarRead5+0x1968>
   2a768:	b	29d34 <Mat_VarRead5+0x4f4>
   2a76c:	ldr	r0, [sp, #4]
   2a770:	ldr	r1, [r8]
   2a774:	ldr	r2, [sp, #8]
   2a778:	ldr	r3, [r0]
   2a77c:	mov	r0, r4
   2a780:	bl	1b1ec <ReadUInt8Data>
   2a784:	b	2a86c <Mat_VarRead5+0x102c>
   2a788:	ldr	r0, [sp, #4]
   2a78c:	ldr	r1, [r8]
   2a790:	ldr	r2, [sp, #8]
   2a794:	ldr	r3, [r0]
   2a798:	mov	r0, r4
   2a79c:	bl	13c20 <ReadInt16Data>
   2a7a0:	b	2a86c <Mat_VarRead5+0x102c>
   2a7a4:	ldr	r0, [sp, #4]
   2a7a8:	ldr	r1, [r8]
   2a7ac:	ldr	r2, [sp, #8]
   2a7b0:	ldr	r3, [r0]
   2a7b4:	mov	r0, r4
   2a7b8:	bl	163ec <ReadUInt16Data>
   2a7bc:	b	2a86c <Mat_VarRead5+0x102c>
   2a7c0:	ldr	r0, [sp, #4]
   2a7c4:	ldr	r1, [r8]
   2a7c8:	ldr	r2, [sp, #8]
   2a7cc:	ldr	r3, [r0]
   2a7d0:	mov	r0, r4
   2a7d4:	bl	da88 <ReadInt32Data>
   2a7d8:	b	2a86c <Mat_VarRead5+0x102c>
   2a7dc:	ldr	r0, [sp, #4]
   2a7e0:	ldr	r1, [r8]
   2a7e4:	ldr	r2, [sp, #8]
   2a7e8:	ldr	r3, [r0]
   2a7ec:	mov	r0, r4
   2a7f0:	bl	10b54 <ReadUInt32Data>
   2a7f4:	b	2a86c <Mat_VarRead5+0x102c>
   2a7f8:	ldr	r0, [sp, #4]
   2a7fc:	ldr	r1, [r8]
   2a800:	ldr	r2, [sp, #8]
   2a804:	ldr	r3, [r0]
   2a808:	mov	r0, r4
   2a80c:	bl	6fa0 <ReadSingleData>
   2a810:	b	2a86c <Mat_VarRead5+0x102c>
   2a814:	ldr	r0, [sp, #4]
   2a818:	ldr	r1, [r8]
   2a81c:	ldr	r2, [sp, #8]
   2a820:	ldr	r3, [r0]
   2a824:	mov	r0, r4
   2a828:	bl	38dc <ReadDoubleData>
   2a82c:	b	2a86c <Mat_VarRead5+0x102c>
   2a830:	ldr	r0, [sp, #4]
   2a834:	ldr	r1, [r8]
   2a838:	ldr	r2, [sp, #8]
   2a83c:	ldr	r3, [r0]
   2a840:	mov	r0, r4
   2a844:	bl	9498 <ReadInt64Data>
   2a848:	b	2a86c <Mat_VarRead5+0x102c>
   2a84c:	.word	0x00035fa4
   2a850:	.word	0x00035f04
   2a854:	ldr	r0, [sp, #4]
   2a858:	ldr	r1, [r8]
   2a85c:	ldr	r2, [sp, #8]
   2a860:	ldr	r3, [r0]
   2a864:	mov	r0, r4
   2a868:	bl	b790 <ReadUInt64Data>
   2a86c:	str	r0, [sp, #12]
   2a870:	ldr	r0, [sp, #16]
   2a874:	ldr	r1, [sp, #12]
   2a878:	cmp	r0, #0
   2a87c:	addne	r1, r1, #4
   2a880:	asr	r0, r1, #31
   2a884:	add	r0, r1, r0, lsr #29
   2a888:	bic	r0, r0, #7
   2a88c:	subs	r1, r1, r0
   2a890:	beq	2a8a4 <Mat_VarRead5+0x1064>
   2a894:	ldr	r0, [r4]
   2a898:	rsb	r1, r1, #8
   2a89c:	mov	r2, #1
   2a8a0:	bl	1a2c <fseek@plt>
   2a8a4:	ldr	r3, [r4]
   2a8a8:	add	r6, sp, #32
   2a8ac:	mov	r1, #4
   2a8b0:	mov	r2, #1
   2a8b4:	mov	r0, r6
   2a8b8:	bl	18b8 <fread@plt>
   2a8bc:	ldr	r0, [sp, #20]
   2a8c0:	cmp	r0, #0
   2a8c4:	beq	2a8d0 <Mat_VarRead5+0x1090>
   2a8c8:	add	r0, sp, #32
   2a8cc:	bl	1c04 <Mat_uint32Swap>
   2a8d0:	ldr	r0, [sp, #32]
   2a8d4:	uxtb	r9, r0
   2a8d8:	cmp	r9, #25
   2a8dc:	movcs	r9, #0
   2a8e0:	cmp	r0, #65536	; 0x10000
   2a8e4:	bcs	2a930 <Mat_VarRead5+0x10f0>
   2a8e8:	ldr	r3, [r4]
   2a8ec:	add	r6, r6, #4
   2a8f0:	mov	r1, #4
   2a8f4:	mov	r2, #1
   2a8f8:	mov	r0, r6
   2a8fc:	bl	18b8 <fread@plt>
   2a900:	ldr	r0, [sp, #20]
   2a904:	cmp	r0, #0
   2a908:	beq	2a914 <Mat_VarRead5+0x10d4>
   2a90c:	mov	r0, r6
   2a910:	bl	1c04 <Mat_uint32Swap>
   2a914:	ldr	r0, [sp, #36]	; 0x24
   2a918:	mov	r6, #0
   2a91c:	ldr	r1, [r5, #8]
   2a920:	sub	r1, r1, #1
   2a924:	cmp	r1, #12
   2a928:	bls	2a948 <Mat_VarRead5+0x1108>
   2a92c:	b	2ad4c <Mat_VarRead5+0x150c>
   2a930:	lsr	r0, r0, #16
   2a934:	mov	r6, #1
   2a938:	ldr	r1, [r5, #8]
   2a93c:	sub	r1, r1, #1
   2a940:	cmp	r1, #12
   2a944:	bhi	2ad4c <Mat_VarRead5+0x150c>
   2a948:	add	r2, pc, #4
   2a94c:	ldr	r1, [r2, r1, lsl #2]
   2a950:	add	pc, r2, r1
   2a954:	.word	0x00000034
   2a958:	.word	0x00000300
   2a95c:	.word	0x0000031c
   2a960:	.word	0x00000338
   2a964:	.word	0x00000354
   2a968:	.word	0x00000370
   2a96c:	.word	0x0000038c
   2a970:	.word	0x000003f8
   2a974:	.word	0x000003a8
   2a978:	.word	0x000003f8
   2a97c:	.word	0x000003f8
   2a980:	.word	0x000003c4
   2a984:	.word	0x000003e0
   2a988:	ldr	r0, [sp, #4]
   2a98c:	ldr	r1, [r8, #4]
   2a990:	mov	r2, r9
   2a994:	ldr	r3, [r0]
   2a998:	mov	r0, r4
   2a99c:	bl	18bb8 <ReadInt8Data>
   2a9a0:	b	2ad4c <Mat_VarRead5+0x150c>
   2a9a4:	ldr	r0, [r9]
   2a9a8:	ldr	r2, [r8]
   2a9ac:	ldr	r3, [sp, #8]
   2a9b0:	ldr	r1, [r0, #12]
   2a9b4:	ldr	r0, [sp, #4]
   2a9b8:	ldr	r0, [r0]
   2a9bc:	str	r0, [sp]
   2a9c0:	mov	r0, r4
   2a9c4:	bl	1d2f0 <ReadCompressedUInt8Data>
   2a9c8:	b	2ab0c <Mat_VarRead5+0x12cc>
   2a9cc:	ldr	r0, [r9]
   2a9d0:	ldr	r2, [r8]
   2a9d4:	ldr	r3, [sp, #8]
   2a9d8:	ldr	r1, [r0, #12]
   2a9dc:	ldr	r0, [sp, #4]
   2a9e0:	ldr	r0, [r0]
   2a9e4:	str	r0, [sp]
   2a9e8:	mov	r0, r4
   2a9ec:	bl	15ebc <ReadCompressedInt16Data>
   2a9f0:	b	2ab0c <Mat_VarRead5+0x12cc>
   2a9f4:	ldr	r0, [r9]
   2a9f8:	ldr	r2, [r8]
   2a9fc:	ldr	r3, [sp, #8]
   2aa00:	ldr	r1, [r0, #12]
   2aa04:	ldr	r0, [sp, #4]
   2aa08:	ldr	r0, [r0]
   2aa0c:	str	r0, [sp]
   2aa10:	mov	r0, r4
   2aa14:	bl	18688 <ReadCompressedUInt16Data>
   2aa18:	b	2ab0c <Mat_VarRead5+0x12cc>
   2aa1c:	ldr	r0, [r9]
   2aa20:	ldr	r2, [r8]
   2aa24:	ldr	r3, [sp, #8]
   2aa28:	ldr	r1, [r0, #12]
   2aa2c:	ldr	r0, [sp, #4]
   2aa30:	ldr	r0, [r0]
   2aa34:	str	r0, [sp]
   2aa38:	mov	r0, r4
   2aa3c:	bl	10624 <ReadCompressedInt32Data>
   2aa40:	b	2ab0c <Mat_VarRead5+0x12cc>
   2aa44:	.word	0x00035f6f
   2aa48:	ldr	r0, [r9]
   2aa4c:	ldr	r2, [r8]
   2aa50:	ldr	r3, [sp, #8]
   2aa54:	ldr	r1, [r0, #12]
   2aa58:	ldr	r0, [sp, #4]
   2aa5c:	ldr	r0, [r0]
   2aa60:	str	r0, [sp]
   2aa64:	mov	r0, r4
   2aa68:	bl	136f0 <ReadCompressedUInt32Data>
   2aa6c:	b	2ab0c <Mat_VarRead5+0x12cc>
   2aa70:	ldr	r0, [r9]
   2aa74:	ldr	r2, [r8]
   2aa78:	ldr	r3, [sp, #8]
   2aa7c:	ldr	r1, [r0, #12]
   2aa80:	ldr	r0, [sp, #4]
   2aa84:	ldr	r0, [r0]
   2aa88:	str	r0, [sp]
   2aa8c:	mov	r0, r4
   2aa90:	bl	8ef4 <ReadCompressedSingleData>
   2aa94:	b	2ab0c <Mat_VarRead5+0x12cc>
   2aa98:	ldr	r0, [r9]
   2aa9c:	ldr	r2, [r8]
   2aaa0:	ldr	r3, [sp, #8]
   2aaa4:	ldr	r1, [r0, #12]
   2aaa8:	ldr	r0, [sp, #4]
   2aaac:	ldr	r0, [r0]
   2aab0:	str	r0, [sp]
   2aab4:	mov	r0, r4
   2aab8:	bl	5584 <ReadCompressedDoubleData>
   2aabc:	b	2ab0c <Mat_VarRead5+0x12cc>
   2aac0:	ldr	r0, [r9]
   2aac4:	ldr	r2, [r8]
   2aac8:	ldr	r3, [sp, #8]
   2aacc:	ldr	r1, [r0, #12]
   2aad0:	ldr	r0, [sp, #4]
   2aad4:	ldr	r0, [r0]
   2aad8:	str	r0, [sp]
   2aadc:	mov	r0, r4
   2aae0:	bl	b1d0 <ReadCompressedInt64Data>
   2aae4:	b	2ab0c <Mat_VarRead5+0x12cc>
   2aae8:	ldr	r0, [r9]
   2aaec:	ldr	r2, [r8]
   2aaf0:	ldr	r3, [sp, #8]
   2aaf4:	ldr	r1, [r0, #12]
   2aaf8:	ldr	r0, [sp, #4]
   2aafc:	ldr	r0, [r0]
   2ab00:	str	r0, [sp]
   2ab04:	mov	r0, r4
   2ab08:	bl	d4c8 <ReadCompressedUInt64Data>
   2ab0c:	str	r0, [sp, #12]
   2ab10:	ldr	r0, [sp, #16]
   2ab14:	ldr	r1, [sp, #12]
   2ab18:	cmp	r0, #0
   2ab1c:	addne	r1, r1, #4
   2ab20:	asr	r0, r1, #31
   2ab24:	add	r0, r1, r0, lsr #29
   2ab28:	bic	r0, r0, #7
   2ab2c:	subs	r0, r1, r0
   2ab30:	beq	2ab48 <Mat_VarRead5+0x1308>
   2ab34:	ldr	r1, [r9]
   2ab38:	rsb	r2, r0, #8
   2ab3c:	mov	r0, r4
   2ab40:	ldr	r1, [r1, #12]
   2ab44:	bl	23b4 <InflateSkip>
   2ab48:	ldr	r0, [r9]
   2ab4c:	add	r7, sp, #32
   2ab50:	mov	r2, r7
   2ab54:	ldr	r1, [r0, #12]
   2ab58:	mov	r0, r4
   2ab5c:	bl	31bc <InflateDataType>
   2ab60:	ldr	r0, [sp, #20]
   2ab64:	cmp	r0, #0
   2ab68:	beq	2ab74 <Mat_VarRead5+0x1334>
   2ab6c:	add	r0, sp, #32
   2ab70:	bl	1c04 <Mat_uint32Swap>
   2ab74:	ldr	r0, [sp, #32]
   2ab78:	uxtb	r6, r0
   2ab7c:	cmp	r6, #25
   2ab80:	movcs	r6, #0
   2ab84:	cmp	r0, #65536	; 0x10000
   2ab88:	bcs	2abd4 <Mat_VarRead5+0x1394>
   2ab8c:	ldr	r0, [r9]
   2ab90:	add	r7, r7, #4
   2ab94:	mov	r2, r7
   2ab98:	ldr	r1, [r0, #12]
   2ab9c:	mov	r0, r4
   2aba0:	bl	31bc <InflateDataType>
   2aba4:	ldr	r0, [sp, #20]
   2aba8:	cmp	r0, #0
   2abac:	beq	2abb8 <Mat_VarRead5+0x1378>
   2abb0:	mov	r0, r7
   2abb4:	bl	1c04 <Mat_uint32Swap>
   2abb8:	ldr	r0, [sp, #36]	; 0x24
   2abbc:	mov	r7, #0
   2abc0:	ldr	r1, [r5, #8]
   2abc4:	sub	r1, r1, #1
   2abc8:	cmp	r1, #12
   2abcc:	bls	2abec <Mat_VarRead5+0x13ac>
   2abd0:	b	2aef4 <Mat_VarRead5+0x16b4>
   2abd4:	lsr	r0, r0, #16
   2abd8:	mov	r7, #1
   2abdc:	ldr	r1, [r5, #8]
   2abe0:	sub	r1, r1, #1
   2abe4:	cmp	r1, #12
   2abe8:	bhi	2aef4 <Mat_VarRead5+0x16b4>
   2abec:	add	r2, pc, #4
   2abf0:	ldr	r1, [r2, r1, lsl #2]
   2abf4:	add	pc, r2, r1
   2abf8:	.word	0x00000034
   2abfc:	.word	0x00000184
   2ac00:	.word	0x000001ac
   2ac04:	.word	0x000001dc
   2ac08:	.word	0x00000204
   2ac0c:	.word	0x0000022c
   2ac10:	.word	0x00000254
   2ac14:	.word	0x000002fc
   2ac18:	.word	0x0000027c
   2ac1c:	.word	0x000002fc
   2ac20:	.word	0x000002fc
   2ac24:	.word	0x000002a4
   2ac28:	.word	0x000002d8
   2ac2c:	ldr	r0, [r9]
   2ac30:	ldr	r2, [r8, #4]
   2ac34:	mov	r3, r6
   2ac38:	ldr	r1, [r0, #12]
   2ac3c:	ldr	r0, [sp, #4]
   2ac40:	ldr	r0, [r0]
   2ac44:	str	r0, [sp]
   2ac48:	mov	r0, r4
   2ac4c:	bl	1acbc <ReadCompressedInt8Data>
   2ac50:	b	2aef4 <Mat_VarRead5+0x16b4>
   2ac54:	ldr	r0, [sp, #4]
   2ac58:	ldr	r1, [r8, #4]
   2ac5c:	mov	r2, r9
   2ac60:	ldr	r3, [r0]
   2ac64:	mov	r0, r4
   2ac68:	bl	1b1ec <ReadUInt8Data>
   2ac6c:	b	2ad4c <Mat_VarRead5+0x150c>
   2ac70:	ldr	r0, [sp, #4]
   2ac74:	ldr	r1, [r8, #4]
   2ac78:	mov	r2, r9
   2ac7c:	ldr	r3, [r0]
   2ac80:	mov	r0, r4
   2ac84:	bl	13c20 <ReadInt16Data>
   2ac88:	b	2ad4c <Mat_VarRead5+0x150c>
   2ac8c:	ldr	r0, [sp, #4]
   2ac90:	ldr	r1, [r8, #4]
   2ac94:	mov	r2, r9
   2ac98:	ldr	r3, [r0]
   2ac9c:	mov	r0, r4
   2aca0:	bl	163ec <ReadUInt16Data>
   2aca4:	b	2ad4c <Mat_VarRead5+0x150c>
   2aca8:	ldr	r0, [sp, #4]
   2acac:	ldr	r1, [r8, #4]
   2acb0:	mov	r2, r9
   2acb4:	ldr	r3, [r0]
   2acb8:	mov	r0, r4
   2acbc:	bl	da88 <ReadInt32Data>
   2acc0:	b	2ad4c <Mat_VarRead5+0x150c>
   2acc4:	ldr	r0, [sp, #4]
   2acc8:	ldr	r1, [r8, #4]
   2accc:	mov	r2, r9
   2acd0:	ldr	r3, [r0]
   2acd4:	mov	r0, r4
   2acd8:	bl	10b54 <ReadUInt32Data>
   2acdc:	b	2ad4c <Mat_VarRead5+0x150c>
   2ace0:	ldr	r0, [sp, #4]
   2ace4:	ldr	r1, [r8, #4]
   2ace8:	mov	r2, r9
   2acec:	ldr	r3, [r0]
   2acf0:	mov	r0, r4
   2acf4:	bl	6fa0 <ReadSingleData>
   2acf8:	b	2ad4c <Mat_VarRead5+0x150c>
   2acfc:	ldr	r0, [sp, #4]
   2ad00:	ldr	r1, [r8, #4]
   2ad04:	mov	r2, r9
   2ad08:	ldr	r3, [r0]
   2ad0c:	mov	r0, r4
   2ad10:	bl	38dc <ReadDoubleData>
   2ad14:	b	2ad4c <Mat_VarRead5+0x150c>
   2ad18:	ldr	r0, [sp, #4]
   2ad1c:	ldr	r1, [r8, #4]
   2ad20:	mov	r2, r9
   2ad24:	ldr	r3, [r0]
   2ad28:	mov	r0, r4
   2ad2c:	bl	9498 <ReadInt64Data>
   2ad30:	b	2ad4c <Mat_VarRead5+0x150c>
   2ad34:	ldr	r0, [sp, #4]
   2ad38:	ldr	r1, [r8, #4]
   2ad3c:	mov	r2, r9
   2ad40:	ldr	r3, [r0]
   2ad44:	mov	r0, r4
   2ad48:	bl	b790 <ReadUInt64Data>
   2ad4c:	cmp	r6, #0
   2ad50:	addne	r0, r0, #4
   2ad54:	asr	r1, r0, #31
   2ad58:	add	r1, r0, r1, lsr #29
   2ad5c:	bic	r1, r1, #7
   2ad60:	subs	r1, r0, r1
   2ad64:	beq	2af24 <Mat_VarRead5+0x16e4>
   2ad68:	ldr	r0, [r4]
   2ad6c:	rsb	r1, r1, #8
   2ad70:	mov	r2, #1
   2ad74:	bl	1a2c <fseek@plt>
   2ad78:	b	2af24 <Mat_VarRead5+0x16e4>
   2ad7c:	ldr	r0, [r9]
   2ad80:	ldr	r2, [r8, #4]
   2ad84:	mov	r3, r6
   2ad88:	ldr	r1, [r0, #12]
   2ad8c:	ldr	r0, [sp, #4]
   2ad90:	ldr	r0, [r0]
   2ad94:	str	r0, [sp]
   2ad98:	mov	r0, r4
   2ad9c:	bl	1d2f0 <ReadCompressedUInt8Data>
   2ada0:	b	2aef4 <Mat_VarRead5+0x16b4>
   2ada4:	ldr	r0, [r9]
   2ada8:	ldr	r2, [r8, #4]
   2adac:	mov	r3, r6
   2adb0:	ldr	r1, [r0, #12]
   2adb4:	ldr	r0, [sp, #4]
   2adb8:	ldr	r0, [r0]
   2adbc:	str	r0, [sp]
   2adc0:	mov	r0, r4
   2adc4:	bl	15ebc <ReadCompressedInt16Data>
   2adc8:	b	2aef4 <Mat_VarRead5+0x16b4>
   2adcc:	.word	0x00035c11
   2add0:	.word	0x00035aa4
   2add4:	ldr	r0, [r9]
   2add8:	ldr	r2, [r8, #4]
   2addc:	mov	r3, r6
   2ade0:	ldr	r1, [r0, #12]
   2ade4:	ldr	r0, [sp, #4]
   2ade8:	ldr	r0, [r0]
   2adec:	str	r0, [sp]
   2adf0:	mov	r0, r4
   2adf4:	bl	18688 <ReadCompressedUInt16Data>
   2adf8:	b	2aef4 <Mat_VarRead5+0x16b4>
   2adfc:	ldr	r0, [r9]
   2ae00:	ldr	r2, [r8, #4]
   2ae04:	mov	r3, r6
   2ae08:	ldr	r1, [r0, #12]
   2ae0c:	ldr	r0, [sp, #4]
   2ae10:	ldr	r0, [r0]
   2ae14:	str	r0, [sp]
   2ae18:	mov	r0, r4
   2ae1c:	bl	10624 <ReadCompressedInt32Data>
   2ae20:	b	2aef4 <Mat_VarRead5+0x16b4>
   2ae24:	ldr	r0, [r9]
   2ae28:	ldr	r2, [r8, #4]
   2ae2c:	mov	r3, r6
   2ae30:	ldr	r1, [r0, #12]
   2ae34:	ldr	r0, [sp, #4]
   2ae38:	ldr	r0, [r0]
   2ae3c:	str	r0, [sp]
   2ae40:	mov	r0, r4
   2ae44:	bl	136f0 <ReadCompressedUInt32Data>
   2ae48:	b	2aef4 <Mat_VarRead5+0x16b4>
   2ae4c:	ldr	r0, [r9]
   2ae50:	ldr	r2, [r8, #4]
   2ae54:	mov	r3, r6
   2ae58:	ldr	r1, [r0, #12]
   2ae5c:	ldr	r0, [sp, #4]
   2ae60:	ldr	r0, [r0]
   2ae64:	str	r0, [sp]
   2ae68:	mov	r0, r4
   2ae6c:	bl	8ef4 <ReadCompressedSingleData>
   2ae70:	b	2aef4 <Mat_VarRead5+0x16b4>
   2ae74:	ldr	r0, [r9]
   2ae78:	ldr	r2, [r8, #4]
   2ae7c:	mov	r3, r6
   2ae80:	ldr	r1, [r0, #12]
   2ae84:	ldr	r0, [sp, #4]
   2ae88:	ldr	r0, [r0]
   2ae8c:	str	r0, [sp]
   2ae90:	mov	r0, r4
   2ae94:	bl	5584 <ReadCompressedDoubleData>
   2ae98:	b	2aef4 <Mat_VarRead5+0x16b4>
   2ae9c:	ldr	r0, [r9]
   2aea0:	ldr	r2, [r8, #4]
   2aea4:	mov	r3, r6
   2aea8:	ldr	r1, [r0, #12]
   2aeac:	ldr	r0, [sp, #4]
   2aeb0:	ldr	r0, [r0]
   2aeb4:	str	r0, [sp]
   2aeb8:	mov	r0, r4
   2aebc:	bl	b1d0 <ReadCompressedInt64Data>
   2aec0:	b	2aef4 <Mat_VarRead5+0x16b4>
   2aec4:	.word	0x00035964
   2aec8:	.word	0x0003599a
   2aecc:	.word	0x00035999
   2aed0:	ldr	r0, [r9]
   2aed4:	ldr	r2, [r8, #4]
   2aed8:	mov	r3, r6
   2aedc:	ldr	r1, [r0, #12]
   2aee0:	ldr	r0, [sp, #4]
   2aee4:	ldr	r0, [r0]
   2aee8:	str	r0, [sp]
   2aeec:	mov	r0, r4
   2aef0:	bl	d4c8 <ReadCompressedUInt64Data>
   2aef4:	cmp	r7, #0
   2aef8:	addne	r0, r0, #4
   2aefc:	asr	r1, r0, #31
   2af00:	add	r1, r0, r1, lsr #29
   2af04:	bic	r1, r1, #7
   2af08:	subs	r0, r0, r1
   2af0c:	beq	2af24 <Mat_VarRead5+0x16e4>
   2af10:	ldr	r1, [r9]
   2af14:	rsb	r2, r0, #8
   2af18:	mov	r0, r4
   2af1c:	ldr	r1, [r1, #12]
   2af20:	bl	23b4 <InflateSkip>
   2af24:	ldr	r0, [sp, #24]
   2af28:	str	r8, [r0, #24]
   2af2c:	ldr	r0, [r5, #16]
   2af30:	sub	r0, r0, #6
   2af34:	cmp	r0, #9
   2af38:	bls	29d44 <Mat_VarRead5+0x504>
   2af3c:	b	2a628 <Mat_VarRead5+0xde8>
   2af40:	mov	r1, r2
   2af44:	ldr	r3, [r6]
   2af48:	ldr	r2, [sp, #8]
   2af4c:	mov	r0, r4
   2af50:	bl	1b1ec <ReadUInt8Data>
   2af54:	b	2b014 <Mat_VarRead5+0x17d4>
   2af58:	mov	r1, r2
   2af5c:	ldr	r3, [r6]
   2af60:	ldr	r2, [sp, #8]
   2af64:	mov	r0, r4
   2af68:	bl	13c20 <ReadInt16Data>
   2af6c:	b	2b014 <Mat_VarRead5+0x17d4>
   2af70:	mov	r1, r2
   2af74:	ldr	r3, [r6]
   2af78:	ldr	r2, [sp, #8]
   2af7c:	mov	r0, r4
   2af80:	bl	163ec <ReadUInt16Data>
   2af84:	b	2b014 <Mat_VarRead5+0x17d4>
   2af88:	mov	r1, r2
   2af8c:	ldr	r3, [r6]
   2af90:	ldr	r2, [sp, #8]
   2af94:	mov	r0, r4
   2af98:	bl	da88 <ReadInt32Data>
   2af9c:	b	2b014 <Mat_VarRead5+0x17d4>
   2afa0:	mov	r1, r2
   2afa4:	ldr	r3, [r6]
   2afa8:	ldr	r2, [sp, #8]
   2afac:	mov	r0, r4
   2afb0:	bl	10b54 <ReadUInt32Data>
   2afb4:	b	2b014 <Mat_VarRead5+0x17d4>
   2afb8:	mov	r1, r2
   2afbc:	ldr	r3, [r6]
   2afc0:	ldr	r2, [sp, #8]
   2afc4:	mov	r0, r4
   2afc8:	bl	6fa0 <ReadSingleData>
   2afcc:	b	2b014 <Mat_VarRead5+0x17d4>
   2afd0:	mov	r1, r2
   2afd4:	ldr	r3, [r6]
   2afd8:	ldr	r2, [sp, #8]
   2afdc:	mov	r0, r4
   2afe0:	bl	38dc <ReadDoubleData>
   2afe4:	b	2b014 <Mat_VarRead5+0x17d4>
   2afe8:	mov	r1, r2
   2afec:	ldr	r3, [r6]
   2aff0:	ldr	r2, [sp, #8]
   2aff4:	mov	r0, r4
   2aff8:	bl	9498 <ReadInt64Data>
   2affc:	b	2b014 <Mat_VarRead5+0x17d4>
   2b000:	mov	r1, r2
   2b004:	ldr	r3, [r6]
   2b008:	ldr	r2, [sp, #8]
   2b00c:	mov	r0, r4
   2b010:	bl	b790 <ReadUInt64Data>
   2b014:	str	r0, [sp, #12]
   2b018:	ldr	r0, [sp, #16]
   2b01c:	ldr	r1, [sp, #12]
   2b020:	cmp	r0, #0
   2b024:	addne	r1, r1, #4
   2b028:	asr	r0, r1, #31
   2b02c:	add	r0, r1, r0, lsr #29
   2b030:	bic	r0, r0, #7
   2b034:	subs	r1, r1, r0
   2b038:	beq	29d34 <Mat_VarRead5+0x4f4>
   2b03c:	ldr	r0, [r4]
   2b040:	rsb	r1, r1, #8
   2b044:	mov	r2, #1
   2b048:	bl	1a2c <fseek@plt>
   2b04c:	ldr	r0, [r5, #16]
   2b050:	sub	r0, r0, #6
   2b054:	cmp	r0, #9
   2b058:	bls	29d44 <Mat_VarRead5+0x504>
   2b05c:	b	2a628 <Mat_VarRead5+0xde8>
   2b060:	ldr	r0, [r9]
   2b064:	ldr	r3, [sp, #8]
   2b068:	ldr	r1, [r0, #12]
   2b06c:	ldr	r0, [r6]
   2b070:	str	r0, [sp]
   2b074:	mov	r0, r4
   2b078:	bl	1d2f0 <ReadCompressedUInt8Data>
   2b07c:	b	2b180 <Mat_VarRead5+0x1940>
   2b080:	ldr	r0, [r9]
   2b084:	ldr	r3, [sp, #8]
   2b088:	ldr	r1, [r0, #12]
   2b08c:	ldr	r0, [r6]
   2b090:	str	r0, [sp]
   2b094:	mov	r0, r4
   2b098:	bl	15ebc <ReadCompressedInt16Data>
   2b09c:	b	2b180 <Mat_VarRead5+0x1940>
   2b0a0:	ldr	r0, [r9]
   2b0a4:	ldr	r3, [sp, #8]
   2b0a8:	ldr	r1, [r0, #12]
   2b0ac:	ldr	r0, [r6]
   2b0b0:	str	r0, [sp]
   2b0b4:	mov	r0, r4
   2b0b8:	bl	18688 <ReadCompressedUInt16Data>
   2b0bc:	b	2b180 <Mat_VarRead5+0x1940>
   2b0c0:	ldr	r0, [r9]
   2b0c4:	ldr	r3, [sp, #8]
   2b0c8:	ldr	r1, [r0, #12]
   2b0cc:	ldr	r0, [r6]
   2b0d0:	str	r0, [sp]
   2b0d4:	mov	r0, r4
   2b0d8:	bl	10624 <ReadCompressedInt32Data>
   2b0dc:	b	2b180 <Mat_VarRead5+0x1940>
   2b0e0:	ldr	r0, [r9]
   2b0e4:	ldr	r3, [sp, #8]
   2b0e8:	ldr	r1, [r0, #12]
   2b0ec:	ldr	r0, [r6]
   2b0f0:	str	r0, [sp]
   2b0f4:	mov	r0, r4
   2b0f8:	bl	136f0 <ReadCompressedUInt32Data>
   2b0fc:	b	2b180 <Mat_VarRead5+0x1940>
   2b100:	ldr	r0, [r9]
   2b104:	ldr	r3, [sp, #8]
   2b108:	ldr	r1, [r0, #12]
   2b10c:	ldr	r0, [r6]
   2b110:	str	r0, [sp]
   2b114:	mov	r0, r4
   2b118:	bl	8ef4 <ReadCompressedSingleData>
   2b11c:	b	2b180 <Mat_VarRead5+0x1940>
   2b120:	ldr	r0, [r9]
   2b124:	ldr	r3, [sp, #8]
   2b128:	ldr	r1, [r0, #12]
   2b12c:	ldr	r0, [r6]
   2b130:	str	r0, [sp]
   2b134:	mov	r0, r4
   2b138:	bl	5584 <ReadCompressedDoubleData>
   2b13c:	b	2b180 <Mat_VarRead5+0x1940>
   2b140:	ldr	r0, [r9]
   2b144:	ldr	r3, [sp, #8]
   2b148:	ldr	r1, [r0, #12]
   2b14c:	ldr	r0, [r6]
   2b150:	str	r0, [sp]
   2b154:	mov	r0, r4
   2b158:	bl	b1d0 <ReadCompressedInt64Data>
   2b15c:	b	2b180 <Mat_VarRead5+0x1940>
   2b160:	.word	0x00035759
   2b164:	ldr	r0, [r9]
   2b168:	ldr	r3, [sp, #8]
   2b16c:	ldr	r1, [r0, #12]
   2b170:	ldr	r0, [r6]
   2b174:	str	r0, [sp]
   2b178:	mov	r0, r4
   2b17c:	bl	d4c8 <ReadCompressedUInt64Data>
   2b180:	str	r0, [sp, #12]
   2b184:	ldr	r0, [sp, #16]
   2b188:	ldr	r1, [sp, #12]
   2b18c:	cmp	r0, #0
   2b190:	addne	r1, r1, #4
   2b194:	asr	r0, r1, #31
   2b198:	add	r0, r1, r0, lsr #29
   2b19c:	bic	r0, r0, #7
   2b1a0:	subs	r0, r1, r0
   2b1a4:	beq	29d34 <Mat_VarRead5+0x4f4>
   2b1a8:	ldr	r1, [r9]
   2b1ac:	rsb	r2, r0, #8
   2b1b0:	mov	r0, r4
   2b1b4:	ldr	r1, [r1, #12]
   2b1b8:	bl	23b4 <InflateSkip>
   2b1bc:	ldr	r0, [r5, #16]
   2b1c0:	sub	r0, r0, #6
   2b1c4:	cmp	r0, #9
   2b1c8:	bls	29d44 <Mat_VarRead5+0x504>
   2b1cc:	b	2a628 <Mat_VarRead5+0xde8>
   2b1d0:	.word	0x000354e8
   2b1d4:	.word	0x00035351
   2b1d8:	.word	0x0003537a
   2b1dc:	.word	0x00035597

0002b1e0 <Mat_VarReadNumeric5>:
   2b1e0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2b1e4:	add	fp, sp, #24
   2b1e8:	sub	sp, sp, #16
   2b1ec:	mov	r4, r0
   2b1f0:	ldr	r0, [r1, #48]	; 0x30
   2b1f4:	mov	r9, r3
   2b1f8:	mov	r8, r2
   2b1fc:	mov	r5, r1
   2b200:	cmp	r0, #1
   2b204:	bne	2b27c <Mat_VarReadNumeric5+0x9c>
   2b208:	ldr	r0, [r5, #52]	; 0x34
   2b20c:	add	r7, sp, #8
   2b210:	mov	r6, #0
   2b214:	mov	r2, r7
   2b218:	ldr	r1, [r0, #12]
   2b21c:	mov	r0, r4
   2b220:	str	r6, [r1, #4]
   2b224:	bl	31bc <InflateDataType>
   2b228:	ldr	r0, [r4, #20]
   2b22c:	cmp	r0, #0
   2b230:	beq	2b23c <Mat_VarReadNumeric5+0x5c>
   2b234:	add	r0, sp, #8
   2b238:	bl	1c04 <Mat_uint32Swap>
   2b23c:	ldr	r0, [sp, #8]
   2b240:	uxtb	r1, r0
   2b244:	cmp	r1, #25
   2b248:	movcc	r6, r1
   2b24c:	cmp	r0, #65536	; 0x10000
   2b250:	bcs	2b36c <Mat_VarReadNumeric5+0x18c>
   2b254:	ldr	r0, [r5, #52]	; 0x34
   2b258:	add	r7, r7, #4
   2b25c:	mov	r2, r7
   2b260:	ldr	r1, [r0, #12]
   2b264:	mov	r0, r4
   2b268:	bl	31bc <InflateDataType>
   2b26c:	ldr	r0, [r4, #20]
   2b270:	cmp	r0, #0
   2b274:	bne	2b2e4 <Mat_VarReadNumeric5+0x104>
   2b278:	b	2b2ec <Mat_VarReadNumeric5+0x10c>
   2b27c:	ldr	r3, [r4]
   2b280:	add	r7, sp, #8
   2b284:	mov	r1, #4
   2b288:	mov	r2, #1
   2b28c:	mov	r0, r7
   2b290:	bl	18b8 <fread@plt>
   2b294:	ldr	r0, [r4, #20]
   2b298:	cmp	r0, #0
   2b29c:	beq	2b2a8 <Mat_VarReadNumeric5+0xc8>
   2b2a0:	add	r0, sp, #8
   2b2a4:	bl	1c04 <Mat_uint32Swap>
   2b2a8:	ldr	r0, [sp, #8]
   2b2ac:	uxtb	r6, r0
   2b2b0:	cmp	r6, #25
   2b2b4:	movcs	r6, #0
   2b2b8:	cmp	r0, #65536	; 0x10000
   2b2bc:	bcs	2b36c <Mat_VarReadNumeric5+0x18c>
   2b2c0:	ldr	r3, [r4]
   2b2c4:	add	r7, r7, #4
   2b2c8:	mov	r1, #4
   2b2cc:	mov	r2, #1
   2b2d0:	mov	r0, r7
   2b2d4:	bl	18b8 <fread@plt>
   2b2d8:	ldr	r0, [r4, #20]
   2b2dc:	cmp	r0, #0
   2b2e0:	beq	2b2ec <Mat_VarReadNumeric5+0x10c>
   2b2e4:	mov	r0, r7
   2b2e8:	bl	1c04 <Mat_uint32Swap>
   2b2ec:	ldr	r0, [sp, #12]
   2b2f0:	mov	r7, #0
   2b2f4:	cmp	r0, #0
   2b2f8:	beq	2b3e4 <Mat_VarReadNumeric5+0x204>
   2b2fc:	ldr	r1, [r5, #48]	; 0x30
   2b300:	cmp	r1, #1
   2b304:	beq	2b380 <Mat_VarReadNumeric5+0x1a0>
   2b308:	cmp	r1, #0
   2b30c:	bne	2b648 <Mat_VarReadNumeric5+0x468>
   2b310:	ldr	r1, [r5, #16]
   2b314:	sub	r1, r1, #6
   2b318:	cmp	r1, #9
   2b31c:	bhi	2b4c8 <Mat_VarReadNumeric5+0x2e8>
   2b320:	add	r0, pc, #4
   2b324:	ldr	r1, [r0, r1, lsl #2]
   2b328:	add	pc, r0, r1
   2b32c:	.word	0x00000028
   2b330:	.word	0x000000c8
   2b334:	.word	0x000000e0
   2b338:	.word	0x000000f8
   2b33c:	.word	0x00000110
   2b340:	.word	0x00000128
   2b344:	.word	0x00000140
   2b348:	.word	0x00000158
   2b34c:	.word	0x00000170
   2b350:	.word	0x00000188
   2b354:	mov	r0, r4
   2b358:	mov	r1, r8
   2b35c:	mov	r2, r6
   2b360:	mov	r3, r9
   2b364:	bl	38dc <ReadDoubleData>
   2b368:	b	2b4c8 <Mat_VarReadNumeric5+0x2e8>
   2b36c:	lsr	r0, r0, #16
   2b370:	mov	r7, #1
   2b374:	ldr	r1, [r5, #48]	; 0x30
   2b378:	cmp	r1, #1
   2b37c:	bne	2b308 <Mat_VarReadNumeric5+0x128>
   2b380:	ldr	r1, [r5, #16]
   2b384:	sub	r1, r1, #6
   2b388:	cmp	r1, #9
   2b38c:	bhi	2b618 <Mat_VarReadNumeric5+0x438>
   2b390:	add	r0, pc, #4
   2b394:	ldr	r1, [r0, r1, lsl #2]
   2b398:	add	pc, r0, r1
   2b39c:	.word	0x00000028
   2b3a0:	.word	0x00000160
   2b3a4:	.word	0x00000180
   2b3a8:	.word	0x000001a0
   2b3ac:	.word	0x000001c0
   2b3b0:	.word	0x000001e0
   2b3b4:	.word	0x00000200
   2b3b8:	.word	0x00000220
   2b3bc:	.word	0x00000240
   2b3c0:	.word	0x00000260
   2b3c4:	ldr	r0, [r5, #52]	; 0x34
   2b3c8:	mov	r2, r8
   2b3cc:	mov	r3, r6
   2b3d0:	ldr	r1, [r0, #12]
   2b3d4:	mov	r0, r4
   2b3d8:	str	r9, [sp]
   2b3dc:	bl	5584 <ReadCompressedDoubleData>
   2b3e0:	b	2b618 <Mat_VarReadNumeric5+0x438>
   2b3e4:	mov	r0, #0
   2b3e8:	str	r0, [r5]
   2b3ec:	sub	sp, fp, #24
   2b3f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2b3f4:	mov	r0, r4
   2b3f8:	mov	r1, r8
   2b3fc:	mov	r2, r6
   2b400:	mov	r3, r9
   2b404:	bl	6fa0 <ReadSingleData>
   2b408:	b	2b4c8 <Mat_VarReadNumeric5+0x2e8>
   2b40c:	mov	r0, r4
   2b410:	mov	r1, r8
   2b414:	mov	r2, r6
   2b418:	mov	r3, r9
   2b41c:	bl	18bb8 <ReadInt8Data>
   2b420:	b	2b4c8 <Mat_VarReadNumeric5+0x2e8>
   2b424:	mov	r0, r4
   2b428:	mov	r1, r8
   2b42c:	mov	r2, r6
   2b430:	mov	r3, r9
   2b434:	bl	1b1ec <ReadUInt8Data>
   2b438:	b	2b4c8 <Mat_VarReadNumeric5+0x2e8>
   2b43c:	mov	r0, r4
   2b440:	mov	r1, r8
   2b444:	mov	r2, r6
   2b448:	mov	r3, r9
   2b44c:	bl	13c20 <ReadInt16Data>
   2b450:	b	2b4c8 <Mat_VarReadNumeric5+0x2e8>
   2b454:	mov	r0, r4
   2b458:	mov	r1, r8
   2b45c:	mov	r2, r6
   2b460:	mov	r3, r9
   2b464:	bl	163ec <ReadUInt16Data>
   2b468:	b	2b4c8 <Mat_VarReadNumeric5+0x2e8>
   2b46c:	mov	r0, r4
   2b470:	mov	r1, r8
   2b474:	mov	r2, r6
   2b478:	mov	r3, r9
   2b47c:	bl	da88 <ReadInt32Data>
   2b480:	b	2b4c8 <Mat_VarReadNumeric5+0x2e8>
   2b484:	mov	r0, r4
   2b488:	mov	r1, r8
   2b48c:	mov	r2, r6
   2b490:	mov	r3, r9
   2b494:	bl	10b54 <ReadUInt32Data>
   2b498:	b	2b4c8 <Mat_VarReadNumeric5+0x2e8>
   2b49c:	mov	r0, r4
   2b4a0:	mov	r1, r8
   2b4a4:	mov	r2, r6
   2b4a8:	mov	r3, r9
   2b4ac:	bl	9498 <ReadInt64Data>
   2b4b0:	b	2b4c8 <Mat_VarReadNumeric5+0x2e8>
   2b4b4:	mov	r0, r4
   2b4b8:	mov	r1, r8
   2b4bc:	mov	r2, r6
   2b4c0:	mov	r3, r9
   2b4c4:	bl	b790 <ReadUInt64Data>
   2b4c8:	cmp	r7, #0
   2b4cc:	addne	r0, r0, #4
   2b4d0:	asr	r1, r0, #31
   2b4d4:	add	r1, r0, r1, lsr #29
   2b4d8:	bic	r1, r1, #7
   2b4dc:	subs	r1, r0, r1
   2b4e0:	beq	2b648 <Mat_VarReadNumeric5+0x468>
   2b4e4:	ldr	r0, [r4]
   2b4e8:	rsb	r1, r1, #8
   2b4ec:	mov	r2, #1
   2b4f0:	bl	1a2c <fseek@plt>
   2b4f4:	sub	sp, fp, #24
   2b4f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2b4fc:	ldr	r0, [r5, #52]	; 0x34
   2b500:	mov	r2, r8
   2b504:	mov	r3, r6
   2b508:	ldr	r1, [r0, #12]
   2b50c:	mov	r0, r4
   2b510:	str	r9, [sp]
   2b514:	bl	8ef4 <ReadCompressedSingleData>
   2b518:	b	2b618 <Mat_VarReadNumeric5+0x438>
   2b51c:	ldr	r0, [r5, #52]	; 0x34
   2b520:	mov	r2, r8
   2b524:	mov	r3, r6
   2b528:	ldr	r1, [r0, #12]
   2b52c:	mov	r0, r4
   2b530:	str	r9, [sp]
   2b534:	bl	1acbc <ReadCompressedInt8Data>
   2b538:	b	2b618 <Mat_VarReadNumeric5+0x438>
   2b53c:	ldr	r0, [r5, #52]	; 0x34
   2b540:	mov	r2, r8
   2b544:	mov	r3, r6
   2b548:	ldr	r1, [r0, #12]
   2b54c:	mov	r0, r4
   2b550:	str	r9, [sp]
   2b554:	bl	1d2f0 <ReadCompressedUInt8Data>
   2b558:	b	2b618 <Mat_VarReadNumeric5+0x438>
   2b55c:	ldr	r0, [r5, #52]	; 0x34
   2b560:	mov	r2, r8
   2b564:	mov	r3, r6
   2b568:	ldr	r1, [r0, #12]
   2b56c:	mov	r0, r4
   2b570:	str	r9, [sp]
   2b574:	bl	15ebc <ReadCompressedInt16Data>
   2b578:	b	2b618 <Mat_VarReadNumeric5+0x438>
   2b57c:	ldr	r0, [r5, #52]	; 0x34
   2b580:	mov	r2, r8
   2b584:	mov	r3, r6
   2b588:	ldr	r1, [r0, #12]
   2b58c:	mov	r0, r4
   2b590:	str	r9, [sp]
   2b594:	bl	18688 <ReadCompressedUInt16Data>
   2b598:	b	2b618 <Mat_VarReadNumeric5+0x438>
   2b59c:	ldr	r0, [r5, #52]	; 0x34
   2b5a0:	mov	r2, r8
   2b5a4:	mov	r3, r6
   2b5a8:	ldr	r1, [r0, #12]
   2b5ac:	mov	r0, r4
   2b5b0:	str	r9, [sp]
   2b5b4:	bl	10624 <ReadCompressedInt32Data>
   2b5b8:	b	2b618 <Mat_VarReadNumeric5+0x438>
   2b5bc:	ldr	r0, [r5, #52]	; 0x34
   2b5c0:	mov	r2, r8
   2b5c4:	mov	r3, r6
   2b5c8:	ldr	r1, [r0, #12]
   2b5cc:	mov	r0, r4
   2b5d0:	str	r9, [sp]
   2b5d4:	bl	136f0 <ReadCompressedUInt32Data>
   2b5d8:	b	2b618 <Mat_VarReadNumeric5+0x438>
   2b5dc:	ldr	r0, [r5, #52]	; 0x34
   2b5e0:	mov	r2, r8
   2b5e4:	mov	r3, r6
   2b5e8:	ldr	r1, [r0, #12]
   2b5ec:	mov	r0, r4
   2b5f0:	str	r9, [sp]
   2b5f4:	bl	b1d0 <ReadCompressedInt64Data>
   2b5f8:	b	2b618 <Mat_VarReadNumeric5+0x438>
   2b5fc:	ldr	r0, [r5, #52]	; 0x34
   2b600:	mov	r2, r8
   2b604:	mov	r3, r6
   2b608:	ldr	r1, [r0, #12]
   2b60c:	mov	r0, r4
   2b610:	str	r9, [sp]
   2b614:	bl	d4c8 <ReadCompressedUInt64Data>
   2b618:	cmp	r7, #0
   2b61c:	addne	r0, r0, #4
   2b620:	asr	r1, r0, #31
   2b624:	add	r1, r0, r1, lsr #29
   2b628:	bic	r1, r1, #7
   2b62c:	subs	r0, r0, r1
   2b630:	beq	2b648 <Mat_VarReadNumeric5+0x468>
   2b634:	ldr	r1, [r5, #52]	; 0x34
   2b638:	rsb	r2, r0, #8
   2b63c:	mov	r0, r4
   2b640:	ldr	r1, [r1, #12]
   2b644:	bl	23b4 <InflateSkip>
   2b648:	sub	sp, fp, #24
   2b64c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0002b650 <Mat_VarReadData5>:
   2b650:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b654:	add	fp, sp, #28
   2b658:	sub	sp, sp, #92	; 0x5c
   2b65c:	mov	r4, r1
   2b660:	ldr	r1, [r1, #52]	; 0x34
   2b664:	mov	r8, r0
   2b668:	ldr	r0, [r0]
   2b66c:	str	r2, [sp, #24]
   2b670:	mov	r2, #0
   2b674:	mov	r9, r3
   2b678:	mov	r6, #0
   2b67c:	ldr	r1, [r1]
   2b680:	bl	1a2c <fseek@plt>
   2b684:	ldr	r0, [r4, #48]	; 0x30
   2b688:	ldr	sl, [fp, #12]
   2b68c:	ldr	r7, [fp, #8]
   2b690:	cmp	r0, #1
   2b694:	beq	2b710 <Mat_VarReadData5+0xc0>
   2b698:	cmp	r0, #0
   2b69c:	bne	2b894 <Mat_VarReadData5+0x244>
   2b6a0:	ldr	r3, [r8]
   2b6a4:	sub	r5, fp, #36	; 0x24
   2b6a8:	mov	r1, #4
   2b6ac:	mov	r2, #2
   2b6b0:	mov	r0, r5
   2b6b4:	bl	18b8 <fread@plt>
   2b6b8:	ldr	r0, [r8, #20]
   2b6bc:	cmp	r0, #0
   2b6c0:	beq	2b6d4 <Mat_VarReadData5+0x84>
   2b6c4:	mov	r0, r5
   2b6c8:	bl	1bf0 <Mat_int32Swap>
   2b6cc:	add	r0, r5, #4
   2b6d0:	bl	1bf0 <Mat_int32Swap>
   2b6d4:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2b6d8:	uxtb	r1, r0
   2b6dc:	cmp	r1, #25
   2b6e0:	movcs	r1, #0
   2b6e4:	cmp	r0, #65536	; 0x10000
   2b6e8:	str	r1, [r4, #8]
   2b6ec:	bcc	2b88c <Mat_VarReadData5+0x23c>
   2b6f0:	ldr	r0, [r8]
   2b6f4:	mvn	r1, #3
   2b6f8:	mov	r2, #1
   2b6fc:	bl	1a2c <fseek@plt>
   2b700:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2b704:	mov	r1, #4
   2b708:	add	r6, r1, r0, asr #16
   2b70c:	b	2b894 <Mat_VarReadData5+0x244>
   2b710:	ldr	r0, [r4, #52]	; 0x34
   2b714:	ldr	r6, [r0, #16]
   2b718:	cmp	r6, #0
   2b71c:	beq	2b7a0 <Mat_VarReadData5+0x150>
   2b720:	ldr	r0, [r4, #20]
   2b724:	cmp	r0, #0
   2b728:	beq	2b7d8 <Mat_VarReadData5+0x188>
   2b72c:	ldr	r0, [sp, #24]
   2b730:	ldr	r5, [r4, #32]
   2b734:	ldr	r1, [r0]
   2b738:	ldr	r0, [r6]
   2b73c:	ldm	r4, {ip, lr}
   2b740:	ldr	r3, [r4, #8]
   2b744:	ldr	r2, [r4, #16]
   2b748:	stm	sp, {r5, r9}
   2b74c:	add	r5, sp, #8
   2b750:	stm	r5, {r7, sl, lr}
   2b754:	str	ip, [sp, #20]
   2b758:	bl	2be7c <GetDataSlab>
   2b75c:	mov	r5, r0
   2b760:	cmp	r0, #0
   2b764:	bne	2bc40 <Mat_VarReadData5+0x5f0>
   2b768:	ldr	r0, [sp, #24]
   2b76c:	mov	ip, r7
   2b770:	ldr	r7, [r4, #32]
   2b774:	ldr	r5, [r4, #4]
   2b778:	ldr	r3, [r4, #8]
   2b77c:	ldr	r2, [r4, #16]
   2b780:	ldr	r1, [r0, #4]
   2b784:	ldr	r0, [r6, #4]
   2b788:	ldr	r6, [r4]
   2b78c:	stm	sp, {r7, r9, ip}
   2b790:	str	sl, [sp, #12]
   2b794:	str	r5, [sp, #16]
   2b798:	str	r6, [sp, #20]
   2b79c:	b	2b804 <Mat_VarReadData5+0x1b4>
   2b7a0:	ldr	r1, [r0, #12]
   2b7a4:	add	r0, sp, #28
   2b7a8:	bl	1948 <inflateCopy@plt>
   2b7ac:	cmp	r0, #0
   2b7b0:	beq	2b818 <Mat_VarReadData5+0x1c8>
   2b7b4:	bl	1888 <zError@plt>
   2b7b8:	mov	r1, r0
   2b7bc:	ldr	r0, [pc, #1708]	; 2be70 <Mat_VarReadData5+0x820>
   2b7c0:	add	r0, pc, r0
   2b7c4:	bl	19b4 <Mat_Critical@plt>
   2b7c8:	mvn	r5, #0
   2b7cc:	mov	r0, r5
   2b7d0:	sub	sp, fp, #28
   2b7d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b7d8:	ldr	r0, [r4, #32]
   2b7dc:	ldm	r4, {r1, r5}
   2b7e0:	ldr	r3, [r4, #8]
   2b7e4:	ldr	r2, [r4, #16]
   2b7e8:	stm	sp, {r0, r9}
   2b7ec:	str	r1, [sp, #20]
   2b7f0:	mov	r0, r6
   2b7f4:	str	r7, [sp, #8]
   2b7f8:	str	sl, [sp, #12]
   2b7fc:	str	r5, [sp, #16]
   2b800:	ldr	r1, [sp, #24]
   2b804:	bl	2be7c <GetDataSlab>
   2b808:	mov	r5, r0
   2b80c:	mov	r0, r5
   2b810:	sub	sp, fp, #28
   2b814:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b818:	sub	r5, fp, #36	; 0x24
   2b81c:	mov	r6, #0
   2b820:	add	r1, sp, #28
   2b824:	mov	r0, r8
   2b828:	mov	r2, r5
   2b82c:	str	r6, [sp, #32]
   2b830:	bl	31bc <InflateDataType>
   2b834:	ldr	r0, [r8, #20]
   2b838:	cmp	r0, #0
   2b83c:	beq	2b848 <Mat_VarReadData5+0x1f8>
   2b840:	sub	r0, fp, #36	; 0x24
   2b844:	bl	1bf0 <Mat_int32Swap>
   2b848:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2b84c:	uxtb	r1, r0
   2b850:	cmp	r1, #25
   2b854:	movcs	r1, r6
   2b858:	cmp	r6, r0, lsr #16
   2b85c:	str	r1, [r4, #8]
   2b860:	bne	2b704 <Mat_VarReadData5+0xb4>
   2b864:	add	r5, r5, #4
   2b868:	add	r1, sp, #28
   2b86c:	mov	r0, r8
   2b870:	mov	r2, r5
   2b874:	bl	31bc <InflateDataType>
   2b878:	ldr	r0, [r8, #20]
   2b87c:	cmp	r0, #0
   2b880:	beq	2b88c <Mat_VarReadData5+0x23c>
   2b884:	mov	r0, r5
   2b888:	bl	1bf0 <Mat_int32Swap>
   2b88c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2b890:	add	r6, r0, #8
   2b894:	asr	r0, r6, #31
   2b898:	add	r0, r6, r0, lsr #29
   2b89c:	bic	r0, r0, #7
   2b8a0:	subs	r0, r6, r0
   2b8a4:	rsb	r0, r0, #8
   2b8a8:	addne	r6, r6, r0
   2b8ac:	ldr	r0, [r4, #4]
   2b8b0:	cmp	r0, #2
   2b8b4:	bne	2b9fc <Mat_VarReadData5+0x3ac>
   2b8b8:	ldr	r2, [sl]
   2b8bc:	ldr	r0, [r9]
   2b8c0:	ldr	r1, [r7]
   2b8c4:	mov	r5, #1
   2b8c8:	sub	r2, r2, #1
   2b8cc:	mla	r0, r2, r1, r0
   2b8d0:	add	r1, r0, #1
   2b8d4:	ldr	r0, [r4, #32]
   2b8d8:	ldr	r2, [r0]
   2b8dc:	cmp	r1, r2
   2b8e0:	bhi	2bc40 <Mat_VarReadData5+0x5f0>
   2b8e4:	ldr	r3, [sl, #4]
   2b8e8:	ldr	r1, [r9, #4]
   2b8ec:	ldr	r2, [r7, #4]
   2b8f0:	sub	r3, r3, #1
   2b8f4:	mla	r1, r3, r2, r1
   2b8f8:	ldr	r2, [r0, #4]
   2b8fc:	add	r1, r1, #1
   2b900:	cmp	r1, r2
   2b904:	bhi	2bc40 <Mat_VarReadData5+0x5f0>
   2b908:	ldr	r1, [r4, #48]	; 0x30
   2b90c:	cmp	r1, #1
   2b910:	beq	2bca4 <Mat_VarReadData5+0x654>
   2b914:	cmp	r1, #0
   2b918:	bne	2be48 <Mat_VarReadData5+0x7f8>
   2b91c:	ldr	r1, [r4, #20]
   2b920:	cmp	r1, #0
   2b924:	beq	2bde8 <Mat_VarReadData5+0x798>
   2b928:	ldr	r1, [sp, #24]
   2b92c:	ldr	r3, [r4, #8]
   2b930:	ldr	r2, [r4, #16]
   2b934:	ldr	r1, [r1]
   2b938:	stm	sp, {r0, r9}
   2b93c:	mov	r0, r8
   2b940:	str	r7, [sp, #8]
   2b944:	str	sl, [sp, #12]
   2b948:	bl	26558 <ReadDataSlab2>
   2b94c:	ldr	r0, [r4, #52]	; 0x34
   2b950:	mov	r2, #0
   2b954:	mov	r5, #0
   2b958:	ldr	r0, [r0]
   2b95c:	add	r1, r0, r6
   2b960:	ldr	r0, [r8]
   2b964:	bl	1a2c <fseek@plt>
   2b968:	ldr	r3, [r8]
   2b96c:	sub	r6, fp, #36	; 0x24
   2b970:	mov	r1, #4
   2b974:	mov	r2, #2
   2b978:	mov	r0, r6
   2b97c:	bl	18b8 <fread@plt>
   2b980:	ldr	r0, [r8, #20]
   2b984:	cmp	r0, #0
   2b988:	beq	2b99c <Mat_VarReadData5+0x34c>
   2b98c:	mov	r0, r6
   2b990:	bl	1bf0 <Mat_int32Swap>
   2b994:	add	r0, r6, #4
   2b998:	bl	1bf0 <Mat_int32Swap>
   2b99c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2b9a0:	uxtb	r1, r0
   2b9a4:	cmp	r1, #25
   2b9a8:	movcc	r5, r1
   2b9ac:	cmp	r0, #65536	; 0x10000
   2b9b0:	str	r5, [r4, #8]
   2b9b4:	bcc	2b9cc <Mat_VarReadData5+0x37c>
   2b9b8:	ldr	r0, [r8]
   2b9bc:	mvn	r1, #3
   2b9c0:	mov	r2, #1
   2b9c4:	bl	1a2c <fseek@plt>
   2b9c8:	ldr	r5, [r4, #8]
   2b9cc:	ldr	r0, [sp, #24]
   2b9d0:	ldr	r2, [r4, #16]
   2b9d4:	mov	r3, r5
   2b9d8:	ldr	r1, [r0, #4]
   2b9dc:	ldr	r0, [r4, #32]
   2b9e0:	stm	sp, {r0, r9}
   2b9e4:	ldr	r0, [fp, #8]
   2b9e8:	str	sl, [sp, #12]
   2b9ec:	str	r0, [sp, #8]
   2b9f0:	mov	r0, r8
   2b9f4:	bl	26558 <ReadDataSlab2>
   2b9f8:	b	2be48 <Mat_VarReadData5+0x7f8>
   2b9fc:	ldr	r1, [r4, #48]	; 0x30
   2ba00:	cmp	r1, #1
   2ba04:	beq	2baf8 <Mat_VarReadData5+0x4a8>
   2ba08:	cmp	r1, #0
   2ba0c:	bne	2be48 <Mat_VarReadData5+0x7f8>
   2ba10:	ldr	r1, [r4, #20]
   2ba14:	cmp	r1, #0
   2ba18:	beq	2bc4c <Mat_VarReadData5+0x5fc>
   2ba1c:	ldr	r1, [sp, #24]
   2ba20:	ldr	r5, [r4, #32]
   2ba24:	ldr	r3, [r4, #8]
   2ba28:	ldr	r2, [r4, #16]
   2ba2c:	ldr	r1, [r1]
   2ba30:	stm	sp, {r0, r5, r9}
   2ba34:	mov	r0, r8
   2ba38:	str	r7, [sp, #12]
   2ba3c:	str	sl, [sp, #16]
   2ba40:	bl	1dab0 <ReadDataSlabN>
   2ba44:	ldr	r0, [r4, #52]	; 0x34
   2ba48:	mov	r2, #0
   2ba4c:	mov	r5, #0
   2ba50:	ldr	r0, [r0]
   2ba54:	add	r1, r0, r6
   2ba58:	ldr	r0, [r8]
   2ba5c:	bl	1a2c <fseek@plt>
   2ba60:	ldr	r3, [r8]
   2ba64:	sub	r6, fp, #36	; 0x24
   2ba68:	mov	r1, #4
   2ba6c:	mov	r2, #2
   2ba70:	mov	r0, r6
   2ba74:	bl	18b8 <fread@plt>
   2ba78:	ldr	r0, [r8, #20]
   2ba7c:	cmp	r0, #0
   2ba80:	beq	2ba94 <Mat_VarReadData5+0x444>
   2ba84:	mov	r0, r6
   2ba88:	bl	1bf0 <Mat_int32Swap>
   2ba8c:	add	r0, r6, #4
   2ba90:	bl	1bf0 <Mat_int32Swap>
   2ba94:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2ba98:	uxtb	r1, r0
   2ba9c:	cmp	r1, #25
   2baa0:	movcc	r5, r1
   2baa4:	cmp	r0, #65536	; 0x10000
   2baa8:	str	r5, [r4, #8]
   2baac:	bcc	2bac4 <Mat_VarReadData5+0x474>
   2bab0:	ldr	r0, [r8]
   2bab4:	mvn	r1, #3
   2bab8:	mov	r2, #1
   2babc:	bl	1a2c <fseek@plt>
   2bac0:	ldr	r5, [r4, #8]
   2bac4:	ldr	r0, [sp, #24]
   2bac8:	ldr	r3, [r4, #32]
   2bacc:	ldr	r2, [r4, #16]
   2bad0:	ldr	r1, [r0, #4]
   2bad4:	ldr	r0, [r4, #4]
   2bad8:	stm	sp, {r0, r3, r9}
   2badc:	ldr	r0, [fp, #8]
   2bae0:	mov	r3, r5
   2bae4:	str	sl, [sp, #16]
   2bae8:	str	r0, [sp, #12]
   2baec:	mov	r0, r8
   2baf0:	bl	1dab0 <ReadDataSlabN>
   2baf4:	b	2be48 <Mat_VarReadData5+0x7f8>
   2baf8:	ldr	r1, [r4, #20]
   2bafc:	cmp	r1, #0
   2bb00:	beq	2bc74 <Mat_VarReadData5+0x624>
   2bb04:	ldr	r1, [sp, #24]
   2bb08:	ldr	r5, [r4, #32]
   2bb0c:	ldr	r3, [r4, #16]
   2bb10:	ldr	r2, [r1]
   2bb14:	ldr	r1, [r4, #8]
   2bb18:	str	r1, [sp]
   2bb1c:	stmib	sp, {r0, r5, r9}
   2bb20:	add	r5, sp, #28
   2bb24:	mov	r0, r8
   2bb28:	str	r7, [sp, #16]
   2bb2c:	str	sl, [sp, #20]
   2bb30:	mov	r1, r5
   2bb34:	bl	21a78 <ReadCompressedDataSlabN>
   2bb38:	ldr	r1, [r4, #52]	; 0x34
   2bb3c:	ldr	r0, [r8]
   2bb40:	mov	r2, #0
   2bb44:	mov	r7, #0
   2bb48:	ldr	r1, [r1]
   2bb4c:	bl	1a2c <fseek@plt>
   2bb50:	mov	r0, r5
   2bb54:	bl	193c <inflateEnd@plt>
   2bb58:	ldr	r0, [r4, #52]	; 0x34
   2bb5c:	ldr	r1, [r0, #12]
   2bb60:	mov	r0, r5
   2bb64:	bl	1948 <inflateCopy@plt>
   2bb68:	mov	r5, r0
   2bb6c:	cmp	r0, #0
   2bb70:	beq	2bb8c <Mat_VarReadData5+0x53c>
   2bb74:	mov	r0, r5
   2bb78:	bl	1888 <zError@plt>
   2bb7c:	mov	r1, r0
   2bb80:	ldr	r0, [pc, #752]	; 2be78 <Mat_VarReadData5+0x828>
   2bb84:	add	r0, pc, r0
   2bb88:	bl	19b4 <Mat_Critical@plt>
   2bb8c:	add	sl, sp, #28
   2bb90:	mov	r0, r8
   2bb94:	mov	r2, r6
   2bb98:	mov	r1, sl
   2bb9c:	bl	23b4 <InflateSkip>
   2bba0:	sub	r2, fp, #36	; 0x24
   2bba4:	mov	r0, r8
   2bba8:	mov	r1, sl
   2bbac:	str	r7, [sp, #32]
   2bbb0:	bl	31bc <InflateDataType>
   2bbb4:	ldr	r0, [r8, #20]
   2bbb8:	cmp	r0, #0
   2bbbc:	beq	2bbc8 <Mat_VarReadData5+0x578>
   2bbc0:	sub	r0, fp, #36	; 0x24
   2bbc4:	bl	1bf0 <Mat_int32Swap>
   2bbc8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2bbcc:	ldr	sl, [fp, #12]
   2bbd0:	mov	r2, #0
   2bbd4:	uxtb	r0, r1
   2bbd8:	cmp	r0, #25
   2bbdc:	movcs	r0, r2
   2bbe0:	cmp	r2, r1, lsr #16
   2bbe4:	str	r0, [r4, #8]
   2bbe8:	bne	2bc00 <Mat_VarReadData5+0x5b0>
   2bbec:	add	r1, sp, #28
   2bbf0:	mov	r0, r8
   2bbf4:	mov	r2, #4
   2bbf8:	bl	23b4 <InflateSkip>
   2bbfc:	ldr	r0, [r4, #8]
   2bc00:	ldr	r1, [sp, #24]
   2bc04:	ldr	r6, [r4, #32]
   2bc08:	ldr	r3, [r4, #16]
   2bc0c:	ldr	r2, [r1, #4]
   2bc10:	ldr	r1, [r4, #4]
   2bc14:	stm	sp, {r0, r1, r6, r9}
   2bc18:	ldr	r0, [fp, #8]
   2bc1c:	add	r1, sp, #28
   2bc20:	str	sl, [sp, #20]
   2bc24:	str	r0, [sp, #16]
   2bc28:	mov	r0, r8
   2bc2c:	bl	21a78 <ReadCompressedDataSlabN>
   2bc30:	add	r0, sp, #28
   2bc34:	bl	193c <inflateEnd@plt>
   2bc38:	cmp	r5, #0
   2bc3c:	beq	2be48 <Mat_VarReadData5+0x7f8>
   2bc40:	mov	r0, r5
   2bc44:	sub	sp, fp, #28
   2bc48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bc4c:	ldr	r1, [r4, #32]
   2bc50:	ldr	r3, [r4, #8]
   2bc54:	ldr	r2, [r4, #16]
   2bc58:	stm	sp, {r0, r1, r9}
   2bc5c:	mov	r0, r8
   2bc60:	str	r7, [sp, #12]
   2bc64:	str	sl, [sp, #16]
   2bc68:	ldr	r1, [sp, #24]
   2bc6c:	bl	1dab0 <ReadDataSlabN>
   2bc70:	b	2be48 <Mat_VarReadData5+0x7f8>
   2bc74:	ldr	r1, [r4, #8]
   2bc78:	ldr	r2, [r4, #32]
   2bc7c:	ldr	r3, [r4, #16]
   2bc80:	str	r1, [sp]
   2bc84:	stmib	sp, {r0, r2, r9}
   2bc88:	add	r1, sp, #28
   2bc8c:	mov	r0, r8
   2bc90:	str	r7, [sp, #16]
   2bc94:	str	sl, [sp, #20]
   2bc98:	ldr	r2, [sp, #24]
   2bc9c:	bl	21a78 <ReadCompressedDataSlabN>
   2bca0:	b	2be34 <Mat_VarReadData5+0x7e4>
   2bca4:	ldr	r1, [r4, #20]
   2bca8:	cmp	r1, #0
   2bcac:	beq	2be0c <Mat_VarReadData5+0x7bc>
   2bcb0:	ldr	r1, [sp, #24]
   2bcb4:	ldr	r3, [r4, #16]
   2bcb8:	add	r5, sp, #28
   2bcbc:	ldr	r2, [r1]
   2bcc0:	ldr	r1, [r4, #8]
   2bcc4:	str	r1, [sp]
   2bcc8:	stmib	sp, {r0, r9}
   2bccc:	mov	r0, r8
   2bcd0:	mov	r1, r5
   2bcd4:	str	r7, [sp, #12]
   2bcd8:	str	sl, [sp, #16]
   2bcdc:	bl	27ba4 <ReadCompressedDataSlab2>
   2bce0:	ldr	r1, [r4, #52]	; 0x34
   2bce4:	ldr	r0, [r8]
   2bce8:	mov	r2, #0
   2bcec:	mov	r7, #0
   2bcf0:	ldr	r1, [r1]
   2bcf4:	bl	1a2c <fseek@plt>
   2bcf8:	mov	r0, r5
   2bcfc:	bl	193c <inflateEnd@plt>
   2bd00:	ldr	r0, [r4, #52]	; 0x34
   2bd04:	ldr	r1, [r0, #12]
   2bd08:	mov	r0, r5
   2bd0c:	bl	1948 <inflateCopy@plt>
   2bd10:	mov	r5, r0
   2bd14:	cmp	r0, #0
   2bd18:	beq	2bd34 <Mat_VarReadData5+0x6e4>
   2bd1c:	mov	r0, r5
   2bd20:	bl	1888 <zError@plt>
   2bd24:	mov	r1, r0
   2bd28:	ldr	r0, [pc, #324]	; 2be74 <Mat_VarReadData5+0x824>
   2bd2c:	add	r0, pc, r0
   2bd30:	bl	19b4 <Mat_Critical@plt>
   2bd34:	add	sl, sp, #28
   2bd38:	mov	r0, r8
   2bd3c:	mov	r2, r6
   2bd40:	mov	r1, sl
   2bd44:	bl	23b4 <InflateSkip>
   2bd48:	sub	r2, fp, #36	; 0x24
   2bd4c:	mov	r0, r8
   2bd50:	mov	r1, sl
   2bd54:	str	r7, [sp, #32]
   2bd58:	bl	31bc <InflateDataType>
   2bd5c:	ldr	r0, [r8, #20]
   2bd60:	cmp	r0, #0
   2bd64:	beq	2bd70 <Mat_VarReadData5+0x720>
   2bd68:	sub	r0, fp, #36	; 0x24
   2bd6c:	bl	1bf0 <Mat_int32Swap>
   2bd70:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2bd74:	ldr	r6, [fp, #12]
   2bd78:	mov	r2, #0
   2bd7c:	uxtb	r0, r1
   2bd80:	cmp	r0, #25
   2bd84:	movcs	r0, r2
   2bd88:	cmp	r2, r1, lsr #16
   2bd8c:	str	r0, [r4, #8]
   2bd90:	bne	2bda8 <Mat_VarReadData5+0x758>
   2bd94:	add	r1, sp, #28
   2bd98:	mov	r0, r8
   2bd9c:	mov	r2, #4
   2bda0:	bl	23b4 <InflateSkip>
   2bda4:	ldr	r0, [r4, #8]
   2bda8:	ldr	r1, [sp, #24]
   2bdac:	ldr	r3, [r4, #16]
   2bdb0:	ldr	r2, [r1, #4]
   2bdb4:	ldr	r1, [r4, #32]
   2bdb8:	stm	sp, {r0, r1, r9}
   2bdbc:	ldr	r0, [fp, #8]
   2bdc0:	add	r1, sp, #28
   2bdc4:	str	r6, [sp, #16]
   2bdc8:	str	r0, [sp, #12]
   2bdcc:	mov	r0, r8
   2bdd0:	bl	27ba4 <ReadCompressedDataSlab2>
   2bdd4:	add	r0, sp, #28
   2bdd8:	bl	193c <inflateEnd@plt>
   2bddc:	cmp	r5, #0
   2bde0:	bne	2bc40 <Mat_VarReadData5+0x5f0>
   2bde4:	b	2be48 <Mat_VarReadData5+0x7f8>
   2bde8:	ldr	r3, [r4, #8]
   2bdec:	ldr	r2, [r4, #16]
   2bdf0:	stm	sp, {r0, r9}
   2bdf4:	mov	r0, r8
   2bdf8:	str	r7, [sp, #8]
   2bdfc:	str	sl, [sp, #12]
   2be00:	ldr	r1, [sp, #24]
   2be04:	bl	26558 <ReadDataSlab2>
   2be08:	b	2be48 <Mat_VarReadData5+0x7f8>
   2be0c:	ldr	r1, [r4, #8]
   2be10:	ldr	r3, [r4, #16]
   2be14:	str	r1, [sp]
   2be18:	stmib	sp, {r0, r9}
   2be1c:	add	r1, sp, #28
   2be20:	mov	r0, r8
   2be24:	str	r7, [sp, #12]
   2be28:	str	sl, [sp, #16]
   2be2c:	ldr	r2, [sp, #24]
   2be30:	bl	27ba4 <ReadCompressedDataSlab2>
   2be34:	mov	r5, #0
   2be38:	add	r0, sp, #28
   2be3c:	bl	193c <inflateEnd@plt>
   2be40:	cmp	r5, #0
   2be44:	bne	2bc40 <Mat_VarReadData5+0x5f0>
   2be48:	ldr	r0, [r4, #16]
   2be4c:	bl	5a124 <ClassType2DataType>
   2be50:	str	r0, [r4, #8]
   2be54:	ldr	r0, [r4, #16]
   2be58:	bl	1a08 <Mat_SizeOfClass@plt>
   2be5c:	mov	r5, #0
   2be60:	str	r0, [r4, #12]
   2be64:	mov	r0, r5
   2be68:	sub	sp, fp, #28
   2be6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2be70:	.word	0x0003424f
   2be74:	.word	0x00033ce3
   2be78:	.word	0x00033e8b

0002be7c <GetDataSlab>:
   2be7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2be80:	add	fp, sp, #28
   2be84:	sub	sp, sp, #4
   2be88:	vpush	{d8-d9}
   2be8c:	sub	sp, sp, #440	; 0x1b8
   2be90:	mov	r9, r3
   2be94:	cmp	r2, #6
   2be98:	str	r0, [sp, #56]	; 0x38
   2be9c:	cmpeq	r9, #9
   2bea0:	beq	2bf14 <GetDataSlab+0x98>
   2bea4:	cmp	r2, #7
   2bea8:	cmpeq	r9, #7
   2beac:	beq	2bf14 <GetDataSlab+0x98>
   2beb0:	cmp	r2, #10
   2beb4:	cmpeq	r9, #3
   2beb8:	beq	2bf14 <GetDataSlab+0x98>
   2bebc:	cmp	r2, #12
   2bec0:	cmpeq	r9, #5
   2bec4:	beq	2bf14 <GetDataSlab+0x98>
   2bec8:	cmp	r2, #14
   2becc:	cmpeq	r9, #12
   2bed0:	beq	2bf14 <GetDataSlab+0x98>
   2bed4:	cmp	r2, #8
   2bed8:	cmpeq	r9, #1
   2bedc:	beq	2bf14 <GetDataSlab+0x98>
   2bee0:	cmp	r2, #11
   2bee4:	cmpeq	r9, #4
   2bee8:	beq	2bf14 <GetDataSlab+0x98>
   2beec:	cmp	r2, #13
   2bef0:	cmpeq	r9, #6
   2bef4:	beq	2bf14 <GetDataSlab+0x98>
   2bef8:	cmp	r2, #15
   2befc:	cmpeq	r9, #13
   2bf00:	beq	2bf14 <GetDataSlab+0x98>
   2bf04:	cmp	r2, #9
   2bf08:	mov	sl, #0
   2bf0c:	cmpeq	r9, #2
   2bf10:	bne	2bf18 <GetDataSlab+0x9c>
   2bf14:	mov	sl, #1
   2bf18:	add	ip, fp, #8
   2bf1c:	ldr	r0, [fp, #24]
   2bf20:	ldr	r4, [fp, #20]
   2bf24:	ldm	ip, {r5, r8, ip}
   2bf28:	str	r1, [sp, #68]	; 0x44
   2bf2c:	cmp	r0, #2
   2bf30:	bne	2c204 <GetDataSlab+0x388>
   2bf34:	ldr	r1, [r4]
   2bf38:	ldr	r7, [r8]
   2bf3c:	ldr	lr, [ip]
   2bf40:	ldr	r3, [r5]
   2bf44:	str	r9, [sp, #40]	; 0x28
   2bf48:	mov	r0, r1
   2bf4c:	str	r1, [sp, #60]	; 0x3c
   2bf50:	mov	r6, r3
   2bf54:	str	r3, [sp, #44]	; 0x2c
   2bf58:	sub	r0, r1, #1
   2bf5c:	mla	r0, r0, lr, r7
   2bf60:	add	r1, r0, #1
   2bf64:	mov	r0, #1
   2bf68:	cmp	r1, r3
   2bf6c:	bhi	2e97c <GetDataSlab+0x2b00>
   2bf70:	ldr	r6, [r4, #4]!
   2bf74:	ldr	r3, [ip, #4]!
   2bf78:	ldr	r9, [r8, #4]
   2bf7c:	ldr	r5, [r5, #4]
   2bf80:	str	r7, [sp, #24]
   2bf84:	mov	r1, r6
   2bf88:	str	r6, [sp, #52]	; 0x34
   2bf8c:	sub	r6, r6, #1
   2bf90:	str	ip, [sp, #36]	; 0x24
   2bf94:	str	r4, [sp, #32]
   2bf98:	str	r3, [sp, #48]	; 0x30
   2bf9c:	str	r9, [sp, #28]
   2bfa0:	mla	r6, r6, r3, r9
   2bfa4:	add	r6, r6, #1
   2bfa8:	cmp	r6, r5
   2bfac:	bhi	2e97c <GetDataSlab+0x2b00>
   2bfb0:	cmp	lr, #1
   2bfb4:	mov	r9, lr
   2bfb8:	ldreq	r5, [sp, #60]	; 0x3c
   2bfbc:	ldreq	r1, [sp, #44]	; 0x2c
   2bfc0:	cmpeq	r5, r1
   2bfc4:	beq	2e954 <GetDataSlab+0x2ad8>
   2bfc8:	ldr	ip, [sp, #44]	; 0x2c
   2bfcc:	ldr	lr, [fp, #16]
   2bfd0:	ldr	sl, [fp, #20]
   2bfd4:	sub	r2, r2, #6
   2bfd8:	cmp	r2, #9
   2bfdc:	bhi	2e97c <GetDataSlab+0x2b00>
   2bfe0:	add	r0, pc, #4
   2bfe4:	ldr	r2, [r0, r2, lsl #2]
   2bfe8:	add	pc, r0, r2
   2bfec:	.word	0x00000028
   2bff0:	.word	0x000029a0
   2bff4:	.word	0x00002b7c
   2bff8:	.word	0x00002c88
   2bffc:	.word	0x00002d94
   2c000:	.word	0x00002f78
   2c004:	.word	0x0000315c
   2c008:	.word	0x00003270
   2c00c:	.word	0x00003384
   2c010:	.word	0x0000356c
   2c014:	ldr	r0, [sp, #40]	; 0x28
   2c018:	sub	r1, r0, #1
   2c01c:	mov	r0, #1
   2c020:	cmp	r1, #11
   2c024:	bhi	524bc <GetDataSlab+0x26640>
   2c028:	add	r2, pc, #8
   2c02c:	ldr	r5, [sp, #68]	; 0x44
   2c030:	ldr	r1, [r2, r1, lsl #2]
   2c034:	add	pc, r2, r1
   2c038:	.word	0x00000030
   2c03c:	.word	0x00020804
   2c040:	.word	0x000209a0
   2c044:	.word	0x00020ac0
   2c048:	.word	0x00020be0
   2c04c:	.word	0x00020cec
   2c050:	.word	0x00020df8
   2c054:	.word	0x00026488
   2c058:	.word	0x00020f04
   2c05c:	.word	0x00026488
   2c060:	.word	0x00026488
   2c064:	.word	0x00021070
   2c068:	ldr	r1, [sp, #52]	; 0x34
   2c06c:	mov	r0, #0
   2c070:	cmp	r1, #1
   2c074:	ldrge	r1, [sp, #60]	; 0x3c
   2c078:	cmpge	r1, #1
   2c07c:	blt	2e97c <GetDataSlab+0x2b00>
   2c080:	ldr	r0, [sp, #48]	; 0x30
   2c084:	ldr	r2, [sp, #28]
   2c088:	ldr	r3, [sp, #24]
   2c08c:	ldr	lr, [sp, #68]	; 0x44
   2c090:	ldr	r7, [sp, #56]	; 0x38
   2c094:	mov	r6, #0
   2c098:	add	r4, sp, #80	; 0x50
   2c09c:	mul	r0, r0, ip
   2c0a0:	mla	r1, r2, ip, r3
   2c0a4:	str	r0, [sp, #48]	; 0x30
   2c0a8:	ldr	r0, [sp, #56]	; 0x38
   2c0ac:	str	r1, [sp, #32]
   2c0b0:	add	r8, r0, r1
   2c0b4:	ldr	r0, [sp, #60]	; 0x3c
   2c0b8:	mov	r1, r0
   2c0bc:	add	r0, r0, r3
   2c0c0:	mla	r0, r2, ip, r0
   2c0c4:	cmp	r1, #1
   2c0c8:	mov	r2, #0
   2c0cc:	str	r0, [sp, #40]	; 0x28
   2c0d0:	sub	r0, r9, #1
   2c0d4:	movwhi	r2, #1
   2c0d8:	clz	r0, r0
   2c0dc:	lsr	r0, r0, #5
   2c0e0:	and	r0, r2, r0
   2c0e4:	lsl	r2, r9, #1
   2c0e8:	str	r0, [sp, #44]	; 0x2c
   2c0ec:	lsl	r0, r1, #3
   2c0f0:	str	r0, [sp, #64]	; 0x40
   2c0f4:	bic	r0, r1, #1
   2c0f8:	str	r0, [sp, #36]	; 0x24
   2c0fc:	ldr	r0, [sp, #44]	; 0x2c
   2c100:	mov	r5, #0
   2c104:	cmp	r0, #0
   2c108:	mov	r0, lr
   2c10c:	beq	2c1b4 <GetDataSlab+0x338>
   2c110:	ldr	r1, [sp, #64]	; 0x40
   2c114:	ldr	r0, [sp, #48]	; 0x30
   2c118:	mul	r3, r1, r6
   2c11c:	ldr	r1, [sp, #68]	; 0x44
   2c120:	mul	r0, r0, r6
   2c124:	add	r5, r1, r3
   2c128:	ldr	r1, [sp, #40]	; 0x28
   2c12c:	add	r1, r1, r0
   2c130:	add	r1, r7, r1
   2c134:	cmp	r5, r1
   2c138:	bcs	2c16c <GetDataSlab+0x2f0>
   2c13c:	ldr	r1, [sp, #64]	; 0x40
   2c140:	mov	r5, #0
   2c144:	add	r1, r1, r3
   2c148:	ldr	r3, [sp, #68]	; 0x44
   2c14c:	add	r1, r3, r1
   2c150:	ldr	r3, [sp, #32]
   2c154:	add	r0, r3, r0
   2c158:	ldr	r3, [sp, #56]	; 0x38
   2c15c:	add	r0, r3, r0
   2c160:	cmp	r0, r1
   2c164:	mov	r0, lr
   2c168:	bcc	2c1b4 <GetDataSlab+0x338>
   2c16c:	ldr	sl, [sp, #36]	; 0x24
   2c170:	mov	r3, r8
   2c174:	mov	ip, lr
   2c178:	add	r0, lr, sl, lsl #3
   2c17c:	ldrh	r1, [r3], r2
   2c180:	subs	sl, sl, #2
   2c184:	strh	r1, [sp, #80]	; 0x50
   2c188:	vld1.16	{d16[0]}, [r4 :16]
   2c18c:	vmovl.s8	q8, d16
   2c190:	vmovl.s16	q0, d16
   2c194:	vcvt.f64.s32	d17, s1
   2c198:	vcvt.f64.s32	d16, s0
   2c19c:	vst1.64	{d16-d17}, [ip]!
   2c1a0:	bne	2c17c <GetDataSlab+0x300>
   2c1a4:	ldr	r1, [sp, #60]	; 0x3c
   2c1a8:	ldr	r5, [sp, #36]	; 0x24
   2c1ac:	cmp	r1, r5
   2c1b0:	beq	2c1dc <GetDataSlab+0x360>
   2c1b4:	ldr	r1, [sp, #60]	; 0x3c
   2c1b8:	mla	r3, r9, r5, r8
   2c1bc:	sub	r5, r1, r5
   2c1c0:	ldrsb	r1, [r3], r9
   2c1c4:	subs	r5, r5, #1
   2c1c8:	vmov	s0, r1
   2c1cc:	vcvt.f64.s32	d16, s0
   2c1d0:	vstr	d16, [r0]
   2c1d4:	add	r0, r0, #8
   2c1d8:	bne	2c1c0 <GetDataSlab+0x344>
   2c1dc:	ldr	r0, [sp, #48]	; 0x30
   2c1e0:	ldr	r1, [sp, #52]	; 0x34
   2c1e4:	add	r6, r6, #1
   2c1e8:	add	r8, r8, r0
   2c1ec:	ldr	r0, [sp, #64]	; 0x40
   2c1f0:	cmp	r6, r1
   2c1f4:	add	lr, lr, r0
   2c1f8:	mov	r0, #0
   2c1fc:	bne	2c0fc <GetDataSlab+0x280>
   2c200:	b	2e97c <GetDataSlab+0x2b00>
   2c204:	sub	r7, fp, #96	; 0x60
   2c208:	vmov.i32	q8, #0	; 0x00000000
   2c20c:	mov	r0, #36	; 0x24
   2c210:	mov	r3, #0
   2c214:	sub	lr, fp, #176	; 0xb0
   2c218:	mov	r1, r7
   2c21c:	str	r3, [fp, #-64]	; 0xffffffc0
   2c220:	str	r3, [fp, #-104]	; 0xffffff98
   2c224:	str	r3, [fp, #-144]	; 0xffffff70
   2c228:	vst1.64	{d16-d17}, [r1], r0
   2c22c:	str	r3, [r1]
   2c230:	add	r1, r7, #16
   2c234:	sub	r7, fp, #136	; 0x88
   2c238:	vst1.64	{d16-d17}, [r1]
   2c23c:	add	r1, r7, #16
   2c240:	vst1.64	{d16-d17}, [r1]
   2c244:	mov	r1, r7
   2c248:	vst1.64	{d16-d17}, [r1], r0
   2c24c:	str	r3, [r1]
   2c250:	add	r1, lr, #16
   2c254:	vst1.64	{d16-d17}, [r1]
   2c258:	mov	r1, lr
   2c25c:	vst1.64	{d16-d17}, [r1], r0
   2c260:	sub	r0, r2, #6
   2c264:	cmp	r0, #9
   2c268:	str	r3, [r1]
   2c26c:	bhi	2c6d0 <GetDataSlab+0x854>
   2c270:	add	r1, pc, #12
   2c274:	mov	r6, r4
   2c278:	str	r8, [sp, #64]	; 0x40
   2c27c:	ldr	r0, [r1, r0, lsl #2]
   2c280:	add	pc, r1, r0
   2c284:	.word	0x00000028
   2c288:	.word	0x00000460
   2c28c:	.word	0x0000089c
   2c290:	.word	0x00000c0c
   2c294:	.word	0x00000f7c
   2c298:	.word	0x00001384
   2c29c:	.word	0x0000178c
   2c2a0:	.word	0x00001b00
   2c2a4:	.word	0x00001e74
   2c2a8:	.word	0x000022a8
   2c2ac:	sub	r1, r9, #1
   2c2b0:	mov	r0, #1
   2c2b4:	cmp	r1, #11
   2c2b8:	bhi	42188 <GetDataSlab+0x1630c>
   2c2bc:	add	r2, pc, #4
   2c2c0:	ldr	r1, [r2, r1, lsl #2]
   2c2c4:	add	pc, r2, r1
   2c2c8:	.word	0x00000030
   2c2cc:	.word	0x00003478
   2c2d0:	.word	0x00003848
   2c2d4:	.word	0x00003bbc
   2c2d8:	.word	0x00003f30
   2c2dc:	.word	0x00004290
   2c2e0:	.word	0x000045f0
   2c2e4:	.word	0x00015ec0
   2c2e8:	.word	0x00004960
   2c2ec:	.word	0x00015ec0
   2c2f0:	.word	0x00015ec0
   2c2f4:	.word	0x00004cf8
   2c2f8:	ldr	r0, [fp, #16]
   2c2fc:	mov	r7, lr
   2c300:	mov	r5, #0
   2c304:	sub	lr, fp, #96	; 0x60
   2c308:	ldr	r8, [r0]
   2c30c:	sub	r0, r8, #1
   2c310:	str	r0, [fp, #-96]	; 0xffffffa0
   2c314:	ldr	r0, [fp, #8]
   2c318:	ldr	r0, [r0]
   2c31c:	str	r0, [fp, #-176]	; 0xffffff50
   2c320:	str	r0, [sp, #40]	; 0x28
   2c324:	ldr	r0, [fp, #24]
   2c328:	ldr	r1, [r6]
   2c32c:	cmp	r0, #2
   2c330:	str	r1, [sp, #52]	; 0x34
   2c334:	str	r1, [sp, #60]	; 0x3c
   2c338:	blt	2c49c <GetDataSlab+0x620>
   2c33c:	ldr	r0, [fp, #8]
   2c340:	ldr	r3, [sp, #40]	; 0x28
   2c344:	mov	r6, #1
   2c348:	mov	r4, #0
   2c34c:	mvn	r9, #15
   2c350:	mov	r5, #0
   2c354:	mov	r1, r0
   2c358:	sub	r0, r0, #4
   2c35c:	mov	r2, r3
   2c360:	sub	ip, r1, #12
   2c364:	ldr	r1, [sp, #52]	; 0x34
   2c368:	str	r1, [sp, #60]	; 0x3c
   2c36c:	ldr	r1, [fp, #16]
   2c370:	str	r2, [sp, #48]	; 0x30
   2c374:	add	r4, r4, #1
   2c378:	cmp	r4, #4
   2c37c:	ldr	r1, [r1, r6, lsl #2]
   2c380:	str	r3, [r7, r6, lsl #2]
   2c384:	sub	r2, r1, #1
   2c388:	ldr	r1, [fp, #8]
   2c38c:	str	r2, [lr, r6, lsl #2]
   2c390:	ldr	lr, [r1, r6, lsl #2]
   2c394:	bcs	2c3a8 <GetDataSlab+0x52c>
   2c398:	mov	sl, lr
   2c39c:	mov	r1, lr
   2c3a0:	mov	r7, r6
   2c3a4:	b	2c438 <GetDataSlab+0x5bc>
   2c3a8:	vmov.i32	q9, #1	; 0x00000001
   2c3ac:	vmov.i32	q10, #1	; 0x00000001
   2c3b0:	vmov.i32	q8, #1	; 0x00000001
   2c3b4:	bic	r1, r4, #3
   2c3b8:	bic	sl, r6, #3
   2c3bc:	vmov.32	d23[1], lr
   2c3c0:	vmov.32	d18[0], r3
   2c3c4:	vmov.32	d20[0], r2
   2c3c8:	str	r1, [sp, #44]	; 0x2c
   2c3cc:	sub	r7, r6, r1
   2c3d0:	mov	r1, ip
   2c3d4:	vorr	d16, d18, d18
   2c3d8:	vmov.i32	q9, #1	; 0x00000001
   2c3dc:	vorr	d18, d20, d20
   2c3e0:	vld1.32	{d20-d21}, [r1], r9
   2c3e4:	subs	sl, sl, #4
   2c3e8:	vrev64.32	q12, q10
   2c3ec:	vext.8	q12, q12, q12, #8
   2c3f0:	vext.8	q11, q11, q12, #12
   2c3f4:	vmul.i32	q9, q9, q12
   2c3f8:	vmul.i32	q8, q11, q8
   2c3fc:	vorr	q11, q12, q12
   2c400:	bne	2c3e0 <GetDataSlab+0x564>
   2c404:	ldr	r1, [sp, #44]	; 0x2c
   2c408:	vext.8	q11, q9, q8, #8
   2c40c:	vext.8	q12, q8, q8, #8
   2c410:	mov	sl, lr
   2c414:	vmul.i32	q0, q9, q11
   2c418:	vmul.i32	q1, q8, q12
   2c41c:	vmul.i32	q8, q0, d0[1]
   2c420:	vmul.i32	q9, q1, d2[1]
   2c424:	vmov.32	r2, d16[0]
   2c428:	vmov.32	r3, d18[0]
   2c42c:	cmp	r4, r1
   2c430:	beq	2c44c <GetDataSlab+0x5d0>
   2c434:	vmov.32	r1, d20[0]
   2c438:	mul	r3, r1, r3
   2c43c:	ldr	r1, [r0, r7, lsl #2]
   2c440:	subs	r7, r7, #1
   2c444:	mul	r2, r2, r1
   2c448:	bne	2c438 <GetDataSlab+0x5bc>
   2c44c:	ldr	r1, [fp, #12]
   2c450:	sub	r7, fp, #176	; 0xb0
   2c454:	sub	lr, fp, #96	; 0x60
   2c458:	add	ip, ip, #4
   2c45c:	str	r2, [lr, r6, lsl #2]
   2c460:	str	r3, [r7, r6, lsl #2]
   2c464:	ldr	r2, [sp, #48]	; 0x30
   2c468:	ldr	r1, [r1, r6, lsl #2]
   2c46c:	mla	r5, r1, r2, r5
   2c470:	ldr	r1, [fp, #20]
   2c474:	ldr	r2, [sp, #60]	; 0x3c
   2c478:	ldr	r1, [r1, r6, lsl #2]
   2c47c:	add	r6, r6, #1
   2c480:	mul	r2, r1, r2
   2c484:	ldr	r1, [fp, #24]
   2c488:	str	r2, [sp, #60]	; 0x3c
   2c48c:	mov	r2, r3
   2c490:	mov	r3, sl
   2c494:	cmp	r6, r1
   2c498:	bne	2c36c <GetDataSlab+0x4f0>
   2c49c:	ldr	r0, [sp, #56]	; 0x38
   2c4a0:	cmp	r8, #1
   2c4a4:	mov	r2, lr
   2c4a8:	add	r4, r0, r5
   2c4ac:	bne	4043c <GetDataSlab+0x145c0>
   2c4b0:	ldr	r0, [sp, #60]	; 0x3c
   2c4b4:	ldr	ip, [sp, #68]	; 0x44
   2c4b8:	ldr	r3, [sp, #52]	; 0x34
   2c4bc:	cmp	r0, #1
   2c4c0:	blt	516ac <GetDataSlab+0x25830>
   2c4c4:	ldr	r0, [fp, #12]
   2c4c8:	ldr	sl, [sp, #40]	; 0x28
   2c4cc:	mov	lr, #0
   2c4d0:	add	r8, r0, #4
   2c4d4:	ldr	r0, [fp, #20]
   2c4d8:	add	r9, r0, #4
   2c4dc:	sub	r0, fp, #136	; 0x88
   2c4e0:	orr	r1, r0, #4
   2c4e4:	orr	r0, r2, #4
   2c4e8:	str	r0, [sp, #32]
   2c4ec:	bic	r0, r3, #1
   2c4f0:	str	r0, [sp, #36]	; 0x24
   2c4f4:	lsl	r0, r3, #3
   2c4f8:	str	r0, [sp, #48]	; 0x30
   2c4fc:	mov	r0, #0
   2c500:	str	r0, [sp, #56]	; 0x38
   2c504:	cmp	r3, #1
   2c508:	blt	2c5e4 <GetDataSlab+0x768>
   2c50c:	ldr	r0, [fp, #12]
   2c510:	ldr	r7, [r0]
   2c514:	mov	r0, #0
   2c518:	str	r7, [sp, #44]	; 0x2c
   2c51c:	beq	2c5b0 <GetDataSlab+0x734>
   2c520:	ldr	r2, [sp, #68]	; 0x44
   2c524:	ldr	r3, [sp, #48]	; 0x30
   2c528:	ldr	r6, [sp, #56]	; 0x38
   2c52c:	mla	r2, r3, r6, r2
   2c530:	ldr	r6, [sp, #52]	; 0x34
   2c534:	add	r3, r4, r7
   2c538:	add	sl, r4, r6
   2c53c:	add	r6, sl, r7
   2c540:	ldr	sl, [sp, #40]	; 0x28
   2c544:	add	r7, sp, #200	; 0xc8
   2c548:	cmp	r2, r6
   2c54c:	bcs	2c56c <GetDataSlab+0x6f0>
   2c550:	ldr	r2, [sp, #48]	; 0x30
   2c554:	ldr	r6, [sp, #56]	; 0x38
   2c558:	mla	r6, r2, r6, r2
   2c55c:	ldr	r2, [sp, #68]	; 0x44
   2c560:	add	r6, r2, r6
   2c564:	cmp	r3, r6
   2c568:	bcc	2c5b0 <GetDataSlab+0x734>
   2c56c:	ldr	r0, [sp, #36]	; 0x24
   2c570:	mov	r6, ip
   2c574:	ldrh	r2, [r3], #2
   2c578:	subs	r0, r0, #2
   2c57c:	strh	r2, [r7]
   2c580:	vld1.16	{d16[0]}, [r7 :16]
   2c584:	vmovl.s8	q8, d16
   2c588:	vmovl.s16	q0, d16
   2c58c:	vcvt.f64.s32	d17, s1
   2c590:	vcvt.f64.s32	d16, s0
   2c594:	vst1.64	{d16-d17}, [r6]!
   2c598:	bne	2c574 <GetDataSlab+0x6f8>
   2c59c:	ldr	r0, [sp, #52]	; 0x34
   2c5a0:	ldr	r2, [sp, #36]	; 0x24
   2c5a4:	cmp	r0, r2
   2c5a8:	mov	r0, r2
   2c5ac:	beq	2c5e4 <GetDataSlab+0x768>
   2c5b0:	ldr	r2, [sp, #52]	; 0x34
   2c5b4:	add	r6, ip, r0, lsl #3
   2c5b8:	sub	r3, r2, r0
   2c5bc:	ldr	r2, [sp, #44]	; 0x2c
   2c5c0:	add	r0, r0, r2
   2c5c4:	add	r0, r4, r0
   2c5c8:	ldrsb	r2, [r0], #1
   2c5cc:	subs	r3, r3, #1
   2c5d0:	vmov	s0, r2
   2c5d4:	vcvt.f64.s32	d16, s0
   2c5d8:	vstr	d16, [r6]
   2c5dc:	add	r6, r6, #8
   2c5e0:	bne	2c5c8 <GetDataSlab+0x74c>
   2c5e4:	ldr	r0, [fp, #24]
   2c5e8:	add	r4, r4, sl
   2c5ec:	add	r5, r5, sl
   2c5f0:	cmp	r0, #2
   2c5f4:	blt	2c6a0 <GetDataSlab+0x824>
   2c5f8:	mov	r3, #0
   2c5fc:	ldr	r2, [r1, r3, lsl #2]
   2c600:	mov	r0, r3
   2c604:	add	r2, r2, #1
   2c608:	str	r2, [r1, r3, lsl #2]
   2c60c:	ldr	r3, [r9, r3, lsl #2]
   2c610:	sdiv	r6, r2, r3
   2c614:	mls	r2, r6, r3, r2
   2c618:	cmp	r2, #0
   2c61c:	bne	2c690 <GetDataSlab+0x814>
   2c620:	mov	r2, #0
   2c624:	sub	r7, fp, #176	; 0xb0
   2c628:	str	r2, [r1, r0, lsl #2]
   2c62c:	add	r2, r7, r0, lsl #2
   2c630:	ldr	r3, [r2, #4]
   2c634:	sdiv	r2, r5, r3
   2c638:	mls	r6, r2, r3, r5
   2c63c:	cmp	r6, #0
   2c640:	beq	2c660 <GetDataSlab+0x7e4>
   2c644:	ldr	r2, [r7, r0, lsl #2]
   2c648:	ldr	r7, [r8, r0, lsl #2]
   2c64c:	sub	r3, r3, r6
   2c650:	mla	r2, r7, r2, r3
   2c654:	add	r5, r2, r5
   2c658:	add	r4, r4, r2
   2c65c:	b	2c678 <GetDataSlab+0x7fc>
   2c660:	ldr	r3, [r8, r0, lsl #2]
   2c664:	cmp	r3, #0
   2c668:	subne	r2, fp, #176	; 0xb0
   2c66c:	ldrne	r2, [r2, r0, lsl #2]
   2c670:	mlane	r5, r2, r3, r5
   2c674:	mlane	r4, r2, r3, r4
   2c678:	ldr	r2, [fp, #24]
   2c67c:	add	r3, r0, #1
   2c680:	add	r0, r0, #2
   2c684:	cmp	r0, r2
   2c688:	blt	2c5fc <GetDataSlab+0x780>
   2c68c:	b	2c6a0 <GetDataSlab+0x824>
   2c690:	ldr	r2, [sp, #32]
   2c694:	ldr	r0, [r2, r0, lsl #2]
   2c698:	add	r4, r4, r0
   2c69c:	add	r5, r0, r5
   2c6a0:	ldr	r0, [sp, #48]	; 0x30
   2c6a4:	ldr	r3, [sp, #52]	; 0x34
   2c6a8:	ldr	r2, [sp, #60]	; 0x3c
   2c6ac:	add	ip, ip, r0
   2c6b0:	ldr	r0, [sp, #56]	; 0x38
   2c6b4:	add	lr, lr, r3
   2c6b8:	cmp	lr, r2
   2c6bc:	add	r0, r0, #1
   2c6c0:	str	r0, [sp, #56]	; 0x38
   2c6c4:	mov	r0, #0
   2c6c8:	blt	2c504 <GetDataSlab+0x688>
   2c6cc:	b	2e97c <GetDataSlab+0x2b00>
   2c6d0:	mov	r0, #1
   2c6d4:	sub	sp, fp, #48	; 0x30
   2c6d8:	vpop	{d8-d9}
   2c6dc:	add	sp, sp, #4
   2c6e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c6e4:	sub	r1, r9, #1
   2c6e8:	mov	r0, #1
   2c6ec:	cmp	r1, #11
   2c6f0:	bhi	43240 <GetDataSlab+0x173c4>
   2c6f4:	add	r2, pc, #4
   2c6f8:	ldr	r1, [r2, r1, lsl #2]
   2c6fc:	add	pc, r2, r1
   2c700:	.word	0x00000030
   2c704:	.word	0x00004c8c
   2c708:	.word	0x0000507c
   2c70c:	.word	0x000053f4
   2c710:	.word	0x0000576c
   2c714:	.word	0x00005ae4
   2c718:	.word	0x00005e5c
   2c71c:	.word	0x00016b40
   2c720:	.word	0x0000620c
   2c724:	.word	0x00016b40
   2c728:	.word	0x00016b40
   2c72c:	.word	0x0000657c
   2c730:	ldr	r0, [fp, #16]
   2c734:	mov	r3, #0
   2c738:	sub	r9, fp, #96	; 0x60
   2c73c:	ldr	ip, [r0]
   2c740:	sub	r0, ip, #1
   2c744:	str	r0, [fp, #-96]	; 0xffffffa0
   2c748:	ldr	r0, [fp, #8]
   2c74c:	ldr	r0, [r0]
   2c750:	str	r0, [fp, #-176]	; 0xffffff50
   2c754:	str	r0, [sp, #36]	; 0x24
   2c758:	ldr	r0, [fp, #24]
   2c75c:	ldr	r1, [r6]
   2c760:	cmp	r0, #2
   2c764:	str	r1, [sp, #52]	; 0x34
   2c768:	str	r1, [sp, #60]	; 0x3c
   2c76c:	blt	2c8d4 <GetDataSlab+0xa58>
   2c770:	ldr	r0, [fp, #8]
   2c774:	ldr	r2, [sp, #36]	; 0x24
   2c778:	ldr	r5, [sp, #52]	; 0x34
   2c77c:	mov	r6, #1
   2c780:	mvn	r4, #15
   2c784:	mov	r3, #0
   2c788:	mov	r1, r0
   2c78c:	sub	r0, r0, #4
   2c790:	str	r5, [sp, #60]	; 0x3c
   2c794:	sub	sl, r1, #12
   2c798:	mov	r1, #0
   2c79c:	str	r1, [sp, #48]	; 0x30
   2c7a0:	mov	r1, r2
   2c7a4:	ldr	r5, [fp, #16]
   2c7a8:	str	r1, [sp, #44]	; 0x2c
   2c7ac:	ldr	r1, [sp, #48]	; 0x30
   2c7b0:	ldr	r7, [r5, r6, lsl #2]
   2c7b4:	ldr	r5, [fp, #8]
   2c7b8:	str	r2, [lr, r6, lsl #2]
   2c7bc:	add	r1, r1, #1
   2c7c0:	cmp	r1, #4
   2c7c4:	str	r1, [sp, #48]	; 0x30
   2c7c8:	sub	r8, r7, #1
   2c7cc:	str	r8, [r9, r6, lsl #2]
   2c7d0:	ldr	r5, [r5, r6, lsl #2]
   2c7d4:	str	r5, [sp, #40]	; 0x28
   2c7d8:	bcs	2c7e4 <GetDataSlab+0x968>
   2c7dc:	mov	r7, r6
   2c7e0:	b	2c874 <GetDataSlab+0x9f8>
   2c7e4:	vmov.i32	q9, #1	; 0x00000001
   2c7e8:	vmov.i32	q10, #1	; 0x00000001
   2c7ec:	vmov.i32	q8, #1	; 0x00000001
   2c7f0:	bic	r9, r1, #3
   2c7f4:	bic	lr, r6, #3
   2c7f8:	vmov.32	d23[1], r5
   2c7fc:	vmov.32	d18[0], r2
   2c800:	vmov.32	d20[0], r8
   2c804:	sub	r7, r6, r9
   2c808:	mov	r2, sl
   2c80c:	vorr	d16, d18, d18
   2c810:	vmov.i32	q9, #1	; 0x00000001
   2c814:	vorr	d18, d20, d20
   2c818:	vld1.32	{d20-d21}, [r2], r4
   2c81c:	subs	lr, lr, #4
   2c820:	vrev64.32	q12, q10
   2c824:	vext.8	q12, q12, q12, #8
   2c828:	vext.8	q11, q11, q12, #12
   2c82c:	vmul.i32	q9, q9, q12
   2c830:	vmul.i32	q8, q11, q8
   2c834:	vorr	q11, q12, q12
   2c838:	bne	2c818 <GetDataSlab+0x99c>
   2c83c:	vext.8	q11, q9, q8, #8
   2c840:	vext.8	q12, q8, q8, #8
   2c844:	cmp	r1, r9
   2c848:	vmul.i32	q0, q9, q11
   2c84c:	vmul.i32	q1, q8, q12
   2c850:	vmul.i32	q8, q0, d0[1]
   2c854:	vmul.i32	q9, q1, d2[1]
   2c858:	vmov.32	r8, d16[0]
   2c85c:	vmov.32	r2, d18[0]
   2c860:	bne	2c86c <GetDataSlab+0x9f0>
   2c864:	sub	lr, fp, #176	; 0xb0
   2c868:	b	2c888 <GetDataSlab+0xa0c>
   2c86c:	vmov.32	r5, d20[0]
   2c870:	sub	lr, fp, #176	; 0xb0
   2c874:	mul	r2, r5, r2
   2c878:	ldr	r5, [r0, r7, lsl #2]
   2c87c:	subs	r7, r7, #1
   2c880:	mul	r8, r8, r5
   2c884:	bne	2c874 <GetDataSlab+0x9f8>
   2c888:	ldr	r7, [fp, #12]
   2c88c:	sub	r9, fp, #96	; 0x60
   2c890:	str	r2, [lr, r6, lsl #2]
   2c894:	ldr	r1, [sp, #44]	; 0x2c
   2c898:	ldr	r5, [fp, #20]
   2c89c:	add	sl, sl, #4
   2c8a0:	str	r8, [r9, r6, lsl #2]
   2c8a4:	ldr	r7, [r7, r6, lsl #2]
   2c8a8:	mla	r3, r7, r1, r3
   2c8ac:	ldr	r7, [r5, r6, lsl #2]
   2c8b0:	ldr	r5, [sp, #60]	; 0x3c
   2c8b4:	mov	r1, r2
   2c8b8:	ldr	r2, [sp, #40]	; 0x28
   2c8bc:	add	r6, r6, #1
   2c8c0:	mul	r5, r7, r5
   2c8c4:	ldr	r7, [fp, #24]
   2c8c8:	str	r5, [sp, #60]	; 0x3c
   2c8cc:	cmp	r6, r7
   2c8d0:	bne	2c7a4 <GetDataSlab+0x928>
   2c8d4:	ldr	r0, [sp, #56]	; 0x38
   2c8d8:	cmp	ip, #1
   2c8dc:	add	r4, r0, r3
   2c8e0:	ldr	r0, [fp, #12]
   2c8e4:	bne	405d8 <GetDataSlab+0x1475c>
   2c8e8:	ldr	r1, [sp, #60]	; 0x3c
   2c8ec:	sub	r2, fp, #96	; 0x60
   2c8f0:	cmp	r1, #1
   2c8f4:	ldr	r1, [fp, #20]
   2c8f8:	blt	516c0 <GetDataSlab+0x25844>
   2c8fc:	add	lr, r0, #4
   2c900:	sub	r0, fp, #136	; 0x88
   2c904:	add	r8, r1, #4
   2c908:	ldr	ip, [sp, #68]	; 0x44
   2c90c:	add	r7, sp, #208	; 0xd0
   2c910:	mov	sl, #0
   2c914:	orr	r1, r0, #4
   2c918:	orr	r0, r2, #4
   2c91c:	ldr	r2, [sp, #52]	; 0x34
   2c920:	str	r0, [sp, #28]
   2c924:	str	ip, [sp, #56]	; 0x38
   2c928:	bic	r0, r2, #3
   2c92c:	str	r0, [sp, #32]
   2c930:	lsl	r0, r2, #2
   2c934:	str	r0, [sp, #44]	; 0x2c
   2c938:	mov	r0, #0
   2c93c:	str	r0, [sp, #48]	; 0x30
   2c940:	cmp	r2, #1
   2c944:	blt	2ca20 <GetDataSlab+0xba4>
   2c948:	ldr	r0, [fp, #12]
   2c94c:	ldr	r5, [sp, #52]	; 0x34
   2c950:	mov	ip, #0
   2c954:	ldr	r9, [r0]
   2c958:	cmp	r5, #4
   2c95c:	bcc	2c9ec <GetDataSlab+0xb70>
   2c960:	ldr	r2, [sp, #68]	; 0x44
   2c964:	ldr	r6, [sp, #44]	; 0x2c
   2c968:	ldr	r0, [sp, #48]	; 0x30
   2c96c:	mla	r0, r6, r0, r2
   2c970:	add	r2, r4, r9
   2c974:	str	r0, [sp, #40]	; 0x28
   2c978:	mov	r0, r9
   2c97c:	add	r9, r4, r5
   2c980:	add	r6, r9, r0
   2c984:	mov	r9, r0
   2c988:	ldr	r0, [sp, #40]	; 0x28
   2c98c:	cmp	r0, r6
   2c990:	bcs	2c9b0 <GetDataSlab+0xb34>
   2c994:	ldr	r5, [sp, #44]	; 0x2c
   2c998:	ldr	r0, [sp, #48]	; 0x30
   2c99c:	mla	r6, r5, r0, r5
   2c9a0:	ldr	r5, [sp, #68]	; 0x44
   2c9a4:	add	r6, r5, r6
   2c9a8:	cmp	r2, r6
   2c9ac:	bcc	2c9ec <GetDataSlab+0xb70>
   2c9b0:	ldr	r0, [sp, #32]
   2c9b4:	ldr	r6, [sp, #56]	; 0x38
   2c9b8:	ldr	r5, [r2], #4
   2c9bc:	subs	r0, r0, #4
   2c9c0:	str	r5, [sp, #208]	; 0xd0
   2c9c4:	vld1.32	{d16[0]}, [r7 :32]
   2c9c8:	vmovl.s8	q8, d16
   2c9cc:	vmovl.s16	q8, d16
   2c9d0:	vcvt.f32.s32	q8, q8
   2c9d4:	vst1.32	{d16-d17}, [r6]!
   2c9d8:	bne	2c9b8 <GetDataSlab+0xb3c>
   2c9dc:	ldr	r0, [sp, #52]	; 0x34
   2c9e0:	ldr	ip, [sp, #32]
   2c9e4:	cmp	r0, ip
   2c9e8:	beq	2ca20 <GetDataSlab+0xba4>
   2c9ec:	ldr	r0, [sp, #56]	; 0x38
   2c9f0:	ldr	r2, [sp, #52]	; 0x34
   2c9f4:	add	r6, r0, ip, lsl #2
   2c9f8:	add	r0, ip, r9
   2c9fc:	sub	r2, r2, ip
   2ca00:	add	r0, r4, r0
   2ca04:	ldrsb	r5, [r0], #1
   2ca08:	subs	r2, r2, #1
   2ca0c:	vmov	s0, r5
   2ca10:	vcvt.f32.s32	s0, s0
   2ca14:	vstr	s0, [r6]
   2ca18:	add	r6, r6, #4
   2ca1c:	bne	2ca04 <GetDataSlab+0xb88>
   2ca20:	ldr	r0, [sp, #36]	; 0x24
   2ca24:	add	r4, r4, r0
   2ca28:	add	r3, r3, r0
   2ca2c:	ldr	r0, [fp, #24]
   2ca30:	cmp	r0, #2
   2ca34:	blt	2cae8 <GetDataSlab+0xc6c>
   2ca38:	mov	r2, #0
   2ca3c:	mov	r0, r2
   2ca40:	ldr	r2, [r1, r2, lsl #2]
   2ca44:	add	r2, r2, #1
   2ca48:	str	r2, [r1, r0, lsl #2]
   2ca4c:	ldr	r5, [r8, r0, lsl #2]
   2ca50:	sdiv	r6, r2, r5
   2ca54:	mls	r2, r6, r5, r2
   2ca58:	cmp	r2, #0
   2ca5c:	bne	2cad8 <GetDataSlab+0xc5c>
   2ca60:	mov	r9, r7
   2ca64:	mov	r2, #0
   2ca68:	sub	r7, fp, #176	; 0xb0
   2ca6c:	str	r2, [r1, r0, lsl #2]
   2ca70:	add	r2, r7, r0, lsl #2
   2ca74:	ldr	r2, [r2, #4]
   2ca78:	sdiv	r5, r3, r2
   2ca7c:	mls	r6, r5, r2, r3
   2ca80:	cmp	r6, #0
   2ca84:	beq	2caa4 <GetDataSlab+0xc28>
   2ca88:	ldr	r5, [r7, r0, lsl #2]
   2ca8c:	ldr	r7, [lr, r0, lsl #2]
   2ca90:	sub	r2, r2, r6
   2ca94:	mla	r2, r7, r5, r2
   2ca98:	add	r3, r2, r3
   2ca9c:	add	r4, r4, r2
   2caa0:	b	2cabc <GetDataSlab+0xc40>
   2caa4:	ldr	r2, [lr, r0, lsl #2]
   2caa8:	cmp	r2, #0
   2caac:	subne	r5, fp, #176	; 0xb0
   2cab0:	ldrne	r5, [r5, r0, lsl #2]
   2cab4:	mlane	r3, r5, r2, r3
   2cab8:	mlane	r4, r5, r2, r4
   2cabc:	ldr	r5, [fp, #24]
   2cac0:	add	r2, r0, #1
   2cac4:	add	r0, r0, #2
   2cac8:	mov	r7, r9
   2cacc:	cmp	r0, r5
   2cad0:	blt	2ca3c <GetDataSlab+0xbc0>
   2cad4:	b	2cae8 <GetDataSlab+0xc6c>
   2cad8:	ldr	r2, [sp, #28]
   2cadc:	ldr	r0, [r2, r0, lsl #2]
   2cae0:	add	r4, r4, r0
   2cae4:	add	r3, r0, r3
   2cae8:	ldr	r0, [sp, #44]	; 0x2c
   2caec:	ldr	r2, [sp, #56]	; 0x38
   2caf0:	ldr	r5, [sp, #60]	; 0x3c
   2caf4:	add	r2, r2, r0
   2caf8:	ldr	r0, [sp, #48]	; 0x30
   2cafc:	str	r2, [sp, #56]	; 0x38
   2cb00:	ldr	r2, [sp, #52]	; 0x34
   2cb04:	add	r0, r0, #1
   2cb08:	add	sl, sl, r2
   2cb0c:	str	r0, [sp, #48]	; 0x30
   2cb10:	mov	r0, #0
   2cb14:	cmp	sl, r5
   2cb18:	blt	2c940 <GetDataSlab+0xac4>
   2cb1c:	b	2e97c <GetDataSlab+0x2b00>
   2cb20:	sub	r1, r9, #1
   2cb24:	mov	r0, #1
   2cb28:	cmp	r1, #11
   2cb2c:	bhi	40778 <GetDataSlab+0x148fc>
   2cb30:	add	r2, pc, #8
   2cb34:	ldr	r3, [fp, #16]
   2cb38:	ldr	r1, [r2, r1, lsl #2]
   2cb3c:	add	pc, r2, r1
   2cb40:	.word	0x00000030
   2cb44:	.word	0x000064f8
   2cb48:	.word	0x00006818
   2cb4c:	.word	0x00006b44
   2cb50:	.word	0x00006e70
   2cb54:	.word	0x00007194
   2cb58:	.word	0x000074b8
   2cb5c:	.word	0x00017794
   2cb60:	.word	0x000077f0
   2cb64:	.word	0x00017794
   2cb68:	.word	0x00017794
   2cb6c:	.word	0x00007b28
   2cb70:	ldr	r4, [r3]
   2cb74:	ldr	r9, [fp, #8]
   2cb78:	mov	r5, #0
   2cb7c:	sub	r3, fp, #176	; 0xb0
   2cb80:	sub	sl, fp, #96	; 0x60
   2cb84:	sub	r0, r4, #1
   2cb88:	str	r0, [fp, #-96]	; 0xffffffa0
   2cb8c:	ldr	r0, [r9]
   2cb90:	str	r0, [fp, #-176]	; 0xffffff50
   2cb94:	str	r0, [sp, #52]	; 0x34
   2cb98:	ldr	r0, [fp, #24]
   2cb9c:	ldr	r2, [r6]
   2cba0:	cmp	r0, #2
   2cba4:	mov	r0, r2
   2cba8:	str	r2, [sp, #60]	; 0x3c
   2cbac:	blt	2cd1c <GetDataSlab+0xea0>
   2cbb0:	ldr	r7, [sp, #52]	; 0x34
   2cbb4:	sub	r0, r9, #4
   2cbb8:	sub	r6, r9, #12
   2cbbc:	mov	ip, #1
   2cbc0:	mov	lr, #0
   2cbc4:	mov	r5, #0
   2cbc8:	str	r2, [sp, #60]	; 0x3c
   2cbcc:	mov	r1, r7
   2cbd0:	str	r7, [sp, #48]	; 0x30
   2cbd4:	mov	r1, r2
   2cbd8:	ldr	r1, [fp, #16]
   2cbdc:	add	lr, lr, #1
   2cbe0:	str	r6, [sp, #44]	; 0x2c
   2cbe4:	cmp	lr, #4
   2cbe8:	str	lr, [sp, #40]	; 0x28
   2cbec:	ldr	r1, [r1, ip, lsl #2]
   2cbf0:	str	r7, [r3, ip, lsl #2]
   2cbf4:	sub	r8, r1, #1
   2cbf8:	str	r8, [sl, ip, lsl #2]
   2cbfc:	ldr	sl, [r9, ip, lsl #2]
   2cc00:	str	sl, [sp, #36]	; 0x24
   2cc04:	bcs	2cc14 <GetDataSlab+0xd98>
   2cc08:	mov	r1, sl
   2cc0c:	mov	r3, ip
   2cc10:	b	2ccb0 <GetDataSlab+0xe34>
   2cc14:	vmov.i32	q9, #1	; 0x00000001
   2cc18:	vmov.i32	q10, #1	; 0x00000001
   2cc1c:	vmov.i32	q8, #1	; 0x00000001
   2cc20:	bic	r1, lr, #3
   2cc24:	bic	r9, ip, #3
   2cc28:	vmov.32	d23[1], sl
   2cc2c:	vmov.32	d18[0], r7
   2cc30:	vmov.32	d20[0], r8
   2cc34:	str	r1, [sp, #32]
   2cc38:	sub	r3, ip, r1
   2cc3c:	mov	r1, r6
   2cc40:	mvn	r7, #15
   2cc44:	vorr	d16, d18, d18
   2cc48:	vmov.i32	q9, #1	; 0x00000001
   2cc4c:	vorr	d18, d20, d20
   2cc50:	vld1.32	{d20-d21}, [r1], r7
   2cc54:	subs	r9, r9, #4
   2cc58:	vrev64.32	q12, q10
   2cc5c:	vext.8	q12, q12, q12, #8
   2cc60:	vext.8	q11, q11, q12, #12
   2cc64:	vmul.i32	q9, q9, q12
   2cc68:	vmul.i32	q8, q11, q8
   2cc6c:	vorr	q11, q12, q12
   2cc70:	bne	2cc50 <GetDataSlab+0xdd4>
   2cc74:	ldr	r1, [sp, #32]
   2cc78:	vext.8	q11, q9, q8, #8
   2cc7c:	vext.8	q12, q8, q8, #8
   2cc80:	vmul.i32	q0, q9, q11
   2cc84:	vmul.i32	q1, q8, q12
   2cc88:	vmul.i32	q8, q0, d0[1]
   2cc8c:	vmul.i32	q9, q1, d2[1]
   2cc90:	vmov.32	r8, d16[0]
   2cc94:	vmov.32	r7, d18[0]
   2cc98:	cmp	lr, r1
   2cc9c:	bne	2cca8 <GetDataSlab+0xe2c>
   2cca0:	ldr	r9, [fp, #8]
   2cca4:	b	2ccc4 <GetDataSlab+0xe48>
   2cca8:	ldr	r9, [fp, #8]
   2ccac:	vmov.32	r1, d20[0]
   2ccb0:	mul	r7, r1, r7
   2ccb4:	ldr	r1, [r0, r3, lsl #2]
   2ccb8:	subs	r3, r3, #1
   2ccbc:	mul	r8, r8, r1
   2ccc0:	bne	2ccb0 <GetDataSlab+0xe34>
   2ccc4:	sub	sl, fp, #96	; 0x60
   2ccc8:	sub	r3, fp, #176	; 0xb0
   2cccc:	ldr	r6, [sp, #48]	; 0x30
   2ccd0:	ldr	lr, [sp, #60]	; 0x3c
   2ccd4:	str	r7, [sp, #48]	; 0x30
   2ccd8:	str	r8, [sl, ip, lsl #2]
   2ccdc:	ldr	r8, [fp, #12]
   2cce0:	str	r7, [r3, ip, lsl #2]
   2cce4:	ldr	r7, [sp, #36]	; 0x24
   2cce8:	ldr	r1, [r8, ip, lsl #2]
   2ccec:	mla	r5, r1, r6, r5
   2ccf0:	ldr	r1, [fp, #20]
   2ccf4:	ldr	r6, [sp, #44]	; 0x2c
   2ccf8:	ldr	r1, [r1, ip, lsl #2]
   2ccfc:	add	ip, ip, #1
   2cd00:	add	r6, r6, #4
   2cd04:	mul	lr, r1, lr
   2cd08:	ldr	r1, [fp, #24]
   2cd0c:	str	lr, [sp, #60]	; 0x3c
   2cd10:	ldr	lr, [sp, #40]	; 0x28
   2cd14:	cmp	ip, r1
   2cd18:	bne	2cbd8 <GetDataSlab+0xd5c>
   2cd1c:	ldr	r0, [sp, #56]	; 0x38
   2cd20:	cmp	r4, #1
   2cd24:	add	sl, r0, r5
   2cd28:	bne	40788 <GetDataSlab+0x1490c>
   2cd2c:	ldr	r0, [sp, #60]	; 0x3c
   2cd30:	cmp	r0, #1
   2cd34:	blt	516d4 <GetDataSlab+0x25858>
   2cd38:	ldr	r0, [fp, #20]
   2cd3c:	mov	r9, r8
   2cd40:	mov	r8, #0
   2cd44:	add	ip, r0, #4
   2cd48:	sub	r0, fp, #136	; 0x88
   2cd4c:	orr	r7, r0, #4
   2cd50:	sub	r0, fp, #96	; 0x60
   2cd54:	orr	r0, r0, #4
   2cd58:	str	r0, [sp, #48]	; 0x30
   2cd5c:	ldr	r0, [r9], #4
   2cd60:	str	r0, [sp, #56]	; 0x38
   2cd64:	ldr	r6, [sp, #56]	; 0x38
   2cd68:	ldr	r1, [sp, #52]	; 0x34
   2cd6c:	cmp	r2, #1
   2cd70:	add	r0, r6, r5
   2cd74:	add	r3, sl, r6
   2cd78:	blt	2cdb4 <GetDataSlab+0xf38>
   2cd7c:	ldr	r1, [sp, #68]	; 0x44
   2cd80:	ldr	r6, [fp, #20]
   2cd84:	mov	r5, #0
   2cd88:	add	r1, r1, r8
   2cd8c:	ldrb	r2, [r3, r5]
   2cd90:	strb	r2, [r1, r5]
   2cd94:	add	r5, r5, #1
   2cd98:	ldr	r2, [r6]
   2cd9c:	cmp	r5, r2
   2cda0:	blt	2cd8c <GetDataSlab+0xf10>
   2cda4:	ldr	r1, [fp, #12]
   2cda8:	ldr	r6, [r1]
   2cdac:	ldr	r1, [fp, #8]
   2cdb0:	ldr	r1, [r1]
   2cdb4:	str	r1, [sp, #52]	; 0x34
   2cdb8:	sub	r1, r1, r6
   2cdbc:	str	r6, [sp, #56]	; 0x38
   2cdc0:	add	r5, r0, r1
   2cdc4:	ldr	r0, [fp, #24]
   2cdc8:	add	sl, r3, r1
   2cdcc:	cmp	r0, #2
   2cdd0:	blt	2ce78 <GetDataSlab+0xffc>
   2cdd4:	mov	r1, #0
   2cdd8:	mov	r0, r1
   2cddc:	ldr	r1, [r7, r1, lsl #2]
   2cde0:	add	r1, r1, #1
   2cde4:	str	r1, [r7, r0, lsl #2]
   2cde8:	ldr	r6, [ip, r0, lsl #2]
   2cdec:	sdiv	lr, r1, r6
   2cdf0:	mls	r1, lr, r6, r1
   2cdf4:	cmp	r1, #0
   2cdf8:	bne	2ce68 <GetDataSlab+0xfec>
   2cdfc:	mov	r1, #0
   2ce00:	sub	r3, fp, #176	; 0xb0
   2ce04:	str	r1, [r7, r0, lsl #2]
   2ce08:	add	r1, r3, r0, lsl #2
   2ce0c:	ldr	r1, [r1, #4]
   2ce10:	sdiv	r6, r5, r1
   2ce14:	mls	r6, r6, r1, r5
   2ce18:	cmp	r6, #0
   2ce1c:	beq	2ce3c <GetDataSlab+0xfc0>
   2ce20:	ldr	r4, [r3, r0, lsl #2]
   2ce24:	ldr	r3, [r9, r0, lsl #2]
   2ce28:	sub	r1, r1, r6
   2ce2c:	mla	r1, r3, r4, r1
   2ce30:	add	r5, r1, r5
   2ce34:	add	sl, sl, r1
   2ce38:	b	2ce50 <GetDataSlab+0xfd4>
   2ce3c:	ldr	r1, [r9, r0, lsl #2]
   2ce40:	cmp	r1, #0
   2ce44:	ldrne	r3, [r3, r0, lsl #2]
   2ce48:	mlane	r5, r3, r1, r5
   2ce4c:	mlane	sl, r3, r1, sl
   2ce50:	ldr	r3, [fp, #24]
   2ce54:	add	r1, r0, #1
   2ce58:	add	r0, r0, #2
   2ce5c:	cmp	r0, r3
   2ce60:	blt	2cdd8 <GetDataSlab+0xf5c>
   2ce64:	b	2ce78 <GetDataSlab+0xffc>
   2ce68:	ldr	r1, [sp, #48]	; 0x30
   2ce6c:	ldr	r0, [r1, r0, lsl #2]
   2ce70:	add	sl, sl, r0
   2ce74:	add	r5, r0, r5
   2ce78:	ldr	r1, [sp, #60]	; 0x3c
   2ce7c:	add	r8, r2, r8
   2ce80:	mov	r0, #0
   2ce84:	cmp	r8, r1
   2ce88:	blt	2cd64 <GetDataSlab+0xee8>
   2ce8c:	b	2e97c <GetDataSlab+0x2b00>
   2ce90:	sub	r1, r9, #1
   2ce94:	mov	r0, #1
   2ce98:	cmp	r1, #11
   2ce9c:	bhi	40920 <GetDataSlab+0x14aa4>
   2cea0:	add	r2, pc, #8
   2cea4:	ldr	r3, [fp, #16]
   2cea8:	ldr	r1, [r2, r1, lsl #2]
   2ceac:	add	pc, r2, r1
   2ceb0:	.word	0x00000030
   2ceb4:	.word	0x00007ad4
   2ceb8:	.word	0x00007df4
   2cebc:	.word	0x00008120
   2cec0:	.word	0x0000844c
   2cec4:	.word	0x00008770
   2cec8:	.word	0x00008a94
   2cecc:	.word	0x00018448
   2ced0:	.word	0x00008dcc
   2ced4:	.word	0x00018448
   2ced8:	.word	0x00018448
   2cedc:	.word	0x00009104
   2cee0:	ldr	r4, [r3]
   2cee4:	ldr	r9, [fp, #8]
   2cee8:	mov	r5, #0
   2ceec:	sub	r3, fp, #176	; 0xb0
   2cef0:	sub	sl, fp, #96	; 0x60
   2cef4:	sub	r0, r4, #1
   2cef8:	str	r0, [fp, #-96]	; 0xffffffa0
   2cefc:	ldr	r0, [r9]
   2cf00:	str	r0, [fp, #-176]	; 0xffffff50
   2cf04:	str	r0, [sp, #52]	; 0x34
   2cf08:	ldr	r0, [fp, #24]
   2cf0c:	ldr	r2, [r6]
   2cf10:	cmp	r0, #2
   2cf14:	mov	r0, r2
   2cf18:	str	r2, [sp, #60]	; 0x3c
   2cf1c:	blt	2d08c <GetDataSlab+0x1210>
   2cf20:	ldr	r7, [sp, #52]	; 0x34
   2cf24:	sub	r0, r9, #4
   2cf28:	sub	r6, r9, #12
   2cf2c:	mov	ip, #1
   2cf30:	mov	lr, #0
   2cf34:	mov	r5, #0
   2cf38:	str	r2, [sp, #60]	; 0x3c
   2cf3c:	mov	r1, r7
   2cf40:	str	r7, [sp, #48]	; 0x30
   2cf44:	mov	r1, r2
   2cf48:	ldr	r1, [fp, #16]
   2cf4c:	add	lr, lr, #1
   2cf50:	str	r6, [sp, #44]	; 0x2c
   2cf54:	cmp	lr, #4
   2cf58:	str	lr, [sp, #40]	; 0x28
   2cf5c:	ldr	r1, [r1, ip, lsl #2]
   2cf60:	str	r7, [r3, ip, lsl #2]
   2cf64:	sub	r8, r1, #1
   2cf68:	str	r8, [sl, ip, lsl #2]
   2cf6c:	ldr	sl, [r9, ip, lsl #2]
   2cf70:	str	sl, [sp, #36]	; 0x24
   2cf74:	bcs	2cf84 <GetDataSlab+0x1108>
   2cf78:	mov	r1, sl
   2cf7c:	mov	r3, ip
   2cf80:	b	2d020 <GetDataSlab+0x11a4>
   2cf84:	vmov.i32	q9, #1	; 0x00000001
   2cf88:	vmov.i32	q10, #1	; 0x00000001
   2cf8c:	vmov.i32	q8, #1	; 0x00000001
   2cf90:	bic	r1, lr, #3
   2cf94:	bic	r9, ip, #3
   2cf98:	vmov.32	d23[1], sl
   2cf9c:	vmov.32	d18[0], r7
   2cfa0:	vmov.32	d20[0], r8
   2cfa4:	str	r1, [sp, #32]
   2cfa8:	sub	r3, ip, r1
   2cfac:	mov	r1, r6
   2cfb0:	mvn	r7, #15
   2cfb4:	vorr	d16, d18, d18
   2cfb8:	vmov.i32	q9, #1	; 0x00000001
   2cfbc:	vorr	d18, d20, d20
   2cfc0:	vld1.32	{d20-d21}, [r1], r7
   2cfc4:	subs	r9, r9, #4
   2cfc8:	vrev64.32	q12, q10
   2cfcc:	vext.8	q12, q12, q12, #8
   2cfd0:	vext.8	q11, q11, q12, #12
   2cfd4:	vmul.i32	q9, q9, q12
   2cfd8:	vmul.i32	q8, q11, q8
   2cfdc:	vorr	q11, q12, q12
   2cfe0:	bne	2cfc0 <GetDataSlab+0x1144>
   2cfe4:	ldr	r1, [sp, #32]
   2cfe8:	vext.8	q11, q9, q8, #8
   2cfec:	vext.8	q12, q8, q8, #8
   2cff0:	vmul.i32	q0, q9, q11
   2cff4:	vmul.i32	q1, q8, q12
   2cff8:	vmul.i32	q8, q0, d0[1]
   2cffc:	vmul.i32	q9, q1, d2[1]
   2d000:	vmov.32	r8, d16[0]
   2d004:	vmov.32	r7, d18[0]
   2d008:	cmp	lr, r1
   2d00c:	bne	2d018 <GetDataSlab+0x119c>
   2d010:	ldr	r9, [fp, #8]
   2d014:	b	2d034 <GetDataSlab+0x11b8>
   2d018:	ldr	r9, [fp, #8]
   2d01c:	vmov.32	r1, d20[0]
   2d020:	mul	r7, r1, r7
   2d024:	ldr	r1, [r0, r3, lsl #2]
   2d028:	subs	r3, r3, #1
   2d02c:	mul	r8, r8, r1
   2d030:	bne	2d020 <GetDataSlab+0x11a4>
   2d034:	sub	sl, fp, #96	; 0x60
   2d038:	sub	r3, fp, #176	; 0xb0
   2d03c:	ldr	r6, [sp, #48]	; 0x30
   2d040:	ldr	lr, [sp, #60]	; 0x3c
   2d044:	str	r7, [sp, #48]	; 0x30
   2d048:	str	r8, [sl, ip, lsl #2]
   2d04c:	ldr	r8, [fp, #12]
   2d050:	str	r7, [r3, ip, lsl #2]
   2d054:	ldr	r7, [sp, #36]	; 0x24
   2d058:	ldr	r1, [r8, ip, lsl #2]
   2d05c:	mla	r5, r1, r6, r5
   2d060:	ldr	r1, [fp, #20]
   2d064:	ldr	r6, [sp, #44]	; 0x2c
   2d068:	ldr	r1, [r1, ip, lsl #2]
   2d06c:	add	ip, ip, #1
   2d070:	add	r6, r6, #4
   2d074:	mul	lr, r1, lr
   2d078:	ldr	r1, [fp, #24]
   2d07c:	str	lr, [sp, #60]	; 0x3c
   2d080:	ldr	lr, [sp, #40]	; 0x28
   2d084:	cmp	ip, r1
   2d088:	bne	2cf48 <GetDataSlab+0x10cc>
   2d08c:	ldr	r0, [sp, #56]	; 0x38
   2d090:	cmp	r4, #1
   2d094:	add	sl, r0, r5
   2d098:	bne	40930 <GetDataSlab+0x14ab4>
   2d09c:	ldr	r0, [sp, #60]	; 0x3c
   2d0a0:	cmp	r0, #1
   2d0a4:	blt	516e8 <GetDataSlab+0x2586c>
   2d0a8:	ldr	r0, [fp, #20]
   2d0ac:	mov	r9, r8
   2d0b0:	mov	r8, #0
   2d0b4:	add	ip, r0, #4
   2d0b8:	sub	r0, fp, #136	; 0x88
   2d0bc:	orr	r7, r0, #4
   2d0c0:	sub	r0, fp, #96	; 0x60
   2d0c4:	orr	r0, r0, #4
   2d0c8:	str	r0, [sp, #48]	; 0x30
   2d0cc:	ldr	r0, [r9], #4
   2d0d0:	str	r0, [sp, #56]	; 0x38
   2d0d4:	ldr	r6, [sp, #56]	; 0x38
   2d0d8:	ldr	r1, [sp, #52]	; 0x34
   2d0dc:	cmp	r2, #1
   2d0e0:	add	r0, r6, r5
   2d0e4:	add	r3, sl, r6
   2d0e8:	blt	2d124 <GetDataSlab+0x12a8>
   2d0ec:	ldr	r1, [sp, #68]	; 0x44
   2d0f0:	ldr	r6, [fp, #20]
   2d0f4:	mov	r5, #0
   2d0f8:	add	r1, r1, r8
   2d0fc:	ldrb	r2, [r3, r5]
   2d100:	strb	r2, [r1, r5]
   2d104:	add	r5, r5, #1
   2d108:	ldr	r2, [r6]
   2d10c:	cmp	r5, r2
   2d110:	blt	2d0fc <GetDataSlab+0x1280>
   2d114:	ldr	r1, [fp, #12]
   2d118:	ldr	r6, [r1]
   2d11c:	ldr	r1, [fp, #8]
   2d120:	ldr	r1, [r1]
   2d124:	str	r1, [sp, #52]	; 0x34
   2d128:	sub	r1, r1, r6
   2d12c:	str	r6, [sp, #56]	; 0x38
   2d130:	add	r5, r0, r1
   2d134:	ldr	r0, [fp, #24]
   2d138:	add	sl, r3, r1
   2d13c:	cmp	r0, #2
   2d140:	blt	2d1e8 <GetDataSlab+0x136c>
   2d144:	mov	r1, #0
   2d148:	mov	r0, r1
   2d14c:	ldr	r1, [r7, r1, lsl #2]
   2d150:	add	r1, r1, #1
   2d154:	str	r1, [r7, r0, lsl #2]
   2d158:	ldr	r6, [ip, r0, lsl #2]
   2d15c:	sdiv	lr, r1, r6
   2d160:	mls	r1, lr, r6, r1
   2d164:	cmp	r1, #0
   2d168:	bne	2d1d8 <GetDataSlab+0x135c>
   2d16c:	mov	r1, #0
   2d170:	sub	r3, fp, #176	; 0xb0
   2d174:	str	r1, [r7, r0, lsl #2]
   2d178:	add	r1, r3, r0, lsl #2
   2d17c:	ldr	r1, [r1, #4]
   2d180:	sdiv	r6, r5, r1
   2d184:	mls	r6, r6, r1, r5
   2d188:	cmp	r6, #0
   2d18c:	beq	2d1ac <GetDataSlab+0x1330>
   2d190:	ldr	r4, [r3, r0, lsl #2]
   2d194:	ldr	r3, [r9, r0, lsl #2]
   2d198:	sub	r1, r1, r6
   2d19c:	mla	r1, r3, r4, r1
   2d1a0:	add	r5, r1, r5
   2d1a4:	add	sl, sl, r1
   2d1a8:	b	2d1c0 <GetDataSlab+0x1344>
   2d1ac:	ldr	r1, [r9, r0, lsl #2]
   2d1b0:	cmp	r1, #0
   2d1b4:	ldrne	r3, [r3, r0, lsl #2]
   2d1b8:	mlane	r5, r3, r1, r5
   2d1bc:	mlane	sl, r3, r1, sl
   2d1c0:	ldr	r3, [fp, #24]
   2d1c4:	add	r1, r0, #1
   2d1c8:	add	r0, r0, #2
   2d1cc:	cmp	r0, r3
   2d1d0:	blt	2d148 <GetDataSlab+0x12cc>
   2d1d4:	b	2d1e8 <GetDataSlab+0x136c>
   2d1d8:	ldr	r1, [sp, #48]	; 0x30
   2d1dc:	ldr	r0, [r1, r0, lsl #2]
   2d1e0:	add	sl, sl, r0
   2d1e4:	add	r5, r0, r5
   2d1e8:	ldr	r1, [sp, #60]	; 0x3c
   2d1ec:	add	r8, r2, r8
   2d1f0:	mov	r0, #0
   2d1f4:	cmp	r8, r1
   2d1f8:	blt	2d0d4 <GetDataSlab+0x1258>
   2d1fc:	b	2e97c <GetDataSlab+0x2b00>
   2d200:	sub	r1, r9, #1
   2d204:	mov	r0, #1
   2d208:	cmp	r1, #11
   2d20c:	bhi	40ac8 <GetDataSlab+0x14c4c>
   2d210:	add	r2, pc, #8
   2d214:	ldr	ip, [fp, #16]
   2d218:	ldr	r1, [r2, r1, lsl #2]
   2d21c:	add	pc, r2, r1
   2d220:	.word	0x00000030
   2d224:	.word	0x000090b0
   2d228:	.word	0x00009468
   2d22c:	.word	0x00009800
   2d230:	.word	0x00009b98
   2d234:	.word	0x00009ef0
   2d238:	.word	0x0000a248
   2d23c:	.word	0x000190bc
   2d240:	.word	0x0000a5c4
   2d244:	.word	0x000190bc
   2d248:	.word	0x000190bc
   2d24c:	.word	0x0000a8e4
   2d250:	ldr	sl, [ip]
   2d254:	mov	r1, r6
   2d258:	mov	r3, #0
   2d25c:	sub	r7, fp, #176	; 0xb0
   2d260:	sub	r8, fp, #96	; 0x60
   2d264:	sub	r0, sl, #1
   2d268:	str	r0, [fp, #-96]	; 0xffffffa0
   2d26c:	ldr	r0, [fp, #8]
   2d270:	ldr	r0, [r0]
   2d274:	str	r0, [fp, #-176]	; 0xffffff50
   2d278:	str	r0, [sp, #44]	; 0x2c
   2d27c:	ldr	r0, [fp, #24]
   2d280:	ldr	r1, [r6]
   2d284:	cmp	r0, #2
   2d288:	str	r1, [sp, #40]	; 0x28
   2d28c:	str	r1, [sp, #60]	; 0x3c
   2d290:	blt	2d3e4 <GetDataSlab+0x1568>
   2d294:	ldr	r0, [fp, #8]
   2d298:	ldr	r2, [sp, #44]	; 0x2c
   2d29c:	mov	r6, #1
   2d2a0:	mov	lr, #0
   2d2a4:	mvn	r4, #15
   2d2a8:	mov	r3, #0
   2d2ac:	mov	r1, r0
   2d2b0:	sub	r0, r0, #4
   2d2b4:	mov	r9, r2
   2d2b8:	sub	ip, r1, #12
   2d2bc:	ldr	r1, [sp, #40]	; 0x28
   2d2c0:	str	r1, [sp, #60]	; 0x3c
   2d2c4:	ldr	r1, [fp, #16]
   2d2c8:	add	lr, lr, #1
   2d2cc:	cmp	lr, #4
   2d2d0:	ldr	r1, [r1, r6, lsl #2]
   2d2d4:	str	r2, [r7, r6, lsl #2]
   2d2d8:	sub	r5, r1, #1
   2d2dc:	ldr	r1, [fp, #8]
   2d2e0:	str	r5, [r8, r6, lsl #2]
   2d2e4:	ldr	r1, [r1, r6, lsl #2]
   2d2e8:	str	r1, [sp, #52]	; 0x34
   2d2ec:	bcs	2d2f8 <GetDataSlab+0x147c>
   2d2f0:	mov	r7, r6
   2d2f4:	b	2d384 <GetDataSlab+0x1508>
   2d2f8:	vmov.i32	q9, #1	; 0x00000001
   2d2fc:	vmov.i32	q10, #1	; 0x00000001
   2d300:	vmov.i32	q8, #1	; 0x00000001
   2d304:	vmov.32	d23[1], r1
   2d308:	bic	r1, lr, #3
   2d30c:	bic	r8, r6, #3
   2d310:	vmov.32	d18[0], r2
   2d314:	vmov.32	d20[0], r5
   2d318:	str	r1, [sp, #48]	; 0x30
   2d31c:	sub	r7, r6, r1
   2d320:	mov	r1, ip
   2d324:	vorr	d16, d18, d18
   2d328:	vmov.i32	q9, #1	; 0x00000001
   2d32c:	vorr	d18, d20, d20
   2d330:	vld1.32	{d20-d21}, [r1], r4
   2d334:	subs	r8, r8, #4
   2d338:	vrev64.32	q12, q10
   2d33c:	vext.8	q12, q12, q12, #8
   2d340:	vext.8	q11, q11, q12, #12
   2d344:	vmul.i32	q9, q9, q12
   2d348:	vmul.i32	q8, q11, q8
   2d34c:	vorr	q11, q12, q12
   2d350:	bne	2d330 <GetDataSlab+0x14b4>
   2d354:	ldr	r1, [sp, #48]	; 0x30
   2d358:	vext.8	q11, q9, q8, #8
   2d35c:	vext.8	q12, q8, q8, #8
   2d360:	vmul.i32	q0, q9, q11
   2d364:	vmul.i32	q1, q8, q12
   2d368:	vmul.i32	q8, q0, d0[1]
   2d36c:	vmul.i32	q9, q1, d2[1]
   2d370:	vmov.32	r5, d16[0]
   2d374:	vmov.32	r2, d18[0]
   2d378:	cmp	lr, r1
   2d37c:	beq	2d398 <GetDataSlab+0x151c>
   2d380:	vmov.32	r1, d20[0]
   2d384:	mul	r2, r1, r2
   2d388:	ldr	r1, [r0, r7, lsl #2]
   2d38c:	subs	r7, r7, #1
   2d390:	mul	r5, r5, r1
   2d394:	bne	2d384 <GetDataSlab+0x1508>
   2d398:	ldr	r1, [fp, #12]
   2d39c:	sub	r7, fp, #176	; 0xb0
   2d3a0:	sub	r8, fp, #96	; 0x60
   2d3a4:	add	ip, ip, #4
   2d3a8:	str	r5, [r8, r6, lsl #2]
   2d3ac:	str	r2, [r7, r6, lsl #2]
   2d3b0:	ldr	r5, [sp, #60]	; 0x3c
   2d3b4:	ldr	r1, [r1, r6, lsl #2]
   2d3b8:	mla	r3, r1, r9, r3
   2d3bc:	ldr	r1, [fp, #20]
   2d3c0:	mov	r9, r2
   2d3c4:	ldr	r2, [sp, #52]	; 0x34
   2d3c8:	ldr	r1, [r1, r6, lsl #2]
   2d3cc:	add	r6, r6, #1
   2d3d0:	mul	r5, r1, r5
   2d3d4:	ldr	r1, [fp, #24]
   2d3d8:	str	r5, [sp, #60]	; 0x3c
   2d3dc:	cmp	r6, r1
   2d3e0:	bne	2d2c4 <GetDataSlab+0x1448>
   2d3e4:	ldr	r0, [sp, #56]	; 0x38
   2d3e8:	cmp	sl, #1
   2d3ec:	add	r4, r0, r3
   2d3f0:	bne	40ad8 <GetDataSlab+0x14c5c>
   2d3f4:	ldr	r0, [sp, #60]	; 0x3c
   2d3f8:	ldr	r8, [sp, #40]	; 0x28
   2d3fc:	sub	r2, fp, #96	; 0x60
   2d400:	cmp	r0, #1
   2d404:	ldr	r0, [sp, #68]	; 0x44
   2d408:	blt	516fc <GetDataSlab+0x25880>
   2d40c:	ldr	r1, [fp, #12]
   2d410:	str	r0, [sp, #56]	; 0x38
   2d414:	mov	r0, #0
   2d418:	lsl	ip, r8, #1
   2d41c:	mov	lr, #0
   2d420:	str	r0, [sp, #52]	; 0x34
   2d424:	add	sl, r1, #4
   2d428:	ldr	r1, [fp, #20]
   2d42c:	add	r9, r1, #4
   2d430:	sub	r1, fp, #136	; 0x88
   2d434:	orr	r5, r1, #4
   2d438:	orr	r1, r2, #4
   2d43c:	str	r1, [sp, #32]
   2d440:	bic	r1, r8, #7
   2d444:	str	r1, [sp, #36]	; 0x24
   2d448:	ldr	r0, [fp, #12]
   2d44c:	cmp	r8, #1
   2d450:	blt	2d518 <GetDataSlab+0x169c>
   2d454:	ldr	r7, [r0]
   2d458:	mov	r0, #0
   2d45c:	cmp	r8, #8
   2d460:	str	r7, [sp, #48]	; 0x30
   2d464:	bcc	2d4f0 <GetDataSlab+0x1674>
   2d468:	ldr	r1, [sp, #68]	; 0x44
   2d46c:	ldr	r2, [sp, #52]	; 0x34
   2d470:	mov	r6, ip
   2d474:	mla	ip, ip, r2, r1
   2d478:	add	r1, r4, r8
   2d47c:	add	r2, r4, r7
   2d480:	add	r1, r1, r7
   2d484:	ldr	r7, [sp, #68]	; 0x44
   2d488:	cmp	ip, r1
   2d48c:	bcs	2d4a8 <GetDataSlab+0x162c>
   2d490:	ldr	r1, [sp, #52]	; 0x34
   2d494:	mov	ip, r6
   2d498:	mla	r1, r6, r1, r6
   2d49c:	add	r1, r7, r1
   2d4a0:	cmp	r2, r1
   2d4a4:	bcc	2d4f0 <GetDataSlab+0x1674>
   2d4a8:	ldr	r0, [sp, #36]	; 0x24
   2d4ac:	ldr	ip, [sp, #56]	; 0x38
   2d4b0:	sub	r7, fp, #208	; 0xd0
   2d4b4:	ldr	r1, [r2]
   2d4b8:	ldr	r8, [r2, #4]
   2d4bc:	subs	r0, r0, #8
   2d4c0:	add	r2, r2, #8
   2d4c4:	str	r8, [fp, #-204]	; 0xffffff34
   2d4c8:	str	r1, [fp, #-208]	; 0xffffff30
   2d4cc:	vld1.8	{d16}, [r7 :64]
   2d4d0:	vmovl.s8	q8, d16
   2d4d4:	vst1.16	{d16-d17}, [ip]!
   2d4d8:	bne	2d4b4 <GetDataSlab+0x1638>
   2d4dc:	ldr	r8, [sp, #40]	; 0x28
   2d4e0:	ldr	r0, [sp, #36]	; 0x24
   2d4e4:	mov	ip, r6
   2d4e8:	cmp	r8, r0
   2d4ec:	beq	2d518 <GetDataSlab+0x169c>
   2d4f0:	ldr	r1, [sp, #56]	; 0x38
   2d4f4:	ldr	r6, [sp, #48]	; 0x30
   2d4f8:	sub	r2, r8, r0
   2d4fc:	add	r1, r1, r0, lsl #1
   2d500:	add	r0, r0, r6
   2d504:	add	r0, r4, r0
   2d508:	ldrsb	r6, [r0], #1
   2d50c:	subs	r2, r2, #1
   2d510:	strh	r6, [r1], #2
   2d514:	bne	2d508 <GetDataSlab+0x168c>
   2d518:	ldr	r0, [sp, #44]	; 0x2c
   2d51c:	add	r4, r4, r0
   2d520:	add	r3, r3, r0
   2d524:	ldr	r0, [fp, #24]
   2d528:	cmp	r0, #2
   2d52c:	blt	2d5d8 <GetDataSlab+0x175c>
   2d530:	mov	r1, #0
   2d534:	mov	r0, r1
   2d538:	ldr	r1, [r5, r1, lsl #2]
   2d53c:	add	r1, r1, #1
   2d540:	str	r1, [r5, r0, lsl #2]
   2d544:	ldr	r2, [r9, r0, lsl #2]
   2d548:	sdiv	r6, r1, r2
   2d54c:	mls	r1, r6, r2, r1
   2d550:	cmp	r1, #0
   2d554:	bne	2d5c8 <GetDataSlab+0x174c>
   2d558:	mov	r1, #0
   2d55c:	sub	r7, fp, #176	; 0xb0
   2d560:	str	r1, [r5, r0, lsl #2]
   2d564:	add	r1, r7, r0, lsl #2
   2d568:	ldr	r1, [r1, #4]
   2d56c:	sdiv	r2, r3, r1
   2d570:	mls	r2, r2, r1, r3
   2d574:	cmp	r2, #0
   2d578:	beq	2d598 <GetDataSlab+0x171c>
   2d57c:	ldr	r6, [r7, r0, lsl #2]
   2d580:	ldr	r7, [sl, r0, lsl #2]
   2d584:	sub	r1, r1, r2
   2d588:	mla	r1, r7, r6, r1
   2d58c:	add	r3, r1, r3
   2d590:	add	r4, r4, r1
   2d594:	b	2d5b0 <GetDataSlab+0x1734>
   2d598:	ldr	r1, [sl, r0, lsl #2]
   2d59c:	cmp	r1, #0
   2d5a0:	subne	r2, fp, #176	; 0xb0
   2d5a4:	ldrne	r2, [r2, r0, lsl #2]
   2d5a8:	mlane	r3, r2, r1, r3
   2d5ac:	mlane	r4, r2, r1, r4
   2d5b0:	ldr	r2, [fp, #24]
   2d5b4:	add	r1, r0, #1
   2d5b8:	add	r0, r0, #2
   2d5bc:	cmp	r0, r2
   2d5c0:	blt	2d534 <GetDataSlab+0x16b8>
   2d5c4:	b	2d5d8 <GetDataSlab+0x175c>
   2d5c8:	ldr	r1, [sp, #32]
   2d5cc:	ldr	r0, [r1, r0, lsl #2]
   2d5d0:	add	r4, r4, r0
   2d5d4:	add	r3, r0, r3
   2d5d8:	ldr	r0, [sp, #56]	; 0x38
   2d5dc:	ldr	r1, [sp, #60]	; 0x3c
   2d5e0:	add	lr, lr, r8
   2d5e4:	add	r0, r0, ip
   2d5e8:	cmp	lr, r1
   2d5ec:	str	r0, [sp, #56]	; 0x38
   2d5f0:	ldr	r0, [sp, #52]	; 0x34
   2d5f4:	add	r0, r0, #1
   2d5f8:	str	r0, [sp, #52]	; 0x34
   2d5fc:	mov	r0, #0
   2d600:	blt	2d448 <GetDataSlab+0x15cc>
   2d604:	b	2e97c <GetDataSlab+0x2b00>
   2d608:	sub	r1, r9, #1
   2d60c:	mov	r0, #1
   2d610:	cmp	r1, #11
   2d614:	bhi	40c70 <GetDataSlab+0x14df4>
   2d618:	add	r2, pc, #8
   2d61c:	ldr	ip, [fp, #16]
   2d620:	ldr	r1, [r2, r1, lsl #2]
   2d624:	add	pc, r2, r1
   2d628:	.word	0x00000030
   2d62c:	.word	0x0000a828
   2d630:	.word	0x0000abe0
   2d634:	.word	0x0000af78
   2d638:	.word	0x0000b310
   2d63c:	.word	0x0000b668
   2d640:	.word	0x0000b9c0
   2d644:	.word	0x00019cbc
   2d648:	.word	0x0000bd3c
   2d64c:	.word	0x00019cbc
   2d650:	.word	0x00019cbc
   2d654:	.word	0x0000c05c
   2d658:	ldr	sl, [ip]
   2d65c:	mov	r1, r6
   2d660:	mov	r3, #0
   2d664:	sub	r7, fp, #176	; 0xb0
   2d668:	sub	r8, fp, #96	; 0x60
   2d66c:	sub	r0, sl, #1
   2d670:	str	r0, [fp, #-96]	; 0xffffffa0
   2d674:	ldr	r0, [fp, #8]
   2d678:	ldr	r0, [r0]
   2d67c:	str	r0, [fp, #-176]	; 0xffffff50
   2d680:	str	r0, [sp, #44]	; 0x2c
   2d684:	ldr	r0, [fp, #24]
   2d688:	ldr	r1, [r6]
   2d68c:	cmp	r0, #2
   2d690:	str	r1, [sp, #40]	; 0x28
   2d694:	str	r1, [sp, #60]	; 0x3c
   2d698:	blt	2d7ec <GetDataSlab+0x1970>
   2d69c:	ldr	r0, [fp, #8]
   2d6a0:	ldr	r2, [sp, #44]	; 0x2c
   2d6a4:	mov	r6, #1
   2d6a8:	mov	lr, #0
   2d6ac:	mvn	r4, #15
   2d6b0:	mov	r3, #0
   2d6b4:	mov	r1, r0
   2d6b8:	sub	r0, r0, #4
   2d6bc:	mov	r9, r2
   2d6c0:	sub	ip, r1, #12
   2d6c4:	ldr	r1, [sp, #40]	; 0x28
   2d6c8:	str	r1, [sp, #60]	; 0x3c
   2d6cc:	ldr	r1, [fp, #16]
   2d6d0:	add	lr, lr, #1
   2d6d4:	cmp	lr, #4
   2d6d8:	ldr	r1, [r1, r6, lsl #2]
   2d6dc:	str	r2, [r7, r6, lsl #2]
   2d6e0:	sub	r5, r1, #1
   2d6e4:	ldr	r1, [fp, #8]
   2d6e8:	str	r5, [r8, r6, lsl #2]
   2d6ec:	ldr	r1, [r1, r6, lsl #2]
   2d6f0:	str	r1, [sp, #52]	; 0x34
   2d6f4:	bcs	2d700 <GetDataSlab+0x1884>
   2d6f8:	mov	r7, r6
   2d6fc:	b	2d78c <GetDataSlab+0x1910>
   2d700:	vmov.i32	q9, #1	; 0x00000001
   2d704:	vmov.i32	q10, #1	; 0x00000001
   2d708:	vmov.i32	q8, #1	; 0x00000001
   2d70c:	vmov.32	d23[1], r1
   2d710:	bic	r1, lr, #3
   2d714:	bic	r8, r6, #3
   2d718:	vmov.32	d18[0], r2
   2d71c:	vmov.32	d20[0], r5
   2d720:	str	r1, [sp, #48]	; 0x30
   2d724:	sub	r7, r6, r1
   2d728:	mov	r1, ip
   2d72c:	vorr	d16, d18, d18
   2d730:	vmov.i32	q9, #1	; 0x00000001
   2d734:	vorr	d18, d20, d20
   2d738:	vld1.32	{d20-d21}, [r1], r4
   2d73c:	subs	r8, r8, #4
   2d740:	vrev64.32	q12, q10
   2d744:	vext.8	q12, q12, q12, #8
   2d748:	vext.8	q11, q11, q12, #12
   2d74c:	vmul.i32	q9, q9, q12
   2d750:	vmul.i32	q8, q11, q8
   2d754:	vorr	q11, q12, q12
   2d758:	bne	2d738 <GetDataSlab+0x18bc>
   2d75c:	ldr	r1, [sp, #48]	; 0x30
   2d760:	vext.8	q11, q9, q8, #8
   2d764:	vext.8	q12, q8, q8, #8
   2d768:	vmul.i32	q0, q9, q11
   2d76c:	vmul.i32	q1, q8, q12
   2d770:	vmul.i32	q8, q0, d0[1]
   2d774:	vmul.i32	q9, q1, d2[1]
   2d778:	vmov.32	r5, d16[0]
   2d77c:	vmov.32	r2, d18[0]
   2d780:	cmp	lr, r1
   2d784:	beq	2d7a0 <GetDataSlab+0x1924>
   2d788:	vmov.32	r1, d20[0]
   2d78c:	mul	r2, r1, r2
   2d790:	ldr	r1, [r0, r7, lsl #2]
   2d794:	subs	r7, r7, #1
   2d798:	mul	r5, r5, r1
   2d79c:	bne	2d78c <GetDataSlab+0x1910>
   2d7a0:	ldr	r1, [fp, #12]
   2d7a4:	sub	r7, fp, #176	; 0xb0
   2d7a8:	sub	r8, fp, #96	; 0x60
   2d7ac:	add	ip, ip, #4
   2d7b0:	str	r5, [r8, r6, lsl #2]
   2d7b4:	str	r2, [r7, r6, lsl #2]
   2d7b8:	ldr	r5, [sp, #60]	; 0x3c
   2d7bc:	ldr	r1, [r1, r6, lsl #2]
   2d7c0:	mla	r3, r1, r9, r3
   2d7c4:	ldr	r1, [fp, #20]
   2d7c8:	mov	r9, r2
   2d7cc:	ldr	r2, [sp, #52]	; 0x34
   2d7d0:	ldr	r1, [r1, r6, lsl #2]
   2d7d4:	add	r6, r6, #1
   2d7d8:	mul	r5, r1, r5
   2d7dc:	ldr	r1, [fp, #24]
   2d7e0:	str	r5, [sp, #60]	; 0x3c
   2d7e4:	cmp	r6, r1
   2d7e8:	bne	2d6cc <GetDataSlab+0x1850>
   2d7ec:	ldr	r0, [sp, #56]	; 0x38
   2d7f0:	cmp	sl, #1
   2d7f4:	add	r4, r0, r3
   2d7f8:	bne	40c80 <GetDataSlab+0x14e04>
   2d7fc:	ldr	r0, [sp, #60]	; 0x3c
   2d800:	ldr	r8, [sp, #40]	; 0x28
   2d804:	sub	r2, fp, #96	; 0x60
   2d808:	cmp	r0, #1
   2d80c:	ldr	r0, [sp, #68]	; 0x44
   2d810:	blt	51710 <GetDataSlab+0x25894>
   2d814:	ldr	r1, [fp, #12]
   2d818:	str	r0, [sp, #56]	; 0x38
   2d81c:	mov	r0, #0
   2d820:	lsl	ip, r8, #1
   2d824:	mov	lr, #0
   2d828:	str	r0, [sp, #52]	; 0x34
   2d82c:	add	sl, r1, #4
   2d830:	ldr	r1, [fp, #20]
   2d834:	add	r9, r1, #4
   2d838:	sub	r1, fp, #136	; 0x88
   2d83c:	orr	r5, r1, #4
   2d840:	orr	r1, r2, #4
   2d844:	str	r1, [sp, #32]
   2d848:	bic	r1, r8, #7
   2d84c:	str	r1, [sp, #36]	; 0x24
   2d850:	ldr	r0, [fp, #12]
   2d854:	cmp	r8, #1
   2d858:	blt	2d920 <GetDataSlab+0x1aa4>
   2d85c:	ldr	r7, [r0]
   2d860:	mov	r0, #0
   2d864:	cmp	r8, #8
   2d868:	str	r7, [sp, #48]	; 0x30
   2d86c:	bcc	2d8f8 <GetDataSlab+0x1a7c>
   2d870:	ldr	r1, [sp, #68]	; 0x44
   2d874:	ldr	r2, [sp, #52]	; 0x34
   2d878:	mov	r6, ip
   2d87c:	mla	ip, ip, r2, r1
   2d880:	add	r1, r4, r8
   2d884:	add	r2, r4, r7
   2d888:	add	r1, r1, r7
   2d88c:	ldr	r7, [sp, #68]	; 0x44
   2d890:	cmp	ip, r1
   2d894:	bcs	2d8b0 <GetDataSlab+0x1a34>
   2d898:	ldr	r1, [sp, #52]	; 0x34
   2d89c:	mov	ip, r6
   2d8a0:	mla	r1, r6, r1, r6
   2d8a4:	add	r1, r7, r1
   2d8a8:	cmp	r2, r1
   2d8ac:	bcc	2d8f8 <GetDataSlab+0x1a7c>
   2d8b0:	ldr	r0, [sp, #36]	; 0x24
   2d8b4:	ldr	ip, [sp, #56]	; 0x38
   2d8b8:	sub	r7, fp, #192	; 0xc0
   2d8bc:	ldr	r1, [r2]
   2d8c0:	ldr	r8, [r2, #4]
   2d8c4:	subs	r0, r0, #8
   2d8c8:	add	r2, r2, #8
   2d8cc:	str	r8, [fp, #-188]	; 0xffffff44
   2d8d0:	str	r1, [fp, #-192]	; 0xffffff40
   2d8d4:	vld1.8	{d16}, [r7 :64]
   2d8d8:	vmovl.s8	q8, d16
   2d8dc:	vst1.16	{d16-d17}, [ip]!
   2d8e0:	bne	2d8bc <GetDataSlab+0x1a40>
   2d8e4:	ldr	r8, [sp, #40]	; 0x28
   2d8e8:	ldr	r0, [sp, #36]	; 0x24
   2d8ec:	mov	ip, r6
   2d8f0:	cmp	r8, r0
   2d8f4:	beq	2d920 <GetDataSlab+0x1aa4>
   2d8f8:	ldr	r1, [sp, #56]	; 0x38
   2d8fc:	ldr	r6, [sp, #48]	; 0x30
   2d900:	sub	r2, r8, r0
   2d904:	add	r1, r1, r0, lsl #1
   2d908:	add	r0, r0, r6
   2d90c:	add	r0, r4, r0
   2d910:	ldrsb	r6, [r0], #1
   2d914:	subs	r2, r2, #1
   2d918:	strh	r6, [r1], #2
   2d91c:	bne	2d910 <GetDataSlab+0x1a94>
   2d920:	ldr	r0, [sp, #44]	; 0x2c
   2d924:	add	r4, r4, r0
   2d928:	add	r3, r3, r0
   2d92c:	ldr	r0, [fp, #24]
   2d930:	cmp	r0, #2
   2d934:	blt	2d9e0 <GetDataSlab+0x1b64>
   2d938:	mov	r1, #0
   2d93c:	mov	r0, r1
   2d940:	ldr	r1, [r5, r1, lsl #2]
   2d944:	add	r1, r1, #1
   2d948:	str	r1, [r5, r0, lsl #2]
   2d94c:	ldr	r2, [r9, r0, lsl #2]
   2d950:	sdiv	r6, r1, r2
   2d954:	mls	r1, r6, r2, r1
   2d958:	cmp	r1, #0
   2d95c:	bne	2d9d0 <GetDataSlab+0x1b54>
   2d960:	mov	r1, #0
   2d964:	sub	r7, fp, #176	; 0xb0
   2d968:	str	r1, [r5, r0, lsl #2]
   2d96c:	add	r1, r7, r0, lsl #2
   2d970:	ldr	r1, [r1, #4]
   2d974:	sdiv	r2, r3, r1
   2d978:	mls	r2, r2, r1, r3
   2d97c:	cmp	r2, #0
   2d980:	beq	2d9a0 <GetDataSlab+0x1b24>
   2d984:	ldr	r6, [r7, r0, lsl #2]
   2d988:	ldr	r7, [sl, r0, lsl #2]
   2d98c:	sub	r1, r1, r2
   2d990:	mla	r1, r7, r6, r1
   2d994:	add	r3, r1, r3
   2d998:	add	r4, r4, r1
   2d99c:	b	2d9b8 <GetDataSlab+0x1b3c>
   2d9a0:	ldr	r1, [sl, r0, lsl #2]
   2d9a4:	cmp	r1, #0
   2d9a8:	subne	r2, fp, #176	; 0xb0
   2d9ac:	ldrne	r2, [r2, r0, lsl #2]
   2d9b0:	mlane	r3, r2, r1, r3
   2d9b4:	mlane	r4, r2, r1, r4
   2d9b8:	ldr	r2, [fp, #24]
   2d9bc:	add	r1, r0, #1
   2d9c0:	add	r0, r0, #2
   2d9c4:	cmp	r0, r2
   2d9c8:	blt	2d93c <GetDataSlab+0x1ac0>
   2d9cc:	b	2d9e0 <GetDataSlab+0x1b64>
   2d9d0:	ldr	r1, [sp, #32]
   2d9d4:	ldr	r0, [r1, r0, lsl #2]
   2d9d8:	add	r4, r4, r0
   2d9dc:	add	r3, r0, r3
   2d9e0:	ldr	r0, [sp, #56]	; 0x38
   2d9e4:	ldr	r1, [sp, #60]	; 0x3c
   2d9e8:	add	lr, lr, r8
   2d9ec:	add	r0, r0, ip
   2d9f0:	cmp	lr, r1
   2d9f4:	str	r0, [sp, #56]	; 0x38
   2d9f8:	ldr	r0, [sp, #52]	; 0x34
   2d9fc:	add	r0, r0, #1
   2da00:	str	r0, [sp, #52]	; 0x34
   2da04:	mov	r0, #0
   2da08:	blt	2d850 <GetDataSlab+0x19d4>
   2da0c:	b	2e97c <GetDataSlab+0x2b00>
   2da10:	sub	r1, r9, #1
   2da14:	mov	r0, #1
   2da18:	cmp	r1, #11
   2da1c:	bhi	40e18 <GetDataSlab+0x14f9c>
   2da20:	add	r2, pc, #8
   2da24:	ldr	r3, [fp, #16]
   2da28:	ldr	r1, [r2, r1, lsl #2]
   2da2c:	add	pc, r2, r1
   2da30:	.word	0x00000030
   2da34:	.word	0x0000bfa0
   2da38:	.word	0x0000c2c0
   2da3c:	.word	0x0000c5ec
   2da40:	.word	0x0000c918
   2da44:	.word	0x0000cc3c
   2da48:	.word	0x0000cf60
   2da4c:	.word	0x0001a8fc
   2da50:	.word	0x0000d298
   2da54:	.word	0x0001a8fc
   2da58:	.word	0x0001a8fc
   2da5c:	.word	0x0000d5d8
   2da60:	ldr	r4, [r3]
   2da64:	ldr	r9, [fp, #8]
   2da68:	mov	r5, #0
   2da6c:	sub	r3, fp, #176	; 0xb0
   2da70:	sub	sl, fp, #96	; 0x60
   2da74:	sub	r0, r4, #1
   2da78:	str	r0, [fp, #-96]	; 0xffffffa0
   2da7c:	ldr	r0, [r9]
   2da80:	str	r0, [fp, #-176]	; 0xffffff50
   2da84:	str	r0, [sp, #52]	; 0x34
   2da88:	ldr	r0, [fp, #24]
   2da8c:	ldr	r2, [r6]
   2da90:	cmp	r0, #2
   2da94:	mov	r0, r2
   2da98:	str	r2, [sp, #60]	; 0x3c
   2da9c:	blt	2dc0c <GetDataSlab+0x1d90>
   2daa0:	ldr	r7, [sp, #52]	; 0x34
   2daa4:	sub	r0, r9, #4
   2daa8:	sub	r6, r9, #12
   2daac:	mov	ip, #1
   2dab0:	mov	lr, #0
   2dab4:	mov	r5, #0
   2dab8:	str	r2, [sp, #60]	; 0x3c
   2dabc:	mov	r1, r7
   2dac0:	str	r7, [sp, #48]	; 0x30
   2dac4:	mov	r1, r2
   2dac8:	ldr	r1, [fp, #16]
   2dacc:	add	lr, lr, #1
   2dad0:	str	r6, [sp, #44]	; 0x2c
   2dad4:	cmp	lr, #4
   2dad8:	str	lr, [sp, #40]	; 0x28
   2dadc:	ldr	r1, [r1, ip, lsl #2]
   2dae0:	str	r7, [r3, ip, lsl #2]
   2dae4:	sub	r8, r1, #1
   2dae8:	str	r8, [sl, ip, lsl #2]
   2daec:	ldr	sl, [r9, ip, lsl #2]
   2daf0:	str	sl, [sp, #36]	; 0x24
   2daf4:	bcs	2db04 <GetDataSlab+0x1c88>
   2daf8:	mov	r1, sl
   2dafc:	mov	r3, ip
   2db00:	b	2dba0 <GetDataSlab+0x1d24>
   2db04:	vmov.i32	q9, #1	; 0x00000001
   2db08:	vmov.i32	q10, #1	; 0x00000001
   2db0c:	vmov.i32	q8, #1	; 0x00000001
   2db10:	bic	r1, lr, #3
   2db14:	bic	r9, ip, #3
   2db18:	vmov.32	d23[1], sl
   2db1c:	vmov.32	d18[0], r7
   2db20:	vmov.32	d20[0], r8
   2db24:	str	r1, [sp, #32]
   2db28:	sub	r3, ip, r1
   2db2c:	mov	r1, r6
   2db30:	mvn	r7, #15
   2db34:	vorr	d16, d18, d18
   2db38:	vmov.i32	q9, #1	; 0x00000001
   2db3c:	vorr	d18, d20, d20
   2db40:	vld1.32	{d20-d21}, [r1], r7
   2db44:	subs	r9, r9, #4
   2db48:	vrev64.32	q12, q10
   2db4c:	vext.8	q12, q12, q12, #8
   2db50:	vext.8	q11, q11, q12, #12
   2db54:	vmul.i32	q9, q9, q12
   2db58:	vmul.i32	q8, q11, q8
   2db5c:	vorr	q11, q12, q12
   2db60:	bne	2db40 <GetDataSlab+0x1cc4>
   2db64:	ldr	r1, [sp, #32]
   2db68:	vext.8	q11, q9, q8, #8
   2db6c:	vext.8	q12, q8, q8, #8
   2db70:	vmul.i32	q0, q9, q11
   2db74:	vmul.i32	q1, q8, q12
   2db78:	vmul.i32	q8, q0, d0[1]
   2db7c:	vmul.i32	q9, q1, d2[1]
   2db80:	vmov.32	r8, d16[0]
   2db84:	vmov.32	r7, d18[0]
   2db88:	cmp	lr, r1
   2db8c:	bne	2db98 <GetDataSlab+0x1d1c>
   2db90:	ldr	r9, [fp, #8]
   2db94:	b	2dbb4 <GetDataSlab+0x1d38>
   2db98:	ldr	r9, [fp, #8]
   2db9c:	vmov.32	r1, d20[0]
   2dba0:	mul	r7, r1, r7
   2dba4:	ldr	r1, [r0, r3, lsl #2]
   2dba8:	subs	r3, r3, #1
   2dbac:	mul	r8, r8, r1
   2dbb0:	bne	2dba0 <GetDataSlab+0x1d24>
   2dbb4:	sub	sl, fp, #96	; 0x60
   2dbb8:	sub	r3, fp, #176	; 0xb0
   2dbbc:	ldr	r6, [sp, #48]	; 0x30
   2dbc0:	ldr	lr, [sp, #60]	; 0x3c
   2dbc4:	str	r7, [sp, #48]	; 0x30
   2dbc8:	str	r8, [sl, ip, lsl #2]
   2dbcc:	ldr	r8, [fp, #12]
   2dbd0:	str	r7, [r3, ip, lsl #2]
   2dbd4:	ldr	r7, [sp, #36]	; 0x24
   2dbd8:	ldr	r1, [r8, ip, lsl #2]
   2dbdc:	mla	r5, r1, r6, r5
   2dbe0:	ldr	r1, [fp, #20]
   2dbe4:	ldr	r6, [sp, #44]	; 0x2c
   2dbe8:	ldr	r1, [r1, ip, lsl #2]
   2dbec:	add	ip, ip, #1
   2dbf0:	add	r6, r6, #4
   2dbf4:	mul	lr, r1, lr
   2dbf8:	ldr	r1, [fp, #24]
   2dbfc:	str	lr, [sp, #60]	; 0x3c
   2dc00:	ldr	lr, [sp, #40]	; 0x28
   2dc04:	cmp	ip, r1
   2dc08:	bne	2dac8 <GetDataSlab+0x1c4c>
   2dc0c:	ldr	r0, [sp, #56]	; 0x38
   2dc10:	cmp	r4, #1
   2dc14:	add	sl, r0, r5
   2dc18:	bne	40e28 <GetDataSlab+0x14fac>
   2dc1c:	ldr	r0, [sp, #60]	; 0x3c
   2dc20:	cmp	r0, #1
   2dc24:	blt	51724 <GetDataSlab+0x258a8>
   2dc28:	ldr	r0, [fp, #20]
   2dc2c:	mov	r9, r8
   2dc30:	mov	r8, #0
   2dc34:	add	ip, r0, #4
   2dc38:	sub	r0, fp, #136	; 0x88
   2dc3c:	orr	r7, r0, #4
   2dc40:	sub	r0, fp, #96	; 0x60
   2dc44:	orr	r0, r0, #4
   2dc48:	str	r0, [sp, #48]	; 0x30
   2dc4c:	ldr	r0, [r9], #4
   2dc50:	str	r0, [sp, #56]	; 0x38
   2dc54:	ldr	r6, [sp, #56]	; 0x38
   2dc58:	ldr	r1, [sp, #52]	; 0x34
   2dc5c:	cmp	r2, #1
   2dc60:	add	r0, r6, r5
   2dc64:	add	r3, sl, r6
   2dc68:	blt	2dca8 <GetDataSlab+0x1e2c>
   2dc6c:	ldr	r1, [sp, #68]	; 0x44
   2dc70:	ldr	r6, [fp, #20]
   2dc74:	mov	r5, #0
   2dc78:	add	r1, r1, r8, lsl #2
   2dc7c:	add	r2, r3, r5
   2dc80:	ldrsb	r2, [r2]
   2dc84:	str	r2, [r1, r5, lsl #2]
   2dc88:	add	r5, r5, #1
   2dc8c:	ldr	r2, [r6]
   2dc90:	cmp	r5, r2
   2dc94:	blt	2dc7c <GetDataSlab+0x1e00>
   2dc98:	ldr	r1, [fp, #12]
   2dc9c:	ldr	r6, [r1]
   2dca0:	ldr	r1, [fp, #8]
   2dca4:	ldr	r1, [r1]
   2dca8:	str	r1, [sp, #52]	; 0x34
   2dcac:	sub	r1, r1, r6
   2dcb0:	str	r6, [sp, #56]	; 0x38
   2dcb4:	add	r5, r0, r1
   2dcb8:	ldr	r0, [fp, #24]
   2dcbc:	add	sl, r3, r1
   2dcc0:	cmp	r0, #2
   2dcc4:	blt	2dd6c <GetDataSlab+0x1ef0>
   2dcc8:	mov	r1, #0
   2dccc:	mov	r0, r1
   2dcd0:	ldr	r1, [r7, r1, lsl #2]
   2dcd4:	add	r1, r1, #1
   2dcd8:	str	r1, [r7, r0, lsl #2]
   2dcdc:	ldr	r6, [ip, r0, lsl #2]
   2dce0:	sdiv	lr, r1, r6
   2dce4:	mls	r1, lr, r6, r1
   2dce8:	cmp	r1, #0
   2dcec:	bne	2dd5c <GetDataSlab+0x1ee0>
   2dcf0:	mov	r1, #0
   2dcf4:	sub	r3, fp, #176	; 0xb0
   2dcf8:	str	r1, [r7, r0, lsl #2]
   2dcfc:	add	r1, r3, r0, lsl #2
   2dd00:	ldr	r1, [r1, #4]
   2dd04:	sdiv	r6, r5, r1
   2dd08:	mls	r6, r6, r1, r5
   2dd0c:	cmp	r6, #0
   2dd10:	beq	2dd30 <GetDataSlab+0x1eb4>
   2dd14:	ldr	r4, [r3, r0, lsl #2]
   2dd18:	ldr	r3, [r9, r0, lsl #2]
   2dd1c:	sub	r1, r1, r6
   2dd20:	mla	r1, r3, r4, r1
   2dd24:	add	r5, r1, r5
   2dd28:	add	sl, sl, r1
   2dd2c:	b	2dd44 <GetDataSlab+0x1ec8>
   2dd30:	ldr	r1, [r9, r0, lsl #2]
   2dd34:	cmp	r1, #0
   2dd38:	ldrne	r3, [r3, r0, lsl #2]
   2dd3c:	mlane	r5, r3, r1, r5
   2dd40:	mlane	sl, r3, r1, sl
   2dd44:	ldr	r3, [fp, #24]
   2dd48:	add	r1, r0, #1
   2dd4c:	add	r0, r0, #2
   2dd50:	cmp	r0, r3
   2dd54:	blt	2dccc <GetDataSlab+0x1e50>
   2dd58:	b	2dd6c <GetDataSlab+0x1ef0>
   2dd5c:	ldr	r1, [sp, #48]	; 0x30
   2dd60:	ldr	r0, [r1, r0, lsl #2]
   2dd64:	add	sl, sl, r0
   2dd68:	add	r5, r0, r5
   2dd6c:	ldr	r1, [sp, #60]	; 0x3c
   2dd70:	add	r8, r2, r8
   2dd74:	mov	r0, #0
   2dd78:	cmp	r8, r1
   2dd7c:	blt	2dc54 <GetDataSlab+0x1dd8>
   2dd80:	b	2e97c <GetDataSlab+0x2b00>
   2dd84:	sub	r1, r9, #1
   2dd88:	mov	r0, #1
   2dd8c:	cmp	r1, #11
   2dd90:	bhi	40fc0 <GetDataSlab+0x15144>
   2dd94:	add	r2, pc, #8
   2dd98:	ldr	r3, [fp, #16]
   2dd9c:	ldr	r1, [r2, r1, lsl #2]
   2dda0:	add	pc, r2, r1
   2dda4:	.word	0x00000030
   2dda8:	.word	0x0000d580
   2ddac:	.word	0x0000d8a0
   2ddb0:	.word	0x0000dbcc
   2ddb4:	.word	0x0000def8
   2ddb8:	.word	0x0000e21c
   2ddbc:	.word	0x0000e540
   2ddc0:	.word	0x0001b5ac
   2ddc4:	.word	0x0000e878
   2ddc8:	.word	0x0001b5ac
   2ddcc:	.word	0x0001b5ac
   2ddd0:	.word	0x0000ebb0
   2ddd4:	ldr	r4, [r3]
   2ddd8:	ldr	r9, [fp, #8]
   2dddc:	mov	r5, #0
   2dde0:	sub	r3, fp, #176	; 0xb0
   2dde4:	sub	sl, fp, #96	; 0x60
   2dde8:	sub	r0, r4, #1
   2ddec:	str	r0, [fp, #-96]	; 0xffffffa0
   2ddf0:	ldr	r0, [r9]
   2ddf4:	str	r0, [fp, #-176]	; 0xffffff50
   2ddf8:	str	r0, [sp, #52]	; 0x34
   2ddfc:	ldr	r0, [fp, #24]
   2de00:	ldr	r2, [r6]
   2de04:	cmp	r0, #2
   2de08:	mov	r0, r2
   2de0c:	str	r2, [sp, #60]	; 0x3c
   2de10:	blt	2df80 <GetDataSlab+0x2104>
   2de14:	ldr	r7, [sp, #52]	; 0x34
   2de18:	sub	r0, r9, #4
   2de1c:	sub	r6, r9, #12
   2de20:	mov	ip, #1
   2de24:	mov	lr, #0
   2de28:	mov	r5, #0
   2de2c:	str	r2, [sp, #60]	; 0x3c
   2de30:	mov	r1, r7
   2de34:	str	r7, [sp, #48]	; 0x30
   2de38:	mov	r1, r2
   2de3c:	ldr	r1, [fp, #16]
   2de40:	add	lr, lr, #1
   2de44:	str	r6, [sp, #44]	; 0x2c
   2de48:	cmp	lr, #4
   2de4c:	str	lr, [sp, #40]	; 0x28
   2de50:	ldr	r1, [r1, ip, lsl #2]
   2de54:	str	r7, [r3, ip, lsl #2]
   2de58:	sub	r8, r1, #1
   2de5c:	str	r8, [sl, ip, lsl #2]
   2de60:	ldr	sl, [r9, ip, lsl #2]
   2de64:	str	sl, [sp, #36]	; 0x24
   2de68:	bcs	2de78 <GetDataSlab+0x1ffc>
   2de6c:	mov	r1, sl
   2de70:	mov	r3, ip
   2de74:	b	2df14 <GetDataSlab+0x2098>
   2de78:	vmov.i32	q9, #1	; 0x00000001
   2de7c:	vmov.i32	q10, #1	; 0x00000001
   2de80:	vmov.i32	q8, #1	; 0x00000001
   2de84:	bic	r1, lr, #3
   2de88:	bic	r9, ip, #3
   2de8c:	vmov.32	d23[1], sl
   2de90:	vmov.32	d18[0], r7
   2de94:	vmov.32	d20[0], r8
   2de98:	str	r1, [sp, #32]
   2de9c:	sub	r3, ip, r1
   2dea0:	mov	r1, r6
   2dea4:	mvn	r7, #15
   2dea8:	vorr	d16, d18, d18
   2deac:	vmov.i32	q9, #1	; 0x00000001
   2deb0:	vorr	d18, d20, d20
   2deb4:	vld1.32	{d20-d21}, [r1], r7
   2deb8:	subs	r9, r9, #4
   2debc:	vrev64.32	q12, q10
   2dec0:	vext.8	q12, q12, q12, #8
   2dec4:	vext.8	q11, q11, q12, #12
   2dec8:	vmul.i32	q9, q9, q12
   2decc:	vmul.i32	q8, q11, q8
   2ded0:	vorr	q11, q12, q12
   2ded4:	bne	2deb4 <GetDataSlab+0x2038>
   2ded8:	ldr	r1, [sp, #32]
   2dedc:	vext.8	q11, q9, q8, #8
   2dee0:	vext.8	q12, q8, q8, #8
   2dee4:	vmul.i32	q0, q9, q11
   2dee8:	vmul.i32	q1, q8, q12
   2deec:	vmul.i32	q8, q0, d0[1]
   2def0:	vmul.i32	q9, q1, d2[1]
   2def4:	vmov.32	r8, d16[0]
   2def8:	vmov.32	r7, d18[0]
   2defc:	cmp	lr, r1
   2df00:	bne	2df0c <GetDataSlab+0x2090>
   2df04:	ldr	r9, [fp, #8]
   2df08:	b	2df28 <GetDataSlab+0x20ac>
   2df0c:	ldr	r9, [fp, #8]
   2df10:	vmov.32	r1, d20[0]
   2df14:	mul	r7, r1, r7
   2df18:	ldr	r1, [r0, r3, lsl #2]
   2df1c:	subs	r3, r3, #1
   2df20:	mul	r8, r8, r1
   2df24:	bne	2df14 <GetDataSlab+0x2098>
   2df28:	sub	sl, fp, #96	; 0x60
   2df2c:	sub	r3, fp, #176	; 0xb0
   2df30:	ldr	r6, [sp, #48]	; 0x30
   2df34:	ldr	lr, [sp, #60]	; 0x3c
   2df38:	str	r7, [sp, #48]	; 0x30
   2df3c:	str	r8, [sl, ip, lsl #2]
   2df40:	ldr	r8, [fp, #12]
   2df44:	str	r7, [r3, ip, lsl #2]
   2df48:	ldr	r7, [sp, #36]	; 0x24
   2df4c:	ldr	r1, [r8, ip, lsl #2]
   2df50:	mla	r5, r1, r6, r5
   2df54:	ldr	r1, [fp, #20]
   2df58:	ldr	r6, [sp, #44]	; 0x2c
   2df5c:	ldr	r1, [r1, ip, lsl #2]
   2df60:	add	ip, ip, #1
   2df64:	add	r6, r6, #4
   2df68:	mul	lr, r1, lr
   2df6c:	ldr	r1, [fp, #24]
   2df70:	str	lr, [sp, #60]	; 0x3c
   2df74:	ldr	lr, [sp, #40]	; 0x28
   2df78:	cmp	ip, r1
   2df7c:	bne	2de3c <GetDataSlab+0x1fc0>
   2df80:	ldr	r0, [sp, #56]	; 0x38
   2df84:	cmp	r4, #1
   2df88:	add	sl, r0, r5
   2df8c:	bne	40fd0 <GetDataSlab+0x15154>
   2df90:	ldr	r0, [sp, #60]	; 0x3c
   2df94:	cmp	r0, #1
   2df98:	blt	51738 <GetDataSlab+0x258bc>
   2df9c:	ldr	r0, [fp, #20]
   2dfa0:	mov	r9, r8
   2dfa4:	mov	r8, #0
   2dfa8:	add	ip, r0, #4
   2dfac:	sub	r0, fp, #136	; 0x88
   2dfb0:	orr	r7, r0, #4
   2dfb4:	sub	r0, fp, #96	; 0x60
   2dfb8:	orr	r0, r0, #4
   2dfbc:	str	r0, [sp, #48]	; 0x30
   2dfc0:	ldr	r0, [r9], #4
   2dfc4:	str	r0, [sp, #56]	; 0x38
   2dfc8:	ldr	r6, [sp, #56]	; 0x38
   2dfcc:	ldr	r1, [sp, #52]	; 0x34
   2dfd0:	cmp	r2, #1
   2dfd4:	add	r0, r6, r5
   2dfd8:	add	r3, sl, r6
   2dfdc:	blt	2e01c <GetDataSlab+0x21a0>
   2dfe0:	ldr	r1, [sp, #68]	; 0x44
   2dfe4:	ldr	r6, [fp, #20]
   2dfe8:	mov	r5, #0
   2dfec:	add	r1, r1, r8, lsl #2
   2dff0:	add	r2, r3, r5
   2dff4:	ldrsb	r2, [r2]
   2dff8:	str	r2, [r1, r5, lsl #2]
   2dffc:	add	r5, r5, #1
   2e000:	ldr	r2, [r6]
   2e004:	cmp	r5, r2
   2e008:	blt	2dff0 <GetDataSlab+0x2174>
   2e00c:	ldr	r1, [fp, #12]
   2e010:	ldr	r6, [r1]
   2e014:	ldr	r1, [fp, #8]
   2e018:	ldr	r1, [r1]
   2e01c:	str	r1, [sp, #52]	; 0x34
   2e020:	sub	r1, r1, r6
   2e024:	str	r6, [sp, #56]	; 0x38
   2e028:	add	r5, r0, r1
   2e02c:	ldr	r0, [fp, #24]
   2e030:	add	sl, r3, r1
   2e034:	cmp	r0, #2
   2e038:	blt	2e0e0 <GetDataSlab+0x2264>
   2e03c:	mov	r1, #0
   2e040:	mov	r0, r1
   2e044:	ldr	r1, [r7, r1, lsl #2]
   2e048:	add	r1, r1, #1
   2e04c:	str	r1, [r7, r0, lsl #2]
   2e050:	ldr	r6, [ip, r0, lsl #2]
   2e054:	sdiv	lr, r1, r6
   2e058:	mls	r1, lr, r6, r1
   2e05c:	cmp	r1, #0
   2e060:	bne	2e0d0 <GetDataSlab+0x2254>
   2e064:	mov	r1, #0
   2e068:	sub	r3, fp, #176	; 0xb0
   2e06c:	str	r1, [r7, r0, lsl #2]
   2e070:	add	r1, r3, r0, lsl #2
   2e074:	ldr	r1, [r1, #4]
   2e078:	sdiv	r6, r5, r1
   2e07c:	mls	r6, r6, r1, r5
   2e080:	cmp	r6, #0
   2e084:	beq	2e0a4 <GetDataSlab+0x2228>
   2e088:	ldr	r4, [r3, r0, lsl #2]
   2e08c:	ldr	r3, [r9, r0, lsl #2]
   2e090:	sub	r1, r1, r6
   2e094:	mla	r1, r3, r4, r1
   2e098:	add	r5, r1, r5
   2e09c:	add	sl, sl, r1
   2e0a0:	b	2e0b8 <GetDataSlab+0x223c>
   2e0a4:	ldr	r1, [r9, r0, lsl #2]
   2e0a8:	cmp	r1, #0
   2e0ac:	ldrne	r3, [r3, r0, lsl #2]
   2e0b0:	mlane	r5, r3, r1, r5
   2e0b4:	mlane	sl, r3, r1, sl
   2e0b8:	ldr	r3, [fp, #24]
   2e0bc:	add	r1, r0, #1
   2e0c0:	add	r0, r0, #2
   2e0c4:	cmp	r0, r3
   2e0c8:	blt	2e040 <GetDataSlab+0x21c4>
   2e0cc:	b	2e0e0 <GetDataSlab+0x2264>
   2e0d0:	ldr	r1, [sp, #48]	; 0x30
   2e0d4:	ldr	r0, [r1, r0, lsl #2]
   2e0d8:	add	sl, sl, r0
   2e0dc:	add	r5, r0, r5
   2e0e0:	ldr	r1, [sp, #60]	; 0x3c
   2e0e4:	add	r8, r2, r8
   2e0e8:	mov	r0, #0
   2e0ec:	cmp	r8, r1
   2e0f0:	blt	2dfc8 <GetDataSlab+0x214c>
   2e0f4:	b	2e97c <GetDataSlab+0x2b00>
   2e0f8:	sub	r1, r9, #1
   2e0fc:	mov	r0, #1
   2e100:	cmp	r1, #11
   2e104:	bhi	4a394 <GetDataSlab+0x1e518>
   2e108:	add	r2, pc, #4
   2e10c:	ldr	r1, [r2, r1, lsl #2]
   2e110:	add	pc, r2, r1
   2e114:	.word	0x00000030
   2e118:	.word	0x0000eb5c
   2e11c:	.word	0x0000ef2c
   2e120:	.word	0x0000f294
   2e124:	.word	0x0000f5f8
   2e128:	.word	0x0000f978
   2e12c:	.word	0x0000fcf0
   2e130:	.word	0x0001c280
   2e134:	.word	0x0001002c
   2e138:	.word	0x0001c280
   2e13c:	.word	0x0001c280
   2e140:	.word	0x00010370
   2e144:	ldr	r0, [fp, #16]
   2e148:	mov	r7, lr
   2e14c:	mov	r5, #0
   2e150:	sub	lr, fp, #96	; 0x60
   2e154:	ldr	r8, [r0]
   2e158:	sub	r0, r8, #1
   2e15c:	str	r0, [fp, #-96]	; 0xffffffa0
   2e160:	ldr	r0, [fp, #8]
   2e164:	ldr	r0, [r0]
   2e168:	str	r0, [fp, #-176]	; 0xffffff50
   2e16c:	str	r0, [sp, #40]	; 0x28
   2e170:	ldr	r0, [fp, #24]
   2e174:	ldr	r1, [r6]
   2e178:	cmp	r0, #2
   2e17c:	str	r1, [sp, #52]	; 0x34
   2e180:	str	r1, [sp, #60]	; 0x3c
   2e184:	blt	2e2e8 <GetDataSlab+0x246c>
   2e188:	ldr	r0, [fp, #8]
   2e18c:	ldr	r3, [sp, #40]	; 0x28
   2e190:	mov	r6, #1
   2e194:	mov	r4, #0
   2e198:	mvn	r9, #15
   2e19c:	mov	r5, #0
   2e1a0:	mov	r1, r0
   2e1a4:	sub	r0, r0, #4
   2e1a8:	mov	r2, r3
   2e1ac:	sub	ip, r1, #12
   2e1b0:	ldr	r1, [sp, #52]	; 0x34
   2e1b4:	str	r1, [sp, #60]	; 0x3c
   2e1b8:	ldr	r1, [fp, #16]
   2e1bc:	str	r2, [sp, #48]	; 0x30
   2e1c0:	add	r4, r4, #1
   2e1c4:	cmp	r4, #4
   2e1c8:	ldr	r1, [r1, r6, lsl #2]
   2e1cc:	str	r3, [r7, r6, lsl #2]
   2e1d0:	sub	r2, r1, #1
   2e1d4:	ldr	r1, [fp, #8]
   2e1d8:	str	r2, [lr, r6, lsl #2]
   2e1dc:	ldr	lr, [r1, r6, lsl #2]
   2e1e0:	bcs	2e1f4 <GetDataSlab+0x2378>
   2e1e4:	mov	sl, lr
   2e1e8:	mov	r1, lr
   2e1ec:	mov	r7, r6
   2e1f0:	b	2e284 <GetDataSlab+0x2408>
   2e1f4:	vmov.i32	q9, #1	; 0x00000001
   2e1f8:	vmov.i32	q10, #1	; 0x00000001
   2e1fc:	vmov.i32	q8, #1	; 0x00000001
   2e200:	bic	r1, r4, #3
   2e204:	bic	sl, r6, #3
   2e208:	vmov.32	d23[1], lr
   2e20c:	vmov.32	d18[0], r3
   2e210:	vmov.32	d20[0], r2
   2e214:	str	r1, [sp, #44]	; 0x2c
   2e218:	sub	r7, r6, r1
   2e21c:	mov	r1, ip
   2e220:	vorr	d16, d18, d18
   2e224:	vmov.i32	q9, #1	; 0x00000001
   2e228:	vorr	d18, d20, d20
   2e22c:	vld1.32	{d20-d21}, [r1], r9
   2e230:	subs	sl, sl, #4
   2e234:	vrev64.32	q12, q10
   2e238:	vext.8	q12, q12, q12, #8
   2e23c:	vext.8	q11, q11, q12, #12
   2e240:	vmul.i32	q9, q9, q12
   2e244:	vmul.i32	q8, q11, q8
   2e248:	vorr	q11, q12, q12
   2e24c:	bne	2e22c <GetDataSlab+0x23b0>
   2e250:	ldr	r1, [sp, #44]	; 0x2c
   2e254:	vext.8	q11, q9, q8, #8
   2e258:	vext.8	q12, q8, q8, #8
   2e25c:	mov	sl, lr
   2e260:	vmul.i32	q0, q9, q11
   2e264:	vmul.i32	q1, q8, q12
   2e268:	vmul.i32	q8, q0, d0[1]
   2e26c:	vmul.i32	q9, q1, d2[1]
   2e270:	vmov.32	r2, d16[0]
   2e274:	vmov.32	r3, d18[0]
   2e278:	cmp	r4, r1
   2e27c:	beq	2e298 <GetDataSlab+0x241c>
   2e280:	vmov.32	r1, d20[0]
   2e284:	mul	r3, r1, r3
   2e288:	ldr	r1, [r0, r7, lsl #2]
   2e28c:	subs	r7, r7, #1
   2e290:	mul	r2, r2, r1
   2e294:	bne	2e284 <GetDataSlab+0x2408>
   2e298:	ldr	r1, [fp, #12]
   2e29c:	sub	r7, fp, #176	; 0xb0
   2e2a0:	sub	lr, fp, #96	; 0x60
   2e2a4:	add	ip, ip, #4
   2e2a8:	str	r2, [lr, r6, lsl #2]
   2e2ac:	str	r3, [r7, r6, lsl #2]
   2e2b0:	ldr	r2, [sp, #48]	; 0x30
   2e2b4:	ldr	r1, [r1, r6, lsl #2]
   2e2b8:	mla	r5, r1, r2, r5
   2e2bc:	ldr	r1, [fp, #20]
   2e2c0:	ldr	r2, [sp, #60]	; 0x3c
   2e2c4:	ldr	r1, [r1, r6, lsl #2]
   2e2c8:	add	r6, r6, #1
   2e2cc:	mul	r2, r1, r2
   2e2d0:	ldr	r1, [fp, #24]
   2e2d4:	str	r2, [sp, #60]	; 0x3c
   2e2d8:	mov	r2, r3
   2e2dc:	mov	r3, sl
   2e2e0:	cmp	r6, r1
   2e2e4:	bne	2e1b8 <GetDataSlab+0x233c>
   2e2e8:	ldr	r0, [sp, #56]	; 0x38
   2e2ec:	cmp	r8, #1
   2e2f0:	mov	r2, lr
   2e2f4:	add	r4, r0, r5
   2e2f8:	bne	41168 <GetDataSlab+0x152ec>
   2e2fc:	ldr	r0, [sp, #60]	; 0x3c
   2e300:	ldr	r7, [sp, #52]	; 0x34
   2e304:	cmp	r0, #1
   2e308:	ldr	r0, [sp, #68]	; 0x44
   2e30c:	blt	5174c <GetDataSlab+0x258d0>
   2e310:	ldr	r1, [fp, #12]
   2e314:	str	r0, [sp, #56]	; 0x38
   2e318:	mov	r0, #0
   2e31c:	mov	r3, r2
   2e320:	mov	lr, #0
   2e324:	str	r0, [sp, #48]	; 0x30
   2e328:	add	sl, r1, #4
   2e32c:	ldr	r1, [fp, #20]
   2e330:	add	r9, r1, #4
   2e334:	sub	r1, fp, #136	; 0x88
   2e338:	orr	r6, r1, #4
   2e33c:	orr	r1, r2, #4
   2e340:	add	r2, sp, #240	; 0xf0
   2e344:	str	r1, [sp, #32]
   2e348:	bic	r1, r7, #1
   2e34c:	str	r1, [sp, #36]	; 0x24
   2e350:	lsl	r1, r7, #3
   2e354:	str	r1, [sp, #44]	; 0x2c
   2e358:	cmp	r7, #1
   2e35c:	blt	2e42c <GetDataSlab+0x25b0>
   2e360:	ldr	r0, [fp, #12]
   2e364:	mov	r7, #0
   2e368:	ldr	r8, [r0]
   2e36c:	beq	2e3f8 <GetDataSlab+0x257c>
   2e370:	ldr	r0, [sp, #68]	; 0x44
   2e374:	ldr	r1, [sp, #44]	; 0x2c
   2e378:	ldr	r3, [sp, #48]	; 0x30
   2e37c:	mla	ip, r1, r3, r0
   2e380:	ldr	r0, [sp, #52]	; 0x34
   2e384:	ldr	r1, [sp, #68]	; 0x44
   2e388:	add	r3, r4, r8
   2e38c:	add	r0, r4, r0
   2e390:	add	r0, r0, r8
   2e394:	cmp	ip, r0
   2e398:	bcs	2e3b8 <GetDataSlab+0x253c>
   2e39c:	mov	ip, r1
   2e3a0:	ldr	r0, [sp, #44]	; 0x2c
   2e3a4:	ldr	r1, [sp, #48]	; 0x30
   2e3a8:	mla	r0, r0, r1, r0
   2e3ac:	add	r0, ip, r0
   2e3b0:	cmp	r3, r0
   2e3b4:	bcc	2e3f8 <GetDataSlab+0x257c>
   2e3b8:	ldr	r7, [sp, #36]	; 0x24
   2e3bc:	ldr	ip, [sp, #56]	; 0x38
   2e3c0:	add	r1, sp, #200	; 0xc8
   2e3c4:	ldrh	r0, [r3], #2
   2e3c8:	subs	r7, r7, #2
   2e3cc:	strh	r0, [r1, #40]	; 0x28
   2e3d0:	vld1.16	{d16[0]}, [r2 :16]
   2e3d4:	vmovl.s8	q8, d16
   2e3d8:	vmovl.s16	q8, d16
   2e3dc:	vmovl.s32	q8, d16
   2e3e0:	vst1.64	{d16-d17}, [ip]!
   2e3e4:	bne	2e3c4 <GetDataSlab+0x2548>
   2e3e8:	ldr	r7, [sp, #36]	; 0x24
   2e3ec:	ldr	r0, [sp, #52]	; 0x34
   2e3f0:	cmp	r0, r7
   2e3f4:	beq	2e42c <GetDataSlab+0x25b0>
   2e3f8:	ldr	r0, [sp, #52]	; 0x34
   2e3fc:	sub	r3, r0, r7
   2e400:	ldr	r0, [sp, #56]	; 0x38
   2e404:	add	r0, r0, r7, lsl #3
   2e408:	add	r7, r7, r8
   2e40c:	add	r7, r4, r7
   2e410:	ldrsb	r8, [r7], #1
   2e414:	subs	r3, r3, #1
   2e418:	asr	r1, r8, #31
   2e41c:	str	r8, [r0]
   2e420:	str	r1, [r0, #4]
   2e424:	add	r0, r0, #8
   2e428:	bne	2e410 <GetDataSlab+0x2594>
   2e42c:	ldr	r0, [sp, #40]	; 0x28
   2e430:	add	r4, r4, r0
   2e434:	add	r5, r5, r0
   2e438:	ldr	r0, [fp, #24]
   2e43c:	cmp	r0, #2
   2e440:	blt	2e4f4 <GetDataSlab+0x2678>
   2e444:	mov	r3, #0
   2e448:	mov	r8, #0
   2e44c:	ldr	r1, [r6, r3, lsl #2]
   2e450:	mov	r0, r3
   2e454:	add	r1, r1, #1
   2e458:	str	r1, [r6, r3, lsl #2]
   2e45c:	ldr	r3, [r9, r3, lsl #2]
   2e460:	sdiv	r7, r1, r3
   2e464:	mls	r1, r7, r3, r1
   2e468:	cmp	r1, #0
   2e46c:	bne	2e4e4 <GetDataSlab+0x2668>
   2e470:	mov	ip, r2
   2e474:	sub	r2, fp, #176	; 0xb0
   2e478:	str	r8, [r6, r0, lsl #2]
   2e47c:	add	r1, r2, r0, lsl #2
   2e480:	ldr	r3, [r1, #4]
   2e484:	sdiv	r1, r5, r3
   2e488:	mls	r7, r1, r3, r5
   2e48c:	cmp	r7, #0
   2e490:	beq	2e4b0 <GetDataSlab+0x2634>
   2e494:	ldr	r1, [r2, r0, lsl #2]
   2e498:	ldr	r2, [sl, r0, lsl #2]
   2e49c:	sub	r3, r3, r7
   2e4a0:	mla	r1, r2, r1, r3
   2e4a4:	add	r5, r1, r5
   2e4a8:	add	r4, r4, r1
   2e4ac:	b	2e4c8 <GetDataSlab+0x264c>
   2e4b0:	ldr	r3, [sl, r0, lsl #2]
   2e4b4:	cmp	r3, #0
   2e4b8:	subne	r1, fp, #176	; 0xb0
   2e4bc:	ldrne	r1, [r1, r0, lsl #2]
   2e4c0:	mlane	r5, r1, r3, r5
   2e4c4:	mlane	r4, r1, r3, r4
   2e4c8:	ldr	r1, [fp, #24]
   2e4cc:	add	r3, r0, #1
   2e4d0:	add	r0, r0, #2
   2e4d4:	mov	r2, ip
   2e4d8:	cmp	r0, r1
   2e4dc:	blt	2e44c <GetDataSlab+0x25d0>
   2e4e0:	b	2e4f4 <GetDataSlab+0x2678>
   2e4e4:	ldr	r1, [sp, #32]
   2e4e8:	ldr	r0, [r1, r0, lsl #2]
   2e4ec:	add	r4, r4, r0
   2e4f0:	add	r5, r0, r5
   2e4f4:	ldr	r0, [sp, #44]	; 0x2c
   2e4f8:	ldr	r1, [sp, #56]	; 0x38
   2e4fc:	ldr	r7, [sp, #52]	; 0x34
   2e500:	add	r1, r1, r0
   2e504:	ldr	r0, [sp, #48]	; 0x30
   2e508:	add	lr, lr, r7
   2e50c:	str	r1, [sp, #56]	; 0x38
   2e510:	ldr	r1, [sp, #60]	; 0x3c
   2e514:	add	r0, r0, #1
   2e518:	str	r0, [sp, #48]	; 0x30
   2e51c:	mov	r0, #0
   2e520:	cmp	lr, r1
   2e524:	blt	2e358 <GetDataSlab+0x24dc>
   2e528:	b	2e97c <GetDataSlab+0x2b00>
   2e52c:	sub	r1, r9, #1
   2e530:	mov	r0, #1
   2e534:	cmp	r1, #11
   2e538:	bhi	4b450 <GetDataSlab+0x1f5d4>
   2e53c:	add	r2, pc, #4
   2e540:	ldr	r1, [r2, r1, lsl #2]
   2e544:	add	pc, r2, r1
   2e548:	.word	0x00000030
   2e54c:	.word	0x00010310
   2e550:	.word	0x000106dc
   2e554:	.word	0x00010a44
   2e558:	.word	0x00010da8
   2e55c:	.word	0x00011128
   2e560:	.word	0x000114a0
   2e564:	.word	0x0001cf08
   2e568:	.word	0x000117dc
   2e56c:	.word	0x0001cf08
   2e570:	.word	0x0001cf08
   2e574:	.word	0x00011b20
   2e578:	ldr	r0, [fp, #16]
   2e57c:	mov	r7, lr
   2e580:	mov	r3, #0
   2e584:	sub	lr, fp, #96	; 0x60
   2e588:	ldr	r8, [r0]
   2e58c:	sub	r0, r8, #1
   2e590:	str	r0, [fp, #-96]	; 0xffffffa0
   2e594:	ldr	r0, [fp, #8]
   2e598:	ldr	r0, [r0]
   2e59c:	str	r0, [fp, #-176]	; 0xffffff50
   2e5a0:	str	r0, [sp, #36]	; 0x24
   2e5a4:	ldr	r0, [fp, #24]
   2e5a8:	ldr	r1, [r6]
   2e5ac:	cmp	r0, #2
   2e5b0:	str	r1, [sp, #44]	; 0x2c
   2e5b4:	str	r1, [sp, #60]	; 0x3c
   2e5b8:	blt	2e728 <GetDataSlab+0x28ac>
   2e5bc:	ldr	r0, [fp, #8]
   2e5c0:	ldr	r2, [sp, #36]	; 0x24
   2e5c4:	mov	r6, #1
   2e5c8:	mvn	r9, #15
   2e5cc:	mov	r3, #0
   2e5d0:	mov	r1, r0
   2e5d4:	sub	r0, r0, #4
   2e5d8:	mov	r4, r2
   2e5dc:	sub	ip, r1, #12
   2e5e0:	mov	r1, #0
   2e5e4:	str	r1, [sp, #52]	; 0x34
   2e5e8:	ldr	r1, [sp, #44]	; 0x2c
   2e5ec:	str	r1, [sp, #60]	; 0x3c
   2e5f0:	ldr	r1, [fp, #16]
   2e5f4:	str	r4, [sp, #48]	; 0x30
   2e5f8:	ldr	r4, [sp, #52]	; 0x34
   2e5fc:	ldr	r1, [r1, r6, lsl #2]
   2e600:	str	r2, [r7, r6, lsl #2]
   2e604:	add	r4, r4, #1
   2e608:	cmp	r4, #4
   2e60c:	str	r4, [sp, #52]	; 0x34
   2e610:	sub	r5, r1, #1
   2e614:	ldr	r1, [fp, #8]
   2e618:	str	r5, [lr, r6, lsl #2]
   2e61c:	ldr	lr, [r1, r6, lsl #2]
   2e620:	bcs	2e634 <GetDataSlab+0x27b8>
   2e624:	mov	sl, lr
   2e628:	mov	r1, lr
   2e62c:	mov	r7, r6
   2e630:	b	2e6c4 <GetDataSlab+0x2848>
   2e634:	vmov.i32	q9, #1	; 0x00000001
   2e638:	vmov.i32	q10, #1	; 0x00000001
   2e63c:	vmov.i32	q8, #1	; 0x00000001
   2e640:	bic	r1, r4, #3
   2e644:	bic	sl, r6, #3
   2e648:	vmov.32	d23[1], lr
   2e64c:	vmov.32	d18[0], r2
   2e650:	vmov.32	d20[0], r5
   2e654:	str	r1, [sp, #40]	; 0x28
   2e658:	sub	r7, r6, r1
   2e65c:	mov	r1, ip
   2e660:	vorr	d16, d18, d18
   2e664:	vmov.i32	q9, #1	; 0x00000001
   2e668:	vorr	d18, d20, d20
   2e66c:	vld1.32	{d20-d21}, [r1], r9
   2e670:	subs	sl, sl, #4
   2e674:	vrev64.32	q12, q10
   2e678:	vext.8	q12, q12, q12, #8
   2e67c:	vext.8	q11, q11, q12, #12
   2e680:	vmul.i32	q9, q9, q12
   2e684:	vmul.i32	q8, q11, q8
   2e688:	vorr	q11, q12, q12
   2e68c:	bne	2e66c <GetDataSlab+0x27f0>
   2e690:	ldr	r1, [sp, #40]	; 0x28
   2e694:	vext.8	q11, q9, q8, #8
   2e698:	vext.8	q12, q8, q8, #8
   2e69c:	mov	sl, lr
   2e6a0:	vmul.i32	q0, q9, q11
   2e6a4:	vmul.i32	q1, q8, q12
   2e6a8:	vmul.i32	q8, q0, d0[1]
   2e6ac:	vmul.i32	q9, q1, d2[1]
   2e6b0:	vmov.32	r5, d16[0]
   2e6b4:	vmov.32	r2, d18[0]
   2e6b8:	cmp	r4, r1
   2e6bc:	beq	2e6d8 <GetDataSlab+0x285c>
   2e6c0:	vmov.32	r1, d20[0]
   2e6c4:	mul	r2, r1, r2
   2e6c8:	ldr	r1, [r0, r7, lsl #2]
   2e6cc:	subs	r7, r7, #1
   2e6d0:	mul	r5, r5, r1
   2e6d4:	bne	2e6c4 <GetDataSlab+0x2848>
   2e6d8:	ldr	r1, [fp, #12]
   2e6dc:	sub	r7, fp, #176	; 0xb0
   2e6e0:	sub	lr, fp, #96	; 0x60
   2e6e4:	ldr	r4, [sp, #48]	; 0x30
   2e6e8:	add	ip, ip, #4
   2e6ec:	str	r5, [lr, r6, lsl #2]
   2e6f0:	str	r2, [r7, r6, lsl #2]
   2e6f4:	ldr	r5, [sp, #60]	; 0x3c
   2e6f8:	ldr	r1, [r1, r6, lsl #2]
   2e6fc:	mla	r3, r1, r4, r3
   2e700:	ldr	r1, [fp, #20]
   2e704:	mov	r4, r2
   2e708:	mov	r2, sl
   2e70c:	ldr	r1, [r1, r6, lsl #2]
   2e710:	add	r6, r6, #1
   2e714:	mul	r5, r1, r5
   2e718:	ldr	r1, [fp, #24]
   2e71c:	str	r5, [sp, #60]	; 0x3c
   2e720:	cmp	r6, r1
   2e724:	bne	2e5f0 <GetDataSlab+0x2774>
   2e728:	ldr	r0, [sp, #56]	; 0x38
   2e72c:	cmp	r8, #1
   2e730:	add	r4, r0, r3
   2e734:	bne	41300 <GetDataSlab+0x15484>
   2e738:	ldr	r0, [sp, #60]	; 0x3c
   2e73c:	ldr	ip, [sp, #44]	; 0x2c
   2e740:	cmp	r0, #1
   2e744:	ldr	r0, [sp, #68]	; 0x44
   2e748:	blt	51760 <GetDataSlab+0x258e4>
   2e74c:	ldr	r1, [fp, #12]
   2e750:	str	r0, [sp, #56]	; 0x38
   2e754:	mov	r0, #0
   2e758:	mov	lr, #0
   2e75c:	str	r0, [sp, #52]	; 0x34
   2e760:	add	sl, r1, #4
   2e764:	ldr	r1, [fp, #20]
   2e768:	add	r9, r1, #4
   2e76c:	sub	r1, fp, #136	; 0x88
   2e770:	orr	r6, r1, #4
   2e774:	sub	r1, fp, #96	; 0x60
   2e778:	orr	r1, r1, #4
   2e77c:	str	r1, [sp, #32]
   2e780:	bic	r1, ip, #1
   2e784:	str	r1, [sp, #40]	; 0x28
   2e788:	lsl	r1, ip, #3
   2e78c:	str	r1, [sp, #48]	; 0x30
   2e790:	cmp	ip, #1
   2e794:	blt	2e860 <GetDataSlab+0x29e4>
   2e798:	ldr	r0, [fp, #12]
   2e79c:	ldr	r8, [r0]
   2e7a0:	mov	r0, #0
   2e7a4:	beq	2e830 <GetDataSlab+0x29b4>
   2e7a8:	ldr	r1, [sp, #68]	; 0x44
   2e7ac:	ldr	r2, [sp, #48]	; 0x30
   2e7b0:	ldr	r7, [sp, #52]	; 0x34
   2e7b4:	mla	ip, r2, r7, r1
   2e7b8:	ldr	r1, [sp, #44]	; 0x2c
   2e7bc:	ldr	r7, [sp, #68]	; 0x44
   2e7c0:	add	r2, r4, r8
   2e7c4:	add	r1, r4, r1
   2e7c8:	add	r1, r1, r8
   2e7cc:	cmp	ip, r1
   2e7d0:	ldr	ip, [sp, #44]	; 0x2c
   2e7d4:	bcs	2e7f0 <GetDataSlab+0x2974>
   2e7d8:	ldr	r1, [sp, #48]	; 0x30
   2e7dc:	ldr	r5, [sp, #52]	; 0x34
   2e7e0:	mla	r1, r1, r5, r1
   2e7e4:	add	r1, r7, r1
   2e7e8:	cmp	r2, r1
   2e7ec:	bcc	2e830 <GetDataSlab+0x29b4>
   2e7f0:	ldr	r0, [sp, #40]	; 0x28
   2e7f4:	ldr	ip, [sp, #56]	; 0x38
   2e7f8:	sub	r5, fp, #216	; 0xd8
   2e7fc:	ldrh	r1, [r2], #2
   2e800:	subs	r0, r0, #2
   2e804:	strh	r1, [fp, #-216]	; 0xffffff28
   2e808:	vld1.16	{d16[0]}, [r5 :16]
   2e80c:	vmovl.s8	q8, d16
   2e810:	vmovl.s16	q8, d16
   2e814:	vmovl.s32	q8, d16
   2e818:	vst1.64	{d16-d17}, [ip]!
   2e81c:	bne	2e7fc <GetDataSlab+0x2980>
   2e820:	ldr	ip, [sp, #44]	; 0x2c
   2e824:	ldr	r0, [sp, #40]	; 0x28
   2e828:	cmp	ip, r0
   2e82c:	beq	2e860 <GetDataSlab+0x29e4>
   2e830:	ldr	r1, [sp, #56]	; 0x38
   2e834:	sub	r2, ip, r0
   2e838:	add	r5, r1, r0, lsl #3
   2e83c:	add	r0, r0, r8
   2e840:	add	r0, r4, r0
   2e844:	ldrsb	r8, [r0], #1
   2e848:	subs	r2, r2, #1
   2e84c:	asr	r1, r8, #31
   2e850:	str	r8, [r5]
   2e854:	str	r1, [r5, #4]
   2e858:	add	r5, r5, #8
   2e85c:	bne	2e844 <GetDataSlab+0x29c8>
   2e860:	ldr	r0, [sp, #36]	; 0x24
   2e864:	add	r4, r4, r0
   2e868:	add	r3, r3, r0
   2e86c:	ldr	r0, [fp, #24]
   2e870:	cmp	r0, #2
   2e874:	blt	2e920 <GetDataSlab+0x2aa4>
   2e878:	mov	r1, #0
   2e87c:	mov	r8, #0
   2e880:	mov	r0, r1
   2e884:	ldr	r1, [r6, r1, lsl #2]
   2e888:	add	r1, r1, #1
   2e88c:	str	r1, [r6, r0, lsl #2]
   2e890:	ldr	r2, [r9, r0, lsl #2]
   2e894:	sdiv	r5, r1, r2
   2e898:	mls	r1, r5, r2, r1
   2e89c:	cmp	r1, #0
   2e8a0:	bne	2e910 <GetDataSlab+0x2a94>
   2e8a4:	sub	r7, fp, #176	; 0xb0
   2e8a8:	str	r8, [r6, r0, lsl #2]
   2e8ac:	add	r1, r7, r0, lsl #2
   2e8b0:	ldr	r1, [r1, #4]
   2e8b4:	sdiv	r2, r3, r1
   2e8b8:	mls	r2, r2, r1, r3
   2e8bc:	cmp	r2, #0
   2e8c0:	beq	2e8e0 <GetDataSlab+0x2a64>
   2e8c4:	ldr	r5, [r7, r0, lsl #2]
   2e8c8:	ldr	r7, [sl, r0, lsl #2]
   2e8cc:	sub	r1, r1, r2
   2e8d0:	mla	r1, r7, r5, r1
   2e8d4:	add	r3, r1, r3
   2e8d8:	add	r4, r4, r1
   2e8dc:	b	2e8f8 <GetDataSlab+0x2a7c>
   2e8e0:	ldr	r1, [sl, r0, lsl #2]
   2e8e4:	cmp	r1, #0
   2e8e8:	subne	r2, fp, #176	; 0xb0
   2e8ec:	ldrne	r2, [r2, r0, lsl #2]
   2e8f0:	mlane	r3, r2, r1, r3
   2e8f4:	mlane	r4, r2, r1, r4
   2e8f8:	ldr	r2, [fp, #24]
   2e8fc:	add	r1, r0, #1
   2e900:	add	r0, r0, #2
   2e904:	cmp	r0, r2
   2e908:	blt	2e880 <GetDataSlab+0x2a04>
   2e90c:	b	2e920 <GetDataSlab+0x2aa4>
   2e910:	ldr	r1, [sp, #32]
   2e914:	ldr	r0, [r1, r0, lsl #2]
   2e918:	add	r4, r4, r0
   2e91c:	add	r3, r0, r3
   2e920:	ldr	r0, [sp, #48]	; 0x30
   2e924:	ldr	r1, [sp, #56]	; 0x38
   2e928:	add	lr, lr, ip
   2e92c:	add	r1, r1, r0
   2e930:	ldr	r0, [sp, #52]	; 0x34
   2e934:	str	r1, [sp, #56]	; 0x38
   2e938:	ldr	r1, [sp, #60]	; 0x3c
   2e93c:	add	r0, r0, #1
   2e940:	str	r0, [sp, #52]	; 0x34
   2e944:	mov	r0, #0
   2e948:	cmp	lr, r1
   2e94c:	blt	2e790 <GetDataSlab+0x2914>
   2e950:	b	2e97c <GetDataSlab+0x2b00>
   2e954:	cmp	sl, #0
   2e958:	beq	2bfc8 <GetDataSlab+0x14c>
   2e95c:	ldr	r1, [sp, #48]	; 0x30
   2e960:	cmp	r1, #1
   2e964:	bne	2bfc8 <GetDataSlab+0x14c>
   2e968:	ldr	r2, [fp, #28]
   2e96c:	ldr	r0, [sp, #68]	; 0x44
   2e970:	ldr	r1, [sp, #56]	; 0x38
   2e974:	bl	181c <memcpy@plt>
   2e978:	mov	r0, #0
   2e97c:	sub	sp, fp, #48	; 0x30
   2e980:	vpop	{d8-d9}
   2e984:	add	sp, sp, #4
   2e988:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e98c:	ldr	r0, [sp, #40]	; 0x28
   2e990:	sub	r1, r0, #1
   2e994:	mov	r0, #1
   2e998:	cmp	r1, #11
   2e99c:	bhi	52630 <GetDataSlab+0x267b4>
   2e9a0:	add	r2, pc, #8
   2e9a4:	ldr	r3, [sp, #68]	; 0x44
   2e9a8:	ldr	r1, [r2, r1, lsl #2]
   2e9ac:	add	pc, r2, r1
   2e9b0:	.word	0x00000030
   2e9b4:	.word	0x0001e878
   2e9b8:	.word	0x0001ea00
   2e9bc:	.word	0x0001eb0c
   2e9c0:	.word	0x0001ec18
   2e9c4:	.word	0x0001ed20
   2e9c8:	.word	0x0001ee28
   2e9cc:	.word	0x00023c84
   2e9d0:	.word	0x0001eeb8
   2e9d4:	.word	0x00023c84
   2e9d8:	.word	0x00023c84
   2e9dc:	.word	0x0001efc4
   2e9e0:	ldr	r1, [sp, #52]	; 0x34
   2e9e4:	mov	r0, #0
   2e9e8:	cmp	r1, #1
   2e9ec:	ldrge	r1, [sp, #60]	; 0x3c
   2e9f0:	cmpge	r1, #1
   2e9f4:	blt	2e97c <GetDataSlab+0x2b00>
   2e9f8:	ldr	r0, [sp, #48]	; 0x30
   2e9fc:	ldr	r2, [sp, #28]
   2ea00:	ldr	r3, [sp, #24]
   2ea04:	ldr	r8, [sp, #68]	; 0x44
   2ea08:	ldr	r7, [sp, #56]	; 0x38
   2ea0c:	mov	r6, #0
   2ea10:	add	r4, sp, #88	; 0x58
   2ea14:	mul	r0, r0, ip
   2ea18:	mla	r1, r2, ip, r3
   2ea1c:	str	r0, [sp, #64]	; 0x40
   2ea20:	ldr	r0, [sp, #56]	; 0x38
   2ea24:	str	r1, [sp, #36]	; 0x24
   2ea28:	add	lr, r0, r1
   2ea2c:	ldr	r0, [sp, #60]	; 0x3c
   2ea30:	mov	r1, r0
   2ea34:	add	r0, r0, r3
   2ea38:	mla	r0, r2, ip, r0
   2ea3c:	cmp	r1, #3
   2ea40:	mov	r2, #0
   2ea44:	lsl	sl, r1, #2
   2ea48:	str	r0, [sp, #44]	; 0x2c
   2ea4c:	sub	r0, r9, #1
   2ea50:	movwhi	r2, #1
   2ea54:	clz	r0, r0
   2ea58:	lsr	r0, r0, #5
   2ea5c:	and	r0, r2, r0
   2ea60:	lsl	r2, r9, #2
   2ea64:	str	r0, [sp, #48]	; 0x30
   2ea68:	bic	r0, r1, #3
   2ea6c:	str	r0, [sp, #40]	; 0x28
   2ea70:	ldr	r0, [sp, #48]	; 0x30
   2ea74:	mov	r5, #0
   2ea78:	cmp	r0, #0
   2ea7c:	mov	r0, r8
   2ea80:	beq	2eb1c <GetDataSlab+0x2ca0>
   2ea84:	ldr	r1, [sp, #68]	; 0x44
   2ea88:	ldr	r0, [sp, #64]	; 0x40
   2ea8c:	mul	r3, sl, r6
   2ea90:	add	r5, r1, r3
   2ea94:	ldr	r1, [sp, #44]	; 0x2c
   2ea98:	mul	r0, r0, r6
   2ea9c:	add	r1, r1, r0
   2eaa0:	add	r1, r7, r1
   2eaa4:	cmp	r5, r1
   2eaa8:	bcs	2ead8 <GetDataSlab+0x2c5c>
   2eaac:	add	r1, sl, r3
   2eab0:	ldr	r3, [sp, #68]	; 0x44
   2eab4:	mov	r5, #0
   2eab8:	add	r1, r3, r1
   2eabc:	ldr	r3, [sp, #36]	; 0x24
   2eac0:	add	r0, r3, r0
   2eac4:	ldr	r3, [sp, #56]	; 0x38
   2eac8:	add	r0, r3, r0
   2eacc:	cmp	r0, r1
   2ead0:	mov	r0, r8
   2ead4:	bcc	2eb1c <GetDataSlab+0x2ca0>
   2ead8:	ldr	r5, [sp, #40]	; 0x28
   2eadc:	mov	r3, lr
   2eae0:	mov	ip, r8
   2eae4:	add	r0, r8, r5, lsl #2
   2eae8:	ldr	r1, [r3], r2
   2eaec:	subs	r5, r5, #4
   2eaf0:	str	r1, [sp, #88]	; 0x58
   2eaf4:	vld1.32	{d16[0]}, [r4 :32]
   2eaf8:	vmovl.s8	q8, d16
   2eafc:	vmovl.s16	q8, d16
   2eb00:	vcvt.f32.s32	q8, q8
   2eb04:	vst1.32	{d16-d17}, [ip]!
   2eb08:	bne	2eae8 <GetDataSlab+0x2c6c>
   2eb0c:	ldr	r1, [sp, #60]	; 0x3c
   2eb10:	ldr	r5, [sp, #40]	; 0x28
   2eb14:	cmp	r1, r5
   2eb18:	beq	2eb44 <GetDataSlab+0x2cc8>
   2eb1c:	ldr	r1, [sp, #60]	; 0x3c
   2eb20:	mla	r3, r9, r5, lr
   2eb24:	sub	r5, r1, r5
   2eb28:	ldrsb	r1, [r3], r9
   2eb2c:	subs	r5, r5, #1
   2eb30:	vmov	s0, r1
   2eb34:	vcvt.f32.s32	s0, s0
   2eb38:	vstr	s0, [r0]
   2eb3c:	add	r0, r0, #4
   2eb40:	bne	2eb28 <GetDataSlab+0x2cac>
   2eb44:	ldr	r0, [sp, #64]	; 0x40
   2eb48:	ldr	r1, [sp, #52]	; 0x34
   2eb4c:	add	r6, r6, #1
   2eb50:	add	r8, r8, sl
   2eb54:	add	lr, lr, r0
   2eb58:	mov	r0, #0
   2eb5c:	cmp	r6, r1
   2eb60:	bne	2ea70 <GetDataSlab+0x2bf4>
   2eb64:	b	2e97c <GetDataSlab+0x2b00>
   2eb68:	ldr	ip, [sp, #40]	; 0x28
   2eb6c:	mov	r0, #1
   2eb70:	sub	r2, ip, #1
   2eb74:	cmp	r2, #11
   2eb78:	bhi	527a0 <GetDataSlab+0x26924>
   2eb7c:	add	r7, pc, #20
   2eb80:	add	r6, sp, #52	; 0x34
   2eb84:	ldr	r5, [sp, #68]	; 0x44
   2eb88:	ldr	r2, [r7, r2, lsl #2]
   2eb8c:	ldm	r6, {r1, r4, r6}
   2eb90:	ldr	r3, [sp, #48]	; 0x30
   2eb94:	add	pc, r7, r2
   2eb98:	.word	0x00000030
   2eb9c:	.word	0x0001ef5c
   2eba0:	.word	0x0001f008
   2eba4:	.word	0x0001f0b8
   2eba8:	.word	0x0001f168
   2ebac:	.word	0x0001f218
   2ebb0:	.word	0x0001f2c8
   2ebb4:	.word	0x00023c18
   2ebb8:	.word	0x0001f384
   2ebbc:	.word	0x00023c18
   2ebc0:	.word	0x00023c18
   2ebc4:	.word	0x0001f440
   2ebc8:	cmp	r1, #1
   2ebcc:	blt	52ff8 <GetDataSlab+0x2717c>
   2ebd0:	ldr	r5, [sp, #44]	; 0x2c
   2ebd4:	ldr	r0, [sp, #28]
   2ebd8:	ldr	r1, [sp, #24]
   2ebdc:	mov	r7, #0
   2ebe0:	mla	r0, r0, r5, r1
   2ebe4:	add	r2, r4, r0
   2ebe8:	ldr	r0, [sp, #60]	; 0x3c
   2ebec:	cmp	r0, #1
   2ebf0:	blt	2ec44 <GetDataSlab+0x2dc8>
   2ebf4:	ldr	r5, [sp, #68]	; 0x44
   2ebf8:	ldr	r4, [fp, #8]
   2ebfc:	mov	r0, #0
   2ec00:	ldr	r6, [lr]
   2ec04:	mul	r6, r6, r0
   2ec08:	ldrb	r6, [r2, r6]
   2ec0c:	strb	r6, [r5, r0]
   2ec10:	add	r0, r0, #1
   2ec14:	ldr	r6, [sl]
   2ec18:	cmp	r0, r6
   2ec1c:	blt	2ec00 <GetDataSlab+0x2d84>
   2ec20:	add	r5, r5, r0
   2ec24:	ldr	r0, [sp, #32]
   2ec28:	str	r6, [sp, #60]	; 0x3c
   2ec2c:	str	r5, [sp, #68]	; 0x44
   2ec30:	ldr	r5, [r4]
   2ec34:	ldr	r6, [r0]
   2ec38:	ldr	r0, [sp, #36]	; 0x24
   2ec3c:	ldr	r0, [r0]
   2ec40:	b	2ec50 <GetDataSlab+0x2dd4>
   2ec44:	ldr	r1, [sp, #52]	; 0x34
   2ec48:	ldr	r0, [sp, #48]	; 0x30
   2ec4c:	mov	r6, r1
   2ec50:	add	r7, r7, #1
   2ec54:	str	r0, [sp, #48]	; 0x30
   2ec58:	mla	r2, r5, r0, r2
   2ec5c:	mov	r0, #0
   2ec60:	mov	r1, r6
   2ec64:	str	r6, [sp, #52]	; 0x34
   2ec68:	cmp	r7, r6
   2ec6c:	blt	2ebe8 <GetDataSlab+0x2d6c>
   2ec70:	b	2e97c <GetDataSlab+0x2b00>
   2ec74:	ldr	ip, [sp, #40]	; 0x28
   2ec78:	mov	r0, #1
   2ec7c:	sub	r2, ip, #1
   2ec80:	cmp	r2, #11
   2ec84:	bhi	52870 <GetDataSlab+0x269f4>
   2ec88:	add	r7, pc, #20
   2ec8c:	add	r6, sp, #52	; 0x34
   2ec90:	ldr	r5, [sp, #68]	; 0x44
   2ec94:	ldr	r2, [r7, r2, lsl #2]
   2ec98:	ldm	r6, {r1, r4, r6}
   2ec9c:	ldr	r3, [sp, #48]	; 0x30
   2eca0:	add	pc, r7, r2
   2eca4:	.word	0x00000030
   2eca8:	.word	0x0001f3d4
   2ecac:	.word	0x0001f480
   2ecb0:	.word	0x0001f530
   2ecb4:	.word	0x0001f5e0
   2ecb8:	.word	0x0001f690
   2ecbc:	.word	0x0001f740
   2ecc0:	.word	0x00023bdc
   2ecc4:	.word	0x0001f7fc
   2ecc8:	.word	0x00023bdc
   2eccc:	.word	0x00023bdc
   2ecd0:	.word	0x0001f8b8
   2ecd4:	cmp	r1, #1
   2ecd8:	blt	5300c <GetDataSlab+0x27190>
   2ecdc:	ldr	r5, [sp, #44]	; 0x2c
   2ece0:	ldr	r0, [sp, #28]
   2ece4:	ldr	r1, [sp, #24]
   2ece8:	mov	r7, #0
   2ecec:	mla	r0, r0, r5, r1
   2ecf0:	add	r2, r4, r0
   2ecf4:	ldr	r0, [sp, #60]	; 0x3c
   2ecf8:	cmp	r0, #1
   2ecfc:	blt	2ed50 <GetDataSlab+0x2ed4>
   2ed00:	ldr	r5, [sp, #68]	; 0x44
   2ed04:	ldr	r4, [fp, #8]
   2ed08:	mov	r0, #0
   2ed0c:	ldr	r6, [lr]
   2ed10:	mul	r6, r6, r0
   2ed14:	ldrb	r6, [r2, r6]
   2ed18:	strb	r6, [r5, r0]
   2ed1c:	add	r0, r0, #1
   2ed20:	ldr	r6, [sl]
   2ed24:	cmp	r0, r6
   2ed28:	blt	2ed0c <GetDataSlab+0x2e90>
   2ed2c:	add	r5, r5, r0
   2ed30:	ldr	r0, [sp, #32]
   2ed34:	str	r6, [sp, #60]	; 0x3c
   2ed38:	str	r5, [sp, #68]	; 0x44
   2ed3c:	ldr	r5, [r4]
   2ed40:	ldr	r6, [r0]
   2ed44:	ldr	r0, [sp, #36]	; 0x24
   2ed48:	ldr	r0, [r0]
   2ed4c:	b	2ed5c <GetDataSlab+0x2ee0>
   2ed50:	ldr	r1, [sp, #52]	; 0x34
   2ed54:	ldr	r0, [sp, #48]	; 0x30
   2ed58:	mov	r6, r1
   2ed5c:	add	r7, r7, #1
   2ed60:	str	r0, [sp, #48]	; 0x30
   2ed64:	mla	r2, r5, r0, r2
   2ed68:	mov	r0, #0
   2ed6c:	mov	r1, r6
   2ed70:	str	r6, [sp, #52]	; 0x34
   2ed74:	cmp	r7, r6
   2ed78:	blt	2ecf4 <GetDataSlab+0x2e78>
   2ed7c:	b	2e97c <GetDataSlab+0x2b00>
   2ed80:	ldr	r0, [sp, #40]	; 0x28
   2ed84:	sub	r1, r0, #1
   2ed88:	mov	r0, #1
   2ed8c:	cmp	r1, #11
   2ed90:	bhi	52940 <GetDataSlab+0x26ac4>
   2ed94:	add	r2, pc, #8
   2ed98:	ldr	sl, [sp, #68]	; 0x44
   2ed9c:	ldr	r1, [r2, r1, lsl #2]
   2eda0:	add	pc, r2, r1
   2eda4:	.word	0x00000030
   2eda8:	.word	0x0001f858
   2edac:	.word	0x0001f9e8
   2edb0:	.word	0x0001fb4c
   2edb4:	.word	0x0001fcb0
   2edb8:	.word	0x0001fdac
   2edbc:	.word	0x0001fea8
   2edc0:	.word	0x00023ba0
   2edc4:	.word	0x0001ffb4
   2edc8:	.word	0x00023ba0
   2edcc:	.word	0x00023ba0
   2edd0:	.word	0x00020050
   2edd4:	ldr	r1, [sp, #52]	; 0x34
   2edd8:	mov	r0, #0
   2eddc:	cmp	r1, #1
   2ede0:	ldrge	r1, [sp, #60]	; 0x3c
   2ede4:	cmpge	r1, #1
   2ede8:	blt	2e97c <GetDataSlab+0x2b00>
   2edec:	ldr	r0, [sp, #48]	; 0x30
   2edf0:	ldr	r2, [sp, #28]
   2edf4:	ldr	r3, [sp, #24]
   2edf8:	ldr	r8, [sp, #68]	; 0x44
   2edfc:	ldr	r7, [sp, #56]	; 0x38
   2ee00:	mov	r6, #0
   2ee04:	add	r4, sp, #160	; 0xa0
   2ee08:	mul	r0, r0, ip
   2ee0c:	mla	r1, r2, ip, r3
   2ee10:	str	r0, [sp, #48]	; 0x30
   2ee14:	ldr	r0, [sp, #56]	; 0x38
   2ee18:	str	r1, [sp, #32]
   2ee1c:	add	lr, r0, r1
   2ee20:	ldr	r0, [sp, #60]	; 0x3c
   2ee24:	mov	r1, r0
   2ee28:	add	r0, r0, r3
   2ee2c:	mla	r0, r2, ip, r0
   2ee30:	cmp	r1, #7
   2ee34:	mov	r2, #0
   2ee38:	str	r0, [sp, #40]	; 0x28
   2ee3c:	sub	r0, r9, #1
   2ee40:	movwhi	r2, #1
   2ee44:	clz	r0, r0
   2ee48:	lsr	r0, r0, #5
   2ee4c:	and	r0, r2, r0
   2ee50:	lsl	r2, r9, #3
   2ee54:	str	r0, [sp, #44]	; 0x2c
   2ee58:	lsl	r0, r1, #1
   2ee5c:	str	r0, [sp, #64]	; 0x40
   2ee60:	bic	r0, r1, #7
   2ee64:	str	r0, [sp, #36]	; 0x24
   2ee68:	ldr	r0, [sp, #44]	; 0x2c
   2ee6c:	mov	r5, #0
   2ee70:	cmp	r0, #0
   2ee74:	mov	r0, r8
   2ee78:	beq	2ef20 <GetDataSlab+0x30a4>
   2ee7c:	ldr	r1, [sp, #64]	; 0x40
   2ee80:	ldr	r0, [sp, #48]	; 0x30
   2ee84:	mul	r3, r1, r6
   2ee88:	ldr	r1, [sp, #68]	; 0x44
   2ee8c:	mul	r0, r0, r6
   2ee90:	add	r5, r1, r3
   2ee94:	ldr	r1, [sp, #40]	; 0x28
   2ee98:	add	r1, r1, r0
   2ee9c:	add	r1, r7, r1
   2eea0:	cmp	r5, r1
   2eea4:	bcs	2eed8 <GetDataSlab+0x305c>
   2eea8:	ldr	r1, [sp, #64]	; 0x40
   2eeac:	mov	r5, #0
   2eeb0:	add	r1, r1, r3
   2eeb4:	ldr	r3, [sp, #68]	; 0x44
   2eeb8:	add	r1, r3, r1
   2eebc:	ldr	r3, [sp, #32]
   2eec0:	add	r0, r3, r0
   2eec4:	ldr	r3, [sp, #56]	; 0x38
   2eec8:	add	r0, r3, r0
   2eecc:	cmp	r0, r1
   2eed0:	mov	r0, r8
   2eed4:	bcc	2ef20 <GetDataSlab+0x30a4>
   2eed8:	ldr	r5, [sp, #36]	; 0x24
   2eedc:	mov	r3, lr
   2eee0:	mov	ip, r8
   2eee4:	add	r0, r8, r5, lsl #1
   2eee8:	ldr	r1, [r3]
   2eeec:	ldr	sl, [r3, #4]
   2eef0:	add	r3, r3, r2
   2eef4:	subs	r5, r5, #8
   2eef8:	str	sl, [sp, #164]	; 0xa4
   2eefc:	str	r1, [sp, #160]	; 0xa0
   2ef00:	vld1.8	{d16}, [r4 :64]
   2ef04:	vmovl.s8	q8, d16
   2ef08:	vst1.16	{d16-d17}, [ip]!
   2ef0c:	bne	2eee8 <GetDataSlab+0x306c>
   2ef10:	ldr	r1, [sp, #60]	; 0x3c
   2ef14:	ldr	r5, [sp, #36]	; 0x24
   2ef18:	cmp	r1, r5
   2ef1c:	beq	2ef3c <GetDataSlab+0x30c0>
   2ef20:	ldr	r1, [sp, #60]	; 0x3c
   2ef24:	mla	r3, r9, r5, lr
   2ef28:	sub	r5, r1, r5
   2ef2c:	ldrsb	r1, [r3], r9
   2ef30:	subs	r5, r5, #1
   2ef34:	strh	r1, [r0], #2
   2ef38:	bne	2ef2c <GetDataSlab+0x30b0>
   2ef3c:	ldr	r0, [sp, #48]	; 0x30
   2ef40:	ldr	r1, [sp, #52]	; 0x34
   2ef44:	add	r6, r6, #1
   2ef48:	add	lr, lr, r0
   2ef4c:	ldr	r0, [sp, #64]	; 0x40
   2ef50:	cmp	r6, r1
   2ef54:	add	r8, r8, r0
   2ef58:	mov	r0, #0
   2ef5c:	bne	2ee68 <GetDataSlab+0x2fec>
   2ef60:	b	2e97c <GetDataSlab+0x2b00>
   2ef64:	ldr	r0, [sp, #40]	; 0x28
   2ef68:	sub	r1, r0, #1
   2ef6c:	mov	r0, #1
   2ef70:	cmp	r1, #11
   2ef74:	bhi	52a48 <GetDataSlab+0x26bcc>
   2ef78:	add	r2, pc, #8
   2ef7c:	ldr	sl, [sp, #68]	; 0x44
   2ef80:	ldr	r1, [r2, r1, lsl #2]
   2ef84:	add	pc, r2, r1
   2ef88:	.word	0x00000030
   2ef8c:	.word	0x0001ffa4
   2ef90:	.word	0x00020134
   2ef94:	.word	0x00020298
   2ef98:	.word	0x000203fc
   2ef9c:	.word	0x000204f8
   2efa0:	.word	0x000205f4
   2efa4:	.word	0x00023ac4
   2efa8:	.word	0x00020700
   2efac:	.word	0x00023ac4
   2efb0:	.word	0x00023ac4
   2efb4:	.word	0x0002079c
   2efb8:	ldr	r1, [sp, #52]	; 0x34
   2efbc:	mov	r0, #0
   2efc0:	cmp	r1, #1
   2efc4:	ldrge	r1, [sp, #60]	; 0x3c
   2efc8:	cmpge	r1, #1
   2efcc:	blt	2e97c <GetDataSlab+0x2b00>
   2efd0:	ldr	r0, [sp, #48]	; 0x30
   2efd4:	ldr	r2, [sp, #28]
   2efd8:	ldr	r3, [sp, #24]
   2efdc:	ldr	r8, [sp, #68]	; 0x44
   2efe0:	ldr	r7, [sp, #56]	; 0x38
   2efe4:	mov	r6, #0
   2efe8:	add	r4, sp, #176	; 0xb0
   2efec:	mul	r0, r0, ip
   2eff0:	mla	r1, r2, ip, r3
   2eff4:	str	r0, [sp, #48]	; 0x30
   2eff8:	ldr	r0, [sp, #56]	; 0x38
   2effc:	str	r1, [sp, #32]
   2f000:	add	lr, r0, r1
   2f004:	ldr	r0, [sp, #60]	; 0x3c
   2f008:	mov	r1, r0
   2f00c:	add	r0, r0, r3
   2f010:	mla	r0, r2, ip, r0
   2f014:	cmp	r1, #7
   2f018:	mov	r2, #0
   2f01c:	str	r0, [sp, #40]	; 0x28
   2f020:	sub	r0, r9, #1
   2f024:	movwhi	r2, #1
   2f028:	clz	r0, r0
   2f02c:	lsr	r0, r0, #5
   2f030:	and	r0, r2, r0
   2f034:	lsl	r2, r9, #3
   2f038:	str	r0, [sp, #44]	; 0x2c
   2f03c:	lsl	r0, r1, #1
   2f040:	str	r0, [sp, #64]	; 0x40
   2f044:	bic	r0, r1, #7
   2f048:	str	r0, [sp, #36]	; 0x24
   2f04c:	ldr	r0, [sp, #44]	; 0x2c
   2f050:	mov	r5, #0
   2f054:	cmp	r0, #0
   2f058:	mov	r0, r8
   2f05c:	beq	2f104 <GetDataSlab+0x3288>
   2f060:	ldr	r1, [sp, #64]	; 0x40
   2f064:	ldr	r0, [sp, #48]	; 0x30
   2f068:	mul	r3, r1, r6
   2f06c:	ldr	r1, [sp, #68]	; 0x44
   2f070:	mul	r0, r0, r6
   2f074:	add	r5, r1, r3
   2f078:	ldr	r1, [sp, #40]	; 0x28
   2f07c:	add	r1, r1, r0
   2f080:	add	r1, r7, r1
   2f084:	cmp	r5, r1
   2f088:	bcs	2f0bc <GetDataSlab+0x3240>
   2f08c:	ldr	r1, [sp, #64]	; 0x40
   2f090:	mov	r5, #0
   2f094:	add	r1, r1, r3
   2f098:	ldr	r3, [sp, #68]	; 0x44
   2f09c:	add	r1, r3, r1
   2f0a0:	ldr	r3, [sp, #32]
   2f0a4:	add	r0, r3, r0
   2f0a8:	ldr	r3, [sp, #56]	; 0x38
   2f0ac:	add	r0, r3, r0
   2f0b0:	cmp	r0, r1
   2f0b4:	mov	r0, r8
   2f0b8:	bcc	2f104 <GetDataSlab+0x3288>
   2f0bc:	ldr	r5, [sp, #36]	; 0x24
   2f0c0:	mov	r3, lr
   2f0c4:	mov	ip, r8
   2f0c8:	add	r0, r8, r5, lsl #1
   2f0cc:	ldr	r1, [r3]
   2f0d0:	ldr	sl, [r3, #4]
   2f0d4:	add	r3, r3, r2
   2f0d8:	subs	r5, r5, #8
   2f0dc:	str	sl, [sp, #180]	; 0xb4
   2f0e0:	str	r1, [sp, #176]	; 0xb0
   2f0e4:	vld1.8	{d16}, [r4 :64]
   2f0e8:	vmovl.s8	q8, d16
   2f0ec:	vst1.16	{d16-d17}, [ip]!
   2f0f0:	bne	2f0cc <GetDataSlab+0x3250>
   2f0f4:	ldr	r1, [sp, #60]	; 0x3c
   2f0f8:	ldr	r5, [sp, #36]	; 0x24
   2f0fc:	cmp	r1, r5
   2f100:	beq	2f120 <GetDataSlab+0x32a4>
   2f104:	ldr	r1, [sp, #60]	; 0x3c
   2f108:	mla	r3, r9, r5, lr
   2f10c:	sub	r5, r1, r5
   2f110:	ldrsb	r1, [r3], r9
   2f114:	subs	r5, r5, #1
   2f118:	strh	r1, [r0], #2
   2f11c:	bne	2f110 <GetDataSlab+0x3294>
   2f120:	ldr	r0, [sp, #48]	; 0x30
   2f124:	ldr	r1, [sp, #52]	; 0x34
   2f128:	add	r6, r6, #1
   2f12c:	add	lr, lr, r0
   2f130:	ldr	r0, [sp, #64]	; 0x40
   2f134:	cmp	r6, r1
   2f138:	add	r8, r8, r0
   2f13c:	mov	r0, #0
   2f140:	bne	2f04c <GetDataSlab+0x31d0>
   2f144:	b	2e97c <GetDataSlab+0x2b00>
   2f148:	ldr	r9, [sp, #40]	; 0x28
   2f14c:	mov	r0, #1
   2f150:	sub	r2, r9, #1
   2f154:	cmp	r2, #11
   2f158:	bhi	52b50 <GetDataSlab+0x26cd4>
   2f15c:	add	r7, pc, #20
   2f160:	ldr	r4, [sp, #68]	; 0x44
   2f164:	ldr	r5, [sp, #60]	; 0x3c
   2f168:	ldr	r6, [sp, #52]	; 0x34
   2f16c:	ldr	r1, [sp, #48]	; 0x30
   2f170:	ldr	r2, [r7, r2, lsl #2]
   2f174:	add	pc, r7, r2
   2f178:	.word	0x00000030
   2f17c:	.word	0x000206e4
   2f180:	.word	0x00020798
   2f184:	.word	0x00020854
   2f188:	.word	0x00020910
   2f18c:	.word	0x000209c8
   2f190:	.word	0x00020a80
   2f194:	.word	0x000239e8
   2f198:	.word	0x00020b44
   2f19c:	.word	0x000239e8
   2f1a0:	.word	0x000239e8
   2f1a4:	.word	0x00020c08
   2f1a8:	cmp	r6, #1
   2f1ac:	blt	53020 <GetDataSlab+0x271a4>
   2f1b0:	ldr	r0, [sp, #28]
   2f1b4:	ldr	r1, [sp, #24]
   2f1b8:	ldr	r2, [sp, #56]	; 0x38
   2f1bc:	mov	r7, #0
   2f1c0:	mla	r0, r0, ip, r1
   2f1c4:	add	r2, r2, r0
   2f1c8:	ldr	r0, [sp, #60]	; 0x3c
   2f1cc:	cmp	r0, #1
   2f1d0:	blt	2f22c <GetDataSlab+0x33b0>
   2f1d4:	ldr	r4, [sp, #68]	; 0x44
   2f1d8:	ldr	ip, [fp, #8]
   2f1dc:	mov	r0, #0
   2f1e0:	mov	r6, #0
   2f1e4:	ldr	r5, [lr]
   2f1e8:	add	r0, r0, #4
   2f1ec:	mla	r5, r5, r6, r2
   2f1f0:	ldrsb	r5, [r5]
   2f1f4:	str	r5, [r4, r6, lsl #2]
   2f1f8:	add	r6, r6, #1
   2f1fc:	ldr	r5, [sl]
   2f200:	cmp	r6, r5
   2f204:	blt	2f1e4 <GetDataSlab+0x3368>
   2f208:	add	r4, r4, r0
   2f20c:	ldr	r0, [sp, #32]
   2f210:	ldr	ip, [ip]
   2f214:	str	r5, [sp, #60]	; 0x3c
   2f218:	str	r4, [sp, #68]	; 0x44
   2f21c:	ldr	r4, [r0]
   2f220:	ldr	r0, [sp, #36]	; 0x24
   2f224:	ldr	r0, [r0]
   2f228:	b	2f238 <GetDataSlab+0x33bc>
   2f22c:	ldr	r1, [sp, #52]	; 0x34
   2f230:	ldr	r0, [sp, #48]	; 0x30
   2f234:	mov	r4, r1
   2f238:	add	r7, r7, #1
   2f23c:	str	r0, [sp, #48]	; 0x30
   2f240:	mla	r2, ip, r0, r2
   2f244:	mov	r0, #0
   2f248:	mov	r1, r4
   2f24c:	str	r4, [sp, #52]	; 0x34
   2f250:	cmp	r7, r4
   2f254:	blt	2f1c8 <GetDataSlab+0x334c>
   2f258:	b	2e97c <GetDataSlab+0x2b00>
   2f25c:	ldr	r9, [sp, #40]	; 0x28
   2f260:	mov	r0, #1
   2f264:	sub	r2, r9, #1
   2f268:	cmp	r2, #11
   2f26c:	bhi	52c1c <GetDataSlab+0x26da0>
   2f270:	add	r7, pc, #20
   2f274:	ldr	r4, [sp, #68]	; 0x44
   2f278:	ldr	r5, [sp, #60]	; 0x3c
   2f27c:	ldr	r6, [sp, #52]	; 0x34
   2f280:	ldr	r1, [sp, #48]	; 0x30
   2f284:	ldr	r2, [r7, r2, lsl #2]
   2f288:	add	pc, r7, r2
   2f28c:	.word	0x00000030
   2f290:	.word	0x00020b98
   2f294:	.word	0x00020c4c
   2f298:	.word	0x00020d08
   2f29c:	.word	0x00020dc4
   2f2a0:	.word	0x00020e7c
   2f2a4:	.word	0x00020f34
   2f2a8:	.word	0x000239a0
   2f2ac:	.word	0x00020ff8
   2f2b0:	.word	0x000239a0
   2f2b4:	.word	0x000239a0
   2f2b8:	.word	0x000210bc
   2f2bc:	cmp	r6, #1
   2f2c0:	blt	53034 <GetDataSlab+0x271b8>
   2f2c4:	ldr	r0, [sp, #28]
   2f2c8:	ldr	r1, [sp, #24]
   2f2cc:	ldr	r2, [sp, #56]	; 0x38
   2f2d0:	mov	r7, #0
   2f2d4:	mla	r0, r0, ip, r1
   2f2d8:	add	r2, r2, r0
   2f2dc:	ldr	r0, [sp, #60]	; 0x3c
   2f2e0:	cmp	r0, #1
   2f2e4:	blt	2f340 <GetDataSlab+0x34c4>
   2f2e8:	ldr	r4, [sp, #68]	; 0x44
   2f2ec:	ldr	ip, [fp, #8]
   2f2f0:	mov	r0, #0
   2f2f4:	mov	r6, #0
   2f2f8:	ldr	r5, [lr]
   2f2fc:	add	r0, r0, #4
   2f300:	mla	r5, r5, r6, r2
   2f304:	ldrsb	r5, [r5]
   2f308:	str	r5, [r4, r6, lsl #2]
   2f30c:	add	r6, r6, #1
   2f310:	ldr	r5, [sl]
   2f314:	cmp	r6, r5
   2f318:	blt	2f2f8 <GetDataSlab+0x347c>
   2f31c:	add	r4, r4, r0
   2f320:	ldr	r0, [sp, #32]
   2f324:	ldr	ip, [ip]
   2f328:	str	r5, [sp, #60]	; 0x3c
   2f32c:	str	r4, [sp, #68]	; 0x44
   2f330:	ldr	r4, [r0]
   2f334:	ldr	r0, [sp, #36]	; 0x24
   2f338:	ldr	r0, [r0]
   2f33c:	b	2f34c <GetDataSlab+0x34d0>
   2f340:	ldr	r1, [sp, #52]	; 0x34
   2f344:	ldr	r0, [sp, #48]	; 0x30
   2f348:	mov	r4, r1
   2f34c:	add	r7, r7, #1
   2f350:	str	r0, [sp, #48]	; 0x30
   2f354:	mla	r2, ip, r0, r2
   2f358:	mov	r0, #0
   2f35c:	mov	r1, r4
   2f360:	str	r4, [sp, #52]	; 0x34
   2f364:	cmp	r7, r4
   2f368:	blt	2f2dc <GetDataSlab+0x3460>
   2f36c:	b	2e97c <GetDataSlab+0x2b00>
   2f370:	ldr	r0, [sp, #40]	; 0x28
   2f374:	sub	r1, r0, #1
   2f378:	mov	r0, #1
   2f37c:	cmp	r1, #11
   2f380:	bhi	52ce8 <GetDataSlab+0x26e6c>
   2f384:	add	r2, pc, #8
   2f388:	ldr	r3, [sp, #68]	; 0x44
   2f38c:	ldr	r1, [r2, r1, lsl #2]
   2f390:	add	pc, r2, r1
   2f394:	.word	0x00000030
   2f398:	.word	0x00021058
   2f39c:	.word	0x000211f0
   2f3a0:	.word	0x0002131c
   2f3a4:	.word	0x00021444
   2f3a8:	.word	0x00021580
   2f3ac:	.word	0x000216b8
   2f3b0:	.word	0x00023958
   2f3b4:	.word	0x00021768
   2f3b8:	.word	0x00023958
   2f3bc:	.word	0x00023958
   2f3c0:	.word	0x00021820
   2f3c4:	ldr	r1, [sp, #52]	; 0x34
   2f3c8:	mov	r0, #0
   2f3cc:	cmp	r1, #1
   2f3d0:	ldrge	r1, [sp, #60]	; 0x3c
   2f3d4:	cmpge	r1, #1
   2f3d8:	blt	2e97c <GetDataSlab+0x2b00>
   2f3dc:	ldr	r0, [sp, #48]	; 0x30
   2f3e0:	ldr	r2, [sp, #28]
   2f3e4:	ldr	r3, [sp, #24]
   2f3e8:	ldr	sl, [sp, #68]	; 0x44
   2f3ec:	ldr	r7, [sp, #56]	; 0x38
   2f3f0:	mov	r6, #0
   2f3f4:	add	r4, sp, #120	; 0x78
   2f3f8:	mul	r0, r0, ip
   2f3fc:	mla	r1, r2, ip, r3
   2f400:	str	r0, [sp, #48]	; 0x30
   2f404:	ldr	r0, [sp, #56]	; 0x38
   2f408:	str	r1, [sp, #32]
   2f40c:	add	lr, r0, r1
   2f410:	ldr	r0, [sp, #60]	; 0x3c
   2f414:	mov	r1, r0
   2f418:	add	r0, r0, r3
   2f41c:	mla	r0, r2, ip, r0
   2f420:	cmp	r1, #1
   2f424:	mov	r2, #0
   2f428:	str	r0, [sp, #40]	; 0x28
   2f42c:	sub	r0, r9, #1
   2f430:	movwhi	r2, #1
   2f434:	clz	r0, r0
   2f438:	lsr	r0, r0, #5
   2f43c:	and	r0, r2, r0
   2f440:	lsl	r2, r9, #1
   2f444:	str	r0, [sp, #44]	; 0x2c
   2f448:	lsl	r0, r1, #3
   2f44c:	str	r0, [sp, #64]	; 0x40
   2f450:	bic	r0, r1, #1
   2f454:	str	r0, [sp, #36]	; 0x24
   2f458:	ldr	r0, [sp, #44]	; 0x2c
   2f45c:	mov	r5, #0
   2f460:	mov	r8, sl
   2f464:	cmp	r0, #0
   2f468:	beq	2f50c <GetDataSlab+0x3690>
   2f46c:	ldr	r1, [sp, #64]	; 0x40
   2f470:	ldr	r0, [sp, #48]	; 0x30
   2f474:	mul	r3, r1, r6
   2f478:	ldr	r1, [sp, #68]	; 0x44
   2f47c:	mul	r0, r0, r6
   2f480:	add	r5, r1, r3
   2f484:	ldr	r1, [sp, #40]	; 0x28
   2f488:	add	r1, r1, r0
   2f48c:	add	r1, r7, r1
   2f490:	cmp	r5, r1
   2f494:	bcs	2f4c8 <GetDataSlab+0x364c>
   2f498:	ldr	r1, [sp, #64]	; 0x40
   2f49c:	mov	r5, #0
   2f4a0:	mov	r8, sl
   2f4a4:	add	r1, r1, r3
   2f4a8:	ldr	r3, [sp, #68]	; 0x44
   2f4ac:	add	r1, r3, r1
   2f4b0:	ldr	r3, [sp, #32]
   2f4b4:	add	r0, r3, r0
   2f4b8:	ldr	r3, [sp, #56]	; 0x38
   2f4bc:	add	r0, r3, r0
   2f4c0:	cmp	r0, r1
   2f4c4:	bcc	2f50c <GetDataSlab+0x3690>
   2f4c8:	ldr	r5, [sp, #36]	; 0x24
   2f4cc:	mov	r3, lr
   2f4d0:	mov	ip, sl
   2f4d4:	add	r8, sl, r5, lsl #3
   2f4d8:	ldrh	r1, [r3], r2
   2f4dc:	subs	r5, r5, #2
   2f4e0:	strh	r1, [sp, #120]	; 0x78
   2f4e4:	vld1.16	{d16[0]}, [r4 :16]
   2f4e8:	vmovl.s8	q8, d16
   2f4ec:	vmovl.s16	q8, d16
   2f4f0:	vmovl.s32	q8, d16
   2f4f4:	vst1.64	{d16-d17}, [ip]!
   2f4f8:	bne	2f4d8 <GetDataSlab+0x365c>
   2f4fc:	ldr	r0, [sp, #60]	; 0x3c
   2f500:	ldr	r5, [sp, #36]	; 0x24
   2f504:	cmp	r0, r5
   2f508:	beq	2f530 <GetDataSlab+0x36b4>
   2f50c:	ldr	r0, [sp, #60]	; 0x3c
   2f510:	mla	r3, r9, r5, lr
   2f514:	sub	r5, r0, r5
   2f518:	ldrsb	r0, [r3], r9
   2f51c:	subs	r5, r5, #1
   2f520:	asr	r1, r0, #31
   2f524:	strd	r0, [r8]
   2f528:	add	r8, r8, #8
   2f52c:	bne	2f518 <GetDataSlab+0x369c>
   2f530:	ldr	r0, [sp, #48]	; 0x30
   2f534:	ldr	r1, [sp, #52]	; 0x34
   2f538:	add	r6, r6, #1
   2f53c:	add	lr, lr, r0
   2f540:	ldr	r0, [sp, #64]	; 0x40
   2f544:	cmp	r6, r1
   2f548:	add	sl, sl, r0
   2f54c:	mov	r0, #0
   2f550:	bne	2f458 <GetDataSlab+0x35dc>
   2f554:	b	2e97c <GetDataSlab+0x2b00>
   2f558:	ldr	r0, [sp, #40]	; 0x28
   2f55c:	sub	r1, r0, #1
   2f560:	mov	r0, #1
   2f564:	cmp	r1, #11
   2f568:	bhi	52e70 <GetDataSlab+0x26ff4>
   2f56c:	add	r2, pc, #8
   2f570:	ldr	r3, [sp, #68]	; 0x44
   2f574:	ldr	r1, [r2, r1, lsl #2]
   2f578:	add	pc, r2, r1
   2f57c:	.word	0x00000030
   2f580:	.word	0x000217d0
   2f584:	.word	0x00021968
   2f588:	.word	0x00021a94
   2f58c:	.word	0x00021bbc
   2f590:	.word	0x00021cf8
   2f594:	.word	0x00021e30
   2f598:	.word	0x000238f8
   2f59c:	.word	0x00021ee0
   2f5a0:	.word	0x000238f8
   2f5a4:	.word	0x000238f8
   2f5a8:	.word	0x00021f98
   2f5ac:	ldr	r1, [sp, #52]	; 0x34
   2f5b0:	mov	r0, #0
   2f5b4:	cmp	r1, #1
   2f5b8:	ldrge	r1, [sp, #60]	; 0x3c
   2f5bc:	cmpge	r1, #1
   2f5c0:	blt	2e97c <GetDataSlab+0x2b00>
   2f5c4:	ldr	r0, [sp, #48]	; 0x30
   2f5c8:	ldr	r2, [sp, #28]
   2f5cc:	ldr	r3, [sp, #24]
   2f5d0:	ldr	sl, [sp, #68]	; 0x44
   2f5d4:	ldr	r7, [sp, #56]	; 0x38
   2f5d8:	mov	r6, #0
   2f5dc:	add	r4, sp, #152	; 0x98
   2f5e0:	mul	r0, r0, ip
   2f5e4:	mla	r1, r2, ip, r3
   2f5e8:	str	r0, [sp, #48]	; 0x30
   2f5ec:	ldr	r0, [sp, #56]	; 0x38
   2f5f0:	str	r1, [sp, #32]
   2f5f4:	add	lr, r0, r1
   2f5f8:	ldr	r0, [sp, #60]	; 0x3c
   2f5fc:	mov	r1, r0
   2f600:	add	r0, r0, r3
   2f604:	mla	r0, r2, ip, r0
   2f608:	cmp	r1, #1
   2f60c:	mov	r2, #0
   2f610:	str	r0, [sp, #40]	; 0x28
   2f614:	sub	r0, r9, #1
   2f618:	movwhi	r2, #1
   2f61c:	clz	r0, r0
   2f620:	lsr	r0, r0, #5
   2f624:	and	r0, r2, r0
   2f628:	lsl	r2, r9, #1
   2f62c:	str	r0, [sp, #44]	; 0x2c
   2f630:	lsl	r0, r1, #3
   2f634:	str	r0, [sp, #64]	; 0x40
   2f638:	bic	r0, r1, #1
   2f63c:	str	r0, [sp, #36]	; 0x24
   2f640:	ldr	r0, [sp, #44]	; 0x2c
   2f644:	mov	r5, #0
   2f648:	mov	r8, sl
   2f64c:	cmp	r0, #0
   2f650:	beq	2f6f4 <GetDataSlab+0x3878>
   2f654:	ldr	r1, [sp, #64]	; 0x40
   2f658:	ldr	r0, [sp, #48]	; 0x30
   2f65c:	mul	r3, r1, r6
   2f660:	ldr	r1, [sp, #68]	; 0x44
   2f664:	mul	r0, r0, r6
   2f668:	add	r5, r1, r3
   2f66c:	ldr	r1, [sp, #40]	; 0x28
   2f670:	add	r1, r1, r0
   2f674:	add	r1, r7, r1
   2f678:	cmp	r5, r1
   2f67c:	bcs	2f6b0 <GetDataSlab+0x3834>
   2f680:	ldr	r1, [sp, #64]	; 0x40
   2f684:	mov	r5, #0
   2f688:	mov	r8, sl
   2f68c:	add	r1, r1, r3
   2f690:	ldr	r3, [sp, #68]	; 0x44
   2f694:	add	r1, r3, r1
   2f698:	ldr	r3, [sp, #32]
   2f69c:	add	r0, r3, r0
   2f6a0:	ldr	r3, [sp, #56]	; 0x38
   2f6a4:	add	r0, r3, r0
   2f6a8:	cmp	r0, r1
   2f6ac:	bcc	2f6f4 <GetDataSlab+0x3878>
   2f6b0:	ldr	r5, [sp, #36]	; 0x24
   2f6b4:	mov	r3, lr
   2f6b8:	mov	ip, sl
   2f6bc:	add	r8, sl, r5, lsl #3
   2f6c0:	ldrh	r1, [r3], r2
   2f6c4:	subs	r5, r5, #2
   2f6c8:	strh	r1, [sp, #152]	; 0x98
   2f6cc:	vld1.16	{d16[0]}, [r4 :16]
   2f6d0:	vmovl.s8	q8, d16
   2f6d4:	vmovl.s16	q8, d16
   2f6d8:	vmovl.s32	q8, d16
   2f6dc:	vst1.64	{d16-d17}, [ip]!
   2f6e0:	bne	2f6c0 <GetDataSlab+0x3844>
   2f6e4:	ldr	r0, [sp, #60]	; 0x3c
   2f6e8:	ldr	r5, [sp, #36]	; 0x24
   2f6ec:	cmp	r0, r5
   2f6f0:	beq	2f718 <GetDataSlab+0x389c>
   2f6f4:	ldr	r0, [sp, #60]	; 0x3c
   2f6f8:	mla	r3, r9, r5, lr
   2f6fc:	sub	r5, r0, r5
   2f700:	ldrsb	r0, [r3], r9
   2f704:	subs	r5, r5, #1
   2f708:	asr	r1, r0, #31
   2f70c:	strd	r0, [r8]
   2f710:	add	r8, r8, #8
   2f714:	bne	2f700 <GetDataSlab+0x3884>
   2f718:	ldr	r0, [sp, #48]	; 0x30
   2f71c:	ldr	r1, [sp, #52]	; 0x34
   2f720:	add	r6, r6, #1
   2f724:	add	lr, lr, r0
   2f728:	ldr	r0, [sp, #64]	; 0x40
   2f72c:	cmp	r6, r1
   2f730:	add	sl, sl, r0
   2f734:	mov	r0, #0
   2f738:	bne	2f640 <GetDataSlab+0x37c4>
   2f73c:	b	2e97c <GetDataSlab+0x2b00>
   2f740:	ldr	r0, [fp, #16]
   2f744:	mov	r7, lr
   2f748:	mov	r5, #0
   2f74c:	sub	lr, fp, #96	; 0x60
   2f750:	ldr	r8, [r0]
   2f754:	sub	r0, r8, #1
   2f758:	str	r0, [fp, #-96]	; 0xffffffa0
   2f75c:	ldr	r0, [fp, #8]
   2f760:	ldr	r0, [r0]
   2f764:	str	r0, [fp, #-176]	; 0xffffff50
   2f768:	str	r0, [sp, #40]	; 0x28
   2f76c:	ldr	r0, [fp, #24]
   2f770:	ldr	r1, [r6]
   2f774:	cmp	r0, #2
   2f778:	str	r1, [sp, #52]	; 0x34
   2f77c:	str	r1, [sp, #60]	; 0x3c
   2f780:	blt	2f8e4 <GetDataSlab+0x3a68>
   2f784:	ldr	r0, [fp, #8]
   2f788:	ldr	r3, [sp, #40]	; 0x28
   2f78c:	mov	r6, #1
   2f790:	mov	r4, #0
   2f794:	mvn	r9, #15
   2f798:	mov	r5, #0
   2f79c:	mov	r1, r0
   2f7a0:	sub	r0, r0, #4
   2f7a4:	mov	r2, r3
   2f7a8:	sub	ip, r1, #12
   2f7ac:	ldr	r1, [sp, #52]	; 0x34
   2f7b0:	str	r1, [sp, #60]	; 0x3c
   2f7b4:	ldr	r1, [fp, #16]
   2f7b8:	str	r2, [sp, #48]	; 0x30
   2f7bc:	add	r4, r4, #1
   2f7c0:	cmp	r4, #4
   2f7c4:	ldr	r1, [r1, r6, lsl #2]
   2f7c8:	str	r3, [r7, r6, lsl #2]
   2f7cc:	sub	r2, r1, #1
   2f7d0:	ldr	r1, [fp, #8]
   2f7d4:	str	r2, [lr, r6, lsl #2]
   2f7d8:	ldr	lr, [r1, r6, lsl #2]
   2f7dc:	bcs	2f7f0 <GetDataSlab+0x3974>
   2f7e0:	mov	sl, lr
   2f7e4:	mov	r1, lr
   2f7e8:	mov	r7, r6
   2f7ec:	b	2f880 <GetDataSlab+0x3a04>
   2f7f0:	vmov.i32	q9, #1	; 0x00000001
   2f7f4:	vmov.i32	q10, #1	; 0x00000001
   2f7f8:	vmov.i32	q8, #1	; 0x00000001
   2f7fc:	bic	r1, r4, #3
   2f800:	bic	sl, r6, #3
   2f804:	vmov.32	d23[1], lr
   2f808:	vmov.32	d18[0], r3
   2f80c:	vmov.32	d20[0], r2
   2f810:	str	r1, [sp, #44]	; 0x2c
   2f814:	sub	r7, r6, r1
   2f818:	mov	r1, ip
   2f81c:	vorr	d16, d18, d18
   2f820:	vmov.i32	q9, #1	; 0x00000001
   2f824:	vorr	d18, d20, d20
   2f828:	vld1.32	{d20-d21}, [r1], r9
   2f82c:	subs	sl, sl, #4
   2f830:	vrev64.32	q12, q10
   2f834:	vext.8	q12, q12, q12, #8
   2f838:	vext.8	q11, q11, q12, #12
   2f83c:	vmul.i32	q9, q9, q12
   2f840:	vmul.i32	q8, q11, q8
   2f844:	vorr	q11, q12, q12
   2f848:	bne	2f828 <GetDataSlab+0x39ac>
   2f84c:	ldr	r1, [sp, #44]	; 0x2c
   2f850:	vext.8	q11, q9, q8, #8
   2f854:	vext.8	q12, q8, q8, #8
   2f858:	mov	sl, lr
   2f85c:	vmul.i32	q0, q9, q11
   2f860:	vmul.i32	q1, q8, q12
   2f864:	vmul.i32	q8, q0, d0[1]
   2f868:	vmul.i32	q9, q1, d2[1]
   2f86c:	vmov.32	r2, d16[0]
   2f870:	vmov.32	r3, d18[0]
   2f874:	cmp	r4, r1
   2f878:	beq	2f894 <GetDataSlab+0x3a18>
   2f87c:	vmov.32	r1, d20[0]
   2f880:	mul	r3, r1, r3
   2f884:	ldr	r1, [r0, r7, lsl #2]
   2f888:	subs	r7, r7, #1
   2f88c:	mul	r2, r2, r1
   2f890:	bne	2f880 <GetDataSlab+0x3a04>
   2f894:	ldr	r1, [fp, #12]
   2f898:	sub	r7, fp, #176	; 0xb0
   2f89c:	sub	lr, fp, #96	; 0x60
   2f8a0:	add	ip, ip, #4
   2f8a4:	str	r2, [lr, r6, lsl #2]
   2f8a8:	str	r3, [r7, r6, lsl #2]
   2f8ac:	ldr	r2, [sp, #48]	; 0x30
   2f8b0:	ldr	r1, [r1, r6, lsl #2]
   2f8b4:	mla	r5, r1, r2, r5
   2f8b8:	ldr	r1, [fp, #20]
   2f8bc:	ldr	r2, [sp, #60]	; 0x3c
   2f8c0:	ldr	r1, [r1, r6, lsl #2]
   2f8c4:	add	r6, r6, #1
   2f8c8:	mul	r2, r1, r2
   2f8cc:	ldr	r1, [fp, #24]
   2f8d0:	str	r2, [sp, #60]	; 0x3c
   2f8d4:	mov	r2, r3
   2f8d8:	mov	r3, sl
   2f8dc:	cmp	r6, r1
   2f8e0:	bne	2f7b4 <GetDataSlab+0x3938>
   2f8e4:	ldr	r0, [sp, #56]	; 0x38
   2f8e8:	cmp	r8, #1
   2f8ec:	mov	r2, lr
   2f8f0:	add	r4, r0, r5
   2f8f4:	bne	4149c <GetDataSlab+0x15620>
   2f8f8:	ldr	r0, [sp, #60]	; 0x3c
   2f8fc:	ldr	r3, [sp, #52]	; 0x34
   2f900:	cmp	r0, #1
   2f904:	blt	51774 <GetDataSlab+0x258f8>
   2f908:	ldr	r0, [fp, #12]
   2f90c:	ldr	ip, [sp, #68]	; 0x44
   2f910:	mov	sl, #0
   2f914:	mov	r9, #0
   2f918:	add	r8, r0, #4
   2f91c:	ldr	r0, [fp, #20]
   2f920:	add	lr, r0, #4
   2f924:	sub	r0, fp, #136	; 0x88
   2f928:	orr	r1, r0, #4
   2f92c:	orr	r0, r2, #4
   2f930:	str	r0, [sp, #32]
   2f934:	bic	r0, r3, #1
   2f938:	str	r0, [sp, #36]	; 0x24
   2f93c:	lsl	r0, r3, #3
   2f940:	str	r0, [sp, #56]	; 0x38
   2f944:	cmp	r3, #1
   2f948:	blt	2fa28 <GetDataSlab+0x3bac>
   2f94c:	ldr	r0, [fp, #12]
   2f950:	ldr	r7, [r0]
   2f954:	mov	r0, #0
   2f958:	str	r7, [sp, #48]	; 0x30
   2f95c:	beq	2f9f4 <GetDataSlab+0x3b78>
   2f960:	ldr	r2, [sp, #68]	; 0x44
   2f964:	ldr	r3, [sp, #56]	; 0x38
   2f968:	ldr	r6, [sp, #52]	; 0x34
   2f96c:	str	sl, [sp, #44]	; 0x2c
   2f970:	mla	r2, r3, sl, r2
   2f974:	add	sl, r4, r6
   2f978:	add	r3, r4, r7
   2f97c:	add	r6, sl, r7
   2f980:	ldr	sl, [sp, #44]	; 0x2c
   2f984:	add	r7, sp, #200	; 0xc8
   2f988:	cmp	r2, r6
   2f98c:	bcs	2f9a8 <GetDataSlab+0x3b2c>
   2f990:	ldr	r2, [sp, #56]	; 0x38
   2f994:	mla	r6, r2, sl, r2
   2f998:	ldr	r2, [sp, #68]	; 0x44
   2f99c:	add	r6, r2, r6
   2f9a0:	cmp	r3, r6
   2f9a4:	bcc	2f9f4 <GetDataSlab+0x3b78>
   2f9a8:	ldr	r0, [sp, #36]	; 0x24
   2f9ac:	mov	r6, ip
   2f9b0:	add	sl, sp, #204	; 0xcc
   2f9b4:	ldrh	r2, [r3], #2
   2f9b8:	subs	r0, r0, #2
   2f9bc:	strh	r2, [r7, #4]
   2f9c0:	vld1.16	{d16[0]}, [sl :16]
   2f9c4:	vmovl.u8	q8, d16
   2f9c8:	vmovl.u16	q0, d16
   2f9cc:	vcvt.f64.u32	d17, s1
   2f9d0:	vcvt.f64.u32	d16, s0
   2f9d4:	vst1.64	{d16-d17}, [r6]!
   2f9d8:	bne	2f9b4 <GetDataSlab+0x3b38>
   2f9dc:	ldr	r0, [sp, #52]	; 0x34
   2f9e0:	ldr	r2, [sp, #36]	; 0x24
   2f9e4:	ldr	sl, [sp, #44]	; 0x2c
   2f9e8:	cmp	r0, r2
   2f9ec:	mov	r0, r2
   2f9f0:	beq	2fa28 <GetDataSlab+0x3bac>
   2f9f4:	ldr	r2, [sp, #52]	; 0x34
   2f9f8:	add	r6, ip, r0, lsl #3
   2f9fc:	sub	r3, r2, r0
   2fa00:	ldr	r2, [sp, #48]	; 0x30
   2fa04:	add	r0, r0, r2
   2fa08:	add	r0, r4, r0
   2fa0c:	ldrb	r2, [r0], #1
   2fa10:	subs	r3, r3, #1
   2fa14:	vmov	s0, r2
   2fa18:	vcvt.f64.u32	d16, s0
   2fa1c:	vstr	d16, [r6]
   2fa20:	add	r6, r6, #8
   2fa24:	bne	2fa0c <GetDataSlab+0x3b90>
   2fa28:	ldr	r0, [sp, #40]	; 0x28
   2fa2c:	add	r4, r4, r0
   2fa30:	add	r5, r5, r0
   2fa34:	ldr	r0, [fp, #24]
   2fa38:	cmp	r0, #2
   2fa3c:	blt	2fae8 <GetDataSlab+0x3c6c>
   2fa40:	mov	r3, #0
   2fa44:	ldr	r2, [r1, r3, lsl #2]
   2fa48:	mov	r0, r3
   2fa4c:	add	r2, r2, #1
   2fa50:	str	r2, [r1, r3, lsl #2]
   2fa54:	ldr	r3, [lr, r3, lsl #2]
   2fa58:	sdiv	r6, r2, r3
   2fa5c:	mls	r2, r6, r3, r2
   2fa60:	cmp	r2, #0
   2fa64:	bne	2fad8 <GetDataSlab+0x3c5c>
   2fa68:	mov	r2, #0
   2fa6c:	sub	r7, fp, #176	; 0xb0
   2fa70:	str	r2, [r1, r0, lsl #2]
   2fa74:	add	r2, r7, r0, lsl #2
   2fa78:	ldr	r3, [r2, #4]
   2fa7c:	sdiv	r2, r5, r3
   2fa80:	mls	r6, r2, r3, r5
   2fa84:	cmp	r6, #0
   2fa88:	beq	2faa8 <GetDataSlab+0x3c2c>
   2fa8c:	ldr	r2, [r7, r0, lsl #2]
   2fa90:	ldr	r7, [r8, r0, lsl #2]
   2fa94:	sub	r3, r3, r6
   2fa98:	mla	r2, r7, r2, r3
   2fa9c:	add	r5, r2, r5
   2faa0:	add	r4, r4, r2
   2faa4:	b	2fac0 <GetDataSlab+0x3c44>
   2faa8:	ldr	r3, [r8, r0, lsl #2]
   2faac:	cmp	r3, #0
   2fab0:	subne	r2, fp, #176	; 0xb0
   2fab4:	ldrne	r2, [r2, r0, lsl #2]
   2fab8:	mlane	r5, r2, r3, r5
   2fabc:	mlane	r4, r2, r3, r4
   2fac0:	ldr	r2, [fp, #24]
   2fac4:	add	r3, r0, #1
   2fac8:	add	r0, r0, #2
   2facc:	cmp	r0, r2
   2fad0:	blt	2fa44 <GetDataSlab+0x3bc8>
   2fad4:	b	2fae8 <GetDataSlab+0x3c6c>
   2fad8:	ldr	r2, [sp, #32]
   2fadc:	ldr	r0, [r2, r0, lsl #2]
   2fae0:	add	r4, r4, r0
   2fae4:	add	r5, r0, r5
   2fae8:	ldr	r3, [sp, #52]	; 0x34
   2faec:	ldr	r0, [sp, #56]	; 0x38
   2faf0:	ldr	r2, [sp, #60]	; 0x3c
   2faf4:	add	sl, sl, #1
   2faf8:	add	r9, r9, r3
   2fafc:	add	ip, ip, r0
   2fb00:	mov	r0, #0
   2fb04:	cmp	r9, r2
   2fb08:	blt	2f944 <GetDataSlab+0x3ac8>
   2fb0c:	b	2e97c <GetDataSlab+0x2b00>
   2fb10:	ldr	r0, [fp, #16]
   2fb14:	mov	r2, #0
   2fb18:	sub	r5, fp, #96	; 0x60
   2fb1c:	ldr	r0, [r0]
   2fb20:	str	r0, [sp, #32]
   2fb24:	sub	r0, r0, #1
   2fb28:	str	r0, [fp, #-96]	; 0xffffffa0
   2fb2c:	ldr	r0, [fp, #8]
   2fb30:	ldr	r0, [r0]
   2fb34:	str	r0, [fp, #-176]	; 0xffffff50
   2fb38:	str	r0, [sp, #48]	; 0x30
   2fb3c:	ldr	r0, [fp, #24]
   2fb40:	ldr	r1, [r6]
   2fb44:	cmp	r0, #2
   2fb48:	str	r1, [sp, #52]	; 0x34
   2fb4c:	str	r1, [sp, #60]	; 0x3c
   2fb50:	blt	2fca4 <GetDataSlab+0x3e28>
   2fb54:	ldr	r0, [fp, #8]
   2fb58:	ldr	r3, [sp, #48]	; 0x30
   2fb5c:	ldr	r1, [sp, #52]	; 0x34
   2fb60:	mov	r4, #1
   2fb64:	mov	r9, #0
   2fb68:	mov	r2, #0
   2fb6c:	sub	r7, r0, #4
   2fb70:	sub	ip, r0, #12
   2fb74:	mvn	r0, #15
   2fb78:	mov	sl, r3
   2fb7c:	str	r1, [sp, #60]	; 0x3c
   2fb80:	ldr	r1, [fp, #16]
   2fb84:	add	r9, r9, #1
   2fb88:	cmp	r9, #4
   2fb8c:	ldr	r1, [r1, r4, lsl #2]
   2fb90:	str	r3, [lr, r4, lsl #2]
   2fb94:	sub	lr, r1, #1
   2fb98:	ldr	r1, [fp, #8]
   2fb9c:	str	lr, [r5, r4, lsl #2]
   2fba0:	ldr	r6, [r1, r4, lsl #2]
   2fba4:	bcs	2fbb8 <GetDataSlab+0x3d3c>
   2fba8:	mov	r8, r6
   2fbac:	mov	r1, r6
   2fbb0:	mov	r5, r4
   2fbb4:	b	2fc40 <GetDataSlab+0x3dc4>
   2fbb8:	vmov.i32	q9, #1	; 0x00000001
   2fbbc:	vmov.i32	q10, #1	; 0x00000001
   2fbc0:	vmov.i32	q8, #1	; 0x00000001
   2fbc4:	bic	r1, r9, #3
   2fbc8:	bic	r8, r4, #3
   2fbcc:	vmov.32	d23[1], r6
   2fbd0:	vmov.32	d18[0], r3
   2fbd4:	vmov.32	d20[0], lr
   2fbd8:	sub	r5, r4, r1
   2fbdc:	mov	r3, ip
   2fbe0:	vorr	d16, d18, d18
   2fbe4:	vmov.i32	q9, #1	; 0x00000001
   2fbe8:	vorr	d18, d20, d20
   2fbec:	vld1.32	{d20-d21}, [r3], r0
   2fbf0:	subs	r8, r8, #4
   2fbf4:	vrev64.32	q12, q10
   2fbf8:	vext.8	q12, q12, q12, #8
   2fbfc:	vext.8	q11, q11, q12, #12
   2fc00:	vmul.i32	q9, q9, q12
   2fc04:	vmul.i32	q8, q11, q8
   2fc08:	vorr	q11, q12, q12
   2fc0c:	bne	2fbec <GetDataSlab+0x3d70>
   2fc10:	vext.8	q11, q9, q8, #8
   2fc14:	vext.8	q12, q8, q8, #8
   2fc18:	mov	r8, r6
   2fc1c:	cmp	r9, r1
   2fc20:	vmul.i32	q0, q9, q11
   2fc24:	vmul.i32	q1, q8, q12
   2fc28:	vmul.i32	q8, q0, d0[1]
   2fc2c:	vmul.i32	q9, q1, d2[1]
   2fc30:	vmov.32	lr, d16[0]
   2fc34:	vmov.32	r3, d18[0]
   2fc38:	beq	2fc54 <GetDataSlab+0x3dd8>
   2fc3c:	vmov.32	r1, d20[0]
   2fc40:	mul	r3, r1, r3
   2fc44:	ldr	r1, [r7, r5, lsl #2]
   2fc48:	subs	r5, r5, #1
   2fc4c:	mul	lr, lr, r1
   2fc50:	bne	2fc40 <GetDataSlab+0x3dc4>
   2fc54:	sub	r1, fp, #176	; 0xb0
   2fc58:	sub	r5, fp, #96	; 0x60
   2fc5c:	ldr	r6, [sp, #60]	; 0x3c
   2fc60:	add	ip, ip, #4
   2fc64:	str	lr, [r5, r4, lsl #2]
   2fc68:	str	r3, [r1, r4, lsl #2]
   2fc6c:	mov	lr, r1
   2fc70:	ldr	r1, [fp, #12]
   2fc74:	ldr	r1, [r1, r4, lsl #2]
   2fc78:	mla	r2, r1, sl, r2
   2fc7c:	ldr	r1, [fp, #20]
   2fc80:	mov	sl, r3
   2fc84:	mov	r3, r8
   2fc88:	ldr	r1, [r1, r4, lsl #2]
   2fc8c:	add	r4, r4, #1
   2fc90:	mul	r6, r1, r6
   2fc94:	ldr	r1, [fp, #24]
   2fc98:	str	r6, [sp, #60]	; 0x3c
   2fc9c:	cmp	r4, r1
   2fca0:	bne	2fb80 <GetDataSlab+0x3d04>
   2fca4:	ldr	r0, [sp, #56]	; 0x38
   2fca8:	ldr	r1, [sp, #32]
   2fcac:	add	sl, r0, r2, lsl #1
   2fcb0:	cmp	r1, #1
   2fcb4:	bne	41638 <GetDataSlab+0x157bc>
   2fcb8:	ldr	r0, [sp, #60]	; 0x3c
   2fcbc:	ldr	r1, [sp, #52]	; 0x34
   2fcc0:	cmp	r0, #1
   2fcc4:	blt	51788 <GetDataSlab+0x2590c>
   2fcc8:	ldr	r0, [fp, #20]
   2fccc:	ldr	r8, [fp, #12]
   2fcd0:	add	ip, sp, #192	; 0xc0
   2fcd4:	mov	r9, #0
   2fcd8:	add	r7, r0, #4
   2fcdc:	sub	r0, fp, #136	; 0x88
   2fce0:	orr	r6, r0, #4
   2fce4:	sub	r0, fp, #96	; 0x60
   2fce8:	orr	r0, r0, #4
   2fcec:	str	r0, [sp, #40]	; 0x28
   2fcf0:	lsl	r0, r1, #3
   2fcf4:	str	r0, [sp, #56]	; 0x38
   2fcf8:	bic	r0, r1, #1
   2fcfc:	str	r0, [sp, #44]	; 0x2c
   2fd00:	ldr	r0, [r8], #4
   2fd04:	str	r0, [sp, #64]	; 0x40
   2fd08:	cmp	r1, #1
   2fd0c:	blt	2fd94 <GetDataSlab+0x3f18>
   2fd10:	mov	r3, #0
   2fd14:	beq	2fd5c <GetDataSlab+0x3ee0>
   2fd18:	ldr	r0, [sp, #64]	; 0x40
   2fd1c:	ldr	r1, [sp, #44]	; 0x2c
   2fd20:	ldr	r3, [sp, #68]	; 0x44
   2fd24:	add	r0, sl, r0, lsl #1
   2fd28:	ldr	r5, [r0], #4
   2fd2c:	subs	r1, r1, #2
   2fd30:	str	r5, [sp, #192]	; 0xc0
   2fd34:	vld1.32	{d16[0]}, [ip :32]
   2fd38:	vmovl.s16	q0, d16
   2fd3c:	vcvt.f64.s32	d17, s1
   2fd40:	vcvt.f64.s32	d16, s0
   2fd44:	vst1.64	{d16-d17}, [r3]!
   2fd48:	bne	2fd28 <GetDataSlab+0x3eac>
   2fd4c:	ldr	r0, [sp, #52]	; 0x34
   2fd50:	ldr	r3, [sp, #44]	; 0x2c
   2fd54:	cmp	r0, r3
   2fd58:	beq	2fd94 <GetDataSlab+0x3f18>
   2fd5c:	ldr	r5, [sp, #64]	; 0x40
   2fd60:	ldr	r0, [sp, #52]	; 0x34
   2fd64:	ldr	r1, [sp, #68]	; 0x44
   2fd68:	add	r5, sl, r5, lsl #1
   2fd6c:	sub	r0, r0, r3
   2fd70:	add	r1, r1, r3, lsl #3
   2fd74:	add	r3, r5, r3, lsl #1
   2fd78:	ldrsh	r5, [r3], #2
   2fd7c:	subs	r0, r0, #1
   2fd80:	vmov	s0, r5
   2fd84:	vcvt.f64.s32	d16, s0
   2fd88:	vstr	d16, [r1]
   2fd8c:	add	r1, r1, #8
   2fd90:	bne	2fd78 <GetDataSlab+0x3efc>
   2fd94:	ldr	r0, [sp, #48]	; 0x30
   2fd98:	sub	r4, fp, #176	; 0xb0
   2fd9c:	add	sl, sl, r0, lsl #1
   2fda0:	add	r2, r2, r0
   2fda4:	ldr	r0, [fp, #24]
   2fda8:	cmp	r0, #2
   2fdac:	blt	2fe58 <GetDataSlab+0x3fdc>
   2fdb0:	mov	r1, #0
   2fdb4:	mov	r0, r1
   2fdb8:	ldr	r1, [r6, r1, lsl #2]
   2fdbc:	add	r1, r1, #1
   2fdc0:	str	r1, [r6, r0, lsl #2]
   2fdc4:	ldr	r3, [r7, r0, lsl #2]
   2fdc8:	sdiv	r5, r1, r3
   2fdcc:	mls	r1, r5, r3, r1
   2fdd0:	cmp	r1, #0
   2fdd4:	bne	2fe48 <GetDataSlab+0x3fcc>
   2fdd8:	mov	r1, #0
   2fddc:	str	r1, [r6, r0, lsl #2]
   2fde0:	add	r1, r4, r0, lsl #2
   2fde4:	ldr	r1, [r1, #4]
   2fde8:	sdiv	r3, r2, r1
   2fdec:	mls	r3, r3, r1, r2
   2fdf0:	cmp	r3, #0
   2fdf4:	beq	2fe14 <GetDataSlab+0x3f98>
   2fdf8:	ldr	r5, [r4, r0, lsl #2]
   2fdfc:	ldr	lr, [r8, r0, lsl #2]
   2fe00:	sub	r1, r1, r3
   2fe04:	sub	r4, fp, #176	; 0xb0
   2fe08:	mla	r1, lr, r5, r1
   2fe0c:	add	r2, r1, r2
   2fe10:	b	2fe2c <GetDataSlab+0x3fb0>
   2fe14:	ldr	r1, [r8, r0, lsl #2]
   2fe18:	cmp	r1, #0
   2fe1c:	beq	2fe30 <GetDataSlab+0x3fb4>
   2fe20:	ldr	r3, [r4, r0, lsl #2]
   2fe24:	mla	r2, r3, r1, r2
   2fe28:	mul	r1, r3, r1
   2fe2c:	add	sl, sl, r1, lsl #1
   2fe30:	ldr	r3, [fp, #24]
   2fe34:	add	r1, r0, #1
   2fe38:	add	r0, r0, #2
   2fe3c:	cmp	r0, r3
   2fe40:	blt	2fdb4 <GetDataSlab+0x3f38>
   2fe44:	b	2fe58 <GetDataSlab+0x3fdc>
   2fe48:	ldr	r1, [sp, #40]	; 0x28
   2fe4c:	ldr	r0, [r1, r0, lsl #2]
   2fe50:	add	sl, sl, r0, lsl #1
   2fe54:	add	r2, r0, r2
   2fe58:	ldr	r0, [sp, #68]	; 0x44
   2fe5c:	ldr	r1, [sp, #56]	; 0x38
   2fe60:	ldr	r3, [sp, #60]	; 0x3c
   2fe64:	add	r0, r0, r1
   2fe68:	ldr	r1, [sp, #52]	; 0x34
   2fe6c:	str	r0, [sp, #68]	; 0x44
   2fe70:	mov	r0, #0
   2fe74:	add	r9, r9, r1
   2fe78:	cmp	r9, r3
   2fe7c:	blt	2fd08 <GetDataSlab+0x3e8c>
   2fe80:	b	2e97c <GetDataSlab+0x2b00>
   2fe84:	ldr	r0, [fp, #16]
   2fe88:	mov	r2, #0
   2fe8c:	sub	r5, fp, #96	; 0x60
   2fe90:	ldr	r0, [r0]
   2fe94:	str	r0, [sp, #32]
   2fe98:	sub	r0, r0, #1
   2fe9c:	str	r0, [fp, #-96]	; 0xffffffa0
   2fea0:	ldr	r0, [fp, #8]
   2fea4:	ldr	r0, [r0]
   2fea8:	str	r0, [fp, #-176]	; 0xffffff50
   2feac:	str	r0, [sp, #48]	; 0x30
   2feb0:	ldr	r0, [fp, #24]
   2feb4:	ldr	r1, [r6]
   2feb8:	cmp	r0, #2
   2febc:	str	r1, [sp, #52]	; 0x34
   2fec0:	str	r1, [sp, #60]	; 0x3c
   2fec4:	blt	30018 <GetDataSlab+0x419c>
   2fec8:	ldr	r0, [fp, #8]
   2fecc:	ldr	r3, [sp, #48]	; 0x30
   2fed0:	ldr	r1, [sp, #52]	; 0x34
   2fed4:	mov	r4, #1
   2fed8:	mov	r9, #0
   2fedc:	mov	r2, #0
   2fee0:	sub	r7, r0, #4
   2fee4:	sub	ip, r0, #12
   2fee8:	mvn	r0, #15
   2feec:	mov	sl, r3
   2fef0:	str	r1, [sp, #60]	; 0x3c
   2fef4:	ldr	r1, [fp, #16]
   2fef8:	add	r9, r9, #1
   2fefc:	cmp	r9, #4
   2ff00:	ldr	r1, [r1, r4, lsl #2]
   2ff04:	str	r3, [lr, r4, lsl #2]
   2ff08:	sub	lr, r1, #1
   2ff0c:	ldr	r1, [fp, #8]
   2ff10:	str	lr, [r5, r4, lsl #2]
   2ff14:	ldr	r6, [r1, r4, lsl #2]
   2ff18:	bcs	2ff2c <GetDataSlab+0x40b0>
   2ff1c:	mov	r8, r6
   2ff20:	mov	r1, r6
   2ff24:	mov	r5, r4
   2ff28:	b	2ffb4 <GetDataSlab+0x4138>
   2ff2c:	vmov.i32	q9, #1	; 0x00000001
   2ff30:	vmov.i32	q10, #1	; 0x00000001
   2ff34:	vmov.i32	q8, #1	; 0x00000001
   2ff38:	bic	r1, r9, #3
   2ff3c:	bic	r8, r4, #3
   2ff40:	vmov.32	d23[1], r6
   2ff44:	vmov.32	d18[0], r3
   2ff48:	vmov.32	d20[0], lr
   2ff4c:	sub	r5, r4, r1
   2ff50:	mov	r3, ip
   2ff54:	vorr	d16, d18, d18
   2ff58:	vmov.i32	q9, #1	; 0x00000001
   2ff5c:	vorr	d18, d20, d20
   2ff60:	vld1.32	{d20-d21}, [r3], r0
   2ff64:	subs	r8, r8, #4
   2ff68:	vrev64.32	q12, q10
   2ff6c:	vext.8	q12, q12, q12, #8
   2ff70:	vext.8	q11, q11, q12, #12
   2ff74:	vmul.i32	q9, q9, q12
   2ff78:	vmul.i32	q8, q11, q8
   2ff7c:	vorr	q11, q12, q12
   2ff80:	bne	2ff60 <GetDataSlab+0x40e4>
   2ff84:	vext.8	q11, q9, q8, #8
   2ff88:	vext.8	q12, q8, q8, #8
   2ff8c:	mov	r8, r6
   2ff90:	cmp	r9, r1
   2ff94:	vmul.i32	q0, q9, q11
   2ff98:	vmul.i32	q1, q8, q12
   2ff9c:	vmul.i32	q8, q0, d0[1]
   2ffa0:	vmul.i32	q9, q1, d2[1]
   2ffa4:	vmov.32	lr, d16[0]
   2ffa8:	vmov.32	r3, d18[0]
   2ffac:	beq	2ffc8 <GetDataSlab+0x414c>
   2ffb0:	vmov.32	r1, d20[0]
   2ffb4:	mul	r3, r1, r3
   2ffb8:	ldr	r1, [r7, r5, lsl #2]
   2ffbc:	subs	r5, r5, #1
   2ffc0:	mul	lr, lr, r1
   2ffc4:	bne	2ffb4 <GetDataSlab+0x4138>
   2ffc8:	sub	r1, fp, #176	; 0xb0
   2ffcc:	sub	r5, fp, #96	; 0x60
   2ffd0:	ldr	r6, [sp, #60]	; 0x3c
   2ffd4:	add	ip, ip, #4
   2ffd8:	str	lr, [r5, r4, lsl #2]
   2ffdc:	str	r3, [r1, r4, lsl #2]
   2ffe0:	mov	lr, r1
   2ffe4:	ldr	r1, [fp, #12]
   2ffe8:	ldr	r1, [r1, r4, lsl #2]
   2ffec:	mla	r2, r1, sl, r2
   2fff0:	ldr	r1, [fp, #20]
   2fff4:	mov	sl, r3
   2fff8:	mov	r3, r8
   2fffc:	ldr	r1, [r1, r4, lsl #2]
   30000:	add	r4, r4, #1
   30004:	mul	r6, r1, r6
   30008:	ldr	r1, [fp, #24]
   3000c:	str	r6, [sp, #60]	; 0x3c
   30010:	cmp	r4, r1
   30014:	bne	2fef4 <GetDataSlab+0x4078>
   30018:	ldr	r0, [sp, #56]	; 0x38
   3001c:	ldr	r1, [sp, #32]
   30020:	add	sl, r0, r2, lsl #1
   30024:	cmp	r1, #1
   30028:	bne	417d4 <GetDataSlab+0x15958>
   3002c:	ldr	r0, [sp, #60]	; 0x3c
   30030:	ldr	r1, [sp, #52]	; 0x34
   30034:	cmp	r0, #1
   30038:	blt	5179c <GetDataSlab+0x25920>
   3003c:	ldr	r0, [fp, #20]
   30040:	ldr	r8, [fp, #12]
   30044:	add	ip, sp, #196	; 0xc4
   30048:	mov	r9, #0
   3004c:	add	r7, r0, #4
   30050:	sub	r0, fp, #136	; 0x88
   30054:	orr	r6, r0, #4
   30058:	sub	r0, fp, #96	; 0x60
   3005c:	orr	r0, r0, #4
   30060:	str	r0, [sp, #40]	; 0x28
   30064:	lsl	r0, r1, #3
   30068:	str	r0, [sp, #56]	; 0x38
   3006c:	bic	r0, r1, #1
   30070:	str	r0, [sp, #44]	; 0x2c
   30074:	ldr	r0, [r8], #4
   30078:	str	r0, [sp, #64]	; 0x40
   3007c:	cmp	r1, #1
   30080:	blt	30108 <GetDataSlab+0x428c>
   30084:	mov	r3, #0
   30088:	beq	300d0 <GetDataSlab+0x4254>
   3008c:	ldr	r0, [sp, #64]	; 0x40
   30090:	ldr	r1, [sp, #44]	; 0x2c
   30094:	ldr	r3, [sp, #68]	; 0x44
   30098:	add	r0, sl, r0, lsl #1
   3009c:	ldr	r5, [r0], #4
   300a0:	subs	r1, r1, #2
   300a4:	str	r5, [sp, #196]	; 0xc4
   300a8:	vld1.32	{d16[0]}, [ip :32]
   300ac:	vmovl.u16	q0, d16
   300b0:	vcvt.f64.u32	d17, s1
   300b4:	vcvt.f64.u32	d16, s0
   300b8:	vst1.64	{d16-d17}, [r3]!
   300bc:	bne	3009c <GetDataSlab+0x4220>
   300c0:	ldr	r0, [sp, #52]	; 0x34
   300c4:	ldr	r3, [sp, #44]	; 0x2c
   300c8:	cmp	r0, r3
   300cc:	beq	30108 <GetDataSlab+0x428c>
   300d0:	ldr	r5, [sp, #64]	; 0x40
   300d4:	ldr	r0, [sp, #52]	; 0x34
   300d8:	ldr	r1, [sp, #68]	; 0x44
   300dc:	add	r5, sl, r5, lsl #1
   300e0:	sub	r0, r0, r3
   300e4:	add	r1, r1, r3, lsl #3
   300e8:	add	r3, r5, r3, lsl #1
   300ec:	ldrh	r5, [r3], #2
   300f0:	subs	r0, r0, #1
   300f4:	vmov	s0, r5
   300f8:	vcvt.f64.u32	d16, s0
   300fc:	vstr	d16, [r1]
   30100:	add	r1, r1, #8
   30104:	bne	300ec <GetDataSlab+0x4270>
   30108:	ldr	r0, [sp, #48]	; 0x30
   3010c:	sub	r4, fp, #176	; 0xb0
   30110:	add	sl, sl, r0, lsl #1
   30114:	add	r2, r2, r0
   30118:	ldr	r0, [fp, #24]
   3011c:	cmp	r0, #2
   30120:	blt	301cc <GetDataSlab+0x4350>
   30124:	mov	r1, #0
   30128:	mov	r0, r1
   3012c:	ldr	r1, [r6, r1, lsl #2]
   30130:	add	r1, r1, #1
   30134:	str	r1, [r6, r0, lsl #2]
   30138:	ldr	r3, [r7, r0, lsl #2]
   3013c:	sdiv	r5, r1, r3
   30140:	mls	r1, r5, r3, r1
   30144:	cmp	r1, #0
   30148:	bne	301bc <GetDataSlab+0x4340>
   3014c:	mov	r1, #0
   30150:	str	r1, [r6, r0, lsl #2]
   30154:	add	r1, r4, r0, lsl #2
   30158:	ldr	r1, [r1, #4]
   3015c:	sdiv	r3, r2, r1
   30160:	mls	r3, r3, r1, r2
   30164:	cmp	r3, #0
   30168:	beq	30188 <GetDataSlab+0x430c>
   3016c:	ldr	r5, [r4, r0, lsl #2]
   30170:	ldr	lr, [r8, r0, lsl #2]
   30174:	sub	r1, r1, r3
   30178:	sub	r4, fp, #176	; 0xb0
   3017c:	mla	r1, lr, r5, r1
   30180:	add	r2, r1, r2
   30184:	b	301a0 <GetDataSlab+0x4324>
   30188:	ldr	r1, [r8, r0, lsl #2]
   3018c:	cmp	r1, #0
   30190:	beq	301a4 <GetDataSlab+0x4328>
   30194:	ldr	r3, [r4, r0, lsl #2]
   30198:	mla	r2, r3, r1, r2
   3019c:	mul	r1, r3, r1
   301a0:	add	sl, sl, r1, lsl #1
   301a4:	ldr	r3, [fp, #24]
   301a8:	add	r1, r0, #1
   301ac:	add	r0, r0, #2
   301b0:	cmp	r0, r3
   301b4:	blt	30128 <GetDataSlab+0x42ac>
   301b8:	b	301cc <GetDataSlab+0x4350>
   301bc:	ldr	r1, [sp, #40]	; 0x28
   301c0:	ldr	r0, [r1, r0, lsl #2]
   301c4:	add	sl, sl, r0, lsl #1
   301c8:	add	r2, r0, r2
   301cc:	ldr	r0, [sp, #68]	; 0x44
   301d0:	ldr	r1, [sp, #56]	; 0x38
   301d4:	ldr	r3, [sp, #60]	; 0x3c
   301d8:	add	r0, r0, r1
   301dc:	ldr	r1, [sp, #52]	; 0x34
   301e0:	str	r0, [sp, #68]	; 0x44
   301e4:	mov	r0, #0
   301e8:	add	r9, r9, r1
   301ec:	cmp	r9, r3
   301f0:	blt	3007c <GetDataSlab+0x4200>
   301f4:	b	2e97c <GetDataSlab+0x2b00>
   301f8:	ldr	r0, [fp, #16]
   301fc:	mov	r3, #0
   30200:	sub	r9, fp, #96	; 0x60
   30204:	ldr	r0, [r0]
   30208:	str	r0, [sp, #36]	; 0x24
   3020c:	sub	r0, r0, #1
   30210:	str	r0, [fp, #-96]	; 0xffffffa0
   30214:	ldr	r0, [fp, #8]
   30218:	ldr	r0, [r0]
   3021c:	str	r0, [fp, #-176]	; 0xffffff50
   30220:	str	r0, [sp, #44]	; 0x2c
   30224:	ldr	r0, [fp, #24]
   30228:	ldr	r1, [r6]
   3022c:	cmp	r0, #2
   30230:	str	r1, [sp, #48]	; 0x30
   30234:	str	r1, [sp, #60]	; 0x3c
   30238:	blt	3038c <GetDataSlab+0x4510>
   3023c:	ldr	r0, [fp, #8]
   30240:	ldr	r2, [sp, #44]	; 0x2c
   30244:	mov	r5, #1
   30248:	mov	r7, #0
   3024c:	mvn	r4, #15
   30250:	mov	r3, #0
   30254:	sub	r1, r0, #4
   30258:	sub	ip, r0, #12
   3025c:	ldr	r0, [sp, #48]	; 0x30
   30260:	mov	r6, r2
   30264:	str	r0, [sp, #60]	; 0x3c
   30268:	ldr	r0, [fp, #16]
   3026c:	add	r7, r7, #1
   30270:	str	r6, [sp, #52]	; 0x34
   30274:	cmp	r7, #4
   30278:	ldr	r0, [r0, r5, lsl #2]
   3027c:	str	r2, [lr, r5, lsl #2]
   30280:	sub	r8, r0, #1
   30284:	ldr	r0, [fp, #8]
   30288:	str	r8, [r9, r5, lsl #2]
   3028c:	ldr	r0, [r0, r5, lsl #2]
   30290:	bcs	302a0 <GetDataSlab+0x4424>
   30294:	mov	sl, r0
   30298:	mov	r6, r5
   3029c:	b	30328 <GetDataSlab+0x44ac>
   302a0:	vmov.i32	q9, #1	; 0x00000001
   302a4:	vmov.i32	q10, #1	; 0x00000001
   302a8:	vmov.i32	q8, #1	; 0x00000001
   302ac:	bic	lr, r7, #3
   302b0:	bic	sl, r5, #3
   302b4:	vmov.32	d23[1], r0
   302b8:	vmov.32	d18[0], r2
   302bc:	vmov.32	d20[0], r8
   302c0:	sub	r6, r5, lr
   302c4:	mov	r2, ip
   302c8:	vorr	d16, d18, d18
   302cc:	vmov.i32	q9, #1	; 0x00000001
   302d0:	vorr	d18, d20, d20
   302d4:	vld1.32	{d20-d21}, [r2], r4
   302d8:	subs	sl, sl, #4
   302dc:	vrev64.32	q12, q10
   302e0:	vext.8	q12, q12, q12, #8
   302e4:	vext.8	q11, q11, q12, #12
   302e8:	vmul.i32	q9, q9, q12
   302ec:	vmul.i32	q8, q11, q8
   302f0:	vorr	q11, q12, q12
   302f4:	bne	302d4 <GetDataSlab+0x4458>
   302f8:	vext.8	q11, q9, q8, #8
   302fc:	vext.8	q12, q8, q8, #8
   30300:	mov	sl, r0
   30304:	cmp	r7, lr
   30308:	vmul.i32	q0, q9, q11
   3030c:	vmul.i32	q1, q8, q12
   30310:	vmul.i32	q8, q0, d0[1]
   30314:	vmul.i32	q9, q1, d2[1]
   30318:	vmov.32	r8, d16[0]
   3031c:	vmov.32	r2, d18[0]
   30320:	beq	3033c <GetDataSlab+0x44c0>
   30324:	vmov.32	r0, d20[0]
   30328:	mul	r2, r0, r2
   3032c:	ldr	r0, [r1, r6, lsl #2]
   30330:	subs	r6, r6, #1
   30334:	mul	r8, r8, r0
   30338:	bne	30328 <GetDataSlab+0x44ac>
   3033c:	ldr	r0, [fp, #12]
   30340:	sub	lr, fp, #176	; 0xb0
   30344:	sub	r9, fp, #96	; 0x60
   30348:	ldr	r6, [sp, #52]	; 0x34
   3034c:	add	ip, ip, #4
   30350:	str	r2, [lr, r5, lsl #2]
   30354:	str	r8, [r9, r5, lsl #2]
   30358:	ldr	r0, [r0, r5, lsl #2]
   3035c:	mla	r3, r0, r6, r3
   30360:	ldr	r0, [fp, #20]
   30364:	ldr	r6, [sp, #60]	; 0x3c
   30368:	ldr	r0, [r0, r5, lsl #2]
   3036c:	add	r5, r5, #1
   30370:	mul	r6, r0, r6
   30374:	ldr	r0, [fp, #24]
   30378:	str	r6, [sp, #60]	; 0x3c
   3037c:	mov	r6, r2
   30380:	mov	r2, sl
   30384:	cmp	r5, r0
   30388:	bne	30268 <GetDataSlab+0x43ec>
   3038c:	ldr	r0, [sp, #56]	; 0x38
   30390:	ldr	r6, [sp, #36]	; 0x24
   30394:	add	sl, r0, r3, lsl #2
   30398:	ldr	r0, [fp, #12]
   3039c:	cmp	r6, #1
   303a0:	bne	41970 <GetDataSlab+0x15af4>
   303a4:	ldr	r1, [sp, #60]	; 0x3c
   303a8:	ldr	r2, [sp, #48]	; 0x30
   303ac:	cmp	r1, #1
   303b0:	sub	r1, fp, #96	; 0x60
   303b4:	blt	517b0 <GetDataSlab+0x25934>
   303b8:	add	r9, r0, #4
   303bc:	ldr	r0, [fp, #20]
   303c0:	mov	ip, #0
   303c4:	mov	lr, #0
   303c8:	add	r8, r0, #4
   303cc:	sub	r0, fp, #136	; 0x88
   303d0:	orr	r5, r0, #4
   303d4:	orr	r0, r1, #4
   303d8:	str	r0, [sp, #40]	; 0x28
   303dc:	lsl	r0, r2, #3
   303e0:	str	r0, [sp, #56]	; 0x38
   303e4:	bic	r0, r2, #1
   303e8:	str	r0, [sp, #52]	; 0x34
   303ec:	cmp	r2, #1
   303f0:	blt	3046c <GetDataSlab+0x45f0>
   303f4:	ldr	r0, [fp, #12]
   303f8:	mov	r2, #0
   303fc:	ldr	r4, [r0]
   30400:	beq	30438 <GetDataSlab+0x45bc>
   30404:	ldr	r1, [sp, #52]	; 0x34
   30408:	ldr	r0, [sp, #68]	; 0x44
   3040c:	add	r2, sl, r4, lsl #2
   30410:	vld1.32	{d0}, [r2]!
   30414:	subs	r1, r1, #2
   30418:	vcvt.f64.s32	d17, s1
   3041c:	vcvt.f64.s32	d16, s0
   30420:	vst1.64	{d16-d17}, [r0]!
   30424:	bne	30410 <GetDataSlab+0x4594>
   30428:	ldr	r0, [sp, #48]	; 0x30
   3042c:	ldr	r2, [sp, #52]	; 0x34
   30430:	cmp	r0, r2
   30434:	beq	3046c <GetDataSlab+0x45f0>
   30438:	ldr	r0, [sp, #48]	; 0x30
   3043c:	sub	r1, r0, r2
   30440:	ldr	r0, [sp, #68]	; 0x44
   30444:	add	r0, r0, r2, lsl #3
   30448:	add	r2, r2, r4
   3044c:	add	r2, sl, r2, lsl #2
   30450:	ldr	r7, [r2], #4
   30454:	subs	r1, r1, #1
   30458:	vmov	s0, r7
   3045c:	vcvt.f64.s32	d16, s0
   30460:	vstr	d16, [r0]
   30464:	add	r0, r0, #8
   30468:	bne	30450 <GetDataSlab+0x45d4>
   3046c:	ldr	r0, [sp, #44]	; 0x2c
   30470:	add	sl, sl, r0, lsl #2
   30474:	add	r3, r3, r0
   30478:	ldr	r0, [fp, #24]
   3047c:	cmp	r0, #2
   30480:	blt	3052c <GetDataSlab+0x46b0>
   30484:	mov	r1, #0
   30488:	mov	r0, r1
   3048c:	ldr	r1, [r5, r1, lsl #2]
   30490:	add	r1, r1, #1
   30494:	str	r1, [r5, r0, lsl #2]
   30498:	ldr	r2, [r8, r0, lsl #2]
   3049c:	sdiv	r7, r1, r2
   304a0:	mls	r1, r7, r2, r1
   304a4:	cmp	r1, #0
   304a8:	bne	3051c <GetDataSlab+0x46a0>
   304ac:	sub	r4, fp, #176	; 0xb0
   304b0:	str	ip, [r5, r0, lsl #2]
   304b4:	add	r1, r4, r0, lsl #2
   304b8:	ldr	r1, [r1, #4]
   304bc:	sdiv	r2, r3, r1
   304c0:	mls	r2, r2, r1, r3
   304c4:	cmp	r2, #0
   304c8:	beq	304e4 <GetDataSlab+0x4668>
   304cc:	ldr	r7, [r4, r0, lsl #2]
   304d0:	ldr	r6, [r9, r0, lsl #2]
   304d4:	sub	r1, r1, r2
   304d8:	mla	r1, r6, r7, r1
   304dc:	add	r3, r1, r3
   304e0:	b	30500 <GetDataSlab+0x4684>
   304e4:	ldr	r1, [r9, r0, lsl #2]
   304e8:	cmp	r1, #0
   304ec:	beq	30504 <GetDataSlab+0x4688>
   304f0:	sub	r2, fp, #176	; 0xb0
   304f4:	ldr	r2, [r2, r0, lsl #2]
   304f8:	mla	r3, r2, r1, r3
   304fc:	mul	r1, r2, r1
   30500:	add	sl, sl, r1, lsl #2
   30504:	ldr	r2, [fp, #24]
   30508:	add	r1, r0, #1
   3050c:	add	r0, r0, #2
   30510:	cmp	r0, r2
   30514:	blt	30488 <GetDataSlab+0x460c>
   30518:	b	3052c <GetDataSlab+0x46b0>
   3051c:	ldr	r1, [sp, #40]	; 0x28
   30520:	ldr	r0, [r1, r0, lsl #2]
   30524:	add	sl, sl, r0, lsl #2
   30528:	add	r3, r0, r3
   3052c:	ldr	r0, [sp, #68]	; 0x44
   30530:	ldr	r1, [sp, #56]	; 0x38
   30534:	ldr	r2, [sp, #48]	; 0x30
   30538:	add	r0, r0, r1
   3053c:	ldr	r1, [sp, #60]	; 0x3c
   30540:	add	lr, lr, r2
   30544:	str	r0, [sp, #68]	; 0x44
   30548:	mov	r0, #0
   3054c:	cmp	lr, r1
   30550:	blt	303ec <GetDataSlab+0x4570>
   30554:	b	2e97c <GetDataSlab+0x2b00>
   30558:	ldr	r0, [fp, #16]
   3055c:	mov	r3, #0
   30560:	sub	r9, fp, #96	; 0x60
   30564:	ldr	r0, [r0]
   30568:	str	r0, [sp, #36]	; 0x24
   3056c:	sub	r0, r0, #1
   30570:	str	r0, [fp, #-96]	; 0xffffffa0
   30574:	ldr	r0, [fp, #8]
   30578:	ldr	r0, [r0]
   3057c:	str	r0, [fp, #-176]	; 0xffffff50
   30580:	str	r0, [sp, #44]	; 0x2c
   30584:	ldr	r0, [fp, #24]
   30588:	ldr	r1, [r6]
   3058c:	cmp	r0, #2
   30590:	str	r1, [sp, #48]	; 0x30
   30594:	str	r1, [sp, #60]	; 0x3c
   30598:	blt	306ec <GetDataSlab+0x4870>
   3059c:	ldr	r0, [fp, #8]
   305a0:	ldr	r2, [sp, #44]	; 0x2c
   305a4:	mov	r5, #1
   305a8:	mov	r7, #0
   305ac:	mvn	r4, #15
   305b0:	mov	r3, #0
   305b4:	sub	r1, r0, #4
   305b8:	sub	ip, r0, #12
   305bc:	ldr	r0, [sp, #48]	; 0x30
   305c0:	mov	r6, r2
   305c4:	str	r0, [sp, #60]	; 0x3c
   305c8:	ldr	r0, [fp, #16]
   305cc:	add	r7, r7, #1
   305d0:	str	r6, [sp, #52]	; 0x34
   305d4:	cmp	r7, #4
   305d8:	ldr	r0, [r0, r5, lsl #2]
   305dc:	str	r2, [lr, r5, lsl #2]
   305e0:	sub	r8, r0, #1
   305e4:	ldr	r0, [fp, #8]
   305e8:	str	r8, [r9, r5, lsl #2]
   305ec:	ldr	r0, [r0, r5, lsl #2]
   305f0:	bcs	30600 <GetDataSlab+0x4784>
   305f4:	mov	sl, r0
   305f8:	mov	r6, r5
   305fc:	b	30688 <GetDataSlab+0x480c>
   30600:	vmov.i32	q9, #1	; 0x00000001
   30604:	vmov.i32	q10, #1	; 0x00000001
   30608:	vmov.i32	q8, #1	; 0x00000001
   3060c:	bic	lr, r7, #3
   30610:	bic	sl, r5, #3
   30614:	vmov.32	d23[1], r0
   30618:	vmov.32	d18[0], r2
   3061c:	vmov.32	d20[0], r8
   30620:	sub	r6, r5, lr
   30624:	mov	r2, ip
   30628:	vorr	d16, d18, d18
   3062c:	vmov.i32	q9, #1	; 0x00000001
   30630:	vorr	d18, d20, d20
   30634:	vld1.32	{d20-d21}, [r2], r4
   30638:	subs	sl, sl, #4
   3063c:	vrev64.32	q12, q10
   30640:	vext.8	q12, q12, q12, #8
   30644:	vext.8	q11, q11, q12, #12
   30648:	vmul.i32	q9, q9, q12
   3064c:	vmul.i32	q8, q11, q8
   30650:	vorr	q11, q12, q12
   30654:	bne	30634 <GetDataSlab+0x47b8>
   30658:	vext.8	q11, q9, q8, #8
   3065c:	vext.8	q12, q8, q8, #8
   30660:	mov	sl, r0
   30664:	cmp	r7, lr
   30668:	vmul.i32	q0, q9, q11
   3066c:	vmul.i32	q1, q8, q12
   30670:	vmul.i32	q8, q0, d0[1]
   30674:	vmul.i32	q9, q1, d2[1]
   30678:	vmov.32	r8, d16[0]
   3067c:	vmov.32	r2, d18[0]
   30680:	beq	3069c <GetDataSlab+0x4820>
   30684:	vmov.32	r0, d20[0]
   30688:	mul	r2, r0, r2
   3068c:	ldr	r0, [r1, r6, lsl #2]
   30690:	subs	r6, r6, #1
   30694:	mul	r8, r8, r0
   30698:	bne	30688 <GetDataSlab+0x480c>
   3069c:	ldr	r0, [fp, #12]
   306a0:	sub	lr, fp, #176	; 0xb0
   306a4:	sub	r9, fp, #96	; 0x60
   306a8:	ldr	r6, [sp, #52]	; 0x34
   306ac:	add	ip, ip, #4
   306b0:	str	r2, [lr, r5, lsl #2]
   306b4:	str	r8, [r9, r5, lsl #2]
   306b8:	ldr	r0, [r0, r5, lsl #2]
   306bc:	mla	r3, r0, r6, r3
   306c0:	ldr	r0, [fp, #20]
   306c4:	ldr	r6, [sp, #60]	; 0x3c
   306c8:	ldr	r0, [r0, r5, lsl #2]
   306cc:	add	r5, r5, #1
   306d0:	mul	r6, r0, r6
   306d4:	ldr	r0, [fp, #24]
   306d8:	str	r6, [sp, #60]	; 0x3c
   306dc:	mov	r6, r2
   306e0:	mov	r2, sl
   306e4:	cmp	r5, r0
   306e8:	bne	305c8 <GetDataSlab+0x474c>
   306ec:	ldr	r0, [sp, #56]	; 0x38
   306f0:	ldr	r6, [sp, #36]	; 0x24
   306f4:	add	sl, r0, r3, lsl #2
   306f8:	ldr	r0, [fp, #12]
   306fc:	cmp	r6, #1
   30700:	bne	41b04 <GetDataSlab+0x15c88>
   30704:	ldr	r1, [sp, #60]	; 0x3c
   30708:	ldr	r2, [sp, #48]	; 0x30
   3070c:	cmp	r1, #1
   30710:	sub	r1, fp, #96	; 0x60
   30714:	blt	517c4 <GetDataSlab+0x25948>
   30718:	add	r9, r0, #4
   3071c:	ldr	r0, [fp, #20]
   30720:	mov	ip, #0
   30724:	mov	lr, #0
   30728:	add	r8, r0, #4
   3072c:	sub	r0, fp, #136	; 0x88
   30730:	orr	r5, r0, #4
   30734:	orr	r0, r1, #4
   30738:	str	r0, [sp, #40]	; 0x28
   3073c:	lsl	r0, r2, #3
   30740:	str	r0, [sp, #56]	; 0x38
   30744:	bic	r0, r2, #1
   30748:	str	r0, [sp, #52]	; 0x34
   3074c:	cmp	r2, #1
   30750:	blt	307cc <GetDataSlab+0x4950>
   30754:	ldr	r0, [fp, #12]
   30758:	mov	r2, #0
   3075c:	ldr	r4, [r0]
   30760:	beq	30798 <GetDataSlab+0x491c>
   30764:	ldr	r1, [sp, #52]	; 0x34
   30768:	ldr	r0, [sp, #68]	; 0x44
   3076c:	add	r2, sl, r4, lsl #2
   30770:	vld1.32	{d0}, [r2]!
   30774:	subs	r1, r1, #2
   30778:	vcvt.f64.u32	d17, s1
   3077c:	vcvt.f64.u32	d16, s0
   30780:	vst1.64	{d16-d17}, [r0]!
   30784:	bne	30770 <GetDataSlab+0x48f4>
   30788:	ldr	r0, [sp, #48]	; 0x30
   3078c:	ldr	r2, [sp, #52]	; 0x34
   30790:	cmp	r0, r2
   30794:	beq	307cc <GetDataSlab+0x4950>
   30798:	ldr	r0, [sp, #48]	; 0x30
   3079c:	sub	r1, r0, r2
   307a0:	ldr	r0, [sp, #68]	; 0x44
   307a4:	add	r0, r0, r2, lsl #3
   307a8:	add	r2, r2, r4
   307ac:	add	r2, sl, r2, lsl #2
   307b0:	ldr	r7, [r2], #4
   307b4:	subs	r1, r1, #1
   307b8:	vmov	s0, r7
   307bc:	vcvt.f64.u32	d16, s0
   307c0:	vstr	d16, [r0]
   307c4:	add	r0, r0, #8
   307c8:	bne	307b0 <GetDataSlab+0x4934>
   307cc:	ldr	r0, [sp, #44]	; 0x2c
   307d0:	add	sl, sl, r0, lsl #2
   307d4:	add	r3, r3, r0
   307d8:	ldr	r0, [fp, #24]
   307dc:	cmp	r0, #2
   307e0:	blt	3088c <GetDataSlab+0x4a10>
   307e4:	mov	r1, #0
   307e8:	mov	r0, r1
   307ec:	ldr	r1, [r5, r1, lsl #2]
   307f0:	add	r1, r1, #1
   307f4:	str	r1, [r5, r0, lsl #2]
   307f8:	ldr	r2, [r8, r0, lsl #2]
   307fc:	sdiv	r7, r1, r2
   30800:	mls	r1, r7, r2, r1
   30804:	cmp	r1, #0
   30808:	bne	3087c <GetDataSlab+0x4a00>
   3080c:	sub	r4, fp, #176	; 0xb0
   30810:	str	ip, [r5, r0, lsl #2]
   30814:	add	r1, r4, r0, lsl #2
   30818:	ldr	r1, [r1, #4]
   3081c:	sdiv	r2, r3, r1
   30820:	mls	r2, r2, r1, r3
   30824:	cmp	r2, #0
   30828:	beq	30844 <GetDataSlab+0x49c8>
   3082c:	ldr	r7, [r4, r0, lsl #2]
   30830:	ldr	r6, [r9, r0, lsl #2]
   30834:	sub	r1, r1, r2
   30838:	mla	r1, r6, r7, r1
   3083c:	add	r3, r1, r3
   30840:	b	30860 <GetDataSlab+0x49e4>
   30844:	ldr	r1, [r9, r0, lsl #2]
   30848:	cmp	r1, #0
   3084c:	beq	30864 <GetDataSlab+0x49e8>
   30850:	sub	r2, fp, #176	; 0xb0
   30854:	ldr	r2, [r2, r0, lsl #2]
   30858:	mla	r3, r2, r1, r3
   3085c:	mul	r1, r2, r1
   30860:	add	sl, sl, r1, lsl #2
   30864:	ldr	r2, [fp, #24]
   30868:	add	r1, r0, #1
   3086c:	add	r0, r0, #2
   30870:	cmp	r0, r2
   30874:	blt	307e8 <GetDataSlab+0x496c>
   30878:	b	3088c <GetDataSlab+0x4a10>
   3087c:	ldr	r1, [sp, #40]	; 0x28
   30880:	ldr	r0, [r1, r0, lsl #2]
   30884:	add	sl, sl, r0, lsl #2
   30888:	add	r3, r0, r3
   3088c:	ldr	r0, [sp, #68]	; 0x44
   30890:	ldr	r1, [sp, #56]	; 0x38
   30894:	ldr	r2, [sp, #48]	; 0x30
   30898:	add	r0, r0, r1
   3089c:	ldr	r1, [sp, #60]	; 0x3c
   308a0:	add	lr, lr, r2
   308a4:	str	r0, [sp, #68]	; 0x44
   308a8:	mov	r0, #0
   308ac:	cmp	lr, r1
   308b0:	blt	3074c <GetDataSlab+0x48d0>
   308b4:	b	2e97c <GetDataSlab+0x2b00>
   308b8:	ldr	r0, [fp, #16]
   308bc:	ldr	r9, [fp, #8]
   308c0:	mov	sl, r6
   308c4:	mov	r2, #0
   308c8:	sub	ip, fp, #96	; 0x60
   308cc:	ldr	r0, [r0]
   308d0:	str	r0, [sp, #36]	; 0x24
   308d4:	sub	r0, r0, #1
   308d8:	str	r0, [fp, #-96]	; 0xffffffa0
   308dc:	ldr	r0, [r9]
   308e0:	str	r0, [fp, #-176]	; 0xffffff50
   308e4:	str	r0, [sp, #40]	; 0x28
   308e8:	ldr	r0, [fp, #24]
   308ec:	ldr	r1, [r6]
   308f0:	cmp	r0, #2
   308f4:	str	r1, [sp, #52]	; 0x34
   308f8:	str	r1, [sp, #60]	; 0x3c
   308fc:	blt	30a54 <GetDataSlab+0x4bd8>
   30900:	ldr	r3, [sp, #40]	; 0x28
   30904:	mov	r5, lr
   30908:	sub	r7, r9, #4
   3090c:	sub	lr, r9, #12
   30910:	mov	r4, #1
   30914:	mov	r8, #0
   30918:	mvn	r0, #15
   3091c:	mov	r2, #0
   30920:	mov	r1, r3
   30924:	str	r3, [sp, #48]	; 0x30
   30928:	ldr	r1, [sp, #52]	; 0x34
   3092c:	str	r1, [sp, #60]	; 0x3c
   30930:	ldr	r1, [fp, #16]
   30934:	add	r8, r8, #1
   30938:	cmp	r8, #4
   3093c:	ldr	r1, [r1, r4, lsl #2]
   30940:	str	r3, [r5, r4, lsl #2]
   30944:	sub	sl, r1, #1
   30948:	str	sl, [ip, r4, lsl #2]
   3094c:	ldr	r1, [r9, r4, lsl #2]
   30950:	str	r1, [sp, #44]	; 0x2c
   30954:	bcs	30960 <GetDataSlab+0x4ae4>
   30958:	mov	r5, r4
   3095c:	b	309f0 <GetDataSlab+0x4b74>
   30960:	vmov.i32	q9, #1	; 0x00000001
   30964:	vmov.i32	q10, #1	; 0x00000001
   30968:	vmov.i32	q8, #1	; 0x00000001
   3096c:	bic	ip, r8, #3
   30970:	bic	r9, r4, #3
   30974:	vmov.32	d23[1], r1
   30978:	vmov.32	d18[0], r3
   3097c:	vmov.32	d20[0], sl
   30980:	sub	r5, r4, ip
   30984:	mov	r3, lr
   30988:	vorr	d16, d18, d18
   3098c:	vmov.i32	q9, #1	; 0x00000001
   30990:	vorr	d18, d20, d20
   30994:	vld1.32	{d20-d21}, [r3], r0
   30998:	subs	r9, r9, #4
   3099c:	vrev64.32	q12, q10
   309a0:	vext.8	q12, q12, q12, #8
   309a4:	vext.8	q11, q11, q12, #12
   309a8:	vmul.i32	q9, q9, q12
   309ac:	vmul.i32	q8, q11, q8
   309b0:	vorr	q11, q12, q12
   309b4:	bne	30994 <GetDataSlab+0x4b18>
   309b8:	vext.8	q11, q9, q8, #8
   309bc:	vext.8	q12, q8, q8, #8
   309c0:	cmp	r8, ip
   309c4:	vmul.i32	q0, q9, q11
   309c8:	vmul.i32	q1, q8, q12
   309cc:	vmul.i32	q8, q0, d0[1]
   309d0:	vmul.i32	q9, q1, d2[1]
   309d4:	vmov.32	sl, d16[0]
   309d8:	vmov.32	r3, d18[0]
   309dc:	bne	309e8 <GetDataSlab+0x4b6c>
   309e0:	ldr	r9, [fp, #8]
   309e4:	b	30a04 <GetDataSlab+0x4b88>
   309e8:	ldr	r9, [fp, #8]
   309ec:	vmov.32	r1, d20[0]
   309f0:	mul	r3, r1, r3
   309f4:	ldr	r1, [r7, r5, lsl #2]
   309f8:	subs	r5, r5, #1
   309fc:	mul	sl, sl, r1
   30a00:	bne	309f0 <GetDataSlab+0x4b74>
   30a04:	ldr	r1, [fp, #12]
   30a08:	sub	r5, fp, #176	; 0xb0
   30a0c:	sub	ip, fp, #96	; 0x60
   30a10:	ldr	r6, [sp, #48]	; 0x30
   30a14:	str	r3, [sp, #48]	; 0x30
   30a18:	add	lr, lr, #4
   30a1c:	str	r3, [r5, r4, lsl #2]
   30a20:	str	sl, [ip, r4, lsl #2]
   30a24:	ldr	sl, [fp, #20]
   30a28:	ldr	r3, [sp, #44]	; 0x2c
   30a2c:	ldr	r1, [r1, r4, lsl #2]
   30a30:	mla	r2, r1, r6, r2
   30a34:	ldr	r1, [sl, r4, lsl #2]
   30a38:	ldr	r6, [sp, #60]	; 0x3c
   30a3c:	add	r4, r4, #1
   30a40:	mul	r6, r1, r6
   30a44:	ldr	r1, [fp, #24]
   30a48:	str	r6, [sp, #60]	; 0x3c
   30a4c:	cmp	r4, r1
   30a50:	bne	30930 <GetDataSlab+0x4ab4>
   30a54:	ldr	r0, [sp, #56]	; 0x38
   30a58:	ldr	r1, [sp, #36]	; 0x24
   30a5c:	add	r9, r0, r2, lsl #2
   30a60:	cmp	r1, #1
   30a64:	bne	41c98 <GetDataSlab+0x15e1c>
   30a68:	ldr	r0, [sp, #60]	; 0x3c
   30a6c:	ldr	lr, [fp, #12]
   30a70:	ldr	r1, [sp, #52]	; 0x34
   30a74:	cmp	r0, #1
   30a78:	blt	517d8 <GetDataSlab+0x2595c>
   30a7c:	sub	r0, fp, #136	; 0x88
   30a80:	add	r7, sl, #4
   30a84:	mov	sl, #0
   30a88:	mov	ip, #0
   30a8c:	orr	r6, r0, #4
   30a90:	sub	r0, fp, #96	; 0x60
   30a94:	orr	r0, r0, #4
   30a98:	str	r0, [sp, #44]	; 0x2c
   30a9c:	lsl	r0, r1, #3
   30aa0:	str	r0, [sp, #56]	; 0x38
   30aa4:	bic	r0, r1, #1
   30aa8:	str	r0, [sp, #48]	; 0x30
   30aac:	ldr	r0, [lr], #4
   30ab0:	str	r0, [sp, #64]	; 0x40
   30ab4:	cmp	r1, #1
   30ab8:	mov	r4, lr
   30abc:	blt	30b38 <GetDataSlab+0x4cbc>
   30ac0:	mov	r3, #0
   30ac4:	beq	30b00 <GetDataSlab+0x4c84>
   30ac8:	ldr	r0, [sp, #64]	; 0x40
   30acc:	ldr	r3, [sp, #48]	; 0x30
   30ad0:	ldr	r1, [sp, #68]	; 0x44
   30ad4:	add	r0, r9, r0, lsl #2
   30ad8:	vld1.32	{d0}, [r0]!
   30adc:	subs	r3, r3, #2
   30ae0:	vcvt.f64.f32	d17, s1
   30ae4:	vcvt.f64.f32	d16, s0
   30ae8:	vst1.64	{d16-d17}, [r1]!
   30aec:	bne	30ad8 <GetDataSlab+0x4c5c>
   30af0:	ldr	r0, [sp, #52]	; 0x34
   30af4:	ldr	r3, [sp, #48]	; 0x30
   30af8:	cmp	r0, r3
   30afc:	beq	30b38 <GetDataSlab+0x4cbc>
   30b00:	ldr	r5, [sp, #64]	; 0x40
   30b04:	ldr	r0, [sp, #52]	; 0x34
   30b08:	ldr	r1, [sp, #68]	; 0x44
   30b0c:	add	r5, r9, r5, lsl #2
   30b10:	sub	r0, r0, r3
   30b14:	add	r1, r1, r3, lsl #3
   30b18:	add	r3, r5, r3, lsl #2
   30b1c:	vldr	s0, [r3]
   30b20:	subs	r0, r0, #1
   30b24:	add	r3, r3, #4
   30b28:	vcvt.f64.f32	d16, s0
   30b2c:	vstr	d16, [r1]
   30b30:	add	r1, r1, #8
   30b34:	bne	30b1c <GetDataSlab+0x4ca0>
   30b38:	ldr	r0, [sp, #40]	; 0x28
   30b3c:	add	r9, r9, r0, lsl #2
   30b40:	add	r2, r2, r0
   30b44:	ldr	r0, [fp, #24]
   30b48:	cmp	r0, #2
   30b4c:	blt	30bfc <GetDataSlab+0x4d80>
   30b50:	mov	r1, #0
   30b54:	mov	r0, r1
   30b58:	ldr	r1, [r6, r1, lsl #2]
   30b5c:	add	r1, r1, #1
   30b60:	str	r1, [r6, r0, lsl #2]
   30b64:	ldr	r3, [r7, r0, lsl #2]
   30b68:	sdiv	r5, r1, r3
   30b6c:	mls	r1, r5, r3, r1
   30b70:	cmp	r1, #0
   30b74:	bne	30bec <GetDataSlab+0x4d70>
   30b78:	sub	r5, fp, #176	; 0xb0
   30b7c:	str	sl, [r6, r0, lsl #2]
   30b80:	add	r1, r5, r0, lsl #2
   30b84:	ldr	r1, [r1, #4]
   30b88:	sdiv	r3, r2, r1
   30b8c:	mls	r3, r3, r1, r2
   30b90:	cmp	r3, #0
   30b94:	beq	30bb4 <GetDataSlab+0x4d38>
   30b98:	ldr	r5, [r5, r0, lsl #2]
   30b9c:	ldr	r8, [lr, r0, lsl #2]
   30ba0:	sub	r1, r1, r3
   30ba4:	mov	r4, lr
   30ba8:	mla	r1, r8, r5, r1
   30bac:	add	r2, r1, r2
   30bb0:	b	30bd0 <GetDataSlab+0x4d54>
   30bb4:	ldr	r1, [r4, r0, lsl #2]
   30bb8:	cmp	r1, #0
   30bbc:	beq	30bd4 <GetDataSlab+0x4d58>
   30bc0:	sub	r3, fp, #176	; 0xb0
   30bc4:	ldr	r3, [r3, r0, lsl #2]
   30bc8:	mla	r2, r3, r1, r2
   30bcc:	mul	r1, r3, r1
   30bd0:	add	r9, r9, r1, lsl #2
   30bd4:	ldr	r3, [fp, #24]
   30bd8:	add	r1, r0, #1
   30bdc:	add	r0, r0, #2
   30be0:	cmp	r0, r3
   30be4:	blt	30b54 <GetDataSlab+0x4cd8>
   30be8:	b	30bfc <GetDataSlab+0x4d80>
   30bec:	ldr	r1, [sp, #44]	; 0x2c
   30bf0:	ldr	r0, [r1, r0, lsl #2]
   30bf4:	add	r9, r9, r0, lsl #2
   30bf8:	add	r2, r0, r2
   30bfc:	ldr	r0, [sp, #68]	; 0x44
   30c00:	ldr	r1, [sp, #56]	; 0x38
   30c04:	ldr	r3, [sp, #60]	; 0x3c
   30c08:	add	r0, r0, r1
   30c0c:	ldr	r1, [sp, #52]	; 0x34
   30c10:	str	r0, [sp, #68]	; 0x44
   30c14:	mov	r0, #0
   30c18:	add	ip, ip, r1
   30c1c:	cmp	ip, r3
   30c20:	blt	30ab4 <GetDataSlab+0x4c38>
   30c24:	b	2e97c <GetDataSlab+0x2b00>
   30c28:	ldr	r0, [fp, #16]
   30c2c:	mov	sl, r6
   30c30:	mov	r2, #0
   30c34:	ldr	r0, [r0]
   30c38:	str	r0, [sp, #36]	; 0x24
   30c3c:	sub	r0, r0, #1
   30c40:	str	r0, [fp, #-96]	; 0xffffffa0
   30c44:	ldr	r0, [fp, #8]
   30c48:	ldr	r0, [r0]
   30c4c:	str	r0, [fp, #-176]	; 0xffffff50
   30c50:	str	r0, [sp, #44]	; 0x2c
   30c54:	ldr	r0, [fp, #24]
   30c58:	ldr	r1, [r6]
   30c5c:	sub	r6, fp, #96	; 0x60
   30c60:	cmp	r0, #2
   30c64:	str	r1, [sp, #52]	; 0x34
   30c68:	str	r1, [sp, #60]	; 0x3c
   30c6c:	blt	30dc8 <GetDataSlab+0x4f4c>
   30c70:	ldr	r0, [fp, #8]
   30c74:	ldr	r3, [sp, #44]	; 0x2c
   30c78:	mov	r5, lr
   30c7c:	mov	r4, #1
   30c80:	mov	lr, #0
   30c84:	mvn	ip, #15
   30c88:	mov	r2, #0
   30c8c:	sub	r7, r0, #4
   30c90:	sub	r9, r0, #12
   30c94:	ldr	r0, [sp, #52]	; 0x34
   30c98:	mov	r8, r3
   30c9c:	str	r0, [sp, #60]	; 0x3c
   30ca0:	ldr	r1, [fp, #16]
   30ca4:	add	lr, lr, #1
   30ca8:	cmp	lr, #4
   30cac:	str	lr, [sp, #48]	; 0x30
   30cb0:	ldr	r1, [r1, r4, lsl #2]
   30cb4:	str	r3, [r5, r4, lsl #2]
   30cb8:	sub	r1, r1, #1
   30cbc:	str	r1, [r6, r4, lsl #2]
   30cc0:	ldr	r6, [fp, #8]
   30cc4:	ldr	r0, [r6, r4, lsl #2]
   30cc8:	bcs	30cdc <GetDataSlab+0x4e60>
   30ccc:	mov	lr, r0
   30cd0:	mov	r6, r0
   30cd4:	mov	r5, r4
   30cd8:	b	30d68 <GetDataSlab+0x4eec>
   30cdc:	vmov.i32	q9, #1	; 0x00000001
   30ce0:	vmov.i32	q10, #1	; 0x00000001
   30ce4:	vmov.i32	q8, #1	; 0x00000001
   30ce8:	bic	r6, lr, #3
   30cec:	bic	sl, r4, #3
   30cf0:	vmov.32	d23[1], r0
   30cf4:	vmov.32	d18[0], r3
   30cf8:	vmov.32	d20[0], r1
   30cfc:	sub	r5, r4, r6
   30d00:	mov	r1, r9
   30d04:	vorr	d16, d18, d18
   30d08:	vmov.i32	q9, #1	; 0x00000001
   30d0c:	vorr	d18, d20, d20
   30d10:	vld1.32	{d20-d21}, [r1], ip
   30d14:	subs	sl, sl, #4
   30d18:	vrev64.32	q12, q10
   30d1c:	vext.8	q12, q12, q12, #8
   30d20:	vext.8	q11, q11, q12, #12
   30d24:	vmul.i32	q9, q9, q12
   30d28:	vmul.i32	q8, q11, q8
   30d2c:	vorr	q11, q12, q12
   30d30:	bne	30d10 <GetDataSlab+0x4e94>
   30d34:	vext.8	q11, q9, q8, #8
   30d38:	vext.8	q12, q8, q8, #8
   30d3c:	ldr	sl, [fp, #20]
   30d40:	cmp	lr, r6
   30d44:	mov	lr, r0
   30d48:	vmul.i32	q0, q9, q11
   30d4c:	vmul.i32	q1, q8, q12
   30d50:	vmul.i32	q8, q0, d0[1]
   30d54:	vmul.i32	q9, q1, d2[1]
   30d58:	vmov.32	r1, d16[0]
   30d5c:	vmov.32	r3, d18[0]
   30d60:	beq	30d7c <GetDataSlab+0x4f00>
   30d64:	vmov.32	r6, d20[0]
   30d68:	mul	r3, r6, r3
   30d6c:	ldr	r6, [r7, r5, lsl #2]
   30d70:	subs	r5, r5, #1
   30d74:	mul	r1, r1, r6
   30d78:	bne	30d68 <GetDataSlab+0x4eec>
   30d7c:	sub	r6, fp, #96	; 0x60
   30d80:	sub	r5, fp, #176	; 0xb0
   30d84:	ldr	r0, [sp, #60]	; 0x3c
   30d88:	add	r9, r9, #4
   30d8c:	str	r1, [r6, r4, lsl #2]
   30d90:	ldr	r1, [fp, #12]
   30d94:	str	r3, [r5, r4, lsl #2]
   30d98:	ldr	r1, [r1, r4, lsl #2]
   30d9c:	mla	r2, r1, r8, r2
   30da0:	ldr	r1, [sl, r4, lsl #2]
   30da4:	mov	r8, r3
   30da8:	mov	r3, lr
   30dac:	ldr	lr, [sp, #48]	; 0x30
   30db0:	add	r4, r4, #1
   30db4:	mul	r0, r1, r0
   30db8:	ldr	r1, [fp, #24]
   30dbc:	str	r0, [sp, #60]	; 0x3c
   30dc0:	cmp	r4, r1
   30dc4:	bne	30ca0 <GetDataSlab+0x4e24>
   30dc8:	ldr	r0, [sp, #56]	; 0x38
   30dcc:	ldr	r1, [sp, #36]	; 0x24
   30dd0:	add	r9, r0, r2, lsl #3
   30dd4:	cmp	r1, #1
   30dd8:	bne	41e2c <GetDataSlab+0x15fb0>
   30ddc:	ldr	r0, [sp, #60]	; 0x3c
   30de0:	ldr	ip, [sp, #68]	; 0x44
   30de4:	ldr	r8, [fp, #12]
   30de8:	ldr	r1, [sp, #52]	; 0x34
   30dec:	cmp	r0, #1
   30df0:	blt	517ec <GetDataSlab+0x25970>
   30df4:	ldr	r0, [r8], #4
   30df8:	add	r6, sl, #4
   30dfc:	mov	r4, #0
   30e00:	mov	lr, #0
   30e04:	str	r0, [sp, #56]	; 0x38
   30e08:	add	r0, r1, r0
   30e0c:	str	r0, [sp, #48]	; 0x30
   30e10:	sub	r0, fp, #136	; 0x88
   30e14:	orr	r7, r0, #4
   30e18:	sub	r0, fp, #96	; 0x60
   30e1c:	orr	r0, r0, #4
   30e20:	str	r0, [sp, #36]	; 0x24
   30e24:	bic	r0, r1, #1
   30e28:	str	r0, [sp, #40]	; 0x28
   30e2c:	lsl	r0, r1, #3
   30e30:	str	r0, [sp, #64]	; 0x40
   30e34:	cmp	r1, #1
   30e38:	blt	30ed4 <GetDataSlab+0x5058>
   30e3c:	ldr	r0, [sp, #56]	; 0x38
   30e40:	mov	r1, #0
   30e44:	add	r5, r9, r0, lsl #3
   30e48:	beq	30eac <GetDataSlab+0x5030>
   30e4c:	ldr	r0, [sp, #68]	; 0x44
   30e50:	ldr	r3, [sp, #64]	; 0x40
   30e54:	mla	r0, r3, r4, r0
   30e58:	ldr	r3, [sp, #48]	; 0x30
   30e5c:	add	r3, r9, r3, lsl #3
   30e60:	cmp	r0, r3
   30e64:	bcs	30e80 <GetDataSlab+0x5004>
   30e68:	ldr	r0, [sp, #64]	; 0x40
   30e6c:	ldr	r3, [sp, #68]	; 0x44
   30e70:	mla	r0, r0, r4, r0
   30e74:	add	r0, r3, r0
   30e78:	cmp	r0, r5
   30e7c:	bhi	30eac <GetDataSlab+0x5030>
   30e80:	ldr	r1, [sp, #40]	; 0x28
   30e84:	mov	r3, ip
   30e88:	mov	r0, r5
   30e8c:	vld1.64	{d16-d17}, [r0]!
   30e90:	subs	r1, r1, #2
   30e94:	vst1.64	{d16-d17}, [r3]!
   30e98:	bne	30e8c <GetDataSlab+0x5010>
   30e9c:	ldr	r0, [sp, #52]	; 0x34
   30ea0:	ldr	r1, [sp, #40]	; 0x28
   30ea4:	cmp	r0, r1
   30ea8:	beq	30ed4 <GetDataSlab+0x5058>
   30eac:	ldr	r0, [sp, #52]	; 0x34
   30eb0:	sub	r3, r0, r1
   30eb4:	lsl	r1, r1, #3
   30eb8:	add	r0, r5, r1
   30ebc:	subs	r3, r3, #1
   30ec0:	vldr	d16, [r0]
   30ec4:	add	r0, ip, r1
   30ec8:	add	r1, r1, #8
   30ecc:	vstr	d16, [r0]
   30ed0:	bne	30eb8 <GetDataSlab+0x503c>
   30ed4:	ldr	r0, [sp, #44]	; 0x2c
   30ed8:	add	r9, r9, r0, lsl #3
   30edc:	add	r2, r2, r0
   30ee0:	ldr	r0, [fp, #24]
   30ee4:	cmp	r0, #2
   30ee8:	blt	30f98 <GetDataSlab+0x511c>
   30eec:	mov	r1, #0
   30ef0:	mov	r0, r1
   30ef4:	ldr	r1, [r7, r1, lsl #2]
   30ef8:	add	r1, r1, #1
   30efc:	str	r1, [r7, r0, lsl #2]
   30f00:	ldr	r3, [r6, r0, lsl #2]
   30f04:	sdiv	r5, r1, r3
   30f08:	mls	r1, r5, r3, r1
   30f0c:	cmp	r1, #0
   30f10:	bne	30f88 <GetDataSlab+0x510c>
   30f14:	mov	r1, #0
   30f18:	sub	r5, fp, #176	; 0xb0
   30f1c:	str	r1, [r7, r0, lsl #2]
   30f20:	add	r1, r5, r0, lsl #2
   30f24:	ldr	r1, [r1, #4]
   30f28:	sdiv	r3, r2, r1
   30f2c:	mls	r3, r3, r1, r2
   30f30:	cmp	r3, #0
   30f34:	beq	30f50 <GetDataSlab+0x50d4>
   30f38:	ldr	r5, [r5, r0, lsl #2]
   30f3c:	ldr	sl, [r8, r0, lsl #2]
   30f40:	sub	r1, r1, r3
   30f44:	mla	r1, sl, r5, r1
   30f48:	add	r2, r1, r2
   30f4c:	b	30f6c <GetDataSlab+0x50f0>
   30f50:	ldr	r1, [r8, r0, lsl #2]
   30f54:	cmp	r1, #0
   30f58:	beq	30f70 <GetDataSlab+0x50f4>
   30f5c:	sub	r3, fp, #176	; 0xb0
   30f60:	ldr	r3, [r3, r0, lsl #2]
   30f64:	mla	r2, r3, r1, r2
   30f68:	mul	r1, r3, r1
   30f6c:	add	r9, r9, r1, lsl #3
   30f70:	ldr	r3, [fp, #24]
   30f74:	add	r1, r0, #1
   30f78:	add	r0, r0, #2
   30f7c:	cmp	r0, r3
   30f80:	blt	30ef0 <GetDataSlab+0x5074>
   30f84:	b	30f98 <GetDataSlab+0x511c>
   30f88:	ldr	r1, [sp, #36]	; 0x24
   30f8c:	ldr	r0, [r1, r0, lsl #2]
   30f90:	add	r9, r9, r0, lsl #3
   30f94:	add	r2, r0, r2
   30f98:	ldr	r1, [sp, #52]	; 0x34
   30f9c:	ldr	r0, [sp, #64]	; 0x40
   30fa0:	ldr	r3, [sp, #60]	; 0x3c
   30fa4:	add	r4, r4, #1
   30fa8:	add	lr, lr, r1
   30fac:	add	ip, ip, r0
   30fb0:	mov	r0, #0
   30fb4:	cmp	lr, r3
   30fb8:	blt	30e34 <GetDataSlab+0x4fb8>
   30fbc:	b	2e97c <GetDataSlab+0x2b00>
   30fc0:	ldr	r0, [fp, #16]
   30fc4:	mov	r4, #0
   30fc8:	sub	r8, fp, #96	; 0x60
   30fcc:	str	r9, [sp, #40]	; 0x28
   30fd0:	ldr	r0, [r0]
   30fd4:	str	r0, [sp, #48]	; 0x30
   30fd8:	sub	r0, r0, #1
   30fdc:	str	r0, [fp, #-96]	; 0xffffffa0
   30fe0:	ldr	r0, [fp, #8]
   30fe4:	ldr	r0, [r0]
   30fe8:	str	r0, [fp, #-176]	; 0xffffff50
   30fec:	str	r0, [sp, #32]
   30ff0:	ldr	r0, [fp, #24]
   30ff4:	ldr	r1, [r6]
   30ff8:	cmp	r0, #2
   30ffc:	str	r1, [sp, #44]	; 0x2c
   31000:	str	r1, [sp, #52]	; 0x34
   31004:	blt	31160 <GetDataSlab+0x52e4>
   31008:	ldr	r0, [fp, #8]
   3100c:	ldr	r2, [sp, #44]	; 0x2c
   31010:	mov	r7, #1
   31014:	mov	ip, #0
   31018:	mvn	r6, #15
   3101c:	mov	r4, #0
   31020:	sub	r1, r0, #4
   31024:	sub	sl, r0, #12
   31028:	ldr	r0, [sp, #32]
   3102c:	str	r2, [sp, #52]	; 0x34
   31030:	mov	r9, r0
   31034:	ldr	r2, [fp, #16]
   31038:	add	ip, ip, #1
   3103c:	cmp	ip, #4
   31040:	ldr	r2, [r2, r7, lsl #2]
   31044:	str	r0, [lr, r7, lsl #2]
   31048:	sub	r5, r2, #1
   3104c:	ldr	r2, [fp, #8]
   31050:	str	r5, [r8, r7, lsl #2]
   31054:	ldr	lr, [r2, r7, lsl #2]
   31058:	bcs	31068 <GetDataSlab+0x51ec>
   3105c:	mov	r2, lr
   31060:	mov	r3, r7
   31064:	b	310f8 <GetDataSlab+0x527c>
   31068:	vmov.i32	q9, #1	; 0x00000001
   3106c:	vmov.i32	q10, #1	; 0x00000001
   31070:	mov	r2, ip
   31074:	vmov.i32	q8, #1	; 0x00000001
   31078:	bic	ip, r7, #3
   3107c:	vmov.32	d23[1], lr
   31080:	vmov.32	d18[0], r0
   31084:	mov	r8, r2
   31088:	bic	r2, r2, #3
   3108c:	vmov.32	d20[0], r5
   31090:	mov	r0, sl
   31094:	vorr	d16, d18, d18
   31098:	vmov.i32	q9, #1	; 0x00000001
   3109c:	sub	r3, r7, r2
   310a0:	vorr	d18, d20, d20
   310a4:	vld1.32	{d20-d21}, [r0], r6
   310a8:	subs	ip, ip, #4
   310ac:	vrev64.32	q12, q10
   310b0:	vext.8	q12, q12, q12, #8
   310b4:	vext.8	q11, q11, q12, #12
   310b8:	vmul.i32	q9, q9, q12
   310bc:	vmul.i32	q8, q11, q8
   310c0:	vorr	q11, q12, q12
   310c4:	bne	310a4 <GetDataSlab+0x5228>
   310c8:	vext.8	q11, q9, q8, #8
   310cc:	vext.8	q12, q8, q8, #8
   310d0:	mov	ip, r8
   310d4:	cmp	r8, r2
   310d8:	vmul.i32	q0, q9, q11
   310dc:	vmul.i32	q1, q8, q12
   310e0:	vmul.i32	q8, q0, d0[1]
   310e4:	vmul.i32	q9, q1, d2[1]
   310e8:	vmov.32	r5, d16[0]
   310ec:	vmov.32	r0, d18[0]
   310f0:	beq	3110c <GetDataSlab+0x5290>
   310f4:	vmov.32	r2, d20[0]
   310f8:	mul	r0, r2, r0
   310fc:	ldr	r2, [r1, r3, lsl #2]
   31100:	subs	r3, r3, #1
   31104:	mul	r5, r5, r2
   31108:	bne	310f8 <GetDataSlab+0x527c>
   3110c:	sub	r2, fp, #176	; 0xb0
   31110:	sub	r8, fp, #96	; 0x60
   31114:	add	sl, sl, #4
   31118:	mov	r3, r2
   3111c:	str	r0, [r2, r7, lsl #2]
   31120:	ldr	r2, [fp, #12]
   31124:	str	r5, [r8, r7, lsl #2]
   31128:	ldr	r5, [sp, #52]	; 0x34
   3112c:	ldr	r2, [r2, r7, lsl #2]
   31130:	mla	r4, r2, r9, r4
   31134:	ldr	r2, [fp, #20]
   31138:	mov	r9, r0
   3113c:	mov	r0, lr
   31140:	mov	lr, r3
   31144:	ldr	r2, [r2, r7, lsl #2]
   31148:	add	r7, r7, #1
   3114c:	mul	r5, r2, r5
   31150:	ldr	r2, [fp, #24]
   31154:	str	r5, [sp, #52]	; 0x34
   31158:	cmp	r7, r2
   3115c:	bne	31034 <GetDataSlab+0x51b8>
   31160:	ldr	r0, [sp, #56]	; 0x38
   31164:	ldr	r3, [sp, #48]	; 0x30
   31168:	add	r6, r0, r4, lsl #3
   3116c:	cmp	r3, #1
   31170:	bne	41fc0 <GetDataSlab+0x16144>
   31174:	ldr	r0, [sp, #52]	; 0x34
   31178:	ldr	r1, [fp, #20]
   3117c:	ldr	r9, [sp, #40]	; 0x28
   31180:	ldr	ip, [sp, #44]	; 0x2c
   31184:	cmp	r0, #1
   31188:	ldr	r0, [fp, #12]
   3118c:	blt	42184 <GetDataSlab+0x16308>
   31190:	add	lr, r1, #4
   31194:	sub	r1, fp, #136	; 0x88
   31198:	ldr	r8, [sp, #68]	; 0x44
   3119c:	orr	r5, r1, #4
   311a0:	sub	r1, fp, #96	; 0x60
   311a4:	str	lr, [sp, #16]
   311a8:	orr	r1, r1, #4
   311ac:	str	r5, [sp, #12]
   311b0:	str	r1, [sp, #8]
   311b4:	lsl	r1, ip, #3
   311b8:	str	r1, [sp, #28]
   311bc:	bic	r1, ip, #1
   311c0:	str	r1, [sp, #24]
   311c4:	ldr	r1, [r0], #4
   311c8:	str	r1, [sp, #20]
   311cc:	mov	r1, #0
   311d0:	str	r0, [sp, #60]	; 0x3c
   311d4:	cmp	ip, #1
   311d8:	str	r1, [sp, #36]	; 0x24
   311dc:	str	r8, [sp, #48]	; 0x30
   311e0:	blt	31288 <GetDataSlab+0x540c>
   311e4:	ldr	r0, [sp, #20]
   311e8:	add	sl, r6, r0, lsl #3
   311ec:	mov	r0, #0
   311f0:	beq	31254 <GetDataSlab+0x53d8>
   311f4:	ldr	r9, [sp, #24]
   311f8:	mov	r7, r8
   311fc:	mov	r8, sl
   31200:	vld1.64	{d8-d9}, [r8]!
   31204:	vmov.32	r0, d9[0]
   31208:	vmov.32	r1, d9[1]
   3120c:	bl	5f094 <__aeabi_l2d>
   31210:	vmov.32	r2, d8[0]
   31214:	vmov.32	r3, d8[1]
   31218:	vmov	d9, r0, r1
   3121c:	mov	r0, r2
   31220:	mov	r1, r3
   31224:	bl	5f094 <__aeabi_l2d>
   31228:	vmov	d8, r0, r1
   3122c:	subs	r9, r9, #2
   31230:	vst1.64	{d8-d9}, [r7]!
   31234:	bne	31200 <GetDataSlab+0x5384>
   31238:	ldr	r0, [sp, #44]	; 0x2c
   3123c:	ldr	r1, [sp, #24]
   31240:	ldr	r9, [sp, #40]	; 0x28
   31244:	ldr	r8, [sp, #48]	; 0x30
   31248:	cmp	r0, r1
   3124c:	mov	r0, r1
   31250:	beq	31288 <GetDataSlab+0x540c>
   31254:	ldr	r1, [sp, #44]	; 0x2c
   31258:	lsl	r5, r0, #3
   3125c:	sub	r7, r1, r0
   31260:	mov	r1, sl
   31264:	ldr	r0, [r1, r5]!
   31268:	ldr	r1, [r1, #4]
   3126c:	bl	5f094 <__aeabi_l2d>
   31270:	mov	r2, r8
   31274:	subs	r7, r7, #1
   31278:	str	r0, [r2, r5]!
   3127c:	add	r5, r5, #8
   31280:	str	r1, [r2, #4]
   31284:	bne	31260 <GetDataSlab+0x53e4>
   31288:	ldr	r0, [sp, #32]
   3128c:	add	r6, r6, r0, lsl #3
   31290:	add	r4, r4, r0
   31294:	ldr	r0, [fp, #24]
   31298:	cmp	r0, #2
   3129c:	blt	31350 <GetDataSlab+0x54d4>
   312a0:	sub	r5, fp, #176	; 0xb0
   312a4:	ldr	ip, [sp, #44]	; 0x2c
   312a8:	ldr	lr, [sp, #16]
   312ac:	mov	r1, #0
   312b0:	mov	sl, r5
   312b4:	ldr	r5, [sp, #12]
   312b8:	mov	r0, r1
   312bc:	ldr	r1, [r5, r1, lsl #2]
   312c0:	add	r1, r1, #1
   312c4:	str	r1, [r5, r0, lsl #2]
   312c8:	ldr	r2, [lr, r0, lsl #2]
   312cc:	sdiv	r3, r1, r2
   312d0:	mls	r1, r3, r2, r1
   312d4:	cmp	r1, #0
   312d8:	bne	31358 <GetDataSlab+0x54dc>
   312dc:	mov	r1, #0
   312e0:	str	r1, [r5, r0, lsl #2]
   312e4:	add	r1, sl, r0, lsl #2
   312e8:	ldr	r1, [r1, #4]
   312ec:	sdiv	r2, r4, r1
   312f0:	mls	r2, r2, r1, r4
   312f4:	cmp	r2, #0
   312f8:	beq	31318 <GetDataSlab+0x549c>
   312fc:	ldr	r7, [sp, #60]	; 0x3c
   31300:	ldr	r3, [sl, r0, lsl #2]
   31304:	sub	r1, r1, r2
   31308:	ldr	r7, [r7, r0, lsl #2]
   3130c:	mla	r1, r7, r3, r1
   31310:	add	r4, r1, r4
   31314:	b	31334 <GetDataSlab+0x54b8>
   31318:	ldr	r1, [sp, #60]	; 0x3c
   3131c:	ldr	r1, [r1, r0, lsl #2]
   31320:	cmp	r1, #0
   31324:	beq	31338 <GetDataSlab+0x54bc>
   31328:	ldr	r2, [sl, r0, lsl #2]
   3132c:	mla	r4, r2, r1, r4
   31330:	mul	r1, r2, r1
   31334:	add	r6, r6, r1, lsl #3
   31338:	ldr	r2, [fp, #24]
   3133c:	add	r1, r0, #1
   31340:	add	r0, r0, #2
   31344:	cmp	r0, r2
   31348:	blt	312b8 <GetDataSlab+0x543c>
   3134c:	b	31368 <GetDataSlab+0x54ec>
   31350:	ldr	ip, [sp, #44]	; 0x2c
   31354:	b	31368 <GetDataSlab+0x54ec>
   31358:	ldr	r1, [sp, #8]
   3135c:	ldr	r0, [r1, r0, lsl #2]
   31360:	add	r6, r6, r0, lsl #3
   31364:	add	r4, r0, r4
   31368:	ldr	r0, [sp, #28]
   3136c:	ldr	r8, [sp, #48]	; 0x30
   31370:	ldr	r1, [sp, #36]	; 0x24
   31374:	add	r8, r8, r0
   31378:	ldr	r0, [sp, #52]	; 0x34
   3137c:	add	r1, r1, ip
   31380:	cmp	r1, r0
   31384:	blt	311d4 <GetDataSlab+0x5358>
   31388:	b	42184 <GetDataSlab+0x16308>
   3138c:	ldr	r0, [fp, #16]
   31390:	mov	r3, #0
   31394:	sub	r9, fp, #96	; 0x60
   31398:	ldr	ip, [r0]
   3139c:	sub	r0, ip, #1
   313a0:	str	r0, [fp, #-96]	; 0xffffffa0
   313a4:	ldr	r0, [fp, #8]
   313a8:	ldr	r0, [r0]
   313ac:	str	r0, [fp, #-176]	; 0xffffff50
   313b0:	str	r0, [sp, #36]	; 0x24
   313b4:	ldr	r0, [fp, #24]
   313b8:	ldr	r1, [r6]
   313bc:	cmp	r0, #2
   313c0:	str	r1, [sp, #52]	; 0x34
   313c4:	str	r1, [sp, #60]	; 0x3c
   313c8:	blt	31530 <GetDataSlab+0x56b4>
   313cc:	ldr	r0, [fp, #8]
   313d0:	ldr	r2, [sp, #36]	; 0x24
   313d4:	ldr	r5, [sp, #52]	; 0x34
   313d8:	mov	r6, #1
   313dc:	mvn	r4, #15
   313e0:	mov	r3, #0
   313e4:	mov	r1, r0
   313e8:	sub	r0, r0, #4
   313ec:	str	r5, [sp, #60]	; 0x3c
   313f0:	sub	sl, r1, #12
   313f4:	mov	r1, #0
   313f8:	str	r1, [sp, #48]	; 0x30
   313fc:	mov	r1, r2
   31400:	ldr	r5, [fp, #16]
   31404:	str	r1, [sp, #44]	; 0x2c
   31408:	ldr	r1, [sp, #48]	; 0x30
   3140c:	ldr	r7, [r5, r6, lsl #2]
   31410:	ldr	r5, [fp, #8]
   31414:	str	r2, [lr, r6, lsl #2]
   31418:	add	r1, r1, #1
   3141c:	cmp	r1, #4
   31420:	str	r1, [sp, #48]	; 0x30
   31424:	sub	r8, r7, #1
   31428:	str	r8, [r9, r6, lsl #2]
   3142c:	ldr	r5, [r5, r6, lsl #2]
   31430:	str	r5, [sp, #40]	; 0x28
   31434:	bcs	31440 <GetDataSlab+0x55c4>
   31438:	mov	r7, r6
   3143c:	b	314d0 <GetDataSlab+0x5654>
   31440:	vmov.i32	q9, #1	; 0x00000001
   31444:	vmov.i32	q10, #1	; 0x00000001
   31448:	vmov.i32	q8, #1	; 0x00000001
   3144c:	bic	r9, r1, #3
   31450:	bic	lr, r6, #3
   31454:	vmov.32	d23[1], r5
   31458:	vmov.32	d18[0], r2
   3145c:	vmov.32	d20[0], r8
   31460:	sub	r7, r6, r9
   31464:	mov	r2, sl
   31468:	vorr	d16, d18, d18
   3146c:	vmov.i32	q9, #1	; 0x00000001
   31470:	vorr	d18, d20, d20
   31474:	vld1.32	{d20-d21}, [r2], r4
   31478:	subs	lr, lr, #4
   3147c:	vrev64.32	q12, q10
   31480:	vext.8	q12, q12, q12, #8
   31484:	vext.8	q11, q11, q12, #12
   31488:	vmul.i32	q9, q9, q12
   3148c:	vmul.i32	q8, q11, q8
   31490:	vorr	q11, q12, q12
   31494:	bne	31474 <GetDataSlab+0x55f8>
   31498:	vext.8	q11, q9, q8, #8
   3149c:	vext.8	q12, q8, q8, #8
   314a0:	cmp	r1, r9
   314a4:	vmul.i32	q0, q9, q11
   314a8:	vmul.i32	q1, q8, q12
   314ac:	vmul.i32	q8, q0, d0[1]
   314b0:	vmul.i32	q9, q1, d2[1]
   314b4:	vmov.32	r8, d16[0]
   314b8:	vmov.32	r2, d18[0]
   314bc:	bne	314c8 <GetDataSlab+0x564c>
   314c0:	sub	lr, fp, #176	; 0xb0
   314c4:	b	314e4 <GetDataSlab+0x5668>
   314c8:	vmov.32	r5, d20[0]
   314cc:	sub	lr, fp, #176	; 0xb0
   314d0:	mul	r2, r5, r2
   314d4:	ldr	r5, [r0, r7, lsl #2]
   314d8:	subs	r7, r7, #1
   314dc:	mul	r8, r8, r5
   314e0:	bne	314d0 <GetDataSlab+0x5654>
   314e4:	ldr	r7, [fp, #12]
   314e8:	sub	r9, fp, #96	; 0x60
   314ec:	str	r2, [lr, r6, lsl #2]
   314f0:	ldr	r1, [sp, #44]	; 0x2c
   314f4:	ldr	r5, [fp, #20]
   314f8:	add	sl, sl, #4
   314fc:	str	r8, [r9, r6, lsl #2]
   31500:	ldr	r7, [r7, r6, lsl #2]
   31504:	mla	r3, r7, r1, r3
   31508:	ldr	r7, [r5, r6, lsl #2]
   3150c:	ldr	r5, [sp, #60]	; 0x3c
   31510:	mov	r1, r2
   31514:	ldr	r2, [sp, #40]	; 0x28
   31518:	add	r6, r6, #1
   3151c:	mul	r5, r7, r5
   31520:	ldr	r7, [fp, #24]
   31524:	str	r5, [sp, #60]	; 0x3c
   31528:	cmp	r6, r7
   3152c:	bne	31400 <GetDataSlab+0x5584>
   31530:	ldr	r0, [sp, #56]	; 0x38
   31534:	cmp	ip, #1
   31538:	add	r4, r0, r3
   3153c:	ldr	r0, [fp, #12]
   31540:	bne	42544 <GetDataSlab+0x166c8>
   31544:	ldr	r1, [sp, #60]	; 0x3c
   31548:	sub	r2, fp, #96	; 0x60
   3154c:	cmp	r1, #1
   31550:	ldr	r1, [fp, #20]
   31554:	blt	51800 <GetDataSlab+0x25984>
   31558:	add	lr, r0, #4
   3155c:	sub	r0, fp, #136	; 0x88
   31560:	add	r8, r1, #4
   31564:	ldr	ip, [sp, #68]	; 0x44
   31568:	add	r7, sp, #212	; 0xd4
   3156c:	mov	sl, #0
   31570:	orr	r1, r0, #4
   31574:	orr	r0, r2, #4
   31578:	ldr	r2, [sp, #52]	; 0x34
   3157c:	str	r0, [sp, #28]
   31580:	str	ip, [sp, #56]	; 0x38
   31584:	bic	r0, r2, #3
   31588:	str	r0, [sp, #32]
   3158c:	lsl	r0, r2, #2
   31590:	str	r0, [sp, #44]	; 0x2c
   31594:	mov	r0, #0
   31598:	str	r0, [sp, #48]	; 0x30
   3159c:	cmp	r2, #1
   315a0:	blt	3167c <GetDataSlab+0x5800>
   315a4:	ldr	r0, [fp, #12]
   315a8:	ldr	r5, [sp, #52]	; 0x34
   315ac:	mov	ip, #0
   315b0:	ldr	r9, [r0]
   315b4:	cmp	r5, #4
   315b8:	bcc	31648 <GetDataSlab+0x57cc>
   315bc:	ldr	r2, [sp, #68]	; 0x44
   315c0:	ldr	r6, [sp, #44]	; 0x2c
   315c4:	ldr	r0, [sp, #48]	; 0x30
   315c8:	mla	r0, r6, r0, r2
   315cc:	add	r2, r4, r9
   315d0:	str	r0, [sp, #40]	; 0x28
   315d4:	mov	r0, r9
   315d8:	add	r9, r4, r5
   315dc:	add	r6, r9, r0
   315e0:	mov	r9, r0
   315e4:	ldr	r0, [sp, #40]	; 0x28
   315e8:	cmp	r0, r6
   315ec:	bcs	3160c <GetDataSlab+0x5790>
   315f0:	ldr	r5, [sp, #44]	; 0x2c
   315f4:	ldr	r0, [sp, #48]	; 0x30
   315f8:	mla	r6, r5, r0, r5
   315fc:	ldr	r5, [sp, #68]	; 0x44
   31600:	add	r6, r5, r6
   31604:	cmp	r2, r6
   31608:	bcc	31648 <GetDataSlab+0x57cc>
   3160c:	ldr	r0, [sp, #32]
   31610:	ldr	r6, [sp, #56]	; 0x38
   31614:	ldr	r5, [r2], #4
   31618:	subs	r0, r0, #4
   3161c:	str	r5, [sp, #212]	; 0xd4
   31620:	vld1.32	{d16[0]}, [r7 :32]
   31624:	vmovl.u8	q8, d16
   31628:	vmovl.u16	q8, d16
   3162c:	vcvt.f32.u32	q8, q8
   31630:	vst1.32	{d16-d17}, [r6]!
   31634:	bne	31614 <GetDataSlab+0x5798>
   31638:	ldr	r0, [sp, #52]	; 0x34
   3163c:	ldr	ip, [sp, #32]
   31640:	cmp	r0, ip
   31644:	beq	3167c <GetDataSlab+0x5800>
   31648:	ldr	r0, [sp, #56]	; 0x38
   3164c:	ldr	r2, [sp, #52]	; 0x34
   31650:	add	r6, r0, ip, lsl #2
   31654:	add	r0, ip, r9
   31658:	sub	r2, r2, ip
   3165c:	add	r0, r4, r0
   31660:	ldrb	r5, [r0], #1
   31664:	subs	r2, r2, #1
   31668:	vmov	s0, r5
   3166c:	vcvt.f32.u32	s0, s0
   31670:	vstr	s0, [r6]
   31674:	add	r6, r6, #4
   31678:	bne	31660 <GetDataSlab+0x57e4>
   3167c:	ldr	r0, [sp, #36]	; 0x24
   31680:	add	r4, r4, r0
   31684:	add	r3, r3, r0
   31688:	ldr	r0, [fp, #24]
   3168c:	cmp	r0, #2
   31690:	blt	31744 <GetDataSlab+0x58c8>
   31694:	mov	r2, #0
   31698:	mov	r0, r2
   3169c:	ldr	r2, [r1, r2, lsl #2]
   316a0:	add	r2, r2, #1
   316a4:	str	r2, [r1, r0, lsl #2]
   316a8:	ldr	r5, [r8, r0, lsl #2]
   316ac:	sdiv	r6, r2, r5
   316b0:	mls	r2, r6, r5, r2
   316b4:	cmp	r2, #0
   316b8:	bne	31734 <GetDataSlab+0x58b8>
   316bc:	mov	r9, r7
   316c0:	mov	r2, #0
   316c4:	sub	r7, fp, #176	; 0xb0
   316c8:	str	r2, [r1, r0, lsl #2]
   316cc:	add	r2, r7, r0, lsl #2
   316d0:	ldr	r2, [r2, #4]
   316d4:	sdiv	r5, r3, r2
   316d8:	mls	r6, r5, r2, r3
   316dc:	cmp	r6, #0
   316e0:	beq	31700 <GetDataSlab+0x5884>
   316e4:	ldr	r5, [r7, r0, lsl #2]
   316e8:	ldr	r7, [lr, r0, lsl #2]
   316ec:	sub	r2, r2, r6
   316f0:	mla	r2, r7, r5, r2
   316f4:	add	r3, r2, r3
   316f8:	add	r4, r4, r2
   316fc:	b	31718 <GetDataSlab+0x589c>
   31700:	ldr	r2, [lr, r0, lsl #2]
   31704:	cmp	r2, #0
   31708:	subne	r5, fp, #176	; 0xb0
   3170c:	ldrne	r5, [r5, r0, lsl #2]
   31710:	mlane	r3, r5, r2, r3
   31714:	mlane	r4, r5, r2, r4
   31718:	ldr	r5, [fp, #24]
   3171c:	add	r2, r0, #1
   31720:	add	r0, r0, #2
   31724:	mov	r7, r9
   31728:	cmp	r0, r5
   3172c:	blt	31698 <GetDataSlab+0x581c>
   31730:	b	31744 <GetDataSlab+0x58c8>
   31734:	ldr	r2, [sp, #28]
   31738:	ldr	r0, [r2, r0, lsl #2]
   3173c:	add	r4, r4, r0
   31740:	add	r3, r0, r3
   31744:	ldr	r0, [sp, #44]	; 0x2c
   31748:	ldr	r2, [sp, #56]	; 0x38
   3174c:	ldr	r5, [sp, #60]	; 0x3c
   31750:	add	r2, r2, r0
   31754:	ldr	r0, [sp, #48]	; 0x30
   31758:	str	r2, [sp, #56]	; 0x38
   3175c:	ldr	r2, [sp, #52]	; 0x34
   31760:	add	r0, r0, #1
   31764:	add	sl, sl, r2
   31768:	str	r0, [sp, #48]	; 0x30
   3176c:	mov	r0, #0
   31770:	cmp	sl, r5
   31774:	blt	3159c <GetDataSlab+0x5720>
   31778:	b	2e97c <GetDataSlab+0x2b00>
   3177c:	ldr	r0, [fp, #16]
   31780:	ldr	r9, [fp, #8]
   31784:	mov	sl, r6
   31788:	mov	r2, #0
   3178c:	sub	ip, fp, #96	; 0x60
   31790:	ldr	r0, [r0]
   31794:	str	r0, [sp, #32]
   31798:	sub	r0, r0, #1
   3179c:	str	r0, [fp, #-96]	; 0xffffffa0
   317a0:	ldr	r0, [r9]
   317a4:	str	r0, [fp, #-176]	; 0xffffff50
   317a8:	str	r0, [sp, #40]	; 0x28
   317ac:	ldr	r0, [fp, #24]
   317b0:	ldr	r1, [r6]
   317b4:	cmp	r0, #2
   317b8:	str	r1, [sp, #52]	; 0x34
   317bc:	str	r1, [sp, #60]	; 0x3c
   317c0:	blt	31918 <GetDataSlab+0x5a9c>
   317c4:	ldr	r3, [sp, #40]	; 0x28
   317c8:	mov	r5, lr
   317cc:	sub	r7, r9, #4
   317d0:	sub	lr, r9, #12
   317d4:	mov	r4, #1
   317d8:	mov	r8, #0
   317dc:	mvn	r0, #15
   317e0:	mov	r2, #0
   317e4:	mov	r1, r3
   317e8:	str	r3, [sp, #48]	; 0x30
   317ec:	ldr	r1, [sp, #52]	; 0x34
   317f0:	str	r1, [sp, #60]	; 0x3c
   317f4:	ldr	r1, [fp, #16]
   317f8:	add	r8, r8, #1
   317fc:	cmp	r8, #4
   31800:	ldr	r1, [r1, r4, lsl #2]
   31804:	str	r3, [r5, r4, lsl #2]
   31808:	sub	sl, r1, #1
   3180c:	str	sl, [ip, r4, lsl #2]
   31810:	ldr	r1, [r9, r4, lsl #2]
   31814:	str	r1, [sp, #44]	; 0x2c
   31818:	bcs	31824 <GetDataSlab+0x59a8>
   3181c:	mov	r5, r4
   31820:	b	318b4 <GetDataSlab+0x5a38>
   31824:	vmov.i32	q9, #1	; 0x00000001
   31828:	vmov.i32	q10, #1	; 0x00000001
   3182c:	vmov.i32	q8, #1	; 0x00000001
   31830:	bic	ip, r8, #3
   31834:	bic	r9, r4, #3
   31838:	vmov.32	d23[1], r1
   3183c:	vmov.32	d18[0], r3
   31840:	vmov.32	d20[0], sl
   31844:	sub	r5, r4, ip
   31848:	mov	r3, lr
   3184c:	vorr	d16, d18, d18
   31850:	vmov.i32	q9, #1	; 0x00000001
   31854:	vorr	d18, d20, d20
   31858:	vld1.32	{d20-d21}, [r3], r0
   3185c:	subs	r9, r9, #4
   31860:	vrev64.32	q12, q10
   31864:	vext.8	q12, q12, q12, #8
   31868:	vext.8	q11, q11, q12, #12
   3186c:	vmul.i32	q9, q9, q12
   31870:	vmul.i32	q8, q11, q8
   31874:	vorr	q11, q12, q12
   31878:	bne	31858 <GetDataSlab+0x59dc>
   3187c:	vext.8	q11, q9, q8, #8
   31880:	vext.8	q12, q8, q8, #8
   31884:	cmp	r8, ip
   31888:	vmul.i32	q0, q9, q11
   3188c:	vmul.i32	q1, q8, q12
   31890:	vmul.i32	q8, q0, d0[1]
   31894:	vmul.i32	q9, q1, d2[1]
   31898:	vmov.32	sl, d16[0]
   3189c:	vmov.32	r3, d18[0]
   318a0:	bne	318ac <GetDataSlab+0x5a30>
   318a4:	ldr	r9, [fp, #8]
   318a8:	b	318c8 <GetDataSlab+0x5a4c>
   318ac:	ldr	r9, [fp, #8]
   318b0:	vmov.32	r1, d20[0]
   318b4:	mul	r3, r1, r3
   318b8:	ldr	r1, [r7, r5, lsl #2]
   318bc:	subs	r5, r5, #1
   318c0:	mul	sl, sl, r1
   318c4:	bne	318b4 <GetDataSlab+0x5a38>
   318c8:	ldr	r1, [fp, #12]
   318cc:	sub	r5, fp, #176	; 0xb0
   318d0:	sub	ip, fp, #96	; 0x60
   318d4:	ldr	r6, [sp, #48]	; 0x30
   318d8:	str	r3, [sp, #48]	; 0x30
   318dc:	add	lr, lr, #4
   318e0:	str	r3, [r5, r4, lsl #2]
   318e4:	str	sl, [ip, r4, lsl #2]
   318e8:	ldr	sl, [fp, #20]
   318ec:	ldr	r3, [sp, #44]	; 0x2c
   318f0:	ldr	r1, [r1, r4, lsl #2]
   318f4:	mla	r2, r1, r6, r2
   318f8:	ldr	r1, [sl, r4, lsl #2]
   318fc:	ldr	r6, [sp, #60]	; 0x3c
   31900:	add	r4, r4, #1
   31904:	mul	r6, r1, r6
   31908:	ldr	r1, [fp, #24]
   3190c:	str	r6, [sp, #60]	; 0x3c
   31910:	cmp	r4, r1
   31914:	bne	317f4 <GetDataSlab+0x5978>
   31918:	ldr	r0, [sp, #56]	; 0x38
   3191c:	ldr	r6, [sp, #32]
   31920:	add	r9, r0, r2, lsl #1
   31924:	cmp	r6, #1
   31928:	bne	426e4 <GetDataSlab+0x16868>
   3192c:	ldr	r0, [sp, #60]	; 0x3c
   31930:	ldr	lr, [fp, #12]
   31934:	ldr	r1, [sp, #52]	; 0x34
   31938:	cmp	r0, #1
   3193c:	blt	51814 <GetDataSlab+0x25998>
   31940:	sub	r0, fp, #136	; 0x88
   31944:	add	r7, sl, #4
   31948:	mov	sl, #0
   3194c:	mov	ip, #0
   31950:	orr	r6, r0, #4
   31954:	sub	r0, fp, #96	; 0x60
   31958:	orr	r0, r0, #4
   3195c:	str	r0, [sp, #44]	; 0x2c
   31960:	lsl	r0, r1, #2
   31964:	str	r0, [sp, #56]	; 0x38
   31968:	bic	r0, r1, #3
   3196c:	str	r0, [sp, #48]	; 0x30
   31970:	ldr	r0, [lr], #4
   31974:	str	r0, [sp, #64]	; 0x40
   31978:	cmp	r1, #1
   3197c:	mov	r4, lr
   31980:	blt	31a04 <GetDataSlab+0x5b88>
   31984:	ldr	r0, [sp, #52]	; 0x34
   31988:	mov	r3, #0
   3198c:	cmp	r0, #4
   31990:	bcc	319cc <GetDataSlab+0x5b50>
   31994:	ldr	r0, [sp, #64]	; 0x40
   31998:	ldr	r1, [sp, #48]	; 0x30
   3199c:	ldr	r3, [sp, #68]	; 0x44
   319a0:	add	r0, r9, r0, lsl #1
   319a4:	vld1.16	{d16}, [r0]!
   319a8:	subs	r1, r1, #4
   319ac:	vmovl.s16	q8, d16
   319b0:	vcvt.f32.s32	q8, q8
   319b4:	vst1.32	{d16-d17}, [r3]!
   319b8:	bne	319a4 <GetDataSlab+0x5b28>
   319bc:	ldr	r0, [sp, #52]	; 0x34
   319c0:	ldr	r3, [sp, #48]	; 0x30
   319c4:	cmp	r0, r3
   319c8:	beq	31a04 <GetDataSlab+0x5b88>
   319cc:	ldr	r5, [sp, #64]	; 0x40
   319d0:	ldr	r0, [sp, #52]	; 0x34
   319d4:	ldr	r1, [sp, #68]	; 0x44
   319d8:	add	r5, r9, r5, lsl #1
   319dc:	sub	r0, r0, r3
   319e0:	add	r1, r1, r3, lsl #2
   319e4:	add	r3, r5, r3, lsl #1
   319e8:	ldrsh	r5, [r3], #2
   319ec:	subs	r0, r0, #1
   319f0:	vmov	s0, r5
   319f4:	vcvt.f32.s32	s0, s0
   319f8:	vstr	s0, [r1]
   319fc:	add	r1, r1, #4
   31a00:	bne	319e8 <GetDataSlab+0x5b6c>
   31a04:	ldr	r0, [sp, #40]	; 0x28
   31a08:	add	r9, r9, r0, lsl #1
   31a0c:	add	r2, r2, r0
   31a10:	ldr	r0, [fp, #24]
   31a14:	cmp	r0, #2
   31a18:	blt	31ac8 <GetDataSlab+0x5c4c>
   31a1c:	mov	r1, #0
   31a20:	mov	r0, r1
   31a24:	ldr	r1, [r6, r1, lsl #2]
   31a28:	add	r1, r1, #1
   31a2c:	str	r1, [r6, r0, lsl #2]
   31a30:	ldr	r3, [r7, r0, lsl #2]
   31a34:	sdiv	r5, r1, r3
   31a38:	mls	r1, r5, r3, r1
   31a3c:	cmp	r1, #0
   31a40:	bne	31ab8 <GetDataSlab+0x5c3c>
   31a44:	sub	r5, fp, #176	; 0xb0
   31a48:	str	sl, [r6, r0, lsl #2]
   31a4c:	add	r1, r5, r0, lsl #2
   31a50:	ldr	r1, [r1, #4]
   31a54:	sdiv	r3, r2, r1
   31a58:	mls	r3, r3, r1, r2
   31a5c:	cmp	r3, #0
   31a60:	beq	31a80 <GetDataSlab+0x5c04>
   31a64:	ldr	r5, [r5, r0, lsl #2]
   31a68:	ldr	r8, [lr, r0, lsl #2]
   31a6c:	sub	r1, r1, r3
   31a70:	mov	r4, lr
   31a74:	mla	r1, r8, r5, r1
   31a78:	add	r2, r1, r2
   31a7c:	b	31a9c <GetDataSlab+0x5c20>
   31a80:	ldr	r1, [r4, r0, lsl #2]
   31a84:	cmp	r1, #0
   31a88:	beq	31aa0 <GetDataSlab+0x5c24>
   31a8c:	sub	r3, fp, #176	; 0xb0
   31a90:	ldr	r3, [r3, r0, lsl #2]
   31a94:	mla	r2, r3, r1, r2
   31a98:	mul	r1, r3, r1
   31a9c:	add	r9, r9, r1, lsl #1
   31aa0:	ldr	r3, [fp, #24]
   31aa4:	add	r1, r0, #1
   31aa8:	add	r0, r0, #2
   31aac:	cmp	r0, r3
   31ab0:	blt	31a20 <GetDataSlab+0x5ba4>
   31ab4:	b	31ac8 <GetDataSlab+0x5c4c>
   31ab8:	ldr	r1, [sp, #44]	; 0x2c
   31abc:	ldr	r0, [r1, r0, lsl #2]
   31ac0:	add	r9, r9, r0, lsl #1
   31ac4:	add	r2, r0, r2
   31ac8:	ldr	r0, [sp, #68]	; 0x44
   31acc:	ldr	r1, [sp, #56]	; 0x38
   31ad0:	ldr	r3, [sp, #60]	; 0x3c
   31ad4:	add	r0, r0, r1
   31ad8:	ldr	r1, [sp, #52]	; 0x34
   31adc:	str	r0, [sp, #68]	; 0x44
   31ae0:	mov	r0, #0
   31ae4:	add	ip, ip, r1
   31ae8:	cmp	ip, r3
   31aec:	blt	31978 <GetDataSlab+0x5afc>
   31af0:	b	2e97c <GetDataSlab+0x2b00>
   31af4:	ldr	r0, [fp, #16]
   31af8:	ldr	r9, [fp, #8]
   31afc:	mov	sl, r6
   31b00:	mov	r2, #0
   31b04:	sub	ip, fp, #96	; 0x60
   31b08:	ldr	r0, [r0]
   31b0c:	str	r0, [sp, #32]
   31b10:	sub	r0, r0, #1
   31b14:	str	r0, [fp, #-96]	; 0xffffffa0
   31b18:	ldr	r0, [r9]
   31b1c:	str	r0, [fp, #-176]	; 0xffffff50
   31b20:	str	r0, [sp, #40]	; 0x28
   31b24:	ldr	r0, [fp, #24]
   31b28:	ldr	r1, [r6]
   31b2c:	cmp	r0, #2
   31b30:	str	r1, [sp, #52]	; 0x34
   31b34:	str	r1, [sp, #60]	; 0x3c
   31b38:	blt	31c90 <GetDataSlab+0x5e14>
   31b3c:	ldr	r3, [sp, #40]	; 0x28
   31b40:	mov	r5, lr
   31b44:	sub	r7, r9, #4
   31b48:	sub	lr, r9, #12
   31b4c:	mov	r4, #1
   31b50:	mov	r8, #0
   31b54:	mvn	r0, #15
   31b58:	mov	r2, #0
   31b5c:	mov	r1, r3
   31b60:	str	r3, [sp, #48]	; 0x30
   31b64:	ldr	r1, [sp, #52]	; 0x34
   31b68:	str	r1, [sp, #60]	; 0x3c
   31b6c:	ldr	r1, [fp, #16]
   31b70:	add	r8, r8, #1
   31b74:	cmp	r8, #4
   31b78:	ldr	r1, [r1, r4, lsl #2]
   31b7c:	str	r3, [r5, r4, lsl #2]
   31b80:	sub	sl, r1, #1
   31b84:	str	sl, [ip, r4, lsl #2]
   31b88:	ldr	r1, [r9, r4, lsl #2]
   31b8c:	str	r1, [sp, #44]	; 0x2c
   31b90:	bcs	31b9c <GetDataSlab+0x5d20>
   31b94:	mov	r5, r4
   31b98:	b	31c2c <GetDataSlab+0x5db0>
   31b9c:	vmov.i32	q9, #1	; 0x00000001
   31ba0:	vmov.i32	q10, #1	; 0x00000001
   31ba4:	vmov.i32	q8, #1	; 0x00000001
   31ba8:	bic	ip, r8, #3
   31bac:	bic	r9, r4, #3
   31bb0:	vmov.32	d23[1], r1
   31bb4:	vmov.32	d18[0], r3
   31bb8:	vmov.32	d20[0], sl
   31bbc:	sub	r5, r4, ip
   31bc0:	mov	r3, lr
   31bc4:	vorr	d16, d18, d18
   31bc8:	vmov.i32	q9, #1	; 0x00000001
   31bcc:	vorr	d18, d20, d20
   31bd0:	vld1.32	{d20-d21}, [r3], r0
   31bd4:	subs	r9, r9, #4
   31bd8:	vrev64.32	q12, q10
   31bdc:	vext.8	q12, q12, q12, #8
   31be0:	vext.8	q11, q11, q12, #12
   31be4:	vmul.i32	q9, q9, q12
   31be8:	vmul.i32	q8, q11, q8
   31bec:	vorr	q11, q12, q12
   31bf0:	bne	31bd0 <GetDataSlab+0x5d54>
   31bf4:	vext.8	q11, q9, q8, #8
   31bf8:	vext.8	q12, q8, q8, #8
   31bfc:	cmp	r8, ip
   31c00:	vmul.i32	q0, q9, q11
   31c04:	vmul.i32	q1, q8, q12
   31c08:	vmul.i32	q8, q0, d0[1]
   31c0c:	vmul.i32	q9, q1, d2[1]
   31c10:	vmov.32	sl, d16[0]
   31c14:	vmov.32	r3, d18[0]
   31c18:	bne	31c24 <GetDataSlab+0x5da8>
   31c1c:	ldr	r9, [fp, #8]
   31c20:	b	31c40 <GetDataSlab+0x5dc4>
   31c24:	ldr	r9, [fp, #8]
   31c28:	vmov.32	r1, d20[0]
   31c2c:	mul	r3, r1, r3
   31c30:	ldr	r1, [r7, r5, lsl #2]
   31c34:	subs	r5, r5, #1
   31c38:	mul	sl, sl, r1
   31c3c:	bne	31c2c <GetDataSlab+0x5db0>
   31c40:	ldr	r1, [fp, #12]
   31c44:	sub	r5, fp, #176	; 0xb0
   31c48:	sub	ip, fp, #96	; 0x60
   31c4c:	ldr	r6, [sp, #48]	; 0x30
   31c50:	str	r3, [sp, #48]	; 0x30
   31c54:	add	lr, lr, #4
   31c58:	str	r3, [r5, r4, lsl #2]
   31c5c:	str	sl, [ip, r4, lsl #2]
   31c60:	ldr	sl, [fp, #20]
   31c64:	ldr	r3, [sp, #44]	; 0x2c
   31c68:	ldr	r1, [r1, r4, lsl #2]
   31c6c:	mla	r2, r1, r6, r2
   31c70:	ldr	r1, [sl, r4, lsl #2]
   31c74:	ldr	r6, [sp, #60]	; 0x3c
   31c78:	add	r4, r4, #1
   31c7c:	mul	r6, r1, r6
   31c80:	ldr	r1, [fp, #24]
   31c84:	str	r6, [sp, #60]	; 0x3c
   31c88:	cmp	r4, r1
   31c8c:	bne	31b6c <GetDataSlab+0x5cf0>
   31c90:	ldr	r0, [sp, #56]	; 0x38
   31c94:	ldr	r6, [sp, #32]
   31c98:	add	r9, r0, r2, lsl #1
   31c9c:	cmp	r6, #1
   31ca0:	bne	4287c <GetDataSlab+0x16a00>
   31ca4:	ldr	r0, [sp, #60]	; 0x3c
   31ca8:	ldr	lr, [fp, #12]
   31cac:	ldr	r1, [sp, #52]	; 0x34
   31cb0:	cmp	r0, #1
   31cb4:	blt	51828 <GetDataSlab+0x259ac>
   31cb8:	sub	r0, fp, #136	; 0x88
   31cbc:	add	r7, sl, #4
   31cc0:	mov	sl, #0
   31cc4:	mov	ip, #0
   31cc8:	orr	r6, r0, #4
   31ccc:	sub	r0, fp, #96	; 0x60
   31cd0:	orr	r0, r0, #4
   31cd4:	str	r0, [sp, #44]	; 0x2c
   31cd8:	lsl	r0, r1, #2
   31cdc:	str	r0, [sp, #56]	; 0x38
   31ce0:	bic	r0, r1, #3
   31ce4:	str	r0, [sp, #48]	; 0x30
   31ce8:	ldr	r0, [lr], #4
   31cec:	str	r0, [sp, #64]	; 0x40
   31cf0:	cmp	r1, #1
   31cf4:	mov	r4, lr
   31cf8:	blt	31d7c <GetDataSlab+0x5f00>
   31cfc:	ldr	r0, [sp, #52]	; 0x34
   31d00:	mov	r3, #0
   31d04:	cmp	r0, #4
   31d08:	bcc	31d44 <GetDataSlab+0x5ec8>
   31d0c:	ldr	r0, [sp, #64]	; 0x40
   31d10:	ldr	r1, [sp, #48]	; 0x30
   31d14:	ldr	r3, [sp, #68]	; 0x44
   31d18:	add	r0, r9, r0, lsl #1
   31d1c:	vld1.16	{d16}, [r0]!
   31d20:	subs	r1, r1, #4
   31d24:	vmovl.u16	q8, d16
   31d28:	vcvt.f32.u32	q8, q8
   31d2c:	vst1.32	{d16-d17}, [r3]!
   31d30:	bne	31d1c <GetDataSlab+0x5ea0>
   31d34:	ldr	r0, [sp, #52]	; 0x34
   31d38:	ldr	r3, [sp, #48]	; 0x30
   31d3c:	cmp	r0, r3
   31d40:	beq	31d7c <GetDataSlab+0x5f00>
   31d44:	ldr	r5, [sp, #64]	; 0x40
   31d48:	ldr	r0, [sp, #52]	; 0x34
   31d4c:	ldr	r1, [sp, #68]	; 0x44
   31d50:	add	r5, r9, r5, lsl #1
   31d54:	sub	r0, r0, r3
   31d58:	add	r1, r1, r3, lsl #2
   31d5c:	add	r3, r5, r3, lsl #1
   31d60:	ldrh	r5, [r3], #2
   31d64:	subs	r0, r0, #1
   31d68:	vmov	s0, r5
   31d6c:	vcvt.f32.u32	s0, s0
   31d70:	vstr	s0, [r1]
   31d74:	add	r1, r1, #4
   31d78:	bne	31d60 <GetDataSlab+0x5ee4>
   31d7c:	ldr	r0, [sp, #40]	; 0x28
   31d80:	add	r9, r9, r0, lsl #1
   31d84:	add	r2, r2, r0
   31d88:	ldr	r0, [fp, #24]
   31d8c:	cmp	r0, #2
   31d90:	blt	31e40 <GetDataSlab+0x5fc4>
   31d94:	mov	r1, #0
   31d98:	mov	r0, r1
   31d9c:	ldr	r1, [r6, r1, lsl #2]
   31da0:	add	r1, r1, #1
   31da4:	str	r1, [r6, r0, lsl #2]
   31da8:	ldr	r3, [r7, r0, lsl #2]
   31dac:	sdiv	r5, r1, r3
   31db0:	mls	r1, r5, r3, r1
   31db4:	cmp	r1, #0
   31db8:	bne	31e30 <GetDataSlab+0x5fb4>
   31dbc:	sub	r5, fp, #176	; 0xb0
   31dc0:	str	sl, [r6, r0, lsl #2]
   31dc4:	add	r1, r5, r0, lsl #2
   31dc8:	ldr	r1, [r1, #4]
   31dcc:	sdiv	r3, r2, r1
   31dd0:	mls	r3, r3, r1, r2
   31dd4:	cmp	r3, #0
   31dd8:	beq	31df8 <GetDataSlab+0x5f7c>
   31ddc:	ldr	r5, [r5, r0, lsl #2]
   31de0:	ldr	r8, [lr, r0, lsl #2]
   31de4:	sub	r1, r1, r3
   31de8:	mov	r4, lr
   31dec:	mla	r1, r8, r5, r1
   31df0:	add	r2, r1, r2
   31df4:	b	31e14 <GetDataSlab+0x5f98>
   31df8:	ldr	r1, [r4, r0, lsl #2]
   31dfc:	cmp	r1, #0
   31e00:	beq	31e18 <GetDataSlab+0x5f9c>
   31e04:	sub	r3, fp, #176	; 0xb0
   31e08:	ldr	r3, [r3, r0, lsl #2]
   31e0c:	mla	r2, r3, r1, r2
   31e10:	mul	r1, r3, r1
   31e14:	add	r9, r9, r1, lsl #1
   31e18:	ldr	r3, [fp, #24]
   31e1c:	add	r1, r0, #1
   31e20:	add	r0, r0, #2
   31e24:	cmp	r0, r3
   31e28:	blt	31d98 <GetDataSlab+0x5f1c>
   31e2c:	b	31e40 <GetDataSlab+0x5fc4>
   31e30:	ldr	r1, [sp, #44]	; 0x2c
   31e34:	ldr	r0, [r1, r0, lsl #2]
   31e38:	add	r9, r9, r0, lsl #1
   31e3c:	add	r2, r0, r2
   31e40:	ldr	r0, [sp, #68]	; 0x44
   31e44:	ldr	r1, [sp, #56]	; 0x38
   31e48:	ldr	r3, [sp, #60]	; 0x3c
   31e4c:	add	r0, r0, r1
   31e50:	ldr	r1, [sp, #52]	; 0x34
   31e54:	str	r0, [sp, #68]	; 0x44
   31e58:	mov	r0, #0
   31e5c:	add	ip, ip, r1
   31e60:	cmp	ip, r3
   31e64:	blt	31cf0 <GetDataSlab+0x5e74>
   31e68:	b	2e97c <GetDataSlab+0x2b00>
   31e6c:	ldr	r0, [fp, #16]
   31e70:	mov	r3, #0
   31e74:	sub	r9, fp, #96	; 0x60
   31e78:	ldr	r0, [r0]
   31e7c:	str	r0, [sp, #32]
   31e80:	sub	r0, r0, #1
   31e84:	str	r0, [fp, #-96]	; 0xffffffa0
   31e88:	ldr	r0, [fp, #8]
   31e8c:	ldr	r0, [r0]
   31e90:	str	r0, [fp, #-176]	; 0xffffff50
   31e94:	str	r0, [sp, #44]	; 0x2c
   31e98:	ldr	r0, [fp, #24]
   31e9c:	ldr	r1, [r6]
   31ea0:	cmp	r0, #2
   31ea4:	str	r1, [sp, #52]	; 0x34
   31ea8:	str	r1, [sp, #60]	; 0x3c
   31eac:	blt	32010 <GetDataSlab+0x6194>
   31eb0:	ldr	r0, [fp, #8]
   31eb4:	ldr	r2, [sp, #44]	; 0x2c
   31eb8:	ldr	r6, [sp, #52]	; 0x34
   31ebc:	mov	r8, #1
   31ec0:	mov	sl, #0
   31ec4:	mvn	r4, #15
   31ec8:	mov	r3, #0
   31ecc:	sub	r1, r0, #4
   31ed0:	sub	r7, r0, #12
   31ed4:	mov	r0, r2
   31ed8:	str	r6, [sp, #60]	; 0x3c
   31edc:	ldr	r6, [fp, #16]
   31ee0:	str	r0, [sp, #48]	; 0x30
   31ee4:	mov	r0, sl
   31ee8:	add	r0, sl, #1
   31eec:	cmp	r0, #4
   31ef0:	ldr	r6, [r6, r8, lsl #2]
   31ef4:	str	r2, [lr, r8, lsl #2]
   31ef8:	sub	ip, r6, #1
   31efc:	ldr	r6, [fp, #8]
   31f00:	str	ip, [r9, r8, lsl #2]
   31f04:	ldr	lr, [r6, r8, lsl #2]
   31f08:	bcs	31f18 <GetDataSlab+0x609c>
   31f0c:	mov	r5, lr
   31f10:	mov	r6, r8
   31f14:	b	31fa4 <GetDataSlab+0x6128>
   31f18:	vmov.i32	q9, #1	; 0x00000001
   31f1c:	vmov.i32	q10, #1	; 0x00000001
   31f20:	vmov.i32	q8, #1	; 0x00000001
   31f24:	bic	r5, r0, #3
   31f28:	bic	sl, r8, #3
   31f2c:	vmov.32	d23[1], lr
   31f30:	vmov.32	d18[0], r2
   31f34:	vmov.32	d20[0], ip
   31f38:	sub	r6, r8, r5
   31f3c:	mov	r2, r7
   31f40:	vorr	d16, d18, d18
   31f44:	vmov.i32	q9, #1	; 0x00000001
   31f48:	vorr	d18, d20, d20
   31f4c:	vld1.32	{d20-d21}, [r2], r4
   31f50:	subs	sl, sl, #4
   31f54:	vrev64.32	q12, q10
   31f58:	vext.8	q12, q12, q12, #8
   31f5c:	vext.8	q11, q11, q12, #12
   31f60:	vmul.i32	q9, q9, q12
   31f64:	vmul.i32	q8, q11, q8
   31f68:	vorr	q11, q12, q12
   31f6c:	bne	31f4c <GetDataSlab+0x60d0>
   31f70:	vext.8	q11, q9, q8, #8
   31f74:	vext.8	q12, q8, q8, #8
   31f78:	cmp	r0, r5
   31f7c:	vmul.i32	q0, q9, q11
   31f80:	vmul.i32	q1, q8, q12
   31f84:	vmul.i32	q8, q0, d0[1]
   31f88:	vmul.i32	q9, q1, d2[1]
   31f8c:	vmov.32	ip, d16[0]
   31f90:	vmov.32	r2, d18[0]
   31f94:	bne	31fa0 <GetDataSlab+0x6124>
   31f98:	mov	sl, r0
   31f9c:	b	31fbc <GetDataSlab+0x6140>
   31fa0:	vmov.32	r5, d20[0]
   31fa4:	mov	sl, r0
   31fa8:	mul	r2, r5, r2
   31fac:	ldr	r5, [r1, r6, lsl #2]
   31fb0:	subs	r6, r6, #1
   31fb4:	mul	ip, ip, r5
   31fb8:	bne	31fa8 <GetDataSlab+0x612c>
   31fbc:	ldr	r6, [fp, #12]
   31fc0:	sub	r5, fp, #176	; 0xb0
   31fc4:	sub	r9, fp, #96	; 0x60
   31fc8:	ldr	r0, [sp, #48]	; 0x30
   31fcc:	add	r7, r7, #4
   31fd0:	str	r2, [r5, r8, lsl #2]
   31fd4:	str	ip, [r9, r8, lsl #2]
   31fd8:	ldr	r6, [r6, r8, lsl #2]
   31fdc:	mla	r3, r6, r0, r3
   31fe0:	ldr	r0, [fp, #20]
   31fe4:	ldr	r6, [sp, #60]	; 0x3c
   31fe8:	ldr	r0, [r0, r8, lsl #2]
   31fec:	add	r8, r8, #1
   31ff0:	mul	r6, r0, r6
   31ff4:	ldr	r0, [fp, #24]
   31ff8:	str	r6, [sp, #60]	; 0x3c
   31ffc:	cmp	r8, r0
   32000:	mov	r0, r2
   32004:	mov	r2, lr
   32008:	mov	lr, r5
   3200c:	bne	31edc <GetDataSlab+0x6060>
   32010:	ldr	r0, [sp, #56]	; 0x38
   32014:	ldr	r6, [sp, #32]
   32018:	add	sl, r0, r3, lsl #2
   3201c:	cmp	r6, #1
   32020:	bne	42a14 <GetDataSlab+0x16b98>
   32024:	ldr	r0, [sp, #60]	; 0x3c
   32028:	ldr	r2, [sp, #52]	; 0x34
   3202c:	sub	r1, fp, #96	; 0x60
   32030:	cmp	r0, #1
   32034:	ldr	r0, [fp, #12]
   32038:	blt	5183c <GetDataSlab+0x259c0>
   3203c:	add	r8, r0, #4
   32040:	ldr	r0, [fp, #20]
   32044:	mov	r9, #0
   32048:	mov	lr, #0
   3204c:	add	r6, r0, #4
   32050:	sub	r0, fp, #136	; 0x88
   32054:	orr	r5, r0, #4
   32058:	orr	r0, r1, #4
   3205c:	str	r0, [sp, #40]	; 0x28
   32060:	lsl	r0, r2, #2
   32064:	str	r0, [sp, #56]	; 0x38
   32068:	bic	r0, r2, #3
   3206c:	str	r0, [sp, #48]	; 0x30
   32070:	ldr	r4, [sp, #68]	; 0x44
   32074:	cmp	r2, #1
   32078:	blt	320f8 <GetDataSlab+0x627c>
   3207c:	ldr	r0, [fp, #12]
   32080:	ldr	r1, [sp, #52]	; 0x34
   32084:	ldr	r0, [r0]
   32088:	cmp	r1, #4
   3208c:	add	r7, sl, r0, lsl #2
   32090:	mov	r0, #0
   32094:	bcc	320cc <GetDataSlab+0x6250>
   32098:	ldr	r2, [sp, #48]	; 0x30
   3209c:	mov	r1, r4
   320a0:	mov	r0, r7
   320a4:	vld1.32	{d16-d17}, [r0]!
   320a8:	subs	r2, r2, #4
   320ac:	vcvt.f32.s32	q8, q8
   320b0:	vst1.32	{d16-d17}, [r1]!
   320b4:	bne	320a4 <GetDataSlab+0x6228>
   320b8:	ldr	r0, [sp, #52]	; 0x34
   320bc:	ldr	r1, [sp, #48]	; 0x30
   320c0:	cmp	r0, r1
   320c4:	mov	r0, r1
   320c8:	beq	320f8 <GetDataSlab+0x627c>
   320cc:	ldr	r1, [sp, #52]	; 0x34
   320d0:	sub	r2, r1, r0
   320d4:	lsl	r1, r0, #2
   320d8:	add	r0, r7, r1
   320dc:	subs	r2, r2, #1
   320e0:	vldr	s0, [r0]
   320e4:	add	r0, r4, r1
   320e8:	add	r1, r1, #4
   320ec:	vcvt.f32.s32	s0, s0
   320f0:	vstr	s0, [r0]
   320f4:	bne	320d8 <GetDataSlab+0x625c>
   320f8:	ldr	r0, [sp, #44]	; 0x2c
   320fc:	add	sl, sl, r0, lsl #2
   32100:	add	r3, r3, r0
   32104:	ldr	r0, [fp, #24]
   32108:	cmp	r0, #2
   3210c:	blt	321bc <GetDataSlab+0x6340>
   32110:	mov	r1, #0
   32114:	mov	r0, r1
   32118:	ldr	r1, [r5, r1, lsl #2]
   3211c:	add	r1, r1, #1
   32120:	str	r1, [r5, r0, lsl #2]
   32124:	ldr	r2, [r6, r0, lsl #2]
   32128:	sdiv	r7, r1, r2
   3212c:	mls	r1, r7, r2, r1
   32130:	cmp	r1, #0
   32134:	bne	321ac <GetDataSlab+0x6330>
   32138:	sub	r7, fp, #176	; 0xb0
   3213c:	str	r9, [r5, r0, lsl #2]
   32140:	add	r1, r7, r0, lsl #2
   32144:	ldr	r1, [r1, #4]
   32148:	sdiv	r2, r3, r1
   3214c:	mls	r2, r2, r1, r3
   32150:	cmp	r2, #0
   32154:	beq	32174 <GetDataSlab+0x62f8>
   32158:	ldr	r7, [r7, r0, lsl #2]
   3215c:	ldr	ip, [r8, r0, lsl #2]
   32160:	ldr	r4, [sp, #68]	; 0x44
   32164:	sub	r1, r1, r2
   32168:	mla	r1, ip, r7, r1
   3216c:	add	r3, r1, r3
   32170:	b	32190 <GetDataSlab+0x6314>
   32174:	ldr	r1, [r8, r0, lsl #2]
   32178:	cmp	r1, #0
   3217c:	beq	32194 <GetDataSlab+0x6318>
   32180:	sub	r2, fp, #176	; 0xb0
   32184:	ldr	r2, [r2, r0, lsl #2]
   32188:	mla	r3, r2, r1, r3
   3218c:	mul	r1, r2, r1
   32190:	add	sl, sl, r1, lsl #2
   32194:	ldr	r2, [fp, #24]
   32198:	add	r1, r0, #1
   3219c:	add	r0, r0, #2
   321a0:	cmp	r0, r2
   321a4:	blt	32114 <GetDataSlab+0x6298>
   321a8:	b	321bc <GetDataSlab+0x6340>
   321ac:	ldr	r1, [sp, #40]	; 0x28
   321b0:	ldr	r0, [r1, r0, lsl #2]
   321b4:	add	sl, sl, r0, lsl #2
   321b8:	add	r3, r0, r3
   321bc:	ldr	r2, [sp, #52]	; 0x34
   321c0:	ldr	r0, [sp, #56]	; 0x38
   321c4:	ldr	r1, [sp, #60]	; 0x3c
   321c8:	add	lr, lr, r2
   321cc:	add	r4, r4, r0
   321d0:	mov	r0, #0
   321d4:	cmp	lr, r1
   321d8:	str	r4, [sp, #68]	; 0x44
   321dc:	blt	32070 <GetDataSlab+0x61f4>
   321e0:	b	2e97c <GetDataSlab+0x2b00>
   321e4:	ldr	r0, [fp, #16]
   321e8:	mov	r3, #0
   321ec:	sub	r9, fp, #96	; 0x60
   321f0:	ldr	r0, [r0]
   321f4:	str	r0, [sp, #32]
   321f8:	sub	r0, r0, #1
   321fc:	str	r0, [fp, #-96]	; 0xffffffa0
   32200:	ldr	r0, [fp, #8]
   32204:	ldr	r0, [r0]
   32208:	str	r0, [fp, #-176]	; 0xffffff50
   3220c:	str	r0, [sp, #44]	; 0x2c
   32210:	ldr	r0, [fp, #24]
   32214:	ldr	r1, [r6]
   32218:	cmp	r0, #2
   3221c:	str	r1, [sp, #52]	; 0x34
   32220:	str	r1, [sp, #60]	; 0x3c
   32224:	blt	32388 <GetDataSlab+0x650c>
   32228:	ldr	r0, [fp, #8]
   3222c:	ldr	r2, [sp, #44]	; 0x2c
   32230:	ldr	r6, [sp, #52]	; 0x34
   32234:	mov	r8, #1
   32238:	mov	sl, #0
   3223c:	mvn	r4, #15
   32240:	mov	r3, #0
   32244:	sub	r1, r0, #4
   32248:	sub	r7, r0, #12
   3224c:	mov	r0, r2
   32250:	str	r6, [sp, #60]	; 0x3c
   32254:	ldr	r6, [fp, #16]
   32258:	str	r0, [sp, #48]	; 0x30
   3225c:	mov	r0, sl
   32260:	add	r0, sl, #1
   32264:	cmp	r0, #4
   32268:	ldr	r6, [r6, r8, lsl #2]
   3226c:	str	r2, [lr, r8, lsl #2]
   32270:	sub	ip, r6, #1
   32274:	ldr	r6, [fp, #8]
   32278:	str	ip, [r9, r8, lsl #2]
   3227c:	ldr	lr, [r6, r8, lsl #2]
   32280:	bcs	32290 <GetDataSlab+0x6414>
   32284:	mov	r5, lr
   32288:	mov	r6, r8
   3228c:	b	3231c <GetDataSlab+0x64a0>
   32290:	vmov.i32	q9, #1	; 0x00000001
   32294:	vmov.i32	q10, #1	; 0x00000001
   32298:	vmov.i32	q8, #1	; 0x00000001
   3229c:	bic	r5, r0, #3
   322a0:	bic	sl, r8, #3
   322a4:	vmov.32	d23[1], lr
   322a8:	vmov.32	d18[0], r2
   322ac:	vmov.32	d20[0], ip
   322b0:	sub	r6, r8, r5
   322b4:	mov	r2, r7
   322b8:	vorr	d16, d18, d18
   322bc:	vmov.i32	q9, #1	; 0x00000001
   322c0:	vorr	d18, d20, d20
   322c4:	vld1.32	{d20-d21}, [r2], r4
   322c8:	subs	sl, sl, #4
   322cc:	vrev64.32	q12, q10
   322d0:	vext.8	q12, q12, q12, #8
   322d4:	vext.8	q11, q11, q12, #12
   322d8:	vmul.i32	q9, q9, q12
   322dc:	vmul.i32	q8, q11, q8
   322e0:	vorr	q11, q12, q12
   322e4:	bne	322c4 <GetDataSlab+0x6448>
   322e8:	vext.8	q11, q9, q8, #8
   322ec:	vext.8	q12, q8, q8, #8
   322f0:	cmp	r0, r5
   322f4:	vmul.i32	q0, q9, q11
   322f8:	vmul.i32	q1, q8, q12
   322fc:	vmul.i32	q8, q0, d0[1]
   32300:	vmul.i32	q9, q1, d2[1]
   32304:	vmov.32	ip, d16[0]
   32308:	vmov.32	r2, d18[0]
   3230c:	bne	32318 <GetDataSlab+0x649c>
   32310:	mov	sl, r0
   32314:	b	32334 <GetDataSlab+0x64b8>
   32318:	vmov.32	r5, d20[0]
   3231c:	mov	sl, r0
   32320:	mul	r2, r5, r2
   32324:	ldr	r5, [r1, r6, lsl #2]
   32328:	subs	r6, r6, #1
   3232c:	mul	ip, ip, r5
   32330:	bne	32320 <GetDataSlab+0x64a4>
   32334:	ldr	r6, [fp, #12]
   32338:	sub	r5, fp, #176	; 0xb0
   3233c:	sub	r9, fp, #96	; 0x60
   32340:	ldr	r0, [sp, #48]	; 0x30
   32344:	add	r7, r7, #4
   32348:	str	r2, [r5, r8, lsl #2]
   3234c:	str	ip, [r9, r8, lsl #2]
   32350:	ldr	r6, [r6, r8, lsl #2]
   32354:	mla	r3, r6, r0, r3
   32358:	ldr	r0, [fp, #20]
   3235c:	ldr	r6, [sp, #60]	; 0x3c
   32360:	ldr	r0, [r0, r8, lsl #2]
   32364:	add	r8, r8, #1
   32368:	mul	r6, r0, r6
   3236c:	ldr	r0, [fp, #24]
   32370:	str	r6, [sp, #60]	; 0x3c
   32374:	cmp	r8, r0
   32378:	mov	r0, r2
   3237c:	mov	r2, lr
   32380:	mov	lr, r5
   32384:	bne	32254 <GetDataSlab+0x63d8>
   32388:	ldr	r0, [sp, #56]	; 0x38
   3238c:	ldr	r6, [sp, #32]
   32390:	add	sl, r0, r3, lsl #2
   32394:	cmp	r6, #1
   32398:	bne	42bb4 <GetDataSlab+0x16d38>
   3239c:	ldr	r0, [sp, #60]	; 0x3c
   323a0:	ldr	r2, [sp, #52]	; 0x34
   323a4:	sub	r1, fp, #96	; 0x60
   323a8:	cmp	r0, #1
   323ac:	ldr	r0, [fp, #12]
   323b0:	blt	51850 <GetDataSlab+0x259d4>
   323b4:	add	r8, r0, #4
   323b8:	ldr	r0, [fp, #20]
   323bc:	mov	r9, #0
   323c0:	mov	lr, #0
   323c4:	add	r6, r0, #4
   323c8:	sub	r0, fp, #136	; 0x88
   323cc:	orr	r5, r0, #4
   323d0:	orr	r0, r1, #4
   323d4:	str	r0, [sp, #40]	; 0x28
   323d8:	lsl	r0, r2, #2
   323dc:	str	r0, [sp, #56]	; 0x38
   323e0:	bic	r0, r2, #3
   323e4:	str	r0, [sp, #48]	; 0x30
   323e8:	ldr	r4, [sp, #68]	; 0x44
   323ec:	cmp	r2, #1
   323f0:	blt	32470 <GetDataSlab+0x65f4>
   323f4:	ldr	r0, [fp, #12]
   323f8:	ldr	r1, [sp, #52]	; 0x34
   323fc:	ldr	r0, [r0]
   32400:	cmp	r1, #4
   32404:	add	r7, sl, r0, lsl #2
   32408:	mov	r0, #0
   3240c:	bcc	32444 <GetDataSlab+0x65c8>
   32410:	ldr	r2, [sp, #48]	; 0x30
   32414:	mov	r1, r4
   32418:	mov	r0, r7
   3241c:	vld1.32	{d16-d17}, [r0]!
   32420:	subs	r2, r2, #4
   32424:	vcvt.f32.u32	q8, q8
   32428:	vst1.32	{d16-d17}, [r1]!
   3242c:	bne	3241c <GetDataSlab+0x65a0>
   32430:	ldr	r0, [sp, #52]	; 0x34
   32434:	ldr	r1, [sp, #48]	; 0x30
   32438:	cmp	r0, r1
   3243c:	mov	r0, r1
   32440:	beq	32470 <GetDataSlab+0x65f4>
   32444:	ldr	r1, [sp, #52]	; 0x34
   32448:	sub	r2, r1, r0
   3244c:	lsl	r1, r0, #2
   32450:	add	r0, r7, r1
   32454:	subs	r2, r2, #1
   32458:	vldr	s0, [r0]
   3245c:	add	r0, r4, r1
   32460:	add	r1, r1, #4
   32464:	vcvt.f32.u32	s0, s0
   32468:	vstr	s0, [r0]
   3246c:	bne	32450 <GetDataSlab+0x65d4>
   32470:	ldr	r0, [sp, #44]	; 0x2c
   32474:	add	sl, sl, r0, lsl #2
   32478:	add	r3, r3, r0
   3247c:	ldr	r0, [fp, #24]
   32480:	cmp	r0, #2
   32484:	blt	32534 <GetDataSlab+0x66b8>
   32488:	mov	r1, #0
   3248c:	mov	r0, r1
   32490:	ldr	r1, [r5, r1, lsl #2]
   32494:	add	r1, r1, #1
   32498:	str	r1, [r5, r0, lsl #2]
   3249c:	ldr	r2, [r6, r0, lsl #2]
   324a0:	sdiv	r7, r1, r2
   324a4:	mls	r1, r7, r2, r1
   324a8:	cmp	r1, #0
   324ac:	bne	32524 <GetDataSlab+0x66a8>
   324b0:	sub	r7, fp, #176	; 0xb0
   324b4:	str	r9, [r5, r0, lsl #2]
   324b8:	add	r1, r7, r0, lsl #2
   324bc:	ldr	r1, [r1, #4]
   324c0:	sdiv	r2, r3, r1
   324c4:	mls	r2, r2, r1, r3
   324c8:	cmp	r2, #0
   324cc:	beq	324ec <GetDataSlab+0x6670>
   324d0:	ldr	r7, [r7, r0, lsl #2]
   324d4:	ldr	ip, [r8, r0, lsl #2]
   324d8:	ldr	r4, [sp, #68]	; 0x44
   324dc:	sub	r1, r1, r2
   324e0:	mla	r1, ip, r7, r1
   324e4:	add	r3, r1, r3
   324e8:	b	32508 <GetDataSlab+0x668c>
   324ec:	ldr	r1, [r8, r0, lsl #2]
   324f0:	cmp	r1, #0
   324f4:	beq	3250c <GetDataSlab+0x6690>
   324f8:	sub	r2, fp, #176	; 0xb0
   324fc:	ldr	r2, [r2, r0, lsl #2]
   32500:	mla	r3, r2, r1, r3
   32504:	mul	r1, r2, r1
   32508:	add	sl, sl, r1, lsl #2
   3250c:	ldr	r2, [fp, #24]
   32510:	add	r1, r0, #1
   32514:	add	r0, r0, #2
   32518:	cmp	r0, r2
   3251c:	blt	3248c <GetDataSlab+0x6610>
   32520:	b	32534 <GetDataSlab+0x66b8>
   32524:	ldr	r1, [sp, #40]	; 0x28
   32528:	ldr	r0, [r1, r0, lsl #2]
   3252c:	add	sl, sl, r0, lsl #2
   32530:	add	r3, r0, r3
   32534:	ldr	r2, [sp, #52]	; 0x34
   32538:	ldr	r0, [sp, #56]	; 0x38
   3253c:	ldr	r1, [sp, #60]	; 0x3c
   32540:	add	lr, lr, r2
   32544:	add	r4, r4, r0
   32548:	mov	r0, #0
   3254c:	cmp	lr, r1
   32550:	str	r4, [sp, #68]	; 0x44
   32554:	blt	323e8 <GetDataSlab+0x656c>
   32558:	b	2e97c <GetDataSlab+0x2b00>
   3255c:	ldr	r0, [fp, #16]
   32560:	ldr	r9, [fp, #8]
   32564:	mov	sl, r6
   32568:	mov	r2, #0
   3256c:	ldr	r0, [r0]
   32570:	str	r0, [sp, #36]	; 0x24
   32574:	sub	r0, r0, #1
   32578:	str	r0, [fp, #-96]	; 0xffffffa0
   3257c:	ldr	r0, [r9]
   32580:	str	r0, [fp, #-176]	; 0xffffff50
   32584:	str	r0, [sp, #44]	; 0x2c
   32588:	ldr	r0, [fp, #24]
   3258c:	ldr	sl, [r6]
   32590:	sub	r6, fp, #96	; 0x60
   32594:	cmp	r0, #2
   32598:	str	sl, [sp, #60]	; 0x3c
   3259c:	blt	326fc <GetDataSlab+0x6880>
   325a0:	ldr	r3, [sp, #44]	; 0x2c
   325a4:	mov	r5, lr
   325a8:	sub	r7, r9, #4
   325ac:	sub	ip, r9, #12
   325b0:	mov	r4, #1
   325b4:	mov	r0, #0
   325b8:	mvn	lr, #15
   325bc:	mov	r2, #0
   325c0:	str	sl, [sp, #60]	; 0x3c
   325c4:	mov	r1, r3
   325c8:	str	r1, [sp, #52]	; 0x34
   325cc:	ldr	r1, [fp, #16]
   325d0:	add	r0, r0, #1
   325d4:	cmp	r0, #4
   325d8:	ldr	r1, [r1, r4, lsl #2]
   325dc:	str	r3, [r5, r4, lsl #2]
   325e0:	sub	r1, r1, #1
   325e4:	str	r1, [r6, r4, lsl #2]
   325e8:	ldr	r6, [r9, r4, lsl #2]
   325ec:	str	r6, [sp, #48]	; 0x30
   325f0:	bcs	325fc <GetDataSlab+0x6780>
   325f4:	mov	r5, r4
   325f8:	b	32690 <GetDataSlab+0x6814>
   325fc:	vmov.i32	q9, #1	; 0x00000001
   32600:	vmov.i32	q10, #1	; 0x00000001
   32604:	vmov.i32	q8, #1	; 0x00000001
   32608:	bic	r8, r0, #3
   3260c:	bic	r9, r4, #3
   32610:	vmov.32	d23[1], r6
   32614:	vmov.32	d18[0], r3
   32618:	vmov.32	d20[0], r1
   3261c:	sub	r5, r4, r8
   32620:	mov	r1, ip
   32624:	vorr	d16, d18, d18
   32628:	vmov.i32	q9, #1	; 0x00000001
   3262c:	vorr	d18, d20, d20
   32630:	vld1.32	{d20-d21}, [r1], lr
   32634:	subs	r9, r9, #4
   32638:	vrev64.32	q12, q10
   3263c:	vext.8	q12, q12, q12, #8
   32640:	vext.8	q11, q11, q12, #12
   32644:	vmul.i32	q9, q9, q12
   32648:	vmul.i32	q8, q11, q8
   3264c:	vorr	q11, q12, q12
   32650:	bne	32630 <GetDataSlab+0x67b4>
   32654:	vext.8	q11, q9, q8, #8
   32658:	vext.8	q12, q8, q8, #8
   3265c:	cmp	r0, r8
   32660:	vmul.i32	q0, q9, q11
   32664:	vmul.i32	q1, q8, q12
   32668:	vmul.i32	q8, q0, d0[1]
   3266c:	vmul.i32	q9, q1, d2[1]
   32670:	vmov.32	r1, d16[0]
   32674:	vmov.32	r3, d18[0]
   32678:	bne	32688 <GetDataSlab+0x680c>
   3267c:	ldr	r9, [fp, #8]
   32680:	mov	r8, r0
   32684:	b	326a8 <GetDataSlab+0x682c>
   32688:	ldr	r9, [fp, #8]
   3268c:	vmov.32	r6, d20[0]
   32690:	mov	r8, r0
   32694:	mul	r3, r6, r3
   32698:	ldr	r6, [r7, r5, lsl #2]
   3269c:	subs	r5, r5, #1
   326a0:	mul	r1, r1, r6
   326a4:	bne	32694 <GetDataSlab+0x6818>
   326a8:	sub	r6, fp, #96	; 0x60
   326ac:	sub	r5, fp, #176	; 0xb0
   326b0:	ldr	r0, [sp, #52]	; 0x34
   326b4:	add	ip, ip, #4
   326b8:	str	r1, [r6, r4, lsl #2]
   326bc:	ldr	r1, [fp, #12]
   326c0:	str	r3, [r5, r4, lsl #2]
   326c4:	ldr	r1, [r1, r4, lsl #2]
   326c8:	mla	r2, r1, r0, r2
   326cc:	ldr	r1, [fp, #20]
   326d0:	ldr	r0, [sp, #60]	; 0x3c
   326d4:	ldr	r1, [r1, r4, lsl #2]
   326d8:	add	r4, r4, #1
   326dc:	mul	r0, r1, r0
   326e0:	ldr	r1, [fp, #24]
   326e4:	str	r0, [sp, #60]	; 0x3c
   326e8:	mov	r0, r8
   326ec:	cmp	r4, r1
   326f0:	mov	r1, r3
   326f4:	ldr	r3, [sp, #48]	; 0x30
   326f8:	bne	325c8 <GetDataSlab+0x674c>
   326fc:	ldr	r0, [sp, #56]	; 0x38
   32700:	ldr	r3, [sp, #36]	; 0x24
   32704:	add	lr, r0, r2, lsl #2
   32708:	cmp	r3, #1
   3270c:	bne	42d54 <GetDataSlab+0x16ed8>
   32710:	ldr	r0, [sp, #60]	; 0x3c
   32714:	ldr	ip, [sp, #68]	; 0x44
   32718:	ldr	r9, [fp, #12]
   3271c:	cmp	r0, #1
   32720:	blt	51864 <GetDataSlab+0x259e8>
   32724:	ldr	r0, [r9], #4
   32728:	str	r0, [sp, #48]	; 0x30
   3272c:	add	r0, sl, r0
   32730:	str	r0, [sp, #40]	; 0x28
   32734:	ldr	r0, [fp, #20]
   32738:	add	r6, r0, #4
   3273c:	sub	r0, fp, #136	; 0x88
   32740:	orr	r7, r0, #4
   32744:	sub	r0, fp, #96	; 0x60
   32748:	orr	r0, r0, #4
   3274c:	str	r0, [sp, #32]
   32750:	bic	r0, sl, #3
   32754:	str	r0, [sp, #36]	; 0x24
   32758:	lsl	r0, sl, #2
   3275c:	str	r0, [sp, #52]	; 0x34
   32760:	mov	r0, #0
   32764:	str	r0, [sp, #64]	; 0x40
   32768:	mov	r0, #0
   3276c:	str	r0, [sp, #56]	; 0x38
   32770:	cmp	sl, #1
   32774:	mov	r4, r9
   32778:	blt	32810 <GetDataSlab+0x6994>
   3277c:	ldr	r0, [sp, #48]	; 0x30
   32780:	mov	r1, #0
   32784:	cmp	sl, #4
   32788:	add	r5, lr, r0, lsl #2
   3278c:	bcc	327fc <GetDataSlab+0x6980>
   32790:	mov	r8, r6
   32794:	ldr	r0, [sp, #68]	; 0x44
   32798:	ldr	r3, [sp, #52]	; 0x34
   3279c:	ldr	r6, [sp, #64]	; 0x40
   327a0:	mla	r0, r3, r6, r0
   327a4:	ldr	r3, [sp, #40]	; 0x28
   327a8:	mov	r6, r8
   327ac:	add	r3, lr, r3, lsl #2
   327b0:	cmp	r0, r3
   327b4:	bcs	327d4 <GetDataSlab+0x6958>
   327b8:	ldr	r0, [sp, #52]	; 0x34
   327bc:	ldr	r3, [sp, #64]	; 0x40
   327c0:	mla	r0, r0, r3, r0
   327c4:	ldr	r3, [sp, #68]	; 0x44
   327c8:	add	r0, r3, r0
   327cc:	cmp	r0, r5
   327d0:	bhi	327fc <GetDataSlab+0x6980>
   327d4:	ldr	r1, [sp, #36]	; 0x24
   327d8:	mov	r3, ip
   327dc:	mov	r0, r5
   327e0:	vld1.32	{d16-d17}, [r0]!
   327e4:	subs	r1, r1, #4
   327e8:	vst1.32	{d16-d17}, [r3]!
   327ec:	bne	327e0 <GetDataSlab+0x6964>
   327f0:	ldr	r1, [sp, #36]	; 0x24
   327f4:	cmp	sl, r1
   327f8:	beq	32810 <GetDataSlab+0x6994>
   327fc:	ldr	r0, [r5, r1, lsl #2]
   32800:	str	r0, [ip, r1, lsl #2]
   32804:	add	r1, r1, #1
   32808:	cmp	sl, r1
   3280c:	bne	327fc <GetDataSlab+0x6980>
   32810:	ldr	r0, [sp, #44]	; 0x2c
   32814:	add	lr, lr, r0, lsl #2
   32818:	add	r2, r2, r0
   3281c:	ldr	r0, [fp, #24]
   32820:	cmp	r0, #2
   32824:	blt	328d8 <GetDataSlab+0x6a5c>
   32828:	mov	r1, #0
   3282c:	mov	r0, r1
   32830:	ldr	r1, [r7, r1, lsl #2]
   32834:	add	r1, r1, #1
   32838:	str	r1, [r7, r0, lsl #2]
   3283c:	ldr	r3, [r6, r0, lsl #2]
   32840:	sdiv	r5, r1, r3
   32844:	mls	r1, r5, r3, r1
   32848:	cmp	r1, #0
   3284c:	bne	328c8 <GetDataSlab+0x6a4c>
   32850:	mov	r1, #0
   32854:	sub	r5, fp, #176	; 0xb0
   32858:	str	r1, [r7, r0, lsl #2]
   3285c:	add	r1, r5, r0, lsl #2
   32860:	ldr	r1, [r1, #4]
   32864:	sdiv	r3, r2, r1
   32868:	mls	r3, r3, r1, r2
   3286c:	cmp	r3, #0
   32870:	beq	32890 <GetDataSlab+0x6a14>
   32874:	ldr	r5, [r5, r0, lsl #2]
   32878:	ldr	r8, [r9, r0, lsl #2]
   3287c:	sub	r1, r1, r3
   32880:	mov	r4, r9
   32884:	mla	r1, r8, r5, r1
   32888:	add	r2, r1, r2
   3288c:	b	328ac <GetDataSlab+0x6a30>
   32890:	ldr	r1, [r4, r0, lsl #2]
   32894:	cmp	r1, #0
   32898:	beq	328b0 <GetDataSlab+0x6a34>
   3289c:	sub	r3, fp, #176	; 0xb0
   328a0:	ldr	r3, [r3, r0, lsl #2]
   328a4:	mla	r2, r3, r1, r2
   328a8:	mul	r1, r3, r1
   328ac:	add	lr, lr, r1, lsl #2
   328b0:	ldr	r3, [fp, #24]
   328b4:	add	r1, r0, #1
   328b8:	add	r0, r0, #2
   328bc:	cmp	r0, r3
   328c0:	blt	3282c <GetDataSlab+0x69b0>
   328c4:	b	328d8 <GetDataSlab+0x6a5c>
   328c8:	ldr	r1, [sp, #32]
   328cc:	ldr	r0, [r1, r0, lsl #2]
   328d0:	add	lr, lr, r0, lsl #2
   328d4:	add	r2, r0, r2
   328d8:	ldr	r0, [sp, #52]	; 0x34
   328dc:	ldr	r3, [sp, #56]	; 0x38
   328e0:	ldr	r1, [sp, #60]	; 0x3c
   328e4:	add	ip, ip, r0
   328e8:	ldr	r0, [sp, #64]	; 0x40
   328ec:	add	r3, r3, sl
   328f0:	cmp	r3, r1
   328f4:	str	r3, [sp, #56]	; 0x38
   328f8:	add	r0, r0, #1
   328fc:	str	r0, [sp, #64]	; 0x40
   32900:	mov	r0, #0
   32904:	blt	32770 <GetDataSlab+0x68f4>
   32908:	b	2e97c <GetDataSlab+0x2b00>
   3290c:	ldr	r0, [fp, #16]
   32910:	ldr	r9, [fp, #8]
   32914:	mov	sl, r6
   32918:	mov	r2, #0
   3291c:	sub	ip, fp, #96	; 0x60
   32920:	ldr	r0, [r0]
   32924:	str	r0, [sp, #36]	; 0x24
   32928:	sub	r0, r0, #1
   3292c:	str	r0, [fp, #-96]	; 0xffffffa0
   32930:	ldr	r0, [r9]
   32934:	str	r0, [fp, #-176]	; 0xffffff50
   32938:	str	r0, [sp, #40]	; 0x28
   3293c:	ldr	r0, [fp, #24]
   32940:	ldr	r1, [r6]
   32944:	cmp	r0, #2
   32948:	str	r1, [sp, #52]	; 0x34
   3294c:	str	r1, [sp, #60]	; 0x3c
   32950:	blt	32aa8 <GetDataSlab+0x6c2c>
   32954:	ldr	r3, [sp, #40]	; 0x28
   32958:	mov	r5, lr
   3295c:	sub	r7, r9, #4
   32960:	sub	lr, r9, #12
   32964:	mov	r4, #1
   32968:	mov	r8, #0
   3296c:	mvn	r0, #15
   32970:	mov	r2, #0
   32974:	mov	r1, r3
   32978:	str	r3, [sp, #48]	; 0x30
   3297c:	ldr	r1, [sp, #52]	; 0x34
   32980:	str	r1, [sp, #60]	; 0x3c
   32984:	ldr	r1, [fp, #16]
   32988:	add	r8, r8, #1
   3298c:	cmp	r8, #4
   32990:	ldr	r1, [r1, r4, lsl #2]
   32994:	str	r3, [r5, r4, lsl #2]
   32998:	sub	sl, r1, #1
   3299c:	str	sl, [ip, r4, lsl #2]
   329a0:	ldr	r1, [r9, r4, lsl #2]
   329a4:	str	r1, [sp, #44]	; 0x2c
   329a8:	bcs	329b4 <GetDataSlab+0x6b38>
   329ac:	mov	r5, r4
   329b0:	b	32a44 <GetDataSlab+0x6bc8>
   329b4:	vmov.i32	q9, #1	; 0x00000001
   329b8:	vmov.i32	q10, #1	; 0x00000001
   329bc:	vmov.i32	q8, #1	; 0x00000001
   329c0:	bic	ip, r8, #3
   329c4:	bic	r9, r4, #3
   329c8:	vmov.32	d23[1], r1
   329cc:	vmov.32	d18[0], r3
   329d0:	vmov.32	d20[0], sl
   329d4:	sub	r5, r4, ip
   329d8:	mov	r3, lr
   329dc:	vorr	d16, d18, d18
   329e0:	vmov.i32	q9, #1	; 0x00000001
   329e4:	vorr	d18, d20, d20
   329e8:	vld1.32	{d20-d21}, [r3], r0
   329ec:	subs	r9, r9, #4
   329f0:	vrev64.32	q12, q10
   329f4:	vext.8	q12, q12, q12, #8
   329f8:	vext.8	q11, q11, q12, #12
   329fc:	vmul.i32	q9, q9, q12
   32a00:	vmul.i32	q8, q11, q8
   32a04:	vorr	q11, q12, q12
   32a08:	bne	329e8 <GetDataSlab+0x6b6c>
   32a0c:	vext.8	q11, q9, q8, #8
   32a10:	vext.8	q12, q8, q8, #8
   32a14:	cmp	r8, ip
   32a18:	vmul.i32	q0, q9, q11
   32a1c:	vmul.i32	q1, q8, q12
   32a20:	vmul.i32	q8, q0, d0[1]
   32a24:	vmul.i32	q9, q1, d2[1]
   32a28:	vmov.32	sl, d16[0]
   32a2c:	vmov.32	r3, d18[0]
   32a30:	bne	32a3c <GetDataSlab+0x6bc0>
   32a34:	ldr	r9, [fp, #8]
   32a38:	b	32a58 <GetDataSlab+0x6bdc>
   32a3c:	ldr	r9, [fp, #8]
   32a40:	vmov.32	r1, d20[0]
   32a44:	mul	r3, r1, r3
   32a48:	ldr	r1, [r7, r5, lsl #2]
   32a4c:	subs	r5, r5, #1
   32a50:	mul	sl, sl, r1
   32a54:	bne	32a44 <GetDataSlab+0x6bc8>
   32a58:	ldr	r1, [fp, #12]
   32a5c:	sub	r5, fp, #176	; 0xb0
   32a60:	sub	ip, fp, #96	; 0x60
   32a64:	ldr	r6, [sp, #48]	; 0x30
   32a68:	str	r3, [sp, #48]	; 0x30
   32a6c:	add	lr, lr, #4
   32a70:	str	r3, [r5, r4, lsl #2]
   32a74:	str	sl, [ip, r4, lsl #2]
   32a78:	ldr	sl, [fp, #20]
   32a7c:	ldr	r3, [sp, #44]	; 0x2c
   32a80:	ldr	r1, [r1, r4, lsl #2]
   32a84:	mla	r2, r1, r6, r2
   32a88:	ldr	r1, [sl, r4, lsl #2]
   32a8c:	ldr	r6, [sp, #60]	; 0x3c
   32a90:	add	r4, r4, #1
   32a94:	mul	r6, r1, r6
   32a98:	ldr	r1, [fp, #24]
   32a9c:	str	r6, [sp, #60]	; 0x3c
   32aa0:	cmp	r4, r1
   32aa4:	bne	32984 <GetDataSlab+0x6b08>
   32aa8:	ldr	r0, [sp, #56]	; 0x38
   32aac:	ldr	r1, [sp, #36]	; 0x24
   32ab0:	add	r9, r0, r2, lsl #3
   32ab4:	cmp	r1, #1
   32ab8:	bne	42edc <GetDataSlab+0x17060>
   32abc:	ldr	r0, [sp, #60]	; 0x3c
   32ac0:	ldr	lr, [fp, #12]
   32ac4:	ldr	r1, [sp, #52]	; 0x34
   32ac8:	cmp	r0, #1
   32acc:	blt	51878 <GetDataSlab+0x259fc>
   32ad0:	sub	r0, fp, #136	; 0x88
   32ad4:	add	r7, sl, #4
   32ad8:	mov	sl, #0
   32adc:	mov	ip, #0
   32ae0:	orr	r6, r0, #4
   32ae4:	sub	r0, fp, #96	; 0x60
   32ae8:	orr	r0, r0, #4
   32aec:	str	r0, [sp, #44]	; 0x2c
   32af0:	lsl	r0, r1, #2
   32af4:	str	r0, [sp, #56]	; 0x38
   32af8:	bic	r0, r1, #1
   32afc:	str	r0, [sp, #48]	; 0x30
   32b00:	ldr	r0, [lr], #4
   32b04:	str	r0, [sp, #64]	; 0x40
   32b08:	cmp	r1, #1
   32b0c:	mov	r4, lr
   32b10:	blt	32b8c <GetDataSlab+0x6d10>
   32b14:	mov	r3, #0
   32b18:	beq	32b54 <GetDataSlab+0x6cd8>
   32b1c:	ldr	r0, [sp, #64]	; 0x40
   32b20:	ldr	r3, [sp, #48]	; 0x30
   32b24:	ldr	r1, [sp, #68]	; 0x44
   32b28:	add	r0, r9, r0, lsl #3
   32b2c:	vld1.64	{d16-d17}, [r0]!
   32b30:	subs	r3, r3, #2
   32b34:	vcvt.f32.f64	s1, d17
   32b38:	vcvt.f32.f64	s0, d16
   32b3c:	vst1.32	{d0}, [r1]!
   32b40:	bne	32b2c <GetDataSlab+0x6cb0>
   32b44:	ldr	r0, [sp, #52]	; 0x34
   32b48:	ldr	r3, [sp, #48]	; 0x30
   32b4c:	cmp	r0, r3
   32b50:	beq	32b8c <GetDataSlab+0x6d10>
   32b54:	ldr	r5, [sp, #64]	; 0x40
   32b58:	ldr	r0, [sp, #52]	; 0x34
   32b5c:	ldr	r1, [sp, #68]	; 0x44
   32b60:	add	r5, r9, r5, lsl #3
   32b64:	sub	r0, r0, r3
   32b68:	add	r1, r1, r3, lsl #2
   32b6c:	add	r3, r5, r3, lsl #3
   32b70:	vldr	d16, [r3]
   32b74:	subs	r0, r0, #1
   32b78:	add	r3, r3, #8
   32b7c:	vcvt.f32.f64	s0, d16
   32b80:	vstr	s0, [r1]
   32b84:	add	r1, r1, #4
   32b88:	bne	32b70 <GetDataSlab+0x6cf4>
   32b8c:	ldr	r0, [sp, #40]	; 0x28
   32b90:	add	r9, r9, r0, lsl #3
   32b94:	add	r2, r2, r0
   32b98:	ldr	r0, [fp, #24]
   32b9c:	cmp	r0, #2
   32ba0:	blt	32c50 <GetDataSlab+0x6dd4>
   32ba4:	mov	r1, #0
   32ba8:	mov	r0, r1
   32bac:	ldr	r1, [r6, r1, lsl #2]
   32bb0:	add	r1, r1, #1
   32bb4:	str	r1, [r6, r0, lsl #2]
   32bb8:	ldr	r3, [r7, r0, lsl #2]
   32bbc:	sdiv	r5, r1, r3
   32bc0:	mls	r1, r5, r3, r1
   32bc4:	cmp	r1, #0
   32bc8:	bne	32c40 <GetDataSlab+0x6dc4>
   32bcc:	sub	r5, fp, #176	; 0xb0
   32bd0:	str	sl, [r6, r0, lsl #2]
   32bd4:	add	r1, r5, r0, lsl #2
   32bd8:	ldr	r1, [r1, #4]
   32bdc:	sdiv	r3, r2, r1
   32be0:	mls	r3, r3, r1, r2
   32be4:	cmp	r3, #0
   32be8:	beq	32c08 <GetDataSlab+0x6d8c>
   32bec:	ldr	r5, [r5, r0, lsl #2]
   32bf0:	ldr	r8, [lr, r0, lsl #2]
   32bf4:	sub	r1, r1, r3
   32bf8:	mov	r4, lr
   32bfc:	mla	r1, r8, r5, r1
   32c00:	add	r2, r1, r2
   32c04:	b	32c24 <GetDataSlab+0x6da8>
   32c08:	ldr	r1, [r4, r0, lsl #2]
   32c0c:	cmp	r1, #0
   32c10:	beq	32c28 <GetDataSlab+0x6dac>
   32c14:	sub	r3, fp, #176	; 0xb0
   32c18:	ldr	r3, [r3, r0, lsl #2]
   32c1c:	mla	r2, r3, r1, r2
   32c20:	mul	r1, r3, r1
   32c24:	add	r9, r9, r1, lsl #3
   32c28:	ldr	r3, [fp, #24]
   32c2c:	add	r1, r0, #1
   32c30:	add	r0, r0, #2
   32c34:	cmp	r0, r3
   32c38:	blt	32ba8 <GetDataSlab+0x6d2c>
   32c3c:	b	32c50 <GetDataSlab+0x6dd4>
   32c40:	ldr	r1, [sp, #44]	; 0x2c
   32c44:	ldr	r0, [r1, r0, lsl #2]
   32c48:	add	r9, r9, r0, lsl #3
   32c4c:	add	r2, r0, r2
   32c50:	ldr	r0, [sp, #68]	; 0x44
   32c54:	ldr	r1, [sp, #56]	; 0x38
   32c58:	ldr	r3, [sp, #60]	; 0x3c
   32c5c:	add	r0, r0, r1
   32c60:	ldr	r1, [sp, #52]	; 0x34
   32c64:	str	r0, [sp, #68]	; 0x44
   32c68:	mov	r0, #0
   32c6c:	add	ip, ip, r1
   32c70:	cmp	ip, r3
   32c74:	blt	32b08 <GetDataSlab+0x6c8c>
   32c78:	b	2e97c <GetDataSlab+0x2b00>
   32c7c:	ldr	r0, [fp, #16]
   32c80:	mov	r4, #0
   32c84:	sub	r8, fp, #96	; 0x60
   32c88:	str	r9, [sp, #40]	; 0x28
   32c8c:	ldr	r0, [r0]
   32c90:	str	r0, [sp, #44]	; 0x2c
   32c94:	sub	r0, r0, #1
   32c98:	str	r0, [fp, #-96]	; 0xffffffa0
   32c9c:	ldr	r0, [fp, #8]
   32ca0:	ldr	r0, [r0]
   32ca4:	str	r0, [fp, #-176]	; 0xffffff50
   32ca8:	str	r0, [sp, #16]
   32cac:	ldr	r0, [fp, #24]
   32cb0:	ldr	r1, [r6]
   32cb4:	cmp	r0, #2
   32cb8:	mov	ip, r1
   32cbc:	str	r1, [sp, #36]	; 0x24
   32cc0:	blt	32e20 <GetDataSlab+0x6fa4>
   32cc4:	ldr	r0, [fp, #8]
   32cc8:	ldr	ip, [sp, #36]	; 0x24
   32ccc:	mov	r7, #1
   32cd0:	mov	r3, #0
   32cd4:	mvn	r6, #15
   32cd8:	mov	r4, #0
   32cdc:	sub	r1, r0, #4
   32ce0:	sub	sl, r0, #12
   32ce4:	ldr	r0, [sp, #16]
   32ce8:	mov	r9, r0
   32cec:	ldr	r2, [fp, #16]
   32cf0:	add	r3, r3, #1
   32cf4:	cmp	r3, #4
   32cf8:	str	r3, [sp, #60]	; 0x3c
   32cfc:	ldr	r2, [r2, r7, lsl #2]
   32d00:	str	r0, [lr, r7, lsl #2]
   32d04:	sub	r5, r2, #1
   32d08:	ldr	r2, [fp, #8]
   32d0c:	str	r5, [r8, r7, lsl #2]
   32d10:	ldr	lr, [r2, r7, lsl #2]
   32d14:	bcs	32d24 <GetDataSlab+0x6ea8>
   32d18:	mov	r2, lr
   32d1c:	mov	r3, r7
   32d20:	b	32dbc <GetDataSlab+0x6f40>
   32d24:	vmov.i32	q9, #1	; 0x00000001
   32d28:	vmov.i32	q10, #1	; 0x00000001
   32d2c:	vmov.i32	q8, #1	; 0x00000001
   32d30:	bic	r8, r3, #3
   32d34:	str	ip, [sp, #48]	; 0x30
   32d38:	bic	ip, r7, #3
   32d3c:	vmov.32	d23[1], lr
   32d40:	vmov.32	d18[0], r0
   32d44:	vmov.32	d20[0], r5
   32d48:	sub	r3, r7, r8
   32d4c:	mov	r0, sl
   32d50:	vorr	d16, d18, d18
   32d54:	vmov.i32	q9, #1	; 0x00000001
   32d58:	vorr	d18, d20, d20
   32d5c:	vld1.32	{d20-d21}, [r0], r6
   32d60:	subs	ip, ip, #4
   32d64:	vrev64.32	q12, q10
   32d68:	vext.8	q12, q12, q12, #8
   32d6c:	vext.8	q11, q11, q12, #12
   32d70:	vmul.i32	q9, q9, q12
   32d74:	vmul.i32	q8, q11, q8
   32d78:	vorr	q11, q12, q12
   32d7c:	bne	32d5c <GetDataSlab+0x6ee0>
   32d80:	ldr	r2, [sp, #60]	; 0x3c
   32d84:	vext.8	q11, q9, q8, #8
   32d88:	vext.8	q12, q8, q8, #8
   32d8c:	vmul.i32	q0, q9, q11
   32d90:	vmul.i32	q1, q8, q12
   32d94:	vmul.i32	q8, q0, d0[1]
   32d98:	vmul.i32	q9, q1, d2[1]
   32d9c:	vmov.32	r5, d16[0]
   32da0:	vmov.32	r0, d18[0]
   32da4:	cmp	r2, r8
   32da8:	bne	32db4 <GetDataSlab+0x6f38>
   32dac:	ldr	ip, [sp, #48]	; 0x30
   32db0:	b	32dd0 <GetDataSlab+0x6f54>
   32db4:	ldr	ip, [sp, #48]	; 0x30
   32db8:	vmov.32	r2, d20[0]
   32dbc:	mul	r0, r2, r0
   32dc0:	ldr	r2, [r1, r3, lsl #2]
   32dc4:	subs	r3, r3, #1
   32dc8:	mul	r5, r5, r2
   32dcc:	bne	32dbc <GetDataSlab+0x6f40>
   32dd0:	sub	r2, fp, #176	; 0xb0
   32dd4:	sub	r8, fp, #96	; 0x60
   32dd8:	add	sl, sl, #4
   32ddc:	mov	r3, r2
   32de0:	str	r0, [r2, r7, lsl #2]
   32de4:	ldr	r2, [fp, #12]
   32de8:	str	r5, [r8, r7, lsl #2]
   32dec:	ldr	r2, [r2, r7, lsl #2]
   32df0:	mla	r4, r2, r9, r4
   32df4:	ldr	r2, [fp, #20]
   32df8:	mov	r9, r0
   32dfc:	mov	r0, lr
   32e00:	mov	lr, r3
   32e04:	ldr	r3, [sp, #60]	; 0x3c
   32e08:	ldr	r2, [r2, r7, lsl #2]
   32e0c:	add	r7, r7, #1
   32e10:	mul	ip, r2, ip
   32e14:	ldr	r2, [fp, #24]
   32e18:	cmp	r7, r2
   32e1c:	bne	32cec <GetDataSlab+0x6e70>
   32e20:	ldr	r0, [sp, #56]	; 0x38
   32e24:	ldr	r3, [sp, #44]	; 0x2c
   32e28:	str	ip, [sp, #48]	; 0x30
   32e2c:	add	sl, r0, r4, lsl #3
   32e30:	cmp	r3, #1
   32e34:	bne	43070 <GetDataSlab+0x171f4>
   32e38:	ldr	r0, [fp, #12]
   32e3c:	ldr	lr, [sp, #36]	; 0x24
   32e40:	cmp	ip, #1
   32e44:	sub	r2, fp, #96	; 0x60
   32e48:	blt	43238 <GetDataSlab+0x173bc>
   32e4c:	ldr	r1, [fp, #20]
   32e50:	ldr	r8, [sp, #16]
   32e54:	add	r5, r1, #4
   32e58:	sub	r1, fp, #136	; 0x88
   32e5c:	orr	r9, r1, #4
   32e60:	orr	r1, r2, #4
   32e64:	str	r5, [sp, #20]
   32e68:	str	r1, [sp, #12]
   32e6c:	lsl	r1, lr, #2
   32e70:	str	r1, [sp, #32]
   32e74:	bic	r1, lr, #1
   32e78:	str	r1, [sp, #24]
   32e7c:	ldr	r1, [r0], #4
   32e80:	str	r0, [sp, #60]	; 0x3c
   32e84:	ldr	r0, [sp, #68]	; 0x44
   32e88:	str	r1, [sp, #28]
   32e8c:	str	r0, [sp, #52]	; 0x34
   32e90:	mov	r0, #0
   32e94:	cmp	lr, #1
   32e98:	str	r0, [sp, #44]	; 0x2c
   32e9c:	blt	32f38 <GetDataSlab+0x70bc>
   32ea0:	mov	r0, #0
   32ea4:	beq	32f04 <GetDataSlab+0x7088>
   32ea8:	ldr	r0, [sp, #28]
   32eac:	ldr	r7, [sp, #24]
   32eb0:	ldr	r6, [sp, #52]	; 0x34
   32eb4:	add	r8, sl, r0, lsl #3
   32eb8:	vld1.64	{d8-d9}, [r8]!
   32ebc:	vmov.32	r0, d9[0]
   32ec0:	vmov.32	r1, d9[1]
   32ec4:	bl	5f2c8 <__aeabi_l2f>
   32ec8:	vmov.32	r2, d8[0]
   32ecc:	vmov.32	r1, d8[1]
   32ed0:	vmov	s17, r0
   32ed4:	mov	r0, r2
   32ed8:	bl	5f2c8 <__aeabi_l2f>
   32edc:	vmov	s16, r0
   32ee0:	subs	r7, r7, #2
   32ee4:	vst1.32	{d8}, [r6]!
   32ee8:	bne	32eb8 <GetDataSlab+0x703c>
   32eec:	ldr	r0, [sp, #36]	; 0x24
   32ef0:	ldr	r1, [sp, #24]
   32ef4:	ldr	r8, [sp, #16]
   32ef8:	cmp	r0, r1
   32efc:	mov	r0, r1
   32f00:	beq	32f38 <GetDataSlab+0x70bc>
   32f04:	ldr	r1, [sp, #36]	; 0x24
   32f08:	sub	r6, r1, r0
   32f0c:	ldr	r1, [sp, #52]	; 0x34
   32f10:	add	r7, r1, r0, lsl #2
   32f14:	ldr	r1, [sp, #28]
   32f18:	add	r1, sl, r1, lsl #3
   32f1c:	add	r5, r1, r0, lsl #3
   32f20:	ldrd	r0, [r5]
   32f24:	bl	5f2c8 <__aeabi_l2f>
   32f28:	str	r0, [r7], #4
   32f2c:	subs	r6, r6, #1
   32f30:	add	r5, r5, #8
   32f34:	bne	32f20 <GetDataSlab+0x70a4>
   32f38:	ldr	r0, [fp, #24]
   32f3c:	add	sl, sl, r8, lsl #3
   32f40:	add	r4, r4, r8
   32f44:	cmp	r0, #2
   32f48:	blt	32ff8 <GetDataSlab+0x717c>
   32f4c:	ldr	lr, [sp, #36]	; 0x24
   32f50:	ldr	ip, [sp, #48]	; 0x30
   32f54:	ldr	r5, [sp, #20]
   32f58:	mov	r1, #0
   32f5c:	sub	r6, fp, #176	; 0xb0
   32f60:	mov	r0, r1
   32f64:	ldr	r1, [r9, r1, lsl #2]
   32f68:	add	r1, r1, #1
   32f6c:	str	r1, [r9, r0, lsl #2]
   32f70:	ldr	r2, [r5, r0, lsl #2]
   32f74:	sdiv	r3, r1, r2
   32f78:	mls	r1, r3, r2, r1
   32f7c:	cmp	r1, #0
   32f80:	bne	33004 <GetDataSlab+0x7188>
   32f84:	mov	r1, #0
   32f88:	str	r1, [r9, r0, lsl #2]
   32f8c:	add	r1, r6, r0, lsl #2
   32f90:	ldr	r1, [r1, #4]
   32f94:	sdiv	r2, r4, r1
   32f98:	mls	r2, r2, r1, r4
   32f9c:	cmp	r2, #0
   32fa0:	beq	32fc0 <GetDataSlab+0x7144>
   32fa4:	ldr	r7, [sp, #60]	; 0x3c
   32fa8:	ldr	r3, [r6, r0, lsl #2]
   32fac:	sub	r1, r1, r2
   32fb0:	ldr	r7, [r7, r0, lsl #2]
   32fb4:	mla	r1, r7, r3, r1
   32fb8:	add	r4, r1, r4
   32fbc:	b	32fdc <GetDataSlab+0x7160>
   32fc0:	ldr	r1, [sp, #60]	; 0x3c
   32fc4:	ldr	r1, [r1, r0, lsl #2]
   32fc8:	cmp	r1, #0
   32fcc:	beq	32fe0 <GetDataSlab+0x7164>
   32fd0:	ldr	r2, [r6, r0, lsl #2]
   32fd4:	mla	r4, r2, r1, r4
   32fd8:	mul	r1, r2, r1
   32fdc:	add	sl, sl, r1, lsl #3
   32fe0:	ldr	r2, [fp, #24]
   32fe4:	add	r1, r0, #1
   32fe8:	add	r0, r0, #2
   32fec:	cmp	r0, r2
   32ff0:	blt	32f60 <GetDataSlab+0x70e4>
   32ff4:	b	33014 <GetDataSlab+0x7198>
   32ff8:	ldr	lr, [sp, #36]	; 0x24
   32ffc:	ldr	ip, [sp, #48]	; 0x30
   33000:	b	33014 <GetDataSlab+0x7198>
   33004:	ldr	r1, [sp, #12]
   33008:	ldr	r0, [r1, r0, lsl #2]
   3300c:	add	sl, sl, r0, lsl #3
   33010:	add	r4, r0, r4
   33014:	ldr	r0, [sp, #32]
   33018:	ldr	r1, [sp, #52]	; 0x34
   3301c:	add	r1, r1, r0
   33020:	ldr	r0, [sp, #44]	; 0x2c
   33024:	str	r1, [sp, #52]	; 0x34
   33028:	add	r0, r0, lr
   3302c:	cmp	r0, ip
   33030:	blt	32e94 <GetDataSlab+0x7018>
   33034:	b	43238 <GetDataSlab+0x173bc>
   33038:	ldr	r4, [r3]
   3303c:	ldr	r9, [fp, #8]
   33040:	mov	r5, #0
   33044:	sub	r3, fp, #176	; 0xb0
   33048:	sub	sl, fp, #96	; 0x60
   3304c:	sub	r0, r4, #1
   33050:	str	r0, [fp, #-96]	; 0xffffffa0
   33054:	ldr	r0, [r9]
   33058:	str	r0, [fp, #-176]	; 0xffffff50
   3305c:	str	r0, [sp, #52]	; 0x34
   33060:	ldr	r0, [fp, #24]
   33064:	ldr	r2, [r6]
   33068:	cmp	r0, #2
   3306c:	mov	r0, r2
   33070:	str	r2, [sp, #60]	; 0x3c
   33074:	blt	331e4 <GetDataSlab+0x7368>
   33078:	ldr	r7, [sp, #52]	; 0x34
   3307c:	sub	r0, r9, #4
   33080:	sub	r6, r9, #12
   33084:	mov	ip, #1
   33088:	mov	lr, #0
   3308c:	mov	r5, #0
   33090:	str	r2, [sp, #60]	; 0x3c
   33094:	mov	r1, r7
   33098:	str	r7, [sp, #48]	; 0x30
   3309c:	mov	r1, r2
   330a0:	ldr	r1, [fp, #16]
   330a4:	add	lr, lr, #1
   330a8:	str	r6, [sp, #44]	; 0x2c
   330ac:	cmp	lr, #4
   330b0:	str	lr, [sp, #40]	; 0x28
   330b4:	ldr	r1, [r1, ip, lsl #2]
   330b8:	str	r7, [r3, ip, lsl #2]
   330bc:	sub	r8, r1, #1
   330c0:	str	r8, [sl, ip, lsl #2]
   330c4:	ldr	sl, [r9, ip, lsl #2]
   330c8:	str	sl, [sp, #36]	; 0x24
   330cc:	bcs	330dc <GetDataSlab+0x7260>
   330d0:	mov	r1, sl
   330d4:	mov	r3, ip
   330d8:	b	33178 <GetDataSlab+0x72fc>
   330dc:	vmov.i32	q9, #1	; 0x00000001
   330e0:	vmov.i32	q10, #1	; 0x00000001
   330e4:	vmov.i32	q8, #1	; 0x00000001
   330e8:	bic	r1, lr, #3
   330ec:	bic	r9, ip, #3
   330f0:	vmov.32	d23[1], sl
   330f4:	vmov.32	d18[0], r7
   330f8:	vmov.32	d20[0], r8
   330fc:	str	r1, [sp, #32]
   33100:	sub	r3, ip, r1
   33104:	mov	r1, r6
   33108:	mvn	r7, #15
   3310c:	vorr	d16, d18, d18
   33110:	vmov.i32	q9, #1	; 0x00000001
   33114:	vorr	d18, d20, d20
   33118:	vld1.32	{d20-d21}, [r1], r7
   3311c:	subs	r9, r9, #4
   33120:	vrev64.32	q12, q10
   33124:	vext.8	q12, q12, q12, #8
   33128:	vext.8	q11, q11, q12, #12
   3312c:	vmul.i32	q9, q9, q12
   33130:	vmul.i32	q8, q11, q8
   33134:	vorr	q11, q12, q12
   33138:	bne	33118 <GetDataSlab+0x729c>
   3313c:	ldr	r1, [sp, #32]
   33140:	vext.8	q11, q9, q8, #8
   33144:	vext.8	q12, q8, q8, #8
   33148:	vmul.i32	q0, q9, q11
   3314c:	vmul.i32	q1, q8, q12
   33150:	vmul.i32	q8, q0, d0[1]
   33154:	vmul.i32	q9, q1, d2[1]
   33158:	vmov.32	r8, d16[0]
   3315c:	vmov.32	r7, d18[0]
   33160:	cmp	lr, r1
   33164:	bne	33170 <GetDataSlab+0x72f4>
   33168:	ldr	r9, [fp, #8]
   3316c:	b	3318c <GetDataSlab+0x7310>
   33170:	ldr	r9, [fp, #8]
   33174:	vmov.32	r1, d20[0]
   33178:	mul	r7, r1, r7
   3317c:	ldr	r1, [r0, r3, lsl #2]
   33180:	subs	r3, r3, #1
   33184:	mul	r8, r8, r1
   33188:	bne	33178 <GetDataSlab+0x72fc>
   3318c:	sub	sl, fp, #96	; 0x60
   33190:	sub	r3, fp, #176	; 0xb0
   33194:	ldr	r6, [sp, #48]	; 0x30
   33198:	ldr	lr, [sp, #60]	; 0x3c
   3319c:	str	r7, [sp, #48]	; 0x30
   331a0:	str	r8, [sl, ip, lsl #2]
   331a4:	ldr	r8, [fp, #12]
   331a8:	str	r7, [r3, ip, lsl #2]
   331ac:	ldr	r7, [sp, #36]	; 0x24
   331b0:	ldr	r1, [r8, ip, lsl #2]
   331b4:	mla	r5, r1, r6, r5
   331b8:	ldr	r1, [fp, #20]
   331bc:	ldr	r6, [sp, #44]	; 0x2c
   331c0:	ldr	r1, [r1, ip, lsl #2]
   331c4:	add	ip, ip, #1
   331c8:	add	r6, r6, #4
   331cc:	mul	lr, r1, lr
   331d0:	ldr	r1, [fp, #24]
   331d4:	str	lr, [sp, #60]	; 0x3c
   331d8:	ldr	lr, [sp, #40]	; 0x28
   331dc:	cmp	ip, r1
   331e0:	bne	330a0 <GetDataSlab+0x7224>
   331e4:	ldr	r0, [sp, #56]	; 0x38
   331e8:	cmp	r4, #1
   331ec:	add	sl, r0, r5
   331f0:	bne	435f8 <GetDataSlab+0x1777c>
   331f4:	ldr	r0, [sp, #60]	; 0x3c
   331f8:	cmp	r0, #1
   331fc:	blt	5188c <GetDataSlab+0x25a10>
   33200:	ldr	r0, [fp, #20]
   33204:	mov	r9, r8
   33208:	mov	r8, #0
   3320c:	add	ip, r0, #4
   33210:	sub	r0, fp, #136	; 0x88
   33214:	orr	r7, r0, #4
   33218:	sub	r0, fp, #96	; 0x60
   3321c:	orr	r0, r0, #4
   33220:	str	r0, [sp, #48]	; 0x30
   33224:	ldr	r0, [r9], #4
   33228:	str	r0, [sp, #56]	; 0x38
   3322c:	ldr	r6, [sp, #56]	; 0x38
   33230:	ldr	r1, [sp, #52]	; 0x34
   33234:	cmp	r2, #1
   33238:	add	r0, r6, r5
   3323c:	add	r3, sl, r6
   33240:	blt	3327c <GetDataSlab+0x7400>
   33244:	ldr	r1, [sp, #68]	; 0x44
   33248:	ldr	r6, [fp, #20]
   3324c:	mov	r5, #0
   33250:	add	r1, r1, r8
   33254:	ldrb	r2, [r3, r5]
   33258:	strb	r2, [r1, r5]
   3325c:	add	r5, r5, #1
   33260:	ldr	r2, [r6]
   33264:	cmp	r5, r2
   33268:	blt	33254 <GetDataSlab+0x73d8>
   3326c:	ldr	r1, [fp, #12]
   33270:	ldr	r6, [r1]
   33274:	ldr	r1, [fp, #8]
   33278:	ldr	r1, [r1]
   3327c:	str	r1, [sp, #52]	; 0x34
   33280:	sub	r1, r1, r6
   33284:	str	r6, [sp, #56]	; 0x38
   33288:	add	r5, r0, r1
   3328c:	ldr	r0, [fp, #24]
   33290:	add	sl, r3, r1
   33294:	cmp	r0, #2
   33298:	blt	33340 <GetDataSlab+0x74c4>
   3329c:	mov	r1, #0
   332a0:	mov	r0, r1
   332a4:	ldr	r1, [r7, r1, lsl #2]
   332a8:	add	r1, r1, #1
   332ac:	str	r1, [r7, r0, lsl #2]
   332b0:	ldr	r6, [ip, r0, lsl #2]
   332b4:	sdiv	lr, r1, r6
   332b8:	mls	r1, lr, r6, r1
   332bc:	cmp	r1, #0
   332c0:	bne	33330 <GetDataSlab+0x74b4>
   332c4:	mov	r1, #0
   332c8:	sub	r3, fp, #176	; 0xb0
   332cc:	str	r1, [r7, r0, lsl #2]
   332d0:	add	r1, r3, r0, lsl #2
   332d4:	ldr	r1, [r1, #4]
   332d8:	sdiv	r6, r5, r1
   332dc:	mls	r6, r6, r1, r5
   332e0:	cmp	r6, #0
   332e4:	beq	33304 <GetDataSlab+0x7488>
   332e8:	ldr	r4, [r3, r0, lsl #2]
   332ec:	ldr	r3, [r9, r0, lsl #2]
   332f0:	sub	r1, r1, r6
   332f4:	mla	r1, r3, r4, r1
   332f8:	add	r5, r1, r5
   332fc:	add	sl, sl, r1
   33300:	b	33318 <GetDataSlab+0x749c>
   33304:	ldr	r1, [r9, r0, lsl #2]
   33308:	cmp	r1, #0
   3330c:	ldrne	r3, [r3, r0, lsl #2]
   33310:	mlane	r5, r3, r1, r5
   33314:	mlane	sl, r3, r1, sl
   33318:	ldr	r3, [fp, #24]
   3331c:	add	r1, r0, #1
   33320:	add	r0, r0, #2
   33324:	cmp	r0, r3
   33328:	blt	332a0 <GetDataSlab+0x7424>
   3332c:	b	33340 <GetDataSlab+0x74c4>
   33330:	ldr	r1, [sp, #48]	; 0x30
   33334:	ldr	r0, [r1, r0, lsl #2]
   33338:	add	sl, sl, r0
   3333c:	add	r5, r0, r5
   33340:	ldr	r1, [sp, #60]	; 0x3c
   33344:	add	r8, r2, r8
   33348:	mov	r0, #0
   3334c:	cmp	r8, r1
   33350:	blt	3322c <GetDataSlab+0x73b0>
   33354:	b	2e97c <GetDataSlab+0x2b00>
   33358:	ldr	r4, [r3]
   3335c:	ldr	r9, [fp, #8]
   33360:	mov	r5, #0
   33364:	sub	r3, fp, #176	; 0xb0
   33368:	sub	sl, fp, #96	; 0x60
   3336c:	sub	r0, r4, #1
   33370:	str	r0, [fp, #-96]	; 0xffffffa0
   33374:	ldr	r0, [r9]
   33378:	str	r0, [fp, #-176]	; 0xffffff50
   3337c:	str	r0, [sp, #52]	; 0x34
   33380:	ldr	r0, [fp, #24]
   33384:	ldr	r2, [r6]
   33388:	cmp	r0, #2
   3338c:	mov	r0, r2
   33390:	str	r2, [sp, #60]	; 0x3c
   33394:	blt	33504 <GetDataSlab+0x7688>
   33398:	ldr	r7, [sp, #52]	; 0x34
   3339c:	sub	r0, r9, #4
   333a0:	sub	r6, r9, #12
   333a4:	mov	ip, #1
   333a8:	mov	lr, #0
   333ac:	mov	r5, #0
   333b0:	str	r2, [sp, #60]	; 0x3c
   333b4:	mov	r1, r7
   333b8:	str	r7, [sp, #48]	; 0x30
   333bc:	mov	r1, r2
   333c0:	ldr	r1, [fp, #16]
   333c4:	add	lr, lr, #1
   333c8:	str	r6, [sp, #44]	; 0x2c
   333cc:	cmp	lr, #4
   333d0:	str	lr, [sp, #40]	; 0x28
   333d4:	ldr	r1, [r1, ip, lsl #2]
   333d8:	str	r7, [r3, ip, lsl #2]
   333dc:	sub	r8, r1, #1
   333e0:	str	r8, [sl, ip, lsl #2]
   333e4:	ldr	sl, [r9, ip, lsl #2]
   333e8:	str	sl, [sp, #36]	; 0x24
   333ec:	bcs	333fc <GetDataSlab+0x7580>
   333f0:	mov	r1, sl
   333f4:	mov	r3, ip
   333f8:	b	33498 <GetDataSlab+0x761c>
   333fc:	vmov.i32	q9, #1	; 0x00000001
   33400:	vmov.i32	q10, #1	; 0x00000001
   33404:	vmov.i32	q8, #1	; 0x00000001
   33408:	bic	r1, lr, #3
   3340c:	bic	r9, ip, #3
   33410:	vmov.32	d23[1], sl
   33414:	vmov.32	d18[0], r7
   33418:	vmov.32	d20[0], r8
   3341c:	str	r1, [sp, #32]
   33420:	sub	r3, ip, r1
   33424:	mov	r1, r6
   33428:	mvn	r7, #15
   3342c:	vorr	d16, d18, d18
   33430:	vmov.i32	q9, #1	; 0x00000001
   33434:	vorr	d18, d20, d20
   33438:	vld1.32	{d20-d21}, [r1], r7
   3343c:	subs	r9, r9, #4
   33440:	vrev64.32	q12, q10
   33444:	vext.8	q12, q12, q12, #8
   33448:	vext.8	q11, q11, q12, #12
   3344c:	vmul.i32	q9, q9, q12
   33450:	vmul.i32	q8, q11, q8
   33454:	vorr	q11, q12, q12
   33458:	bne	33438 <GetDataSlab+0x75bc>
   3345c:	ldr	r1, [sp, #32]
   33460:	vext.8	q11, q9, q8, #8
   33464:	vext.8	q12, q8, q8, #8
   33468:	vmul.i32	q0, q9, q11
   3346c:	vmul.i32	q1, q8, q12
   33470:	vmul.i32	q8, q0, d0[1]
   33474:	vmul.i32	q9, q1, d2[1]
   33478:	vmov.32	r8, d16[0]
   3347c:	vmov.32	r7, d18[0]
   33480:	cmp	lr, r1
   33484:	bne	33490 <GetDataSlab+0x7614>
   33488:	ldr	r9, [fp, #8]
   3348c:	b	334ac <GetDataSlab+0x7630>
   33490:	ldr	r9, [fp, #8]
   33494:	vmov.32	r1, d20[0]
   33498:	mul	r7, r1, r7
   3349c:	ldr	r1, [r0, r3, lsl #2]
   334a0:	subs	r3, r3, #1
   334a4:	mul	r8, r8, r1
   334a8:	bne	33498 <GetDataSlab+0x761c>
   334ac:	sub	sl, fp, #96	; 0x60
   334b0:	sub	r3, fp, #176	; 0xb0
   334b4:	ldr	r6, [sp, #48]	; 0x30
   334b8:	ldr	lr, [sp, #60]	; 0x3c
   334bc:	str	r7, [sp, #48]	; 0x30
   334c0:	str	r8, [sl, ip, lsl #2]
   334c4:	ldr	r8, [fp, #12]
   334c8:	str	r7, [r3, ip, lsl #2]
   334cc:	ldr	r7, [sp, #36]	; 0x24
   334d0:	ldr	r1, [r8, ip, lsl #2]
   334d4:	mla	r5, r1, r6, r5
   334d8:	ldr	r1, [fp, #20]
   334dc:	ldr	r6, [sp, #44]	; 0x2c
   334e0:	ldr	r1, [r1, ip, lsl #2]
   334e4:	add	ip, ip, #1
   334e8:	add	r6, r6, #4
   334ec:	mul	lr, r1, lr
   334f0:	ldr	r1, [fp, #24]
   334f4:	str	lr, [sp, #60]	; 0x3c
   334f8:	ldr	lr, [sp, #40]	; 0x28
   334fc:	cmp	ip, r1
   33500:	bne	333c0 <GetDataSlab+0x7544>
   33504:	ldr	r0, [sp, #56]	; 0x38
   33508:	cmp	r4, #1
   3350c:	add	sl, r0, r5, lsl #1
   33510:	bne	43790 <GetDataSlab+0x17914>
   33514:	ldr	r0, [sp, #60]	; 0x3c
   33518:	cmp	r0, #1
   3351c:	blt	518a0 <GetDataSlab+0x25a24>
   33520:	ldr	r0, [fp, #20]
   33524:	mov	r9, r8
   33528:	mov	lr, #0
   3352c:	add	ip, r0, #4
   33530:	sub	r0, fp, #136	; 0x88
   33534:	orr	r7, r0, #4
   33538:	sub	r0, fp, #96	; 0x60
   3353c:	orr	r0, r0, #4
   33540:	str	r0, [sp, #48]	; 0x30
   33544:	ldr	r0, [r9], #4
   33548:	str	r0, [sp, #56]	; 0x38
   3354c:	ldr	r3, [sp, #56]	; 0x38
   33550:	ldr	r1, [sp, #52]	; 0x34
   33554:	cmp	r2, #1
   33558:	add	r8, r3, r5
   3355c:	add	r0, sl, r3, lsl #1
   33560:	blt	335a0 <GetDataSlab+0x7724>
   33564:	ldr	r1, [sp, #68]	; 0x44
   33568:	ldr	r4, [fp, #20]
   3356c:	mov	r3, r0
   33570:	add	r5, r1, lr
   33574:	mov	r1, #0
   33578:	ldrb	r2, [r3], #2
   3357c:	strb	r2, [r5, r1]
   33580:	add	r1, r1, #1
   33584:	ldr	r2, [r4]
   33588:	cmp	r1, r2
   3358c:	blt	33578 <GetDataSlab+0x76fc>
   33590:	ldr	r1, [fp, #12]
   33594:	ldr	r3, [r1]
   33598:	ldr	r1, [fp, #8]
   3359c:	ldr	r1, [r1]
   335a0:	str	r1, [sp, #52]	; 0x34
   335a4:	sub	r1, r1, r3
   335a8:	str	r3, [sp, #56]	; 0x38
   335ac:	add	sl, r0, r1, lsl #1
   335b0:	ldr	r0, [fp, #24]
   335b4:	add	r5, r8, r1
   335b8:	cmp	r0, #2
   335bc:	blt	3366c <GetDataSlab+0x77f0>
   335c0:	mov	r1, #0
   335c4:	mov	r8, #0
   335c8:	mov	r0, r1
   335cc:	ldr	r1, [r7, r1, lsl #2]
   335d0:	add	r1, r1, #1
   335d4:	str	r1, [r7, r0, lsl #2]
   335d8:	ldr	r6, [ip, r0, lsl #2]
   335dc:	sdiv	r4, r1, r6
   335e0:	mls	r1, r4, r6, r1
   335e4:	cmp	r1, #0
   335e8:	bne	3365c <GetDataSlab+0x77e0>
   335ec:	sub	r3, fp, #176	; 0xb0
   335f0:	str	r8, [r7, r0, lsl #2]
   335f4:	add	r1, r3, r0, lsl #2
   335f8:	ldr	r1, [r1, #4]
   335fc:	sdiv	r4, r5, r1
   33600:	mls	r6, r4, r1, r5
   33604:	cmp	r6, #0
   33608:	beq	33624 <GetDataSlab+0x77a8>
   3360c:	ldr	r4, [r3, r0, lsl #2]
   33610:	ldr	r3, [r9, r0, lsl #2]
   33614:	sub	r1, r1, r6
   33618:	mla	r1, r3, r4, r1
   3361c:	add	r5, r1, r5
   33620:	b	33640 <GetDataSlab+0x77c4>
   33624:	ldr	r1, [r9, r0, lsl #2]
   33628:	cmp	r1, #0
   3362c:	beq	33644 <GetDataSlab+0x77c8>
   33630:	sub	r3, fp, #176	; 0xb0
   33634:	ldr	r3, [r3, r0, lsl #2]
   33638:	mla	r5, r3, r1, r5
   3363c:	mul	r1, r3, r1
   33640:	add	sl, sl, r1, lsl #1
   33644:	ldr	r3, [fp, #24]
   33648:	add	r1, r0, #1
   3364c:	add	r0, r0, #2
   33650:	cmp	r0, r3
   33654:	blt	335c8 <GetDataSlab+0x774c>
   33658:	b	3366c <GetDataSlab+0x77f0>
   3365c:	ldr	r1, [sp, #48]	; 0x30
   33660:	ldr	r0, [r1, r0, lsl #2]
   33664:	add	sl, sl, r0, lsl #1
   33668:	add	r5, r0, r5
   3366c:	ldr	r1, [sp, #60]	; 0x3c
   33670:	add	lr, r2, lr
   33674:	mov	r0, #0
   33678:	cmp	lr, r1
   3367c:	blt	3354c <GetDataSlab+0x76d0>
   33680:	b	2e97c <GetDataSlab+0x2b00>
   33684:	ldr	r4, [r3]
   33688:	ldr	r9, [fp, #8]
   3368c:	mov	r5, #0
   33690:	sub	r3, fp, #176	; 0xb0
   33694:	sub	sl, fp, #96	; 0x60
   33698:	sub	r0, r4, #1
   3369c:	str	r0, [fp, #-96]	; 0xffffffa0
   336a0:	ldr	r0, [r9]
   336a4:	str	r0, [fp, #-176]	; 0xffffff50
   336a8:	str	r0, [sp, #52]	; 0x34
   336ac:	ldr	r0, [fp, #24]
   336b0:	ldr	r2, [r6]
   336b4:	cmp	r0, #2
   336b8:	mov	r0, r2
   336bc:	str	r2, [sp, #60]	; 0x3c
   336c0:	blt	33830 <GetDataSlab+0x79b4>
   336c4:	ldr	r7, [sp, #52]	; 0x34
   336c8:	sub	r0, r9, #4
   336cc:	sub	r6, r9, #12
   336d0:	mov	ip, #1
   336d4:	mov	lr, #0
   336d8:	mov	r5, #0
   336dc:	str	r2, [sp, #60]	; 0x3c
   336e0:	mov	r1, r7
   336e4:	str	r7, [sp, #48]	; 0x30
   336e8:	mov	r1, r2
   336ec:	ldr	r1, [fp, #16]
   336f0:	add	lr, lr, #1
   336f4:	str	r6, [sp, #44]	; 0x2c
   336f8:	cmp	lr, #4
   336fc:	str	lr, [sp, #40]	; 0x28
   33700:	ldr	r1, [r1, ip, lsl #2]
   33704:	str	r7, [r3, ip, lsl #2]
   33708:	sub	r8, r1, #1
   3370c:	str	r8, [sl, ip, lsl #2]
   33710:	ldr	sl, [r9, ip, lsl #2]
   33714:	str	sl, [sp, #36]	; 0x24
   33718:	bcs	33728 <GetDataSlab+0x78ac>
   3371c:	mov	r1, sl
   33720:	mov	r3, ip
   33724:	b	337c4 <GetDataSlab+0x7948>
   33728:	vmov.i32	q9, #1	; 0x00000001
   3372c:	vmov.i32	q10, #1	; 0x00000001
   33730:	vmov.i32	q8, #1	; 0x00000001
   33734:	bic	r1, lr, #3
   33738:	bic	r9, ip, #3
   3373c:	vmov.32	d23[1], sl
   33740:	vmov.32	d18[0], r7
   33744:	vmov.32	d20[0], r8
   33748:	str	r1, [sp, #32]
   3374c:	sub	r3, ip, r1
   33750:	mov	r1, r6
   33754:	mvn	r7, #15
   33758:	vorr	d16, d18, d18
   3375c:	vmov.i32	q9, #1	; 0x00000001
   33760:	vorr	d18, d20, d20
   33764:	vld1.32	{d20-d21}, [r1], r7
   33768:	subs	r9, r9, #4
   3376c:	vrev64.32	q12, q10
   33770:	vext.8	q12, q12, q12, #8
   33774:	vext.8	q11, q11, q12, #12
   33778:	vmul.i32	q9, q9, q12
   3377c:	vmul.i32	q8, q11, q8
   33780:	vorr	q11, q12, q12
   33784:	bne	33764 <GetDataSlab+0x78e8>
   33788:	ldr	r1, [sp, #32]
   3378c:	vext.8	q11, q9, q8, #8
   33790:	vext.8	q12, q8, q8, #8
   33794:	vmul.i32	q0, q9, q11
   33798:	vmul.i32	q1, q8, q12
   3379c:	vmul.i32	q8, q0, d0[1]
   337a0:	vmul.i32	q9, q1, d2[1]
   337a4:	vmov.32	r8, d16[0]
   337a8:	vmov.32	r7, d18[0]
   337ac:	cmp	lr, r1
   337b0:	bne	337bc <GetDataSlab+0x7940>
   337b4:	ldr	r9, [fp, #8]
   337b8:	b	337d8 <GetDataSlab+0x795c>
   337bc:	ldr	r9, [fp, #8]
   337c0:	vmov.32	r1, d20[0]
   337c4:	mul	r7, r1, r7
   337c8:	ldr	r1, [r0, r3, lsl #2]
   337cc:	subs	r3, r3, #1
   337d0:	mul	r8, r8, r1
   337d4:	bne	337c4 <GetDataSlab+0x7948>
   337d8:	sub	sl, fp, #96	; 0x60
   337dc:	sub	r3, fp, #176	; 0xb0
   337e0:	ldr	r6, [sp, #48]	; 0x30
   337e4:	ldr	lr, [sp, #60]	; 0x3c
   337e8:	str	r7, [sp, #48]	; 0x30
   337ec:	str	r8, [sl, ip, lsl #2]
   337f0:	ldr	r8, [fp, #12]
   337f4:	str	r7, [r3, ip, lsl #2]
   337f8:	ldr	r7, [sp, #36]	; 0x24
   337fc:	ldr	r1, [r8, ip, lsl #2]
   33800:	mla	r5, r1, r6, r5
   33804:	ldr	r1, [fp, #20]
   33808:	ldr	r6, [sp, #44]	; 0x2c
   3380c:	ldr	r1, [r1, ip, lsl #2]
   33810:	add	ip, ip, #1
   33814:	add	r6, r6, #4
   33818:	mul	lr, r1, lr
   3381c:	ldr	r1, [fp, #24]
   33820:	str	lr, [sp, #60]	; 0x3c
   33824:	ldr	lr, [sp, #40]	; 0x28
   33828:	cmp	ip, r1
   3382c:	bne	336ec <GetDataSlab+0x7870>
   33830:	ldr	r0, [sp, #56]	; 0x38
   33834:	cmp	r4, #1
   33838:	add	sl, r0, r5, lsl #1
   3383c:	bne	4392c <GetDataSlab+0x17ab0>
   33840:	ldr	r0, [sp, #60]	; 0x3c
   33844:	cmp	r0, #1
   33848:	blt	518b4 <GetDataSlab+0x25a38>
   3384c:	ldr	r0, [fp, #20]
   33850:	mov	r9, r8
   33854:	mov	lr, #0
   33858:	add	ip, r0, #4
   3385c:	sub	r0, fp, #136	; 0x88
   33860:	orr	r7, r0, #4
   33864:	sub	r0, fp, #96	; 0x60
   33868:	orr	r0, r0, #4
   3386c:	str	r0, [sp, #48]	; 0x30
   33870:	ldr	r0, [r9], #4
   33874:	str	r0, [sp, #56]	; 0x38
   33878:	ldr	r3, [sp, #56]	; 0x38
   3387c:	ldr	r1, [sp, #52]	; 0x34
   33880:	cmp	r2, #1
   33884:	add	r8, r3, r5
   33888:	add	r0, sl, r3, lsl #1
   3388c:	blt	338cc <GetDataSlab+0x7a50>
   33890:	ldr	r1, [sp, #68]	; 0x44
   33894:	ldr	r4, [fp, #20]
   33898:	mov	r3, r0
   3389c:	add	r5, r1, lr
   338a0:	mov	r1, #0
   338a4:	ldrb	r2, [r3], #2
   338a8:	strb	r2, [r5, r1]
   338ac:	add	r1, r1, #1
   338b0:	ldr	r2, [r4]
   338b4:	cmp	r1, r2
   338b8:	blt	338a4 <GetDataSlab+0x7a28>
   338bc:	ldr	r1, [fp, #12]
   338c0:	ldr	r3, [r1]
   338c4:	ldr	r1, [fp, #8]
   338c8:	ldr	r1, [r1]
   338cc:	str	r1, [sp, #52]	; 0x34
   338d0:	sub	r1, r1, r3
   338d4:	str	r3, [sp, #56]	; 0x38
   338d8:	add	sl, r0, r1, lsl #1
   338dc:	ldr	r0, [fp, #24]
   338e0:	add	r5, r8, r1
   338e4:	cmp	r0, #2
   338e8:	blt	33998 <GetDataSlab+0x7b1c>
   338ec:	mov	r1, #0
   338f0:	mov	r8, #0
   338f4:	mov	r0, r1
   338f8:	ldr	r1, [r7, r1, lsl #2]
   338fc:	add	r1, r1, #1
   33900:	str	r1, [r7, r0, lsl #2]
   33904:	ldr	r6, [ip, r0, lsl #2]
   33908:	sdiv	r4, r1, r6
   3390c:	mls	r1, r4, r6, r1
   33910:	cmp	r1, #0
   33914:	bne	33988 <GetDataSlab+0x7b0c>
   33918:	sub	r3, fp, #176	; 0xb0
   3391c:	str	r8, [r7, r0, lsl #2]
   33920:	add	r1, r3, r0, lsl #2
   33924:	ldr	r1, [r1, #4]
   33928:	sdiv	r4, r5, r1
   3392c:	mls	r6, r4, r1, r5
   33930:	cmp	r6, #0
   33934:	beq	33950 <GetDataSlab+0x7ad4>
   33938:	ldr	r4, [r3, r0, lsl #2]
   3393c:	ldr	r3, [r9, r0, lsl #2]
   33940:	sub	r1, r1, r6
   33944:	mla	r1, r3, r4, r1
   33948:	add	r5, r1, r5
   3394c:	b	3396c <GetDataSlab+0x7af0>
   33950:	ldr	r1, [r9, r0, lsl #2]
   33954:	cmp	r1, #0
   33958:	beq	33970 <GetDataSlab+0x7af4>
   3395c:	sub	r3, fp, #176	; 0xb0
   33960:	ldr	r3, [r3, r0, lsl #2]
   33964:	mla	r5, r3, r1, r5
   33968:	mul	r1, r3, r1
   3396c:	add	sl, sl, r1, lsl #1
   33970:	ldr	r3, [fp, #24]
   33974:	add	r1, r0, #1
   33978:	add	r0, r0, #2
   3397c:	cmp	r0, r3
   33980:	blt	338f4 <GetDataSlab+0x7a78>
   33984:	b	33998 <GetDataSlab+0x7b1c>
   33988:	ldr	r1, [sp, #48]	; 0x30
   3398c:	ldr	r0, [r1, r0, lsl #2]
   33990:	add	sl, sl, r0, lsl #1
   33994:	add	r5, r0, r5
   33998:	ldr	r1, [sp, #60]	; 0x3c
   3399c:	add	lr, r2, lr
   339a0:	mov	r0, #0
   339a4:	cmp	lr, r1
   339a8:	blt	33878 <GetDataSlab+0x79fc>
   339ac:	b	2e97c <GetDataSlab+0x2b00>
   339b0:	ldr	r4, [r3]
   339b4:	ldr	r9, [fp, #8]
   339b8:	mov	r5, #0
   339bc:	sub	r3, fp, #176	; 0xb0
   339c0:	sub	sl, fp, #96	; 0x60
   339c4:	sub	r0, r4, #1
   339c8:	str	r0, [fp, #-96]	; 0xffffffa0
   339cc:	ldr	r0, [r9]
   339d0:	str	r0, [fp, #-176]	; 0xffffff50
   339d4:	str	r0, [sp, #52]	; 0x34
   339d8:	ldr	r0, [fp, #24]
   339dc:	ldr	r2, [r6]
   339e0:	cmp	r0, #2
   339e4:	mov	r0, r2
   339e8:	str	r2, [sp, #60]	; 0x3c
   339ec:	blt	33b5c <GetDataSlab+0x7ce0>
   339f0:	ldr	r7, [sp, #52]	; 0x34
   339f4:	sub	r0, r9, #4
   339f8:	sub	r6, r9, #12
   339fc:	mov	ip, #1
   33a00:	mov	lr, #0
   33a04:	mov	r5, #0
   33a08:	str	r2, [sp, #60]	; 0x3c
   33a0c:	mov	r1, r7
   33a10:	str	r7, [sp, #48]	; 0x30
   33a14:	mov	r1, r2
   33a18:	ldr	r1, [fp, #16]
   33a1c:	add	lr, lr, #1
   33a20:	str	r6, [sp, #44]	; 0x2c
   33a24:	cmp	lr, #4
   33a28:	str	lr, [sp, #40]	; 0x28
   33a2c:	ldr	r1, [r1, ip, lsl #2]
   33a30:	str	r7, [r3, ip, lsl #2]
   33a34:	sub	r8, r1, #1
   33a38:	str	r8, [sl, ip, lsl #2]
   33a3c:	ldr	sl, [r9, ip, lsl #2]
   33a40:	str	sl, [sp, #36]	; 0x24
   33a44:	bcs	33a54 <GetDataSlab+0x7bd8>
   33a48:	mov	r1, sl
   33a4c:	mov	r3, ip
   33a50:	b	33af0 <GetDataSlab+0x7c74>
   33a54:	vmov.i32	q9, #1	; 0x00000001
   33a58:	vmov.i32	q10, #1	; 0x00000001
   33a5c:	vmov.i32	q8, #1	; 0x00000001
   33a60:	bic	r1, lr, #3
   33a64:	bic	r9, ip, #3
   33a68:	vmov.32	d23[1], sl
   33a6c:	vmov.32	d18[0], r7
   33a70:	vmov.32	d20[0], r8
   33a74:	str	r1, [sp, #32]
   33a78:	sub	r3, ip, r1
   33a7c:	mov	r1, r6
   33a80:	mvn	r7, #15
   33a84:	vorr	d16, d18, d18
   33a88:	vmov.i32	q9, #1	; 0x00000001
   33a8c:	vorr	d18, d20, d20
   33a90:	vld1.32	{d20-d21}, [r1], r7
   33a94:	subs	r9, r9, #4
   33a98:	vrev64.32	q12, q10
   33a9c:	vext.8	q12, q12, q12, #8
   33aa0:	vext.8	q11, q11, q12, #12
   33aa4:	vmul.i32	q9, q9, q12
   33aa8:	vmul.i32	q8, q11, q8
   33aac:	vorr	q11, q12, q12
   33ab0:	bne	33a90 <GetDataSlab+0x7c14>
   33ab4:	ldr	r1, [sp, #32]
   33ab8:	vext.8	q11, q9, q8, #8
   33abc:	vext.8	q12, q8, q8, #8
   33ac0:	vmul.i32	q0, q9, q11
   33ac4:	vmul.i32	q1, q8, q12
   33ac8:	vmul.i32	q8, q0, d0[1]
   33acc:	vmul.i32	q9, q1, d2[1]
   33ad0:	vmov.32	r8, d16[0]
   33ad4:	vmov.32	r7, d18[0]
   33ad8:	cmp	lr, r1
   33adc:	bne	33ae8 <GetDataSlab+0x7c6c>
   33ae0:	ldr	r9, [fp, #8]
   33ae4:	b	33b04 <GetDataSlab+0x7c88>
   33ae8:	ldr	r9, [fp, #8]
   33aec:	vmov.32	r1, d20[0]
   33af0:	mul	r7, r1, r7
   33af4:	ldr	r1, [r0, r3, lsl #2]
   33af8:	subs	r3, r3, #1
   33afc:	mul	r8, r8, r1
   33b00:	bne	33af0 <GetDataSlab+0x7c74>
   33b04:	sub	sl, fp, #96	; 0x60
   33b08:	sub	r3, fp, #176	; 0xb0
   33b0c:	ldr	r6, [sp, #48]	; 0x30
   33b10:	ldr	lr, [sp, #60]	; 0x3c
   33b14:	str	r7, [sp, #48]	; 0x30
   33b18:	str	r8, [sl, ip, lsl #2]
   33b1c:	ldr	r8, [fp, #12]
   33b20:	str	r7, [r3, ip, lsl #2]
   33b24:	ldr	r7, [sp, #36]	; 0x24
   33b28:	ldr	r1, [r8, ip, lsl #2]
   33b2c:	mla	r5, r1, r6, r5
   33b30:	ldr	r1, [fp, #20]
   33b34:	ldr	r6, [sp, #44]	; 0x2c
   33b38:	ldr	r1, [r1, ip, lsl #2]
   33b3c:	add	ip, ip, #1
   33b40:	add	r6, r6, #4
   33b44:	mul	lr, r1, lr
   33b48:	ldr	r1, [fp, #24]
   33b4c:	str	lr, [sp, #60]	; 0x3c
   33b50:	ldr	lr, [sp, #40]	; 0x28
   33b54:	cmp	ip, r1
   33b58:	bne	33a18 <GetDataSlab+0x7b9c>
   33b5c:	ldr	r0, [sp, #56]	; 0x38
   33b60:	cmp	r4, #1
   33b64:	add	sl, r0, r5, lsl #2
   33b68:	bne	43ac8 <GetDataSlab+0x17c4c>
   33b6c:	ldr	r0, [sp, #60]	; 0x3c
   33b70:	cmp	r0, #1
   33b74:	blt	518c8 <GetDataSlab+0x25a4c>
   33b78:	ldr	r0, [fp, #20]
   33b7c:	mov	r9, r8
   33b80:	mov	r8, #0
   33b84:	add	ip, r0, #4
   33b88:	sub	r0, fp, #136	; 0x88
   33b8c:	orr	r7, r0, #4
   33b90:	sub	r0, fp, #96	; 0x60
   33b94:	orr	r0, r0, #4
   33b98:	str	r0, [sp, #48]	; 0x30
   33b9c:	ldr	r0, [r9], #4
   33ba0:	str	r0, [sp, #56]	; 0x38
   33ba4:	ldr	r6, [sp, #56]	; 0x38
   33ba8:	ldr	r1, [sp, #52]	; 0x34
   33bac:	cmp	r2, #1
   33bb0:	add	r0, r6, r5
   33bb4:	add	r3, sl, r6, lsl #2
   33bb8:	blt	33bf4 <GetDataSlab+0x7d78>
   33bbc:	ldr	r1, [sp, #68]	; 0x44
   33bc0:	ldr	r6, [fp, #20]
   33bc4:	mov	r5, #0
   33bc8:	add	r1, r1, r8
   33bcc:	ldr	r2, [r3, r5, lsl #2]
   33bd0:	strb	r2, [r1, r5]
   33bd4:	add	r5, r5, #1
   33bd8:	ldr	r2, [r6]
   33bdc:	cmp	r5, r2
   33be0:	blt	33bcc <GetDataSlab+0x7d50>
   33be4:	ldr	r1, [fp, #12]
   33be8:	ldr	r6, [r1]
   33bec:	ldr	r1, [fp, #8]
   33bf0:	ldr	r1, [r1]
   33bf4:	str	r1, [sp, #52]	; 0x34
   33bf8:	sub	r1, r1, r6
   33bfc:	str	r6, [sp, #56]	; 0x38
   33c00:	add	r5, r0, r1
   33c04:	ldr	r0, [fp, #24]
   33c08:	add	sl, r3, r1, lsl #2
   33c0c:	cmp	r0, #2
   33c10:	blt	33cbc <GetDataSlab+0x7e40>
   33c14:	mov	r1, #0
   33c18:	mov	r0, r1
   33c1c:	ldr	r1, [r7, r1, lsl #2]
   33c20:	add	r1, r1, #1
   33c24:	str	r1, [r7, r0, lsl #2]
   33c28:	ldr	r6, [ip, r0, lsl #2]
   33c2c:	sdiv	lr, r1, r6
   33c30:	mls	r1, lr, r6, r1
   33c34:	cmp	r1, #0
   33c38:	bne	33cac <GetDataSlab+0x7e30>
   33c3c:	mov	r1, #0
   33c40:	sub	r3, fp, #176	; 0xb0
   33c44:	str	r1, [r7, r0, lsl #2]
   33c48:	add	r1, r3, r0, lsl #2
   33c4c:	ldr	r1, [r1, #4]
   33c50:	sdiv	r6, r5, r1
   33c54:	mls	r6, r6, r1, r5
   33c58:	cmp	r6, #0
   33c5c:	beq	33c78 <GetDataSlab+0x7dfc>
   33c60:	ldr	r4, [r3, r0, lsl #2]
   33c64:	ldr	r3, [r9, r0, lsl #2]
   33c68:	sub	r1, r1, r6
   33c6c:	mla	r1, r3, r4, r1
   33c70:	add	r5, r1, r5
   33c74:	b	33c90 <GetDataSlab+0x7e14>
   33c78:	ldr	r1, [r9, r0, lsl #2]
   33c7c:	cmp	r1, #0
   33c80:	beq	33c94 <GetDataSlab+0x7e18>
   33c84:	ldr	r3, [r3, r0, lsl #2]
   33c88:	mla	r5, r3, r1, r5
   33c8c:	mul	r1, r3, r1
   33c90:	add	sl, sl, r1, lsl #2
   33c94:	ldr	r3, [fp, #24]
   33c98:	add	r1, r0, #1
   33c9c:	add	r0, r0, #2
   33ca0:	cmp	r0, r3
   33ca4:	blt	33c18 <GetDataSlab+0x7d9c>
   33ca8:	b	33cbc <GetDataSlab+0x7e40>
   33cac:	ldr	r1, [sp, #48]	; 0x30
   33cb0:	ldr	r0, [r1, r0, lsl #2]
   33cb4:	add	sl, sl, r0, lsl #2
   33cb8:	add	r5, r0, r5
   33cbc:	ldr	r1, [sp, #60]	; 0x3c
   33cc0:	add	r8, r2, r8
   33cc4:	mov	r0, #0
   33cc8:	cmp	r8, r1
   33ccc:	blt	33ba4 <GetDataSlab+0x7d28>
   33cd0:	b	2e97c <GetDataSlab+0x2b00>
   33cd4:	ldr	r4, [r3]
   33cd8:	ldr	r9, [fp, #8]
   33cdc:	mov	r5, #0
   33ce0:	sub	r3, fp, #176	; 0xb0
   33ce4:	sub	sl, fp, #96	; 0x60
   33ce8:	sub	r0, r4, #1
   33cec:	str	r0, [fp, #-96]	; 0xffffffa0
   33cf0:	ldr	r0, [r9]
   33cf4:	str	r0, [fp, #-176]	; 0xffffff50
   33cf8:	str	r0, [sp, #52]	; 0x34
   33cfc:	ldr	r0, [fp, #24]
   33d00:	ldr	r2, [r6]
   33d04:	cmp	r0, #2
   33d08:	mov	r0, r2
   33d0c:	str	r2, [sp, #60]	; 0x3c
   33d10:	blt	33e80 <GetDataSlab+0x8004>
   33d14:	ldr	r7, [sp, #52]	; 0x34
   33d18:	sub	r0, r9, #4
   33d1c:	sub	r6, r9, #12
   33d20:	mov	ip, #1
   33d24:	mov	lr, #0
   33d28:	mov	r5, #0
   33d2c:	str	r2, [sp, #60]	; 0x3c
   33d30:	mov	r1, r7
   33d34:	str	r7, [sp, #48]	; 0x30
   33d38:	mov	r1, r2
   33d3c:	ldr	r1, [fp, #16]
   33d40:	add	lr, lr, #1
   33d44:	str	r6, [sp, #44]	; 0x2c
   33d48:	cmp	lr, #4
   33d4c:	str	lr, [sp, #40]	; 0x28
   33d50:	ldr	r1, [r1, ip, lsl #2]
   33d54:	str	r7, [r3, ip, lsl #2]
   33d58:	sub	r8, r1, #1
   33d5c:	str	r8, [sl, ip, lsl #2]
   33d60:	ldr	sl, [r9, ip, lsl #2]
   33d64:	str	sl, [sp, #36]	; 0x24
   33d68:	bcs	33d78 <GetDataSlab+0x7efc>
   33d6c:	mov	r1, sl
   33d70:	mov	r3, ip
   33d74:	b	33e14 <GetDataSlab+0x7f98>
   33d78:	vmov.i32	q9, #1	; 0x00000001
   33d7c:	vmov.i32	q10, #1	; 0x00000001
   33d80:	vmov.i32	q8, #1	; 0x00000001
   33d84:	bic	r1, lr, #3
   33d88:	bic	r9, ip, #3
   33d8c:	vmov.32	d23[1], sl
   33d90:	vmov.32	d18[0], r7
   33d94:	vmov.32	d20[0], r8
   33d98:	str	r1, [sp, #32]
   33d9c:	sub	r3, ip, r1
   33da0:	mov	r1, r6
   33da4:	mvn	r7, #15
   33da8:	vorr	d16, d18, d18
   33dac:	vmov.i32	q9, #1	; 0x00000001
   33db0:	vorr	d18, d20, d20
   33db4:	vld1.32	{d20-d21}, [r1], r7
   33db8:	subs	r9, r9, #4
   33dbc:	vrev64.32	q12, q10
   33dc0:	vext.8	q12, q12, q12, #8
   33dc4:	vext.8	q11, q11, q12, #12
   33dc8:	vmul.i32	q9, q9, q12
   33dcc:	vmul.i32	q8, q11, q8
   33dd0:	vorr	q11, q12, q12
   33dd4:	bne	33db4 <GetDataSlab+0x7f38>
   33dd8:	ldr	r1, [sp, #32]
   33ddc:	vext.8	q11, q9, q8, #8
   33de0:	vext.8	q12, q8, q8, #8
   33de4:	vmul.i32	q0, q9, q11
   33de8:	vmul.i32	q1, q8, q12
   33dec:	vmul.i32	q8, q0, d0[1]
   33df0:	vmul.i32	q9, q1, d2[1]
   33df4:	vmov.32	r8, d16[0]
   33df8:	vmov.32	r7, d18[0]
   33dfc:	cmp	lr, r1
   33e00:	bne	33e0c <GetDataSlab+0x7f90>
   33e04:	ldr	r9, [fp, #8]
   33e08:	b	33e28 <GetDataSlab+0x7fac>
   33e0c:	ldr	r9, [fp, #8]
   33e10:	vmov.32	r1, d20[0]
   33e14:	mul	r7, r1, r7
   33e18:	ldr	r1, [r0, r3, lsl #2]
   33e1c:	subs	r3, r3, #1
   33e20:	mul	r8, r8, r1
   33e24:	bne	33e14 <GetDataSlab+0x7f98>
   33e28:	sub	sl, fp, #96	; 0x60
   33e2c:	sub	r3, fp, #176	; 0xb0
   33e30:	ldr	r6, [sp, #48]	; 0x30
   33e34:	ldr	lr, [sp, #60]	; 0x3c
   33e38:	str	r7, [sp, #48]	; 0x30
   33e3c:	str	r8, [sl, ip, lsl #2]
   33e40:	ldr	r8, [fp, #12]
   33e44:	str	r7, [r3, ip, lsl #2]
   33e48:	ldr	r7, [sp, #36]	; 0x24
   33e4c:	ldr	r1, [r8, ip, lsl #2]
   33e50:	mla	r5, r1, r6, r5
   33e54:	ldr	r1, [fp, #20]
   33e58:	ldr	r6, [sp, #44]	; 0x2c
   33e5c:	ldr	r1, [r1, ip, lsl #2]
   33e60:	add	ip, ip, #1
   33e64:	add	r6, r6, #4
   33e68:	mul	lr, r1, lr
   33e6c:	ldr	r1, [fp, #24]
   33e70:	str	lr, [sp, #60]	; 0x3c
   33e74:	ldr	lr, [sp, #40]	; 0x28
   33e78:	cmp	ip, r1
   33e7c:	bne	33d3c <GetDataSlab+0x7ec0>
   33e80:	ldr	r0, [sp, #56]	; 0x38
   33e84:	cmp	r4, #1
   33e88:	add	sl, r0, r5, lsl #2
   33e8c:	bne	43c64 <GetDataSlab+0x17de8>
   33e90:	ldr	r0, [sp, #60]	; 0x3c
   33e94:	cmp	r0, #1
   33e98:	blt	518dc <GetDataSlab+0x25a60>
   33e9c:	ldr	r0, [fp, #20]
   33ea0:	mov	r9, r8
   33ea4:	mov	r8, #0
   33ea8:	add	ip, r0, #4
   33eac:	sub	r0, fp, #136	; 0x88
   33eb0:	orr	r7, r0, #4
   33eb4:	sub	r0, fp, #96	; 0x60
   33eb8:	orr	r0, r0, #4
   33ebc:	str	r0, [sp, #48]	; 0x30
   33ec0:	ldr	r0, [r9], #4
   33ec4:	str	r0, [sp, #56]	; 0x38
   33ec8:	ldr	r6, [sp, #56]	; 0x38
   33ecc:	ldr	r1, [sp, #52]	; 0x34
   33ed0:	cmp	r2, #1
   33ed4:	add	r0, r6, r5
   33ed8:	add	r3, sl, r6, lsl #2
   33edc:	blt	33f18 <GetDataSlab+0x809c>
   33ee0:	ldr	r1, [sp, #68]	; 0x44
   33ee4:	ldr	r6, [fp, #20]
   33ee8:	mov	r5, #0
   33eec:	add	r1, r1, r8
   33ef0:	ldr	r2, [r3, r5, lsl #2]
   33ef4:	strb	r2, [r1, r5]
   33ef8:	add	r5, r5, #1
   33efc:	ldr	r2, [r6]
   33f00:	cmp	r5, r2
   33f04:	blt	33ef0 <GetDataSlab+0x8074>
   33f08:	ldr	r1, [fp, #12]
   33f0c:	ldr	r6, [r1]
   33f10:	ldr	r1, [fp, #8]
   33f14:	ldr	r1, [r1]
   33f18:	str	r1, [sp, #52]	; 0x34
   33f1c:	sub	r1, r1, r6
   33f20:	str	r6, [sp, #56]	; 0x38
   33f24:	add	r5, r0, r1
   33f28:	ldr	r0, [fp, #24]
   33f2c:	add	sl, r3, r1, lsl #2
   33f30:	cmp	r0, #2
   33f34:	blt	33fe0 <GetDataSlab+0x8164>
   33f38:	mov	r1, #0
   33f3c:	mov	r0, r1
   33f40:	ldr	r1, [r7, r1, lsl #2]
   33f44:	add	r1, r1, #1
   33f48:	str	r1, [r7, r0, lsl #2]
   33f4c:	ldr	r6, [ip, r0, lsl #2]
   33f50:	sdiv	lr, r1, r6
   33f54:	mls	r1, lr, r6, r1
   33f58:	cmp	r1, #0
   33f5c:	bne	33fd0 <GetDataSlab+0x8154>
   33f60:	mov	r1, #0
   33f64:	sub	r3, fp, #176	; 0xb0
   33f68:	str	r1, [r7, r0, lsl #2]
   33f6c:	add	r1, r3, r0, lsl #2
   33f70:	ldr	r1, [r1, #4]
   33f74:	sdiv	r6, r5, r1
   33f78:	mls	r6, r6, r1, r5
   33f7c:	cmp	r6, #0
   33f80:	beq	33f9c <GetDataSlab+0x8120>
   33f84:	ldr	r4, [r3, r0, lsl #2]
   33f88:	ldr	r3, [r9, r0, lsl #2]
   33f8c:	sub	r1, r1, r6
   33f90:	mla	r1, r3, r4, r1
   33f94:	add	r5, r1, r5
   33f98:	b	33fb4 <GetDataSlab+0x8138>
   33f9c:	ldr	r1, [r9, r0, lsl #2]
   33fa0:	cmp	r1, #0
   33fa4:	beq	33fb8 <GetDataSlab+0x813c>
   33fa8:	ldr	r3, [r3, r0, lsl #2]
   33fac:	mla	r5, r3, r1, r5
   33fb0:	mul	r1, r3, r1
   33fb4:	add	sl, sl, r1, lsl #2
   33fb8:	ldr	r3, [fp, #24]
   33fbc:	add	r1, r0, #1
   33fc0:	add	r0, r0, #2
   33fc4:	cmp	r0, r3
   33fc8:	blt	33f3c <GetDataSlab+0x80c0>
   33fcc:	b	33fe0 <GetDataSlab+0x8164>
   33fd0:	ldr	r1, [sp, #48]	; 0x30
   33fd4:	ldr	r0, [r1, r0, lsl #2]
   33fd8:	add	sl, sl, r0, lsl #2
   33fdc:	add	r5, r0, r5
   33fe0:	ldr	r1, [sp, #60]	; 0x3c
   33fe4:	add	r8, r2, r8
   33fe8:	mov	r0, #0
   33fec:	cmp	r8, r1
   33ff0:	blt	33ec8 <GetDataSlab+0x804c>
   33ff4:	b	2e97c <GetDataSlab+0x2b00>
   33ff8:	ldr	r4, [r3]
   33ffc:	ldr	r9, [fp, #8]
   34000:	mov	r5, #0
   34004:	sub	r3, fp, #176	; 0xb0
   34008:	sub	sl, fp, #96	; 0x60
   3400c:	sub	r0, r4, #1
   34010:	str	r0, [fp, #-96]	; 0xffffffa0
   34014:	ldr	r0, [r9]
   34018:	str	r0, [fp, #-176]	; 0xffffff50
   3401c:	str	r0, [sp, #52]	; 0x34
   34020:	ldr	r0, [fp, #24]
   34024:	ldr	r2, [r6]
   34028:	cmp	r0, #2
   3402c:	mov	r0, r2
   34030:	str	r2, [sp, #60]	; 0x3c
   34034:	blt	341a4 <GetDataSlab+0x8328>
   34038:	ldr	r7, [sp, #52]	; 0x34
   3403c:	sub	r0, r9, #4
   34040:	sub	r6, r9, #12
   34044:	mov	ip, #1
   34048:	mov	lr, #0
   3404c:	mov	r5, #0
   34050:	str	r2, [sp, #60]	; 0x3c
   34054:	mov	r1, r7
   34058:	str	r7, [sp, #48]	; 0x30
   3405c:	mov	r1, r2
   34060:	ldr	r1, [fp, #16]
   34064:	add	lr, lr, #1
   34068:	str	r6, [sp, #44]	; 0x2c
   3406c:	cmp	lr, #4
   34070:	str	lr, [sp, #40]	; 0x28
   34074:	ldr	r1, [r1, ip, lsl #2]
   34078:	str	r7, [r3, ip, lsl #2]
   3407c:	sub	r8, r1, #1
   34080:	str	r8, [sl, ip, lsl #2]
   34084:	ldr	sl, [r9, ip, lsl #2]
   34088:	str	sl, [sp, #36]	; 0x24
   3408c:	bcs	3409c <GetDataSlab+0x8220>
   34090:	mov	r1, sl
   34094:	mov	r3, ip
   34098:	b	34138 <GetDataSlab+0x82bc>
   3409c:	vmov.i32	q9, #1	; 0x00000001
   340a0:	vmov.i32	q10, #1	; 0x00000001
   340a4:	vmov.i32	q8, #1	; 0x00000001
   340a8:	bic	r1, lr, #3
   340ac:	bic	r9, ip, #3
   340b0:	vmov.32	d23[1], sl
   340b4:	vmov.32	d18[0], r7
   340b8:	vmov.32	d20[0], r8
   340bc:	str	r1, [sp, #32]
   340c0:	sub	r3, ip, r1
   340c4:	mov	r1, r6
   340c8:	mvn	r7, #15
   340cc:	vorr	d16, d18, d18
   340d0:	vmov.i32	q9, #1	; 0x00000001
   340d4:	vorr	d18, d20, d20
   340d8:	vld1.32	{d20-d21}, [r1], r7
   340dc:	subs	r9, r9, #4
   340e0:	vrev64.32	q12, q10
   340e4:	vext.8	q12, q12, q12, #8
   340e8:	vext.8	q11, q11, q12, #12
   340ec:	vmul.i32	q9, q9, q12
   340f0:	vmul.i32	q8, q11, q8
   340f4:	vorr	q11, q12, q12
   340f8:	bne	340d8 <GetDataSlab+0x825c>
   340fc:	ldr	r1, [sp, #32]
   34100:	vext.8	q11, q9, q8, #8
   34104:	vext.8	q12, q8, q8, #8
   34108:	vmul.i32	q0, q9, q11
   3410c:	vmul.i32	q1, q8, q12
   34110:	vmul.i32	q8, q0, d0[1]
   34114:	vmul.i32	q9, q1, d2[1]
   34118:	vmov.32	r8, d16[0]
   3411c:	vmov.32	r7, d18[0]
   34120:	cmp	lr, r1
   34124:	bne	34130 <GetDataSlab+0x82b4>
   34128:	ldr	r9, [fp, #8]
   3412c:	b	3414c <GetDataSlab+0x82d0>
   34130:	ldr	r9, [fp, #8]
   34134:	vmov.32	r1, d20[0]
   34138:	mul	r7, r1, r7
   3413c:	ldr	r1, [r0, r3, lsl #2]
   34140:	subs	r3, r3, #1
   34144:	mul	r8, r8, r1
   34148:	bne	34138 <GetDataSlab+0x82bc>
   3414c:	sub	sl, fp, #96	; 0x60
   34150:	sub	r3, fp, #176	; 0xb0
   34154:	ldr	r6, [sp, #48]	; 0x30
   34158:	ldr	lr, [sp, #60]	; 0x3c
   3415c:	str	r7, [sp, #48]	; 0x30
   34160:	str	r8, [sl, ip, lsl #2]
   34164:	ldr	r8, [fp, #12]
   34168:	str	r7, [r3, ip, lsl #2]
   3416c:	ldr	r7, [sp, #36]	; 0x24
   34170:	ldr	r1, [r8, ip, lsl #2]
   34174:	mla	r5, r1, r6, r5
   34178:	ldr	r1, [fp, #20]
   3417c:	ldr	r6, [sp, #44]	; 0x2c
   34180:	ldr	r1, [r1, ip, lsl #2]
   34184:	add	ip, ip, #1
   34188:	add	r6, r6, #4
   3418c:	mul	lr, r1, lr
   34190:	ldr	r1, [fp, #24]
   34194:	str	lr, [sp, #60]	; 0x3c
   34198:	ldr	lr, [sp, #40]	; 0x28
   3419c:	cmp	ip, r1
   341a0:	bne	34060 <GetDataSlab+0x81e4>
   341a4:	ldr	r0, [sp, #56]	; 0x38
   341a8:	cmp	r4, #1
   341ac:	add	ip, r0, r5, lsl #2
   341b0:	bne	43e00 <GetDataSlab+0x17f84>
   341b4:	ldr	r0, [sp, #60]	; 0x3c
   341b8:	cmp	r0, #1
   341bc:	ldr	r0, [fp, #20]
   341c0:	blt	518f0 <GetDataSlab+0x25a74>
   341c4:	add	r9, r0, #4
   341c8:	sub	r0, fp, #136	; 0x88
   341cc:	mov	sl, r8
   341d0:	mov	lr, #0
   341d4:	orr	r7, r0, #4
   341d8:	sub	r0, fp, #96	; 0x60
   341dc:	orr	r0, r0, #4
   341e0:	str	r0, [sp, #48]	; 0x30
   341e4:	ldr	r0, [sl], #4
   341e8:	str	r0, [sp, #56]	; 0x38
   341ec:	ldr	r1, [sp, #56]	; 0x38
   341f0:	ldr	r0, [sp, #52]	; 0x34
   341f4:	cmp	r2, #1
   341f8:	add	r4, r1, r5
   341fc:	add	r8, ip, r1, lsl #2
   34200:	blt	3424c <GetDataSlab+0x83d0>
   34204:	ldr	r0, [sp, #68]	; 0x44
   34208:	ldr	r6, [fp, #20]
   3420c:	mov	r3, r8
   34210:	add	r5, r0, lr
   34214:	mov	r0, #0
   34218:	vldr	s0, [r3]
   3421c:	add	r3, r3, #4
   34220:	vcvt.s32.f32	s0, s0
   34224:	vmov	r1, s0
   34228:	strb	r1, [r5, r0]
   3422c:	add	r0, r0, #1
   34230:	ldr	r2, [r6]
   34234:	cmp	r0, r2
   34238:	blt	34218 <GetDataSlab+0x839c>
   3423c:	ldr	r0, [fp, #12]
   34240:	ldr	r1, [r0]
   34244:	ldr	r0, [fp, #8]
   34248:	ldr	r0, [r0]
   3424c:	str	r0, [sp, #52]	; 0x34
   34250:	sub	r0, r0, r1
   34254:	str	r1, [sp, #56]	; 0x38
   34258:	add	ip, r8, r0, lsl #2
   3425c:	add	r5, r4, r0
   34260:	ldr	r0, [fp, #24]
   34264:	cmp	r0, #2
   34268:	blt	34318 <GetDataSlab+0x849c>
   3426c:	mov	r6, #0
   34270:	mov	r8, #0
   34274:	ldr	r1, [r7, r6, lsl #2]
   34278:	mov	r0, r6
   3427c:	add	r1, r1, #1
   34280:	str	r1, [r7, r6, lsl #2]
   34284:	ldr	r6, [r9, r6, lsl #2]
   34288:	sdiv	r4, r1, r6
   3428c:	mls	r1, r4, r6, r1
   34290:	cmp	r1, #0
   34294:	bne	34308 <GetDataSlab+0x848c>
   34298:	sub	r3, fp, #176	; 0xb0
   3429c:	str	r8, [r7, r0, lsl #2]
   342a0:	add	r1, r3, r0, lsl #2
   342a4:	ldr	r6, [r1, #4]
   342a8:	sdiv	r1, r5, r6
   342ac:	mls	r1, r1, r6, r5
   342b0:	cmp	r1, #0
   342b4:	beq	342d0 <GetDataSlab+0x8454>
   342b8:	ldr	r4, [r3, r0, lsl #2]
   342bc:	ldr	r3, [sl, r0, lsl #2]
   342c0:	sub	r1, r6, r1
   342c4:	mla	r1, r3, r4, r1
   342c8:	add	r5, r1, r5
   342cc:	b	342ec <GetDataSlab+0x8470>
   342d0:	ldr	r1, [sl, r0, lsl #2]
   342d4:	cmp	r1, #0
   342d8:	beq	342f0 <GetDataSlab+0x8474>
   342dc:	sub	r3, fp, #176	; 0xb0
   342e0:	ldr	r3, [r3, r0, lsl #2]
   342e4:	mla	r5, r3, r1, r5
   342e8:	mul	r1, r3, r1
   342ec:	add	ip, ip, r1, lsl #2
   342f0:	ldr	r1, [fp, #24]
   342f4:	add	r6, r0, #1
   342f8:	add	r0, r0, #2
   342fc:	cmp	r0, r1
   34300:	blt	34274 <GetDataSlab+0x83f8>
   34304:	b	34318 <GetDataSlab+0x849c>
   34308:	ldr	r1, [sp, #48]	; 0x30
   3430c:	ldr	r0, [r1, r0, lsl #2]
   34310:	add	ip, ip, r0, lsl #2
   34314:	add	r5, r0, r5
   34318:	ldr	r1, [sp, #60]	; 0x3c
   3431c:	add	lr, r2, lr
   34320:	mov	r0, #0
   34324:	cmp	lr, r1
   34328:	blt	341ec <GetDataSlab+0x8370>
   3432c:	b	2e97c <GetDataSlab+0x2b00>
   34330:	ldr	r4, [r3]
   34334:	ldr	r9, [fp, #8]
   34338:	mov	r5, #0
   3433c:	sub	r3, fp, #176	; 0xb0
   34340:	sub	sl, fp, #96	; 0x60
   34344:	sub	r0, r4, #1
   34348:	str	r0, [fp, #-96]	; 0xffffffa0
   3434c:	ldr	r0, [r9]
   34350:	str	r0, [fp, #-176]	; 0xffffff50
   34354:	str	r0, [sp, #52]	; 0x34
   34358:	ldr	r0, [fp, #24]
   3435c:	ldr	r2, [r6]
   34360:	cmp	r0, #2
   34364:	mov	r0, r2
   34368:	str	r2, [sp, #60]	; 0x3c
   3436c:	blt	344dc <GetDataSlab+0x8660>
   34370:	ldr	r7, [sp, #52]	; 0x34
   34374:	sub	r0, r9, #4
   34378:	sub	r6, r9, #12
   3437c:	mov	ip, #1
   34380:	mov	lr, #0
   34384:	mov	r5, #0
   34388:	str	r2, [sp, #60]	; 0x3c
   3438c:	mov	r1, r7
   34390:	str	r7, [sp, #48]	; 0x30
   34394:	mov	r1, r2
   34398:	ldr	r1, [fp, #16]
   3439c:	add	lr, lr, #1
   343a0:	str	r6, [sp, #44]	; 0x2c
   343a4:	cmp	lr, #4
   343a8:	str	lr, [sp, #40]	; 0x28
   343ac:	ldr	r1, [r1, ip, lsl #2]
   343b0:	str	r7, [r3, ip, lsl #2]
   343b4:	sub	r8, r1, #1
   343b8:	str	r8, [sl, ip, lsl #2]
   343bc:	ldr	sl, [r9, ip, lsl #2]
   343c0:	str	sl, [sp, #36]	; 0x24
   343c4:	bcs	343d4 <GetDataSlab+0x8558>
   343c8:	mov	r1, sl
   343cc:	mov	r3, ip
   343d0:	b	34470 <GetDataSlab+0x85f4>
   343d4:	vmov.i32	q9, #1	; 0x00000001
   343d8:	vmov.i32	q10, #1	; 0x00000001
   343dc:	vmov.i32	q8, #1	; 0x00000001
   343e0:	bic	r1, lr, #3
   343e4:	bic	r9, ip, #3
   343e8:	vmov.32	d23[1], sl
   343ec:	vmov.32	d18[0], r7
   343f0:	vmov.32	d20[0], r8
   343f4:	str	r1, [sp, #32]
   343f8:	sub	r3, ip, r1
   343fc:	mov	r1, r6
   34400:	mvn	r7, #15
   34404:	vorr	d16, d18, d18
   34408:	vmov.i32	q9, #1	; 0x00000001
   3440c:	vorr	d18, d20, d20
   34410:	vld1.32	{d20-d21}, [r1], r7
   34414:	subs	r9, r9, #4
   34418:	vrev64.32	q12, q10
   3441c:	vext.8	q12, q12, q12, #8
   34420:	vext.8	q11, q11, q12, #12
   34424:	vmul.i32	q9, q9, q12
   34428:	vmul.i32	q8, q11, q8
   3442c:	vorr	q11, q12, q12
   34430:	bne	34410 <GetDataSlab+0x8594>
   34434:	ldr	r1, [sp, #32]
   34438:	vext.8	q11, q9, q8, #8
   3443c:	vext.8	q12, q8, q8, #8
   34440:	vmul.i32	q0, q9, q11
   34444:	vmul.i32	q1, q8, q12
   34448:	vmul.i32	q8, q0, d0[1]
   3444c:	vmul.i32	q9, q1, d2[1]
   34450:	vmov.32	r8, d16[0]
   34454:	vmov.32	r7, d18[0]
   34458:	cmp	lr, r1
   3445c:	bne	34468 <GetDataSlab+0x85ec>
   34460:	ldr	r9, [fp, #8]
   34464:	b	34484 <GetDataSlab+0x8608>
   34468:	ldr	r9, [fp, #8]
   3446c:	vmov.32	r1, d20[0]
   34470:	mul	r7, r1, r7
   34474:	ldr	r1, [r0, r3, lsl #2]
   34478:	subs	r3, r3, #1
   3447c:	mul	r8, r8, r1
   34480:	bne	34470 <GetDataSlab+0x85f4>
   34484:	sub	sl, fp, #96	; 0x60
   34488:	sub	r3, fp, #176	; 0xb0
   3448c:	ldr	r6, [sp, #48]	; 0x30
   34490:	ldr	lr, [sp, #60]	; 0x3c
   34494:	str	r7, [sp, #48]	; 0x30
   34498:	str	r8, [sl, ip, lsl #2]
   3449c:	ldr	r8, [fp, #12]
   344a0:	str	r7, [r3, ip, lsl #2]
   344a4:	ldr	r7, [sp, #36]	; 0x24
   344a8:	ldr	r1, [r8, ip, lsl #2]
   344ac:	mla	r5, r1, r6, r5
   344b0:	ldr	r1, [fp, #20]
   344b4:	ldr	r6, [sp, #44]	; 0x2c
   344b8:	ldr	r1, [r1, ip, lsl #2]
   344bc:	add	ip, ip, #1
   344c0:	add	r6, r6, #4
   344c4:	mul	lr, r1, lr
   344c8:	ldr	r1, [fp, #24]
   344cc:	str	lr, [sp, #60]	; 0x3c
   344d0:	ldr	lr, [sp, #40]	; 0x28
   344d4:	cmp	ip, r1
   344d8:	bne	34398 <GetDataSlab+0x851c>
   344dc:	ldr	r0, [sp, #56]	; 0x38
   344e0:	cmp	r4, #1
   344e4:	add	ip, r0, r5, lsl #3
   344e8:	bne	43fa4 <GetDataSlab+0x18128>
   344ec:	ldr	r0, [sp, #60]	; 0x3c
   344f0:	cmp	r0, #1
   344f4:	ldr	r0, [fp, #20]
   344f8:	blt	51904 <GetDataSlab+0x25a88>
   344fc:	add	r9, r0, #4
   34500:	sub	r0, fp, #136	; 0x88
   34504:	mov	sl, r8
   34508:	mov	lr, #0
   3450c:	orr	r7, r0, #4
   34510:	sub	r0, fp, #96	; 0x60
   34514:	orr	r0, r0, #4
   34518:	str	r0, [sp, #48]	; 0x30
   3451c:	ldr	r0, [sl], #4
   34520:	str	r0, [sp, #56]	; 0x38
   34524:	ldr	r1, [sp, #56]	; 0x38
   34528:	ldr	r0, [sp, #52]	; 0x34
   3452c:	cmp	r2, #1
   34530:	add	r4, r1, r5
   34534:	add	r8, ip, r1, lsl #3
   34538:	blt	34584 <GetDataSlab+0x8708>
   3453c:	ldr	r0, [sp, #68]	; 0x44
   34540:	ldr	r6, [fp, #20]
   34544:	mov	r3, r8
   34548:	add	r5, r0, lr
   3454c:	mov	r0, #0
   34550:	vldr	d16, [r3]
   34554:	add	r3, r3, #8
   34558:	vcvt.s32.f64	s0, d16
   3455c:	vmov	r1, s0
   34560:	strb	r1, [r5, r0]
   34564:	add	r0, r0, #1
   34568:	ldr	r2, [r6]
   3456c:	cmp	r0, r2
   34570:	blt	34550 <GetDataSlab+0x86d4>
   34574:	ldr	r0, [fp, #12]
   34578:	ldr	r1, [r0]
   3457c:	ldr	r0, [fp, #8]
   34580:	ldr	r0, [r0]
   34584:	str	r0, [sp, #52]	; 0x34
   34588:	sub	r0, r0, r1
   3458c:	str	r1, [sp, #56]	; 0x38
   34590:	add	ip, r8, r0, lsl #3
   34594:	add	r5, r4, r0
   34598:	ldr	r0, [fp, #24]
   3459c:	cmp	r0, #2
   345a0:	blt	34650 <GetDataSlab+0x87d4>
   345a4:	mov	r6, #0
   345a8:	mov	r8, #0
   345ac:	ldr	r1, [r7, r6, lsl #2]
   345b0:	mov	r0, r6
   345b4:	add	r1, r1, #1
   345b8:	str	r1, [r7, r6, lsl #2]
   345bc:	ldr	r6, [r9, r6, lsl #2]
   345c0:	sdiv	r4, r1, r6
   345c4:	mls	r1, r4, r6, r1
   345c8:	cmp	r1, #0
   345cc:	bne	34640 <GetDataSlab+0x87c4>
   345d0:	sub	r3, fp, #176	; 0xb0
   345d4:	str	r8, [r7, r0, lsl #2]
   345d8:	add	r1, r3, r0, lsl #2
   345dc:	ldr	r6, [r1, #4]
   345e0:	sdiv	r1, r5, r6
   345e4:	mls	r1, r1, r6, r5
   345e8:	cmp	r1, #0
   345ec:	beq	34608 <GetDataSlab+0x878c>
   345f0:	ldr	r4, [r3, r0, lsl #2]
   345f4:	ldr	r3, [sl, r0, lsl #2]
   345f8:	sub	r1, r6, r1
   345fc:	mla	r1, r3, r4, r1
   34600:	add	r5, r1, r5
   34604:	b	34624 <GetDataSlab+0x87a8>
   34608:	ldr	r1, [sl, r0, lsl #2]
   3460c:	cmp	r1, #0
   34610:	beq	34628 <GetDataSlab+0x87ac>
   34614:	sub	r3, fp, #176	; 0xb0
   34618:	ldr	r3, [r3, r0, lsl #2]
   3461c:	mla	r5, r3, r1, r5
   34620:	mul	r1, r3, r1
   34624:	add	ip, ip, r1, lsl #3
   34628:	ldr	r1, [fp, #24]
   3462c:	add	r6, r0, #1
   34630:	add	r0, r0, #2
   34634:	cmp	r0, r1
   34638:	blt	345ac <GetDataSlab+0x8730>
   3463c:	b	34650 <GetDataSlab+0x87d4>
   34640:	ldr	r1, [sp, #48]	; 0x30
   34644:	ldr	r0, [r1, r0, lsl #2]
   34648:	add	ip, ip, r0, lsl #3
   3464c:	add	r5, r0, r5
   34650:	ldr	r1, [sp, #60]	; 0x3c
   34654:	add	lr, r2, lr
   34658:	mov	r0, #0
   3465c:	cmp	lr, r1
   34660:	blt	34524 <GetDataSlab+0x86a8>
   34664:	b	2e97c <GetDataSlab+0x2b00>
   34668:	ldr	r5, [r3]
   3466c:	mov	r3, #0
   34670:	sub	ip, fp, #176	; 0xb0
   34674:	sub	sl, fp, #96	; 0x60
   34678:	str	r9, [sp, #40]	; 0x28
   3467c:	sub	r0, r5, #1
   34680:	str	r0, [fp, #-96]	; 0xffffffa0
   34684:	ldr	r0, [fp, #8]
   34688:	ldr	r0, [r0]
   3468c:	str	r0, [fp, #-176]	; 0xffffff50
   34690:	str	r0, [sp, #32]
   34694:	ldr	r0, [fp, #24]
   34698:	ldr	r1, [r6]
   3469c:	cmp	r0, #2
   346a0:	mov	r0, r1
   346a4:	str	r1, [sp, #60]	; 0x3c
   346a8:	blt	34818 <GetDataSlab+0x899c>
   346ac:	ldr	r0, [fp, #8]
   346b0:	ldr	r6, [sp, #32]
   346b4:	mov	lr, #1
   346b8:	mov	r3, #0
   346bc:	str	r1, [sp, #60]	; 0x3c
   346c0:	sub	r2, r0, #4
   346c4:	sub	r4, r0, #12
   346c8:	mov	r0, #0
   346cc:	mov	r7, r6
   346d0:	str	r0, [sp, #52]	; 0x34
   346d4:	mov	r0, r1
   346d8:	ldr	r0, [fp, #16]
   346dc:	str	r7, [sp, #44]	; 0x2c
   346e0:	str	r4, [sp, #48]	; 0x30
   346e4:	ldr	r0, [r0, lr, lsl #2]
   346e8:	str	r6, [ip, lr, lsl #2]
   346ec:	sub	r9, r0, #1
   346f0:	ldr	r0, [fp, #8]
   346f4:	str	r9, [sl, lr, lsl #2]
   346f8:	ldr	sl, [sp, #52]	; 0x34
   346fc:	ldr	ip, [r0, lr, lsl #2]
   34700:	add	sl, sl, #1
   34704:	cmp	sl, #4
   34708:	str	sl, [sp, #52]	; 0x34
   3470c:	str	ip, [sp, #36]	; 0x24
   34710:	bcs	34720 <GetDataSlab+0x88a4>
   34714:	mov	r7, ip
   34718:	mov	r0, lr
   3471c:	b	347b4 <GetDataSlab+0x8938>
   34720:	vmov.i32	q9, #1	; 0x00000001
   34724:	vmov.i32	q10, #1	; 0x00000001
   34728:	vmov.i32	q8, #1	; 0x00000001
   3472c:	bic	r0, sl, #3
   34730:	bic	r8, lr, #3
   34734:	vmov.32	d23[1], ip
   34738:	mvn	r7, #15
   3473c:	vmov.32	d18[0], r6
   34740:	vmov.32	d20[0], r9
   34744:	str	r0, [sp, #28]
   34748:	sub	r0, lr, r0
   3474c:	mov	r6, r4
   34750:	vorr	d16, d18, d18
   34754:	vmov.i32	q9, #1	; 0x00000001
   34758:	vorr	d18, d20, d20
   3475c:	vld1.32	{d20-d21}, [r6], r7
   34760:	subs	r8, r8, #4
   34764:	vrev64.32	q12, q10
   34768:	vext.8	q12, q12, q12, #8
   3476c:	vext.8	q11, q11, q12, #12
   34770:	vmul.i32	q9, q9, q12
   34774:	vmul.i32	q8, q11, q8
   34778:	vorr	q11, q12, q12
   3477c:	bne	3475c <GetDataSlab+0x88e0>
   34780:	ldr	r7, [sp, #28]
   34784:	vext.8	q11, q9, q8, #8
   34788:	vext.8	q12, q8, q8, #8
   3478c:	ldr	r8, [fp, #12]
   34790:	vmul.i32	q0, q9, q11
   34794:	vmul.i32	q1, q8, q12
   34798:	vmul.i32	q8, q0, d0[1]
   3479c:	vmul.i32	q9, q1, d2[1]
   347a0:	vmov.32	r9, d16[0]
   347a4:	vmov.32	r6, d18[0]
   347a8:	cmp	sl, r7
   347ac:	beq	347c8 <GetDataSlab+0x894c>
   347b0:	vmov.32	r7, d20[0]
   347b4:	mul	r6, r7, r6
   347b8:	ldr	r7, [r2, r0, lsl #2]
   347bc:	subs	r0, r0, #1
   347c0:	mul	r9, r9, r7
   347c4:	bne	347b4 <GetDataSlab+0x8938>
   347c8:	sub	ip, fp, #176	; 0xb0
   347cc:	sub	sl, fp, #96	; 0x60
   347d0:	ldr	r4, [sp, #44]	; 0x2c
   347d4:	mov	r7, r6
   347d8:	str	r6, [ip, lr, lsl #2]
   347dc:	str	r9, [sl, lr, lsl #2]
   347e0:	ldr	r6, [sp, #36]	; 0x24
   347e4:	ldr	r0, [r8, lr, lsl #2]
   347e8:	mla	r3, r0, r4, r3
   347ec:	ldr	r0, [fp, #20]
   347f0:	ldr	r4, [sp, #60]	; 0x3c
   347f4:	ldr	r0, [r0, lr, lsl #2]
   347f8:	add	lr, lr, #1
   347fc:	mul	r4, r0, r4
   34800:	ldr	r0, [fp, #24]
   34804:	str	r4, [sp, #60]	; 0x3c
   34808:	ldr	r4, [sp, #48]	; 0x30
   3480c:	cmp	lr, r0
   34810:	add	r4, r4, #4
   34814:	bne	346d8 <GetDataSlab+0x885c>
   34818:	ldr	r0, [sp, #56]	; 0x38
   3481c:	cmp	r5, #1
   34820:	add	sl, r0, r3, lsl #3
   34824:	bne	44148 <GetDataSlab+0x182cc>
   34828:	ldr	r0, [sp, #60]	; 0x3c
   3482c:	cmp	r0, #1
   34830:	blt	442c8 <GetDataSlab+0x1844c>
   34834:	ldr	r0, [fp, #20]
   34838:	ldr	lr, [r8], #4
   3483c:	mov	ip, #0
   34840:	add	r9, r0, #4
   34844:	sub	r0, fp, #136	; 0x88
   34848:	orr	r2, r0, #4
   3484c:	sub	r0, fp, #96	; 0x60
   34850:	orr	r0, r0, #4
   34854:	str	r0, [sp, #52]	; 0x34
   34858:	add	r6, lr, r3
   3485c:	add	r3, sl, lr, lsl #3
   34860:	cmp	r1, #1
   34864:	blt	348a8 <GetDataSlab+0x8a2c>
   34868:	ldr	r0, [sp, #68]	; 0x44
   3486c:	ldr	r7, [fp, #20]
   34870:	mov	r4, r3
   34874:	add	r5, r0, ip
   34878:	mov	r0, #0
   3487c:	ldrb	r1, [r4], #8
   34880:	strb	r1, [r5, r0]
   34884:	add	r0, r0, #1
   34888:	ldr	r1, [r7]
   3488c:	cmp	r0, r1
   34890:	blt	3487c <GetDataSlab+0x8a00>
   34894:	ldr	r0, [fp, #12]
   34898:	ldr	lr, [r0]
   3489c:	ldr	r0, [fp, #8]
   348a0:	ldr	r0, [r0]
   348a4:	str	r0, [sp, #32]
   348a8:	ldr	r0, [sp, #32]
   348ac:	sub	r0, r0, lr
   348b0:	add	sl, r3, r0, lsl #3
   348b4:	add	r3, r6, r0
   348b8:	ldr	r0, [fp, #24]
   348bc:	cmp	r0, #2
   348c0:	blt	34970 <GetDataSlab+0x8af4>
   348c4:	mov	r0, #0
   348c8:	mov	r5, r0
   348cc:	ldr	r0, [r2, r0, lsl #2]
   348d0:	add	r0, r0, #1
   348d4:	str	r0, [r2, r5, lsl #2]
   348d8:	ldr	r7, [r9, r5, lsl #2]
   348dc:	sdiv	r6, r0, r7
   348e0:	mls	r0, r6, r7, r0
   348e4:	cmp	r0, #0
   348e8:	bne	34960 <GetDataSlab+0x8ae4>
   348ec:	mov	r0, #0
   348f0:	sub	r4, fp, #176	; 0xb0
   348f4:	str	r0, [r2, r5, lsl #2]
   348f8:	add	r0, r4, r5, lsl #2
   348fc:	ldr	r0, [r0, #4]
   34900:	sdiv	r6, r3, r0
   34904:	mls	r7, r6, r0, r3
   34908:	cmp	r7, #0
   3490c:	beq	34928 <GetDataSlab+0x8aac>
   34910:	ldr	r6, [r4, r5, lsl #2]
   34914:	ldr	r4, [r8, r5, lsl #2]
   34918:	sub	r0, r0, r7
   3491c:	mla	r0, r4, r6, r0
   34920:	add	r3, r0, r3
   34924:	b	34944 <GetDataSlab+0x8ac8>
   34928:	ldr	r0, [r8, r5, lsl #2]
   3492c:	cmp	r0, #0
   34930:	beq	34948 <GetDataSlab+0x8acc>
   34934:	sub	r4, fp, #176	; 0xb0
   34938:	ldr	r4, [r4, r5, lsl #2]
   3493c:	mla	r3, r4, r0, r3
   34940:	mul	r0, r4, r0
   34944:	add	sl, sl, r0, lsl #3
   34948:	add	r0, r5, #1
   3494c:	add	r4, r5, #2
   34950:	ldr	r5, [fp, #24]
   34954:	cmp	r4, r5
   34958:	blt	348c8 <GetDataSlab+0x8a4c>
   3495c:	b	34970 <GetDataSlab+0x8af4>
   34960:	ldr	r0, [sp, #52]	; 0x34
   34964:	ldr	r0, [r0, r5, lsl #2]
   34968:	add	sl, sl, r0, lsl #3
   3496c:	add	r3, r0, r3
   34970:	ldr	r0, [sp, #60]	; 0x3c
   34974:	add	ip, r1, ip
   34978:	cmp	ip, r0
   3497c:	blt	34858 <GetDataSlab+0x89dc>
   34980:	b	442c8 <GetDataSlab+0x1844c>
   34984:	ldr	r4, [r3]
   34988:	ldr	r9, [fp, #8]
   3498c:	mov	r5, #0
   34990:	sub	r3, fp, #176	; 0xb0
   34994:	sub	sl, fp, #96	; 0x60
   34998:	sub	r0, r4, #1
   3499c:	str	r0, [fp, #-96]	; 0xffffffa0
   349a0:	ldr	r0, [r9]
   349a4:	str	r0, [fp, #-176]	; 0xffffff50
   349a8:	str	r0, [sp, #52]	; 0x34
   349ac:	ldr	r0, [fp, #24]
   349b0:	ldr	r2, [r6]
   349b4:	cmp	r0, #2
   349b8:	mov	r0, r2
   349bc:	str	r2, [sp, #60]	; 0x3c
   349c0:	blt	34b30 <GetDataSlab+0x8cb4>
   349c4:	ldr	r7, [sp, #52]	; 0x34
   349c8:	sub	r0, r9, #4
   349cc:	sub	r6, r9, #12
   349d0:	mov	ip, #1
   349d4:	mov	lr, #0
   349d8:	mov	r5, #0
   349dc:	str	r2, [sp, #60]	; 0x3c
   349e0:	mov	r1, r7
   349e4:	str	r7, [sp, #48]	; 0x30
   349e8:	mov	r1, r2
   349ec:	ldr	r1, [fp, #16]
   349f0:	add	lr, lr, #1
   349f4:	str	r6, [sp, #44]	; 0x2c
   349f8:	cmp	lr, #4
   349fc:	str	lr, [sp, #40]	; 0x28
   34a00:	ldr	r1, [r1, ip, lsl #2]
   34a04:	str	r7, [r3, ip, lsl #2]
   34a08:	sub	r8, r1, #1
   34a0c:	str	r8, [sl, ip, lsl #2]
   34a10:	ldr	sl, [r9, ip, lsl #2]
   34a14:	str	sl, [sp, #36]	; 0x24
   34a18:	bcs	34a28 <GetDataSlab+0x8bac>
   34a1c:	mov	r1, sl
   34a20:	mov	r3, ip
   34a24:	b	34ac4 <GetDataSlab+0x8c48>
   34a28:	vmov.i32	q9, #1	; 0x00000001
   34a2c:	vmov.i32	q10, #1	; 0x00000001
   34a30:	vmov.i32	q8, #1	; 0x00000001
   34a34:	bic	r1, lr, #3
   34a38:	bic	r9, ip, #3
   34a3c:	vmov.32	d23[1], sl
   34a40:	vmov.32	d18[0], r7
   34a44:	vmov.32	d20[0], r8
   34a48:	str	r1, [sp, #32]
   34a4c:	sub	r3, ip, r1
   34a50:	mov	r1, r6
   34a54:	mvn	r7, #15
   34a58:	vorr	d16, d18, d18
   34a5c:	vmov.i32	q9, #1	; 0x00000001
   34a60:	vorr	d18, d20, d20
   34a64:	vld1.32	{d20-d21}, [r1], r7
   34a68:	subs	r9, r9, #4
   34a6c:	vrev64.32	q12, q10
   34a70:	vext.8	q12, q12, q12, #8
   34a74:	vext.8	q11, q11, q12, #12
   34a78:	vmul.i32	q9, q9, q12
   34a7c:	vmul.i32	q8, q11, q8
   34a80:	vorr	q11, q12, q12
   34a84:	bne	34a64 <GetDataSlab+0x8be8>
   34a88:	ldr	r1, [sp, #32]
   34a8c:	vext.8	q11, q9, q8, #8
   34a90:	vext.8	q12, q8, q8, #8
   34a94:	vmul.i32	q0, q9, q11
   34a98:	vmul.i32	q1, q8, q12
   34a9c:	vmul.i32	q8, q0, d0[1]
   34aa0:	vmul.i32	q9, q1, d2[1]
   34aa4:	vmov.32	r8, d16[0]
   34aa8:	vmov.32	r7, d18[0]
   34aac:	cmp	lr, r1
   34ab0:	bne	34abc <GetDataSlab+0x8c40>
   34ab4:	ldr	r9, [fp, #8]
   34ab8:	b	34ad8 <GetDataSlab+0x8c5c>
   34abc:	ldr	r9, [fp, #8]
   34ac0:	vmov.32	r1, d20[0]
   34ac4:	mul	r7, r1, r7
   34ac8:	ldr	r1, [r0, r3, lsl #2]
   34acc:	subs	r3, r3, #1
   34ad0:	mul	r8, r8, r1
   34ad4:	bne	34ac4 <GetDataSlab+0x8c48>
   34ad8:	sub	sl, fp, #96	; 0x60
   34adc:	sub	r3, fp, #176	; 0xb0
   34ae0:	ldr	r6, [sp, #48]	; 0x30
   34ae4:	ldr	lr, [sp, #60]	; 0x3c
   34ae8:	str	r7, [sp, #48]	; 0x30
   34aec:	str	r8, [sl, ip, lsl #2]
   34af0:	ldr	r8, [fp, #12]
   34af4:	str	r7, [r3, ip, lsl #2]
   34af8:	ldr	r7, [sp, #36]	; 0x24
   34afc:	ldr	r1, [r8, ip, lsl #2]
   34b00:	mla	r5, r1, r6, r5
   34b04:	ldr	r1, [fp, #20]
   34b08:	ldr	r6, [sp, #44]	; 0x2c
   34b0c:	ldr	r1, [r1, ip, lsl #2]
   34b10:	add	ip, ip, #1
   34b14:	add	r6, r6, #4
   34b18:	mul	lr, r1, lr
   34b1c:	ldr	r1, [fp, #24]
   34b20:	str	lr, [sp, #60]	; 0x3c
   34b24:	ldr	lr, [sp, #40]	; 0x28
   34b28:	cmp	ip, r1
   34b2c:	bne	349ec <GetDataSlab+0x8b70>
   34b30:	ldr	r0, [sp, #56]	; 0x38
   34b34:	cmp	r4, #1
   34b38:	add	sl, r0, r5
   34b3c:	bne	4461c <GetDataSlab+0x187a0>
   34b40:	ldr	r0, [sp, #60]	; 0x3c
   34b44:	cmp	r0, #1
   34b48:	blt	51918 <GetDataSlab+0x25a9c>
   34b4c:	ldr	r0, [fp, #20]
   34b50:	mov	r9, r8
   34b54:	mov	r8, #0
   34b58:	add	ip, r0, #4
   34b5c:	sub	r0, fp, #136	; 0x88
   34b60:	orr	r7, r0, #4
   34b64:	sub	r0, fp, #96	; 0x60
   34b68:	orr	r0, r0, #4
   34b6c:	str	r0, [sp, #48]	; 0x30
   34b70:	ldr	r0, [r9], #4
   34b74:	str	r0, [sp, #56]	; 0x38
   34b78:	ldr	r6, [sp, #56]	; 0x38
   34b7c:	ldr	r1, [sp, #52]	; 0x34
   34b80:	cmp	r2, #1
   34b84:	add	r0, r6, r5
   34b88:	add	r3, sl, r6
   34b8c:	blt	34bc8 <GetDataSlab+0x8d4c>
   34b90:	ldr	r1, [sp, #68]	; 0x44
   34b94:	ldr	r6, [fp, #20]
   34b98:	mov	r5, #0
   34b9c:	add	r1, r1, r8
   34ba0:	ldrb	r2, [r3, r5]
   34ba4:	strb	r2, [r1, r5]
   34ba8:	add	r5, r5, #1
   34bac:	ldr	r2, [r6]
   34bb0:	cmp	r5, r2
   34bb4:	blt	34ba0 <GetDataSlab+0x8d24>
   34bb8:	ldr	r1, [fp, #12]
   34bbc:	ldr	r6, [r1]
   34bc0:	ldr	r1, [fp, #8]
   34bc4:	ldr	r1, [r1]
   34bc8:	str	r1, [sp, #52]	; 0x34
   34bcc:	sub	r1, r1, r6
   34bd0:	str	r6, [sp, #56]	; 0x38
   34bd4:	add	r5, r0, r1
   34bd8:	ldr	r0, [fp, #24]
   34bdc:	add	sl, r3, r1
   34be0:	cmp	r0, #2
   34be4:	blt	34c8c <GetDataSlab+0x8e10>
   34be8:	mov	r1, #0
   34bec:	mov	r0, r1
   34bf0:	ldr	r1, [r7, r1, lsl #2]
   34bf4:	add	r1, r1, #1
   34bf8:	str	r1, [r7, r0, lsl #2]
   34bfc:	ldr	r6, [ip, r0, lsl #2]
   34c00:	sdiv	lr, r1, r6
   34c04:	mls	r1, lr, r6, r1
   34c08:	cmp	r1, #0
   34c0c:	bne	34c7c <GetDataSlab+0x8e00>
   34c10:	mov	r1, #0
   34c14:	sub	r3, fp, #176	; 0xb0
   34c18:	str	r1, [r7, r0, lsl #2]
   34c1c:	add	r1, r3, r0, lsl #2
   34c20:	ldr	r1, [r1, #4]
   34c24:	sdiv	r6, r5, r1
   34c28:	mls	r6, r6, r1, r5
   34c2c:	cmp	r6, #0
   34c30:	beq	34c50 <GetDataSlab+0x8dd4>
   34c34:	ldr	r4, [r3, r0, lsl #2]
   34c38:	ldr	r3, [r9, r0, lsl #2]
   34c3c:	sub	r1, r1, r6
   34c40:	mla	r1, r3, r4, r1
   34c44:	add	r5, r1, r5
   34c48:	add	sl, sl, r1
   34c4c:	b	34c64 <GetDataSlab+0x8de8>
   34c50:	ldr	r1, [r9, r0, lsl #2]
   34c54:	cmp	r1, #0
   34c58:	ldrne	r3, [r3, r0, lsl #2]
   34c5c:	mlane	r5, r3, r1, r5
   34c60:	mlane	sl, r3, r1, sl
   34c64:	ldr	r3, [fp, #24]
   34c68:	add	r1, r0, #1
   34c6c:	add	r0, r0, #2
   34c70:	cmp	r0, r3
   34c74:	blt	34bec <GetDataSlab+0x8d70>
   34c78:	b	34c8c <GetDataSlab+0x8e10>
   34c7c:	ldr	r1, [sp, #48]	; 0x30
   34c80:	ldr	r0, [r1, r0, lsl #2]
   34c84:	add	sl, sl, r0
   34c88:	add	r5, r0, r5
   34c8c:	ldr	r1, [sp, #60]	; 0x3c
   34c90:	add	r8, r2, r8
   34c94:	mov	r0, #0
   34c98:	cmp	r8, r1
   34c9c:	blt	34b78 <GetDataSlab+0x8cfc>
   34ca0:	b	2e97c <GetDataSlab+0x2b00>
   34ca4:	ldr	r4, [r3]
   34ca8:	ldr	r9, [fp, #8]
   34cac:	mov	r5, #0
   34cb0:	sub	r3, fp, #176	; 0xb0
   34cb4:	sub	sl, fp, #96	; 0x60
   34cb8:	sub	r0, r4, #1
   34cbc:	str	r0, [fp, #-96]	; 0xffffffa0
   34cc0:	ldr	r0, [r9]
   34cc4:	str	r0, [fp, #-176]	; 0xffffff50
   34cc8:	str	r0, [sp, #52]	; 0x34
   34ccc:	ldr	r0, [fp, #24]
   34cd0:	ldr	r2, [r6]
   34cd4:	cmp	r0, #2
   34cd8:	mov	r0, r2
   34cdc:	str	r2, [sp, #60]	; 0x3c
   34ce0:	blt	34e50 <GetDataSlab+0x8fd4>
   34ce4:	ldr	r7, [sp, #52]	; 0x34
   34ce8:	sub	r0, r9, #4
   34cec:	sub	r6, r9, #12
   34cf0:	mov	ip, #1
   34cf4:	mov	lr, #0
   34cf8:	mov	r5, #0
   34cfc:	str	r2, [sp, #60]	; 0x3c
   34d00:	mov	r1, r7
   34d04:	str	r7, [sp, #48]	; 0x30
   34d08:	mov	r1, r2
   34d0c:	ldr	r1, [fp, #16]
   34d10:	add	lr, lr, #1
   34d14:	str	r6, [sp, #44]	; 0x2c
   34d18:	cmp	lr, #4
   34d1c:	str	lr, [sp, #40]	; 0x28
   34d20:	ldr	r1, [r1, ip, lsl #2]
   34d24:	str	r7, [r3, ip, lsl #2]
   34d28:	sub	r8, r1, #1
   34d2c:	str	r8, [sl, ip, lsl #2]
   34d30:	ldr	sl, [r9, ip, lsl #2]
   34d34:	str	sl, [sp, #36]	; 0x24
   34d38:	bcs	34d48 <GetDataSlab+0x8ecc>
   34d3c:	mov	r1, sl
   34d40:	mov	r3, ip
   34d44:	b	34de4 <GetDataSlab+0x8f68>
   34d48:	vmov.i32	q9, #1	; 0x00000001
   34d4c:	vmov.i32	q10, #1	; 0x00000001
   34d50:	vmov.i32	q8, #1	; 0x00000001
   34d54:	bic	r1, lr, #3
   34d58:	bic	r9, ip, #3
   34d5c:	vmov.32	d23[1], sl
   34d60:	vmov.32	d18[0], r7
   34d64:	vmov.32	d20[0], r8
   34d68:	str	r1, [sp, #32]
   34d6c:	sub	r3, ip, r1
   34d70:	mov	r1, r6
   34d74:	mvn	r7, #15
   34d78:	vorr	d16, d18, d18
   34d7c:	vmov.i32	q9, #1	; 0x00000001
   34d80:	vorr	d18, d20, d20
   34d84:	vld1.32	{d20-d21}, [r1], r7
   34d88:	subs	r9, r9, #4
   34d8c:	vrev64.32	q12, q10
   34d90:	vext.8	q12, q12, q12, #8
   34d94:	vext.8	q11, q11, q12, #12
   34d98:	vmul.i32	q9, q9, q12
   34d9c:	vmul.i32	q8, q11, q8
   34da0:	vorr	q11, q12, q12
   34da4:	bne	34d84 <GetDataSlab+0x8f08>
   34da8:	ldr	r1, [sp, #32]
   34dac:	vext.8	q11, q9, q8, #8
   34db0:	vext.8	q12, q8, q8, #8
   34db4:	vmul.i32	q0, q9, q11
   34db8:	vmul.i32	q1, q8, q12
   34dbc:	vmul.i32	q8, q0, d0[1]
   34dc0:	vmul.i32	q9, q1, d2[1]
   34dc4:	vmov.32	r8, d16[0]
   34dc8:	vmov.32	r7, d18[0]
   34dcc:	cmp	lr, r1
   34dd0:	bne	34ddc <GetDataSlab+0x8f60>
   34dd4:	ldr	r9, [fp, #8]
   34dd8:	b	34df8 <GetDataSlab+0x8f7c>
   34ddc:	ldr	r9, [fp, #8]
   34de0:	vmov.32	r1, d20[0]
   34de4:	mul	r7, r1, r7
   34de8:	ldr	r1, [r0, r3, lsl #2]
   34dec:	subs	r3, r3, #1
   34df0:	mul	r8, r8, r1
   34df4:	bne	34de4 <GetDataSlab+0x8f68>
   34df8:	sub	sl, fp, #96	; 0x60
   34dfc:	sub	r3, fp, #176	; 0xb0
   34e00:	ldr	r6, [sp, #48]	; 0x30
   34e04:	ldr	lr, [sp, #60]	; 0x3c
   34e08:	str	r7, [sp, #48]	; 0x30
   34e0c:	str	r8, [sl, ip, lsl #2]
   34e10:	ldr	r8, [fp, #12]
   34e14:	str	r7, [r3, ip, lsl #2]
   34e18:	ldr	r7, [sp, #36]	; 0x24
   34e1c:	ldr	r1, [r8, ip, lsl #2]
   34e20:	mla	r5, r1, r6, r5
   34e24:	ldr	r1, [fp, #20]
   34e28:	ldr	r6, [sp, #44]	; 0x2c
   34e2c:	ldr	r1, [r1, ip, lsl #2]
   34e30:	add	ip, ip, #1
   34e34:	add	r6, r6, #4
   34e38:	mul	lr, r1, lr
   34e3c:	ldr	r1, [fp, #24]
   34e40:	str	lr, [sp, #60]	; 0x3c
   34e44:	ldr	lr, [sp, #40]	; 0x28
   34e48:	cmp	ip, r1
   34e4c:	bne	34d0c <GetDataSlab+0x8e90>
   34e50:	ldr	r0, [sp, #56]	; 0x38
   34e54:	cmp	r4, #1
   34e58:	add	sl, r0, r5, lsl #1
   34e5c:	bne	447b4 <GetDataSlab+0x18938>
   34e60:	ldr	r0, [sp, #60]	; 0x3c
   34e64:	cmp	r0, #1
   34e68:	blt	5192c <GetDataSlab+0x25ab0>
   34e6c:	ldr	r0, [fp, #20]
   34e70:	mov	r9, r8
   34e74:	mov	lr, #0
   34e78:	add	ip, r0, #4
   34e7c:	sub	r0, fp, #136	; 0x88
   34e80:	orr	r7, r0, #4
   34e84:	sub	r0, fp, #96	; 0x60
   34e88:	orr	r0, r0, #4
   34e8c:	str	r0, [sp, #48]	; 0x30
   34e90:	ldr	r0, [r9], #4
   34e94:	str	r0, [sp, #56]	; 0x38
   34e98:	ldr	r3, [sp, #56]	; 0x38
   34e9c:	ldr	r1, [sp, #52]	; 0x34
   34ea0:	cmp	r2, #1
   34ea4:	add	r8, r3, r5
   34ea8:	add	r0, sl, r3, lsl #1
   34eac:	blt	34eec <GetDataSlab+0x9070>
   34eb0:	ldr	r1, [sp, #68]	; 0x44
   34eb4:	ldr	r4, [fp, #20]
   34eb8:	mov	r3, r0
   34ebc:	add	r5, r1, lr
   34ec0:	mov	r1, #0
   34ec4:	ldrb	r2, [r3], #2
   34ec8:	strb	r2, [r5, r1]
   34ecc:	add	r1, r1, #1
   34ed0:	ldr	r2, [r4]
   34ed4:	cmp	r1, r2
   34ed8:	blt	34ec4 <GetDataSlab+0x9048>
   34edc:	ldr	r1, [fp, #12]
   34ee0:	ldr	r3, [r1]
   34ee4:	ldr	r1, [fp, #8]
   34ee8:	ldr	r1, [r1]
   34eec:	str	r1, [sp, #52]	; 0x34
   34ef0:	sub	r1, r1, r3
   34ef4:	str	r3, [sp, #56]	; 0x38
   34ef8:	add	sl, r0, r1, lsl #1
   34efc:	ldr	r0, [fp, #24]
   34f00:	add	r5, r8, r1
   34f04:	cmp	r0, #2
   34f08:	blt	34fb8 <GetDataSlab+0x913c>
   34f0c:	mov	r1, #0
   34f10:	mov	r8, #0
   34f14:	mov	r0, r1
   34f18:	ldr	r1, [r7, r1, lsl #2]
   34f1c:	add	r1, r1, #1
   34f20:	str	r1, [r7, r0, lsl #2]
   34f24:	ldr	r6, [ip, r0, lsl #2]
   34f28:	sdiv	r4, r1, r6
   34f2c:	mls	r1, r4, r6, r1
   34f30:	cmp	r1, #0
   34f34:	bne	34fa8 <GetDataSlab+0x912c>
   34f38:	sub	r3, fp, #176	; 0xb0
   34f3c:	str	r8, [r7, r0, lsl #2]
   34f40:	add	r1, r3, r0, lsl #2
   34f44:	ldr	r1, [r1, #4]
   34f48:	sdiv	r4, r5, r1
   34f4c:	mls	r6, r4, r1, r5
   34f50:	cmp	r6, #0
   34f54:	beq	34f70 <GetDataSlab+0x90f4>
   34f58:	ldr	r4, [r3, r0, lsl #2]
   34f5c:	ldr	r3, [r9, r0, lsl #2]
   34f60:	sub	r1, r1, r6
   34f64:	mla	r1, r3, r4, r1
   34f68:	add	r5, r1, r5
   34f6c:	b	34f8c <GetDataSlab+0x9110>
   34f70:	ldr	r1, [r9, r0, lsl #2]
   34f74:	cmp	r1, #0
   34f78:	beq	34f90 <GetDataSlab+0x9114>
   34f7c:	sub	r3, fp, #176	; 0xb0
   34f80:	ldr	r3, [r3, r0, lsl #2]
   34f84:	mla	r5, r3, r1, r5
   34f88:	mul	r1, r3, r1
   34f8c:	add	sl, sl, r1, lsl #1
   34f90:	ldr	r3, [fp, #24]
   34f94:	add	r1, r0, #1
   34f98:	add	r0, r0, #2
   34f9c:	cmp	r0, r3
   34fa0:	blt	34f14 <GetDataSlab+0x9098>
   34fa4:	b	34fb8 <GetDataSlab+0x913c>
   34fa8:	ldr	r1, [sp, #48]	; 0x30
   34fac:	ldr	r0, [r1, r0, lsl #2]
   34fb0:	add	sl, sl, r0, lsl #1
   34fb4:	add	r5, r0, r5
   34fb8:	ldr	r1, [sp, #60]	; 0x3c
   34fbc:	add	lr, r2, lr
   34fc0:	mov	r0, #0
   34fc4:	cmp	lr, r1
   34fc8:	blt	34e98 <GetDataSlab+0x901c>
   34fcc:	b	2e97c <GetDataSlab+0x2b00>
   34fd0:	ldr	r4, [r3]
   34fd4:	ldr	r9, [fp, #8]
   34fd8:	mov	r5, #0
   34fdc:	sub	r3, fp, #176	; 0xb0
   34fe0:	sub	sl, fp, #96	; 0x60
   34fe4:	sub	r0, r4, #1
   34fe8:	str	r0, [fp, #-96]	; 0xffffffa0
   34fec:	ldr	r0, [r9]
   34ff0:	str	r0, [fp, #-176]	; 0xffffff50
   34ff4:	str	r0, [sp, #52]	; 0x34
   34ff8:	ldr	r0, [fp, #24]
   34ffc:	ldr	r2, [r6]
   35000:	cmp	r0, #2
   35004:	mov	r0, r2
   35008:	str	r2, [sp, #60]	; 0x3c
   3500c:	blt	3517c <GetDataSlab+0x9300>
   35010:	ldr	r7, [sp, #52]	; 0x34
   35014:	sub	r0, r9, #4
   35018:	sub	r6, r9, #12
   3501c:	mov	ip, #1
   35020:	mov	lr, #0
   35024:	mov	r5, #0
   35028:	str	r2, [sp, #60]	; 0x3c
   3502c:	mov	r1, r7
   35030:	str	r7, [sp, #48]	; 0x30
   35034:	mov	r1, r2
   35038:	ldr	r1, [fp, #16]
   3503c:	add	lr, lr, #1
   35040:	str	r6, [sp, #44]	; 0x2c
   35044:	cmp	lr, #4
   35048:	str	lr, [sp, #40]	; 0x28
   3504c:	ldr	r1, [r1, ip, lsl #2]
   35050:	str	r7, [r3, ip, lsl #2]
   35054:	sub	r8, r1, #1
   35058:	str	r8, [sl, ip, lsl #2]
   3505c:	ldr	sl, [r9, ip, lsl #2]
   35060:	str	sl, [sp, #36]	; 0x24
   35064:	bcs	35074 <GetDataSlab+0x91f8>
   35068:	mov	r1, sl
   3506c:	mov	r3, ip
   35070:	b	35110 <GetDataSlab+0x9294>
   35074:	vmov.i32	q9, #1	; 0x00000001
   35078:	vmov.i32	q10, #1	; 0x00000001
   3507c:	vmov.i32	q8, #1	; 0x00000001
   35080:	bic	r1, lr, #3
   35084:	bic	r9, ip, #3
   35088:	vmov.32	d23[1], sl
   3508c:	vmov.32	d18[0], r7
   35090:	vmov.32	d20[0], r8
   35094:	str	r1, [sp, #32]
   35098:	sub	r3, ip, r1
   3509c:	mov	r1, r6
   350a0:	mvn	r7, #15
   350a4:	vorr	d16, d18, d18
   350a8:	vmov.i32	q9, #1	; 0x00000001
   350ac:	vorr	d18, d20, d20
   350b0:	vld1.32	{d20-d21}, [r1], r7
   350b4:	subs	r9, r9, #4
   350b8:	vrev64.32	q12, q10
   350bc:	vext.8	q12, q12, q12, #8
   350c0:	vext.8	q11, q11, q12, #12
   350c4:	vmul.i32	q9, q9, q12
   350c8:	vmul.i32	q8, q11, q8
   350cc:	vorr	q11, q12, q12
   350d0:	bne	350b0 <GetDataSlab+0x9234>
   350d4:	ldr	r1, [sp, #32]
   350d8:	vext.8	q11, q9, q8, #8
   350dc:	vext.8	q12, q8, q8, #8
   350e0:	vmul.i32	q0, q9, q11
   350e4:	vmul.i32	q1, q8, q12
   350e8:	vmul.i32	q8, q0, d0[1]
   350ec:	vmul.i32	q9, q1, d2[1]
   350f0:	vmov.32	r8, d16[0]
   350f4:	vmov.32	r7, d18[0]
   350f8:	cmp	lr, r1
   350fc:	bne	35108 <GetDataSlab+0x928c>
   35100:	ldr	r9, [fp, #8]
   35104:	b	35124 <GetDataSlab+0x92a8>
   35108:	ldr	r9, [fp, #8]
   3510c:	vmov.32	r1, d20[0]
   35110:	mul	r7, r1, r7
   35114:	ldr	r1, [r0, r3, lsl #2]
   35118:	subs	r3, r3, #1
   3511c:	mul	r8, r8, r1
   35120:	bne	35110 <GetDataSlab+0x9294>
   35124:	sub	sl, fp, #96	; 0x60
   35128:	sub	r3, fp, #176	; 0xb0
   3512c:	ldr	r6, [sp, #48]	; 0x30
   35130:	ldr	lr, [sp, #60]	; 0x3c
   35134:	str	r7, [sp, #48]	; 0x30
   35138:	str	r8, [sl, ip, lsl #2]
   3513c:	ldr	r8, [fp, #12]
   35140:	str	r7, [r3, ip, lsl #2]
   35144:	ldr	r7, [sp, #36]	; 0x24
   35148:	ldr	r1, [r8, ip, lsl #2]
   3514c:	mla	r5, r1, r6, r5
   35150:	ldr	r1, [fp, #20]
   35154:	ldr	r6, [sp, #44]	; 0x2c
   35158:	ldr	r1, [r1, ip, lsl #2]
   3515c:	add	ip, ip, #1
   35160:	add	r6, r6, #4
   35164:	mul	lr, r1, lr
   35168:	ldr	r1, [fp, #24]
   3516c:	str	lr, [sp, #60]	; 0x3c
   35170:	ldr	lr, [sp, #40]	; 0x28
   35174:	cmp	ip, r1
   35178:	bne	35038 <GetDataSlab+0x91bc>
   3517c:	ldr	r0, [sp, #56]	; 0x38
   35180:	cmp	r4, #1
   35184:	add	sl, r0, r5, lsl #1
   35188:	bne	44950 <GetDataSlab+0x18ad4>
   3518c:	ldr	r0, [sp, #60]	; 0x3c
   35190:	cmp	r0, #1
   35194:	blt	51940 <GetDataSlab+0x25ac4>
   35198:	ldr	r0, [fp, #20]
   3519c:	mov	r9, r8
   351a0:	mov	lr, #0
   351a4:	add	ip, r0, #4
   351a8:	sub	r0, fp, #136	; 0x88
   351ac:	orr	r7, r0, #4
   351b0:	sub	r0, fp, #96	; 0x60
   351b4:	orr	r0, r0, #4
   351b8:	str	r0, [sp, #48]	; 0x30
   351bc:	ldr	r0, [r9], #4
   351c0:	str	r0, [sp, #56]	; 0x38
   351c4:	ldr	r3, [sp, #56]	; 0x38
   351c8:	ldr	r1, [sp, #52]	; 0x34
   351cc:	cmp	r2, #1
   351d0:	add	r8, r3, r5
   351d4:	add	r0, sl, r3, lsl #1
   351d8:	blt	35218 <GetDataSlab+0x939c>
   351dc:	ldr	r1, [sp, #68]	; 0x44
   351e0:	ldr	r4, [fp, #20]
   351e4:	mov	r3, r0
   351e8:	add	r5, r1, lr
   351ec:	mov	r1, #0
   351f0:	ldrb	r2, [r3], #2
   351f4:	strb	r2, [r5, r1]
   351f8:	add	r1, r1, #1
   351fc:	ldr	r2, [r4]
   35200:	cmp	r1, r2
   35204:	blt	351f0 <GetDataSlab+0x9374>
   35208:	ldr	r1, [fp, #12]
   3520c:	ldr	r3, [r1]
   35210:	ldr	r1, [fp, #8]
   35214:	ldr	r1, [r1]
   35218:	str	r1, [sp, #52]	; 0x34
   3521c:	sub	r1, r1, r3
   35220:	str	r3, [sp, #56]	; 0x38
   35224:	add	sl, r0, r1, lsl #1
   35228:	ldr	r0, [fp, #24]
   3522c:	add	r5, r8, r1
   35230:	cmp	r0, #2
   35234:	blt	352e4 <GetDataSlab+0x9468>
   35238:	mov	r1, #0
   3523c:	mov	r8, #0
   35240:	mov	r0, r1
   35244:	ldr	r1, [r7, r1, lsl #2]
   35248:	add	r1, r1, #1
   3524c:	str	r1, [r7, r0, lsl #2]
   35250:	ldr	r6, [ip, r0, lsl #2]
   35254:	sdiv	r4, r1, r6
   35258:	mls	r1, r4, r6, r1
   3525c:	cmp	r1, #0
   35260:	bne	352d4 <GetDataSlab+0x9458>
   35264:	sub	r3, fp, #176	; 0xb0
   35268:	str	r8, [r7, r0, lsl #2]
   3526c:	add	r1, r3, r0, lsl #2
   35270:	ldr	r1, [r1, #4]
   35274:	sdiv	r4, r5, r1
   35278:	mls	r6, r4, r1, r5
   3527c:	cmp	r6, #0
   35280:	beq	3529c <GetDataSlab+0x9420>
   35284:	ldr	r4, [r3, r0, lsl #2]
   35288:	ldr	r3, [r9, r0, lsl #2]
   3528c:	sub	r1, r1, r6
   35290:	mla	r1, r3, r4, r1
   35294:	add	r5, r1, r5
   35298:	b	352b8 <GetDataSlab+0x943c>
   3529c:	ldr	r1, [r9, r0, lsl #2]
   352a0:	cmp	r1, #0
   352a4:	beq	352bc <GetDataSlab+0x9440>
   352a8:	sub	r3, fp, #176	; 0xb0
   352ac:	ldr	r3, [r3, r0, lsl #2]
   352b0:	mla	r5, r3, r1, r5
   352b4:	mul	r1, r3, r1
   352b8:	add	sl, sl, r1, lsl #1
   352bc:	ldr	r3, [fp, #24]
   352c0:	add	r1, r0, #1
   352c4:	add	r0, r0, #2
   352c8:	cmp	r0, r3
   352cc:	blt	35240 <GetDataSlab+0x93c4>
   352d0:	b	352e4 <GetDataSlab+0x9468>
   352d4:	ldr	r1, [sp, #48]	; 0x30
   352d8:	ldr	r0, [r1, r0, lsl #2]
   352dc:	add	sl, sl, r0, lsl #1
   352e0:	add	r5, r0, r5
   352e4:	ldr	r1, [sp, #60]	; 0x3c
   352e8:	add	lr, r2, lr
   352ec:	mov	r0, #0
   352f0:	cmp	lr, r1
   352f4:	blt	351c4 <GetDataSlab+0x9348>
   352f8:	b	2e97c <GetDataSlab+0x2b00>
   352fc:	ldr	r4, [r3]
   35300:	ldr	r9, [fp, #8]
   35304:	mov	r5, #0
   35308:	sub	r3, fp, #176	; 0xb0
   3530c:	sub	sl, fp, #96	; 0x60
   35310:	sub	r0, r4, #1
   35314:	str	r0, [fp, #-96]	; 0xffffffa0
   35318:	ldr	r0, [r9]
   3531c:	str	r0, [fp, #-176]	; 0xffffff50
   35320:	str	r0, [sp, #52]	; 0x34
   35324:	ldr	r0, [fp, #24]
   35328:	ldr	r2, [r6]
   3532c:	cmp	r0, #2
   35330:	mov	r0, r2
   35334:	str	r2, [sp, #60]	; 0x3c
   35338:	blt	354a8 <GetDataSlab+0x962c>
   3533c:	ldr	r7, [sp, #52]	; 0x34
   35340:	sub	r0, r9, #4
   35344:	sub	r6, r9, #12
   35348:	mov	ip, #1
   3534c:	mov	lr, #0
   35350:	mov	r5, #0
   35354:	str	r2, [sp, #60]	; 0x3c
   35358:	mov	r1, r7
   3535c:	str	r7, [sp, #48]	; 0x30
   35360:	mov	r1, r2
   35364:	ldr	r1, [fp, #16]
   35368:	add	lr, lr, #1
   3536c:	str	r6, [sp, #44]	; 0x2c
   35370:	cmp	lr, #4
   35374:	str	lr, [sp, #40]	; 0x28
   35378:	ldr	r1, [r1, ip, lsl #2]
   3537c:	str	r7, [r3, ip, lsl #2]
   35380:	sub	r8, r1, #1
   35384:	str	r8, [sl, ip, lsl #2]
   35388:	ldr	sl, [r9, ip, lsl #2]
   3538c:	str	sl, [sp, #36]	; 0x24
   35390:	bcs	353a0 <GetDataSlab+0x9524>
   35394:	mov	r1, sl
   35398:	mov	r3, ip
   3539c:	b	3543c <GetDataSlab+0x95c0>
   353a0:	vmov.i32	q9, #1	; 0x00000001
   353a4:	vmov.i32	q10, #1	; 0x00000001
   353a8:	vmov.i32	q8, #1	; 0x00000001
   353ac:	bic	r1, lr, #3
   353b0:	bic	r9, ip, #3
   353b4:	vmov.32	d23[1], sl
   353b8:	vmov.32	d18[0], r7
   353bc:	vmov.32	d20[0], r8
   353c0:	str	r1, [sp, #32]
   353c4:	sub	r3, ip, r1
   353c8:	mov	r1, r6
   353cc:	mvn	r7, #15
   353d0:	vorr	d16, d18, d18
   353d4:	vmov.i32	q9, #1	; 0x00000001
   353d8:	vorr	d18, d20, d20
   353dc:	vld1.32	{d20-d21}, [r1], r7
   353e0:	subs	r9, r9, #4
   353e4:	vrev64.32	q12, q10
   353e8:	vext.8	q12, q12, q12, #8
   353ec:	vext.8	q11, q11, q12, #12
   353f0:	vmul.i32	q9, q9, q12
   353f4:	vmul.i32	q8, q11, q8
   353f8:	vorr	q11, q12, q12
   353fc:	bne	353dc <GetDataSlab+0x9560>
   35400:	ldr	r1, [sp, #32]
   35404:	vext.8	q11, q9, q8, #8
   35408:	vext.8	q12, q8, q8, #8
   3540c:	vmul.i32	q0, q9, q11
   35410:	vmul.i32	q1, q8, q12
   35414:	vmul.i32	q8, q0, d0[1]
   35418:	vmul.i32	q9, q1, d2[1]
   3541c:	vmov.32	r8, d16[0]
   35420:	vmov.32	r7, d18[0]
   35424:	cmp	lr, r1
   35428:	bne	35434 <GetDataSlab+0x95b8>
   3542c:	ldr	r9, [fp, #8]
   35430:	b	35450 <GetDataSlab+0x95d4>
   35434:	ldr	r9, [fp, #8]
   35438:	vmov.32	r1, d20[0]
   3543c:	mul	r7, r1, r7
   35440:	ldr	r1, [r0, r3, lsl #2]
   35444:	subs	r3, r3, #1
   35448:	mul	r8, r8, r1
   3544c:	bne	3543c <GetDataSlab+0x95c0>
   35450:	sub	sl, fp, #96	; 0x60
   35454:	sub	r3, fp, #176	; 0xb0
   35458:	ldr	r6, [sp, #48]	; 0x30
   3545c:	ldr	lr, [sp, #60]	; 0x3c
   35460:	str	r7, [sp, #48]	; 0x30
   35464:	str	r8, [sl, ip, lsl #2]
   35468:	ldr	r8, [fp, #12]
   3546c:	str	r7, [r3, ip, lsl #2]
   35470:	ldr	r7, [sp, #36]	; 0x24
   35474:	ldr	r1, [r8, ip, lsl #2]
   35478:	mla	r5, r1, r6, r5
   3547c:	ldr	r1, [fp, #20]
   35480:	ldr	r6, [sp, #44]	; 0x2c
   35484:	ldr	r1, [r1, ip, lsl #2]
   35488:	add	ip, ip, #1
   3548c:	add	r6, r6, #4
   35490:	mul	lr, r1, lr
   35494:	ldr	r1, [fp, #24]
   35498:	str	lr, [sp, #60]	; 0x3c
   3549c:	ldr	lr, [sp, #40]	; 0x28
   354a0:	cmp	ip, r1
   354a4:	bne	35364 <GetDataSlab+0x94e8>
   354a8:	ldr	r0, [sp, #56]	; 0x38
   354ac:	cmp	r4, #1
   354b0:	add	sl, r0, r5, lsl #2
   354b4:	bne	44aec <GetDataSlab+0x18c70>
   354b8:	ldr	r0, [sp, #60]	; 0x3c
   354bc:	cmp	r0, #1
   354c0:	blt	51954 <GetDataSlab+0x25ad8>
   354c4:	ldr	r0, [fp, #20]
   354c8:	mov	r9, r8
   354cc:	mov	r8, #0
   354d0:	add	ip, r0, #4
   354d4:	sub	r0, fp, #136	; 0x88
   354d8:	orr	r7, r0, #4
   354dc:	sub	r0, fp, #96	; 0x60
   354e0:	orr	r0, r0, #4
   354e4:	str	r0, [sp, #48]	; 0x30
   354e8:	ldr	r0, [r9], #4
   354ec:	str	r0, [sp, #56]	; 0x38
   354f0:	ldr	r6, [sp, #56]	; 0x38
   354f4:	ldr	r1, [sp, #52]	; 0x34
   354f8:	cmp	r2, #1
   354fc:	add	r0, r6, r5
   35500:	add	r3, sl, r6, lsl #2
   35504:	blt	35540 <GetDataSlab+0x96c4>
   35508:	ldr	r1, [sp, #68]	; 0x44
   3550c:	ldr	r6, [fp, #20]
   35510:	mov	r5, #0
   35514:	add	r1, r1, r8
   35518:	ldr	r2, [r3, r5, lsl #2]
   3551c:	strb	r2, [r1, r5]
   35520:	add	r5, r5, #1
   35524:	ldr	r2, [r6]
   35528:	cmp	r5, r2
   3552c:	blt	35518 <GetDataSlab+0x969c>
   35530:	ldr	r1, [fp, #12]
   35534:	ldr	r6, [r1]
   35538:	ldr	r1, [fp, #8]
   3553c:	ldr	r1, [r1]
   35540:	str	r1, [sp, #52]	; 0x34
   35544:	sub	r1, r1, r6
   35548:	str	r6, [sp, #56]	; 0x38
   3554c:	add	r5, r0, r1
   35550:	ldr	r0, [fp, #24]
   35554:	add	sl, r3, r1, lsl #2
   35558:	cmp	r0, #2
   3555c:	blt	35608 <GetDataSlab+0x978c>
   35560:	mov	r1, #0
   35564:	mov	r0, r1
   35568:	ldr	r1, [r7, r1, lsl #2]
   3556c:	add	r1, r1, #1
   35570:	str	r1, [r7, r0, lsl #2]
   35574:	ldr	r6, [ip, r0, lsl #2]
   35578:	sdiv	lr, r1, r6
   3557c:	mls	r1, lr, r6, r1
   35580:	cmp	r1, #0
   35584:	bne	355f8 <GetDataSlab+0x977c>
   35588:	mov	r1, #0
   3558c:	sub	r3, fp, #176	; 0xb0
   35590:	str	r1, [r7, r0, lsl #2]
   35594:	add	r1, r3, r0, lsl #2
   35598:	ldr	r1, [r1, #4]
   3559c:	sdiv	r6, r5, r1
   355a0:	mls	r6, r6, r1, r5
   355a4:	cmp	r6, #0
   355a8:	beq	355c4 <GetDataSlab+0x9748>
   355ac:	ldr	r4, [r3, r0, lsl #2]
   355b0:	ldr	r3, [r9, r0, lsl #2]
   355b4:	sub	r1, r1, r6
   355b8:	mla	r1, r3, r4, r1
   355bc:	add	r5, r1, r5
   355c0:	b	355dc <GetDataSlab+0x9760>
   355c4:	ldr	r1, [r9, r0, lsl #2]
   355c8:	cmp	r1, #0
   355cc:	beq	355e0 <GetDataSlab+0x9764>
   355d0:	ldr	r3, [r3, r0, lsl #2]
   355d4:	mla	r5, r3, r1, r5
   355d8:	mul	r1, r3, r1
   355dc:	add	sl, sl, r1, lsl #2
   355e0:	ldr	r3, [fp, #24]
   355e4:	add	r1, r0, #1
   355e8:	add	r0, r0, #2
   355ec:	cmp	r0, r3
   355f0:	blt	35564 <GetDataSlab+0x96e8>
   355f4:	b	35608 <GetDataSlab+0x978c>
   355f8:	ldr	r1, [sp, #48]	; 0x30
   355fc:	ldr	r0, [r1, r0, lsl #2]
   35600:	add	sl, sl, r0, lsl #2
   35604:	add	r5, r0, r5
   35608:	ldr	r1, [sp, #60]	; 0x3c
   3560c:	add	r8, r2, r8
   35610:	mov	r0, #0
   35614:	cmp	r8, r1
   35618:	blt	354f0 <GetDataSlab+0x9674>
   3561c:	b	2e97c <GetDataSlab+0x2b00>
   35620:	ldr	r4, [r3]
   35624:	ldr	r9, [fp, #8]
   35628:	mov	r5, #0
   3562c:	sub	r3, fp, #176	; 0xb0
   35630:	sub	sl, fp, #96	; 0x60
   35634:	sub	r0, r4, #1
   35638:	str	r0, [fp, #-96]	; 0xffffffa0
   3563c:	ldr	r0, [r9]
   35640:	str	r0, [fp, #-176]	; 0xffffff50
   35644:	str	r0, [sp, #52]	; 0x34
   35648:	ldr	r0, [fp, #24]
   3564c:	ldr	r2, [r6]
   35650:	cmp	r0, #2
   35654:	mov	r0, r2
   35658:	str	r2, [sp, #60]	; 0x3c
   3565c:	blt	357cc <GetDataSlab+0x9950>
   35660:	ldr	r7, [sp, #52]	; 0x34
   35664:	sub	r0, r9, #4
   35668:	sub	r6, r9, #12
   3566c:	mov	ip, #1
   35670:	mov	lr, #0
   35674:	mov	r5, #0
   35678:	str	r2, [sp, #60]	; 0x3c
   3567c:	mov	r1, r7
   35680:	str	r7, [sp, #48]	; 0x30
   35684:	mov	r1, r2
   35688:	ldr	r1, [fp, #16]
   3568c:	add	lr, lr, #1
   35690:	str	r6, [sp, #44]	; 0x2c
   35694:	cmp	lr, #4
   35698:	str	lr, [sp, #40]	; 0x28
   3569c:	ldr	r1, [r1, ip, lsl #2]
   356a0:	str	r7, [r3, ip, lsl #2]
   356a4:	sub	r8, r1, #1
   356a8:	str	r8, [sl, ip, lsl #2]
   356ac:	ldr	sl, [r9, ip, lsl #2]
   356b0:	str	sl, [sp, #36]	; 0x24
   356b4:	bcs	356c4 <GetDataSlab+0x9848>
   356b8:	mov	r1, sl
   356bc:	mov	r3, ip
   356c0:	b	35760 <GetDataSlab+0x98e4>
   356c4:	vmov.i32	q9, #1	; 0x00000001
   356c8:	vmov.i32	q10, #1	; 0x00000001
   356cc:	vmov.i32	q8, #1	; 0x00000001
   356d0:	bic	r1, lr, #3
   356d4:	bic	r9, ip, #3
   356d8:	vmov.32	d23[1], sl
   356dc:	vmov.32	d18[0], r7
   356e0:	vmov.32	d20[0], r8
   356e4:	str	r1, [sp, #32]
   356e8:	sub	r3, ip, r1
   356ec:	mov	r1, r6
   356f0:	mvn	r7, #15
   356f4:	vorr	d16, d18, d18
   356f8:	vmov.i32	q9, #1	; 0x00000001
   356fc:	vorr	d18, d20, d20
   35700:	vld1.32	{d20-d21}, [r1], r7
   35704:	subs	r9, r9, #4
   35708:	vrev64.32	q12, q10
   3570c:	vext.8	q12, q12, q12, #8
   35710:	vext.8	q11, q11, q12, #12
   35714:	vmul.i32	q9, q9, q12
   35718:	vmul.i32	q8, q11, q8
   3571c:	vorr	q11, q12, q12
   35720:	bne	35700 <GetDataSlab+0x9884>
   35724:	ldr	r1, [sp, #32]
   35728:	vext.8	q11, q9, q8, #8
   3572c:	vext.8	q12, q8, q8, #8
   35730:	vmul.i32	q0, q9, q11
   35734:	vmul.i32	q1, q8, q12
   35738:	vmul.i32	q8, q0, d0[1]
   3573c:	vmul.i32	q9, q1, d2[1]
   35740:	vmov.32	r8, d16[0]
   35744:	vmov.32	r7, d18[0]
   35748:	cmp	lr, r1
   3574c:	bne	35758 <GetDataSlab+0x98dc>
   35750:	ldr	r9, [fp, #8]
   35754:	b	35774 <GetDataSlab+0x98f8>
   35758:	ldr	r9, [fp, #8]
   3575c:	vmov.32	r1, d20[0]
   35760:	mul	r7, r1, r7
   35764:	ldr	r1, [r0, r3, lsl #2]
   35768:	subs	r3, r3, #1
   3576c:	mul	r8, r8, r1
   35770:	bne	35760 <GetDataSlab+0x98e4>
   35774:	sub	sl, fp, #96	; 0x60
   35778:	sub	r3, fp, #176	; 0xb0
   3577c:	ldr	r6, [sp, #48]	; 0x30
   35780:	ldr	lr, [sp, #60]	; 0x3c
   35784:	str	r7, [sp, #48]	; 0x30
   35788:	str	r8, [sl, ip, lsl #2]
   3578c:	ldr	r8, [fp, #12]
   35790:	str	r7, [r3, ip, lsl #2]
   35794:	ldr	r7, [sp, #36]	; 0x24
   35798:	ldr	r1, [r8, ip, lsl #2]
   3579c:	mla	r5, r1, r6, r5
   357a0:	ldr	r1, [fp, #20]
   357a4:	ldr	r6, [sp, #44]	; 0x2c
   357a8:	ldr	r1, [r1, ip, lsl #2]
   357ac:	add	ip, ip, #1
   357b0:	add	r6, r6, #4
   357b4:	mul	lr, r1, lr
   357b8:	ldr	r1, [fp, #24]
   357bc:	str	lr, [sp, #60]	; 0x3c
   357c0:	ldr	lr, [sp, #40]	; 0x28
   357c4:	cmp	ip, r1
   357c8:	bne	35688 <GetDataSlab+0x980c>
   357cc:	ldr	r0, [sp, #56]	; 0x38
   357d0:	cmp	r4, #1
   357d4:	add	sl, r0, r5, lsl #2
   357d8:	bne	44c88 <GetDataSlab+0x18e0c>
   357dc:	ldr	r0, [sp, #60]	; 0x3c
   357e0:	cmp	r0, #1
   357e4:	blt	51968 <GetDataSlab+0x25aec>
   357e8:	ldr	r0, [fp, #20]
   357ec:	mov	r9, r8
   357f0:	mov	r8, #0
   357f4:	add	ip, r0, #4
   357f8:	sub	r0, fp, #136	; 0x88
   357fc:	orr	r7, r0, #4
   35800:	sub	r0, fp, #96	; 0x60
   35804:	orr	r0, r0, #4
   35808:	str	r0, [sp, #48]	; 0x30
   3580c:	ldr	r0, [r9], #4
   35810:	str	r0, [sp, #56]	; 0x38
   35814:	ldr	r6, [sp, #56]	; 0x38
   35818:	ldr	r1, [sp, #52]	; 0x34
   3581c:	cmp	r2, #1
   35820:	add	r0, r6, r5
   35824:	add	r3, sl, r6, lsl #2
   35828:	blt	35864 <GetDataSlab+0x99e8>
   3582c:	ldr	r1, [sp, #68]	; 0x44
   35830:	ldr	r6, [fp, #20]
   35834:	mov	r5, #0
   35838:	add	r1, r1, r8
   3583c:	ldr	r2, [r3, r5, lsl #2]
   35840:	strb	r2, [r1, r5]
   35844:	add	r5, r5, #1
   35848:	ldr	r2, [r6]
   3584c:	cmp	r5, r2
   35850:	blt	3583c <GetDataSlab+0x99c0>
   35854:	ldr	r1, [fp, #12]
   35858:	ldr	r6, [r1]
   3585c:	ldr	r1, [fp, #8]
   35860:	ldr	r1, [r1]
   35864:	str	r1, [sp, #52]	; 0x34
   35868:	sub	r1, r1, r6
   3586c:	str	r6, [sp, #56]	; 0x38
   35870:	add	r5, r0, r1
   35874:	ldr	r0, [fp, #24]
   35878:	add	sl, r3, r1, lsl #2
   3587c:	cmp	r0, #2
   35880:	blt	3592c <GetDataSlab+0x9ab0>
   35884:	mov	r1, #0
   35888:	mov	r0, r1
   3588c:	ldr	r1, [r7, r1, lsl #2]
   35890:	add	r1, r1, #1
   35894:	str	r1, [r7, r0, lsl #2]
   35898:	ldr	r6, [ip, r0, lsl #2]
   3589c:	sdiv	lr, r1, r6
   358a0:	mls	r1, lr, r6, r1
   358a4:	cmp	r1, #0
   358a8:	bne	3591c <GetDataSlab+0x9aa0>
   358ac:	mov	r1, #0
   358b0:	sub	r3, fp, #176	; 0xb0
   358b4:	str	r1, [r7, r0, lsl #2]
   358b8:	add	r1, r3, r0, lsl #2
   358bc:	ldr	r1, [r1, #4]
   358c0:	sdiv	r6, r5, r1
   358c4:	mls	r6, r6, r1, r5
   358c8:	cmp	r6, #0
   358cc:	beq	358e8 <GetDataSlab+0x9a6c>
   358d0:	ldr	r4, [r3, r0, lsl #2]
   358d4:	ldr	r3, [r9, r0, lsl #2]
   358d8:	sub	r1, r1, r6
   358dc:	mla	r1, r3, r4, r1
   358e0:	add	r5, r1, r5
   358e4:	b	35900 <GetDataSlab+0x9a84>
   358e8:	ldr	r1, [r9, r0, lsl #2]
   358ec:	cmp	r1, #0
   358f0:	beq	35904 <GetDataSlab+0x9a88>
   358f4:	ldr	r3, [r3, r0, lsl #2]
   358f8:	mla	r5, r3, r1, r5
   358fc:	mul	r1, r3, r1
   35900:	add	sl, sl, r1, lsl #2
   35904:	ldr	r3, [fp, #24]
   35908:	add	r1, r0, #1
   3590c:	add	r0, r0, #2
   35910:	cmp	r0, r3
   35914:	blt	35888 <GetDataSlab+0x9a0c>
   35918:	b	3592c <GetDataSlab+0x9ab0>
   3591c:	ldr	r1, [sp, #48]	; 0x30
   35920:	ldr	r0, [r1, r0, lsl #2]
   35924:	add	sl, sl, r0, lsl #2
   35928:	add	r5, r0, r5
   3592c:	ldr	r1, [sp, #60]	; 0x3c
   35930:	add	r8, r2, r8
   35934:	mov	r0, #0
   35938:	cmp	r8, r1
   3593c:	blt	35814 <GetDataSlab+0x9998>
   35940:	b	2e97c <GetDataSlab+0x2b00>
   35944:	ldr	r4, [r3]
   35948:	ldr	r9, [fp, #8]
   3594c:	mov	r5, #0
   35950:	sub	r3, fp, #176	; 0xb0
   35954:	sub	sl, fp, #96	; 0x60
   35958:	sub	r0, r4, #1
   3595c:	str	r0, [fp, #-96]	; 0xffffffa0
   35960:	ldr	r0, [r9]
   35964:	str	r0, [fp, #-176]	; 0xffffff50
   35968:	str	r0, [sp, #52]	; 0x34
   3596c:	ldr	r0, [fp, #24]
   35970:	ldr	r2, [r6]
   35974:	cmp	r0, #2
   35978:	mov	r0, r2
   3597c:	str	r2, [sp, #60]	; 0x3c
   35980:	blt	35af0 <GetDataSlab+0x9c74>
   35984:	ldr	r7, [sp, #52]	; 0x34
   35988:	sub	r0, r9, #4
   3598c:	sub	r6, r9, #12
   35990:	mov	ip, #1
   35994:	mov	lr, #0
   35998:	mov	r5, #0
   3599c:	str	r2, [sp, #60]	; 0x3c
   359a0:	mov	r1, r7
   359a4:	str	r7, [sp, #48]	; 0x30
   359a8:	mov	r1, r2
   359ac:	ldr	r1, [fp, #16]
   359b0:	add	lr, lr, #1
   359b4:	str	r6, [sp, #44]	; 0x2c
   359b8:	cmp	lr, #4
   359bc:	str	lr, [sp, #40]	; 0x28
   359c0:	ldr	r1, [r1, ip, lsl #2]
   359c4:	str	r7, [r3, ip, lsl #2]
   359c8:	sub	r8, r1, #1
   359cc:	str	r8, [sl, ip, lsl #2]
   359d0:	ldr	sl, [r9, ip, lsl #2]
   359d4:	str	sl, [sp, #36]	; 0x24
   359d8:	bcs	359e8 <GetDataSlab+0x9b6c>
   359dc:	mov	r1, sl
   359e0:	mov	r3, ip
   359e4:	b	35a84 <GetDataSlab+0x9c08>
   359e8:	vmov.i32	q9, #1	; 0x00000001
   359ec:	vmov.i32	q10, #1	; 0x00000001
   359f0:	vmov.i32	q8, #1	; 0x00000001
   359f4:	bic	r1, lr, #3
   359f8:	bic	r9, ip, #3
   359fc:	vmov.32	d23[1], sl
   35a00:	vmov.32	d18[0], r7
   35a04:	vmov.32	d20[0], r8
   35a08:	str	r1, [sp, #32]
   35a0c:	sub	r3, ip, r1
   35a10:	mov	r1, r6
   35a14:	mvn	r7, #15
   35a18:	vorr	d16, d18, d18
   35a1c:	vmov.i32	q9, #1	; 0x00000001
   35a20:	vorr	d18, d20, d20
   35a24:	vld1.32	{d20-d21}, [r1], r7
   35a28:	subs	r9, r9, #4
   35a2c:	vrev64.32	q12, q10
   35a30:	vext.8	q12, q12, q12, #8
   35a34:	vext.8	q11, q11, q12, #12
   35a38:	vmul.i32	q9, q9, q12
   35a3c:	vmul.i32	q8, q11, q8
   35a40:	vorr	q11, q12, q12
   35a44:	bne	35a24 <GetDataSlab+0x9ba8>
   35a48:	ldr	r1, [sp, #32]
   35a4c:	vext.8	q11, q9, q8, #8
   35a50:	vext.8	q12, q8, q8, #8
   35a54:	vmul.i32	q0, q9, q11
   35a58:	vmul.i32	q1, q8, q12
   35a5c:	vmul.i32	q8, q0, d0[1]
   35a60:	vmul.i32	q9, q1, d2[1]
   35a64:	vmov.32	r8, d16[0]
   35a68:	vmov.32	r7, d18[0]
   35a6c:	cmp	lr, r1
   35a70:	bne	35a7c <GetDataSlab+0x9c00>
   35a74:	ldr	r9, [fp, #8]
   35a78:	b	35a98 <GetDataSlab+0x9c1c>
   35a7c:	ldr	r9, [fp, #8]
   35a80:	vmov.32	r1, d20[0]
   35a84:	mul	r7, r1, r7
   35a88:	ldr	r1, [r0, r3, lsl #2]
   35a8c:	subs	r3, r3, #1
   35a90:	mul	r8, r8, r1
   35a94:	bne	35a84 <GetDataSlab+0x9c08>
   35a98:	sub	sl, fp, #96	; 0x60
   35a9c:	sub	r3, fp, #176	; 0xb0
   35aa0:	ldr	r6, [sp, #48]	; 0x30
   35aa4:	ldr	lr, [sp, #60]	; 0x3c
   35aa8:	str	r7, [sp, #48]	; 0x30
   35aac:	str	r8, [sl, ip, lsl #2]
   35ab0:	ldr	r8, [fp, #12]
   35ab4:	str	r7, [r3, ip, lsl #2]
   35ab8:	ldr	r7, [sp, #36]	; 0x24
   35abc:	ldr	r1, [r8, ip, lsl #2]
   35ac0:	mla	r5, r1, r6, r5
   35ac4:	ldr	r1, [fp, #20]
   35ac8:	ldr	r6, [sp, #44]	; 0x2c
   35acc:	ldr	r1, [r1, ip, lsl #2]
   35ad0:	add	ip, ip, #1
   35ad4:	add	r6, r6, #4
   35ad8:	mul	lr, r1, lr
   35adc:	ldr	r1, [fp, #24]
   35ae0:	str	lr, [sp, #60]	; 0x3c
   35ae4:	ldr	lr, [sp, #40]	; 0x28
   35ae8:	cmp	ip, r1
   35aec:	bne	359ac <GetDataSlab+0x9b30>
   35af0:	ldr	r0, [sp, #56]	; 0x38
   35af4:	cmp	r4, #1
   35af8:	add	ip, r0, r5, lsl #2
   35afc:	bne	44e24 <GetDataSlab+0x18fa8>
   35b00:	ldr	r0, [sp, #60]	; 0x3c
   35b04:	cmp	r0, #1
   35b08:	ldr	r0, [fp, #20]
   35b0c:	blt	5197c <GetDataSlab+0x25b00>
   35b10:	add	r9, r0, #4
   35b14:	sub	r0, fp, #136	; 0x88
   35b18:	mov	sl, r8
   35b1c:	mov	lr, #0
   35b20:	orr	r7, r0, #4
   35b24:	sub	r0, fp, #96	; 0x60
   35b28:	orr	r0, r0, #4
   35b2c:	str	r0, [sp, #48]	; 0x30
   35b30:	ldr	r0, [sl], #4
   35b34:	str	r0, [sp, #56]	; 0x38
   35b38:	ldr	r1, [sp, #56]	; 0x38
   35b3c:	ldr	r0, [sp, #52]	; 0x34
   35b40:	cmp	r2, #1
   35b44:	add	r4, r1, r5
   35b48:	add	r8, ip, r1, lsl #2
   35b4c:	blt	35b98 <GetDataSlab+0x9d1c>
   35b50:	ldr	r0, [sp, #68]	; 0x44
   35b54:	ldr	r6, [fp, #20]
   35b58:	mov	r3, r8
   35b5c:	add	r5, r0, lr
   35b60:	mov	r0, #0
   35b64:	vldr	s0, [r3]
   35b68:	add	r3, r3, #4
   35b6c:	vcvt.u32.f32	s0, s0
   35b70:	vmov	r1, s0
   35b74:	strb	r1, [r5, r0]
   35b78:	add	r0, r0, #1
   35b7c:	ldr	r2, [r6]
   35b80:	cmp	r0, r2
   35b84:	blt	35b64 <GetDataSlab+0x9ce8>
   35b88:	ldr	r0, [fp, #12]
   35b8c:	ldr	r1, [r0]
   35b90:	ldr	r0, [fp, #8]
   35b94:	ldr	r0, [r0]
   35b98:	str	r0, [sp, #52]	; 0x34
   35b9c:	sub	r0, r0, r1
   35ba0:	str	r1, [sp, #56]	; 0x38
   35ba4:	add	ip, r8, r0, lsl #2
   35ba8:	add	r5, r4, r0
   35bac:	ldr	r0, [fp, #24]
   35bb0:	cmp	r0, #2
   35bb4:	blt	35c64 <GetDataSlab+0x9de8>
   35bb8:	mov	r6, #0
   35bbc:	mov	r8, #0
   35bc0:	ldr	r1, [r7, r6, lsl #2]
   35bc4:	mov	r0, r6
   35bc8:	add	r1, r1, #1
   35bcc:	str	r1, [r7, r6, lsl #2]
   35bd0:	ldr	r6, [r9, r6, lsl #2]
   35bd4:	sdiv	r4, r1, r6
   35bd8:	mls	r1, r4, r6, r1
   35bdc:	cmp	r1, #0
   35be0:	bne	35c54 <GetDataSlab+0x9dd8>
   35be4:	sub	r3, fp, #176	; 0xb0
   35be8:	str	r8, [r7, r0, lsl #2]
   35bec:	add	r1, r3, r0, lsl #2
   35bf0:	ldr	r6, [r1, #4]
   35bf4:	sdiv	r1, r5, r6
   35bf8:	mls	r1, r1, r6, r5
   35bfc:	cmp	r1, #0
   35c00:	beq	35c1c <GetDataSlab+0x9da0>
   35c04:	ldr	r4, [r3, r0, lsl #2]
   35c08:	ldr	r3, [sl, r0, lsl #2]
   35c0c:	sub	r1, r6, r1
   35c10:	mla	r1, r3, r4, r1
   35c14:	add	r5, r1, r5
   35c18:	b	35c38 <GetDataSlab+0x9dbc>
   35c1c:	ldr	r1, [sl, r0, lsl #2]
   35c20:	cmp	r1, #0
   35c24:	beq	35c3c <GetDataSlab+0x9dc0>
   35c28:	sub	r3, fp, #176	; 0xb0
   35c2c:	ldr	r3, [r3, r0, lsl #2]
   35c30:	mla	r5, r3, r1, r5
   35c34:	mul	r1, r3, r1
   35c38:	add	ip, ip, r1, lsl #2
   35c3c:	ldr	r1, [fp, #24]
   35c40:	add	r6, r0, #1
   35c44:	add	r0, r0, #2
   35c48:	cmp	r0, r1
   35c4c:	blt	35bc0 <GetDataSlab+0x9d44>
   35c50:	b	35c64 <GetDataSlab+0x9de8>
   35c54:	ldr	r1, [sp, #48]	; 0x30
   35c58:	ldr	r0, [r1, r0, lsl #2]
   35c5c:	add	ip, ip, r0, lsl #2
   35c60:	add	r5, r0, r5
   35c64:	ldr	r1, [sp, #60]	; 0x3c
   35c68:	add	lr, r2, lr
   35c6c:	mov	r0, #0
   35c70:	cmp	lr, r1
   35c74:	blt	35b38 <GetDataSlab+0x9cbc>
   35c78:	b	2e97c <GetDataSlab+0x2b00>
   35c7c:	ldr	r4, [r3]
   35c80:	ldr	r9, [fp, #8]
   35c84:	mov	r5, #0
   35c88:	sub	r3, fp, #176	; 0xb0
   35c8c:	sub	sl, fp, #96	; 0x60
   35c90:	sub	r0, r4, #1
   35c94:	str	r0, [fp, #-96]	; 0xffffffa0
   35c98:	ldr	r0, [r9]
   35c9c:	str	r0, [fp, #-176]	; 0xffffff50
   35ca0:	str	r0, [sp, #52]	; 0x34
   35ca4:	ldr	r0, [fp, #24]
   35ca8:	ldr	r2, [r6]
   35cac:	cmp	r0, #2
   35cb0:	mov	r0, r2
   35cb4:	str	r2, [sp, #60]	; 0x3c
   35cb8:	blt	35e28 <GetDataSlab+0x9fac>
   35cbc:	ldr	r7, [sp, #52]	; 0x34
   35cc0:	sub	r0, r9, #4
   35cc4:	sub	r6, r9, #12
   35cc8:	mov	ip, #1
   35ccc:	mov	lr, #0
   35cd0:	mov	r5, #0
   35cd4:	str	r2, [sp, #60]	; 0x3c
   35cd8:	mov	r1, r7
   35cdc:	str	r7, [sp, #48]	; 0x30
   35ce0:	mov	r1, r2
   35ce4:	ldr	r1, [fp, #16]
   35ce8:	add	lr, lr, #1
   35cec:	str	r6, [sp, #44]	; 0x2c
   35cf0:	cmp	lr, #4
   35cf4:	str	lr, [sp, #40]	; 0x28
   35cf8:	ldr	r1, [r1, ip, lsl #2]
   35cfc:	str	r7, [r3, ip, lsl #2]
   35d00:	sub	r8, r1, #1
   35d04:	str	r8, [sl, ip, lsl #2]
   35d08:	ldr	sl, [r9, ip, lsl #2]
   35d0c:	str	sl, [sp, #36]	; 0x24
   35d10:	bcs	35d20 <GetDataSlab+0x9ea4>
   35d14:	mov	r1, sl
   35d18:	mov	r3, ip
   35d1c:	b	35dbc <GetDataSlab+0x9f40>
   35d20:	vmov.i32	q9, #1	; 0x00000001
   35d24:	vmov.i32	q10, #1	; 0x00000001
   35d28:	vmov.i32	q8, #1	; 0x00000001
   35d2c:	bic	r1, lr, #3
   35d30:	bic	r9, ip, #3
   35d34:	vmov.32	d23[1], sl
   35d38:	vmov.32	d18[0], r7
   35d3c:	vmov.32	d20[0], r8
   35d40:	str	r1, [sp, #32]
   35d44:	sub	r3, ip, r1
   35d48:	mov	r1, r6
   35d4c:	mvn	r7, #15
   35d50:	vorr	d16, d18, d18
   35d54:	vmov.i32	q9, #1	; 0x00000001
   35d58:	vorr	d18, d20, d20
   35d5c:	vld1.32	{d20-d21}, [r1], r7
   35d60:	subs	r9, r9, #4
   35d64:	vrev64.32	q12, q10
   35d68:	vext.8	q12, q12, q12, #8
   35d6c:	vext.8	q11, q11, q12, #12
   35d70:	vmul.i32	q9, q9, q12
   35d74:	vmul.i32	q8, q11, q8
   35d78:	vorr	q11, q12, q12
   35d7c:	bne	35d5c <GetDataSlab+0x9ee0>
   35d80:	ldr	r1, [sp, #32]
   35d84:	vext.8	q11, q9, q8, #8
   35d88:	vext.8	q12, q8, q8, #8
   35d8c:	vmul.i32	q0, q9, q11
   35d90:	vmul.i32	q1, q8, q12
   35d94:	vmul.i32	q8, q0, d0[1]
   35d98:	vmul.i32	q9, q1, d2[1]
   35d9c:	vmov.32	r8, d16[0]
   35da0:	vmov.32	r7, d18[0]
   35da4:	cmp	lr, r1
   35da8:	bne	35db4 <GetDataSlab+0x9f38>
   35dac:	ldr	r9, [fp, #8]
   35db0:	b	35dd0 <GetDataSlab+0x9f54>
   35db4:	ldr	r9, [fp, #8]
   35db8:	vmov.32	r1, d20[0]
   35dbc:	mul	r7, r1, r7
   35dc0:	ldr	r1, [r0, r3, lsl #2]
   35dc4:	subs	r3, r3, #1
   35dc8:	mul	r8, r8, r1
   35dcc:	bne	35dbc <GetDataSlab+0x9f40>
   35dd0:	sub	sl, fp, #96	; 0x60
   35dd4:	sub	r3, fp, #176	; 0xb0
   35dd8:	ldr	r6, [sp, #48]	; 0x30
   35ddc:	ldr	lr, [sp, #60]	; 0x3c
   35de0:	str	r7, [sp, #48]	; 0x30
   35de4:	str	r8, [sl, ip, lsl #2]
   35de8:	ldr	r8, [fp, #12]
   35dec:	str	r7, [r3, ip, lsl #2]
   35df0:	ldr	r7, [sp, #36]	; 0x24
   35df4:	ldr	r1, [r8, ip, lsl #2]
   35df8:	mla	r5, r1, r6, r5
   35dfc:	ldr	r1, [fp, #20]
   35e00:	ldr	r6, [sp, #44]	; 0x2c
   35e04:	ldr	r1, [r1, ip, lsl #2]
   35e08:	add	ip, ip, #1
   35e0c:	add	r6, r6, #4
   35e10:	mul	lr, r1, lr
   35e14:	ldr	r1, [fp, #24]
   35e18:	str	lr, [sp, #60]	; 0x3c
   35e1c:	ldr	lr, [sp, #40]	; 0x28
   35e20:	cmp	ip, r1
   35e24:	bne	35ce4 <GetDataSlab+0x9e68>
   35e28:	ldr	r0, [sp, #56]	; 0x38
   35e2c:	cmp	r4, #1
   35e30:	add	ip, r0, r5, lsl #3
   35e34:	bne	44fc8 <GetDataSlab+0x1914c>
   35e38:	ldr	r0, [sp, #60]	; 0x3c
   35e3c:	cmp	r0, #1
   35e40:	ldr	r0, [fp, #20]
   35e44:	blt	51990 <GetDataSlab+0x25b14>
   35e48:	add	r9, r0, #4
   35e4c:	sub	r0, fp, #136	; 0x88
   35e50:	mov	sl, r8
   35e54:	mov	lr, #0
   35e58:	orr	r7, r0, #4
   35e5c:	sub	r0, fp, #96	; 0x60
   35e60:	orr	r0, r0, #4
   35e64:	str	r0, [sp, #48]	; 0x30
   35e68:	ldr	r0, [sl], #4
   35e6c:	str	r0, [sp, #56]	; 0x38
   35e70:	ldr	r1, [sp, #56]	; 0x38
   35e74:	ldr	r0, [sp, #52]	; 0x34
   35e78:	cmp	r2, #1
   35e7c:	add	r4, r1, r5
   35e80:	add	r8, ip, r1, lsl #3
   35e84:	blt	35ed0 <GetDataSlab+0xa054>
   35e88:	ldr	r0, [sp, #68]	; 0x44
   35e8c:	ldr	r6, [fp, #20]
   35e90:	mov	r3, r8
   35e94:	add	r5, r0, lr
   35e98:	mov	r0, #0
   35e9c:	vldr	d16, [r3]
   35ea0:	add	r3, r3, #8
   35ea4:	vcvt.u32.f64	s0, d16
   35ea8:	vmov	r1, s0
   35eac:	strb	r1, [r5, r0]
   35eb0:	add	r0, r0, #1
   35eb4:	ldr	r2, [r6]
   35eb8:	cmp	r0, r2
   35ebc:	blt	35e9c <GetDataSlab+0xa020>
   35ec0:	ldr	r0, [fp, #12]
   35ec4:	ldr	r1, [r0]
   35ec8:	ldr	r0, [fp, #8]
   35ecc:	ldr	r0, [r0]
   35ed0:	str	r0, [sp, #52]	; 0x34
   35ed4:	sub	r0, r0, r1
   35ed8:	str	r1, [sp, #56]	; 0x38
   35edc:	add	ip, r8, r0, lsl #3
   35ee0:	add	r5, r4, r0
   35ee4:	ldr	r0, [fp, #24]
   35ee8:	cmp	r0, #2
   35eec:	blt	35f9c <GetDataSlab+0xa120>
   35ef0:	mov	r6, #0
   35ef4:	mov	r8, #0
   35ef8:	ldr	r1, [r7, r6, lsl #2]
   35efc:	mov	r0, r6
   35f00:	add	r1, r1, #1
   35f04:	str	r1, [r7, r6, lsl #2]
   35f08:	ldr	r6, [r9, r6, lsl #2]
   35f0c:	sdiv	r4, r1, r6
   35f10:	mls	r1, r4, r6, r1
   35f14:	cmp	r1, #0
   35f18:	bne	35f8c <GetDataSlab+0xa110>
   35f1c:	sub	r3, fp, #176	; 0xb0
   35f20:	str	r8, [r7, r0, lsl #2]
   35f24:	add	r1, r3, r0, lsl #2
   35f28:	ldr	r6, [r1, #4]
   35f2c:	sdiv	r1, r5, r6
   35f30:	mls	r1, r1, r6, r5
   35f34:	cmp	r1, #0
   35f38:	beq	35f54 <GetDataSlab+0xa0d8>
   35f3c:	ldr	r4, [r3, r0, lsl #2]
   35f40:	ldr	r3, [sl, r0, lsl #2]
   35f44:	sub	r1, r6, r1
   35f48:	mla	r1, r3, r4, r1
   35f4c:	add	r5, r1, r5
   35f50:	b	35f70 <GetDataSlab+0xa0f4>
   35f54:	ldr	r1, [sl, r0, lsl #2]
   35f58:	cmp	r1, #0
   35f5c:	beq	35f74 <GetDataSlab+0xa0f8>
   35f60:	sub	r3, fp, #176	; 0xb0
   35f64:	ldr	r3, [r3, r0, lsl #2]
   35f68:	mla	r5, r3, r1, r5
   35f6c:	mul	r1, r3, r1
   35f70:	add	ip, ip, r1, lsl #3
   35f74:	ldr	r1, [fp, #24]
   35f78:	add	r6, r0, #1
   35f7c:	add	r0, r0, #2
   35f80:	cmp	r0, r1
   35f84:	blt	35ef8 <GetDataSlab+0xa07c>
   35f88:	b	35f9c <GetDataSlab+0xa120>
   35f8c:	ldr	r1, [sp, #48]	; 0x30
   35f90:	ldr	r0, [r1, r0, lsl #2]
   35f94:	add	ip, ip, r0, lsl #3
   35f98:	add	r5, r0, r5
   35f9c:	ldr	r1, [sp, #60]	; 0x3c
   35fa0:	add	lr, r2, lr
   35fa4:	mov	r0, #0
   35fa8:	cmp	lr, r1
   35fac:	blt	35e70 <GetDataSlab+0x9ff4>
   35fb0:	b	2e97c <GetDataSlab+0x2b00>
   35fb4:	ldr	r5, [r3]
   35fb8:	mov	r3, #0
   35fbc:	sub	ip, fp, #176	; 0xb0
   35fc0:	sub	sl, fp, #96	; 0x60
   35fc4:	str	r9, [sp, #40]	; 0x28
   35fc8:	sub	r0, r5, #1
   35fcc:	str	r0, [fp, #-96]	; 0xffffffa0
   35fd0:	ldr	r0, [fp, #8]
   35fd4:	ldr	r0, [r0]
   35fd8:	str	r0, [fp, #-176]	; 0xffffff50
   35fdc:	str	r0, [sp, #32]
   35fe0:	ldr	r0, [fp, #24]
   35fe4:	ldr	r1, [r6]
   35fe8:	cmp	r0, #2
   35fec:	mov	r0, r1
   35ff0:	str	r1, [sp, #60]	; 0x3c
   35ff4:	blt	36164 <GetDataSlab+0xa2e8>
   35ff8:	ldr	r0, [fp, #8]
   35ffc:	ldr	r6, [sp, #32]
   36000:	mov	lr, #1
   36004:	mov	r3, #0
   36008:	str	r1, [sp, #60]	; 0x3c
   3600c:	sub	r2, r0, #4
   36010:	sub	r4, r0, #12
   36014:	mov	r0, #0
   36018:	mov	r7, r6
   3601c:	str	r0, [sp, #52]	; 0x34
   36020:	mov	r0, r1
   36024:	ldr	r0, [fp, #16]
   36028:	str	r7, [sp, #44]	; 0x2c
   3602c:	str	r4, [sp, #48]	; 0x30
   36030:	ldr	r0, [r0, lr, lsl #2]
   36034:	str	r6, [ip, lr, lsl #2]
   36038:	sub	r9, r0, #1
   3603c:	ldr	r0, [fp, #8]
   36040:	str	r9, [sl, lr, lsl #2]
   36044:	ldr	sl, [sp, #52]	; 0x34
   36048:	ldr	ip, [r0, lr, lsl #2]
   3604c:	add	sl, sl, #1
   36050:	cmp	sl, #4
   36054:	str	sl, [sp, #52]	; 0x34
   36058:	str	ip, [sp, #36]	; 0x24
   3605c:	bcs	3606c <GetDataSlab+0xa1f0>
   36060:	mov	r7, ip
   36064:	mov	r0, lr
   36068:	b	36100 <GetDataSlab+0xa284>
   3606c:	vmov.i32	q9, #1	; 0x00000001
   36070:	vmov.i32	q10, #1	; 0x00000001
   36074:	vmov.i32	q8, #1	; 0x00000001
   36078:	bic	r0, sl, #3
   3607c:	bic	r8, lr, #3
   36080:	vmov.32	d23[1], ip
   36084:	mvn	r7, #15
   36088:	vmov.32	d18[0], r6
   3608c:	vmov.32	d20[0], r9
   36090:	str	r0, [sp, #28]
   36094:	sub	r0, lr, r0
   36098:	mov	r6, r4
   3609c:	vorr	d16, d18, d18
   360a0:	vmov.i32	q9, #1	; 0x00000001
   360a4:	vorr	d18, d20, d20
   360a8:	vld1.32	{d20-d21}, [r6], r7
   360ac:	subs	r8, r8, #4
   360b0:	vrev64.32	q12, q10
   360b4:	vext.8	q12, q12, q12, #8
   360b8:	vext.8	q11, q11, q12, #12
   360bc:	vmul.i32	q9, q9, q12
   360c0:	vmul.i32	q8, q11, q8
   360c4:	vorr	q11, q12, q12
   360c8:	bne	360a8 <GetDataSlab+0xa22c>
   360cc:	ldr	r7, [sp, #28]
   360d0:	vext.8	q11, q9, q8, #8
   360d4:	vext.8	q12, q8, q8, #8
   360d8:	ldr	r8, [fp, #12]
   360dc:	vmul.i32	q0, q9, q11
   360e0:	vmul.i32	q1, q8, q12
   360e4:	vmul.i32	q8, q0, d0[1]
   360e8:	vmul.i32	q9, q1, d2[1]
   360ec:	vmov.32	r9, d16[0]
   360f0:	vmov.32	r6, d18[0]
   360f4:	cmp	sl, r7
   360f8:	beq	36114 <GetDataSlab+0xa298>
   360fc:	vmov.32	r7, d20[0]
   36100:	mul	r6, r7, r6
   36104:	ldr	r7, [r2, r0, lsl #2]
   36108:	subs	r0, r0, #1
   3610c:	mul	r9, r9, r7
   36110:	bne	36100 <GetDataSlab+0xa284>
   36114:	sub	ip, fp, #176	; 0xb0
   36118:	sub	sl, fp, #96	; 0x60
   3611c:	ldr	r4, [sp, #44]	; 0x2c
   36120:	mov	r7, r6
   36124:	str	r6, [ip, lr, lsl #2]
   36128:	str	r9, [sl, lr, lsl #2]
   3612c:	ldr	r6, [sp, #36]	; 0x24
   36130:	ldr	r0, [r8, lr, lsl #2]
   36134:	mla	r3, r0, r4, r3
   36138:	ldr	r0, [fp, #20]
   3613c:	ldr	r4, [sp, #60]	; 0x3c
   36140:	ldr	r0, [r0, lr, lsl #2]
   36144:	add	lr, lr, #1
   36148:	mul	r4, r0, r4
   3614c:	ldr	r0, [fp, #24]
   36150:	str	r4, [sp, #60]	; 0x3c
   36154:	ldr	r4, [sp, #48]	; 0x30
   36158:	cmp	lr, r0
   3615c:	add	r4, r4, #4
   36160:	bne	36024 <GetDataSlab+0xa1a8>
   36164:	ldr	r0, [sp, #56]	; 0x38
   36168:	cmp	r5, #1
   3616c:	add	sl, r0, r3, lsl #3
   36170:	bne	4516c <GetDataSlab+0x192f0>
   36174:	ldr	r0, [sp, #60]	; 0x3c
   36178:	cmp	r0, #1
   3617c:	blt	452ec <GetDataSlab+0x19470>
   36180:	ldr	r0, [fp, #20]
   36184:	ldr	lr, [r8], #4
   36188:	mov	ip, #0
   3618c:	add	r9, r0, #4
   36190:	sub	r0, fp, #136	; 0x88
   36194:	orr	r2, r0, #4
   36198:	sub	r0, fp, #96	; 0x60
   3619c:	orr	r0, r0, #4
   361a0:	str	r0, [sp, #52]	; 0x34
   361a4:	add	r6, lr, r3
   361a8:	add	r3, sl, lr, lsl #3
   361ac:	cmp	r1, #1
   361b0:	blt	361f4 <GetDataSlab+0xa378>
   361b4:	ldr	r0, [sp, #68]	; 0x44
   361b8:	ldr	r7, [fp, #20]
   361bc:	mov	r4, r3
   361c0:	add	r5, r0, ip
   361c4:	mov	r0, #0
   361c8:	ldrb	r1, [r4], #8
   361cc:	strb	r1, [r5, r0]
   361d0:	add	r0, r0, #1
   361d4:	ldr	r1, [r7]
   361d8:	cmp	r0, r1
   361dc:	blt	361c8 <GetDataSlab+0xa34c>
   361e0:	ldr	r0, [fp, #12]
   361e4:	ldr	lr, [r0]
   361e8:	ldr	r0, [fp, #8]
   361ec:	ldr	r0, [r0]
   361f0:	str	r0, [sp, #32]
   361f4:	ldr	r0, [sp, #32]
   361f8:	sub	r0, r0, lr
   361fc:	add	sl, r3, r0, lsl #3
   36200:	add	r3, r6, r0
   36204:	ldr	r0, [fp, #24]
   36208:	cmp	r0, #2
   3620c:	blt	362bc <GetDataSlab+0xa440>
   36210:	mov	r0, #0
   36214:	mov	r5, r0
   36218:	ldr	r0, [r2, r0, lsl #2]
   3621c:	add	r0, r0, #1
   36220:	str	r0, [r2, r5, lsl #2]
   36224:	ldr	r7, [r9, r5, lsl #2]
   36228:	sdiv	r6, r0, r7
   3622c:	mls	r0, r6, r7, r0
   36230:	cmp	r0, #0
   36234:	bne	362ac <GetDataSlab+0xa430>
   36238:	mov	r0, #0
   3623c:	sub	r4, fp, #176	; 0xb0
   36240:	str	r0, [r2, r5, lsl #2]
   36244:	add	r0, r4, r5, lsl #2
   36248:	ldr	r0, [r0, #4]
   3624c:	sdiv	r6, r3, r0
   36250:	mls	r7, r6, r0, r3
   36254:	cmp	r7, #0
   36258:	beq	36274 <GetDataSlab+0xa3f8>
   3625c:	ldr	r6, [r4, r5, lsl #2]
   36260:	ldr	r4, [r8, r5, lsl #2]
   36264:	sub	r0, r0, r7
   36268:	mla	r0, r4, r6, r0
   3626c:	add	r3, r0, r3
   36270:	b	36290 <GetDataSlab+0xa414>
   36274:	ldr	r0, [r8, r5, lsl #2]
   36278:	cmp	r0, #0
   3627c:	beq	36294 <GetDataSlab+0xa418>
   36280:	sub	r4, fp, #176	; 0xb0
   36284:	ldr	r4, [r4, r5, lsl #2]
   36288:	mla	r3, r4, r0, r3
   3628c:	mul	r0, r4, r0
   36290:	add	sl, sl, r0, lsl #3
   36294:	add	r0, r5, #1
   36298:	add	r4, r5, #2
   3629c:	ldr	r5, [fp, #24]
   362a0:	cmp	r4, r5
   362a4:	blt	36214 <GetDataSlab+0xa398>
   362a8:	b	362bc <GetDataSlab+0xa440>
   362ac:	ldr	r0, [sp, #52]	; 0x34
   362b0:	ldr	r0, [r0, r5, lsl #2]
   362b4:	add	sl, sl, r0, lsl #3
   362b8:	add	r3, r0, r3
   362bc:	ldr	r0, [sp, #60]	; 0x3c
   362c0:	add	ip, r1, ip
   362c4:	cmp	ip, r0
   362c8:	blt	361a4 <GetDataSlab+0xa328>
   362cc:	b	452ec <GetDataSlab+0x19470>
   362d0:	ldr	sl, [ip]
   362d4:	mov	r1, r6
   362d8:	mov	r3, #0
   362dc:	sub	r7, fp, #176	; 0xb0
   362e0:	sub	r8, fp, #96	; 0x60
   362e4:	sub	r0, sl, #1
   362e8:	str	r0, [fp, #-96]	; 0xffffffa0
   362ec:	ldr	r0, [fp, #8]
   362f0:	ldr	r0, [r0]
   362f4:	str	r0, [fp, #-176]	; 0xffffff50
   362f8:	str	r0, [sp, #44]	; 0x2c
   362fc:	ldr	r0, [fp, #24]
   36300:	ldr	r1, [r6]
   36304:	cmp	r0, #2
   36308:	str	r1, [sp, #40]	; 0x28
   3630c:	str	r1, [sp, #60]	; 0x3c
   36310:	blt	36464 <GetDataSlab+0xa5e8>
   36314:	ldr	r0, [fp, #8]
   36318:	ldr	r2, [sp, #44]	; 0x2c
   3631c:	mov	r6, #1
   36320:	mov	lr, #0
   36324:	mvn	r4, #15
   36328:	mov	r3, #0
   3632c:	mov	r1, r0
   36330:	sub	r0, r0, #4
   36334:	mov	r9, r2
   36338:	sub	ip, r1, #12
   3633c:	ldr	r1, [sp, #40]	; 0x28
   36340:	str	r1, [sp, #60]	; 0x3c
   36344:	ldr	r1, [fp, #16]
   36348:	add	lr, lr, #1
   3634c:	cmp	lr, #4
   36350:	ldr	r1, [r1, r6, lsl #2]
   36354:	str	r2, [r7, r6, lsl #2]
   36358:	sub	r5, r1, #1
   3635c:	ldr	r1, [fp, #8]
   36360:	str	r5, [r8, r6, lsl #2]
   36364:	ldr	r1, [r1, r6, lsl #2]
   36368:	str	r1, [sp, #52]	; 0x34
   3636c:	bcs	36378 <GetDataSlab+0xa4fc>
   36370:	mov	r7, r6
   36374:	b	36404 <GetDataSlab+0xa588>
   36378:	vmov.i32	q9, #1	; 0x00000001
   3637c:	vmov.i32	q10, #1	; 0x00000001
   36380:	vmov.i32	q8, #1	; 0x00000001
   36384:	vmov.32	d23[1], r1
   36388:	bic	r1, lr, #3
   3638c:	bic	r8, r6, #3
   36390:	vmov.32	d18[0], r2
   36394:	vmov.32	d20[0], r5
   36398:	str	r1, [sp, #48]	; 0x30
   3639c:	sub	r7, r6, r1
   363a0:	mov	r1, ip
   363a4:	vorr	d16, d18, d18
   363a8:	vmov.i32	q9, #1	; 0x00000001
   363ac:	vorr	d18, d20, d20
   363b0:	vld1.32	{d20-d21}, [r1], r4
   363b4:	subs	r8, r8, #4
   363b8:	vrev64.32	q12, q10
   363bc:	vext.8	q12, q12, q12, #8
   363c0:	vext.8	q11, q11, q12, #12
   363c4:	vmul.i32	q9, q9, q12
   363c8:	vmul.i32	q8, q11, q8
   363cc:	vorr	q11, q12, q12
   363d0:	bne	363b0 <GetDataSlab+0xa534>
   363d4:	ldr	r1, [sp, #48]	; 0x30
   363d8:	vext.8	q11, q9, q8, #8
   363dc:	vext.8	q12, q8, q8, #8
   363e0:	vmul.i32	q0, q9, q11
   363e4:	vmul.i32	q1, q8, q12
   363e8:	vmul.i32	q8, q0, d0[1]
   363ec:	vmul.i32	q9, q1, d2[1]
   363f0:	vmov.32	r5, d16[0]
   363f4:	vmov.32	r2, d18[0]
   363f8:	cmp	lr, r1
   363fc:	beq	36418 <GetDataSlab+0xa59c>
   36400:	vmov.32	r1, d20[0]
   36404:	mul	r2, r1, r2
   36408:	ldr	r1, [r0, r7, lsl #2]
   3640c:	subs	r7, r7, #1
   36410:	mul	r5, r5, r1
   36414:	bne	36404 <GetDataSlab+0xa588>
   36418:	ldr	r1, [fp, #12]
   3641c:	sub	r7, fp, #176	; 0xb0
   36420:	sub	r8, fp, #96	; 0x60
   36424:	add	ip, ip, #4
   36428:	str	r5, [r8, r6, lsl #2]
   3642c:	str	r2, [r7, r6, lsl #2]
   36430:	ldr	r5, [sp, #60]	; 0x3c
   36434:	ldr	r1, [r1, r6, lsl #2]
   36438:	mla	r3, r1, r9, r3
   3643c:	ldr	r1, [fp, #20]
   36440:	mov	r9, r2
   36444:	ldr	r2, [sp, #52]	; 0x34
   36448:	ldr	r1, [r1, r6, lsl #2]
   3644c:	add	r6, r6, #1
   36450:	mul	r5, r1, r5
   36454:	ldr	r1, [fp, #24]
   36458:	str	r5, [sp, #60]	; 0x3c
   3645c:	cmp	r6, r1
   36460:	bne	36344 <GetDataSlab+0xa4c8>
   36464:	ldr	r0, [sp, #56]	; 0x38
   36468:	cmp	sl, #1
   3646c:	add	r4, r0, r3
   36470:	bne	45640 <GetDataSlab+0x197c4>
   36474:	ldr	r0, [sp, #60]	; 0x3c
   36478:	ldr	r8, [sp, #40]	; 0x28
   3647c:	sub	r2, fp, #96	; 0x60
   36480:	cmp	r0, #1
   36484:	ldr	r0, [sp, #68]	; 0x44
   36488:	blt	519a4 <GetDataSlab+0x25b28>
   3648c:	ldr	r1, [fp, #12]
   36490:	str	r0, [sp, #56]	; 0x38
   36494:	mov	r0, #0
   36498:	lsl	ip, r8, #1
   3649c:	mov	lr, #0
   364a0:	str	r0, [sp, #52]	; 0x34
   364a4:	add	sl, r1, #4
   364a8:	ldr	r1, [fp, #20]
   364ac:	add	r9, r1, #4
   364b0:	sub	r1, fp, #136	; 0x88
   364b4:	orr	r5, r1, #4
   364b8:	orr	r1, r2, #4
   364bc:	str	r1, [sp, #32]
   364c0:	bic	r1, r8, #7
   364c4:	str	r1, [sp, #36]	; 0x24
   364c8:	ldr	r0, [fp, #12]
   364cc:	cmp	r8, #1
   364d0:	blt	36598 <GetDataSlab+0xa71c>
   364d4:	ldr	r7, [r0]
   364d8:	mov	r0, #0
   364dc:	cmp	r8, #8
   364e0:	str	r7, [sp, #48]	; 0x30
   364e4:	bcc	36570 <GetDataSlab+0xa6f4>
   364e8:	ldr	r1, [sp, #68]	; 0x44
   364ec:	ldr	r2, [sp, #52]	; 0x34
   364f0:	mov	r6, ip
   364f4:	mla	ip, ip, r2, r1
   364f8:	add	r1, r4, r8
   364fc:	add	r2, r4, r7
   36500:	add	r1, r1, r7
   36504:	ldr	r7, [sp, #68]	; 0x44
   36508:	cmp	ip, r1
   3650c:	bcs	36528 <GetDataSlab+0xa6ac>
   36510:	ldr	r1, [sp, #52]	; 0x34
   36514:	mov	ip, r6
   36518:	mla	r1, r6, r1, r6
   3651c:	add	r1, r7, r1
   36520:	cmp	r2, r1
   36524:	bcc	36570 <GetDataSlab+0xa6f4>
   36528:	ldr	r0, [sp, #36]	; 0x24
   3652c:	ldr	ip, [sp, #56]	; 0x38
   36530:	sub	r7, fp, #200	; 0xc8
   36534:	ldr	r1, [r2]
   36538:	ldr	r8, [r2, #4]
   3653c:	subs	r0, r0, #8
   36540:	add	r2, r2, #8
   36544:	str	r8, [fp, #-196]	; 0xffffff3c
   36548:	str	r1, [fp, #-200]	; 0xffffff38
   3654c:	vld1.8	{d16}, [r7 :64]
   36550:	vmovl.u8	q8, d16
   36554:	vst1.16	{d16-d17}, [ip]!
   36558:	bne	36534 <GetDataSlab+0xa6b8>
   3655c:	ldr	r8, [sp, #40]	; 0x28
   36560:	ldr	r0, [sp, #36]	; 0x24
   36564:	mov	ip, r6
   36568:	cmp	r8, r0
   3656c:	beq	36598 <GetDataSlab+0xa71c>
   36570:	ldr	r1, [sp, #56]	; 0x38
   36574:	ldr	r6, [sp, #48]	; 0x30
   36578:	sub	r2, r8, r0
   3657c:	add	r1, r1, r0, lsl #1
   36580:	add	r0, r0, r6
   36584:	add	r0, r4, r0
   36588:	ldrb	r6, [r0], #1
   3658c:	subs	r2, r2, #1
   36590:	strh	r6, [r1], #2
   36594:	bne	36588 <GetDataSlab+0xa70c>
   36598:	ldr	r0, [sp, #44]	; 0x2c
   3659c:	add	r4, r4, r0
   365a0:	add	r3, r3, r0
   365a4:	ldr	r0, [fp, #24]
   365a8:	cmp	r0, #2
   365ac:	blt	36658 <GetDataSlab+0xa7dc>
   365b0:	mov	r1, #0
   365b4:	mov	r0, r1
   365b8:	ldr	r1, [r5, r1, lsl #2]
   365bc:	add	r1, r1, #1
   365c0:	str	r1, [r5, r0, lsl #2]
   365c4:	ldr	r2, [r9, r0, lsl #2]
   365c8:	sdiv	r6, r1, r2
   365cc:	mls	r1, r6, r2, r1
   365d0:	cmp	r1, #0
   365d4:	bne	36648 <GetDataSlab+0xa7cc>
   365d8:	mov	r1, #0
   365dc:	sub	r7, fp, #176	; 0xb0
   365e0:	str	r1, [r5, r0, lsl #2]
   365e4:	add	r1, r7, r0, lsl #2
   365e8:	ldr	r1, [r1, #4]
   365ec:	sdiv	r2, r3, r1
   365f0:	mls	r2, r2, r1, r3
   365f4:	cmp	r2, #0
   365f8:	beq	36618 <GetDataSlab+0xa79c>
   365fc:	ldr	r6, [r7, r0, lsl #2]
   36600:	ldr	r7, [sl, r0, lsl #2]
   36604:	sub	r1, r1, r2
   36608:	mla	r1, r7, r6, r1
   3660c:	add	r3, r1, r3
   36610:	add	r4, r4, r1
   36614:	b	36630 <GetDataSlab+0xa7b4>
   36618:	ldr	r1, [sl, r0, lsl #2]
   3661c:	cmp	r1, #0
   36620:	subne	r2, fp, #176	; 0xb0
   36624:	ldrne	r2, [r2, r0, lsl #2]
   36628:	mlane	r3, r2, r1, r3
   3662c:	mlane	r4, r2, r1, r4
   36630:	ldr	r2, [fp, #24]
   36634:	add	r1, r0, #1
   36638:	add	r0, r0, #2
   3663c:	cmp	r0, r2
   36640:	blt	365b4 <GetDataSlab+0xa738>
   36644:	b	36658 <GetDataSlab+0xa7dc>
   36648:	ldr	r1, [sp, #32]
   3664c:	ldr	r0, [r1, r0, lsl #2]
   36650:	add	r4, r4, r0
   36654:	add	r3, r0, r3
   36658:	ldr	r0, [sp, #56]	; 0x38
   3665c:	ldr	r1, [sp, #60]	; 0x3c
   36660:	add	lr, lr, r8
   36664:	add	r0, r0, ip
   36668:	cmp	lr, r1
   3666c:	str	r0, [sp, #56]	; 0x38
   36670:	ldr	r0, [sp, #52]	; 0x34
   36674:	add	r0, r0, #1
   36678:	str	r0, [sp, #52]	; 0x34
   3667c:	mov	r0, #0
   36680:	blt	364c8 <GetDataSlab+0xa64c>
   36684:	b	2e97c <GetDataSlab+0x2b00>
   36688:	ldr	r0, [ip]
   3668c:	mov	sl, r6
   36690:	mov	r2, #0
   36694:	sub	r5, fp, #176	; 0xb0
   36698:	str	r0, [sp, #32]
   3669c:	sub	r0, r0, #1
   366a0:	str	r0, [fp, #-96]	; 0xffffffa0
   366a4:	ldr	r0, [fp, #8]
   366a8:	ldr	r0, [r0]
   366ac:	str	r0, [fp, #-176]	; 0xffffff50
   366b0:	str	r0, [sp, #44]	; 0x2c
   366b4:	ldr	r0, [fp, #24]
   366b8:	ldr	r1, [r6]
   366bc:	sub	r6, fp, #96	; 0x60
   366c0:	cmp	r0, #2
   366c4:	str	r1, [sp, #52]	; 0x34
   366c8:	str	r1, [sp, #60]	; 0x3c
   366cc:	blt	36824 <GetDataSlab+0xa9a8>
   366d0:	ldr	r0, [fp, #8]
   366d4:	ldr	r3, [sp, #44]	; 0x2c
   366d8:	mov	r4, #1
   366dc:	mov	lr, #0
   366e0:	mvn	ip, #15
   366e4:	mov	r2, #0
   366e8:	sub	r7, r0, #4
   366ec:	sub	r9, r0, #12
   366f0:	ldr	r0, [sp, #52]	; 0x34
   366f4:	mov	r8, r3
   366f8:	str	r0, [sp, #60]	; 0x3c
   366fc:	ldr	r1, [fp, #16]
   36700:	add	lr, lr, #1
   36704:	cmp	lr, #4
   36708:	str	lr, [sp, #48]	; 0x30
   3670c:	ldr	r1, [r1, r4, lsl #2]
   36710:	str	r3, [r5, r4, lsl #2]
   36714:	sub	r1, r1, #1
   36718:	str	r1, [r6, r4, lsl #2]
   3671c:	ldr	r6, [fp, #8]
   36720:	ldr	r0, [r6, r4, lsl #2]
   36724:	bcs	36738 <GetDataSlab+0xa8bc>
   36728:	mov	lr, r0
   3672c:	mov	r6, r0
   36730:	mov	r5, r4
   36734:	b	367c4 <GetDataSlab+0xa948>
   36738:	vmov.i32	q9, #1	; 0x00000001
   3673c:	vmov.i32	q10, #1	; 0x00000001
   36740:	vmov.i32	q8, #1	; 0x00000001
   36744:	bic	r6, lr, #3
   36748:	bic	sl, r4, #3
   3674c:	vmov.32	d23[1], r0
   36750:	vmov.32	d18[0], r3
   36754:	vmov.32	d20[0], r1
   36758:	sub	r5, r4, r6
   3675c:	mov	r1, r9
   36760:	vorr	d16, d18, d18
   36764:	vmov.i32	q9, #1	; 0x00000001
   36768:	vorr	d18, d20, d20
   3676c:	vld1.32	{d20-d21}, [r1], ip
   36770:	subs	sl, sl, #4
   36774:	vrev64.32	q12, q10
   36778:	vext.8	q12, q12, q12, #8
   3677c:	vext.8	q11, q11, q12, #12
   36780:	vmul.i32	q9, q9, q12
   36784:	vmul.i32	q8, q11, q8
   36788:	vorr	q11, q12, q12
   3678c:	bne	3676c <GetDataSlab+0xa8f0>
   36790:	vext.8	q11, q9, q8, #8
   36794:	vext.8	q12, q8, q8, #8
   36798:	ldr	sl, [fp, #20]
   3679c:	cmp	lr, r6
   367a0:	mov	lr, r0
   367a4:	vmul.i32	q0, q9, q11
   367a8:	vmul.i32	q1, q8, q12
   367ac:	vmul.i32	q8, q0, d0[1]
   367b0:	vmul.i32	q9, q1, d2[1]
   367b4:	vmov.32	r1, d16[0]
   367b8:	vmov.32	r3, d18[0]
   367bc:	beq	367d8 <GetDataSlab+0xa95c>
   367c0:	vmov.32	r6, d20[0]
   367c4:	mul	r3, r6, r3
   367c8:	ldr	r6, [r7, r5, lsl #2]
   367cc:	subs	r5, r5, #1
   367d0:	mul	r1, r1, r6
   367d4:	bne	367c4 <GetDataSlab+0xa948>
   367d8:	sub	r6, fp, #96	; 0x60
   367dc:	sub	r5, fp, #176	; 0xb0
   367e0:	ldr	r0, [sp, #60]	; 0x3c
   367e4:	add	r9, r9, #4
   367e8:	str	r1, [r6, r4, lsl #2]
   367ec:	ldr	r1, [fp, #12]
   367f0:	str	r3, [r5, r4, lsl #2]
   367f4:	ldr	r1, [r1, r4, lsl #2]
   367f8:	mla	r2, r1, r8, r2
   367fc:	ldr	r1, [sl, r4, lsl #2]
   36800:	mov	r8, r3
   36804:	mov	r3, lr
   36808:	ldr	lr, [sp, #48]	; 0x30
   3680c:	add	r4, r4, #1
   36810:	mul	r0, r1, r0
   36814:	ldr	r1, [fp, #24]
   36818:	str	r0, [sp, #60]	; 0x3c
   3681c:	cmp	r4, r1
   36820:	bne	366fc <GetDataSlab+0xa880>
   36824:	ldr	r0, [sp, #56]	; 0x38
   36828:	ldr	r6, [sp, #32]
   3682c:	add	r9, r0, r2, lsl #1
   36830:	cmp	r6, #1
   36834:	bne	457d8 <GetDataSlab+0x1995c>
   36838:	ldr	r0, [sp, #60]	; 0x3c
   3683c:	ldr	ip, [sp, #68]	; 0x44
   36840:	ldr	r8, [fp, #12]
   36844:	ldr	r1, [sp, #52]	; 0x34
   36848:	cmp	r0, #1
   3684c:	blt	519b8 <GetDataSlab+0x25b3c>
   36850:	ldr	r0, [r8], #4
   36854:	add	r6, sl, #4
   36858:	mov	r4, #0
   3685c:	mov	lr, #0
   36860:	str	r0, [sp, #56]	; 0x38
   36864:	add	r0, r1, r0
   36868:	str	r0, [sp, #48]	; 0x30
   3686c:	sub	r0, fp, #136	; 0x88
   36870:	orr	r7, r0, #4
   36874:	sub	r0, fp, #96	; 0x60
   36878:	orr	r0, r0, #4
   3687c:	str	r0, [sp, #36]	; 0x24
   36880:	bic	r0, r1, #7
   36884:	str	r0, [sp, #40]	; 0x28
   36888:	lsl	r0, r1, #1
   3688c:	str	r0, [sp, #64]	; 0x40
   36890:	cmp	r1, #1
   36894:	blt	36934 <GetDataSlab+0xaab8>
   36898:	ldr	r0, [sp, #56]	; 0x38
   3689c:	mov	r1, #0
   368a0:	add	r5, r9, r0, lsl #1
   368a4:	ldr	r0, [sp, #52]	; 0x34
   368a8:	cmp	r0, #8
   368ac:	bcc	36910 <GetDataSlab+0xaa94>
   368b0:	ldr	r0, [sp, #68]	; 0x44
   368b4:	ldr	r3, [sp, #64]	; 0x40
   368b8:	mla	r0, r3, r4, r0
   368bc:	ldr	r3, [sp, #48]	; 0x30
   368c0:	add	r3, r9, r3, lsl #1
   368c4:	cmp	r0, r3
   368c8:	bcs	368e4 <GetDataSlab+0xaa68>
   368cc:	ldr	r0, [sp, #64]	; 0x40
   368d0:	ldr	r3, [sp, #68]	; 0x44
   368d4:	mla	r0, r0, r4, r0
   368d8:	add	r0, r3, r0
   368dc:	cmp	r0, r5
   368e0:	bhi	36910 <GetDataSlab+0xaa94>
   368e4:	ldr	r1, [sp, #40]	; 0x28
   368e8:	mov	r3, ip
   368ec:	mov	r0, r5
   368f0:	vld1.16	{d16-d17}, [r0]!
   368f4:	subs	r1, r1, #8
   368f8:	vst1.16	{d16-d17}, [r3]!
   368fc:	bne	368f0 <GetDataSlab+0xaa74>
   36900:	ldr	r0, [sp, #52]	; 0x34
   36904:	ldr	r1, [sp, #40]	; 0x28
   36908:	cmp	r0, r1
   3690c:	beq	36934 <GetDataSlab+0xaab8>
   36910:	ldr	r0, [sp, #52]	; 0x34
   36914:	mov	r3, #0
   36918:	sub	r0, r0, r1
   3691c:	sub	r1, r3, r1, lsl #1
   36920:	ldrh	r3, [r5, -r1]
   36924:	subs	r0, r0, #1
   36928:	strh	r3, [ip, -r1]
   3692c:	sub	r1, r1, #2
   36930:	bne	36920 <GetDataSlab+0xaaa4>
   36934:	ldr	r0, [sp, #44]	; 0x2c
   36938:	add	r9, r9, r0, lsl #1
   3693c:	add	r2, r2, r0
   36940:	ldr	r0, [fp, #24]
   36944:	cmp	r0, #2
   36948:	blt	369f8 <GetDataSlab+0xab7c>
   3694c:	mov	r1, #0
   36950:	mov	r0, r1
   36954:	ldr	r1, [r7, r1, lsl #2]
   36958:	add	r1, r1, #1
   3695c:	str	r1, [r7, r0, lsl #2]
   36960:	ldr	r3, [r6, r0, lsl #2]
   36964:	sdiv	r5, r1, r3
   36968:	mls	r1, r5, r3, r1
   3696c:	cmp	r1, #0
   36970:	bne	369e8 <GetDataSlab+0xab6c>
   36974:	mov	r1, #0
   36978:	sub	r5, fp, #176	; 0xb0
   3697c:	str	r1, [r7, r0, lsl #2]
   36980:	add	r1, r5, r0, lsl #2
   36984:	ldr	r1, [r1, #4]
   36988:	sdiv	r3, r2, r1
   3698c:	mls	r3, r3, r1, r2
   36990:	cmp	r3, #0
   36994:	beq	369b0 <GetDataSlab+0xab34>
   36998:	ldr	r5, [r5, r0, lsl #2]
   3699c:	ldr	sl, [r8, r0, lsl #2]
   369a0:	sub	r1, r1, r3
   369a4:	mla	r1, sl, r5, r1
   369a8:	add	r2, r1, r2
   369ac:	b	369cc <GetDataSlab+0xab50>
   369b0:	ldr	r1, [r8, r0, lsl #2]
   369b4:	cmp	r1, #0
   369b8:	beq	369d0 <GetDataSlab+0xab54>
   369bc:	sub	r3, fp, #176	; 0xb0
   369c0:	ldr	r3, [r3, r0, lsl #2]
   369c4:	mla	r2, r3, r1, r2
   369c8:	mul	r1, r3, r1
   369cc:	add	r9, r9, r1, lsl #1
   369d0:	ldr	r3, [fp, #24]
   369d4:	add	r1, r0, #1
   369d8:	add	r0, r0, #2
   369dc:	cmp	r0, r3
   369e0:	blt	36950 <GetDataSlab+0xaad4>
   369e4:	b	369f8 <GetDataSlab+0xab7c>
   369e8:	ldr	r1, [sp, #36]	; 0x24
   369ec:	ldr	r0, [r1, r0, lsl #2]
   369f0:	add	r9, r9, r0, lsl #1
   369f4:	add	r2, r0, r2
   369f8:	ldr	r1, [sp, #52]	; 0x34
   369fc:	ldr	r0, [sp, #64]	; 0x40
   36a00:	ldr	r3, [sp, #60]	; 0x3c
   36a04:	add	r4, r4, #1
   36a08:	add	lr, lr, r1
   36a0c:	add	ip, ip, r0
   36a10:	mov	r0, #0
   36a14:	cmp	lr, r3
   36a18:	blt	36890 <GetDataSlab+0xaa14>
   36a1c:	b	2e97c <GetDataSlab+0x2b00>
   36a20:	ldr	r0, [ip]
   36a24:	mov	sl, r6
   36a28:	mov	r2, #0
   36a2c:	sub	r5, fp, #176	; 0xb0
   36a30:	str	r0, [sp, #32]
   36a34:	sub	r0, r0, #1
   36a38:	str	r0, [fp, #-96]	; 0xffffffa0
   36a3c:	ldr	r0, [fp, #8]
   36a40:	ldr	r0, [r0]
   36a44:	str	r0, [fp, #-176]	; 0xffffff50
   36a48:	str	r0, [sp, #44]	; 0x2c
   36a4c:	ldr	r0, [fp, #24]
   36a50:	ldr	r1, [r6]
   36a54:	sub	r6, fp, #96	; 0x60
   36a58:	cmp	r0, #2
   36a5c:	str	r1, [sp, #52]	; 0x34
   36a60:	str	r1, [sp, #60]	; 0x3c
   36a64:	blt	36bbc <GetDataSlab+0xad40>
   36a68:	ldr	r0, [fp, #8]
   36a6c:	ldr	r3, [sp, #44]	; 0x2c
   36a70:	mov	r4, #1
   36a74:	mov	lr, #0
   36a78:	mvn	ip, #15
   36a7c:	mov	r2, #0
   36a80:	sub	r7, r0, #4
   36a84:	sub	r9, r0, #12
   36a88:	ldr	r0, [sp, #52]	; 0x34
   36a8c:	mov	r8, r3
   36a90:	str	r0, [sp, #60]	; 0x3c
   36a94:	ldr	r1, [fp, #16]
   36a98:	add	lr, lr, #1
   36a9c:	cmp	lr, #4
   36aa0:	str	lr, [sp, #48]	; 0x30
   36aa4:	ldr	r1, [r1, r4, lsl #2]
   36aa8:	str	r3, [r5, r4, lsl #2]
   36aac:	sub	r1, r1, #1
   36ab0:	str	r1, [r6, r4, lsl #2]
   36ab4:	ldr	r6, [fp, #8]
   36ab8:	ldr	r0, [r6, r4, lsl #2]
   36abc:	bcs	36ad0 <GetDataSlab+0xac54>
   36ac0:	mov	lr, r0
   36ac4:	mov	r6, r0
   36ac8:	mov	r5, r4
   36acc:	b	36b5c <GetDataSlab+0xace0>
   36ad0:	vmov.i32	q9, #1	; 0x00000001
   36ad4:	vmov.i32	q10, #1	; 0x00000001
   36ad8:	vmov.i32	q8, #1	; 0x00000001
   36adc:	bic	r6, lr, #3
   36ae0:	bic	sl, r4, #3
   36ae4:	vmov.32	d23[1], r0
   36ae8:	vmov.32	d18[0], r3
   36aec:	vmov.32	d20[0], r1
   36af0:	sub	r5, r4, r6
   36af4:	mov	r1, r9
   36af8:	vorr	d16, d18, d18
   36afc:	vmov.i32	q9, #1	; 0x00000001
   36b00:	vorr	d18, d20, d20
   36b04:	vld1.32	{d20-d21}, [r1], ip
   36b08:	subs	sl, sl, #4
   36b0c:	vrev64.32	q12, q10
   36b10:	vext.8	q12, q12, q12, #8
   36b14:	vext.8	q11, q11, q12, #12
   36b18:	vmul.i32	q9, q9, q12
   36b1c:	vmul.i32	q8, q11, q8
   36b20:	vorr	q11, q12, q12
   36b24:	bne	36b04 <GetDataSlab+0xac88>
   36b28:	vext.8	q11, q9, q8, #8
   36b2c:	vext.8	q12, q8, q8, #8
   36b30:	ldr	sl, [fp, #20]
   36b34:	cmp	lr, r6
   36b38:	mov	lr, r0
   36b3c:	vmul.i32	q0, q9, q11
   36b40:	vmul.i32	q1, q8, q12
   36b44:	vmul.i32	q8, q0, d0[1]
   36b48:	vmul.i32	q9, q1, d2[1]
   36b4c:	vmov.32	r1, d16[0]
   36b50:	vmov.32	r3, d18[0]
   36b54:	beq	36b70 <GetDataSlab+0xacf4>
   36b58:	vmov.32	r6, d20[0]
   36b5c:	mul	r3, r6, r3
   36b60:	ldr	r6, [r7, r5, lsl #2]
   36b64:	subs	r5, r5, #1
   36b68:	mul	r1, r1, r6
   36b6c:	bne	36b5c <GetDataSlab+0xace0>
   36b70:	sub	r6, fp, #96	; 0x60
   36b74:	sub	r5, fp, #176	; 0xb0
   36b78:	ldr	r0, [sp, #60]	; 0x3c
   36b7c:	add	r9, r9, #4
   36b80:	str	r1, [r6, r4, lsl #2]
   36b84:	ldr	r1, [fp, #12]
   36b88:	str	r3, [r5, r4, lsl #2]
   36b8c:	ldr	r1, [r1, r4, lsl #2]
   36b90:	mla	r2, r1, r8, r2
   36b94:	ldr	r1, [sl, r4, lsl #2]
   36b98:	mov	r8, r3
   36b9c:	mov	r3, lr
   36ba0:	ldr	lr, [sp, #48]	; 0x30
   36ba4:	add	r4, r4, #1
   36ba8:	mul	r0, r1, r0
   36bac:	ldr	r1, [fp, #24]
   36bb0:	str	r0, [sp, #60]	; 0x3c
   36bb4:	cmp	r4, r1
   36bb8:	bne	36a94 <GetDataSlab+0xac18>
   36bbc:	ldr	r0, [sp, #56]	; 0x38
   36bc0:	ldr	r6, [sp, #32]
   36bc4:	add	r9, r0, r2, lsl #1
   36bc8:	cmp	r6, #1
   36bcc:	bne	45964 <GetDataSlab+0x19ae8>
   36bd0:	ldr	r0, [sp, #60]	; 0x3c
   36bd4:	ldr	ip, [sp, #68]	; 0x44
   36bd8:	ldr	r8, [fp, #12]
   36bdc:	ldr	r1, [sp, #52]	; 0x34
   36be0:	cmp	r0, #1
   36be4:	blt	519cc <GetDataSlab+0x25b50>
   36be8:	ldr	r0, [r8], #4
   36bec:	add	r6, sl, #4
   36bf0:	mov	r4, #0
   36bf4:	mov	lr, #0
   36bf8:	str	r0, [sp, #56]	; 0x38
   36bfc:	add	r0, r1, r0
   36c00:	str	r0, [sp, #48]	; 0x30
   36c04:	sub	r0, fp, #136	; 0x88
   36c08:	orr	r7, r0, #4
   36c0c:	sub	r0, fp, #96	; 0x60
   36c10:	orr	r0, r0, #4
   36c14:	str	r0, [sp, #36]	; 0x24
   36c18:	bic	r0, r1, #7
   36c1c:	str	r0, [sp, #40]	; 0x28
   36c20:	lsl	r0, r1, #1
   36c24:	str	r0, [sp, #64]	; 0x40
   36c28:	cmp	r1, #1
   36c2c:	blt	36ccc <GetDataSlab+0xae50>
   36c30:	ldr	r0, [sp, #56]	; 0x38
   36c34:	mov	r1, #0
   36c38:	add	r5, r9, r0, lsl #1
   36c3c:	ldr	r0, [sp, #52]	; 0x34
   36c40:	cmp	r0, #8
   36c44:	bcc	36ca8 <GetDataSlab+0xae2c>
   36c48:	ldr	r0, [sp, #68]	; 0x44
   36c4c:	ldr	r3, [sp, #64]	; 0x40
   36c50:	mla	r0, r3, r4, r0
   36c54:	ldr	r3, [sp, #48]	; 0x30
   36c58:	add	r3, r9, r3, lsl #1
   36c5c:	cmp	r0, r3
   36c60:	bcs	36c7c <GetDataSlab+0xae00>
   36c64:	ldr	r0, [sp, #64]	; 0x40
   36c68:	ldr	r3, [sp, #68]	; 0x44
   36c6c:	mla	r0, r0, r4, r0
   36c70:	add	r0, r3, r0
   36c74:	cmp	r0, r5
   36c78:	bhi	36ca8 <GetDataSlab+0xae2c>
   36c7c:	ldr	r1, [sp, #40]	; 0x28
   36c80:	mov	r3, ip
   36c84:	mov	r0, r5
   36c88:	vld1.16	{d16-d17}, [r0]!
   36c8c:	subs	r1, r1, #8
   36c90:	vst1.16	{d16-d17}, [r3]!
   36c94:	bne	36c88 <GetDataSlab+0xae0c>
   36c98:	ldr	r0, [sp, #52]	; 0x34
   36c9c:	ldr	r1, [sp, #40]	; 0x28
   36ca0:	cmp	r0, r1
   36ca4:	beq	36ccc <GetDataSlab+0xae50>
   36ca8:	ldr	r0, [sp, #52]	; 0x34
   36cac:	mov	r3, #0
   36cb0:	sub	r0, r0, r1
   36cb4:	sub	r1, r3, r1, lsl #1
   36cb8:	ldrh	r3, [r5, -r1]
   36cbc:	subs	r0, r0, #1
   36cc0:	strh	r3, [ip, -r1]
   36cc4:	sub	r1, r1, #2
   36cc8:	bne	36cb8 <GetDataSlab+0xae3c>
   36ccc:	ldr	r0, [sp, #44]	; 0x2c
   36cd0:	add	r9, r9, r0, lsl #1
   36cd4:	add	r2, r2, r0
   36cd8:	ldr	r0, [fp, #24]
   36cdc:	cmp	r0, #2
   36ce0:	blt	36d90 <GetDataSlab+0xaf14>
   36ce4:	mov	r1, #0
   36ce8:	mov	r0, r1
   36cec:	ldr	r1, [r7, r1, lsl #2]
   36cf0:	add	r1, r1, #1
   36cf4:	str	r1, [r7, r0, lsl #2]
   36cf8:	ldr	r3, [r6, r0, lsl #2]
   36cfc:	sdiv	r5, r1, r3
   36d00:	mls	r1, r5, r3, r1
   36d04:	cmp	r1, #0
   36d08:	bne	36d80 <GetDataSlab+0xaf04>
   36d0c:	mov	r1, #0
   36d10:	sub	r5, fp, #176	; 0xb0
   36d14:	str	r1, [r7, r0, lsl #2]
   36d18:	add	r1, r5, r0, lsl #2
   36d1c:	ldr	r1, [r1, #4]
   36d20:	sdiv	r3, r2, r1
   36d24:	mls	r3, r3, r1, r2
   36d28:	cmp	r3, #0
   36d2c:	beq	36d48 <GetDataSlab+0xaecc>
   36d30:	ldr	r5, [r5, r0, lsl #2]
   36d34:	ldr	sl, [r8, r0, lsl #2]
   36d38:	sub	r1, r1, r3
   36d3c:	mla	r1, sl, r5, r1
   36d40:	add	r2, r1, r2
   36d44:	b	36d64 <GetDataSlab+0xaee8>
   36d48:	ldr	r1, [r8, r0, lsl #2]
   36d4c:	cmp	r1, #0
   36d50:	beq	36d68 <GetDataSlab+0xaeec>
   36d54:	sub	r3, fp, #176	; 0xb0
   36d58:	ldr	r3, [r3, r0, lsl #2]
   36d5c:	mla	r2, r3, r1, r2
   36d60:	mul	r1, r3, r1
   36d64:	add	r9, r9, r1, lsl #1
   36d68:	ldr	r3, [fp, #24]
   36d6c:	add	r1, r0, #1
   36d70:	add	r0, r0, #2
   36d74:	cmp	r0, r3
   36d78:	blt	36ce8 <GetDataSlab+0xae6c>
   36d7c:	b	36d90 <GetDataSlab+0xaf14>
   36d80:	ldr	r1, [sp, #36]	; 0x24
   36d84:	ldr	r0, [r1, r0, lsl #2]
   36d88:	add	r9, r9, r0, lsl #1
   36d8c:	add	r2, r0, r2
   36d90:	ldr	r1, [sp, #52]	; 0x34
   36d94:	ldr	r0, [sp, #64]	; 0x40
   36d98:	ldr	r3, [sp, #60]	; 0x3c
   36d9c:	add	r4, r4, #1
   36da0:	add	lr, lr, r1
   36da4:	add	ip, ip, r0
   36da8:	mov	r0, #0
   36dac:	cmp	lr, r3
   36db0:	blt	36c28 <GetDataSlab+0xadac>
   36db4:	b	2e97c <GetDataSlab+0x2b00>
   36db8:	ldr	r0, [ip]
   36dbc:	mov	r3, #0
   36dc0:	sub	lr, fp, #96	; 0x60
   36dc4:	str	r0, [sp, #32]
   36dc8:	sub	r0, r0, #1
   36dcc:	str	r0, [fp, #-96]	; 0xffffffa0
   36dd0:	ldr	r0, [fp, #8]
   36dd4:	ldr	r0, [r0]
   36dd8:	str	r0, [fp, #-176]	; 0xffffff50
   36ddc:	str	r0, [sp, #44]	; 0x2c
   36de0:	ldr	r0, [fp, #24]
   36de4:	ldr	r1, [r6]
   36de8:	sub	r6, fp, #176	; 0xb0
   36dec:	cmp	r0, #2
   36df0:	str	r1, [sp, #52]	; 0x34
   36df4:	str	r1, [sp, #60]	; 0x3c
   36df8:	blt	36f4c <GetDataSlab+0xb0d0>
   36dfc:	ldr	r0, [fp, #8]
   36e00:	ldr	r2, [sp, #44]	; 0x2c
   36e04:	mov	r5, #1
   36e08:	mov	r9, #0
   36e0c:	mvn	r4, #15
   36e10:	mov	r3, #0
   36e14:	sub	r7, r0, #4
   36e18:	sub	r8, r0, #12
   36e1c:	mov	r0, r2
   36e20:	str	r2, [sp, #48]	; 0x30
   36e24:	ldr	r0, [sp, #52]	; 0x34
   36e28:	str	r0, [sp, #60]	; 0x3c
   36e2c:	ldr	r0, [ip, r5, lsl #2]
   36e30:	str	r2, [r6, r5, lsl #2]
   36e34:	add	r9, r9, #1
   36e38:	cmp	r9, #4
   36e3c:	sub	ip, r0, #1
   36e40:	ldr	r0, [fp, #8]
   36e44:	str	ip, [lr, r5, lsl #2]
   36e48:	ldr	r0, [r0, r5, lsl #2]
   36e4c:	bcs	36e5c <GetDataSlab+0xafe0>
   36e50:	mov	sl, r0
   36e54:	mov	r6, r5
   36e58:	b	36ee4 <GetDataSlab+0xb068>
   36e5c:	vmov.i32	q9, #1	; 0x00000001
   36e60:	vmov.i32	q10, #1	; 0x00000001
   36e64:	vmov.i32	q8, #1	; 0x00000001
   36e68:	bic	lr, r9, #3
   36e6c:	bic	sl, r5, #3
   36e70:	vmov.32	d23[1], r0
   36e74:	vmov.32	d18[0], r2
   36e78:	vmov.32	d20[0], ip
   36e7c:	sub	r6, r5, lr
   36e80:	mov	r2, r8
   36e84:	vorr	d16, d18, d18
   36e88:	vmov.i32	q9, #1	; 0x00000001
   36e8c:	vorr	d18, d20, d20
   36e90:	vld1.32	{d20-d21}, [r2], r4
   36e94:	subs	sl, sl, #4
   36e98:	vrev64.32	q12, q10
   36e9c:	vext.8	q12, q12, q12, #8
   36ea0:	vext.8	q11, q11, q12, #12
   36ea4:	vmul.i32	q9, q9, q12
   36ea8:	vmul.i32	q8, q11, q8
   36eac:	vorr	q11, q12, q12
   36eb0:	bne	36e90 <GetDataSlab+0xb014>
   36eb4:	vext.8	q11, q9, q8, #8
   36eb8:	vext.8	q12, q8, q8, #8
   36ebc:	mov	sl, r0
   36ec0:	cmp	r9, lr
   36ec4:	vmul.i32	q0, q9, q11
   36ec8:	vmul.i32	q1, q8, q12
   36ecc:	vmul.i32	q8, q0, d0[1]
   36ed0:	vmul.i32	q9, q1, d2[1]
   36ed4:	vmov.32	ip, d16[0]
   36ed8:	vmov.32	r2, d18[0]
   36edc:	beq	36ef8 <GetDataSlab+0xb07c>
   36ee0:	vmov.32	r0, d20[0]
   36ee4:	mul	r2, r0, r2
   36ee8:	ldr	r0, [r7, r6, lsl #2]
   36eec:	subs	r6, r6, #1
   36ef0:	mul	ip, ip, r0
   36ef4:	bne	36ee4 <GetDataSlab+0xb068>
   36ef8:	ldr	r0, [fp, #12]
   36efc:	sub	r6, fp, #176	; 0xb0
   36f00:	sub	lr, fp, #96	; 0x60
   36f04:	ldr	r1, [sp, #48]	; 0x30
   36f08:	add	r8, r8, #4
   36f0c:	str	r2, [sp, #48]	; 0x30
   36f10:	str	r2, [r6, r5, lsl #2]
   36f14:	str	ip, [lr, r5, lsl #2]
   36f18:	ldr	ip, [fp, #16]
   36f1c:	mov	r2, sl
   36f20:	ldr	r0, [r0, r5, lsl #2]
   36f24:	mla	r3, r0, r1, r3
   36f28:	ldr	r0, [fp, #20]
   36f2c:	ldr	r1, [sp, #60]	; 0x3c
   36f30:	ldr	r0, [r0, r5, lsl #2]
   36f34:	add	r5, r5, #1
   36f38:	mul	r1, r0, r1
   36f3c:	ldr	r0, [fp, #24]
   36f40:	str	r1, [sp, #60]	; 0x3c
   36f44:	cmp	r5, r0
   36f48:	bne	36e2c <GetDataSlab+0xafb0>
   36f4c:	ldr	r0, [sp, #56]	; 0x38
   36f50:	ldr	r6, [sp, #32]
   36f54:	add	sl, r0, r3, lsl #2
   36f58:	cmp	r6, #1
   36f5c:	bne	45af0 <GetDataSlab+0x19c74>
   36f60:	ldr	r0, [sp, #60]	; 0x3c
   36f64:	ldr	r2, [sp, #52]	; 0x34
   36f68:	sub	r1, fp, #96	; 0x60
   36f6c:	cmp	r0, #1
   36f70:	ldr	r0, [fp, #12]
   36f74:	blt	519e0 <GetDataSlab+0x25b64>
   36f78:	add	r8, r0, #4
   36f7c:	ldr	r0, [fp, #20]
   36f80:	mov	r9, #0
   36f84:	mov	lr, #0
   36f88:	add	r6, r0, #4
   36f8c:	sub	r0, fp, #136	; 0x88
   36f90:	orr	r5, r0, #4
   36f94:	orr	r0, r1, #4
   36f98:	str	r0, [sp, #40]	; 0x28
   36f9c:	lsl	r0, r2, #1
   36fa0:	str	r0, [sp, #56]	; 0x38
   36fa4:	bic	r0, r2, #3
   36fa8:	str	r0, [sp, #48]	; 0x30
   36fac:	ldr	r4, [sp, #68]	; 0x44
   36fb0:	cmp	r2, #1
   36fb4:	blt	37024 <GetDataSlab+0xb1a8>
   36fb8:	ldr	r0, [fp, #12]
   36fbc:	mov	r1, #0
   36fc0:	ldr	r0, [r0]
   36fc4:	add	r7, sl, r0, lsl #2
   36fc8:	ldr	r0, [sp, #52]	; 0x34
   36fcc:	cmp	r0, #4
   36fd0:	bcc	37004 <GetDataSlab+0xb188>
   36fd4:	ldr	r2, [sp, #48]	; 0x30
   36fd8:	mov	r1, r4
   36fdc:	mov	r0, r7
   36fe0:	vld1.32	{d16-d17}, [r0]!
   36fe4:	subs	r2, r2, #4
   36fe8:	vmovn.i32	d16, q8
   36fec:	vst1.16	{d16}, [r1]!
   36ff0:	bne	36fe0 <GetDataSlab+0xb164>
   36ff4:	ldr	r0, [sp, #52]	; 0x34
   36ff8:	ldr	r1, [sp, #48]	; 0x30
   36ffc:	cmp	r0, r1
   37000:	beq	37024 <GetDataSlab+0xb1a8>
   37004:	ldr	r0, [sp, #52]	; 0x34
   37008:	sub	r0, r0, r1
   3700c:	sub	r1, r9, r1, lsl #1
   37010:	ldr	r2, [r7, -r1, lsl #1]
   37014:	subs	r0, r0, #1
   37018:	strh	r2, [r4, -r1]
   3701c:	sub	r1, r1, #2
   37020:	bne	37010 <GetDataSlab+0xb194>
   37024:	ldr	r0, [sp, #44]	; 0x2c
   37028:	add	sl, sl, r0, lsl #2
   3702c:	add	r3, r3, r0
   37030:	ldr	r0, [fp, #24]
   37034:	cmp	r0, #2
   37038:	blt	370e8 <GetDataSlab+0xb26c>
   3703c:	mov	r1, #0
   37040:	mov	r0, r1
   37044:	ldr	r1, [r5, r1, lsl #2]
   37048:	add	r1, r1, #1
   3704c:	str	r1, [r5, r0, lsl #2]
   37050:	ldr	r2, [r6, r0, lsl #2]
   37054:	sdiv	r7, r1, r2
   37058:	mls	r1, r7, r2, r1
   3705c:	cmp	r1, #0
   37060:	bne	370d8 <GetDataSlab+0xb25c>
   37064:	sub	r7, fp, #176	; 0xb0
   37068:	str	r9, [r5, r0, lsl #2]
   3706c:	add	r1, r7, r0, lsl #2
   37070:	ldr	r1, [r1, #4]
   37074:	sdiv	r2, r3, r1
   37078:	mls	r2, r2, r1, r3
   3707c:	cmp	r2, #0
   37080:	beq	370a0 <GetDataSlab+0xb224>
   37084:	ldr	r7, [r7, r0, lsl #2]
   37088:	ldr	ip, [r8, r0, lsl #2]
   3708c:	ldr	r4, [sp, #68]	; 0x44
   37090:	sub	r1, r1, r2
   37094:	mla	r1, ip, r7, r1
   37098:	add	r3, r1, r3
   3709c:	b	370bc <GetDataSlab+0xb240>
   370a0:	ldr	r1, [r8, r0, lsl #2]
   370a4:	cmp	r1, #0
   370a8:	beq	370c0 <GetDataSlab+0xb244>
   370ac:	sub	r2, fp, #176	; 0xb0
   370b0:	ldr	r2, [r2, r0, lsl #2]
   370b4:	mla	r3, r2, r1, r3
   370b8:	mul	r1, r2, r1
   370bc:	add	sl, sl, r1, lsl #2
   370c0:	ldr	r2, [fp, #24]
   370c4:	add	r1, r0, #1
   370c8:	add	r0, r0, #2
   370cc:	cmp	r0, r2
   370d0:	blt	37040 <GetDataSlab+0xb1c4>
   370d4:	b	370e8 <GetDataSlab+0xb26c>
   370d8:	ldr	r1, [sp, #40]	; 0x28
   370dc:	ldr	r0, [r1, r0, lsl #2]
   370e0:	add	sl, sl, r0, lsl #2
   370e4:	add	r3, r0, r3
   370e8:	ldr	r2, [sp, #52]	; 0x34
   370ec:	ldr	r0, [sp, #56]	; 0x38
   370f0:	ldr	r1, [sp, #60]	; 0x3c
   370f4:	add	lr, lr, r2
   370f8:	add	r4, r4, r0
   370fc:	mov	r0, #0
   37100:	cmp	lr, r1
   37104:	str	r4, [sp, #68]	; 0x44
   37108:	blt	36fac <GetDataSlab+0xb130>
   3710c:	b	2e97c <GetDataSlab+0x2b00>
   37110:	ldr	r0, [ip]
   37114:	mov	r3, #0
   37118:	sub	lr, fp, #96	; 0x60
   3711c:	str	r0, [sp, #32]
   37120:	sub	r0, r0, #1
   37124:	str	r0, [fp, #-96]	; 0xffffffa0
   37128:	ldr	r0, [fp, #8]
   3712c:	ldr	r0, [r0]
   37130:	str	r0, [fp, #-176]	; 0xffffff50
   37134:	str	r0, [sp, #44]	; 0x2c
   37138:	ldr	r0, [fp, #24]
   3713c:	ldr	r1, [r6]
   37140:	sub	r6, fp, #176	; 0xb0
   37144:	cmp	r0, #2
   37148:	str	r1, [sp, #52]	; 0x34
   3714c:	str	r1, [sp, #60]	; 0x3c
   37150:	blt	372a4 <GetDataSlab+0xb428>
   37154:	ldr	r0, [fp, #8]
   37158:	ldr	r2, [sp, #44]	; 0x2c
   3715c:	mov	r5, #1
   37160:	mov	r9, #0
   37164:	mvn	r4, #15
   37168:	mov	r3, #0
   3716c:	sub	r7, r0, #4
   37170:	sub	r8, r0, #12
   37174:	mov	r0, r2
   37178:	str	r2, [sp, #48]	; 0x30
   3717c:	ldr	r0, [sp, #52]	; 0x34
   37180:	str	r0, [sp, #60]	; 0x3c
   37184:	ldr	r0, [ip, r5, lsl #2]
   37188:	str	r2, [r6, r5, lsl #2]
   3718c:	add	r9, r9, #1
   37190:	cmp	r9, #4
   37194:	sub	ip, r0, #1
   37198:	ldr	r0, [fp, #8]
   3719c:	str	ip, [lr, r5, lsl #2]
   371a0:	ldr	r0, [r0, r5, lsl #2]
   371a4:	bcs	371b4 <GetDataSlab+0xb338>
   371a8:	mov	sl, r0
   371ac:	mov	r6, r5
   371b0:	b	3723c <GetDataSlab+0xb3c0>
   371b4:	vmov.i32	q9, #1	; 0x00000001
   371b8:	vmov.i32	q10, #1	; 0x00000001
   371bc:	vmov.i32	q8, #1	; 0x00000001
   371c0:	bic	lr, r9, #3
   371c4:	bic	sl, r5, #3
   371c8:	vmov.32	d23[1], r0
   371cc:	vmov.32	d18[0], r2
   371d0:	vmov.32	d20[0], ip
   371d4:	sub	r6, r5, lr
   371d8:	mov	r2, r8
   371dc:	vorr	d16, d18, d18
   371e0:	vmov.i32	q9, #1	; 0x00000001
   371e4:	vorr	d18, d20, d20
   371e8:	vld1.32	{d20-d21}, [r2], r4
   371ec:	subs	sl, sl, #4
   371f0:	vrev64.32	q12, q10
   371f4:	vext.8	q12, q12, q12, #8
   371f8:	vext.8	q11, q11, q12, #12
   371fc:	vmul.i32	q9, q9, q12
   37200:	vmul.i32	q8, q11, q8
   37204:	vorr	q11, q12, q12
   37208:	bne	371e8 <GetDataSlab+0xb36c>
   3720c:	vext.8	q11, q9, q8, #8
   37210:	vext.8	q12, q8, q8, #8
   37214:	mov	sl, r0
   37218:	cmp	r9, lr
   3721c:	vmul.i32	q0, q9, q11
   37220:	vmul.i32	q1, q8, q12
   37224:	vmul.i32	q8, q0, d0[1]
   37228:	vmul.i32	q9, q1, d2[1]
   3722c:	vmov.32	ip, d16[0]
   37230:	vmov.32	r2, d18[0]
   37234:	beq	37250 <GetDataSlab+0xb3d4>
   37238:	vmov.32	r0, d20[0]
   3723c:	mul	r2, r0, r2
   37240:	ldr	r0, [r7, r6, lsl #2]
   37244:	subs	r6, r6, #1
   37248:	mul	ip, ip, r0
   3724c:	bne	3723c <GetDataSlab+0xb3c0>
   37250:	ldr	r0, [fp, #12]
   37254:	sub	r6, fp, #176	; 0xb0
   37258:	sub	lr, fp, #96	; 0x60
   3725c:	ldr	r1, [sp, #48]	; 0x30
   37260:	add	r8, r8, #4
   37264:	str	r2, [sp, #48]	; 0x30
   37268:	str	r2, [r6, r5, lsl #2]
   3726c:	str	ip, [lr, r5, lsl #2]
   37270:	ldr	ip, [fp, #16]
   37274:	mov	r2, sl
   37278:	ldr	r0, [r0, r5, lsl #2]
   3727c:	mla	r3, r0, r1, r3
   37280:	ldr	r0, [fp, #20]
   37284:	ldr	r1, [sp, #60]	; 0x3c
   37288:	ldr	r0, [r0, r5, lsl #2]
   3728c:	add	r5, r5, #1
   37290:	mul	r1, r0, r1
   37294:	ldr	r0, [fp, #24]
   37298:	str	r1, [sp, #60]	; 0x3c
   3729c:	cmp	r5, r0
   372a0:	bne	37184 <GetDataSlab+0xb308>
   372a4:	ldr	r0, [sp, #56]	; 0x38
   372a8:	ldr	r6, [sp, #32]
   372ac:	add	sl, r0, r3, lsl #2
   372b0:	cmp	r6, #1
   372b4:	bne	45c84 <GetDataSlab+0x19e08>
   372b8:	ldr	r0, [sp, #60]	; 0x3c
   372bc:	ldr	r2, [sp, #52]	; 0x34
   372c0:	sub	r1, fp, #96	; 0x60
   372c4:	cmp	r0, #1
   372c8:	ldr	r0, [fp, #12]
   372cc:	blt	519f4 <GetDataSlab+0x25b78>
   372d0:	add	r8, r0, #4
   372d4:	ldr	r0, [fp, #20]
   372d8:	mov	r9, #0
   372dc:	mov	lr, #0
   372e0:	add	r6, r0, #4
   372e4:	sub	r0, fp, #136	; 0x88
   372e8:	orr	r5, r0, #4
   372ec:	orr	r0, r1, #4
   372f0:	str	r0, [sp, #40]	; 0x28
   372f4:	lsl	r0, r2, #1
   372f8:	str	r0, [sp, #56]	; 0x38
   372fc:	bic	r0, r2, #3
   37300:	str	r0, [sp, #48]	; 0x30
   37304:	ldr	r4, [sp, #68]	; 0x44
   37308:	cmp	r2, #1
   3730c:	blt	3737c <GetDataSlab+0xb500>
   37310:	ldr	r0, [fp, #12]
   37314:	mov	r1, #0
   37318:	ldr	r0, [r0]
   3731c:	add	r7, sl, r0, lsl #2
   37320:	ldr	r0, [sp, #52]	; 0x34
   37324:	cmp	r0, #4
   37328:	bcc	3735c <GetDataSlab+0xb4e0>
   3732c:	ldr	r2, [sp, #48]	; 0x30
   37330:	mov	r1, r4
   37334:	mov	r0, r7
   37338:	vld1.32	{d16-d17}, [r0]!
   3733c:	subs	r2, r2, #4
   37340:	vmovn.i32	d16, q8
   37344:	vst1.16	{d16}, [r1]!
   37348:	bne	37338 <GetDataSlab+0xb4bc>
   3734c:	ldr	r0, [sp, #52]	; 0x34
   37350:	ldr	r1, [sp, #48]	; 0x30
   37354:	cmp	r0, r1
   37358:	beq	3737c <GetDataSlab+0xb500>
   3735c:	ldr	r0, [sp, #52]	; 0x34
   37360:	sub	r0, r0, r1
   37364:	sub	r1, r9, r1, lsl #1
   37368:	ldr	r2, [r7, -r1, lsl #1]
   3736c:	subs	r0, r0, #1
   37370:	strh	r2, [r4, -r1]
   37374:	sub	r1, r1, #2
   37378:	bne	37368 <GetDataSlab+0xb4ec>
   3737c:	ldr	r0, [sp, #44]	; 0x2c
   37380:	add	sl, sl, r0, lsl #2
   37384:	add	r3, r3, r0
   37388:	ldr	r0, [fp, #24]
   3738c:	cmp	r0, #2
   37390:	blt	37440 <GetDataSlab+0xb5c4>
   37394:	mov	r1, #0
   37398:	mov	r0, r1
   3739c:	ldr	r1, [r5, r1, lsl #2]
   373a0:	add	r1, r1, #1
   373a4:	str	r1, [r5, r0, lsl #2]
   373a8:	ldr	r2, [r6, r0, lsl #2]
   373ac:	sdiv	r7, r1, r2
   373b0:	mls	r1, r7, r2, r1
   373b4:	cmp	r1, #0
   373b8:	bne	37430 <GetDataSlab+0xb5b4>
   373bc:	sub	r7, fp, #176	; 0xb0
   373c0:	str	r9, [r5, r0, lsl #2]
   373c4:	add	r1, r7, r0, lsl #2
   373c8:	ldr	r1, [r1, #4]
   373cc:	sdiv	r2, r3, r1
   373d0:	mls	r2, r2, r1, r3
   373d4:	cmp	r2, #0
   373d8:	beq	373f8 <GetDataSlab+0xb57c>
   373dc:	ldr	r7, [r7, r0, lsl #2]
   373e0:	ldr	ip, [r8, r0, lsl #2]
   373e4:	ldr	r4, [sp, #68]	; 0x44
   373e8:	sub	r1, r1, r2
   373ec:	mla	r1, ip, r7, r1
   373f0:	add	r3, r1, r3
   373f4:	b	37414 <GetDataSlab+0xb598>
   373f8:	ldr	r1, [r8, r0, lsl #2]
   373fc:	cmp	r1, #0
   37400:	beq	37418 <GetDataSlab+0xb59c>
   37404:	sub	r2, fp, #176	; 0xb0
   37408:	ldr	r2, [r2, r0, lsl #2]
   3740c:	mla	r3, r2, r1, r3
   37410:	mul	r1, r2, r1
   37414:	add	sl, sl, r1, lsl #2
   37418:	ldr	r2, [fp, #24]
   3741c:	add	r1, r0, #1
   37420:	add	r0, r0, #2
   37424:	cmp	r0, r2
   37428:	blt	37398 <GetDataSlab+0xb51c>
   3742c:	b	37440 <GetDataSlab+0xb5c4>
   37430:	ldr	r1, [sp, #40]	; 0x28
   37434:	ldr	r0, [r1, r0, lsl #2]
   37438:	add	sl, sl, r0, lsl #2
   3743c:	add	r3, r0, r3
   37440:	ldr	r2, [sp, #52]	; 0x34
   37444:	ldr	r0, [sp, #56]	; 0x38
   37448:	ldr	r1, [sp, #60]	; 0x3c
   3744c:	add	lr, lr, r2
   37450:	add	r4, r4, r0
   37454:	mov	r0, #0
   37458:	cmp	lr, r1
   3745c:	str	r4, [sp, #68]	; 0x44
   37460:	blt	37304 <GetDataSlab+0xb488>
   37464:	b	2e97c <GetDataSlab+0x2b00>
   37468:	ldr	r0, [ip]
   3746c:	ldr	r9, [fp, #8]
   37470:	mov	sl, r6
   37474:	mov	r2, #0
   37478:	sub	r5, fp, #176	; 0xb0
   3747c:	str	r0, [sp, #32]
   37480:	sub	r0, r0, #1
   37484:	str	r0, [fp, #-96]	; 0xffffffa0
   37488:	ldr	r0, [r9]
   3748c:	str	r0, [fp, #-176]	; 0xffffff50
   37490:	str	r0, [sp, #40]	; 0x28
   37494:	ldr	r0, [fp, #24]
   37498:	ldr	r1, [r6]
   3749c:	sub	r6, fp, #96	; 0x60
   374a0:	cmp	r0, #2
   374a4:	str	r1, [sp, #52]	; 0x34
   374a8:	str	r1, [sp, #60]	; 0x3c
   374ac:	blt	37608 <GetDataSlab+0xb78c>
   374b0:	mov	r0, #0
   374b4:	ldr	r3, [sp, #40]	; 0x28
   374b8:	sub	r7, r9, #4
   374bc:	sub	ip, r9, #12
   374c0:	mov	r4, #1
   374c4:	mvn	lr, #15
   374c8:	mov	r2, #0
   374cc:	str	r0, [sp, #48]	; 0x30
   374d0:	ldr	r0, [sp, #52]	; 0x34
   374d4:	mov	r8, r3
   374d8:	str	r0, [sp, #60]	; 0x3c
   374dc:	ldr	r1, [fp, #16]
   374e0:	ldr	r0, [sp, #48]	; 0x30
   374e4:	ldr	r1, [r1, r4, lsl #2]
   374e8:	str	r3, [r5, r4, lsl #2]
   374ec:	add	r0, r0, #1
   374f0:	cmp	r0, #4
   374f4:	str	r0, [sp, #48]	; 0x30
   374f8:	sub	sl, r1, #1
   374fc:	str	sl, [r6, r4, lsl #2]
   37500:	ldr	r6, [r9, r4, lsl #2]
   37504:	str	r6, [sp, #44]	; 0x2c
   37508:	bcs	37518 <GetDataSlab+0xb69c>
   3750c:	mov	r1, r6
   37510:	mov	r5, r4
   37514:	b	375a8 <GetDataSlab+0xb72c>
   37518:	vmov.i32	q9, #1	; 0x00000001
   3751c:	vmov.i32	q10, #1	; 0x00000001
   37520:	vmov.i32	q8, #1	; 0x00000001
   37524:	bic	r1, r0, #3
   37528:	bic	r9, r4, #3
   3752c:	vmov.32	d23[1], r6
   37530:	vmov.32	d18[0], r3
   37534:	vmov.32	d20[0], sl
   37538:	sub	r5, r4, r1
   3753c:	mov	r3, ip
   37540:	vorr	d16, d18, d18
   37544:	vmov.i32	q9, #1	; 0x00000001
   37548:	vorr	d18, d20, d20
   3754c:	vld1.32	{d20-d21}, [r3], lr
   37550:	subs	r9, r9, #4
   37554:	vrev64.32	q12, q10
   37558:	vext.8	q12, q12, q12, #8
   3755c:	vext.8	q11, q11, q12, #12
   37560:	vmul.i32	q9, q9, q12
   37564:	vmul.i32	q8, q11, q8
   37568:	vorr	q11, q12, q12
   3756c:	bne	3754c <GetDataSlab+0xb6d0>
   37570:	vext.8	q11, q9, q8, #8
   37574:	vext.8	q12, q8, q8, #8
   37578:	cmp	r0, r1
   3757c:	vmul.i32	q0, q9, q11
   37580:	vmul.i32	q1, q8, q12
   37584:	vmul.i32	q8, q0, d0[1]
   37588:	vmul.i32	q9, q1, d2[1]
   3758c:	vmov.32	sl, d16[0]
   37590:	vmov.32	r3, d18[0]
   37594:	bne	375a0 <GetDataSlab+0xb724>
   37598:	ldr	r9, [fp, #8]
   3759c:	b	375bc <GetDataSlab+0xb740>
   375a0:	ldr	r9, [fp, #8]
   375a4:	vmov.32	r1, d20[0]
   375a8:	mul	r3, r1, r3
   375ac:	ldr	r1, [r7, r5, lsl #2]
   375b0:	subs	r5, r5, #1
   375b4:	mul	sl, sl, r1
   375b8:	bne	375a8 <GetDataSlab+0xb72c>
   375bc:	ldr	r1, [fp, #12]
   375c0:	sub	r5, fp, #176	; 0xb0
   375c4:	sub	r6, fp, #96	; 0x60
   375c8:	ldr	r0, [sp, #60]	; 0x3c
   375cc:	add	ip, ip, #4
   375d0:	str	sl, [r6, r4, lsl #2]
   375d4:	str	r3, [r5, r4, lsl #2]
   375d8:	ldr	sl, [fp, #20]
   375dc:	ldr	r1, [r1, r4, lsl #2]
   375e0:	mla	r2, r1, r8, r2
   375e4:	ldr	r1, [sl, r4, lsl #2]
   375e8:	mov	r8, r3
   375ec:	ldr	r3, [sp, #44]	; 0x2c
   375f0:	add	r4, r4, #1
   375f4:	mul	r0, r1, r0
   375f8:	ldr	r1, [fp, #24]
   375fc:	str	r0, [sp, #60]	; 0x3c
   37600:	cmp	r4, r1
   37604:	bne	374dc <GetDataSlab+0xb660>
   37608:	ldr	r0, [sp, #56]	; 0x38
   3760c:	ldr	r6, [sp, #32]
   37610:	add	r9, r0, r2, lsl #2
   37614:	cmp	r6, #1
   37618:	bne	45e18 <GetDataSlab+0x19f9c>
   3761c:	ldr	r0, [sp, #60]	; 0x3c
   37620:	ldr	lr, [fp, #12]
   37624:	ldr	r1, [sp, #52]	; 0x34
   37628:	cmp	r0, #1
   3762c:	blt	51a08 <GetDataSlab+0x25b8c>
   37630:	sub	r0, fp, #136	; 0x88
   37634:	add	r7, sl, #4
   37638:	mov	sl, #0
   3763c:	mov	ip, #0
   37640:	orr	r6, r0, #4
   37644:	sub	r0, fp, #96	; 0x60
   37648:	orr	r0, r0, #4
   3764c:	str	r0, [sp, #44]	; 0x2c
   37650:	lsl	r0, r1, #1
   37654:	str	r0, [sp, #56]	; 0x38
   37658:	bic	r0, r1, #3
   3765c:	str	r0, [sp, #48]	; 0x30
   37660:	ldr	r0, [lr], #4
   37664:	str	r0, [sp, #64]	; 0x40
   37668:	cmp	r1, #1
   3766c:	mov	r4, lr
   37670:	blt	376f4 <GetDataSlab+0xb878>
   37674:	ldr	r0, [sp, #52]	; 0x34
   37678:	mov	r3, #0
   3767c:	cmp	r0, #4
   37680:	bcc	376bc <GetDataSlab+0xb840>
   37684:	ldr	r0, [sp, #64]	; 0x40
   37688:	ldr	r1, [sp, #48]	; 0x30
   3768c:	ldr	r3, [sp, #68]	; 0x44
   37690:	add	r0, r9, r0, lsl #2
   37694:	vld1.32	{d16-d17}, [r0]!
   37698:	subs	r1, r1, #4
   3769c:	vcvt.s32.f32	q8, q8
   376a0:	vmovn.i32	d16, q8
   376a4:	vst1.16	{d16}, [r3]!
   376a8:	bne	37694 <GetDataSlab+0xb818>
   376ac:	ldr	r0, [sp, #52]	; 0x34
   376b0:	ldr	r3, [sp, #48]	; 0x30
   376b4:	cmp	r0, r3
   376b8:	beq	376f4 <GetDataSlab+0xb878>
   376bc:	ldr	r5, [sp, #64]	; 0x40
   376c0:	ldr	r0, [sp, #52]	; 0x34
   376c4:	ldr	r1, [sp, #68]	; 0x44
   376c8:	add	r5, r9, r5, lsl #2
   376cc:	sub	r0, r0, r3
   376d0:	add	r1, r1, r3, lsl #1
   376d4:	add	r3, r5, r3, lsl #2
   376d8:	vldr	s0, [r3]
   376dc:	subs	r0, r0, #1
   376e0:	add	r3, r3, #4
   376e4:	vcvt.s32.f32	s0, s0
   376e8:	vmov	r5, s0
   376ec:	strh	r5, [r1], #2
   376f0:	bne	376d8 <GetDataSlab+0xb85c>
   376f4:	ldr	r0, [sp, #40]	; 0x28
   376f8:	add	r9, r9, r0, lsl #2
   376fc:	add	r2, r2, r0
   37700:	ldr	r0, [fp, #24]
   37704:	cmp	r0, #2
   37708:	blt	377b8 <GetDataSlab+0xb93c>
   3770c:	mov	r1, #0
   37710:	mov	r0, r1
   37714:	ldr	r1, [r6, r1, lsl #2]
   37718:	add	r1, r1, #1
   3771c:	str	r1, [r6, r0, lsl #2]
   37720:	ldr	r3, [r7, r0, lsl #2]
   37724:	sdiv	r5, r1, r3
   37728:	mls	r1, r5, r3, r1
   3772c:	cmp	r1, #0
   37730:	bne	377a8 <GetDataSlab+0xb92c>
   37734:	sub	r5, fp, #176	; 0xb0
   37738:	str	sl, [r6, r0, lsl #2]
   3773c:	add	r1, r5, r0, lsl #2
   37740:	ldr	r1, [r1, #4]
   37744:	sdiv	r3, r2, r1
   37748:	mls	r3, r3, r1, r2
   3774c:	cmp	r3, #0
   37750:	beq	37770 <GetDataSlab+0xb8f4>
   37754:	ldr	r5, [r5, r0, lsl #2]
   37758:	ldr	r8, [lr, r0, lsl #2]
   3775c:	sub	r1, r1, r3
   37760:	mov	r4, lr
   37764:	mla	r1, r8, r5, r1
   37768:	add	r2, r1, r2
   3776c:	b	3778c <GetDataSlab+0xb910>
   37770:	ldr	r1, [r4, r0, lsl #2]
   37774:	cmp	r1, #0
   37778:	beq	37790 <GetDataSlab+0xb914>
   3777c:	sub	r3, fp, #176	; 0xb0
   37780:	ldr	r3, [r3, r0, lsl #2]
   37784:	mla	r2, r3, r1, r2
   37788:	mul	r1, r3, r1
   3778c:	add	r9, r9, r1, lsl #2
   37790:	ldr	r3, [fp, #24]
   37794:	add	r1, r0, #1
   37798:	add	r0, r0, #2
   3779c:	cmp	r0, r3
   377a0:	blt	37710 <GetDataSlab+0xb894>
   377a4:	b	377b8 <GetDataSlab+0xb93c>
   377a8:	ldr	r1, [sp, #44]	; 0x2c
   377ac:	ldr	r0, [r1, r0, lsl #2]
   377b0:	add	r9, r9, r0, lsl #2
   377b4:	add	r2, r0, r2
   377b8:	ldr	r0, [sp, #68]	; 0x44
   377bc:	ldr	r1, [sp, #56]	; 0x38
   377c0:	ldr	r3, [sp, #60]	; 0x3c
   377c4:	add	r0, r0, r1
   377c8:	ldr	r1, [sp, #52]	; 0x34
   377cc:	str	r0, [sp, #68]	; 0x44
   377d0:	mov	r0, #0
   377d4:	add	ip, ip, r1
   377d8:	cmp	ip, r3
   377dc:	blt	37668 <GetDataSlab+0xb7ec>
   377e0:	b	2e97c <GetDataSlab+0x2b00>
   377e4:	ldr	r0, [ip]
   377e8:	mov	r2, #0
   377ec:	sub	r4, fp, #176	; 0xb0
   377f0:	sub	r9, fp, #96	; 0x60
   377f4:	str	r0, [sp, #32]
   377f8:	sub	r0, r0, #1
   377fc:	str	r0, [fp, #-96]	; 0xffffffa0
   37800:	ldr	r0, [fp, #8]
   37804:	ldr	r0, [r0]
   37808:	str	r0, [fp, #-176]	; 0xffffff50
   3780c:	str	r0, [sp, #44]	; 0x2c
   37810:	ldr	r0, [fp, #24]
   37814:	ldr	r1, [r6]
   37818:	cmp	r0, #2
   3781c:	str	r1, [sp, #52]	; 0x34
   37820:	str	r1, [sp, #60]	; 0x3c
   37824:	blt	37984 <GetDataSlab+0xbb08>
   37828:	ldr	r0, [fp, #8]
   3782c:	ldr	r3, [sp, #44]	; 0x2c
   37830:	ldr	r1, [sp, #52]	; 0x34
   37834:	mov	sl, #0
   37838:	mvn	r5, #15
   3783c:	mov	r2, #0
   37840:	sub	r7, r0, #4
   37844:	sub	r8, r0, #12
   37848:	mov	r0, #1
   3784c:	mov	r6, r3
   37850:	str	r1, [sp, #60]	; 0x3c
   37854:	ldr	r1, [ip, r0, lsl #2]
   37858:	str	r3, [r4, r0, lsl #2]
   3785c:	str	r6, [sp, #48]	; 0x30
   37860:	mov	r6, sl
   37864:	add	r6, sl, #1
   37868:	cmp	r6, #4
   3786c:	sub	lr, r1, #1
   37870:	ldr	r1, [fp, #8]
   37874:	str	lr, [r9, r0, lsl #2]
   37878:	ldr	ip, [r1, r0, lsl #2]
   3787c:	bcs	3788c <GetDataSlab+0xba10>
   37880:	mov	r1, ip
   37884:	mov	r4, r0
   37888:	b	37918 <GetDataSlab+0xba9c>
   3788c:	vmov.i32	q9, #1	; 0x00000001
   37890:	vmov.i32	q10, #1	; 0x00000001
   37894:	vmov.i32	q8, #1	; 0x00000001
   37898:	bic	r1, r6, #3
   3789c:	bic	sl, r0, #3
   378a0:	vmov.32	d23[1], ip
   378a4:	vmov.32	d18[0], r3
   378a8:	vmov.32	d20[0], lr
   378ac:	sub	r4, r0, r1
   378b0:	mov	r3, r8
   378b4:	vorr	d16, d18, d18
   378b8:	vmov.i32	q9, #1	; 0x00000001
   378bc:	vorr	d18, d20, d20
   378c0:	vld1.32	{d20-d21}, [r3], r5
   378c4:	subs	sl, sl, #4
   378c8:	vrev64.32	q12, q10
   378cc:	vext.8	q12, q12, q12, #8
   378d0:	vext.8	q11, q11, q12, #12
   378d4:	vmul.i32	q9, q9, q12
   378d8:	vmul.i32	q8, q11, q8
   378dc:	vorr	q11, q12, q12
   378e0:	bne	378c0 <GetDataSlab+0xba44>
   378e4:	vext.8	q11, q9, q8, #8
   378e8:	vext.8	q12, q8, q8, #8
   378ec:	cmp	r6, r1
   378f0:	vmul.i32	q0, q9, q11
   378f4:	vmul.i32	q1, q8, q12
   378f8:	vmul.i32	q8, q0, d0[1]
   378fc:	vmul.i32	q9, q1, d2[1]
   37900:	vmov.32	lr, d16[0]
   37904:	vmov.32	r3, d18[0]
   37908:	bne	37914 <GetDataSlab+0xba98>
   3790c:	mov	sl, r6
   37910:	b	37930 <GetDataSlab+0xbab4>
   37914:	vmov.32	r1, d20[0]
   37918:	mov	sl, r6
   3791c:	mul	r3, r1, r3
   37920:	ldr	r1, [r7, r4, lsl #2]
   37924:	subs	r4, r4, #1
   37928:	mul	lr, lr, r1
   3792c:	bne	3791c <GetDataSlab+0xbaa0>
   37930:	ldr	r1, [fp, #12]
   37934:	sub	r4, fp, #176	; 0xb0
   37938:	sub	r9, fp, #96	; 0x60
   3793c:	ldr	r6, [sp, #48]	; 0x30
   37940:	add	r8, r8, #4
   37944:	str	r3, [r4, r0, lsl #2]
   37948:	str	lr, [r9, r0, lsl #2]
   3794c:	ldr	r1, [r1, r0, lsl #2]
   37950:	mla	r2, r1, r6, r2
   37954:	ldr	r1, [fp, #20]
   37958:	ldr	r6, [sp, #60]	; 0x3c
   3795c:	ldr	r1, [r1, r0, lsl #2]
   37960:	add	r0, r0, #1
   37964:	mul	r6, r1, r6
   37968:	ldr	r1, [fp, #24]
   3796c:	str	r6, [sp, #60]	; 0x3c
   37970:	mov	r6, r3
   37974:	mov	r3, ip
   37978:	ldr	ip, [fp, #16]
   3797c:	cmp	r0, r1
   37980:	bne	37854 <GetDataSlab+0xb9d8>
   37984:	ldr	r0, [sp, #56]	; 0x38
   37988:	ldr	r6, [sp, #32]
   3798c:	add	r9, r0, r2, lsl #3
   37990:	cmp	r6, #1
   37994:	bne	45fb0 <GetDataSlab+0x1a134>
   37998:	ldr	r0, [sp, #60]	; 0x3c
   3799c:	ldr	lr, [fp, #12]
   379a0:	ldr	r1, [sp, #52]	; 0x34
   379a4:	cmp	r0, #1
   379a8:	blt	51a1c <GetDataSlab+0x25ba0>
   379ac:	ldr	r0, [fp, #20]
   379b0:	mov	sl, #0
   379b4:	add	r8, r0, #4
   379b8:	sub	r0, fp, #136	; 0x88
   379bc:	orr	r7, r0, #4
   379c0:	sub	r0, fp, #96	; 0x60
   379c4:	orr	r0, r0, #4
   379c8:	str	r0, [sp, #48]	; 0x30
   379cc:	lsl	r0, r1, #1
   379d0:	str	r0, [sp, #56]	; 0x38
   379d4:	ldr	r0, [lr], #4
   379d8:	str	r0, [sp, #64]	; 0x40
   379dc:	ldr	r4, [sp, #68]	; 0x44
   379e0:	cmp	r1, #1
   379e4:	blt	37a14 <GetDataSlab+0xbb98>
   379e8:	ldr	r0, [sp, #64]	; 0x40
   379ec:	ldr	r3, [sp, #52]	; 0x34
   379f0:	mov	r6, r4
   379f4:	add	r0, r9, r0, lsl #3
   379f8:	vldr	d16, [r0]
   379fc:	subs	r3, r3, #1
   37a00:	add	r0, r0, #8
   37a04:	vcvt.s32.f64	s0, d16
   37a08:	vmov	r5, s0
   37a0c:	strh	r5, [r6], #2
   37a10:	bne	379f8 <GetDataSlab+0xbb7c>
   37a14:	ldr	r0, [sp, #44]	; 0x2c
   37a18:	add	r9, r9, r0, lsl #3
   37a1c:	add	r2, r2, r0
   37a20:	ldr	r0, [fp, #24]
   37a24:	cmp	r0, #2
   37a28:	blt	37adc <GetDataSlab+0xbc60>
   37a2c:	mov	r3, #0
   37a30:	mov	r0, r3
   37a34:	ldr	r3, [r7, r3, lsl #2]
   37a38:	add	r3, r3, #1
   37a3c:	str	r3, [r7, r0, lsl #2]
   37a40:	ldr	r5, [r8, r0, lsl #2]
   37a44:	sdiv	r6, r3, r5
   37a48:	mls	r3, r6, r5, r3
   37a4c:	cmp	r3, #0
   37a50:	bne	37acc <GetDataSlab+0xbc50>
   37a54:	mov	r1, #0
   37a58:	str	r1, [r7, r0, lsl #2]
   37a5c:	sub	r1, fp, #176	; 0xb0
   37a60:	add	r3, r1, r0, lsl #2
   37a64:	ldr	r3, [r3, #4]
   37a68:	sdiv	r5, r2, r3
   37a6c:	mls	r6, r5, r3, r2
   37a70:	cmp	r6, #0
   37a74:	beq	37a94 <GetDataSlab+0xbc18>
   37a78:	ldr	r5, [r1, r0, lsl #2]
   37a7c:	ldr	ip, [lr, r0, lsl #2]
   37a80:	ldr	r4, [sp, #68]	; 0x44
   37a84:	sub	r3, r3, r6
   37a88:	mla	r3, ip, r5, r3
   37a8c:	add	r2, r3, r2
   37a90:	b	37ab0 <GetDataSlab+0xbc34>
   37a94:	ldr	r3, [lr, r0, lsl #2]
   37a98:	cmp	r3, #0
   37a9c:	beq	37ab4 <GetDataSlab+0xbc38>
   37aa0:	sub	r1, fp, #176	; 0xb0
   37aa4:	ldr	r6, [r1, r0, lsl #2]
   37aa8:	mla	r2, r6, r3, r2
   37aac:	mul	r3, r6, r3
   37ab0:	add	r9, r9, r3, lsl #3
   37ab4:	ldr	r6, [fp, #24]
   37ab8:	add	r3, r0, #1
   37abc:	add	r0, r0, #2
   37ac0:	cmp	r0, r6
   37ac4:	blt	37a30 <GetDataSlab+0xbbb4>
   37ac8:	b	37adc <GetDataSlab+0xbc60>
   37acc:	ldr	r1, [sp, #48]	; 0x30
   37ad0:	ldr	r0, [r1, r0, lsl #2]
   37ad4:	add	r9, r9, r0, lsl #3
   37ad8:	add	r2, r0, r2
   37adc:	ldr	r1, [sp, #52]	; 0x34
   37ae0:	ldr	r0, [sp, #56]	; 0x38
   37ae4:	ldr	r3, [sp, #60]	; 0x3c
   37ae8:	add	sl, sl, r1
   37aec:	add	r4, r4, r0
   37af0:	mov	r0, #0
   37af4:	cmp	sl, r3
   37af8:	str	r4, [sp, #68]	; 0x44
   37afc:	blt	379dc <GetDataSlab+0xbb60>
   37b00:	b	2e97c <GetDataSlab+0x2b00>
   37b04:	ldr	r0, [ip]
   37b08:	mov	sl, r6
   37b0c:	mov	r1, #0
   37b10:	sub	lr, fp, #176	; 0xb0
   37b14:	sub	r5, fp, #96	; 0x60
   37b18:	str	r9, [sp, #40]	; 0x28
   37b1c:	str	r0, [sp, #24]
   37b20:	sub	r0, r0, #1
   37b24:	str	r0, [fp, #-96]	; 0xffffffa0
   37b28:	ldr	r0, [fp, #8]
   37b2c:	ldr	r0, [r0]
   37b30:	str	r0, [fp, #-176]	; 0xffffff50
   37b34:	str	r0, [sp, #36]	; 0x24
   37b38:	ldr	r0, [fp, #24]
   37b3c:	ldr	r2, [r6]
   37b40:	cmp	r0, #2
   37b44:	str	r2, [sp, #44]	; 0x2c
   37b48:	str	r2, [sp, #60]	; 0x3c
   37b4c:	blt	37ca4 <GetDataSlab+0xbe28>
   37b50:	ldr	r0, [fp, #8]
   37b54:	ldr	r2, [sp, #36]	; 0x24
   37b58:	mov	r4, #1
   37b5c:	mov	r7, #0
   37b60:	mvn	r6, #15
   37b64:	mov	r1, #0
   37b68:	sub	r3, r0, #4
   37b6c:	sub	ip, r0, #12
   37b70:	ldr	r0, [sp, #44]	; 0x2c
   37b74:	mov	r8, r2
   37b78:	str	r0, [sp, #60]	; 0x3c
   37b7c:	ldr	r0, [fp, #16]
   37b80:	add	r7, r7, #1
   37b84:	cmp	r7, #4
   37b88:	str	r7, [sp, #48]	; 0x30
   37b8c:	ldr	r0, [r0, r4, lsl #2]
   37b90:	str	r2, [lr, r4, lsl #2]
   37b94:	sub	sl, r0, #1
   37b98:	ldr	r0, [fp, #8]
   37b9c:	str	sl, [r5, r4, lsl #2]
   37ba0:	ldr	r9, [r0, r4, lsl #2]
   37ba4:	str	r9, [sp, #52]	; 0x34
   37ba8:	bcs	37bb4 <GetDataSlab+0xbd38>
   37bac:	mov	r5, r4
   37bb0:	b	37c44 <GetDataSlab+0xbdc8>
   37bb4:	vmov.i32	q9, #1	; 0x00000001
   37bb8:	vmov.i32	q10, #1	; 0x00000001
   37bbc:	vmov.i32	q8, #1	; 0x00000001
   37bc0:	bic	r0, r7, #3
   37bc4:	bic	lr, r4, #3
   37bc8:	vmov.32	d23[1], r9
   37bcc:	vmov.32	d18[0], r2
   37bd0:	vmov.32	d20[0], sl
   37bd4:	sub	r5, r4, r0
   37bd8:	mov	r2, ip
   37bdc:	vorr	d16, d18, d18
   37be0:	vmov.i32	q9, #1	; 0x00000001
   37be4:	vorr	d18, d20, d20
   37be8:	vld1.32	{d20-d21}, [r2], r6
   37bec:	subs	lr, lr, #4
   37bf0:	vrev64.32	q12, q10
   37bf4:	vext.8	q12, q12, q12, #8
   37bf8:	vext.8	q11, q11, q12, #12
   37bfc:	vmul.i32	q9, q9, q12
   37c00:	vmul.i32	q8, q11, q8
   37c04:	vorr	q11, q12, q12
   37c08:	bne	37be8 <GetDataSlab+0xbd6c>
   37c0c:	vext.8	q11, q9, q8, #8
   37c10:	vext.8	q12, q8, q8, #8
   37c14:	cmp	r7, r0
   37c18:	vmul.i32	q0, q9, q11
   37c1c:	vmul.i32	q1, q8, q12
   37c20:	vmul.i32	q8, q0, d0[1]
   37c24:	vmul.i32	q9, q1, d2[1]
   37c28:	vmov.32	sl, d16[0]
   37c2c:	vmov.32	r2, d18[0]
   37c30:	bne	37c3c <GetDataSlab+0xbdc0>
   37c34:	sub	lr, fp, #176	; 0xb0
   37c38:	b	37c58 <GetDataSlab+0xbddc>
   37c3c:	vmov.32	r9, d20[0]
   37c40:	sub	lr, fp, #176	; 0xb0
   37c44:	mul	r2, r9, r2
   37c48:	ldr	r9, [r3, r5, lsl #2]
   37c4c:	subs	r5, r5, #1
   37c50:	mul	sl, sl, r9
   37c54:	bne	37c44 <GetDataSlab+0xbdc8>
   37c58:	ldr	r0, [fp, #12]
   37c5c:	sub	r5, fp, #96	; 0x60
   37c60:	str	r2, [lr, r4, lsl #2]
   37c64:	ldr	r7, [sp, #60]	; 0x3c
   37c68:	add	ip, ip, #4
   37c6c:	str	sl, [r5, r4, lsl #2]
   37c70:	ldr	sl, [fp, #20]
   37c74:	ldr	r0, [r0, r4, lsl #2]
   37c78:	mla	r1, r0, r8, r1
   37c7c:	ldr	r0, [sl, r4, lsl #2]
   37c80:	mov	r8, r2
   37c84:	ldr	r2, [sp, #52]	; 0x34
   37c88:	add	r4, r4, #1
   37c8c:	mul	r7, r0, r7
   37c90:	ldr	r0, [fp, #24]
   37c94:	str	r7, [sp, #60]	; 0x3c
   37c98:	ldr	r7, [sp, #48]	; 0x30
   37c9c:	cmp	r4, r0
   37ca0:	bne	37b7c <GetDataSlab+0xbd00>
   37ca4:	ldr	r0, [sp, #56]	; 0x38
   37ca8:	ldr	r7, [sp, #24]
   37cac:	add	r9, r0, r1, lsl #3
   37cb0:	cmp	r7, #1
   37cb4:	bne	4614c <GetDataSlab+0x1a2d0>
   37cb8:	ldr	r0, [sp, #60]	; 0x3c
   37cbc:	ldr	ip, [sp, #68]	; 0x44
   37cc0:	ldr	r8, [fp, #12]
   37cc4:	cmp	r0, #1
   37cc8:	blt	462d0 <GetDataSlab+0x1a454>
   37ccc:	add	lr, sl, #4
   37cd0:	ldr	sl, [sp, #44]	; 0x2c
   37cd4:	sub	r0, fp, #136	; 0x88
   37cd8:	mov	r5, #0
   37cdc:	orr	r6, r0, #4
   37ce0:	sub	r0, fp, #96	; 0x60
   37ce4:	orr	r0, r0, #4
   37ce8:	str	r0, [sp, #28]
   37cec:	lsl	r0, sl, #1
   37cf0:	str	r0, [sp, #52]	; 0x34
   37cf4:	bic	r0, sl, #1
   37cf8:	str	r0, [sp, #32]
   37cfc:	ldr	r0, [r8], #4
   37d00:	str	r0, [sp, #48]	; 0x30
   37d04:	cmp	sl, #1
   37d08:	blt	37d70 <GetDataSlab+0xbef4>
   37d0c:	mov	r3, #0
   37d10:	beq	37d48 <GetDataSlab+0xbecc>
   37d14:	ldr	r0, [sp, #48]	; 0x30
   37d18:	ldr	r2, [sp, #32]
   37d1c:	mov	r3, ip
   37d20:	add	r0, r9, r0, lsl #3
   37d24:	vld1.64	{d16-d17}, [r0]!
   37d28:	subs	r2, r2, #2
   37d2c:	vmovn.i64	d16, q8
   37d30:	vuzp.16	d16, d17
   37d34:	vst1.32	{d16[0]}, [r3]!
   37d38:	bne	37d24 <GetDataSlab+0xbea8>
   37d3c:	ldr	r3, [sp, #32]
   37d40:	cmp	sl, r3
   37d44:	beq	37d70 <GetDataSlab+0xbef4>
   37d48:	ldr	r4, [sp, #48]	; 0x30
   37d4c:	sub	r0, sl, r3
   37d50:	add	r2, ip, r3, lsl #1
   37d54:	add	sl, r9, r4, lsl #3
   37d58:	add	r3, sl, r3, lsl #3
   37d5c:	ldr	sl, [sp, #44]	; 0x2c
   37d60:	ldrh	r7, [r3], #8
   37d64:	subs	r0, r0, #1
   37d68:	strh	r7, [r2], #2
   37d6c:	bne	37d60 <GetDataSlab+0xbee4>
   37d70:	ldr	r0, [sp, #36]	; 0x24
   37d74:	add	r9, r9, r0, lsl #3
   37d78:	add	r1, r1, r0
   37d7c:	ldr	r0, [fp, #24]
   37d80:	cmp	r0, #2
   37d84:	blt	37e34 <GetDataSlab+0xbfb8>
   37d88:	mov	r2, #0
   37d8c:	mov	r0, r2
   37d90:	ldr	r2, [r6, r2, lsl #2]
   37d94:	add	r2, r2, #1
   37d98:	str	r2, [r6, r0, lsl #2]
   37d9c:	ldr	r3, [lr, r0, lsl #2]
   37da0:	sdiv	r7, r2, r3
   37da4:	mls	r2, r7, r3, r2
   37da8:	cmp	r2, #0
   37dac:	bne	37e24 <GetDataSlab+0xbfa8>
   37db0:	mov	r2, #0
   37db4:	sub	r4, fp, #176	; 0xb0
   37db8:	str	r2, [r6, r0, lsl #2]
   37dbc:	add	r2, r4, r0, lsl #2
   37dc0:	ldr	r2, [r2, #4]
   37dc4:	sdiv	r3, r1, r2
   37dc8:	mls	r3, r3, r2, r1
   37dcc:	cmp	r3, #0
   37dd0:	beq	37dec <GetDataSlab+0xbf70>
   37dd4:	ldr	r7, [r4, r0, lsl #2]
   37dd8:	ldr	r4, [r8, r0, lsl #2]
   37ddc:	sub	r2, r2, r3
   37de0:	mla	r2, r4, r7, r2
   37de4:	add	r1, r2, r1
   37de8:	b	37e08 <GetDataSlab+0xbf8c>
   37dec:	ldr	r2, [r8, r0, lsl #2]
   37df0:	cmp	r2, #0
   37df4:	beq	37e0c <GetDataSlab+0xbf90>
   37df8:	sub	r3, fp, #176	; 0xb0
   37dfc:	ldr	r3, [r3, r0, lsl #2]
   37e00:	mla	r1, r3, r2, r1
   37e04:	mul	r2, r3, r2
   37e08:	add	r9, r9, r2, lsl #3
   37e0c:	ldr	r3, [fp, #24]
   37e10:	add	r2, r0, #1
   37e14:	add	r0, r0, #2
   37e18:	cmp	r0, r3
   37e1c:	blt	37d8c <GetDataSlab+0xbf10>
   37e20:	b	37e34 <GetDataSlab+0xbfb8>
   37e24:	ldr	r2, [sp, #28]
   37e28:	ldr	r0, [r2, r0, lsl #2]
   37e2c:	add	r9, r9, r0, lsl #3
   37e30:	add	r1, r0, r1
   37e34:	ldr	r0, [sp, #52]	; 0x34
   37e38:	add	r5, r5, sl
   37e3c:	add	ip, ip, r0
   37e40:	ldr	r0, [sp, #60]	; 0x3c
   37e44:	cmp	r5, r0
   37e48:	blt	37d04 <GetDataSlab+0xbe88>
   37e4c:	b	462d0 <GetDataSlab+0x1a454>
   37e50:	ldr	sl, [ip]
   37e54:	mov	r1, r6
   37e58:	mov	r3, #0
   37e5c:	sub	r7, fp, #176	; 0xb0
   37e60:	sub	r8, fp, #96	; 0x60
   37e64:	sub	r0, sl, #1
   37e68:	str	r0, [fp, #-96]	; 0xffffffa0
   37e6c:	ldr	r0, [fp, #8]
   37e70:	ldr	r0, [r0]
   37e74:	str	r0, [fp, #-176]	; 0xffffff50
   37e78:	str	r0, [sp, #44]	; 0x2c
   37e7c:	ldr	r0, [fp, #24]
   37e80:	ldr	r1, [r6]
   37e84:	cmp	r0, #2
   37e88:	str	r1, [sp, #40]	; 0x28
   37e8c:	str	r1, [sp, #60]	; 0x3c
   37e90:	blt	37fe4 <GetDataSlab+0xc168>
   37e94:	ldr	r0, [fp, #8]
   37e98:	ldr	r2, [sp, #44]	; 0x2c
   37e9c:	mov	r6, #1
   37ea0:	mov	lr, #0
   37ea4:	mvn	r4, #15
   37ea8:	mov	r3, #0
   37eac:	mov	r1, r0
   37eb0:	sub	r0, r0, #4
   37eb4:	mov	r9, r2
   37eb8:	sub	ip, r1, #12
   37ebc:	ldr	r1, [sp, #40]	; 0x28
   37ec0:	str	r1, [sp, #60]	; 0x3c
   37ec4:	ldr	r1, [fp, #16]
   37ec8:	add	lr, lr, #1
   37ecc:	cmp	lr, #4
   37ed0:	ldr	r1, [r1, r6, lsl #2]
   37ed4:	str	r2, [r7, r6, lsl #2]
   37ed8:	sub	r5, r1, #1
   37edc:	ldr	r1, [fp, #8]
   37ee0:	str	r5, [r8, r6, lsl #2]
   37ee4:	ldr	r1, [r1, r6, lsl #2]
   37ee8:	str	r1, [sp, #52]	; 0x34
   37eec:	bcs	37ef8 <GetDataSlab+0xc07c>
   37ef0:	mov	r7, r6
   37ef4:	b	37f84 <GetDataSlab+0xc108>
   37ef8:	vmov.i32	q9, #1	; 0x00000001
   37efc:	vmov.i32	q10, #1	; 0x00000001
   37f00:	vmov.i32	q8, #1	; 0x00000001
   37f04:	vmov.32	d23[1], r1
   37f08:	bic	r1, lr, #3
   37f0c:	bic	r8, r6, #3
   37f10:	vmov.32	d18[0], r2
   37f14:	vmov.32	d20[0], r5
   37f18:	str	r1, [sp, #48]	; 0x30
   37f1c:	sub	r7, r6, r1
   37f20:	mov	r1, ip
   37f24:	vorr	d16, d18, d18
   37f28:	vmov.i32	q9, #1	; 0x00000001
   37f2c:	vorr	d18, d20, d20
   37f30:	vld1.32	{d20-d21}, [r1], r4
   37f34:	subs	r8, r8, #4
   37f38:	vrev64.32	q12, q10
   37f3c:	vext.8	q12, q12, q12, #8
   37f40:	vext.8	q11, q11, q12, #12
   37f44:	vmul.i32	q9, q9, q12
   37f48:	vmul.i32	q8, q11, q8
   37f4c:	vorr	q11, q12, q12
   37f50:	bne	37f30 <GetDataSlab+0xc0b4>
   37f54:	ldr	r1, [sp, #48]	; 0x30
   37f58:	vext.8	q11, q9, q8, #8
   37f5c:	vext.8	q12, q8, q8, #8
   37f60:	vmul.i32	q0, q9, q11
   37f64:	vmul.i32	q1, q8, q12
   37f68:	vmul.i32	q8, q0, d0[1]
   37f6c:	vmul.i32	q9, q1, d2[1]
   37f70:	vmov.32	r5, d16[0]
   37f74:	vmov.32	r2, d18[0]
   37f78:	cmp	lr, r1
   37f7c:	beq	37f98 <GetDataSlab+0xc11c>
   37f80:	vmov.32	r1, d20[0]
   37f84:	mul	r2, r1, r2
   37f88:	ldr	r1, [r0, r7, lsl #2]
   37f8c:	subs	r7, r7, #1
   37f90:	mul	r5, r5, r1
   37f94:	bne	37f84 <GetDataSlab+0xc108>
   37f98:	ldr	r1, [fp, #12]
   37f9c:	sub	r7, fp, #176	; 0xb0
   37fa0:	sub	r8, fp, #96	; 0x60
   37fa4:	add	ip, ip, #4
   37fa8:	str	r5, [r8, r6, lsl #2]
   37fac:	str	r2, [r7, r6, lsl #2]
   37fb0:	ldr	r5, [sp, #60]	; 0x3c
   37fb4:	ldr	r1, [r1, r6, lsl #2]
   37fb8:	mla	r3, r1, r9, r3
   37fbc:	ldr	r1, [fp, #20]
   37fc0:	mov	r9, r2
   37fc4:	ldr	r2, [sp, #52]	; 0x34
   37fc8:	ldr	r1, [r1, r6, lsl #2]
   37fcc:	add	r6, r6, #1
   37fd0:	mul	r5, r1, r5
   37fd4:	ldr	r1, [fp, #24]
   37fd8:	str	r5, [sp, #60]	; 0x3c
   37fdc:	cmp	r6, r1
   37fe0:	bne	37ec4 <GetDataSlab+0xc048>
   37fe4:	ldr	r0, [sp, #56]	; 0x38
   37fe8:	cmp	sl, #1
   37fec:	add	r4, r0, r3
   37ff0:	bne	46648 <GetDataSlab+0x1a7cc>
   37ff4:	ldr	r0, [sp, #60]	; 0x3c
   37ff8:	ldr	r8, [sp, #40]	; 0x28
   37ffc:	sub	r2, fp, #96	; 0x60
   38000:	cmp	r0, #1
   38004:	ldr	r0, [sp, #68]	; 0x44
   38008:	blt	51a30 <GetDataSlab+0x25bb4>
   3800c:	ldr	r1, [fp, #12]
   38010:	str	r0, [sp, #56]	; 0x38
   38014:	mov	r0, #0
   38018:	lsl	ip, r8, #1
   3801c:	mov	lr, #0
   38020:	str	r0, [sp, #52]	; 0x34
   38024:	add	sl, r1, #4
   38028:	ldr	r1, [fp, #20]
   3802c:	add	r9, r1, #4
   38030:	sub	r1, fp, #136	; 0x88
   38034:	orr	r5, r1, #4
   38038:	orr	r1, r2, #4
   3803c:	str	r1, [sp, #32]
   38040:	bic	r1, r8, #7
   38044:	str	r1, [sp, #36]	; 0x24
   38048:	ldr	r0, [fp, #12]
   3804c:	cmp	r8, #1
   38050:	blt	38118 <GetDataSlab+0xc29c>
   38054:	ldr	r7, [r0]
   38058:	mov	r0, #0
   3805c:	cmp	r8, #8
   38060:	str	r7, [sp, #48]	; 0x30
   38064:	bcc	380f0 <GetDataSlab+0xc274>
   38068:	ldr	r1, [sp, #68]	; 0x44
   3806c:	ldr	r2, [sp, #52]	; 0x34
   38070:	mov	r6, ip
   38074:	mla	ip, ip, r2, r1
   38078:	add	r1, r4, r8
   3807c:	add	r2, r4, r7
   38080:	add	r1, r1, r7
   38084:	ldr	r7, [sp, #68]	; 0x44
   38088:	cmp	ip, r1
   3808c:	bcs	380a8 <GetDataSlab+0xc22c>
   38090:	ldr	r1, [sp, #52]	; 0x34
   38094:	mov	ip, r6
   38098:	mla	r1, r6, r1, r6
   3809c:	add	r1, r7, r1
   380a0:	cmp	r2, r1
   380a4:	bcc	380f0 <GetDataSlab+0xc274>
   380a8:	ldr	r0, [sp, #36]	; 0x24
   380ac:	ldr	ip, [sp, #56]	; 0x38
   380b0:	sub	r7, fp, #184	; 0xb8
   380b4:	ldr	r1, [r2]
   380b8:	ldr	r8, [r2, #4]
   380bc:	subs	r0, r0, #8
   380c0:	add	r2, r2, #8
   380c4:	str	r8, [fp, #-180]	; 0xffffff4c
   380c8:	str	r1, [fp, #-184]	; 0xffffff48
   380cc:	vld1.8	{d16}, [r7 :64]
   380d0:	vmovl.u8	q8, d16
   380d4:	vst1.16	{d16-d17}, [ip]!
   380d8:	bne	380b4 <GetDataSlab+0xc238>
   380dc:	ldr	r8, [sp, #40]	; 0x28
   380e0:	ldr	r0, [sp, #36]	; 0x24
   380e4:	mov	ip, r6
   380e8:	cmp	r8, r0
   380ec:	beq	38118 <GetDataSlab+0xc29c>
   380f0:	ldr	r1, [sp, #56]	; 0x38
   380f4:	ldr	r6, [sp, #48]	; 0x30
   380f8:	sub	r2, r8, r0
   380fc:	add	r1, r1, r0, lsl #1
   38100:	add	r0, r0, r6
   38104:	add	r0, r4, r0
   38108:	ldrb	r6, [r0], #1
   3810c:	subs	r2, r2, #1
   38110:	strh	r6, [r1], #2
   38114:	bne	38108 <GetDataSlab+0xc28c>
   38118:	ldr	r0, [sp, #44]	; 0x2c
   3811c:	add	r4, r4, r0
   38120:	add	r3, r3, r0
   38124:	ldr	r0, [fp, #24]
   38128:	cmp	r0, #2
   3812c:	blt	381d8 <GetDataSlab+0xc35c>
   38130:	mov	r1, #0
   38134:	mov	r0, r1
   38138:	ldr	r1, [r5, r1, lsl #2]
   3813c:	add	r1, r1, #1
   38140:	str	r1, [r5, r0, lsl #2]
   38144:	ldr	r2, [r9, r0, lsl #2]
   38148:	sdiv	r6, r1, r2
   3814c:	mls	r1, r6, r2, r1
   38150:	cmp	r1, #0
   38154:	bne	381c8 <GetDataSlab+0xc34c>
   38158:	mov	r1, #0
   3815c:	sub	r7, fp, #176	; 0xb0
   38160:	str	r1, [r5, r0, lsl #2]
   38164:	add	r1, r7, r0, lsl #2
   38168:	ldr	r1, [r1, #4]
   3816c:	sdiv	r2, r3, r1
   38170:	mls	r2, r2, r1, r3
   38174:	cmp	r2, #0
   38178:	beq	38198 <GetDataSlab+0xc31c>
   3817c:	ldr	r6, [r7, r0, lsl #2]
   38180:	ldr	r7, [sl, r0, lsl #2]
   38184:	sub	r1, r1, r2
   38188:	mla	r1, r7, r6, r1
   3818c:	add	r3, r1, r3
   38190:	add	r4, r4, r1
   38194:	b	381b0 <GetDataSlab+0xc334>
   38198:	ldr	r1, [sl, r0, lsl #2]
   3819c:	cmp	r1, #0
   381a0:	subne	r2, fp, #176	; 0xb0
   381a4:	ldrne	r2, [r2, r0, lsl #2]
   381a8:	mlane	r3, r2, r1, r3
   381ac:	mlane	r4, r2, r1, r4
   381b0:	ldr	r2, [fp, #24]
   381b4:	add	r1, r0, #1
   381b8:	add	r0, r0, #2
   381bc:	cmp	r0, r2
   381c0:	blt	38134 <GetDataSlab+0xc2b8>
   381c4:	b	381d8 <GetDataSlab+0xc35c>
   381c8:	ldr	r1, [sp, #32]
   381cc:	ldr	r0, [r1, r0, lsl #2]
   381d0:	add	r4, r4, r0
   381d4:	add	r3, r0, r3
   381d8:	ldr	r0, [sp, #56]	; 0x38
   381dc:	ldr	r1, [sp, #60]	; 0x3c
   381e0:	add	lr, lr, r8
   381e4:	add	r0, r0, ip
   381e8:	cmp	lr, r1
   381ec:	str	r0, [sp, #56]	; 0x38
   381f0:	ldr	r0, [sp, #52]	; 0x34
   381f4:	add	r0, r0, #1
   381f8:	str	r0, [sp, #52]	; 0x34
   381fc:	mov	r0, #0
   38200:	blt	38048 <GetDataSlab+0xc1cc>
   38204:	b	2e97c <GetDataSlab+0x2b00>
   38208:	ldr	r0, [ip]
   3820c:	mov	sl, r6
   38210:	mov	r2, #0
   38214:	sub	r5, fp, #176	; 0xb0
   38218:	str	r0, [sp, #32]
   3821c:	sub	r0, r0, #1
   38220:	str	r0, [fp, #-96]	; 0xffffffa0
   38224:	ldr	r0, [fp, #8]
   38228:	ldr	r0, [r0]
   3822c:	str	r0, [fp, #-176]	; 0xffffff50
   38230:	str	r0, [sp, #44]	; 0x2c
   38234:	ldr	r0, [fp, #24]
   38238:	ldr	r1, [r6]
   3823c:	sub	r6, fp, #96	; 0x60
   38240:	cmp	r0, #2
   38244:	str	r1, [sp, #52]	; 0x34
   38248:	str	r1, [sp, #60]	; 0x3c
   3824c:	blt	383a4 <GetDataSlab+0xc528>
   38250:	ldr	r0, [fp, #8]
   38254:	ldr	r3, [sp, #44]	; 0x2c
   38258:	mov	r4, #1
   3825c:	mov	lr, #0
   38260:	mvn	ip, #15
   38264:	mov	r2, #0
   38268:	sub	r7, r0, #4
   3826c:	sub	r9, r0, #12
   38270:	ldr	r0, [sp, #52]	; 0x34
   38274:	mov	r8, r3
   38278:	str	r0, [sp, #60]	; 0x3c
   3827c:	ldr	r1, [fp, #16]
   38280:	add	lr, lr, #1
   38284:	cmp	lr, #4
   38288:	str	lr, [sp, #48]	; 0x30
   3828c:	ldr	r1, [r1, r4, lsl #2]
   38290:	str	r3, [r5, r4, lsl #2]
   38294:	sub	r1, r1, #1
   38298:	str	r1, [r6, r4, lsl #2]
   3829c:	ldr	r6, [fp, #8]
   382a0:	ldr	r0, [r6, r4, lsl #2]
   382a4:	bcs	382b8 <GetDataSlab+0xc43c>
   382a8:	mov	lr, r0
   382ac:	mov	r6, r0
   382b0:	mov	r5, r4
   382b4:	b	38344 <GetDataSlab+0xc4c8>
   382b8:	vmov.i32	q9, #1	; 0x00000001
   382bc:	vmov.i32	q10, #1	; 0x00000001
   382c0:	vmov.i32	q8, #1	; 0x00000001
   382c4:	bic	r6, lr, #3
   382c8:	bic	sl, r4, #3
   382cc:	vmov.32	d23[1], r0
   382d0:	vmov.32	d18[0], r3
   382d4:	vmov.32	d20[0], r1
   382d8:	sub	r5, r4, r6
   382dc:	mov	r1, r9
   382e0:	vorr	d16, d18, d18
   382e4:	vmov.i32	q9, #1	; 0x00000001
   382e8:	vorr	d18, d20, d20
   382ec:	vld1.32	{d20-d21}, [r1], ip
   382f0:	subs	sl, sl, #4
   382f4:	vrev64.32	q12, q10
   382f8:	vext.8	q12, q12, q12, #8
   382fc:	vext.8	q11, q11, q12, #12
   38300:	vmul.i32	q9, q9, q12
   38304:	vmul.i32	q8, q11, q8
   38308:	vorr	q11, q12, q12
   3830c:	bne	382ec <GetDataSlab+0xc470>
   38310:	vext.8	q11, q9, q8, #8
   38314:	vext.8	q12, q8, q8, #8
   38318:	ldr	sl, [fp, #20]
   3831c:	cmp	lr, r6
   38320:	mov	lr, r0
   38324:	vmul.i32	q0, q9, q11
   38328:	vmul.i32	q1, q8, q12
   3832c:	vmul.i32	q8, q0, d0[1]
   38330:	vmul.i32	q9, q1, d2[1]
   38334:	vmov.32	r1, d16[0]
   38338:	vmov.32	r3, d18[0]
   3833c:	beq	38358 <GetDataSlab+0xc4dc>
   38340:	vmov.32	r6, d20[0]
   38344:	mul	r3, r6, r3
   38348:	ldr	r6, [r7, r5, lsl #2]
   3834c:	subs	r5, r5, #1
   38350:	mul	r1, r1, r6
   38354:	bne	38344 <GetDataSlab+0xc4c8>
   38358:	sub	r6, fp, #96	; 0x60
   3835c:	sub	r5, fp, #176	; 0xb0
   38360:	ldr	r0, [sp, #60]	; 0x3c
   38364:	add	r9, r9, #4
   38368:	str	r1, [r6, r4, lsl #2]
   3836c:	ldr	r1, [fp, #12]
   38370:	str	r3, [r5, r4, lsl #2]
   38374:	ldr	r1, [r1, r4, lsl #2]
   38378:	mla	r2, r1, r8, r2
   3837c:	ldr	r1, [sl, r4, lsl #2]
   38380:	mov	r8, r3
   38384:	mov	r3, lr
   38388:	ldr	lr, [sp, #48]	; 0x30
   3838c:	add	r4, r4, #1
   38390:	mul	r0, r1, r0
   38394:	ldr	r1, [fp, #24]
   38398:	str	r0, [sp, #60]	; 0x3c
   3839c:	cmp	r4, r1
   383a0:	bne	3827c <GetDataSlab+0xc400>
   383a4:	ldr	r0, [sp, #56]	; 0x38
   383a8:	ldr	r6, [sp, #32]
   383ac:	add	r9, r0, r2, lsl #1
   383b0:	cmp	r6, #1
   383b4:	bne	467e0 <GetDataSlab+0x1a964>
   383b8:	ldr	r0, [sp, #60]	; 0x3c
   383bc:	ldr	ip, [sp, #68]	; 0x44
   383c0:	ldr	r8, [fp, #12]
   383c4:	ldr	r1, [sp, #52]	; 0x34
   383c8:	cmp	r0, #1
   383cc:	blt	51a44 <GetDataSlab+0x25bc8>
   383d0:	ldr	r0, [r8], #4
   383d4:	add	r6, sl, #4
   383d8:	mov	r4, #0
   383dc:	mov	lr, #0
   383e0:	str	r0, [sp, #56]	; 0x38
   383e4:	add	r0, r1, r0
   383e8:	str	r0, [sp, #48]	; 0x30
   383ec:	sub	r0, fp, #136	; 0x88
   383f0:	orr	r7, r0, #4
   383f4:	sub	r0, fp, #96	; 0x60
   383f8:	orr	r0, r0, #4
   383fc:	str	r0, [sp, #36]	; 0x24
   38400:	bic	r0, r1, #7
   38404:	str	r0, [sp, #40]	; 0x28
   38408:	lsl	r0, r1, #1
   3840c:	str	r0, [sp, #64]	; 0x40
   38410:	cmp	r1, #1
   38414:	blt	384b4 <GetDataSlab+0xc638>
   38418:	ldr	r0, [sp, #56]	; 0x38
   3841c:	mov	r1, #0
   38420:	add	r5, r9, r0, lsl #1
   38424:	ldr	r0, [sp, #52]	; 0x34
   38428:	cmp	r0, #8
   3842c:	bcc	38490 <GetDataSlab+0xc614>
   38430:	ldr	r0, [sp, #68]	; 0x44
   38434:	ldr	r3, [sp, #64]	; 0x40
   38438:	mla	r0, r3, r4, r0
   3843c:	ldr	r3, [sp, #48]	; 0x30
   38440:	add	r3, r9, r3, lsl #1
   38444:	cmp	r0, r3
   38448:	bcs	38464 <GetDataSlab+0xc5e8>
   3844c:	ldr	r0, [sp, #64]	; 0x40
   38450:	ldr	r3, [sp, #68]	; 0x44
   38454:	mla	r0, r0, r4, r0
   38458:	add	r0, r3, r0
   3845c:	cmp	r0, r5
   38460:	bhi	38490 <GetDataSlab+0xc614>
   38464:	ldr	r1, [sp, #40]	; 0x28
   38468:	mov	r3, ip
   3846c:	mov	r0, r5
   38470:	vld1.16	{d16-d17}, [r0]!
   38474:	subs	r1, r1, #8
   38478:	vst1.16	{d16-d17}, [r3]!
   3847c:	bne	38470 <GetDataSlab+0xc5f4>
   38480:	ldr	r0, [sp, #52]	; 0x34
   38484:	ldr	r1, [sp, #40]	; 0x28
   38488:	cmp	r0, r1
   3848c:	beq	384b4 <GetDataSlab+0xc638>
   38490:	ldr	r0, [sp, #52]	; 0x34
   38494:	mov	r3, #0
   38498:	sub	r0, r0, r1
   3849c:	sub	r1, r3, r1, lsl #1
   384a0:	ldrh	r3, [r5, -r1]
   384a4:	subs	r0, r0, #1
   384a8:	strh	r3, [ip, -r1]
   384ac:	sub	r1, r1, #2
   384b0:	bne	384a0 <GetDataSlab+0xc624>
   384b4:	ldr	r0, [sp, #44]	; 0x2c
   384b8:	add	r9, r9, r0, lsl #1
   384bc:	add	r2, r2, r0
   384c0:	ldr	r0, [fp, #24]
   384c4:	cmp	r0, #2
   384c8:	blt	38578 <GetDataSlab+0xc6fc>
   384cc:	mov	r1, #0
   384d0:	mov	r0, r1
   384d4:	ldr	r1, [r7, r1, lsl #2]
   384d8:	add	r1, r1, #1
   384dc:	str	r1, [r7, r0, lsl #2]
   384e0:	ldr	r3, [r6, r0, lsl #2]
   384e4:	sdiv	r5, r1, r3
   384e8:	mls	r1, r5, r3, r1
   384ec:	cmp	r1, #0
   384f0:	bne	38568 <GetDataSlab+0xc6ec>
   384f4:	mov	r1, #0
   384f8:	sub	r5, fp, #176	; 0xb0
   384fc:	str	r1, [r7, r0, lsl #2]
   38500:	add	r1, r5, r0, lsl #2
   38504:	ldr	r1, [r1, #4]
   38508:	sdiv	r3, r2, r1
   3850c:	mls	r3, r3, r1, r2
   38510:	cmp	r3, #0
   38514:	beq	38530 <GetDataSlab+0xc6b4>
   38518:	ldr	r5, [r5, r0, lsl #2]
   3851c:	ldr	sl, [r8, r0, lsl #2]
   38520:	sub	r1, r1, r3
   38524:	mla	r1, sl, r5, r1
   38528:	add	r2, r1, r2
   3852c:	b	3854c <GetDataSlab+0xc6d0>
   38530:	ldr	r1, [r8, r0, lsl #2]
   38534:	cmp	r1, #0
   38538:	beq	38550 <GetDataSlab+0xc6d4>
   3853c:	sub	r3, fp, #176	; 0xb0
   38540:	ldr	r3, [r3, r0, lsl #2]
   38544:	mla	r2, r3, r1, r2
   38548:	mul	r1, r3, r1
   3854c:	add	r9, r9, r1, lsl #1
   38550:	ldr	r3, [fp, #24]
   38554:	add	r1, r0, #1
   38558:	add	r0, r0, #2
   3855c:	cmp	r0, r3
   38560:	blt	384d0 <GetDataSlab+0xc654>
   38564:	b	38578 <GetDataSlab+0xc6fc>
   38568:	ldr	r1, [sp, #36]	; 0x24
   3856c:	ldr	r0, [r1, r0, lsl #2]
   38570:	add	r9, r9, r0, lsl #1
   38574:	add	r2, r0, r2
   38578:	ldr	r1, [sp, #52]	; 0x34
   3857c:	ldr	r0, [sp, #64]	; 0x40
   38580:	ldr	r3, [sp, #60]	; 0x3c
   38584:	add	r4, r4, #1
   38588:	add	lr, lr, r1
   3858c:	add	ip, ip, r0
   38590:	mov	r0, #0
   38594:	cmp	lr, r3
   38598:	blt	38410 <GetDataSlab+0xc594>
   3859c:	b	2e97c <GetDataSlab+0x2b00>
   385a0:	ldr	r0, [ip]
   385a4:	mov	sl, r6
   385a8:	mov	r2, #0
   385ac:	sub	r5, fp, #176	; 0xb0
   385b0:	str	r0, [sp, #32]
   385b4:	sub	r0, r0, #1
   385b8:	str	r0, [fp, #-96]	; 0xffffffa0
   385bc:	ldr	r0, [fp, #8]
   385c0:	ldr	r0, [r0]
   385c4:	str	r0, [fp, #-176]	; 0xffffff50
   385c8:	str	r0, [sp, #44]	; 0x2c
   385cc:	ldr	r0, [fp, #24]
   385d0:	ldr	r1, [r6]
   385d4:	sub	r6, fp, #96	; 0x60
   385d8:	cmp	r0, #2
   385dc:	str	r1, [sp, #52]	; 0x34
   385e0:	str	r1, [sp, #60]	; 0x3c
   385e4:	blt	3873c <GetDataSlab+0xc8c0>
   385e8:	ldr	r0, [fp, #8]
   385ec:	ldr	r3, [sp, #44]	; 0x2c
   385f0:	mov	r4, #1
   385f4:	mov	lr, #0
   385f8:	mvn	ip, #15
   385fc:	mov	r2, #0
   38600:	sub	r7, r0, #4
   38604:	sub	r9, r0, #12
   38608:	ldr	r0, [sp, #52]	; 0x34
   3860c:	mov	r8, r3
   38610:	str	r0, [sp, #60]	; 0x3c
   38614:	ldr	r1, [fp, #16]
   38618:	add	lr, lr, #1
   3861c:	cmp	lr, #4
   38620:	str	lr, [sp, #48]	; 0x30
   38624:	ldr	r1, [r1, r4, lsl #2]
   38628:	str	r3, [r5, r4, lsl #2]
   3862c:	sub	r1, r1, #1
   38630:	str	r1, [r6, r4, lsl #2]
   38634:	ldr	r6, [fp, #8]
   38638:	ldr	r0, [r6, r4, lsl #2]
   3863c:	bcs	38650 <GetDataSlab+0xc7d4>
   38640:	mov	lr, r0
   38644:	mov	r6, r0
   38648:	mov	r5, r4
   3864c:	b	386dc <GetDataSlab+0xc860>
   38650:	vmov.i32	q9, #1	; 0x00000001
   38654:	vmov.i32	q10, #1	; 0x00000001
   38658:	vmov.i32	q8, #1	; 0x00000001
   3865c:	bic	r6, lr, #3
   38660:	bic	sl, r4, #3
   38664:	vmov.32	d23[1], r0
   38668:	vmov.32	d18[0], r3
   3866c:	vmov.32	d20[0], r1
   38670:	sub	r5, r4, r6
   38674:	mov	r1, r9
   38678:	vorr	d16, d18, d18
   3867c:	vmov.i32	q9, #1	; 0x00000001
   38680:	vorr	d18, d20, d20
   38684:	vld1.32	{d20-d21}, [r1], ip
   38688:	subs	sl, sl, #4
   3868c:	vrev64.32	q12, q10
   38690:	vext.8	q12, q12, q12, #8
   38694:	vext.8	q11, q11, q12, #12
   38698:	vmul.i32	q9, q9, q12
   3869c:	vmul.i32	q8, q11, q8
   386a0:	vorr	q11, q12, q12
   386a4:	bne	38684 <GetDataSlab+0xc808>
   386a8:	vext.8	q11, q9, q8, #8
   386ac:	vext.8	q12, q8, q8, #8
   386b0:	ldr	sl, [fp, #20]
   386b4:	cmp	lr, r6
   386b8:	mov	lr, r0
   386bc:	vmul.i32	q0, q9, q11
   386c0:	vmul.i32	q1, q8, q12
   386c4:	vmul.i32	q8, q0, d0[1]
   386c8:	vmul.i32	q9, q1, d2[1]
   386cc:	vmov.32	r1, d16[0]
   386d0:	vmov.32	r3, d18[0]
   386d4:	beq	386f0 <GetDataSlab+0xc874>
   386d8:	vmov.32	r6, d20[0]
   386dc:	mul	r3, r6, r3
   386e0:	ldr	r6, [r7, r5, lsl #2]
   386e4:	subs	r5, r5, #1
   386e8:	mul	r1, r1, r6
   386ec:	bne	386dc <GetDataSlab+0xc860>
   386f0:	sub	r6, fp, #96	; 0x60
   386f4:	sub	r5, fp, #176	; 0xb0
   386f8:	ldr	r0, [sp, #60]	; 0x3c
   386fc:	add	r9, r9, #4
   38700:	str	r1, [r6, r4, lsl #2]
   38704:	ldr	r1, [fp, #12]
   38708:	str	r3, [r5, r4, lsl #2]
   3870c:	ldr	r1, [r1, r4, lsl #2]
   38710:	mla	r2, r1, r8, r2
   38714:	ldr	r1, [sl, r4, lsl #2]
   38718:	mov	r8, r3
   3871c:	mov	r3, lr
   38720:	ldr	lr, [sp, #48]	; 0x30
   38724:	add	r4, r4, #1
   38728:	mul	r0, r1, r0
   3872c:	ldr	r1, [fp, #24]
   38730:	str	r0, [sp, #60]	; 0x3c
   38734:	cmp	r4, r1
   38738:	bne	38614 <GetDataSlab+0xc798>
   3873c:	ldr	r0, [sp, #56]	; 0x38
   38740:	ldr	r6, [sp, #32]
   38744:	add	r9, r0, r2, lsl #1
   38748:	cmp	r6, #1
   3874c:	bne	4696c <GetDataSlab+0x1aaf0>
   38750:	ldr	r0, [sp, #60]	; 0x3c
   38754:	ldr	ip, [sp, #68]	; 0x44
   38758:	ldr	r8, [fp, #12]
   3875c:	ldr	r1, [sp, #52]	; 0x34
   38760:	cmp	r0, #1
   38764:	blt	51a58 <GetDataSlab+0x25bdc>
   38768:	ldr	r0, [r8], #4
   3876c:	add	r6, sl, #4
   38770:	mov	r4, #0
   38774:	mov	lr, #0
   38778:	str	r0, [sp, #56]	; 0x38
   3877c:	add	r0, r1, r0
   38780:	str	r0, [sp, #48]	; 0x30
   38784:	sub	r0, fp, #136	; 0x88
   38788:	orr	r7, r0, #4
   3878c:	sub	r0, fp, #96	; 0x60
   38790:	orr	r0, r0, #4
   38794:	str	r0, [sp, #36]	; 0x24
   38798:	bic	r0, r1, #7
   3879c:	str	r0, [sp, #40]	; 0x28
   387a0:	lsl	r0, r1, #1
   387a4:	str	r0, [sp, #64]	; 0x40
   387a8:	cmp	r1, #1
   387ac:	blt	3884c <GetDataSlab+0xc9d0>
   387b0:	ldr	r0, [sp, #56]	; 0x38
   387b4:	mov	r1, #0
   387b8:	add	r5, r9, r0, lsl #1
   387bc:	ldr	r0, [sp, #52]	; 0x34
   387c0:	cmp	r0, #8
   387c4:	bcc	38828 <GetDataSlab+0xc9ac>
   387c8:	ldr	r0, [sp, #68]	; 0x44
   387cc:	ldr	r3, [sp, #64]	; 0x40
   387d0:	mla	r0, r3, r4, r0
   387d4:	ldr	r3, [sp, #48]	; 0x30
   387d8:	add	r3, r9, r3, lsl #1
   387dc:	cmp	r0, r3
   387e0:	bcs	387fc <GetDataSlab+0xc980>
   387e4:	ldr	r0, [sp, #64]	; 0x40
   387e8:	ldr	r3, [sp, #68]	; 0x44
   387ec:	mla	r0, r0, r4, r0
   387f0:	add	r0, r3, r0
   387f4:	cmp	r0, r5
   387f8:	bhi	38828 <GetDataSlab+0xc9ac>
   387fc:	ldr	r1, [sp, #40]	; 0x28
   38800:	mov	r3, ip
   38804:	mov	r0, r5
   38808:	vld1.16	{d16-d17}, [r0]!
   3880c:	subs	r1, r1, #8
   38810:	vst1.16	{d16-d17}, [r3]!
   38814:	bne	38808 <GetDataSlab+0xc98c>
   38818:	ldr	r0, [sp, #52]	; 0x34
   3881c:	ldr	r1, [sp, #40]	; 0x28
   38820:	cmp	r0, r1
   38824:	beq	3884c <GetDataSlab+0xc9d0>
   38828:	ldr	r0, [sp, #52]	; 0x34
   3882c:	mov	r3, #0
   38830:	sub	r0, r0, r1
   38834:	sub	r1, r3, r1, lsl #1
   38838:	ldrh	r3, [r5, -r1]
   3883c:	subs	r0, r0, #1
   38840:	strh	r3, [ip, -r1]
   38844:	sub	r1, r1, #2
   38848:	bne	38838 <GetDataSlab+0xc9bc>
   3884c:	ldr	r0, [sp, #44]	; 0x2c
   38850:	add	r9, r9, r0, lsl #1
   38854:	add	r2, r2, r0
   38858:	ldr	r0, [fp, #24]
   3885c:	cmp	r0, #2
   38860:	blt	38910 <GetDataSlab+0xca94>
   38864:	mov	r1, #0
   38868:	mov	r0, r1
   3886c:	ldr	r1, [r7, r1, lsl #2]
   38870:	add	r1, r1, #1
   38874:	str	r1, [r7, r0, lsl #2]
   38878:	ldr	r3, [r6, r0, lsl #2]
   3887c:	sdiv	r5, r1, r3
   38880:	mls	r1, r5, r3, r1
   38884:	cmp	r1, #0
   38888:	bne	38900 <GetDataSlab+0xca84>
   3888c:	mov	r1, #0
   38890:	sub	r5, fp, #176	; 0xb0
   38894:	str	r1, [r7, r0, lsl #2]
   38898:	add	r1, r5, r0, lsl #2
   3889c:	ldr	r1, [r1, #4]
   388a0:	sdiv	r3, r2, r1
   388a4:	mls	r3, r3, r1, r2
   388a8:	cmp	r3, #0
   388ac:	beq	388c8 <GetDataSlab+0xca4c>
   388b0:	ldr	r5, [r5, r0, lsl #2]
   388b4:	ldr	sl, [r8, r0, lsl #2]
   388b8:	sub	r1, r1, r3
   388bc:	mla	r1, sl, r5, r1
   388c0:	add	r2, r1, r2
   388c4:	b	388e4 <GetDataSlab+0xca68>
   388c8:	ldr	r1, [r8, r0, lsl #2]
   388cc:	cmp	r1, #0
   388d0:	beq	388e8 <GetDataSlab+0xca6c>
   388d4:	sub	r3, fp, #176	; 0xb0
   388d8:	ldr	r3, [r3, r0, lsl #2]
   388dc:	mla	r2, r3, r1, r2
   388e0:	mul	r1, r3, r1
   388e4:	add	r9, r9, r1, lsl #1
   388e8:	ldr	r3, [fp, #24]
   388ec:	add	r1, r0, #1
   388f0:	add	r0, r0, #2
   388f4:	cmp	r0, r3
   388f8:	blt	38868 <GetDataSlab+0xc9ec>
   388fc:	b	38910 <GetDataSlab+0xca94>
   38900:	ldr	r1, [sp, #36]	; 0x24
   38904:	ldr	r0, [r1, r0, lsl #2]
   38908:	add	r9, r9, r0, lsl #1
   3890c:	add	r2, r0, r2
   38910:	ldr	r1, [sp, #52]	; 0x34
   38914:	ldr	r0, [sp, #64]	; 0x40
   38918:	ldr	r3, [sp, #60]	; 0x3c
   3891c:	add	r4, r4, #1
   38920:	add	lr, lr, r1
   38924:	add	ip, ip, r0
   38928:	mov	r0, #0
   3892c:	cmp	lr, r3
   38930:	blt	387a8 <GetDataSlab+0xc92c>
   38934:	b	2e97c <GetDataSlab+0x2b00>
   38938:	ldr	r0, [ip]
   3893c:	mov	r3, #0
   38940:	sub	lr, fp, #96	; 0x60
   38944:	str	r0, [sp, #32]
   38948:	sub	r0, r0, #1
   3894c:	str	r0, [fp, #-96]	; 0xffffffa0
   38950:	ldr	r0, [fp, #8]
   38954:	ldr	r0, [r0]
   38958:	str	r0, [fp, #-176]	; 0xffffff50
   3895c:	str	r0, [sp, #44]	; 0x2c
   38960:	ldr	r0, [fp, #24]
   38964:	ldr	r1, [r6]
   38968:	sub	r6, fp, #176	; 0xb0
   3896c:	cmp	r0, #2
   38970:	str	r1, [sp, #52]	; 0x34
   38974:	str	r1, [sp, #60]	; 0x3c
   38978:	blt	38acc <GetDataSlab+0xcc50>
   3897c:	ldr	r0, [fp, #8]
   38980:	ldr	r2, [sp, #44]	; 0x2c
   38984:	mov	r5, #1
   38988:	mov	r9, #0
   3898c:	mvn	r4, #15
   38990:	mov	r3, #0
   38994:	sub	r7, r0, #4
   38998:	sub	r8, r0, #12
   3899c:	mov	r0, r2
   389a0:	str	r2, [sp, #48]	; 0x30
   389a4:	ldr	r0, [sp, #52]	; 0x34
   389a8:	str	r0, [sp, #60]	; 0x3c
   389ac:	ldr	r0, [ip, r5, lsl #2]
   389b0:	str	r2, [r6, r5, lsl #2]
   389b4:	add	r9, r9, #1
   389b8:	cmp	r9, #4
   389bc:	sub	ip, r0, #1
   389c0:	ldr	r0, [fp, #8]
   389c4:	str	ip, [lr, r5, lsl #2]
   389c8:	ldr	r0, [r0, r5, lsl #2]
   389cc:	bcs	389dc <GetDataSlab+0xcb60>
   389d0:	mov	sl, r0
   389d4:	mov	r6, r5
   389d8:	b	38a64 <GetDataSlab+0xcbe8>
   389dc:	vmov.i32	q9, #1	; 0x00000001
   389e0:	vmov.i32	q10, #1	; 0x00000001
   389e4:	vmov.i32	q8, #1	; 0x00000001
   389e8:	bic	lr, r9, #3
   389ec:	bic	sl, r5, #3
   389f0:	vmov.32	d23[1], r0
   389f4:	vmov.32	d18[0], r2
   389f8:	vmov.32	d20[0], ip
   389fc:	sub	r6, r5, lr
   38a00:	mov	r2, r8
   38a04:	vorr	d16, d18, d18
   38a08:	vmov.i32	q9, #1	; 0x00000001
   38a0c:	vorr	d18, d20, d20
   38a10:	vld1.32	{d20-d21}, [r2], r4
   38a14:	subs	sl, sl, #4
   38a18:	vrev64.32	q12, q10
   38a1c:	vext.8	q12, q12, q12, #8
   38a20:	vext.8	q11, q11, q12, #12
   38a24:	vmul.i32	q9, q9, q12
   38a28:	vmul.i32	q8, q11, q8
   38a2c:	vorr	q11, q12, q12
   38a30:	bne	38a10 <GetDataSlab+0xcb94>
   38a34:	vext.8	q11, q9, q8, #8
   38a38:	vext.8	q12, q8, q8, #8
   38a3c:	mov	sl, r0
   38a40:	cmp	r9, lr
   38a44:	vmul.i32	q0, q9, q11
   38a48:	vmul.i32	q1, q8, q12
   38a4c:	vmul.i32	q8, q0, d0[1]
   38a50:	vmul.i32	q9, q1, d2[1]
   38a54:	vmov.32	ip, d16[0]
   38a58:	vmov.32	r2, d18[0]
   38a5c:	beq	38a78 <GetDataSlab+0xcbfc>
   38a60:	vmov.32	r0, d20[0]
   38a64:	mul	r2, r0, r2
   38a68:	ldr	r0, [r7, r6, lsl #2]
   38a6c:	subs	r6, r6, #1
   38a70:	mul	ip, ip, r0
   38a74:	bne	38a64 <GetDataSlab+0xcbe8>
   38a78:	ldr	r0, [fp, #12]
   38a7c:	sub	r6, fp, #176	; 0xb0
   38a80:	sub	lr, fp, #96	; 0x60
   38a84:	ldr	r1, [sp, #48]	; 0x30
   38a88:	add	r8, r8, #4
   38a8c:	str	r2, [sp, #48]	; 0x30
   38a90:	str	r2, [r6, r5, lsl #2]
   38a94:	str	ip, [lr, r5, lsl #2]
   38a98:	ldr	ip, [fp, #16]
   38a9c:	mov	r2, sl
   38aa0:	ldr	r0, [r0, r5, lsl #2]
   38aa4:	mla	r3, r0, r1, r3
   38aa8:	ldr	r0, [fp, #20]
   38aac:	ldr	r1, [sp, #60]	; 0x3c
   38ab0:	ldr	r0, [r0, r5, lsl #2]
   38ab4:	add	r5, r5, #1
   38ab8:	mul	r1, r0, r1
   38abc:	ldr	r0, [fp, #24]
   38ac0:	str	r1, [sp, #60]	; 0x3c
   38ac4:	cmp	r5, r0
   38ac8:	bne	389ac <GetDataSlab+0xcb30>
   38acc:	ldr	r0, [sp, #56]	; 0x38
   38ad0:	ldr	r6, [sp, #32]
   38ad4:	add	sl, r0, r3, lsl #2
   38ad8:	cmp	r6, #1
   38adc:	bne	46af8 <GetDataSlab+0x1ac7c>
   38ae0:	ldr	r0, [sp, #60]	; 0x3c
   38ae4:	ldr	r2, [sp, #52]	; 0x34
   38ae8:	sub	r1, fp, #96	; 0x60
   38aec:	cmp	r0, #1
   38af0:	ldr	r0, [fp, #12]
   38af4:	blt	51a6c <GetDataSlab+0x25bf0>
   38af8:	add	r8, r0, #4
   38afc:	ldr	r0, [fp, #20]
   38b00:	mov	r9, #0
   38b04:	mov	lr, #0
   38b08:	add	r6, r0, #4
   38b0c:	sub	r0, fp, #136	; 0x88
   38b10:	orr	r5, r0, #4
   38b14:	orr	r0, r1, #4
   38b18:	str	r0, [sp, #40]	; 0x28
   38b1c:	lsl	r0, r2, #1
   38b20:	str	r0, [sp, #56]	; 0x38
   38b24:	bic	r0, r2, #3
   38b28:	str	r0, [sp, #48]	; 0x30
   38b2c:	ldr	r4, [sp, #68]	; 0x44
   38b30:	cmp	r2, #1
   38b34:	blt	38ba4 <GetDataSlab+0xcd28>
   38b38:	ldr	r0, [fp, #12]
   38b3c:	mov	r1, #0
   38b40:	ldr	r0, [r0]
   38b44:	add	r7, sl, r0, lsl #2
   38b48:	ldr	r0, [sp, #52]	; 0x34
   38b4c:	cmp	r0, #4
   38b50:	bcc	38b84 <GetDataSlab+0xcd08>
   38b54:	ldr	r2, [sp, #48]	; 0x30
   38b58:	mov	r1, r4
   38b5c:	mov	r0, r7
   38b60:	vld1.32	{d16-d17}, [r0]!
   38b64:	subs	r2, r2, #4
   38b68:	vmovn.i32	d16, q8
   38b6c:	vst1.16	{d16}, [r1]!
   38b70:	bne	38b60 <GetDataSlab+0xcce4>
   38b74:	ldr	r0, [sp, #52]	; 0x34
   38b78:	ldr	r1, [sp, #48]	; 0x30
   38b7c:	cmp	r0, r1
   38b80:	beq	38ba4 <GetDataSlab+0xcd28>
   38b84:	ldr	r0, [sp, #52]	; 0x34
   38b88:	sub	r0, r0, r1
   38b8c:	sub	r1, r9, r1, lsl #1
   38b90:	ldr	r2, [r7, -r1, lsl #1]
   38b94:	subs	r0, r0, #1
   38b98:	strh	r2, [r4, -r1]
   38b9c:	sub	r1, r1, #2
   38ba0:	bne	38b90 <GetDataSlab+0xcd14>
   38ba4:	ldr	r0, [sp, #44]	; 0x2c
   38ba8:	add	sl, sl, r0, lsl #2
   38bac:	add	r3, r3, r0
   38bb0:	ldr	r0, [fp, #24]
   38bb4:	cmp	r0, #2
   38bb8:	blt	38c68 <GetDataSlab+0xcdec>
   38bbc:	mov	r1, #0
   38bc0:	mov	r0, r1
   38bc4:	ldr	r1, [r5, r1, lsl #2]
   38bc8:	add	r1, r1, #1
   38bcc:	str	r1, [r5, r0, lsl #2]
   38bd0:	ldr	r2, [r6, r0, lsl #2]
   38bd4:	sdiv	r7, r1, r2
   38bd8:	mls	r1, r7, r2, r1
   38bdc:	cmp	r1, #0
   38be0:	bne	38c58 <GetDataSlab+0xcddc>
   38be4:	sub	r7, fp, #176	; 0xb0
   38be8:	str	r9, [r5, r0, lsl #2]
   38bec:	add	r1, r7, r0, lsl #2
   38bf0:	ldr	r1, [r1, #4]
   38bf4:	sdiv	r2, r3, r1
   38bf8:	mls	r2, r2, r1, r3
   38bfc:	cmp	r2, #0
   38c00:	beq	38c20 <GetDataSlab+0xcda4>
   38c04:	ldr	r7, [r7, r0, lsl #2]
   38c08:	ldr	ip, [r8, r0, lsl #2]
   38c0c:	ldr	r4, [sp, #68]	; 0x44
   38c10:	sub	r1, r1, r2
   38c14:	mla	r1, ip, r7, r1
   38c18:	add	r3, r1, r3
   38c1c:	b	38c3c <GetDataSlab+0xcdc0>
   38c20:	ldr	r1, [r8, r0, lsl #2]
   38c24:	cmp	r1, #0
   38c28:	beq	38c40 <GetDataSlab+0xcdc4>
   38c2c:	sub	r2, fp, #176	; 0xb0
   38c30:	ldr	r2, [r2, r0, lsl #2]
   38c34:	mla	r3, r2, r1, r3
   38c38:	mul	r1, r2, r1
   38c3c:	add	sl, sl, r1, lsl #2
   38c40:	ldr	r2, [fp, #24]
   38c44:	add	r1, r0, #1
   38c48:	add	r0, r0, #2
   38c4c:	cmp	r0, r2
   38c50:	blt	38bc0 <GetDataSlab+0xcd44>
   38c54:	b	38c68 <GetDataSlab+0xcdec>
   38c58:	ldr	r1, [sp, #40]	; 0x28
   38c5c:	ldr	r0, [r1, r0, lsl #2]
   38c60:	add	sl, sl, r0, lsl #2
   38c64:	add	r3, r0, r3
   38c68:	ldr	r2, [sp, #52]	; 0x34
   38c6c:	ldr	r0, [sp, #56]	; 0x38
   38c70:	ldr	r1, [sp, #60]	; 0x3c
   38c74:	add	lr, lr, r2
   38c78:	add	r4, r4, r0
   38c7c:	mov	r0, #0
   38c80:	cmp	lr, r1
   38c84:	str	r4, [sp, #68]	; 0x44
   38c88:	blt	38b2c <GetDataSlab+0xccb0>
   38c8c:	b	2e97c <GetDataSlab+0x2b00>
   38c90:	ldr	r0, [ip]
   38c94:	mov	r3, #0
   38c98:	sub	lr, fp, #96	; 0x60
   38c9c:	str	r0, [sp, #32]
   38ca0:	sub	r0, r0, #1
   38ca4:	str	r0, [fp, #-96]	; 0xffffffa0
   38ca8:	ldr	r0, [fp, #8]
   38cac:	ldr	r0, [r0]
   38cb0:	str	r0, [fp, #-176]	; 0xffffff50
   38cb4:	str	r0, [sp, #44]	; 0x2c
   38cb8:	ldr	r0, [fp, #24]
   38cbc:	ldr	r1, [r6]
   38cc0:	sub	r6, fp, #176	; 0xb0
   38cc4:	cmp	r0, #2
   38cc8:	str	r1, [sp, #52]	; 0x34
   38ccc:	str	r1, [sp, #60]	; 0x3c
   38cd0:	blt	38e24 <GetDataSlab+0xcfa8>
   38cd4:	ldr	r0, [fp, #8]
   38cd8:	ldr	r2, [sp, #44]	; 0x2c
   38cdc:	mov	r5, #1
   38ce0:	mov	r9, #0
   38ce4:	mvn	r4, #15
   38ce8:	mov	r3, #0
   38cec:	sub	r7, r0, #4
   38cf0:	sub	r8, r0, #12
   38cf4:	mov	r0, r2
   38cf8:	str	r2, [sp, #48]	; 0x30
   38cfc:	ldr	r0, [sp, #52]	; 0x34
   38d00:	str	r0, [sp, #60]	; 0x3c
   38d04:	ldr	r0, [ip, r5, lsl #2]
   38d08:	str	r2, [r6, r5, lsl #2]
   38d0c:	add	r9, r9, #1
   38d10:	cmp	r9, #4
   38d14:	sub	ip, r0, #1
   38d18:	ldr	r0, [fp, #8]
   38d1c:	str	ip, [lr, r5, lsl #2]
   38d20:	ldr	r0, [r0, r5, lsl #2]
   38d24:	bcs	38d34 <GetDataSlab+0xceb8>
   38d28:	mov	sl, r0
   38d2c:	mov	r6, r5
   38d30:	b	38dbc <GetDataSlab+0xcf40>
   38d34:	vmov.i32	q9, #1	; 0x00000001
   38d38:	vmov.i32	q10, #1	; 0x00000001
   38d3c:	vmov.i32	q8, #1	; 0x00000001
   38d40:	bic	lr, r9, #3
   38d44:	bic	sl, r5, #3
   38d48:	vmov.32	d23[1], r0
   38d4c:	vmov.32	d18[0], r2
   38d50:	vmov.32	d20[0], ip
   38d54:	sub	r6, r5, lr
   38d58:	mov	r2, r8
   38d5c:	vorr	d16, d18, d18
   38d60:	vmov.i32	q9, #1	; 0x00000001
   38d64:	vorr	d18, d20, d20
   38d68:	vld1.32	{d20-d21}, [r2], r4
   38d6c:	subs	sl, sl, #4
   38d70:	vrev64.32	q12, q10
   38d74:	vext.8	q12, q12, q12, #8
   38d78:	vext.8	q11, q11, q12, #12
   38d7c:	vmul.i32	q9, q9, q12
   38d80:	vmul.i32	q8, q11, q8
   38d84:	vorr	q11, q12, q12
   38d88:	bne	38d68 <GetDataSlab+0xceec>
   38d8c:	vext.8	q11, q9, q8, #8
   38d90:	vext.8	q12, q8, q8, #8
   38d94:	mov	sl, r0
   38d98:	cmp	r9, lr
   38d9c:	vmul.i32	q0, q9, q11
   38da0:	vmul.i32	q1, q8, q12
   38da4:	vmul.i32	q8, q0, d0[1]
   38da8:	vmul.i32	q9, q1, d2[1]
   38dac:	vmov.32	ip, d16[0]
   38db0:	vmov.32	r2, d18[0]
   38db4:	beq	38dd0 <GetDataSlab+0xcf54>
   38db8:	vmov.32	r0, d20[0]
   38dbc:	mul	r2, r0, r2
   38dc0:	ldr	r0, [r7, r6, lsl #2]
   38dc4:	subs	r6, r6, #1
   38dc8:	mul	ip, ip, r0
   38dcc:	bne	38dbc <GetDataSlab+0xcf40>
   38dd0:	ldr	r0, [fp, #12]
   38dd4:	sub	r6, fp, #176	; 0xb0
   38dd8:	sub	lr, fp, #96	; 0x60
   38ddc:	ldr	r1, [sp, #48]	; 0x30
   38de0:	add	r8, r8, #4
   38de4:	str	r2, [sp, #48]	; 0x30
   38de8:	str	r2, [r6, r5, lsl #2]
   38dec:	str	ip, [lr, r5, lsl #2]
   38df0:	ldr	ip, [fp, #16]
   38df4:	mov	r2, sl
   38df8:	ldr	r0, [r0, r5, lsl #2]
   38dfc:	mla	r3, r0, r1, r3
   38e00:	ldr	r0, [fp, #20]
   38e04:	ldr	r1, [sp, #60]	; 0x3c
   38e08:	ldr	r0, [r0, r5, lsl #2]
   38e0c:	add	r5, r5, #1
   38e10:	mul	r1, r0, r1
   38e14:	ldr	r0, [fp, #24]
   38e18:	str	r1, [sp, #60]	; 0x3c
   38e1c:	cmp	r5, r0
   38e20:	bne	38d04 <GetDataSlab+0xce88>
   38e24:	ldr	r0, [sp, #56]	; 0x38
   38e28:	ldr	r6, [sp, #32]
   38e2c:	add	sl, r0, r3, lsl #2
   38e30:	cmp	r6, #1
   38e34:	bne	46c8c <GetDataSlab+0x1ae10>
   38e38:	ldr	r0, [sp, #60]	; 0x3c
   38e3c:	ldr	r2, [sp, #52]	; 0x34
   38e40:	sub	r1, fp, #96	; 0x60
   38e44:	cmp	r0, #1
   38e48:	ldr	r0, [fp, #12]
   38e4c:	blt	51a80 <GetDataSlab+0x25c04>
   38e50:	add	r8, r0, #4
   38e54:	ldr	r0, [fp, #20]
   38e58:	mov	r9, #0
   38e5c:	mov	lr, #0
   38e60:	add	r6, r0, #4
   38e64:	sub	r0, fp, #136	; 0x88
   38e68:	orr	r5, r0, #4
   38e6c:	orr	r0, r1, #4
   38e70:	str	r0, [sp, #40]	; 0x28
   38e74:	lsl	r0, r2, #1
   38e78:	str	r0, [sp, #56]	; 0x38
   38e7c:	bic	r0, r2, #3
   38e80:	str	r0, [sp, #48]	; 0x30
   38e84:	ldr	r4, [sp, #68]	; 0x44
   38e88:	cmp	r2, #1
   38e8c:	blt	38efc <GetDataSlab+0xd080>
   38e90:	ldr	r0, [fp, #12]
   38e94:	mov	r1, #0
   38e98:	ldr	r0, [r0]
   38e9c:	add	r7, sl, r0, lsl #2
   38ea0:	ldr	r0, [sp, #52]	; 0x34
   38ea4:	cmp	r0, #4
   38ea8:	bcc	38edc <GetDataSlab+0xd060>
   38eac:	ldr	r2, [sp, #48]	; 0x30
   38eb0:	mov	r1, r4
   38eb4:	mov	r0, r7
   38eb8:	vld1.32	{d16-d17}, [r0]!
   38ebc:	subs	r2, r2, #4
   38ec0:	vmovn.i32	d16, q8
   38ec4:	vst1.16	{d16}, [r1]!
   38ec8:	bne	38eb8 <GetDataSlab+0xd03c>
   38ecc:	ldr	r0, [sp, #52]	; 0x34
   38ed0:	ldr	r1, [sp, #48]	; 0x30
   38ed4:	cmp	r0, r1
   38ed8:	beq	38efc <GetDataSlab+0xd080>
   38edc:	ldr	r0, [sp, #52]	; 0x34
   38ee0:	sub	r0, r0, r1
   38ee4:	sub	r1, r9, r1, lsl #1
   38ee8:	ldr	r2, [r7, -r1, lsl #1]
   38eec:	subs	r0, r0, #1
   38ef0:	strh	r2, [r4, -r1]
   38ef4:	sub	r1, r1, #2
   38ef8:	bne	38ee8 <GetDataSlab+0xd06c>
   38efc:	ldr	r0, [sp, #44]	; 0x2c
   38f00:	add	sl, sl, r0, lsl #2
   38f04:	add	r3, r3, r0
   38f08:	ldr	r0, [fp, #24]
   38f0c:	cmp	r0, #2
   38f10:	blt	38fc0 <GetDataSlab+0xd144>
   38f14:	mov	r1, #0
   38f18:	mov	r0, r1
   38f1c:	ldr	r1, [r5, r1, lsl #2]
   38f20:	add	r1, r1, #1
   38f24:	str	r1, [r5, r0, lsl #2]
   38f28:	ldr	r2, [r6, r0, lsl #2]
   38f2c:	sdiv	r7, r1, r2
   38f30:	mls	r1, r7, r2, r1
   38f34:	cmp	r1, #0
   38f38:	bne	38fb0 <GetDataSlab+0xd134>
   38f3c:	sub	r7, fp, #176	; 0xb0
   38f40:	str	r9, [r5, r0, lsl #2]
   38f44:	add	r1, r7, r0, lsl #2
   38f48:	ldr	r1, [r1, #4]
   38f4c:	sdiv	r2, r3, r1
   38f50:	mls	r2, r2, r1, r3
   38f54:	cmp	r2, #0
   38f58:	beq	38f78 <GetDataSlab+0xd0fc>
   38f5c:	ldr	r7, [r7, r0, lsl #2]
   38f60:	ldr	ip, [r8, r0, lsl #2]
   38f64:	ldr	r4, [sp, #68]	; 0x44
   38f68:	sub	r1, r1, r2
   38f6c:	mla	r1, ip, r7, r1
   38f70:	add	r3, r1, r3
   38f74:	b	38f94 <GetDataSlab+0xd118>
   38f78:	ldr	r1, [r8, r0, lsl #2]
   38f7c:	cmp	r1, #0
   38f80:	beq	38f98 <GetDataSlab+0xd11c>
   38f84:	sub	r2, fp, #176	; 0xb0
   38f88:	ldr	r2, [r2, r0, lsl #2]
   38f8c:	mla	r3, r2, r1, r3
   38f90:	mul	r1, r2, r1
   38f94:	add	sl, sl, r1, lsl #2
   38f98:	ldr	r2, [fp, #24]
   38f9c:	add	r1, r0, #1
   38fa0:	add	r0, r0, #2
   38fa4:	cmp	r0, r2
   38fa8:	blt	38f18 <GetDataSlab+0xd09c>
   38fac:	b	38fc0 <GetDataSlab+0xd144>
   38fb0:	ldr	r1, [sp, #40]	; 0x28
   38fb4:	ldr	r0, [r1, r0, lsl #2]
   38fb8:	add	sl, sl, r0, lsl #2
   38fbc:	add	r3, r0, r3
   38fc0:	ldr	r2, [sp, #52]	; 0x34
   38fc4:	ldr	r0, [sp, #56]	; 0x38
   38fc8:	ldr	r1, [sp, #60]	; 0x3c
   38fcc:	add	lr, lr, r2
   38fd0:	add	r4, r4, r0
   38fd4:	mov	r0, #0
   38fd8:	cmp	lr, r1
   38fdc:	str	r4, [sp, #68]	; 0x44
   38fe0:	blt	38e84 <GetDataSlab+0xd008>
   38fe4:	b	2e97c <GetDataSlab+0x2b00>
   38fe8:	ldr	r0, [ip]
   38fec:	ldr	r9, [fp, #8]
   38ff0:	mov	sl, r6
   38ff4:	mov	r2, #0
   38ff8:	sub	r5, fp, #176	; 0xb0
   38ffc:	str	r0, [sp, #32]
   39000:	sub	r0, r0, #1
   39004:	str	r0, [fp, #-96]	; 0xffffffa0
   39008:	ldr	r0, [r9]
   3900c:	str	r0, [fp, #-176]	; 0xffffff50
   39010:	str	r0, [sp, #40]	; 0x28
   39014:	ldr	r0, [fp, #24]
   39018:	ldr	r1, [r6]
   3901c:	sub	r6, fp, #96	; 0x60
   39020:	cmp	r0, #2
   39024:	str	r1, [sp, #52]	; 0x34
   39028:	str	r1, [sp, #60]	; 0x3c
   3902c:	blt	39188 <GetDataSlab+0xd30c>
   39030:	mov	r0, #0
   39034:	ldr	r3, [sp, #40]	; 0x28
   39038:	sub	r7, r9, #4
   3903c:	sub	ip, r9, #12
   39040:	mov	r4, #1
   39044:	mvn	lr, #15
   39048:	mov	r2, #0
   3904c:	str	r0, [sp, #48]	; 0x30
   39050:	ldr	r0, [sp, #52]	; 0x34
   39054:	mov	r8, r3
   39058:	str	r0, [sp, #60]	; 0x3c
   3905c:	ldr	r1, [fp, #16]
   39060:	ldr	r0, [sp, #48]	; 0x30
   39064:	ldr	r1, [r1, r4, lsl #2]
   39068:	str	r3, [r5, r4, lsl #2]
   3906c:	add	r0, r0, #1
   39070:	cmp	r0, #4
   39074:	str	r0, [sp, #48]	; 0x30
   39078:	sub	sl, r1, #1
   3907c:	str	sl, [r6, r4, lsl #2]
   39080:	ldr	r6, [r9, r4, lsl #2]
   39084:	str	r6, [sp, #44]	; 0x2c
   39088:	bcs	39098 <GetDataSlab+0xd21c>
   3908c:	mov	r1, r6
   39090:	mov	r5, r4
   39094:	b	39128 <GetDataSlab+0xd2ac>
   39098:	vmov.i32	q9, #1	; 0x00000001
   3909c:	vmov.i32	q10, #1	; 0x00000001
   390a0:	vmov.i32	q8, #1	; 0x00000001
   390a4:	bic	r1, r0, #3
   390a8:	bic	r9, r4, #3
   390ac:	vmov.32	d23[1], r6
   390b0:	vmov.32	d18[0], r3
   390b4:	vmov.32	d20[0], sl
   390b8:	sub	r5, r4, r1
   390bc:	mov	r3, ip
   390c0:	vorr	d16, d18, d18
   390c4:	vmov.i32	q9, #1	; 0x00000001
   390c8:	vorr	d18, d20, d20
   390cc:	vld1.32	{d20-d21}, [r3], lr
   390d0:	subs	r9, r9, #4
   390d4:	vrev64.32	q12, q10
   390d8:	vext.8	q12, q12, q12, #8
   390dc:	vext.8	q11, q11, q12, #12
   390e0:	vmul.i32	q9, q9, q12
   390e4:	vmul.i32	q8, q11, q8
   390e8:	vorr	q11, q12, q12
   390ec:	bne	390cc <GetDataSlab+0xd250>
   390f0:	vext.8	q11, q9, q8, #8
   390f4:	vext.8	q12, q8, q8, #8
   390f8:	cmp	r0, r1
   390fc:	vmul.i32	q0, q9, q11
   39100:	vmul.i32	q1, q8, q12
   39104:	vmul.i32	q8, q0, d0[1]
   39108:	vmul.i32	q9, q1, d2[1]
   3910c:	vmov.32	sl, d16[0]
   39110:	vmov.32	r3, d18[0]
   39114:	bne	39120 <GetDataSlab+0xd2a4>
   39118:	ldr	r9, [fp, #8]
   3911c:	b	3913c <GetDataSlab+0xd2c0>
   39120:	ldr	r9, [fp, #8]
   39124:	vmov.32	r1, d20[0]
   39128:	mul	r3, r1, r3
   3912c:	ldr	r1, [r7, r5, lsl #2]
   39130:	subs	r5, r5, #1
   39134:	mul	sl, sl, r1
   39138:	bne	39128 <GetDataSlab+0xd2ac>
   3913c:	ldr	r1, [fp, #12]
   39140:	sub	r5, fp, #176	; 0xb0
   39144:	sub	r6, fp, #96	; 0x60
   39148:	ldr	r0, [sp, #60]	; 0x3c
   3914c:	add	ip, ip, #4
   39150:	str	sl, [r6, r4, lsl #2]
   39154:	str	r3, [r5, r4, lsl #2]
   39158:	ldr	sl, [fp, #20]
   3915c:	ldr	r1, [r1, r4, lsl #2]
   39160:	mla	r2, r1, r8, r2
   39164:	ldr	r1, [sl, r4, lsl #2]
   39168:	mov	r8, r3
   3916c:	ldr	r3, [sp, #44]	; 0x2c
   39170:	add	r4, r4, #1
   39174:	mul	r0, r1, r0
   39178:	ldr	r1, [fp, #24]
   3917c:	str	r0, [sp, #60]	; 0x3c
   39180:	cmp	r4, r1
   39184:	bne	3905c <GetDataSlab+0xd1e0>
   39188:	ldr	r0, [sp, #56]	; 0x38
   3918c:	ldr	r6, [sp, #32]
   39190:	add	r9, r0, r2, lsl #2
   39194:	cmp	r6, #1
   39198:	bne	46e20 <GetDataSlab+0x1afa4>
   3919c:	ldr	r0, [sp, #60]	; 0x3c
   391a0:	ldr	lr, [fp, #12]
   391a4:	ldr	r1, [sp, #52]	; 0x34
   391a8:	cmp	r0, #1
   391ac:	blt	51a94 <GetDataSlab+0x25c18>
   391b0:	sub	r0, fp, #136	; 0x88
   391b4:	add	r7, sl, #4
   391b8:	mov	sl, #0
   391bc:	mov	ip, #0
   391c0:	orr	r6, r0, #4
   391c4:	sub	r0, fp, #96	; 0x60
   391c8:	orr	r0, r0, #4
   391cc:	str	r0, [sp, #44]	; 0x2c
   391d0:	lsl	r0, r1, #1
   391d4:	str	r0, [sp, #56]	; 0x38
   391d8:	bic	r0, r1, #3
   391dc:	str	r0, [sp, #48]	; 0x30
   391e0:	ldr	r0, [lr], #4
   391e4:	str	r0, [sp, #64]	; 0x40
   391e8:	cmp	r1, #1
   391ec:	mov	r4, lr
   391f0:	blt	39274 <GetDataSlab+0xd3f8>
   391f4:	ldr	r0, [sp, #52]	; 0x34
   391f8:	mov	r3, #0
   391fc:	cmp	r0, #4
   39200:	bcc	3923c <GetDataSlab+0xd3c0>
   39204:	ldr	r0, [sp, #64]	; 0x40
   39208:	ldr	r1, [sp, #48]	; 0x30
   3920c:	ldr	r3, [sp, #68]	; 0x44
   39210:	add	r0, r9, r0, lsl #2
   39214:	vld1.32	{d16-d17}, [r0]!
   39218:	subs	r1, r1, #4
   3921c:	vcvt.u32.f32	q8, q8
   39220:	vmovn.i32	d16, q8
   39224:	vst1.16	{d16}, [r3]!
   39228:	bne	39214 <GetDataSlab+0xd398>
   3922c:	ldr	r0, [sp, #52]	; 0x34
   39230:	ldr	r3, [sp, #48]	; 0x30
   39234:	cmp	r0, r3
   39238:	beq	39274 <GetDataSlab+0xd3f8>
   3923c:	ldr	r5, [sp, #64]	; 0x40
   39240:	ldr	r0, [sp, #52]	; 0x34
   39244:	ldr	r1, [sp, #68]	; 0x44
   39248:	add	r5, r9, r5, lsl #2
   3924c:	sub	r0, r0, r3
   39250:	add	r1, r1, r3, lsl #1
   39254:	add	r3, r5, r3, lsl #2
   39258:	vldr	s0, [r3]
   3925c:	subs	r0, r0, #1
   39260:	add	r3, r3, #4
   39264:	vcvt.u32.f32	s0, s0
   39268:	vmov	r5, s0
   3926c:	strh	r5, [r1], #2
   39270:	bne	39258 <GetDataSlab+0xd3dc>
   39274:	ldr	r0, [sp, #40]	; 0x28
   39278:	add	r9, r9, r0, lsl #2
   3927c:	add	r2, r2, r0
   39280:	ldr	r0, [fp, #24]
   39284:	cmp	r0, #2
   39288:	blt	39338 <GetDataSlab+0xd4bc>
   3928c:	mov	r1, #0
   39290:	mov	r0, r1
   39294:	ldr	r1, [r6, r1, lsl #2]
   39298:	add	r1, r1, #1
   3929c:	str	r1, [r6, r0, lsl #2]
   392a0:	ldr	r3, [r7, r0, lsl #2]
   392a4:	sdiv	r5, r1, r3
   392a8:	mls	r1, r5, r3, r1
   392ac:	cmp	r1, #0
   392b0:	bne	39328 <GetDataSlab+0xd4ac>
   392b4:	sub	r5, fp, #176	; 0xb0
   392b8:	str	sl, [r6, r0, lsl #2]
   392bc:	add	r1, r5, r0, lsl #2
   392c0:	ldr	r1, [r1, #4]
   392c4:	sdiv	r3, r2, r1
   392c8:	mls	r3, r3, r1, r2
   392cc:	cmp	r3, #0
   392d0:	beq	392f0 <GetDataSlab+0xd474>
   392d4:	ldr	r5, [r5, r0, lsl #2]
   392d8:	ldr	r8, [lr, r0, lsl #2]
   392dc:	sub	r1, r1, r3
   392e0:	mov	r4, lr
   392e4:	mla	r1, r8, r5, r1
   392e8:	add	r2, r1, r2
   392ec:	b	3930c <GetDataSlab+0xd490>
   392f0:	ldr	r1, [r4, r0, lsl #2]
   392f4:	cmp	r1, #0
   392f8:	beq	39310 <GetDataSlab+0xd494>
   392fc:	sub	r3, fp, #176	; 0xb0
   39300:	ldr	r3, [r3, r0, lsl #2]
   39304:	mla	r2, r3, r1, r2
   39308:	mul	r1, r3, r1
   3930c:	add	r9, r9, r1, lsl #2
   39310:	ldr	r3, [fp, #24]
   39314:	add	r1, r0, #1
   39318:	add	r0, r0, #2
   3931c:	cmp	r0, r3
   39320:	blt	39290 <GetDataSlab+0xd414>
   39324:	b	39338 <GetDataSlab+0xd4bc>
   39328:	ldr	r1, [sp, #44]	; 0x2c
   3932c:	ldr	r0, [r1, r0, lsl #2]
   39330:	add	r9, r9, r0, lsl #2
   39334:	add	r2, r0, r2
   39338:	ldr	r0, [sp, #68]	; 0x44
   3933c:	ldr	r1, [sp, #56]	; 0x38
   39340:	ldr	r3, [sp, #60]	; 0x3c
   39344:	add	r0, r0, r1
   39348:	ldr	r1, [sp, #52]	; 0x34
   3934c:	str	r0, [sp, #68]	; 0x44
   39350:	mov	r0, #0
   39354:	add	ip, ip, r1
   39358:	cmp	ip, r3
   3935c:	blt	391e8 <GetDataSlab+0xd36c>
   39360:	b	2e97c <GetDataSlab+0x2b00>
   39364:	ldr	r0, [ip]
   39368:	mov	r2, #0
   3936c:	sub	r4, fp, #176	; 0xb0
   39370:	sub	r9, fp, #96	; 0x60
   39374:	str	r0, [sp, #32]
   39378:	sub	r0, r0, #1
   3937c:	str	r0, [fp, #-96]	; 0xffffffa0
   39380:	ldr	r0, [fp, #8]
   39384:	ldr	r0, [r0]
   39388:	str	r0, [fp, #-176]	; 0xffffff50
   3938c:	str	r0, [sp, #44]	; 0x2c
   39390:	ldr	r0, [fp, #24]
   39394:	ldr	r1, [r6]
   39398:	cmp	r0, #2
   3939c:	str	r1, [sp, #52]	; 0x34
   393a0:	str	r1, [sp, #60]	; 0x3c
   393a4:	blt	39504 <GetDataSlab+0xd688>
   393a8:	ldr	r0, [fp, #8]
   393ac:	ldr	r3, [sp, #44]	; 0x2c
   393b0:	ldr	r1, [sp, #52]	; 0x34
   393b4:	mov	sl, #0
   393b8:	mvn	r5, #15
   393bc:	mov	r2, #0
   393c0:	sub	r7, r0, #4
   393c4:	sub	r8, r0, #12
   393c8:	mov	r0, #1
   393cc:	mov	r6, r3
   393d0:	str	r1, [sp, #60]	; 0x3c
   393d4:	ldr	r1, [ip, r0, lsl #2]
   393d8:	str	r3, [r4, r0, lsl #2]
   393dc:	str	r6, [sp, #48]	; 0x30
   393e0:	mov	r6, sl
   393e4:	add	r6, sl, #1
   393e8:	cmp	r6, #4
   393ec:	sub	lr, r1, #1
   393f0:	ldr	r1, [fp, #8]
   393f4:	str	lr, [r9, r0, lsl #2]
   393f8:	ldr	ip, [r1, r0, lsl #2]
   393fc:	bcs	3940c <GetDataSlab+0xd590>
   39400:	mov	r1, ip
   39404:	mov	r4, r0
   39408:	b	39498 <GetDataSlab+0xd61c>
   3940c:	vmov.i32	q9, #1	; 0x00000001
   39410:	vmov.i32	q10, #1	; 0x00000001
   39414:	vmov.i32	q8, #1	; 0x00000001
   39418:	bic	r1, r6, #3
   3941c:	bic	sl, r0, #3
   39420:	vmov.32	d23[1], ip
   39424:	vmov.32	d18[0], r3
   39428:	vmov.32	d20[0], lr
   3942c:	sub	r4, r0, r1
   39430:	mov	r3, r8
   39434:	vorr	d16, d18, d18
   39438:	vmov.i32	q9, #1	; 0x00000001
   3943c:	vorr	d18, d20, d20
   39440:	vld1.32	{d20-d21}, [r3], r5
   39444:	subs	sl, sl, #4
   39448:	vrev64.32	q12, q10
   3944c:	vext.8	q12, q12, q12, #8
   39450:	vext.8	q11, q11, q12, #12
   39454:	vmul.i32	q9, q9, q12
   39458:	vmul.i32	q8, q11, q8
   3945c:	vorr	q11, q12, q12
   39460:	bne	39440 <GetDataSlab+0xd5c4>
   39464:	vext.8	q11, q9, q8, #8
   39468:	vext.8	q12, q8, q8, #8
   3946c:	cmp	r6, r1
   39470:	vmul.i32	q0, q9, q11
   39474:	vmul.i32	q1, q8, q12
   39478:	vmul.i32	q8, q0, d0[1]
   3947c:	vmul.i32	q9, q1, d2[1]
   39480:	vmov.32	lr, d16[0]
   39484:	vmov.32	r3, d18[0]
   39488:	bne	39494 <GetDataSlab+0xd618>
   3948c:	mov	sl, r6
   39490:	b	394b0 <GetDataSlab+0xd634>
   39494:	vmov.32	r1, d20[0]
   39498:	mov	sl, r6
   3949c:	mul	r3, r1, r3
   394a0:	ldr	r1, [r7, r4, lsl #2]
   394a4:	subs	r4, r4, #1
   394a8:	mul	lr, lr, r1
   394ac:	bne	3949c <GetDataSlab+0xd620>
   394b0:	ldr	r1, [fp, #12]
   394b4:	sub	r4, fp, #176	; 0xb0
   394b8:	sub	r9, fp, #96	; 0x60
   394bc:	ldr	r6, [sp, #48]	; 0x30
   394c0:	add	r8, r8, #4
   394c4:	str	r3, [r4, r0, lsl #2]
   394c8:	str	lr, [r9, r0, lsl #2]
   394cc:	ldr	r1, [r1, r0, lsl #2]
   394d0:	mla	r2, r1, r6, r2
   394d4:	ldr	r1, [fp, #20]
   394d8:	ldr	r6, [sp, #60]	; 0x3c
   394dc:	ldr	r1, [r1, r0, lsl #2]
   394e0:	add	r0, r0, #1
   394e4:	mul	r6, r1, r6
   394e8:	ldr	r1, [fp, #24]
   394ec:	str	r6, [sp, #60]	; 0x3c
   394f0:	mov	r6, r3
   394f4:	mov	r3, ip
   394f8:	ldr	ip, [fp, #16]
   394fc:	cmp	r0, r1
   39500:	bne	393d4 <GetDataSlab+0xd558>
   39504:	ldr	r0, [sp, #56]	; 0x38
   39508:	ldr	r6, [sp, #32]
   3950c:	add	r9, r0, r2, lsl #3
   39510:	cmp	r6, #1
   39514:	bne	46fb8 <GetDataSlab+0x1b13c>
   39518:	ldr	r0, [sp, #60]	; 0x3c
   3951c:	ldr	lr, [fp, #12]
   39520:	ldr	r1, [sp, #52]	; 0x34
   39524:	cmp	r0, #1
   39528:	blt	51aa8 <GetDataSlab+0x25c2c>
   3952c:	ldr	r0, [fp, #20]
   39530:	mov	sl, #0
   39534:	add	r8, r0, #4
   39538:	sub	r0, fp, #136	; 0x88
   3953c:	orr	r7, r0, #4
   39540:	sub	r0, fp, #96	; 0x60
   39544:	orr	r0, r0, #4
   39548:	str	r0, [sp, #48]	; 0x30
   3954c:	lsl	r0, r1, #1
   39550:	str	r0, [sp, #56]	; 0x38
   39554:	ldr	r0, [lr], #4
   39558:	str	r0, [sp, #64]	; 0x40
   3955c:	ldr	r4, [sp, #68]	; 0x44
   39560:	cmp	r1, #1
   39564:	blt	39594 <GetDataSlab+0xd718>
   39568:	ldr	r0, [sp, #64]	; 0x40
   3956c:	ldr	r3, [sp, #52]	; 0x34
   39570:	mov	r6, r4
   39574:	add	r0, r9, r0, lsl #3
   39578:	vldr	d16, [r0]
   3957c:	subs	r3, r3, #1
   39580:	add	r0, r0, #8
   39584:	vcvt.u32.f64	s0, d16
   39588:	vmov	r5, s0
   3958c:	strh	r5, [r6], #2
   39590:	bne	39578 <GetDataSlab+0xd6fc>
   39594:	ldr	r0, [sp, #44]	; 0x2c
   39598:	add	r9, r9, r0, lsl #3
   3959c:	add	r2, r2, r0
   395a0:	ldr	r0, [fp, #24]
   395a4:	cmp	r0, #2
   395a8:	blt	3965c <GetDataSlab+0xd7e0>
   395ac:	mov	r3, #0
   395b0:	mov	r0, r3
   395b4:	ldr	r3, [r7, r3, lsl #2]
   395b8:	add	r3, r3, #1
   395bc:	str	r3, [r7, r0, lsl #2]
   395c0:	ldr	r5, [r8, r0, lsl #2]
   395c4:	sdiv	r6, r3, r5
   395c8:	mls	r3, r6, r5, r3
   395cc:	cmp	r3, #0
   395d0:	bne	3964c <GetDataSlab+0xd7d0>
   395d4:	mov	r1, #0
   395d8:	str	r1, [r7, r0, lsl #2]
   395dc:	sub	r1, fp, #176	; 0xb0
   395e0:	add	r3, r1, r0, lsl #2
   395e4:	ldr	r3, [r3, #4]
   395e8:	sdiv	r5, r2, r3
   395ec:	mls	r6, r5, r3, r2
   395f0:	cmp	r6, #0
   395f4:	beq	39614 <GetDataSlab+0xd798>
   395f8:	ldr	r5, [r1, r0, lsl #2]
   395fc:	ldr	ip, [lr, r0, lsl #2]
   39600:	ldr	r4, [sp, #68]	; 0x44
   39604:	sub	r3, r3, r6
   39608:	mla	r3, ip, r5, r3
   3960c:	add	r2, r3, r2
   39610:	b	39630 <GetDataSlab+0xd7b4>
   39614:	ldr	r3, [lr, r0, lsl #2]
   39618:	cmp	r3, #0
   3961c:	beq	39634 <GetDataSlab+0xd7b8>
   39620:	sub	r1, fp, #176	; 0xb0
   39624:	ldr	r6, [r1, r0, lsl #2]
   39628:	mla	r2, r6, r3, r2
   3962c:	mul	r3, r6, r3
   39630:	add	r9, r9, r3, lsl #3
   39634:	ldr	r6, [fp, #24]
   39638:	add	r3, r0, #1
   3963c:	add	r0, r0, #2
   39640:	cmp	r0, r6
   39644:	blt	395b0 <GetDataSlab+0xd734>
   39648:	b	3965c <GetDataSlab+0xd7e0>
   3964c:	ldr	r1, [sp, #48]	; 0x30
   39650:	ldr	r0, [r1, r0, lsl #2]
   39654:	add	r9, r9, r0, lsl #3
   39658:	add	r2, r0, r2
   3965c:	ldr	r1, [sp, #52]	; 0x34
   39660:	ldr	r0, [sp, #56]	; 0x38
   39664:	ldr	r3, [sp, #60]	; 0x3c
   39668:	add	sl, sl, r1
   3966c:	add	r4, r4, r0
   39670:	mov	r0, #0
   39674:	cmp	sl, r3
   39678:	str	r4, [sp, #68]	; 0x44
   3967c:	blt	3955c <GetDataSlab+0xd6e0>
   39680:	b	2e97c <GetDataSlab+0x2b00>
   39684:	ldr	r0, [ip]
   39688:	mov	sl, r6
   3968c:	mov	r1, #0
   39690:	sub	lr, fp, #176	; 0xb0
   39694:	sub	r5, fp, #96	; 0x60
   39698:	str	r9, [sp, #40]	; 0x28
   3969c:	str	r0, [sp, #24]
   396a0:	sub	r0, r0, #1
   396a4:	str	r0, [fp, #-96]	; 0xffffffa0
   396a8:	ldr	r0, [fp, #8]
   396ac:	ldr	r0, [r0]
   396b0:	str	r0, [fp, #-176]	; 0xffffff50
   396b4:	str	r0, [sp, #36]	; 0x24
   396b8:	ldr	r0, [fp, #24]
   396bc:	ldr	r2, [r6]
   396c0:	cmp	r0, #2
   396c4:	str	r2, [sp, #44]	; 0x2c
   396c8:	str	r2, [sp, #60]	; 0x3c
   396cc:	blt	39824 <GetDataSlab+0xd9a8>
   396d0:	ldr	r0, [fp, #8]
   396d4:	ldr	r2, [sp, #36]	; 0x24
   396d8:	mov	r4, #1
   396dc:	mov	r7, #0
   396e0:	mvn	r6, #15
   396e4:	mov	r1, #0
   396e8:	sub	r3, r0, #4
   396ec:	sub	ip, r0, #12
   396f0:	ldr	r0, [sp, #44]	; 0x2c
   396f4:	mov	r8, r2
   396f8:	str	r0, [sp, #60]	; 0x3c
   396fc:	ldr	r0, [fp, #16]
   39700:	add	r7, r7, #1
   39704:	cmp	r7, #4
   39708:	str	r7, [sp, #48]	; 0x30
   3970c:	ldr	r0, [r0, r4, lsl #2]
   39710:	str	r2, [lr, r4, lsl #2]
   39714:	sub	sl, r0, #1
   39718:	ldr	r0, [fp, #8]
   3971c:	str	sl, [r5, r4, lsl #2]
   39720:	ldr	r9, [r0, r4, lsl #2]
   39724:	str	r9, [sp, #52]	; 0x34
   39728:	bcs	39734 <GetDataSlab+0xd8b8>
   3972c:	mov	r5, r4
   39730:	b	397c4 <GetDataSlab+0xd948>
   39734:	vmov.i32	q9, #1	; 0x00000001
   39738:	vmov.i32	q10, #1	; 0x00000001
   3973c:	vmov.i32	q8, #1	; 0x00000001
   39740:	bic	r0, r7, #3
   39744:	bic	lr, r4, #3
   39748:	vmov.32	d23[1], r9
   3974c:	vmov.32	d18[0], r2
   39750:	vmov.32	d20[0], sl
   39754:	sub	r5, r4, r0
   39758:	mov	r2, ip
   3975c:	vorr	d16, d18, d18
   39760:	vmov.i32	q9, #1	; 0x00000001
   39764:	vorr	d18, d20, d20
   39768:	vld1.32	{d20-d21}, [r2], r6
   3976c:	subs	lr, lr, #4
   39770:	vrev64.32	q12, q10
   39774:	vext.8	q12, q12, q12, #8
   39778:	vext.8	q11, q11, q12, #12
   3977c:	vmul.i32	q9, q9, q12
   39780:	vmul.i32	q8, q11, q8
   39784:	vorr	q11, q12, q12
   39788:	bne	39768 <GetDataSlab+0xd8ec>
   3978c:	vext.8	q11, q9, q8, #8
   39790:	vext.8	q12, q8, q8, #8
   39794:	cmp	r7, r0
   39798:	vmul.i32	q0, q9, q11
   3979c:	vmul.i32	q1, q8, q12
   397a0:	vmul.i32	q8, q0, d0[1]
   397a4:	vmul.i32	q9, q1, d2[1]
   397a8:	vmov.32	sl, d16[0]
   397ac:	vmov.32	r2, d18[0]
   397b0:	bne	397bc <GetDataSlab+0xd940>
   397b4:	sub	lr, fp, #176	; 0xb0
   397b8:	b	397d8 <GetDataSlab+0xd95c>
   397bc:	vmov.32	r9, d20[0]
   397c0:	sub	lr, fp, #176	; 0xb0
   397c4:	mul	r2, r9, r2
   397c8:	ldr	r9, [r3, r5, lsl #2]
   397cc:	subs	r5, r5, #1
   397d0:	mul	sl, sl, r9
   397d4:	bne	397c4 <GetDataSlab+0xd948>
   397d8:	ldr	r0, [fp, #12]
   397dc:	sub	r5, fp, #96	; 0x60
   397e0:	str	r2, [lr, r4, lsl #2]
   397e4:	ldr	r7, [sp, #60]	; 0x3c
   397e8:	add	ip, ip, #4
   397ec:	str	sl, [r5, r4, lsl #2]
   397f0:	ldr	sl, [fp, #20]
   397f4:	ldr	r0, [r0, r4, lsl #2]
   397f8:	mla	r1, r0, r8, r1
   397fc:	ldr	r0, [sl, r4, lsl #2]
   39800:	mov	r8, r2
   39804:	ldr	r2, [sp, #52]	; 0x34
   39808:	add	r4, r4, #1
   3980c:	mul	r7, r0, r7
   39810:	ldr	r0, [fp, #24]
   39814:	str	r7, [sp, #60]	; 0x3c
   39818:	ldr	r7, [sp, #48]	; 0x30
   3981c:	cmp	r4, r0
   39820:	bne	396fc <GetDataSlab+0xd880>
   39824:	ldr	r0, [sp, #56]	; 0x38
   39828:	ldr	r7, [sp, #24]
   3982c:	add	r9, r0, r1, lsl #3
   39830:	cmp	r7, #1
   39834:	bne	47154 <GetDataSlab+0x1b2d8>
   39838:	ldr	r0, [sp, #60]	; 0x3c
   3983c:	ldr	ip, [sp, #68]	; 0x44
   39840:	ldr	r8, [fp, #12]
   39844:	cmp	r0, #1
   39848:	blt	472d8 <GetDataSlab+0x1b45c>
   3984c:	add	lr, sl, #4
   39850:	ldr	sl, [sp, #44]	; 0x2c
   39854:	sub	r0, fp, #136	; 0x88
   39858:	mov	r5, #0
   3985c:	orr	r6, r0, #4
   39860:	sub	r0, fp, #96	; 0x60
   39864:	orr	r0, r0, #4
   39868:	str	r0, [sp, #28]
   3986c:	lsl	r0, sl, #1
   39870:	str	r0, [sp, #52]	; 0x34
   39874:	bic	r0, sl, #1
   39878:	str	r0, [sp, #32]
   3987c:	ldr	r0, [r8], #4
   39880:	str	r0, [sp, #48]	; 0x30
   39884:	cmp	sl, #1
   39888:	blt	398f0 <GetDataSlab+0xda74>
   3988c:	mov	r3, #0
   39890:	beq	398c8 <GetDataSlab+0xda4c>
   39894:	ldr	r0, [sp, #48]	; 0x30
   39898:	ldr	r2, [sp, #32]
   3989c:	mov	r3, ip
   398a0:	add	r0, r9, r0, lsl #3
   398a4:	vld1.64	{d16-d17}, [r0]!
   398a8:	subs	r2, r2, #2
   398ac:	vmovn.i64	d16, q8
   398b0:	vuzp.16	d16, d17
   398b4:	vst1.32	{d16[0]}, [r3]!
   398b8:	bne	398a4 <GetDataSlab+0xda28>
   398bc:	ldr	r3, [sp, #32]
   398c0:	cmp	sl, r3
   398c4:	beq	398f0 <GetDataSlab+0xda74>
   398c8:	ldr	r4, [sp, #48]	; 0x30
   398cc:	sub	r0, sl, r3
   398d0:	add	r2, ip, r3, lsl #1
   398d4:	add	sl, r9, r4, lsl #3
   398d8:	add	r3, sl, r3, lsl #3
   398dc:	ldr	sl, [sp, #44]	; 0x2c
   398e0:	ldrh	r7, [r3], #8
   398e4:	subs	r0, r0, #1
   398e8:	strh	r7, [r2], #2
   398ec:	bne	398e0 <GetDataSlab+0xda64>
   398f0:	ldr	r0, [sp, #36]	; 0x24
   398f4:	add	r9, r9, r0, lsl #3
   398f8:	add	r1, r1, r0
   398fc:	ldr	r0, [fp, #24]
   39900:	cmp	r0, #2
   39904:	blt	399b4 <GetDataSlab+0xdb38>
   39908:	mov	r2, #0
   3990c:	mov	r0, r2
   39910:	ldr	r2, [r6, r2, lsl #2]
   39914:	add	r2, r2, #1
   39918:	str	r2, [r6, r0, lsl #2]
   3991c:	ldr	r3, [lr, r0, lsl #2]
   39920:	sdiv	r7, r2, r3
   39924:	mls	r2, r7, r3, r2
   39928:	cmp	r2, #0
   3992c:	bne	399a4 <GetDataSlab+0xdb28>
   39930:	mov	r2, #0
   39934:	sub	r4, fp, #176	; 0xb0
   39938:	str	r2, [r6, r0, lsl #2]
   3993c:	add	r2, r4, r0, lsl #2
   39940:	ldr	r2, [r2, #4]
   39944:	sdiv	r3, r1, r2
   39948:	mls	r3, r3, r2, r1
   3994c:	cmp	r3, #0
   39950:	beq	3996c <GetDataSlab+0xdaf0>
   39954:	ldr	r7, [r4, r0, lsl #2]
   39958:	ldr	r4, [r8, r0, lsl #2]
   3995c:	sub	r2, r2, r3
   39960:	mla	r2, r4, r7, r2
   39964:	add	r1, r2, r1
   39968:	b	39988 <GetDataSlab+0xdb0c>
   3996c:	ldr	r2, [r8, r0, lsl #2]
   39970:	cmp	r2, #0
   39974:	beq	3998c <GetDataSlab+0xdb10>
   39978:	sub	r3, fp, #176	; 0xb0
   3997c:	ldr	r3, [r3, r0, lsl #2]
   39980:	mla	r1, r3, r2, r1
   39984:	mul	r2, r3, r2
   39988:	add	r9, r9, r2, lsl #3
   3998c:	ldr	r3, [fp, #24]
   39990:	add	r2, r0, #1
   39994:	add	r0, r0, #2
   39998:	cmp	r0, r3
   3999c:	blt	3990c <GetDataSlab+0xda90>
   399a0:	b	399b4 <GetDataSlab+0xdb38>
   399a4:	ldr	r2, [sp, #28]
   399a8:	ldr	r0, [r2, r0, lsl #2]
   399ac:	add	r9, r9, r0, lsl #3
   399b0:	add	r1, r0, r1
   399b4:	ldr	r0, [sp, #52]	; 0x34
   399b8:	add	r5, r5, sl
   399bc:	add	ip, ip, r0
   399c0:	ldr	r0, [sp, #60]	; 0x3c
   399c4:	cmp	r5, r0
   399c8:	blt	39884 <GetDataSlab+0xda08>
   399cc:	b	472d8 <GetDataSlab+0x1b45c>
   399d0:	ldr	r4, [r3]
   399d4:	ldr	r9, [fp, #8]
   399d8:	mov	r5, #0
   399dc:	sub	r3, fp, #176	; 0xb0
   399e0:	sub	sl, fp, #96	; 0x60
   399e4:	sub	r0, r4, #1
   399e8:	str	r0, [fp, #-96]	; 0xffffffa0
   399ec:	ldr	r0, [r9]
   399f0:	str	r0, [fp, #-176]	; 0xffffff50
   399f4:	str	r0, [sp, #52]	; 0x34
   399f8:	ldr	r0, [fp, #24]
   399fc:	ldr	r2, [r6]
   39a00:	cmp	r0, #2
   39a04:	mov	r0, r2
   39a08:	str	r2, [sp, #60]	; 0x3c
   39a0c:	blt	39b7c <GetDataSlab+0xdd00>
   39a10:	ldr	r7, [sp, #52]	; 0x34
   39a14:	sub	r0, r9, #4
   39a18:	sub	r6, r9, #12
   39a1c:	mov	ip, #1
   39a20:	mov	lr, #0
   39a24:	mov	r5, #0
   39a28:	str	r2, [sp, #60]	; 0x3c
   39a2c:	mov	r1, r7
   39a30:	str	r7, [sp, #48]	; 0x30
   39a34:	mov	r1, r2
   39a38:	ldr	r1, [fp, #16]
   39a3c:	add	lr, lr, #1
   39a40:	str	r6, [sp, #44]	; 0x2c
   39a44:	cmp	lr, #4
   39a48:	str	lr, [sp, #40]	; 0x28
   39a4c:	ldr	r1, [r1, ip, lsl #2]
   39a50:	str	r7, [r3, ip, lsl #2]
   39a54:	sub	r8, r1, #1
   39a58:	str	r8, [sl, ip, lsl #2]
   39a5c:	ldr	sl, [r9, ip, lsl #2]
   39a60:	str	sl, [sp, #36]	; 0x24
   39a64:	bcs	39a74 <GetDataSlab+0xdbf8>
   39a68:	mov	r1, sl
   39a6c:	mov	r3, ip
   39a70:	b	39b10 <GetDataSlab+0xdc94>
   39a74:	vmov.i32	q9, #1	; 0x00000001
   39a78:	vmov.i32	q10, #1	; 0x00000001
   39a7c:	vmov.i32	q8, #1	; 0x00000001
   39a80:	bic	r1, lr, #3
   39a84:	bic	r9, ip, #3
   39a88:	vmov.32	d23[1], sl
   39a8c:	vmov.32	d18[0], r7
   39a90:	vmov.32	d20[0], r8
   39a94:	str	r1, [sp, #32]
   39a98:	sub	r3, ip, r1
   39a9c:	mov	r1, r6
   39aa0:	mvn	r7, #15
   39aa4:	vorr	d16, d18, d18
   39aa8:	vmov.i32	q9, #1	; 0x00000001
   39aac:	vorr	d18, d20, d20
   39ab0:	vld1.32	{d20-d21}, [r1], r7
   39ab4:	subs	r9, r9, #4
   39ab8:	vrev64.32	q12, q10
   39abc:	vext.8	q12, q12, q12, #8
   39ac0:	vext.8	q11, q11, q12, #12
   39ac4:	vmul.i32	q9, q9, q12
   39ac8:	vmul.i32	q8, q11, q8
   39acc:	vorr	q11, q12, q12
   39ad0:	bne	39ab0 <GetDataSlab+0xdc34>
   39ad4:	ldr	r1, [sp, #32]
   39ad8:	vext.8	q11, q9, q8, #8
   39adc:	vext.8	q12, q8, q8, #8
   39ae0:	vmul.i32	q0, q9, q11
   39ae4:	vmul.i32	q1, q8, q12
   39ae8:	vmul.i32	q8, q0, d0[1]
   39aec:	vmul.i32	q9, q1, d2[1]
   39af0:	vmov.32	r8, d16[0]
   39af4:	vmov.32	r7, d18[0]
   39af8:	cmp	lr, r1
   39afc:	bne	39b08 <GetDataSlab+0xdc8c>
   39b00:	ldr	r9, [fp, #8]
   39b04:	b	39b24 <GetDataSlab+0xdca8>
   39b08:	ldr	r9, [fp, #8]
   39b0c:	vmov.32	r1, d20[0]
   39b10:	mul	r7, r1, r7
   39b14:	ldr	r1, [r0, r3, lsl #2]
   39b18:	subs	r3, r3, #1
   39b1c:	mul	r8, r8, r1
   39b20:	bne	39b10 <GetDataSlab+0xdc94>
   39b24:	sub	sl, fp, #96	; 0x60
   39b28:	sub	r3, fp, #176	; 0xb0
   39b2c:	ldr	r6, [sp, #48]	; 0x30
   39b30:	ldr	lr, [sp, #60]	; 0x3c
   39b34:	str	r7, [sp, #48]	; 0x30
   39b38:	str	r8, [sl, ip, lsl #2]
   39b3c:	ldr	r8, [fp, #12]
   39b40:	str	r7, [r3, ip, lsl #2]
   39b44:	ldr	r7, [sp, #36]	; 0x24
   39b48:	ldr	r1, [r8, ip, lsl #2]
   39b4c:	mla	r5, r1, r6, r5
   39b50:	ldr	r1, [fp, #20]
   39b54:	ldr	r6, [sp, #44]	; 0x2c
   39b58:	ldr	r1, [r1, ip, lsl #2]
   39b5c:	add	ip, ip, #1
   39b60:	add	r6, r6, #4
   39b64:	mul	lr, r1, lr
   39b68:	ldr	r1, [fp, #24]
   39b6c:	str	lr, [sp, #60]	; 0x3c
   39b70:	ldr	lr, [sp, #40]	; 0x28
   39b74:	cmp	ip, r1
   39b78:	bne	39a38 <GetDataSlab+0xdbbc>
   39b7c:	ldr	r0, [sp, #56]	; 0x38
   39b80:	cmp	r4, #1
   39b84:	add	sl, r0, r5
   39b88:	bne	47650 <GetDataSlab+0x1b7d4>
   39b8c:	ldr	r0, [sp, #60]	; 0x3c
   39b90:	cmp	r0, #1
   39b94:	blt	51abc <GetDataSlab+0x25c40>
   39b98:	ldr	r0, [fp, #20]
   39b9c:	mov	r9, r8
   39ba0:	mov	r8, #0
   39ba4:	add	ip, r0, #4
   39ba8:	sub	r0, fp, #136	; 0x88
   39bac:	orr	r7, r0, #4
   39bb0:	sub	r0, fp, #96	; 0x60
   39bb4:	orr	r0, r0, #4
   39bb8:	str	r0, [sp, #48]	; 0x30
   39bbc:	ldr	r0, [r9], #4
   39bc0:	str	r0, [sp, #56]	; 0x38
   39bc4:	ldr	r6, [sp, #56]	; 0x38
   39bc8:	ldr	r1, [sp, #52]	; 0x34
   39bcc:	cmp	r2, #1
   39bd0:	add	r0, r6, r5
   39bd4:	add	r3, sl, r6
   39bd8:	blt	39c14 <GetDataSlab+0xdd98>
   39bdc:	ldr	r1, [sp, #68]	; 0x44
   39be0:	ldr	r6, [fp, #20]
   39be4:	mov	r5, #0
   39be8:	add	r1, r1, r8, lsl #2
   39bec:	ldrb	r2, [r3, r5]
   39bf0:	str	r2, [r1, r5, lsl #2]
   39bf4:	add	r5, r5, #1
   39bf8:	ldr	r2, [r6]
   39bfc:	cmp	r5, r2
   39c00:	blt	39bec <GetDataSlab+0xdd70>
   39c04:	ldr	r1, [fp, #12]
   39c08:	ldr	r6, [r1]
   39c0c:	ldr	r1, [fp, #8]
   39c10:	ldr	r1, [r1]
   39c14:	str	r1, [sp, #52]	; 0x34
   39c18:	sub	r1, r1, r6
   39c1c:	str	r6, [sp, #56]	; 0x38
   39c20:	add	r5, r0, r1
   39c24:	ldr	r0, [fp, #24]
   39c28:	add	sl, r3, r1
   39c2c:	cmp	r0, #2
   39c30:	blt	39cd8 <GetDataSlab+0xde5c>
   39c34:	mov	r1, #0
   39c38:	mov	r0, r1
   39c3c:	ldr	r1, [r7, r1, lsl #2]
   39c40:	add	r1, r1, #1
   39c44:	str	r1, [r7, r0, lsl #2]
   39c48:	ldr	r6, [ip, r0, lsl #2]
   39c4c:	sdiv	lr, r1, r6
   39c50:	mls	r1, lr, r6, r1
   39c54:	cmp	r1, #0
   39c58:	bne	39cc8 <GetDataSlab+0xde4c>
   39c5c:	mov	r1, #0
   39c60:	sub	r3, fp, #176	; 0xb0
   39c64:	str	r1, [r7, r0, lsl #2]
   39c68:	add	r1, r3, r0, lsl #2
   39c6c:	ldr	r1, [r1, #4]
   39c70:	sdiv	r6, r5, r1
   39c74:	mls	r6, r6, r1, r5
   39c78:	cmp	r6, #0
   39c7c:	beq	39c9c <GetDataSlab+0xde20>
   39c80:	ldr	r4, [r3, r0, lsl #2]
   39c84:	ldr	r3, [r9, r0, lsl #2]
   39c88:	sub	r1, r1, r6
   39c8c:	mla	r1, r3, r4, r1
   39c90:	add	r5, r1, r5
   39c94:	add	sl, sl, r1
   39c98:	b	39cb0 <GetDataSlab+0xde34>
   39c9c:	ldr	r1, [r9, r0, lsl #2]
   39ca0:	cmp	r1, #0
   39ca4:	ldrne	r3, [r3, r0, lsl #2]
   39ca8:	mlane	r5, r3, r1, r5
   39cac:	mlane	sl, r3, r1, sl
   39cb0:	ldr	r3, [fp, #24]
   39cb4:	add	r1, r0, #1
   39cb8:	add	r0, r0, #2
   39cbc:	cmp	r0, r3
   39cc0:	blt	39c38 <GetDataSlab+0xddbc>
   39cc4:	b	39cd8 <GetDataSlab+0xde5c>
   39cc8:	ldr	r1, [sp, #48]	; 0x30
   39ccc:	ldr	r0, [r1, r0, lsl #2]
   39cd0:	add	sl, sl, r0
   39cd4:	add	r5, r0, r5
   39cd8:	ldr	r1, [sp, #60]	; 0x3c
   39cdc:	add	r8, r2, r8
   39ce0:	mov	r0, #0
   39ce4:	cmp	r8, r1
   39ce8:	blt	39bc4 <GetDataSlab+0xdd48>
   39cec:	b	2e97c <GetDataSlab+0x2b00>
   39cf0:	ldr	r4, [r3]
   39cf4:	ldr	r9, [fp, #8]
   39cf8:	mov	r5, #0
   39cfc:	sub	r3, fp, #176	; 0xb0
   39d00:	sub	sl, fp, #96	; 0x60
   39d04:	sub	r0, r4, #1
   39d08:	str	r0, [fp, #-96]	; 0xffffffa0
   39d0c:	ldr	r0, [r9]
   39d10:	str	r0, [fp, #-176]	; 0xffffff50
   39d14:	str	r0, [sp, #52]	; 0x34
   39d18:	ldr	r0, [fp, #24]
   39d1c:	ldr	r2, [r6]
   39d20:	cmp	r0, #2
   39d24:	mov	r0, r2
   39d28:	str	r2, [sp, #60]	; 0x3c
   39d2c:	blt	39e9c <GetDataSlab+0xe020>
   39d30:	ldr	r7, [sp, #52]	; 0x34
   39d34:	sub	r0, r9, #4
   39d38:	sub	r6, r9, #12
   39d3c:	mov	ip, #1
   39d40:	mov	lr, #0
   39d44:	mov	r5, #0
   39d48:	str	r2, [sp, #60]	; 0x3c
   39d4c:	mov	r1, r7
   39d50:	str	r7, [sp, #48]	; 0x30
   39d54:	mov	r1, r2
   39d58:	ldr	r1, [fp, #16]
   39d5c:	add	lr, lr, #1
   39d60:	str	r6, [sp, #44]	; 0x2c
   39d64:	cmp	lr, #4
   39d68:	str	lr, [sp, #40]	; 0x28
   39d6c:	ldr	r1, [r1, ip, lsl #2]
   39d70:	str	r7, [r3, ip, lsl #2]
   39d74:	sub	r8, r1, #1
   39d78:	str	r8, [sl, ip, lsl #2]
   39d7c:	ldr	sl, [r9, ip, lsl #2]
   39d80:	str	sl, [sp, #36]	; 0x24
   39d84:	bcs	39d94 <GetDataSlab+0xdf18>
   39d88:	mov	r1, sl
   39d8c:	mov	r3, ip
   39d90:	b	39e30 <GetDataSlab+0xdfb4>
   39d94:	vmov.i32	q9, #1	; 0x00000001
   39d98:	vmov.i32	q10, #1	; 0x00000001
   39d9c:	vmov.i32	q8, #1	; 0x00000001
   39da0:	bic	r1, lr, #3
   39da4:	bic	r9, ip, #3
   39da8:	vmov.32	d23[1], sl
   39dac:	vmov.32	d18[0], r7
   39db0:	vmov.32	d20[0], r8
   39db4:	str	r1, [sp, #32]
   39db8:	sub	r3, ip, r1
   39dbc:	mov	r1, r6
   39dc0:	mvn	r7, #15
   39dc4:	vorr	d16, d18, d18
   39dc8:	vmov.i32	q9, #1	; 0x00000001
   39dcc:	vorr	d18, d20, d20
   39dd0:	vld1.32	{d20-d21}, [r1], r7
   39dd4:	subs	r9, r9, #4
   39dd8:	vrev64.32	q12, q10
   39ddc:	vext.8	q12, q12, q12, #8
   39de0:	vext.8	q11, q11, q12, #12
   39de4:	vmul.i32	q9, q9, q12
   39de8:	vmul.i32	q8, q11, q8
   39dec:	vorr	q11, q12, q12
   39df0:	bne	39dd0 <GetDataSlab+0xdf54>
   39df4:	ldr	r1, [sp, #32]
   39df8:	vext.8	q11, q9, q8, #8
   39dfc:	vext.8	q12, q8, q8, #8
   39e00:	vmul.i32	q0, q9, q11
   39e04:	vmul.i32	q1, q8, q12
   39e08:	vmul.i32	q8, q0, d0[1]
   39e0c:	vmul.i32	q9, q1, d2[1]
   39e10:	vmov.32	r8, d16[0]
   39e14:	vmov.32	r7, d18[0]
   39e18:	cmp	lr, r1
   39e1c:	bne	39e28 <GetDataSlab+0xdfac>
   39e20:	ldr	r9, [fp, #8]
   39e24:	b	39e44 <GetDataSlab+0xdfc8>
   39e28:	ldr	r9, [fp, #8]
   39e2c:	vmov.32	r1, d20[0]
   39e30:	mul	r7, r1, r7
   39e34:	ldr	r1, [r0, r3, lsl #2]
   39e38:	subs	r3, r3, #1
   39e3c:	mul	r8, r8, r1
   39e40:	bne	39e30 <GetDataSlab+0xdfb4>
   39e44:	sub	sl, fp, #96	; 0x60
   39e48:	sub	r3, fp, #176	; 0xb0
   39e4c:	ldr	r6, [sp, #48]	; 0x30
   39e50:	ldr	lr, [sp, #60]	; 0x3c
   39e54:	str	r7, [sp, #48]	; 0x30
   39e58:	str	r8, [sl, ip, lsl #2]
   39e5c:	ldr	r8, [fp, #12]
   39e60:	str	r7, [r3, ip, lsl #2]
   39e64:	ldr	r7, [sp, #36]	; 0x24
   39e68:	ldr	r1, [r8, ip, lsl #2]
   39e6c:	mla	r5, r1, r6, r5
   39e70:	ldr	r1, [fp, #20]
   39e74:	ldr	r6, [sp, #44]	; 0x2c
   39e78:	ldr	r1, [r1, ip, lsl #2]
   39e7c:	add	ip, ip, #1
   39e80:	add	r6, r6, #4
   39e84:	mul	lr, r1, lr
   39e88:	ldr	r1, [fp, #24]
   39e8c:	str	lr, [sp, #60]	; 0x3c
   39e90:	ldr	lr, [sp, #40]	; 0x28
   39e94:	cmp	ip, r1
   39e98:	bne	39d58 <GetDataSlab+0xdedc>
   39e9c:	ldr	r0, [sp, #56]	; 0x38
   39ea0:	cmp	r4, #1
   39ea4:	add	sl, r0, r5, lsl #1
   39ea8:	bne	477e8 <GetDataSlab+0x1b96c>
   39eac:	ldr	r0, [sp, #60]	; 0x3c
   39eb0:	cmp	r0, #1
   39eb4:	blt	51ad0 <GetDataSlab+0x25c54>
   39eb8:	ldr	r0, [fp, #20]
   39ebc:	mov	r9, r8
   39ec0:	mov	lr, #0
   39ec4:	add	ip, r0, #4
   39ec8:	sub	r0, fp, #136	; 0x88
   39ecc:	orr	r7, r0, #4
   39ed0:	sub	r0, fp, #96	; 0x60
   39ed4:	orr	r0, r0, #4
   39ed8:	str	r0, [sp, #48]	; 0x30
   39edc:	ldr	r0, [r9], #4
   39ee0:	str	r0, [sp, #56]	; 0x38
   39ee4:	ldr	r3, [sp, #56]	; 0x38
   39ee8:	ldr	r1, [sp, #52]	; 0x34
   39eec:	cmp	r2, #1
   39ef0:	add	r8, r3, r5
   39ef4:	add	r0, sl, r3, lsl #1
   39ef8:	blt	39f38 <GetDataSlab+0xe0bc>
   39efc:	ldr	r1, [sp, #68]	; 0x44
   39f00:	ldr	r4, [fp, #20]
   39f04:	mov	r3, r0
   39f08:	add	r5, r1, lr, lsl #2
   39f0c:	mov	r1, #0
   39f10:	ldrsh	r2, [r3], #2
   39f14:	str	r2, [r5, r1, lsl #2]
   39f18:	add	r1, r1, #1
   39f1c:	ldr	r2, [r4]
   39f20:	cmp	r1, r2
   39f24:	blt	39f10 <GetDataSlab+0xe094>
   39f28:	ldr	r1, [fp, #12]
   39f2c:	ldr	r3, [r1]
   39f30:	ldr	r1, [fp, #8]
   39f34:	ldr	r1, [r1]
   39f38:	str	r1, [sp, #52]	; 0x34
   39f3c:	sub	r1, r1, r3
   39f40:	str	r3, [sp, #56]	; 0x38
   39f44:	add	sl, r0, r1, lsl #1
   39f48:	ldr	r0, [fp, #24]
   39f4c:	add	r5, r8, r1
   39f50:	cmp	r0, #2
   39f54:	blt	3a004 <GetDataSlab+0xe188>
   39f58:	mov	r1, #0
   39f5c:	mov	r8, #0
   39f60:	mov	r0, r1
   39f64:	ldr	r1, [r7, r1, lsl #2]
   39f68:	add	r1, r1, #1
   39f6c:	str	r1, [r7, r0, lsl #2]
   39f70:	ldr	r6, [ip, r0, lsl #2]
   39f74:	sdiv	r4, r1, r6
   39f78:	mls	r1, r4, r6, r1
   39f7c:	cmp	r1, #0
   39f80:	bne	39ff4 <GetDataSlab+0xe178>
   39f84:	sub	r3, fp, #176	; 0xb0
   39f88:	str	r8, [r7, r0, lsl #2]
   39f8c:	add	r1, r3, r0, lsl #2
   39f90:	ldr	r1, [r1, #4]
   39f94:	sdiv	r4, r5, r1
   39f98:	mls	r6, r4, r1, r5
   39f9c:	cmp	r6, #0
   39fa0:	beq	39fbc <GetDataSlab+0xe140>
   39fa4:	ldr	r4, [r3, r0, lsl #2]
   39fa8:	ldr	r3, [r9, r0, lsl #2]
   39fac:	sub	r1, r1, r6
   39fb0:	mla	r1, r3, r4, r1
   39fb4:	add	r5, r1, r5
   39fb8:	b	39fd8 <GetDataSlab+0xe15c>
   39fbc:	ldr	r1, [r9, r0, lsl #2]
   39fc0:	cmp	r1, #0
   39fc4:	beq	39fdc <GetDataSlab+0xe160>
   39fc8:	sub	r3, fp, #176	; 0xb0
   39fcc:	ldr	r3, [r3, r0, lsl #2]
   39fd0:	mla	r5, r3, r1, r5
   39fd4:	mul	r1, r3, r1
   39fd8:	add	sl, sl, r1, lsl #1
   39fdc:	ldr	r3, [fp, #24]
   39fe0:	add	r1, r0, #1
   39fe4:	add	r0, r0, #2
   39fe8:	cmp	r0, r3
   39fec:	blt	39f60 <GetDataSlab+0xe0e4>
   39ff0:	b	3a004 <GetDataSlab+0xe188>
   39ff4:	ldr	r1, [sp, #48]	; 0x30
   39ff8:	ldr	r0, [r1, r0, lsl #2]
   39ffc:	add	sl, sl, r0, lsl #1
   3a000:	add	r5, r0, r5
   3a004:	ldr	r1, [sp, #60]	; 0x3c
   3a008:	add	lr, r2, lr
   3a00c:	mov	r0, #0
   3a010:	cmp	lr, r1
   3a014:	blt	39ee4 <GetDataSlab+0xe068>
   3a018:	b	2e97c <GetDataSlab+0x2b00>
   3a01c:	ldr	r4, [r3]
   3a020:	ldr	r9, [fp, #8]
   3a024:	mov	r5, #0
   3a028:	sub	r3, fp, #176	; 0xb0
   3a02c:	sub	sl, fp, #96	; 0x60
   3a030:	sub	r0, r4, #1
   3a034:	str	r0, [fp, #-96]	; 0xffffffa0
   3a038:	ldr	r0, [r9]
   3a03c:	str	r0, [fp, #-176]	; 0xffffff50
   3a040:	str	r0, [sp, #52]	; 0x34
   3a044:	ldr	r0, [fp, #24]
   3a048:	ldr	r2, [r6]
   3a04c:	cmp	r0, #2
   3a050:	mov	r0, r2
   3a054:	str	r2, [sp, #60]	; 0x3c
   3a058:	blt	3a1c8 <GetDataSlab+0xe34c>
   3a05c:	ldr	r7, [sp, #52]	; 0x34
   3a060:	sub	r0, r9, #4
   3a064:	sub	r6, r9, #12
   3a068:	mov	ip, #1
   3a06c:	mov	lr, #0
   3a070:	mov	r5, #0
   3a074:	str	r2, [sp, #60]	; 0x3c
   3a078:	mov	r1, r7
   3a07c:	str	r7, [sp, #48]	; 0x30
   3a080:	mov	r1, r2
   3a084:	ldr	r1, [fp, #16]
   3a088:	add	lr, lr, #1
   3a08c:	str	r6, [sp, #44]	; 0x2c
   3a090:	cmp	lr, #4
   3a094:	str	lr, [sp, #40]	; 0x28
   3a098:	ldr	r1, [r1, ip, lsl #2]
   3a09c:	str	r7, [r3, ip, lsl #2]
   3a0a0:	sub	r8, r1, #1
   3a0a4:	str	r8, [sl, ip, lsl #2]
   3a0a8:	ldr	sl, [r9, ip, lsl #2]
   3a0ac:	str	sl, [sp, #36]	; 0x24
   3a0b0:	bcs	3a0c0 <GetDataSlab+0xe244>
   3a0b4:	mov	r1, sl
   3a0b8:	mov	r3, ip
   3a0bc:	b	3a15c <GetDataSlab+0xe2e0>
   3a0c0:	vmov.i32	q9, #1	; 0x00000001
   3a0c4:	vmov.i32	q10, #1	; 0x00000001
   3a0c8:	vmov.i32	q8, #1	; 0x00000001
   3a0cc:	bic	r1, lr, #3
   3a0d0:	bic	r9, ip, #3
   3a0d4:	vmov.32	d23[1], sl
   3a0d8:	vmov.32	d18[0], r7
   3a0dc:	vmov.32	d20[0], r8
   3a0e0:	str	r1, [sp, #32]
   3a0e4:	sub	r3, ip, r1
   3a0e8:	mov	r1, r6
   3a0ec:	mvn	r7, #15
   3a0f0:	vorr	d16, d18, d18
   3a0f4:	vmov.i32	q9, #1	; 0x00000001
   3a0f8:	vorr	d18, d20, d20
   3a0fc:	vld1.32	{d20-d21}, [r1], r7
   3a100:	subs	r9, r9, #4
   3a104:	vrev64.32	q12, q10
   3a108:	vext.8	q12, q12, q12, #8
   3a10c:	vext.8	q11, q11, q12, #12
   3a110:	vmul.i32	q9, q9, q12
   3a114:	vmul.i32	q8, q11, q8
   3a118:	vorr	q11, q12, q12
   3a11c:	bne	3a0fc <GetDataSlab+0xe280>
   3a120:	ldr	r1, [sp, #32]
   3a124:	vext.8	q11, q9, q8, #8
   3a128:	vext.8	q12, q8, q8, #8
   3a12c:	vmul.i32	q0, q9, q11
   3a130:	vmul.i32	q1, q8, q12
   3a134:	vmul.i32	q8, q0, d0[1]
   3a138:	vmul.i32	q9, q1, d2[1]
   3a13c:	vmov.32	r8, d16[0]
   3a140:	vmov.32	r7, d18[0]
   3a144:	cmp	lr, r1
   3a148:	bne	3a154 <GetDataSlab+0xe2d8>
   3a14c:	ldr	r9, [fp, #8]
   3a150:	b	3a170 <GetDataSlab+0xe2f4>
   3a154:	ldr	r9, [fp, #8]
   3a158:	vmov.32	r1, d20[0]
   3a15c:	mul	r7, r1, r7
   3a160:	ldr	r1, [r0, r3, lsl #2]
   3a164:	subs	r3, r3, #1
   3a168:	mul	r8, r8, r1
   3a16c:	bne	3a15c <GetDataSlab+0xe2e0>
   3a170:	sub	sl, fp, #96	; 0x60
   3a174:	sub	r3, fp, #176	; 0xb0
   3a178:	ldr	r6, [sp, #48]	; 0x30
   3a17c:	ldr	lr, [sp, #60]	; 0x3c
   3a180:	str	r7, [sp, #48]	; 0x30
   3a184:	str	r8, [sl, ip, lsl #2]
   3a188:	ldr	r8, [fp, #12]
   3a18c:	str	r7, [r3, ip, lsl #2]
   3a190:	ldr	r7, [sp, #36]	; 0x24
   3a194:	ldr	r1, [r8, ip, lsl #2]
   3a198:	mla	r5, r1, r6, r5
   3a19c:	ldr	r1, [fp, #20]
   3a1a0:	ldr	r6, [sp, #44]	; 0x2c
   3a1a4:	ldr	r1, [r1, ip, lsl #2]
   3a1a8:	add	ip, ip, #1
   3a1ac:	add	r6, r6, #4
   3a1b0:	mul	lr, r1, lr
   3a1b4:	ldr	r1, [fp, #24]
   3a1b8:	str	lr, [sp, #60]	; 0x3c
   3a1bc:	ldr	lr, [sp, #40]	; 0x28
   3a1c0:	cmp	ip, r1
   3a1c4:	bne	3a084 <GetDataSlab+0xe208>
   3a1c8:	ldr	r0, [sp, #56]	; 0x38
   3a1cc:	cmp	r4, #1
   3a1d0:	add	sl, r0, r5, lsl #1
   3a1d4:	bne	47984 <GetDataSlab+0x1bb08>
   3a1d8:	ldr	r0, [sp, #60]	; 0x3c
   3a1dc:	cmp	r0, #1
   3a1e0:	blt	51ae4 <GetDataSlab+0x25c68>
   3a1e4:	ldr	r0, [fp, #20]
   3a1e8:	mov	r9, r8
   3a1ec:	mov	lr, #0
   3a1f0:	add	ip, r0, #4
   3a1f4:	sub	r0, fp, #136	; 0x88
   3a1f8:	orr	r7, r0, #4
   3a1fc:	sub	r0, fp, #96	; 0x60
   3a200:	orr	r0, r0, #4
   3a204:	str	r0, [sp, #48]	; 0x30
   3a208:	ldr	r0, [r9], #4
   3a20c:	str	r0, [sp, #56]	; 0x38
   3a210:	ldr	r3, [sp, #56]	; 0x38
   3a214:	ldr	r1, [sp, #52]	; 0x34
   3a218:	cmp	r2, #1
   3a21c:	add	r8, r3, r5
   3a220:	add	r0, sl, r3, lsl #1
   3a224:	blt	3a264 <GetDataSlab+0xe3e8>
   3a228:	ldr	r1, [sp, #68]	; 0x44
   3a22c:	ldr	r4, [fp, #20]
   3a230:	mov	r3, r0
   3a234:	add	r5, r1, lr, lsl #2
   3a238:	mov	r1, #0
   3a23c:	ldrh	r2, [r3], #2
   3a240:	str	r2, [r5, r1, lsl #2]
   3a244:	add	r1, r1, #1
   3a248:	ldr	r2, [r4]
   3a24c:	cmp	r1, r2
   3a250:	blt	3a23c <GetDataSlab+0xe3c0>
   3a254:	ldr	r1, [fp, #12]
   3a258:	ldr	r3, [r1]
   3a25c:	ldr	r1, [fp, #8]
   3a260:	ldr	r1, [r1]
   3a264:	str	r1, [sp, #52]	; 0x34
   3a268:	sub	r1, r1, r3
   3a26c:	str	r3, [sp, #56]	; 0x38
   3a270:	add	sl, r0, r1, lsl #1
   3a274:	ldr	r0, [fp, #24]
   3a278:	add	r5, r8, r1
   3a27c:	cmp	r0, #2
   3a280:	blt	3a330 <GetDataSlab+0xe4b4>
   3a284:	mov	r1, #0
   3a288:	mov	r8, #0
   3a28c:	mov	r0, r1
   3a290:	ldr	r1, [r7, r1, lsl #2]
   3a294:	add	r1, r1, #1
   3a298:	str	r1, [r7, r0, lsl #2]
   3a29c:	ldr	r6, [ip, r0, lsl #2]
   3a2a0:	sdiv	r4, r1, r6
   3a2a4:	mls	r1, r4, r6, r1
   3a2a8:	cmp	r1, #0
   3a2ac:	bne	3a320 <GetDataSlab+0xe4a4>
   3a2b0:	sub	r3, fp, #176	; 0xb0
   3a2b4:	str	r8, [r7, r0, lsl #2]
   3a2b8:	add	r1, r3, r0, lsl #2
   3a2bc:	ldr	r1, [r1, #4]
   3a2c0:	sdiv	r4, r5, r1
   3a2c4:	mls	r6, r4, r1, r5
   3a2c8:	cmp	r6, #0
   3a2cc:	beq	3a2e8 <GetDataSlab+0xe46c>
   3a2d0:	ldr	r4, [r3, r0, lsl #2]
   3a2d4:	ldr	r3, [r9, r0, lsl #2]
   3a2d8:	sub	r1, r1, r6
   3a2dc:	mla	r1, r3, r4, r1
   3a2e0:	add	r5, r1, r5
   3a2e4:	b	3a304 <GetDataSlab+0xe488>
   3a2e8:	ldr	r1, [r9, r0, lsl #2]
   3a2ec:	cmp	r1, #0
   3a2f0:	beq	3a308 <GetDataSlab+0xe48c>
   3a2f4:	sub	r3, fp, #176	; 0xb0
   3a2f8:	ldr	r3, [r3, r0, lsl #2]
   3a2fc:	mla	r5, r3, r1, r5
   3a300:	mul	r1, r3, r1
   3a304:	add	sl, sl, r1, lsl #1
   3a308:	ldr	r3, [fp, #24]
   3a30c:	add	r1, r0, #1
   3a310:	add	r0, r0, #2
   3a314:	cmp	r0, r3
   3a318:	blt	3a28c <GetDataSlab+0xe410>
   3a31c:	b	3a330 <GetDataSlab+0xe4b4>
   3a320:	ldr	r1, [sp, #48]	; 0x30
   3a324:	ldr	r0, [r1, r0, lsl #2]
   3a328:	add	sl, sl, r0, lsl #1
   3a32c:	add	r5, r0, r5
   3a330:	ldr	r1, [sp, #60]	; 0x3c
   3a334:	add	lr, r2, lr
   3a338:	mov	r0, #0
   3a33c:	cmp	lr, r1
   3a340:	blt	3a210 <GetDataSlab+0xe394>
   3a344:	b	2e97c <GetDataSlab+0x2b00>
   3a348:	ldr	r4, [r3]
   3a34c:	ldr	r9, [fp, #8]
   3a350:	mov	r5, #0
   3a354:	sub	r3, fp, #176	; 0xb0
   3a358:	sub	sl, fp, #96	; 0x60
   3a35c:	sub	r0, r4, #1
   3a360:	str	r0, [fp, #-96]	; 0xffffffa0
   3a364:	ldr	r0, [r9]
   3a368:	str	r0, [fp, #-176]	; 0xffffff50
   3a36c:	str	r0, [sp, #52]	; 0x34
   3a370:	ldr	r0, [fp, #24]
   3a374:	ldr	r2, [r6]
   3a378:	cmp	r0, #2
   3a37c:	mov	r0, r2
   3a380:	str	r2, [sp, #60]	; 0x3c
   3a384:	blt	3a4f4 <GetDataSlab+0xe678>
   3a388:	ldr	r7, [sp, #52]	; 0x34
   3a38c:	sub	r0, r9, #4
   3a390:	sub	r6, r9, #12
   3a394:	mov	ip, #1
   3a398:	mov	lr, #0
   3a39c:	mov	r5, #0
   3a3a0:	str	r2, [sp, #60]	; 0x3c
   3a3a4:	mov	r1, r7
   3a3a8:	str	r7, [sp, #48]	; 0x30
   3a3ac:	mov	r1, r2
   3a3b0:	ldr	r1, [fp, #16]
   3a3b4:	add	lr, lr, #1
   3a3b8:	str	r6, [sp, #44]	; 0x2c
   3a3bc:	cmp	lr, #4
   3a3c0:	str	lr, [sp, #40]	; 0x28
   3a3c4:	ldr	r1, [r1, ip, lsl #2]
   3a3c8:	str	r7, [r3, ip, lsl #2]
   3a3cc:	sub	r8, r1, #1
   3a3d0:	str	r8, [sl, ip, lsl #2]
   3a3d4:	ldr	sl, [r9, ip, lsl #2]
   3a3d8:	str	sl, [sp, #36]	; 0x24
   3a3dc:	bcs	3a3ec <GetDataSlab+0xe570>
   3a3e0:	mov	r1, sl
   3a3e4:	mov	r3, ip
   3a3e8:	b	3a488 <GetDataSlab+0xe60c>
   3a3ec:	vmov.i32	q9, #1	; 0x00000001
   3a3f0:	vmov.i32	q10, #1	; 0x00000001
   3a3f4:	vmov.i32	q8, #1	; 0x00000001
   3a3f8:	bic	r1, lr, #3
   3a3fc:	bic	r9, ip, #3
   3a400:	vmov.32	d23[1], sl
   3a404:	vmov.32	d18[0], r7
   3a408:	vmov.32	d20[0], r8
   3a40c:	str	r1, [sp, #32]
   3a410:	sub	r3, ip, r1
   3a414:	mov	r1, r6
   3a418:	mvn	r7, #15
   3a41c:	vorr	d16, d18, d18
   3a420:	vmov.i32	q9, #1	; 0x00000001
   3a424:	vorr	d18, d20, d20
   3a428:	vld1.32	{d20-d21}, [r1], r7
   3a42c:	subs	r9, r9, #4
   3a430:	vrev64.32	q12, q10
   3a434:	vext.8	q12, q12, q12, #8
   3a438:	vext.8	q11, q11, q12, #12
   3a43c:	vmul.i32	q9, q9, q12
   3a440:	vmul.i32	q8, q11, q8
   3a444:	vorr	q11, q12, q12
   3a448:	bne	3a428 <GetDataSlab+0xe5ac>
   3a44c:	ldr	r1, [sp, #32]
   3a450:	vext.8	q11, q9, q8, #8
   3a454:	vext.8	q12, q8, q8, #8
   3a458:	vmul.i32	q0, q9, q11
   3a45c:	vmul.i32	q1, q8, q12
   3a460:	vmul.i32	q8, q0, d0[1]
   3a464:	vmul.i32	q9, q1, d2[1]
   3a468:	vmov.32	r8, d16[0]
   3a46c:	vmov.32	r7, d18[0]
   3a470:	cmp	lr, r1
   3a474:	bne	3a480 <GetDataSlab+0xe604>
   3a478:	ldr	r9, [fp, #8]
   3a47c:	b	3a49c <GetDataSlab+0xe620>
   3a480:	ldr	r9, [fp, #8]
   3a484:	vmov.32	r1, d20[0]
   3a488:	mul	r7, r1, r7
   3a48c:	ldr	r1, [r0, r3, lsl #2]
   3a490:	subs	r3, r3, #1
   3a494:	mul	r8, r8, r1
   3a498:	bne	3a488 <GetDataSlab+0xe60c>
   3a49c:	sub	sl, fp, #96	; 0x60
   3a4a0:	sub	r3, fp, #176	; 0xb0
   3a4a4:	ldr	r6, [sp, #48]	; 0x30
   3a4a8:	ldr	lr, [sp, #60]	; 0x3c
   3a4ac:	str	r7, [sp, #48]	; 0x30
   3a4b0:	str	r8, [sl, ip, lsl #2]
   3a4b4:	ldr	r8, [fp, #12]
   3a4b8:	str	r7, [r3, ip, lsl #2]
   3a4bc:	ldr	r7, [sp, #36]	; 0x24
   3a4c0:	ldr	r1, [r8, ip, lsl #2]
   3a4c4:	mla	r5, r1, r6, r5
   3a4c8:	ldr	r1, [fp, #20]
   3a4cc:	ldr	r6, [sp, #44]	; 0x2c
   3a4d0:	ldr	r1, [r1, ip, lsl #2]
   3a4d4:	add	ip, ip, #1
   3a4d8:	add	r6, r6, #4
   3a4dc:	mul	lr, r1, lr
   3a4e0:	ldr	r1, [fp, #24]
   3a4e4:	str	lr, [sp, #60]	; 0x3c
   3a4e8:	ldr	lr, [sp, #40]	; 0x28
   3a4ec:	cmp	ip, r1
   3a4f0:	bne	3a3b0 <GetDataSlab+0xe534>
   3a4f4:	ldr	r0, [sp, #56]	; 0x38
   3a4f8:	cmp	r4, #1
   3a4fc:	add	sl, r0, r5, lsl #2
   3a500:	bne	47b20 <GetDataSlab+0x1bca4>
   3a504:	ldr	r0, [sp, #60]	; 0x3c
   3a508:	cmp	r0, #1
   3a50c:	blt	51af8 <GetDataSlab+0x25c7c>
   3a510:	ldr	r0, [fp, #20]
   3a514:	mov	r9, r8
   3a518:	mov	r8, #0
   3a51c:	add	ip, r0, #4
   3a520:	sub	r0, fp, #136	; 0x88
   3a524:	orr	r7, r0, #4
   3a528:	sub	r0, fp, #96	; 0x60
   3a52c:	orr	r0, r0, #4
   3a530:	str	r0, [sp, #48]	; 0x30
   3a534:	ldr	r0, [r9], #4
   3a538:	str	r0, [sp, #56]	; 0x38
   3a53c:	ldr	r6, [sp, #56]	; 0x38
   3a540:	ldr	r1, [sp, #52]	; 0x34
   3a544:	cmp	r2, #1
   3a548:	add	r0, r6, r5
   3a54c:	add	r3, sl, r6, lsl #2
   3a550:	blt	3a58c <GetDataSlab+0xe710>
   3a554:	ldr	r1, [sp, #68]	; 0x44
   3a558:	ldr	r6, [fp, #20]
   3a55c:	mov	r5, #0
   3a560:	add	r1, r1, r8, lsl #2
   3a564:	ldr	r2, [r3, r5, lsl #2]
   3a568:	str	r2, [r1, r5, lsl #2]
   3a56c:	add	r5, r5, #1
   3a570:	ldr	r2, [r6]
   3a574:	cmp	r5, r2
   3a578:	blt	3a564 <GetDataSlab+0xe6e8>
   3a57c:	ldr	r1, [fp, #12]
   3a580:	ldr	r6, [r1]
   3a584:	ldr	r1, [fp, #8]
   3a588:	ldr	r1, [r1]
   3a58c:	str	r1, [sp, #52]	; 0x34
   3a590:	sub	r1, r1, r6
   3a594:	str	r6, [sp, #56]	; 0x38
   3a598:	add	r5, r0, r1
   3a59c:	ldr	r0, [fp, #24]
   3a5a0:	add	sl, r3, r1, lsl #2
   3a5a4:	cmp	r0, #2
   3a5a8:	blt	3a654 <GetDataSlab+0xe7d8>
   3a5ac:	mov	r1, #0
   3a5b0:	mov	r0, r1
   3a5b4:	ldr	r1, [r7, r1, lsl #2]
   3a5b8:	add	r1, r1, #1
   3a5bc:	str	r1, [r7, r0, lsl #2]
   3a5c0:	ldr	r6, [ip, r0, lsl #2]
   3a5c4:	sdiv	lr, r1, r6
   3a5c8:	mls	r1, lr, r6, r1
   3a5cc:	cmp	r1, #0
   3a5d0:	bne	3a644 <GetDataSlab+0xe7c8>
   3a5d4:	mov	r1, #0
   3a5d8:	sub	r3, fp, #176	; 0xb0
   3a5dc:	str	r1, [r7, r0, lsl #2]
   3a5e0:	add	r1, r3, r0, lsl #2
   3a5e4:	ldr	r1, [r1, #4]
   3a5e8:	sdiv	r6, r5, r1
   3a5ec:	mls	r6, r6, r1, r5
   3a5f0:	cmp	r6, #0
   3a5f4:	beq	3a610 <GetDataSlab+0xe794>
   3a5f8:	ldr	r4, [r3, r0, lsl #2]
   3a5fc:	ldr	r3, [r9, r0, lsl #2]
   3a600:	sub	r1, r1, r6
   3a604:	mla	r1, r3, r4, r1
   3a608:	add	r5, r1, r5
   3a60c:	b	3a628 <GetDataSlab+0xe7ac>
   3a610:	ldr	r1, [r9, r0, lsl #2]
   3a614:	cmp	r1, #0
   3a618:	beq	3a62c <GetDataSlab+0xe7b0>
   3a61c:	ldr	r3, [r3, r0, lsl #2]
   3a620:	mla	r5, r3, r1, r5
   3a624:	mul	r1, r3, r1
   3a628:	add	sl, sl, r1, lsl #2
   3a62c:	ldr	r3, [fp, #24]
   3a630:	add	r1, r0, #1
   3a634:	add	r0, r0, #2
   3a638:	cmp	r0, r3
   3a63c:	blt	3a5b0 <GetDataSlab+0xe734>
   3a640:	b	3a654 <GetDataSlab+0xe7d8>
   3a644:	ldr	r1, [sp, #48]	; 0x30
   3a648:	ldr	r0, [r1, r0, lsl #2]
   3a64c:	add	sl, sl, r0, lsl #2
   3a650:	add	r5, r0, r5
   3a654:	ldr	r1, [sp, #60]	; 0x3c
   3a658:	add	r8, r2, r8
   3a65c:	mov	r0, #0
   3a660:	cmp	r8, r1
   3a664:	blt	3a53c <GetDataSlab+0xe6c0>
   3a668:	b	2e97c <GetDataSlab+0x2b00>
   3a66c:	ldr	r4, [r3]
   3a670:	ldr	r9, [fp, #8]
   3a674:	mov	r5, #0
   3a678:	sub	r3, fp, #176	; 0xb0
   3a67c:	sub	sl, fp, #96	; 0x60
   3a680:	sub	r0, r4, #1
   3a684:	str	r0, [fp, #-96]	; 0xffffffa0
   3a688:	ldr	r0, [r9]
   3a68c:	str	r0, [fp, #-176]	; 0xffffff50
   3a690:	str	r0, [sp, #52]	; 0x34
   3a694:	ldr	r0, [fp, #24]
   3a698:	ldr	r2, [r6]
   3a69c:	cmp	r0, #2
   3a6a0:	mov	r0, r2
   3a6a4:	str	r2, [sp, #60]	; 0x3c
   3a6a8:	blt	3a818 <GetDataSlab+0xe99c>
   3a6ac:	ldr	r7, [sp, #52]	; 0x34
   3a6b0:	sub	r0, r9, #4
   3a6b4:	sub	r6, r9, #12
   3a6b8:	mov	ip, #1
   3a6bc:	mov	lr, #0
   3a6c0:	mov	r5, #0
   3a6c4:	str	r2, [sp, #60]	; 0x3c
   3a6c8:	mov	r1, r7
   3a6cc:	str	r7, [sp, #48]	; 0x30
   3a6d0:	mov	r1, r2
   3a6d4:	ldr	r1, [fp, #16]
   3a6d8:	add	lr, lr, #1
   3a6dc:	str	r6, [sp, #44]	; 0x2c
   3a6e0:	cmp	lr, #4
   3a6e4:	str	lr, [sp, #40]	; 0x28
   3a6e8:	ldr	r1, [r1, ip, lsl #2]
   3a6ec:	str	r7, [r3, ip, lsl #2]
   3a6f0:	sub	r8, r1, #1
   3a6f4:	str	r8, [sl, ip, lsl #2]
   3a6f8:	ldr	sl, [r9, ip, lsl #2]
   3a6fc:	str	sl, [sp, #36]	; 0x24
   3a700:	bcs	3a710 <GetDataSlab+0xe894>
   3a704:	mov	r1, sl
   3a708:	mov	r3, ip
   3a70c:	b	3a7ac <GetDataSlab+0xe930>
   3a710:	vmov.i32	q9, #1	; 0x00000001
   3a714:	vmov.i32	q10, #1	; 0x00000001
   3a718:	vmov.i32	q8, #1	; 0x00000001
   3a71c:	bic	r1, lr, #3
   3a720:	bic	r9, ip, #3
   3a724:	vmov.32	d23[1], sl
   3a728:	vmov.32	d18[0], r7
   3a72c:	vmov.32	d20[0], r8
   3a730:	str	r1, [sp, #32]
   3a734:	sub	r3, ip, r1
   3a738:	mov	r1, r6
   3a73c:	mvn	r7, #15
   3a740:	vorr	d16, d18, d18
   3a744:	vmov.i32	q9, #1	; 0x00000001
   3a748:	vorr	d18, d20, d20
   3a74c:	vld1.32	{d20-d21}, [r1], r7
   3a750:	subs	r9, r9, #4
   3a754:	vrev64.32	q12, q10
   3a758:	vext.8	q12, q12, q12, #8
   3a75c:	vext.8	q11, q11, q12, #12
   3a760:	vmul.i32	q9, q9, q12
   3a764:	vmul.i32	q8, q11, q8
   3a768:	vorr	q11, q12, q12
   3a76c:	bne	3a74c <GetDataSlab+0xe8d0>
   3a770:	ldr	r1, [sp, #32]
   3a774:	vext.8	q11, q9, q8, #8
   3a778:	vext.8	q12, q8, q8, #8
   3a77c:	vmul.i32	q0, q9, q11
   3a780:	vmul.i32	q1, q8, q12
   3a784:	vmul.i32	q8, q0, d0[1]
   3a788:	vmul.i32	q9, q1, d2[1]
   3a78c:	vmov.32	r8, d16[0]
   3a790:	vmov.32	r7, d18[0]
   3a794:	cmp	lr, r1
   3a798:	bne	3a7a4 <GetDataSlab+0xe928>
   3a79c:	ldr	r9, [fp, #8]
   3a7a0:	b	3a7c0 <GetDataSlab+0xe944>
   3a7a4:	ldr	r9, [fp, #8]
   3a7a8:	vmov.32	r1, d20[0]
   3a7ac:	mul	r7, r1, r7
   3a7b0:	ldr	r1, [r0, r3, lsl #2]
   3a7b4:	subs	r3, r3, #1
   3a7b8:	mul	r8, r8, r1
   3a7bc:	bne	3a7ac <GetDataSlab+0xe930>
   3a7c0:	sub	sl, fp, #96	; 0x60
   3a7c4:	sub	r3, fp, #176	; 0xb0
   3a7c8:	ldr	r6, [sp, #48]	; 0x30
   3a7cc:	ldr	lr, [sp, #60]	; 0x3c
   3a7d0:	str	r7, [sp, #48]	; 0x30
   3a7d4:	str	r8, [sl, ip, lsl #2]
   3a7d8:	ldr	r8, [fp, #12]
   3a7dc:	str	r7, [r3, ip, lsl #2]
   3a7e0:	ldr	r7, [sp, #36]	; 0x24
   3a7e4:	ldr	r1, [r8, ip, lsl #2]
   3a7e8:	mla	r5, r1, r6, r5
   3a7ec:	ldr	r1, [fp, #20]
   3a7f0:	ldr	r6, [sp, #44]	; 0x2c
   3a7f4:	ldr	r1, [r1, ip, lsl #2]
   3a7f8:	add	ip, ip, #1
   3a7fc:	add	r6, r6, #4
   3a800:	mul	lr, r1, lr
   3a804:	ldr	r1, [fp, #24]
   3a808:	str	lr, [sp, #60]	; 0x3c
   3a80c:	ldr	lr, [sp, #40]	; 0x28
   3a810:	cmp	ip, r1
   3a814:	bne	3a6d4 <GetDataSlab+0xe858>
   3a818:	ldr	r0, [sp, #56]	; 0x38
   3a81c:	cmp	r4, #1
   3a820:	add	sl, r0, r5, lsl #2
   3a824:	bne	47cbc <GetDataSlab+0x1be40>
   3a828:	ldr	r0, [sp, #60]	; 0x3c
   3a82c:	cmp	r0, #1
   3a830:	blt	51b0c <GetDataSlab+0x25c90>
   3a834:	ldr	r0, [fp, #20]
   3a838:	mov	r9, r8
   3a83c:	mov	r8, #0
   3a840:	add	ip, r0, #4
   3a844:	sub	r0, fp, #136	; 0x88
   3a848:	orr	r7, r0, #4
   3a84c:	sub	r0, fp, #96	; 0x60
   3a850:	orr	r0, r0, #4
   3a854:	str	r0, [sp, #48]	; 0x30
   3a858:	ldr	r0, [r9], #4
   3a85c:	str	r0, [sp, #56]	; 0x38
   3a860:	ldr	r6, [sp, #56]	; 0x38
   3a864:	ldr	r1, [sp, #52]	; 0x34
   3a868:	cmp	r2, #1
   3a86c:	add	r0, r6, r5
   3a870:	add	r3, sl, r6, lsl #2
   3a874:	blt	3a8b0 <GetDataSlab+0xea34>
   3a878:	ldr	r1, [sp, #68]	; 0x44
   3a87c:	ldr	r6, [fp, #20]
   3a880:	mov	r5, #0
   3a884:	add	r1, r1, r8, lsl #2
   3a888:	ldr	r2, [r3, r5, lsl #2]
   3a88c:	str	r2, [r1, r5, lsl #2]
   3a890:	add	r5, r5, #1
   3a894:	ldr	r2, [r6]
   3a898:	cmp	r5, r2
   3a89c:	blt	3a888 <GetDataSlab+0xea0c>
   3a8a0:	ldr	r1, [fp, #12]
   3a8a4:	ldr	r6, [r1]
   3a8a8:	ldr	r1, [fp, #8]
   3a8ac:	ldr	r1, [r1]
   3a8b0:	str	r1, [sp, #52]	; 0x34
   3a8b4:	sub	r1, r1, r6
   3a8b8:	str	r6, [sp, #56]	; 0x38
   3a8bc:	add	r5, r0, r1
   3a8c0:	ldr	r0, [fp, #24]
   3a8c4:	add	sl, r3, r1, lsl #2
   3a8c8:	cmp	r0, #2
   3a8cc:	blt	3a978 <GetDataSlab+0xeafc>
   3a8d0:	mov	r1, #0
   3a8d4:	mov	r0, r1
   3a8d8:	ldr	r1, [r7, r1, lsl #2]
   3a8dc:	add	r1, r1, #1
   3a8e0:	str	r1, [r7, r0, lsl #2]
   3a8e4:	ldr	r6, [ip, r0, lsl #2]
   3a8e8:	sdiv	lr, r1, r6
   3a8ec:	mls	r1, lr, r6, r1
   3a8f0:	cmp	r1, #0
   3a8f4:	bne	3a968 <GetDataSlab+0xeaec>
   3a8f8:	mov	r1, #0
   3a8fc:	sub	r3, fp, #176	; 0xb0
   3a900:	str	r1, [r7, r0, lsl #2]
   3a904:	add	r1, r3, r0, lsl #2
   3a908:	ldr	r1, [r1, #4]
   3a90c:	sdiv	r6, r5, r1
   3a910:	mls	r6, r6, r1, r5
   3a914:	cmp	r6, #0
   3a918:	beq	3a934 <GetDataSlab+0xeab8>
   3a91c:	ldr	r4, [r3, r0, lsl #2]
   3a920:	ldr	r3, [r9, r0, lsl #2]
   3a924:	sub	r1, r1, r6
   3a928:	mla	r1, r3, r4, r1
   3a92c:	add	r5, r1, r5
   3a930:	b	3a94c <GetDataSlab+0xead0>
   3a934:	ldr	r1, [r9, r0, lsl #2]
   3a938:	cmp	r1, #0
   3a93c:	beq	3a950 <GetDataSlab+0xead4>
   3a940:	ldr	r3, [r3, r0, lsl #2]
   3a944:	mla	r5, r3, r1, r5
   3a948:	mul	r1, r3, r1
   3a94c:	add	sl, sl, r1, lsl #2
   3a950:	ldr	r3, [fp, #24]
   3a954:	add	r1, r0, #1
   3a958:	add	r0, r0, #2
   3a95c:	cmp	r0, r3
   3a960:	blt	3a8d4 <GetDataSlab+0xea58>
   3a964:	b	3a978 <GetDataSlab+0xeafc>
   3a968:	ldr	r1, [sp, #48]	; 0x30
   3a96c:	ldr	r0, [r1, r0, lsl #2]
   3a970:	add	sl, sl, r0, lsl #2
   3a974:	add	r5, r0, r5
   3a978:	ldr	r1, [sp, #60]	; 0x3c
   3a97c:	add	r8, r2, r8
   3a980:	mov	r0, #0
   3a984:	cmp	r8, r1
   3a988:	blt	3a860 <GetDataSlab+0xe9e4>
   3a98c:	b	2e97c <GetDataSlab+0x2b00>
   3a990:	ldr	r4, [r3]
   3a994:	ldr	r9, [fp, #8]
   3a998:	mov	r5, #0
   3a99c:	sub	r3, fp, #176	; 0xb0
   3a9a0:	sub	sl, fp, #96	; 0x60
   3a9a4:	sub	r0, r4, #1
   3a9a8:	str	r0, [fp, #-96]	; 0xffffffa0
   3a9ac:	ldr	r0, [r9]
   3a9b0:	str	r0, [fp, #-176]	; 0xffffff50
   3a9b4:	str	r0, [sp, #52]	; 0x34
   3a9b8:	ldr	r0, [fp, #24]
   3a9bc:	ldr	r2, [r6]
   3a9c0:	cmp	r0, #2
   3a9c4:	mov	r0, r2
   3a9c8:	str	r2, [sp, #60]	; 0x3c
   3a9cc:	blt	3ab3c <GetDataSlab+0xecc0>
   3a9d0:	ldr	r7, [sp, #52]	; 0x34
   3a9d4:	sub	r0, r9, #4
   3a9d8:	sub	r6, r9, #12
   3a9dc:	mov	ip, #1
   3a9e0:	mov	lr, #0
   3a9e4:	mov	r5, #0
   3a9e8:	str	r2, [sp, #60]	; 0x3c
   3a9ec:	mov	r1, r7
   3a9f0:	str	r7, [sp, #48]	; 0x30
   3a9f4:	mov	r1, r2
   3a9f8:	ldr	r1, [fp, #16]
   3a9fc:	add	lr, lr, #1
   3aa00:	str	r6, [sp, #44]	; 0x2c
   3aa04:	cmp	lr, #4
   3aa08:	str	lr, [sp, #40]	; 0x28
   3aa0c:	ldr	r1, [r1, ip, lsl #2]
   3aa10:	str	r7, [r3, ip, lsl #2]
   3aa14:	sub	r8, r1, #1
   3aa18:	str	r8, [sl, ip, lsl #2]
   3aa1c:	ldr	sl, [r9, ip, lsl #2]
   3aa20:	str	sl, [sp, #36]	; 0x24
   3aa24:	bcs	3aa34 <GetDataSlab+0xebb8>
   3aa28:	mov	r1, sl
   3aa2c:	mov	r3, ip
   3aa30:	b	3aad0 <GetDataSlab+0xec54>
   3aa34:	vmov.i32	q9, #1	; 0x00000001
   3aa38:	vmov.i32	q10, #1	; 0x00000001
   3aa3c:	vmov.i32	q8, #1	; 0x00000001
   3aa40:	bic	r1, lr, #3
   3aa44:	bic	r9, ip, #3
   3aa48:	vmov.32	d23[1], sl
   3aa4c:	vmov.32	d18[0], r7
   3aa50:	vmov.32	d20[0], r8
   3aa54:	str	r1, [sp, #32]
   3aa58:	sub	r3, ip, r1
   3aa5c:	mov	r1, r6
   3aa60:	mvn	r7, #15
   3aa64:	vorr	d16, d18, d18
   3aa68:	vmov.i32	q9, #1	; 0x00000001
   3aa6c:	vorr	d18, d20, d20
   3aa70:	vld1.32	{d20-d21}, [r1], r7
   3aa74:	subs	r9, r9, #4
   3aa78:	vrev64.32	q12, q10
   3aa7c:	vext.8	q12, q12, q12, #8
   3aa80:	vext.8	q11, q11, q12, #12
   3aa84:	vmul.i32	q9, q9, q12
   3aa88:	vmul.i32	q8, q11, q8
   3aa8c:	vorr	q11, q12, q12
   3aa90:	bne	3aa70 <GetDataSlab+0xebf4>
   3aa94:	ldr	r1, [sp, #32]
   3aa98:	vext.8	q11, q9, q8, #8
   3aa9c:	vext.8	q12, q8, q8, #8
   3aaa0:	vmul.i32	q0, q9, q11
   3aaa4:	vmul.i32	q1, q8, q12
   3aaa8:	vmul.i32	q8, q0, d0[1]
   3aaac:	vmul.i32	q9, q1, d2[1]
   3aab0:	vmov.32	r8, d16[0]
   3aab4:	vmov.32	r7, d18[0]
   3aab8:	cmp	lr, r1
   3aabc:	bne	3aac8 <GetDataSlab+0xec4c>
   3aac0:	ldr	r9, [fp, #8]
   3aac4:	b	3aae4 <GetDataSlab+0xec68>
   3aac8:	ldr	r9, [fp, #8]
   3aacc:	vmov.32	r1, d20[0]
   3aad0:	mul	r7, r1, r7
   3aad4:	ldr	r1, [r0, r3, lsl #2]
   3aad8:	subs	r3, r3, #1
   3aadc:	mul	r8, r8, r1
   3aae0:	bne	3aad0 <GetDataSlab+0xec54>
   3aae4:	sub	sl, fp, #96	; 0x60
   3aae8:	sub	r3, fp, #176	; 0xb0
   3aaec:	ldr	r6, [sp, #48]	; 0x30
   3aaf0:	ldr	lr, [sp, #60]	; 0x3c
   3aaf4:	str	r7, [sp, #48]	; 0x30
   3aaf8:	str	r8, [sl, ip, lsl #2]
   3aafc:	ldr	r8, [fp, #12]
   3ab00:	str	r7, [r3, ip, lsl #2]
   3ab04:	ldr	r7, [sp, #36]	; 0x24
   3ab08:	ldr	r1, [r8, ip, lsl #2]
   3ab0c:	mla	r5, r1, r6, r5
   3ab10:	ldr	r1, [fp, #20]
   3ab14:	ldr	r6, [sp, #44]	; 0x2c
   3ab18:	ldr	r1, [r1, ip, lsl #2]
   3ab1c:	add	ip, ip, #1
   3ab20:	add	r6, r6, #4
   3ab24:	mul	lr, r1, lr
   3ab28:	ldr	r1, [fp, #24]
   3ab2c:	str	lr, [sp, #60]	; 0x3c
   3ab30:	ldr	lr, [sp, #40]	; 0x28
   3ab34:	cmp	ip, r1
   3ab38:	bne	3a9f8 <GetDataSlab+0xeb7c>
   3ab3c:	ldr	r0, [sp, #56]	; 0x38
   3ab40:	cmp	r4, #1
   3ab44:	add	ip, r0, r5, lsl #2
   3ab48:	bne	47e58 <GetDataSlab+0x1bfdc>
   3ab4c:	ldr	r0, [sp, #60]	; 0x3c
   3ab50:	cmp	r0, #1
   3ab54:	ldr	r0, [fp, #20]
   3ab58:	blt	51b20 <GetDataSlab+0x25ca4>
   3ab5c:	add	r9, r0, #4
   3ab60:	sub	r0, fp, #136	; 0x88
   3ab64:	mov	sl, r8
   3ab68:	mov	lr, #0
   3ab6c:	orr	r7, r0, #4
   3ab70:	sub	r0, fp, #96	; 0x60
   3ab74:	orr	r0, r0, #4
   3ab78:	str	r0, [sp, #48]	; 0x30
   3ab7c:	ldr	r0, [sl], #4
   3ab80:	str	r0, [sp, #56]	; 0x38
   3ab84:	ldr	r1, [sp, #56]	; 0x38
   3ab88:	ldr	r0, [sp, #52]	; 0x34
   3ab8c:	cmp	r2, #1
   3ab90:	add	r4, r1, r5
   3ab94:	add	r8, ip, r1, lsl #2
   3ab98:	blt	3abe4 <GetDataSlab+0xed68>
   3ab9c:	ldr	r0, [sp, #68]	; 0x44
   3aba0:	ldr	r6, [fp, #20]
   3aba4:	mov	r3, r8
   3aba8:	add	r5, r0, lr, lsl #2
   3abac:	mov	r0, #0
   3abb0:	vldr	s0, [r3]
   3abb4:	add	r3, r3, #4
   3abb8:	vcvt.s32.f32	s0, s0
   3abbc:	vmov	r1, s0
   3abc0:	str	r1, [r5, r0, lsl #2]
   3abc4:	add	r0, r0, #1
   3abc8:	ldr	r2, [r6]
   3abcc:	cmp	r0, r2
   3abd0:	blt	3abb0 <GetDataSlab+0xed34>
   3abd4:	ldr	r0, [fp, #12]
   3abd8:	ldr	r1, [r0]
   3abdc:	ldr	r0, [fp, #8]
   3abe0:	ldr	r0, [r0]
   3abe4:	str	r0, [sp, #52]	; 0x34
   3abe8:	sub	r0, r0, r1
   3abec:	str	r1, [sp, #56]	; 0x38
   3abf0:	add	ip, r8, r0, lsl #2
   3abf4:	add	r5, r4, r0
   3abf8:	ldr	r0, [fp, #24]
   3abfc:	cmp	r0, #2
   3ac00:	blt	3acb0 <GetDataSlab+0xee34>
   3ac04:	mov	r6, #0
   3ac08:	mov	r8, #0
   3ac0c:	ldr	r1, [r7, r6, lsl #2]
   3ac10:	mov	r0, r6
   3ac14:	add	r1, r1, #1
   3ac18:	str	r1, [r7, r6, lsl #2]
   3ac1c:	ldr	r6, [r9, r6, lsl #2]
   3ac20:	sdiv	r4, r1, r6
   3ac24:	mls	r1, r4, r6, r1
   3ac28:	cmp	r1, #0
   3ac2c:	bne	3aca0 <GetDataSlab+0xee24>
   3ac30:	sub	r3, fp, #176	; 0xb0
   3ac34:	str	r8, [r7, r0, lsl #2]
   3ac38:	add	r1, r3, r0, lsl #2
   3ac3c:	ldr	r6, [r1, #4]
   3ac40:	sdiv	r1, r5, r6
   3ac44:	mls	r1, r1, r6, r5
   3ac48:	cmp	r1, #0
   3ac4c:	beq	3ac68 <GetDataSlab+0xedec>
   3ac50:	ldr	r4, [r3, r0, lsl #2]
   3ac54:	ldr	r3, [sl, r0, lsl #2]
   3ac58:	sub	r1, r6, r1
   3ac5c:	mla	r1, r3, r4, r1
   3ac60:	add	r5, r1, r5
   3ac64:	b	3ac84 <GetDataSlab+0xee08>
   3ac68:	ldr	r1, [sl, r0, lsl #2]
   3ac6c:	cmp	r1, #0
   3ac70:	beq	3ac88 <GetDataSlab+0xee0c>
   3ac74:	sub	r3, fp, #176	; 0xb0
   3ac78:	ldr	r3, [r3, r0, lsl #2]
   3ac7c:	mla	r5, r3, r1, r5
   3ac80:	mul	r1, r3, r1
   3ac84:	add	ip, ip, r1, lsl #2
   3ac88:	ldr	r1, [fp, #24]
   3ac8c:	add	r6, r0, #1
   3ac90:	add	r0, r0, #2
   3ac94:	cmp	r0, r1
   3ac98:	blt	3ac0c <GetDataSlab+0xed90>
   3ac9c:	b	3acb0 <GetDataSlab+0xee34>
   3aca0:	ldr	r1, [sp, #48]	; 0x30
   3aca4:	ldr	r0, [r1, r0, lsl #2]
   3aca8:	add	ip, ip, r0, lsl #2
   3acac:	add	r5, r0, r5
   3acb0:	ldr	r1, [sp, #60]	; 0x3c
   3acb4:	add	lr, r2, lr
   3acb8:	mov	r0, #0
   3acbc:	cmp	lr, r1
   3acc0:	blt	3ab84 <GetDataSlab+0xed08>
   3acc4:	b	2e97c <GetDataSlab+0x2b00>
   3acc8:	ldr	r4, [r3]
   3accc:	mov	r5, #0
   3acd0:	sub	r3, fp, #176	; 0xb0
   3acd4:	sub	r9, fp, #96	; 0x60
   3acd8:	sub	r0, r4, #1
   3acdc:	str	r0, [fp, #-96]	; 0xffffffa0
   3ace0:	ldr	r0, [fp, #8]
   3ace4:	ldr	r0, [r0]
   3ace8:	str	r0, [fp, #-176]	; 0xffffff50
   3acec:	str	r0, [sp, #48]	; 0x30
   3acf0:	ldr	r0, [fp, #24]
   3acf4:	ldr	r2, [r6]
   3acf8:	cmp	r0, #2
   3acfc:	mov	r0, r2
   3ad00:	str	r2, [sp, #60]	; 0x3c
   3ad04:	blt	3ae7c <GetDataSlab+0xf000>
   3ad08:	ldr	r0, [fp, #8]
   3ad0c:	ldr	r7, [sp, #48]	; 0x30
   3ad10:	mov	ip, #1
   3ad14:	mvn	sl, #15
   3ad18:	mov	r5, #0
   3ad1c:	str	r2, [sp, #60]	; 0x3c
   3ad20:	mov	r1, r0
   3ad24:	sub	r0, r0, #4
   3ad28:	mov	r6, r7
   3ad2c:	sub	lr, r1, #12
   3ad30:	mov	r1, #0
   3ad34:	str	r1, [sp, #52]	; 0x34
   3ad38:	mov	r1, r2
   3ad3c:	ldr	r1, [fp, #16]
   3ad40:	ldr	r1, [r1, ip, lsl #2]
   3ad44:	str	r7, [r3, ip, lsl #2]
   3ad48:	sub	r8, r1, #1
   3ad4c:	ldr	r1, [fp, #8]
   3ad50:	str	r8, [r9, ip, lsl #2]
   3ad54:	ldr	r3, [r1, ip, lsl #2]
   3ad58:	ldr	r1, [sp, #52]	; 0x34
   3ad5c:	add	r1, r1, #1
   3ad60:	str	r3, [sp, #44]	; 0x2c
   3ad64:	cmp	r1, #4
   3ad68:	str	r1, [sp, #52]	; 0x34
   3ad6c:	bcs	3ad7c <GetDataSlab+0xef00>
   3ad70:	mov	r1, r3
   3ad74:	mov	r3, ip
   3ad78:	b	3ae1c <GetDataSlab+0xefa0>
   3ad7c:	vmov.i32	q9, #1	; 0x00000001
   3ad80:	vmov.i32	q10, #1	; 0x00000001
   3ad84:	vmov.i32	q8, #1	; 0x00000001
   3ad88:	bic	r1, r1, #3
   3ad8c:	vmov.32	d23[1], r3
   3ad90:	bic	r9, ip, #3
   3ad94:	str	r6, [sp, #36]	; 0x24
   3ad98:	vmov.32	d18[0], r7
   3ad9c:	vmov.32	d20[0], r8
   3ada0:	str	r1, [sp, #40]	; 0x28
   3ada4:	sub	r3, ip, r1
   3ada8:	mov	r1, lr
   3adac:	vorr	d16, d18, d18
   3adb0:	vmov.i32	q9, #1	; 0x00000001
   3adb4:	vorr	d18, d20, d20
   3adb8:	vld1.32	{d20-d21}, [r1], sl
   3adbc:	subs	r9, r9, #4
   3adc0:	vrev64.32	q12, q10
   3adc4:	vext.8	q12, q12, q12, #8
   3adc8:	vext.8	q11, q11, q12, #12
   3adcc:	vmul.i32	q9, q9, q12
   3add0:	vmul.i32	q8, q11, q8
   3add4:	vorr	q11, q12, q12
   3add8:	bne	3adb8 <GetDataSlab+0xef3c>
   3addc:	ldr	r1, [sp, #52]	; 0x34
   3ade0:	ldr	r6, [sp, #40]	; 0x28
   3ade4:	vext.8	q11, q9, q8, #8
   3ade8:	vext.8	q12, q8, q8, #8
   3adec:	vmul.i32	q0, q9, q11
   3adf0:	vmul.i32	q1, q8, q12
   3adf4:	vmul.i32	q8, q0, d0[1]
   3adf8:	vmul.i32	q9, q1, d2[1]
   3adfc:	vmov.32	r8, d16[0]
   3ae00:	vmov.32	r7, d18[0]
   3ae04:	cmp	r1, r6
   3ae08:	bne	3ae14 <GetDataSlab+0xef98>
   3ae0c:	ldr	r6, [sp, #36]	; 0x24
   3ae10:	b	3ae30 <GetDataSlab+0xefb4>
   3ae14:	ldr	r6, [sp, #36]	; 0x24
   3ae18:	vmov.32	r1, d20[0]
   3ae1c:	mul	r7, r1, r7
   3ae20:	ldr	r1, [r0, r3, lsl #2]
   3ae24:	subs	r3, r3, #1
   3ae28:	mul	r8, r8, r1
   3ae2c:	bne	3ae1c <GetDataSlab+0xefa0>
   3ae30:	sub	r9, fp, #96	; 0x60
   3ae34:	sub	r3, fp, #176	; 0xb0
   3ae38:	add	lr, lr, #4
   3ae3c:	str	r8, [r9, ip, lsl #2]
   3ae40:	ldr	r8, [fp, #12]
   3ae44:	str	r7, [r3, ip, lsl #2]
   3ae48:	ldr	r1, [r8, ip, lsl #2]
   3ae4c:	mla	r5, r1, r6, r5
   3ae50:	ldr	r1, [fp, #20]
   3ae54:	ldr	r6, [sp, #60]	; 0x3c
   3ae58:	ldr	r1, [r1, ip, lsl #2]
   3ae5c:	add	ip, ip, #1
   3ae60:	mul	r6, r1, r6
   3ae64:	ldr	r1, [fp, #24]
   3ae68:	str	r6, [sp, #60]	; 0x3c
   3ae6c:	mov	r6, r7
   3ae70:	ldr	r7, [sp, #44]	; 0x2c
   3ae74:	cmp	ip, r1
   3ae78:	bne	3ad3c <GetDataSlab+0xeec0>
   3ae7c:	ldr	r0, [sp, #56]	; 0x38
   3ae80:	cmp	r4, #1
   3ae84:	add	ip, r0, r5, lsl #3
   3ae88:	bne	47ffc <GetDataSlab+0x1c180>
   3ae8c:	ldr	r0, [sp, #60]	; 0x3c
   3ae90:	cmp	r0, #1
   3ae94:	ldr	r0, [fp, #20]
   3ae98:	blt	51b34 <GetDataSlab+0x25cb8>
   3ae9c:	add	r9, r0, #4
   3aea0:	sub	r0, fp, #136	; 0x88
   3aea4:	mov	sl, r8
   3aea8:	mov	lr, #0
   3aeac:	orr	r7, r0, #4
   3aeb0:	sub	r0, fp, #96	; 0x60
   3aeb4:	orr	r0, r0, #4
   3aeb8:	str	r0, [sp, #52]	; 0x34
   3aebc:	ldr	r0, [sl], #4
   3aec0:	str	r0, [sp, #56]	; 0x38
   3aec4:	ldr	r1, [sp, #56]	; 0x38
   3aec8:	ldr	r0, [sp, #48]	; 0x30
   3aecc:	cmp	r2, #1
   3aed0:	add	r4, r1, r5
   3aed4:	add	r8, ip, r1, lsl #3
   3aed8:	blt	3af24 <GetDataSlab+0xf0a8>
   3aedc:	ldr	r0, [sp, #68]	; 0x44
   3aee0:	ldr	r6, [fp, #20]
   3aee4:	mov	r3, r8
   3aee8:	add	r5, r0, lr, lsl #2
   3aeec:	mov	r0, #0
   3aef0:	vldr	d16, [r3]
   3aef4:	add	r3, r3, #8
   3aef8:	vcvt.s32.f64	s0, d16
   3aefc:	vmov	r1, s0
   3af00:	str	r1, [r5, r0, lsl #2]
   3af04:	add	r0, r0, #1
   3af08:	ldr	r2, [r6]
   3af0c:	cmp	r0, r2
   3af10:	blt	3aef0 <GetDataSlab+0xf074>
   3af14:	ldr	r0, [fp, #12]
   3af18:	ldr	r1, [r0]
   3af1c:	ldr	r0, [fp, #8]
   3af20:	ldr	r0, [r0]
   3af24:	str	r0, [sp, #48]	; 0x30
   3af28:	sub	r0, r0, r1
   3af2c:	str	r1, [sp, #56]	; 0x38
   3af30:	add	ip, r8, r0, lsl #3
   3af34:	add	r5, r4, r0
   3af38:	ldr	r0, [fp, #24]
   3af3c:	cmp	r0, #2
   3af40:	blt	3aff0 <GetDataSlab+0xf174>
   3af44:	mov	r6, #0
   3af48:	mov	r8, #0
   3af4c:	ldr	r1, [r7, r6, lsl #2]
   3af50:	mov	r0, r6
   3af54:	add	r1, r1, #1
   3af58:	str	r1, [r7, r6, lsl #2]
   3af5c:	ldr	r6, [r9, r6, lsl #2]
   3af60:	sdiv	r4, r1, r6
   3af64:	mls	r1, r4, r6, r1
   3af68:	cmp	r1, #0
   3af6c:	bne	3afe0 <GetDataSlab+0xf164>
   3af70:	sub	r3, fp, #176	; 0xb0
   3af74:	str	r8, [r7, r0, lsl #2]
   3af78:	add	r1, r3, r0, lsl #2
   3af7c:	ldr	r6, [r1, #4]
   3af80:	sdiv	r1, r5, r6
   3af84:	mls	r1, r1, r6, r5
   3af88:	cmp	r1, #0
   3af8c:	beq	3afa8 <GetDataSlab+0xf12c>
   3af90:	ldr	r4, [r3, r0, lsl #2]
   3af94:	ldr	r3, [sl, r0, lsl #2]
   3af98:	sub	r1, r6, r1
   3af9c:	mla	r1, r3, r4, r1
   3afa0:	add	r5, r1, r5
   3afa4:	b	3afc4 <GetDataSlab+0xf148>
   3afa8:	ldr	r1, [sl, r0, lsl #2]
   3afac:	cmp	r1, #0
   3afb0:	beq	3afc8 <GetDataSlab+0xf14c>
   3afb4:	sub	r3, fp, #176	; 0xb0
   3afb8:	ldr	r3, [r3, r0, lsl #2]
   3afbc:	mla	r5, r3, r1, r5
   3afc0:	mul	r1, r3, r1
   3afc4:	add	ip, ip, r1, lsl #3
   3afc8:	ldr	r1, [fp, #24]
   3afcc:	add	r6, r0, #1
   3afd0:	add	r0, r0, #2
   3afd4:	cmp	r0, r1
   3afd8:	blt	3af4c <GetDataSlab+0xf0d0>
   3afdc:	b	3aff0 <GetDataSlab+0xf174>
   3afe0:	ldr	r1, [sp, #52]	; 0x34
   3afe4:	ldr	r0, [r1, r0, lsl #2]
   3afe8:	add	ip, ip, r0, lsl #3
   3afec:	add	r5, r0, r5
   3aff0:	ldr	r1, [sp, #60]	; 0x3c
   3aff4:	add	lr, r2, lr
   3aff8:	mov	r0, #0
   3affc:	cmp	lr, r1
   3b000:	blt	3aec4 <GetDataSlab+0xf048>
   3b004:	b	2e97c <GetDataSlab+0x2b00>
   3b008:	ldr	r5, [r3]
   3b00c:	mov	r3, #0
   3b010:	sub	ip, fp, #176	; 0xb0
   3b014:	sub	sl, fp, #96	; 0x60
   3b018:	str	r9, [sp, #40]	; 0x28
   3b01c:	sub	r0, r5, #1
   3b020:	str	r0, [fp, #-96]	; 0xffffffa0
   3b024:	ldr	r0, [fp, #8]
   3b028:	ldr	r0, [r0]
   3b02c:	str	r0, [fp, #-176]	; 0xffffff50
   3b030:	str	r0, [sp, #32]
   3b034:	ldr	r0, [fp, #24]
   3b038:	ldr	r1, [r6]
   3b03c:	cmp	r0, #2
   3b040:	mov	r0, r1
   3b044:	str	r1, [sp, #60]	; 0x3c
   3b048:	blt	3b1b8 <GetDataSlab+0xf33c>
   3b04c:	ldr	r0, [fp, #8]
   3b050:	ldr	r6, [sp, #32]
   3b054:	mov	lr, #1
   3b058:	mov	r3, #0
   3b05c:	str	r1, [sp, #60]	; 0x3c
   3b060:	sub	r2, r0, #4
   3b064:	sub	r4, r0, #12
   3b068:	mov	r0, #0
   3b06c:	mov	r7, r6
   3b070:	str	r0, [sp, #52]	; 0x34
   3b074:	mov	r0, r1
   3b078:	ldr	r0, [fp, #16]
   3b07c:	str	r7, [sp, #44]	; 0x2c
   3b080:	str	r4, [sp, #48]	; 0x30
   3b084:	ldr	r0, [r0, lr, lsl #2]
   3b088:	str	r6, [ip, lr, lsl #2]
   3b08c:	sub	r9, r0, #1
   3b090:	ldr	r0, [fp, #8]
   3b094:	str	r9, [sl, lr, lsl #2]
   3b098:	ldr	sl, [sp, #52]	; 0x34
   3b09c:	ldr	ip, [r0, lr, lsl #2]
   3b0a0:	add	sl, sl, #1
   3b0a4:	cmp	sl, #4
   3b0a8:	str	sl, [sp, #52]	; 0x34
   3b0ac:	str	ip, [sp, #36]	; 0x24
   3b0b0:	bcs	3b0c0 <GetDataSlab+0xf244>
   3b0b4:	mov	r7, ip
   3b0b8:	mov	r0, lr
   3b0bc:	b	3b154 <GetDataSlab+0xf2d8>
   3b0c0:	vmov.i32	q9, #1	; 0x00000001
   3b0c4:	vmov.i32	q10, #1	; 0x00000001
   3b0c8:	vmov.i32	q8, #1	; 0x00000001
   3b0cc:	bic	r0, sl, #3
   3b0d0:	bic	r8, lr, #3
   3b0d4:	vmov.32	d23[1], ip
   3b0d8:	mvn	r7, #15
   3b0dc:	vmov.32	d18[0], r6
   3b0e0:	vmov.32	d20[0], r9
   3b0e4:	str	r0, [sp, #28]
   3b0e8:	sub	r0, lr, r0
   3b0ec:	mov	r6, r4
   3b0f0:	vorr	d16, d18, d18
   3b0f4:	vmov.i32	q9, #1	; 0x00000001
   3b0f8:	vorr	d18, d20, d20
   3b0fc:	vld1.32	{d20-d21}, [r6], r7
   3b100:	subs	r8, r8, #4
   3b104:	vrev64.32	q12, q10
   3b108:	vext.8	q12, q12, q12, #8
   3b10c:	vext.8	q11, q11, q12, #12
   3b110:	vmul.i32	q9, q9, q12
   3b114:	vmul.i32	q8, q11, q8
   3b118:	vorr	q11, q12, q12
   3b11c:	bne	3b0fc <GetDataSlab+0xf280>
   3b120:	ldr	r7, [sp, #28]
   3b124:	vext.8	q11, q9, q8, #8
   3b128:	vext.8	q12, q8, q8, #8
   3b12c:	ldr	r8, [fp, #12]
   3b130:	vmul.i32	q0, q9, q11
   3b134:	vmul.i32	q1, q8, q12
   3b138:	vmul.i32	q8, q0, d0[1]
   3b13c:	vmul.i32	q9, q1, d2[1]
   3b140:	vmov.32	r9, d16[0]
   3b144:	vmov.32	r6, d18[0]
   3b148:	cmp	sl, r7
   3b14c:	beq	3b168 <GetDataSlab+0xf2ec>
   3b150:	vmov.32	r7, d20[0]
   3b154:	mul	r6, r7, r6
   3b158:	ldr	r7, [r2, r0, lsl #2]
   3b15c:	subs	r0, r0, #1
   3b160:	mul	r9, r9, r7
   3b164:	bne	3b154 <GetDataSlab+0xf2d8>
   3b168:	sub	ip, fp, #176	; 0xb0
   3b16c:	sub	sl, fp, #96	; 0x60
   3b170:	ldr	r4, [sp, #44]	; 0x2c
   3b174:	mov	r7, r6
   3b178:	str	r6, [ip, lr, lsl #2]
   3b17c:	str	r9, [sl, lr, lsl #2]
   3b180:	ldr	r6, [sp, #36]	; 0x24
   3b184:	ldr	r0, [r8, lr, lsl #2]
   3b188:	mla	r3, r0, r4, r3
   3b18c:	ldr	r0, [fp, #20]
   3b190:	ldr	r4, [sp, #60]	; 0x3c
   3b194:	ldr	r0, [r0, lr, lsl #2]
   3b198:	add	lr, lr, #1
   3b19c:	mul	r4, r0, r4
   3b1a0:	ldr	r0, [fp, #24]
   3b1a4:	str	r4, [sp, #60]	; 0x3c
   3b1a8:	ldr	r4, [sp, #48]	; 0x30
   3b1ac:	cmp	lr, r0
   3b1b0:	add	r4, r4, #4
   3b1b4:	bne	3b078 <GetDataSlab+0xf1fc>
   3b1b8:	ldr	r0, [sp, #56]	; 0x38
   3b1bc:	cmp	r5, #1
   3b1c0:	add	sl, r0, r3, lsl #3
   3b1c4:	bne	481a0 <GetDataSlab+0x1c324>
   3b1c8:	ldr	r0, [sp, #60]	; 0x3c
   3b1cc:	cmp	r0, #1
   3b1d0:	blt	48320 <GetDataSlab+0x1c4a4>
   3b1d4:	ldr	r0, [fp, #20]
   3b1d8:	ldr	lr, [r8], #4
   3b1dc:	mov	ip, #0
   3b1e0:	add	r9, r0, #4
   3b1e4:	sub	r0, fp, #136	; 0x88
   3b1e8:	orr	r2, r0, #4
   3b1ec:	sub	r0, fp, #96	; 0x60
   3b1f0:	orr	r0, r0, #4
   3b1f4:	str	r0, [sp, #52]	; 0x34
   3b1f8:	add	r6, lr, r3
   3b1fc:	add	r3, sl, lr, lsl #3
   3b200:	cmp	r1, #1
   3b204:	blt	3b248 <GetDataSlab+0xf3cc>
   3b208:	ldr	r0, [sp, #68]	; 0x44
   3b20c:	ldr	r7, [fp, #20]
   3b210:	mov	r4, r3
   3b214:	add	r5, r0, ip, lsl #2
   3b218:	mov	r0, #0
   3b21c:	ldr	r1, [r4], #8
   3b220:	str	r1, [r5, r0, lsl #2]
   3b224:	add	r0, r0, #1
   3b228:	ldr	r1, [r7]
   3b22c:	cmp	r0, r1
   3b230:	blt	3b21c <GetDataSlab+0xf3a0>
   3b234:	ldr	r0, [fp, #12]
   3b238:	ldr	lr, [r0]
   3b23c:	ldr	r0, [fp, #8]
   3b240:	ldr	r0, [r0]
   3b244:	str	r0, [sp, #32]
   3b248:	ldr	r0, [sp, #32]
   3b24c:	sub	r0, r0, lr
   3b250:	add	sl, r3, r0, lsl #3
   3b254:	add	r3, r6, r0
   3b258:	ldr	r0, [fp, #24]
   3b25c:	cmp	r0, #2
   3b260:	blt	3b310 <GetDataSlab+0xf494>
   3b264:	mov	r0, #0
   3b268:	mov	r5, r0
   3b26c:	ldr	r0, [r2, r0, lsl #2]
   3b270:	add	r0, r0, #1
   3b274:	str	r0, [r2, r5, lsl #2]
   3b278:	ldr	r7, [r9, r5, lsl #2]
   3b27c:	sdiv	r6, r0, r7
   3b280:	mls	r0, r6, r7, r0
   3b284:	cmp	r0, #0
   3b288:	bne	3b300 <GetDataSlab+0xf484>
   3b28c:	mov	r0, #0
   3b290:	sub	r4, fp, #176	; 0xb0
   3b294:	str	r0, [r2, r5, lsl #2]
   3b298:	add	r0, r4, r5, lsl #2
   3b29c:	ldr	r0, [r0, #4]
   3b2a0:	sdiv	r6, r3, r0
   3b2a4:	mls	r7, r6, r0, r3
   3b2a8:	cmp	r7, #0
   3b2ac:	beq	3b2c8 <GetDataSlab+0xf44c>
   3b2b0:	ldr	r6, [r4, r5, lsl #2]
   3b2b4:	ldr	r4, [r8, r5, lsl #2]
   3b2b8:	sub	r0, r0, r7
   3b2bc:	mla	r0, r4, r6, r0
   3b2c0:	add	r3, r0, r3
   3b2c4:	b	3b2e4 <GetDataSlab+0xf468>
   3b2c8:	ldr	r0, [r8, r5, lsl #2]
   3b2cc:	cmp	r0, #0
   3b2d0:	beq	3b2e8 <GetDataSlab+0xf46c>
   3b2d4:	sub	r4, fp, #176	; 0xb0
   3b2d8:	ldr	r4, [r4, r5, lsl #2]
   3b2dc:	mla	r3, r4, r0, r3
   3b2e0:	mul	r0, r4, r0
   3b2e4:	add	sl, sl, r0, lsl #3
   3b2e8:	add	r0, r5, #1
   3b2ec:	add	r4, r5, #2
   3b2f0:	ldr	r5, [fp, #24]
   3b2f4:	cmp	r4, r5
   3b2f8:	blt	3b268 <GetDataSlab+0xf3ec>
   3b2fc:	b	3b310 <GetDataSlab+0xf494>
   3b300:	ldr	r0, [sp, #52]	; 0x34
   3b304:	ldr	r0, [r0, r5, lsl #2]
   3b308:	add	sl, sl, r0, lsl #3
   3b30c:	add	r3, r0, r3
   3b310:	ldr	r0, [sp, #60]	; 0x3c
   3b314:	add	ip, r1, ip
   3b318:	cmp	ip, r0
   3b31c:	blt	3b1f8 <GetDataSlab+0xf37c>
   3b320:	b	48320 <GetDataSlab+0x1c4a4>
   3b324:	ldr	r4, [r3]
   3b328:	ldr	r9, [fp, #8]
   3b32c:	mov	r5, #0
   3b330:	sub	r3, fp, #176	; 0xb0
   3b334:	sub	sl, fp, #96	; 0x60
   3b338:	sub	r0, r4, #1
   3b33c:	str	r0, [fp, #-96]	; 0xffffffa0
   3b340:	ldr	r0, [r9]
   3b344:	str	r0, [fp, #-176]	; 0xffffff50
   3b348:	str	r0, [sp, #52]	; 0x34
   3b34c:	ldr	r0, [fp, #24]
   3b350:	ldr	r2, [r6]
   3b354:	cmp	r0, #2
   3b358:	mov	r0, r2
   3b35c:	str	r2, [sp, #60]	; 0x3c
   3b360:	blt	3b4d0 <GetDataSlab+0xf654>
   3b364:	ldr	r7, [sp, #52]	; 0x34
   3b368:	sub	r0, r9, #4
   3b36c:	sub	r6, r9, #12
   3b370:	mov	ip, #1
   3b374:	mov	lr, #0
   3b378:	mov	r5, #0
   3b37c:	str	r2, [sp, #60]	; 0x3c
   3b380:	mov	r1, r7
   3b384:	str	r7, [sp, #48]	; 0x30
   3b388:	mov	r1, r2
   3b38c:	ldr	r1, [fp, #16]
   3b390:	add	lr, lr, #1
   3b394:	str	r6, [sp, #44]	; 0x2c
   3b398:	cmp	lr, #4
   3b39c:	str	lr, [sp, #40]	; 0x28
   3b3a0:	ldr	r1, [r1, ip, lsl #2]
   3b3a4:	str	r7, [r3, ip, lsl #2]
   3b3a8:	sub	r8, r1, #1
   3b3ac:	str	r8, [sl, ip, lsl #2]
   3b3b0:	ldr	sl, [r9, ip, lsl #2]
   3b3b4:	str	sl, [sp, #36]	; 0x24
   3b3b8:	bcs	3b3c8 <GetDataSlab+0xf54c>
   3b3bc:	mov	r1, sl
   3b3c0:	mov	r3, ip
   3b3c4:	b	3b464 <GetDataSlab+0xf5e8>
   3b3c8:	vmov.i32	q9, #1	; 0x00000001
   3b3cc:	vmov.i32	q10, #1	; 0x00000001
   3b3d0:	vmov.i32	q8, #1	; 0x00000001
   3b3d4:	bic	r1, lr, #3
   3b3d8:	bic	r9, ip, #3
   3b3dc:	vmov.32	d23[1], sl
   3b3e0:	vmov.32	d18[0], r7
   3b3e4:	vmov.32	d20[0], r8
   3b3e8:	str	r1, [sp, #32]
   3b3ec:	sub	r3, ip, r1
   3b3f0:	mov	r1, r6
   3b3f4:	mvn	r7, #15
   3b3f8:	vorr	d16, d18, d18
   3b3fc:	vmov.i32	q9, #1	; 0x00000001
   3b400:	vorr	d18, d20, d20
   3b404:	vld1.32	{d20-d21}, [r1], r7
   3b408:	subs	r9, r9, #4
   3b40c:	vrev64.32	q12, q10
   3b410:	vext.8	q12, q12, q12, #8
   3b414:	vext.8	q11, q11, q12, #12
   3b418:	vmul.i32	q9, q9, q12
   3b41c:	vmul.i32	q8, q11, q8
   3b420:	vorr	q11, q12, q12
   3b424:	bne	3b404 <GetDataSlab+0xf588>
   3b428:	ldr	r1, [sp, #32]
   3b42c:	vext.8	q11, q9, q8, #8
   3b430:	vext.8	q12, q8, q8, #8
   3b434:	vmul.i32	q0, q9, q11
   3b438:	vmul.i32	q1, q8, q12
   3b43c:	vmul.i32	q8, q0, d0[1]
   3b440:	vmul.i32	q9, q1, d2[1]
   3b444:	vmov.32	r8, d16[0]
   3b448:	vmov.32	r7, d18[0]
   3b44c:	cmp	lr, r1
   3b450:	bne	3b45c <GetDataSlab+0xf5e0>
   3b454:	ldr	r9, [fp, #8]
   3b458:	b	3b478 <GetDataSlab+0xf5fc>
   3b45c:	ldr	r9, [fp, #8]
   3b460:	vmov.32	r1, d20[0]
   3b464:	mul	r7, r1, r7
   3b468:	ldr	r1, [r0, r3, lsl #2]
   3b46c:	subs	r3, r3, #1
   3b470:	mul	r8, r8, r1
   3b474:	bne	3b464 <GetDataSlab+0xf5e8>
   3b478:	sub	sl, fp, #96	; 0x60
   3b47c:	sub	r3, fp, #176	; 0xb0
   3b480:	ldr	r6, [sp, #48]	; 0x30
   3b484:	ldr	lr, [sp, #60]	; 0x3c
   3b488:	str	r7, [sp, #48]	; 0x30
   3b48c:	str	r8, [sl, ip, lsl #2]
   3b490:	ldr	r8, [fp, #12]
   3b494:	str	r7, [r3, ip, lsl #2]
   3b498:	ldr	r7, [sp, #36]	; 0x24
   3b49c:	ldr	r1, [r8, ip, lsl #2]
   3b4a0:	mla	r5, r1, r6, r5
   3b4a4:	ldr	r1, [fp, #20]
   3b4a8:	ldr	r6, [sp, #44]	; 0x2c
   3b4ac:	ldr	r1, [r1, ip, lsl #2]
   3b4b0:	add	ip, ip, #1
   3b4b4:	add	r6, r6, #4
   3b4b8:	mul	lr, r1, lr
   3b4bc:	ldr	r1, [fp, #24]
   3b4c0:	str	lr, [sp, #60]	; 0x3c
   3b4c4:	ldr	lr, [sp, #40]	; 0x28
   3b4c8:	cmp	ip, r1
   3b4cc:	bne	3b38c <GetDataSlab+0xf510>
   3b4d0:	ldr	r0, [sp, #56]	; 0x38
   3b4d4:	cmp	r4, #1
   3b4d8:	add	sl, r0, r5
   3b4dc:	bne	48674 <GetDataSlab+0x1c7f8>
   3b4e0:	ldr	r0, [sp, #60]	; 0x3c
   3b4e4:	cmp	r0, #1
   3b4e8:	blt	51b48 <GetDataSlab+0x25ccc>
   3b4ec:	ldr	r0, [fp, #20]
   3b4f0:	mov	r9, r8
   3b4f4:	mov	r8, #0
   3b4f8:	add	ip, r0, #4
   3b4fc:	sub	r0, fp, #136	; 0x88
   3b500:	orr	r7, r0, #4
   3b504:	sub	r0, fp, #96	; 0x60
   3b508:	orr	r0, r0, #4
   3b50c:	str	r0, [sp, #48]	; 0x30
   3b510:	ldr	r0, [r9], #4
   3b514:	str	r0, [sp, #56]	; 0x38
   3b518:	ldr	r6, [sp, #56]	; 0x38
   3b51c:	ldr	r1, [sp, #52]	; 0x34
   3b520:	cmp	r2, #1
   3b524:	add	r0, r6, r5
   3b528:	add	r3, sl, r6
   3b52c:	blt	3b568 <GetDataSlab+0xf6ec>
   3b530:	ldr	r1, [sp, #68]	; 0x44
   3b534:	ldr	r6, [fp, #20]
   3b538:	mov	r5, #0
   3b53c:	add	r1, r1, r8, lsl #2
   3b540:	ldrb	r2, [r3, r5]
   3b544:	str	r2, [r1, r5, lsl #2]
   3b548:	add	r5, r5, #1
   3b54c:	ldr	r2, [r6]
   3b550:	cmp	r5, r2
   3b554:	blt	3b540 <GetDataSlab+0xf6c4>
   3b558:	ldr	r1, [fp, #12]
   3b55c:	ldr	r6, [r1]
   3b560:	ldr	r1, [fp, #8]
   3b564:	ldr	r1, [r1]
   3b568:	str	r1, [sp, #52]	; 0x34
   3b56c:	sub	r1, r1, r6
   3b570:	str	r6, [sp, #56]	; 0x38
   3b574:	add	r5, r0, r1
   3b578:	ldr	r0, [fp, #24]
   3b57c:	add	sl, r3, r1
   3b580:	cmp	r0, #2
   3b584:	blt	3b62c <GetDataSlab+0xf7b0>
   3b588:	mov	r1, #0
   3b58c:	mov	r0, r1
   3b590:	ldr	r1, [r7, r1, lsl #2]
   3b594:	add	r1, r1, #1
   3b598:	str	r1, [r7, r0, lsl #2]
   3b59c:	ldr	r6, [ip, r0, lsl #2]
   3b5a0:	sdiv	lr, r1, r6
   3b5a4:	mls	r1, lr, r6, r1
   3b5a8:	cmp	r1, #0
   3b5ac:	bne	3b61c <GetDataSlab+0xf7a0>
   3b5b0:	mov	r1, #0
   3b5b4:	sub	r3, fp, #176	; 0xb0
   3b5b8:	str	r1, [r7, r0, lsl #2]
   3b5bc:	add	r1, r3, r0, lsl #2
   3b5c0:	ldr	r1, [r1, #4]
   3b5c4:	sdiv	r6, r5, r1
   3b5c8:	mls	r6, r6, r1, r5
   3b5cc:	cmp	r6, #0
   3b5d0:	beq	3b5f0 <GetDataSlab+0xf774>
   3b5d4:	ldr	r4, [r3, r0, lsl #2]
   3b5d8:	ldr	r3, [r9, r0, lsl #2]
   3b5dc:	sub	r1, r1, r6
   3b5e0:	mla	r1, r3, r4, r1
   3b5e4:	add	r5, r1, r5
   3b5e8:	add	sl, sl, r1
   3b5ec:	b	3b604 <GetDataSlab+0xf788>
   3b5f0:	ldr	r1, [r9, r0, lsl #2]
   3b5f4:	cmp	r1, #0
   3b5f8:	ldrne	r3, [r3, r0, lsl #2]
   3b5fc:	mlane	r5, r3, r1, r5
   3b600:	mlane	sl, r3, r1, sl
   3b604:	ldr	r3, [fp, #24]
   3b608:	add	r1, r0, #1
   3b60c:	add	r0, r0, #2
   3b610:	cmp	r0, r3
   3b614:	blt	3b58c <GetDataSlab+0xf710>
   3b618:	b	3b62c <GetDataSlab+0xf7b0>
   3b61c:	ldr	r1, [sp, #48]	; 0x30
   3b620:	ldr	r0, [r1, r0, lsl #2]
   3b624:	add	sl, sl, r0
   3b628:	add	r5, r0, r5
   3b62c:	ldr	r1, [sp, #60]	; 0x3c
   3b630:	add	r8, r2, r8
   3b634:	mov	r0, #0
   3b638:	cmp	r8, r1
   3b63c:	blt	3b518 <GetDataSlab+0xf69c>
   3b640:	b	2e97c <GetDataSlab+0x2b00>
   3b644:	ldr	r4, [r3]
   3b648:	ldr	r9, [fp, #8]
   3b64c:	mov	r5, #0
   3b650:	sub	r3, fp, #176	; 0xb0
   3b654:	sub	sl, fp, #96	; 0x60
   3b658:	sub	r0, r4, #1
   3b65c:	str	r0, [fp, #-96]	; 0xffffffa0
   3b660:	ldr	r0, [r9]
   3b664:	str	r0, [fp, #-176]	; 0xffffff50
   3b668:	str	r0, [sp, #52]	; 0x34
   3b66c:	ldr	r0, [fp, #24]
   3b670:	ldr	r2, [r6]
   3b674:	cmp	r0, #2
   3b678:	mov	r0, r2
   3b67c:	str	r2, [sp, #60]	; 0x3c
   3b680:	blt	3b7f0 <GetDataSlab+0xf974>
   3b684:	ldr	r7, [sp, #52]	; 0x34
   3b688:	sub	r0, r9, #4
   3b68c:	sub	r6, r9, #12
   3b690:	mov	ip, #1
   3b694:	mov	lr, #0
   3b698:	mov	r5, #0
   3b69c:	str	r2, [sp, #60]	; 0x3c
   3b6a0:	mov	r1, r7
   3b6a4:	str	r7, [sp, #48]	; 0x30
   3b6a8:	mov	r1, r2
   3b6ac:	ldr	r1, [fp, #16]
   3b6b0:	add	lr, lr, #1
   3b6b4:	str	r6, [sp, #44]	; 0x2c
   3b6b8:	cmp	lr, #4
   3b6bc:	str	lr, [sp, #40]	; 0x28
   3b6c0:	ldr	r1, [r1, ip, lsl #2]
   3b6c4:	str	r7, [r3, ip, lsl #2]
   3b6c8:	sub	r8, r1, #1
   3b6cc:	str	r8, [sl, ip, lsl #2]
   3b6d0:	ldr	sl, [r9, ip, lsl #2]
   3b6d4:	str	sl, [sp, #36]	; 0x24
   3b6d8:	bcs	3b6e8 <GetDataSlab+0xf86c>
   3b6dc:	mov	r1, sl
   3b6e0:	mov	r3, ip
   3b6e4:	b	3b784 <GetDataSlab+0xf908>
   3b6e8:	vmov.i32	q9, #1	; 0x00000001
   3b6ec:	vmov.i32	q10, #1	; 0x00000001
   3b6f0:	vmov.i32	q8, #1	; 0x00000001
   3b6f4:	bic	r1, lr, #3
   3b6f8:	bic	r9, ip, #3
   3b6fc:	vmov.32	d23[1], sl
   3b700:	vmov.32	d18[0], r7
   3b704:	vmov.32	d20[0], r8
   3b708:	str	r1, [sp, #32]
   3b70c:	sub	r3, ip, r1
   3b710:	mov	r1, r6
   3b714:	mvn	r7, #15
   3b718:	vorr	d16, d18, d18
   3b71c:	vmov.i32	q9, #1	; 0x00000001
   3b720:	vorr	d18, d20, d20
   3b724:	vld1.32	{d20-d21}, [r1], r7
   3b728:	subs	r9, r9, #4
   3b72c:	vrev64.32	q12, q10
   3b730:	vext.8	q12, q12, q12, #8
   3b734:	vext.8	q11, q11, q12, #12
   3b738:	vmul.i32	q9, q9, q12
   3b73c:	vmul.i32	q8, q11, q8
   3b740:	vorr	q11, q12, q12
   3b744:	bne	3b724 <GetDataSlab+0xf8a8>
   3b748:	ldr	r1, [sp, #32]
   3b74c:	vext.8	q11, q9, q8, #8
   3b750:	vext.8	q12, q8, q8, #8
   3b754:	vmul.i32	q0, q9, q11
   3b758:	vmul.i32	q1, q8, q12
   3b75c:	vmul.i32	q8, q0, d0[1]
   3b760:	vmul.i32	q9, q1, d2[1]
   3b764:	vmov.32	r8, d16[0]
   3b768:	vmov.32	r7, d18[0]
   3b76c:	cmp	lr, r1
   3b770:	bne	3b77c <GetDataSlab+0xf900>
   3b774:	ldr	r9, [fp, #8]
   3b778:	b	3b798 <GetDataSlab+0xf91c>
   3b77c:	ldr	r9, [fp, #8]
   3b780:	vmov.32	r1, d20[0]
   3b784:	mul	r7, r1, r7
   3b788:	ldr	r1, [r0, r3, lsl #2]
   3b78c:	subs	r3, r3, #1
   3b790:	mul	r8, r8, r1
   3b794:	bne	3b784 <GetDataSlab+0xf908>
   3b798:	sub	sl, fp, #96	; 0x60
   3b79c:	sub	r3, fp, #176	; 0xb0
   3b7a0:	ldr	r6, [sp, #48]	; 0x30
   3b7a4:	ldr	lr, [sp, #60]	; 0x3c
   3b7a8:	str	r7, [sp, #48]	; 0x30
   3b7ac:	str	r8, [sl, ip, lsl #2]
   3b7b0:	ldr	r8, [fp, #12]
   3b7b4:	str	r7, [r3, ip, lsl #2]
   3b7b8:	ldr	r7, [sp, #36]	; 0x24
   3b7bc:	ldr	r1, [r8, ip, lsl #2]
   3b7c0:	mla	r5, r1, r6, r5
   3b7c4:	ldr	r1, [fp, #20]
   3b7c8:	ldr	r6, [sp, #44]	; 0x2c
   3b7cc:	ldr	r1, [r1, ip, lsl #2]
   3b7d0:	add	ip, ip, #1
   3b7d4:	add	r6, r6, #4
   3b7d8:	mul	lr, r1, lr
   3b7dc:	ldr	r1, [fp, #24]
   3b7e0:	str	lr, [sp, #60]	; 0x3c
   3b7e4:	ldr	lr, [sp, #40]	; 0x28
   3b7e8:	cmp	ip, r1
   3b7ec:	bne	3b6ac <GetDataSlab+0xf830>
   3b7f0:	ldr	r0, [sp, #56]	; 0x38
   3b7f4:	cmp	r4, #1
   3b7f8:	add	sl, r0, r5, lsl #1
   3b7fc:	bne	4880c <GetDataSlab+0x1c990>
   3b800:	ldr	r0, [sp, #60]	; 0x3c
   3b804:	cmp	r0, #1
   3b808:	blt	51b5c <GetDataSlab+0x25ce0>
   3b80c:	ldr	r0, [fp, #20]
   3b810:	mov	r9, r8
   3b814:	mov	lr, #0
   3b818:	add	ip, r0, #4
   3b81c:	sub	r0, fp, #136	; 0x88
   3b820:	orr	r7, r0, #4
   3b824:	sub	r0, fp, #96	; 0x60
   3b828:	orr	r0, r0, #4
   3b82c:	str	r0, [sp, #48]	; 0x30
   3b830:	ldr	r0, [r9], #4
   3b834:	str	r0, [sp, #56]	; 0x38
   3b838:	ldr	r3, [sp, #56]	; 0x38
   3b83c:	ldr	r1, [sp, #52]	; 0x34
   3b840:	cmp	r2, #1
   3b844:	add	r8, r3, r5
   3b848:	add	r0, sl, r3, lsl #1
   3b84c:	blt	3b88c <GetDataSlab+0xfa10>
   3b850:	ldr	r1, [sp, #68]	; 0x44
   3b854:	ldr	r4, [fp, #20]
   3b858:	mov	r3, r0
   3b85c:	add	r5, r1, lr, lsl #2
   3b860:	mov	r1, #0
   3b864:	ldrsh	r2, [r3], #2
   3b868:	str	r2, [r5, r1, lsl #2]
   3b86c:	add	r1, r1, #1
   3b870:	ldr	r2, [r4]
   3b874:	cmp	r1, r2
   3b878:	blt	3b864 <GetDataSlab+0xf9e8>
   3b87c:	ldr	r1, [fp, #12]
   3b880:	ldr	r3, [r1]
   3b884:	ldr	r1, [fp, #8]
   3b888:	ldr	r1, [r1]
   3b88c:	str	r1, [sp, #52]	; 0x34
   3b890:	sub	r1, r1, r3
   3b894:	str	r3, [sp, #56]	; 0x38
   3b898:	add	sl, r0, r1, lsl #1
   3b89c:	ldr	r0, [fp, #24]
   3b8a0:	add	r5, r8, r1
   3b8a4:	cmp	r0, #2
   3b8a8:	blt	3b958 <GetDataSlab+0xfadc>
   3b8ac:	mov	r1, #0
   3b8b0:	mov	r8, #0
   3b8b4:	mov	r0, r1
   3b8b8:	ldr	r1, [r7, r1, lsl #2]
   3b8bc:	add	r1, r1, #1
   3b8c0:	str	r1, [r7, r0, lsl #2]
   3b8c4:	ldr	r6, [ip, r0, lsl #2]
   3b8c8:	sdiv	r4, r1, r6
   3b8cc:	mls	r1, r4, r6, r1
   3b8d0:	cmp	r1, #0
   3b8d4:	bne	3b948 <GetDataSlab+0xfacc>
   3b8d8:	sub	r3, fp, #176	; 0xb0
   3b8dc:	str	r8, [r7, r0, lsl #2]
   3b8e0:	add	r1, r3, r0, lsl #2
   3b8e4:	ldr	r1, [r1, #4]
   3b8e8:	sdiv	r4, r5, r1
   3b8ec:	mls	r6, r4, r1, r5
   3b8f0:	cmp	r6, #0
   3b8f4:	beq	3b910 <GetDataSlab+0xfa94>
   3b8f8:	ldr	r4, [r3, r0, lsl #2]
   3b8fc:	ldr	r3, [r9, r0, lsl #2]
   3b900:	sub	r1, r1, r6
   3b904:	mla	r1, r3, r4, r1
   3b908:	add	r5, r1, r5
   3b90c:	b	3b92c <GetDataSlab+0xfab0>
   3b910:	ldr	r1, [r9, r0, lsl #2]
   3b914:	cmp	r1, #0
   3b918:	beq	3b930 <GetDataSlab+0xfab4>
   3b91c:	sub	r3, fp, #176	; 0xb0
   3b920:	ldr	r3, [r3, r0, lsl #2]
   3b924:	mla	r5, r3, r1, r5
   3b928:	mul	r1, r3, r1
   3b92c:	add	sl, sl, r1, lsl #1
   3b930:	ldr	r3, [fp, #24]
   3b934:	add	r1, r0, #1
   3b938:	add	r0, r0, #2
   3b93c:	cmp	r0, r3
   3b940:	blt	3b8b4 <GetDataSlab+0xfa38>
   3b944:	b	3b958 <GetDataSlab+0xfadc>
   3b948:	ldr	r1, [sp, #48]	; 0x30
   3b94c:	ldr	r0, [r1, r0, lsl #2]
   3b950:	add	sl, sl, r0, lsl #1
   3b954:	add	r5, r0, r5
   3b958:	ldr	r1, [sp, #60]	; 0x3c
   3b95c:	add	lr, r2, lr
   3b960:	mov	r0, #0
   3b964:	cmp	lr, r1
   3b968:	blt	3b838 <GetDataSlab+0xf9bc>
   3b96c:	b	2e97c <GetDataSlab+0x2b00>
   3b970:	ldr	r4, [r3]
   3b974:	ldr	r9, [fp, #8]
   3b978:	mov	r5, #0
   3b97c:	sub	r3, fp, #176	; 0xb0
   3b980:	sub	sl, fp, #96	; 0x60
   3b984:	sub	r0, r4, #1
   3b988:	str	r0, [fp, #-96]	; 0xffffffa0
   3b98c:	ldr	r0, [r9]
   3b990:	str	r0, [fp, #-176]	; 0xffffff50
   3b994:	str	r0, [sp, #52]	; 0x34
   3b998:	ldr	r0, [fp, #24]
   3b99c:	ldr	r2, [r6]
   3b9a0:	cmp	r0, #2
   3b9a4:	mov	r0, r2
   3b9a8:	str	r2, [sp, #60]	; 0x3c
   3b9ac:	blt	3bb1c <GetDataSlab+0xfca0>
   3b9b0:	ldr	r7, [sp, #52]	; 0x34
   3b9b4:	sub	r0, r9, #4
   3b9b8:	sub	r6, r9, #12
   3b9bc:	mov	ip, #1
   3b9c0:	mov	lr, #0
   3b9c4:	mov	r5, #0
   3b9c8:	str	r2, [sp, #60]	; 0x3c
   3b9cc:	mov	r1, r7
   3b9d0:	str	r7, [sp, #48]	; 0x30
   3b9d4:	mov	r1, r2
   3b9d8:	ldr	r1, [fp, #16]
   3b9dc:	add	lr, lr, #1
   3b9e0:	str	r6, [sp, #44]	; 0x2c
   3b9e4:	cmp	lr, #4
   3b9e8:	str	lr, [sp, #40]	; 0x28
   3b9ec:	ldr	r1, [r1, ip, lsl #2]
   3b9f0:	str	r7, [r3, ip, lsl #2]
   3b9f4:	sub	r8, r1, #1
   3b9f8:	str	r8, [sl, ip, lsl #2]
   3b9fc:	ldr	sl, [r9, ip, lsl #2]
   3ba00:	str	sl, [sp, #36]	; 0x24
   3ba04:	bcs	3ba14 <GetDataSlab+0xfb98>
   3ba08:	mov	r1, sl
   3ba0c:	mov	r3, ip
   3ba10:	b	3bab0 <GetDataSlab+0xfc34>
   3ba14:	vmov.i32	q9, #1	; 0x00000001
   3ba18:	vmov.i32	q10, #1	; 0x00000001
   3ba1c:	vmov.i32	q8, #1	; 0x00000001
   3ba20:	bic	r1, lr, #3
   3ba24:	bic	r9, ip, #3
   3ba28:	vmov.32	d23[1], sl
   3ba2c:	vmov.32	d18[0], r7
   3ba30:	vmov.32	d20[0], r8
   3ba34:	str	r1, [sp, #32]
   3ba38:	sub	r3, ip, r1
   3ba3c:	mov	r1, r6
   3ba40:	mvn	r7, #15
   3ba44:	vorr	d16, d18, d18
   3ba48:	vmov.i32	q9, #1	; 0x00000001
   3ba4c:	vorr	d18, d20, d20
   3ba50:	vld1.32	{d20-d21}, [r1], r7
   3ba54:	subs	r9, r9, #4
   3ba58:	vrev64.32	q12, q10
   3ba5c:	vext.8	q12, q12, q12, #8
   3ba60:	vext.8	q11, q11, q12, #12
   3ba64:	vmul.i32	q9, q9, q12
   3ba68:	vmul.i32	q8, q11, q8
   3ba6c:	vorr	q11, q12, q12
   3ba70:	bne	3ba50 <GetDataSlab+0xfbd4>
   3ba74:	ldr	r1, [sp, #32]
   3ba78:	vext.8	q11, q9, q8, #8
   3ba7c:	vext.8	q12, q8, q8, #8
   3ba80:	vmul.i32	q0, q9, q11
   3ba84:	vmul.i32	q1, q8, q12
   3ba88:	vmul.i32	q8, q0, d0[1]
   3ba8c:	vmul.i32	q9, q1, d2[1]
   3ba90:	vmov.32	r8, d16[0]
   3ba94:	vmov.32	r7, d18[0]
   3ba98:	cmp	lr, r1
   3ba9c:	bne	3baa8 <GetDataSlab+0xfc2c>
   3baa0:	ldr	r9, [fp, #8]
   3baa4:	b	3bac4 <GetDataSlab+0xfc48>
   3baa8:	ldr	r9, [fp, #8]
   3baac:	vmov.32	r1, d20[0]
   3bab0:	mul	r7, r1, r7
   3bab4:	ldr	r1, [r0, r3, lsl #2]
   3bab8:	subs	r3, r3, #1
   3babc:	mul	r8, r8, r1
   3bac0:	bne	3bab0 <GetDataSlab+0xfc34>
   3bac4:	sub	sl, fp, #96	; 0x60
   3bac8:	sub	r3, fp, #176	; 0xb0
   3bacc:	ldr	r6, [sp, #48]	; 0x30
   3bad0:	ldr	lr, [sp, #60]	; 0x3c
   3bad4:	str	r7, [sp, #48]	; 0x30
   3bad8:	str	r8, [sl, ip, lsl #2]
   3badc:	ldr	r8, [fp, #12]
   3bae0:	str	r7, [r3, ip, lsl #2]
   3bae4:	ldr	r7, [sp, #36]	; 0x24
   3bae8:	ldr	r1, [r8, ip, lsl #2]
   3baec:	mla	r5, r1, r6, r5
   3baf0:	ldr	r1, [fp, #20]
   3baf4:	ldr	r6, [sp, #44]	; 0x2c
   3baf8:	ldr	r1, [r1, ip, lsl #2]
   3bafc:	add	ip, ip, #1
   3bb00:	add	r6, r6, #4
   3bb04:	mul	lr, r1, lr
   3bb08:	ldr	r1, [fp, #24]
   3bb0c:	str	lr, [sp, #60]	; 0x3c
   3bb10:	ldr	lr, [sp, #40]	; 0x28
   3bb14:	cmp	ip, r1
   3bb18:	bne	3b9d8 <GetDataSlab+0xfb5c>
   3bb1c:	ldr	r0, [sp, #56]	; 0x38
   3bb20:	cmp	r4, #1
   3bb24:	add	sl, r0, r5, lsl #1
   3bb28:	bne	489a8 <GetDataSlab+0x1cb2c>
   3bb2c:	ldr	r0, [sp, #60]	; 0x3c
   3bb30:	cmp	r0, #1
   3bb34:	blt	51b70 <GetDataSlab+0x25cf4>
   3bb38:	ldr	r0, [fp, #20]
   3bb3c:	mov	r9, r8
   3bb40:	mov	lr, #0
   3bb44:	add	ip, r0, #4
   3bb48:	sub	r0, fp, #136	; 0x88
   3bb4c:	orr	r7, r0, #4
   3bb50:	sub	r0, fp, #96	; 0x60
   3bb54:	orr	r0, r0, #4
   3bb58:	str	r0, [sp, #48]	; 0x30
   3bb5c:	ldr	r0, [r9], #4
   3bb60:	str	r0, [sp, #56]	; 0x38
   3bb64:	ldr	r3, [sp, #56]	; 0x38
   3bb68:	ldr	r1, [sp, #52]	; 0x34
   3bb6c:	cmp	r2, #1
   3bb70:	add	r8, r3, r5
   3bb74:	add	r0, sl, r3, lsl #1
   3bb78:	blt	3bbb8 <GetDataSlab+0xfd3c>
   3bb7c:	ldr	r1, [sp, #68]	; 0x44
   3bb80:	ldr	r4, [fp, #20]
   3bb84:	mov	r3, r0
   3bb88:	add	r5, r1, lr, lsl #2
   3bb8c:	mov	r1, #0
   3bb90:	ldrh	r2, [r3], #2
   3bb94:	str	r2, [r5, r1, lsl #2]
   3bb98:	add	r1, r1, #1
   3bb9c:	ldr	r2, [r4]
   3bba0:	cmp	r1, r2
   3bba4:	blt	3bb90 <GetDataSlab+0xfd14>
   3bba8:	ldr	r1, [fp, #12]
   3bbac:	ldr	r3, [r1]
   3bbb0:	ldr	r1, [fp, #8]
   3bbb4:	ldr	r1, [r1]
   3bbb8:	str	r1, [sp, #52]	; 0x34
   3bbbc:	sub	r1, r1, r3
   3bbc0:	str	r3, [sp, #56]	; 0x38
   3bbc4:	add	sl, r0, r1, lsl #1
   3bbc8:	ldr	r0, [fp, #24]
   3bbcc:	add	r5, r8, r1
   3bbd0:	cmp	r0, #2
   3bbd4:	blt	3bc84 <GetDataSlab+0xfe08>
   3bbd8:	mov	r1, #0
   3bbdc:	mov	r8, #0
   3bbe0:	mov	r0, r1
   3bbe4:	ldr	r1, [r7, r1, lsl #2]
   3bbe8:	add	r1, r1, #1
   3bbec:	str	r1, [r7, r0, lsl #2]
   3bbf0:	ldr	r6, [ip, r0, lsl #2]
   3bbf4:	sdiv	r4, r1, r6
   3bbf8:	mls	r1, r4, r6, r1
   3bbfc:	cmp	r1, #0
   3bc00:	bne	3bc74 <GetDataSlab+0xfdf8>
   3bc04:	sub	r3, fp, #176	; 0xb0
   3bc08:	str	r8, [r7, r0, lsl #2]
   3bc0c:	add	r1, r3, r0, lsl #2
   3bc10:	ldr	r1, [r1, #4]
   3bc14:	sdiv	r4, r5, r1
   3bc18:	mls	r6, r4, r1, r5
   3bc1c:	cmp	r6, #0
   3bc20:	beq	3bc3c <GetDataSlab+0xfdc0>
   3bc24:	ldr	r4, [r3, r0, lsl #2]
   3bc28:	ldr	r3, [r9, r0, lsl #2]
   3bc2c:	sub	r1, r1, r6
   3bc30:	mla	r1, r3, r4, r1
   3bc34:	add	r5, r1, r5
   3bc38:	b	3bc58 <GetDataSlab+0xfddc>
   3bc3c:	ldr	r1, [r9, r0, lsl #2]
   3bc40:	cmp	r1, #0
   3bc44:	beq	3bc5c <GetDataSlab+0xfde0>
   3bc48:	sub	r3, fp, #176	; 0xb0
   3bc4c:	ldr	r3, [r3, r0, lsl #2]
   3bc50:	mla	r5, r3, r1, r5
   3bc54:	mul	r1, r3, r1
   3bc58:	add	sl, sl, r1, lsl #1
   3bc5c:	ldr	r3, [fp, #24]
   3bc60:	add	r1, r0, #1
   3bc64:	add	r0, r0, #2
   3bc68:	cmp	r0, r3
   3bc6c:	blt	3bbe0 <GetDataSlab+0xfd64>
   3bc70:	b	3bc84 <GetDataSlab+0xfe08>
   3bc74:	ldr	r1, [sp, #48]	; 0x30
   3bc78:	ldr	r0, [r1, r0, lsl #2]
   3bc7c:	add	sl, sl, r0, lsl #1
   3bc80:	add	r5, r0, r5
   3bc84:	ldr	r1, [sp, #60]	; 0x3c
   3bc88:	add	lr, r2, lr
   3bc8c:	mov	r0, #0
   3bc90:	cmp	lr, r1
   3bc94:	blt	3bb64 <GetDataSlab+0xfce8>
   3bc98:	b	2e97c <GetDataSlab+0x2b00>
   3bc9c:	ldr	r4, [r3]
   3bca0:	ldr	r9, [fp, #8]
   3bca4:	mov	r5, #0
   3bca8:	sub	r3, fp, #176	; 0xb0
   3bcac:	sub	sl, fp, #96	; 0x60
   3bcb0:	sub	r0, r4, #1
   3bcb4:	str	r0, [fp, #-96]	; 0xffffffa0
   3bcb8:	ldr	r0, [r9]
   3bcbc:	str	r0, [fp, #-176]	; 0xffffff50
   3bcc0:	str	r0, [sp, #52]	; 0x34
   3bcc4:	ldr	r0, [fp, #24]
   3bcc8:	ldr	r2, [r6]
   3bccc:	cmp	r0, #2
   3bcd0:	mov	r0, r2
   3bcd4:	str	r2, [sp, #60]	; 0x3c
   3bcd8:	blt	3be48 <GetDataSlab+0xffcc>
   3bcdc:	ldr	r7, [sp, #52]	; 0x34
   3bce0:	sub	r0, r9, #4
   3bce4:	sub	r6, r9, #12
   3bce8:	mov	ip, #1
   3bcec:	mov	lr, #0
   3bcf0:	mov	r5, #0
   3bcf4:	str	r2, [sp, #60]	; 0x3c
   3bcf8:	mov	r1, r7
   3bcfc:	str	r7, [sp, #48]	; 0x30
   3bd00:	mov	r1, r2
   3bd04:	ldr	r1, [fp, #16]
   3bd08:	add	lr, lr, #1
   3bd0c:	str	r6, [sp, #44]	; 0x2c
   3bd10:	cmp	lr, #4
   3bd14:	str	lr, [sp, #40]	; 0x28
   3bd18:	ldr	r1, [r1, ip, lsl #2]
   3bd1c:	str	r7, [r3, ip, lsl #2]
   3bd20:	sub	r8, r1, #1
   3bd24:	str	r8, [sl, ip, lsl #2]
   3bd28:	ldr	sl, [r9, ip, lsl #2]
   3bd2c:	str	sl, [sp, #36]	; 0x24
   3bd30:	bcs	3bd40 <GetDataSlab+0xfec4>
   3bd34:	mov	r1, sl
   3bd38:	mov	r3, ip
   3bd3c:	b	3bddc <GetDataSlab+0xff60>
   3bd40:	vmov.i32	q9, #1	; 0x00000001
   3bd44:	vmov.i32	q10, #1	; 0x00000001
   3bd48:	vmov.i32	q8, #1	; 0x00000001
   3bd4c:	bic	r1, lr, #3
   3bd50:	bic	r9, ip, #3
   3bd54:	vmov.32	d23[1], sl
   3bd58:	vmov.32	d18[0], r7
   3bd5c:	vmov.32	d20[0], r8
   3bd60:	str	r1, [sp, #32]
   3bd64:	sub	r3, ip, r1
   3bd68:	mov	r1, r6
   3bd6c:	mvn	r7, #15
   3bd70:	vorr	d16, d18, d18
   3bd74:	vmov.i32	q9, #1	; 0x00000001
   3bd78:	vorr	d18, d20, d20
   3bd7c:	vld1.32	{d20-d21}, [r1], r7
   3bd80:	subs	r9, r9, #4
   3bd84:	vrev64.32	q12, q10
   3bd88:	vext.8	q12, q12, q12, #8
   3bd8c:	vext.8	q11, q11, q12, #12
   3bd90:	vmul.i32	q9, q9, q12
   3bd94:	vmul.i32	q8, q11, q8
   3bd98:	vorr	q11, q12, q12
   3bd9c:	bne	3bd7c <GetDataSlab+0xff00>
   3bda0:	ldr	r1, [sp, #32]
   3bda4:	vext.8	q11, q9, q8, #8
   3bda8:	vext.8	q12, q8, q8, #8
   3bdac:	vmul.i32	q0, q9, q11
   3bdb0:	vmul.i32	q1, q8, q12
   3bdb4:	vmul.i32	q8, q0, d0[1]
   3bdb8:	vmul.i32	q9, q1, d2[1]
   3bdbc:	vmov.32	r8, d16[0]
   3bdc0:	vmov.32	r7, d18[0]
   3bdc4:	cmp	lr, r1
   3bdc8:	bne	3bdd4 <GetDataSlab+0xff58>
   3bdcc:	ldr	r9, [fp, #8]
   3bdd0:	b	3bdf0 <GetDataSlab+0xff74>
   3bdd4:	ldr	r9, [fp, #8]
   3bdd8:	vmov.32	r1, d20[0]
   3bddc:	mul	r7, r1, r7
   3bde0:	ldr	r1, [r0, r3, lsl #2]
   3bde4:	subs	r3, r3, #1
   3bde8:	mul	r8, r8, r1
   3bdec:	bne	3bddc <GetDataSlab+0xff60>
   3bdf0:	sub	sl, fp, #96	; 0x60
   3bdf4:	sub	r3, fp, #176	; 0xb0
   3bdf8:	ldr	r6, [sp, #48]	; 0x30
   3bdfc:	ldr	lr, [sp, #60]	; 0x3c
   3be00:	str	r7, [sp, #48]	; 0x30
   3be04:	str	r8, [sl, ip, lsl #2]
   3be08:	ldr	r8, [fp, #12]
   3be0c:	str	r7, [r3, ip, lsl #2]
   3be10:	ldr	r7, [sp, #36]	; 0x24
   3be14:	ldr	r1, [r8, ip, lsl #2]
   3be18:	mla	r5, r1, r6, r5
   3be1c:	ldr	r1, [fp, #20]
   3be20:	ldr	r6, [sp, #44]	; 0x2c
   3be24:	ldr	r1, [r1, ip, lsl #2]
   3be28:	add	ip, ip, #1
   3be2c:	add	r6, r6, #4
   3be30:	mul	lr, r1, lr
   3be34:	ldr	r1, [fp, #24]
   3be38:	str	lr, [sp, #60]	; 0x3c
   3be3c:	ldr	lr, [sp, #40]	; 0x28
   3be40:	cmp	ip, r1
   3be44:	bne	3bd04 <GetDataSlab+0xfe88>
   3be48:	ldr	r0, [sp, #56]	; 0x38
   3be4c:	cmp	r4, #1
   3be50:	add	sl, r0, r5, lsl #2
   3be54:	bne	48b44 <GetDataSlab+0x1ccc8>
   3be58:	ldr	r0, [sp, #60]	; 0x3c
   3be5c:	cmp	r0, #1
   3be60:	blt	51b84 <GetDataSlab+0x25d08>
   3be64:	ldr	r0, [fp, #20]
   3be68:	mov	r9, r8
   3be6c:	mov	r8, #0
   3be70:	add	ip, r0, #4
   3be74:	sub	r0, fp, #136	; 0x88
   3be78:	orr	r7, r0, #4
   3be7c:	sub	r0, fp, #96	; 0x60
   3be80:	orr	r0, r0, #4
   3be84:	str	r0, [sp, #48]	; 0x30
   3be88:	ldr	r0, [r9], #4
   3be8c:	str	r0, [sp, #56]	; 0x38
   3be90:	ldr	r6, [sp, #56]	; 0x38
   3be94:	ldr	r1, [sp, #52]	; 0x34
   3be98:	cmp	r2, #1
   3be9c:	add	r0, r6, r5
   3bea0:	add	r3, sl, r6, lsl #2
   3bea4:	blt	3bee0 <GetDataSlab+0x10064>
   3bea8:	ldr	r1, [sp, #68]	; 0x44
   3beac:	ldr	r6, [fp, #20]
   3beb0:	mov	r5, #0
   3beb4:	add	r1, r1, r8, lsl #2
   3beb8:	ldr	r2, [r3, r5, lsl #2]
   3bebc:	str	r2, [r1, r5, lsl #2]
   3bec0:	add	r5, r5, #1
   3bec4:	ldr	r2, [r6]
   3bec8:	cmp	r5, r2
   3becc:	blt	3beb8 <GetDataSlab+0x1003c>
   3bed0:	ldr	r1, [fp, #12]
   3bed4:	ldr	r6, [r1]
   3bed8:	ldr	r1, [fp, #8]
   3bedc:	ldr	r1, [r1]
   3bee0:	str	r1, [sp, #52]	; 0x34
   3bee4:	sub	r1, r1, r6
   3bee8:	str	r6, [sp, #56]	; 0x38
   3beec:	add	r5, r0, r1
   3bef0:	ldr	r0, [fp, #24]
   3bef4:	add	sl, r3, r1, lsl #2
   3bef8:	cmp	r0, #2
   3befc:	blt	3bfa8 <GetDataSlab+0x1012c>
   3bf00:	mov	r1, #0
   3bf04:	mov	r0, r1
   3bf08:	ldr	r1, [r7, r1, lsl #2]
   3bf0c:	add	r1, r1, #1
   3bf10:	str	r1, [r7, r0, lsl #2]
   3bf14:	ldr	r6, [ip, r0, lsl #2]
   3bf18:	sdiv	lr, r1, r6
   3bf1c:	mls	r1, lr, r6, r1
   3bf20:	cmp	r1, #0
   3bf24:	bne	3bf98 <GetDataSlab+0x1011c>
   3bf28:	mov	r1, #0
   3bf2c:	sub	r3, fp, #176	; 0xb0
   3bf30:	str	r1, [r7, r0, lsl #2]
   3bf34:	add	r1, r3, r0, lsl #2
   3bf38:	ldr	r1, [r1, #4]
   3bf3c:	sdiv	r6, r5, r1
   3bf40:	mls	r6, r6, r1, r5
   3bf44:	cmp	r6, #0
   3bf48:	beq	3bf64 <GetDataSlab+0x100e8>
   3bf4c:	ldr	r4, [r3, r0, lsl #2]
   3bf50:	ldr	r3, [r9, r0, lsl #2]
   3bf54:	sub	r1, r1, r6
   3bf58:	mla	r1, r3, r4, r1
   3bf5c:	add	r5, r1, r5
   3bf60:	b	3bf7c <GetDataSlab+0x10100>
   3bf64:	ldr	r1, [r9, r0, lsl #2]
   3bf68:	cmp	r1, #0
   3bf6c:	beq	3bf80 <GetDataSlab+0x10104>
   3bf70:	ldr	r3, [r3, r0, lsl #2]
   3bf74:	mla	r5, r3, r1, r5
   3bf78:	mul	r1, r3, r1
   3bf7c:	add	sl, sl, r1, lsl #2
   3bf80:	ldr	r3, [fp, #24]
   3bf84:	add	r1, r0, #1
   3bf88:	add	r0, r0, #2
   3bf8c:	cmp	r0, r3
   3bf90:	blt	3bf04 <GetDataSlab+0x10088>
   3bf94:	b	3bfa8 <GetDataSlab+0x1012c>
   3bf98:	ldr	r1, [sp, #48]	; 0x30
   3bf9c:	ldr	r0, [r1, r0, lsl #2]
   3bfa0:	add	sl, sl, r0, lsl #2
   3bfa4:	add	r5, r0, r5
   3bfa8:	ldr	r1, [sp, #60]	; 0x3c
   3bfac:	add	r8, r2, r8
   3bfb0:	mov	r0, #0
   3bfb4:	cmp	r8, r1
   3bfb8:	blt	3be90 <GetDataSlab+0x10014>
   3bfbc:	b	2e97c <GetDataSlab+0x2b00>
   3bfc0:	ldr	r4, [r3]
   3bfc4:	ldr	r9, [fp, #8]
   3bfc8:	mov	r5, #0
   3bfcc:	sub	r3, fp, #176	; 0xb0
   3bfd0:	sub	sl, fp, #96	; 0x60
   3bfd4:	sub	r0, r4, #1
   3bfd8:	str	r0, [fp, #-96]	; 0xffffffa0
   3bfdc:	ldr	r0, [r9]
   3bfe0:	str	r0, [fp, #-176]	; 0xffffff50
   3bfe4:	str	r0, [sp, #52]	; 0x34
   3bfe8:	ldr	r0, [fp, #24]
   3bfec:	ldr	r2, [r6]
   3bff0:	cmp	r0, #2
   3bff4:	mov	r0, r2
   3bff8:	str	r2, [sp, #60]	; 0x3c
   3bffc:	blt	3c16c <GetDataSlab+0x102f0>
   3c000:	ldr	r7, [sp, #52]	; 0x34
   3c004:	sub	r0, r9, #4
   3c008:	sub	r6, r9, #12
   3c00c:	mov	ip, #1
   3c010:	mov	lr, #0
   3c014:	mov	r5, #0
   3c018:	str	r2, [sp, #60]	; 0x3c
   3c01c:	mov	r1, r7
   3c020:	str	r7, [sp, #48]	; 0x30
   3c024:	mov	r1, r2
   3c028:	ldr	r1, [fp, #16]
   3c02c:	add	lr, lr, #1
   3c030:	str	r6, [sp, #44]	; 0x2c
   3c034:	cmp	lr, #4
   3c038:	str	lr, [sp, #40]	; 0x28
   3c03c:	ldr	r1, [r1, ip, lsl #2]
   3c040:	str	r7, [r3, ip, lsl #2]
   3c044:	sub	r8, r1, #1
   3c048:	str	r8, [sl, ip, lsl #2]
   3c04c:	ldr	sl, [r9, ip, lsl #2]
   3c050:	str	sl, [sp, #36]	; 0x24
   3c054:	bcs	3c064 <GetDataSlab+0x101e8>
   3c058:	mov	r1, sl
   3c05c:	mov	r3, ip
   3c060:	b	3c100 <GetDataSlab+0x10284>
   3c064:	vmov.i32	q9, #1	; 0x00000001
   3c068:	vmov.i32	q10, #1	; 0x00000001
   3c06c:	vmov.i32	q8, #1	; 0x00000001
   3c070:	bic	r1, lr, #3
   3c074:	bic	r9, ip, #3
   3c078:	vmov.32	d23[1], sl
   3c07c:	vmov.32	d18[0], r7
   3c080:	vmov.32	d20[0], r8
   3c084:	str	r1, [sp, #32]
   3c088:	sub	r3, ip, r1
   3c08c:	mov	r1, r6
   3c090:	mvn	r7, #15
   3c094:	vorr	d16, d18, d18
   3c098:	vmov.i32	q9, #1	; 0x00000001
   3c09c:	vorr	d18, d20, d20
   3c0a0:	vld1.32	{d20-d21}, [r1], r7
   3c0a4:	subs	r9, r9, #4
   3c0a8:	vrev64.32	q12, q10
   3c0ac:	vext.8	q12, q12, q12, #8
   3c0b0:	vext.8	q11, q11, q12, #12
   3c0b4:	vmul.i32	q9, q9, q12
   3c0b8:	vmul.i32	q8, q11, q8
   3c0bc:	vorr	q11, q12, q12
   3c0c0:	bne	3c0a0 <GetDataSlab+0x10224>
   3c0c4:	ldr	r1, [sp, #32]
   3c0c8:	vext.8	q11, q9, q8, #8
   3c0cc:	vext.8	q12, q8, q8, #8
   3c0d0:	vmul.i32	q0, q9, q11
   3c0d4:	vmul.i32	q1, q8, q12
   3c0d8:	vmul.i32	q8, q0, d0[1]
   3c0dc:	vmul.i32	q9, q1, d2[1]
   3c0e0:	vmov.32	r8, d16[0]
   3c0e4:	vmov.32	r7, d18[0]
   3c0e8:	cmp	lr, r1
   3c0ec:	bne	3c0f8 <GetDataSlab+0x1027c>
   3c0f0:	ldr	r9, [fp, #8]
   3c0f4:	b	3c114 <GetDataSlab+0x10298>
   3c0f8:	ldr	r9, [fp, #8]
   3c0fc:	vmov.32	r1, d20[0]
   3c100:	mul	r7, r1, r7
   3c104:	ldr	r1, [r0, r3, lsl #2]
   3c108:	subs	r3, r3, #1
   3c10c:	mul	r8, r8, r1
   3c110:	bne	3c100 <GetDataSlab+0x10284>
   3c114:	sub	sl, fp, #96	; 0x60
   3c118:	sub	r3, fp, #176	; 0xb0
   3c11c:	ldr	r6, [sp, #48]	; 0x30
   3c120:	ldr	lr, [sp, #60]	; 0x3c
   3c124:	str	r7, [sp, #48]	; 0x30
   3c128:	str	r8, [sl, ip, lsl #2]
   3c12c:	ldr	r8, [fp, #12]
   3c130:	str	r7, [r3, ip, lsl #2]
   3c134:	ldr	r7, [sp, #36]	; 0x24
   3c138:	ldr	r1, [r8, ip, lsl #2]
   3c13c:	mla	r5, r1, r6, r5
   3c140:	ldr	r1, [fp, #20]
   3c144:	ldr	r6, [sp, #44]	; 0x2c
   3c148:	ldr	r1, [r1, ip, lsl #2]
   3c14c:	add	ip, ip, #1
   3c150:	add	r6, r6, #4
   3c154:	mul	lr, r1, lr
   3c158:	ldr	r1, [fp, #24]
   3c15c:	str	lr, [sp, #60]	; 0x3c
   3c160:	ldr	lr, [sp, #40]	; 0x28
   3c164:	cmp	ip, r1
   3c168:	bne	3c028 <GetDataSlab+0x101ac>
   3c16c:	ldr	r0, [sp, #56]	; 0x38
   3c170:	cmp	r4, #1
   3c174:	add	sl, r0, r5, lsl #2
   3c178:	bne	48ce0 <GetDataSlab+0x1ce64>
   3c17c:	ldr	r0, [sp, #60]	; 0x3c
   3c180:	cmp	r0, #1
   3c184:	blt	51b98 <GetDataSlab+0x25d1c>
   3c188:	ldr	r0, [fp, #20]
   3c18c:	mov	r9, r8
   3c190:	mov	r8, #0
   3c194:	add	ip, r0, #4
   3c198:	sub	r0, fp, #136	; 0x88
   3c19c:	orr	r7, r0, #4
   3c1a0:	sub	r0, fp, #96	; 0x60
   3c1a4:	orr	r0, r0, #4
   3c1a8:	str	r0, [sp, #48]	; 0x30
   3c1ac:	ldr	r0, [r9], #4
   3c1b0:	str	r0, [sp, #56]	; 0x38
   3c1b4:	ldr	r6, [sp, #56]	; 0x38
   3c1b8:	ldr	r1, [sp, #52]	; 0x34
   3c1bc:	cmp	r2, #1
   3c1c0:	add	r0, r6, r5
   3c1c4:	add	r3, sl, r6, lsl #2
   3c1c8:	blt	3c204 <GetDataSlab+0x10388>
   3c1cc:	ldr	r1, [sp, #68]	; 0x44
   3c1d0:	ldr	r6, [fp, #20]
   3c1d4:	mov	r5, #0
   3c1d8:	add	r1, r1, r8, lsl #2
   3c1dc:	ldr	r2, [r3, r5, lsl #2]
   3c1e0:	str	r2, [r1, r5, lsl #2]
   3c1e4:	add	r5, r5, #1
   3c1e8:	ldr	r2, [r6]
   3c1ec:	cmp	r5, r2
   3c1f0:	blt	3c1dc <GetDataSlab+0x10360>
   3c1f4:	ldr	r1, [fp, #12]
   3c1f8:	ldr	r6, [r1]
   3c1fc:	ldr	r1, [fp, #8]
   3c200:	ldr	r1, [r1]
   3c204:	str	r1, [sp, #52]	; 0x34
   3c208:	sub	r1, r1, r6
   3c20c:	str	r6, [sp, #56]	; 0x38
   3c210:	add	r5, r0, r1
   3c214:	ldr	r0, [fp, #24]
   3c218:	add	sl, r3, r1, lsl #2
   3c21c:	cmp	r0, #2
   3c220:	blt	3c2cc <GetDataSlab+0x10450>
   3c224:	mov	r1, #0
   3c228:	mov	r0, r1
   3c22c:	ldr	r1, [r7, r1, lsl #2]
   3c230:	add	r1, r1, #1
   3c234:	str	r1, [r7, r0, lsl #2]
   3c238:	ldr	r6, [ip, r0, lsl #2]
   3c23c:	sdiv	lr, r1, r6
   3c240:	mls	r1, lr, r6, r1
   3c244:	cmp	r1, #0
   3c248:	bne	3c2bc <GetDataSlab+0x10440>
   3c24c:	mov	r1, #0
   3c250:	sub	r3, fp, #176	; 0xb0
   3c254:	str	r1, [r7, r0, lsl #2]
   3c258:	add	r1, r3, r0, lsl #2
   3c25c:	ldr	r1, [r1, #4]
   3c260:	sdiv	r6, r5, r1
   3c264:	mls	r6, r6, r1, r5
   3c268:	cmp	r6, #0
   3c26c:	beq	3c288 <GetDataSlab+0x1040c>
   3c270:	ldr	r4, [r3, r0, lsl #2]
   3c274:	ldr	r3, [r9, r0, lsl #2]
   3c278:	sub	r1, r1, r6
   3c27c:	mla	r1, r3, r4, r1
   3c280:	add	r5, r1, r5
   3c284:	b	3c2a0 <GetDataSlab+0x10424>
   3c288:	ldr	r1, [r9, r0, lsl #2]
   3c28c:	cmp	r1, #0
   3c290:	beq	3c2a4 <GetDataSlab+0x10428>
   3c294:	ldr	r3, [r3, r0, lsl #2]
   3c298:	mla	r5, r3, r1, r5
   3c29c:	mul	r1, r3, r1
   3c2a0:	add	sl, sl, r1, lsl #2
   3c2a4:	ldr	r3, [fp, #24]
   3c2a8:	add	r1, r0, #1
   3c2ac:	add	r0, r0, #2
   3c2b0:	cmp	r0, r3
   3c2b4:	blt	3c228 <GetDataSlab+0x103ac>
   3c2b8:	b	3c2cc <GetDataSlab+0x10450>
   3c2bc:	ldr	r1, [sp, #48]	; 0x30
   3c2c0:	ldr	r0, [r1, r0, lsl #2]
   3c2c4:	add	sl, sl, r0, lsl #2
   3c2c8:	add	r5, r0, r5
   3c2cc:	ldr	r1, [sp, #60]	; 0x3c
   3c2d0:	add	r8, r2, r8
   3c2d4:	mov	r0, #0
   3c2d8:	cmp	r8, r1
   3c2dc:	blt	3c1b4 <GetDataSlab+0x10338>
   3c2e0:	b	2e97c <GetDataSlab+0x2b00>
   3c2e4:	ldr	r4, [r3]
   3c2e8:	ldr	r9, [fp, #8]
   3c2ec:	mov	r5, #0
   3c2f0:	sub	r3, fp, #176	; 0xb0
   3c2f4:	sub	sl, fp, #96	; 0x60
   3c2f8:	sub	r0, r4, #1
   3c2fc:	str	r0, [fp, #-96]	; 0xffffffa0
   3c300:	ldr	r0, [r9]
   3c304:	str	r0, [fp, #-176]	; 0xffffff50
   3c308:	str	r0, [sp, #52]	; 0x34
   3c30c:	ldr	r0, [fp, #24]
   3c310:	ldr	r2, [r6]
   3c314:	cmp	r0, #2
   3c318:	mov	r0, r2
   3c31c:	str	r2, [sp, #60]	; 0x3c
   3c320:	blt	3c490 <GetDataSlab+0x10614>
   3c324:	ldr	r7, [sp, #52]	; 0x34
   3c328:	sub	r0, r9, #4
   3c32c:	sub	r6, r9, #12
   3c330:	mov	ip, #1
   3c334:	mov	lr, #0
   3c338:	mov	r5, #0
   3c33c:	str	r2, [sp, #60]	; 0x3c
   3c340:	mov	r1, r7
   3c344:	str	r7, [sp, #48]	; 0x30
   3c348:	mov	r1, r2
   3c34c:	ldr	r1, [fp, #16]
   3c350:	add	lr, lr, #1
   3c354:	str	r6, [sp, #44]	; 0x2c
   3c358:	cmp	lr, #4
   3c35c:	str	lr, [sp, #40]	; 0x28
   3c360:	ldr	r1, [r1, ip, lsl #2]
   3c364:	str	r7, [r3, ip, lsl #2]
   3c368:	sub	r8, r1, #1
   3c36c:	str	r8, [sl, ip, lsl #2]
   3c370:	ldr	sl, [r9, ip, lsl #2]
   3c374:	str	sl, [sp, #36]	; 0x24
   3c378:	bcs	3c388 <GetDataSlab+0x1050c>
   3c37c:	mov	r1, sl
   3c380:	mov	r3, ip
   3c384:	b	3c424 <GetDataSlab+0x105a8>
   3c388:	vmov.i32	q9, #1	; 0x00000001
   3c38c:	vmov.i32	q10, #1	; 0x00000001
   3c390:	vmov.i32	q8, #1	; 0x00000001
   3c394:	bic	r1, lr, #3
   3c398:	bic	r9, ip, #3
   3c39c:	vmov.32	d23[1], sl
   3c3a0:	vmov.32	d18[0], r7
   3c3a4:	vmov.32	d20[0], r8
   3c3a8:	str	r1, [sp, #32]
   3c3ac:	sub	r3, ip, r1
   3c3b0:	mov	r1, r6
   3c3b4:	mvn	r7, #15
   3c3b8:	vorr	d16, d18, d18
   3c3bc:	vmov.i32	q9, #1	; 0x00000001
   3c3c0:	vorr	d18, d20, d20
   3c3c4:	vld1.32	{d20-d21}, [r1], r7
   3c3c8:	subs	r9, r9, #4
   3c3cc:	vrev64.32	q12, q10
   3c3d0:	vext.8	q12, q12, q12, #8
   3c3d4:	vext.8	q11, q11, q12, #12
   3c3d8:	vmul.i32	q9, q9, q12
   3c3dc:	vmul.i32	q8, q11, q8
   3c3e0:	vorr	q11, q12, q12
   3c3e4:	bne	3c3c4 <GetDataSlab+0x10548>
   3c3e8:	ldr	r1, [sp, #32]
   3c3ec:	vext.8	q11, q9, q8, #8
   3c3f0:	vext.8	q12, q8, q8, #8
   3c3f4:	vmul.i32	q0, q9, q11
   3c3f8:	vmul.i32	q1, q8, q12
   3c3fc:	vmul.i32	q8, q0, d0[1]
   3c400:	vmul.i32	q9, q1, d2[1]
   3c404:	vmov.32	r8, d16[0]
   3c408:	vmov.32	r7, d18[0]
   3c40c:	cmp	lr, r1
   3c410:	bne	3c41c <GetDataSlab+0x105a0>
   3c414:	ldr	r9, [fp, #8]
   3c418:	b	3c438 <GetDataSlab+0x105bc>
   3c41c:	ldr	r9, [fp, #8]
   3c420:	vmov.32	r1, d20[0]
   3c424:	mul	r7, r1, r7
   3c428:	ldr	r1, [r0, r3, lsl #2]
   3c42c:	subs	r3, r3, #1
   3c430:	mul	r8, r8, r1
   3c434:	bne	3c424 <GetDataSlab+0x105a8>
   3c438:	sub	sl, fp, #96	; 0x60
   3c43c:	sub	r3, fp, #176	; 0xb0
   3c440:	ldr	r6, [sp, #48]	; 0x30
   3c444:	ldr	lr, [sp, #60]	; 0x3c
   3c448:	str	r7, [sp, #48]	; 0x30
   3c44c:	str	r8, [sl, ip, lsl #2]
   3c450:	ldr	r8, [fp, #12]
   3c454:	str	r7, [r3, ip, lsl #2]
   3c458:	ldr	r7, [sp, #36]	; 0x24
   3c45c:	ldr	r1, [r8, ip, lsl #2]
   3c460:	mla	r5, r1, r6, r5
   3c464:	ldr	r1, [fp, #20]
   3c468:	ldr	r6, [sp, #44]	; 0x2c
   3c46c:	ldr	r1, [r1, ip, lsl #2]
   3c470:	add	ip, ip, #1
   3c474:	add	r6, r6, #4
   3c478:	mul	lr, r1, lr
   3c47c:	ldr	r1, [fp, #24]
   3c480:	str	lr, [sp, #60]	; 0x3c
   3c484:	ldr	lr, [sp, #40]	; 0x28
   3c488:	cmp	ip, r1
   3c48c:	bne	3c34c <GetDataSlab+0x104d0>
   3c490:	ldr	r0, [sp, #56]	; 0x38
   3c494:	cmp	r4, #1
   3c498:	add	ip, r0, r5, lsl #2
   3c49c:	bne	48e7c <GetDataSlab+0x1d000>
   3c4a0:	ldr	r0, [sp, #60]	; 0x3c
   3c4a4:	cmp	r0, #1
   3c4a8:	ldr	r0, [fp, #20]
   3c4ac:	blt	51bac <GetDataSlab+0x25d30>
   3c4b0:	add	r9, r0, #4
   3c4b4:	sub	r0, fp, #136	; 0x88
   3c4b8:	mov	sl, r8
   3c4bc:	mov	lr, #0
   3c4c0:	orr	r7, r0, #4
   3c4c4:	sub	r0, fp, #96	; 0x60
   3c4c8:	orr	r0, r0, #4
   3c4cc:	str	r0, [sp, #48]	; 0x30
   3c4d0:	ldr	r0, [sl], #4
   3c4d4:	str	r0, [sp, #56]	; 0x38
   3c4d8:	ldr	r1, [sp, #56]	; 0x38
   3c4dc:	ldr	r0, [sp, #52]	; 0x34
   3c4e0:	cmp	r2, #1
   3c4e4:	add	r4, r1, r5
   3c4e8:	add	r8, ip, r1, lsl #2
   3c4ec:	blt	3c538 <GetDataSlab+0x106bc>
   3c4f0:	ldr	r0, [sp, #68]	; 0x44
   3c4f4:	ldr	r6, [fp, #20]
   3c4f8:	mov	r3, r8
   3c4fc:	add	r5, r0, lr, lsl #2
   3c500:	mov	r0, #0
   3c504:	vldr	s0, [r3]
   3c508:	add	r3, r3, #4
   3c50c:	vcvt.u32.f32	s0, s0
   3c510:	vmov	r1, s0
   3c514:	str	r1, [r5, r0, lsl #2]
   3c518:	add	r0, r0, #1
   3c51c:	ldr	r2, [r6]
   3c520:	cmp	r0, r2
   3c524:	blt	3c504 <GetDataSlab+0x10688>
   3c528:	ldr	r0, [fp, #12]
   3c52c:	ldr	r1, [r0]
   3c530:	ldr	r0, [fp, #8]
   3c534:	ldr	r0, [r0]
   3c538:	str	r0, [sp, #52]	; 0x34
   3c53c:	sub	r0, r0, r1
   3c540:	str	r1, [sp, #56]	; 0x38
   3c544:	add	ip, r8, r0, lsl #2
   3c548:	add	r5, r4, r0
   3c54c:	ldr	r0, [fp, #24]
   3c550:	cmp	r0, #2
   3c554:	blt	3c604 <GetDataSlab+0x10788>
   3c558:	mov	r6, #0
   3c55c:	mov	r8, #0
   3c560:	ldr	r1, [r7, r6, lsl #2]
   3c564:	mov	r0, r6
   3c568:	add	r1, r1, #1
   3c56c:	str	r1, [r7, r6, lsl #2]
   3c570:	ldr	r6, [r9, r6, lsl #2]
   3c574:	sdiv	r4, r1, r6
   3c578:	mls	r1, r4, r6, r1
   3c57c:	cmp	r1, #0
   3c580:	bne	3c5f4 <GetDataSlab+0x10778>
   3c584:	sub	r3, fp, #176	; 0xb0
   3c588:	str	r8, [r7, r0, lsl #2]
   3c58c:	add	r1, r3, r0, lsl #2
   3c590:	ldr	r6, [r1, #4]
   3c594:	sdiv	r1, r5, r6
   3c598:	mls	r1, r1, r6, r5
   3c59c:	cmp	r1, #0
   3c5a0:	beq	3c5bc <GetDataSlab+0x10740>
   3c5a4:	ldr	r4, [r3, r0, lsl #2]
   3c5a8:	ldr	r3, [sl, r0, lsl #2]
   3c5ac:	sub	r1, r6, r1
   3c5b0:	mla	r1, r3, r4, r1
   3c5b4:	add	r5, r1, r5
   3c5b8:	b	3c5d8 <GetDataSlab+0x1075c>
   3c5bc:	ldr	r1, [sl, r0, lsl #2]
   3c5c0:	cmp	r1, #0
   3c5c4:	beq	3c5dc <GetDataSlab+0x10760>
   3c5c8:	sub	r3, fp, #176	; 0xb0
   3c5cc:	ldr	r3, [r3, r0, lsl #2]
   3c5d0:	mla	r5, r3, r1, r5
   3c5d4:	mul	r1, r3, r1
   3c5d8:	add	ip, ip, r1, lsl #2
   3c5dc:	ldr	r1, [fp, #24]
   3c5e0:	add	r6, r0, #1
   3c5e4:	add	r0, r0, #2
   3c5e8:	cmp	r0, r1
   3c5ec:	blt	3c560 <GetDataSlab+0x106e4>
   3c5f0:	b	3c604 <GetDataSlab+0x10788>
   3c5f4:	ldr	r1, [sp, #48]	; 0x30
   3c5f8:	ldr	r0, [r1, r0, lsl #2]
   3c5fc:	add	ip, ip, r0, lsl #2
   3c600:	add	r5, r0, r5
   3c604:	ldr	r1, [sp, #60]	; 0x3c
   3c608:	add	lr, r2, lr
   3c60c:	mov	r0, #0
   3c610:	cmp	lr, r1
   3c614:	blt	3c4d8 <GetDataSlab+0x1065c>
   3c618:	b	2e97c <GetDataSlab+0x2b00>
   3c61c:	ldr	r4, [r3]
   3c620:	ldr	r9, [fp, #8]
   3c624:	mov	r5, #0
   3c628:	sub	r3, fp, #176	; 0xb0
   3c62c:	sub	sl, fp, #96	; 0x60
   3c630:	sub	r0, r4, #1
   3c634:	str	r0, [fp, #-96]	; 0xffffffa0
   3c638:	ldr	r0, [r9]
   3c63c:	str	r0, [fp, #-176]	; 0xffffff50
   3c640:	str	r0, [sp, #52]	; 0x34
   3c644:	ldr	r0, [fp, #24]
   3c648:	ldr	r2, [r6]
   3c64c:	cmp	r0, #2
   3c650:	mov	r0, r2
   3c654:	str	r2, [sp, #60]	; 0x3c
   3c658:	blt	3c7c8 <GetDataSlab+0x1094c>
   3c65c:	ldr	r7, [sp, #52]	; 0x34
   3c660:	sub	r0, r9, #4
   3c664:	sub	r6, r9, #12
   3c668:	mov	ip, #1
   3c66c:	mov	lr, #0
   3c670:	mov	r5, #0
   3c674:	str	r2, [sp, #60]	; 0x3c
   3c678:	mov	r1, r7
   3c67c:	str	r7, [sp, #48]	; 0x30
   3c680:	mov	r1, r2
   3c684:	ldr	r1, [fp, #16]
   3c688:	add	lr, lr, #1
   3c68c:	str	r6, [sp, #44]	; 0x2c
   3c690:	cmp	lr, #4
   3c694:	str	lr, [sp, #40]	; 0x28
   3c698:	ldr	r1, [r1, ip, lsl #2]
   3c69c:	str	r7, [r3, ip, lsl #2]
   3c6a0:	sub	r8, r1, #1
   3c6a4:	str	r8, [sl, ip, lsl #2]
   3c6a8:	ldr	sl, [r9, ip, lsl #2]
   3c6ac:	str	sl, [sp, #36]	; 0x24
   3c6b0:	bcs	3c6c0 <GetDataSlab+0x10844>
   3c6b4:	mov	r1, sl
   3c6b8:	mov	r3, ip
   3c6bc:	b	3c75c <GetDataSlab+0x108e0>
   3c6c0:	vmov.i32	q9, #1	; 0x00000001
   3c6c4:	vmov.i32	q10, #1	; 0x00000001
   3c6c8:	vmov.i32	q8, #1	; 0x00000001
   3c6cc:	bic	r1, lr, #3
   3c6d0:	bic	r9, ip, #3
   3c6d4:	vmov.32	d23[1], sl
   3c6d8:	vmov.32	d18[0], r7
   3c6dc:	vmov.32	d20[0], r8
   3c6e0:	str	r1, [sp, #32]
   3c6e4:	sub	r3, ip, r1
   3c6e8:	mov	r1, r6
   3c6ec:	mvn	r7, #15
   3c6f0:	vorr	d16, d18, d18
   3c6f4:	vmov.i32	q9, #1	; 0x00000001
   3c6f8:	vorr	d18, d20, d20
   3c6fc:	vld1.32	{d20-d21}, [r1], r7
   3c700:	subs	r9, r9, #4
   3c704:	vrev64.32	q12, q10
   3c708:	vext.8	q12, q12, q12, #8
   3c70c:	vext.8	q11, q11, q12, #12
   3c710:	vmul.i32	q9, q9, q12
   3c714:	vmul.i32	q8, q11, q8
   3c718:	vorr	q11, q12, q12
   3c71c:	bne	3c6fc <GetDataSlab+0x10880>
   3c720:	ldr	r1, [sp, #32]
   3c724:	vext.8	q11, q9, q8, #8
   3c728:	vext.8	q12, q8, q8, #8
   3c72c:	vmul.i32	q0, q9, q11
   3c730:	vmul.i32	q1, q8, q12
   3c734:	vmul.i32	q8, q0, d0[1]
   3c738:	vmul.i32	q9, q1, d2[1]
   3c73c:	vmov.32	r8, d16[0]
   3c740:	vmov.32	r7, d18[0]
   3c744:	cmp	lr, r1
   3c748:	bne	3c754 <GetDataSlab+0x108d8>
   3c74c:	ldr	r9, [fp, #8]
   3c750:	b	3c770 <GetDataSlab+0x108f4>
   3c754:	ldr	r9, [fp, #8]
   3c758:	vmov.32	r1, d20[0]
   3c75c:	mul	r7, r1, r7
   3c760:	ldr	r1, [r0, r3, lsl #2]
   3c764:	subs	r3, r3, #1
   3c768:	mul	r8, r8, r1
   3c76c:	bne	3c75c <GetDataSlab+0x108e0>
   3c770:	sub	sl, fp, #96	; 0x60
   3c774:	sub	r3, fp, #176	; 0xb0
   3c778:	ldr	r6, [sp, #48]	; 0x30
   3c77c:	ldr	lr, [sp, #60]	; 0x3c
   3c780:	str	r7, [sp, #48]	; 0x30
   3c784:	str	r8, [sl, ip, lsl #2]
   3c788:	ldr	r8, [fp, #12]
   3c78c:	str	r7, [r3, ip, lsl #2]
   3c790:	ldr	r7, [sp, #36]	; 0x24
   3c794:	ldr	r1, [r8, ip, lsl #2]
   3c798:	mla	r5, r1, r6, r5
   3c79c:	ldr	r1, [fp, #20]
   3c7a0:	ldr	r6, [sp, #44]	; 0x2c
   3c7a4:	ldr	r1, [r1, ip, lsl #2]
   3c7a8:	add	ip, ip, #1
   3c7ac:	add	r6, r6, #4
   3c7b0:	mul	lr, r1, lr
   3c7b4:	ldr	r1, [fp, #24]
   3c7b8:	str	lr, [sp, #60]	; 0x3c
   3c7bc:	ldr	lr, [sp, #40]	; 0x28
   3c7c0:	cmp	ip, r1
   3c7c4:	bne	3c684 <GetDataSlab+0x10808>
   3c7c8:	ldr	r0, [sp, #56]	; 0x38
   3c7cc:	cmp	r4, #1
   3c7d0:	add	ip, r0, r5, lsl #3
   3c7d4:	bne	49020 <GetDataSlab+0x1d1a4>
   3c7d8:	ldr	r0, [sp, #60]	; 0x3c
   3c7dc:	cmp	r0, #1
   3c7e0:	ldr	r0, [fp, #20]
   3c7e4:	blt	51bc0 <GetDataSlab+0x25d44>
   3c7e8:	add	r9, r0, #4
   3c7ec:	sub	r0, fp, #136	; 0x88
   3c7f0:	mov	sl, r8
   3c7f4:	mov	lr, #0
   3c7f8:	orr	r7, r0, #4
   3c7fc:	sub	r0, fp, #96	; 0x60
   3c800:	orr	r0, r0, #4
   3c804:	str	r0, [sp, #48]	; 0x30
   3c808:	ldr	r0, [sl], #4
   3c80c:	str	r0, [sp, #56]	; 0x38
   3c810:	ldr	r1, [sp, #56]	; 0x38
   3c814:	ldr	r0, [sp, #52]	; 0x34
   3c818:	cmp	r2, #1
   3c81c:	add	r4, r1, r5
   3c820:	add	r8, ip, r1, lsl #3
   3c824:	blt	3c870 <GetDataSlab+0x109f4>
   3c828:	ldr	r0, [sp, #68]	; 0x44
   3c82c:	ldr	r6, [fp, #20]
   3c830:	mov	r3, r8
   3c834:	add	r5, r0, lr, lsl #2
   3c838:	mov	r0, #0
   3c83c:	vldr	d16, [r3]
   3c840:	add	r3, r3, #8
   3c844:	vcvt.u32.f64	s0, d16
   3c848:	vmov	r1, s0
   3c84c:	str	r1, [r5, r0, lsl #2]
   3c850:	add	r0, r0, #1
   3c854:	ldr	r2, [r6]
   3c858:	cmp	r0, r2
   3c85c:	blt	3c83c <GetDataSlab+0x109c0>
   3c860:	ldr	r0, [fp, #12]
   3c864:	ldr	r1, [r0]
   3c868:	ldr	r0, [fp, #8]
   3c86c:	ldr	r0, [r0]
   3c870:	str	r0, [sp, #52]	; 0x34
   3c874:	sub	r0, r0, r1
   3c878:	str	r1, [sp, #56]	; 0x38
   3c87c:	add	ip, r8, r0, lsl #3
   3c880:	add	r5, r4, r0
   3c884:	ldr	r0, [fp, #24]
   3c888:	cmp	r0, #2
   3c88c:	blt	3c93c <GetDataSlab+0x10ac0>
   3c890:	mov	r6, #0
   3c894:	mov	r8, #0
   3c898:	ldr	r1, [r7, r6, lsl #2]
   3c89c:	mov	r0, r6
   3c8a0:	add	r1, r1, #1
   3c8a4:	str	r1, [r7, r6, lsl #2]
   3c8a8:	ldr	r6, [r9, r6, lsl #2]
   3c8ac:	sdiv	r4, r1, r6
   3c8b0:	mls	r1, r4, r6, r1
   3c8b4:	cmp	r1, #0
   3c8b8:	bne	3c92c <GetDataSlab+0x10ab0>
   3c8bc:	sub	r3, fp, #176	; 0xb0
   3c8c0:	str	r8, [r7, r0, lsl #2]
   3c8c4:	add	r1, r3, r0, lsl #2
   3c8c8:	ldr	r6, [r1, #4]
   3c8cc:	sdiv	r1, r5, r6
   3c8d0:	mls	r1, r1, r6, r5
   3c8d4:	cmp	r1, #0
   3c8d8:	beq	3c8f4 <GetDataSlab+0x10a78>
   3c8dc:	ldr	r4, [r3, r0, lsl #2]
   3c8e0:	ldr	r3, [sl, r0, lsl #2]
   3c8e4:	sub	r1, r6, r1
   3c8e8:	mla	r1, r3, r4, r1
   3c8ec:	add	r5, r1, r5
   3c8f0:	b	3c910 <GetDataSlab+0x10a94>
   3c8f4:	ldr	r1, [sl, r0, lsl #2]
   3c8f8:	cmp	r1, #0
   3c8fc:	beq	3c914 <GetDataSlab+0x10a98>
   3c900:	sub	r3, fp, #176	; 0xb0
   3c904:	ldr	r3, [r3, r0, lsl #2]
   3c908:	mla	r5, r3, r1, r5
   3c90c:	mul	r1, r3, r1
   3c910:	add	ip, ip, r1, lsl #3
   3c914:	ldr	r1, [fp, #24]
   3c918:	add	r6, r0, #1
   3c91c:	add	r0, r0, #2
   3c920:	cmp	r0, r1
   3c924:	blt	3c898 <GetDataSlab+0x10a1c>
   3c928:	b	3c93c <GetDataSlab+0x10ac0>
   3c92c:	ldr	r1, [sp, #48]	; 0x30
   3c930:	ldr	r0, [r1, r0, lsl #2]
   3c934:	add	ip, ip, r0, lsl #3
   3c938:	add	r5, r0, r5
   3c93c:	ldr	r1, [sp, #60]	; 0x3c
   3c940:	add	lr, r2, lr
   3c944:	mov	r0, #0
   3c948:	cmp	lr, r1
   3c94c:	blt	3c810 <GetDataSlab+0x10994>
   3c950:	b	2e97c <GetDataSlab+0x2b00>
   3c954:	ldr	r5, [r3]
   3c958:	mov	r3, #0
   3c95c:	sub	ip, fp, #176	; 0xb0
   3c960:	sub	sl, fp, #96	; 0x60
   3c964:	str	r9, [sp, #40]	; 0x28
   3c968:	sub	r0, r5, #1
   3c96c:	str	r0, [fp, #-96]	; 0xffffffa0
   3c970:	ldr	r0, [fp, #8]
   3c974:	ldr	r0, [r0]
   3c978:	str	r0, [fp, #-176]	; 0xffffff50
   3c97c:	str	r0, [sp, #32]
   3c980:	ldr	r0, [fp, #24]
   3c984:	ldr	r1, [r6]
   3c988:	cmp	r0, #2
   3c98c:	mov	r0, r1
   3c990:	str	r1, [sp, #60]	; 0x3c
   3c994:	blt	3cb04 <GetDataSlab+0x10c88>
   3c998:	ldr	r0, [fp, #8]
   3c99c:	ldr	r6, [sp, #32]
   3c9a0:	mov	lr, #1
   3c9a4:	mov	r3, #0
   3c9a8:	str	r1, [sp, #60]	; 0x3c
   3c9ac:	sub	r2, r0, #4
   3c9b0:	sub	r4, r0, #12
   3c9b4:	mov	r0, #0
   3c9b8:	mov	r7, r6
   3c9bc:	str	r0, [sp, #52]	; 0x34
   3c9c0:	mov	r0, r1
   3c9c4:	ldr	r0, [fp, #16]
   3c9c8:	str	r7, [sp, #44]	; 0x2c
   3c9cc:	str	r4, [sp, #48]	; 0x30
   3c9d0:	ldr	r0, [r0, lr, lsl #2]
   3c9d4:	str	r6, [ip, lr, lsl #2]
   3c9d8:	sub	r9, r0, #1
   3c9dc:	ldr	r0, [fp, #8]
   3c9e0:	str	r9, [sl, lr, lsl #2]
   3c9e4:	ldr	sl, [sp, #52]	; 0x34
   3c9e8:	ldr	ip, [r0, lr, lsl #2]
   3c9ec:	add	sl, sl, #1
   3c9f0:	cmp	sl, #4
   3c9f4:	str	sl, [sp, #52]	; 0x34
   3c9f8:	str	ip, [sp, #36]	; 0x24
   3c9fc:	bcs	3ca0c <GetDataSlab+0x10b90>
   3ca00:	mov	r7, ip
   3ca04:	mov	r0, lr
   3ca08:	b	3caa0 <GetDataSlab+0x10c24>
   3ca0c:	vmov.i32	q9, #1	; 0x00000001
   3ca10:	vmov.i32	q10, #1	; 0x00000001
   3ca14:	vmov.i32	q8, #1	; 0x00000001
   3ca18:	bic	r0, sl, #3
   3ca1c:	bic	r8, lr, #3
   3ca20:	vmov.32	d23[1], ip
   3ca24:	mvn	r7, #15
   3ca28:	vmov.32	d18[0], r6
   3ca2c:	vmov.32	d20[0], r9
   3ca30:	str	r0, [sp, #28]
   3ca34:	sub	r0, lr, r0
   3ca38:	mov	r6, r4
   3ca3c:	vorr	d16, d18, d18
   3ca40:	vmov.i32	q9, #1	; 0x00000001
   3ca44:	vorr	d18, d20, d20
   3ca48:	vld1.32	{d20-d21}, [r6], r7
   3ca4c:	subs	r8, r8, #4
   3ca50:	vrev64.32	q12, q10
   3ca54:	vext.8	q12, q12, q12, #8
   3ca58:	vext.8	q11, q11, q12, #12
   3ca5c:	vmul.i32	q9, q9, q12
   3ca60:	vmul.i32	q8, q11, q8
   3ca64:	vorr	q11, q12, q12
   3ca68:	bne	3ca48 <GetDataSlab+0x10bcc>
   3ca6c:	ldr	r7, [sp, #28]
   3ca70:	vext.8	q11, q9, q8, #8
   3ca74:	vext.8	q12, q8, q8, #8
   3ca78:	ldr	r8, [fp, #12]
   3ca7c:	vmul.i32	q0, q9, q11
   3ca80:	vmul.i32	q1, q8, q12
   3ca84:	vmul.i32	q8, q0, d0[1]
   3ca88:	vmul.i32	q9, q1, d2[1]
   3ca8c:	vmov.32	r9, d16[0]
   3ca90:	vmov.32	r6, d18[0]
   3ca94:	cmp	sl, r7
   3ca98:	beq	3cab4 <GetDataSlab+0x10c38>
   3ca9c:	vmov.32	r7, d20[0]
   3caa0:	mul	r6, r7, r6
   3caa4:	ldr	r7, [r2, r0, lsl #2]
   3caa8:	subs	r0, r0, #1
   3caac:	mul	r9, r9, r7
   3cab0:	bne	3caa0 <GetDataSlab+0x10c24>
   3cab4:	sub	ip, fp, #176	; 0xb0
   3cab8:	sub	sl, fp, #96	; 0x60
   3cabc:	ldr	r4, [sp, #44]	; 0x2c
   3cac0:	mov	r7, r6
   3cac4:	str	r6, [ip, lr, lsl #2]
   3cac8:	str	r9, [sl, lr, lsl #2]
   3cacc:	ldr	r6, [sp, #36]	; 0x24
   3cad0:	ldr	r0, [r8, lr, lsl #2]
   3cad4:	mla	r3, r0, r4, r3
   3cad8:	ldr	r0, [fp, #20]
   3cadc:	ldr	r4, [sp, #60]	; 0x3c
   3cae0:	ldr	r0, [r0, lr, lsl #2]
   3cae4:	add	lr, lr, #1
   3cae8:	mul	r4, r0, r4
   3caec:	ldr	r0, [fp, #24]
   3caf0:	str	r4, [sp, #60]	; 0x3c
   3caf4:	ldr	r4, [sp, #48]	; 0x30
   3caf8:	cmp	lr, r0
   3cafc:	add	r4, r4, #4
   3cb00:	bne	3c9c4 <GetDataSlab+0x10b48>
   3cb04:	ldr	r0, [sp, #56]	; 0x38
   3cb08:	cmp	r5, #1
   3cb0c:	add	sl, r0, r3, lsl #3
   3cb10:	bne	491c4 <GetDataSlab+0x1d348>
   3cb14:	ldr	r0, [sp, #60]	; 0x3c
   3cb18:	cmp	r0, #1
   3cb1c:	blt	49344 <GetDataSlab+0x1d4c8>
   3cb20:	ldr	r0, [fp, #20]
   3cb24:	ldr	lr, [r8], #4
   3cb28:	mov	ip, #0
   3cb2c:	add	r9, r0, #4
   3cb30:	sub	r0, fp, #136	; 0x88
   3cb34:	orr	r2, r0, #4
   3cb38:	sub	r0, fp, #96	; 0x60
   3cb3c:	orr	r0, r0, #4
   3cb40:	str	r0, [sp, #52]	; 0x34
   3cb44:	add	r6, lr, r3
   3cb48:	add	r3, sl, lr, lsl #3
   3cb4c:	cmp	r1, #1
   3cb50:	blt	3cb94 <GetDataSlab+0x10d18>
   3cb54:	ldr	r0, [sp, #68]	; 0x44
   3cb58:	ldr	r7, [fp, #20]
   3cb5c:	mov	r4, r3
   3cb60:	add	r5, r0, ip, lsl #2
   3cb64:	mov	r0, #0
   3cb68:	ldr	r1, [r4], #8
   3cb6c:	str	r1, [r5, r0, lsl #2]
   3cb70:	add	r0, r0, #1
   3cb74:	ldr	r1, [r7]
   3cb78:	cmp	r0, r1
   3cb7c:	blt	3cb68 <GetDataSlab+0x10cec>
   3cb80:	ldr	r0, [fp, #12]
   3cb84:	ldr	lr, [r0]
   3cb88:	ldr	r0, [fp, #8]
   3cb8c:	ldr	r0, [r0]
   3cb90:	str	r0, [sp, #32]
   3cb94:	ldr	r0, [sp, #32]
   3cb98:	sub	r0, r0, lr
   3cb9c:	add	sl, r3, r0, lsl #3
   3cba0:	add	r3, r6, r0
   3cba4:	ldr	r0, [fp, #24]
   3cba8:	cmp	r0, #2
   3cbac:	blt	3cc5c <GetDataSlab+0x10de0>
   3cbb0:	mov	r0, #0
   3cbb4:	mov	r5, r0
   3cbb8:	ldr	r0, [r2, r0, lsl #2]
   3cbbc:	add	r0, r0, #1
   3cbc0:	str	r0, [r2, r5, lsl #2]
   3cbc4:	ldr	r7, [r9, r5, lsl #2]
   3cbc8:	sdiv	r6, r0, r7
   3cbcc:	mls	r0, r6, r7, r0
   3cbd0:	cmp	r0, #0
   3cbd4:	bne	3cc4c <GetDataSlab+0x10dd0>
   3cbd8:	mov	r0, #0
   3cbdc:	sub	r4, fp, #176	; 0xb0
   3cbe0:	str	r0, [r2, r5, lsl #2]
   3cbe4:	add	r0, r4, r5, lsl #2
   3cbe8:	ldr	r0, [r0, #4]
   3cbec:	sdiv	r6, r3, r0
   3cbf0:	mls	r7, r6, r0, r3
   3cbf4:	cmp	r7, #0
   3cbf8:	beq	3cc14 <GetDataSlab+0x10d98>
   3cbfc:	ldr	r6, [r4, r5, lsl #2]
   3cc00:	ldr	r4, [r8, r5, lsl #2]
   3cc04:	sub	r0, r0, r7
   3cc08:	mla	r0, r4, r6, r0
   3cc0c:	add	r3, r0, r3
   3cc10:	b	3cc30 <GetDataSlab+0x10db4>
   3cc14:	ldr	r0, [r8, r5, lsl #2]
   3cc18:	cmp	r0, #0
   3cc1c:	beq	3cc34 <GetDataSlab+0x10db8>
   3cc20:	sub	r4, fp, #176	; 0xb0
   3cc24:	ldr	r4, [r4, r5, lsl #2]
   3cc28:	mla	r3, r4, r0, r3
   3cc2c:	mul	r0, r4, r0
   3cc30:	add	sl, sl, r0, lsl #3
   3cc34:	add	r0, r5, #1
   3cc38:	add	r4, r5, #2
   3cc3c:	ldr	r5, [fp, #24]
   3cc40:	cmp	r4, r5
   3cc44:	blt	3cbb4 <GetDataSlab+0x10d38>
   3cc48:	b	3cc5c <GetDataSlab+0x10de0>
   3cc4c:	ldr	r0, [sp, #52]	; 0x34
   3cc50:	ldr	r0, [r0, r5, lsl #2]
   3cc54:	add	sl, sl, r0, lsl #3
   3cc58:	add	r3, r0, r3
   3cc5c:	ldr	r0, [sp, #60]	; 0x3c
   3cc60:	add	ip, r1, ip
   3cc64:	cmp	ip, r0
   3cc68:	blt	3cb44 <GetDataSlab+0x10cc8>
   3cc6c:	b	49344 <GetDataSlab+0x1d4c8>
   3cc70:	ldr	r0, [fp, #16]
   3cc74:	mov	r1, r6
   3cc78:	mov	r5, #0
   3cc7c:	sub	r7, fp, #96	; 0x60
   3cc80:	ldr	sl, [r0]
   3cc84:	sub	r0, sl, #1
   3cc88:	str	r0, [fp, #-96]	; 0xffffffa0
   3cc8c:	ldr	r0, [fp, #8]
   3cc90:	ldr	r0, [r0]
   3cc94:	str	r0, [fp, #-176]	; 0xffffff50
   3cc98:	str	r0, [sp, #40]	; 0x28
   3cc9c:	ldr	r0, [fp, #24]
   3cca0:	ldr	r1, [r6]
   3cca4:	cmp	r0, #2
   3cca8:	str	r1, [sp, #48]	; 0x30
   3ccac:	str	r1, [sp, #52]	; 0x34
   3ccb0:	blt	3ce0c <GetDataSlab+0x10f90>
   3ccb4:	ldr	r0, [fp, #8]
   3ccb8:	ldr	r3, [sp, #40]	; 0x28
   3ccbc:	mov	r6, #1
   3ccc0:	mov	r8, #0
   3ccc4:	mvn	r4, #15
   3ccc8:	mov	r5, #0
   3cccc:	mov	r1, r0
   3ccd0:	sub	r0, r0, #4
   3ccd4:	mov	r9, r3
   3ccd8:	sub	ip, r1, #12
   3ccdc:	ldr	r1, [sp, #48]	; 0x30
   3cce0:	str	r1, [sp, #52]	; 0x34
   3cce4:	ldr	r1, [fp, #16]
   3cce8:	add	r8, r8, #1
   3ccec:	cmp	r8, #4
   3ccf0:	ldr	r1, [r1, r6, lsl #2]
   3ccf4:	str	r3, [lr, r6, lsl #2]
   3ccf8:	sub	r2, r1, #1
   3ccfc:	ldr	r1, [fp, #8]
   3cd00:	str	r2, [r7, r6, lsl #2]
   3cd04:	ldr	r1, [r1, r6, lsl #2]
   3cd08:	str	r1, [sp, #60]	; 0x3c
   3cd0c:	bcs	3cd18 <GetDataSlab+0x10e9c>
   3cd10:	mov	r7, r6
   3cd14:	b	3cdb0 <GetDataSlab+0x10f34>
   3cd18:	vmov.i32	q9, #1	; 0x00000001
   3cd1c:	vmov.i32	q10, #1	; 0x00000001
   3cd20:	vmov.i32	q8, #1	; 0x00000001
   3cd24:	vmov.32	d23[1], r1
   3cd28:	bic	r1, r8, #3
   3cd2c:	bic	lr, r6, #3
   3cd30:	vmov.32	d18[0], r3
   3cd34:	vmov.32	d20[0], r2
   3cd38:	str	r1, [sp, #44]	; 0x2c
   3cd3c:	sub	r7, r6, r1
   3cd40:	mov	r1, ip
   3cd44:	vorr	d16, d18, d18
   3cd48:	vmov.i32	q9, #1	; 0x00000001
   3cd4c:	vorr	d18, d20, d20
   3cd50:	vld1.32	{d20-d21}, [r1], r4
   3cd54:	subs	lr, lr, #4
   3cd58:	vrev64.32	q12, q10
   3cd5c:	vext.8	q12, q12, q12, #8
   3cd60:	vext.8	q11, q11, q12, #12
   3cd64:	vmul.i32	q9, q9, q12
   3cd68:	vmul.i32	q8, q11, q8
   3cd6c:	vorr	q11, q12, q12
   3cd70:	bne	3cd50 <GetDataSlab+0x10ed4>
   3cd74:	ldr	r1, [sp, #44]	; 0x2c
   3cd78:	vext.8	q11, q9, q8, #8
   3cd7c:	vext.8	q12, q8, q8, #8
   3cd80:	vmul.i32	q0, q9, q11
   3cd84:	vmul.i32	q1, q8, q12
   3cd88:	vmul.i32	q8, q0, d0[1]
   3cd8c:	vmul.i32	q9, q1, d2[1]
   3cd90:	vmov.32	r2, d16[0]
   3cd94:	vmov.32	r3, d18[0]
   3cd98:	cmp	r8, r1
   3cd9c:	bne	3cda8 <GetDataSlab+0x10f2c>
   3cda0:	sub	lr, fp, #176	; 0xb0
   3cda4:	b	3cdc4 <GetDataSlab+0x10f48>
   3cda8:	vmov.32	r1, d20[0]
   3cdac:	sub	lr, fp, #176	; 0xb0
   3cdb0:	mul	r3, r1, r3
   3cdb4:	ldr	r1, [r0, r7, lsl #2]
   3cdb8:	subs	r7, r7, #1
   3cdbc:	mul	r2, r2, r1
   3cdc0:	bne	3cdb0 <GetDataSlab+0x10f34>
   3cdc4:	ldr	r1, [fp, #12]
   3cdc8:	sub	r7, fp, #96	; 0x60
   3cdcc:	str	r3, [lr, r6, lsl #2]
   3cdd0:	add	ip, ip, #4
   3cdd4:	str	r2, [r7, r6, lsl #2]
   3cdd8:	ldr	r2, [sp, #52]	; 0x34
   3cddc:	ldr	r1, [r1, r6, lsl #2]
   3cde0:	mla	r5, r1, r9, r5
   3cde4:	ldr	r1, [fp, #20]
   3cde8:	mov	r9, r3
   3cdec:	ldr	r3, [sp, #60]	; 0x3c
   3cdf0:	ldr	r1, [r1, r6, lsl #2]
   3cdf4:	add	r6, r6, #1
   3cdf8:	mul	r2, r1, r2
   3cdfc:	ldr	r1, [fp, #24]
   3ce00:	str	r2, [sp, #52]	; 0x34
   3ce04:	cmp	r6, r1
   3ce08:	bne	3cce4 <GetDataSlab+0x10e68>
   3ce0c:	ldr	r0, [sp, #56]	; 0x38
   3ce10:	cmp	sl, #1
   3ce14:	add	r4, r0, r5
   3ce18:	bne	49698 <GetDataSlab+0x1d81c>
   3ce1c:	ldr	r0, [sp, #52]	; 0x34
   3ce20:	ldr	r1, [fp, #12]
   3ce24:	ldr	ip, [sp, #48]	; 0x30
   3ce28:	cmp	r0, #1
   3ce2c:	ldr	r0, [sp, #68]	; 0x44
   3ce30:	blt	51bd4 <GetDataSlab+0x25d58>
   3ce34:	add	sl, r1, #4
   3ce38:	ldr	r1, [fp, #20]
   3ce3c:	str	r0, [sp, #60]	; 0x3c
   3ce40:	mov	r0, #0
   3ce44:	mov	r9, #0
   3ce48:	mov	lr, #0
   3ce4c:	str	r0, [sp, #56]	; 0x38
   3ce50:	add	r8, r1, #4
   3ce54:	sub	r1, fp, #136	; 0x88
   3ce58:	orr	r6, r1, #4
   3ce5c:	orr	r1, r7, #4
   3ce60:	str	r1, [sp, #28]
   3ce64:	bic	r1, ip, #1
   3ce68:	str	r1, [sp, #32]
   3ce6c:	lsl	r1, ip, #3
   3ce70:	str	r1, [sp, #44]	; 0x2c
   3ce74:	cmp	ip, #1
   3ce78:	blt	3cf50 <GetDataSlab+0x110d4>
   3ce7c:	ldr	r0, [fp, #12]
   3ce80:	ldr	r2, [r0]
   3ce84:	mov	r0, #0
   3ce88:	beq	3cf28 <GetDataSlab+0x110ac>
   3ce8c:	str	r2, [sp, #36]	; 0x24
   3ce90:	ldr	r1, [sp, #68]	; 0x44
   3ce94:	ldr	r2, [sp, #44]	; 0x2c
   3ce98:	ldr	r3, [sp, #56]	; 0x38
   3ce9c:	mla	ip, r2, r3, r1
   3cea0:	ldr	r1, [sp, #48]	; 0x30
   3cea4:	ldr	r2, [sp, #36]	; 0x24
   3cea8:	add	r7, r4, r1
   3ceac:	ldr	r1, [sp, #68]	; 0x44
   3ceb0:	add	r3, r4, r2
   3ceb4:	add	r7, r7, r2
   3ceb8:	cmp	ip, r7
   3cebc:	ldr	ip, [sp, #48]	; 0x30
   3cec0:	bcs	3cee0 <GetDataSlab+0x11064>
   3cec4:	ldr	r2, [sp, #44]	; 0x2c
   3cec8:	ldr	r7, [sp, #56]	; 0x38
   3cecc:	mla	r7, r2, r7, r2
   3ced0:	ldr	r2, [sp, #36]	; 0x24
   3ced4:	add	r7, r1, r7
   3ced8:	cmp	r3, r7
   3cedc:	bcc	3cf28 <GetDataSlab+0x110ac>
   3cee0:	ldr	r0, [sp, #32]
   3cee4:	ldr	ip, [sp, #60]	; 0x3c
   3cee8:	add	r1, sp, #200	; 0xc8
   3ceec:	add	r2, sp, #244	; 0xf4
   3cef0:	ldrh	r7, [r3], #2
   3cef4:	subs	r0, r0, #2
   3cef8:	strh	r7, [r1, #44]	; 0x2c
   3cefc:	vld1.16	{d16[0]}, [r2 :16]
   3cf00:	vmovl.u8	q8, d16
   3cf04:	vmovl.u16	q8, d16
   3cf08:	vmovl.u32	q8, d16
   3cf0c:	vst1.64	{d16-d17}, [ip]!
   3cf10:	bne	3cef0 <GetDataSlab+0x11074>
   3cf14:	ldr	ip, [sp, #48]	; 0x30
   3cf18:	ldr	r0, [sp, #32]
   3cf1c:	ldr	r2, [sp, #36]	; 0x24
   3cf20:	cmp	ip, r0
   3cf24:	beq	3cf50 <GetDataSlab+0x110d4>
   3cf28:	ldr	r1, [sp, #60]	; 0x3c
   3cf2c:	sub	r3, ip, r0
   3cf30:	add	r7, r1, r0, lsl #3
   3cf34:	add	r0, r0, r2
   3cf38:	add	r1, r4, r0
   3cf3c:	ldrb	r0, [r1], #1
   3cf40:	subs	r3, r3, #1
   3cf44:	stm	r7, {r0, r9}
   3cf48:	add	r7, r7, #8
   3cf4c:	bne	3cf3c <GetDataSlab+0x110c0>
   3cf50:	ldr	r0, [sp, #40]	; 0x28
   3cf54:	add	r4, r4, r0
   3cf58:	add	r5, r5, r0
   3cf5c:	ldr	r0, [fp, #24]
   3cf60:	cmp	r0, #2
   3cf64:	blt	3d00c <GetDataSlab+0x11190>
   3cf68:	mov	r3, #0
   3cf6c:	ldr	r1, [r6, r3, lsl #2]
   3cf70:	mov	r0, r3
   3cf74:	add	r1, r1, #1
   3cf78:	str	r1, [r6, r3, lsl #2]
   3cf7c:	ldr	r3, [r8, r3, lsl #2]
   3cf80:	sdiv	r7, r1, r3
   3cf84:	mls	r1, r7, r3, r1
   3cf88:	cmp	r1, #0
   3cf8c:	bne	3cffc <GetDataSlab+0x11180>
   3cf90:	sub	r2, fp, #176	; 0xb0
   3cf94:	str	r9, [r6, r0, lsl #2]
   3cf98:	add	r1, r2, r0, lsl #2
   3cf9c:	ldr	r3, [r1, #4]
   3cfa0:	sdiv	r1, r5, r3
   3cfa4:	mls	r7, r1, r3, r5
   3cfa8:	cmp	r7, #0
   3cfac:	beq	3cfcc <GetDataSlab+0x11150>
   3cfb0:	ldr	r1, [r2, r0, lsl #2]
   3cfb4:	ldr	r2, [sl, r0, lsl #2]
   3cfb8:	sub	r3, r3, r7
   3cfbc:	mla	r1, r2, r1, r3
   3cfc0:	add	r5, r1, r5
   3cfc4:	add	r4, r4, r1
   3cfc8:	b	3cfe4 <GetDataSlab+0x11168>
   3cfcc:	ldr	r3, [sl, r0, lsl #2]
   3cfd0:	cmp	r3, #0
   3cfd4:	subne	r1, fp, #176	; 0xb0
   3cfd8:	ldrne	r1, [r1, r0, lsl #2]
   3cfdc:	mlane	r5, r1, r3, r5
   3cfe0:	mlane	r4, r1, r3, r4
   3cfe4:	ldr	r1, [fp, #24]
   3cfe8:	add	r3, r0, #1
   3cfec:	add	r0, r0, #2
   3cff0:	cmp	r0, r1
   3cff4:	blt	3cf6c <GetDataSlab+0x110f0>
   3cff8:	b	3d00c <GetDataSlab+0x11190>
   3cffc:	ldr	r1, [sp, #28]
   3d000:	ldr	r0, [r1, r0, lsl #2]
   3d004:	add	r4, r4, r0
   3d008:	add	r5, r0, r5
   3d00c:	ldr	r0, [sp, #44]	; 0x2c
   3d010:	ldr	r1, [sp, #60]	; 0x3c
   3d014:	add	lr, lr, ip
   3d018:	add	r1, r1, r0
   3d01c:	ldr	r0, [sp, #56]	; 0x38
   3d020:	str	r1, [sp, #60]	; 0x3c
   3d024:	ldr	r1, [sp, #52]	; 0x34
   3d028:	add	r0, r0, #1
   3d02c:	str	r0, [sp, #56]	; 0x38
   3d030:	mov	r0, #0
   3d034:	cmp	lr, r1
   3d038:	blt	3ce74 <GetDataSlab+0x10ff8>
   3d03c:	b	2e97c <GetDataSlab+0x2b00>
   3d040:	ldr	r0, [fp, #16]
   3d044:	mov	sl, r6
   3d048:	mov	ip, #0
   3d04c:	sub	r8, fp, #96	; 0x60
   3d050:	ldr	r0, [r0]
   3d054:	str	r0, [sp, #36]	; 0x24
   3d058:	sub	r0, r0, #1
   3d05c:	str	r0, [fp, #-96]	; 0xffffffa0
   3d060:	ldr	r0, [fp, #8]
   3d064:	ldr	r0, [r0]
   3d068:	str	r0, [fp, #-176]	; 0xffffff50
   3d06c:	str	r0, [sp, #40]	; 0x28
   3d070:	ldr	r0, [fp, #24]
   3d074:	ldr	r1, [r6]
   3d078:	cmp	r0, #2
   3d07c:	str	r1, [sp, #44]	; 0x2c
   3d080:	str	r1, [sp, #60]	; 0x3c
   3d084:	blt	3d1d8 <GetDataSlab+0x1135c>
   3d088:	ldr	r0, [fp, #8]
   3d08c:	ldr	r3, [sp, #40]	; 0x28
   3d090:	ldr	r1, [sp, #44]	; 0x2c
   3d094:	mov	r5, lr
   3d098:	mov	r4, #1
   3d09c:	mov	r2, #0
   3d0a0:	mov	ip, #0
   3d0a4:	sub	r7, r0, #4
   3d0a8:	sub	r6, r0, #12
   3d0ac:	mvn	r0, #15
   3d0b0:	mov	lr, r3
   3d0b4:	str	r1, [sp, #60]	; 0x3c
   3d0b8:	ldr	r1, [fp, #16]
   3d0bc:	add	r2, r2, #1
   3d0c0:	cmp	r2, #4
   3d0c4:	str	r2, [sp, #48]	; 0x30
   3d0c8:	ldr	r1, [r1, r4, lsl #2]
   3d0cc:	str	r3, [r5, r4, lsl #2]
   3d0d0:	sub	sl, r1, #1
   3d0d4:	ldr	r1, [fp, #8]
   3d0d8:	str	sl, [r8, r4, lsl #2]
   3d0dc:	ldr	r9, [r1, r4, lsl #2]
   3d0e0:	str	r9, [sp, #52]	; 0x34
   3d0e4:	bcs	3d0f0 <GetDataSlab+0x11274>
   3d0e8:	mov	r5, r4
   3d0ec:	b	3d174 <GetDataSlab+0x112f8>
   3d0f0:	vmov.i32	q9, #1	; 0x00000001
   3d0f4:	vmov.i32	q10, #1	; 0x00000001
   3d0f8:	vmov.i32	q8, #1	; 0x00000001
   3d0fc:	bic	r1, r2, #3
   3d100:	bic	r8, r4, #3
   3d104:	vmov.32	d23[1], r9
   3d108:	vmov.32	d18[0], r3
   3d10c:	vmov.32	d20[0], sl
   3d110:	sub	r5, r4, r1
   3d114:	mov	r3, r6
   3d118:	vorr	d16, d18, d18
   3d11c:	vmov.i32	q9, #1	; 0x00000001
   3d120:	vorr	d18, d20, d20
   3d124:	vld1.32	{d20-d21}, [r3], r0
   3d128:	subs	r8, r8, #4
   3d12c:	vrev64.32	q12, q10
   3d130:	vext.8	q12, q12, q12, #8
   3d134:	vext.8	q11, q11, q12, #12
   3d138:	vmul.i32	q9, q9, q12
   3d13c:	vmul.i32	q8, q11, q8
   3d140:	vorr	q11, q12, q12
   3d144:	bne	3d124 <GetDataSlab+0x112a8>
   3d148:	vext.8	q11, q9, q8, #8
   3d14c:	vext.8	q12, q8, q8, #8
   3d150:	cmp	r2, r1
   3d154:	vmul.i32	q0, q9, q11
   3d158:	vmul.i32	q1, q8, q12
   3d15c:	vmul.i32	q8, q0, d0[1]
   3d160:	vmul.i32	q9, q1, d2[1]
   3d164:	vmov.32	sl, d16[0]
   3d168:	vmov.32	r3, d18[0]
   3d16c:	beq	3d188 <GetDataSlab+0x1130c>
   3d170:	vmov.32	r9, d20[0]
   3d174:	mul	r3, r9, r3
   3d178:	ldr	r9, [r7, r5, lsl #2]
   3d17c:	subs	r5, r5, #1
   3d180:	mul	sl, sl, r9
   3d184:	bne	3d174 <GetDataSlab+0x112f8>
   3d188:	ldr	r1, [fp, #12]
   3d18c:	sub	r5, fp, #176	; 0xb0
   3d190:	sub	r8, fp, #96	; 0x60
   3d194:	ldr	r2, [sp, #60]	; 0x3c
   3d198:	add	r6, r6, #4
   3d19c:	str	sl, [r8, r4, lsl #2]
   3d1a0:	str	r3, [r5, r4, lsl #2]
   3d1a4:	ldr	sl, [fp, #20]
   3d1a8:	ldr	r1, [r1, r4, lsl #2]
   3d1ac:	mla	ip, r1, lr, ip
   3d1b0:	ldr	r1, [sl, r4, lsl #2]
   3d1b4:	mov	lr, r3
   3d1b8:	ldr	r3, [sp, #52]	; 0x34
   3d1bc:	add	r4, r4, #1
   3d1c0:	mul	r2, r1, r2
   3d1c4:	ldr	r1, [fp, #24]
   3d1c8:	str	r2, [sp, #60]	; 0x3c
   3d1cc:	ldr	r2, [sp, #48]	; 0x30
   3d1d0:	cmp	r4, r1
   3d1d4:	bne	3d0b8 <GetDataSlab+0x1123c>
   3d1d8:	ldr	r0, [sp, #56]	; 0x38
   3d1dc:	ldr	r1, [sp, #36]	; 0x24
   3d1e0:	add	lr, r0, ip, lsl #1
   3d1e4:	cmp	r1, #1
   3d1e8:	bne	49838 <GetDataSlab+0x1d9bc>
   3d1ec:	ldr	r0, [sp, #60]	; 0x3c
   3d1f0:	ldr	r1, [sp, #44]	; 0x2c
   3d1f4:	cmp	r0, #1
   3d1f8:	blt	51be8 <GetDataSlab+0x25d6c>
   3d1fc:	sub	r0, fp, #136	; 0x88
   3d200:	add	r7, sl, #4
   3d204:	mov	sl, #0
   3d208:	add	r2, sp, #232	; 0xe8
   3d20c:	mov	r9, #0
   3d210:	orr	r6, r0, #4
   3d214:	orr	r0, r8, #4
   3d218:	ldr	r8, [fp, #12]
   3d21c:	str	r0, [sp, #48]	; 0x30
   3d220:	lsl	r0, r1, #3
   3d224:	str	r0, [sp, #56]	; 0x38
   3d228:	bic	r0, r1, #1
   3d22c:	str	r0, [sp, #52]	; 0x34
   3d230:	ldr	r0, [r8], #4
   3d234:	str	r0, [sp, #64]	; 0x40
   3d238:	cmp	r1, #1
   3d23c:	blt	3d2bc <GetDataSlab+0x11440>
   3d240:	mov	r3, #0
   3d244:	beq	3d288 <GetDataSlab+0x1140c>
   3d248:	ldr	r0, [sp, #64]	; 0x40
   3d24c:	ldr	r1, [sp, #52]	; 0x34
   3d250:	ldr	r3, [sp, #68]	; 0x44
   3d254:	add	r0, lr, r0, lsl #1
   3d258:	ldr	r5, [r0], #4
   3d25c:	subs	r1, r1, #2
   3d260:	str	r5, [sp, #232]	; 0xe8
   3d264:	vld1.32	{d16[0]}, [r2 :32]
   3d268:	vmovl.s16	q8, d16
   3d26c:	vmovl.s32	q8, d16
   3d270:	vst1.64	{d16-d17}, [r3]!
   3d274:	bne	3d258 <GetDataSlab+0x113dc>
   3d278:	ldr	r0, [sp, #44]	; 0x2c
   3d27c:	ldr	r3, [sp, #52]	; 0x34
   3d280:	cmp	r0, r3
   3d284:	beq	3d2bc <GetDataSlab+0x11440>
   3d288:	ldr	r4, [sp, #64]	; 0x40
   3d28c:	ldr	r0, [sp, #44]	; 0x2c
   3d290:	ldr	r1, [sp, #68]	; 0x44
   3d294:	add	r5, lr, r4, lsl #1
   3d298:	sub	r0, r0, r3
   3d29c:	add	r1, r1, r3, lsl #3
   3d2a0:	add	r3, r5, r3, lsl #1
   3d2a4:	ldrsh	r4, [r3], #2
   3d2a8:	subs	r0, r0, #1
   3d2ac:	asr	r5, r4, #31
   3d2b0:	strd	r4, [r1]
   3d2b4:	add	r1, r1, #8
   3d2b8:	bne	3d2a4 <GetDataSlab+0x11428>
   3d2bc:	ldr	r0, [sp, #40]	; 0x28
   3d2c0:	add	lr, lr, r0, lsl #1
   3d2c4:	add	ip, ip, r0
   3d2c8:	ldr	r0, [fp, #24]
   3d2cc:	cmp	r0, #2
   3d2d0:	blt	3d37c <GetDataSlab+0x11500>
   3d2d4:	mov	r1, #0
   3d2d8:	mov	r0, r1
   3d2dc:	ldr	r1, [r6, r1, lsl #2]
   3d2e0:	add	r1, r1, #1
   3d2e4:	str	r1, [r6, r0, lsl #2]
   3d2e8:	ldr	r3, [r7, r0, lsl #2]
   3d2ec:	sdiv	r4, r1, r3
   3d2f0:	mls	r1, r4, r3, r1
   3d2f4:	cmp	r1, #0
   3d2f8:	bne	3d36c <GetDataSlab+0x114f0>
   3d2fc:	sub	r4, fp, #176	; 0xb0
   3d300:	str	sl, [r6, r0, lsl #2]
   3d304:	add	r1, r4, r0, lsl #2
   3d308:	ldr	r1, [r1, #4]
   3d30c:	sdiv	r3, ip, r1
   3d310:	mls	r3, r3, r1, ip
   3d314:	cmp	r3, #0
   3d318:	beq	3d334 <GetDataSlab+0x114b8>
   3d31c:	ldr	r4, [r4, r0, lsl #2]
   3d320:	ldr	r5, [r8, r0, lsl #2]
   3d324:	sub	r1, r1, r3
   3d328:	mla	r1, r5, r4, r1
   3d32c:	add	ip, r1, ip
   3d330:	b	3d350 <GetDataSlab+0x114d4>
   3d334:	ldr	r1, [r8, r0, lsl #2]
   3d338:	cmp	r1, #0
   3d33c:	beq	3d354 <GetDataSlab+0x114d8>
   3d340:	sub	r3, fp, #176	; 0xb0
   3d344:	ldr	r3, [r3, r0, lsl #2]
   3d348:	mla	ip, r3, r1, ip
   3d34c:	mul	r1, r3, r1
   3d350:	add	lr, lr, r1, lsl #1
   3d354:	ldr	r3, [fp, #24]
   3d358:	add	r1, r0, #1
   3d35c:	add	r0, r0, #2
   3d360:	cmp	r0, r3
   3d364:	blt	3d2d8 <GetDataSlab+0x1145c>
   3d368:	b	3d37c <GetDataSlab+0x11500>
   3d36c:	ldr	r1, [sp, #48]	; 0x30
   3d370:	ldr	r0, [r1, r0, lsl #2]
   3d374:	add	lr, lr, r0, lsl #1
   3d378:	add	ip, r0, ip
   3d37c:	ldr	r0, [sp, #68]	; 0x44
   3d380:	ldr	r1, [sp, #56]	; 0x38
   3d384:	ldr	r3, [sp, #60]	; 0x3c
   3d388:	add	r0, r0, r1
   3d38c:	ldr	r1, [sp, #44]	; 0x2c
   3d390:	str	r0, [sp, #68]	; 0x44
   3d394:	mov	r0, #0
   3d398:	add	r9, r9, r1
   3d39c:	cmp	r9, r3
   3d3a0:	blt	3d238 <GetDataSlab+0x113bc>
   3d3a4:	b	2e97c <GetDataSlab+0x2b00>
   3d3a8:	ldr	r0, [fp, #16]
   3d3ac:	mov	r9, #0
   3d3b0:	sub	r8, fp, #96	; 0x60
   3d3b4:	ldr	r0, [r0]
   3d3b8:	str	r0, [sp, #32]
   3d3bc:	sub	r0, r0, #1
   3d3c0:	str	r0, [fp, #-96]	; 0xffffffa0
   3d3c4:	ldr	r0, [fp, #8]
   3d3c8:	ldr	r0, [r0]
   3d3cc:	str	r0, [fp, #-176]	; 0xffffff50
   3d3d0:	str	r0, [sp, #48]	; 0x30
   3d3d4:	ldr	r0, [fp, #24]
   3d3d8:	ldr	r1, [r6]
   3d3dc:	cmp	r0, #2
   3d3e0:	str	r1, [sp, #52]	; 0x34
   3d3e4:	str	r1, [sp, #60]	; 0x3c
   3d3e8:	blt	3d534 <GetDataSlab+0x116b8>
   3d3ec:	ldr	r0, [fp, #8]
   3d3f0:	ldr	r3, [sp, #48]	; 0x30
   3d3f4:	ldr	r6, [sp, #52]	; 0x34
   3d3f8:	mov	r4, #1
   3d3fc:	mov	r2, #0
   3d400:	mov	r9, #0
   3d404:	sub	r1, r0, #4
   3d408:	sub	r7, r0, #12
   3d40c:	mvn	r0, #15
   3d410:	mov	sl, r3
   3d414:	str	r6, [sp, #60]	; 0x3c
   3d418:	ldr	r6, [fp, #16]
   3d41c:	add	r2, r2, #1
   3d420:	cmp	r2, #4
   3d424:	ldr	r6, [r6, r4, lsl #2]
   3d428:	str	r3, [lr, r4, lsl #2]
   3d42c:	sub	lr, r6, #1
   3d430:	ldr	r6, [fp, #8]
   3d434:	str	lr, [r8, r4, lsl #2]
   3d438:	ldr	ip, [r6, r4, lsl #2]
   3d43c:	bcs	3d44c <GetDataSlab+0x115d0>
   3d440:	mov	r5, ip
   3d444:	mov	r6, r4
   3d448:	b	3d4d0 <GetDataSlab+0x11654>
   3d44c:	vmov.i32	q9, #1	; 0x00000001
   3d450:	vmov.i32	q10, #1	; 0x00000001
   3d454:	vmov.i32	q8, #1	; 0x00000001
   3d458:	bic	r5, r2, #3
   3d45c:	bic	r8, r4, #3
   3d460:	vmov.32	d23[1], ip
   3d464:	vmov.32	d18[0], r3
   3d468:	vmov.32	d20[0], lr
   3d46c:	sub	r6, r4, r5
   3d470:	mov	r3, r7
   3d474:	vorr	d16, d18, d18
   3d478:	vmov.i32	q9, #1	; 0x00000001
   3d47c:	vorr	d18, d20, d20
   3d480:	vld1.32	{d20-d21}, [r3], r0
   3d484:	subs	r8, r8, #4
   3d488:	vrev64.32	q12, q10
   3d48c:	vext.8	q12, q12, q12, #8
   3d490:	vext.8	q11, q11, q12, #12
   3d494:	vmul.i32	q9, q9, q12
   3d498:	vmul.i32	q8, q11, q8
   3d49c:	vorr	q11, q12, q12
   3d4a0:	bne	3d480 <GetDataSlab+0x11604>
   3d4a4:	vext.8	q11, q9, q8, #8
   3d4a8:	vext.8	q12, q8, q8, #8
   3d4ac:	cmp	r2, r5
   3d4b0:	vmul.i32	q0, q9, q11
   3d4b4:	vmul.i32	q1, q8, q12
   3d4b8:	vmul.i32	q8, q0, d0[1]
   3d4bc:	vmul.i32	q9, q1, d2[1]
   3d4c0:	vmov.32	lr, d16[0]
   3d4c4:	vmov.32	r3, d18[0]
   3d4c8:	beq	3d4e4 <GetDataSlab+0x11668>
   3d4cc:	vmov.32	r5, d20[0]
   3d4d0:	mul	r3, r5, r3
   3d4d4:	ldr	r5, [r1, r6, lsl #2]
   3d4d8:	subs	r6, r6, #1
   3d4dc:	mul	lr, lr, r5
   3d4e0:	bne	3d4d0 <GetDataSlab+0x11654>
   3d4e4:	sub	r5, fp, #176	; 0xb0
   3d4e8:	sub	r8, fp, #96	; 0x60
   3d4ec:	add	r7, r7, #4
   3d4f0:	str	lr, [r8, r4, lsl #2]
   3d4f4:	str	r3, [r5, r4, lsl #2]
   3d4f8:	mov	lr, r5
   3d4fc:	ldr	r5, [fp, #12]
   3d500:	ldr	r6, [r5, r4, lsl #2]
   3d504:	ldr	r5, [fp, #20]
   3d508:	mla	r9, r6, sl, r9
   3d50c:	ldr	r6, [r5, r4, lsl #2]
   3d510:	ldr	r5, [sp, #60]	; 0x3c
   3d514:	add	r4, r4, #1
   3d518:	mov	sl, r3
   3d51c:	mov	r3, ip
   3d520:	mul	r5, r6, r5
   3d524:	ldr	r6, [fp, #24]
   3d528:	str	r5, [sp, #60]	; 0x3c
   3d52c:	cmp	r4, r6
   3d530:	bne	3d418 <GetDataSlab+0x1159c>
   3d534:	ldr	r0, [sp, #56]	; 0x38
   3d538:	ldr	r7, [sp, #32]
   3d53c:	add	r4, r0, r9, lsl #1
   3d540:	cmp	r7, #1
   3d544:	bne	499bc <GetDataSlab+0x1db40>
   3d548:	ldr	r0, [sp, #60]	; 0x3c
   3d54c:	sub	r1, fp, #96	; 0x60
   3d550:	cmp	r0, #1
   3d554:	ldr	r0, [fp, #20]
   3d558:	blt	51bfc <GetDataSlab+0x25d80>
   3d55c:	ldr	r2, [sp, #52]	; 0x34
   3d560:	add	sl, r0, #4
   3d564:	sub	r0, fp, #136	; 0x88
   3d568:	ldr	r8, [fp, #12]
   3d56c:	mov	ip, #0
   3d570:	orr	r6, r0, #4
   3d574:	orr	r0, r1, #4
   3d578:	add	r1, sp, #236	; 0xec
   3d57c:	str	r0, [sp, #36]	; 0x24
   3d580:	lsl	r0, r2, #3
   3d584:	str	r0, [sp, #56]	; 0x38
   3d588:	bic	r0, r2, #1
   3d58c:	str	r0, [sp, #40]	; 0x28
   3d590:	ldr	r0, [r8], #4
   3d594:	str	r0, [sp, #44]	; 0x2c
   3d598:	mov	r0, #0
   3d59c:	str	r0, [sp, #64]	; 0x40
   3d5a0:	cmp	r2, #1
   3d5a4:	blt	3d618 <GetDataSlab+0x1179c>
   3d5a8:	mov	r5, #0
   3d5ac:	beq	3d5ec <GetDataSlab+0x11770>
   3d5b0:	ldr	r0, [sp, #44]	; 0x2c
   3d5b4:	ldr	r5, [sp, #40]	; 0x28
   3d5b8:	ldr	r3, [sp, #68]	; 0x44
   3d5bc:	add	r0, r4, r0, lsl #1
   3d5c0:	ldr	r7, [r0], #4
   3d5c4:	subs	r5, r5, #2
   3d5c8:	str	r7, [sp, #236]	; 0xec
   3d5cc:	vld1.32	{d16[0]}, [r1 :32]
   3d5d0:	vmovl.u16	q8, d16
   3d5d4:	vmovl.u32	q8, d16
   3d5d8:	vst1.64	{d16-d17}, [r3]!
   3d5dc:	bne	3d5c0 <GetDataSlab+0x11744>
   3d5e0:	ldr	r5, [sp, #40]	; 0x28
   3d5e4:	cmp	r2, r5
   3d5e8:	beq	3d618 <GetDataSlab+0x1179c>
   3d5ec:	sub	r0, r2, r5
   3d5f0:	ldr	r2, [sp, #44]	; 0x2c
   3d5f4:	ldr	r3, [sp, #68]	; 0x44
   3d5f8:	add	r7, r4, r2, lsl #1
   3d5fc:	add	r3, r3, r5, lsl #3
   3d600:	add	r5, r7, r5, lsl #1
   3d604:	ldrh	r7, [r5], #2
   3d608:	subs	r0, r0, #1
   3d60c:	stm	r3, {r7, ip}
   3d610:	add	r3, r3, #8
   3d614:	bne	3d604 <GetDataSlab+0x11788>
   3d618:	ldr	r0, [sp, #48]	; 0x30
   3d61c:	sub	r2, fp, #176	; 0xb0
   3d620:	add	r4, r4, r0, lsl #1
   3d624:	add	r9, r9, r0
   3d628:	ldr	r0, [fp, #24]
   3d62c:	cmp	r0, #2
   3d630:	blt	3d6d8 <GetDataSlab+0x1185c>
   3d634:	mov	r3, #0
   3d638:	mov	r0, r3
   3d63c:	ldr	r3, [r6, r3, lsl #2]
   3d640:	add	r3, r3, #1
   3d644:	str	r3, [r6, r0, lsl #2]
   3d648:	ldr	r5, [sl, r0, lsl #2]
   3d64c:	sdiv	r7, r3, r5
   3d650:	mls	r3, r7, r5, r3
   3d654:	cmp	r3, #0
   3d658:	bne	3d6c8 <GetDataSlab+0x1184c>
   3d65c:	add	r3, r2, r0, lsl #2
   3d660:	str	ip, [r6, r0, lsl #2]
   3d664:	ldr	r3, [r3, #4]
   3d668:	sdiv	r5, r9, r3
   3d66c:	mls	r5, r5, r3, r9
   3d670:	cmp	r5, #0
   3d674:	beq	3d694 <GetDataSlab+0x11818>
   3d678:	ldr	r7, [r2, r0, lsl #2]
   3d67c:	ldr	lr, [r8, r0, lsl #2]
   3d680:	sub	r3, r3, r5
   3d684:	sub	r2, fp, #176	; 0xb0
   3d688:	mla	r3, lr, r7, r3
   3d68c:	add	r9, r3, r9
   3d690:	b	3d6ac <GetDataSlab+0x11830>
   3d694:	ldr	r3, [r8, r0, lsl #2]
   3d698:	cmp	r3, #0
   3d69c:	beq	3d6b0 <GetDataSlab+0x11834>
   3d6a0:	ldr	r7, [r2, r0, lsl #2]
   3d6a4:	mla	r9, r7, r3, r9
   3d6a8:	mul	r3, r7, r3
   3d6ac:	add	r4, r4, r3, lsl #1
   3d6b0:	ldr	r7, [fp, #24]
   3d6b4:	add	r3, r0, #1
   3d6b8:	add	r0, r0, #2
   3d6bc:	cmp	r0, r7
   3d6c0:	blt	3d638 <GetDataSlab+0x117bc>
   3d6c4:	b	3d6d8 <GetDataSlab+0x1185c>
   3d6c8:	ldr	r2, [sp, #36]	; 0x24
   3d6cc:	ldr	r0, [r2, r0, lsl #2]
   3d6d0:	add	r4, r4, r0, lsl #1
   3d6d4:	add	r9, r0, r9
   3d6d8:	ldr	r0, [sp, #68]	; 0x44
   3d6dc:	ldr	r2, [sp, #56]	; 0x38
   3d6e0:	ldr	r7, [sp, #64]	; 0x40
   3d6e4:	ldr	r3, [sp, #60]	; 0x3c
   3d6e8:	add	r0, r0, r2
   3d6ec:	ldr	r2, [sp, #52]	; 0x34
   3d6f0:	str	r0, [sp, #68]	; 0x44
   3d6f4:	mov	r0, #0
   3d6f8:	add	r7, r7, r2
   3d6fc:	cmp	r7, r3
   3d700:	str	r7, [sp, #64]	; 0x40
   3d704:	blt	3d5a0 <GetDataSlab+0x11724>
   3d708:	b	2e97c <GetDataSlab+0x2b00>
   3d70c:	ldr	r0, [fp, #16]
   3d710:	mov	r3, #0
   3d714:	sub	r7, fp, #96	; 0x60
   3d718:	ldr	r0, [r0]
   3d71c:	str	r0, [sp, #32]
   3d720:	sub	r0, r0, #1
   3d724:	str	r0, [fp, #-96]	; 0xffffffa0
   3d728:	ldr	r0, [fp, #8]
   3d72c:	ldr	r0, [r0]
   3d730:	str	r0, [fp, #-176]	; 0xffffff50
   3d734:	str	r0, [sp, #44]	; 0x2c
   3d738:	ldr	r0, [fp, #24]
   3d73c:	ldr	r1, [r6]
   3d740:	cmp	r0, #2
   3d744:	str	r1, [sp, #48]	; 0x30
   3d748:	str	r1, [sp, #60]	; 0x3c
   3d74c:	blt	3d8a4 <GetDataSlab+0x11a28>
   3d750:	ldr	r0, [fp, #8]
   3d754:	ldr	r2, [sp, #44]	; 0x2c
   3d758:	mov	sl, r6
   3d75c:	mov	r5, #1
   3d760:	mov	r4, #0
   3d764:	mvn	r8, #15
   3d768:	mov	r3, #0
   3d76c:	sub	r1, r0, #4
   3d770:	sub	ip, r0, #12
   3d774:	ldr	r0, [sp, #48]	; 0x30
   3d778:	mov	r9, r2
   3d77c:	str	r0, [sp, #60]	; 0x3c
   3d780:	ldr	r0, [fp, #16]
   3d784:	add	r4, r4, #1
   3d788:	cmp	r4, #4
   3d78c:	str	r4, [sp, #52]	; 0x34
   3d790:	ldr	r0, [r0, r5, lsl #2]
   3d794:	str	r2, [lr, r5, lsl #2]
   3d798:	sub	r0, r0, #1
   3d79c:	str	r0, [r7, r5, lsl #2]
   3d7a0:	ldr	r7, [fp, #8]
   3d7a4:	ldr	r7, [r7, r5, lsl #2]
   3d7a8:	bcs	3d7b8 <GetDataSlab+0x1193c>
   3d7ac:	mov	r4, r7
   3d7b0:	mov	r6, r5
   3d7b4:	b	3d844 <GetDataSlab+0x119c8>
   3d7b8:	vmov.i32	q9, #1	; 0x00000001
   3d7bc:	vmov.i32	q10, #1	; 0x00000001
   3d7c0:	vmov.i32	q8, #1	; 0x00000001
   3d7c4:	bic	lr, r4, #3
   3d7c8:	bic	sl, r5, #3
   3d7cc:	vmov.32	d23[1], r7
   3d7d0:	vmov.32	d18[0], r2
   3d7d4:	vmov.32	d20[0], r0
   3d7d8:	sub	r6, r5, lr
   3d7dc:	mov	r0, ip
   3d7e0:	vorr	d16, d18, d18
   3d7e4:	vmov.i32	q9, #1	; 0x00000001
   3d7e8:	vorr	d18, d20, d20
   3d7ec:	vld1.32	{d20-d21}, [r0], r8
   3d7f0:	subs	sl, sl, #4
   3d7f4:	vrev64.32	q12, q10
   3d7f8:	vext.8	q12, q12, q12, #8
   3d7fc:	vext.8	q11, q11, q12, #12
   3d800:	vmul.i32	q9, q9, q12
   3d804:	vmul.i32	q8, q11, q8
   3d808:	vorr	q11, q12, q12
   3d80c:	bne	3d7ec <GetDataSlab+0x11970>
   3d810:	vext.8	q11, q9, q8, #8
   3d814:	vext.8	q12, q8, q8, #8
   3d818:	ldr	sl, [fp, #20]
   3d81c:	cmp	r4, lr
   3d820:	mov	r4, r7
   3d824:	vmul.i32	q0, q9, q11
   3d828:	vmul.i32	q1, q8, q12
   3d82c:	vmul.i32	q8, q0, d0[1]
   3d830:	vmul.i32	q9, q1, d2[1]
   3d834:	vmov.32	r0, d16[0]
   3d838:	vmov.32	r2, d18[0]
   3d83c:	beq	3d858 <GetDataSlab+0x119dc>
   3d840:	vmov.32	r7, d20[0]
   3d844:	mul	r2, r7, r2
   3d848:	ldr	r7, [r1, r6, lsl #2]
   3d84c:	subs	r6, r6, #1
   3d850:	mul	r0, r0, r7
   3d854:	bne	3d844 <GetDataSlab+0x119c8>
   3d858:	sub	r7, fp, #96	; 0x60
   3d85c:	sub	lr, fp, #176	; 0xb0
   3d860:	ldr	r6, [sp, #60]	; 0x3c
   3d864:	add	ip, ip, #4
   3d868:	str	r0, [r7, r5, lsl #2]
   3d86c:	ldr	r0, [fp, #12]
   3d870:	str	r2, [lr, r5, lsl #2]
   3d874:	ldr	r0, [r0, r5, lsl #2]
   3d878:	mla	r3, r0, r9, r3
   3d87c:	ldr	r0, [sl, r5, lsl #2]
   3d880:	mov	r9, r2
   3d884:	mov	r2, r4
   3d888:	ldr	r4, [sp, #52]	; 0x34
   3d88c:	add	r5, r5, #1
   3d890:	mul	r6, r0, r6
   3d894:	ldr	r0, [fp, #24]
   3d898:	str	r6, [sp, #60]	; 0x3c
   3d89c:	cmp	r5, r0
   3d8a0:	bne	3d780 <GetDataSlab+0x11904>
   3d8a4:	ldr	r0, [sp, #56]	; 0x38
   3d8a8:	ldr	r6, [sp, #32]
   3d8ac:	add	sl, r0, r3, lsl #2
   3d8b0:	cmp	r6, #1
   3d8b4:	bne	49b58 <GetDataSlab+0x1dcdc>
   3d8b8:	ldr	r0, [sp, #60]	; 0x3c
   3d8bc:	sub	r1, fp, #96	; 0x60
   3d8c0:	cmp	r0, #1
   3d8c4:	ldr	r0, [fp, #12]
   3d8c8:	blt	51c10 <GetDataSlab+0x25d94>
   3d8cc:	add	r9, r0, #4
   3d8d0:	ldr	r0, [fp, #20]
   3d8d4:	add	lr, r0, #4
   3d8d8:	sub	r0, fp, #136	; 0x88
   3d8dc:	orr	r5, r0, #4
   3d8e0:	orr	r0, r1, #4
   3d8e4:	ldr	r1, [sp, #48]	; 0x30
   3d8e8:	str	r0, [sp, #36]	; 0x24
   3d8ec:	lsl	r0, r1, #3
   3d8f0:	str	r0, [sp, #52]	; 0x34
   3d8f4:	bic	r0, r1, #1
   3d8f8:	str	r0, [sp, #40]	; 0x28
   3d8fc:	mov	r0, #0
   3d900:	str	r0, [sp, #56]	; 0x38
   3d904:	ldr	ip, [sp, #68]	; 0x44
   3d908:	cmp	r1, #1
   3d90c:	blt	3d998 <GetDataSlab+0x11b1c>
   3d910:	ldr	r0, [fp, #12]
   3d914:	mov	r2, #0
   3d918:	ldr	r6, [r0]
   3d91c:	beq	3d968 <GetDataSlab+0x11aec>
   3d920:	ldr	r1, [sp, #40]	; 0x28
   3d924:	add	r2, sl, r6, lsl #2
   3d928:	mov	r0, ip
   3d92c:	add	r4, sp, #216	; 0xd8
   3d930:	ldm	r2, {r8, ip}
   3d934:	subs	r1, r1, #2
   3d938:	add	r2, r2, #8
   3d93c:	str	ip, [sp, #220]	; 0xdc
   3d940:	str	r8, [sp, #216]	; 0xd8
   3d944:	vld1.32	{d16}, [r4 :64]
   3d948:	vmovl.s32	q8, d16
   3d94c:	vst1.64	{d16-d17}, [r0]!
   3d950:	bne	3d930 <GetDataSlab+0x11ab4>
   3d954:	ldr	r0, [sp, #48]	; 0x30
   3d958:	ldr	r2, [sp, #40]	; 0x28
   3d95c:	ldr	ip, [sp, #68]	; 0x44
   3d960:	cmp	r0, r2
   3d964:	beq	3d998 <GetDataSlab+0x11b1c>
   3d968:	ldr	r0, [sp, #48]	; 0x30
   3d96c:	sub	r7, r0, r2
   3d970:	add	r0, ip, r2, lsl #3
   3d974:	add	r2, r2, r6
   3d978:	add	r2, sl, r2, lsl #2
   3d97c:	ldr	r8, [r2], #4
   3d980:	subs	r7, r7, #1
   3d984:	asr	r1, r8, #31
   3d988:	str	r8, [r0]
   3d98c:	str	r1, [r0, #4]
   3d990:	add	r0, r0, #8
   3d994:	bne	3d97c <GetDataSlab+0x11b00>
   3d998:	ldr	r0, [sp, #44]	; 0x2c
   3d99c:	add	sl, sl, r0, lsl #2
   3d9a0:	add	r3, r3, r0
   3d9a4:	ldr	r0, [fp, #24]
   3d9a8:	cmp	r0, #2
   3d9ac:	blt	3da5c <GetDataSlab+0x11be0>
   3d9b0:	mov	r1, #0
   3d9b4:	mov	r4, #0
   3d9b8:	mov	r0, r1
   3d9bc:	ldr	r1, [r5, r1, lsl #2]
   3d9c0:	add	r1, r1, #1
   3d9c4:	str	r1, [r5, r0, lsl #2]
   3d9c8:	ldr	r2, [lr, r0, lsl #2]
   3d9cc:	sdiv	r7, r1, r2
   3d9d0:	mls	r1, r7, r2, r1
   3d9d4:	cmp	r1, #0
   3d9d8:	bne	3da4c <GetDataSlab+0x11bd0>
   3d9dc:	sub	r6, fp, #176	; 0xb0
   3d9e0:	str	r4, [r5, r0, lsl #2]
   3d9e4:	add	r1, r6, r0, lsl #2
   3d9e8:	ldr	r1, [r1, #4]
   3d9ec:	sdiv	r2, r3, r1
   3d9f0:	mls	r2, r2, r1, r3
   3d9f4:	cmp	r2, #0
   3d9f8:	beq	3da14 <GetDataSlab+0x11b98>
   3d9fc:	ldr	r7, [r6, r0, lsl #2]
   3da00:	ldr	r6, [r9, r0, lsl #2]
   3da04:	sub	r1, r1, r2
   3da08:	mla	r1, r6, r7, r1
   3da0c:	add	r3, r1, r3
   3da10:	b	3da30 <GetDataSlab+0x11bb4>
   3da14:	ldr	r1, [r9, r0, lsl #2]
   3da18:	cmp	r1, #0
   3da1c:	beq	3da34 <GetDataSlab+0x11bb8>
   3da20:	sub	r2, fp, #176	; 0xb0
   3da24:	ldr	r2, [r2, r0, lsl #2]
   3da28:	mla	r3, r2, r1, r3
   3da2c:	mul	r1, r2, r1
   3da30:	add	sl, sl, r1, lsl #2
   3da34:	ldr	r2, [fp, #24]
   3da38:	add	r1, r0, #1
   3da3c:	add	r0, r0, #2
   3da40:	cmp	r0, r2
   3da44:	blt	3d9b8 <GetDataSlab+0x11b3c>
   3da48:	b	3da5c <GetDataSlab+0x11be0>
   3da4c:	ldr	r1, [sp, #36]	; 0x24
   3da50:	ldr	r0, [r1, r0, lsl #2]
   3da54:	add	sl, sl, r0, lsl #2
   3da58:	add	r3, r0, r3
   3da5c:	ldr	r1, [sp, #48]	; 0x30
   3da60:	ldr	r7, [sp, #56]	; 0x38
   3da64:	ldr	r0, [sp, #52]	; 0x34
   3da68:	ldr	r2, [sp, #60]	; 0x3c
   3da6c:	add	r7, r7, r1
   3da70:	add	ip, ip, r0
   3da74:	mov	r0, #0
   3da78:	cmp	r7, r2
   3da7c:	str	ip, [sp, #68]	; 0x44
   3da80:	str	r7, [sp, #56]	; 0x38
   3da84:	blt	3d904 <GetDataSlab+0x11a88>
   3da88:	b	2e97c <GetDataSlab+0x2b00>
   3da8c:	ldr	r0, [fp, #16]
   3da90:	mov	r3, #0
   3da94:	sub	r7, fp, #96	; 0x60
   3da98:	ldr	r0, [r0]
   3da9c:	str	r0, [sp, #36]	; 0x24
   3daa0:	sub	r0, r0, #1
   3daa4:	str	r0, [fp, #-96]	; 0xffffffa0
   3daa8:	ldr	r0, [fp, #8]
   3daac:	ldr	r0, [r0]
   3dab0:	str	r0, [fp, #-176]	; 0xffffff50
   3dab4:	str	r0, [sp, #44]	; 0x2c
   3dab8:	ldr	r0, [fp, #24]
   3dabc:	ldr	r1, [r6]
   3dac0:	cmp	r0, #2
   3dac4:	str	r1, [sp, #48]	; 0x30
   3dac8:	str	r1, [sp, #60]	; 0x3c
   3dacc:	blt	3dc24 <GetDataSlab+0x11da8>
   3dad0:	ldr	r0, [fp, #8]
   3dad4:	ldr	r2, [sp, #44]	; 0x2c
   3dad8:	mov	r6, lr
   3dadc:	mov	r5, #1
   3dae0:	mov	r4, #0
   3dae4:	mvn	lr, #15
   3dae8:	mov	r3, #0
   3daec:	sub	r1, r0, #4
   3daf0:	sub	ip, r0, #12
   3daf4:	ldr	r0, [sp, #48]	; 0x30
   3daf8:	mov	r9, r2
   3dafc:	str	r0, [sp, #60]	; 0x3c
   3db00:	ldr	r0, [fp, #16]
   3db04:	add	r4, r4, #1
   3db08:	cmp	r4, #4
   3db0c:	str	r4, [sp, #52]	; 0x34
   3db10:	ldr	r0, [r0, r5, lsl #2]
   3db14:	str	r2, [r6, r5, lsl #2]
   3db18:	sub	r0, r0, #1
   3db1c:	str	r0, [r7, r5, lsl #2]
   3db20:	ldr	r7, [fp, #8]
   3db24:	ldr	r8, [r7, r5, lsl #2]
   3db28:	bcs	3db38 <GetDataSlab+0x11cbc>
   3db2c:	mov	sl, r8
   3db30:	mov	r6, r5
   3db34:	b	3dbc0 <GetDataSlab+0x11d44>
   3db38:	vmov.i32	q9, #1	; 0x00000001
   3db3c:	vmov.i32	q10, #1	; 0x00000001
   3db40:	vmov.i32	q8, #1	; 0x00000001
   3db44:	bic	r7, r4, #3
   3db48:	bic	sl, r5, #3
   3db4c:	vmov.32	d23[1], r8
   3db50:	vmov.32	d18[0], r2
   3db54:	vmov.32	d20[0], r0
   3db58:	sub	r6, r5, r7
   3db5c:	mov	r0, ip
   3db60:	vorr	d16, d18, d18
   3db64:	vmov.i32	q9, #1	; 0x00000001
   3db68:	vorr	d18, d20, d20
   3db6c:	vld1.32	{d20-d21}, [r0], lr
   3db70:	subs	sl, sl, #4
   3db74:	vrev64.32	q12, q10
   3db78:	vext.8	q12, q12, q12, #8
   3db7c:	vext.8	q11, q11, q12, #12
   3db80:	vmul.i32	q9, q9, q12
   3db84:	vmul.i32	q8, q11, q8
   3db88:	vorr	q11, q12, q12
   3db8c:	bne	3db6c <GetDataSlab+0x11cf0>
   3db90:	vext.8	q11, q9, q8, #8
   3db94:	vext.8	q12, q8, q8, #8
   3db98:	mov	sl, r8
   3db9c:	cmp	r4, r7
   3dba0:	vmul.i32	q0, q9, q11
   3dba4:	vmul.i32	q1, q8, q12
   3dba8:	vmul.i32	q8, q0, d0[1]
   3dbac:	vmul.i32	q9, q1, d2[1]
   3dbb0:	vmov.32	r0, d16[0]
   3dbb4:	vmov.32	r2, d18[0]
   3dbb8:	beq	3dbd4 <GetDataSlab+0x11d58>
   3dbbc:	vmov.32	r8, d20[0]
   3dbc0:	mul	r2, r8, r2
   3dbc4:	ldr	r8, [r1, r6, lsl #2]
   3dbc8:	subs	r6, r6, #1
   3dbcc:	mul	r0, r0, r8
   3dbd0:	bne	3dbc0 <GetDataSlab+0x11d44>
   3dbd4:	sub	r7, fp, #96	; 0x60
   3dbd8:	sub	r6, fp, #176	; 0xb0
   3dbdc:	ldr	r4, [sp, #60]	; 0x3c
   3dbe0:	add	ip, ip, #4
   3dbe4:	str	r0, [r7, r5, lsl #2]
   3dbe8:	ldr	r0, [fp, #12]
   3dbec:	str	r2, [r6, r5, lsl #2]
   3dbf0:	ldr	r0, [r0, r5, lsl #2]
   3dbf4:	mla	r3, r0, r9, r3
   3dbf8:	ldr	r0, [fp, #20]
   3dbfc:	mov	r9, r2
   3dc00:	mov	r2, sl
   3dc04:	ldr	r0, [r0, r5, lsl #2]
   3dc08:	add	r5, r5, #1
   3dc0c:	mul	r4, r0, r4
   3dc10:	ldr	r0, [fp, #24]
   3dc14:	str	r4, [sp, #60]	; 0x3c
   3dc18:	ldr	r4, [sp, #52]	; 0x34
   3dc1c:	cmp	r5, r0
   3dc20:	bne	3db00 <GetDataSlab+0x11c84>
   3dc24:	ldr	r0, [sp, #56]	; 0x38
   3dc28:	ldr	r4, [sp, #36]	; 0x24
   3dc2c:	add	lr, r0, r3, lsl #2
   3dc30:	cmp	r4, #1
   3dc34:	bne	49d00 <GetDataSlab+0x1de84>
   3dc38:	ldr	r0, [sp, #60]	; 0x3c
   3dc3c:	sub	r2, fp, #96	; 0x60
   3dc40:	cmp	r0, #1
   3dc44:	ldr	r0, [fp, #12]
   3dc48:	blt	51c24 <GetDataSlab+0x25da8>
   3dc4c:	add	sl, r0, #4
   3dc50:	ldr	r0, [fp, #20]
   3dc54:	ldr	r1, [sp, #48]	; 0x30
   3dc58:	mov	r9, #0
   3dc5c:	add	r4, r0, #4
   3dc60:	sub	r0, fp, #136	; 0x88
   3dc64:	orr	r5, r0, #4
   3dc68:	orr	r0, r2, #4
   3dc6c:	str	r0, [sp, #36]	; 0x24
   3dc70:	lsl	r0, r1, #3
   3dc74:	str	r0, [sp, #52]	; 0x34
   3dc78:	bic	r0, r1, #1
   3dc7c:	str	r0, [sp, #40]	; 0x28
   3dc80:	mov	r0, #0
   3dc84:	str	r0, [sp, #56]	; 0x38
   3dc88:	ldr	ip, [sp, #68]	; 0x44
   3dc8c:	cmp	r1, #1
   3dc90:	blt	3dd14 <GetDataSlab+0x11e98>
   3dc94:	ldr	r0, [fp, #12]
   3dc98:	mov	r7, #0
   3dc9c:	ldr	r6, [r0]
   3dca0:	beq	3dcec <GetDataSlab+0x11e70>
   3dca4:	ldr	r0, [sp, #40]	; 0x28
   3dca8:	add	r2, lr, r6, lsl #2
   3dcac:	mov	r7, ip
   3dcb0:	add	r1, sp, #224	; 0xe0
   3dcb4:	ldm	r2, {r8, ip}
   3dcb8:	subs	r0, r0, #2
   3dcbc:	add	r2, r2, #8
   3dcc0:	str	ip, [sp, #228]	; 0xe4
   3dcc4:	str	r8, [sp, #224]	; 0xe0
   3dcc8:	vld1.32	{d16}, [r1 :64]
   3dccc:	vmovl.u32	q8, d16
   3dcd0:	vst1.64	{d16-d17}, [r7]!
   3dcd4:	bne	3dcb4 <GetDataSlab+0x11e38>
   3dcd8:	ldr	r0, [sp, #48]	; 0x30
   3dcdc:	ldr	r7, [sp, #40]	; 0x28
   3dce0:	ldr	ip, [sp, #68]	; 0x44
   3dce4:	cmp	r0, r7
   3dce8:	beq	3dd14 <GetDataSlab+0x11e98>
   3dcec:	ldr	r0, [sp, #48]	; 0x30
   3dcf0:	add	r2, ip, r7, lsl #3
   3dcf4:	sub	r0, r0, r7
   3dcf8:	add	r7, r7, r6
   3dcfc:	add	r7, lr, r7, lsl #2
   3dd00:	ldr	r8, [r7], #4
   3dd04:	subs	r0, r0, #1
   3dd08:	strd	r8, [r2]
   3dd0c:	add	r2, r2, #8
   3dd10:	bne	3dd00 <GetDataSlab+0x11e84>
   3dd14:	ldr	r0, [sp, #44]	; 0x2c
   3dd18:	add	lr, lr, r0, lsl #2
   3dd1c:	add	r3, r3, r0
   3dd20:	ldr	r0, [fp, #24]
   3dd24:	cmp	r0, #2
   3dd28:	blt	3ddd4 <GetDataSlab+0x11f58>
   3dd2c:	mov	r2, #0
   3dd30:	mov	r0, r2
   3dd34:	ldr	r2, [r5, r2, lsl #2]
   3dd38:	add	r2, r2, #1
   3dd3c:	str	r2, [r5, r0, lsl #2]
   3dd40:	ldr	r7, [r4, r0, lsl #2]
   3dd44:	sdiv	r6, r2, r7
   3dd48:	mls	r2, r6, r7, r2
   3dd4c:	cmp	r2, #0
   3dd50:	bne	3ddc4 <GetDataSlab+0x11f48>
   3dd54:	sub	r1, fp, #176	; 0xb0
   3dd58:	str	r9, [r5, r0, lsl #2]
   3dd5c:	add	r2, r1, r0, lsl #2
   3dd60:	ldr	r2, [r2, #4]
   3dd64:	sdiv	r7, r3, r2
   3dd68:	mls	r7, r7, r2, r3
   3dd6c:	cmp	r7, #0
   3dd70:	beq	3dd8c <GetDataSlab+0x11f10>
   3dd74:	ldr	r6, [r1, r0, lsl #2]
   3dd78:	ldr	r1, [sl, r0, lsl #2]
   3dd7c:	sub	r2, r2, r7
   3dd80:	mla	r1, r1, r6, r2
   3dd84:	add	r3, r1, r3
   3dd88:	b	3dda8 <GetDataSlab+0x11f2c>
   3dd8c:	ldr	r2, [sl, r0, lsl #2]
   3dd90:	cmp	r2, #0
   3dd94:	beq	3ddac <GetDataSlab+0x11f30>
   3dd98:	sub	r1, fp, #176	; 0xb0
   3dd9c:	ldr	r1, [r1, r0, lsl #2]
   3dda0:	mla	r3, r1, r2, r3
   3dda4:	mul	r1, r1, r2
   3dda8:	add	lr, lr, r1, lsl #2
   3ddac:	ldr	r1, [fp, #24]
   3ddb0:	add	r2, r0, #1
   3ddb4:	add	r0, r0, #2
   3ddb8:	cmp	r0, r1
   3ddbc:	blt	3dd30 <GetDataSlab+0x11eb4>
   3ddc0:	b	3ddd4 <GetDataSlab+0x11f58>
   3ddc4:	ldr	r1, [sp, #36]	; 0x24
   3ddc8:	ldr	r0, [r1, r0, lsl #2]
   3ddcc:	add	lr, lr, r0, lsl #2
   3ddd0:	add	r3, r0, r3
   3ddd4:	ldr	r1, [sp, #48]	; 0x30
   3ddd8:	ldr	r7, [sp, #56]	; 0x38
   3dddc:	ldr	r0, [sp, #52]	; 0x34
   3dde0:	ldr	r2, [sp, #60]	; 0x3c
   3dde4:	add	r7, r7, r1
   3dde8:	add	ip, ip, r0
   3ddec:	mov	r0, #0
   3ddf0:	cmp	r7, r2
   3ddf4:	str	ip, [sp, #68]	; 0x44
   3ddf8:	str	r7, [sp, #56]	; 0x38
   3ddfc:	blt	3dc88 <GetDataSlab+0x11e0c>
   3de00:	b	2e97c <GetDataSlab+0x2b00>
   3de04:	ldr	r0, [fp, #16]
   3de08:	ldr	r9, [fp, #8]
   3de0c:	mov	r5, #0
   3de10:	sub	r8, fp, #96	; 0x60
   3de14:	ldr	r0, [r0]
   3de18:	str	r0, [sp, #24]
   3de1c:	sub	r0, r0, #1
   3de20:	str	r0, [fp, #-96]	; 0xffffffa0
   3de24:	ldr	r0, [r9]
   3de28:	str	r0, [fp, #-176]	; 0xffffff50
   3de2c:	str	r0, [sp, #40]	; 0x28
   3de30:	ldr	r0, [fp, #24]
   3de34:	ldr	r1, [r6]
   3de38:	cmp	r0, #2
   3de3c:	str	r1, [sp, #44]	; 0x2c
   3de40:	str	r1, [sp, #52]	; 0x34
   3de44:	blt	3dfac <GetDataSlab+0x12130>
   3de48:	mov	r0, #0
   3de4c:	ldr	r2, [sp, #44]	; 0x2c
   3de50:	sub	r1, r9, #4
   3de54:	sub	ip, r9, #12
   3de58:	mov	r7, #1
   3de5c:	mvn	sl, #15
   3de60:	mov	r5, #0
   3de64:	str	r0, [sp, #60]	; 0x3c
   3de68:	ldr	r0, [sp, #40]	; 0x28
   3de6c:	str	r2, [sp, #52]	; 0x34
   3de70:	mov	r4, r0
   3de74:	ldr	r2, [fp, #16]
   3de78:	ldr	r6, [sp, #60]	; 0x3c
   3de7c:	str	r4, [sp, #48]	; 0x30
   3de80:	ldr	r2, [r2, r7, lsl #2]
   3de84:	str	r0, [lr, r7, lsl #2]
   3de88:	add	r6, r6, #1
   3de8c:	cmp	r6, #4
   3de90:	str	r6, [sp, #60]	; 0x3c
   3de94:	sub	r4, r2, #1
   3de98:	str	r4, [r8, r7, lsl #2]
   3de9c:	ldr	lr, [r9, r7, lsl #2]
   3dea0:	bcs	3deb0 <GetDataSlab+0x12034>
   3dea4:	mov	r2, lr
   3dea8:	mov	r3, r7
   3deac:	b	3df40 <GetDataSlab+0x120c4>
   3deb0:	vmov.i32	q9, #1	; 0x00000001
   3deb4:	vmov.i32	q10, #1	; 0x00000001
   3deb8:	vmov.i32	q8, #1	; 0x00000001
   3debc:	bic	r2, r6, #3
   3dec0:	bic	r9, r7, #3
   3dec4:	vmov.32	d23[1], lr
   3dec8:	vmov.32	d18[0], r0
   3decc:	vmov.32	d20[0], r4
   3ded0:	sub	r3, r7, r2
   3ded4:	mov	r0, ip
   3ded8:	vorr	d16, d18, d18
   3dedc:	vmov.i32	q9, #1	; 0x00000001
   3dee0:	vorr	d18, d20, d20
   3dee4:	vld1.32	{d20-d21}, [r0], sl
   3dee8:	subs	r9, r9, #4
   3deec:	vrev64.32	q12, q10
   3def0:	vext.8	q12, q12, q12, #8
   3def4:	vext.8	q11, q11, q12, #12
   3def8:	vmul.i32	q9, q9, q12
   3defc:	vmul.i32	q8, q11, q8
   3df00:	vorr	q11, q12, q12
   3df04:	bne	3dee4 <GetDataSlab+0x12068>
   3df08:	vext.8	q11, q9, q8, #8
   3df0c:	vext.8	q12, q8, q8, #8
   3df10:	cmp	r6, r2
   3df14:	vmul.i32	q0, q9, q11
   3df18:	vmul.i32	q1, q8, q12
   3df1c:	vmul.i32	q8, q0, d0[1]
   3df20:	vmul.i32	q9, q1, d2[1]
   3df24:	vmov.32	r4, d16[0]
   3df28:	vmov.32	r0, d18[0]
   3df2c:	bne	3df38 <GetDataSlab+0x120bc>
   3df30:	ldr	r9, [fp, #8]
   3df34:	b	3df54 <GetDataSlab+0x120d8>
   3df38:	ldr	r9, [fp, #8]
   3df3c:	vmov.32	r2, d20[0]
   3df40:	mul	r0, r2, r0
   3df44:	ldr	r2, [r1, r3, lsl #2]
   3df48:	subs	r3, r3, #1
   3df4c:	mul	r4, r4, r2
   3df50:	bne	3df40 <GetDataSlab+0x120c4>
   3df54:	sub	r2, fp, #176	; 0xb0
   3df58:	sub	r8, fp, #96	; 0x60
   3df5c:	add	ip, ip, #4
   3df60:	mov	r3, r2
   3df64:	str	r0, [r2, r7, lsl #2]
   3df68:	ldr	r2, [fp, #12]
   3df6c:	str	r4, [r8, r7, lsl #2]
   3df70:	ldr	r4, [sp, #48]	; 0x30
   3df74:	ldr	r2, [r2, r7, lsl #2]
   3df78:	mla	r5, r2, r4, r5
   3df7c:	ldr	r2, [fp, #20]
   3df80:	ldr	r4, [sp, #52]	; 0x34
   3df84:	ldr	r2, [r2, r7, lsl #2]
   3df88:	add	r7, r7, #1
   3df8c:	mul	r4, r2, r4
   3df90:	ldr	r2, [fp, #24]
   3df94:	str	r4, [sp, #52]	; 0x34
   3df98:	mov	r4, r0
   3df9c:	mov	r0, lr
   3dfa0:	mov	lr, r3
   3dfa4:	cmp	r7, r2
   3dfa8:	bne	3de74 <GetDataSlab+0x11ff8>
   3dfac:	ldr	r0, [sp, #56]	; 0x38
   3dfb0:	ldr	r3, [sp, #24]
   3dfb4:	add	r4, r0, r5, lsl #2
   3dfb8:	cmp	r3, #1
   3dfbc:	bne	49e94 <GetDataSlab+0x1e018>
   3dfc0:	ldr	r0, [sp, #52]	; 0x34
   3dfc4:	ldr	r1, [fp, #20]
   3dfc8:	ldr	r2, [sp, #44]	; 0x2c
   3dfcc:	cmp	r0, #1
   3dfd0:	ldr	r0, [fp, #12]
   3dfd4:	blt	51c38 <GetDataSlab+0x25dbc>
   3dfd8:	add	r9, r1, #4
   3dfdc:	sub	r1, fp, #136	; 0x88
   3dfe0:	orr	r7, r1, #4
   3dfe4:	sub	r1, fp, #96	; 0x60
   3dfe8:	orr	r1, r1, #4
   3dfec:	str	r1, [sp, #36]	; 0x24
   3dff0:	lsl	r1, r2, #3
   3dff4:	str	r1, [sp, #56]	; 0x38
   3dff8:	ldr	r1, [r0], #4
   3dffc:	str	r0, [sp, #64]	; 0x40
   3e000:	mov	r0, #0
   3e004:	str	r1, [sp, #48]	; 0x30
   3e008:	str	r0, [sp, #60]	; 0x3c
   3e00c:	cmp	r2, #1
   3e010:	blt	3e03c <GetDataSlab+0x121c0>
   3e014:	ldr	r0, [sp, #48]	; 0x30
   3e018:	ldr	r8, [sp, #44]	; 0x2c
   3e01c:	ldr	sl, [sp, #68]	; 0x44
   3e020:	add	r6, r4, r0, lsl #2
   3e024:	ldr	r0, [r6], #4
   3e028:	bl	5f344 <__aeabi_f2lz>
   3e02c:	strd	r0, [sl]
   3e030:	subs	r8, r8, #1
   3e034:	add	sl, sl, #8
   3e038:	bne	3e024 <GetDataSlab+0x121a8>
   3e03c:	ldr	r0, [sp, #40]	; 0x28
   3e040:	add	r4, r4, r0, lsl #2
   3e044:	add	r5, r5, r0
   3e048:	ldr	r0, [fp, #24]
   3e04c:	cmp	r0, #2
   3e050:	blt	3e0f8 <GetDataSlab+0x1227c>
   3e054:	ldr	ip, [sp, #68]	; 0x44
   3e058:	ldr	lr, [sp, #64]	; 0x40
   3e05c:	mov	r1, #0
   3e060:	mov	r8, #0
   3e064:	mov	r0, r1
   3e068:	ldr	r1, [r7, r1, lsl #2]
   3e06c:	add	r1, r1, #1
   3e070:	str	r1, [r7, r0, lsl #2]
   3e074:	ldr	r2, [r9, r0, lsl #2]
   3e078:	sdiv	r3, r1, r2
   3e07c:	mls	r1, r3, r2, r1
   3e080:	cmp	r1, #0
   3e084:	bne	3e100 <GetDataSlab+0x12284>
   3e088:	sub	r3, fp, #176	; 0xb0
   3e08c:	str	r8, [r7, r0, lsl #2]
   3e090:	add	r1, r3, r0, lsl #2
   3e094:	ldr	r1, [r1, #4]
   3e098:	sdiv	r2, r5, r1
   3e09c:	mls	r2, r2, r1, r5
   3e0a0:	cmp	r2, #0
   3e0a4:	beq	3e0c0 <GetDataSlab+0x12244>
   3e0a8:	ldr	r3, [r3, r0, lsl #2]
   3e0ac:	ldr	r6, [lr, r0, lsl #2]
   3e0b0:	sub	r1, r1, r2
   3e0b4:	mla	r1, r6, r3, r1
   3e0b8:	add	r5, r1, r5
   3e0bc:	b	3e0dc <GetDataSlab+0x12260>
   3e0c0:	ldr	r1, [lr, r0, lsl #2]
   3e0c4:	cmp	r1, #0
   3e0c8:	beq	3e0e0 <GetDataSlab+0x12264>
   3e0cc:	sub	r2, fp, #176	; 0xb0
   3e0d0:	ldr	r2, [r2, r0, lsl #2]
   3e0d4:	mla	r5, r2, r1, r5
   3e0d8:	mul	r1, r2, r1
   3e0dc:	add	r4, r4, r1, lsl #2
   3e0e0:	ldr	r2, [fp, #24]
   3e0e4:	add	r1, r0, #1
   3e0e8:	add	r0, r0, #2
   3e0ec:	cmp	r0, r2
   3e0f0:	blt	3e064 <GetDataSlab+0x121e8>
   3e0f4:	b	3e110 <GetDataSlab+0x12294>
   3e0f8:	ldr	ip, [sp, #68]	; 0x44
   3e0fc:	b	3e110 <GetDataSlab+0x12294>
   3e100:	ldr	r1, [sp, #36]	; 0x24
   3e104:	ldr	r0, [r1, r0, lsl #2]
   3e108:	add	r4, r4, r0, lsl #2
   3e10c:	add	r5, r0, r5
   3e110:	ldr	r2, [sp, #44]	; 0x2c
   3e114:	ldr	r3, [sp, #60]	; 0x3c
   3e118:	ldr	r0, [sp, #56]	; 0x38
   3e11c:	ldr	r1, [sp, #52]	; 0x34
   3e120:	add	r3, r3, r2
   3e124:	add	ip, ip, r0
   3e128:	mov	r0, #0
   3e12c:	cmp	r3, r1
   3e130:	str	ip, [sp, #68]	; 0x44
   3e134:	str	r3, [sp, #60]	; 0x3c
   3e138:	blt	3e00c <GetDataSlab+0x12190>
   3e13c:	b	2e97c <GetDataSlab+0x2b00>
   3e140:	ldr	r0, [fp, #16]
   3e144:	ldr	r9, [fp, #8]
   3e148:	mov	r5, #0
   3e14c:	sub	r8, fp, #96	; 0x60
   3e150:	ldr	r0, [r0]
   3e154:	str	r0, [sp, #24]
   3e158:	sub	r0, r0, #1
   3e15c:	str	r0, [fp, #-96]	; 0xffffffa0
   3e160:	ldr	r0, [r9]
   3e164:	str	r0, [fp, #-176]	; 0xffffff50
   3e168:	str	r0, [sp, #40]	; 0x28
   3e16c:	ldr	r0, [fp, #24]
   3e170:	ldr	r1, [r6]
   3e174:	cmp	r0, #2
   3e178:	str	r1, [sp, #44]	; 0x2c
   3e17c:	str	r1, [sp, #52]	; 0x34
   3e180:	blt	3e2e8 <GetDataSlab+0x1246c>
   3e184:	mov	r0, #0
   3e188:	ldr	r2, [sp, #44]	; 0x2c
   3e18c:	sub	r1, r9, #4
   3e190:	sub	ip, r9, #12
   3e194:	mov	r7, #1
   3e198:	mvn	sl, #15
   3e19c:	mov	r5, #0
   3e1a0:	str	r0, [sp, #60]	; 0x3c
   3e1a4:	ldr	r0, [sp, #40]	; 0x28
   3e1a8:	str	r2, [sp, #52]	; 0x34
   3e1ac:	mov	r4, r0
   3e1b0:	ldr	r2, [fp, #16]
   3e1b4:	ldr	r6, [sp, #60]	; 0x3c
   3e1b8:	str	r4, [sp, #48]	; 0x30
   3e1bc:	ldr	r2, [r2, r7, lsl #2]
   3e1c0:	str	r0, [lr, r7, lsl #2]
   3e1c4:	add	r6, r6, #1
   3e1c8:	cmp	r6, #4
   3e1cc:	str	r6, [sp, #60]	; 0x3c
   3e1d0:	sub	r4, r2, #1
   3e1d4:	str	r4, [r8, r7, lsl #2]
   3e1d8:	ldr	lr, [r9, r7, lsl #2]
   3e1dc:	bcs	3e1ec <GetDataSlab+0x12370>
   3e1e0:	mov	r2, lr
   3e1e4:	mov	r3, r7
   3e1e8:	b	3e27c <GetDataSlab+0x12400>
   3e1ec:	vmov.i32	q9, #1	; 0x00000001
   3e1f0:	vmov.i32	q10, #1	; 0x00000001
   3e1f4:	vmov.i32	q8, #1	; 0x00000001
   3e1f8:	bic	r2, r6, #3
   3e1fc:	bic	r9, r7, #3
   3e200:	vmov.32	d23[1], lr
   3e204:	vmov.32	d18[0], r0
   3e208:	vmov.32	d20[0], r4
   3e20c:	sub	r3, r7, r2
   3e210:	mov	r0, ip
   3e214:	vorr	d16, d18, d18
   3e218:	vmov.i32	q9, #1	; 0x00000001
   3e21c:	vorr	d18, d20, d20
   3e220:	vld1.32	{d20-d21}, [r0], sl
   3e224:	subs	r9, r9, #4
   3e228:	vrev64.32	q12, q10
   3e22c:	vext.8	q12, q12, q12, #8
   3e230:	vext.8	q11, q11, q12, #12
   3e234:	vmul.i32	q9, q9, q12
   3e238:	vmul.i32	q8, q11, q8
   3e23c:	vorr	q11, q12, q12
   3e240:	bne	3e220 <GetDataSlab+0x123a4>
   3e244:	vext.8	q11, q9, q8, #8
   3e248:	vext.8	q12, q8, q8, #8
   3e24c:	cmp	r6, r2
   3e250:	vmul.i32	q0, q9, q11
   3e254:	vmul.i32	q1, q8, q12
   3e258:	vmul.i32	q8, q0, d0[1]
   3e25c:	vmul.i32	q9, q1, d2[1]
   3e260:	vmov.32	r4, d16[0]
   3e264:	vmov.32	r0, d18[0]
   3e268:	bne	3e274 <GetDataSlab+0x123f8>
   3e26c:	ldr	r9, [fp, #8]
   3e270:	b	3e290 <GetDataSlab+0x12414>
   3e274:	ldr	r9, [fp, #8]
   3e278:	vmov.32	r2, d20[0]
   3e27c:	mul	r0, r2, r0
   3e280:	ldr	r2, [r1, r3, lsl #2]
   3e284:	subs	r3, r3, #1
   3e288:	mul	r4, r4, r2
   3e28c:	bne	3e27c <GetDataSlab+0x12400>
   3e290:	sub	r2, fp, #176	; 0xb0
   3e294:	sub	r8, fp, #96	; 0x60
   3e298:	add	ip, ip, #4
   3e29c:	mov	r3, r2
   3e2a0:	str	r0, [r2, r7, lsl #2]
   3e2a4:	ldr	r2, [fp, #12]
   3e2a8:	str	r4, [r8, r7, lsl #2]
   3e2ac:	ldr	r4, [sp, #48]	; 0x30
   3e2b0:	ldr	r2, [r2, r7, lsl #2]
   3e2b4:	mla	r5, r2, r4, r5
   3e2b8:	ldr	r2, [fp, #20]
   3e2bc:	ldr	r4, [sp, #52]	; 0x34
   3e2c0:	ldr	r2, [r2, r7, lsl #2]
   3e2c4:	add	r7, r7, #1
   3e2c8:	mul	r4, r2, r4
   3e2cc:	ldr	r2, [fp, #24]
   3e2d0:	str	r4, [sp, #52]	; 0x34
   3e2d4:	mov	r4, r0
   3e2d8:	mov	r0, lr
   3e2dc:	mov	lr, r3
   3e2e0:	cmp	r7, r2
   3e2e4:	bne	3e1b0 <GetDataSlab+0x12334>
   3e2e8:	ldr	r0, [sp, #56]	; 0x38
   3e2ec:	ldr	r3, [sp, #24]
   3e2f0:	add	r4, r0, r5, lsl #3
   3e2f4:	cmp	r3, #1
   3e2f8:	bne	4a040 <GetDataSlab+0x1e1c4>
   3e2fc:	ldr	r0, [sp, #52]	; 0x34
   3e300:	ldr	r1, [fp, #20]
   3e304:	ldr	r2, [sp, #44]	; 0x2c
   3e308:	cmp	r0, #1
   3e30c:	ldr	r0, [fp, #12]
   3e310:	blt	51c4c <GetDataSlab+0x25dd0>
   3e314:	add	r9, r1, #4
   3e318:	sub	r1, fp, #136	; 0x88
   3e31c:	orr	r7, r1, #4
   3e320:	sub	r1, fp, #96	; 0x60
   3e324:	orr	r1, r1, #4
   3e328:	str	r1, [sp, #36]	; 0x24
   3e32c:	lsl	r1, r2, #3
   3e330:	str	r1, [sp, #56]	; 0x38
   3e334:	ldr	r1, [r0], #4
   3e338:	str	r0, [sp, #64]	; 0x40
   3e33c:	mov	r0, #0
   3e340:	str	r1, [sp, #48]	; 0x30
   3e344:	str	r0, [sp, #60]	; 0x3c
   3e348:	cmp	r2, #1
   3e34c:	blt	3e380 <GetDataSlab+0x12504>
   3e350:	ldr	r0, [sp, #48]	; 0x30
   3e354:	ldr	r8, [sp, #44]	; 0x2c
   3e358:	ldr	sl, [sp, #68]	; 0x44
   3e35c:	add	r6, r4, r0, lsl #3
   3e360:	vldr	d16, [r6]
   3e364:	vmov	r0, r1, d16
   3e368:	bl	5f370 <__aeabi_d2lz>
   3e36c:	strd	r0, [sl]
   3e370:	subs	r8, r8, #1
   3e374:	add	sl, sl, #8
   3e378:	add	r6, r6, #8
   3e37c:	bne	3e360 <GetDataSlab+0x124e4>
   3e380:	ldr	r0, [sp, #40]	; 0x28
   3e384:	add	r4, r4, r0, lsl #3
   3e388:	add	r5, r5, r0
   3e38c:	ldr	r0, [fp, #24]
   3e390:	cmp	r0, #2
   3e394:	blt	3e43c <GetDataSlab+0x125c0>
   3e398:	ldr	ip, [sp, #68]	; 0x44
   3e39c:	ldr	lr, [sp, #64]	; 0x40
   3e3a0:	mov	r1, #0
   3e3a4:	mov	r8, #0
   3e3a8:	mov	r0, r1
   3e3ac:	ldr	r1, [r7, r1, lsl #2]
   3e3b0:	add	r1, r1, #1
   3e3b4:	str	r1, [r7, r0, lsl #2]
   3e3b8:	ldr	r2, [r9, r0, lsl #2]
   3e3bc:	sdiv	r3, r1, r2
   3e3c0:	mls	r1, r3, r2, r1
   3e3c4:	cmp	r1, #0
   3e3c8:	bne	3e444 <GetDataSlab+0x125c8>
   3e3cc:	sub	r3, fp, #176	; 0xb0
   3e3d0:	str	r8, [r7, r0, lsl #2]
   3e3d4:	add	r1, r3, r0, lsl #2
   3e3d8:	ldr	r1, [r1, #4]
   3e3dc:	sdiv	r2, r5, r1
   3e3e0:	mls	r2, r2, r1, r5
   3e3e4:	cmp	r2, #0
   3e3e8:	beq	3e404 <GetDataSlab+0x12588>
   3e3ec:	ldr	r3, [r3, r0, lsl #2]
   3e3f0:	ldr	r6, [lr, r0, lsl #2]
   3e3f4:	sub	r1, r1, r2
   3e3f8:	mla	r1, r6, r3, r1
   3e3fc:	add	r5, r1, r5
   3e400:	b	3e420 <GetDataSlab+0x125a4>
   3e404:	ldr	r1, [lr, r0, lsl #2]
   3e408:	cmp	r1, #0
   3e40c:	beq	3e424 <GetDataSlab+0x125a8>
   3e410:	sub	r2, fp, #176	; 0xb0
   3e414:	ldr	r2, [r2, r0, lsl #2]
   3e418:	mla	r5, r2, r1, r5
   3e41c:	mul	r1, r2, r1
   3e420:	add	r4, r4, r1, lsl #3
   3e424:	ldr	r2, [fp, #24]
   3e428:	add	r1, r0, #1
   3e42c:	add	r0, r0, #2
   3e430:	cmp	r0, r2
   3e434:	blt	3e3a8 <GetDataSlab+0x1252c>
   3e438:	b	3e454 <GetDataSlab+0x125d8>
   3e43c:	ldr	ip, [sp, #68]	; 0x44
   3e440:	b	3e454 <GetDataSlab+0x125d8>
   3e444:	ldr	r1, [sp, #36]	; 0x24
   3e448:	ldr	r0, [r1, r0, lsl #2]
   3e44c:	add	r4, r4, r0, lsl #3
   3e450:	add	r5, r0, r5
   3e454:	ldr	r2, [sp, #44]	; 0x2c
   3e458:	ldr	r3, [sp, #60]	; 0x3c
   3e45c:	ldr	r0, [sp, #56]	; 0x38
   3e460:	ldr	r1, [sp, #52]	; 0x34
   3e464:	add	r3, r3, r2
   3e468:	add	ip, ip, r0
   3e46c:	mov	r0, #0
   3e470:	cmp	r3, r1
   3e474:	str	ip, [sp, #68]	; 0x44
   3e478:	str	r3, [sp, #60]	; 0x3c
   3e47c:	blt	3e348 <GetDataSlab+0x124cc>
   3e480:	b	2e97c <GetDataSlab+0x2b00>
   3e484:	ldr	r0, [fp, #16]
   3e488:	mov	r5, lr
   3e48c:	mov	lr, #0
   3e490:	sub	r7, fp, #96	; 0x60
   3e494:	str	r9, [sp, #40]	; 0x28
   3e498:	ldr	r0, [r0]
   3e49c:	str	r0, [sp, #20]
   3e4a0:	sub	r0, r0, #1
   3e4a4:	str	r0, [fp, #-96]	; 0xffffffa0
   3e4a8:	ldr	r0, [fp, #8]
   3e4ac:	ldr	r0, [r0]
   3e4b0:	str	r0, [fp, #-176]	; 0xffffff50
   3e4b4:	str	r0, [sp, #32]
   3e4b8:	ldr	r0, [fp, #24]
   3e4bc:	ldr	r1, [r6]
   3e4c0:	cmp	r0, #2
   3e4c4:	str	r1, [sp, #48]	; 0x30
   3e4c8:	str	r1, [sp, #60]	; 0x3c
   3e4cc:	blt	3e620 <GetDataSlab+0x127a4>
   3e4d0:	ldr	r0, [fp, #8]
   3e4d4:	ldr	r2, [sp, #32]
   3e4d8:	mov	r4, #1
   3e4dc:	mov	r1, #0
   3e4e0:	mvn	r6, #15
   3e4e4:	mov	lr, #0
   3e4e8:	sub	r3, r0, #4
   3e4ec:	sub	r9, r0, #12
   3e4f0:	ldr	r0, [sp, #48]	; 0x30
   3e4f4:	mov	r8, r2
   3e4f8:	str	r0, [sp, #60]	; 0x3c
   3e4fc:	ldr	r0, [fp, #16]
   3e500:	add	r1, r1, #1
   3e504:	cmp	r1, #4
   3e508:	str	r1, [sp, #52]	; 0x34
   3e50c:	ldr	r0, [r0, r4, lsl #2]
   3e510:	str	r2, [r5, r4, lsl #2]
   3e514:	sub	r0, r0, #1
   3e518:	str	r0, [r7, r4, lsl #2]
   3e51c:	ldr	r7, [fp, #8]
   3e520:	ldr	ip, [r7, r4, lsl #2]
   3e524:	bcs	3e534 <GetDataSlab+0x126b8>
   3e528:	mov	sl, ip
   3e52c:	mov	r5, r4
   3e530:	b	3e5bc <GetDataSlab+0x12740>
   3e534:	vmov.i32	q9, #1	; 0x00000001
   3e538:	vmov.i32	q10, #1	; 0x00000001
   3e53c:	vmov.i32	q8, #1	; 0x00000001
   3e540:	bic	r7, r1, #3
   3e544:	bic	sl, r4, #3
   3e548:	vmov.32	d23[1], ip
   3e54c:	vmov.32	d18[0], r2
   3e550:	vmov.32	d20[0], r0
   3e554:	sub	r5, r4, r7
   3e558:	mov	r0, r9
   3e55c:	vorr	d16, d18, d18
   3e560:	vmov.i32	q9, #1	; 0x00000001
   3e564:	vorr	d18, d20, d20
   3e568:	vld1.32	{d20-d21}, [r0], r6
   3e56c:	subs	sl, sl, #4
   3e570:	vrev64.32	q12, q10
   3e574:	vext.8	q12, q12, q12, #8
   3e578:	vext.8	q11, q11, q12, #12
   3e57c:	vmul.i32	q9, q9, q12
   3e580:	vmul.i32	q8, q11, q8
   3e584:	vorr	q11, q12, q12
   3e588:	bne	3e568 <GetDataSlab+0x126ec>
   3e58c:	vext.8	q11, q9, q8, #8
   3e590:	vext.8	q12, q8, q8, #8
   3e594:	mov	sl, ip
   3e598:	cmp	r1, r7
   3e59c:	vmul.i32	q0, q9, q11
   3e5a0:	vmul.i32	q1, q8, q12
   3e5a4:	vmul.i32	q8, q0, d0[1]
   3e5a8:	vmul.i32	q9, q1, d2[1]
   3e5ac:	vmov.32	r0, d16[0]
   3e5b0:	vmov.32	r2, d18[0]
   3e5b4:	beq	3e5d0 <GetDataSlab+0x12754>
   3e5b8:	vmov.32	ip, d20[0]
   3e5bc:	mul	r2, ip, r2
   3e5c0:	ldr	ip, [r3, r5, lsl #2]
   3e5c4:	subs	r5, r5, #1
   3e5c8:	mul	r0, r0, ip
   3e5cc:	bne	3e5bc <GetDataSlab+0x12740>
   3e5d0:	sub	r7, fp, #96	; 0x60
   3e5d4:	sub	r5, fp, #176	; 0xb0
   3e5d8:	ldr	r1, [sp, #60]	; 0x3c
   3e5dc:	add	r9, r9, #4
   3e5e0:	str	r0, [r7, r4, lsl #2]
   3e5e4:	ldr	r0, [fp, #12]
   3e5e8:	str	r2, [r5, r4, lsl #2]
   3e5ec:	ldr	r0, [r0, r4, lsl #2]
   3e5f0:	mla	lr, r0, r8, lr
   3e5f4:	ldr	r0, [fp, #20]
   3e5f8:	mov	r8, r2
   3e5fc:	mov	r2, sl
   3e600:	ldr	r0, [r0, r4, lsl #2]
   3e604:	add	r4, r4, #1
   3e608:	mul	r1, r0, r1
   3e60c:	ldr	r0, [fp, #24]
   3e610:	str	r1, [sp, #60]	; 0x3c
   3e614:	ldr	r1, [sp, #52]	; 0x34
   3e618:	cmp	r4, r0
   3e61c:	bne	3e4fc <GetDataSlab+0x12680>
   3e620:	ldr	r0, [sp, #56]	; 0x38
   3e624:	ldr	r2, [sp, #20]
   3e628:	add	r5, r0, lr, lsl #3
   3e62c:	cmp	r2, #1
   3e630:	bne	4a1f4 <GetDataSlab+0x1e378>
   3e634:	ldr	r0, [sp, #60]	; 0x3c
   3e638:	ldr	ip, [sp, #48]	; 0x30
   3e63c:	sub	r2, fp, #96	; 0x60
   3e640:	cmp	r0, #1
   3e644:	ldr	r0, [fp, #12]
   3e648:	blt	4a38c <GetDataSlab+0x1e510>
   3e64c:	mov	r1, r0
   3e650:	ldr	r9, [sp, #68]	; 0x44
   3e654:	ldr	r0, [r1], #4
   3e658:	str	r0, [sp, #28]
   3e65c:	add	r0, ip, r0
   3e660:	str	r0, [sp, #24]
   3e664:	ldr	r0, [fp, #20]
   3e668:	add	r8, r0, #4
   3e66c:	sub	r0, fp, #136	; 0x88
   3e670:	orr	r6, r0, #4
   3e674:	orr	r0, r2, #4
   3e678:	mov	r2, #0
   3e67c:	str	r0, [sp, #16]
   3e680:	bic	r0, ip, #1
   3e684:	str	r0, [sp, #20]
   3e688:	lsl	r0, ip, #3
   3e68c:	str	r0, [sp, #36]	; 0x24
   3e690:	mov	r0, #0
   3e694:	str	r0, [sp, #52]	; 0x34
   3e698:	mov	r4, r8
   3e69c:	cmp	ip, #1
   3e6a0:	str	r2, [sp, #44]	; 0x2c
   3e6a4:	blt	3e754 <GetDataSlab+0x128d8>
   3e6a8:	ldr	r0, [sp, #28]
   3e6ac:	mov	r2, #0
   3e6b0:	add	sl, r5, r0, lsl #3
   3e6b4:	beq	3e720 <GetDataSlab+0x128a4>
   3e6b8:	ldr	r0, [sp, #68]	; 0x44
   3e6bc:	ldr	r3, [sp, #36]	; 0x24
   3e6c0:	ldr	r7, [sp, #52]	; 0x34
   3e6c4:	mla	r0, r3, r7, r0
   3e6c8:	ldr	r3, [sp, #24]
   3e6cc:	add	r3, r5, r3, lsl #3
   3e6d0:	cmp	r0, r3
   3e6d4:	bcs	3e6f4 <GetDataSlab+0x12878>
   3e6d8:	ldr	r0, [sp, #36]	; 0x24
   3e6dc:	ldr	r3, [sp, #52]	; 0x34
   3e6e0:	mla	r0, r0, r3, r0
   3e6e4:	ldr	r3, [sp, #68]	; 0x44
   3e6e8:	add	r0, r3, r0
   3e6ec:	cmp	r0, sl
   3e6f0:	bhi	3e720 <GetDataSlab+0x128a4>
   3e6f4:	ldr	r2, [sp, #20]
   3e6f8:	mov	r3, r9
   3e6fc:	mov	r0, sl
   3e700:	vld1.64	{d16-d17}, [r0]!
   3e704:	subs	r2, r2, #2
   3e708:	vst1.64	{d16-d17}, [r3]!
   3e70c:	bne	3e700 <GetDataSlab+0x12884>
   3e710:	ldr	r0, [sp, #48]	; 0x30
   3e714:	ldr	r2, [sp, #20]
   3e718:	cmp	r0, r2
   3e71c:	beq	3e754 <GetDataSlab+0x128d8>
   3e720:	ldr	r0, [sp, #48]	; 0x30
   3e724:	sub	r3, r0, r2
   3e728:	mov	r0, #0
   3e72c:	sub	r2, r0, r2, lsl #3
   3e730:	mov	r0, sl
   3e734:	mov	ip, r9
   3e738:	subs	r3, r3, #1
   3e73c:	ldr	r8, [r0, -r2]!
   3e740:	ldr	r0, [r0, #4]
   3e744:	str	r8, [ip, -r2]!
   3e748:	sub	r2, r2, #8
   3e74c:	str	r0, [ip, #4]
   3e750:	bne	3e730 <GetDataSlab+0x128b4>
   3e754:	ldr	r0, [sp, #32]
   3e758:	add	r5, r5, r0, lsl #3
   3e75c:	add	lr, lr, r0
   3e760:	ldr	r0, [fp, #24]
   3e764:	cmp	r0, #2
   3e768:	blt	3e810 <GetDataSlab+0x12994>
   3e76c:	ldr	ip, [sp, #48]	; 0x30
   3e770:	mov	r2, #0
   3e774:	mov	r8, r4
   3e778:	mov	sl, #0
   3e77c:	mov	r0, r2
   3e780:	ldr	r2, [r6, r2, lsl #2]
   3e784:	add	r2, r2, #1
   3e788:	str	r2, [r6, r0, lsl #2]
   3e78c:	ldr	r3, [r8, r0, lsl #2]
   3e790:	sdiv	r7, r2, r3
   3e794:	mls	r2, r7, r3, r2
   3e798:	cmp	r2, #0
   3e79c:	bne	3e81c <GetDataSlab+0x129a0>
   3e7a0:	sub	r7, fp, #176	; 0xb0
   3e7a4:	str	sl, [r6, r0, lsl #2]
   3e7a8:	add	r2, r7, r0, lsl #2
   3e7ac:	ldr	r2, [r2, #4]
   3e7b0:	sdiv	r3, lr, r2
   3e7b4:	mls	r3, r3, r2, lr
   3e7b8:	cmp	r3, #0
   3e7bc:	beq	3e7d8 <GetDataSlab+0x1295c>
   3e7c0:	ldr	r7, [r7, r0, lsl #2]
   3e7c4:	ldr	r4, [r1, r0, lsl #2]
   3e7c8:	sub	r2, r2, r3
   3e7cc:	mla	r2, r4, r7, r2
   3e7d0:	add	lr, r2, lr
   3e7d4:	b	3e7f4 <GetDataSlab+0x12978>
   3e7d8:	ldr	r2, [r1, r0, lsl #2]
   3e7dc:	cmp	r2, #0
   3e7e0:	beq	3e7f8 <GetDataSlab+0x1297c>
   3e7e4:	sub	r3, fp, #176	; 0xb0
   3e7e8:	ldr	r3, [r3, r0, lsl #2]
   3e7ec:	mla	lr, r3, r2, lr
   3e7f0:	mul	r2, r3, r2
   3e7f4:	add	r5, r5, r2, lsl #3
   3e7f8:	ldr	r3, [fp, #24]
   3e7fc:	add	r2, r0, #1
   3e800:	add	r0, r0, #2
   3e804:	cmp	r0, r3
   3e808:	blt	3e77c <GetDataSlab+0x12900>
   3e80c:	b	3e82c <GetDataSlab+0x129b0>
   3e810:	ldr	ip, [sp, #48]	; 0x30
   3e814:	mov	r8, r4
   3e818:	b	3e82c <GetDataSlab+0x129b0>
   3e81c:	ldr	r2, [sp, #16]
   3e820:	ldr	r0, [r2, r0, lsl #2]
   3e824:	add	r5, r5, r0, lsl #3
   3e828:	add	lr, r0, lr
   3e82c:	ldr	r0, [sp, #36]	; 0x24
   3e830:	ldr	r2, [sp, #44]	; 0x2c
   3e834:	add	r9, r9, r0
   3e838:	ldr	r0, [sp, #52]	; 0x34
   3e83c:	add	r2, r2, ip
   3e840:	add	r0, r0, #1
   3e844:	str	r0, [sp, #52]	; 0x34
   3e848:	ldr	r0, [sp, #60]	; 0x3c
   3e84c:	cmp	r2, r0
   3e850:	blt	3e698 <GetDataSlab+0x1281c>
   3e854:	b	4a38c <GetDataSlab+0x1e510>
   3e858:	ldr	r0, [fp, #16]
   3e85c:	ldr	r8, [fp, #12]
   3e860:	mov	r3, #0
   3e864:	sub	r2, fp, #96	; 0x60
   3e868:	ldr	ip, [r0]
   3e86c:	sub	r0, ip, #1
   3e870:	str	r0, [fp, #-96]	; 0xffffffa0
   3e874:	ldr	r0, [fp, #8]
   3e878:	ldr	r0, [r0]
   3e87c:	str	r0, [fp, #-176]	; 0xffffff50
   3e880:	str	r0, [sp, #36]	; 0x24
   3e884:	ldr	r0, [fp, #24]
   3e888:	ldr	r1, [r6]
   3e88c:	cmp	r0, #2
   3e890:	str	r1, [sp, #44]	; 0x2c
   3e894:	str	r1, [sp, #60]	; 0x3c
   3e898:	blt	3e9fc <GetDataSlab+0x12b80>
   3e89c:	ldr	r0, [fp, #8]
   3e8a0:	ldr	r4, [sp, #36]	; 0x24
   3e8a4:	mov	r7, #1
   3e8a8:	mov	r5, #0
   3e8ac:	mvn	r6, #15
   3e8b0:	mov	r3, #0
   3e8b4:	mov	r1, r0
   3e8b8:	sub	r0, r0, #4
   3e8bc:	mov	sl, r4
   3e8c0:	sub	r9, r1, #12
   3e8c4:	ldr	r1, [sp, #44]	; 0x2c
   3e8c8:	str	r1, [sp, #60]	; 0x3c
   3e8cc:	ldr	r1, [fp, #16]
   3e8d0:	add	r5, r5, #1
   3e8d4:	cmp	r5, #4
   3e8d8:	str	r5, [sp, #52]	; 0x34
   3e8dc:	ldr	r1, [r1, r7, lsl #2]
   3e8e0:	str	r4, [lr, r7, lsl #2]
   3e8e4:	sub	lr, r1, #1
   3e8e8:	ldr	r1, [fp, #8]
   3e8ec:	str	lr, [r2, r7, lsl #2]
   3e8f0:	ldr	r1, [r1, r7, lsl #2]
   3e8f4:	str	r1, [sp, #48]	; 0x30
   3e8f8:	bcs	3e908 <GetDataSlab+0x12a8c>
   3e8fc:	mov	r5, r1
   3e900:	mov	r2, r7
   3e904:	b	3e998 <GetDataSlab+0x12b1c>
   3e908:	vmov.i32	q9, #1	; 0x00000001
   3e90c:	vmov.i32	q10, #1	; 0x00000001
   3e910:	vmov.i32	q8, #1	; 0x00000001
   3e914:	vmov.32	d23[1], r1
   3e918:	bic	r1, r5, #3
   3e91c:	bic	r8, r7, #3
   3e920:	vmov.32	d18[0], r4
   3e924:	vmov.32	d20[0], lr
   3e928:	str	r1, [sp, #40]	; 0x28
   3e92c:	sub	r2, r7, r1
   3e930:	mov	r1, r9
   3e934:	vorr	d16, d18, d18
   3e938:	vmov.i32	q9, #1	; 0x00000001
   3e93c:	vorr	d18, d20, d20
   3e940:	vld1.32	{d20-d21}, [r1], r6
   3e944:	subs	r8, r8, #4
   3e948:	vrev64.32	q12, q10
   3e94c:	vext.8	q12, q12, q12, #8
   3e950:	vext.8	q11, q11, q12, #12
   3e954:	vmul.i32	q9, q9, q12
   3e958:	vmul.i32	q8, q11, q8
   3e95c:	vorr	q11, q12, q12
   3e960:	bne	3e940 <GetDataSlab+0x12ac4>
   3e964:	ldr	r1, [sp, #40]	; 0x28
   3e968:	vext.8	q11, q9, q8, #8
   3e96c:	vext.8	q12, q8, q8, #8
   3e970:	ldr	r8, [fp, #12]
   3e974:	vmul.i32	q0, q9, q11
   3e978:	vmul.i32	q1, q8, q12
   3e97c:	vmul.i32	q8, q0, d0[1]
   3e980:	vmul.i32	q9, q1, d2[1]
   3e984:	vmov.32	lr, d16[0]
   3e988:	vmov.32	r4, d18[0]
   3e98c:	cmp	r5, r1
   3e990:	beq	3e9ac <GetDataSlab+0x12b30>
   3e994:	vmov.32	r5, d20[0]
   3e998:	mul	r4, r5, r4
   3e99c:	ldr	r5, [r0, r2, lsl #2]
   3e9a0:	subs	r2, r2, #1
   3e9a4:	mul	lr, lr, r5
   3e9a8:	bne	3e998 <GetDataSlab+0x12b1c>
   3e9ac:	sub	r1, fp, #176	; 0xb0
   3e9b0:	sub	r2, fp, #96	; 0x60
   3e9b4:	ldr	r5, [sp, #60]	; 0x3c
   3e9b8:	add	r9, r9, #4
   3e9bc:	str	lr, [r2, r7, lsl #2]
   3e9c0:	str	r4, [r1, r7, lsl #2]
   3e9c4:	mov	lr, r1
   3e9c8:	ldr	r1, [r8, r7, lsl #2]
   3e9cc:	mla	r3, r1, sl, r3
   3e9d0:	ldr	r1, [fp, #20]
   3e9d4:	mov	sl, r4
   3e9d8:	ldr	r4, [sp, #48]	; 0x30
   3e9dc:	ldr	r1, [r1, r7, lsl #2]
   3e9e0:	add	r7, r7, #1
   3e9e4:	mul	r5, r1, r5
   3e9e8:	ldr	r1, [fp, #24]
   3e9ec:	str	r5, [sp, #60]	; 0x3c
   3e9f0:	ldr	r5, [sp, #52]	; 0x34
   3e9f4:	cmp	r7, r1
   3e9f8:	bne	3e8cc <GetDataSlab+0x12a50>
   3e9fc:	ldr	r0, [sp, #56]	; 0x38
   3ea00:	cmp	ip, #1
   3ea04:	add	r4, r0, r3
   3ea08:	bne	4a760 <GetDataSlab+0x1e8e4>
   3ea0c:	ldr	r0, [sp, #60]	; 0x3c
   3ea10:	cmp	r0, #1
   3ea14:	blt	51c60 <GetDataSlab+0x25de4>
   3ea18:	ldr	r0, [fp, #20]
   3ea1c:	ldr	ip, [sp, #44]	; 0x2c
   3ea20:	add	lr, r8, #4
   3ea24:	mov	r9, #0
   3ea28:	mov	r8, #0
   3ea2c:	add	sl, r0, #4
   3ea30:	sub	r0, fp, #136	; 0x88
   3ea34:	orr	r5, r0, #4
   3ea38:	orr	r0, r2, #4
   3ea3c:	str	r0, [sp, #28]
   3ea40:	bic	r0, ip, #1
   3ea44:	str	r0, [sp, #32]
   3ea48:	lsl	r0, ip, #3
   3ea4c:	str	r0, [sp, #48]	; 0x30
   3ea50:	ldr	r0, [sp, #68]	; 0x44
   3ea54:	str	r0, [sp, #56]	; 0x38
   3ea58:	mov	r0, #0
   3ea5c:	str	r0, [sp, #52]	; 0x34
   3ea60:	cmp	ip, #1
   3ea64:	blt	3eb34 <GetDataSlab+0x12cb8>
   3ea68:	ldr	r0, [fp, #12]
   3ea6c:	mov	r2, #0
   3ea70:	ldr	r6, [r0]
   3ea74:	str	r6, [sp, #40]	; 0x28
   3ea78:	beq	3eb08 <GetDataSlab+0x12c8c>
   3ea7c:	ldr	r0, [sp, #68]	; 0x44
   3ea80:	ldr	r1, [sp, #48]	; 0x30
   3ea84:	ldr	r7, [sp, #52]	; 0x34
   3ea88:	mla	ip, r1, r7, r0
   3ea8c:	ldr	r1, [sp, #44]	; 0x2c
   3ea90:	add	r0, r4, r6
   3ea94:	mov	r7, r6
   3ea98:	add	r6, r4, r1
   3ea9c:	ldr	r1, [sp, #68]	; 0x44
   3eaa0:	add	r6, r6, r7
   3eaa4:	cmp	ip, r6
   3eaa8:	ldr	ip, [sp, #44]	; 0x2c
   3eaac:	bcs	3eac8 <GetDataSlab+0x12c4c>
   3eab0:	ldr	r6, [sp, #48]	; 0x30
   3eab4:	ldr	r7, [sp, #52]	; 0x34
   3eab8:	mla	r6, r6, r7, r6
   3eabc:	add	r6, r1, r6
   3eac0:	cmp	r0, r6
   3eac4:	bcc	3eb08 <GetDataSlab+0x12c8c>
   3eac8:	ldr	r2, [sp, #32]
   3eacc:	ldr	ip, [sp, #56]	; 0x38
   3ead0:	sub	r1, fp, #212	; 0xd4
   3ead4:	ldrh	r6, [r0], #2
   3ead8:	subs	r2, r2, #2
   3eadc:	strh	r6, [fp, #-212]	; 0xffffff2c
   3eae0:	vld1.16	{d16[0]}, [r1 :16]
   3eae4:	vmovl.u8	q8, d16
   3eae8:	vmovl.u16	q8, d16
   3eaec:	vmovl.u32	q8, d16
   3eaf0:	vst1.64	{d16-d17}, [ip]!
   3eaf4:	bne	3ead4 <GetDataSlab+0x12c58>
   3eaf8:	ldr	ip, [sp, #44]	; 0x2c
   3eafc:	ldr	r2, [sp, #32]
   3eb00:	cmp	ip, r2
   3eb04:	beq	3eb34 <GetDataSlab+0x12cb8>
   3eb08:	ldr	r0, [sp, #56]	; 0x38
   3eb0c:	sub	r7, ip, r2
   3eb10:	add	r6, r0, r2, lsl #3
   3eb14:	ldr	r0, [sp, #40]	; 0x28
   3eb18:	add	r2, r2, r0
   3eb1c:	add	r2, r4, r2
   3eb20:	ldrb	r0, [r2], #1
   3eb24:	subs	r7, r7, #1
   3eb28:	stm	r6, {r0, r9}
   3eb2c:	add	r6, r6, #8
   3eb30:	bne	3eb20 <GetDataSlab+0x12ca4>
   3eb34:	ldr	r0, [sp, #36]	; 0x24
   3eb38:	add	r4, r4, r0
   3eb3c:	add	r3, r3, r0
   3eb40:	ldr	r0, [fp, #24]
   3eb44:	cmp	r0, #2
   3eb48:	blt	3ebf0 <GetDataSlab+0x12d74>
   3eb4c:	mov	r2, #0
   3eb50:	mov	r0, r2
   3eb54:	ldr	r2, [r5, r2, lsl #2]
   3eb58:	add	r2, r2, #1
   3eb5c:	str	r2, [r5, r0, lsl #2]
   3eb60:	ldr	r7, [sl, r0, lsl #2]
   3eb64:	sdiv	r6, r2, r7
   3eb68:	mls	r2, r6, r7, r2
   3eb6c:	cmp	r2, #0
   3eb70:	bne	3ebe0 <GetDataSlab+0x12d64>
   3eb74:	sub	r1, fp, #176	; 0xb0
   3eb78:	str	r9, [r5, r0, lsl #2]
   3eb7c:	add	r2, r1, r0, lsl #2
   3eb80:	ldr	r2, [r2, #4]
   3eb84:	sdiv	r7, r3, r2
   3eb88:	mls	r6, r7, r2, r3
   3eb8c:	cmp	r6, #0
   3eb90:	beq	3ebb0 <GetDataSlab+0x12d34>
   3eb94:	ldr	r7, [r1, r0, lsl #2]
   3eb98:	ldr	r1, [lr, r0, lsl #2]
   3eb9c:	sub	r2, r2, r6
   3eba0:	mla	r1, r1, r7, r2
   3eba4:	add	r3, r1, r3
   3eba8:	add	r4, r4, r1
   3ebac:	b	3ebc8 <GetDataSlab+0x12d4c>
   3ebb0:	ldr	r2, [lr, r0, lsl #2]
   3ebb4:	cmp	r2, #0
   3ebb8:	subne	r1, fp, #176	; 0xb0
   3ebbc:	ldrne	r1, [r1, r0, lsl #2]
   3ebc0:	mlane	r3, r1, r2, r3
   3ebc4:	mlane	r4, r1, r2, r4
   3ebc8:	ldr	r1, [fp, #24]
   3ebcc:	add	r2, r0, #1
   3ebd0:	add	r0, r0, #2
   3ebd4:	cmp	r0, r1
   3ebd8:	blt	3eb50 <GetDataSlab+0x12cd4>
   3ebdc:	b	3ebf0 <GetDataSlab+0x12d74>
   3ebe0:	ldr	r1, [sp, #28]
   3ebe4:	ldr	r0, [r1, r0, lsl #2]
   3ebe8:	add	r4, r4, r0
   3ebec:	add	r3, r0, r3
   3ebf0:	ldr	r0, [sp, #48]	; 0x30
   3ebf4:	ldr	r1, [sp, #56]	; 0x38
   3ebf8:	add	r8, r8, ip
   3ebfc:	add	r1, r1, r0
   3ec00:	ldr	r0, [sp, #52]	; 0x34
   3ec04:	str	r1, [sp, #56]	; 0x38
   3ec08:	ldr	r1, [sp, #60]	; 0x3c
   3ec0c:	add	r0, r0, #1
   3ec10:	str	r0, [sp, #52]	; 0x34
   3ec14:	mov	r0, #0
   3ec18:	cmp	r8, r1
   3ec1c:	blt	3ea60 <GetDataSlab+0x12be4>
   3ec20:	b	2e97c <GetDataSlab+0x2b00>
   3ec24:	ldr	r0, [fp, #16]
   3ec28:	mov	sl, r6
   3ec2c:	mov	ip, #0
   3ec30:	sub	r8, fp, #96	; 0x60
   3ec34:	ldr	r0, [r0]
   3ec38:	str	r0, [sp, #36]	; 0x24
   3ec3c:	sub	r0, r0, #1
   3ec40:	str	r0, [fp, #-96]	; 0xffffffa0
   3ec44:	ldr	r0, [fp, #8]
   3ec48:	ldr	r0, [r0]
   3ec4c:	str	r0, [fp, #-176]	; 0xffffff50
   3ec50:	str	r0, [sp, #40]	; 0x28
   3ec54:	ldr	r0, [fp, #24]
   3ec58:	ldr	r1, [r6]
   3ec5c:	cmp	r0, #2
   3ec60:	str	r1, [sp, #44]	; 0x2c
   3ec64:	str	r1, [sp, #60]	; 0x3c
   3ec68:	blt	3edbc <GetDataSlab+0x12f40>
   3ec6c:	ldr	r0, [fp, #8]
   3ec70:	ldr	r3, [sp, #40]	; 0x28
   3ec74:	ldr	r1, [sp, #44]	; 0x2c
   3ec78:	mov	r5, lr
   3ec7c:	mov	r4, #1
   3ec80:	mov	r2, #0
   3ec84:	mov	ip, #0
   3ec88:	sub	r7, r0, #4
   3ec8c:	sub	r6, r0, #12
   3ec90:	mvn	r0, #15
   3ec94:	mov	lr, r3
   3ec98:	str	r1, [sp, #60]	; 0x3c
   3ec9c:	ldr	r1, [fp, #16]
   3eca0:	add	r2, r2, #1
   3eca4:	cmp	r2, #4
   3eca8:	str	r2, [sp, #48]	; 0x30
   3ecac:	ldr	r1, [r1, r4, lsl #2]
   3ecb0:	str	r3, [r5, r4, lsl #2]
   3ecb4:	sub	sl, r1, #1
   3ecb8:	ldr	r1, [fp, #8]
   3ecbc:	str	sl, [r8, r4, lsl #2]
   3ecc0:	ldr	r9, [r1, r4, lsl #2]
   3ecc4:	str	r9, [sp, #52]	; 0x34
   3ecc8:	bcs	3ecd4 <GetDataSlab+0x12e58>
   3eccc:	mov	r5, r4
   3ecd0:	b	3ed58 <GetDataSlab+0x12edc>
   3ecd4:	vmov.i32	q9, #1	; 0x00000001
   3ecd8:	vmov.i32	q10, #1	; 0x00000001
   3ecdc:	vmov.i32	q8, #1	; 0x00000001
   3ece0:	bic	r1, r2, #3
   3ece4:	bic	r8, r4, #3
   3ece8:	vmov.32	d23[1], r9
   3ecec:	vmov.32	d18[0], r3
   3ecf0:	vmov.32	d20[0], sl
   3ecf4:	sub	r5, r4, r1
   3ecf8:	mov	r3, r6
   3ecfc:	vorr	d16, d18, d18
   3ed00:	vmov.i32	q9, #1	; 0x00000001
   3ed04:	vorr	d18, d20, d20
   3ed08:	vld1.32	{d20-d21}, [r3], r0
   3ed0c:	subs	r8, r8, #4
   3ed10:	vrev64.32	q12, q10
   3ed14:	vext.8	q12, q12, q12, #8
   3ed18:	vext.8	q11, q11, q12, #12
   3ed1c:	vmul.i32	q9, q9, q12
   3ed20:	vmul.i32	q8, q11, q8
   3ed24:	vorr	q11, q12, q12
   3ed28:	bne	3ed08 <GetDataSlab+0x12e8c>
   3ed2c:	vext.8	q11, q9, q8, #8
   3ed30:	vext.8	q12, q8, q8, #8
   3ed34:	cmp	r2, r1
   3ed38:	vmul.i32	q0, q9, q11
   3ed3c:	vmul.i32	q1, q8, q12
   3ed40:	vmul.i32	q8, q0, d0[1]
   3ed44:	vmul.i32	q9, q1, d2[1]
   3ed48:	vmov.32	sl, d16[0]
   3ed4c:	vmov.32	r3, d18[0]
   3ed50:	beq	3ed6c <GetDataSlab+0x12ef0>
   3ed54:	vmov.32	r9, d20[0]
   3ed58:	mul	r3, r9, r3
   3ed5c:	ldr	r9, [r7, r5, lsl #2]
   3ed60:	subs	r5, r5, #1
   3ed64:	mul	sl, sl, r9
   3ed68:	bne	3ed58 <GetDataSlab+0x12edc>
   3ed6c:	ldr	r1, [fp, #12]
   3ed70:	sub	r5, fp, #176	; 0xb0
   3ed74:	sub	r8, fp, #96	; 0x60
   3ed78:	ldr	r2, [sp, #60]	; 0x3c
   3ed7c:	add	r6, r6, #4
   3ed80:	str	sl, [r8, r4, lsl #2]
   3ed84:	str	r3, [r5, r4, lsl #2]
   3ed88:	ldr	sl, [fp, #20]
   3ed8c:	ldr	r1, [r1, r4, lsl #2]
   3ed90:	mla	ip, r1, lr, ip
   3ed94:	ldr	r1, [sl, r4, lsl #2]
   3ed98:	mov	lr, r3
   3ed9c:	ldr	r3, [sp, #52]	; 0x34
   3eda0:	add	r4, r4, #1
   3eda4:	mul	r2, r1, r2
   3eda8:	ldr	r1, [fp, #24]
   3edac:	str	r2, [sp, #60]	; 0x3c
   3edb0:	ldr	r2, [sp, #48]	; 0x30
   3edb4:	cmp	r4, r1
   3edb8:	bne	3ec9c <GetDataSlab+0x12e20>
   3edbc:	ldr	r0, [sp, #56]	; 0x38
   3edc0:	ldr	r1, [sp, #36]	; 0x24
   3edc4:	add	lr, r0, ip, lsl #1
   3edc8:	cmp	r1, #1
   3edcc:	bne	4a8f4 <GetDataSlab+0x1ea78>
   3edd0:	ldr	r0, [sp, #60]	; 0x3c
   3edd4:	ldr	r1, [sp, #44]	; 0x2c
   3edd8:	cmp	r0, #1
   3eddc:	blt	51c74 <GetDataSlab+0x25df8>
   3ede0:	sub	r0, fp, #136	; 0x88
   3ede4:	add	r7, sl, #4
   3ede8:	mov	sl, #0
   3edec:	sub	r2, fp, #224	; 0xe0
   3edf0:	mov	r9, #0
   3edf4:	orr	r6, r0, #4
   3edf8:	orr	r0, r8, #4
   3edfc:	ldr	r8, [fp, #12]
   3ee00:	str	r0, [sp, #48]	; 0x30
   3ee04:	lsl	r0, r1, #3
   3ee08:	str	r0, [sp, #56]	; 0x38
   3ee0c:	bic	r0, r1, #1
   3ee10:	str	r0, [sp, #52]	; 0x34
   3ee14:	ldr	r0, [r8], #4
   3ee18:	str	r0, [sp, #64]	; 0x40
   3ee1c:	cmp	r1, #1
   3ee20:	blt	3eea0 <GetDataSlab+0x13024>
   3ee24:	mov	r3, #0
   3ee28:	beq	3ee6c <GetDataSlab+0x12ff0>
   3ee2c:	ldr	r0, [sp, #64]	; 0x40
   3ee30:	ldr	r1, [sp, #52]	; 0x34
   3ee34:	ldr	r3, [sp, #68]	; 0x44
   3ee38:	add	r0, lr, r0, lsl #1
   3ee3c:	ldr	r5, [r0], #4
   3ee40:	subs	r1, r1, #2
   3ee44:	str	r5, [fp, #-224]	; 0xffffff20
   3ee48:	vld1.32	{d16[0]}, [r2 :32]
   3ee4c:	vmovl.s16	q8, d16
   3ee50:	vmovl.s32	q8, d16
   3ee54:	vst1.64	{d16-d17}, [r3]!
   3ee58:	bne	3ee3c <GetDataSlab+0x12fc0>
   3ee5c:	ldr	r0, [sp, #44]	; 0x2c
   3ee60:	ldr	r3, [sp, #52]	; 0x34
   3ee64:	cmp	r0, r3
   3ee68:	beq	3eea0 <GetDataSlab+0x13024>
   3ee6c:	ldr	r4, [sp, #64]	; 0x40
   3ee70:	ldr	r0, [sp, #44]	; 0x2c
   3ee74:	ldr	r1, [sp, #68]	; 0x44
   3ee78:	add	r5, lr, r4, lsl #1
   3ee7c:	sub	r0, r0, r3
   3ee80:	add	r1, r1, r3, lsl #3
   3ee84:	add	r3, r5, r3, lsl #1
   3ee88:	ldrsh	r4, [r3], #2
   3ee8c:	subs	r0, r0, #1
   3ee90:	asr	r5, r4, #31
   3ee94:	strd	r4, [r1]
   3ee98:	add	r1, r1, #8
   3ee9c:	bne	3ee88 <GetDataSlab+0x1300c>
   3eea0:	ldr	r0, [sp, #40]	; 0x28
   3eea4:	add	lr, lr, r0, lsl #1
   3eea8:	add	ip, ip, r0
   3eeac:	ldr	r0, [fp, #24]
   3eeb0:	cmp	r0, #2
   3eeb4:	blt	3ef60 <GetDataSlab+0x130e4>
   3eeb8:	mov	r1, #0
   3eebc:	mov	r0, r1
   3eec0:	ldr	r1, [r6, r1, lsl #2]
   3eec4:	add	r1, r1, #1
   3eec8:	str	r1, [r6, r0, lsl #2]
   3eecc:	ldr	r3, [r7, r0, lsl #2]
   3eed0:	sdiv	r4, r1, r3
   3eed4:	mls	r1, r4, r3, r1
   3eed8:	cmp	r1, #0
   3eedc:	bne	3ef50 <GetDataSlab+0x130d4>
   3eee0:	sub	r4, fp, #176	; 0xb0
   3eee4:	str	sl, [r6, r0, lsl #2]
   3eee8:	add	r1, r4, r0, lsl #2
   3eeec:	ldr	r1, [r1, #4]
   3eef0:	sdiv	r3, ip, r1
   3eef4:	mls	r3, r3, r1, ip
   3eef8:	cmp	r3, #0
   3eefc:	beq	3ef18 <GetDataSlab+0x1309c>
   3ef00:	ldr	r4, [r4, r0, lsl #2]
   3ef04:	ldr	r5, [r8, r0, lsl #2]
   3ef08:	sub	r1, r1, r3
   3ef0c:	mla	r1, r5, r4, r1
   3ef10:	add	ip, r1, ip
   3ef14:	b	3ef34 <GetDataSlab+0x130b8>
   3ef18:	ldr	r1, [r8, r0, lsl #2]
   3ef1c:	cmp	r1, #0
   3ef20:	beq	3ef38 <GetDataSlab+0x130bc>
   3ef24:	sub	r3, fp, #176	; 0xb0
   3ef28:	ldr	r3, [r3, r0, lsl #2]
   3ef2c:	mla	ip, r3, r1, ip
   3ef30:	mul	r1, r3, r1
   3ef34:	add	lr, lr, r1, lsl #1
   3ef38:	ldr	r3, [fp, #24]
   3ef3c:	add	r1, r0, #1
   3ef40:	add	r0, r0, #2
   3ef44:	cmp	r0, r3
   3ef48:	blt	3eebc <GetDataSlab+0x13040>
   3ef4c:	b	3ef60 <GetDataSlab+0x130e4>
   3ef50:	ldr	r1, [sp, #48]	; 0x30
   3ef54:	ldr	r0, [r1, r0, lsl #2]
   3ef58:	add	lr, lr, r0, lsl #1
   3ef5c:	add	ip, r0, ip
   3ef60:	ldr	r0, [sp, #68]	; 0x44
   3ef64:	ldr	r1, [sp, #56]	; 0x38
   3ef68:	ldr	r3, [sp, #60]	; 0x3c
   3ef6c:	add	r0, r0, r1
   3ef70:	ldr	r1, [sp, #44]	; 0x2c
   3ef74:	str	r0, [sp, #68]	; 0x44
   3ef78:	mov	r0, #0
   3ef7c:	add	r9, r9, r1
   3ef80:	cmp	r9, r3
   3ef84:	blt	3ee1c <GetDataSlab+0x12fa0>
   3ef88:	b	2e97c <GetDataSlab+0x2b00>
   3ef8c:	ldr	r0, [fp, #16]
   3ef90:	mov	r9, #0
   3ef94:	sub	r8, fp, #96	; 0x60
   3ef98:	ldr	r0, [r0]
   3ef9c:	str	r0, [sp, #32]
   3efa0:	sub	r0, r0, #1
   3efa4:	str	r0, [fp, #-96]	; 0xffffffa0
   3efa8:	ldr	r0, [fp, #8]
   3efac:	ldr	r0, [r0]
   3efb0:	str	r0, [fp, #-176]	; 0xffffff50
   3efb4:	str	r0, [sp, #48]	; 0x30
   3efb8:	ldr	r0, [fp, #24]
   3efbc:	ldr	r1, [r6]
   3efc0:	cmp	r0, #2
   3efc4:	str	r1, [sp, #52]	; 0x34
   3efc8:	str	r1, [sp, #60]	; 0x3c
   3efcc:	blt	3f118 <GetDataSlab+0x1329c>
   3efd0:	ldr	r0, [fp, #8]
   3efd4:	ldr	r3, [sp, #48]	; 0x30
   3efd8:	ldr	r6, [sp, #52]	; 0x34
   3efdc:	mov	r4, #1
   3efe0:	mov	r2, #0
   3efe4:	mov	r9, #0
   3efe8:	sub	r1, r0, #4
   3efec:	sub	r7, r0, #12
   3eff0:	mvn	r0, #15
   3eff4:	mov	sl, r3
   3eff8:	str	r6, [sp, #60]	; 0x3c
   3effc:	ldr	r6, [fp, #16]
   3f000:	add	r2, r2, #1
   3f004:	cmp	r2, #4
   3f008:	ldr	r6, [r6, r4, lsl #2]
   3f00c:	str	r3, [lr, r4, lsl #2]
   3f010:	sub	lr, r6, #1
   3f014:	ldr	r6, [fp, #8]
   3f018:	str	lr, [r8, r4, lsl #2]
   3f01c:	ldr	ip, [r6, r4, lsl #2]
   3f020:	bcs	3f030 <GetDataSlab+0x131b4>
   3f024:	mov	r5, ip
   3f028:	mov	r6, r4
   3f02c:	b	3f0b4 <GetDataSlab+0x13238>
   3f030:	vmov.i32	q9, #1	; 0x00000001
   3f034:	vmov.i32	q10, #1	; 0x00000001
   3f038:	vmov.i32	q8, #1	; 0x00000001
   3f03c:	bic	r5, r2, #3
   3f040:	bic	r8, r4, #3
   3f044:	vmov.32	d23[1], ip
   3f048:	vmov.32	d18[0], r3
   3f04c:	vmov.32	d20[0], lr
   3f050:	sub	r6, r4, r5
   3f054:	mov	r3, r7
   3f058:	vorr	d16, d18, d18
   3f05c:	vmov.i32	q9, #1	; 0x00000001
   3f060:	vorr	d18, d20, d20
   3f064:	vld1.32	{d20-d21}, [r3], r0
   3f068:	subs	r8, r8, #4
   3f06c:	vrev64.32	q12, q10
   3f070:	vext.8	q12, q12, q12, #8
   3f074:	vext.8	q11, q11, q12, #12
   3f078:	vmul.i32	q9, q9, q12
   3f07c:	vmul.i32	q8, q11, q8
   3f080:	vorr	q11, q12, q12
   3f084:	bne	3f064 <GetDataSlab+0x131e8>
   3f088:	vext.8	q11, q9, q8, #8
   3f08c:	vext.8	q12, q8, q8, #8
   3f090:	cmp	r2, r5
   3f094:	vmul.i32	q0, q9, q11
   3f098:	vmul.i32	q1, q8, q12
   3f09c:	vmul.i32	q8, q0, d0[1]
   3f0a0:	vmul.i32	q9, q1, d2[1]
   3f0a4:	vmov.32	lr, d16[0]
   3f0a8:	vmov.32	r3, d18[0]
   3f0ac:	beq	3f0c8 <GetDataSlab+0x1324c>
   3f0b0:	vmov.32	r5, d20[0]
   3f0b4:	mul	r3, r5, r3
   3f0b8:	ldr	r5, [r1, r6, lsl #2]
   3f0bc:	subs	r6, r6, #1
   3f0c0:	mul	lr, lr, r5
   3f0c4:	bne	3f0b4 <GetDataSlab+0x13238>
   3f0c8:	sub	r5, fp, #176	; 0xb0
   3f0cc:	sub	r8, fp, #96	; 0x60
   3f0d0:	add	r7, r7, #4
   3f0d4:	str	lr, [r8, r4, lsl #2]
   3f0d8:	str	r3, [r5, r4, lsl #2]
   3f0dc:	mov	lr, r5
   3f0e0:	ldr	r5, [fp, #12]
   3f0e4:	ldr	r6, [r5, r4, lsl #2]
   3f0e8:	ldr	r5, [fp, #20]
   3f0ec:	mla	r9, r6, sl, r9
   3f0f0:	ldr	r6, [r5, r4, lsl #2]
   3f0f4:	ldr	r5, [sp, #60]	; 0x3c
   3f0f8:	add	r4, r4, #1
   3f0fc:	mov	sl, r3
   3f100:	mov	r3, ip
   3f104:	mul	r5, r6, r5
   3f108:	ldr	r6, [fp, #24]
   3f10c:	str	r5, [sp, #60]	; 0x3c
   3f110:	cmp	r4, r6
   3f114:	bne	3effc <GetDataSlab+0x13180>
   3f118:	ldr	r0, [sp, #56]	; 0x38
   3f11c:	ldr	r7, [sp, #32]
   3f120:	add	r4, r0, r9, lsl #1
   3f124:	cmp	r7, #1
   3f128:	bne	4aa78 <GetDataSlab+0x1ebfc>
   3f12c:	ldr	r0, [sp, #60]	; 0x3c
   3f130:	sub	r1, fp, #96	; 0x60
   3f134:	cmp	r0, #1
   3f138:	ldr	r0, [fp, #20]
   3f13c:	blt	51c88 <GetDataSlab+0x25e0c>
   3f140:	ldr	r2, [sp, #52]	; 0x34
   3f144:	add	sl, r0, #4
   3f148:	sub	r0, fp, #136	; 0x88
   3f14c:	ldr	r8, [fp, #12]
   3f150:	mov	ip, #0
   3f154:	orr	r6, r0, #4
   3f158:	orr	r0, r1, #4
   3f15c:	sub	r1, fp, #220	; 0xdc
   3f160:	str	r0, [sp, #36]	; 0x24
   3f164:	lsl	r0, r2, #3
   3f168:	str	r0, [sp, #56]	; 0x38
   3f16c:	bic	r0, r2, #1
   3f170:	str	r0, [sp, #40]	; 0x28
   3f174:	ldr	r0, [r8], #4
   3f178:	str	r0, [sp, #44]	; 0x2c
   3f17c:	mov	r0, #0
   3f180:	str	r0, [sp, #64]	; 0x40
   3f184:	cmp	r2, #1
   3f188:	blt	3f1fc <GetDataSlab+0x13380>
   3f18c:	mov	r5, #0
   3f190:	beq	3f1d0 <GetDataSlab+0x13354>
   3f194:	ldr	r0, [sp, #44]	; 0x2c
   3f198:	ldr	r5, [sp, #40]	; 0x28
   3f19c:	ldr	r3, [sp, #68]	; 0x44
   3f1a0:	add	r0, r4, r0, lsl #1
   3f1a4:	ldr	r7, [r0], #4
   3f1a8:	subs	r5, r5, #2
   3f1ac:	str	r7, [fp, #-220]	; 0xffffff24
   3f1b0:	vld1.32	{d16[0]}, [r1 :32]
   3f1b4:	vmovl.u16	q8, d16
   3f1b8:	vmovl.u32	q8, d16
   3f1bc:	vst1.64	{d16-d17}, [r3]!
   3f1c0:	bne	3f1a4 <GetDataSlab+0x13328>
   3f1c4:	ldr	r5, [sp, #40]	; 0x28
   3f1c8:	cmp	r2, r5
   3f1cc:	beq	3f1fc <GetDataSlab+0x13380>
   3f1d0:	sub	r0, r2, r5
   3f1d4:	ldr	r2, [sp, #44]	; 0x2c
   3f1d8:	ldr	r3, [sp, #68]	; 0x44
   3f1dc:	add	r7, r4, r2, lsl #1
   3f1e0:	add	r3, r3, r5, lsl #3
   3f1e4:	add	r5, r7, r5, lsl #1
   3f1e8:	ldrh	r7, [r5], #2
   3f1ec:	subs	r0, r0, #1
   3f1f0:	stm	r3, {r7, ip}
   3f1f4:	add	r3, r3, #8
   3f1f8:	bne	3f1e8 <GetDataSlab+0x1336c>
   3f1fc:	ldr	r0, [sp, #48]	; 0x30
   3f200:	sub	r2, fp, #176	; 0xb0
   3f204:	add	r4, r4, r0, lsl #1
   3f208:	add	r9, r9, r0
   3f20c:	ldr	r0, [fp, #24]
   3f210:	cmp	r0, #2
   3f214:	blt	3f2bc <GetDataSlab+0x13440>
   3f218:	mov	r3, #0
   3f21c:	mov	r0, r3
   3f220:	ldr	r3, [r6, r3, lsl #2]
   3f224:	add	r3, r3, #1
   3f228:	str	r3, [r6, r0, lsl #2]
   3f22c:	ldr	r5, [sl, r0, lsl #2]
   3f230:	sdiv	r7, r3, r5
   3f234:	mls	r3, r7, r5, r3
   3f238:	cmp	r3, #0
   3f23c:	bne	3f2ac <GetDataSlab+0x13430>
   3f240:	add	r3, r2, r0, lsl #2
   3f244:	str	ip, [r6, r0, lsl #2]
   3f248:	ldr	r3, [r3, #4]
   3f24c:	sdiv	r5, r9, r3
   3f250:	mls	r5, r5, r3, r9
   3f254:	cmp	r5, #0
   3f258:	beq	3f278 <GetDataSlab+0x133fc>
   3f25c:	ldr	r7, [r2, r0, lsl #2]
   3f260:	ldr	lr, [r8, r0, lsl #2]
   3f264:	sub	r3, r3, r5
   3f268:	sub	r2, fp, #176	; 0xb0
   3f26c:	mla	r3, lr, r7, r3
   3f270:	add	r9, r3, r9
   3f274:	b	3f290 <GetDataSlab+0x13414>
   3f278:	ldr	r3, [r8, r0, lsl #2]
   3f27c:	cmp	r3, #0
   3f280:	beq	3f294 <GetDataSlab+0x13418>
   3f284:	ldr	r7, [r2, r0, lsl #2]
   3f288:	mla	r9, r7, r3, r9
   3f28c:	mul	r3, r7, r3
   3f290:	add	r4, r4, r3, lsl #1
   3f294:	ldr	r7, [fp, #24]
   3f298:	add	r3, r0, #1
   3f29c:	add	r0, r0, #2
   3f2a0:	cmp	r0, r7
   3f2a4:	blt	3f21c <GetDataSlab+0x133a0>
   3f2a8:	b	3f2bc <GetDataSlab+0x13440>
   3f2ac:	ldr	r2, [sp, #36]	; 0x24
   3f2b0:	ldr	r0, [r2, r0, lsl #2]
   3f2b4:	add	r4, r4, r0, lsl #1
   3f2b8:	add	r9, r0, r9
   3f2bc:	ldr	r0, [sp, #68]	; 0x44
   3f2c0:	ldr	r2, [sp, #56]	; 0x38
   3f2c4:	ldr	r7, [sp, #64]	; 0x40
   3f2c8:	ldr	r3, [sp, #60]	; 0x3c
   3f2cc:	add	r0, r0, r2
   3f2d0:	ldr	r2, [sp, #52]	; 0x34
   3f2d4:	str	r0, [sp, #68]	; 0x44
   3f2d8:	mov	r0, #0
   3f2dc:	add	r7, r7, r2
   3f2e0:	cmp	r7, r3
   3f2e4:	str	r7, [sp, #64]	; 0x40
   3f2e8:	blt	3f184 <GetDataSlab+0x13308>
   3f2ec:	b	2e97c <GetDataSlab+0x2b00>
   3f2f0:	ldr	r0, [fp, #16]
   3f2f4:	mov	r3, #0
   3f2f8:	sub	r7, fp, #96	; 0x60
   3f2fc:	ldr	r0, [r0]
   3f300:	str	r0, [sp, #32]
   3f304:	sub	r0, r0, #1
   3f308:	str	r0, [fp, #-96]	; 0xffffffa0
   3f30c:	ldr	r0, [fp, #8]
   3f310:	ldr	r0, [r0]
   3f314:	str	r0, [fp, #-176]	; 0xffffff50
   3f318:	str	r0, [sp, #44]	; 0x2c
   3f31c:	ldr	r0, [fp, #24]
   3f320:	ldr	r1, [r6]
   3f324:	cmp	r0, #2
   3f328:	str	r1, [sp, #48]	; 0x30
   3f32c:	str	r1, [sp, #60]	; 0x3c
   3f330:	blt	3f488 <GetDataSlab+0x1360c>
   3f334:	ldr	r0, [fp, #8]
   3f338:	ldr	r2, [sp, #44]	; 0x2c
   3f33c:	mov	sl, r6
   3f340:	mov	r5, #1
   3f344:	mov	r4, #0
   3f348:	mvn	r8, #15
   3f34c:	mov	r3, #0
   3f350:	sub	r1, r0, #4
   3f354:	sub	ip, r0, #12
   3f358:	ldr	r0, [sp, #48]	; 0x30
   3f35c:	mov	r9, r2
   3f360:	str	r0, [sp, #60]	; 0x3c
   3f364:	ldr	r0, [fp, #16]
   3f368:	add	r4, r4, #1
   3f36c:	cmp	r4, #4
   3f370:	str	r4, [sp, #52]	; 0x34
   3f374:	ldr	r0, [r0, r5, lsl #2]
   3f378:	str	r2, [lr, r5, lsl #2]
   3f37c:	sub	r0, r0, #1
   3f380:	str	r0, [r7, r5, lsl #2]
   3f384:	ldr	r7, [fp, #8]
   3f388:	ldr	r7, [r7, r5, lsl #2]
   3f38c:	bcs	3f39c <GetDataSlab+0x13520>
   3f390:	mov	r4, r7
   3f394:	mov	r6, r5
   3f398:	b	3f428 <GetDataSlab+0x135ac>
   3f39c:	vmov.i32	q9, #1	; 0x00000001
   3f3a0:	vmov.i32	q10, #1	; 0x00000001
   3f3a4:	vmov.i32	q8, #1	; 0x00000001
   3f3a8:	bic	lr, r4, #3
   3f3ac:	bic	sl, r5, #3
   3f3b0:	vmov.32	d23[1], r7
   3f3b4:	vmov.32	d18[0], r2
   3f3b8:	vmov.32	d20[0], r0
   3f3bc:	sub	r6, r5, lr
   3f3c0:	mov	r0, ip
   3f3c4:	vorr	d16, d18, d18
   3f3c8:	vmov.i32	q9, #1	; 0x00000001
   3f3cc:	vorr	d18, d20, d20
   3f3d0:	vld1.32	{d20-d21}, [r0], r8
   3f3d4:	subs	sl, sl, #4
   3f3d8:	vrev64.32	q12, q10
   3f3dc:	vext.8	q12, q12, q12, #8
   3f3e0:	vext.8	q11, q11, q12, #12
   3f3e4:	vmul.i32	q9, q9, q12
   3f3e8:	vmul.i32	q8, q11, q8
   3f3ec:	vorr	q11, q12, q12
   3f3f0:	bne	3f3d0 <GetDataSlab+0x13554>
   3f3f4:	vext.8	q11, q9, q8, #8
   3f3f8:	vext.8	q12, q8, q8, #8
   3f3fc:	ldr	sl, [fp, #20]
   3f400:	cmp	r4, lr
   3f404:	mov	r4, r7
   3f408:	vmul.i32	q0, q9, q11
   3f40c:	vmul.i32	q1, q8, q12
   3f410:	vmul.i32	q8, q0, d0[1]
   3f414:	vmul.i32	q9, q1, d2[1]
   3f418:	vmov.32	r0, d16[0]
   3f41c:	vmov.32	r2, d18[0]
   3f420:	beq	3f43c <GetDataSlab+0x135c0>
   3f424:	vmov.32	r7, d20[0]
   3f428:	mul	r2, r7, r2
   3f42c:	ldr	r7, [r1, r6, lsl #2]
   3f430:	subs	r6, r6, #1
   3f434:	mul	r0, r0, r7
   3f438:	bne	3f428 <GetDataSlab+0x135ac>
   3f43c:	sub	r7, fp, #96	; 0x60
   3f440:	sub	lr, fp, #176	; 0xb0
   3f444:	ldr	r6, [sp, #60]	; 0x3c
   3f448:	add	ip, ip, #4
   3f44c:	str	r0, [r7, r5, lsl #2]
   3f450:	ldr	r0, [fp, #12]
   3f454:	str	r2, [lr, r5, lsl #2]
   3f458:	ldr	r0, [r0, r5, lsl #2]
   3f45c:	mla	r3, r0, r9, r3
   3f460:	ldr	r0, [sl, r5, lsl #2]
   3f464:	mov	r9, r2
   3f468:	mov	r2, r4
   3f46c:	ldr	r4, [sp, #52]	; 0x34
   3f470:	add	r5, r5, #1
   3f474:	mul	r6, r0, r6
   3f478:	ldr	r0, [fp, #24]
   3f47c:	str	r6, [sp, #60]	; 0x3c
   3f480:	cmp	r5, r0
   3f484:	bne	3f364 <GetDataSlab+0x134e8>
   3f488:	ldr	r0, [sp, #56]	; 0x38
   3f48c:	ldr	r6, [sp, #32]
   3f490:	add	sl, r0, r3, lsl #2
   3f494:	cmp	r6, #1
   3f498:	bne	4ac14 <GetDataSlab+0x1ed98>
   3f49c:	ldr	r0, [sp, #60]	; 0x3c
   3f4a0:	sub	r1, fp, #96	; 0x60
   3f4a4:	cmp	r0, #1
   3f4a8:	ldr	r0, [fp, #12]
   3f4ac:	blt	51c9c <GetDataSlab+0x25e20>
   3f4b0:	add	r9, r0, #4
   3f4b4:	ldr	r0, [fp, #20]
   3f4b8:	add	lr, r0, #4
   3f4bc:	sub	r0, fp, #136	; 0x88
   3f4c0:	orr	r5, r0, #4
   3f4c4:	orr	r0, r1, #4
   3f4c8:	ldr	r1, [sp, #48]	; 0x30
   3f4cc:	str	r0, [sp, #36]	; 0x24
   3f4d0:	lsl	r0, r1, #3
   3f4d4:	str	r0, [sp, #52]	; 0x34
   3f4d8:	bic	r0, r1, #1
   3f4dc:	str	r0, [sp, #40]	; 0x28
   3f4e0:	mov	r0, #0
   3f4e4:	str	r0, [sp, #56]	; 0x38
   3f4e8:	ldr	ip, [sp, #68]	; 0x44
   3f4ec:	cmp	r1, #1
   3f4f0:	blt	3f57c <GetDataSlab+0x13700>
   3f4f4:	ldr	r0, [fp, #12]
   3f4f8:	mov	r2, #0
   3f4fc:	ldr	r6, [r0]
   3f500:	beq	3f54c <GetDataSlab+0x136d0>
   3f504:	ldr	r1, [sp, #40]	; 0x28
   3f508:	add	r2, sl, r6, lsl #2
   3f50c:	mov	r0, ip
   3f510:	sub	r4, fp, #240	; 0xf0
   3f514:	ldm	r2, {r8, ip}
   3f518:	subs	r1, r1, #2
   3f51c:	add	r2, r2, #8
   3f520:	str	ip, [fp, #-236]	; 0xffffff14
   3f524:	str	r8, [fp, #-240]	; 0xffffff10
   3f528:	vld1.32	{d16}, [r4 :64]
   3f52c:	vmovl.s32	q8, d16
   3f530:	vst1.64	{d16-d17}, [r0]!
   3f534:	bne	3f514 <GetDataSlab+0x13698>
   3f538:	ldr	r0, [sp, #48]	; 0x30
   3f53c:	ldr	r2, [sp, #40]	; 0x28
   3f540:	ldr	ip, [sp, #68]	; 0x44
   3f544:	cmp	r0, r2
   3f548:	beq	3f57c <GetDataSlab+0x13700>
   3f54c:	ldr	r0, [sp, #48]	; 0x30
   3f550:	sub	r7, r0, r2
   3f554:	add	r0, ip, r2, lsl #3
   3f558:	add	r2, r2, r6
   3f55c:	add	r2, sl, r2, lsl #2
   3f560:	ldr	r8, [r2], #4
   3f564:	subs	r7, r7, #1
   3f568:	asr	r1, r8, #31
   3f56c:	str	r8, [r0]
   3f570:	str	r1, [r0, #4]
   3f574:	add	r0, r0, #8
   3f578:	bne	3f560 <GetDataSlab+0x136e4>
   3f57c:	ldr	r0, [sp, #44]	; 0x2c
   3f580:	add	sl, sl, r0, lsl #2
   3f584:	add	r3, r3, r0
   3f588:	ldr	r0, [fp, #24]
   3f58c:	cmp	r0, #2
   3f590:	blt	3f640 <GetDataSlab+0x137c4>
   3f594:	mov	r1, #0
   3f598:	mov	r4, #0
   3f59c:	mov	r0, r1
   3f5a0:	ldr	r1, [r5, r1, lsl #2]
   3f5a4:	add	r1, r1, #1
   3f5a8:	str	r1, [r5, r0, lsl #2]
   3f5ac:	ldr	r2, [lr, r0, lsl #2]
   3f5b0:	sdiv	r7, r1, r2
   3f5b4:	mls	r1, r7, r2, r1
   3f5b8:	cmp	r1, #0
   3f5bc:	bne	3f630 <GetDataSlab+0x137b4>
   3f5c0:	sub	r6, fp, #176	; 0xb0
   3f5c4:	str	r4, [r5, r0, lsl #2]
   3f5c8:	add	r1, r6, r0, lsl #2
   3f5cc:	ldr	r1, [r1, #4]
   3f5d0:	sdiv	r2, r3, r1
   3f5d4:	mls	r2, r2, r1, r3
   3f5d8:	cmp	r2, #0
   3f5dc:	beq	3f5f8 <GetDataSlab+0x1377c>
   3f5e0:	ldr	r7, [r6, r0, lsl #2]
   3f5e4:	ldr	r6, [r9, r0, lsl #2]
   3f5e8:	sub	r1, r1, r2
   3f5ec:	mla	r1, r6, r7, r1
   3f5f0:	add	r3, r1, r3
   3f5f4:	b	3f614 <GetDataSlab+0x13798>
   3f5f8:	ldr	r1, [r9, r0, lsl #2]
   3f5fc:	cmp	r1, #0
   3f600:	beq	3f618 <GetDataSlab+0x1379c>
   3f604:	sub	r2, fp, #176	; 0xb0
   3f608:	ldr	r2, [r2, r0, lsl #2]
   3f60c:	mla	r3, r2, r1, r3
   3f610:	mul	r1, r2, r1
   3f614:	add	sl, sl, r1, lsl #2
   3f618:	ldr	r2, [fp, #24]
   3f61c:	add	r1, r0, #1
   3f620:	add	r0, r0, #2
   3f624:	cmp	r0, r2
   3f628:	blt	3f59c <GetDataSlab+0x13720>
   3f62c:	b	3f640 <GetDataSlab+0x137c4>
   3f630:	ldr	r1, [sp, #36]	; 0x24
   3f634:	ldr	r0, [r1, r0, lsl #2]
   3f638:	add	sl, sl, r0, lsl #2
   3f63c:	add	r3, r0, r3
   3f640:	ldr	r1, [sp, #48]	; 0x30
   3f644:	ldr	r7, [sp, #56]	; 0x38
   3f648:	ldr	r0, [sp, #52]	; 0x34
   3f64c:	ldr	r2, [sp, #60]	; 0x3c
   3f650:	add	r7, r7, r1
   3f654:	add	ip, ip, r0
   3f658:	mov	r0, #0
   3f65c:	cmp	r7, r2
   3f660:	str	ip, [sp, #68]	; 0x44
   3f664:	str	r7, [sp, #56]	; 0x38
   3f668:	blt	3f4e8 <GetDataSlab+0x1366c>
   3f66c:	b	2e97c <GetDataSlab+0x2b00>
   3f670:	ldr	r0, [fp, #16]
   3f674:	mov	r3, #0
   3f678:	sub	r7, fp, #96	; 0x60
   3f67c:	ldr	r0, [r0]
   3f680:	str	r0, [sp, #36]	; 0x24
   3f684:	sub	r0, r0, #1
   3f688:	str	r0, [fp, #-96]	; 0xffffffa0
   3f68c:	ldr	r0, [fp, #8]
   3f690:	ldr	r0, [r0]
   3f694:	str	r0, [fp, #-176]	; 0xffffff50
   3f698:	str	r0, [sp, #44]	; 0x2c
   3f69c:	ldr	r0, [fp, #24]
   3f6a0:	ldr	r1, [r6]
   3f6a4:	cmp	r0, #2
   3f6a8:	str	r1, [sp, #48]	; 0x30
   3f6ac:	str	r1, [sp, #60]	; 0x3c
   3f6b0:	blt	3f808 <GetDataSlab+0x1398c>
   3f6b4:	ldr	r0, [fp, #8]
   3f6b8:	ldr	r2, [sp, #44]	; 0x2c
   3f6bc:	mov	r6, lr
   3f6c0:	mov	r5, #1
   3f6c4:	mov	r4, #0
   3f6c8:	mvn	lr, #15
   3f6cc:	mov	r3, #0
   3f6d0:	sub	r1, r0, #4
   3f6d4:	sub	ip, r0, #12
   3f6d8:	ldr	r0, [sp, #48]	; 0x30
   3f6dc:	mov	r9, r2
   3f6e0:	str	r0, [sp, #60]	; 0x3c
   3f6e4:	ldr	r0, [fp, #16]
   3f6e8:	add	r4, r4, #1
   3f6ec:	cmp	r4, #4
   3f6f0:	str	r4, [sp, #52]	; 0x34
   3f6f4:	ldr	r0, [r0, r5, lsl #2]
   3f6f8:	str	r2, [r6, r5, lsl #2]
   3f6fc:	sub	r0, r0, #1
   3f700:	str	r0, [r7, r5, lsl #2]
   3f704:	ldr	r7, [fp, #8]
   3f708:	ldr	r8, [r7, r5, lsl #2]
   3f70c:	bcs	3f71c <GetDataSlab+0x138a0>
   3f710:	mov	sl, r8
   3f714:	mov	r6, r5
   3f718:	b	3f7a4 <GetDataSlab+0x13928>
   3f71c:	vmov.i32	q9, #1	; 0x00000001
   3f720:	vmov.i32	q10, #1	; 0x00000001
   3f724:	vmov.i32	q8, #1	; 0x00000001
   3f728:	bic	r7, r4, #3
   3f72c:	bic	sl, r5, #3
   3f730:	vmov.32	d23[1], r8
   3f734:	vmov.32	d18[0], r2
   3f738:	vmov.32	d20[0], r0
   3f73c:	sub	r6, r5, r7
   3f740:	mov	r0, ip
   3f744:	vorr	d16, d18, d18
   3f748:	vmov.i32	q9, #1	; 0x00000001
   3f74c:	vorr	d18, d20, d20
   3f750:	vld1.32	{d20-d21}, [r0], lr
   3f754:	subs	sl, sl, #4
   3f758:	vrev64.32	q12, q10
   3f75c:	vext.8	q12, q12, q12, #8
   3f760:	vext.8	q11, q11, q12, #12
   3f764:	vmul.i32	q9, q9, q12
   3f768:	vmul.i32	q8, q11, q8
   3f76c:	vorr	q11, q12, q12
   3f770:	bne	3f750 <GetDataSlab+0x138d4>
   3f774:	vext.8	q11, q9, q8, #8
   3f778:	vext.8	q12, q8, q8, #8
   3f77c:	mov	sl, r8
   3f780:	cmp	r4, r7
   3f784:	vmul.i32	q0, q9, q11
   3f788:	vmul.i32	q1, q8, q12
   3f78c:	vmul.i32	q8, q0, d0[1]
   3f790:	vmul.i32	q9, q1, d2[1]
   3f794:	vmov.32	r0, d16[0]
   3f798:	vmov.32	r2, d18[0]
   3f79c:	beq	3f7b8 <GetDataSlab+0x1393c>
   3f7a0:	vmov.32	r8, d20[0]
   3f7a4:	mul	r2, r8, r2
   3f7a8:	ldr	r8, [r1, r6, lsl #2]
   3f7ac:	subs	r6, r6, #1
   3f7b0:	mul	r0, r0, r8
   3f7b4:	bne	3f7a4 <GetDataSlab+0x13928>
   3f7b8:	sub	r7, fp, #96	; 0x60
   3f7bc:	sub	r6, fp, #176	; 0xb0
   3f7c0:	ldr	r4, [sp, #60]	; 0x3c
   3f7c4:	add	ip, ip, #4
   3f7c8:	str	r0, [r7, r5, lsl #2]
   3f7cc:	ldr	r0, [fp, #12]
   3f7d0:	str	r2, [r6, r5, lsl #2]
   3f7d4:	ldr	r0, [r0, r5, lsl #2]
   3f7d8:	mla	r3, r0, r9, r3
   3f7dc:	ldr	r0, [fp, #20]
   3f7e0:	mov	r9, r2
   3f7e4:	mov	r2, sl
   3f7e8:	ldr	r0, [r0, r5, lsl #2]
   3f7ec:	add	r5, r5, #1
   3f7f0:	mul	r4, r0, r4
   3f7f4:	ldr	r0, [fp, #24]
   3f7f8:	str	r4, [sp, #60]	; 0x3c
   3f7fc:	ldr	r4, [sp, #52]	; 0x34
   3f800:	cmp	r5, r0
   3f804:	bne	3f6e4 <GetDataSlab+0x13868>
   3f808:	ldr	r0, [sp, #56]	; 0x38
   3f80c:	ldr	r4, [sp, #36]	; 0x24
   3f810:	add	lr, r0, r3, lsl #2
   3f814:	cmp	r4, #1
   3f818:	bne	4adbc <GetDataSlab+0x1ef40>
   3f81c:	ldr	r0, [sp, #60]	; 0x3c
   3f820:	sub	r2, fp, #96	; 0x60
   3f824:	cmp	r0, #1
   3f828:	ldr	r0, [fp, #12]
   3f82c:	blt	51cb0 <GetDataSlab+0x25e34>
   3f830:	add	sl, r0, #4
   3f834:	ldr	r0, [fp, #20]
   3f838:	ldr	r1, [sp, #48]	; 0x30
   3f83c:	mov	r9, #0
   3f840:	add	r4, r0, #4
   3f844:	sub	r0, fp, #136	; 0x88
   3f848:	orr	r5, r0, #4
   3f84c:	orr	r0, r2, #4
   3f850:	str	r0, [sp, #36]	; 0x24
   3f854:	lsl	r0, r1, #3
   3f858:	str	r0, [sp, #52]	; 0x34
   3f85c:	bic	r0, r1, #1
   3f860:	str	r0, [sp, #40]	; 0x28
   3f864:	mov	r0, #0
   3f868:	str	r0, [sp, #56]	; 0x38
   3f86c:	ldr	ip, [sp, #68]	; 0x44
   3f870:	cmp	r1, #1
   3f874:	blt	3f8f8 <GetDataSlab+0x13a7c>
   3f878:	ldr	r0, [fp, #12]
   3f87c:	mov	r7, #0
   3f880:	ldr	r6, [r0]
   3f884:	beq	3f8d0 <GetDataSlab+0x13a54>
   3f888:	ldr	r0, [sp, #40]	; 0x28
   3f88c:	add	r2, lr, r6, lsl #2
   3f890:	mov	r7, ip
   3f894:	sub	r1, fp, #232	; 0xe8
   3f898:	ldm	r2, {r8, ip}
   3f89c:	subs	r0, r0, #2
   3f8a0:	add	r2, r2, #8
   3f8a4:	str	ip, [fp, #-228]	; 0xffffff1c
   3f8a8:	str	r8, [fp, #-232]	; 0xffffff18
   3f8ac:	vld1.32	{d16}, [r1 :64]
   3f8b0:	vmovl.u32	q8, d16
   3f8b4:	vst1.64	{d16-d17}, [r7]!
   3f8b8:	bne	3f898 <GetDataSlab+0x13a1c>
   3f8bc:	ldr	r0, [sp, #48]	; 0x30
   3f8c0:	ldr	r7, [sp, #40]	; 0x28
   3f8c4:	ldr	ip, [sp, #68]	; 0x44
   3f8c8:	cmp	r0, r7
   3f8cc:	beq	3f8f8 <GetDataSlab+0x13a7c>
   3f8d0:	ldr	r0, [sp, #48]	; 0x30
   3f8d4:	add	r2, ip, r7, lsl #3
   3f8d8:	sub	r0, r0, r7
   3f8dc:	add	r7, r7, r6
   3f8e0:	add	r7, lr, r7, lsl #2
   3f8e4:	ldr	r8, [r7], #4
   3f8e8:	subs	r0, r0, #1
   3f8ec:	strd	r8, [r2]
   3f8f0:	add	r2, r2, #8
   3f8f4:	bne	3f8e4 <GetDataSlab+0x13a68>
   3f8f8:	ldr	r0, [sp, #44]	; 0x2c
   3f8fc:	add	lr, lr, r0, lsl #2
   3f900:	add	r3, r3, r0
   3f904:	ldr	r0, [fp, #24]
   3f908:	cmp	r0, #2
   3f90c:	blt	3f9b8 <GetDataSlab+0x13b3c>
   3f910:	mov	r2, #0
   3f914:	mov	r0, r2
   3f918:	ldr	r2, [r5, r2, lsl #2]
   3f91c:	add	r2, r2, #1
   3f920:	str	r2, [r5, r0, lsl #2]
   3f924:	ldr	r7, [r4, r0, lsl #2]
   3f928:	sdiv	r6, r2, r7
   3f92c:	mls	r2, r6, r7, r2
   3f930:	cmp	r2, #0
   3f934:	bne	3f9a8 <GetDataSlab+0x13b2c>
   3f938:	sub	r1, fp, #176	; 0xb0
   3f93c:	str	r9, [r5, r0, lsl #2]
   3f940:	add	r2, r1, r0, lsl #2
   3f944:	ldr	r2, [r2, #4]
   3f948:	sdiv	r7, r3, r2
   3f94c:	mls	r7, r7, r2, r3
   3f950:	cmp	r7, #0
   3f954:	beq	3f970 <GetDataSlab+0x13af4>
   3f958:	ldr	r6, [r1, r0, lsl #2]
   3f95c:	ldr	r1, [sl, r0, lsl #2]
   3f960:	sub	r2, r2, r7
   3f964:	mla	r1, r1, r6, r2
   3f968:	add	r3, r1, r3
   3f96c:	b	3f98c <GetDataSlab+0x13b10>
   3f970:	ldr	r2, [sl, r0, lsl #2]
   3f974:	cmp	r2, #0
   3f978:	beq	3f990 <GetDataSlab+0x13b14>
   3f97c:	sub	r1, fp, #176	; 0xb0
   3f980:	ldr	r1, [r1, r0, lsl #2]
   3f984:	mla	r3, r1, r2, r3
   3f988:	mul	r1, r1, r2
   3f98c:	add	lr, lr, r1, lsl #2
   3f990:	ldr	r1, [fp, #24]
   3f994:	add	r2, r0, #1
   3f998:	add	r0, r0, #2
   3f99c:	cmp	r0, r1
   3f9a0:	blt	3f914 <GetDataSlab+0x13a98>
   3f9a4:	b	3f9b8 <GetDataSlab+0x13b3c>
   3f9a8:	ldr	r1, [sp, #36]	; 0x24
   3f9ac:	ldr	r0, [r1, r0, lsl #2]
   3f9b0:	add	lr, lr, r0, lsl #2
   3f9b4:	add	r3, r0, r3
   3f9b8:	ldr	r1, [sp, #48]	; 0x30
   3f9bc:	ldr	r7, [sp, #56]	; 0x38
   3f9c0:	ldr	r0, [sp, #52]	; 0x34
   3f9c4:	ldr	r2, [sp, #60]	; 0x3c
   3f9c8:	add	r7, r7, r1
   3f9cc:	add	ip, ip, r0
   3f9d0:	mov	r0, #0
   3f9d4:	cmp	r7, r2
   3f9d8:	str	ip, [sp, #68]	; 0x44
   3f9dc:	str	r7, [sp, #56]	; 0x38
   3f9e0:	blt	3f86c <GetDataSlab+0x139f0>
   3f9e4:	b	2e97c <GetDataSlab+0x2b00>
   3f9e8:	ldr	r0, [fp, #16]
   3f9ec:	ldr	r9, [fp, #8]
   3f9f0:	mov	r5, #0
   3f9f4:	sub	r8, fp, #96	; 0x60
   3f9f8:	ldr	r0, [r0]
   3f9fc:	str	r0, [sp, #24]
   3fa00:	sub	r0, r0, #1
   3fa04:	str	r0, [fp, #-96]	; 0xffffffa0
   3fa08:	ldr	r0, [r9]
   3fa0c:	str	r0, [fp, #-176]	; 0xffffff50
   3fa10:	str	r0, [sp, #40]	; 0x28
   3fa14:	ldr	r0, [fp, #24]
   3fa18:	ldr	r1, [r6]
   3fa1c:	cmp	r0, #2
   3fa20:	str	r1, [sp, #44]	; 0x2c
   3fa24:	str	r1, [sp, #52]	; 0x34
   3fa28:	blt	3fb90 <GetDataSlab+0x13d14>
   3fa2c:	mov	r0, #0
   3fa30:	ldr	r2, [sp, #44]	; 0x2c
   3fa34:	sub	r1, r9, #4
   3fa38:	sub	ip, r9, #12
   3fa3c:	mov	r7, #1
   3fa40:	mvn	sl, #15
   3fa44:	mov	r5, #0
   3fa48:	str	r0, [sp, #60]	; 0x3c
   3fa4c:	ldr	r0, [sp, #40]	; 0x28
   3fa50:	str	r2, [sp, #52]	; 0x34
   3fa54:	mov	r4, r0
   3fa58:	ldr	r2, [fp, #16]
   3fa5c:	ldr	r6, [sp, #60]	; 0x3c
   3fa60:	str	r4, [sp, #48]	; 0x30
   3fa64:	ldr	r2, [r2, r7, lsl #2]
   3fa68:	str	r0, [lr, r7, lsl #2]
   3fa6c:	add	r6, r6, #1
   3fa70:	cmp	r6, #4
   3fa74:	str	r6, [sp, #60]	; 0x3c
   3fa78:	sub	r4, r2, #1
   3fa7c:	str	r4, [r8, r7, lsl #2]
   3fa80:	ldr	lr, [r9, r7, lsl #2]
   3fa84:	bcs	3fa94 <GetDataSlab+0x13c18>
   3fa88:	mov	r2, lr
   3fa8c:	mov	r3, r7
   3fa90:	b	3fb24 <GetDataSlab+0x13ca8>
   3fa94:	vmov.i32	q9, #1	; 0x00000001
   3fa98:	vmov.i32	q10, #1	; 0x00000001
   3fa9c:	vmov.i32	q8, #1	; 0x00000001
   3faa0:	bic	r2, r6, #3
   3faa4:	bic	r9, r7, #3
   3faa8:	vmov.32	d23[1], lr
   3faac:	vmov.32	d18[0], r0
   3fab0:	vmov.32	d20[0], r4
   3fab4:	sub	r3, r7, r2
   3fab8:	mov	r0, ip
   3fabc:	vorr	d16, d18, d18
   3fac0:	vmov.i32	q9, #1	; 0x00000001
   3fac4:	vorr	d18, d20, d20
   3fac8:	vld1.32	{d20-d21}, [r0], sl
   3facc:	subs	r9, r9, #4
   3fad0:	vrev64.32	q12, q10
   3fad4:	vext.8	q12, q12, q12, #8
   3fad8:	vext.8	q11, q11, q12, #12
   3fadc:	vmul.i32	q9, q9, q12
   3fae0:	vmul.i32	q8, q11, q8
   3fae4:	vorr	q11, q12, q12
   3fae8:	bne	3fac8 <GetDataSlab+0x13c4c>
   3faec:	vext.8	q11, q9, q8, #8
   3faf0:	vext.8	q12, q8, q8, #8
   3faf4:	cmp	r6, r2
   3faf8:	vmul.i32	q0, q9, q11
   3fafc:	vmul.i32	q1, q8, q12
   3fb00:	vmul.i32	q8, q0, d0[1]
   3fb04:	vmul.i32	q9, q1, d2[1]
   3fb08:	vmov.32	r4, d16[0]
   3fb0c:	vmov.32	r0, d18[0]
   3fb10:	bne	3fb1c <GetDataSlab+0x13ca0>
   3fb14:	ldr	r9, [fp, #8]
   3fb18:	b	3fb38 <GetDataSlab+0x13cbc>
   3fb1c:	ldr	r9, [fp, #8]
   3fb20:	vmov.32	r2, d20[0]
   3fb24:	mul	r0, r2, r0
   3fb28:	ldr	r2, [r1, r3, lsl #2]
   3fb2c:	subs	r3, r3, #1
   3fb30:	mul	r4, r4, r2
   3fb34:	bne	3fb24 <GetDataSlab+0x13ca8>
   3fb38:	sub	r2, fp, #176	; 0xb0
   3fb3c:	sub	r8, fp, #96	; 0x60
   3fb40:	add	ip, ip, #4
   3fb44:	mov	r3, r2
   3fb48:	str	r0, [r2, r7, lsl #2]
   3fb4c:	ldr	r2, [fp, #12]
   3fb50:	str	r4, [r8, r7, lsl #2]
   3fb54:	ldr	r4, [sp, #48]	; 0x30
   3fb58:	ldr	r2, [r2, r7, lsl #2]
   3fb5c:	mla	r5, r2, r4, r5
   3fb60:	ldr	r2, [fp, #20]
   3fb64:	ldr	r4, [sp, #52]	; 0x34
   3fb68:	ldr	r2, [r2, r7, lsl #2]
   3fb6c:	add	r7, r7, #1
   3fb70:	mul	r4, r2, r4
   3fb74:	ldr	r2, [fp, #24]
   3fb78:	str	r4, [sp, #52]	; 0x34
   3fb7c:	mov	r4, r0
   3fb80:	mov	r0, lr
   3fb84:	mov	lr, r3
   3fb88:	cmp	r7, r2
   3fb8c:	bne	3fa58 <GetDataSlab+0x13bdc>
   3fb90:	ldr	r0, [sp, #56]	; 0x38
   3fb94:	ldr	r3, [sp, #24]
   3fb98:	add	r4, r0, r5, lsl #2
   3fb9c:	cmp	r3, #1
   3fba0:	bne	4af50 <GetDataSlab+0x1f0d4>
   3fba4:	ldr	r0, [sp, #52]	; 0x34
   3fba8:	ldr	r1, [fp, #20]
   3fbac:	ldr	r2, [sp, #44]	; 0x2c
   3fbb0:	cmp	r0, #1
   3fbb4:	ldr	r0, [fp, #12]
   3fbb8:	blt	51cc4 <GetDataSlab+0x25e48>
   3fbbc:	add	r9, r1, #4
   3fbc0:	sub	r1, fp, #136	; 0x88
   3fbc4:	orr	r7, r1, #4
   3fbc8:	sub	r1, fp, #96	; 0x60
   3fbcc:	orr	r1, r1, #4
   3fbd0:	str	r1, [sp, #36]	; 0x24
   3fbd4:	lsl	r1, r2, #3
   3fbd8:	str	r1, [sp, #56]	; 0x38
   3fbdc:	ldr	r1, [r0], #4
   3fbe0:	str	r0, [sp, #64]	; 0x40
   3fbe4:	mov	r0, #0
   3fbe8:	str	r1, [sp, #48]	; 0x30
   3fbec:	str	r0, [sp, #60]	; 0x3c
   3fbf0:	cmp	r2, #1
   3fbf4:	blt	3fc20 <GetDataSlab+0x13da4>
   3fbf8:	ldr	r0, [sp, #48]	; 0x30
   3fbfc:	ldr	r8, [sp, #44]	; 0x2c
   3fc00:	ldr	sl, [sp, #68]	; 0x44
   3fc04:	add	r6, r4, r0, lsl #2
   3fc08:	ldr	r0, [r6], #4
   3fc0c:	bl	5f3a0 <__aeabi_f2ulz>
   3fc10:	strd	r0, [sl]
   3fc14:	subs	r8, r8, #1
   3fc18:	add	sl, sl, #8
   3fc1c:	bne	3fc08 <GetDataSlab+0x13d8c>
   3fc20:	ldr	r0, [sp, #40]	; 0x28
   3fc24:	add	r4, r4, r0, lsl #2
   3fc28:	add	r5, r5, r0
   3fc2c:	ldr	r0, [fp, #24]
   3fc30:	cmp	r0, #2
   3fc34:	blt	3fcdc <GetDataSlab+0x13e60>
   3fc38:	ldr	ip, [sp, #68]	; 0x44
   3fc3c:	ldr	lr, [sp, #64]	; 0x40
   3fc40:	mov	r1, #0
   3fc44:	mov	r8, #0
   3fc48:	mov	r0, r1
   3fc4c:	ldr	r1, [r7, r1, lsl #2]
   3fc50:	add	r1, r1, #1
   3fc54:	str	r1, [r7, r0, lsl #2]
   3fc58:	ldr	r2, [r9, r0, lsl #2]
   3fc5c:	sdiv	r3, r1, r2
   3fc60:	mls	r1, r3, r2, r1
   3fc64:	cmp	r1, #0
   3fc68:	bne	3fce4 <GetDataSlab+0x13e68>
   3fc6c:	sub	r3, fp, #176	; 0xb0
   3fc70:	str	r8, [r7, r0, lsl #2]
   3fc74:	add	r1, r3, r0, lsl #2
   3fc78:	ldr	r1, [r1, #4]
   3fc7c:	sdiv	r2, r5, r1
   3fc80:	mls	r2, r2, r1, r5
   3fc84:	cmp	r2, #0
   3fc88:	beq	3fca4 <GetDataSlab+0x13e28>
   3fc8c:	ldr	r3, [r3, r0, lsl #2]
   3fc90:	ldr	r6, [lr, r0, lsl #2]
   3fc94:	sub	r1, r1, r2
   3fc98:	mla	r1, r6, r3, r1
   3fc9c:	add	r5, r1, r5
   3fca0:	b	3fcc0 <GetDataSlab+0x13e44>
   3fca4:	ldr	r1, [lr, r0, lsl #2]
   3fca8:	cmp	r1, #0
   3fcac:	beq	3fcc4 <GetDataSlab+0x13e48>
   3fcb0:	sub	r2, fp, #176	; 0xb0
   3fcb4:	ldr	r2, [r2, r0, lsl #2]
   3fcb8:	mla	r5, r2, r1, r5
   3fcbc:	mul	r1, r2, r1
   3fcc0:	add	r4, r4, r1, lsl #2
   3fcc4:	ldr	r2, [fp, #24]
   3fcc8:	add	r1, r0, #1
   3fccc:	add	r0, r0, #2
   3fcd0:	cmp	r0, r2
   3fcd4:	blt	3fc48 <GetDataSlab+0x13dcc>
   3fcd8:	b	3fcf4 <GetDataSlab+0x13e78>
   3fcdc:	ldr	ip, [sp, #68]	; 0x44
   3fce0:	b	3fcf4 <GetDataSlab+0x13e78>
   3fce4:	ldr	r1, [sp, #36]	; 0x24
   3fce8:	ldr	r0, [r1, r0, lsl #2]
   3fcec:	add	r4, r4, r0, lsl #2
   3fcf0:	add	r5, r0, r5
   3fcf4:	ldr	r2, [sp, #44]	; 0x2c
   3fcf8:	ldr	r3, [sp, #60]	; 0x3c
   3fcfc:	ldr	r0, [sp, #56]	; 0x38
   3fd00:	ldr	r1, [sp, #52]	; 0x34
   3fd04:	add	r3, r3, r2
   3fd08:	add	ip, ip, r0
   3fd0c:	mov	r0, #0
   3fd10:	cmp	r3, r1
   3fd14:	str	ip, [sp, #68]	; 0x44
   3fd18:	str	r3, [sp, #60]	; 0x3c
   3fd1c:	blt	3fbf0 <GetDataSlab+0x13d74>
   3fd20:	b	2e97c <GetDataSlab+0x2b00>
   3fd24:	ldr	r0, [fp, #16]
   3fd28:	ldr	r9, [fp, #8]
   3fd2c:	mov	r5, #0
   3fd30:	sub	r8, fp, #96	; 0x60
   3fd34:	ldr	r0, [r0]
   3fd38:	str	r0, [sp, #24]
   3fd3c:	sub	r0, r0, #1
   3fd40:	str	r0, [fp, #-96]	; 0xffffffa0
   3fd44:	ldr	r0, [r9]
   3fd48:	str	r0, [fp, #-176]	; 0xffffff50
   3fd4c:	str	r0, [sp, #40]	; 0x28
   3fd50:	ldr	r0, [fp, #24]
   3fd54:	ldr	r1, [r6]
   3fd58:	cmp	r0, #2
   3fd5c:	str	r1, [sp, #44]	; 0x2c
   3fd60:	str	r1, [sp, #52]	; 0x34
   3fd64:	blt	3fecc <GetDataSlab+0x14050>
   3fd68:	mov	r0, #0
   3fd6c:	ldr	r2, [sp, #44]	; 0x2c
   3fd70:	sub	r1, r9, #4
   3fd74:	sub	ip, r9, #12
   3fd78:	mov	r7, #1
   3fd7c:	mvn	sl, #15
   3fd80:	mov	r5, #0
   3fd84:	str	r0, [sp, #60]	; 0x3c
   3fd88:	ldr	r0, [sp, #40]	; 0x28
   3fd8c:	str	r2, [sp, #52]	; 0x34
   3fd90:	mov	r4, r0
   3fd94:	ldr	r2, [fp, #16]
   3fd98:	ldr	r6, [sp, #60]	; 0x3c
   3fd9c:	str	r4, [sp, #48]	; 0x30
   3fda0:	ldr	r2, [r2, r7, lsl #2]
   3fda4:	str	r0, [lr, r7, lsl #2]
   3fda8:	add	r6, r6, #1
   3fdac:	cmp	r6, #4
   3fdb0:	str	r6, [sp, #60]	; 0x3c
   3fdb4:	sub	r4, r2, #1
   3fdb8:	str	r4, [r8, r7, lsl #2]
   3fdbc:	ldr	lr, [r9, r7, lsl #2]
   3fdc0:	bcs	3fdd0 <GetDataSlab+0x13f54>
   3fdc4:	mov	r2, lr
   3fdc8:	mov	r3, r7
   3fdcc:	b	3fe60 <GetDataSlab+0x13fe4>
   3fdd0:	vmov.i32	q9, #1	; 0x00000001
   3fdd4:	vmov.i32	q10, #1	; 0x00000001
   3fdd8:	vmov.i32	q8, #1	; 0x00000001
   3fddc:	bic	r2, r6, #3
   3fde0:	bic	r9, r7, #3
   3fde4:	vmov.32	d23[1], lr
   3fde8:	vmov.32	d18[0], r0
   3fdec:	vmov.32	d20[0], r4
   3fdf0:	sub	r3, r7, r2
   3fdf4:	mov	r0, ip
   3fdf8:	vorr	d16, d18, d18
   3fdfc:	vmov.i32	q9, #1	; 0x00000001
   3fe00:	vorr	d18, d20, d20
   3fe04:	vld1.32	{d20-d21}, [r0], sl
   3fe08:	subs	r9, r9, #4
   3fe0c:	vrev64.32	q12, q10
   3fe10:	vext.8	q12, q12, q12, #8
   3fe14:	vext.8	q11, q11, q12, #12
   3fe18:	vmul.i32	q9, q9, q12
   3fe1c:	vmul.i32	q8, q11, q8
   3fe20:	vorr	q11, q12, q12
   3fe24:	bne	3fe04 <GetDataSlab+0x13f88>
   3fe28:	vext.8	q11, q9, q8, #8
   3fe2c:	vext.8	q12, q8, q8, #8
   3fe30:	cmp	r6, r2
   3fe34:	vmul.i32	q0, q9, q11
   3fe38:	vmul.i32	q1, q8, q12
   3fe3c:	vmul.i32	q8, q0, d0[1]
   3fe40:	vmul.i32	q9, q1, d2[1]
   3fe44:	vmov.32	r4, d16[0]
   3fe48:	vmov.32	r0, d18[0]
   3fe4c:	bne	3fe58 <GetDataSlab+0x13fdc>
   3fe50:	ldr	r9, [fp, #8]
   3fe54:	b	3fe74 <GetDataSlab+0x13ff8>
   3fe58:	ldr	r9, [fp, #8]
   3fe5c:	vmov.32	r2, d20[0]
   3fe60:	mul	r0, r2, r0
   3fe64:	ldr	r2, [r1, r3, lsl #2]
   3fe68:	subs	r3, r3, #1
   3fe6c:	mul	r4, r4, r2
   3fe70:	bne	3fe60 <GetDataSlab+0x13fe4>
   3fe74:	sub	r2, fp, #176	; 0xb0
   3fe78:	sub	r8, fp, #96	; 0x60
   3fe7c:	add	ip, ip, #4
   3fe80:	mov	r3, r2
   3fe84:	str	r0, [r2, r7, lsl #2]
   3fe88:	ldr	r2, [fp, #12]
   3fe8c:	str	r4, [r8, r7, lsl #2]
   3fe90:	ldr	r4, [sp, #48]	; 0x30
   3fe94:	ldr	r2, [r2, r7, lsl #2]
   3fe98:	mla	r5, r2, r4, r5
   3fe9c:	ldr	r2, [fp, #20]
   3fea0:	ldr	r4, [sp, #52]	; 0x34
   3fea4:	ldr	r2, [r2, r7, lsl #2]
   3fea8:	add	r7, r7, #1
   3feac:	mul	r4, r2, r4
   3feb0:	ldr	r2, [fp, #24]
   3feb4:	str	r4, [sp, #52]	; 0x34
   3feb8:	mov	r4, r0
   3febc:	mov	r0, lr
   3fec0:	mov	lr, r3
   3fec4:	cmp	r7, r2
   3fec8:	bne	3fd94 <GetDataSlab+0x13f18>
   3fecc:	ldr	r0, [sp, #56]	; 0x38
   3fed0:	ldr	r3, [sp, #24]
   3fed4:	add	r4, r0, r5, lsl #3
   3fed8:	cmp	r3, #1
   3fedc:	bne	4b0fc <GetDataSlab+0x1f280>
   3fee0:	ldr	r0, [sp, #52]	; 0x34
   3fee4:	ldr	r1, [fp, #20]
   3fee8:	ldr	r2, [sp, #44]	; 0x2c
   3feec:	cmp	r0, #1
   3fef0:	ldr	r0, [fp, #12]
   3fef4:	blt	51cd8 <GetDataSlab+0x25e5c>
   3fef8:	add	r9, r1, #4
   3fefc:	sub	r1, fp, #136	; 0x88
   3ff00:	orr	r7, r1, #4
   3ff04:	sub	r1, fp, #96	; 0x60
   3ff08:	orr	r1, r1, #4
   3ff0c:	str	r1, [sp, #36]	; 0x24
   3ff10:	lsl	r1, r2, #3
   3ff14:	str	r1, [sp, #56]	; 0x38
   3ff18:	ldr	r1, [r0], #4
   3ff1c:	str	r0, [sp, #64]	; 0x40
   3ff20:	mov	r0, #0
   3ff24:	str	r1, [sp, #48]	; 0x30
   3ff28:	str	r0, [sp, #60]	; 0x3c
   3ff2c:	cmp	r2, #1
   3ff30:	blt	3ff64 <GetDataSlab+0x140e8>
   3ff34:	ldr	r0, [sp, #48]	; 0x30
   3ff38:	ldr	r8, [sp, #44]	; 0x2c
   3ff3c:	ldr	sl, [sp, #68]	; 0x44
   3ff40:	add	r6, r4, r0, lsl #3
   3ff44:	vldr	d16, [r6]
   3ff48:	vmov	r0, r1, d16
   3ff4c:	bl	5f3e0 <__aeabi_d2ulz>
   3ff50:	strd	r0, [sl]
   3ff54:	subs	r8, r8, #1
   3ff58:	add	sl, sl, #8
   3ff5c:	add	r6, r6, #8
   3ff60:	bne	3ff44 <GetDataSlab+0x140c8>
   3ff64:	ldr	r0, [sp, #40]	; 0x28
   3ff68:	add	r4, r4, r0, lsl #3
   3ff6c:	add	r5, r5, r0
   3ff70:	ldr	r0, [fp, #24]
   3ff74:	cmp	r0, #2
   3ff78:	blt	40020 <GetDataSlab+0x141a4>
   3ff7c:	ldr	ip, [sp, #68]	; 0x44
   3ff80:	ldr	lr, [sp, #64]	; 0x40
   3ff84:	mov	r1, #0
   3ff88:	mov	r8, #0
   3ff8c:	mov	r0, r1
   3ff90:	ldr	r1, [r7, r1, lsl #2]
   3ff94:	add	r1, r1, #1
   3ff98:	str	r1, [r7, r0, lsl #2]
   3ff9c:	ldr	r2, [r9, r0, lsl #2]
   3ffa0:	sdiv	r3, r1, r2
   3ffa4:	mls	r1, r3, r2, r1
   3ffa8:	cmp	r1, #0
   3ffac:	bne	40028 <GetDataSlab+0x141ac>
   3ffb0:	sub	r3, fp, #176	; 0xb0
   3ffb4:	str	r8, [r7, r0, lsl #2]
   3ffb8:	add	r1, r3, r0, lsl #2
   3ffbc:	ldr	r1, [r1, #4]
   3ffc0:	sdiv	r2, r5, r1
   3ffc4:	mls	r2, r2, r1, r5
   3ffc8:	cmp	r2, #0
   3ffcc:	beq	3ffe8 <GetDataSlab+0x1416c>
   3ffd0:	ldr	r3, [r3, r0, lsl #2]
   3ffd4:	ldr	r6, [lr, r0, lsl #2]
   3ffd8:	sub	r1, r1, r2
   3ffdc:	mla	r1, r6, r3, r1
   3ffe0:	add	r5, r1, r5
   3ffe4:	b	40004 <GetDataSlab+0x14188>
   3ffe8:	ldr	r1, [lr, r0, lsl #2]
   3ffec:	cmp	r1, #0
   3fff0:	beq	40008 <GetDataSlab+0x1418c>
   3fff4:	sub	r2, fp, #176	; 0xb0
   3fff8:	ldr	r2, [r2, r0, lsl #2]
   3fffc:	mla	r5, r2, r1, r5
   40000:	mul	r1, r2, r1
   40004:	add	r4, r4, r1, lsl #3
   40008:	ldr	r2, [fp, #24]
   4000c:	add	r1, r0, #1
   40010:	add	r0, r0, #2
   40014:	cmp	r0, r2
   40018:	blt	3ff8c <GetDataSlab+0x14110>
   4001c:	b	40038 <GetDataSlab+0x141bc>
   40020:	ldr	ip, [sp, #68]	; 0x44
   40024:	b	40038 <GetDataSlab+0x141bc>
   40028:	ldr	r1, [sp, #36]	; 0x24
   4002c:	ldr	r0, [r1, r0, lsl #2]
   40030:	add	r4, r4, r0, lsl #3
   40034:	add	r5, r0, r5
   40038:	ldr	r2, [sp, #44]	; 0x2c
   4003c:	ldr	r3, [sp, #60]	; 0x3c
   40040:	ldr	r0, [sp, #56]	; 0x38
   40044:	ldr	r1, [sp, #52]	; 0x34
   40048:	add	r3, r3, r2
   4004c:	add	ip, ip, r0
   40050:	mov	r0, #0
   40054:	cmp	r3, r1
   40058:	str	ip, [sp, #68]	; 0x44
   4005c:	str	r3, [sp, #60]	; 0x3c
   40060:	blt	3ff2c <GetDataSlab+0x140b0>
   40064:	b	2e97c <GetDataSlab+0x2b00>
   40068:	ldr	r0, [fp, #16]
   4006c:	mov	r5, lr
   40070:	mov	lr, #0
   40074:	sub	r7, fp, #96	; 0x60
   40078:	str	r9, [sp, #40]	; 0x28
   4007c:	ldr	r0, [r0]
   40080:	str	r0, [sp, #20]
   40084:	sub	r0, r0, #1
   40088:	str	r0, [fp, #-96]	; 0xffffffa0
   4008c:	ldr	r0, [fp, #8]
   40090:	ldr	r0, [r0]
   40094:	str	r0, [fp, #-176]	; 0xffffff50
   40098:	str	r0, [sp, #32]
   4009c:	ldr	r0, [fp, #24]
   400a0:	ldr	r1, [r6]
   400a4:	cmp	r0, #2
   400a8:	str	r1, [sp, #48]	; 0x30
   400ac:	str	r1, [sp, #60]	; 0x3c
   400b0:	blt	40204 <GetDataSlab+0x14388>
   400b4:	ldr	r0, [fp, #8]
   400b8:	ldr	r2, [sp, #32]
   400bc:	mov	r4, #1
   400c0:	mov	r1, #0
   400c4:	mvn	r6, #15
   400c8:	mov	lr, #0
   400cc:	sub	r3, r0, #4
   400d0:	sub	r9, r0, #12
   400d4:	ldr	r0, [sp, #48]	; 0x30
   400d8:	mov	r8, r2
   400dc:	str	r0, [sp, #60]	; 0x3c
   400e0:	ldr	r0, [fp, #16]
   400e4:	add	r1, r1, #1
   400e8:	cmp	r1, #4
   400ec:	str	r1, [sp, #52]	; 0x34
   400f0:	ldr	r0, [r0, r4, lsl #2]
   400f4:	str	r2, [r5, r4, lsl #2]
   400f8:	sub	r0, r0, #1
   400fc:	str	r0, [r7, r4, lsl #2]
   40100:	ldr	r7, [fp, #8]
   40104:	ldr	ip, [r7, r4, lsl #2]
   40108:	bcs	40118 <GetDataSlab+0x1429c>
   4010c:	mov	sl, ip
   40110:	mov	r5, r4
   40114:	b	401a0 <GetDataSlab+0x14324>
   40118:	vmov.i32	q9, #1	; 0x00000001
   4011c:	vmov.i32	q10, #1	; 0x00000001
   40120:	vmov.i32	q8, #1	; 0x00000001
   40124:	bic	r7, r1, #3
   40128:	bic	sl, r4, #3
   4012c:	vmov.32	d23[1], ip
   40130:	vmov.32	d18[0], r2
   40134:	vmov.32	d20[0], r0
   40138:	sub	r5, r4, r7
   4013c:	mov	r0, r9
   40140:	vorr	d16, d18, d18
   40144:	vmov.i32	q9, #1	; 0x00000001
   40148:	vorr	d18, d20, d20
   4014c:	vld1.32	{d20-d21}, [r0], r6
   40150:	subs	sl, sl, #4
   40154:	vrev64.32	q12, q10
   40158:	vext.8	q12, q12, q12, #8
   4015c:	vext.8	q11, q11, q12, #12
   40160:	vmul.i32	q9, q9, q12
   40164:	vmul.i32	q8, q11, q8
   40168:	vorr	q11, q12, q12
   4016c:	bne	4014c <GetDataSlab+0x142d0>
   40170:	vext.8	q11, q9, q8, #8
   40174:	vext.8	q12, q8, q8, #8
   40178:	mov	sl, ip
   4017c:	cmp	r1, r7
   40180:	vmul.i32	q0, q9, q11
   40184:	vmul.i32	q1, q8, q12
   40188:	vmul.i32	q8, q0, d0[1]
   4018c:	vmul.i32	q9, q1, d2[1]
   40190:	vmov.32	r0, d16[0]
   40194:	vmov.32	r2, d18[0]
   40198:	beq	401b4 <GetDataSlab+0x14338>
   4019c:	vmov.32	ip, d20[0]
   401a0:	mul	r2, ip, r2
   401a4:	ldr	ip, [r3, r5, lsl #2]
   401a8:	subs	r5, r5, #1
   401ac:	mul	r0, r0, ip
   401b0:	bne	401a0 <GetDataSlab+0x14324>
   401b4:	sub	r7, fp, #96	; 0x60
   401b8:	sub	r5, fp, #176	; 0xb0
   401bc:	ldr	r1, [sp, #60]	; 0x3c
   401c0:	add	r9, r9, #4
   401c4:	str	r0, [r7, r4, lsl #2]
   401c8:	ldr	r0, [fp, #12]
   401cc:	str	r2, [r5, r4, lsl #2]
   401d0:	ldr	r0, [r0, r4, lsl #2]
   401d4:	mla	lr, r0, r8, lr
   401d8:	ldr	r0, [fp, #20]
   401dc:	mov	r8, r2
   401e0:	mov	r2, sl
   401e4:	ldr	r0, [r0, r4, lsl #2]
   401e8:	add	r4, r4, #1
   401ec:	mul	r1, r0, r1
   401f0:	ldr	r0, [fp, #24]
   401f4:	str	r1, [sp, #60]	; 0x3c
   401f8:	ldr	r1, [sp, #52]	; 0x34
   401fc:	cmp	r4, r0
   40200:	bne	400e0 <GetDataSlab+0x14264>
   40204:	ldr	r0, [sp, #56]	; 0x38
   40208:	ldr	r2, [sp, #20]
   4020c:	add	r5, r0, lr, lsl #3
   40210:	cmp	r2, #1
   40214:	bne	4b2b0 <GetDataSlab+0x1f434>
   40218:	ldr	r0, [sp, #60]	; 0x3c
   4021c:	ldr	ip, [sp, #48]	; 0x30
   40220:	sub	r2, fp, #96	; 0x60
   40224:	cmp	r0, #1
   40228:	ldr	r0, [fp, #12]
   4022c:	blt	4b448 <GetDataSlab+0x1f5cc>
   40230:	mov	r1, r0
   40234:	ldr	r9, [sp, #68]	; 0x44
   40238:	ldr	r0, [r1], #4
   4023c:	str	r0, [sp, #28]
   40240:	add	r0, ip, r0
   40244:	str	r0, [sp, #24]
   40248:	ldr	r0, [fp, #20]
   4024c:	add	r8, r0, #4
   40250:	sub	r0, fp, #136	; 0x88
   40254:	orr	r6, r0, #4
   40258:	orr	r0, r2, #4
   4025c:	mov	r2, #0
   40260:	str	r0, [sp, #16]
   40264:	bic	r0, ip, #1
   40268:	str	r0, [sp, #20]
   4026c:	lsl	r0, ip, #3
   40270:	str	r0, [sp, #36]	; 0x24
   40274:	mov	r0, #0
   40278:	str	r0, [sp, #52]	; 0x34
   4027c:	mov	r4, r8
   40280:	cmp	ip, #1
   40284:	str	r2, [sp, #44]	; 0x2c
   40288:	blt	40338 <GetDataSlab+0x144bc>
   4028c:	ldr	r0, [sp, #28]
   40290:	mov	r2, #0
   40294:	add	sl, r5, r0, lsl #3
   40298:	beq	40304 <GetDataSlab+0x14488>
   4029c:	ldr	r0, [sp, #68]	; 0x44
   402a0:	ldr	r3, [sp, #36]	; 0x24
   402a4:	ldr	r7, [sp, #52]	; 0x34
   402a8:	mla	r0, r3, r7, r0
   402ac:	ldr	r3, [sp, #24]
   402b0:	add	r3, r5, r3, lsl #3
   402b4:	cmp	r0, r3
   402b8:	bcs	402d8 <GetDataSlab+0x1445c>
   402bc:	ldr	r0, [sp, #36]	; 0x24
   402c0:	ldr	r3, [sp, #52]	; 0x34
   402c4:	mla	r0, r0, r3, r0
   402c8:	ldr	r3, [sp, #68]	; 0x44
   402cc:	add	r0, r3, r0
   402d0:	cmp	r0, sl
   402d4:	bhi	40304 <GetDataSlab+0x14488>
   402d8:	ldr	r2, [sp, #20]
   402dc:	mov	r3, r9
   402e0:	mov	r0, sl
   402e4:	vld1.64	{d16-d17}, [r0]!
   402e8:	subs	r2, r2, #2
   402ec:	vst1.64	{d16-d17}, [r3]!
   402f0:	bne	402e4 <GetDataSlab+0x14468>
   402f4:	ldr	r0, [sp, #48]	; 0x30
   402f8:	ldr	r2, [sp, #20]
   402fc:	cmp	r0, r2
   40300:	beq	40338 <GetDataSlab+0x144bc>
   40304:	ldr	r0, [sp, #48]	; 0x30
   40308:	sub	r3, r0, r2
   4030c:	mov	r0, #0
   40310:	sub	r2, r0, r2, lsl #3
   40314:	mov	r0, sl
   40318:	mov	ip, r9
   4031c:	subs	r3, r3, #1
   40320:	ldr	r8, [r0, -r2]!
   40324:	ldr	r0, [r0, #4]
   40328:	str	r8, [ip, -r2]!
   4032c:	sub	r2, r2, #8
   40330:	str	r0, [ip, #4]
   40334:	bne	40314 <GetDataSlab+0x14498>
   40338:	ldr	r0, [sp, #32]
   4033c:	add	r5, r5, r0, lsl #3
   40340:	add	lr, lr, r0
   40344:	ldr	r0, [fp, #24]
   40348:	cmp	r0, #2
   4034c:	blt	403f4 <GetDataSlab+0x14578>
   40350:	ldr	ip, [sp, #48]	; 0x30
   40354:	mov	r2, #0
   40358:	mov	r8, r4
   4035c:	mov	sl, #0
   40360:	mov	r0, r2
   40364:	ldr	r2, [r6, r2, lsl #2]
   40368:	add	r2, r2, #1
   4036c:	str	r2, [r6, r0, lsl #2]
   40370:	ldr	r3, [r8, r0, lsl #2]
   40374:	sdiv	r7, r2, r3
   40378:	mls	r2, r7, r3, r2
   4037c:	cmp	r2, #0
   40380:	bne	40400 <GetDataSlab+0x14584>
   40384:	sub	r7, fp, #176	; 0xb0
   40388:	str	sl, [r6, r0, lsl #2]
   4038c:	add	r2, r7, r0, lsl #2
   40390:	ldr	r2, [r2, #4]
   40394:	sdiv	r3, lr, r2
   40398:	mls	r3, r3, r2, lr
   4039c:	cmp	r3, #0
   403a0:	beq	403bc <GetDataSlab+0x14540>
   403a4:	ldr	r7, [r7, r0, lsl #2]
   403a8:	ldr	r4, [r1, r0, lsl #2]
   403ac:	sub	r2, r2, r3
   403b0:	mla	r2, r4, r7, r2
   403b4:	add	lr, r2, lr
   403b8:	b	403d8 <GetDataSlab+0x1455c>
   403bc:	ldr	r2, [r1, r0, lsl #2]
   403c0:	cmp	r2, #0
   403c4:	beq	403dc <GetDataSlab+0x14560>
   403c8:	sub	r3, fp, #176	; 0xb0
   403cc:	ldr	r3, [r3, r0, lsl #2]
   403d0:	mla	lr, r3, r2, lr
   403d4:	mul	r2, r3, r2
   403d8:	add	r5, r5, r2, lsl #3
   403dc:	ldr	r3, [fp, #24]
   403e0:	add	r2, r0, #1
   403e4:	add	r0, r0, #2
   403e8:	cmp	r0, r3
   403ec:	blt	40360 <GetDataSlab+0x144e4>
   403f0:	b	40410 <GetDataSlab+0x14594>
   403f4:	ldr	ip, [sp, #48]	; 0x30
   403f8:	mov	r8, r4
   403fc:	b	40410 <GetDataSlab+0x14594>
   40400:	ldr	r2, [sp, #16]
   40404:	ldr	r0, [r2, r0, lsl #2]
   40408:	add	r5, r5, r0, lsl #3
   4040c:	add	lr, r0, lr
   40410:	ldr	r0, [sp, #36]	; 0x24
   40414:	ldr	r2, [sp, #44]	; 0x2c
   40418:	add	r9, r9, r0
   4041c:	ldr	r0, [sp, #52]	; 0x34
   40420:	add	r2, r2, ip
   40424:	add	r0, r0, #1
   40428:	str	r0, [sp, #52]	; 0x34
   4042c:	ldr	r0, [sp, #60]	; 0x3c
   40430:	cmp	r2, r0
   40434:	blt	4027c <GetDataSlab+0x14400>
   40438:	b	4b448 <GetDataSlab+0x1f5cc>
   4043c:	ldr	r0, [sp, #60]	; 0x3c
   40440:	ldr	r9, [sp, #52]	; 0x34
   40444:	cmp	r0, #1
   40448:	blt	51cec <GetDataSlab+0x25e70>
   4044c:	ldr	r0, [sp, #40]	; 0x28
   40450:	mls	r0, r9, r8, r0
   40454:	str	r0, [sp, #48]	; 0x30
   40458:	mul	r0, r9, r8
   4045c:	str	r0, [sp, #40]	; 0x28
   40460:	ldr	r0, [fp, #12]
   40464:	add	lr, r0, #4
   40468:	ldr	r0, [fp, #20]
   4046c:	add	sl, r0, #4
   40470:	sub	r0, fp, #136	; 0x88
   40474:	orr	r1, r0, #4
   40478:	orr	r0, r2, #4
   4047c:	str	r0, [sp, #36]	; 0x24
   40480:	lsl	r0, r9, #3
   40484:	str	r0, [sp, #44]	; 0x2c
   40488:	mov	r0, #0
   4048c:	str	r0, [sp, #56]	; 0x38
   40490:	ldr	r0, [fp, #12]
   40494:	cmp	r9, #1
   40498:	ldr	r0, [r0]
   4049c:	blt	404dc <GetDataSlab+0x14660>
   404a0:	ldr	r2, [sp, #40]	; 0x28
   404a4:	ldr	ip, [sp, #68]	; 0x44
   404a8:	add	r5, r2, r5
   404ac:	add	r2, r4, r2
   404b0:	add	r4, r4, r0
   404b4:	ldrsb	r3, [r4], r8
   404b8:	subs	r9, r9, #1
   404bc:	vmov	s0, r3
   404c0:	vcvt.f64.s32	d16, s0
   404c4:	vstr	d16, [ip]
   404c8:	add	ip, ip, #8
   404cc:	bne	404b4 <GetDataSlab+0x14638>
   404d0:	add	r5, r5, r0
   404d4:	mov	r4, r2
   404d8:	b	404e0 <GetDataSlab+0x14664>
   404dc:	add	r5, r0, r5
   404e0:	ldr	r2, [sp, #48]	; 0x30
   404e4:	ldr	ip, [sp, #68]	; 0x44
   404e8:	mov	r9, #0
   404ec:	sub	r0, r2, r0
   404f0:	add	r4, r4, r2
   404f4:	add	r5, r5, r0
   404f8:	ldr	r0, [fp, #24]
   404fc:	cmp	r0, #2
   40500:	blt	405a8 <GetDataSlab+0x1472c>
   40504:	mov	r2, #0
   40508:	mov	r0, r2
   4050c:	ldr	r2, [r1, r2, lsl #2]
   40510:	add	r2, r2, #1
   40514:	str	r2, [r1, r0, lsl #2]
   40518:	ldr	r3, [sl, r0, lsl #2]
   4051c:	sdiv	r6, r2, r3
   40520:	mls	r2, r6, r3, r2
   40524:	cmp	r2, #0
   40528:	bne	40598 <GetDataSlab+0x1471c>
   4052c:	sub	r6, fp, #176	; 0xb0
   40530:	str	r9, [r1, r0, lsl #2]
   40534:	add	r2, r6, r0, lsl #2
   40538:	ldr	r2, [r2, #4]
   4053c:	sdiv	r3, r5, r2
   40540:	mls	r3, r3, r2, r5
   40544:	cmp	r3, #0
   40548:	beq	40568 <GetDataSlab+0x146ec>
   4054c:	ldr	r6, [r6, r0, lsl #2]
   40550:	ldr	r7, [lr, r0, lsl #2]
   40554:	sub	r2, r2, r3
   40558:	mla	r2, r7, r6, r2
   4055c:	add	r5, r2, r5
   40560:	add	r4, r4, r2
   40564:	b	40580 <GetDataSlab+0x14704>
   40568:	ldr	r2, [lr, r0, lsl #2]
   4056c:	cmp	r2, #0
   40570:	subne	r3, fp, #176	; 0xb0
   40574:	ldrne	r3, [r3, r0, lsl #2]
   40578:	mlane	r5, r3, r2, r5
   4057c:	mlane	r4, r3, r2, r4
   40580:	ldr	r3, [fp, #24]
   40584:	add	r2, r0, #1
   40588:	add	r0, r0, #2
   4058c:	cmp	r0, r3
   40590:	blt	40508 <GetDataSlab+0x1468c>
   40594:	b	405a8 <GetDataSlab+0x1472c>
   40598:	ldr	r2, [sp, #36]	; 0x24
   4059c:	ldr	r0, [r2, r0, lsl #2]
   405a0:	add	r4, r4, r0
   405a4:	add	r5, r0, r5
   405a8:	ldr	r9, [sp, #52]	; 0x34
   405ac:	ldr	r3, [sp, #56]	; 0x38
   405b0:	ldr	r0, [sp, #44]	; 0x2c
   405b4:	ldr	r2, [sp, #60]	; 0x3c
   405b8:	add	r3, r3, r9
   405bc:	add	ip, ip, r0
   405c0:	mov	r0, #0
   405c4:	cmp	r3, r2
   405c8:	str	ip, [sp, #68]	; 0x44
   405cc:	str	r3, [sp, #56]	; 0x38
   405d0:	blt	40490 <GetDataSlab+0x14614>
   405d4:	b	2e97c <GetDataSlab+0x2b00>
   405d8:	ldr	r1, [sp, #60]	; 0x3c
   405dc:	ldr	r6, [sp, #36]	; 0x24
   405e0:	sub	r2, fp, #96	; 0x60
   405e4:	cmp	r1, #1
   405e8:	ldr	r1, [fp, #20]
   405ec:	blt	51d00 <GetDataSlab+0x25e84>
   405f0:	mov	r7, r2
   405f4:	ldr	r2, [sp, #52]	; 0x34
   405f8:	add	r9, r0, #4
   405fc:	sub	r0, fp, #136	; 0x88
   40600:	add	sl, r1, #4
   40604:	mov	r8, #0
   40608:	orr	r1, r0, #4
   4060c:	orr	r0, r7, #4
   40610:	str	r0, [sp, #36]	; 0x24
   40614:	mls	r6, r2, ip, r6
   40618:	lsl	r0, r2, #2
   4061c:	str	r6, [sp, #48]	; 0x30
   40620:	mul	r6, r2, ip
   40624:	str	r0, [sp, #44]	; 0x2c
   40628:	mov	r0, #0
   4062c:	str	r6, [sp, #40]	; 0x28
   40630:	str	r0, [sp, #56]	; 0x38
   40634:	ldr	r0, [fp, #12]
   40638:	cmp	r2, #1
   4063c:	ldr	r0, [r0]
   40640:	blt	40684 <GetDataSlab+0x14808>
   40644:	ldr	r7, [sp, #40]	; 0x28
   40648:	ldr	lr, [sp, #68]	; 0x44
   4064c:	add	r5, r7, r3
   40650:	add	r3, r4, r7
   40654:	add	r4, r4, r0
   40658:	ldrsb	r8, [r4], ip
   4065c:	subs	r2, r2, #1
   40660:	vmov	s0, r8
   40664:	vcvt.f32.s32	s0, s0
   40668:	vstr	s0, [lr]
   4066c:	add	lr, lr, #4
   40670:	bne	40658 <GetDataSlab+0x147dc>
   40674:	add	r2, r5, r0
   40678:	mov	r4, r3
   4067c:	mov	r8, #0
   40680:	b	40688 <GetDataSlab+0x1480c>
   40684:	add	r2, r0, r3
   40688:	ldr	r3, [sp, #48]	; 0x30
   4068c:	sub	lr, fp, #176	; 0xb0
   40690:	sub	r0, r3, r0
   40694:	add	r4, r4, r3
   40698:	add	r3, r2, r0
   4069c:	ldr	r0, [fp, #24]
   406a0:	cmp	r0, #2
   406a4:	blt	40744 <GetDataSlab+0x148c8>
   406a8:	mov	r2, #0
   406ac:	mov	r0, r2
   406b0:	ldr	r2, [r1, r2, lsl #2]
   406b4:	add	r2, r2, #1
   406b8:	str	r2, [r1, r0, lsl #2]
   406bc:	ldr	r5, [sl, r0, lsl #2]
   406c0:	sdiv	r6, r2, r5
   406c4:	mls	r2, r6, r5, r2
   406c8:	cmp	r2, #0
   406cc:	bne	40734 <GetDataSlab+0x148b8>
   406d0:	add	r2, lr, r0, lsl #2
   406d4:	str	r8, [r1, r0, lsl #2]
   406d8:	ldr	r2, [r2, #4]
   406dc:	sdiv	r6, r3, r2
   406e0:	mls	r5, r6, r2, r3
   406e4:	cmp	r5, #0
   406e8:	beq	40708 <GetDataSlab+0x1488c>
   406ec:	ldr	r6, [lr, r0, lsl #2]
   406f0:	ldr	r7, [r9, r0, lsl #2]
   406f4:	sub	r2, r2, r5
   406f8:	mla	r2, r7, r6, r2
   406fc:	add	r3, r2, r3
   40700:	add	r4, r4, r2
   40704:	b	4071c <GetDataSlab+0x148a0>
   40708:	ldr	r2, [r9, r0, lsl #2]
   4070c:	cmp	r2, #0
   40710:	ldrne	r7, [lr, r0, lsl #2]
   40714:	mlane	r3, r7, r2, r3
   40718:	mlane	r4, r7, r2, r4
   4071c:	ldr	r7, [fp, #24]
   40720:	add	r2, r0, #1
   40724:	add	r0, r0, #2
   40728:	cmp	r0, r7
   4072c:	blt	406ac <GetDataSlab+0x14830>
   40730:	b	40744 <GetDataSlab+0x148c8>
   40734:	ldr	r2, [sp, #36]	; 0x24
   40738:	ldr	r0, [r2, r0, lsl #2]
   4073c:	add	r4, r4, r0
   40740:	add	r3, r0, r3
   40744:	ldr	r0, [sp, #68]	; 0x44
   40748:	ldr	r2, [sp, #44]	; 0x2c
   4074c:	ldr	r6, [sp, #56]	; 0x38
   40750:	ldr	r7, [sp, #60]	; 0x3c
   40754:	add	r0, r0, r2
   40758:	ldr	r2, [sp, #52]	; 0x34
   4075c:	str	r0, [sp, #68]	; 0x44
   40760:	mov	r0, #0
   40764:	add	r6, r6, r2
   40768:	cmp	r6, r7
   4076c:	str	r6, [sp, #56]	; 0x38
   40770:	blt	40634 <GetDataSlab+0x147b8>
   40774:	b	2e97c <GetDataSlab+0x2b00>
   40778:	ldr	r3, [fp, #16]
   4077c:	cmp	r9, #13
   40780:	bne	2e97c <GetDataSlab+0x2b00>
   40784:	b	442dc <GetDataSlab+0x18460>
   40788:	ldr	r0, [sp, #60]	; 0x3c
   4078c:	cmp	r0, #1
   40790:	blt	51d14 <GetDataSlab+0x25e98>
   40794:	ldr	r0, [fp, #20]
   40798:	ldr	lr, [fp, #16]
   4079c:	add	ip, r0, #4
   407a0:	sub	r0, fp, #136	; 0x88
   407a4:	orr	r9, r0, #4
   407a8:	sub	r0, fp, #96	; 0x60
   407ac:	orr	r0, r0, #4
   407b0:	str	r0, [sp, #44]	; 0x2c
   407b4:	ldr	r0, [r8], #4
   407b8:	str	r0, [sp, #48]	; 0x30
   407bc:	mov	r0, #0
   407c0:	str	r0, [sp, #56]	; 0x38
   407c4:	ldr	r1, [sp, #48]	; 0x30
   407c8:	cmp	r2, #1
   407cc:	add	r0, r1, r5
   407d0:	add	r3, sl, r1
   407d4:	blt	40828 <GetDataSlab+0x149ac>
   407d8:	ldr	r1, [sp, #68]	; 0x44
   407dc:	ldr	r2, [sp, #56]	; 0x38
   407e0:	ldr	r6, [fp, #20]
   407e4:	mov	r7, #0
   407e8:	add	r5, r1, r2
   407ec:	ldrb	r1, [r3]
   407f0:	strb	r1, [r5, r7]
   407f4:	add	r7, r7, #1
   407f8:	ldr	r4, [lr]
   407fc:	ldr	r2, [r6]
   40800:	add	r0, r4, r0
   40804:	add	r3, r3, r4
   40808:	cmp	r7, r2
   4080c:	blt	407ec <GetDataSlab+0x14970>
   40810:	ldr	r1, [fp, #12]
   40814:	sub	r6, fp, #176	; 0xb0
   40818:	ldr	r5, [r1]
   4081c:	ldr	r1, [fp, #8]
   40820:	ldr	r1, [r1]
   40824:	b	40834 <GetDataSlab+0x149b8>
   40828:	mov	r5, r1
   4082c:	ldr	r1, [sp, #52]	; 0x34
   40830:	sub	r6, fp, #176	; 0xb0
   40834:	str	r1, [sp, #52]	; 0x34
   40838:	mls	r1, r4, r2, r1
   4083c:	str	r5, [sp, #48]	; 0x30
   40840:	sub	r1, r1, r5
   40844:	add	r5, r1, r0
   40848:	ldr	r0, [fp, #24]
   4084c:	add	sl, r3, r1
   40850:	cmp	r0, #2
   40854:	blt	40900 <GetDataSlab+0x14a84>
   40858:	mov	r7, #0
   4085c:	ldr	r1, [r9, r7, lsl #2]
   40860:	mov	r0, r7
   40864:	add	r1, r1, #1
   40868:	str	r1, [r9, r7, lsl #2]
   4086c:	ldr	r3, [ip, r7, lsl #2]
   40870:	sdiv	r7, r1, r3
   40874:	mls	r1, r7, r3, r1
   40878:	cmp	r1, #0
   4087c:	bne	408f0 <GetDataSlab+0x14a74>
   40880:	mov	r1, #0
   40884:	str	r1, [r9, r0, lsl #2]
   40888:	add	r1, r6, r0, lsl #2
   4088c:	ldr	r7, [r1, #4]
   40890:	sdiv	r1, r5, r7
   40894:	mls	r1, r1, r7, r5
   40898:	cmp	r1, #0
   4089c:	beq	408c4 <GetDataSlab+0x14a48>
   408a0:	ldr	r3, [r6, r0, lsl #2]
   408a4:	ldr	lr, [r8, r0, lsl #2]
   408a8:	sub	r1, r7, r1
   408ac:	sub	r6, fp, #176	; 0xb0
   408b0:	mla	r1, lr, r3, r1
   408b4:	ldr	lr, [fp, #16]
   408b8:	add	r5, r1, r5
   408bc:	add	sl, sl, r1
   408c0:	b	408d8 <GetDataSlab+0x14a5c>
   408c4:	ldr	r1, [r8, r0, lsl #2]
   408c8:	cmp	r1, #0
   408cc:	ldrne	r3, [r6, r0, lsl #2]
   408d0:	mlane	r5, r3, r1, r5
   408d4:	mlane	sl, r3, r1, sl
   408d8:	ldr	r1, [fp, #24]
   408dc:	add	r7, r0, #1
   408e0:	add	r0, r0, #2
   408e4:	cmp	r0, r1
   408e8:	blt	4085c <GetDataSlab+0x149e0>
   408ec:	b	40900 <GetDataSlab+0x14a84>
   408f0:	ldr	r1, [sp, #44]	; 0x2c
   408f4:	ldr	r0, [r1, r0, lsl #2]
   408f8:	add	sl, sl, r0
   408fc:	add	r5, r0, r5
   40900:	ldr	r3, [sp, #56]	; 0x38
   40904:	ldr	r1, [sp, #60]	; 0x3c
   40908:	mov	r0, #0
   4090c:	add	r3, r2, r3
   40910:	cmp	r3, r1
   40914:	str	r3, [sp, #56]	; 0x38
   40918:	blt	407c4 <GetDataSlab+0x14948>
   4091c:	b	2e97c <GetDataSlab+0x2b00>
   40920:	ldr	r3, [fp, #16]
   40924:	cmp	r9, #13
   40928:	bne	2e97c <GetDataSlab+0x2b00>
   4092c:	b	45300 <GetDataSlab+0x19484>
   40930:	ldr	r0, [sp, #60]	; 0x3c
   40934:	cmp	r0, #1
   40938:	blt	51d28 <GetDataSlab+0x25eac>
   4093c:	ldr	r0, [fp, #20]
   40940:	ldr	lr, [fp, #16]
   40944:	add	ip, r0, #4
   40948:	sub	r0, fp, #136	; 0x88
   4094c:	orr	r9, r0, #4
   40950:	sub	r0, fp, #96	; 0x60
   40954:	orr	r0, r0, #4
   40958:	str	r0, [sp, #44]	; 0x2c
   4095c:	ldr	r0, [r8], #4
   40960:	str	r0, [sp, #48]	; 0x30
   40964:	mov	r0, #0
   40968:	str	r0, [sp, #56]	; 0x38
   4096c:	ldr	r1, [sp, #48]	; 0x30
   40970:	cmp	r2, #1
   40974:	add	r0, r1, r5
   40978:	add	r3, sl, r1
   4097c:	blt	409d0 <GetDataSlab+0x14b54>
   40980:	ldr	r1, [sp, #68]	; 0x44
   40984:	ldr	r2, [sp, #56]	; 0x38
   40988:	ldr	r6, [fp, #20]
   4098c:	mov	r7, #0
   40990:	add	r5, r1, r2
   40994:	ldrb	r1, [r3]
   40998:	strb	r1, [r5, r7]
   4099c:	add	r7, r7, #1
   409a0:	ldr	r4, [lr]
   409a4:	ldr	r2, [r6]
   409a8:	add	r0, r4, r0
   409ac:	add	r3, r3, r4
   409b0:	cmp	r7, r2
   409b4:	blt	40994 <GetDataSlab+0x14b18>
   409b8:	ldr	r1, [fp, #12]
   409bc:	sub	r6, fp, #176	; 0xb0
   409c0:	ldr	r5, [r1]
   409c4:	ldr	r1, [fp, #8]
   409c8:	ldr	r1, [r1]
   409cc:	b	409dc <GetDataSlab+0x14b60>
   409d0:	mov	r5, r1
   409d4:	ldr	r1, [sp, #52]	; 0x34
   409d8:	sub	r6, fp, #176	; 0xb0
   409dc:	str	r1, [sp, #52]	; 0x34
   409e0:	mls	r1, r4, r2, r1
   409e4:	str	r5, [sp, #48]	; 0x30
   409e8:	sub	r1, r1, r5
   409ec:	add	r5, r1, r0
   409f0:	ldr	r0, [fp, #24]
   409f4:	add	sl, r3, r1
   409f8:	cmp	r0, #2
   409fc:	blt	40aa8 <GetDataSlab+0x14c2c>
   40a00:	mov	r7, #0
   40a04:	ldr	r1, [r9, r7, lsl #2]
   40a08:	mov	r0, r7
   40a0c:	add	r1, r1, #1
   40a10:	str	r1, [r9, r7, lsl #2]
   40a14:	ldr	r3, [ip, r7, lsl #2]
   40a18:	sdiv	r7, r1, r3
   40a1c:	mls	r1, r7, r3, r1
   40a20:	cmp	r1, #0
   40a24:	bne	40a98 <GetDataSlab+0x14c1c>
   40a28:	mov	r1, #0
   40a2c:	str	r1, [r9, r0, lsl #2]
   40a30:	add	r1, r6, r0, lsl #2
   40a34:	ldr	r7, [r1, #4]
   40a38:	sdiv	r1, r5, r7
   40a3c:	mls	r1, r1, r7, r5
   40a40:	cmp	r1, #0
   40a44:	beq	40a6c <GetDataSlab+0x14bf0>
   40a48:	ldr	r3, [r6, r0, lsl #2]
   40a4c:	ldr	lr, [r8, r0, lsl #2]
   40a50:	sub	r1, r7, r1
   40a54:	sub	r6, fp, #176	; 0xb0
   40a58:	mla	r1, lr, r3, r1
   40a5c:	ldr	lr, [fp, #16]
   40a60:	add	r5, r1, r5
   40a64:	add	sl, sl, r1
   40a68:	b	40a80 <GetDataSlab+0x14c04>
   40a6c:	ldr	r1, [r8, r0, lsl #2]
   40a70:	cmp	r1, #0
   40a74:	ldrne	r3, [r6, r0, lsl #2]
   40a78:	mlane	r5, r3, r1, r5
   40a7c:	mlane	sl, r3, r1, sl
   40a80:	ldr	r1, [fp, #24]
   40a84:	add	r7, r0, #1
   40a88:	add	r0, r0, #2
   40a8c:	cmp	r0, r1
   40a90:	blt	40a04 <GetDataSlab+0x14b88>
   40a94:	b	40aa8 <GetDataSlab+0x14c2c>
   40a98:	ldr	r1, [sp, #44]	; 0x2c
   40a9c:	ldr	r0, [r1, r0, lsl #2]
   40aa0:	add	sl, sl, r0
   40aa4:	add	r5, r0, r5
   40aa8:	ldr	r3, [sp, #56]	; 0x38
   40aac:	ldr	r1, [sp, #60]	; 0x3c
   40ab0:	mov	r0, #0
   40ab4:	add	r3, r2, r3
   40ab8:	cmp	r3, r1
   40abc:	str	r3, [sp, #56]	; 0x38
   40ac0:	blt	4096c <GetDataSlab+0x14af0>
   40ac4:	b	2e97c <GetDataSlab+0x2b00>
   40ac8:	ldr	ip, [fp, #16]
   40acc:	cmp	r9, #13
   40ad0:	bne	2e97c <GetDataSlab+0x2b00>
   40ad4:	b	462e4 <GetDataSlab+0x1a468>
   40ad8:	ldr	r0, [sp, #60]	; 0x3c
   40adc:	ldr	r8, [sp, #40]	; 0x28
   40ae0:	sub	r2, fp, #96	; 0x60
   40ae4:	cmp	r0, #1
   40ae8:	blt	51d3c <GetDataSlab+0x25ec0>
   40aec:	ldr	r0, [sp, #44]	; 0x2c
   40af0:	mls	r0, r8, sl, r0
   40af4:	str	r0, [sp, #52]	; 0x34
   40af8:	mul	r0, r8, sl
   40afc:	str	r0, [sp, #44]	; 0x2c
   40b00:	ldr	r0, [fp, #12]
   40b04:	add	r9, r0, #4
   40b08:	ldr	r0, [fp, #20]
   40b0c:	add	lr, r0, #4
   40b10:	sub	r0, fp, #136	; 0x88
   40b14:	orr	r1, r0, #4
   40b18:	orr	r0, r2, #4
   40b1c:	str	r0, [sp, #36]	; 0x24
   40b20:	lsl	r0, r8, #1
   40b24:	str	r0, [sp, #48]	; 0x30
   40b28:	mov	r0, #0
   40b2c:	str	r0, [sp, #56]	; 0x38
   40b30:	ldr	r0, [fp, #12]
   40b34:	cmp	r8, #1
   40b38:	ldr	r0, [r0]
   40b3c:	blt	40b78 <GetDataSlab+0x14cfc>
   40b40:	ldr	r2, [sp, #44]	; 0x2c
   40b44:	ldr	ip, [sp, #68]	; 0x44
   40b48:	add	r5, r2, r3
   40b4c:	add	r3, r4, r2
   40b50:	add	r4, r4, r0
   40b54:	ldrsb	r2, [r4], sl
   40b58:	subs	r8, r8, #1
   40b5c:	strh	r2, [ip], #2
   40b60:	bne	40b54 <GetDataSlab+0x14cd8>
   40b64:	ldr	ip, [sp, #68]	; 0x44
   40b68:	ldr	r8, [sp, #40]	; 0x28
   40b6c:	add	r5, r5, r0
   40b70:	mov	r4, r3
   40b74:	b	40b80 <GetDataSlab+0x14d04>
   40b78:	ldr	ip, [sp, #68]	; 0x44
   40b7c:	add	r5, r0, r3
   40b80:	ldr	r2, [sp, #52]	; 0x34
   40b84:	sub	r0, r2, r0
   40b88:	add	r4, r4, r2
   40b8c:	add	r3, r5, r0
   40b90:	ldr	r0, [fp, #24]
   40b94:	cmp	r0, #2
   40b98:	blt	40c44 <GetDataSlab+0x14dc8>
   40b9c:	mov	r5, #0
   40ba0:	ldr	r2, [r1, r5, lsl #2]
   40ba4:	mov	r0, r5
   40ba8:	add	r2, r2, #1
   40bac:	str	r2, [r1, r5, lsl #2]
   40bb0:	ldr	r5, [lr, r5, lsl #2]
   40bb4:	sdiv	r6, r2, r5
   40bb8:	mls	r2, r6, r5, r2
   40bbc:	cmp	r2, #0
   40bc0:	bne	40c34 <GetDataSlab+0x14db8>
   40bc4:	mov	r2, #0
   40bc8:	sub	r6, fp, #176	; 0xb0
   40bcc:	str	r2, [r1, r0, lsl #2]
   40bd0:	add	r2, r6, r0, lsl #2
   40bd4:	ldr	r5, [r2, #4]
   40bd8:	sdiv	r2, r3, r5
   40bdc:	mls	r2, r2, r5, r3
   40be0:	cmp	r2, #0
   40be4:	beq	40c04 <GetDataSlab+0x14d88>
   40be8:	ldr	r6, [r6, r0, lsl #2]
   40bec:	ldr	r7, [r9, r0, lsl #2]
   40bf0:	sub	r2, r5, r2
   40bf4:	mla	r2, r7, r6, r2
   40bf8:	add	r3, r2, r3
   40bfc:	add	r4, r4, r2
   40c00:	b	40c1c <GetDataSlab+0x14da0>
   40c04:	ldr	r2, [r9, r0, lsl #2]
   40c08:	cmp	r2, #0
   40c0c:	subne	r5, fp, #176	; 0xb0
   40c10:	ldrne	r7, [r5, r0, lsl #2]
   40c14:	mlane	r3, r7, r2, r3
   40c18:	mlane	r4, r7, r2, r4
   40c1c:	ldr	r2, [fp, #24]
   40c20:	add	r5, r0, #1
   40c24:	add	r0, r0, #2
   40c28:	cmp	r0, r2
   40c2c:	blt	40ba0 <GetDataSlab+0x14d24>
   40c30:	b	40c44 <GetDataSlab+0x14dc8>
   40c34:	ldr	r2, [sp, #36]	; 0x24
   40c38:	ldr	r0, [r2, r0, lsl #2]
   40c3c:	add	r4, r4, r0
   40c40:	add	r3, r0, r3
   40c44:	ldr	r7, [sp, #56]	; 0x38
   40c48:	ldr	r0, [sp, #48]	; 0x30
   40c4c:	ldr	r2, [sp, #60]	; 0x3c
   40c50:	add	r7, r7, r8
   40c54:	add	ip, ip, r0
   40c58:	mov	r0, #0
   40c5c:	cmp	r7, r2
   40c60:	str	ip, [sp, #68]	; 0x44
   40c64:	str	r7, [sp, #56]	; 0x38
   40c68:	blt	40b30 <GetDataSlab+0x14cb4>
   40c6c:	b	2e97c <GetDataSlab+0x2b00>
   40c70:	ldr	ip, [fp, #16]
   40c74:	cmp	r9, #13
   40c78:	bne	2e97c <GetDataSlab+0x2b00>
   40c7c:	b	472ec <GetDataSlab+0x1b470>
   40c80:	ldr	r0, [sp, #60]	; 0x3c
   40c84:	ldr	r8, [sp, #40]	; 0x28
   40c88:	sub	r2, fp, #96	; 0x60
   40c8c:	cmp	r0, #1
   40c90:	blt	51d50 <GetDataSlab+0x25ed4>
   40c94:	ldr	r0, [sp, #44]	; 0x2c
   40c98:	mls	r0, r8, sl, r0
   40c9c:	str	r0, [sp, #52]	; 0x34
   40ca0:	mul	r0, r8, sl
   40ca4:	str	r0, [sp, #44]	; 0x2c
   40ca8:	ldr	r0, [fp, #12]
   40cac:	add	r9, r0, #4
   40cb0:	ldr	r0, [fp, #20]
   40cb4:	add	lr, r0, #4
   40cb8:	sub	r0, fp, #136	; 0x88
   40cbc:	orr	r1, r0, #4
   40cc0:	orr	r0, r2, #4
   40cc4:	str	r0, [sp, #36]	; 0x24
   40cc8:	lsl	r0, r8, #1
   40ccc:	str	r0, [sp, #48]	; 0x30
   40cd0:	mov	r0, #0
   40cd4:	str	r0, [sp, #56]	; 0x38
   40cd8:	ldr	r0, [fp, #12]
   40cdc:	cmp	r8, #1
   40ce0:	ldr	r0, [r0]
   40ce4:	blt	40d20 <GetDataSlab+0x14ea4>
   40ce8:	ldr	r2, [sp, #44]	; 0x2c
   40cec:	ldr	ip, [sp, #68]	; 0x44
   40cf0:	add	r5, r2, r3
   40cf4:	add	r3, r4, r2
   40cf8:	add	r4, r4, r0
   40cfc:	ldrsb	r2, [r4], sl
   40d00:	subs	r8, r8, #1
   40d04:	strh	r2, [ip], #2
   40d08:	bne	40cfc <GetDataSlab+0x14e80>
   40d0c:	ldr	ip, [sp, #68]	; 0x44
   40d10:	ldr	r8, [sp, #40]	; 0x28
   40d14:	add	r5, r5, r0
   40d18:	mov	r4, r3
   40d1c:	b	40d28 <GetDataSlab+0x14eac>
   40d20:	ldr	ip, [sp, #68]	; 0x44
   40d24:	add	r5, r0, r3
   40d28:	ldr	r2, [sp, #52]	; 0x34
   40d2c:	sub	r0, r2, r0
   40d30:	add	r4, r4, r2
   40d34:	add	r3, r5, r0
   40d38:	ldr	r0, [fp, #24]
   40d3c:	cmp	r0, #2
   40d40:	blt	40dec <GetDataSlab+0x14f70>
   40d44:	mov	r5, #0
   40d48:	ldr	r2, [r1, r5, lsl #2]
   40d4c:	mov	r0, r5
   40d50:	add	r2, r2, #1
   40d54:	str	r2, [r1, r5, lsl #2]
   40d58:	ldr	r5, [lr, r5, lsl #2]
   40d5c:	sdiv	r6, r2, r5
   40d60:	mls	r2, r6, r5, r2
   40d64:	cmp	r2, #0
   40d68:	bne	40ddc <GetDataSlab+0x14f60>
   40d6c:	mov	r2, #0
   40d70:	sub	r6, fp, #176	; 0xb0
   40d74:	str	r2, [r1, r0, lsl #2]
   40d78:	add	r2, r6, r0, lsl #2
   40d7c:	ldr	r5, [r2, #4]
   40d80:	sdiv	r2, r3, r5
   40d84:	mls	r2, r2, r5, r3
   40d88:	cmp	r2, #0
   40d8c:	beq	40dac <GetDataSlab+0x14f30>
   40d90:	ldr	r6, [r6, r0, lsl #2]
   40d94:	ldr	r7, [r9, r0, lsl #2]
   40d98:	sub	r2, r5, r2
   40d9c:	mla	r2, r7, r6, r2
   40da0:	add	r3, r2, r3
   40da4:	add	r4, r4, r2
   40da8:	b	40dc4 <GetDataSlab+0x14f48>
   40dac:	ldr	r2, [r9, r0, lsl #2]
   40db0:	cmp	r2, #0
   40db4:	subne	r5, fp, #176	; 0xb0
   40db8:	ldrne	r7, [r5, r0, lsl #2]
   40dbc:	mlane	r3, r7, r2, r3
   40dc0:	mlane	r4, r7, r2, r4
   40dc4:	ldr	r2, [fp, #24]
   40dc8:	add	r5, r0, #1
   40dcc:	add	r0, r0, #2
   40dd0:	cmp	r0, r2
   40dd4:	blt	40d48 <GetDataSlab+0x14ecc>
   40dd8:	b	40dec <GetDataSlab+0x14f70>
   40ddc:	ldr	r2, [sp, #36]	; 0x24
   40de0:	ldr	r0, [r2, r0, lsl #2]
   40de4:	add	r4, r4, r0
   40de8:	add	r3, r0, r3
   40dec:	ldr	r7, [sp, #56]	; 0x38
   40df0:	ldr	r0, [sp, #48]	; 0x30
   40df4:	ldr	r2, [sp, #60]	; 0x3c
   40df8:	add	r7, r7, r8
   40dfc:	add	ip, ip, r0
   40e00:	mov	r0, #0
   40e04:	cmp	r7, r2
   40e08:	str	ip, [sp, #68]	; 0x44
   40e0c:	str	r7, [sp, #56]	; 0x38
   40e10:	blt	40cd8 <GetDataSlab+0x14e5c>
   40e14:	b	2e97c <GetDataSlab+0x2b00>
   40e18:	ldr	r3, [fp, #16]
   40e1c:	cmp	r9, #13
   40e20:	bne	2e97c <GetDataSlab+0x2b00>
   40e24:	b	48334 <GetDataSlab+0x1c4b8>
   40e28:	ldr	r0, [sp, #60]	; 0x3c
   40e2c:	cmp	r0, #1
   40e30:	blt	51d64 <GetDataSlab+0x25ee8>
   40e34:	ldr	r0, [fp, #20]
   40e38:	ldr	lr, [fp, #16]
   40e3c:	add	ip, r0, #4
   40e40:	sub	r0, fp, #136	; 0x88
   40e44:	orr	r9, r0, #4
   40e48:	sub	r0, fp, #96	; 0x60
   40e4c:	orr	r0, r0, #4
   40e50:	str	r0, [sp, #44]	; 0x2c
   40e54:	ldr	r0, [r8], #4
   40e58:	str	r0, [sp, #48]	; 0x30
   40e5c:	mov	r0, #0
   40e60:	str	r0, [sp, #56]	; 0x38
   40e64:	ldr	r1, [sp, #48]	; 0x30
   40e68:	cmp	r2, #1
   40e6c:	add	r0, r1, r5
   40e70:	add	r3, sl, r1
   40e74:	blt	40ec8 <GetDataSlab+0x1504c>
   40e78:	ldr	r1, [sp, #68]	; 0x44
   40e7c:	ldr	r2, [sp, #56]	; 0x38
   40e80:	ldr	r6, [fp, #20]
   40e84:	mov	r7, #0
   40e88:	add	r5, r1, r2, lsl #2
   40e8c:	ldrsb	r1, [r3]
   40e90:	str	r1, [r5, r7, lsl #2]
   40e94:	add	r7, r7, #1
   40e98:	ldr	r4, [lr]
   40e9c:	ldr	r2, [r6]
   40ea0:	add	r0, r4, r0
   40ea4:	add	r3, r3, r4
   40ea8:	cmp	r7, r2
   40eac:	blt	40e8c <GetDataSlab+0x15010>
   40eb0:	ldr	r1, [fp, #12]
   40eb4:	sub	r6, fp, #176	; 0xb0
   40eb8:	ldr	r5, [r1]
   40ebc:	ldr	r1, [fp, #8]
   40ec0:	ldr	r1, [r1]
   40ec4:	b	40ed4 <GetDataSlab+0x15058>
   40ec8:	mov	r5, r1
   40ecc:	ldr	r1, [sp, #52]	; 0x34
   40ed0:	sub	r6, fp, #176	; 0xb0
   40ed4:	str	r1, [sp, #52]	; 0x34
   40ed8:	mls	r1, r4, r2, r1
   40edc:	str	r5, [sp, #48]	; 0x30
   40ee0:	sub	r1, r1, r5
   40ee4:	add	r5, r1, r0
   40ee8:	ldr	r0, [fp, #24]
   40eec:	add	sl, r3, r1
   40ef0:	cmp	r0, #2
   40ef4:	blt	40fa0 <GetDataSlab+0x15124>
   40ef8:	mov	r7, #0
   40efc:	ldr	r1, [r9, r7, lsl #2]
   40f00:	mov	r0, r7
   40f04:	add	r1, r1, #1
   40f08:	str	r1, [r9, r7, lsl #2]
   40f0c:	ldr	r3, [ip, r7, lsl #2]
   40f10:	sdiv	r7, r1, r3
   40f14:	mls	r1, r7, r3, r1
   40f18:	cmp	r1, #0
   40f1c:	bne	40f90 <GetDataSlab+0x15114>
   40f20:	mov	r1, #0
   40f24:	str	r1, [r9, r0, lsl #2]
   40f28:	add	r1, r6, r0, lsl #2
   40f2c:	ldr	r7, [r1, #4]
   40f30:	sdiv	r1, r5, r7
   40f34:	mls	r1, r1, r7, r5
   40f38:	cmp	r1, #0
   40f3c:	beq	40f64 <GetDataSlab+0x150e8>
   40f40:	ldr	r3, [r6, r0, lsl #2]
   40f44:	ldr	lr, [r8, r0, lsl #2]
   40f48:	sub	r1, r7, r1
   40f4c:	sub	r6, fp, #176	; 0xb0
   40f50:	mla	r1, lr, r3, r1
   40f54:	ldr	lr, [fp, #16]
   40f58:	add	r5, r1, r5
   40f5c:	add	sl, sl, r1
   40f60:	b	40f78 <GetDataSlab+0x150fc>
   40f64:	ldr	r1, [r8, r0, lsl #2]
   40f68:	cmp	r1, #0
   40f6c:	ldrne	r3, [r6, r0, lsl #2]
   40f70:	mlane	r5, r3, r1, r5
   40f74:	mlane	sl, r3, r1, sl
   40f78:	ldr	r1, [fp, #24]
   40f7c:	add	r7, r0, #1
   40f80:	add	r0, r0, #2
   40f84:	cmp	r0, r1
   40f88:	blt	40efc <GetDataSlab+0x15080>
   40f8c:	b	40fa0 <GetDataSlab+0x15124>
   40f90:	ldr	r1, [sp, #44]	; 0x2c
   40f94:	ldr	r0, [r1, r0, lsl #2]
   40f98:	add	sl, sl, r0
   40f9c:	add	r5, r0, r5
   40fa0:	ldr	r3, [sp, #56]	; 0x38
   40fa4:	ldr	r1, [sp, #60]	; 0x3c
   40fa8:	mov	r0, #0
   40fac:	add	r3, r2, r3
   40fb0:	cmp	r3, r1
   40fb4:	str	r3, [sp, #56]	; 0x38
   40fb8:	blt	40e64 <GetDataSlab+0x14fe8>
   40fbc:	b	2e97c <GetDataSlab+0x2b00>
   40fc0:	ldr	r3, [fp, #16]
   40fc4:	cmp	r9, #13
   40fc8:	bne	2e97c <GetDataSlab+0x2b00>
   40fcc:	b	49358 <GetDataSlab+0x1d4dc>
   40fd0:	ldr	r0, [sp, #60]	; 0x3c
   40fd4:	cmp	r0, #1
   40fd8:	blt	51d78 <GetDataSlab+0x25efc>
   40fdc:	ldr	r0, [fp, #20]
   40fe0:	ldr	lr, [fp, #16]
   40fe4:	add	ip, r0, #4
   40fe8:	sub	r0, fp, #136	; 0x88
   40fec:	orr	r9, r0, #4
   40ff0:	sub	r0, fp, #96	; 0x60
   40ff4:	orr	r0, r0, #4
   40ff8:	str	r0, [sp, #44]	; 0x2c
   40ffc:	ldr	r0, [r8], #4
   41000:	str	r0, [sp, #48]	; 0x30
   41004:	mov	r0, #0
   41008:	str	r0, [sp, #56]	; 0x38
   4100c:	ldr	r1, [sp, #48]	; 0x30
   41010:	cmp	r2, #1
   41014:	add	r0, r1, r5
   41018:	add	r3, sl, r1
   4101c:	blt	41070 <GetDataSlab+0x151f4>
   41020:	ldr	r1, [sp, #68]	; 0x44
   41024:	ldr	r2, [sp, #56]	; 0x38
   41028:	ldr	r6, [fp, #20]
   4102c:	mov	r7, #0
   41030:	add	r5, r1, r2, lsl #2
   41034:	ldrsb	r1, [r3]
   41038:	str	r1, [r5, r7, lsl #2]
   4103c:	add	r7, r7, #1
   41040:	ldr	r4, [lr]
   41044:	ldr	r2, [r6]
   41048:	add	r0, r4, r0
   4104c:	add	r3, r3, r4
   41050:	cmp	r7, r2
   41054:	blt	41034 <GetDataSlab+0x151b8>
   41058:	ldr	r1, [fp, #12]
   4105c:	sub	r6, fp, #176	; 0xb0
   41060:	ldr	r5, [r1]
   41064:	ldr	r1, [fp, #8]
   41068:	ldr	r1, [r1]
   4106c:	b	4107c <GetDataSlab+0x15200>
   41070:	mov	r5, r1
   41074:	ldr	r1, [sp, #52]	; 0x34
   41078:	sub	r6, fp, #176	; 0xb0
   4107c:	str	r1, [sp, #52]	; 0x34
   41080:	mls	r1, r4, r2, r1
   41084:	str	r5, [sp, #48]	; 0x30
   41088:	sub	r1, r1, r5
   4108c:	add	r5, r1, r0
   41090:	ldr	r0, [fp, #24]
   41094:	add	sl, r3, r1
   41098:	cmp	r0, #2
   4109c:	blt	41148 <GetDataSlab+0x152cc>
   410a0:	mov	r7, #0
   410a4:	ldr	r1, [r9, r7, lsl #2]
   410a8:	mov	r0, r7
   410ac:	add	r1, r1, #1
   410b0:	str	r1, [r9, r7, lsl #2]
   410b4:	ldr	r3, [ip, r7, lsl #2]
   410b8:	sdiv	r7, r1, r3
   410bc:	mls	r1, r7, r3, r1
   410c0:	cmp	r1, #0
   410c4:	bne	41138 <GetDataSlab+0x152bc>
   410c8:	mov	r1, #0
   410cc:	str	r1, [r9, r0, lsl #2]
   410d0:	add	r1, r6, r0, lsl #2
   410d4:	ldr	r7, [r1, #4]
   410d8:	sdiv	r1, r5, r7
   410dc:	mls	r1, r1, r7, r5
   410e0:	cmp	r1, #0
   410e4:	beq	4110c <GetDataSlab+0x15290>
   410e8:	ldr	r3, [r6, r0, lsl #2]
   410ec:	ldr	lr, [r8, r0, lsl #2]
   410f0:	sub	r1, r7, r1
   410f4:	sub	r6, fp, #176	; 0xb0
   410f8:	mla	r1, lr, r3, r1
   410fc:	ldr	lr, [fp, #16]
   41100:	add	r5, r1, r5
   41104:	add	sl, sl, r1
   41108:	b	41120 <GetDataSlab+0x152a4>
   4110c:	ldr	r1, [r8, r0, lsl #2]
   41110:	cmp	r1, #0
   41114:	ldrne	r3, [r6, r0, lsl #2]
   41118:	mlane	r5, r3, r1, r5
   4111c:	mlane	sl, r3, r1, sl
   41120:	ldr	r1, [fp, #24]
   41124:	add	r7, r0, #1
   41128:	add	r0, r0, #2
   4112c:	cmp	r0, r1
   41130:	blt	410a4 <GetDataSlab+0x15228>
   41134:	b	41148 <GetDataSlab+0x152cc>
   41138:	ldr	r1, [sp, #44]	; 0x2c
   4113c:	ldr	r0, [r1, r0, lsl #2]
   41140:	add	sl, sl, r0
   41144:	add	r5, r0, r5
   41148:	ldr	r3, [sp, #56]	; 0x38
   4114c:	ldr	r1, [sp, #60]	; 0x3c
   41150:	mov	r0, #0
   41154:	add	r3, r2, r3
   41158:	cmp	r3, r1
   4115c:	str	r3, [sp, #56]	; 0x38
   41160:	blt	4100c <GetDataSlab+0x15190>
   41164:	b	2e97c <GetDataSlab+0x2b00>
   41168:	ldr	r0, [sp, #60]	; 0x3c
   4116c:	ldr	r9, [sp, #52]	; 0x34
   41170:	cmp	r0, #1
   41174:	blt	51d8c <GetDataSlab+0x25f10>
   41178:	ldr	r0, [sp, #40]	; 0x28
   4117c:	mls	r0, r9, r8, r0
   41180:	str	r0, [sp, #48]	; 0x30
   41184:	mul	r0, r9, r8
   41188:	str	r0, [sp, #40]	; 0x28
   4118c:	ldr	r0, [fp, #12]
   41190:	add	lr, r0, #4
   41194:	ldr	r0, [fp, #20]
   41198:	add	sl, r0, #4
   4119c:	sub	r0, fp, #136	; 0x88
   411a0:	orr	r1, r0, #4
   411a4:	orr	r0, r2, #4
   411a8:	str	r0, [sp, #36]	; 0x24
   411ac:	lsl	r0, r9, #3
   411b0:	str	r0, [sp, #44]	; 0x2c
   411b4:	mov	r0, #0
   411b8:	str	r0, [sp, #56]	; 0x38
   411bc:	ldr	r0, [fp, #12]
   411c0:	cmp	r9, #1
   411c4:	ldr	r0, [r0]
   411c8:	blt	41204 <GetDataSlab+0x15388>
   411cc:	ldr	r2, [sp, #40]	; 0x28
   411d0:	ldr	ip, [sp, #68]	; 0x44
   411d4:	add	r6, r4, r2
   411d8:	add	r5, r2, r5
   411dc:	add	r4, r4, r0
   411e0:	ldrsb	r2, [r4], r8
   411e4:	subs	r9, r9, #1
   411e8:	asr	r3, r2, #31
   411ec:	strd	r2, [ip]
   411f0:	add	ip, ip, #8
   411f4:	bne	411e0 <GetDataSlab+0x15364>
   411f8:	add	r5, r5, r0
   411fc:	mov	r4, r6
   41200:	b	41208 <GetDataSlab+0x1538c>
   41204:	add	r5, r0, r5
   41208:	ldr	r2, [sp, #48]	; 0x30
   4120c:	ldr	ip, [sp, #68]	; 0x44
   41210:	mov	r9, #0
   41214:	sub	r0, r2, r0
   41218:	add	r4, r4, r2
   4121c:	add	r5, r5, r0
   41220:	ldr	r0, [fp, #24]
   41224:	cmp	r0, #2
   41228:	blt	412d0 <GetDataSlab+0x15454>
   4122c:	mov	r2, #0
   41230:	mov	r0, r2
   41234:	ldr	r2, [r1, r2, lsl #2]
   41238:	add	r2, r2, #1
   4123c:	str	r2, [r1, r0, lsl #2]
   41240:	ldr	r3, [sl, r0, lsl #2]
   41244:	sdiv	r6, r2, r3
   41248:	mls	r2, r6, r3, r2
   4124c:	cmp	r2, #0
   41250:	bne	412c0 <GetDataSlab+0x15444>
   41254:	sub	r6, fp, #176	; 0xb0
   41258:	str	r9, [r1, r0, lsl #2]
   4125c:	add	r2, r6, r0, lsl #2
   41260:	ldr	r2, [r2, #4]
   41264:	sdiv	r3, r5, r2
   41268:	mls	r3, r3, r2, r5
   4126c:	cmp	r3, #0
   41270:	beq	41290 <GetDataSlab+0x15414>
   41274:	ldr	r6, [r6, r0, lsl #2]
   41278:	ldr	r7, [lr, r0, lsl #2]
   4127c:	sub	r2, r2, r3
   41280:	mla	r2, r7, r6, r2
   41284:	add	r5, r2, r5
   41288:	add	r4, r4, r2
   4128c:	b	412a8 <GetDataSlab+0x1542c>
   41290:	ldr	r2, [lr, r0, lsl #2]
   41294:	cmp	r2, #0
   41298:	subne	r3, fp, #176	; 0xb0
   4129c:	ldrne	r3, [r3, r0, lsl #2]
   412a0:	mlane	r5, r3, r2, r5
   412a4:	mlane	r4, r3, r2, r4
   412a8:	ldr	r3, [fp, #24]
   412ac:	add	r2, r0, #1
   412b0:	add	r0, r0, #2
   412b4:	cmp	r0, r3
   412b8:	blt	41230 <GetDataSlab+0x153b4>
   412bc:	b	412d0 <GetDataSlab+0x15454>
   412c0:	ldr	r2, [sp, #36]	; 0x24
   412c4:	ldr	r0, [r2, r0, lsl #2]
   412c8:	add	r4, r4, r0
   412cc:	add	r5, r0, r5
   412d0:	ldr	r9, [sp, #52]	; 0x34
   412d4:	ldr	r3, [sp, #56]	; 0x38
   412d8:	ldr	r0, [sp, #44]	; 0x2c
   412dc:	ldr	r2, [sp, #60]	; 0x3c
   412e0:	add	r3, r3, r9
   412e4:	add	ip, ip, r0
   412e8:	mov	r0, #0
   412ec:	cmp	r3, r2
   412f0:	str	ip, [sp, #68]	; 0x44
   412f4:	str	r3, [sp, #56]	; 0x38
   412f8:	blt	411bc <GetDataSlab+0x15340>
   412fc:	b	2e97c <GetDataSlab+0x2b00>
   41300:	ldr	r0, [sp, #60]	; 0x3c
   41304:	ldr	r9, [sp, #44]	; 0x2c
   41308:	cmp	r0, #1
   4130c:	blt	51da0 <GetDataSlab+0x25f24>
   41310:	ldr	r0, [sp, #36]	; 0x24
   41314:	mls	r0, r9, r8, r0
   41318:	str	r0, [sp, #52]	; 0x34
   4131c:	mul	r0, r9, r8
   41320:	str	r0, [sp, #40]	; 0x28
   41324:	ldr	r0, [fp, #12]
   41328:	add	lr, r0, #4
   4132c:	ldr	r0, [fp, #20]
   41330:	add	sl, r0, #4
   41334:	sub	r0, fp, #136	; 0x88
   41338:	orr	r1, r0, #4
   4133c:	sub	r0, fp, #96	; 0x60
   41340:	orr	r0, r0, #4
   41344:	str	r0, [sp, #36]	; 0x24
   41348:	lsl	r0, r9, #3
   4134c:	str	r0, [sp, #48]	; 0x30
   41350:	mov	r0, #0
   41354:	str	r0, [sp, #56]	; 0x38
   41358:	ldr	r0, [fp, #12]
   4135c:	cmp	r9, #1
   41360:	ldr	r0, [r0]
   41364:	blt	413a0 <GetDataSlab+0x15524>
   41368:	ldr	r2, [sp, #40]	; 0x28
   4136c:	ldr	ip, [sp, #68]	; 0x44
   41370:	add	r6, r4, r2
   41374:	add	r5, r2, r3
   41378:	add	r4, r4, r0
   4137c:	ldrsb	r2, [r4], r8
   41380:	subs	r9, r9, #1
   41384:	asr	r3, r2, #31
   41388:	strd	r2, [ip]
   4138c:	add	ip, ip, #8
   41390:	bne	4137c <GetDataSlab+0x15500>
   41394:	add	r5, r5, r0
   41398:	mov	r4, r6
   4139c:	b	413a4 <GetDataSlab+0x15528>
   413a0:	add	r5, r0, r3
   413a4:	ldr	r2, [sp, #52]	; 0x34
   413a8:	ldr	ip, [sp, #68]	; 0x44
   413ac:	mov	r9, #0
   413b0:	sub	r0, r2, r0
   413b4:	add	r4, r4, r2
   413b8:	add	r3, r5, r0
   413bc:	ldr	r0, [fp, #24]
   413c0:	cmp	r0, #2
   413c4:	blt	4146c <GetDataSlab+0x155f0>
   413c8:	mov	r5, #0
   413cc:	ldr	r2, [r1, r5, lsl #2]
   413d0:	mov	r0, r5
   413d4:	add	r2, r2, #1
   413d8:	str	r2, [r1, r5, lsl #2]
   413dc:	ldr	r5, [sl, r5, lsl #2]
   413e0:	sdiv	r6, r2, r5
   413e4:	mls	r2, r6, r5, r2
   413e8:	cmp	r2, #0
   413ec:	bne	4145c <GetDataSlab+0x155e0>
   413f0:	sub	r6, fp, #176	; 0xb0
   413f4:	str	r9, [r1, r0, lsl #2]
   413f8:	add	r2, r6, r0, lsl #2
   413fc:	ldr	r5, [r2, #4]
   41400:	sdiv	r2, r3, r5
   41404:	mls	r2, r2, r5, r3
   41408:	cmp	r2, #0
   4140c:	beq	4142c <GetDataSlab+0x155b0>
   41410:	ldr	r6, [r6, r0, lsl #2]
   41414:	ldr	r7, [lr, r0, lsl #2]
   41418:	sub	r2, r5, r2
   4141c:	mla	r2, r7, r6, r2
   41420:	add	r3, r2, r3
   41424:	add	r4, r4, r2
   41428:	b	41444 <GetDataSlab+0x155c8>
   4142c:	ldr	r2, [lr, r0, lsl #2]
   41430:	cmp	r2, #0
   41434:	subne	r5, fp, #176	; 0xb0
   41438:	ldrne	r7, [r5, r0, lsl #2]
   4143c:	mlane	r3, r7, r2, r3
   41440:	mlane	r4, r7, r2, r4
   41444:	ldr	r2, [fp, #24]
   41448:	add	r5, r0, #1
   4144c:	add	r0, r0, #2
   41450:	cmp	r0, r2
   41454:	blt	413cc <GetDataSlab+0x15550>
   41458:	b	4146c <GetDataSlab+0x155f0>
   4145c:	ldr	r2, [sp, #36]	; 0x24
   41460:	ldr	r0, [r2, r0, lsl #2]
   41464:	add	r4, r4, r0
   41468:	add	r3, r0, r3
   4146c:	ldr	r9, [sp, #44]	; 0x2c
   41470:	ldr	r7, [sp, #56]	; 0x38
   41474:	ldr	r0, [sp, #48]	; 0x30
   41478:	ldr	r2, [sp, #60]	; 0x3c
   4147c:	add	r7, r7, r9
   41480:	add	ip, ip, r0
   41484:	mov	r0, #0
   41488:	cmp	r7, r2
   4148c:	str	ip, [sp, #68]	; 0x44
   41490:	str	r7, [sp, #56]	; 0x38
   41494:	blt	41358 <GetDataSlab+0x154dc>
   41498:	b	2e97c <GetDataSlab+0x2b00>
   4149c:	ldr	r0, [sp, #60]	; 0x3c
   414a0:	ldr	r9, [sp, #52]	; 0x34
   414a4:	cmp	r0, #1
   414a8:	blt	51db4 <GetDataSlab+0x25f38>
   414ac:	ldr	r0, [sp, #40]	; 0x28
   414b0:	mls	r0, r9, r8, r0
   414b4:	str	r0, [sp, #48]	; 0x30
   414b8:	mul	r0, r9, r8
   414bc:	str	r0, [sp, #40]	; 0x28
   414c0:	ldr	r0, [fp, #12]
   414c4:	add	lr, r0, #4
   414c8:	ldr	r0, [fp, #20]
   414cc:	add	sl, r0, #4
   414d0:	sub	r0, fp, #136	; 0x88
   414d4:	orr	r1, r0, #4
   414d8:	orr	r0, r2, #4
   414dc:	str	r0, [sp, #36]	; 0x24
   414e0:	lsl	r0, r9, #3
   414e4:	str	r0, [sp, #44]	; 0x2c
   414e8:	mov	r0, #0
   414ec:	str	r0, [sp, #56]	; 0x38
   414f0:	ldr	r0, [fp, #12]
   414f4:	cmp	r9, #1
   414f8:	ldr	r0, [r0]
   414fc:	blt	4153c <GetDataSlab+0x156c0>
   41500:	ldr	r2, [sp, #40]	; 0x28
   41504:	ldr	ip, [sp, #68]	; 0x44
   41508:	add	r5, r2, r5
   4150c:	add	r2, r4, r2
   41510:	add	r4, r4, r0
   41514:	ldrb	r3, [r4], r8
   41518:	subs	r9, r9, #1
   4151c:	vmov	s0, r3
   41520:	vcvt.f64.u32	d16, s0
   41524:	vstr	d16, [ip]
   41528:	add	ip, ip, #8
   4152c:	bne	41514 <GetDataSlab+0x15698>
   41530:	add	r5, r5, r0
   41534:	mov	r4, r2
   41538:	b	41540 <GetDataSlab+0x156c4>
   4153c:	add	r5, r0, r5
   41540:	ldr	r2, [sp, #48]	; 0x30
   41544:	ldr	ip, [sp, #68]	; 0x44
   41548:	mov	r9, #0
   4154c:	sub	r0, r2, r0
   41550:	add	r4, r4, r2
   41554:	add	r5, r5, r0
   41558:	ldr	r0, [fp, #24]
   4155c:	cmp	r0, #2
   41560:	blt	41608 <GetDataSlab+0x1578c>
   41564:	mov	r2, #0
   41568:	mov	r0, r2
   4156c:	ldr	r2, [r1, r2, lsl #2]
   41570:	add	r2, r2, #1
   41574:	str	r2, [r1, r0, lsl #2]
   41578:	ldr	r3, [sl, r0, lsl #2]
   4157c:	sdiv	r6, r2, r3
   41580:	mls	r2, r6, r3, r2
   41584:	cmp	r2, #0
   41588:	bne	415f8 <GetDataSlab+0x1577c>
   4158c:	sub	r6, fp, #176	; 0xb0
   41590:	str	r9, [r1, r0, lsl #2]
   41594:	add	r2, r6, r0, lsl #2
   41598:	ldr	r2, [r2, #4]
   4159c:	sdiv	r3, r5, r2
   415a0:	mls	r3, r3, r2, r5
   415a4:	cmp	r3, #0
   415a8:	beq	415c8 <GetDataSlab+0x1574c>
   415ac:	ldr	r6, [r6, r0, lsl #2]
   415b0:	ldr	r7, [lr, r0, lsl #2]
   415b4:	sub	r2, r2, r3
   415b8:	mla	r2, r7, r6, r2
   415bc:	add	r5, r2, r5
   415c0:	add	r4, r4, r2
   415c4:	b	415e0 <GetDataSlab+0x15764>
   415c8:	ldr	r2, [lr, r0, lsl #2]
   415cc:	cmp	r2, #0
   415d0:	subne	r3, fp, #176	; 0xb0
   415d4:	ldrne	r3, [r3, r0, lsl #2]
   415d8:	mlane	r5, r3, r2, r5
   415dc:	mlane	r4, r3, r2, r4
   415e0:	ldr	r3, [fp, #24]
   415e4:	add	r2, r0, #1
   415e8:	add	r0, r0, #2
   415ec:	cmp	r0, r3
   415f0:	blt	41568 <GetDataSlab+0x156ec>
   415f4:	b	41608 <GetDataSlab+0x1578c>
   415f8:	ldr	r2, [sp, #36]	; 0x24
   415fc:	ldr	r0, [r2, r0, lsl #2]
   41600:	add	r4, r4, r0
   41604:	add	r5, r0, r5
   41608:	ldr	r9, [sp, #52]	; 0x34
   4160c:	ldr	r3, [sp, #56]	; 0x38
   41610:	ldr	r0, [sp, #44]	; 0x2c
   41614:	ldr	r2, [sp, #60]	; 0x3c
   41618:	add	r3, r3, r9
   4161c:	add	ip, ip, r0
   41620:	mov	r0, #0
   41624:	cmp	r3, r2
   41628:	str	ip, [sp, #68]	; 0x44
   4162c:	str	r3, [sp, #56]	; 0x38
   41630:	blt	414f0 <GetDataSlab+0x15674>
   41634:	b	2e97c <GetDataSlab+0x2b00>
   41638:	ldr	r0, [sp, #60]	; 0x3c
   4163c:	ldr	r3, [sp, #52]	; 0x34
   41640:	cmp	r0, #1
   41644:	blt	51dc8 <GetDataSlab+0x25f4c>
   41648:	ldr	r7, [sp, #64]	; 0x40
   4164c:	ldr	r0, [sp, #48]	; 0x30
   41650:	mov	ip, #0
   41654:	mov	r9, #0
   41658:	ldr	r6, [r7], #4
   4165c:	mls	r0, r3, r1, r0
   41660:	sub	r0, r0, r6
   41664:	str	r7, [sp, #64]	; 0x40
   41668:	str	r6, [sp, #56]	; 0x38
   4166c:	str	r0, [sp, #48]	; 0x30
   41670:	ldr	r0, [fp, #20]
   41674:	add	lr, r0, #4
   41678:	sub	r0, fp, #136	; 0x88
   4167c:	orr	r7, r0, #4
   41680:	sub	r0, fp, #96	; 0x60
   41684:	orr	r0, r0, #4
   41688:	str	r0, [sp, #36]	; 0x24
   4168c:	mla	r0, r3, r1, r6
   41690:	lsl	r1, r1, #1
   41694:	str	r0, [sp, #40]	; 0x28
   41698:	lsl	r0, r3, #3
   4169c:	str	r0, [sp, #44]	; 0x2c
   416a0:	ldr	r0, [sp, #56]	; 0x38
   416a4:	cmp	r3, #1
   416a8:	blt	416dc <GetDataSlab+0x15860>
   416ac:	ldr	r0, [sp, #56]	; 0x38
   416b0:	ldr	r3, [sp, #52]	; 0x34
   416b4:	ldr	r6, [sp, #68]	; 0x44
   416b8:	add	r0, sl, r0, lsl #1
   416bc:	ldrsh	r8, [r0], r1
   416c0:	subs	r3, r3, #1
   416c4:	vmov	s0, r8
   416c8:	vcvt.f64.s32	d16, s0
   416cc:	vstr	d16, [r6]
   416d0:	add	r6, r6, #8
   416d4:	bne	416bc <GetDataSlab+0x15840>
   416d8:	ldr	r0, [sp, #40]	; 0x28
   416dc:	ldr	r4, [sp, #48]	; 0x30
   416e0:	add	r3, sl, r4, lsl #1
   416e4:	add	sl, r3, r0, lsl #1
   416e8:	add	r0, r0, r2
   416ec:	add	r2, r0, r4
   416f0:	ldr	r0, [fp, #24]
   416f4:	cmp	r0, #2
   416f8:	blt	417a8 <GetDataSlab+0x1592c>
   416fc:	ldr	r8, [sp, #64]	; 0x40
   41700:	mov	r3, #0
   41704:	mov	r0, r3
   41708:	ldr	r3, [r7, r3, lsl #2]
   4170c:	add	r3, r3, #1
   41710:	str	r3, [r7, r0, lsl #2]
   41714:	ldr	r6, [lr, r0, lsl #2]
   41718:	sdiv	r5, r3, r6
   4171c:	mls	r3, r5, r6, r3
   41720:	cmp	r3, #0
   41724:	bne	41798 <GetDataSlab+0x1591c>
   41728:	sub	r4, fp, #176	; 0xb0
   4172c:	str	ip, [r7, r0, lsl #2]
   41730:	add	r3, r4, r0, lsl #2
   41734:	ldr	r3, [r3, #4]
   41738:	sdiv	r5, r2, r3
   4173c:	mls	r6, r5, r3, r2
   41740:	cmp	r6, #0
   41744:	beq	41760 <GetDataSlab+0x158e4>
   41748:	ldr	r5, [r4, r0, lsl #2]
   4174c:	ldr	r4, [r8, r0, lsl #2]
   41750:	sub	r3, r3, r6
   41754:	mla	r3, r4, r5, r3
   41758:	add	r2, r3, r2
   4175c:	b	4177c <GetDataSlab+0x15900>
   41760:	ldr	r3, [r8, r0, lsl #2]
   41764:	cmp	r3, #0
   41768:	beq	41780 <GetDataSlab+0x15904>
   4176c:	sub	r4, fp, #176	; 0xb0
   41770:	ldr	r4, [r4, r0, lsl #2]
   41774:	mla	r2, r4, r3, r2
   41778:	mul	r3, r4, r3
   4177c:	add	sl, sl, r3, lsl #1
   41780:	ldr	r4, [fp, #24]
   41784:	add	r3, r0, #1
   41788:	add	r0, r0, #2
   4178c:	cmp	r0, r4
   41790:	blt	41704 <GetDataSlab+0x15888>
   41794:	b	417a8 <GetDataSlab+0x1592c>
   41798:	ldr	r3, [sp, #36]	; 0x24
   4179c:	ldr	r0, [r3, r0, lsl #2]
   417a0:	add	sl, sl, r0, lsl #1
   417a4:	add	r2, r0, r2
   417a8:	ldr	r0, [sp, #68]	; 0x44
   417ac:	ldr	r3, [sp, #44]	; 0x2c
   417b0:	ldr	r4, [sp, #60]	; 0x3c
   417b4:	add	r0, r0, r3
   417b8:	ldr	r3, [sp, #52]	; 0x34
   417bc:	str	r0, [sp, #68]	; 0x44
   417c0:	mov	r0, #0
   417c4:	add	r9, r9, r3
   417c8:	cmp	r9, r4
   417cc:	blt	416a0 <GetDataSlab+0x15824>
   417d0:	b	2e97c <GetDataSlab+0x2b00>
   417d4:	ldr	r0, [sp, #60]	; 0x3c
   417d8:	ldr	r3, [sp, #52]	; 0x34
   417dc:	cmp	r0, #1
   417e0:	blt	51ddc <GetDataSlab+0x25f60>
   417e4:	ldr	r7, [sp, #64]	; 0x40
   417e8:	ldr	r0, [sp, #48]	; 0x30
   417ec:	mov	ip, #0
   417f0:	mov	r9, #0
   417f4:	ldr	r6, [r7], #4
   417f8:	mls	r0, r3, r1, r0
   417fc:	sub	r0, r0, r6
   41800:	str	r7, [sp, #64]	; 0x40
   41804:	str	r6, [sp, #56]	; 0x38
   41808:	str	r0, [sp, #48]	; 0x30
   4180c:	ldr	r0, [fp, #20]
   41810:	add	lr, r0, #4
   41814:	sub	r0, fp, #136	; 0x88
   41818:	orr	r7, r0, #4
   4181c:	sub	r0, fp, #96	; 0x60
   41820:	orr	r0, r0, #4
   41824:	str	r0, [sp, #36]	; 0x24
   41828:	mla	r0, r3, r1, r6
   4182c:	lsl	r1, r1, #1
   41830:	str	r0, [sp, #40]	; 0x28
   41834:	lsl	r0, r3, #3
   41838:	str	r0, [sp, #44]	; 0x2c
   4183c:	ldr	r0, [sp, #56]	; 0x38
   41840:	cmp	r3, #1
   41844:	blt	41878 <GetDataSlab+0x159fc>
   41848:	ldr	r0, [sp, #56]	; 0x38
   4184c:	ldr	r3, [sp, #52]	; 0x34
   41850:	ldr	r6, [sp, #68]	; 0x44
   41854:	add	r0, sl, r0, lsl #1
   41858:	ldrh	r8, [r0], r1
   4185c:	subs	r3, r3, #1
   41860:	vmov	s0, r8
   41864:	vcvt.f64.u32	d16, s0
   41868:	vstr	d16, [r6]
   4186c:	add	r6, r6, #8
   41870:	bne	41858 <GetDataSlab+0x159dc>
   41874:	ldr	r0, [sp, #40]	; 0x28
   41878:	ldr	r4, [sp, #48]	; 0x30
   4187c:	add	r3, sl, r4, lsl #1
   41880:	add	sl, r3, r0, lsl #1
   41884:	add	r0, r0, r2
   41888:	add	r2, r0, r4
   4188c:	ldr	r0, [fp, #24]
   41890:	cmp	r0, #2
   41894:	blt	41944 <GetDataSlab+0x15ac8>
   41898:	ldr	r8, [sp, #64]	; 0x40
   4189c:	mov	r3, #0
   418a0:	mov	r0, r3
   418a4:	ldr	r3, [r7, r3, lsl #2]
   418a8:	add	r3, r3, #1
   418ac:	str	r3, [r7, r0, lsl #2]
   418b0:	ldr	r6, [lr, r0, lsl #2]
   418b4:	sdiv	r5, r3, r6
   418b8:	mls	r3, r5, r6, r3
   418bc:	cmp	r3, #0
   418c0:	bne	41934 <GetDataSlab+0x15ab8>
   418c4:	sub	r4, fp, #176	; 0xb0
   418c8:	str	ip, [r7, r0, lsl #2]
   418cc:	add	r3, r4, r0, lsl #2
   418d0:	ldr	r3, [r3, #4]
   418d4:	sdiv	r5, r2, r3
   418d8:	mls	r6, r5, r3, r2
   418dc:	cmp	r6, #0
   418e0:	beq	418fc <GetDataSlab+0x15a80>
   418e4:	ldr	r5, [r4, r0, lsl #2]
   418e8:	ldr	r4, [r8, r0, lsl #2]
   418ec:	sub	r3, r3, r6
   418f0:	mla	r3, r4, r5, r3
   418f4:	add	r2, r3, r2
   418f8:	b	41918 <GetDataSlab+0x15a9c>
   418fc:	ldr	r3, [r8, r0, lsl #2]
   41900:	cmp	r3, #0
   41904:	beq	4191c <GetDataSlab+0x15aa0>
   41908:	sub	r4, fp, #176	; 0xb0
   4190c:	ldr	r4, [r4, r0, lsl #2]
   41910:	mla	r2, r4, r3, r2
   41914:	mul	r3, r4, r3
   41918:	add	sl, sl, r3, lsl #1
   4191c:	ldr	r4, [fp, #24]
   41920:	add	r3, r0, #1
   41924:	add	r0, r0, #2
   41928:	cmp	r0, r4
   4192c:	blt	418a0 <GetDataSlab+0x15a24>
   41930:	b	41944 <GetDataSlab+0x15ac8>
   41934:	ldr	r3, [sp, #36]	; 0x24
   41938:	ldr	r0, [r3, r0, lsl #2]
   4193c:	add	sl, sl, r0, lsl #1
   41940:	add	r2, r0, r2
   41944:	ldr	r0, [sp, #68]	; 0x44
   41948:	ldr	r3, [sp, #44]	; 0x2c
   4194c:	ldr	r4, [sp, #60]	; 0x3c
   41950:	add	r0, r0, r3
   41954:	ldr	r3, [sp, #52]	; 0x34
   41958:	str	r0, [sp, #68]	; 0x44
   4195c:	mov	r0, #0
   41960:	add	r9, r9, r3
   41964:	cmp	r9, r4
   41968:	blt	4183c <GetDataSlab+0x159c0>
   4196c:	b	2e97c <GetDataSlab+0x2b00>
   41970:	ldr	r1, [sp, #60]	; 0x3c
   41974:	ldr	r2, [sp, #48]	; 0x30
   41978:	cmp	r1, #1
   4197c:	sub	r1, fp, #96	; 0x60
   41980:	blt	51df0 <GetDataSlab+0x25f74>
   41984:	add	r9, r0, #4
   41988:	ldr	r0, [fp, #20]
   4198c:	ldr	r7, [sp, #44]	; 0x2c
   41990:	mov	r8, #0
   41994:	add	ip, r0, #4
   41998:	sub	r0, fp, #136	; 0x88
   4199c:	mls	r7, r2, r6, r7
   419a0:	orr	r5, r0, #4
   419a4:	orr	r0, r1, #4
   419a8:	lsl	r1, r6, #2
   419ac:	str	r7, [sp, #56]	; 0x38
   419b0:	str	r0, [sp, #40]	; 0x28
   419b4:	mul	r0, r2, r6
   419b8:	str	r0, [sp, #44]	; 0x2c
   419bc:	lsl	r0, r2, #3
   419c0:	str	r0, [sp, #52]	; 0x34
   419c4:	ldr	r0, [fp, #12]
   419c8:	cmp	r2, #1
   419cc:	ldr	r0, [r0]
   419d0:	blt	41a10 <GetDataSlab+0x15b94>
   419d4:	ldr	r7, [sp, #44]	; 0x2c
   419d8:	ldr	lr, [sp, #68]	; 0x44
   419dc:	add	r4, sl, r0, lsl #2
   419e0:	add	r3, r7, r3
   419e4:	add	r6, sl, r7, lsl #2
   419e8:	ldr	r7, [r4], r1
   419ec:	subs	r2, r2, #1
   419f0:	vmov	s0, r7
   419f4:	vcvt.f64.s32	d16, s0
   419f8:	vstr	d16, [lr]
   419fc:	add	lr, lr, #8
   41a00:	bne	419e8 <GetDataSlab+0x15b6c>
   41a04:	add	r2, r3, r0
   41a08:	mov	sl, r6
   41a0c:	b	41a14 <GetDataSlab+0x15b98>
   41a10:	add	r2, r0, r3
   41a14:	ldr	r3, [sp, #56]	; 0x38
   41a18:	sub	lr, fp, #176	; 0xb0
   41a1c:	sub	r0, r3, r0
   41a20:	add	sl, sl, r3, lsl #2
   41a24:	add	r3, r2, r0
   41a28:	ldr	r0, [fp, #24]
   41a2c:	cmp	r0, #2
   41a30:	blt	41ad8 <GetDataSlab+0x15c5c>
   41a34:	mov	r2, #0
   41a38:	mov	r0, r2
   41a3c:	ldr	r2, [r5, r2, lsl #2]
   41a40:	add	r2, r2, #1
   41a44:	str	r2, [r5, r0, lsl #2]
   41a48:	ldr	r7, [ip, r0, lsl #2]
   41a4c:	sdiv	r6, r2, r7
   41a50:	mls	r2, r6, r7, r2
   41a54:	cmp	r2, #0
   41a58:	bne	41ac8 <GetDataSlab+0x15c4c>
   41a5c:	mov	r2, #0
   41a60:	str	r2, [r5, r0, lsl #2]
   41a64:	add	r2, lr, r0, lsl #2
   41a68:	ldr	r2, [r2, #4]
   41a6c:	sdiv	r7, r3, r2
   41a70:	mls	r7, r7, r2, r3
   41a74:	cmp	r7, #0
   41a78:	beq	41a94 <GetDataSlab+0x15c18>
   41a7c:	ldr	r6, [lr, r0, lsl #2]
   41a80:	ldr	r4, [r9, r0, lsl #2]
   41a84:	sub	r2, r2, r7
   41a88:	mla	r2, r4, r6, r2
   41a8c:	add	r3, r2, r3
   41a90:	b	41aac <GetDataSlab+0x15c30>
   41a94:	ldr	r2, [r9, r0, lsl #2]
   41a98:	cmp	r2, #0
   41a9c:	beq	41ab0 <GetDataSlab+0x15c34>
   41aa0:	ldr	r7, [lr, r0, lsl #2]
   41aa4:	mla	r3, r7, r2, r3
   41aa8:	mul	r2, r7, r2
   41aac:	add	sl, sl, r2, lsl #2
   41ab0:	ldr	r7, [fp, #24]
   41ab4:	add	r2, r0, #1
   41ab8:	add	r0, r0, #2
   41abc:	cmp	r0, r7
   41ac0:	blt	41a38 <GetDataSlab+0x15bbc>
   41ac4:	b	41ad8 <GetDataSlab+0x15c5c>
   41ac8:	ldr	r2, [sp, #40]	; 0x28
   41acc:	ldr	r0, [r2, r0, lsl #2]
   41ad0:	add	sl, sl, r0, lsl #2
   41ad4:	add	r3, r0, r3
   41ad8:	ldr	r0, [sp, #68]	; 0x44
   41adc:	ldr	r2, [sp, #52]	; 0x34
   41ae0:	ldr	r7, [sp, #60]	; 0x3c
   41ae4:	add	r0, r0, r2
   41ae8:	ldr	r2, [sp, #48]	; 0x30
   41aec:	str	r0, [sp, #68]	; 0x44
   41af0:	mov	r0, #0
   41af4:	add	r8, r8, r2
   41af8:	cmp	r8, r7
   41afc:	blt	419c4 <GetDataSlab+0x15b48>
   41b00:	b	2e97c <GetDataSlab+0x2b00>
   41b04:	ldr	r1, [sp, #60]	; 0x3c
   41b08:	ldr	r2, [sp, #48]	; 0x30
   41b0c:	cmp	r1, #1
   41b10:	sub	r1, fp, #96	; 0x60
   41b14:	blt	51e04 <GetDataSlab+0x25f88>
   41b18:	add	r9, r0, #4
   41b1c:	ldr	r0, [fp, #20]
   41b20:	ldr	r7, [sp, #44]	; 0x2c
   41b24:	mov	r8, #0
   41b28:	add	ip, r0, #4
   41b2c:	sub	r0, fp, #136	; 0x88
   41b30:	mls	r7, r2, r6, r7
   41b34:	orr	r5, r0, #4
   41b38:	orr	r0, r1, #4
   41b3c:	lsl	r1, r6, #2
   41b40:	str	r7, [sp, #56]	; 0x38
   41b44:	str	r0, [sp, #40]	; 0x28
   41b48:	mul	r0, r2, r6
   41b4c:	str	r0, [sp, #44]	; 0x2c
   41b50:	lsl	r0, r2, #3
   41b54:	str	r0, [sp, #52]	; 0x34
   41b58:	ldr	r0, [fp, #12]
   41b5c:	cmp	r2, #1
   41b60:	ldr	r0, [r0]
   41b64:	blt	41ba4 <GetDataSlab+0x15d28>
   41b68:	ldr	r7, [sp, #44]	; 0x2c
   41b6c:	ldr	lr, [sp, #68]	; 0x44
   41b70:	add	r4, sl, r0, lsl #2
   41b74:	add	r3, r7, r3
   41b78:	add	r6, sl, r7, lsl #2
   41b7c:	ldr	r7, [r4], r1
   41b80:	subs	r2, r2, #1
   41b84:	vmov	s0, r7
   41b88:	vcvt.f64.u32	d16, s0
   41b8c:	vstr	d16, [lr]
   41b90:	add	lr, lr, #8
   41b94:	bne	41b7c <GetDataSlab+0x15d00>
   41b98:	add	r2, r3, r0
   41b9c:	mov	sl, r6
   41ba0:	b	41ba8 <GetDataSlab+0x15d2c>
   41ba4:	add	r2, r0, r3
   41ba8:	ldr	r3, [sp, #56]	; 0x38
   41bac:	sub	lr, fp, #176	; 0xb0
   41bb0:	sub	r0, r3, r0
   41bb4:	add	sl, sl, r3, lsl #2
   41bb8:	add	r3, r2, r0
   41bbc:	ldr	r0, [fp, #24]
   41bc0:	cmp	r0, #2
   41bc4:	blt	41c6c <GetDataSlab+0x15df0>
   41bc8:	mov	r2, #0
   41bcc:	mov	r0, r2
   41bd0:	ldr	r2, [r5, r2, lsl #2]
   41bd4:	add	r2, r2, #1
   41bd8:	str	r2, [r5, r0, lsl #2]
   41bdc:	ldr	r7, [ip, r0, lsl #2]
   41be0:	sdiv	r6, r2, r7
   41be4:	mls	r2, r6, r7, r2
   41be8:	cmp	r2, #0
   41bec:	bne	41c5c <GetDataSlab+0x15de0>
   41bf0:	mov	r2, #0
   41bf4:	str	r2, [r5, r0, lsl #2]
   41bf8:	add	r2, lr, r0, lsl #2
   41bfc:	ldr	r2, [r2, #4]
   41c00:	sdiv	r7, r3, r2
   41c04:	mls	r7, r7, r2, r3
   41c08:	cmp	r7, #0
   41c0c:	beq	41c28 <GetDataSlab+0x15dac>
   41c10:	ldr	r6, [lr, r0, lsl #2]
   41c14:	ldr	r4, [r9, r0, lsl #2]
   41c18:	sub	r2, r2, r7
   41c1c:	mla	r2, r4, r6, r2
   41c20:	add	r3, r2, r3
   41c24:	b	41c40 <GetDataSlab+0x15dc4>
   41c28:	ldr	r2, [r9, r0, lsl #2]
   41c2c:	cmp	r2, #0
   41c30:	beq	41c44 <GetDataSlab+0x15dc8>
   41c34:	ldr	r7, [lr, r0, lsl #2]
   41c38:	mla	r3, r7, r2, r3
   41c3c:	mul	r2, r7, r2
   41c40:	add	sl, sl, r2, lsl #2
   41c44:	ldr	r7, [fp, #24]
   41c48:	add	r2, r0, #1
   41c4c:	add	r0, r0, #2
   41c50:	cmp	r0, r7
   41c54:	blt	41bcc <GetDataSlab+0x15d50>
   41c58:	b	41c6c <GetDataSlab+0x15df0>
   41c5c:	ldr	r2, [sp, #40]	; 0x28
   41c60:	ldr	r0, [r2, r0, lsl #2]
   41c64:	add	sl, sl, r0, lsl #2
   41c68:	add	r3, r0, r3
   41c6c:	ldr	r0, [sp, #68]	; 0x44
   41c70:	ldr	r2, [sp, #52]	; 0x34
   41c74:	ldr	r7, [sp, #60]	; 0x3c
   41c78:	add	r0, r0, r2
   41c7c:	ldr	r2, [sp, #48]	; 0x30
   41c80:	str	r0, [sp, #68]	; 0x44
   41c84:	mov	r0, #0
   41c88:	add	r8, r8, r2
   41c8c:	cmp	r8, r7
   41c90:	blt	41b58 <GetDataSlab+0x15cdc>
   41c94:	b	2e97c <GetDataSlab+0x2b00>
   41c98:	ldr	r0, [sp, #60]	; 0x3c
   41c9c:	ldr	ip, [fp, #12]
   41ca0:	ldr	r3, [sp, #52]	; 0x34
   41ca4:	cmp	r0, #1
   41ca8:	blt	51e18 <GetDataSlab+0x25f9c>
   41cac:	ldr	r0, [sp, #40]	; 0x28
   41cb0:	ldr	r4, [ip], #4
   41cb4:	add	lr, sl, #4
   41cb8:	mov	sl, #0
   41cbc:	mls	r0, r3, r1, r0
   41cc0:	str	r4, [sp, #64]	; 0x40
   41cc4:	sub	r0, r0, r4
   41cc8:	str	r0, [sp, #56]	; 0x38
   41ccc:	sub	r0, fp, #136	; 0x88
   41cd0:	orr	r7, r0, #4
   41cd4:	sub	r0, fp, #96	; 0x60
   41cd8:	orr	r0, r0, #4
   41cdc:	str	r0, [sp, #40]	; 0x28
   41ce0:	mla	r0, r3, r1, r4
   41ce4:	lsl	r1, r1, #2
   41ce8:	str	r0, [sp, #44]	; 0x2c
   41cec:	lsl	r0, r3, #3
   41cf0:	str	r0, [sp, #48]	; 0x30
   41cf4:	ldr	r0, [sp, #64]	; 0x40
   41cf8:	cmp	r3, #1
   41cfc:	blt	41d30 <GetDataSlab+0x15eb4>
   41d00:	ldr	r0, [sp, #64]	; 0x40
   41d04:	ldr	r3, [sp, #52]	; 0x34
   41d08:	ldr	r6, [sp, #68]	; 0x44
   41d0c:	add	r0, r9, r0, lsl #2
   41d10:	vldr	s0, [r0]
   41d14:	add	r0, r0, r1
   41d18:	subs	r3, r3, #1
   41d1c:	vcvt.f64.f32	d16, s0
   41d20:	vstr	d16, [r6]
   41d24:	add	r6, r6, #8
   41d28:	bne	41d10 <GetDataSlab+0x15e94>
   41d2c:	ldr	r0, [sp, #44]	; 0x2c
   41d30:	ldr	r4, [sp, #56]	; 0x38
   41d34:	add	r3, r9, r4, lsl #2
   41d38:	add	r9, r3, r0, lsl #2
   41d3c:	add	r0, r0, r2
   41d40:	add	r2, r0, r4
   41d44:	ldr	r0, [fp, #24]
   41d48:	cmp	r0, #2
   41d4c:	blt	41e00 <GetDataSlab+0x15f84>
   41d50:	mov	r3, #0
   41d54:	mov	r0, r3
   41d58:	ldr	r3, [r7, r3, lsl #2]
   41d5c:	add	r3, r3, #1
   41d60:	str	r3, [r7, r0, lsl #2]
   41d64:	ldr	r6, [lr, r0, lsl #2]
   41d68:	sdiv	r8, r3, r6
   41d6c:	mls	r3, r8, r6, r3
   41d70:	cmp	r3, #0
   41d74:	bne	41df0 <GetDataSlab+0x15f74>
   41d78:	mov	r3, #0
   41d7c:	sub	r5, fp, #176	; 0xb0
   41d80:	mov	r4, ip
   41d84:	str	r3, [r7, r0, lsl #2]
   41d88:	add	r3, r5, r0, lsl #2
   41d8c:	ldr	r3, [r3, #4]
   41d90:	sdiv	r6, r2, r3
   41d94:	mls	r6, r6, r3, r2
   41d98:	cmp	r6, #0
   41d9c:	beq	41db8 <GetDataSlab+0x15f3c>
   41da0:	ldr	r5, [r5, r0, lsl #2]
   41da4:	ldr	r4, [r4, r0, lsl #2]
   41da8:	sub	r3, r3, r6
   41dac:	mla	r3, r4, r5, r3
   41db0:	add	r2, r3, r2
   41db4:	b	41dd4 <GetDataSlab+0x15f58>
   41db8:	ldr	r3, [r4, r0, lsl #2]
   41dbc:	cmp	r3, #0
   41dc0:	beq	41dd8 <GetDataSlab+0x15f5c>
   41dc4:	sub	r4, fp, #176	; 0xb0
   41dc8:	ldr	r4, [r4, r0, lsl #2]
   41dcc:	mla	r2, r4, r3, r2
   41dd0:	mul	r3, r4, r3
   41dd4:	add	r9, r9, r3, lsl #2
   41dd8:	ldr	r4, [fp, #24]
   41ddc:	add	r3, r0, #1
   41de0:	add	r0, r0, #2
   41de4:	cmp	r0, r4
   41de8:	blt	41d54 <GetDataSlab+0x15ed8>
   41dec:	b	41e00 <GetDataSlab+0x15f84>
   41df0:	ldr	r3, [sp, #40]	; 0x28
   41df4:	ldr	r0, [r3, r0, lsl #2]
   41df8:	add	r9, r9, r0, lsl #2
   41dfc:	add	r2, r0, r2
   41e00:	ldr	r0, [sp, #68]	; 0x44
   41e04:	ldr	r3, [sp, #48]	; 0x30
   41e08:	ldr	r4, [sp, #60]	; 0x3c
   41e0c:	add	r0, r0, r3
   41e10:	ldr	r3, [sp, #52]	; 0x34
   41e14:	str	r0, [sp, #68]	; 0x44
   41e18:	mov	r0, #0
   41e1c:	add	sl, sl, r3
   41e20:	cmp	sl, r4
   41e24:	blt	41cf4 <GetDataSlab+0x15e78>
   41e28:	b	2e97c <GetDataSlab+0x2b00>
   41e2c:	ldr	r0, [sp, #60]	; 0x3c
   41e30:	ldr	sl, [fp, #12]
   41e34:	ldr	r3, [sp, #52]	; 0x34
   41e38:	cmp	r0, #1
   41e3c:	blt	51e2c <GetDataSlab+0x25fb0>
   41e40:	ldr	r0, [sp, #44]	; 0x2c
   41e44:	ldr	r6, [sl], #4
   41e48:	mov	ip, #0
   41e4c:	mls	r0, r3, r1, r0
   41e50:	str	r6, [sp, #64]	; 0x40
   41e54:	sub	r0, r0, r6
   41e58:	str	r0, [sp, #56]	; 0x38
   41e5c:	ldr	r0, [fp, #20]
   41e60:	add	lr, r0, #4
   41e64:	sub	r0, fp, #136	; 0x88
   41e68:	orr	r7, r0, #4
   41e6c:	sub	r0, fp, #96	; 0x60
   41e70:	orr	r0, r0, #4
   41e74:	str	r0, [sp, #40]	; 0x28
   41e78:	mla	r0, r3, r1, r6
   41e7c:	lsl	r1, r1, #3
   41e80:	str	r0, [sp, #44]	; 0x2c
   41e84:	lsl	r0, r3, #3
   41e88:	str	r0, [sp, #48]	; 0x30
   41e8c:	ldr	r0, [sp, #64]	; 0x40
   41e90:	cmp	r3, #1
   41e94:	blt	41ec4 <GetDataSlab+0x16048>
   41e98:	ldr	r0, [sp, #64]	; 0x40
   41e9c:	ldr	r3, [sp, #52]	; 0x34
   41ea0:	ldr	r6, [sp, #68]	; 0x44
   41ea4:	add	r0, r9, r0, lsl #3
   41ea8:	vldr	d16, [r0]
   41eac:	add	r0, r0, r1
   41eb0:	subs	r3, r3, #1
   41eb4:	vstr	d16, [r6]
   41eb8:	add	r6, r6, #8
   41ebc:	bne	41ea8 <GetDataSlab+0x1602c>
   41ec0:	ldr	r0, [sp, #44]	; 0x2c
   41ec4:	ldr	r4, [sp, #56]	; 0x38
   41ec8:	add	r3, r9, r4, lsl #3
   41ecc:	add	r9, r3, r0, lsl #3
   41ed0:	add	r0, r0, r2
   41ed4:	add	r2, r0, r4
   41ed8:	ldr	r0, [fp, #24]
   41edc:	cmp	r0, #2
   41ee0:	blt	41f94 <GetDataSlab+0x16118>
   41ee4:	mov	r3, #0
   41ee8:	mov	r0, r3
   41eec:	ldr	r3, [r7, r3, lsl #2]
   41ef0:	add	r3, r3, #1
   41ef4:	str	r3, [r7, r0, lsl #2]
   41ef8:	ldr	r6, [lr, r0, lsl #2]
   41efc:	sdiv	r8, r3, r6
   41f00:	mls	r3, r8, r6, r3
   41f04:	cmp	r3, #0
   41f08:	bne	41f84 <GetDataSlab+0x16108>
   41f0c:	mov	r3, #0
   41f10:	sub	r5, fp, #176	; 0xb0
   41f14:	mov	r4, sl
   41f18:	str	r3, [r7, r0, lsl #2]
   41f1c:	add	r3, r5, r0, lsl #2
   41f20:	ldr	r3, [r3, #4]
   41f24:	sdiv	r6, r2, r3
   41f28:	mls	r6, r6, r3, r2
   41f2c:	cmp	r6, #0
   41f30:	beq	41f4c <GetDataSlab+0x160d0>
   41f34:	ldr	r5, [r5, r0, lsl #2]
   41f38:	ldr	r4, [r4, r0, lsl #2]
   41f3c:	sub	r3, r3, r6
   41f40:	mla	r3, r4, r5, r3
   41f44:	add	r2, r3, r2
   41f48:	b	41f68 <GetDataSlab+0x160ec>
   41f4c:	ldr	r3, [r4, r0, lsl #2]
   41f50:	cmp	r3, #0
   41f54:	beq	41f6c <GetDataSlab+0x160f0>
   41f58:	sub	r4, fp, #176	; 0xb0
   41f5c:	ldr	r4, [r4, r0, lsl #2]
   41f60:	mla	r2, r4, r3, r2
   41f64:	mul	r3, r4, r3
   41f68:	add	r9, r9, r3, lsl #3
   41f6c:	ldr	r4, [fp, #24]
   41f70:	add	r3, r0, #1
   41f74:	add	r0, r0, #2
   41f78:	cmp	r0, r4
   41f7c:	blt	41ee8 <GetDataSlab+0x1606c>
   41f80:	b	41f94 <GetDataSlab+0x16118>
   41f84:	ldr	r3, [sp, #40]	; 0x28
   41f88:	ldr	r0, [r3, r0, lsl #2]
   41f8c:	add	r9, r9, r0, lsl #3
   41f90:	add	r2, r0, r2
   41f94:	ldr	r0, [sp, #68]	; 0x44
   41f98:	ldr	r3, [sp, #48]	; 0x30
   41f9c:	ldr	r4, [sp, #60]	; 0x3c
   41fa0:	add	r0, r0, r3
   41fa4:	ldr	r3, [sp, #52]	; 0x34
   41fa8:	str	r0, [sp, #68]	; 0x44
   41fac:	mov	r0, #0
   41fb0:	add	ip, ip, r3
   41fb4:	cmp	ip, r4
   41fb8:	blt	41e8c <GetDataSlab+0x16010>
   41fbc:	b	2e97c <GetDataSlab+0x2b00>
   41fc0:	ldr	r0, [sp, #52]	; 0x34
   41fc4:	ldr	r1, [fp, #12]
   41fc8:	ldr	r2, [fp, #20]
   41fcc:	ldr	r9, [sp, #40]	; 0x28
   41fd0:	ldr	ip, [sp, #44]	; 0x2c
   41fd4:	cmp	r0, #1
   41fd8:	blt	42184 <GetDataSlab+0x16308>
   41fdc:	mov	sl, r1
   41fe0:	ldr	r0, [sp, #32]
   41fe4:	lsl	r8, r3, #3
   41fe8:	ldr	r1, [sl], #4
   41fec:	mls	r0, ip, r3, r0
   41ff0:	sub	r0, r0, r1
   41ff4:	str	r1, [sp, #32]
   41ff8:	str	sl, [sp, #16]
   41ffc:	str	r0, [sp, #24]
   42000:	add	r0, r2, #4
   42004:	str	r0, [sp, #60]	; 0x3c
   42008:	sub	r0, fp, #136	; 0x88
   4200c:	orr	r7, r0, #4
   42010:	sub	r0, fp, #96	; 0x60
   42014:	orr	r0, r0, #4
   42018:	str	r0, [sp, #8]
   4201c:	mla	r0, ip, r3, r1
   42020:	mov	r1, #0
   42024:	str	r0, [sp, #12]
   42028:	lsl	r0, ip, #3
   4202c:	str	r0, [sp, #20]
   42030:	ldr	r0, [sp, #68]	; 0x44
   42034:	str	r0, [sp, #48]	; 0x30
   42038:	ldr	r0, [sp, #32]
   4203c:	cmp	ip, #1
   42040:	str	r1, [sp, #36]	; 0x24
   42044:	blt	4208c <GetDataSlab+0x16210>
   42048:	ldr	r0, [sp, #32]
   4204c:	ldr	sl, [sp, #48]	; 0x30
   42050:	mov	r9, ip
   42054:	str	r6, [sp, #28]
   42058:	add	r5, r6, r0, lsl #3
   4205c:	ldrd	r0, [r5]
   42060:	bl	5f094 <__aeabi_l2d>
   42064:	strd	r0, [sl]
   42068:	add	r5, r5, r8
   4206c:	subs	r9, r9, #1
   42070:	add	sl, sl, #8
   42074:	bne	4205c <GetDataSlab+0x161e0>
   42078:	ldr	r0, [sp, #12]
   4207c:	ldr	ip, [sp, #44]	; 0x2c
   42080:	ldr	r6, [sp, #28]
   42084:	ldr	sl, [sp, #16]
   42088:	sub	lr, fp, #176	; 0xb0
   4208c:	ldr	r2, [sp, #24]
   42090:	add	r1, r6, r2, lsl #3
   42094:	add	r6, r1, r0, lsl #3
   42098:	add	r0, r0, r4
   4209c:	add	r4, r0, r2
   420a0:	ldr	r0, [fp, #24]
   420a4:	cmp	r0, #2
   420a8:	blt	42148 <GetDataSlab+0x162cc>
   420ac:	ldr	r9, [sp, #40]	; 0x28
   420b0:	mov	r1, #0
   420b4:	mov	r0, r1
   420b8:	ldr	r1, [r7, r1, lsl #2]
   420bc:	ldr	r2, [sp, #60]	; 0x3c
   420c0:	add	r1, r1, #1
   420c4:	str	r1, [r7, r0, lsl #2]
   420c8:	ldr	r2, [r2, r0, lsl #2]
   420cc:	sdiv	r3, r1, r2
   420d0:	mls	r1, r3, r2, r1
   420d4:	cmp	r1, #0
   420d8:	bne	42150 <GetDataSlab+0x162d4>
   420dc:	mov	r1, #0
   420e0:	str	r1, [r7, r0, lsl #2]
   420e4:	add	r1, lr, r0, lsl #2
   420e8:	ldr	r1, [r1, #4]
   420ec:	sdiv	r2, r4, r1
   420f0:	mls	r2, r2, r1, r4
   420f4:	cmp	r2, #0
   420f8:	beq	42114 <GetDataSlab+0x16298>
   420fc:	ldr	r3, [lr, r0, lsl #2]
   42100:	ldr	r5, [sl, r0, lsl #2]
   42104:	sub	r1, r1, r2
   42108:	mla	r1, r5, r3, r1
   4210c:	add	r4, r1, r4
   42110:	b	4212c <GetDataSlab+0x162b0>
   42114:	ldr	r1, [sl, r0, lsl #2]
   42118:	cmp	r1, #0
   4211c:	beq	42130 <GetDataSlab+0x162b4>
   42120:	ldr	r2, [lr, r0, lsl #2]
   42124:	mla	r4, r2, r1, r4
   42128:	mul	r1, r2, r1
   4212c:	add	r6, r6, r1, lsl #3
   42130:	ldr	r2, [fp, #24]
   42134:	add	r1, r0, #1
   42138:	add	r0, r0, #2
   4213c:	cmp	r0, r2
   42140:	blt	420b4 <GetDataSlab+0x16238>
   42144:	b	42160 <GetDataSlab+0x162e4>
   42148:	ldr	r9, [sp, #40]	; 0x28
   4214c:	b	42160 <GetDataSlab+0x162e4>
   42150:	ldr	r1, [sp, #8]
   42154:	ldr	r0, [r1, r0, lsl #2]
   42158:	add	r6, r6, r0, lsl #3
   4215c:	add	r4, r0, r4
   42160:	ldr	r0, [sp, #20]
   42164:	ldr	r1, [sp, #48]	; 0x30
   42168:	add	r1, r1, r0
   4216c:	ldr	r0, [sp, #52]	; 0x34
   42170:	str	r1, [sp, #48]	; 0x30
   42174:	ldr	r1, [sp, #36]	; 0x24
   42178:	add	r1, r1, ip
   4217c:	cmp	r1, r0
   42180:	blt	42038 <GetDataSlab+0x161bc>
   42184:	mov	r0, #0
   42188:	ldr	r3, [fp, #16]
   4218c:	cmp	r9, #13
   42190:	bne	2e97c <GetDataSlab+0x2b00>
   42194:	ldr	r0, [r3]
   42198:	mov	r9, #0
   4219c:	sub	r5, fp, #176	; 0xb0
   421a0:	sub	r2, fp, #96	; 0x60
   421a4:	str	r0, [sp, #24]
   421a8:	sub	r0, r0, #1
   421ac:	str	r0, [fp, #-96]	; 0xffffffa0
   421b0:	ldr	r0, [fp, #8]
   421b4:	ldr	r0, [r0]
   421b8:	str	r0, [sp, #44]	; 0x2c
   421bc:	str	r0, [fp, #-176]	; 0xffffff50
   421c0:	ldr	r0, [fp, #20]
   421c4:	ldr	r1, [r0]
   421c8:	ldr	r0, [fp, #24]
   421cc:	cmp	r0, #2
   421d0:	str	r1, [sp, #48]	; 0x30
   421d4:	str	r1, [sp, #52]	; 0x34
   421d8:	blt	42328 <GetDataSlab+0x164ac>
   421dc:	ldr	r0, [fp, #8]
   421e0:	ldr	r4, [sp, #44]	; 0x2c
   421e4:	ldr	r7, [sp, #48]	; 0x30
   421e8:	mov	r8, #0
   421ec:	mvn	r6, #15
   421f0:	mov	r9, #0
   421f4:	sub	r1, r0, #4
   421f8:	sub	lr, r0, #12
   421fc:	mov	r0, #1
   42200:	mov	sl, r4
   42204:	str	r7, [sp, #52]	; 0x34
   42208:	ldr	r3, [r3, r0, lsl #2]
   4220c:	str	r4, [r5, r0, lsl #2]
   42210:	add	r8, r8, #1
   42214:	cmp	r8, #4
   42218:	sub	r7, r3, #1
   4221c:	ldr	r3, [fp, #8]
   42220:	str	r7, [r2, r0, lsl #2]
   42224:	ldr	r2, [r3, r0, lsl #2]
   42228:	bcs	4223c <GetDataSlab+0x163c0>
   4222c:	mov	ip, r2
   42230:	mov	r5, r2
   42234:	mov	r3, r0
   42238:	b	422c4 <GetDataSlab+0x16448>
   4223c:	vmov.i32	q9, #1	; 0x00000001
   42240:	vmov.i32	q10, #1	; 0x00000001
   42244:	vmov.i32	q8, #1	; 0x00000001
   42248:	bic	r5, r8, #3
   4224c:	bic	ip, r0, #3
   42250:	vmov.32	d23[1], r2
   42254:	vmov.32	d18[0], r4
   42258:	vmov.32	d20[0], r7
   4225c:	sub	r3, r0, r5
   42260:	mov	r4, lr
   42264:	vorr	d16, d18, d18
   42268:	vmov.i32	q9, #1	; 0x00000001
   4226c:	vorr	d18, d20, d20
   42270:	vld1.32	{d20-d21}, [r4], r6
   42274:	subs	ip, ip, #4
   42278:	vrev64.32	q12, q10
   4227c:	vext.8	q12, q12, q12, #8
   42280:	vext.8	q11, q11, q12, #12
   42284:	vmul.i32	q9, q9, q12
   42288:	vmul.i32	q8, q11, q8
   4228c:	vorr	q11, q12, q12
   42290:	bne	42270 <GetDataSlab+0x163f4>
   42294:	vext.8	q11, q9, q8, #8
   42298:	vext.8	q12, q8, q8, #8
   4229c:	mov	ip, r2
   422a0:	cmp	r8, r5
   422a4:	vmul.i32	q0, q9, q11
   422a8:	vmul.i32	q1, q8, q12
   422ac:	vmul.i32	q8, q0, d0[1]
   422b0:	vmul.i32	q9, q1, d2[1]
   422b4:	vmov.32	r7, d16[0]
   422b8:	vmov.32	r4, d18[0]
   422bc:	beq	422d8 <GetDataSlab+0x1645c>
   422c0:	vmov.32	r5, d20[0]
   422c4:	mul	r4, r5, r4
   422c8:	ldr	r5, [r1, r3, lsl #2]
   422cc:	subs	r3, r3, #1
   422d0:	mul	r7, r7, r5
   422d4:	bne	422c4 <GetDataSlab+0x16448>
   422d8:	ldr	r3, [fp, #12]
   422dc:	sub	r5, fp, #176	; 0xb0
   422e0:	sub	r2, fp, #96	; 0x60
   422e4:	add	lr, lr, #4
   422e8:	str	r7, [r2, r0, lsl #2]
   422ec:	str	r4, [r5, r0, lsl #2]
   422f0:	ldr	r7, [sp, #52]	; 0x34
   422f4:	ldr	r3, [r3, r0, lsl #2]
   422f8:	mla	r9, r3, sl, r9
   422fc:	ldr	r3, [fp, #20]
   42300:	mov	sl, r4
   42304:	mov	r4, ip
   42308:	ldr	r3, [r3, r0, lsl #2]
   4230c:	add	r0, r0, #1
   42310:	mul	r7, r3, r7
   42314:	ldr	r3, [fp, #24]
   42318:	str	r7, [sp, #52]	; 0x34
   4231c:	cmp	r0, r3
   42320:	ldr	r3, [fp, #16]
   42324:	bne	42208 <GetDataSlab+0x1638c>
   42328:	ldr	r0, [sp, #56]	; 0x38
   4232c:	ldr	r3, [sp, #24]
   42330:	add	r5, r0, r9, lsl #3
   42334:	cmp	r3, #1
   42338:	bne	4b820 <GetDataSlab+0x1f9a4>
   4233c:	ldr	r0, [sp, #52]	; 0x34
   42340:	ldr	r1, [fp, #20]
   42344:	ldr	ip, [sp, #48]	; 0x30
   42348:	cmp	r0, #1
   4234c:	ldr	r0, [fp, #12]
   42350:	blt	51e40 <GetDataSlab+0x25fc4>
   42354:	add	r1, r1, #4
   42358:	str	r1, [sp, #32]
   4235c:	sub	r1, fp, #136	; 0x88
   42360:	orr	r4, r1, #4
   42364:	sub	r1, fp, #96	; 0x60
   42368:	orr	r1, r1, #4
   4236c:	str	r1, [sp, #28]
   42370:	lsl	r1, ip, #3
   42374:	str	r1, [sp, #56]	; 0x38
   42378:	bic	r1, ip, #1
   4237c:	str	r1, [sp, #40]	; 0x28
   42380:	ldr	r1, [r0], #4
   42384:	str	r0, [sp, #64]	; 0x40
   42388:	mov	r0, #0
   4238c:	str	r1, [sp, #36]	; 0x24
   42390:	str	r0, [sp, #60]	; 0x3c
   42394:	ldr	r8, [sp, #68]	; 0x44
   42398:	cmp	ip, #1
   4239c:	blt	4243c <GetDataSlab+0x165c0>
   423a0:	ldr	r0, [sp, #36]	; 0x24
   423a4:	add	sl, r5, r0, lsl #3
   423a8:	mov	r0, #0
   423ac:	beq	42408 <GetDataSlab+0x1658c>
   423b0:	ldr	r7, [sp, #40]	; 0x28
   423b4:	mov	r6, sl
   423b8:	vld1.64	{d8-d9}, [r6]!
   423bc:	vmov.32	r0, d9[0]
   423c0:	vmov.32	r1, d9[1]
   423c4:	bl	5f080 <__aeabi_ul2d>
   423c8:	vmov.32	r2, d8[0]
   423cc:	vmov.32	r3, d8[1]
   423d0:	vmov	d9, r0, r1
   423d4:	mov	r0, r2
   423d8:	mov	r1, r3
   423dc:	bl	5f080 <__aeabi_ul2d>
   423e0:	vmov	d8, r0, r1
   423e4:	subs	r7, r7, #2
   423e8:	vst1.64	{d8-d9}, [r8]!
   423ec:	bne	423b8 <GetDataSlab+0x1653c>
   423f0:	ldr	r0, [sp, #48]	; 0x30
   423f4:	ldr	r1, [sp, #40]	; 0x28
   423f8:	ldr	r8, [sp, #68]	; 0x44
   423fc:	cmp	r0, r1
   42400:	mov	r0, r1
   42404:	beq	4243c <GetDataSlab+0x165c0>
   42408:	ldr	r1, [sp, #48]	; 0x30
   4240c:	lsl	r7, r0, #3
   42410:	sub	r6, r1, r0
   42414:	mov	r1, sl
   42418:	ldr	r0, [r1, r7]!
   4241c:	ldr	r1, [r1, #4]
   42420:	bl	5f080 <__aeabi_ul2d>
   42424:	mov	r2, r8
   42428:	subs	r6, r6, #1
   4242c:	str	r0, [r2, r7]!
   42430:	add	r7, r7, #8
   42434:	str	r1, [r2, #4]
   42438:	bne	42414 <GetDataSlab+0x16598>
   4243c:	ldr	r0, [sp, #44]	; 0x2c
   42440:	sub	r6, fp, #176	; 0xb0
   42444:	add	r5, r5, r0, lsl #3
   42448:	add	r9, r9, r0
   4244c:	ldr	r0, [fp, #24]
   42450:	cmp	r0, #2
   42454:	blt	42500 <GetDataSlab+0x16684>
   42458:	mov	lr, r6
   4245c:	ldr	ip, [sp, #48]	; 0x30
   42460:	ldr	r6, [sp, #32]
   42464:	mov	r1, #0
   42468:	mov	sl, #0
   4246c:	mov	r0, r1
   42470:	ldr	r1, [r4, r1, lsl #2]
   42474:	add	r1, r1, #1
   42478:	str	r1, [r4, r0, lsl #2]
   4247c:	ldr	r2, [r6, r0, lsl #2]
   42480:	sdiv	r3, r1, r2
   42484:	mls	r1, r3, r2, r1
   42488:	cmp	r1, #0
   4248c:	bne	42508 <GetDataSlab+0x1668c>
   42490:	add	r1, lr, r0, lsl #2
   42494:	str	sl, [r4, r0, lsl #2]
   42498:	ldr	r1, [r1, #4]
   4249c:	sdiv	r2, r9, r1
   424a0:	mls	r2, r2, r1, r9
   424a4:	cmp	r2, #0
   424a8:	beq	424c8 <GetDataSlab+0x1664c>
   424ac:	ldr	r7, [sp, #64]	; 0x40
   424b0:	ldr	r3, [lr, r0, lsl #2]
   424b4:	sub	r1, r1, r2
   424b8:	ldr	r7, [r7, r0, lsl #2]
   424bc:	mla	r1, r7, r3, r1
   424c0:	add	r9, r1, r9
   424c4:	b	424e4 <GetDataSlab+0x16668>
   424c8:	ldr	r1, [sp, #64]	; 0x40
   424cc:	ldr	r1, [r1, r0, lsl #2]
   424d0:	cmp	r1, #0
   424d4:	beq	424e8 <GetDataSlab+0x1666c>
   424d8:	ldr	r2, [lr, r0, lsl #2]
   424dc:	mla	r9, r2, r1, r9
   424e0:	mul	r1, r2, r1
   424e4:	add	r5, r5, r1, lsl #3
   424e8:	ldr	r2, [fp, #24]
   424ec:	add	r1, r0, #1
   424f0:	add	r0, r0, #2
   424f4:	cmp	r0, r2
   424f8:	blt	4246c <GetDataSlab+0x165f0>
   424fc:	b	42518 <GetDataSlab+0x1669c>
   42500:	ldr	ip, [sp, #48]	; 0x30
   42504:	b	42518 <GetDataSlab+0x1669c>
   42508:	ldr	r1, [sp, #28]
   4250c:	ldr	r0, [r1, r0, lsl #2]
   42510:	add	r5, r5, r0, lsl #3
   42514:	add	r9, r0, r9
   42518:	ldr	r2, [sp, #60]	; 0x3c
   4251c:	ldr	r0, [sp, #56]	; 0x38
   42520:	ldr	r1, [sp, #52]	; 0x34
   42524:	add	r2, r2, ip
   42528:	add	r8, r8, r0
   4252c:	mov	r0, #0
   42530:	cmp	r2, r1
   42534:	str	r8, [sp, #68]	; 0x44
   42538:	str	r2, [sp, #60]	; 0x3c
   4253c:	blt	42394 <GetDataSlab+0x16518>
   42540:	b	2e97c <GetDataSlab+0x2b00>
   42544:	ldr	r1, [sp, #60]	; 0x3c
   42548:	ldr	r6, [sp, #36]	; 0x24
   4254c:	sub	r2, fp, #96	; 0x60
   42550:	cmp	r1, #1
   42554:	ldr	r1, [fp, #20]
   42558:	blt	51e54 <GetDataSlab+0x25fd8>
   4255c:	mov	r7, r2
   42560:	ldr	r2, [sp, #52]	; 0x34
   42564:	add	r9, r0, #4
   42568:	sub	r0, fp, #136	; 0x88
   4256c:	add	sl, r1, #4
   42570:	mov	r8, #0
   42574:	orr	r1, r0, #4
   42578:	orr	r0, r7, #4
   4257c:	str	r0, [sp, #36]	; 0x24
   42580:	mls	r6, r2, ip, r6
   42584:	lsl	r0, r2, #2
   42588:	str	r6, [sp, #48]	; 0x30
   4258c:	mul	r6, r2, ip
   42590:	str	r0, [sp, #44]	; 0x2c
   42594:	mov	r0, #0
   42598:	str	r6, [sp, #40]	; 0x28
   4259c:	str	r0, [sp, #56]	; 0x38
   425a0:	ldr	r0, [fp, #12]
   425a4:	cmp	r2, #1
   425a8:	ldr	r0, [r0]
   425ac:	blt	425f0 <GetDataSlab+0x16774>
   425b0:	ldr	r7, [sp, #40]	; 0x28
   425b4:	ldr	lr, [sp, #68]	; 0x44
   425b8:	add	r5, r7, r3
   425bc:	add	r3, r4, r7
   425c0:	add	r4, r4, r0
   425c4:	ldrb	r8, [r4], ip
   425c8:	subs	r2, r2, #1
   425cc:	vmov	s0, r8
   425d0:	vcvt.f32.u32	s0, s0
   425d4:	vstr	s0, [lr]
   425d8:	add	lr, lr, #4
   425dc:	bne	425c4 <GetDataSlab+0x16748>
   425e0:	add	r2, r5, r0
   425e4:	mov	r4, r3
   425e8:	mov	r8, #0
   425ec:	b	425f4 <GetDataSlab+0x16778>
   425f0:	add	r2, r0, r3
   425f4:	ldr	r3, [sp, #48]	; 0x30
   425f8:	sub	lr, fp, #176	; 0xb0
   425fc:	sub	r0, r3, r0
   42600:	add	r4, r4, r3
   42604:	add	r3, r2, r0
   42608:	ldr	r0, [fp, #24]
   4260c:	cmp	r0, #2
   42610:	blt	426b0 <GetDataSlab+0x16834>
   42614:	mov	r2, #0
   42618:	mov	r0, r2
   4261c:	ldr	r2, [r1, r2, lsl #2]
   42620:	add	r2, r2, #1
   42624:	str	r2, [r1, r0, lsl #2]
   42628:	ldr	r5, [sl, r0, lsl #2]
   4262c:	sdiv	r6, r2, r5
   42630:	mls	r2, r6, r5, r2
   42634:	cmp	r2, #0
   42638:	bne	426a0 <GetDataSlab+0x16824>
   4263c:	add	r2, lr, r0, lsl #2
   42640:	str	r8, [r1, r0, lsl #2]
   42644:	ldr	r2, [r2, #4]
   42648:	sdiv	r6, r3, r2
   4264c:	mls	r5, r6, r2, r3
   42650:	cmp	r5, #0
   42654:	beq	42674 <GetDataSlab+0x167f8>
   42658:	ldr	r6, [lr, r0, lsl #2]
   4265c:	ldr	r7, [r9, r0, lsl #2]
   42660:	sub	r2, r2, r5
   42664:	mla	r2, r7, r6, r2
   42668:	add	r3, r2, r3
   4266c:	add	r4, r4, r2
   42670:	b	42688 <GetDataSlab+0x1680c>
   42674:	ldr	r2, [r9, r0, lsl #2]
   42678:	cmp	r2, #0
   4267c:	ldrne	r7, [lr, r0, lsl #2]
   42680:	mlane	r3, r7, r2, r3
   42684:	mlane	r4, r7, r2, r4
   42688:	ldr	r7, [fp, #24]
   4268c:	add	r2, r0, #1
   42690:	add	r0, r0, #2
   42694:	cmp	r0, r7
   42698:	blt	42618 <GetDataSlab+0x1679c>
   4269c:	b	426b0 <GetDataSlab+0x16834>
   426a0:	ldr	r2, [sp, #36]	; 0x24
   426a4:	ldr	r0, [r2, r0, lsl #2]
   426a8:	add	r4, r4, r0
   426ac:	add	r3, r0, r3
   426b0:	ldr	r0, [sp, #68]	; 0x44
   426b4:	ldr	r2, [sp, #44]	; 0x2c
   426b8:	ldr	r6, [sp, #56]	; 0x38
   426bc:	ldr	r7, [sp, #60]	; 0x3c
   426c0:	add	r0, r0, r2
   426c4:	ldr	r2, [sp, #52]	; 0x34
   426c8:	str	r0, [sp, #68]	; 0x44
   426cc:	mov	r0, #0
   426d0:	add	r6, r6, r2
   426d4:	cmp	r6, r7
   426d8:	str	r6, [sp, #56]	; 0x38
   426dc:	blt	425a0 <GetDataSlab+0x16724>
   426e0:	b	2e97c <GetDataSlab+0x2b00>
   426e4:	ldr	r0, [sp, #60]	; 0x3c
   426e8:	ldr	r1, [fp, #12]
   426ec:	ldr	r3, [sp, #52]	; 0x34
   426f0:	cmp	r0, #1
   426f4:	blt	51e68 <GetDataSlab+0x25fec>
   426f8:	ldr	r0, [sp, #40]	; 0x28
   426fc:	ldr	r5, [r1], #4
   42700:	add	lr, sl, #4
   42704:	mov	ip, #0
   42708:	mov	sl, #0
   4270c:	mls	r0, r3, r6, r0
   42710:	str	r1, [sp, #64]	; 0x40
   42714:	lsl	r1, r6, #1
   42718:	str	r5, [sp, #56]	; 0x38
   4271c:	sub	r0, r0, r5
   42720:	str	r0, [sp, #48]	; 0x30
   42724:	sub	r0, fp, #136	; 0x88
   42728:	orr	r7, r0, #4
   4272c:	sub	r0, fp, #96	; 0x60
   42730:	orr	r0, r0, #4
   42734:	str	r0, [sp, #36]	; 0x24
   42738:	mla	r0, r3, r6, r5
   4273c:	str	r0, [sp, #40]	; 0x28
   42740:	lsl	r0, r3, #2
   42744:	str	r0, [sp, #44]	; 0x2c
   42748:	ldr	r0, [sp, #56]	; 0x38
   4274c:	cmp	r3, #1
   42750:	blt	42784 <GetDataSlab+0x16908>
   42754:	ldr	r0, [sp, #56]	; 0x38
   42758:	ldr	r3, [sp, #52]	; 0x34
   4275c:	ldr	r6, [sp, #68]	; 0x44
   42760:	add	r0, r9, r0, lsl #1
   42764:	ldrsh	r8, [r0], r1
   42768:	subs	r3, r3, #1
   4276c:	vmov	s0, r8
   42770:	vcvt.f32.s32	s0, s0
   42774:	vstr	s0, [r6]
   42778:	add	r6, r6, #4
   4277c:	bne	42764 <GetDataSlab+0x168e8>
   42780:	ldr	r0, [sp, #40]	; 0x28
   42784:	ldr	r4, [sp, #48]	; 0x30
   42788:	add	r3, r9, r4, lsl #1
   4278c:	add	r9, r3, r0, lsl #1
   42790:	add	r0, r0, r2
   42794:	add	r2, r0, r4
   42798:	ldr	r0, [fp, #24]
   4279c:	cmp	r0, #2
   427a0:	blt	42850 <GetDataSlab+0x169d4>
   427a4:	ldr	r8, [sp, #64]	; 0x40
   427a8:	mov	r3, #0
   427ac:	mov	r0, r3
   427b0:	ldr	r3, [r7, r3, lsl #2]
   427b4:	add	r3, r3, #1
   427b8:	str	r3, [r7, r0, lsl #2]
   427bc:	ldr	r6, [lr, r0, lsl #2]
   427c0:	sdiv	r5, r3, r6
   427c4:	mls	r3, r5, r6, r3
   427c8:	cmp	r3, #0
   427cc:	bne	42840 <GetDataSlab+0x169c4>
   427d0:	sub	r4, fp, #176	; 0xb0
   427d4:	str	ip, [r7, r0, lsl #2]
   427d8:	add	r3, r4, r0, lsl #2
   427dc:	ldr	r3, [r3, #4]
   427e0:	sdiv	r5, r2, r3
   427e4:	mls	r6, r5, r3, r2
   427e8:	cmp	r6, #0
   427ec:	beq	42808 <GetDataSlab+0x1698c>
   427f0:	ldr	r5, [r4, r0, lsl #2]
   427f4:	ldr	r4, [r8, r0, lsl #2]
   427f8:	sub	r3, r3, r6
   427fc:	mla	r3, r4, r5, r3
   42800:	add	r2, r3, r2
   42804:	b	42824 <GetDataSlab+0x169a8>
   42808:	ldr	r3, [r8, r0, lsl #2]
   4280c:	cmp	r3, #0
   42810:	beq	42828 <GetDataSlab+0x169ac>
   42814:	sub	r4, fp, #176	; 0xb0
   42818:	ldr	r4, [r4, r0, lsl #2]
   4281c:	mla	r2, r4, r3, r2
   42820:	mul	r3, r4, r3
   42824:	add	r9, r9, r3, lsl #1
   42828:	ldr	r4, [fp, #24]
   4282c:	add	r3, r0, #1
   42830:	add	r0, r0, #2
   42834:	cmp	r0, r4
   42838:	blt	427ac <GetDataSlab+0x16930>
   4283c:	b	42850 <GetDataSlab+0x169d4>
   42840:	ldr	r3, [sp, #36]	; 0x24
   42844:	ldr	r0, [r3, r0, lsl #2]
   42848:	add	r9, r9, r0, lsl #1
   4284c:	add	r2, r0, r2
   42850:	ldr	r0, [sp, #68]	; 0x44
   42854:	ldr	r3, [sp, #44]	; 0x2c
   42858:	ldr	r4, [sp, #60]	; 0x3c
   4285c:	add	r0, r0, r3
   42860:	ldr	r3, [sp, #52]	; 0x34
   42864:	str	r0, [sp, #68]	; 0x44
   42868:	mov	r0, #0
   4286c:	add	sl, sl, r3
   42870:	cmp	sl, r4
   42874:	blt	42748 <GetDataSlab+0x168cc>
   42878:	b	2e97c <GetDataSlab+0x2b00>
   4287c:	ldr	r0, [sp, #60]	; 0x3c
   42880:	ldr	r1, [fp, #12]
   42884:	ldr	r3, [sp, #52]	; 0x34
   42888:	cmp	r0, #1
   4288c:	blt	51e7c <GetDataSlab+0x26000>
   42890:	ldr	r0, [sp, #40]	; 0x28
   42894:	ldr	r5, [r1], #4
   42898:	add	lr, sl, #4
   4289c:	mov	ip, #0
   428a0:	mov	sl, #0
   428a4:	mls	r0, r3, r6, r0
   428a8:	str	r1, [sp, #64]	; 0x40
   428ac:	lsl	r1, r6, #1
   428b0:	str	r5, [sp, #56]	; 0x38
   428b4:	sub	r0, r0, r5
   428b8:	str	r0, [sp, #48]	; 0x30
   428bc:	sub	r0, fp, #136	; 0x88
   428c0:	orr	r7, r0, #4
   428c4:	sub	r0, fp, #96	; 0x60
   428c8:	orr	r0, r0, #4
   428cc:	str	r0, [sp, #36]	; 0x24
   428d0:	mla	r0, r3, r6, r5
   428d4:	str	r0, [sp, #40]	; 0x28
   428d8:	lsl	r0, r3, #2
   428dc:	str	r0, [sp, #44]	; 0x2c
   428e0:	ldr	r0, [sp, #56]	; 0x38
   428e4:	cmp	r3, #1
   428e8:	blt	4291c <GetDataSlab+0x16aa0>
   428ec:	ldr	r0, [sp, #56]	; 0x38
   428f0:	ldr	r3, [sp, #52]	; 0x34
   428f4:	ldr	r6, [sp, #68]	; 0x44
   428f8:	add	r0, r9, r0, lsl #1
   428fc:	ldrh	r8, [r0], r1
   42900:	subs	r3, r3, #1
   42904:	vmov	s0, r8
   42908:	vcvt.f32.u32	s0, s0
   4290c:	vstr	s0, [r6]
   42910:	add	r6, r6, #4
   42914:	bne	428fc <GetDataSlab+0x16a80>
   42918:	ldr	r0, [sp, #40]	; 0x28
   4291c:	ldr	r4, [sp, #48]	; 0x30
   42920:	add	r3, r9, r4, lsl #1
   42924:	add	r9, r3, r0, lsl #1
   42928:	add	r0, r0, r2
   4292c:	add	r2, r0, r4
   42930:	ldr	r0, [fp, #24]
   42934:	cmp	r0, #2
   42938:	blt	429e8 <GetDataSlab+0x16b6c>
   4293c:	ldr	r8, [sp, #64]	; 0x40
   42940:	mov	r3, #0
   42944:	mov	r0, r3
   42948:	ldr	r3, [r7, r3, lsl #2]
   4294c:	add	r3, r3, #1
   42950:	str	r3, [r7, r0, lsl #2]
   42954:	ldr	r6, [lr, r0, lsl #2]
   42958:	sdiv	r5, r3, r6
   4295c:	mls	r3, r5, r6, r3
   42960:	cmp	r3, #0
   42964:	bne	429d8 <GetDataSlab+0x16b5c>
   42968:	sub	r4, fp, #176	; 0xb0
   4296c:	str	ip, [r7, r0, lsl #2]
   42970:	add	r3, r4, r0, lsl #2
   42974:	ldr	r3, [r3, #4]
   42978:	sdiv	r5, r2, r3
   4297c:	mls	r6, r5, r3, r2
   42980:	cmp	r6, #0
   42984:	beq	429a0 <GetDataSlab+0x16b24>
   42988:	ldr	r5, [r4, r0, lsl #2]
   4298c:	ldr	r4, [r8, r0, lsl #2]
   42990:	sub	r3, r3, r6
   42994:	mla	r3, r4, r5, r3
   42998:	add	r2, r3, r2
   4299c:	b	429bc <GetDataSlab+0x16b40>
   429a0:	ldr	r3, [r8, r0, lsl #2]
   429a4:	cmp	r3, #0
   429a8:	beq	429c0 <GetDataSlab+0x16b44>
   429ac:	sub	r4, fp, #176	; 0xb0
   429b0:	ldr	r4, [r4, r0, lsl #2]
   429b4:	mla	r2, r4, r3, r2
   429b8:	mul	r3, r4, r3
   429bc:	add	r9, r9, r3, lsl #1
   429c0:	ldr	r4, [fp, #24]
   429c4:	add	r3, r0, #1
   429c8:	add	r0, r0, #2
   429cc:	cmp	r0, r4
   429d0:	blt	42944 <GetDataSlab+0x16ac8>
   429d4:	b	429e8 <GetDataSlab+0x16b6c>
   429d8:	ldr	r3, [sp, #36]	; 0x24
   429dc:	ldr	r0, [r3, r0, lsl #2]
   429e0:	add	r9, r9, r0, lsl #1
   429e4:	add	r2, r0, r2
   429e8:	ldr	r0, [sp, #68]	; 0x44
   429ec:	ldr	r3, [sp, #44]	; 0x2c
   429f0:	ldr	r4, [sp, #60]	; 0x3c
   429f4:	add	r0, r0, r3
   429f8:	ldr	r3, [sp, #52]	; 0x34
   429fc:	str	r0, [sp, #68]	; 0x44
   42a00:	mov	r0, #0
   42a04:	add	sl, sl, r3
   42a08:	cmp	sl, r4
   42a0c:	blt	428e0 <GetDataSlab+0x16a64>
   42a10:	b	2e97c <GetDataSlab+0x2b00>
   42a14:	ldr	r0, [sp, #60]	; 0x3c
   42a18:	ldr	r2, [sp, #52]	; 0x34
   42a1c:	sub	r1, fp, #96	; 0x60
   42a20:	cmp	r0, #1
   42a24:	ldr	r0, [fp, #12]
   42a28:	blt	51e90 <GetDataSlab+0x26014>
   42a2c:	add	r9, r0, #4
   42a30:	ldr	r0, [fp, #20]
   42a34:	ldr	r7, [sp, #44]	; 0x2c
   42a38:	mov	r8, #0
   42a3c:	add	ip, r0, #4
   42a40:	sub	r0, fp, #136	; 0x88
   42a44:	mls	r7, r2, r6, r7
   42a48:	orr	r5, r0, #4
   42a4c:	orr	r0, r1, #4
   42a50:	lsl	r1, r6, #2
   42a54:	str	r7, [sp, #48]	; 0x30
   42a58:	str	r0, [sp, #36]	; 0x24
   42a5c:	mul	r0, r2, r6
   42a60:	str	r0, [sp, #40]	; 0x28
   42a64:	lsl	r0, r2, #2
   42a68:	str	r0, [sp, #44]	; 0x2c
   42a6c:	ldr	r0, [fp, #12]
   42a70:	cmp	r2, #1
   42a74:	ldr	r0, [r0]
   42a78:	blt	42ac0 <GetDataSlab+0x16c44>
   42a7c:	ldr	r7, [sp, #40]	; 0x28
   42a80:	ldr	lr, [sp, #68]	; 0x44
   42a84:	add	r4, sl, r0, lsl #2
   42a88:	add	r6, r7, r3
   42a8c:	add	r3, sl, r7, lsl #2
   42a90:	str	r3, [sp, #56]	; 0x38
   42a94:	mov	r3, r2
   42a98:	ldr	r7, [r4], r1
   42a9c:	subs	r3, r3, #1
   42aa0:	vmov	s0, r7
   42aa4:	vcvt.f32.s32	s0, s0
   42aa8:	vstr	s0, [lr]
   42aac:	add	lr, lr, #4
   42ab0:	bne	42a98 <GetDataSlab+0x16c1c>
   42ab4:	ldr	sl, [sp, #56]	; 0x38
   42ab8:	add	r2, r6, r0
   42abc:	b	42ac4 <GetDataSlab+0x16c48>
   42ac0:	add	r2, r0, r3
   42ac4:	ldr	r3, [sp, #48]	; 0x30
   42ac8:	sub	lr, fp, #176	; 0xb0
   42acc:	sub	r0, r3, r0
   42ad0:	add	sl, sl, r3, lsl #2
   42ad4:	add	r3, r2, r0
   42ad8:	ldr	r0, [fp, #24]
   42adc:	cmp	r0, #2
   42ae0:	blt	42b88 <GetDataSlab+0x16d0c>
   42ae4:	mov	r2, #0
   42ae8:	mov	r0, r2
   42aec:	ldr	r2, [r5, r2, lsl #2]
   42af0:	add	r2, r2, #1
   42af4:	str	r2, [r5, r0, lsl #2]
   42af8:	ldr	r7, [ip, r0, lsl #2]
   42afc:	sdiv	r6, r2, r7
   42b00:	mls	r2, r6, r7, r2
   42b04:	cmp	r2, #0
   42b08:	bne	42b78 <GetDataSlab+0x16cfc>
   42b0c:	mov	r2, #0
   42b10:	str	r2, [r5, r0, lsl #2]
   42b14:	add	r2, lr, r0, lsl #2
   42b18:	ldr	r2, [r2, #4]
   42b1c:	sdiv	r7, r3, r2
   42b20:	mls	r7, r7, r2, r3
   42b24:	cmp	r7, #0
   42b28:	beq	42b44 <GetDataSlab+0x16cc8>
   42b2c:	ldr	r6, [lr, r0, lsl #2]
   42b30:	ldr	r4, [r9, r0, lsl #2]
   42b34:	sub	r2, r2, r7
   42b38:	mla	r2, r4, r6, r2
   42b3c:	add	r3, r2, r3
   42b40:	b	42b5c <GetDataSlab+0x16ce0>
   42b44:	ldr	r2, [r9, r0, lsl #2]
   42b48:	cmp	r2, #0
   42b4c:	beq	42b60 <GetDataSlab+0x16ce4>
   42b50:	ldr	r7, [lr, r0, lsl #2]
   42b54:	mla	r3, r7, r2, r3
   42b58:	mul	r2, r7, r2
   42b5c:	add	sl, sl, r2, lsl #2
   42b60:	ldr	r7, [fp, #24]
   42b64:	add	r2, r0, #1
   42b68:	add	r0, r0, #2
   42b6c:	cmp	r0, r7
   42b70:	blt	42ae8 <GetDataSlab+0x16c6c>
   42b74:	b	42b88 <GetDataSlab+0x16d0c>
   42b78:	ldr	r2, [sp, #36]	; 0x24
   42b7c:	ldr	r0, [r2, r0, lsl #2]
   42b80:	add	sl, sl, r0, lsl #2
   42b84:	add	r3, r0, r3
   42b88:	ldr	r0, [sp, #68]	; 0x44
   42b8c:	ldr	r2, [sp, #44]	; 0x2c
   42b90:	ldr	r7, [sp, #60]	; 0x3c
   42b94:	add	r0, r0, r2
   42b98:	ldr	r2, [sp, #52]	; 0x34
   42b9c:	str	r0, [sp, #68]	; 0x44
   42ba0:	mov	r0, #0
   42ba4:	add	r8, r8, r2
   42ba8:	cmp	r8, r7
   42bac:	blt	42a6c <GetDataSlab+0x16bf0>
   42bb0:	b	2e97c <GetDataSlab+0x2b00>
   42bb4:	ldr	r0, [sp, #60]	; 0x3c
   42bb8:	ldr	r2, [sp, #52]	; 0x34
   42bbc:	sub	r1, fp, #96	; 0x60
   42bc0:	cmp	r0, #1
   42bc4:	ldr	r0, [fp, #12]
   42bc8:	blt	51ea4 <GetDataSlab+0x26028>
   42bcc:	add	r9, r0, #4
   42bd0:	ldr	r0, [fp, #20]
   42bd4:	ldr	r7, [sp, #44]	; 0x2c
   42bd8:	mov	r8, #0
   42bdc:	add	ip, r0, #4
   42be0:	sub	r0, fp, #136	; 0x88
   42be4:	mls	r7, r2, r6, r7
   42be8:	orr	r5, r0, #4
   42bec:	orr	r0, r1, #4
   42bf0:	lsl	r1, r6, #2
   42bf4:	str	r7, [sp, #48]	; 0x30
   42bf8:	str	r0, [sp, #36]	; 0x24
   42bfc:	mul	r0, r2, r6
   42c00:	str	r0, [sp, #40]	; 0x28
   42c04:	lsl	r0, r2, #2
   42c08:	str	r0, [sp, #44]	; 0x2c
   42c0c:	ldr	r0, [fp, #12]
   42c10:	cmp	r2, #1
   42c14:	ldr	r0, [r0]
   42c18:	blt	42c60 <GetDataSlab+0x16de4>
   42c1c:	ldr	r7, [sp, #40]	; 0x28
   42c20:	ldr	lr, [sp, #68]	; 0x44
   42c24:	add	r4, sl, r0, lsl #2
   42c28:	add	r6, r7, r3
   42c2c:	add	r3, sl, r7, lsl #2
   42c30:	str	r3, [sp, #56]	; 0x38
   42c34:	mov	r3, r2
   42c38:	ldr	r7, [r4], r1
   42c3c:	subs	r3, r3, #1
   42c40:	vmov	s0, r7
   42c44:	vcvt.f32.u32	s0, s0
   42c48:	vstr	s0, [lr]
   42c4c:	add	lr, lr, #4
   42c50:	bne	42c38 <GetDataSlab+0x16dbc>
   42c54:	ldr	sl, [sp, #56]	; 0x38
   42c58:	add	r2, r6, r0
   42c5c:	b	42c64 <GetDataSlab+0x16de8>
   42c60:	add	r2, r0, r3
   42c64:	ldr	r3, [sp, #48]	; 0x30
   42c68:	sub	lr, fp, #176	; 0xb0
   42c6c:	sub	r0, r3, r0
   42c70:	add	sl, sl, r3, lsl #2
   42c74:	add	r3, r2, r0
   42c78:	ldr	r0, [fp, #24]
   42c7c:	cmp	r0, #2
   42c80:	blt	42d28 <GetDataSlab+0x16eac>
   42c84:	mov	r2, #0
   42c88:	mov	r0, r2
   42c8c:	ldr	r2, [r5, r2, lsl #2]
   42c90:	add	r2, r2, #1
   42c94:	str	r2, [r5, r0, lsl #2]
   42c98:	ldr	r7, [ip, r0, lsl #2]
   42c9c:	sdiv	r6, r2, r7
   42ca0:	mls	r2, r6, r7, r2
   42ca4:	cmp	r2, #0
   42ca8:	bne	42d18 <GetDataSlab+0x16e9c>
   42cac:	mov	r2, #0
   42cb0:	str	r2, [r5, r0, lsl #2]
   42cb4:	add	r2, lr, r0, lsl #2
   42cb8:	ldr	r2, [r2, #4]
   42cbc:	sdiv	r7, r3, r2
   42cc0:	mls	r7, r7, r2, r3
   42cc4:	cmp	r7, #0
   42cc8:	beq	42ce4 <GetDataSlab+0x16e68>
   42ccc:	ldr	r6, [lr, r0, lsl #2]
   42cd0:	ldr	r4, [r9, r0, lsl #2]
   42cd4:	sub	r2, r2, r7
   42cd8:	mla	r2, r4, r6, r2
   42cdc:	add	r3, r2, r3
   42ce0:	b	42cfc <GetDataSlab+0x16e80>
   42ce4:	ldr	r2, [r9, r0, lsl #2]
   42ce8:	cmp	r2, #0
   42cec:	beq	42d00 <GetDataSlab+0x16e84>
   42cf0:	ldr	r7, [lr, r0, lsl #2]
   42cf4:	mla	r3, r7, r2, r3
   42cf8:	mul	r2, r7, r2
   42cfc:	add	sl, sl, r2, lsl #2
   42d00:	ldr	r7, [fp, #24]
   42d04:	add	r2, r0, #1
   42d08:	add	r0, r0, #2
   42d0c:	cmp	r0, r7
   42d10:	blt	42c88 <GetDataSlab+0x16e0c>
   42d14:	b	42d28 <GetDataSlab+0x16eac>
   42d18:	ldr	r2, [sp, #36]	; 0x24
   42d1c:	ldr	r0, [r2, r0, lsl #2]
   42d20:	add	sl, sl, r0, lsl #2
   42d24:	add	r3, r0, r3
   42d28:	ldr	r0, [sp, #68]	; 0x44
   42d2c:	ldr	r2, [sp, #44]	; 0x2c
   42d30:	ldr	r7, [sp, #60]	; 0x3c
   42d34:	add	r0, r0, r2
   42d38:	ldr	r2, [sp, #52]	; 0x34
   42d3c:	str	r0, [sp, #68]	; 0x44
   42d40:	mov	r0, #0
   42d44:	add	r8, r8, r2
   42d48:	cmp	r8, r7
   42d4c:	blt	42c0c <GetDataSlab+0x16d90>
   42d50:	b	2e97c <GetDataSlab+0x2b00>
   42d54:	ldr	r0, [sp, #60]	; 0x3c
   42d58:	ldr	r1, [fp, #12]
   42d5c:	cmp	r0, #1
   42d60:	blt	51eb8 <GetDataSlab+0x2603c>
   42d64:	ldr	r0, [sp, #44]	; 0x2c
   42d68:	ldr	r4, [r1], #4
   42d6c:	mov	r9, #0
   42d70:	mls	r0, sl, r3, r0
   42d74:	str	r1, [sp, #64]	; 0x40
   42d78:	str	r4, [sp, #56]	; 0x38
   42d7c:	sub	r0, r0, r4
   42d80:	str	r0, [sp, #52]	; 0x34
   42d84:	ldr	r0, [fp, #20]
   42d88:	add	ip, r0, #4
   42d8c:	sub	r0, fp, #136	; 0x88
   42d90:	orr	r7, r0, #4
   42d94:	sub	r0, fp, #96	; 0x60
   42d98:	orr	r0, r0, #4
   42d9c:	str	r0, [sp, #40]	; 0x28
   42da0:	mla	r0, sl, r3, r4
   42da4:	lsl	r3, r3, #2
   42da8:	str	r0, [sp, #44]	; 0x2c
   42dac:	lsl	r0, sl, #2
   42db0:	str	r0, [sp, #48]	; 0x30
   42db4:	ldr	r0, [sp, #56]	; 0x38
   42db8:	cmp	sl, #1
   42dbc:	blt	42de4 <GetDataSlab+0x16f68>
   42dc0:	ldr	r0, [sp, #56]	; 0x38
   42dc4:	ldr	r8, [sp, #68]	; 0x44
   42dc8:	mov	r1, sl
   42dcc:	add	r0, lr, r0, lsl #2
   42dd0:	ldr	r6, [r0], r3
   42dd4:	subs	r1, r1, #1
   42dd8:	str	r6, [r8], #4
   42ddc:	bne	42dd0 <GetDataSlab+0x16f54>
   42de0:	ldr	r0, [sp, #44]	; 0x2c
   42de4:	ldr	r4, [sp, #52]	; 0x34
   42de8:	add	r1, lr, r4, lsl #2
   42dec:	add	lr, r1, r0, lsl #2
   42df0:	add	r0, r0, r2
   42df4:	add	r2, r0, r4
   42df8:	ldr	r0, [fp, #24]
   42dfc:	cmp	r0, #2
   42e00:	blt	42eb4 <GetDataSlab+0x17038>
   42e04:	ldr	r8, [sp, #64]	; 0x40
   42e08:	mov	r1, #0
   42e0c:	mov	r0, r1
   42e10:	ldr	r1, [r7, r1, lsl #2]
   42e14:	add	r1, r1, #1
   42e18:	str	r1, [r7, r0, lsl #2]
   42e1c:	ldr	r6, [ip, r0, lsl #2]
   42e20:	sdiv	r5, r1, r6
   42e24:	mls	r1, r5, r6, r1
   42e28:	cmp	r1, #0
   42e2c:	bne	42ea4 <GetDataSlab+0x17028>
   42e30:	mov	r1, #0
   42e34:	sub	r4, fp, #176	; 0xb0
   42e38:	str	r1, [r7, r0, lsl #2]
   42e3c:	add	r1, r4, r0, lsl #2
   42e40:	ldr	r1, [r1, #4]
   42e44:	sdiv	r5, r2, r1
   42e48:	mls	r6, r5, r1, r2
   42e4c:	cmp	r6, #0
   42e50:	beq	42e6c <GetDataSlab+0x16ff0>
   42e54:	ldr	r5, [r4, r0, lsl #2]
   42e58:	ldr	r4, [r8, r0, lsl #2]
   42e5c:	sub	r1, r1, r6
   42e60:	mla	r1, r4, r5, r1
   42e64:	add	r2, r1, r2
   42e68:	b	42e88 <GetDataSlab+0x1700c>
   42e6c:	ldr	r1, [r8, r0, lsl #2]
   42e70:	cmp	r1, #0
   42e74:	beq	42e8c <GetDataSlab+0x17010>
   42e78:	sub	r4, fp, #176	; 0xb0
   42e7c:	ldr	r4, [r4, r0, lsl #2]
   42e80:	mla	r2, r4, r1, r2
   42e84:	mul	r1, r4, r1
   42e88:	add	lr, lr, r1, lsl #2
   42e8c:	ldr	r4, [fp, #24]
   42e90:	add	r1, r0, #1
   42e94:	add	r0, r0, #2
   42e98:	cmp	r0, r4
   42e9c:	blt	42e0c <GetDataSlab+0x16f90>
   42ea0:	b	42eb4 <GetDataSlab+0x17038>
   42ea4:	ldr	r1, [sp, #40]	; 0x28
   42ea8:	ldr	r0, [r1, r0, lsl #2]
   42eac:	add	lr, lr, r0, lsl #2
   42eb0:	add	r2, r0, r2
   42eb4:	ldr	r0, [sp, #68]	; 0x44
   42eb8:	ldr	r1, [sp, #48]	; 0x30
   42ebc:	add	r9, r9, sl
   42ec0:	add	r0, r0, r1
   42ec4:	ldr	r1, [sp, #60]	; 0x3c
   42ec8:	str	r0, [sp, #68]	; 0x44
   42ecc:	mov	r0, #0
   42ed0:	cmp	r9, r1
   42ed4:	blt	42db4 <GetDataSlab+0x16f38>
   42ed8:	b	2e97c <GetDataSlab+0x2b00>
   42edc:	ldr	r0, [sp, #60]	; 0x3c
   42ee0:	ldr	ip, [fp, #12]
   42ee4:	ldr	r3, [sp, #52]	; 0x34
   42ee8:	cmp	r0, #1
   42eec:	blt	51ecc <GetDataSlab+0x26050>
   42ef0:	ldr	r0, [sp, #40]	; 0x28
   42ef4:	ldr	r4, [ip], #4
   42ef8:	add	lr, sl, #4
   42efc:	mov	sl, #0
   42f00:	mls	r0, r3, r1, r0
   42f04:	str	r4, [sp, #64]	; 0x40
   42f08:	sub	r0, r0, r4
   42f0c:	str	r0, [sp, #56]	; 0x38
   42f10:	sub	r0, fp, #136	; 0x88
   42f14:	orr	r7, r0, #4
   42f18:	sub	r0, fp, #96	; 0x60
   42f1c:	orr	r0, r0, #4
   42f20:	str	r0, [sp, #40]	; 0x28
   42f24:	mla	r0, r3, r1, r4
   42f28:	lsl	r1, r1, #3
   42f2c:	str	r0, [sp, #44]	; 0x2c
   42f30:	lsl	r0, r3, #2
   42f34:	str	r0, [sp, #48]	; 0x30
   42f38:	ldr	r0, [sp, #64]	; 0x40
   42f3c:	cmp	r3, #1
   42f40:	blt	42f74 <GetDataSlab+0x170f8>
   42f44:	ldr	r0, [sp, #64]	; 0x40
   42f48:	ldr	r3, [sp, #52]	; 0x34
   42f4c:	ldr	r6, [sp, #68]	; 0x44
   42f50:	add	r0, r9, r0, lsl #3
   42f54:	vldr	d16, [r0]
   42f58:	add	r0, r0, r1
   42f5c:	subs	r3, r3, #1
   42f60:	vcvt.f32.f64	s0, d16
   42f64:	vstr	s0, [r6]
   42f68:	add	r6, r6, #4
   42f6c:	bne	42f54 <GetDataSlab+0x170d8>
   42f70:	ldr	r0, [sp, #44]	; 0x2c
   42f74:	ldr	r4, [sp, #56]	; 0x38
   42f78:	add	r3, r9, r4, lsl #3
   42f7c:	add	r9, r3, r0, lsl #3
   42f80:	add	r0, r0, r2
   42f84:	add	r2, r0, r4
   42f88:	ldr	r0, [fp, #24]
   42f8c:	cmp	r0, #2
   42f90:	blt	43044 <GetDataSlab+0x171c8>
   42f94:	mov	r3, #0
   42f98:	mov	r0, r3
   42f9c:	ldr	r3, [r7, r3, lsl #2]
   42fa0:	add	r3, r3, #1
   42fa4:	str	r3, [r7, r0, lsl #2]
   42fa8:	ldr	r6, [lr, r0, lsl #2]
   42fac:	sdiv	r8, r3, r6
   42fb0:	mls	r3, r8, r6, r3
   42fb4:	cmp	r3, #0
   42fb8:	bne	43034 <GetDataSlab+0x171b8>
   42fbc:	mov	r3, #0
   42fc0:	sub	r5, fp, #176	; 0xb0
   42fc4:	mov	r4, ip
   42fc8:	str	r3, [r7, r0, lsl #2]
   42fcc:	add	r3, r5, r0, lsl #2
   42fd0:	ldr	r3, [r3, #4]
   42fd4:	sdiv	r6, r2, r3
   42fd8:	mls	r6, r6, r3, r2
   42fdc:	cmp	r6, #0
   42fe0:	beq	42ffc <GetDataSlab+0x17180>
   42fe4:	ldr	r5, [r5, r0, lsl #2]
   42fe8:	ldr	r4, [r4, r0, lsl #2]
   42fec:	sub	r3, r3, r6
   42ff0:	mla	r3, r4, r5, r3
   42ff4:	add	r2, r3, r2
   42ff8:	b	43018 <GetDataSlab+0x1719c>
   42ffc:	ldr	r3, [r4, r0, lsl #2]
   43000:	cmp	r3, #0
   43004:	beq	4301c <GetDataSlab+0x171a0>
   43008:	sub	r4, fp, #176	; 0xb0
   4300c:	ldr	r4, [r4, r0, lsl #2]
   43010:	mla	r2, r4, r3, r2
   43014:	mul	r3, r4, r3
   43018:	add	r9, r9, r3, lsl #3
   4301c:	ldr	r4, [fp, #24]
   43020:	add	r3, r0, #1
   43024:	add	r0, r0, #2
   43028:	cmp	r0, r4
   4302c:	blt	42f98 <GetDataSlab+0x1711c>
   43030:	b	43044 <GetDataSlab+0x171c8>
   43034:	ldr	r3, [sp, #40]	; 0x28
   43038:	ldr	r0, [r3, r0, lsl #2]
   4303c:	add	r9, r9, r0, lsl #3
   43040:	add	r2, r0, r2
   43044:	ldr	r0, [sp, #68]	; 0x44
   43048:	ldr	r3, [sp, #48]	; 0x30
   4304c:	ldr	r4, [sp, #60]	; 0x3c
   43050:	add	r0, r0, r3
   43054:	ldr	r3, [sp, #52]	; 0x34
   43058:	str	r0, [sp, #68]	; 0x44
   4305c:	mov	r0, #0
   43060:	add	sl, sl, r3
   43064:	cmp	sl, r4
   43068:	blt	42f38 <GetDataSlab+0x170bc>
   4306c:	b	2e97c <GetDataSlab+0x2b00>
   43070:	ldr	r1, [fp, #12]
   43074:	ldr	r5, [sp, #36]	; 0x24
   43078:	cmp	ip, #1
   4307c:	sub	r2, fp, #96	; 0x60
   43080:	blt	43238 <GetDataSlab+0x173bc>
   43084:	ldr	r0, [sp, #16]
   43088:	ldr	r6, [r1], #4
   4308c:	lsl	r8, r3, #3
   43090:	mls	r0, r5, r3, r0
   43094:	str	r1, [sp, #52]	; 0x34
   43098:	str	r6, [sp, #28]
   4309c:	sub	r0, r0, r6
   430a0:	str	r0, [sp, #24]
   430a4:	ldr	r0, [fp, #20]
   430a8:	add	r0, r0, #4
   430ac:	str	r0, [sp, #60]	; 0x3c
   430b0:	sub	r0, fp, #136	; 0x88
   430b4:	orr	r7, r0, #4
   430b8:	orr	r0, r2, #4
   430bc:	str	r0, [sp, #12]
   430c0:	mla	r0, r5, r3, r6
   430c4:	str	r0, [sp, #16]
   430c8:	lsl	r0, r5, #2
   430cc:	str	r0, [sp, #20]
   430d0:	ldr	r0, [sp, #68]	; 0x44
   430d4:	str	r0, [sp, #44]	; 0x2c
   430d8:	mov	r0, #0
   430dc:	str	r0, [sp, #32]
   430e0:	ldr	r0, [sp, #28]
   430e4:	cmp	r5, #1
   430e8:	blt	43128 <GetDataSlab+0x172ac>
   430ec:	ldr	r0, [sp, #28]
   430f0:	mov	r9, r5
   430f4:	ldr	r5, [sp, #44]	; 0x2c
   430f8:	add	r0, sl, r0, lsl #3
   430fc:	add	r6, r0, r8
   43100:	ldrd	r0, [r0]
   43104:	bl	5f2c8 <__aeabi_l2f>
   43108:	str	r0, [r5], #4
   4310c:	subs	r9, r9, #1
   43110:	mov	r0, r6
   43114:	bne	430fc <GetDataSlab+0x17280>
   43118:	ldr	r0, [sp, #16]
   4311c:	ldr	r5, [sp, #36]	; 0x24
   43120:	ldr	ip, [sp, #48]	; 0x30
   43124:	sub	lr, fp, #176	; 0xb0
   43128:	ldr	r2, [sp, #24]
   4312c:	add	r1, sl, r2, lsl #3
   43130:	add	sl, r1, r0, lsl #3
   43134:	add	r0, r0, r4
   43138:	add	r4, r0, r2
   4313c:	ldr	r0, [fp, #24]
   43140:	cmp	r0, #2
   43144:	blt	431ec <GetDataSlab+0x17370>
   43148:	ldr	r9, [sp, #40]	; 0x28
   4314c:	mov	r1, #0
   43150:	mov	r0, r1
   43154:	ldr	r1, [r7, r1, lsl #2]
   43158:	ldr	r2, [sp, #60]	; 0x3c
   4315c:	add	r1, r1, #1
   43160:	str	r1, [r7, r0, lsl #2]
   43164:	ldr	r2, [r2, r0, lsl #2]
   43168:	sdiv	r3, r1, r2
   4316c:	mls	r1, r3, r2, r1
   43170:	cmp	r1, #0
   43174:	bne	431f4 <GetDataSlab+0x17378>
   43178:	mov	r1, #0
   4317c:	str	r1, [r7, r0, lsl #2]
   43180:	add	r1, lr, r0, lsl #2
   43184:	ldr	r1, [r1, #4]
   43188:	sdiv	r2, r4, r1
   4318c:	mls	r2, r2, r1, r4
   43190:	cmp	r2, #0
   43194:	beq	431b4 <GetDataSlab+0x17338>
   43198:	ldr	r6, [sp, #52]	; 0x34
   4319c:	ldr	r3, [lr, r0, lsl #2]
   431a0:	sub	r1, r1, r2
   431a4:	ldr	r6, [r6, r0, lsl #2]
   431a8:	mla	r1, r6, r3, r1
   431ac:	add	r4, r1, r4
   431b0:	b	431d0 <GetDataSlab+0x17354>
   431b4:	ldr	r1, [sp, #52]	; 0x34
   431b8:	ldr	r1, [r1, r0, lsl #2]
   431bc:	cmp	r1, #0
   431c0:	beq	431d4 <GetDataSlab+0x17358>
   431c4:	ldr	r2, [lr, r0, lsl #2]
   431c8:	mla	r4, r2, r1, r4
   431cc:	mul	r1, r2, r1
   431d0:	add	sl, sl, r1, lsl #3
   431d4:	ldr	r2, [fp, #24]
   431d8:	add	r1, r0, #1
   431dc:	add	r0, r0, #2
   431e0:	cmp	r0, r2
   431e4:	blt	43150 <GetDataSlab+0x172d4>
   431e8:	b	43204 <GetDataSlab+0x17388>
   431ec:	ldr	r9, [sp, #40]	; 0x28
   431f0:	b	43204 <GetDataSlab+0x17388>
   431f4:	ldr	r1, [sp, #12]
   431f8:	ldr	r0, [r1, r0, lsl #2]
   431fc:	add	sl, sl, r0, lsl #3
   43200:	add	r4, r0, r4
   43204:	ldr	r0, [sp, #20]
   43208:	ldr	r1, [sp, #44]	; 0x2c
   4320c:	add	r1, r1, r0
   43210:	ldr	r0, [sp, #32]
   43214:	str	r1, [sp, #44]	; 0x2c
   43218:	add	r0, r0, r5
   4321c:	cmp	r0, ip
   43220:	blt	430dc <GetDataSlab+0x17260>
   43224:	mov	r0, #0
   43228:	ldr	r2, [fp, #16]
   4322c:	cmp	r9, #13
   43230:	bne	2e97c <GetDataSlab+0x2b00>
   43234:	b	4324c <GetDataSlab+0x173d0>
   43238:	ldr	r9, [sp, #40]	; 0x28
   4323c:	mov	r0, #0
   43240:	ldr	r2, [fp, #16]
   43244:	cmp	r9, #13
   43248:	bne	2e97c <GetDataSlab+0x2b00>
   4324c:	ldr	r0, [r2]
   43250:	mov	r5, #0
   43254:	sub	r3, fp, #176	; 0xb0
   43258:	sub	r6, fp, #96	; 0x60
   4325c:	str	r0, [sp, #24]
   43260:	sub	r0, r0, #1
   43264:	str	r0, [fp, #-96]	; 0xffffffa0
   43268:	ldr	r0, [fp, #8]
   4326c:	ldr	r0, [r0]
   43270:	str	r0, [sp, #44]	; 0x2c
   43274:	str	r0, [fp, #-176]	; 0xffffff50
   43278:	ldr	r0, [fp, #20]
   4327c:	ldr	r1, [r0]
   43280:	ldr	r0, [fp, #24]
   43284:	cmp	r0, #2
   43288:	str	r1, [sp, #48]	; 0x30
   4328c:	str	r1, [sp, #52]	; 0x34
   43290:	blt	433ec <GetDataSlab+0x17570>
   43294:	ldr	r0, [fp, #8]
   43298:	ldr	r4, [sp, #48]	; 0x30
   4329c:	mov	r7, #1
   432a0:	mov	r8, #0
   432a4:	mvn	lr, #15
   432a8:	mov	r5, #0
   432ac:	sub	r1, r0, #4
   432b0:	sub	sl, r0, #12
   432b4:	ldr	r0, [sp, #44]	; 0x2c
   432b8:	str	r4, [sp, #52]	; 0x34
   432bc:	mov	r9, r0
   432c0:	ldr	r2, [r2, r7, lsl #2]
   432c4:	str	r0, [r3, r7, lsl #2]
   432c8:	add	r8, r8, #1
   432cc:	cmp	r8, #4
   432d0:	sub	r4, r2, #1
   432d4:	ldr	r2, [fp, #8]
   432d8:	str	r4, [r6, r7, lsl #2]
   432dc:	ldr	ip, [r2, r7, lsl #2]
   432e0:	bcs	432f0 <GetDataSlab+0x17474>
   432e4:	mov	r2, ip
   432e8:	mov	r3, r7
   432ec:	b	43388 <GetDataSlab+0x1750c>
   432f0:	vmov.i32	q9, #1	; 0x00000001
   432f4:	mov	r2, ip
   432f8:	vmov.i32	q10, #1	; 0x00000001
   432fc:	vmov.i32	q8, #1	; 0x00000001
   43300:	bic	ip, r7, #3
   43304:	vmov.32	d18[0], r0
   43308:	vmov.32	d20[0], r4
   4330c:	mov	r6, r2
   43310:	vmov.32	d23[1], r2
   43314:	bic	r2, r8, #3
   43318:	mov	r0, sl
   4331c:	vorr	d16, d18, d18
   43320:	vmov.i32	q9, #1	; 0x00000001
   43324:	sub	r3, r7, r2
   43328:	vorr	d18, d20, d20
   4332c:	vld1.32	{d20-d21}, [r0], lr
   43330:	subs	ip, ip, #4
   43334:	vrev64.32	q12, q10
   43338:	vext.8	q12, q12, q12, #8
   4333c:	vext.8	q11, q11, q12, #12
   43340:	vmul.i32	q9, q9, q12
   43344:	vmul.i32	q8, q11, q8
   43348:	vorr	q11, q12, q12
   4334c:	bne	4332c <GetDataSlab+0x174b0>
   43350:	vext.8	q11, q9, q8, #8
   43354:	vext.8	q12, q8, q8, #8
   43358:	cmp	r8, r2
   4335c:	vmul.i32	q0, q9, q11
   43360:	vmul.i32	q1, q8, q12
   43364:	vmul.i32	q8, q0, d0[1]
   43368:	vmul.i32	q9, q1, d2[1]
   4336c:	vmov.32	r4, d16[0]
   43370:	vmov.32	r0, d18[0]
   43374:	bne	43380 <GetDataSlab+0x17504>
   43378:	mov	ip, r6
   4337c:	b	4339c <GetDataSlab+0x17520>
   43380:	vmov.32	r2, d20[0]
   43384:	mov	ip, r6
   43388:	mul	r0, r2, r0
   4338c:	ldr	r2, [r1, r3, lsl #2]
   43390:	subs	r3, r3, #1
   43394:	mul	r4, r4, r2
   43398:	bne	43388 <GetDataSlab+0x1750c>
   4339c:	ldr	r2, [fp, #12]
   433a0:	sub	r3, fp, #176	; 0xb0
   433a4:	sub	r6, fp, #96	; 0x60
   433a8:	add	sl, sl, #4
   433ac:	str	r4, [r6, r7, lsl #2]
   433b0:	str	r0, [r3, r7, lsl #2]
   433b4:	ldr	r4, [sp, #52]	; 0x34
   433b8:	ldr	r2, [r2, r7, lsl #2]
   433bc:	mla	r5, r2, r9, r5
   433c0:	ldr	r2, [fp, #20]
   433c4:	mov	r9, r0
   433c8:	mov	r0, ip
   433cc:	ldr	r2, [r2, r7, lsl #2]
   433d0:	add	r7, r7, #1
   433d4:	mul	r4, r2, r4
   433d8:	ldr	r2, [fp, #24]
   433dc:	str	r4, [sp, #52]	; 0x34
   433e0:	cmp	r7, r2
   433e4:	ldr	r2, [fp, #16]
   433e8:	bne	432c0 <GetDataSlab+0x17444>
   433ec:	ldr	r0, [sp, #56]	; 0x38
   433f0:	ldr	r3, [sp, #24]
   433f4:	add	sl, r0, r5, lsl #3
   433f8:	cmp	r3, #1
   433fc:	bne	4b9d0 <GetDataSlab+0x1fb54>
   43400:	ldr	r0, [sp, #52]	; 0x34
   43404:	ldr	r9, [sp, #48]	; 0x30
   43408:	sub	r1, fp, #96	; 0x60
   4340c:	cmp	r0, #1
   43410:	blt	51ee0 <GetDataSlab+0x26064>
   43414:	ldr	r0, [fp, #20]
   43418:	add	r0, r0, #4
   4341c:	str	r0, [sp, #32]
   43420:	sub	r0, fp, #136	; 0x88
   43424:	orr	r8, r0, #4
   43428:	orr	r0, r1, #4
   4342c:	str	r0, [sp, #28]
   43430:	lsl	r0, r9, #2
   43434:	str	r0, [sp, #56]	; 0x38
   43438:	bic	r0, r9, #1
   4343c:	str	r0, [sp, #36]	; 0x24
   43440:	ldr	r0, [sp, #64]	; 0x40
   43444:	ldr	r1, [r0], #4
   43448:	str	r0, [sp, #64]	; 0x40
   4344c:	mov	r0, #0
   43450:	str	r1, [sp, #40]	; 0x28
   43454:	str	r0, [sp, #60]	; 0x3c
   43458:	cmp	r9, #1
   4345c:	blt	434ec <GetDataSlab+0x17670>
   43460:	mov	r0, #0
   43464:	beq	434bc <GetDataSlab+0x17640>
   43468:	ldr	r0, [sp, #40]	; 0x28
   4346c:	ldr	r4, [sp, #36]	; 0x24
   43470:	ldr	r9, [sp, #68]	; 0x44
   43474:	add	r7, sl, r0, lsl #3
   43478:	vld1.64	{d8-d9}, [r7]!
   4347c:	vmov.32	r0, d9[0]
   43480:	vmov.32	r1, d9[1]
   43484:	bl	5f2b8 <__aeabi_ul2f>
   43488:	vmov.32	r2, d8[0]
   4348c:	vmov.32	r1, d8[1]
   43490:	vmov	s17, r0
   43494:	mov	r0, r2
   43498:	bl	5f2b8 <__aeabi_ul2f>
   4349c:	vmov	s16, r0
   434a0:	subs	r4, r4, #2
   434a4:	vst1.32	{d8}, [r9]!
   434a8:	bne	43478 <GetDataSlab+0x175fc>
   434ac:	ldr	r9, [sp, #48]	; 0x30
   434b0:	ldr	r0, [sp, #36]	; 0x24
   434b4:	cmp	r9, r0
   434b8:	beq	434ec <GetDataSlab+0x17670>
   434bc:	ldr	r1, [sp, #68]	; 0x44
   434c0:	sub	r4, r9, r0
   434c4:	add	r7, r1, r0, lsl #2
   434c8:	ldr	r1, [sp, #40]	; 0x28
   434cc:	add	r1, sl, r1, lsl #3
   434d0:	add	r6, r1, r0, lsl #3
   434d4:	ldrd	r0, [r6]
   434d8:	bl	5f2b8 <__aeabi_ul2f>
   434dc:	str	r0, [r7], #4
   434e0:	subs	r4, r4, #1
   434e4:	add	r6, r6, #8
   434e8:	bne	434d4 <GetDataSlab+0x17658>
   434ec:	ldr	r0, [sp, #44]	; 0x2c
   434f0:	sub	r4, fp, #176	; 0xb0
   434f4:	add	sl, sl, r0, lsl #3
   434f8:	add	r5, r5, r0
   434fc:	ldr	r0, [fp, #24]
   43500:	cmp	r0, #2
   43504:	blt	435b0 <GetDataSlab+0x17734>
   43508:	ldr	r6, [sp, #68]	; 0x44
   4350c:	mov	r1, #0
   43510:	mov	lr, #0
   43514:	mov	ip, r6
   43518:	ldr	r6, [sp, #32]
   4351c:	mov	r0, r1
   43520:	ldr	r1, [r8, r1, lsl #2]
   43524:	add	r1, r1, #1
   43528:	str	r1, [r8, r0, lsl #2]
   4352c:	ldr	r2, [r6, r0, lsl #2]
   43530:	sdiv	r3, r1, r2
   43534:	mls	r1, r3, r2, r1
   43538:	cmp	r1, #0
   4353c:	bne	435bc <GetDataSlab+0x17740>
   43540:	add	r1, r4, r0, lsl #2
   43544:	str	lr, [r8, r0, lsl #2]
   43548:	ldr	r1, [r1, #4]
   4354c:	sdiv	r2, r5, r1
   43550:	mls	r2, r2, r1, r5
   43554:	cmp	r2, #0
   43558:	beq	43578 <GetDataSlab+0x176fc>
   4355c:	ldr	r7, [sp, #64]	; 0x40
   43560:	ldr	r3, [r4, r0, lsl #2]
   43564:	sub	r1, r1, r2
   43568:	ldr	r7, [r7, r0, lsl #2]
   4356c:	mla	r1, r7, r3, r1
   43570:	add	r5, r1, r5
   43574:	b	43594 <GetDataSlab+0x17718>
   43578:	ldr	r1, [sp, #64]	; 0x40
   4357c:	ldr	r1, [r1, r0, lsl #2]
   43580:	cmp	r1, #0
   43584:	beq	43598 <GetDataSlab+0x1771c>
   43588:	ldr	r2, [r4, r0, lsl #2]
   4358c:	mla	r5, r2, r1, r5
   43590:	mul	r1, r2, r1
   43594:	add	sl, sl, r1, lsl #3
   43598:	ldr	r2, [fp, #24]
   4359c:	add	r1, r0, #1
   435a0:	add	r0, r0, #2
   435a4:	cmp	r0, r2
   435a8:	blt	4351c <GetDataSlab+0x176a0>
   435ac:	b	435cc <GetDataSlab+0x17750>
   435b0:	ldr	r6, [sp, #68]	; 0x44
   435b4:	mov	ip, r6
   435b8:	b	435cc <GetDataSlab+0x17750>
   435bc:	ldr	r1, [sp, #28]
   435c0:	ldr	r0, [r1, r0, lsl #2]
   435c4:	add	sl, sl, r0, lsl #3
   435c8:	add	r5, r0, r5
   435cc:	ldr	r2, [sp, #60]	; 0x3c
   435d0:	ldr	r0, [sp, #56]	; 0x38
   435d4:	ldr	r1, [sp, #52]	; 0x34
   435d8:	add	r2, r2, r9
   435dc:	add	ip, ip, r0
   435e0:	mov	r0, #0
   435e4:	cmp	r2, r1
   435e8:	str	ip, [sp, #68]	; 0x44
   435ec:	str	r2, [sp, #60]	; 0x3c
   435f0:	blt	43458 <GetDataSlab+0x175dc>
   435f4:	b	2e97c <GetDataSlab+0x2b00>
   435f8:	ldr	r0, [sp, #60]	; 0x3c
   435fc:	cmp	r0, #1
   43600:	blt	51ef4 <GetDataSlab+0x26078>
   43604:	ldr	r0, [fp, #20]
   43608:	ldr	lr, [fp, #16]
   4360c:	add	ip, r0, #4
   43610:	sub	r0, fp, #136	; 0x88
   43614:	orr	r9, r0, #4
   43618:	sub	r0, fp, #96	; 0x60
   4361c:	orr	r0, r0, #4
   43620:	str	r0, [sp, #44]	; 0x2c
   43624:	ldr	r0, [r8], #4
   43628:	str	r0, [sp, #48]	; 0x30
   4362c:	mov	r0, #0
   43630:	str	r0, [sp, #56]	; 0x38
   43634:	ldr	r1, [sp, #48]	; 0x30
   43638:	cmp	r2, #1
   4363c:	add	r0, r1, r5
   43640:	add	r3, sl, r1
   43644:	blt	43698 <GetDataSlab+0x1781c>
   43648:	ldr	r1, [sp, #68]	; 0x44
   4364c:	ldr	r2, [sp, #56]	; 0x38
   43650:	ldr	r6, [fp, #20]
   43654:	mov	r7, #0
   43658:	add	r5, r1, r2
   4365c:	ldrb	r1, [r3]
   43660:	strb	r1, [r5, r7]
   43664:	add	r7, r7, #1
   43668:	ldr	r4, [lr]
   4366c:	ldr	r2, [r6]
   43670:	add	r0, r4, r0
   43674:	add	r3, r3, r4
   43678:	cmp	r7, r2
   4367c:	blt	4365c <GetDataSlab+0x177e0>
   43680:	ldr	r1, [fp, #12]
   43684:	sub	r6, fp, #176	; 0xb0
   43688:	ldr	r5, [r1]
   4368c:	ldr	r1, [fp, #8]
   43690:	ldr	r1, [r1]
   43694:	b	436a4 <GetDataSlab+0x17828>
   43698:	mov	r5, r1
   4369c:	ldr	r1, [sp, #52]	; 0x34
   436a0:	sub	r6, fp, #176	; 0xb0
   436a4:	str	r1, [sp, #52]	; 0x34
   436a8:	mls	r1, r4, r2, r1
   436ac:	str	r5, [sp, #48]	; 0x30
   436b0:	sub	r1, r1, r5
   436b4:	add	r5, r1, r0
   436b8:	ldr	r0, [fp, #24]
   436bc:	add	sl, r3, r1
   436c0:	cmp	r0, #2
   436c4:	blt	43770 <GetDataSlab+0x178f4>
   436c8:	mov	r7, #0
   436cc:	ldr	r1, [r9, r7, lsl #2]
   436d0:	mov	r0, r7
   436d4:	add	r1, r1, #1
   436d8:	str	r1, [r9, r7, lsl #2]
   436dc:	ldr	r3, [ip, r7, lsl #2]
   436e0:	sdiv	r7, r1, r3
   436e4:	mls	r1, r7, r3, r1
   436e8:	cmp	r1, #0
   436ec:	bne	43760 <GetDataSlab+0x178e4>
   436f0:	mov	r1, #0
   436f4:	str	r1, [r9, r0, lsl #2]
   436f8:	add	r1, r6, r0, lsl #2
   436fc:	ldr	r7, [r1, #4]
   43700:	sdiv	r1, r5, r7
   43704:	mls	r1, r1, r7, r5
   43708:	cmp	r1, #0
   4370c:	beq	43734 <GetDataSlab+0x178b8>
   43710:	ldr	r3, [r6, r0, lsl #2]
   43714:	ldr	lr, [r8, r0, lsl #2]
   43718:	sub	r1, r7, r1
   4371c:	sub	r6, fp, #176	; 0xb0
   43720:	mla	r1, lr, r3, r1
   43724:	ldr	lr, [fp, #16]
   43728:	add	r5, r1, r5
   4372c:	add	sl, sl, r1
   43730:	b	43748 <GetDataSlab+0x178cc>
   43734:	ldr	r1, [r8, r0, lsl #2]
   43738:	cmp	r1, #0
   4373c:	ldrne	r3, [r6, r0, lsl #2]
   43740:	mlane	r5, r3, r1, r5
   43744:	mlane	sl, r3, r1, sl
   43748:	ldr	r1, [fp, #24]
   4374c:	add	r7, r0, #1
   43750:	add	r0, r0, #2
   43754:	cmp	r0, r1
   43758:	blt	436cc <GetDataSlab+0x17850>
   4375c:	b	43770 <GetDataSlab+0x178f4>
   43760:	ldr	r1, [sp, #44]	; 0x2c
   43764:	ldr	r0, [r1, r0, lsl #2]
   43768:	add	sl, sl, r0
   4376c:	add	r5, r0, r5
   43770:	ldr	r3, [sp, #56]	; 0x38
   43774:	ldr	r1, [sp, #60]	; 0x3c
   43778:	mov	r0, #0
   4377c:	add	r3, r2, r3
   43780:	cmp	r3, r1
   43784:	str	r3, [sp, #56]	; 0x38
   43788:	blt	43634 <GetDataSlab+0x177b8>
   4378c:	b	2e97c <GetDataSlab+0x2b00>
   43790:	ldr	r0, [sp, #60]	; 0x3c
   43794:	cmp	r0, #1
   43798:	blt	51f08 <GetDataSlab+0x2608c>
   4379c:	ldr	r0, [fp, #20]
   437a0:	ldr	lr, [fp, #16]
   437a4:	add	ip, r0, #4
   437a8:	sub	r0, fp, #136	; 0x88
   437ac:	orr	r9, r0, #4
   437b0:	sub	r0, fp, #96	; 0x60
   437b4:	orr	r0, r0, #4
   437b8:	str	r0, [sp, #44]	; 0x2c
   437bc:	ldr	r0, [r8], #4
   437c0:	str	r0, [sp, #48]	; 0x30
   437c4:	mov	r0, #0
   437c8:	str	r0, [sp, #56]	; 0x38
   437cc:	ldr	r1, [sp, #48]	; 0x30
   437d0:	cmp	r2, #1
   437d4:	add	r0, r1, r5
   437d8:	add	r3, sl, r1, lsl #1
   437dc:	blt	43830 <GetDataSlab+0x179b4>
   437e0:	ldr	r1, [sp, #68]	; 0x44
   437e4:	ldr	r2, [sp, #56]	; 0x38
   437e8:	ldr	r6, [fp, #20]
   437ec:	mov	r7, #0
   437f0:	add	r5, r1, r2
   437f4:	ldrb	r1, [r3]
   437f8:	strb	r1, [r5, r7]
   437fc:	add	r7, r7, #1
   43800:	ldr	r4, [lr]
   43804:	ldr	r2, [r6]
   43808:	add	r0, r4, r0
   4380c:	add	r3, r3, r4, lsl #1
   43810:	cmp	r7, r2
   43814:	blt	437f4 <GetDataSlab+0x17978>
   43818:	ldr	r1, [fp, #12]
   4381c:	sub	r6, fp, #176	; 0xb0
   43820:	ldr	r5, [r1]
   43824:	ldr	r1, [fp, #8]
   43828:	ldr	r1, [r1]
   4382c:	b	4383c <GetDataSlab+0x179c0>
   43830:	mov	r5, r1
   43834:	ldr	r1, [sp, #52]	; 0x34
   43838:	sub	r6, fp, #176	; 0xb0
   4383c:	str	r1, [sp, #52]	; 0x34
   43840:	mls	r1, r4, r2, r1
   43844:	str	r5, [sp, #48]	; 0x30
   43848:	sub	r1, r1, r5
   4384c:	add	r5, r1, r0
   43850:	ldr	r0, [fp, #24]
   43854:	add	sl, r3, r1, lsl #1
   43858:	cmp	r0, #2
   4385c:	blt	4390c <GetDataSlab+0x17a90>
   43860:	mov	r7, #0
   43864:	ldr	r1, [r9, r7, lsl #2]
   43868:	mov	r0, r7
   4386c:	add	r1, r1, #1
   43870:	str	r1, [r9, r7, lsl #2]
   43874:	ldr	r3, [ip, r7, lsl #2]
   43878:	sdiv	r7, r1, r3
   4387c:	mls	r1, r7, r3, r1
   43880:	cmp	r1, #0
   43884:	bne	438fc <GetDataSlab+0x17a80>
   43888:	mov	r1, #0
   4388c:	str	r1, [r9, r0, lsl #2]
   43890:	add	r1, r6, r0, lsl #2
   43894:	ldr	r7, [r1, #4]
   43898:	sdiv	r1, r5, r7
   4389c:	mls	r1, r1, r7, r5
   438a0:	cmp	r1, #0
   438a4:	beq	438c8 <GetDataSlab+0x17a4c>
   438a8:	ldr	r3, [r6, r0, lsl #2]
   438ac:	ldr	lr, [r8, r0, lsl #2]
   438b0:	sub	r1, r7, r1
   438b4:	sub	r6, fp, #176	; 0xb0
   438b8:	mla	r1, lr, r3, r1
   438bc:	ldr	lr, [fp, #16]
   438c0:	add	r5, r1, r5
   438c4:	b	438e0 <GetDataSlab+0x17a64>
   438c8:	ldr	r1, [r8, r0, lsl #2]
   438cc:	cmp	r1, #0
   438d0:	beq	438e4 <GetDataSlab+0x17a68>
   438d4:	ldr	r3, [r6, r0, lsl #2]
   438d8:	mla	r5, r3, r1, r5
   438dc:	mul	r1, r3, r1
   438e0:	add	sl, sl, r1, lsl #1
   438e4:	ldr	r1, [fp, #24]
   438e8:	add	r7, r0, #1
   438ec:	add	r0, r0, #2
   438f0:	cmp	r0, r1
   438f4:	blt	43864 <GetDataSlab+0x179e8>
   438f8:	b	4390c <GetDataSlab+0x17a90>
   438fc:	ldr	r1, [sp, #44]	; 0x2c
   43900:	ldr	r0, [r1, r0, lsl #2]
   43904:	add	sl, sl, r0, lsl #1
   43908:	add	r5, r0, r5
   4390c:	ldr	r3, [sp, #56]	; 0x38
   43910:	ldr	r1, [sp, #60]	; 0x3c
   43914:	mov	r0, #0
   43918:	add	r3, r2, r3
   4391c:	cmp	r3, r1
   43920:	str	r3, [sp, #56]	; 0x38
   43924:	blt	437cc <GetDataSlab+0x17950>
   43928:	b	2e97c <GetDataSlab+0x2b00>
   4392c:	ldr	r0, [sp, #60]	; 0x3c
   43930:	cmp	r0, #1
   43934:	blt	51f1c <GetDataSlab+0x260a0>
   43938:	ldr	r0, [fp, #20]
   4393c:	ldr	lr, [fp, #16]
   43940:	add	ip, r0, #4
   43944:	sub	r0, fp, #136	; 0x88
   43948:	orr	r9, r0, #4
   4394c:	sub	r0, fp, #96	; 0x60
   43950:	orr	r0, r0, #4
   43954:	str	r0, [sp, #44]	; 0x2c
   43958:	ldr	r0, [r8], #4
   4395c:	str	r0, [sp, #48]	; 0x30
   43960:	mov	r0, #0
   43964:	str	r0, [sp, #56]	; 0x38
   43968:	ldr	r1, [sp, #48]	; 0x30
   4396c:	cmp	r2, #1
   43970:	add	r0, r1, r5
   43974:	add	r3, sl, r1, lsl #1
   43978:	blt	439cc <GetDataSlab+0x17b50>
   4397c:	ldr	r1, [sp, #68]	; 0x44
   43980:	ldr	r2, [sp, #56]	; 0x38
   43984:	ldr	r6, [fp, #20]
   43988:	mov	r7, #0
   4398c:	add	r5, r1, r2
   43990:	ldrb	r1, [r3]
   43994:	strb	r1, [r5, r7]
   43998:	add	r7, r7, #1
   4399c:	ldr	r4, [lr]
   439a0:	ldr	r2, [r6]
   439a4:	add	r0, r4, r0
   439a8:	add	r3, r3, r4, lsl #1
   439ac:	cmp	r7, r2
   439b0:	blt	43990 <GetDataSlab+0x17b14>
   439b4:	ldr	r1, [fp, #12]
   439b8:	sub	r6, fp, #176	; 0xb0
   439bc:	ldr	r5, [r1]
   439c0:	ldr	r1, [fp, #8]
   439c4:	ldr	r1, [r1]
   439c8:	b	439d8 <GetDataSlab+0x17b5c>
   439cc:	mov	r5, r1
   439d0:	ldr	r1, [sp, #52]	; 0x34
   439d4:	sub	r6, fp, #176	; 0xb0
   439d8:	str	r1, [sp, #52]	; 0x34
   439dc:	mls	r1, r4, r2, r1
   439e0:	str	r5, [sp, #48]	; 0x30
   439e4:	sub	r1, r1, r5
   439e8:	add	r5, r1, r0
   439ec:	ldr	r0, [fp, #24]
   439f0:	add	sl, r3, r1, lsl #1
   439f4:	cmp	r0, #2
   439f8:	blt	43aa8 <GetDataSlab+0x17c2c>
   439fc:	mov	r7, #0
   43a00:	ldr	r1, [r9, r7, lsl #2]
   43a04:	mov	r0, r7
   43a08:	add	r1, r1, #1
   43a0c:	str	r1, [r9, r7, lsl #2]
   43a10:	ldr	r3, [ip, r7, lsl #2]
   43a14:	sdiv	r7, r1, r3
   43a18:	mls	r1, r7, r3, r1
   43a1c:	cmp	r1, #0
   43a20:	bne	43a98 <GetDataSlab+0x17c1c>
   43a24:	mov	r1, #0
   43a28:	str	r1, [r9, r0, lsl #2]
   43a2c:	add	r1, r6, r0, lsl #2
   43a30:	ldr	r7, [r1, #4]
   43a34:	sdiv	r1, r5, r7
   43a38:	mls	r1, r1, r7, r5
   43a3c:	cmp	r1, #0
   43a40:	beq	43a64 <GetDataSlab+0x17be8>
   43a44:	ldr	r3, [r6, r0, lsl #2]
   43a48:	ldr	lr, [r8, r0, lsl #2]
   43a4c:	sub	r1, r7, r1
   43a50:	sub	r6, fp, #176	; 0xb0
   43a54:	mla	r1, lr, r3, r1
   43a58:	ldr	lr, [fp, #16]
   43a5c:	add	r5, r1, r5
   43a60:	b	43a7c <GetDataSlab+0x17c00>
   43a64:	ldr	r1, [r8, r0, lsl #2]
   43a68:	cmp	r1, #0
   43a6c:	beq	43a80 <GetDataSlab+0x17c04>
   43a70:	ldr	r3, [r6, r0, lsl #2]
   43a74:	mla	r5, r3, r1, r5
   43a78:	mul	r1, r3, r1
   43a7c:	add	sl, sl, r1, lsl #1
   43a80:	ldr	r1, [fp, #24]
   43a84:	add	r7, r0, #1
   43a88:	add	r0, r0, #2
   43a8c:	cmp	r0, r1
   43a90:	blt	43a00 <GetDataSlab+0x17b84>
   43a94:	b	43aa8 <GetDataSlab+0x17c2c>
   43a98:	ldr	r1, [sp, #44]	; 0x2c
   43a9c:	ldr	r0, [r1, r0, lsl #2]
   43aa0:	add	sl, sl, r0, lsl #1
   43aa4:	add	r5, r0, r5
   43aa8:	ldr	r3, [sp, #56]	; 0x38
   43aac:	ldr	r1, [sp, #60]	; 0x3c
   43ab0:	mov	r0, #0
   43ab4:	add	r3, r2, r3
   43ab8:	cmp	r3, r1
   43abc:	str	r3, [sp, #56]	; 0x38
   43ac0:	blt	43968 <GetDataSlab+0x17aec>
   43ac4:	b	2e97c <GetDataSlab+0x2b00>
   43ac8:	ldr	r0, [sp, #60]	; 0x3c
   43acc:	cmp	r0, #1
   43ad0:	blt	51f30 <GetDataSlab+0x260b4>
   43ad4:	ldr	r0, [fp, #20]
   43ad8:	ldr	lr, [fp, #16]
   43adc:	add	ip, r0, #4
   43ae0:	sub	r0, fp, #136	; 0x88
   43ae4:	orr	r9, r0, #4
   43ae8:	sub	r0, fp, #96	; 0x60
   43aec:	orr	r0, r0, #4
   43af0:	str	r0, [sp, #44]	; 0x2c
   43af4:	ldr	r0, [r8], #4
   43af8:	str	r0, [sp, #48]	; 0x30
   43afc:	mov	r0, #0
   43b00:	str	r0, [sp, #56]	; 0x38
   43b04:	ldr	r1, [sp, #48]	; 0x30
   43b08:	cmp	r2, #1
   43b0c:	add	r0, r1, r5
   43b10:	add	r3, sl, r1, lsl #2
   43b14:	blt	43b68 <GetDataSlab+0x17cec>
   43b18:	ldr	r1, [sp, #68]	; 0x44
   43b1c:	ldr	r2, [sp, #56]	; 0x38
   43b20:	ldr	r6, [fp, #20]
   43b24:	mov	r7, #0
   43b28:	add	r5, r1, r2
   43b2c:	ldr	r1, [r3]
   43b30:	strb	r1, [r5, r7]
   43b34:	add	r7, r7, #1
   43b38:	ldr	r4, [lr]
   43b3c:	ldr	r2, [r6]
   43b40:	add	r0, r4, r0
   43b44:	add	r3, r3, r4, lsl #2
   43b48:	cmp	r7, r2
   43b4c:	blt	43b2c <GetDataSlab+0x17cb0>
   43b50:	ldr	r1, [fp, #12]
   43b54:	sub	r6, fp, #176	; 0xb0
   43b58:	ldr	r5, [r1]
   43b5c:	ldr	r1, [fp, #8]
   43b60:	ldr	r1, [r1]
   43b64:	b	43b74 <GetDataSlab+0x17cf8>
   43b68:	mov	r5, r1
   43b6c:	ldr	r1, [sp, #52]	; 0x34
   43b70:	sub	r6, fp, #176	; 0xb0
   43b74:	str	r1, [sp, #52]	; 0x34
   43b78:	mls	r1, r4, r2, r1
   43b7c:	str	r5, [sp, #48]	; 0x30
   43b80:	sub	r1, r1, r5
   43b84:	add	r5, r1, r0
   43b88:	ldr	r0, [fp, #24]
   43b8c:	add	sl, r3, r1, lsl #2
   43b90:	cmp	r0, #2
   43b94:	blt	43c44 <GetDataSlab+0x17dc8>
   43b98:	mov	r7, #0
   43b9c:	ldr	r1, [r9, r7, lsl #2]
   43ba0:	mov	r0, r7
   43ba4:	add	r1, r1, #1
   43ba8:	str	r1, [r9, r7, lsl #2]
   43bac:	ldr	r3, [ip, r7, lsl #2]
   43bb0:	sdiv	r7, r1, r3
   43bb4:	mls	r1, r7, r3, r1
   43bb8:	cmp	r1, #0
   43bbc:	bne	43c34 <GetDataSlab+0x17db8>
   43bc0:	mov	r1, #0
   43bc4:	str	r1, [r9, r0, lsl #2]
   43bc8:	add	r1, r6, r0, lsl #2
   43bcc:	ldr	r7, [r1, #4]
   43bd0:	sdiv	r1, r5, r7
   43bd4:	mls	r1, r1, r7, r5
   43bd8:	cmp	r1, #0
   43bdc:	beq	43c00 <GetDataSlab+0x17d84>
   43be0:	ldr	r3, [r6, r0, lsl #2]
   43be4:	ldr	lr, [r8, r0, lsl #2]
   43be8:	sub	r1, r7, r1
   43bec:	sub	r6, fp, #176	; 0xb0
   43bf0:	mla	r1, lr, r3, r1
   43bf4:	ldr	lr, [fp, #16]
   43bf8:	add	r5, r1, r5
   43bfc:	b	43c18 <GetDataSlab+0x17d9c>
   43c00:	ldr	r1, [r8, r0, lsl #2]
   43c04:	cmp	r1, #0
   43c08:	beq	43c1c <GetDataSlab+0x17da0>
   43c0c:	ldr	r3, [r6, r0, lsl #2]
   43c10:	mla	r5, r3, r1, r5
   43c14:	mul	r1, r3, r1
   43c18:	add	sl, sl, r1, lsl #2
   43c1c:	ldr	r1, [fp, #24]
   43c20:	add	r7, r0, #1
   43c24:	add	r0, r0, #2
   43c28:	cmp	r0, r1
   43c2c:	blt	43b9c <GetDataSlab+0x17d20>
   43c30:	b	43c44 <GetDataSlab+0x17dc8>
   43c34:	ldr	r1, [sp, #44]	; 0x2c
   43c38:	ldr	r0, [r1, r0, lsl #2]
   43c3c:	add	sl, sl, r0, lsl #2
   43c40:	add	r5, r0, r5
   43c44:	ldr	r3, [sp, #56]	; 0x38
   43c48:	ldr	r1, [sp, #60]	; 0x3c
   43c4c:	mov	r0, #0
   43c50:	add	r3, r2, r3
   43c54:	cmp	r3, r1
   43c58:	str	r3, [sp, #56]	; 0x38
   43c5c:	blt	43b04 <GetDataSlab+0x17c88>
   43c60:	b	2e97c <GetDataSlab+0x2b00>
   43c64:	ldr	r0, [sp, #60]	; 0x3c
   43c68:	cmp	r0, #1
   43c6c:	blt	51f44 <GetDataSlab+0x260c8>
   43c70:	ldr	r0, [fp, #20]
   43c74:	ldr	lr, [fp, #16]
   43c78:	add	ip, r0, #4
   43c7c:	sub	r0, fp, #136	; 0x88
   43c80:	orr	r9, r0, #4
   43c84:	sub	r0, fp, #96	; 0x60
   43c88:	orr	r0, r0, #4
   43c8c:	str	r0, [sp, #44]	; 0x2c
   43c90:	ldr	r0, [r8], #4
   43c94:	str	r0, [sp, #48]	; 0x30
   43c98:	mov	r0, #0
   43c9c:	str	r0, [sp, #56]	; 0x38
   43ca0:	ldr	r1, [sp, #48]	; 0x30
   43ca4:	cmp	r2, #1
   43ca8:	add	r0, r1, r5
   43cac:	add	r3, sl, r1, lsl #2
   43cb0:	blt	43d04 <GetDataSlab+0x17e88>
   43cb4:	ldr	r1, [sp, #68]	; 0x44
   43cb8:	ldr	r2, [sp, #56]	; 0x38
   43cbc:	ldr	r6, [fp, #20]
   43cc0:	mov	r7, #0
   43cc4:	add	r5, r1, r2
   43cc8:	ldr	r1, [r3]
   43ccc:	strb	r1, [r5, r7]
   43cd0:	add	r7, r7, #1
   43cd4:	ldr	r4, [lr]
   43cd8:	ldr	r2, [r6]
   43cdc:	add	r0, r4, r0
   43ce0:	add	r3, r3, r4, lsl #2
   43ce4:	cmp	r7, r2
   43ce8:	blt	43cc8 <GetDataSlab+0x17e4c>
   43cec:	ldr	r1, [fp, #12]
   43cf0:	sub	r6, fp, #176	; 0xb0
   43cf4:	ldr	r5, [r1]
   43cf8:	ldr	r1, [fp, #8]
   43cfc:	ldr	r1, [r1]
   43d00:	b	43d10 <GetDataSlab+0x17e94>
   43d04:	mov	r5, r1
   43d08:	ldr	r1, [sp, #52]	; 0x34
   43d0c:	sub	r6, fp, #176	; 0xb0
   43d10:	str	r1, [sp, #52]	; 0x34
   43d14:	mls	r1, r4, r2, r1
   43d18:	str	r5, [sp, #48]	; 0x30
   43d1c:	sub	r1, r1, r5
   43d20:	add	r5, r1, r0
   43d24:	ldr	r0, [fp, #24]
   43d28:	add	sl, r3, r1, lsl #2
   43d2c:	cmp	r0, #2
   43d30:	blt	43de0 <GetDataSlab+0x17f64>
   43d34:	mov	r7, #0
   43d38:	ldr	r1, [r9, r7, lsl #2]
   43d3c:	mov	r0, r7
   43d40:	add	r1, r1, #1
   43d44:	str	r1, [r9, r7, lsl #2]
   43d48:	ldr	r3, [ip, r7, lsl #2]
   43d4c:	sdiv	r7, r1, r3
   43d50:	mls	r1, r7, r3, r1
   43d54:	cmp	r1, #0
   43d58:	bne	43dd0 <GetDataSlab+0x17f54>
   43d5c:	mov	r1, #0
   43d60:	str	r1, [r9, r0, lsl #2]
   43d64:	add	r1, r6, r0, lsl #2
   43d68:	ldr	r7, [r1, #4]
   43d6c:	sdiv	r1, r5, r7
   43d70:	mls	r1, r1, r7, r5
   43d74:	cmp	r1, #0
   43d78:	beq	43d9c <GetDataSlab+0x17f20>
   43d7c:	ldr	r3, [r6, r0, lsl #2]
   43d80:	ldr	lr, [r8, r0, lsl #2]
   43d84:	sub	r1, r7, r1
   43d88:	sub	r6, fp, #176	; 0xb0
   43d8c:	mla	r1, lr, r3, r1
   43d90:	ldr	lr, [fp, #16]
   43d94:	add	r5, r1, r5
   43d98:	b	43db4 <GetDataSlab+0x17f38>
   43d9c:	ldr	r1, [r8, r0, lsl #2]
   43da0:	cmp	r1, #0
   43da4:	beq	43db8 <GetDataSlab+0x17f3c>
   43da8:	ldr	r3, [r6, r0, lsl #2]
   43dac:	mla	r5, r3, r1, r5
   43db0:	mul	r1, r3, r1
   43db4:	add	sl, sl, r1, lsl #2
   43db8:	ldr	r1, [fp, #24]
   43dbc:	add	r7, r0, #1
   43dc0:	add	r0, r0, #2
   43dc4:	cmp	r0, r1
   43dc8:	blt	43d38 <GetDataSlab+0x17ebc>
   43dcc:	b	43de0 <GetDataSlab+0x17f64>
   43dd0:	ldr	r1, [sp, #44]	; 0x2c
   43dd4:	ldr	r0, [r1, r0, lsl #2]
   43dd8:	add	sl, sl, r0, lsl #2
   43ddc:	add	r5, r0, r5
   43de0:	ldr	r3, [sp, #56]	; 0x38
   43de4:	ldr	r1, [sp, #60]	; 0x3c
   43de8:	mov	r0, #0
   43dec:	add	r3, r2, r3
   43df0:	cmp	r3, r1
   43df4:	str	r3, [sp, #56]	; 0x38
   43df8:	blt	43ca0 <GetDataSlab+0x17e24>
   43dfc:	b	2e97c <GetDataSlab+0x2b00>
   43e00:	ldr	r0, [sp, #60]	; 0x3c
   43e04:	cmp	r0, #1
   43e08:	ldr	r0, [fp, #20]
   43e0c:	blt	51f58 <GetDataSlab+0x260dc>
   43e10:	add	r9, r0, #4
   43e14:	sub	r0, fp, #136	; 0x88
   43e18:	ldr	lr, [fp, #16]
   43e1c:	orr	sl, r0, #4
   43e20:	sub	r0, fp, #96	; 0x60
   43e24:	orr	r0, r0, #4
   43e28:	str	r0, [sp, #44]	; 0x2c
   43e2c:	ldr	r0, [r8], #4
   43e30:	str	r0, [sp, #48]	; 0x30
   43e34:	mov	r0, #0
   43e38:	str	r0, [sp, #56]	; 0x38
   43e3c:	ldr	r1, [sp, #48]	; 0x30
   43e40:	cmp	r2, #1
   43e44:	add	r0, r1, r5
   43e48:	add	r3, ip, r1, lsl #2
   43e4c:	blt	43ea8 <GetDataSlab+0x1802c>
   43e50:	ldr	r1, [sp, #68]	; 0x44
   43e54:	ldr	r2, [sp, #56]	; 0x38
   43e58:	ldr	r6, [fp, #20]
   43e5c:	mov	r7, #0
   43e60:	add	r5, r1, r2
   43e64:	vldr	s0, [r3]
   43e68:	vcvt.s32.f32	s0, s0
   43e6c:	vmov	r1, s0
   43e70:	strb	r1, [r5, r7]
   43e74:	add	r7, r7, #1
   43e78:	ldr	r4, [lr]
   43e7c:	ldr	r2, [r6]
   43e80:	add	r0, r4, r0
   43e84:	add	r3, r3, r4, lsl #2
   43e88:	cmp	r7, r2
   43e8c:	blt	43e64 <GetDataSlab+0x17fe8>
   43e90:	ldr	r1, [fp, #12]
   43e94:	sub	r6, fp, #176	; 0xb0
   43e98:	ldr	r5, [r1]
   43e9c:	ldr	r1, [fp, #8]
   43ea0:	ldr	r1, [r1]
   43ea4:	b	43eb4 <GetDataSlab+0x18038>
   43ea8:	mov	r5, r1
   43eac:	ldr	r1, [sp, #52]	; 0x34
   43eb0:	sub	r6, fp, #176	; 0xb0
   43eb4:	str	r1, [sp, #52]	; 0x34
   43eb8:	mls	r1, r4, r2, r1
   43ebc:	str	r5, [sp, #48]	; 0x30
   43ec0:	sub	r1, r1, r5
   43ec4:	add	r5, r1, r0
   43ec8:	ldr	r0, [fp, #24]
   43ecc:	add	ip, r3, r1, lsl #2
   43ed0:	cmp	r0, #2
   43ed4:	blt	43f84 <GetDataSlab+0x18108>
   43ed8:	mov	r7, #0
   43edc:	ldr	r1, [sl, r7, lsl #2]
   43ee0:	mov	r0, r7
   43ee4:	add	r1, r1, #1
   43ee8:	str	r1, [sl, r7, lsl #2]
   43eec:	ldr	r3, [r9, r7, lsl #2]
   43ef0:	sdiv	r7, r1, r3
   43ef4:	mls	r1, r7, r3, r1
   43ef8:	cmp	r1, #0
   43efc:	bne	43f74 <GetDataSlab+0x180f8>
   43f00:	mov	r1, #0
   43f04:	str	r1, [sl, r0, lsl #2]
   43f08:	add	r1, r6, r0, lsl #2
   43f0c:	ldr	r7, [r1, #4]
   43f10:	sdiv	r1, r5, r7
   43f14:	mls	r1, r1, r7, r5
   43f18:	cmp	r1, #0
   43f1c:	beq	43f40 <GetDataSlab+0x180c4>
   43f20:	ldr	r3, [r6, r0, lsl #2]
   43f24:	ldr	lr, [r8, r0, lsl #2]
   43f28:	sub	r1, r7, r1
   43f2c:	sub	r6, fp, #176	; 0xb0
   43f30:	mla	r1, lr, r3, r1
   43f34:	ldr	lr, [fp, #16]
   43f38:	add	r5, r1, r5
   43f3c:	b	43f58 <GetDataSlab+0x180dc>
   43f40:	ldr	r1, [r8, r0, lsl #2]
   43f44:	cmp	r1, #0
   43f48:	beq	43f5c <GetDataSlab+0x180e0>
   43f4c:	ldr	r3, [r6, r0, lsl #2]
   43f50:	mla	r5, r3, r1, r5
   43f54:	mul	r1, r3, r1
   43f58:	add	ip, ip, r1, lsl #2
   43f5c:	ldr	r1, [fp, #24]
   43f60:	add	r7, r0, #1
   43f64:	add	r0, r0, #2
   43f68:	cmp	r0, r1
   43f6c:	blt	43edc <GetDataSlab+0x18060>
   43f70:	b	43f84 <GetDataSlab+0x18108>
   43f74:	ldr	r1, [sp, #44]	; 0x2c
   43f78:	ldr	r0, [r1, r0, lsl #2]
   43f7c:	add	ip, ip, r0, lsl #2
   43f80:	add	r5, r0, r5
   43f84:	ldr	r3, [sp, #56]	; 0x38
   43f88:	ldr	r1, [sp, #60]	; 0x3c
   43f8c:	mov	r0, #0
   43f90:	add	r3, r2, r3
   43f94:	cmp	r3, r1
   43f98:	str	r3, [sp, #56]	; 0x38
   43f9c:	blt	43e3c <GetDataSlab+0x17fc0>
   43fa0:	b	2e97c <GetDataSlab+0x2b00>
   43fa4:	ldr	r0, [sp, #60]	; 0x3c
   43fa8:	cmp	r0, #1
   43fac:	ldr	r0, [fp, #20]
   43fb0:	blt	51f6c <GetDataSlab+0x260f0>
   43fb4:	add	r9, r0, #4
   43fb8:	sub	r0, fp, #136	; 0x88
   43fbc:	ldr	lr, [fp, #16]
   43fc0:	orr	sl, r0, #4
   43fc4:	sub	r0, fp, #96	; 0x60
   43fc8:	orr	r0, r0, #4
   43fcc:	str	r0, [sp, #44]	; 0x2c
   43fd0:	ldr	r0, [r8], #4
   43fd4:	str	r0, [sp, #48]	; 0x30
   43fd8:	mov	r0, #0
   43fdc:	str	r0, [sp, #56]	; 0x38
   43fe0:	ldr	r1, [sp, #48]	; 0x30
   43fe4:	cmp	r2, #1
   43fe8:	add	r0, r1, r5
   43fec:	add	r3, ip, r1, lsl #3
   43ff0:	blt	4404c <GetDataSlab+0x181d0>
   43ff4:	ldr	r1, [sp, #68]	; 0x44
   43ff8:	ldr	r2, [sp, #56]	; 0x38
   43ffc:	ldr	r6, [fp, #20]
   44000:	mov	r7, #0
   44004:	add	r5, r1, r2
   44008:	vldr	d16, [r3]
   4400c:	vcvt.s32.f64	s0, d16
   44010:	vmov	r1, s0
   44014:	strb	r1, [r5, r7]
   44018:	add	r7, r7, #1
   4401c:	ldr	r4, [lr]
   44020:	ldr	r2, [r6]
   44024:	add	r0, r4, r0
   44028:	add	r3, r3, r4, lsl #3
   4402c:	cmp	r7, r2
   44030:	blt	44008 <GetDataSlab+0x1818c>
   44034:	ldr	r1, [fp, #12]
   44038:	sub	r6, fp, #176	; 0xb0
   4403c:	ldr	r5, [r1]
   44040:	ldr	r1, [fp, #8]
   44044:	ldr	r1, [r1]
   44048:	b	44058 <GetDataSlab+0x181dc>
   4404c:	mov	r5, r1
   44050:	ldr	r1, [sp, #52]	; 0x34
   44054:	sub	r6, fp, #176	; 0xb0
   44058:	str	r1, [sp, #52]	; 0x34
   4405c:	mls	r1, r4, r2, r1
   44060:	str	r5, [sp, #48]	; 0x30
   44064:	sub	r1, r1, r5
   44068:	add	r5, r1, r0
   4406c:	ldr	r0, [fp, #24]
   44070:	add	ip, r3, r1, lsl #3
   44074:	cmp	r0, #2
   44078:	blt	44128 <GetDataSlab+0x182ac>
   4407c:	mov	r7, #0
   44080:	ldr	r1, [sl, r7, lsl #2]
   44084:	mov	r0, r7
   44088:	add	r1, r1, #1
   4408c:	str	r1, [sl, r7, lsl #2]
   44090:	ldr	r3, [r9, r7, lsl #2]
   44094:	sdiv	r7, r1, r3
   44098:	mls	r1, r7, r3, r1
   4409c:	cmp	r1, #0
   440a0:	bne	44118 <GetDataSlab+0x1829c>
   440a4:	mov	r1, #0
   440a8:	str	r1, [sl, r0, lsl #2]
   440ac:	add	r1, r6, r0, lsl #2
   440b0:	ldr	r7, [r1, #4]
   440b4:	sdiv	r1, r5, r7
   440b8:	mls	r1, r1, r7, r5
   440bc:	cmp	r1, #0
   440c0:	beq	440e4 <GetDataSlab+0x18268>
   440c4:	ldr	r3, [r6, r0, lsl #2]
   440c8:	ldr	lr, [r8, r0, lsl #2]
   440cc:	sub	r1, r7, r1
   440d0:	sub	r6, fp, #176	; 0xb0
   440d4:	mla	r1, lr, r3, r1
   440d8:	ldr	lr, [fp, #16]
   440dc:	add	r5, r1, r5
   440e0:	b	440fc <GetDataSlab+0x18280>
   440e4:	ldr	r1, [r8, r0, lsl #2]
   440e8:	cmp	r1, #0
   440ec:	beq	44100 <GetDataSlab+0x18284>
   440f0:	ldr	r3, [r6, r0, lsl #2]
   440f4:	mla	r5, r3, r1, r5
   440f8:	mul	r1, r3, r1
   440fc:	add	ip, ip, r1, lsl #3
   44100:	ldr	r1, [fp, #24]
   44104:	add	r7, r0, #1
   44108:	add	r0, r0, #2
   4410c:	cmp	r0, r1
   44110:	blt	44080 <GetDataSlab+0x18204>
   44114:	b	44128 <GetDataSlab+0x182ac>
   44118:	ldr	r1, [sp, #44]	; 0x2c
   4411c:	ldr	r0, [r1, r0, lsl #2]
   44120:	add	ip, ip, r0, lsl #3
   44124:	add	r5, r0, r5
   44128:	ldr	r3, [sp, #56]	; 0x38
   4412c:	ldr	r1, [sp, #60]	; 0x3c
   44130:	mov	r0, #0
   44134:	add	r3, r2, r3
   44138:	cmp	r3, r1
   4413c:	str	r3, [sp, #56]	; 0x38
   44140:	blt	43fe0 <GetDataSlab+0x18164>
   44144:	b	2e97c <GetDataSlab+0x2b00>
   44148:	ldr	r0, [sp, #60]	; 0x3c
   4414c:	ldr	ip, [sp, #68]	; 0x44
   44150:	cmp	r0, #1
   44154:	blt	442c8 <GetDataSlab+0x1844c>
   44158:	ldr	r0, [fp, #20]
   4415c:	ldr	r7, [r8], #4
   44160:	mov	r2, #0
   44164:	add	r9, r0, #4
   44168:	sub	r0, fp, #136	; 0x88
   4416c:	orr	lr, r0, #4
   44170:	sub	r0, fp, #96	; 0x60
   44174:	orr	r0, r0, #4
   44178:	str	r0, [sp, #48]	; 0x30
   4417c:	add	r3, r7, r3
   44180:	add	r4, sl, r7, lsl #3
   44184:	cmp	r1, #1
   44188:	str	r2, [sp, #52]	; 0x34
   4418c:	blt	441d8 <GetDataSlab+0x1835c>
   44190:	add	r0, ip, r2
   44194:	ldr	r2, [fp, #20]
   44198:	ldr	r6, [fp, #16]
   4419c:	mov	r7, #0
   441a0:	ldrb	r1, [r4]
   441a4:	strb	r1, [r0, r7]
   441a8:	add	r7, r7, #1
   441ac:	ldr	r5, [r6]
   441b0:	ldr	r1, [r2]
   441b4:	add	r3, r5, r3
   441b8:	add	r4, r4, r5, lsl #3
   441bc:	cmp	r7, r1
   441c0:	blt	441a0 <GetDataSlab+0x18324>
   441c4:	ldr	r0, [fp, #12]
   441c8:	ldr	r7, [r0]
   441cc:	ldr	r0, [fp, #8]
   441d0:	ldr	r0, [r0]
   441d4:	b	441dc <GetDataSlab+0x18360>
   441d8:	ldr	r0, [sp, #32]
   441dc:	str	r0, [sp, #32]
   441e0:	mls	r0, r5, r1, r0
   441e4:	mov	r6, r7
   441e8:	sub	r0, r0, r7
   441ec:	add	sl, r4, r0, lsl #3
   441f0:	add	r3, r0, r3
   441f4:	ldr	r0, [fp, #24]
   441f8:	cmp	r0, #2
   441fc:	blt	442b0 <GetDataSlab+0x18434>
   44200:	mov	r7, #0
   44204:	mov	r0, r7
   44208:	ldr	r7, [lr, r7, lsl #2]
   4420c:	add	r7, r7, #1
   44210:	str	r7, [lr, r0, lsl #2]
   44214:	ldr	r4, [r9, r0, lsl #2]
   44218:	sdiv	r2, r7, r4
   4421c:	mls	r2, r2, r4, r7
   44220:	cmp	r2, #0
   44224:	bne	442a0 <GetDataSlab+0x18424>
   44228:	mov	r2, #0
   4422c:	sub	r4, fp, #176	; 0xb0
   44230:	str	r2, [lr, r0, lsl #2]
   44234:	add	r2, r4, r0, lsl #2
   44238:	ldr	r7, [r2, #4]
   4423c:	sdiv	r2, r3, r7
   44240:	mls	ip, r2, r7, r3
   44244:	cmp	ip, #0
   44248:	beq	44264 <GetDataSlab+0x183e8>
   4424c:	ldr	r2, [r4, r0, lsl #2]
   44250:	ldr	r4, [r8, r0, lsl #2]
   44254:	sub	r7, r7, ip
   44258:	mla	r2, r4, r2, r7
   4425c:	add	r3, r2, r3
   44260:	b	44280 <GetDataSlab+0x18404>
   44264:	ldr	r7, [r8, r0, lsl #2]
   44268:	cmp	r7, #0
   4426c:	beq	44284 <GetDataSlab+0x18408>
   44270:	sub	r2, fp, #176	; 0xb0
   44274:	ldr	r2, [r2, r0, lsl #2]
   44278:	mla	r3, r2, r7, r3
   4427c:	mul	r2, r2, r7
   44280:	add	sl, sl, r2, lsl #3
   44284:	ldr	r2, [fp, #24]
   44288:	ldr	ip, [sp, #68]	; 0x44
   4428c:	add	r7, r0, #1
   44290:	add	r0, r0, #2
   44294:	cmp	r0, r2
   44298:	blt	44204 <GetDataSlab+0x18388>
   4429c:	b	442b0 <GetDataSlab+0x18434>
   442a0:	ldr	r2, [sp, #48]	; 0x30
   442a4:	ldr	r0, [r2, r0, lsl #2]
   442a8:	add	sl, sl, r0, lsl #3
   442ac:	add	r3, r0, r3
   442b0:	ldr	r2, [sp, #52]	; 0x34
   442b4:	ldr	r0, [sp, #60]	; 0x3c
   442b8:	mov	r7, r6
   442bc:	add	r2, r1, r2
   442c0:	cmp	r2, r0
   442c4:	blt	4417c <GetDataSlab+0x18300>
   442c8:	ldr	r3, [fp, #16]
   442cc:	ldr	r9, [sp, #40]	; 0x28
   442d0:	mov	r0, #0
   442d4:	cmp	r9, #13
   442d8:	bne	2e97c <GetDataSlab+0x2b00>
   442dc:	ldr	r4, [r3]
   442e0:	ldr	r9, [fp, #8]
   442e4:	mov	r5, #0
   442e8:	sub	r3, fp, #176	; 0xb0
   442ec:	sub	r0, r4, #1
   442f0:	str	r0, [fp, #-96]	; 0xffffffa0
   442f4:	ldr	r0, [r9]
   442f8:	sub	r9, fp, #96	; 0x60
   442fc:	str	r0, [sp, #48]	; 0x30
   44300:	str	r0, [fp, #-176]	; 0xffffff50
   44304:	ldr	r0, [fp, #20]
   44308:	ldr	r2, [r0]
   4430c:	ldr	r0, [fp, #24]
   44310:	cmp	r0, #2
   44314:	mov	r0, r2
   44318:	str	r2, [sp, #60]	; 0x3c
   4431c:	blt	44494 <GetDataSlab+0x18618>
   44320:	ldr	r0, [fp, #8]
   44324:	ldr	r7, [sp, #48]	; 0x30
   44328:	mov	ip, #1
   4432c:	mvn	sl, #15
   44330:	mov	r5, #0
   44334:	str	r2, [sp, #60]	; 0x3c
   44338:	mov	r1, r0
   4433c:	sub	r0, r0, #4
   44340:	mov	r6, r7
   44344:	sub	lr, r1, #12
   44348:	mov	r1, #0
   4434c:	str	r1, [sp, #52]	; 0x34
   44350:	mov	r1, r2
   44354:	ldr	r1, [fp, #16]
   44358:	ldr	r1, [r1, ip, lsl #2]
   4435c:	str	r7, [r3, ip, lsl #2]
   44360:	sub	r8, r1, #1
   44364:	ldr	r1, [fp, #8]
   44368:	str	r8, [r9, ip, lsl #2]
   4436c:	ldr	r3, [r1, ip, lsl #2]
   44370:	ldr	r1, [sp, #52]	; 0x34
   44374:	add	r1, r1, #1
   44378:	str	r3, [sp, #44]	; 0x2c
   4437c:	cmp	r1, #4
   44380:	str	r1, [sp, #52]	; 0x34
   44384:	bcs	44394 <GetDataSlab+0x18518>
   44388:	mov	r1, r3
   4438c:	mov	r3, ip
   44390:	b	44434 <GetDataSlab+0x185b8>
   44394:	vmov.i32	q9, #1	; 0x00000001
   44398:	vmov.i32	q10, #1	; 0x00000001
   4439c:	vmov.i32	q8, #1	; 0x00000001
   443a0:	bic	r1, r1, #3
   443a4:	vmov.32	d23[1], r3
   443a8:	bic	r9, ip, #3
   443ac:	str	r6, [sp, #36]	; 0x24
   443b0:	vmov.32	d18[0], r7
   443b4:	vmov.32	d20[0], r8
   443b8:	str	r1, [sp, #40]	; 0x28
   443bc:	sub	r3, ip, r1
   443c0:	mov	r1, lr
   443c4:	vorr	d16, d18, d18
   443c8:	vmov.i32	q9, #1	; 0x00000001
   443cc:	vorr	d18, d20, d20
   443d0:	vld1.32	{d20-d21}, [r1], sl
   443d4:	subs	r9, r9, #4
   443d8:	vrev64.32	q12, q10
   443dc:	vext.8	q12, q12, q12, #8
   443e0:	vext.8	q11, q11, q12, #12
   443e4:	vmul.i32	q9, q9, q12
   443e8:	vmul.i32	q8, q11, q8
   443ec:	vorr	q11, q12, q12
   443f0:	bne	443d0 <GetDataSlab+0x18554>
   443f4:	ldr	r1, [sp, #52]	; 0x34
   443f8:	ldr	r6, [sp, #40]	; 0x28
   443fc:	vext.8	q11, q9, q8, #8
   44400:	vext.8	q12, q8, q8, #8
   44404:	vmul.i32	q0, q9, q11
   44408:	vmul.i32	q1, q8, q12
   4440c:	vmul.i32	q8, q0, d0[1]
   44410:	vmul.i32	q9, q1, d2[1]
   44414:	vmov.32	r8, d16[0]
   44418:	vmov.32	r7, d18[0]
   4441c:	cmp	r1, r6
   44420:	bne	4442c <GetDataSlab+0x185b0>
   44424:	ldr	r6, [sp, #36]	; 0x24
   44428:	b	44448 <GetDataSlab+0x185cc>
   4442c:	ldr	r6, [sp, #36]	; 0x24
   44430:	vmov.32	r1, d20[0]
   44434:	mul	r7, r1, r7
   44438:	ldr	r1, [r0, r3, lsl #2]
   4443c:	subs	r3, r3, #1
   44440:	mul	r8, r8, r1
   44444:	bne	44434 <GetDataSlab+0x185b8>
   44448:	ldr	r1, [fp, #12]
   4444c:	sub	r3, fp, #176	; 0xb0
   44450:	sub	r9, fp, #96	; 0x60
   44454:	add	lr, lr, #4
   44458:	str	r7, [r3, ip, lsl #2]
   4445c:	str	r8, [r9, ip, lsl #2]
   44460:	ldr	r1, [r1, ip, lsl #2]
   44464:	mla	r5, r1, r6, r5
   44468:	ldr	r1, [fp, #20]
   4446c:	ldr	r6, [sp, #60]	; 0x3c
   44470:	ldr	r1, [r1, ip, lsl #2]
   44474:	add	ip, ip, #1
   44478:	mul	r6, r1, r6
   4447c:	ldr	r1, [fp, #24]
   44480:	str	r6, [sp, #60]	; 0x3c
   44484:	mov	r6, r7
   44488:	ldr	r7, [sp, #44]	; 0x2c
   4448c:	cmp	ip, r1
   44490:	bne	44354 <GetDataSlab+0x184d8>
   44494:	ldr	r0, [sp, #56]	; 0x38
   44498:	ldr	r9, [fp, #12]
   4449c:	cmp	r4, #1
   444a0:	add	sl, r0, r5, lsl #3
   444a4:	mov	r8, r9
   444a8:	bne	4bb84 <GetDataSlab+0x1fd08>
   444ac:	ldr	r0, [sp, #60]	; 0x3c
   444b0:	cmp	r0, #1
   444b4:	blt	51f80 <GetDataSlab+0x26104>
   444b8:	ldr	r0, [fp, #20]
   444bc:	mov	r9, r8
   444c0:	mov	lr, #0
   444c4:	add	ip, r0, #4
   444c8:	sub	r0, fp, #136	; 0x88
   444cc:	orr	r7, r0, #4
   444d0:	sub	r0, fp, #96	; 0x60
   444d4:	orr	r0, r0, #4
   444d8:	str	r0, [sp, #52]	; 0x34
   444dc:	ldr	r0, [r9], #4
   444e0:	str	r0, [sp, #56]	; 0x38
   444e4:	ldr	r3, [sp, #56]	; 0x38
   444e8:	ldr	r1, [sp, #48]	; 0x30
   444ec:	cmp	r2, #1
   444f0:	add	r8, r3, r5
   444f4:	add	r0, sl, r3, lsl #3
   444f8:	blt	44538 <GetDataSlab+0x186bc>
   444fc:	ldr	r1, [sp, #68]	; 0x44
   44500:	ldr	r4, [fp, #20]
   44504:	mov	r3, r0
   44508:	add	r5, r1, lr
   4450c:	mov	r1, #0
   44510:	ldrb	r2, [r3], #8
   44514:	strb	r2, [r5, r1]
   44518:	add	r1, r1, #1
   4451c:	ldr	r2, [r4]
   44520:	cmp	r1, r2
   44524:	blt	44510 <GetDataSlab+0x18694>
   44528:	ldr	r1, [fp, #12]
   4452c:	ldr	r3, [r1]
   44530:	ldr	r1, [fp, #8]
   44534:	ldr	r1, [r1]
   44538:	str	r1, [sp, #48]	; 0x30
   4453c:	sub	r1, r1, r3
   44540:	str	r3, [sp, #56]	; 0x38
   44544:	add	sl, r0, r1, lsl #3
   44548:	ldr	r0, [fp, #24]
   4454c:	add	r5, r8, r1
   44550:	cmp	r0, #2
   44554:	blt	44604 <GetDataSlab+0x18788>
   44558:	mov	r1, #0
   4455c:	mov	r8, #0
   44560:	mov	r0, r1
   44564:	ldr	r1, [r7, r1, lsl #2]
   44568:	add	r1, r1, #1
   4456c:	str	r1, [r7, r0, lsl #2]
   44570:	ldr	r6, [ip, r0, lsl #2]
   44574:	sdiv	r4, r1, r6
   44578:	mls	r1, r4, r6, r1
   4457c:	cmp	r1, #0
   44580:	bne	445f4 <GetDataSlab+0x18778>
   44584:	sub	r3, fp, #176	; 0xb0
   44588:	str	r8, [r7, r0, lsl #2]
   4458c:	add	r1, r3, r0, lsl #2
   44590:	ldr	r1, [r1, #4]
   44594:	sdiv	r4, r5, r1
   44598:	mls	r6, r4, r1, r5
   4459c:	cmp	r6, #0
   445a0:	beq	445bc <GetDataSlab+0x18740>
   445a4:	ldr	r4, [r3, r0, lsl #2]
   445a8:	ldr	r3, [r9, r0, lsl #2]
   445ac:	sub	r1, r1, r6
   445b0:	mla	r1, r3, r4, r1
   445b4:	add	r5, r1, r5
   445b8:	b	445d8 <GetDataSlab+0x1875c>
   445bc:	ldr	r1, [r9, r0, lsl #2]
   445c0:	cmp	r1, #0
   445c4:	beq	445dc <GetDataSlab+0x18760>
   445c8:	sub	r3, fp, #176	; 0xb0
   445cc:	ldr	r3, [r3, r0, lsl #2]
   445d0:	mla	r5, r3, r1, r5
   445d4:	mul	r1, r3, r1
   445d8:	add	sl, sl, r1, lsl #3
   445dc:	ldr	r3, [fp, #24]
   445e0:	add	r1, r0, #1
   445e4:	add	r0, r0, #2
   445e8:	cmp	r0, r3
   445ec:	blt	44560 <GetDataSlab+0x186e4>
   445f0:	b	44604 <GetDataSlab+0x18788>
   445f4:	ldr	r1, [sp, #52]	; 0x34
   445f8:	ldr	r0, [r1, r0, lsl #2]
   445fc:	add	sl, sl, r0, lsl #3
   44600:	add	r5, r0, r5
   44604:	ldr	r1, [sp, #60]	; 0x3c
   44608:	add	lr, r2, lr
   4460c:	mov	r0, #0
   44610:	cmp	lr, r1
   44614:	blt	444e4 <GetDataSlab+0x18668>
   44618:	b	2e97c <GetDataSlab+0x2b00>
   4461c:	ldr	r0, [sp, #60]	; 0x3c
   44620:	cmp	r0, #1
   44624:	blt	51f94 <GetDataSlab+0x26118>
   44628:	ldr	r0, [fp, #20]
   4462c:	ldr	lr, [fp, #16]
   44630:	add	ip, r0, #4
   44634:	sub	r0, fp, #136	; 0x88
   44638:	orr	r9, r0, #4
   4463c:	sub	r0, fp, #96	; 0x60
   44640:	orr	r0, r0, #4
   44644:	str	r0, [sp, #44]	; 0x2c
   44648:	ldr	r0, [r8], #4
   4464c:	str	r0, [sp, #48]	; 0x30
   44650:	mov	r0, #0
   44654:	str	r0, [sp, #56]	; 0x38
   44658:	ldr	r1, [sp, #48]	; 0x30
   4465c:	cmp	r2, #1
   44660:	add	r0, r1, r5
   44664:	add	r3, sl, r1
   44668:	blt	446bc <GetDataSlab+0x18840>
   4466c:	ldr	r1, [sp, #68]	; 0x44
   44670:	ldr	r2, [sp, #56]	; 0x38
   44674:	ldr	r6, [fp, #20]
   44678:	mov	r7, #0
   4467c:	add	r5, r1, r2
   44680:	ldrb	r1, [r3]
   44684:	strb	r1, [r5, r7]
   44688:	add	r7, r7, #1
   4468c:	ldr	r4, [lr]
   44690:	ldr	r2, [r6]
   44694:	add	r0, r4, r0
   44698:	add	r3, r3, r4
   4469c:	cmp	r7, r2
   446a0:	blt	44680 <GetDataSlab+0x18804>
   446a4:	ldr	r1, [fp, #12]
   446a8:	sub	r6, fp, #176	; 0xb0
   446ac:	ldr	r5, [r1]
   446b0:	ldr	r1, [fp, #8]
   446b4:	ldr	r1, [r1]
   446b8:	b	446c8 <GetDataSlab+0x1884c>
   446bc:	mov	r5, r1
   446c0:	ldr	r1, [sp, #52]	; 0x34
   446c4:	sub	r6, fp, #176	; 0xb0
   446c8:	str	r1, [sp, #52]	; 0x34
   446cc:	mls	r1, r4, r2, r1
   446d0:	str	r5, [sp, #48]	; 0x30
   446d4:	sub	r1, r1, r5
   446d8:	add	r5, r1, r0
   446dc:	ldr	r0, [fp, #24]
   446e0:	add	sl, r3, r1
   446e4:	cmp	r0, #2
   446e8:	blt	44794 <GetDataSlab+0x18918>
   446ec:	mov	r7, #0
   446f0:	ldr	r1, [r9, r7, lsl #2]
   446f4:	mov	r0, r7
   446f8:	add	r1, r1, #1
   446fc:	str	r1, [r9, r7, lsl #2]
   44700:	ldr	r3, [ip, r7, lsl #2]
   44704:	sdiv	r7, r1, r3
   44708:	mls	r1, r7, r3, r1
   4470c:	cmp	r1, #0
   44710:	bne	44784 <GetDataSlab+0x18908>
   44714:	mov	r1, #0
   44718:	str	r1, [r9, r0, lsl #2]
   4471c:	add	r1, r6, r0, lsl #2
   44720:	ldr	r7, [r1, #4]
   44724:	sdiv	r1, r5, r7
   44728:	mls	r1, r1, r7, r5
   4472c:	cmp	r1, #0
   44730:	beq	44758 <GetDataSlab+0x188dc>
   44734:	ldr	r3, [r6, r0, lsl #2]
   44738:	ldr	lr, [r8, r0, lsl #2]
   4473c:	sub	r1, r7, r1
   44740:	sub	r6, fp, #176	; 0xb0
   44744:	mla	r1, lr, r3, r1
   44748:	ldr	lr, [fp, #16]
   4474c:	add	r5, r1, r5
   44750:	add	sl, sl, r1
   44754:	b	4476c <GetDataSlab+0x188f0>
   44758:	ldr	r1, [r8, r0, lsl #2]
   4475c:	cmp	r1, #0
   44760:	ldrne	r3, [r6, r0, lsl #2]
   44764:	mlane	r5, r3, r1, r5
   44768:	mlane	sl, r3, r1, sl
   4476c:	ldr	r1, [fp, #24]
   44770:	add	r7, r0, #1
   44774:	add	r0, r0, #2
   44778:	cmp	r0, r1
   4477c:	blt	446f0 <GetDataSlab+0x18874>
   44780:	b	44794 <GetDataSlab+0x18918>
   44784:	ldr	r1, [sp, #44]	; 0x2c
   44788:	ldr	r0, [r1, r0, lsl #2]
   4478c:	add	sl, sl, r0
   44790:	add	r5, r0, r5
   44794:	ldr	r3, [sp, #56]	; 0x38
   44798:	ldr	r1, [sp, #60]	; 0x3c
   4479c:	mov	r0, #0
   447a0:	add	r3, r2, r3
   447a4:	cmp	r3, r1
   447a8:	str	r3, [sp, #56]	; 0x38
   447ac:	blt	44658 <GetDataSlab+0x187dc>
   447b0:	b	2e97c <GetDataSlab+0x2b00>
   447b4:	ldr	r0, [sp, #60]	; 0x3c
   447b8:	cmp	r0, #1
   447bc:	blt	51fa8 <GetDataSlab+0x2612c>
   447c0:	ldr	r0, [fp, #20]
   447c4:	ldr	lr, [fp, #16]
   447c8:	add	ip, r0, #4
   447cc:	sub	r0, fp, #136	; 0x88
   447d0:	orr	r9, r0, #4
   447d4:	sub	r0, fp, #96	; 0x60
   447d8:	orr	r0, r0, #4
   447dc:	str	r0, [sp, #44]	; 0x2c
   447e0:	ldr	r0, [r8], #4
   447e4:	str	r0, [sp, #48]	; 0x30
   447e8:	mov	r0, #0
   447ec:	str	r0, [sp, #56]	; 0x38
   447f0:	ldr	r1, [sp, #48]	; 0x30
   447f4:	cmp	r2, #1
   447f8:	add	r0, r1, r5
   447fc:	add	r3, sl, r1, lsl #1
   44800:	blt	44854 <GetDataSlab+0x189d8>
   44804:	ldr	r1, [sp, #68]	; 0x44
   44808:	ldr	r2, [sp, #56]	; 0x38
   4480c:	ldr	r6, [fp, #20]
   44810:	mov	r7, #0
   44814:	add	r5, r1, r2
   44818:	ldrb	r1, [r3]
   4481c:	strb	r1, [r5, r7]
   44820:	add	r7, r7, #1
   44824:	ldr	r4, [lr]
   44828:	ldr	r2, [r6]
   4482c:	add	r0, r4, r0
   44830:	add	r3, r3, r4, lsl #1
   44834:	cmp	r7, r2
   44838:	blt	44818 <GetDataSlab+0x1899c>
   4483c:	ldr	r1, [fp, #12]
   44840:	sub	r6, fp, #176	; 0xb0
   44844:	ldr	r5, [r1]
   44848:	ldr	r1, [fp, #8]
   4484c:	ldr	r1, [r1]
   44850:	b	44860 <GetDataSlab+0x189e4>
   44854:	mov	r5, r1
   44858:	ldr	r1, [sp, #52]	; 0x34
   4485c:	sub	r6, fp, #176	; 0xb0
   44860:	str	r1, [sp, #52]	; 0x34
   44864:	mls	r1, r4, r2, r1
   44868:	str	r5, [sp, #48]	; 0x30
   4486c:	sub	r1, r1, r5
   44870:	add	r5, r1, r0
   44874:	ldr	r0, [fp, #24]
   44878:	add	sl, r3, r1, lsl #1
   4487c:	cmp	r0, #2
   44880:	blt	44930 <GetDataSlab+0x18ab4>
   44884:	mov	r7, #0
   44888:	ldr	r1, [r9, r7, lsl #2]
   4488c:	mov	r0, r7
   44890:	add	r1, r1, #1
   44894:	str	r1, [r9, r7, lsl #2]
   44898:	ldr	r3, [ip, r7, lsl #2]
   4489c:	sdiv	r7, r1, r3
   448a0:	mls	r1, r7, r3, r1
   448a4:	cmp	r1, #0
   448a8:	bne	44920 <GetDataSlab+0x18aa4>
   448ac:	mov	r1, #0
   448b0:	str	r1, [r9, r0, lsl #2]
   448b4:	add	r1, r6, r0, lsl #2
   448b8:	ldr	r7, [r1, #4]
   448bc:	sdiv	r1, r5, r7
   448c0:	mls	r1, r1, r7, r5
   448c4:	cmp	r1, #0
   448c8:	beq	448ec <GetDataSlab+0x18a70>
   448cc:	ldr	r3, [r6, r0, lsl #2]
   448d0:	ldr	lr, [r8, r0, lsl #2]
   448d4:	sub	r1, r7, r1
   448d8:	sub	r6, fp, #176	; 0xb0
   448dc:	mla	r1, lr, r3, r1
   448e0:	ldr	lr, [fp, #16]
   448e4:	add	r5, r1, r5
   448e8:	b	44904 <GetDataSlab+0x18a88>
   448ec:	ldr	r1, [r8, r0, lsl #2]
   448f0:	cmp	r1, #0
   448f4:	beq	44908 <GetDataSlab+0x18a8c>
   448f8:	ldr	r3, [r6, r0, lsl #2]
   448fc:	mla	r5, r3, r1, r5
   44900:	mul	r1, r3, r1
   44904:	add	sl, sl, r1, lsl #1
   44908:	ldr	r1, [fp, #24]
   4490c:	add	r7, r0, #1
   44910:	add	r0, r0, #2
   44914:	cmp	r0, r1
   44918:	blt	44888 <GetDataSlab+0x18a0c>
   4491c:	b	44930 <GetDataSlab+0x18ab4>
   44920:	ldr	r1, [sp, #44]	; 0x2c
   44924:	ldr	r0, [r1, r0, lsl #2]
   44928:	add	sl, sl, r0, lsl #1
   4492c:	add	r5, r0, r5
   44930:	ldr	r3, [sp, #56]	; 0x38
   44934:	ldr	r1, [sp, #60]	; 0x3c
   44938:	mov	r0, #0
   4493c:	add	r3, r2, r3
   44940:	cmp	r3, r1
   44944:	str	r3, [sp, #56]	; 0x38
   44948:	blt	447f0 <GetDataSlab+0x18974>
   4494c:	b	2e97c <GetDataSlab+0x2b00>
   44950:	ldr	r0, [sp, #60]	; 0x3c
   44954:	cmp	r0, #1
   44958:	blt	51fbc <GetDataSlab+0x26140>
   4495c:	ldr	r0, [fp, #20]
   44960:	ldr	lr, [fp, #16]
   44964:	add	ip, r0, #4
   44968:	sub	r0, fp, #136	; 0x88
   4496c:	orr	r9, r0, #4
   44970:	sub	r0, fp, #96	; 0x60
   44974:	orr	r0, r0, #4
   44978:	str	r0, [sp, #44]	; 0x2c
   4497c:	ldr	r0, [r8], #4
   44980:	str	r0, [sp, #48]	; 0x30
   44984:	mov	r0, #0
   44988:	str	r0, [sp, #56]	; 0x38
   4498c:	ldr	r1, [sp, #48]	; 0x30
   44990:	cmp	r2, #1
   44994:	add	r0, r1, r5
   44998:	add	r3, sl, r1, lsl #1
   4499c:	blt	449f0 <GetDataSlab+0x18b74>
   449a0:	ldr	r1, [sp, #68]	; 0x44
   449a4:	ldr	r2, [sp, #56]	; 0x38
   449a8:	ldr	r6, [fp, #20]
   449ac:	mov	r7, #0
   449b0:	add	r5, r1, r2
   449b4:	ldrb	r1, [r3]
   449b8:	strb	r1, [r5, r7]
   449bc:	add	r7, r7, #1
   449c0:	ldr	r4, [lr]
   449c4:	ldr	r2, [r6]
   449c8:	add	r0, r4, r0
   449cc:	add	r3, r3, r4, lsl #1
   449d0:	cmp	r7, r2
   449d4:	blt	449b4 <GetDataSlab+0x18b38>
   449d8:	ldr	r1, [fp, #12]
   449dc:	sub	r6, fp, #176	; 0xb0
   449e0:	ldr	r5, [r1]
   449e4:	ldr	r1, [fp, #8]
   449e8:	ldr	r1, [r1]
   449ec:	b	449fc <GetDataSlab+0x18b80>
   449f0:	mov	r5, r1
   449f4:	ldr	r1, [sp, #52]	; 0x34
   449f8:	sub	r6, fp, #176	; 0xb0
   449fc:	str	r1, [sp, #52]	; 0x34
   44a00:	mls	r1, r4, r2, r1
   44a04:	str	r5, [sp, #48]	; 0x30
   44a08:	sub	r1, r1, r5
   44a0c:	add	r5, r1, r0
   44a10:	ldr	r0, [fp, #24]
   44a14:	add	sl, r3, r1, lsl #1
   44a18:	cmp	r0, #2
   44a1c:	blt	44acc <GetDataSlab+0x18c50>
   44a20:	mov	r7, #0
   44a24:	ldr	r1, [r9, r7, lsl #2]
   44a28:	mov	r0, r7
   44a2c:	add	r1, r1, #1
   44a30:	str	r1, [r9, r7, lsl #2]
   44a34:	ldr	r3, [ip, r7, lsl #2]
   44a38:	sdiv	r7, r1, r3
   44a3c:	mls	r1, r7, r3, r1
   44a40:	cmp	r1, #0
   44a44:	bne	44abc <GetDataSlab+0x18c40>
   44a48:	mov	r1, #0
   44a4c:	str	r1, [r9, r0, lsl #2]
   44a50:	add	r1, r6, r0, lsl #2
   44a54:	ldr	r7, [r1, #4]
   44a58:	sdiv	r1, r5, r7
   44a5c:	mls	r1, r1, r7, r5
   44a60:	cmp	r1, #0
   44a64:	beq	44a88 <GetDataSlab+0x18c0c>
   44a68:	ldr	r3, [r6, r0, lsl #2]
   44a6c:	ldr	lr, [r8, r0, lsl #2]
   44a70:	sub	r1, r7, r1
   44a74:	sub	r6, fp, #176	; 0xb0
   44a78:	mla	r1, lr, r3, r1
   44a7c:	ldr	lr, [fp, #16]
   44a80:	add	r5, r1, r5
   44a84:	b	44aa0 <GetDataSlab+0x18c24>
   44a88:	ldr	r1, [r8, r0, lsl #2]
   44a8c:	cmp	r1, #0
   44a90:	beq	44aa4 <GetDataSlab+0x18c28>
   44a94:	ldr	r3, [r6, r0, lsl #2]
   44a98:	mla	r5, r3, r1, r5
   44a9c:	mul	r1, r3, r1
   44aa0:	add	sl, sl, r1, lsl #1
   44aa4:	ldr	r1, [fp, #24]
   44aa8:	add	r7, r0, #1
   44aac:	add	r0, r0, #2
   44ab0:	cmp	r0, r1
   44ab4:	blt	44a24 <GetDataSlab+0x18ba8>
   44ab8:	b	44acc <GetDataSlab+0x18c50>
   44abc:	ldr	r1, [sp, #44]	; 0x2c
   44ac0:	ldr	r0, [r1, r0, lsl #2]
   44ac4:	add	sl, sl, r0, lsl #1
   44ac8:	add	r5, r0, r5
   44acc:	ldr	r3, [sp, #56]	; 0x38
   44ad0:	ldr	r1, [sp, #60]	; 0x3c
   44ad4:	mov	r0, #0
   44ad8:	add	r3, r2, r3
   44adc:	cmp	r3, r1
   44ae0:	str	r3, [sp, #56]	; 0x38
   44ae4:	blt	4498c <GetDataSlab+0x18b10>
   44ae8:	b	2e97c <GetDataSlab+0x2b00>
   44aec:	ldr	r0, [sp, #60]	; 0x3c
   44af0:	cmp	r0, #1
   44af4:	blt	51fd0 <GetDataSlab+0x26154>
   44af8:	ldr	r0, [fp, #20]
   44afc:	ldr	lr, [fp, #16]
   44b00:	add	ip, r0, #4
   44b04:	sub	r0, fp, #136	; 0x88
   44b08:	orr	r9, r0, #4
   44b0c:	sub	r0, fp, #96	; 0x60
   44b10:	orr	r0, r0, #4
   44b14:	str	r0, [sp, #44]	; 0x2c
   44b18:	ldr	r0, [r8], #4
   44b1c:	str	r0, [sp, #48]	; 0x30
   44b20:	mov	r0, #0
   44b24:	str	r0, [sp, #56]	; 0x38
   44b28:	ldr	r1, [sp, #48]	; 0x30
   44b2c:	cmp	r2, #1
   44b30:	add	r0, r1, r5
   44b34:	add	r3, sl, r1, lsl #2
   44b38:	blt	44b8c <GetDataSlab+0x18d10>
   44b3c:	ldr	r1, [sp, #68]	; 0x44
   44b40:	ldr	r2, [sp, #56]	; 0x38
   44b44:	ldr	r6, [fp, #20]
   44b48:	mov	r7, #0
   44b4c:	add	r5, r1, r2
   44b50:	ldr	r1, [r3]
   44b54:	strb	r1, [r5, r7]
   44b58:	add	r7, r7, #1
   44b5c:	ldr	r4, [lr]
   44b60:	ldr	r2, [r6]
   44b64:	add	r0, r4, r0
   44b68:	add	r3, r3, r4, lsl #2
   44b6c:	cmp	r7, r2
   44b70:	blt	44b50 <GetDataSlab+0x18cd4>
   44b74:	ldr	r1, [fp, #12]
   44b78:	sub	r6, fp, #176	; 0xb0
   44b7c:	ldr	r5, [r1]
   44b80:	ldr	r1, [fp, #8]
   44b84:	ldr	r1, [r1]
   44b88:	b	44b98 <GetDataSlab+0x18d1c>
   44b8c:	mov	r5, r1
   44b90:	ldr	r1, [sp, #52]	; 0x34
   44b94:	sub	r6, fp, #176	; 0xb0
   44b98:	str	r1, [sp, #52]	; 0x34
   44b9c:	mls	r1, r4, r2, r1
   44ba0:	str	r5, [sp, #48]	; 0x30
   44ba4:	sub	r1, r1, r5
   44ba8:	add	r5, r1, r0
   44bac:	ldr	r0, [fp, #24]
   44bb0:	add	sl, r3, r1, lsl #2
   44bb4:	cmp	r0, #2
   44bb8:	blt	44c68 <GetDataSlab+0x18dec>
   44bbc:	mov	r7, #0
   44bc0:	ldr	r1, [r9, r7, lsl #2]
   44bc4:	mov	r0, r7
   44bc8:	add	r1, r1, #1
   44bcc:	str	r1, [r9, r7, lsl #2]
   44bd0:	ldr	r3, [ip, r7, lsl #2]
   44bd4:	sdiv	r7, r1, r3
   44bd8:	mls	r1, r7, r3, r1
   44bdc:	cmp	r1, #0
   44be0:	bne	44c58 <GetDataSlab+0x18ddc>
   44be4:	mov	r1, #0
   44be8:	str	r1, [r9, r0, lsl #2]
   44bec:	add	r1, r6, r0, lsl #2
   44bf0:	ldr	r7, [r1, #4]
   44bf4:	sdiv	r1, r5, r7
   44bf8:	mls	r1, r1, r7, r5
   44bfc:	cmp	r1, #0
   44c00:	beq	44c24 <GetDataSlab+0x18da8>
   44c04:	ldr	r3, [r6, r0, lsl #2]
   44c08:	ldr	lr, [r8, r0, lsl #2]
   44c0c:	sub	r1, r7, r1
   44c10:	sub	r6, fp, #176	; 0xb0
   44c14:	mla	r1, lr, r3, r1
   44c18:	ldr	lr, [fp, #16]
   44c1c:	add	r5, r1, r5
   44c20:	b	44c3c <GetDataSlab+0x18dc0>
   44c24:	ldr	r1, [r8, r0, lsl #2]
   44c28:	cmp	r1, #0
   44c2c:	beq	44c40 <GetDataSlab+0x18dc4>
   44c30:	ldr	r3, [r6, r0, lsl #2]
   44c34:	mla	r5, r3, r1, r5
   44c38:	mul	r1, r3, r1
   44c3c:	add	sl, sl, r1, lsl #2
   44c40:	ldr	r1, [fp, #24]
   44c44:	add	r7, r0, #1
   44c48:	add	r0, r0, #2
   44c4c:	cmp	r0, r1
   44c50:	blt	44bc0 <GetDataSlab+0x18d44>
   44c54:	b	44c68 <GetDataSlab+0x18dec>
   44c58:	ldr	r1, [sp, #44]	; 0x2c
   44c5c:	ldr	r0, [r1, r0, lsl #2]
   44c60:	add	sl, sl, r0, lsl #2
   44c64:	add	r5, r0, r5
   44c68:	ldr	r3, [sp, #56]	; 0x38
   44c6c:	ldr	r1, [sp, #60]	; 0x3c
   44c70:	mov	r0, #0
   44c74:	add	r3, r2, r3
   44c78:	cmp	r3, r1
   44c7c:	str	r3, [sp, #56]	; 0x38
   44c80:	blt	44b28 <GetDataSlab+0x18cac>
   44c84:	b	2e97c <GetDataSlab+0x2b00>
   44c88:	ldr	r0, [sp, #60]	; 0x3c
   44c8c:	cmp	r0, #1
   44c90:	blt	51fe4 <GetDataSlab+0x26168>
   44c94:	ldr	r0, [fp, #20]
   44c98:	ldr	lr, [fp, #16]
   44c9c:	add	ip, r0, #4
   44ca0:	sub	r0, fp, #136	; 0x88
   44ca4:	orr	r9, r0, #4
   44ca8:	sub	r0, fp, #96	; 0x60
   44cac:	orr	r0, r0, #4
   44cb0:	str	r0, [sp, #44]	; 0x2c
   44cb4:	ldr	r0, [r8], #4
   44cb8:	str	r0, [sp, #48]	; 0x30
   44cbc:	mov	r0, #0
   44cc0:	str	r0, [sp, #56]	; 0x38
   44cc4:	ldr	r1, [sp, #48]	; 0x30
   44cc8:	cmp	r2, #1
   44ccc:	add	r0, r1, r5
   44cd0:	add	r3, sl, r1, lsl #2
   44cd4:	blt	44d28 <GetDataSlab+0x18eac>
   44cd8:	ldr	r1, [sp, #68]	; 0x44
   44cdc:	ldr	r2, [sp, #56]	; 0x38
   44ce0:	ldr	r6, [fp, #20]
   44ce4:	mov	r7, #0
   44ce8:	add	r5, r1, r2
   44cec:	ldr	r1, [r3]
   44cf0:	strb	r1, [r5, r7]
   44cf4:	add	r7, r7, #1
   44cf8:	ldr	r4, [lr]
   44cfc:	ldr	r2, [r6]
   44d00:	add	r0, r4, r0
   44d04:	add	r3, r3, r4, lsl #2
   44d08:	cmp	r7, r2
   44d0c:	blt	44cec <GetDataSlab+0x18e70>
   44d10:	ldr	r1, [fp, #12]
   44d14:	sub	r6, fp, #176	; 0xb0
   44d18:	ldr	r5, [r1]
   44d1c:	ldr	r1, [fp, #8]
   44d20:	ldr	r1, [r1]
   44d24:	b	44d34 <GetDataSlab+0x18eb8>
   44d28:	mov	r5, r1
   44d2c:	ldr	r1, [sp, #52]	; 0x34
   44d30:	sub	r6, fp, #176	; 0xb0
   44d34:	str	r1, [sp, #52]	; 0x34
   44d38:	mls	r1, r4, r2, r1
   44d3c:	str	r5, [sp, #48]	; 0x30
   44d40:	sub	r1, r1, r5
   44d44:	add	r5, r1, r0
   44d48:	ldr	r0, [fp, #24]
   44d4c:	add	sl, r3, r1, lsl #2
   44d50:	cmp	r0, #2
   44d54:	blt	44e04 <GetDataSlab+0x18f88>
   44d58:	mov	r7, #0
   44d5c:	ldr	r1, [r9, r7, lsl #2]
   44d60:	mov	r0, r7
   44d64:	add	r1, r1, #1
   44d68:	str	r1, [r9, r7, lsl #2]
   44d6c:	ldr	r3, [ip, r7, lsl #2]
   44d70:	sdiv	r7, r1, r3
   44d74:	mls	r1, r7, r3, r1
   44d78:	cmp	r1, #0
   44d7c:	bne	44df4 <GetDataSlab+0x18f78>
   44d80:	mov	r1, #0
   44d84:	str	r1, [r9, r0, lsl #2]
   44d88:	add	r1, r6, r0, lsl #2
   44d8c:	ldr	r7, [r1, #4]
   44d90:	sdiv	r1, r5, r7
   44d94:	mls	r1, r1, r7, r5
   44d98:	cmp	r1, #0
   44d9c:	beq	44dc0 <GetDataSlab+0x18f44>
   44da0:	ldr	r3, [r6, r0, lsl #2]
   44da4:	ldr	lr, [r8, r0, lsl #2]
   44da8:	sub	r1, r7, r1
   44dac:	sub	r6, fp, #176	; 0xb0
   44db0:	mla	r1, lr, r3, r1
   44db4:	ldr	lr, [fp, #16]
   44db8:	add	r5, r1, r5
   44dbc:	b	44dd8 <GetDataSlab+0x18f5c>
   44dc0:	ldr	r1, [r8, r0, lsl #2]
   44dc4:	cmp	r1, #0
   44dc8:	beq	44ddc <GetDataSlab+0x18f60>
   44dcc:	ldr	r3, [r6, r0, lsl #2]
   44dd0:	mla	r5, r3, r1, r5
   44dd4:	mul	r1, r3, r1
   44dd8:	add	sl, sl, r1, lsl #2
   44ddc:	ldr	r1, [fp, #24]
   44de0:	add	r7, r0, #1
   44de4:	add	r0, r0, #2
   44de8:	cmp	r0, r1
   44dec:	blt	44d5c <GetDataSlab+0x18ee0>
   44df0:	b	44e04 <GetDataSlab+0x18f88>
   44df4:	ldr	r1, [sp, #44]	; 0x2c
   44df8:	ldr	r0, [r1, r0, lsl #2]
   44dfc:	add	sl, sl, r0, lsl #2
   44e00:	add	r5, r0, r5
   44e04:	ldr	r3, [sp, #56]	; 0x38
   44e08:	ldr	r1, [sp, #60]	; 0x3c
   44e0c:	mov	r0, #0
   44e10:	add	r3, r2, r3
   44e14:	cmp	r3, r1
   44e18:	str	r3, [sp, #56]	; 0x38
   44e1c:	blt	44cc4 <GetDataSlab+0x18e48>
   44e20:	b	2e97c <GetDataSlab+0x2b00>
   44e24:	ldr	r0, [sp, #60]	; 0x3c
   44e28:	cmp	r0, #1
   44e2c:	ldr	r0, [fp, #20]
   44e30:	blt	51ff8 <GetDataSlab+0x2617c>
   44e34:	add	r9, r0, #4
   44e38:	sub	r0, fp, #136	; 0x88
   44e3c:	ldr	lr, [fp, #16]
   44e40:	orr	sl, r0, #4
   44e44:	sub	r0, fp, #96	; 0x60
   44e48:	orr	r0, r0, #4
   44e4c:	str	r0, [sp, #44]	; 0x2c
   44e50:	ldr	r0, [r8], #4
   44e54:	str	r0, [sp, #48]	; 0x30
   44e58:	mov	r0, #0
   44e5c:	str	r0, [sp, #56]	; 0x38
   44e60:	ldr	r1, [sp, #48]	; 0x30
   44e64:	cmp	r2, #1
   44e68:	add	r0, r1, r5
   44e6c:	add	r3, ip, r1, lsl #2
   44e70:	blt	44ecc <GetDataSlab+0x19050>
   44e74:	ldr	r1, [sp, #68]	; 0x44
   44e78:	ldr	r2, [sp, #56]	; 0x38
   44e7c:	ldr	r6, [fp, #20]
   44e80:	mov	r7, #0
   44e84:	add	r5, r1, r2
   44e88:	vldr	s0, [r3]
   44e8c:	vcvt.u32.f32	s0, s0
   44e90:	vmov	r1, s0
   44e94:	strb	r1, [r5, r7]
   44e98:	add	r7, r7, #1
   44e9c:	ldr	r4, [lr]
   44ea0:	ldr	r2, [r6]
   44ea4:	add	r0, r4, r0
   44ea8:	add	r3, r3, r4, lsl #2
   44eac:	cmp	r7, r2
   44eb0:	blt	44e88 <GetDataSlab+0x1900c>
   44eb4:	ldr	r1, [fp, #12]
   44eb8:	sub	r6, fp, #176	; 0xb0
   44ebc:	ldr	r5, [r1]
   44ec0:	ldr	r1, [fp, #8]
   44ec4:	ldr	r1, [r1]
   44ec8:	b	44ed8 <GetDataSlab+0x1905c>
   44ecc:	mov	r5, r1
   44ed0:	ldr	r1, [sp, #52]	; 0x34
   44ed4:	sub	r6, fp, #176	; 0xb0
   44ed8:	str	r1, [sp, #52]	; 0x34
   44edc:	mls	r1, r4, r2, r1
   44ee0:	str	r5, [sp, #48]	; 0x30
   44ee4:	sub	r1, r1, r5
   44ee8:	add	r5, r1, r0
   44eec:	ldr	r0, [fp, #24]
   44ef0:	add	ip, r3, r1, lsl #2
   44ef4:	cmp	r0, #2
   44ef8:	blt	44fa8 <GetDataSlab+0x1912c>
   44efc:	mov	r7, #0
   44f00:	ldr	r1, [sl, r7, lsl #2]
   44f04:	mov	r0, r7
   44f08:	add	r1, r1, #1
   44f0c:	str	r1, [sl, r7, lsl #2]
   44f10:	ldr	r3, [r9, r7, lsl #2]
   44f14:	sdiv	r7, r1, r3
   44f18:	mls	r1, r7, r3, r1
   44f1c:	cmp	r1, #0
   44f20:	bne	44f98 <GetDataSlab+0x1911c>
   44f24:	mov	r1, #0
   44f28:	str	r1, [sl, r0, lsl #2]
   44f2c:	add	r1, r6, r0, lsl #2
   44f30:	ldr	r7, [r1, #4]
   44f34:	sdiv	r1, r5, r7
   44f38:	mls	r1, r1, r7, r5
   44f3c:	cmp	r1, #0
   44f40:	beq	44f64 <GetDataSlab+0x190e8>
   44f44:	ldr	r3, [r6, r0, lsl #2]
   44f48:	ldr	lr, [r8, r0, lsl #2]
   44f4c:	sub	r1, r7, r1
   44f50:	sub	r6, fp, #176	; 0xb0
   44f54:	mla	r1, lr, r3, r1
   44f58:	ldr	lr, [fp, #16]
   44f5c:	add	r5, r1, r5
   44f60:	b	44f7c <GetDataSlab+0x19100>
   44f64:	ldr	r1, [r8, r0, lsl #2]
   44f68:	cmp	r1, #0
   44f6c:	beq	44f80 <GetDataSlab+0x19104>
   44f70:	ldr	r3, [r6, r0, lsl #2]
   44f74:	mla	r5, r3, r1, r5
   44f78:	mul	r1, r3, r1
   44f7c:	add	ip, ip, r1, lsl #2
   44f80:	ldr	r1, [fp, #24]
   44f84:	add	r7, r0, #1
   44f88:	add	r0, r0, #2
   44f8c:	cmp	r0, r1
   44f90:	blt	44f00 <GetDataSlab+0x19084>
   44f94:	b	44fa8 <GetDataSlab+0x1912c>
   44f98:	ldr	r1, [sp, #44]	; 0x2c
   44f9c:	ldr	r0, [r1, r0, lsl #2]
   44fa0:	add	ip, ip, r0, lsl #2
   44fa4:	add	r5, r0, r5
   44fa8:	ldr	r3, [sp, #56]	; 0x38
   44fac:	ldr	r1, [sp, #60]	; 0x3c
   44fb0:	mov	r0, #0
   44fb4:	add	r3, r2, r3
   44fb8:	cmp	r3, r1
   44fbc:	str	r3, [sp, #56]	; 0x38
   44fc0:	blt	44e60 <GetDataSlab+0x18fe4>
   44fc4:	b	2e97c <GetDataSlab+0x2b00>
   44fc8:	ldr	r0, [sp, #60]	; 0x3c
   44fcc:	cmp	r0, #1
   44fd0:	ldr	r0, [fp, #20]
   44fd4:	blt	5200c <GetDataSlab+0x26190>
   44fd8:	add	r9, r0, #4
   44fdc:	sub	r0, fp, #136	; 0x88
   44fe0:	ldr	lr, [fp, #16]
   44fe4:	orr	sl, r0, #4
   44fe8:	sub	r0, fp, #96	; 0x60
   44fec:	orr	r0, r0, #4
   44ff0:	str	r0, [sp, #44]	; 0x2c
   44ff4:	ldr	r0, [r8], #4
   44ff8:	str	r0, [sp, #48]	; 0x30
   44ffc:	mov	r0, #0
   45000:	str	r0, [sp, #56]	; 0x38
   45004:	ldr	r1, [sp, #48]	; 0x30
   45008:	cmp	r2, #1
   4500c:	add	r0, r1, r5
   45010:	add	r3, ip, r1, lsl #3
   45014:	blt	45070 <GetDataSlab+0x191f4>
   45018:	ldr	r1, [sp, #68]	; 0x44
   4501c:	ldr	r2, [sp, #56]	; 0x38
   45020:	ldr	r6, [fp, #20]
   45024:	mov	r7, #0
   45028:	add	r5, r1, r2
   4502c:	vldr	d16, [r3]
   45030:	vcvt.u32.f64	s0, d16
   45034:	vmov	r1, s0
   45038:	strb	r1, [r5, r7]
   4503c:	add	r7, r7, #1
   45040:	ldr	r4, [lr]
   45044:	ldr	r2, [r6]
   45048:	add	r0, r4, r0
   4504c:	add	r3, r3, r4, lsl #3
   45050:	cmp	r7, r2
   45054:	blt	4502c <GetDataSlab+0x191b0>
   45058:	ldr	r1, [fp, #12]
   4505c:	sub	r6, fp, #176	; 0xb0
   45060:	ldr	r5, [r1]
   45064:	ldr	r1, [fp, #8]
   45068:	ldr	r1, [r1]
   4506c:	b	4507c <GetDataSlab+0x19200>
   45070:	mov	r5, r1
   45074:	ldr	r1, [sp, #52]	; 0x34
   45078:	sub	r6, fp, #176	; 0xb0
   4507c:	str	r1, [sp, #52]	; 0x34
   45080:	mls	r1, r4, r2, r1
   45084:	str	r5, [sp, #48]	; 0x30
   45088:	sub	r1, r1, r5
   4508c:	add	r5, r1, r0
   45090:	ldr	r0, [fp, #24]
   45094:	add	ip, r3, r1, lsl #3
   45098:	cmp	r0, #2
   4509c:	blt	4514c <GetDataSlab+0x192d0>
   450a0:	mov	r7, #0
   450a4:	ldr	r1, [sl, r7, lsl #2]
   450a8:	mov	r0, r7
   450ac:	add	r1, r1, #1
   450b0:	str	r1, [sl, r7, lsl #2]
   450b4:	ldr	r3, [r9, r7, lsl #2]
   450b8:	sdiv	r7, r1, r3
   450bc:	mls	r1, r7, r3, r1
   450c0:	cmp	r1, #0
   450c4:	bne	4513c <GetDataSlab+0x192c0>
   450c8:	mov	r1, #0
   450cc:	str	r1, [sl, r0, lsl #2]
   450d0:	add	r1, r6, r0, lsl #2
   450d4:	ldr	r7, [r1, #4]
   450d8:	sdiv	r1, r5, r7
   450dc:	mls	r1, r1, r7, r5
   450e0:	cmp	r1, #0
   450e4:	beq	45108 <GetDataSlab+0x1928c>
   450e8:	ldr	r3, [r6, r0, lsl #2]
   450ec:	ldr	lr, [r8, r0, lsl #2]
   450f0:	sub	r1, r7, r1
   450f4:	sub	r6, fp, #176	; 0xb0
   450f8:	mla	r1, lr, r3, r1
   450fc:	ldr	lr, [fp, #16]
   45100:	add	r5, r1, r5
   45104:	b	45120 <GetDataSlab+0x192a4>
   45108:	ldr	r1, [r8, r0, lsl #2]
   4510c:	cmp	r1, #0
   45110:	beq	45124 <GetDataSlab+0x192a8>
   45114:	ldr	r3, [r6, r0, lsl #2]
   45118:	mla	r5, r3, r1, r5
   4511c:	mul	r1, r3, r1
   45120:	add	ip, ip, r1, lsl #3
   45124:	ldr	r1, [fp, #24]
   45128:	add	r7, r0, #1
   4512c:	add	r0, r0, #2
   45130:	cmp	r0, r1
   45134:	blt	450a4 <GetDataSlab+0x19228>
   45138:	b	4514c <GetDataSlab+0x192d0>
   4513c:	ldr	r1, [sp, #44]	; 0x2c
   45140:	ldr	r0, [r1, r0, lsl #2]
   45144:	add	ip, ip, r0, lsl #3
   45148:	add	r5, r0, r5
   4514c:	ldr	r3, [sp, #56]	; 0x38
   45150:	ldr	r1, [sp, #60]	; 0x3c
   45154:	mov	r0, #0
   45158:	add	r3, r2, r3
   4515c:	cmp	r3, r1
   45160:	str	r3, [sp, #56]	; 0x38
   45164:	blt	45004 <GetDataSlab+0x19188>
   45168:	b	2e97c <GetDataSlab+0x2b00>
   4516c:	ldr	r0, [sp, #60]	; 0x3c
   45170:	ldr	ip, [sp, #68]	; 0x44
   45174:	cmp	r0, #1
   45178:	blt	452ec <GetDataSlab+0x19470>
   4517c:	ldr	r0, [fp, #20]
   45180:	ldr	r7, [r8], #4
   45184:	mov	r2, #0
   45188:	add	r9, r0, #4
   4518c:	sub	r0, fp, #136	; 0x88
   45190:	orr	lr, r0, #4
   45194:	sub	r0, fp, #96	; 0x60
   45198:	orr	r0, r0, #4
   4519c:	str	r0, [sp, #48]	; 0x30
   451a0:	add	r3, r7, r3
   451a4:	add	r4, sl, r7, lsl #3
   451a8:	cmp	r1, #1
   451ac:	str	r2, [sp, #52]	; 0x34
   451b0:	blt	451fc <GetDataSlab+0x19380>
   451b4:	add	r0, ip, r2
   451b8:	ldr	r2, [fp, #20]
   451bc:	ldr	r6, [fp, #16]
   451c0:	mov	r7, #0
   451c4:	ldrb	r1, [r4]
   451c8:	strb	r1, [r0, r7]
   451cc:	add	r7, r7, #1
   451d0:	ldr	r5, [r6]
   451d4:	ldr	r1, [r2]
   451d8:	add	r3, r5, r3
   451dc:	add	r4, r4, r5, lsl #3
   451e0:	cmp	r7, r1
   451e4:	blt	451c4 <GetDataSlab+0x19348>
   451e8:	ldr	r0, [fp, #12]
   451ec:	ldr	r7, [r0]
   451f0:	ldr	r0, [fp, #8]
   451f4:	ldr	r0, [r0]
   451f8:	b	45200 <GetDataSlab+0x19384>
   451fc:	ldr	r0, [sp, #32]
   45200:	str	r0, [sp, #32]
   45204:	mls	r0, r5, r1, r0
   45208:	mov	r6, r7
   4520c:	sub	r0, r0, r7
   45210:	add	sl, r4, r0, lsl #3
   45214:	add	r3, r0, r3
   45218:	ldr	r0, [fp, #24]
   4521c:	cmp	r0, #2
   45220:	blt	452d4 <GetDataSlab+0x19458>
   45224:	mov	r7, #0
   45228:	mov	r0, r7
   4522c:	ldr	r7, [lr, r7, lsl #2]
   45230:	add	r7, r7, #1
   45234:	str	r7, [lr, r0, lsl #2]
   45238:	ldr	r4, [r9, r0, lsl #2]
   4523c:	sdiv	r2, r7, r4
   45240:	mls	r2, r2, r4, r7
   45244:	cmp	r2, #0
   45248:	bne	452c4 <GetDataSlab+0x19448>
   4524c:	mov	r2, #0
   45250:	sub	r4, fp, #176	; 0xb0
   45254:	str	r2, [lr, r0, lsl #2]
   45258:	add	r2, r4, r0, lsl #2
   4525c:	ldr	r7, [r2, #4]
   45260:	sdiv	r2, r3, r7
   45264:	mls	ip, r2, r7, r3
   45268:	cmp	ip, #0
   4526c:	beq	45288 <GetDataSlab+0x1940c>
   45270:	ldr	r2, [r4, r0, lsl #2]
   45274:	ldr	r4, [r8, r0, lsl #2]
   45278:	sub	r7, r7, ip
   4527c:	mla	r2, r4, r2, r7
   45280:	add	r3, r2, r3
   45284:	b	452a4 <GetDataSlab+0x19428>
   45288:	ldr	r7, [r8, r0, lsl #2]
   4528c:	cmp	r7, #0
   45290:	beq	452a8 <GetDataSlab+0x1942c>
   45294:	sub	r2, fp, #176	; 0xb0
   45298:	ldr	r2, [r2, r0, lsl #2]
   4529c:	mla	r3, r2, r7, r3
   452a0:	mul	r2, r2, r7
   452a4:	add	sl, sl, r2, lsl #3
   452a8:	ldr	r2, [fp, #24]
   452ac:	ldr	ip, [sp, #68]	; 0x44
   452b0:	add	r7, r0, #1
   452b4:	add	r0, r0, #2
   452b8:	cmp	r0, r2
   452bc:	blt	45228 <GetDataSlab+0x193ac>
   452c0:	b	452d4 <GetDataSlab+0x19458>
   452c4:	ldr	r2, [sp, #48]	; 0x30
   452c8:	ldr	r0, [r2, r0, lsl #2]
   452cc:	add	sl, sl, r0, lsl #3
   452d0:	add	r3, r0, r3
   452d4:	ldr	r2, [sp, #52]	; 0x34
   452d8:	ldr	r0, [sp, #60]	; 0x3c
   452dc:	mov	r7, r6
   452e0:	add	r2, r1, r2
   452e4:	cmp	r2, r0
   452e8:	blt	451a0 <GetDataSlab+0x19324>
   452ec:	ldr	r3, [fp, #16]
   452f0:	ldr	r9, [sp, #40]	; 0x28
   452f4:	mov	r0, #0
   452f8:	cmp	r9, #13
   452fc:	bne	2e97c <GetDataSlab+0x2b00>
   45300:	ldr	r4, [r3]
   45304:	ldr	r9, [fp, #8]
   45308:	mov	r5, #0
   4530c:	sub	r3, fp, #176	; 0xb0
   45310:	sub	r0, r4, #1
   45314:	str	r0, [fp, #-96]	; 0xffffffa0
   45318:	ldr	r0, [r9]
   4531c:	sub	r9, fp, #96	; 0x60
   45320:	str	r0, [sp, #48]	; 0x30
   45324:	str	r0, [fp, #-176]	; 0xffffff50
   45328:	ldr	r0, [fp, #20]
   4532c:	ldr	r2, [r0]
   45330:	ldr	r0, [fp, #24]
   45334:	cmp	r0, #2
   45338:	mov	r0, r2
   4533c:	str	r2, [sp, #60]	; 0x3c
   45340:	blt	454b8 <GetDataSlab+0x1963c>
   45344:	ldr	r0, [fp, #8]
   45348:	ldr	r7, [sp, #48]	; 0x30
   4534c:	mov	ip, #1
   45350:	mvn	sl, #15
   45354:	mov	r5, #0
   45358:	str	r2, [sp, #60]	; 0x3c
   4535c:	mov	r1, r0
   45360:	sub	r0, r0, #4
   45364:	mov	r6, r7
   45368:	sub	lr, r1, #12
   4536c:	mov	r1, #0
   45370:	str	r1, [sp, #52]	; 0x34
   45374:	mov	r1, r2
   45378:	ldr	r1, [fp, #16]
   4537c:	ldr	r1, [r1, ip, lsl #2]
   45380:	str	r7, [r3, ip, lsl #2]
   45384:	sub	r8, r1, #1
   45388:	ldr	r1, [fp, #8]
   4538c:	str	r8, [r9, ip, lsl #2]
   45390:	ldr	r3, [r1, ip, lsl #2]
   45394:	ldr	r1, [sp, #52]	; 0x34
   45398:	add	r1, r1, #1
   4539c:	str	r3, [sp, #44]	; 0x2c
   453a0:	cmp	r1, #4
   453a4:	str	r1, [sp, #52]	; 0x34
   453a8:	bcs	453b8 <GetDataSlab+0x1953c>
   453ac:	mov	r1, r3
   453b0:	mov	r3, ip
   453b4:	b	45458 <GetDataSlab+0x195dc>
   453b8:	vmov.i32	q9, #1	; 0x00000001
   453bc:	vmov.i32	q10, #1	; 0x00000001
   453c0:	vmov.i32	q8, #1	; 0x00000001
   453c4:	bic	r1, r1, #3
   453c8:	vmov.32	d23[1], r3
   453cc:	bic	r9, ip, #3
   453d0:	str	r6, [sp, #36]	; 0x24
   453d4:	vmov.32	d18[0], r7
   453d8:	vmov.32	d20[0], r8
   453dc:	str	r1, [sp, #40]	; 0x28
   453e0:	sub	r3, ip, r1
   453e4:	mov	r1, lr
   453e8:	vorr	d16, d18, d18
   453ec:	vmov.i32	q9, #1	; 0x00000001
   453f0:	vorr	d18, d20, d20
   453f4:	vld1.32	{d20-d21}, [r1], sl
   453f8:	subs	r9, r9, #4
   453fc:	vrev64.32	q12, q10
   45400:	vext.8	q12, q12, q12, #8
   45404:	vext.8	q11, q11, q12, #12
   45408:	vmul.i32	q9, q9, q12
   4540c:	vmul.i32	q8, q11, q8
   45410:	vorr	q11, q12, q12
   45414:	bne	453f4 <GetDataSlab+0x19578>
   45418:	ldr	r1, [sp, #52]	; 0x34
   4541c:	ldr	r6, [sp, #40]	; 0x28
   45420:	vext.8	q11, q9, q8, #8
   45424:	vext.8	q12, q8, q8, #8
   45428:	vmul.i32	q0, q9, q11
   4542c:	vmul.i32	q1, q8, q12
   45430:	vmul.i32	q8, q0, d0[1]
   45434:	vmul.i32	q9, q1, d2[1]
   45438:	vmov.32	r8, d16[0]
   4543c:	vmov.32	r7, d18[0]
   45440:	cmp	r1, r6
   45444:	bne	45450 <GetDataSlab+0x195d4>
   45448:	ldr	r6, [sp, #36]	; 0x24
   4544c:	b	4546c <GetDataSlab+0x195f0>
   45450:	ldr	r6, [sp, #36]	; 0x24
   45454:	vmov.32	r1, d20[0]
   45458:	mul	r7, r1, r7
   4545c:	ldr	r1, [r0, r3, lsl #2]
   45460:	subs	r3, r3, #1
   45464:	mul	r8, r8, r1
   45468:	bne	45458 <GetDataSlab+0x195dc>
   4546c:	ldr	r1, [fp, #12]
   45470:	sub	r3, fp, #176	; 0xb0
   45474:	sub	r9, fp, #96	; 0x60
   45478:	add	lr, lr, #4
   4547c:	str	r7, [r3, ip, lsl #2]
   45480:	str	r8, [r9, ip, lsl #2]
   45484:	ldr	r1, [r1, ip, lsl #2]
   45488:	mla	r5, r1, r6, r5
   4548c:	ldr	r1, [fp, #20]
   45490:	ldr	r6, [sp, #60]	; 0x3c
   45494:	ldr	r1, [r1, ip, lsl #2]
   45498:	add	ip, ip, #1
   4549c:	mul	r6, r1, r6
   454a0:	ldr	r1, [fp, #24]
   454a4:	str	r6, [sp, #60]	; 0x3c
   454a8:	mov	r6, r7
   454ac:	ldr	r7, [sp, #44]	; 0x2c
   454b0:	cmp	ip, r1
   454b4:	bne	45378 <GetDataSlab+0x194fc>
   454b8:	ldr	r0, [sp, #56]	; 0x38
   454bc:	ldr	r9, [fp, #12]
   454c0:	cmp	r4, #1
   454c4:	add	sl, r0, r5, lsl #3
   454c8:	mov	r8, r9
   454cc:	bne	4bd20 <GetDataSlab+0x1fea4>
   454d0:	ldr	r0, [sp, #60]	; 0x3c
   454d4:	cmp	r0, #1
   454d8:	blt	52020 <GetDataSlab+0x261a4>
   454dc:	ldr	r0, [fp, #20]
   454e0:	mov	r9, r8
   454e4:	mov	lr, #0
   454e8:	add	ip, r0, #4
   454ec:	sub	r0, fp, #136	; 0x88
   454f0:	orr	r7, r0, #4
   454f4:	sub	r0, fp, #96	; 0x60
   454f8:	orr	r0, r0, #4
   454fc:	str	r0, [sp, #52]	; 0x34
   45500:	ldr	r0, [r9], #4
   45504:	str	r0, [sp, #56]	; 0x38
   45508:	ldr	r3, [sp, #56]	; 0x38
   4550c:	ldr	r1, [sp, #48]	; 0x30
   45510:	cmp	r2, #1
   45514:	add	r8, r3, r5
   45518:	add	r0, sl, r3, lsl #3
   4551c:	blt	4555c <GetDataSlab+0x196e0>
   45520:	ldr	r1, [sp, #68]	; 0x44
   45524:	ldr	r4, [fp, #20]
   45528:	mov	r3, r0
   4552c:	add	r5, r1, lr
   45530:	mov	r1, #0
   45534:	ldrb	r2, [r3], #8
   45538:	strb	r2, [r5, r1]
   4553c:	add	r1, r1, #1
   45540:	ldr	r2, [r4]
   45544:	cmp	r1, r2
   45548:	blt	45534 <GetDataSlab+0x196b8>
   4554c:	ldr	r1, [fp, #12]
   45550:	ldr	r3, [r1]
   45554:	ldr	r1, [fp, #8]
   45558:	ldr	r1, [r1]
   4555c:	str	r1, [sp, #48]	; 0x30
   45560:	sub	r1, r1, r3
   45564:	str	r3, [sp, #56]	; 0x38
   45568:	add	sl, r0, r1, lsl #3
   4556c:	ldr	r0, [fp, #24]
   45570:	add	r5, r8, r1
   45574:	cmp	r0, #2
   45578:	blt	45628 <GetDataSlab+0x197ac>
   4557c:	mov	r1, #0
   45580:	mov	r8, #0
   45584:	mov	r0, r1
   45588:	ldr	r1, [r7, r1, lsl #2]
   4558c:	add	r1, r1, #1
   45590:	str	r1, [r7, r0, lsl #2]
   45594:	ldr	r6, [ip, r0, lsl #2]
   45598:	sdiv	r4, r1, r6
   4559c:	mls	r1, r4, r6, r1
   455a0:	cmp	r1, #0
   455a4:	bne	45618 <GetDataSlab+0x1979c>
   455a8:	sub	r3, fp, #176	; 0xb0
   455ac:	str	r8, [r7, r0, lsl #2]
   455b0:	add	r1, r3, r0, lsl #2
   455b4:	ldr	r1, [r1, #4]
   455b8:	sdiv	r4, r5, r1
   455bc:	mls	r6, r4, r1, r5
   455c0:	cmp	r6, #0
   455c4:	beq	455e0 <GetDataSlab+0x19764>
   455c8:	ldr	r4, [r3, r0, lsl #2]
   455cc:	ldr	r3, [r9, r0, lsl #2]
   455d0:	sub	r1, r1, r6
   455d4:	mla	r1, r3, r4, r1
   455d8:	add	r5, r1, r5
   455dc:	b	455fc <GetDataSlab+0x19780>
   455e0:	ldr	r1, [r9, r0, lsl #2]
   455e4:	cmp	r1, #0
   455e8:	beq	45600 <GetDataSlab+0x19784>
   455ec:	sub	r3, fp, #176	; 0xb0
   455f0:	ldr	r3, [r3, r0, lsl #2]
   455f4:	mla	r5, r3, r1, r5
   455f8:	mul	r1, r3, r1
   455fc:	add	sl, sl, r1, lsl #3
   45600:	ldr	r3, [fp, #24]
   45604:	add	r1, r0, #1
   45608:	add	r0, r0, #2
   4560c:	cmp	r0, r3
   45610:	blt	45584 <GetDataSlab+0x19708>
   45614:	b	45628 <GetDataSlab+0x197ac>
   45618:	ldr	r1, [sp, #52]	; 0x34
   4561c:	ldr	r0, [r1, r0, lsl #2]
   45620:	add	sl, sl, r0, lsl #3
   45624:	add	r5, r0, r5
   45628:	ldr	r1, [sp, #60]	; 0x3c
   4562c:	add	lr, r2, lr
   45630:	mov	r0, #0
   45634:	cmp	lr, r1
   45638:	blt	45508 <GetDataSlab+0x1968c>
   4563c:	b	2e97c <GetDataSlab+0x2b00>
   45640:	ldr	r0, [sp, #60]	; 0x3c
   45644:	ldr	r8, [sp, #40]	; 0x28
   45648:	sub	r2, fp, #96	; 0x60
   4564c:	cmp	r0, #1
   45650:	blt	52034 <GetDataSlab+0x261b8>
   45654:	ldr	r0, [sp, #44]	; 0x2c
   45658:	mls	r0, r8, sl, r0
   4565c:	str	r0, [sp, #52]	; 0x34
   45660:	mul	r0, r8, sl
   45664:	str	r0, [sp, #44]	; 0x2c
   45668:	ldr	r0, [fp, #12]
   4566c:	add	r9, r0, #4
   45670:	ldr	r0, [fp, #20]
   45674:	add	lr, r0, #4
   45678:	sub	r0, fp, #136	; 0x88
   4567c:	orr	r1, r0, #4
   45680:	orr	r0, r2, #4
   45684:	str	r0, [sp, #36]	; 0x24
   45688:	lsl	r0, r8, #1
   4568c:	str	r0, [sp, #48]	; 0x30
   45690:	mov	r0, #0
   45694:	str	r0, [sp, #56]	; 0x38
   45698:	ldr	r0, [fp, #12]
   4569c:	cmp	r8, #1
   456a0:	ldr	r0, [r0]
   456a4:	blt	456e0 <GetDataSlab+0x19864>
   456a8:	ldr	r2, [sp, #44]	; 0x2c
   456ac:	ldr	ip, [sp, #68]	; 0x44
   456b0:	add	r5, r2, r3
   456b4:	add	r3, r4, r2
   456b8:	add	r4, r4, r0
   456bc:	ldrb	r2, [r4], sl
   456c0:	subs	r8, r8, #1
   456c4:	strh	r2, [ip], #2
   456c8:	bne	456bc <GetDataSlab+0x19840>
   456cc:	ldr	ip, [sp, #68]	; 0x44
   456d0:	ldr	r8, [sp, #40]	; 0x28
   456d4:	add	r5, r5, r0
   456d8:	mov	r4, r3
   456dc:	b	456e8 <GetDataSlab+0x1986c>
   456e0:	ldr	ip, [sp, #68]	; 0x44
   456e4:	add	r5, r0, r3
   456e8:	ldr	r2, [sp, #52]	; 0x34
   456ec:	sub	r0, r2, r0
   456f0:	add	r4, r4, r2
   456f4:	add	r3, r5, r0
   456f8:	ldr	r0, [fp, #24]
   456fc:	cmp	r0, #2
   45700:	blt	457ac <GetDataSlab+0x19930>
   45704:	mov	r5, #0
   45708:	ldr	r2, [r1, r5, lsl #2]
   4570c:	mov	r0, r5
   45710:	add	r2, r2, #1
   45714:	str	r2, [r1, r5, lsl #2]
   45718:	ldr	r5, [lr, r5, lsl #2]
   4571c:	sdiv	r6, r2, r5
   45720:	mls	r2, r6, r5, r2
   45724:	cmp	r2, #0
   45728:	bne	4579c <GetDataSlab+0x19920>
   4572c:	mov	r2, #0
   45730:	sub	r6, fp, #176	; 0xb0
   45734:	str	r2, [r1, r0, lsl #2]
   45738:	add	r2, r6, r0, lsl #2
   4573c:	ldr	r5, [r2, #4]
   45740:	sdiv	r2, r3, r5
   45744:	mls	r2, r2, r5, r3
   45748:	cmp	r2, #0
   4574c:	beq	4576c <GetDataSlab+0x198f0>
   45750:	ldr	r6, [r6, r0, lsl #2]
   45754:	ldr	r7, [r9, r0, lsl #2]
   45758:	sub	r2, r5, r2
   4575c:	mla	r2, r7, r6, r2
   45760:	add	r3, r2, r3
   45764:	add	r4, r4, r2
   45768:	b	45784 <GetDataSlab+0x19908>
   4576c:	ldr	r2, [r9, r0, lsl #2]
   45770:	cmp	r2, #0
   45774:	subne	r5, fp, #176	; 0xb0
   45778:	ldrne	r7, [r5, r0, lsl #2]
   4577c:	mlane	r3, r7, r2, r3
   45780:	mlane	r4, r7, r2, r4
   45784:	ldr	r2, [fp, #24]
   45788:	add	r5, r0, #1
   4578c:	add	r0, r0, #2
   45790:	cmp	r0, r2
   45794:	blt	45708 <GetDataSlab+0x1988c>
   45798:	b	457ac <GetDataSlab+0x19930>
   4579c:	ldr	r2, [sp, #36]	; 0x24
   457a0:	ldr	r0, [r2, r0, lsl #2]
   457a4:	add	r4, r4, r0
   457a8:	add	r3, r0, r3
   457ac:	ldr	r7, [sp, #56]	; 0x38
   457b0:	ldr	r0, [sp, #48]	; 0x30
   457b4:	ldr	r2, [sp, #60]	; 0x3c
   457b8:	add	r7, r7, r8
   457bc:	add	ip, ip, r0
   457c0:	mov	r0, #0
   457c4:	cmp	r7, r2
   457c8:	str	ip, [sp, #68]	; 0x44
   457cc:	str	r7, [sp, #56]	; 0x38
   457d0:	blt	45698 <GetDataSlab+0x1981c>
   457d4:	b	2e97c <GetDataSlab+0x2b00>
   457d8:	ldr	r0, [sp, #60]	; 0x3c
   457dc:	ldr	r1, [fp, #12]
   457e0:	ldr	r3, [sp, #52]	; 0x34
   457e4:	cmp	r0, #1
   457e8:	blt	52048 <GetDataSlab+0x261cc>
   457ec:	ldr	r0, [sp, #44]	; 0x2c
   457f0:	ldr	r5, [r1], #4
   457f4:	add	lr, sl, #4
   457f8:	mov	sl, #0
   457fc:	mov	ip, #0
   45800:	mls	r0, r3, r6, r0
   45804:	str	r1, [sp, #64]	; 0x40
   45808:	lsl	r1, r6, #1
   4580c:	str	r5, [sp, #56]	; 0x38
   45810:	sub	r0, r0, r5
   45814:	str	r0, [sp, #48]	; 0x30
   45818:	sub	r0, fp, #136	; 0x88
   4581c:	orr	r7, r0, #4
   45820:	sub	r0, fp, #96	; 0x60
   45824:	orr	r0, r0, #4
   45828:	str	r0, [sp, #36]	; 0x24
   4582c:	mla	r0, r3, r6, r5
   45830:	str	r0, [sp, #40]	; 0x28
   45834:	lsl	r0, r3, #1
   45838:	str	r0, [sp, #44]	; 0x2c
   4583c:	ldr	r0, [sp, #56]	; 0x38
   45840:	cmp	r3, #1
   45844:	blt	4586c <GetDataSlab+0x199f0>
   45848:	ldr	r0, [sp, #56]	; 0x38
   4584c:	ldr	r3, [sp, #52]	; 0x34
   45850:	ldr	r6, [sp, #68]	; 0x44
   45854:	add	r0, r9, r0, lsl #1
   45858:	ldrh	r8, [r0], r1
   4585c:	subs	r3, r3, #1
   45860:	strh	r8, [r6], #2
   45864:	bne	45858 <GetDataSlab+0x199dc>
   45868:	ldr	r0, [sp, #40]	; 0x28
   4586c:	ldr	r4, [sp, #48]	; 0x30
   45870:	add	r3, r9, r4, lsl #1
   45874:	add	r9, r3, r0, lsl #1
   45878:	add	r0, r0, r2
   4587c:	add	r2, r0, r4
   45880:	ldr	r0, [fp, #24]
   45884:	cmp	r0, #2
   45888:	blt	45938 <GetDataSlab+0x19abc>
   4588c:	ldr	r8, [sp, #64]	; 0x40
   45890:	mov	r3, #0
   45894:	mov	r0, r3
   45898:	ldr	r3, [r7, r3, lsl #2]
   4589c:	add	r3, r3, #1
   458a0:	str	r3, [r7, r0, lsl #2]
   458a4:	ldr	r6, [lr, r0, lsl #2]
   458a8:	sdiv	r5, r3, r6
   458ac:	mls	r3, r5, r6, r3
   458b0:	cmp	r3, #0
   458b4:	bne	45928 <GetDataSlab+0x19aac>
   458b8:	sub	r4, fp, #176	; 0xb0
   458bc:	str	sl, [r7, r0, lsl #2]
   458c0:	add	r3, r4, r0, lsl #2
   458c4:	ldr	r3, [r3, #4]
   458c8:	sdiv	r5, r2, r3
   458cc:	mls	r6, r5, r3, r2
   458d0:	cmp	r6, #0
   458d4:	beq	458f0 <GetDataSlab+0x19a74>
   458d8:	ldr	r5, [r4, r0, lsl #2]
   458dc:	ldr	r4, [r8, r0, lsl #2]
   458e0:	sub	r3, r3, r6
   458e4:	mla	r3, r4, r5, r3
   458e8:	add	r2, r3, r2
   458ec:	b	4590c <GetDataSlab+0x19a90>
   458f0:	ldr	r3, [r8, r0, lsl #2]
   458f4:	cmp	r3, #0
   458f8:	beq	45910 <GetDataSlab+0x19a94>
   458fc:	sub	r4, fp, #176	; 0xb0
   45900:	ldr	r4, [r4, r0, lsl #2]
   45904:	mla	r2, r4, r3, r2
   45908:	mul	r3, r4, r3
   4590c:	add	r9, r9, r3, lsl #1
   45910:	ldr	r4, [fp, #24]
   45914:	add	r3, r0, #1
   45918:	add	r0, r0, #2
   4591c:	cmp	r0, r4
   45920:	blt	45894 <GetDataSlab+0x19a18>
   45924:	b	45938 <GetDataSlab+0x19abc>
   45928:	ldr	r3, [sp, #36]	; 0x24
   4592c:	ldr	r0, [r3, r0, lsl #2]
   45930:	add	r9, r9, r0, lsl #1
   45934:	add	r2, r0, r2
   45938:	ldr	r0, [sp, #68]	; 0x44
   4593c:	ldr	r3, [sp, #44]	; 0x2c
   45940:	ldr	r4, [sp, #60]	; 0x3c
   45944:	add	r0, r0, r3
   45948:	ldr	r3, [sp, #52]	; 0x34
   4594c:	str	r0, [sp, #68]	; 0x44
   45950:	mov	r0, #0
   45954:	add	ip, ip, r3
   45958:	cmp	ip, r4
   4595c:	blt	4583c <GetDataSlab+0x199c0>
   45960:	b	2e97c <GetDataSlab+0x2b00>
   45964:	ldr	r0, [sp, #60]	; 0x3c
   45968:	ldr	r1, [fp, #12]
   4596c:	ldr	r3, [sp, #52]	; 0x34
   45970:	cmp	r0, #1
   45974:	blt	5205c <GetDataSlab+0x261e0>
   45978:	ldr	r0, [sp, #44]	; 0x2c
   4597c:	ldr	r5, [r1], #4
   45980:	add	lr, sl, #4
   45984:	mov	sl, #0
   45988:	mov	ip, #0
   4598c:	mls	r0, r3, r6, r0
   45990:	str	r1, [sp, #64]	; 0x40
   45994:	lsl	r1, r6, #1
   45998:	str	r5, [sp, #56]	; 0x38
   4599c:	sub	r0, r0, r5
   459a0:	str	r0, [sp, #48]	; 0x30
   459a4:	sub	r0, fp, #136	; 0x88
   459a8:	orr	r7, r0, #4
   459ac:	sub	r0, fp, #96	; 0x60
   459b0:	orr	r0, r0, #4
   459b4:	str	r0, [sp, #36]	; 0x24
   459b8:	mla	r0, r3, r6, r5
   459bc:	str	r0, [sp, #40]	; 0x28
   459c0:	lsl	r0, r3, #1
   459c4:	str	r0, [sp, #44]	; 0x2c
   459c8:	ldr	r0, [sp, #56]	; 0x38
   459cc:	cmp	r3, #1
   459d0:	blt	459f8 <GetDataSlab+0x19b7c>
   459d4:	ldr	r0, [sp, #56]	; 0x38
   459d8:	ldr	r3, [sp, #52]	; 0x34
   459dc:	ldr	r6, [sp, #68]	; 0x44
   459e0:	add	r0, r9, r0, lsl #1
   459e4:	ldrh	r8, [r0], r1
   459e8:	subs	r3, r3, #1
   459ec:	strh	r8, [r6], #2
   459f0:	bne	459e4 <GetDataSlab+0x19b68>
   459f4:	ldr	r0, [sp, #40]	; 0x28
   459f8:	ldr	r4, [sp, #48]	; 0x30
   459fc:	add	r3, r9, r4, lsl #1
   45a00:	add	r9, r3, r0, lsl #1
   45a04:	add	r0, r0, r2
   45a08:	add	r2, r0, r4
   45a0c:	ldr	r0, [fp, #24]
   45a10:	cmp	r0, #2
   45a14:	blt	45ac4 <GetDataSlab+0x19c48>
   45a18:	ldr	r8, [sp, #64]	; 0x40
   45a1c:	mov	r3, #0
   45a20:	mov	r0, r3
   45a24:	ldr	r3, [r7, r3, lsl #2]
   45a28:	add	r3, r3, #1
   45a2c:	str	r3, [r7, r0, lsl #2]
   45a30:	ldr	r6, [lr, r0, lsl #2]
   45a34:	sdiv	r5, r3, r6
   45a38:	mls	r3, r5, r6, r3
   45a3c:	cmp	r3, #0
   45a40:	bne	45ab4 <GetDataSlab+0x19c38>
   45a44:	sub	r4, fp, #176	; 0xb0
   45a48:	str	sl, [r7, r0, lsl #2]
   45a4c:	add	r3, r4, r0, lsl #2
   45a50:	ldr	r3, [r3, #4]
   45a54:	sdiv	r5, r2, r3
   45a58:	mls	r6, r5, r3, r2
   45a5c:	cmp	r6, #0
   45a60:	beq	45a7c <GetDataSlab+0x19c00>
   45a64:	ldr	r5, [r4, r0, lsl #2]
   45a68:	ldr	r4, [r8, r0, lsl #2]
   45a6c:	sub	r3, r3, r6
   45a70:	mla	r3, r4, r5, r3
   45a74:	add	r2, r3, r2
   45a78:	b	45a98 <GetDataSlab+0x19c1c>
   45a7c:	ldr	r3, [r8, r0, lsl #2]
   45a80:	cmp	r3, #0
   45a84:	beq	45a9c <GetDataSlab+0x19c20>
   45a88:	sub	r4, fp, #176	; 0xb0
   45a8c:	ldr	r4, [r4, r0, lsl #2]
   45a90:	mla	r2, r4, r3, r2
   45a94:	mul	r3, r4, r3
   45a98:	add	r9, r9, r3, lsl #1
   45a9c:	ldr	r4, [fp, #24]
   45aa0:	add	r3, r0, #1
   45aa4:	add	r0, r0, #2
   45aa8:	cmp	r0, r4
   45aac:	blt	45a20 <GetDataSlab+0x19ba4>
   45ab0:	b	45ac4 <GetDataSlab+0x19c48>
   45ab4:	ldr	r3, [sp, #36]	; 0x24
   45ab8:	ldr	r0, [r3, r0, lsl #2]
   45abc:	add	r9, r9, r0, lsl #1
   45ac0:	add	r2, r0, r2
   45ac4:	ldr	r0, [sp, #68]	; 0x44
   45ac8:	ldr	r3, [sp, #44]	; 0x2c
   45acc:	ldr	r4, [sp, #60]	; 0x3c
   45ad0:	add	r0, r0, r3
   45ad4:	ldr	r3, [sp, #52]	; 0x34
   45ad8:	str	r0, [sp, #68]	; 0x44
   45adc:	mov	r0, #0
   45ae0:	add	ip, ip, r3
   45ae4:	cmp	ip, r4
   45ae8:	blt	459c8 <GetDataSlab+0x19b4c>
   45aec:	b	2e97c <GetDataSlab+0x2b00>
   45af0:	ldr	r0, [sp, #60]	; 0x3c
   45af4:	ldr	r2, [sp, #52]	; 0x34
   45af8:	sub	r1, fp, #96	; 0x60
   45afc:	cmp	r0, #1
   45b00:	ldr	r0, [fp, #12]
   45b04:	blt	52070 <GetDataSlab+0x261f4>
   45b08:	add	r9, r0, #4
   45b0c:	ldr	r0, [fp, #20]
   45b10:	ldr	r7, [sp, #44]	; 0x2c
   45b14:	mov	r8, #0
   45b18:	add	ip, r0, #4
   45b1c:	sub	r0, fp, #136	; 0x88
   45b20:	mls	r7, r2, r6, r7
   45b24:	orr	r5, r0, #4
   45b28:	orr	r0, r1, #4
   45b2c:	lsl	r1, r6, #2
   45b30:	str	r7, [sp, #48]	; 0x30
   45b34:	str	r0, [sp, #36]	; 0x24
   45b38:	mul	r0, r2, r6
   45b3c:	str	r0, [sp, #40]	; 0x28
   45b40:	lsl	r0, r2, #1
   45b44:	str	r0, [sp, #44]	; 0x2c
   45b48:	ldr	r0, [fp, #12]
   45b4c:	cmp	r2, #1
   45b50:	ldr	r0, [r0]
   45b54:	blt	45b90 <GetDataSlab+0x19d14>
   45b58:	ldr	r7, [sp, #40]	; 0x28
   45b5c:	ldr	lr, [sp, #68]	; 0x44
   45b60:	add	r4, sl, r0, lsl #2
   45b64:	add	r6, r7, r3
   45b68:	add	r3, sl, r7, lsl #2
   45b6c:	str	r3, [sp, #56]	; 0x38
   45b70:	mov	r3, r2
   45b74:	ldr	r7, [r4], r1
   45b78:	subs	r3, r3, #1
   45b7c:	strh	r7, [lr], #2
   45b80:	bne	45b74 <GetDataSlab+0x19cf8>
   45b84:	ldr	sl, [sp, #56]	; 0x38
   45b88:	add	r2, r6, r0
   45b8c:	b	45b94 <GetDataSlab+0x19d18>
   45b90:	add	r2, r0, r3
   45b94:	ldr	r3, [sp, #48]	; 0x30
   45b98:	sub	lr, fp, #176	; 0xb0
   45b9c:	sub	r0, r3, r0
   45ba0:	add	sl, sl, r3, lsl #2
   45ba4:	add	r3, r2, r0
   45ba8:	ldr	r0, [fp, #24]
   45bac:	cmp	r0, #2
   45bb0:	blt	45c58 <GetDataSlab+0x19ddc>
   45bb4:	mov	r2, #0
   45bb8:	mov	r0, r2
   45bbc:	ldr	r2, [r5, r2, lsl #2]
   45bc0:	add	r2, r2, #1
   45bc4:	str	r2, [r5, r0, lsl #2]
   45bc8:	ldr	r7, [ip, r0, lsl #2]
   45bcc:	sdiv	r6, r2, r7
   45bd0:	mls	r2, r6, r7, r2
   45bd4:	cmp	r2, #0
   45bd8:	bne	45c48 <GetDataSlab+0x19dcc>
   45bdc:	mov	r2, #0
   45be0:	str	r2, [r5, r0, lsl #2]
   45be4:	add	r2, lr, r0, lsl #2
   45be8:	ldr	r2, [r2, #4]
   45bec:	sdiv	r7, r3, r2
   45bf0:	mls	r7, r7, r2, r3
   45bf4:	cmp	r7, #0
   45bf8:	beq	45c14 <GetDataSlab+0x19d98>
   45bfc:	ldr	r6, [lr, r0, lsl #2]
   45c00:	ldr	r4, [r9, r0, lsl #2]
   45c04:	sub	r2, r2, r7
   45c08:	mla	r2, r4, r6, r2
   45c0c:	add	r3, r2, r3
   45c10:	b	45c2c <GetDataSlab+0x19db0>
   45c14:	ldr	r2, [r9, r0, lsl #2]
   45c18:	cmp	r2, #0
   45c1c:	beq	45c30 <GetDataSlab+0x19db4>
   45c20:	ldr	r7, [lr, r0, lsl #2]
   45c24:	mla	r3, r7, r2, r3
   45c28:	mul	r2, r7, r2
   45c2c:	add	sl, sl, r2, lsl #2
   45c30:	ldr	r7, [fp, #24]
   45c34:	add	r2, r0, #1
   45c38:	add	r0, r0, #2
   45c3c:	cmp	r0, r7
   45c40:	blt	45bb8 <GetDataSlab+0x19d3c>
   45c44:	b	45c58 <GetDataSlab+0x19ddc>
   45c48:	ldr	r2, [sp, #36]	; 0x24
   45c4c:	ldr	r0, [r2, r0, lsl #2]
   45c50:	add	sl, sl, r0, lsl #2
   45c54:	add	r3, r0, r3
   45c58:	ldr	r0, [sp, #68]	; 0x44
   45c5c:	ldr	r2, [sp, #44]	; 0x2c
   45c60:	ldr	r7, [sp, #60]	; 0x3c
   45c64:	add	r0, r0, r2
   45c68:	ldr	r2, [sp, #52]	; 0x34
   45c6c:	str	r0, [sp, #68]	; 0x44
   45c70:	mov	r0, #0
   45c74:	add	r8, r8, r2
   45c78:	cmp	r8, r7
   45c7c:	blt	45b48 <GetDataSlab+0x19ccc>
   45c80:	b	2e97c <GetDataSlab+0x2b00>
   45c84:	ldr	r0, [sp, #60]	; 0x3c
   45c88:	ldr	r2, [sp, #52]	; 0x34
   45c8c:	sub	r1, fp, #96	; 0x60
   45c90:	cmp	r0, #1
   45c94:	ldr	r0, [fp, #12]
   45c98:	blt	52084 <GetDataSlab+0x26208>
   45c9c:	add	r9, r0, #4
   45ca0:	ldr	r0, [fp, #20]
   45ca4:	ldr	r7, [sp, #44]	; 0x2c
   45ca8:	mov	r8, #0
   45cac:	add	ip, r0, #4
   45cb0:	sub	r0, fp, #136	; 0x88
   45cb4:	mls	r7, r2, r6, r7
   45cb8:	orr	r5, r0, #4
   45cbc:	orr	r0, r1, #4
   45cc0:	lsl	r1, r6, #2
   45cc4:	str	r7, [sp, #48]	; 0x30
   45cc8:	str	r0, [sp, #36]	; 0x24
   45ccc:	mul	r0, r2, r6
   45cd0:	str	r0, [sp, #40]	; 0x28
   45cd4:	lsl	r0, r2, #1
   45cd8:	str	r0, [sp, #44]	; 0x2c
   45cdc:	ldr	r0, [fp, #12]
   45ce0:	cmp	r2, #1
   45ce4:	ldr	r0, [r0]
   45ce8:	blt	45d24 <GetDataSlab+0x19ea8>
   45cec:	ldr	r7, [sp, #40]	; 0x28
   45cf0:	ldr	lr, [sp, #68]	; 0x44
   45cf4:	add	r4, sl, r0, lsl #2
   45cf8:	add	r6, r7, r3
   45cfc:	add	r3, sl, r7, lsl #2
   45d00:	str	r3, [sp, #56]	; 0x38
   45d04:	mov	r3, r2
   45d08:	ldr	r7, [r4], r1
   45d0c:	subs	r3, r3, #1
   45d10:	strh	r7, [lr], #2
   45d14:	bne	45d08 <GetDataSlab+0x19e8c>
   45d18:	ldr	sl, [sp, #56]	; 0x38
   45d1c:	add	r2, r6, r0
   45d20:	b	45d28 <GetDataSlab+0x19eac>
   45d24:	add	r2, r0, r3
   45d28:	ldr	r3, [sp, #48]	; 0x30
   45d2c:	sub	lr, fp, #176	; 0xb0
   45d30:	sub	r0, r3, r0
   45d34:	add	sl, sl, r3, lsl #2
   45d38:	add	r3, r2, r0
   45d3c:	ldr	r0, [fp, #24]
   45d40:	cmp	r0, #2
   45d44:	blt	45dec <GetDataSlab+0x19f70>
   45d48:	mov	r2, #0
   45d4c:	mov	r0, r2
   45d50:	ldr	r2, [r5, r2, lsl #2]
   45d54:	add	r2, r2, #1
   45d58:	str	r2, [r5, r0, lsl #2]
   45d5c:	ldr	r7, [ip, r0, lsl #2]
   45d60:	sdiv	r6, r2, r7
   45d64:	mls	r2, r6, r7, r2
   45d68:	cmp	r2, #0
   45d6c:	bne	45ddc <GetDataSlab+0x19f60>
   45d70:	mov	r2, #0
   45d74:	str	r2, [r5, r0, lsl #2]
   45d78:	add	r2, lr, r0, lsl #2
   45d7c:	ldr	r2, [r2, #4]
   45d80:	sdiv	r7, r3, r2
   45d84:	mls	r7, r7, r2, r3
   45d88:	cmp	r7, #0
   45d8c:	beq	45da8 <GetDataSlab+0x19f2c>
   45d90:	ldr	r6, [lr, r0, lsl #2]
   45d94:	ldr	r4, [r9, r0, lsl #2]
   45d98:	sub	r2, r2, r7
   45d9c:	mla	r2, r4, r6, r2
   45da0:	add	r3, r2, r3
   45da4:	b	45dc0 <GetDataSlab+0x19f44>
   45da8:	ldr	r2, [r9, r0, lsl #2]
   45dac:	cmp	r2, #0
   45db0:	beq	45dc4 <GetDataSlab+0x19f48>
   45db4:	ldr	r7, [lr, r0, lsl #2]
   45db8:	mla	r3, r7, r2, r3
   45dbc:	mul	r2, r7, r2
   45dc0:	add	sl, sl, r2, lsl #2
   45dc4:	ldr	r7, [fp, #24]
   45dc8:	add	r2, r0, #1
   45dcc:	add	r0, r0, #2
   45dd0:	cmp	r0, r7
   45dd4:	blt	45d4c <GetDataSlab+0x19ed0>
   45dd8:	b	45dec <GetDataSlab+0x19f70>
   45ddc:	ldr	r2, [sp, #36]	; 0x24
   45de0:	ldr	r0, [r2, r0, lsl #2]
   45de4:	add	sl, sl, r0, lsl #2
   45de8:	add	r3, r0, r3
   45dec:	ldr	r0, [sp, #68]	; 0x44
   45df0:	ldr	r2, [sp, #44]	; 0x2c
   45df4:	ldr	r7, [sp, #60]	; 0x3c
   45df8:	add	r0, r0, r2
   45dfc:	ldr	r2, [sp, #52]	; 0x34
   45e00:	str	r0, [sp, #68]	; 0x44
   45e04:	mov	r0, #0
   45e08:	add	r8, r8, r2
   45e0c:	cmp	r8, r7
   45e10:	blt	45cdc <GetDataSlab+0x19e60>
   45e14:	b	2e97c <GetDataSlab+0x2b00>
   45e18:	ldr	r0, [sp, #60]	; 0x3c
   45e1c:	ldr	r1, [fp, #12]
   45e20:	ldr	r3, [sp, #52]	; 0x34
   45e24:	cmp	r0, #1
   45e28:	blt	52098 <GetDataSlab+0x2621c>
   45e2c:	ldr	r0, [sp, #40]	; 0x28
   45e30:	ldr	r5, [r1], #4
   45e34:	add	lr, sl, #4
   45e38:	mov	ip, #0
   45e3c:	mov	sl, #0
   45e40:	mls	r0, r3, r6, r0
   45e44:	str	r1, [sp, #64]	; 0x40
   45e48:	lsl	r1, r6, #2
   45e4c:	str	r5, [sp, #56]	; 0x38
   45e50:	sub	r0, r0, r5
   45e54:	str	r0, [sp, #48]	; 0x30
   45e58:	sub	r0, fp, #136	; 0x88
   45e5c:	orr	r7, r0, #4
   45e60:	sub	r0, fp, #96	; 0x60
   45e64:	orr	r0, r0, #4
   45e68:	str	r0, [sp, #36]	; 0x24
   45e6c:	mla	r0, r3, r6, r5
   45e70:	str	r0, [sp, #40]	; 0x28
   45e74:	lsl	r0, r3, #1
   45e78:	str	r0, [sp, #44]	; 0x2c
   45e7c:	ldr	r0, [sp, #56]	; 0x38
   45e80:	cmp	r3, #1
   45e84:	blt	45eb8 <GetDataSlab+0x1a03c>
   45e88:	ldr	r0, [sp, #56]	; 0x38
   45e8c:	ldr	r3, [sp, #52]	; 0x34
   45e90:	ldr	r6, [sp, #68]	; 0x44
   45e94:	add	r0, r9, r0, lsl #2
   45e98:	vldr	s0, [r0]
   45e9c:	add	r0, r0, r1
   45ea0:	subs	r3, r3, #1
   45ea4:	vcvt.s32.f32	s0, s0
   45ea8:	vmov	r8, s0
   45eac:	strh	r8, [r6], #2
   45eb0:	bne	45e98 <GetDataSlab+0x1a01c>
   45eb4:	ldr	r0, [sp, #40]	; 0x28
   45eb8:	ldr	r4, [sp, #48]	; 0x30
   45ebc:	add	r3, r9, r4, lsl #2
   45ec0:	add	r9, r3, r0, lsl #2
   45ec4:	add	r0, r0, r2
   45ec8:	add	r2, r0, r4
   45ecc:	ldr	r0, [fp, #24]
   45ed0:	cmp	r0, #2
   45ed4:	blt	45f84 <GetDataSlab+0x1a108>
   45ed8:	ldr	r8, [sp, #64]	; 0x40
   45edc:	mov	r3, #0
   45ee0:	mov	r0, r3
   45ee4:	ldr	r3, [r7, r3, lsl #2]
   45ee8:	add	r3, r3, #1
   45eec:	str	r3, [r7, r0, lsl #2]
   45ef0:	ldr	r6, [lr, r0, lsl #2]
   45ef4:	sdiv	r5, r3, r6
   45ef8:	mls	r3, r5, r6, r3
   45efc:	cmp	r3, #0
   45f00:	bne	45f74 <GetDataSlab+0x1a0f8>
   45f04:	sub	r4, fp, #176	; 0xb0
   45f08:	str	ip, [r7, r0, lsl #2]
   45f0c:	add	r3, r4, r0, lsl #2
   45f10:	ldr	r3, [r3, #4]
   45f14:	sdiv	r5, r2, r3
   45f18:	mls	r6, r5, r3, r2
   45f1c:	cmp	r6, #0
   45f20:	beq	45f3c <GetDataSlab+0x1a0c0>
   45f24:	ldr	r5, [r4, r0, lsl #2]
   45f28:	ldr	r4, [r8, r0, lsl #2]
   45f2c:	sub	r3, r3, r6
   45f30:	mla	r3, r4, r5, r3
   45f34:	add	r2, r3, r2
   45f38:	b	45f58 <GetDataSlab+0x1a0dc>
   45f3c:	ldr	r3, [r8, r0, lsl #2]
   45f40:	cmp	r3, #0
   45f44:	beq	45f5c <GetDataSlab+0x1a0e0>
   45f48:	sub	r4, fp, #176	; 0xb0
   45f4c:	ldr	r4, [r4, r0, lsl #2]
   45f50:	mla	r2, r4, r3, r2
   45f54:	mul	r3, r4, r3
   45f58:	add	r9, r9, r3, lsl #2
   45f5c:	ldr	r4, [fp, #24]
   45f60:	add	r3, r0, #1
   45f64:	add	r0, r0, #2
   45f68:	cmp	r0, r4
   45f6c:	blt	45ee0 <GetDataSlab+0x1a064>
   45f70:	b	45f84 <GetDataSlab+0x1a108>
   45f74:	ldr	r3, [sp, #36]	; 0x24
   45f78:	ldr	r0, [r3, r0, lsl #2]
   45f7c:	add	r9, r9, r0, lsl #2
   45f80:	add	r2, r0, r2
   45f84:	ldr	r0, [sp, #68]	; 0x44
   45f88:	ldr	r3, [sp, #44]	; 0x2c
   45f8c:	ldr	r4, [sp, #60]	; 0x3c
   45f90:	add	r0, r0, r3
   45f94:	ldr	r3, [sp, #52]	; 0x34
   45f98:	str	r0, [sp, #68]	; 0x44
   45f9c:	mov	r0, #0
   45fa0:	add	sl, sl, r3
   45fa4:	cmp	sl, r4
   45fa8:	blt	45e7c <GetDataSlab+0x1a000>
   45fac:	b	2e97c <GetDataSlab+0x2b00>
   45fb0:	ldr	r0, [sp, #60]	; 0x3c
   45fb4:	ldr	r1, [fp, #12]
   45fb8:	ldr	r3, [sp, #52]	; 0x34
   45fbc:	cmp	r0, #1
   45fc0:	blt	520ac <GetDataSlab+0x26230>
   45fc4:	ldr	r0, [sp, #44]	; 0x2c
   45fc8:	ldr	r5, [r1], #4
   45fcc:	mov	sl, #0
   45fd0:	mov	ip, #0
   45fd4:	mls	r0, r3, r6, r0
   45fd8:	str	r1, [sp, #64]	; 0x40
   45fdc:	lsl	r1, r6, #3
   45fe0:	str	r5, [sp, #56]	; 0x38
   45fe4:	sub	r0, r0, r5
   45fe8:	str	r0, [sp, #48]	; 0x30
   45fec:	ldr	r0, [fp, #20]
   45ff0:	add	lr, r0, #4
   45ff4:	sub	r0, fp, #136	; 0x88
   45ff8:	orr	r7, r0, #4
   45ffc:	sub	r0, fp, #96	; 0x60
   46000:	orr	r0, r0, #4
   46004:	str	r0, [sp, #36]	; 0x24
   46008:	mla	r0, r3, r6, r5
   4600c:	str	r0, [sp, #40]	; 0x28
   46010:	lsl	r0, r3, #1
   46014:	str	r0, [sp, #44]	; 0x2c
   46018:	ldr	r0, [sp, #56]	; 0x38
   4601c:	cmp	r3, #1
   46020:	blt	46054 <GetDataSlab+0x1a1d8>
   46024:	ldr	r0, [sp, #56]	; 0x38
   46028:	ldr	r3, [sp, #52]	; 0x34
   4602c:	ldr	r6, [sp, #68]	; 0x44
   46030:	add	r0, r9, r0, lsl #3
   46034:	vldr	d16, [r0]
   46038:	add	r0, r0, r1
   4603c:	subs	r3, r3, #1
   46040:	vcvt.s32.f64	s0, d16
   46044:	vmov	r8, s0
   46048:	strh	r8, [r6], #2
   4604c:	bne	46034 <GetDataSlab+0x1a1b8>
   46050:	ldr	r0, [sp, #40]	; 0x28
   46054:	ldr	r4, [sp, #48]	; 0x30
   46058:	add	r3, r9, r4, lsl #3
   4605c:	add	r9, r3, r0, lsl #3
   46060:	add	r0, r0, r2
   46064:	add	r2, r0, r4
   46068:	ldr	r0, [fp, #24]
   4606c:	cmp	r0, #2
   46070:	blt	46120 <GetDataSlab+0x1a2a4>
   46074:	ldr	r8, [sp, #64]	; 0x40
   46078:	mov	r3, #0
   4607c:	mov	r0, r3
   46080:	ldr	r3, [r7, r3, lsl #2]
   46084:	add	r3, r3, #1
   46088:	str	r3, [r7, r0, lsl #2]
   4608c:	ldr	r6, [lr, r0, lsl #2]
   46090:	sdiv	r5, r3, r6
   46094:	mls	r3, r5, r6, r3
   46098:	cmp	r3, #0
   4609c:	bne	46110 <GetDataSlab+0x1a294>
   460a0:	sub	r4, fp, #176	; 0xb0
   460a4:	str	sl, [r7, r0, lsl #2]
   460a8:	add	r3, r4, r0, lsl #2
   460ac:	ldr	r3, [r3, #4]
   460b0:	sdiv	r5, r2, r3
   460b4:	mls	r6, r5, r3, r2
   460b8:	cmp	r6, #0
   460bc:	beq	460d8 <GetDataSlab+0x1a25c>
   460c0:	ldr	r5, [r4, r0, lsl #2]
   460c4:	ldr	r4, [r8, r0, lsl #2]
   460c8:	sub	r3, r3, r6
   460cc:	mla	r3, r4, r5, r3
   460d0:	add	r2, r3, r2
   460d4:	b	460f4 <GetDataSlab+0x1a278>
   460d8:	ldr	r3, [r8, r0, lsl #2]
   460dc:	cmp	r3, #0
   460e0:	beq	460f8 <GetDataSlab+0x1a27c>
   460e4:	sub	r4, fp, #176	; 0xb0
   460e8:	ldr	r4, [r4, r0, lsl #2]
   460ec:	mla	r2, r4, r3, r2
   460f0:	mul	r3, r4, r3
   460f4:	add	r9, r9, r3, lsl #3
   460f8:	ldr	r4, [fp, #24]
   460fc:	add	r3, r0, #1
   46100:	add	r0, r0, #2
   46104:	cmp	r0, r4
   46108:	blt	4607c <GetDataSlab+0x1a200>
   4610c:	b	46120 <GetDataSlab+0x1a2a4>
   46110:	ldr	r3, [sp, #36]	; 0x24
   46114:	ldr	r0, [r3, r0, lsl #2]
   46118:	add	r9, r9, r0, lsl #3
   4611c:	add	r2, r0, r2
   46120:	ldr	r0, [sp, #68]	; 0x44
   46124:	ldr	r3, [sp, #44]	; 0x2c
   46128:	ldr	r4, [sp, #60]	; 0x3c
   4612c:	add	r0, r0, r3
   46130:	ldr	r3, [sp, #52]	; 0x34
   46134:	str	r0, [sp, #68]	; 0x44
   46138:	mov	r0, #0
   4613c:	add	ip, ip, r3
   46140:	cmp	ip, r4
   46144:	blt	46018 <GetDataSlab+0x1a19c>
   46148:	b	2e97c <GetDataSlab+0x2b00>
   4614c:	ldr	r0, [sp, #60]	; 0x3c
   46150:	ldr	r2, [sp, #68]	; 0x44
   46154:	ldr	r8, [fp, #12]
   46158:	cmp	r0, #1
   4615c:	blt	462d0 <GetDataSlab+0x1a454>
   46160:	ldr	r3, [sp, #44]	; 0x2c
   46164:	ldr	r0, [sp, #36]	; 0x24
   46168:	ldr	ip, [r8], #4
   4616c:	add	lr, sl, #4
   46170:	mov	sl, #0
   46174:	str	r2, [sp, #52]	; 0x34
   46178:	mls	r0, r3, r7, r0
   4617c:	sub	r0, r0, ip
   46180:	str	r0, [sp, #48]	; 0x30
   46184:	sub	r0, fp, #136	; 0x88
   46188:	orr	r6, r0, #4
   4618c:	sub	r0, fp, #96	; 0x60
   46190:	orr	r0, r0, #4
   46194:	str	r0, [sp, #28]
   46198:	mla	r0, r3, r7, ip
   4619c:	lsl	r7, r7, #3
   461a0:	str	r0, [sp, #32]
   461a4:	lsl	r0, r3, #1
   461a8:	str	r0, [sp, #36]	; 0x24
   461ac:	cmp	r3, #1
   461b0:	mov	r0, ip
   461b4:	blt	461e0 <GetDataSlab+0x1a364>
   461b8:	ldr	r0, [sp, #44]	; 0x2c
   461bc:	ldr	r3, [sp, #52]	; 0x34
   461c0:	mov	r4, ip
   461c4:	add	r2, r9, ip, lsl #3
   461c8:	ldrh	ip, [r2], r7
   461cc:	subs	r0, r0, #1
   461d0:	strh	ip, [r3], #2
   461d4:	bne	461c8 <GetDataSlab+0x1a34c>
   461d8:	ldr	r0, [sp, #32]
   461dc:	mov	ip, r4
   461e0:	ldr	r3, [sp, #48]	; 0x30
   461e4:	add	r2, r9, r3, lsl #3
   461e8:	add	r9, r2, r0, lsl #3
   461ec:	add	r0, r0, r1
   461f0:	add	r1, r0, r3
   461f4:	ldr	r0, [fp, #24]
   461f8:	cmp	r0, #2
   461fc:	blt	462ac <GetDataSlab+0x1a430>
   46200:	mov	r0, #0
   46204:	mov	r2, r0
   46208:	ldr	r0, [r6, r0, lsl #2]
   4620c:	add	r0, r0, #1
   46210:	str	r0, [r6, r2, lsl #2]
   46214:	ldr	r3, [lr, r2, lsl #2]
   46218:	sdiv	r4, r0, r3
   4621c:	mls	r0, r4, r3, r0
   46220:	cmp	r0, #0
   46224:	bne	4629c <GetDataSlab+0x1a420>
   46228:	mov	r0, #0
   4622c:	sub	r5, fp, #176	; 0xb0
   46230:	str	r0, [r6, r2, lsl #2]
   46234:	add	r0, r5, r2, lsl #2
   46238:	ldr	r0, [r0, #4]
   4623c:	sdiv	r3, r1, r0
   46240:	mls	r3, r3, r0, r1
   46244:	cmp	r3, #0
   46248:	beq	46264 <GetDataSlab+0x1a3e8>
   4624c:	ldr	r4, [r5, r2, lsl #2]
   46250:	ldr	r5, [r8, r2, lsl #2]
   46254:	sub	r0, r0, r3
   46258:	mla	r0, r5, r4, r0
   4625c:	add	r1, r0, r1
   46260:	b	46280 <GetDataSlab+0x1a404>
   46264:	ldr	r0, [r8, r2, lsl #2]
   46268:	cmp	r0, #0
   4626c:	beq	46284 <GetDataSlab+0x1a408>
   46270:	sub	r3, fp, #176	; 0xb0
   46274:	ldr	r3, [r3, r2, lsl #2]
   46278:	mla	r1, r3, r0, r1
   4627c:	mul	r0, r3, r0
   46280:	add	r9, r9, r0, lsl #3
   46284:	ldr	r3, [fp, #24]
   46288:	add	r0, r2, #1
   4628c:	add	r2, r2, #2
   46290:	cmp	r2, r3
   46294:	blt	46204 <GetDataSlab+0x1a388>
   46298:	b	462ac <GetDataSlab+0x1a430>
   4629c:	ldr	r0, [sp, #28]
   462a0:	ldr	r0, [r0, r2, lsl #2]
   462a4:	add	r9, r9, r0, lsl #3
   462a8:	add	r1, r0, r1
   462ac:	ldr	r0, [sp, #36]	; 0x24
   462b0:	ldr	r2, [sp, #52]	; 0x34
   462b4:	ldr	r3, [sp, #44]	; 0x2c
   462b8:	add	r2, r2, r0
   462bc:	ldr	r0, [sp, #60]	; 0x3c
   462c0:	add	sl, sl, r3
   462c4:	str	r2, [sp, #52]	; 0x34
   462c8:	cmp	sl, r0
   462cc:	blt	461ac <GetDataSlab+0x1a330>
   462d0:	ldr	ip, [fp, #16]
   462d4:	ldr	r9, [sp, #40]	; 0x28
   462d8:	mov	r0, #0
   462dc:	cmp	r9, #13
   462e0:	bne	2e97c <GetDataSlab+0x2b00>
   462e4:	ldr	r0, [ip]
   462e8:	ldr	r9, [fp, #8]
   462ec:	ldr	r6, [fp, #20]
   462f0:	mov	r2, #0
   462f4:	sub	r5, fp, #176	; 0xb0
   462f8:	str	r0, [sp, #32]
   462fc:	sub	r0, r0, #1
   46300:	str	r0, [fp, #-96]	; 0xffffffa0
   46304:	ldr	r0, [r9]
   46308:	sub	r9, fp, #96	; 0x60
   4630c:	str	r0, [fp, #-176]	; 0xffffff50
   46310:	str	r0, [sp, #40]	; 0x28
   46314:	ldr	r0, [fp, #24]
   46318:	ldr	r1, [r6]
   4631c:	cmp	r0, #2
   46320:	str	r1, [sp, #52]	; 0x34
   46324:	str	r1, [sp, #60]	; 0x3c
   46328:	blt	46480 <GetDataSlab+0x1a604>
   4632c:	ldr	r0, [fp, #8]
   46330:	ldr	r3, [sp, #40]	; 0x28
   46334:	mov	r4, #1
   46338:	mvn	lr, #15
   4633c:	mov	r2, #0
   46340:	sub	r7, r0, #4
   46344:	sub	ip, r0, #12
   46348:	mov	r0, #0
   4634c:	mov	r8, r3
   46350:	str	r0, [sp, #48]	; 0x30
   46354:	ldr	r0, [sp, #52]	; 0x34
   46358:	str	r0, [sp, #60]	; 0x3c
   4635c:	ldr	r1, [fp, #16]
   46360:	ldr	r0, [fp, #8]
   46364:	ldr	r1, [r1, r4, lsl #2]
   46368:	str	r3, [r5, r4, lsl #2]
   4636c:	sub	sl, r1, #1
   46370:	str	sl, [r9, r4, lsl #2]
   46374:	ldr	r6, [r0, r4, lsl #2]
   46378:	ldr	r0, [sp, #48]	; 0x30
   4637c:	add	r0, r0, #1
   46380:	str	r6, [sp, #44]	; 0x2c
   46384:	cmp	r0, #4
   46388:	str	r0, [sp, #48]	; 0x30
   4638c:	bcs	4639c <GetDataSlab+0x1a520>
   46390:	mov	r1, r6
   46394:	mov	r5, r4
   46398:	b	46420 <GetDataSlab+0x1a5a4>
   4639c:	vmov.i32	q9, #1	; 0x00000001
   463a0:	vmov.i32	q10, #1	; 0x00000001
   463a4:	vmov.i32	q8, #1	; 0x00000001
   463a8:	bic	r1, r0, #3
   463ac:	bic	r9, r4, #3
   463b0:	vmov.32	d23[1], r6
   463b4:	vmov.32	d18[0], r3
   463b8:	vmov.32	d20[0], sl
   463bc:	sub	r5, r4, r1
   463c0:	mov	r3, ip
   463c4:	vorr	d16, d18, d18
   463c8:	vmov.i32	q9, #1	; 0x00000001
   463cc:	vorr	d18, d20, d20
   463d0:	vld1.32	{d20-d21}, [r3], lr
   463d4:	subs	r9, r9, #4
   463d8:	vrev64.32	q12, q10
   463dc:	vext.8	q12, q12, q12, #8
   463e0:	vext.8	q11, q11, q12, #12
   463e4:	vmul.i32	q9, q9, q12
   463e8:	vmul.i32	q8, q11, q8
   463ec:	vorr	q11, q12, q12
   463f0:	bne	463d0 <GetDataSlab+0x1a554>
   463f4:	vext.8	q11, q9, q8, #8
   463f8:	vext.8	q12, q8, q8, #8
   463fc:	cmp	r0, r1
   46400:	vmul.i32	q0, q9, q11
   46404:	vmul.i32	q1, q8, q12
   46408:	vmul.i32	q8, q0, d0[1]
   4640c:	vmul.i32	q9, q1, d2[1]
   46410:	vmov.32	sl, d16[0]
   46414:	vmov.32	r3, d18[0]
   46418:	beq	46434 <GetDataSlab+0x1a5b8>
   4641c:	vmov.32	r1, d20[0]
   46420:	mul	r3, r1, r3
   46424:	ldr	r1, [r7, r5, lsl #2]
   46428:	subs	r5, r5, #1
   4642c:	mul	sl, sl, r1
   46430:	bne	46420 <GetDataSlab+0x1a5a4>
   46434:	ldr	r1, [fp, #12]
   46438:	sub	r5, fp, #176	; 0xb0
   4643c:	sub	r9, fp, #96	; 0x60
   46440:	ldr	r6, [fp, #20]
   46444:	ldr	r0, [sp, #60]	; 0x3c
   46448:	add	ip, ip, #4
   4644c:	str	r3, [r5, r4, lsl #2]
   46450:	str	sl, [r9, r4, lsl #2]
   46454:	ldr	r1, [r1, r4, lsl #2]
   46458:	mla	r2, r1, r8, r2
   4645c:	ldr	r1, [r6, r4, lsl #2]
   46460:	mov	r8, r3
   46464:	ldr	r3, [sp, #44]	; 0x2c
   46468:	add	r4, r4, #1
   4646c:	mul	r0, r1, r0
   46470:	ldr	r1, [fp, #24]
   46474:	str	r0, [sp, #60]	; 0x3c
   46478:	cmp	r4, r1
   4647c:	bne	4635c <GetDataSlab+0x1a4e0>
   46480:	ldr	r0, [sp, #56]	; 0x38
   46484:	ldr	r5, [sp, #32]
   46488:	add	r9, r0, r2, lsl #3
   4648c:	cmp	r5, #1
   46490:	bne	4bebc <GetDataSlab+0x20040>
   46494:	ldr	r0, [sp, #60]	; 0x3c
   46498:	ldr	lr, [fp, #12]
   4649c:	ldr	r1, [sp, #52]	; 0x34
   464a0:	cmp	r0, #1
   464a4:	blt	520c0 <GetDataSlab+0x26244>
   464a8:	sub	r0, fp, #136	; 0x88
   464ac:	add	r7, r6, #4
   464b0:	mov	sl, #0
   464b4:	mov	ip, #0
   464b8:	orr	r6, r0, #4
   464bc:	sub	r0, fp, #96	; 0x60
   464c0:	orr	r0, r0, #4
   464c4:	str	r0, [sp, #44]	; 0x2c
   464c8:	lsl	r0, r1, #1
   464cc:	str	r0, [sp, #56]	; 0x38
   464d0:	bic	r0, r1, #1
   464d4:	str	r0, [sp, #48]	; 0x30
   464d8:	ldr	r0, [lr], #4
   464dc:	str	r0, [sp, #64]	; 0x40
   464e0:	cmp	r1, #1
   464e4:	mov	r4, lr
   464e8:	blt	46558 <GetDataSlab+0x1a6dc>
   464ec:	mov	r1, #0
   464f0:	beq	4652c <GetDataSlab+0x1a6b0>
   464f4:	ldr	r0, [sp, #64]	; 0x40
   464f8:	ldr	r3, [sp, #48]	; 0x30
   464fc:	ldr	r1, [sp, #68]	; 0x44
   46500:	add	r0, r9, r0, lsl #3
   46504:	vld1.64	{d16-d17}, [r0]!
   46508:	subs	r3, r3, #2
   4650c:	vmovn.i64	d16, q8
   46510:	vuzp.16	d16, d17
   46514:	vst1.32	{d16[0]}, [r1]!
   46518:	bne	46504 <GetDataSlab+0x1a688>
   4651c:	ldr	r0, [sp, #52]	; 0x34
   46520:	ldr	r1, [sp, #48]	; 0x30
   46524:	cmp	r0, r1
   46528:	beq	46558 <GetDataSlab+0x1a6dc>
   4652c:	ldr	r5, [sp, #64]	; 0x40
   46530:	ldr	r0, [sp, #52]	; 0x34
   46534:	ldr	r3, [sp, #68]	; 0x44
   46538:	add	r5, r9, r5, lsl #3
   4653c:	sub	r0, r0, r1
   46540:	add	r3, r3, r1, lsl #1
   46544:	add	r1, r5, r1, lsl #3
   46548:	ldrh	r5, [r1], #8
   4654c:	subs	r0, r0, #1
   46550:	strh	r5, [r3], #2
   46554:	bne	46548 <GetDataSlab+0x1a6cc>
   46558:	ldr	r0, [sp, #40]	; 0x28
   4655c:	add	r9, r9, r0, lsl #3
   46560:	add	r2, r2, r0
   46564:	ldr	r0, [fp, #24]
   46568:	cmp	r0, #2
   4656c:	blt	4661c <GetDataSlab+0x1a7a0>
   46570:	mov	r1, #0
   46574:	mov	r0, r1
   46578:	ldr	r1, [r6, r1, lsl #2]
   4657c:	add	r1, r1, #1
   46580:	str	r1, [r6, r0, lsl #2]
   46584:	ldr	r3, [r7, r0, lsl #2]
   46588:	sdiv	r5, r1, r3
   4658c:	mls	r1, r5, r3, r1
   46590:	cmp	r1, #0
   46594:	bne	4660c <GetDataSlab+0x1a790>
   46598:	sub	r5, fp, #176	; 0xb0
   4659c:	str	sl, [r6, r0, lsl #2]
   465a0:	add	r1, r5, r0, lsl #2
   465a4:	ldr	r1, [r1, #4]
   465a8:	sdiv	r3, r2, r1
   465ac:	mls	r3, r3, r1, r2
   465b0:	cmp	r3, #0
   465b4:	beq	465d4 <GetDataSlab+0x1a758>
   465b8:	ldr	r5, [r5, r0, lsl #2]
   465bc:	ldr	r8, [lr, r0, lsl #2]
   465c0:	sub	r1, r1, r3
   465c4:	mov	r4, lr
   465c8:	mla	r1, r8, r5, r1
   465cc:	add	r2, r1, r2
   465d0:	b	465f0 <GetDataSlab+0x1a774>
   465d4:	ldr	r1, [r4, r0, lsl #2]
   465d8:	cmp	r1, #0
   465dc:	beq	465f4 <GetDataSlab+0x1a778>
   465e0:	sub	r3, fp, #176	; 0xb0
   465e4:	ldr	r3, [r3, r0, lsl #2]
   465e8:	mla	r2, r3, r1, r2
   465ec:	mul	r1, r3, r1
   465f0:	add	r9, r9, r1, lsl #3
   465f4:	ldr	r3, [fp, #24]
   465f8:	add	r1, r0, #1
   465fc:	add	r0, r0, #2
   46600:	cmp	r0, r3
   46604:	blt	46574 <GetDataSlab+0x1a6f8>
   46608:	b	4661c <GetDataSlab+0x1a7a0>
   4660c:	ldr	r1, [sp, #44]	; 0x2c
   46610:	ldr	r0, [r1, r0, lsl #2]
   46614:	add	r9, r9, r0, lsl #3
   46618:	add	r2, r0, r2
   4661c:	ldr	r0, [sp, #68]	; 0x44
   46620:	ldr	r1, [sp, #56]	; 0x38
   46624:	ldr	r3, [sp, #60]	; 0x3c
   46628:	add	r0, r0, r1
   4662c:	ldr	r1, [sp, #52]	; 0x34
   46630:	str	r0, [sp, #68]	; 0x44
   46634:	mov	r0, #0
   46638:	add	ip, ip, r1
   4663c:	cmp	ip, r3
   46640:	blt	464e0 <GetDataSlab+0x1a664>
   46644:	b	2e97c <GetDataSlab+0x2b00>
   46648:	ldr	r0, [sp, #60]	; 0x3c
   4664c:	ldr	r8, [sp, #40]	; 0x28
   46650:	sub	r2, fp, #96	; 0x60
   46654:	cmp	r0, #1
   46658:	blt	520d4 <GetDataSlab+0x26258>
   4665c:	ldr	r0, [sp, #44]	; 0x2c
   46660:	mls	r0, r8, sl, r0
   46664:	str	r0, [sp, #52]	; 0x34
   46668:	mul	r0, r8, sl
   4666c:	str	r0, [sp, #44]	; 0x2c
   46670:	ldr	r0, [fp, #12]
   46674:	add	r9, r0, #4
   46678:	ldr	r0, [fp, #20]
   4667c:	add	lr, r0, #4
   46680:	sub	r0, fp, #136	; 0x88
   46684:	orr	r1, r0, #4
   46688:	orr	r0, r2, #4
   4668c:	str	r0, [sp, #36]	; 0x24
   46690:	lsl	r0, r8, #1
   46694:	str	r0, [sp, #48]	; 0x30
   46698:	mov	r0, #0
   4669c:	str	r0, [sp, #56]	; 0x38
   466a0:	ldr	r0, [fp, #12]
   466a4:	cmp	r8, #1
   466a8:	ldr	r0, [r0]
   466ac:	blt	466e8 <GetDataSlab+0x1a86c>
   466b0:	ldr	r2, [sp, #44]	; 0x2c
   466b4:	ldr	ip, [sp, #68]	; 0x44
   466b8:	add	r5, r2, r3
   466bc:	add	r3, r4, r2
   466c0:	add	r4, r4, r0
   466c4:	ldrb	r2, [r4], sl
   466c8:	subs	r8, r8, #1
   466cc:	strh	r2, [ip], #2
   466d0:	bne	466c4 <GetDataSlab+0x1a848>
   466d4:	ldr	ip, [sp, #68]	; 0x44
   466d8:	ldr	r8, [sp, #40]	; 0x28
   466dc:	add	r5, r5, r0
   466e0:	mov	r4, r3
   466e4:	b	466f0 <GetDataSlab+0x1a874>
   466e8:	ldr	ip, [sp, #68]	; 0x44
   466ec:	add	r5, r0, r3
   466f0:	ldr	r2, [sp, #52]	; 0x34
   466f4:	sub	r0, r2, r0
   466f8:	add	r4, r4, r2
   466fc:	add	r3, r5, r0
   46700:	ldr	r0, [fp, #24]
   46704:	cmp	r0, #2
   46708:	blt	467b4 <GetDataSlab+0x1a938>
   4670c:	mov	r5, #0
   46710:	ldr	r2, [r1, r5, lsl #2]
   46714:	mov	r0, r5
   46718:	add	r2, r2, #1
   4671c:	str	r2, [r1, r5, lsl #2]
   46720:	ldr	r5, [lr, r5, lsl #2]
   46724:	sdiv	r6, r2, r5
   46728:	mls	r2, r6, r5, r2
   4672c:	cmp	r2, #0
   46730:	bne	467a4 <GetDataSlab+0x1a928>
   46734:	mov	r2, #0
   46738:	sub	r6, fp, #176	; 0xb0
   4673c:	str	r2, [r1, r0, lsl #2]
   46740:	add	r2, r6, r0, lsl #2
   46744:	ldr	r5, [r2, #4]
   46748:	sdiv	r2, r3, r5
   4674c:	mls	r2, r2, r5, r3
   46750:	cmp	r2, #0
   46754:	beq	46774 <GetDataSlab+0x1a8f8>
   46758:	ldr	r6, [r6, r0, lsl #2]
   4675c:	ldr	r7, [r9, r0, lsl #2]
   46760:	sub	r2, r5, r2
   46764:	mla	r2, r7, r6, r2
   46768:	add	r3, r2, r3
   4676c:	add	r4, r4, r2
   46770:	b	4678c <GetDataSlab+0x1a910>
   46774:	ldr	r2, [r9, r0, lsl #2]
   46778:	cmp	r2, #0
   4677c:	subne	r5, fp, #176	; 0xb0
   46780:	ldrne	r7, [r5, r0, lsl #2]
   46784:	mlane	r3, r7, r2, r3
   46788:	mlane	r4, r7, r2, r4
   4678c:	ldr	r2, [fp, #24]
   46790:	add	r5, r0, #1
   46794:	add	r0, r0, #2
   46798:	cmp	r0, r2
   4679c:	blt	46710 <GetDataSlab+0x1a894>
   467a0:	b	467b4 <GetDataSlab+0x1a938>
   467a4:	ldr	r2, [sp, #36]	; 0x24
   467a8:	ldr	r0, [r2, r0, lsl #2]
   467ac:	add	r4, r4, r0
   467b0:	add	r3, r0, r3
   467b4:	ldr	r7, [sp, #56]	; 0x38
   467b8:	ldr	r0, [sp, #48]	; 0x30
   467bc:	ldr	r2, [sp, #60]	; 0x3c
   467c0:	add	r7, r7, r8
   467c4:	add	ip, ip, r0
   467c8:	mov	r0, #0
   467cc:	cmp	r7, r2
   467d0:	str	ip, [sp, #68]	; 0x44
   467d4:	str	r7, [sp, #56]	; 0x38
   467d8:	blt	466a0 <GetDataSlab+0x1a824>
   467dc:	b	2e97c <GetDataSlab+0x2b00>
   467e0:	ldr	r0, [sp, #60]	; 0x3c
   467e4:	ldr	r1, [fp, #12]
   467e8:	ldr	r3, [sp, #52]	; 0x34
   467ec:	cmp	r0, #1
   467f0:	blt	520e8 <GetDataSlab+0x2626c>
   467f4:	ldr	r0, [sp, #44]	; 0x2c
   467f8:	ldr	r5, [r1], #4
   467fc:	add	lr, sl, #4
   46800:	mov	sl, #0
   46804:	mov	ip, #0
   46808:	mls	r0, r3, r6, r0
   4680c:	str	r1, [sp, #64]	; 0x40
   46810:	lsl	r1, r6, #1
   46814:	str	r5, [sp, #56]	; 0x38
   46818:	sub	r0, r0, r5
   4681c:	str	r0, [sp, #48]	; 0x30
   46820:	sub	r0, fp, #136	; 0x88
   46824:	orr	r7, r0, #4
   46828:	sub	r0, fp, #96	; 0x60
   4682c:	orr	r0, r0, #4
   46830:	str	r0, [sp, #36]	; 0x24
   46834:	mla	r0, r3, r6, r5
   46838:	str	r0, [sp, #40]	; 0x28
   4683c:	lsl	r0, r3, #1
   46840:	str	r0, [sp, #44]	; 0x2c
   46844:	ldr	r0, [sp, #56]	; 0x38
   46848:	cmp	r3, #1
   4684c:	blt	46874 <GetDataSlab+0x1a9f8>
   46850:	ldr	r0, [sp, #56]	; 0x38
   46854:	ldr	r3, [sp, #52]	; 0x34
   46858:	ldr	r6, [sp, #68]	; 0x44
   4685c:	add	r0, r9, r0, lsl #1
   46860:	ldrh	r8, [r0], r1
   46864:	subs	r3, r3, #1
   46868:	strh	r8, [r6], #2
   4686c:	bne	46860 <GetDataSlab+0x1a9e4>
   46870:	ldr	r0, [sp, #40]	; 0x28
   46874:	ldr	r4, [sp, #48]	; 0x30
   46878:	add	r3, r9, r4, lsl #1
   4687c:	add	r9, r3, r0, lsl #1
   46880:	add	r0, r0, r2
   46884:	add	r2, r0, r4
   46888:	ldr	r0, [fp, #24]
   4688c:	cmp	r0, #2
   46890:	blt	46940 <GetDataSlab+0x1aac4>
   46894:	ldr	r8, [sp, #64]	; 0x40
   46898:	mov	r3, #0
   4689c:	mov	r0, r3
   468a0:	ldr	r3, [r7, r3, lsl #2]
   468a4:	add	r3, r3, #1
   468a8:	str	r3, [r7, r0, lsl #2]
   468ac:	ldr	r6, [lr, r0, lsl #2]
   468b0:	sdiv	r5, r3, r6
   468b4:	mls	r3, r5, r6, r3
   468b8:	cmp	r3, #0
   468bc:	bne	46930 <GetDataSlab+0x1aab4>
   468c0:	sub	r4, fp, #176	; 0xb0
   468c4:	str	sl, [r7, r0, lsl #2]
   468c8:	add	r3, r4, r0, lsl #2
   468cc:	ldr	r3, [r3, #4]
   468d0:	sdiv	r5, r2, r3
   468d4:	mls	r6, r5, r3, r2
   468d8:	cmp	r6, #0
   468dc:	beq	468f8 <GetDataSlab+0x1aa7c>
   468e0:	ldr	r5, [r4, r0, lsl #2]
   468e4:	ldr	r4, [r8, r0, lsl #2]
   468e8:	sub	r3, r3, r6
   468ec:	mla	r3, r4, r5, r3
   468f0:	add	r2, r3, r2
   468f4:	b	46914 <GetDataSlab+0x1aa98>
   468f8:	ldr	r3, [r8, r0, lsl #2]
   468fc:	cmp	r3, #0
   46900:	beq	46918 <GetDataSlab+0x1aa9c>
   46904:	sub	r4, fp, #176	; 0xb0
   46908:	ldr	r4, [r4, r0, lsl #2]
   4690c:	mla	r2, r4, r3, r2
   46910:	mul	r3, r4, r3
   46914:	add	r9, r9, r3, lsl #1
   46918:	ldr	r4, [fp, #24]
   4691c:	add	r3, r0, #1
   46920:	add	r0, r0, #2
   46924:	cmp	r0, r4
   46928:	blt	4689c <GetDataSlab+0x1aa20>
   4692c:	b	46940 <GetDataSlab+0x1aac4>
   46930:	ldr	r3, [sp, #36]	; 0x24
   46934:	ldr	r0, [r3, r0, lsl #2]
   46938:	add	r9, r9, r0, lsl #1
   4693c:	add	r2, r0, r2
   46940:	ldr	r0, [sp, #68]	; 0x44
   46944:	ldr	r3, [sp, #44]	; 0x2c
   46948:	ldr	r4, [sp, #60]	; 0x3c
   4694c:	add	r0, r0, r3
   46950:	ldr	r3, [sp, #52]	; 0x34
   46954:	str	r0, [sp, #68]	; 0x44
   46958:	mov	r0, #0
   4695c:	add	ip, ip, r3
   46960:	cmp	ip, r4
   46964:	blt	46844 <GetDataSlab+0x1a9c8>
   46968:	b	2e97c <GetDataSlab+0x2b00>
   4696c:	ldr	r0, [sp, #60]	; 0x3c
   46970:	ldr	r1, [fp, #12]
   46974:	ldr	r3, [sp, #52]	; 0x34
   46978:	cmp	r0, #1
   4697c:	blt	520fc <GetDataSlab+0x26280>
   46980:	ldr	r0, [sp, #44]	; 0x2c
   46984:	ldr	r5, [r1], #4
   46988:	add	lr, sl, #4
   4698c:	mov	sl, #0
   46990:	mov	ip, #0
   46994:	mls	r0, r3, r6, r0
   46998:	str	r1, [sp, #64]	; 0x40
   4699c:	lsl	r1, r6, #1
   469a0:	str	r5, [sp, #56]	; 0x38
   469a4:	sub	r0, r0, r5
   469a8:	str	r0, [sp, #48]	; 0x30
   469ac:	sub	r0, fp, #136	; 0x88
   469b0:	orr	r7, r0, #4
   469b4:	sub	r0, fp, #96	; 0x60
   469b8:	orr	r0, r0, #4
   469bc:	str	r0, [sp, #36]	; 0x24
   469c0:	mla	r0, r3, r6, r5
   469c4:	str	r0, [sp, #40]	; 0x28
   469c8:	lsl	r0, r3, #1
   469cc:	str	r0, [sp, #44]	; 0x2c
   469d0:	ldr	r0, [sp, #56]	; 0x38
   469d4:	cmp	r3, #1
   469d8:	blt	46a00 <GetDataSlab+0x1ab84>
   469dc:	ldr	r0, [sp, #56]	; 0x38
   469e0:	ldr	r3, [sp, #52]	; 0x34
   469e4:	ldr	r6, [sp, #68]	; 0x44
   469e8:	add	r0, r9, r0, lsl #1
   469ec:	ldrh	r8, [r0], r1
   469f0:	subs	r3, r3, #1
   469f4:	strh	r8, [r6], #2
   469f8:	bne	469ec <GetDataSlab+0x1ab70>
   469fc:	ldr	r0, [sp, #40]	; 0x28
   46a00:	ldr	r4, [sp, #48]	; 0x30
   46a04:	add	r3, r9, r4, lsl #1
   46a08:	add	r9, r3, r0, lsl #1
   46a0c:	add	r0, r0, r2
   46a10:	add	r2, r0, r4
   46a14:	ldr	r0, [fp, #24]
   46a18:	cmp	r0, #2
   46a1c:	blt	46acc <GetDataSlab+0x1ac50>
   46a20:	ldr	r8, [sp, #64]	; 0x40
   46a24:	mov	r3, #0
   46a28:	mov	r0, r3
   46a2c:	ldr	r3, [r7, r3, lsl #2]
   46a30:	add	r3, r3, #1
   46a34:	str	r3, [r7, r0, lsl #2]
   46a38:	ldr	r6, [lr, r0, lsl #2]
   46a3c:	sdiv	r5, r3, r6
   46a40:	mls	r3, r5, r6, r3
   46a44:	cmp	r3, #0
   46a48:	bne	46abc <GetDataSlab+0x1ac40>
   46a4c:	sub	r4, fp, #176	; 0xb0
   46a50:	str	sl, [r7, r0, lsl #2]
   46a54:	add	r3, r4, r0, lsl #2
   46a58:	ldr	r3, [r3, #4]
   46a5c:	sdiv	r5, r2, r3
   46a60:	mls	r6, r5, r3, r2
   46a64:	cmp	r6, #0
   46a68:	beq	46a84 <GetDataSlab+0x1ac08>
   46a6c:	ldr	r5, [r4, r0, lsl #2]
   46a70:	ldr	r4, [r8, r0, lsl #2]
   46a74:	sub	r3, r3, r6
   46a78:	mla	r3, r4, r5, r3
   46a7c:	add	r2, r3, r2
   46a80:	b	46aa0 <GetDataSlab+0x1ac24>
   46a84:	ldr	r3, [r8, r0, lsl #2]
   46a88:	cmp	r3, #0
   46a8c:	beq	46aa4 <GetDataSlab+0x1ac28>
   46a90:	sub	r4, fp, #176	; 0xb0
   46a94:	ldr	r4, [r4, r0, lsl #2]
   46a98:	mla	r2, r4, r3, r2
   46a9c:	mul	r3, r4, r3
   46aa0:	add	r9, r9, r3, lsl #1
   46aa4:	ldr	r4, [fp, #24]
   46aa8:	add	r3, r0, #1
   46aac:	add	r0, r0, #2
   46ab0:	cmp	r0, r4
   46ab4:	blt	46a28 <GetDataSlab+0x1abac>
   46ab8:	b	46acc <GetDataSlab+0x1ac50>
   46abc:	ldr	r3, [sp, #36]	; 0x24
   46ac0:	ldr	r0, [r3, r0, lsl #2]
   46ac4:	add	r9, r9, r0, lsl #1
   46ac8:	add	r2, r0, r2
   46acc:	ldr	r0, [sp, #68]	; 0x44
   46ad0:	ldr	r3, [sp, #44]	; 0x2c
   46ad4:	ldr	r4, [sp, #60]	; 0x3c
   46ad8:	add	r0, r0, r3
   46adc:	ldr	r3, [sp, #52]	; 0x34
   46ae0:	str	r0, [sp, #68]	; 0x44
   46ae4:	mov	r0, #0
   46ae8:	add	ip, ip, r3
   46aec:	cmp	ip, r4
   46af0:	blt	469d0 <GetDataSlab+0x1ab54>
   46af4:	b	2e97c <GetDataSlab+0x2b00>
   46af8:	ldr	r0, [sp, #60]	; 0x3c
   46afc:	ldr	r2, [sp, #52]	; 0x34
   46b00:	sub	r1, fp, #96	; 0x60
   46b04:	cmp	r0, #1
   46b08:	ldr	r0, [fp, #12]
   46b0c:	blt	52110 <GetDataSlab+0x26294>
   46b10:	add	r9, r0, #4
   46b14:	ldr	r0, [fp, #20]
   46b18:	ldr	r7, [sp, #44]	; 0x2c
   46b1c:	mov	r8, #0
   46b20:	add	ip, r0, #4
   46b24:	sub	r0, fp, #136	; 0x88
   46b28:	mls	r7, r2, r6, r7
   46b2c:	orr	r5, r0, #4
   46b30:	orr	r0, r1, #4
   46b34:	lsl	r1, r6, #2
   46b38:	str	r7, [sp, #48]	; 0x30
   46b3c:	str	r0, [sp, #36]	; 0x24
   46b40:	mul	r0, r2, r6
   46b44:	str	r0, [sp, #40]	; 0x28
   46b48:	lsl	r0, r2, #1
   46b4c:	str	r0, [sp, #44]	; 0x2c
   46b50:	ldr	r0, [fp, #12]
   46b54:	cmp	r2, #1
   46b58:	ldr	r0, [r0]
   46b5c:	blt	46b98 <GetDataSlab+0x1ad1c>
   46b60:	ldr	r7, [sp, #40]	; 0x28
   46b64:	ldr	lr, [sp, #68]	; 0x44
   46b68:	add	r4, sl, r0, lsl #2
   46b6c:	add	r6, r7, r3
   46b70:	add	r3, sl, r7, lsl #2
   46b74:	str	r3, [sp, #56]	; 0x38
   46b78:	mov	r3, r2
   46b7c:	ldr	r7, [r4], r1
   46b80:	subs	r3, r3, #1
   46b84:	strh	r7, [lr], #2
   46b88:	bne	46b7c <GetDataSlab+0x1ad00>
   46b8c:	ldr	sl, [sp, #56]	; 0x38
   46b90:	add	r2, r6, r0
   46b94:	b	46b9c <GetDataSlab+0x1ad20>
   46b98:	add	r2, r0, r3
   46b9c:	ldr	r3, [sp, #48]	; 0x30
   46ba0:	sub	lr, fp, #176	; 0xb0
   46ba4:	sub	r0, r3, r0
   46ba8:	add	sl, sl, r3, lsl #2
   46bac:	add	r3, r2, r0
   46bb0:	ldr	r0, [fp, #24]
   46bb4:	cmp	r0, #2
   46bb8:	blt	46c60 <GetDataSlab+0x1ade4>
   46bbc:	mov	r2, #0
   46bc0:	mov	r0, r2
   46bc4:	ldr	r2, [r5, r2, lsl #2]
   46bc8:	add	r2, r2, #1
   46bcc:	str	r2, [r5, r0, lsl #2]
   46bd0:	ldr	r7, [ip, r0, lsl #2]
   46bd4:	sdiv	r6, r2, r7
   46bd8:	mls	r2, r6, r7, r2
   46bdc:	cmp	r2, #0
   46be0:	bne	46c50 <GetDataSlab+0x1add4>
   46be4:	mov	r2, #0
   46be8:	str	r2, [r5, r0, lsl #2]
   46bec:	add	r2, lr, r0, lsl #2
   46bf0:	ldr	r2, [r2, #4]
   46bf4:	sdiv	r7, r3, r2
   46bf8:	mls	r7, r7, r2, r3
   46bfc:	cmp	r7, #0
   46c00:	beq	46c1c <GetDataSlab+0x1ada0>
   46c04:	ldr	r6, [lr, r0, lsl #2]
   46c08:	ldr	r4, [r9, r0, lsl #2]
   46c0c:	sub	r2, r2, r7
   46c10:	mla	r2, r4, r6, r2
   46c14:	add	r3, r2, r3
   46c18:	b	46c34 <GetDataSlab+0x1adb8>
   46c1c:	ldr	r2, [r9, r0, lsl #2]
   46c20:	cmp	r2, #0
   46c24:	beq	46c38 <GetDataSlab+0x1adbc>
   46c28:	ldr	r7, [lr, r0, lsl #2]
   46c2c:	mla	r3, r7, r2, r3
   46c30:	mul	r2, r7, r2
   46c34:	add	sl, sl, r2, lsl #2
   46c38:	ldr	r7, [fp, #24]
   46c3c:	add	r2, r0, #1
   46c40:	add	r0, r0, #2
   46c44:	cmp	r0, r7
   46c48:	blt	46bc0 <GetDataSlab+0x1ad44>
   46c4c:	b	46c60 <GetDataSlab+0x1ade4>
   46c50:	ldr	r2, [sp, #36]	; 0x24
   46c54:	ldr	r0, [r2, r0, lsl #2]
   46c58:	add	sl, sl, r0, lsl #2
   46c5c:	add	r3, r0, r3
   46c60:	ldr	r0, [sp, #68]	; 0x44
   46c64:	ldr	r2, [sp, #44]	; 0x2c
   46c68:	ldr	r7, [sp, #60]	; 0x3c
   46c6c:	add	r0, r0, r2
   46c70:	ldr	r2, [sp, #52]	; 0x34
   46c74:	str	r0, [sp, #68]	; 0x44
   46c78:	mov	r0, #0
   46c7c:	add	r8, r8, r2
   46c80:	cmp	r8, r7
   46c84:	blt	46b50 <GetDataSlab+0x1acd4>
   46c88:	b	2e97c <GetDataSlab+0x2b00>
   46c8c:	ldr	r0, [sp, #60]	; 0x3c
   46c90:	ldr	r2, [sp, #52]	; 0x34
   46c94:	sub	r1, fp, #96	; 0x60
   46c98:	cmp	r0, #1
   46c9c:	ldr	r0, [fp, #12]
   46ca0:	blt	52124 <GetDataSlab+0x262a8>
   46ca4:	add	r9, r0, #4
   46ca8:	ldr	r0, [fp, #20]
   46cac:	ldr	r7, [sp, #44]	; 0x2c
   46cb0:	mov	r8, #0
   46cb4:	add	ip, r0, #4
   46cb8:	sub	r0, fp, #136	; 0x88
   46cbc:	mls	r7, r2, r6, r7
   46cc0:	orr	r5, r0, #4
   46cc4:	orr	r0, r1, #4
   46cc8:	lsl	r1, r6, #2
   46ccc:	str	r7, [sp, #48]	; 0x30
   46cd0:	str	r0, [sp, #36]	; 0x24
   46cd4:	mul	r0, r2, r6
   46cd8:	str	r0, [sp, #40]	; 0x28
   46cdc:	lsl	r0, r2, #1
   46ce0:	str	r0, [sp, #44]	; 0x2c
   46ce4:	ldr	r0, [fp, #12]
   46ce8:	cmp	r2, #1
   46cec:	ldr	r0, [r0]
   46cf0:	blt	46d2c <GetDataSlab+0x1aeb0>
   46cf4:	ldr	r7, [sp, #40]	; 0x28
   46cf8:	ldr	lr, [sp, #68]	; 0x44
   46cfc:	add	r4, sl, r0, lsl #2
   46d00:	add	r6, r7, r3
   46d04:	add	r3, sl, r7, lsl #2
   46d08:	str	r3, [sp, #56]	; 0x38
   46d0c:	mov	r3, r2
   46d10:	ldr	r7, [r4], r1
   46d14:	subs	r3, r3, #1
   46d18:	strh	r7, [lr], #2
   46d1c:	bne	46d10 <GetDataSlab+0x1ae94>
   46d20:	ldr	sl, [sp, #56]	; 0x38
   46d24:	add	r2, r6, r0
   46d28:	b	46d30 <GetDataSlab+0x1aeb4>
   46d2c:	add	r2, r0, r3
   46d30:	ldr	r3, [sp, #48]	; 0x30
   46d34:	sub	lr, fp, #176	; 0xb0
   46d38:	sub	r0, r3, r0
   46d3c:	add	sl, sl, r3, lsl #2
   46d40:	add	r3, r2, r0
   46d44:	ldr	r0, [fp, #24]
   46d48:	cmp	r0, #2
   46d4c:	blt	46df4 <GetDataSlab+0x1af78>
   46d50:	mov	r2, #0
   46d54:	mov	r0, r2
   46d58:	ldr	r2, [r5, r2, lsl #2]
   46d5c:	add	r2, r2, #1
   46d60:	str	r2, [r5, r0, lsl #2]
   46d64:	ldr	r7, [ip, r0, lsl #2]
   46d68:	sdiv	r6, r2, r7
   46d6c:	mls	r2, r6, r7, r2
   46d70:	cmp	r2, #0
   46d74:	bne	46de4 <GetDataSlab+0x1af68>
   46d78:	mov	r2, #0
   46d7c:	str	r2, [r5, r0, lsl #2]
   46d80:	add	r2, lr, r0, lsl #2
   46d84:	ldr	r2, [r2, #4]
   46d88:	sdiv	r7, r3, r2
   46d8c:	mls	r7, r7, r2, r3
   46d90:	cmp	r7, #0
   46d94:	beq	46db0 <GetDataSlab+0x1af34>
   46d98:	ldr	r6, [lr, r0, lsl #2]
   46d9c:	ldr	r4, [r9, r0, lsl #2]
   46da0:	sub	r2, r2, r7
   46da4:	mla	r2, r4, r6, r2
   46da8:	add	r3, r2, r3
   46dac:	b	46dc8 <GetDataSlab+0x1af4c>
   46db0:	ldr	r2, [r9, r0, lsl #2]
   46db4:	cmp	r2, #0
   46db8:	beq	46dcc <GetDataSlab+0x1af50>
   46dbc:	ldr	r7, [lr, r0, lsl #2]
   46dc0:	mla	r3, r7, r2, r3
   46dc4:	mul	r2, r7, r2
   46dc8:	add	sl, sl, r2, lsl #2
   46dcc:	ldr	r7, [fp, #24]
   46dd0:	add	r2, r0, #1
   46dd4:	add	r0, r0, #2
   46dd8:	cmp	r0, r7
   46ddc:	blt	46d54 <GetDataSlab+0x1aed8>
   46de0:	b	46df4 <GetDataSlab+0x1af78>
   46de4:	ldr	r2, [sp, #36]	; 0x24
   46de8:	ldr	r0, [r2, r0, lsl #2]
   46dec:	add	sl, sl, r0, lsl #2
   46df0:	add	r3, r0, r3
   46df4:	ldr	r0, [sp, #68]	; 0x44
   46df8:	ldr	r2, [sp, #44]	; 0x2c
   46dfc:	ldr	r7, [sp, #60]	; 0x3c
   46e00:	add	r0, r0, r2
   46e04:	ldr	r2, [sp, #52]	; 0x34
   46e08:	str	r0, [sp, #68]	; 0x44
   46e0c:	mov	r0, #0
   46e10:	add	r8, r8, r2
   46e14:	cmp	r8, r7
   46e18:	blt	46ce4 <GetDataSlab+0x1ae68>
   46e1c:	b	2e97c <GetDataSlab+0x2b00>
   46e20:	ldr	r0, [sp, #60]	; 0x3c
   46e24:	ldr	r1, [fp, #12]
   46e28:	ldr	r3, [sp, #52]	; 0x34
   46e2c:	cmp	r0, #1
   46e30:	blt	52138 <GetDataSlab+0x262bc>
   46e34:	ldr	r0, [sp, #40]	; 0x28
   46e38:	ldr	r5, [r1], #4
   46e3c:	add	lr, sl, #4
   46e40:	mov	ip, #0
   46e44:	mov	sl, #0
   46e48:	mls	r0, r3, r6, r0
   46e4c:	str	r1, [sp, #64]	; 0x40
   46e50:	lsl	r1, r6, #2
   46e54:	str	r5, [sp, #56]	; 0x38
   46e58:	sub	r0, r0, r5
   46e5c:	str	r0, [sp, #48]	; 0x30
   46e60:	sub	r0, fp, #136	; 0x88
   46e64:	orr	r7, r0, #4
   46e68:	sub	r0, fp, #96	; 0x60
   46e6c:	orr	r0, r0, #4
   46e70:	str	r0, [sp, #36]	; 0x24
   46e74:	mla	r0, r3, r6, r5
   46e78:	str	r0, [sp, #40]	; 0x28
   46e7c:	lsl	r0, r3, #1
   46e80:	str	r0, [sp, #44]	; 0x2c
   46e84:	ldr	r0, [sp, #56]	; 0x38
   46e88:	cmp	r3, #1
   46e8c:	blt	46ec0 <GetDataSlab+0x1b044>
   46e90:	ldr	r0, [sp, #56]	; 0x38
   46e94:	ldr	r3, [sp, #52]	; 0x34
   46e98:	ldr	r6, [sp, #68]	; 0x44
   46e9c:	add	r0, r9, r0, lsl #2
   46ea0:	vldr	s0, [r0]
   46ea4:	add	r0, r0, r1
   46ea8:	subs	r3, r3, #1
   46eac:	vcvt.u32.f32	s0, s0
   46eb0:	vmov	r8, s0
   46eb4:	strh	r8, [r6], #2
   46eb8:	bne	46ea0 <GetDataSlab+0x1b024>
   46ebc:	ldr	r0, [sp, #40]	; 0x28
   46ec0:	ldr	r4, [sp, #48]	; 0x30
   46ec4:	add	r3, r9, r4, lsl #2
   46ec8:	add	r9, r3, r0, lsl #2
   46ecc:	add	r0, r0, r2
   46ed0:	add	r2, r0, r4
   46ed4:	ldr	r0, [fp, #24]
   46ed8:	cmp	r0, #2
   46edc:	blt	46f8c <GetDataSlab+0x1b110>
   46ee0:	ldr	r8, [sp, #64]	; 0x40
   46ee4:	mov	r3, #0
   46ee8:	mov	r0, r3
   46eec:	ldr	r3, [r7, r3, lsl #2]
   46ef0:	add	r3, r3, #1
   46ef4:	str	r3, [r7, r0, lsl #2]
   46ef8:	ldr	r6, [lr, r0, lsl #2]
   46efc:	sdiv	r5, r3, r6
   46f00:	mls	r3, r5, r6, r3
   46f04:	cmp	r3, #0
   46f08:	bne	46f7c <GetDataSlab+0x1b100>
   46f0c:	sub	r4, fp, #176	; 0xb0
   46f10:	str	ip, [r7, r0, lsl #2]
   46f14:	add	r3, r4, r0, lsl #2
   46f18:	ldr	r3, [r3, #4]
   46f1c:	sdiv	r5, r2, r3
   46f20:	mls	r6, r5, r3, r2
   46f24:	cmp	r6, #0
   46f28:	beq	46f44 <GetDataSlab+0x1b0c8>
   46f2c:	ldr	r5, [r4, r0, lsl #2]
   46f30:	ldr	r4, [r8, r0, lsl #2]
   46f34:	sub	r3, r3, r6
   46f38:	mla	r3, r4, r5, r3
   46f3c:	add	r2, r3, r2
   46f40:	b	46f60 <GetDataSlab+0x1b0e4>
   46f44:	ldr	r3, [r8, r0, lsl #2]
   46f48:	cmp	r3, #0
   46f4c:	beq	46f64 <GetDataSlab+0x1b0e8>
   46f50:	sub	r4, fp, #176	; 0xb0
   46f54:	ldr	r4, [r4, r0, lsl #2]
   46f58:	mla	r2, r4, r3, r2
   46f5c:	mul	r3, r4, r3
   46f60:	add	r9, r9, r3, lsl #2
   46f64:	ldr	r4, [fp, #24]
   46f68:	add	r3, r0, #1
   46f6c:	add	r0, r0, #2
   46f70:	cmp	r0, r4
   46f74:	blt	46ee8 <GetDataSlab+0x1b06c>
   46f78:	b	46f8c <GetDataSlab+0x1b110>
   46f7c:	ldr	r3, [sp, #36]	; 0x24
   46f80:	ldr	r0, [r3, r0, lsl #2]
   46f84:	add	r9, r9, r0, lsl #2
   46f88:	add	r2, r0, r2
   46f8c:	ldr	r0, [sp, #68]	; 0x44
   46f90:	ldr	r3, [sp, #44]	; 0x2c
   46f94:	ldr	r4, [sp, #60]	; 0x3c
   46f98:	add	r0, r0, r3
   46f9c:	ldr	r3, [sp, #52]	; 0x34
   46fa0:	str	r0, [sp, #68]	; 0x44
   46fa4:	mov	r0, #0
   46fa8:	add	sl, sl, r3
   46fac:	cmp	sl, r4
   46fb0:	blt	46e84 <GetDataSlab+0x1b008>
   46fb4:	b	2e97c <GetDataSlab+0x2b00>
   46fb8:	ldr	r0, [sp, #60]	; 0x3c
   46fbc:	ldr	r1, [fp, #12]
   46fc0:	ldr	r3, [sp, #52]	; 0x34
   46fc4:	cmp	r0, #1
   46fc8:	blt	5214c <GetDataSlab+0x262d0>
   46fcc:	ldr	r0, [sp, #44]	; 0x2c
   46fd0:	ldr	r5, [r1], #4
   46fd4:	mov	sl, #0
   46fd8:	mov	ip, #0
   46fdc:	mls	r0, r3, r6, r0
   46fe0:	str	r1, [sp, #64]	; 0x40
   46fe4:	lsl	r1, r6, #3
   46fe8:	str	r5, [sp, #56]	; 0x38
   46fec:	sub	r0, r0, r5
   46ff0:	str	r0, [sp, #48]	; 0x30
   46ff4:	ldr	r0, [fp, #20]
   46ff8:	add	lr, r0, #4
   46ffc:	sub	r0, fp, #136	; 0x88
   47000:	orr	r7, r0, #4
   47004:	sub	r0, fp, #96	; 0x60
   47008:	orr	r0, r0, #4
   4700c:	str	r0, [sp, #36]	; 0x24
   47010:	mla	r0, r3, r6, r5
   47014:	str	r0, [sp, #40]	; 0x28
   47018:	lsl	r0, r3, #1
   4701c:	str	r0, [sp, #44]	; 0x2c
   47020:	ldr	r0, [sp, #56]	; 0x38
   47024:	cmp	r3, #1
   47028:	blt	4705c <GetDataSlab+0x1b1e0>
   4702c:	ldr	r0, [sp, #56]	; 0x38
   47030:	ldr	r3, [sp, #52]	; 0x34
   47034:	ldr	r6, [sp, #68]	; 0x44
   47038:	add	r0, r9, r0, lsl #3
   4703c:	vldr	d16, [r0]
   47040:	add	r0, r0, r1
   47044:	subs	r3, r3, #1
   47048:	vcvt.u32.f64	s0, d16
   4704c:	vmov	r8, s0
   47050:	strh	r8, [r6], #2
   47054:	bne	4703c <GetDataSlab+0x1b1c0>
   47058:	ldr	r0, [sp, #40]	; 0x28
   4705c:	ldr	r4, [sp, #48]	; 0x30
   47060:	add	r3, r9, r4, lsl #3
   47064:	add	r9, r3, r0, lsl #3
   47068:	add	r0, r0, r2
   4706c:	add	r2, r0, r4
   47070:	ldr	r0, [fp, #24]
   47074:	cmp	r0, #2
   47078:	blt	47128 <GetDataSlab+0x1b2ac>
   4707c:	ldr	r8, [sp, #64]	; 0x40
   47080:	mov	r3, #0
   47084:	mov	r0, r3
   47088:	ldr	r3, [r7, r3, lsl #2]
   4708c:	add	r3, r3, #1
   47090:	str	r3, [r7, r0, lsl #2]
   47094:	ldr	r6, [lr, r0, lsl #2]
   47098:	sdiv	r5, r3, r6
   4709c:	mls	r3, r5, r6, r3
   470a0:	cmp	r3, #0
   470a4:	bne	47118 <GetDataSlab+0x1b29c>
   470a8:	sub	r4, fp, #176	; 0xb0
   470ac:	str	sl, [r7, r0, lsl #2]
   470b0:	add	r3, r4, r0, lsl #2
   470b4:	ldr	r3, [r3, #4]
   470b8:	sdiv	r5, r2, r3
   470bc:	mls	r6, r5, r3, r2
   470c0:	cmp	r6, #0
   470c4:	beq	470e0 <GetDataSlab+0x1b264>
   470c8:	ldr	r5, [r4, r0, lsl #2]
   470cc:	ldr	r4, [r8, r0, lsl #2]
   470d0:	sub	r3, r3, r6
   470d4:	mla	r3, r4, r5, r3
   470d8:	add	r2, r3, r2
   470dc:	b	470fc <GetDataSlab+0x1b280>
   470e0:	ldr	r3, [r8, r0, lsl #2]
   470e4:	cmp	r3, #0
   470e8:	beq	47100 <GetDataSlab+0x1b284>
   470ec:	sub	r4, fp, #176	; 0xb0
   470f0:	ldr	r4, [r4, r0, lsl #2]
   470f4:	mla	r2, r4, r3, r2
   470f8:	mul	r3, r4, r3
   470fc:	add	r9, r9, r3, lsl #3
   47100:	ldr	r4, [fp, #24]
   47104:	add	r3, r0, #1
   47108:	add	r0, r0, #2
   4710c:	cmp	r0, r4
   47110:	blt	47084 <GetDataSlab+0x1b208>
   47114:	b	47128 <GetDataSlab+0x1b2ac>
   47118:	ldr	r3, [sp, #36]	; 0x24
   4711c:	ldr	r0, [r3, r0, lsl #2]
   47120:	add	r9, r9, r0, lsl #3
   47124:	add	r2, r0, r2
   47128:	ldr	r0, [sp, #68]	; 0x44
   4712c:	ldr	r3, [sp, #44]	; 0x2c
   47130:	ldr	r4, [sp, #60]	; 0x3c
   47134:	add	r0, r0, r3
   47138:	ldr	r3, [sp, #52]	; 0x34
   4713c:	str	r0, [sp, #68]	; 0x44
   47140:	mov	r0, #0
   47144:	add	ip, ip, r3
   47148:	cmp	ip, r4
   4714c:	blt	47020 <GetDataSlab+0x1b1a4>
   47150:	b	2e97c <GetDataSlab+0x2b00>
   47154:	ldr	r0, [sp, #60]	; 0x3c
   47158:	ldr	r2, [sp, #68]	; 0x44
   4715c:	ldr	r8, [fp, #12]
   47160:	cmp	r0, #1
   47164:	blt	472d8 <GetDataSlab+0x1b45c>
   47168:	ldr	r3, [sp, #44]	; 0x2c
   4716c:	ldr	r0, [sp, #36]	; 0x24
   47170:	ldr	ip, [r8], #4
   47174:	add	lr, sl, #4
   47178:	mov	sl, #0
   4717c:	str	r2, [sp, #52]	; 0x34
   47180:	mls	r0, r3, r7, r0
   47184:	sub	r0, r0, ip
   47188:	str	r0, [sp, #48]	; 0x30
   4718c:	sub	r0, fp, #136	; 0x88
   47190:	orr	r6, r0, #4
   47194:	sub	r0, fp, #96	; 0x60
   47198:	orr	r0, r0, #4
   4719c:	str	r0, [sp, #28]
   471a0:	mla	r0, r3, r7, ip
   471a4:	lsl	r7, r7, #3
   471a8:	str	r0, [sp, #32]
   471ac:	lsl	r0, r3, #1
   471b0:	str	r0, [sp, #36]	; 0x24
   471b4:	cmp	r3, #1
   471b8:	mov	r0, ip
   471bc:	blt	471e8 <GetDataSlab+0x1b36c>
   471c0:	ldr	r0, [sp, #44]	; 0x2c
   471c4:	ldr	r3, [sp, #52]	; 0x34
   471c8:	mov	r4, ip
   471cc:	add	r2, r9, ip, lsl #3
   471d0:	ldrh	ip, [r2], r7
   471d4:	subs	r0, r0, #1
   471d8:	strh	ip, [r3], #2
   471dc:	bne	471d0 <GetDataSlab+0x1b354>
   471e0:	ldr	r0, [sp, #32]
   471e4:	mov	ip, r4
   471e8:	ldr	r3, [sp, #48]	; 0x30
   471ec:	add	r2, r9, r3, lsl #3
   471f0:	add	r9, r2, r0, lsl #3
   471f4:	add	r0, r0, r1
   471f8:	add	r1, r0, r3
   471fc:	ldr	r0, [fp, #24]
   47200:	cmp	r0, #2
   47204:	blt	472b4 <GetDataSlab+0x1b438>
   47208:	mov	r0, #0
   4720c:	mov	r2, r0
   47210:	ldr	r0, [r6, r0, lsl #2]
   47214:	add	r0, r0, #1
   47218:	str	r0, [r6, r2, lsl #2]
   4721c:	ldr	r3, [lr, r2, lsl #2]
   47220:	sdiv	r4, r0, r3
   47224:	mls	r0, r4, r3, r0
   47228:	cmp	r0, #0
   4722c:	bne	472a4 <GetDataSlab+0x1b428>
   47230:	mov	r0, #0
   47234:	sub	r5, fp, #176	; 0xb0
   47238:	str	r0, [r6, r2, lsl #2]
   4723c:	add	r0, r5, r2, lsl #2
   47240:	ldr	r0, [r0, #4]
   47244:	sdiv	r3, r1, r0
   47248:	mls	r3, r3, r0, r1
   4724c:	cmp	r3, #0
   47250:	beq	4726c <GetDataSlab+0x1b3f0>
   47254:	ldr	r4, [r5, r2, lsl #2]
   47258:	ldr	r5, [r8, r2, lsl #2]
   4725c:	sub	r0, r0, r3
   47260:	mla	r0, r5, r4, r0
   47264:	add	r1, r0, r1
   47268:	b	47288 <GetDataSlab+0x1b40c>
   4726c:	ldr	r0, [r8, r2, lsl #2]
   47270:	cmp	r0, #0
   47274:	beq	4728c <GetDataSlab+0x1b410>
   47278:	sub	r3, fp, #176	; 0xb0
   4727c:	ldr	r3, [r3, r2, lsl #2]
   47280:	mla	r1, r3, r0, r1
   47284:	mul	r0, r3, r0
   47288:	add	r9, r9, r0, lsl #3
   4728c:	ldr	r3, [fp, #24]
   47290:	add	r0, r2, #1
   47294:	add	r2, r2, #2
   47298:	cmp	r2, r3
   4729c:	blt	4720c <GetDataSlab+0x1b390>
   472a0:	b	472b4 <GetDataSlab+0x1b438>
   472a4:	ldr	r0, [sp, #28]
   472a8:	ldr	r0, [r0, r2, lsl #2]
   472ac:	add	r9, r9, r0, lsl #3
   472b0:	add	r1, r0, r1
   472b4:	ldr	r0, [sp, #36]	; 0x24
   472b8:	ldr	r2, [sp, #52]	; 0x34
   472bc:	ldr	r3, [sp, #44]	; 0x2c
   472c0:	add	r2, r2, r0
   472c4:	ldr	r0, [sp, #60]	; 0x3c
   472c8:	add	sl, sl, r3
   472cc:	str	r2, [sp, #52]	; 0x34
   472d0:	cmp	sl, r0
   472d4:	blt	471b4 <GetDataSlab+0x1b338>
   472d8:	ldr	ip, [fp, #16]
   472dc:	ldr	r9, [sp, #40]	; 0x28
   472e0:	mov	r0, #0
   472e4:	cmp	r9, #13
   472e8:	bne	2e97c <GetDataSlab+0x2b00>
   472ec:	ldr	r0, [ip]
   472f0:	ldr	r9, [fp, #8]
   472f4:	ldr	r6, [fp, #20]
   472f8:	mov	r2, #0
   472fc:	sub	r5, fp, #176	; 0xb0
   47300:	str	r0, [sp, #32]
   47304:	sub	r0, r0, #1
   47308:	str	r0, [fp, #-96]	; 0xffffffa0
   4730c:	ldr	r0, [r9]
   47310:	sub	r9, fp, #96	; 0x60
   47314:	str	r0, [fp, #-176]	; 0xffffff50
   47318:	str	r0, [sp, #40]	; 0x28
   4731c:	ldr	r0, [fp, #24]
   47320:	ldr	r1, [r6]
   47324:	cmp	r0, #2
   47328:	str	r1, [sp, #52]	; 0x34
   4732c:	str	r1, [sp, #60]	; 0x3c
   47330:	blt	47488 <GetDataSlab+0x1b60c>
   47334:	ldr	r0, [fp, #8]
   47338:	ldr	r3, [sp, #40]	; 0x28
   4733c:	mov	r4, #1
   47340:	mvn	lr, #15
   47344:	mov	r2, #0
   47348:	sub	r7, r0, #4
   4734c:	sub	ip, r0, #12
   47350:	mov	r0, #0
   47354:	mov	r8, r3
   47358:	str	r0, [sp, #48]	; 0x30
   4735c:	ldr	r0, [sp, #52]	; 0x34
   47360:	str	r0, [sp, #60]	; 0x3c
   47364:	ldr	r1, [fp, #16]
   47368:	ldr	r0, [fp, #8]
   4736c:	ldr	r1, [r1, r4, lsl #2]
   47370:	str	r3, [r5, r4, lsl #2]
   47374:	sub	sl, r1, #1
   47378:	str	sl, [r9, r4, lsl #2]
   4737c:	ldr	r6, [r0, r4, lsl #2]
   47380:	ldr	r0, [sp, #48]	; 0x30
   47384:	add	r0, r0, #1
   47388:	str	r6, [sp, #44]	; 0x2c
   4738c:	cmp	r0, #4
   47390:	str	r0, [sp, #48]	; 0x30
   47394:	bcs	473a4 <GetDataSlab+0x1b528>
   47398:	mov	r1, r6
   4739c:	mov	r5, r4
   473a0:	b	47428 <GetDataSlab+0x1b5ac>
   473a4:	vmov.i32	q9, #1	; 0x00000001
   473a8:	vmov.i32	q10, #1	; 0x00000001
   473ac:	vmov.i32	q8, #1	; 0x00000001
   473b0:	bic	r1, r0, #3
   473b4:	bic	r9, r4, #3
   473b8:	vmov.32	d23[1], r6
   473bc:	vmov.32	d18[0], r3
   473c0:	vmov.32	d20[0], sl
   473c4:	sub	r5, r4, r1
   473c8:	mov	r3, ip
   473cc:	vorr	d16, d18, d18
   473d0:	vmov.i32	q9, #1	; 0x00000001
   473d4:	vorr	d18, d20, d20
   473d8:	vld1.32	{d20-d21}, [r3], lr
   473dc:	subs	r9, r9, #4
   473e0:	vrev64.32	q12, q10
   473e4:	vext.8	q12, q12, q12, #8
   473e8:	vext.8	q11, q11, q12, #12
   473ec:	vmul.i32	q9, q9, q12
   473f0:	vmul.i32	q8, q11, q8
   473f4:	vorr	q11, q12, q12
   473f8:	bne	473d8 <GetDataSlab+0x1b55c>
   473fc:	vext.8	q11, q9, q8, #8
   47400:	vext.8	q12, q8, q8, #8
   47404:	cmp	r0, r1
   47408:	vmul.i32	q0, q9, q11
   4740c:	vmul.i32	q1, q8, q12
   47410:	vmul.i32	q8, q0, d0[1]
   47414:	vmul.i32	q9, q1, d2[1]
   47418:	vmov.32	sl, d16[0]
   4741c:	vmov.32	r3, d18[0]
   47420:	beq	4743c <GetDataSlab+0x1b5c0>
   47424:	vmov.32	r1, d20[0]
   47428:	mul	r3, r1, r3
   4742c:	ldr	r1, [r7, r5, lsl #2]
   47430:	subs	r5, r5, #1
   47434:	mul	sl, sl, r1
   47438:	bne	47428 <GetDataSlab+0x1b5ac>
   4743c:	ldr	r1, [fp, #12]
   47440:	sub	r5, fp, #176	; 0xb0
   47444:	sub	r9, fp, #96	; 0x60
   47448:	ldr	r6, [fp, #20]
   4744c:	ldr	r0, [sp, #60]	; 0x3c
   47450:	add	ip, ip, #4
   47454:	str	r3, [r5, r4, lsl #2]
   47458:	str	sl, [r9, r4, lsl #2]
   4745c:	ldr	r1, [r1, r4, lsl #2]
   47460:	mla	r2, r1, r8, r2
   47464:	ldr	r1, [r6, r4, lsl #2]
   47468:	mov	r8, r3
   4746c:	ldr	r3, [sp, #44]	; 0x2c
   47470:	add	r4, r4, #1
   47474:	mul	r0, r1, r0
   47478:	ldr	r1, [fp, #24]
   4747c:	str	r0, [sp, #60]	; 0x3c
   47480:	cmp	r4, r1
   47484:	bne	47364 <GetDataSlab+0x1b4e8>
   47488:	ldr	r0, [sp, #56]	; 0x38
   4748c:	ldr	r5, [sp, #32]
   47490:	add	r9, r0, r2, lsl #3
   47494:	cmp	r5, #1
   47498:	bne	4c048 <GetDataSlab+0x201cc>
   4749c:	ldr	r0, [sp, #60]	; 0x3c
   474a0:	ldr	lr, [fp, #12]
   474a4:	ldr	r1, [sp, #52]	; 0x34
   474a8:	cmp	r0, #1
   474ac:	blt	52160 <GetDataSlab+0x262e4>
   474b0:	sub	r0, fp, #136	; 0x88
   474b4:	add	r7, r6, #4
   474b8:	mov	sl, #0
   474bc:	mov	ip, #0
   474c0:	orr	r6, r0, #4
   474c4:	sub	r0, fp, #96	; 0x60
   474c8:	orr	r0, r0, #4
   474cc:	str	r0, [sp, #44]	; 0x2c
   474d0:	lsl	r0, r1, #1
   474d4:	str	r0, [sp, #56]	; 0x38
   474d8:	bic	r0, r1, #1
   474dc:	str	r0, [sp, #48]	; 0x30
   474e0:	ldr	r0, [lr], #4
   474e4:	str	r0, [sp, #64]	; 0x40
   474e8:	cmp	r1, #1
   474ec:	mov	r4, lr
   474f0:	blt	47560 <GetDataSlab+0x1b6e4>
   474f4:	mov	r1, #0
   474f8:	beq	47534 <GetDataSlab+0x1b6b8>
   474fc:	ldr	r0, [sp, #64]	; 0x40
   47500:	ldr	r3, [sp, #48]	; 0x30
   47504:	ldr	r1, [sp, #68]	; 0x44
   47508:	add	r0, r9, r0, lsl #3
   4750c:	vld1.64	{d16-d17}, [r0]!
   47510:	subs	r3, r3, #2
   47514:	vmovn.i64	d16, q8
   47518:	vuzp.16	d16, d17
   4751c:	vst1.32	{d16[0]}, [r1]!
   47520:	bne	4750c <GetDataSlab+0x1b690>
   47524:	ldr	r0, [sp, #52]	; 0x34
   47528:	ldr	r1, [sp, #48]	; 0x30
   4752c:	cmp	r0, r1
   47530:	beq	47560 <GetDataSlab+0x1b6e4>
   47534:	ldr	r5, [sp, #64]	; 0x40
   47538:	ldr	r0, [sp, #52]	; 0x34
   4753c:	ldr	r3, [sp, #68]	; 0x44
   47540:	add	r5, r9, r5, lsl #3
   47544:	sub	r0, r0, r1
   47548:	add	r3, r3, r1, lsl #1
   4754c:	add	r1, r5, r1, lsl #3
   47550:	ldrh	r5, [r1], #8
   47554:	subs	r0, r0, #1
   47558:	strh	r5, [r3], #2
   4755c:	bne	47550 <GetDataSlab+0x1b6d4>
   47560:	ldr	r0, [sp, #40]	; 0x28
   47564:	add	r9, r9, r0, lsl #3
   47568:	add	r2, r2, r0
   4756c:	ldr	r0, [fp, #24]
   47570:	cmp	r0, #2
   47574:	blt	47624 <GetDataSlab+0x1b7a8>
   47578:	mov	r1, #0
   4757c:	mov	r0, r1
   47580:	ldr	r1, [r6, r1, lsl #2]
   47584:	add	r1, r1, #1
   47588:	str	r1, [r6, r0, lsl #2]
   4758c:	ldr	r3, [r7, r0, lsl #2]
   47590:	sdiv	r5, r1, r3
   47594:	mls	r1, r5, r3, r1
   47598:	cmp	r1, #0
   4759c:	bne	47614 <GetDataSlab+0x1b798>
   475a0:	sub	r5, fp, #176	; 0xb0
   475a4:	str	sl, [r6, r0, lsl #2]
   475a8:	add	r1, r5, r0, lsl #2
   475ac:	ldr	r1, [r1, #4]
   475b0:	sdiv	r3, r2, r1
   475b4:	mls	r3, r3, r1, r2
   475b8:	cmp	r3, #0
   475bc:	beq	475dc <GetDataSlab+0x1b760>
   475c0:	ldr	r5, [r5, r0, lsl #2]
   475c4:	ldr	r8, [lr, r0, lsl #2]
   475c8:	sub	r1, r1, r3
   475cc:	mov	r4, lr
   475d0:	mla	r1, r8, r5, r1
   475d4:	add	r2, r1, r2
   475d8:	b	475f8 <GetDataSlab+0x1b77c>
   475dc:	ldr	r1, [r4, r0, lsl #2]
   475e0:	cmp	r1, #0
   475e4:	beq	475fc <GetDataSlab+0x1b780>
   475e8:	sub	r3, fp, #176	; 0xb0
   475ec:	ldr	r3, [r3, r0, lsl #2]
   475f0:	mla	r2, r3, r1, r2
   475f4:	mul	r1, r3, r1
   475f8:	add	r9, r9, r1, lsl #3
   475fc:	ldr	r3, [fp, #24]
   47600:	add	r1, r0, #1
   47604:	add	r0, r0, #2
   47608:	cmp	r0, r3
   4760c:	blt	4757c <GetDataSlab+0x1b700>
   47610:	b	47624 <GetDataSlab+0x1b7a8>
   47614:	ldr	r1, [sp, #44]	; 0x2c
   47618:	ldr	r0, [r1, r0, lsl #2]
   4761c:	add	r9, r9, r0, lsl #3
   47620:	add	r2, r0, r2
   47624:	ldr	r0, [sp, #68]	; 0x44
   47628:	ldr	r1, [sp, #56]	; 0x38
   4762c:	ldr	r3, [sp, #60]	; 0x3c
   47630:	add	r0, r0, r1
   47634:	ldr	r1, [sp, #52]	; 0x34
   47638:	str	r0, [sp, #68]	; 0x44
   4763c:	mov	r0, #0
   47640:	add	ip, ip, r1
   47644:	cmp	ip, r3
   47648:	blt	474e8 <GetDataSlab+0x1b66c>
   4764c:	b	2e97c <GetDataSlab+0x2b00>
   47650:	ldr	r0, [sp, #60]	; 0x3c
   47654:	cmp	r0, #1
   47658:	blt	52174 <GetDataSlab+0x262f8>
   4765c:	ldr	r0, [fp, #20]
   47660:	ldr	lr, [fp, #16]
   47664:	add	ip, r0, #4
   47668:	sub	r0, fp, #136	; 0x88
   4766c:	orr	r9, r0, #4
   47670:	sub	r0, fp, #96	; 0x60
   47674:	orr	r0, r0, #4
   47678:	str	r0, [sp, #44]	; 0x2c
   4767c:	ldr	r0, [r8], #4
   47680:	str	r0, [sp, #48]	; 0x30
   47684:	mov	r0, #0
   47688:	str	r0, [sp, #56]	; 0x38
   4768c:	ldr	r1, [sp, #48]	; 0x30
   47690:	cmp	r2, #1
   47694:	add	r0, r1, r5
   47698:	add	r3, sl, r1
   4769c:	blt	476f0 <GetDataSlab+0x1b874>
   476a0:	ldr	r1, [sp, #68]	; 0x44
   476a4:	ldr	r2, [sp, #56]	; 0x38
   476a8:	ldr	r6, [fp, #20]
   476ac:	mov	r7, #0
   476b0:	add	r5, r1, r2, lsl #2
   476b4:	ldrb	r1, [r3]
   476b8:	str	r1, [r5, r7, lsl #2]
   476bc:	add	r7, r7, #1
   476c0:	ldr	r4, [lr]
   476c4:	ldr	r2, [r6]
   476c8:	add	r0, r4, r0
   476cc:	add	r3, r3, r4
   476d0:	cmp	r7, r2
   476d4:	blt	476b4 <GetDataSlab+0x1b838>
   476d8:	ldr	r1, [fp, #12]
   476dc:	sub	r6, fp, #176	; 0xb0
   476e0:	ldr	r5, [r1]
   476e4:	ldr	r1, [fp, #8]
   476e8:	ldr	r1, [r1]
   476ec:	b	476fc <GetDataSlab+0x1b880>
   476f0:	mov	r5, r1
   476f4:	ldr	r1, [sp, #52]	; 0x34
   476f8:	sub	r6, fp, #176	; 0xb0
   476fc:	str	r1, [sp, #52]	; 0x34
   47700:	mls	r1, r4, r2, r1
   47704:	str	r5, [sp, #48]	; 0x30
   47708:	sub	r1, r1, r5
   4770c:	add	r5, r1, r0
   47710:	ldr	r0, [fp, #24]
   47714:	add	sl, r3, r1
   47718:	cmp	r0, #2
   4771c:	blt	477c8 <GetDataSlab+0x1b94c>
   47720:	mov	r7, #0
   47724:	ldr	r1, [r9, r7, lsl #2]
   47728:	mov	r0, r7
   4772c:	add	r1, r1, #1
   47730:	str	r1, [r9, r7, lsl #2]
   47734:	ldr	r3, [ip, r7, lsl #2]
   47738:	sdiv	r7, r1, r3
   4773c:	mls	r1, r7, r3, r1
   47740:	cmp	r1, #0
   47744:	bne	477b8 <GetDataSlab+0x1b93c>
   47748:	mov	r1, #0
   4774c:	str	r1, [r9, r0, lsl #2]
   47750:	add	r1, r6, r0, lsl #2
   47754:	ldr	r7, [r1, #4]
   47758:	sdiv	r1, r5, r7
   4775c:	mls	r1, r1, r7, r5
   47760:	cmp	r1, #0
   47764:	beq	4778c <GetDataSlab+0x1b910>
   47768:	ldr	r3, [r6, r0, lsl #2]
   4776c:	ldr	lr, [r8, r0, lsl #2]
   47770:	sub	r1, r7, r1
   47774:	sub	r6, fp, #176	; 0xb0
   47778:	mla	r1, lr, r3, r1
   4777c:	ldr	lr, [fp, #16]
   47780:	add	r5, r1, r5
   47784:	add	sl, sl, r1
   47788:	b	477a0 <GetDataSlab+0x1b924>
   4778c:	ldr	r1, [r8, r0, lsl #2]
   47790:	cmp	r1, #0
   47794:	ldrne	r3, [r6, r0, lsl #2]
   47798:	mlane	r5, r3, r1, r5
   4779c:	mlane	sl, r3, r1, sl
   477a0:	ldr	r1, [fp, #24]
   477a4:	add	r7, r0, #1
   477a8:	add	r0, r0, #2
   477ac:	cmp	r0, r1
   477b0:	blt	47724 <GetDataSlab+0x1b8a8>
   477b4:	b	477c8 <GetDataSlab+0x1b94c>
   477b8:	ldr	r1, [sp, #44]	; 0x2c
   477bc:	ldr	r0, [r1, r0, lsl #2]
   477c0:	add	sl, sl, r0
   477c4:	add	r5, r0, r5
   477c8:	ldr	r3, [sp, #56]	; 0x38
   477cc:	ldr	r1, [sp, #60]	; 0x3c
   477d0:	mov	r0, #0
   477d4:	add	r3, r2, r3
   477d8:	cmp	r3, r1
   477dc:	str	r3, [sp, #56]	; 0x38
   477e0:	blt	4768c <GetDataSlab+0x1b810>
   477e4:	b	2e97c <GetDataSlab+0x2b00>
   477e8:	ldr	r0, [sp, #60]	; 0x3c
   477ec:	cmp	r0, #1
   477f0:	blt	52188 <GetDataSlab+0x2630c>
   477f4:	ldr	r0, [fp, #20]
   477f8:	ldr	lr, [fp, #16]
   477fc:	add	ip, r0, #4
   47800:	sub	r0, fp, #136	; 0x88
   47804:	orr	r9, r0, #4
   47808:	sub	r0, fp, #96	; 0x60
   4780c:	orr	r0, r0, #4
   47810:	str	r0, [sp, #44]	; 0x2c
   47814:	ldr	r0, [r8], #4
   47818:	str	r0, [sp, #48]	; 0x30
   4781c:	mov	r0, #0
   47820:	str	r0, [sp, #56]	; 0x38
   47824:	ldr	r1, [sp, #48]	; 0x30
   47828:	cmp	r2, #1
   4782c:	add	r0, r1, r5
   47830:	add	r3, sl, r1, lsl #1
   47834:	blt	47888 <GetDataSlab+0x1ba0c>
   47838:	ldr	r1, [sp, #68]	; 0x44
   4783c:	ldr	r2, [sp, #56]	; 0x38
   47840:	ldr	r6, [fp, #20]
   47844:	mov	r7, #0
   47848:	add	r5, r1, r2, lsl #2
   4784c:	ldrsh	r1, [r3]
   47850:	str	r1, [r5, r7, lsl #2]
   47854:	add	r7, r7, #1
   47858:	ldr	r4, [lr]
   4785c:	ldr	r2, [r6]
   47860:	add	r0, r4, r0
   47864:	add	r3, r3, r4, lsl #1
   47868:	cmp	r7, r2
   4786c:	blt	4784c <GetDataSlab+0x1b9d0>
   47870:	ldr	r1, [fp, #12]
   47874:	sub	r6, fp, #176	; 0xb0
   47878:	ldr	r5, [r1]
   4787c:	ldr	r1, [fp, #8]
   47880:	ldr	r1, [r1]
   47884:	b	47894 <GetDataSlab+0x1ba18>
   47888:	mov	r5, r1
   4788c:	ldr	r1, [sp, #52]	; 0x34
   47890:	sub	r6, fp, #176	; 0xb0
   47894:	str	r1, [sp, #52]	; 0x34
   47898:	mls	r1, r4, r2, r1
   4789c:	str	r5, [sp, #48]	; 0x30
   478a0:	sub	r1, r1, r5
   478a4:	add	r5, r1, r0
   478a8:	ldr	r0, [fp, #24]
   478ac:	add	sl, r3, r1, lsl #1
   478b0:	cmp	r0, #2
   478b4:	blt	47964 <GetDataSlab+0x1bae8>
   478b8:	mov	r7, #0
   478bc:	ldr	r1, [r9, r7, lsl #2]
   478c0:	mov	r0, r7
   478c4:	add	r1, r1, #1
   478c8:	str	r1, [r9, r7, lsl #2]
   478cc:	ldr	r3, [ip, r7, lsl #2]
   478d0:	sdiv	r7, r1, r3
   478d4:	mls	r1, r7, r3, r1
   478d8:	cmp	r1, #0
   478dc:	bne	47954 <GetDataSlab+0x1bad8>
   478e0:	mov	r1, #0
   478e4:	str	r1, [r9, r0, lsl #2]
   478e8:	add	r1, r6, r0, lsl #2
   478ec:	ldr	r7, [r1, #4]
   478f0:	sdiv	r1, r5, r7
   478f4:	mls	r1, r1, r7, r5
   478f8:	cmp	r1, #0
   478fc:	beq	47920 <GetDataSlab+0x1baa4>
   47900:	ldr	r3, [r6, r0, lsl #2]
   47904:	ldr	lr, [r8, r0, lsl #2]
   47908:	sub	r1, r7, r1
   4790c:	sub	r6, fp, #176	; 0xb0
   47910:	mla	r1, lr, r3, r1
   47914:	ldr	lr, [fp, #16]
   47918:	add	r5, r1, r5
   4791c:	b	47938 <GetDataSlab+0x1babc>
   47920:	ldr	r1, [r8, r0, lsl #2]
   47924:	cmp	r1, #0
   47928:	beq	4793c <GetDataSlab+0x1bac0>
   4792c:	ldr	r3, [r6, r0, lsl #2]
   47930:	mla	r5, r3, r1, r5
   47934:	mul	r1, r3, r1
   47938:	add	sl, sl, r1, lsl #1
   4793c:	ldr	r1, [fp, #24]
   47940:	add	r7, r0, #1
   47944:	add	r0, r0, #2
   47948:	cmp	r0, r1
   4794c:	blt	478bc <GetDataSlab+0x1ba40>
   47950:	b	47964 <GetDataSlab+0x1bae8>
   47954:	ldr	r1, [sp, #44]	; 0x2c
   47958:	ldr	r0, [r1, r0, lsl #2]
   4795c:	add	sl, sl, r0, lsl #1
   47960:	add	r5, r0, r5
   47964:	ldr	r3, [sp, #56]	; 0x38
   47968:	ldr	r1, [sp, #60]	; 0x3c
   4796c:	mov	r0, #0
   47970:	add	r3, r2, r3
   47974:	cmp	r3, r1
   47978:	str	r3, [sp, #56]	; 0x38
   4797c:	blt	47824 <GetDataSlab+0x1b9a8>
   47980:	b	2e97c <GetDataSlab+0x2b00>
   47984:	ldr	r0, [sp, #60]	; 0x3c
   47988:	cmp	r0, #1
   4798c:	blt	5219c <GetDataSlab+0x26320>
   47990:	ldr	r0, [fp, #20]
   47994:	ldr	lr, [fp, #16]
   47998:	add	ip, r0, #4
   4799c:	sub	r0, fp, #136	; 0x88
   479a0:	orr	r9, r0, #4
   479a4:	sub	r0, fp, #96	; 0x60
   479a8:	orr	r0, r0, #4
   479ac:	str	r0, [sp, #44]	; 0x2c
   479b0:	ldr	r0, [r8], #4
   479b4:	str	r0, [sp, #48]	; 0x30
   479b8:	mov	r0, #0
   479bc:	str	r0, [sp, #56]	; 0x38
   479c0:	ldr	r1, [sp, #48]	; 0x30
   479c4:	cmp	r2, #1
   479c8:	add	r0, r1, r5
   479cc:	add	r3, sl, r1, lsl #1
   479d0:	blt	47a24 <GetDataSlab+0x1bba8>
   479d4:	ldr	r1, [sp, #68]	; 0x44
   479d8:	ldr	r2, [sp, #56]	; 0x38
   479dc:	ldr	r6, [fp, #20]
   479e0:	mov	r7, #0
   479e4:	add	r5, r1, r2, lsl #2
   479e8:	ldrh	r1, [r3]
   479ec:	str	r1, [r5, r7, lsl #2]
   479f0:	add	r7, r7, #1
   479f4:	ldr	r4, [lr]
   479f8:	ldr	r2, [r6]
   479fc:	add	r0, r4, r0
   47a00:	add	r3, r3, r4, lsl #1
   47a04:	cmp	r7, r2
   47a08:	blt	479e8 <GetDataSlab+0x1bb6c>
   47a0c:	ldr	r1, [fp, #12]
   47a10:	sub	r6, fp, #176	; 0xb0
   47a14:	ldr	r5, [r1]
   47a18:	ldr	r1, [fp, #8]
   47a1c:	ldr	r1, [r1]
   47a20:	b	47a30 <GetDataSlab+0x1bbb4>
   47a24:	mov	r5, r1
   47a28:	ldr	r1, [sp, #52]	; 0x34
   47a2c:	sub	r6, fp, #176	; 0xb0
   47a30:	str	r1, [sp, #52]	; 0x34
   47a34:	mls	r1, r4, r2, r1
   47a38:	str	r5, [sp, #48]	; 0x30
   47a3c:	sub	r1, r1, r5
   47a40:	add	r5, r1, r0
   47a44:	ldr	r0, [fp, #24]
   47a48:	add	sl, r3, r1, lsl #1
   47a4c:	cmp	r0, #2
   47a50:	blt	47b00 <GetDataSlab+0x1bc84>
   47a54:	mov	r7, #0
   47a58:	ldr	r1, [r9, r7, lsl #2]
   47a5c:	mov	r0, r7
   47a60:	add	r1, r1, #1
   47a64:	str	r1, [r9, r7, lsl #2]
   47a68:	ldr	r3, [ip, r7, lsl #2]
   47a6c:	sdiv	r7, r1, r3
   47a70:	mls	r1, r7, r3, r1
   47a74:	cmp	r1, #0
   47a78:	bne	47af0 <GetDataSlab+0x1bc74>
   47a7c:	mov	r1, #0
   47a80:	str	r1, [r9, r0, lsl #2]
   47a84:	add	r1, r6, r0, lsl #2
   47a88:	ldr	r7, [r1, #4]
   47a8c:	sdiv	r1, r5, r7
   47a90:	mls	r1, r1, r7, r5
   47a94:	cmp	r1, #0
   47a98:	beq	47abc <GetDataSlab+0x1bc40>
   47a9c:	ldr	r3, [r6, r0, lsl #2]
   47aa0:	ldr	lr, [r8, r0, lsl #2]
   47aa4:	sub	r1, r7, r1
   47aa8:	sub	r6, fp, #176	; 0xb0
   47aac:	mla	r1, lr, r3, r1
   47ab0:	ldr	lr, [fp, #16]
   47ab4:	add	r5, r1, r5
   47ab8:	b	47ad4 <GetDataSlab+0x1bc58>
   47abc:	ldr	r1, [r8, r0, lsl #2]
   47ac0:	cmp	r1, #0
   47ac4:	beq	47ad8 <GetDataSlab+0x1bc5c>
   47ac8:	ldr	r3, [r6, r0, lsl #2]
   47acc:	mla	r5, r3, r1, r5
   47ad0:	mul	r1, r3, r1
   47ad4:	add	sl, sl, r1, lsl #1
   47ad8:	ldr	r1, [fp, #24]
   47adc:	add	r7, r0, #1
   47ae0:	add	r0, r0, #2
   47ae4:	cmp	r0, r1
   47ae8:	blt	47a58 <GetDataSlab+0x1bbdc>
   47aec:	b	47b00 <GetDataSlab+0x1bc84>
   47af0:	ldr	r1, [sp, #44]	; 0x2c
   47af4:	ldr	r0, [r1, r0, lsl #2]
   47af8:	add	sl, sl, r0, lsl #1
   47afc:	add	r5, r0, r5
   47b00:	ldr	r3, [sp, #56]	; 0x38
   47b04:	ldr	r1, [sp, #60]	; 0x3c
   47b08:	mov	r0, #0
   47b0c:	add	r3, r2, r3
   47b10:	cmp	r3, r1
   47b14:	str	r3, [sp, #56]	; 0x38
   47b18:	blt	479c0 <GetDataSlab+0x1bb44>
   47b1c:	b	2e97c <GetDataSlab+0x2b00>
   47b20:	ldr	r0, [sp, #60]	; 0x3c
   47b24:	cmp	r0, #1
   47b28:	blt	521b0 <GetDataSlab+0x26334>
   47b2c:	ldr	r0, [fp, #20]
   47b30:	ldr	lr, [fp, #16]
   47b34:	add	ip, r0, #4
   47b38:	sub	r0, fp, #136	; 0x88
   47b3c:	orr	r9, r0, #4
   47b40:	sub	r0, fp, #96	; 0x60
   47b44:	orr	r0, r0, #4
   47b48:	str	r0, [sp, #44]	; 0x2c
   47b4c:	ldr	r0, [r8], #4
   47b50:	str	r0, [sp, #48]	; 0x30
   47b54:	mov	r0, #0
   47b58:	str	r0, [sp, #56]	; 0x38
   47b5c:	ldr	r1, [sp, #48]	; 0x30
   47b60:	cmp	r2, #1
   47b64:	add	r0, r1, r5
   47b68:	add	r3, sl, r1, lsl #2
   47b6c:	blt	47bc0 <GetDataSlab+0x1bd44>
   47b70:	ldr	r1, [sp, #68]	; 0x44
   47b74:	ldr	r2, [sp, #56]	; 0x38
   47b78:	ldr	r6, [fp, #20]
   47b7c:	mov	r7, #0
   47b80:	add	r5, r1, r2, lsl #2
   47b84:	ldr	r1, [r3]
   47b88:	str	r1, [r5, r7, lsl #2]
   47b8c:	add	r7, r7, #1
   47b90:	ldr	r4, [lr]
   47b94:	ldr	r2, [r6]
   47b98:	add	r0, r4, r0
   47b9c:	add	r3, r3, r4, lsl #2
   47ba0:	cmp	r7, r2
   47ba4:	blt	47b84 <GetDataSlab+0x1bd08>
   47ba8:	ldr	r1, [fp, #12]
   47bac:	sub	r6, fp, #176	; 0xb0
   47bb0:	ldr	r5, [r1]
   47bb4:	ldr	r1, [fp, #8]
   47bb8:	ldr	r1, [r1]
   47bbc:	b	47bcc <GetDataSlab+0x1bd50>
   47bc0:	mov	r5, r1
   47bc4:	ldr	r1, [sp, #52]	; 0x34
   47bc8:	sub	r6, fp, #176	; 0xb0
   47bcc:	str	r1, [sp, #52]	; 0x34
   47bd0:	mls	r1, r4, r2, r1
   47bd4:	str	r5, [sp, #48]	; 0x30
   47bd8:	sub	r1, r1, r5
   47bdc:	add	r5, r1, r0
   47be0:	ldr	r0, [fp, #24]
   47be4:	add	sl, r3, r1, lsl #2
   47be8:	cmp	r0, #2
   47bec:	blt	47c9c <GetDataSlab+0x1be20>
   47bf0:	mov	r7, #0
   47bf4:	ldr	r1, [r9, r7, lsl #2]
   47bf8:	mov	r0, r7
   47bfc:	add	r1, r1, #1
   47c00:	str	r1, [r9, r7, lsl #2]
   47c04:	ldr	r3, [ip, r7, lsl #2]
   47c08:	sdiv	r7, r1, r3
   47c0c:	mls	r1, r7, r3, r1
   47c10:	cmp	r1, #0
   47c14:	bne	47c8c <GetDataSlab+0x1be10>
   47c18:	mov	r1, #0
   47c1c:	str	r1, [r9, r0, lsl #2]
   47c20:	add	r1, r6, r0, lsl #2
   47c24:	ldr	r7, [r1, #4]
   47c28:	sdiv	r1, r5, r7
   47c2c:	mls	r1, r1, r7, r5
   47c30:	cmp	r1, #0
   47c34:	beq	47c58 <GetDataSlab+0x1bddc>
   47c38:	ldr	r3, [r6, r0, lsl #2]
   47c3c:	ldr	lr, [r8, r0, lsl #2]
   47c40:	sub	r1, r7, r1
   47c44:	sub	r6, fp, #176	; 0xb0
   47c48:	mla	r1, lr, r3, r1
   47c4c:	ldr	lr, [fp, #16]
   47c50:	add	r5, r1, r5
   47c54:	b	47c70 <GetDataSlab+0x1bdf4>
   47c58:	ldr	r1, [r8, r0, lsl #2]
   47c5c:	cmp	r1, #0
   47c60:	beq	47c74 <GetDataSlab+0x1bdf8>
   47c64:	ldr	r3, [r6, r0, lsl #2]
   47c68:	mla	r5, r3, r1, r5
   47c6c:	mul	r1, r3, r1
   47c70:	add	sl, sl, r1, lsl #2
   47c74:	ldr	r1, [fp, #24]
   47c78:	add	r7, r0, #1
   47c7c:	add	r0, r0, #2
   47c80:	cmp	r0, r1
   47c84:	blt	47bf4 <GetDataSlab+0x1bd78>
   47c88:	b	47c9c <GetDataSlab+0x1be20>
   47c8c:	ldr	r1, [sp, #44]	; 0x2c
   47c90:	ldr	r0, [r1, r0, lsl #2]
   47c94:	add	sl, sl, r0, lsl #2
   47c98:	add	r5, r0, r5
   47c9c:	ldr	r3, [sp, #56]	; 0x38
   47ca0:	ldr	r1, [sp, #60]	; 0x3c
   47ca4:	mov	r0, #0
   47ca8:	add	r3, r2, r3
   47cac:	cmp	r3, r1
   47cb0:	str	r3, [sp, #56]	; 0x38
   47cb4:	blt	47b5c <GetDataSlab+0x1bce0>
   47cb8:	b	2e97c <GetDataSlab+0x2b00>
   47cbc:	ldr	r0, [sp, #60]	; 0x3c
   47cc0:	cmp	r0, #1
   47cc4:	blt	521c4 <GetDataSlab+0x26348>
   47cc8:	ldr	r0, [fp, #20]
   47ccc:	ldr	lr, [fp, #16]
   47cd0:	add	ip, r0, #4
   47cd4:	sub	r0, fp, #136	; 0x88
   47cd8:	orr	r9, r0, #4
   47cdc:	sub	r0, fp, #96	; 0x60
   47ce0:	orr	r0, r0, #4
   47ce4:	str	r0, [sp, #44]	; 0x2c
   47ce8:	ldr	r0, [r8], #4
   47cec:	str	r0, [sp, #48]	; 0x30
   47cf0:	mov	r0, #0
   47cf4:	str	r0, [sp, #56]	; 0x38
   47cf8:	ldr	r1, [sp, #48]	; 0x30
   47cfc:	cmp	r2, #1
   47d00:	add	r0, r1, r5
   47d04:	add	r3, sl, r1, lsl #2
   47d08:	blt	47d5c <GetDataSlab+0x1bee0>
   47d0c:	ldr	r1, [sp, #68]	; 0x44
   47d10:	ldr	r2, [sp, #56]	; 0x38
   47d14:	ldr	r6, [fp, #20]
   47d18:	mov	r7, #0
   47d1c:	add	r5, r1, r2, lsl #2
   47d20:	ldr	r1, [r3]
   47d24:	str	r1, [r5, r7, lsl #2]
   47d28:	add	r7, r7, #1
   47d2c:	ldr	r4, [lr]
   47d30:	ldr	r2, [r6]
   47d34:	add	r0, r4, r0
   47d38:	add	r3, r3, r4, lsl #2
   47d3c:	cmp	r7, r2
   47d40:	blt	47d20 <GetDataSlab+0x1bea4>
   47d44:	ldr	r1, [fp, #12]
   47d48:	sub	r6, fp, #176	; 0xb0
   47d4c:	ldr	r5, [r1]
   47d50:	ldr	r1, [fp, #8]
   47d54:	ldr	r1, [r1]
   47d58:	b	47d68 <GetDataSlab+0x1beec>
   47d5c:	mov	r5, r1
   47d60:	ldr	r1, [sp, #52]	; 0x34
   47d64:	sub	r6, fp, #176	; 0xb0
   47d68:	str	r1, [sp, #52]	; 0x34
   47d6c:	mls	r1, r4, r2, r1
   47d70:	str	r5, [sp, #48]	; 0x30
   47d74:	sub	r1, r1, r5
   47d78:	add	r5, r1, r0
   47d7c:	ldr	r0, [fp, #24]
   47d80:	add	sl, r3, r1, lsl #2
   47d84:	cmp	r0, #2
   47d88:	blt	47e38 <GetDataSlab+0x1bfbc>
   47d8c:	mov	r7, #0
   47d90:	ldr	r1, [r9, r7, lsl #2]
   47d94:	mov	r0, r7
   47d98:	add	r1, r1, #1
   47d9c:	str	r1, [r9, r7, lsl #2]
   47da0:	ldr	r3, [ip, r7, lsl #2]
   47da4:	sdiv	r7, r1, r3
   47da8:	mls	r1, r7, r3, r1
   47dac:	cmp	r1, #0
   47db0:	bne	47e28 <GetDataSlab+0x1bfac>
   47db4:	mov	r1, #0
   47db8:	str	r1, [r9, r0, lsl #2]
   47dbc:	add	r1, r6, r0, lsl #2
   47dc0:	ldr	r7, [r1, #4]
   47dc4:	sdiv	r1, r5, r7
   47dc8:	mls	r1, r1, r7, r5
   47dcc:	cmp	r1, #0
   47dd0:	beq	47df4 <GetDataSlab+0x1bf78>
   47dd4:	ldr	r3, [r6, r0, lsl #2]
   47dd8:	ldr	lr, [r8, r0, lsl #2]
   47ddc:	sub	r1, r7, r1
   47de0:	sub	r6, fp, #176	; 0xb0
   47de4:	mla	r1, lr, r3, r1
   47de8:	ldr	lr, [fp, #16]
   47dec:	add	r5, r1, r5
   47df0:	b	47e0c <GetDataSlab+0x1bf90>
   47df4:	ldr	r1, [r8, r0, lsl #2]
   47df8:	cmp	r1, #0
   47dfc:	beq	47e10 <GetDataSlab+0x1bf94>
   47e00:	ldr	r3, [r6, r0, lsl #2]
   47e04:	mla	r5, r3, r1, r5
   47e08:	mul	r1, r3, r1
   47e0c:	add	sl, sl, r1, lsl #2
   47e10:	ldr	r1, [fp, #24]
   47e14:	add	r7, r0, #1
   47e18:	add	r0, r0, #2
   47e1c:	cmp	r0, r1
   47e20:	blt	47d90 <GetDataSlab+0x1bf14>
   47e24:	b	47e38 <GetDataSlab+0x1bfbc>
   47e28:	ldr	r1, [sp, #44]	; 0x2c
   47e2c:	ldr	r0, [r1, r0, lsl #2]
   47e30:	add	sl, sl, r0, lsl #2
   47e34:	add	r5, r0, r5
   47e38:	ldr	r3, [sp, #56]	; 0x38
   47e3c:	ldr	r1, [sp, #60]	; 0x3c
   47e40:	mov	r0, #0
   47e44:	add	r3, r2, r3
   47e48:	cmp	r3, r1
   47e4c:	str	r3, [sp, #56]	; 0x38
   47e50:	blt	47cf8 <GetDataSlab+0x1be7c>
   47e54:	b	2e97c <GetDataSlab+0x2b00>
   47e58:	ldr	r0, [sp, #60]	; 0x3c
   47e5c:	cmp	r0, #1
   47e60:	ldr	r0, [fp, #20]
   47e64:	blt	521d8 <GetDataSlab+0x2635c>
   47e68:	add	r9, r0, #4
   47e6c:	sub	r0, fp, #136	; 0x88
   47e70:	ldr	lr, [fp, #16]
   47e74:	orr	sl, r0, #4
   47e78:	sub	r0, fp, #96	; 0x60
   47e7c:	orr	r0, r0, #4
   47e80:	str	r0, [sp, #44]	; 0x2c
   47e84:	ldr	r0, [r8], #4
   47e88:	str	r0, [sp, #48]	; 0x30
   47e8c:	mov	r0, #0
   47e90:	str	r0, [sp, #56]	; 0x38
   47e94:	ldr	r1, [sp, #48]	; 0x30
   47e98:	cmp	r2, #1
   47e9c:	add	r0, r1, r5
   47ea0:	add	r3, ip, r1, lsl #2
   47ea4:	blt	47f00 <GetDataSlab+0x1c084>
   47ea8:	ldr	r1, [sp, #68]	; 0x44
   47eac:	ldr	r2, [sp, #56]	; 0x38
   47eb0:	ldr	r6, [fp, #20]
   47eb4:	mov	r7, #0
   47eb8:	add	r5, r1, r2, lsl #2
   47ebc:	vldr	s0, [r3]
   47ec0:	vcvt.s32.f32	s0, s0
   47ec4:	vmov	r1, s0
   47ec8:	str	r1, [r5, r7, lsl #2]
   47ecc:	add	r7, r7, #1
   47ed0:	ldr	r4, [lr]
   47ed4:	ldr	r2, [r6]
   47ed8:	add	r0, r4, r0
   47edc:	add	r3, r3, r4, lsl #2
   47ee0:	cmp	r7, r2
   47ee4:	blt	47ebc <GetDataSlab+0x1c040>
   47ee8:	ldr	r1, [fp, #12]
   47eec:	sub	r6, fp, #176	; 0xb0
   47ef0:	ldr	r5, [r1]
   47ef4:	ldr	r1, [fp, #8]
   47ef8:	ldr	r1, [r1]
   47efc:	b	47f0c <GetDataSlab+0x1c090>
   47f00:	mov	r5, r1
   47f04:	ldr	r1, [sp, #52]	; 0x34
   47f08:	sub	r6, fp, #176	; 0xb0
   47f0c:	str	r1, [sp, #52]	; 0x34
   47f10:	mls	r1, r4, r2, r1
   47f14:	str	r5, [sp, #48]	; 0x30
   47f18:	sub	r1, r1, r5
   47f1c:	add	r5, r1, r0
   47f20:	ldr	r0, [fp, #24]
   47f24:	add	ip, r3, r1, lsl #2
   47f28:	cmp	r0, #2
   47f2c:	blt	47fdc <GetDataSlab+0x1c160>
   47f30:	mov	r7, #0
   47f34:	ldr	r1, [sl, r7, lsl #2]
   47f38:	mov	r0, r7
   47f3c:	add	r1, r1, #1
   47f40:	str	r1, [sl, r7, lsl #2]
   47f44:	ldr	r3, [r9, r7, lsl #2]
   47f48:	sdiv	r7, r1, r3
   47f4c:	mls	r1, r7, r3, r1
   47f50:	cmp	r1, #0
   47f54:	bne	47fcc <GetDataSlab+0x1c150>
   47f58:	mov	r1, #0
   47f5c:	str	r1, [sl, r0, lsl #2]
   47f60:	add	r1, r6, r0, lsl #2
   47f64:	ldr	r7, [r1, #4]
   47f68:	sdiv	r1, r5, r7
   47f6c:	mls	r1, r1, r7, r5
   47f70:	cmp	r1, #0
   47f74:	beq	47f98 <GetDataSlab+0x1c11c>
   47f78:	ldr	r3, [r6, r0, lsl #2]
   47f7c:	ldr	lr, [r8, r0, lsl #2]
   47f80:	sub	r1, r7, r1
   47f84:	sub	r6, fp, #176	; 0xb0
   47f88:	mla	r1, lr, r3, r1
   47f8c:	ldr	lr, [fp, #16]
   47f90:	add	r5, r1, r5
   47f94:	b	47fb0 <GetDataSlab+0x1c134>
   47f98:	ldr	r1, [r8, r0, lsl #2]
   47f9c:	cmp	r1, #0
   47fa0:	beq	47fb4 <GetDataSlab+0x1c138>
   47fa4:	ldr	r3, [r6, r0, lsl #2]
   47fa8:	mla	r5, r3, r1, r5
   47fac:	mul	r1, r3, r1
   47fb0:	add	ip, ip, r1, lsl #2
   47fb4:	ldr	r1, [fp, #24]
   47fb8:	add	r7, r0, #1
   47fbc:	add	r0, r0, #2
   47fc0:	cmp	r0, r1
   47fc4:	blt	47f34 <GetDataSlab+0x1c0b8>
   47fc8:	b	47fdc <GetDataSlab+0x1c160>
   47fcc:	ldr	r1, [sp, #44]	; 0x2c
   47fd0:	ldr	r0, [r1, r0, lsl #2]
   47fd4:	add	ip, ip, r0, lsl #2
   47fd8:	add	r5, r0, r5
   47fdc:	ldr	r3, [sp, #56]	; 0x38
   47fe0:	ldr	r1, [sp, #60]	; 0x3c
   47fe4:	mov	r0, #0
   47fe8:	add	r3, r2, r3
   47fec:	cmp	r3, r1
   47ff0:	str	r3, [sp, #56]	; 0x38
   47ff4:	blt	47e94 <GetDataSlab+0x1c018>
   47ff8:	b	2e97c <GetDataSlab+0x2b00>
   47ffc:	ldr	r0, [sp, #60]	; 0x3c
   48000:	cmp	r0, #1
   48004:	ldr	r0, [fp, #20]
   48008:	blt	521ec <GetDataSlab+0x26370>
   4800c:	add	r9, r0, #4
   48010:	sub	r0, fp, #136	; 0x88
   48014:	ldr	lr, [fp, #16]
   48018:	orr	sl, r0, #4
   4801c:	sub	r0, fp, #96	; 0x60
   48020:	orr	r0, r0, #4
   48024:	str	r0, [sp, #44]	; 0x2c
   48028:	ldr	r0, [r8], #4
   4802c:	str	r0, [sp, #52]	; 0x34
   48030:	mov	r0, #0
   48034:	str	r0, [sp, #56]	; 0x38
   48038:	ldr	r1, [sp, #52]	; 0x34
   4803c:	cmp	r2, #1
   48040:	add	r0, r1, r5
   48044:	add	r3, ip, r1, lsl #3
   48048:	blt	480a4 <GetDataSlab+0x1c228>
   4804c:	ldr	r1, [sp, #68]	; 0x44
   48050:	ldr	r2, [sp, #56]	; 0x38
   48054:	ldr	r6, [fp, #20]
   48058:	mov	r7, #0
   4805c:	add	r5, r1, r2, lsl #2
   48060:	vldr	d16, [r3]
   48064:	vcvt.s32.f64	s0, d16
   48068:	vmov	r1, s0
   4806c:	str	r1, [r5, r7, lsl #2]
   48070:	add	r7, r7, #1
   48074:	ldr	r4, [lr]
   48078:	ldr	r2, [r6]
   4807c:	add	r0, r4, r0
   48080:	add	r3, r3, r4, lsl #3
   48084:	cmp	r7, r2
   48088:	blt	48060 <GetDataSlab+0x1c1e4>
   4808c:	ldr	r1, [fp, #12]
   48090:	sub	r6, fp, #176	; 0xb0
   48094:	ldr	r5, [r1]
   48098:	ldr	r1, [fp, #8]
   4809c:	ldr	r1, [r1]
   480a0:	b	480b0 <GetDataSlab+0x1c234>
   480a4:	mov	r5, r1
   480a8:	ldr	r1, [sp, #48]	; 0x30
   480ac:	sub	r6, fp, #176	; 0xb0
   480b0:	str	r1, [sp, #48]	; 0x30
   480b4:	mls	r1, r4, r2, r1
   480b8:	str	r5, [sp, #52]	; 0x34
   480bc:	sub	r1, r1, r5
   480c0:	add	r5, r1, r0
   480c4:	ldr	r0, [fp, #24]
   480c8:	add	ip, r3, r1, lsl #3
   480cc:	cmp	r0, #2
   480d0:	blt	48180 <GetDataSlab+0x1c304>
   480d4:	mov	r7, #0
   480d8:	ldr	r1, [sl, r7, lsl #2]
   480dc:	mov	r0, r7
   480e0:	add	r1, r1, #1
   480e4:	str	r1, [sl, r7, lsl #2]
   480e8:	ldr	r3, [r9, r7, lsl #2]
   480ec:	sdiv	r7, r1, r3
   480f0:	mls	r1, r7, r3, r1
   480f4:	cmp	r1, #0
   480f8:	bne	48170 <GetDataSlab+0x1c2f4>
   480fc:	mov	r1, #0
   48100:	str	r1, [sl, r0, lsl #2]
   48104:	add	r1, r6, r0, lsl #2
   48108:	ldr	r7, [r1, #4]
   4810c:	sdiv	r1, r5, r7
   48110:	mls	r1, r1, r7, r5
   48114:	cmp	r1, #0
   48118:	beq	4813c <GetDataSlab+0x1c2c0>
   4811c:	ldr	r3, [r6, r0, lsl #2]
   48120:	ldr	lr, [r8, r0, lsl #2]
   48124:	sub	r1, r7, r1
   48128:	sub	r6, fp, #176	; 0xb0
   4812c:	mla	r1, lr, r3, r1
   48130:	ldr	lr, [fp, #16]
   48134:	add	r5, r1, r5
   48138:	b	48154 <GetDataSlab+0x1c2d8>
   4813c:	ldr	r1, [r8, r0, lsl #2]
   48140:	cmp	r1, #0
   48144:	beq	48158 <GetDataSlab+0x1c2dc>
   48148:	ldr	r3, [r6, r0, lsl #2]
   4814c:	mla	r5, r3, r1, r5
   48150:	mul	r1, r3, r1
   48154:	add	ip, ip, r1, lsl #3
   48158:	ldr	r1, [fp, #24]
   4815c:	add	r7, r0, #1
   48160:	add	r0, r0, #2
   48164:	cmp	r0, r1
   48168:	blt	480d8 <GetDataSlab+0x1c25c>
   4816c:	b	48180 <GetDataSlab+0x1c304>
   48170:	ldr	r1, [sp, #44]	; 0x2c
   48174:	ldr	r0, [r1, r0, lsl #2]
   48178:	add	ip, ip, r0, lsl #3
   4817c:	add	r5, r0, r5
   48180:	ldr	r3, [sp, #56]	; 0x38
   48184:	ldr	r1, [sp, #60]	; 0x3c
   48188:	mov	r0, #0
   4818c:	add	r3, r2, r3
   48190:	cmp	r3, r1
   48194:	str	r3, [sp, #56]	; 0x38
   48198:	blt	48038 <GetDataSlab+0x1c1bc>
   4819c:	b	2e97c <GetDataSlab+0x2b00>
   481a0:	ldr	r0, [sp, #60]	; 0x3c
   481a4:	ldr	ip, [sp, #68]	; 0x44
   481a8:	cmp	r0, #1
   481ac:	blt	48320 <GetDataSlab+0x1c4a4>
   481b0:	ldr	r0, [fp, #20]
   481b4:	ldr	r7, [r8], #4
   481b8:	mov	r2, #0
   481bc:	add	r9, r0, #4
   481c0:	sub	r0, fp, #136	; 0x88
   481c4:	orr	lr, r0, #4
   481c8:	sub	r0, fp, #96	; 0x60
   481cc:	orr	r0, r0, #4
   481d0:	str	r0, [sp, #48]	; 0x30
   481d4:	add	r3, r7, r3
   481d8:	add	r4, sl, r7, lsl #3
   481dc:	cmp	r1, #1
   481e0:	str	r2, [sp, #52]	; 0x34
   481e4:	blt	48230 <GetDataSlab+0x1c3b4>
   481e8:	add	r0, ip, r2, lsl #2
   481ec:	ldr	r2, [fp, #20]
   481f0:	ldr	r6, [fp, #16]
   481f4:	mov	r7, #0
   481f8:	ldr	r1, [r4]
   481fc:	str	r1, [r0, r7, lsl #2]
   48200:	add	r7, r7, #1
   48204:	ldr	r5, [r6]
   48208:	ldr	r1, [r2]
   4820c:	add	r3, r5, r3
   48210:	add	r4, r4, r5, lsl #3
   48214:	cmp	r7, r1
   48218:	blt	481f8 <GetDataSlab+0x1c37c>
   4821c:	ldr	r0, [fp, #12]
   48220:	ldr	r7, [r0]
   48224:	ldr	r0, [fp, #8]
   48228:	ldr	r0, [r0]
   4822c:	b	48234 <GetDataSlab+0x1c3b8>
   48230:	ldr	r0, [sp, #32]
   48234:	str	r0, [sp, #32]
   48238:	mls	r0, r5, r1, r0
   4823c:	mov	r6, r7
   48240:	sub	r0, r0, r7
   48244:	add	sl, r4, r0, lsl #3
   48248:	add	r3, r0, r3
   4824c:	ldr	r0, [fp, #24]
   48250:	cmp	r0, #2
   48254:	blt	48308 <GetDataSlab+0x1c48c>
   48258:	mov	r7, #0
   4825c:	mov	r0, r7
   48260:	ldr	r7, [lr, r7, lsl #2]
   48264:	add	r7, r7, #1
   48268:	str	r7, [lr, r0, lsl #2]
   4826c:	ldr	r4, [r9, r0, lsl #2]
   48270:	sdiv	r2, r7, r4
   48274:	mls	r2, r2, r4, r7
   48278:	cmp	r2, #0
   4827c:	bne	482f8 <GetDataSlab+0x1c47c>
   48280:	mov	r2, #0
   48284:	sub	r4, fp, #176	; 0xb0
   48288:	str	r2, [lr, r0, lsl #2]
   4828c:	add	r2, r4, r0, lsl #2
   48290:	ldr	r7, [r2, #4]
   48294:	sdiv	r2, r3, r7
   48298:	mls	ip, r2, r7, r3
   4829c:	cmp	ip, #0
   482a0:	beq	482bc <GetDataSlab+0x1c440>
   482a4:	ldr	r2, [r4, r0, lsl #2]
   482a8:	ldr	r4, [r8, r0, lsl #2]
   482ac:	sub	r7, r7, ip
   482b0:	mla	r2, r4, r2, r7
   482b4:	add	r3, r2, r3
   482b8:	b	482d8 <GetDataSlab+0x1c45c>
   482bc:	ldr	r7, [r8, r0, lsl #2]
   482c0:	cmp	r7, #0
   482c4:	beq	482dc <GetDataSlab+0x1c460>
   482c8:	sub	r2, fp, #176	; 0xb0
   482cc:	ldr	r2, [r2, r0, lsl #2]
   482d0:	mla	r3, r2, r7, r3
   482d4:	mul	r2, r2, r7
   482d8:	add	sl, sl, r2, lsl #3
   482dc:	ldr	r2, [fp, #24]
   482e0:	ldr	ip, [sp, #68]	; 0x44
   482e4:	add	r7, r0, #1
   482e8:	add	r0, r0, #2
   482ec:	cmp	r0, r2
   482f0:	blt	4825c <GetDataSlab+0x1c3e0>
   482f4:	b	48308 <GetDataSlab+0x1c48c>
   482f8:	ldr	r2, [sp, #48]	; 0x30
   482fc:	ldr	r0, [r2, r0, lsl #2]
   48300:	add	sl, sl, r0, lsl #3
   48304:	add	r3, r0, r3
   48308:	ldr	r2, [sp, #52]	; 0x34
   4830c:	ldr	r0, [sp, #60]	; 0x3c
   48310:	mov	r7, r6
   48314:	add	r2, r1, r2
   48318:	cmp	r2, r0
   4831c:	blt	481d4 <GetDataSlab+0x1c358>
   48320:	ldr	r3, [fp, #16]
   48324:	ldr	r9, [sp, #40]	; 0x28
   48328:	mov	r0, #0
   4832c:	cmp	r9, #13
   48330:	bne	2e97c <GetDataSlab+0x2b00>
   48334:	ldr	r4, [r3]
   48338:	ldr	r9, [fp, #8]
   4833c:	mov	r5, #0
   48340:	sub	r3, fp, #176	; 0xb0
   48344:	sub	r0, r4, #1
   48348:	str	r0, [fp, #-96]	; 0xffffffa0
   4834c:	ldr	r0, [r9]
   48350:	sub	r9, fp, #96	; 0x60
   48354:	str	r0, [sp, #48]	; 0x30
   48358:	str	r0, [fp, #-176]	; 0xffffff50
   4835c:	ldr	r0, [fp, #20]
   48360:	ldr	r2, [r0]
   48364:	ldr	r0, [fp, #24]
   48368:	cmp	r0, #2
   4836c:	mov	r0, r2
   48370:	str	r2, [sp, #60]	; 0x3c
   48374:	blt	484ec <GetDataSlab+0x1c670>
   48378:	ldr	r0, [fp, #8]
   4837c:	ldr	r7, [sp, #48]	; 0x30
   48380:	mov	ip, #1
   48384:	mvn	sl, #15
   48388:	mov	r5, #0
   4838c:	str	r2, [sp, #60]	; 0x3c
   48390:	mov	r1, r0
   48394:	sub	r0, r0, #4
   48398:	mov	r6, r7
   4839c:	sub	lr, r1, #12
   483a0:	mov	r1, #0
   483a4:	str	r1, [sp, #52]	; 0x34
   483a8:	mov	r1, r2
   483ac:	ldr	r1, [fp, #16]
   483b0:	ldr	r1, [r1, ip, lsl #2]
   483b4:	str	r7, [r3, ip, lsl #2]
   483b8:	sub	r8, r1, #1
   483bc:	ldr	r1, [fp, #8]
   483c0:	str	r8, [r9, ip, lsl #2]
   483c4:	ldr	r3, [r1, ip, lsl #2]
   483c8:	ldr	r1, [sp, #52]	; 0x34
   483cc:	add	r1, r1, #1
   483d0:	str	r3, [sp, #44]	; 0x2c
   483d4:	cmp	r1, #4
   483d8:	str	r1, [sp, #52]	; 0x34
   483dc:	bcs	483ec <GetDataSlab+0x1c570>
   483e0:	mov	r1, r3
   483e4:	mov	r3, ip
   483e8:	b	4848c <GetDataSlab+0x1c610>
   483ec:	vmov.i32	q9, #1	; 0x00000001
   483f0:	vmov.i32	q10, #1	; 0x00000001
   483f4:	vmov.i32	q8, #1	; 0x00000001
   483f8:	bic	r1, r1, #3
   483fc:	vmov.32	d23[1], r3
   48400:	bic	r9, ip, #3
   48404:	str	r6, [sp, #36]	; 0x24
   48408:	vmov.32	d18[0], r7
   4840c:	vmov.32	d20[0], r8
   48410:	str	r1, [sp, #40]	; 0x28
   48414:	sub	r3, ip, r1
   48418:	mov	r1, lr
   4841c:	vorr	d16, d18, d18
   48420:	vmov.i32	q9, #1	; 0x00000001
   48424:	vorr	d18, d20, d20
   48428:	vld1.32	{d20-d21}, [r1], sl
   4842c:	subs	r9, r9, #4
   48430:	vrev64.32	q12, q10
   48434:	vext.8	q12, q12, q12, #8
   48438:	vext.8	q11, q11, q12, #12
   4843c:	vmul.i32	q9, q9, q12
   48440:	vmul.i32	q8, q11, q8
   48444:	vorr	q11, q12, q12
   48448:	bne	48428 <GetDataSlab+0x1c5ac>
   4844c:	ldr	r1, [sp, #52]	; 0x34
   48450:	ldr	r6, [sp, #40]	; 0x28
   48454:	vext.8	q11, q9, q8, #8
   48458:	vext.8	q12, q8, q8, #8
   4845c:	vmul.i32	q0, q9, q11
   48460:	vmul.i32	q1, q8, q12
   48464:	vmul.i32	q8, q0, d0[1]
   48468:	vmul.i32	q9, q1, d2[1]
   4846c:	vmov.32	r8, d16[0]
   48470:	vmov.32	r7, d18[0]
   48474:	cmp	r1, r6
   48478:	bne	48484 <GetDataSlab+0x1c608>
   4847c:	ldr	r6, [sp, #36]	; 0x24
   48480:	b	484a0 <GetDataSlab+0x1c624>
   48484:	ldr	r6, [sp, #36]	; 0x24
   48488:	vmov.32	r1, d20[0]
   4848c:	mul	r7, r1, r7
   48490:	ldr	r1, [r0, r3, lsl #2]
   48494:	subs	r3, r3, #1
   48498:	mul	r8, r8, r1
   4849c:	bne	4848c <GetDataSlab+0x1c610>
   484a0:	ldr	r1, [fp, #12]
   484a4:	sub	r3, fp, #176	; 0xb0
   484a8:	sub	r9, fp, #96	; 0x60
   484ac:	add	lr, lr, #4
   484b0:	str	r7, [r3, ip, lsl #2]
   484b4:	str	r8, [r9, ip, lsl #2]
   484b8:	ldr	r1, [r1, ip, lsl #2]
   484bc:	mla	r5, r1, r6, r5
   484c0:	ldr	r1, [fp, #20]
   484c4:	ldr	r6, [sp, #60]	; 0x3c
   484c8:	ldr	r1, [r1, ip, lsl #2]
   484cc:	add	ip, ip, #1
   484d0:	mul	r6, r1, r6
   484d4:	ldr	r1, [fp, #24]
   484d8:	str	r6, [sp, #60]	; 0x3c
   484dc:	mov	r6, r7
   484e0:	ldr	r7, [sp, #44]	; 0x2c
   484e4:	cmp	ip, r1
   484e8:	bne	483ac <GetDataSlab+0x1c530>
   484ec:	ldr	r0, [sp, #56]	; 0x38
   484f0:	ldr	r9, [fp, #12]
   484f4:	cmp	r4, #1
   484f8:	add	sl, r0, r5, lsl #3
   484fc:	mov	r8, r9
   48500:	bne	4c1d4 <GetDataSlab+0x20358>
   48504:	ldr	r0, [sp, #60]	; 0x3c
   48508:	cmp	r0, #1
   4850c:	blt	52200 <GetDataSlab+0x26384>
   48510:	ldr	r0, [fp, #20]
   48514:	mov	r9, r8
   48518:	mov	lr, #0
   4851c:	add	ip, r0, #4
   48520:	sub	r0, fp, #136	; 0x88
   48524:	orr	r7, r0, #4
   48528:	sub	r0, fp, #96	; 0x60
   4852c:	orr	r0, r0, #4
   48530:	str	r0, [sp, #52]	; 0x34
   48534:	ldr	r0, [r9], #4
   48538:	str	r0, [sp, #56]	; 0x38
   4853c:	ldr	r3, [sp, #56]	; 0x38
   48540:	ldr	r1, [sp, #48]	; 0x30
   48544:	cmp	r2, #1
   48548:	add	r8, r3, r5
   4854c:	add	r0, sl, r3, lsl #3
   48550:	blt	48590 <GetDataSlab+0x1c714>
   48554:	ldr	r1, [sp, #68]	; 0x44
   48558:	ldr	r4, [fp, #20]
   4855c:	mov	r3, r0
   48560:	add	r5, r1, lr, lsl #2
   48564:	mov	r1, #0
   48568:	ldr	r2, [r3], #8
   4856c:	str	r2, [r5, r1, lsl #2]
   48570:	add	r1, r1, #1
   48574:	ldr	r2, [r4]
   48578:	cmp	r1, r2
   4857c:	blt	48568 <GetDataSlab+0x1c6ec>
   48580:	ldr	r1, [fp, #12]
   48584:	ldr	r3, [r1]
   48588:	ldr	r1, [fp, #8]
   4858c:	ldr	r1, [r1]
   48590:	str	r1, [sp, #48]	; 0x30
   48594:	sub	r1, r1, r3
   48598:	str	r3, [sp, #56]	; 0x38
   4859c:	add	sl, r0, r1, lsl #3
   485a0:	ldr	r0, [fp, #24]
   485a4:	add	r5, r8, r1
   485a8:	cmp	r0, #2
   485ac:	blt	4865c <GetDataSlab+0x1c7e0>
   485b0:	mov	r1, #0
   485b4:	mov	r8, #0
   485b8:	mov	r0, r1
   485bc:	ldr	r1, [r7, r1, lsl #2]
   485c0:	add	r1, r1, #1
   485c4:	str	r1, [r7, r0, lsl #2]
   485c8:	ldr	r6, [ip, r0, lsl #2]
   485cc:	sdiv	r4, r1, r6
   485d0:	mls	r1, r4, r6, r1
   485d4:	cmp	r1, #0
   485d8:	bne	4864c <GetDataSlab+0x1c7d0>
   485dc:	sub	r3, fp, #176	; 0xb0
   485e0:	str	r8, [r7, r0, lsl #2]
   485e4:	add	r1, r3, r0, lsl #2
   485e8:	ldr	r1, [r1, #4]
   485ec:	sdiv	r4, r5, r1
   485f0:	mls	r6, r4, r1, r5
   485f4:	cmp	r6, #0
   485f8:	beq	48614 <GetDataSlab+0x1c798>
   485fc:	ldr	r4, [r3, r0, lsl #2]
   48600:	ldr	r3, [r9, r0, lsl #2]
   48604:	sub	r1, r1, r6
   48608:	mla	r1, r3, r4, r1
   4860c:	add	r5, r1, r5
   48610:	b	48630 <GetDataSlab+0x1c7b4>
   48614:	ldr	r1, [r9, r0, lsl #2]
   48618:	cmp	r1, #0
   4861c:	beq	48634 <GetDataSlab+0x1c7b8>
   48620:	sub	r3, fp, #176	; 0xb0
   48624:	ldr	r3, [r3, r0, lsl #2]
   48628:	mla	r5, r3, r1, r5
   4862c:	mul	r1, r3, r1
   48630:	add	sl, sl, r1, lsl #3
   48634:	ldr	r3, [fp, #24]
   48638:	add	r1, r0, #1
   4863c:	add	r0, r0, #2
   48640:	cmp	r0, r3
   48644:	blt	485b8 <GetDataSlab+0x1c73c>
   48648:	b	4865c <GetDataSlab+0x1c7e0>
   4864c:	ldr	r1, [sp, #52]	; 0x34
   48650:	ldr	r0, [r1, r0, lsl #2]
   48654:	add	sl, sl, r0, lsl #3
   48658:	add	r5, r0, r5
   4865c:	ldr	r1, [sp, #60]	; 0x3c
   48660:	add	lr, r2, lr
   48664:	mov	r0, #0
   48668:	cmp	lr, r1
   4866c:	blt	4853c <GetDataSlab+0x1c6c0>
   48670:	b	2e97c <GetDataSlab+0x2b00>
   48674:	ldr	r0, [sp, #60]	; 0x3c
   48678:	cmp	r0, #1
   4867c:	blt	52214 <GetDataSlab+0x26398>
   48680:	ldr	r0, [fp, #20]
   48684:	ldr	lr, [fp, #16]
   48688:	add	ip, r0, #4
   4868c:	sub	r0, fp, #136	; 0x88
   48690:	orr	r9, r0, #4
   48694:	sub	r0, fp, #96	; 0x60
   48698:	orr	r0, r0, #4
   4869c:	str	r0, [sp, #44]	; 0x2c
   486a0:	ldr	r0, [r8], #4
   486a4:	str	r0, [sp, #48]	; 0x30
   486a8:	mov	r0, #0
   486ac:	str	r0, [sp, #56]	; 0x38
   486b0:	ldr	r1, [sp, #48]	; 0x30
   486b4:	cmp	r2, #1
   486b8:	add	r0, r1, r5
   486bc:	add	r3, sl, r1
   486c0:	blt	48714 <GetDataSlab+0x1c898>
   486c4:	ldr	r1, [sp, #68]	; 0x44
   486c8:	ldr	r2, [sp, #56]	; 0x38
   486cc:	ldr	r6, [fp, #20]
   486d0:	mov	r7, #0
   486d4:	add	r5, r1, r2, lsl #2
   486d8:	ldrb	r1, [r3]
   486dc:	str	r1, [r5, r7, lsl #2]
   486e0:	add	r7, r7, #1
   486e4:	ldr	r4, [lr]
   486e8:	ldr	r2, [r6]
   486ec:	add	r0, r4, r0
   486f0:	add	r3, r3, r4
   486f4:	cmp	r7, r2
   486f8:	blt	486d8 <GetDataSlab+0x1c85c>
   486fc:	ldr	r1, [fp, #12]
   48700:	sub	r6, fp, #176	; 0xb0
   48704:	ldr	r5, [r1]
   48708:	ldr	r1, [fp, #8]
   4870c:	ldr	r1, [r1]
   48710:	b	48720 <GetDataSlab+0x1c8a4>
   48714:	mov	r5, r1
   48718:	ldr	r1, [sp, #52]	; 0x34
   4871c:	sub	r6, fp, #176	; 0xb0
   48720:	str	r1, [sp, #52]	; 0x34
   48724:	mls	r1, r4, r2, r1
   48728:	str	r5, [sp, #48]	; 0x30
   4872c:	sub	r1, r1, r5
   48730:	add	r5, r1, r0
   48734:	ldr	r0, [fp, #24]
   48738:	add	sl, r3, r1
   4873c:	cmp	r0, #2
   48740:	blt	487ec <GetDataSlab+0x1c970>
   48744:	mov	r7, #0
   48748:	ldr	r1, [r9, r7, lsl #2]
   4874c:	mov	r0, r7
   48750:	add	r1, r1, #1
   48754:	str	r1, [r9, r7, lsl #2]
   48758:	ldr	r3, [ip, r7, lsl #2]
   4875c:	sdiv	r7, r1, r3
   48760:	mls	r1, r7, r3, r1
   48764:	cmp	r1, #0
   48768:	bne	487dc <GetDataSlab+0x1c960>
   4876c:	mov	r1, #0
   48770:	str	r1, [r9, r0, lsl #2]
   48774:	add	r1, r6, r0, lsl #2
   48778:	ldr	r7, [r1, #4]
   4877c:	sdiv	r1, r5, r7
   48780:	mls	r1, r1, r7, r5
   48784:	cmp	r1, #0
   48788:	beq	487b0 <GetDataSlab+0x1c934>
   4878c:	ldr	r3, [r6, r0, lsl #2]
   48790:	ldr	lr, [r8, r0, lsl #2]
   48794:	sub	r1, r7, r1
   48798:	sub	r6, fp, #176	; 0xb0
   4879c:	mla	r1, lr, r3, r1
   487a0:	ldr	lr, [fp, #16]
   487a4:	add	r5, r1, r5
   487a8:	add	sl, sl, r1
   487ac:	b	487c4 <GetDataSlab+0x1c948>
   487b0:	ldr	r1, [r8, r0, lsl #2]
   487b4:	cmp	r1, #0
   487b8:	ldrne	r3, [r6, r0, lsl #2]
   487bc:	mlane	r5, r3, r1, r5
   487c0:	mlane	sl, r3, r1, sl
   487c4:	ldr	r1, [fp, #24]
   487c8:	add	r7, r0, #1
   487cc:	add	r0, r0, #2
   487d0:	cmp	r0, r1
   487d4:	blt	48748 <GetDataSlab+0x1c8cc>
   487d8:	b	487ec <GetDataSlab+0x1c970>
   487dc:	ldr	r1, [sp, #44]	; 0x2c
   487e0:	ldr	r0, [r1, r0, lsl #2]
   487e4:	add	sl, sl, r0
   487e8:	add	r5, r0, r5
   487ec:	ldr	r3, [sp, #56]	; 0x38
   487f0:	ldr	r1, [sp, #60]	; 0x3c
   487f4:	mov	r0, #0
   487f8:	add	r3, r2, r3
   487fc:	cmp	r3, r1
   48800:	str	r3, [sp, #56]	; 0x38
   48804:	blt	486b0 <GetDataSlab+0x1c834>
   48808:	b	2e97c <GetDataSlab+0x2b00>
   4880c:	ldr	r0, [sp, #60]	; 0x3c
   48810:	cmp	r0, #1
   48814:	blt	52228 <GetDataSlab+0x263ac>
   48818:	ldr	r0, [fp, #20]
   4881c:	ldr	lr, [fp, #16]
   48820:	add	ip, r0, #4
   48824:	sub	r0, fp, #136	; 0x88
   48828:	orr	r9, r0, #4
   4882c:	sub	r0, fp, #96	; 0x60
   48830:	orr	r0, r0, #4
   48834:	str	r0, [sp, #44]	; 0x2c
   48838:	ldr	r0, [r8], #4
   4883c:	str	r0, [sp, #48]	; 0x30
   48840:	mov	r0, #0
   48844:	str	r0, [sp, #56]	; 0x38
   48848:	ldr	r1, [sp, #48]	; 0x30
   4884c:	cmp	r2, #1
   48850:	add	r0, r1, r5
   48854:	add	r3, sl, r1, lsl #1
   48858:	blt	488ac <GetDataSlab+0x1ca30>
   4885c:	ldr	r1, [sp, #68]	; 0x44
   48860:	ldr	r2, [sp, #56]	; 0x38
   48864:	ldr	r6, [fp, #20]
   48868:	mov	r7, #0
   4886c:	add	r5, r1, r2, lsl #2
   48870:	ldrsh	r1, [r3]
   48874:	str	r1, [r5, r7, lsl #2]
   48878:	add	r7, r7, #1
   4887c:	ldr	r4, [lr]
   48880:	ldr	r2, [r6]
   48884:	add	r0, r4, r0
   48888:	add	r3, r3, r4, lsl #1
   4888c:	cmp	r7, r2
   48890:	blt	48870 <GetDataSlab+0x1c9f4>
   48894:	ldr	r1, [fp, #12]
   48898:	sub	r6, fp, #176	; 0xb0
   4889c:	ldr	r5, [r1]
   488a0:	ldr	r1, [fp, #8]
   488a4:	ldr	r1, [r1]
   488a8:	b	488b8 <GetDataSlab+0x1ca3c>
   488ac:	mov	r5, r1
   488b0:	ldr	r1, [sp, #52]	; 0x34
   488b4:	sub	r6, fp, #176	; 0xb0
   488b8:	str	r1, [sp, #52]	; 0x34
   488bc:	mls	r1, r4, r2, r1
   488c0:	str	r5, [sp, #48]	; 0x30
   488c4:	sub	r1, r1, r5
   488c8:	add	r5, r1, r0
   488cc:	ldr	r0, [fp, #24]
   488d0:	add	sl, r3, r1, lsl #1
   488d4:	cmp	r0, #2
   488d8:	blt	48988 <GetDataSlab+0x1cb0c>
   488dc:	mov	r7, #0
   488e0:	ldr	r1, [r9, r7, lsl #2]
   488e4:	mov	r0, r7
   488e8:	add	r1, r1, #1
   488ec:	str	r1, [r9, r7, lsl #2]
   488f0:	ldr	r3, [ip, r7, lsl #2]
   488f4:	sdiv	r7, r1, r3
   488f8:	mls	r1, r7, r3, r1
   488fc:	cmp	r1, #0
   48900:	bne	48978 <GetDataSlab+0x1cafc>
   48904:	mov	r1, #0
   48908:	str	r1, [r9, r0, lsl #2]
   4890c:	add	r1, r6, r0, lsl #2
   48910:	ldr	r7, [r1, #4]
   48914:	sdiv	r1, r5, r7
   48918:	mls	r1, r1, r7, r5
   4891c:	cmp	r1, #0
   48920:	beq	48944 <GetDataSlab+0x1cac8>
   48924:	ldr	r3, [r6, r0, lsl #2]
   48928:	ldr	lr, [r8, r0, lsl #2]
   4892c:	sub	r1, r7, r1
   48930:	sub	r6, fp, #176	; 0xb0
   48934:	mla	r1, lr, r3, r1
   48938:	ldr	lr, [fp, #16]
   4893c:	add	r5, r1, r5
   48940:	b	4895c <GetDataSlab+0x1cae0>
   48944:	ldr	r1, [r8, r0, lsl #2]
   48948:	cmp	r1, #0
   4894c:	beq	48960 <GetDataSlab+0x1cae4>
   48950:	ldr	r3, [r6, r0, lsl #2]
   48954:	mla	r5, r3, r1, r5
   48958:	mul	r1, r3, r1
   4895c:	add	sl, sl, r1, lsl #1
   48960:	ldr	r1, [fp, #24]
   48964:	add	r7, r0, #1
   48968:	add	r0, r0, #2
   4896c:	cmp	r0, r1
   48970:	blt	488e0 <GetDataSlab+0x1ca64>
   48974:	b	48988 <GetDataSlab+0x1cb0c>
   48978:	ldr	r1, [sp, #44]	; 0x2c
   4897c:	ldr	r0, [r1, r0, lsl #2]
   48980:	add	sl, sl, r0, lsl #1
   48984:	add	r5, r0, r5
   48988:	ldr	r3, [sp, #56]	; 0x38
   4898c:	ldr	r1, [sp, #60]	; 0x3c
   48990:	mov	r0, #0
   48994:	add	r3, r2, r3
   48998:	cmp	r3, r1
   4899c:	str	r3, [sp, #56]	; 0x38
   489a0:	blt	48848 <GetDataSlab+0x1c9cc>
   489a4:	b	2e97c <GetDataSlab+0x2b00>
   489a8:	ldr	r0, [sp, #60]	; 0x3c
   489ac:	cmp	r0, #1
   489b0:	blt	5223c <GetDataSlab+0x263c0>
   489b4:	ldr	r0, [fp, #20]
   489b8:	ldr	lr, [fp, #16]
   489bc:	add	ip, r0, #4
   489c0:	sub	r0, fp, #136	; 0x88
   489c4:	orr	r9, r0, #4
   489c8:	sub	r0, fp, #96	; 0x60
   489cc:	orr	r0, r0, #4
   489d0:	str	r0, [sp, #44]	; 0x2c
   489d4:	ldr	r0, [r8], #4
   489d8:	str	r0, [sp, #48]	; 0x30
   489dc:	mov	r0, #0
   489e0:	str	r0, [sp, #56]	; 0x38
   489e4:	ldr	r1, [sp, #48]	; 0x30
   489e8:	cmp	r2, #1
   489ec:	add	r0, r1, r5
   489f0:	add	r3, sl, r1, lsl #1
   489f4:	blt	48a48 <GetDataSlab+0x1cbcc>
   489f8:	ldr	r1, [sp, #68]	; 0x44
   489fc:	ldr	r2, [sp, #56]	; 0x38
   48a00:	ldr	r6, [fp, #20]
   48a04:	mov	r7, #0
   48a08:	add	r5, r1, r2, lsl #2
   48a0c:	ldrh	r1, [r3]
   48a10:	str	r1, [r5, r7, lsl #2]
   48a14:	add	r7, r7, #1
   48a18:	ldr	r4, [lr]
   48a1c:	ldr	r2, [r6]
   48a20:	add	r0, r4, r0
   48a24:	add	r3, r3, r4, lsl #1
   48a28:	cmp	r7, r2
   48a2c:	blt	48a0c <GetDataSlab+0x1cb90>
   48a30:	ldr	r1, [fp, #12]
   48a34:	sub	r6, fp, #176	; 0xb0
   48a38:	ldr	r5, [r1]
   48a3c:	ldr	r1, [fp, #8]
   48a40:	ldr	r1, [r1]
   48a44:	b	48a54 <GetDataSlab+0x1cbd8>
   48a48:	mov	r5, r1
   48a4c:	ldr	r1, [sp, #52]	; 0x34
   48a50:	sub	r6, fp, #176	; 0xb0
   48a54:	str	r1, [sp, #52]	; 0x34
   48a58:	mls	r1, r4, r2, r1
   48a5c:	str	r5, [sp, #48]	; 0x30
   48a60:	sub	r1, r1, r5
   48a64:	add	r5, r1, r0
   48a68:	ldr	r0, [fp, #24]
   48a6c:	add	sl, r3, r1, lsl #1
   48a70:	cmp	r0, #2
   48a74:	blt	48b24 <GetDataSlab+0x1cca8>
   48a78:	mov	r7, #0
   48a7c:	ldr	r1, [r9, r7, lsl #2]
   48a80:	mov	r0, r7
   48a84:	add	r1, r1, #1
   48a88:	str	r1, [r9, r7, lsl #2]
   48a8c:	ldr	r3, [ip, r7, lsl #2]
   48a90:	sdiv	r7, r1, r3
   48a94:	mls	r1, r7, r3, r1
   48a98:	cmp	r1, #0
   48a9c:	bne	48b14 <GetDataSlab+0x1cc98>
   48aa0:	mov	r1, #0
   48aa4:	str	r1, [r9, r0, lsl #2]
   48aa8:	add	r1, r6, r0, lsl #2
   48aac:	ldr	r7, [r1, #4]
   48ab0:	sdiv	r1, r5, r7
   48ab4:	mls	r1, r1, r7, r5
   48ab8:	cmp	r1, #0
   48abc:	beq	48ae0 <GetDataSlab+0x1cc64>
   48ac0:	ldr	r3, [r6, r0, lsl #2]
   48ac4:	ldr	lr, [r8, r0, lsl #2]
   48ac8:	sub	r1, r7, r1
   48acc:	sub	r6, fp, #176	; 0xb0
   48ad0:	mla	r1, lr, r3, r1
   48ad4:	ldr	lr, [fp, #16]
   48ad8:	add	r5, r1, r5
   48adc:	b	48af8 <GetDataSlab+0x1cc7c>
   48ae0:	ldr	r1, [r8, r0, lsl #2]
   48ae4:	cmp	r1, #0
   48ae8:	beq	48afc <GetDataSlab+0x1cc80>
   48aec:	ldr	r3, [r6, r0, lsl #2]
   48af0:	mla	r5, r3, r1, r5
   48af4:	mul	r1, r3, r1
   48af8:	add	sl, sl, r1, lsl #1
   48afc:	ldr	r1, [fp, #24]
   48b00:	add	r7, r0, #1
   48b04:	add	r0, r0, #2
   48b08:	cmp	r0, r1
   48b0c:	blt	48a7c <GetDataSlab+0x1cc00>
   48b10:	b	48b24 <GetDataSlab+0x1cca8>
   48b14:	ldr	r1, [sp, #44]	; 0x2c
   48b18:	ldr	r0, [r1, r0, lsl #2]
   48b1c:	add	sl, sl, r0, lsl #1
   48b20:	add	r5, r0, r5
   48b24:	ldr	r3, [sp, #56]	; 0x38
   48b28:	ldr	r1, [sp, #60]	; 0x3c
   48b2c:	mov	r0, #0
   48b30:	add	r3, r2, r3
   48b34:	cmp	r3, r1
   48b38:	str	r3, [sp, #56]	; 0x38
   48b3c:	blt	489e4 <GetDataSlab+0x1cb68>
   48b40:	b	2e97c <GetDataSlab+0x2b00>
   48b44:	ldr	r0, [sp, #60]	; 0x3c
   48b48:	cmp	r0, #1
   48b4c:	blt	52250 <GetDataSlab+0x263d4>
   48b50:	ldr	r0, [fp, #20]
   48b54:	ldr	lr, [fp, #16]
   48b58:	add	ip, r0, #4
   48b5c:	sub	r0, fp, #136	; 0x88
   48b60:	orr	r9, r0, #4
   48b64:	sub	r0, fp, #96	; 0x60
   48b68:	orr	r0, r0, #4
   48b6c:	str	r0, [sp, #44]	; 0x2c
   48b70:	ldr	r0, [r8], #4
   48b74:	str	r0, [sp, #48]	; 0x30
   48b78:	mov	r0, #0
   48b7c:	str	r0, [sp, #56]	; 0x38
   48b80:	ldr	r1, [sp, #48]	; 0x30
   48b84:	cmp	r2, #1
   48b88:	add	r0, r1, r5
   48b8c:	add	r3, sl, r1, lsl #2
   48b90:	blt	48be4 <GetDataSlab+0x1cd68>
   48b94:	ldr	r1, [sp, #68]	; 0x44
   48b98:	ldr	r2, [sp, #56]	; 0x38
   48b9c:	ldr	r6, [fp, #20]
   48ba0:	mov	r7, #0
   48ba4:	add	r5, r1, r2, lsl #2
   48ba8:	ldr	r1, [r3]
   48bac:	str	r1, [r5, r7, lsl #2]
   48bb0:	add	r7, r7, #1
   48bb4:	ldr	r4, [lr]
   48bb8:	ldr	r2, [r6]
   48bbc:	add	r0, r4, r0
   48bc0:	add	r3, r3, r4, lsl #2
   48bc4:	cmp	r7, r2
   48bc8:	blt	48ba8 <GetDataSlab+0x1cd2c>
   48bcc:	ldr	r1, [fp, #12]
   48bd0:	sub	r6, fp, #176	; 0xb0
   48bd4:	ldr	r5, [r1]
   48bd8:	ldr	r1, [fp, #8]
   48bdc:	ldr	r1, [r1]
   48be0:	b	48bf0 <GetDataSlab+0x1cd74>
   48be4:	mov	r5, r1
   48be8:	ldr	r1, [sp, #52]	; 0x34
   48bec:	sub	r6, fp, #176	; 0xb0
   48bf0:	str	r1, [sp, #52]	; 0x34
   48bf4:	mls	r1, r4, r2, r1
   48bf8:	str	r5, [sp, #48]	; 0x30
   48bfc:	sub	r1, r1, r5
   48c00:	add	r5, r1, r0
   48c04:	ldr	r0, [fp, #24]
   48c08:	add	sl, r3, r1, lsl #2
   48c0c:	cmp	r0, #2
   48c10:	blt	48cc0 <GetDataSlab+0x1ce44>
   48c14:	mov	r7, #0
   48c18:	ldr	r1, [r9, r7, lsl #2]
   48c1c:	mov	r0, r7
   48c20:	add	r1, r1, #1
   48c24:	str	r1, [r9, r7, lsl #2]
   48c28:	ldr	r3, [ip, r7, lsl #2]
   48c2c:	sdiv	r7, r1, r3
   48c30:	mls	r1, r7, r3, r1
   48c34:	cmp	r1, #0
   48c38:	bne	48cb0 <GetDataSlab+0x1ce34>
   48c3c:	mov	r1, #0
   48c40:	str	r1, [r9, r0, lsl #2]
   48c44:	add	r1, r6, r0, lsl #2
   48c48:	ldr	r7, [r1, #4]
   48c4c:	sdiv	r1, r5, r7
   48c50:	mls	r1, r1, r7, r5
   48c54:	cmp	r1, #0
   48c58:	beq	48c7c <GetDataSlab+0x1ce00>
   48c5c:	ldr	r3, [r6, r0, lsl #2]
   48c60:	ldr	lr, [r8, r0, lsl #2]
   48c64:	sub	r1, r7, r1
   48c68:	sub	r6, fp, #176	; 0xb0
   48c6c:	mla	r1, lr, r3, r1
   48c70:	ldr	lr, [fp, #16]
   48c74:	add	r5, r1, r5
   48c78:	b	48c94 <GetDataSlab+0x1ce18>
   48c7c:	ldr	r1, [r8, r0, lsl #2]
   48c80:	cmp	r1, #0
   48c84:	beq	48c98 <GetDataSlab+0x1ce1c>
   48c88:	ldr	r3, [r6, r0, lsl #2]
   48c8c:	mla	r5, r3, r1, r5
   48c90:	mul	r1, r3, r1
   48c94:	add	sl, sl, r1, lsl #2
   48c98:	ldr	r1, [fp, #24]
   48c9c:	add	r7, r0, #1
   48ca0:	add	r0, r0, #2
   48ca4:	cmp	r0, r1
   48ca8:	blt	48c18 <GetDataSlab+0x1cd9c>
   48cac:	b	48cc0 <GetDataSlab+0x1ce44>
   48cb0:	ldr	r1, [sp, #44]	; 0x2c
   48cb4:	ldr	r0, [r1, r0, lsl #2]
   48cb8:	add	sl, sl, r0, lsl #2
   48cbc:	add	r5, r0, r5
   48cc0:	ldr	r3, [sp, #56]	; 0x38
   48cc4:	ldr	r1, [sp, #60]	; 0x3c
   48cc8:	mov	r0, #0
   48ccc:	add	r3, r2, r3
   48cd0:	cmp	r3, r1
   48cd4:	str	r3, [sp, #56]	; 0x38
   48cd8:	blt	48b80 <GetDataSlab+0x1cd04>
   48cdc:	b	2e97c <GetDataSlab+0x2b00>
   48ce0:	ldr	r0, [sp, #60]	; 0x3c
   48ce4:	cmp	r0, #1
   48ce8:	blt	52264 <GetDataSlab+0x263e8>
   48cec:	ldr	r0, [fp, #20]
   48cf0:	ldr	lr, [fp, #16]
   48cf4:	add	ip, r0, #4
   48cf8:	sub	r0, fp, #136	; 0x88
   48cfc:	orr	r9, r0, #4
   48d00:	sub	r0, fp, #96	; 0x60
   48d04:	orr	r0, r0, #4
   48d08:	str	r0, [sp, #44]	; 0x2c
   48d0c:	ldr	r0, [r8], #4
   48d10:	str	r0, [sp, #48]	; 0x30
   48d14:	mov	r0, #0
   48d18:	str	r0, [sp, #56]	; 0x38
   48d1c:	ldr	r1, [sp, #48]	; 0x30
   48d20:	cmp	r2, #1
   48d24:	add	r0, r1, r5
   48d28:	add	r3, sl, r1, lsl #2
   48d2c:	blt	48d80 <GetDataSlab+0x1cf04>
   48d30:	ldr	r1, [sp, #68]	; 0x44
   48d34:	ldr	r2, [sp, #56]	; 0x38
   48d38:	ldr	r6, [fp, #20]
   48d3c:	mov	r7, #0
   48d40:	add	r5, r1, r2, lsl #2
   48d44:	ldr	r1, [r3]
   48d48:	str	r1, [r5, r7, lsl #2]
   48d4c:	add	r7, r7, #1
   48d50:	ldr	r4, [lr]
   48d54:	ldr	r2, [r6]
   48d58:	add	r0, r4, r0
   48d5c:	add	r3, r3, r4, lsl #2
   48d60:	cmp	r7, r2
   48d64:	blt	48d44 <GetDataSlab+0x1cec8>
   48d68:	ldr	r1, [fp, #12]
   48d6c:	sub	r6, fp, #176	; 0xb0
   48d70:	ldr	r5, [r1]
   48d74:	ldr	r1, [fp, #8]
   48d78:	ldr	r1, [r1]
   48d7c:	b	48d8c <GetDataSlab+0x1cf10>
   48d80:	mov	r5, r1
   48d84:	ldr	r1, [sp, #52]	; 0x34
   48d88:	sub	r6, fp, #176	; 0xb0
   48d8c:	str	r1, [sp, #52]	; 0x34
   48d90:	mls	r1, r4, r2, r1
   48d94:	str	r5, [sp, #48]	; 0x30
   48d98:	sub	r1, r1, r5
   48d9c:	add	r5, r1, r0
   48da0:	ldr	r0, [fp, #24]
   48da4:	add	sl, r3, r1, lsl #2
   48da8:	cmp	r0, #2
   48dac:	blt	48e5c <GetDataSlab+0x1cfe0>
   48db0:	mov	r7, #0
   48db4:	ldr	r1, [r9, r7, lsl #2]
   48db8:	mov	r0, r7
   48dbc:	add	r1, r1, #1
   48dc0:	str	r1, [r9, r7, lsl #2]
   48dc4:	ldr	r3, [ip, r7, lsl #2]
   48dc8:	sdiv	r7, r1, r3
   48dcc:	mls	r1, r7, r3, r1
   48dd0:	cmp	r1, #0
   48dd4:	bne	48e4c <GetDataSlab+0x1cfd0>
   48dd8:	mov	r1, #0
   48ddc:	str	r1, [r9, r0, lsl #2]
   48de0:	add	r1, r6, r0, lsl #2
   48de4:	ldr	r7, [r1, #4]
   48de8:	sdiv	r1, r5, r7
   48dec:	mls	r1, r1, r7, r5
   48df0:	cmp	r1, #0
   48df4:	beq	48e18 <GetDataSlab+0x1cf9c>
   48df8:	ldr	r3, [r6, r0, lsl #2]
   48dfc:	ldr	lr, [r8, r0, lsl #2]
   48e00:	sub	r1, r7, r1
   48e04:	sub	r6, fp, #176	; 0xb0
   48e08:	mla	r1, lr, r3, r1
   48e0c:	ldr	lr, [fp, #16]
   48e10:	add	r5, r1, r5
   48e14:	b	48e30 <GetDataSlab+0x1cfb4>
   48e18:	ldr	r1, [r8, r0, lsl #2]
   48e1c:	cmp	r1, #0
   48e20:	beq	48e34 <GetDataSlab+0x1cfb8>
   48e24:	ldr	r3, [r6, r0, lsl #2]
   48e28:	mla	r5, r3, r1, r5
   48e2c:	mul	r1, r3, r1
   48e30:	add	sl, sl, r1, lsl #2
   48e34:	ldr	r1, [fp, #24]
   48e38:	add	r7, r0, #1
   48e3c:	add	r0, r0, #2
   48e40:	cmp	r0, r1
   48e44:	blt	48db4 <GetDataSlab+0x1cf38>
   48e48:	b	48e5c <GetDataSlab+0x1cfe0>
   48e4c:	ldr	r1, [sp, #44]	; 0x2c
   48e50:	ldr	r0, [r1, r0, lsl #2]
   48e54:	add	sl, sl, r0, lsl #2
   48e58:	add	r5, r0, r5
   48e5c:	ldr	r3, [sp, #56]	; 0x38
   48e60:	ldr	r1, [sp, #60]	; 0x3c
   48e64:	mov	r0, #0
   48e68:	add	r3, r2, r3
   48e6c:	cmp	r3, r1
   48e70:	str	r3, [sp, #56]	; 0x38
   48e74:	blt	48d1c <GetDataSlab+0x1cea0>
   48e78:	b	2e97c <GetDataSlab+0x2b00>
   48e7c:	ldr	r0, [sp, #60]	; 0x3c
   48e80:	cmp	r0, #1
   48e84:	ldr	r0, [fp, #20]
   48e88:	blt	52278 <GetDataSlab+0x263fc>
   48e8c:	add	r9, r0, #4
   48e90:	sub	r0, fp, #136	; 0x88
   48e94:	ldr	lr, [fp, #16]
   48e98:	orr	sl, r0, #4
   48e9c:	sub	r0, fp, #96	; 0x60
   48ea0:	orr	r0, r0, #4
   48ea4:	str	r0, [sp, #44]	; 0x2c
   48ea8:	ldr	r0, [r8], #4
   48eac:	str	r0, [sp, #48]	; 0x30
   48eb0:	mov	r0, #0
   48eb4:	str	r0, [sp, #56]	; 0x38
   48eb8:	ldr	r1, [sp, #48]	; 0x30
   48ebc:	cmp	r2, #1
   48ec0:	add	r0, r1, r5
   48ec4:	add	r3, ip, r1, lsl #2
   48ec8:	blt	48f24 <GetDataSlab+0x1d0a8>
   48ecc:	ldr	r1, [sp, #68]	; 0x44
   48ed0:	ldr	r2, [sp, #56]	; 0x38
   48ed4:	ldr	r6, [fp, #20]
   48ed8:	mov	r7, #0
   48edc:	add	r5, r1, r2, lsl #2
   48ee0:	vldr	s0, [r3]
   48ee4:	vcvt.u32.f32	s0, s0
   48ee8:	vmov	r1, s0
   48eec:	str	r1, [r5, r7, lsl #2]
   48ef0:	add	r7, r7, #1
   48ef4:	ldr	r4, [lr]
   48ef8:	ldr	r2, [r6]
   48efc:	add	r0, r4, r0
   48f00:	add	r3, r3, r4, lsl #2
   48f04:	cmp	r7, r2
   48f08:	blt	48ee0 <GetDataSlab+0x1d064>
   48f0c:	ldr	r1, [fp, #12]
   48f10:	sub	r6, fp, #176	; 0xb0
   48f14:	ldr	r5, [r1]
   48f18:	ldr	r1, [fp, #8]
   48f1c:	ldr	r1, [r1]
   48f20:	b	48f30 <GetDataSlab+0x1d0b4>
   48f24:	mov	r5, r1
   48f28:	ldr	r1, [sp, #52]	; 0x34
   48f2c:	sub	r6, fp, #176	; 0xb0
   48f30:	str	r1, [sp, #52]	; 0x34
   48f34:	mls	r1, r4, r2, r1
   48f38:	str	r5, [sp, #48]	; 0x30
   48f3c:	sub	r1, r1, r5
   48f40:	add	r5, r1, r0
   48f44:	ldr	r0, [fp, #24]
   48f48:	add	ip, r3, r1, lsl #2
   48f4c:	cmp	r0, #2
   48f50:	blt	49000 <GetDataSlab+0x1d184>
   48f54:	mov	r7, #0
   48f58:	ldr	r1, [sl, r7, lsl #2]
   48f5c:	mov	r0, r7
   48f60:	add	r1, r1, #1
   48f64:	str	r1, [sl, r7, lsl #2]
   48f68:	ldr	r3, [r9, r7, lsl #2]
   48f6c:	sdiv	r7, r1, r3
   48f70:	mls	r1, r7, r3, r1
   48f74:	cmp	r1, #0
   48f78:	bne	48ff0 <GetDataSlab+0x1d174>
   48f7c:	mov	r1, #0
   48f80:	str	r1, [sl, r0, lsl #2]
   48f84:	add	r1, r6, r0, lsl #2
   48f88:	ldr	r7, [r1, #4]
   48f8c:	sdiv	r1, r5, r7
   48f90:	mls	r1, r1, r7, r5
   48f94:	cmp	r1, #0
   48f98:	beq	48fbc <GetDataSlab+0x1d140>
   48f9c:	ldr	r3, [r6, r0, lsl #2]
   48fa0:	ldr	lr, [r8, r0, lsl #2]
   48fa4:	sub	r1, r7, r1
   48fa8:	sub	r6, fp, #176	; 0xb0
   48fac:	mla	r1, lr, r3, r1
   48fb0:	ldr	lr, [fp, #16]
   48fb4:	add	r5, r1, r5
   48fb8:	b	48fd4 <GetDataSlab+0x1d158>
   48fbc:	ldr	r1, [r8, r0, lsl #2]
   48fc0:	cmp	r1, #0
   48fc4:	beq	48fd8 <GetDataSlab+0x1d15c>
   48fc8:	ldr	r3, [r6, r0, lsl #2]
   48fcc:	mla	r5, r3, r1, r5
   48fd0:	mul	r1, r3, r1
   48fd4:	add	ip, ip, r1, lsl #2
   48fd8:	ldr	r1, [fp, #24]
   48fdc:	add	r7, r0, #1
   48fe0:	add	r0, r0, #2
   48fe4:	cmp	r0, r1
   48fe8:	blt	48f58 <GetDataSlab+0x1d0dc>
   48fec:	b	49000 <GetDataSlab+0x1d184>
   48ff0:	ldr	r1, [sp, #44]	; 0x2c
   48ff4:	ldr	r0, [r1, r0, lsl #2]
   48ff8:	add	ip, ip, r0, lsl #2
   48ffc:	add	r5, r0, r5
   49000:	ldr	r3, [sp, #56]	; 0x38
   49004:	ldr	r1, [sp, #60]	; 0x3c
   49008:	mov	r0, #0
   4900c:	add	r3, r2, r3
   49010:	cmp	r3, r1
   49014:	str	r3, [sp, #56]	; 0x38
   49018:	blt	48eb8 <GetDataSlab+0x1d03c>
   4901c:	b	2e97c <GetDataSlab+0x2b00>
   49020:	ldr	r0, [sp, #60]	; 0x3c
   49024:	cmp	r0, #1
   49028:	ldr	r0, [fp, #20]
   4902c:	blt	5228c <GetDataSlab+0x26410>
   49030:	add	r9, r0, #4
   49034:	sub	r0, fp, #136	; 0x88
   49038:	ldr	lr, [fp, #16]
   4903c:	orr	sl, r0, #4
   49040:	sub	r0, fp, #96	; 0x60
   49044:	orr	r0, r0, #4
   49048:	str	r0, [sp, #44]	; 0x2c
   4904c:	ldr	r0, [r8], #4
   49050:	str	r0, [sp, #48]	; 0x30
   49054:	mov	r0, #0
   49058:	str	r0, [sp, #56]	; 0x38
   4905c:	ldr	r1, [sp, #48]	; 0x30
   49060:	cmp	r2, #1
   49064:	add	r0, r1, r5
   49068:	add	r3, ip, r1, lsl #3
   4906c:	blt	490c8 <GetDataSlab+0x1d24c>
   49070:	ldr	r1, [sp, #68]	; 0x44
   49074:	ldr	r2, [sp, #56]	; 0x38
   49078:	ldr	r6, [fp, #20]
   4907c:	mov	r7, #0
   49080:	add	r5, r1, r2, lsl #2
   49084:	vldr	d16, [r3]
   49088:	vcvt.u32.f64	s0, d16
   4908c:	vmov	r1, s0
   49090:	str	r1, [r5, r7, lsl #2]
   49094:	add	r7, r7, #1
   49098:	ldr	r4, [lr]
   4909c:	ldr	r2, [r6]
   490a0:	add	r0, r4, r0
   490a4:	add	r3, r3, r4, lsl #3
   490a8:	cmp	r7, r2
   490ac:	blt	49084 <GetDataSlab+0x1d208>
   490b0:	ldr	r1, [fp, #12]
   490b4:	sub	r6, fp, #176	; 0xb0
   490b8:	ldr	r5, [r1]
   490bc:	ldr	r1, [fp, #8]
   490c0:	ldr	r1, [r1]
   490c4:	b	490d4 <GetDataSlab+0x1d258>
   490c8:	mov	r5, r1
   490cc:	ldr	r1, [sp, #52]	; 0x34
   490d0:	sub	r6, fp, #176	; 0xb0
   490d4:	str	r1, [sp, #52]	; 0x34
   490d8:	mls	r1, r4, r2, r1
   490dc:	str	r5, [sp, #48]	; 0x30
   490e0:	sub	r1, r1, r5
   490e4:	add	r5, r1, r0
   490e8:	ldr	r0, [fp, #24]
   490ec:	add	ip, r3, r1, lsl #3
   490f0:	cmp	r0, #2
   490f4:	blt	491a4 <GetDataSlab+0x1d328>
   490f8:	mov	r7, #0
   490fc:	ldr	r1, [sl, r7, lsl #2]
   49100:	mov	r0, r7
   49104:	add	r1, r1, #1
   49108:	str	r1, [sl, r7, lsl #2]
   4910c:	ldr	r3, [r9, r7, lsl #2]
   49110:	sdiv	r7, r1, r3
   49114:	mls	r1, r7, r3, r1
   49118:	cmp	r1, #0
   4911c:	bne	49194 <GetDataSlab+0x1d318>
   49120:	mov	r1, #0
   49124:	str	r1, [sl, r0, lsl #2]
   49128:	add	r1, r6, r0, lsl #2
   4912c:	ldr	r7, [r1, #4]
   49130:	sdiv	r1, r5, r7
   49134:	mls	r1, r1, r7, r5
   49138:	cmp	r1, #0
   4913c:	beq	49160 <GetDataSlab+0x1d2e4>
   49140:	ldr	r3, [r6, r0, lsl #2]
   49144:	ldr	lr, [r8, r0, lsl #2]
   49148:	sub	r1, r7, r1
   4914c:	sub	r6, fp, #176	; 0xb0
   49150:	mla	r1, lr, r3, r1
   49154:	ldr	lr, [fp, #16]
   49158:	add	r5, r1, r5
   4915c:	b	49178 <GetDataSlab+0x1d2fc>
   49160:	ldr	r1, [r8, r0, lsl #2]
   49164:	cmp	r1, #0
   49168:	beq	4917c <GetDataSlab+0x1d300>
   4916c:	ldr	r3, [r6, r0, lsl #2]
   49170:	mla	r5, r3, r1, r5
   49174:	mul	r1, r3, r1
   49178:	add	ip, ip, r1, lsl #3
   4917c:	ldr	r1, [fp, #24]
   49180:	add	r7, r0, #1
   49184:	add	r0, r0, #2
   49188:	cmp	r0, r1
   4918c:	blt	490fc <GetDataSlab+0x1d280>
   49190:	b	491a4 <GetDataSlab+0x1d328>
   49194:	ldr	r1, [sp, #44]	; 0x2c
   49198:	ldr	r0, [r1, r0, lsl #2]
   4919c:	add	ip, ip, r0, lsl #3
   491a0:	add	r5, r0, r5
   491a4:	ldr	r3, [sp, #56]	; 0x38
   491a8:	ldr	r1, [sp, #60]	; 0x3c
   491ac:	mov	r0, #0
   491b0:	add	r3, r2, r3
   491b4:	cmp	r3, r1
   491b8:	str	r3, [sp, #56]	; 0x38
   491bc:	blt	4905c <GetDataSlab+0x1d1e0>
   491c0:	b	2e97c <GetDataSlab+0x2b00>
   491c4:	ldr	r0, [sp, #60]	; 0x3c
   491c8:	ldr	ip, [sp, #68]	; 0x44
   491cc:	cmp	r0, #1
   491d0:	blt	49344 <GetDataSlab+0x1d4c8>
   491d4:	ldr	r0, [fp, #20]
   491d8:	ldr	r7, [r8], #4
   491dc:	mov	r2, #0
   491e0:	add	r9, r0, #4
   491e4:	sub	r0, fp, #136	; 0x88
   491e8:	orr	lr, r0, #4
   491ec:	sub	r0, fp, #96	; 0x60
   491f0:	orr	r0, r0, #4
   491f4:	str	r0, [sp, #48]	; 0x30
   491f8:	add	r3, r7, r3
   491fc:	add	r4, sl, r7, lsl #3
   49200:	cmp	r1, #1
   49204:	str	r2, [sp, #52]	; 0x34
   49208:	blt	49254 <GetDataSlab+0x1d3d8>
   4920c:	add	r0, ip, r2, lsl #2
   49210:	ldr	r2, [fp, #20]
   49214:	ldr	r6, [fp, #16]
   49218:	mov	r7, #0
   4921c:	ldr	r1, [r4]
   49220:	str	r1, [r0, r7, lsl #2]
   49224:	add	r7, r7, #1
   49228:	ldr	r5, [r6]
   4922c:	ldr	r1, [r2]
   49230:	add	r3, r5, r3
   49234:	add	r4, r4, r5, lsl #3
   49238:	cmp	r7, r1
   4923c:	blt	4921c <GetDataSlab+0x1d3a0>
   49240:	ldr	r0, [fp, #12]
   49244:	ldr	r7, [r0]
   49248:	ldr	r0, [fp, #8]
   4924c:	ldr	r0, [r0]
   49250:	b	49258 <GetDataSlab+0x1d3dc>
   49254:	ldr	r0, [sp, #32]
   49258:	str	r0, [sp, #32]
   4925c:	mls	r0, r5, r1, r0
   49260:	mov	r6, r7
   49264:	sub	r0, r0, r7
   49268:	add	sl, r4, r0, lsl #3
   4926c:	add	r3, r0, r3
   49270:	ldr	r0, [fp, #24]
   49274:	cmp	r0, #2
   49278:	blt	4932c <GetDataSlab+0x1d4b0>
   4927c:	mov	r7, #0
   49280:	mov	r0, r7
   49284:	ldr	r7, [lr, r7, lsl #2]
   49288:	add	r7, r7, #1
   4928c:	str	r7, [lr, r0, lsl #2]
   49290:	ldr	r4, [r9, r0, lsl #2]
   49294:	sdiv	r2, r7, r4
   49298:	mls	r2, r2, r4, r7
   4929c:	cmp	r2, #0
   492a0:	bne	4931c <GetDataSlab+0x1d4a0>
   492a4:	mov	r2, #0
   492a8:	sub	r4, fp, #176	; 0xb0
   492ac:	str	r2, [lr, r0, lsl #2]
   492b0:	add	r2, r4, r0, lsl #2
   492b4:	ldr	r7, [r2, #4]
   492b8:	sdiv	r2, r3, r7
   492bc:	mls	ip, r2, r7, r3
   492c0:	cmp	ip, #0
   492c4:	beq	492e0 <GetDataSlab+0x1d464>
   492c8:	ldr	r2, [r4, r0, lsl #2]
   492cc:	ldr	r4, [r8, r0, lsl #2]
   492d0:	sub	r7, r7, ip
   492d4:	mla	r2, r4, r2, r7
   492d8:	add	r3, r2, r3
   492dc:	b	492fc <GetDataSlab+0x1d480>
   492e0:	ldr	r7, [r8, r0, lsl #2]
   492e4:	cmp	r7, #0
   492e8:	beq	49300 <GetDataSlab+0x1d484>
   492ec:	sub	r2, fp, #176	; 0xb0
   492f0:	ldr	r2, [r2, r0, lsl #2]
   492f4:	mla	r3, r2, r7, r3
   492f8:	mul	r2, r2, r7
   492fc:	add	sl, sl, r2, lsl #3
   49300:	ldr	r2, [fp, #24]
   49304:	ldr	ip, [sp, #68]	; 0x44
   49308:	add	r7, r0, #1
   4930c:	add	r0, r0, #2
   49310:	cmp	r0, r2
   49314:	blt	49280 <GetDataSlab+0x1d404>
   49318:	b	4932c <GetDataSlab+0x1d4b0>
   4931c:	ldr	r2, [sp, #48]	; 0x30
   49320:	ldr	r0, [r2, r0, lsl #2]
   49324:	add	sl, sl, r0, lsl #3
   49328:	add	r3, r0, r3
   4932c:	ldr	r2, [sp, #52]	; 0x34
   49330:	ldr	r0, [sp, #60]	; 0x3c
   49334:	mov	r7, r6
   49338:	add	r2, r1, r2
   4933c:	cmp	r2, r0
   49340:	blt	491f8 <GetDataSlab+0x1d37c>
   49344:	ldr	r3, [fp, #16]
   49348:	ldr	r9, [sp, #40]	; 0x28
   4934c:	mov	r0, #0
   49350:	cmp	r9, #13
   49354:	bne	2e97c <GetDataSlab+0x2b00>
   49358:	ldr	r4, [r3]
   4935c:	ldr	r9, [fp, #8]
   49360:	mov	r5, #0
   49364:	sub	r3, fp, #176	; 0xb0
   49368:	sub	r0, r4, #1
   4936c:	str	r0, [fp, #-96]	; 0xffffffa0
   49370:	ldr	r0, [r9]
   49374:	sub	r9, fp, #96	; 0x60
   49378:	str	r0, [sp, #48]	; 0x30
   4937c:	str	r0, [fp, #-176]	; 0xffffff50
   49380:	ldr	r0, [fp, #20]
   49384:	ldr	r2, [r0]
   49388:	ldr	r0, [fp, #24]
   4938c:	cmp	r0, #2
   49390:	mov	r0, r2
   49394:	str	r2, [sp, #60]	; 0x3c
   49398:	blt	49510 <GetDataSlab+0x1d694>
   4939c:	ldr	r0, [fp, #8]
   493a0:	ldr	r7, [sp, #48]	; 0x30
   493a4:	mov	ip, #1
   493a8:	mvn	sl, #15
   493ac:	mov	r5, #0
   493b0:	str	r2, [sp, #60]	; 0x3c
   493b4:	mov	r1, r0
   493b8:	sub	r0, r0, #4
   493bc:	mov	r6, r7
   493c0:	sub	lr, r1, #12
   493c4:	mov	r1, #0
   493c8:	str	r1, [sp, #52]	; 0x34
   493cc:	mov	r1, r2
   493d0:	ldr	r1, [fp, #16]
   493d4:	ldr	r1, [r1, ip, lsl #2]
   493d8:	str	r7, [r3, ip, lsl #2]
   493dc:	sub	r8, r1, #1
   493e0:	ldr	r1, [fp, #8]
   493e4:	str	r8, [r9, ip, lsl #2]
   493e8:	ldr	r3, [r1, ip, lsl #2]
   493ec:	ldr	r1, [sp, #52]	; 0x34
   493f0:	add	r1, r1, #1
   493f4:	str	r3, [sp, #44]	; 0x2c
   493f8:	cmp	r1, #4
   493fc:	str	r1, [sp, #52]	; 0x34
   49400:	bcs	49410 <GetDataSlab+0x1d594>
   49404:	mov	r1, r3
   49408:	mov	r3, ip
   4940c:	b	494b0 <GetDataSlab+0x1d634>
   49410:	vmov.i32	q9, #1	; 0x00000001
   49414:	vmov.i32	q10, #1	; 0x00000001
   49418:	vmov.i32	q8, #1	; 0x00000001
   4941c:	bic	r1, r1, #3
   49420:	vmov.32	d23[1], r3
   49424:	bic	r9, ip, #3
   49428:	str	r6, [sp, #36]	; 0x24
   4942c:	vmov.32	d18[0], r7
   49430:	vmov.32	d20[0], r8
   49434:	str	r1, [sp, #40]	; 0x28
   49438:	sub	r3, ip, r1
   4943c:	mov	r1, lr
   49440:	vorr	d16, d18, d18
   49444:	vmov.i32	q9, #1	; 0x00000001
   49448:	vorr	d18, d20, d20
   4944c:	vld1.32	{d20-d21}, [r1], sl
   49450:	subs	r9, r9, #4
   49454:	vrev64.32	q12, q10
   49458:	vext.8	q12, q12, q12, #8
   4945c:	vext.8	q11, q11, q12, #12
   49460:	vmul.i32	q9, q9, q12
   49464:	vmul.i32	q8, q11, q8
   49468:	vorr	q11, q12, q12
   4946c:	bne	4944c <GetDataSlab+0x1d5d0>
   49470:	ldr	r1, [sp, #52]	; 0x34
   49474:	ldr	r6, [sp, #40]	; 0x28
   49478:	vext.8	q11, q9, q8, #8
   4947c:	vext.8	q12, q8, q8, #8
   49480:	vmul.i32	q0, q9, q11
   49484:	vmul.i32	q1, q8, q12
   49488:	vmul.i32	q8, q0, d0[1]
   4948c:	vmul.i32	q9, q1, d2[1]
   49490:	vmov.32	r8, d16[0]
   49494:	vmov.32	r7, d18[0]
   49498:	cmp	r1, r6
   4949c:	bne	494a8 <GetDataSlab+0x1d62c>
   494a0:	ldr	r6, [sp, #36]	; 0x24
   494a4:	b	494c4 <GetDataSlab+0x1d648>
   494a8:	ldr	r6, [sp, #36]	; 0x24
   494ac:	vmov.32	r1, d20[0]
   494b0:	mul	r7, r1, r7
   494b4:	ldr	r1, [r0, r3, lsl #2]
   494b8:	subs	r3, r3, #1
   494bc:	mul	r8, r8, r1
   494c0:	bne	494b0 <GetDataSlab+0x1d634>
   494c4:	ldr	r1, [fp, #12]
   494c8:	sub	r3, fp, #176	; 0xb0
   494cc:	sub	r9, fp, #96	; 0x60
   494d0:	add	lr, lr, #4
   494d4:	str	r7, [r3, ip, lsl #2]
   494d8:	str	r8, [r9, ip, lsl #2]
   494dc:	ldr	r1, [r1, ip, lsl #2]
   494e0:	mla	r5, r1, r6, r5
   494e4:	ldr	r1, [fp, #20]
   494e8:	ldr	r6, [sp, #60]	; 0x3c
   494ec:	ldr	r1, [r1, ip, lsl #2]
   494f0:	add	ip, ip, #1
   494f4:	mul	r6, r1, r6
   494f8:	ldr	r1, [fp, #24]
   494fc:	str	r6, [sp, #60]	; 0x3c
   49500:	mov	r6, r7
   49504:	ldr	r7, [sp, #44]	; 0x2c
   49508:	cmp	ip, r1
   4950c:	bne	493d0 <GetDataSlab+0x1d554>
   49510:	ldr	r0, [sp, #56]	; 0x38
   49514:	ldr	r9, [fp, #12]
   49518:	cmp	r4, #1
   4951c:	add	sl, r0, r5, lsl #3
   49520:	mov	r8, r9
   49524:	bne	4c370 <GetDataSlab+0x204f4>
   49528:	ldr	r0, [sp, #60]	; 0x3c
   4952c:	cmp	r0, #1
   49530:	blt	522a0 <GetDataSlab+0x26424>
   49534:	ldr	r0, [fp, #20]
   49538:	mov	r9, r8
   4953c:	mov	lr, #0
   49540:	add	ip, r0, #4
   49544:	sub	r0, fp, #136	; 0x88
   49548:	orr	r7, r0, #4
   4954c:	sub	r0, fp, #96	; 0x60
   49550:	orr	r0, r0, #4
   49554:	str	r0, [sp, #52]	; 0x34
   49558:	ldr	r0, [r9], #4
   4955c:	str	r0, [sp, #56]	; 0x38
   49560:	ldr	r3, [sp, #56]	; 0x38
   49564:	ldr	r1, [sp, #48]	; 0x30
   49568:	cmp	r2, #1
   4956c:	add	r8, r3, r5
   49570:	add	r0, sl, r3, lsl #3
   49574:	blt	495b4 <GetDataSlab+0x1d738>
   49578:	ldr	r1, [sp, #68]	; 0x44
   4957c:	ldr	r4, [fp, #20]
   49580:	mov	r3, r0
   49584:	add	r5, r1, lr, lsl #2
   49588:	mov	r1, #0
   4958c:	ldr	r2, [r3], #8
   49590:	str	r2, [r5, r1, lsl #2]
   49594:	add	r1, r1, #1
   49598:	ldr	r2, [r4]
   4959c:	cmp	r1, r2
   495a0:	blt	4958c <GetDataSlab+0x1d710>
   495a4:	ldr	r1, [fp, #12]
   495a8:	ldr	r3, [r1]
   495ac:	ldr	r1, [fp, #8]
   495b0:	ldr	r1, [r1]
   495b4:	str	r1, [sp, #48]	; 0x30
   495b8:	sub	r1, r1, r3
   495bc:	str	r3, [sp, #56]	; 0x38
   495c0:	add	sl, r0, r1, lsl #3
   495c4:	ldr	r0, [fp, #24]
   495c8:	add	r5, r8, r1
   495cc:	cmp	r0, #2
   495d0:	blt	49680 <GetDataSlab+0x1d804>
   495d4:	mov	r1, #0
   495d8:	mov	r8, #0
   495dc:	mov	r0, r1
   495e0:	ldr	r1, [r7, r1, lsl #2]
   495e4:	add	r1, r1, #1
   495e8:	str	r1, [r7, r0, lsl #2]
   495ec:	ldr	r6, [ip, r0, lsl #2]
   495f0:	sdiv	r4, r1, r6
   495f4:	mls	r1, r4, r6, r1
   495f8:	cmp	r1, #0
   495fc:	bne	49670 <GetDataSlab+0x1d7f4>
   49600:	sub	r3, fp, #176	; 0xb0
   49604:	str	r8, [r7, r0, lsl #2]
   49608:	add	r1, r3, r0, lsl #2
   4960c:	ldr	r1, [r1, #4]
   49610:	sdiv	r4, r5, r1
   49614:	mls	r6, r4, r1, r5
   49618:	cmp	r6, #0
   4961c:	beq	49638 <GetDataSlab+0x1d7bc>
   49620:	ldr	r4, [r3, r0, lsl #2]
   49624:	ldr	r3, [r9, r0, lsl #2]
   49628:	sub	r1, r1, r6
   4962c:	mla	r1, r3, r4, r1
   49630:	add	r5, r1, r5
   49634:	b	49654 <GetDataSlab+0x1d7d8>
   49638:	ldr	r1, [r9, r0, lsl #2]
   4963c:	cmp	r1, #0
   49640:	beq	49658 <GetDataSlab+0x1d7dc>
   49644:	sub	r3, fp, #176	; 0xb0
   49648:	ldr	r3, [r3, r0, lsl #2]
   4964c:	mla	r5, r3, r1, r5
   49650:	mul	r1, r3, r1
   49654:	add	sl, sl, r1, lsl #3
   49658:	ldr	r3, [fp, #24]
   4965c:	add	r1, r0, #1
   49660:	add	r0, r0, #2
   49664:	cmp	r0, r3
   49668:	blt	495dc <GetDataSlab+0x1d760>
   4966c:	b	49680 <GetDataSlab+0x1d804>
   49670:	ldr	r1, [sp, #52]	; 0x34
   49674:	ldr	r0, [r1, r0, lsl #2]
   49678:	add	sl, sl, r0, lsl #3
   4967c:	add	r5, r0, r5
   49680:	ldr	r1, [sp, #60]	; 0x3c
   49684:	add	lr, r2, lr
   49688:	mov	r0, #0
   4968c:	cmp	lr, r1
   49690:	blt	49560 <GetDataSlab+0x1d6e4>
   49694:	b	2e97c <GetDataSlab+0x2b00>
   49698:	ldr	r0, [sp, #52]	; 0x34
   4969c:	ldr	lr, [sp, #48]	; 0x30
   496a0:	cmp	r0, #1
   496a4:	ldr	r0, [fp, #12]
   496a8:	blt	522b4 <GetDataSlab+0x26438>
   496ac:	ldr	r1, [sp, #40]	; 0x28
   496b0:	add	r0, r0, #4
   496b4:	mov	r9, #0
   496b8:	str	r0, [sp, #60]	; 0x3c
   496bc:	ldr	r0, [fp, #20]
   496c0:	mls	r1, lr, sl, r1
   496c4:	str	r1, [sp, #44]	; 0x2c
   496c8:	mul	r1, lr, sl
   496cc:	add	r8, r0, #4
   496d0:	sub	r0, fp, #136	; 0x88
   496d4:	str	r1, [sp, #36]	; 0x24
   496d8:	orr	r1, r0, #4
   496dc:	orr	r0, r7, #4
   496e0:	str	r0, [sp, #32]
   496e4:	lsl	r0, lr, #3
   496e8:	str	r0, [sp, #40]	; 0x28
   496ec:	mov	r0, #0
   496f0:	str	r0, [sp, #56]	; 0x38
   496f4:	ldr	r0, [fp, #12]
   496f8:	cmp	lr, #1
   496fc:	ldr	r0, [r0]
   49700:	blt	4973c <GetDataSlab+0x1d8c0>
   49704:	ldr	r2, [sp, #36]	; 0x24
   49708:	ldr	ip, [sp, #68]	; 0x44
   4970c:	mov	r3, r2
   49710:	add	r2, r2, r5
   49714:	add	r5, r4, r3
   49718:	add	r4, r4, r0
   4971c:	ldrb	r6, [r4], sl
   49720:	subs	lr, lr, #1
   49724:	stm	ip, {r6, r9}
   49728:	add	ip, ip, #8
   4972c:	bne	4971c <GetDataSlab+0x1d8a0>
   49730:	add	r2, r2, r0
   49734:	mov	r4, r5
   49738:	b	49740 <GetDataSlab+0x1d8c4>
   4973c:	add	r2, r0, r5
   49740:	ldr	r3, [sp, #44]	; 0x2c
   49744:	ldr	ip, [sp, #68]	; 0x44
   49748:	sub	lr, fp, #176	; 0xb0
   4974c:	sub	r0, r3, r0
   49750:	add	r4, r4, r3
   49754:	add	r5, r2, r0
   49758:	ldr	r0, [fp, #24]
   4975c:	cmp	r0, #2
   49760:	blt	49808 <GetDataSlab+0x1d98c>
   49764:	mov	r2, #0
   49768:	mov	r0, r2
   4976c:	ldr	r2, [r1, r2, lsl #2]
   49770:	add	r2, r2, #1
   49774:	str	r2, [r1, r0, lsl #2]
   49778:	ldr	r6, [r8, r0, lsl #2]
   4977c:	sdiv	r7, r2, r6
   49780:	mls	r2, r7, r6, r2
   49784:	cmp	r2, #0
   49788:	bne	497f8 <GetDataSlab+0x1d97c>
   4978c:	add	r2, lr, r0, lsl #2
   49790:	str	r9, [r1, r0, lsl #2]
   49794:	ldr	r2, [r2, #4]
   49798:	sdiv	r7, r5, r2
   4979c:	mls	r6, r7, r2, r5
   497a0:	cmp	r6, #0
   497a4:	beq	497c8 <GetDataSlab+0x1d94c>
   497a8:	ldr	r3, [sp, #60]	; 0x3c
   497ac:	ldr	r7, [lr, r0, lsl #2]
   497b0:	sub	r2, r2, r6
   497b4:	ldr	r3, [r3, r0, lsl #2]
   497b8:	mla	r2, r3, r7, r2
   497bc:	add	r5, r2, r5
   497c0:	add	r4, r4, r2
   497c4:	b	497e0 <GetDataSlab+0x1d964>
   497c8:	ldr	r2, [sp, #60]	; 0x3c
   497cc:	ldr	r2, [r2, r0, lsl #2]
   497d0:	cmp	r2, #0
   497d4:	ldrne	r3, [lr, r0, lsl #2]
   497d8:	mlane	r5, r3, r2, r5
   497dc:	mlane	r4, r3, r2, r4
   497e0:	ldr	r3, [fp, #24]
   497e4:	add	r2, r0, #1
   497e8:	add	r0, r0, #2
   497ec:	cmp	r0, r3
   497f0:	blt	49768 <GetDataSlab+0x1d8ec>
   497f4:	b	49808 <GetDataSlab+0x1d98c>
   497f8:	ldr	r2, [sp, #32]
   497fc:	ldr	r0, [r2, r0, lsl #2]
   49800:	add	r4, r4, r0
   49804:	add	r5, r0, r5
   49808:	ldr	lr, [sp, #48]	; 0x30
   4980c:	ldr	r3, [sp, #56]	; 0x38
   49810:	ldr	r0, [sp, #40]	; 0x28
   49814:	ldr	r2, [sp, #52]	; 0x34
   49818:	add	r3, r3, lr
   4981c:	add	ip, ip, r0
   49820:	mov	r0, #0
   49824:	cmp	r3, r2
   49828:	str	ip, [sp, #68]	; 0x44
   4982c:	str	r3, [sp, #56]	; 0x38
   49830:	blt	496f4 <GetDataSlab+0x1d878>
   49834:	b	2e97c <GetDataSlab+0x2b00>
   49838:	ldr	r0, [sp, #60]	; 0x3c
   4983c:	ldr	r4, [sp, #44]	; 0x2c
   49840:	cmp	r0, #1
   49844:	blt	522c8 <GetDataSlab+0x2644c>
   49848:	ldr	r9, [fp, #12]
   4984c:	ldr	r0, [sp, #40]	; 0x28
   49850:	add	r5, sl, #4
   49854:	mov	sl, #0
   49858:	ldr	r2, [r9], #4
   4985c:	mls	r0, r4, r1, r0
   49860:	sub	r0, r0, r2
   49864:	str	r2, [sp, #64]	; 0x40
   49868:	str	r0, [sp, #56]	; 0x38
   4986c:	sub	r0, fp, #136	; 0x88
   49870:	orr	r7, r0, #4
   49874:	orr	r0, r8, #4
   49878:	mov	r8, #0
   4987c:	str	r0, [sp, #40]	; 0x28
   49880:	mla	r0, r4, r1, r2
   49884:	lsl	r1, r1, #1
   49888:	str	r0, [sp, #48]	; 0x30
   4988c:	lsl	r0, r4, #3
   49890:	str	r0, [sp, #52]	; 0x34
   49894:	ldr	r0, [sp, #64]	; 0x40
   49898:	cmp	r4, #1
   4989c:	blt	498c8 <GetDataSlab+0x1da4c>
   498a0:	ldr	r0, [sp, #64]	; 0x40
   498a4:	ldr	r6, [sp, #68]	; 0x44
   498a8:	add	r0, lr, r0, lsl #1
   498ac:	ldrsh	r2, [r0], r1
   498b0:	subs	r4, r4, #1
   498b4:	asr	r3, r2, #31
   498b8:	strd	r2, [r6]
   498bc:	add	r6, r6, #8
   498c0:	bne	498ac <GetDataSlab+0x1da30>
   498c4:	ldr	r0, [sp, #48]	; 0x30
   498c8:	ldr	r3, [sp, #56]	; 0x38
   498cc:	add	r2, lr, r3, lsl #1
   498d0:	add	lr, r2, r0, lsl #1
   498d4:	add	r0, r0, ip
   498d8:	add	ip, r0, r3
   498dc:	ldr	r0, [fp, #24]
   498e0:	cmp	r0, #2
   498e4:	blt	49990 <GetDataSlab+0x1db14>
   498e8:	mov	r3, #0
   498ec:	ldr	r2, [r7, r3, lsl #2]
   498f0:	mov	r0, r3
   498f4:	add	r2, r2, #1
   498f8:	str	r2, [r7, r3, lsl #2]
   498fc:	ldr	r3, [r5, r3, lsl #2]
   49900:	sdiv	r4, r2, r3
   49904:	mls	r2, r4, r3, r2
   49908:	cmp	r2, #0
   4990c:	bne	49980 <GetDataSlab+0x1db04>
   49910:	sub	r4, fp, #176	; 0xb0
   49914:	str	r8, [r7, r0, lsl #2]
   49918:	add	r2, r4, r0, lsl #2
   4991c:	ldr	r3, [r2, #4]
   49920:	sdiv	r2, ip, r3
   49924:	mls	r6, r2, r3, ip
   49928:	cmp	r6, #0
   4992c:	beq	49948 <GetDataSlab+0x1dacc>
   49930:	ldr	r2, [r4, r0, lsl #2]
   49934:	ldr	r4, [r9, r0, lsl #2]
   49938:	sub	r3, r3, r6
   4993c:	mla	r2, r4, r2, r3
   49940:	add	ip, r2, ip
   49944:	b	49964 <GetDataSlab+0x1dae8>
   49948:	ldr	r3, [r9, r0, lsl #2]
   4994c:	cmp	r3, #0
   49950:	beq	49968 <GetDataSlab+0x1daec>
   49954:	sub	r2, fp, #176	; 0xb0
   49958:	ldr	r2, [r2, r0, lsl #2]
   4995c:	mla	ip, r2, r3, ip
   49960:	mul	r2, r2, r3
   49964:	add	lr, lr, r2, lsl #1
   49968:	ldr	r2, [fp, #24]
   4996c:	add	r3, r0, #1
   49970:	add	r0, r0, #2
   49974:	cmp	r0, r2
   49978:	blt	498ec <GetDataSlab+0x1da70>
   4997c:	b	49990 <GetDataSlab+0x1db14>
   49980:	ldr	r2, [sp, #40]	; 0x28
   49984:	ldr	r0, [r2, r0, lsl #2]
   49988:	add	lr, lr, r0, lsl #1
   4998c:	add	ip, r0, ip
   49990:	ldr	r0, [sp, #68]	; 0x44
   49994:	ldr	r2, [sp, #52]	; 0x34
   49998:	ldr	r4, [sp, #44]	; 0x2c
   4999c:	add	r0, r0, r2
   499a0:	ldr	r2, [sp, #60]	; 0x3c
   499a4:	add	sl, sl, r4
   499a8:	str	r0, [sp, #68]	; 0x44
   499ac:	mov	r0, #0
   499b0:	cmp	sl, r2
   499b4:	blt	49894 <GetDataSlab+0x1da18>
   499b8:	b	2e97c <GetDataSlab+0x2b00>
   499bc:	ldr	r0, [sp, #60]	; 0x3c
   499c0:	ldr	r1, [fp, #20]
   499c4:	sub	r2, fp, #96	; 0x60
   499c8:	cmp	r0, #1
   499cc:	blt	522dc <GetDataSlab+0x26460>
   499d0:	ldr	r8, [fp, #12]
   499d4:	ldr	r3, [sp, #52]	; 0x34
   499d8:	ldr	r0, [sp, #48]	; 0x30
   499dc:	add	sl, r1, #4
   499e0:	lsl	r5, r7, #1
   499e4:	mov	ip, #0
   499e8:	ldr	r6, [r8], #4
   499ec:	mls	r0, r3, r7, r0
   499f0:	sub	r0, r0, r6
   499f4:	str	r6, [sp, #56]	; 0x38
   499f8:	str	r0, [sp, #48]	; 0x30
   499fc:	sub	r0, fp, #136	; 0x88
   49a00:	orr	r1, r0, #4
   49a04:	orr	r0, r2, #4
   49a08:	mov	r2, r3
   49a0c:	str	r0, [sp, #36]	; 0x24
   49a10:	mla	r0, r3, r7, r6
   49a14:	str	r0, [sp, #40]	; 0x28
   49a18:	lsl	r0, r3, #3
   49a1c:	str	r0, [sp, #44]	; 0x2c
   49a20:	mov	r0, #0
   49a24:	str	r0, [sp, #64]	; 0x40
   49a28:	ldr	r0, [sp, #56]	; 0x38
   49a2c:	cmp	r2, #1
   49a30:	blt	49a5c <GetDataSlab+0x1dbe0>
   49a34:	ldr	r0, [sp, #56]	; 0x38
   49a38:	ldr	r7, [sp, #52]	; 0x34
   49a3c:	ldr	r6, [sp, #68]	; 0x44
   49a40:	add	r0, r4, r0, lsl #1
   49a44:	ldrh	r2, [r0], r5
   49a48:	subs	r7, r7, #1
   49a4c:	stm	r6, {r2, ip}
   49a50:	add	r6, r6, #8
   49a54:	bne	49a44 <GetDataSlab+0x1dbc8>
   49a58:	ldr	r0, [sp, #40]	; 0x28
   49a5c:	ldr	r3, [sp, #48]	; 0x30
   49a60:	add	r2, r4, r3, lsl #1
   49a64:	add	r4, r2, r0, lsl #1
   49a68:	add	r0, r0, r9
   49a6c:	add	r9, r0, r3
   49a70:	ldr	r0, [fp, #24]
   49a74:	sub	r3, fp, #176	; 0xb0
   49a78:	cmp	r0, #2
   49a7c:	blt	49b24 <GetDataSlab+0x1dca8>
   49a80:	mov	r7, #0
   49a84:	ldr	r2, [r1, r7, lsl #2]
   49a88:	mov	r0, r7
   49a8c:	add	r2, r2, #1
   49a90:	str	r2, [r1, r7, lsl #2]
   49a94:	ldr	r6, [sl, r7, lsl #2]
   49a98:	sdiv	r7, r2, r6
   49a9c:	mls	r2, r7, r6, r2
   49aa0:	cmp	r2, #0
   49aa4:	bne	49b14 <GetDataSlab+0x1dc98>
   49aa8:	add	r2, r3, r0, lsl #2
   49aac:	str	ip, [r1, r0, lsl #2]
   49ab0:	ldr	r6, [r2, #4]
   49ab4:	sdiv	r2, r9, r6
   49ab8:	mls	r7, r2, r6, r9
   49abc:	cmp	r7, #0
   49ac0:	beq	49ae0 <GetDataSlab+0x1dc64>
   49ac4:	ldr	r2, [r3, r0, lsl #2]
   49ac8:	ldr	lr, [r8, r0, lsl #2]
   49acc:	sub	r6, r6, r7
   49ad0:	sub	r3, fp, #176	; 0xb0
   49ad4:	mla	r2, lr, r2, r6
   49ad8:	add	r9, r2, r9
   49adc:	b	49af8 <GetDataSlab+0x1dc7c>
   49ae0:	ldr	r6, [r8, r0, lsl #2]
   49ae4:	cmp	r6, #0
   49ae8:	beq	49afc <GetDataSlab+0x1dc80>
   49aec:	ldr	r2, [r3, r0, lsl #2]
   49af0:	mla	r9, r2, r6, r9
   49af4:	mul	r2, r2, r6
   49af8:	add	r4, r4, r2, lsl #1
   49afc:	ldr	r2, [fp, #24]
   49b00:	add	r7, r0, #1
   49b04:	add	r0, r0, #2
   49b08:	cmp	r0, r2
   49b0c:	blt	49a84 <GetDataSlab+0x1dc08>
   49b10:	b	49b24 <GetDataSlab+0x1dca8>
   49b14:	ldr	r2, [sp, #36]	; 0x24
   49b18:	ldr	r0, [r2, r0, lsl #2]
   49b1c:	add	r4, r4, r0, lsl #1
   49b20:	add	r9, r0, r9
   49b24:	ldr	r0, [sp, #68]	; 0x44
   49b28:	ldr	r2, [sp, #44]	; 0x2c
   49b2c:	ldr	r7, [sp, #64]	; 0x40
   49b30:	ldr	r3, [sp, #60]	; 0x3c
   49b34:	add	r0, r0, r2
   49b38:	ldr	r2, [sp, #52]	; 0x34
   49b3c:	str	r0, [sp, #68]	; 0x44
   49b40:	mov	r0, #0
   49b44:	add	r7, r7, r2
   49b48:	cmp	r7, r3
   49b4c:	str	r7, [sp, #64]	; 0x40
   49b50:	blt	49a28 <GetDataSlab+0x1dbac>
   49b54:	b	2e97c <GetDataSlab+0x2b00>
   49b58:	ldr	r0, [sp, #60]	; 0x3c
   49b5c:	sub	r1, fp, #96	; 0x60
   49b60:	cmp	r0, #1
   49b64:	ldr	r0, [fp, #12]
   49b68:	blt	522f0 <GetDataSlab+0x26474>
   49b6c:	add	r9, r0, #4
   49b70:	ldr	r0, [fp, #20]
   49b74:	ldr	r2, [sp, #48]	; 0x30
   49b78:	ldr	r7, [sp, #44]	; 0x2c
   49b7c:	lsl	r8, r6, #2
   49b80:	mov	lr, #0
   49b84:	add	ip, r0, #4
   49b88:	sub	r0, fp, #136	; 0x88
   49b8c:	mls	r7, r2, r6, r7
   49b90:	orr	r5, r0, #4
   49b94:	orr	r0, r1, #4
   49b98:	str	r7, [sp, #52]	; 0x34
   49b9c:	str	r0, [sp, #36]	; 0x24
   49ba0:	mul	r0, r2, r6
   49ba4:	str	r0, [sp, #40]	; 0x28
   49ba8:	lsl	r0, r2, #3
   49bac:	str	r0, [sp, #44]	; 0x2c
   49bb0:	mov	r0, #0
   49bb4:	str	r0, [sp, #56]	; 0x38
   49bb8:	ldr	r0, [fp, #12]
   49bbc:	cmp	r2, #1
   49bc0:	ldr	r0, [r0]
   49bc4:	blt	49c08 <GetDataSlab+0x1dd8c>
   49bc8:	ldr	r1, [sp, #40]	; 0x28
   49bcc:	ldr	lr, [sp, #68]	; 0x44
   49bd0:	add	r4, sl, r0, lsl #2
   49bd4:	add	r3, r1, r3
   49bd8:	add	r1, sl, r1, lsl #2
   49bdc:	ldr	r6, [r4], r8
   49be0:	subs	r2, r2, #1
   49be4:	asr	r7, r6, #31
   49be8:	strd	r6, [lr]
   49bec:	add	lr, lr, #8
   49bf0:	bne	49bdc <GetDataSlab+0x1dd60>
   49bf4:	mov	sl, r1
   49bf8:	add	r2, r3, r0
   49bfc:	sub	r1, fp, #176	; 0xb0
   49c00:	mov	lr, #0
   49c04:	b	49c10 <GetDataSlab+0x1dd94>
   49c08:	add	r2, r0, r3
   49c0c:	sub	r1, fp, #176	; 0xb0
   49c10:	ldr	r3, [sp, #52]	; 0x34
   49c14:	sub	r0, r3, r0
   49c18:	add	sl, sl, r3, lsl #2
   49c1c:	add	r3, r2, r0
   49c20:	ldr	r0, [fp, #24]
   49c24:	cmp	r0, #2
   49c28:	blt	49ccc <GetDataSlab+0x1de50>
   49c2c:	mov	r2, #0
   49c30:	mov	r0, r2
   49c34:	ldr	r2, [r5, r2, lsl #2]
   49c38:	add	r2, r2, #1
   49c3c:	str	r2, [r5, r0, lsl #2]
   49c40:	ldr	r7, [ip, r0, lsl #2]
   49c44:	sdiv	r6, r2, r7
   49c48:	mls	r2, r6, r7, r2
   49c4c:	cmp	r2, #0
   49c50:	bne	49cbc <GetDataSlab+0x1de40>
   49c54:	add	r2, r1, r0, lsl #2
   49c58:	str	lr, [r5, r0, lsl #2]
   49c5c:	ldr	r2, [r2, #4]
   49c60:	sdiv	r7, r3, r2
   49c64:	mls	r7, r7, r2, r3
   49c68:	cmp	r7, #0
   49c6c:	beq	49c88 <GetDataSlab+0x1de0c>
   49c70:	ldr	r6, [r1, r0, lsl #2]
   49c74:	ldr	r4, [r9, r0, lsl #2]
   49c78:	sub	r2, r2, r7
   49c7c:	mla	r2, r4, r6, r2
   49c80:	add	r3, r2, r3
   49c84:	b	49ca0 <GetDataSlab+0x1de24>
   49c88:	ldr	r2, [r9, r0, lsl #2]
   49c8c:	cmp	r2, #0
   49c90:	beq	49ca4 <GetDataSlab+0x1de28>
   49c94:	ldr	r7, [r1, r0, lsl #2]
   49c98:	mla	r3, r7, r2, r3
   49c9c:	mul	r2, r7, r2
   49ca0:	add	sl, sl, r2, lsl #2
   49ca4:	ldr	r7, [fp, #24]
   49ca8:	add	r2, r0, #1
   49cac:	add	r0, r0, #2
   49cb0:	cmp	r0, r7
   49cb4:	blt	49c30 <GetDataSlab+0x1ddb4>
   49cb8:	b	49ccc <GetDataSlab+0x1de50>
   49cbc:	ldr	r1, [sp, #36]	; 0x24
   49cc0:	ldr	r0, [r1, r0, lsl #2]
   49cc4:	add	sl, sl, r0, lsl #2
   49cc8:	add	r3, r0, r3
   49ccc:	ldr	r0, [sp, #68]	; 0x44
   49cd0:	ldr	r1, [sp, #44]	; 0x2c
   49cd4:	ldr	r2, [sp, #48]	; 0x30
   49cd8:	ldr	r4, [sp, #56]	; 0x38
   49cdc:	add	r0, r0, r1
   49ce0:	ldr	r1, [sp, #60]	; 0x3c
   49ce4:	add	r4, r4, r2
   49ce8:	str	r0, [sp, #68]	; 0x44
   49cec:	mov	r0, #0
   49cf0:	str	r4, [sp, #56]	; 0x38
   49cf4:	cmp	r4, r1
   49cf8:	blt	49bb8 <GetDataSlab+0x1dd3c>
   49cfc:	b	2e97c <GetDataSlab+0x2b00>
   49d00:	ldr	r0, [sp, #60]	; 0x3c
   49d04:	sub	r1, fp, #96	; 0x60
   49d08:	cmp	r0, #1
   49d0c:	ldr	r0, [fp, #12]
   49d10:	blt	52304 <GetDataSlab+0x26488>
   49d14:	add	ip, r0, #4
   49d18:	ldr	r0, [fp, #20]
   49d1c:	ldr	r2, [sp, #48]	; 0x30
   49d20:	ldr	r7, [sp, #44]	; 0x2c
   49d24:	mov	r9, #0
   49d28:	mov	r8, #0
   49d2c:	add	sl, r0, #4
   49d30:	sub	r0, fp, #136	; 0x88
   49d34:	mls	r7, r2, r4, r7
   49d38:	orr	r5, r0, #4
   49d3c:	orr	r0, r1, #4
   49d40:	lsl	r1, r4, #2
   49d44:	str	r7, [sp, #56]	; 0x38
   49d48:	str	r0, [sp, #40]	; 0x28
   49d4c:	mul	r0, r2, r4
   49d50:	str	r0, [sp, #44]	; 0x2c
   49d54:	lsl	r0, r2, #3
   49d58:	str	r0, [sp, #52]	; 0x34
   49d5c:	ldr	r0, [fp, #12]
   49d60:	cmp	r2, #1
   49d64:	ldr	r0, [r0]
   49d68:	blt	49da0 <GetDataSlab+0x1df24>
   49d6c:	ldr	r4, [sp, #44]	; 0x2c
   49d70:	add	r3, r4, r3
   49d74:	add	r7, lr, r4, lsl #2
   49d78:	add	r4, lr, r0, lsl #2
   49d7c:	ldr	lr, [sp, #68]	; 0x44
   49d80:	ldr	r6, [r4], r1
   49d84:	subs	r2, r2, #1
   49d88:	stm	lr, {r6, r9}
   49d8c:	add	lr, lr, #8
   49d90:	bne	49d80 <GetDataSlab+0x1df04>
   49d94:	add	r2, r3, r0
   49d98:	mov	lr, r7
   49d9c:	b	49da4 <GetDataSlab+0x1df28>
   49da0:	add	r2, r0, r3
   49da4:	ldr	r3, [sp, #56]	; 0x38
   49da8:	sub	r0, r3, r0
   49dac:	add	lr, lr, r3, lsl #2
   49db0:	add	r3, r2, r0
   49db4:	ldr	r0, [fp, #24]
   49db8:	cmp	r0, #2
   49dbc:	blt	49e68 <GetDataSlab+0x1dfec>
   49dc0:	mov	r2, #0
   49dc4:	mov	r0, r2
   49dc8:	ldr	r2, [r5, r2, lsl #2]
   49dcc:	add	r2, r2, #1
   49dd0:	str	r2, [r5, r0, lsl #2]
   49dd4:	ldr	r6, [sl, r0, lsl #2]
   49dd8:	sdiv	r7, r2, r6
   49ddc:	mls	r2, r7, r6, r2
   49de0:	cmp	r2, #0
   49de4:	bne	49e58 <GetDataSlab+0x1dfdc>
   49de8:	sub	r4, fp, #176	; 0xb0
   49dec:	str	r9, [r5, r0, lsl #2]
   49df0:	add	r2, r4, r0, lsl #2
   49df4:	ldr	r2, [r2, #4]
   49df8:	sdiv	r7, r3, r2
   49dfc:	mls	r6, r7, r2, r3
   49e00:	cmp	r6, #0
   49e04:	beq	49e20 <GetDataSlab+0x1dfa4>
   49e08:	ldr	r7, [r4, r0, lsl #2]
   49e0c:	ldr	r4, [ip, r0, lsl #2]
   49e10:	sub	r2, r2, r6
   49e14:	mla	r2, r4, r7, r2
   49e18:	add	r3, r2, r3
   49e1c:	b	49e3c <GetDataSlab+0x1dfc0>
   49e20:	ldr	r2, [ip, r0, lsl #2]
   49e24:	cmp	r2, #0
   49e28:	beq	49e40 <GetDataSlab+0x1dfc4>
   49e2c:	sub	r4, fp, #176	; 0xb0
   49e30:	ldr	r4, [r4, r0, lsl #2]
   49e34:	mla	r3, r4, r2, r3
   49e38:	mul	r2, r4, r2
   49e3c:	add	lr, lr, r2, lsl #2
   49e40:	ldr	r4, [fp, #24]
   49e44:	add	r2, r0, #1
   49e48:	add	r0, r0, #2
   49e4c:	cmp	r0, r4
   49e50:	blt	49dc4 <GetDataSlab+0x1df48>
   49e54:	b	49e68 <GetDataSlab+0x1dfec>
   49e58:	ldr	r2, [sp, #40]	; 0x28
   49e5c:	ldr	r0, [r2, r0, lsl #2]
   49e60:	add	lr, lr, r0, lsl #2
   49e64:	add	r3, r0, r3
   49e68:	ldr	r0, [sp, #68]	; 0x44
   49e6c:	ldr	r2, [sp, #52]	; 0x34
   49e70:	ldr	r4, [sp, #60]	; 0x3c
   49e74:	add	r0, r0, r2
   49e78:	ldr	r2, [sp, #48]	; 0x30
   49e7c:	str	r0, [sp, #68]	; 0x44
   49e80:	mov	r0, #0
   49e84:	add	r8, r8, r2
   49e88:	cmp	r8, r4
   49e8c:	blt	49d5c <GetDataSlab+0x1dee0>
   49e90:	b	2e97c <GetDataSlab+0x2b00>
   49e94:	ldr	r0, [sp, #52]	; 0x34
   49e98:	ldr	r1, [fp, #12]
   49e9c:	ldr	r2, [fp, #20]
   49ea0:	ldr	r9, [sp, #44]	; 0x2c
   49ea4:	cmp	r0, #1
   49ea8:	blt	52318 <GetDataSlab+0x2649c>
   49eac:	ldr	r0, [sp, #40]	; 0x28
   49eb0:	ldr	lr, [r1], #4
   49eb4:	lsl	sl, r3, #2
   49eb8:	mls	r0, r9, r3, r0
   49ebc:	str	r1, [sp, #64]	; 0x40
   49ec0:	str	lr, [sp, #36]	; 0x24
   49ec4:	sub	r0, r0, lr
   49ec8:	str	r0, [sp, #48]	; 0x30
   49ecc:	add	r0, r2, #4
   49ed0:	str	r0, [sp, #60]	; 0x3c
   49ed4:	sub	r0, fp, #136	; 0x88
   49ed8:	orr	r8, r0, #4
   49edc:	sub	r0, fp, #96	; 0x60
   49ee0:	orr	r0, r0, #4
   49ee4:	str	r0, [sp, #28]
   49ee8:	mla	r0, r9, r3, lr
   49eec:	str	r0, [sp, #32]
   49ef0:	lsl	r0, r9, #3
   49ef4:	str	r0, [sp, #40]	; 0x28
   49ef8:	mov	r0, #0
   49efc:	str	r0, [sp, #56]	; 0x38
   49f00:	cmp	r9, #1
   49f04:	mov	r0, lr
   49f08:	blt	49f38 <GetDataSlab+0x1e0bc>
   49f0c:	ldr	r6, [sp, #68]	; 0x44
   49f10:	add	r7, r4, lr, lsl #2
   49f14:	ldr	r0, [r7], sl
   49f18:	bl	5f344 <__aeabi_f2lz>
   49f1c:	strd	r0, [r6]
   49f20:	subs	r9, r9, #1
   49f24:	add	r6, r6, #8
   49f28:	bne	49f14 <GetDataSlab+0x1e098>
   49f2c:	ldr	r0, [sp, #32]
   49f30:	ldr	r9, [sp, #44]	; 0x2c
   49f34:	ldr	lr, [sp, #36]	; 0x24
   49f38:	ldr	r2, [sp, #48]	; 0x30
   49f3c:	ldr	r6, [sp, #68]	; 0x44
   49f40:	add	r1, r4, r2, lsl #2
   49f44:	mov	ip, r6
   49f48:	sub	r6, fp, #176	; 0xb0
   49f4c:	add	r4, r1, r0, lsl #2
   49f50:	add	r0, r0, r5
   49f54:	add	r5, r0, r2
   49f58:	ldr	r0, [fp, #24]
   49f5c:	cmp	r0, #2
   49f60:	blt	4a014 <GetDataSlab+0x1e198>
   49f64:	mov	r1, #0
   49f68:	mov	r0, r1
   49f6c:	ldr	r1, [r8, r1, lsl #2]
   49f70:	ldr	r2, [sp, #60]	; 0x3c
   49f74:	add	r1, r1, #1
   49f78:	str	r1, [r8, r0, lsl #2]
   49f7c:	ldr	r2, [r2, r0, lsl #2]
   49f80:	sdiv	r3, r1, r2
   49f84:	mls	r1, r3, r2, r1
   49f88:	cmp	r1, #0
   49f8c:	bne	4a004 <GetDataSlab+0x1e188>
   49f90:	mov	r1, #0
   49f94:	str	r1, [r8, r0, lsl #2]
   49f98:	add	r1, r6, r0, lsl #2
   49f9c:	ldr	r1, [r1, #4]
   49fa0:	sdiv	r2, r5, r1
   49fa4:	mls	r2, r2, r1, r5
   49fa8:	cmp	r2, #0
   49fac:	beq	49fcc <GetDataSlab+0x1e150>
   49fb0:	ldr	r7, [sp, #64]	; 0x40
   49fb4:	ldr	r3, [r6, r0, lsl #2]
   49fb8:	sub	r1, r1, r2
   49fbc:	ldr	r7, [r7, r0, lsl #2]
   49fc0:	mla	r1, r7, r3, r1
   49fc4:	add	r5, r1, r5
   49fc8:	b	49fe8 <GetDataSlab+0x1e16c>
   49fcc:	ldr	r1, [sp, #64]	; 0x40
   49fd0:	ldr	r1, [r1, r0, lsl #2]
   49fd4:	cmp	r1, #0
   49fd8:	beq	49fec <GetDataSlab+0x1e170>
   49fdc:	ldr	r2, [r6, r0, lsl #2]
   49fe0:	mla	r5, r2, r1, r5
   49fe4:	mul	r1, r2, r1
   49fe8:	add	r4, r4, r1, lsl #2
   49fec:	ldr	r2, [fp, #24]
   49ff0:	add	r1, r0, #1
   49ff4:	add	r0, r0, #2
   49ff8:	cmp	r0, r2
   49ffc:	blt	49f68 <GetDataSlab+0x1e0ec>
   4a000:	b	4a014 <GetDataSlab+0x1e198>
   4a004:	ldr	r1, [sp, #28]
   4a008:	ldr	r0, [r1, r0, lsl #2]
   4a00c:	add	r4, r4, r0, lsl #2
   4a010:	add	r5, r0, r5
   4a014:	ldr	r2, [sp, #56]	; 0x38
   4a018:	ldr	r0, [sp, #40]	; 0x28
   4a01c:	ldr	r1, [sp, #52]	; 0x34
   4a020:	add	r2, r2, r9
   4a024:	add	ip, ip, r0
   4a028:	mov	r0, #0
   4a02c:	cmp	r2, r1
   4a030:	str	ip, [sp, #68]	; 0x44
   4a034:	str	r2, [sp, #56]	; 0x38
   4a038:	blt	49f00 <GetDataSlab+0x1e084>
   4a03c:	b	2e97c <GetDataSlab+0x2b00>
   4a040:	ldr	r0, [sp, #52]	; 0x34
   4a044:	ldr	r1, [fp, #12]
   4a048:	ldr	r2, [fp, #20]
   4a04c:	ldr	r9, [sp, #44]	; 0x2c
   4a050:	cmp	r0, #1
   4a054:	blt	5232c <GetDataSlab+0x264b0>
   4a058:	ldr	r0, [sp, #40]	; 0x28
   4a05c:	ldr	lr, [r1], #4
   4a060:	lsl	sl, r3, #3
   4a064:	mls	r0, r9, r3, r0
   4a068:	str	r1, [sp, #64]	; 0x40
   4a06c:	str	lr, [sp, #36]	; 0x24
   4a070:	sub	r0, r0, lr
   4a074:	str	r0, [sp, #48]	; 0x30
   4a078:	add	r0, r2, #4
   4a07c:	str	r0, [sp, #60]	; 0x3c
   4a080:	sub	r0, fp, #136	; 0x88
   4a084:	orr	r8, r0, #4
   4a088:	sub	r0, fp, #96	; 0x60
   4a08c:	orr	r0, r0, #4
   4a090:	str	r0, [sp, #28]
   4a094:	mla	r0, r9, r3, lr
   4a098:	str	r0, [sp, #32]
   4a09c:	lsl	r0, r9, #3
   4a0a0:	str	r0, [sp, #40]	; 0x28
   4a0a4:	mov	r0, #0
   4a0a8:	str	r0, [sp, #56]	; 0x38
   4a0ac:	cmp	r9, #1
   4a0b0:	mov	r0, lr
   4a0b4:	blt	4a0ec <GetDataSlab+0x1e270>
   4a0b8:	ldr	r6, [sp, #68]	; 0x44
   4a0bc:	add	r7, r4, lr, lsl #3
   4a0c0:	vldr	d16, [r7]
   4a0c4:	vmov	r0, r1, d16
   4a0c8:	bl	5f370 <__aeabi_d2lz>
   4a0cc:	strd	r0, [r6]
   4a0d0:	add	r7, r7, sl
   4a0d4:	subs	r9, r9, #1
   4a0d8:	add	r6, r6, #8
   4a0dc:	bne	4a0c0 <GetDataSlab+0x1e244>
   4a0e0:	ldr	r0, [sp, #32]
   4a0e4:	ldr	r9, [sp, #44]	; 0x2c
   4a0e8:	ldr	lr, [sp, #36]	; 0x24
   4a0ec:	ldr	r2, [sp, #48]	; 0x30
   4a0f0:	ldr	r6, [sp, #68]	; 0x44
   4a0f4:	add	r1, r4, r2, lsl #3
   4a0f8:	mov	ip, r6
   4a0fc:	sub	r6, fp, #176	; 0xb0
   4a100:	add	r4, r1, r0, lsl #3
   4a104:	add	r0, r0, r5
   4a108:	add	r5, r0, r2
   4a10c:	ldr	r0, [fp, #24]
   4a110:	cmp	r0, #2
   4a114:	blt	4a1c8 <GetDataSlab+0x1e34c>
   4a118:	mov	r1, #0
   4a11c:	mov	r0, r1
   4a120:	ldr	r1, [r8, r1, lsl #2]
   4a124:	ldr	r2, [sp, #60]	; 0x3c
   4a128:	add	r1, r1, #1
   4a12c:	str	r1, [r8, r0, lsl #2]
   4a130:	ldr	r2, [r2, r0, lsl #2]
   4a134:	sdiv	r3, r1, r2
   4a138:	mls	r1, r3, r2, r1
   4a13c:	cmp	r1, #0
   4a140:	bne	4a1b8 <GetDataSlab+0x1e33c>
   4a144:	mov	r1, #0
   4a148:	str	r1, [r8, r0, lsl #2]
   4a14c:	add	r1, r6, r0, lsl #2
   4a150:	ldr	r1, [r1, #4]
   4a154:	sdiv	r2, r5, r1
   4a158:	mls	r2, r2, r1, r5
   4a15c:	cmp	r2, #0
   4a160:	beq	4a180 <GetDataSlab+0x1e304>
   4a164:	ldr	r7, [sp, #64]	; 0x40
   4a168:	ldr	r3, [r6, r0, lsl #2]
   4a16c:	sub	r1, r1, r2
   4a170:	ldr	r7, [r7, r0, lsl #2]
   4a174:	mla	r1, r7, r3, r1
   4a178:	add	r5, r1, r5
   4a17c:	b	4a19c <GetDataSlab+0x1e320>
   4a180:	ldr	r1, [sp, #64]	; 0x40
   4a184:	ldr	r1, [r1, r0, lsl #2]
   4a188:	cmp	r1, #0
   4a18c:	beq	4a1a0 <GetDataSlab+0x1e324>
   4a190:	ldr	r2, [r6, r0, lsl #2]
   4a194:	mla	r5, r2, r1, r5
   4a198:	mul	r1, r2, r1
   4a19c:	add	r4, r4, r1, lsl #3
   4a1a0:	ldr	r2, [fp, #24]
   4a1a4:	add	r1, r0, #1
   4a1a8:	add	r0, r0, #2
   4a1ac:	cmp	r0, r2
   4a1b0:	blt	4a11c <GetDataSlab+0x1e2a0>
   4a1b4:	b	4a1c8 <GetDataSlab+0x1e34c>
   4a1b8:	ldr	r1, [sp, #28]
   4a1bc:	ldr	r0, [r1, r0, lsl #2]
   4a1c0:	add	r4, r4, r0, lsl #3
   4a1c4:	add	r5, r0, r5
   4a1c8:	ldr	r2, [sp, #56]	; 0x38
   4a1cc:	ldr	r0, [sp, #40]	; 0x28
   4a1d0:	ldr	r1, [sp, #52]	; 0x34
   4a1d4:	add	r2, r2, r9
   4a1d8:	add	ip, ip, r0
   4a1dc:	mov	r0, #0
   4a1e0:	cmp	r2, r1
   4a1e4:	str	ip, [sp, #68]	; 0x44
   4a1e8:	str	r2, [sp, #56]	; 0x38
   4a1ec:	blt	4a0ac <GetDataSlab+0x1e230>
   4a1f0:	b	2e97c <GetDataSlab+0x2b00>
   4a1f4:	ldr	r0, [sp, #60]	; 0x3c
   4a1f8:	ldr	ip, [fp, #12]
   4a1fc:	ldr	r8, [sp, #48]	; 0x30
   4a200:	sub	r1, fp, #96	; 0x60
   4a204:	cmp	r0, #1
   4a208:	blt	4a38c <GetDataSlab+0x1e510>
   4a20c:	ldr	r0, [sp, #32]
   4a210:	ldr	r3, [ip], #4
   4a214:	lsl	r7, r2, #3
   4a218:	mov	r9, #0
   4a21c:	mls	r0, r8, r2, r0
   4a220:	str	r3, [sp, #44]	; 0x2c
   4a224:	sub	r0, r0, r3
   4a228:	str	r0, [sp, #36]	; 0x24
   4a22c:	ldr	r0, [fp, #20]
   4a230:	add	sl, r0, #4
   4a234:	sub	r0, fp, #136	; 0x88
   4a238:	orr	r4, r0, #4
   4a23c:	orr	r0, r1, #4
   4a240:	str	r0, [sp, #24]
   4a244:	mla	r0, r8, r2, r3
   4a248:	str	r0, [sp, #28]
   4a24c:	lsl	r0, r8, #3
   4a250:	str	r0, [sp, #32]
   4a254:	ldr	r0, [sp, #68]	; 0x44
   4a258:	str	r0, [sp, #52]	; 0x34
   4a25c:	ldr	r0, [sp, #44]	; 0x2c
   4a260:	cmp	r8, #1
   4a264:	blt	4a2a0 <GetDataSlab+0x1e424>
   4a268:	ldr	r0, [sp, #44]	; 0x2c
   4a26c:	add	r2, r5, r0, lsl #3
   4a270:	mov	r0, r8
   4a274:	ldr	r8, [sp, #52]	; 0x34
   4a278:	ldr	r3, [r2]
   4a27c:	ldr	r1, [r2, #4]
   4a280:	add	r2, r2, r7
   4a284:	subs	r0, r0, #1
   4a288:	str	r3, [r8]
   4a28c:	str	r1, [r8, #4]
   4a290:	add	r8, r8, #8
   4a294:	bne	4a278 <GetDataSlab+0x1e3fc>
   4a298:	ldr	r0, [sp, #28]
   4a29c:	ldr	r8, [sp, #48]	; 0x30
   4a2a0:	ldr	r2, [sp, #36]	; 0x24
   4a2a4:	add	r1, r5, r2, lsl #3
   4a2a8:	add	r5, r1, r0, lsl #3
   4a2ac:	add	r0, r0, lr
   4a2b0:	add	lr, r0, r2
   4a2b4:	ldr	r0, [fp, #24]
   4a2b8:	cmp	r0, #2
   4a2bc:	blt	4a36c <GetDataSlab+0x1e4f0>
   4a2c0:	mov	r0, #0
   4a2c4:	mov	r2, r0
   4a2c8:	ldr	r0, [r4, r0, lsl #2]
   4a2cc:	add	r0, r0, #1
   4a2d0:	str	r0, [r4, r2, lsl #2]
   4a2d4:	ldr	r1, [sl, r2, lsl #2]
   4a2d8:	sdiv	r3, r0, r1
   4a2dc:	mls	r0, r3, r1, r0
   4a2e0:	cmp	r0, #0
   4a2e4:	bne	4a35c <GetDataSlab+0x1e4e0>
   4a2e8:	mov	r0, #0
   4a2ec:	sub	r6, fp, #176	; 0xb0
   4a2f0:	str	r0, [r4, r2, lsl #2]
   4a2f4:	add	r0, r6, r2, lsl #2
   4a2f8:	ldr	r0, [r0, #4]
   4a2fc:	sdiv	r1, lr, r0
   4a300:	mls	r3, r1, r0, lr
   4a304:	cmp	r3, #0
   4a308:	beq	4a324 <GetDataSlab+0x1e4a8>
   4a30c:	ldr	r1, [r6, r2, lsl #2]
   4a310:	ldr	r6, [ip, r2, lsl #2]
   4a314:	sub	r0, r0, r3
   4a318:	mla	r0, r6, r1, r0
   4a31c:	add	lr, r0, lr
   4a320:	b	4a340 <GetDataSlab+0x1e4c4>
   4a324:	ldr	r0, [ip, r2, lsl #2]
   4a328:	cmp	r0, #0
   4a32c:	beq	4a344 <GetDataSlab+0x1e4c8>
   4a330:	sub	r1, fp, #176	; 0xb0
   4a334:	ldr	r1, [r1, r2, lsl #2]
   4a338:	mla	lr, r1, r0, lr
   4a33c:	mul	r0, r1, r0
   4a340:	add	r5, r5, r0, lsl #3
   4a344:	add	r0, r2, #1
   4a348:	add	r1, r2, #2
   4a34c:	ldr	r2, [fp, #24]
   4a350:	cmp	r1, r2
   4a354:	blt	4a2c4 <GetDataSlab+0x1e448>
   4a358:	b	4a36c <GetDataSlab+0x1e4f0>
   4a35c:	ldr	r0, [sp, #24]
   4a360:	ldr	r0, [r0, r2, lsl #2]
   4a364:	add	r5, r5, r0, lsl #3
   4a368:	add	lr, r0, lr
   4a36c:	ldr	r0, [sp, #32]
   4a370:	ldr	r1, [sp, #52]	; 0x34
   4a374:	add	r9, r9, r8
   4a378:	add	r1, r1, r0
   4a37c:	ldr	r0, [sp, #60]	; 0x3c
   4a380:	str	r1, [sp, #52]	; 0x34
   4a384:	cmp	r9, r0
   4a388:	blt	4a25c <GetDataSlab+0x1e3e0>
   4a38c:	ldr	r9, [sp, #40]	; 0x28
   4a390:	mov	r0, #0
   4a394:	ldr	r1, [fp, #16]
   4a398:	cmp	r9, #13
   4a39c:	bne	2e97c <GetDataSlab+0x2b00>
   4a3a0:	ldr	r0, [r1]
   4a3a4:	ldr	sl, [fp, #20]
   4a3a8:	mov	r2, #0
   4a3ac:	sub	r5, fp, #176	; 0xb0
   4a3b0:	sub	r6, fp, #96	; 0x60
   4a3b4:	str	r0, [sp, #36]	; 0x24
   4a3b8:	sub	r0, r0, #1
   4a3bc:	str	r0, [fp, #-96]	; 0xffffffa0
   4a3c0:	ldr	r0, [fp, #8]
   4a3c4:	ldr	r0, [r0]
   4a3c8:	str	r0, [fp, #-176]	; 0xffffff50
   4a3cc:	str	r0, [sp, #44]	; 0x2c
   4a3d0:	ldr	r0, [fp, #24]
   4a3d4:	ldr	r1, [sl]
   4a3d8:	cmp	r0, #2
   4a3dc:	str	r1, [sp, #52]	; 0x34
   4a3e0:	str	r1, [sp, #60]	; 0x3c
   4a3e4:	blt	4a534 <GetDataSlab+0x1e6b8>
   4a3e8:	ldr	r0, [fp, #8]
   4a3ec:	ldr	r3, [sp, #44]	; 0x2c
   4a3f0:	mov	r4, #1
   4a3f4:	mov	lr, #0
   4a3f8:	mvn	ip, #15
   4a3fc:	mov	r2, #0
   4a400:	sub	r7, r0, #4
   4a404:	sub	r9, r0, #12
   4a408:	ldr	r0, [sp, #52]	; 0x34
   4a40c:	mov	r8, r3
   4a410:	str	r0, [sp, #60]	; 0x3c
   4a414:	ldr	r1, [fp, #16]
   4a418:	add	lr, lr, #1
   4a41c:	cmp	lr, #4
   4a420:	ldr	r1, [r1, r4, lsl #2]
   4a424:	str	r3, [r5, r4, lsl #2]
   4a428:	sub	r1, r1, #1
   4a42c:	str	r1, [r6, r4, lsl #2]
   4a430:	ldr	r6, [fp, #8]
   4a434:	ldr	r0, [r6, r4, lsl #2]
   4a438:	bcs	4a44c <GetDataSlab+0x1e5d0>
   4a43c:	mov	sl, r0
   4a440:	mov	r6, r0
   4a444:	mov	r5, r4
   4a448:	b	4a4d4 <GetDataSlab+0x1e658>
   4a44c:	vmov.i32	q9, #1	; 0x00000001
   4a450:	vmov.i32	q10, #1	; 0x00000001
   4a454:	vmov.i32	q8, #1	; 0x00000001
   4a458:	bic	r6, lr, #3
   4a45c:	bic	sl, r4, #3
   4a460:	vmov.32	d23[1], r0
   4a464:	vmov.32	d18[0], r3
   4a468:	vmov.32	d20[0], r1
   4a46c:	sub	r5, r4, r6
   4a470:	mov	r1, r9
   4a474:	vorr	d16, d18, d18
   4a478:	vmov.i32	q9, #1	; 0x00000001
   4a47c:	vorr	d18, d20, d20
   4a480:	vld1.32	{d20-d21}, [r1], ip
   4a484:	subs	sl, sl, #4
   4a488:	vrev64.32	q12, q10
   4a48c:	vext.8	q12, q12, q12, #8
   4a490:	vext.8	q11, q11, q12, #12
   4a494:	vmul.i32	q9, q9, q12
   4a498:	vmul.i32	q8, q11, q8
   4a49c:	vorr	q11, q12, q12
   4a4a0:	bne	4a480 <GetDataSlab+0x1e604>
   4a4a4:	vext.8	q11, q9, q8, #8
   4a4a8:	vext.8	q12, q8, q8, #8
   4a4ac:	mov	sl, r0
   4a4b0:	cmp	lr, r6
   4a4b4:	vmul.i32	q0, q9, q11
   4a4b8:	vmul.i32	q1, q8, q12
   4a4bc:	vmul.i32	q8, q0, d0[1]
   4a4c0:	vmul.i32	q9, q1, d2[1]
   4a4c4:	vmov.32	r1, d16[0]
   4a4c8:	vmov.32	r3, d18[0]
   4a4cc:	beq	4a4e8 <GetDataSlab+0x1e66c>
   4a4d0:	vmov.32	r6, d20[0]
   4a4d4:	mul	r3, r6, r3
   4a4d8:	ldr	r6, [r7, r5, lsl #2]
   4a4dc:	subs	r5, r5, #1
   4a4e0:	mul	r1, r1, r6
   4a4e4:	bne	4a4d4 <GetDataSlab+0x1e658>
   4a4e8:	sub	r6, fp, #96	; 0x60
   4a4ec:	sub	r5, fp, #176	; 0xb0
   4a4f0:	ldr	r0, [fp, #20]
   4a4f4:	add	r9, r9, #4
   4a4f8:	str	r1, [r6, r4, lsl #2]
   4a4fc:	ldr	r1, [fp, #12]
   4a500:	str	r3, [r5, r4, lsl #2]
   4a504:	ldr	r1, [r1, r4, lsl #2]
   4a508:	mla	r2, r1, r8, r2
   4a50c:	ldr	r1, [r0, r4, lsl #2]
   4a510:	ldr	r0, [sp, #60]	; 0x3c
   4a514:	add	r4, r4, #1
   4a518:	mov	r8, r3
   4a51c:	mov	r3, sl
   4a520:	mul	r0, r1, r0
   4a524:	ldr	r1, [fp, #24]
   4a528:	str	r0, [sp, #60]	; 0x3c
   4a52c:	cmp	r4, r1
   4a530:	bne	4a414 <GetDataSlab+0x1e598>
   4a534:	ldr	r0, [sp, #56]	; 0x38
   4a538:	ldr	r6, [sp, #36]	; 0x24
   4a53c:	add	r9, r0, r2, lsl #3
   4a540:	cmp	r6, #1
   4a544:	bne	4c50c <GetDataSlab+0x20690>
   4a548:	ldr	r0, [sp, #60]	; 0x3c
   4a54c:	ldr	r8, [sp, #68]	; 0x44
   4a550:	ldr	r1, [sp, #52]	; 0x34
   4a554:	cmp	r0, #1
   4a558:	blt	52340 <GetDataSlab+0x264c4>
   4a55c:	ldr	r0, [sp, #64]	; 0x40
   4a560:	mov	r6, #0
   4a564:	mov	r4, #0
   4a568:	ldr	r3, [r0], #4
   4a56c:	str	r0, [sp, #64]	; 0x40
   4a570:	add	r0, r1, r3
   4a574:	str	r3, [sp, #40]	; 0x28
   4a578:	str	r0, [sp, #36]	; 0x24
   4a57c:	ldr	r0, [fp, #20]
   4a580:	add	lr, r0, #4
   4a584:	sub	r0, fp, #136	; 0x88
   4a588:	orr	r7, r0, #4
   4a58c:	sub	r0, fp, #96	; 0x60
   4a590:	orr	r0, r0, #4
   4a594:	str	r0, [sp, #28]
   4a598:	bic	r0, r1, #1
   4a59c:	str	r0, [sp, #32]
   4a5a0:	lsl	r0, r1, #3
   4a5a4:	str	r0, [sp, #48]	; 0x30
   4a5a8:	mov	r0, #0
   4a5ac:	str	r0, [sp, #56]	; 0x38
   4a5b0:	cmp	r1, #1
   4a5b4:	blt	4a658 <GetDataSlab+0x1e7dc>
   4a5b8:	ldr	r0, [sp, #40]	; 0x28
   4a5bc:	mov	r1, #0
   4a5c0:	add	r5, r9, r0, lsl #3
   4a5c4:	beq	4a628 <GetDataSlab+0x1e7ac>
   4a5c8:	ldr	r0, [sp, #68]	; 0x44
   4a5cc:	ldr	r3, [sp, #48]	; 0x30
   4a5d0:	mla	r0, r3, r4, r0
   4a5d4:	ldr	r3, [sp, #36]	; 0x24
   4a5d8:	add	r3, r9, r3, lsl #3
   4a5dc:	cmp	r0, r3
   4a5e0:	bcs	4a5fc <GetDataSlab+0x1e780>
   4a5e4:	ldr	r0, [sp, #48]	; 0x30
   4a5e8:	ldr	r3, [sp, #68]	; 0x44
   4a5ec:	mla	r0, r0, r4, r0
   4a5f0:	add	r0, r3, r0
   4a5f4:	cmp	r0, r5
   4a5f8:	bhi	4a628 <GetDataSlab+0x1e7ac>
   4a5fc:	ldr	r1, [sp, #32]
   4a600:	mov	r3, r8
   4a604:	mov	r0, r5
   4a608:	vld1.64	{d16-d17}, [r0]!
   4a60c:	subs	r1, r1, #2
   4a610:	vst1.64	{d16-d17}, [r3]!
   4a614:	bne	4a608 <GetDataSlab+0x1e78c>
   4a618:	ldr	r0, [sp, #52]	; 0x34
   4a61c:	ldr	r1, [sp, #32]
   4a620:	cmp	r0, r1
   4a624:	beq	4a658 <GetDataSlab+0x1e7dc>
   4a628:	ldr	r0, [sp, #52]	; 0x34
   4a62c:	sub	r3, r0, r1
   4a630:	sub	r1, r6, r1, lsl #3
   4a634:	mov	r0, r5
   4a638:	mov	ip, r8
   4a63c:	subs	r3, r3, #1
   4a640:	ldr	sl, [r0, -r1]!
   4a644:	ldr	r0, [r0, #4]
   4a648:	str	sl, [ip, -r1]!
   4a64c:	sub	r1, r1, #8
   4a650:	str	r0, [ip, #4]
   4a654:	bne	4a634 <GetDataSlab+0x1e7b8>
   4a658:	ldr	r0, [sp, #44]	; 0x2c
   4a65c:	mov	ip, r4
   4a660:	add	r9, r9, r0, lsl #3
   4a664:	add	r2, r2, r0
   4a668:	ldr	r0, [fp, #24]
   4a66c:	cmp	r0, #2
   4a670:	blt	4a728 <GetDataSlab+0x1e8ac>
   4a674:	mov	r1, #0
   4a678:	mov	r4, #0
   4a67c:	mov	r0, r1
   4a680:	ldr	r1, [r7, r1, lsl #2]
   4a684:	add	r1, r1, #1
   4a688:	str	r1, [r7, r0, lsl #2]
   4a68c:	ldr	r3, [lr, r0, lsl #2]
   4a690:	sdiv	r5, r1, r3
   4a694:	mls	r1, r5, r3, r1
   4a698:	cmp	r1, #0
   4a69c:	bne	4a718 <GetDataSlab+0x1e89c>
   4a6a0:	sub	r6, fp, #176	; 0xb0
   4a6a4:	str	r4, [r7, r0, lsl #2]
   4a6a8:	add	r1, r6, r0, lsl #2
   4a6ac:	ldr	r1, [r1, #4]
   4a6b0:	sdiv	r3, r2, r1
   4a6b4:	mls	r3, r3, r1, r2
   4a6b8:	cmp	r3, #0
   4a6bc:	beq	4a6dc <GetDataSlab+0x1e860>
   4a6c0:	ldr	r5, [r6, r0, lsl #2]
   4a6c4:	ldr	r6, [sp, #64]	; 0x40
   4a6c8:	sub	r1, r1, r3
   4a6cc:	ldr	r6, [r6, r0, lsl #2]
   4a6d0:	mla	r1, r6, r5, r1
   4a6d4:	add	r2, r1, r2
   4a6d8:	b	4a6fc <GetDataSlab+0x1e880>
   4a6dc:	ldr	r1, [sp, #64]	; 0x40
   4a6e0:	ldr	r1, [r1, r0, lsl #2]
   4a6e4:	cmp	r1, #0
   4a6e8:	beq	4a700 <GetDataSlab+0x1e884>
   4a6ec:	sub	r3, fp, #176	; 0xb0
   4a6f0:	ldr	r3, [r3, r0, lsl #2]
   4a6f4:	mla	r2, r3, r1, r2
   4a6f8:	mul	r1, r3, r1
   4a6fc:	add	r9, r9, r1, lsl #3
   4a700:	ldr	r3, [fp, #24]
   4a704:	add	r1, r0, #1
   4a708:	add	r0, r0, #2
   4a70c:	cmp	r0, r3
   4a710:	blt	4a67c <GetDataSlab+0x1e800>
   4a714:	b	4a728 <GetDataSlab+0x1e8ac>
   4a718:	ldr	r1, [sp, #28]
   4a71c:	ldr	r0, [r1, r0, lsl #2]
   4a720:	add	r9, r9, r0, lsl #3
   4a724:	add	r2, r0, r2
   4a728:	ldr	r1, [sp, #52]	; 0x34
   4a72c:	ldr	r5, [sp, #56]	; 0x38
   4a730:	ldr	r0, [sp, #48]	; 0x30
   4a734:	ldr	r3, [sp, #60]	; 0x3c
   4a738:	mov	r4, ip
   4a73c:	mov	r6, #0
   4a740:	add	r4, ip, #1
   4a744:	add	r5, r5, r1
   4a748:	add	r8, r8, r0
   4a74c:	mov	r0, #0
   4a750:	cmp	r5, r3
   4a754:	str	r5, [sp, #56]	; 0x38
   4a758:	blt	4a5b0 <GetDataSlab+0x1e734>
   4a75c:	b	2e97c <GetDataSlab+0x2b00>
   4a760:	ldr	r0, [sp, #60]	; 0x3c
   4a764:	cmp	r0, #1
   4a768:	blt	52354 <GetDataSlab+0x264d8>
   4a76c:	ldr	r7, [sp, #44]	; 0x2c
   4a770:	ldr	r0, [sp, #36]	; 0x24
   4a774:	add	sl, r8, #4
   4a778:	sub	r1, fp, #136	; 0x88
   4a77c:	mov	r9, #0
   4a780:	mls	r0, r7, ip, r0
   4a784:	str	r0, [sp, #52]	; 0x34
   4a788:	mul	r0, r7, ip
   4a78c:	str	r0, [sp, #40]	; 0x28
   4a790:	ldr	r0, [fp, #20]
   4a794:	add	r8, r0, #4
   4a798:	mov	r0, r2
   4a79c:	orr	r2, r1, #4
   4a7a0:	orr	r0, r0, #4
   4a7a4:	str	r0, [sp, #36]	; 0x24
   4a7a8:	lsl	r0, r7, #3
   4a7ac:	str	r0, [sp, #48]	; 0x30
   4a7b0:	mov	r0, #0
   4a7b4:	str	r0, [sp, #56]	; 0x38
   4a7b8:	ldr	r0, [fp, #12]
   4a7bc:	cmp	r7, #1
   4a7c0:	ldr	r0, [r0]
   4a7c4:	blt	4a800 <GetDataSlab+0x1e984>
   4a7c8:	ldr	r1, [sp, #40]	; 0x28
   4a7cc:	ldr	lr, [sp, #68]	; 0x44
   4a7d0:	add	r5, r1, r3
   4a7d4:	add	r6, r4, r1
   4a7d8:	add	r4, r4, r0
   4a7dc:	mov	r3, r7
   4a7e0:	ldrb	r7, [r4], ip
   4a7e4:	subs	r3, r3, #1
   4a7e8:	stm	lr, {r7, r9}
   4a7ec:	add	lr, lr, #8
   4a7f0:	bne	4a7e0 <GetDataSlab+0x1e964>
   4a7f4:	add	r3, r5, r0
   4a7f8:	mov	r4, r6
   4a7fc:	b	4a804 <GetDataSlab+0x1e988>
   4a800:	add	r3, r0, r3
   4a804:	ldr	r1, [sp, #52]	; 0x34
   4a808:	sub	lr, fp, #176	; 0xb0
   4a80c:	sub	r0, r1, r0
   4a810:	add	r4, r4, r1
   4a814:	add	r3, r3, r0
   4a818:	ldr	r0, [fp, #24]
   4a81c:	cmp	r0, #2
   4a820:	blt	4a8c0 <GetDataSlab+0x1ea44>
   4a824:	mov	r5, #0
   4a828:	ldr	r7, [r2, r5, lsl #2]
   4a82c:	mov	r0, r5
   4a830:	add	r7, r7, #1
   4a834:	str	r7, [r2, r5, lsl #2]
   4a838:	ldr	r5, [r8, r5, lsl #2]
   4a83c:	sdiv	r6, r7, r5
   4a840:	mls	r7, r6, r5, r7
   4a844:	cmp	r7, #0
   4a848:	bne	4a8b0 <GetDataSlab+0x1ea34>
   4a84c:	add	r7, lr, r0, lsl #2
   4a850:	str	r9, [r2, r0, lsl #2]
   4a854:	ldr	r5, [r7, #4]
   4a858:	sdiv	r7, r3, r5
   4a85c:	mls	r7, r7, r5, r3
   4a860:	cmp	r7, #0
   4a864:	beq	4a884 <GetDataSlab+0x1ea08>
   4a868:	ldr	r6, [lr, r0, lsl #2]
   4a86c:	ldr	r1, [sl, r0, lsl #2]
   4a870:	sub	r7, r5, r7
   4a874:	mla	r1, r1, r6, r7
   4a878:	add	r3, r1, r3
   4a87c:	add	r4, r4, r1
   4a880:	b	4a898 <GetDataSlab+0x1ea1c>
   4a884:	ldr	r7, [sl, r0, lsl #2]
   4a888:	cmp	r7, #0
   4a88c:	ldrne	r1, [lr, r0, lsl #2]
   4a890:	mlane	r3, r1, r7, r3
   4a894:	mlane	r4, r1, r7, r4
   4a898:	ldr	r1, [fp, #24]
   4a89c:	add	r5, r0, #1
   4a8a0:	add	r0, r0, #2
   4a8a4:	cmp	r0, r1
   4a8a8:	blt	4a828 <GetDataSlab+0x1e9ac>
   4a8ac:	b	4a8c0 <GetDataSlab+0x1ea44>
   4a8b0:	ldr	r1, [sp, #36]	; 0x24
   4a8b4:	ldr	r0, [r1, r0, lsl #2]
   4a8b8:	add	r4, r4, r0
   4a8bc:	add	r3, r0, r3
   4a8c0:	ldr	r0, [sp, #68]	; 0x44
   4a8c4:	ldr	r1, [sp, #48]	; 0x30
   4a8c8:	ldr	r7, [sp, #44]	; 0x2c
   4a8cc:	ldr	r6, [sp, #56]	; 0x38
   4a8d0:	add	r0, r0, r1
   4a8d4:	ldr	r1, [sp, #60]	; 0x3c
   4a8d8:	add	r6, r6, r7
   4a8dc:	str	r0, [sp, #68]	; 0x44
   4a8e0:	mov	r0, #0
   4a8e4:	str	r6, [sp, #56]	; 0x38
   4a8e8:	cmp	r6, r1
   4a8ec:	blt	4a7b8 <GetDataSlab+0x1e93c>
   4a8f0:	b	2e97c <GetDataSlab+0x2b00>
   4a8f4:	ldr	r0, [sp, #60]	; 0x3c
   4a8f8:	ldr	r4, [sp, #44]	; 0x2c
   4a8fc:	cmp	r0, #1
   4a900:	blt	52368 <GetDataSlab+0x264ec>
   4a904:	ldr	r9, [fp, #12]
   4a908:	ldr	r0, [sp, #40]	; 0x28
   4a90c:	add	r5, sl, #4
   4a910:	mov	sl, #0
   4a914:	ldr	r2, [r9], #4
   4a918:	mls	r0, r4, r1, r0
   4a91c:	sub	r0, r0, r2
   4a920:	str	r2, [sp, #64]	; 0x40
   4a924:	str	r0, [sp, #56]	; 0x38
   4a928:	sub	r0, fp, #136	; 0x88
   4a92c:	orr	r7, r0, #4
   4a930:	orr	r0, r8, #4
   4a934:	mov	r8, #0
   4a938:	str	r0, [sp, #40]	; 0x28
   4a93c:	mla	r0, r4, r1, r2
   4a940:	lsl	r1, r1, #1
   4a944:	str	r0, [sp, #48]	; 0x30
   4a948:	lsl	r0, r4, #3
   4a94c:	str	r0, [sp, #52]	; 0x34
   4a950:	ldr	r0, [sp, #64]	; 0x40
   4a954:	cmp	r4, #1
   4a958:	blt	4a984 <GetDataSlab+0x1eb08>
   4a95c:	ldr	r0, [sp, #64]	; 0x40
   4a960:	ldr	r6, [sp, #68]	; 0x44
   4a964:	add	r0, lr, r0, lsl #1
   4a968:	ldrsh	r2, [r0], r1
   4a96c:	subs	r4, r4, #1
   4a970:	asr	r3, r2, #31
   4a974:	strd	r2, [r6]
   4a978:	add	r6, r6, #8
   4a97c:	bne	4a968 <GetDataSlab+0x1eaec>
   4a980:	ldr	r0, [sp, #48]	; 0x30
   4a984:	ldr	r3, [sp, #56]	; 0x38
   4a988:	add	r2, lr, r3, lsl #1
   4a98c:	add	lr, r2, r0, lsl #1
   4a990:	add	r0, r0, ip
   4a994:	add	ip, r0, r3
   4a998:	ldr	r0, [fp, #24]
   4a99c:	cmp	r0, #2
   4a9a0:	blt	4aa4c <GetDataSlab+0x1ebd0>
   4a9a4:	mov	r3, #0
   4a9a8:	ldr	r2, [r7, r3, lsl #2]
   4a9ac:	mov	r0, r3
   4a9b0:	add	r2, r2, #1
   4a9b4:	str	r2, [r7, r3, lsl #2]
   4a9b8:	ldr	r3, [r5, r3, lsl #2]
   4a9bc:	sdiv	r4, r2, r3
   4a9c0:	mls	r2, r4, r3, r2
   4a9c4:	cmp	r2, #0
   4a9c8:	bne	4aa3c <GetDataSlab+0x1ebc0>
   4a9cc:	sub	r4, fp, #176	; 0xb0
   4a9d0:	str	r8, [r7, r0, lsl #2]
   4a9d4:	add	r2, r4, r0, lsl #2
   4a9d8:	ldr	r3, [r2, #4]
   4a9dc:	sdiv	r2, ip, r3
   4a9e0:	mls	r6, r2, r3, ip
   4a9e4:	cmp	r6, #0
   4a9e8:	beq	4aa04 <GetDataSlab+0x1eb88>
   4a9ec:	ldr	r2, [r4, r0, lsl #2]
   4a9f0:	ldr	r4, [r9, r0, lsl #2]
   4a9f4:	sub	r3, r3, r6
   4a9f8:	mla	r2, r4, r2, r3
   4a9fc:	add	ip, r2, ip
   4aa00:	b	4aa20 <GetDataSlab+0x1eba4>
   4aa04:	ldr	r3, [r9, r0, lsl #2]
   4aa08:	cmp	r3, #0
   4aa0c:	beq	4aa24 <GetDataSlab+0x1eba8>
   4aa10:	sub	r2, fp, #176	; 0xb0
   4aa14:	ldr	r2, [r2, r0, lsl #2]
   4aa18:	mla	ip, r2, r3, ip
   4aa1c:	mul	r2, r2, r3
   4aa20:	add	lr, lr, r2, lsl #1
   4aa24:	ldr	r2, [fp, #24]
   4aa28:	add	r3, r0, #1
   4aa2c:	add	r0, r0, #2
   4aa30:	cmp	r0, r2
   4aa34:	blt	4a9a8 <GetDataSlab+0x1eb2c>
   4aa38:	b	4aa4c <GetDataSlab+0x1ebd0>
   4aa3c:	ldr	r2, [sp, #40]	; 0x28
   4aa40:	ldr	r0, [r2, r0, lsl #2]
   4aa44:	add	lr, lr, r0, lsl #1
   4aa48:	add	ip, r0, ip
   4aa4c:	ldr	r0, [sp, #68]	; 0x44
   4aa50:	ldr	r2, [sp, #52]	; 0x34
   4aa54:	ldr	r4, [sp, #44]	; 0x2c
   4aa58:	add	r0, r0, r2
   4aa5c:	ldr	r2, [sp, #60]	; 0x3c
   4aa60:	add	sl, sl, r4
   4aa64:	str	r0, [sp, #68]	; 0x44
   4aa68:	mov	r0, #0
   4aa6c:	cmp	sl, r2
   4aa70:	blt	4a950 <GetDataSlab+0x1ead4>
   4aa74:	b	2e97c <GetDataSlab+0x2b00>
   4aa78:	ldr	r0, [sp, #60]	; 0x3c
   4aa7c:	ldr	r1, [fp, #20]
   4aa80:	sub	r2, fp, #96	; 0x60
   4aa84:	cmp	r0, #1
   4aa88:	blt	5237c <GetDataSlab+0x26500>
   4aa8c:	ldr	r8, [fp, #12]
   4aa90:	ldr	r3, [sp, #52]	; 0x34
   4aa94:	ldr	r0, [sp, #48]	; 0x30
   4aa98:	add	sl, r1, #4
   4aa9c:	lsl	r5, r7, #1
   4aaa0:	mov	ip, #0
   4aaa4:	ldr	r6, [r8], #4
   4aaa8:	mls	r0, r3, r7, r0
   4aaac:	sub	r0, r0, r6
   4aab0:	str	r6, [sp, #56]	; 0x38
   4aab4:	str	r0, [sp, #48]	; 0x30
   4aab8:	sub	r0, fp, #136	; 0x88
   4aabc:	orr	r1, r0, #4
   4aac0:	orr	r0, r2, #4
   4aac4:	mov	r2, r3
   4aac8:	str	r0, [sp, #36]	; 0x24
   4aacc:	mla	r0, r3, r7, r6
   4aad0:	str	r0, [sp, #40]	; 0x28
   4aad4:	lsl	r0, r3, #3
   4aad8:	str	r0, [sp, #44]	; 0x2c
   4aadc:	mov	r0, #0
   4aae0:	str	r0, [sp, #64]	; 0x40
   4aae4:	ldr	r0, [sp, #56]	; 0x38
   4aae8:	cmp	r2, #1
   4aaec:	blt	4ab18 <GetDataSlab+0x1ec9c>
   4aaf0:	ldr	r0, [sp, #56]	; 0x38
   4aaf4:	ldr	r7, [sp, #52]	; 0x34
   4aaf8:	ldr	r6, [sp, #68]	; 0x44
   4aafc:	add	r0, r4, r0, lsl #1
   4ab00:	ldrh	r2, [r0], r5
   4ab04:	subs	r7, r7, #1
   4ab08:	stm	r6, {r2, ip}
   4ab0c:	add	r6, r6, #8
   4ab10:	bne	4ab00 <GetDataSlab+0x1ec84>
   4ab14:	ldr	r0, [sp, #40]	; 0x28
   4ab18:	ldr	r3, [sp, #48]	; 0x30
   4ab1c:	add	r2, r4, r3, lsl #1
   4ab20:	add	r4, r2, r0, lsl #1
   4ab24:	add	r0, r0, r9
   4ab28:	add	r9, r0, r3
   4ab2c:	ldr	r0, [fp, #24]
   4ab30:	sub	r3, fp, #176	; 0xb0
   4ab34:	cmp	r0, #2
   4ab38:	blt	4abe0 <GetDataSlab+0x1ed64>
   4ab3c:	mov	r7, #0
   4ab40:	ldr	r2, [r1, r7, lsl #2]
   4ab44:	mov	r0, r7
   4ab48:	add	r2, r2, #1
   4ab4c:	str	r2, [r1, r7, lsl #2]
   4ab50:	ldr	r6, [sl, r7, lsl #2]
   4ab54:	sdiv	r7, r2, r6
   4ab58:	mls	r2, r7, r6, r2
   4ab5c:	cmp	r2, #0
   4ab60:	bne	4abd0 <GetDataSlab+0x1ed54>
   4ab64:	add	r2, r3, r0, lsl #2
   4ab68:	str	ip, [r1, r0, lsl #2]
   4ab6c:	ldr	r6, [r2, #4]
   4ab70:	sdiv	r2, r9, r6
   4ab74:	mls	r7, r2, r6, r9
   4ab78:	cmp	r7, #0
   4ab7c:	beq	4ab9c <GetDataSlab+0x1ed20>
   4ab80:	ldr	r2, [r3, r0, lsl #2]
   4ab84:	ldr	lr, [r8, r0, lsl #2]
   4ab88:	sub	r6, r6, r7
   4ab8c:	sub	r3, fp, #176	; 0xb0
   4ab90:	mla	r2, lr, r2, r6
   4ab94:	add	r9, r2, r9
   4ab98:	b	4abb4 <GetDataSlab+0x1ed38>
   4ab9c:	ldr	r6, [r8, r0, lsl #2]
   4aba0:	cmp	r6, #0
   4aba4:	beq	4abb8 <GetDataSlab+0x1ed3c>
   4aba8:	ldr	r2, [r3, r0, lsl #2]
   4abac:	mla	r9, r2, r6, r9
   4abb0:	mul	r2, r2, r6
   4abb4:	add	r4, r4, r2, lsl #1
   4abb8:	ldr	r2, [fp, #24]
   4abbc:	add	r7, r0, #1
   4abc0:	add	r0, r0, #2
   4abc4:	cmp	r0, r2
   4abc8:	blt	4ab40 <GetDataSlab+0x1ecc4>
   4abcc:	b	4abe0 <GetDataSlab+0x1ed64>
   4abd0:	ldr	r2, [sp, #36]	; 0x24
   4abd4:	ldr	r0, [r2, r0, lsl #2]
   4abd8:	add	r4, r4, r0, lsl #1
   4abdc:	add	r9, r0, r9
   4abe0:	ldr	r0, [sp, #68]	; 0x44
   4abe4:	ldr	r2, [sp, #44]	; 0x2c
   4abe8:	ldr	r7, [sp, #64]	; 0x40
   4abec:	ldr	r3, [sp, #60]	; 0x3c
   4abf0:	add	r0, r0, r2
   4abf4:	ldr	r2, [sp, #52]	; 0x34
   4abf8:	str	r0, [sp, #68]	; 0x44
   4abfc:	mov	r0, #0
   4ac00:	add	r7, r7, r2
   4ac04:	cmp	r7, r3
   4ac08:	str	r7, [sp, #64]	; 0x40
   4ac0c:	blt	4aae4 <GetDataSlab+0x1ec68>
   4ac10:	b	2e97c <GetDataSlab+0x2b00>
   4ac14:	ldr	r0, [sp, #60]	; 0x3c
   4ac18:	sub	r1, fp, #96	; 0x60
   4ac1c:	cmp	r0, #1
   4ac20:	ldr	r0, [fp, #12]
   4ac24:	blt	52390 <GetDataSlab+0x26514>
   4ac28:	add	r9, r0, #4
   4ac2c:	ldr	r0, [fp, #20]
   4ac30:	ldr	r2, [sp, #48]	; 0x30
   4ac34:	ldr	r7, [sp, #44]	; 0x2c
   4ac38:	lsl	r8, r6, #2
   4ac3c:	mov	lr, #0
   4ac40:	add	ip, r0, #4
   4ac44:	sub	r0, fp, #136	; 0x88
   4ac48:	mls	r7, r2, r6, r7
   4ac4c:	orr	r5, r0, #4
   4ac50:	orr	r0, r1, #4
   4ac54:	str	r7, [sp, #52]	; 0x34
   4ac58:	str	r0, [sp, #36]	; 0x24
   4ac5c:	mul	r0, r2, r6
   4ac60:	str	r0, [sp, #40]	; 0x28
   4ac64:	lsl	r0, r2, #3
   4ac68:	str	r0, [sp, #44]	; 0x2c
   4ac6c:	mov	r0, #0
   4ac70:	str	r0, [sp, #56]	; 0x38
   4ac74:	ldr	r0, [fp, #12]
   4ac78:	cmp	r2, #1
   4ac7c:	ldr	r0, [r0]
   4ac80:	blt	4acc4 <GetDataSlab+0x1ee48>
   4ac84:	ldr	r1, [sp, #40]	; 0x28
   4ac88:	ldr	lr, [sp, #68]	; 0x44
   4ac8c:	add	r4, sl, r0, lsl #2
   4ac90:	add	r3, r1, r3
   4ac94:	add	r1, sl, r1, lsl #2
   4ac98:	ldr	r6, [r4], r8
   4ac9c:	subs	r2, r2, #1
   4aca0:	asr	r7, r6, #31
   4aca4:	strd	r6, [lr]
   4aca8:	add	lr, lr, #8
   4acac:	bne	4ac98 <GetDataSlab+0x1ee1c>
   4acb0:	mov	sl, r1
   4acb4:	add	r2, r3, r0
   4acb8:	sub	r1, fp, #176	; 0xb0
   4acbc:	mov	lr, #0
   4acc0:	b	4accc <GetDataSlab+0x1ee50>
   4acc4:	add	r2, r0, r3
   4acc8:	sub	r1, fp, #176	; 0xb0
   4accc:	ldr	r3, [sp, #52]	; 0x34
   4acd0:	sub	r0, r3, r0
   4acd4:	add	sl, sl, r3, lsl #2
   4acd8:	add	r3, r2, r0
   4acdc:	ldr	r0, [fp, #24]
   4ace0:	cmp	r0, #2
   4ace4:	blt	4ad88 <GetDataSlab+0x1ef0c>
   4ace8:	mov	r2, #0
   4acec:	mov	r0, r2
   4acf0:	ldr	r2, [r5, r2, lsl #2]
   4acf4:	add	r2, r2, #1
   4acf8:	str	r2, [r5, r0, lsl #2]
   4acfc:	ldr	r7, [ip, r0, lsl #2]
   4ad00:	sdiv	r6, r2, r7
   4ad04:	mls	r2, r6, r7, r2
   4ad08:	cmp	r2, #0
   4ad0c:	bne	4ad78 <GetDataSlab+0x1eefc>
   4ad10:	add	r2, r1, r0, lsl #2
   4ad14:	str	lr, [r5, r0, lsl #2]
   4ad18:	ldr	r2, [r2, #4]
   4ad1c:	sdiv	r7, r3, r2
   4ad20:	mls	r7, r7, r2, r3
   4ad24:	cmp	r7, #0
   4ad28:	beq	4ad44 <GetDataSlab+0x1eec8>
   4ad2c:	ldr	r6, [r1, r0, lsl #2]
   4ad30:	ldr	r4, [r9, r0, lsl #2]
   4ad34:	sub	r2, r2, r7
   4ad38:	mla	r2, r4, r6, r2
   4ad3c:	add	r3, r2, r3
   4ad40:	b	4ad5c <GetDataSlab+0x1eee0>
   4ad44:	ldr	r2, [r9, r0, lsl #2]
   4ad48:	cmp	r2, #0
   4ad4c:	beq	4ad60 <GetDataSlab+0x1eee4>
   4ad50:	ldr	r7, [r1, r0, lsl #2]
   4ad54:	mla	r3, r7, r2, r3
   4ad58:	mul	r2, r7, r2
   4ad5c:	add	sl, sl, r2, lsl #2
   4ad60:	ldr	r7, [fp, #24]
   4ad64:	add	r2, r0, #1
   4ad68:	add	r0, r0, #2
   4ad6c:	cmp	r0, r7
   4ad70:	blt	4acec <GetDataSlab+0x1ee70>
   4ad74:	b	4ad88 <GetDataSlab+0x1ef0c>
   4ad78:	ldr	r1, [sp, #36]	; 0x24
   4ad7c:	ldr	r0, [r1, r0, lsl #2]
   4ad80:	add	sl, sl, r0, lsl #2
   4ad84:	add	r3, r0, r3
   4ad88:	ldr	r0, [sp, #68]	; 0x44
   4ad8c:	ldr	r1, [sp, #44]	; 0x2c
   4ad90:	ldr	r2, [sp, #48]	; 0x30
   4ad94:	ldr	r4, [sp, #56]	; 0x38
   4ad98:	add	r0, r0, r1
   4ad9c:	ldr	r1, [sp, #60]	; 0x3c
   4ada0:	add	r4, r4, r2
   4ada4:	str	r0, [sp, #68]	; 0x44
   4ada8:	mov	r0, #0
   4adac:	str	r4, [sp, #56]	; 0x38
   4adb0:	cmp	r4, r1
   4adb4:	blt	4ac74 <GetDataSlab+0x1edf8>
   4adb8:	b	2e97c <GetDataSlab+0x2b00>
   4adbc:	ldr	r0, [sp, #60]	; 0x3c
   4adc0:	sub	r1, fp, #96	; 0x60
   4adc4:	cmp	r0, #1
   4adc8:	ldr	r0, [fp, #12]
   4adcc:	blt	523a4 <GetDataSlab+0x26528>
   4add0:	add	ip, r0, #4
   4add4:	ldr	r0, [fp, #20]
   4add8:	ldr	r2, [sp, #48]	; 0x30
   4addc:	ldr	r7, [sp, #44]	; 0x2c
   4ade0:	mov	r9, #0
   4ade4:	mov	r8, #0
   4ade8:	add	sl, r0, #4
   4adec:	sub	r0, fp, #136	; 0x88
   4adf0:	mls	r7, r2, r4, r7
   4adf4:	orr	r5, r0, #4
   4adf8:	orr	r0, r1, #4
   4adfc:	lsl	r1, r4, #2
   4ae00:	str	r7, [sp, #56]	; 0x38
   4ae04:	str	r0, [sp, #40]	; 0x28
   4ae08:	mul	r0, r2, r4
   4ae0c:	str	r0, [sp, #44]	; 0x2c
   4ae10:	lsl	r0, r2, #3
   4ae14:	str	r0, [sp, #52]	; 0x34
   4ae18:	ldr	r0, [fp, #12]
   4ae1c:	cmp	r2, #1
   4ae20:	ldr	r0, [r0]
   4ae24:	blt	4ae5c <GetDataSlab+0x1efe0>
   4ae28:	ldr	r4, [sp, #44]	; 0x2c
   4ae2c:	add	r3, r4, r3
   4ae30:	add	r7, lr, r4, lsl #2
   4ae34:	add	r4, lr, r0, lsl #2
   4ae38:	ldr	lr, [sp, #68]	; 0x44
   4ae3c:	ldr	r6, [r4], r1
   4ae40:	subs	r2, r2, #1
   4ae44:	stm	lr, {r6, r9}
   4ae48:	add	lr, lr, #8
   4ae4c:	bne	4ae3c <GetDataSlab+0x1efc0>
   4ae50:	add	r2, r3, r0
   4ae54:	mov	lr, r7
   4ae58:	b	4ae60 <GetDataSlab+0x1efe4>
   4ae5c:	add	r2, r0, r3
   4ae60:	ldr	r3, [sp, #56]	; 0x38
   4ae64:	sub	r0, r3, r0
   4ae68:	add	lr, lr, r3, lsl #2
   4ae6c:	add	r3, r2, r0
   4ae70:	ldr	r0, [fp, #24]
   4ae74:	cmp	r0, #2
   4ae78:	blt	4af24 <GetDataSlab+0x1f0a8>
   4ae7c:	mov	r2, #0
   4ae80:	mov	r0, r2
   4ae84:	ldr	r2, [r5, r2, lsl #2]
   4ae88:	add	r2, r2, #1
   4ae8c:	str	r2, [r5, r0, lsl #2]
   4ae90:	ldr	r6, [sl, r0, lsl #2]
   4ae94:	sdiv	r7, r2, r6
   4ae98:	mls	r2, r7, r6, r2
   4ae9c:	cmp	r2, #0
   4aea0:	bne	4af14 <GetDataSlab+0x1f098>
   4aea4:	sub	r4, fp, #176	; 0xb0
   4aea8:	str	r9, [r5, r0, lsl #2]
   4aeac:	add	r2, r4, r0, lsl #2
   4aeb0:	ldr	r2, [r2, #4]
   4aeb4:	sdiv	r7, r3, r2
   4aeb8:	mls	r6, r7, r2, r3
   4aebc:	cmp	r6, #0
   4aec0:	beq	4aedc <GetDataSlab+0x1f060>
   4aec4:	ldr	r7, [r4, r0, lsl #2]
   4aec8:	ldr	r4, [ip, r0, lsl #2]
   4aecc:	sub	r2, r2, r6
   4aed0:	mla	r2, r4, r7, r2
   4aed4:	add	r3, r2, r3
   4aed8:	b	4aef8 <GetDataSlab+0x1f07c>
   4aedc:	ldr	r2, [ip, r0, lsl #2]
   4aee0:	cmp	r2, #0
   4aee4:	beq	4aefc <GetDataSlab+0x1f080>
   4aee8:	sub	r4, fp, #176	; 0xb0
   4aeec:	ldr	r4, [r4, r0, lsl #2]
   4aef0:	mla	r3, r4, r2, r3
   4aef4:	mul	r2, r4, r2
   4aef8:	add	lr, lr, r2, lsl #2
   4aefc:	ldr	r4, [fp, #24]
   4af00:	add	r2, r0, #1
   4af04:	add	r0, r0, #2
   4af08:	cmp	r0, r4
   4af0c:	blt	4ae80 <GetDataSlab+0x1f004>
   4af10:	b	4af24 <GetDataSlab+0x1f0a8>
   4af14:	ldr	r2, [sp, #40]	; 0x28
   4af18:	ldr	r0, [r2, r0, lsl #2]
   4af1c:	add	lr, lr, r0, lsl #2
   4af20:	add	r3, r0, r3
   4af24:	ldr	r0, [sp, #68]	; 0x44
   4af28:	ldr	r2, [sp, #52]	; 0x34
   4af2c:	ldr	r4, [sp, #60]	; 0x3c
   4af30:	add	r0, r0, r2
   4af34:	ldr	r2, [sp, #48]	; 0x30
   4af38:	str	r0, [sp, #68]	; 0x44
   4af3c:	mov	r0, #0
   4af40:	add	r8, r8, r2
   4af44:	cmp	r8, r4
   4af48:	blt	4ae18 <GetDataSlab+0x1ef9c>
   4af4c:	b	2e97c <GetDataSlab+0x2b00>
   4af50:	ldr	r0, [sp, #52]	; 0x34
   4af54:	ldr	r1, [fp, #12]
   4af58:	ldr	r2, [fp, #20]
   4af5c:	ldr	r9, [sp, #44]	; 0x2c
   4af60:	cmp	r0, #1
   4af64:	blt	523b8 <GetDataSlab+0x2653c>
   4af68:	ldr	r0, [sp, #40]	; 0x28
   4af6c:	ldr	lr, [r1], #4
   4af70:	lsl	sl, r3, #2
   4af74:	mls	r0, r9, r3, r0
   4af78:	str	r1, [sp, #64]	; 0x40
   4af7c:	str	lr, [sp, #36]	; 0x24
   4af80:	sub	r0, r0, lr
   4af84:	str	r0, [sp, #48]	; 0x30
   4af88:	add	r0, r2, #4
   4af8c:	str	r0, [sp, #60]	; 0x3c
   4af90:	sub	r0, fp, #136	; 0x88
   4af94:	orr	r8, r0, #4
   4af98:	sub	r0, fp, #96	; 0x60
   4af9c:	orr	r0, r0, #4
   4afa0:	str	r0, [sp, #28]
   4afa4:	mla	r0, r9, r3, lr
   4afa8:	str	r0, [sp, #32]
   4afac:	lsl	r0, r9, #3
   4afb0:	str	r0, [sp, #40]	; 0x28
   4afb4:	mov	r0, #0
   4afb8:	str	r0, [sp, #56]	; 0x38
   4afbc:	cmp	r9, #1
   4afc0:	mov	r0, lr
   4afc4:	blt	4aff4 <GetDataSlab+0x1f178>
   4afc8:	ldr	r6, [sp, #68]	; 0x44
   4afcc:	add	r7, r4, lr, lsl #2
   4afd0:	ldr	r0, [r7], sl
   4afd4:	bl	5f3a0 <__aeabi_f2ulz>
   4afd8:	strd	r0, [r6]
   4afdc:	subs	r9, r9, #1
   4afe0:	add	r6, r6, #8
   4afe4:	bne	4afd0 <GetDataSlab+0x1f154>
   4afe8:	ldr	r0, [sp, #32]
   4afec:	ldr	r9, [sp, #44]	; 0x2c
   4aff0:	ldr	lr, [sp, #36]	; 0x24
   4aff4:	ldr	r2, [sp, #48]	; 0x30
   4aff8:	ldr	r6, [sp, #68]	; 0x44
   4affc:	add	r1, r4, r2, lsl #2
   4b000:	mov	ip, r6
   4b004:	sub	r6, fp, #176	; 0xb0
   4b008:	add	r4, r1, r0, lsl #2
   4b00c:	add	r0, r0, r5
   4b010:	add	r5, r0, r2
   4b014:	ldr	r0, [fp, #24]
   4b018:	cmp	r0, #2
   4b01c:	blt	4b0d0 <GetDataSlab+0x1f254>
   4b020:	mov	r1, #0
   4b024:	mov	r0, r1
   4b028:	ldr	r1, [r8, r1, lsl #2]
   4b02c:	ldr	r2, [sp, #60]	; 0x3c
   4b030:	add	r1, r1, #1
   4b034:	str	r1, [r8, r0, lsl #2]
   4b038:	ldr	r2, [r2, r0, lsl #2]
   4b03c:	sdiv	r3, r1, r2
   4b040:	mls	r1, r3, r2, r1
   4b044:	cmp	r1, #0
   4b048:	bne	4b0c0 <GetDataSlab+0x1f244>
   4b04c:	mov	r1, #0
   4b050:	str	r1, [r8, r0, lsl #2]
   4b054:	add	r1, r6, r0, lsl #2
   4b058:	ldr	r1, [r1, #4]
   4b05c:	sdiv	r2, r5, r1
   4b060:	mls	r2, r2, r1, r5
   4b064:	cmp	r2, #0
   4b068:	beq	4b088 <GetDataSlab+0x1f20c>
   4b06c:	ldr	r7, [sp, #64]	; 0x40
   4b070:	ldr	r3, [r6, r0, lsl #2]
   4b074:	sub	r1, r1, r2
   4b078:	ldr	r7, [r7, r0, lsl #2]
   4b07c:	mla	r1, r7, r3, r1
   4b080:	add	r5, r1, r5
   4b084:	b	4b0a4 <GetDataSlab+0x1f228>
   4b088:	ldr	r1, [sp, #64]	; 0x40
   4b08c:	ldr	r1, [r1, r0, lsl #2]
   4b090:	cmp	r1, #0
   4b094:	beq	4b0a8 <GetDataSlab+0x1f22c>
   4b098:	ldr	r2, [r6, r0, lsl #2]
   4b09c:	mla	r5, r2, r1, r5
   4b0a0:	mul	r1, r2, r1
   4b0a4:	add	r4, r4, r1, lsl #2
   4b0a8:	ldr	r2, [fp, #24]
   4b0ac:	add	r1, r0, #1
   4b0b0:	add	r0, r0, #2
   4b0b4:	cmp	r0, r2
   4b0b8:	blt	4b024 <GetDataSlab+0x1f1a8>
   4b0bc:	b	4b0d0 <GetDataSlab+0x1f254>
   4b0c0:	ldr	r1, [sp, #28]
   4b0c4:	ldr	r0, [r1, r0, lsl #2]
   4b0c8:	add	r4, r4, r0, lsl #2
   4b0cc:	add	r5, r0, r5
   4b0d0:	ldr	r2, [sp, #56]	; 0x38
   4b0d4:	ldr	r0, [sp, #40]	; 0x28
   4b0d8:	ldr	r1, [sp, #52]	; 0x34
   4b0dc:	add	r2, r2, r9
   4b0e0:	add	ip, ip, r0
   4b0e4:	mov	r0, #0
   4b0e8:	cmp	r2, r1
   4b0ec:	str	ip, [sp, #68]	; 0x44
   4b0f0:	str	r2, [sp, #56]	; 0x38
   4b0f4:	blt	4afbc <GetDataSlab+0x1f140>
   4b0f8:	b	2e97c <GetDataSlab+0x2b00>
   4b0fc:	ldr	r0, [sp, #52]	; 0x34
   4b100:	ldr	r1, [fp, #12]
   4b104:	ldr	r2, [fp, #20]
   4b108:	ldr	r9, [sp, #44]	; 0x2c
   4b10c:	cmp	r0, #1
   4b110:	blt	523cc <GetDataSlab+0x26550>
   4b114:	ldr	r0, [sp, #40]	; 0x28
   4b118:	ldr	lr, [r1], #4
   4b11c:	lsl	sl, r3, #3
   4b120:	mls	r0, r9, r3, r0
   4b124:	str	r1, [sp, #64]	; 0x40
   4b128:	str	lr, [sp, #36]	; 0x24
   4b12c:	sub	r0, r0, lr
   4b130:	str	r0, [sp, #48]	; 0x30
   4b134:	add	r0, r2, #4
   4b138:	str	r0, [sp, #60]	; 0x3c
   4b13c:	sub	r0, fp, #136	; 0x88
   4b140:	orr	r8, r0, #4
   4b144:	sub	r0, fp, #96	; 0x60
   4b148:	orr	r0, r0, #4
   4b14c:	str	r0, [sp, #28]
   4b150:	mla	r0, r9, r3, lr
   4b154:	str	r0, [sp, #32]
   4b158:	lsl	r0, r9, #3
   4b15c:	str	r0, [sp, #40]	; 0x28
   4b160:	mov	r0, #0
   4b164:	str	r0, [sp, #56]	; 0x38
   4b168:	cmp	r9, #1
   4b16c:	mov	r0, lr
   4b170:	blt	4b1a8 <GetDataSlab+0x1f32c>
   4b174:	ldr	r6, [sp, #68]	; 0x44
   4b178:	add	r7, r4, lr, lsl #3
   4b17c:	vldr	d16, [r7]
   4b180:	vmov	r0, r1, d16
   4b184:	bl	5f3e0 <__aeabi_d2ulz>
   4b188:	strd	r0, [r6]
   4b18c:	add	r7, r7, sl
   4b190:	subs	r9, r9, #1
   4b194:	add	r6, r6, #8
   4b198:	bne	4b17c <GetDataSlab+0x1f300>
   4b19c:	ldr	r0, [sp, #32]
   4b1a0:	ldr	r9, [sp, #44]	; 0x2c
   4b1a4:	ldr	lr, [sp, #36]	; 0x24
   4b1a8:	ldr	r2, [sp, #48]	; 0x30
   4b1ac:	ldr	r6, [sp, #68]	; 0x44
   4b1b0:	add	r1, r4, r2, lsl #3
   4b1b4:	mov	ip, r6
   4b1b8:	sub	r6, fp, #176	; 0xb0
   4b1bc:	add	r4, r1, r0, lsl #3
   4b1c0:	add	r0, r0, r5
   4b1c4:	add	r5, r0, r2
   4b1c8:	ldr	r0, [fp, #24]
   4b1cc:	cmp	r0, #2
   4b1d0:	blt	4b284 <GetDataSlab+0x1f408>
   4b1d4:	mov	r1, #0
   4b1d8:	mov	r0, r1
   4b1dc:	ldr	r1, [r8, r1, lsl #2]
   4b1e0:	ldr	r2, [sp, #60]	; 0x3c
   4b1e4:	add	r1, r1, #1
   4b1e8:	str	r1, [r8, r0, lsl #2]
   4b1ec:	ldr	r2, [r2, r0, lsl #2]
   4b1f0:	sdiv	r3, r1, r2
   4b1f4:	mls	r1, r3, r2, r1
   4b1f8:	cmp	r1, #0
   4b1fc:	bne	4b274 <GetDataSlab+0x1f3f8>
   4b200:	mov	r1, #0
   4b204:	str	r1, [r8, r0, lsl #2]
   4b208:	add	r1, r6, r0, lsl #2
   4b20c:	ldr	r1, [r1, #4]
   4b210:	sdiv	r2, r5, r1
   4b214:	mls	r2, r2, r1, r5
   4b218:	cmp	r2, #0
   4b21c:	beq	4b23c <GetDataSlab+0x1f3c0>
   4b220:	ldr	r7, [sp, #64]	; 0x40
   4b224:	ldr	r3, [r6, r0, lsl #2]
   4b228:	sub	r1, r1, r2
   4b22c:	ldr	r7, [r7, r0, lsl #2]
   4b230:	mla	r1, r7, r3, r1
   4b234:	add	r5, r1, r5
   4b238:	b	4b258 <GetDataSlab+0x1f3dc>
   4b23c:	ldr	r1, [sp, #64]	; 0x40
   4b240:	ldr	r1, [r1, r0, lsl #2]
   4b244:	cmp	r1, #0
   4b248:	beq	4b25c <GetDataSlab+0x1f3e0>
   4b24c:	ldr	r2, [r6, r0, lsl #2]
   4b250:	mla	r5, r2, r1, r5
   4b254:	mul	r1, r2, r1
   4b258:	add	r4, r4, r1, lsl #3
   4b25c:	ldr	r2, [fp, #24]
   4b260:	add	r1, r0, #1
   4b264:	add	r0, r0, #2
   4b268:	cmp	r0, r2
   4b26c:	blt	4b1d8 <GetDataSlab+0x1f35c>
   4b270:	b	4b284 <GetDataSlab+0x1f408>
   4b274:	ldr	r1, [sp, #28]
   4b278:	ldr	r0, [r1, r0, lsl #2]
   4b27c:	add	r4, r4, r0, lsl #3
   4b280:	add	r5, r0, r5
   4b284:	ldr	r2, [sp, #56]	; 0x38
   4b288:	ldr	r0, [sp, #40]	; 0x28
   4b28c:	ldr	r1, [sp, #52]	; 0x34
   4b290:	add	r2, r2, r9
   4b294:	add	ip, ip, r0
   4b298:	mov	r0, #0
   4b29c:	cmp	r2, r1
   4b2a0:	str	ip, [sp, #68]	; 0x44
   4b2a4:	str	r2, [sp, #56]	; 0x38
   4b2a8:	blt	4b168 <GetDataSlab+0x1f2ec>
   4b2ac:	b	2e97c <GetDataSlab+0x2b00>
   4b2b0:	ldr	r0, [sp, #60]	; 0x3c
   4b2b4:	ldr	ip, [fp, #12]
   4b2b8:	ldr	r8, [sp, #48]	; 0x30
   4b2bc:	sub	r1, fp, #96	; 0x60
   4b2c0:	cmp	r0, #1
   4b2c4:	blt	4b448 <GetDataSlab+0x1f5cc>
   4b2c8:	ldr	r0, [sp, #32]
   4b2cc:	ldr	r3, [ip], #4
   4b2d0:	lsl	r7, r2, #3
   4b2d4:	mov	r9, #0
   4b2d8:	mls	r0, r8, r2, r0
   4b2dc:	str	r3, [sp, #44]	; 0x2c
   4b2e0:	sub	r0, r0, r3
   4b2e4:	str	r0, [sp, #36]	; 0x24
   4b2e8:	ldr	r0, [fp, #20]
   4b2ec:	add	sl, r0, #4
   4b2f0:	sub	r0, fp, #136	; 0x88
   4b2f4:	orr	r4, r0, #4
   4b2f8:	orr	r0, r1, #4
   4b2fc:	str	r0, [sp, #24]
   4b300:	mla	r0, r8, r2, r3
   4b304:	str	r0, [sp, #28]
   4b308:	lsl	r0, r8, #3
   4b30c:	str	r0, [sp, #32]
   4b310:	ldr	r0, [sp, #68]	; 0x44
   4b314:	str	r0, [sp, #52]	; 0x34
   4b318:	ldr	r0, [sp, #44]	; 0x2c
   4b31c:	cmp	r8, #1
   4b320:	blt	4b35c <GetDataSlab+0x1f4e0>
   4b324:	ldr	r0, [sp, #44]	; 0x2c
   4b328:	add	r2, r5, r0, lsl #3
   4b32c:	mov	r0, r8
   4b330:	ldr	r8, [sp, #52]	; 0x34
   4b334:	ldr	r3, [r2]
   4b338:	ldr	r1, [r2, #4]
   4b33c:	add	r2, r2, r7
   4b340:	subs	r0, r0, #1
   4b344:	str	r3, [r8]
   4b348:	str	r1, [r8, #4]
   4b34c:	add	r8, r8, #8
   4b350:	bne	4b334 <GetDataSlab+0x1f4b8>
   4b354:	ldr	r0, [sp, #28]
   4b358:	ldr	r8, [sp, #48]	; 0x30
   4b35c:	ldr	r2, [sp, #36]	; 0x24
   4b360:	add	r1, r5, r2, lsl #3
   4b364:	add	r5, r1, r0, lsl #3
   4b368:	add	r0, r0, lr
   4b36c:	add	lr, r0, r2
   4b370:	ldr	r0, [fp, #24]
   4b374:	cmp	r0, #2
   4b378:	blt	4b428 <GetDataSlab+0x1f5ac>
   4b37c:	mov	r0, #0
   4b380:	mov	r2, r0
   4b384:	ldr	r0, [r4, r0, lsl #2]
   4b388:	add	r0, r0, #1
   4b38c:	str	r0, [r4, r2, lsl #2]
   4b390:	ldr	r1, [sl, r2, lsl #2]
   4b394:	sdiv	r3, r0, r1
   4b398:	mls	r0, r3, r1, r0
   4b39c:	cmp	r0, #0
   4b3a0:	bne	4b418 <GetDataSlab+0x1f59c>
   4b3a4:	mov	r0, #0
   4b3a8:	sub	r6, fp, #176	; 0xb0
   4b3ac:	str	r0, [r4, r2, lsl #2]
   4b3b0:	add	r0, r6, r2, lsl #2
   4b3b4:	ldr	r0, [r0, #4]
   4b3b8:	sdiv	r1, lr, r0
   4b3bc:	mls	r3, r1, r0, lr
   4b3c0:	cmp	r3, #0
   4b3c4:	beq	4b3e0 <GetDataSlab+0x1f564>
   4b3c8:	ldr	r1, [r6, r2, lsl #2]
   4b3cc:	ldr	r6, [ip, r2, lsl #2]
   4b3d0:	sub	r0, r0, r3
   4b3d4:	mla	r0, r6, r1, r0
   4b3d8:	add	lr, r0, lr
   4b3dc:	b	4b3fc <GetDataSlab+0x1f580>
   4b3e0:	ldr	r0, [ip, r2, lsl #2]
   4b3e4:	cmp	r0, #0
   4b3e8:	beq	4b400 <GetDataSlab+0x1f584>
   4b3ec:	sub	r1, fp, #176	; 0xb0
   4b3f0:	ldr	r1, [r1, r2, lsl #2]
   4b3f4:	mla	lr, r1, r0, lr
   4b3f8:	mul	r0, r1, r0
   4b3fc:	add	r5, r5, r0, lsl #3
   4b400:	add	r0, r2, #1
   4b404:	add	r1, r2, #2
   4b408:	ldr	r2, [fp, #24]
   4b40c:	cmp	r1, r2
   4b410:	blt	4b380 <GetDataSlab+0x1f504>
   4b414:	b	4b428 <GetDataSlab+0x1f5ac>
   4b418:	ldr	r0, [sp, #24]
   4b41c:	ldr	r0, [r0, r2, lsl #2]
   4b420:	add	r5, r5, r0, lsl #3
   4b424:	add	lr, r0, lr
   4b428:	ldr	r0, [sp, #32]
   4b42c:	ldr	r1, [sp, #52]	; 0x34
   4b430:	add	r9, r9, r8
   4b434:	add	r1, r1, r0
   4b438:	ldr	r0, [sp, #60]	; 0x3c
   4b43c:	str	r1, [sp, #52]	; 0x34
   4b440:	cmp	r9, r0
   4b444:	blt	4b318 <GetDataSlab+0x1f49c>
   4b448:	ldr	r9, [sp, #40]	; 0x28
   4b44c:	mov	r0, #0
   4b450:	ldr	r1, [fp, #16]
   4b454:	cmp	r9, #13
   4b458:	bne	2e97c <GetDataSlab+0x2b00>
   4b45c:	ldr	r0, [r1]
   4b460:	ldr	sl, [fp, #20]
   4b464:	mov	r2, #0
   4b468:	sub	r5, fp, #176	; 0xb0
   4b46c:	sub	r6, fp, #96	; 0x60
   4b470:	str	r0, [sp, #36]	; 0x24
   4b474:	sub	r0, r0, #1
   4b478:	str	r0, [fp, #-96]	; 0xffffffa0
   4b47c:	ldr	r0, [fp, #8]
   4b480:	ldr	r0, [r0]
   4b484:	str	r0, [fp, #-176]	; 0xffffff50
   4b488:	str	r0, [sp, #44]	; 0x2c
   4b48c:	ldr	r0, [fp, #24]
   4b490:	ldr	r1, [sl]
   4b494:	cmp	r0, #2
   4b498:	str	r1, [sp, #52]	; 0x34
   4b49c:	str	r1, [sp, #60]	; 0x3c
   4b4a0:	blt	4b5f0 <GetDataSlab+0x1f774>
   4b4a4:	ldr	r0, [fp, #8]
   4b4a8:	ldr	r3, [sp, #44]	; 0x2c
   4b4ac:	mov	r4, #1
   4b4b0:	mov	lr, #0
   4b4b4:	mvn	ip, #15
   4b4b8:	mov	r2, #0
   4b4bc:	sub	r7, r0, #4
   4b4c0:	sub	r9, r0, #12
   4b4c4:	ldr	r0, [sp, #52]	; 0x34
   4b4c8:	mov	r8, r3
   4b4cc:	str	r0, [sp, #60]	; 0x3c
   4b4d0:	ldr	r1, [fp, #16]
   4b4d4:	add	lr, lr, #1
   4b4d8:	cmp	lr, #4
   4b4dc:	ldr	r1, [r1, r4, lsl #2]
   4b4e0:	str	r3, [r5, r4, lsl #2]
   4b4e4:	sub	r1, r1, #1
   4b4e8:	str	r1, [r6, r4, lsl #2]
   4b4ec:	ldr	r6, [fp, #8]
   4b4f0:	ldr	r0, [r6, r4, lsl #2]
   4b4f4:	bcs	4b508 <GetDataSlab+0x1f68c>
   4b4f8:	mov	sl, r0
   4b4fc:	mov	r6, r0
   4b500:	mov	r5, r4
   4b504:	b	4b590 <GetDataSlab+0x1f714>
   4b508:	vmov.i32	q9, #1	; 0x00000001
   4b50c:	vmov.i32	q10, #1	; 0x00000001
   4b510:	vmov.i32	q8, #1	; 0x00000001
   4b514:	bic	r6, lr, #3
   4b518:	bic	sl, r4, #3
   4b51c:	vmov.32	d23[1], r0
   4b520:	vmov.32	d18[0], r3
   4b524:	vmov.32	d20[0], r1
   4b528:	sub	r5, r4, r6
   4b52c:	mov	r1, r9
   4b530:	vorr	d16, d18, d18
   4b534:	vmov.i32	q9, #1	; 0x00000001
   4b538:	vorr	d18, d20, d20
   4b53c:	vld1.32	{d20-d21}, [r1], ip
   4b540:	subs	sl, sl, #4
   4b544:	vrev64.32	q12, q10
   4b548:	vext.8	q12, q12, q12, #8
   4b54c:	vext.8	q11, q11, q12, #12
   4b550:	vmul.i32	q9, q9, q12
   4b554:	vmul.i32	q8, q11, q8
   4b558:	vorr	q11, q12, q12
   4b55c:	bne	4b53c <GetDataSlab+0x1f6c0>
   4b560:	vext.8	q11, q9, q8, #8
   4b564:	vext.8	q12, q8, q8, #8
   4b568:	mov	sl, r0
   4b56c:	cmp	lr, r6
   4b570:	vmul.i32	q0, q9, q11
   4b574:	vmul.i32	q1, q8, q12
   4b578:	vmul.i32	q8, q0, d0[1]
   4b57c:	vmul.i32	q9, q1, d2[1]
   4b580:	vmov.32	r1, d16[0]
   4b584:	vmov.32	r3, d18[0]
   4b588:	beq	4b5a4 <GetDataSlab+0x1f728>
   4b58c:	vmov.32	r6, d20[0]
   4b590:	mul	r3, r6, r3
   4b594:	ldr	r6, [r7, r5, lsl #2]
   4b598:	subs	r5, r5, #1
   4b59c:	mul	r1, r1, r6
   4b5a0:	bne	4b590 <GetDataSlab+0x1f714>
   4b5a4:	sub	r6, fp, #96	; 0x60
   4b5a8:	sub	r5, fp, #176	; 0xb0
   4b5ac:	ldr	r0, [fp, #20]
   4b5b0:	add	r9, r9, #4
   4b5b4:	str	r1, [r6, r4, lsl #2]
   4b5b8:	ldr	r1, [fp, #12]
   4b5bc:	str	r3, [r5, r4, lsl #2]
   4b5c0:	ldr	r1, [r1, r4, lsl #2]
   4b5c4:	mla	r2, r1, r8, r2
   4b5c8:	ldr	r1, [r0, r4, lsl #2]
   4b5cc:	ldr	r0, [sp, #60]	; 0x3c
   4b5d0:	add	r4, r4, #1
   4b5d4:	mov	r8, r3
   4b5d8:	mov	r3, sl
   4b5dc:	mul	r0, r1, r0
   4b5e0:	ldr	r1, [fp, #24]
   4b5e4:	str	r0, [sp, #60]	; 0x3c
   4b5e8:	cmp	r4, r1
   4b5ec:	bne	4b4d0 <GetDataSlab+0x1f654>
   4b5f0:	ldr	r0, [sp, #56]	; 0x38
   4b5f4:	ldr	r6, [sp, #36]	; 0x24
   4b5f8:	add	r9, r0, r2, lsl #3
   4b5fc:	cmp	r6, #1
   4b600:	bne	4c6a0 <GetDataSlab+0x20824>
   4b604:	ldr	r0, [sp, #60]	; 0x3c
   4b608:	ldr	lr, [fp, #12]
   4b60c:	cmp	r0, #1
   4b610:	blt	523e0 <GetDataSlab+0x26564>
   4b614:	mov	r1, lr
   4b618:	ldr	r8, [sp, #68]	; 0x44
   4b61c:	mov	r6, #0
   4b620:	mov	r4, #0
   4b624:	ldr	r0, [r1], #4
   4b628:	str	r1, [sp, #64]	; 0x40
   4b62c:	ldr	r1, [sp, #52]	; 0x34
   4b630:	str	r0, [sp, #40]	; 0x28
   4b634:	add	r0, r1, r0
   4b638:	str	r0, [sp, #36]	; 0x24
   4b63c:	ldr	r0, [fp, #20]
   4b640:	add	lr, r0, #4
   4b644:	sub	r0, fp, #136	; 0x88
   4b648:	orr	r7, r0, #4
   4b64c:	sub	r0, fp, #96	; 0x60
   4b650:	orr	r0, r0, #4
   4b654:	str	r0, [sp, #28]
   4b658:	bic	r0, r1, #1
   4b65c:	str	r0, [sp, #32]
   4b660:	lsl	r0, r1, #3
   4b664:	str	r0, [sp, #48]	; 0x30
   4b668:	mov	r0, #0
   4b66c:	str	r0, [sp, #56]	; 0x38
   4b670:	cmp	r1, #1
   4b674:	blt	4b718 <GetDataSlab+0x1f89c>
   4b678:	ldr	r0, [sp, #40]	; 0x28
   4b67c:	mov	r1, #0
   4b680:	add	r5, r9, r0, lsl #3
   4b684:	beq	4b6e8 <GetDataSlab+0x1f86c>
   4b688:	ldr	r0, [sp, #68]	; 0x44
   4b68c:	ldr	r3, [sp, #48]	; 0x30
   4b690:	mla	r0, r3, r4, r0
   4b694:	ldr	r3, [sp, #36]	; 0x24
   4b698:	add	r3, r9, r3, lsl #3
   4b69c:	cmp	r0, r3
   4b6a0:	bcs	4b6bc <GetDataSlab+0x1f840>
   4b6a4:	ldr	r0, [sp, #48]	; 0x30
   4b6a8:	ldr	r3, [sp, #68]	; 0x44
   4b6ac:	mla	r0, r0, r4, r0
   4b6b0:	add	r0, r3, r0
   4b6b4:	cmp	r0, r5
   4b6b8:	bhi	4b6e8 <GetDataSlab+0x1f86c>
   4b6bc:	ldr	r1, [sp, #32]
   4b6c0:	mov	r3, r8
   4b6c4:	mov	r0, r5
   4b6c8:	vld1.64	{d16-d17}, [r0]!
   4b6cc:	subs	r1, r1, #2
   4b6d0:	vst1.64	{d16-d17}, [r3]!
   4b6d4:	bne	4b6c8 <GetDataSlab+0x1f84c>
   4b6d8:	ldr	r0, [sp, #52]	; 0x34
   4b6dc:	ldr	r1, [sp, #32]
   4b6e0:	cmp	r0, r1
   4b6e4:	beq	4b718 <GetDataSlab+0x1f89c>
   4b6e8:	ldr	r0, [sp, #52]	; 0x34
   4b6ec:	sub	r3, r0, r1
   4b6f0:	sub	r1, r6, r1, lsl #3
   4b6f4:	mov	r0, r5
   4b6f8:	mov	ip, r8
   4b6fc:	subs	r3, r3, #1
   4b700:	ldr	sl, [r0, -r1]!
   4b704:	ldr	r0, [r0, #4]
   4b708:	str	sl, [ip, -r1]!
   4b70c:	sub	r1, r1, #8
   4b710:	str	r0, [ip, #4]
   4b714:	bne	4b6f4 <GetDataSlab+0x1f878>
   4b718:	ldr	r0, [sp, #44]	; 0x2c
   4b71c:	mov	ip, r4
   4b720:	add	r9, r9, r0, lsl #3
   4b724:	add	r2, r2, r0
   4b728:	ldr	r0, [fp, #24]
   4b72c:	cmp	r0, #2
   4b730:	blt	4b7e8 <GetDataSlab+0x1f96c>
   4b734:	mov	r1, #0
   4b738:	mov	r4, #0
   4b73c:	mov	r0, r1
   4b740:	ldr	r1, [r7, r1, lsl #2]
   4b744:	add	r1, r1, #1
   4b748:	str	r1, [r7, r0, lsl #2]
   4b74c:	ldr	r3, [lr, r0, lsl #2]
   4b750:	sdiv	r5, r1, r3
   4b754:	mls	r1, r5, r3, r1
   4b758:	cmp	r1, #0
   4b75c:	bne	4b7d8 <GetDataSlab+0x1f95c>
   4b760:	sub	r6, fp, #176	; 0xb0
   4b764:	str	r4, [r7, r0, lsl #2]
   4b768:	add	r1, r6, r0, lsl #2
   4b76c:	ldr	r1, [r1, #4]
   4b770:	sdiv	r3, r2, r1
   4b774:	mls	r3, r3, r1, r2
   4b778:	cmp	r3, #0
   4b77c:	beq	4b79c <GetDataSlab+0x1f920>
   4b780:	ldr	r5, [r6, r0, lsl #2]
   4b784:	ldr	r6, [sp, #64]	; 0x40
   4b788:	sub	r1, r1, r3
   4b78c:	ldr	r6, [r6, r0, lsl #2]
   4b790:	mla	r1, r6, r5, r1
   4b794:	add	r2, r1, r2
   4b798:	b	4b7bc <GetDataSlab+0x1f940>
   4b79c:	ldr	r1, [sp, #64]	; 0x40
   4b7a0:	ldr	r1, [r1, r0, lsl #2]
   4b7a4:	cmp	r1, #0
   4b7a8:	beq	4b7c0 <GetDataSlab+0x1f944>
   4b7ac:	sub	r3, fp, #176	; 0xb0
   4b7b0:	ldr	r3, [r3, r0, lsl #2]
   4b7b4:	mla	r2, r3, r1, r2
   4b7b8:	mul	r1, r3, r1
   4b7bc:	add	r9, r9, r1, lsl #3
   4b7c0:	ldr	r3, [fp, #24]
   4b7c4:	add	r1, r0, #1
   4b7c8:	add	r0, r0, #2
   4b7cc:	cmp	r0, r3
   4b7d0:	blt	4b73c <GetDataSlab+0x1f8c0>
   4b7d4:	b	4b7e8 <GetDataSlab+0x1f96c>
   4b7d8:	ldr	r1, [sp, #28]
   4b7dc:	ldr	r0, [r1, r0, lsl #2]
   4b7e0:	add	r9, r9, r0, lsl #3
   4b7e4:	add	r2, r0, r2
   4b7e8:	ldr	r1, [sp, #52]	; 0x34
   4b7ec:	ldr	r5, [sp, #56]	; 0x38
   4b7f0:	ldr	r0, [sp, #48]	; 0x30
   4b7f4:	ldr	r3, [sp, #60]	; 0x3c
   4b7f8:	mov	r4, ip
   4b7fc:	mov	r6, #0
   4b800:	add	r4, ip, #1
   4b804:	add	r5, r5, r1
   4b808:	add	r8, r8, r0
   4b80c:	mov	r0, #0
   4b810:	cmp	r5, r3
   4b814:	str	r5, [sp, #56]	; 0x38
   4b818:	blt	4b670 <GetDataSlab+0x1f7f4>
   4b81c:	b	2e97c <GetDataSlab+0x2b00>
   4b820:	ldr	r0, [sp, #52]	; 0x34
   4b824:	ldr	r1, [fp, #12]
   4b828:	ldr	r2, [fp, #20]
   4b82c:	ldr	sl, [sp, #48]	; 0x30
   4b830:	cmp	r0, #1
   4b834:	blt	523f4 <GetDataSlab+0x26578>
   4b838:	ldr	r0, [sp, #44]	; 0x2c
   4b83c:	ldr	lr, [r1], #4
   4b840:	lsl	r8, r3, #3
   4b844:	mls	r0, sl, r3, r0
   4b848:	str	r1, [sp, #64]	; 0x40
   4b84c:	str	lr, [sp, #36]	; 0x24
   4b850:	sub	r0, r0, lr
   4b854:	str	r0, [sp, #44]	; 0x2c
   4b858:	add	r0, r2, #4
   4b85c:	str	r0, [sp, #60]	; 0x3c
   4b860:	sub	r0, fp, #136	; 0x88
   4b864:	orr	r4, r0, #4
   4b868:	sub	r0, fp, #96	; 0x60
   4b86c:	orr	r0, r0, #4
   4b870:	str	r0, [sp, #28]
   4b874:	mla	r0, sl, r3, lr
   4b878:	str	r0, [sp, #32]
   4b87c:	lsl	r0, sl, #3
   4b880:	str	r0, [sp, #40]	; 0x28
   4b884:	mov	r0, #0
   4b888:	str	r0, [sp, #56]	; 0x38
   4b88c:	cmp	sl, #1
   4b890:	mov	r0, lr
   4b894:	blt	4b8c8 <GetDataSlab+0x1fa4c>
   4b898:	ldr	r7, [sp, #68]	; 0x44
   4b89c:	add	r6, r5, lr, lsl #3
   4b8a0:	ldrd	r0, [r6]
   4b8a4:	bl	5f080 <__aeabi_ul2d>
   4b8a8:	strd	r0, [r7]
   4b8ac:	add	r6, r6, r8
   4b8b0:	subs	sl, sl, #1
   4b8b4:	add	r7, r7, #8
   4b8b8:	bne	4b8a0 <GetDataSlab+0x1fa24>
   4b8bc:	ldr	r0, [sp, #32]
   4b8c0:	ldr	sl, [sp, #48]	; 0x30
   4b8c4:	ldr	lr, [sp, #36]	; 0x24
   4b8c8:	ldr	r2, [sp, #44]	; 0x2c
   4b8cc:	ldr	r6, [sp, #68]	; 0x44
   4b8d0:	add	r1, r5, r2, lsl #3
   4b8d4:	mov	ip, r6
   4b8d8:	sub	r6, fp, #176	; 0xb0
   4b8dc:	add	r5, r1, r0, lsl #3
   4b8e0:	add	r0, r0, r9
   4b8e4:	add	r9, r0, r2
   4b8e8:	ldr	r0, [fp, #24]
   4b8ec:	cmp	r0, #2
   4b8f0:	blt	4b9a4 <GetDataSlab+0x1fb28>
   4b8f4:	mov	r1, #0
   4b8f8:	mov	r0, r1
   4b8fc:	ldr	r1, [r4, r1, lsl #2]
   4b900:	ldr	r2, [sp, #60]	; 0x3c
   4b904:	add	r1, r1, #1
   4b908:	str	r1, [r4, r0, lsl #2]
   4b90c:	ldr	r2, [r2, r0, lsl #2]
   4b910:	sdiv	r3, r1, r2
   4b914:	mls	r1, r3, r2, r1
   4b918:	cmp	r1, #0
   4b91c:	bne	4b994 <GetDataSlab+0x1fb18>
   4b920:	mov	r1, #0
   4b924:	str	r1, [r4, r0, lsl #2]
   4b928:	add	r1, r6, r0, lsl #2
   4b92c:	ldr	r1, [r1, #4]
   4b930:	sdiv	r2, r9, r1
   4b934:	mls	r2, r2, r1, r9
   4b938:	cmp	r2, #0
   4b93c:	beq	4b95c <GetDataSlab+0x1fae0>
   4b940:	ldr	r7, [sp, #64]	; 0x40
   4b944:	ldr	r3, [r6, r0, lsl #2]
   4b948:	sub	r1, r1, r2
   4b94c:	ldr	r7, [r7, r0, lsl #2]
   4b950:	mla	r1, r7, r3, r1
   4b954:	add	r9, r1, r9
   4b958:	b	4b978 <GetDataSlab+0x1fafc>
   4b95c:	ldr	r1, [sp, #64]	; 0x40
   4b960:	ldr	r1, [r1, r0, lsl #2]
   4b964:	cmp	r1, #0
   4b968:	beq	4b97c <GetDataSlab+0x1fb00>
   4b96c:	ldr	r2, [r6, r0, lsl #2]
   4b970:	mla	r9, r2, r1, r9
   4b974:	mul	r1, r2, r1
   4b978:	add	r5, r5, r1, lsl #3
   4b97c:	ldr	r2, [fp, #24]
   4b980:	add	r1, r0, #1
   4b984:	add	r0, r0, #2
   4b988:	cmp	r0, r2
   4b98c:	blt	4b8f8 <GetDataSlab+0x1fa7c>
   4b990:	b	4b9a4 <GetDataSlab+0x1fb28>
   4b994:	ldr	r1, [sp, #28]
   4b998:	ldr	r0, [r1, r0, lsl #2]
   4b99c:	add	r5, r5, r0, lsl #3
   4b9a0:	add	r9, r0, r9
   4b9a4:	ldr	r2, [sp, #56]	; 0x38
   4b9a8:	ldr	r0, [sp, #40]	; 0x28
   4b9ac:	ldr	r1, [sp, #52]	; 0x34
   4b9b0:	add	r2, r2, sl
   4b9b4:	add	ip, ip, r0
   4b9b8:	mov	r0, #0
   4b9bc:	cmp	r2, r1
   4b9c0:	str	ip, [sp, #68]	; 0x44
   4b9c4:	str	r2, [sp, #56]	; 0x38
   4b9c8:	blt	4b88c <GetDataSlab+0x1fa10>
   4b9cc:	b	2e97c <GetDataSlab+0x2b00>
   4b9d0:	ldr	r0, [sp, #52]	; 0x34
   4b9d4:	ldr	lr, [sp, #48]	; 0x30
   4b9d8:	sub	r2, fp, #96	; 0x60
   4b9dc:	cmp	r0, #1
   4b9e0:	blt	52408 <GetDataSlab+0x2658c>
   4b9e4:	ldr	r1, [sp, #64]	; 0x40
   4b9e8:	ldr	r0, [sp, #44]	; 0x2c
   4b9ec:	lsl	r8, r3, #3
   4b9f0:	ldr	r9, [r1], #4
   4b9f4:	mls	r0, lr, r3, r0
   4b9f8:	sub	r0, r0, r9
   4b9fc:	str	r1, [sp, #64]	; 0x40
   4ba00:	str	r9, [sp, #36]	; 0x24
   4ba04:	str	r0, [sp, #44]	; 0x2c
   4ba08:	ldr	r0, [fp, #20]
   4ba0c:	add	r0, r0, #4
   4ba10:	str	r0, [sp, #60]	; 0x3c
   4ba14:	sub	r0, fp, #136	; 0x88
   4ba18:	orr	r7, r0, #4
   4ba1c:	orr	r0, r2, #4
   4ba20:	str	r0, [sp, #28]
   4ba24:	mla	r0, lr, r3, r9
   4ba28:	str	r0, [sp, #32]
   4ba2c:	lsl	r0, lr, #2
   4ba30:	str	r0, [sp, #40]	; 0x28
   4ba34:	mov	r0, #0
   4ba38:	str	r0, [sp, #56]	; 0x38
   4ba3c:	cmp	lr, #1
   4ba40:	mov	r0, r9
   4ba44:	blt	4ba7c <GetDataSlab+0x1fc00>
   4ba48:	add	r0, sl, r9, lsl #3
   4ba4c:	ldr	r9, [sp, #68]	; 0x44
   4ba50:	mov	r4, lr
   4ba54:	add	r6, r0, r8
   4ba58:	ldrd	r0, [r0]
   4ba5c:	bl	5f2b8 <__aeabi_ul2f>
   4ba60:	str	r0, [r9], #4
   4ba64:	subs	r4, r4, #1
   4ba68:	mov	r0, r6
   4ba6c:	bne	4ba54 <GetDataSlab+0x1fbd8>
   4ba70:	ldr	r0, [sp, #32]
   4ba74:	ldr	lr, [sp, #48]	; 0x30
   4ba78:	ldr	r9, [sp, #36]	; 0x24
   4ba7c:	ldr	r2, [sp, #44]	; 0x2c
   4ba80:	ldr	r4, [sp, #68]	; 0x44
   4ba84:	add	r1, sl, r2, lsl #3
   4ba88:	mov	ip, r4
   4ba8c:	sub	r4, fp, #176	; 0xb0
   4ba90:	add	sl, r1, r0, lsl #3
   4ba94:	add	r0, r0, r5
   4ba98:	add	r5, r0, r2
   4ba9c:	ldr	r0, [fp, #24]
   4baa0:	cmp	r0, #2
   4baa4:	blt	4bb58 <GetDataSlab+0x1fcdc>
   4baa8:	mov	r1, #0
   4baac:	mov	r0, r1
   4bab0:	ldr	r1, [r7, r1, lsl #2]
   4bab4:	ldr	r2, [sp, #60]	; 0x3c
   4bab8:	add	r1, r1, #1
   4babc:	str	r1, [r7, r0, lsl #2]
   4bac0:	ldr	r2, [r2, r0, lsl #2]
   4bac4:	sdiv	r3, r1, r2
   4bac8:	mls	r1, r3, r2, r1
   4bacc:	cmp	r1, #0
   4bad0:	bne	4bb48 <GetDataSlab+0x1fccc>
   4bad4:	mov	r1, #0
   4bad8:	str	r1, [r7, r0, lsl #2]
   4badc:	add	r1, r4, r0, lsl #2
   4bae0:	ldr	r1, [r1, #4]
   4bae4:	sdiv	r2, r5, r1
   4bae8:	mls	r2, r2, r1, r5
   4baec:	cmp	r2, #0
   4baf0:	beq	4bb10 <GetDataSlab+0x1fc94>
   4baf4:	ldr	r6, [sp, #64]	; 0x40
   4baf8:	ldr	r3, [r4, r0, lsl #2]
   4bafc:	sub	r1, r1, r2
   4bb00:	ldr	r6, [r6, r0, lsl #2]
   4bb04:	mla	r1, r6, r3, r1
   4bb08:	add	r5, r1, r5
   4bb0c:	b	4bb2c <GetDataSlab+0x1fcb0>
   4bb10:	ldr	r1, [sp, #64]	; 0x40
   4bb14:	ldr	r1, [r1, r0, lsl #2]
   4bb18:	cmp	r1, #0
   4bb1c:	beq	4bb30 <GetDataSlab+0x1fcb4>
   4bb20:	ldr	r2, [r4, r0, lsl #2]
   4bb24:	mla	r5, r2, r1, r5
   4bb28:	mul	r1, r2, r1
   4bb2c:	add	sl, sl, r1, lsl #3
   4bb30:	ldr	r2, [fp, #24]
   4bb34:	add	r1, r0, #1
   4bb38:	add	r0, r0, #2
   4bb3c:	cmp	r0, r2
   4bb40:	blt	4baac <GetDataSlab+0x1fc30>
   4bb44:	b	4bb58 <GetDataSlab+0x1fcdc>
   4bb48:	ldr	r1, [sp, #28]
   4bb4c:	ldr	r0, [r1, r0, lsl #2]
   4bb50:	add	sl, sl, r0, lsl #3
   4bb54:	add	r5, r0, r5
   4bb58:	ldr	r2, [sp, #56]	; 0x38
   4bb5c:	ldr	r0, [sp, #40]	; 0x28
   4bb60:	ldr	r1, [sp, #52]	; 0x34
   4bb64:	add	r2, r2, lr
   4bb68:	add	ip, ip, r0
   4bb6c:	mov	r0, #0
   4bb70:	cmp	r2, r1
   4bb74:	str	ip, [sp, #68]	; 0x44
   4bb78:	str	r2, [sp, #56]	; 0x38
   4bb7c:	blt	4ba3c <GetDataSlab+0x1fbc0>
   4bb80:	b	2e97c <GetDataSlab+0x2b00>
   4bb84:	ldr	r0, [sp, #60]	; 0x3c
   4bb88:	cmp	r0, #1
   4bb8c:	blt	5241c <GetDataSlab+0x265a0>
   4bb90:	ldr	r0, [fp, #20]
   4bb94:	ldr	lr, [fp, #16]
   4bb98:	add	ip, r0, #4
   4bb9c:	sub	r0, fp, #136	; 0x88
   4bba0:	orr	r9, r0, #4
   4bba4:	sub	r0, fp, #96	; 0x60
   4bba8:	orr	r0, r0, #4
   4bbac:	str	r0, [sp, #44]	; 0x2c
   4bbb0:	ldr	r0, [r8], #4
   4bbb4:	str	r0, [sp, #52]	; 0x34
   4bbb8:	mov	r0, #0
   4bbbc:	str	r0, [sp, #56]	; 0x38
   4bbc0:	ldr	r1, [sp, #52]	; 0x34
   4bbc4:	cmp	r2, #1
   4bbc8:	add	r0, r1, r5
   4bbcc:	add	r3, sl, r1, lsl #3
   4bbd0:	blt	4bc24 <GetDataSlab+0x1fda8>
   4bbd4:	ldr	r1, [sp, #68]	; 0x44
   4bbd8:	ldr	r2, [sp, #56]	; 0x38
   4bbdc:	ldr	r6, [fp, #20]
   4bbe0:	mov	r7, #0
   4bbe4:	add	r5, r1, r2
   4bbe8:	ldrb	r1, [r3]
   4bbec:	strb	r1, [r5, r7]
   4bbf0:	add	r7, r7, #1
   4bbf4:	ldr	r4, [lr]
   4bbf8:	ldr	r2, [r6]
   4bbfc:	add	r0, r4, r0
   4bc00:	add	r3, r3, r4, lsl #3
   4bc04:	cmp	r7, r2
   4bc08:	blt	4bbe8 <GetDataSlab+0x1fd6c>
   4bc0c:	ldr	r1, [fp, #12]
   4bc10:	sub	r6, fp, #176	; 0xb0
   4bc14:	ldr	r5, [r1]
   4bc18:	ldr	r1, [fp, #8]
   4bc1c:	ldr	r1, [r1]
   4bc20:	b	4bc30 <GetDataSlab+0x1fdb4>
   4bc24:	mov	r5, r1
   4bc28:	ldr	r1, [sp, #48]	; 0x30
   4bc2c:	sub	r6, fp, #176	; 0xb0
   4bc30:	str	r1, [sp, #48]	; 0x30
   4bc34:	mls	r1, r4, r2, r1
   4bc38:	str	r5, [sp, #52]	; 0x34
   4bc3c:	sub	r1, r1, r5
   4bc40:	add	r5, r1, r0
   4bc44:	ldr	r0, [fp, #24]
   4bc48:	add	sl, r3, r1, lsl #3
   4bc4c:	cmp	r0, #2
   4bc50:	blt	4bd00 <GetDataSlab+0x1fe84>
   4bc54:	mov	r7, #0
   4bc58:	ldr	r1, [r9, r7, lsl #2]
   4bc5c:	mov	r0, r7
   4bc60:	add	r1, r1, #1
   4bc64:	str	r1, [r9, r7, lsl #2]
   4bc68:	ldr	r3, [ip, r7, lsl #2]
   4bc6c:	sdiv	r7, r1, r3
   4bc70:	mls	r1, r7, r3, r1
   4bc74:	cmp	r1, #0
   4bc78:	bne	4bcf0 <GetDataSlab+0x1fe74>
   4bc7c:	mov	r1, #0
   4bc80:	str	r1, [r9, r0, lsl #2]
   4bc84:	add	r1, r6, r0, lsl #2
   4bc88:	ldr	r7, [r1, #4]
   4bc8c:	sdiv	r1, r5, r7
   4bc90:	mls	r1, r1, r7, r5
   4bc94:	cmp	r1, #0
   4bc98:	beq	4bcbc <GetDataSlab+0x1fe40>
   4bc9c:	ldr	r3, [r6, r0, lsl #2]
   4bca0:	ldr	lr, [r8, r0, lsl #2]
   4bca4:	sub	r1, r7, r1
   4bca8:	sub	r6, fp, #176	; 0xb0
   4bcac:	mla	r1, lr, r3, r1
   4bcb0:	ldr	lr, [fp, #16]
   4bcb4:	add	r5, r1, r5
   4bcb8:	b	4bcd4 <GetDataSlab+0x1fe58>
   4bcbc:	ldr	r1, [r8, r0, lsl #2]
   4bcc0:	cmp	r1, #0
   4bcc4:	beq	4bcd8 <GetDataSlab+0x1fe5c>
   4bcc8:	ldr	r3, [r6, r0, lsl #2]
   4bccc:	mla	r5, r3, r1, r5
   4bcd0:	mul	r1, r3, r1
   4bcd4:	add	sl, sl, r1, lsl #3
   4bcd8:	ldr	r1, [fp, #24]
   4bcdc:	add	r7, r0, #1
   4bce0:	add	r0, r0, #2
   4bce4:	cmp	r0, r1
   4bce8:	blt	4bc58 <GetDataSlab+0x1fddc>
   4bcec:	b	4bd00 <GetDataSlab+0x1fe84>
   4bcf0:	ldr	r1, [sp, #44]	; 0x2c
   4bcf4:	ldr	r0, [r1, r0, lsl #2]
   4bcf8:	add	sl, sl, r0, lsl #3
   4bcfc:	add	r5, r0, r5
   4bd00:	ldr	r3, [sp, #56]	; 0x38
   4bd04:	ldr	r1, [sp, #60]	; 0x3c
   4bd08:	mov	r0, #0
   4bd0c:	add	r3, r2, r3
   4bd10:	cmp	r3, r1
   4bd14:	str	r3, [sp, #56]	; 0x38
   4bd18:	blt	4bbc0 <GetDataSlab+0x1fd44>
   4bd1c:	b	2e97c <GetDataSlab+0x2b00>
   4bd20:	ldr	r0, [sp, #60]	; 0x3c
   4bd24:	cmp	r0, #1
   4bd28:	blt	52430 <GetDataSlab+0x265b4>
   4bd2c:	ldr	r0, [fp, #20]
   4bd30:	ldr	lr, [fp, #16]
   4bd34:	add	ip, r0, #4
   4bd38:	sub	r0, fp, #136	; 0x88
   4bd3c:	orr	r9, r0, #4
   4bd40:	sub	r0, fp, #96	; 0x60
   4bd44:	orr	r0, r0, #4
   4bd48:	str	r0, [sp, #44]	; 0x2c
   4bd4c:	ldr	r0, [r8], #4
   4bd50:	str	r0, [sp, #52]	; 0x34
   4bd54:	mov	r0, #0
   4bd58:	str	r0, [sp, #56]	; 0x38
   4bd5c:	ldr	r1, [sp, #52]	; 0x34
   4bd60:	cmp	r2, #1
   4bd64:	add	r0, r1, r5
   4bd68:	add	r3, sl, r1, lsl #3
   4bd6c:	blt	4bdc0 <GetDataSlab+0x1ff44>
   4bd70:	ldr	r1, [sp, #68]	; 0x44
   4bd74:	ldr	r2, [sp, #56]	; 0x38
   4bd78:	ldr	r6, [fp, #20]
   4bd7c:	mov	r7, #0
   4bd80:	add	r5, r1, r2
   4bd84:	ldrb	r1, [r3]
   4bd88:	strb	r1, [r5, r7]
   4bd8c:	add	r7, r7, #1
   4bd90:	ldr	r4, [lr]
   4bd94:	ldr	r2, [r6]
   4bd98:	add	r0, r4, r0
   4bd9c:	add	r3, r3, r4, lsl #3
   4bda0:	cmp	r7, r2
   4bda4:	blt	4bd84 <GetDataSlab+0x1ff08>
   4bda8:	ldr	r1, [fp, #12]
   4bdac:	sub	r6, fp, #176	; 0xb0
   4bdb0:	ldr	r5, [r1]
   4bdb4:	ldr	r1, [fp, #8]
   4bdb8:	ldr	r1, [r1]
   4bdbc:	b	4bdcc <GetDataSlab+0x1ff50>
   4bdc0:	mov	r5, r1
   4bdc4:	ldr	r1, [sp, #48]	; 0x30
   4bdc8:	sub	r6, fp, #176	; 0xb0
   4bdcc:	str	r1, [sp, #48]	; 0x30
   4bdd0:	mls	r1, r4, r2, r1
   4bdd4:	str	r5, [sp, #52]	; 0x34
   4bdd8:	sub	r1, r1, r5
   4bddc:	add	r5, r1, r0
   4bde0:	ldr	r0, [fp, #24]
   4bde4:	add	sl, r3, r1, lsl #3
   4bde8:	cmp	r0, #2
   4bdec:	blt	4be9c <GetDataSlab+0x20020>
   4bdf0:	mov	r7, #0
   4bdf4:	ldr	r1, [r9, r7, lsl #2]
   4bdf8:	mov	r0, r7
   4bdfc:	add	r1, r1, #1
   4be00:	str	r1, [r9, r7, lsl #2]
   4be04:	ldr	r3, [ip, r7, lsl #2]
   4be08:	sdiv	r7, r1, r3
   4be0c:	mls	r1, r7, r3, r1
   4be10:	cmp	r1, #0
   4be14:	bne	4be8c <GetDataSlab+0x20010>
   4be18:	mov	r1, #0
   4be1c:	str	r1, [r9, r0, lsl #2]
   4be20:	add	r1, r6, r0, lsl #2
   4be24:	ldr	r7, [r1, #4]
   4be28:	sdiv	r1, r5, r7
   4be2c:	mls	r1, r1, r7, r5
   4be30:	cmp	r1, #0
   4be34:	beq	4be58 <GetDataSlab+0x1ffdc>
   4be38:	ldr	r3, [r6, r0, lsl #2]
   4be3c:	ldr	lr, [r8, r0, lsl #2]
   4be40:	sub	r1, r7, r1
   4be44:	sub	r6, fp, #176	; 0xb0
   4be48:	mla	r1, lr, r3, r1
   4be4c:	ldr	lr, [fp, #16]
   4be50:	add	r5, r1, r5
   4be54:	b	4be70 <GetDataSlab+0x1fff4>
   4be58:	ldr	r1, [r8, r0, lsl #2]
   4be5c:	cmp	r1, #0
   4be60:	beq	4be74 <GetDataSlab+0x1fff8>
   4be64:	ldr	r3, [r6, r0, lsl #2]
   4be68:	mla	r5, r3, r1, r5
   4be6c:	mul	r1, r3, r1
   4be70:	add	sl, sl, r1, lsl #3
   4be74:	ldr	r1, [fp, #24]
   4be78:	add	r7, r0, #1
   4be7c:	add	r0, r0, #2
   4be80:	cmp	r0, r1
   4be84:	blt	4bdf4 <GetDataSlab+0x1ff78>
   4be88:	b	4be9c <GetDataSlab+0x20020>
   4be8c:	ldr	r1, [sp, #44]	; 0x2c
   4be90:	ldr	r0, [r1, r0, lsl #2]
   4be94:	add	sl, sl, r0, lsl #3
   4be98:	add	r5, r0, r5
   4be9c:	ldr	r3, [sp, #56]	; 0x38
   4bea0:	ldr	r1, [sp, #60]	; 0x3c
   4bea4:	mov	r0, #0
   4bea8:	add	r3, r2, r3
   4beac:	cmp	r3, r1
   4beb0:	str	r3, [sp, #56]	; 0x38
   4beb4:	blt	4bd5c <GetDataSlab+0x1fee0>
   4beb8:	b	2e97c <GetDataSlab+0x2b00>
   4bebc:	ldr	r0, [sp, #60]	; 0x3c
   4bec0:	ldr	r1, [fp, #12]
   4bec4:	ldr	r3, [sp, #52]	; 0x34
   4bec8:	cmp	r0, #1
   4becc:	blt	52444 <GetDataSlab+0x265c8>
   4bed0:	ldr	r0, [sp, #40]	; 0x28
   4bed4:	ldr	r4, [r1], #4
   4bed8:	add	lr, r6, #4
   4bedc:	mov	ip, #0
   4bee0:	mov	sl, #0
   4bee4:	mls	r0, r3, r5, r0
   4bee8:	str	r1, [sp, #64]	; 0x40
   4beec:	lsl	r1, r5, #3
   4bef0:	str	r4, [sp, #56]	; 0x38
   4bef4:	sub	r0, r0, r4
   4bef8:	str	r0, [sp, #48]	; 0x30
   4befc:	sub	r0, fp, #136	; 0x88
   4bf00:	orr	r7, r0, #4
   4bf04:	sub	r0, fp, #96	; 0x60
   4bf08:	orr	r0, r0, #4
   4bf0c:	str	r0, [sp, #36]	; 0x24
   4bf10:	mla	r0, r3, r5, r4
   4bf14:	str	r0, [sp, #40]	; 0x28
   4bf18:	lsl	r0, r3, #1
   4bf1c:	str	r0, [sp, #44]	; 0x2c
   4bf20:	ldr	r0, [sp, #56]	; 0x38
   4bf24:	cmp	r3, #1
   4bf28:	blt	4bf50 <GetDataSlab+0x200d4>
   4bf2c:	ldr	r0, [sp, #56]	; 0x38
   4bf30:	ldr	r3, [sp, #52]	; 0x34
   4bf34:	ldr	r6, [sp, #68]	; 0x44
   4bf38:	add	r0, r9, r0, lsl #3
   4bf3c:	ldrh	r8, [r0], r1
   4bf40:	subs	r3, r3, #1
   4bf44:	strh	r8, [r6], #2
   4bf48:	bne	4bf3c <GetDataSlab+0x200c0>
   4bf4c:	ldr	r0, [sp, #40]	; 0x28
   4bf50:	ldr	r4, [sp, #48]	; 0x30
   4bf54:	add	r3, r9, r4, lsl #3
   4bf58:	add	r9, r3, r0, lsl #3
   4bf5c:	add	r0, r0, r2
   4bf60:	add	r2, r0, r4
   4bf64:	ldr	r0, [fp, #24]
   4bf68:	cmp	r0, #2
   4bf6c:	blt	4c01c <GetDataSlab+0x201a0>
   4bf70:	ldr	r8, [sp, #64]	; 0x40
   4bf74:	mov	r3, #0
   4bf78:	mov	r0, r3
   4bf7c:	ldr	r3, [r7, r3, lsl #2]
   4bf80:	add	r3, r3, #1
   4bf84:	str	r3, [r7, r0, lsl #2]
   4bf88:	ldr	r6, [lr, r0, lsl #2]
   4bf8c:	sdiv	r5, r3, r6
   4bf90:	mls	r3, r5, r6, r3
   4bf94:	cmp	r3, #0
   4bf98:	bne	4c00c <GetDataSlab+0x20190>
   4bf9c:	sub	r4, fp, #176	; 0xb0
   4bfa0:	str	ip, [r7, r0, lsl #2]
   4bfa4:	add	r3, r4, r0, lsl #2
   4bfa8:	ldr	r3, [r3, #4]
   4bfac:	sdiv	r5, r2, r3
   4bfb0:	mls	r6, r5, r3, r2
   4bfb4:	cmp	r6, #0
   4bfb8:	beq	4bfd4 <GetDataSlab+0x20158>
   4bfbc:	ldr	r5, [r4, r0, lsl #2]
   4bfc0:	ldr	r4, [r8, r0, lsl #2]
   4bfc4:	sub	r3, r3, r6
   4bfc8:	mla	r3, r4, r5, r3
   4bfcc:	add	r2, r3, r2
   4bfd0:	b	4bff0 <GetDataSlab+0x20174>
   4bfd4:	ldr	r3, [r8, r0, lsl #2]
   4bfd8:	cmp	r3, #0
   4bfdc:	beq	4bff4 <GetDataSlab+0x20178>
   4bfe0:	sub	r4, fp, #176	; 0xb0
   4bfe4:	ldr	r4, [r4, r0, lsl #2]
   4bfe8:	mla	r2, r4, r3, r2
   4bfec:	mul	r3, r4, r3
   4bff0:	add	r9, r9, r3, lsl #3
   4bff4:	ldr	r4, [fp, #24]
   4bff8:	add	r3, r0, #1
   4bffc:	add	r0, r0, #2
   4c000:	cmp	r0, r4
   4c004:	blt	4bf78 <GetDataSlab+0x200fc>
   4c008:	b	4c01c <GetDataSlab+0x201a0>
   4c00c:	ldr	r3, [sp, #36]	; 0x24
   4c010:	ldr	r0, [r3, r0, lsl #2]
   4c014:	add	r9, r9, r0, lsl #3
   4c018:	add	r2, r0, r2
   4c01c:	ldr	r0, [sp, #68]	; 0x44
   4c020:	ldr	r3, [sp, #44]	; 0x2c
   4c024:	ldr	r4, [sp, #60]	; 0x3c
   4c028:	add	r0, r0, r3
   4c02c:	ldr	r3, [sp, #52]	; 0x34
   4c030:	str	r0, [sp, #68]	; 0x44
   4c034:	mov	r0, #0
   4c038:	add	sl, sl, r3
   4c03c:	cmp	sl, r4
   4c040:	blt	4bf20 <GetDataSlab+0x200a4>
   4c044:	b	2e97c <GetDataSlab+0x2b00>
   4c048:	ldr	r0, [sp, #60]	; 0x3c
   4c04c:	ldr	r1, [fp, #12]
   4c050:	ldr	r3, [sp, #52]	; 0x34
   4c054:	cmp	r0, #1
   4c058:	blt	52458 <GetDataSlab+0x265dc>
   4c05c:	ldr	r0, [sp, #40]	; 0x28
   4c060:	ldr	r4, [r1], #4
   4c064:	add	lr, r6, #4
   4c068:	mov	ip, #0
   4c06c:	mov	sl, #0
   4c070:	mls	r0, r3, r5, r0
   4c074:	str	r1, [sp, #64]	; 0x40
   4c078:	lsl	r1, r5, #3
   4c07c:	str	r4, [sp, #56]	; 0x38
   4c080:	sub	r0, r0, r4
   4c084:	str	r0, [sp, #48]	; 0x30
   4c088:	sub	r0, fp, #136	; 0x88
   4c08c:	orr	r7, r0, #4
   4c090:	sub	r0, fp, #96	; 0x60
   4c094:	orr	r0, r0, #4
   4c098:	str	r0, [sp, #36]	; 0x24
   4c09c:	mla	r0, r3, r5, r4
   4c0a0:	str	r0, [sp, #40]	; 0x28
   4c0a4:	lsl	r0, r3, #1
   4c0a8:	str	r0, [sp, #44]	; 0x2c
   4c0ac:	ldr	r0, [sp, #56]	; 0x38
   4c0b0:	cmp	r3, #1
   4c0b4:	blt	4c0dc <GetDataSlab+0x20260>
   4c0b8:	ldr	r0, [sp, #56]	; 0x38
   4c0bc:	ldr	r3, [sp, #52]	; 0x34
   4c0c0:	ldr	r6, [sp, #68]	; 0x44
   4c0c4:	add	r0, r9, r0, lsl #3
   4c0c8:	ldrh	r8, [r0], r1
   4c0cc:	subs	r3, r3, #1
   4c0d0:	strh	r8, [r6], #2
   4c0d4:	bne	4c0c8 <GetDataSlab+0x2024c>
   4c0d8:	ldr	r0, [sp, #40]	; 0x28
   4c0dc:	ldr	r4, [sp, #48]	; 0x30
   4c0e0:	add	r3, r9, r4, lsl #3
   4c0e4:	add	r9, r3, r0, lsl #3
   4c0e8:	add	r0, r0, r2
   4c0ec:	add	r2, r0, r4
   4c0f0:	ldr	r0, [fp, #24]
   4c0f4:	cmp	r0, #2
   4c0f8:	blt	4c1a8 <GetDataSlab+0x2032c>
   4c0fc:	ldr	r8, [sp, #64]	; 0x40
   4c100:	mov	r3, #0
   4c104:	mov	r0, r3
   4c108:	ldr	r3, [r7, r3, lsl #2]
   4c10c:	add	r3, r3, #1
   4c110:	str	r3, [r7, r0, lsl #2]
   4c114:	ldr	r6, [lr, r0, lsl #2]
   4c118:	sdiv	r5, r3, r6
   4c11c:	mls	r3, r5, r6, r3
   4c120:	cmp	r3, #0
   4c124:	bne	4c198 <GetDataSlab+0x2031c>
   4c128:	sub	r4, fp, #176	; 0xb0
   4c12c:	str	ip, [r7, r0, lsl #2]
   4c130:	add	r3, r4, r0, lsl #2
   4c134:	ldr	r3, [r3, #4]
   4c138:	sdiv	r5, r2, r3
   4c13c:	mls	r6, r5, r3, r2
   4c140:	cmp	r6, #0
   4c144:	beq	4c160 <GetDataSlab+0x202e4>
   4c148:	ldr	r5, [r4, r0, lsl #2]
   4c14c:	ldr	r4, [r8, r0, lsl #2]
   4c150:	sub	r3, r3, r6
   4c154:	mla	r3, r4, r5, r3
   4c158:	add	r2, r3, r2
   4c15c:	b	4c17c <GetDataSlab+0x20300>
   4c160:	ldr	r3, [r8, r0, lsl #2]
   4c164:	cmp	r3, #0
   4c168:	beq	4c180 <GetDataSlab+0x20304>
   4c16c:	sub	r4, fp, #176	; 0xb0
   4c170:	ldr	r4, [r4, r0, lsl #2]
   4c174:	mla	r2, r4, r3, r2
   4c178:	mul	r3, r4, r3
   4c17c:	add	r9, r9, r3, lsl #3
   4c180:	ldr	r4, [fp, #24]
   4c184:	add	r3, r0, #1
   4c188:	add	r0, r0, #2
   4c18c:	cmp	r0, r4
   4c190:	blt	4c104 <GetDataSlab+0x20288>
   4c194:	b	4c1a8 <GetDataSlab+0x2032c>
   4c198:	ldr	r3, [sp, #36]	; 0x24
   4c19c:	ldr	r0, [r3, r0, lsl #2]
   4c1a0:	add	r9, r9, r0, lsl #3
   4c1a4:	add	r2, r0, r2
   4c1a8:	ldr	r0, [sp, #68]	; 0x44
   4c1ac:	ldr	r3, [sp, #44]	; 0x2c
   4c1b0:	ldr	r4, [sp, #60]	; 0x3c
   4c1b4:	add	r0, r0, r3
   4c1b8:	ldr	r3, [sp, #52]	; 0x34
   4c1bc:	str	r0, [sp, #68]	; 0x44
   4c1c0:	mov	r0, #0
   4c1c4:	add	sl, sl, r3
   4c1c8:	cmp	sl, r4
   4c1cc:	blt	4c0ac <GetDataSlab+0x20230>
   4c1d0:	b	2e97c <GetDataSlab+0x2b00>
   4c1d4:	ldr	r0, [sp, #60]	; 0x3c
   4c1d8:	cmp	r0, #1
   4c1dc:	blt	5246c <GetDataSlab+0x265f0>
   4c1e0:	ldr	r0, [fp, #20]
   4c1e4:	ldr	lr, [fp, #16]
   4c1e8:	add	ip, r0, #4
   4c1ec:	sub	r0, fp, #136	; 0x88
   4c1f0:	orr	r9, r0, #4
   4c1f4:	sub	r0, fp, #96	; 0x60
   4c1f8:	orr	r0, r0, #4
   4c1fc:	str	r0, [sp, #44]	; 0x2c
   4c200:	ldr	r0, [r8], #4
   4c204:	str	r0, [sp, #52]	; 0x34
   4c208:	mov	r0, #0
   4c20c:	str	r0, [sp, #56]	; 0x38
   4c210:	ldr	r1, [sp, #52]	; 0x34
   4c214:	cmp	r2, #1
   4c218:	add	r0, r1, r5
   4c21c:	add	r3, sl, r1, lsl #3
   4c220:	blt	4c274 <GetDataSlab+0x203f8>
   4c224:	ldr	r1, [sp, #68]	; 0x44
   4c228:	ldr	r2, [sp, #56]	; 0x38
   4c22c:	ldr	r6, [fp, #20]
   4c230:	mov	r7, #0
   4c234:	add	r5, r1, r2, lsl #2
   4c238:	ldr	r1, [r3]
   4c23c:	str	r1, [r5, r7, lsl #2]
   4c240:	add	r7, r7, #1
   4c244:	ldr	r4, [lr]
   4c248:	ldr	r2, [r6]
   4c24c:	add	r0, r4, r0
   4c250:	add	r3, r3, r4, lsl #3
   4c254:	cmp	r7, r2
   4c258:	blt	4c238 <GetDataSlab+0x203bc>
   4c25c:	ldr	r1, [fp, #12]
   4c260:	sub	r6, fp, #176	; 0xb0
   4c264:	ldr	r5, [r1]
   4c268:	ldr	r1, [fp, #8]
   4c26c:	ldr	r1, [r1]
   4c270:	b	4c280 <GetDataSlab+0x20404>
   4c274:	mov	r5, r1
   4c278:	ldr	r1, [sp, #48]	; 0x30
   4c27c:	sub	r6, fp, #176	; 0xb0
   4c280:	str	r1, [sp, #48]	; 0x30
   4c284:	mls	r1, r4, r2, r1
   4c288:	str	r5, [sp, #52]	; 0x34
   4c28c:	sub	r1, r1, r5
   4c290:	add	r5, r1, r0
   4c294:	ldr	r0, [fp, #24]
   4c298:	add	sl, r3, r1, lsl #3
   4c29c:	cmp	r0, #2
   4c2a0:	blt	4c350 <GetDataSlab+0x204d4>
   4c2a4:	mov	r7, #0
   4c2a8:	ldr	r1, [r9, r7, lsl #2]
   4c2ac:	mov	r0, r7
   4c2b0:	add	r1, r1, #1
   4c2b4:	str	r1, [r9, r7, lsl #2]
   4c2b8:	ldr	r3, [ip, r7, lsl #2]
   4c2bc:	sdiv	r7, r1, r3
   4c2c0:	mls	r1, r7, r3, r1
   4c2c4:	cmp	r1, #0
   4c2c8:	bne	4c340 <GetDataSlab+0x204c4>
   4c2cc:	mov	r1, #0
   4c2d0:	str	r1, [r9, r0, lsl #2]
   4c2d4:	add	r1, r6, r0, lsl #2
   4c2d8:	ldr	r7, [r1, #4]
   4c2dc:	sdiv	r1, r5, r7
   4c2e0:	mls	r1, r1, r7, r5
   4c2e4:	cmp	r1, #0
   4c2e8:	beq	4c30c <GetDataSlab+0x20490>
   4c2ec:	ldr	r3, [r6, r0, lsl #2]
   4c2f0:	ldr	lr, [r8, r0, lsl #2]
   4c2f4:	sub	r1, r7, r1
   4c2f8:	sub	r6, fp, #176	; 0xb0
   4c2fc:	mla	r1, lr, r3, r1
   4c300:	ldr	lr, [fp, #16]
   4c304:	add	r5, r1, r5
   4c308:	b	4c324 <GetDataSlab+0x204a8>
   4c30c:	ldr	r1, [r8, r0, lsl #2]
   4c310:	cmp	r1, #0
   4c314:	beq	4c328 <GetDataSlab+0x204ac>
   4c318:	ldr	r3, [r6, r0, lsl #2]
   4c31c:	mla	r5, r3, r1, r5
   4c320:	mul	r1, r3, r1
   4c324:	add	sl, sl, r1, lsl #3
   4c328:	ldr	r1, [fp, #24]
   4c32c:	add	r7, r0, #1
   4c330:	add	r0, r0, #2
   4c334:	cmp	r0, r1
   4c338:	blt	4c2a8 <GetDataSlab+0x2042c>
   4c33c:	b	4c350 <GetDataSlab+0x204d4>
   4c340:	ldr	r1, [sp, #44]	; 0x2c
   4c344:	ldr	r0, [r1, r0, lsl #2]
   4c348:	add	sl, sl, r0, lsl #3
   4c34c:	add	r5, r0, r5
   4c350:	ldr	r3, [sp, #56]	; 0x38
   4c354:	ldr	r1, [sp, #60]	; 0x3c
   4c358:	mov	r0, #0
   4c35c:	add	r3, r2, r3
   4c360:	cmp	r3, r1
   4c364:	str	r3, [sp, #56]	; 0x38
   4c368:	blt	4c210 <GetDataSlab+0x20394>
   4c36c:	b	2e97c <GetDataSlab+0x2b00>
   4c370:	ldr	r0, [sp, #60]	; 0x3c
   4c374:	cmp	r0, #1
   4c378:	blt	52480 <GetDataSlab+0x26604>
   4c37c:	ldr	r0, [fp, #20]
   4c380:	ldr	lr, [fp, #16]
   4c384:	add	ip, r0, #4
   4c388:	sub	r0, fp, #136	; 0x88
   4c38c:	orr	r9, r0, #4
   4c390:	sub	r0, fp, #96	; 0x60
   4c394:	orr	r0, r0, #4
   4c398:	str	r0, [sp, #44]	; 0x2c
   4c39c:	ldr	r0, [r8], #4
   4c3a0:	str	r0, [sp, #52]	; 0x34
   4c3a4:	mov	r0, #0
   4c3a8:	str	r0, [sp, #56]	; 0x38
   4c3ac:	ldr	r1, [sp, #52]	; 0x34
   4c3b0:	cmp	r2, #1
   4c3b4:	add	r0, r1, r5
   4c3b8:	add	r3, sl, r1, lsl #3
   4c3bc:	blt	4c410 <GetDataSlab+0x20594>
   4c3c0:	ldr	r1, [sp, #68]	; 0x44
   4c3c4:	ldr	r2, [sp, #56]	; 0x38
   4c3c8:	ldr	r6, [fp, #20]
   4c3cc:	mov	r7, #0
   4c3d0:	add	r5, r1, r2, lsl #2
   4c3d4:	ldr	r1, [r3]
   4c3d8:	str	r1, [r5, r7, lsl #2]
   4c3dc:	add	r7, r7, #1
   4c3e0:	ldr	r4, [lr]
   4c3e4:	ldr	r2, [r6]
   4c3e8:	add	r0, r4, r0
   4c3ec:	add	r3, r3, r4, lsl #3
   4c3f0:	cmp	r7, r2
   4c3f4:	blt	4c3d4 <GetDataSlab+0x20558>
   4c3f8:	ldr	r1, [fp, #12]
   4c3fc:	sub	r6, fp, #176	; 0xb0
   4c400:	ldr	r5, [r1]
   4c404:	ldr	r1, [fp, #8]
   4c408:	ldr	r1, [r1]
   4c40c:	b	4c41c <GetDataSlab+0x205a0>
   4c410:	mov	r5, r1
   4c414:	ldr	r1, [sp, #48]	; 0x30
   4c418:	sub	r6, fp, #176	; 0xb0
   4c41c:	str	r1, [sp, #48]	; 0x30
   4c420:	mls	r1, r4, r2, r1
   4c424:	str	r5, [sp, #52]	; 0x34
   4c428:	sub	r1, r1, r5
   4c42c:	add	r5, r1, r0
   4c430:	ldr	r0, [fp, #24]
   4c434:	add	sl, r3, r1, lsl #3
   4c438:	cmp	r0, #2
   4c43c:	blt	4c4ec <GetDataSlab+0x20670>
   4c440:	mov	r7, #0
   4c444:	ldr	r1, [r9, r7, lsl #2]
   4c448:	mov	r0, r7
   4c44c:	add	r1, r1, #1
   4c450:	str	r1, [r9, r7, lsl #2]
   4c454:	ldr	r3, [ip, r7, lsl #2]
   4c458:	sdiv	r7, r1, r3
   4c45c:	mls	r1, r7, r3, r1
   4c460:	cmp	r1, #0
   4c464:	bne	4c4dc <GetDataSlab+0x20660>
   4c468:	mov	r1, #0
   4c46c:	str	r1, [r9, r0, lsl #2]
   4c470:	add	r1, r6, r0, lsl #2
   4c474:	ldr	r7, [r1, #4]
   4c478:	sdiv	r1, r5, r7
   4c47c:	mls	r1, r1, r7, r5
   4c480:	cmp	r1, #0
   4c484:	beq	4c4a8 <GetDataSlab+0x2062c>
   4c488:	ldr	r3, [r6, r0, lsl #2]
   4c48c:	ldr	lr, [r8, r0, lsl #2]
   4c490:	sub	r1, r7, r1
   4c494:	sub	r6, fp, #176	; 0xb0
   4c498:	mla	r1, lr, r3, r1
   4c49c:	ldr	lr, [fp, #16]
   4c4a0:	add	r5, r1, r5
   4c4a4:	b	4c4c0 <GetDataSlab+0x20644>
   4c4a8:	ldr	r1, [r8, r0, lsl #2]
   4c4ac:	cmp	r1, #0
   4c4b0:	beq	4c4c4 <GetDataSlab+0x20648>
   4c4b4:	ldr	r3, [r6, r0, lsl #2]
   4c4b8:	mla	r5, r3, r1, r5
   4c4bc:	mul	r1, r3, r1
   4c4c0:	add	sl, sl, r1, lsl #3
   4c4c4:	ldr	r1, [fp, #24]
   4c4c8:	add	r7, r0, #1
   4c4cc:	add	r0, r0, #2
   4c4d0:	cmp	r0, r1
   4c4d4:	blt	4c444 <GetDataSlab+0x205c8>
   4c4d8:	b	4c4ec <GetDataSlab+0x20670>
   4c4dc:	ldr	r1, [sp, #44]	; 0x2c
   4c4e0:	ldr	r0, [r1, r0, lsl #2]
   4c4e4:	add	sl, sl, r0, lsl #3
   4c4e8:	add	r5, r0, r5
   4c4ec:	ldr	r3, [sp, #56]	; 0x38
   4c4f0:	ldr	r1, [sp, #60]	; 0x3c
   4c4f4:	mov	r0, #0
   4c4f8:	add	r3, r2, r3
   4c4fc:	cmp	r3, r1
   4c500:	str	r3, [sp, #56]	; 0x38
   4c504:	blt	4c3ac <GetDataSlab+0x20530>
   4c508:	b	2e97c <GetDataSlab+0x2b00>
   4c50c:	ldr	r0, [sp, #60]	; 0x3c
   4c510:	ldr	r3, [sp, #52]	; 0x34
   4c514:	cmp	r0, #1
   4c518:	blt	52494 <GetDataSlab+0x26618>
   4c51c:	ldr	r1, [sp, #64]	; 0x40
   4c520:	ldr	r0, [sp, #44]	; 0x2c
   4c524:	lsl	lr, r6, #3
   4c528:	mov	sl, #0
   4c52c:	ldr	r8, [r1], #4
   4c530:	mls	r0, r3, r6, r0
   4c534:	sub	r0, r0, r8
   4c538:	str	r1, [sp, #64]	; 0x40
   4c53c:	str	r0, [sp, #56]	; 0x38
   4c540:	ldr	r0, [fp, #20]
   4c544:	add	ip, r0, #4
   4c548:	sub	r0, fp, #136	; 0x88
   4c54c:	orr	r7, r0, #4
   4c550:	sub	r0, fp, #96	; 0x60
   4c554:	orr	r0, r0, #4
   4c558:	str	r0, [sp, #40]	; 0x28
   4c55c:	mla	r0, r3, r6, r8
   4c560:	str	r0, [sp, #44]	; 0x2c
   4c564:	lsl	r0, r3, #3
   4c568:	str	r0, [sp, #48]	; 0x30
   4c56c:	cmp	r3, #1
   4c570:	mov	r0, r8
   4c574:	blt	4c5a4 <GetDataSlab+0x20728>
   4c578:	ldr	r6, [sp, #68]	; 0x44
   4c57c:	mov	r4, r8
   4c580:	add	r8, r9, r8, lsl #3
   4c584:	ldrd	r0, [r8]
   4c588:	add	r8, r8, lr
   4c58c:	subs	r3, r3, #1
   4c590:	strd	r0, [r6]
   4c594:	add	r6, r6, #8
   4c598:	bne	4c584 <GetDataSlab+0x20708>
   4c59c:	ldr	r0, [sp, #44]	; 0x2c
   4c5a0:	mov	r8, r4
   4c5a4:	ldr	r3, [sp, #56]	; 0x38
   4c5a8:	add	r1, r9, r3, lsl #3
   4c5ac:	add	r9, r1, r0, lsl #3
   4c5b0:	add	r0, r0, r2
   4c5b4:	add	r2, r0, r3
   4c5b8:	ldr	r0, [fp, #24]
   4c5bc:	cmp	r0, #2
   4c5c0:	blt	4c674 <GetDataSlab+0x207f8>
   4c5c4:	ldr	r4, [sp, #64]	; 0x40
   4c5c8:	mov	r3, #0
   4c5cc:	ldr	r1, [r7, r3, lsl #2]
   4c5d0:	mov	r0, r3
   4c5d4:	add	r1, r1, #1
   4c5d8:	str	r1, [r7, r3, lsl #2]
   4c5dc:	ldr	r3, [ip, r3, lsl #2]
   4c5e0:	sdiv	r6, r1, r3
   4c5e4:	mls	r1, r6, r3, r1
   4c5e8:	cmp	r1, #0
   4c5ec:	bne	4c664 <GetDataSlab+0x207e8>
   4c5f0:	mov	r1, #0
   4c5f4:	sub	r5, fp, #176	; 0xb0
   4c5f8:	str	r1, [r7, r0, lsl #2]
   4c5fc:	add	r1, r5, r0, lsl #2
   4c600:	ldr	r3, [r1, #4]
   4c604:	sdiv	r1, r2, r3
   4c608:	mls	r6, r1, r3, r2
   4c60c:	cmp	r6, #0
   4c610:	beq	4c62c <GetDataSlab+0x207b0>
   4c614:	ldr	r1, [r5, r0, lsl #2]
   4c618:	ldr	r5, [r4, r0, lsl #2]
   4c61c:	sub	r3, r3, r6
   4c620:	mla	r1, r5, r1, r3
   4c624:	add	r2, r1, r2
   4c628:	b	4c648 <GetDataSlab+0x207cc>
   4c62c:	ldr	r3, [r4, r0, lsl #2]
   4c630:	cmp	r3, #0
   4c634:	beq	4c64c <GetDataSlab+0x207d0>
   4c638:	sub	r1, fp, #176	; 0xb0
   4c63c:	ldr	r1, [r1, r0, lsl #2]
   4c640:	mla	r2, r1, r3, r2
   4c644:	mul	r1, r1, r3
   4c648:	add	r9, r9, r1, lsl #3
   4c64c:	ldr	r1, [fp, #24]
   4c650:	add	r3, r0, #1
   4c654:	add	r0, r0, #2
   4c658:	cmp	r0, r1
   4c65c:	blt	4c5cc <GetDataSlab+0x20750>
   4c660:	b	4c674 <GetDataSlab+0x207f8>
   4c664:	ldr	r1, [sp, #40]	; 0x28
   4c668:	ldr	r0, [r1, r0, lsl #2]
   4c66c:	add	r9, r9, r0, lsl #3
   4c670:	add	r2, r0, r2
   4c674:	ldr	r0, [sp, #68]	; 0x44
   4c678:	ldr	r1, [sp, #48]	; 0x30
   4c67c:	ldr	r3, [sp, #52]	; 0x34
   4c680:	add	r0, r0, r1
   4c684:	ldr	r1, [sp, #60]	; 0x3c
   4c688:	add	sl, sl, r3
   4c68c:	str	r0, [sp, #68]	; 0x44
   4c690:	mov	r0, #0
   4c694:	cmp	sl, r1
   4c698:	blt	4c56c <GetDataSlab+0x206f0>
   4c69c:	b	2e97c <GetDataSlab+0x2b00>
   4c6a0:	ldr	r0, [sp, #60]	; 0x3c
   4c6a4:	ldr	r1, [fp, #12]
   4c6a8:	cmp	r0, #1
   4c6ac:	blt	524a8 <GetDataSlab+0x2662c>
   4c6b0:	ldr	r3, [sp, #52]	; 0x34
   4c6b4:	ldr	r0, [sp, #44]	; 0x2c
   4c6b8:	ldr	r8, [r1], #4
   4c6bc:	lsl	lr, r6, #3
   4c6c0:	mov	sl, #0
   4c6c4:	mls	r0, r3, r6, r0
   4c6c8:	str	r1, [sp, #64]	; 0x40
   4c6cc:	mov	r1, r3
   4c6d0:	sub	r0, r0, r8
   4c6d4:	str	r0, [sp, #56]	; 0x38
   4c6d8:	ldr	r0, [fp, #20]
   4c6dc:	add	ip, r0, #4
   4c6e0:	sub	r0, fp, #136	; 0x88
   4c6e4:	orr	r7, r0, #4
   4c6e8:	sub	r0, fp, #96	; 0x60
   4c6ec:	orr	r0, r0, #4
   4c6f0:	str	r0, [sp, #40]	; 0x28
   4c6f4:	mla	r0, r3, r6, r8
   4c6f8:	str	r0, [sp, #44]	; 0x2c
   4c6fc:	lsl	r0, r3, #3
   4c700:	str	r0, [sp, #48]	; 0x30
   4c704:	cmp	r1, #1
   4c708:	mov	r0, r8
   4c70c:	blt	4c740 <GetDataSlab+0x208c4>
   4c710:	ldr	r3, [sp, #52]	; 0x34
   4c714:	ldr	r6, [sp, #68]	; 0x44
   4c718:	mov	r4, r8
   4c71c:	add	r8, r9, r8, lsl #3
   4c720:	ldrd	r0, [r8]
   4c724:	add	r8, r8, lr
   4c728:	subs	r3, r3, #1
   4c72c:	strd	r0, [r6]
   4c730:	add	r6, r6, #8
   4c734:	bne	4c720 <GetDataSlab+0x208a4>
   4c738:	ldr	r0, [sp, #44]	; 0x2c
   4c73c:	mov	r8, r4
   4c740:	ldr	r3, [sp, #56]	; 0x38
   4c744:	add	r1, r9, r3, lsl #3
   4c748:	add	r9, r1, r0, lsl #3
   4c74c:	add	r0, r0, r2
   4c750:	add	r2, r0, r3
   4c754:	ldr	r0, [fp, #24]
   4c758:	cmp	r0, #2
   4c75c:	blt	4c810 <GetDataSlab+0x20994>
   4c760:	ldr	r4, [sp, #64]	; 0x40
   4c764:	mov	r3, #0
   4c768:	ldr	r1, [r7, r3, lsl #2]
   4c76c:	mov	r0, r3
   4c770:	add	r1, r1, #1
   4c774:	str	r1, [r7, r3, lsl #2]
   4c778:	ldr	r3, [ip, r3, lsl #2]
   4c77c:	sdiv	r6, r1, r3
   4c780:	mls	r1, r6, r3, r1
   4c784:	cmp	r1, #0
   4c788:	bne	4c800 <GetDataSlab+0x20984>
   4c78c:	mov	r1, #0
   4c790:	sub	r5, fp, #176	; 0xb0
   4c794:	str	r1, [r7, r0, lsl #2]
   4c798:	add	r1, r5, r0, lsl #2
   4c79c:	ldr	r3, [r1, #4]
   4c7a0:	sdiv	r1, r2, r3
   4c7a4:	mls	r6, r1, r3, r2
   4c7a8:	cmp	r6, #0
   4c7ac:	beq	4c7c8 <GetDataSlab+0x2094c>
   4c7b0:	ldr	r1, [r5, r0, lsl #2]
   4c7b4:	ldr	r5, [r4, r0, lsl #2]
   4c7b8:	sub	r3, r3, r6
   4c7bc:	mla	r1, r5, r1, r3
   4c7c0:	add	r2, r1, r2
   4c7c4:	b	4c7e4 <GetDataSlab+0x20968>
   4c7c8:	ldr	r3, [r4, r0, lsl #2]
   4c7cc:	cmp	r3, #0
   4c7d0:	beq	4c7e8 <GetDataSlab+0x2096c>
   4c7d4:	sub	r1, fp, #176	; 0xb0
   4c7d8:	ldr	r1, [r1, r0, lsl #2]
   4c7dc:	mla	r2, r1, r3, r2
   4c7e0:	mul	r1, r1, r3
   4c7e4:	add	r9, r9, r1, lsl #3
   4c7e8:	ldr	r1, [fp, #24]
   4c7ec:	add	r3, r0, #1
   4c7f0:	add	r0, r0, #2
   4c7f4:	cmp	r0, r1
   4c7f8:	blt	4c768 <GetDataSlab+0x208ec>
   4c7fc:	b	4c810 <GetDataSlab+0x20994>
   4c800:	ldr	r1, [sp, #40]	; 0x28
   4c804:	ldr	r0, [r1, r0, lsl #2]
   4c808:	add	r9, r9, r0, lsl #3
   4c80c:	add	r2, r0, r2
   4c810:	ldr	r0, [sp, #68]	; 0x44
   4c814:	ldr	r1, [sp, #48]	; 0x30
   4c818:	ldr	r3, [sp, #60]	; 0x3c
   4c81c:	add	r0, r0, r1
   4c820:	ldr	r1, [sp, #52]	; 0x34
   4c824:	str	r0, [sp, #68]	; 0x44
   4c828:	mov	r0, #0
   4c82c:	add	sl, sl, r1
   4c830:	cmp	sl, r3
   4c834:	blt	4c704 <GetDataSlab+0x20888>
   4c838:	b	2e97c <GetDataSlab+0x2b00>
   4c83c:	ldr	r1, [sp, #52]	; 0x34
   4c840:	mov	r0, #0
   4c844:	cmp	r1, #1
   4c848:	ldrge	r1, [sp, #60]	; 0x3c
   4c84c:	cmpge	r1, #1
   4c850:	blt	2e97c <GetDataSlab+0x2b00>
   4c854:	ldr	r0, [sp, #48]	; 0x30
   4c858:	ldr	r2, [sp, #28]
   4c85c:	ldr	r3, [sp, #24]
   4c860:	ldr	lr, [sp, #68]	; 0x44
   4c864:	ldr	r7, [sp, #56]	; 0x38
   4c868:	mov	r6, #0
   4c86c:	add	r4, sp, #84	; 0x54
   4c870:	mul	r0, r0, ip
   4c874:	mla	r1, r2, ip, r3
   4c878:	str	r0, [sp, #48]	; 0x30
   4c87c:	ldr	r0, [sp, #56]	; 0x38
   4c880:	str	r1, [sp, #32]
   4c884:	add	r8, r0, r1
   4c888:	ldr	r0, [sp, #60]	; 0x3c
   4c88c:	mov	r1, r0
   4c890:	add	r0, r0, r3
   4c894:	mla	r0, r2, ip, r0
   4c898:	cmp	r1, #1
   4c89c:	mov	r2, #0
   4c8a0:	str	r0, [sp, #40]	; 0x28
   4c8a4:	sub	r0, r9, #1
   4c8a8:	movwhi	r2, #1
   4c8ac:	clz	r0, r0
   4c8b0:	lsr	r0, r0, #5
   4c8b4:	and	r0, r2, r0
   4c8b8:	lsl	r2, r9, #1
   4c8bc:	str	r0, [sp, #44]	; 0x2c
   4c8c0:	lsl	r0, r1, #3
   4c8c4:	str	r0, [sp, #64]	; 0x40
   4c8c8:	bic	r0, r1, #1
   4c8cc:	str	r0, [sp, #36]	; 0x24
   4c8d0:	ldr	r0, [sp, #44]	; 0x2c
   4c8d4:	mov	r5, #0
   4c8d8:	cmp	r0, #0
   4c8dc:	mov	r0, lr
   4c8e0:	beq	4c988 <GetDataSlab+0x20b0c>
   4c8e4:	ldr	r1, [sp, #64]	; 0x40
   4c8e8:	ldr	r0, [sp, #48]	; 0x30
   4c8ec:	mul	r3, r1, r6
   4c8f0:	ldr	r1, [sp, #68]	; 0x44
   4c8f4:	mul	r0, r0, r6
   4c8f8:	add	r5, r1, r3
   4c8fc:	ldr	r1, [sp, #40]	; 0x28
   4c900:	add	r1, r1, r0
   4c904:	add	r1, r7, r1
   4c908:	cmp	r5, r1
   4c90c:	bcs	4c940 <GetDataSlab+0x20ac4>
   4c910:	ldr	r1, [sp, #64]	; 0x40
   4c914:	mov	r5, #0
   4c918:	add	r1, r1, r3
   4c91c:	ldr	r3, [sp, #68]	; 0x44
   4c920:	add	r1, r3, r1
   4c924:	ldr	r3, [sp, #32]
   4c928:	add	r0, r3, r0
   4c92c:	ldr	r3, [sp, #56]	; 0x38
   4c930:	add	r0, r3, r0
   4c934:	cmp	r0, r1
   4c938:	mov	r0, lr
   4c93c:	bcc	4c988 <GetDataSlab+0x20b0c>
   4c940:	ldr	sl, [sp, #36]	; 0x24
   4c944:	mov	r3, r8
   4c948:	mov	ip, lr
   4c94c:	add	r0, lr, sl, lsl #3
   4c950:	ldrh	r1, [r3], r2
   4c954:	subs	sl, sl, #2
   4c958:	strh	r1, [sp, #84]	; 0x54
   4c95c:	vld1.16	{d16[0]}, [r4 :16]
   4c960:	vmovl.u8	q8, d16
   4c964:	vmovl.u16	q0, d16
   4c968:	vcvt.f64.u32	d17, s1
   4c96c:	vcvt.f64.u32	d16, s0
   4c970:	vst1.64	{d16-d17}, [ip]!
   4c974:	bne	4c950 <GetDataSlab+0x20ad4>
   4c978:	ldr	r1, [sp, #60]	; 0x3c
   4c97c:	ldr	r5, [sp, #36]	; 0x24
   4c980:	cmp	r1, r5
   4c984:	beq	4c9b0 <GetDataSlab+0x20b34>
   4c988:	ldr	r1, [sp, #60]	; 0x3c
   4c98c:	mla	r3, r9, r5, r8
   4c990:	sub	r5, r1, r5
   4c994:	ldrb	r1, [r3], r9
   4c998:	subs	r5, r5, #1
   4c99c:	vmov	s0, r1
   4c9a0:	vcvt.f64.u32	d16, s0
   4c9a4:	vstr	d16, [r0]
   4c9a8:	add	r0, r0, #8
   4c9ac:	bne	4c994 <GetDataSlab+0x20b18>
   4c9b0:	ldr	r0, [sp, #48]	; 0x30
   4c9b4:	ldr	r1, [sp, #52]	; 0x34
   4c9b8:	add	r6, r6, #1
   4c9bc:	add	r8, r8, r0
   4c9c0:	ldr	r0, [sp, #64]	; 0x40
   4c9c4:	cmp	r6, r1
   4c9c8:	add	lr, lr, r0
   4c9cc:	mov	r0, #0
   4c9d0:	bne	4c8d0 <GetDataSlab+0x20a54>
   4c9d4:	b	2e97c <GetDataSlab+0x2b00>
   4c9d8:	ldr	r1, [sp, #52]	; 0x34
   4c9dc:	mov	r0, #0
   4c9e0:	cmp	r1, #1
   4c9e4:	ldrge	r1, [sp, #60]	; 0x3c
   4c9e8:	cmpge	r1, #1
   4c9ec:	blt	2e97c <GetDataSlab+0x2b00>
   4c9f0:	ldr	r0, [sp, #28]
   4c9f4:	ldr	r1, [sp, #24]
   4c9f8:	mov	sl, #0
   4c9fc:	lsl	r6, r9, #1
   4ca00:	lsl	r4, r9, #2
   4ca04:	mla	r0, r0, ip, r1
   4ca08:	ldr	r1, [sp, #56]	; 0x38
   4ca0c:	add	r2, r1, r0, lsl #1
   4ca10:	ldr	r0, [sp, #60]	; 0x3c
   4ca14:	sub	r1, r9, #1
   4ca18:	clz	r1, r1
   4ca1c:	lsr	r1, r1, #5
   4ca20:	mov	r3, r0
   4ca24:	cmp	r0, #1
   4ca28:	mov	r0, #0
   4ca2c:	movwhi	r0, #1
   4ca30:	lsl	r8, r3, #3
   4ca34:	bic	r9, r3, #1
   4ca38:	add	r3, sp, #72	; 0x48
   4ca3c:	and	r0, r0, r1
   4ca40:	str	r0, [sp, #64]	; 0x40
   4ca44:	ldr	r0, [sp, #48]	; 0x30
   4ca48:	mul	r0, r0, ip
   4ca4c:	lsl	lr, r0, #1
   4ca50:	ldr	r0, [sp, #64]	; 0x40
   4ca54:	ldr	ip, [sp, #68]	; 0x44
   4ca58:	mov	r7, #0
   4ca5c:	cmp	r0, #0
   4ca60:	mov	r0, ip
   4ca64:	beq	4caac <GetDataSlab+0x20c30>
   4ca68:	add	r0, ip, r9, lsl #3
   4ca6c:	mov	r7, r9
   4ca70:	mov	r1, r2
   4ca74:	ldr	r5, [r1], r4
   4ca78:	subs	r7, r7, #2
   4ca7c:	str	r5, [sp, #72]	; 0x48
   4ca80:	vld1.32	{d16[0]}, [r3 :32]
   4ca84:	vmovl.s16	q0, d16
   4ca88:	vcvt.f64.s32	d17, s1
   4ca8c:	vcvt.f64.s32	d16, s0
   4ca90:	vst1.64	{d16-d17}, [ip]!
   4ca94:	bne	4ca74 <GetDataSlab+0x20bf8>
   4ca98:	ldr	r1, [sp, #60]	; 0x3c
   4ca9c:	ldr	ip, [sp, #68]	; 0x44
   4caa0:	mov	r7, r9
   4caa4:	cmp	r1, r9
   4caa8:	beq	4cad4 <GetDataSlab+0x20c58>
   4caac:	ldr	r5, [sp, #60]	; 0x3c
   4cab0:	mla	r1, r6, r7, r2
   4cab4:	sub	r7, r5, r7
   4cab8:	ldrsh	r5, [r1], r6
   4cabc:	subs	r7, r7, #1
   4cac0:	vmov	s0, r5
   4cac4:	vcvt.f64.s32	d16, s0
   4cac8:	vstr	d16, [r0]
   4cacc:	add	r0, r0, #8
   4cad0:	bne	4cab8 <GetDataSlab+0x20c3c>
   4cad4:	ldr	r1, [sp, #52]	; 0x34
   4cad8:	add	sl, sl, #1
   4cadc:	add	ip, ip, r8
   4cae0:	add	r2, r2, lr
   4cae4:	mov	r0, #0
   4cae8:	str	ip, [sp, #68]	; 0x44
   4caec:	cmp	sl, r1
   4caf0:	bne	4ca50 <GetDataSlab+0x20bd4>
   4caf4:	b	2e97c <GetDataSlab+0x2b00>
   4caf8:	ldr	r1, [sp, #52]	; 0x34
   4cafc:	mov	r0, #0
   4cb00:	cmp	r1, #1
   4cb04:	ldrge	r1, [sp, #60]	; 0x3c
   4cb08:	cmpge	r1, #1
   4cb0c:	blt	2e97c <GetDataSlab+0x2b00>
   4cb10:	ldr	r0, [sp, #28]
   4cb14:	ldr	r1, [sp, #24]
   4cb18:	mov	sl, #0
   4cb1c:	lsl	r6, r9, #1
   4cb20:	lsl	r4, r9, #2
   4cb24:	mla	r0, r0, ip, r1
   4cb28:	ldr	r1, [sp, #56]	; 0x38
   4cb2c:	add	r2, r1, r0, lsl #1
   4cb30:	ldr	r0, [sp, #60]	; 0x3c
   4cb34:	sub	r1, r9, #1
   4cb38:	clz	r1, r1
   4cb3c:	lsr	r1, r1, #5
   4cb40:	mov	r3, r0
   4cb44:	cmp	r0, #1
   4cb48:	mov	r0, #0
   4cb4c:	movwhi	r0, #1
   4cb50:	lsl	r8, r3, #3
   4cb54:	bic	r9, r3, #1
   4cb58:	add	r3, sp, #76	; 0x4c
   4cb5c:	and	r0, r0, r1
   4cb60:	str	r0, [sp, #64]	; 0x40
   4cb64:	ldr	r0, [sp, #48]	; 0x30
   4cb68:	mul	r0, r0, ip
   4cb6c:	lsl	lr, r0, #1
   4cb70:	ldr	r0, [sp, #64]	; 0x40
   4cb74:	ldr	ip, [sp, #68]	; 0x44
   4cb78:	mov	r7, #0
   4cb7c:	cmp	r0, #0
   4cb80:	mov	r0, ip
   4cb84:	beq	4cbcc <GetDataSlab+0x20d50>
   4cb88:	add	r0, ip, r9, lsl #3
   4cb8c:	mov	r7, r9
   4cb90:	mov	r1, r2
   4cb94:	ldr	r5, [r1], r4
   4cb98:	subs	r7, r7, #2
   4cb9c:	str	r5, [sp, #76]	; 0x4c
   4cba0:	vld1.32	{d16[0]}, [r3 :32]
   4cba4:	vmovl.u16	q0, d16
   4cba8:	vcvt.f64.u32	d17, s1
   4cbac:	vcvt.f64.u32	d16, s0
   4cbb0:	vst1.64	{d16-d17}, [ip]!
   4cbb4:	bne	4cb94 <GetDataSlab+0x20d18>
   4cbb8:	ldr	r1, [sp, #60]	; 0x3c
   4cbbc:	ldr	ip, [sp, #68]	; 0x44
   4cbc0:	mov	r7, r9
   4cbc4:	cmp	r1, r9
   4cbc8:	beq	4cbf4 <GetDataSlab+0x20d78>
   4cbcc:	ldr	r5, [sp, #60]	; 0x3c
   4cbd0:	mla	r1, r6, r7, r2
   4cbd4:	sub	r7, r5, r7
   4cbd8:	ldrh	r5, [r1], r6
   4cbdc:	subs	r7, r7, #1
   4cbe0:	vmov	s0, r5
   4cbe4:	vcvt.f64.u32	d16, s0
   4cbe8:	vstr	d16, [r0]
   4cbec:	add	r0, r0, #8
   4cbf0:	bne	4cbd8 <GetDataSlab+0x20d5c>
   4cbf4:	ldr	r1, [sp, #52]	; 0x34
   4cbf8:	add	sl, sl, #1
   4cbfc:	add	ip, ip, r8
   4cc00:	add	r2, r2, lr
   4cc04:	mov	r0, #0
   4cc08:	str	ip, [sp, #68]	; 0x44
   4cc0c:	cmp	sl, r1
   4cc10:	bne	4cb70 <GetDataSlab+0x20cf4>
   4cc14:	b	2e97c <GetDataSlab+0x2b00>
   4cc18:	ldr	r1, [sp, #52]	; 0x34
   4cc1c:	mov	r0, #0
   4cc20:	cmp	r1, #1
   4cc24:	ldrge	r1, [sp, #60]	; 0x3c
   4cc28:	cmpge	r1, #1
   4cc2c:	blt	2e97c <GetDataSlab+0x2b00>
   4cc30:	ldr	r0, [sp, #28]
   4cc34:	ldr	r1, [sp, #24]
   4cc38:	mov	r7, ip
   4cc3c:	mov	r2, #0
   4cc40:	lsl	r6, r9, #2
   4cc44:	lsl	r4, r9, #3
   4cc48:	mla	r0, r0, ip, r1
   4cc4c:	ldr	r1, [sp, #56]	; 0x38
   4cc50:	add	r3, r1, r0, lsl #2
   4cc54:	ldr	r0, [sp, #60]	; 0x3c
   4cc58:	sub	r1, r9, #1
   4cc5c:	clz	r1, r1
   4cc60:	lsr	r1, r1, #5
   4cc64:	mov	r5, r0
   4cc68:	cmp	r0, #1
   4cc6c:	mov	r0, #0
   4cc70:	movwhi	r0, #1
   4cc74:	lsl	r8, r5, #3
   4cc78:	bic	r9, r5, #1
   4cc7c:	and	ip, r0, r1
   4cc80:	ldr	r0, [sp, #48]	; 0x30
   4cc84:	mul	r0, r0, r7
   4cc88:	lsl	lr, r0, #2
   4cc8c:	ldr	r0, [sp, #68]	; 0x44
   4cc90:	cmp	ip, #0
   4cc94:	mov	r5, #0
   4cc98:	beq	4ccd4 <GetDataSlab+0x20e58>
   4cc9c:	ldr	r7, [sp, #68]	; 0x44
   4cca0:	mov	r5, r9
   4cca4:	mov	r1, r3
   4cca8:	add	r0, r7, r9, lsl #3
   4ccac:	vld1.32	{d0}, [r1], r4
   4ccb0:	subs	r5, r5, #2
   4ccb4:	vcvt.f64.s32	d17, s1
   4ccb8:	vcvt.f64.s32	d16, s0
   4ccbc:	vst1.64	{d16-d17}, [r7]!
   4ccc0:	bne	4ccac <GetDataSlab+0x20e30>
   4ccc4:	ldr	r1, [sp, #60]	; 0x3c
   4ccc8:	mov	r5, r9
   4cccc:	cmp	r1, r9
   4ccd0:	beq	4ccfc <GetDataSlab+0x20e80>
   4ccd4:	ldr	r7, [sp, #60]	; 0x3c
   4ccd8:	mla	r1, r6, r5, r3
   4ccdc:	sub	r5, r7, r5
   4cce0:	ldr	r7, [r1], r6
   4cce4:	subs	r5, r5, #1
   4cce8:	vmov	s0, r7
   4ccec:	vcvt.f64.s32	d16, s0
   4ccf0:	vstr	d16, [r0]
   4ccf4:	add	r0, r0, #8
   4ccf8:	bne	4cce0 <GetDataSlab+0x20e64>
   4ccfc:	ldr	r0, [sp, #68]	; 0x44
   4cd00:	ldr	r1, [sp, #52]	; 0x34
   4cd04:	add	r2, r2, #1
   4cd08:	add	r3, r3, lr
   4cd0c:	add	r0, r0, r8
   4cd10:	cmp	r2, r1
   4cd14:	str	r0, [sp, #68]	; 0x44
   4cd18:	mov	r0, #0
   4cd1c:	bne	4cc8c <GetDataSlab+0x20e10>
   4cd20:	b	2e97c <GetDataSlab+0x2b00>
   4cd24:	ldr	r1, [sp, #52]	; 0x34
   4cd28:	mov	r0, #0
   4cd2c:	cmp	r1, #1
   4cd30:	ldrge	r1, [sp, #60]	; 0x3c
   4cd34:	cmpge	r1, #1
   4cd38:	blt	2e97c <GetDataSlab+0x2b00>
   4cd3c:	ldr	r0, [sp, #28]
   4cd40:	ldr	r1, [sp, #24]
   4cd44:	mov	r7, ip
   4cd48:	mov	r2, #0
   4cd4c:	lsl	r6, r9, #2
   4cd50:	lsl	r4, r9, #3
   4cd54:	mla	r0, r0, ip, r1
   4cd58:	ldr	r1, [sp, #56]	; 0x38
   4cd5c:	add	r3, r1, r0, lsl #2
   4cd60:	ldr	r0, [sp, #60]	; 0x3c
   4cd64:	sub	r1, r9, #1
   4cd68:	clz	r1, r1
   4cd6c:	lsr	r1, r1, #5
   4cd70:	mov	r5, r0
   4cd74:	cmp	r0, #1
   4cd78:	mov	r0, #0
   4cd7c:	movwhi	r0, #1
   4cd80:	lsl	r8, r5, #3
   4cd84:	bic	r9, r5, #1
   4cd88:	and	ip, r0, r1
   4cd8c:	ldr	r0, [sp, #48]	; 0x30
   4cd90:	mul	r0, r0, r7
   4cd94:	lsl	lr, r0, #2
   4cd98:	ldr	r0, [sp, #68]	; 0x44
   4cd9c:	cmp	ip, #0
   4cda0:	mov	r5, #0
   4cda4:	beq	4cde0 <GetDataSlab+0x20f64>
   4cda8:	ldr	r7, [sp, #68]	; 0x44
   4cdac:	mov	r5, r9
   4cdb0:	mov	r1, r3
   4cdb4:	add	r0, r7, r9, lsl #3
   4cdb8:	vld1.32	{d0}, [r1], r4
   4cdbc:	subs	r5, r5, #2
   4cdc0:	vcvt.f64.u32	d17, s1
   4cdc4:	vcvt.f64.u32	d16, s0
   4cdc8:	vst1.64	{d16-d17}, [r7]!
   4cdcc:	bne	4cdb8 <GetDataSlab+0x20f3c>
   4cdd0:	ldr	r1, [sp, #60]	; 0x3c
   4cdd4:	mov	r5, r9
   4cdd8:	cmp	r1, r9
   4cddc:	beq	4ce08 <GetDataSlab+0x20f8c>
   4cde0:	ldr	r7, [sp, #60]	; 0x3c
   4cde4:	mla	r1, r6, r5, r3
   4cde8:	sub	r5, r7, r5
   4cdec:	ldr	r7, [r1], r6
   4cdf0:	subs	r5, r5, #1
   4cdf4:	vmov	s0, r7
   4cdf8:	vcvt.f64.u32	d16, s0
   4cdfc:	vstr	d16, [r0]
   4ce00:	add	r0, r0, #8
   4ce04:	bne	4cdec <GetDataSlab+0x20f70>
   4ce08:	ldr	r0, [sp, #68]	; 0x44
   4ce0c:	ldr	r1, [sp, #52]	; 0x34
   4ce10:	add	r2, r2, #1
   4ce14:	add	r3, r3, lr
   4ce18:	add	r0, r0, r8
   4ce1c:	cmp	r2, r1
   4ce20:	str	r0, [sp, #68]	; 0x44
   4ce24:	mov	r0, #0
   4ce28:	bne	4cd98 <GetDataSlab+0x20f1c>
   4ce2c:	b	2e97c <GetDataSlab+0x2b00>
   4ce30:	ldr	r1, [sp, #52]	; 0x34
   4ce34:	mov	r0, #0
   4ce38:	cmp	r1, #1
   4ce3c:	ldrge	r1, [sp, #60]	; 0x3c
   4ce40:	cmpge	r1, #1
   4ce44:	blt	2e97c <GetDataSlab+0x2b00>
   4ce48:	ldr	r0, [sp, #28]
   4ce4c:	ldr	r1, [sp, #24]
   4ce50:	mov	r7, ip
   4ce54:	mov	r2, #0
   4ce58:	lsl	r6, r9, #2
   4ce5c:	lsl	r4, r9, #3
   4ce60:	mla	r0, r0, ip, r1
   4ce64:	ldr	r1, [sp, #56]	; 0x38
   4ce68:	add	r3, r1, r0, lsl #2
   4ce6c:	ldr	r0, [sp, #60]	; 0x3c
   4ce70:	sub	r1, r9, #1
   4ce74:	clz	r1, r1
   4ce78:	lsr	r1, r1, #5
   4ce7c:	mov	r5, r0
   4ce80:	cmp	r0, #1
   4ce84:	mov	r0, #0
   4ce88:	movwhi	r0, #1
   4ce8c:	lsl	r8, r5, #3
   4ce90:	bic	r9, r5, #1
   4ce94:	and	ip, r0, r1
   4ce98:	ldr	r0, [sp, #48]	; 0x30
   4ce9c:	mul	r0, r0, r7
   4cea0:	lsl	lr, r0, #2
   4cea4:	ldr	r0, [sp, #68]	; 0x44
   4cea8:	cmp	ip, #0
   4ceac:	mov	r5, #0
   4ceb0:	beq	4ceec <GetDataSlab+0x21070>
   4ceb4:	ldr	r7, [sp, #68]	; 0x44
   4ceb8:	mov	r5, r9
   4cebc:	mov	r1, r3
   4cec0:	add	r0, r7, r9, lsl #3
   4cec4:	vld1.32	{d0}, [r1], r4
   4cec8:	subs	r5, r5, #2
   4cecc:	vcvt.f64.f32	d17, s1
   4ced0:	vcvt.f64.f32	d16, s0
   4ced4:	vst1.64	{d16-d17}, [r7]!
   4ced8:	bne	4cec4 <GetDataSlab+0x21048>
   4cedc:	ldr	r1, [sp, #60]	; 0x3c
   4cee0:	mov	r5, r9
   4cee4:	cmp	r1, r9
   4cee8:	beq	4cf14 <GetDataSlab+0x21098>
   4ceec:	ldr	r7, [sp, #60]	; 0x3c
   4cef0:	mla	r1, r6, r5, r3
   4cef4:	sub	r5, r7, r5
   4cef8:	vldr	s0, [r1]
   4cefc:	add	r1, r1, r6
   4cf00:	subs	r5, r5, #1
   4cf04:	vcvt.f64.f32	d16, s0
   4cf08:	vstr	d16, [r0]
   4cf0c:	add	r0, r0, #8
   4cf10:	bne	4cef8 <GetDataSlab+0x2107c>
   4cf14:	ldr	r0, [sp, #68]	; 0x44
   4cf18:	ldr	r1, [sp, #52]	; 0x34
   4cf1c:	add	r2, r2, #1
   4cf20:	add	r3, r3, lr
   4cf24:	add	r0, r0, r8
   4cf28:	cmp	r2, r1
   4cf2c:	str	r0, [sp, #68]	; 0x44
   4cf30:	mov	r0, #0
   4cf34:	bne	4cea4 <GetDataSlab+0x21028>
   4cf38:	b	2e97c <GetDataSlab+0x2b00>
   4cf3c:	ldr	r1, [sp, #52]	; 0x34
   4cf40:	mov	r0, #0
   4cf44:	cmp	r1, #1
   4cf48:	ldrge	r1, [sp, #60]	; 0x3c
   4cf4c:	cmpge	r1, #1
   4cf50:	blt	2e97c <GetDataSlab+0x2b00>
   4cf54:	ldr	r0, [sp, #28]
   4cf58:	ldr	r1, [sp, #24]
   4cf5c:	ldr	r8, [sp, #68]	; 0x44
   4cf60:	mov	r3, #0
   4cf64:	lsl	r4, r9, #3
   4cf68:	lsl	r2, r9, #4
   4cf6c:	mla	r0, r0, ip, r1
   4cf70:	ldr	r1, [sp, #56]	; 0x38
   4cf74:	lsl	r5, r0, #3
   4cf78:	str	r5, [sp, #40]	; 0x28
   4cf7c:	add	lr, r1, r0, lsl #3
   4cf80:	ldr	r1, [sp, #60]	; 0x3c
   4cf84:	sub	r0, r9, #1
   4cf88:	clz	r0, r0
   4cf8c:	lsr	r0, r0, #5
   4cf90:	mov	r7, r1
   4cf94:	cmp	r1, #1
   4cf98:	mov	r1, #0
   4cf9c:	movwhi	r1, #1
   4cfa0:	lsl	r9, r7, #3
   4cfa4:	and	r0, r1, r0
   4cfa8:	str	r0, [sp, #64]	; 0x40
   4cfac:	ldr	r0, [sp, #48]	; 0x30
   4cfb0:	mul	r0, r0, ip
   4cfb4:	lsl	sl, r0, #3
   4cfb8:	add	r0, r5, r7, lsl #3
   4cfbc:	str	r0, [sp, #48]	; 0x30
   4cfc0:	bic	r0, r7, #1
   4cfc4:	str	r0, [sp, #44]	; 0x2c
   4cfc8:	ldr	r0, [sp, #64]	; 0x40
   4cfcc:	mov	r1, #0
   4cfd0:	cmp	r0, #0
   4cfd4:	mov	r0, r8
   4cfd8:	beq	4d064 <GetDataSlab+0x211e8>
   4cfdc:	ldr	r7, [sp, #48]	; 0x30
   4cfe0:	mul	r0, sl, r3
   4cfe4:	ldr	r6, [sp, #68]	; 0x44
   4cfe8:	mul	r1, r9, r3
   4cfec:	add	r5, r7, r0
   4cff0:	ldr	r7, [sp, #56]	; 0x38
   4cff4:	add	r6, r6, r1
   4cff8:	add	r5, r7, r5
   4cffc:	cmp	r6, r5
   4d000:	bcs	4d030 <GetDataSlab+0x211b4>
   4d004:	ldr	r6, [sp, #68]	; 0x44
   4d008:	add	r1, r9, r1
   4d00c:	ldr	r7, [sp, #40]	; 0x28
   4d010:	add	r1, r6, r1
   4d014:	ldr	r6, [sp, #56]	; 0x38
   4d018:	add	r0, r7, r0
   4d01c:	add	r0, r6, r0
   4d020:	cmp	r0, r1
   4d024:	mov	r1, #0
   4d028:	mov	r0, r8
   4d02c:	bcc	4d064 <GetDataSlab+0x211e8>
   4d030:	ldr	r5, [sp, #44]	; 0x2c
   4d034:	mov	r1, lr
   4d038:	mov	r6, r8
   4d03c:	add	r0, r8, r5, lsl #3
   4d040:	vld1.64	{d16-d17}, [r1], r2
   4d044:	subs	r5, r5, #2
   4d048:	vst1.64	{d16-d17}, [r6]!
   4d04c:	bne	4d040 <GetDataSlab+0x211c4>
   4d050:	ldr	r1, [sp, #60]	; 0x3c
   4d054:	ldr	r7, [sp, #44]	; 0x2c
   4d058:	cmp	r1, r7
   4d05c:	mov	r1, r7
   4d060:	beq	4d088 <GetDataSlab+0x2120c>
   4d064:	ldr	r7, [sp, #60]	; 0x3c
   4d068:	mla	r5, r4, r1, lr
   4d06c:	sub	ip, r7, r1
   4d070:	vldr	d16, [r5]
   4d074:	add	r5, r5, r4
   4d078:	subs	ip, ip, #1
   4d07c:	vstr	d16, [r0]
   4d080:	add	r0, r0, #8
   4d084:	bne	4d070 <GetDataSlab+0x211f4>
   4d088:	ldr	r1, [sp, #52]	; 0x34
   4d08c:	add	r3, r3, #1
   4d090:	add	lr, lr, sl
   4d094:	add	r8, r8, r9
   4d098:	mov	r0, #0
   4d09c:	cmp	r3, r1
   4d0a0:	bne	4cfc8 <GetDataSlab+0x2114c>
   4d0a4:	b	2e97c <GetDataSlab+0x2b00>
   4d0a8:	ldr	r1, [sp, #52]	; 0x34
   4d0ac:	mov	r0, #0
   4d0b0:	cmp	r1, #1
   4d0b4:	ldrge	r1, [sp, #60]	; 0x3c
   4d0b8:	cmpge	r1, #1
   4d0bc:	blt	2e97c <GetDataSlab+0x2b00>
   4d0c0:	ldr	r0, [sp, #28]
   4d0c4:	ldr	r1, [sp, #24]
   4d0c8:	ldr	r2, [sp, #60]	; 0x3c
   4d0cc:	ldr	r6, [sp, #68]	; 0x44
   4d0d0:	mov	r8, #0
   4d0d4:	lsl	sl, r9, #3
   4d0d8:	str	r9, [sp, #8]
   4d0dc:	mla	r0, r0, ip, r1
   4d0e0:	ldr	r1, [sp, #56]	; 0x38
   4d0e4:	cmp	r2, #1
   4d0e8:	add	r5, r1, r0, lsl #3
   4d0ec:	ldr	r0, [sp, #52]	; 0x34
   4d0f0:	mov	r1, #0
   4d0f4:	movwhi	r1, #1
   4d0f8:	mul	r0, r0, r2
   4d0fc:	add	r0, r6, r0, lsl #3
   4d100:	str	r0, [sp, #4]
   4d104:	sub	r0, r9, #1
   4d108:	clz	r0, r0
   4d10c:	lsr	r0, r0, #5
   4d110:	and	r0, r1, r0
   4d114:	str	r0, [sp, #64]	; 0x40
   4d118:	ldr	r0, [sp, #48]	; 0x30
   4d11c:	mul	r0, r0, ip
   4d120:	lsl	r0, r0, #3
   4d124:	str	r0, [sp, #36]	; 0x24
   4d128:	lsl	r0, r9, #4
   4d12c:	str	r0, [sp, #12]
   4d130:	lsl	r0, r2, #3
   4d134:	str	r0, [sp, #32]
   4d138:	bic	r0, r2, #1
   4d13c:	str	r0, [sp, #20]
   4d140:	ldr	r0, [sp, #64]	; 0x40
   4d144:	str	r6, [sp, #68]	; 0x44
   4d148:	cmp	r0, #0
   4d14c:	mov	r0, #0
   4d150:	beq	4d1c0 <GetDataSlab+0x21344>
   4d154:	str	r8, [sp, #16]
   4d158:	ldr	r8, [sp, #68]	; 0x44
   4d15c:	ldr	r7, [sp, #20]
   4d160:	ldr	r9, [sp, #12]
   4d164:	mov	r4, r5
   4d168:	add	r6, r8, r7, lsl #3
   4d16c:	vld1.64	{d8-d9}, [r4], r9
   4d170:	vmov.32	r0, d9[0]
   4d174:	vmov.32	r1, d9[1]
   4d178:	bl	5f094 <__aeabi_l2d>
   4d17c:	vmov.32	r2, d8[0]
   4d180:	vmov.32	r3, d8[1]
   4d184:	vmov	d9, r0, r1
   4d188:	mov	r0, r2
   4d18c:	mov	r1, r3
   4d190:	bl	5f094 <__aeabi_l2d>
   4d194:	vmov	d8, r0, r1
   4d198:	subs	r7, r7, #2
   4d19c:	vst1.64	{d8-d9}, [r8]!
   4d1a0:	bne	4d16c <GetDataSlab+0x212f0>
   4d1a4:	ldr	r0, [sp, #60]	; 0x3c
   4d1a8:	ldr	r1, [sp, #20]
   4d1ac:	ldr	r8, [sp, #16]
   4d1b0:	ldr	r9, [sp, #8]
   4d1b4:	cmp	r0, r1
   4d1b8:	mov	r0, r1
   4d1bc:	beq	4d1e8 <GetDataSlab+0x2136c>
   4d1c0:	ldr	r1, [sp, #60]	; 0x3c
   4d1c4:	mla	r4, sl, r0, r5
   4d1c8:	sub	r7, r1, r0
   4d1cc:	ldrd	r0, [r4]
   4d1d0:	bl	5f094 <__aeabi_l2d>
   4d1d4:	strd	r0, [r6]
   4d1d8:	add	r4, r4, sl
   4d1dc:	subs	r7, r7, #1
   4d1e0:	add	r6, r6, #8
   4d1e4:	bne	4d1cc <GetDataSlab+0x21350>
   4d1e8:	ldr	r0, [sp, #36]	; 0x24
   4d1ec:	ldr	r6, [sp, #68]	; 0x44
   4d1f0:	add	r8, r8, #1
   4d1f4:	add	r5, r5, r0
   4d1f8:	ldr	r0, [sp, #32]
   4d1fc:	add	r6, r6, r0
   4d200:	ldr	r0, [sp, #52]	; 0x34
   4d204:	cmp	r8, r0
   4d208:	bne	4d140 <GetDataSlab+0x212c4>
   4d20c:	ldr	r5, [sp, #4]
   4d210:	ldr	ip, [sp, #44]	; 0x2c
   4d214:	mov	r0, #0
   4d218:	ldr	r1, [sp, #40]	; 0x28
   4d21c:	cmp	r1, #13
   4d220:	bne	2e97c <GetDataSlab+0x2b00>
   4d224:	b	524cc <GetDataSlab+0x26650>
   4d228:	ldr	r1, [sp, #52]	; 0x34
   4d22c:	mov	r0, #0
   4d230:	cmp	r1, #1
   4d234:	ldrge	r1, [sp, #60]	; 0x3c
   4d238:	cmpge	r1, #1
   4d23c:	blt	2e97c <GetDataSlab+0x2b00>
   4d240:	ldr	r0, [sp, #48]	; 0x30
   4d244:	ldr	r2, [sp, #28]
   4d248:	ldr	r3, [sp, #24]
   4d24c:	ldr	r8, [sp, #68]	; 0x44
   4d250:	ldr	r7, [sp, #56]	; 0x38
   4d254:	mov	r6, #0
   4d258:	add	r4, sp, #92	; 0x5c
   4d25c:	mul	r0, r0, ip
   4d260:	mla	r1, r2, ip, r3
   4d264:	str	r0, [sp, #64]	; 0x40
   4d268:	ldr	r0, [sp, #56]	; 0x38
   4d26c:	str	r1, [sp, #36]	; 0x24
   4d270:	add	lr, r0, r1
   4d274:	ldr	r0, [sp, #60]	; 0x3c
   4d278:	mov	r1, r0
   4d27c:	add	r0, r0, r3
   4d280:	mla	r0, r2, ip, r0
   4d284:	cmp	r1, #3
   4d288:	mov	r2, #0
   4d28c:	lsl	sl, r1, #2
   4d290:	str	r0, [sp, #44]	; 0x2c
   4d294:	sub	r0, r9, #1
   4d298:	movwhi	r2, #1
   4d29c:	clz	r0, r0
   4d2a0:	lsr	r0, r0, #5
   4d2a4:	and	r0, r2, r0
   4d2a8:	lsl	r2, r9, #2
   4d2ac:	str	r0, [sp, #48]	; 0x30
   4d2b0:	bic	r0, r1, #3
   4d2b4:	str	r0, [sp, #40]	; 0x28
   4d2b8:	ldr	r0, [sp, #48]	; 0x30
   4d2bc:	mov	r5, #0
   4d2c0:	cmp	r0, #0
   4d2c4:	mov	r0, r8
   4d2c8:	beq	4d364 <GetDataSlab+0x214e8>
   4d2cc:	ldr	r1, [sp, #68]	; 0x44
   4d2d0:	ldr	r0, [sp, #64]	; 0x40
   4d2d4:	mul	r3, sl, r6
   4d2d8:	add	r5, r1, r3
   4d2dc:	ldr	r1, [sp, #44]	; 0x2c
   4d2e0:	mul	r0, r0, r6
   4d2e4:	add	r1, r1, r0
   4d2e8:	add	r1, r7, r1
   4d2ec:	cmp	r5, r1
   4d2f0:	bcs	4d320 <GetDataSlab+0x214a4>
   4d2f4:	add	r1, sl, r3
   4d2f8:	ldr	r3, [sp, #68]	; 0x44
   4d2fc:	mov	r5, #0
   4d300:	add	r1, r3, r1
   4d304:	ldr	r3, [sp, #36]	; 0x24
   4d308:	add	r0, r3, r0
   4d30c:	ldr	r3, [sp, #56]	; 0x38
   4d310:	add	r0, r3, r0
   4d314:	cmp	r0, r1
   4d318:	mov	r0, r8
   4d31c:	bcc	4d364 <GetDataSlab+0x214e8>
   4d320:	ldr	r5, [sp, #40]	; 0x28
   4d324:	mov	r3, lr
   4d328:	mov	ip, r8
   4d32c:	add	r0, r8, r5, lsl #2
   4d330:	ldr	r1, [r3], r2
   4d334:	subs	r5, r5, #4
   4d338:	str	r1, [sp, #92]	; 0x5c
   4d33c:	vld1.32	{d16[0]}, [r4 :32]
   4d340:	vmovl.u8	q8, d16
   4d344:	vmovl.u16	q8, d16
   4d348:	vcvt.f32.u32	q8, q8
   4d34c:	vst1.32	{d16-d17}, [ip]!
   4d350:	bne	4d330 <GetDataSlab+0x214b4>
   4d354:	ldr	r1, [sp, #60]	; 0x3c
   4d358:	ldr	r5, [sp, #40]	; 0x28
   4d35c:	cmp	r1, r5
   4d360:	beq	4d38c <GetDataSlab+0x21510>
   4d364:	ldr	r1, [sp, #60]	; 0x3c
   4d368:	mla	r3, r9, r5, lr
   4d36c:	sub	r5, r1, r5
   4d370:	ldrb	r1, [r3], r9
   4d374:	subs	r5, r5, #1
   4d378:	vmov	s0, r1
   4d37c:	vcvt.f32.u32	s0, s0
   4d380:	vstr	s0, [r0]
   4d384:	add	r0, r0, #4
   4d388:	bne	4d370 <GetDataSlab+0x214f4>
   4d38c:	ldr	r0, [sp, #64]	; 0x40
   4d390:	ldr	r1, [sp, #52]	; 0x34
   4d394:	add	r6, r6, #1
   4d398:	add	r8, r8, sl
   4d39c:	add	lr, lr, r0
   4d3a0:	mov	r0, #0
   4d3a4:	cmp	r6, r1
   4d3a8:	bne	4d2b8 <GetDataSlab+0x2143c>
   4d3ac:	b	2e97c <GetDataSlab+0x2b00>
   4d3b0:	ldr	r1, [sp, #52]	; 0x34
   4d3b4:	mov	r0, #0
   4d3b8:	cmp	r1, #1
   4d3bc:	ldrge	r1, [sp, #60]	; 0x3c
   4d3c0:	cmpge	r1, #1
   4d3c4:	blt	2e97c <GetDataSlab+0x2b00>
   4d3c8:	ldr	r0, [sp, #28]
   4d3cc:	ldr	r1, [sp, #24]
   4d3d0:	sub	r3, r9, #1
   4d3d4:	mov	r7, ip
   4d3d8:	mov	r2, #0
   4d3dc:	lsl	r6, r9, #1
   4d3e0:	lsl	r4, r9, #3
   4d3e4:	clz	r3, r3
   4d3e8:	lsr	r3, r3, #5
   4d3ec:	mla	r0, r0, ip, r1
   4d3f0:	ldr	r1, [sp, #56]	; 0x38
   4d3f4:	add	r1, r1, r0, lsl #1
   4d3f8:	ldr	r0, [sp, #60]	; 0x3c
   4d3fc:	mov	r5, r0
   4d400:	cmp	r0, #3
   4d404:	mov	r0, #0
   4d408:	movwhi	r0, #1
   4d40c:	lsl	r8, r5, #2
   4d410:	bic	r9, r5, #3
   4d414:	and	ip, r0, r3
   4d418:	ldr	r0, [sp, #48]	; 0x30
   4d41c:	mul	r0, r0, r7
   4d420:	lsl	lr, r0, #1
   4d424:	ldr	r0, [sp, #68]	; 0x44
   4d428:	cmp	ip, #0
   4d42c:	mov	r3, #0
   4d430:	beq	4d46c <GetDataSlab+0x215f0>
   4d434:	ldr	r7, [sp, #68]	; 0x44
   4d438:	mov	r3, r9
   4d43c:	mov	r5, r1
   4d440:	add	r0, r7, r9, lsl #2
   4d444:	vld1.16	{d16}, [r5], r4
   4d448:	subs	r3, r3, #4
   4d44c:	vmovl.s16	q8, d16
   4d450:	vcvt.f32.s32	q8, q8
   4d454:	vst1.32	{d16-d17}, [r7]!
   4d458:	bne	4d444 <GetDataSlab+0x215c8>
   4d45c:	ldr	r3, [sp, #60]	; 0x3c
   4d460:	cmp	r3, r9
   4d464:	mov	r3, r9
   4d468:	beq	4d494 <GetDataSlab+0x21618>
   4d46c:	ldr	r7, [sp, #60]	; 0x3c
   4d470:	mla	r5, r6, r3, r1
   4d474:	sub	r3, r7, r3
   4d478:	ldrsh	r7, [r5], r6
   4d47c:	subs	r3, r3, #1
   4d480:	vmov	s0, r7
   4d484:	vcvt.f32.s32	s0, s0
   4d488:	vstr	s0, [r0]
   4d48c:	add	r0, r0, #4
   4d490:	bne	4d478 <GetDataSlab+0x215fc>
   4d494:	ldr	r0, [sp, #68]	; 0x44
   4d498:	ldr	r3, [sp, #52]	; 0x34
   4d49c:	add	r2, r2, #1
   4d4a0:	add	r1, r1, lr
   4d4a4:	add	r0, r0, r8
   4d4a8:	cmp	r2, r3
   4d4ac:	str	r0, [sp, #68]	; 0x44
   4d4b0:	mov	r0, #0
   4d4b4:	bne	4d424 <GetDataSlab+0x215a8>
   4d4b8:	b	2e97c <GetDataSlab+0x2b00>
   4d4bc:	ldr	r1, [sp, #52]	; 0x34
   4d4c0:	mov	r0, #0
   4d4c4:	cmp	r1, #1
   4d4c8:	ldrge	r1, [sp, #60]	; 0x3c
   4d4cc:	cmpge	r1, #1
   4d4d0:	blt	2e97c <GetDataSlab+0x2b00>
   4d4d4:	ldr	r0, [sp, #28]
   4d4d8:	ldr	r1, [sp, #24]
   4d4dc:	sub	r3, r9, #1
   4d4e0:	mov	r7, ip
   4d4e4:	mov	r2, #0
   4d4e8:	lsl	r6, r9, #1
   4d4ec:	lsl	r4, r9, #3
   4d4f0:	clz	r3, r3
   4d4f4:	lsr	r3, r3, #5
   4d4f8:	mla	r0, r0, ip, r1
   4d4fc:	ldr	r1, [sp, #56]	; 0x38
   4d500:	add	r1, r1, r0, lsl #1
   4d504:	ldr	r0, [sp, #60]	; 0x3c
   4d508:	mov	r5, r0
   4d50c:	cmp	r0, #3
   4d510:	mov	r0, #0
   4d514:	movwhi	r0, #1
   4d518:	lsl	r8, r5, #2
   4d51c:	bic	r9, r5, #3
   4d520:	and	ip, r0, r3
   4d524:	ldr	r0, [sp, #48]	; 0x30
   4d528:	mul	r0, r0, r7
   4d52c:	lsl	lr, r0, #1
   4d530:	ldr	r0, [sp, #68]	; 0x44
   4d534:	cmp	ip, #0
   4d538:	mov	r3, #0
   4d53c:	beq	4d578 <GetDataSlab+0x216fc>
   4d540:	ldr	r7, [sp, #68]	; 0x44
   4d544:	mov	r3, r9
   4d548:	mov	r5, r1
   4d54c:	add	r0, r7, r9, lsl #2
   4d550:	vld1.16	{d16}, [r5], r4
   4d554:	subs	r3, r3, #4
   4d558:	vmovl.u16	q8, d16
   4d55c:	vcvt.f32.u32	q8, q8
   4d560:	vst1.32	{d16-d17}, [r7]!
   4d564:	bne	4d550 <GetDataSlab+0x216d4>
   4d568:	ldr	r3, [sp, #60]	; 0x3c
   4d56c:	cmp	r3, r9
   4d570:	mov	r3, r9
   4d574:	beq	4d5a0 <GetDataSlab+0x21724>
   4d578:	ldr	r7, [sp, #60]	; 0x3c
   4d57c:	mla	r5, r6, r3, r1
   4d580:	sub	r3, r7, r3
   4d584:	ldrh	r7, [r5], r6
   4d588:	subs	r3, r3, #1
   4d58c:	vmov	s0, r7
   4d590:	vcvt.f32.u32	s0, s0
   4d594:	vstr	s0, [r0]
   4d598:	add	r0, r0, #4
   4d59c:	bne	4d584 <GetDataSlab+0x21708>
   4d5a0:	ldr	r0, [sp, #68]	; 0x44
   4d5a4:	ldr	r3, [sp, #52]	; 0x34
   4d5a8:	add	r2, r2, #1
   4d5ac:	add	r1, r1, lr
   4d5b0:	add	r0, r0, r8
   4d5b4:	cmp	r2, r3
   4d5b8:	str	r0, [sp, #68]	; 0x44
   4d5bc:	mov	r0, #0
   4d5c0:	bne	4d530 <GetDataSlab+0x216b4>
   4d5c4:	b	2e97c <GetDataSlab+0x2b00>
   4d5c8:	ldr	r1, [sp, #52]	; 0x34
   4d5cc:	mov	r0, #0
   4d5d0:	cmp	r1, #1
   4d5d4:	ldrge	r1, [sp, #60]	; 0x3c
   4d5d8:	cmpge	r1, #1
   4d5dc:	blt	2e97c <GetDataSlab+0x2b00>
   4d5e0:	ldr	r0, [sp, #28]
   4d5e4:	ldr	r1, [sp, #24]
   4d5e8:	sub	r3, r9, #1
   4d5ec:	mov	r7, ip
   4d5f0:	mov	r2, #0
   4d5f4:	lsl	r6, r9, #4
   4d5f8:	clz	r3, r3
   4d5fc:	lsr	r3, r3, #5
   4d600:	mla	r0, r0, ip, r1
   4d604:	ldr	r1, [sp, #56]	; 0x38
   4d608:	add	r1, r1, r0, lsl #2
   4d60c:	ldr	r0, [sp, #60]	; 0x3c
   4d610:	mov	r4, r0
   4d614:	cmp	r0, #3
   4d618:	mov	r0, #0
   4d61c:	movwhi	r0, #1
   4d620:	lsl	r8, r4, #2
   4d624:	and	ip, r0, r3
   4d628:	ldr	r0, [sp, #48]	; 0x30
   4d62c:	bic	r3, r4, #3
   4d630:	mul	r0, r0, r7
   4d634:	lsl	lr, r0, #2
   4d638:	ldr	r0, [sp, #68]	; 0x44
   4d63c:	cmp	ip, #0
   4d640:	mov	r4, #0
   4d644:	beq	4d67c <GetDataSlab+0x21800>
   4d648:	ldr	r4, [sp, #68]	; 0x44
   4d64c:	mov	r5, r3
   4d650:	mov	r7, r1
   4d654:	add	r0, r4, r3, lsl #2
   4d658:	vld1.32	{d16-d17}, [r7], r6
   4d65c:	subs	r5, r5, #4
   4d660:	vcvt.f32.s32	q8, q8
   4d664:	vst1.32	{d16-d17}, [r4]!
   4d668:	bne	4d658 <GetDataSlab+0x217dc>
   4d66c:	ldr	r4, [sp, #60]	; 0x3c
   4d670:	cmp	r4, r3
   4d674:	mov	r4, r3
   4d678:	beq	4d6a8 <GetDataSlab+0x2182c>
   4d67c:	ldr	r7, [sp, #60]	; 0x3c
   4d680:	mul	r5, r9, r4
   4d684:	sub	r7, r7, r4
   4d688:	add	r4, r1, r5, lsl #2
   4d68c:	add	r5, r5, r9
   4d690:	subs	r7, r7, #1
   4d694:	vldr	s0, [r4]
   4d698:	vcvt.f32.s32	s0, s0
   4d69c:	vstr	s0, [r0]
   4d6a0:	add	r0, r0, #4
   4d6a4:	bne	4d688 <GetDataSlab+0x2180c>
   4d6a8:	ldr	r0, [sp, #68]	; 0x44
   4d6ac:	ldr	r4, [sp, #52]	; 0x34
   4d6b0:	add	r2, r2, #1
   4d6b4:	add	r1, r1, lr
   4d6b8:	add	r0, r0, r8
   4d6bc:	cmp	r2, r4
   4d6c0:	str	r0, [sp, #68]	; 0x44
   4d6c4:	mov	r0, #0
   4d6c8:	bne	4d638 <GetDataSlab+0x217bc>
   4d6cc:	b	2e97c <GetDataSlab+0x2b00>
   4d6d0:	ldr	r1, [sp, #52]	; 0x34
   4d6d4:	mov	r0, #0
   4d6d8:	cmp	r1, #1
   4d6dc:	ldrge	r1, [sp, #60]	; 0x3c
   4d6e0:	cmpge	r1, #1
   4d6e4:	blt	2e97c <GetDataSlab+0x2b00>
   4d6e8:	ldr	r0, [sp, #28]
   4d6ec:	ldr	r1, [sp, #24]
   4d6f0:	sub	r3, r9, #1
   4d6f4:	mov	r7, ip
   4d6f8:	mov	r2, #0
   4d6fc:	lsl	r6, r9, #4
   4d700:	clz	r3, r3
   4d704:	lsr	r3, r3, #5
   4d708:	mla	r0, r0, ip, r1
   4d70c:	ldr	r1, [sp, #56]	; 0x38
   4d710:	add	r1, r1, r0, lsl #2
   4d714:	ldr	r0, [sp, #60]	; 0x3c
   4d718:	mov	r4, r0
   4d71c:	cmp	r0, #3
   4d720:	mov	r0, #0
   4d724:	movwhi	r0, #1
   4d728:	lsl	r8, r4, #2
   4d72c:	and	ip, r0, r3
   4d730:	ldr	r0, [sp, #48]	; 0x30
   4d734:	bic	r3, r4, #3
   4d738:	mul	r0, r0, r7
   4d73c:	lsl	lr, r0, #2
   4d740:	ldr	r0, [sp, #68]	; 0x44
   4d744:	cmp	ip, #0
   4d748:	mov	r4, #0
   4d74c:	beq	4d784 <GetDataSlab+0x21908>
   4d750:	ldr	r4, [sp, #68]	; 0x44
   4d754:	mov	r5, r3
   4d758:	mov	r7, r1
   4d75c:	add	r0, r4, r3, lsl #2
   4d760:	vld1.32	{d16-d17}, [r7], r6
   4d764:	subs	r5, r5, #4
   4d768:	vcvt.f32.u32	q8, q8
   4d76c:	vst1.32	{d16-d17}, [r4]!
   4d770:	bne	4d760 <GetDataSlab+0x218e4>
   4d774:	ldr	r4, [sp, #60]	; 0x3c
   4d778:	cmp	r4, r3
   4d77c:	mov	r4, r3
   4d780:	beq	4d7b0 <GetDataSlab+0x21934>
   4d784:	ldr	r7, [sp, #60]	; 0x3c
   4d788:	mul	r5, r9, r4
   4d78c:	sub	r7, r7, r4
   4d790:	add	r4, r1, r5, lsl #2
   4d794:	add	r5, r5, r9
   4d798:	subs	r7, r7, #1
   4d79c:	vldr	s0, [r4]
   4d7a0:	vcvt.f32.u32	s0, s0
   4d7a4:	vstr	s0, [r0]
   4d7a8:	add	r0, r0, #4
   4d7ac:	bne	4d790 <GetDataSlab+0x21914>
   4d7b0:	ldr	r0, [sp, #68]	; 0x44
   4d7b4:	ldr	r4, [sp, #52]	; 0x34
   4d7b8:	add	r2, r2, #1
   4d7bc:	add	r1, r1, lr
   4d7c0:	add	r0, r0, r8
   4d7c4:	cmp	r2, r4
   4d7c8:	str	r0, [sp, #68]	; 0x44
   4d7cc:	mov	r0, #0
   4d7d0:	bne	4d740 <GetDataSlab+0x218c4>
   4d7d4:	b	2e97c <GetDataSlab+0x2b00>
   4d7d8:	ldr	r1, [sp, #52]	; 0x34
   4d7dc:	mov	r0, #0
   4d7e0:	cmp	r1, #1
   4d7e4:	ldrge	r1, [sp, #60]	; 0x3c
   4d7e8:	cmpge	r1, #1
   4d7ec:	blt	2e97c <GetDataSlab+0x2b00>
   4d7f0:	ldr	r0, [sp, #28]
   4d7f4:	ldr	r1, [sp, #24]
   4d7f8:	mov	r7, #0
   4d7fc:	mla	r0, r0, ip, r1
   4d800:	ldr	r1, [sp, #56]	; 0x38
   4d804:	add	r1, r1, r0, lsl #2
   4d808:	ldr	r0, [sp, #48]	; 0x30
   4d80c:	mul	r0, r0, ip
   4d810:	lsl	ip, r0, #2
   4d814:	ldr	r0, [sp, #60]	; 0x3c
   4d818:	lsl	r3, r0, #2
   4d81c:	ldr	r4, [sp, #68]	; 0x44
   4d820:	ldr	r2, [sp, #60]	; 0x3c
   4d824:	mov	r0, #0
   4d828:	mov	r6, #0
   4d82c:	ldr	r5, [r1, r0, lsl #2]
   4d830:	add	r0, r0, r9
   4d834:	str	r5, [r4, r6, lsl #2]
   4d838:	add	r6, r6, #1
   4d83c:	cmp	r2, r6
   4d840:	bne	4d82c <GetDataSlab+0x219b0>
   4d844:	ldr	r2, [sp, #52]	; 0x34
   4d848:	add	r7, r7, #1
   4d84c:	add	r4, r4, r3
   4d850:	add	r1, r1, ip
   4d854:	mov	r0, #0
   4d858:	str	r4, [sp, #68]	; 0x44
   4d85c:	cmp	r7, r2
   4d860:	bne	4d81c <GetDataSlab+0x219a0>
   4d864:	b	2e97c <GetDataSlab+0x2b00>
   4d868:	ldr	r1, [sp, #52]	; 0x34
   4d86c:	mov	r0, #0
   4d870:	cmp	r1, #1
   4d874:	ldrge	r1, [sp, #60]	; 0x3c
   4d878:	cmpge	r1, #1
   4d87c:	blt	2e97c <GetDataSlab+0x2b00>
   4d880:	ldr	r0, [sp, #28]
   4d884:	ldr	r1, [sp, #24]
   4d888:	mov	r7, ip
   4d88c:	mov	r2, #0
   4d890:	lsl	r6, r9, #3
   4d894:	lsl	r4, r9, #4
   4d898:	mla	r0, r0, ip, r1
   4d89c:	ldr	r1, [sp, #56]	; 0x38
   4d8a0:	add	r3, r1, r0, lsl #3
   4d8a4:	ldr	r0, [sp, #60]	; 0x3c
   4d8a8:	sub	r1, r9, #1
   4d8ac:	clz	r1, r1
   4d8b0:	lsr	r1, r1, #5
   4d8b4:	mov	r5, r0
   4d8b8:	cmp	r0, #1
   4d8bc:	mov	r0, #0
   4d8c0:	movwhi	r0, #1
   4d8c4:	lsl	r8, r5, #2
   4d8c8:	bic	r9, r5, #1
   4d8cc:	and	ip, r0, r1
   4d8d0:	ldr	r0, [sp, #48]	; 0x30
   4d8d4:	mul	r0, r0, r7
   4d8d8:	lsl	lr, r0, #3
   4d8dc:	ldr	r0, [sp, #68]	; 0x44
   4d8e0:	cmp	ip, #0
   4d8e4:	mov	r5, #0
   4d8e8:	beq	4d924 <GetDataSlab+0x21aa8>
   4d8ec:	ldr	r7, [sp, #68]	; 0x44
   4d8f0:	mov	r5, r9
   4d8f4:	mov	r1, r3
   4d8f8:	add	r0, r7, r9, lsl #2
   4d8fc:	vld1.64	{d16-d17}, [r1], r4
   4d900:	subs	r5, r5, #2
   4d904:	vcvt.f32.f64	s1, d17
   4d908:	vcvt.f32.f64	s0, d16
   4d90c:	vst1.32	{d0}, [r7]!
   4d910:	bne	4d8fc <GetDataSlab+0x21a80>
   4d914:	ldr	r1, [sp, #60]	; 0x3c
   4d918:	mov	r5, r9
   4d91c:	cmp	r1, r9
   4d920:	beq	4d94c <GetDataSlab+0x21ad0>
   4d924:	ldr	r7, [sp, #60]	; 0x3c
   4d928:	mla	r1, r6, r5, r3
   4d92c:	sub	r5, r7, r5
   4d930:	vldr	d16, [r1]
   4d934:	add	r1, r1, r6
   4d938:	subs	r5, r5, #1
   4d93c:	vcvt.f32.f64	s0, d16
   4d940:	vstr	s0, [r0]
   4d944:	add	r0, r0, #4
   4d948:	bne	4d930 <GetDataSlab+0x21ab4>
   4d94c:	ldr	r0, [sp, #68]	; 0x44
   4d950:	ldr	r1, [sp, #52]	; 0x34
   4d954:	add	r2, r2, #1
   4d958:	add	r3, r3, lr
   4d95c:	add	r0, r0, r8
   4d960:	cmp	r2, r1
   4d964:	str	r0, [sp, #68]	; 0x44
   4d968:	mov	r0, #0
   4d96c:	bne	4d8dc <GetDataSlab+0x21a60>
   4d970:	b	2e97c <GetDataSlab+0x2b00>
   4d974:	ldr	r1, [sp, #52]	; 0x34
   4d978:	mov	r0, #0
   4d97c:	cmp	r1, #1
   4d980:	ldrge	r1, [sp, #60]	; 0x3c
   4d984:	cmpge	r1, #1
   4d988:	blt	2e97c <GetDataSlab+0x2b00>
   4d98c:	ldr	r0, [sp, #28]
   4d990:	ldr	r1, [sp, #24]
   4d994:	ldr	r2, [sp, #60]	; 0x3c
   4d998:	ldr	r6, [sp, #68]	; 0x44
   4d99c:	mov	r7, #0
   4d9a0:	lsl	sl, r9, #3
   4d9a4:	mla	r0, r0, ip, r1
   4d9a8:	ldr	r1, [sp, #56]	; 0x38
   4d9ac:	cmp	r2, #1
   4d9b0:	add	r8, r1, r0, lsl #3
   4d9b4:	ldr	r0, [sp, #52]	; 0x34
   4d9b8:	mov	r1, #0
   4d9bc:	movwhi	r1, #1
   4d9c0:	mul	r0, r0, r2
   4d9c4:	add	r0, r6, r0, lsl #2
   4d9c8:	str	r0, [sp]
   4d9cc:	sub	r0, r9, #1
   4d9d0:	clz	r0, r0
   4d9d4:	lsr	r0, r0, #5
   4d9d8:	and	r0, r1, r0
   4d9dc:	str	r0, [sp, #64]	; 0x40
   4d9e0:	ldr	r0, [sp, #48]	; 0x30
   4d9e4:	mul	r0, r0, ip
   4d9e8:	lsl	r0, r0, #3
   4d9ec:	str	r0, [sp, #36]	; 0x24
   4d9f0:	lsl	r0, r9, #4
   4d9f4:	str	r0, [sp, #4]
   4d9f8:	lsl	r0, r2, #2
   4d9fc:	str	r0, [sp, #32]
   4da00:	bic	r0, r2, #1
   4da04:	str	r0, [sp, #20]
   4da08:	ldr	r0, [sp, #64]	; 0x40
   4da0c:	mov	r1, #0
   4da10:	str	r6, [sp, #68]	; 0x44
   4da14:	cmp	r0, #0
   4da18:	beq	4da88 <GetDataSlab+0x21c0c>
   4da1c:	ldr	r0, [sp, #68]	; 0x44
   4da20:	ldr	r4, [sp, #20]
   4da24:	ldr	r5, [sp, #4]
   4da28:	str	r7, [sp, #16]
   4da2c:	str	r8, [sp, #12]
   4da30:	mov	r7, r8
   4da34:	add	r6, r0, r4, lsl #2
   4da38:	mov	r8, r0
   4da3c:	vld1.64	{d8-d9}, [r7], r5
   4da40:	vmov.32	r0, d9[0]
   4da44:	vmov.32	r1, d9[1]
   4da48:	bl	5f2c8 <__aeabi_l2f>
   4da4c:	vmov.32	r2, d8[0]
   4da50:	vmov.32	r1, d8[1]
   4da54:	vmov	s17, r0
   4da58:	mov	r0, r2
   4da5c:	bl	5f2c8 <__aeabi_l2f>
   4da60:	vmov	s16, r0
   4da64:	subs	r4, r4, #2
   4da68:	vst1.32	{d8}, [r8]!
   4da6c:	bne	4da3c <GetDataSlab+0x21bc0>
   4da70:	ldr	r0, [sp, #60]	; 0x3c
   4da74:	ldr	r1, [sp, #20]
   4da78:	ldr	r8, [sp, #12]
   4da7c:	ldr	r7, [sp, #16]
   4da80:	cmp	r0, r1
   4da84:	beq	4dab0 <GetDataSlab+0x21c34>
   4da88:	ldr	r2, [sp, #60]	; 0x3c
   4da8c:	mla	r0, sl, r1, r8
   4da90:	sub	r4, r2, r1
   4da94:	add	r5, r0, sl
   4da98:	ldrd	r0, [r0]
   4da9c:	bl	5f2c8 <__aeabi_l2f>
   4daa0:	str	r0, [r6], #4
   4daa4:	subs	r4, r4, #1
   4daa8:	mov	r0, r5
   4daac:	bne	4da94 <GetDataSlab+0x21c18>
   4dab0:	ldr	r0, [sp, #36]	; 0x24
   4dab4:	ldr	r6, [sp, #68]	; 0x44
   4dab8:	add	r7, r7, #1
   4dabc:	add	r8, r8, r0
   4dac0:	ldr	r0, [sp, #32]
   4dac4:	add	r6, r6, r0
   4dac8:	ldr	r0, [sp, #52]	; 0x34
   4dacc:	cmp	r7, r0
   4dad0:	bne	4da08 <GetDataSlab+0x21b8c>
   4dad4:	ldr	r3, [sp]
   4dad8:	ldr	ip, [sp, #44]	; 0x2c
   4dadc:	mov	r0, #0
   4dae0:	ldr	r1, [sp, #40]	; 0x28
   4dae4:	str	r3, [sp, #68]	; 0x44
   4dae8:	cmp	r1, #13
   4daec:	bne	2e97c <GetDataSlab+0x2b00>
   4daf0:	b	52644 <GetDataSlab+0x267c8>
   4daf4:	cmp	r1, #1
   4daf8:	blt	53048 <GetDataSlab+0x271cc>
   4dafc:	ldr	r5, [sp, #44]	; 0x2c
   4db00:	ldr	r0, [sp, #28]
   4db04:	ldr	r1, [sp, #24]
   4db08:	mov	r7, #0
   4db0c:	mla	r0, r0, r5, r1
   4db10:	add	r2, r4, r0
   4db14:	ldr	r0, [sp, #60]	; 0x3c
   4db18:	cmp	r0, #1
   4db1c:	blt	4db70 <GetDataSlab+0x21cf4>
   4db20:	ldr	r5, [sp, #68]	; 0x44
   4db24:	ldr	r4, [fp, #8]
   4db28:	mov	r0, #0
   4db2c:	ldr	r6, [lr]
   4db30:	mul	r6, r6, r0
   4db34:	ldrb	r6, [r2, r6]
   4db38:	strb	r6, [r5, r0]
   4db3c:	add	r0, r0, #1
   4db40:	ldr	r6, [sl]
   4db44:	cmp	r0, r6
   4db48:	blt	4db2c <GetDataSlab+0x21cb0>
   4db4c:	add	r5, r5, r0
   4db50:	ldr	r0, [sp, #32]
   4db54:	str	r6, [sp, #60]	; 0x3c
   4db58:	str	r5, [sp, #68]	; 0x44
   4db5c:	ldr	r5, [r4]
   4db60:	ldr	r6, [r0]
   4db64:	ldr	r0, [sp, #36]	; 0x24
   4db68:	ldr	r0, [r0]
   4db6c:	b	4db7c <GetDataSlab+0x21d00>
   4db70:	ldr	r1, [sp, #52]	; 0x34
   4db74:	ldr	r0, [sp, #48]	; 0x30
   4db78:	mov	r6, r1
   4db7c:	add	r7, r7, #1
   4db80:	str	r0, [sp, #48]	; 0x30
   4db84:	mla	r2, r5, r0, r2
   4db88:	mov	r0, #0
   4db8c:	mov	r1, r6
   4db90:	str	r6, [sp, #52]	; 0x34
   4db94:	cmp	r7, r6
   4db98:	blt	4db14 <GetDataSlab+0x21c98>
   4db9c:	b	2e97c <GetDataSlab+0x2b00>
   4dba0:	cmp	r1, #1
   4dba4:	blt	5305c <GetDataSlab+0x271e0>
   4dba8:	ldr	r5, [sp, #44]	; 0x2c
   4dbac:	ldr	r0, [sp, #28]
   4dbb0:	ldr	r1, [sp, #24]
   4dbb4:	mov	r7, #0
   4dbb8:	mla	r0, r0, r5, r1
   4dbbc:	add	r2, r4, r0, lsl #1
   4dbc0:	ldr	r0, [sp, #60]	; 0x3c
   4dbc4:	cmp	r0, #1
   4dbc8:	blt	4dc1c <GetDataSlab+0x21da0>
   4dbcc:	ldr	r5, [sp, #68]	; 0x44
   4dbd0:	ldr	r4, [fp, #8]
   4dbd4:	mov	r0, #0
   4dbd8:	ldr	r6, [lr]
   4dbdc:	mul	r6, r6, r0
   4dbe0:	ldrb	r6, [r2, r6, lsl #1]
   4dbe4:	strb	r6, [r5, r0]
   4dbe8:	add	r0, r0, #1
   4dbec:	ldr	r6, [sl]
   4dbf0:	cmp	r0, r6
   4dbf4:	blt	4dbd8 <GetDataSlab+0x21d5c>
   4dbf8:	add	r5, r5, r0
   4dbfc:	ldr	r0, [sp, #32]
   4dc00:	str	r6, [sp, #60]	; 0x3c
   4dc04:	str	r5, [sp, #68]	; 0x44
   4dc08:	ldr	r5, [r4]
   4dc0c:	ldr	r6, [r0]
   4dc10:	ldr	r0, [sp, #36]	; 0x24
   4dc14:	ldr	r0, [r0]
   4dc18:	b	4dc28 <GetDataSlab+0x21dac>
   4dc1c:	ldr	r1, [sp, #52]	; 0x34
   4dc20:	ldr	r0, [sp, #48]	; 0x30
   4dc24:	mov	r6, r1
   4dc28:	str	r0, [sp, #48]	; 0x30
   4dc2c:	mul	r0, r5, r0
   4dc30:	add	r7, r7, #1
   4dc34:	mov	r1, r6
   4dc38:	str	r6, [sp, #52]	; 0x34
   4dc3c:	add	r2, r2, r0, lsl #1
   4dc40:	mov	r0, #0
   4dc44:	cmp	r7, r6
   4dc48:	blt	4dbc0 <GetDataSlab+0x21d44>
   4dc4c:	b	2e97c <GetDataSlab+0x2b00>
   4dc50:	cmp	r1, #1
   4dc54:	blt	53070 <GetDataSlab+0x271f4>
   4dc58:	ldr	r5, [sp, #44]	; 0x2c
   4dc5c:	ldr	r0, [sp, #28]
   4dc60:	ldr	r1, [sp, #24]
   4dc64:	mov	r7, #0
   4dc68:	mla	r0, r0, r5, r1
   4dc6c:	add	r2, r4, r0, lsl #1
   4dc70:	ldr	r0, [sp, #60]	; 0x3c
   4dc74:	cmp	r0, #1
   4dc78:	blt	4dccc <GetDataSlab+0x21e50>
   4dc7c:	ldr	r5, [sp, #68]	; 0x44
   4dc80:	ldr	r4, [fp, #8]
   4dc84:	mov	r0, #0
   4dc88:	ldr	r6, [lr]
   4dc8c:	mul	r6, r6, r0
   4dc90:	ldrb	r6, [r2, r6, lsl #1]
   4dc94:	strb	r6, [r5, r0]
   4dc98:	add	r0, r0, #1
   4dc9c:	ldr	r6, [sl]
   4dca0:	cmp	r0, r6
   4dca4:	blt	4dc88 <GetDataSlab+0x21e0c>
   4dca8:	add	r5, r5, r0
   4dcac:	ldr	r0, [sp, #32]
   4dcb0:	str	r6, [sp, #60]	; 0x3c
   4dcb4:	str	r5, [sp, #68]	; 0x44
   4dcb8:	ldr	r5, [r4]
   4dcbc:	ldr	r6, [r0]
   4dcc0:	ldr	r0, [sp, #36]	; 0x24
   4dcc4:	ldr	r0, [r0]
   4dcc8:	b	4dcd8 <GetDataSlab+0x21e5c>
   4dccc:	ldr	r1, [sp, #52]	; 0x34
   4dcd0:	ldr	r0, [sp, #48]	; 0x30
   4dcd4:	mov	r6, r1
   4dcd8:	str	r0, [sp, #48]	; 0x30
   4dcdc:	mul	r0, r5, r0
   4dce0:	add	r7, r7, #1
   4dce4:	mov	r1, r6
   4dce8:	str	r6, [sp, #52]	; 0x34
   4dcec:	add	r2, r2, r0, lsl #1
   4dcf0:	mov	r0, #0
   4dcf4:	cmp	r7, r6
   4dcf8:	blt	4dc70 <GetDataSlab+0x21df4>
   4dcfc:	b	2e97c <GetDataSlab+0x2b00>
   4dd00:	cmp	r1, #1
   4dd04:	blt	53084 <GetDataSlab+0x27208>
   4dd08:	ldr	r5, [sp, #44]	; 0x2c
   4dd0c:	ldr	r0, [sp, #28]
   4dd10:	ldr	r1, [sp, #24]
   4dd14:	mov	r7, #0
   4dd18:	mla	r0, r0, r5, r1
   4dd1c:	add	r2, r4, r0, lsl #2
   4dd20:	ldr	r0, [sp, #60]	; 0x3c
   4dd24:	cmp	r0, #1
   4dd28:	blt	4dd7c <GetDataSlab+0x21f00>
   4dd2c:	ldr	r5, [sp, #68]	; 0x44
   4dd30:	ldr	r4, [fp, #8]
   4dd34:	mov	r0, #0
   4dd38:	ldr	r6, [lr]
   4dd3c:	mul	r6, r6, r0
   4dd40:	ldr	r6, [r2, r6, lsl #2]
   4dd44:	strb	r6, [r5, r0]
   4dd48:	add	r0, r0, #1
   4dd4c:	ldr	r6, [sl]
   4dd50:	cmp	r0, r6
   4dd54:	blt	4dd38 <GetDataSlab+0x21ebc>
   4dd58:	add	r5, r5, r0
   4dd5c:	ldr	r0, [sp, #32]
   4dd60:	str	r6, [sp, #60]	; 0x3c
   4dd64:	str	r5, [sp, #68]	; 0x44
   4dd68:	ldr	r5, [r4]
   4dd6c:	ldr	r6, [r0]
   4dd70:	ldr	r0, [sp, #36]	; 0x24
   4dd74:	ldr	r0, [r0]
   4dd78:	b	4dd88 <GetDataSlab+0x21f0c>
   4dd7c:	ldr	r1, [sp, #52]	; 0x34
   4dd80:	ldr	r0, [sp, #48]	; 0x30
   4dd84:	mov	r6, r1
   4dd88:	str	r0, [sp, #48]	; 0x30
   4dd8c:	mul	r0, r5, r0
   4dd90:	add	r7, r7, #1
   4dd94:	mov	r1, r6
   4dd98:	str	r6, [sp, #52]	; 0x34
   4dd9c:	add	r2, r2, r0, lsl #2
   4dda0:	mov	r0, #0
   4dda4:	cmp	r7, r6
   4dda8:	blt	4dd20 <GetDataSlab+0x21ea4>
   4ddac:	b	2e97c <GetDataSlab+0x2b00>
   4ddb0:	cmp	r1, #1
   4ddb4:	blt	53098 <GetDataSlab+0x2721c>
   4ddb8:	ldr	r5, [sp, #44]	; 0x2c
   4ddbc:	ldr	r0, [sp, #28]
   4ddc0:	ldr	r1, [sp, #24]
   4ddc4:	mov	r7, #0
   4ddc8:	mla	r0, r0, r5, r1
   4ddcc:	add	r2, r4, r0, lsl #2
   4ddd0:	ldr	r0, [sp, #60]	; 0x3c
   4ddd4:	cmp	r0, #1
   4ddd8:	blt	4de2c <GetDataSlab+0x21fb0>
   4dddc:	ldr	r5, [sp, #68]	; 0x44
   4dde0:	ldr	r4, [fp, #8]
   4dde4:	mov	r0, #0
   4dde8:	ldr	r6, [lr]
   4ddec:	mul	r6, r6, r0
   4ddf0:	ldr	r6, [r2, r6, lsl #2]
   4ddf4:	strb	r6, [r5, r0]
   4ddf8:	add	r0, r0, #1
   4ddfc:	ldr	r6, [sl]
   4de00:	cmp	r0, r6
   4de04:	blt	4dde8 <GetDataSlab+0x21f6c>
   4de08:	add	r5, r5, r0
   4de0c:	ldr	r0, [sp, #32]
   4de10:	str	r6, [sp, #60]	; 0x3c
   4de14:	str	r5, [sp, #68]	; 0x44
   4de18:	ldr	r5, [r4]
   4de1c:	ldr	r6, [r0]
   4de20:	ldr	r0, [sp, #36]	; 0x24
   4de24:	ldr	r0, [r0]
   4de28:	b	4de38 <GetDataSlab+0x21fbc>
   4de2c:	ldr	r1, [sp, #52]	; 0x34
   4de30:	ldr	r0, [sp, #48]	; 0x30
   4de34:	mov	r6, r1
   4de38:	str	r0, [sp, #48]	; 0x30
   4de3c:	mul	r0, r5, r0
   4de40:	add	r7, r7, #1
   4de44:	mov	r1, r6
   4de48:	str	r6, [sp, #52]	; 0x34
   4de4c:	add	r2, r2, r0, lsl #2
   4de50:	mov	r0, #0
   4de54:	cmp	r7, r6
   4de58:	blt	4ddd0 <GetDataSlab+0x21f54>
   4de5c:	b	2e97c <GetDataSlab+0x2b00>
   4de60:	cmp	r1, #1
   4de64:	blt	530ac <GetDataSlab+0x27230>
   4de68:	ldr	r5, [sp, #44]	; 0x2c
   4de6c:	ldr	r0, [sp, #28]
   4de70:	ldr	r1, [sp, #24]
   4de74:	mov	r7, #0
   4de78:	mla	r0, r0, r5, r1
   4de7c:	add	r2, r4, r0, lsl #2
   4de80:	ldr	r0, [sp, #60]	; 0x3c
   4de84:	cmp	r0, #1
   4de88:	blt	4dee8 <GetDataSlab+0x2206c>
   4de8c:	ldr	r5, [sp, #68]	; 0x44
   4de90:	ldr	r4, [fp, #8]
   4de94:	mov	r0, #0
   4de98:	ldr	r6, [lr]
   4de9c:	mul	r6, r6, r0
   4dea0:	add	r6, r2, r6, lsl #2
   4dea4:	vldr	s0, [r6]
   4dea8:	vcvt.s32.f32	s0, s0
   4deac:	vmov	r6, s0
   4deb0:	strb	r6, [r5, r0]
   4deb4:	add	r0, r0, #1
   4deb8:	ldr	r6, [sl]
   4debc:	cmp	r0, r6
   4dec0:	blt	4de98 <GetDataSlab+0x2201c>
   4dec4:	add	r5, r5, r0
   4dec8:	ldr	r0, [sp, #32]
   4decc:	str	r6, [sp, #60]	; 0x3c
   4ded0:	str	r5, [sp, #68]	; 0x44
   4ded4:	ldr	r5, [r4]
   4ded8:	ldr	r6, [r0]
   4dedc:	ldr	r0, [sp, #36]	; 0x24
   4dee0:	ldr	r0, [r0]
   4dee4:	b	4def4 <GetDataSlab+0x22078>
   4dee8:	ldr	r1, [sp, #52]	; 0x34
   4deec:	ldr	r0, [sp, #48]	; 0x30
   4def0:	mov	r6, r1
   4def4:	str	r0, [sp, #48]	; 0x30
   4def8:	mul	r0, r5, r0
   4defc:	add	r7, r7, #1
   4df00:	mov	r1, r6
   4df04:	str	r6, [sp, #52]	; 0x34
   4df08:	add	r2, r2, r0, lsl #2
   4df0c:	mov	r0, #0
   4df10:	cmp	r7, r6
   4df14:	blt	4de80 <GetDataSlab+0x22004>
   4df18:	b	2e97c <GetDataSlab+0x2b00>
   4df1c:	cmp	r1, #1
   4df20:	blt	530c0 <GetDataSlab+0x27244>
   4df24:	ldr	r5, [sp, #44]	; 0x2c
   4df28:	ldr	r0, [sp, #28]
   4df2c:	ldr	r1, [sp, #24]
   4df30:	mov	r7, #0
   4df34:	mla	r0, r0, r5, r1
   4df38:	add	r2, r4, r0, lsl #3
   4df3c:	ldr	r0, [sp, #60]	; 0x3c
   4df40:	cmp	r0, #1
   4df44:	blt	4dfa4 <GetDataSlab+0x22128>
   4df48:	ldr	r5, [sp, #68]	; 0x44
   4df4c:	ldr	r4, [fp, #8]
   4df50:	mov	r0, #0
   4df54:	ldr	r6, [lr]
   4df58:	mul	r6, r6, r0
   4df5c:	add	r6, r2, r6, lsl #3
   4df60:	vldr	d16, [r6]
   4df64:	vcvt.s32.f64	s0, d16
   4df68:	vmov	r6, s0
   4df6c:	strb	r6, [r5, r0]
   4df70:	add	r0, r0, #1
   4df74:	ldr	r6, [sl]
   4df78:	cmp	r0, r6
   4df7c:	blt	4df54 <GetDataSlab+0x220d8>
   4df80:	add	r5, r5, r0
   4df84:	ldr	r0, [sp, #32]
   4df88:	str	r6, [sp, #60]	; 0x3c
   4df8c:	str	r5, [sp, #68]	; 0x44
   4df90:	ldr	r5, [r4]
   4df94:	ldr	r6, [r0]
   4df98:	ldr	r0, [sp, #36]	; 0x24
   4df9c:	ldr	r0, [r0]
   4dfa0:	b	4dfb0 <GetDataSlab+0x22134>
   4dfa4:	ldr	r1, [sp, #52]	; 0x34
   4dfa8:	ldr	r0, [sp, #48]	; 0x30
   4dfac:	mov	r6, r1
   4dfb0:	str	r0, [sp, #48]	; 0x30
   4dfb4:	mul	r0, r5, r0
   4dfb8:	add	r7, r7, #1
   4dfbc:	mov	r1, r6
   4dfc0:	str	r6, [sp, #52]	; 0x34
   4dfc4:	add	r2, r2, r0, lsl #3
   4dfc8:	mov	r0, #0
   4dfcc:	cmp	r7, r6
   4dfd0:	blt	4df3c <GetDataSlab+0x220c0>
   4dfd4:	b	2e97c <GetDataSlab+0x2b00>
   4dfd8:	cmp	r1, #1
   4dfdc:	blt	530d4 <GetDataSlab+0x27258>
   4dfe0:	ldr	r0, [sp, #44]	; 0x2c
   4dfe4:	ldr	r2, [sp, #28]
   4dfe8:	ldr	r7, [sp, #24]
   4dfec:	mla	r0, r2, r0, r7
   4dff0:	mov	r2, #0
   4dff4:	add	r0, r4, r0, lsl #3
   4dff8:	ldr	r4, [fp, #8]
   4dffc:	cmp	r6, #1
   4e000:	blt	4e044 <GetDataSlab+0x221c8>
   4e004:	mov	r7, #0
   4e008:	ldr	r6, [lr]
   4e00c:	mul	r6, r6, r7
   4e010:	ldrb	r6, [r0, r6, lsl #3]
   4e014:	strb	r6, [r5, r7]
   4e018:	add	r7, r7, #1
   4e01c:	ldr	r6, [sl]
   4e020:	cmp	r7, r6
   4e024:	blt	4e008 <GetDataSlab+0x2218c>
   4e028:	ldr	r1, [sp, #32]
   4e02c:	ldr	r3, [sp, #36]	; 0x24
   4e030:	add	r5, r5, r7
   4e034:	ldr	r7, [r4]
   4e038:	ldr	r1, [r1]
   4e03c:	ldr	r3, [r3]
   4e040:	b	4e048 <GetDataSlab+0x221cc>
   4e044:	ldr	r7, [sp, #44]	; 0x2c
   4e048:	str	r7, [sp, #44]	; 0x2c
   4e04c:	mul	r7, r7, r3
   4e050:	add	r2, r2, #1
   4e054:	add	r0, r0, r7, lsl #3
   4e058:	cmp	r2, r1
   4e05c:	blt	4dffc <GetDataSlab+0x22180>
   4e060:	mov	r0, #0
   4e064:	mov	r9, r6
   4e068:	ldr	r6, [sp, #44]	; 0x2c
   4e06c:	cmp	ip, #13
   4e070:	bne	2e97c <GetDataSlab+0x2b00>
   4e074:	b	527c0 <GetDataSlab+0x26944>
   4e078:	cmp	r1, #1
   4e07c:	blt	530e8 <GetDataSlab+0x2726c>
   4e080:	ldr	r5, [sp, #44]	; 0x2c
   4e084:	ldr	r0, [sp, #28]
   4e088:	ldr	r1, [sp, #24]
   4e08c:	mov	r7, #0
   4e090:	mla	r0, r0, r5, r1
   4e094:	add	r2, r4, r0
   4e098:	ldr	r0, [sp, #60]	; 0x3c
   4e09c:	cmp	r0, #1
   4e0a0:	blt	4e0f4 <GetDataSlab+0x22278>
   4e0a4:	ldr	r5, [sp, #68]	; 0x44
   4e0a8:	ldr	r4, [fp, #8]
   4e0ac:	mov	r0, #0
   4e0b0:	ldr	r6, [lr]
   4e0b4:	mul	r6, r6, r0
   4e0b8:	ldrb	r6, [r2, r6]
   4e0bc:	strb	r6, [r5, r0]
   4e0c0:	add	r0, r0, #1
   4e0c4:	ldr	r6, [sl]
   4e0c8:	cmp	r0, r6
   4e0cc:	blt	4e0b0 <GetDataSlab+0x22234>
   4e0d0:	add	r5, r5, r0
   4e0d4:	ldr	r0, [sp, #32]
   4e0d8:	str	r6, [sp, #60]	; 0x3c
   4e0dc:	str	r5, [sp, #68]	; 0x44
   4e0e0:	ldr	r5, [r4]
   4e0e4:	ldr	r6, [r0]
   4e0e8:	ldr	r0, [sp, #36]	; 0x24
   4e0ec:	ldr	r0, [r0]
   4e0f0:	b	4e100 <GetDataSlab+0x22284>
   4e0f4:	ldr	r1, [sp, #52]	; 0x34
   4e0f8:	ldr	r0, [sp, #48]	; 0x30
   4e0fc:	mov	r6, r1
   4e100:	add	r7, r7, #1
   4e104:	str	r0, [sp, #48]	; 0x30
   4e108:	mla	r2, r5, r0, r2
   4e10c:	mov	r0, #0
   4e110:	mov	r1, r6
   4e114:	str	r6, [sp, #52]	; 0x34
   4e118:	cmp	r7, r6
   4e11c:	blt	4e098 <GetDataSlab+0x2221c>
   4e120:	b	2e97c <GetDataSlab+0x2b00>
   4e124:	cmp	r1, #1
   4e128:	blt	530fc <GetDataSlab+0x27280>
   4e12c:	ldr	r5, [sp, #44]	; 0x2c
   4e130:	ldr	r0, [sp, #28]
   4e134:	ldr	r1, [sp, #24]
   4e138:	mov	r7, #0
   4e13c:	mla	r0, r0, r5, r1
   4e140:	add	r2, r4, r0, lsl #1
   4e144:	ldr	r0, [sp, #60]	; 0x3c
   4e148:	cmp	r0, #1
   4e14c:	blt	4e1a0 <GetDataSlab+0x22324>
   4e150:	ldr	r5, [sp, #68]	; 0x44
   4e154:	ldr	r4, [fp, #8]
   4e158:	mov	r0, #0
   4e15c:	ldr	r6, [lr]
   4e160:	mul	r6, r6, r0
   4e164:	ldrb	r6, [r2, r6, lsl #1]
   4e168:	strb	r6, [r5, r0]
   4e16c:	add	r0, r0, #1
   4e170:	ldr	r6, [sl]
   4e174:	cmp	r0, r6
   4e178:	blt	4e15c <GetDataSlab+0x222e0>
   4e17c:	add	r5, r5, r0
   4e180:	ldr	r0, [sp, #32]
   4e184:	str	r6, [sp, #60]	; 0x3c
   4e188:	str	r5, [sp, #68]	; 0x44
   4e18c:	ldr	r5, [r4]
   4e190:	ldr	r6, [r0]
   4e194:	ldr	r0, [sp, #36]	; 0x24
   4e198:	ldr	r0, [r0]
   4e19c:	b	4e1ac <GetDataSlab+0x22330>
   4e1a0:	ldr	r1, [sp, #52]	; 0x34
   4e1a4:	ldr	r0, [sp, #48]	; 0x30
   4e1a8:	mov	r6, r1
   4e1ac:	str	r0, [sp, #48]	; 0x30
   4e1b0:	mul	r0, r5, r0
   4e1b4:	add	r7, r7, #1
   4e1b8:	mov	r1, r6
   4e1bc:	str	r6, [sp, #52]	; 0x34
   4e1c0:	add	r2, r2, r0, lsl #1
   4e1c4:	mov	r0, #0
   4e1c8:	cmp	r7, r6
   4e1cc:	blt	4e144 <GetDataSlab+0x222c8>
   4e1d0:	b	2e97c <GetDataSlab+0x2b00>
   4e1d4:	cmp	r1, #1
   4e1d8:	blt	53110 <GetDataSlab+0x27294>
   4e1dc:	ldr	r5, [sp, #44]	; 0x2c
   4e1e0:	ldr	r0, [sp, #28]
   4e1e4:	ldr	r1, [sp, #24]
   4e1e8:	mov	r7, #0
   4e1ec:	mla	r0, r0, r5, r1
   4e1f0:	add	r2, r4, r0, lsl #1
   4e1f4:	ldr	r0, [sp, #60]	; 0x3c
   4e1f8:	cmp	r0, #1
   4e1fc:	blt	4e250 <GetDataSlab+0x223d4>
   4e200:	ldr	r5, [sp, #68]	; 0x44
   4e204:	ldr	r4, [fp, #8]
   4e208:	mov	r0, #0
   4e20c:	ldr	r6, [lr]
   4e210:	mul	r6, r6, r0
   4e214:	ldrb	r6, [r2, r6, lsl #1]
   4e218:	strb	r6, [r5, r0]
   4e21c:	add	r0, r0, #1
   4e220:	ldr	r6, [sl]
   4e224:	cmp	r0, r6
   4e228:	blt	4e20c <GetDataSlab+0x22390>
   4e22c:	add	r5, r5, r0
   4e230:	ldr	r0, [sp, #32]
   4e234:	str	r6, [sp, #60]	; 0x3c
   4e238:	str	r5, [sp, #68]	; 0x44
   4e23c:	ldr	r5, [r4]
   4e240:	ldr	r6, [r0]
   4e244:	ldr	r0, [sp, #36]	; 0x24
   4e248:	ldr	r0, [r0]
   4e24c:	b	4e25c <GetDataSlab+0x223e0>
   4e250:	ldr	r1, [sp, #52]	; 0x34
   4e254:	ldr	r0, [sp, #48]	; 0x30
   4e258:	mov	r6, r1
   4e25c:	str	r0, [sp, #48]	; 0x30
   4e260:	mul	r0, r5, r0
   4e264:	add	r7, r7, #1
   4e268:	mov	r1, r6
   4e26c:	str	r6, [sp, #52]	; 0x34
   4e270:	add	r2, r2, r0, lsl #1
   4e274:	mov	r0, #0
   4e278:	cmp	r7, r6
   4e27c:	blt	4e1f4 <GetDataSlab+0x22378>
   4e280:	b	2e97c <GetDataSlab+0x2b00>
   4e284:	cmp	r1, #1
   4e288:	blt	53124 <GetDataSlab+0x272a8>
   4e28c:	ldr	r5, [sp, #44]	; 0x2c
   4e290:	ldr	r0, [sp, #28]
   4e294:	ldr	r1, [sp, #24]
   4e298:	mov	r7, #0
   4e29c:	mla	r0, r0, r5, r1
   4e2a0:	add	r2, r4, r0, lsl #2
   4e2a4:	ldr	r0, [sp, #60]	; 0x3c
   4e2a8:	cmp	r0, #1
   4e2ac:	blt	4e300 <GetDataSlab+0x22484>
   4e2b0:	ldr	r5, [sp, #68]	; 0x44
   4e2b4:	ldr	r4, [fp, #8]
   4e2b8:	mov	r0, #0
   4e2bc:	ldr	r6, [lr]
   4e2c0:	mul	r6, r6, r0
   4e2c4:	ldr	r6, [r2, r6, lsl #2]
   4e2c8:	strb	r6, [r5, r0]
   4e2cc:	add	r0, r0, #1
   4e2d0:	ldr	r6, [sl]
   4e2d4:	cmp	r0, r6
   4e2d8:	blt	4e2bc <GetDataSlab+0x22440>
   4e2dc:	add	r5, r5, r0
   4e2e0:	ldr	r0, [sp, #32]
   4e2e4:	str	r6, [sp, #60]	; 0x3c
   4e2e8:	str	r5, [sp, #68]	; 0x44
   4e2ec:	ldr	r5, [r4]
   4e2f0:	ldr	r6, [r0]
   4e2f4:	ldr	r0, [sp, #36]	; 0x24
   4e2f8:	ldr	r0, [r0]
   4e2fc:	b	4e30c <GetDataSlab+0x22490>
   4e300:	ldr	r1, [sp, #52]	; 0x34
   4e304:	ldr	r0, [sp, #48]	; 0x30
   4e308:	mov	r6, r1
   4e30c:	str	r0, [sp, #48]	; 0x30
   4e310:	mul	r0, r5, r0
   4e314:	add	r7, r7, #1
   4e318:	mov	r1, r6
   4e31c:	str	r6, [sp, #52]	; 0x34
   4e320:	add	r2, r2, r0, lsl #2
   4e324:	mov	r0, #0
   4e328:	cmp	r7, r6
   4e32c:	blt	4e2a4 <GetDataSlab+0x22428>
   4e330:	b	2e97c <GetDataSlab+0x2b00>
   4e334:	cmp	r1, #1
   4e338:	blt	53138 <GetDataSlab+0x272bc>
   4e33c:	ldr	r5, [sp, #44]	; 0x2c
   4e340:	ldr	r0, [sp, #28]
   4e344:	ldr	r1, [sp, #24]
   4e348:	mov	r7, #0
   4e34c:	mla	r0, r0, r5, r1
   4e350:	add	r2, r4, r0, lsl #2
   4e354:	ldr	r0, [sp, #60]	; 0x3c
   4e358:	cmp	r0, #1
   4e35c:	blt	4e3b0 <GetDataSlab+0x22534>
   4e360:	ldr	r5, [sp, #68]	; 0x44
   4e364:	ldr	r4, [fp, #8]
   4e368:	mov	r0, #0
   4e36c:	ldr	r6, [lr]
   4e370:	mul	r6, r6, r0
   4e374:	ldr	r6, [r2, r6, lsl #2]
   4e378:	strb	r6, [r5, r0]
   4e37c:	add	r0, r0, #1
   4e380:	ldr	r6, [sl]
   4e384:	cmp	r0, r6
   4e388:	blt	4e36c <GetDataSlab+0x224f0>
   4e38c:	add	r5, r5, r0
   4e390:	ldr	r0, [sp, #32]
   4e394:	str	r6, [sp, #60]	; 0x3c
   4e398:	str	r5, [sp, #68]	; 0x44
   4e39c:	ldr	r5, [r4]
   4e3a0:	ldr	r6, [r0]
   4e3a4:	ldr	r0, [sp, #36]	; 0x24
   4e3a8:	ldr	r0, [r0]
   4e3ac:	b	4e3bc <GetDataSlab+0x22540>
   4e3b0:	ldr	r1, [sp, #52]	; 0x34
   4e3b4:	ldr	r0, [sp, #48]	; 0x30
   4e3b8:	mov	r6, r1
   4e3bc:	str	r0, [sp, #48]	; 0x30
   4e3c0:	mul	r0, r5, r0
   4e3c4:	add	r7, r7, #1
   4e3c8:	mov	r1, r6
   4e3cc:	str	r6, [sp, #52]	; 0x34
   4e3d0:	add	r2, r2, r0, lsl #2
   4e3d4:	mov	r0, #0
   4e3d8:	cmp	r7, r6
   4e3dc:	blt	4e354 <GetDataSlab+0x224d8>
   4e3e0:	b	2e97c <GetDataSlab+0x2b00>
   4e3e4:	cmp	r1, #1
   4e3e8:	blt	5314c <GetDataSlab+0x272d0>
   4e3ec:	ldr	r5, [sp, #44]	; 0x2c
   4e3f0:	ldr	r0, [sp, #28]
   4e3f4:	ldr	r1, [sp, #24]
   4e3f8:	mov	r7, #0
   4e3fc:	mla	r0, r0, r5, r1
   4e400:	add	r2, r4, r0, lsl #2
   4e404:	ldr	r0, [sp, #60]	; 0x3c
   4e408:	cmp	r0, #1
   4e40c:	blt	4e46c <GetDataSlab+0x225f0>
   4e410:	ldr	r5, [sp, #68]	; 0x44
   4e414:	ldr	r4, [fp, #8]
   4e418:	mov	r0, #0
   4e41c:	ldr	r6, [lr]
   4e420:	mul	r6, r6, r0
   4e424:	add	r6, r2, r6, lsl #2
   4e428:	vldr	s0, [r6]
   4e42c:	vcvt.u32.f32	s0, s0
   4e430:	vmov	r6, s0
   4e434:	strb	r6, [r5, r0]
   4e438:	add	r0, r0, #1
   4e43c:	ldr	r6, [sl]
   4e440:	cmp	r0, r6
   4e444:	blt	4e41c <GetDataSlab+0x225a0>
   4e448:	add	r5, r5, r0
   4e44c:	ldr	r0, [sp, #32]
   4e450:	str	r6, [sp, #60]	; 0x3c
   4e454:	str	r5, [sp, #68]	; 0x44
   4e458:	ldr	r5, [r4]
   4e45c:	ldr	r6, [r0]
   4e460:	ldr	r0, [sp, #36]	; 0x24
   4e464:	ldr	r0, [r0]
   4e468:	b	4e478 <GetDataSlab+0x225fc>
   4e46c:	ldr	r1, [sp, #52]	; 0x34
   4e470:	ldr	r0, [sp, #48]	; 0x30
   4e474:	mov	r6, r1
   4e478:	str	r0, [sp, #48]	; 0x30
   4e47c:	mul	r0, r5, r0
   4e480:	add	r7, r7, #1
   4e484:	mov	r1, r6
   4e488:	str	r6, [sp, #52]	; 0x34
   4e48c:	add	r2, r2, r0, lsl #2
   4e490:	mov	r0, #0
   4e494:	cmp	r7, r6
   4e498:	blt	4e404 <GetDataSlab+0x22588>
   4e49c:	b	2e97c <GetDataSlab+0x2b00>
   4e4a0:	cmp	r1, #1
   4e4a4:	blt	53160 <GetDataSlab+0x272e4>
   4e4a8:	ldr	r5, [sp, #44]	; 0x2c
   4e4ac:	ldr	r0, [sp, #28]
   4e4b0:	ldr	r1, [sp, #24]
   4e4b4:	mov	r7, #0
   4e4b8:	mla	r0, r0, r5, r1
   4e4bc:	add	r2, r4, r0, lsl #3
   4e4c0:	ldr	r0, [sp, #60]	; 0x3c
   4e4c4:	cmp	r0, #1
   4e4c8:	blt	4e528 <GetDataSlab+0x226ac>
   4e4cc:	ldr	r5, [sp, #68]	; 0x44
   4e4d0:	ldr	r4, [fp, #8]
   4e4d4:	mov	r0, #0
   4e4d8:	ldr	r6, [lr]
   4e4dc:	mul	r6, r6, r0
   4e4e0:	add	r6, r2, r6, lsl #3
   4e4e4:	vldr	d16, [r6]
   4e4e8:	vcvt.u32.f64	s0, d16
   4e4ec:	vmov	r6, s0
   4e4f0:	strb	r6, [r5, r0]
   4e4f4:	add	r0, r0, #1
   4e4f8:	ldr	r6, [sl]
   4e4fc:	cmp	r0, r6
   4e500:	blt	4e4d8 <GetDataSlab+0x2265c>
   4e504:	add	r5, r5, r0
   4e508:	ldr	r0, [sp, #32]
   4e50c:	str	r6, [sp, #60]	; 0x3c
   4e510:	str	r5, [sp, #68]	; 0x44
   4e514:	ldr	r5, [r4]
   4e518:	ldr	r6, [r0]
   4e51c:	ldr	r0, [sp, #36]	; 0x24
   4e520:	ldr	r0, [r0]
   4e524:	b	4e534 <GetDataSlab+0x226b8>
   4e528:	ldr	r1, [sp, #52]	; 0x34
   4e52c:	ldr	r0, [sp, #48]	; 0x30
   4e530:	mov	r6, r1
   4e534:	str	r0, [sp, #48]	; 0x30
   4e538:	mul	r0, r5, r0
   4e53c:	add	r7, r7, #1
   4e540:	mov	r1, r6
   4e544:	str	r6, [sp, #52]	; 0x34
   4e548:	add	r2, r2, r0, lsl #3
   4e54c:	mov	r0, #0
   4e550:	cmp	r7, r6
   4e554:	blt	4e4c0 <GetDataSlab+0x22644>
   4e558:	b	2e97c <GetDataSlab+0x2b00>
   4e55c:	cmp	r1, #1
   4e560:	blt	53174 <GetDataSlab+0x272f8>
   4e564:	ldr	r0, [sp, #44]	; 0x2c
   4e568:	ldr	r2, [sp, #28]
   4e56c:	ldr	r7, [sp, #24]
   4e570:	mla	r0, r2, r0, r7
   4e574:	mov	r2, #0
   4e578:	add	r0, r4, r0, lsl #3
   4e57c:	ldr	r4, [fp, #8]
   4e580:	cmp	r6, #1
   4e584:	blt	4e5c8 <GetDataSlab+0x2274c>
   4e588:	mov	r7, #0
   4e58c:	ldr	r6, [lr]
   4e590:	mul	r6, r6, r7
   4e594:	ldrb	r6, [r0, r6, lsl #3]
   4e598:	strb	r6, [r5, r7]
   4e59c:	add	r7, r7, #1
   4e5a0:	ldr	r6, [sl]
   4e5a4:	cmp	r7, r6
   4e5a8:	blt	4e58c <GetDataSlab+0x22710>
   4e5ac:	ldr	r1, [sp, #32]
   4e5b0:	ldr	r3, [sp, #36]	; 0x24
   4e5b4:	add	r5, r5, r7
   4e5b8:	ldr	r7, [r4]
   4e5bc:	ldr	r1, [r1]
   4e5c0:	ldr	r3, [r3]
   4e5c4:	b	4e5cc <GetDataSlab+0x22750>
   4e5c8:	ldr	r7, [sp, #44]	; 0x2c
   4e5cc:	str	r7, [sp, #44]	; 0x2c
   4e5d0:	mul	r7, r7, r3
   4e5d4:	add	r2, r2, #1
   4e5d8:	add	r0, r0, r7, lsl #3
   4e5dc:	cmp	r2, r1
   4e5e0:	blt	4e580 <GetDataSlab+0x22704>
   4e5e4:	mov	r0, #0
   4e5e8:	mov	r9, r6
   4e5ec:	ldr	r6, [sp, #44]	; 0x2c
   4e5f0:	cmp	ip, #13
   4e5f4:	bne	2e97c <GetDataSlab+0x2b00>
   4e5f8:	b	52890 <GetDataSlab+0x26a14>
   4e5fc:	ldr	r1, [sp, #52]	; 0x34
   4e600:	mov	r0, #0
   4e604:	cmp	r1, #1
   4e608:	ldrge	r1, [sp, #60]	; 0x3c
   4e60c:	cmpge	r1, #1
   4e610:	blt	2e97c <GetDataSlab+0x2b00>
   4e614:	ldr	r0, [sp, #48]	; 0x30
   4e618:	ldr	r2, [sp, #28]
   4e61c:	ldr	r3, [sp, #24]
   4e620:	ldr	r8, [sp, #68]	; 0x44
   4e624:	ldr	r7, [sp, #56]	; 0x38
   4e628:	mov	r6, #0
   4e62c:	add	r4, sp, #168	; 0xa8
   4e630:	mul	r0, r0, ip
   4e634:	mla	r1, r2, ip, r3
   4e638:	str	r0, [sp, #48]	; 0x30
   4e63c:	ldr	r0, [sp, #56]	; 0x38
   4e640:	str	r1, [sp, #32]
   4e644:	add	lr, r0, r1
   4e648:	ldr	r0, [sp, #60]	; 0x3c
   4e64c:	mov	r1, r0
   4e650:	add	r0, r0, r3
   4e654:	mla	r0, r2, ip, r0
   4e658:	cmp	r1, #7
   4e65c:	mov	r2, #0
   4e660:	str	r0, [sp, #40]	; 0x28
   4e664:	sub	r0, r9, #1
   4e668:	movwhi	r2, #1
   4e66c:	clz	r0, r0
   4e670:	lsr	r0, r0, #5
   4e674:	and	r0, r2, r0
   4e678:	lsl	r2, r9, #3
   4e67c:	str	r0, [sp, #44]	; 0x2c
   4e680:	lsl	r0, r1, #1
   4e684:	str	r0, [sp, #64]	; 0x40
   4e688:	bic	r0, r1, #7
   4e68c:	str	r0, [sp, #36]	; 0x24
   4e690:	ldr	r0, [sp, #44]	; 0x2c
   4e694:	mov	r5, #0
   4e698:	cmp	r0, #0
   4e69c:	mov	r0, r8
   4e6a0:	beq	4e748 <GetDataSlab+0x228cc>
   4e6a4:	ldr	r1, [sp, #64]	; 0x40
   4e6a8:	ldr	r0, [sp, #48]	; 0x30
   4e6ac:	mul	r3, r1, r6
   4e6b0:	ldr	r1, [sp, #68]	; 0x44
   4e6b4:	mul	r0, r0, r6
   4e6b8:	add	r5, r1, r3
   4e6bc:	ldr	r1, [sp, #40]	; 0x28
   4e6c0:	add	r1, r1, r0
   4e6c4:	add	r1, r7, r1
   4e6c8:	cmp	r5, r1
   4e6cc:	bcs	4e700 <GetDataSlab+0x22884>
   4e6d0:	ldr	r1, [sp, #64]	; 0x40
   4e6d4:	mov	r5, #0
   4e6d8:	add	r1, r1, r3
   4e6dc:	ldr	r3, [sp, #68]	; 0x44
   4e6e0:	add	r1, r3, r1
   4e6e4:	ldr	r3, [sp, #32]
   4e6e8:	add	r0, r3, r0
   4e6ec:	ldr	r3, [sp, #56]	; 0x38
   4e6f0:	add	r0, r3, r0
   4e6f4:	cmp	r0, r1
   4e6f8:	mov	r0, r8
   4e6fc:	bcc	4e748 <GetDataSlab+0x228cc>
   4e700:	ldr	r5, [sp, #36]	; 0x24
   4e704:	mov	r3, lr
   4e708:	mov	ip, r8
   4e70c:	add	r0, r8, r5, lsl #1
   4e710:	ldr	r1, [r3]
   4e714:	ldr	sl, [r3, #4]
   4e718:	add	r3, r3, r2
   4e71c:	subs	r5, r5, #8
   4e720:	str	sl, [sp, #172]	; 0xac
   4e724:	str	r1, [sp, #168]	; 0xa8
   4e728:	vld1.8	{d16}, [r4 :64]
   4e72c:	vmovl.u8	q8, d16
   4e730:	vst1.16	{d16-d17}, [ip]!
   4e734:	bne	4e710 <GetDataSlab+0x22894>
   4e738:	ldr	r1, [sp, #60]	; 0x3c
   4e73c:	ldr	r5, [sp, #36]	; 0x24
   4e740:	cmp	r1, r5
   4e744:	beq	4e764 <GetDataSlab+0x228e8>
   4e748:	ldr	r1, [sp, #60]	; 0x3c
   4e74c:	mla	r3, r9, r5, lr
   4e750:	sub	r5, r1, r5
   4e754:	ldrb	r1, [r3], r9
   4e758:	subs	r5, r5, #1
   4e75c:	strh	r1, [r0], #2
   4e760:	bne	4e754 <GetDataSlab+0x228d8>
   4e764:	ldr	r0, [sp, #48]	; 0x30
   4e768:	ldr	r1, [sp, #52]	; 0x34
   4e76c:	add	r6, r6, #1
   4e770:	add	lr, lr, r0
   4e774:	ldr	r0, [sp, #64]	; 0x40
   4e778:	cmp	r6, r1
   4e77c:	add	r8, r8, r0
   4e780:	mov	r0, #0
   4e784:	bne	4e690 <GetDataSlab+0x22814>
   4e788:	b	2e97c <GetDataSlab+0x2b00>
   4e78c:	ldr	r1, [sp, #52]	; 0x34
   4e790:	mov	r0, #0
   4e794:	cmp	r1, #1
   4e798:	ldrge	r1, [sp, #60]	; 0x3c
   4e79c:	cmpge	r1, #1
   4e7a0:	blt	2e97c <GetDataSlab+0x2b00>
   4e7a4:	ldr	r0, [sp, #28]
   4e7a8:	ldr	r1, [sp, #24]
   4e7ac:	ldr	r8, [sp, #68]	; 0x44
   4e7b0:	mov	r3, #0
   4e7b4:	lsl	r4, r9, #1
   4e7b8:	lsl	r2, r9, #4
   4e7bc:	mla	r0, r0, ip, r1
   4e7c0:	ldr	r1, [sp, #56]	; 0x38
   4e7c4:	lsl	r5, r0, #1
   4e7c8:	str	r5, [sp, #40]	; 0x28
   4e7cc:	add	lr, r1, r0, lsl #1
   4e7d0:	ldr	r1, [sp, #60]	; 0x3c
   4e7d4:	sub	r0, r9, #1
   4e7d8:	clz	r0, r0
   4e7dc:	lsr	r0, r0, #5
   4e7e0:	mov	r7, r1
   4e7e4:	cmp	r1, #7
   4e7e8:	mov	r1, #0
   4e7ec:	movwhi	r1, #1
   4e7f0:	lsl	r9, r7, #1
   4e7f4:	and	r0, r1, r0
   4e7f8:	str	r0, [sp, #64]	; 0x40
   4e7fc:	ldr	r0, [sp, #48]	; 0x30
   4e800:	mul	r0, r0, ip
   4e804:	lsl	sl, r0, #1
   4e808:	add	r0, r5, r7, lsl #1
   4e80c:	str	r0, [sp, #48]	; 0x30
   4e810:	bic	r0, r7, #7
   4e814:	str	r0, [sp, #44]	; 0x2c
   4e818:	ldr	r0, [sp, #64]	; 0x40
   4e81c:	mov	r1, #0
   4e820:	cmp	r0, #0
   4e824:	mov	r0, r8
   4e828:	beq	4e8b4 <GetDataSlab+0x22a38>
   4e82c:	ldr	r7, [sp, #48]	; 0x30
   4e830:	mul	r0, sl, r3
   4e834:	ldr	r6, [sp, #68]	; 0x44
   4e838:	mul	r1, r9, r3
   4e83c:	add	r5, r7, r0
   4e840:	ldr	r7, [sp, #56]	; 0x38
   4e844:	add	r6, r6, r1
   4e848:	add	r5, r7, r5
   4e84c:	cmp	r6, r5
   4e850:	bcs	4e880 <GetDataSlab+0x22a04>
   4e854:	ldr	r6, [sp, #68]	; 0x44
   4e858:	add	r1, r9, r1
   4e85c:	ldr	r7, [sp, #40]	; 0x28
   4e860:	add	r1, r6, r1
   4e864:	ldr	r6, [sp, #56]	; 0x38
   4e868:	add	r0, r7, r0
   4e86c:	add	r0, r6, r0
   4e870:	cmp	r0, r1
   4e874:	mov	r1, #0
   4e878:	mov	r0, r8
   4e87c:	bcc	4e8b4 <GetDataSlab+0x22a38>
   4e880:	ldr	r5, [sp, #44]	; 0x2c
   4e884:	mov	r1, lr
   4e888:	mov	r6, r8
   4e88c:	add	r0, r8, r5, lsl #1
   4e890:	vld1.16	{d16-d17}, [r1], r2
   4e894:	subs	r5, r5, #8
   4e898:	vst1.16	{d16-d17}, [r6]!
   4e89c:	bne	4e890 <GetDataSlab+0x22a14>
   4e8a0:	ldr	r1, [sp, #60]	; 0x3c
   4e8a4:	ldr	r7, [sp, #44]	; 0x2c
   4e8a8:	cmp	r1, r7
   4e8ac:	mov	r1, r7
   4e8b0:	beq	4e8d0 <GetDataSlab+0x22a54>
   4e8b4:	ldr	r7, [sp, #60]	; 0x3c
   4e8b8:	mla	r5, r4, r1, lr
   4e8bc:	sub	ip, r7, r1
   4e8c0:	ldrh	r1, [r5], r4
   4e8c4:	subs	ip, ip, #1
   4e8c8:	strh	r1, [r0], #2
   4e8cc:	bne	4e8c0 <GetDataSlab+0x22a44>
   4e8d0:	ldr	r1, [sp, #52]	; 0x34
   4e8d4:	add	r3, r3, #1
   4e8d8:	add	lr, lr, sl
   4e8dc:	add	r8, r8, r9
   4e8e0:	mov	r0, #0
   4e8e4:	cmp	r3, r1
   4e8e8:	bne	4e818 <GetDataSlab+0x2299c>
   4e8ec:	b	2e97c <GetDataSlab+0x2b00>
   4e8f0:	ldr	r1, [sp, #52]	; 0x34
   4e8f4:	mov	r0, #0
   4e8f8:	cmp	r1, #1
   4e8fc:	ldrge	r1, [sp, #60]	; 0x3c
   4e900:	cmpge	r1, #1
   4e904:	blt	2e97c <GetDataSlab+0x2b00>
   4e908:	ldr	r0, [sp, #28]
   4e90c:	ldr	r1, [sp, #24]
   4e910:	ldr	r8, [sp, #68]	; 0x44
   4e914:	mov	r3, #0
   4e918:	lsl	r4, r9, #1
   4e91c:	lsl	r2, r9, #4
   4e920:	mla	r0, r0, ip, r1
   4e924:	ldr	r1, [sp, #56]	; 0x38
   4e928:	lsl	r5, r0, #1
   4e92c:	str	r5, [sp, #40]	; 0x28
   4e930:	add	lr, r1, r0, lsl #1
   4e934:	ldr	r1, [sp, #60]	; 0x3c
   4e938:	sub	r0, r9, #1
   4e93c:	clz	r0, r0
   4e940:	lsr	r0, r0, #5
   4e944:	mov	r7, r1
   4e948:	cmp	r1, #7
   4e94c:	mov	r1, #0
   4e950:	movwhi	r1, #1
   4e954:	lsl	r9, r7, #1
   4e958:	and	r0, r1, r0
   4e95c:	str	r0, [sp, #64]	; 0x40
   4e960:	ldr	r0, [sp, #48]	; 0x30
   4e964:	mul	r0, r0, ip
   4e968:	lsl	sl, r0, #1
   4e96c:	add	r0, r5, r7, lsl #1
   4e970:	str	r0, [sp, #48]	; 0x30
   4e974:	bic	r0, r7, #7
   4e978:	str	r0, [sp, #44]	; 0x2c
   4e97c:	ldr	r0, [sp, #64]	; 0x40
   4e980:	mov	r1, #0
   4e984:	cmp	r0, #0
   4e988:	mov	r0, r8
   4e98c:	beq	4ea18 <GetDataSlab+0x22b9c>
   4e990:	ldr	r7, [sp, #48]	; 0x30
   4e994:	mul	r0, sl, r3
   4e998:	ldr	r6, [sp, #68]	; 0x44
   4e99c:	mul	r1, r9, r3
   4e9a0:	add	r5, r7, r0
   4e9a4:	ldr	r7, [sp, #56]	; 0x38
   4e9a8:	add	r6, r6, r1
   4e9ac:	add	r5, r7, r5
   4e9b0:	cmp	r6, r5
   4e9b4:	bcs	4e9e4 <GetDataSlab+0x22b68>
   4e9b8:	ldr	r6, [sp, #68]	; 0x44
   4e9bc:	add	r1, r9, r1
   4e9c0:	ldr	r7, [sp, #40]	; 0x28
   4e9c4:	add	r1, r6, r1
   4e9c8:	ldr	r6, [sp, #56]	; 0x38
   4e9cc:	add	r0, r7, r0
   4e9d0:	add	r0, r6, r0
   4e9d4:	cmp	r0, r1
   4e9d8:	mov	r1, #0
   4e9dc:	mov	r0, r8
   4e9e0:	bcc	4ea18 <GetDataSlab+0x22b9c>
   4e9e4:	ldr	r5, [sp, #44]	; 0x2c
   4e9e8:	mov	r1, lr
   4e9ec:	mov	r6, r8
   4e9f0:	add	r0, r8, r5, lsl #1
   4e9f4:	vld1.16	{d16-d17}, [r1], r2
   4e9f8:	subs	r5, r5, #8
   4e9fc:	vst1.16	{d16-d17}, [r6]!
   4ea00:	bne	4e9f4 <GetDataSlab+0x22b78>
   4ea04:	ldr	r1, [sp, #60]	; 0x3c
   4ea08:	ldr	r7, [sp, #44]	; 0x2c
   4ea0c:	cmp	r1, r7
   4ea10:	mov	r1, r7
   4ea14:	beq	4ea34 <GetDataSlab+0x22bb8>
   4ea18:	ldr	r7, [sp, #60]	; 0x3c
   4ea1c:	mla	r5, r4, r1, lr
   4ea20:	sub	ip, r7, r1
   4ea24:	ldrh	r1, [r5], r4
   4ea28:	subs	ip, ip, #1
   4ea2c:	strh	r1, [r0], #2
   4ea30:	bne	4ea24 <GetDataSlab+0x22ba8>
   4ea34:	ldr	r1, [sp, #52]	; 0x34
   4ea38:	add	r3, r3, #1
   4ea3c:	add	lr, lr, sl
   4ea40:	add	r8, r8, r9
   4ea44:	mov	r0, #0
   4ea48:	cmp	r3, r1
   4ea4c:	bne	4e97c <GetDataSlab+0x22b00>
   4ea50:	b	2e97c <GetDataSlab+0x2b00>
   4ea54:	ldr	r1, [sp, #52]	; 0x34
   4ea58:	mov	r0, #0
   4ea5c:	cmp	r1, #1
   4ea60:	ldrge	r1, [sp, #60]	; 0x3c
   4ea64:	cmpge	r1, #1
   4ea68:	blt	2e97c <GetDataSlab+0x2b00>
   4ea6c:	ldr	r0, [sp, #28]
   4ea70:	ldr	r1, [sp, #24]
   4ea74:	sub	r3, r9, #1
   4ea78:	mov	r7, ip
   4ea7c:	mov	r2, #0
   4ea80:	lsl	r6, r9, #2
   4ea84:	lsl	r4, r9, #4
   4ea88:	clz	r3, r3
   4ea8c:	lsr	r3, r3, #5
   4ea90:	mla	r0, r0, ip, r1
   4ea94:	ldr	r1, [sp, #56]	; 0x38
   4ea98:	add	r1, r1, r0, lsl #2
   4ea9c:	ldr	r0, [sp, #60]	; 0x3c
   4eaa0:	mov	r5, r0
   4eaa4:	cmp	r0, #3
   4eaa8:	mov	r0, #0
   4eaac:	movwhi	r0, #1
   4eab0:	lsl	r8, r5, #1
   4eab4:	bic	r9, r5, #3
   4eab8:	and	ip, r0, r3
   4eabc:	ldr	r0, [sp, #48]	; 0x30
   4eac0:	mul	r0, r0, r7
   4eac4:	lsl	lr, r0, #2
   4eac8:	ldr	r0, [sp, #68]	; 0x44
   4eacc:	cmp	ip, #0
   4ead0:	mov	r3, #0
   4ead4:	beq	4eb0c <GetDataSlab+0x22c90>
   4ead8:	ldr	r7, [sp, #68]	; 0x44
   4eadc:	mov	r3, r9
   4eae0:	mov	r5, r1
   4eae4:	add	r0, r7, r9, lsl #1
   4eae8:	vld1.32	{d16-d17}, [r5], r4
   4eaec:	subs	r3, r3, #4
   4eaf0:	vmovn.i32	d16, q8
   4eaf4:	vst1.16	{d16}, [r7]!
   4eaf8:	bne	4eae8 <GetDataSlab+0x22c6c>
   4eafc:	ldr	r3, [sp, #60]	; 0x3c
   4eb00:	cmp	r3, r9
   4eb04:	mov	r3, r9
   4eb08:	beq	4eb28 <GetDataSlab+0x22cac>
   4eb0c:	ldr	r7, [sp, #60]	; 0x3c
   4eb10:	mla	r5, r6, r3, r1
   4eb14:	sub	r3, r7, r3
   4eb18:	ldr	r7, [r5], r6
   4eb1c:	subs	r3, r3, #1
   4eb20:	strh	r7, [r0], #2
   4eb24:	bne	4eb18 <GetDataSlab+0x22c9c>
   4eb28:	ldr	r0, [sp, #68]	; 0x44
   4eb2c:	ldr	r3, [sp, #52]	; 0x34
   4eb30:	add	r2, r2, #1
   4eb34:	add	r1, r1, lr
   4eb38:	add	r0, r0, r8
   4eb3c:	cmp	r2, r3
   4eb40:	str	r0, [sp, #68]	; 0x44
   4eb44:	mov	r0, #0
   4eb48:	bne	4eac8 <GetDataSlab+0x22c4c>
   4eb4c:	b	2e97c <GetDataSlab+0x2b00>
   4eb50:	ldr	r1, [sp, #52]	; 0x34
   4eb54:	mov	r0, #0
   4eb58:	cmp	r1, #1
   4eb5c:	ldrge	r1, [sp, #60]	; 0x3c
   4eb60:	cmpge	r1, #1
   4eb64:	blt	2e97c <GetDataSlab+0x2b00>
   4eb68:	ldr	r0, [sp, #28]
   4eb6c:	ldr	r1, [sp, #24]
   4eb70:	sub	r3, r9, #1
   4eb74:	mov	r7, ip
   4eb78:	mov	r2, #0
   4eb7c:	lsl	r6, r9, #2
   4eb80:	lsl	r4, r9, #4
   4eb84:	clz	r3, r3
   4eb88:	lsr	r3, r3, #5
   4eb8c:	mla	r0, r0, ip, r1
   4eb90:	ldr	r1, [sp, #56]	; 0x38
   4eb94:	add	r1, r1, r0, lsl #2
   4eb98:	ldr	r0, [sp, #60]	; 0x3c
   4eb9c:	mov	r5, r0
   4eba0:	cmp	r0, #3
   4eba4:	mov	r0, #0
   4eba8:	movwhi	r0, #1
   4ebac:	lsl	r8, r5, #1
   4ebb0:	bic	r9, r5, #3
   4ebb4:	and	ip, r0, r3
   4ebb8:	ldr	r0, [sp, #48]	; 0x30
   4ebbc:	mul	r0, r0, r7
   4ebc0:	lsl	lr, r0, #2
   4ebc4:	ldr	r0, [sp, #68]	; 0x44
   4ebc8:	cmp	ip, #0
   4ebcc:	mov	r3, #0
   4ebd0:	beq	4ec08 <GetDataSlab+0x22d8c>
   4ebd4:	ldr	r7, [sp, #68]	; 0x44
   4ebd8:	mov	r3, r9
   4ebdc:	mov	r5, r1
   4ebe0:	add	r0, r7, r9, lsl #1
   4ebe4:	vld1.32	{d16-d17}, [r5], r4
   4ebe8:	subs	r3, r3, #4
   4ebec:	vmovn.i32	d16, q8
   4ebf0:	vst1.16	{d16}, [r7]!
   4ebf4:	bne	4ebe4 <GetDataSlab+0x22d68>
   4ebf8:	ldr	r3, [sp, #60]	; 0x3c
   4ebfc:	cmp	r3, r9
   4ec00:	mov	r3, r9
   4ec04:	beq	4ec24 <GetDataSlab+0x22da8>
   4ec08:	ldr	r7, [sp, #60]	; 0x3c
   4ec0c:	mla	r5, r6, r3, r1
   4ec10:	sub	r3, r7, r3
   4ec14:	ldr	r7, [r5], r6
   4ec18:	subs	r3, r3, #1
   4ec1c:	strh	r7, [r0], #2
   4ec20:	bne	4ec14 <GetDataSlab+0x22d98>
   4ec24:	ldr	r0, [sp, #68]	; 0x44
   4ec28:	ldr	r3, [sp, #52]	; 0x34
   4ec2c:	add	r2, r2, #1
   4ec30:	add	r1, r1, lr
   4ec34:	add	r0, r0, r8
   4ec38:	cmp	r2, r3
   4ec3c:	str	r0, [sp, #68]	; 0x44
   4ec40:	mov	r0, #0
   4ec44:	bne	4ebc4 <GetDataSlab+0x22d48>
   4ec48:	b	2e97c <GetDataSlab+0x2b00>
   4ec4c:	ldr	r1, [sp, #52]	; 0x34
   4ec50:	mov	r0, #0
   4ec54:	cmp	r1, #1
   4ec58:	ldrge	r1, [sp, #60]	; 0x3c
   4ec5c:	cmpge	r1, #1
   4ec60:	blt	2e97c <GetDataSlab+0x2b00>
   4ec64:	ldr	r0, [sp, #28]
   4ec68:	ldr	r1, [sp, #24]
   4ec6c:	sub	r3, r9, #1
   4ec70:	mov	r7, ip
   4ec74:	mov	r2, #0
   4ec78:	lsl	r6, r9, #2
   4ec7c:	lsl	r4, r9, #4
   4ec80:	clz	r3, r3
   4ec84:	lsr	r3, r3, #5
   4ec88:	mla	r0, r0, ip, r1
   4ec8c:	ldr	r1, [sp, #56]	; 0x38
   4ec90:	add	r1, r1, r0, lsl #2
   4ec94:	ldr	r0, [sp, #60]	; 0x3c
   4ec98:	mov	r5, r0
   4ec9c:	cmp	r0, #3
   4eca0:	mov	r0, #0
   4eca4:	movwhi	r0, #1
   4eca8:	lsl	r8, r5, #1
   4ecac:	bic	r9, r5, #3
   4ecb0:	and	ip, r0, r3
   4ecb4:	ldr	r0, [sp, #48]	; 0x30
   4ecb8:	mul	r0, r0, r7
   4ecbc:	lsl	lr, r0, #2
   4ecc0:	ldr	r0, [sp, #68]	; 0x44
   4ecc4:	cmp	ip, #0
   4ecc8:	mov	r3, #0
   4eccc:	beq	4ed08 <GetDataSlab+0x22e8c>
   4ecd0:	ldr	r7, [sp, #68]	; 0x44
   4ecd4:	mov	r3, r9
   4ecd8:	mov	r5, r1
   4ecdc:	add	r0, r7, r9, lsl #1
   4ece0:	vld1.32	{d16-d17}, [r5], r4
   4ece4:	subs	r3, r3, #4
   4ece8:	vcvt.s32.f32	q8, q8
   4ecec:	vmovn.i32	d16, q8
   4ecf0:	vst1.16	{d16}, [r7]!
   4ecf4:	bne	4ece0 <GetDataSlab+0x22e64>
   4ecf8:	ldr	r3, [sp, #60]	; 0x3c
   4ecfc:	cmp	r3, r9
   4ed00:	mov	r3, r9
   4ed04:	beq	4ed30 <GetDataSlab+0x22eb4>
   4ed08:	ldr	r7, [sp, #60]	; 0x3c
   4ed0c:	mla	r5, r6, r3, r1
   4ed10:	sub	r3, r7, r3
   4ed14:	vldr	s0, [r5]
   4ed18:	add	r5, r5, r6
   4ed1c:	subs	r3, r3, #1
   4ed20:	vcvt.s32.f32	s0, s0
   4ed24:	vmov	r7, s0
   4ed28:	strh	r7, [r0], #2
   4ed2c:	bne	4ed14 <GetDataSlab+0x22e98>
   4ed30:	ldr	r0, [sp, #68]	; 0x44
   4ed34:	ldr	r3, [sp, #52]	; 0x34
   4ed38:	add	r2, r2, #1
   4ed3c:	add	r1, r1, lr
   4ed40:	add	r0, r0, r8
   4ed44:	cmp	r2, r3
   4ed48:	str	r0, [sp, #68]	; 0x44
   4ed4c:	mov	r0, #0
   4ed50:	bne	4ecc0 <GetDataSlab+0x22e44>
   4ed54:	b	2e97c <GetDataSlab+0x2b00>
   4ed58:	ldr	r1, [sp, #52]	; 0x34
   4ed5c:	mov	r0, #0
   4ed60:	cmp	r1, #1
   4ed64:	ldrge	r1, [sp, #60]	; 0x3c
   4ed68:	cmpge	r1, #1
   4ed6c:	blt	2e97c <GetDataSlab+0x2b00>
   4ed70:	ldr	r0, [sp, #28]
   4ed74:	ldr	r1, [sp, #24]
   4ed78:	lsl	r7, r9, #3
   4ed7c:	mov	r6, #0
   4ed80:	mla	r0, r0, ip, r1
   4ed84:	ldr	r1, [sp, #56]	; 0x38
   4ed88:	add	r5, r1, r0, lsl #3
   4ed8c:	ldr	r0, [sp, #48]	; 0x30
   4ed90:	mul	r0, r0, ip
   4ed94:	lsl	ip, r0, #3
   4ed98:	ldr	r0, [sp, #60]	; 0x3c
   4ed9c:	lsl	lr, r0, #1
   4eda0:	ldr	r4, [sp, #60]	; 0x3c
   4eda4:	ldr	r3, [sp, #68]	; 0x44
   4eda8:	mov	r0, #0
   4edac:	mov	r1, r5
   4edb0:	vldr	d16, [r1]
   4edb4:	add	r1, r1, r7
   4edb8:	subs	r4, r4, #1
   4edbc:	vcvt.s32.f64	s0, d16
   4edc0:	vmov	r2, s0
   4edc4:	strh	r2, [r3, -r0]
   4edc8:	sub	r0, r0, #2
   4edcc:	bne	4edb0 <GetDataSlab+0x22f34>
   4edd0:	ldr	r1, [sp, #52]	; 0x34
   4edd4:	add	r6, r6, #1
   4edd8:	add	r3, r3, lr
   4eddc:	add	r5, r5, ip
   4ede0:	mov	r0, #0
   4ede4:	str	r3, [sp, #68]	; 0x44
   4ede8:	cmp	r6, r1
   4edec:	bne	4eda0 <GetDataSlab+0x22f24>
   4edf0:	b	2e97c <GetDataSlab+0x2b00>
   4edf4:	ldr	r1, [sp, #52]	; 0x34
   4edf8:	mov	r0, #0
   4edfc:	cmp	r1, #1
   4ee00:	ldrge	r1, [sp, #60]	; 0x3c
   4ee04:	cmpge	r1, #1
   4ee08:	blt	2e97c <GetDataSlab+0x2b00>
   4ee0c:	ldr	r0, [sp, #28]
   4ee10:	ldr	r1, [sp, #24]
   4ee14:	ldr	r7, [sp, #60]	; 0x3c
   4ee18:	mov	r3, #0
   4ee1c:	mov	r2, #0
   4ee20:	lsl	r6, r9, #3
   4ee24:	mla	r0, r0, ip, r1
   4ee28:	ldr	r1, [sp, #56]	; 0x38
   4ee2c:	cmp	r7, #1
   4ee30:	bic	lr, r7, #1
   4ee34:	movwhi	r3, #1
   4ee38:	add	r8, r1, r0, lsl #3
   4ee3c:	ldr	r0, [sp, #52]	; 0x34
   4ee40:	mul	r1, r0, r7
   4ee44:	ldr	r0, [sp, #68]	; 0x44
   4ee48:	add	r1, r0, r1, lsl #1
   4ee4c:	str	r1, [sp, #20]
   4ee50:	sub	r1, r9, #1
   4ee54:	clz	r1, r1
   4ee58:	lsr	r1, r1, #5
   4ee5c:	and	sl, r3, r1
   4ee60:	ldr	r1, [sp, #48]	; 0x30
   4ee64:	lsl	r3, r7, #1
   4ee68:	str	r3, [sp, #36]	; 0x24
   4ee6c:	str	sl, [sp, #32]
   4ee70:	mul	r1, r1, ip
   4ee74:	lsl	r1, r1, #3
   4ee78:	str	r1, [sp, #64]	; 0x40
   4ee7c:	lsl	r1, r9, #4
   4ee80:	cmp	sl, #0
   4ee84:	mov	r7, #0
   4ee88:	mov	r3, r0
   4ee8c:	beq	4eed8 <GetDataSlab+0x2305c>
   4ee90:	add	r3, r0, lr, lsl #1
   4ee94:	mov	r4, lr
   4ee98:	mov	r5, r8
   4ee9c:	mov	sl, r0
   4eea0:	mov	ip, r0
   4eea4:	vld1.64	{d16-d17}, [r5], r1
   4eea8:	subs	r4, r4, #2
   4eeac:	vmovn.i64	d16, q8
   4eeb0:	vuzp.16	d16, d17
   4eeb4:	vst1.32	{d16[0]}, [ip]!
   4eeb8:	bne	4eea4 <GetDataSlab+0x23028>
   4eebc:	ldr	r0, [sp, #60]	; 0x3c
   4eec0:	ldr	ip, [sp, #44]	; 0x2c
   4eec4:	mov	r7, lr
   4eec8:	cmp	r0, lr
   4eecc:	mov	r0, sl
   4eed0:	ldr	sl, [sp, #32]
   4eed4:	beq	4eef4 <GetDataSlab+0x23078>
   4eed8:	ldr	r5, [sp, #60]	; 0x3c
   4eedc:	mla	r4, r6, r7, r8
   4eee0:	sub	r5, r5, r7
   4eee4:	ldrh	r7, [r4], r6
   4eee8:	subs	r5, r5, #1
   4eeec:	strh	r7, [r3], #2
   4eef0:	bne	4eee4 <GetDataSlab+0x23068>
   4eef4:	ldr	r3, [sp, #64]	; 0x40
   4eef8:	add	r2, r2, #1
   4eefc:	add	r8, r8, r3
   4ef00:	ldr	r3, [sp, #36]	; 0x24
   4ef04:	add	r0, r0, r3
   4ef08:	ldr	r3, [sp, #52]	; 0x34
   4ef0c:	cmp	r2, r3
   4ef10:	bne	4ee80 <GetDataSlab+0x23004>
   4ef14:	ldr	sl, [sp, #20]
   4ef18:	mov	r0, #0
   4ef1c:	ldr	r1, [sp, #40]	; 0x28
   4ef20:	cmp	r1, #13
   4ef24:	bne	2e97c <GetDataSlab+0x2b00>
   4ef28:	b	52950 <GetDataSlab+0x26ad4>
   4ef2c:	ldr	r1, [sp, #52]	; 0x34
   4ef30:	mov	r0, #0
   4ef34:	cmp	r1, #1
   4ef38:	ldrge	r1, [sp, #60]	; 0x3c
   4ef3c:	cmpge	r1, #1
   4ef40:	blt	2e97c <GetDataSlab+0x2b00>
   4ef44:	ldr	r0, [sp, #48]	; 0x30
   4ef48:	ldr	r2, [sp, #28]
   4ef4c:	ldr	r3, [sp, #24]
   4ef50:	ldr	r8, [sp, #68]	; 0x44
   4ef54:	ldr	r7, [sp, #56]	; 0x38
   4ef58:	mov	r6, #0
   4ef5c:	add	r4, sp, #184	; 0xb8
   4ef60:	mul	r0, r0, ip
   4ef64:	mla	r1, r2, ip, r3
   4ef68:	str	r0, [sp, #48]	; 0x30
   4ef6c:	ldr	r0, [sp, #56]	; 0x38
   4ef70:	str	r1, [sp, #32]
   4ef74:	add	lr, r0, r1
   4ef78:	ldr	r0, [sp, #60]	; 0x3c
   4ef7c:	mov	r1, r0
   4ef80:	add	r0, r0, r3
   4ef84:	mla	r0, r2, ip, r0
   4ef88:	cmp	r1, #7
   4ef8c:	mov	r2, #0
   4ef90:	str	r0, [sp, #40]	; 0x28
   4ef94:	sub	r0, r9, #1
   4ef98:	movwhi	r2, #1
   4ef9c:	clz	r0, r0
   4efa0:	lsr	r0, r0, #5
   4efa4:	and	r0, r2, r0
   4efa8:	lsl	r2, r9, #3
   4efac:	str	r0, [sp, #44]	; 0x2c
   4efb0:	lsl	r0, r1, #1
   4efb4:	str	r0, [sp, #64]	; 0x40
   4efb8:	bic	r0, r1, #7
   4efbc:	str	r0, [sp, #36]	; 0x24
   4efc0:	ldr	r0, [sp, #44]	; 0x2c
   4efc4:	mov	r5, #0
   4efc8:	cmp	r0, #0
   4efcc:	mov	r0, r8
   4efd0:	beq	4f078 <GetDataSlab+0x231fc>
   4efd4:	ldr	r1, [sp, #64]	; 0x40
   4efd8:	ldr	r0, [sp, #48]	; 0x30
   4efdc:	mul	r3, r1, r6
   4efe0:	ldr	r1, [sp, #68]	; 0x44
   4efe4:	mul	r0, r0, r6
   4efe8:	add	r5, r1, r3
   4efec:	ldr	r1, [sp, #40]	; 0x28
   4eff0:	add	r1, r1, r0
   4eff4:	add	r1, r7, r1
   4eff8:	cmp	r5, r1
   4effc:	bcs	4f030 <GetDataSlab+0x231b4>
   4f000:	ldr	r1, [sp, #64]	; 0x40
   4f004:	mov	r5, #0
   4f008:	add	r1, r1, r3
   4f00c:	ldr	r3, [sp, #68]	; 0x44
   4f010:	add	r1, r3, r1
   4f014:	ldr	r3, [sp, #32]
   4f018:	add	r0, r3, r0
   4f01c:	ldr	r3, [sp, #56]	; 0x38
   4f020:	add	r0, r3, r0
   4f024:	cmp	r0, r1
   4f028:	mov	r0, r8
   4f02c:	bcc	4f078 <GetDataSlab+0x231fc>
   4f030:	ldr	r5, [sp, #36]	; 0x24
   4f034:	mov	r3, lr
   4f038:	mov	ip, r8
   4f03c:	add	r0, r8, r5, lsl #1
   4f040:	ldr	r1, [r3]
   4f044:	ldr	sl, [r3, #4]
   4f048:	add	r3, r3, r2
   4f04c:	subs	r5, r5, #8
   4f050:	str	sl, [sp, #188]	; 0xbc
   4f054:	str	r1, [sp, #184]	; 0xb8
   4f058:	vld1.8	{d16}, [r4 :64]
   4f05c:	vmovl.u8	q8, d16
   4f060:	vst1.16	{d16-d17}, [ip]!
   4f064:	bne	4f040 <GetDataSlab+0x231c4>
   4f068:	ldr	r1, [sp, #60]	; 0x3c
   4f06c:	ldr	r5, [sp, #36]	; 0x24
   4f070:	cmp	r1, r5
   4f074:	beq	4f094 <GetDataSlab+0x23218>
   4f078:	ldr	r1, [sp, #60]	; 0x3c
   4f07c:	mla	r3, r9, r5, lr
   4f080:	sub	r5, r1, r5
   4f084:	ldrb	r1, [r3], r9
   4f088:	subs	r5, r5, #1
   4f08c:	strh	r1, [r0], #2
   4f090:	bne	4f084 <GetDataSlab+0x23208>
   4f094:	ldr	r0, [sp, #48]	; 0x30
   4f098:	ldr	r1, [sp, #52]	; 0x34
   4f09c:	add	r6, r6, #1
   4f0a0:	add	lr, lr, r0
   4f0a4:	ldr	r0, [sp, #64]	; 0x40
   4f0a8:	cmp	r6, r1
   4f0ac:	add	r8, r8, r0
   4f0b0:	mov	r0, #0
   4f0b4:	bne	4efc0 <GetDataSlab+0x23144>
   4f0b8:	b	2e97c <GetDataSlab+0x2b00>
   4f0bc:	ldr	r1, [sp, #52]	; 0x34
   4f0c0:	mov	r0, #0
   4f0c4:	cmp	r1, #1
   4f0c8:	ldrge	r1, [sp, #60]	; 0x3c
   4f0cc:	cmpge	r1, #1
   4f0d0:	blt	2e97c <GetDataSlab+0x2b00>
   4f0d4:	ldr	r0, [sp, #28]
   4f0d8:	ldr	r1, [sp, #24]
   4f0dc:	ldr	r8, [sp, #68]	; 0x44
   4f0e0:	mov	r3, #0
   4f0e4:	lsl	r4, r9, #1
   4f0e8:	lsl	r2, r9, #4
   4f0ec:	mla	r0, r0, ip, r1
   4f0f0:	ldr	r1, [sp, #56]	; 0x38
   4f0f4:	lsl	r5, r0, #1
   4f0f8:	str	r5, [sp, #40]	; 0x28
   4f0fc:	add	lr, r1, r0, lsl #1
   4f100:	ldr	r1, [sp, #60]	; 0x3c
   4f104:	sub	r0, r9, #1
   4f108:	clz	r0, r0
   4f10c:	lsr	r0, r0, #5
   4f110:	mov	r7, r1
   4f114:	cmp	r1, #7
   4f118:	mov	r1, #0
   4f11c:	movwhi	r1, #1
   4f120:	lsl	r9, r7, #1
   4f124:	and	r0, r1, r0
   4f128:	str	r0, [sp, #64]	; 0x40
   4f12c:	ldr	r0, [sp, #48]	; 0x30
   4f130:	mul	r0, r0, ip
   4f134:	lsl	sl, r0, #1
   4f138:	add	r0, r5, r7, lsl #1
   4f13c:	str	r0, [sp, #48]	; 0x30
   4f140:	bic	r0, r7, #7
   4f144:	str	r0, [sp, #44]	; 0x2c
   4f148:	ldr	r0, [sp, #64]	; 0x40
   4f14c:	mov	r1, #0
   4f150:	cmp	r0, #0
   4f154:	mov	r0, r8
   4f158:	beq	4f1e4 <GetDataSlab+0x23368>
   4f15c:	ldr	r7, [sp, #48]	; 0x30
   4f160:	mul	r0, sl, r3
   4f164:	ldr	r6, [sp, #68]	; 0x44
   4f168:	mul	r1, r9, r3
   4f16c:	add	r5, r7, r0
   4f170:	ldr	r7, [sp, #56]	; 0x38
   4f174:	add	r6, r6, r1
   4f178:	add	r5, r7, r5
   4f17c:	cmp	r6, r5
   4f180:	bcs	4f1b0 <GetDataSlab+0x23334>
   4f184:	ldr	r6, [sp, #68]	; 0x44
   4f188:	add	r1, r9, r1
   4f18c:	ldr	r7, [sp, #40]	; 0x28
   4f190:	add	r1, r6, r1
   4f194:	ldr	r6, [sp, #56]	; 0x38
   4f198:	add	r0, r7, r0
   4f19c:	add	r0, r6, r0
   4f1a0:	cmp	r0, r1
   4f1a4:	mov	r1, #0
   4f1a8:	mov	r0, r8
   4f1ac:	bcc	4f1e4 <GetDataSlab+0x23368>
   4f1b0:	ldr	r5, [sp, #44]	; 0x2c
   4f1b4:	mov	r1, lr
   4f1b8:	mov	r6, r8
   4f1bc:	add	r0, r8, r5, lsl #1
   4f1c0:	vld1.16	{d16-d17}, [r1], r2
   4f1c4:	subs	r5, r5, #8
   4f1c8:	vst1.16	{d16-d17}, [r6]!
   4f1cc:	bne	4f1c0 <GetDataSlab+0x23344>
   4f1d0:	ldr	r1, [sp, #60]	; 0x3c
   4f1d4:	ldr	r7, [sp, #44]	; 0x2c
   4f1d8:	cmp	r1, r7
   4f1dc:	mov	r1, r7
   4f1e0:	beq	4f200 <GetDataSlab+0x23384>
   4f1e4:	ldr	r7, [sp, #60]	; 0x3c
   4f1e8:	mla	r5, r4, r1, lr
   4f1ec:	sub	ip, r7, r1
   4f1f0:	ldrh	r1, [r5], r4
   4f1f4:	subs	ip, ip, #1
   4f1f8:	strh	r1, [r0], #2
   4f1fc:	bne	4f1f0 <GetDataSlab+0x23374>
   4f200:	ldr	r1, [sp, #52]	; 0x34
   4f204:	add	r3, r3, #1
   4f208:	add	lr, lr, sl
   4f20c:	add	r8, r8, r9
   4f210:	mov	r0, #0
   4f214:	cmp	r3, r1
   4f218:	bne	4f148 <GetDataSlab+0x232cc>
   4f21c:	b	2e97c <GetDataSlab+0x2b00>
   4f220:	ldr	r1, [sp, #52]	; 0x34
   4f224:	mov	r0, #0
   4f228:	cmp	r1, #1
   4f22c:	ldrge	r1, [sp, #60]	; 0x3c
   4f230:	cmpge	r1, #1
   4f234:	blt	2e97c <GetDataSlab+0x2b00>
   4f238:	ldr	r0, [sp, #28]
   4f23c:	ldr	r1, [sp, #24]
   4f240:	ldr	r8, [sp, #68]	; 0x44
   4f244:	mov	r3, #0
   4f248:	lsl	r4, r9, #1
   4f24c:	lsl	r2, r9, #4
   4f250:	mla	r0, r0, ip, r1
   4f254:	ldr	r1, [sp, #56]	; 0x38
   4f258:	lsl	r5, r0, #1
   4f25c:	str	r5, [sp, #40]	; 0x28
   4f260:	add	lr, r1, r0, lsl #1
   4f264:	ldr	r1, [sp, #60]	; 0x3c
   4f268:	sub	r0, r9, #1
   4f26c:	clz	r0, r0
   4f270:	lsr	r0, r0, #5
   4f274:	mov	r7, r1
   4f278:	cmp	r1, #7
   4f27c:	mov	r1, #0
   4f280:	movwhi	r1, #1
   4f284:	lsl	r9, r7, #1
   4f288:	and	r0, r1, r0
   4f28c:	str	r0, [sp, #64]	; 0x40
   4f290:	ldr	r0, [sp, #48]	; 0x30
   4f294:	mul	r0, r0, ip
   4f298:	lsl	sl, r0, #1
   4f29c:	add	r0, r5, r7, lsl #1
   4f2a0:	str	r0, [sp, #48]	; 0x30
   4f2a4:	bic	r0, r7, #7
   4f2a8:	str	r0, [sp, #44]	; 0x2c
   4f2ac:	ldr	r0, [sp, #64]	; 0x40
   4f2b0:	mov	r1, #0
   4f2b4:	cmp	r0, #0
   4f2b8:	mov	r0, r8
   4f2bc:	beq	4f348 <GetDataSlab+0x234cc>
   4f2c0:	ldr	r7, [sp, #48]	; 0x30
   4f2c4:	mul	r0, sl, r3
   4f2c8:	ldr	r6, [sp, #68]	; 0x44
   4f2cc:	mul	r1, r9, r3
   4f2d0:	add	r5, r7, r0
   4f2d4:	ldr	r7, [sp, #56]	; 0x38
   4f2d8:	add	r6, r6, r1
   4f2dc:	add	r5, r7, r5
   4f2e0:	cmp	r6, r5
   4f2e4:	bcs	4f314 <GetDataSlab+0x23498>
   4f2e8:	ldr	r6, [sp, #68]	; 0x44
   4f2ec:	add	r1, r9, r1
   4f2f0:	ldr	r7, [sp, #40]	; 0x28
   4f2f4:	add	r1, r6, r1
   4f2f8:	ldr	r6, [sp, #56]	; 0x38
   4f2fc:	add	r0, r7, r0
   4f300:	add	r0, r6, r0
   4f304:	cmp	r0, r1
   4f308:	mov	r1, #0
   4f30c:	mov	r0, r8
   4f310:	bcc	4f348 <GetDataSlab+0x234cc>
   4f314:	ldr	r5, [sp, #44]	; 0x2c
   4f318:	mov	r1, lr
   4f31c:	mov	r6, r8
   4f320:	add	r0, r8, r5, lsl #1
   4f324:	vld1.16	{d16-d17}, [r1], r2
   4f328:	subs	r5, r5, #8
   4f32c:	vst1.16	{d16-d17}, [r6]!
   4f330:	bne	4f324 <GetDataSlab+0x234a8>
   4f334:	ldr	r1, [sp, #60]	; 0x3c
   4f338:	ldr	r7, [sp, #44]	; 0x2c
   4f33c:	cmp	r1, r7
   4f340:	mov	r1, r7
   4f344:	beq	4f364 <GetDataSlab+0x234e8>
   4f348:	ldr	r7, [sp, #60]	; 0x3c
   4f34c:	mla	r5, r4, r1, lr
   4f350:	sub	ip, r7, r1
   4f354:	ldrh	r1, [r5], r4
   4f358:	subs	ip, ip, #1
   4f35c:	strh	r1, [r0], #2
   4f360:	bne	4f354 <GetDataSlab+0x234d8>
   4f364:	ldr	r1, [sp, #52]	; 0x34
   4f368:	add	r3, r3, #1
   4f36c:	add	lr, lr, sl
   4f370:	add	r8, r8, r9
   4f374:	mov	r0, #0
   4f378:	cmp	r3, r1
   4f37c:	bne	4f2ac <GetDataSlab+0x23430>
   4f380:	b	2e97c <GetDataSlab+0x2b00>
   4f384:	ldr	r1, [sp, #52]	; 0x34
   4f388:	mov	r0, #0
   4f38c:	cmp	r1, #1
   4f390:	ldrge	r1, [sp, #60]	; 0x3c
   4f394:	cmpge	r1, #1
   4f398:	blt	2e97c <GetDataSlab+0x2b00>
   4f39c:	ldr	r0, [sp, #28]
   4f3a0:	ldr	r1, [sp, #24]
   4f3a4:	sub	r3, r9, #1
   4f3a8:	mov	r7, ip
   4f3ac:	mov	r2, #0
   4f3b0:	lsl	r6, r9, #2
   4f3b4:	lsl	r4, r9, #4
   4f3b8:	clz	r3, r3
   4f3bc:	lsr	r3, r3, #5
   4f3c0:	mla	r0, r0, ip, r1
   4f3c4:	ldr	r1, [sp, #56]	; 0x38
   4f3c8:	add	r1, r1, r0, lsl #2
   4f3cc:	ldr	r0, [sp, #60]	; 0x3c
   4f3d0:	mov	r5, r0
   4f3d4:	cmp	r0, #3
   4f3d8:	mov	r0, #0
   4f3dc:	movwhi	r0, #1
   4f3e0:	lsl	r8, r5, #1
   4f3e4:	bic	r9, r5, #3
   4f3e8:	and	ip, r0, r3
   4f3ec:	ldr	r0, [sp, #48]	; 0x30
   4f3f0:	mul	r0, r0, r7
   4f3f4:	lsl	lr, r0, #2
   4f3f8:	ldr	r0, [sp, #68]	; 0x44
   4f3fc:	cmp	ip, #0
   4f400:	mov	r3, #0
   4f404:	beq	4f43c <GetDataSlab+0x235c0>
   4f408:	ldr	r7, [sp, #68]	; 0x44
   4f40c:	mov	r3, r9
   4f410:	mov	r5, r1
   4f414:	add	r0, r7, r9, lsl #1
   4f418:	vld1.32	{d16-d17}, [r5], r4
   4f41c:	subs	r3, r3, #4
   4f420:	vmovn.i32	d16, q8
   4f424:	vst1.16	{d16}, [r7]!
   4f428:	bne	4f418 <GetDataSlab+0x2359c>
   4f42c:	ldr	r3, [sp, #60]	; 0x3c
   4f430:	cmp	r3, r9
   4f434:	mov	r3, r9
   4f438:	beq	4f458 <GetDataSlab+0x235dc>
   4f43c:	ldr	r7, [sp, #60]	; 0x3c
   4f440:	mla	r5, r6, r3, r1
   4f444:	sub	r3, r7, r3
   4f448:	ldr	r7, [r5], r6
   4f44c:	subs	r3, r3, #1
   4f450:	strh	r7, [r0], #2
   4f454:	bne	4f448 <GetDataSlab+0x235cc>
   4f458:	ldr	r0, [sp, #68]	; 0x44
   4f45c:	ldr	r3, [sp, #52]	; 0x34
   4f460:	add	r2, r2, #1
   4f464:	add	r1, r1, lr
   4f468:	add	r0, r0, r8
   4f46c:	cmp	r2, r3
   4f470:	str	r0, [sp, #68]	; 0x44
   4f474:	mov	r0, #0
   4f478:	bne	4f3f8 <GetDataSlab+0x2357c>
   4f47c:	b	2e97c <GetDataSlab+0x2b00>
   4f480:	ldr	r1, [sp, #52]	; 0x34
   4f484:	mov	r0, #0
   4f488:	cmp	r1, #1
   4f48c:	ldrge	r1, [sp, #60]	; 0x3c
   4f490:	cmpge	r1, #1
   4f494:	blt	2e97c <GetDataSlab+0x2b00>
   4f498:	ldr	r0, [sp, #28]
   4f49c:	ldr	r1, [sp, #24]
   4f4a0:	sub	r3, r9, #1
   4f4a4:	mov	r7, ip
   4f4a8:	mov	r2, #0
   4f4ac:	lsl	r6, r9, #2
   4f4b0:	lsl	r4, r9, #4
   4f4b4:	clz	r3, r3
   4f4b8:	lsr	r3, r3, #5
   4f4bc:	mla	r0, r0, ip, r1
   4f4c0:	ldr	r1, [sp, #56]	; 0x38
   4f4c4:	add	r1, r1, r0, lsl #2
   4f4c8:	ldr	r0, [sp, #60]	; 0x3c
   4f4cc:	mov	r5, r0
   4f4d0:	cmp	r0, #3
   4f4d4:	mov	r0, #0
   4f4d8:	movwhi	r0, #1
   4f4dc:	lsl	r8, r5, #1
   4f4e0:	bic	r9, r5, #3
   4f4e4:	and	ip, r0, r3
   4f4e8:	ldr	r0, [sp, #48]	; 0x30
   4f4ec:	mul	r0, r0, r7
   4f4f0:	lsl	lr, r0, #2
   4f4f4:	ldr	r0, [sp, #68]	; 0x44
   4f4f8:	cmp	ip, #0
   4f4fc:	mov	r3, #0
   4f500:	beq	4f538 <GetDataSlab+0x236bc>
   4f504:	ldr	r7, [sp, #68]	; 0x44
   4f508:	mov	r3, r9
   4f50c:	mov	r5, r1
   4f510:	add	r0, r7, r9, lsl #1
   4f514:	vld1.32	{d16-d17}, [r5], r4
   4f518:	subs	r3, r3, #4
   4f51c:	vmovn.i32	d16, q8
   4f520:	vst1.16	{d16}, [r7]!
   4f524:	bne	4f514 <GetDataSlab+0x23698>
   4f528:	ldr	r3, [sp, #60]	; 0x3c
   4f52c:	cmp	r3, r9
   4f530:	mov	r3, r9
   4f534:	beq	4f554 <GetDataSlab+0x236d8>
   4f538:	ldr	r7, [sp, #60]	; 0x3c
   4f53c:	mla	r5, r6, r3, r1
   4f540:	sub	r3, r7, r3
   4f544:	ldr	r7, [r5], r6
   4f548:	subs	r3, r3, #1
   4f54c:	strh	r7, [r0], #2
   4f550:	bne	4f544 <GetDataSlab+0x236c8>
   4f554:	ldr	r0, [sp, #68]	; 0x44
   4f558:	ldr	r3, [sp, #52]	; 0x34
   4f55c:	add	r2, r2, #1
   4f560:	add	r1, r1, lr
   4f564:	add	r0, r0, r8
   4f568:	cmp	r2, r3
   4f56c:	str	r0, [sp, #68]	; 0x44
   4f570:	mov	r0, #0
   4f574:	bne	4f4f4 <GetDataSlab+0x23678>
   4f578:	b	2e97c <GetDataSlab+0x2b00>
   4f57c:	ldr	r1, [sp, #52]	; 0x34
   4f580:	mov	r0, #0
   4f584:	cmp	r1, #1
   4f588:	ldrge	r1, [sp, #60]	; 0x3c
   4f58c:	cmpge	r1, #1
   4f590:	blt	2e97c <GetDataSlab+0x2b00>
   4f594:	ldr	r0, [sp, #28]
   4f598:	ldr	r1, [sp, #24]
   4f59c:	sub	r3, r9, #1
   4f5a0:	mov	r7, ip
   4f5a4:	mov	r2, #0
   4f5a8:	lsl	r6, r9, #2
   4f5ac:	lsl	r4, r9, #4
   4f5b0:	clz	r3, r3
   4f5b4:	lsr	r3, r3, #5
   4f5b8:	mla	r0, r0, ip, r1
   4f5bc:	ldr	r1, [sp, #56]	; 0x38
   4f5c0:	add	r1, r1, r0, lsl #2
   4f5c4:	ldr	r0, [sp, #60]	; 0x3c
   4f5c8:	mov	r5, r0
   4f5cc:	cmp	r0, #3
   4f5d0:	mov	r0, #0
   4f5d4:	movwhi	r0, #1
   4f5d8:	lsl	r8, r5, #1
   4f5dc:	bic	r9, r5, #3
   4f5e0:	and	ip, r0, r3
   4f5e4:	ldr	r0, [sp, #48]	; 0x30
   4f5e8:	mul	r0, r0, r7
   4f5ec:	lsl	lr, r0, #2
   4f5f0:	ldr	r0, [sp, #68]	; 0x44
   4f5f4:	cmp	ip, #0
   4f5f8:	mov	r3, #0
   4f5fc:	beq	4f638 <GetDataSlab+0x237bc>
   4f600:	ldr	r7, [sp, #68]	; 0x44
   4f604:	mov	r3, r9
   4f608:	mov	r5, r1
   4f60c:	add	r0, r7, r9, lsl #1
   4f610:	vld1.32	{d16-d17}, [r5], r4
   4f614:	subs	r3, r3, #4
   4f618:	vcvt.u32.f32	q8, q8
   4f61c:	vmovn.i32	d16, q8
   4f620:	vst1.16	{d16}, [r7]!
   4f624:	bne	4f610 <GetDataSlab+0x23794>
   4f628:	ldr	r3, [sp, #60]	; 0x3c
   4f62c:	cmp	r3, r9
   4f630:	mov	r3, r9
   4f634:	beq	4f660 <GetDataSlab+0x237e4>
   4f638:	ldr	r7, [sp, #60]	; 0x3c
   4f63c:	mla	r5, r6, r3, r1
   4f640:	sub	r3, r7, r3
   4f644:	vldr	s0, [r5]
   4f648:	add	r5, r5, r6
   4f64c:	subs	r3, r3, #1
   4f650:	vcvt.u32.f32	s0, s0
   4f654:	vmov	r7, s0
   4f658:	strh	r7, [r0], #2
   4f65c:	bne	4f644 <GetDataSlab+0x237c8>
   4f660:	ldr	r0, [sp, #68]	; 0x44
   4f664:	ldr	r3, [sp, #52]	; 0x34
   4f668:	add	r2, r2, #1
   4f66c:	add	r1, r1, lr
   4f670:	add	r0, r0, r8
   4f674:	cmp	r2, r3
   4f678:	str	r0, [sp, #68]	; 0x44
   4f67c:	mov	r0, #0
   4f680:	bne	4f5f0 <GetDataSlab+0x23774>
   4f684:	b	2e97c <GetDataSlab+0x2b00>
   4f688:	ldr	r1, [sp, #52]	; 0x34
   4f68c:	mov	r0, #0
   4f690:	cmp	r1, #1
   4f694:	ldrge	r1, [sp, #60]	; 0x3c
   4f698:	cmpge	r1, #1
   4f69c:	blt	2e97c <GetDataSlab+0x2b00>
   4f6a0:	ldr	r0, [sp, #28]
   4f6a4:	ldr	r1, [sp, #24]
   4f6a8:	lsl	r7, r9, #3
   4f6ac:	mov	r6, #0
   4f6b0:	mla	r0, r0, ip, r1
   4f6b4:	ldr	r1, [sp, #56]	; 0x38
   4f6b8:	add	r5, r1, r0, lsl #3
   4f6bc:	ldr	r0, [sp, #48]	; 0x30
   4f6c0:	mul	r0, r0, ip
   4f6c4:	lsl	ip, r0, #3
   4f6c8:	ldr	r0, [sp, #60]	; 0x3c
   4f6cc:	lsl	lr, r0, #1
   4f6d0:	ldr	r4, [sp, #60]	; 0x3c
   4f6d4:	ldr	r3, [sp, #68]	; 0x44
   4f6d8:	mov	r0, #0
   4f6dc:	mov	r1, r5
   4f6e0:	vldr	d16, [r1]
   4f6e4:	add	r1, r1, r7
   4f6e8:	subs	r4, r4, #1
   4f6ec:	vcvt.u32.f64	s0, d16
   4f6f0:	vmov	r2, s0
   4f6f4:	strh	r2, [r3, -r0]
   4f6f8:	sub	r0, r0, #2
   4f6fc:	bne	4f6e0 <GetDataSlab+0x23864>
   4f700:	ldr	r1, [sp, #52]	; 0x34
   4f704:	add	r6, r6, #1
   4f708:	add	r3, r3, lr
   4f70c:	add	r5, r5, ip
   4f710:	mov	r0, #0
   4f714:	str	r3, [sp, #68]	; 0x44
   4f718:	cmp	r6, r1
   4f71c:	bne	4f6d0 <GetDataSlab+0x23854>
   4f720:	b	2e97c <GetDataSlab+0x2b00>
   4f724:	ldr	r1, [sp, #52]	; 0x34
   4f728:	mov	r0, #0
   4f72c:	cmp	r1, #1
   4f730:	ldrge	r1, [sp, #60]	; 0x3c
   4f734:	cmpge	r1, #1
   4f738:	blt	2e97c <GetDataSlab+0x2b00>
   4f73c:	ldr	r0, [sp, #28]
   4f740:	ldr	r1, [sp, #24]
   4f744:	ldr	r7, [sp, #60]	; 0x3c
   4f748:	mov	r3, #0
   4f74c:	mov	r2, #0
   4f750:	lsl	r6, r9, #3
   4f754:	mla	r0, r0, ip, r1
   4f758:	ldr	r1, [sp, #56]	; 0x38
   4f75c:	cmp	r7, #1
   4f760:	bic	lr, r7, #1
   4f764:	movwhi	r3, #1
   4f768:	add	r8, r1, r0, lsl #3
   4f76c:	ldr	r0, [sp, #52]	; 0x34
   4f770:	mul	r1, r0, r7
   4f774:	ldr	r0, [sp, #68]	; 0x44
   4f778:	add	r1, r0, r1, lsl #1
   4f77c:	str	r1, [sp, #20]
   4f780:	sub	r1, r9, #1
   4f784:	clz	r1, r1
   4f788:	lsr	r1, r1, #5
   4f78c:	and	sl, r3, r1
   4f790:	ldr	r1, [sp, #48]	; 0x30
   4f794:	lsl	r3, r7, #1
   4f798:	str	r3, [sp, #36]	; 0x24
   4f79c:	str	sl, [sp, #32]
   4f7a0:	mul	r1, r1, ip
   4f7a4:	lsl	r1, r1, #3
   4f7a8:	str	r1, [sp, #64]	; 0x40
   4f7ac:	lsl	r1, r9, #4
   4f7b0:	cmp	sl, #0
   4f7b4:	mov	r7, #0
   4f7b8:	mov	r3, r0
   4f7bc:	beq	4f808 <GetDataSlab+0x2398c>
   4f7c0:	add	r3, r0, lr, lsl #1
   4f7c4:	mov	r4, lr
   4f7c8:	mov	r5, r8
   4f7cc:	mov	sl, r0
   4f7d0:	mov	ip, r0
   4f7d4:	vld1.64	{d16-d17}, [r5], r1
   4f7d8:	subs	r4, r4, #2
   4f7dc:	vmovn.i64	d16, q8
   4f7e0:	vuzp.16	d16, d17
   4f7e4:	vst1.32	{d16[0]}, [ip]!
   4f7e8:	bne	4f7d4 <GetDataSlab+0x23958>
   4f7ec:	ldr	r0, [sp, #60]	; 0x3c
   4f7f0:	ldr	ip, [sp, #44]	; 0x2c
   4f7f4:	mov	r7, lr
   4f7f8:	cmp	r0, lr
   4f7fc:	mov	r0, sl
   4f800:	ldr	sl, [sp, #32]
   4f804:	beq	4f824 <GetDataSlab+0x239a8>
   4f808:	ldr	r5, [sp, #60]	; 0x3c
   4f80c:	mla	r4, r6, r7, r8
   4f810:	sub	r5, r5, r7
   4f814:	ldrh	r7, [r4], r6
   4f818:	subs	r5, r5, #1
   4f81c:	strh	r7, [r3], #2
   4f820:	bne	4f814 <GetDataSlab+0x23998>
   4f824:	ldr	r3, [sp, #64]	; 0x40
   4f828:	add	r2, r2, #1
   4f82c:	add	r8, r8, r3
   4f830:	ldr	r3, [sp, #36]	; 0x24
   4f834:	add	r0, r0, r3
   4f838:	ldr	r3, [sp, #52]	; 0x34
   4f83c:	cmp	r2, r3
   4f840:	bne	4f7b0 <GetDataSlab+0x23934>
   4f844:	ldr	sl, [sp, #20]
   4f848:	mov	r0, #0
   4f84c:	ldr	r1, [sp, #40]	; 0x28
   4f850:	cmp	r1, #13
   4f854:	bne	2e97c <GetDataSlab+0x2b00>
   4f858:	b	52a58 <GetDataSlab+0x26bdc>
   4f85c:	cmp	r6, #1
   4f860:	blt	53188 <GetDataSlab+0x2730c>
   4f864:	ldr	r0, [sp, #28]
   4f868:	ldr	r1, [sp, #24]
   4f86c:	ldr	r2, [sp, #56]	; 0x38
   4f870:	mov	r7, #0
   4f874:	mla	r0, r0, ip, r1
   4f878:	add	r2, r2, r0
   4f87c:	ldr	r0, [sp, #60]	; 0x3c
   4f880:	cmp	r0, #1
   4f884:	blt	4f8e0 <GetDataSlab+0x23a64>
   4f888:	ldr	r4, [sp, #68]	; 0x44
   4f88c:	ldr	ip, [fp, #8]
   4f890:	mov	r0, #0
   4f894:	mov	r6, #0
   4f898:	ldr	r5, [lr]
   4f89c:	add	r0, r0, #4
   4f8a0:	mul	r5, r5, r6
   4f8a4:	ldrb	r5, [r2, r5]
   4f8a8:	str	r5, [r4, r6, lsl #2]
   4f8ac:	add	r6, r6, #1
   4f8b0:	ldr	r5, [sl]
   4f8b4:	cmp	r6, r5
   4f8b8:	blt	4f898 <GetDataSlab+0x23a1c>
   4f8bc:	add	r4, r4, r0
   4f8c0:	ldr	r0, [sp, #32]
   4f8c4:	ldr	ip, [ip]
   4f8c8:	str	r5, [sp, #60]	; 0x3c
   4f8cc:	str	r4, [sp, #68]	; 0x44
   4f8d0:	ldr	r4, [r0]
   4f8d4:	ldr	r0, [sp, #36]	; 0x24
   4f8d8:	ldr	r0, [r0]
   4f8dc:	b	4f8ec <GetDataSlab+0x23a70>
   4f8e0:	ldr	r1, [sp, #52]	; 0x34
   4f8e4:	ldr	r0, [sp, #48]	; 0x30
   4f8e8:	mov	r4, r1
   4f8ec:	add	r7, r7, #1
   4f8f0:	str	r0, [sp, #48]	; 0x30
   4f8f4:	mla	r2, ip, r0, r2
   4f8f8:	mov	r0, #0
   4f8fc:	mov	r1, r4
   4f900:	str	r4, [sp, #52]	; 0x34
   4f904:	cmp	r7, r4
   4f908:	blt	4f87c <GetDataSlab+0x23a00>
   4f90c:	b	2e97c <GetDataSlab+0x2b00>
   4f910:	cmp	r6, #1
   4f914:	blt	5319c <GetDataSlab+0x27320>
   4f918:	ldr	r0, [sp, #28]
   4f91c:	ldr	r1, [sp, #24]
   4f920:	ldr	r2, [sp, #56]	; 0x38
   4f924:	mov	r7, #0
   4f928:	mla	r0, r0, ip, r1
   4f92c:	add	r2, r2, r0, lsl #1
   4f930:	ldr	r0, [sp, #60]	; 0x3c
   4f934:	cmp	r0, #1
   4f938:	blt	4f998 <GetDataSlab+0x23b1c>
   4f93c:	ldr	r4, [sp, #68]	; 0x44
   4f940:	ldr	ip, [fp, #8]
   4f944:	mov	r0, #0
   4f948:	mov	r6, #0
   4f94c:	ldr	r5, [lr]
   4f950:	add	r0, r0, #4
   4f954:	mul	r5, r5, r6
   4f958:	add	r5, r2, r5, lsl #1
   4f95c:	ldrsh	r5, [r5]
   4f960:	str	r5, [r4, r6, lsl #2]
   4f964:	add	r6, r6, #1
   4f968:	ldr	r5, [sl]
   4f96c:	cmp	r6, r5
   4f970:	blt	4f94c <GetDataSlab+0x23ad0>
   4f974:	add	r4, r4, r0
   4f978:	ldr	r0, [sp, #32]
   4f97c:	ldr	ip, [ip]
   4f980:	str	r5, [sp, #60]	; 0x3c
   4f984:	str	r4, [sp, #68]	; 0x44
   4f988:	ldr	r4, [r0]
   4f98c:	ldr	r0, [sp, #36]	; 0x24
   4f990:	ldr	r0, [r0]
   4f994:	b	4f9a4 <GetDataSlab+0x23b28>
   4f998:	ldr	r1, [sp, #52]	; 0x34
   4f99c:	ldr	r0, [sp, #48]	; 0x30
   4f9a0:	mov	r4, r1
   4f9a4:	str	r0, [sp, #48]	; 0x30
   4f9a8:	mul	r0, ip, r0
   4f9ac:	add	r7, r7, #1
   4f9b0:	mov	r1, r4
   4f9b4:	str	r4, [sp, #52]	; 0x34
   4f9b8:	add	r2, r2, r0, lsl #1
   4f9bc:	mov	r0, #0
   4f9c0:	cmp	r7, r4
   4f9c4:	blt	4f930 <GetDataSlab+0x23ab4>
   4f9c8:	b	2e97c <GetDataSlab+0x2b00>
   4f9cc:	cmp	r6, #1
   4f9d0:	blt	531b0 <GetDataSlab+0x27334>
   4f9d4:	ldr	r0, [sp, #28]
   4f9d8:	ldr	r1, [sp, #24]
   4f9dc:	ldr	r2, [sp, #56]	; 0x38
   4f9e0:	mov	r7, #0
   4f9e4:	mla	r0, r0, ip, r1
   4f9e8:	add	r2, r2, r0, lsl #1
   4f9ec:	ldr	r0, [sp, #60]	; 0x3c
   4f9f0:	cmp	r0, #1
   4f9f4:	blt	4fa54 <GetDataSlab+0x23bd8>
   4f9f8:	ldr	r4, [sp, #68]	; 0x44
   4f9fc:	ldr	ip, [fp, #8]
   4fa00:	mov	r0, #0
   4fa04:	mov	r6, #0
   4fa08:	ldr	r5, [lr]
   4fa0c:	add	r0, r0, #4
   4fa10:	mul	r5, r5, r6
   4fa14:	add	r5, r2, r5, lsl #1
   4fa18:	ldrh	r5, [r5]
   4fa1c:	str	r5, [r4, r6, lsl #2]
   4fa20:	add	r6, r6, #1
   4fa24:	ldr	r5, [sl]
   4fa28:	cmp	r6, r5
   4fa2c:	blt	4fa08 <GetDataSlab+0x23b8c>
   4fa30:	add	r4, r4, r0
   4fa34:	ldr	r0, [sp, #32]
   4fa38:	ldr	ip, [ip]
   4fa3c:	str	r5, [sp, #60]	; 0x3c
   4fa40:	str	r4, [sp, #68]	; 0x44
   4fa44:	ldr	r4, [r0]
   4fa48:	ldr	r0, [sp, #36]	; 0x24
   4fa4c:	ldr	r0, [r0]
   4fa50:	b	4fa60 <GetDataSlab+0x23be4>
   4fa54:	ldr	r1, [sp, #52]	; 0x34
   4fa58:	ldr	r0, [sp, #48]	; 0x30
   4fa5c:	mov	r4, r1
   4fa60:	str	r0, [sp, #48]	; 0x30
   4fa64:	mul	r0, ip, r0
   4fa68:	add	r7, r7, #1
   4fa6c:	mov	r1, r4
   4fa70:	str	r4, [sp, #52]	; 0x34
   4fa74:	add	r2, r2, r0, lsl #1
   4fa78:	mov	r0, #0
   4fa7c:	cmp	r7, r4
   4fa80:	blt	4f9ec <GetDataSlab+0x23b70>
   4fa84:	b	2e97c <GetDataSlab+0x2b00>
   4fa88:	cmp	r6, #1
   4fa8c:	blt	531c4 <GetDataSlab+0x27348>
   4fa90:	ldr	r0, [sp, #28]
   4fa94:	ldr	r1, [sp, #24]
   4fa98:	ldr	r2, [sp, #56]	; 0x38
   4fa9c:	mov	r7, #0
   4faa0:	mla	r0, r0, ip, r1
   4faa4:	add	r2, r2, r0, lsl #2
   4faa8:	ldr	r0, [sp, #60]	; 0x3c
   4faac:	cmp	r0, #1
   4fab0:	blt	4fb0c <GetDataSlab+0x23c90>
   4fab4:	ldr	r4, [sp, #68]	; 0x44
   4fab8:	ldr	ip, [fp, #8]
   4fabc:	mov	r0, #0
   4fac0:	mov	r6, #0
   4fac4:	ldr	r5, [lr]
   4fac8:	add	r0, r0, #4
   4facc:	mul	r5, r5, r6
   4fad0:	ldr	r5, [r2, r5, lsl #2]
   4fad4:	str	r5, [r4, r6, lsl #2]
   4fad8:	add	r6, r6, #1
   4fadc:	ldr	r5, [sl]
   4fae0:	cmp	r6, r5
   4fae4:	blt	4fac4 <GetDataSlab+0x23c48>
   4fae8:	add	r4, r4, r0
   4faec:	ldr	r0, [sp, #32]
   4faf0:	ldr	ip, [ip]
   4faf4:	str	r5, [sp, #60]	; 0x3c
   4faf8:	str	r4, [sp, #68]	; 0x44
   4fafc:	ldr	r4, [r0]
   4fb00:	ldr	r0, [sp, #36]	; 0x24
   4fb04:	ldr	r0, [r0]
   4fb08:	b	4fb18 <GetDataSlab+0x23c9c>
   4fb0c:	ldr	r1, [sp, #52]	; 0x34
   4fb10:	ldr	r0, [sp, #48]	; 0x30
   4fb14:	mov	r4, r1
   4fb18:	str	r0, [sp, #48]	; 0x30
   4fb1c:	mul	r0, ip, r0
   4fb20:	add	r7, r7, #1
   4fb24:	mov	r1, r4
   4fb28:	str	r4, [sp, #52]	; 0x34
   4fb2c:	add	r2, r2, r0, lsl #2
   4fb30:	mov	r0, #0
   4fb34:	cmp	r7, r4
   4fb38:	blt	4faa8 <GetDataSlab+0x23c2c>
   4fb3c:	b	2e97c <GetDataSlab+0x2b00>
   4fb40:	cmp	r6, #1
   4fb44:	blt	531d8 <GetDataSlab+0x2735c>
   4fb48:	ldr	r0, [sp, #28]
   4fb4c:	ldr	r1, [sp, #24]
   4fb50:	ldr	r2, [sp, #56]	; 0x38
   4fb54:	mov	r7, #0
   4fb58:	mla	r0, r0, ip, r1
   4fb5c:	add	r2, r2, r0, lsl #2
   4fb60:	ldr	r0, [sp, #60]	; 0x3c
   4fb64:	cmp	r0, #1
   4fb68:	blt	4fbc4 <GetDataSlab+0x23d48>
   4fb6c:	ldr	r4, [sp, #68]	; 0x44
   4fb70:	ldr	ip, [fp, #8]
   4fb74:	mov	r0, #0
   4fb78:	mov	r6, #0
   4fb7c:	ldr	r5, [lr]
   4fb80:	add	r0, r0, #4
   4fb84:	mul	r5, r5, r6
   4fb88:	ldr	r5, [r2, r5, lsl #2]
   4fb8c:	str	r5, [r4, r6, lsl #2]
   4fb90:	add	r6, r6, #1
   4fb94:	ldr	r5, [sl]
   4fb98:	cmp	r6, r5
   4fb9c:	blt	4fb7c <GetDataSlab+0x23d00>
   4fba0:	add	r4, r4, r0
   4fba4:	ldr	r0, [sp, #32]
   4fba8:	ldr	ip, [ip]
   4fbac:	str	r5, [sp, #60]	; 0x3c
   4fbb0:	str	r4, [sp, #68]	; 0x44
   4fbb4:	ldr	r4, [r0]
   4fbb8:	ldr	r0, [sp, #36]	; 0x24
   4fbbc:	ldr	r0, [r0]
   4fbc0:	b	4fbd0 <GetDataSlab+0x23d54>
   4fbc4:	ldr	r1, [sp, #52]	; 0x34
   4fbc8:	ldr	r0, [sp, #48]	; 0x30
   4fbcc:	mov	r4, r1
   4fbd0:	str	r0, [sp, #48]	; 0x30
   4fbd4:	mul	r0, ip, r0
   4fbd8:	add	r7, r7, #1
   4fbdc:	mov	r1, r4
   4fbe0:	str	r4, [sp, #52]	; 0x34
   4fbe4:	add	r2, r2, r0, lsl #2
   4fbe8:	mov	r0, #0
   4fbec:	cmp	r7, r4
   4fbf0:	blt	4fb60 <GetDataSlab+0x23ce4>
   4fbf4:	b	2e97c <GetDataSlab+0x2b00>
   4fbf8:	cmp	r6, #1
   4fbfc:	blt	531ec <GetDataSlab+0x27370>
   4fc00:	ldr	r0, [sp, #28]
   4fc04:	ldr	r1, [sp, #24]
   4fc08:	ldr	r2, [sp, #56]	; 0x38
   4fc0c:	mov	r7, #0
   4fc10:	mla	r0, r0, ip, r1
   4fc14:	add	r2, r2, r0, lsl #2
   4fc18:	ldr	r0, [sp, #60]	; 0x3c
   4fc1c:	cmp	r0, #1
   4fc20:	blt	4fc88 <GetDataSlab+0x23e0c>
   4fc24:	ldr	r4, [sp, #68]	; 0x44
   4fc28:	ldr	ip, [fp, #8]
   4fc2c:	mov	r0, #0
   4fc30:	mov	r6, #0
   4fc34:	ldr	r5, [lr]
   4fc38:	add	r0, r0, #4
   4fc3c:	mul	r5, r5, r6
   4fc40:	add	r5, r2, r5, lsl #2
   4fc44:	vldr	s0, [r5]
   4fc48:	vcvt.s32.f32	s0, s0
   4fc4c:	vmov	r5, s0
   4fc50:	str	r5, [r4, r6, lsl #2]
   4fc54:	add	r6, r6, #1
   4fc58:	ldr	r5, [sl]
   4fc5c:	cmp	r6, r5
   4fc60:	blt	4fc34 <GetDataSlab+0x23db8>
   4fc64:	add	r4, r4, r0
   4fc68:	ldr	r0, [sp, #32]
   4fc6c:	ldr	ip, [ip]
   4fc70:	str	r5, [sp, #60]	; 0x3c
   4fc74:	str	r4, [sp, #68]	; 0x44
   4fc78:	ldr	r4, [r0]
   4fc7c:	ldr	r0, [sp, #36]	; 0x24
   4fc80:	ldr	r0, [r0]
   4fc84:	b	4fc94 <GetDataSlab+0x23e18>
   4fc88:	ldr	r1, [sp, #52]	; 0x34
   4fc8c:	ldr	r0, [sp, #48]	; 0x30
   4fc90:	mov	r4, r1
   4fc94:	str	r0, [sp, #48]	; 0x30
   4fc98:	mul	r0, ip, r0
   4fc9c:	add	r7, r7, #1
   4fca0:	mov	r1, r4
   4fca4:	str	r4, [sp, #52]	; 0x34
   4fca8:	add	r2, r2, r0, lsl #2
   4fcac:	mov	r0, #0
   4fcb0:	cmp	r7, r4
   4fcb4:	blt	4fc18 <GetDataSlab+0x23d9c>
   4fcb8:	b	2e97c <GetDataSlab+0x2b00>
   4fcbc:	cmp	r6, #1
   4fcc0:	blt	53200 <GetDataSlab+0x27384>
   4fcc4:	ldr	r0, [sp, #28]
   4fcc8:	ldr	r1, [sp, #24]
   4fccc:	ldr	r2, [sp, #56]	; 0x38
   4fcd0:	mov	r7, #0
   4fcd4:	mla	r0, r0, ip, r1
   4fcd8:	add	r2, r2, r0, lsl #3
   4fcdc:	ldr	r0, [sp, #60]	; 0x3c
   4fce0:	cmp	r0, #1
   4fce4:	blt	4fd4c <GetDataSlab+0x23ed0>
   4fce8:	ldr	r4, [sp, #68]	; 0x44
   4fcec:	ldr	ip, [fp, #8]
   4fcf0:	mov	r0, #0
   4fcf4:	mov	r6, #0
   4fcf8:	ldr	r5, [lr]
   4fcfc:	add	r0, r0, #4
   4fd00:	mul	r5, r5, r6
   4fd04:	add	r5, r2, r5, lsl #3
   4fd08:	vldr	d16, [r5]
   4fd0c:	vcvt.s32.f64	s0, d16
   4fd10:	vmov	r5, s0
   4fd14:	str	r5, [r4, r6, lsl #2]
   4fd18:	add	r6, r6, #1
   4fd1c:	ldr	r5, [sl]
   4fd20:	cmp	r6, r5
   4fd24:	blt	4fcf8 <GetDataSlab+0x23e7c>
   4fd28:	add	r4, r4, r0
   4fd2c:	ldr	r0, [sp, #32]
   4fd30:	ldr	ip, [ip]
   4fd34:	str	r5, [sp, #60]	; 0x3c
   4fd38:	str	r4, [sp, #68]	; 0x44
   4fd3c:	ldr	r4, [r0]
   4fd40:	ldr	r0, [sp, #36]	; 0x24
   4fd44:	ldr	r0, [r0]
   4fd48:	b	4fd58 <GetDataSlab+0x23edc>
   4fd4c:	ldr	r1, [sp, #52]	; 0x34
   4fd50:	ldr	r0, [sp, #48]	; 0x30
   4fd54:	mov	r4, r1
   4fd58:	str	r0, [sp, #48]	; 0x30
   4fd5c:	mul	r0, ip, r0
   4fd60:	add	r7, r7, #1
   4fd64:	mov	r1, r4
   4fd68:	str	r4, [sp, #52]	; 0x34
   4fd6c:	add	r2, r2, r0, lsl #3
   4fd70:	mov	r0, #0
   4fd74:	cmp	r7, r4
   4fd78:	blt	4fcdc <GetDataSlab+0x23e60>
   4fd7c:	b	2e97c <GetDataSlab+0x2b00>
   4fd80:	cmp	r6, #1
   4fd84:	blt	53214 <GetDataSlab+0x27398>
   4fd88:	ldr	r0, [sp, #28]
   4fd8c:	ldr	r2, [sp, #24]
   4fd90:	mla	r0, r0, ip, r2
   4fd94:	ldr	r2, [sp, #56]	; 0x38
   4fd98:	ldr	ip, [fp, #8]
   4fd9c:	add	r0, r2, r0, lsl #3
   4fda0:	mov	r2, #0
   4fda4:	cmp	r5, #1
   4fda8:	blt	4fdf4 <GetDataSlab+0x23f78>
   4fdac:	mov	r7, #0
   4fdb0:	mov	r6, #0
   4fdb4:	ldr	r5, [lr]
   4fdb8:	add	r7, r7, #4
   4fdbc:	mul	r5, r5, r6
   4fdc0:	ldr	r5, [r0, r5, lsl #3]
   4fdc4:	str	r5, [r4, r6, lsl #2]
   4fdc8:	add	r6, r6, #1
   4fdcc:	ldr	r5, [sl]
   4fdd0:	cmp	r6, r5
   4fdd4:	blt	4fdb4 <GetDataSlab+0x23f38>
   4fdd8:	ldr	r1, [sp, #32]
   4fddc:	add	r4, r4, r7
   4fde0:	ldr	r7, [ip]
   4fde4:	ldr	r6, [r1]
   4fde8:	ldr	r1, [sp, #36]	; 0x24
   4fdec:	ldr	r1, [r1]
   4fdf0:	b	4fdf8 <GetDataSlab+0x23f7c>
   4fdf4:	ldr	r7, [sp, #44]	; 0x2c
   4fdf8:	str	r7, [sp, #44]	; 0x2c
   4fdfc:	mul	r7, r7, r1
   4fe00:	add	r2, r2, #1
   4fe04:	add	r0, r0, r7, lsl #3
   4fe08:	cmp	r2, r6
   4fe0c:	blt	4fda4 <GetDataSlab+0x23f28>
   4fe10:	ldr	ip, [sp, #44]	; 0x2c
   4fe14:	mov	r0, #0
   4fe18:	cmp	r9, #13
   4fe1c:	bne	2e97c <GetDataSlab+0x2b00>
   4fe20:	b	52b68 <GetDataSlab+0x26cec>
   4fe24:	cmp	r6, #1
   4fe28:	blt	53228 <GetDataSlab+0x273ac>
   4fe2c:	ldr	r0, [sp, #28]
   4fe30:	ldr	r1, [sp, #24]
   4fe34:	ldr	r2, [sp, #56]	; 0x38
   4fe38:	mov	r7, #0
   4fe3c:	mla	r0, r0, ip, r1
   4fe40:	add	r2, r2, r0
   4fe44:	ldr	r0, [sp, #60]	; 0x3c
   4fe48:	cmp	r0, #1
   4fe4c:	blt	4fea8 <GetDataSlab+0x2402c>
   4fe50:	ldr	r4, [sp, #68]	; 0x44
   4fe54:	ldr	ip, [fp, #8]
   4fe58:	mov	r0, #0
   4fe5c:	mov	r6, #0
   4fe60:	ldr	r5, [lr]
   4fe64:	add	r0, r0, #4
   4fe68:	mul	r5, r5, r6
   4fe6c:	ldrb	r5, [r2, r5]
   4fe70:	str	r5, [r4, r6, lsl #2]
   4fe74:	add	r6, r6, #1
   4fe78:	ldr	r5, [sl]
   4fe7c:	cmp	r6, r5
   4fe80:	blt	4fe60 <GetDataSlab+0x23fe4>
   4fe84:	add	r4, r4, r0
   4fe88:	ldr	r0, [sp, #32]
   4fe8c:	ldr	ip, [ip]
   4fe90:	str	r5, [sp, #60]	; 0x3c
   4fe94:	str	r4, [sp, #68]	; 0x44
   4fe98:	ldr	r4, [r0]
   4fe9c:	ldr	r0, [sp, #36]	; 0x24
   4fea0:	ldr	r0, [r0]
   4fea4:	b	4feb4 <GetDataSlab+0x24038>
   4fea8:	ldr	r1, [sp, #52]	; 0x34
   4feac:	ldr	r0, [sp, #48]	; 0x30
   4feb0:	mov	r4, r1
   4feb4:	add	r7, r7, #1
   4feb8:	str	r0, [sp, #48]	; 0x30
   4febc:	mla	r2, ip, r0, r2
   4fec0:	mov	r0, #0
   4fec4:	mov	r1, r4
   4fec8:	str	r4, [sp, #52]	; 0x34
   4fecc:	cmp	r7, r4
   4fed0:	blt	4fe44 <GetDataSlab+0x23fc8>
   4fed4:	b	2e97c <GetDataSlab+0x2b00>
   4fed8:	cmp	r6, #1
   4fedc:	blt	5323c <GetDataSlab+0x273c0>
   4fee0:	ldr	r0, [sp, #28]
   4fee4:	ldr	r1, [sp, #24]
   4fee8:	ldr	r2, [sp, #56]	; 0x38
   4feec:	mov	r7, #0
   4fef0:	mla	r0, r0, ip, r1
   4fef4:	add	r2, r2, r0, lsl #1
   4fef8:	ldr	r0, [sp, #60]	; 0x3c
   4fefc:	cmp	r0, #1
   4ff00:	blt	4ff60 <GetDataSlab+0x240e4>
   4ff04:	ldr	r4, [sp, #68]	; 0x44
   4ff08:	ldr	ip, [fp, #8]
   4ff0c:	mov	r0, #0
   4ff10:	mov	r6, #0
   4ff14:	ldr	r5, [lr]
   4ff18:	add	r0, r0, #4
   4ff1c:	mul	r5, r5, r6
   4ff20:	add	r5, r2, r5, lsl #1
   4ff24:	ldrsh	r5, [r5]
   4ff28:	str	r5, [r4, r6, lsl #2]
   4ff2c:	add	r6, r6, #1
   4ff30:	ldr	r5, [sl]
   4ff34:	cmp	r6, r5
   4ff38:	blt	4ff14 <GetDataSlab+0x24098>
   4ff3c:	add	r4, r4, r0
   4ff40:	ldr	r0, [sp, #32]
   4ff44:	ldr	ip, [ip]
   4ff48:	str	r5, [sp, #60]	; 0x3c
   4ff4c:	str	r4, [sp, #68]	; 0x44
   4ff50:	ldr	r4, [r0]
   4ff54:	ldr	r0, [sp, #36]	; 0x24
   4ff58:	ldr	r0, [r0]
   4ff5c:	b	4ff6c <GetDataSlab+0x240f0>
   4ff60:	ldr	r1, [sp, #52]	; 0x34
   4ff64:	ldr	r0, [sp, #48]	; 0x30
   4ff68:	mov	r4, r1
   4ff6c:	str	r0, [sp, #48]	; 0x30
   4ff70:	mul	r0, ip, r0
   4ff74:	add	r7, r7, #1
   4ff78:	mov	r1, r4
   4ff7c:	str	r4, [sp, #52]	; 0x34
   4ff80:	add	r2, r2, r0, lsl #1
   4ff84:	mov	r0, #0
   4ff88:	cmp	r7, r4
   4ff8c:	blt	4fef8 <GetDataSlab+0x2407c>
   4ff90:	b	2e97c <GetDataSlab+0x2b00>
   4ff94:	cmp	r6, #1
   4ff98:	blt	53250 <GetDataSlab+0x273d4>
   4ff9c:	ldr	r0, [sp, #28]
   4ffa0:	ldr	r1, [sp, #24]
   4ffa4:	ldr	r2, [sp, #56]	; 0x38
   4ffa8:	mov	r7, #0
   4ffac:	mla	r0, r0, ip, r1
   4ffb0:	add	r2, r2, r0, lsl #1
   4ffb4:	ldr	r0, [sp, #60]	; 0x3c
   4ffb8:	cmp	r0, #1
   4ffbc:	blt	5001c <GetDataSlab+0x241a0>
   4ffc0:	ldr	r4, [sp, #68]	; 0x44
   4ffc4:	ldr	ip, [fp, #8]
   4ffc8:	mov	r0, #0
   4ffcc:	mov	r6, #0
   4ffd0:	ldr	r5, [lr]
   4ffd4:	add	r0, r0, #4
   4ffd8:	mul	r5, r5, r6
   4ffdc:	add	r5, r2, r5, lsl #1
   4ffe0:	ldrh	r5, [r5]
   4ffe4:	str	r5, [r4, r6, lsl #2]
   4ffe8:	add	r6, r6, #1
   4ffec:	ldr	r5, [sl]
   4fff0:	cmp	r6, r5
   4fff4:	blt	4ffd0 <GetDataSlab+0x24154>
   4fff8:	add	r4, r4, r0
   4fffc:	ldr	r0, [sp, #32]
   50000:	ldr	ip, [ip]
   50004:	str	r5, [sp, #60]	; 0x3c
   50008:	str	r4, [sp, #68]	; 0x44
   5000c:	ldr	r4, [r0]
   50010:	ldr	r0, [sp, #36]	; 0x24
   50014:	ldr	r0, [r0]
   50018:	b	50028 <GetDataSlab+0x241ac>
   5001c:	ldr	r1, [sp, #52]	; 0x34
   50020:	ldr	r0, [sp, #48]	; 0x30
   50024:	mov	r4, r1
   50028:	str	r0, [sp, #48]	; 0x30
   5002c:	mul	r0, ip, r0
   50030:	add	r7, r7, #1
   50034:	mov	r1, r4
   50038:	str	r4, [sp, #52]	; 0x34
   5003c:	add	r2, r2, r0, lsl #1
   50040:	mov	r0, #0
   50044:	cmp	r7, r4
   50048:	blt	4ffb4 <GetDataSlab+0x24138>
   5004c:	b	2e97c <GetDataSlab+0x2b00>
   50050:	cmp	r6, #1
   50054:	blt	53264 <GetDataSlab+0x273e8>
   50058:	ldr	r0, [sp, #28]
   5005c:	ldr	r1, [sp, #24]
   50060:	ldr	r2, [sp, #56]	; 0x38
   50064:	mov	r7, #0
   50068:	mla	r0, r0, ip, r1
   5006c:	add	r2, r2, r0, lsl #2
   50070:	ldr	r0, [sp, #60]	; 0x3c
   50074:	cmp	r0, #1
   50078:	blt	500d4 <GetDataSlab+0x24258>
   5007c:	ldr	r4, [sp, #68]	; 0x44
   50080:	ldr	ip, [fp, #8]
   50084:	mov	r0, #0
   50088:	mov	r6, #0
   5008c:	ldr	r5, [lr]
   50090:	add	r0, r0, #4
   50094:	mul	r5, r5, r6
   50098:	ldr	r5, [r2, r5, lsl #2]
   5009c:	str	r5, [r4, r6, lsl #2]
   500a0:	add	r6, r6, #1
   500a4:	ldr	r5, [sl]
   500a8:	cmp	r6, r5
   500ac:	blt	5008c <GetDataSlab+0x24210>
   500b0:	add	r4, r4, r0
   500b4:	ldr	r0, [sp, #32]
   500b8:	ldr	ip, [ip]
   500bc:	str	r5, [sp, #60]	; 0x3c
   500c0:	str	r4, [sp, #68]	; 0x44
   500c4:	ldr	r4, [r0]
   500c8:	ldr	r0, [sp, #36]	; 0x24
   500cc:	ldr	r0, [r0]
   500d0:	b	500e0 <GetDataSlab+0x24264>
   500d4:	ldr	r1, [sp, #52]	; 0x34
   500d8:	ldr	r0, [sp, #48]	; 0x30
   500dc:	mov	r4, r1
   500e0:	str	r0, [sp, #48]	; 0x30
   500e4:	mul	r0, ip, r0
   500e8:	add	r7, r7, #1
   500ec:	mov	r1, r4
   500f0:	str	r4, [sp, #52]	; 0x34
   500f4:	add	r2, r2, r0, lsl #2
   500f8:	mov	r0, #0
   500fc:	cmp	r7, r4
   50100:	blt	50070 <GetDataSlab+0x241f4>
   50104:	b	2e97c <GetDataSlab+0x2b00>
   50108:	cmp	r6, #1
   5010c:	blt	53278 <GetDataSlab+0x273fc>
   50110:	ldr	r0, [sp, #28]
   50114:	ldr	r1, [sp, #24]
   50118:	ldr	r2, [sp, #56]	; 0x38
   5011c:	mov	r7, #0
   50120:	mla	r0, r0, ip, r1
   50124:	add	r2, r2, r0, lsl #2
   50128:	ldr	r0, [sp, #60]	; 0x3c
   5012c:	cmp	r0, #1
   50130:	blt	5018c <GetDataSlab+0x24310>
   50134:	ldr	r4, [sp, #68]	; 0x44
   50138:	ldr	ip, [fp, #8]
   5013c:	mov	r0, #0
   50140:	mov	r6, #0
   50144:	ldr	r5, [lr]
   50148:	add	r0, r0, #4
   5014c:	mul	r5, r5, r6
   50150:	ldr	r5, [r2, r5, lsl #2]
   50154:	str	r5, [r4, r6, lsl #2]
   50158:	add	r6, r6, #1
   5015c:	ldr	r5, [sl]
   50160:	cmp	r6, r5
   50164:	blt	50144 <GetDataSlab+0x242c8>
   50168:	add	r4, r4, r0
   5016c:	ldr	r0, [sp, #32]
   50170:	ldr	ip, [ip]
   50174:	str	r5, [sp, #60]	; 0x3c
   50178:	str	r4, [sp, #68]	; 0x44
   5017c:	ldr	r4, [r0]
   50180:	ldr	r0, [sp, #36]	; 0x24
   50184:	ldr	r0, [r0]
   50188:	b	50198 <GetDataSlab+0x2431c>
   5018c:	ldr	r1, [sp, #52]	; 0x34
   50190:	ldr	r0, [sp, #48]	; 0x30
   50194:	mov	r4, r1
   50198:	str	r0, [sp, #48]	; 0x30
   5019c:	mul	r0, ip, r0
   501a0:	add	r7, r7, #1
   501a4:	mov	r1, r4
   501a8:	str	r4, [sp, #52]	; 0x34
   501ac:	add	r2, r2, r0, lsl #2
   501b0:	mov	r0, #0
   501b4:	cmp	r7, r4
   501b8:	blt	50128 <GetDataSlab+0x242ac>
   501bc:	b	2e97c <GetDataSlab+0x2b00>
   501c0:	cmp	r6, #1
   501c4:	blt	5328c <GetDataSlab+0x27410>
   501c8:	ldr	r0, [sp, #28]
   501cc:	ldr	r1, [sp, #24]
   501d0:	ldr	r2, [sp, #56]	; 0x38
   501d4:	mov	r7, #0
   501d8:	mla	r0, r0, ip, r1
   501dc:	add	r2, r2, r0, lsl #2
   501e0:	ldr	r0, [sp, #60]	; 0x3c
   501e4:	cmp	r0, #1
   501e8:	blt	50250 <GetDataSlab+0x243d4>
   501ec:	ldr	r4, [sp, #68]	; 0x44
   501f0:	ldr	ip, [fp, #8]
   501f4:	mov	r0, #0
   501f8:	mov	r6, #0
   501fc:	ldr	r5, [lr]
   50200:	add	r0, r0, #4
   50204:	mul	r5, r5, r6
   50208:	add	r5, r2, r5, lsl #2
   5020c:	vldr	s0, [r5]
   50210:	vcvt.u32.f32	s0, s0
   50214:	vmov	r5, s0
   50218:	str	r5, [r4, r6, lsl #2]
   5021c:	add	r6, r6, #1
   50220:	ldr	r5, [sl]
   50224:	cmp	r6, r5
   50228:	blt	501fc <GetDataSlab+0x24380>
   5022c:	add	r4, r4, r0
   50230:	ldr	r0, [sp, #32]
   50234:	ldr	ip, [ip]
   50238:	str	r5, [sp, #60]	; 0x3c
   5023c:	str	r4, [sp, #68]	; 0x44
   50240:	ldr	r4, [r0]
   50244:	ldr	r0, [sp, #36]	; 0x24
   50248:	ldr	r0, [r0]
   5024c:	b	5025c <GetDataSlab+0x243e0>
   50250:	ldr	r1, [sp, #52]	; 0x34
   50254:	ldr	r0, [sp, #48]	; 0x30
   50258:	mov	r4, r1
   5025c:	str	r0, [sp, #48]	; 0x30
   50260:	mul	r0, ip, r0
   50264:	add	r7, r7, #1
   50268:	mov	r1, r4
   5026c:	str	r4, [sp, #52]	; 0x34
   50270:	add	r2, r2, r0, lsl #2
   50274:	mov	r0, #0
   50278:	cmp	r7, r4
   5027c:	blt	501e0 <GetDataSlab+0x24364>
   50280:	b	2e97c <GetDataSlab+0x2b00>
   50284:	cmp	r6, #1
   50288:	blt	532a0 <GetDataSlab+0x27424>
   5028c:	ldr	r0, [sp, #28]
   50290:	ldr	r1, [sp, #24]
   50294:	ldr	r2, [sp, #56]	; 0x38
   50298:	mov	r7, #0
   5029c:	mla	r0, r0, ip, r1
   502a0:	add	r2, r2, r0, lsl #3
   502a4:	ldr	r0, [sp, #60]	; 0x3c
   502a8:	cmp	r0, #1
   502ac:	blt	50314 <GetDataSlab+0x24498>
   502b0:	ldr	r4, [sp, #68]	; 0x44
   502b4:	ldr	ip, [fp, #8]
   502b8:	mov	r0, #0
   502bc:	mov	r6, #0
   502c0:	ldr	r5, [lr]
   502c4:	add	r0, r0, #4
   502c8:	mul	r5, r5, r6
   502cc:	add	r5, r2, r5, lsl #3
   502d0:	vldr	d16, [r5]
   502d4:	vcvt.u32.f64	s0, d16
   502d8:	vmov	r5, s0
   502dc:	str	r5, [r4, r6, lsl #2]
   502e0:	add	r6, r6, #1
   502e4:	ldr	r5, [sl]
   502e8:	cmp	r6, r5
   502ec:	blt	502c0 <GetDataSlab+0x24444>
   502f0:	add	r4, r4, r0
   502f4:	ldr	r0, [sp, #32]
   502f8:	ldr	ip, [ip]
   502fc:	str	r5, [sp, #60]	; 0x3c
   50300:	str	r4, [sp, #68]	; 0x44
   50304:	ldr	r4, [r0]
   50308:	ldr	r0, [sp, #36]	; 0x24
   5030c:	ldr	r0, [r0]
   50310:	b	50320 <GetDataSlab+0x244a4>
   50314:	ldr	r1, [sp, #52]	; 0x34
   50318:	ldr	r0, [sp, #48]	; 0x30
   5031c:	mov	r4, r1
   50320:	str	r0, [sp, #48]	; 0x30
   50324:	mul	r0, ip, r0
   50328:	add	r7, r7, #1
   5032c:	mov	r1, r4
   50330:	str	r4, [sp, #52]	; 0x34
   50334:	add	r2, r2, r0, lsl #3
   50338:	mov	r0, #0
   5033c:	cmp	r7, r4
   50340:	blt	502a4 <GetDataSlab+0x24428>
   50344:	b	2e97c <GetDataSlab+0x2b00>
   50348:	cmp	r6, #1
   5034c:	blt	532b4 <GetDataSlab+0x27438>
   50350:	ldr	r0, [sp, #28]
   50354:	ldr	r2, [sp, #24]
   50358:	mla	r0, r0, ip, r2
   5035c:	ldr	r2, [sp, #56]	; 0x38
   50360:	ldr	ip, [fp, #8]
   50364:	add	r0, r2, r0, lsl #3
   50368:	mov	r2, #0
   5036c:	cmp	r5, #1
   50370:	blt	503bc <GetDataSlab+0x24540>
   50374:	mov	r7, #0
   50378:	mov	r6, #0
   5037c:	ldr	r5, [lr]
   50380:	add	r7, r7, #4
   50384:	mul	r5, r5, r6
   50388:	ldr	r5, [r0, r5, lsl #3]
   5038c:	str	r5, [r4, r6, lsl #2]
   50390:	add	r6, r6, #1
   50394:	ldr	r5, [sl]
   50398:	cmp	r6, r5
   5039c:	blt	5037c <GetDataSlab+0x24500>
   503a0:	ldr	r1, [sp, #32]
   503a4:	add	r4, r4, r7
   503a8:	ldr	r7, [ip]
   503ac:	ldr	r6, [r1]
   503b0:	ldr	r1, [sp, #36]	; 0x24
   503b4:	ldr	r1, [r1]
   503b8:	b	503c0 <GetDataSlab+0x24544>
   503bc:	ldr	r7, [sp, #44]	; 0x2c
   503c0:	str	r7, [sp, #44]	; 0x2c
   503c4:	mul	r7, r7, r1
   503c8:	add	r2, r2, #1
   503cc:	add	r0, r0, r7, lsl #3
   503d0:	cmp	r2, r6
   503d4:	blt	5036c <GetDataSlab+0x244f0>
   503d8:	ldr	ip, [sp, #44]	; 0x2c
   503dc:	mov	r0, #0
   503e0:	cmp	r9, #13
   503e4:	bne	2e97c <GetDataSlab+0x2b00>
   503e8:	b	52c34 <GetDataSlab+0x26db8>
   503ec:	ldr	r1, [sp, #52]	; 0x34
   503f0:	mov	r0, #0
   503f4:	cmp	r1, #1
   503f8:	ldrge	r1, [sp, #60]	; 0x3c
   503fc:	cmpge	r1, #1
   50400:	blt	2e97c <GetDataSlab+0x2b00>
   50404:	ldr	r0, [sp, #48]	; 0x30
   50408:	ldr	r1, [sp, #28]
   5040c:	ldr	r2, [sp, #24]
   50410:	ldr	sl, [sp, #68]	; 0x44
   50414:	add	r4, sp, #124	; 0x7c
   50418:	mov	lr, #0
   5041c:	mul	r0, r0, ip
   50420:	mla	r3, r1, ip, r2
   50424:	str	r0, [sp, #48]	; 0x30
   50428:	ldr	r0, [sp, #56]	; 0x38
   5042c:	str	r3, [sp, #32]
   50430:	add	r8, r0, r3
   50434:	ldr	r0, [sp, #60]	; 0x3c
   50438:	mov	r3, r0
   5043c:	add	r0, r0, r2
   50440:	mov	r2, #0
   50444:	mla	r0, r1, ip, r0
   50448:	cmp	r3, #1
   5044c:	mov	r1, #0
   50450:	str	r0, [sp, #40]	; 0x28
   50454:	sub	r0, r9, #1
   50458:	movwhi	r2, #1
   5045c:	clz	r0, r0
   50460:	lsr	r0, r0, #5
   50464:	and	r0, r2, r0
   50468:	lsl	r2, r9, #1
   5046c:	str	r0, [sp, #44]	; 0x2c
   50470:	lsl	r0, r3, #3
   50474:	str	r0, [sp, #64]	; 0x40
   50478:	bic	r0, r3, #1
   5047c:	str	r0, [sp, #36]	; 0x24
   50480:	ldr	r0, [sp, #44]	; 0x2c
   50484:	mov	r5, #0
   50488:	cmp	r0, #0
   5048c:	mov	r0, sl
   50490:	beq	50538 <GetDataSlab+0x246bc>
   50494:	ldr	r0, [sp, #48]	; 0x30
   50498:	ldr	r3, [sp, #64]	; 0x40
   5049c:	ldr	r6, [sp, #68]	; 0x44
   504a0:	ldr	r7, [sp, #40]	; 0x28
   504a4:	mul	r3, r3, lr
   504a8:	mul	r0, r0, lr
   504ac:	add	r5, r6, r3
   504b0:	add	r6, r7, r0
   504b4:	ldr	r7, [sp, #56]	; 0x38
   504b8:	add	r6, r7, r6
   504bc:	cmp	r5, r6
   504c0:	bcs	504f4 <GetDataSlab+0x24678>
   504c4:	ldr	r7, [sp, #64]	; 0x40
   504c8:	ldr	r6, [sp, #68]	; 0x44
   504cc:	mov	r5, #0
   504d0:	add	r3, r7, r3
   504d4:	ldr	r7, [sp, #32]
   504d8:	add	r3, r6, r3
   504dc:	ldr	r6, [sp, #56]	; 0x38
   504e0:	add	r0, r7, r0
   504e4:	add	r0, r6, r0
   504e8:	cmp	r0, r3
   504ec:	mov	r0, sl
   504f0:	bcc	50538 <GetDataSlab+0x246bc>
   504f4:	ldr	r5, [sp, #36]	; 0x24
   504f8:	mov	r3, r8
   504fc:	mov	ip, sl
   50500:	add	r0, sl, r5, lsl #3
   50504:	ldrh	r6, [r3], r2
   50508:	subs	r5, r5, #2
   5050c:	strh	r6, [sp, #124]	; 0x7c
   50510:	vld1.16	{d16[0]}, [r4 :16]
   50514:	vmovl.u8	q8, d16
   50518:	vmovl.u16	q8, d16
   5051c:	vmovl.u32	q8, d16
   50520:	vst1.64	{d16-d17}, [ip]!
   50524:	bne	50504 <GetDataSlab+0x24688>
   50528:	ldr	r3, [sp, #60]	; 0x3c
   5052c:	ldr	r5, [sp, #36]	; 0x24
   50530:	cmp	r3, r5
   50534:	beq	5055c <GetDataSlab+0x246e0>
   50538:	ldr	r7, [sp, #60]	; 0x3c
   5053c:	mla	r3, r9, r5, r8
   50540:	sub	r5, r7, r5
   50544:	ldrb	r6, [r3], r9
   50548:	subs	r5, r5, #1
   5054c:	str	r6, [r0]
   50550:	str	r1, [r0, #4]
   50554:	add	r0, r0, #8
   50558:	bne	50544 <GetDataSlab+0x246c8>
   5055c:	ldr	r0, [sp, #48]	; 0x30
   50560:	ldr	r3, [sp, #52]	; 0x34
   50564:	add	lr, lr, #1
   50568:	add	r8, r8, r0
   5056c:	ldr	r0, [sp, #64]	; 0x40
   50570:	cmp	lr, r3
   50574:	add	sl, sl, r0
   50578:	mov	r0, #0
   5057c:	bne	50480 <GetDataSlab+0x24604>
   50580:	b	2e97c <GetDataSlab+0x2b00>
   50584:	ldr	r1, [sp, #52]	; 0x34
   50588:	mov	r0, #0
   5058c:	cmp	r1, #1
   50590:	ldrge	r1, [sp, #60]	; 0x3c
   50594:	cmpge	r1, #1
   50598:	blt	2e97c <GetDataSlab+0x2b00>
   5059c:	ldr	r0, [sp, #28]
   505a0:	ldr	r1, [sp, #24]
   505a4:	mov	sl, #0
   505a8:	lsl	r6, r9, #1
   505ac:	lsl	r4, r9, #2
   505b0:	add	r3, sp, #112	; 0x70
   505b4:	mla	r0, r0, ip, r1
   505b8:	ldr	r1, [sp, #56]	; 0x38
   505bc:	add	r8, r1, r0, lsl #1
   505c0:	ldr	r0, [sp, #60]	; 0x3c
   505c4:	sub	r1, r9, #1
   505c8:	clz	r1, r1
   505cc:	lsr	r1, r1, #5
   505d0:	mov	r2, r0
   505d4:	cmp	r0, #1
   505d8:	mov	r0, #0
   505dc:	movwhi	r0, #1
   505e0:	bic	r9, r2, #1
   505e4:	and	r0, r0, r1
   505e8:	str	r0, [sp, #64]	; 0x40
   505ec:	ldr	r0, [sp, #48]	; 0x30
   505f0:	mul	r0, r0, ip
   505f4:	lsl	r0, r0, #1
   505f8:	str	r0, [sp, #56]	; 0x38
   505fc:	lsl	r0, r2, #3
   50600:	str	r0, [sp, #48]	; 0x30
   50604:	ldr	r0, [sp, #64]	; 0x40
   50608:	ldr	r7, [sp, #68]	; 0x44
   5060c:	mov	r2, #0
   50610:	cmp	r0, #0
   50614:	mov	lr, r7
   50618:	beq	50660 <GetDataSlab+0x247e4>
   5061c:	add	lr, r7, r9, lsl #3
   50620:	mov	r5, r9
   50624:	mov	r1, r8
   50628:	mov	r2, r7
   5062c:	ldr	ip, [r1], r4
   50630:	subs	r5, r5, #2
   50634:	str	ip, [sp, #112]	; 0x70
   50638:	vld1.32	{d16[0]}, [r3 :32]
   5063c:	vmovl.s16	q8, d16
   50640:	vmovl.s32	q8, d16
   50644:	vst1.64	{d16-d17}, [r2]!
   50648:	bne	5062c <GetDataSlab+0x247b0>
   5064c:	ldr	r0, [sp, #60]	; 0x3c
   50650:	ldr	r7, [sp, #68]	; 0x44
   50654:	mov	r2, r9
   50658:	cmp	r0, r9
   5065c:	beq	50684 <GetDataSlab+0x24808>
   50660:	ldr	r0, [sp, #60]	; 0x3c
   50664:	mla	r1, r6, r2, r8
   50668:	sub	r2, r0, r2
   5066c:	ldrsh	r0, [r1], r6
   50670:	subs	r2, r2, #1
   50674:	asr	r5, r0, #31
   50678:	stm	lr, {r0, r5}
   5067c:	add	lr, lr, #8
   50680:	bne	5066c <GetDataSlab+0x247f0>
   50684:	ldr	r0, [sp, #56]	; 0x38
   50688:	ldr	r1, [sp, #52]	; 0x34
   5068c:	add	sl, sl, #1
   50690:	add	r8, r8, r0
   50694:	ldr	r0, [sp, #48]	; 0x30
   50698:	cmp	sl, r1
   5069c:	add	r7, r7, r0
   506a0:	mov	r0, #0
   506a4:	str	r7, [sp, #68]	; 0x44
   506a8:	bne	50604 <GetDataSlab+0x24788>
   506ac:	b	2e97c <GetDataSlab+0x2b00>
   506b0:	ldr	r1, [sp, #52]	; 0x34
   506b4:	mov	r0, #0
   506b8:	cmp	r1, #1
   506bc:	ldrge	r1, [sp, #60]	; 0x3c
   506c0:	cmpge	r1, #1
   506c4:	blt	2e97c <GetDataSlab+0x2b00>
   506c8:	ldr	r0, [sp, #28]
   506cc:	ldr	r1, [sp, #24]
   506d0:	mov	r3, #0
   506d4:	lsl	r6, r9, #1
   506d8:	lsl	r4, r9, #2
   506dc:	add	r8, sp, #116	; 0x74
   506e0:	mov	r7, #0
   506e4:	mla	r0, r0, ip, r1
   506e8:	ldr	r1, [sp, #56]	; 0x38
   506ec:	add	sl, r1, r0, lsl #1
   506f0:	ldr	r0, [sp, #60]	; 0x3c
   506f4:	sub	r1, r9, #1
   506f8:	clz	r1, r1
   506fc:	lsr	r1, r1, #5
   50700:	mov	r2, r0
   50704:	cmp	r0, #1
   50708:	mov	r0, #0
   5070c:	movwhi	r0, #1
   50710:	bic	r9, r2, #1
   50714:	and	r0, r0, r1
   50718:	str	r0, [sp, #64]	; 0x40
   5071c:	ldr	r0, [sp, #48]	; 0x30
   50720:	mul	r0, r0, ip
   50724:	lsl	r0, r0, #1
   50728:	str	r0, [sp, #56]	; 0x38
   5072c:	lsl	r0, r2, #3
   50730:	str	r0, [sp, #48]	; 0x30
   50734:	ldr	r0, [sp, #64]	; 0x40
   50738:	ldr	ip, [sp, #68]	; 0x44
   5073c:	mov	r5, #0
   50740:	cmp	r0, #0
   50744:	mov	r0, ip
   50748:	beq	5078c <GetDataSlab+0x24910>
   5074c:	add	r0, ip, r9, lsl #3
   50750:	mov	r5, r9
   50754:	mov	r1, sl
   50758:	ldr	lr, [r1], r4
   5075c:	subs	r5, r5, #2
   50760:	str	lr, [sp, #116]	; 0x74
   50764:	vld1.32	{d16[0]}, [r8 :32]
   50768:	vmovl.u16	q8, d16
   5076c:	vmovl.u32	q8, d16
   50770:	vst1.64	{d16-d17}, [ip]!
   50774:	bne	50758 <GetDataSlab+0x248dc>
   50778:	ldr	r1, [sp, #60]	; 0x3c
   5077c:	ldr	ip, [sp, #68]	; 0x44
   50780:	mov	r5, r9
   50784:	cmp	r1, r9
   50788:	beq	507ac <GetDataSlab+0x24930>
   5078c:	ldr	r2, [sp, #60]	; 0x3c
   50790:	mla	r1, r6, r5, sl
   50794:	sub	r5, r2, r5
   50798:	ldrh	r2, [r1], r6
   5079c:	subs	r5, r5, #1
   507a0:	strd	r2, [r0]
   507a4:	add	r0, r0, #8
   507a8:	bne	50798 <GetDataSlab+0x2491c>
   507ac:	ldr	r0, [sp, #56]	; 0x38
   507b0:	ldr	r1, [sp, #52]	; 0x34
   507b4:	add	r7, r7, #1
   507b8:	add	sl, sl, r0
   507bc:	ldr	r0, [sp, #48]	; 0x30
   507c0:	cmp	r7, r1
   507c4:	add	ip, ip, r0
   507c8:	mov	r0, #0
   507cc:	str	ip, [sp, #68]	; 0x44
   507d0:	bne	50734 <GetDataSlab+0x248b8>
   507d4:	b	2e97c <GetDataSlab+0x2b00>
   507d8:	ldr	r1, [sp, #52]	; 0x34
   507dc:	mov	r0, #0
   507e0:	cmp	r1, #1
   507e4:	ldrge	r1, [sp, #60]	; 0x3c
   507e8:	cmpge	r1, #1
   507ec:	blt	2e97c <GetDataSlab+0x2b00>
   507f0:	ldr	r0, [sp, #28]
   507f4:	ldr	r1, [sp, #24]
   507f8:	lsl	r6, r9, #2
   507fc:	lsl	r4, r9, #3
   50800:	add	r3, sp, #96	; 0x60
   50804:	mla	r0, r0, ip, r1
   50808:	ldr	r1, [sp, #56]	; 0x38
   5080c:	add	sl, r1, r0, lsl #2
   50810:	mov	r0, #0
   50814:	sub	r1, r9, #1
   50818:	str	r0, [sp, #64]	; 0x40
   5081c:	ldr	r0, [sp, #60]	; 0x3c
   50820:	clz	r1, r1
   50824:	lsr	r1, r1, #5
   50828:	mov	r2, r0
   5082c:	cmp	r0, #1
   50830:	mov	r0, #0
   50834:	movwhi	r0, #1
   50838:	bic	r9, r2, #1
   5083c:	and	r0, r0, r1
   50840:	str	r0, [sp, #56]	; 0x38
   50844:	ldr	r0, [sp, #48]	; 0x30
   50848:	mul	r0, r0, ip
   5084c:	lsl	r0, r0, #2
   50850:	str	r0, [sp, #48]	; 0x30
   50854:	lsl	r0, r2, #3
   50858:	str	r0, [sp, #44]	; 0x2c
   5085c:	ldr	r0, [sp, #56]	; 0x38
   50860:	ldr	r7, [sp, #68]	; 0x44
   50864:	mov	r2, #0
   50868:	cmp	r0, #0
   5086c:	mov	r8, r7
   50870:	beq	508bc <GetDataSlab+0x24a40>
   50874:	add	r8, r7, r9, lsl #3
   50878:	mov	r5, r9
   5087c:	mov	r1, sl
   50880:	mov	r2, r7
   50884:	ldm	r1, {ip, lr}
   50888:	add	r1, r1, r4
   5088c:	subs	r5, r5, #2
   50890:	str	lr, [sp, #100]	; 0x64
   50894:	str	ip, [sp, #96]	; 0x60
   50898:	vld1.32	{d16}, [r3 :64]
   5089c:	vmovl.s32	q8, d16
   508a0:	vst1.64	{d16-d17}, [r2]!
   508a4:	bne	50884 <GetDataSlab+0x24a08>
   508a8:	ldr	r0, [sp, #60]	; 0x3c
   508ac:	ldr	r7, [sp, #68]	; 0x44
   508b0:	mov	r2, r9
   508b4:	cmp	r0, r9
   508b8:	beq	508e0 <GetDataSlab+0x24a64>
   508bc:	ldr	r0, [sp, #60]	; 0x3c
   508c0:	mla	r1, r6, r2, sl
   508c4:	sub	r2, r0, r2
   508c8:	ldr	r0, [r1], r6
   508cc:	subs	r2, r2, #1
   508d0:	asr	r5, r0, #31
   508d4:	stm	r8, {r0, r5}
   508d8:	add	r8, r8, #8
   508dc:	bne	508c8 <GetDataSlab+0x24a4c>
   508e0:	ldr	r0, [sp, #48]	; 0x30
   508e4:	ldr	r2, [sp, #64]	; 0x40
   508e8:	ldr	r1, [sp, #52]	; 0x34
   508ec:	add	sl, sl, r0
   508f0:	ldr	r0, [sp, #44]	; 0x2c
   508f4:	add	r2, r2, #1
   508f8:	cmp	r2, r1
   508fc:	str	r2, [sp, #64]	; 0x40
   50900:	add	r7, r7, r0
   50904:	mov	r0, #0
   50908:	str	r7, [sp, #68]	; 0x44
   5090c:	bne	5085c <GetDataSlab+0x249e0>
   50910:	b	2e97c <GetDataSlab+0x2b00>
   50914:	ldr	r1, [sp, #52]	; 0x34
   50918:	mov	r0, #0
   5091c:	cmp	r1, #1
   50920:	ldrge	r1, [sp, #60]	; 0x3c
   50924:	cmpge	r1, #1
   50928:	blt	2e97c <GetDataSlab+0x2b00>
   5092c:	ldr	r0, [sp, #28]
   50930:	ldr	r1, [sp, #24]
   50934:	ldr	r7, [sp, #60]	; 0x3c
   50938:	mov	r3, #0
   5093c:	lsl	r6, r9, #2
   50940:	lsl	r4, r9, #3
   50944:	mla	r0, r0, ip, r1
   50948:	ldr	r1, [sp, #56]	; 0x38
   5094c:	add	sl, r1, r0, lsl #2
   50950:	ldr	r0, [sp, #60]	; 0x3c
   50954:	sub	r1, r9, #1
   50958:	mov	r9, #0
   5095c:	clz	r1, r1
   50960:	lsr	r1, r1, #5
   50964:	mov	r2, r0
   50968:	cmp	r0, #1
   5096c:	mov	r0, #0
   50970:	movwhi	r0, #1
   50974:	and	r0, r0, r1
   50978:	str	r0, [sp, #64]	; 0x40
   5097c:	ldr	r0, [sp, #48]	; 0x30
   50980:	mul	r0, r0, ip
   50984:	lsl	r0, r0, #2
   50988:	str	r0, [sp, #56]	; 0x38
   5098c:	lsl	r0, r2, #3
   50990:	str	r0, [sp, #48]	; 0x30
   50994:	bic	r0, r2, #1
   50998:	add	r2, sp, #104	; 0x68
   5099c:	str	r0, [sp, #44]	; 0x2c
   509a0:	ldr	r0, [sp, #64]	; 0x40
   509a4:	ldr	ip, [sp, #68]	; 0x44
   509a8:	mov	r5, #0
   509ac:	cmp	r0, #0
   509b0:	mov	r0, ip
   509b4:	beq	50a00 <GetDataSlab+0x24b84>
   509b8:	ldr	r5, [sp, #44]	; 0x2c
   509bc:	mov	r1, sl
   509c0:	add	r0, ip, r5, lsl #3
   509c4:	ldr	lr, [r1]
   509c8:	ldr	r8, [r1, #4]
   509cc:	add	r1, r1, r4
   509d0:	subs	r5, r5, #2
   509d4:	str	r8, [sp, #108]	; 0x6c
   509d8:	str	lr, [sp, #104]	; 0x68
   509dc:	vld1.32	{d16}, [r2 :64]
   509e0:	vmovl.u32	q8, d16
   509e4:	vst1.64	{d16-d17}, [ip]!
   509e8:	bne	509c4 <GetDataSlab+0x24b48>
   509ec:	ldr	r1, [sp, #60]	; 0x3c
   509f0:	ldr	r5, [sp, #44]	; 0x2c
   509f4:	ldr	ip, [sp, #68]	; 0x44
   509f8:	cmp	r1, r5
   509fc:	beq	50a20 <GetDataSlab+0x24ba4>
   50a00:	mla	r1, r6, r5, sl
   50a04:	sub	r5, r7, r5
   50a08:	ldr	r8, [r1], r6
   50a0c:	subs	r5, r5, #1
   50a10:	str	r8, [r0]
   50a14:	str	r3, [r0, #4]
   50a18:	add	r0, r0, #8
   50a1c:	bne	50a08 <GetDataSlab+0x24b8c>
   50a20:	ldr	r0, [sp, #56]	; 0x38
   50a24:	ldr	r1, [sp, #52]	; 0x34
   50a28:	add	r9, r9, #1
   50a2c:	add	sl, sl, r0
   50a30:	ldr	r0, [sp, #48]	; 0x30
   50a34:	cmp	r9, r1
   50a38:	add	ip, ip, r0
   50a3c:	mov	r0, #0
   50a40:	str	ip, [sp, #68]	; 0x44
   50a44:	bne	509a0 <GetDataSlab+0x24b24>
   50a48:	b	2e97c <GetDataSlab+0x2b00>
   50a4c:	ldr	r1, [sp, #52]	; 0x34
   50a50:	mov	r0, #0
   50a54:	cmp	r1, #1
   50a58:	ldrge	r1, [sp, #60]	; 0x3c
   50a5c:	cmpge	r1, #1
   50a60:	blt	2e97c <GetDataSlab+0x2b00>
   50a64:	ldr	r0, [sp, #28]
   50a68:	ldr	r1, [sp, #24]
   50a6c:	lsl	r8, r9, #2
   50a70:	mov	r9, #0
   50a74:	mla	r0, r0, ip, r1
   50a78:	ldr	r1, [sp, #56]	; 0x38
   50a7c:	add	r0, r1, r0, lsl #2
   50a80:	str	r0, [sp, #64]	; 0x40
   50a84:	ldr	r0, [sp, #48]	; 0x30
   50a88:	mul	r0, r0, ip
   50a8c:	lsl	r0, r0, #2
   50a90:	str	r0, [sp, #56]	; 0x38
   50a94:	ldr	r0, [sp, #60]	; 0x3c
   50a98:	lsl	sl, r0, #3
   50a9c:	ldr	r4, [sp, #64]	; 0x40
   50aa0:	ldr	r7, [sp, #60]	; 0x3c
   50aa4:	ldr	r6, [sp, #68]	; 0x44
   50aa8:	mov	r5, #0
   50aac:	ldr	r0, [r4], r8
   50ab0:	bl	5f344 <__aeabi_f2lz>
   50ab4:	mov	r2, r6
   50ab8:	subs	r7, r7, #1
   50abc:	str	r0, [r2, -r5]!
   50ac0:	sub	r5, r5, #8
   50ac4:	str	r1, [r2, #4]
   50ac8:	bne	50aac <GetDataSlab+0x24c30>
   50acc:	ldr	r0, [sp, #64]	; 0x40
   50ad0:	ldr	r1, [sp, #56]	; 0x38
   50ad4:	add	r9, r9, #1
   50ad8:	add	r6, r6, sl
   50adc:	str	r6, [sp, #68]	; 0x44
   50ae0:	add	r0, r0, r1
   50ae4:	ldr	r1, [sp, #52]	; 0x34
   50ae8:	str	r0, [sp, #64]	; 0x40
   50aec:	mov	r0, #0
   50af0:	cmp	r9, r1
   50af4:	bne	50a9c <GetDataSlab+0x24c20>
   50af8:	b	2e97c <GetDataSlab+0x2b00>
   50afc:	ldr	r1, [sp, #52]	; 0x34
   50b00:	mov	r0, #0
   50b04:	cmp	r1, #1
   50b08:	ldrge	r1, [sp, #60]	; 0x3c
   50b0c:	cmpge	r1, #1
   50b10:	blt	2e97c <GetDataSlab+0x2b00>
   50b14:	ldr	r0, [sp, #28]
   50b18:	ldr	r1, [sp, #24]
   50b1c:	lsl	r8, r9, #3
   50b20:	mov	r9, #0
   50b24:	mla	r0, r0, ip, r1
   50b28:	ldr	r1, [sp, #56]	; 0x38
   50b2c:	add	r0, r1, r0, lsl #3
   50b30:	str	r0, [sp, #64]	; 0x40
   50b34:	ldr	r0, [sp, #48]	; 0x30
   50b38:	mul	r0, r0, ip
   50b3c:	lsl	r0, r0, #3
   50b40:	str	r0, [sp, #56]	; 0x38
   50b44:	ldr	r0, [sp, #60]	; 0x3c
   50b48:	lsl	sl, r0, #3
   50b4c:	ldr	r7, [sp, #64]	; 0x40
   50b50:	ldr	r5, [sp, #60]	; 0x3c
   50b54:	ldr	r6, [sp, #68]	; 0x44
   50b58:	mov	r4, #0
   50b5c:	vldr	d16, [r7]
   50b60:	vmov	r0, r1, d16
   50b64:	bl	5f370 <__aeabi_d2lz>
   50b68:	mov	r2, r6
   50b6c:	add	r7, r7, r8
   50b70:	subs	r5, r5, #1
   50b74:	str	r0, [r2, -r4]!
   50b78:	sub	r4, r4, #8
   50b7c:	str	r1, [r2, #4]
   50b80:	bne	50b5c <GetDataSlab+0x24ce0>
   50b84:	ldr	r0, [sp, #64]	; 0x40
   50b88:	ldr	r1, [sp, #56]	; 0x38
   50b8c:	add	r9, r9, #1
   50b90:	add	r6, r6, sl
   50b94:	str	r6, [sp, #68]	; 0x44
   50b98:	add	r0, r0, r1
   50b9c:	ldr	r1, [sp, #52]	; 0x34
   50ba0:	str	r0, [sp, #64]	; 0x40
   50ba4:	mov	r0, #0
   50ba8:	cmp	r9, r1
   50bac:	bne	50b4c <GetDataSlab+0x24cd0>
   50bb0:	b	2e97c <GetDataSlab+0x2b00>
   50bb4:	ldr	r1, [sp, #52]	; 0x34
   50bb8:	mov	r0, #0
   50bbc:	cmp	r1, #1
   50bc0:	ldrge	r1, [sp, #60]	; 0x3c
   50bc4:	cmpge	r1, #1
   50bc8:	blt	2e97c <GetDataSlab+0x2b00>
   50bcc:	ldr	r0, [sp, #28]
   50bd0:	ldr	r1, [sp, #24]
   50bd4:	ldr	r7, [sp, #60]	; 0x3c
   50bd8:	ldr	sl, [sp, #68]	; 0x44
   50bdc:	mov	r2, #0
   50be0:	mov	r3, #0
   50be4:	mla	r1, r0, ip, r1
   50be8:	ldr	r0, [sp, #56]	; 0x38
   50bec:	cmp	r7, #1
   50bf0:	lsl	r6, r1, #3
   50bf4:	movwhi	r2, #1
   50bf8:	str	r6, [sp, #20]
   50bfc:	add	r6, r6, r7, lsl #3
   50c00:	str	r6, [sp, #36]	; 0x24
   50c04:	add	r0, r0, r1, lsl #3
   50c08:	ldr	r1, [sp, #52]	; 0x34
   50c0c:	mul	r1, r1, r7
   50c10:	add	r1, sl, r1, lsl #3
   50c14:	str	r1, [sp, #16]
   50c18:	sub	r1, r9, #1
   50c1c:	clz	r1, r1
   50c20:	lsr	r1, r1, #5
   50c24:	and	r8, r2, r1
   50c28:	ldr	r1, [sp, #48]	; 0x30
   50c2c:	lsl	r2, r9, #4
   50c30:	mul	r1, r1, ip
   50c34:	lsl	ip, r7, #3
   50c38:	bic	r7, r7, #1
   50c3c:	lsl	r1, r1, #3
   50c40:	str	r7, [sp, #32]
   50c44:	str	r1, [sp, #64]	; 0x40
   50c48:	lsl	r1, r9, #3
   50c4c:	cmp	r8, #0
   50c50:	mov	r5, #0
   50c54:	mov	lr, sl
   50c58:	beq	50cec <GetDataSlab+0x24e70>
   50c5c:	ldr	r7, [sp, #64]	; 0x40
   50c60:	ldr	r6, [sp, #36]	; 0x24
   50c64:	mul	r4, ip, r3
   50c68:	mul	r5, r7, r3
   50c6c:	ldr	r7, [sp, #68]	; 0x44
   50c70:	add	lr, r7, r4
   50c74:	add	r7, r6, r5
   50c78:	ldr	r6, [sp, #56]	; 0x38
   50c7c:	add	r7, r6, r7
   50c80:	cmp	lr, r7
   50c84:	bcs	50cb4 <GetDataSlab+0x24e38>
   50c88:	ldr	r6, [sp, #68]	; 0x44
   50c8c:	add	r7, ip, r4
   50c90:	mov	lr, sl
   50c94:	add	r7, r6, r7
   50c98:	ldr	r6, [sp, #20]
   50c9c:	add	r6, r6, r5
   50ca0:	ldr	r5, [sp, #56]	; 0x38
   50ca4:	add	r6, r5, r6
   50ca8:	mov	r5, #0
   50cac:	cmp	r6, r7
   50cb0:	bcc	50cec <GetDataSlab+0x24e70>
   50cb4:	ldr	r4, [sp, #32]
   50cb8:	mov	r6, r8
   50cbc:	mov	r5, r0
   50cc0:	mov	r8, sl
   50cc4:	add	lr, sl, r4, lsl #3
   50cc8:	vld1.64	{d16-d17}, [r5], r2
   50ccc:	subs	r4, r4, #2
   50cd0:	vst1.64	{d16-d17}, [r8]!
   50cd4:	bne	50cc8 <GetDataSlab+0x24e4c>
   50cd8:	ldr	r4, [sp, #60]	; 0x3c
   50cdc:	ldr	r5, [sp, #32]
   50ce0:	mov	r8, r6
   50ce4:	cmp	r4, r5
   50ce8:	beq	50d10 <GetDataSlab+0x24e94>
   50cec:	ldr	r6, [sp, #60]	; 0x3c
   50cf0:	mla	r4, r1, r5, r0
   50cf4:	sub	r5, r6, r5
   50cf8:	ldrd	r6, [r4]
   50cfc:	add	r4, r4, r1
   50d00:	subs	r5, r5, #1
   50d04:	strd	r6, [lr]
   50d08:	add	lr, lr, #8
   50d0c:	bne	50cf8 <GetDataSlab+0x24e7c>
   50d10:	ldr	r7, [sp, #64]	; 0x40
   50d14:	add	r3, r3, #1
   50d18:	add	sl, sl, ip
   50d1c:	add	r0, r0, r7
   50d20:	ldr	r7, [sp, #52]	; 0x34
   50d24:	cmp	r3, r7
   50d28:	bne	50c4c <GetDataSlab+0x24dd0>
   50d2c:	ldr	r3, [sp, #16]
   50d30:	ldr	ip, [sp, #44]	; 0x2c
   50d34:	mov	r0, #0
   50d38:	ldr	r1, [sp, #40]	; 0x28
   50d3c:	str	r3, [sp, #68]	; 0x44
   50d40:	cmp	r1, #13
   50d44:	bne	2e97c <GetDataSlab+0x2b00>
   50d48:	b	52cfc <GetDataSlab+0x26e80>
   50d4c:	ldr	r1, [sp, #52]	; 0x34
   50d50:	mov	r0, #0
   50d54:	cmp	r1, #1
   50d58:	ldrge	r1, [sp, #60]	; 0x3c
   50d5c:	cmpge	r1, #1
   50d60:	blt	2e97c <GetDataSlab+0x2b00>
   50d64:	ldr	r0, [sp, #48]	; 0x30
   50d68:	ldr	r1, [sp, #28]
   50d6c:	ldr	r2, [sp, #24]
   50d70:	ldr	sl, [sp, #68]	; 0x44
   50d74:	add	r4, sp, #156	; 0x9c
   50d78:	mov	lr, #0
   50d7c:	mul	r0, r0, ip
   50d80:	mla	r3, r1, ip, r2
   50d84:	str	r0, [sp, #48]	; 0x30
   50d88:	ldr	r0, [sp, #56]	; 0x38
   50d8c:	str	r3, [sp, #32]
   50d90:	add	r8, r0, r3
   50d94:	ldr	r0, [sp, #60]	; 0x3c
   50d98:	mov	r3, r0
   50d9c:	add	r0, r0, r2
   50da0:	mov	r2, #0
   50da4:	mla	r0, r1, ip, r0
   50da8:	cmp	r3, #1
   50dac:	mov	r1, #0
   50db0:	str	r0, [sp, #40]	; 0x28
   50db4:	sub	r0, r9, #1
   50db8:	movwhi	r2, #1
   50dbc:	clz	r0, r0
   50dc0:	lsr	r0, r0, #5
   50dc4:	and	r0, r2, r0
   50dc8:	lsl	r2, r9, #1
   50dcc:	str	r0, [sp, #44]	; 0x2c
   50dd0:	lsl	r0, r3, #3
   50dd4:	str	r0, [sp, #64]	; 0x40
   50dd8:	bic	r0, r3, #1
   50ddc:	str	r0, [sp, #36]	; 0x24
   50de0:	ldr	r0, [sp, #44]	; 0x2c
   50de4:	mov	r5, #0
   50de8:	cmp	r0, #0
   50dec:	mov	r0, sl
   50df0:	beq	50e98 <GetDataSlab+0x2501c>
   50df4:	ldr	r0, [sp, #48]	; 0x30
   50df8:	ldr	r3, [sp, #64]	; 0x40
   50dfc:	ldr	r6, [sp, #68]	; 0x44
   50e00:	ldr	r7, [sp, #40]	; 0x28
   50e04:	mul	r3, r3, lr
   50e08:	mul	r0, r0, lr
   50e0c:	add	r5, r6, r3
   50e10:	add	r6, r7, r0
   50e14:	ldr	r7, [sp, #56]	; 0x38
   50e18:	add	r6, r7, r6
   50e1c:	cmp	r5, r6
   50e20:	bcs	50e54 <GetDataSlab+0x24fd8>
   50e24:	ldr	r7, [sp, #64]	; 0x40
   50e28:	ldr	r6, [sp, #68]	; 0x44
   50e2c:	mov	r5, #0
   50e30:	add	r3, r7, r3
   50e34:	ldr	r7, [sp, #32]
   50e38:	add	r3, r6, r3
   50e3c:	ldr	r6, [sp, #56]	; 0x38
   50e40:	add	r0, r7, r0
   50e44:	add	r0, r6, r0
   50e48:	cmp	r0, r3
   50e4c:	mov	r0, sl
   50e50:	bcc	50e98 <GetDataSlab+0x2501c>
   50e54:	ldr	r5, [sp, #36]	; 0x24
   50e58:	mov	r3, r8
   50e5c:	mov	ip, sl
   50e60:	add	r0, sl, r5, lsl #3
   50e64:	ldrh	r6, [r3], r2
   50e68:	subs	r5, r5, #2
   50e6c:	strh	r6, [sp, #156]	; 0x9c
   50e70:	vld1.16	{d16[0]}, [r4 :16]
   50e74:	vmovl.u8	q8, d16
   50e78:	vmovl.u16	q8, d16
   50e7c:	vmovl.u32	q8, d16
   50e80:	vst1.64	{d16-d17}, [ip]!
   50e84:	bne	50e64 <GetDataSlab+0x24fe8>
   50e88:	ldr	r3, [sp, #60]	; 0x3c
   50e8c:	ldr	r5, [sp, #36]	; 0x24
   50e90:	cmp	r3, r5
   50e94:	beq	50ebc <GetDataSlab+0x25040>
   50e98:	ldr	r7, [sp, #60]	; 0x3c
   50e9c:	mla	r3, r9, r5, r8
   50ea0:	sub	r5, r7, r5
   50ea4:	ldrb	r6, [r3], r9
   50ea8:	subs	r5, r5, #1
   50eac:	str	r6, [r0]
   50eb0:	str	r1, [r0, #4]
   50eb4:	add	r0, r0, #8
   50eb8:	bne	50ea4 <GetDataSlab+0x25028>
   50ebc:	ldr	r0, [sp, #48]	; 0x30
   50ec0:	ldr	r3, [sp, #52]	; 0x34
   50ec4:	add	lr, lr, #1
   50ec8:	add	r8, r8, r0
   50ecc:	ldr	r0, [sp, #64]	; 0x40
   50ed0:	cmp	lr, r3
   50ed4:	add	sl, sl, r0
   50ed8:	mov	r0, #0
   50edc:	bne	50de0 <GetDataSlab+0x24f64>
   50ee0:	b	2e97c <GetDataSlab+0x2b00>
   50ee4:	ldr	r1, [sp, #52]	; 0x34
   50ee8:	mov	r0, #0
   50eec:	cmp	r1, #1
   50ef0:	ldrge	r1, [sp, #60]	; 0x3c
   50ef4:	cmpge	r1, #1
   50ef8:	blt	2e97c <GetDataSlab+0x2b00>
   50efc:	ldr	r0, [sp, #28]
   50f00:	ldr	r1, [sp, #24]
   50f04:	mov	sl, #0
   50f08:	lsl	r6, r9, #1
   50f0c:	lsl	r4, r9, #2
   50f10:	add	r3, sp, #144	; 0x90
   50f14:	mla	r0, r0, ip, r1
   50f18:	ldr	r1, [sp, #56]	; 0x38
   50f1c:	add	r8, r1, r0, lsl #1
   50f20:	ldr	r0, [sp, #60]	; 0x3c
   50f24:	sub	r1, r9, #1
   50f28:	clz	r1, r1
   50f2c:	lsr	r1, r1, #5
   50f30:	mov	r2, r0
   50f34:	cmp	r0, #1
   50f38:	mov	r0, #0
   50f3c:	movwhi	r0, #1
   50f40:	bic	r9, r2, #1
   50f44:	and	r0, r0, r1
   50f48:	str	r0, [sp, #64]	; 0x40
   50f4c:	ldr	r0, [sp, #48]	; 0x30
   50f50:	mul	r0, r0, ip
   50f54:	lsl	r0, r0, #1
   50f58:	str	r0, [sp, #56]	; 0x38
   50f5c:	lsl	r0, r2, #3
   50f60:	str	r0, [sp, #48]	; 0x30
   50f64:	ldr	r0, [sp, #64]	; 0x40
   50f68:	ldr	r7, [sp, #68]	; 0x44
   50f6c:	mov	r2, #0
   50f70:	cmp	r0, #0
   50f74:	mov	lr, r7
   50f78:	beq	50fc0 <GetDataSlab+0x25144>
   50f7c:	add	lr, r7, r9, lsl #3
   50f80:	mov	r5, r9
   50f84:	mov	r1, r8
   50f88:	mov	r2, r7
   50f8c:	ldr	ip, [r1], r4
   50f90:	subs	r5, r5, #2
   50f94:	str	ip, [sp, #144]	; 0x90
   50f98:	vld1.32	{d16[0]}, [r3 :32]
   50f9c:	vmovl.s16	q8, d16
   50fa0:	vmovl.s32	q8, d16
   50fa4:	vst1.64	{d16-d17}, [r2]!
   50fa8:	bne	50f8c <GetDataSlab+0x25110>
   50fac:	ldr	r0, [sp, #60]	; 0x3c
   50fb0:	ldr	r7, [sp, #68]	; 0x44
   50fb4:	mov	r2, r9
   50fb8:	cmp	r0, r9
   50fbc:	beq	50fe4 <GetDataSlab+0x25168>
   50fc0:	ldr	r0, [sp, #60]	; 0x3c
   50fc4:	mla	r1, r6, r2, r8
   50fc8:	sub	r2, r0, r2
   50fcc:	ldrsh	r0, [r1], r6
   50fd0:	subs	r2, r2, #1
   50fd4:	asr	r5, r0, #31
   50fd8:	stm	lr, {r0, r5}
   50fdc:	add	lr, lr, #8
   50fe0:	bne	50fcc <GetDataSlab+0x25150>
   50fe4:	ldr	r0, [sp, #56]	; 0x38
   50fe8:	ldr	r1, [sp, #52]	; 0x34
   50fec:	add	sl, sl, #1
   50ff0:	add	r8, r8, r0
   50ff4:	ldr	r0, [sp, #48]	; 0x30
   50ff8:	cmp	sl, r1
   50ffc:	add	r7, r7, r0
   51000:	mov	r0, #0
   51004:	str	r7, [sp, #68]	; 0x44
   51008:	bne	50f64 <GetDataSlab+0x250e8>
   5100c:	b	2e97c <GetDataSlab+0x2b00>
   51010:	ldr	r1, [sp, #52]	; 0x34
   51014:	mov	r0, #0
   51018:	cmp	r1, #1
   5101c:	ldrge	r1, [sp, #60]	; 0x3c
   51020:	cmpge	r1, #1
   51024:	blt	2e97c <GetDataSlab+0x2b00>
   51028:	ldr	r0, [sp, #28]
   5102c:	ldr	r1, [sp, #24]
   51030:	mov	r3, #0
   51034:	lsl	r6, r9, #1
   51038:	lsl	r4, r9, #2
   5103c:	add	r8, sp, #148	; 0x94
   51040:	mov	r7, #0
   51044:	mla	r0, r0, ip, r1
   51048:	ldr	r1, [sp, #56]	; 0x38
   5104c:	add	sl, r1, r0, lsl #1
   51050:	ldr	r0, [sp, #60]	; 0x3c
   51054:	sub	r1, r9, #1
   51058:	clz	r1, r1
   5105c:	lsr	r1, r1, #5
   51060:	mov	r2, r0
   51064:	cmp	r0, #1
   51068:	mov	r0, #0
   5106c:	movwhi	r0, #1
   51070:	bic	r9, r2, #1
   51074:	and	r0, r0, r1
   51078:	str	r0, [sp, #64]	; 0x40
   5107c:	ldr	r0, [sp, #48]	; 0x30
   51080:	mul	r0, r0, ip
   51084:	lsl	r0, r0, #1
   51088:	str	r0, [sp, #56]	; 0x38
   5108c:	lsl	r0, r2, #3
   51090:	str	r0, [sp, #48]	; 0x30
   51094:	ldr	r0, [sp, #64]	; 0x40
   51098:	ldr	ip, [sp, #68]	; 0x44
   5109c:	mov	r5, #0
   510a0:	cmp	r0, #0
   510a4:	mov	r0, ip
   510a8:	beq	510ec <GetDataSlab+0x25270>
   510ac:	add	r0, ip, r9, lsl #3
   510b0:	mov	r5, r9
   510b4:	mov	r1, sl
   510b8:	ldr	lr, [r1], r4
   510bc:	subs	r5, r5, #2
   510c0:	str	lr, [sp, #148]	; 0x94
   510c4:	vld1.32	{d16[0]}, [r8 :32]
   510c8:	vmovl.u16	q8, d16
   510cc:	vmovl.u32	q8, d16
   510d0:	vst1.64	{d16-d17}, [ip]!
   510d4:	bne	510b8 <GetDataSlab+0x2523c>
   510d8:	ldr	r1, [sp, #60]	; 0x3c
   510dc:	ldr	ip, [sp, #68]	; 0x44
   510e0:	mov	r5, r9
   510e4:	cmp	r1, r9
   510e8:	beq	5110c <GetDataSlab+0x25290>
   510ec:	ldr	r2, [sp, #60]	; 0x3c
   510f0:	mla	r1, r6, r5, sl
   510f4:	sub	r5, r2, r5
   510f8:	ldrh	r2, [r1], r6
   510fc:	subs	r5, r5, #1
   51100:	strd	r2, [r0]
   51104:	add	r0, r0, #8
   51108:	bne	510f8 <GetDataSlab+0x2527c>
   5110c:	ldr	r0, [sp, #56]	; 0x38
   51110:	ldr	r1, [sp, #52]	; 0x34
   51114:	add	r7, r7, #1
   51118:	add	sl, sl, r0
   5111c:	ldr	r0, [sp, #48]	; 0x30
   51120:	cmp	r7, r1
   51124:	add	ip, ip, r0
   51128:	mov	r0, #0
   5112c:	str	ip, [sp, #68]	; 0x44
   51130:	bne	51094 <GetDataSlab+0x25218>
   51134:	b	2e97c <GetDataSlab+0x2b00>
   51138:	ldr	r1, [sp, #52]	; 0x34
   5113c:	mov	r0, #0
   51140:	cmp	r1, #1
   51144:	ldrge	r1, [sp, #60]	; 0x3c
   51148:	cmpge	r1, #1
   5114c:	blt	2e97c <GetDataSlab+0x2b00>
   51150:	ldr	r0, [sp, #28]
   51154:	ldr	r1, [sp, #24]
   51158:	lsl	r6, r9, #2
   5115c:	lsl	r4, r9, #3
   51160:	add	r3, sp, #128	; 0x80
   51164:	mla	r0, r0, ip, r1
   51168:	ldr	r1, [sp, #56]	; 0x38
   5116c:	add	sl, r1, r0, lsl #2
   51170:	mov	r0, #0
   51174:	sub	r1, r9, #1
   51178:	str	r0, [sp, #64]	; 0x40
   5117c:	ldr	r0, [sp, #60]	; 0x3c
   51180:	clz	r1, r1
   51184:	lsr	r1, r1, #5
   51188:	mov	r2, r0
   5118c:	cmp	r0, #1
   51190:	mov	r0, #0
   51194:	movwhi	r0, #1
   51198:	bic	r9, r2, #1
   5119c:	and	r0, r0, r1
   511a0:	str	r0, [sp, #56]	; 0x38
   511a4:	ldr	r0, [sp, #48]	; 0x30
   511a8:	mul	r0, r0, ip
   511ac:	lsl	r0, r0, #2
   511b0:	str	r0, [sp, #48]	; 0x30
   511b4:	lsl	r0, r2, #3
   511b8:	str	r0, [sp, #44]	; 0x2c
   511bc:	ldr	r0, [sp, #56]	; 0x38
   511c0:	ldr	r7, [sp, #68]	; 0x44
   511c4:	mov	r2, #0
   511c8:	cmp	r0, #0
   511cc:	mov	r8, r7
   511d0:	beq	5121c <GetDataSlab+0x253a0>
   511d4:	add	r8, r7, r9, lsl #3
   511d8:	mov	r5, r9
   511dc:	mov	r1, sl
   511e0:	mov	r2, r7
   511e4:	ldm	r1, {ip, lr}
   511e8:	add	r1, r1, r4
   511ec:	subs	r5, r5, #2
   511f0:	str	lr, [sp, #132]	; 0x84
   511f4:	str	ip, [sp, #128]	; 0x80
   511f8:	vld1.32	{d16}, [r3 :64]
   511fc:	vmovl.s32	q8, d16
   51200:	vst1.64	{d16-d17}, [r2]!
   51204:	bne	511e4 <GetDataSlab+0x25368>
   51208:	ldr	r0, [sp, #60]	; 0x3c
   5120c:	ldr	r7, [sp, #68]	; 0x44
   51210:	mov	r2, r9
   51214:	cmp	r0, r9
   51218:	beq	51240 <GetDataSlab+0x253c4>
   5121c:	ldr	r0, [sp, #60]	; 0x3c
   51220:	mla	r1, r6, r2, sl
   51224:	sub	r2, r0, r2
   51228:	ldr	r0, [r1], r6
   5122c:	subs	r2, r2, #1
   51230:	asr	r5, r0, #31
   51234:	stm	r8, {r0, r5}
   51238:	add	r8, r8, #8
   5123c:	bne	51228 <GetDataSlab+0x253ac>
   51240:	ldr	r0, [sp, #48]	; 0x30
   51244:	ldr	r2, [sp, #64]	; 0x40
   51248:	ldr	r1, [sp, #52]	; 0x34
   5124c:	add	sl, sl, r0
   51250:	ldr	r0, [sp, #44]	; 0x2c
   51254:	add	r2, r2, #1
   51258:	cmp	r2, r1
   5125c:	str	r2, [sp, #64]	; 0x40
   51260:	add	r7, r7, r0
   51264:	mov	r0, #0
   51268:	str	r7, [sp, #68]	; 0x44
   5126c:	bne	511bc <GetDataSlab+0x25340>
   51270:	b	2e97c <GetDataSlab+0x2b00>
   51274:	ldr	r1, [sp, #52]	; 0x34
   51278:	mov	r0, #0
   5127c:	cmp	r1, #1
   51280:	ldrge	r1, [sp, #60]	; 0x3c
   51284:	cmpge	r1, #1
   51288:	blt	2e97c <GetDataSlab+0x2b00>
   5128c:	ldr	r0, [sp, #28]
   51290:	ldr	r1, [sp, #24]
   51294:	ldr	r7, [sp, #60]	; 0x3c
   51298:	mov	r3, #0
   5129c:	lsl	r6, r9, #2
   512a0:	lsl	r4, r9, #3
   512a4:	mla	r0, r0, ip, r1
   512a8:	ldr	r1, [sp, #56]	; 0x38
   512ac:	add	sl, r1, r0, lsl #2
   512b0:	ldr	r0, [sp, #60]	; 0x3c
   512b4:	sub	r1, r9, #1
   512b8:	mov	r9, #0
   512bc:	clz	r1, r1
   512c0:	lsr	r1, r1, #5
   512c4:	mov	r2, r0
   512c8:	cmp	r0, #1
   512cc:	mov	r0, #0
   512d0:	movwhi	r0, #1
   512d4:	and	r0, r0, r1
   512d8:	str	r0, [sp, #64]	; 0x40
   512dc:	ldr	r0, [sp, #48]	; 0x30
   512e0:	mul	r0, r0, ip
   512e4:	lsl	r0, r0, #2
   512e8:	str	r0, [sp, #56]	; 0x38
   512ec:	lsl	r0, r2, #3
   512f0:	str	r0, [sp, #48]	; 0x30
   512f4:	bic	r0, r2, #1
   512f8:	add	r2, sp, #136	; 0x88
   512fc:	str	r0, [sp, #44]	; 0x2c
   51300:	ldr	r0, [sp, #64]	; 0x40
   51304:	ldr	ip, [sp, #68]	; 0x44
   51308:	mov	r5, #0
   5130c:	cmp	r0, #0
   51310:	mov	r0, ip
   51314:	beq	51360 <GetDataSlab+0x254e4>
   51318:	ldr	r5, [sp, #44]	; 0x2c
   5131c:	mov	r1, sl
   51320:	add	r0, ip, r5, lsl #3
   51324:	ldr	lr, [r1]
   51328:	ldr	r8, [r1, #4]
   5132c:	add	r1, r1, r4
   51330:	subs	r5, r5, #2
   51334:	str	r8, [sp, #140]	; 0x8c
   51338:	str	lr, [sp, #136]	; 0x88
   5133c:	vld1.32	{d16}, [r2 :64]
   51340:	vmovl.u32	q8, d16
   51344:	vst1.64	{d16-d17}, [ip]!
   51348:	bne	51324 <GetDataSlab+0x254a8>
   5134c:	ldr	r1, [sp, #60]	; 0x3c
   51350:	ldr	r5, [sp, #44]	; 0x2c
   51354:	ldr	ip, [sp, #68]	; 0x44
   51358:	cmp	r1, r5
   5135c:	beq	51380 <GetDataSlab+0x25504>
   51360:	mla	r1, r6, r5, sl
   51364:	sub	r5, r7, r5
   51368:	ldr	r8, [r1], r6
   5136c:	subs	r5, r5, #1
   51370:	str	r8, [r0]
   51374:	str	r3, [r0, #4]
   51378:	add	r0, r0, #8
   5137c:	bne	51368 <GetDataSlab+0x254ec>
   51380:	ldr	r0, [sp, #56]	; 0x38
   51384:	ldr	r1, [sp, #52]	; 0x34
   51388:	add	r9, r9, #1
   5138c:	add	sl, sl, r0
   51390:	ldr	r0, [sp, #48]	; 0x30
   51394:	cmp	r9, r1
   51398:	add	ip, ip, r0
   5139c:	mov	r0, #0
   513a0:	str	ip, [sp, #68]	; 0x44
   513a4:	bne	51300 <GetDataSlab+0x25484>
   513a8:	b	2e97c <GetDataSlab+0x2b00>
   513ac:	ldr	r1, [sp, #52]	; 0x34
   513b0:	mov	r0, #0
   513b4:	cmp	r1, #1
   513b8:	ldrge	r1, [sp, #60]	; 0x3c
   513bc:	cmpge	r1, #1
   513c0:	blt	2e97c <GetDataSlab+0x2b00>
   513c4:	ldr	r0, [sp, #28]
   513c8:	ldr	r1, [sp, #24]
   513cc:	lsl	r8, r9, #2
   513d0:	mov	r9, #0
   513d4:	mla	r0, r0, ip, r1
   513d8:	ldr	r1, [sp, #56]	; 0x38
   513dc:	add	r0, r1, r0, lsl #2
   513e0:	str	r0, [sp, #64]	; 0x40
   513e4:	ldr	r0, [sp, #48]	; 0x30
   513e8:	mul	r0, r0, ip
   513ec:	lsl	r0, r0, #2
   513f0:	str	r0, [sp, #56]	; 0x38
   513f4:	ldr	r0, [sp, #60]	; 0x3c
   513f8:	lsl	sl, r0, #3
   513fc:	ldr	r4, [sp, #64]	; 0x40
   51400:	ldr	r7, [sp, #60]	; 0x3c
   51404:	ldr	r6, [sp, #68]	; 0x44
   51408:	mov	r5, #0
   5140c:	ldr	r0, [r4], r8
   51410:	bl	5f3a0 <__aeabi_f2ulz>
   51414:	mov	r2, r6
   51418:	subs	r7, r7, #1
   5141c:	str	r0, [r2, -r5]!
   51420:	sub	r5, r5, #8
   51424:	str	r1, [r2, #4]
   51428:	bne	5140c <GetDataSlab+0x25590>
   5142c:	ldr	r0, [sp, #64]	; 0x40
   51430:	ldr	r1, [sp, #56]	; 0x38
   51434:	add	r9, r9, #1
   51438:	add	r6, r6, sl
   5143c:	str	r6, [sp, #68]	; 0x44
   51440:	add	r0, r0, r1
   51444:	ldr	r1, [sp, #52]	; 0x34
   51448:	str	r0, [sp, #64]	; 0x40
   5144c:	mov	r0, #0
   51450:	cmp	r9, r1
   51454:	bne	513fc <GetDataSlab+0x25580>
   51458:	b	2e97c <GetDataSlab+0x2b00>
   5145c:	ldr	r1, [sp, #52]	; 0x34
   51460:	mov	r0, #0
   51464:	cmp	r1, #1
   51468:	ldrge	r1, [sp, #60]	; 0x3c
   5146c:	cmpge	r1, #1
   51470:	blt	2e97c <GetDataSlab+0x2b00>
   51474:	ldr	r0, [sp, #28]
   51478:	ldr	r1, [sp, #24]
   5147c:	lsl	r8, r9, #3
   51480:	mov	r9, #0
   51484:	mla	r0, r0, ip, r1
   51488:	ldr	r1, [sp, #56]	; 0x38
   5148c:	add	r0, r1, r0, lsl #3
   51490:	str	r0, [sp, #64]	; 0x40
   51494:	ldr	r0, [sp, #48]	; 0x30
   51498:	mul	r0, r0, ip
   5149c:	lsl	r0, r0, #3
   514a0:	str	r0, [sp, #56]	; 0x38
   514a4:	ldr	r0, [sp, #60]	; 0x3c
   514a8:	lsl	sl, r0, #3
   514ac:	ldr	r7, [sp, #64]	; 0x40
   514b0:	ldr	r5, [sp, #60]	; 0x3c
   514b4:	ldr	r6, [sp, #68]	; 0x44
   514b8:	mov	r4, #0
   514bc:	vldr	d16, [r7]
   514c0:	vmov	r0, r1, d16
   514c4:	bl	5f3e0 <__aeabi_d2ulz>
   514c8:	mov	r2, r6
   514cc:	add	r7, r7, r8
   514d0:	subs	r5, r5, #1
   514d4:	str	r0, [r2, -r4]!
   514d8:	sub	r4, r4, #8
   514dc:	str	r1, [r2, #4]
   514e0:	bne	514bc <GetDataSlab+0x25640>
   514e4:	ldr	r0, [sp, #64]	; 0x40
   514e8:	ldr	r1, [sp, #56]	; 0x38
   514ec:	add	r9, r9, #1
   514f0:	add	r6, r6, sl
   514f4:	str	r6, [sp, #68]	; 0x44
   514f8:	add	r0, r0, r1
   514fc:	ldr	r1, [sp, #52]	; 0x34
   51500:	str	r0, [sp, #64]	; 0x40
   51504:	mov	r0, #0
   51508:	cmp	r9, r1
   5150c:	bne	514ac <GetDataSlab+0x25630>
   51510:	b	2e97c <GetDataSlab+0x2b00>
   51514:	ldr	r1, [sp, #52]	; 0x34
   51518:	mov	r0, #0
   5151c:	cmp	r1, #1
   51520:	ldrge	r1, [sp, #60]	; 0x3c
   51524:	cmpge	r1, #1
   51528:	blt	2e97c <GetDataSlab+0x2b00>
   5152c:	ldr	r0, [sp, #28]
   51530:	ldr	r1, [sp, #24]
   51534:	ldr	r7, [sp, #60]	; 0x3c
   51538:	ldr	sl, [sp, #68]	; 0x44
   5153c:	mov	r2, #0
   51540:	mov	r3, #0
   51544:	mla	r1, r0, ip, r1
   51548:	ldr	r0, [sp, #56]	; 0x38
   5154c:	cmp	r7, #1
   51550:	lsl	r6, r1, #3
   51554:	movwhi	r2, #1
   51558:	str	r6, [sp, #20]
   5155c:	add	r6, r6, r7, lsl #3
   51560:	str	r6, [sp, #36]	; 0x24
   51564:	add	r0, r0, r1, lsl #3
   51568:	ldr	r1, [sp, #52]	; 0x34
   5156c:	mul	r1, r1, r7
   51570:	add	r1, sl, r1, lsl #3
   51574:	str	r1, [sp, #16]
   51578:	sub	r1, r9, #1
   5157c:	clz	r1, r1
   51580:	lsr	r1, r1, #5
   51584:	and	r8, r2, r1
   51588:	ldr	r1, [sp, #48]	; 0x30
   5158c:	lsl	r2, r9, #4
   51590:	mul	r1, r1, ip
   51594:	lsl	ip, r7, #3
   51598:	bic	r7, r7, #1
   5159c:	lsl	r1, r1, #3
   515a0:	str	r7, [sp, #32]
   515a4:	str	r1, [sp, #64]	; 0x40
   515a8:	lsl	r1, r9, #3
   515ac:	cmp	r8, #0
   515b0:	mov	r5, #0
   515b4:	mov	lr, sl
   515b8:	beq	5164c <GetDataSlab+0x257d0>
   515bc:	ldr	r7, [sp, #64]	; 0x40
   515c0:	ldr	r6, [sp, #36]	; 0x24
   515c4:	mul	r4, ip, r3
   515c8:	mul	r5, r7, r3
   515cc:	ldr	r7, [sp, #68]	; 0x44
   515d0:	add	lr, r7, r4
   515d4:	add	r7, r6, r5
   515d8:	ldr	r6, [sp, #56]	; 0x38
   515dc:	add	r7, r6, r7
   515e0:	cmp	lr, r7
   515e4:	bcs	51614 <GetDataSlab+0x25798>
   515e8:	ldr	r6, [sp, #68]	; 0x44
   515ec:	add	r7, ip, r4
   515f0:	mov	lr, sl
   515f4:	add	r7, r6, r7
   515f8:	ldr	r6, [sp, #20]
   515fc:	add	r6, r6, r5
   51600:	ldr	r5, [sp, #56]	; 0x38
   51604:	add	r6, r5, r6
   51608:	mov	r5, #0
   5160c:	cmp	r6, r7
   51610:	bcc	5164c <GetDataSlab+0x257d0>
   51614:	ldr	r4, [sp, #32]
   51618:	mov	r6, r8
   5161c:	mov	r5, r0
   51620:	mov	r8, sl
   51624:	add	lr, sl, r4, lsl #3
   51628:	vld1.64	{d16-d17}, [r5], r2
   5162c:	subs	r4, r4, #2
   51630:	vst1.64	{d16-d17}, [r8]!
   51634:	bne	51628 <GetDataSlab+0x257ac>
   51638:	ldr	r4, [sp, #60]	; 0x3c
   5163c:	ldr	r5, [sp, #32]
   51640:	mov	r8, r6
   51644:	cmp	r4, r5
   51648:	beq	51670 <GetDataSlab+0x257f4>
   5164c:	ldr	r6, [sp, #60]	; 0x3c
   51650:	mla	r4, r1, r5, r0
   51654:	sub	r5, r6, r5
   51658:	ldrd	r6, [r4]
   5165c:	add	r4, r4, r1
   51660:	subs	r5, r5, #1
   51664:	strd	r6, [lr]
   51668:	add	lr, lr, #8
   5166c:	bne	51658 <GetDataSlab+0x257dc>
   51670:	ldr	r7, [sp, #64]	; 0x40
   51674:	add	r3, r3, #1
   51678:	add	sl, sl, ip
   5167c:	add	r0, r0, r7
   51680:	ldr	r7, [sp, #52]	; 0x34
   51684:	cmp	r3, r7
   51688:	bne	515ac <GetDataSlab+0x25730>
   5168c:	ldr	r3, [sp, #16]
   51690:	ldr	ip, [sp, #44]	; 0x2c
   51694:	mov	r0, #0
   51698:	ldr	r1, [sp, #40]	; 0x28
   5169c:	str	r3, [sp, #68]	; 0x44
   516a0:	cmp	r1, #13
   516a4:	bne	2e97c <GetDataSlab+0x2b00>
   516a8:	b	52e84 <GetDataSlab+0x27008>
   516ac:	mov	r0, #0
   516b0:	sub	sp, fp, #48	; 0x30
   516b4:	vpop	{d8-d9}
   516b8:	add	sp, sp, #4
   516bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   516c0:	mov	r0, #0
   516c4:	sub	sp, fp, #48	; 0x30
   516c8:	vpop	{d8-d9}
   516cc:	add	sp, sp, #4
   516d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   516d4:	mov	r0, #0
   516d8:	sub	sp, fp, #48	; 0x30
   516dc:	vpop	{d8-d9}
   516e0:	add	sp, sp, #4
   516e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   516e8:	mov	r0, #0
   516ec:	sub	sp, fp, #48	; 0x30
   516f0:	vpop	{d8-d9}
   516f4:	add	sp, sp, #4
   516f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   516fc:	mov	r0, #0
   51700:	sub	sp, fp, #48	; 0x30
   51704:	vpop	{d8-d9}
   51708:	add	sp, sp, #4
   5170c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51710:	mov	r0, #0
   51714:	sub	sp, fp, #48	; 0x30
   51718:	vpop	{d8-d9}
   5171c:	add	sp, sp, #4
   51720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51724:	mov	r0, #0
   51728:	sub	sp, fp, #48	; 0x30
   5172c:	vpop	{d8-d9}
   51730:	add	sp, sp, #4
   51734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51738:	mov	r0, #0
   5173c:	sub	sp, fp, #48	; 0x30
   51740:	vpop	{d8-d9}
   51744:	add	sp, sp, #4
   51748:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5174c:	mov	r0, #0
   51750:	sub	sp, fp, #48	; 0x30
   51754:	vpop	{d8-d9}
   51758:	add	sp, sp, #4
   5175c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51760:	mov	r0, #0
   51764:	sub	sp, fp, #48	; 0x30
   51768:	vpop	{d8-d9}
   5176c:	add	sp, sp, #4
   51770:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51774:	mov	r0, #0
   51778:	sub	sp, fp, #48	; 0x30
   5177c:	vpop	{d8-d9}
   51780:	add	sp, sp, #4
   51784:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51788:	mov	r0, #0
   5178c:	sub	sp, fp, #48	; 0x30
   51790:	vpop	{d8-d9}
   51794:	add	sp, sp, #4
   51798:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5179c:	mov	r0, #0
   517a0:	sub	sp, fp, #48	; 0x30
   517a4:	vpop	{d8-d9}
   517a8:	add	sp, sp, #4
   517ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   517b0:	mov	r0, #0
   517b4:	sub	sp, fp, #48	; 0x30
   517b8:	vpop	{d8-d9}
   517bc:	add	sp, sp, #4
   517c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   517c4:	mov	r0, #0
   517c8:	sub	sp, fp, #48	; 0x30
   517cc:	vpop	{d8-d9}
   517d0:	add	sp, sp, #4
   517d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   517d8:	mov	r0, #0
   517dc:	sub	sp, fp, #48	; 0x30
   517e0:	vpop	{d8-d9}
   517e4:	add	sp, sp, #4
   517e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   517ec:	mov	r0, #0
   517f0:	sub	sp, fp, #48	; 0x30
   517f4:	vpop	{d8-d9}
   517f8:	add	sp, sp, #4
   517fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51800:	mov	r0, #0
   51804:	sub	sp, fp, #48	; 0x30
   51808:	vpop	{d8-d9}
   5180c:	add	sp, sp, #4
   51810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51814:	mov	r0, #0
   51818:	sub	sp, fp, #48	; 0x30
   5181c:	vpop	{d8-d9}
   51820:	add	sp, sp, #4
   51824:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51828:	mov	r0, #0
   5182c:	sub	sp, fp, #48	; 0x30
   51830:	vpop	{d8-d9}
   51834:	add	sp, sp, #4
   51838:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5183c:	mov	r0, #0
   51840:	sub	sp, fp, #48	; 0x30
   51844:	vpop	{d8-d9}
   51848:	add	sp, sp, #4
   5184c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51850:	mov	r0, #0
   51854:	sub	sp, fp, #48	; 0x30
   51858:	vpop	{d8-d9}
   5185c:	add	sp, sp, #4
   51860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51864:	mov	r0, #0
   51868:	sub	sp, fp, #48	; 0x30
   5186c:	vpop	{d8-d9}
   51870:	add	sp, sp, #4
   51874:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51878:	mov	r0, #0
   5187c:	sub	sp, fp, #48	; 0x30
   51880:	vpop	{d8-d9}
   51884:	add	sp, sp, #4
   51888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5188c:	mov	r0, #0
   51890:	sub	sp, fp, #48	; 0x30
   51894:	vpop	{d8-d9}
   51898:	add	sp, sp, #4
   5189c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   518a0:	mov	r0, #0
   518a4:	sub	sp, fp, #48	; 0x30
   518a8:	vpop	{d8-d9}
   518ac:	add	sp, sp, #4
   518b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   518b4:	mov	r0, #0
   518b8:	sub	sp, fp, #48	; 0x30
   518bc:	vpop	{d8-d9}
   518c0:	add	sp, sp, #4
   518c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   518c8:	mov	r0, #0
   518cc:	sub	sp, fp, #48	; 0x30
   518d0:	vpop	{d8-d9}
   518d4:	add	sp, sp, #4
   518d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   518dc:	mov	r0, #0
   518e0:	sub	sp, fp, #48	; 0x30
   518e4:	vpop	{d8-d9}
   518e8:	add	sp, sp, #4
   518ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   518f0:	mov	r0, #0
   518f4:	sub	sp, fp, #48	; 0x30
   518f8:	vpop	{d8-d9}
   518fc:	add	sp, sp, #4
   51900:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51904:	mov	r0, #0
   51908:	sub	sp, fp, #48	; 0x30
   5190c:	vpop	{d8-d9}
   51910:	add	sp, sp, #4
   51914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51918:	mov	r0, #0
   5191c:	sub	sp, fp, #48	; 0x30
   51920:	vpop	{d8-d9}
   51924:	add	sp, sp, #4
   51928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5192c:	mov	r0, #0
   51930:	sub	sp, fp, #48	; 0x30
   51934:	vpop	{d8-d9}
   51938:	add	sp, sp, #4
   5193c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51940:	mov	r0, #0
   51944:	sub	sp, fp, #48	; 0x30
   51948:	vpop	{d8-d9}
   5194c:	add	sp, sp, #4
   51950:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51954:	mov	r0, #0
   51958:	sub	sp, fp, #48	; 0x30
   5195c:	vpop	{d8-d9}
   51960:	add	sp, sp, #4
   51964:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51968:	mov	r0, #0
   5196c:	sub	sp, fp, #48	; 0x30
   51970:	vpop	{d8-d9}
   51974:	add	sp, sp, #4
   51978:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5197c:	mov	r0, #0
   51980:	sub	sp, fp, #48	; 0x30
   51984:	vpop	{d8-d9}
   51988:	add	sp, sp, #4
   5198c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51990:	mov	r0, #0
   51994:	sub	sp, fp, #48	; 0x30
   51998:	vpop	{d8-d9}
   5199c:	add	sp, sp, #4
   519a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   519a4:	mov	r0, #0
   519a8:	sub	sp, fp, #48	; 0x30
   519ac:	vpop	{d8-d9}
   519b0:	add	sp, sp, #4
   519b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   519b8:	mov	r0, #0
   519bc:	sub	sp, fp, #48	; 0x30
   519c0:	vpop	{d8-d9}
   519c4:	add	sp, sp, #4
   519c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   519cc:	mov	r0, #0
   519d0:	sub	sp, fp, #48	; 0x30
   519d4:	vpop	{d8-d9}
   519d8:	add	sp, sp, #4
   519dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   519e0:	mov	r0, #0
   519e4:	sub	sp, fp, #48	; 0x30
   519e8:	vpop	{d8-d9}
   519ec:	add	sp, sp, #4
   519f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   519f4:	mov	r0, #0
   519f8:	sub	sp, fp, #48	; 0x30
   519fc:	vpop	{d8-d9}
   51a00:	add	sp, sp, #4
   51a04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51a08:	mov	r0, #0
   51a0c:	sub	sp, fp, #48	; 0x30
   51a10:	vpop	{d8-d9}
   51a14:	add	sp, sp, #4
   51a18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51a1c:	mov	r0, #0
   51a20:	sub	sp, fp, #48	; 0x30
   51a24:	vpop	{d8-d9}
   51a28:	add	sp, sp, #4
   51a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51a30:	mov	r0, #0
   51a34:	sub	sp, fp, #48	; 0x30
   51a38:	vpop	{d8-d9}
   51a3c:	add	sp, sp, #4
   51a40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51a44:	mov	r0, #0
   51a48:	sub	sp, fp, #48	; 0x30
   51a4c:	vpop	{d8-d9}
   51a50:	add	sp, sp, #4
   51a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51a58:	mov	r0, #0
   51a5c:	sub	sp, fp, #48	; 0x30
   51a60:	vpop	{d8-d9}
   51a64:	add	sp, sp, #4
   51a68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51a6c:	mov	r0, #0
   51a70:	sub	sp, fp, #48	; 0x30
   51a74:	vpop	{d8-d9}
   51a78:	add	sp, sp, #4
   51a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51a80:	mov	r0, #0
   51a84:	sub	sp, fp, #48	; 0x30
   51a88:	vpop	{d8-d9}
   51a8c:	add	sp, sp, #4
   51a90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51a94:	mov	r0, #0
   51a98:	sub	sp, fp, #48	; 0x30
   51a9c:	vpop	{d8-d9}
   51aa0:	add	sp, sp, #4
   51aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51aa8:	mov	r0, #0
   51aac:	sub	sp, fp, #48	; 0x30
   51ab0:	vpop	{d8-d9}
   51ab4:	add	sp, sp, #4
   51ab8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51abc:	mov	r0, #0
   51ac0:	sub	sp, fp, #48	; 0x30
   51ac4:	vpop	{d8-d9}
   51ac8:	add	sp, sp, #4
   51acc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51ad0:	mov	r0, #0
   51ad4:	sub	sp, fp, #48	; 0x30
   51ad8:	vpop	{d8-d9}
   51adc:	add	sp, sp, #4
   51ae0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51ae4:	mov	r0, #0
   51ae8:	sub	sp, fp, #48	; 0x30
   51aec:	vpop	{d8-d9}
   51af0:	add	sp, sp, #4
   51af4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51af8:	mov	r0, #0
   51afc:	sub	sp, fp, #48	; 0x30
   51b00:	vpop	{d8-d9}
   51b04:	add	sp, sp, #4
   51b08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51b0c:	mov	r0, #0
   51b10:	sub	sp, fp, #48	; 0x30
   51b14:	vpop	{d8-d9}
   51b18:	add	sp, sp, #4
   51b1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51b20:	mov	r0, #0
   51b24:	sub	sp, fp, #48	; 0x30
   51b28:	vpop	{d8-d9}
   51b2c:	add	sp, sp, #4
   51b30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51b34:	mov	r0, #0
   51b38:	sub	sp, fp, #48	; 0x30
   51b3c:	vpop	{d8-d9}
   51b40:	add	sp, sp, #4
   51b44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51b48:	mov	r0, #0
   51b4c:	sub	sp, fp, #48	; 0x30
   51b50:	vpop	{d8-d9}
   51b54:	add	sp, sp, #4
   51b58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51b5c:	mov	r0, #0
   51b60:	sub	sp, fp, #48	; 0x30
   51b64:	vpop	{d8-d9}
   51b68:	add	sp, sp, #4
   51b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51b70:	mov	r0, #0
   51b74:	sub	sp, fp, #48	; 0x30
   51b78:	vpop	{d8-d9}
   51b7c:	add	sp, sp, #4
   51b80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51b84:	mov	r0, #0
   51b88:	sub	sp, fp, #48	; 0x30
   51b8c:	vpop	{d8-d9}
   51b90:	add	sp, sp, #4
   51b94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51b98:	mov	r0, #0
   51b9c:	sub	sp, fp, #48	; 0x30
   51ba0:	vpop	{d8-d9}
   51ba4:	add	sp, sp, #4
   51ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51bac:	mov	r0, #0
   51bb0:	sub	sp, fp, #48	; 0x30
   51bb4:	vpop	{d8-d9}
   51bb8:	add	sp, sp, #4
   51bbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51bc0:	mov	r0, #0
   51bc4:	sub	sp, fp, #48	; 0x30
   51bc8:	vpop	{d8-d9}
   51bcc:	add	sp, sp, #4
   51bd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51bd4:	mov	r0, #0
   51bd8:	sub	sp, fp, #48	; 0x30
   51bdc:	vpop	{d8-d9}
   51be0:	add	sp, sp, #4
   51be4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51be8:	mov	r0, #0
   51bec:	sub	sp, fp, #48	; 0x30
   51bf0:	vpop	{d8-d9}
   51bf4:	add	sp, sp, #4
   51bf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51bfc:	mov	r0, #0
   51c00:	sub	sp, fp, #48	; 0x30
   51c04:	vpop	{d8-d9}
   51c08:	add	sp, sp, #4
   51c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51c10:	mov	r0, #0
   51c14:	sub	sp, fp, #48	; 0x30
   51c18:	vpop	{d8-d9}
   51c1c:	add	sp, sp, #4
   51c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51c24:	mov	r0, #0
   51c28:	sub	sp, fp, #48	; 0x30
   51c2c:	vpop	{d8-d9}
   51c30:	add	sp, sp, #4
   51c34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51c38:	mov	r0, #0
   51c3c:	sub	sp, fp, #48	; 0x30
   51c40:	vpop	{d8-d9}
   51c44:	add	sp, sp, #4
   51c48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51c4c:	mov	r0, #0
   51c50:	sub	sp, fp, #48	; 0x30
   51c54:	vpop	{d8-d9}
   51c58:	add	sp, sp, #4
   51c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51c60:	mov	r0, #0
   51c64:	sub	sp, fp, #48	; 0x30
   51c68:	vpop	{d8-d9}
   51c6c:	add	sp, sp, #4
   51c70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51c74:	mov	r0, #0
   51c78:	sub	sp, fp, #48	; 0x30
   51c7c:	vpop	{d8-d9}
   51c80:	add	sp, sp, #4
   51c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51c88:	mov	r0, #0
   51c8c:	sub	sp, fp, #48	; 0x30
   51c90:	vpop	{d8-d9}
   51c94:	add	sp, sp, #4
   51c98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51c9c:	mov	r0, #0
   51ca0:	sub	sp, fp, #48	; 0x30
   51ca4:	vpop	{d8-d9}
   51ca8:	add	sp, sp, #4
   51cac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51cb0:	mov	r0, #0
   51cb4:	sub	sp, fp, #48	; 0x30
   51cb8:	vpop	{d8-d9}
   51cbc:	add	sp, sp, #4
   51cc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51cc4:	mov	r0, #0
   51cc8:	sub	sp, fp, #48	; 0x30
   51ccc:	vpop	{d8-d9}
   51cd0:	add	sp, sp, #4
   51cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51cd8:	mov	r0, #0
   51cdc:	sub	sp, fp, #48	; 0x30
   51ce0:	vpop	{d8-d9}
   51ce4:	add	sp, sp, #4
   51ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51cec:	mov	r0, #0
   51cf0:	sub	sp, fp, #48	; 0x30
   51cf4:	vpop	{d8-d9}
   51cf8:	add	sp, sp, #4
   51cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51d00:	mov	r0, #0
   51d04:	sub	sp, fp, #48	; 0x30
   51d08:	vpop	{d8-d9}
   51d0c:	add	sp, sp, #4
   51d10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51d14:	mov	r0, #0
   51d18:	sub	sp, fp, #48	; 0x30
   51d1c:	vpop	{d8-d9}
   51d20:	add	sp, sp, #4
   51d24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51d28:	mov	r0, #0
   51d2c:	sub	sp, fp, #48	; 0x30
   51d30:	vpop	{d8-d9}
   51d34:	add	sp, sp, #4
   51d38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51d3c:	mov	r0, #0
   51d40:	sub	sp, fp, #48	; 0x30
   51d44:	vpop	{d8-d9}
   51d48:	add	sp, sp, #4
   51d4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51d50:	mov	r0, #0
   51d54:	sub	sp, fp, #48	; 0x30
   51d58:	vpop	{d8-d9}
   51d5c:	add	sp, sp, #4
   51d60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51d64:	mov	r0, #0
   51d68:	sub	sp, fp, #48	; 0x30
   51d6c:	vpop	{d8-d9}
   51d70:	add	sp, sp, #4
   51d74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51d78:	mov	r0, #0
   51d7c:	sub	sp, fp, #48	; 0x30
   51d80:	vpop	{d8-d9}
   51d84:	add	sp, sp, #4
   51d88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51d8c:	mov	r0, #0
   51d90:	sub	sp, fp, #48	; 0x30
   51d94:	vpop	{d8-d9}
   51d98:	add	sp, sp, #4
   51d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51da0:	mov	r0, #0
   51da4:	sub	sp, fp, #48	; 0x30
   51da8:	vpop	{d8-d9}
   51dac:	add	sp, sp, #4
   51db0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51db4:	mov	r0, #0
   51db8:	sub	sp, fp, #48	; 0x30
   51dbc:	vpop	{d8-d9}
   51dc0:	add	sp, sp, #4
   51dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51dc8:	mov	r0, #0
   51dcc:	sub	sp, fp, #48	; 0x30
   51dd0:	vpop	{d8-d9}
   51dd4:	add	sp, sp, #4
   51dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51ddc:	mov	r0, #0
   51de0:	sub	sp, fp, #48	; 0x30
   51de4:	vpop	{d8-d9}
   51de8:	add	sp, sp, #4
   51dec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51df0:	mov	r0, #0
   51df4:	sub	sp, fp, #48	; 0x30
   51df8:	vpop	{d8-d9}
   51dfc:	add	sp, sp, #4
   51e00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51e04:	mov	r0, #0
   51e08:	sub	sp, fp, #48	; 0x30
   51e0c:	vpop	{d8-d9}
   51e10:	add	sp, sp, #4
   51e14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51e18:	mov	r0, #0
   51e1c:	sub	sp, fp, #48	; 0x30
   51e20:	vpop	{d8-d9}
   51e24:	add	sp, sp, #4
   51e28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51e2c:	mov	r0, #0
   51e30:	sub	sp, fp, #48	; 0x30
   51e34:	vpop	{d8-d9}
   51e38:	add	sp, sp, #4
   51e3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51e40:	mov	r0, #0
   51e44:	sub	sp, fp, #48	; 0x30
   51e48:	vpop	{d8-d9}
   51e4c:	add	sp, sp, #4
   51e50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51e54:	mov	r0, #0
   51e58:	sub	sp, fp, #48	; 0x30
   51e5c:	vpop	{d8-d9}
   51e60:	add	sp, sp, #4
   51e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51e68:	mov	r0, #0
   51e6c:	sub	sp, fp, #48	; 0x30
   51e70:	vpop	{d8-d9}
   51e74:	add	sp, sp, #4
   51e78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51e7c:	mov	r0, #0
   51e80:	sub	sp, fp, #48	; 0x30
   51e84:	vpop	{d8-d9}
   51e88:	add	sp, sp, #4
   51e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51e90:	mov	r0, #0
   51e94:	sub	sp, fp, #48	; 0x30
   51e98:	vpop	{d8-d9}
   51e9c:	add	sp, sp, #4
   51ea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51ea4:	mov	r0, #0
   51ea8:	sub	sp, fp, #48	; 0x30
   51eac:	vpop	{d8-d9}
   51eb0:	add	sp, sp, #4
   51eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51eb8:	mov	r0, #0
   51ebc:	sub	sp, fp, #48	; 0x30
   51ec0:	vpop	{d8-d9}
   51ec4:	add	sp, sp, #4
   51ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51ecc:	mov	r0, #0
   51ed0:	sub	sp, fp, #48	; 0x30
   51ed4:	vpop	{d8-d9}
   51ed8:	add	sp, sp, #4
   51edc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51ee0:	mov	r0, #0
   51ee4:	sub	sp, fp, #48	; 0x30
   51ee8:	vpop	{d8-d9}
   51eec:	add	sp, sp, #4
   51ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51ef4:	mov	r0, #0
   51ef8:	sub	sp, fp, #48	; 0x30
   51efc:	vpop	{d8-d9}
   51f00:	add	sp, sp, #4
   51f04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51f08:	mov	r0, #0
   51f0c:	sub	sp, fp, #48	; 0x30
   51f10:	vpop	{d8-d9}
   51f14:	add	sp, sp, #4
   51f18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51f1c:	mov	r0, #0
   51f20:	sub	sp, fp, #48	; 0x30
   51f24:	vpop	{d8-d9}
   51f28:	add	sp, sp, #4
   51f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51f30:	mov	r0, #0
   51f34:	sub	sp, fp, #48	; 0x30
   51f38:	vpop	{d8-d9}
   51f3c:	add	sp, sp, #4
   51f40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51f44:	mov	r0, #0
   51f48:	sub	sp, fp, #48	; 0x30
   51f4c:	vpop	{d8-d9}
   51f50:	add	sp, sp, #4
   51f54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51f58:	mov	r0, #0
   51f5c:	sub	sp, fp, #48	; 0x30
   51f60:	vpop	{d8-d9}
   51f64:	add	sp, sp, #4
   51f68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51f6c:	mov	r0, #0
   51f70:	sub	sp, fp, #48	; 0x30
   51f74:	vpop	{d8-d9}
   51f78:	add	sp, sp, #4
   51f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51f80:	mov	r0, #0
   51f84:	sub	sp, fp, #48	; 0x30
   51f88:	vpop	{d8-d9}
   51f8c:	add	sp, sp, #4
   51f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51f94:	mov	r0, #0
   51f98:	sub	sp, fp, #48	; 0x30
   51f9c:	vpop	{d8-d9}
   51fa0:	add	sp, sp, #4
   51fa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51fa8:	mov	r0, #0
   51fac:	sub	sp, fp, #48	; 0x30
   51fb0:	vpop	{d8-d9}
   51fb4:	add	sp, sp, #4
   51fb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51fbc:	mov	r0, #0
   51fc0:	sub	sp, fp, #48	; 0x30
   51fc4:	vpop	{d8-d9}
   51fc8:	add	sp, sp, #4
   51fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51fd0:	mov	r0, #0
   51fd4:	sub	sp, fp, #48	; 0x30
   51fd8:	vpop	{d8-d9}
   51fdc:	add	sp, sp, #4
   51fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51fe4:	mov	r0, #0
   51fe8:	sub	sp, fp, #48	; 0x30
   51fec:	vpop	{d8-d9}
   51ff0:	add	sp, sp, #4
   51ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   51ff8:	mov	r0, #0
   51ffc:	sub	sp, fp, #48	; 0x30
   52000:	vpop	{d8-d9}
   52004:	add	sp, sp, #4
   52008:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5200c:	mov	r0, #0
   52010:	sub	sp, fp, #48	; 0x30
   52014:	vpop	{d8-d9}
   52018:	add	sp, sp, #4
   5201c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52020:	mov	r0, #0
   52024:	sub	sp, fp, #48	; 0x30
   52028:	vpop	{d8-d9}
   5202c:	add	sp, sp, #4
   52030:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52034:	mov	r0, #0
   52038:	sub	sp, fp, #48	; 0x30
   5203c:	vpop	{d8-d9}
   52040:	add	sp, sp, #4
   52044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52048:	mov	r0, #0
   5204c:	sub	sp, fp, #48	; 0x30
   52050:	vpop	{d8-d9}
   52054:	add	sp, sp, #4
   52058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5205c:	mov	r0, #0
   52060:	sub	sp, fp, #48	; 0x30
   52064:	vpop	{d8-d9}
   52068:	add	sp, sp, #4
   5206c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52070:	mov	r0, #0
   52074:	sub	sp, fp, #48	; 0x30
   52078:	vpop	{d8-d9}
   5207c:	add	sp, sp, #4
   52080:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52084:	mov	r0, #0
   52088:	sub	sp, fp, #48	; 0x30
   5208c:	vpop	{d8-d9}
   52090:	add	sp, sp, #4
   52094:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52098:	mov	r0, #0
   5209c:	sub	sp, fp, #48	; 0x30
   520a0:	vpop	{d8-d9}
   520a4:	add	sp, sp, #4
   520a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   520ac:	mov	r0, #0
   520b0:	sub	sp, fp, #48	; 0x30
   520b4:	vpop	{d8-d9}
   520b8:	add	sp, sp, #4
   520bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   520c0:	mov	r0, #0
   520c4:	sub	sp, fp, #48	; 0x30
   520c8:	vpop	{d8-d9}
   520cc:	add	sp, sp, #4
   520d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   520d4:	mov	r0, #0
   520d8:	sub	sp, fp, #48	; 0x30
   520dc:	vpop	{d8-d9}
   520e0:	add	sp, sp, #4
   520e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   520e8:	mov	r0, #0
   520ec:	sub	sp, fp, #48	; 0x30
   520f0:	vpop	{d8-d9}
   520f4:	add	sp, sp, #4
   520f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   520fc:	mov	r0, #0
   52100:	sub	sp, fp, #48	; 0x30
   52104:	vpop	{d8-d9}
   52108:	add	sp, sp, #4
   5210c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52110:	mov	r0, #0
   52114:	sub	sp, fp, #48	; 0x30
   52118:	vpop	{d8-d9}
   5211c:	add	sp, sp, #4
   52120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52124:	mov	r0, #0
   52128:	sub	sp, fp, #48	; 0x30
   5212c:	vpop	{d8-d9}
   52130:	add	sp, sp, #4
   52134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52138:	mov	r0, #0
   5213c:	sub	sp, fp, #48	; 0x30
   52140:	vpop	{d8-d9}
   52144:	add	sp, sp, #4
   52148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5214c:	mov	r0, #0
   52150:	sub	sp, fp, #48	; 0x30
   52154:	vpop	{d8-d9}
   52158:	add	sp, sp, #4
   5215c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52160:	mov	r0, #0
   52164:	sub	sp, fp, #48	; 0x30
   52168:	vpop	{d8-d9}
   5216c:	add	sp, sp, #4
   52170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52174:	mov	r0, #0
   52178:	sub	sp, fp, #48	; 0x30
   5217c:	vpop	{d8-d9}
   52180:	add	sp, sp, #4
   52184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52188:	mov	r0, #0
   5218c:	sub	sp, fp, #48	; 0x30
   52190:	vpop	{d8-d9}
   52194:	add	sp, sp, #4
   52198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5219c:	mov	r0, #0
   521a0:	sub	sp, fp, #48	; 0x30
   521a4:	vpop	{d8-d9}
   521a8:	add	sp, sp, #4
   521ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   521b0:	mov	r0, #0
   521b4:	sub	sp, fp, #48	; 0x30
   521b8:	vpop	{d8-d9}
   521bc:	add	sp, sp, #4
   521c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   521c4:	mov	r0, #0
   521c8:	sub	sp, fp, #48	; 0x30
   521cc:	vpop	{d8-d9}
   521d0:	add	sp, sp, #4
   521d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   521d8:	mov	r0, #0
   521dc:	sub	sp, fp, #48	; 0x30
   521e0:	vpop	{d8-d9}
   521e4:	add	sp, sp, #4
   521e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   521ec:	mov	r0, #0
   521f0:	sub	sp, fp, #48	; 0x30
   521f4:	vpop	{d8-d9}
   521f8:	add	sp, sp, #4
   521fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52200:	mov	r0, #0
   52204:	sub	sp, fp, #48	; 0x30
   52208:	vpop	{d8-d9}
   5220c:	add	sp, sp, #4
   52210:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52214:	mov	r0, #0
   52218:	sub	sp, fp, #48	; 0x30
   5221c:	vpop	{d8-d9}
   52220:	add	sp, sp, #4
   52224:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52228:	mov	r0, #0
   5222c:	sub	sp, fp, #48	; 0x30
   52230:	vpop	{d8-d9}
   52234:	add	sp, sp, #4
   52238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5223c:	mov	r0, #0
   52240:	sub	sp, fp, #48	; 0x30
   52244:	vpop	{d8-d9}
   52248:	add	sp, sp, #4
   5224c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52250:	mov	r0, #0
   52254:	sub	sp, fp, #48	; 0x30
   52258:	vpop	{d8-d9}
   5225c:	add	sp, sp, #4
   52260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52264:	mov	r0, #0
   52268:	sub	sp, fp, #48	; 0x30
   5226c:	vpop	{d8-d9}
   52270:	add	sp, sp, #4
   52274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52278:	mov	r0, #0
   5227c:	sub	sp, fp, #48	; 0x30
   52280:	vpop	{d8-d9}
   52284:	add	sp, sp, #4
   52288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5228c:	mov	r0, #0
   52290:	sub	sp, fp, #48	; 0x30
   52294:	vpop	{d8-d9}
   52298:	add	sp, sp, #4
   5229c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   522a0:	mov	r0, #0
   522a4:	sub	sp, fp, #48	; 0x30
   522a8:	vpop	{d8-d9}
   522ac:	add	sp, sp, #4
   522b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   522b4:	mov	r0, #0
   522b8:	sub	sp, fp, #48	; 0x30
   522bc:	vpop	{d8-d9}
   522c0:	add	sp, sp, #4
   522c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   522c8:	mov	r0, #0
   522cc:	sub	sp, fp, #48	; 0x30
   522d0:	vpop	{d8-d9}
   522d4:	add	sp, sp, #4
   522d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   522dc:	mov	r0, #0
   522e0:	sub	sp, fp, #48	; 0x30
   522e4:	vpop	{d8-d9}
   522e8:	add	sp, sp, #4
   522ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   522f0:	mov	r0, #0
   522f4:	sub	sp, fp, #48	; 0x30
   522f8:	vpop	{d8-d9}
   522fc:	add	sp, sp, #4
   52300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52304:	mov	r0, #0
   52308:	sub	sp, fp, #48	; 0x30
   5230c:	vpop	{d8-d9}
   52310:	add	sp, sp, #4
   52314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52318:	mov	r0, #0
   5231c:	sub	sp, fp, #48	; 0x30
   52320:	vpop	{d8-d9}
   52324:	add	sp, sp, #4
   52328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5232c:	mov	r0, #0
   52330:	sub	sp, fp, #48	; 0x30
   52334:	vpop	{d8-d9}
   52338:	add	sp, sp, #4
   5233c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52340:	mov	r0, #0
   52344:	sub	sp, fp, #48	; 0x30
   52348:	vpop	{d8-d9}
   5234c:	add	sp, sp, #4
   52350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52354:	mov	r0, #0
   52358:	sub	sp, fp, #48	; 0x30
   5235c:	vpop	{d8-d9}
   52360:	add	sp, sp, #4
   52364:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52368:	mov	r0, #0
   5236c:	sub	sp, fp, #48	; 0x30
   52370:	vpop	{d8-d9}
   52374:	add	sp, sp, #4
   52378:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5237c:	mov	r0, #0
   52380:	sub	sp, fp, #48	; 0x30
   52384:	vpop	{d8-d9}
   52388:	add	sp, sp, #4
   5238c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52390:	mov	r0, #0
   52394:	sub	sp, fp, #48	; 0x30
   52398:	vpop	{d8-d9}
   5239c:	add	sp, sp, #4
   523a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   523a4:	mov	r0, #0
   523a8:	sub	sp, fp, #48	; 0x30
   523ac:	vpop	{d8-d9}
   523b0:	add	sp, sp, #4
   523b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   523b8:	mov	r0, #0
   523bc:	sub	sp, fp, #48	; 0x30
   523c0:	vpop	{d8-d9}
   523c4:	add	sp, sp, #4
   523c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   523cc:	mov	r0, #0
   523d0:	sub	sp, fp, #48	; 0x30
   523d4:	vpop	{d8-d9}
   523d8:	add	sp, sp, #4
   523dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   523e0:	mov	r0, #0
   523e4:	sub	sp, fp, #48	; 0x30
   523e8:	vpop	{d8-d9}
   523ec:	add	sp, sp, #4
   523f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   523f4:	mov	r0, #0
   523f8:	sub	sp, fp, #48	; 0x30
   523fc:	vpop	{d8-d9}
   52400:	add	sp, sp, #4
   52404:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52408:	mov	r0, #0
   5240c:	sub	sp, fp, #48	; 0x30
   52410:	vpop	{d8-d9}
   52414:	add	sp, sp, #4
   52418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5241c:	mov	r0, #0
   52420:	sub	sp, fp, #48	; 0x30
   52424:	vpop	{d8-d9}
   52428:	add	sp, sp, #4
   5242c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52430:	mov	r0, #0
   52434:	sub	sp, fp, #48	; 0x30
   52438:	vpop	{d8-d9}
   5243c:	add	sp, sp, #4
   52440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52444:	mov	r0, #0
   52448:	sub	sp, fp, #48	; 0x30
   5244c:	vpop	{d8-d9}
   52450:	add	sp, sp, #4
   52454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52458:	mov	r0, #0
   5245c:	sub	sp, fp, #48	; 0x30
   52460:	vpop	{d8-d9}
   52464:	add	sp, sp, #4
   52468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5246c:	mov	r0, #0
   52470:	sub	sp, fp, #48	; 0x30
   52474:	vpop	{d8-d9}
   52478:	add	sp, sp, #4
   5247c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52480:	mov	r0, #0
   52484:	sub	sp, fp, #48	; 0x30
   52488:	vpop	{d8-d9}
   5248c:	add	sp, sp, #4
   52490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   52494:	mov	r0, #0
   52498:	sub	sp, fp, #48	; 0x30
   5249c:	vpop	{d8-d9}
   524a0:	add	sp, sp, #4
   524a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   524a8:	mov	r0, #0
   524ac:	sub	sp, fp, #48	; 0x30
   524b0:	vpop	{d8-d9}
   524b4:	add	sp, sp, #4
   524b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   524bc:	ldr	r5, [sp, #68]	; 0x44
   524c0:	ldr	r1, [sp, #40]	; 0x28
   524c4:	cmp	r1, #13
   524c8:	bne	2e97c <GetDataSlab+0x2b00>
   524cc:	ldr	r1, [sp, #52]	; 0x34
   524d0:	mov	r0, #0
   524d4:	cmp	r1, #1
   524d8:	ldrge	r1, [sp, #60]	; 0x3c
   524dc:	cmpge	r1, #1
   524e0:	blt	2e97c <GetDataSlab+0x2b00>
   524e4:	ldr	r0, [sp, #28]
   524e8:	ldr	r1, [sp, #24]
   524ec:	lsl	r7, r9, #3
   524f0:	mla	r0, r0, ip, r1
   524f4:	ldr	r1, [sp, #56]	; 0x38
   524f8:	add	r0, r1, r0, lsl #3
   524fc:	sub	r1, r9, #1
   52500:	str	r0, [sp, #68]	; 0x44
   52504:	mov	r0, #0
   52508:	clz	r1, r1
   5250c:	str	r0, [sp, #64]	; 0x40
   52510:	ldr	r0, [sp, #60]	; 0x3c
   52514:	lsr	r1, r1, #5
   52518:	mov	r2, r0
   5251c:	cmp	r0, #1
   52520:	mov	r0, #0
   52524:	movwhi	r0, #1
   52528:	and	r0, r0, r1
   5252c:	str	r0, [sp, #56]	; 0x38
   52530:	ldr	r0, [sp, #48]	; 0x30
   52534:	mul	r0, r0, ip
   52538:	lsl	r0, r0, #3
   5253c:	str	r0, [sp, #48]	; 0x30
   52540:	lsl	r0, r9, #4
   52544:	str	r0, [sp, #36]	; 0x24
   52548:	lsl	r0, r2, #3
   5254c:	str	r0, [sp, #44]	; 0x2c
   52550:	bic	r0, r2, #1
   52554:	str	r0, [sp, #40]	; 0x28
   52558:	ldr	r0, [sp, #56]	; 0x38
   5255c:	mov	r9, r5
   52560:	cmp	r0, #0
   52564:	mov	r0, #0
   52568:	beq	525cc <GetDataSlab+0x26750>
   5256c:	ldr	sl, [sp, #40]	; 0x28
   52570:	ldr	r4, [sp, #68]	; 0x44
   52574:	ldr	r6, [sp, #36]	; 0x24
   52578:	mov	r8, r5
   5257c:	add	r9, r5, sl, lsl #3
   52580:	vld1.64	{d8-d9}, [r4], r6
   52584:	vmov.32	r0, d9[0]
   52588:	vmov.32	r1, d9[1]
   5258c:	bl	5f080 <__aeabi_ul2d>
   52590:	vmov.32	r2, d8[0]
   52594:	vmov.32	r3, d8[1]
   52598:	vmov	d9, r0, r1
   5259c:	mov	r0, r2
   525a0:	mov	r1, r3
   525a4:	bl	5f080 <__aeabi_ul2d>
   525a8:	vmov	d8, r0, r1
   525ac:	subs	sl, sl, #2
   525b0:	vst1.64	{d8-d9}, [r8]!
   525b4:	bne	52580 <GetDataSlab+0x26704>
   525b8:	ldr	r0, [sp, #60]	; 0x3c
   525bc:	ldr	r1, [sp, #40]	; 0x28
   525c0:	cmp	r0, r1
   525c4:	mov	r0, r1
   525c8:	beq	525f8 <GetDataSlab+0x2677c>
   525cc:	ldr	r1, [sp, #68]	; 0x44
   525d0:	mla	r4, r7, r0, r1
   525d4:	ldr	r1, [sp, #60]	; 0x3c
   525d8:	sub	r6, r1, r0
   525dc:	ldrd	r0, [r4]
   525e0:	bl	5f080 <__aeabi_ul2d>
   525e4:	strd	r0, [r9]
   525e8:	add	r4, r4, r7
   525ec:	subs	r6, r6, #1
   525f0:	add	r9, r9, #8
   525f4:	bne	525dc <GetDataSlab+0x26760>
   525f8:	ldr	r0, [sp, #68]	; 0x44
   525fc:	ldr	r1, [sp, #48]	; 0x30
   52600:	ldr	r2, [sp, #64]	; 0x40
   52604:	add	r0, r0, r1
   52608:	ldr	r1, [sp, #52]	; 0x34
   5260c:	add	r2, r2, #1
   52610:	str	r0, [sp, #68]	; 0x44
   52614:	ldr	r0, [sp, #44]	; 0x2c
   52618:	str	r2, [sp, #64]	; 0x40
   5261c:	cmp	r2, r1
   52620:	add	r5, r5, r0
   52624:	mov	r0, #0
   52628:	bne	52558 <GetDataSlab+0x266dc>
   5262c:	b	2e97c <GetDataSlab+0x2b00>
   52630:	ldr	r3, [sp, #68]	; 0x44
   52634:	ldr	r1, [sp, #40]	; 0x28
   52638:	str	r3, [sp, #68]	; 0x44
   5263c:	cmp	r1, #13
   52640:	bne	2e97c <GetDataSlab+0x2b00>
   52644:	ldr	r1, [sp, #52]	; 0x34
   52648:	mov	r0, #0
   5264c:	cmp	r1, #1
   52650:	ldrge	r1, [sp, #60]	; 0x3c
   52654:	cmpge	r1, #1
   52658:	blt	2e97c <GetDataSlab+0x2b00>
   5265c:	ldr	r0, [sp, #28]
   52660:	ldr	r1, [sp, #24]
   52664:	lsl	r7, r9, #3
   52668:	lsl	r6, r9, #4
   5266c:	mla	r0, r0, ip, r1
   52670:	ldr	r1, [sp, #56]	; 0x38
   52674:	add	r0, r1, r0, lsl #3
   52678:	sub	r1, r9, #1
   5267c:	str	r0, [sp, #64]	; 0x40
   52680:	mov	r0, #0
   52684:	clz	r1, r1
   52688:	str	r0, [sp, #56]	; 0x38
   5268c:	ldr	r0, [sp, #60]	; 0x3c
   52690:	lsr	r1, r1, #5
   52694:	mov	r2, r0
   52698:	cmp	r0, #1
   5269c:	mov	r0, #0
   526a0:	movwhi	r0, #1
   526a4:	and	r0, r0, r1
   526a8:	str	r0, [sp, #44]	; 0x2c
   526ac:	ldr	r0, [sp, #48]	; 0x30
   526b0:	mul	r0, r0, ip
   526b4:	lsl	r0, r0, #3
   526b8:	str	r0, [sp, #48]	; 0x30
   526bc:	lsl	r0, r2, #2
   526c0:	str	r0, [sp, #40]	; 0x28
   526c4:	bic	r0, r2, #1
   526c8:	str	r0, [sp, #36]	; 0x24
   526cc:	ldr	r0, [sp, #44]	; 0x2c
   526d0:	ldr	r9, [sp, #68]	; 0x44
   526d4:	mov	r1, #0
   526d8:	cmp	r0, #0
   526dc:	beq	52734 <GetDataSlab+0x268b8>
   526e0:	ldr	r8, [sp, #68]	; 0x44
   526e4:	ldr	sl, [sp, #36]	; 0x24
   526e8:	ldr	r4, [sp, #64]	; 0x40
   526ec:	add	r9, r8, sl, lsl #2
   526f0:	vld1.64	{d8-d9}, [r4], r6
   526f4:	vmov.32	r0, d9[0]
   526f8:	vmov.32	r1, d9[1]
   526fc:	bl	5f2b8 <__aeabi_ul2f>
   52700:	vmov.32	r2, d8[0]
   52704:	vmov.32	r1, d8[1]
   52708:	vmov	s17, r0
   5270c:	mov	r0, r2
   52710:	bl	5f2b8 <__aeabi_ul2f>
   52714:	vmov	s16, r0
   52718:	subs	sl, sl, #2
   5271c:	vst1.32	{d8}, [r8]!
   52720:	bne	526f0 <GetDataSlab+0x26874>
   52724:	ldr	r0, [sp, #60]	; 0x3c
   52728:	ldr	r1, [sp, #36]	; 0x24
   5272c:	cmp	r0, r1
   52730:	beq	52760 <GetDataSlab+0x268e4>
   52734:	ldr	r0, [sp, #64]	; 0x40
   52738:	ldr	r2, [sp, #60]	; 0x3c
   5273c:	mla	r0, r7, r1, r0
   52740:	sub	r4, r2, r1
   52744:	add	r5, r0, r7
   52748:	ldrd	r0, [r0]
   5274c:	bl	5f2b8 <__aeabi_ul2f>
   52750:	str	r0, [r9], #4
   52754:	subs	r4, r4, #1
   52758:	mov	r0, r5
   5275c:	bne	52744 <GetDataSlab+0x268c8>
   52760:	ldr	r0, [sp, #64]	; 0x40
   52764:	ldr	r1, [sp, #48]	; 0x30
   52768:	ldr	r2, [sp, #56]	; 0x38
   5276c:	add	r0, r0, r1
   52770:	ldr	r1, [sp, #40]	; 0x28
   52774:	add	r2, r2, #1
   52778:	str	r0, [sp, #64]	; 0x40
   5277c:	ldr	r0, [sp, #68]	; 0x44
   52780:	str	r2, [sp, #56]	; 0x38
   52784:	add	r0, r0, r1
   52788:	ldr	r1, [sp, #52]	; 0x34
   5278c:	str	r0, [sp, #68]	; 0x44
   52790:	mov	r0, #0
   52794:	cmp	r2, r1
   52798:	bne	526cc <GetDataSlab+0x26850>
   5279c:	b	2e97c <GetDataSlab+0x2b00>
   527a0:	ldr	r5, [sp, #68]	; 0x44
   527a4:	ldr	r6, [sp, #60]	; 0x3c
   527a8:	ldr	r1, [sp, #52]	; 0x34
   527ac:	ldr	r3, [sp, #48]	; 0x30
   527b0:	mov	r9, r6
   527b4:	ldr	r6, [sp, #44]	; 0x2c
   527b8:	cmp	ip, #13
   527bc:	bne	2e97c <GetDataSlab+0x2b00>
   527c0:	mov	r4, r1
   527c4:	mov	r0, r1
   527c8:	cmp	r4, #1
   527cc:	blt	532c8 <GetDataSlab+0x2744c>
   527d0:	ldr	r0, [fp, #12]
   527d4:	mov	r7, #0
   527d8:	mov	r1, r0
   527dc:	ldr	r0, [r0]
   527e0:	ldr	r2, [r1, #4]
   527e4:	mla	r0, r6, r2, r0
   527e8:	ldr	r2, [sp, #56]	; 0x38
   527ec:	add	r2, r2, r0, lsl #3
   527f0:	cmp	r9, #1
   527f4:	mov	r0, r9
   527f8:	blt	52844 <GetDataSlab+0x269c8>
   527fc:	ldr	r4, [fp, #8]
   52800:	mov	r0, #0
   52804:	ldr	r6, [lr]
   52808:	mul	r6, r6, r0
   5280c:	ldrb	r6, [r2, r6, lsl #3]
   52810:	strb	r6, [r5, r0]
   52814:	add	r0, r0, #1
   52818:	ldr	r6, [sl]
   5281c:	cmp	r0, r6
   52820:	blt	52804 <GetDataSlab+0x26988>
   52824:	add	r5, r5, r0
   52828:	ldr	r0, [sp, #32]
   5282c:	mov	r9, r6
   52830:	ldr	r6, [r4]
   52834:	ldr	r1, [r0]
   52838:	ldr	r0, [sp, #36]	; 0x24
   5283c:	ldr	r0, [r0]
   52840:	b	5284c <GetDataSlab+0x269d0>
   52844:	mov	r1, r4
   52848:	mov	r0, r3
   5284c:	mov	r3, r0
   52850:	mul	r0, r6, r0
   52854:	add	r7, r7, #1
   52858:	mov	r4, r1
   5285c:	add	r2, r2, r0, lsl #3
   52860:	mov	r0, #0
   52864:	cmp	r7, r1
   52868:	blt	527f0 <GetDataSlab+0x26974>
   5286c:	b	2e97c <GetDataSlab+0x2b00>
   52870:	ldr	r5, [sp, #68]	; 0x44
   52874:	ldr	r6, [sp, #60]	; 0x3c
   52878:	ldr	r1, [sp, #52]	; 0x34
   5287c:	ldr	r3, [sp, #48]	; 0x30
   52880:	mov	r9, r6
   52884:	ldr	r6, [sp, #44]	; 0x2c
   52888:	cmp	ip, #13
   5288c:	bne	2e97c <GetDataSlab+0x2b00>
   52890:	mov	r4, r1
   52894:	mov	r0, r1
   52898:	cmp	r4, #1
   5289c:	blt	532dc <GetDataSlab+0x27460>
   528a0:	ldr	r0, [fp, #12]
   528a4:	mov	r7, #0
   528a8:	mov	r1, r0
   528ac:	ldr	r0, [r0]
   528b0:	ldr	r2, [r1, #4]
   528b4:	mla	r0, r6, r2, r0
   528b8:	ldr	r2, [sp, #56]	; 0x38
   528bc:	add	r2, r2, r0, lsl #3
   528c0:	cmp	r9, #1
   528c4:	mov	r0, r9
   528c8:	blt	52914 <GetDataSlab+0x26a98>
   528cc:	ldr	r4, [fp, #8]
   528d0:	mov	r0, #0
   528d4:	ldr	r6, [lr]
   528d8:	mul	r6, r6, r0
   528dc:	ldrb	r6, [r2, r6, lsl #3]
   528e0:	strb	r6, [r5, r0]
   528e4:	add	r0, r0, #1
   528e8:	ldr	r6, [sl]
   528ec:	cmp	r0, r6
   528f0:	blt	528d4 <GetDataSlab+0x26a58>
   528f4:	add	r5, r5, r0
   528f8:	ldr	r0, [sp, #32]
   528fc:	mov	r9, r6
   52900:	ldr	r6, [r4]
   52904:	ldr	r1, [r0]
   52908:	ldr	r0, [sp, #36]	; 0x24
   5290c:	ldr	r0, [r0]
   52910:	b	5291c <GetDataSlab+0x26aa0>
   52914:	mov	r1, r4
   52918:	mov	r0, r3
   5291c:	mov	r3, r0
   52920:	mul	r0, r6, r0
   52924:	add	r7, r7, #1
   52928:	mov	r4, r1
   5292c:	add	r2, r2, r0, lsl #3
   52930:	mov	r0, #0
   52934:	cmp	r7, r1
   52938:	blt	528c0 <GetDataSlab+0x26a44>
   5293c:	b	2e97c <GetDataSlab+0x2b00>
   52940:	ldr	sl, [sp, #68]	; 0x44
   52944:	ldr	r1, [sp, #40]	; 0x28
   52948:	cmp	r1, #13
   5294c:	bne	2e97c <GetDataSlab+0x2b00>
   52950:	ldr	r1, [sp, #52]	; 0x34
   52954:	mov	r0, #0
   52958:	cmp	r1, #1
   5295c:	ldrge	r1, [sp, #60]	; 0x3c
   52960:	cmpge	r1, #1
   52964:	blt	2e97c <GetDataSlab+0x2b00>
   52968:	ldr	r0, [sp, #28]
   5296c:	ldr	r1, [sp, #24]
   52970:	mov	r7, ip
   52974:	mov	r2, #0
   52978:	lsl	r6, r9, #3
   5297c:	lsl	r4, r9, #4
   52980:	mla	r0, r0, ip, r1
   52984:	ldr	r1, [sp, #56]	; 0x38
   52988:	add	r3, r1, r0, lsl #3
   5298c:	ldr	r0, [sp, #60]	; 0x3c
   52990:	sub	r1, r9, #1
   52994:	clz	r1, r1
   52998:	lsr	r1, r1, #5
   5299c:	mov	r5, r0
   529a0:	cmp	r0, #1
   529a4:	mov	r0, #0
   529a8:	movwhi	r0, #1
   529ac:	lsl	r8, r5, #1
   529b0:	bic	r9, r5, #1
   529b4:	and	ip, r0, r1
   529b8:	ldr	r0, [sp, #48]	; 0x30
   529bc:	mul	r0, r0, r7
   529c0:	lsl	lr, r0, #3
   529c4:	cmp	ip, #0
   529c8:	mov	r1, #0
   529cc:	mov	r0, sl
   529d0:	beq	52a0c <GetDataSlab+0x26b90>
   529d4:	mov	r7, sl
   529d8:	add	r0, sl, r9, lsl #1
   529dc:	mov	r5, r9
   529e0:	mov	r1, r3
   529e4:	vld1.64	{d16-d17}, [r1], r4
   529e8:	subs	r5, r5, #2
   529ec:	vmovn.i64	d16, q8
   529f0:	vuzp.16	d16, d17
   529f4:	vst1.32	{d16[0]}, [r7]!
   529f8:	bne	529e4 <GetDataSlab+0x26b68>
   529fc:	ldr	r1, [sp, #60]	; 0x3c
   52a00:	cmp	r1, r9
   52a04:	mov	r1, r9
   52a08:	beq	52a28 <GetDataSlab+0x26bac>
   52a0c:	ldr	r7, [sp, #60]	; 0x3c
   52a10:	mla	r5, r6, r1, r3
   52a14:	sub	r1, r7, r1
   52a18:	ldrh	r7, [r5], r6
   52a1c:	subs	r1, r1, #1
   52a20:	strh	r7, [r0], #2
   52a24:	bne	52a18 <GetDataSlab+0x26b9c>
   52a28:	ldr	r1, [sp, #52]	; 0x34
   52a2c:	add	r2, r2, #1
   52a30:	add	r3, r3, lr
   52a34:	add	sl, sl, r8
   52a38:	mov	r0, #0
   52a3c:	cmp	r2, r1
   52a40:	bne	529c4 <GetDataSlab+0x26b48>
   52a44:	b	2e97c <GetDataSlab+0x2b00>
   52a48:	ldr	sl, [sp, #68]	; 0x44
   52a4c:	ldr	r1, [sp, #40]	; 0x28
   52a50:	cmp	r1, #13
   52a54:	bne	2e97c <GetDataSlab+0x2b00>
   52a58:	ldr	r1, [sp, #52]	; 0x34
   52a5c:	mov	r0, #0
   52a60:	cmp	r1, #1
   52a64:	ldrge	r1, [sp, #60]	; 0x3c
   52a68:	cmpge	r1, #1
   52a6c:	blt	2e97c <GetDataSlab+0x2b00>
   52a70:	ldr	r0, [sp, #28]
   52a74:	ldr	r1, [sp, #24]
   52a78:	mov	r7, ip
   52a7c:	mov	r2, #0
   52a80:	lsl	r6, r9, #3
   52a84:	lsl	r4, r9, #4
   52a88:	mla	r0, r0, ip, r1
   52a8c:	ldr	r1, [sp, #56]	; 0x38
   52a90:	add	r3, r1, r0, lsl #3
   52a94:	ldr	r0, [sp, #60]	; 0x3c
   52a98:	sub	r1, r9, #1
   52a9c:	clz	r1, r1
   52aa0:	lsr	r1, r1, #5
   52aa4:	mov	r5, r0
   52aa8:	cmp	r0, #1
   52aac:	mov	r0, #0
   52ab0:	movwhi	r0, #1
   52ab4:	lsl	r8, r5, #1
   52ab8:	bic	r9, r5, #1
   52abc:	and	ip, r0, r1
   52ac0:	ldr	r0, [sp, #48]	; 0x30
   52ac4:	mul	r0, r0, r7
   52ac8:	lsl	lr, r0, #3
   52acc:	cmp	ip, #0
   52ad0:	mov	r1, #0
   52ad4:	mov	r0, sl
   52ad8:	beq	52b14 <GetDataSlab+0x26c98>
   52adc:	mov	r7, sl
   52ae0:	add	r0, sl, r9, lsl #1
   52ae4:	mov	r5, r9
   52ae8:	mov	r1, r3
   52aec:	vld1.64	{d16-d17}, [r1], r4
   52af0:	subs	r5, r5, #2
   52af4:	vmovn.i64	d16, q8
   52af8:	vuzp.16	d16, d17
   52afc:	vst1.32	{d16[0]}, [r7]!
   52b00:	bne	52aec <GetDataSlab+0x26c70>
   52b04:	ldr	r1, [sp, #60]	; 0x3c
   52b08:	cmp	r1, r9
   52b0c:	mov	r1, r9
   52b10:	beq	52b30 <GetDataSlab+0x26cb4>
   52b14:	ldr	r7, [sp, #60]	; 0x3c
   52b18:	mla	r5, r6, r1, r3
   52b1c:	sub	r1, r7, r1
   52b20:	ldrh	r7, [r5], r6
   52b24:	subs	r1, r1, #1
   52b28:	strh	r7, [r0], #2
   52b2c:	bne	52b20 <GetDataSlab+0x26ca4>
   52b30:	ldr	r1, [sp, #52]	; 0x34
   52b34:	add	r2, r2, #1
   52b38:	add	r3, r3, lr
   52b3c:	add	sl, sl, r8
   52b40:	mov	r0, #0
   52b44:	cmp	r2, r1
   52b48:	bne	52acc <GetDataSlab+0x26c50>
   52b4c:	b	2e97c <GetDataSlab+0x2b00>
   52b50:	ldr	r4, [sp, #68]	; 0x44
   52b54:	ldr	r5, [sp, #60]	; 0x3c
   52b58:	ldr	r6, [sp, #52]	; 0x34
   52b5c:	ldr	r1, [sp, #48]	; 0x30
   52b60:	cmp	r9, #13
   52b64:	bne	2e97c <GetDataSlab+0x2b00>
   52b68:	cmp	r6, #1
   52b6c:	mov	r0, r6
   52b70:	blt	532f0 <GetDataSlab+0x27474>
   52b74:	ldr	r0, [fp, #12]
   52b78:	mov	r3, r1
   52b7c:	mov	r7, #0
   52b80:	mov	r1, r0
   52b84:	ldr	r0, [r0]
   52b88:	ldr	r2, [r1, #4]
   52b8c:	mla	r0, ip, r2, r0
   52b90:	ldr	r2, [sp, #56]	; 0x38
   52b94:	add	r2, r2, r0, lsl #3
   52b98:	cmp	r5, #1
   52b9c:	mov	r0, r5
   52ba0:	blt	52bf0 <GetDataSlab+0x26d74>
   52ba4:	ldr	ip, [fp, #8]
   52ba8:	mov	r0, #0
   52bac:	mov	r6, #0
   52bb0:	ldr	r5, [lr]
   52bb4:	add	r0, r0, #4
   52bb8:	mul	r5, r5, r6
   52bbc:	ldr	r5, [r2, r5, lsl #3]
   52bc0:	str	r5, [r4, r6, lsl #2]
   52bc4:	add	r6, r6, #1
   52bc8:	ldr	r5, [sl]
   52bcc:	cmp	r6, r5
   52bd0:	blt	52bb0 <GetDataSlab+0x26d34>
   52bd4:	add	r4, r4, r0
   52bd8:	ldr	r0, [sp, #32]
   52bdc:	ldr	ip, [ip]
   52be0:	ldr	r1, [r0]
   52be4:	ldr	r0, [sp, #36]	; 0x24
   52be8:	ldr	r0, [r0]
   52bec:	b	52bf8 <GetDataSlab+0x26d7c>
   52bf0:	mov	r1, r6
   52bf4:	mov	r0, r3
   52bf8:	mov	r3, r0
   52bfc:	mul	r0, ip, r0
   52c00:	add	r7, r7, #1
   52c04:	mov	r6, r1
   52c08:	add	r2, r2, r0, lsl #3
   52c0c:	mov	r0, #0
   52c10:	cmp	r7, r1
   52c14:	blt	52b98 <GetDataSlab+0x26d1c>
   52c18:	b	2e97c <GetDataSlab+0x2b00>
   52c1c:	ldr	r4, [sp, #68]	; 0x44
   52c20:	ldr	r5, [sp, #60]	; 0x3c
   52c24:	ldr	r6, [sp, #52]	; 0x34
   52c28:	ldr	r1, [sp, #48]	; 0x30
   52c2c:	cmp	r9, #13
   52c30:	bne	2e97c <GetDataSlab+0x2b00>
   52c34:	cmp	r6, #1
   52c38:	mov	r0, r6
   52c3c:	blt	53304 <GetDataSlab+0x27488>
   52c40:	ldr	r0, [fp, #12]
   52c44:	mov	r3, r1
   52c48:	mov	r7, #0
   52c4c:	mov	r1, r0
   52c50:	ldr	r0, [r0]
   52c54:	ldr	r2, [r1, #4]
   52c58:	mla	r0, ip, r2, r0
   52c5c:	ldr	r2, [sp, #56]	; 0x38
   52c60:	add	r2, r2, r0, lsl #3
   52c64:	cmp	r5, #1
   52c68:	mov	r0, r5
   52c6c:	blt	52cbc <GetDataSlab+0x26e40>
   52c70:	ldr	ip, [fp, #8]
   52c74:	mov	r0, #0
   52c78:	mov	r6, #0
   52c7c:	ldr	r5, [lr]
   52c80:	add	r0, r0, #4
   52c84:	mul	r5, r5, r6
   52c88:	ldr	r5, [r2, r5, lsl #3]
   52c8c:	str	r5, [r4, r6, lsl #2]
   52c90:	add	r6, r6, #1
   52c94:	ldr	r5, [sl]
   52c98:	cmp	r6, r5
   52c9c:	blt	52c7c <GetDataSlab+0x26e00>
   52ca0:	add	r4, r4, r0
   52ca4:	ldr	r0, [sp, #32]
   52ca8:	ldr	ip, [ip]
   52cac:	ldr	r1, [r0]
   52cb0:	ldr	r0, [sp, #36]	; 0x24
   52cb4:	ldr	r0, [r0]
   52cb8:	b	52cc4 <GetDataSlab+0x26e48>
   52cbc:	mov	r1, r6
   52cc0:	mov	r0, r3
   52cc4:	mov	r3, r0
   52cc8:	mul	r0, ip, r0
   52ccc:	add	r7, r7, #1
   52cd0:	mov	r6, r1
   52cd4:	add	r2, r2, r0, lsl #3
   52cd8:	mov	r0, #0
   52cdc:	cmp	r7, r1
   52ce0:	blt	52c64 <GetDataSlab+0x26de8>
   52ce4:	b	2e97c <GetDataSlab+0x2b00>
   52ce8:	ldr	r3, [sp, #68]	; 0x44
   52cec:	ldr	r1, [sp, #40]	; 0x28
   52cf0:	str	r3, [sp, #68]	; 0x44
   52cf4:	cmp	r1, #13
   52cf8:	bne	2e97c <GetDataSlab+0x2b00>
   52cfc:	ldr	r1, [sp, #52]	; 0x34
   52d00:	mov	r0, #0
   52d04:	cmp	r1, #1
   52d08:	ldrge	r1, [sp, #60]	; 0x3c
   52d0c:	cmpge	r1, #1
   52d10:	blt	2e97c <GetDataSlab+0x2b00>
   52d14:	ldr	r0, [sp, #28]
   52d18:	ldr	r1, [sp, #24]
   52d1c:	ldr	r8, [sp, #68]	; 0x44
   52d20:	mov	r3, #0
   52d24:	lsl	r4, r9, #3
   52d28:	lsl	r2, r9, #4
   52d2c:	mla	r0, r0, ip, r1
   52d30:	ldr	r1, [sp, #56]	; 0x38
   52d34:	lsl	r5, r0, #3
   52d38:	str	r5, [sp, #40]	; 0x28
   52d3c:	add	lr, r1, r0, lsl #3
   52d40:	ldr	r1, [sp, #60]	; 0x3c
   52d44:	sub	r0, r9, #1
   52d48:	clz	r0, r0
   52d4c:	lsr	r0, r0, #5
   52d50:	mov	r7, r1
   52d54:	cmp	r1, #1
   52d58:	mov	r1, #0
   52d5c:	movwhi	r1, #1
   52d60:	bic	r9, r7, #1
   52d64:	and	r0, r1, r0
   52d68:	str	r0, [sp, #64]	; 0x40
   52d6c:	ldr	r0, [sp, #48]	; 0x30
   52d70:	mul	r0, r0, ip
   52d74:	lsl	sl, r0, #3
   52d78:	add	r0, r5, r7, lsl #3
   52d7c:	str	r0, [sp, #44]	; 0x2c
   52d80:	lsl	r0, r7, #3
   52d84:	str	r0, [sp, #48]	; 0x30
   52d88:	ldr	r0, [sp, #64]	; 0x40
   52d8c:	mov	r1, #0
   52d90:	cmp	r0, #0
   52d94:	mov	r0, r8
   52d98:	beq	52e28 <GetDataSlab+0x26fac>
   52d9c:	ldr	r6, [sp, #44]	; 0x2c
   52da0:	ldr	r1, [sp, #60]	; 0x3c
   52da4:	mul	r0, sl, r3
   52da8:	ldr	r7, [sp, #68]	; 0x44
   52dac:	add	r5, r6, r0
   52db0:	ldr	r6, [sp, #56]	; 0x38
   52db4:	mul	r1, r1, r3
   52db8:	add	r7, r7, r1, lsl #3
   52dbc:	add	r5, r6, r5
   52dc0:	cmp	r5, r7
   52dc4:	bls	52df8 <GetDataSlab+0x26f7c>
   52dc8:	ldr	r7, [sp, #60]	; 0x3c
   52dcc:	add	r1, r7, r1
   52dd0:	ldr	r7, [sp, #68]	; 0x44
   52dd4:	add	r1, r7, r1, lsl #3
   52dd8:	ldr	r7, [sp, #40]	; 0x28
   52ddc:	add	r0, r7, r0
   52de0:	ldr	r7, [sp, #56]	; 0x38
   52de4:	add	r0, r7, r0
   52de8:	cmp	r0, r1
   52dec:	mov	r1, #0
   52df0:	mov	r0, r8
   52df4:	bcc	52e28 <GetDataSlab+0x26fac>
   52df8:	add	r0, r8, r9, lsl #3
   52dfc:	mov	r5, r9
   52e00:	mov	r1, lr
   52e04:	mov	r7, r8
   52e08:	vld1.64	{d16-d17}, [r1], r2
   52e0c:	subs	r5, r5, #2
   52e10:	vst1.64	{d16-d17}, [r7]!
   52e14:	bne	52e08 <GetDataSlab+0x26f8c>
   52e18:	ldr	r1, [sp, #60]	; 0x3c
   52e1c:	cmp	r1, r9
   52e20:	mov	r1, r9
   52e24:	beq	52e4c <GetDataSlab+0x26fd0>
   52e28:	ldr	r7, [sp, #60]	; 0x3c
   52e2c:	mla	r5, r4, r1, lr
   52e30:	sub	ip, r7, r1
   52e34:	ldm	r5, {r1, r7}
   52e38:	add	r5, r5, r4
   52e3c:	subs	ip, ip, #1
   52e40:	stm	r0, {r1, r7}
   52e44:	add	r0, r0, #8
   52e48:	bne	52e34 <GetDataSlab+0x26fb8>
   52e4c:	ldr	r0, [sp, #48]	; 0x30
   52e50:	ldr	r1, [sp, #52]	; 0x34
   52e54:	add	r3, r3, #1
   52e58:	add	lr, lr, sl
   52e5c:	add	r8, r8, r0
   52e60:	mov	r0, #0
   52e64:	cmp	r3, r1
   52e68:	bne	52d88 <GetDataSlab+0x26f0c>
   52e6c:	b	2e97c <GetDataSlab+0x2b00>
   52e70:	ldr	r3, [sp, #68]	; 0x44
   52e74:	ldr	r1, [sp, #40]	; 0x28
   52e78:	str	r3, [sp, #68]	; 0x44
   52e7c:	cmp	r1, #13
   52e80:	bne	2e97c <GetDataSlab+0x2b00>
   52e84:	ldr	r1, [sp, #52]	; 0x34
   52e88:	mov	r0, #0
   52e8c:	cmp	r1, #1
   52e90:	ldrge	r1, [sp, #60]	; 0x3c
   52e94:	cmpge	r1, #1
   52e98:	blt	2e97c <GetDataSlab+0x2b00>
   52e9c:	ldr	r0, [sp, #28]
   52ea0:	ldr	r1, [sp, #24]
   52ea4:	ldr	r8, [sp, #68]	; 0x44
   52ea8:	mov	r3, #0
   52eac:	lsl	r4, r9, #3
   52eb0:	lsl	r2, r9, #4
   52eb4:	mla	r0, r0, ip, r1
   52eb8:	ldr	r1, [sp, #56]	; 0x38
   52ebc:	lsl	r5, r0, #3
   52ec0:	str	r5, [sp, #40]	; 0x28
   52ec4:	add	lr, r1, r0, lsl #3
   52ec8:	ldr	r1, [sp, #60]	; 0x3c
   52ecc:	sub	r0, r9, #1
   52ed0:	clz	r0, r0
   52ed4:	lsr	r0, r0, #5
   52ed8:	mov	r7, r1
   52edc:	cmp	r1, #1
   52ee0:	mov	r1, #0
   52ee4:	movwhi	r1, #1
   52ee8:	bic	r9, r7, #1
   52eec:	and	r0, r1, r0
   52ef0:	str	r0, [sp, #64]	; 0x40
   52ef4:	ldr	r0, [sp, #48]	; 0x30
   52ef8:	mul	r0, r0, ip
   52efc:	lsl	sl, r0, #3
   52f00:	add	r0, r5, r7, lsl #3
   52f04:	str	r0, [sp, #44]	; 0x2c
   52f08:	lsl	r0, r7, #3
   52f0c:	str	r0, [sp, #48]	; 0x30
   52f10:	ldr	r0, [sp, #64]	; 0x40
   52f14:	mov	r1, #0
   52f18:	cmp	r0, #0
   52f1c:	mov	r0, r8
   52f20:	beq	52fb0 <GetDataSlab+0x27134>
   52f24:	ldr	r6, [sp, #44]	; 0x2c
   52f28:	ldr	r1, [sp, #60]	; 0x3c
   52f2c:	mul	r0, sl, r3
   52f30:	ldr	r7, [sp, #68]	; 0x44
   52f34:	add	r5, r6, r0
   52f38:	ldr	r6, [sp, #56]	; 0x38
   52f3c:	mul	r1, r1, r3
   52f40:	add	r7, r7, r1, lsl #3
   52f44:	add	r5, r6, r5
   52f48:	cmp	r5, r7
   52f4c:	bls	52f80 <GetDataSlab+0x27104>
   52f50:	ldr	r7, [sp, #60]	; 0x3c
   52f54:	add	r1, r7, r1
   52f58:	ldr	r7, [sp, #68]	; 0x44
   52f5c:	add	r1, r7, r1, lsl #3
   52f60:	ldr	r7, [sp, #40]	; 0x28
   52f64:	add	r0, r7, r0
   52f68:	ldr	r7, [sp, #56]	; 0x38
   52f6c:	add	r0, r7, r0
   52f70:	cmp	r0, r1
   52f74:	mov	r1, #0
   52f78:	mov	r0, r8
   52f7c:	bcc	52fb0 <GetDataSlab+0x27134>
   52f80:	add	r0, r8, r9, lsl #3
   52f84:	mov	r5, r9
   52f88:	mov	r1, lr
   52f8c:	mov	r7, r8
   52f90:	vld1.64	{d16-d17}, [r1], r2
   52f94:	subs	r5, r5, #2
   52f98:	vst1.64	{d16-d17}, [r7]!
   52f9c:	bne	52f90 <GetDataSlab+0x27114>
   52fa0:	ldr	r1, [sp, #60]	; 0x3c
   52fa4:	cmp	r1, r9
   52fa8:	mov	r1, r9
   52fac:	beq	52fd4 <GetDataSlab+0x27158>
   52fb0:	ldr	r7, [sp, #60]	; 0x3c
   52fb4:	mla	r5, r4, r1, lr
   52fb8:	sub	ip, r7, r1
   52fbc:	ldm	r5, {r1, r7}
   52fc0:	add	r5, r5, r4
   52fc4:	subs	ip, ip, #1
   52fc8:	stm	r0, {r1, r7}
   52fcc:	add	r0, r0, #8
   52fd0:	bne	52fbc <GetDataSlab+0x27140>
   52fd4:	ldr	r0, [sp, #48]	; 0x30
   52fd8:	ldr	r1, [sp, #52]	; 0x34
   52fdc:	add	r3, r3, #1
   52fe0:	add	lr, lr, sl
   52fe4:	add	r8, r8, r0
   52fe8:	mov	r0, #0
   52fec:	cmp	r3, r1
   52ff0:	bne	52f10 <GetDataSlab+0x27094>
   52ff4:	b	2e97c <GetDataSlab+0x2b00>
   52ff8:	mov	r0, #0
   52ffc:	sub	sp, fp, #48	; 0x30
   53000:	vpop	{d8-d9}
   53004:	add	sp, sp, #4
   53008:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5300c:	mov	r0, #0
   53010:	sub	sp, fp, #48	; 0x30
   53014:	vpop	{d8-d9}
   53018:	add	sp, sp, #4
   5301c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53020:	mov	r0, #0
   53024:	sub	sp, fp, #48	; 0x30
   53028:	vpop	{d8-d9}
   5302c:	add	sp, sp, #4
   53030:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53034:	mov	r0, #0
   53038:	sub	sp, fp, #48	; 0x30
   5303c:	vpop	{d8-d9}
   53040:	add	sp, sp, #4
   53044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53048:	mov	r0, #0
   5304c:	sub	sp, fp, #48	; 0x30
   53050:	vpop	{d8-d9}
   53054:	add	sp, sp, #4
   53058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5305c:	mov	r0, #0
   53060:	sub	sp, fp, #48	; 0x30
   53064:	vpop	{d8-d9}
   53068:	add	sp, sp, #4
   5306c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53070:	mov	r0, #0
   53074:	sub	sp, fp, #48	; 0x30
   53078:	vpop	{d8-d9}
   5307c:	add	sp, sp, #4
   53080:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53084:	mov	r0, #0
   53088:	sub	sp, fp, #48	; 0x30
   5308c:	vpop	{d8-d9}
   53090:	add	sp, sp, #4
   53094:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53098:	mov	r0, #0
   5309c:	sub	sp, fp, #48	; 0x30
   530a0:	vpop	{d8-d9}
   530a4:	add	sp, sp, #4
   530a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   530ac:	mov	r0, #0
   530b0:	sub	sp, fp, #48	; 0x30
   530b4:	vpop	{d8-d9}
   530b8:	add	sp, sp, #4
   530bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   530c0:	mov	r0, #0
   530c4:	sub	sp, fp, #48	; 0x30
   530c8:	vpop	{d8-d9}
   530cc:	add	sp, sp, #4
   530d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   530d4:	mov	r0, #0
   530d8:	sub	sp, fp, #48	; 0x30
   530dc:	vpop	{d8-d9}
   530e0:	add	sp, sp, #4
   530e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   530e8:	mov	r0, #0
   530ec:	sub	sp, fp, #48	; 0x30
   530f0:	vpop	{d8-d9}
   530f4:	add	sp, sp, #4
   530f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   530fc:	mov	r0, #0
   53100:	sub	sp, fp, #48	; 0x30
   53104:	vpop	{d8-d9}
   53108:	add	sp, sp, #4
   5310c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53110:	mov	r0, #0
   53114:	sub	sp, fp, #48	; 0x30
   53118:	vpop	{d8-d9}
   5311c:	add	sp, sp, #4
   53120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53124:	mov	r0, #0
   53128:	sub	sp, fp, #48	; 0x30
   5312c:	vpop	{d8-d9}
   53130:	add	sp, sp, #4
   53134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53138:	mov	r0, #0
   5313c:	sub	sp, fp, #48	; 0x30
   53140:	vpop	{d8-d9}
   53144:	add	sp, sp, #4
   53148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5314c:	mov	r0, #0
   53150:	sub	sp, fp, #48	; 0x30
   53154:	vpop	{d8-d9}
   53158:	add	sp, sp, #4
   5315c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53160:	mov	r0, #0
   53164:	sub	sp, fp, #48	; 0x30
   53168:	vpop	{d8-d9}
   5316c:	add	sp, sp, #4
   53170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53174:	mov	r0, #0
   53178:	sub	sp, fp, #48	; 0x30
   5317c:	vpop	{d8-d9}
   53180:	add	sp, sp, #4
   53184:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53188:	mov	r0, #0
   5318c:	sub	sp, fp, #48	; 0x30
   53190:	vpop	{d8-d9}
   53194:	add	sp, sp, #4
   53198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5319c:	mov	r0, #0
   531a0:	sub	sp, fp, #48	; 0x30
   531a4:	vpop	{d8-d9}
   531a8:	add	sp, sp, #4
   531ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   531b0:	mov	r0, #0
   531b4:	sub	sp, fp, #48	; 0x30
   531b8:	vpop	{d8-d9}
   531bc:	add	sp, sp, #4
   531c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   531c4:	mov	r0, #0
   531c8:	sub	sp, fp, #48	; 0x30
   531cc:	vpop	{d8-d9}
   531d0:	add	sp, sp, #4
   531d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   531d8:	mov	r0, #0
   531dc:	sub	sp, fp, #48	; 0x30
   531e0:	vpop	{d8-d9}
   531e4:	add	sp, sp, #4
   531e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   531ec:	mov	r0, #0
   531f0:	sub	sp, fp, #48	; 0x30
   531f4:	vpop	{d8-d9}
   531f8:	add	sp, sp, #4
   531fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53200:	mov	r0, #0
   53204:	sub	sp, fp, #48	; 0x30
   53208:	vpop	{d8-d9}
   5320c:	add	sp, sp, #4
   53210:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53214:	mov	r0, #0
   53218:	sub	sp, fp, #48	; 0x30
   5321c:	vpop	{d8-d9}
   53220:	add	sp, sp, #4
   53224:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53228:	mov	r0, #0
   5322c:	sub	sp, fp, #48	; 0x30
   53230:	vpop	{d8-d9}
   53234:	add	sp, sp, #4
   53238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5323c:	mov	r0, #0
   53240:	sub	sp, fp, #48	; 0x30
   53244:	vpop	{d8-d9}
   53248:	add	sp, sp, #4
   5324c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53250:	mov	r0, #0
   53254:	sub	sp, fp, #48	; 0x30
   53258:	vpop	{d8-d9}
   5325c:	add	sp, sp, #4
   53260:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53264:	mov	r0, #0
   53268:	sub	sp, fp, #48	; 0x30
   5326c:	vpop	{d8-d9}
   53270:	add	sp, sp, #4
   53274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53278:	mov	r0, #0
   5327c:	sub	sp, fp, #48	; 0x30
   53280:	vpop	{d8-d9}
   53284:	add	sp, sp, #4
   53288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5328c:	mov	r0, #0
   53290:	sub	sp, fp, #48	; 0x30
   53294:	vpop	{d8-d9}
   53298:	add	sp, sp, #4
   5329c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   532a0:	mov	r0, #0
   532a4:	sub	sp, fp, #48	; 0x30
   532a8:	vpop	{d8-d9}
   532ac:	add	sp, sp, #4
   532b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   532b4:	mov	r0, #0
   532b8:	sub	sp, fp, #48	; 0x30
   532bc:	vpop	{d8-d9}
   532c0:	add	sp, sp, #4
   532c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   532c8:	mov	r0, #0
   532cc:	sub	sp, fp, #48	; 0x30
   532d0:	vpop	{d8-d9}
   532d4:	add	sp, sp, #4
   532d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   532dc:	mov	r0, #0
   532e0:	sub	sp, fp, #48	; 0x30
   532e4:	vpop	{d8-d9}
   532e8:	add	sp, sp, #4
   532ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   532f0:	mov	r0, #0
   532f4:	sub	sp, fp, #48	; 0x30
   532f8:	vpop	{d8-d9}
   532fc:	add	sp, sp, #4
   53300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53304:	mov	r0, #0
   53308:	sub	sp, fp, #48	; 0x30
   5330c:	vpop	{d8-d9}
   53310:	add	sp, sp, #4
   53314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00053318 <Mat_VarReadDataLinear5>:
   53318:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5331c:	add	fp, sp, #28
   53320:	sub	sp, sp, #84	; 0x54
   53324:	mov	r7, r0
   53328:	mov	r0, #1
   5332c:	mvn	r5, #0
   53330:	str	r0, [sp, #16]
   53334:	ldr	r0, [r7, #16]
   53338:	cmp	r0, #16
   5333c:	beq	5347c <Mat_VarReadDataLinear5+0x164>
   53340:	mov	r4, r1
   53344:	ldr	r1, [r1, #52]	; 0x34
   53348:	ldr	r0, [r7]
   5334c:	mov	r8, r2
   53350:	mov	r2, #0
   53354:	mov	r9, r3
   53358:	mov	r6, #0
   5335c:	ldr	r1, [r1]
   53360:	bl	1a2c <fseek@plt>
   53364:	ldr	r0, [r4, #48]	; 0x30
   53368:	cmp	r0, #1
   5336c:	beq	533e0 <Mat_VarReadDataLinear5+0xc8>
   53370:	cmp	r0, #0
   53374:	bne	53538 <Mat_VarReadDataLinear5+0x220>
   53378:	ldr	r3, [r7]
   5337c:	sub	r5, fp, #36	; 0x24
   53380:	mov	r1, #4
   53384:	mov	r2, #2
   53388:	mov	r0, r5
   5338c:	bl	18b8 <fread@plt>
   53390:	ldr	r0, [r7, #20]
   53394:	cmp	r0, #0
   53398:	beq	533ac <Mat_VarReadDataLinear5+0x94>
   5339c:	mov	r0, r5
   533a0:	bl	1bf0 <Mat_int32Swap>
   533a4:	add	r0, r5, #4
   533a8:	bl	1bf0 <Mat_int32Swap>
   533ac:	ldr	r0, [fp, #-36]	; 0xffffffdc
   533b0:	uxtb	r1, r0
   533b4:	cmp	r0, #65536	; 0x10000
   533b8:	str	r1, [r4, #8]
   533bc:	bcc	53530 <Mat_VarReadDataLinear5+0x218>
   533c0:	ldr	r0, [r7]
   533c4:	mvn	r1, #3
   533c8:	mov	r2, #1
   533cc:	bl	1a2c <fseek@plt>
   533d0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   533d4:	mov	r1, #4
   533d8:	add	r6, r1, r0, asr #16
   533dc:	b	53538 <Mat_VarReadDataLinear5+0x220>
   533e0:	ldr	r0, [r4, #52]	; 0x34
   533e4:	ldr	r6, [r0, #16]
   533e8:	cmp	r6, #0
   533ec:	beq	5344c <Mat_VarReadDataLinear5+0x134>
   533f0:	ldr	r0, [r4, #20]
   533f4:	cmp	r0, #0
   533f8:	beq	53488 <Mat_VarReadDataLinear5+0x170>
   533fc:	ldr	r3, [r4, #8]
   53400:	ldr	r2, [r4, #16]
   53404:	ldr	r1, [r8]
   53408:	ldr	r0, [r6]
   5340c:	ldr	sl, [fp, #8]
   53410:	ldr	r7, [fp, #12]
   53414:	str	r9, [sp]
   53418:	str	sl, [sp, #4]
   5341c:	str	r7, [sp, #8]
   53420:	bl	5380c <GetDataLinear>
   53424:	mov	r5, r0
   53428:	cmp	r0, #0
   5342c:	bne	5347c <Mat_VarReadDataLinear5+0x164>
   53430:	ldr	r3, [r4, #8]
   53434:	ldr	r2, [r4, #16]
   53438:	ldr	r1, [r8, #4]
   5343c:	ldr	r0, [r6, #4]
   53440:	stm	sp, {r9, sl}
   53444:	str	r7, [sp, #8]
   53448:	b	534ac <Mat_VarReadDataLinear5+0x194>
   5344c:	ldr	r1, [r0, #12]
   53450:	mov	r0, #0
   53454:	str	r0, [r1, #4]
   53458:	add	r0, sp, #20
   5345c:	bl	1948 <inflateCopy@plt>
   53460:	cmp	r0, #0
   53464:	beq	534c0 <Mat_VarReadDataLinear5+0x1a8>
   53468:	bl	1888 <zError@plt>
   5346c:	mov	r1, r0
   53470:	ldr	r0, [pc, #904]	; 53800 <Mat_VarReadDataLinear5+0x4e8>
   53474:	add	r0, pc, r0
   53478:	bl	19b4 <Mat_Critical@plt>
   5347c:	mov	r0, r5
   53480:	sub	sp, fp, #28
   53484:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53488:	ldr	r0, [fp, #8]
   5348c:	ldr	r3, [r4, #8]
   53490:	ldr	r2, [r4, #16]
   53494:	str	r9, [sp]
   53498:	mov	r1, r8
   5349c:	str	r0, [sp, #4]
   534a0:	ldr	r0, [fp, #12]
   534a4:	str	r0, [sp, #8]
   534a8:	mov	r0, r6
   534ac:	bl	5380c <GetDataLinear>
   534b0:	mov	r5, r0
   534b4:	mov	r0, r5
   534b8:	sub	sp, fp, #28
   534bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   534c0:	sub	r5, fp, #36	; 0x24
   534c4:	add	r1, sp, #20
   534c8:	mov	r0, r7
   534cc:	mov	r2, r5
   534d0:	bl	31bc <InflateDataType>
   534d4:	ldr	r0, [r7, #20]
   534d8:	cmp	r0, #0
   534dc:	beq	534f0 <Mat_VarReadDataLinear5+0x1d8>
   534e0:	mov	r0, r5
   534e4:	bl	1bf0 <Mat_int32Swap>
   534e8:	add	r0, r5, #4
   534ec:	bl	1bf0 <Mat_int32Swap>
   534f0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   534f4:	uxtb	r1, r0
   534f8:	str	r1, [r4, #8]
   534fc:	mov	r1, #0
   53500:	cmp	r1, r0, lsr #16
   53504:	bne	533d4 <Mat_VarReadDataLinear5+0xbc>
   53508:	add	r5, r5, #4
   5350c:	add	r1, sp, #20
   53510:	mov	r0, r7
   53514:	mov	r2, r5
   53518:	bl	31bc <InflateDataType>
   5351c:	ldr	r0, [r7, #20]
   53520:	cmp	r0, #0
   53524:	beq	53530 <Mat_VarReadDataLinear5+0x218>
   53528:	mov	r0, r5
   5352c:	bl	1bf0 <Mat_int32Swap>
   53530:	ldr	r0, [fp, #-32]	; 0xffffffe0
   53534:	add	r6, r0, #8
   53538:	asr	r0, r6, #31
   5353c:	add	r1, sp, #16
   53540:	add	r0, r6, r0, lsr #29
   53544:	bic	r0, r0, #7
   53548:	subs	r0, r6, r0
   5354c:	rsb	r0, r0, #8
   53550:	addne	r6, r6, r0
   53554:	mov	r0, r4
   53558:	bl	5a144 <SafeMulDims>
   5355c:	mov	sl, r0
   53560:	cmp	r0, #0
   53564:	beq	53574 <Mat_VarReadDataLinear5+0x25c>
   53568:	ldr	r0, [pc, #660]	; 53804 <Mat_VarReadDataLinear5+0x4ec>
   5356c:	add	r0, pc, r0
   53570:	bl	19b4 <Mat_Critical@plt>
   53574:	ldr	ip, [fp, #12]
   53578:	ldr	lr, [fp, #8]
   5357c:	ldr	r1, [sp, #16]
   53580:	mov	r5, #1
   53584:	sub	r0, ip, #1
   53588:	mla	r0, r0, lr, r9
   5358c:	add	r0, r0, #1
   53590:	cmp	r0, r1
   53594:	bhi	537dc <Mat_VarReadDataLinear5+0x4c4>
   53598:	ldr	r0, [r4, #48]	; 0x30
   5359c:	cmp	r0, #1
   535a0:	beq	5366c <Mat_VarReadDataLinear5+0x354>
   535a4:	cmp	r0, #0
   535a8:	bne	53784 <Mat_VarReadDataLinear5+0x46c>
   535ac:	ldr	r0, [r4, #20]
   535b0:	cmp	r0, #0
   535b4:	beq	5378c <Mat_VarReadDataLinear5+0x474>
   535b8:	ldr	r3, [r4, #8]
   535bc:	ldr	r2, [r4, #16]
   535c0:	ldr	r1, [r8]
   535c4:	mov	r0, r7
   535c8:	stm	sp, {r9, lr}
   535cc:	str	ip, [sp, #8]
   535d0:	bl	26088 <ReadDataSlab1>
   535d4:	ldr	r0, [r4, #52]	; 0x34
   535d8:	mov	r2, #0
   535dc:	ldr	r0, [r0]
   535e0:	add	r1, r0, r6
   535e4:	ldr	r0, [r7]
   535e8:	bl	1a2c <fseek@plt>
   535ec:	ldr	r3, [r7]
   535f0:	sub	r5, fp, #36	; 0x24
   535f4:	mov	r1, #4
   535f8:	mov	r2, #2
   535fc:	mov	r0, r5
   53600:	bl	18b8 <fread@plt>
   53604:	ldr	r0, [r7, #20]
   53608:	cmp	r0, #0
   5360c:	beq	53620 <Mat_VarReadDataLinear5+0x308>
   53610:	mov	r0, r5
   53614:	bl	1bf0 <Mat_int32Swap>
   53618:	add	r0, r5, #4
   5361c:	bl	1bf0 <Mat_int32Swap>
   53620:	ldr	r0, [fp, #-36]	; 0xffffffdc
   53624:	uxtb	r3, r0
   53628:	cmp	r0, #65536	; 0x10000
   5362c:	str	r3, [r4, #8]
   53630:	bcc	53648 <Mat_VarReadDataLinear5+0x330>
   53634:	ldr	r0, [r7]
   53638:	mvn	r1, #3
   5363c:	mov	r2, #1
   53640:	bl	1a2c <fseek@plt>
   53644:	ldr	r3, [r4, #8]
   53648:	ldr	r0, [fp, #8]
   5364c:	ldr	r2, [r4, #16]
   53650:	ldr	r1, [r8, #4]
   53654:	str	r9, [sp]
   53658:	str	r0, [sp, #4]
   5365c:	ldr	r0, [fp, #12]
   53660:	str	r0, [sp, #8]
   53664:	mov	r0, r7
   53668:	b	537a4 <Mat_VarReadDataLinear5+0x48c>
   5366c:	ldr	r0, [r4, #20]
   53670:	cmp	r0, #0
   53674:	beq	537b0 <Mat_VarReadDataLinear5+0x498>
   53678:	ldr	r0, [r4, #8]
   5367c:	ldr	r2, [r8]
   53680:	ldr	r3, [r4, #16]
   53684:	add	r5, sp, #20
   53688:	mov	r1, r5
   5368c:	stm	sp, {r0, r9, lr}
   53690:	mov	r0, r7
   53694:	str	ip, [sp, #12]
   53698:	bl	275a4 <ReadCompressedDataSlab1>
   5369c:	ldr	r1, [r4, #52]	; 0x34
   536a0:	ldr	r0, [r7]
   536a4:	mov	r2, #0
   536a8:	ldr	r1, [r1]
   536ac:	bl	1a2c <fseek@plt>
   536b0:	mov	r0, r5
   536b4:	bl	193c <inflateEnd@plt>
   536b8:	ldr	r0, [r4, #52]	; 0x34
   536bc:	ldr	r1, [r0, #12]
   536c0:	mov	r0, r5
   536c4:	bl	1948 <inflateCopy@plt>
   536c8:	mov	r5, r0
   536cc:	cmp	r0, #0
   536d0:	beq	536ec <Mat_VarReadDataLinear5+0x3d4>
   536d4:	mov	r0, r5
   536d8:	bl	1888 <zError@plt>
   536dc:	mov	r1, r0
   536e0:	ldr	r0, [pc, #288]	; 53808 <Mat_VarReadDataLinear5+0x4f0>
   536e4:	add	r0, pc, r0
   536e8:	bl	19b4 <Mat_Critical@plt>
   536ec:	add	sl, sp, #20
   536f0:	mov	r0, r7
   536f4:	mov	r2, r6
   536f8:	mov	r1, sl
   536fc:	bl	23b4 <InflateSkip>
   53700:	mov	r0, #0
   53704:	sub	r2, fp, #36	; 0x24
   53708:	mov	r1, sl
   5370c:	str	r0, [sp, #24]
   53710:	mov	r0, r7
   53714:	bl	31bc <InflateDataType>
   53718:	ldr	r0, [r7, #20]
   5371c:	cmp	r0, #0
   53720:	beq	5372c <Mat_VarReadDataLinear5+0x414>
   53724:	sub	r0, fp, #36	; 0x24
   53728:	bl	1bf0 <Mat_int32Swap>
   5372c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   53730:	mov	r2, #0
   53734:	uxtb	r0, r1
   53738:	cmp	r2, r1, lsr #16
   5373c:	str	r0, [r4, #8]
   53740:	bne	53758 <Mat_VarReadDataLinear5+0x440>
   53744:	add	r1, sp, #20
   53748:	mov	r0, r7
   5374c:	mov	r2, #4
   53750:	bl	23b4 <InflateSkip>
   53754:	ldr	r0, [r4, #8]
   53758:	ldr	r3, [r4, #16]
   5375c:	ldr	r2, [r8, #4]
   53760:	stm	sp, {r0, r9}
   53764:	ldr	r0, [fp, #8]
   53768:	add	r1, sp, #20
   5376c:	str	r0, [sp, #8]
   53770:	ldr	r0, [fp, #12]
   53774:	str	r0, [sp, #12]
   53778:	mov	r0, r7
   5377c:	bl	275a4 <ReadCompressedDataSlab1>
   53780:	b	537d4 <Mat_VarReadDataLinear5+0x4bc>
   53784:	mov	r5, sl
   53788:	b	537dc <Mat_VarReadDataLinear5+0x4c4>
   5378c:	ldr	r3, [r4, #8]
   53790:	ldr	r2, [r4, #16]
   53794:	mov	r0, r7
   53798:	mov	r1, r8
   5379c:	stm	sp, {r9, lr}
   537a0:	str	ip, [sp, #8]
   537a4:	bl	26088 <ReadDataSlab1>
   537a8:	mov	r5, sl
   537ac:	b	537dc <Mat_VarReadDataLinear5+0x4c4>
   537b0:	ldr	r0, [r4, #8]
   537b4:	ldr	r3, [r4, #16]
   537b8:	add	r1, sp, #20
   537bc:	mov	r2, r8
   537c0:	stm	sp, {r0, r9, lr}
   537c4:	mov	r0, r7
   537c8:	str	ip, [sp, #12]
   537cc:	bl	275a4 <ReadCompressedDataSlab1>
   537d0:	mov	r5, sl
   537d4:	add	r0, sp, #20
   537d8:	bl	193c <inflateEnd@plt>
   537dc:	ldr	r0, [r4, #16]
   537e0:	bl	5a124 <ClassType2DataType>
   537e4:	str	r0, [r4, #8]
   537e8:	ldr	r0, [r4, #16]
   537ec:	bl	1a08 <Mat_SizeOfClass@plt>
   537f0:	str	r0, [r4, #12]
   537f4:	mov	r0, r5
   537f8:	sub	sp, fp, #28
   537fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53800:	.word	0x0000c59b
   53804:	.word	0x0000c2f8
   53808:	.word	0x0000c32b

0005380c <GetDataLinear>:
   5380c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   53810:	add	fp, sp, #28
   53814:	sub	sp, sp, #4
   53818:	mov	r5, r0
   5381c:	mov	r0, r3
   53820:	mov	r7, r2
   53824:	mov	r4, r1
   53828:	bl	1924 <Mat_SizeOf@plt>
   5382c:	sub	r1, r7, #6
   53830:	cmp	r1, #9
   53834:	bhi	538bc <GetDataLinear+0xb0>
   53838:	add	r2, pc, #20
   5383c:	mov	r8, r0
   53840:	ldr	r6, [fp, #16]
   53844:	ldr	r9, [fp, #12]
   53848:	ldr	r0, [fp, #8]
   5384c:	ldr	r1, [r2, r1, lsl #2]
   53850:	add	pc, r2, r1
   53854:	.word	0x00000028
   53858:	.word	0x00000078
   5385c:	.word	0x000000b8
   53860:	.word	0x000000f4
   53864:	.word	0x00000130
   53868:	.word	0x00000170
   5386c:	.word	0x000001b0
   53870:	.word	0x000001f0
   53874:	.word	0x00000230
   53878:	.word	0x00000270
   5387c:	add	r7, r5, r0, lsl #3
   53880:	cmp	r9, #0
   53884:	beq	53b0c <GetDataLinear+0x300>
   53888:	mov	sl, #0
   5388c:	cmp	r6, #1
   53890:	blt	53b00 <GetDataLinear+0x2f4>
   53894:	lsl	r5, r9, #3
   53898:	mov	r0, r4
   5389c:	mov	r1, r7
   538a0:	mov	r2, r8
   538a4:	bl	181c <memcpy@plt>
   538a8:	add	r7, r7, r5
   538ac:	subs	r6, r6, #1
   538b0:	add	r4, r4, #8
   538b4:	bne	53898 <GetDataLinear+0x8c>
   538b8:	b	53b00 <GetDataLinear+0x2f4>
   538bc:	mov	sl, #1
   538c0:	mov	r0, sl
   538c4:	sub	sp, fp, #28
   538c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   538cc:	add	r7, r5, r0, lsl #2
   538d0:	cmp	r9, #0
   538d4:	beq	53b0c <GetDataLinear+0x300>
   538d8:	mov	sl, #0
   538dc:	cmp	r6, #1
   538e0:	blt	53b00 <GetDataLinear+0x2f4>
   538e4:	lsl	r5, r9, #2
   538e8:	mov	r0, r4
   538ec:	mov	r1, r7
   538f0:	mov	r2, r8
   538f4:	bl	181c <memcpy@plt>
   538f8:	add	r7, r7, r5
   538fc:	subs	r6, r6, #1
   53900:	add	r4, r4, #4
   53904:	bne	538e8 <GetDataLinear+0xdc>
   53908:	b	53b00 <GetDataLinear+0x2f4>
   5390c:	add	r7, r5, r0
   53910:	cmp	r9, #0
   53914:	beq	53b0c <GetDataLinear+0x300>
   53918:	mov	sl, #0
   5391c:	cmp	r6, #1
   53920:	blt	53b00 <GetDataLinear+0x2f4>
   53924:	mov	r0, r4
   53928:	mov	r1, r7
   5392c:	mov	r2, r8
   53930:	bl	181c <memcpy@plt>
   53934:	add	r7, r7, r9
   53938:	subs	r6, r6, #1
   5393c:	add	r4, r4, #1
   53940:	bne	53924 <GetDataLinear+0x118>
   53944:	b	53b00 <GetDataLinear+0x2f4>
   53948:	add	r7, r5, r0
   5394c:	cmp	r9, #0
   53950:	beq	53b0c <GetDataLinear+0x300>
   53954:	mov	sl, #0
   53958:	cmp	r6, #1
   5395c:	blt	53b00 <GetDataLinear+0x2f4>
   53960:	mov	r0, r4
   53964:	mov	r1, r7
   53968:	mov	r2, r8
   5396c:	bl	181c <memcpy@plt>
   53970:	add	r7, r7, r9
   53974:	subs	r6, r6, #1
   53978:	add	r4, r4, #1
   5397c:	bne	53960 <GetDataLinear+0x154>
   53980:	b	53b00 <GetDataLinear+0x2f4>
   53984:	add	r7, r5, r0, lsl #1
   53988:	cmp	r9, #0
   5398c:	beq	53b0c <GetDataLinear+0x300>
   53990:	mov	sl, #0
   53994:	cmp	r6, #1
   53998:	blt	53b00 <GetDataLinear+0x2f4>
   5399c:	lsl	r5, r9, #1
   539a0:	mov	r0, r4
   539a4:	mov	r1, r7
   539a8:	mov	r2, r8
   539ac:	bl	181c <memcpy@plt>
   539b0:	add	r7, r7, r5
   539b4:	subs	r6, r6, #1
   539b8:	add	r4, r4, #2
   539bc:	bne	539a0 <GetDataLinear+0x194>
   539c0:	b	53b00 <GetDataLinear+0x2f4>
   539c4:	add	r7, r5, r0, lsl #1
   539c8:	cmp	r9, #0
   539cc:	beq	53b0c <GetDataLinear+0x300>
   539d0:	mov	sl, #0
   539d4:	cmp	r6, #1
   539d8:	blt	53b00 <GetDataLinear+0x2f4>
   539dc:	lsl	r5, r9, #1
   539e0:	mov	r0, r4
   539e4:	mov	r1, r7
   539e8:	mov	r2, r8
   539ec:	bl	181c <memcpy@plt>
   539f0:	add	r7, r7, r5
   539f4:	subs	r6, r6, #1
   539f8:	add	r4, r4, #2
   539fc:	bne	539e0 <GetDataLinear+0x1d4>
   53a00:	b	53b00 <GetDataLinear+0x2f4>
   53a04:	add	r7, r5, r0, lsl #2
   53a08:	cmp	r9, #0
   53a0c:	beq	53b0c <GetDataLinear+0x300>
   53a10:	mov	sl, #0
   53a14:	cmp	r6, #1
   53a18:	blt	53b00 <GetDataLinear+0x2f4>
   53a1c:	lsl	r5, r9, #2
   53a20:	mov	r0, r4
   53a24:	mov	r1, r7
   53a28:	mov	r2, r8
   53a2c:	bl	181c <memcpy@plt>
   53a30:	add	r7, r7, r5
   53a34:	subs	r6, r6, #1
   53a38:	add	r4, r4, #4
   53a3c:	bne	53a20 <GetDataLinear+0x214>
   53a40:	b	53b00 <GetDataLinear+0x2f4>
   53a44:	add	r7, r5, r0, lsl #2
   53a48:	cmp	r9, #0
   53a4c:	beq	53b0c <GetDataLinear+0x300>
   53a50:	mov	sl, #0
   53a54:	cmp	r6, #1
   53a58:	blt	53b00 <GetDataLinear+0x2f4>
   53a5c:	lsl	r5, r9, #2
   53a60:	mov	r0, r4
   53a64:	mov	r1, r7
   53a68:	mov	r2, r8
   53a6c:	bl	181c <memcpy@plt>
   53a70:	add	r7, r7, r5
   53a74:	subs	r6, r6, #1
   53a78:	add	r4, r4, #4
   53a7c:	bne	53a60 <GetDataLinear+0x254>
   53a80:	b	53b00 <GetDataLinear+0x2f4>
   53a84:	add	r7, r5, r0, lsl #3
   53a88:	cmp	r9, #0
   53a8c:	beq	53b0c <GetDataLinear+0x300>
   53a90:	mov	sl, #0
   53a94:	cmp	r6, #1
   53a98:	blt	53b00 <GetDataLinear+0x2f4>
   53a9c:	lsl	r5, r9, #3
   53aa0:	mov	r0, r4
   53aa4:	mov	r1, r7
   53aa8:	mov	r2, r8
   53aac:	bl	181c <memcpy@plt>
   53ab0:	add	r7, r7, r5
   53ab4:	subs	r6, r6, #1
   53ab8:	add	r4, r4, #8
   53abc:	bne	53aa0 <GetDataLinear+0x294>
   53ac0:	b	53b00 <GetDataLinear+0x2f4>
   53ac4:	add	r7, r5, r0, lsl #3
   53ac8:	cmp	r9, #0
   53acc:	beq	53b0c <GetDataLinear+0x300>
   53ad0:	mov	sl, #0
   53ad4:	cmp	r6, #1
   53ad8:	blt	53b00 <GetDataLinear+0x2f4>
   53adc:	lsl	r5, r9, #3
   53ae0:	mov	r0, r4
   53ae4:	mov	r1, r7
   53ae8:	mov	r2, r8
   53aec:	bl	181c <memcpy@plt>
   53af0:	add	r7, r7, r5
   53af4:	subs	r6, r6, #1
   53af8:	add	r4, r4, #8
   53afc:	bne	53ae0 <GetDataLinear+0x2d4>
   53b00:	mov	r0, sl
   53b04:	sub	sp, fp, #28
   53b08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53b0c:	mul	r2, r8, r6
   53b10:	mov	r0, r4
   53b14:	mov	r1, r7
   53b18:	bl	181c <memcpy@plt>
   53b1c:	mov	sl, #0
   53b20:	mov	r0, sl
   53b24:	sub	sp, fp, #28
   53b28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00053b2c <Mat_VarWrite5>:
   53b2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   53b30:	add	fp, sp, #28
   53b34:	sub	sp, sp, #52	; 0x34
   53b38:	sub	sp, sp, #4096	; 0x1000
   53b3c:	mov	r4, r0
   53b40:	mov	r0, #6
   53b44:	mov	r5, r1
   53b48:	mov	r1, #14
   53b4c:	mvn	r6, #0
   53b50:	str	r0, [fp, #-40]	; 0xffffffd8
   53b54:	mov	r0, #5
   53b58:	cmp	r4, #0
   53b5c:	str	r1, [fp, #-56]	; 0xffffffc8
   53b60:	str	r0, [fp, #-44]	; 0xffffffd4
   53b64:	mov	r0, #8
   53b68:	str	r0, [fp, #-48]	; 0xffffffd0
   53b6c:	mov	r0, #0
   53b70:	str	r0, [fp, #-52]	; 0xffffffcc
   53b74:	str	r0, [fp, #-64]	; 0xffffffc0
   53b78:	beq	53ba0 <Mat_VarWrite5+0x74>
   53b7c:	ldr	r0, [r4]
   53b80:	mov	r7, r2
   53b84:	mov	r1, #0
   53b88:	mov	r2, #2
   53b8c:	bl	1a2c <fseek@plt>
   53b90:	cmp	r5, #0
   53b94:	ldrne	r0, [r5, #36]	; 0x24
   53b98:	cmpne	r0, #0
   53b9c:	bne	53bac <Mat_VarWrite5+0x80>
   53ba0:	mov	r0, r6
   53ba4:	sub	sp, fp, #28
   53ba8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53bac:	cmp	r7, #1
   53bb0:	beq	53d94 <Mat_VarWrite5+0x268>
   53bb4:	mov	r9, #0
   53bb8:	cmp	r7, #0
   53bbc:	bne	53ed0 <Mat_VarWrite5+0x3a4>
   53bc0:	ldr	r3, [r4]
   53bc4:	sub	r0, fp, #56	; 0x38
   53bc8:	mov	r1, #4
   53bcc:	mov	r2, #1
   53bd0:	bl	18ac <fwrite@plt>
   53bd4:	ldr	r3, [r4]
   53bd8:	sub	r0, fp, #52	; 0x34
   53bdc:	mov	r1, #4
   53be0:	mov	r2, #1
   53be4:	bl	18ac <fwrite@plt>
   53be8:	ldr	r0, [r4]
   53bec:	bl	1840 <ftell@plt>
   53bf0:	mov	r9, r0
   53bf4:	ldr	r0, [r5, #16]
   53bf8:	ldr	r2, [r5, #20]
   53bfc:	uxtb	r1, r0
   53c00:	cmp	r2, #0
   53c04:	str	r1, [fp, #-36]	; 0xffffffdc
   53c08:	orrne	r1, r1, #2048	; 0x800
   53c0c:	strne	r1, [fp, #-36]	; 0xffffffdc
   53c10:	ldr	r2, [r5, #24]
   53c14:	cmp	r2, #0
   53c18:	orrne	r1, r1, #1024	; 0x400
   53c1c:	strne	r1, [fp, #-36]	; 0xffffffdc
   53c20:	ldr	r2, [r5, #28]
   53c24:	cmp	r2, #0
   53c28:	mov	r2, #1
   53c2c:	orrne	r1, r1, #512	; 0x200
   53c30:	strne	r1, [fp, #-36]	; 0xffffffdc
   53c34:	cmp	r0, #5
   53c38:	mov	r1, #4
   53c3c:	ldreq	r0, [r5, #40]	; 0x28
   53c40:	ldreq	r0, [r0]
   53c44:	streq	r0, [fp, #-64]	; 0xffffffc0
   53c48:	sub	r0, fp, #40	; 0x28
   53c4c:	ldr	r3, [r4]
   53c50:	bl	18ac <fwrite@plt>
   53c54:	ldr	r3, [r4]
   53c58:	sub	r0, fp, #48	; 0x30
   53c5c:	mov	r1, #4
   53c60:	mov	r2, #1
   53c64:	bl	18ac <fwrite@plt>
   53c68:	ldr	r3, [r4]
   53c6c:	sub	r0, fp, #36	; 0x24
   53c70:	mov	r1, #4
   53c74:	mov	r2, #1
   53c78:	bl	18ac <fwrite@plt>
   53c7c:	ldr	r3, [r4]
   53c80:	sub	r0, fp, #64	; 0x40
   53c84:	mov	r1, #4
   53c88:	mov	r2, #1
   53c8c:	bl	18ac <fwrite@plt>
   53c90:	ldr	r0, [r5, #4]
   53c94:	mov	r1, #4
   53c98:	mov	r2, #1
   53c9c:	lsl	r0, r0, #2
   53ca0:	str	r0, [fp, #-60]	; 0xffffffc4
   53ca4:	sub	r0, fp, #44	; 0x2c
   53ca8:	ldr	r3, [r4]
   53cac:	bl	18ac <fwrite@plt>
   53cb0:	ldr	r3, [r4]
   53cb4:	sub	r0, fp, #60	; 0x3c
   53cb8:	mov	r1, #4
   53cbc:	mov	r2, #1
   53cc0:	bl	18ac <fwrite@plt>
   53cc4:	ldr	r0, [r5, #4]
   53cc8:	cmp	r0, #1
   53ccc:	blt	53d08 <Mat_VarWrite5+0x1dc>
   53cd0:	mov	r7, #0
   53cd4:	add	r6, sp, #2064	; 0x810
   53cd8:	ldr	r0, [r5, #32]
   53cdc:	mov	r1, #4
   53ce0:	mov	r2, #1
   53ce4:	ldr	r0, [r0, r7, lsl #2]
   53ce8:	str	r0, [sp, #2064]	; 0x810
   53cec:	mov	r0, r6
   53cf0:	ldr	r3, [r4]
   53cf4:	bl	18ac <fwrite@plt>
   53cf8:	ldr	r0, [r5, #4]
   53cfc:	add	r7, r7, #1
   53d00:	cmp	r7, r0
   53d04:	blt	53cd8 <Mat_VarWrite5+0x1ac>
   53d08:	tst	r0, #1
   53d0c:	beq	53d24 <Mat_VarWrite5+0x1f8>
   53d10:	ldr	r3, [r4]
   53d14:	sub	r0, fp, #52	; 0x34
   53d18:	mov	r1, #4
   53d1c:	mov	r2, #1
   53d20:	bl	18ac <fwrite@plt>
   53d24:	ldr	r0, [r5, #36]	; 0x24
   53d28:	bl	1954 <strlen@plt>
   53d2c:	mov	r6, r0
   53d30:	cmp	r0, #4
   53d34:	bhi	53e0c <Mat_VarWrite5+0x2e0>
   53d38:	mov	r0, #1
   53d3c:	mov	r1, #4
   53d40:	mov	r2, #1
   53d44:	orr	r0, r0, r6, lsl #16
   53d48:	str	r0, [sp, #2064]	; 0x810
   53d4c:	add	r0, sp, #2064	; 0x810
   53d50:	ldr	r3, [r4]
   53d54:	bl	18ac <fwrite@plt>
   53d58:	ldr	r0, [r5, #36]	; 0x24
   53d5c:	ldr	r3, [r4]
   53d60:	mov	r1, #1
   53d64:	mov	r2, r6
   53d68:	bl	18ac <fwrite@plt>
   53d6c:	cmp	r6, #4
   53d70:	beq	53e88 <Mat_VarWrite5+0x35c>
   53d74:	sub	r6, r6, #1
   53d78:	ldr	r1, [r4]
   53d7c:	mov	r0, #0
   53d80:	bl	19e4 <fputc@plt>
   53d84:	add	r6, r6, #1
   53d88:	cmp	r6, #3
   53d8c:	blt	53d78 <Mat_VarWrite5+0x24c>
   53d90:	b	53e88 <Mat_VarWrite5+0x35c>
   53d94:	add	r9, sp, #16
   53d98:	mov	r1, #0
   53d9c:	mov	r2, #2048	; 0x800
   53da0:	mov	r0, r9
   53da4:	bl	1990 <memset@plt>
   53da8:	mov	r0, #1
   53dac:	mov	r1, #56	; 0x38
   53db0:	bl	1798 <calloc@plt>
   53db4:	cmp	r0, #0
   53db8:	beq	53ba0 <Mat_VarWrite5+0x74>
   53dbc:	ldr	r2, [pc, #1460]	; 54378 <Mat_VarWrite5+0x84c>
   53dc0:	mvn	r1, #0
   53dc4:	mov	r3, #56	; 0x38
   53dc8:	mov	r7, r0
   53dcc:	add	r2, pc, r2
   53dd0:	bl	18dc <deflateInit_@plt>
   53dd4:	cmp	r0, #0
   53dd8:	beq	53f54 <Mat_VarWrite5+0x428>
   53ddc:	mov	r8, r0
   53de0:	mov	r0, r7
   53de4:	bl	1804 <free@plt>
   53de8:	mov	r0, r8
   53dec:	bl	1888 <zError@plt>
   53df0:	mov	r1, r0
   53df4:	ldr	r0, [pc, #1408]	; 5437c <Mat_VarWrite5+0x850>
   53df8:	add	r0, pc, r0
   53dfc:	bl	19b4 <Mat_Critical@plt>
   53e00:	mov	r0, r6
   53e04:	sub	sp, fp, #28
   53e08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53e0c:	mov	r0, #1
   53e10:	str	r6, [sp, #16]
   53e14:	mov	r1, #4
   53e18:	mov	r2, #1
   53e1c:	str	r0, [sp, #2064]	; 0x810
   53e20:	add	r0, sp, #2064	; 0x810
   53e24:	ldr	r3, [r4]
   53e28:	bl	18ac <fwrite@plt>
   53e2c:	ldr	r3, [r4]
   53e30:	add	r0, sp, #16
   53e34:	mov	r1, #4
   53e38:	mov	r2, #1
   53e3c:	bl	18ac <fwrite@plt>
   53e40:	ldr	r6, [sp, #16]
   53e44:	ldr	r0, [r5, #36]	; 0x24
   53e48:	ldr	r3, [r4]
   53e4c:	mov	r1, #1
   53e50:	mov	r2, r6
   53e54:	bl	18ac <fwrite@plt>
   53e58:	asr	r0, r6, #31
   53e5c:	add	r0, r6, r0, lsr #29
   53e60:	bic	r0, r0, #7
   53e64:	subs	r0, r6, r0
   53e68:	beq	53e88 <Mat_VarWrite5+0x35c>
   53e6c:	sub	r6, r0, #1
   53e70:	ldr	r1, [r4]
   53e74:	mov	r0, #0
   53e78:	bl	19e4 <fputc@plt>
   53e7c:	add	r6, r6, #1
   53e80:	cmp	r6, #7
   53e84:	blt	53e70 <Mat_VarWrite5+0x344>
   53e88:	ldr	r0, [r5, #52]	; 0x34
   53e8c:	cmp	r0, #0
   53e90:	beq	53ebc <Mat_VarWrite5+0x390>
   53e94:	ldr	r0, [r4]
   53e98:	bl	1840 <ftell@plt>
   53e9c:	ldr	r1, [r5, #52]	; 0x34
   53ea0:	cmn	r0, #1
   53ea4:	str	r0, [r1]
   53ea8:	bne	53ec4 <Mat_VarWrite5+0x398>
   53eac:	ldr	r0, [pc, #1216]	; 54374 <Mat_VarWrite5+0x848>
   53eb0:	add	r0, pc, r0
   53eb4:	bl	19b4 <Mat_Critical@plt>
   53eb8:	b	53ec4 <Mat_VarWrite5+0x398>
   53ebc:	mov	r0, #0
   53ec0:	str	r0, [r5, #16]
   53ec4:	mov	r0, r4
   53ec8:	mov	r1, r5
   53ecc:	bl	54388 <WriteType>
   53ed0:	ldr	r0, [r4]
   53ed4:	bl	1840 <ftell@plt>
   53ed8:	cmn	r9, #1
   53edc:	movne	r5, r0
   53ee0:	cmnne	r0, #1
   53ee4:	bne	53f04 <Mat_VarWrite5+0x3d8>
   53ee8:	ldr	r0, [pc, #1172]	; 54384 <Mat_VarWrite5+0x858>
   53eec:	add	r0, pc, r0
   53ef0:	bl	19b4 <Mat_Critical@plt>
   53ef4:	mov	r6, #0
   53ef8:	mov	r0, r6
   53efc:	sub	sp, fp, #28
   53f00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53f04:	sub	r0, r5, r9
   53f08:	mvn	r1, #3
   53f0c:	mov	r2, #1
   53f10:	str	r0, [fp, #-60]	; 0xffffffc4
   53f14:	sub	r1, r1, r0
   53f18:	ldr	r0, [r4]
   53f1c:	bl	1a2c <fseek@plt>
   53f20:	ldr	r3, [r4]
   53f24:	sub	r0, fp, #60	; 0x3c
   53f28:	mov	r1, #4
   53f2c:	mov	r2, #1
   53f30:	bl	18ac <fwrite@plt>
   53f34:	ldr	r0, [r4]
   53f38:	mov	r1, r5
   53f3c:	mov	r2, #0
   53f40:	mov	r6, #0
   53f44:	bl	1a2c <fseek@plt>
   53f48:	mov	r0, r6
   53f4c:	sub	sp, fp, #28
   53f50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   53f54:	mov	r0, #15
   53f58:	mov	r1, #4
   53f5c:	mov	r2, #1
   53f60:	str	r0, [fp, #-56]	; 0xffffffc8
   53f64:	sub	r0, fp, #56	; 0x38
   53f68:	ldr	r3, [r4]
   53f6c:	bl	18ac <fwrite@plt>
   53f70:	ldr	r3, [r4]
   53f74:	sub	r0, fp, #52	; 0x34
   53f78:	mov	r1, #4
   53f7c:	mov	r2, #1
   53f80:	bl	18ac <fwrite@plt>
   53f84:	ldr	r0, [r4]
   53f88:	bl	1840 <ftell@plt>
   53f8c:	mov	r2, r0
   53f90:	ldr	r0, [r5, #16]
   53f94:	ldr	r1, [r5, #20]
   53f98:	mov	r6, #24
   53f9c:	str	r2, [sp, #8]
   53fa0:	uxtb	r8, r0
   53fa4:	cmp	r1, #0
   53fa8:	str	r8, [fp, #-36]	; 0xffffffdc
   53fac:	orrne	r8, r8, #2048	; 0x800
   53fb0:	strne	r8, [fp, #-36]	; 0xffffffdc
   53fb4:	ldr	r1, [r5, #24]
   53fb8:	cmp	r1, #0
   53fbc:	orrne	r8, r8, #1024	; 0x400
   53fc0:	strne	r8, [fp, #-36]	; 0xffffffdc
   53fc4:	ldr	r1, [r5, #28]
   53fc8:	cmp	r1, #0
   53fcc:	mov	r1, #0
   53fd0:	orrne	r8, r8, #512	; 0x200
   53fd4:	strne	r8, [fp, #-36]	; 0xffffffdc
   53fd8:	cmp	r0, #5
   53fdc:	ldreq	r0, [r5, #40]	; 0x28
   53fe0:	ldreq	r1, [r0]
   53fe4:	mov	r0, #14
   53fe8:	str	r0, [sp, #16]
   53fec:	streq	r1, [fp, #-64]	; 0xffffffc0
   53ff0:	str	r1, [sp, #12]
   53ff4:	ldr	r0, [r5, #36]	; 0x24
   53ff8:	cmp	r0, #0
   53ffc:	beq	5401c <Mat_VarWrite5+0x4f0>
   54000:	bl	1954 <strlen@plt>
   54004:	cmp	r0, #5
   54008:	bcc	5401c <Mat_VarWrite5+0x4f0>
   5400c:	ands	r1, r0, #7
   54010:	rsb	r1, r1, #8
   54014:	addne	r0, r0, r1
   54018:	add	r6, r0, #24
   5401c:	mov	r0, r5
   54020:	bl	58410 <GetTypeBufSize>
   54024:	add	r0, r0, r6
   54028:	str	r9, [r7]
   5402c:	mov	sl, #2048	; 0x800
   54030:	add	r6, sp, #2064	; 0x810
   54034:	str	r0, [sp, #20]
   54038:	mov	r0, #8
   5403c:	str	r0, [r7, #4]
   54040:	orr	r0, r9, #4
   54044:	str	r0, [sp, #4]
   54048:	mov	r0, r7
   5404c:	mov	r1, #0
   54050:	str	r6, [r7, #12]
   54054:	str	sl, [r7, #16]
   54058:	bl	1894 <deflate@plt>
   5405c:	ldr	r0, [r7, #16]
   54060:	ldr	r3, [r4]
   54064:	mov	r1, #1
   54068:	rsb	r2, r0, #2048	; 0x800
   5406c:	mov	r0, r6
   54070:	bl	18ac <fwrite@plt>
   54074:	ldr	r0, [r7, #16]
   54078:	cmp	r0, #0
   5407c:	beq	54048 <Mat_VarWrite5+0x51c>
   54080:	mov	r0, #8
   54084:	str	r0, [sp, #20]
   54088:	mov	r0, #6
   5408c:	str	r0, [sp, #16]
   54090:	ldr	r0, [sp, #12]
   54094:	str	r8, [sp, #24]
   54098:	str	r0, [sp, #28]
   5409c:	mov	r0, #5
   540a0:	ldr	lr, [r5, #4]
   540a4:	str	r0, [sp, #32]
   540a8:	lsl	r0, lr, #2
   540ac:	cmp	lr, #1
   540b0:	str	r0, [fp, #-60]	; 0xffffffc4
   540b4:	str	r0, [sp, #36]	; 0x24
   540b8:	blt	54130 <Mat_VarWrite5+0x604>
   540bc:	ldr	ip, [r5, #32]
   540c0:	mov	r2, #0
   540c4:	cmp	lr, #4
   540c8:	bcc	54110 <Mat_VarWrite5+0x5e4>
   540cc:	add	r0, ip, lr, lsl #2
   540d0:	add	r3, r9, #24
   540d4:	cmp	r3, r0
   540d8:	addcc	r0, r9, lr, lsl #2
   540dc:	addcc	r0, r0, #24
   540e0:	cmpcc	ip, r0
   540e4:	bcc	54110 <Mat_VarWrite5+0x5e4>
   540e8:	bic	r2, lr, #3
   540ec:	mov	r0, ip
   540f0:	mov	r1, r2
   540f4:	vld1.32	{d16-d17}, [r0]!
   540f8:	subs	r1, r1, #4
   540fc:	vst1.32	{d16-d17}, [r3]!
   54100:	bne	540f4 <Mat_VarWrite5+0x5c8>
   54104:	cmp	lr, r2
   54108:	mov	r3, lr
   5410c:	beq	54134 <Mat_VarWrite5+0x608>
   54110:	ldr	r0, [ip, r2, lsl #2]
   54114:	add	r1, r9, r2, lsl #2
   54118:	add	r2, r2, #1
   5411c:	cmp	lr, r2
   54120:	str	r0, [r1, #24]
   54124:	bne	54110 <Mat_VarWrite5+0x5e4>
   54128:	mov	r3, lr
   5412c:	b	54134 <Mat_VarWrite5+0x608>
   54130:	mov	r3, #0
   54134:	tst	lr, #1
   54138:	mov	r8, #2048	; 0x800
   5413c:	ldrne	r1, [fp, #-52]	; 0xffffffcc
   54140:	addne	r0, r9, r3, lsl #2
   54144:	addne	r3, r3, #1
   54148:	strne	r1, [r0, #24]
   5414c:	mov	r0, #24
   54150:	mov	r1, r9
   54154:	add	r9, r9, #8
   54158:	add	r0, r0, r3, lsl #2
   5415c:	str	r1, [r7]
   54160:	str	r0, [r7, #4]
   54164:	mov	r0, r7
   54168:	mov	r1, #0
   5416c:	str	r6, [r7, #12]
   54170:	str	r8, [r7, #16]
   54174:	bl	1894 <deflate@plt>
   54178:	ldr	r0, [r7, #16]
   5417c:	ldr	r3, [r4]
   54180:	mov	r1, #1
   54184:	rsb	r2, r0, #2048	; 0x800
   54188:	mov	r0, r6
   5418c:	bl	18ac <fwrite@plt>
   54190:	ldr	r0, [r7, #16]
   54194:	cmp	r0, #0
   54198:	beq	54164 <Mat_VarWrite5+0x638>
   5419c:	ldr	r8, [r5, #36]	; 0x24
   541a0:	mov	r0, r8
   541a4:	bl	1954 <strlen@plt>
   541a8:	mov	sl, r0
   541ac:	cmp	r0, #4
   541b0:	bhi	5422c <Mat_VarWrite5+0x700>
   541b4:	mov	r0, #0
   541b8:	sxth	r2, sl
   541bc:	mov	r1, r8
   541c0:	str	r0, [sp, #20]
   541c4:	mov	r0, #1
   541c8:	orr	r0, r0, sl, lsl #16
   541cc:	str	r0, [sp, #16]
   541d0:	ldr	r0, [sp, #4]
   541d4:	bl	181c <memcpy@plt>
   541d8:	ldr	r9, [sp, #8]
   541dc:	add	r1, sp, #16
   541e0:	mov	r8, #2048	; 0x800
   541e4:	mov	r0, #8
   541e8:	str	r1, [r7]
   541ec:	str	r0, [r7, #4]
   541f0:	mov	r0, r7
   541f4:	mov	r1, #0
   541f8:	str	r6, [r7, #12]
   541fc:	str	r8, [r7, #16]
   54200:	bl	1894 <deflate@plt>
   54204:	ldr	r0, [r7, #16]
   54208:	ldr	r3, [r4]
   5420c:	mov	r1, #1
   54210:	rsb	r2, r0, #2048	; 0x800
   54214:	mov	r0, r6
   54218:	bl	18ac <fwrite@plt>
   5421c:	ldr	r0, [r7, #16]
   54220:	cmp	r0, #0
   54224:	beq	541f0 <Mat_VarWrite5+0x6c4>
   54228:	b	542c0 <Mat_VarWrite5+0x794>
   5422c:	mov	r0, r9
   54230:	mov	r1, #0
   54234:	movw	r2, #2040	; 0x7f8
   54238:	bl	1990 <memset@plt>
   5423c:	mov	r0, #1
   54240:	mov	r1, r8
   54244:	mov	r2, sl
   54248:	str	r0, [sp, #16]
   5424c:	mov	r0, r9
   54250:	str	sl, [sp, #20]
   54254:	bl	181c <memcpy@plt>
   54258:	asr	r0, sl, #31
   5425c:	ldr	r9, [sp, #8]
   54260:	add	r1, sp, #16
   54264:	mov	r8, #2048	; 0x800
   54268:	add	r0, sl, r0, lsr #29
   5426c:	str	r1, [r7]
   54270:	bic	r0, r0, #7
   54274:	subs	r0, sl, r0
   54278:	rsb	r0, r0, #8
   5427c:	addne	sl, sl, r0
   54280:	add	r0, sl, #8
   54284:	str	r0, [r7, #4]
   54288:	mov	r0, r7
   5428c:	mov	r1, #0
   54290:	str	r6, [r7, #12]
   54294:	str	r8, [r7, #16]
   54298:	bl	1894 <deflate@plt>
   5429c:	ldr	r0, [r7, #16]
   542a0:	ldr	r3, [r4]
   542a4:	mov	r1, #1
   542a8:	rsb	r2, r0, #2048	; 0x800
   542ac:	mov	r0, r6
   542b0:	bl	18ac <fwrite@plt>
   542b4:	ldr	r0, [r7, #16]
   542b8:	cmp	r0, #0
   542bc:	beq	54288 <Mat_VarWrite5+0x75c>
   542c0:	ldr	r0, [r5, #52]	; 0x34
   542c4:	cmp	r0, #0
   542c8:	beq	542f4 <Mat_VarWrite5+0x7c8>
   542cc:	ldr	r0, [r4]
   542d0:	bl	1840 <ftell@plt>
   542d4:	ldr	r1, [r5, #52]	; 0x34
   542d8:	cmn	r0, #1
   542dc:	str	r0, [r1]
   542e0:	bne	542fc <Mat_VarWrite5+0x7d0>
   542e4:	ldr	r0, [pc, #148]	; 54380 <Mat_VarWrite5+0x854>
   542e8:	add	r0, pc, r0
   542ec:	bl	19b4 <Mat_Critical@plt>
   542f0:	b	542fc <Mat_VarWrite5+0x7d0>
   542f4:	mov	r0, #0
   542f8:	str	r0, [r5, #16]
   542fc:	mov	r0, r4
   54300:	mov	r1, r5
   54304:	mov	r2, r7
   54308:	bl	557a0 <WriteCompressedType>
   5430c:	mov	r0, #0
   54310:	mov	r8, #2048	; 0x800
   54314:	str	r0, [r7]
   54318:	str	r0, [r7, #4]
   5431c:	mov	r0, r7
   54320:	mov	r1, #4
   54324:	str	r6, [r7, #12]
   54328:	str	r8, [r7, #16]
   5432c:	bl	1894 <deflate@plt>
   54330:	mov	r5, r0
   54334:	ldr	r0, [r7, #16]
   54338:	ldr	r3, [r4]
   5433c:	mov	r1, #1
   54340:	rsb	r2, r0, #2048	; 0x800
   54344:	mov	r0, r6
   54348:	bl	18ac <fwrite@plt>
   5434c:	cmp	r5, #1
   54350:	beq	54360 <Mat_VarWrite5+0x834>
   54354:	ldr	r0, [r7, #16]
   54358:	cmp	r0, #0
   5435c:	beq	5431c <Mat_VarWrite5+0x7f0>
   54360:	mov	r0, r7
   54364:	bl	19c0 <deflateEnd@plt>
   54368:	mov	r0, r7
   5436c:	bl	1804 <free@plt>
   54370:	b	53ed0 <Mat_VarWrite5+0x3a4>
   54374:	.word	0x0000b928
   54378:	.word	0x0000bc61
   5437c:	.word	0x0000bc3c
   54380:	.word	0x0000b4f0
   54384:	.word	0x0000b8ec

00054388 <WriteType>:
   54388:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5438c:	add	fp, sp, #28
   54390:	sub	sp, sp, #108	; 0x6c
   54394:	mov	r7, r1
   54398:	mov	r4, r0
   5439c:	mov	r0, #1
   543a0:	add	r1, sp, #28
   543a4:	strh	r0, [sp, #38]	; 0x26
   543a8:	str	r0, [sp, #28]
   543ac:	mov	r0, r7
   543b0:	bl	5a144 <SafeMulDims>
   543b4:	ldr	r0, [r7, #16]
   543b8:	sub	r1, r0, #6
   543bc:	cmp	r1, #10
   543c0:	bcs	54560 <WriteType+0x1d8>
   543c4:	ldr	r0, [r7, #20]
   543c8:	ldr	r6, [r7, #40]	; 0x28
   543cc:	cmp	r0, #0
   543d0:	beq	545d0 <WriteType+0x248>
   543d4:	ldr	r5, [pc, #3556]	; 551c0 <WriteType+0xe38>
   543d8:	ldr	r0, [r7, #8]
   543dc:	cmp	r6, #0
   543e0:	mov	r1, #0
   543e4:	add	r5, pc, r5
   543e8:	movne	r5, r6
   543ec:	cmp	r4, #0
   543f0:	ldr	r6, [sp, #28]
   543f4:	ldr	r8, [r5]
   543f8:	str	r0, [fp, #-32]	; 0xffffffe0
   543fc:	str	r1, [fp, #-36]	; 0xffffffdc
   54400:	ldrne	r2, [r4]
   54404:	cmpne	r2, #0
   54408:	beq	5446c <WriteType+0xe4>
   5440c:	bl	1924 <Mat_SizeOf@plt>
   54410:	mov	r9, r0
   54414:	mul	r0, r0, r6
   54418:	mov	r1, #4
   5441c:	mov	r2, #1
   54420:	str	r0, [fp, #-36]	; 0xffffffdc
   54424:	sub	r0, fp, #32
   54428:	ldr	r3, [r4]
   5442c:	bl	18ac <fwrite@plt>
   54430:	ldr	r3, [r4]
   54434:	sub	r0, fp, #36	; 0x24
   54438:	mov	r1, #4
   5443c:	mov	r2, #1
   54440:	bl	18ac <fwrite@plt>
   54444:	cmp	r8, #0
   54448:	beq	54468 <WriteType+0xe0>
   5444c:	cmp	r6, #1
   54450:	blt	54468 <WriteType+0xe0>
   54454:	ldr	r3, [r4]
   54458:	mov	r0, r8
   5445c:	mov	r1, r9
   54460:	mov	r2, r6
   54464:	bl	18ac <fwrite@plt>
   54468:	ldr	r1, [fp, #-36]	; 0xffffffdc
   5446c:	asr	r0, r1, #31
   54470:	str	r1, [sp, #32]
   54474:	add	r0, r1, r0, lsr #29
   54478:	bic	r0, r0, #7
   5447c:	subs	r0, r1, r0
   54480:	beq	544a0 <WriteType+0x118>
   54484:	sub	r6, r0, #1
   54488:	ldr	r1, [r4]
   5448c:	mov	r0, #0
   54490:	bl	19e4 <fputc@plt>
   54494:	add	r6, r6, #1
   54498:	cmp	r6, #7
   5449c:	blt	54488 <WriteType+0x100>
   544a0:	ldr	r0, [r7, #8]
   544a4:	mov	r1, #0
   544a8:	ldr	r6, [r5, #4]
   544ac:	cmp	r4, #0
   544b0:	ldr	r5, [sp, #28]
   544b4:	str	r1, [fp, #-36]	; 0xffffffdc
   544b8:	str	r0, [fp, #-32]	; 0xffffffe0
   544bc:	ldrne	r2, [r4]
   544c0:	cmpne	r2, #0
   544c4:	beq	54528 <WriteType+0x1a0>
   544c8:	bl	1924 <Mat_SizeOf@plt>
   544cc:	mov	r7, r0
   544d0:	mul	r0, r0, r5
   544d4:	mov	r1, #4
   544d8:	mov	r2, #1
   544dc:	str	r0, [fp, #-36]	; 0xffffffdc
   544e0:	sub	r0, fp, #32
   544e4:	ldr	r3, [r4]
   544e8:	bl	18ac <fwrite@plt>
   544ec:	ldr	r3, [r4]
   544f0:	sub	r0, fp, #36	; 0x24
   544f4:	mov	r1, #4
   544f8:	mov	r2, #1
   544fc:	bl	18ac <fwrite@plt>
   54500:	cmp	r6, #0
   54504:	beq	54524 <WriteType+0x19c>
   54508:	cmp	r5, #1
   5450c:	blt	54524 <WriteType+0x19c>
   54510:	ldr	r3, [r4]
   54514:	mov	r0, r6
   54518:	mov	r1, r7
   5451c:	mov	r2, r5
   54520:	bl	18ac <fwrite@plt>
   54524:	ldr	r1, [fp, #-36]	; 0xffffffdc
   54528:	asr	r0, r1, #31
   5452c:	str	r1, [sp, #32]
   54530:	add	r0, r1, r0, lsr #29
   54534:	bic	r0, r0, #7
   54538:	subs	r0, r1, r0
   5453c:	beq	54688 <WriteType+0x300>
   54540:	sub	r5, r0, #1
   54544:	ldr	r1, [r4]
   54548:	mov	r0, #0
   5454c:	bl	19e4 <fputc@plt>
   54550:	add	r5, r5, #1
   54554:	cmp	r5, #7
   54558:	blt	54544 <WriteType+0x1bc>
   5455c:	b	54688 <WriteType+0x300>
   54560:	sub	r0, r0, #1
   54564:	cmp	r0, #4
   54568:	bhi	54688 <WriteType+0x300>
   5456c:	add	r1, pc, #4
   54570:	ldr	r0, [r1, r0, lsl #2]
   54574:	add	pc, r1, r0
   54578:	.word	0x00000014
   5457c:	.word	0x000004c4
   54580:	.word	0x00000110
   54584:	.word	0x00000b30
   54588:	.word	0x00000c4c
   5458c:	ldr	r0, [r7]
   54590:	cmp	r0, #0
   54594:	beq	54688 <WriteType+0x300>
   54598:	ldr	r6, [r7, #40]	; 0x28
   5459c:	cmp	r6, #0
   545a0:	ldrne	r1, [r7, #12]
   545a4:	cmpne	r1, #0
   545a8:	beq	54688 <WriteType+0x300>
   545ac:	udiv	r2, r0, r1
   545b0:	cmp	r1, r0
   545b4:	str	r2, [sp, #28]
   545b8:	bhi	54688 <WriteType+0x300>
   545bc:	mov	r7, #0
   545c0:	mov	r5, #1
   545c4:	sub	sl, fp, #64	; 0x40
   545c8:	mov	r9, #0
   545cc:	b	549ec <WriteType+0x664>
   545d0:	ldr	r0, [r7, #8]
   545d4:	mov	r1, #0
   545d8:	cmp	r4, #0
   545dc:	ldr	r5, [sp, #28]
   545e0:	str	r1, [fp, #-36]	; 0xffffffdc
   545e4:	str	r0, [fp, #-32]	; 0xffffffe0
   545e8:	ldrne	r2, [r4]
   545ec:	cmpne	r2, #0
   545f0:	beq	54654 <WriteType+0x2cc>
   545f4:	bl	1924 <Mat_SizeOf@plt>
   545f8:	mov	r7, r0
   545fc:	mul	r0, r0, r5
   54600:	mov	r1, #4
   54604:	mov	r2, #1
   54608:	str	r0, [fp, #-36]	; 0xffffffdc
   5460c:	sub	r0, fp, #32
   54610:	ldr	r3, [r4]
   54614:	bl	18ac <fwrite@plt>
   54618:	ldr	r3, [r4]
   5461c:	sub	r0, fp, #36	; 0x24
   54620:	mov	r1, #4
   54624:	mov	r2, #1
   54628:	bl	18ac <fwrite@plt>
   5462c:	cmp	r6, #0
   54630:	beq	54650 <WriteType+0x2c8>
   54634:	cmp	r5, #1
   54638:	blt	54650 <WriteType+0x2c8>
   5463c:	ldr	r3, [r4]
   54640:	mov	r0, r6
   54644:	mov	r1, r7
   54648:	mov	r2, r5
   5464c:	bl	18ac <fwrite@plt>
   54650:	ldr	r1, [fp, #-36]	; 0xffffffdc
   54654:	asr	r0, r1, #31
   54658:	str	r1, [sp, #32]
   5465c:	add	r0, r1, r0, lsr #29
   54660:	bic	r0, r0, #7
   54664:	subs	r0, r1, r0
   54668:	beq	54688 <WriteType+0x300>
   5466c:	sub	r5, r0, #1
   54670:	ldr	r1, [r4]
   54674:	mov	r0, #0
   54678:	bl	19e4 <fputc@plt>
   5467c:	add	r5, r5, #1
   54680:	cmp	r5, #7
   54684:	blt	54670 <WriteType+0x2e8>
   54688:	sub	sp, fp, #28
   5468c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   54690:	ldr	r3, [r4]
   54694:	sub	r0, fp, #52	; 0x34
   54698:	mov	r1, #4
   5469c:	mov	r2, #1
   546a0:	bl	18ac <fwrite@plt>
   546a4:	ldr	r3, [r4]
   546a8:	sub	r0, fp, #48	; 0x30
   546ac:	mov	r1, #4
   546b0:	mov	r2, #1
   546b4:	bl	18ac <fwrite@plt>
   546b8:	ldr	r0, [r8, #16]
   546bc:	cmp	r0, #0
   546c0:	beq	54a28 <WriteType+0x6a0>
   546c4:	ldr	r0, [r4]
   546c8:	bl	1840 <ftell@plt>
   546cc:	str	r0, [sp, #12]
   546d0:	ldr	r0, [r8, #16]
   546d4:	sub	r5, fp, #32
   546d8:	uxtb	r1, r0
   546dc:	str	r1, [fp, #-32]	; 0xffffffe0
   546e0:	ldr	r2, [r8, #20]
   546e4:	cmp	r2, #0
   546e8:	orrne	r1, r1, #2048	; 0x800
   546ec:	strne	r1, [fp, #-32]	; 0xffffffe0
   546f0:	ldr	r2, [r8, #24]
   546f4:	cmp	r2, #0
   546f8:	orrne	r1, r1, #1024	; 0x400
   546fc:	strne	r1, [fp, #-32]	; 0xffffffe0
   54700:	ldr	r2, [r8, #28]
   54704:	cmp	r2, #0
   54708:	orrne	r1, r1, #512	; 0x200
   5470c:	strne	r1, [fp, #-32]	; 0xffffffe0
   54710:	cmp	r0, #5
   54714:	ldreq	r0, [r8, #40]	; 0x28
   54718:	ldreq	r0, [r0]
   5471c:	streq	r0, [fp, #-60]	; 0xffffffc4
   54720:	ldr	r0, [r4, #20]
   54724:	cmp	r0, #0
   54728:	beq	54738 <WriteType+0x3b0>
   5472c:	mov	r0, r5
   54730:	bl	1bf0 <Mat_int32Swap>
   54734:	str	r0, [fp, #-32]	; 0xffffffe0
   54738:	ldr	r3, [r4]
   5473c:	sub	r0, fp, #36	; 0x24
   54740:	mov	r1, #4
   54744:	mov	r2, #1
   54748:	bl	18ac <fwrite@plt>
   5474c:	ldr	r3, [r4]
   54750:	sub	r0, fp, #44	; 0x2c
   54754:	mov	r1, #4
   54758:	mov	r2, #1
   5475c:	bl	18ac <fwrite@plt>
   54760:	ldr	r3, [r4]
   54764:	mov	r0, r5
   54768:	mov	r1, #4
   5476c:	mov	r2, #1
   54770:	bl	18ac <fwrite@plt>
   54774:	ldr	r3, [r4]
   54778:	sub	r0, fp, #60	; 0x3c
   5477c:	mov	r1, #4
   54780:	mov	r2, #1
   54784:	bl	18ac <fwrite@plt>
   54788:	ldr	r0, [r8, #4]
   5478c:	mov	r1, #4
   54790:	mov	r2, #1
   54794:	lsl	r0, r0, #2
   54798:	str	r0, [fp, #-56]	; 0xffffffc8
   5479c:	sub	r0, fp, #40	; 0x28
   547a0:	ldr	r3, [r4]
   547a4:	bl	18ac <fwrite@plt>
   547a8:	ldr	r3, [r4]
   547ac:	sub	r0, fp, #56	; 0x38
   547b0:	mov	r1, #4
   547b4:	mov	r2, #1
   547b8:	bl	18ac <fwrite@plt>
   547bc:	ldr	r0, [r8, #4]
   547c0:	cmp	r0, #1
   547c4:	blt	547fc <WriteType+0x474>
   547c8:	mov	r5, #0
   547cc:	ldr	r0, [r8, #32]
   547d0:	mov	r1, #4
   547d4:	mov	r2, #1
   547d8:	ldr	r0, [r0, r5, lsl #2]
   547dc:	str	r0, [fp, #-64]	; 0xffffffc0
   547e0:	mov	r0, sl
   547e4:	ldr	r3, [r4]
   547e8:	bl	18ac <fwrite@plt>
   547ec:	ldr	r0, [r8, #4]
   547f0:	add	r5, r5, #1
   547f4:	cmp	r5, r0
   547f8:	blt	547cc <WriteType+0x444>
   547fc:	tst	r0, #1
   54800:	beq	54818 <WriteType+0x490>
   54804:	ldr	r3, [r4]
   54808:	sub	r0, fp, #48	; 0x30
   5480c:	mov	r1, #4
   54810:	mov	r2, #1
   54814:	bl	18ac <fwrite@plt>
   54818:	ldr	r0, [r8, #36]	; 0x24
   5481c:	cmp	r0, #0
   54820:	beq	5489c <WriteType+0x514>
   54824:	bl	1954 <strlen@plt>
   54828:	cmp	r0, #4
   5482c:	bhi	548e0 <WriteType+0x558>
   54830:	strh	r0, [fp, #-64]	; 0xffffffc0
   54834:	add	r0, sp, #68	; 0x44
   54838:	mov	r1, #2
   5483c:	mov	r2, #1
   54840:	ldr	r3, [r4]
   54844:	bl	18ac <fwrite@plt>
   54848:	ldr	r3, [r4]
   5484c:	mov	r0, sl
   54850:	mov	r1, #2
   54854:	mov	r2, #1
   54858:	bl	18ac <fwrite@plt>
   5485c:	ldrsh	r5, [fp, #-64]	; 0xffffffc0
   54860:	ldr	r0, [r8, #36]	; 0x24
   54864:	ldr	r3, [r4]
   54868:	mov	r1, #1
   5486c:	mov	r2, r5
   54870:	bl	18ac <fwrite@plt>
   54874:	cmp	r5, #3
   54878:	bgt	5496c <WriteType+0x5e4>
   5487c:	sub	r5, r5, #1
   54880:	ldr	r1, [r4]
   54884:	mov	r0, #0
   54888:	bl	19e4 <fputc@plt>
   5488c:	add	r5, r5, #1
   54890:	cmp	r5, #3
   54894:	blt	54880 <WriteType+0x4f8>
   54898:	b	5496c <WriteType+0x5e4>
   5489c:	ldr	r3, [r4]
   548a0:	add	r0, sp, #68	; 0x44
   548a4:	mov	r1, #2
   548a8:	mov	r2, #1
   548ac:	bl	18ac <fwrite@plt>
   548b0:	ldr	r1, [r4]
   548b4:	mov	r0, #0
   548b8:	bl	19e4 <fputc@plt>
   548bc:	ldr	r1, [r4]
   548c0:	mov	r0, #0
   548c4:	bl	19e4 <fputc@plt>
   548c8:	ldr	r3, [r4]
   548cc:	sub	r0, fp, #48	; 0x30
   548d0:	mov	r1, #4
   548d4:	mov	r2, #1
   548d8:	bl	18ac <fwrite@plt>
   548dc:	b	5496c <WriteType+0x5e4>
   548e0:	str	r0, [fp, #-64]	; 0xffffffc0
   548e4:	add	r0, sp, #68	; 0x44
   548e8:	mov	r1, #2
   548ec:	mov	r2, #1
   548f0:	ldr	r3, [r4]
   548f4:	bl	18ac <fwrite@plt>
   548f8:	ldr	r1, [r4]
   548fc:	mov	r0, #0
   54900:	bl	19e4 <fputc@plt>
   54904:	ldr	r1, [r4]
   54908:	mov	r0, #0
   5490c:	bl	19e4 <fputc@plt>
   54910:	ldr	r3, [r4]
   54914:	mov	r0, sl
   54918:	mov	r1, #4
   5491c:	mov	r2, #1
   54920:	bl	18ac <fwrite@plt>
   54924:	ldr	r5, [fp, #-64]	; 0xffffffc0
   54928:	ldr	r0, [r8, #36]	; 0x24
   5492c:	ldr	r3, [r4]
   54930:	mov	r1, #1
   54934:	mov	r2, r5
   54938:	bl	18ac <fwrite@plt>
   5493c:	asr	r0, r5, #31
   54940:	add	r0, r5, r0, lsr #29
   54944:	bic	r0, r0, #7
   54948:	subs	r0, r5, r0
   5494c:	beq	5496c <WriteType+0x5e4>
   54950:	sub	r5, r0, #1
   54954:	ldr	r1, [r4]
   54958:	mov	r0, #0
   5495c:	bl	19e4 <fputc@plt>
   54960:	add	r5, r5, #1
   54964:	cmp	r5, #7
   54968:	blt	54954 <WriteType+0x5cc>
   5496c:	mov	r0, r4
   54970:	mov	r1, r8
   54974:	bl	54388 <WriteType>
   54978:	ldr	r0, [r4]
   5497c:	bl	1840 <ftell@plt>
   54980:	mov	r5, r0
   54984:	ldr	r0, [sp, #12]
   54988:	cmn	r0, #1
   5498c:	cmnne	r5, #1
   54990:	bne	549a4 <WriteType+0x61c>
   54994:	ldr	r0, [pc, #3564]	; 55788 <WriteType+0x1400>
   54998:	add	r0, pc, r0
   5499c:	bl	19b4 <Mat_Critical@plt>
   549a0:	b	549e4 <WriteType+0x65c>
   549a4:	sub	r0, r5, r0
   549a8:	mvn	r1, #3
   549ac:	mov	r2, #1
   549b0:	str	r0, [fp, #-56]	; 0xffffffc8
   549b4:	sub	r1, r1, r0
   549b8:	ldr	r0, [r4]
   549bc:	bl	1a2c <fseek@plt>
   549c0:	ldr	r3, [r4]
   549c4:	sub	r0, fp, #56	; 0x38
   549c8:	mov	r1, #4
   549cc:	mov	r2, #1
   549d0:	bl	18ac <fwrite@plt>
   549d4:	ldr	r0, [r4]
   549d8:	mov	r1, r5
   549dc:	mov	r2, #0
   549e0:	bl	1a2c <fseek@plt>
   549e4:	mov	r5, #1
   549e8:	b	54a28 <WriteType+0x6a0>
   549ec:	ldr	r8, [r6, r9, lsl #2]
   549f0:	mov	r0, #6
   549f4:	cmp	r4, #0
   549f8:	strh	r5, [sp, #68]	; 0x44
   549fc:	str	r7, [fp, #-48]	; 0xffffffd0
   54a00:	str	r7, [fp, #-60]	; 0xffffffc4
   54a04:	str	r0, [fp, #-36]	; 0xffffffdc
   54a08:	mov	r0, #5
   54a0c:	str	r0, [fp, #-40]	; 0xffffffd8
   54a10:	mov	r0, #8
   54a14:	str	r0, [fp, #-44]	; 0xffffffd4
   54a18:	mov	r0, #14
   54a1c:	cmpne	r8, #0
   54a20:	str	r0, [fp, #-52]	; 0xffffffcc
   54a24:	bne	54690 <WriteType+0x308>
   54a28:	ldr	r0, [sp, #28]
   54a2c:	add	r9, r9, #1
   54a30:	cmp	r9, r0
   54a34:	bcc	549ec <WriteType+0x664>
   54a38:	b	54688 <WriteType+0x300>
   54a3c:	ldr	r0, [r7, #52]	; 0x34
   54a40:	ldr	r9, [r0, #4]
   54a44:	cmp	r9, #0
   54a48:	beq	554d4 <WriteType+0x114c>
   54a4c:	ldr	sl, [r7, #40]	; 0x28
   54a50:	ldr	r8, [r0, #8]
   54a54:	str	r7, [sp, #4]
   54a58:	mov	r5, #0
   54a5c:	mov	r7, #0
   54a60:	ldr	r0, [r8, r7, lsl #2]
   54a64:	mov	r6, r5
   54a68:	bl	1954 <strlen@plt>
   54a6c:	cmp	r0, r5
   54a70:	add	r7, r7, #1
   54a74:	movhi	r5, r0
   54a78:	cmp	r9, r7
   54a7c:	bne	54a60 <WriteType+0x6d8>
   54a80:	cmp	r0, r6
   54a84:	str	sl, [sp, #8]
   54a88:	movhi	r6, r0
   54a8c:	add	r0, r6, #1
   54a90:	mul	r0, r9, r0
   54a94:	add	r1, r0, r9
   54a98:	tst	r0, #7
   54a9c:	add	r5, r5, #1
   54aa0:	mov	r0, r1
   54aa4:	bne	54a94 <WriteType+0x70c>
   54aa8:	movw	r0, #5
   54aac:	str	r5, [sp, #24]
   54ab0:	mov	r1, #4
   54ab4:	mov	r2, #1
   54ab8:	movt	r0, #4
   54abc:	str	r0, [sp, #16]
   54ac0:	add	r0, sp, #16
   54ac4:	ldr	r3, [r4]
   54ac8:	bl	18ac <fwrite@plt>
   54acc:	ldr	r3, [r4]
   54ad0:	add	r0, sp, #24
   54ad4:	mov	r1, #4
   54ad8:	mov	r2, #1
   54adc:	bl	18ac <fwrite@plt>
   54ae0:	ldr	r3, [r4]
   54ae4:	add	r0, sp, #38	; 0x26
   54ae8:	mov	r1, #2
   54aec:	mov	r2, #1
   54af0:	bl	18ac <fwrite@plt>
   54af4:	ldr	r1, [r4]
   54af8:	mov	r0, #0
   54afc:	mov	r8, #0
   54b00:	bl	19e4 <fputc@plt>
   54b04:	ldr	r1, [r4]
   54b08:	mov	r0, #0
   54b0c:	bl	19e4 <fputc@plt>
   54b10:	ldr	r5, [sp, #24]
   54b14:	mov	r1, #4
   54b18:	mov	r2, #1
   54b1c:	mul	r0, r5, r9
   54b20:	str	r0, [sp, #32]
   54b24:	add	r0, sp, #32
   54b28:	ldr	r3, [r4]
   54b2c:	bl	18ac <fwrite@plt>
   54b30:	mov	r0, r5
   54b34:	mov	r1, #1
   54b38:	str	r5, [sp, #12]
   54b3c:	bl	1798 <calloc@plt>
   54b40:	ldr	r6, [sp, #4]
   54b44:	mov	sl, r0
   54b48:	ldr	r0, [r6, #52]	; 0x34
   54b4c:	ldr	r0, [r0, #8]
   54b50:	ldr	r7, [r0, r8, lsl #2]
   54b54:	mov	r0, r7
   54b58:	bl	1954 <strlen@plt>
   54b5c:	ldr	r3, [r4]
   54b60:	mov	r5, r0
   54b64:	mov	r0, r7
   54b68:	mov	r1, #1
   54b6c:	mov	r2, r5
   54b70:	bl	18ac <fwrite@plt>
   54b74:	ldr	r0, [sp, #12]
   54b78:	ldr	r3, [r4]
   54b7c:	mov	r1, #1
   54b80:	sub	r2, r0, r5
   54b84:	mov	r0, sl
   54b88:	bl	18ac <fwrite@plt>
   54b8c:	add	r8, r8, #1
   54b90:	cmp	r9, r8
   54b94:	bne	54b48 <WriteType+0x7c0>
   54b98:	mov	r0, sl
   54b9c:	bl	1804 <free@plt>
   54ba0:	ldr	r1, [sp, #28]
   54ba4:	add	r0, sp, #20
   54ba8:	mov	r2, r9
   54bac:	bl	5a1a4 <SafeMul>
   54bb0:	ldr	r0, [sp, #20]
   54bb4:	ldr	r7, [sp, #8]
   54bb8:	cmp	r0, #0
   54bbc:	beq	54688 <WriteType+0x300>
   54bc0:	mov	r8, #0
   54bc4:	mov	r6, #1
   54bc8:	mov	r0, #6
   54bcc:	mov	r1, #5
   54bd0:	mov	r2, #8
   54bd4:	mov	r3, #14
   54bd8:	mov	r9, #0
   54bdc:	ldr	r5, [r7, r9, lsl #2]
   54be0:	str	r6, [sp, #64]	; 0x40
   54be4:	str	r0, [sp, #60]	; 0x3c
   54be8:	str	r1, [sp, #56]	; 0x38
   54bec:	str	r2, [sp, #52]	; 0x34
   54bf0:	str	r8, [sp, #48]	; 0x30
   54bf4:	str	r3, [sp, #44]	; 0x2c
   54bf8:	str	r8, [sp, #40]	; 0x28
   54bfc:	cmp	r5, #0
   54c00:	beq	54df0 <WriteType+0xa68>
   54c04:	ldr	r3, [r4]
   54c08:	add	r0, sp, #44	; 0x2c
   54c0c:	mov	r1, #4
   54c10:	mov	r2, #1
   54c14:	bl	18ac <fwrite@plt>
   54c18:	ldr	r3, [r4]
   54c1c:	add	r0, sp, #48	; 0x30
   54c20:	mov	r1, #4
   54c24:	mov	r2, #1
   54c28:	bl	18ac <fwrite@plt>
   54c2c:	ldr	r0, [r5, #16]
   54c30:	cmp	r0, #0
   54c34:	beq	55084 <WriteType+0xcfc>
   54c38:	ldr	r0, [r4]
   54c3c:	bl	1840 <ftell@plt>
   54c40:	mov	sl, r0
   54c44:	ldr	r0, [r5, #16]
   54c48:	sub	r6, fp, #32
   54c4c:	sub	r7, fp, #40	; 0x28
   54c50:	uxtb	r1, r0
   54c54:	str	r1, [fp, #-32]	; 0xffffffe0
   54c58:	ldr	r2, [r5, #20]
   54c5c:	cmp	r2, #0
   54c60:	orrne	r1, r1, #2048	; 0x800
   54c64:	strne	r1, [fp, #-32]	; 0xffffffe0
   54c68:	ldr	r2, [r5, #24]
   54c6c:	cmp	r2, #0
   54c70:	orrne	r1, r1, #1024	; 0x400
   54c74:	strne	r1, [fp, #-32]	; 0xffffffe0
   54c78:	ldr	r2, [r5, #28]
   54c7c:	cmp	r2, #0
   54c80:	orrne	r1, r1, #512	; 0x200
   54c84:	strne	r1, [fp, #-32]	; 0xffffffe0
   54c88:	cmp	r0, #5
   54c8c:	ldreq	r0, [r5, #40]	; 0x28
   54c90:	ldreq	r0, [r0]
   54c94:	streq	r0, [sp, #40]	; 0x28
   54c98:	ldr	r0, [r4, #20]
   54c9c:	cmp	r0, #0
   54ca0:	beq	54cb0 <WriteType+0x928>
   54ca4:	mov	r0, r6
   54ca8:	bl	1bf0 <Mat_int32Swap>
   54cac:	str	r0, [fp, #-32]	; 0xffffffe0
   54cb0:	ldr	r3, [r4]
   54cb4:	add	r0, sp, #60	; 0x3c
   54cb8:	mov	r1, #4
   54cbc:	mov	r2, #1
   54cc0:	bl	18ac <fwrite@plt>
   54cc4:	ldr	r3, [r4]
   54cc8:	add	r0, sp, #52	; 0x34
   54ccc:	mov	r1, #4
   54cd0:	mov	r2, #1
   54cd4:	bl	18ac <fwrite@plt>
   54cd8:	ldr	r3, [r4]
   54cdc:	mov	r0, r6
   54ce0:	mov	r1, #4
   54ce4:	mov	r2, #1
   54ce8:	bl	18ac <fwrite@plt>
   54cec:	ldr	r3, [r4]
   54cf0:	add	r0, sp, #40	; 0x28
   54cf4:	mov	r1, #4
   54cf8:	mov	r2, #1
   54cfc:	bl	18ac <fwrite@plt>
   54d00:	ldr	r0, [r5, #4]
   54d04:	mov	r1, #4
   54d08:	mov	r2, #1
   54d0c:	lsl	r0, r0, #2
   54d10:	str	r0, [fp, #-36]	; 0xffffffdc
   54d14:	add	r0, sp, #56	; 0x38
   54d18:	ldr	r3, [r4]
   54d1c:	bl	18ac <fwrite@plt>
   54d20:	ldr	r3, [r4]
   54d24:	sub	r0, fp, #36	; 0x24
   54d28:	mov	r1, #4
   54d2c:	mov	r2, #1
   54d30:	bl	18ac <fwrite@plt>
   54d34:	ldr	r0, [r5, #4]
   54d38:	cmp	r0, #1
   54d3c:	blt	54d74 <WriteType+0x9ec>
   54d40:	mov	r6, #0
   54d44:	ldr	r0, [r5, #32]
   54d48:	mov	r1, #4
   54d4c:	mov	r2, #1
   54d50:	ldr	r0, [r0, r6, lsl #2]
   54d54:	str	r0, [fp, #-40]	; 0xffffffd8
   54d58:	mov	r0, r7
   54d5c:	ldr	r3, [r4]
   54d60:	bl	18ac <fwrite@plt>
   54d64:	ldr	r0, [r5, #4]
   54d68:	add	r6, r6, #1
   54d6c:	cmp	r6, r0
   54d70:	blt	54d44 <WriteType+0x9bc>
   54d74:	tst	r0, #1
   54d78:	beq	54d90 <WriteType+0xa08>
   54d7c:	ldr	r3, [r4]
   54d80:	add	r0, sp, #48	; 0x30
   54d84:	mov	r1, #4
   54d88:	mov	r2, #1
   54d8c:	bl	18ac <fwrite@plt>
   54d90:	ldr	r3, [r4]
   54d94:	add	r0, sp, #64	; 0x40
   54d98:	mov	r1, #4
   54d9c:	mov	r2, #1
   54da0:	bl	18ac <fwrite@plt>
   54da4:	ldr	r3, [r4]
   54da8:	add	r0, sp, #48	; 0x30
   54dac:	mov	r1, #4
   54db0:	mov	r2, #1
   54db4:	bl	18ac <fwrite@plt>
   54db8:	mov	r0, r4
   54dbc:	mov	r1, r5
   54dc0:	bl	54388 <WriteType>
   54dc4:	ldr	r0, [r4]
   54dc8:	bl	1840 <ftell@plt>
   54dcc:	cmn	sl, #1
   54dd0:	mov	r6, #1
   54dd4:	movne	r5, r0
   54dd8:	cmnne	r0, #1
   54ddc:	bne	54ff8 <WriteType+0xc70>
   54de0:	ldr	r0, [pc, #2472]	; 55790 <WriteType+0x1408>
   54de4:	add	r0, pc, r0
   54de8:	bl	19b4 <Mat_Critical@plt>
   54dec:	b	55038 <WriteType+0xcb0>
   54df0:	sub	ip, fp, #52	; 0x34
   54df4:	stm	ip, {r0, r3, r6}
   54df8:	mov	r0, #0
   54dfc:	str	r1, [fp, #-56]	; 0xffffffc8
   54e00:	str	r2, [fp, #-60]	; 0xffffffc4
   54e04:	mov	r1, #4
   54e08:	mov	r2, #1
   54e0c:	mov	r6, #6
   54e10:	str	r0, [fp, #-64]	; 0xffffffc0
   54e14:	sub	r0, fp, #48	; 0x30
   54e18:	ldr	r3, [r4]
   54e1c:	bl	18ac <fwrite@plt>
   54e20:	ldr	r3, [r4]
   54e24:	sub	r0, fp, #64	; 0x40
   54e28:	mov	r1, #4
   54e2c:	mov	r2, #1
   54e30:	bl	18ac <fwrite@plt>
   54e34:	ldr	r0, [r4]
   54e38:	bl	1840 <ftell@plt>
   54e3c:	str	r6, [fp, #-40]	; 0xffffffd8
   54e40:	mov	r5, r0
   54e44:	sub	r6, fp, #40	; 0x28
   54e48:	ldr	r0, [r4, #20]
   54e4c:	cmp	r0, #0
   54e50:	beq	54e60 <WriteType+0xad8>
   54e54:	mov	r0, r6
   54e58:	bl	1bf0 <Mat_int32Swap>
   54e5c:	str	r0, [fp, #-40]	; 0xffffffd8
   54e60:	ldr	r3, [r4]
   54e64:	sub	r0, fp, #52	; 0x34
   54e68:	mov	r1, #4
   54e6c:	mov	r2, #1
   54e70:	bl	18ac <fwrite@plt>
   54e74:	ldr	r3, [r4]
   54e78:	sub	r0, fp, #60	; 0x3c
   54e7c:	mov	r1, #4
   54e80:	mov	r2, #1
   54e84:	bl	18ac <fwrite@plt>
   54e88:	ldr	r3, [r4]
   54e8c:	mov	r0, r6
   54e90:	mov	r1, #4
   54e94:	mov	r2, #1
   54e98:	bl	18ac <fwrite@plt>
   54e9c:	ldr	r3, [r4]
   54ea0:	sub	r8, fp, #64	; 0x40
   54ea4:	mov	r1, #4
   54ea8:	mov	r2, #1
   54eac:	mov	r0, r8
   54eb0:	bl	18ac <fwrite@plt>
   54eb4:	mov	r0, #8
   54eb8:	mov	r1, #4
   54ebc:	mov	r2, #1
   54ec0:	str	r0, [sp, #68]	; 0x44
   54ec4:	sub	r0, fp, #56	; 0x38
   54ec8:	ldr	r3, [r4]
   54ecc:	bl	18ac <fwrite@plt>
   54ed0:	ldr	r3, [r4]
   54ed4:	add	r0, sp, #68	; 0x44
   54ed8:	mov	r1, #4
   54edc:	mov	r2, #1
   54ee0:	bl	18ac <fwrite@plt>
   54ee4:	mov	r6, #0
   54ee8:	sub	sl, fp, #32
   54eec:	mov	r1, #4
   54ef0:	mov	r2, #1
   54ef4:	str	r6, [fp, #-32]	; 0xffffffe0
   54ef8:	mov	r0, sl
   54efc:	ldr	r3, [r4]
   54f00:	bl	18ac <fwrite@plt>
   54f04:	str	r6, [fp, #-32]	; 0xffffffe0
   54f08:	mov	r0, sl
   54f0c:	mov	r1, #4
   54f10:	mov	r2, #1
   54f14:	ldr	r3, [r4]
   54f18:	bl	18ac <fwrite@plt>
   54f1c:	ldr	r3, [r4]
   54f20:	sub	r0, fp, #44	; 0x2c
   54f24:	mov	r1, #4
   54f28:	mov	r2, #1
   54f2c:	bl	18ac <fwrite@plt>
   54f30:	ldr	r3, [r4]
   54f34:	mov	r0, r8
   54f38:	mov	r1, #4
   54f3c:	mov	r2, #1
   54f40:	bl	18ac <fwrite@plt>
   54f44:	mov	r0, #9
   54f48:	str	r6, [fp, #-36]	; 0xffffffdc
   54f4c:	mov	r8, #0
   54f50:	str	r0, [fp, #-32]	; 0xffffffe0
   54f54:	ldr	r0, [r4]
   54f58:	cmp	r0, #0
   54f5c:	beq	54f98 <WriteType+0xc10>
   54f60:	mov	r0, #9
   54f64:	bl	1924 <Mat_SizeOf@plt>
   54f68:	str	r8, [fp, #-36]	; 0xffffffdc
   54f6c:	mov	r0, sl
   54f70:	mov	r1, #4
   54f74:	mov	r2, #1
   54f78:	ldr	r3, [r4]
   54f7c:	bl	18ac <fwrite@plt>
   54f80:	ldr	r3, [r4]
   54f84:	sub	r0, fp, #36	; 0x24
   54f88:	mov	r1, #4
   54f8c:	mov	r2, #1
   54f90:	bl	18ac <fwrite@plt>
   54f94:	ldr	r6, [fp, #-36]	; 0xffffffdc
   54f98:	asr	r0, r6, #31
   54f9c:	str	r6, [sp, #68]	; 0x44
   54fa0:	add	r0, r6, r0, lsr #29
   54fa4:	bic	r0, r0, #7
   54fa8:	subs	r0, r6, r0
   54fac:	beq	54fcc <WriteType+0xc44>
   54fb0:	sub	r6, r0, #1
   54fb4:	ldr	r1, [r4]
   54fb8:	mov	r0, #0
   54fbc:	bl	19e4 <fputc@plt>
   54fc0:	add	r6, r6, #1
   54fc4:	cmp	r6, #7
   54fc8:	blt	54fb4 <WriteType+0xc2c>
   54fcc:	ldr	r0, [r4]
   54fd0:	bl	1840 <ftell@plt>
   54fd4:	ldr	r7, [sp, #8]
   54fd8:	cmn	r5, #1
   54fdc:	movne	r6, r0
   54fe0:	cmnne	r0, #1
   54fe4:	bne	55040 <WriteType+0xcb8>
   54fe8:	ldr	r0, [pc, #1948]	; 5578c <WriteType+0x1404>
   54fec:	add	r0, pc, r0
   54ff0:	bl	19b4 <Mat_Critical@plt>
   54ff4:	b	55080 <WriteType+0xcf8>
   54ff8:	sub	r0, r5, sl
   54ffc:	mvn	r1, #3
   55000:	mov	r2, #1
   55004:	str	r0, [fp, #-36]	; 0xffffffdc
   55008:	sub	r1, r1, r0
   5500c:	ldr	r0, [r4]
   55010:	bl	1a2c <fseek@plt>
   55014:	ldr	r3, [r4]
   55018:	sub	r0, fp, #36	; 0x24
   5501c:	mov	r1, #4
   55020:	mov	r2, #1
   55024:	bl	18ac <fwrite@plt>
   55028:	ldr	r0, [r4]
   5502c:	mov	r1, r5
   55030:	mov	r2, #0
   55034:	bl	1a2c <fseek@plt>
   55038:	ldr	r7, [sp, #8]
   5503c:	b	55084 <WriteType+0xcfc>
   55040:	sub	r0, r6, r5
   55044:	mvn	r1, #3
   55048:	mov	r2, #1
   5504c:	str	r0, [sp, #68]	; 0x44
   55050:	sub	r1, r1, r0
   55054:	ldr	r0, [r4]
   55058:	bl	1a2c <fseek@plt>
   5505c:	ldr	r3, [r4]
   55060:	add	r0, sp, #68	; 0x44
   55064:	mov	r1, #4
   55068:	mov	r2, #1
   5506c:	bl	18ac <fwrite@plt>
   55070:	ldr	r0, [r4]
   55074:	mov	r1, r6
   55078:	mov	r2, #0
   5507c:	bl	1a2c <fseek@plt>
   55080:	mov	r6, #1
   55084:	ldr	r0, [sp, #20]
   55088:	add	r9, r9, #1
   5508c:	mov	r1, #5
   55090:	mov	r2, #8
   55094:	mov	r3, #14
   55098:	cmp	r9, r0
   5509c:	mov	r0, #6
   550a0:	bcc	54bdc <WriteType+0x854>
   550a4:	b	54688 <WriteType+0x300>
   550a8:	ldr	r0, [r7, #8]
   550ac:	ldr	r5, [r7, #40]	; 0x28
   550b0:	ldr	r6, [sp, #28]
   550b4:	mov	r1, #0
   550b8:	str	r1, [fp, #-36]	; 0xffffffdc
   550bc:	cmp	r0, #16
   550c0:	str	r0, [fp, #-32]	; 0xffffffe0
   550c4:	bhi	55778 <WriteType+0x13f0>
   550c8:	add	r1, pc, #4
   550cc:	ldr	r0, [r1, r0, lsl #2]
   550d0:	add	pc, r1, r0
   550d4:	.word	0x0000054c
   550d8:	.word	0x00000044
   550dc:	.word	0x00000044
   550e0:	.word	0x000006a4
   550e4:	.word	0x00000594
   550e8:	.word	0x000006a4
   550ec:	.word	0x000006a4
   550f0:	.word	0x000006a4
   550f4:	.word	0x000006a4
   550f8:	.word	0x000006a4
   550fc:	.word	0x000006a4
   55100:	.word	0x000006a4
   55104:	.word	0x000006a4
   55108:	.word	0x000006a4
   5510c:	.word	0x000006a4
   55110:	.word	0x000006a4
   55114:	.word	0x00000620
   55118:	mov	r0, #4
   5511c:	mov	r1, #4
   55120:	mov	r2, #1
   55124:	str	r0, [fp, #-32]	; 0xffffffe0
   55128:	lsl	r0, r6, #1
   5512c:	str	r0, [fp, #-36]	; 0xffffffdc
   55130:	sub	r0, fp, #32
   55134:	ldr	r3, [r4]
   55138:	bl	18ac <fwrite@plt>
   5513c:	ldr	r3, [r4]
   55140:	sub	r0, fp, #36	; 0x24
   55144:	mov	r1, #4
   55148:	mov	r2, #1
   5514c:	bl	18ac <fwrite@plt>
   55150:	cmp	r5, #0
   55154:	beq	55778 <WriteType+0x13f0>
   55158:	cmp	r6, #1
   5515c:	blt	55188 <WriteType+0xe00>
   55160:	sub	r7, fp, #40	; 0x28
   55164:	ldrb	r0, [r5], #1
   55168:	mov	r1, #2
   5516c:	mov	r2, #1
   55170:	strh	r0, [fp, #-40]	; 0xffffffd8
   55174:	mov	r0, r7
   55178:	ldr	r3, [r4]
   5517c:	bl	18ac <fwrite@plt>
   55180:	subs	r6, r6, #1
   55184:	bne	55164 <WriteType+0xddc>
   55188:	ldr	r0, [fp, #-36]	; 0xffffffdc
   5518c:	asr	r1, r0, #31
   55190:	add	r1, r0, r1, lsr #29
   55194:	bic	r1, r1, #7
   55198:	subs	r0, r0, r1
   5519c:	beq	55778 <WriteType+0x13f0>
   551a0:	sub	r5, r0, #1
   551a4:	ldr	r1, [r4]
   551a8:	mov	r0, #0
   551ac:	bl	19e4 <fputc@plt>
   551b0:	add	r5, r5, #1
   551b4:	cmp	r5, #7
   551b8:	blt	551a4 <WriteType+0xe1c>
   551bc:	b	55778 <WriteType+0x13f0>
   551c0:	.word	0x0000b83c
   551c4:	ldr	r5, [r7, #40]	; 0x28
   551c8:	mov	r0, #5
   551cc:	cmp	r4, #0
   551d0:	ldr	r8, [r5, #4]
   551d4:	ldr	r6, [r5, #8]
   551d8:	str	r0, [fp, #-32]	; 0xffffffe0
   551dc:	mov	r0, #0
   551e0:	str	r0, [fp, #-36]	; 0xffffffdc
   551e4:	ldrne	r1, [r4]
   551e8:	cmpne	r1, #0
   551ec:	beq	55254 <WriteType+0xecc>
   551f0:	mov	r0, #5
   551f4:	bl	1924 <Mat_SizeOf@plt>
   551f8:	mov	r9, r0
   551fc:	mul	r0, r0, r6
   55200:	mov	r1, #4
   55204:	mov	r2, #1
   55208:	str	r0, [fp, #-36]	; 0xffffffdc
   5520c:	sub	r0, fp, #32
   55210:	ldr	r3, [r4]
   55214:	bl	18ac <fwrite@plt>
   55218:	ldr	r3, [r4]
   5521c:	sub	r0, fp, #36	; 0x24
   55220:	mov	r1, #4
   55224:	mov	r2, #1
   55228:	bl	18ac <fwrite@plt>
   5522c:	cmp	r8, #0
   55230:	beq	55250 <WriteType+0xec8>
   55234:	cmp	r6, #1
   55238:	blt	55250 <WriteType+0xec8>
   5523c:	ldr	r3, [r4]
   55240:	mov	r0, r8
   55244:	mov	r1, r9
   55248:	mov	r2, r6
   5524c:	bl	18ac <fwrite@plt>
   55250:	ldr	r0, [fp, #-36]	; 0xffffffdc
   55254:	asr	r1, r0, #31
   55258:	str	r0, [sp, #32]
   5525c:	add	r1, r0, r1, lsr #29
   55260:	bic	r1, r1, #7
   55264:	subs	r0, r0, r1
   55268:	beq	55288 <WriteType+0xf00>
   5526c:	sub	r6, r0, #1
   55270:	ldr	r1, [r4]
   55274:	mov	r0, #0
   55278:	bl	19e4 <fputc@plt>
   5527c:	add	r6, r6, #1
   55280:	cmp	r6, #7
   55284:	blt	55270 <WriteType+0xee8>
   55288:	mov	r0, #5
   5528c:	ldr	r8, [r5, #12]
   55290:	ldr	r6, [r5, #16]
   55294:	cmp	r4, #0
   55298:	str	r0, [fp, #-32]	; 0xffffffe0
   5529c:	mov	r0, #0
   552a0:	str	r0, [fp, #-36]	; 0xffffffdc
   552a4:	ldrne	r1, [r4]
   552a8:	cmpne	r1, #0
   552ac:	beq	55314 <WriteType+0xf8c>
   552b0:	mov	r0, #5
   552b4:	bl	1924 <Mat_SizeOf@plt>
   552b8:	mov	r9, r0
   552bc:	mul	r0, r0, r6
   552c0:	mov	r1, #4
   552c4:	mov	r2, #1
   552c8:	str	r0, [fp, #-36]	; 0xffffffdc
   552cc:	sub	r0, fp, #32
   552d0:	ldr	r3, [r4]
   552d4:	bl	18ac <fwrite@plt>
   552d8:	ldr	r3, [r4]
   552dc:	sub	r0, fp, #36	; 0x24
   552e0:	mov	r1, #4
   552e4:	mov	r2, #1
   552e8:	bl	18ac <fwrite@plt>
   552ec:	cmp	r8, #0
   552f0:	beq	55310 <WriteType+0xf88>
   552f4:	cmp	r6, #1
   552f8:	blt	55310 <WriteType+0xf88>
   552fc:	ldr	r3, [r4]
   55300:	mov	r0, r8
   55304:	mov	r1, r9
   55308:	mov	r2, r6
   5530c:	bl	18ac <fwrite@plt>
   55310:	ldr	r0, [fp, #-36]	; 0xffffffdc
   55314:	asr	r1, r0, #31
   55318:	str	r0, [sp, #32]
   5531c:	add	r1, r0, r1, lsr #29
   55320:	bic	r1, r1, #7
   55324:	subs	r0, r0, r1
   55328:	beq	55348 <WriteType+0xfc0>
   5532c:	sub	r6, r0, #1
   55330:	ldr	r1, [r4]
   55334:	mov	r0, #0
   55338:	bl	19e4 <fputc@plt>
   5533c:	add	r6, r6, #1
   55340:	cmp	r6, #7
   55344:	blt	55330 <WriteType+0xfa8>
   55348:	ldr	r0, [r7, #20]
   5534c:	cmp	r0, #0
   55350:	beq	55560 <WriteType+0x11d8>
   55354:	ldr	r8, [r5, #24]
   55358:	ldr	r0, [r7, #8]
   5535c:	mov	r1, #0
   55360:	ldr	r6, [r5, #20]
   55364:	cmp	r4, #0
   55368:	ldr	sl, [r8]
   5536c:	str	r0, [fp, #-32]	; 0xffffffe0
   55370:	str	r1, [fp, #-36]	; 0xffffffdc
   55374:	ldrne	r2, [r4]
   55378:	cmpne	r2, #0
   5537c:	beq	553e0 <WriteType+0x1058>
   55380:	bl	1924 <Mat_SizeOf@plt>
   55384:	mov	r9, r0
   55388:	mul	r0, r0, r6
   5538c:	mov	r1, #4
   55390:	mov	r2, #1
   55394:	str	r0, [fp, #-36]	; 0xffffffdc
   55398:	sub	r0, fp, #32
   5539c:	ldr	r3, [r4]
   553a0:	bl	18ac <fwrite@plt>
   553a4:	ldr	r3, [r4]
   553a8:	sub	r0, fp, #36	; 0x24
   553ac:	mov	r1, #4
   553b0:	mov	r2, #1
   553b4:	bl	18ac <fwrite@plt>
   553b8:	cmp	sl, #0
   553bc:	beq	553dc <WriteType+0x1054>
   553c0:	cmp	r6, #1
   553c4:	blt	553dc <WriteType+0x1054>
   553c8:	ldr	r3, [r4]
   553cc:	mov	r0, sl
   553d0:	mov	r1, r9
   553d4:	mov	r2, r6
   553d8:	bl	18ac <fwrite@plt>
   553dc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   553e0:	asr	r0, r1, #31
   553e4:	str	r1, [sp, #32]
   553e8:	add	r0, r1, r0, lsr #29
   553ec:	bic	r0, r0, #7
   553f0:	subs	r0, r1, r0
   553f4:	beq	55414 <WriteType+0x108c>
   553f8:	sub	r6, r0, #1
   553fc:	ldr	r1, [r4]
   55400:	mov	r0, #0
   55404:	bl	19e4 <fputc@plt>
   55408:	add	r6, r6, #1
   5540c:	cmp	r6, #7
   55410:	blt	553fc <WriteType+0x1074>
   55414:	ldr	r0, [r7, #8]
   55418:	mov	r1, #0
   5541c:	ldr	r6, [r5, #20]
   55420:	ldr	r5, [r8, #4]
   55424:	cmp	r4, #0
   55428:	str	r1, [fp, #-36]	; 0xffffffdc
   5542c:	str	r0, [fp, #-32]	; 0xffffffe0
   55430:	ldrne	r2, [r4]
   55434:	cmpne	r2, #0
   55438:	beq	5549c <WriteType+0x1114>
   5543c:	bl	1924 <Mat_SizeOf@plt>
   55440:	mov	r7, r0
   55444:	mul	r0, r0, r6
   55448:	mov	r1, #4
   5544c:	mov	r2, #1
   55450:	str	r0, [fp, #-36]	; 0xffffffdc
   55454:	sub	r0, fp, #32
   55458:	ldr	r3, [r4]
   5545c:	bl	18ac <fwrite@plt>
   55460:	ldr	r3, [r4]
   55464:	sub	r0, fp, #36	; 0x24
   55468:	mov	r1, #4
   5546c:	mov	r2, #1
   55470:	bl	18ac <fwrite@plt>
   55474:	cmp	r5, #0
   55478:	beq	55498 <WriteType+0x1110>
   5547c:	cmp	r6, #1
   55480:	blt	55498 <WriteType+0x1110>
   55484:	ldr	r3, [r4]
   55488:	mov	r0, r5
   5548c:	mov	r1, r7
   55490:	mov	r2, r6
   55494:	bl	18ac <fwrite@plt>
   55498:	ldr	r1, [fp, #-36]	; 0xffffffdc
   5549c:	asr	r0, r1, #31
   554a0:	str	r1, [sp, #32]
   554a4:	add	r0, r1, r0, lsr #29
   554a8:	bic	r0, r0, #7
   554ac:	subs	r0, r1, r0
   554b0:	beq	54688 <WriteType+0x300>
   554b4:	sub	r5, r0, #1
   554b8:	ldr	r1, [r4]
   554bc:	mov	r0, #0
   554c0:	bl	19e4 <fputc@plt>
   554c4:	add	r5, r5, #1
   554c8:	cmp	r5, #7
   554cc:	blt	554b8 <WriteType+0x1130>
   554d0:	b	54688 <WriteType+0x300>
   554d4:	movw	r0, #5
   554d8:	mov	r1, #4
   554dc:	mov	r2, #1
   554e0:	mov	r5, #1
   554e4:	movt	r0, #4
   554e8:	str	r0, [sp, #16]
   554ec:	add	r0, sp, #16
   554f0:	ldr	r3, [r4]
   554f4:	bl	18ac <fwrite@plt>
   554f8:	str	r5, [sp, #24]
   554fc:	add	r0, sp, #24
   55500:	mov	r1, #4
   55504:	mov	r2, #1
   55508:	ldr	r3, [r4]
   5550c:	bl	18ac <fwrite@plt>
   55510:	ldr	r3, [r4]
   55514:	add	r0, sp, #38	; 0x26
   55518:	mov	r1, #2
   5551c:	mov	r2, #1
   55520:	bl	18ac <fwrite@plt>
   55524:	ldr	r1, [r4]
   55528:	mov	r0, #0
   5552c:	mov	r5, #0
   55530:	bl	19e4 <fputc@plt>
   55534:	ldr	r1, [r4]
   55538:	mov	r0, #0
   5553c:	bl	19e4 <fputc@plt>
   55540:	str	r5, [sp, #32]
   55544:	add	r0, sp, #32
   55548:	mov	r1, #4
   5554c:	mov	r2, #1
   55550:	ldr	r3, [r4]
   55554:	bl	18ac <fwrite@plt>
   55558:	sub	sp, fp, #28
   5555c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   55560:	ldr	r0, [r7, #8]
   55564:	mov	r1, #0
   55568:	ldr	r6, [r5, #20]
   5556c:	ldr	r5, [r5, #24]
   55570:	cmp	r4, #0
   55574:	str	r1, [fp, #-36]	; 0xffffffdc
   55578:	str	r0, [fp, #-32]	; 0xffffffe0
   5557c:	ldrne	r2, [r4]
   55580:	cmpne	r2, #0
   55584:	beq	555e8 <WriteType+0x1260>
   55588:	bl	1924 <Mat_SizeOf@plt>
   5558c:	mov	r7, r0
   55590:	mul	r0, r0, r6
   55594:	mov	r1, #4
   55598:	mov	r2, #1
   5559c:	str	r0, [fp, #-36]	; 0xffffffdc
   555a0:	sub	r0, fp, #32
   555a4:	ldr	r3, [r4]
   555a8:	bl	18ac <fwrite@plt>
   555ac:	ldr	r3, [r4]
   555b0:	sub	r0, fp, #36	; 0x24
   555b4:	mov	r1, #4
   555b8:	mov	r2, #1
   555bc:	bl	18ac <fwrite@plt>
   555c0:	cmp	r5, #0
   555c4:	beq	555e4 <WriteType+0x125c>
   555c8:	cmp	r6, #1
   555cc:	blt	555e4 <WriteType+0x125c>
   555d0:	ldr	r3, [r4]
   555d4:	mov	r0, r5
   555d8:	mov	r1, r7
   555dc:	mov	r2, r6
   555e0:	bl	18ac <fwrite@plt>
   555e4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   555e8:	asr	r0, r1, #31
   555ec:	str	r1, [sp, #32]
   555f0:	add	r0, r1, r0, lsr #29
   555f4:	bic	r0, r0, #7
   555f8:	subs	r0, r1, r0
   555fc:	beq	54688 <WriteType+0x300>
   55600:	sub	r5, r0, #1
   55604:	ldr	r1, [r4]
   55608:	mov	r0, #0
   5560c:	bl	19e4 <fputc@plt>
   55610:	add	r5, r5, #1
   55614:	cmp	r5, #7
   55618:	blt	55604 <WriteType+0x127c>
   5561c:	b	54688 <WriteType+0x300>
   55620:	mov	r0, #4
   55624:	mov	r1, #4
   55628:	mov	r2, #1
   5562c:	str	r0, [fp, #-32]	; 0xffffffe0
   55630:	lsl	r0, r6, #1
   55634:	str	r0, [fp, #-36]	; 0xffffffdc
   55638:	sub	r0, fp, #32
   5563c:	ldr	r3, [r4]
   55640:	bl	18ac <fwrite@plt>
   55644:	ldr	r3, [r4]
   55648:	sub	r0, fp, #36	; 0x24
   5564c:	mov	r1, #4
   55650:	mov	r2, #1
   55654:	bl	18ac <fwrite@plt>
   55658:	ldr	r0, [fp, #-36]	; 0xffffffdc
   5565c:	str	r0, [sp, #32]
   55660:	sub	sp, fp, #28
   55664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   55668:	lsl	r0, r6, #1
   5566c:	mov	r1, #4
   55670:	mov	r2, #1
   55674:	str	r0, [fp, #-36]	; 0xffffffdc
   55678:	sub	r0, fp, #32
   5567c:	ldr	r3, [r4]
   55680:	bl	18ac <fwrite@plt>
   55684:	ldr	r3, [r4]
   55688:	sub	r0, fp, #36	; 0x24
   5568c:	mov	r1, #4
   55690:	mov	r2, #1
   55694:	bl	18ac <fwrite@plt>
   55698:	cmp	r5, #0
   5569c:	beq	556bc <WriteType+0x1334>
   556a0:	cmp	r6, #1
   556a4:	blt	556bc <WriteType+0x1334>
   556a8:	ldr	r3, [r4]
   556ac:	mov	r0, r5
   556b0:	mov	r1, #2
   556b4:	mov	r2, r6
   556b8:	bl	18ac <fwrite@plt>
   556bc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   556c0:	asr	r1, r0, #31
   556c4:	add	r1, r0, r1, lsr #29
   556c8:	bic	r1, r1, #7
   556cc:	subs	r0, r0, r1
   556d0:	beq	55778 <WriteType+0x13f0>
   556d4:	sub	r5, r0, #1
   556d8:	ldr	r1, [r4]
   556dc:	mov	r0, #0
   556e0:	bl	19e4 <fputc@plt>
   556e4:	add	r5, r5, #1
   556e8:	cmp	r5, #7
   556ec:	blt	556d8 <WriteType+0x1350>
   556f0:	b	55778 <WriteType+0x13f0>
   556f4:	str	r6, [fp, #-36]	; 0xffffffdc
   556f8:	sub	r0, fp, #32
   556fc:	mov	r1, #4
   55700:	mov	r2, #1
   55704:	ldr	r3, [r4]
   55708:	bl	18ac <fwrite@plt>
   5570c:	ldr	r3, [r4]
   55710:	sub	r0, fp, #36	; 0x24
   55714:	mov	r1, #4
   55718:	mov	r2, #1
   5571c:	bl	18ac <fwrite@plt>
   55720:	ldr	r6, [fp, #-36]	; 0xffffffdc
   55724:	cmp	r5, #0
   55728:	beq	55748 <WriteType+0x13c0>
   5572c:	cmp	r6, #1
   55730:	blt	55748 <WriteType+0x13c0>
   55734:	ldr	r3, [r4]
   55738:	mov	r0, r5
   5573c:	mov	r1, #1
   55740:	mov	r2, r6
   55744:	bl	18ac <fwrite@plt>
   55748:	asr	r0, r6, #31
   5574c:	add	r0, r6, r0, lsr #29
   55750:	bic	r0, r0, #7
   55754:	subs	r0, r6, r0
   55758:	beq	55778 <WriteType+0x13f0>
   5575c:	sub	r5, r0, #1
   55760:	ldr	r1, [r4]
   55764:	mov	r0, #0
   55768:	bl	19e4 <fputc@plt>
   5576c:	add	r5, r5, #1
   55770:	cmp	r5, #7
   55774:	blt	55760 <WriteType+0x13d8>
   55778:	ldr	r0, [fp, #-36]	; 0xffffffdc
   5577c:	str	r0, [sp, #32]
   55780:	sub	sp, fp, #28
   55784:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   55788:	.word	0x0000ae40
   5578c:	.word	0x0000a7ec
   55790:	.word	0x0000a9f4
   55794:	.word	0xe320f000
   55798:	.word	0xe320f000
   5579c:	.word	0xe320f000

000557a0 <WriteCompressedType>:
   557a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   557a4:	add	fp, sp, #28
   557a8:	sub	sp, sp, #52	; 0x34
   557ac:	sub	sp, sp, #11264	; 0x2c00
   557b0:	add	r5, sp, #40	; 0x28
   557b4:	mov	r4, r2
   557b8:	mov	r7, r1
   557bc:	mov	sl, r0
   557c0:	mov	r1, #0
   557c4:	mov	r2, #2048	; 0x800
   557c8:	mov	r6, #0
   557cc:	mov	r0, r5
   557d0:	bl	1990 <memset@plt>
   557d4:	mov	r0, #1
   557d8:	str	r0, [sp, #36]	; 0x24
   557dc:	ldr	r0, [r7, #16]
   557e0:	cmp	r0, #0
   557e4:	beq	56198 <WriteCompressedType+0x9f8>
   557e8:	add	r1, sp, #36	; 0x24
   557ec:	mov	r0, r7
   557f0:	bl	5a144 <SafeMulDims>
   557f4:	ldr	r0, [r7, #16]
   557f8:	sub	r1, r0, #6
   557fc:	cmp	r1, #10
   55800:	bcs	55870 <WriteCompressedType+0xd0>
   55804:	ldr	r0, [r7, #20]
   55808:	ldr	r2, [r7, #40]	; 0x28
   5580c:	cmp	r0, #0
   55810:	beq	559c0 <WriteCompressedType+0x220>
   55814:	ldr	r5, [pc, #2628]	; 56260 <WriteCompressedType+0xac0>
   55818:	cmp	r2, #0
   5581c:	ldr	r0, [r7, #8]
   55820:	ldr	r3, [sp, #36]	; 0x24
   55824:	mov	r1, r4
   55828:	add	r5, pc, r5
   5582c:	movne	r5, r2
   55830:	ldr	r2, [r5]
   55834:	str	r0, [sp]
   55838:	mov	r0, sl
   5583c:	bl	586cc <WriteCompressedData>
   55840:	mov	r6, r0
   55844:	ldr	r0, [r7, #8]
   55848:	ldr	r2, [r5, #4]
   5584c:	ldr	r3, [sp, #36]	; 0x24
   55850:	mov	r1, r4
   55854:	str	r0, [sp]
   55858:	mov	r0, sl
   5585c:	bl	586cc <WriteCompressedData>
   55860:	add	r6, r0, r6
   55864:	mov	r0, r6
   55868:	sub	sp, fp, #28
   5586c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   55870:	sub	r0, r0, #1
   55874:	cmp	r0, #4
   55878:	bhi	56198 <WriteCompressedType+0x9f8>
   5587c:	add	r1, pc, #4
   55880:	ldr	r0, [r1, r0, lsl #2]
   55884:	add	pc, r1, r0
   55888:	.word	0x00000014
   5588c:	.word	0x00000160
   55890:	.word	0x00000910
   55894:	.word	0x0000064c
   55898:	.word	0x000007e0
   5589c:	ldr	r0, [r7]
   558a0:	cmp	r0, #0
   558a4:	beq	56198 <WriteCompressedType+0x9f8>
   558a8:	ldr	r1, [r7, #40]	; 0x28
   558ac:	cmp	r1, #0
   558b0:	str	r1, [sp, #28]
   558b4:	ldrne	r1, [r7, #12]
   558b8:	cmpne	r1, #0
   558bc:	beq	56198 <WriteCompressedType+0x9f8>
   558c0:	udiv	r9, r0, r1
   558c4:	cmp	r1, r0
   558c8:	str	r9, [sp, #36]	; 0x24
   558cc:	bhi	56198 <WriteCompressedType+0x9f8>
   558d0:	cmp	r4, #0
   558d4:	beq	5621c <WriteCompressedType+0xa7c>
   558d8:	cmp	sl, #0
   558dc:	beq	56234 <WriteCompressedType+0xa94>
   558e0:	mov	r5, #0
   558e4:	mov	r8, #2048	; 0x800
   558e8:	sub	r7, fp, #2080	; 0x820
   558ec:	ldr	r0, [sp, #28]
   558f0:	sub	lr, fp, #4096	; 0x1000
   558f4:	mov	r1, #0
   558f8:	mov	r2, #2048	; 0x800
   558fc:	ldr	r6, [r0, r5, lsl #2]
   55900:	sub	r0, lr, #32
   55904:	bl	1990 <memset@plt>
   55908:	cmp	r6, #0
   5590c:	beq	559ac <WriteCompressedType+0x20c>
   55910:	add	lr, sp, #5120	; 0x1400
   55914:	mov	r1, #14
   55918:	add	r0, lr, #40	; 0x28
   5591c:	str	r1, [r0, #2056]	; 0x808
   55920:	ldr	r0, [r6, #16]
   55924:	cmp	r0, #0
   55928:	beq	5593c <WriteCompressedType+0x19c>
   5592c:	mov	r0, r6
   55930:	bl	58410 <GetTypeBufSize>
   55934:	add	r0, r0, #24
   55938:	b	55940 <WriteCompressedType+0x1a0>
   5593c:	mov	r0, #0
   55940:	add	lr, sp, #5120	; 0x1400
   55944:	add	r1, lr, #40	; 0x28
   55948:	sub	lr, fp, #4096	; 0x1000
   5594c:	str	r0, [r1, #2060]	; 0x80c
   55950:	sub	r0, lr, #32
   55954:	str	r0, [r4]
   55958:	mov	r0, #8
   5595c:	str	r0, [r4, #4]
   55960:	mov	r0, r4
   55964:	mov	r1, #0
   55968:	str	r7, [r4, #12]
   5596c:	str	r8, [r4, #16]
   55970:	bl	1894 <deflate@plt>
   55974:	ldr	r0, [r4, #16]
   55978:	ldr	r3, [sl]
   5597c:	mov	r1, #1
   55980:	rsb	r2, r0, #2048	; 0x800
   55984:	mov	r0, r7
   55988:	bl	18ac <fwrite@plt>
   5598c:	ldr	r0, [r4, #16]
   55990:	cmp	r0, #0
   55994:	beq	55960 <WriteCompressedType+0x1c0>
   55998:	mov	r0, sl
   5599c:	mov	r1, r6
   559a0:	mov	r2, r4
   559a4:	bl	5884c <WriteCompressedTypeArrayFlags>
   559a8:	ldr	r9, [sp, #36]	; 0x24
   559ac:	add	r5, r5, #1
   559b0:	mov	r6, #0
   559b4:	cmp	r5, r9
   559b8:	bcc	558ec <WriteCompressedType+0x14c>
   559bc:	b	56198 <WriteCompressedType+0x9f8>
   559c0:	ldr	r0, [r7, #8]
   559c4:	ldr	r3, [sp, #36]	; 0x24
   559c8:	mov	r1, r4
   559cc:	str	r0, [sp]
   559d0:	mov	r0, sl
   559d4:	bl	586cc <WriteCompressedData>
   559d8:	mov	r6, r0
   559dc:	mov	r0, r6
   559e0:	sub	sp, fp, #28
   559e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   559e8:	ldr	r0, [r7, #52]	; 0x34
   559ec:	ldr	r9, [r0, #4]
   559f0:	cmp	r9, #0
   559f4:	beq	56110 <WriteCompressedType+0x970>
   559f8:	ldr	r1, [r7, #40]	; 0x28
   559fc:	ldr	r8, [r0, #8]
   55a00:	str	r7, [sp, #8]
   55a04:	mov	r7, #0
   55a08:	mov	r6, #0
   55a0c:	str	r1, [sp, #4]
   55a10:	ldr	r0, [r8, r6, lsl #2]
   55a14:	mov	r5, r7
   55a18:	bl	1954 <strlen@plt>
   55a1c:	cmp	r0, r7
   55a20:	add	r6, r6, #1
   55a24:	movhi	r7, r0
   55a28:	cmp	r9, r6
   55a2c:	bne	55a10 <WriteCompressedType+0x270>
   55a30:	cmp	r0, r5
   55a34:	mov	r1, r5
   55a38:	mov	r3, #0
   55a3c:	movhi	r1, r0
   55a40:	add	r1, r1, #1
   55a44:	mul	r2, r9, r1
   55a48:	add	r1, r3, r9
   55a4c:	add	r3, r2, r3
   55a50:	add	r7, r7, #1
   55a54:	tst	r3, #7
   55a58:	mov	r3, r1
   55a5c:	bne	55a48 <WriteCompressedType+0x2a8>
   55a60:	movw	r2, #5
   55a64:	cmp	r0, r5
   55a68:	str	r7, [sp, #44]	; 0x2c
   55a6c:	str	r9, [sp, #16]
   55a70:	str	r7, [sp, #28]
   55a74:	movhi	r5, r0
   55a78:	movt	r2, #4
   55a7c:	str	r2, [sp, #40]	; 0x28
   55a80:	mov	r2, #1
   55a84:	mla	r0, r9, r5, r1
   55a88:	mov	r1, #1
   55a8c:	str	r2, [sp, #48]	; 0x30
   55a90:	str	r0, [sp, #52]	; 0x34
   55a94:	mov	r0, r7
   55a98:	bl	1798 <calloc@plt>
   55a9c:	add	lr, sp, #2048	; 0x800
   55aa0:	str	r0, [sp, #12]
   55aa4:	add	r1, sp, #40	; 0x28
   55aa8:	mov	r0, #16
   55aac:	mov	r6, #0
   55ab0:	mov	r5, #2048	; 0x800
   55ab4:	add	r8, lr, #40	; 0x28
   55ab8:	str	r1, [r4]
   55abc:	str	r0, [r4, #4]
   55ac0:	mov	r0, r4
   55ac4:	mov	r1, #0
   55ac8:	str	r8, [r4, #12]
   55acc:	str	r5, [r4, #16]
   55ad0:	bl	1894 <deflate@plt>
   55ad4:	ldr	r0, [r4, #16]
   55ad8:	ldr	r3, [sl]
   55adc:	mov	r1, #1
   55ae0:	rsb	r2, r0, #2048	; 0x800
   55ae4:	mov	r0, r8
   55ae8:	bl	18ac <fwrite@plt>
   55aec:	add	r6, r0, r6
   55af0:	ldr	r0, [r4, #16]
   55af4:	cmp	r0, #0
   55af8:	beq	55ac0 <WriteCompressedType+0x320>
   55afc:	ldr	r7, [sp, #12]
   55b00:	mov	r5, #0
   55b04:	mov	r9, #2048	; 0x800
   55b08:	ldr	r0, [sp, #8]
   55b0c:	ldr	r0, [r0, #52]	; 0x34
   55b10:	str	r0, [sp, #24]
   55b14:	ldr	r0, [r0, #8]
   55b18:	ldr	r0, [r0, r5, lsl #2]
   55b1c:	bl	1954 <strlen@plt>
   55b20:	ldr	r2, [sp, #28]
   55b24:	str	r0, [sp, #20]
   55b28:	mov	r0, r7
   55b2c:	mov	r1, #0
   55b30:	bl	1990 <memset@plt>
   55b34:	ldr	r0, [sp, #24]
   55b38:	ldr	r2, [sp, #20]
   55b3c:	ldr	r0, [r0, #8]
   55b40:	ldr	r1, [r0, r5, lsl #2]
   55b44:	mov	r0, r7
   55b48:	bl	181c <memcpy@plt>
   55b4c:	ldr	r0, [sp, #28]
   55b50:	str	r7, [r4]
   55b54:	str	r0, [r4, #4]
   55b58:	mov	r0, r4
   55b5c:	mov	r1, #0
   55b60:	str	r8, [r4, #12]
   55b64:	str	r9, [r4, #16]
   55b68:	bl	1894 <deflate@plt>
   55b6c:	ldr	r0, [r4, #16]
   55b70:	ldr	r3, [sl]
   55b74:	mov	r1, #1
   55b78:	rsb	r2, r0, #2048	; 0x800
   55b7c:	mov	r0, r8
   55b80:	bl	18ac <fwrite@plt>
   55b84:	add	r6, r0, r6
   55b88:	ldr	r0, [r4, #16]
   55b8c:	cmp	r0, #0
   55b90:	beq	55b58 <WriteCompressedType+0x3b8>
   55b94:	ldr	r0, [sp, #16]
   55b98:	add	r5, r5, #1
   55b9c:	cmp	r5, r0
   55ba0:	bne	55b08 <WriteCompressedType+0x368>
   55ba4:	ldr	r0, [sp, #12]
   55ba8:	bl	1804 <free@plt>
   55bac:	ldr	r1, [sp, #36]	; 0x24
   55bb0:	ldr	r2, [sp, #16]
   55bb4:	add	r0, sp, #32
   55bb8:	bl	5a1a4 <SafeMul>
   55bbc:	ldr	r0, [sp, #32]
   55bc0:	cmp	r0, #0
   55bc4:	beq	56198 <WriteCompressedType+0x9f8>
   55bc8:	sub	lr, fp, #4096	; 0x1000
   55bcc:	mov	r7, #2048	; 0x800
   55bd0:	sub	r8, fp, #2080	; 0x820
   55bd4:	mov	r5, #0
   55bd8:	sub	r0, lr, #32
   55bdc:	add	r1, r0, #8
   55be0:	add	r0, r0, #24
   55be4:	str	r1, [sp, #24]
   55be8:	str	r0, [sp, #20]
   55bec:	ldr	r0, [sp, #4]
   55bf0:	add	lr, sp, #4096	; 0x1000
   55bf4:	mov	r1, #0
   55bf8:	mov	r2, #2048	; 0x800
   55bfc:	ldr	r9, [r0, r5, lsl #2]
   55c00:	add	r0, lr, #1072	; 0x430
   55c04:	bl	1990 <memset@plt>
   55c08:	cmp	r9, #0
   55c0c:	str	r5, [sp, #28]
   55c10:	beq	55cb8 <WriteCompressedType+0x518>
   55c14:	add	lr, sp, #5120	; 0x1400
   55c18:	mov	r1, #14
   55c1c:	mov	r5, #0
   55c20:	add	r0, lr, #40	; 0x28
   55c24:	str	r1, [r0, #8]
   55c28:	ldr	r0, [r9, #16]
   55c2c:	cmp	r0, #0
   55c30:	mov	r0, #0
   55c34:	beq	55c44 <WriteCompressedType+0x4a4>
   55c38:	mov	r0, r9
   55c3c:	bl	58410 <GetTypeBufSize>
   55c40:	add	r0, r0, #24
   55c44:	add	lr, sp, #5120	; 0x1400
   55c48:	add	r1, lr, #40	; 0x28
   55c4c:	add	lr, sp, #4096	; 0x1000
   55c50:	str	r0, [r1, #12]
   55c54:	add	r0, lr, #1072	; 0x430
   55c58:	str	r0, [r4]
   55c5c:	mov	r0, #8
   55c60:	str	r0, [r4, #4]
   55c64:	mov	r0, r4
   55c68:	mov	r1, #0
   55c6c:	str	r8, [r4, #12]
   55c70:	str	r7, [r4, #16]
   55c74:	bl	1894 <deflate@plt>
   55c78:	ldr	r0, [r4, #16]
   55c7c:	ldr	r3, [sl]
   55c80:	mov	r1, #1
   55c84:	rsb	r2, r0, #2048	; 0x800
   55c88:	mov	r0, r8
   55c8c:	bl	18ac <fwrite@plt>
   55c90:	add	r5, r0, r5
   55c94:	ldr	r0, [r4, #16]
   55c98:	cmp	r0, #0
   55c9c:	beq	55c64 <WriteCompressedType+0x4c4>
   55ca0:	mov	r0, sl
   55ca4:	mov	r1, r9
   55ca8:	mov	r2, r4
   55cac:	bl	5884c <WriteCompressedTypeArrayFlags>
   55cb0:	add	r0, r0, r5
   55cb4:	b	55eb8 <WriteCompressedType+0x718>
   55cb8:	ldr	r0, [sp, #24]
   55cbc:	mov	r1, #0
   55cc0:	movw	r2, #2040	; 0x7f8
   55cc4:	mov	r5, #0
   55cc8:	bl	1990 <memset@plt>
   55ccc:	add	lr, sp, #5120	; 0x1400
   55cd0:	mov	r1, #14
   55cd4:	add	r0, lr, #40	; 0x28
   55cd8:	sub	lr, fp, #4096	; 0x1000
   55cdc:	str	r1, [r0, #2056]	; 0x808
   55ce0:	mov	r1, #48	; 0x30
   55ce4:	str	r1, [r0, #2060]	; 0x80c
   55ce8:	sub	r0, lr, #32
   55cec:	str	r0, [r4]
   55cf0:	mov	r0, #8
   55cf4:	str	r0, [r4, #4]
   55cf8:	mov	r0, r4
   55cfc:	mov	r1, #0
   55d00:	str	r8, [r4, #12]
   55d04:	str	r7, [r4, #16]
   55d08:	bl	1894 <deflate@plt>
   55d0c:	ldr	r0, [r4, #16]
   55d10:	ldr	r3, [sl]
   55d14:	mov	r1, #1
   55d18:	rsb	r2, r0, #2048	; 0x800
   55d1c:	mov	r0, r8
   55d20:	bl	18ac <fwrite@plt>
   55d24:	add	r5, r0, r5
   55d28:	ldr	r0, [r4, #16]
   55d2c:	cmp	r0, #0
   55d30:	beq	55cf8 <WriteCompressedType+0x558>
   55d34:	add	r0, pc, #964	; 0x3c4
   55d38:	sub	lr, fp, #4096	; 0x1000
   55d3c:	mov	r2, #20
   55d40:	mov	r9, #0
   55d44:	vld1.64	{d16-d17}, [r0 :128]
   55d48:	sub	r1, lr, #32
   55d4c:	add	lr, sp, #5120	; 0x1400
   55d50:	mov	r0, r1
   55d54:	vst1.32	{d16-d17}, [r0], r2
   55d58:	mov	r2, #8
   55d5c:	str	r2, [r0]
   55d60:	add	r0, lr, #40	; 0x28
   55d64:	mov	r2, #5
   55d68:	str	r2, [r0, #2072]	; 0x818
   55d6c:	ldr	r0, [sp, #20]
   55d70:	mov	r2, #0
   55d74:	str	r2, [r0]
   55d78:	str	r2, [r0, #4]
   55d7c:	mov	r0, #32
   55d80:	str	r1, [r4]
   55d84:	str	r0, [r4, #4]
   55d88:	mov	r0, r4
   55d8c:	mov	r1, #0
   55d90:	str	r8, [r4, #12]
   55d94:	str	r7, [r4, #16]
   55d98:	bl	1894 <deflate@plt>
   55d9c:	ldr	r0, [r4, #16]
   55da0:	ldr	r3, [sl]
   55da4:	mov	r1, #1
   55da8:	rsb	r2, r0, #2048	; 0x800
   55dac:	mov	r0, r8
   55db0:	bl	18ac <fwrite@plt>
   55db4:	add	r5, r0, r5
   55db8:	ldr	r0, [r4, #16]
   55dbc:	cmp	r0, #0
   55dc0:	beq	55d88 <WriteCompressedType+0x5e8>
   55dc4:	add	lr, sp, #5120	; 0x1400
   55dc8:	mov	r1, #1
   55dcc:	add	r0, lr, #40	; 0x28
   55dd0:	sub	lr, fp, #4096	; 0x1000
   55dd4:	str	r1, [r0, #2056]	; 0x808
   55dd8:	str	r9, [r0, #2060]	; 0x80c
   55ddc:	sub	r0, lr, #32
   55de0:	str	r0, [r4]
   55de4:	mov	r0, #8
   55de8:	str	r0, [r4, #4]
   55dec:	mov	r0, r4
   55df0:	mov	r1, #0
   55df4:	str	r8, [r4, #12]
   55df8:	str	r7, [r4, #16]
   55dfc:	bl	1894 <deflate@plt>
   55e00:	ldr	r0, [r4, #16]
   55e04:	ldr	r3, [sl]
   55e08:	mov	r1, #1
   55e0c:	rsb	r2, r0, #2048	; 0x800
   55e10:	mov	r0, r8
   55e14:	bl	18ac <fwrite@plt>
   55e18:	add	r5, r0, r5
   55e1c:	ldr	r0, [r4, #16]
   55e20:	cmp	r0, #0
   55e24:	beq	55dec <WriteCompressedType+0x64c>
   55e28:	ldr	r0, [sl]
   55e2c:	cmp	r0, #0
   55e30:	beq	55eac <WriteCompressedType+0x70c>
   55e34:	mov	r0, #9
   55e38:	bl	1924 <Mat_SizeOf@plt>
   55e3c:	add	lr, sp, #5120	; 0x1400
   55e40:	mov	r7, #0
   55e44:	mov	r1, #9
   55e48:	add	r0, lr, #40	; 0x28
   55e4c:	add	lr, sp, #4096	; 0x1000
   55e50:	stm	r0, {r1, r7}
   55e54:	str	r0, [r4]
   55e58:	mov	r0, #8
   55e5c:	mov	r1, #1024	; 0x400
   55e60:	add	r9, lr, #40	; 0x28
   55e64:	str	r0, [r4, #4]
   55e68:	str	r9, [r4, #12]
   55e6c:	str	r1, [r4, #16]
   55e70:	mov	r0, r4
   55e74:	mov	r1, #0
   55e78:	bl	1894 <deflate@plt>
   55e7c:	ldr	r0, [r4, #16]
   55e80:	ldr	r3, [sl]
   55e84:	mov	r1, #1
   55e88:	rsb	r2, r0, #1024	; 0x400
   55e8c:	mov	r0, r9
   55e90:	bl	18ac <fwrite@plt>
   55e94:	add	r7, r0, r7
   55e98:	ldr	r0, [r4, #16]
   55e9c:	mov	r1, #1024	; 0x400
   55ea0:	cmp	r0, #0
   55ea4:	beq	55e68 <WriteCompressedType+0x6c8>
   55ea8:	b	55eb0 <WriteCompressedType+0x710>
   55eac:	mov	r7, #0
   55eb0:	add	r0, r7, r5
   55eb4:	mov	r7, #2048	; 0x800
   55eb8:	ldr	r5, [sp, #28]
   55ebc:	add	r6, r0, r6
   55ec0:	ldr	r0, [sp, #32]
   55ec4:	add	r5, r5, #1
   55ec8:	cmp	r5, r0
   55ecc:	bcc	55bec <WriteCompressedType+0x44c>
   55ed0:	b	56198 <WriteCompressedType+0x9f8>
   55ed4:	mov	r6, #0
   55ed8:	ldr	r5, [r7, #8]
   55edc:	ldr	r2, [r7, #40]	; 0x28
   55ee0:	cmp	sl, #0
   55ee4:	ldr	r9, [sp, #36]	; 0x24
   55ee8:	str	r6, [fp, #-2076]	; 0xfffff7e4
   55eec:	str	r6, [fp, #-2080]	; 0xfffff7e0
   55ef0:	ldrne	r0, [sl]
   55ef4:	cmpne	r0, #0
   55ef8:	beq	56198 <WriteCompressedType+0x9f8>
   55efc:	cmp	r5, #17
   55f00:	bhi	56198 <WriteCompressedType+0x9f8>
   55f04:	movw	r1, #20
   55f08:	mov	r0, #1
   55f0c:	movt	r1, #3
   55f10:	tst	r1, r0, lsl r5
   55f14:	beq	561a4 <WriteCompressedType+0xa04>
   55f18:	mov	r0, r5
   55f1c:	str	r2, [sp, #28]
   55f20:	bl	1924 <Mat_SizeOf@plt>
   55f24:	cmp	r5, #2
   55f28:	add	lr, sp, #5120	; 0x1400
   55f2c:	mul	r2, r0, r9
   55f30:	mov	r6, #0
   55f34:	mov	r8, #1024	; 0x400
   55f38:	add	r0, lr, #40	; 0x28
   55f3c:	movweq	r5, #16
   55f40:	add	lr, sp, #4096	; 0x1000
   55f44:	str	r5, [r0]
   55f48:	mov	r1, r0
   55f4c:	str	r2, [r0, #4]
   55f50:	mov	r5, r2
   55f54:	add	r7, lr, #40	; 0x28
   55f58:	mov	r0, #8
   55f5c:	str	r1, [r4]
   55f60:	str	r0, [r4, #4]
   55f64:	mov	r0, r4
   55f68:	mov	r1, #0
   55f6c:	str	r7, [r4, #12]
   55f70:	str	r8, [r4, #16]
   55f74:	bl	1894 <deflate@plt>
   55f78:	ldr	r0, [r4, #16]
   55f7c:	ldr	r3, [sl]
   55f80:	mov	r1, #1
   55f84:	rsb	r2, r0, #1024	; 0x400
   55f88:	mov	r0, r7
   55f8c:	bl	18ac <fwrite@plt>
   55f90:	add	r6, r0, r6
   55f94:	ldr	r0, [r4, #16]
   55f98:	cmp	r0, #0
   55f9c:	beq	55f64 <WriteCompressedType+0x7c4>
   55fa0:	ldr	r0, [sp, #28]
   55fa4:	cmp	r0, #0
   55fa8:	beq	56198 <WriteCompressedType+0x9f8>
   55fac:	cmp	r9, #1
   55fb0:	blt	56198 <WriteCompressedType+0x9f8>
   55fb4:	str	r0, [r4]
   55fb8:	mov	r8, r5
   55fbc:	str	r5, [r4, #4]
   55fc0:	mov	r5, #1024	; 0x400
   55fc4:	mov	r0, r4
   55fc8:	mov	r1, #0
   55fcc:	str	r7, [r4, #12]
   55fd0:	str	r5, [r4, #16]
   55fd4:	bl	1894 <deflate@plt>
   55fd8:	ldr	r0, [r4, #16]
   55fdc:	ldr	r3, [sl]
   55fe0:	mov	r1, #1
   55fe4:	rsb	r2, r0, #1024	; 0x400
   55fe8:	mov	r0, r7
   55fec:	bl	18ac <fwrite@plt>
   55ff0:	add	r6, r0, r6
   55ff4:	ldr	r0, [r4, #16]
   55ff8:	cmp	r0, #0
   55ffc:	beq	55fc4 <WriteCompressedType+0x824>
   56000:	asr	r0, r8, #31
   56004:	add	r0, r8, r0, lsr #29
   56008:	bic	r0, r0, #7
   5600c:	subs	r0, r8, r0
   56010:	beq	56198 <WriteCompressedType+0x9f8>
   56014:	sub	r1, fp, #2080	; 0x820
   56018:	mov	r5, #1024	; 0x400
   5601c:	rsb	r0, r0, #8
   56020:	str	r1, [r4]
   56024:	str	r0, [r4, #4]
   56028:	mov	r0, r4
   5602c:	mov	r1, #0
   56030:	str	r7, [r4, #12]
   56034:	str	r5, [r4, #16]
   56038:	bl	1894 <deflate@plt>
   5603c:	ldr	r0, [r4, #16]
   56040:	ldr	r3, [sl]
   56044:	mov	r1, #1
   56048:	rsb	r2, r0, #1024	; 0x400
   5604c:	mov	r0, r7
   56050:	bl	18ac <fwrite@plt>
   56054:	add	r6, r0, r6
   56058:	ldr	r0, [r4, #16]
   5605c:	cmp	r0, #0
   56060:	beq	56028 <WriteCompressedType+0x888>
   56064:	b	56198 <WriteCompressedType+0x9f8>
   56068:	ldr	r5, [r7, #40]	; 0x28
   5606c:	mov	r8, #5
   56070:	mov	r0, sl
   56074:	mov	r1, r4
   56078:	ldmib	r5, {r2, r3}
   5607c:	str	r8, [sp]
   56080:	bl	586cc <WriteCompressedData>
   56084:	ldr	r2, [r5, #12]
   56088:	ldr	r3, [r5, #16]
   5608c:	mov	r6, r0
   56090:	mov	r0, sl
   56094:	mov	r1, r4
   56098:	str	r8, [sp]
   5609c:	bl	586cc <WriteCompressedData>
   560a0:	add	r8, r0, r6
   560a4:	ldr	r0, [r7, #20]
   560a8:	cmp	r0, #0
   560ac:	beq	56178 <WriteCompressedType+0x9d8>
   560b0:	ldr	r6, [r5, #24]
   560b4:	ldr	r0, [r7, #8]
   560b8:	ldr	r3, [r5, #20]
   560bc:	mov	r1, r4
   560c0:	ldr	r2, [r6]
   560c4:	str	r0, [sp]
   560c8:	mov	r0, sl
   560cc:	bl	586cc <WriteCompressedData>
   560d0:	ldr	r1, [r7, #8]
   560d4:	ldr	r3, [r5, #20]
   560d8:	ldr	r2, [r6, #4]
   560dc:	add	r5, r0, r8
   560e0:	mov	r0, sl
   560e4:	str	r1, [sp]
   560e8:	mov	r1, r4
   560ec:	bl	586cc <WriteCompressedData>
   560f0:	add	r6, r5, r0
   560f4:	mov	r0, r6
   560f8:	sub	sp, fp, #28
   560fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   56100:	.word	0x00000006
   56104:	.word	0x00000008
   56108:	.word	0x00000006
   5610c:	.word	0x00000000
   56110:	add	r0, pc, #312	; 0x138
   56114:	add	lr, sp, #2048	; 0x800
   56118:	mov	r6, #0
   5611c:	vld1.64	{d16-d17}, [r0 :128]
   56120:	mov	r0, #16
   56124:	add	r7, lr, #40	; 0x28
   56128:	vst1.64	{d16-d17}, [r5]
   5612c:	str	r5, [r4]
   56130:	mov	r5, #2048	; 0x800
   56134:	str	r0, [r4, #4]
   56138:	mov	r0, r4
   5613c:	mov	r1, #0
   56140:	str	r7, [r4, #12]
   56144:	str	r5, [r4, #16]
   56148:	bl	1894 <deflate@plt>
   5614c:	ldr	r0, [r4, #16]
   56150:	ldr	r3, [sl]
   56154:	mov	r1, #1
   56158:	rsb	r2, r0, #2048	; 0x800
   5615c:	mov	r0, r7
   56160:	bl	18ac <fwrite@plt>
   56164:	add	r6, r0, r6
   56168:	ldr	r0, [r4, #16]
   5616c:	cmp	r0, #0
   56170:	beq	56138 <WriteCompressedType+0x998>
   56174:	b	56198 <WriteCompressedType+0x9f8>
   56178:	ldr	r0, [r7, #8]
   5617c:	ldr	r3, [r5, #20]
   56180:	ldr	r2, [r5, #24]
   56184:	mov	r1, r4
   56188:	str	r0, [sp]
   5618c:	mov	r0, sl
   56190:	bl	586cc <WriteCompressedData>
   56194:	add	r6, r0, r8
   56198:	mov	r0, r6
   5619c:	sub	sp, fp, #28
   561a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   561a4:	cmp	r5, #0
   561a8:	bne	56198 <WriteCompressedType+0x9f8>
   561ac:	add	lr, sp, #5120	; 0x1400
   561b0:	mov	r0, #4
   561b4:	lsl	r1, r9, #1
   561b8:	mov	r6, #0
   561bc:	mov	r5, #1024	; 0x400
   561c0:	add	r2, lr, #40	; 0x28
   561c4:	add	lr, sp, #4096	; 0x1000
   561c8:	stm	r2, {r0, r1}
   561cc:	add	r7, lr, #40	; 0x28
   561d0:	mov	r0, #8
   561d4:	str	r2, [r4]
   561d8:	str	r0, [r4, #4]
   561dc:	mov	r0, r4
   561e0:	mov	r1, #0
   561e4:	str	r7, [r4, #12]
   561e8:	str	r5, [r4, #16]
   561ec:	bl	1894 <deflate@plt>
   561f0:	ldr	r0, [r4, #16]
   561f4:	ldr	r3, [sl]
   561f8:	mov	r1, #1
   561fc:	rsb	r2, r0, #1024	; 0x400
   56200:	mov	r0, r7
   56204:	bl	18ac <fwrite@plt>
   56208:	add	r6, r0, r6
   5620c:	ldr	r0, [r4, #16]
   56210:	cmp	r0, #0
   56214:	beq	561dc <WriteCompressedType+0xa3c>
   56218:	b	56198 <WriteCompressedType+0x9f8>
   5621c:	mov	r6, #0
   56220:	mov	r0, #0
   56224:	add	r0, r0, #1
   56228:	cmp	r0, r9
   5622c:	bcc	56224 <WriteCompressedType+0xa84>
   56230:	b	56198 <WriteCompressedType+0x9f8>
   56234:	mov	r6, #0
   56238:	mov	r0, #0
   5623c:	add	r0, r0, #1
   56240:	cmp	r0, r9
   56244:	bcc	5623c <WriteCompressedType+0xa9c>
   56248:	b	56198 <WriteCompressedType+0x9f8>
   5624c:	nop	{0}
   56250:	.word	0x00040005
   56254:	.word	0x00000001
   56258:	.word	0x00000001
   5625c:	.word	0x00000000
   56260:	.word	0x0000a3f8

00056264 <Mat_VarReadNextInfo5>:
   56264:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   56268:	add	fp, sp, #28
   5626c:	sub	sp, sp, #84	; 0x54
   56270:	mov	r4, #0
   56274:	cmp	r0, #0
   56278:	beq	56380 <Mat_VarReadNextInfo5+0x11c>
   5627c:	mov	r5, r0
   56280:	ldr	r0, [r0]
   56284:	bl	1840 <ftell@plt>
   56288:	cmn	r0, #1
   5628c:	beq	5638c <Mat_VarReadNextInfo5+0x128>
   56290:	ldr	r3, [r5]
   56294:	mov	r9, r0
   56298:	sub	r0, fp, #36	; 0x24
   5629c:	mov	r1, #4
   562a0:	mov	r2, #1
   562a4:	bl	18b8 <fread@plt>
   562a8:	cmp	r0, #0
   562ac:	beq	56380 <Mat_VarReadNextInfo5+0x11c>
   562b0:	ldr	r3, [r5]
   562b4:	sub	r0, fp, #40	; 0x28
   562b8:	mov	r1, #4
   562bc:	mov	r2, #1
   562c0:	bl	18b8 <fread@plt>
   562c4:	ldr	r0, [r5, #20]
   562c8:	cmp	r0, #0
   562cc:	beq	562e0 <Mat_VarReadNextInfo5+0x7c>
   562d0:	sub	r0, fp, #36	; 0x24
   562d4:	bl	1bf0 <Mat_int32Swap>
   562d8:	sub	r0, fp, #40	; 0x28
   562dc:	bl	1bf0 <Mat_int32Swap>
   562e0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   562e4:	cmp	r1, #14
   562e8:	beq	563a8 <Mat_VarReadNextInfo5+0x144>
   562ec:	cmp	r1, #15
   562f0:	bne	564a8 <Mat_VarReadNextInfo5+0x244>
   562f4:	add	r1, sp, #8
   562f8:	vmov.i32	q8, #0	; 0x00000000
   562fc:	mov	r0, #48	; 0x30
   56300:	mov	r2, r1
   56304:	vst1.64	{d16-d17}, [r2], r0
   56308:	add	r0, r1, #32
   5630c:	vst1.64	{d16-d17}, [r0]
   56310:	add	r0, r1, #16
   56314:	vst1.64	{d16-d17}, [r2]
   56318:	vst1.64	{d16-d17}, [r0]
   5631c:	bl	18a0 <Mat_VarCalloc@plt>
   56320:	mov	r4, r0
   56324:	mov	r0, #1
   56328:	mov	r1, #56	; 0x38
   5632c:	str	r0, [r4, #48]	; 0x30
   56330:	mov	r0, #1
   56334:	bl	1798 <calloc@plt>
   56338:	ldr	r1, [r4, #52]	; 0x34
   5633c:	mov	r2, #56	; 0x38
   56340:	str	r0, [r1, #12]
   56344:	ldr	r1, [pc, #1696]	; 569ec <Mat_VarReadNextInfo5+0x788>
   56348:	add	r1, pc, r1
   5634c:	bl	19d8 <inflateInit_@plt>
   56350:	cmp	r0, #0
   56354:	beq	5651c <Mat_VarReadNextInfo5+0x2b8>
   56358:	mov	r6, r0
   5635c:	mov	r0, r4
   56360:	bl	1918 <Mat_VarFree@plt>
   56364:	mov	r0, r6
   56368:	bl	1888 <zError@plt>
   5636c:	mov	r1, r0
   56370:	ldr	r0, [pc, #1656]	; 569f0 <Mat_VarReadNextInfo5+0x78c>
   56374:	add	r0, pc, r0
   56378:	bl	19b4 <Mat_Critical@plt>
   5637c:	mov	r4, #0
   56380:	mov	r0, r4
   56384:	sub	sp, fp, #28
   56388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5638c:	ldr	r0, [pc, #1620]	; 569e8 <Mat_VarReadNextInfo5+0x784>
   56390:	add	r0, pc, r0
   56394:	bl	19b4 <Mat_Critical@plt>
   56398:	mov	r4, #0
   5639c:	mov	r0, r4
   563a0:	sub	sp, fp, #28
   563a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   563a8:	bl	18a0 <Mat_VarCalloc@plt>
   563ac:	ldr	r3, [r5]
   563b0:	add	r7, sp, #8
   563b4:	mov	r4, r0
   563b8:	mov	r1, #4
   563bc:	mov	r2, #6
   563c0:	mov	r0, r7
   563c4:	bl	18b8 <fread@plt>
   563c8:	ldr	r0, [r5, #20]
   563cc:	cmp	r0, #0
   563d0:	beq	56404 <Mat_VarReadNextInfo5+0x1a0>
   563d4:	mov	r0, r7
   563d8:	bl	1c04 <Mat_uint32Swap>
   563dc:	add	r0, r7, #4
   563e0:	bl	1c04 <Mat_uint32Swap>
   563e4:	add	r0, r7, #8
   563e8:	bl	1c04 <Mat_uint32Swap>
   563ec:	add	r0, r7, #12
   563f0:	bl	1c04 <Mat_uint32Swap>
   563f4:	add	r0, r7, #16
   563f8:	bl	1c04 <Mat_uint32Swap>
   563fc:	add	r0, r7, #20
   56400:	bl	1c04 <Mat_uint32Swap>
   56404:	ldr	r0, [sp, #8]
   56408:	cmp	r0, #6
   5640c:	bne	56440 <Mat_VarReadNextInfo5+0x1dc>
   56410:	ldr	r0, [sp, #16]
   56414:	add	ip, r4, #16
   56418:	and	r1, r0, #2048	; 0x800
   5641c:	and	r2, r0, #1024	; 0x400
   56420:	and	r3, r0, #512	; 0x200
   56424:	uxtb	r0, r0
   56428:	cmp	r0, #18
   5642c:	movcs	r0, #0
   56430:	stm	ip, {r0, r1, r2, r3}
   56434:	cmp	r0, #5
   56438:	ldreq	r0, [sp, #20]
   5643c:	streq	r0, [r4]
   56440:	ldr	r2, [sp, #24]
   56444:	ldr	r3, [sp, #28]
   56448:	mov	r0, r5
   5644c:	mov	r1, r4
   56450:	bl	582b0 <ReadRankDims>
   56454:	ldr	r3, [r5]
   56458:	add	r8, sp, #8
   5645c:	mov	r1, #4
   56460:	mov	r2, #2
   56464:	mov	r0, r8
   56468:	bl	18b8 <fread@plt>
   5646c:	ldr	r0, [r5, #20]
   56470:	cmp	r0, #0
   56474:	beq	56480 <Mat_VarReadNextInfo5+0x21c>
   56478:	add	r0, sp, #8
   5647c:	bl	1c04 <Mat_uint32Swap>
   56480:	ldr	r0, [sp, #8]
   56484:	cmp	r0, #1
   56488:	bne	564c0 <Mat_VarReadNextInfo5+0x25c>
   5648c:	ldr	r0, [r5, #20]
   56490:	cmp	r0, #0
   56494:	beq	56564 <Mat_VarReadNextInfo5+0x300>
   56498:	add	r0, r8, #4
   5649c:	bl	1c04 <Mat_uint32Swap>
   564a0:	mov	r6, r0
   564a4:	b	56568 <Mat_VarReadNextInfo5+0x304>
   564a8:	ldr	r0, [pc, #1360]	; 56a00 <Mat_VarReadNextInfo5+0x79c>
   564ac:	add	r0, pc, r0
   564b0:	bl	19b4 <Mat_Critical@plt>
   564b4:	mov	r0, r4
   564b8:	sub	sp, fp, #28
   564bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   564c0:	lsr	r7, r0, #16
   564c4:	cmp	r7, #4
   564c8:	bhi	565dc <Mat_VarReadNextInfo5+0x378>
   564cc:	uxth	r0, r0
   564d0:	cmp	r0, #1
   564d4:	bne	565dc <Mat_VarReadNextInfo5+0x378>
   564d8:	cmp	r7, #0
   564dc:	beq	565dc <Mat_VarReadNextInfo5+0x378>
   564e0:	add	r0, r7, #1
   564e4:	bl	18d0 <malloc@plt>
   564e8:	cmp	r0, #0
   564ec:	str	r0, [r4, #36]	; 0x24
   564f0:	beq	565dc <Mat_VarReadNextInfo5+0x378>
   564f4:	add	r1, r8, #4
   564f8:	mov	r2, r7
   564fc:	bl	181c <memcpy@plt>
   56500:	ldr	r0, [r4, #36]	; 0x24
   56504:	mov	r1, #0
   56508:	strb	r1, [r0, r7]
   5650c:	ldr	r0, [r4, #16]
   56510:	cmp	r0, #1
   56514:	bne	565e8 <Mat_VarReadNextInfo5+0x384>
   56518:	b	56608 <Mat_VarReadNextInfo5+0x3a4>
   5651c:	add	r6, sp, #8
   56520:	mov	r0, r5
   56524:	mov	r1, r4
   56528:	mov	r2, r6
   5652c:	bl	2798 <InflateVarTag>
   56530:	mov	r7, r0
   56534:	ldr	r0, [r5, #20]
   56538:	cmp	r0, #0
   5653c:	beq	5668c <Mat_VarReadNextInfo5+0x428>
   56540:	mov	r0, r6
   56544:	bl	1c04 <Mat_uint32Swap>
   56548:	orr	r8, r6, #4
   5654c:	mov	r0, r8
   56550:	bl	1c04 <Mat_uint32Swap>
   56554:	ldr	r0, [sp, #8]
   56558:	cmp	r0, #14
   5655c:	beq	5669c <Mat_VarReadNextInfo5+0x438>
   56560:	b	56720 <Mat_VarReadNextInfo5+0x4bc>
   56564:	ldr	r6, [sp, #12]
   56568:	ands	r0, r6, #7
   5656c:	add	r1, r6, #8
   56570:	mov	r7, r6
   56574:	subne	r7, r1, r0
   56578:	add	r0, r7, #1
   5657c:	bl	18d0 <malloc@plt>
   56580:	cmp	r0, #0
   56584:	str	r0, [r4, #36]	; 0x24
   56588:	beq	565dc <Mat_VarReadNextInfo5+0x378>
   5658c:	ldr	r3, [r5]
   56590:	mov	r1, #1
   56594:	mov	r2, r7
   56598:	bl	18b8 <fread@plt>
   5659c:	mov	r1, r0
   565a0:	ldr	r0, [r4, #36]	; 0x24
   565a4:	cmp	r1, r7
   565a8:	bne	565c4 <Mat_VarReadNextInfo5+0x360>
   565ac:	mov	r1, #0
   565b0:	strb	r1, [r0, r6]
   565b4:	ldr	r0, [r4, #16]
   565b8:	cmp	r0, #1
   565bc:	bne	565e8 <Mat_VarReadNextInfo5+0x384>
   565c0:	b	56608 <Mat_VarReadNextInfo5+0x3a4>
   565c4:	bl	1804 <free@plt>
   565c8:	mov	r0, #0
   565cc:	str	r0, [r4, #36]	; 0x24
   565d0:	ldr	r0, [pc, #1060]	; 569fc <Mat_VarReadNextInfo5+0x798>
   565d4:	add	r0, pc, r0
   565d8:	bl	19b4 <Mat_Critical@plt>
   565dc:	ldr	r0, [r4, #16]
   565e0:	cmp	r0, #1
   565e4:	beq	56608 <Mat_VarReadNextInfo5+0x3a4>
   565e8:	cmp	r0, #16
   565ec:	beq	56618 <Mat_VarReadNextInfo5+0x3b4>
   565f0:	cmp	r0, #2
   565f4:	bne	569a0 <Mat_VarReadNextInfo5+0x73c>
   565f8:	mov	r0, r5
   565fc:	mov	r1, r4
   56600:	bl	56a04 <ReadNextStructField>
   56604:	b	569a0 <Mat_VarReadNextInfo5+0x73c>
   56608:	mov	r0, r5
   5660c:	mov	r1, r4
   56610:	bl	57800 <ReadNextCell>
   56614:	b	569a0 <Mat_VarReadNextInfo5+0x73c>
   56618:	mov	r0, #1
   5661c:	sub	r1, fp, #32
   56620:	str	r0, [fp, #-32]	; 0xffffffe0
   56624:	mov	r0, r4
   56628:	bl	5a144 <SafeMulDims>
   5662c:	mov	r0, #4
   56630:	mov	r2, #4
   56634:	str	r0, [r4, #12]
   56638:	mov	r0, r4
   5663c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   56640:	bl	5a1a4 <SafeMul>
   56644:	ldr	r0, [r4]
   56648:	bl	18d0 <malloc@plt>
   5664c:	cmp	r0, #0
   56650:	str	r0, [r4, #40]	; 0x28
   56654:	beq	56748 <Mat_VarReadNextInfo5+0x4e4>
   56658:	mov	r7, r0
   5665c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   56660:	cmp	r0, #0
   56664:	beq	569a0 <Mat_VarReadNextInfo5+0x73c>
   56668:	mov	r6, #0
   5666c:	mov	r0, r5
   56670:	bl	1a50 <Mat_VarReadNextInfo@plt>
   56674:	str	r0, [r7, r6, lsl #2]
   56678:	ldr	r0, [fp, #-32]	; 0xffffffe0
   5667c:	add	r6, r6, #1
   56680:	cmp	r6, r0
   56684:	bcc	5666c <Mat_VarReadNextInfo5+0x408>
   56688:	b	569a0 <Mat_VarReadNextInfo5+0x73c>
   5668c:	orr	r8, r6, #4
   56690:	ldr	r0, [sp, #8]
   56694:	cmp	r0, #14
   56698:	bne	56720 <Mat_VarReadNextInfo5+0x4bc>
   5669c:	add	r6, sp, #8
   566a0:	mov	r0, r5
   566a4:	mov	r1, r4
   566a8:	mov	r2, r6
   566ac:	bl	28fc <InflateArrayFlags>
   566b0:	ldr	r0, [r5, #20]
   566b4:	cmp	r0, #0
   566b8:	beq	566d4 <Mat_VarReadNextInfo5+0x470>
   566bc:	mov	r0, r6
   566c0:	bl	1c04 <Mat_uint32Swap>
   566c4:	add	r0, r6, #8
   566c8:	bl	1c04 <Mat_uint32Swap>
   566cc:	add	r0, r6, #12
   566d0:	bl	1c04 <Mat_uint32Swap>
   566d4:	ldr	r0, [sp, #8]
   566d8:	cmp	r0, #6
   566dc:	bne	56758 <Mat_VarReadNextInfo5+0x4f4>
   566e0:	ldr	r1, [sp, #16]
   566e4:	mov	sl, r4
   566e8:	uxtb	r0, r1
   566ec:	and	r2, r1, #2048	; 0x800
   566f0:	and	r3, r1, #1024	; 0x400
   566f4:	and	r1, r1, #512	; 0x200
   566f8:	cmp	r0, #18
   566fc:	movcs	r0, #0
   56700:	str	r0, [sl, #16]!
   56704:	cmp	r0, #5
   56708:	stmib	sl, {r2, r3}
   5670c:	str	r1, [sl, #12]
   56710:	bne	56760 <Mat_VarReadNextInfo5+0x4fc>
   56714:	ldr	r0, [sp, #20]
   56718:	str	r0, [r4]
   5671c:	b	56768 <Mat_VarReadNextInfo5+0x504>
   56720:	ldr	r0, [fp, #-40]	; 0xffffffd8
   56724:	mov	r2, #1
   56728:	sub	r1, r0, r7
   5672c:	ldr	r0, [r5]
   56730:	bl	1a2c <fseek@plt>
   56734:	mov	r0, r4
   56738:	bl	1918 <Mat_VarFree@plt>
   5673c:	ldr	r0, [pc, #688]	; 569f4 <Mat_VarReadNextInfo5+0x790>
   56740:	add	r0, pc, r0
   56744:	b	56394 <Mat_VarReadNextInfo5+0x130>
   56748:	mov	r0, #0
   5674c:	str	r0, [r4]
   56750:	str	r0, [r4, #12]
   56754:	b	569a0 <Mat_VarReadNextInfo5+0x73c>
   56758:	mov	sl, r4
   5675c:	ldr	r0, [sl, #16]!
   56760:	cmp	r0, #17
   56764:	beq	569c4 <Mat_VarReadNextInfo5+0x760>
   56768:	mov	r0, #0
   5676c:	add	r6, sp, #8
   56770:	mov	r1, r4
   56774:	mov	r3, #64	; 0x40
   56778:	str	r0, [fp, #-32]	; 0xffffffe0
   5677c:	sub	r0, fp, #32
   56780:	mov	r2, r6
   56784:	str	r0, [sp]
   56788:	mov	r0, r5
   5678c:	bl	2a60 <InflateRankDims>
   56790:	ldr	r0, [fp, #-32]	; 0xffffffe0
   56794:	mov	r1, #1
   56798:	cmp	r0, #0
   5679c:	addeq	r0, r6, #8
   567a0:	moveq	r1, #0
   567a4:	streq	r0, [fp, #-32]	; 0xffffffe0
   567a8:	str	r1, [sp, #4]
   567ac:	ldr	r0, [r5, #20]
   567b0:	cmp	r0, #0
   567b4:	beq	567c8 <Mat_VarReadNextInfo5+0x564>
   567b8:	add	r0, sp, #8
   567bc:	bl	1c04 <Mat_uint32Swap>
   567c0:	mov	r0, r8
   567c4:	bl	1c04 <Mat_uint32Swap>
   567c8:	ldr	r0, [sp, #8]
   567cc:	cmp	r0, #5
   567d0:	bne	56868 <Mat_VarReadNextInfo5+0x604>
   567d4:	ldr	r0, [sp, #12]
   567d8:	asr	r1, r0, #31
   567dc:	add	r0, r0, r1, lsr #30
   567e0:	asr	r1, r0, #2
   567e4:	bic	r0, r0, #3
   567e8:	str	r1, [r4, #4]
   567ec:	bl	18d0 <malloc@plt>
   567f0:	str	r0, [r4, #32]
   567f4:	ldr	r2, [r5, #20]
   567f8:	ldr	r1, [r4, #4]
   567fc:	cmp	r2, #0
   56800:	beq	56840 <Mat_VarReadNextInfo5+0x5dc>
   56804:	cmp	r1, #1
   56808:	blt	56868 <Mat_VarReadNextInfo5+0x604>
   5680c:	mov	r6, #0
   56810:	mov	r7, #0
   56814:	ldr	r0, [fp, #-32]	; 0xffffffe0
   56818:	add	r0, r0, r6
   5681c:	bl	1c04 <Mat_uint32Swap>
   56820:	ldr	r1, [r4, #32]
   56824:	add	r7, r7, #1
   56828:	str	r0, [r1, r6]
   5682c:	add	r6, r6, #4
   56830:	ldr	r0, [r4, #4]
   56834:	cmp	r7, r0
   56838:	blt	56814 <Mat_VarReadNextInfo5+0x5b0>
   5683c:	b	56868 <Mat_VarReadNextInfo5+0x604>
   56840:	cmp	r1, #1
   56844:	blt	56868 <Mat_VarReadNextInfo5+0x604>
   56848:	ldr	r2, [fp, #-32]	; 0xffffffe0
   5684c:	mov	r1, #0
   56850:	ldr	r3, [r2, r1, lsl #2]
   56854:	str	r3, [r0, r1, lsl #2]
   56858:	add	r1, r1, #1
   5685c:	ldr	r3, [r4, #4]
   56860:	cmp	r1, r3
   56864:	blt	56850 <Mat_VarReadNextInfo5+0x5ec>
   56868:	ldr	r0, [sp, #4]
   5686c:	cmp	r0, #0
   56870:	beq	5687c <Mat_VarReadNextInfo5+0x618>
   56874:	ldr	r0, [fp, #-32]	; 0xffffffe0
   56878:	bl	1804 <free@plt>
   5687c:	add	r2, sp, #8
   56880:	mov	r0, r5
   56884:	mov	r1, r4
   56888:	bl	2d70 <InflateVarNameTag>
   5688c:	ldr	r0, [r5, #20]
   56890:	cmp	r0, #0
   56894:	beq	568a0 <Mat_VarReadNextInfo5+0x63c>
   56898:	add	r0, sp, #8
   5689c:	bl	1c04 <Mat_uint32Swap>
   568a0:	ldr	r0, [sp, #8]
   568a4:	cmp	r0, #1
   568a8:	bne	568c8 <Mat_VarReadNextInfo5+0x664>
   568ac:	ldr	r0, [r5, #20]
   568b0:	cmp	r0, #0
   568b4:	beq	5690c <Mat_VarReadNextInfo5+0x6a8>
   568b8:	mov	r0, r8
   568bc:	bl	1c04 <Mat_uint32Swap>
   568c0:	mov	r7, r0
   568c4:	b	56910 <Mat_VarReadNextInfo5+0x6ac>
   568c8:	lsr	r7, r0, #16
   568cc:	cmp	r7, #4
   568d0:	bhi	56954 <Mat_VarReadNextInfo5+0x6f0>
   568d4:	uxth	r0, r0
   568d8:	cmp	r0, #1
   568dc:	bne	56954 <Mat_VarReadNextInfo5+0x6f0>
   568e0:	cmp	r7, #0
   568e4:	beq	56954 <Mat_VarReadNextInfo5+0x6f0>
   568e8:	add	r0, r7, #1
   568ec:	bl	18d0 <malloc@plt>
   568f0:	cmp	r0, #0
   568f4:	str	r0, [r4, #36]	; 0x24
   568f8:	beq	56954 <Mat_VarReadNextInfo5+0x6f0>
   568fc:	mov	r1, r8
   56900:	mov	r2, r7
   56904:	bl	181c <memcpy@plt>
   56908:	b	56948 <Mat_VarReadNextInfo5+0x6e4>
   5690c:	ldr	r7, [sp, #12]
   56910:	ands	r0, r7, #7
   56914:	add	r1, r7, #8
   56918:	mov	r6, r7
   5691c:	subne	r6, r1, r0
   56920:	add	r0, r6, #1
   56924:	bl	18d0 <malloc@plt>
   56928:	cmp	r0, #0
   5692c:	str	r0, [r4, #36]	; 0x24
   56930:	beq	56954 <Mat_VarReadNextInfo5+0x6f0>
   56934:	mov	r2, r0
   56938:	mov	r0, r5
   5693c:	mov	r1, r4
   56940:	mov	r3, r6
   56944:	bl	2ed4 <InflateVarName>
   56948:	ldr	r0, [r4, #36]	; 0x24
   5694c:	mov	r1, #0
   56950:	strb	r1, [r0, r7]
   56954:	ldr	r0, [sl]
   56958:	cmp	r0, #1
   5695c:	beq	56978 <Mat_VarReadNextInfo5+0x714>
   56960:	cmp	r0, #2
   56964:	bne	56984 <Mat_VarReadNextInfo5+0x720>
   56968:	mov	r0, r5
   5696c:	mov	r1, r4
   56970:	bl	56a04 <ReadNextStructField>
   56974:	b	56984 <Mat_VarReadNextInfo5+0x720>
   56978:	mov	r0, r5
   5697c:	mov	r1, r4
   56980:	bl	57800 <ReadNextCell>
   56984:	ldr	r1, [r4, #52]	; 0x34
   56988:	ldr	r0, [r5]
   5698c:	mov	r2, #1
   56990:	ldr	r1, [r1, #12]
   56994:	ldr	r1, [r1, #4]
   56998:	rsb	r1, r1, #0
   5699c:	bl	1a2c <fseek@plt>
   569a0:	ldr	r0, [r5]
   569a4:	bl	1840 <ftell@plt>
   569a8:	ldr	r1, [r4, #52]	; 0x34
   569ac:	cmn	r0, #1
   569b0:	str	r0, [r1]
   569b4:	bne	569c4 <Mat_VarReadNextInfo5+0x760>
   569b8:	ldr	r0, [pc, #56]	; 569f8 <Mat_VarReadNextInfo5+0x794>
   569bc:	add	r0, pc, r0
   569c0:	bl	19b4 <Mat_Critical@plt>
   569c4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   569c8:	mov	r2, #0
   569cc:	add	r0, r9, r0
   569d0:	add	r1, r0, #8
   569d4:	ldr	r0, [r5]
   569d8:	bl	1a2c <fseek@plt>
   569dc:	mov	r0, r4
   569e0:	sub	sp, fp, #28
   569e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   569e8:	.word	0x00009448
   569ec:	.word	0x000096e5
   569f0:	.word	0x000096d8
   569f4:	.word	0x000093ab
   569f8:	.word	0x00008e1c
   569fc:	.word	0x00009490
   56a00:	.word	0x000095e2

00056a04 <ReadNextStructField>:
   56a04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   56a08:	add	fp, sp, #28
   56a0c:	sub	sp, sp, #124	; 0x7c
   56a10:	mov	r9, r1
   56a14:	mov	r5, r0
   56a18:	mov	r0, #1
   56a1c:	sub	r1, fp, #32
   56a20:	str	r0, [fp, #-32]	; 0xffffffe0
   56a24:	mov	r0, r9
   56a28:	bl	5a144 <SafeMulDims>
   56a2c:	cmp	r0, #0
   56a30:	beq	56a50 <ReadNextStructField+0x4c>
   56a34:	ldr	r0, [pc, #3476]	; 577d0 <ReadNextStructField+0xdcc>
   56a38:	add	r0, pc, r0
   56a3c:	bl	19b4 <Mat_Critical@plt>
   56a40:	mov	r7, #0
   56a44:	mov	r0, r7
   56a48:	sub	sp, fp, #28
   56a4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   56a50:	ldr	r0, [r9, #48]	; 0x30
   56a54:	str	r5, [sp, #36]	; 0x24
   56a58:	cmp	r0, #1
   56a5c:	bne	56b44 <ReadNextStructField+0x140>
   56a60:	add	r6, sp, #48	; 0x30
   56a64:	vmov.i32	q8, #0	; 0x00000000
   56a68:	mov	r0, #48	; 0x30
   56a6c:	mov	r1, r6
   56a70:	mov	r2, r6
   56a74:	vst1.64	{d16-d17}, [r1], r0
   56a78:	add	r0, r6, #32
   56a7c:	vst1.64	{d16-d17}, [r0]
   56a80:	add	r0, r6, #16
   56a84:	vst1.64	{d16-d17}, [r1]
   56a88:	mov	r1, r9
   56a8c:	vst1.64	{d16-d17}, [r0]
   56a90:	mov	r0, r5
   56a94:	bl	34a4 <InflateFieldNameLength>
   56a98:	mov	r7, r0
   56a9c:	ldr	r0, [r5, #20]
   56aa0:	cmp	r0, #0
   56aa4:	beq	56ab8 <ReadNextStructField+0xb4>
   56aa8:	mov	r0, r6
   56aac:	bl	1c04 <Mat_uint32Swap>
   56ab0:	orr	r0, r6, #4
   56ab4:	bl	1c04 <Mat_uint32Swap>
   56ab8:	ldrh	r0, [sp, #48]	; 0x30
   56abc:	cmp	r0, #5
   56ac0:	bne	56bfc <ReadNextStructField+0x1f8>
   56ac4:	ldr	r8, [sp, #52]	; 0x34
   56ac8:	mov	r0, r5
   56acc:	mov	r1, r9
   56ad0:	mov	r2, r6
   56ad4:	str	r7, [sp, #32]
   56ad8:	bl	3608 <InflateFieldNamesTag>
   56adc:	mov	r4, r0
   56ae0:	ldr	r0, [r5, #20]
   56ae4:	orr	r6, r6, #4
   56ae8:	cmp	r0, #0
   56aec:	beq	56b00 <ReadNextStructField+0xfc>
   56af0:	add	r0, sp, #48	; 0x30
   56af4:	bl	1c04 <Mat_uint32Swap>
   56af8:	mov	r0, r6
   56afc:	bl	1c04 <Mat_uint32Swap>
   56b00:	ldr	r0, [sp, #32]
   56b04:	ldr	r7, [sp, #52]	; 0x34
   56b08:	add	r0, r4, r0
   56b0c:	udiv	r4, r7, r8
   56b10:	str	r0, [sp, #32]
   56b14:	mov	r0, #4
   56b18:	str	r0, [r9, #12]
   56b1c:	mul	r0, r4, r8
   56b20:	ands	r5, r0, #7
   56b24:	rsbne	r5, r5, #8
   56b28:	cmp	r8, r7
   56b2c:	bls	56c08 <ReadNextStructField+0x204>
   56b30:	ldr	r0, [r9, #52]	; 0x34
   56b34:	mov	r1, #0
   56b38:	str	r1, [r0, #4]
   56b3c:	str	r1, [r0, #8]
   56b40:	b	56ce8 <ReadNextStructField+0x2e4>
   56b44:	ldr	r3, [r5]
   56b48:	add	r6, sp, #48	; 0x30
   56b4c:	mov	r1, #4
   56b50:	mov	r2, #2
   56b54:	mov	r0, r6
   56b58:	bl	18b8 <fread@plt>
   56b5c:	mov	r7, r0
   56b60:	ldr	r0, [r5, #20]
   56b64:	cmp	r0, #0
   56b68:	beq	56b7c <ReadNextStructField+0x178>
   56b6c:	mov	r0, r6
   56b70:	bl	1c04 <Mat_uint32Swap>
   56b74:	add	r0, r6, #4
   56b78:	bl	1c04 <Mat_uint32Swap>
   56b7c:	ldrh	r0, [sp, #48]	; 0x30
   56b80:	cmp	r0, #5
   56b84:	bne	56bfc <ReadNextStructField+0x1f8>
   56b88:	ldr	r3, [r5]
   56b8c:	ldr	r4, [sp, #52]	; 0x34
   56b90:	mov	r0, r6
   56b94:	mov	r1, #4
   56b98:	mov	r2, #2
   56b9c:	mov	r8, #4
   56ba0:	bl	18b8 <fread@plt>
   56ba4:	mov	sl, r0
   56ba8:	ldr	r0, [r5, #20]
   56bac:	add	r6, r6, #4
   56bb0:	cmp	r0, #0
   56bb4:	beq	56bc8 <ReadNextStructField+0x1c4>
   56bb8:	add	r0, sp, #48	; 0x30
   56bbc:	bl	1c04 <Mat_uint32Swap>
   56bc0:	mov	r0, r6
   56bc4:	bl	1c04 <Mat_uint32Swap>
   56bc8:	ldr	r0, [sp, #52]	; 0x34
   56bcc:	str	r8, [r9, #12]
   56bd0:	add	r7, sl, r7
   56bd4:	str	r6, [sp, #40]	; 0x28
   56bd8:	ldr	r5, [r9, #52]	; 0x34
   56bdc:	udiv	sl, r0, r4
   56be0:	cmp	r4, r0
   56be4:	str	r0, [sp, #20]
   56be8:	bls	56d34 <ReadNextStructField+0x330>
   56bec:	mov	r0, #0
   56bf0:	str	r0, [r5, #4]
   56bf4:	str	r0, [r5, #8]
   56bf8:	b	56dbc <ReadNextStructField+0x3b8>
   56bfc:	ldr	r0, [pc, #3064]	; 577fc <ReadNextStructField+0xdf8>
   56c00:	add	r0, pc, r0
   56c04:	b	56e1c <ReadNextStructField+0x418>
   56c08:	add	r0, r5, r0
   56c0c:	bl	18d0 <malloc@plt>
   56c10:	cmp	r0, #0
   56c14:	beq	56ce8 <ReadNextStructField+0x2e4>
   56c18:	mov	r2, r0
   56c1c:	ldr	r0, [sp, #36]	; 0x24
   56c20:	mov	r1, r9
   56c24:	mov	r3, r4
   56c28:	str	r6, [sp, #28]
   56c2c:	str	r7, [sp, #24]
   56c30:	str	r8, [sp]
   56c34:	str	r5, [sp, #4]
   56c38:	mov	r6, r2
   56c3c:	bl	376c <InflateFieldNames>
   56c40:	ldr	r5, [r9, #52]	; 0x34
   56c44:	str	r0, [sp, #40]	; 0x28
   56c48:	mov	r0, r4
   56c4c:	mov	r1, #4
   56c50:	str	r4, [r5, #4]
   56c54:	bl	1798 <calloc@plt>
   56c58:	cmp	r0, #0
   56c5c:	str	r0, [r5, #8]
   56c60:	beq	56cc8 <ReadNextStructField+0x2c4>
   56c64:	sub	r5, r8, #1
   56c68:	mov	r7, r6
   56c6c:	mov	sl, #0
   56c70:	mov	r0, r8
   56c74:	bl	18d0 <malloc@plt>
   56c78:	ldr	r1, [r9, #52]	; 0x34
   56c7c:	ldr	r1, [r1, #8]
   56c80:	str	r0, [r1, sl, lsl #2]
   56c84:	ldr	r0, [r9, #52]	; 0x34
   56c88:	ldr	r0, [r0, #8]
   56c8c:	ldr	r0, [r0, sl, lsl #2]
   56c90:	cmp	r0, #0
   56c94:	beq	56cb8 <ReadNextStructField+0x2b4>
   56c98:	mov	r1, r7
   56c9c:	mov	r2, r8
   56ca0:	bl	181c <memcpy@plt>
   56ca4:	ldr	r0, [r9, #52]	; 0x34
   56ca8:	mov	r1, #0
   56cac:	ldr	r0, [r0, #8]
   56cb0:	ldr	r0, [r0, sl, lsl #2]
   56cb4:	strb	r1, [r0, r5]
   56cb8:	add	sl, sl, #1
   56cbc:	add	r7, r7, r8
   56cc0:	cmp	sl, r4
   56cc4:	bcc	56c70 <ReadNextStructField+0x26c>
   56cc8:	ldr	r0, [sp, #32]
   56ccc:	ldr	r1, [sp, #40]	; 0x28
   56cd0:	add	r0, r1, r0
   56cd4:	str	r0, [sp, #32]
   56cd8:	mov	r0, r6
   56cdc:	bl	1804 <free@plt>
   56ce0:	ldr	r6, [sp, #28]
   56ce4:	ldr	r7, [sp, #24]
   56ce8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   56cec:	sub	r0, fp, #36	; 0x24
   56cf0:	mov	r2, r4
   56cf4:	bl	5a1a4 <SafeMul>
   56cf8:	cmp	r0, #0
   56cfc:	bne	56d18 <ReadNextStructField+0x314>
   56d00:	ldr	r2, [r9, #12]
   56d04:	ldr	r1, [fp, #-36]	; 0xffffffdc
   56d08:	mov	r0, r9
   56d0c:	bl	5a1a4 <SafeMul>
   56d10:	cmp	r0, #0
   56d14:	beq	56e2c <ReadNextStructField+0x428>
   56d18:	ldr	r0, [pc, #2740]	; 577d4 <ReadNextStructField+0xdd0>
   56d1c:	add	r0, pc, r0
   56d20:	bl	19b4 <Mat_Critical@plt>
   56d24:	ldr	r7, [sp, #32]
   56d28:	mov	r0, r7
   56d2c:	sub	sp, fp, #28
   56d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   56d34:	mov	r0, sl
   56d38:	mov	r1, #4
   56d3c:	str	sl, [r5, #4]
   56d40:	bl	1798 <calloc@plt>
   56d44:	cmp	r0, #0
   56d48:	str	r0, [r5, #8]
   56d4c:	beq	56dbc <ReadNextStructField+0x3b8>
   56d50:	ldr	r5, [sp, #36]	; 0x24
   56d54:	sub	r6, r4, #1
   56d58:	mov	r8, #0
   56d5c:	mov	r0, r4
   56d60:	bl	18d0 <malloc@plt>
   56d64:	ldr	r1, [r9, #52]	; 0x34
   56d68:	ldr	r1, [r1, #8]
   56d6c:	str	r0, [r1, r8, lsl #2]
   56d70:	ldr	r0, [r9, #52]	; 0x34
   56d74:	ldr	r0, [r0, #8]
   56d78:	ldr	r0, [r0, r8, lsl #2]
   56d7c:	cmp	r0, #0
   56d80:	beq	56dac <ReadNextStructField+0x3a8>
   56d84:	ldr	r3, [r5]
   56d88:	mov	r1, #1
   56d8c:	mov	r2, r4
   56d90:	bl	18b8 <fread@plt>
   56d94:	ldr	r1, [r9, #52]	; 0x34
   56d98:	add	r7, r0, r7
   56d9c:	mov	r2, #0
   56da0:	ldr	r1, [r1, #8]
   56da4:	ldr	r1, [r1, r8, lsl #2]
   56da8:	strb	r2, [r1, r6]
   56dac:	add	r8, r8, #1
   56db0:	cmp	r8, sl
   56db4:	bcc	56d5c <ReadNextStructField+0x358>
   56db8:	b	56dc0 <ReadNextStructField+0x3bc>
   56dbc:	ldr	r5, [sp, #36]	; 0x24
   56dc0:	mul	r0, sl, r4
   56dc4:	ands	r1, r0, #7
   56dc8:	beq	56de4 <ReadNextStructField+0x3e0>
   56dcc:	ldr	r0, [r5]
   56dd0:	rsb	r5, r1, #8
   56dd4:	mov	r2, #1
   56dd8:	mov	r1, r5
   56ddc:	bl	1a2c <fseek@plt>
   56de0:	add	r7, r7, r5
   56de4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   56de8:	sub	r0, fp, #36	; 0x24
   56dec:	mov	r2, sl
   56df0:	bl	5a1a4 <SafeMul>
   56df4:	cmp	r0, #0
   56df8:	bne	56e14 <ReadNextStructField+0x410>
   56dfc:	ldr	r2, [r9, #12]
   56e00:	ldr	r1, [fp, #-36]	; 0xffffffdc
   56e04:	mov	r0, r9
   56e08:	bl	5a1a4 <SafeMul>
   56e0c:	cmp	r0, #0
   56e10:	beq	57404 <ReadNextStructField+0xa00>
   56e14:	ldr	r0, [pc, #2516]	; 577f0 <ReadNextStructField+0xdec>
   56e18:	add	r0, pc, r0
   56e1c:	bl	19b4 <Mat_Critical@plt>
   56e20:	mov	r0, r7
   56e24:	sub	sp, fp, #28
   56e28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   56e2c:	ldr	r0, [r9]
   56e30:	cmp	r0, #0
   56e34:	beq	57754 <ReadNextStructField+0xd50>
   56e38:	ldr	r1, [r9, #12]
   56e3c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   56e40:	bl	1798 <calloc@plt>
   56e44:	cmp	r0, #0
   56e48:	str	r0, [r9, #40]	; 0x28
   56e4c:	beq	57764 <ReadNextStructField+0xd60>
   56e50:	ldr	r1, [fp, #-32]	; 0xffffffe0
   56e54:	str	r6, [sp, #28]
   56e58:	str	r0, [sp, #40]	; 0x28
   56e5c:	str	r7, [sp, #24]
   56e60:	cmp	r1, #0
   56e64:	beq	56ea8 <ReadNextStructField+0x4a4>
   56e68:	cmp	r8, r7
   56e6c:	bhi	56ea8 <ReadNextStructField+0x4a4>
   56e70:	mov	r7, #0
   56e74:	mul	r5, r7, r4
   56e78:	mov	r6, #0
   56e7c:	add	sl, r6, r5
   56e80:	bl	18a0 <Mat_VarCalloc@plt>
   56e84:	ldr	r1, [sp, #40]	; 0x28
   56e88:	add	r6, r6, #1
   56e8c:	cmp	r6, r4
   56e90:	str	r0, [r1, sl, lsl #2]
   56e94:	bcc	56e7c <ReadNextStructField+0x478>
   56e98:	ldr	r1, [fp, #-32]	; 0xffffffe0
   56e9c:	add	r7, r7, #1
   56ea0:	cmp	r7, r1
   56ea4:	bcc	56e74 <ReadNextStructField+0x470>
   56ea8:	cmp	r1, #0
   56eac:	add	sl, sp, #48	; 0x30
   56eb0:	ldrne	r0, [r9, #52]	; 0x34
   56eb4:	ldrne	r0, [r0, #8]
   56eb8:	cmpne	r0, #0
   56ebc:	beq	56f1c <ReadNextStructField+0x518>
   56ec0:	ldr	r0, [sp, #24]
   56ec4:	cmp	r8, r0
   56ec8:	bhi	56f1c <ReadNextStructField+0x518>
   56ecc:	mov	r8, #0
   56ed0:	mul	r7, r8, r4
   56ed4:	mov	r5, #0
   56ed8:	ldr	r0, [r9, #52]	; 0x34
   56edc:	ldr	r0, [r0, #8]
   56ee0:	ldr	r0, [r0, r5, lsl #2]
   56ee4:	cmp	r0, #0
   56ee8:	beq	56f00 <ReadNextStructField+0x4fc>
   56eec:	add	r6, r5, r7
   56ef0:	bl	1864 <strdup@plt>
   56ef4:	ldr	r1, [sp, #40]	; 0x28
   56ef8:	ldr	r1, [r1, r6, lsl #2]
   56efc:	str	r0, [r1, #36]	; 0x24
   56f00:	add	r5, r5, #1
   56f04:	cmp	r5, r4
   56f08:	bcc	56ed8 <ReadNextStructField+0x4d4>
   56f0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   56f10:	add	r8, r8, #1
   56f14:	cmp	r8, r0
   56f18:	bcc	56ed0 <ReadNextStructField+0x4cc>
   56f1c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   56f20:	cmp	r0, #0
   56f24:	beq	57770 <ReadNextStructField+0xd6c>
   56f28:	ldr	r7, [sp, #32]
   56f2c:	add	r0, sl, #12
   56f30:	mov	r5, #0
   56f34:	str	r0, [sp, #20]
   56f38:	add	r0, sl, #8
   56f3c:	str	r0, [sp, #24]
   56f40:	ldr	r6, [sp, #36]	; 0x24
   56f44:	mov	r1, r9
   56f48:	mov	r2, sl
   56f4c:	mov	r0, r6
   56f50:	bl	2798 <InflateVarTag>
   56f54:	mov	r4, r0
   56f58:	ldr	r0, [r6, #20]
   56f5c:	cmp	r0, #0
   56f60:	beq	56f74 <ReadNextStructField+0x570>
   56f64:	mov	r0, sl
   56f68:	bl	1c04 <Mat_uint32Swap>
   56f6c:	ldr	r0, [sp, #28]
   56f70:	bl	1c04 <Mat_uint32Swap>
   56f74:	ldr	r0, [sp, #48]	; 0x30
   56f78:	add	r7, r4, r7
   56f7c:	cmp	r0, #14
   56f80:	bne	57040 <ReadNextStructField+0x63c>
   56f84:	ldr	r4, [sp, #40]	; 0x28
   56f88:	ldr	sl, [sp, #52]	; 0x34
   56f8c:	ldr	r0, [r4, r5, lsl #2]
   56f90:	cmp	sl, #0
   56f94:	beq	57068 <ReadNextStructField+0x664>
   56f98:	ldr	r6, [sp, #36]	; 0x24
   56f9c:	mov	r1, #1
   56fa0:	add	r8, sp, #48	; 0x30
   56fa4:	str	r1, [r0, #48]	; 0x30
   56fa8:	mov	r1, r9
   56fac:	mov	r2, r8
   56fb0:	mov	r0, r6
   56fb4:	bl	28fc <InflateArrayFlags>
   56fb8:	mov	r4, r0
   56fbc:	ldr	r0, [r6, #20]
   56fc0:	cmp	r0, #0
   56fc4:	beq	56fe8 <ReadNextStructField+0x5e4>
   56fc8:	mov	r0, r8
   56fcc:	bl	1c04 <Mat_uint32Swap>
   56fd0:	ldr	r0, [sp, #28]
   56fd4:	bl	1c04 <Mat_uint32Swap>
   56fd8:	ldr	r0, [sp, #24]
   56fdc:	bl	1c04 <Mat_uint32Swap>
   56fe0:	ldr	r0, [sp, #20]
   56fe4:	bl	1c04 <Mat_uint32Swap>
   56fe8:	ldr	r1, [sp, #48]	; 0x30
   56fec:	add	r8, r4, r7
   56ff0:	sub	r4, sl, #16
   56ff4:	cmp	r1, #6
   56ff8:	bne	57080 <ReadNextStructField+0x67c>
   56ffc:	ldr	r0, [sp, #40]	; 0x28
   57000:	mov	r6, #0
   57004:	ldr	r1, [r0, r5, lsl #2]
   57008:	ldr	r0, [sp, #56]	; 0x38
   5700c:	and	r2, r0, #2048	; 0x800
   57010:	and	r3, r0, #1024	; 0x400
   57014:	and	r7, r0, #512	; 0x200
   57018:	uxtb	r0, r0
   5701c:	add	ip, r1, #16
   57020:	cmp	r0, #18
   57024:	movcs	r0, r6
   57028:	cmp	r0, #5
   5702c:	stm	ip, {r0, r2, r3, r7}
   57030:	bne	570b0 <ReadNextStructField+0x6ac>
   57034:	ldr	r0, [sp, #60]	; 0x3c
   57038:	str	r0, [r1]
   5703c:	b	570b8 <ReadNextStructField+0x6b4>
   57040:	ldr	r4, [sp, #40]	; 0x28
   57044:	ldr	r0, [r4, r5, lsl #2]
   57048:	bl	1918 <Mat_VarFree@plt>
   5704c:	mov	r0, #0
   57050:	mov	r1, r5
   57054:	str	r0, [r4, r5, lsl #2]
   57058:	ldr	r0, [pc, #1916]	; 577dc <ReadNextStructField+0xdd8>
   5705c:	add	r0, pc, r0
   57060:	bl	19b4 <Mat_Critical@plt>
   57064:	b	573f0 <ReadNextStructField+0x9ec>
   57068:	ldr	r0, [r0, #52]	; 0x34
   5706c:	bl	1804 <free@plt>
   57070:	ldr	r0, [r4, r5, lsl #2]
   57074:	mov	r1, #0
   57078:	str	r1, [r0, #52]	; 0x34
   5707c:	b	573ec <ReadNextStructField+0x9e8>
   57080:	ldr	r0, [pc, #1880]	; 577e0 <ReadNextStructField+0xddc>
   57084:	add	r0, pc, r0
   57088:	bl	19b4 <Mat_Critical@plt>
   5708c:	ldr	r0, [r9, #52]	; 0x34
   57090:	mov	r2, r4
   57094:	ldr	r1, [r0, #12]
   57098:	ldr	r0, [sp, #36]	; 0x24
   5709c:	bl	23b4 <InflateSkip>
   570a0:	add	r8, r0, r8
   570a4:	ldr	r0, [sp, #40]	; 0x28
   570a8:	ldr	r0, [r0, r5, lsl #2]
   570ac:	ldr	r0, [r0, #16]
   570b0:	cmp	r0, #17
   570b4:	beq	573d4 <ReadNextStructField+0x9d0>
   570b8:	ldr	r7, [sp, #36]	; 0x24
   570bc:	mov	r0, #0
   570c0:	mov	r1, r9
   570c4:	add	r2, sp, #48	; 0x30
   570c8:	mov	r3, #64	; 0x40
   570cc:	str	r0, [sp, #44]	; 0x2c
   570d0:	add	r0, sp, #44	; 0x2c
   570d4:	str	r0, [sp]
   570d8:	mov	r0, r7
   570dc:	bl	2a60 <InflateRankDims>
   570e0:	mov	r6, r0
   570e4:	ldr	r0, [sp, #44]	; 0x2c
   570e8:	mov	r4, #1
   570ec:	cmp	r0, #0
   570f0:	ldreq	r0, [sp, #24]
   570f4:	moveq	r4, #0
   570f8:	streq	r0, [sp, #44]	; 0x2c
   570fc:	ldr	r0, [r7, #20]
   57100:	cmp	r0, #0
   57104:	beq	57118 <ReadNextStructField+0x714>
   57108:	add	r0, sp, #48	; 0x30
   5710c:	bl	1c04 <Mat_uint32Swap>
   57110:	ldr	r0, [sp, #28]
   57114:	bl	1c04 <Mat_uint32Swap>
   57118:	ldr	r0, [sp, #48]	; 0x30
   5711c:	sub	r7, sl, #24
   57120:	str	r4, [sp, #32]
   57124:	cmp	r0, #5
   57128:	bne	571c0 <ReadNextStructField+0x7bc>
   5712c:	ldr	sl, [sp, #40]	; 0x28
   57130:	mov	r4, r7
   57134:	ldr	r7, [sp, #52]	; 0x34
   57138:	str	r6, [sp, #12]
   5713c:	ldr	r6, [sl, r5, lsl #2]
   57140:	asr	r0, r7, #31
   57144:	add	r0, r7, r0, lsr #30
   57148:	asr	r1, r0, #2
   5714c:	bic	r0, r0, #3
   57150:	str	r1, [r6, #4]
   57154:	bl	18d0 <malloc@plt>
   57158:	str	r0, [r6, #32]
   5715c:	ldr	r2, [sp, #36]	; 0x24
   57160:	sub	r4, r4, r7
   57164:	ldr	r1, [sl, r5, lsl #2]
   57168:	str	r4, [sp, #16]
   5716c:	add	r4, sp, #48	; 0x30
   57170:	ldr	r2, [r2, #20]
   57174:	ldr	r0, [r1, #4]
   57178:	cmp	r2, #0
   5717c:	beq	572bc <ReadNextStructField+0x8b8>
   57180:	cmp	r0, #1
   57184:	blt	572e8 <ReadNextStructField+0x8e4>
   57188:	mov	r6, #0
   5718c:	mov	r7, #0
   57190:	ldr	r0, [sp, #44]	; 0x2c
   57194:	add	r0, r0, r6
   57198:	bl	1c04 <Mat_uint32Swap>
   5719c:	ldr	r1, [sl, r5, lsl #2]
   571a0:	add	r7, r7, #1
   571a4:	ldr	r2, [r1, #32]
   571a8:	str	r0, [r2, r6]
   571ac:	add	r6, r6, #4
   571b0:	ldr	r0, [r1, #4]
   571b4:	cmp	r7, r0
   571b8:	blt	57190 <ReadNextStructField+0x78c>
   571bc:	b	572e8 <ReadNextStructField+0x8e4>
   571c0:	ldr	sl, [sp, #40]	; 0x28
   571c4:	add	r4, sp, #48	; 0x30
   571c8:	ldr	r0, [sp, #32]
   571cc:	add	r6, r6, r8
   571d0:	cmp	r0, #0
   571d4:	beq	571e0 <ReadNextStructField+0x7dc>
   571d8:	ldr	r0, [sp, #44]	; 0x2c
   571dc:	bl	1804 <free@plt>
   571e0:	ldr	r0, [sp, #36]	; 0x24
   571e4:	mov	r1, r9
   571e8:	mov	r2, r4
   571ec:	bl	2d70 <InflateVarNameTag>
   571f0:	mov	r4, r0
   571f4:	mov	r0, #1
   571f8:	mov	r1, #56	; 0x38
   571fc:	bl	1798 <calloc@plt>
   57200:	ldr	r1, [sl, r5, lsl #2]
   57204:	add	r8, r6, r4
   57208:	ldr	r1, [r1, #52]	; 0x34
   5720c:	str	r0, [r1, #12]
   57210:	ldr	r0, [sl, r5, lsl #2]
   57214:	ldr	r0, [r0, #52]	; 0x34
   57218:	ldr	r0, [r0, #12]
   5721c:	cmp	r0, #0
   57220:	beq	57250 <ReadNextStructField+0x84c>
   57224:	ldr	r1, [r9, #52]	; 0x34
   57228:	ldr	r1, [r1, #12]
   5722c:	bl	1948 <inflateCopy@plt>
   57230:	cmp	r0, #0
   57234:	beq	57260 <ReadNextStructField+0x85c>
   57238:	bl	1888 <zError@plt>
   5723c:	mov	r1, r0
   57240:	ldr	r0, [pc, #1440]	; 577e8 <ReadNextStructField+0xde4>
   57244:	add	r0, pc, r0
   57248:	bl	19b4 <Mat_Critical@plt>
   5724c:	b	573d0 <ReadNextStructField+0x9cc>
   57250:	ldr	r0, [pc, #1428]	; 577ec <ReadNextStructField+0xde8>
   57254:	add	r0, pc, r0
   57258:	bl	19b4 <Mat_Critical@plt>
   5725c:	b	573d0 <ReadNextStructField+0x9cc>
   57260:	ldr	r0, [sp, #36]	; 0x24
   57264:	ldr	r0, [r0]
   57268:	bl	1840 <ftell@plt>
   5726c:	ldr	r1, [sl, r5, lsl #2]
   57270:	cmn	r0, #1
   57274:	ldr	r2, [r1, #52]	; 0x34
   57278:	str	r0, [r2]
   5727c:	beq	5730c <ReadNextStructField+0x908>
   57280:	ldr	r3, [r9, #52]	; 0x34
   57284:	ldr	r3, [r3, #12]
   57288:	ldr	r3, [r3, #4]
   5728c:	sub	r0, r0, r3
   57290:	str	r0, [r2]
   57294:	ldr	r0, [r1, #16]
   57298:	cmp	r0, #1
   5729c:	beq	5731c <ReadNextStructField+0x918>
   572a0:	cmp	r0, #2
   572a4:	bne	57330 <ReadNextStructField+0x92c>
   572a8:	ldr	r4, [sp, #36]	; 0x24
   572ac:	mov	r0, r4
   572b0:	bl	56a04 <ReadNextStructField>
   572b4:	add	r8, r0, r8
   572b8:	b	5736c <ReadNextStructField+0x968>
   572bc:	cmp	r0, #1
   572c0:	blt	572e8 <ReadNextStructField+0x8e4>
   572c4:	ldr	r2, [r1, #32]
   572c8:	ldr	r7, [sp, #44]	; 0x2c
   572cc:	mov	r3, #0
   572d0:	ldr	r0, [r7, r3, lsl #2]
   572d4:	str	r0, [r2, r3, lsl #2]
   572d8:	add	r3, r3, #1
   572dc:	ldr	r0, [r1, #4]
   572e0:	cmp	r3, r0
   572e4:	blt	572d0 <ReadNextStructField+0x8cc>
   572e8:	ldr	r7, [sp, #16]
   572ec:	ldr	r6, [sp, #12]
   572f0:	tst	r0, #1
   572f4:	subne	r7, r7, #4
   572f8:	ldr	r0, [sp, #32]
   572fc:	add	r6, r6, r8
   57300:	cmp	r0, #0
   57304:	bne	571d8 <ReadNextStructField+0x7d4>
   57308:	b	571e0 <ReadNextStructField+0x7dc>
   5730c:	ldr	r0, [pc, #1232]	; 577e4 <ReadNextStructField+0xde0>
   57310:	add	r0, pc, r0
   57314:	bl	19b4 <Mat_Critical@plt>
   57318:	b	57384 <ReadNextStructField+0x980>
   5731c:	ldr	r4, [sp, #36]	; 0x24
   57320:	mov	r0, r4
   57324:	bl	57800 <ReadNextCell>
   57328:	add	r8, r0, r8
   5732c:	b	5736c <ReadNextStructField+0x968>
   57330:	movw	r0, #32776	; 0x8008
   57334:	cmp	r7, r0
   57338:	bgt	57368 <ReadNextStructField+0x964>
   5733c:	ldr	r4, [sp, #36]	; 0x24
   57340:	mov	r0, r4
   57344:	bl	29840 <Mat_VarRead5>
   57348:	ldr	r0, [sl, r5, lsl #2]
   5734c:	ldr	r1, [r0, #40]	; 0x28
   57350:	ldr	r0, [r0, #52]	; 0x34
   57354:	str	r1, [r0, #16]
   57358:	mov	r1, #0
   5735c:	ldr	r0, [sl, r5, lsl #2]
   57360:	str	r1, [r0, #40]	; 0x28
   57364:	b	5736c <ReadNextStructField+0x968>
   57368:	ldr	r4, [sp, #36]	; 0x24
   5736c:	ldr	r0, [sl, r5, lsl #2]
   57370:	mov	r2, #0
   57374:	ldr	r0, [r0, #52]	; 0x34
   57378:	ldr	r1, [r0]
   5737c:	ldr	r0, [r4]
   57380:	bl	1a2c <fseek@plt>
   57384:	ldr	r1, [sl, r5, lsl #2]
   57388:	ldr	r0, [r1, #52]	; 0x34
   5738c:	ldr	r2, [r0, #16]
   57390:	cmp	r2, #0
   57394:	bne	573a8 <ReadNextStructField+0x9a4>
   57398:	ldr	r1, [r1, #16]
   5739c:	sub	r1, r1, #1
   573a0:	cmp	r1, #1
   573a4:	bhi	573d0 <ReadNextStructField+0x9cc>
   573a8:	ldr	r0, [r0, #12]
   573ac:	bl	193c <inflateEnd@plt>
   573b0:	ldr	r0, [sl, r5, lsl #2]
   573b4:	ldr	r0, [r0, #52]	; 0x34
   573b8:	ldr	r0, [r0, #12]
   573bc:	bl	1804 <free@plt>
   573c0:	ldr	r0, [sl, r5, lsl #2]
   573c4:	mov	r1, #0
   573c8:	ldr	r0, [r0, #52]	; 0x34
   573cc:	str	r1, [r0, #12]
   573d0:	sub	r4, r7, #8
   573d4:	ldr	r0, [r9, #52]	; 0x34
   573d8:	mov	r2, r4
   573dc:	ldr	r1, [r0, #12]
   573e0:	ldr	r0, [sp, #36]	; 0x24
   573e4:	bl	23b4 <InflateSkip>
   573e8:	add	r7, r0, r8
   573ec:	add	sl, sp, #48	; 0x30
   573f0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   573f4:	add	r5, r5, #1
   573f8:	cmp	r5, r0
   573fc:	bcc	56f40 <ReadNextStructField+0x53c>
   57400:	b	56e20 <ReadNextStructField+0x41c>
   57404:	ldr	r0, [r9]
   57408:	cmp	r0, #0
   5740c:	beq	56e20 <ReadNextStructField+0x41c>
   57410:	bl	18d0 <malloc@plt>
   57414:	cmp	r0, #0
   57418:	str	r0, [r9, #40]	; 0x28
   5741c:	str	r0, [sp, #28]
   57420:	beq	56e20 <ReadNextStructField+0x41c>
   57424:	ldr	r0, [fp, #-32]	; 0xffffffe0
   57428:	str	r7, [sp, #32]
   5742c:	cmp	r0, #0
   57430:	beq	574f0 <ReadNextStructField+0xaec>
   57434:	ldr	r1, [sp, #20]
   57438:	cmp	r4, r1
   5743c:	bhi	57480 <ReadNextStructField+0xa7c>
   57440:	ldr	r6, [sp, #28]
   57444:	mov	r1, #0
   57448:	mul	r5, r1, sl
   5744c:	mov	r7, #0
   57450:	str	r1, [sp, #24]
   57454:	add	r8, r7, r5
   57458:	bl	18a0 <Mat_VarCalloc@plt>
   5745c:	add	r7, r7, #1
   57460:	str	r0, [r6, r8, lsl #2]
   57464:	cmp	r7, sl
   57468:	bcc	57454 <ReadNextStructField+0xa50>
   5746c:	ldr	r1, [sp, #24]
   57470:	ldr	r0, [fp, #-32]	; 0xffffffe0
   57474:	add	r1, r1, #1
   57478:	cmp	r1, r0
   5747c:	bcc	57448 <ReadNextStructField+0xa44>
   57480:	cmp	r0, #0
   57484:	ldrne	r0, [r9, #52]	; 0x34
   57488:	ldrne	r0, [r0, #8]
   5748c:	cmpne	r0, #0
   57490:	beq	574f0 <ReadNextStructField+0xaec>
   57494:	ldr	r0, [sp, #20]
   57498:	cmp	r4, r0
   5749c:	bhi	574f0 <ReadNextStructField+0xaec>
   574a0:	ldr	r4, [sp, #28]
   574a4:	mov	r8, #0
   574a8:	mul	r6, r8, sl
   574ac:	mov	r5, #0
   574b0:	ldr	r0, [r9, #52]	; 0x34
   574b4:	ldr	r0, [r0, #8]
   574b8:	ldr	r0, [r0, r5, lsl #2]
   574bc:	cmp	r0, #0
   574c0:	beq	574d4 <ReadNextStructField+0xad0>
   574c4:	add	r7, r5, r6
   574c8:	bl	1864 <strdup@plt>
   574cc:	ldr	r1, [r4, r7, lsl #2]
   574d0:	str	r0, [r1, #36]	; 0x24
   574d4:	add	r5, r5, #1
   574d8:	cmp	r5, sl
   574dc:	bcc	574b0 <ReadNextStructField+0xaac>
   574e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   574e4:	add	r8, r8, #1
   574e8:	cmp	r8, r0
   574ec:	bcc	574a8 <ReadNextStructField+0xaa4>
   574f0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   574f4:	cmp	r0, #0
   574f8:	beq	57780 <ReadNextStructField+0xd7c>
   574fc:	add	r8, sp, #48	; 0x30
   57500:	ldr	r7, [sp, #32]
   57504:	mov	sl, #0
   57508:	mov	r5, #0
   5750c:	add	r0, r8, #20
   57510:	str	r0, [sp, #24]
   57514:	add	r0, r8, #16
   57518:	str	r0, [sp, #20]
   5751c:	add	r0, r8, #12
   57520:	str	r0, [sp, #16]
   57524:	add	r0, r8, #8
   57528:	str	r0, [sp, #12]
   5752c:	ldr	r6, [sp, #36]	; 0x24
   57530:	mov	r0, r8
   57534:	mov	r1, #4
   57538:	mov	r2, #2
   5753c:	ldr	r3, [r6]
   57540:	bl	18b8 <fread@plt>
   57544:	mov	r4, r0
   57548:	ldr	r0, [r6, #20]
   5754c:	ldr	r6, [sp, #40]	; 0x28
   57550:	cmp	r0, #0
   57554:	beq	57568 <ReadNextStructField+0xb64>
   57558:	mov	r0, r8
   5755c:	bl	1c04 <Mat_uint32Swap>
   57560:	mov	r0, r6
   57564:	bl	1c04 <Mat_uint32Swap>
   57568:	ldr	r0, [sp, #48]	; 0x30
   5756c:	add	r7, r4, r7
   57570:	cmp	r0, #14
   57574:	bne	57790 <ReadNextStructField+0xd8c>
   57578:	ldr	r0, [sp, #52]	; 0x34
   5757c:	cmp	r0, #0
   57580:	beq	57634 <ReadNextStructField+0xc30>
   57584:	ldr	r6, [sp, #36]	; 0x24
   57588:	str	r0, [sp, #32]
   5758c:	mov	r0, r8
   57590:	mov	r1, #4
   57594:	mov	r2, #6
   57598:	ldr	r3, [r6]
   5759c:	bl	18b8 <fread@plt>
   575a0:	mov	r4, r0
   575a4:	ldr	r0, [r6, #20]
   575a8:	ldr	r6, [sp, #40]	; 0x28
   575ac:	cmp	r0, #0
   575b0:	beq	575e4 <ReadNextStructField+0xbe0>
   575b4:	mov	r0, r8
   575b8:	bl	1c04 <Mat_uint32Swap>
   575bc:	mov	r0, r6
   575c0:	bl	1c04 <Mat_uint32Swap>
   575c4:	ldr	r0, [sp, #12]
   575c8:	bl	1c04 <Mat_uint32Swap>
   575cc:	ldr	r0, [sp, #16]
   575d0:	bl	1c04 <Mat_uint32Swap>
   575d4:	ldr	r0, [sp, #20]
   575d8:	bl	1c04 <Mat_uint32Swap>
   575dc:	ldr	r0, [sp, #24]
   575e0:	bl	1c04 <Mat_uint32Swap>
   575e4:	ldr	r0, [sp, #48]	; 0x30
   575e8:	add	r8, r4, r7
   575ec:	cmp	r0, #6
   575f0:	bne	57654 <ReadNextStructField+0xc50>
   575f4:	ldr	r9, [sp, #28]
   575f8:	ldr	r0, [sp, #56]	; 0x38
   575fc:	mov	r6, #0
   57600:	ldr	r1, [r9, r5, lsl #2]!
   57604:	and	r2, r0, #2048	; 0x800
   57608:	and	r3, r0, #1024	; 0x400
   5760c:	and	r7, r0, #512	; 0x200
   57610:	uxtb	r0, r0
   57614:	cmp	r0, #18
   57618:	movcs	r0, r6
   5761c:	cmp	r0, #5
   57620:	add	ip, r1, #16
   57624:	stm	ip, {r0, r2, r3, r7}
   57628:	ldreq	r0, [sp, #60]	; 0x3c
   5762c:	streq	r0, [r1]
   57630:	b	57660 <ReadNextStructField+0xc5c>
   57634:	ldr	r4, [sp, #28]
   57638:	ldr	r0, [r4, r5, lsl #2]
   5763c:	ldr	r0, [r0, #52]	; 0x34
   57640:	bl	1804 <free@plt>
   57644:	ldr	r0, [r4, r5, lsl #2]
   57648:	mov	r1, #0
   5764c:	str	r1, [r0, #52]	; 0x34
   57650:	b	5773c <ReadNextStructField+0xd38>
   57654:	ldr	r0, [sp, #28]
   57658:	ldr	r1, [r0, r5, lsl #2]
   5765c:	add	r9, r0, sl
   57660:	ldr	r7, [sp, #36]	; 0x24
   57664:	ldr	r2, [sp, #64]	; 0x40
   57668:	ldr	r3, [sp, #68]	; 0x44
   5766c:	mov	r0, r7
   57670:	bl	582b0 <ReadRankDims>
   57674:	ldr	r3, [r7]
   57678:	mov	r4, r0
   5767c:	add	r0, sp, #48	; 0x30
   57680:	mov	r1, #1
   57684:	mov	r2, #8
   57688:	bl	18b8 <fread@plt>
   5768c:	mov	r6, r0
   57690:	ldr	r0, [r7]
   57694:	bl	1840 <ftell@plt>
   57698:	ldr	r1, [r9]
   5769c:	cmn	r0, #1
   576a0:	ldr	r2, [r1, #52]	; 0x34
   576a4:	str	r0, [r2]
   576a8:	add	r2, r8, r4
   576ac:	add	r7, r2, r6
   576b0:	beq	576e0 <ReadNextStructField+0xcdc>
   576b4:	ldr	r0, [r1, #16]
   576b8:	cmp	r0, #1
   576bc:	beq	576f4 <ReadNextStructField+0xcf0>
   576c0:	cmp	r0, #2
   576c4:	add	r8, sp, #48	; 0x30
   576c8:	bne	57710 <ReadNextStructField+0xd0c>
   576cc:	ldr	r6, [sp, #36]	; 0x24
   576d0:	mov	r0, r6
   576d4:	bl	56a04 <ReadNextStructField>
   576d8:	add	r7, r0, r7
   576dc:	b	57714 <ReadNextStructField+0xd10>
   576e0:	ldr	r0, [pc, #272]	; 577f8 <ReadNextStructField+0xdf4>
   576e4:	add	r0, pc, r0
   576e8:	bl	19b4 <Mat_Critical@plt>
   576ec:	add	r8, sp, #48	; 0x30
   576f0:	b	5773c <ReadNextStructField+0xd38>
   576f4:	ldr	r6, [sp, #36]	; 0x24
   576f8:	mov	r0, r6
   576fc:	bl	57800 <ReadNextCell>
   57700:	add	r7, r0, r7
   57704:	ldr	r0, [sp, #32]
   57708:	add	r8, sp, #48	; 0x30
   5770c:	b	57718 <ReadNextStructField+0xd14>
   57710:	ldr	r6, [sp, #36]	; 0x24
   57714:	ldr	r0, [sp, #32]
   57718:	ldr	r1, [r9]
   5771c:	sub	r0, r0, #32
   57720:	mov	r2, #0
   57724:	sub	r0, r0, r4
   57728:	ldr	r1, [r1, #52]	; 0x34
   5772c:	ldr	r1, [r1]
   57730:	add	r1, r0, r1
   57734:	ldr	r0, [r6]
   57738:	bl	1a2c <fseek@plt>
   5773c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   57740:	add	r5, r5, #1
   57744:	add	sl, sl, #4
   57748:	cmp	r5, r0
   5774c:	bcc	5752c <ReadNextStructField+0xb28>
   57750:	b	56e20 <ReadNextStructField+0x41c>
   57754:	ldr	r7, [sp, #32]
   57758:	mov	r0, r7
   5775c:	sub	sp, fp, #28
   57760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   57764:	ldr	r0, [pc, #108]	; 577d8 <ReadNextStructField+0xdd4>
   57768:	add	r0, pc, r0
   5776c:	b	56d20 <ReadNextStructField+0x31c>
   57770:	ldr	r7, [sp, #32]
   57774:	mov	r0, r7
   57778:	sub	sp, fp, #28
   5777c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   57780:	ldr	r7, [sp, #32]
   57784:	mov	r0, r7
   57788:	sub	sp, fp, #28
   5778c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   57790:	ldr	r4, [sp, #28]
   57794:	ldr	r0, [r4, r5, lsl #2]
   57798:	bl	1918 <Mat_VarFree@plt>
   5779c:	mov	r0, #0
   577a0:	str	r0, [r4, r5, lsl #2]
   577a4:	ldr	r0, [sp, #36]	; 0x24
   577a8:	ldr	r0, [r0]
   577ac:	bl	1840 <ftell@plt>
   577b0:	mov	r2, r0
   577b4:	ldr	r0, [pc, #56]	; 577f4 <ReadNextStructField+0xdf0>
   577b8:	mov	r1, r5
   577bc:	add	r0, pc, r0
   577c0:	bl	19b4 <Mat_Critical@plt>
   577c4:	mov	r0, r7
   577c8:	sub	sp, fp, #28
   577cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   577d0:	.word	0x00008e2c
   577d4:	.word	0x00008b48
   577d8:	.word	0x0000811c
   577dc:	.word	0x00008a82
   577e0:	.word	0x00008a8a
   577e4:	.word	0x000084c8
   577e8:	.word	0x000087cb
   577ec:	.word	0x000088e7
   577f0:	.word	0x00008a4c
   577f4:	.word	0x00008398
   577f8:	.word	0x000080f4
   577fc:	.word	0x00008ec1

00057800 <ReadNextCell>:
   57800:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   57804:	add	fp, sp, #28
   57808:	sub	sp, sp, #116	; 0x74
   5780c:	mov	r6, r1
   57810:	mov	r4, r0
   57814:	mov	r0, #1
   57818:	sub	r1, fp, #32
   5781c:	str	r0, [fp, #-32]	; 0xffffffe0
   57820:	mov	r0, r6
   57824:	bl	5a144 <SafeMulDims>
   57828:	cmp	r0, #0
   5782c:	bne	57850 <ReadNextCell+0x50>
   57830:	mov	r0, #4
   57834:	mov	r2, #4
   57838:	str	r0, [r6, #12]
   5783c:	mov	r0, r6
   57840:	ldr	r1, [fp, #-32]	; 0xffffffe0
   57844:	bl	5a1a4 <SafeMul>
   57848:	cmp	r0, #0
   5784c:	beq	5786c <ReadNextCell+0x6c>
   57850:	ldr	r0, [pc, #2604]	; 58284 <ReadNextCell+0xa84>
   57854:	add	r0, pc, r0
   57858:	bl	19b4 <Mat_Critical@plt>
   5785c:	mov	r9, #0
   57860:	mov	r0, r9
   57864:	sub	sp, fp, #28
   57868:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5786c:	ldr	r7, [fp, #-32]	; 0xffffffe0
   57870:	ldr	r1, [r6, #12]
   57874:	mov	r0, r7
   57878:	bl	1798 <calloc@plt>
   5787c:	cmp	r0, #0
   57880:	str	r0, [r6, #40]	; 0x28
   57884:	str	r0, [sp, #36]	; 0x24
   57888:	beq	57ed4 <ReadNextCell+0x6d4>
   5788c:	ldr	r0, [r6, #48]	; 0x30
   57890:	str	r4, [sp, #40]	; 0x28
   57894:	cmp	r0, #1
   57898:	bne	57efc <ReadNextCell+0x6fc>
   5789c:	add	r2, sp, #48	; 0x30
   578a0:	vmov.i32	q8, #0	; 0x00000000
   578a4:	mov	r0, #48	; 0x30
   578a8:	cmp	r7, #0
   578ac:	mov	r1, r2
   578b0:	vst1.64	{d16-d17}, [r1], r0
   578b4:	add	r0, r2, #32
   578b8:	vst1.64	{d16-d17}, [r0]
   578bc:	add	r0, r2, #16
   578c0:	vst1.64	{d16-d17}, [r1]
   578c4:	vst1.64	{d16-d17}, [r0]
   578c8:	beq	58204 <ReadNextCell+0xa04>
   578cc:	ldr	r5, [sp, #36]	; 0x24
   578d0:	add	r0, r2, #12
   578d4:	mov	r9, #0
   578d8:	mov	r8, #0
   578dc:	str	r6, [sp, #20]
   578e0:	str	r0, [sp, #12]
   578e4:	add	r0, r2, #8
   578e8:	str	r0, [sp, #16]
   578ec:	orr	r0, r2, #4
   578f0:	str	r0, [sp, #32]
   578f4:	bl	18a0 <Mat_VarCalloc@plt>
   578f8:	mov	sl, r5
   578fc:	cmp	r0, #0
   57900:	str	r0, [sl, r8, lsl #2]!
   57904:	beq	57a24 <ReadNextCell+0x224>
   57908:	mov	r0, #0
   5790c:	mov	r7, r4
   57910:	mov	r1, r6
   57914:	str	r0, [sp, #52]	; 0x34
   57918:	str	r0, [sp, #48]	; 0x30
   5791c:	mov	r0, r4
   57920:	add	r4, sp, #48	; 0x30
   57924:	mov	r2, r4
   57928:	bl	2798 <InflateVarTag>
   5792c:	mov	r5, r0
   57930:	ldr	r0, [r7, #20]
   57934:	cmp	r0, #0
   57938:	beq	5794c <ReadNextCell+0x14c>
   5793c:	mov	r0, r4
   57940:	bl	1c04 <Mat_uint32Swap>
   57944:	ldr	r0, [sp, #32]
   57948:	bl	1c04 <Mat_uint32Swap>
   5794c:	ldr	r7, [sp, #52]	; 0x34
   57950:	add	r9, r5, r9
   57954:	cmp	r7, #0
   57958:	beq	57a38 <ReadNextCell+0x238>
   5795c:	ldr	r1, [sp, #48]	; 0x30
   57960:	ldr	r0, [sl]
   57964:	ldr	r2, [sp, #40]	; 0x28
   57968:	cmp	r1, #14
   5796c:	bne	58224 <ReadNextCell+0xa24>
   57970:	mov	r1, #1
   57974:	add	r4, sp, #48	; 0x30
   57978:	str	r1, [r0, #48]	; 0x30
   5797c:	mov	r1, r6
   57980:	mov	r0, r2
   57984:	mov	r6, r2
   57988:	mov	r2, r4
   5798c:	bl	28fc <InflateArrayFlags>
   57990:	mov	r5, r0
   57994:	ldr	r0, [r6, #20]
   57998:	cmp	r0, #0
   5799c:	beq	579c0 <ReadNextCell+0x1c0>
   579a0:	mov	r0, r4
   579a4:	bl	1c04 <Mat_uint32Swap>
   579a8:	ldr	r0, [sp, #32]
   579ac:	bl	1c04 <Mat_uint32Swap>
   579b0:	ldr	r0, [sp, #16]
   579b4:	bl	1c04 <Mat_uint32Swap>
   579b8:	ldr	r0, [sp, #12]
   579bc:	bl	1c04 <Mat_uint32Swap>
   579c0:	ldr	r1, [sp, #48]	; 0x30
   579c4:	add	r5, r5, r9
   579c8:	sub	r9, r7, #16
   579cc:	cmp	r1, #6
   579d0:	bne	57a5c <ReadNextCell+0x25c>
   579d4:	ldr	r0, [sp, #56]	; 0x38
   579d8:	ldr	r1, [sl]
   579dc:	mov	ip, r5
   579e0:	mov	r6, #0
   579e4:	and	r2, r0, #2048	; 0x800
   579e8:	and	r3, r0, #1024	; 0x400
   579ec:	and	r5, r0, #512	; 0x200
   579f0:	uxtb	r0, r0
   579f4:	add	lr, r1, #16
   579f8:	cmp	r0, #18
   579fc:	movcs	r0, r6
   57a00:	stm	lr, {r0, r2, r3, r5}
   57a04:	cmp	r0, #5
   57a08:	ldr	r4, [sp, #40]	; 0x28
   57a0c:	ldr	r6, [sp, #20]
   57a10:	bne	57a9c <ReadNextCell+0x29c>
   57a14:	ldr	r0, [sp, #60]	; 0x3c
   57a18:	mov	r5, ip
   57a1c:	str	r0, [r1]
   57a20:	b	57aa8 <ReadNextCell+0x2a8>
   57a24:	ldr	r0, [pc, #2144]	; 5828c <ReadNextCell+0xa8c>
   57a28:	mov	r1, r8
   57a2c:	add	r0, pc, r0
   57a30:	bl	19b4 <Mat_Critical@plt>
   57a34:	b	57ec0 <ReadNextCell+0x6c0>
   57a38:	ldr	r0, [sl]
   57a3c:	ldr	r0, [r0, #52]	; 0x34
   57a40:	bl	1804 <free@plt>
   57a44:	ldr	r0, [sl]
   57a48:	ldr	r5, [sp, #36]	; 0x24
   57a4c:	ldr	r4, [sp, #40]	; 0x28
   57a50:	mov	r1, #0
   57a54:	str	r1, [r0, #52]	; 0x34
   57a58:	b	57ec0 <ReadNextCell+0x6c0>
   57a5c:	ldr	r0, [pc, #2096]	; 58294 <ReadNextCell+0xa94>
   57a60:	add	r0, pc, r0
   57a64:	bl	19b4 <Mat_Critical@plt>
   57a68:	ldr	r6, [sp, #20]
   57a6c:	ldr	r4, [sp, #40]	; 0x28
   57a70:	mov	r2, r9
   57a74:	ldr	r0, [r6, #52]	; 0x34
   57a78:	ldr	r1, [r0, #12]
   57a7c:	mov	r0, r4
   57a80:	bl	23b4 <InflateSkip>
   57a84:	add	r5, r0, r5
   57a88:	ldr	r0, [sl]
   57a8c:	ldr	r0, [r0, #16]
   57a90:	cmp	r0, #17
   57a94:	bne	57aa8 <ReadNextCell+0x2a8>
   57a98:	b	57ea4 <ReadNextCell+0x6a4>
   57a9c:	mov	r5, ip
   57aa0:	cmp	r0, #17
   57aa4:	beq	57ea4 <ReadNextCell+0x6a4>
   57aa8:	mov	r0, #0
   57aac:	str	r5, [sp, #24]
   57ab0:	mov	r5, r4
   57ab4:	mov	r1, r6
   57ab8:	mov	r3, #64	; 0x40
   57abc:	str	r0, [sp, #44]	; 0x2c
   57ac0:	add	r0, sp, #44	; 0x2c
   57ac4:	str	r0, [sp]
   57ac8:	mov	r0, r4
   57acc:	add	r4, sp, #48	; 0x30
   57ad0:	mov	r2, r4
   57ad4:	bl	2a60 <InflateRankDims>
   57ad8:	mov	r9, r0
   57adc:	ldr	r0, [sp, #44]	; 0x2c
   57ae0:	mov	r1, #1
   57ae4:	cmp	r0, #0
   57ae8:	ldreq	r0, [sp, #16]
   57aec:	moveq	r1, #0
   57af0:	streq	r0, [sp, #44]	; 0x2c
   57af4:	ldr	r0, [r5, #20]
   57af8:	cmp	r0, #0
   57afc:	beq	57b18 <ReadNextCell+0x318>
   57b00:	mov	r0, r4
   57b04:	mov	r5, r1
   57b08:	bl	1c04 <Mat_uint32Swap>
   57b0c:	ldr	r0, [sp, #32]
   57b10:	bl	1c04 <Mat_uint32Swap>
   57b14:	mov	r1, r5
   57b18:	ldr	r0, [sp, #48]	; 0x30
   57b1c:	sub	r7, r7, #24
   57b20:	cmp	r0, #5
   57b24:	bne	57bb0 <ReadNextCell+0x3b0>
   57b28:	stmib	sp, {r1, r9}
   57b2c:	ldr	r4, [sp, #52]	; 0x34
   57b30:	ldr	r5, [sl]
   57b34:	asr	r0, r4, #31
   57b38:	add	r0, r4, r0, lsr #30
   57b3c:	asr	r1, r0, #2
   57b40:	bic	r0, r0, #3
   57b44:	str	r1, [r5, #4]
   57b48:	bl	18d0 <malloc@plt>
   57b4c:	str	r0, [r5, #32]
   57b50:	ldr	r3, [sp, #40]	; 0x28
   57b54:	sub	r7, r7, r4
   57b58:	ldr	r1, [sl]
   57b5c:	mov	r4, r7
   57b60:	ldr	r2, [r3, #20]
   57b64:	ldr	r0, [r1, #4]
   57b68:	cmp	r2, #0
   57b6c:	beq	57bc4 <ReadNextCell+0x3c4>
   57b70:	cmp	r0, #1
   57b74:	blt	57bf0 <ReadNextCell+0x3f0>
   57b78:	mov	r5, #0
   57b7c:	mov	r9, #0
   57b80:	ldr	r0, [sp, #44]	; 0x2c
   57b84:	add	r0, r0, r5
   57b88:	bl	1c04 <Mat_uint32Swap>
   57b8c:	ldr	r1, [sl]
   57b90:	add	r9, r9, #1
   57b94:	ldr	r2, [r1, #32]
   57b98:	str	r0, [r2, r5]
   57b9c:	add	r5, r5, #4
   57ba0:	ldr	r0, [r1, #4]
   57ba4:	cmp	r9, r0
   57ba8:	blt	57b80 <ReadNextCell+0x380>
   57bac:	b	57bf0 <ReadNextCell+0x3f0>
   57bb0:	ldr	r5, [sp, #24]
   57bb4:	str	r7, [sp, #28]
   57bb8:	cmp	r1, #0
   57bbc:	bne	57c10 <ReadNextCell+0x410>
   57bc0:	b	57c18 <ReadNextCell+0x418>
   57bc4:	cmp	r0, #1
   57bc8:	blt	57bf0 <ReadNextCell+0x3f0>
   57bcc:	ldr	r2, [r1, #32]
   57bd0:	ldr	r7, [sp, #44]	; 0x2c
   57bd4:	mov	r3, #0
   57bd8:	ldr	r0, [r7, r3, lsl #2]
   57bdc:	str	r0, [r2, r3, lsl #2]
   57be0:	add	r3, r3, #1
   57be4:	ldr	r0, [r1, #4]
   57be8:	cmp	r3, r0
   57bec:	blt	57bd8 <ReadNextCell+0x3d8>
   57bf0:	tst	r0, #1
   57bf4:	ldr	r5, [sp, #24]
   57bf8:	subne	r4, r4, #4
   57bfc:	str	r4, [sp, #28]
   57c00:	add	r4, sp, #48	; 0x30
   57c04:	ldmib	sp, {r1, r9}
   57c08:	cmp	r1, #0
   57c0c:	beq	57c18 <ReadNextCell+0x418>
   57c10:	ldr	r0, [sp, #44]	; 0x2c
   57c14:	bl	1804 <free@plt>
   57c18:	ldr	r7, [sp, #40]	; 0x28
   57c1c:	mov	r1, r6
   57c20:	mov	r2, r4
   57c24:	add	r9, r9, r5
   57c28:	mov	r0, r7
   57c2c:	bl	2d70 <InflateVarNameTag>
   57c30:	mov	r5, r0
   57c34:	ldr	r0, [r7, #20]
   57c38:	cmp	r0, #0
   57c3c:	beq	57c50 <ReadNextCell+0x450>
   57c40:	mov	r0, r4
   57c44:	bl	1c04 <Mat_uint32Swap>
   57c48:	ldr	r0, [sp, #32]
   57c4c:	bl	1c04 <Mat_uint32Swap>
   57c50:	ldr	r7, [sp, #52]	; 0x34
   57c54:	ldr	r0, [sp, #28]
   57c58:	add	r5, r9, r5
   57c5c:	sub	r9, r0, #8
   57c60:	cmp	r7, #0
   57c64:	beq	57cd0 <ReadNextCell+0x4d0>
   57c68:	ldr	r0, [sp, #48]	; 0x30
   57c6c:	cmp	r0, #1
   57c70:	bne	57cd8 <ReadNextCell+0x4d8>
   57c74:	ands	r0, r7, #7
   57c78:	rsb	r0, r0, #8
   57c7c:	addne	r7, r7, r0
   57c80:	add	r0, r7, #1
   57c84:	bl	18d0 <malloc@plt>
   57c88:	ldr	r1, [sl]
   57c8c:	ldr	r4, [sp, #40]	; 0x28
   57c90:	sub	r9, r9, r7
   57c94:	str	r0, [r1, #36]	; 0x24
   57c98:	ldr	r0, [sl]
   57c9c:	ldr	r2, [r0, #36]	; 0x24
   57ca0:	cmp	r2, #0
   57ca4:	beq	57d38 <ReadNextCell+0x538>
   57ca8:	mov	r0, r4
   57cac:	mov	r1, r6
   57cb0:	mov	r3, r7
   57cb4:	bl	2ed4 <InflateVarName>
   57cb8:	ldr	r1, [sl]
   57cbc:	mov	r2, #0
   57cc0:	add	r5, r0, r5
   57cc4:	ldr	r1, [r1, #36]	; 0x24
   57cc8:	strb	r2, [r1, r7]
   57ccc:	b	57d38 <ReadNextCell+0x538>
   57cd0:	ldr	r4, [sp, #40]	; 0x28
   57cd4:	b	57d38 <ReadNextCell+0x538>
   57cd8:	ldr	r4, [sp, #40]	; 0x28
   57cdc:	lsr	r7, r0, #16
   57ce0:	cmp	r7, #4
   57ce4:	bhi	57d38 <ReadNextCell+0x538>
   57ce8:	uxth	r0, r0
   57cec:	cmp	r0, #1
   57cf0:	bne	57d38 <ReadNextCell+0x538>
   57cf4:	cmp	r7, #0
   57cf8:	beq	57d38 <ReadNextCell+0x538>
   57cfc:	add	r0, r7, #1
   57d00:	bl	18d0 <malloc@plt>
   57d04:	ldr	r1, [sl]
   57d08:	str	r0, [r1, #36]	; 0x24
   57d0c:	ldr	r0, [sl]
   57d10:	ldr	r0, [r0, #36]	; 0x24
   57d14:	cmp	r0, #0
   57d18:	beq	57d38 <ReadNextCell+0x538>
   57d1c:	ldr	r1, [sp, #32]
   57d20:	mov	r2, r7
   57d24:	bl	181c <memcpy@plt>
   57d28:	ldr	r0, [sl]
   57d2c:	mov	r1, #0
   57d30:	ldr	r0, [r0, #36]	; 0x24
   57d34:	strb	r1, [r0, r7]
   57d38:	mov	r0, #1
   57d3c:	mov	r1, #56	; 0x38
   57d40:	bl	1798 <calloc@plt>
   57d44:	ldr	r1, [sl]
   57d48:	ldr	r1, [r1, #52]	; 0x34
   57d4c:	str	r0, [r1, #12]
   57d50:	ldr	r0, [sl]
   57d54:	ldr	r0, [r0, #52]	; 0x34
   57d58:	ldr	r0, [r0, #12]
   57d5c:	cmp	r0, #0
   57d60:	beq	57d90 <ReadNextCell+0x590>
   57d64:	ldr	r1, [r6, #52]	; 0x34
   57d68:	ldr	r1, [r1, #12]
   57d6c:	bl	1948 <inflateCopy@plt>
   57d70:	cmp	r0, #0
   57d74:	beq	57da0 <ReadNextCell+0x5a0>
   57d78:	bl	1888 <zError@plt>
   57d7c:	mov	r1, r0
   57d80:	ldr	r0, [pc, #1300]	; 5829c <ReadNextCell+0xa9c>
   57d84:	add	r0, pc, r0
   57d88:	bl	19b4 <Mat_Critical@plt>
   57d8c:	b	57ea4 <ReadNextCell+0x6a4>
   57d90:	ldr	r0, [pc, #1288]	; 582a0 <ReadNextCell+0xaa0>
   57d94:	add	r0, pc, r0
   57d98:	bl	19b4 <Mat_Critical@plt>
   57d9c:	b	57ea4 <ReadNextCell+0x6a4>
   57da0:	ldr	r0, [r4]
   57da4:	bl	1840 <ftell@plt>
   57da8:	ldr	r1, [sl]
   57dac:	cmn	r0, #1
   57db0:	ldr	r2, [r1, #52]	; 0x34
   57db4:	str	r0, [r2]
   57db8:	beq	57df4 <ReadNextCell+0x5f4>
   57dbc:	ldr	r3, [r6, #52]	; 0x34
   57dc0:	ldr	r3, [r3, #12]
   57dc4:	ldr	r3, [r3, #4]
   57dc8:	sub	r0, r0, r3
   57dcc:	str	r0, [r2]
   57dd0:	ldr	r0, [r1, #16]
   57dd4:	cmp	r0, #1
   57dd8:	beq	57e04 <ReadNextCell+0x604>
   57ddc:	cmp	r0, #2
   57de0:	bne	57e14 <ReadNextCell+0x614>
   57de4:	mov	r0, r4
   57de8:	bl	56a04 <ReadNextStructField>
   57dec:	add	r5, r0, r5
   57df0:	b	57e40 <ReadNextCell+0x640>
   57df4:	ldr	r0, [pc, #1180]	; 58298 <ReadNextCell+0xa98>
   57df8:	add	r0, pc, r0
   57dfc:	bl	19b4 <Mat_Critical@plt>
   57e00:	b	57e58 <ReadNextCell+0x658>
   57e04:	mov	r0, r4
   57e08:	bl	57800 <ReadNextCell>
   57e0c:	add	r5, r0, r5
   57e10:	b	57e40 <ReadNextCell+0x640>
   57e14:	cmp	r9, #32768	; 0x8000
   57e18:	bgt	57e40 <ReadNextCell+0x640>
   57e1c:	mov	r0, r4
   57e20:	bl	29840 <Mat_VarRead5>
   57e24:	ldr	r0, [sl]
   57e28:	ldr	r1, [r0, #40]	; 0x28
   57e2c:	ldr	r0, [r0, #52]	; 0x34
   57e30:	str	r1, [r0, #16]
   57e34:	mov	r1, #0
   57e38:	ldr	r0, [sl]
   57e3c:	str	r1, [r0, #40]	; 0x28
   57e40:	ldr	r1, [sl]
   57e44:	ldr	r0, [r4]
   57e48:	mov	r2, #0
   57e4c:	ldr	r1, [r1, #52]	; 0x34
   57e50:	ldr	r1, [r1]
   57e54:	bl	1a2c <fseek@plt>
   57e58:	ldr	r1, [sl]
   57e5c:	ldr	r0, [r1, #52]	; 0x34
   57e60:	ldr	r2, [r0, #16]
   57e64:	cmp	r2, #0
   57e68:	bne	57e7c <ReadNextCell+0x67c>
   57e6c:	ldr	r1, [r1, #16]
   57e70:	sub	r1, r1, #1
   57e74:	cmp	r1, #1
   57e78:	bhi	57ea4 <ReadNextCell+0x6a4>
   57e7c:	ldr	r0, [r0, #12]
   57e80:	bl	193c <inflateEnd@plt>
   57e84:	ldr	r0, [sl]
   57e88:	ldr	r0, [r0, #52]	; 0x34
   57e8c:	ldr	r0, [r0, #12]
   57e90:	bl	1804 <free@plt>
   57e94:	ldr	r0, [sl]
   57e98:	mov	r1, #0
   57e9c:	ldr	r0, [r0, #52]	; 0x34
   57ea0:	str	r1, [r0, #12]
   57ea4:	ldr	r0, [r6, #52]	; 0x34
   57ea8:	mov	r2, r9
   57eac:	ldr	r1, [r0, #12]
   57eb0:	mov	r0, r4
   57eb4:	bl	23b4 <InflateSkip>
   57eb8:	add	r9, r0, r5
   57ebc:	ldr	r5, [sp, #36]	; 0x24
   57ec0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   57ec4:	add	r8, r8, #1
   57ec8:	cmp	r8, r0
   57ecc:	bcc	578f4 <ReadNextCell+0xf4>
   57ed0:	b	57860 <ReadNextCell+0x60>
   57ed4:	ldr	r1, [r6, #36]	; 0x24
   57ed8:	mov	r9, #0
   57edc:	cmp	r1, #0
   57ee0:	beq	57860 <ReadNextCell+0x60>
   57ee4:	ldr	r0, [pc, #924]	; 58288 <ReadNextCell+0xa88>
   57ee8:	add	r0, pc, r0
   57eec:	bl	19b4 <Mat_Critical@plt>
   57ef0:	mov	r0, r9
   57ef4:	sub	sp, fp, #28
   57ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   57efc:	cmp	r7, #0
   57f00:	beq	58214 <ReadNextCell+0xa14>
   57f04:	add	sl, sp, #48	; 0x30
   57f08:	ldr	r7, [sp, #36]	; 0x24
   57f0c:	mov	r9, #0
   57f10:	mov	r6, #0
   57f14:	add	r0, sl, #20
   57f18:	str	r0, [sp, #28]
   57f1c:	add	r0, sl, #16
   57f20:	str	r0, [sp, #24]
   57f24:	add	r0, sl, #12
   57f28:	str	r0, [sp, #20]
   57f2c:	add	r0, sl, #8
   57f30:	str	r0, [sp, #16]
   57f34:	add	r0, sl, #4
   57f38:	str	r0, [sp, #32]
   57f3c:	bl	18a0 <Mat_VarCalloc@plt>
   57f40:	cmp	r0, #0
   57f44:	str	r0, [r7, r6, lsl #2]
   57f48:	beq	58058 <ReadNextCell+0x858>
   57f4c:	ldr	r3, [r4]
   57f50:	mov	r0, sl
   57f54:	mov	r1, #4
   57f58:	mov	r2, #2
   57f5c:	bl	18b8 <fread@plt>
   57f60:	cmp	r0, #0
   57f64:	beq	58068 <ReadNextCell+0x868>
   57f68:	mov	r5, r0
   57f6c:	ldr	r0, [r4, #20]
   57f70:	cmp	r0, #0
   57f74:	beq	57f88 <ReadNextCell+0x788>
   57f78:	mov	r0, sl
   57f7c:	bl	1c04 <Mat_uint32Swap>
   57f80:	ldr	r0, [sp, #32]
   57f84:	bl	1c04 <Mat_uint32Swap>
   57f88:	ldr	r8, [sp, #52]	; 0x34
   57f8c:	add	r9, r5, r9
   57f90:	cmp	r8, #0
   57f94:	beq	5807c <ReadNextCell+0x87c>
   57f98:	ldr	r0, [sp, #48]	; 0x30
   57f9c:	cmp	r0, #14
   57fa0:	bne	5824c <ReadNextCell+0xa4c>
   57fa4:	ldr	r3, [r4]
   57fa8:	mov	r0, sl
   57fac:	mov	r1, #4
   57fb0:	mov	r2, #6
   57fb4:	bl	18b8 <fread@plt>
   57fb8:	mov	r2, r0
   57fbc:	ldr	r0, [r4, #20]
   57fc0:	mov	r5, sl
   57fc4:	cmp	r0, #0
   57fc8:	beq	58004 <ReadNextCell+0x804>
   57fcc:	mov	r0, r5
   57fd0:	mov	sl, r2
   57fd4:	bl	1c04 <Mat_uint32Swap>
   57fd8:	ldr	r0, [sp, #32]
   57fdc:	bl	1c04 <Mat_uint32Swap>
   57fe0:	ldr	r0, [sp, #16]
   57fe4:	bl	1c04 <Mat_uint32Swap>
   57fe8:	ldr	r0, [sp, #20]
   57fec:	bl	1c04 <Mat_uint32Swap>
   57ff0:	ldr	r0, [sp, #24]
   57ff4:	bl	1c04 <Mat_uint32Swap>
   57ff8:	ldr	r0, [sp, #28]
   57ffc:	bl	1c04 <Mat_uint32Swap>
   58000:	mov	r2, sl
   58004:	ldr	r0, [sp, #48]	; 0x30
   58008:	mov	sl, r5
   5800c:	cmp	r0, #6
   58010:	bne	580a8 <ReadNextCell+0x8a8>
   58014:	ldr	r0, [sp, #56]	; 0x38
   58018:	ldr	r1, [r7, r6, lsl #2]
   5801c:	mov	r5, #0
   58020:	and	ip, r0, #2048	; 0x800
   58024:	and	r3, r0, #1024	; 0x400
   58028:	and	r7, r0, #512	; 0x200
   5802c:	uxtb	r0, r0
   58030:	cmp	r0, #18
   58034:	movcs	r0, r5
   58038:	str	r0, [r1, #16]
   5803c:	str	ip, [r1, #20]
   58040:	str	r3, [r1, #24]
   58044:	str	r7, [r1, #28]
   58048:	cmp	r0, #5
   5804c:	ldreq	r0, [sp, #60]	; 0x3c
   58050:	streq	r0, [r1]
   58054:	b	580ac <ReadNextCell+0x8ac>
   58058:	ldr	r0, [pc, #580]	; 582a4 <ReadNextCell+0xaa4>
   5805c:	mov	r1, r6
   58060:	add	r0, pc, r0
   58064:	bl	19b4 <Mat_Critical@plt>
   58068:	ldr	r0, [fp, #-32]	; 0xffffffe0
   5806c:	add	r6, r6, #1
   58070:	cmp	r6, r0
   58074:	bcc	57f3c <ReadNextCell+0x73c>
   58078:	b	57860 <ReadNextCell+0x60>
   5807c:	ldr	r0, [r7, r6, lsl #2]
   58080:	ldr	r0, [r0, #52]	; 0x34
   58084:	bl	1804 <free@plt>
   58088:	ldr	r0, [r7, r6, lsl #2]
   5808c:	mov	r1, #0
   58090:	str	r1, [r0, #52]	; 0x34
   58094:	ldr	r0, [fp, #-32]	; 0xffffffe0
   58098:	add	r6, r6, #1
   5809c:	cmp	r6, r0
   580a0:	bcc	57f3c <ReadNextCell+0x73c>
   580a4:	b	57860 <ReadNextCell+0x60>
   580a8:	ldr	r1, [r7, r6, lsl #2]
   580ac:	add	r7, r2, r9
   580b0:	ldr	r2, [sp, #64]	; 0x40
   580b4:	ldr	r3, [sp, #68]	; 0x44
   580b8:	mov	r0, r4
   580bc:	bl	582b0 <ReadRankDims>
   580c0:	ldr	r3, [r4]
   580c4:	mov	r5, r0
   580c8:	mov	r0, sl
   580cc:	mov	r1, #1
   580d0:	mov	r2, #8
   580d4:	bl	18b8 <fread@plt>
   580d8:	mov	r9, r0
   580dc:	mov	r0, r4
   580e0:	sub	r4, r8, #32
   580e4:	ldr	r0, [r0, #20]
   580e8:	cmp	r0, #0
   580ec:	beq	58100 <ReadNextCell+0x900>
   580f0:	mov	r0, sl
   580f4:	bl	1c04 <Mat_uint32Swap>
   580f8:	ldr	r0, [sp, #32]
   580fc:	bl	1c04 <Mat_uint32Swap>
   58100:	add	r7, r7, r5
   58104:	sub	r8, r4, r5
   58108:	ldr	r5, [sp, #52]	; 0x34
   5810c:	cmp	r5, #0
   58110:	beq	58158 <ReadNextCell+0x958>
   58114:	ldr	r0, [sp, #48]	; 0x30
   58118:	cmp	r0, #1
   5811c:	bne	58158 <ReadNextCell+0x958>
   58120:	asr	r0, r5, #31
   58124:	ldr	r4, [sp, #40]	; 0x28
   58128:	mov	r2, #1
   5812c:	add	r0, r5, r0, lsr #29
   58130:	bic	r0, r0, #7
   58134:	sub	r0, r5, r0
   58138:	rsb	r1, r0, #8
   5813c:	cmp	r0, #0
   58140:	ldr	r0, [r4]
   58144:	addgt	r5, r5, r1
   58148:	mov	r1, r5
   5814c:	bl	1a2c <fseek@plt>
   58150:	sub	r8, r8, r5
   58154:	b	5815c <ReadNextCell+0x95c>
   58158:	ldr	r4, [sp, #40]	; 0x28
   5815c:	ldr	r0, [r4]
   58160:	add	r9, r7, r9
   58164:	bl	1840 <ftell@plt>
   58168:	ldr	r7, [sp, #36]	; 0x24
   5816c:	cmn	r0, #1
   58170:	ldr	r1, [r7, r6, lsl #2]
   58174:	ldr	r2, [r1, #52]	; 0x34
   58178:	str	r0, [r2]
   5817c:	beq	581e4 <ReadNextCell+0x9e4>
   58180:	ldr	r0, [r1, #16]
   58184:	cmp	r0, #2
   58188:	bne	581a0 <ReadNextCell+0x9a0>
   5818c:	mov	r0, r4
   58190:	bl	56a04 <ReadNextStructField>
   58194:	ldr	r1, [r7, r6, lsl #2]
   58198:	add	r9, r0, r9
   5819c:	ldr	r0, [r1, #16]
   581a0:	cmp	r0, #1
   581a4:	bne	581b8 <ReadNextCell+0x9b8>
   581a8:	mov	r0, r4
   581ac:	bl	57800 <ReadNextCell>
   581b0:	ldr	r1, [r7, r6, lsl #2]
   581b4:	add	r9, r0, r9
   581b8:	ldr	r0, [r1, #52]	; 0x34
   581bc:	mov	r2, #0
   581c0:	ldr	r0, [r0]
   581c4:	add	r1, r0, r8
   581c8:	ldr	r0, [r4]
   581cc:	bl	1a2c <fseek@plt>
   581d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   581d4:	add	r6, r6, #1
   581d8:	cmp	r6, r0
   581dc:	bcc	57f3c <ReadNextCell+0x73c>
   581e0:	b	57860 <ReadNextCell+0x60>
   581e4:	ldr	r0, [pc, #192]	; 582ac <ReadNextCell+0xaac>
   581e8:	add	r0, pc, r0
   581ec:	bl	19b4 <Mat_Critical@plt>
   581f0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   581f4:	add	r6, r6, #1
   581f8:	cmp	r6, r0
   581fc:	bcc	57f3c <ReadNextCell+0x73c>
   58200:	b	57860 <ReadNextCell+0x60>
   58204:	mov	r9, #0
   58208:	mov	r0, r9
   5820c:	sub	sp, fp, #28
   58210:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   58214:	mov	r9, #0
   58218:	mov	r0, r9
   5821c:	sub	sp, fp, #28
   58220:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   58224:	bl	1918 <Mat_VarFree@plt>
   58228:	mov	r0, #0
   5822c:	mov	r1, r8
   58230:	str	r0, [sl]
   58234:	ldr	r0, [pc, #84]	; 58290 <ReadNextCell+0xa90>
   58238:	add	r0, pc, r0
   5823c:	bl	19b4 <Mat_Critical@plt>
   58240:	mov	r0, r9
   58244:	sub	sp, fp, #28
   58248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5824c:	ldr	r0, [r7, r6, lsl #2]
   58250:	bl	1918 <Mat_VarFree@plt>
   58254:	mov	r0, #0
   58258:	str	r0, [r7, r6, lsl #2]
   5825c:	ldr	r0, [r4]
   58260:	bl	1840 <ftell@plt>
   58264:	mov	r2, r0
   58268:	ldr	r0, [pc, #56]	; 582a8 <ReadNextCell+0xaa8>
   5826c:	mov	r1, r6
   58270:	add	r0, pc, r0
   58274:	bl	19b4 <Mat_Critical@plt>
   58278:	mov	r0, r9
   5827c:	sub	sp, fp, #28
   58280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   58284:	.word	0x00008010
   58288:	.word	0x00007c95
   5828c:	.word	0x00008177
   58290:	.word	0x00007991
   58294:	.word	0x000080ae
   58298:	.word	0x000079e0
   5829c:	.word	0x00007c8b
   582a0:	.word	0x00007da7
   582a4:	.word	0x00007b43
   582a8:	.word	0x00007988
   582ac:	.word	0x000075f0

000582b0 <ReadRankDims>:
   582b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   582b4:	add	fp, sp, #24
   582b8:	sub	sp, sp, #8
   582bc:	mov	r7, #0
   582c0:	cmp	r2, #5
   582c4:	bne	58380 <ReadRankDims+0xd0>
   582c8:	mov	r9, r0
   582cc:	lsr	r5, r3, #2
   582d0:	bic	r0, r3, #3
   582d4:	mov	r4, r1
   582d8:	str	r5, [r1, #4]
   582dc:	bl	18d0 <malloc@plt>
   582e0:	cmp	r0, #0
   582e4:	str	r0, [r4, #32]
   582e8:	beq	5838c <ReadRankDims+0xdc>
   582ec:	cmp	r5, #0
   582f0:	beq	583ac <ReadRankDims+0xfc>
   582f4:	mov	r6, #0
   582f8:	add	r8, sp, #4
   582fc:	mov	r5, #0
   58300:	ldr	r3, [r9]
   58304:	mov	r0, r8
   58308:	mov	r1, #4
   5830c:	mov	r2, #1
   58310:	bl	18b8 <fread@plt>
   58314:	cmp	r0, #1
   58318:	bne	583bc <ReadRankDims+0x10c>
   5831c:	ldr	r0, [r9, #20]
   58320:	cmp	r0, #0
   58324:	beq	58334 <ReadRankDims+0x84>
   58328:	mov	r0, r8
   5832c:	bl	1c04 <Mat_uint32Swap>
   58330:	b	58338 <ReadRankDims+0x88>
   58334:	ldr	r0, [sp, #4]
   58338:	ldr	r1, [r4, #32]
   5833c:	add	r7, r6, #4
   58340:	add	r5, r5, #1
   58344:	str	r0, [r1, r6]
   58348:	mov	r6, r7
   5834c:	ldr	r0, [r4, #4]
   58350:	cmp	r5, r0
   58354:	blt	58300 <ReadRankDims+0x50>
   58358:	tst	r0, #1
   5835c:	beq	58380 <ReadRankDims+0xd0>
   58360:	ldr	r3, [r9]
   58364:	add	r0, sp, #4
   58368:	mov	r1, #4
   5836c:	mov	r2, #1
   58370:	bl	18b8 <fread@plt>
   58374:	cmp	r0, #1
   58378:	bne	583ec <ReadRankDims+0x13c>
   5837c:	add	r7, r7, #4
   58380:	mov	r0, r7
   58384:	sub	sp, fp, #24
   58388:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   5838c:	mov	r7, #0
   58390:	str	r7, [r4, #4]
   58394:	ldr	r0, [pc, #112]	; 5840c <ReadRankDims+0x15c>
   58398:	add	r0, pc, r0
   5839c:	bl	19b4 <Mat_Critical@plt>
   583a0:	mov	r0, r7
   583a4:	sub	sp, fp, #24
   583a8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   583ac:	mov	r7, #0
   583b0:	mov	r0, r7
   583b4:	sub	sp, fp, #24
   583b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   583bc:	ldr	r0, [r4, #32]
   583c0:	bl	1804 <free@plt>
   583c4:	mov	r0, #0
   583c8:	str	r0, [r4, #4]
   583cc:	str	r0, [r4, #32]
   583d0:	ldr	r0, [pc, #48]	; 58408 <ReadRankDims+0x158>
   583d4:	add	r0, pc, r0
   583d8:	bl	19b4 <Mat_Critical@plt>
   583dc:	mov	r7, r6
   583e0:	mov	r0, r7
   583e4:	sub	sp, fp, #24
   583e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   583ec:	ldr	r0, [pc, #16]	; 58404 <ReadRankDims+0x154>
   583f0:	add	r0, pc, r0
   583f4:	bl	19b4 <Mat_Critical@plt>
   583f8:	mov	r0, r7
   583fc:	sub	sp, fp, #24
   58400:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   58404:	.word	0x00007674
   58408:	.word	0x00007690
   5840c:	.word	0x0000721d

00058410 <GetTypeBufSize>:
   58410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   58414:	add	fp, sp, #28
   58418:	sub	sp, sp, #20
   5841c:	mov	r5, r0
   58420:	mov	r0, #1
   58424:	add	r1, sp, #12
   58428:	str	r0, [sp, #12]
   5842c:	mov	r0, r5
   58430:	bl	5a144 <SafeMulDims>
   58434:	ldr	r9, [r5, #4]
   58438:	ldr	r0, [r5, #16]
   5843c:	mov	sl, #12
   58440:	tst	r9, #1
   58444:	sub	r0, r0, #1
   58448:	movweq	sl, #8
   5844c:	cmp	r0, #4
   58450:	add	r4, sl, r9, lsl #2
   58454:	bhi	585d0 <GetTypeBufSize+0x1c0>
   58458:	add	r1, pc, #4
   5845c:	ldr	r0, [r1, r0, lsl #2]
   58460:	add	pc, r1, r0
   58464:	.word	0x00000014
   58468:	.word	0x0000007c
   5846c:	.word	0x0000016c
   58470:	.word	0x00000178
   58474:	.word	0x000001c0
   58478:	ldr	r0, [r5]
   5847c:	cmp	r0, #0
   58480:	ldrne	r2, [r5, #12]
   58484:	cmpne	r2, #0
   58488:	beq	585c4 <GetTypeBufSize+0x1b4>
   5848c:	ldr	r5, [r5, #40]	; 0x28
   58490:	udiv	r1, r0, r2
   58494:	str	r1, [sp, #12]
   58498:	cmp	r5, #0
   5849c:	beq	585c4 <GetTypeBufSize+0x1b4>
   584a0:	cmp	r2, r0
   584a4:	bhi	585c4 <GetTypeBufSize+0x1b4>
   584a8:	mov	r6, #0
   584ac:	ldr	r0, [r5, r6, lsl #2]
   584b0:	mov	r2, #0
   584b4:	cmp	r0, #0
   584b8:	beq	584c8 <GetTypeBufSize+0xb8>
   584bc:	bl	58410 <GetTypeBufSize>
   584c0:	ldr	r1, [sp, #12]
   584c4:	add	r2, r0, #24
   584c8:	add	r0, r4, r2
   584cc:	add	r6, r6, #1
   584d0:	add	r4, r0, #8
   584d4:	cmp	r6, r1
   584d8:	bcc	584ac <GetTypeBufSize+0x9c>
   584dc:	b	585c4 <GetTypeBufSize+0x1b4>
   584e0:	ldr	r0, [r5, #40]	; 0x28
   584e4:	mov	r4, #0
   584e8:	mov	r7, #0
   584ec:	str	r0, [sp, #4]
   584f0:	ldr	r0, [r5, #52]	; 0x34
   584f4:	ldr	r8, [r0, #4]
   584f8:	cmp	r8, #0
   584fc:	beq	58530 <GetTypeBufSize+0x120>
   58500:	ldr	r6, [r0, #8]
   58504:	mov	r7, #0
   58508:	mov	r5, r8
   5850c:	ldr	r0, [r6]
   58510:	cmp	r0, #0
   58514:	beq	58524 <GetTypeBufSize+0x114>
   58518:	bl	1954 <strlen@plt>
   5851c:	cmp	r0, r7
   58520:	movhi	r7, r0
   58524:	subs	r5, r5, #1
   58528:	add	r6, r6, #4
   5852c:	bne	5850c <GetTypeBufSize+0xfc>
   58530:	add	r0, r7, #1
   58534:	mul	r0, r8, r0
   58538:	add	r1, r0, r4
   5853c:	add	r4, r4, r8
   58540:	tst	r1, #7
   58544:	bne	58538 <GetTypeBufSize+0x128>
   58548:	ldr	r6, [sp, #4]
   5854c:	mla	r0, r7, r8, sl
   58550:	add	r0, r0, r9, lsl #2
   58554:	add	r0, r0, r4
   58558:	add	r4, r0, #16
   5855c:	cmp	r6, #0
   58560:	cmpne	r8, #0
   58564:	beq	585c4 <GetTypeBufSize+0x1b4>
   58568:	ldr	r1, [sp, #12]
   5856c:	mov	r0, #1
   58570:	mov	r2, r8
   58574:	str	r0, [sp, #8]
   58578:	add	r0, sp, #8
   5857c:	bl	5a1a4 <SafeMul>
   58580:	ldr	r1, [sp, #8]
   58584:	cmp	r1, #0
   58588:	beq	585c4 <GetTypeBufSize+0x1b4>
   5858c:	mov	r5, #0
   58590:	ldr	r0, [r6, r5, lsl #2]
   58594:	cmp	r0, #0
   58598:	beq	585ac <GetTypeBufSize+0x19c>
   5859c:	bl	58410 <GetTypeBufSize>
   585a0:	ldr	r1, [sp, #8]
   585a4:	add	r0, r0, #24
   585a8:	b	585b0 <GetTypeBufSize+0x1a0>
   585ac:	mov	r0, #48	; 0x30
   585b0:	add	r0, r4, r0
   585b4:	add	r5, r5, #1
   585b8:	add	r4, r0, #8
   585bc:	cmp	r5, r1
   585c0:	bcc	58590 <GetTypeBufSize+0x180>
   585c4:	mov	r0, r4
   585c8:	sub	sp, fp, #28
   585cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   585d0:	ldr	r0, [r5, #8]
   585d4:	ldr	r6, [sp, #12]
   585d8:	b	585f0 <GetTypeBufSize+0x1e0>
   585dc:	ldr	r0, [r5, #8]
   585e0:	ldr	r6, [sp, #12]
   585e4:	sub	r1, r0, #1
   585e8:	cmp	r1, #1
   585ec:	movls	r0, #4
   585f0:	bl	1924 <Mat_SizeOf@plt>
   585f4:	mov	r2, r0
   585f8:	add	r0, sp, #16
   585fc:	mov	r1, r6
   58600:	bl	5a1a4 <SafeMul>
   58604:	ldr	r0, [sp, #16]
   58608:	ands	r1, r0, #7
   5860c:	addne	r0, r0, #8
   58610:	subne	r0, r0, r1
   58614:	strne	r0, [sp, #16]
   58618:	add	r0, r0, #8
   5861c:	add	r4, r0, r4
   58620:	b	586b4 <GetTypeBufSize+0x2a4>
   58624:	ldr	r6, [r5, #40]	; 0x28
   58628:	add	r0, sp, #16
   5862c:	mov	r2, #4
   58630:	ldr	r1, [r6, #8]
   58634:	bl	5a1a4 <SafeMul>
   58638:	ldr	r8, [sp, #16]
   5863c:	mov	r2, #4
   58640:	ands	r0, r8, #7
   58644:	addne	r1, r8, #8
   58648:	subne	r8, r1, r0
   5864c:	add	r0, sp, #16
   58650:	strne	r8, [sp, #16]
   58654:	ldr	r1, [r6, #16]
   58658:	bl	5a1a4 <SafeMul>
   5865c:	ldr	r7, [sp, #16]
   58660:	ands	r0, r7, #7
   58664:	addne	r1, r7, #8
   58668:	subne	r7, r1, r0
   5866c:	strne	r7, [sp, #16]
   58670:	ldr	r0, [r5, #8]
   58674:	ldr	r6, [r6, #20]
   58678:	bl	1924 <Mat_SizeOf@plt>
   5867c:	mov	r2, r0
   58680:	add	r0, sp, #16
   58684:	mov	r1, r6
   58688:	bl	5a1a4 <SafeMul>
   5868c:	ldr	r0, [sp, #16]
   58690:	ands	r1, r0, #7
   58694:	addne	r0, r0, #8
   58698:	subne	r0, r0, r1
   5869c:	add	r1, r4, r8
   586a0:	strne	r0, [sp, #16]
   586a4:	add	r1, r1, r7
   586a8:	add	r0, r0, #8
   586ac:	add	r1, r1, r0
   586b0:	add	r4, r1, #16
   586b4:	ldr	r1, [r5, #20]
   586b8:	cmp	r1, #0
   586bc:	addne	r4, r4, r0
   586c0:	mov	r0, r4
   586c4:	sub	sp, fp, #28
   586c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000586cc <WriteCompressedData>:
   586cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   586d0:	add	fp, sp, #28
   586d4:	sub	sp, sp, #28
   586d8:	sub	sp, sp, #1024	; 0x400
   586dc:	mov	r6, #0
   586e0:	cmp	r0, #0
   586e4:	str	r6, [sp, #12]
   586e8:	str	r6, [sp, #8]
   586ec:	beq	58840 <WriteCompressedData+0x174>
   586f0:	mov	r5, r0
   586f4:	ldr	r0, [r0]
   586f8:	cmp	r0, #0
   586fc:	beq	58840 <WriteCompressedData+0x174>
   58700:	ldr	r6, [fp, #8]
   58704:	mov	r9, r3
   58708:	mov	r8, r2
   5870c:	mov	r4, r1
   58710:	mov	r0, r6
   58714:	bl	1924 <Mat_SizeOf@plt>
   58718:	mul	r0, r0, r9
   5871c:	str	r6, [fp, #-40]	; 0xffffffd8
   58720:	sub	r1, fp, #40	; 0x28
   58724:	mov	r6, #0
   58728:	mov	sl, #1024	; 0x400
   5872c:	add	r7, sp, #16
   58730:	str	r0, [fp, #-36]	; 0xffffffdc
   58734:	str	r0, [sp, #4]
   58738:	mov	r0, #8
   5873c:	str	r1, [r4]
   58740:	str	r0, [r4, #4]
   58744:	mov	r0, r4
   58748:	mov	r1, #0
   5874c:	str	r7, [r4, #12]
   58750:	str	sl, [r4, #16]
   58754:	bl	1894 <deflate@plt>
   58758:	ldr	r0, [r4, #16]
   5875c:	ldr	r3, [r5]
   58760:	mov	r1, #1
   58764:	rsb	r2, r0, #1024	; 0x400
   58768:	mov	r0, r7
   5876c:	bl	18ac <fwrite@plt>
   58770:	add	r6, r0, r6
   58774:	ldr	r0, [r4, #16]
   58778:	cmp	r0, #0
   5877c:	beq	58744 <WriteCompressedData+0x78>
   58780:	cmp	r8, #0
   58784:	beq	58840 <WriteCompressedData+0x174>
   58788:	cmp	r9, #1
   5878c:	blt	58840 <WriteCompressedData+0x174>
   58790:	ldr	r9, [sp, #4]
   58794:	str	r8, [r4]
   58798:	mov	r8, #1024	; 0x400
   5879c:	str	r9, [r4, #4]
   587a0:	mov	r0, r4
   587a4:	mov	r1, #0
   587a8:	str	r7, [r4, #12]
   587ac:	str	r8, [r4, #16]
   587b0:	bl	1894 <deflate@plt>
   587b4:	ldr	r0, [r4, #16]
   587b8:	ldr	r3, [r5]
   587bc:	mov	r1, #1
   587c0:	rsb	r2, r0, #1024	; 0x400
   587c4:	mov	r0, r7
   587c8:	bl	18ac <fwrite@plt>
   587cc:	add	r6, r0, r6
   587d0:	ldr	r0, [r4, #16]
   587d4:	cmp	r0, #0
   587d8:	beq	587a0 <WriteCompressedData+0xd4>
   587dc:	asr	r0, r9, #31
   587e0:	add	r0, r9, r0, lsr #29
   587e4:	bic	r0, r0, #7
   587e8:	subs	r0, r9, r0
   587ec:	beq	58840 <WriteCompressedData+0x174>
   587f0:	add	r1, sp, #8
   587f4:	mov	r8, #1024	; 0x400
   587f8:	rsb	r0, r0, #8
   587fc:	str	r1, [r4]
   58800:	str	r0, [r4, #4]
   58804:	mov	r0, r4
   58808:	mov	r1, #0
   5880c:	str	r7, [r4, #12]
   58810:	str	r8, [r4, #16]
   58814:	bl	1894 <deflate@plt>
   58818:	ldr	r0, [r4, #16]
   5881c:	ldr	r3, [r5]
   58820:	mov	r1, #1
   58824:	rsb	r2, r0, #1024	; 0x400
   58828:	mov	r0, r7
   5882c:	bl	18ac <fwrite@plt>
   58830:	add	r6, r0, r6
   58834:	ldr	r0, [r4, #16]
   58838:	cmp	r0, #0
   5883c:	beq	58804 <WriteCompressedData+0x138>
   58840:	mov	r0, r6
   58844:	sub	sp, fp, #28
   58848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0005884c <WriteCompressedTypeArrayFlags>:
   5884c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   58850:	add	fp, sp, #28
   58854:	sub	sp, sp, #4
   58858:	sub	sp, sp, #4096	; 0x1000
   5885c:	mov	r9, sp
   58860:	mov	r4, r2
   58864:	mov	r8, r1
   58868:	mov	sl, r0
   5886c:	mov	r1, #0
   58870:	mov	r2, #2048	; 0x800
   58874:	mov	r5, #0
   58878:	mov	r0, r9
   5887c:	bl	1990 <memset@plt>
   58880:	ldr	r1, [r8, #16]
   58884:	cmp	r1, #0
   58888:	beq	58a68 <WriteCompressedTypeArrayFlags+0x21c>
   5888c:	add	r7, r8, #20
   58890:	uxtb	r0, r1
   58894:	ldm	r7, {r2, r3, r7}
   58898:	cmp	r2, #0
   5889c:	mov	r2, #8
   588a0:	orrne	r0, r0, #2048	; 0x800
   588a4:	cmp	r3, #0
   588a8:	mov	r3, #0
   588ac:	orrne	r0, r0, #1024	; 0x400
   588b0:	cmp	r7, #0
   588b4:	orrne	r0, r0, #512	; 0x200
   588b8:	cmp	r1, #5
   588bc:	mov	r1, #0
   588c0:	ldreq	r1, [r8, #40]	; 0x28
   588c4:	ldreq	r1, [r1]
   588c8:	str	r2, [sp, #4]
   588cc:	mov	r2, #6
   588d0:	str	r2, [sp]
   588d4:	str	r0, [sp, #8]
   588d8:	str	r1, [sp, #12]
   588dc:	mov	r1, #5
   588e0:	ldr	r0, [r8, #4]
   588e4:	str	r1, [sp, #16]
   588e8:	lsl	r1, r0, #2
   588ec:	cmp	r0, #1
   588f0:	str	r1, [sp, #20]
   588f4:	blt	58968 <WriteCompressedTypeArrayFlags+0x11c>
   588f8:	ldr	r6, [r8, #32]
   588fc:	mov	r2, #0
   58900:	cmp	r0, #4
   58904:	bcc	5894c <WriteCompressedTypeArrayFlags+0x100>
   58908:	add	r1, r6, r0, lsl #2
   5890c:	add	r3, r9, #24
   58910:	cmp	r3, r1
   58914:	addcc	r1, r9, r0, lsl #2
   58918:	addcc	r1, r1, #24
   5891c:	cmpcc	r6, r1
   58920:	bcc	5894c <WriteCompressedTypeArrayFlags+0x100>
   58924:	bic	r2, r0, #3
   58928:	mov	r1, r6
   5892c:	mov	r7, r2
   58930:	vld1.32	{d16-d17}, [r1]!
   58934:	subs	r7, r7, #4
   58938:	vst1.32	{d16-d17}, [r3]!
   5893c:	bne	58930 <WriteCompressedTypeArrayFlags+0xe4>
   58940:	cmp	r0, r2
   58944:	mov	r3, r0
   58948:	beq	58968 <WriteCompressedTypeArrayFlags+0x11c>
   5894c:	ldr	r1, [r6, r2, lsl #2]
   58950:	add	r3, r9, r2, lsl #2
   58954:	add	r2, r2, #1
   58958:	cmp	r0, r2
   5895c:	str	r1, [r3, #24]
   58960:	bne	5894c <WriteCompressedTypeArrayFlags+0x100>
   58964:	mov	r3, r0
   58968:	tst	r0, #1
   5896c:	mov	r7, #0
   58970:	mov	r6, #2048	; 0x800
   58974:	add	r5, sp, #2048	; 0x800
   58978:	addne	r0, r9, r3, lsl #2
   5897c:	movne	r1, #0
   58980:	addne	r3, r3, #1
   58984:	strne	r1, [r0, #24]
   58988:	mov	r0, #24
   5898c:	str	r9, [r4]
   58990:	add	r0, r0, r3, lsl #2
   58994:	str	r0, [r4, #4]
   58998:	mov	r0, r4
   5899c:	mov	r1, #0
   589a0:	str	r5, [r4, #12]
   589a4:	str	r6, [r4, #16]
   589a8:	bl	1894 <deflate@plt>
   589ac:	ldr	r0, [r4, #16]
   589b0:	ldr	r3, [sl]
   589b4:	mov	r1, #1
   589b8:	rsb	r2, r0, #2048	; 0x800
   589bc:	mov	r0, r5
   589c0:	bl	18ac <fwrite@plt>
   589c4:	add	r7, r0, r7
   589c8:	ldr	r0, [r4, #16]
   589cc:	cmp	r0, #0
   589d0:	beq	58998 <WriteCompressedTypeArrayFlags+0x14c>
   589d4:	mov	r0, #0
   589d8:	mov	r6, #2048	; 0x800
   589dc:	str	r0, [sp, #4]
   589e0:	mov	r0, #1
   589e4:	str	r0, [sp]
   589e8:	mov	r0, #8
   589ec:	str	r9, [r4]
   589f0:	str	r0, [r4, #4]
   589f4:	mov	r0, r4
   589f8:	mov	r1, #0
   589fc:	str	r5, [r4, #12]
   58a00:	str	r6, [r4, #16]
   58a04:	bl	1894 <deflate@plt>
   58a08:	ldr	r0, [r4, #16]
   58a0c:	ldr	r3, [sl]
   58a10:	mov	r1, #1
   58a14:	rsb	r2, r0, #2048	; 0x800
   58a18:	mov	r0, r5
   58a1c:	bl	18ac <fwrite@plt>
   58a20:	add	r7, r0, r7
   58a24:	ldr	r0, [r4, #16]
   58a28:	cmp	r0, #0
   58a2c:	beq	589f4 <WriteCompressedTypeArrayFlags+0x1a8>
   58a30:	ldr	r0, [sl]
   58a34:	bl	1840 <ftell@plt>
   58a38:	ldr	r1, [r8, #52]	; 0x34
   58a3c:	cmn	r0, #1
   58a40:	str	r0, [r1]
   58a44:	bne	58a54 <WriteCompressedTypeArrayFlags+0x208>
   58a48:	ldr	r0, [pc, #36]	; 58a74 <WriteCompressedTypeArrayFlags+0x228>
   58a4c:	add	r0, pc, r0
   58a50:	bl	19b4 <Mat_Critical@plt>
   58a54:	mov	r0, sl
   58a58:	mov	r1, r8
   58a5c:	mov	r2, r4
   58a60:	bl	557a0 <WriteCompressedType>
   58a64:	add	r5, r0, r7
   58a68:	mov	r0, r5
   58a6c:	sub	sp, fp, #28
   58a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   58a74:	.word	0x00006d8c

00058a78 <Mat_Create4>:
   58a78:	push	{r4, r5, r6, r7, fp, lr}
   58a7c:	add	fp, sp, #16
   58a80:	ldr	r1, [pc, #156]	; 58b24 <Mat_Create4+0xac>
   58a84:	mov	r5, r0
   58a88:	add	r1, pc, r1
   58a8c:	bl	17e0 <fopen@plt>
   58a90:	mov	r4, #0
   58a94:	cmp	r0, #0
   58a98:	beq	58b00 <Mat_Create4+0x88>
   58a9c:	mov	r7, r0
   58aa0:	mov	r0, #44	; 0x2c
   58aa4:	bl	18d0 <malloc@plt>
   58aa8:	cmp	r0, #0
   58aac:	beq	58b08 <Mat_Create4+0x90>
   58ab0:	mov	r4, #0
   58ab4:	str	r7, [r0]
   58ab8:	mov	r6, r0
   58abc:	mov	r1, r5
   58ac0:	str	r4, [r0, #4]
   58ac4:	str	r4, [r0, #8]
   58ac8:	ldr	r0, [pc, #92]	; 58b2c <Mat_Create4+0xb4>
   58acc:	add	r0, pc, r0
   58ad0:	bl	1dac <strdup_printf>
   58ad4:	str	r0, [r6, #12]
   58ad8:	mov	r1, #16
   58adc:	vmov.i32	q8, #0	; 0x00000000
   58ae0:	add	r0, r6, #20
   58ae4:	str	r1, [r6, #16]
   58ae8:	vst1.32	{d16-d17}, [r0]
   58aec:	mov	r0, r6
   58af0:	str	r4, [r6, #36]	; 0x24
   58af4:	str	r4, [r6, #40]	; 0x28
   58af8:	bl	1984 <Mat_Rewind@plt>
   58afc:	mov	r4, r6
   58b00:	mov	r0, r4
   58b04:	pop	{r4, r5, r6, r7, fp, pc}
   58b08:	mov	r0, r7
   58b0c:	bl	19cc <fclose@plt>
   58b10:	ldr	r0, [pc, #16]	; 58b28 <Mat_Create4+0xb0>
   58b14:	add	r0, pc, r0
   58b18:	bl	19b4 <Mat_Critical@plt>
   58b1c:	mov	r0, r4
   58b20:	pop	{r4, r5, r6, r7, fp, pc}
   58b24:	.word	0x00006d71
   58b28:	.word	0x00007114
   58b2c:	.word	0x00007657

00058b30 <Mat_VarWrite4>:
   58b30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   58b34:	add	fp, sp, #28
   58b38:	sub	sp, sp, #4
   58b3c:	vpush	{d8}
   58b40:	sub	sp, sp, #40	; 0x28
   58b44:	cmp	r0, #0
   58b48:	mvn	r5, #0
   58b4c:	movne	r6, r1
   58b50:	cmpne	r1, #0
   58b54:	bne	58b6c <Mat_VarWrite4+0x3c>
   58b58:	mov	r0, r5
   58b5c:	sub	sp, fp, #40	; 0x28
   58b60:	vpop	{d8}
   58b64:	add	sp, sp, #4
   58b68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   58b6c:	mov	r9, r0
   58b70:	ldr	r0, [r6, #36]	; 0x24
   58b74:	cmp	r0, #0
   58b78:	beq	58b58 <Mat_VarWrite4+0x28>
   58b7c:	ldr	r1, [r6, #4]
   58b80:	cmp	r1, #2
   58b84:	bne	58b58 <Mat_VarWrite4+0x28>
   58b88:	ldr	r1, [r6, #8]
   58b8c:	mov	r5, #2
   58b90:	sub	r1, r1, #2
   58b94:	cmp	r1, #7
   58b98:	bhi	58b58 <Mat_VarWrite4+0x28>
   58b9c:	uxtb	r2, r1
   58ba0:	mov	r3, #175	; 0xaf
   58ba4:	mov	r7, #1
   58ba8:	tst	r7, r3, lsr r2
   58bac:	beq	58b58 <Mat_VarWrite4+0x28>
   58bb0:	ldr	r2, [pc, #1320]	; 590e0 <Mat_VarWrite4+0x5b0>
   58bb4:	add	r2, pc, r2
   58bb8:	ldr	r8, [r2, r1, lsl #2]
   58bbc:	str	r8, [sp, #20]
   58bc0:	bl	1954 <strlen@plt>
   58bc4:	add	r0, r0, #1
   58bc8:	mov	r1, #0
   58bcc:	mov	r2, #2
   58bd0:	mov	r5, #0
   58bd4:	str	r0, [sp, #36]	; 0x24
   58bd8:	ldr	r0, [r9]
   58bdc:	bl	1a2c <fseek@plt>
   58be0:	ldr	r0, [r6, #16]
   58be4:	cmp	r0, #12
   58be8:	bhi	58b58 <Mat_VarWrite4+0x28>
   58bec:	mov	r7, #1
   58bf0:	mov	r1, #7872	; 0x1ec0
   58bf4:	tst	r1, r7, lsl r0
   58bf8:	beq	58c20 <Mat_VarWrite4+0xf0>
   58bfc:	ldr	r1, [r6, #4]
   58c00:	ldr	r4, [r6, #32]
   58c04:	cmp	r1, #1
   58c08:	blt	58cb0 <Mat_VarWrite4+0x180>
   58c0c:	cmp	r1, #4
   58c10:	bcs	58c64 <Mat_VarWrite4+0x134>
   58c14:	mov	r2, #0
   58c18:	mov	r7, #1
   58c1c:	b	58c9c <Mat_VarWrite4+0x16c>
   58c20:	cmp	r0, #4
   58c24:	beq	58d40 <Mat_VarWrite4+0x210>
   58c28:	cmp	r0, #5
   58c2c:	bne	58b58 <Mat_VarWrite4+0x28>
   58c30:	ldr	r0, [r6, #8]
   58c34:	bl	1924 <Mat_SizeOf@plt>
   58c38:	ldr	r7, [r6, #40]	; 0x28
   58c3c:	add	r1, r8, #2
   58c40:	str	r1, [sp, #20]
   58c44:	ldr	r2, [r7, #16]
   58c48:	cmp	r2, #1
   58c4c:	blt	58d5c <Mat_VarWrite4+0x22c>
   58c50:	ldr	r1, [r7, #12]
   58c54:	add	r1, r1, r2, lsl #2
   58c58:	ldr	r1, [r1, #-4]
   58c5c:	add	r1, r1, #1
   58c60:	b	58d60 <Mat_VarWrite4+0x230>
   58c64:	bic	r2, r1, #3
   58c68:	vmov.i32	q8, #1	; 0x00000001
   58c6c:	mov	r0, r4
   58c70:	mov	r3, r2
   58c74:	vld1.32	{d18-d19}, [r0]!
   58c78:	subs	r3, r3, #4
   58c7c:	vmul.i32	q8, q9, q8
   58c80:	bne	58c74 <Mat_VarWrite4+0x144>
   58c84:	vext.8	q9, q8, q8, #8
   58c88:	cmp	r1, r2
   58c8c:	vmul.i32	q0, q8, q9
   58c90:	vmul.i32	q8, q0, d0[1]
   58c94:	vmov.32	r7, d16[0]
   58c98:	beq	58cb0 <Mat_VarWrite4+0x180>
   58c9c:	ldr	r0, [r4, r2, lsl #2]
   58ca0:	add	r2, r2, #1
   58ca4:	cmp	r2, r1
   58ca8:	mul	r7, r0, r7
   58cac:	blt	58c9c <Mat_VarWrite4+0x16c>
   58cb0:	ldm	r4, {r0, r1}
   58cb4:	mov	r2, #1
   58cb8:	str	r0, [sp, #24]
   58cbc:	str	r1, [sp, #28]
   58cc0:	mov	r1, #20
   58cc4:	ldr	r0, [r6, #20]
   58cc8:	cmp	r0, #0
   58ccc:	movwne	r0, #1
   58cd0:	str	r0, [sp, #32]
   58cd4:	add	r0, sp, #20
   58cd8:	ldr	r3, [r9]
   58cdc:	bl	18ac <fwrite@plt>
   58ce0:	ldr	r0, [r6, #36]	; 0x24
   58ce4:	ldr	r3, [r9]
   58ce8:	ldr	r2, [sp, #36]	; 0x24
   58cec:	mov	r1, #1
   58cf0:	bl	18ac <fwrite@plt>
   58cf4:	ldr	r0, [r6, #20]
   58cf8:	cmp	r0, #0
   58cfc:	beq	58d28 <Mat_VarWrite4+0x1f8>
   58d00:	ldr	r4, [r6, #40]	; 0x28
   58d04:	ldr	r3, [r9]
   58d08:	ldr	r1, [r6, #12]
   58d0c:	mov	r2, r7
   58d10:	ldr	r0, [r4]
   58d14:	bl	18ac <fwrite@plt>
   58d18:	ldr	r0, [r4, #4]
   58d1c:	ldr	r1, [r6, #12]
   58d20:	ldr	r3, [r9]
   58d24:	b	58d34 <Mat_VarWrite4+0x204>
   58d28:	ldr	r3, [r9]
   58d2c:	ldr	r1, [r6, #12]
   58d30:	ldr	r0, [r6, #40]	; 0x28
   58d34:	mov	r2, r7
   58d38:	bl	18ac <fwrite@plt>
   58d3c:	b	58b58 <Mat_VarWrite4+0x28>
   58d40:	orr	r0, r8, #1
   58d44:	str	r0, [sp, #20]
   58d48:	ldr	r1, [r6, #4]
   58d4c:	ldr	r4, [r6, #32]
   58d50:	cmp	r1, #1
   58d54:	bge	58c0c <Mat_VarWrite4+0xdc>
   58d58:	b	58cb0 <Mat_VarWrite4+0x180>
   58d5c:	mov	r1, #1
   58d60:	str	r1, [sp, #24]
   58d64:	mov	sl, r0
   58d68:	mov	r1, #4
   58d6c:	mov	r5, #0
   58d70:	mov	r2, #1
   58d74:	ldr	r0, [r6, #20]
   58d78:	str	r5, [sp, #32]
   58d7c:	cmp	r0, #0
   58d80:	add	r0, sp, #20
   58d84:	movweq	r1, #3
   58d88:	str	r1, [sp, #28]
   58d8c:	mov	r1, #20
   58d90:	ldr	r3, [r9]
   58d94:	bl	18ac <fwrite@plt>
   58d98:	ldr	r0, [r6, #36]	; 0x24
   58d9c:	ldr	r3, [r9]
   58da0:	ldr	r2, [sp, #36]	; 0x24
   58da4:	mov	r1, #1
   58da8:	bl	18ac <fwrite@plt>
   58dac:	ldr	r1, [r7, #16]
   58db0:	cmp	r1, #2
   58db4:	blt	58e30 <Mat_VarWrite4+0x300>
   58db8:	ldr	r0, [r7, #12]
   58dbc:	add	r8, sp, #8
   58dc0:	ldr	r4, [r0, r5, lsl #2]
   58dc4:	add	r5, r5, #1
   58dc8:	ldr	r2, [r0, r5, lsl #2]
   58dcc:	cmp	r4, r2
   58dd0:	bge	58e24 <Mat_VarWrite4+0x2f4>
   58dd4:	ldr	r1, [r7, #20]
   58dd8:	cmp	r4, r1
   58ddc:	bge	58e20 <Mat_VarWrite4+0x2f0>
   58de0:	ldr	r0, [r7, #4]
   58de4:	mov	r1, #8
   58de8:	mov	r2, #1
   58dec:	ldr	r0, [r0, r4, lsl #2]
   58df0:	add	r0, r0, #1
   58df4:	vmov	s0, r0
   58df8:	mov	r0, r8
   58dfc:	vcvt.f64.s32	d16, s0
   58e00:	vstr	d16, [sp, #8]
   58e04:	ldr	r3, [r9]
   58e08:	bl	18ac <fwrite@plt>
   58e0c:	ldr	r0, [r7, #12]
   58e10:	add	r4, r4, #1
   58e14:	ldr	r1, [r0, r5, lsl #2]
   58e18:	cmp	r4, r1
   58e1c:	blt	58dd4 <Mat_VarWrite4+0x2a4>
   58e20:	ldr	r1, [r7, #16]
   58e24:	sub	r2, r1, #1
   58e28:	cmp	r5, r2
   58e2c:	blt	58dc0 <Mat_VarWrite4+0x290>
   58e30:	ldr	r0, [r6, #32]
   58e34:	mov	r1, #8
   58e38:	mov	r2, #1
   58e3c:	vldr	s0, [r0]
   58e40:	add	r0, sp, #8
   58e44:	vcvt.f64.u32	d16, s0
   58e48:	vstr	d16, [sp, #8]
   58e4c:	ldr	r3, [r9]
   58e50:	bl	18ac <fwrite@plt>
   58e54:	ldr	r1, [r7, #16]
   58e58:	cmp	r1, #2
   58e5c:	blt	58ed0 <Mat_VarWrite4+0x3a0>
   58e60:	ldr	r0, [r7, #12]
   58e64:	mov	r5, #0
   58e68:	add	r8, sp, #8
   58e6c:	ldr	r4, [r0, r5, lsl #2]
   58e70:	add	r5, r5, #1
   58e74:	ldr	r2, [r0, r5, lsl #2]
   58e78:	cmp	r4, r2
   58e7c:	bge	58ec4 <Mat_VarWrite4+0x394>
   58e80:	vmov	s0, r5
   58e84:	vcvt.f64.s32	d8, s0
   58e88:	ldr	r1, [r7, #20]
   58e8c:	cmp	r4, r1
   58e90:	bge	58ec0 <Mat_VarWrite4+0x390>
   58e94:	vstr	d8, [sp, #8]
   58e98:	mov	r0, r8
   58e9c:	mov	r1, #8
   58ea0:	mov	r2, #1
   58ea4:	ldr	r3, [r9]
   58ea8:	bl	18ac <fwrite@plt>
   58eac:	ldr	r0, [r7, #12]
   58eb0:	add	r4, r4, #1
   58eb4:	ldr	r1, [r0, r5, lsl #2]
   58eb8:	cmp	r4, r1
   58ebc:	blt	58e88 <Mat_VarWrite4+0x358>
   58ec0:	ldr	r1, [r7, #16]
   58ec4:	sub	r2, r1, #1
   58ec8:	cmp	r5, r2
   58ecc:	blt	58e6c <Mat_VarWrite4+0x33c>
   58ed0:	ldr	r0, [r6, #32]
   58ed4:	mov	r1, #8
   58ed8:	mov	r2, #1
   58edc:	vldr	s0, [r0, #4]
   58ee0:	add	r0, sp, #8
   58ee4:	vcvt.f64.u32	d16, s0
   58ee8:	vstr	d16, [sp, #8]
   58eec:	ldr	r3, [r9]
   58ef0:	bl	18ac <fwrite@plt>
   58ef4:	mov	r0, #0
   58ef8:	str	r0, [sp, #12]
   58efc:	str	r0, [sp, #8]
   58f00:	ldr	r0, [r6, #20]
   58f04:	cmp	r0, #0
   58f08:	beq	5903c <Mat_VarWrite4+0x50c>
   58f0c:	ldr	r0, [r7, #24]
   58f10:	ldr	r1, [r7, #16]
   58f14:	mov	r4, sl
   58f18:	ldr	r2, [r0, #4]
   58f1c:	cmp	r1, #2
   58f20:	str	r2, [sp, #4]
   58f24:	blt	58fa0 <Mat_VarWrite4+0x470>
   58f28:	ldr	sl, [r0]
   58f2c:	ldr	r0, [r7, #12]
   58f30:	mov	r5, #0
   58f34:	ldr	r8, [r0, r5, lsl #2]
   58f38:	add	r5, r5, #1
   58f3c:	ldr	r2, [r0, r5, lsl #2]
   58f40:	cmp	r8, r2
   58f44:	bge	58f94 <Mat_VarWrite4+0x464>
   58f48:	ldr	r1, [r7, #20]
   58f4c:	cmp	r8, r1
   58f50:	bge	58f90 <Mat_VarWrite4+0x460>
   58f54:	mla	r6, r4, r8, sl
   58f58:	ldr	r3, [r9]
   58f5c:	mov	r0, r6
   58f60:	mov	r1, r4
   58f64:	mov	r2, #1
   58f68:	bl	18ac <fwrite@plt>
   58f6c:	ldr	r0, [r7, #12]
   58f70:	add	r8, r8, #1
   58f74:	ldr	r1, [r0, r5, lsl #2]
   58f78:	cmp	r8, r1
   58f7c:	bge	58f90 <Mat_VarWrite4+0x460>
   58f80:	ldr	r1, [r7, #20]
   58f84:	add	r6, r6, r4
   58f88:	cmp	r8, r1
   58f8c:	blt	58f58 <Mat_VarWrite4+0x428>
   58f90:	ldr	r1, [r7, #16]
   58f94:	sub	r2, r1, #1
   58f98:	cmp	r5, r2
   58f9c:	blt	58f34 <Mat_VarWrite4+0x404>
   58fa0:	ldr	r3, [r9]
   58fa4:	add	r0, sp, #8
   58fa8:	mov	r1, r4
   58fac:	mov	r2, #1
   58fb0:	bl	18ac <fwrite@plt>
   58fb4:	ldr	r1, [r7, #16]
   58fb8:	ldr	sl, [sp, #4]
   58fbc:	cmp	r1, #2
   58fc0:	blt	590c4 <Mat_VarWrite4+0x594>
   58fc4:	ldr	r0, [r7, #12]
   58fc8:	mov	r8, #0
   58fcc:	ldr	r5, [r0, r8, lsl #2]
   58fd0:	add	r8, r8, #1
   58fd4:	ldr	r2, [r0, r8, lsl #2]
   58fd8:	cmp	r5, r2
   58fdc:	bge	5902c <Mat_VarWrite4+0x4fc>
   58fe0:	ldr	r1, [r7, #20]
   58fe4:	cmp	r5, r1
   58fe8:	bge	59028 <Mat_VarWrite4+0x4f8>
   58fec:	mla	r6, r4, r5, sl
   58ff0:	ldr	r3, [r9]
   58ff4:	mov	r0, r6
   58ff8:	mov	r1, r4
   58ffc:	mov	r2, #1
   59000:	bl	18ac <fwrite@plt>
   59004:	ldr	r0, [r7, #12]
   59008:	add	r5, r5, #1
   5900c:	ldr	r1, [r0, r8, lsl #2]
   59010:	cmp	r5, r1
   59014:	bge	59028 <Mat_VarWrite4+0x4f8>
   59018:	ldr	r1, [r7, #20]
   5901c:	add	r6, r6, r4
   59020:	cmp	r5, r1
   59024:	blt	58ff0 <Mat_VarWrite4+0x4c0>
   59028:	ldr	r1, [r7, #16]
   5902c:	sub	r2, r1, #1
   59030:	cmp	r8, r2
   59034:	blt	58fcc <Mat_VarWrite4+0x49c>
   59038:	b	590c4 <Mat_VarWrite4+0x594>
   5903c:	ldr	r1, [r7, #16]
   59040:	mov	r4, sl
   59044:	cmp	r1, #2
   59048:	blt	590c4 <Mat_VarWrite4+0x594>
   5904c:	ldr	r8, [r7, #24]
   59050:	ldr	r0, [r7, #12]
   59054:	mov	sl, #0
   59058:	ldr	r5, [r0, sl, lsl #2]
   5905c:	add	sl, sl, #1
   59060:	ldr	r2, [r0, sl, lsl #2]
   59064:	cmp	r5, r2
   59068:	bge	590b8 <Mat_VarWrite4+0x588>
   5906c:	ldr	r1, [r7, #20]
   59070:	cmp	r5, r1
   59074:	bge	590b4 <Mat_VarWrite4+0x584>
   59078:	mla	r6, r4, r5, r8
   5907c:	ldr	r3, [r9]
   59080:	mov	r0, r6
   59084:	mov	r1, r4
   59088:	mov	r2, #1
   5908c:	bl	18ac <fwrite@plt>
   59090:	ldr	r0, [r7, #12]
   59094:	add	r5, r5, #1
   59098:	ldr	r1, [r0, sl, lsl #2]
   5909c:	cmp	r5, r1
   590a0:	bge	590b4 <Mat_VarWrite4+0x584>
   590a4:	ldr	r1, [r7, #20]
   590a8:	add	r6, r6, r4
   590ac:	cmp	r5, r1
   590b0:	blt	5907c <Mat_VarWrite4+0x54c>
   590b4:	ldr	r1, [r7, #16]
   590b8:	sub	r2, r1, #1
   590bc:	cmp	sl, r2
   590c0:	blt	59058 <Mat_VarWrite4+0x528>
   590c4:	ldr	r3, [r9]
   590c8:	add	r0, sp, #8
   590cc:	mov	r1, r4
   590d0:	mov	r2, #1
   590d4:	bl	18ac <fwrite@plt>
   590d8:	mov	r5, #0
   590dc:	b	58b58 <Mat_VarWrite4+0x28>
   590e0:	.word	0x00007194
   590e4:	.word	0xe320f000

000590e8 <Mat_VarRead4>:
   590e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   590ec:	add	fp, sp, #28
   590f0:	sub	sp, sp, #20
   590f4:	mov	r5, r1
   590f8:	mov	sl, r0
   590fc:	mov	r4, #1
   59100:	add	r1, sp, #16
   59104:	mov	r0, r5
   59108:	str	r4, [sp, #16]
   5910c:	bl	5a144 <SafeMulDims>
   59110:	ldr	r1, [r5, #52]	; 0x34
   59114:	ldr	r0, [sl]
   59118:	mov	r2, #0
   5911c:	ldr	r1, [r1]
   59120:	bl	1a2c <fseek@plt>
   59124:	ldr	r0, [r5, #16]
   59128:	cmp	r0, #4
   5912c:	beq	59198 <Mat_VarRead4+0xb0>
   59130:	cmp	r0, #5
   59134:	beq	591dc <Mat_VarRead4+0xf4>
   59138:	cmp	r0, #6
   5913c:	bne	59360 <Mat_VarRead4+0x278>
   59140:	mov	r0, #8
   59144:	mov	r2, #8
   59148:	str	r0, [r5, #12]
   5914c:	mov	r0, r5
   59150:	ldr	r1, [sp, #16]
   59154:	bl	5a1a4 <SafeMul>
   59158:	ldr	r1, [r5, #20]
   5915c:	ldr	r0, [r5]
   59160:	cmp	r1, #0
   59164:	beq	59374 <Mat_VarRead4+0x28c>
   59168:	bl	5a0b4 <ComplexMalloc>
   5916c:	cmp	r0, #0
   59170:	beq	593dc <Mat_VarRead4+0x2f4>
   59174:	str	r0, [r5, #40]	; 0x28
   59178:	mov	r6, r0
   5917c:	ldr	r1, [r0]
   59180:	ldr	r2, [r5, #8]
   59184:	ldr	r3, [sp, #16]
   59188:	mov	r0, sl
   5918c:	bl	38dc <ReadDoubleData>
   59190:	ldr	r1, [r6, #4]
   59194:	b	59388 <Mat_VarRead4+0x2a0>
   59198:	str	r4, [r5, #12]
   5919c:	ldr	r6, [sp, #16]
   591a0:	mov	r0, r6
   591a4:	str	r6, [r5]
   591a8:	bl	18d0 <malloc@plt>
   591ac:	cmp	r0, #0
   591b0:	str	r0, [r5, #40]	; 0x28
   591b4:	beq	593a8 <Mat_VarRead4+0x2c0>
   591b8:	ldr	r2, [r5, #8]!
   591bc:	mov	r1, r0
   591c0:	mov	r0, sl
   591c4:	mov	r3, r6
   591c8:	bl	1b1ec <ReadUInt8Data>
   591cc:	mov	r0, #2
   591d0:	str	r0, [r5]
   591d4:	sub	sp, fp, #28
   591d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   591dc:	mov	r0, #28
   591e0:	str	r0, [r5, #12]
   591e4:	mov	r0, #28
   591e8:	bl	18d0 <malloc@plt>
   591ec:	cmp	r0, #0
   591f0:	str	r0, [r5, #40]	; 0x28
   591f4:	beq	593c8 <Mat_VarRead4+0x2e0>
   591f8:	mov	r6, r0
   591fc:	ldr	r0, [r5, #32]
   59200:	ldr	r1, [r0, #4]
   59204:	sub	r1, r1, #4
   59208:	clz	r1, r1
   5920c:	lsr	r1, r1, #5
   59210:	str	r1, [r5, #20]
   59214:	ldr	r0, [r0]
   59218:	sub	r7, r0, #1
   5921c:	lsl	r0, r7, #2
   59220:	str	r7, [r6]
   59224:	str	r7, [r6, #8]
   59228:	bl	18d0 <malloc@plt>
   5922c:	cmp	r0, #0
   59230:	str	r0, [r6, #4]
   59234:	beq	593e8 <Mat_VarRead4+0x300>
   59238:	mov	r1, r0
   5923c:	mov	r0, sl
   59240:	mov	r2, #9
   59244:	mov	r3, r7
   59248:	bl	da88 <ReadInt32Data>
   5924c:	ldr	r0, [r6, #8]
   59250:	cmp	r0, #1
   59254:	blt	5927c <Mat_VarRead4+0x194>
   59258:	ldr	r0, [r6, #4]
   5925c:	mov	r1, #0
   59260:	ldr	r2, [r0, r1, lsl #2]
   59264:	sub	r2, r2, #1
   59268:	str	r2, [r0, r1, lsl #2]
   5926c:	add	r1, r1, #1
   59270:	ldr	r2, [r6, #8]
   59274:	cmp	r1, r2
   59278:	blt	59260 <Mat_VarRead4+0x178>
   5927c:	add	r1, sp, #8
   59280:	mov	r0, sl
   59284:	mov	r2, #9
   59288:	mov	r3, #1
   5928c:	bl	38dc <ReadDoubleData>
   59290:	vldr	d16, [sp, #8]
   59294:	ldr	r0, [r5, #32]
   59298:	vcvt.u32.f64	s0, d16
   5929c:	vstr	s0, [r0]
   592a0:	ldr	r0, [sl]
   592a4:	bl	1840 <ftell@plt>
   592a8:	cmn	r0, #1
   592ac:	beq	5940c <Mat_VarRead4+0x324>
   592b0:	ldr	r7, [sl]
   592b4:	ldr	r4, [r6, #8]
   592b8:	mov	r8, r0
   592bc:	mov	r0, #9
   592c0:	bl	1924 <Mat_SizeOf@plt>
   592c4:	mul	r1, r0, r4
   592c8:	mov	r0, r7
   592cc:	mov	r2, #1
   592d0:	bl	1a2c <fseek@plt>
   592d4:	add	r1, sp, #8
   592d8:	mov	r0, sl
   592dc:	mov	r2, #9
   592e0:	mov	r3, #1
   592e4:	bl	38dc <ReadDoubleData>
   592e8:	vldr	d16, [sp, #8]
   592ec:	vldr	d17, [pc, #972]	; 596c0 <Mat_VarRead4+0x5d8>
   592f0:	vcmpe.f64	d16, d17
   592f4:	vmrs	APSR_nzcv, fpscr
   592f8:	bgt	59454 <Mat_VarRead4+0x36c>
   592fc:	vcmpe.f64	d16, #0.0
   59300:	vmrs	APSR_nzcv, fpscr
   59304:	bmi	59454 <Mat_VarRead4+0x36c>
   59308:	ldr	r0, [r5, #32]
   5930c:	vcvt.u32.f64	s0, d16
   59310:	mov	r1, r8
   59314:	mov	r2, #0
   59318:	mov	r4, #0
   5931c:	vstr	s0, [r0, #4]
   59320:	ldr	r0, [sl]
   59324:	bl	1a2c <fseek@plt>
   59328:	ldr	r0, [r5, #32]
   5932c:	ldr	r0, [r0, #4]
   59330:	cmn	r0, #-2147483647	; 0x80000001
   59334:	bcc	59480 <Mat_VarRead4+0x398>
   59338:	ldr	r0, [r6, #4]
   5933c:	bl	1804 <free@plt>
   59340:	ldr	r0, [r5, #40]	; 0x28
   59344:	bl	1804 <free@plt>
   59348:	str	r4, [r5, #40]	; 0x28
   5934c:	ldr	r0, [pc, #1696]	; 599f4 <Mat_VarRead4+0x90c>
   59350:	add	r0, pc, r0
   59354:	bl	19b4 <Mat_Critical@plt>
   59358:	sub	sp, fp, #28
   5935c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   59360:	ldr	r0, [pc, #1700]	; 59a0c <Mat_VarRead4+0x924>
   59364:	add	r0, pc, r0
   59368:	bl	19b4 <Mat_Critical@plt>
   5936c:	sub	sp, fp, #28
   59370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   59374:	bl	18d0 <malloc@plt>
   59378:	cmp	r0, #0
   5937c:	str	r0, [r5, #40]	; 0x28
   59380:	beq	59438 <Mat_VarRead4+0x350>
   59384:	mov	r1, r0
   59388:	ldr	r2, [r5, #8]
   5938c:	ldr	r3, [sp, #16]
   59390:	mov	r0, sl
   59394:	bl	38dc <ReadDoubleData>
   59398:	mov	r0, #9
   5939c:	str	r0, [r5, #8]
   593a0:	sub	sp, fp, #28
   593a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   593a8:	ldr	r0, [pc, #1592]	; 599e8 <Mat_VarRead4+0x900>
   593ac:	add	r0, pc, r0
   593b0:	bl	19b4 <Mat_Critical@plt>
   593b4:	add	r5, r5, #8
   593b8:	mov	r0, #2
   593bc:	str	r0, [r5]
   593c0:	sub	sp, fp, #28
   593c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   593c8:	ldr	r0, [pc, #1592]	; 59a08 <Mat_VarRead4+0x920>
   593cc:	add	r0, pc, r0
   593d0:	bl	19b4 <Mat_Critical@plt>
   593d4:	sub	sp, fp, #28
   593d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   593dc:	ldr	r0, [pc, #1532]	; 599e0 <Mat_VarRead4+0x8f8>
   593e0:	add	r0, pc, r0
   593e4:	b	59440 <Mat_VarRead4+0x358>
   593e8:	mov	r0, r6
   593ec:	bl	1804 <free@plt>
   593f0:	mov	r0, #0
   593f4:	str	r0, [r5, #40]	; 0x28
   593f8:	ldr	r0, [pc, #1552]	; 59a10 <Mat_VarRead4+0x928>
   593fc:	add	r0, pc, r0
   59400:	bl	19b4 <Mat_Critical@plt>
   59404:	sub	sp, fp, #28
   59408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5940c:	ldr	r0, [r6, #4]
   59410:	bl	1804 <free@plt>
   59414:	ldr	r0, [r5, #40]	; 0x28
   59418:	bl	1804 <free@plt>
   5941c:	mov	r0, #0
   59420:	str	r0, [r5, #40]	; 0x28
   59424:	ldr	r0, [pc, #1472]	; 599ec <Mat_VarRead4+0x904>
   59428:	add	r0, pc, r0
   5942c:	bl	19b4 <Mat_Critical@plt>
   59430:	sub	sp, fp, #28
   59434:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   59438:	ldr	r0, [pc, #1444]	; 599e4 <Mat_VarRead4+0x8fc>
   5943c:	add	r0, pc, r0
   59440:	bl	19b4 <Mat_Critical@plt>
   59444:	mov	r0, #9
   59448:	str	r0, [r5, #8]
   5944c:	sub	sp, fp, #28
   59450:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   59454:	ldr	r0, [r6, #4]
   59458:	bl	1804 <free@plt>
   5945c:	ldr	r0, [r5, #40]	; 0x28
   59460:	bl	1804 <free@plt>
   59464:	mov	r0, #0
   59468:	str	r0, [r5, #40]	; 0x28
   5946c:	ldr	r0, [pc, #1404]	; 599f0 <Mat_VarRead4+0x908>
   59470:	add	r0, pc, r0
   59474:	bl	19b4 <Mat_Critical@plt>
   59478:	sub	sp, fp, #28
   5947c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   59480:	add	r0, r0, #1
   59484:	str	r0, [r6, #16]
   59488:	lsl	r0, r0, #2
   5948c:	bl	18d0 <malloc@plt>
   59490:	cmp	r0, #0
   59494:	str	r0, [r6, #12]
   59498:	beq	59618 <Mat_VarRead4+0x530>
   5949c:	ldr	r9, [r6, #8]
   594a0:	mov	r8, r0
   594a4:	lsl	r0, r9, #2
   594a8:	bl	18d0 <malloc@plt>
   594ac:	cmp	r0, #0
   594b0:	beq	59610 <Mat_VarRead4+0x528>
   594b4:	mov	r7, r0
   594b8:	mov	r4, #0
   594bc:	mov	r0, sl
   594c0:	mov	r2, #9
   594c4:	mov	r3, r9
   594c8:	mov	r1, r7
   594cc:	str	r4, [r8]
   594d0:	bl	da88 <ReadInt32Data>
   594d4:	ldr	r0, [r6, #16]
   594d8:	cmp	r0, #3
   594dc:	blt	59528 <Mat_VarRead4+0x440>
   594e0:	ldr	r0, [r6, #12]
   594e4:	mov	r1, #1
   594e8:	ldr	r2, [r6, #8]
   594ec:	cmp	r4, r2
   594f0:	blt	59504 <Mat_VarRead4+0x41c>
   594f4:	b	59510 <Mat_VarRead4+0x428>
   594f8:	add	r4, r4, #1
   594fc:	cmp	r4, r2
   59500:	bge	59510 <Mat_VarRead4+0x428>
   59504:	ldr	r3, [r7, r4, lsl #2]
   59508:	cmp	r3, r1
   5950c:	ble	594f8 <Mat_VarRead4+0x410>
   59510:	str	r4, [r0, r1, lsl #2]
   59514:	add	r1, r1, #1
   59518:	ldr	r2, [r6, #16]
   5951c:	sub	r2, r2, #1
   59520:	cmp	r1, r2
   59524:	blt	594e8 <Mat_VarRead4+0x400>
   59528:	mov	r0, r7
   5952c:	bl	1804 <free@plt>
   59530:	add	r2, r6, #8
   59534:	mov	r3, #1
   59538:	ldm	r2, {r0, r1, r2}
   5953c:	add	r1, r1, r2, lsl #2
   59540:	mov	r2, #9
   59544:	str	r0, [r1, #-4]
   59548:	add	r1, sp, #8
   5954c:	mov	r0, sl
   59550:	bl	38dc <ReadDoubleData>
   59554:	ldr	r4, [r6, #8]
   59558:	str	r4, [r6, #20]
   5955c:	ldr	r9, [r5, #8]
   59560:	ldr	r7, [r5, #20]
   59564:	mov	r0, r9
   59568:	bl	1924 <Mat_SizeOf@plt>
   5956c:	mul	r0, r0, r4
   59570:	cmp	r7, #0
   59574:	beq	59644 <Mat_VarRead4+0x55c>
   59578:	bl	5a0b4 <ComplexMalloc>
   5957c:	cmp	r0, #0
   59580:	beq	596c8 <Mat_VarRead4+0x5e0>
   59584:	mov	r8, r0
   59588:	str	r0, [r6, #24]
   5958c:	sub	r0, r9, #2
   59590:	cmp	r0, #7
   59594:	bhi	59814 <Mat_VarRead4+0x72c>
   59598:	add	r1, pc, #4
   5959c:	ldr	r0, [r1, r0, lsl #2]
   595a0:	add	pc, r1, r0
   595a4:	.word	0x00000020
   595a8:	.word	0x0000018c
   595ac:	.word	0x000001d8
   595b0:	.word	0x00000224
   595b4:	.word	0x00000270
   595b8:	.word	0x00000288
   595bc:	.word	0x00000270
   595c0:	.word	0x000002d4
   595c4:	ldr	r3, [r6, #20]
   595c8:	ldr	r1, [r8]
   595cc:	mov	r0, sl
   595d0:	mov	r2, #2
   595d4:	bl	1b1ec <ReadUInt8Data>
   595d8:	add	r5, sp, #4
   595dc:	mov	r0, sl
   595e0:	mov	r2, #2
   595e4:	mov	r3, #1
   595e8:	mov	r1, r5
   595ec:	bl	1b1ec <ReadUInt8Data>
   595f0:	ldr	r1, [r8, #4]
   595f4:	ldr	r3, [r6, #20]
   595f8:	mov	r0, sl
   595fc:	mov	r2, #2
   59600:	bl	1b1ec <ReadUInt8Data>
   59604:	mov	r0, sl
   59608:	mov	r1, r5
   5960c:	b	596a8 <Mat_VarRead4+0x5c0>
   59610:	mov	r0, r8
   59614:	bl	1804 <free@plt>
   59618:	ldr	r0, [r6, #4]
   5961c:	bl	1804 <free@plt>
   59620:	ldr	r0, [r5, #40]	; 0x28
   59624:	bl	1804 <free@plt>
   59628:	mov	r0, #0
   5962c:	str	r0, [r5, #40]	; 0x28
   59630:	ldr	r0, [pc, #960]	; 599f8 <Mat_VarRead4+0x910>
   59634:	add	r0, pc, r0
   59638:	bl	19b4 <Mat_Critical@plt>
   5963c:	sub	sp, fp, #28
   59640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   59644:	bl	18d0 <malloc@plt>
   59648:	cmp	r0, #0
   5964c:	str	r0, [r6, #24]
   59650:	beq	596fc <Mat_VarRead4+0x614>
   59654:	mov	r1, r0
   59658:	sub	r0, r9, #2
   5965c:	cmp	r0, #7
   59660:	bhi	59948 <Mat_VarRead4+0x860>
   59664:	add	r2, pc, #4
   59668:	ldr	r0, [r2, r0, lsl #2]
   5966c:	add	pc, r2, r0
   59670:	.word	0x00000020
   59674:	.word	0x00000254
   59678:	.word	0x00000280
   5967c:	.word	0x000002ac
   59680:	.word	0x000002d8
   59684:	.word	0x00000318
   59688:	.word	0x000002d8
   5968c:	.word	0x00000344
   59690:	ldr	r3, [r6, #20]
   59694:	mov	r0, sl
   59698:	mov	r2, #2
   5969c:	bl	1b1ec <ReadUInt8Data>
   596a0:	add	r1, sp, #4
   596a4:	mov	r0, sl
   596a8:	mov	r2, #2
   596ac:	mov	r3, #1
   596b0:	bl	1b1ec <ReadUInt8Data>
   596b4:	sub	sp, fp, #28
   596b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   596bc:	nop	{0}
   596c0:	.word	0xff800000
   596c4:	.word	0x41dfffff
   596c8:	ldr	r0, [r6, #12]
   596cc:	bl	1804 <free@plt>
   596d0:	ldr	r0, [r6, #4]
   596d4:	bl	1804 <free@plt>
   596d8:	ldr	r0, [r5, #40]	; 0x28
   596dc:	bl	1804 <free@plt>
   596e0:	mov	r0, #0
   596e4:	str	r0, [r5, #40]	; 0x28
   596e8:	ldr	r0, [pc, #780]	; 599fc <Mat_VarRead4+0x914>
   596ec:	add	r0, pc, r0
   596f0:	bl	19b4 <Mat_Critical@plt>
   596f4:	sub	sp, fp, #28
   596f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   596fc:	ldr	r0, [r6, #12]
   59700:	bl	1804 <free@plt>
   59704:	ldr	r0, [r6, #4]
   59708:	bl	1804 <free@plt>
   5970c:	ldr	r0, [r5, #40]	; 0x28
   59710:	bl	1804 <free@plt>
   59714:	mov	r0, #0
   59718:	str	r0, [r5, #40]	; 0x28
   5971c:	ldr	r0, [pc, #736]	; 59a04 <Mat_VarRead4+0x91c>
   59720:	add	r0, pc, r0
   59724:	bl	19b4 <Mat_Critical@plt>
   59728:	sub	sp, fp, #28
   5972c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   59730:	ldr	r3, [r6, #20]
   59734:	ldr	r1, [r8]
   59738:	mov	r0, sl
   5973c:	mov	r2, #3
   59740:	bl	13c20 <ReadInt16Data>
   59744:	add	r5, sp, #4
   59748:	mov	r0, sl
   5974c:	mov	r2, #3
   59750:	mov	r3, #1
   59754:	mov	r1, r5
   59758:	bl	13c20 <ReadInt16Data>
   5975c:	ldr	r1, [r8, #4]
   59760:	ldr	r3, [r6, #20]
   59764:	mov	r0, sl
   59768:	mov	r2, #3
   5976c:	bl	13c20 <ReadInt16Data>
   59770:	mov	r0, sl
   59774:	mov	r1, r5
   59778:	b	598dc <Mat_VarRead4+0x7f4>
   5977c:	ldr	r3, [r6, #20]
   59780:	ldr	r1, [r8]
   59784:	mov	r0, sl
   59788:	mov	r2, #4
   5978c:	bl	163ec <ReadUInt16Data>
   59790:	add	r5, sp, #4
   59794:	mov	r0, sl
   59798:	mov	r2, #4
   5979c:	mov	r3, #1
   597a0:	mov	r1, r5
   597a4:	bl	163ec <ReadUInt16Data>
   597a8:	ldr	r1, [r8, #4]
   597ac:	ldr	r3, [r6, #20]
   597b0:	mov	r0, sl
   597b4:	mov	r2, #4
   597b8:	bl	163ec <ReadUInt16Data>
   597bc:	mov	r0, sl
   597c0:	mov	r1, r5
   597c4:	b	59908 <Mat_VarRead4+0x820>
   597c8:	ldr	r3, [r6, #20]
   597cc:	ldr	r1, [r8]
   597d0:	mov	r0, sl
   597d4:	mov	r2, #5
   597d8:	bl	da88 <ReadInt32Data>
   597dc:	add	r5, sp, #4
   597e0:	mov	r0, sl
   597e4:	mov	r2, #5
   597e8:	mov	r3, #1
   597ec:	mov	r1, r5
   597f0:	bl	da88 <ReadInt32Data>
   597f4:	ldr	r1, [r8, #4]
   597f8:	ldr	r3, [r6, #20]
   597fc:	mov	r0, sl
   59800:	mov	r2, #5
   59804:	bl	da88 <ReadInt32Data>
   59808:	mov	r0, sl
   5980c:	mov	r1, r5
   59810:	b	59934 <Mat_VarRead4+0x84c>
   59814:	ldr	r0, [r8]
   59818:	bl	1804 <free@plt>
   5981c:	ldr	r0, [r8, #4]
   59820:	bl	1804 <free@plt>
   59824:	mov	r0, r8
   59828:	b	5994c <Mat_VarRead4+0x864>
   5982c:	ldr	r3, [r6, #20]
   59830:	ldr	r1, [r8]
   59834:	mov	r0, sl
   59838:	mov	r2, #7
   5983c:	bl	6fa0 <ReadSingleData>
   59840:	add	r5, sp, #4
   59844:	mov	r0, sl
   59848:	mov	r2, #7
   5984c:	mov	r3, #1
   59850:	mov	r1, r5
   59854:	bl	6fa0 <ReadSingleData>
   59858:	ldr	r1, [r8, #4]
   5985c:	ldr	r3, [r6, #20]
   59860:	mov	r0, sl
   59864:	mov	r2, #7
   59868:	bl	6fa0 <ReadSingleData>
   5986c:	mov	r0, sl
   59870:	mov	r1, r5
   59874:	b	599a0 <Mat_VarRead4+0x8b8>
   59878:	ldr	r3, [r6, #20]
   5987c:	ldr	r1, [r8]
   59880:	mov	r0, sl
   59884:	mov	r2, #9
   59888:	bl	38dc <ReadDoubleData>
   5988c:	add	r5, sp, #8
   59890:	mov	r0, sl
   59894:	mov	r2, #9
   59898:	mov	r3, #1
   5989c:	mov	r1, r5
   598a0:	bl	38dc <ReadDoubleData>
   598a4:	ldr	r1, [r8, #4]
   598a8:	ldr	r3, [r6, #20]
   598ac:	mov	r0, sl
   598b0:	mov	r2, #9
   598b4:	bl	38dc <ReadDoubleData>
   598b8:	mov	r0, sl
   598bc:	mov	r1, r5
   598c0:	b	599cc <Mat_VarRead4+0x8e4>
   598c4:	ldr	r3, [r6, #20]
   598c8:	mov	r0, sl
   598cc:	mov	r2, #3
   598d0:	bl	13c20 <ReadInt16Data>
   598d4:	add	r1, sp, #4
   598d8:	mov	r0, sl
   598dc:	mov	r2, #3
   598e0:	mov	r3, #1
   598e4:	bl	13c20 <ReadInt16Data>
   598e8:	sub	sp, fp, #28
   598ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   598f0:	ldr	r3, [r6, #20]
   598f4:	mov	r0, sl
   598f8:	mov	r2, #4
   598fc:	bl	163ec <ReadUInt16Data>
   59900:	add	r1, sp, #4
   59904:	mov	r0, sl
   59908:	mov	r2, #4
   5990c:	mov	r3, #1
   59910:	bl	163ec <ReadUInt16Data>
   59914:	sub	sp, fp, #28
   59918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5991c:	ldr	r3, [r6, #20]
   59920:	mov	r0, sl
   59924:	mov	r2, #5
   59928:	bl	da88 <ReadInt32Data>
   5992c:	add	r1, sp, #4
   59930:	mov	r0, sl
   59934:	mov	r2, #5
   59938:	mov	r3, #1
   5993c:	bl	da88 <ReadInt32Data>
   59940:	sub	sp, fp, #28
   59944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   59948:	mov	r0, r1
   5994c:	bl	1804 <free@plt>
   59950:	ldr	r0, [r6, #12]
   59954:	bl	1804 <free@plt>
   59958:	ldr	r0, [r6, #4]
   5995c:	bl	1804 <free@plt>
   59960:	ldr	r0, [r5, #40]	; 0x28
   59964:	bl	1804 <free@plt>
   59968:	mov	r0, #0
   5996c:	mov	r1, r9
   59970:	str	r0, [r5, #40]	; 0x28
   59974:	ldr	r0, [pc, #132]	; 59a00 <Mat_VarRead4+0x918>
   59978:	add	r0, pc, r0
   5997c:	bl	19b4 <Mat_Critical@plt>
   59980:	sub	sp, fp, #28
   59984:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   59988:	ldr	r3, [r6, #20]
   5998c:	mov	r0, sl
   59990:	mov	r2, #7
   59994:	bl	6fa0 <ReadSingleData>
   59998:	add	r1, sp, #4
   5999c:	mov	r0, sl
   599a0:	mov	r2, #7
   599a4:	mov	r3, #1
   599a8:	bl	6fa0 <ReadSingleData>
   599ac:	sub	sp, fp, #28
   599b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   599b4:	ldr	r3, [r6, #20]
   599b8:	mov	r0, sl
   599bc:	mov	r2, #9
   599c0:	bl	38dc <ReadDoubleData>
   599c4:	add	r1, sp, #8
   599c8:	mov	r0, sl
   599cc:	mov	r2, #9
   599d0:	mov	r3, #1
   599d4:	bl	38dc <ReadDoubleData>
   599d8:	sub	sp, fp, #28
   599dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   599e0:	.word	0x00006601
   599e4:	.word	0x00006448
   599e8:	.word	0x000064d8
   599ec:	.word	0x000063b0
   599f0:	.word	0x00006814
   599f4:	.word	0x00006934
   599f8:	.word	0x0000667b
   599fc:	.word	0x00006269
   59a00:	.word	0x0000636b
   59a04:	.word	0x0000626a
   59a08:	.word	0x000064b8
   59a0c:	.word	0x000069c1
   59a10:	.word	0x00006856

00059a14 <Mat_VarReadData4>:
   59a14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   59a18:	add	fp, sp, #28
   59a1c:	sub	sp, sp, #28
   59a20:	mov	r7, r1
   59a24:	ldr	r1, [r1, #52]	; 0x34
   59a28:	mov	r4, r0
   59a2c:	ldr	r0, [r0]
   59a30:	mov	r8, r2
   59a34:	mov	r2, #0
   59a38:	mov	r5, r3
   59a3c:	ldr	r1, [r1]
   59a40:	bl	1a2c <fseek@plt>
   59a44:	ldr	r3, [r7, #8]
   59a48:	mov	r6, #1
   59a4c:	cmp	r3, #9
   59a50:	bhi	59b4c <Mat_VarReadData4+0x138>
   59a54:	mov	r0, #1
   59a58:	mov	r1, #700	; 0x2bc
   59a5c:	tst	r1, r0, lsl r3
   59a60:	beq	59b4c <Mat_VarReadData4+0x138>
   59a64:	ldr	r0, [r7, #4]
   59a68:	ldr	r9, [fp, #12]
   59a6c:	ldr	sl, [fp, #8]
   59a70:	cmp	r0, #2
   59a74:	bne	59b58 <Mat_VarReadData4+0x144>
   59a78:	ldr	r2, [r9]
   59a7c:	ldr	r0, [r5]
   59a80:	ldr	r1, [sl]
   59a84:	mov	r6, #1
   59a88:	sub	r2, r2, #1
   59a8c:	mla	r0, r2, r1, r0
   59a90:	add	r1, r0, #1
   59a94:	ldr	r0, [r7, #32]
   59a98:	ldr	r2, [r0]
   59a9c:	cmp	r1, r2
   59aa0:	bhi	59acc <Mat_VarReadData4+0xb8>
   59aa4:	ldr	r6, [r9, #4]
   59aa8:	ldr	r1, [r5, #4]
   59aac:	ldr	r2, [sl, #4]
   59ab0:	sub	r6, r6, #1
   59ab4:	mla	r1, r6, r2, r1
   59ab8:	ldr	r2, [r0, #4]
   59abc:	mov	r6, #0
   59ac0:	add	r1, r1, #1
   59ac4:	cmp	r1, r2
   59ac8:	movwhi	r6, #1
   59acc:	ldr	r1, [r7, #20]
   59ad0:	cmp	r1, #0
   59ad4:	beq	59bf8 <Mat_VarReadData4+0x1e4>
   59ad8:	mov	r0, r3
   59adc:	bl	1924 <Mat_SizeOf@plt>
   59ae0:	str	r0, [sp, #24]
   59ae4:	add	r1, sp, #24
   59ae8:	mov	r0, r7
   59aec:	bl	5a144 <SafeMulDims>
   59af0:	ldr	r0, [r7, #32]
   59af4:	ldr	r1, [r8]
   59af8:	ldr	r3, [r7, #8]
   59afc:	ldr	r2, [r7, #16]
   59b00:	stm	sp, {r0, r5, sl}
   59b04:	mov	r0, r4
   59b08:	str	r9, [sp, #12]
   59b0c:	bl	26558 <ReadDataSlab2>
   59b10:	ldr	r0, [r7, #52]	; 0x34
   59b14:	ldr	r1, [sp, #24]
   59b18:	mov	r2, #0
   59b1c:	ldr	r0, [r0]
   59b20:	add	r1, r1, r0
   59b24:	ldr	r0, [r4]
   59b28:	bl	1a2c <fseek@plt>
   59b2c:	ldr	r0, [r7, #32]
   59b30:	ldr	r1, [r8, #4]
   59b34:	ldr	r3, [r7, #8]
   59b38:	ldr	r2, [r7, #16]
   59b3c:	stm	sp, {r0, r5, sl}
   59b40:	mov	r0, r4
   59b44:	str	r9, [sp, #12]
   59b48:	bl	26558 <ReadDataSlab2>
   59b4c:	mov	r0, r6
   59b50:	sub	sp, fp, #28
   59b54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   59b58:	ldr	r1, [r7, #20]
   59b5c:	cmp	r1, #0
   59b60:	beq	59c1c <Mat_VarReadData4+0x208>
   59b64:	mov	r0, r3
   59b68:	bl	1924 <Mat_SizeOf@plt>
   59b6c:	str	r0, [sp, #20]
   59b70:	add	r1, sp, #20
   59b74:	mov	r0, r7
   59b78:	bl	5a144 <SafeMulDims>
   59b7c:	ldr	r1, [r8]
   59b80:	ldmib	r7, {r0, r3}
   59b84:	ldr	r6, [r7, #32]
   59b88:	ldr	r2, [r7, #16]
   59b8c:	stm	sp, {r0, r6}
   59b90:	mov	r0, r4
   59b94:	str	r5, [sp, #8]
   59b98:	str	sl, [sp, #12]
   59b9c:	str	r9, [sp, #16]
   59ba0:	bl	1dab0 <ReadDataSlabN>
   59ba4:	ldr	r0, [r7, #52]	; 0x34
   59ba8:	ldr	r1, [sp, #20]
   59bac:	mov	r2, #0
   59bb0:	mov	r6, #0
   59bb4:	ldr	r0, [r0]
   59bb8:	add	r1, r1, r0
   59bbc:	ldr	r0, [r4]
   59bc0:	bl	1a2c <fseek@plt>
   59bc4:	ldr	r1, [r8, #4]
   59bc8:	ldmib	r7, {r0, r3}
   59bcc:	ldr	r2, [r7, #16]
   59bd0:	ldr	r7, [r7, #32]
   59bd4:	stm	sp, {r0, r7}
   59bd8:	mov	r0, r4
   59bdc:	str	r5, [sp, #8]
   59be0:	str	sl, [sp, #12]
   59be4:	str	r9, [sp, #16]
   59be8:	bl	1dab0 <ReadDataSlabN>
   59bec:	mov	r0, r6
   59bf0:	sub	sp, fp, #28
   59bf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   59bf8:	ldr	r2, [r7, #16]
   59bfc:	stm	sp, {r0, r5, sl}
   59c00:	mov	r0, r4
   59c04:	mov	r1, r8
   59c08:	str	r9, [sp, #12]
   59c0c:	bl	26558 <ReadDataSlab2>
   59c10:	mov	r0, r6
   59c14:	sub	sp, fp, #28
   59c18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   59c1c:	ldr	r1, [r7, #32]
   59c20:	ldr	r2, [r7, #16]
   59c24:	stm	sp, {r0, r1, r5, sl}
   59c28:	mov	r0, r4
   59c2c:	mov	r1, r8
   59c30:	str	r9, [sp, #16]
   59c34:	bl	1dab0 <ReadDataSlabN>
   59c38:	mov	r6, #0
   59c3c:	mov	r0, r6
   59c40:	sub	sp, fp, #28
   59c44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00059c48 <Mat_VarReadDataLinear4>:
   59c48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   59c4c:	add	fp, sp, #28
   59c50:	sub	sp, sp, #20
   59c54:	mov	r4, r1
   59c58:	mov	r5, r0
   59c5c:	mov	r7, #1
   59c60:	add	r1, sp, #16
   59c64:	mov	sl, r3
   59c68:	mov	r8, r2
   59c6c:	mov	r0, r4
   59c70:	str	r7, [sp, #16]
   59c74:	bl	5a144 <SafeMulDims>
   59c78:	ldr	r1, [r4, #52]	; 0x34
   59c7c:	str	r0, [sp, #12]
   59c80:	ldr	r0, [r5]
   59c84:	mov	r2, #0
   59c88:	ldr	r1, [r1]
   59c8c:	bl	1a2c <fseek@plt>
   59c90:	ldr	r0, [r4, #8]
   59c94:	bl	1924 <Mat_SizeOf@plt>
   59c98:	ldr	ip, [fp, #12]
   59c9c:	ldr	lr, [fp, #8]
   59ca0:	str	r0, [r4, #12]
   59ca4:	mov	r6, r0
   59ca8:	ldr	r9, [sp, #16]
   59cac:	sub	r0, ip, #1
   59cb0:	mla	r0, r0, lr, sl
   59cb4:	add	r0, r0, #1
   59cb8:	cmp	r0, r9
   59cbc:	bhi	59d48 <Mat_VarReadDataLinear4+0x100>
   59cc0:	ldr	r0, [r4, #20]
   59cc4:	cmp	r0, #0
   59cc8:	beq	59d28 <Mat_VarReadDataLinear4+0xe0>
   59ccc:	ldr	r3, [r4, #8]
   59cd0:	ldr	r2, [r4, #16]
   59cd4:	ldr	r1, [r8]
   59cd8:	mov	r0, r5
   59cdc:	stm	sp, {sl, lr}
   59ce0:	str	ip, [sp, #8]
   59ce4:	mov	r7, lr
   59ce8:	bl	26088 <ReadDataSlab1>
   59cec:	ldr	r0, [r4, #52]	; 0x34
   59cf0:	mov	r2, #0
   59cf4:	ldr	r0, [r0]
   59cf8:	mla	r1, r9, r6, r0
   59cfc:	ldr	r0, [r5]
   59d00:	bl	1a2c <fseek@plt>
   59d04:	ldr	r0, [fp, #12]
   59d08:	ldr	r1, [r8, #4]
   59d0c:	ldr	r3, [r4, #8]
   59d10:	ldr	r2, [r4, #16]
   59d14:	str	sl, [sp]
   59d18:	str	r7, [sp, #4]
   59d1c:	str	r0, [sp, #8]
   59d20:	mov	r0, r5
   59d24:	b	59d40 <Mat_VarReadDataLinear4+0xf8>
   59d28:	ldr	r3, [r4, #8]
   59d2c:	ldr	r2, [r4, #16]
   59d30:	mov	r0, r5
   59d34:	mov	r1, r8
   59d38:	stm	sp, {sl, lr}
   59d3c:	str	ip, [sp, #8]
   59d40:	bl	26088 <ReadDataSlab1>
   59d44:	ldr	r7, [sp, #12]
   59d48:	mov	r0, r7
   59d4c:	sub	sp, fp, #28
   59d50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   59d54:	nop	{0}

00059d58 <Mat_VarReadNextInfo4>:
   59d58:	push	{r4, r5, r6, sl, fp, lr}
   59d5c:	add	fp, sp, #16
   59d60:	sub	sp, sp, #8
   59d64:	cmp	r0, #0
   59d68:	beq	5a028 <Mat_VarReadNextInfo4+0x2d0>
   59d6c:	mov	r5, r0
   59d70:	ldr	r0, [r0]
   59d74:	cmp	r0, #0
   59d78:	beq	5a050 <Mat_VarReadNextInfo4+0x2f8>
   59d7c:	bl	18a0 <Mat_VarCalloc@plt>
   59d80:	cmp	r0, #0
   59d84:	beq	5a060 <Mat_VarReadNextInfo4+0x308>
   59d88:	ldr	r3, [r5]
   59d8c:	mov	r4, r0
   59d90:	add	r0, sp, #4
   59d94:	mov	r1, #4
   59d98:	mov	r2, #1
   59d9c:	bl	18b8 <fread@plt>
   59da0:	cmp	r0, #0
   59da4:	beq	5a038 <Mat_VarReadNextInfo4+0x2e0>
   59da8:	ldr	r1, [sp, #4]
   59dac:	movw	r0, #4053	; 0xfd5
   59db0:	cmp	r1, r0
   59db4:	bcc	59dd0 <Mat_VarReadNextInfo4+0x78>
   59db8:	add	r0, sp, #4
   59dbc:	bl	1bf0 <Mat_int32Swap>
   59dc0:	movw	r1, #4052	; 0xfd4
   59dc4:	cmp	r0, r1
   59dc8:	bgt	5a038 <Mat_VarReadNextInfo4+0x2e0>
   59dcc:	ldr	r1, [sp, #4]
   59dd0:	vldr	d16, [pc, #704]	; 5a098 <Mat_VarReadNextInfo4+0x340>
   59dd4:	vmov	s0, r1
   59dd8:	movw	r2, #64536	; 0xfc18
   59ddc:	mvn	r3, #99	; 0x63
   59de0:	vcvt.f64.s32	d17, s0
   59de4:	movt	r2, #65535	; 0xffff
   59de8:	vdiv.f64	d16, d17, d16
   59dec:	vcvtm.s32.f64	s0, d16
   59df0:	vldr	d16, [pc, #680]	; 5a0a0 <Mat_VarReadNextInfo4+0x348>
   59df4:	vmov	r0, s0
   59df8:	mla	r1, r0, r2, r1
   59dfc:	cmp	r0, #2
   59e00:	vmov	s0, r1
   59e04:	vcvt.f64.s32	d17, s0
   59e08:	vdiv.f64	d16, d17, d16
   59e0c:	vcvtm.s32.f64	s0, d16
   59e10:	vmov.f64	d16, #36	; 0x41200000  10.0
   59e14:	vmov	r2, s0
   59e18:	mla	r3, r2, r3, r1
   59e1c:	vmov	s0, r3
   59e20:	vcvt.f64.s32	d17, s0
   59e24:	vdiv.f64	d16, d17, d16
   59e28:	vcvtm.s32.f64	s0, d16
   59e2c:	vmov	r1, s0
   59e30:	add	r6, r1, r1, lsl #2
   59e34:	rsb	r6, r6, #0
   59e38:	add	r3, r3, r6, lsl #1
   59e3c:	vmov	s0, r3
   59e40:	vcvt.f64.s32	d16, s0
   59e44:	vcvtm.s32.f64	s0, d16
   59e48:	str	r3, [sp, #4]
   59e4c:	bcs	5a038 <Mat_VarReadNextInfo4+0x2e0>
   59e50:	cmp	r2, #0
   59e54:	str	r0, [r5, #20]
   59e58:	bne	5a038 <Mat_VarReadNextInfo4+0x2e0>
   59e5c:	cmp	r1, #6
   59e60:	bcs	5a038 <Mat_VarReadNextInfo4+0x2e0>
   59e64:	ldr	r2, [pc, #572]	; 5a0a8 <Mat_VarReadNextInfo4+0x350>
   59e68:	vmov	r0, s0
   59e6c:	cmp	r0, #3
   59e70:	add	r2, pc, r2
   59e74:	ldr	r1, [r2, r1, lsl #2]
   59e78:	str	r1, [r4, #8]
   59e7c:	bcs	5a038 <Mat_VarReadNextInfo4+0x2e0>
   59e80:	mov	r1, #2
   59e84:	str	r1, [r4, #4]
   59e88:	ldr	r1, [pc, #540]	; 5a0ac <Mat_VarReadNextInfo4+0x354>
   59e8c:	add	r1, pc, r1
   59e90:	ldr	r0, [r1, r0, lsl #2]
   59e94:	str	r0, [r4, #16]
   59e98:	mov	r0, #8
   59e9c:	bl	18d0 <malloc@plt>
   59ea0:	cmp	r0, #0
   59ea4:	str	r0, [r4, #32]
   59ea8:	beq	5a038 <Mat_VarReadNextInfo4+0x2e0>
   59eac:	ldr	r3, [r5]
   59eb0:	add	r0, sp, #4
   59eb4:	mov	r1, #4
   59eb8:	mov	r2, #1
   59ebc:	bl	18b8 <fread@plt>
   59ec0:	mov	r6, r0
   59ec4:	ldr	r0, [r5, #20]
   59ec8:	cmp	r0, #0
   59ecc:	beq	59ed8 <Mat_VarReadNextInfo4+0x180>
   59ed0:	add	r0, sp, #4
   59ed4:	bl	1bf0 <Mat_int32Swap>
   59ed8:	ldr	r0, [r4, #32]
   59edc:	ldr	r1, [sp, #4]
   59ee0:	cmp	r6, #0
   59ee4:	str	r1, [r0]
   59ee8:	beq	5a038 <Mat_VarReadNextInfo4+0x2e0>
   59eec:	ldr	r3, [r5]
   59ef0:	add	r0, sp, #4
   59ef4:	mov	r1, #4
   59ef8:	mov	r2, #1
   59efc:	bl	18b8 <fread@plt>
   59f00:	mov	r6, r0
   59f04:	ldr	r0, [r5, #20]
   59f08:	cmp	r0, #0
   59f0c:	beq	59f18 <Mat_VarReadNextInfo4+0x1c0>
   59f10:	add	r0, sp, #4
   59f14:	bl	1bf0 <Mat_int32Swap>
   59f18:	ldr	r0, [r4, #32]
   59f1c:	ldr	r1, [sp, #4]
   59f20:	cmp	r6, #0
   59f24:	str	r1, [r0, #4]
   59f28:	beq	5a038 <Mat_VarReadNextInfo4+0x2e0>
   59f2c:	ldr	r3, [r5]
   59f30:	add	r6, r4, #20
   59f34:	mov	r1, #4
   59f38:	mov	r2, #1
   59f3c:	mov	r0, r6
   59f40:	bl	18b8 <fread@plt>
   59f44:	cmp	r0, #0
   59f48:	beq	5a038 <Mat_VarReadNextInfo4+0x2e0>
   59f4c:	ldr	r0, [r6]
   59f50:	cmp	r0, #0
   59f54:	beq	59f64 <Mat_VarReadNextInfo4+0x20c>
   59f58:	ldr	r0, [r4, #16]
   59f5c:	cmp	r0, #4
   59f60:	beq	5a038 <Mat_VarReadNextInfo4+0x2e0>
   59f64:	ldr	r3, [r5]
   59f68:	add	r0, sp, #4
   59f6c:	mov	r1, #4
   59f70:	mov	r2, #1
   59f74:	bl	18b8 <fread@plt>
   59f78:	cmp	r0, #0
   59f7c:	beq	5a038 <Mat_VarReadNextInfo4+0x2e0>
   59f80:	ldr	r0, [r5, #20]
   59f84:	cmp	r0, #0
   59f88:	beq	59f94 <Mat_VarReadNextInfo4+0x23c>
   59f8c:	add	r0, sp, #4
   59f90:	bl	1bf0 <Mat_int32Swap>
   59f94:	ldr	r6, [sp, #4]
   59f98:	cmp	r6, #0
   59f9c:	ble	5a038 <Mat_VarReadNextInfo4+0x2e0>
   59fa0:	mov	r0, r6
   59fa4:	bl	18d0 <malloc@plt>
   59fa8:	cmp	r0, #0
   59fac:	str	r0, [r4, #36]	; 0x24
   59fb0:	beq	5a038 <Mat_VarReadNextInfo4+0x2e0>
   59fb4:	ldr	r3, [r5]
   59fb8:	mov	r1, #1
   59fbc:	mov	r2, r6
   59fc0:	bl	18b8 <fread@plt>
   59fc4:	cmp	r0, #0
   59fc8:	beq	5a038 <Mat_VarReadNextInfo4+0x2e0>
   59fcc:	ldr	r0, [r5]
   59fd0:	bl	1840 <ftell@plt>
   59fd4:	ldr	r1, [r4, #52]	; 0x34
   59fd8:	cmn	r0, #1
   59fdc:	str	r0, [r1]
   59fe0:	beq	5a070 <Mat_VarReadNextInfo4+0x318>
   59fe4:	ldr	r0, [r4, #8]
   59fe8:	bl	1924 <Mat_SizeOf@plt>
   59fec:	str	r0, [sp]
   59ff0:	ldr	r1, [r4, #20]
   59ff4:	cmp	r1, #0
   59ff8:	mov	r1, sp
   59ffc:	lslne	r0, r0, #1
   5a000:	strne	r0, [sp]
   5a004:	mov	r0, r4
   5a008:	bl	5a144 <SafeMulDims>
   5a00c:	ldr	r1, [sp]
   5a010:	ldr	r0, [r5]
   5a014:	mov	r2, #1
   5a018:	bl	1a2c <fseek@plt>
   5a01c:	mov	r0, r4
   5a020:	sub	sp, fp, #16
   5a024:	pop	{r4, r5, r6, sl, fp, pc}
   5a028:	mov	r4, #0
   5a02c:	mov	r0, r4
   5a030:	sub	sp, fp, #16
   5a034:	pop	{r4, r5, r6, sl, fp, pc}
   5a038:	mov	r0, r4
   5a03c:	bl	1918 <Mat_VarFree@plt>
   5a040:	mov	r4, #0
   5a044:	mov	r0, r4
   5a048:	sub	sp, fp, #16
   5a04c:	pop	{r4, r5, r6, sl, fp, pc}
   5a050:	mov	r4, #0
   5a054:	mov	r0, r4
   5a058:	sub	sp, fp, #16
   5a05c:	pop	{r4, r5, r6, sl, fp, pc}
   5a060:	mov	r4, #0
   5a064:	mov	r0, r4
   5a068:	sub	sp, fp, #16
   5a06c:	pop	{r4, r5, r6, sl, fp, pc}
   5a070:	mov	r0, r4
   5a074:	bl	1918 <Mat_VarFree@plt>
   5a078:	ldr	r0, [pc, #48]	; 5a0b0 <Mat_VarReadNextInfo4+0x358>
   5a07c:	add	r0, pc, r0
   5a080:	bl	19b4 <Mat_Critical@plt>
   5a084:	mov	r4, #0
   5a088:	mov	r0, r4
   5a08c:	sub	sp, fp, #16
   5a090:	pop	{r4, r5, r6, sl, fp, pc}
   5a094:	nop	{0}
   5a098:	.word	0x00000000
   5a09c:	.word	0x408f4000
   5a0a0:	.word	0x00000000
   5a0a4:	.word	0x40590000
   5a0a8:	.word	0x00005ef8
   5a0ac:	.word	0x00005ef4
   5a0b0:	.word	0x0000575c

0005a0b4 <ComplexMalloc>:
   5a0b4:	push	{r4, r5, r6, sl, fp, lr}
   5a0b8:	add	fp, sp, #16
   5a0bc:	mov	r5, r0
   5a0c0:	mov	r0, #8
   5a0c4:	bl	18d0 <malloc@plt>
   5a0c8:	mov	r4, r0
   5a0cc:	cmp	r0, #0
   5a0d0:	beq	5a100 <ComplexMalloc+0x4c>
   5a0d4:	mov	r0, r5
   5a0d8:	bl	18d0 <malloc@plt>
   5a0dc:	cmp	r0, #0
   5a0e0:	str	r0, [r4]
   5a0e4:	beq	5a110 <ComplexMalloc+0x5c>
   5a0e8:	mov	r6, r0
   5a0ec:	mov	r0, r5
   5a0f0:	bl	18d0 <malloc@plt>
   5a0f4:	cmp	r0, #0
   5a0f8:	str	r0, [r4, #4]
   5a0fc:	beq	5a108 <ComplexMalloc+0x54>
   5a100:	mov	r0, r4
   5a104:	pop	{r4, r5, r6, sl, fp, pc}
   5a108:	mov	r0, r6
   5a10c:	bl	1804 <free@plt>
   5a110:	mov	r0, r4
   5a114:	bl	1804 <free@plt>
   5a118:	mov	r4, #0
   5a11c:	mov	r0, r4
   5a120:	pop	{r4, r5, r6, sl, fp, pc}

0005a124 <ClassType2DataType>:
   5a124:	sub	r0, r0, #1
   5a128:	cmp	r0, #14
   5a12c:	ldrls	r1, [pc, #12]	; 5a140 <ClassType2DataType+0x1c>
   5a130:	movhi	r0, #0
   5a134:	addls	r1, pc, r1
   5a138:	ldrls	r0, [r1, r0, lsl #2]
   5a13c:	bx	lr
   5a140:	.word	0x00006384

0005a144 <SafeMulDims>:
   5a144:	push	{fp, lr}
   5a148:	mov	fp, sp
   5a14c:	ldr	r2, [r0, #4]
   5a150:	cmp	r2, #1
   5a154:	movlt	r0, #0
   5a158:	poplt	{fp, pc}
   5a15c:	ldr	lr, [r1]
   5a160:	ldr	ip, [r0, #32]
   5a164:	mov	r3, #0
   5a168:	b	5a180 <SafeMulDims+0x3c>
   5a16c:	ldr	r2, [r0, #4]
   5a170:	add	r3, r3, #1
   5a174:	cmp	r3, r2
   5a178:	movge	r0, #0
   5a17c:	popge	{fp, pc}
   5a180:	ldr	r2, [ip, r3, lsl #2]
   5a184:	umull	lr, r2, lr, r2
   5a188:	cmp	r2, #0
   5a18c:	str	lr, [r1]
   5a190:	beq	5a16c <SafeMulDims+0x28>
   5a194:	mov	r0, #0
   5a198:	str	r0, [r1]
   5a19c:	mov	r0, #1
   5a1a0:	pop	{fp, pc}

0005a1a4 <SafeMul>:
   5a1a4:	umull	r2, r1, r1, r2
   5a1a8:	cmp	r1, #0
   5a1ac:	movwne	r1, #1
   5a1b0:	cmp	r1, #0
   5a1b4:	movwne	r2, #0
   5a1b8:	str	r2, [r0]
   5a1bc:	mov	r0, r1
   5a1c0:	bx	lr

0005a1c4 <Mat_GetLibraryVersion>:
   5a1c4:	cmp	r0, #0
   5a1c8:	movne	r3, #1
   5a1cc:	strne	r3, [r0]
   5a1d0:	cmp	r1, #0
   5a1d4:	movne	r0, #5
   5a1d8:	strne	r0, [r1]
   5a1dc:	cmp	r2, #0
   5a1e0:	movne	r0, #15
   5a1e4:	strne	r0, [r2]
   5a1e8:	bx	lr

0005a1ec <Mat_CreateVer>:
   5a1ec:	cmp	r2, #256	; 0x100
   5a1f0:	beq	5a204 <Mat_CreateVer+0x18>
   5a1f4:	cmp	r2, #16
   5a1f8:	movne	r0, #0
   5a1fc:	bxne	lr
   5a200:	b	58a78 <Mat_Create4>
   5a204:	b	29660 <Mat_Create5>

0005a208 <Mat_Open>:
   5a208:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   5a20c:	add	fp, sp, #24
   5a210:	sub	sp, sp, #8
   5a214:	mov	r9, r1
   5a218:	mov	r8, r0
   5a21c:	tst	r1, #1
   5a220:	bne	5a244 <Mat_Open+0x3c>
   5a224:	ldr	r1, [pc, #912]	; 5a5bc <Mat_Open+0x3b4>
   5a228:	mov	r0, r8
   5a22c:	add	r1, pc, r1
   5a230:	bl	17e0 <fopen@plt>
   5a234:	mov	r7, r0
   5a238:	cmp	r0, #0
   5a23c:	bne	5a260 <Mat_Open+0x58>
   5a240:	b	5a5ac <Mat_Open+0x3a4>
   5a244:	ldr	r1, [pc, #888]	; 5a5c4 <Mat_Open+0x3bc>
   5a248:	mov	r0, r8
   5a24c:	add	r1, pc, r1
   5a250:	bl	17e0 <fopen@plt>
   5a254:	mov	r7, r0
   5a258:	cmp	r0, #0
   5a25c:	beq	5a378 <Mat_Open+0x170>
   5a260:	mov	r0, #44	; 0x2c
   5a264:	bl	18d0 <malloc@plt>
   5a268:	cmp	r0, #0
   5a26c:	beq	5a360 <Mat_Open+0x158>
   5a270:	mov	r5, r0
   5a274:	str	r7, [r0]
   5a278:	mov	r0, #128	; 0x80
   5a27c:	mov	r1, #1
   5a280:	bl	1798 <calloc@plt>
   5a284:	cmp	r0, #0
   5a288:	str	r0, [r5, #4]
   5a28c:	beq	5a3a8 <Mat_Open+0x1a0>
   5a290:	mov	r4, r0
   5a294:	mov	r0, #8
   5a298:	mov	r1, #1
   5a29c:	bl	1798 <calloc@plt>
   5a2a0:	cmp	r0, #0
   5a2a4:	str	r0, [r5, #8]
   5a2a8:	beq	5a3c8 <Mat_Open+0x1c0>
   5a2ac:	mov	r6, #0
   5a2b0:	mov	r0, r4
   5a2b4:	mov	r1, #1
   5a2b8:	mov	r2, #116	; 0x74
   5a2bc:	mov	r3, r7
   5a2c0:	str	r6, [r5, #12]
   5a2c4:	str	r6, [r5, #16]
   5a2c8:	str	r6, [r5, #20]
   5a2cc:	str	r6, [r5, #36]	; 0x24
   5a2d0:	str	r6, [r5, #40]	; 0x28
   5a2d4:	bl	18b8 <fread@plt>
   5a2d8:	mov	r4, r0
   5a2dc:	ldr	r0, [r5, #4]
   5a2e0:	mov	r1, #1
   5a2e4:	mov	r2, #8
   5a2e8:	mov	r3, r7
   5a2ec:	strb	r6, [r0, #116]	; 0x74
   5a2f0:	ldr	r0, [r5, #8]
   5a2f4:	bl	18b8 <fread@plt>
   5a2f8:	add	r4, r0, r4
   5a2fc:	add	r0, sp, #4
   5a300:	mov	r1, #2
   5a304:	mov	r2, #1
   5a308:	mov	r3, r7
   5a30c:	bl	18b8 <fread@plt>
   5a310:	add	r4, r4, r0, lsl #1
   5a314:	add	r0, sp, #6
   5a318:	mov	r1, #1
   5a31c:	mov	r2, #2
   5a320:	mov	r3, r7
   5a324:	bl	18b8 <fread@plt>
   5a328:	add	r4, r4, r0
   5a32c:	cmp	r4, #128	; 0x80
   5a330:	bne	5a45c <Mat_Open+0x254>
   5a334:	mvn	r0, #0
   5a338:	movw	r1, #18765	; 0x494d
   5a33c:	str	r0, [r5, #20]
   5a340:	ldrh	r0, [sp, #6]
   5a344:	cmp	r0, r1
   5a348:	beq	5a40c <Mat_Open+0x204>
   5a34c:	movw	r1, #19785	; 0x4d49
   5a350:	cmp	r0, r1
   5a354:	moveq	r0, #0
   5a358:	streq	r0, [r5, #20]
   5a35c:	b	5a41c <Mat_Open+0x214>
   5a360:	mov	r0, r7
   5a364:	bl	19cc <fclose@plt>
   5a368:	ldr	r0, [pc, #592]	; 5a5c0 <Mat_Open+0x3b8>
   5a36c:	add	r0, pc, r0
   5a370:	bl	19b4 <Mat_Critical@plt>
   5a374:	b	5a5ac <Mat_Open+0x3a4>
   5a378:	bic	r0, r9, #1
   5a37c:	cmp	r0, #256	; 0x100
   5a380:	beq	5a3f0 <Mat_Open+0x1e8>
   5a384:	mov	r5, #0
   5a388:	cmp	r0, #16
   5a38c:	bne	5a5b0 <Mat_Open+0x3a8>
   5a390:	mov	r0, r8
   5a394:	bl	58a78 <Mat_Create4>
   5a398:	mov	r5, r0
   5a39c:	mov	r0, r5
   5a3a0:	sub	sp, fp, #24
   5a3a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   5a3a8:	mov	r0, r5
   5a3ac:	bl	1804 <free@plt>
   5a3b0:	mov	r0, r7
   5a3b4:	bl	19cc <fclose@plt>
   5a3b8:	ldr	r0, [pc, #520]	; 5a5c8 <Mat_Open+0x3c0>
   5a3bc:	add	r0, pc, r0
   5a3c0:	bl	19b4 <Mat_Critical@plt>
   5a3c4:	b	5a5ac <Mat_Open+0x3a4>
   5a3c8:	mov	r0, r4
   5a3cc:	bl	1804 <free@plt>
   5a3d0:	mov	r0, r5
   5a3d4:	bl	1804 <free@plt>
   5a3d8:	mov	r0, r7
   5a3dc:	bl	19cc <fclose@plt>
   5a3e0:	ldr	r0, [pc, #484]	; 5a5cc <Mat_Open+0x3c4>
   5a3e4:	add	r0, pc, r0
   5a3e8:	bl	19b4 <Mat_Critical@plt>
   5a3ec:	b	5a5ac <Mat_Open+0x3a4>
   5a3f0:	mov	r0, r8
   5a3f4:	mov	r1, #0
   5a3f8:	bl	29660 <Mat_Create5>
   5a3fc:	mov	r5, r0
   5a400:	mov	r0, r5
   5a404:	sub	sp, fp, #24
   5a408:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   5a40c:	mov	r0, #1
   5a410:	str	r0, [r5, #20]
   5a414:	add	r0, sp, #4
   5a418:	bl	1c18 <Mat_int16Swap>
   5a41c:	ldrh	r0, [sp, #4]
   5a420:	cmp	r0, #512	; 0x200
   5a424:	sxth	r1, r0
   5a428:	cmpne	r0, #256	; 0x100
   5a42c:	str	r1, [r5, #16]
   5a430:	bne	5a46c <Mat_Open+0x264>
   5a434:	ldr	r0, [r5, #20]
   5a438:	cmn	r0, #1
   5a43c:	beq	5a46c <Mat_Open+0x264>
   5a440:	ldr	r0, [r5]
   5a444:	bl	1840 <ftell@plt>
   5a448:	cmn	r0, #1
   5a44c:	str	r0, [r5, #28]
   5a450:	beq	5a514 <Mat_Open+0x30c>
   5a454:	mov	r0, #0
   5a458:	str	r0, [r5, #32]
   5a45c:	ldr	r0, [r5, #16]
   5a460:	cmp	r0, #0
   5a464:	bne	5a560 <Mat_Open+0x358>
   5a468:	b	5a474 <Mat_Open+0x26c>
   5a46c:	mov	r0, #0
   5a470:	str	r0, [r5, #16]
   5a474:	ldr	r0, [r5, #4]
   5a478:	bl	1804 <free@plt>
   5a47c:	ldr	r0, [r5, #8]
   5a480:	bl	1804 <free@plt>
   5a484:	mov	r0, #0
   5a488:	mov	r1, #16
   5a48c:	str	r7, [r5]
   5a490:	mov	r2, #0
   5a494:	str	r0, [r5, #4]
   5a498:	str	r0, [r5, #8]
   5a49c:	str	r1, [r5, #16]
   5a4a0:	str	r0, [r5, #20]
   5a4a4:	str	r9, [r5, #24]
   5a4a8:	str	r0, [r5, #28]
   5a4ac:	str	r0, [r5, #32]
   5a4b0:	mov	r0, r7
   5a4b4:	mov	r1, #0
   5a4b8:	bl	1a2c <fseek@plt>
   5a4bc:	mov	r0, r5
   5a4c0:	bl	59d58 <Mat_VarReadNextInfo4>
   5a4c4:	cmp	r4, #0
   5a4c8:	beq	5a4e8 <Mat_Open+0x2e0>
   5a4cc:	cmp	r0, #0
   5a4d0:	bne	5a4e8 <Mat_Open+0x2e0>
   5a4d4:	mov	r0, r5
   5a4d8:	bl	19a8 <Mat_Close@plt>
   5a4dc:	ldr	r0, [pc, #240]	; 5a5d4 <Mat_Open+0x3cc>
   5a4e0:	add	r0, pc, r0
   5a4e4:	b	5a5a4 <Mat_Open+0x39c>
   5a4e8:	bl	1918 <Mat_VarFree@plt>
   5a4ec:	ldr	r0, [r5, #16]
   5a4f0:	cmp	r0, #16
   5a4f4:	beq	5a544 <Mat_Open+0x33c>
   5a4f8:	cmp	r0, #512	; 0x200
   5a4fc:	beq	5a558 <Mat_Open+0x350>
   5a500:	cmp	r0, #256	; 0x100
   5a504:	bne	5a560 <Mat_Open+0x358>
   5a508:	ldr	r0, [r5]
   5a50c:	mov	r1, #128	; 0x80
   5a510:	b	5a54c <Mat_Open+0x344>
   5a514:	ldr	r0, [r5, #4]
   5a518:	bl	1804 <free@plt>
   5a51c:	ldr	r0, [r5, #8]
   5a520:	bl	1804 <free@plt>
   5a524:	mov	r0, r5
   5a528:	bl	1804 <free@plt>
   5a52c:	mov	r0, r7
   5a530:	bl	19cc <fclose@plt>
   5a534:	ldr	r0, [pc, #148]	; 5a5d0 <Mat_Open+0x3c8>
   5a538:	add	r0, pc, r0
   5a53c:	bl	19b4 <Mat_Critical@plt>
   5a540:	b	5a5ac <Mat_Open+0x3a4>
   5a544:	ldr	r0, [r5]
   5a548:	mov	r1, #0
   5a54c:	mov	r2, #0
   5a550:	bl	1a2c <fseek@plt>
   5a554:	b	5a560 <Mat_Open+0x358>
   5a558:	mov	r0, #0
   5a55c:	str	r0, [r5, #32]
   5a560:	ldr	r0, [pc, #112]	; 5a5d8 <Mat_Open+0x3d0>
   5a564:	mov	r1, r8
   5a568:	add	r0, pc, r0
   5a56c:	bl	1dac <strdup_printf>
   5a570:	str	r0, [r5, #12]
   5a574:	str	r9, [r5, #24]
   5a578:	ldr	r0, [r5, #16]
   5a57c:	cmp	r0, #512	; 0x200
   5a580:	bne	5a5b0 <Mat_Open+0x3a8>
   5a584:	ldr	r0, [r5]
   5a588:	bl	19cc <fclose@plt>
   5a58c:	mov	r0, #0
   5a590:	str	r0, [r5]
   5a594:	mov	r0, r5
   5a598:	bl	19a8 <Mat_Close@plt>
   5a59c:	ldr	r0, [pc, #56]	; 5a5dc <Mat_Open+0x3d4>
   5a5a0:	add	r0, pc, r0
   5a5a4:	mov	r1, r8
   5a5a8:	bl	19b4 <Mat_Critical@plt>
   5a5ac:	mov	r5, #0
   5a5b0:	mov	r0, r5
   5a5b4:	sub	sp, fp, #24
   5a5b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   5a5bc:	.word	0x00005b60
   5a5c0:	.word	0x000058bc
   5a5c4:	.word	0x00005b43
   5a5c8:	.word	0x000059d7
   5a5cc:	.word	0x000059e0
   5a5d0:	.word	0x000052a0
   5a5d4:	.word	0x0000591c
   5a5d8:	.word	0x00005bbb
   5a5dc:	.word	0x00005886

0005a5e0 <Mat_Rewind>:
   5a5e0:	push	{r4, sl, fp, lr}
   5a5e4:	add	fp, sp, #8
   5a5e8:	ldr	r1, [r0, #16]
   5a5ec:	cmp	r1, #16
   5a5f0:	beq	5a618 <Mat_Rewind+0x38>
   5a5f4:	cmp	r1, #512	; 0x200
   5a5f8:	beq	5a634 <Mat_Rewind+0x54>
   5a5fc:	mvn	r4, #0
   5a600:	cmp	r1, #256	; 0x100
   5a604:	bne	5a62c <Mat_Rewind+0x4c>
   5a608:	ldr	r0, [r0]
   5a60c:	mov	r4, #0
   5a610:	mov	r1, #128	; 0x80
   5a614:	b	5a624 <Mat_Rewind+0x44>
   5a618:	ldr	r0, [r0]
   5a61c:	mov	r4, #0
   5a620:	mov	r1, #0
   5a624:	mov	r2, #0
   5a628:	bl	1a2c <fseek@plt>
   5a62c:	mov	r0, r4
   5a630:	pop	{r4, sl, fp, pc}
   5a634:	mov	r4, #0
   5a638:	str	r4, [r0, #32]
   5a63c:	mov	r0, r4
   5a640:	pop	{r4, sl, fp, pc}

0005a644 <Mat_Close>:
   5a644:	cmp	r0, #0
   5a648:	beq	5a6ec <Mat_Close+0xa8>
   5a64c:	push	{r4, r5, fp, lr}
   5a650:	add	fp, sp, #8
   5a654:	mov	r4, r0
   5a658:	ldr	r0, [r0]
   5a65c:	cmp	r0, #0
   5a660:	beq	5a668 <Mat_Close+0x24>
   5a664:	bl	19cc <fclose@plt>
   5a668:	ldr	r0, [r4, #4]
   5a66c:	cmp	r0, #0
   5a670:	beq	5a678 <Mat_Close+0x34>
   5a674:	bl	1804 <free@plt>
   5a678:	ldr	r0, [r4, #8]
   5a67c:	cmp	r0, #0
   5a680:	beq	5a688 <Mat_Close+0x44>
   5a684:	bl	1804 <free@plt>
   5a688:	ldr	r0, [r4, #12]
   5a68c:	cmp	r0, #0
   5a690:	beq	5a698 <Mat_Close+0x54>
   5a694:	bl	1804 <free@plt>
   5a698:	ldr	r0, [r4, #40]	; 0x28
   5a69c:	cmp	r0, #0
   5a6a0:	beq	5a6e0 <Mat_Close+0x9c>
   5a6a4:	ldr	r2, [r4, #36]	; 0x24
   5a6a8:	cmp	r2, #0
   5a6ac:	beq	5a6dc <Mat_Close+0x98>
   5a6b0:	mov	r5, #0
   5a6b4:	ldr	r1, [r0, r5, lsl #2]
   5a6b8:	cmp	r1, #0
   5a6bc:	beq	5a6d0 <Mat_Close+0x8c>
   5a6c0:	mov	r0, r1
   5a6c4:	bl	1804 <free@plt>
   5a6c8:	ldr	r2, [r4, #36]	; 0x24
   5a6cc:	ldr	r0, [r4, #40]	; 0x28
   5a6d0:	add	r5, r5, #1
   5a6d4:	cmp	r5, r2
   5a6d8:	bcc	5a6b4 <Mat_Close+0x70>
   5a6dc:	bl	1804 <free@plt>
   5a6e0:	mov	r0, r4
   5a6e4:	bl	1804 <free@plt>
   5a6e8:	pop	{r4, r5, fp, lr}
   5a6ec:	mov	r0, #0
   5a6f0:	bx	lr

0005a6f4 <Mat_VarFree>:
   5a6f4:	cmp	r0, #0
   5a6f8:	bxeq	lr
   5a6fc:	push	{r4, r5, r6, sl, fp, lr}
   5a700:	add	fp, sp, #16
   5a704:	mov	r4, r0
   5a708:	ldr	r0, [r0, #32]
   5a70c:	cmp	r0, #0
   5a710:	beq	5a7f0 <Mat_VarFree+0xfc>
   5a714:	ldr	r1, [r4, #4]
   5a718:	mov	r6, #1
   5a71c:	cmp	r1, #1
   5a720:	blt	5a744 <Mat_VarFree+0x50>
   5a724:	mov	r2, #0
   5a728:	ldr	r3, [r0, r2, lsl #2]
   5a72c:	umull	r6, r3, r6, r3
   5a730:	cmp	r3, #0
   5a734:	bne	5a804 <Mat_VarFree+0x110>
   5a738:	add	r2, r2, #1
   5a73c:	cmp	r2, r1
   5a740:	blt	5a728 <Mat_VarFree+0x34>
   5a744:	bl	1804 <free@plt>
   5a748:	ldr	r5, [r4, #40]	; 0x28
   5a74c:	cmp	r5, #0
   5a750:	beq	5a8e8 <Mat_VarFree+0x1f4>
   5a754:	ldr	r0, [r4, #16]
   5a758:	sub	r0, r0, #1
   5a75c:	cmp	r0, #15
   5a760:	bhi	5a8e8 <Mat_VarFree+0x1f4>
   5a764:	add	r1, pc, #4
   5a768:	ldr	r0, [r1, r0, lsl #2]
   5a76c:	add	pc, r1, r0
   5a770:	.word	0x000000ac
   5a774:	.word	0x000000d4
   5a778:	.word	0x00000178
   5a77c:	.word	0x00000040
   5a780:	.word	0x00000114
   5a784:	.word	0x00000040
   5a788:	.word	0x00000040
   5a78c:	.word	0x00000040
   5a790:	.word	0x00000040
   5a794:	.word	0x00000040
   5a798:	.word	0x00000040
   5a79c:	.word	0x00000040
   5a7a0:	.word	0x00000040
   5a7a4:	.word	0x00000040
   5a7a8:	.word	0x00000040
   5a7ac:	.word	0x0000016c
   5a7b0:	ldr	r0, [r4, #44]	; 0x2c
   5a7b4:	cmp	r0, #0
   5a7b8:	bne	5a8e8 <Mat_VarFree+0x1f4>
   5a7bc:	ldr	r0, [r4, #20]
   5a7c0:	cmp	r0, #0
   5a7c4:	beq	5a7d8 <Mat_VarFree+0xe4>
   5a7c8:	ldr	r0, [r5]
   5a7cc:	bl	1804 <free@plt>
   5a7d0:	ldr	r0, [r5, #4]
   5a7d4:	bl	1804 <free@plt>
   5a7d8:	mov	r0, r5
   5a7dc:	bl	1804 <free@plt>
   5a7e0:	ldr	r0, [r4, #52]	; 0x34
   5a7e4:	cmp	r0, #0
   5a7e8:	bne	5a8f4 <Mat_VarFree+0x200>
   5a7ec:	b	5aa10 <Mat_VarFree+0x31c>
   5a7f0:	mov	r6, #0
   5a7f4:	ldr	r5, [r4, #40]	; 0x28
   5a7f8:	cmp	r5, #0
   5a7fc:	bne	5a754 <Mat_VarFree+0x60>
   5a800:	b	5a8e8 <Mat_VarFree+0x1f4>
   5a804:	mov	r6, #0
   5a808:	bl	1804 <free@plt>
   5a80c:	ldr	r5, [r4, #40]	; 0x28
   5a810:	cmp	r5, #0
   5a814:	bne	5a754 <Mat_VarFree+0x60>
   5a818:	b	5a8e8 <Mat_VarFree+0x1f4>
   5a81c:	ldr	r0, [r4, #44]	; 0x2c
   5a820:	cmp	r0, #0
   5a824:	bne	5a8e8 <Mat_VarFree+0x1f4>
   5a828:	cmp	r6, #0
   5a82c:	beq	5a7d8 <Mat_VarFree+0xe4>
   5a830:	ldr	r0, [r5], #4
   5a834:	bl	1918 <Mat_VarFree@plt>
   5a838:	subs	r6, r6, #1
   5a83c:	bne	5a830 <Mat_VarFree+0x13c>
   5a840:	b	5a87c <Mat_VarFree+0x188>
   5a844:	ldr	r0, [r4, #44]	; 0x2c
   5a848:	cmp	r0, #0
   5a84c:	bne	5a8e8 <Mat_VarFree+0x1f4>
   5a850:	ldr	r0, [r4, #52]	; 0x34
   5a854:	ldr	r0, [r0, #4]
   5a858:	umull	r6, r0, r6, r0
   5a85c:	cmp	r0, #0
   5a860:	bne	5a7d8 <Mat_VarFree+0xe4>
   5a864:	cmp	r6, #0
   5a868:	beq	5a7d8 <Mat_VarFree+0xe4>
   5a86c:	ldr	r0, [r5], #4
   5a870:	bl	1918 <Mat_VarFree@plt>
   5a874:	subs	r6, r6, #1
   5a878:	bne	5a86c <Mat_VarFree+0x178>
   5a87c:	ldr	r5, [r4, #40]	; 0x28
   5a880:	b	5a7d8 <Mat_VarFree+0xe4>
   5a884:	ldr	r0, [r4, #44]	; 0x2c
   5a888:	cmp	r0, #0
   5a88c:	bne	5a8e8 <Mat_VarFree+0x1f4>
   5a890:	ldr	r0, [r5, #4]
   5a894:	cmp	r0, #0
   5a898:	beq	5a8a0 <Mat_VarFree+0x1ac>
   5a89c:	bl	1804 <free@plt>
   5a8a0:	ldr	r0, [r5, #12]
   5a8a4:	cmp	r0, #0
   5a8a8:	beq	5a8b0 <Mat_VarFree+0x1bc>
   5a8ac:	bl	1804 <free@plt>
   5a8b0:	ldr	r0, [r4, #20]
   5a8b4:	ldr	r6, [r5, #24]
   5a8b8:	cmp	r0, #0
   5a8bc:	beq	5aa2c <Mat_VarFree+0x338>
   5a8c0:	cmp	r6, #0
   5a8c4:	beq	5a7d8 <Mat_VarFree+0xe4>
   5a8c8:	ldr	r0, [r6]
   5a8cc:	bl	1804 <free@plt>
   5a8d0:	ldr	r0, [r6, #4]
   5a8d4:	bl	1804 <free@plt>
   5a8d8:	b	5aa34 <Mat_VarFree+0x340>
   5a8dc:	ldr	r0, [r4, #44]	; 0x2c
   5a8e0:	cmp	r0, #0
   5a8e4:	beq	5a7d8 <Mat_VarFree+0xe4>
   5a8e8:	ldr	r0, [r4, #52]	; 0x34
   5a8ec:	cmp	r0, #0
   5a8f0:	beq	5aa10 <Mat_VarFree+0x31c>
   5a8f4:	ldr	r1, [r4, #48]	; 0x30
   5a8f8:	cmp	r1, #1
   5a8fc:	bne	5a9b0 <Mat_VarFree+0x2bc>
   5a900:	ldr	r0, [r0, #12]
   5a904:	bl	193c <inflateEnd@plt>
   5a908:	ldr	r0, [r4, #52]	; 0x34
   5a90c:	ldr	r0, [r0, #12]
   5a910:	bl	1804 <free@plt>
   5a914:	ldr	r0, [r4, #52]	; 0x34
   5a918:	ldr	r5, [r0, #16]
   5a91c:	cmp	r5, #0
   5a920:	beq	5a9b0 <Mat_VarFree+0x2bc>
   5a924:	ldr	r0, [r4, #16]
   5a928:	cmp	r0, #5
   5a92c:	bne	5a97c <Mat_VarFree+0x288>
   5a930:	ldr	r0, [r5, #4]
   5a934:	cmp	r0, #0
   5a938:	beq	5a940 <Mat_VarFree+0x24c>
   5a93c:	bl	1804 <free@plt>
   5a940:	ldr	r0, [r5, #12]
   5a944:	cmp	r0, #0
   5a948:	beq	5a950 <Mat_VarFree+0x25c>
   5a94c:	bl	1804 <free@plt>
   5a950:	ldr	r0, [r4, #20]
   5a954:	ldr	r6, [r5, #24]
   5a958:	cmp	r0, #0
   5a95c:	beq	5a998 <Mat_VarFree+0x2a4>
   5a960:	cmp	r6, #0
   5a964:	beq	5a9a8 <Mat_VarFree+0x2b4>
   5a968:	ldr	r0, [r6]
   5a96c:	bl	1804 <free@plt>
   5a970:	ldr	r0, [r6, #4]
   5a974:	bl	1804 <free@plt>
   5a978:	b	5a9a0 <Mat_VarFree+0x2ac>
   5a97c:	ldr	r0, [r4, #20]
   5a980:	cmp	r0, #0
   5a984:	beq	5a9a8 <Mat_VarFree+0x2b4>
   5a988:	ldr	r0, [r5]
   5a98c:	bl	1804 <free@plt>
   5a990:	ldr	r0, [r5, #4]
   5a994:	b	5a9a4 <Mat_VarFree+0x2b0>
   5a998:	cmp	r6, #0
   5a99c:	beq	5a9a8 <Mat_VarFree+0x2b4>
   5a9a0:	mov	r0, r6
   5a9a4:	bl	1804 <free@plt>
   5a9a8:	mov	r0, r5
   5a9ac:	bl	1804 <free@plt>
   5a9b0:	ldr	r0, [r4, #52]	; 0x34
   5a9b4:	ldr	r1, [r0, #8]
   5a9b8:	cmp	r1, #0
   5a9bc:	ldrne	r2, [r0, #4]
   5a9c0:	cmpne	r2, #0
   5a9c4:	beq	5aa04 <Mat_VarFree+0x310>
   5a9c8:	mov	r5, #0
   5a9cc:	ldr	r1, [r1, r5, lsl #2]
   5a9d0:	cmp	r1, #0
   5a9d4:	beq	5a9e4 <Mat_VarFree+0x2f0>
   5a9d8:	mov	r0, r1
   5a9dc:	bl	1804 <free@plt>
   5a9e0:	ldr	r0, [r4, #52]	; 0x34
   5a9e4:	ldr	r2, [r0, #4]
   5a9e8:	ldr	r1, [r0, #8]
   5a9ec:	add	r5, r5, #1
   5a9f0:	cmp	r5, r2
   5a9f4:	bcc	5a9cc <Mat_VarFree+0x2d8>
   5a9f8:	mov	r0, r1
   5a9fc:	bl	1804 <free@plt>
   5aa00:	ldr	r0, [r4, #52]	; 0x34
   5aa04:	bl	1804 <free@plt>
   5aa08:	mov	r0, #0
   5aa0c:	str	r0, [r4, #52]	; 0x34
   5aa10:	ldr	r0, [r4, #36]	; 0x24
   5aa14:	cmp	r0, #0
   5aa18:	beq	5aa20 <Mat_VarFree+0x32c>
   5aa1c:	bl	1804 <free@plt>
   5aa20:	mov	r0, r4
   5aa24:	pop	{r4, r5, r6, sl, fp, lr}
   5aa28:	b	1804 <free@plt>
   5aa2c:	cmp	r6, #0
   5aa30:	beq	5a7d8 <Mat_VarFree+0xe4>
   5aa34:	mov	r0, r6
   5aa38:	b	5a7d4 <Mat_VarFree+0xe0>

0005aa3c <Mat_GetFilename>:
   5aa3c:	cmp	r0, #0
   5aa40:	ldrne	r0, [r0, #12]
   5aa44:	moveq	r0, #0
   5aa48:	bx	lr

0005aa4c <Mat_GetHeader>:
   5aa4c:	cmp	r0, #0
   5aa50:	ldrne	r0, [r0, #4]
   5aa54:	moveq	r0, #0
   5aa58:	bx	lr

0005aa5c <Mat_GetVersion>:
   5aa5c:	cmp	r0, #0
   5aa60:	ldrne	r0, [r0, #16]
   5aa64:	moveq	r0, #0
   5aa68:	bx	lr

0005aa6c <Mat_GetDir>:
   5aa6c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   5aa70:	add	fp, sp, #24
   5aa74:	cmp	r1, #0
   5aa78:	moveq	r5, #0
   5aa7c:	moveq	r0, r5
   5aa80:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   5aa84:	mov	r4, r1
   5aa88:	mov	r5, r0
   5aa8c:	cmp	r0, #0
   5aa90:	beq	5ab40 <Mat_GetDir+0xd4>
   5aa94:	ldr	r0, [r5, #40]	; 0x28
   5aa98:	ldr	r1, [r5, #16]
   5aa9c:	cmp	r0, #0
   5aaa0:	beq	5aaec <Mat_GetDir+0x80>
   5aaa4:	cmp	r1, #512	; 0x200
   5aaa8:	bne	5acb8 <Mat_GetDir+0x24c>
   5aaac:	mov	r1, #0
   5aab0:	str	r1, [r4]
   5aab4:	ldr	r2, [r5, #36]	; 0x24
   5aab8:	cmp	r2, #0
   5aabc:	beq	5aae0 <Mat_GetDir+0x74>
   5aac0:	ldr	r2, [r0, r1, lsl #2]
   5aac4:	cmp	r2, #0
   5aac8:	beq	5aae0 <Mat_GetDir+0x74>
   5aacc:	add	r1, r1, #1
   5aad0:	str	r1, [r4]
   5aad4:	ldr	r2, [r5, #36]	; 0x24
   5aad8:	cmp	r1, r2
   5aadc:	bcc	5aac0 <Mat_GetDir+0x54>
   5aae0:	ldr	r5, [r5, #40]	; 0x28
   5aae4:	mov	r0, r5
   5aae8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   5aaec:	cmp	r1, #512	; 0x200
   5aaf0:	bne	5ab50 <Mat_GetDir+0xe4>
   5aaf4:	ldr	r0, [r5, #36]	; 0x24
   5aaf8:	cmp	r0, #0
   5aafc:	beq	5ab40 <Mat_GetDir+0xd4>
   5ab00:	ldr	r6, [r5, #32]
   5ab04:	mov	r1, #4
   5ab08:	bl	1798 <calloc@plt>
   5ab0c:	cmp	r0, #0
   5ab10:	str	r0, [r5, #40]	; 0x28
   5ab14:	beq	5ac74 <Mat_GetDir+0x208>
   5ab18:	mov	r7, #0
   5ab1c:	str	r7, [r5, #32]
   5ab20:	ldr	r0, [pc, #424]	; 5acd0 <Mat_GetDir+0x264>
   5ab24:	add	r0, pc, r0
   5ab28:	bl	19b4 <Mat_Critical@plt>
   5ab2c:	str	r6, [r5, #32]
   5ab30:	str	r7, [r4]
   5ab34:	ldr	r5, [r5, #40]	; 0x28
   5ab38:	mov	r0, r5
   5ab3c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   5ab40:	mov	r5, #0
   5ab44:	mov	r0, r5
   5ab48:	str	r5, [r4]
   5ab4c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   5ab50:	ldr	r0, [r5]
   5ab54:	bl	1840 <ftell@plt>
   5ab58:	cmn	r0, #1
   5ab5c:	beq	5ac58 <Mat_GetDir+0x1ec>
   5ab60:	mov	r6, r0
   5ab64:	ldr	r0, [r5]
   5ab68:	ldr	r1, [r5, #28]
   5ab6c:	mov	r2, #0
   5ab70:	mov	r7, #0
   5ab74:	bl	1a2c <fseek@plt>
   5ab78:	str	r7, [r5, #36]	; 0x24
   5ab7c:	mov	r9, #4
   5ab80:	ldr	r8, [pc, #332]	; 5acd4 <Mat_GetDir+0x268>
   5ab84:	add	r8, pc, r8
   5ab88:	ldr	r0, [r5, #16]
   5ab8c:	cmp	r0, #16
   5ab90:	beq	5abe0 <Mat_GetDir+0x174>
   5ab94:	cmp	r0, #256	; 0x100
   5ab98:	bne	5abf4 <Mat_GetDir+0x188>
   5ab9c:	mov	r0, r5
   5aba0:	bl	56264 <Mat_VarReadNextInfo5>
   5aba4:	mov	r7, r0
   5aba8:	cmp	r0, #0
   5abac:	beq	5abf4 <Mat_GetDir+0x188>
   5abb0:	ldr	r0, [r7, #36]	; 0x24
   5abb4:	cmp	r0, #0
   5abb8:	beq	5ac3c <Mat_GetDir+0x1d0>
   5abbc:	ldr	r0, [r5, #40]	; 0x28
   5abc0:	cmp	r0, #0
   5abc4:	beq	5ac08 <Mat_GetDir+0x19c>
   5abc8:	ldr	r1, [r5, #36]	; 0x24
   5abcc:	add	r1, r9, r1, lsl #2
   5abd0:	bl	1870 <realloc@plt>
   5abd4:	cmp	r0, #0
   5abd8:	bne	5ac18 <Mat_GetDir+0x1ac>
   5abdc:	b	5ac9c <Mat_GetDir+0x230>
   5abe0:	mov	r0, r5
   5abe4:	bl	59d58 <Mat_VarReadNextInfo4>
   5abe8:	mov	r7, r0
   5abec:	cmp	r0, #0
   5abf0:	bne	5abb0 <Mat_GetDir+0x144>
   5abf4:	ldr	r0, [r5]
   5abf8:	bl	190c <feof@plt>
   5abfc:	cmp	r0, #0
   5ac00:	bne	5ac44 <Mat_GetDir+0x1d8>
   5ac04:	b	5ac90 <Mat_GetDir+0x224>
   5ac08:	mov	r0, #4
   5ac0c:	bl	18d0 <malloc@plt>
   5ac10:	cmp	r0, #0
   5ac14:	beq	5ac9c <Mat_GetDir+0x230>
   5ac18:	str	r0, [r5, #40]	; 0x28
   5ac1c:	mov	r0, r8
   5ac20:	ldr	r1, [r7, #36]	; 0x24
   5ac24:	bl	1dac <strdup_printf>
   5ac28:	ldr	r1, [r5, #36]	; 0x24
   5ac2c:	ldr	r2, [r5, #40]	; 0x28
   5ac30:	add	r3, r1, #1
   5ac34:	str	r3, [r5, #36]	; 0x24
   5ac38:	str	r0, [r2, r1, lsl #2]
   5ac3c:	mov	r0, r7
   5ac40:	bl	1918 <Mat_VarFree@plt>
   5ac44:	ldr	r0, [r5]
   5ac48:	bl	190c <feof@plt>
   5ac4c:	cmp	r0, #0
   5ac50:	beq	5ab88 <Mat_GetDir+0x11c>
   5ac54:	b	5aca8 <Mat_GetDir+0x23c>
   5ac58:	mov	r5, #0
   5ac5c:	str	r5, [r4]
   5ac60:	ldr	r0, [pc, #116]	; 5acdc <Mat_GetDir+0x270>
   5ac64:	add	r0, pc, r0
   5ac68:	bl	19b4 <Mat_Critical@plt>
   5ac6c:	mov	r0, r5
   5ac70:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   5ac74:	mov	r5, #0
   5ac78:	str	r5, [r4]
   5ac7c:	ldr	r0, [pc, #72]	; 5accc <Mat_GetDir+0x260>
   5ac80:	add	r0, pc, r0
   5ac84:	bl	19b4 <Mat_Critical@plt>
   5ac88:	mov	r0, r5
   5ac8c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   5ac90:	ldr	r0, [pc, #64]	; 5acd8 <Mat_GetDir+0x26c>
   5ac94:	add	r0, pc, r0
   5ac98:	b	5aca4 <Mat_GetDir+0x238>
   5ac9c:	ldr	r0, [pc, #60]	; 5ace0 <Mat_GetDir+0x274>
   5aca0:	add	r0, pc, r0
   5aca4:	bl	19b4 <Mat_Critical@plt>
   5aca8:	ldr	r0, [r5]
   5acac:	mov	r1, r6
   5acb0:	mov	r2, #0
   5acb4:	bl	1a2c <fseek@plt>
   5acb8:	ldr	r0, [r5, #36]	; 0x24
   5acbc:	str	r0, [r4]
   5acc0:	ldr	r5, [r5, #40]	; 0x28
   5acc4:	mov	r0, r5
   5acc8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   5accc:	.word	0x000051e7
   5acd0:	.word	0x00004f40
   5acd4:	.word	0x0000559f
   5acd8:	.word	0x00004dd0
   5acdc:	.word	0x00004b74
   5ace0:	.word	0x000051c7

0005ace4 <Mat_VarReadNextInfo>:
   5ace4:	cmp	r0, #0
   5ace8:	beq	5ad04 <Mat_VarReadNextInfo+0x20>
   5acec:	ldr	r1, [r0, #16]
   5acf0:	cmp	r1, #16
   5acf4:	beq	5ad0c <Mat_VarReadNextInfo+0x28>
   5acf8:	cmp	r1, #256	; 0x100
   5acfc:	bne	5ad04 <Mat_VarReadNextInfo+0x20>
   5ad00:	b	56264 <Mat_VarReadNextInfo5>
   5ad04:	mov	r0, #0
   5ad08:	bx	lr
   5ad0c:	b	59d58 <Mat_VarReadNextInfo4>

0005ad10 <Mat_SizeOfClass>:
   5ad10:	sub	r0, r0, #4
   5ad14:	cmp	r0, #11
   5ad18:	ldrls	r1, [pc, #12]	; 5ad2c <Mat_SizeOfClass+0x1c>
   5ad1c:	movhi	r0, #0
   5ad20:	addls	r1, pc, r1
   5ad24:	ldrls	r0, [r1, r0, lsl #2]
   5ad28:	bx	lr
   5ad2c:	.word	0x000057d8

0005ad30 <Mat_VarCalloc>:
   5ad30:	push	{r4, r5, r6, sl, fp, lr}
   5ad34:	add	fp, sp, #16
   5ad38:	vpush	{d8-d9}
   5ad3c:	mov	r0, #56	; 0x38
   5ad40:	bl	18d0 <malloc@plt>
   5ad44:	mov	r4, r0
   5ad48:	cmp	r0, #0
   5ad4c:	beq	5ad94 <Mat_VarCalloc+0x64>
   5ad50:	vmov.i32	q4, #0	; 0x00000000
   5ad54:	add	r0, r4, #32
   5ad58:	mov	r6, r4
   5ad5c:	mov	r5, #0
   5ad60:	vst1.32	{d8-d9}, [r0]
   5ad64:	add	r0, r4, #16
   5ad68:	str	r5, [r4, #48]	; 0x30
   5ad6c:	vst1.32	{d8-d9}, [r0]
   5ad70:	mov	r0, #52	; 0x34
   5ad74:	vst1.32	{d8-d9}, [r6], r0
   5ad78:	mov	r0, #20
   5ad7c:	bl	18d0 <malloc@plt>
   5ad80:	cmp	r0, #0
   5ad84:	str	r0, [r6]
   5ad88:	beq	5ada0 <Mat_VarCalloc+0x70>
   5ad8c:	vst1.32	{d8-d9}, [r0]!
   5ad90:	str	r5, [r0]
   5ad94:	mov	r0, r4
   5ad98:	vpop	{d8-d9}
   5ad9c:	pop	{r4, r5, r6, sl, fp, pc}
   5ada0:	mov	r0, r4
   5ada4:	bl	1804 <free@plt>
   5ada8:	mov	r4, #0
   5adac:	mov	r0, r4
   5adb0:	vpop	{d8-d9}
   5adb4:	pop	{r4, r5, r6, sl, fp, pc}

0005adb8 <Mat_VarCreate>:
   5adb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5adbc:	add	fp, sp, #28
   5adc0:	sub	sp, sp, #4
   5adc4:	vpush	{d8-d9}
   5adc8:	sub	sp, sp, #8
   5adcc:	ldr	sl, [fp, #8]
   5add0:	mov	r8, #0
   5add4:	cmp	sl, #0
   5add8:	beq	5b2d0 <Mat_VarCreate+0x518>
   5addc:	mov	r7, r0
   5ade0:	mov	r0, #56	; 0x38
   5ade4:	mov	r6, r3
   5ade8:	mov	r5, r2
   5adec:	mov	r9, r1
   5adf0:	bl	18d0 <malloc@plt>
   5adf4:	cmp	r0, #0
   5adf8:	beq	5b2d0 <Mat_VarCreate+0x518>
   5adfc:	str	r5, [sp, #4]
   5ae00:	mov	r5, #0
   5ae04:	mov	r8, r0
   5ae08:	vmov.i32	q4, #0	; 0x00000000
   5ae0c:	add	r1, r0, #32
   5ae10:	str	r5, [r0, #48]	; 0x30
   5ae14:	add	r0, r0, #16
   5ae18:	mov	r4, r8
   5ae1c:	vst1.32	{d8-d9}, [r1]
   5ae20:	vst1.32	{d8-d9}, [r0]
   5ae24:	mov	r0, #52	; 0x34
   5ae28:	vst1.32	{d8-d9}, [r4], r0
   5ae2c:	mov	r0, #20
   5ae30:	bl	18d0 <malloc@plt>
   5ae34:	cmp	r0, #0
   5ae38:	str	r0, [r4]
   5ae3c:	beq	5aeb8 <Mat_VarCreate+0x100>
   5ae40:	ldr	r2, [fp, #16]
   5ae44:	vst1.32	{d8-d9}, [r0]!
   5ae48:	add	r3, r8, #20
   5ae4c:	cmp	r7, #0
   5ae50:	mov	r4, r9
   5ae54:	str	r5, [r8, #48]	; 0x30
   5ae58:	str	r5, [r0]
   5ae5c:	and	r0, r2, #2048	; 0x800
   5ae60:	and	r1, r2, #1024	; 0x400
   5ae64:	and	r2, r2, #512	; 0x200
   5ae68:	stm	r3, {r0, r1, r2}
   5ae6c:	beq	5ae84 <Mat_VarCreate+0xcc>
   5ae70:	ldr	r0, [pc, #1132]	; 5b2e4 <Mat_VarCreate+0x52c>
   5ae74:	mov	r1, r7
   5ae78:	add	r0, pc, r0
   5ae7c:	bl	1dac <strdup_printf>
   5ae80:	str	r0, [r8, #36]	; 0x24
   5ae84:	lsl	r0, r6, #2
   5ae88:	str	r6, [r8, #4]
   5ae8c:	bl	18d0 <malloc@plt>
   5ae90:	mov	r5, #1
   5ae94:	cmp	r6, #1
   5ae98:	mov	r7, #1
   5ae9c:	str	r0, [r8, #32]
   5aea0:	blt	5af20 <Mat_VarCreate+0x168>
   5aea4:	cmp	r6, #4
   5aea8:	bcs	5aec8 <Mat_VarCreate+0x110>
   5aeac:	mov	r7, #1
   5aeb0:	mov	r1, #0
   5aeb4:	b	5af08 <Mat_VarCreate+0x150>
   5aeb8:	mov	r0, r8
   5aebc:	bl	1804 <free@plt>
   5aec0:	mov	r8, #0
   5aec4:	b	5b2d0 <Mat_VarCreate+0x518>
   5aec8:	bic	r1, r6, #3
   5aecc:	vmov.i32	q8, #1	; 0x00000001
   5aed0:	mov	r3, r0
   5aed4:	mov	r7, sl
   5aed8:	mov	r2, r1
   5aedc:	vld1.32	{d18-d19}, [r7]!
   5aee0:	subs	r2, r2, #4
   5aee4:	vst1.32	{d18-d19}, [r3]!
   5aee8:	vmul.i32	q8, q9, q8
   5aeec:	bne	5aedc <Mat_VarCreate+0x124>
   5aef0:	vext.8	q9, q8, q8, #8
   5aef4:	cmp	r1, r6
   5aef8:	vmul.i32	q0, q8, q9
   5aefc:	vmul.i32	q8, q0, d0[1]
   5af00:	vmov.32	r7, d16[0]
   5af04:	beq	5af20 <Mat_VarCreate+0x168>
   5af08:	ldr	r2, [sl, r1, lsl #2]
   5af0c:	str	r2, [r0, r1, lsl #2]
   5af10:	add	r1, r1, #1
   5af14:	mul	r7, r2, r7
   5af18:	cmp	r1, r6
   5af1c:	blt	5af08 <Mat_VarCreate+0x150>
   5af20:	ldr	r0, [sp, #4]
   5af24:	str	r0, [r8, #8]
   5af28:	sub	r0, r0, #1
   5af2c:	str	r4, [r8, #16]
   5af30:	cmp	r0, #21
   5af34:	bhi	5b020 <Mat_VarCreate+0x268>
   5af38:	add	r1, pc, #8
   5af3c:	ldr	sl, [fp, #12]
   5af40:	ldr	r0, [r1, r0, lsl #2]
   5af44:	add	pc, r1, r0
   5af48:	.word	0x00000184
   5af4c:	.word	0x00000184
   5af50:	.word	0x000000ac
   5af54:	.word	0x000000ac
   5af58:	.word	0x00000058
   5af5c:	.word	0x00000058
   5af60:	.word	0x00000058
   5af64:	.word	0x000000d8
   5af68:	.word	0x000000bc
   5af6c:	.word	0x000000d8
   5af70:	.word	0x000000d8
   5af74:	.word	0x000000bc
   5af78:	.word	0x000000bc
   5af7c:	.word	0x000000d8
   5af80:	.word	0x000000d8
   5af84:	.word	0x00000184
   5af88:	.word	0x000000ac
   5af8c:	.word	0x00000058
   5af90:	.word	0x000000d8
   5af94:	.word	0x000000d8
   5af98:	.word	0x00000058
   5af9c:	.word	0x000000f4
   5afa0:	mov	r5, #4
   5afa4:	cmp	r4, #5
   5afa8:	beq	5b0d4 <Mat_VarCreate+0x31c>
   5afac:	umull	r6, r0, r7, r5
   5afb0:	str	r5, [r8, #12]
   5afb4:	cmp	r0, #0
   5afb8:	movwne	r0, #1
   5afbc:	cmp	r0, #0
   5afc0:	movwne	r6, #0
   5afc4:	str	r6, [r8]
   5afc8:	cmp	sl, #0
   5afcc:	bne	5b0e8 <Mat_VarCreate+0x330>
   5afd0:	cmp	r4, #1
   5afd4:	bne	5b014 <Mat_VarCreate+0x25c>
   5afd8:	cmp	r7, #0
   5afdc:	beq	5b014 <Mat_VarCreate+0x25c>
   5afe0:	mov	r0, r7
   5afe4:	mov	r1, #4
   5afe8:	bl	1798 <calloc@plt>
   5afec:	str	r0, [r8, #40]	; 0x28
   5aff0:	b	5b2d0 <Mat_VarCreate+0x518>
   5aff4:	mov	r5, #2
   5aff8:	cmp	r4, #5
   5affc:	beq	5b0d4 <Mat_VarCreate+0x31c>
   5b000:	b	5afac <Mat_VarCreate+0x1f4>
   5b004:	mov	r5, #8
   5b008:	cmp	r4, #5
   5b00c:	beq	5b0d4 <Mat_VarCreate+0x31c>
   5b010:	b	5afac <Mat_VarCreate+0x1f4>
   5b014:	mov	r0, #0
   5b018:	str	r0, [r8, #40]	; 0x28
   5b01c:	b	5b2d0 <Mat_VarCreate+0x518>
   5b020:	mov	r0, r8
   5b024:	bl	1918 <Mat_VarFree@plt>
   5b028:	ldr	r0, [pc, #696]	; 5b2e8 <Mat_VarCreate+0x530>
   5b02c:	add	r0, pc, r0
   5b030:	bl	19b4 <Mat_Critical@plt>
   5b034:	mov	r8, #0
   5b038:	b	5b2d0 <Mat_VarCreate+0x518>
   5b03c:	mov	r5, #4
   5b040:	cmp	sl, #0
   5b044:	beq	5b0cc <Mat_VarCreate+0x314>
   5b048:	mov	r0, #0
   5b04c:	ldr	r1, [sl, r0, lsl #2]
   5b050:	add	r0, r0, #1
   5b054:	cmp	r1, #0
   5b058:	bne	5b04c <Mat_VarCreate+0x294>
   5b05c:	ldr	r9, [r8, #52]	; 0x34
   5b060:	sub	r6, r0, #1
   5b064:	cmp	r7, #0
   5b068:	udivne	r6, r6, r7
   5b06c:	cmp	r6, #0
   5b070:	str	r6, [r9, #4]
   5b074:	beq	5b0cc <Mat_VarCreate+0x314>
   5b078:	mov	r0, r6
   5b07c:	mov	r1, #4
   5b080:	bl	1798 <calloc@plt>
   5b084:	mov	r5, #0
   5b088:	str	r0, [r9, #8]
   5b08c:	ldr	r0, [sl, r5, lsl #2]
   5b090:	ldr	r0, [r0, #36]	; 0x24
   5b094:	bl	1864 <strdup@plt>
   5b098:	ldr	r1, [r8, #52]	; 0x34
   5b09c:	ldr	r1, [r1, #8]
   5b0a0:	str	r0, [r1, r5, lsl #2]
   5b0a4:	add	r5, r5, #1
   5b0a8:	cmp	r6, r5
   5b0ac:	bne	5b08c <Mat_VarCreate+0x2d4>
   5b0b0:	umull	r7, r0, r7, r6
   5b0b4:	ldr	r4, [r8, #16]
   5b0b8:	mov	r5, #4
   5b0bc:	cmp	r0, #0
   5b0c0:	movwne	r0, #1
   5b0c4:	cmp	r0, #0
   5b0c8:	movwne	r7, #0
   5b0cc:	cmp	r4, #5
   5b0d0:	bne	5afac <Mat_VarCreate+0x1f4>
   5b0d4:	mov	r6, #28
   5b0d8:	str	r6, [r8]
   5b0dc:	str	r6, [r8, #12]
   5b0e0:	cmp	sl, #0
   5b0e4:	beq	5afd0 <Mat_VarCreate+0x218>
   5b0e8:	ldr	r0, [fp, #16]
   5b0ec:	tst	r0, #1
   5b0f0:	bne	5b1f4 <Mat_VarCreate+0x43c>
   5b0f4:	cmp	r4, #5
   5b0f8:	bne	5b200 <Mat_VarCreate+0x448>
   5b0fc:	mov	r0, #28
   5b100:	bl	18d0 <malloc@plt>
   5b104:	mov	r6, r0
   5b108:	cmp	r0, #0
   5b10c:	beq	5b2cc <Mat_VarCreate+0x514>
   5b110:	ldr	r0, [sl]
   5b114:	str	r0, [r6]
   5b118:	ldr	r0, [sl, #8]
   5b11c:	str	r0, [r6, #8]
   5b120:	lsl	r7, r0, #2
   5b124:	ldr	r9, [sl, #16]
   5b128:	ldr	r4, [sl, #20]
   5b12c:	mov	r0, r7
   5b130:	str	r9, [r6, #16]
   5b134:	str	r4, [r6, #20]
   5b138:	bl	18d0 <malloc@plt>
   5b13c:	cmp	r0, #0
   5b140:	str	r0, [r6, #4]
   5b144:	beq	5b154 <Mat_VarCreate+0x39c>
   5b148:	ldr	r1, [sl, #4]
   5b14c:	mov	r2, r7
   5b150:	bl	181c <memcpy@plt>
   5b154:	lsl	r7, r9, #2
   5b158:	mov	r0, r7
   5b15c:	bl	18d0 <malloc@plt>
   5b160:	cmp	r0, #0
   5b164:	str	r0, [r6, #12]
   5b168:	beq	5b178 <Mat_VarCreate+0x3c0>
   5b16c:	ldr	r1, [sl, #12]
   5b170:	mov	r2, r7
   5b174:	bl	181c <memcpy@plt>
   5b178:	ldr	r0, [r8, #20]
   5b17c:	cmp	r0, #0
   5b180:	beq	5b2a8 <Mat_VarCreate+0x4f0>
   5b184:	mov	r0, #8
   5b188:	bl	18d0 <malloc@plt>
   5b18c:	cmp	r0, #0
   5b190:	str	r0, [r6, #24]
   5b194:	beq	5b2cc <Mat_VarCreate+0x514>
   5b198:	ldr	sl, [sl, #24]
   5b19c:	mul	r4, r4, r5
   5b1a0:	mov	r7, r0
   5b1a4:	mov	r0, r4
   5b1a8:	bl	18d0 <malloc@plt>
   5b1ac:	mov	r5, r0
   5b1b0:	str	r0, [r7]
   5b1b4:	mov	r0, r4
   5b1b8:	bl	18d0 <malloc@plt>
   5b1bc:	mov	r9, r0
   5b1c0:	cmp	r5, #0
   5b1c4:	str	r0, [r7, #4]
   5b1c8:	beq	5b1dc <Mat_VarCreate+0x424>
   5b1cc:	ldr	r1, [sl]
   5b1d0:	mov	r0, r5
   5b1d4:	mov	r2, r4
   5b1d8:	bl	181c <memcpy@plt>
   5b1dc:	cmp	r9, #0
   5b1e0:	beq	5b2cc <Mat_VarCreate+0x514>
   5b1e4:	ldr	r1, [sl, #4]
   5b1e8:	mov	r0, r9
   5b1ec:	mov	r2, r4
   5b1f0:	b	5b2c8 <Mat_VarCreate+0x510>
   5b1f4:	mov	r0, #1
   5b1f8:	str	sl, [r8, #40]	; 0x28
   5b1fc:	b	5b2a0 <Mat_VarCreate+0x4e8>
   5b200:	ldr	r0, [r8, #20]
   5b204:	cmp	r0, #0
   5b208:	beq	5b274 <Mat_VarCreate+0x4bc>
   5b20c:	mov	r0, #8
   5b210:	bl	18d0 <malloc@plt>
   5b214:	cmp	r0, #0
   5b218:	str	r0, [r8, #40]	; 0x28
   5b21c:	cmpne	r6, #0
   5b220:	beq	5b29c <Mat_VarCreate+0x4e4>
   5b224:	mov	r7, r0
   5b228:	mov	r0, r6
   5b22c:	bl	18d0 <malloc@plt>
   5b230:	mov	r9, r0
   5b234:	str	r0, [r7]
   5b238:	mov	r0, r6
   5b23c:	bl	18d0 <malloc@plt>
   5b240:	mov	r4, r0
   5b244:	cmp	r9, #0
   5b248:	str	r0, [r7, #4]
   5b24c:	beq	5b260 <Mat_VarCreate+0x4a8>
   5b250:	ldr	r1, [sl]
   5b254:	mov	r0, r9
   5b258:	mov	r2, r6
   5b25c:	bl	181c <memcpy@plt>
   5b260:	cmp	r4, #0
   5b264:	beq	5b29c <Mat_VarCreate+0x4e4>
   5b268:	ldr	r1, [sl, #4]
   5b26c:	mov	r0, r4
   5b270:	b	5b294 <Mat_VarCreate+0x4dc>
   5b274:	cmp	r6, #0
   5b278:	beq	5b29c <Mat_VarCreate+0x4e4>
   5b27c:	mov	r0, r6
   5b280:	bl	18d0 <malloc@plt>
   5b284:	cmp	r0, #0
   5b288:	str	r0, [r8, #40]	; 0x28
   5b28c:	beq	5b29c <Mat_VarCreate+0x4e4>
   5b290:	mov	r1, sl
   5b294:	mov	r2, r6
   5b298:	bl	181c <memcpy@plt>
   5b29c:	mov	r0, #0
   5b2a0:	str	r0, [r8, #44]	; 0x2c
   5b2a4:	b	5b2d0 <Mat_VarCreate+0x518>
   5b2a8:	mul	r7, r4, r5
   5b2ac:	mov	r0, r7
   5b2b0:	bl	18d0 <malloc@plt>
   5b2b4:	cmp	r0, #0
   5b2b8:	str	r0, [r6, #24]
   5b2bc:	beq	5b2cc <Mat_VarCreate+0x514>
   5b2c0:	ldr	r1, [sl, #24]
   5b2c4:	mov	r2, r7
   5b2c8:	bl	181c <memcpy@plt>
   5b2cc:	str	r6, [r8, #40]	; 0x28
   5b2d0:	mov	r0, r8
   5b2d4:	sub	sp, fp, #48	; 0x30
   5b2d8:	vpop	{d8-d9}
   5b2dc:	add	sp, sp, #4
   5b2e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5b2e4:	.word	0x000052ab
   5b2e8:	.word	0x00004e66

0005b2ec <Mat_VarDelete>:
   5b2ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5b2f0:	add	fp, sp, #28
   5b2f4:	sub	sp, sp, #20
   5b2f8:	sub	sp, sp, #8192	; 0x2000
   5b2fc:	mov	r9, r0
   5b300:	mov	r0, #0
   5b304:	mov	r6, #1
   5b308:	strb	r0, [sp, #14]
   5b30c:	movw	r0, #22616	; 0x5858
   5b310:	cmp	r9, #0
   5b314:	strh	r0, [sp, #12]
   5b318:	movw	r0, #22616	; 0x5858
   5b31c:	movne	r7, r1
   5b320:	cmpne	r1, #0
   5b324:	movt	r0, #22616	; 0x5858
   5b328:	str	r0, [sp, #8]
   5b32c:	bne	5b33c <Mat_VarDelete+0x50>
   5b330:	mov	r0, r6
   5b334:	sub	sp, fp, #28
   5b338:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5b33c:	add	r0, sp, #8
   5b340:	bl	18e8 <mktemp@plt>
   5b344:	cmp	r0, #0
   5b348:	beq	5b3b4 <Mat_VarDelete+0xc8>
   5b34c:	ldr	r1, [r9, #16]
   5b350:	mov	r8, r0
   5b354:	cmp	r1, #512	; 0x200
   5b358:	mov	r0, r1
   5b35c:	movwne	r0, #256	; 0x100
   5b360:	cmp	r1, #16
   5b364:	moveq	r0, r1
   5b368:	cmp	r0, #256	; 0x100
   5b36c:	beq	5b3cc <Mat_VarDelete+0xe0>
   5b370:	cmp	r0, #16
   5b374:	bne	5b330 <Mat_VarDelete+0x44>
   5b378:	mov	r0, r8
   5b37c:	bl	58a78 <Mat_Create4>
   5b380:	mov	r5, r0
   5b384:	cmp	r0, #0
   5b388:	beq	5b330 <Mat_VarDelete+0x44>
   5b38c:	ldr	r0, [r9, #16]
   5b390:	cmp	r0, #16
   5b394:	beq	5b3e8 <Mat_VarDelete+0xfc>
   5b398:	cmp	r0, #512	; 0x200
   5b39c:	beq	5b45c <Mat_VarDelete+0x170>
   5b3a0:	cmp	r0, #256	; 0x100
   5b3a4:	bne	5b3f8 <Mat_VarDelete+0x10c>
   5b3a8:	ldr	r0, [r9]
   5b3ac:	mov	r1, #128	; 0x80
   5b3b0:	b	5b3f0 <Mat_VarDelete+0x104>
   5b3b4:	ldr	r0, [pc, #1080]	; 5b7f4 <Mat_VarDelete+0x508>
   5b3b8:	add	r0, pc, r0
   5b3bc:	bl	19b4 <Mat_Critical@plt>
   5b3c0:	mov	r0, r6
   5b3c4:	sub	sp, fp, #28
   5b3c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5b3cc:	ldr	r1, [r9, #4]
   5b3d0:	mov	r0, r8
   5b3d4:	bl	29660 <Mat_Create5>
   5b3d8:	mov	r5, r0
   5b3dc:	cmp	r0, #0
   5b3e0:	bne	5b38c <Mat_VarDelete+0xa0>
   5b3e4:	b	5b330 <Mat_VarDelete+0x44>
   5b3e8:	ldr	r0, [r9]
   5b3ec:	mov	r1, #0
   5b3f0:	mov	r2, #0
   5b3f4:	bl	1a2c <fseek@plt>
   5b3f8:	mov	r0, r9
   5b3fc:	bl	17a4 <Mat_VarReadNext@plt>
   5b400:	cmp	r0, #0
   5b404:	beq	5b474 <Mat_VarDelete+0x188>
   5b408:	mov	r6, r0
   5b40c:	mov	r4, #1
   5b410:	ldr	r0, [r6, #36]	; 0x24
   5b414:	mov	r1, r7
   5b418:	bl	17b0 <strcmp@plt>
   5b41c:	cmp	r0, #0
   5b420:	beq	5b438 <Mat_VarDelete+0x14c>
   5b424:	ldr	r2, [r6, #48]	; 0x30
   5b428:	mov	r0, r5
   5b42c:	mov	r1, r6
   5b430:	bl	1828 <Mat_VarWrite@plt>
   5b434:	b	5b43c <Mat_VarDelete+0x150>
   5b438:	mov	r4, #0
   5b43c:	mov	r0, r6
   5b440:	bl	1918 <Mat_VarFree@plt>
   5b444:	mov	r0, r9
   5b448:	bl	17a4 <Mat_VarReadNext@plt>
   5b44c:	mov	r6, r0
   5b450:	cmp	r0, #0
   5b454:	bne	5b410 <Mat_VarDelete+0x124>
   5b458:	b	5b478 <Mat_VarDelete+0x18c>
   5b45c:	mov	r0, #0
   5b460:	str	r0, [r9, #32]
   5b464:	mov	r0, r9
   5b468:	bl	17a4 <Mat_VarReadNext@plt>
   5b46c:	cmp	r0, #0
   5b470:	bne	5b408 <Mat_VarDelete+0x11c>
   5b474:	mov	r4, #1
   5b478:	ldr	sl, [r5, #36]	; 0x24
   5b47c:	ldr	r6, [r5, #40]	; 0x28
   5b480:	mov	r0, #0
   5b484:	str	r0, [r5, #40]	; 0x28
   5b488:	mov	r0, r5
   5b48c:	bl	19a8 <Mat_Close@plt>
   5b490:	cmp	r4, #0
   5b494:	beq	5b4cc <Mat_VarDelete+0x1e0>
   5b498:	mov	r0, r8
   5b49c:	bl	19f0 <remove@plt>
   5b4a0:	mov	r6, r0
   5b4a4:	cmn	r0, #1
   5b4a8:	bne	5b330 <Mat_VarDelete+0x44>
   5b4ac:	ldr	r0, [pc, #828]	; 5b7f0 <Mat_VarDelete+0x504>
   5b4b0:	mov	r1, r8
   5b4b4:	add	r0, pc, r0
   5b4b8:	bl	19b4 <Mat_Critical@plt>
   5b4bc:	mvn	r6, #0
   5b4c0:	mov	r0, r6
   5b4c4:	sub	sp, fp, #28
   5b4c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5b4cc:	ldr	r1, [r9, #12]
   5b4d0:	ldr	r0, [pc, #760]	; 5b7d0 <Mat_VarDelete+0x4e4>
   5b4d4:	add	r0, pc, r0
   5b4d8:	bl	1dac <strdup_printf>
   5b4dc:	mov	r7, r0
   5b4e0:	ldr	r0, [r9]
   5b4e4:	cmp	r0, #0
   5b4e8:	beq	5b4f8 <Mat_VarDelete+0x20c>
   5b4ec:	bl	19cc <fclose@plt>
   5b4f0:	mov	r0, #0
   5b4f4:	str	r0, [r9]
   5b4f8:	add	r0, sp, #16
   5b4fc:	mov	r1, #0
   5b500:	mov	r2, #8192	; 0x2000
   5b504:	bl	1990 <memset@plt>
   5b508:	ldr	r1, [pc, #708]	; 5b7d4 <Mat_VarDelete+0x4e8>
   5b50c:	mov	r0, r8
   5b510:	add	r1, pc, r1
   5b514:	bl	17e0 <fopen@plt>
   5b518:	cmp	r0, #0
   5b51c:	beq	5b5c4 <Mat_VarDelete+0x2d8>
   5b520:	str	r6, [sp, #4]
   5b524:	mov	r5, r0
   5b528:	mov	r0, r7
   5b52c:	ldr	r1, [pc, #680]	; 5b7dc <Mat_VarDelete+0x4f0>
   5b530:	add	r1, pc, r1
   5b534:	bl	17e0 <fopen@plt>
   5b538:	cmp	r0, #0
   5b53c:	beq	5b5e0 <Mat_VarDelete+0x2f4>
   5b540:	str	r7, [sp]
   5b544:	mov	r6, r0
   5b548:	mov	r4, r8
   5b54c:	add	r7, sp, #16
   5b550:	mov	r0, r7
   5b554:	mov	r1, #1
   5b558:	mov	r2, #8192	; 0x2000
   5b55c:	mov	r3, r5
   5b560:	bl	1a14 <fread_unlocked@plt>
   5b564:	cmp	r0, #0
   5b568:	beq	5b660 <Mat_VarDelete+0x374>
   5b56c:	mov	r8, r0
   5b570:	mov	r0, r7
   5b574:	mov	r1, #1
   5b578:	mov	r3, r6
   5b57c:	mov	r2, r8
   5b580:	bl	184c <fwrite_unlocked@plt>
   5b584:	cmp	r8, r0
   5b588:	beq	5b550 <Mat_VarDelete+0x264>
   5b58c:	mov	r0, r5
   5b590:	bl	19cc <fclose@plt>
   5b594:	mov	r0, r6
   5b598:	bl	19cc <fclose@plt>
   5b59c:	ldr	r0, [pc, #572]	; 5b7e0 <Mat_VarDelete+0x4f4>
   5b5a0:	ldr	r7, [sp]
   5b5a4:	add	r0, pc, r0
   5b5a8:	mov	r1, r7
   5b5ac:	bl	19b4 <Mat_Critical@plt>
   5b5b0:	mov	r8, r4
   5b5b4:	ldr	r6, [sp, #4]
   5b5b8:	cmp	r6, #0
   5b5bc:	bne	5b604 <Mat_VarDelete+0x318>
   5b5c0:	b	5b634 <Mat_VarDelete+0x348>
   5b5c4:	ldr	r0, [pc, #524]	; 5b7d8 <Mat_VarDelete+0x4ec>
   5b5c8:	mov	r1, r8
   5b5cc:	add	r0, pc, r0
   5b5d0:	bl	19b4 <Mat_Critical@plt>
   5b5d4:	cmp	r6, #0
   5b5d8:	bne	5b604 <Mat_VarDelete+0x318>
   5b5dc:	b	5b634 <Mat_VarDelete+0x348>
   5b5e0:	mov	r0, r5
   5b5e4:	bl	19cc <fclose@plt>
   5b5e8:	ldr	r0, [pc, #520]	; 5b7f8 <Mat_VarDelete+0x50c>
   5b5ec:	mov	r1, r7
   5b5f0:	add	r0, pc, r0
   5b5f4:	bl	19b4 <Mat_Critical@plt>
   5b5f8:	ldr	r6, [sp, #4]
   5b5fc:	cmp	r6, #0
   5b600:	beq	5b634 <Mat_VarDelete+0x348>
   5b604:	cmp	sl, #0
   5b608:	beq	5b62c <Mat_VarDelete+0x340>
   5b60c:	mov	r4, r6
   5b610:	ldr	r0, [r4]
   5b614:	cmp	r0, #0
   5b618:	beq	5b620 <Mat_VarDelete+0x334>
   5b61c:	bl	1804 <free@plt>
   5b620:	subs	sl, sl, #1
   5b624:	add	r4, r4, #4
   5b628:	bne	5b610 <Mat_VarDelete+0x324>
   5b62c:	mov	r0, r6
   5b630:	bl	1804 <free@plt>
   5b634:	ldr	r0, [pc, #424]	; 5b7e4 <Mat_VarDelete+0x4f8>
   5b638:	mov	r1, r8
   5b63c:	mov	r2, r7
   5b640:	add	r0, pc, r0
   5b644:	bl	19b4 <Mat_Critical@plt>
   5b648:	mvn	r6, #0
   5b64c:	mov	r0, r7
   5b650:	bl	1804 <free@plt>
   5b654:	mov	r0, r6
   5b658:	sub	sp, fp, #28
   5b65c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5b660:	mov	r0, r5
   5b664:	bl	19cc <fclose@plt>
   5b668:	mov	r0, r6
   5b66c:	bl	19cc <fclose@plt>
   5b670:	mov	r0, r4
   5b674:	mov	r5, r4
   5b678:	bl	19f0 <remove@plt>
   5b67c:	cmn	r0, #1
   5b680:	beq	5b768 <Mat_VarDelete+0x47c>
   5b684:	ldr	r7, [sp]
   5b688:	ldr	r1, [r9, #24]
   5b68c:	mov	r6, r0
   5b690:	mov	r0, r7
   5b694:	bl	17c8 <Mat_Open@plt>
   5b698:	cmp	r0, #0
   5b69c:	beq	5b7bc <Mat_VarDelete+0x4d0>
   5b6a0:	mov	r5, r0
   5b6a4:	ldr	r0, [r9, #4]
   5b6a8:	cmp	r0, #0
   5b6ac:	beq	5b6b4 <Mat_VarDelete+0x3c8>
   5b6b0:	bl	1804 <free@plt>
   5b6b4:	ldr	r0, [r9, #8]
   5b6b8:	cmp	r0, #0
   5b6bc:	beq	5b6c4 <Mat_VarDelete+0x3d8>
   5b6c0:	bl	1804 <free@plt>
   5b6c4:	ldr	r0, [r9, #12]
   5b6c8:	cmp	r0, #0
   5b6cc:	beq	5b6d4 <Mat_VarDelete+0x3e8>
   5b6d0:	bl	1804 <free@plt>
   5b6d4:	ldr	r0, [r9, #40]	; 0x28
   5b6d8:	cmp	r0, #0
   5b6dc:	beq	5b71c <Mat_VarDelete+0x430>
   5b6e0:	ldr	r2, [r9, #36]	; 0x24
   5b6e4:	cmp	r2, #0
   5b6e8:	beq	5b718 <Mat_VarDelete+0x42c>
   5b6ec:	mov	r4, #0
   5b6f0:	ldr	r1, [r0, r4, lsl #2]
   5b6f4:	cmp	r1, #0
   5b6f8:	beq	5b70c <Mat_VarDelete+0x420>
   5b6fc:	mov	r0, r1
   5b700:	bl	1804 <free@plt>
   5b704:	ldr	r2, [r9, #36]	; 0x24
   5b708:	ldr	r0, [r9, #40]	; 0x28
   5b70c:	add	r4, r4, #1
   5b710:	cmp	r4, r2
   5b714:	bcc	5b6f0 <Mat_VarDelete+0x404>
   5b718:	bl	1804 <free@plt>
   5b71c:	mov	r0, #28
   5b720:	mov	r1, r5
   5b724:	mov	r4, r9
   5b728:	vld1.32	{d16-d17}, [r1], r0
   5b72c:	add	r0, r5, #16
   5b730:	vld1.32	{d18-d19}, [r0]
   5b734:	add	r0, r9, #16
   5b738:	vld1.32	{d20-d21}, [r1]
   5b73c:	vst1.32	{d18-d19}, [r0]
   5b740:	add	r0, r9, #28
   5b744:	vst1.32	{d20-d21}, [r0]
   5b748:	mov	r0, #40	; 0x28
   5b74c:	vst1.32	{d16-d17}, [r4], r0
   5b750:	mov	r0, r5
   5b754:	bl	1804 <free@plt>
   5b758:	ldr	r0, [sp, #4]
   5b75c:	str	r0, [r4]
   5b760:	str	sl, [r9, #36]	; 0x24
   5b764:	b	5b64c <Mat_VarDelete+0x360>
   5b768:	ldr	r6, [sp, #4]
   5b76c:	cmp	r6, #0
   5b770:	beq	5b7a4 <Mat_VarDelete+0x4b8>
   5b774:	cmp	sl, #0
   5b778:	beq	5b79c <Mat_VarDelete+0x4b0>
   5b77c:	mov	r4, r6
   5b780:	ldr	r0, [r4]
   5b784:	cmp	r0, #0
   5b788:	beq	5b790 <Mat_VarDelete+0x4a4>
   5b78c:	bl	1804 <free@plt>
   5b790:	subs	sl, sl, #1
   5b794:	add	r4, r4, #4
   5b798:	bne	5b780 <Mat_VarDelete+0x494>
   5b79c:	mov	r0, r6
   5b7a0:	bl	1804 <free@plt>
   5b7a4:	ldr	r0, [pc, #60]	; 5b7e8 <Mat_VarDelete+0x4fc>
   5b7a8:	mov	r1, r5
   5b7ac:	add	r0, pc, r0
   5b7b0:	bl	19b4 <Mat_Critical@plt>
   5b7b4:	ldr	r7, [sp]
   5b7b8:	b	5b648 <Mat_VarDelete+0x35c>
   5b7bc:	ldr	r0, [pc, #40]	; 5b7ec <Mat_VarDelete+0x500>
   5b7c0:	mov	r1, r7
   5b7c4:	add	r0, pc, r0
   5b7c8:	bl	19b4 <Mat_Critical@plt>
   5b7cc:	b	5b64c <Mat_VarDelete+0x360>
   5b7d0:	.word	0x00004c4f
   5b7d4:	.word	0x0000487c
   5b7d8:	.word	0x00004df4
   5b7dc:	.word	0x00004eb3
   5b7e0:	.word	0x00004e65
   5b7e4:	.word	0x00004870
   5b7e8:	.word	0x00004728
   5b7ec:	.word	0x00004729
   5b7f0:	.word	0x00004a20
   5b7f4:	.word	0x00004b4c
   5b7f8:	.word	0x00004df6

0005b7fc <Mat_VarReadNext>:
   5b7fc:	push	{r4, r5, r6, r7, fp, lr}
   5b800:	add	fp, sp, #16
   5b804:	mov	r5, r0
   5b808:	ldr	r0, [r0, #16]
   5b80c:	mov	r4, #0
   5b810:	cmp	r0, #512	; 0x200
   5b814:	beq	5b828 <Mat_VarReadNext+0x2c>
   5b818:	ldr	r0, [r5]
   5b81c:	bl	190c <feof@plt>
   5b820:	cmp	r0, #0
   5b824:	beq	5b830 <Mat_VarReadNext+0x34>
   5b828:	mov	r0, r4
   5b82c:	pop	{r4, r5, r6, r7, fp, pc}
   5b830:	ldr	r0, [r5]
   5b834:	bl	1840 <ftell@plt>
   5b838:	cmn	r0, #1
   5b83c:	beq	5b8a0 <Mat_VarReadNext+0xa4>
   5b840:	mov	r6, r0
   5b844:	ldr	r0, [r5, #16]
   5b848:	cmp	r0, #16
   5b84c:	beq	5b8b4 <Mat_VarReadNext+0xb8>
   5b850:	cmp	r0, #256	; 0x100
   5b854:	bne	5b8cc <Mat_VarReadNext+0xd0>
   5b858:	mov	r0, r5
   5b85c:	bl	56264 <Mat_VarReadNextInfo5>
   5b860:	mov	r7, r0
   5b864:	cmp	r0, #0
   5b868:	beq	5b8c8 <Mat_VarReadNext+0xcc>
   5b86c:	ldr	r0, [r5]
   5b870:	cmp	r0, #0
   5b874:	beq	5b8f0 <Mat_VarReadNext+0xf4>
   5b878:	ldr	r0, [r5, #16]
   5b87c:	cmp	r0, #16
   5b880:	beq	5b8f8 <Mat_VarReadNext+0xfc>
   5b884:	cmp	r0, #256	; 0x100
   5b888:	bne	5b8f0 <Mat_VarReadNext+0xf4>
   5b88c:	mov	r0, r5
   5b890:	mov	r1, r7
   5b894:	bl	29840 <Mat_VarRead5>
   5b898:	mov	r0, r7
   5b89c:	pop	{r4, r5, r6, r7, fp, pc}
   5b8a0:	ldr	r0, [pc, #100]	; 5b90c <Mat_VarReadNext+0x110>
   5b8a4:	add	r0, pc, r0
   5b8a8:	bl	19b4 <Mat_Critical@plt>
   5b8ac:	mov	r0, r4
   5b8b0:	pop	{r4, r5, r6, r7, fp, pc}
   5b8b4:	mov	r0, r5
   5b8b8:	bl	59d58 <Mat_VarReadNextInfo4>
   5b8bc:	mov	r7, r0
   5b8c0:	cmp	r0, #0
   5b8c4:	bne	5b86c <Mat_VarReadNext+0x70>
   5b8c8:	ldr	r0, [r5, #16]
   5b8cc:	cmp	r0, #512	; 0x200
   5b8d0:	beq	5b828 <Mat_VarReadNext+0x2c>
   5b8d4:	ldr	r0, [r5]
   5b8d8:	mov	r1, r6
   5b8dc:	mov	r2, #0
   5b8e0:	mov	r4, #0
   5b8e4:	bl	1a2c <fseek@plt>
   5b8e8:	mov	r0, r4
   5b8ec:	pop	{r4, r5, r6, r7, fp, pc}
   5b8f0:	mov	r0, r7
   5b8f4:	pop	{r4, r5, r6, r7, fp, pc}
   5b8f8:	mov	r0, r5
   5b8fc:	mov	r1, r7
   5b900:	bl	590e8 <Mat_VarRead4>
   5b904:	mov	r0, r7
   5b908:	pop	{r4, r5, r6, r7, fp, pc}
   5b90c:	.word	0x00003f34

0005b910 <Mat_VarWrite>:
   5b910:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5b914:	add	fp, sp, #28
   5b918:	sub	sp, sp, #4
   5b91c:	mov	r9, r0
   5b920:	mvn	r0, #0
   5b924:	cmp	r9, #0
   5b928:	movne	sl, r1
   5b92c:	cmpne	r1, #0
   5b930:	bne	5b93c <Mat_VarWrite+0x2c>
   5b934:	sub	sp, fp, #28
   5b938:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5b93c:	ldr	r0, [r9, #40]	; 0x28
   5b940:	mov	r8, r2
   5b944:	cmp	r0, #0
   5b948:	beq	5b95c <Mat_VarWrite+0x4c>
   5b94c:	ldr	r6, [r9, #36]	; 0x24
   5b950:	cmp	r6, #0
   5b954:	bne	5b97c <Mat_VarWrite+0x6c>
   5b958:	b	5b9b0 <Mat_VarWrite+0xa0>
   5b95c:	mov	r0, #0
   5b960:	mov	r1, sp
   5b964:	str	r0, [sp]
   5b968:	mov	r0, r9
   5b96c:	bl	1930 <Mat_GetDir@plt>
   5b970:	ldr	r6, [r9, #36]	; 0x24
   5b974:	cmp	r6, #0
   5b978:	beq	5b9b0 <Mat_VarWrite+0xa0>
   5b97c:	ldr	r4, [r9, #40]	; 0x28
   5b980:	mov	r5, #0
   5b984:	ldr	r0, [r4, r5, lsl #2]
   5b988:	cmp	r0, #0
   5b98c:	beq	5b9a4 <Mat_VarWrite+0x94>
   5b990:	ldr	r7, [sl, #36]	; 0x24
   5b994:	mov	r1, r7
   5b998:	bl	17b0 <strcmp@plt>
   5b99c:	cmp	r0, #0
   5b9a0:	beq	5ba50 <Mat_VarWrite+0x140>
   5b9a4:	add	r5, r5, #1
   5b9a8:	cmp	r5, r6
   5b9ac:	bcc	5b984 <Mat_VarWrite+0x74>
   5b9b0:	ldr	r0, [r9, #16]
   5b9b4:	cmp	r0, #16
   5b9b8:	beq	5ba6c <Mat_VarWrite+0x15c>
   5b9bc:	cmp	r0, #512	; 0x200
   5b9c0:	beq	5ba60 <Mat_VarWrite+0x150>
   5b9c4:	cmp	r0, #256	; 0x100
   5b9c8:	movne	r0, #2
   5b9cc:	subne	sp, fp, #28
   5b9d0:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5b9d4:	mov	r0, r9
   5b9d8:	mov	r1, sl
   5b9dc:	mov	r2, r8
   5b9e0:	bl	53b2c <Mat_VarWrite5>
   5b9e4:	cmp	r0, #0
   5b9e8:	bne	5b934 <Mat_VarWrite+0x24>
   5b9ec:	ldr	r0, [r9, #40]	; 0x28
   5b9f0:	cmp	r0, #0
   5b9f4:	beq	5ba84 <Mat_VarWrite+0x174>
   5b9f8:	ldr	r1, [r9, #36]	; 0x24
   5b9fc:	mov	r2, #4
   5ba00:	add	r1, r2, r1, lsl #2
   5ba04:	bl	1870 <realloc@plt>
   5ba08:	mov	r2, r0
   5ba0c:	cmp	r0, #0
   5ba10:	beq	5ba98 <Mat_VarWrite+0x188>
   5ba14:	str	r2, [r9, #40]	; 0x28
   5ba18:	ldr	r1, [sl, #36]	; 0x24
   5ba1c:	cmp	r1, #0
   5ba20:	beq	5bab0 <Mat_VarWrite+0x1a0>
   5ba24:	ldr	r0, [pc, #164]	; 5bad0 <Mat_VarWrite+0x1c0>
   5ba28:	add	r0, pc, r0
   5ba2c:	bl	1dac <strdup_printf>
   5ba30:	ldr	r1, [r9, #36]	; 0x24
   5ba34:	ldr	r2, [r9, #40]	; 0x28
   5ba38:	add	r3, r1, #1
   5ba3c:	str	r3, [r9, #36]	; 0x24
   5ba40:	str	r0, [r2, r1, lsl #2]
   5ba44:	mov	r0, #0
   5ba48:	sub	sp, fp, #28
   5ba4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5ba50:	ldr	r0, [pc, #116]	; 5bacc <Mat_VarWrite+0x1bc>
   5ba54:	mov	r1, r7
   5ba58:	add	r0, pc, r0
   5ba5c:	bl	19b4 <Mat_Critical@plt>
   5ba60:	mov	r0, #1
   5ba64:	sub	sp, fp, #28
   5ba68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5ba6c:	mov	r0, r9
   5ba70:	mov	r1, sl
   5ba74:	bl	58b30 <Mat_VarWrite4>
   5ba78:	cmp	r0, #0
   5ba7c:	bne	5b934 <Mat_VarWrite+0x24>
   5ba80:	b	5b9ec <Mat_VarWrite+0xdc>
   5ba84:	mov	r0, #4
   5ba88:	bl	18d0 <malloc@plt>
   5ba8c:	mov	r2, r0
   5ba90:	cmp	r0, #0
   5ba94:	bne	5ba14 <Mat_VarWrite+0x104>
   5ba98:	ldr	r0, [pc, #52]	; 5bad4 <Mat_VarWrite+0x1c4>
   5ba9c:	add	r0, pc, r0
   5baa0:	bl	19b4 <Mat_Critical@plt>
   5baa4:	mov	r0, #3
   5baa8:	sub	sp, fp, #28
   5baac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5bab0:	ldr	r1, [r9, #36]	; 0x24
   5bab4:	add	r0, r1, #1
   5bab8:	str	r0, [r9, #36]	; 0x24
   5babc:	mov	r0, #0
   5bac0:	str	r0, [r2, r1, lsl #2]
   5bac4:	sub	sp, fp, #28
   5bac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5bacc:	.word	0x0000494c
   5bad0:	.word	0x000046fb
   5bad4:	.word	0x000043cb

0005bad8 <Mat_VarDuplicate>:
   5bad8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5badc:	add	fp, sp, #28
   5bae0:	sub	sp, sp, #4
   5bae4:	vpush	{d8-d9}
   5bae8:	sub	sp, sp, #16
   5baec:	mov	sl, r0
   5baf0:	mov	r0, #56	; 0x38
   5baf4:	mov	r4, r1
   5baf8:	bl	18d0 <malloc@plt>
   5bafc:	cmp	r0, #0
   5bb00:	beq	5bdd8 <Mat_VarDuplicate+0x300>
   5bb04:	mov	r6, #0
   5bb08:	mov	r9, r0
   5bb0c:	vmov.i32	q4, #0	; 0x00000000
   5bb10:	mov	r8, r4
   5bb14:	str	r6, [r0, #48]	; 0x30
   5bb18:	add	r0, r0, #32
   5bb1c:	mov	r4, r9
   5bb20:	add	r5, r9, #16
   5bb24:	vst1.32	{d8-d9}, [r0]
   5bb28:	mov	r0, #52	; 0x34
   5bb2c:	vst1.32	{d8-d9}, [r5]
   5bb30:	vst1.32	{d8-d9}, [r4], r0
   5bb34:	mov	r0, #20
   5bb38:	bl	18d0 <malloc@plt>
   5bb3c:	cmp	r0, #0
   5bb40:	str	r0, [r4]
   5bb44:	beq	5bde0 <Mat_VarDuplicate+0x308>
   5bb48:	mov	r7, r0
   5bb4c:	vst1.32	{d8-d9}, [r0]!
   5bb50:	mov	r1, sl
   5bb54:	mov	r2, r9
   5bb58:	str	r6, [r0]
   5bb5c:	mov	r0, #36	; 0x24
   5bb60:	vld1.32	{d8-d9}, [r1], r0
   5bb64:	mov	r0, #48	; 0x30
   5bb68:	vst1.32	{d8-d9}, [r2], r0
   5bb6c:	add	r0, sl, #16
   5bb70:	vld1.32	{d16-d17}, [r0]
   5bb74:	str	r0, [sp, #12]
   5bb78:	vst1.32	{d16-d17}, [r5]
   5bb7c:	ldr	r0, [sl, #44]	; 0x2c
   5bb80:	ldr	r3, [sl, #48]	; 0x30
   5bb84:	str	r0, [r9, #44]	; 0x2c
   5bb88:	str	r3, [r2]
   5bb8c:	ldr	r6, [r1]
   5bb90:	cmp	r6, #0
   5bb94:	beq	5bbc4 <Mat_VarDuplicate+0xec>
   5bb98:	mov	r0, r6
   5bb9c:	bl	1954 <strlen@plt>
   5bba0:	add	r5, r0, #1
   5bba4:	mov	r0, r5
   5bba8:	bl	18d0 <malloc@plt>
   5bbac:	cmp	r0, #0
   5bbb0:	str	r0, [r9, #36]	; 0x24
   5bbb4:	beq	5bbc4 <Mat_VarDuplicate+0xec>
   5bbb8:	mov	r1, r6
   5bbbc:	mov	r2, r5
   5bbc0:	bl	181c <memcpy@plt>
   5bbc4:	vmov.32	r0, d8[1]
   5bbc8:	lsl	r6, r0, #2
   5bbcc:	mov	r0, r6
   5bbd0:	bl	18d0 <malloc@plt>
   5bbd4:	cmp	r0, #0
   5bbd8:	mov	r4, r8
   5bbdc:	str	r0, [r9, #32]
   5bbe0:	beq	5bbf0 <Mat_VarDuplicate+0x118>
   5bbe4:	ldr	r1, [sl, #32]
   5bbe8:	mov	r2, r6
   5bbec:	bl	181c <memcpy@plt>
   5bbf0:	ldr	r5, [sl, #52]	; 0x34
   5bbf4:	cmp	r5, #0
   5bbf8:	beq	5bdf0 <Mat_VarDuplicate+0x318>
   5bbfc:	ldr	r0, [r5]
   5bc00:	mov	r1, #0
   5bc04:	str	r1, [r7, #12]
   5bc08:	str	r1, [r7, #16]
   5bc0c:	str	r0, [r7]
   5bc10:	ldr	r0, [r5, #4]
   5bc14:	str	r0, [r7, #4]
   5bc18:	ldr	r0, [r5, #8]
   5bc1c:	cmp	r0, #0
   5bc20:	ldrne	r0, [r5, #4]
   5bc24:	cmpne	r0, #0
   5bc28:	bne	5bef8 <Mat_VarDuplicate+0x420>
   5bc2c:	ldr	r0, [r5, #12]
   5bc30:	cmp	r0, #0
   5bc34:	beq	5bc5c <Mat_VarDuplicate+0x184>
   5bc38:	mov	r0, #56	; 0x38
   5bc3c:	bl	18d0 <malloc@plt>
   5bc40:	ldr	r1, [r9, #52]	; 0x34
   5bc44:	cmp	r0, #0
   5bc48:	str	r0, [r1, #12]
   5bc4c:	beq	5bc5c <Mat_VarDuplicate+0x184>
   5bc50:	ldr	r1, [r5, #12]
   5bc54:	bl	1948 <inflateCopy@plt>
   5bc58:	ldr	r5, [sl, #52]	; 0x34
   5bc5c:	ldr	r0, [r5, #16]
   5bc60:	cmp	r0, #0
   5bc64:	beq	5be00 <Mat_VarDuplicate+0x328>
   5bc68:	ldr	r0, [sp, #12]
   5bc6c:	ldr	r0, [r0]
   5bc70:	cmp	r0, #5
   5bc74:	bne	5be8c <Mat_VarDuplicate+0x3b4>
   5bc78:	mov	r0, #28
   5bc7c:	bl	18d0 <malloc@plt>
   5bc80:	mov	r7, r0
   5bc84:	ldr	r0, [r9, #52]	; 0x34
   5bc88:	cmp	r7, #0
   5bc8c:	str	r7, [r0, #16]
   5bc90:	beq	5be00 <Mat_VarDuplicate+0x328>
   5bc94:	ldr	r5, [r5, #16]
   5bc98:	ldr	r0, [r5]
   5bc9c:	str	r0, [r7]
   5bca0:	ldr	r0, [r5, #8]
   5bca4:	str	r0, [r7, #8]
   5bca8:	ldr	r0, [r5, #8]
   5bcac:	lsl	r0, r0, #2
   5bcb0:	bl	18d0 <malloc@plt>
   5bcb4:	cmp	r0, #0
   5bcb8:	str	r0, [r7, #4]
   5bcbc:	beq	5bccc <Mat_VarDuplicate+0x1f4>
   5bcc0:	ldmib	r5, {r1, r2}
   5bcc4:	lsl	r2, r2, #2
   5bcc8:	bl	181c <memcpy@plt>
   5bccc:	ldr	r0, [r5, #16]
   5bcd0:	str	r0, [r7, #16]
   5bcd4:	ldr	r0, [r5, #16]
   5bcd8:	lsl	r0, r0, #2
   5bcdc:	bl	18d0 <malloc@plt>
   5bce0:	cmp	r0, #0
   5bce4:	str	r0, [r7, #12]
   5bce8:	beq	5bcfc <Mat_VarDuplicate+0x224>
   5bcec:	ldr	r2, [r5, #16]
   5bcf0:	ldr	r1, [r5, #12]
   5bcf4:	lsl	r2, r2, #2
   5bcf8:	bl	181c <memcpy@plt>
   5bcfc:	ldr	r0, [r5, #20]
   5bd00:	ldr	r1, [r9, #20]
   5bd04:	str	r0, [r7, #20]
   5bd08:	cmp	r1, #0
   5bd0c:	ldr	r0, [r5, #24]
   5bd10:	beq	5c19c <Mat_VarDuplicate+0x6c4>
   5bd14:	cmp	r0, #0
   5bd18:	beq	5be00 <Mat_VarDuplicate+0x328>
   5bd1c:	mov	r0, #8
   5bd20:	bl	18d0 <malloc@plt>
   5bd24:	cmp	r0, #0
   5bd28:	str	r0, [r7, #24]
   5bd2c:	beq	5be00 <Mat_VarDuplicate+0x328>
   5bd30:	mov	r7, r0
   5bd34:	ldr	r0, [r5, #24]
   5bd38:	ldr	r4, [r5, #20]
   5bd3c:	str	r0, [sp, #8]
   5bd40:	ldr	r0, [sl, #8]
   5bd44:	bl	1924 <Mat_SizeOf@plt>
   5bd48:	mul	r0, r0, r4
   5bd4c:	bl	18d0 <malloc@plt>
   5bd50:	cmp	r0, #0
   5bd54:	str	r0, [r7]
   5bd58:	beq	5bd8c <Mat_VarDuplicate+0x2b4>
   5bd5c:	mov	r6, r0
   5bd60:	ldr	r0, [sp, #8]
   5bd64:	str	r7, [sp, #4]
   5bd68:	ldr	r4, [r5, #20]
   5bd6c:	ldr	r7, [r0]
   5bd70:	ldr	r0, [sl, #8]
   5bd74:	bl	1924 <Mat_SizeOf@plt>
   5bd78:	mov	r1, r7
   5bd7c:	ldr	r7, [sp, #4]
   5bd80:	mul	r2, r0, r4
   5bd84:	mov	r0, r6
   5bd88:	bl	181c <memcpy@plt>
   5bd8c:	ldr	r0, [sl, #8]
   5bd90:	ldr	r4, [r5, #20]
   5bd94:	bl	1924 <Mat_SizeOf@plt>
   5bd98:	mul	r0, r0, r4
   5bd9c:	bl	18d0 <malloc@plt>
   5bda0:	cmp	r0, #0
   5bda4:	mov	r4, r8
   5bda8:	str	r0, [r7, #4]
   5bdac:	beq	5be00 <Mat_VarDuplicate+0x328>
   5bdb0:	mov	r6, r0
   5bdb4:	ldr	r0, [sp, #8]
   5bdb8:	ldr	r4, [r5, #20]
   5bdbc:	ldr	r7, [r0, #4]
   5bdc0:	ldr	r0, [sl, #8]
   5bdc4:	bl	1924 <Mat_SizeOf@plt>
   5bdc8:	mul	r2, r0, r4
   5bdcc:	mov	r0, r6
   5bdd0:	mov	r1, r7
   5bdd4:	b	5c1e8 <Mat_VarDuplicate+0x710>
   5bdd8:	mov	r9, #0
   5bddc:	b	5c188 <Mat_VarDuplicate+0x6b0>
   5bde0:	mov	r0, r9
   5bde4:	bl	1804 <free@plt>
   5bde8:	mov	r9, #0
   5bdec:	b	5c188 <Mat_VarDuplicate+0x6b0>
   5bdf0:	mov	r0, r7
   5bdf4:	bl	1804 <free@plt>
   5bdf8:	mov	r0, #0
   5bdfc:	str	r0, [r9, #52]	; 0x34
   5be00:	ldr	r8, [sl, #40]	; 0x28
   5be04:	cmp	r4, #0
   5be08:	beq	5c184 <Mat_VarDuplicate+0x6ac>
   5be0c:	cmp	r8, #0
   5be10:	beq	5c188 <Mat_VarDuplicate+0x6b0>
   5be14:	ldr	r0, [sp, #12]
   5be18:	ldr	r0, [r0]
   5be1c:	cmp	r0, #1
   5be20:	beq	5bf4c <Mat_VarDuplicate+0x474>
   5be24:	cmp	r0, #5
   5be28:	beq	5bfa4 <Mat_VarDuplicate+0x4cc>
   5be2c:	cmp	r0, #2
   5be30:	bne	5c0ec <Mat_VarDuplicate+0x614>
   5be34:	ldr	r5, [sl]
   5be38:	mov	r0, r5
   5be3c:	bl	18d0 <malloc@plt>
   5be40:	cmp	r0, #0
   5be44:	str	r0, [r9, #40]	; 0x28
   5be48:	beq	5c188 <Mat_VarDuplicate+0x6b0>
   5be4c:	mov	r6, r0
   5be50:	ldr	r0, [sl, #12]
   5be54:	cmp	r0, #1
   5be58:	blt	5c188 <Mat_VarDuplicate+0x6b0>
   5be5c:	cmp	r0, r5
   5be60:	bhi	5c188 <Mat_VarDuplicate+0x6b0>
   5be64:	udiv	r5, r5, r0
   5be68:	mov	r7, #0
   5be6c:	ldr	r0, [r8, r7, lsl #2]
   5be70:	mov	r1, r4
   5be74:	bl	1a44 <Mat_VarDuplicate@plt>
   5be78:	str	r0, [r6, r7, lsl #2]
   5be7c:	add	r7, r7, #1
   5be80:	cmp	r7, r5
   5be84:	bcc	5be6c <Mat_VarDuplicate+0x394>
   5be88:	b	5c188 <Mat_VarDuplicate+0x6b0>
   5be8c:	ldr	r0, [r9, #20]
   5be90:	cmp	r0, #0
   5be94:	beq	5c150 <Mat_VarDuplicate+0x678>
   5be98:	mov	r0, #8
   5be9c:	bl	18d0 <malloc@plt>
   5bea0:	mov	r7, r0
   5bea4:	ldr	r0, [r9, #52]	; 0x34
   5bea8:	cmp	r7, #0
   5beac:	str	r7, [r0, #16]
   5beb0:	beq	5be00 <Mat_VarDuplicate+0x328>
   5beb4:	ldr	r6, [r9]
   5beb8:	ldr	r5, [r5, #16]
   5bebc:	mov	r0, r6
   5bec0:	bl	18d0 <malloc@plt>
   5bec4:	cmp	r0, #0
   5bec8:	str	r0, [r7]
   5becc:	beq	5bedc <Mat_VarDuplicate+0x404>
   5bed0:	ldr	r1, [r5]
   5bed4:	mov	r2, r6
   5bed8:	bl	181c <memcpy@plt>
   5bedc:	mov	r0, r6
   5bee0:	bl	18d0 <malloc@plt>
   5bee4:	cmp	r0, #0
   5bee8:	str	r0, [r7, #4]
   5beec:	beq	5be00 <Mat_VarDuplicate+0x328>
   5bef0:	ldr	r1, [r5, #4]
   5bef4:	b	5c170 <Mat_VarDuplicate+0x698>
   5bef8:	mov	r1, #4
   5befc:	bl	1798 <calloc@plt>
   5bf00:	str	r0, [r7, #8]
   5bf04:	ldr	r0, [r5, #4]
   5bf08:	cmp	r0, #0
   5bf0c:	beq	5bc2c <Mat_VarDuplicate+0x154>
   5bf10:	mov	r6, #0
   5bf14:	ldr	r0, [r5, #8]
   5bf18:	ldr	r0, [r0, r6, lsl #2]
   5bf1c:	cmp	r0, #0
   5bf20:	beq	5bf38 <Mat_VarDuplicate+0x460>
   5bf24:	bl	1864 <strdup@plt>
   5bf28:	ldr	r1, [r9, #52]	; 0x34
   5bf2c:	ldr	r1, [r1, #8]
   5bf30:	str	r0, [r1, r6, lsl #2]
   5bf34:	ldr	r5, [sl, #52]	; 0x34
   5bf38:	ldr	r0, [r5, #4]
   5bf3c:	add	r6, r6, #1
   5bf40:	cmp	r6, r0
   5bf44:	bcc	5bf14 <Mat_VarDuplicate+0x43c>
   5bf48:	b	5bc2c <Mat_VarDuplicate+0x154>
   5bf4c:	ldr	r5, [sl]
   5bf50:	mov	r0, r5
   5bf54:	bl	18d0 <malloc@plt>
   5bf58:	cmp	r0, #0
   5bf5c:	str	r0, [r9, #40]	; 0x28
   5bf60:	beq	5c188 <Mat_VarDuplicate+0x6b0>
   5bf64:	mov	r6, r0
   5bf68:	ldr	r0, [sl, #12]
   5bf6c:	cmp	r0, #1
   5bf70:	blt	5c188 <Mat_VarDuplicate+0x6b0>
   5bf74:	cmp	r0, r5
   5bf78:	bhi	5c188 <Mat_VarDuplicate+0x6b0>
   5bf7c:	udiv	r5, r5, r0
   5bf80:	mov	r7, #0
   5bf84:	ldr	r0, [r8, r7, lsl #2]
   5bf88:	mov	r1, r4
   5bf8c:	bl	1a44 <Mat_VarDuplicate@plt>
   5bf90:	str	r0, [r6, r7, lsl #2]
   5bf94:	add	r7, r7, #1
   5bf98:	cmp	r7, r5
   5bf9c:	bcc	5bf84 <Mat_VarDuplicate+0x4ac>
   5bfa0:	b	5c188 <Mat_VarDuplicate+0x6b0>
   5bfa4:	mov	r0, #28
   5bfa8:	bl	18d0 <malloc@plt>
   5bfac:	cmp	r0, #0
   5bfb0:	str	r0, [r9, #40]	; 0x28
   5bfb4:	beq	5c188 <Mat_VarDuplicate+0x6b0>
   5bfb8:	mov	r6, r0
   5bfbc:	ldr	r0, [r8]
   5bfc0:	str	r0, [r6]
   5bfc4:	ldr	r0, [r8, #8]
   5bfc8:	str	r0, [r6, #8]
   5bfcc:	ldr	r0, [r8, #8]
   5bfd0:	lsl	r0, r0, #2
   5bfd4:	bl	18d0 <malloc@plt>
   5bfd8:	cmp	r0, #0
   5bfdc:	str	r0, [r6, #4]
   5bfe0:	beq	5bff0 <Mat_VarDuplicate+0x518>
   5bfe4:	ldmib	r8, {r1, r2}
   5bfe8:	lsl	r2, r2, #2
   5bfec:	bl	181c <memcpy@plt>
   5bff0:	ldr	r0, [r8, #16]
   5bff4:	str	r0, [r6, #16]
   5bff8:	ldr	r0, [r8, #16]
   5bffc:	lsl	r0, r0, #2
   5c000:	bl	18d0 <malloc@plt>
   5c004:	cmp	r0, #0
   5c008:	str	r0, [r6, #12]
   5c00c:	beq	5c020 <Mat_VarDuplicate+0x548>
   5c010:	ldr	r2, [r8, #16]
   5c014:	ldr	r1, [r8, #12]
   5c018:	lsl	r2, r2, #2
   5c01c:	bl	181c <memcpy@plt>
   5c020:	ldr	r0, [r8, #20]
   5c024:	ldr	r1, [r9, #20]
   5c028:	str	r0, [r6, #20]
   5c02c:	cmp	r1, #0
   5c030:	ldr	r0, [r8, #24]
   5c034:	beq	5c228 <Mat_VarDuplicate+0x750>
   5c038:	cmp	r0, #0
   5c03c:	beq	5c274 <Mat_VarDuplicate+0x79c>
   5c040:	mov	r0, #8
   5c044:	bl	18d0 <malloc@plt>
   5c048:	cmp	r0, #0
   5c04c:	str	r0, [r6, #24]
   5c050:	beq	5c188 <Mat_VarDuplicate+0x6b0>
   5c054:	mov	r7, r0
   5c058:	ldr	r0, [sl, #8]
   5c05c:	ldr	r5, [r8, #20]
   5c060:	ldr	r4, [r8, #24]
   5c064:	bl	1924 <Mat_SizeOf@plt>
   5c068:	mul	r0, r0, r5
   5c06c:	bl	18d0 <malloc@plt>
   5c070:	cmp	r0, #0
   5c074:	str	r0, [r7]
   5c078:	beq	5c0a4 <Mat_VarDuplicate+0x5cc>
   5c07c:	mov	r6, r0
   5c080:	ldr	r0, [r4]
   5c084:	ldr	r5, [r8, #20]
   5c088:	str	r0, [sp, #12]
   5c08c:	ldr	r0, [sl, #8]
   5c090:	bl	1924 <Mat_SizeOf@plt>
   5c094:	ldr	r1, [sp, #12]
   5c098:	mul	r2, r0, r5
   5c09c:	mov	r0, r6
   5c0a0:	bl	181c <memcpy@plt>
   5c0a4:	ldr	r0, [sl, #8]
   5c0a8:	mov	r5, r4
   5c0ac:	ldr	r4, [r8, #20]
   5c0b0:	bl	1924 <Mat_SizeOf@plt>
   5c0b4:	mul	r0, r0, r4
   5c0b8:	bl	18d0 <malloc@plt>
   5c0bc:	cmp	r0, #0
   5c0c0:	str	r0, [r7, #4]
   5c0c4:	beq	5c188 <Mat_VarDuplicate+0x6b0>
   5c0c8:	mov	r6, r0
   5c0cc:	ldr	r0, [sl, #8]
   5c0d0:	ldr	r5, [r5, #4]
   5c0d4:	ldr	r4, [r8, #20]
   5c0d8:	bl	1924 <Mat_SizeOf@plt>
   5c0dc:	mul	r2, r0, r4
   5c0e0:	mov	r0, r6
   5c0e4:	mov	r1, r5
   5c0e8:	b	5c220 <Mat_VarDuplicate+0x748>
   5c0ec:	ldr	r0, [r9, #20]
   5c0f0:	cmp	r0, #0
   5c0f4:	beq	5c200 <Mat_VarDuplicate+0x728>
   5c0f8:	mov	r0, #8
   5c0fc:	bl	18d0 <malloc@plt>
   5c100:	cmp	r0, #0
   5c104:	str	r0, [r9, #40]	; 0x28
   5c108:	beq	5c188 <Mat_VarDuplicate+0x6b0>
   5c10c:	ldr	r5, [r9]
   5c110:	mov	r6, r0
   5c114:	mov	r0, r5
   5c118:	bl	18d0 <malloc@plt>
   5c11c:	cmp	r0, #0
   5c120:	str	r0, [r6]
   5c124:	beq	5c134 <Mat_VarDuplicate+0x65c>
   5c128:	ldr	r1, [r8]
   5c12c:	mov	r2, r5
   5c130:	bl	181c <memcpy@plt>
   5c134:	mov	r0, r5
   5c138:	bl	18d0 <malloc@plt>
   5c13c:	cmp	r0, #0
   5c140:	str	r0, [r6, #4]
   5c144:	beq	5c188 <Mat_VarDuplicate+0x6b0>
   5c148:	ldr	r1, [r8, #4]
   5c14c:	b	5c21c <Mat_VarDuplicate+0x744>
   5c150:	ldr	r6, [sl]
   5c154:	mov	r0, r6
   5c158:	bl	18d0 <malloc@plt>
   5c15c:	ldr	r1, [r9, #52]	; 0x34
   5c160:	cmp	r0, #0
   5c164:	str	r0, [r1, #16]
   5c168:	beq	5be00 <Mat_VarDuplicate+0x328>
   5c16c:	ldr	r1, [r5, #16]
   5c170:	mov	r2, r6
   5c174:	bl	181c <memcpy@plt>
   5c178:	ldr	r8, [sl, #40]	; 0x28
   5c17c:	cmp	r4, #0
   5c180:	bne	5be0c <Mat_VarDuplicate+0x334>
   5c184:	str	r8, [r9, #40]	; 0x28
   5c188:	mov	r0, r9
   5c18c:	sub	sp, fp, #48	; 0x30
   5c190:	vpop	{d8-d9}
   5c194:	add	sp, sp, #4
   5c198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5c19c:	cmp	r0, #0
   5c1a0:	beq	5be00 <Mat_VarDuplicate+0x328>
   5c1a4:	ldr	r0, [sl, #8]
   5c1a8:	ldr	r4, [r5, #20]
   5c1ac:	bl	1924 <Mat_SizeOf@plt>
   5c1b0:	mul	r0, r0, r4
   5c1b4:	mov	r4, r8
   5c1b8:	bl	18d0 <malloc@plt>
   5c1bc:	cmp	r0, #0
   5c1c0:	str	r0, [r7, #24]
   5c1c4:	beq	5be00 <Mat_VarDuplicate+0x328>
   5c1c8:	mov	r6, r0
   5c1cc:	ldr	r0, [sl, #8]
   5c1d0:	ldr	r4, [r5, #20]
   5c1d4:	ldr	r5, [r5, #24]
   5c1d8:	bl	1924 <Mat_SizeOf@plt>
   5c1dc:	mul	r2, r0, r4
   5c1e0:	mov	r0, r6
   5c1e4:	mov	r1, r5
   5c1e8:	mov	r4, r8
   5c1ec:	bl	181c <memcpy@plt>
   5c1f0:	ldr	r8, [sl, #40]	; 0x28
   5c1f4:	cmp	r4, #0
   5c1f8:	bne	5be0c <Mat_VarDuplicate+0x334>
   5c1fc:	b	5c184 <Mat_VarDuplicate+0x6ac>
   5c200:	ldr	r5, [sl]
   5c204:	mov	r0, r5
   5c208:	bl	18d0 <malloc@plt>
   5c20c:	cmp	r0, #0
   5c210:	str	r0, [r9, #40]	; 0x28
   5c214:	beq	5c188 <Mat_VarDuplicate+0x6b0>
   5c218:	mov	r1, r8
   5c21c:	mov	r2, r5
   5c220:	bl	181c <memcpy@plt>
   5c224:	b	5c188 <Mat_VarDuplicate+0x6b0>
   5c228:	cmp	r0, #0
   5c22c:	beq	5c274 <Mat_VarDuplicate+0x79c>
   5c230:	ldr	r0, [sl, #8]
   5c234:	ldr	r4, [r8, #20]
   5c238:	bl	1924 <Mat_SizeOf@plt>
   5c23c:	mul	r0, r0, r4
   5c240:	bl	18d0 <malloc@plt>
   5c244:	cmp	r0, #0
   5c248:	str	r0, [r6, #24]
   5c24c:	beq	5c188 <Mat_VarDuplicate+0x6b0>
   5c250:	mov	r7, r0
   5c254:	ldr	r0, [sl, #8]
   5c258:	ldr	r4, [r8, #20]
   5c25c:	ldr	r5, [r8, #24]
   5c260:	bl	1924 <Mat_SizeOf@plt>
   5c264:	mul	r2, r0, r4
   5c268:	mov	r0, r7
   5c26c:	mov	r1, r5
   5c270:	b	5c220 <Mat_VarDuplicate+0x748>
   5c274:	mov	r0, #0
   5c278:	str	r0, [r6, #24]
   5c27c:	b	5c188 <Mat_VarDuplicate+0x6b0>

0005c280 <Mat_CalcSingleSubscript>:
   5c280:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   5c284:	add	fp, sp, #24
   5c288:	cmp	r0, #1
   5c28c:	movlt	ip, #0
   5c290:	movlt	r0, ip
   5c294:	poplt	{r4, r5, r6, r7, r8, r9, fp, pc}
   5c298:	mov	r7, #1
   5c29c:	sub	r3, r1, #4
   5c2a0:	sub	lr, r1, #16
   5c2a4:	mov	r4, #0
   5c2a8:	mvn	r9, #15
   5c2ac:	mov	ip, #0
   5c2b0:	vdup.32	q8, r7
   5c2b4:	ldr	r5, [r2, r4, lsl #2]
   5c2b8:	ldr	r6, [r1, r4, lsl #2]
   5c2bc:	cmp	r5, r6
   5c2c0:	ble	5c2f0 <Mat_CalcSingleSubscript+0x70>
   5c2c4:	b	5c378 <Mat_CalcSingleSubscript+0xf8>
   5c2c8:	add	r4, r4, #1
   5c2cc:	add	ip, r7, ip
   5c2d0:	add	lr, lr, #4
   5c2d4:	cmp	r4, r0
   5c2d8:	movge	r0, ip
   5c2dc:	popge	{r4, r5, r6, r7, r8, r9, fp, pc}
   5c2e0:	ldr	r5, [r2, r4, lsl #2]
   5c2e4:	ldr	r6, [r1, r4, lsl #2]
   5c2e8:	cmp	r5, r6
   5c2ec:	bgt	5c378 <Mat_CalcSingleSubscript+0xf8>
   5c2f0:	cmp	r5, #1
   5c2f4:	blt	5c384 <Mat_CalcSingleSubscript+0x104>
   5c2f8:	sub	r7, r5, #1
   5c2fc:	cmp	r4, #0
   5c300:	beq	5c2c8 <Mat_CalcSingleSubscript+0x48>
   5c304:	cmp	r4, #4
   5c308:	bcs	5c314 <Mat_CalcSingleSubscript+0x94>
   5c30c:	mov	r6, r4
   5c310:	b	5c364 <Mat_CalcSingleSubscript+0xe4>
   5c314:	vorr	d20, d16, d16
   5c318:	bic	r8, r4, #-2147483645	; 0x80000003
   5c31c:	vorr	q9, q8, q8
   5c320:	bic	r5, r4, #3
   5c324:	vmov.32	d20[0], r7
   5c328:	sub	r6, r4, r8
   5c32c:	mov	r7, lr
   5c330:	vorr	d18, d20, d20
   5c334:	vld1.32	{d20-d21}, [r7], r9
   5c338:	subs	r5, r5, #4
   5c33c:	vrev64.32	q10, q10
   5c340:	vext.8	q10, q10, q10, #8
   5c344:	vmul.i32	q9, q10, q9
   5c348:	bne	5c334 <Mat_CalcSingleSubscript+0xb4>
   5c34c:	vext.8	q10, q9, q8, #8
   5c350:	cmp	r4, r8
   5c354:	vmul.i32	q0, q9, q10
   5c358:	vmul.i32	q9, q0, d0[1]
   5c35c:	vmov.32	r7, d18[0]
   5c360:	beq	5c2c8 <Mat_CalcSingleSubscript+0x48>
   5c364:	ldr	r5, [r3, r6, lsl #2]
   5c368:	subs	r6, r6, #1
   5c36c:	mul	r7, r5, r7
   5c370:	bne	5c364 <Mat_CalcSingleSubscript+0xe4>
   5c374:	b	5c2c8 <Mat_CalcSingleSubscript+0x48>
   5c378:	ldr	r0, [pc, #16]	; 5c390 <Mat_CalcSingleSubscript+0x110>
   5c37c:	add	r0, pc, r0
   5c380:	bl	19b4 <Mat_Critical@plt>
   5c384:	mvn	ip, #0
   5c388:	mov	r0, ip
   5c38c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   5c390:	.word	0x00003baa

0005c394 <Mat_CalcSingleSubscript2>:
   5c394:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   5c398:	add	fp, sp, #24
   5c39c:	cmp	r0, #1
   5c3a0:	blt	5c46c <Mat_CalcSingleSubscript2+0xd8>
   5c3a4:	mov	r5, #1
   5c3a8:	sub	ip, r1, #4
   5c3ac:	sub	lr, r1, #16
   5c3b0:	mov	r4, #0
   5c3b4:	mvn	r9, #15
   5c3b8:	vdup.32	q8, r5
   5c3bc:	ldr	r5, [r2, r4, lsl #2]
   5c3c0:	ldr	r6, [r1, r4, lsl #2]
   5c3c4:	cmp	r5, r6
   5c3c8:	bhi	5c474 <Mat_CalcSingleSubscript2+0xe0>
   5c3cc:	cmp	r5, #0
   5c3d0:	beq	5c480 <Mat_CalcSingleSubscript2+0xec>
   5c3d4:	sub	r7, r5, #1
   5c3d8:	cmp	r4, #0
   5c3dc:	beq	5c450 <Mat_CalcSingleSubscript2+0xbc>
   5c3e0:	cmp	r4, #4
   5c3e4:	bcs	5c3f0 <Mat_CalcSingleSubscript2+0x5c>
   5c3e8:	mov	r6, r4
   5c3ec:	b	5c440 <Mat_CalcSingleSubscript2+0xac>
   5c3f0:	vorr	d20, d16, d16
   5c3f4:	bic	r8, r4, #-2147483645	; 0x80000003
   5c3f8:	vorr	q9, q8, q8
   5c3fc:	bic	r5, r4, #3
   5c400:	vmov.32	d20[0], r7
   5c404:	sub	r6, r4, r8
   5c408:	mov	r7, lr
   5c40c:	vorr	d18, d20, d20
   5c410:	vld1.32	{d20-d21}, [r7], r9
   5c414:	subs	r5, r5, #4
   5c418:	vrev64.32	q10, q10
   5c41c:	vext.8	q10, q10, q10, #8
   5c420:	vmul.i32	q9, q10, q9
   5c424:	bne	5c410 <Mat_CalcSingleSubscript2+0x7c>
   5c428:	vext.8	q10, q9, q8, #8
   5c42c:	cmp	r4, r8
   5c430:	vmul.i32	q0, q9, q10
   5c434:	vmul.i32	q9, q0, d0[1]
   5c438:	vmov.32	r7, d18[0]
   5c43c:	beq	5c450 <Mat_CalcSingleSubscript2+0xbc>
   5c440:	ldr	r5, [ip, r6, lsl #2]
   5c444:	subs	r6, r6, #1
   5c448:	mul	r7, r5, r7
   5c44c:	bne	5c440 <Mat_CalcSingleSubscript2+0xac>
   5c450:	ldr	r5, [r3]
   5c454:	add	r4, r4, #1
   5c458:	add	lr, lr, #4
   5c45c:	cmp	r4, r0
   5c460:	add	r5, r5, r7
   5c464:	str	r5, [r3]
   5c468:	blt	5c3bc <Mat_CalcSingleSubscript2+0x28>
   5c46c:	mov	r0, #0
   5c470:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   5c474:	ldr	r0, [pc, #12]	; 5c488 <Mat_CalcSingleSubscript2+0xf4>
   5c478:	add	r0, pc, r0
   5c47c:	bl	19b4 <Mat_Critical@plt>
   5c480:	mov	r0, #1
   5c484:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   5c488:	.word	0x00003adb

0005c48c <Mat_CalcSubscripts>:
   5c48c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5c490:	add	fp, sp, #28
   5c494:	sub	sp, sp, #4
   5c498:	mov	r9, r0
   5c49c:	lsl	r0, r0, #2
   5c4a0:	mov	r6, r2
   5c4a4:	mov	r4, r1
   5c4a8:	bl	18d0 <malloc@plt>
   5c4ac:	cmp	r9, #0
   5c4b0:	beq	5c5a4 <Mat_CalcSubscripts+0x118>
   5c4b4:	add	r1, r4, r9, lsl #2
   5c4b8:	vmov	s0, r6
   5c4bc:	sub	r2, r9, #1
   5c4c0:	mov	r3, #0
   5c4c4:	mvn	r8, #15
   5c4c8:	mov	sl, r9
   5c4cc:	sub	r5, r1, #20
   5c4d0:	vcvt.f64.s32	d16, s0
   5c4d4:	mov	r1, sl
   5c4d8:	subs	sl, sl, #1
   5c4dc:	beq	5c560 <Mat_CalcSubscripts+0xd4>
   5c4e0:	mvn	r7, r3
   5c4e4:	sub	ip, r1, #2
   5c4e8:	add	lr, r7, r9
   5c4ec:	mov	r7, #1
   5c4f0:	cmp	lr, #4
   5c4f4:	bcc	5c544 <Mat_CalcSubscripts+0xb8>
   5c4f8:	mov	r6, r9
   5c4fc:	bic	r9, lr, #3
   5c500:	bic	r7, r2, #3
   5c504:	vmov.i32	q9, #1	; 0x00000001
   5c508:	mov	r1, r5
   5c50c:	sub	ip, ip, r9
   5c510:	vld1.32	{d20-d21}, [r1], r8
   5c514:	subs	r7, r7, #4
   5c518:	vrev64.32	q10, q10
   5c51c:	vext.8	q10, q10, q10, #8
   5c520:	vmul.i32	q9, q10, q9
   5c524:	bne	5c510 <Mat_CalcSubscripts+0x84>
   5c528:	vext.8	q10, q9, q8, #8
   5c52c:	cmp	lr, r9
   5c530:	mov	r9, r6
   5c534:	vmul.i32	q0, q9, q10
   5c538:	vmul.i32	q9, q0, d0[1]
   5c53c:	vmov.32	r7, d18[0]
   5c540:	beq	5c564 <Mat_CalcSubscripts+0xd8>
   5c544:	rsb	r1, ip, #0
   5c548:	ldr	r6, [r4, -r1, lsl #2]
   5c54c:	add	r1, r1, #1
   5c550:	cmp	r1, #1
   5c554:	mul	r7, r6, r7
   5c558:	bne	5c548 <Mat_CalcSubscripts+0xbc>
   5c55c:	b	5c564 <Mat_CalcSubscripts+0xd8>
   5c560:	mov	r7, #1
   5c564:	vmov	s0, r7
   5c568:	sub	r2, r2, #1
   5c56c:	sub	r5, r5, #4
   5c570:	add	r3, r3, #1
   5c574:	cmp	sl, #0
   5c578:	vcvt.f64.s32	d17, s0
   5c57c:	vdiv.f64	d17, d16, d17
   5c580:	vcvtm.s32.f64	s0, d17
   5c584:	vmov	r1, s0
   5c588:	mul	r7, r7, r1
   5c58c:	add	r1, r1, #1
   5c590:	vmov	s0, r7
   5c594:	vcvt.f64.s32	d17, s0
   5c598:	str	r1, [r0, sl, lsl #2]
   5c59c:	vsub.f64	d16, d16, d17
   5c5a0:	bne	5c4d4 <Mat_CalcSubscripts+0x48>
   5c5a4:	sub	sp, fp, #28
   5c5a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0005c5ac <Mat_CalcSubscripts2>:
   5c5ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5c5b0:	add	fp, sp, #28
   5c5b4:	sub	sp, sp, #4
   5c5b8:	mov	r9, r0
   5c5bc:	lsl	r0, r0, #2
   5c5c0:	mov	r6, r2
   5c5c4:	mov	r4, r1
   5c5c8:	bl	18d0 <malloc@plt>
   5c5cc:	cmp	r9, #0
   5c5d0:	beq	5c6c4 <Mat_CalcSubscripts2+0x118>
   5c5d4:	add	r1, r4, r9, lsl #2
   5c5d8:	vmov	s0, r6
   5c5dc:	sub	r2, r9, #1
   5c5e0:	mov	r3, #0
   5c5e4:	mvn	r8, #15
   5c5e8:	mov	sl, r9
   5c5ec:	sub	r5, r1, #20
   5c5f0:	vcvt.f64.u32	d16, s0
   5c5f4:	mov	r1, sl
   5c5f8:	subs	sl, sl, #1
   5c5fc:	beq	5c680 <Mat_CalcSubscripts2+0xd4>
   5c600:	mvn	r7, r3
   5c604:	sub	ip, r1, #2
   5c608:	add	lr, r7, r9
   5c60c:	mov	r7, #1
   5c610:	cmp	lr, #4
   5c614:	bcc	5c664 <Mat_CalcSubscripts2+0xb8>
   5c618:	mov	r6, r9
   5c61c:	bic	r9, lr, #3
   5c620:	bic	r7, r2, #3
   5c624:	vmov.i32	q9, #1	; 0x00000001
   5c628:	mov	r1, r5
   5c62c:	sub	ip, ip, r9
   5c630:	vld1.32	{d20-d21}, [r1], r8
   5c634:	subs	r7, r7, #4
   5c638:	vrev64.32	q10, q10
   5c63c:	vext.8	q10, q10, q10, #8
   5c640:	vmul.i32	q9, q10, q9
   5c644:	bne	5c630 <Mat_CalcSubscripts2+0x84>
   5c648:	vext.8	q10, q9, q8, #8
   5c64c:	cmp	lr, r9
   5c650:	mov	r9, r6
   5c654:	vmul.i32	q0, q9, q10
   5c658:	vmul.i32	q9, q0, d0[1]
   5c65c:	vmov.32	r7, d18[0]
   5c660:	beq	5c684 <Mat_CalcSubscripts2+0xd8>
   5c664:	rsb	r1, ip, #0
   5c668:	ldr	r6, [r4, -r1, lsl #2]
   5c66c:	add	r1, r1, #1
   5c670:	cmp	r1, #1
   5c674:	mul	r7, r6, r7
   5c678:	bne	5c668 <Mat_CalcSubscripts2+0xbc>
   5c67c:	b	5c684 <Mat_CalcSubscripts2+0xd8>
   5c680:	mov	r7, #1
   5c684:	vmov	s0, r7
   5c688:	sub	r2, r2, #1
   5c68c:	sub	r5, r5, #4
   5c690:	add	r3, r3, #1
   5c694:	cmp	sl, #0
   5c698:	vcvt.f64.u32	d17, s0
   5c69c:	vdiv.f64	d17, d16, d17
   5c6a0:	vcvtm.u32.f64	s0, d17
   5c6a4:	vmov	r1, s0
   5c6a8:	mul	r7, r7, r1
   5c6ac:	add	r1, r1, #1
   5c6b0:	vmov	s0, r7
   5c6b4:	vcvt.f64.u32	d17, s0
   5c6b8:	str	r1, [r0, sl, lsl #2]
   5c6bc:	vsub.f64	d16, d16, d17
   5c6c0:	bne	5c5f4 <Mat_CalcSubscripts2+0x48>
   5c6c4:	sub	sp, fp, #28
   5c6c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0005c6cc <Mat_VarGetSize>:
   5c6cc:	push	{r4, r5, r6, r7, fp, lr}
   5c6d0:	add	fp, sp, #16
   5c6d4:	ldr	r1, [r0, #16]
   5c6d8:	mov	r4, r0
   5c6dc:	cmp	r1, #1
   5c6e0:	beq	5c7a0 <Mat_VarGetSize+0xd4>
   5c6e4:	cmp	r1, #5
   5c6e8:	beq	5c810 <Mat_VarGetSize+0x144>
   5c6ec:	cmp	r1, #2
   5c6f0:	bne	5c874 <Mat_VarGetSize+0x1a8>
   5c6f4:	ldr	r5, [r4, #40]	; 0x28
   5c6f8:	cmp	r5, #0
   5c6fc:	beq	5c8cc <Mat_VarGetSize+0x200>
   5c700:	ldr	r1, [r4, #52]	; 0x34
   5c704:	ldr	r0, [r4, #4]
   5c708:	ldr	r7, [r1, #4]
   5c70c:	cmp	r0, #1
   5c710:	blt	5c73c <Mat_VarGetSize+0x70>
   5c714:	ldr	r1, [r4, #32]
   5c718:	mov	r6, #0
   5c71c:	mov	r2, #0
   5c720:	ldr	r3, [r1, r2, lsl #2]
   5c724:	umull	r7, r3, r7, r3
   5c728:	cmp	r3, #0
   5c72c:	bne	5c8d0 <Mat_VarGetSize+0x204>
   5c730:	add	r2, r2, #1
   5c734:	cmp	r2, r0
   5c738:	blt	5c720 <Mat_VarGetSize+0x54>
   5c73c:	mov	r0, #60	; 0x3c
   5c740:	umull	r6, r0, r7, r0
   5c744:	cmp	r0, #0
   5c748:	movwne	r0, #1
   5c74c:	cmp	r0, #0
   5c750:	movwne	r6, #0
   5c754:	cmp	r7, #0
   5c758:	beq	5c8d0 <Mat_VarGetSize+0x204>
   5c75c:	ldr	r0, [r5]
   5c760:	cmp	r0, #0
   5c764:	beq	5c77c <Mat_VarGetSize+0xb0>
   5c768:	ldr	r1, [r0, #16]
   5c76c:	cmp	r1, #0
   5c770:	beq	5c78c <Mat_VarGetSize+0xc0>
   5c774:	bl	1a20 <Mat_VarGetSize@plt>
   5c778:	add	r6, r0, r6
   5c77c:	subs	r7, r7, #1
   5c780:	add	r5, r5, #4
   5c784:	bne	5c75c <Mat_VarGetSize+0x90>
   5c788:	b	5c8d0 <Mat_VarGetSize+0x204>
   5c78c:	sub	r6, r6, #56	; 0x38
   5c790:	subs	r7, r7, #1
   5c794:	add	r5, r5, #4
   5c798:	bne	5c75c <Mat_VarGetSize+0x90>
   5c79c:	b	5c8d0 <Mat_VarGetSize+0x204>
   5c7a0:	ldr	r6, [r4, #40]	; 0x28
   5c7a4:	cmp	r6, #0
   5c7a8:	beq	5c8c0 <Mat_VarGetSize+0x1f4>
   5c7ac:	ldr	r0, [r4]
   5c7b0:	ldr	r1, [r4, #12]
   5c7b4:	udiv	r4, r0, r1
   5c7b8:	cmp	r1, r0
   5c7bc:	rsb	r2, r4, r4, lsl #4
   5c7c0:	lsl	r5, r2, #2
   5c7c4:	bhi	5c908 <Mat_VarGetSize+0x23c>
   5c7c8:	mov	r7, #0
   5c7cc:	ldr	r0, [r6, r7, lsl #2]
   5c7d0:	cmp	r0, #0
   5c7d4:	beq	5c7ec <Mat_VarGetSize+0x120>
   5c7d8:	ldr	r1, [r0, #16]
   5c7dc:	cmp	r1, #0
   5c7e0:	beq	5c7fc <Mat_VarGetSize+0x130>
   5c7e4:	bl	1a20 <Mat_VarGetSize@plt>
   5c7e8:	add	r5, r0, r5
   5c7ec:	add	r7, r7, #1
   5c7f0:	cmp	r7, r4
   5c7f4:	bcc	5c7cc <Mat_VarGetSize+0x100>
   5c7f8:	b	5c908 <Mat_VarGetSize+0x23c>
   5c7fc:	sub	r5, r5, #56	; 0x38
   5c800:	add	r7, r7, #1
   5c804:	cmp	r7, r4
   5c808:	bcc	5c7cc <Mat_VarGetSize+0x100>
   5c80c:	b	5c908 <Mat_VarGetSize+0x23c>
   5c810:	ldr	r6, [r4, #40]	; 0x28
   5c814:	cmp	r6, #0
   5c818:	beq	5c8c0 <Mat_VarGetSize+0x1f4>
   5c81c:	ldr	r0, [r4, #8]
   5c820:	ldr	r5, [r6, #20]
   5c824:	bl	1924 <Mat_SizeOf@plt>
   5c828:	mul	r1, r0, r5
   5c82c:	ldr	r2, [r4, #20]
   5c830:	ldr	r0, [r6, #8]
   5c834:	ldr	r3, [r6, #16]
   5c838:	cmp	r2, #0
   5c83c:	add	r7, r3, r0
   5c840:	movwne	r2, #1
   5c844:	cmp	r3, #0
   5c848:	lsl	r7, r7, #2
   5c84c:	add	r5, r7, r1, lsl r2
   5c850:	cmpne	r0, #0
   5c854:	bne	5c8fc <Mat_VarGetSize+0x230>
   5c858:	ldr	r0, [r4, #28]
   5c85c:	mov	r1, #1
   5c860:	cmp	r0, #0
   5c864:	movweq	r1, #8
   5c868:	add	r5, r1, r5
   5c86c:	mov	r0, r5
   5c870:	pop	{r4, r5, r6, r7, fp, pc}
   5c874:	ldr	r0, [r4, #4]
   5c878:	cmp	r0, #1
   5c87c:	blt	5c8c0 <Mat_VarGetSize+0x1f4>
   5c880:	sub	r3, r1, #4
   5c884:	mov	r1, #0
   5c888:	mov	r2, #0
   5c88c:	cmp	r3, #11
   5c890:	ldrls	r1, [pc, #120]	; 5c910 <Mat_VarGetSize+0x244>
   5c894:	addls	r1, pc, r1
   5c898:	ldrls	r1, [r1, r3, lsl #2]
   5c89c:	ldr	r3, [r4, #32]
   5c8a0:	ldr	r7, [r3, r2, lsl #2]
   5c8a4:	umull	r1, r7, r1, r7
   5c8a8:	cmp	r7, #0
   5c8ac:	bne	5c8e4 <Mat_VarGetSize+0x218>
   5c8b0:	add	r2, r2, #1
   5c8b4:	cmp	r2, r0
   5c8b8:	blt	5c8a0 <Mat_VarGetSize+0x1d4>
   5c8bc:	b	5c8e8 <Mat_VarGetSize+0x21c>
   5c8c0:	mov	r5, #0
   5c8c4:	mov	r0, r5
   5c8c8:	pop	{r4, r5, r6, r7, fp, pc}
   5c8cc:	mov	r6, #0
   5c8d0:	ldr	r0, [r4, #52]	; 0x34
   5c8d4:	ldr	r0, [r0, #4]
   5c8d8:	add	r5, r6, r0, lsl #6
   5c8dc:	mov	r0, r5
   5c8e0:	pop	{r4, r5, r6, r7, fp, pc}
   5c8e4:	mov	r1, #0
   5c8e8:	ldr	r0, [r4, #20]
   5c8ec:	cmp	r0, #0
   5c8f0:	movwne	r0, #1
   5c8f4:	lsl	r0, r1, r0
   5c8f8:	pop	{r4, r5, r6, r7, fp, pc}
   5c8fc:	ldr	r0, [r6, #20]
   5c900:	cmp	r0, #0
   5c904:	beq	5c858 <Mat_VarGetSize+0x18c>
   5c908:	mov	r0, r5
   5c90c:	pop	{r4, r5, r6, r7, fp, pc}
   5c910:	.word	0x00003c64

0005c914 <Mat_VarPrint>:
   5c914:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5c918:	add	fp, sp, #28
   5c91c:	sub	sp, sp, #4
   5c920:	cmp	r0, #0
   5c924:	beq	5cc0c <Mat_VarPrint+0x2f8>
   5c928:	mov	r9, r1
   5c92c:	ldr	r1, [r0, #36]	; 0x24
   5c930:	mov	sl, r0
   5c934:	cmp	r1, #0
   5c938:	beq	5c948 <Mat_VarPrint+0x34>
   5c93c:	ldr	r0, [pc, #2072]	; 5d15c <Mat_VarPrint+0x848>
   5c940:	add	r0, pc, r0
   5c944:	bl	17d4 <printf@plt>
   5c948:	ldr	r1, [sl, #4]
   5c94c:	ldr	r0, [pc, #2060]	; 5d160 <Mat_VarPrint+0x84c>
   5c950:	add	r0, pc, r0
   5c954:	bl	17d4 <printf@plt>
   5c958:	ldr	r0, [sl, #4]
   5c95c:	cmp	r0, #1
   5c960:	blt	5cc0c <Mat_VarPrint+0x2f8>
   5c964:	ldr	r1, [sl, #32]
   5c968:	cmp	r1, #0
   5c96c:	beq	5c998 <Mat_VarPrint+0x84>
   5c970:	mov	r7, #1
   5c974:	mov	r2, #0
   5c978:	ldr	r3, [r1, r2, lsl #2]
   5c97c:	umull	r7, r3, r7, r3
   5c980:	cmp	r3, #0
   5c984:	bne	5c9a0 <Mat_VarPrint+0x8c>
   5c988:	add	r2, r2, #1
   5c98c:	cmp	r2, r0
   5c990:	blt	5c978 <Mat_VarPrint+0x64>
   5c994:	b	5c9a4 <Mat_VarPrint+0x90>
   5c998:	mov	r7, #0
   5c99c:	b	5c9f4 <Mat_VarPrint+0xe0>
   5c9a0:	mov	r7, #0
   5c9a4:	ldr	r1, [r1]
   5c9a8:	ldr	r0, [pc, #1972]	; 5d164 <Mat_VarPrint+0x850>
   5c9ac:	add	r0, pc, r0
   5c9b0:	bl	17d4 <printf@plt>
   5c9b4:	ldr	r0, [sl, #4]
   5c9b8:	cmp	r0, #2
   5c9bc:	blt	5c9ec <Mat_VarPrint+0xd8>
   5c9c0:	ldr	r6, [pc, #1952]	; 5d168 <Mat_VarPrint+0x854>
   5c9c4:	mov	r4, #1
   5c9c8:	add	r6, pc, r6
   5c9cc:	ldr	r0, [sl, #32]
   5c9d0:	ldr	r1, [r0, r4, lsl #2]
   5c9d4:	mov	r0, r6
   5c9d8:	bl	17d4 <printf@plt>
   5c9dc:	ldr	r0, [sl, #4]
   5c9e0:	add	r4, r4, #1
   5c9e4:	cmp	r4, r0
   5c9e8:	blt	5c9cc <Mat_VarPrint+0xb8>
   5c9ec:	mov	r0, #10
   5c9f0:	bl	199c <putchar@plt>
   5c9f4:	ldr	r0, [sl, #16]
   5c9f8:	ldr	r1, [pc, #1900]	; 5d16c <Mat_VarPrint+0x858>
   5c9fc:	add	r1, pc, r1
   5ca00:	ldr	r1, [r1, r0, lsl #2]
   5ca04:	ldr	r0, [pc, #1892]	; 5d170 <Mat_VarPrint+0x85c>
   5ca08:	add	r0, pc, r0
   5ca0c:	bl	17d4 <printf@plt>
   5ca10:	ldr	r0, [sl, #20]
   5ca14:	cmp	r0, #0
   5ca18:	beq	5ca28 <Mat_VarPrint+0x114>
   5ca1c:	ldr	r0, [pc, #1872]	; 5d174 <Mat_VarPrint+0x860>
   5ca20:	add	r0, pc, r0
   5ca24:	b	5ca3c <Mat_VarPrint+0x128>
   5ca28:	ldr	r0, [sl, #28]
   5ca2c:	cmp	r0, #0
   5ca30:	beq	5ca40 <Mat_VarPrint+0x12c>
   5ca34:	ldr	r0, [pc, #1852]	; 5d178 <Mat_VarPrint+0x864>
   5ca38:	add	r0, pc, r0
   5ca3c:	bl	17d4 <printf@plt>
   5ca40:	mov	r0, #10
   5ca44:	bl	199c <putchar@plt>
   5ca48:	ldr	r0, [sl, #8]
   5ca4c:	cmp	r0, #0
   5ca50:	beq	5ca6c <Mat_VarPrint+0x158>
   5ca54:	ldr	r1, [pc, #1824]	; 5d17c <Mat_VarPrint+0x868>
   5ca58:	add	r1, pc, r1
   5ca5c:	ldr	r1, [r1, r0, lsl #2]
   5ca60:	ldr	r0, [pc, #1816]	; 5d180 <Mat_VarPrint+0x86c>
   5ca64:	add	r0, pc, r0
   5ca68:	bl	17d4 <printf@plt>
   5ca6c:	ldr	r0, [sl, #16]
   5ca70:	cmp	r0, #2
   5ca74:	bne	5cb08 <Mat_VarPrint+0x1f4>
   5ca78:	ldr	r0, [sl, #52]	; 0x34
   5ca7c:	ldr	r6, [r0, #4]
   5ca80:	umull	r7, r0, r7, r6
   5ca84:	cmp	r0, #0
   5ca88:	bne	5cb80 <Mat_VarPrint+0x26c>
   5ca8c:	cmp	r7, #0
   5ca90:	beq	5cb80 <Mat_VarPrint+0x26c>
   5ca94:	ldr	r5, [sl, #40]	; 0x28
   5ca98:	ldr	r0, [pc, #1764]	; 5d184 <Mat_VarPrint+0x870>
   5ca9c:	mov	r1, r7
   5caa0:	add	r0, pc, r0
   5caa4:	bl	17d4 <printf@plt>
   5caa8:	ldr	r8, [pc, #1752]	; 5d188 <Mat_VarPrint+0x874>
   5caac:	mov	r4, #0
   5cab0:	add	r8, pc, r8
   5cab4:	ldr	r0, [r5, r4, lsl #2]
   5cab8:	cmp	r0, #0
   5cabc:	beq	5cad8 <Mat_VarPrint+0x1c4>
   5cac0:	mov	r1, r9
   5cac4:	bl	196c <Mat_VarPrint@plt>
   5cac8:	add	r4, r4, #1
   5cacc:	cmp	r7, r4
   5cad0:	bne	5cab4 <Mat_VarPrint+0x1a0>
   5cad4:	b	5cbc8 <Mat_VarPrint+0x2b4>
   5cad8:	ldr	r1, [sl, #52]	; 0x34
   5cadc:	udiv	r0, r4, r6
   5cae0:	mov	r2, #0
   5cae4:	mls	r0, r0, r6, r4
   5cae8:	ldr	r1, [r1, #8]
   5caec:	ldr	r1, [r1, r0, lsl #2]
   5caf0:	mov	r0, r8
   5caf4:	bl	17d4 <printf@plt>
   5caf8:	add	r4, r4, #1
   5cafc:	cmp	r7, r4
   5cb00:	bne	5cab4 <Mat_VarPrint+0x1a0>
   5cb04:	b	5cbc8 <Mat_VarPrint+0x2b4>
   5cb08:	ldr	r5, [sl, #40]	; 0x28
   5cb0c:	cmp	r5, #0
   5cb10:	beq	5cb64 <Mat_VarPrint+0x250>
   5cb14:	ldr	r4, [sl, #12]
   5cb18:	cmp	r4, #0
   5cb1c:	ble	5cb64 <Mat_VarPrint+0x250>
   5cb20:	cmp	r0, #1
   5cb24:	bne	5cbdc <Mat_VarPrint+0x2c8>
   5cb28:	ldr	r6, [sl]
   5cb2c:	ldr	r0, [pc, #1640]	; 5d19c <Mat_VarPrint+0x888>
   5cb30:	add	r0, pc, r0
   5cb34:	bl	18c4 <puts@plt>
   5cb38:	cmp	r4, r6
   5cb3c:	bhi	5cbc8 <Mat_VarPrint+0x2b4>
   5cb40:	udiv	r4, r6, r4
   5cb44:	mov	r6, #0
   5cb48:	ldr	r0, [r5, r6, lsl #2]
   5cb4c:	mov	r1, r9
   5cb50:	bl	196c <Mat_VarPrint@plt>
   5cb54:	add	r6, r6, #1
   5cb58:	cmp	r6, r4
   5cb5c:	bcc	5cb48 <Mat_VarPrint+0x234>
   5cb60:	b	5cbc8 <Mat_VarPrint+0x2b4>
   5cb64:	cmp	r9, #0
   5cb68:	beq	5cc0c <Mat_VarPrint+0x2f8>
   5cb6c:	ldr	r0, [pc, #1572]	; 5d198 <Mat_VarPrint+0x884>
   5cb70:	add	r0, pc, r0
   5cb74:	sub	sp, fp, #28
   5cb78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5cb7c:	b	18c4 <puts@plt>
   5cb80:	ldr	r0, [pc, #1544]	; 5d190 <Mat_VarPrint+0x87c>
   5cb84:	mov	r1, r6
   5cb88:	add	r0, pc, r0
   5cb8c:	bl	17d4 <printf@plt>
   5cb90:	cmp	r6, #0
   5cb94:	beq	5cbc8 <Mat_VarPrint+0x2b4>
   5cb98:	ldr	r5, [pc, #1524]	; 5d194 <Mat_VarPrint+0x880>
   5cb9c:	mov	r4, #0
   5cba0:	add	r5, pc, r5
   5cba4:	ldr	r0, [sl, #52]	; 0x34
   5cba8:	mov	r2, #0
   5cbac:	ldr	r0, [r0, #8]
   5cbb0:	ldr	r1, [r0, r4, lsl #2]
   5cbb4:	mov	r0, r5
   5cbb8:	bl	17d4 <printf@plt>
   5cbbc:	add	r4, r4, #1
   5cbc0:	cmp	r6, r4
   5cbc4:	bne	5cba4 <Mat_VarPrint+0x290>
   5cbc8:	ldr	r0, [pc, #1468]	; 5d18c <Mat_VarPrint+0x878>
   5cbcc:	add	r0, pc, r0
   5cbd0:	sub	sp, fp, #28
   5cbd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5cbd8:	b	18c4 <puts@plt>
   5cbdc:	cmp	r9, #0
   5cbe0:	beq	5cc0c <Mat_VarPrint+0x2f8>
   5cbe4:	ldr	r0, [pc, #1460]	; 5d1a0 <Mat_VarPrint+0x88c>
   5cbe8:	add	r0, pc, r0
   5cbec:	bl	18c4 <puts@plt>
   5cbf0:	ldr	r0, [sl, #4]
   5cbf4:	cmp	r0, #3
   5cbf8:	blt	5cc14 <Mat_VarPrint+0x300>
   5cbfc:	ldr	r0, [pc, #1440]	; 5d1a4 <Mat_VarPrint+0x890>
   5cc00:	add	r0, pc, r0
   5cc04:	bl	18c4 <puts@plt>
   5cc08:	b	5cbc8 <Mat_VarPrint+0x2b4>
   5cc0c:	sub	sp, fp, #28
   5cc10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5cc14:	cmp	r0, #2
   5cc18:	beq	5cc4c <Mat_VarPrint+0x338>
   5cc1c:	cmp	r0, #1
   5cc20:	bne	5cbc8 <Mat_VarPrint+0x2b4>
   5cc24:	ldr	r0, [sl, #32]
   5cc28:	cmp	r0, #0
   5cc2c:	beq	5cbc8 <Mat_VarPrint+0x2b4>
   5cc30:	ldr	r0, [r0]
   5cc34:	cmp	r0, #16
   5cc38:	bcc	5cbc8 <Mat_VarPrint+0x2b4>
   5cc3c:	ldr	r0, [pc, #1380]	; 5d1a8 <Mat_VarPrint+0x894>
   5cc40:	add	r0, pc, r0
   5cc44:	bl	18c4 <puts@plt>
   5cc48:	b	5cbc8 <Mat_VarPrint+0x2b4>
   5cc4c:	ldr	r0, [sl, #32]
   5cc50:	cmp	r0, #0
   5cc54:	beq	5cbc8 <Mat_VarPrint+0x2b4>
   5cc58:	ldr	r1, [sl, #16]
   5cc5c:	sub	r2, r1, #6
   5cc60:	cmp	r2, #10
   5cc64:	bcs	5ce2c <Mat_VarPrint+0x518>
   5cc68:	ldr	r0, [sl, #8]
   5cc6c:	bl	1924 <Mat_SizeOf@plt>
   5cc70:	mov	r5, r0
   5cc74:	ldr	r0, [sl, #20]
   5cc78:	cmp	r0, #0
   5cc7c:	beq	5cd44 <Mat_VarPrint+0x430>
   5cc80:	ldr	r1, [sl, #32]
   5cc84:	ldr	r0, [r1]
   5cc88:	cmp	r0, #0
   5cc8c:	beq	5cbc8 <Mat_VarPrint+0x2b4>
   5cc90:	ldr	r2, [sl, #40]	; 0x28
   5cc94:	mov	r7, #0
   5cc98:	ldm	r2, {r6, r8}
   5cc9c:	ldr	r1, [r1, #4]
   5cca0:	cmp	r1, #0
   5cca4:	beq	5cd18 <Mat_VarPrint+0x404>
   5cca8:	mov	r9, #1
   5ccac:	b	5ccb8 <Mat_VarPrint+0x3a4>
   5ccb0:	ldr	r0, [r0]
   5ccb4:	add	r9, r9, #1
   5ccb8:	sub	r1, r9, #1
   5ccbc:	mla	r4, r0, r1, r7
   5ccc0:	ldr	r0, [sl, #8]
   5ccc4:	mla	r1, r4, r5, r6
   5ccc8:	bl	5d1d8 <Mat_PrintNumber>
   5cccc:	ldr	r0, [pc, #1240]	; 5d1ac <Mat_VarPrint+0x898>
   5ccd0:	add	r0, pc, r0
   5ccd4:	bl	17d4 <printf@plt>
   5ccd8:	ldr	r0, [sl, #8]
   5ccdc:	mla	r1, r4, r5, r8
   5cce0:	bl	5d1d8 <Mat_PrintNumber>
   5cce4:	ldr	r0, [pc, #1220]	; 5d1b0 <Mat_VarPrint+0x89c>
   5cce8:	add	r0, pc, r0
   5ccec:	bl	17d4 <printf@plt>
   5ccf0:	ldr	r0, [sl, #32]
   5ccf4:	cmp	r9, #14
   5ccf8:	ldr	r1, [r0, #4]
   5ccfc:	cmpls	r9, r1
   5cd00:	bcc	5ccb0 <Mat_VarPrint+0x39c>
   5cd04:	cmp	r9, r1
   5cd08:	bcs	5cd18 <Mat_VarPrint+0x404>
   5cd0c:	ldr	r0, [pc, #1184]	; 5d1b4 <Mat_VarPrint+0x8a0>
   5cd10:	add	r0, pc, r0
   5cd14:	bl	17d4 <printf@plt>
   5cd18:	mov	r0, #10
   5cd1c:	bl	199c <putchar@plt>
   5cd20:	ldr	r1, [sl, #32]
   5cd24:	add	r7, r7, #1
   5cd28:	cmp	r7, #14
   5cd2c:	ldr	r0, [r1]
   5cd30:	cmpls	r7, r0
   5cd34:	bcc	5cc9c <Mat_VarPrint+0x388>
   5cd38:	cmp	r7, r0
   5cd3c:	bcs	5cbc8 <Mat_VarPrint+0x2b4>
   5cd40:	b	5ce1c <Mat_VarPrint+0x508>
   5cd44:	ldr	r0, [sl, #32]
   5cd48:	ldr	r1, [r0]
   5cd4c:	cmp	r1, #0
   5cd50:	beq	5cbc8 <Mat_VarPrint+0x2b4>
   5cd54:	ldr	r9, [sl, #40]	; 0x28
   5cd58:	ldr	r8, [pc, #1116]	; 5d1bc <Mat_VarPrint+0x8a8>
   5cd5c:	mov	r7, #0
   5cd60:	add	r8, pc, r8
   5cd64:	ldr	r0, [r0, #4]
   5cd68:	cmp	r0, #0
   5cd6c:	beq	5cdf4 <Mat_VarPrint+0x4e0>
   5cd70:	ldr	r0, [sl, #8]
   5cd74:	mla	r1, r7, r5, r9
   5cd78:	bl	5d1d8 <Mat_PrintNumber>
   5cd7c:	mov	r0, #32
   5cd80:	bl	199c <putchar@plt>
   5cd84:	ldr	r0, [sl, #32]
   5cd88:	mov	r1, #0
   5cd8c:	ldr	r2, [r0, #4]
   5cd90:	cmp	r2, #1
   5cd94:	movwhi	r1, #1
   5cd98:	cmp	r2, #2
   5cd9c:	bcc	5cde4 <Mat_VarPrint+0x4d0>
   5cda0:	mov	r6, #1
   5cda4:	ldr	r0, [r0]
   5cda8:	mla	r0, r0, r6, r7
   5cdac:	mla	r1, r0, r5, r9
   5cdb0:	ldr	r0, [sl, #8]
   5cdb4:	bl	5d1d8 <Mat_PrintNumber>
   5cdb8:	mov	r0, #32
   5cdbc:	bl	199c <putchar@plt>
   5cdc0:	ldr	r0, [sl, #32]
   5cdc4:	add	r6, r6, #1
   5cdc8:	mov	r1, #0
   5cdcc:	ldr	r2, [r0, #4]
   5cdd0:	cmp	r6, r2
   5cdd4:	movwcc	r1, #1
   5cdd8:	cmp	r6, #14
   5cddc:	cmpls	r6, r2
   5cde0:	bcc	5cda4 <Mat_VarPrint+0x490>
   5cde4:	cmp	r1, #0
   5cde8:	beq	5cdf4 <Mat_VarPrint+0x4e0>
   5cdec:	mov	r0, r8
   5cdf0:	bl	17d4 <printf@plt>
   5cdf4:	mov	r0, #10
   5cdf8:	bl	199c <putchar@plt>
   5cdfc:	ldr	r0, [sl, #32]
   5ce00:	add	r7, r7, #1
   5ce04:	cmp	r7, #14
   5ce08:	ldr	r1, [r0]
   5ce0c:	cmpls	r7, r1
   5ce10:	bcc	5cd64 <Mat_VarPrint+0x450>
   5ce14:	cmp	r7, r1
   5ce18:	bcs	5cbc8 <Mat_VarPrint+0x2b4>
   5ce1c:	ldr	r0, [pc, #916]	; 5d1b8 <Mat_VarPrint+0x8a4>
   5ce20:	add	r0, pc, r0
   5ce24:	bl	18c4 <puts@plt>
   5ce28:	b	5cbc8 <Mat_VarPrint+0x2b4>
   5ce2c:	cmp	r1, #4
   5ce30:	beq	5cf24 <Mat_VarPrint+0x610>
   5ce34:	cmp	r1, #5
   5ce38:	bne	5cbc8 <Mat_VarPrint+0x2b4>
   5ce3c:	ldr	r0, [sl, #8]
   5ce40:	bl	1924 <Mat_SizeOf@plt>
   5ce44:	str	r0, [sp]
   5ce48:	ldr	r0, [sl, #20]
   5ce4c:	ldr	r5, [sl, #40]	; 0x28
   5ce50:	cmp	r0, #0
   5ce54:	beq	5d02c <Mat_VarPrint+0x718>
   5ce58:	ldr	r1, [r5, #16]
   5ce5c:	cmp	r1, #1
   5ce60:	beq	5cbc8 <Mat_VarPrint+0x2b4>
   5ce64:	ldr	r0, [r5, #24]
   5ce68:	mov	r6, #0
   5ce6c:	ldm	r0, {r8, r9}
   5ce70:	ldr	r0, [r5, #12]
   5ce74:	ldr	r7, [r0, r6, lsl #2]
   5ce78:	add	r6, r6, #1
   5ce7c:	ldr	r2, [r0, r6, lsl #2]
   5ce80:	cmp	r7, r2
   5ce84:	bcs	5cf14 <Mat_VarPrint+0x600>
   5ce88:	ldr	r1, [r5, #20]
   5ce8c:	cmp	r7, r1
   5ce90:	bcs	5cf10 <Mat_VarPrint+0x5fc>
   5ce94:	ldr	r0, [sp]
   5ce98:	mul	r4, r0, r7
   5ce9c:	ldr	r0, [r5, #4]
   5cea0:	mov	r2, r6
   5cea4:	ldr	r0, [r0, r7, lsl #2]
   5cea8:	add	r1, r0, #1
   5ceac:	ldr	r0, [pc, #788]	; 5d1c8 <Mat_VarPrint+0x8b4>
   5ceb0:	add	r0, pc, r0
   5ceb4:	bl	17d4 <printf@plt>
   5ceb8:	ldr	r0, [sl, #8]
   5cebc:	add	r1, r8, r4
   5cec0:	bl	5d1d8 <Mat_PrintNumber>
   5cec4:	ldr	r0, [pc, #768]	; 5d1cc <Mat_VarPrint+0x8b8>
   5cec8:	add	r0, pc, r0
   5cecc:	bl	17d4 <printf@plt>
   5ced0:	ldr	r0, [sl, #8]
   5ced4:	add	r1, r9, r4
   5ced8:	bl	5d1d8 <Mat_PrintNumber>
   5cedc:	ldr	r0, [pc, #748]	; 5d1d0 <Mat_VarPrint+0x8bc>
   5cee0:	add	r0, pc, r0
   5cee4:	bl	18c4 <puts@plt>
   5cee8:	ldr	r0, [r5, #12]
   5ceec:	add	r7, r7, #1
   5cef0:	ldr	r1, [r0, r6, lsl #2]
   5cef4:	cmp	r7, r1
   5cef8:	bcs	5cf10 <Mat_VarPrint+0x5fc>
   5cefc:	ldr	r1, [sp]
   5cf00:	add	r4, r4, r1
   5cf04:	ldr	r1, [r5, #20]
   5cf08:	cmp	r7, r1
   5cf0c:	bcc	5ce9c <Mat_VarPrint+0x588>
   5cf10:	ldr	r1, [r5, #16]
   5cf14:	sub	r2, r1, #1
   5cf18:	cmp	r6, r2
   5cf1c:	bcc	5ce74 <Mat_VarPrint+0x560>
   5cf20:	b	5cbc8 <Mat_VarPrint+0x2b4>
   5cf24:	ldr	r1, [sl, #8]
   5cf28:	cmp	r1, #17
   5cf2c:	cmpne	r1, #4
   5cf30:	bne	5d0dc <Mat_VarPrint+0x7c8>
   5cf34:	ldr	r1, [r0]
   5cf38:	cmp	r1, #0
   5cf3c:	beq	5cbc8 <Mat_VarPrint+0x2b4>
   5cf40:	ldr	r7, [sl, #40]	; 0x28
   5cf44:	ldr	r4, [pc, #628]	; 5d1c0 <Mat_VarPrint+0x8ac>
   5cf48:	mov	r5, #0
   5cf4c:	mov	r6, #2
   5cf50:	mov	r9, #0
   5cf54:	add	r4, pc, r4
   5cf58:	ldr	r0, [r0, #4]
   5cf5c:	cmp	r0, #0
   5cf60:	beq	5d00c <Mat_VarPrint+0x6f8>
   5cf64:	mov	r8, #1
   5cf68:	b	5cf74 <Mat_VarPrint+0x660>
   5cf6c:	ldr	r1, [r0]
   5cf70:	add	r8, r8, #1
   5cf74:	sub	r0, r8, #1
   5cf78:	mla	r0, r1, r0, r9
   5cf7c:	add	r0, r7, r0, lsl #1
   5cf80:	ldrh	r3, [r0]
   5cf84:	cmp	r3, #127	; 0x7f
   5cf88:	bhi	5cfa8 <Mat_VarPrint+0x694>
   5cf8c:	mov	r0, r3
   5cf90:	bl	199c <putchar@plt>
   5cf94:	ldr	r0, [sl, #32]
   5cf98:	ldr	r1, [r0, #4]
   5cf9c:	cmp	r8, r1
   5cfa0:	bcc	5cf6c <Mat_VarPrint+0x658>
   5cfa4:	b	5d00c <Mat_VarPrint+0x6f8>
   5cfa8:	cmp	r5, r3, lsr #11
   5cfac:	bne	5cfe0 <Mat_VarPrint+0x6cc>
   5cfb0:	mov	r0, #192	; 0xc0
   5cfb4:	orr	r1, r0, r3, lsr #6
   5cfb8:	ldr	r0, [pc, #516]	; 5d1c4 <Mat_VarPrint+0x8b0>
   5cfbc:	bfi	r3, r6, #6, #26
   5cfc0:	mov	r2, r3
   5cfc4:	add	r0, pc, r0
   5cfc8:	bl	17d4 <printf@plt>
   5cfcc:	ldr	r0, [sl, #32]
   5cfd0:	ldr	r1, [r0, #4]
   5cfd4:	cmp	r8, r1
   5cfd8:	bcc	5cf6c <Mat_VarPrint+0x658>
   5cfdc:	b	5d00c <Mat_VarPrint+0x6f8>
   5cfe0:	lsr	r2, r3, #6
   5cfe4:	mov	r0, #224	; 0xe0
   5cfe8:	orr	r1, r0, r3, lsr #12
   5cfec:	bfi	r3, r6, #6, #26
   5cff0:	bfi	r2, r6, #6, #26
   5cff4:	mov	r0, r4
   5cff8:	bl	17d4 <printf@plt>
   5cffc:	ldr	r0, [sl, #32]
   5d000:	ldr	r1, [r0, #4]
   5d004:	cmp	r8, r1
   5d008:	bcc	5cf6c <Mat_VarPrint+0x658>
   5d00c:	mov	r0, #10
   5d010:	bl	199c <putchar@plt>
   5d014:	ldr	r0, [sl, #32]
   5d018:	add	r9, r9, #1
   5d01c:	ldr	r1, [r0]
   5d020:	cmp	r9, r1
   5d024:	bcc	5cf58 <Mat_VarPrint+0x644>
   5d028:	b	5cbc8 <Mat_VarPrint+0x2b4>
   5d02c:	ldr	r1, [r5, #16]
   5d030:	cmp	r1, #1
   5d034:	beq	5cbc8 <Mat_VarPrint+0x2b4>
   5d038:	ldr	r9, [r5, #24]
   5d03c:	ldr	r0, [r5, #12]
   5d040:	ldr	r8, [pc, #396]	; 5d1d4 <Mat_VarPrint+0x8c0>
   5d044:	mov	r4, #0
   5d048:	add	r8, pc, r8
   5d04c:	ldr	r6, [r0, r4, lsl #2]
   5d050:	add	r4, r4, #1
   5d054:	ldr	r2, [r0, r4, lsl #2]
   5d058:	cmp	r6, r2
   5d05c:	bcs	5d0cc <Mat_VarPrint+0x7b8>
   5d060:	ldr	r1, [r5, #20]
   5d064:	cmp	r6, r1
   5d068:	bcs	5d0c8 <Mat_VarPrint+0x7b4>
   5d06c:	ldr	r0, [sp]
   5d070:	mla	r7, r0, r6, r9
   5d074:	ldr	r0, [r5, #4]
   5d078:	mov	r2, r4
   5d07c:	ldr	r0, [r0, r6, lsl #2]
   5d080:	add	r1, r0, #1
   5d084:	mov	r0, r8
   5d088:	bl	17d4 <printf@plt>
   5d08c:	ldr	r0, [sl, #8]
   5d090:	mov	r1, r7
   5d094:	bl	5d1d8 <Mat_PrintNumber>
   5d098:	mov	r0, #10
   5d09c:	bl	199c <putchar@plt>
   5d0a0:	ldr	r0, [r5, #12]
   5d0a4:	add	r6, r6, #1
   5d0a8:	ldr	r1, [r0, r4, lsl #2]
   5d0ac:	cmp	r6, r1
   5d0b0:	bcs	5d0c8 <Mat_VarPrint+0x7b4>
   5d0b4:	ldr	r1, [sp]
   5d0b8:	add	r7, r7, r1
   5d0bc:	ldr	r1, [r5, #20]
   5d0c0:	cmp	r6, r1
   5d0c4:	bcc	5d074 <Mat_VarPrint+0x760>
   5d0c8:	ldr	r1, [r5, #16]
   5d0cc:	sub	r2, r1, #1
   5d0d0:	cmp	r4, r2
   5d0d4:	bcc	5d04c <Mat_VarPrint+0x738>
   5d0d8:	b	5cbc8 <Mat_VarPrint+0x2b4>
   5d0dc:	ldr	r1, [r0]
   5d0e0:	cmp	r1, #0
   5d0e4:	beq	5cbc8 <Mat_VarPrint+0x2b4>
   5d0e8:	ldr	r5, [sl, #40]	; 0x28
   5d0ec:	mov	r6, #0
   5d0f0:	ldr	r0, [r0, #4]
   5d0f4:	cmp	r0, #0
   5d0f8:	beq	5d13c <Mat_VarPrint+0x828>
   5d0fc:	ldrb	r0, [r5, r6]
   5d100:	bl	199c <putchar@plt>
   5d104:	ldr	r0, [sl, #32]
   5d108:	ldr	r1, [r0, #4]
   5d10c:	cmp	r1, #2
   5d110:	bcc	5d13c <Mat_VarPrint+0x828>
   5d114:	mov	r4, #1
   5d118:	ldr	r0, [r0]
   5d11c:	mla	r0, r0, r4, r6
   5d120:	ldrb	r0, [r5, r0]
   5d124:	bl	199c <putchar@plt>
   5d128:	ldr	r0, [sl, #32]
   5d12c:	add	r4, r4, #1
   5d130:	ldr	r1, [r0, #4]
   5d134:	cmp	r4, r1
   5d138:	bcc	5d118 <Mat_VarPrint+0x804>
   5d13c:	mov	r0, #10
   5d140:	bl	199c <putchar@plt>
   5d144:	ldr	r0, [sl, #32]
   5d148:	add	r6, r6, #1
   5d14c:	ldr	r1, [r0]
   5d150:	cmp	r6, r1
   5d154:	bcc	5d0f0 <Mat_VarPrint+0x7dc>
   5d158:	b	5cbc8 <Mat_VarPrint+0x2b4>
   5d15c:	.word	0x000037b0
   5d160:	.word	0x000039b2
   5d164:	.word	0x00003754
   5d168:	.word	0x00003748
   5d16c:	.word	0x00014450
   5d170:	.word	0x0000370f
   5d174:	.word	0x00003706
   5d178:	.word	0x000036f9
   5d17c:	.word	0x0001443c
   5d180:	.word	0x00003870
   5d184:	.word	0x00003844
   5d188:	.word	0x00003843
   5d18c:	.word	0x00003885
   5d190:	.word	0x0000375c
   5d194:	.word	0x00003753
   5d198:	.word	0x000038df
   5d19c:	.word	0x0000391d
   5d1a0:	.word	0x00003865
   5d1a4:	.word	0x00003888
   5d1a8:	.word	0x00003818
   5d1ac:	.word	0x00003642
   5d1b0:	.word	0x0000362e
   5d1b4:	.word	0x00003609
   5d1b8:	.word	0x00003627
   5d1bc:	.word	0x000035b9
   5d1c0:	.word	0x000033c9
   5d1c4:	.word	0x0000335b
   5d1c8:	.word	0x00003474
   5d1cc:	.word	0x0000344a
   5d1d0:	.word	0x0000354b
   5d1d4:	.word	0x000032dc

0005d1d8 <Mat_PrintNumber>:
   5d1d8:	sub	r0, r0, #1
   5d1dc:	cmp	r0, #12
   5d1e0:	bxhi	lr
   5d1e4:	add	r2, pc, #4
   5d1e8:	ldr	r0, [r2, r0, lsl #2]
   5d1ec:	add	pc, r2, r0
   5d1f0:	.word	0x00000034
   5d1f4:	.word	0x00000044
   5d1f8:	.word	0x00000054
   5d1fc:	.word	0x00000064
   5d200:	.word	0x00000074
   5d204:	.word	0x00000084
   5d208:	.word	0x00000094
   5d20c:	.word	0x000000d4
   5d210:	.word	0x000000a0
   5d214:	.word	0x000000d4
   5d218:	.word	0x000000d4
   5d21c:	.word	0x000000b4
   5d220:	.word	0x000000c4
   5d224:	ldrsb	r1, [r1]
   5d228:	ldr	r0, [pc, #180]	; 5d2e4 <Mat_PrintNumber+0x10c>
   5d22c:	add	r0, pc, r0
   5d230:	b	17d4 <printf@plt>
   5d234:	ldrb	r1, [r1]
   5d238:	ldr	r0, [pc, #168]	; 5d2e8 <Mat_PrintNumber+0x110>
   5d23c:	add	r0, pc, r0
   5d240:	b	17d4 <printf@plt>
   5d244:	ldrsh	r1, [r1]
   5d248:	ldr	r0, [pc, #140]	; 5d2dc <Mat_PrintNumber+0x104>
   5d24c:	add	r0, pc, r0
   5d250:	b	17d4 <printf@plt>
   5d254:	ldrh	r1, [r1]
   5d258:	ldr	r0, [pc, #128]	; 5d2e0 <Mat_PrintNumber+0x108>
   5d25c:	add	r0, pc, r0
   5d260:	b	17d4 <printf@plt>
   5d264:	ldr	r1, [r1]
   5d268:	ldr	r0, [pc, #100]	; 5d2d4 <Mat_PrintNumber+0xfc>
   5d26c:	add	r0, pc, r0
   5d270:	b	17d4 <printf@plt>
   5d274:	ldr	r1, [r1]
   5d278:	ldr	r0, [pc, #88]	; 5d2d8 <Mat_PrintNumber+0x100>
   5d27c:	add	r0, pc, r0
   5d280:	b	17d4 <printf@plt>
   5d284:	vldr	s0, [r1]
   5d288:	vcvt.f64.f32	d16, s0
   5d28c:	b	5d294 <Mat_PrintNumber+0xbc>
   5d290:	vldr	d16, [r1]
   5d294:	ldr	r0, [pc, #44]	; 5d2c8 <Mat_PrintNumber+0xf0>
   5d298:	vmov	r2, r3, d16
   5d29c:	add	r0, pc, r0
   5d2a0:	b	17d4 <printf@plt>
   5d2a4:	ldrd	r2, [r1]
   5d2a8:	ldr	r0, [pc, #28]	; 5d2cc <Mat_PrintNumber+0xf4>
   5d2ac:	add	r0, pc, r0
   5d2b0:	b	17d4 <printf@plt>
   5d2b4:	ldrd	r2, [r1]
   5d2b8:	ldr	r0, [pc, #16]	; 5d2d0 <Mat_PrintNumber+0xf8>
   5d2bc:	add	r0, pc, r0
   5d2c0:	b	17d4 <printf@plt>
   5d2c4:	bx	lr
   5d2c8:	.word	0x00003189
   5d2cc:	.word	0x0000317c
   5d2d0:	.word	0x00003171
   5d2d4:	.word	0x000028cc
   5d2d8:	.word	0x000031b6
   5d2dc:	.word	0x000031e9
   5d2e0:	.word	0x000031dd
   5d2e4:	.word	0x00003211
   5d2e8:	.word	0x00003206

0005d2ec <Mat_VarReadData>:
   5d2ec:	push	{fp, lr}
   5d2f0:	mov	fp, sp
   5d2f4:	ldr	ip, [r1, #16]
   5d2f8:	sub	lr, ip, #6
   5d2fc:	mvn	ip, #0
   5d300:	cmp	lr, #9
   5d304:	bhi	5d338 <Mat_VarReadData+0x4c>
   5d308:	ldr	ip, [r0, #16]
   5d30c:	cmp	ip, #16
   5d310:	beq	5d340 <Mat_VarReadData+0x54>
   5d314:	cmp	ip, #512	; 0x200
   5d318:	moveq	ip, #1
   5d31c:	moveq	r0, ip
   5d320:	popeq	{fp, pc}
   5d324:	cmp	ip, #256	; 0x100
   5d328:	bne	5d334 <Mat_VarReadData+0x48>
   5d32c:	pop	{fp, lr}
   5d330:	b	2b650 <Mat_VarReadData5>
   5d334:	mov	ip, #2
   5d338:	mov	r0, ip
   5d33c:	pop	{fp, pc}
   5d340:	pop	{fp, lr}
   5d344:	b	59a14 <Mat_VarReadData4>

0005d348 <Mat_VarReadDataAll>:
   5d348:	push	{r4, sl, fp, lr}
   5d34c:	add	fp, sp, #8
   5d350:	cmp	r0, #0
   5d354:	mov	r4, #1
   5d358:	cmpne	r1, #0
   5d35c:	bne	5d368 <Mat_VarReadDataAll+0x20>
   5d360:	mov	r0, r4
   5d364:	pop	{r4, sl, fp, pc}
   5d368:	ldr	r2, [r0]
   5d36c:	mov	r4, #0
   5d370:	cmp	r2, #0
   5d374:	beq	5d360 <Mat_VarReadDataAll+0x18>
   5d378:	ldr	r2, [r0, #16]
   5d37c:	cmp	r2, #16
   5d380:	beq	5d398 <Mat_VarReadDataAll+0x50>
   5d384:	cmp	r2, #256	; 0x100
   5d388:	bne	5d360 <Mat_VarReadDataAll+0x18>
   5d38c:	bl	29840 <Mat_VarRead5>
   5d390:	mov	r0, r4
   5d394:	pop	{r4, sl, fp, pc}
   5d398:	bl	590e8 <Mat_VarRead4>
   5d39c:	mov	r0, r4
   5d3a0:	pop	{r4, sl, fp, pc}

0005d3a4 <Mat_VarReadDataLinear>:
   5d3a4:	push	{fp, lr}
   5d3a8:	mov	fp, sp
   5d3ac:	ldr	ip, [r1, #16]
   5d3b0:	sub	lr, ip, #6
   5d3b4:	mvn	ip, #0
   5d3b8:	cmp	lr, #9
   5d3bc:	bhi	5d3f0 <Mat_VarReadDataLinear+0x4c>
   5d3c0:	ldr	ip, [r0, #16]
   5d3c4:	cmp	ip, #16
   5d3c8:	beq	5d3f8 <Mat_VarReadDataLinear+0x54>
   5d3cc:	cmp	ip, #512	; 0x200
   5d3d0:	moveq	ip, #1
   5d3d4:	moveq	r0, ip
   5d3d8:	popeq	{fp, pc}
   5d3dc:	cmp	ip, #256	; 0x100
   5d3e0:	bne	5d3ec <Mat_VarReadDataLinear+0x48>
   5d3e4:	pop	{fp, lr}
   5d3e8:	b	53318 <Mat_VarReadDataLinear5>
   5d3ec:	mov	ip, #2
   5d3f0:	mov	r0, ip
   5d3f4:	pop	{fp, pc}
   5d3f8:	pop	{fp, lr}
   5d3fc:	b	59c48 <Mat_VarReadDataLinear4>

0005d400 <Mat_VarReadInfo>:
   5d400:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   5d404:	add	fp, sp, #24
   5d408:	cmp	r0, #0
   5d40c:	mov	r6, #0
   5d410:	movne	r5, r1
   5d414:	cmpne	r1, #0
   5d418:	bne	5d424 <Mat_VarReadInfo+0x24>
   5d41c:	mov	r0, r6
   5d420:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   5d424:	mov	r4, r0
   5d428:	ldr	r0, [r0, #16]
   5d42c:	cmp	r0, #512	; 0x200
   5d430:	bne	5d4cc <Mat_VarReadInfo+0xcc>
   5d434:	ldr	r0, [r4, #36]	; 0x24
   5d438:	ldr	r8, [r4, #32]
   5d43c:	mov	r6, #0
   5d440:	str	r6, [r4, #32]
   5d444:	cmp	r0, #0
   5d448:	beq	5d4c0 <Mat_VarReadInfo+0xc0>
   5d44c:	ldr	r0, [r4, #16]
   5d450:	cmp	r0, #16
   5d454:	beq	5d478 <Mat_VarReadInfo+0x78>
   5d458:	cmp	r0, #256	; 0x100
   5d45c:	bne	5d58c <Mat_VarReadInfo+0x18c>
   5d460:	mov	r0, r4
   5d464:	bl	56264 <Mat_VarReadNextInfo5>
   5d468:	mov	r7, r0
   5d46c:	cmp	r0, #0
   5d470:	bne	5d48c <Mat_VarReadInfo+0x8c>
   5d474:	b	5d58c <Mat_VarReadInfo+0x18c>
   5d478:	mov	r0, r4
   5d47c:	bl	59d58 <Mat_VarReadNextInfo4>
   5d480:	mov	r7, r0
   5d484:	cmp	r0, #0
   5d488:	beq	5d58c <Mat_VarReadInfo+0x18c>
   5d48c:	ldr	r0, [r7, #36]	; 0x24
   5d490:	cmp	r0, #0
   5d494:	beq	5d4a8 <Mat_VarReadInfo+0xa8>
   5d498:	mov	r1, r5
   5d49c:	bl	17b0 <strcmp@plt>
   5d4a0:	cmp	r0, #0
   5d4a4:	beq	5d5cc <Mat_VarReadInfo+0x1cc>
   5d4a8:	mov	r0, r7
   5d4ac:	bl	1918 <Mat_VarFree@plt>
   5d4b0:	ldr	r0, [r4, #32]
   5d4b4:	ldr	r1, [r4, #36]	; 0x24
   5d4b8:	cmp	r0, r1
   5d4bc:	bcc	5d44c <Mat_VarReadInfo+0x4c>
   5d4c0:	mov	r0, r6
   5d4c4:	str	r8, [r4, #32]
   5d4c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   5d4cc:	ldr	r0, [r4]
   5d4d0:	bl	1840 <ftell@plt>
   5d4d4:	cmn	r0, #1
   5d4d8:	beq	5d578 <Mat_VarReadInfo+0x178>
   5d4dc:	mov	r7, r0
   5d4e0:	ldr	r0, [r4]
   5d4e4:	ldr	r1, [r4, #28]
   5d4e8:	mov	r2, #0
   5d4ec:	bl	1a2c <fseek@plt>
   5d4f0:	ldr	r0, [r4, #16]
   5d4f4:	cmp	r0, #16
   5d4f8:	beq	5d540 <Mat_VarReadInfo+0x140>
   5d4fc:	cmp	r0, #256	; 0x100
   5d500:	bne	5d554 <Mat_VarReadInfo+0x154>
   5d504:	mov	r0, r4
   5d508:	bl	56264 <Mat_VarReadNextInfo5>
   5d50c:	mov	r6, r0
   5d510:	cmp	r0, #0
   5d514:	beq	5d554 <Mat_VarReadInfo+0x154>
   5d518:	ldr	r0, [r6, #36]	; 0x24
   5d51c:	cmp	r0, #0
   5d520:	beq	5d534 <Mat_VarReadInfo+0x134>
   5d524:	mov	r1, r5
   5d528:	bl	17b0 <strcmp@plt>
   5d52c:	cmp	r0, #0
   5d530:	beq	5d5b4 <Mat_VarReadInfo+0x1b4>
   5d534:	mov	r0, r6
   5d538:	bl	1918 <Mat_VarFree@plt>
   5d53c:	b	5d564 <Mat_VarReadInfo+0x164>
   5d540:	mov	r0, r4
   5d544:	bl	59d58 <Mat_VarReadNextInfo4>
   5d548:	mov	r6, r0
   5d54c:	cmp	r0, #0
   5d550:	bne	5d518 <Mat_VarReadInfo+0x118>
   5d554:	ldr	r0, [r4]
   5d558:	bl	190c <feof@plt>
   5d55c:	cmp	r0, #0
   5d560:	beq	5d5a4 <Mat_VarReadInfo+0x1a4>
   5d564:	ldr	r0, [r4]
   5d568:	bl	190c <feof@plt>
   5d56c:	cmp	r0, #0
   5d570:	beq	5d4f0 <Mat_VarReadInfo+0xf0>
   5d574:	b	5d5b0 <Mat_VarReadInfo+0x1b0>
   5d578:	ldr	r0, [pc, #96]	; 5d5e0 <Mat_VarReadInfo+0x1e0>
   5d57c:	add	r0, pc, r0
   5d580:	bl	19b4 <Mat_Critical@plt>
   5d584:	mov	r0, r6
   5d588:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   5d58c:	ldr	r0, [pc, #68]	; 5d5d8 <Mat_VarReadInfo+0x1d8>
   5d590:	add	r0, pc, r0
   5d594:	bl	19b4 <Mat_Critical@plt>
   5d598:	mov	r0, r6
   5d59c:	str	r8, [r4, #32]
   5d5a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   5d5a4:	ldr	r0, [pc, #48]	; 5d5dc <Mat_VarReadInfo+0x1dc>
   5d5a8:	add	r0, pc, r0
   5d5ac:	bl	19b4 <Mat_Critical@plt>
   5d5b0:	mov	r6, #0
   5d5b4:	ldr	r0, [r4]
   5d5b8:	mov	r1, r7
   5d5bc:	mov	r2, #0
   5d5c0:	bl	1a2c <fseek@plt>
   5d5c4:	mov	r0, r6
   5d5c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   5d5cc:	mov	r0, r7
   5d5d0:	str	r8, [r4, #32]
   5d5d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   5d5d8:	.word	0x000024d4
   5d5dc:	.word	0x000024bc
   5d5e0:	.word	0x0000225c

0005d5e4 <Mat_VarRead>:
   5d5e4:	push	{r4, r5, r6, r7, fp, lr}
   5d5e8:	add	fp, sp, #16
   5d5ec:	cmp	r0, #0
   5d5f0:	mov	r4, #0
   5d5f4:	movne	r7, r1
   5d5f8:	cmpne	r1, #0
   5d5fc:	bne	5d608 <Mat_VarRead+0x24>
   5d600:	mov	r0, r4
   5d604:	pop	{r4, r5, r6, r7, fp, pc}
   5d608:	mov	r5, r0
   5d60c:	ldr	r0, [r0, #16]
   5d610:	cmp	r0, #512	; 0x200
   5d614:	bne	5d650 <Mat_VarRead+0x6c>
   5d618:	ldr	r6, [r5, #32]
   5d61c:	mov	r0, #0
   5d620:	mov	r1, r7
   5d624:	str	r0, [r5, #32]
   5d628:	mov	r0, r5
   5d62c:	bl	187c <Mat_VarReadInfo@plt>
   5d630:	cmp	r0, #0
   5d634:	mov	r4, r0
   5d638:	ldrne	r0, [r5]
   5d63c:	cmpne	r0, #0
   5d640:	bne	5d6b0 <Mat_VarRead+0xcc>
   5d644:	str	r6, [r5, #32]
   5d648:	mov	r0, r4
   5d64c:	pop	{r4, r5, r6, r7, fp, pc}
   5d650:	ldr	r0, [r5]
   5d654:	bl	1840 <ftell@plt>
   5d658:	cmn	r0, #1
   5d65c:	beq	5d69c <Mat_VarRead+0xb8>
   5d660:	mov	r6, r0
   5d664:	mov	r0, r5
   5d668:	mov	r1, r7
   5d66c:	bl	187c <Mat_VarReadInfo@plt>
   5d670:	cmp	r0, #0
   5d674:	mov	r4, r0
   5d678:	ldrne	r0, [r5]
   5d67c:	cmpne	r0, #0
   5d680:	bne	5d6dc <Mat_VarRead+0xf8>
   5d684:	ldr	r0, [r5]
   5d688:	mov	r1, r6
   5d68c:	mov	r2, #0
   5d690:	bl	1a2c <fseek@plt>
   5d694:	mov	r0, r4
   5d698:	pop	{r4, r5, r6, r7, fp, pc}
   5d69c:	ldr	r0, [pc, #132]	; 5d728 <Mat_VarRead+0x144>
   5d6a0:	add	r0, pc, r0
   5d6a4:	bl	19b4 <Mat_Critical@plt>
   5d6a8:	mov	r0, r4
   5d6ac:	pop	{r4, r5, r6, r7, fp, pc}
   5d6b0:	ldr	r0, [r5, #16]
   5d6b4:	cmp	r0, #16
   5d6b8:	beq	5d700 <Mat_VarRead+0x11c>
   5d6bc:	cmp	r0, #256	; 0x100
   5d6c0:	bne	5d644 <Mat_VarRead+0x60>
   5d6c4:	mov	r0, r5
   5d6c8:	mov	r1, r4
   5d6cc:	bl	29840 <Mat_VarRead5>
   5d6d0:	str	r6, [r5, #32]
   5d6d4:	mov	r0, r4
   5d6d8:	pop	{r4, r5, r6, r7, fp, pc}
   5d6dc:	ldr	r0, [r5, #16]
   5d6e0:	cmp	r0, #16
   5d6e4:	beq	5d718 <Mat_VarRead+0x134>
   5d6e8:	cmp	r0, #256	; 0x100
   5d6ec:	bne	5d684 <Mat_VarRead+0xa0>
   5d6f0:	mov	r0, r5
   5d6f4:	mov	r1, r4
   5d6f8:	bl	29840 <Mat_VarRead5>
   5d6fc:	b	5d684 <Mat_VarRead+0xa0>
   5d700:	mov	r0, r5
   5d704:	mov	r1, r4
   5d708:	bl	590e8 <Mat_VarRead4>
   5d70c:	str	r6, [r5, #32]
   5d710:	mov	r0, r4
   5d714:	pop	{r4, r5, r6, r7, fp, pc}
   5d718:	mov	r0, r5
   5d71c:	mov	r1, r4
   5d720:	bl	590e8 <Mat_VarRead4>
   5d724:	b	5d684 <Mat_VarRead+0xa0>
   5d728:	.word	0x00002138

0005d72c <Mat_VarWriteInfo>:
   5d72c:	push	{fp, lr}
   5d730:	mov	fp, sp
   5d734:	ldr	r0, [r0, #16]
   5d738:	ldr	r2, [pc, #36]	; 5d764 <Mat_VarWriteInfo+0x38>
   5d73c:	ldr	r1, [pc, #36]	; 5d768 <Mat_VarWriteInfo+0x3c>
   5d740:	cmp	r0, #512	; 0x200
   5d744:	ldr	r0, [pc, #32]	; 5d76c <Mat_VarWriteInfo+0x40>
   5d748:	add	r2, pc, r2
   5d74c:	add	r1, pc, r1
   5d750:	moveq	r1, r2
   5d754:	add	r0, pc, r0
   5d758:	bl	19b4 <Mat_Critical@plt>
   5d75c:	mov	r0, #1
   5d760:	pop	{fp, pc}
   5d764:	.word	0x00002c2f
   5d768:	.word	0x00002c4b
   5d76c:	.word	0x00002bdf

0005d770 <Mat_VarWriteData>:
   5d770:	push	{fp, lr}
   5d774:	mov	fp, sp
   5d778:	ldr	r0, [r0, #16]
   5d77c:	ldr	r2, [pc, #36]	; 5d7a8 <Mat_VarWriteData+0x38>
   5d780:	ldr	r1, [pc, #36]	; 5d7ac <Mat_VarWriteData+0x3c>
   5d784:	cmp	r0, #512	; 0x200
   5d788:	ldr	r0, [pc, #32]	; 5d7b0 <Mat_VarWriteData+0x40>
   5d78c:	add	r2, pc, r2
   5d790:	add	r1, pc, r1
   5d794:	moveq	r1, r2
   5d798:	add	r0, pc, r0
   5d79c:	bl	19b4 <Mat_Critical@plt>
   5d7a0:	mov	r0, #1
   5d7a4:	pop	{fp, pc}
   5d7a8:	.word	0x00002beb
   5d7ac:	.word	0x00002c07
   5d7b0:	.word	0x00002b9b

0005d7b4 <Mat_VarWriteAppend>:
   5d7b4:	push	{r4, sl, fp, lr}
   5d7b8:	add	fp, sp, #8
   5d7bc:	sub	sp, sp, #8
   5d7c0:	mov	r4, r0
   5d7c4:	mvn	r0, #0
   5d7c8:	cmp	r4, #0
   5d7cc:	cmpne	r1, #0
   5d7d0:	bne	5d7dc <Mat_VarWriteAppend+0x28>
   5d7d4:	sub	sp, fp, #8
   5d7d8:	pop	{r4, sl, fp, pc}
   5d7dc:	ldr	r0, [r4, #40]	; 0x28
   5d7e0:	cmp	r0, #0
   5d7e4:	bne	5d7fc <Mat_VarWriteAppend+0x48>
   5d7e8:	mov	r0, #0
   5d7ec:	add	r1, sp, #4
   5d7f0:	str	r0, [sp, #4]
   5d7f4:	mov	r0, r4
   5d7f8:	bl	1930 <Mat_GetDir@plt>
   5d7fc:	ldr	r1, [r4, #16]
   5d800:	mov	r0, #2
   5d804:	cmp	r1, #512	; 0x200
   5d808:	movweq	r0, #1
   5d80c:	sub	sp, fp, #8
   5d810:	pop	{r4, sl, fp, pc}

0005d814 <Mat_VarGetCell>:
   5d814:	push	{r4, r5, r6, sl, fp, lr}
   5d818:	add	fp, sp, #16
   5d81c:	sub	sp, sp, #8
   5d820:	mov	r6, r0
   5d824:	mov	r0, #1
   5d828:	mov	r4, #0
   5d82c:	cmp	r6, #0
   5d830:	str	r0, [sp, #4]
   5d834:	beq	5d860 <Mat_VarGetCell+0x4c>
   5d838:	mov	r5, r1
   5d83c:	add	r1, sp, #4
   5d840:	mov	r0, r6
   5d844:	bl	5a144 <SafeMulDims>
   5d848:	cmp	r5, #0
   5d84c:	blt	5d860 <Mat_VarGetCell+0x4c>
   5d850:	ldr	r0, [sp, #4]
   5d854:	cmp	r0, r5
   5d858:	ldrhi	r0, [r6, #40]	; 0x28
   5d85c:	ldrhi	r4, [r0, r5, lsl #2]
   5d860:	mov	r0, r4
   5d864:	sub	sp, fp, #16
   5d868:	pop	{r4, r5, r6, sl, fp, pc}

0005d86c <Mat_VarGetCells>:
   5d86c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5d870:	add	fp, sp, #28
   5d874:	sub	sp, sp, #172	; 0xac
   5d878:	mov	r8, r2
   5d87c:	sub	r2, fp, #72	; 0x48
   5d880:	vmov.i32	q8, #0	; 0x00000000
   5d884:	add	r9, sp, #88	; 0x58
   5d888:	mov	r7, #36	; 0x24
   5d88c:	mov	r5, r0
   5d890:	mov	r0, #0
   5d894:	mov	r6, r2
   5d898:	add	r2, r2, #16
   5d89c:	cmp	r5, #0
   5d8a0:	str	r0, [fp, #-40]	; 0xffffffd8
   5d8a4:	str	r0, [sp, #120]	; 0x78
   5d8a8:	str	r0, [sp, #80]	; 0x50
   5d8ac:	vst1.64	{d16-d17}, [r2]
   5d8b0:	add	r2, r9, #16
   5d8b4:	vst1.64	{d16-d17}, [r6], r7
   5d8b8:	cmpne	r1, #0
   5d8bc:	vst1.64	{d16-d17}, [r2]
   5d8c0:	mov	r2, r9
   5d8c4:	str	r0, [r6]
   5d8c8:	vst1.64	{d16-d17}, [r2], r7
   5d8cc:	str	r0, [r2]
   5d8d0:	add	r2, sp, #48	; 0x30
   5d8d4:	add	r6, r2, #16
   5d8d8:	vst1.64	{d16-d17}, [r2], r7
   5d8dc:	vst1.64	{d16-d17}, [r6]
   5d8e0:	str	r0, [r2]
   5d8e4:	beq	5d8f4 <Mat_VarGetCells+0x88>
   5d8e8:	cmp	r8, #0
   5d8ec:	cmpne	r3, #0
   5d8f0:	bne	5d8fc <Mat_VarGetCells+0x90>
   5d8f4:	sub	sp, fp, #28
   5d8f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5d8fc:	ldr	r2, [r5, #4]
   5d900:	cmp	r2, #9
   5d904:	bgt	5d8f4 <Mat_VarGetCells+0x88>
   5d908:	ldr	r6, [r5, #32]
   5d90c:	str	r5, [sp, #32]
   5d910:	cmp	r2, #2
   5d914:	str	r3, [sp, #44]	; 0x2c
   5d918:	str	r1, [sp, #40]	; 0x28
   5d91c:	str	r2, [sp, #16]
   5d920:	ldr	r4, [r6]
   5d924:	str	r4, [sp, #48]	; 0x30
   5d928:	ldr	r0, [r3]
   5d92c:	ldr	sl, [r1]
   5d930:	mov	r5, r0
   5d934:	str	sl, [fp, #-72]	; 0xffffffb8
   5d938:	str	r0, [sp, #12]
   5d93c:	str	sl, [sp, #36]	; 0x24
   5d940:	blt	5d9ac <Mat_VarGetCells+0x140>
   5d944:	ldr	r1, [sp, #40]	; 0x28
   5d948:	mvn	r0, #3
   5d94c:	add	r2, r0, r2, lsl #2
   5d950:	sub	r0, fp, #72	; 0x48
   5d954:	orr	r0, r0, #4
   5d958:	add	r7, r1, #4
   5d95c:	mov	r1, r7
   5d960:	bl	181c <memcpy@plt>
   5d964:	ldr	r0, [sp, #16]
   5d968:	ldr	r1, [sp, #44]	; 0x2c
   5d96c:	ldr	sl, [sp, #36]	; 0x24
   5d970:	ldr	r5, [sp, #12]
   5d974:	add	r2, sp, #48	; 0x30
   5d978:	add	r3, r6, #4
   5d97c:	orr	r2, r2, #4
   5d980:	sub	r0, r0, #1
   5d984:	add	r1, r1, #4
   5d988:	ldr	r6, [r7], #4
   5d98c:	subs	r0, r0, #1
   5d990:	mla	sl, r4, r6, sl
   5d994:	ldr	r6, [r3], #4
   5d998:	mul	r4, r6, r4
   5d99c:	str	r4, [r2], #4
   5d9a0:	ldr	r6, [r1], #4
   5d9a4:	mul	r5, r6, r5
   5d9a8:	bne	5d988 <Mat_VarGetCells+0x11c>
   5d9ac:	lsl	r0, r5, #2
   5d9b0:	bl	18d0 <malloc@plt>
   5d9b4:	cmp	r5, #1
   5d9b8:	blt	5d8f4 <Mat_VarGetCells+0x88>
   5d9bc:	ldr	r4, [sp, #16]
   5d9c0:	ldr	r7, [sp, #12]
   5d9c4:	ldr	r2, [r8, #4]
   5d9c8:	str	r0, [sp]
   5d9cc:	str	r5, [sp, #24]
   5d9d0:	sub	r1, r4, #1
   5d9d4:	cmp	r7, #0
   5d9d8:	str	r2, [sp, #20]
   5d9dc:	ble	5db6c <Mat_VarGetCells+0x300>
   5d9e0:	mov	ip, r7
   5d9e4:	lsl	r7, r7, #2
   5d9e8:	ldr	r2, [sp, #44]	; 0x2c
   5d9ec:	mov	r6, r0
   5d9f0:	mov	r0, #0
   5d9f4:	str	r7, [sp, #8]
   5d9f8:	ldr	r7, [sp, #32]
   5d9fc:	add	r3, r2, #4
   5da00:	ldr	r2, [sp, #40]	; 0x28
   5da04:	ldr	r7, [r7, #40]	; 0x28
   5da08:	add	r2, r2, #4
   5da0c:	str	r7, [sp, #4]
   5da10:	ldr	r7, [r8], #8
   5da14:	str	r2, [sp, #44]	; 0x2c
   5da18:	sub	r2, r4, #2
   5da1c:	lsl	lr, r7, #2
   5da20:	mov	r7, ip
   5da24:	str	r8, [sp, #40]	; 0x28
   5da28:	str	r0, [sp, #28]
   5da2c:	ldr	r0, [sp, #4]
   5da30:	mov	ip, r4
   5da34:	mov	r5, r7
   5da38:	mov	r4, r7
   5da3c:	str	r6, [sp, #32]
   5da40:	add	r0, r0, sl, lsl #2
   5da44:	ldr	r7, [r0], lr
   5da48:	subs	r4, r4, #1
   5da4c:	str	r7, [r6], #4
   5da50:	bne	5da44 <Mat_VarGetCells+0x1d8>
   5da54:	ldr	sl, [sp, #36]	; 0x24
   5da58:	ldr	r0, [sp, #92]	; 0x5c
   5da5c:	ldr	r4, [sp, #20]
   5da60:	cmp	ip, #2
   5da64:	mov	r7, r5
   5da68:	str	sl, [fp, #-72]	; 0xffffffb8
   5da6c:	add	r8, r0, #1
   5da70:	ldr	r0, [fp, #-68]	; 0xffffffbc
   5da74:	str	r8, [sp, #92]	; 0x5c
   5da78:	add	r0, r0, r4
   5da7c:	mov	r4, ip
   5da80:	str	r0, [fp, #-68]	; 0xffffffbc
   5da84:	blt	5db48 <Mat_VarGetCells+0x2dc>
   5da88:	ldr	sl, [sp, #36]	; 0x24
   5da8c:	mov	ip, #0
   5da90:	add	r7, sp, #48	; 0x30
   5da94:	ldr	r0, [r3, ip, lsl #2]
   5da98:	add	r6, ip, #1
   5da9c:	cmp	r8, r0
   5daa0:	beq	5dac4 <Mat_VarGetCells+0x258>
   5daa4:	b	5db24 <Mat_VarGetCells+0x2b8>
   5daa8:	add	r0, r9, ip, lsl #2
   5daac:	mov	ip, r6
   5dab0:	ldr	r8, [r0, #8]
   5dab4:	ldr	r0, [r3, ip, lsl #2]
   5dab8:	add	r6, ip, #1
   5dabc:	cmp	r8, r0
   5dac0:	bne	5db24 <Mat_VarGetCells+0x2b8>
   5dac4:	add	r5, r9, ip, lsl #2
   5dac8:	mov	r0, #0
   5dacc:	sub	r4, fp, #72	; 0x48
   5dad0:	cmp	r6, r1
   5dad4:	str	r0, [r5, #4]
   5dad8:	ldr	r0, [sp, #44]	; 0x2c
   5dadc:	add	r4, r4, ip, lsl #2
   5dae0:	ldr	r0, [r0, ip, lsl #2]
   5dae4:	str	r0, [r4, #4]
   5dae8:	bge	5db10 <Mat_VarGetCells+0x2a4>
   5daec:	ldr	r7, [r5, #8]
   5daf0:	add	r7, r7, #1
   5daf4:	str	r7, [r5, #8]
   5daf8:	ldr	r5, [sp, #40]	; 0x28
   5dafc:	ldr	r7, [r4, #8]
   5db00:	ldr	r5, [r5, ip, lsl #2]
   5db04:	add	r5, r7, r5
   5db08:	add	r7, sp, #48	; 0x30
   5db0c:	str	r5, [r4, #8]
   5db10:	ldr	r4, [r7, ip, lsl #2]
   5db14:	cmp	r2, ip
   5db18:	mla	sl, r4, r0, sl
   5db1c:	bne	5daa8 <Mat_VarGetCells+0x23c>
   5db20:	b	5db40 <Mat_VarGetCells+0x2d4>
   5db24:	sub	r0, fp, #72	; 0x48
   5db28:	add	r0, r0, ip, lsl #2
   5db2c:	ldr	r0, [r0, #4]
   5db30:	ldr	r4, [r7, ip, lsl #2]
   5db34:	cmp	r2, ip
   5db38:	mla	sl, r4, r0, sl
   5db3c:	bne	5daa8 <Mat_VarGetCells+0x23c>
   5db40:	ldr	r4, [sp, #16]
   5db44:	ldr	r7, [sp, #12]
   5db48:	ldr	r0, [sp, #8]
   5db4c:	ldr	r6, [sp, #32]
   5db50:	ldr	r5, [sp, #24]
   5db54:	add	r6, r6, r0
   5db58:	ldr	r0, [sp, #28]
   5db5c:	add	r0, r0, r7
   5db60:	cmp	r0, r5
   5db64:	blt	5da28 <Mat_VarGetCells+0x1bc>
   5db68:	b	5dc50 <Mat_VarGetCells+0x3e4>
   5db6c:	ldr	r2, [sp, #40]	; 0x28
   5db70:	add	ip, r8, #8
   5db74:	sub	r0, r4, #2
   5db78:	mov	lr, #0
   5db7c:	mov	r8, #0
   5db80:	add	sl, r2, #4
   5db84:	ldr	r2, [sp, #44]	; 0x2c
   5db88:	add	r5, r2, #4
   5db8c:	mov	r2, #0
   5db90:	b	5db98 <Mat_VarGetCells+0x32c>
   5db94:	ldr	r2, [sp, #92]	; 0x5c
   5db98:	ldr	r3, [sp, #36]	; 0x24
   5db9c:	ldr	r4, [sp, #20]
   5dba0:	add	r2, r2, #1
   5dba4:	str	r2, [sp, #92]	; 0x5c
   5dba8:	str	r3, [fp, #-72]	; 0xffffffb8
   5dbac:	ldr	r3, [fp, #-68]	; 0xffffffbc
   5dbb0:	add	r3, r3, r4
   5dbb4:	str	r3, [fp, #-68]	; 0xffffffbc
   5dbb8:	ldr	r3, [sp, #16]
   5dbbc:	cmp	r3, #2
   5dbc0:	blt	5dc3c <Mat_VarGetCells+0x3d0>
   5dbc4:	mov	r6, #0
   5dbc8:	ldr	r3, [r5, r6, lsl #2]
   5dbcc:	add	r4, r6, #1
   5dbd0:	cmp	r2, r3
   5dbd4:	bne	5dc34 <Mat_VarGetCells+0x3c8>
   5dbd8:	b	5dbf8 <Mat_VarGetCells+0x38c>
   5dbdc:	add	r2, r9, r6, lsl #2
   5dbe0:	mov	r6, r4
   5dbe4:	ldr	r2, [r2, #8]
   5dbe8:	ldr	r3, [r5, r6, lsl #2]
   5dbec:	add	r4, r6, #1
   5dbf0:	cmp	r2, r3
   5dbf4:	bne	5dc34 <Mat_VarGetCells+0x3c8>
   5dbf8:	add	r3, r9, r6, lsl #2
   5dbfc:	sub	r2, fp, #72	; 0x48
   5dc00:	cmp	r4, r1
   5dc04:	str	lr, [r3, #4]
   5dc08:	add	r2, r2, r6, lsl #2
   5dc0c:	ldr	r7, [sl, r6, lsl #2]
   5dc10:	str	r7, [r2, #4]
   5dc14:	bge	5dc34 <Mat_VarGetCells+0x3c8>
   5dc18:	ldr	r7, [r3, #8]
   5dc1c:	add	r7, r7, #1
   5dc20:	str	r7, [r3, #8]
   5dc24:	ldr	r7, [r2, #8]
   5dc28:	ldr	r3, [ip, r6, lsl #2]
   5dc2c:	add	r3, r7, r3
   5dc30:	str	r3, [r2, #8]
   5dc34:	cmp	r0, r6
   5dc38:	bne	5dbdc <Mat_VarGetCells+0x370>
   5dc3c:	ldr	r2, [sp, #12]
   5dc40:	add	r8, r8, r2
   5dc44:	ldr	r2, [sp, #24]
   5dc48:	cmp	r8, r2
   5dc4c:	blt	5db94 <Mat_VarGetCells+0x328>
   5dc50:	ldr	r0, [sp]
   5dc54:	sub	sp, fp, #28
   5dc58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0005dc5c <Mat_VarGetCellsLinear>:
   5dc5c:	push	{r4, r5, r6, r7, fp, lr}
   5dc60:	add	fp, sp, #16
   5dc64:	cmp	r0, #0
   5dc68:	moveq	r0, #0
   5dc6c:	popeq	{r4, r5, r6, r7, fp, pc}
   5dc70:	mov	r7, r0
   5dc74:	lsl	r0, r3, #2
   5dc78:	mov	r4, r3
   5dc7c:	mov	r5, r2
   5dc80:	mov	r6, r1
   5dc84:	bl	18d0 <malloc@plt>
   5dc88:	cmp	r4, #1
   5dc8c:	poplt	{r4, r5, r6, r7, fp, pc}
   5dc90:	ldr	r1, [r7, #40]	; 0x28
   5dc94:	lsl	r2, r5, #2
   5dc98:	mov	r3, r0
   5dc9c:	add	r1, r1, r6, lsl #2
   5dca0:	ldr	r7, [r1], r2
   5dca4:	subs	r4, r4, #1
   5dca8:	str	r7, [r3], #4
   5dcac:	bne	5dca0 <Mat_VarGetCellsLinear+0x44>
   5dcb0:	pop	{r4, r5, r6, r7, fp, pc}

0005dcb4 <Mat_VarSetCell>:
   5dcb4:	push	{r4, r5, r6, r7, fp, lr}
   5dcb8:	add	fp, sp, #16
   5dcbc:	sub	sp, sp, #8
   5dcc0:	mov	r7, r0
   5dcc4:	mov	r0, #1
   5dcc8:	mov	r4, #0
   5dccc:	cmp	r7, #0
   5dcd0:	str	r0, [sp, #4]
   5dcd4:	beq	5dd14 <Mat_VarSetCell+0x60>
   5dcd8:	ldr	r0, [r7, #4]
   5dcdc:	cmp	r0, #1
   5dce0:	blt	5dd14 <Mat_VarSetCell+0x60>
   5dce4:	mov	r6, r1
   5dce8:	add	r1, sp, #4
   5dcec:	mov	r0, r7
   5dcf0:	mov	r5, r2
   5dcf4:	bl	5a144 <SafeMulDims>
   5dcf8:	cmp	r6, #0
   5dcfc:	blt	5dd14 <Mat_VarSetCell+0x60>
   5dd00:	ldr	r0, [sp, #4]
   5dd04:	cmp	r0, r6
   5dd08:	ldrhi	r0, [r7, #40]	; 0x28
   5dd0c:	ldrhi	r4, [r0, r6, lsl #2]
   5dd10:	strhi	r5, [r0, r6, lsl #2]
   5dd14:	mov	r0, r4
   5dd18:	sub	sp, fp, #16
   5dd1c:	pop	{r4, r5, r6, r7, fp, pc}

0005dd20 <Mat_VarCreateStruct>:
   5dd20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5dd24:	add	fp, sp, #28
   5dd28:	sub	sp, sp, #4
   5dd2c:	mov	r5, #0
   5dd30:	cmp	r2, #0
   5dd34:	beq	5de60 <Mat_VarCreateStruct+0x140>
   5dd38:	mov	r9, r3
   5dd3c:	mov	r6, r2
   5dd40:	mov	sl, r1
   5dd44:	mov	r7, r0
   5dd48:	bl	18a0 <Mat_VarCalloc@plt>
   5dd4c:	cmp	r0, #0
   5dd50:	beq	5de60 <Mat_VarCreateStruct+0x140>
   5dd54:	mov	r4, r0
   5dd58:	mov	r0, #0
   5dd5c:	cmp	r7, #0
   5dd60:	str	r0, [r4, #48]	; 0x30
   5dd64:	beq	5dd74 <Mat_VarCreateStruct+0x54>
   5dd68:	mov	r0, r7
   5dd6c:	bl	1864 <strdup@plt>
   5dd70:	str	r0, [r4, #36]	; 0x24
   5dd74:	ldr	r8, [fp, #8]
   5dd78:	lsl	r0, sl, #2
   5dd7c:	str	sl, [r4, #4]
   5dd80:	bl	18d0 <malloc@plt>
   5dd84:	str	r0, [r4, #32]
   5dd88:	mov	r7, #1
   5dd8c:	ldr	r1, [r4, #4]
   5dd90:	cmp	r1, #1
   5dd94:	blt	5ddb8 <Mat_VarCreateStruct+0x98>
   5dd98:	mov	r1, #0
   5dd9c:	ldr	r2, [r6, r1, lsl #2]
   5dda0:	str	r2, [r0, r1, lsl #2]
   5dda4:	mul	r7, r2, r7
   5dda8:	add	r1, r1, #1
   5ddac:	ldr	r2, [r4, #4]
   5ddb0:	cmp	r1, r2
   5ddb4:	blt	5dd9c <Mat_VarCreateStruct+0x7c>
   5ddb8:	mov	r0, #22
   5ddbc:	cmp	r8, #0
   5ddc0:	mov	r1, #2
   5ddc4:	mov	r2, #4
   5ddc8:	str	r0, [r4, #8]
   5ddcc:	str	r2, [r4, #12]
   5ddd0:	str	r1, [r4, #16]
   5ddd4:	beq	5de5c <Mat_VarCreateStruct+0x13c>
   5ddd8:	ldr	r0, [r4, #52]	; 0x34
   5dddc:	str	r8, [r0, #4]
   5dde0:	lsl	r0, r8, #2
   5dde4:	bl	18d0 <malloc@plt>
   5dde8:	ldr	r1, [r4, #52]	; 0x34
   5ddec:	cmp	r0, #0
   5ddf0:	str	r0, [r1, #8]
   5ddf4:	beq	5de6c <Mat_VarCreateStruct+0x14c>
   5ddf8:	mov	r5, #0
   5ddfc:	ldr	r0, [r9, r5, lsl #2]
   5de00:	cmp	r0, #0
   5de04:	beq	5de6c <Mat_VarCreateStruct+0x14c>
   5de08:	bl	1864 <strdup@plt>
   5de0c:	ldr	r1, [r4, #52]	; 0x34
   5de10:	ldr	r1, [r1, #8]
   5de14:	str	r0, [r1, r5, lsl #2]
   5de18:	add	r5, r5, #1
   5de1c:	cmp	r5, r8
   5de20:	bcc	5ddfc <Mat_VarCreateStruct+0xdc>
   5de24:	cmp	r7, #0
   5de28:	beq	5de5c <Mat_VarCreateStruct+0x13c>
   5de2c:	mov	r0, sp
   5de30:	mov	r1, r7
   5de34:	mov	r2, r8
   5de38:	bl	5a1a4 <SafeMul>
   5de3c:	ldr	r2, [r4, #12]
   5de40:	ldr	r1, [sp]
   5de44:	mov	r0, r4
   5de48:	bl	5a1a4 <SafeMul>
   5de4c:	ldr	r1, [r4, #12]
   5de50:	ldr	r0, [sp]
   5de54:	bl	1798 <calloc@plt>
   5de58:	str	r0, [r4, #40]	; 0x28
   5de5c:	mov	r5, r4
   5de60:	mov	r0, r5
   5de64:	sub	sp, fp, #28
   5de68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5de6c:	mov	r0, r4
   5de70:	bl	1918 <Mat_VarFree@plt>
   5de74:	mov	r5, #0
   5de78:	mov	r0, r5
   5de7c:	sub	sp, fp, #28
   5de80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0005de84 <Mat_VarAddStructField>:
   5de84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5de88:	add	fp, sp, #28
   5de8c:	sub	sp, sp, #36	; 0x24
   5de90:	mov	r4, r0
   5de94:	mov	r0, #1
   5de98:	mvn	r8, #0
   5de9c:	cmp	r4, #0
   5dea0:	str	r0, [sp, #32]
   5dea4:	movne	r5, r1
   5dea8:	cmpne	r1, #0
   5deac:	bne	5debc <Mat_VarAddStructField+0x38>
   5deb0:	mov	r0, r8
   5deb4:	sub	sp, fp, #28
   5deb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5debc:	add	r1, sp, #32
   5dec0:	mov	r0, r4
   5dec4:	bl	5a144 <SafeMulDims>
   5dec8:	ldr	r1, [r4, #52]	; 0x34
   5decc:	ldr	r6, [r1, #4]
   5ded0:	ldr	r0, [r1, #8]
   5ded4:	add	r7, r6, #1
   5ded8:	str	r7, [r1, #4]
   5dedc:	lsl	r1, r7, #2
   5dee0:	bl	1870 <realloc@plt>
   5dee4:	cmp	r0, #0
   5dee8:	beq	5deb0 <Mat_VarAddStructField+0x2c>
   5deec:	ldr	r1, [r4, #52]	; 0x34
   5def0:	str	r0, [r1, #8]
   5def4:	mov	r0, r5
   5def8:	bl	1864 <strdup@plt>
   5defc:	ldr	r1, [r4, #52]	; 0x34
   5df00:	mov	r2, r7
   5df04:	ldr	r1, [r1, #8]
   5df08:	str	r0, [r1, r6, lsl #2]
   5df0c:	add	r0, sp, #28
   5df10:	ldr	r1, [sp, #32]
   5df14:	bl	5a1a4 <SafeMul>
   5df18:	ldr	r1, [sp, #28]
   5df1c:	mov	r0, r4
   5df20:	mov	r2, #4
   5df24:	bl	5a1a4 <SafeMul>
   5df28:	ldr	r0, [r4]
   5df2c:	bl	18d0 <malloc@plt>
   5df30:	cmp	r0, #0
   5df34:	str	r0, [sp, #24]
   5df38:	beq	5e07c <Mat_VarAddStructField+0x1f8>
   5df3c:	ldr	r0, [r4, #40]	; 0x28
   5df40:	str	r4, [sp]
   5df44:	str	r0, [sp, #12]
   5df48:	ldr	r0, [sp, #32]
   5df4c:	cmp	r0, #0
   5df50:	str	r0, [sp, #16]
   5df54:	beq	5e0ac <Mat_VarAddStructField+0x228>
   5df58:	cmp	r6, #0
   5df5c:	beq	5e090 <Mat_VarAddStructField+0x20c>
   5df60:	mov	r0, #4
   5df64:	ldr	r7, [sp, #24]
   5df68:	ldr	r3, [sp, #12]
   5df6c:	mov	ip, #0
   5df70:	mov	r4, #0
   5df74:	add	r5, r0, r6, lsl #2
   5df78:	bic	r0, r6, #3
   5df7c:	str	r0, [sp, #4]
   5df80:	lsl	r0, r6, #2
   5df84:	str	r0, [sp, #20]
   5df88:	sub	r0, r6, #1
   5df8c:	str	r0, [sp, #8]
   5df90:	ldr	r0, [sp, #8]
   5df94:	cmp	r6, #4
   5df98:	mov	r9, #0
   5df9c:	mov	lr, ip
   5dfa0:	add	r8, r0, ip
   5dfa4:	bcc	5e02c <Mat_VarAddStructField+0x1a8>
   5dfa8:	ldr	r1, [sp, #24]
   5dfac:	mul	r2, r5, r4
   5dfb0:	mov	sl, r5
   5dfb4:	ldr	r5, [sp, #12]
   5dfb8:	mul	r0, r6, r4
   5dfbc:	add	lr, r1, r2
   5dfc0:	add	r1, r6, r0
   5dfc4:	add	r1, r5, r1, lsl #2
   5dfc8:	cmp	lr, r1
   5dfcc:	bcs	5dffc <Mat_VarAddStructField+0x178>
   5dfd0:	ldr	r1, [sp, #12]
   5dfd4:	mov	r5, sl
   5dfd8:	mov	r9, #0
   5dfdc:	mov	lr, ip
   5dfe0:	add	r0, r1, r0, lsl #2
   5dfe4:	ldr	r1, [sp, #20]
   5dfe8:	add	r1, r1, r2
   5dfec:	ldr	r2, [sp, #24]
   5dff0:	add	r1, r2, r1
   5dff4:	cmp	r1, r0
   5dff8:	bhi	5e02c <Mat_VarAddStructField+0x1a8>
   5dffc:	ldr	r0, [sp, #4]
   5e000:	mov	r5, r7
   5e004:	mov	r2, r3
   5e008:	add	lr, ip, r0
   5e00c:	vld1.32	{d16-d17}, [r2]!
   5e010:	subs	r0, r0, #4
   5e014:	vst1.32	{d16-d17}, [r5]!
   5e018:	bne	5e00c <Mat_VarAddStructField+0x188>
   5e01c:	ldr	r9, [sp, #4]
   5e020:	mov	r5, sl
   5e024:	cmp	r6, r9
   5e028:	beq	5e048 <Mat_VarAddStructField+0x1c4>
   5e02c:	ldr	r0, [sp, #24]
   5e030:	add	r0, r0, lr, lsl #2
   5e034:	ldr	r1, [r3, r9, lsl #2]
   5e038:	add	r9, r9, #1
   5e03c:	cmp	r6, r9
   5e040:	str	r1, [r0], #4
   5e044:	bne	5e034 <Mat_VarAddStructField+0x1b0>
   5e048:	ldr	r1, [sp, #24]
   5e04c:	add	r0, r6, ip
   5e050:	mov	r2, #0
   5e054:	add	r4, r4, #1
   5e058:	add	r7, r7, r5
   5e05c:	add	ip, r8, #2
   5e060:	str	r2, [r1, r0, lsl #2]
   5e064:	ldr	r0, [sp, #20]
   5e068:	add	r3, r3, r0
   5e06c:	ldr	r0, [sp, #16]
   5e070:	cmp	r4, r0
   5e074:	bcc	5df90 <Mat_VarAddStructField+0x10c>
   5e078:	b	5e0ac <Mat_VarAddStructField+0x228>
   5e07c:	mov	r0, #0
   5e080:	str	r0, [r4]
   5e084:	mov	r0, r8
   5e088:	sub	sp, fp, #28
   5e08c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5e090:	ldr	r0, [sp, #16]
   5e094:	mov	r1, #0
   5e098:	cmp	r0, #1
   5e09c:	movls	r0, #1
   5e0a0:	lsl	r2, r0, #2
   5e0a4:	ldr	r0, [sp, #24]
   5e0a8:	bl	1990 <memset@plt>
   5e0ac:	ldr	r0, [sp, #12]
   5e0b0:	bl	1804 <free@plt>
   5e0b4:	ldr	r0, [sp]
   5e0b8:	ldr	r1, [sp, #24]
   5e0bc:	mov	r8, #0
   5e0c0:	str	r1, [r0, #40]	; 0x28
   5e0c4:	mov	r0, r8
   5e0c8:	sub	sp, fp, #28
   5e0cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0005e0d0 <Mat_VarGetNumberOfFields>:
   5e0d0:	mov	r1, r0
   5e0d4:	mov	r0, #0
   5e0d8:	cmp	r1, #0
   5e0dc:	bxeq	lr
   5e0e0:	ldr	r2, [r1, #16]
   5e0e4:	cmp	r2, #2
   5e0e8:	bne	5e0f8 <Mat_VarGetNumberOfFields+0x28>
   5e0ec:	ldr	r1, [r1, #52]	; 0x34
   5e0f0:	cmp	r1, #0
   5e0f4:	ldrne	r0, [r1, #4]
   5e0f8:	bx	lr

0005e0fc <Mat_VarGetStructFieldnames>:
   5e0fc:	mov	r1, r0
   5e100:	mov	r0, #0
   5e104:	cmp	r1, #0
   5e108:	bxeq	lr
   5e10c:	ldr	r2, [r1, #16]
   5e110:	cmp	r2, #2
   5e114:	bne	5e124 <Mat_VarGetStructFieldnames+0x28>
   5e118:	ldr	r1, [r1, #52]	; 0x34
   5e11c:	cmp	r1, #0
   5e120:	ldrne	r0, [r1, #8]
   5e124:	bx	lr

0005e128 <Mat_VarGetStructFieldByIndex>:
   5e128:	push	{r4, r5, r6, r7, fp, lr}
   5e12c:	add	fp, sp, #16
   5e130:	sub	sp, sp, #8
   5e134:	mov	r7, r0
   5e138:	mov	r0, #1
   5e13c:	mov	r4, #0
   5e140:	cmp	r7, #0
   5e144:	str	r0, [sp, #4]
   5e148:	beq	5e1c4 <Mat_VarGetStructFieldByIndex+0x9c>
   5e14c:	ldr	r0, [r7, #16]
   5e150:	cmp	r0, #2
   5e154:	bne	5e1c4 <Mat_VarGetStructFieldByIndex+0x9c>
   5e158:	ldr	r0, [r7, #12]
   5e15c:	cmp	r0, #0
   5e160:	beq	5e1c4 <Mat_VarGetStructFieldByIndex+0x9c>
   5e164:	mov	r5, r1
   5e168:	add	r1, sp, #4
   5e16c:	mov	r0, r7
   5e170:	mov	r6, r2
   5e174:	bl	5a144 <SafeMulDims>
   5e178:	ldr	r0, [sp, #4]
   5e17c:	sub	r0, r0, #1
   5e180:	cmp	r0, r6
   5e184:	bcs	5e1a0 <Mat_VarGetStructFieldByIndex+0x78>
   5e188:	ldr	r0, [pc, #92]	; 5e1ec <Mat_VarGetStructFieldByIndex+0xc4>
   5e18c:	add	r0, pc, r0
   5e190:	bl	19b4 <Mat_Critical@plt>
   5e194:	mov	r0, r4
   5e198:	sub	sp, fp, #16
   5e19c:	pop	{r4, r5, r6, r7, fp, pc}
   5e1a0:	ldr	r0, [r7, #52]	; 0x34
   5e1a4:	ldr	r0, [r0, #4]
   5e1a8:	cmp	r0, #0
   5e1ac:	beq	5e1c4 <Mat_VarGetStructFieldByIndex+0x9c>
   5e1b0:	cmp	r0, r5
   5e1b4:	bcs	5e1d0 <Mat_VarGetStructFieldByIndex+0xa8>
   5e1b8:	ldr	r0, [pc, #48]	; 5e1f0 <Mat_VarGetStructFieldByIndex+0xc8>
   5e1bc:	add	r0, pc, r0
   5e1c0:	bl	19b4 <Mat_Critical@plt>
   5e1c4:	mov	r0, r4
   5e1c8:	sub	sp, fp, #16
   5e1cc:	pop	{r4, r5, r6, r7, fp, pc}
   5e1d0:	ldr	r1, [r7, #40]	; 0x28
   5e1d4:	mul	r0, r0, r6
   5e1d8:	add	r0, r1, r0, lsl #2
   5e1dc:	ldr	r4, [r0, r5, lsl #2]
   5e1e0:	mov	r0, r4
   5e1e4:	sub	sp, fp, #16
   5e1e8:	pop	{r4, r5, r6, r7, fp, pc}
   5e1ec:	.word	0x0000239c
   5e1f0:	.word	0x000023a1

0005e1f4 <Mat_VarGetStructFieldByName>:
   5e1f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5e1f8:	add	fp, sp, #28
   5e1fc:	sub	sp, sp, #4
   5e200:	mov	r6, r0
   5e204:	mov	r0, #1
   5e208:	mov	sl, #0
   5e20c:	cmp	r6, #0
   5e210:	str	r0, [sp]
   5e214:	beq	5e2a4 <Mat_VarGetStructFieldByName+0xb0>
   5e218:	ldr	r0, [r6, #16]
   5e21c:	cmp	r0, #2
   5e220:	bne	5e2a4 <Mat_VarGetStructFieldByName+0xb0>
   5e224:	ldr	r0, [r6, #12]
   5e228:	cmp	r0, #0
   5e22c:	beq	5e2a4 <Mat_VarGetStructFieldByName+0xb0>
   5e230:	mov	r7, r1
   5e234:	mov	r1, sp
   5e238:	mov	r0, r6
   5e23c:	mov	r9, r2
   5e240:	bl	5a144 <SafeMulDims>
   5e244:	ldr	r0, [r6, #52]	; 0x34
   5e248:	mvn	r4, #0
   5e24c:	ldr	r5, [r0, #4]
   5e250:	cmp	r5, #1
   5e254:	blt	5e284 <Mat_VarGetStructFieldByName+0x90>
   5e258:	ldr	r8, [r0, #8]
   5e25c:	mov	r4, #0
   5e260:	ldr	r0, [r8, r4, lsl #2]
   5e264:	mov	r1, r7
   5e268:	bl	17b0 <strcmp@plt>
   5e26c:	cmp	r0, #0
   5e270:	beq	5e284 <Mat_VarGetStructFieldByName+0x90>
   5e274:	add	r4, r4, #1
   5e278:	cmp	r4, r5
   5e27c:	blt	5e260 <Mat_VarGetStructFieldByName+0x6c>
   5e280:	mvn	r4, #0
   5e284:	ldr	r0, [sp]
   5e288:	cmp	r0, r9
   5e28c:	bls	5e2b0 <Mat_VarGetStructFieldByName+0xbc>
   5e290:	cmp	r4, #0
   5e294:	ldrge	r1, [r6, #40]	; 0x28
   5e298:	mulge	r0, r5, r9
   5e29c:	addge	r0, r1, r0, lsl #2
   5e2a0:	ldrge	sl, [r0, r4, lsl #2]
   5e2a4:	mov	r0, sl
   5e2a8:	sub	sp, fp, #28
   5e2ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5e2b0:	ldr	r0, [pc, #16]	; 5e2c8 <Mat_VarGetStructFieldByName+0xd4>
   5e2b4:	add	r0, pc, r0
   5e2b8:	bl	19b4 <Mat_Critical@plt>
   5e2bc:	mov	r0, sl
   5e2c0:	sub	sp, fp, #28
   5e2c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5e2c8:	.word	0x00002274

0005e2cc <Mat_VarGetStructField>:
   5e2cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5e2d0:	add	fp, sp, #28
   5e2d4:	sub	sp, sp, #12
   5e2d8:	mov	r6, r0
   5e2dc:	mov	r0, #1
   5e2e0:	mov	r7, r1
   5e2e4:	mov	r1, sp
   5e2e8:	mov	r5, r3
   5e2ec:	mov	r4, r2
   5e2f0:	str	r0, [sp]
   5e2f4:	mov	r0, r6
   5e2f8:	bl	5a144 <SafeMulDims>
   5e2fc:	mov	r8, #0
   5e300:	cmp	r5, #0
   5e304:	blt	5e318 <Mat_VarGetStructField+0x4c>
   5e308:	ldr	r0, [sp]
   5e30c:	sub	r0, r0, #1
   5e310:	cmp	r0, r5
   5e314:	bcs	5e324 <Mat_VarGetStructField+0x58>
   5e318:	mov	r0, r8
   5e31c:	sub	sp, fp, #28
   5e320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5e324:	ldr	r0, [r6, #52]	; 0x34
   5e328:	cmp	r4, #2
   5e32c:	ldr	r0, [r0, #4]
   5e330:	bne	5e3bc <Mat_VarGetStructField+0xf0>
   5e334:	cmp	r0, #1
   5e338:	blt	5e3bc <Mat_VarGetStructField+0xf0>
   5e33c:	ldr	r4, [r7]
   5e340:	cmp	r4, #0
   5e344:	beq	5e318 <Mat_VarGetStructField+0x4c>
   5e348:	mov	r0, #1
   5e34c:	mov	r8, #0
   5e350:	str	r0, [sp, #4]
   5e354:	ldr	r0, [r6, #16]
   5e358:	cmp	r0, #2
   5e35c:	bne	5e318 <Mat_VarGetStructField+0x4c>
   5e360:	ldr	r0, [r6, #12]
   5e364:	cmp	r0, #0
   5e368:	beq	5e318 <Mat_VarGetStructField+0x4c>
   5e36c:	add	r1, sp, #4
   5e370:	mov	r0, r6
   5e374:	bl	5a144 <SafeMulDims>
   5e378:	ldr	r0, [sp, #4]
   5e37c:	sub	r0, r0, #1
   5e380:	cmp	r0, r5
   5e384:	bcc	5e468 <Mat_VarGetStructField+0x19c>
   5e388:	ldr	r0, [r6, #52]	; 0x34
   5e38c:	ldr	r0, [r0, #4]
   5e390:	cmp	r0, #0
   5e394:	beq	5e318 <Mat_VarGetStructField+0x4c>
   5e398:	sub	r1, r4, #1
   5e39c:	cmp	r0, r1
   5e3a0:	bcs	5e480 <Mat_VarGetStructField+0x1b4>
   5e3a4:	ldr	r0, [pc, #244]	; 5e4a0 <Mat_VarGetStructField+0x1d4>
   5e3a8:	add	r0, pc, r0
   5e3ac:	bl	19b4 <Mat_Critical@plt>
   5e3b0:	mov	r0, r8
   5e3b4:	sub	sp, fp, #28
   5e3b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5e3bc:	cmp	r4, #1
   5e3c0:	bne	5e318 <Mat_VarGetStructField+0x4c>
   5e3c4:	cmp	r0, #1
   5e3c8:	blt	5e318 <Mat_VarGetStructField+0x4c>
   5e3cc:	mov	r0, #1
   5e3d0:	mov	r8, #0
   5e3d4:	str	r0, [sp, #8]
   5e3d8:	ldr	r0, [r6, #16]
   5e3dc:	cmp	r0, #2
   5e3e0:	bne	5e318 <Mat_VarGetStructField+0x4c>
   5e3e4:	ldr	r0, [r6, #12]
   5e3e8:	cmp	r0, #0
   5e3ec:	beq	5e318 <Mat_VarGetStructField+0x4c>
   5e3f0:	add	r1, sp, #8
   5e3f4:	mov	r0, r6
   5e3f8:	bl	5a144 <SafeMulDims>
   5e3fc:	ldr	r0, [r6, #52]	; 0x34
   5e400:	mvn	r4, #0
   5e404:	ldr	sl, [r0, #4]
   5e408:	cmp	sl, #1
   5e40c:	blt	5e43c <Mat_VarGetStructField+0x170>
   5e410:	ldr	r9, [r0, #8]
   5e414:	mov	r4, #0
   5e418:	ldr	r0, [r9, r4, lsl #2]
   5e41c:	mov	r1, r7
   5e420:	bl	17b0 <strcmp@plt>
   5e424:	cmp	r0, #0
   5e428:	beq	5e43c <Mat_VarGetStructField+0x170>
   5e42c:	add	r4, r4, #1
   5e430:	cmp	r4, sl
   5e434:	blt	5e418 <Mat_VarGetStructField+0x14c>
   5e438:	mvn	r4, #0
   5e43c:	ldr	r0, [sp, #8]
   5e440:	cmp	r0, r5
   5e444:	bls	5e468 <Mat_VarGetStructField+0x19c>
   5e448:	cmp	r4, #0
   5e44c:	ldrge	r1, [r6, #40]	; 0x28
   5e450:	mulge	r0, sl, r5
   5e454:	addge	r0, r1, r0, lsl #2
   5e458:	ldrge	r8, [r0, r4, lsl #2]
   5e45c:	mov	r0, r8
   5e460:	sub	sp, fp, #28
   5e464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5e468:	ldr	r0, [pc, #44]	; 5e49c <Mat_VarGetStructField+0x1d0>
   5e46c:	add	r0, pc, r0
   5e470:	bl	19b4 <Mat_Critical@plt>
   5e474:	mov	r0, r8
   5e478:	sub	sp, fp, #28
   5e47c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5e480:	ldr	r2, [r6, #40]	; 0x28
   5e484:	mul	r0, r0, r5
   5e488:	add	r0, r2, r0, lsl #2
   5e48c:	ldr	r8, [r0, r1, lsl #2]
   5e490:	mov	r0, r8
   5e494:	sub	sp, fp, #28
   5e498:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5e49c:	.word	0x000020bc
   5e4a0:	.word	0x000021b5

0005e4a4 <Mat_VarGetStructs>:
   5e4a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5e4a8:	add	fp, sp, #28
   5e4ac:	sub	sp, sp, #180	; 0xb4
   5e4b0:	sub	r6, fp, #72	; 0x48
   5e4b4:	mov	r7, r0
   5e4b8:	mov	r5, r1
   5e4bc:	vmov.i32	q8, #0	; 0x00000000
   5e4c0:	mov	r0, #36	; 0x24
   5e4c4:	str	r2, [sp, #48]	; 0x30
   5e4c8:	mov	r2, #0
   5e4cc:	mov	r1, r6
   5e4d0:	cmp	r7, #0
   5e4d4:	str	r2, [fp, #-40]	; 0xffffffd8
   5e4d8:	str	r2, [sp, #128]	; 0x80
   5e4dc:	str	r2, [sp, #88]	; 0x58
   5e4e0:	vst1.64	{d16-d17}, [r1], r0
   5e4e4:	cmpne	r5, #0
   5e4e8:	str	r2, [r1]
   5e4ec:	add	r1, r6, #16
   5e4f0:	add	r6, sp, #96	; 0x60
   5e4f4:	vst1.64	{d16-d17}, [r1]
   5e4f8:	add	r1, r6, #16
   5e4fc:	vst1.64	{d16-d17}, [r1]
   5e500:	mov	r1, r6
   5e504:	add	r6, sp, #56	; 0x38
   5e508:	vst1.64	{d16-d17}, [r1], r0
   5e50c:	str	r2, [r1]
   5e510:	add	r1, r6, #16
   5e514:	vst1.64	{d16-d17}, [r1]
   5e518:	mov	r1, r6
   5e51c:	vst1.64	{d16-d17}, [r1], r0
   5e520:	str	r2, [r1]
   5e524:	beq	5e538 <Mat_VarGetStructs+0x94>
   5e528:	ldr	r0, [sp, #48]	; 0x30
   5e52c:	cmp	r0, #0
   5e530:	cmpne	r3, #0
   5e534:	bne	5e544 <Mat_VarGetStructs+0xa0>
   5e538:	mov	r0, r2
   5e53c:	sub	sp, fp, #28
   5e540:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5e544:	ldr	r0, [r7, #4]
   5e548:	cmp	r0, #9
   5e54c:	bgt	5e538 <Mat_VarGetStructs+0x94>
   5e550:	ldr	r0, [r7, #16]
   5e554:	cmp	r0, #2
   5e558:	bne	5e538 <Mat_VarGetStructs+0x94>
   5e55c:	ldr	r4, [fp, #8]
   5e560:	mov	r0, r7
   5e564:	mov	r1, #0
   5e568:	str	r3, [sp, #36]	; 0x24
   5e56c:	bl	1a44 <Mat_VarDuplicate@plt>
   5e570:	cmp	r4, #0
   5e574:	str	r0, [sp]
   5e578:	moveq	r1, #1
   5e57c:	streq	r1, [r0, #44]	; 0x2c
   5e580:	ldr	ip, [r7, #32]
   5e584:	ldr	r1, [r7, #52]	; 0x34
   5e588:	ldr	r2, [ip]
   5e58c:	ldr	sl, [r1, #4]
   5e590:	str	r2, [sp, #56]	; 0x38
   5e594:	ldr	r8, [r0, #32]
   5e598:	ldr	r0, [sp, #36]	; 0x24
   5e59c:	ldr	r9, [r5]
   5e5a0:	ldr	r4, [r0]
   5e5a4:	str	r4, [r8]
   5e5a8:	ldr	r3, [r5]
   5e5ac:	str	r3, [fp, #-72]	; 0xffffffb8
   5e5b0:	ldr	r3, [r7, #4]
   5e5b4:	cmp	r3, #2
   5e5b8:	blt	5e610 <Mat_VarGetStructs+0x16c>
   5e5bc:	mov	r3, #1
   5e5c0:	ldr	r6, [r5, r3, lsl #2]
   5e5c4:	mov	lr, r5
   5e5c8:	sub	r5, fp, #72	; 0x48
   5e5cc:	add	r1, sp, #56	; 0x38
   5e5d0:	str	r6, [r5, r3, lsl #2]
   5e5d4:	mla	r9, r2, r6, r9
   5e5d8:	ldr	r5, [ip, r3, lsl #2]
   5e5dc:	mul	r5, r5, r2
   5e5e0:	str	r5, [r1, r3, lsl #2]
   5e5e4:	mov	r1, ip
   5e5e8:	ldr	ip, [r0, r3, lsl #2]
   5e5ec:	str	ip, [r8, r3, lsl #2]
   5e5f0:	add	r3, r3, #1
   5e5f4:	mul	r4, ip, r4
   5e5f8:	mov	ip, r1
   5e5fc:	ldr	r2, [r7, #4]
   5e600:	cmp	r3, r2
   5e604:	mov	r2, r5
   5e608:	mov	r5, lr
   5e60c:	blt	5e5c0 <Mat_VarGetStructs+0x11c>
   5e610:	ldr	r1, [sp]
   5e614:	mul	r0, sl, r4
   5e618:	lsl	r0, r0, #2
   5e61c:	str	r0, [r1]
   5e620:	bl	18d0 <malloc@plt>
   5e624:	ldr	r2, [sp]
   5e628:	cmp	r0, #0
   5e62c:	mov	r1, r0
   5e630:	str	r0, [sp, #32]
   5e634:	str	r0, [r2, #40]	; 0x28
   5e638:	beq	5e8d0 <Mat_VarGetStructs+0x42c>
   5e63c:	cmp	r4, #0
   5e640:	beq	5e538 <Mat_VarGetStructs+0x94>
   5e644:	ldr	r0, [sp, #48]	; 0x30
   5e648:	lsl	ip, sl, #2
   5e64c:	mov	r1, #0
   5e650:	add	r0, r0, #8
   5e654:	str	r0, [sp, #28]
   5e658:	add	r0, r5, #4
   5e65c:	str	r0, [sp, #40]	; 0x28
   5e660:	bic	r0, sl, #3
   5e664:	str	r0, [sp, #20]
   5e668:	ldr	r0, [sp, #36]	; 0x24
   5e66c:	ldr	lr, [r0], #4
   5e670:	str	r0, [sp, #52]	; 0x34
   5e674:	stmib	sp, {r4, r5}
   5e678:	str	ip, [sp, #44]	; 0x2c
   5e67c:	cmp	lr, #1
   5e680:	str	r1, [sp, #12]
   5e684:	blt	5e7d0 <Mat_VarGetStructs+0x32c>
   5e688:	cmp	sl, #0
   5e68c:	beq	5e7c0 <Mat_VarGetStructs+0x31c>
   5e690:	ldr	r0, [sp, #32]
   5e694:	mul	r6, r9, sl
   5e698:	mov	r9, #0
   5e69c:	mla	r8, ip, r1, r0
   5e6a0:	mul	r0, ip, r1
   5e6a4:	str	r0, [sp, #24]
   5e6a8:	mov	r0, #4
   5e6ac:	add	r1, r0, r1, lsl #2
   5e6b0:	mul	r0, sl, r1
   5e6b4:	str	r0, [sp, #16]
   5e6b8:	ldr	r0, [fp, #8]
   5e6bc:	cmp	r0, #0
   5e6c0:	beq	5e700 <Mat_VarGetStructs+0x25c>
   5e6c4:	lsl	r4, r6, #2
   5e6c8:	mov	r5, #0
   5e6cc:	ldr	r0, [r7, #40]	; 0x28
   5e6d0:	mov	r1, #1
   5e6d4:	add	r0, r0, r4
   5e6d8:	ldr	r0, [r0, r5, lsl #2]
   5e6dc:	bl	1a44 <Mat_VarDuplicate@plt>
   5e6e0:	str	r0, [r8, r5, lsl #2]
   5e6e4:	add	r5, r5, #1
   5e6e8:	cmp	sl, r5
   5e6ec:	bne	5e6cc <Mat_VarGetStructs+0x228>
   5e6f0:	ldr	r0, [sp, #36]	; 0x24
   5e6f4:	ldr	ip, [sp, #44]	; 0x2c
   5e6f8:	ldr	lr, [r0]
   5e6fc:	b	5e798 <Mat_VarGetStructs+0x2f4>
   5e700:	ldr	r1, [r7, #40]	; 0x28
   5e704:	mov	r2, #0
   5e708:	cmp	sl, #4
   5e70c:	bcs	5e718 <Mat_VarGetStructs+0x274>
   5e710:	mov	r4, r6
   5e714:	b	5e780 <Mat_VarGetStructs+0x2dc>
   5e718:	ldr	r0, [sp, #24]
   5e71c:	add	r4, r1, sl, lsl #2
   5e720:	add	r4, r4, r6, lsl #2
   5e724:	mla	r3, ip, r9, r0
   5e728:	ldr	r0, [sp, #32]
   5e72c:	add	r5, r0, r3
   5e730:	add	r3, r1, r6, lsl #2
   5e734:	cmp	r5, r4
   5e738:	bcs	5e758 <Mat_VarGetStructs+0x2b4>
   5e73c:	ldr	r0, [sp, #16]
   5e740:	mov	r4, r6
   5e744:	mla	r5, ip, r9, r0
   5e748:	ldr	r0, [sp, #32]
   5e74c:	add	r5, r0, r5
   5e750:	cmp	r5, r3
   5e754:	bhi	5e780 <Mat_VarGetStructs+0x2dc>
   5e758:	ldr	r2, [sp, #20]
   5e75c:	mov	r5, r8
   5e760:	add	r4, r6, r2
   5e764:	vld1.32	{d16-d17}, [r3]!
   5e768:	subs	r2, r2, #4
   5e76c:	vst1.32	{d16-d17}, [r5]!
   5e770:	bne	5e764 <Mat_VarGetStructs+0x2c0>
   5e774:	ldr	r2, [sp, #20]
   5e778:	cmp	sl, r2
   5e77c:	beq	5e798 <Mat_VarGetStructs+0x2f4>
   5e780:	add	r1, r1, r4, lsl #2
   5e784:	ldr	r3, [r1], #4
   5e788:	str	r3, [r8, r2, lsl #2]
   5e78c:	add	r2, r2, #1
   5e790:	cmp	sl, r2
   5e794:	bne	5e784 <Mat_VarGetStructs+0x2e0>
   5e798:	ldr	r0, [sp, #48]	; 0x30
   5e79c:	add	r9, r9, #1
   5e7a0:	add	r1, sl, r6
   5e7a4:	add	r8, r8, ip
   5e7a8:	cmp	r9, lr
   5e7ac:	ldr	r2, [r0]
   5e7b0:	sub	r2, r2, #1
   5e7b4:	mla	r6, r2, sl, r1
   5e7b8:	blt	5e6b8 <Mat_VarGetStructs+0x214>
   5e7bc:	b	5e7d0 <Mat_VarGetStructs+0x32c>
   5e7c0:	mov	r1, #0
   5e7c4:	add	r1, r1, #1
   5e7c8:	cmp	r1, lr
   5e7cc:	blt	5e7c4 <Mat_VarGetStructs+0x320>
   5e7d0:	ldr	r0, [sp, #8]
   5e7d4:	ldr	r1, [sp, #100]	; 0x64
   5e7d8:	ldr	r9, [r0]
   5e7dc:	ldr	r0, [sp, #48]	; 0x30
   5e7e0:	add	r4, r1, #1
   5e7e4:	str	r4, [sp, #100]	; 0x64
   5e7e8:	str	r9, [fp, #-72]	; 0xffffffb8
   5e7ec:	ldr	r1, [r0, #4]
   5e7f0:	ldr	r2, [fp, #-68]	; 0xffffffbc
   5e7f4:	add	r1, r2, r1
   5e7f8:	str	r1, [fp, #-68]	; 0xffffffbc
   5e7fc:	ldr	r1, [r7, #4]
   5e800:	cmp	r1, #2
   5e804:	blt	5e8ac <Mat_VarGetStructs+0x408>
   5e808:	sub	ip, r1, #1
   5e80c:	mov	r3, #0
   5e810:	sub	r8, fp, #72	; 0x48
   5e814:	b	5e828 <Mat_VarGetStructs+0x384>
   5e818:	add	r0, sp, #96	; 0x60
   5e81c:	add	r0, r0, r3, lsl #2
   5e820:	mov	r3, r6
   5e824:	ldr	r4, [r0, #8]
   5e828:	ldr	r0, [sp, #52]	; 0x34
   5e82c:	add	r6, r3, #1
   5e830:	ldr	r2, [r0, r3, lsl #2]
   5e834:	cmp	r4, r2
   5e838:	bne	5e888 <Mat_VarGetStructs+0x3e4>
   5e83c:	add	r0, sp, #96	; 0x60
   5e840:	add	r5, r8, r3, lsl #2
   5e844:	cmp	r6, ip
   5e848:	add	r2, r0, r3, lsl #2
   5e84c:	mov	r0, #0
   5e850:	str	r0, [r2, #4]
   5e854:	ldr	r0, [sp, #40]	; 0x28
   5e858:	ldr	r4, [r0, r3, lsl #2]
   5e85c:	str	r4, [r5, #4]
   5e860:	bge	5e890 <Mat_VarGetStructs+0x3ec>
   5e864:	ldr	r0, [r2, #8]
   5e868:	add	r0, r0, #1
   5e86c:	str	r0, [r2, #8]
   5e870:	ldr	r0, [sp, #28]
   5e874:	ldr	r2, [r5, #8]
   5e878:	ldr	r0, [r0, r3, lsl #2]
   5e87c:	add	r0, r2, r0
   5e880:	str	r0, [r5, #8]
   5e884:	b	5e890 <Mat_VarGetStructs+0x3ec>
   5e888:	add	r2, r8, r3, lsl #2
   5e88c:	ldr	r4, [r2, #4]
   5e890:	add	r0, sp, #56	; 0x38
   5e894:	ldr	r0, [r0, r3, lsl #2]
   5e898:	mla	r9, r0, r4, r9
   5e89c:	add	r0, r3, #2
   5e8a0:	cmp	r0, r1
   5e8a4:	blt	5e818 <Mat_VarGetStructs+0x374>
   5e8a8:	ldr	ip, [sp, #44]	; 0x2c
   5e8ac:	ldr	r1, [sp, #12]
   5e8b0:	ldr	r0, [sp, #4]
   5e8b4:	add	r1, lr, r1
   5e8b8:	cmp	r1, r0
   5e8bc:	bcc	5e67c <Mat_VarGetStructs+0x1d8>
   5e8c0:	ldr	r2, [sp]
   5e8c4:	mov	r0, r2
   5e8c8:	sub	sp, fp, #28
   5e8cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5e8d0:	mov	r0, r2
   5e8d4:	bl	1918 <Mat_VarFree@plt>
   5e8d8:	mov	r2, #0
   5e8dc:	mov	r0, r2
   5e8e0:	sub	sp, fp, #28
   5e8e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0005e8e8 <Mat_VarGetStructsLinear>:
   5e8e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5e8ec:	add	fp, sp, #28
   5e8f0:	sub	sp, sp, #36	; 0x24
   5e8f4:	mov	r5, #0
   5e8f8:	cmp	r0, #0
   5e8fc:	beq	5eb78 <Mat_VarGetStructsLinear+0x290>
   5e900:	mov	r7, r0
   5e904:	ldr	r0, [r0, #4]
   5e908:	cmp	r0, #10
   5e90c:	bgt	5eb78 <Mat_VarGetStructsLinear+0x290>
   5e910:	ldr	r4, [fp, #8]
   5e914:	mov	r9, r1
   5e918:	mov	r0, r7
   5e91c:	mov	r1, #0
   5e920:	mov	r6, r3
   5e924:	mov	sl, r2
   5e928:	bl	1a44 <Mat_VarDuplicate@plt>
   5e92c:	cmp	r4, #0
   5e930:	mov	r5, r0
   5e934:	moveq	r0, #1
   5e938:	streq	r0, [r5, #44]	; 0x2c
   5e93c:	ldr	r0, [r7, #52]	; 0x34
   5e940:	ldr	r8, [r0, #4]
   5e944:	mul	r0, r6, r8
   5e948:	lsl	r0, r0, #2
   5e94c:	str	r0, [r5]
   5e950:	bl	18d0 <malloc@plt>
   5e954:	cmp	r0, #0
   5e958:	str	r0, [r5, #40]	; 0x28
   5e95c:	beq	5ea3c <Mat_VarGetStructsLinear+0x154>
   5e960:	mov	r4, r0
   5e964:	ldr	r0, [r5, #32]
   5e968:	cmp	r6, #1
   5e96c:	mov	r1, #1
   5e970:	str	r6, [r0]
   5e974:	str	r1, [r0, #4]
   5e978:	blt	5eb78 <Mat_VarGetStructsLinear+0x290>
   5e97c:	sub	r0, sl, #1
   5e980:	mul	lr, r8, r9
   5e984:	str	r6, [sp, #20]
   5e988:	mul	r2, r8, r0
   5e98c:	ldr	r0, [fp, #8]
   5e990:	cmp	r0, #0
   5e994:	beq	5ea54 <Mat_VarGetStructsLinear+0x16c>
   5e998:	lsl	r0, r2, #2
   5e99c:	bic	r1, r8, r8, asr #31
   5e9a0:	str	r5, [sp, #4]
   5e9a4:	lsl	r5, lr, #2
   5e9a8:	mov	r6, #0
   5e9ac:	str	r2, [sp, #24]
   5e9b0:	add	r0, r0, r1, lsl #2
   5e9b4:	str	r0, [sp, #16]
   5e9b8:	lsl	r0, r8, #2
   5e9bc:	str	r0, [sp, #12]
   5e9c0:	cmp	r8, #0
   5e9c4:	mov	r9, r5
   5e9c8:	str	r4, [sp, #32]
   5e9cc:	mov	sl, r4
   5e9d0:	mov	r4, r8
   5e9d4:	str	lr, [sp, #28]
   5e9d8:	ble	5ea08 <Mat_VarGetStructsLinear+0x120>
   5e9dc:	ldr	r0, [r7, #40]	; 0x28
   5e9e0:	mov	r1, #1
   5e9e4:	ldr	r0, [r0, r9]
   5e9e8:	bl	1a44 <Mat_VarDuplicate@plt>
   5e9ec:	str	r0, [sl], #4
   5e9f0:	add	r9, r9, #4
   5e9f4:	subs	r4, r4, #1
   5e9f8:	bne	5e9dc <Mat_VarGetStructsLinear+0xf4>
   5e9fc:	ldr	lr, [sp, #28]
   5ea00:	add	lr, r8, lr
   5ea04:	b	5ea0c <Mat_VarGetStructsLinear+0x124>
   5ea08:	ldr	lr, [sp, #28]
   5ea0c:	ldr	r0, [sp, #16]
   5ea10:	ldr	r4, [sp, #32]
   5ea14:	ldr	r2, [sp, #24]
   5ea18:	add	r6, r6, #1
   5ea1c:	add	r5, r5, r0
   5ea20:	ldr	r0, [sp, #12]
   5ea24:	add	lr, lr, r2
   5ea28:	add	r4, r4, r0
   5ea2c:	ldr	r0, [sp, #20]
   5ea30:	cmp	r6, r0
   5ea34:	bne	5e9c0 <Mat_VarGetStructsLinear+0xd8>
   5ea38:	b	5eb74 <Mat_VarGetStructsLinear+0x28c>
   5ea3c:	mov	r0, r5
   5ea40:	bl	1918 <Mat_VarFree@plt>
   5ea44:	mov	r5, #0
   5ea48:	mov	r0, r5
   5ea4c:	sub	sp, fp, #28
   5ea50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5ea54:	cmp	r8, #1
   5ea58:	blt	5eb78 <Mat_VarGetStructsLinear+0x290>
   5ea5c:	mov	r0, #4
   5ea60:	bic	r1, r8, #3
   5ea64:	str	r2, [sp, #24]
   5ea68:	mov	r3, #0
   5ea6c:	str	r5, [sp, #4]
   5ea70:	str	r4, [sp, #32]
   5ea74:	str	lr, [sp, #28]
   5ea78:	add	r0, r0, r9, lsl #2
   5ea7c:	str	r1, [sp, #8]
   5ea80:	mov	r1, r4
   5ea84:	mul	r0, r8, r0
   5ea88:	str	r0, [sp, #16]
   5ea8c:	mov	r0, sl
   5ea90:	ldr	sl, [r7, #40]	; 0x28
   5ea94:	lsl	r7, r8, #2
   5ea98:	ldr	r9, [sp, #16]
   5ea9c:	mul	r0, r8, r0
   5eaa0:	lsl	ip, r0, #2
   5eaa4:	str	r0, [sp, #12]
   5eaa8:	add	r2, sl, lr, lsl #2
   5eaac:	cmp	r8, #4
   5eab0:	mov	r0, #0
   5eab4:	mov	r5, lr
   5eab8:	bcc	5eb3c <Mat_VarGetStructsLinear+0x254>
   5eabc:	ldr	r0, [sp, #12]
   5eac0:	ldr	r5, [sp, #32]
   5eac4:	mul	r4, r0, r3
   5eac8:	mul	r0, r7, r3
   5eacc:	add	r6, sl, r4, lsl #2
   5ead0:	add	r5, r5, r0
   5ead4:	add	r6, r6, r9
   5ead8:	cmp	r5, r6
   5eadc:	ldr	r6, [sp, #20]
   5eae0:	bcs	5eb0c <Mat_VarGetStructsLinear+0x224>
   5eae4:	ldr	r5, [sp, #28]
   5eae8:	add	r0, r7, r0
   5eaec:	add	r4, r5, r4
   5eaf0:	ldr	r5, [sp, #32]
   5eaf4:	add	r4, sl, r4, lsl #2
   5eaf8:	add	r0, r5, r0
   5eafc:	mov	r5, lr
   5eb00:	cmp	r0, r4
   5eb04:	mov	r0, #0
   5eb08:	bhi	5eb3c <Mat_VarGetStructsLinear+0x254>
   5eb0c:	ldr	r0, [sp, #8]
   5eb10:	mov	r4, r2
   5eb14:	mov	r6, r1
   5eb18:	add	r5, lr, r0
   5eb1c:	vld1.32	{d16-d17}, [r4]!
   5eb20:	subs	r0, r0, #4
   5eb24:	vst1.32	{d16-d17}, [r6]!
   5eb28:	bne	5eb1c <Mat_VarGetStructsLinear+0x234>
   5eb2c:	ldr	r0, [sp, #8]
   5eb30:	ldr	r6, [sp, #20]
   5eb34:	cmp	r8, r0
   5eb38:	beq	5eb54 <Mat_VarGetStructsLinear+0x26c>
   5eb3c:	add	r4, sl, r5, lsl #2
   5eb40:	ldr	r5, [r4], #4
   5eb44:	str	r5, [r1, r0, lsl #2]
   5eb48:	add	r0, r0, #1
   5eb4c:	cmp	r8, r0
   5eb50:	bne	5eb40 <Mat_VarGetStructsLinear+0x258>
   5eb54:	ldr	r5, [sp, #24]
   5eb58:	add	r0, r8, lr
   5eb5c:	add	r3, r3, #1
   5eb60:	add	r2, r2, ip
   5eb64:	add	r1, r1, r7
   5eb68:	cmp	r3, r6
   5eb6c:	add	lr, r0, r5
   5eb70:	bne	5eaac <Mat_VarGetStructsLinear+0x1c4>
   5eb74:	ldr	r5, [sp, #4]
   5eb78:	mov	r0, r5
   5eb7c:	sub	sp, fp, #28
   5eb80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0005eb84 <Mat_VarSetStructFieldByIndex>:
   5eb84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   5eb88:	add	fp, sp, #24
   5eb8c:	sub	sp, sp, #8
   5eb90:	mov	r7, r0
   5eb94:	mov	r0, #1
   5eb98:	mov	r4, #0
   5eb9c:	cmp	r7, #0
   5eba0:	str	r0, [sp, #4]
   5eba4:	beq	5ebf0 <Mat_VarSetStructFieldByIndex+0x6c>
   5eba8:	ldr	r0, [r7, #16]
   5ebac:	cmp	r0, #2
   5ebb0:	bne	5ebf0 <Mat_VarSetStructFieldByIndex+0x6c>
   5ebb4:	ldr	r0, [r7, #40]	; 0x28
   5ebb8:	cmp	r0, #0
   5ebbc:	beq	5ebf0 <Mat_VarSetStructFieldByIndex+0x6c>
   5ebc0:	mov	r6, r1
   5ebc4:	add	r1, sp, #4
   5ebc8:	mov	r0, r7
   5ebcc:	mov	r8, r3
   5ebd0:	mov	r5, r2
   5ebd4:	bl	5a144 <SafeMulDims>
   5ebd8:	ldr	r0, [r7, #52]	; 0x34
   5ebdc:	ldr	r0, [r0, #4]
   5ebe0:	cmp	r0, r6
   5ebe4:	ldrhi	r1, [sp, #4]
   5ebe8:	cmphi	r1, r5
   5ebec:	bhi	5ebfc <Mat_VarSetStructFieldByIndex+0x78>
   5ebf0:	mov	r0, r4
   5ebf4:	sub	sp, fp, #24
   5ebf8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   5ebfc:	ldr	r1, [r7, #40]	; 0x28
   5ec00:	mla	r0, r0, r5, r6
   5ec04:	ldr	r4, [r1, r0, lsl #2]
   5ec08:	str	r8, [r1, r0, lsl #2]
   5ec0c:	ldr	r0, [r8, #36]	; 0x24
   5ec10:	cmp	r0, #0
   5ec14:	beq	5ec1c <Mat_VarSetStructFieldByIndex+0x98>
   5ec18:	bl	1804 <free@plt>
   5ec1c:	ldr	r0, [r7, #52]	; 0x34
   5ec20:	ldr	r0, [r0, #8]
   5ec24:	ldr	r0, [r0, r6, lsl #2]
   5ec28:	bl	1864 <strdup@plt>
   5ec2c:	str	r0, [r8, #36]	; 0x24
   5ec30:	mov	r0, r4
   5ec34:	sub	sp, fp, #24
   5ec38:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0005ec3c <Mat_VarSetStructFieldByName>:
   5ec3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   5ec40:	add	fp, sp, #28
   5ec44:	sub	sp, sp, #12
   5ec48:	mov	r8, r0
   5ec4c:	mov	r0, #1
   5ec50:	mov	sl, #0
   5ec54:	cmp	r8, #0
   5ec58:	str	r0, [sp, #8]
   5ec5c:	beq	5ed28 <Mat_VarSetStructFieldByName+0xec>
   5ec60:	ldr	r0, [r8, #16]
   5ec64:	cmp	r0, #2
   5ec68:	bne	5ed28 <Mat_VarSetStructFieldByName+0xec>
   5ec6c:	ldr	r0, [r8, #40]	; 0x28
   5ec70:	cmp	r0, #0
   5ec74:	beq	5ed28 <Mat_VarSetStructFieldByName+0xec>
   5ec78:	mov	r4, r1
   5ec7c:	add	r1, sp, #8
   5ec80:	mov	r0, r8
   5ec84:	mov	r5, r3
   5ec88:	mov	r9, r2
   5ec8c:	bl	5a144 <SafeMulDims>
   5ec90:	ldr	r0, [r8, #52]	; 0x34
   5ec94:	ldr	r6, [r0, #4]
   5ec98:	cmp	r6, #1
   5ec9c:	blt	5ed28 <Mat_VarSetStructFieldByName+0xec>
   5eca0:	str	r5, [sp, #4]
   5eca4:	ldr	r5, [r0, #8]
   5eca8:	mov	r7, #0
   5ecac:	ldr	r0, [r5, r7, lsl #2]
   5ecb0:	mov	r1, r4
   5ecb4:	bl	17b0 <strcmp@plt>
   5ecb8:	cmp	r0, #0
   5ecbc:	beq	5ecdc <Mat_VarSetStructFieldByName+0xa0>
   5ecc0:	add	r7, r7, #1
   5ecc4:	cmp	r7, r6
   5ecc8:	blt	5ecac <Mat_VarSetStructFieldByName+0x70>
   5eccc:	mov	sl, #0
   5ecd0:	mov	r0, sl
   5ecd4:	sub	sp, fp, #28
   5ecd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   5ecdc:	ldr	r0, [sp, #8]
   5ece0:	ldr	r4, [sp, #4]
   5ece4:	mov	sl, #0
   5ece8:	cmp	r0, r9
   5ecec:	bls	5ed28 <Mat_VarSetStructFieldByName+0xec>
   5ecf0:	ldr	r1, [r8, #40]	; 0x28
   5ecf4:	mul	r0, r6, r9
   5ecf8:	add	r0, r1, r0, lsl #2
   5ecfc:	ldr	sl, [r0, r7, lsl #2]
   5ed00:	str	r4, [r0, r7, lsl #2]
   5ed04:	ldr	r0, [r4, #36]	; 0x24
   5ed08:	cmp	r0, #0
   5ed0c:	beq	5ed14 <Mat_VarSetStructFieldByName+0xd8>
   5ed10:	bl	1804 <free@plt>
   5ed14:	ldr	r0, [r8, #52]	; 0x34
   5ed18:	ldr	r0, [r0, #8]
   5ed1c:	ldr	r0, [r0, r7, lsl #2]
   5ed20:	bl	1864 <strdup@plt>
   5ed24:	str	r0, [r4, #36]	; 0x24
   5ed28:	mov	r0, sl
   5ed2c:	sub	sp, fp, #28
   5ed30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0005ed34 <__aeabi_drsub>:
   5ed34:	eor	r1, r1, #-2147483648	; 0x80000000
   5ed38:	b	5ed40 <__adddf3>

0005ed3c <__aeabi_dsub>:
   5ed3c:	eor	r3, r3, #-2147483648	; 0x80000000

0005ed40 <__adddf3>:
   5ed40:	push	{r4, r5, lr}
   5ed44:	lsl	r4, r1, #1
   5ed48:	lsl	r5, r3, #1
   5ed4c:	teq	r4, r5
   5ed50:	teqeq	r0, r2
   5ed54:	orrsne	ip, r4, r0
   5ed58:	orrsne	ip, r5, r2
   5ed5c:	mvnsne	ip, r4, asr #21
   5ed60:	mvnsne	ip, r5, asr #21
   5ed64:	beq	5ef50 <__adddf3+0x210>
   5ed68:	lsr	r4, r4, #21
   5ed6c:	rsbs	r5, r4, r5, lsr #21
   5ed70:	rsblt	r5, r5, #0
   5ed74:	ble	5ed94 <__adddf3+0x54>
   5ed78:	add	r4, r4, r5
   5ed7c:	eor	r2, r0, r2
   5ed80:	eor	r3, r1, r3
   5ed84:	eor	r0, r2, r0
   5ed88:	eor	r1, r3, r1
   5ed8c:	eor	r2, r0, r2
   5ed90:	eor	r3, r1, r3
   5ed94:	cmp	r5, #54	; 0x36
   5ed98:	pophi	{r4, r5, pc}
   5ed9c:	tst	r1, #-2147483648	; 0x80000000
   5eda0:	lsl	r1, r1, #12
   5eda4:	mov	ip, #1048576	; 0x100000
   5eda8:	orr	r1, ip, r1, lsr #12
   5edac:	beq	5edb8 <__adddf3+0x78>
   5edb0:	rsbs	r0, r0, #0
   5edb4:	rsc	r1, r1, #0
   5edb8:	tst	r3, #-2147483648	; 0x80000000
   5edbc:	lsl	r3, r3, #12
   5edc0:	orr	r3, ip, r3, lsr #12
   5edc4:	beq	5edd0 <__adddf3+0x90>
   5edc8:	rsbs	r2, r2, #0
   5edcc:	rsc	r3, r3, #0
   5edd0:	teq	r4, r5
   5edd4:	beq	5ef38 <__adddf3+0x1f8>
   5edd8:	sub	r4, r4, #1
   5eddc:	rsbs	lr, r5, #32
   5ede0:	blt	5edfc <__adddf3+0xbc>
   5ede4:	lsl	ip, r2, lr
   5ede8:	adds	r0, r0, r2, lsr r5
   5edec:	adc	r1, r1, #0
   5edf0:	adds	r0, r0, r3, lsl lr
   5edf4:	adcs	r1, r1, r3, asr r5
   5edf8:	b	5ee18 <__adddf3+0xd8>
   5edfc:	sub	r5, r5, #32
   5ee00:	add	lr, lr, #32
   5ee04:	cmp	r2, #1
   5ee08:	lsl	ip, r3, lr
   5ee0c:	orrcs	ip, ip, #2
   5ee10:	adds	r0, r0, r3, asr r5
   5ee14:	adcs	r1, r1, r3, asr #31
   5ee18:	and	r5, r1, #-2147483648	; 0x80000000
   5ee1c:	bpl	5ee2c <__adddf3+0xec>
   5ee20:	rsbs	ip, ip, #0
   5ee24:	rscs	r0, r0, #0
   5ee28:	rsc	r1, r1, #0
   5ee2c:	cmp	r1, #1048576	; 0x100000
   5ee30:	bcc	5ee70 <__adddf3+0x130>
   5ee34:	cmp	r1, #2097152	; 0x200000
   5ee38:	bcc	5ee58 <__adddf3+0x118>
   5ee3c:	lsrs	r1, r1, #1
   5ee40:	rrxs	r0, r0
   5ee44:	rrx	ip, ip
   5ee48:	add	r4, r4, #1
   5ee4c:	lsl	r2, r4, #21
   5ee50:	cmn	r2, #4194304	; 0x400000
   5ee54:	bcs	5efb0 <__adddf3+0x270>
   5ee58:	cmp	ip, #-2147483648	; 0x80000000
   5ee5c:	lsrseq	ip, r0, #1
   5ee60:	adcs	r0, r0, #0
   5ee64:	adc	r1, r1, r4, lsl #20
   5ee68:	orr	r1, r1, r5
   5ee6c:	pop	{r4, r5, pc}
   5ee70:	lsls	ip, ip, #1
   5ee74:	adcs	r0, r0, r0
   5ee78:	adc	r1, r1, r1
   5ee7c:	tst	r1, #1048576	; 0x100000
   5ee80:	sub	r4, r4, #1
   5ee84:	bne	5ee58 <__adddf3+0x118>
   5ee88:	teq	r1, #0
   5ee8c:	moveq	r1, r0
   5ee90:	moveq	r0, #0
   5ee94:	clz	r3, r1
   5ee98:	addeq	r3, r3, #32
   5ee9c:	sub	r3, r3, #11
   5eea0:	subs	r2, r3, #32
   5eea4:	bge	5eec8 <__adddf3+0x188>
   5eea8:	adds	r2, r2, #12
   5eeac:	ble	5eec4 <__adddf3+0x184>
   5eeb0:	add	ip, r2, #20
   5eeb4:	rsb	r2, r2, #12
   5eeb8:	lsl	r0, r1, ip
   5eebc:	lsr	r1, r1, r2
   5eec0:	b	5eed8 <__adddf3+0x198>
   5eec4:	add	r2, r2, #20
   5eec8:	rsble	ip, r2, #32
   5eecc:	lsl	r1, r1, r2
   5eed0:	orrle	r1, r1, r0, lsr ip
   5eed4:	lslle	r0, r0, r2
   5eed8:	subs	r4, r4, r3
   5eedc:	addge	r1, r1, r4, lsl #20
   5eee0:	orrge	r1, r1, r5
   5eee4:	popge	{r4, r5, pc}
   5eee8:	mvn	r4, r4
   5eeec:	subs	r4, r4, #31
   5eef0:	bge	5ef2c <__adddf3+0x1ec>
   5eef4:	adds	r4, r4, #12
   5eef8:	bgt	5ef14 <__adddf3+0x1d4>
   5eefc:	add	r4, r4, #20
   5ef00:	rsb	r2, r4, #32
   5ef04:	lsr	r0, r0, r4
   5ef08:	orr	r0, r0, r1, lsl r2
   5ef0c:	orr	r1, r5, r1, lsr r4
   5ef10:	pop	{r4, r5, pc}
   5ef14:	rsb	r4, r4, #12
   5ef18:	rsb	r2, r4, #32
   5ef1c:	lsr	r0, r0, r2
   5ef20:	orr	r0, r0, r1, lsl r4
   5ef24:	mov	r1, r5
   5ef28:	pop	{r4, r5, pc}
   5ef2c:	lsr	r0, r1, r4
   5ef30:	mov	r1, r5
   5ef34:	pop	{r4, r5, pc}
   5ef38:	teq	r4, #0
   5ef3c:	eor	r3, r3, #1048576	; 0x100000
   5ef40:	eoreq	r1, r1, #1048576	; 0x100000
   5ef44:	addeq	r4, r4, #1
   5ef48:	subne	r5, r5, #1
   5ef4c:	b	5edd8 <__adddf3+0x98>
   5ef50:	mvns	ip, r4, asr #21
   5ef54:	mvnsne	ip, r5, asr #21
   5ef58:	beq	5efc0 <__adddf3+0x280>
   5ef5c:	teq	r4, r5
   5ef60:	teqeq	r0, r2
   5ef64:	beq	5ef78 <__adddf3+0x238>
   5ef68:	orrs	ip, r4, r0
   5ef6c:	moveq	r1, r3
   5ef70:	moveq	r0, r2
   5ef74:	pop	{r4, r5, pc}
   5ef78:	teq	r1, r3
   5ef7c:	movne	r1, #0
   5ef80:	movne	r0, #0
   5ef84:	popne	{r4, r5, pc}
   5ef88:	lsrs	ip, r4, #21
   5ef8c:	bne	5efa0 <__adddf3+0x260>
   5ef90:	lsls	r0, r0, #1
   5ef94:	adcs	r1, r1, r1
   5ef98:	orrcs	r1, r1, #-2147483648	; 0x80000000
   5ef9c:	pop	{r4, r5, pc}
   5efa0:	adds	r4, r4, #4194304	; 0x400000
   5efa4:	addcc	r1, r1, #1048576	; 0x100000
   5efa8:	popcc	{r4, r5, pc}
   5efac:	and	r5, r1, #-2147483648	; 0x80000000
   5efb0:	orr	r1, r5, #2130706432	; 0x7f000000
   5efb4:	orr	r1, r1, #15728640	; 0xf00000
   5efb8:	mov	r0, #0
   5efbc:	pop	{r4, r5, pc}
   5efc0:	mvns	ip, r4, asr #21
   5efc4:	movne	r1, r3
   5efc8:	movne	r0, r2
   5efcc:	mvnseq	ip, r5, asr #21
   5efd0:	movne	r3, r1
   5efd4:	movne	r2, r0
   5efd8:	orrs	r4, r0, r1, lsl #12
   5efdc:	orrseq	r5, r2, r3, lsl #12
   5efe0:	teqeq	r1, r3
   5efe4:	orrne	r1, r1, #524288	; 0x80000
   5efe8:	pop	{r4, r5, pc}

0005efec <__aeabi_ui2d>:
   5efec:	teq	r0, #0
   5eff0:	moveq	r1, #0
   5eff4:	bxeq	lr
   5eff8:	push	{r4, r5, lr}
   5effc:	mov	r4, #1024	; 0x400
   5f000:	add	r4, r4, #50	; 0x32
   5f004:	mov	r5, #0
   5f008:	mov	r1, #0
   5f00c:	b	5ee88 <__adddf3+0x148>

0005f010 <__aeabi_i2d>:
   5f010:	teq	r0, #0
   5f014:	moveq	r1, #0
   5f018:	bxeq	lr
   5f01c:	push	{r4, r5, lr}
   5f020:	mov	r4, #1024	; 0x400
   5f024:	add	r4, r4, #50	; 0x32
   5f028:	ands	r5, r0, #-2147483648	; 0x80000000
   5f02c:	rsbmi	r0, r0, #0
   5f030:	mov	r1, #0
   5f034:	b	5ee88 <__adddf3+0x148>

0005f038 <__aeabi_f2d>:
   5f038:	lsls	r2, r0, #1
   5f03c:	asr	r1, r2, #3
   5f040:	rrx	r1, r1
   5f044:	lsl	r0, r2, #28
   5f048:	andsne	r3, r2, #-16777216	; 0xff000000
   5f04c:	teqne	r3, #-16777216	; 0xff000000
   5f050:	eorne	r1, r1, #939524096	; 0x38000000
   5f054:	bxne	lr
   5f058:	bics	r2, r2, #-16777216	; 0xff000000
   5f05c:	bxeq	lr
   5f060:	teq	r3, #-16777216	; 0xff000000
   5f064:	orreq	r1, r1, #524288	; 0x80000
   5f068:	bxeq	lr
   5f06c:	push	{r4, r5, lr}
   5f070:	mov	r4, #896	; 0x380
   5f074:	and	r5, r1, #-2147483648	; 0x80000000
   5f078:	bic	r1, r1, #-2147483648	; 0x80000000
   5f07c:	b	5ee88 <__adddf3+0x148>

0005f080 <__aeabi_ul2d>:
   5f080:	orrs	r2, r0, r1
   5f084:	bxeq	lr
   5f088:	push	{r4, r5, lr}
   5f08c:	mov	r5, #0
   5f090:	b	5f0b0 <__aeabi_l2d+0x1c>

0005f094 <__aeabi_l2d>:
   5f094:	orrs	r2, r0, r1
   5f098:	bxeq	lr
   5f09c:	push	{r4, r5, lr}
   5f0a0:	ands	r5, r1, #-2147483648	; 0x80000000
   5f0a4:	bpl	5f0b0 <__aeabi_l2d+0x1c>
   5f0a8:	rsbs	r0, r0, #0
   5f0ac:	rsc	r1, r1, #0
   5f0b0:	mov	r4, #1024	; 0x400
   5f0b4:	add	r4, r4, #50	; 0x32
   5f0b8:	lsrs	ip, r1, #22
   5f0bc:	beq	5ee2c <__adddf3+0xec>
   5f0c0:	mov	r2, #3
   5f0c4:	lsrs	ip, ip, #3
   5f0c8:	addne	r2, r2, #3
   5f0cc:	lsrs	ip, ip, #3
   5f0d0:	addne	r2, r2, #3
   5f0d4:	add	r2, r2, ip, lsr #3
   5f0d8:	rsb	r3, r2, #32
   5f0dc:	lsl	ip, r0, r3
   5f0e0:	lsr	r0, r0, r2
   5f0e4:	orr	r0, r0, r1, lsl r3
   5f0e8:	lsr	r1, r1, r2
   5f0ec:	add	r4, r4, r2
   5f0f0:	b	5ee2c <__adddf3+0xec>

0005f0f4 <__aeabi_frsub>:
   5f0f4:	eor	r0, r0, #-2147483648	; 0x80000000
   5f0f8:	b	5f100 <__addsf3>

0005f0fc <__aeabi_fsub>:
   5f0fc:	eor	r1, r1, #-2147483648	; 0x80000000

0005f100 <__addsf3>:
   5f100:	lsls	r2, r0, #1
   5f104:	lslsne	r3, r1, #1
   5f108:	teqne	r2, r3
   5f10c:	mvnsne	ip, r2, asr #24
   5f110:	mvnsne	ip, r3, asr #24
   5f114:	beq	5f20c <__addsf3+0x10c>
   5f118:	lsr	r2, r2, #24
   5f11c:	rsbs	r3, r2, r3, lsr #24
   5f120:	addgt	r2, r2, r3
   5f124:	eorgt	r1, r0, r1
   5f128:	eorgt	r0, r1, r0
   5f12c:	eorgt	r1, r0, r1
   5f130:	rsblt	r3, r3, #0
   5f134:	cmp	r3, #25
   5f138:	bxhi	lr
   5f13c:	tst	r0, #-2147483648	; 0x80000000
   5f140:	orr	r0, r0, #8388608	; 0x800000
   5f144:	bic	r0, r0, #-16777216	; 0xff000000
   5f148:	rsbne	r0, r0, #0
   5f14c:	tst	r1, #-2147483648	; 0x80000000
   5f150:	orr	r1, r1, #8388608	; 0x800000
   5f154:	bic	r1, r1, #-16777216	; 0xff000000
   5f158:	rsbne	r1, r1, #0
   5f15c:	teq	r2, r3
   5f160:	beq	5f1f4 <__addsf3+0xf4>
   5f164:	sub	r2, r2, #1
   5f168:	adds	r0, r0, r1, asr r3
   5f16c:	rsb	r3, r3, #32
   5f170:	lsl	r1, r1, r3
   5f174:	and	r3, r0, #-2147483648	; 0x80000000
   5f178:	bpl	5f184 <__addsf3+0x84>
   5f17c:	rsbs	r1, r1, #0
   5f180:	rsc	r0, r0, #0
   5f184:	cmp	r0, #8388608	; 0x800000
   5f188:	bcc	5f1bc <__addsf3+0xbc>
   5f18c:	cmp	r0, #16777216	; 0x1000000
   5f190:	bcc	5f1a8 <__addsf3+0xa8>
   5f194:	lsrs	r0, r0, #1
   5f198:	rrx	r1, r1
   5f19c:	add	r2, r2, #1
   5f1a0:	cmp	r2, #254	; 0xfe
   5f1a4:	bcs	5f260 <__addsf3+0x160>
   5f1a8:	cmp	r1, #-2147483648	; 0x80000000
   5f1ac:	adc	r0, r0, r2, lsl #23
   5f1b0:	biceq	r0, r0, #1
   5f1b4:	orr	r0, r0, r3
   5f1b8:	bx	lr
   5f1bc:	lsls	r1, r1, #1
   5f1c0:	adc	r0, r0, r0
   5f1c4:	tst	r0, #8388608	; 0x800000
   5f1c8:	sub	r2, r2, #1
   5f1cc:	bne	5f1a8 <__addsf3+0xa8>
   5f1d0:	clz	ip, r0
   5f1d4:	sub	ip, ip, #8
   5f1d8:	subs	r2, r2, ip
   5f1dc:	lsl	r0, r0, ip
   5f1e0:	addge	r0, r0, r2, lsl #23
   5f1e4:	rsblt	r2, r2, #0
   5f1e8:	orrge	r0, r0, r3
   5f1ec:	orrlt	r0, r3, r0, lsr r2
   5f1f0:	bx	lr
   5f1f4:	teq	r2, #0
   5f1f8:	eor	r1, r1, #8388608	; 0x800000
   5f1fc:	eoreq	r0, r0, #8388608	; 0x800000
   5f200:	addeq	r2, r2, #1
   5f204:	subne	r3, r3, #1
   5f208:	b	5f164 <__addsf3+0x64>
   5f20c:	lsl	r3, r1, #1
   5f210:	mvns	ip, r2, asr #24
   5f214:	mvnsne	ip, r3, asr #24
   5f218:	beq	5f26c <__addsf3+0x16c>
   5f21c:	teq	r2, r3
   5f220:	beq	5f230 <__addsf3+0x130>
   5f224:	teq	r2, #0
   5f228:	moveq	r0, r1
   5f22c:	bx	lr
   5f230:	teq	r0, r1
   5f234:	movne	r0, #0
   5f238:	bxne	lr
   5f23c:	tst	r2, #-16777216	; 0xff000000
   5f240:	bne	5f250 <__addsf3+0x150>
   5f244:	lsls	r0, r0, #1
   5f248:	orrcs	r0, r0, #-2147483648	; 0x80000000
   5f24c:	bx	lr
   5f250:	adds	r2, r2, #33554432	; 0x2000000
   5f254:	addcc	r0, r0, #8388608	; 0x800000
   5f258:	bxcc	lr
   5f25c:	and	r3, r0, #-2147483648	; 0x80000000
   5f260:	orr	r0, r3, #2130706432	; 0x7f000000
   5f264:	orr	r0, r0, #8388608	; 0x800000
   5f268:	bx	lr
   5f26c:	mvns	r2, r2, asr #24
   5f270:	movne	r0, r1
   5f274:	mvnseq	r3, r3, asr #24
   5f278:	movne	r1, r0
   5f27c:	lsls	r2, r0, #9
   5f280:	lslseq	r3, r1, #9
   5f284:	teqeq	r0, r1
   5f288:	orrne	r0, r0, #4194304	; 0x400000
   5f28c:	bx	lr

0005f290 <__aeabi_ui2f>:
   5f290:	mov	r3, #0
   5f294:	b	5f2a0 <__aeabi_i2f+0x8>

0005f298 <__aeabi_i2f>:
   5f298:	ands	r3, r0, #-2147483648	; 0x80000000
   5f29c:	rsbmi	r0, r0, #0
   5f2a0:	movs	ip, r0
   5f2a4:	bxeq	lr
   5f2a8:	orr	r3, r3, #1258291200	; 0x4b000000
   5f2ac:	mov	r1, r0
   5f2b0:	mov	r0, #0
   5f2b4:	b	5f2f8 <__aeabi_l2f+0x30>

0005f2b8 <__aeabi_ul2f>:
   5f2b8:	orrs	r2, r0, r1
   5f2bc:	bxeq	lr
   5f2c0:	mov	r3, #0
   5f2c4:	b	5f2e0 <__aeabi_l2f+0x18>

0005f2c8 <__aeabi_l2f>:
   5f2c8:	orrs	r2, r0, r1
   5f2cc:	bxeq	lr
   5f2d0:	ands	r3, r1, #-2147483648	; 0x80000000
   5f2d4:	bpl	5f2e0 <__aeabi_l2f+0x18>
   5f2d8:	rsbs	r0, r0, #0
   5f2dc:	rsc	r1, r1, #0
   5f2e0:	movs	ip, r1
   5f2e4:	moveq	ip, r0
   5f2e8:	moveq	r1, r0
   5f2ec:	moveq	r0, #0
   5f2f0:	orr	r3, r3, #1526726656	; 0x5b000000
   5f2f4:	subeq	r3, r3, #268435456	; 0x10000000
   5f2f8:	sub	r3, r3, #8388608	; 0x800000
   5f2fc:	clz	r2, ip
   5f300:	subs	r2, r2, #8
   5f304:	sub	r3, r3, r2, lsl #23
   5f308:	blt	5f328 <__aeabi_l2f+0x60>
   5f30c:	add	r3, r3, r1, lsl r2
   5f310:	lsl	ip, r0, r2
   5f314:	rsb	r2, r2, #32
   5f318:	cmp	ip, #-2147483648	; 0x80000000
   5f31c:	adc	r0, r3, r0, lsr r2
   5f320:	biceq	r0, r0, #1
   5f324:	bx	lr
   5f328:	add	r2, r2, #32
   5f32c:	lsl	ip, r1, r2
   5f330:	rsb	r2, r2, #32
   5f334:	orrs	r0, r0, ip, lsl #1
   5f338:	adc	r0, r3, r1, lsr r2
   5f33c:	biceq	r0, r0, ip, lsr #31
   5f340:	bx	lr

0005f344 <__aeabi_f2lz>:
   5f344:	vmov	s15, r0
   5f348:	vcmpe.f32	s15, #0.0
   5f34c:	vmrs	APSR_nzcv, fpscr
   5f350:	bmi	5f358 <__aeabi_f2lz+0x14>
   5f354:	b	5f3a0 <__aeabi_f2ulz>
   5f358:	push	{r4, lr}
   5f35c:	eor	r0, r0, #-2147483648	; 0x80000000
   5f360:	bl	5f3a0 <__aeabi_f2ulz>
   5f364:	rsbs	r0, r0, #0
   5f368:	rsc	r1, r1, #0
   5f36c:	pop	{r4, pc}

0005f370 <__aeabi_d2lz>:
   5f370:	vmov	d7, r0, r1
   5f374:	vcmpe.f64	d7, #0.0
   5f378:	vmrs	APSR_nzcv, fpscr
   5f37c:	bmi	5f384 <__aeabi_d2lz+0x14>
   5f380:	b	5f3e0 <__aeabi_d2ulz>
   5f384:	push	{r4, lr}
   5f388:	eor	r1, r1, #-2147483648	; 0x80000000
   5f38c:	bl	5f3e0 <__aeabi_d2ulz>
   5f390:	rsbs	r0, r0, #0
   5f394:	rsc	r1, r1, #0
   5f398:	pop	{r4, pc}
   5f39c:	andeq	r0, r0, r0

0005f3a0 <__aeabi_f2ulz>:
   5f3a0:	vmov	s15, r0
   5f3a4:	vldr	d5, [pc, #36]	; 5f3d0 <__aeabi_f2ulz+0x30>
   5f3a8:	vcvt.f64.f32	d6, s15
   5f3ac:	vldr	d7, [pc, #36]	; 5f3d8 <__aeabi_f2ulz+0x38>
   5f3b0:	vmul.f64	d7, d6, d7
   5f3b4:	vcvt.u32.f64	s14, d7
   5f3b8:	vcvt.f64.u32	d4, s14
   5f3bc:	vmov	r1, s14
   5f3c0:	vmls.f64	d6, d4, d5
   5f3c4:	vcvt.u32.f64	s15, d6
   5f3c8:	vmov	r0, s15
   5f3cc:	bx	lr
   5f3d0:	.word	0x00000000
   5f3d4:	.word	0x41f00000
   5f3d8:	.word	0x00000000
   5f3dc:	.word	0x3df00000

0005f3e0 <__aeabi_d2ulz>:
   5f3e0:	vmov	d6, r0, r1
   5f3e4:	vldr	d7, [pc, #36]	; 5f410 <__aeabi_d2ulz+0x30>
   5f3e8:	vldr	d5, [pc, #40]	; 5f418 <__aeabi_d2ulz+0x38>
   5f3ec:	vmul.f64	d7, d6, d7
   5f3f0:	vcvt.u32.f64	s14, d7
   5f3f4:	vcvt.f64.u32	d4, s14
   5f3f8:	vmov	r1, s14
   5f3fc:	vmls.f64	d6, d4, d5
   5f400:	vcvt.u32.f64	s15, d6
   5f404:	vmov	r0, s15
   5f408:	bx	lr
   5f40c:	nop			; (mov r0, r0)
   5f410:	.word	0x00000000
   5f414:	.word	0x3df00000
   5f418:	.word	0x00000000
   5f41c:	.word	0x41f00000

Disassembly of section .fini:

0005f420 <_fini>:
   5f420:	push	{r3, lr}
   5f424:	pop	{r3, pc}
