
../repos/coreutils/src/sort:     file format elf32-littlearm


Disassembly of section .init:

00011df4 <.init>:
   11df4:	push	{r3, lr}
   11df8:	bl	123bc <__assert_fail@plt+0x50>
   11dfc:	pop	{r3, pc}

Disassembly of section .plt:

00011e00 <pthread_mutex_unlock@plt-0x14>:
   11e00:	push	{lr}		; (str lr, [sp, #-4]!)
   11e04:	ldr	lr, [pc, #4]	; 11e10 <pthread_mutex_unlock@plt-0x4>
   11e08:	add	lr, pc, lr
   11e0c:	ldr	pc, [lr, #8]!
   11e10:	strdeq	r7, [r2], -r0

00011e14 <pthread_mutex_unlock@plt>:
   11e14:	add	ip, pc, #0, 12
   11e18:	add	ip, ip, #159744	; 0x27000
   11e1c:	ldr	pc, [ip, #496]!	; 0x1f0

00011e20 <fdopen@plt>:
   11e20:	add	ip, pc, #0, 12
   11e24:	add	ip, ip, #159744	; 0x27000
   11e28:	ldr	pc, [ip, #488]!	; 0x1e8

00011e2c <calloc@plt>:
   11e2c:	add	ip, pc, #0, 12
   11e30:	add	ip, ip, #159744	; 0x27000
   11e34:	ldr	pc, [ip, #480]!	; 0x1e0

00011e38 <fputs_unlocked@plt>:
   11e38:	add	ip, pc, #0, 12
   11e3c:	add	ip, ip, #159744	; 0x27000
   11e40:	ldr	pc, [ip, #472]!	; 0x1d8

00011e44 <raise@plt>:
   11e44:	add	ip, pc, #0, 12
   11e48:	add	ip, ip, #159744	; 0x27000
   11e4c:	ldr	pc, [ip, #464]!	; 0x1d0

00011e50 <strcmp@plt>:
   11e50:	add	ip, pc, #0, 12
   11e54:	add	ip, ip, #159744	; 0x27000
   11e58:	ldr	pc, [ip, #456]!	; 0x1c8

00011e5c <strtol@plt>:
   11e5c:	add	ip, pc, #0, 12
   11e60:	add	ip, ip, #159744	; 0x27000
   11e64:	ldr	pc, [ip, #448]!	; 0x1c0

00011e68 <posix_fadvise64@plt>:
   11e68:	add	ip, pc, #0, 12
   11e6c:	add	ip, ip, #159744	; 0x27000
   11e70:	ldr	pc, [ip, #440]!	; 0x1b8

00011e74 <pause@plt>:
   11e74:	add	ip, pc, #0, 12
   11e78:	add	ip, ip, #159744	; 0x27000
   11e7c:	ldr	pc, [ip, #432]!	; 0x1b0

00011e80 <pthread_mutex_destroy@plt>:
   11e80:	add	ip, pc, #0, 12
   11e84:	add	ip, ip, #159744	; 0x27000
   11e88:	ldr	pc, [ip, #424]!	; 0x1a8

00011e8c <fflush@plt>:
   11e8c:	add	ip, pc, #0, 12
   11e90:	add	ip, ip, #159744	; 0x27000
   11e94:	ldr	pc, [ip, #416]!	; 0x1a0

00011e98 <wcwidth@plt>:
   11e98:	add	ip, pc, #0, 12
   11e9c:	add	ip, ip, #159744	; 0x27000
   11ea0:	ldr	pc, [ip, #408]!	; 0x198

00011ea4 <memmove@plt>:
   11ea4:	add	ip, pc, #0, 12
   11ea8:	add	ip, ip, #159744	; 0x27000
   11eac:	ldr	pc, [ip, #400]!	; 0x190

00011eb0 <free@plt>:
   11eb0:	add	ip, pc, #0, 12
   11eb4:	add	ip, ip, #159744	; 0x27000
   11eb8:	ldr	pc, [ip, #392]!	; 0x188

00011ebc <pthread_mutex_lock@plt>:
   11ebc:	add	ip, pc, #0, 12
   11ec0:	add	ip, ip, #159744	; 0x27000
   11ec4:	ldr	pc, [ip, #384]!	; 0x180

00011ec8 <nanosleep@plt>:
   11ec8:	add	ip, pc, #0, 12
   11ecc:	add	ip, ip, #159744	; 0x27000
   11ed0:	ldr	pc, [ip, #376]!	; 0x178

00011ed4 <ferror@plt>:
   11ed4:	add	ip, pc, #0, 12
   11ed8:	add	ip, ip, #159744	; 0x27000
   11edc:	ldr	pc, [ip, #368]!	; 0x170

00011ee0 <_exit@plt>:
   11ee0:	add	ip, pc, #0, 12
   11ee4:	add	ip, ip, #159744	; 0x27000
   11ee8:	ldr	pc, [ip, #360]!	; 0x168

00011eec <memcpy@plt>:
   11eec:	add	ip, pc, #0, 12
   11ef0:	add	ip, ip, #159744	; 0x27000
   11ef4:	ldr	pc, [ip, #352]!	; 0x160

00011ef8 <execlp@plt>:
   11ef8:	add	ip, pc, #0, 12
   11efc:	add	ip, ip, #159744	; 0x27000
   11f00:	ldr	pc, [ip, #344]!	; 0x158

00011f04 <pthread_mutex_init@plt>:
   11f04:	add	ip, pc, #0, 12
   11f08:	add	ip, ip, #159744	; 0x27000
   11f0c:	ldr	pc, [ip, #336]!	; 0x150

00011f10 <__strtoull_internal@plt>:
   11f10:	add	ip, pc, #0, 12
   11f14:	add	ip, ip, #159744	; 0x27000
   11f18:	ldr	pc, [ip, #328]!	; 0x148

00011f1c <mbsinit@plt>:
   11f1c:	add	ip, pc, #0, 12
   11f20:	add	ip, ip, #159744	; 0x27000
   11f24:	ldr	pc, [ip, #320]!	; 0x140

00011f28 <signal@plt>:
   11f28:	add	ip, pc, #0, 12
   11f2c:	add	ip, ip, #159744	; 0x27000
   11f30:	ldr	pc, [ip, #312]!	; 0x138

00011f34 <__sched_cpucount@plt>:
   11f34:	add	ip, pc, #0, 12
   11f38:	add	ip, ip, #159744	; 0x27000
   11f3c:	ldr	pc, [ip, #304]!	; 0x130

00011f40 <strtold@plt>:
   11f40:	add	ip, pc, #0, 12
   11f44:	add	ip, ip, #159744	; 0x27000
   11f48:	ldr	pc, [ip, #296]!	; 0x128

00011f4c <ftruncate64@plt>:
   11f4c:	add	ip, pc, #0, 12
   11f50:	add	ip, ip, #159744	; 0x27000
   11f54:	ldr	pc, [ip, #288]!	; 0x120

00011f58 <fwrite_unlocked@plt>:
   11f58:	add	ip, pc, #0, 12
   11f5c:	add	ip, ip, #159744	; 0x27000
   11f60:	ldr	pc, [ip, #280]!	; 0x118

00011f64 <memcmp@plt>:
   11f64:	add	ip, pc, #0, 12
   11f68:	add	ip, ip, #159744	; 0x27000
   11f6c:	ldr	pc, [ip, #272]!	; 0x110

00011f70 <stpcpy@plt>:
   11f70:	add	ip, pc, #0, 12
   11f74:	add	ip, ip, #159744	; 0x27000
   11f78:	ldr	pc, [ip, #264]!	; 0x108

00011f7c <dcgettext@plt>:
   11f7c:	add	ip, pc, #0, 12
   11f80:	add	ip, ip, #159744	; 0x27000
   11f84:	ldr	pc, [ip, #256]!	; 0x100

00011f88 <pthread_cond_init@plt>:
   11f88:	add	ip, pc, #0, 12
   11f8c:	add	ip, ip, #159744	; 0x27000
   11f90:	ldr	pc, [ip, #248]!	; 0xf8

00011f94 <sysconf@plt>:
   11f94:	add	ip, pc, #0, 12
   11f98:	add	ip, ip, #159744	; 0x27000
   11f9c:	ldr	pc, [ip, #240]!	; 0xf0

00011fa0 <unlink@plt>:
   11fa0:	add	ip, pc, #0, 12
   11fa4:	add	ip, ip, #159744	; 0x27000
   11fa8:	ldr	pc, [ip, #232]!	; 0xe8

00011fac <dup2@plt>:
   11fac:	add	ip, pc, #0, 12
   11fb0:	add	ip, ip, #159744	; 0x27000
   11fb4:	ldr	pc, [ip, #224]!	; 0xe0

00011fb8 <getrlimit64@plt>:
   11fb8:	add	ip, pc, #0, 12
   11fbc:	add	ip, ip, #159744	; 0x27000
   11fc0:	ldr	pc, [ip, #216]!	; 0xd8

00011fc4 <realloc@plt>:
   11fc4:	add	ip, pc, #0, 12
   11fc8:	add	ip, ip, #159744	; 0x27000
   11fcc:	ldr	pc, [ip, #208]!	; 0xd0

00011fd0 <sigismember@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #159744	; 0x27000
   11fd8:	ldr	pc, [ip, #200]!	; 0xc8

00011fdc <textdomain@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #159744	; 0x27000
   11fe4:	ldr	pc, [ip, #192]!	; 0xc0

00011fe8 <iswcntrl@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #159744	; 0x27000
   11ff0:	ldr	pc, [ip, #184]!	; 0xb8

00011ff4 <pthread_cond_destroy@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #159744	; 0x27000
   11ffc:	ldr	pc, [ip, #176]!	; 0xb0

00012000 <fflush_unlocked@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #159744	; 0x27000
   12008:	ldr	pc, [ip, #168]!	; 0xa8

0001200c <iswprint@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #159744	; 0x27000
   12014:	ldr	pc, [ip, #160]!	; 0xa0

00012018 <__fxstat64@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #159744	; 0x27000
   12020:	ldr	pc, [ip, #152]!	; 0x98

00012024 <sigaction@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #159744	; 0x27000
   1202c:	ldr	pc, [ip, #144]!	; 0x90

00012030 <mkostemp64@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #159744	; 0x27000
   12038:	ldr	pc, [ip, #136]!	; 0x88

0001203c <fwrite@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #159744	; 0x27000
   12044:	ldr	pc, [ip, #128]!	; 0x80

00012048 <lseek64@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #159744	; 0x27000
   12050:	ldr	pc, [ip, #120]!	; 0x78

00012054 <__stpcpy_chk@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #159744	; 0x27000
   1205c:	ldr	pc, [ip, #112]!	; 0x70

00012060 <waitpid@plt>:
   12060:	add	ip, pc, #0, 12
   12064:	add	ip, ip, #159744	; 0x27000
   12068:	ldr	pc, [ip, #104]!	; 0x68

0001206c <__ctype_get_mb_cur_max@plt>:
   1206c:	add	ip, pc, #0, 12
   12070:	add	ip, ip, #159744	; 0x27000
   12074:	ldr	pc, [ip, #96]!	; 0x60

00012078 <pthread_sigmask@plt>:
   12078:	add	ip, pc, #0, 12
   1207c:	add	ip, ip, #159744	; 0x27000
   12080:	ldr	pc, [ip, #88]!	; 0x58

00012084 <pthread_create@plt>:
   12084:	add	ip, pc, #0, 12
   12088:	add	ip, ip, #159744	; 0x27000
   1208c:	ldr	pc, [ip, #80]!	; 0x50

00012090 <__fpending@plt>:
   12090:	add	ip, pc, #0, 12
   12094:	add	ip, ip, #159744	; 0x27000
   12098:	ldr	pc, [ip, #72]!	; 0x48

0001209c <mbrtowc@plt>:
   1209c:	add	ip, pc, #0, 12
   120a0:	add	ip, ip, #159744	; 0x27000
   120a4:	ldr	pc, [ip, #64]!	; 0x40

000120a8 <error@plt>:
   120a8:	add	ip, pc, #0, 12
   120ac:	add	ip, ip, #159744	; 0x27000
   120b0:	ldr	pc, [ip, #56]!	; 0x38

000120b4 <open64@plt>:
   120b4:	add	ip, pc, #0, 12
   120b8:	add	ip, ip, #159744	; 0x27000
   120bc:	ldr	pc, [ip, #48]!	; 0x30

000120c0 <strcoll@plt>:
   120c0:	add	ip, pc, #0, 12
   120c4:	add	ip, ip, #159744	; 0x27000
   120c8:	ldr	pc, [ip, #40]!	; 0x28

000120cc <getenv@plt>:
   120cc:	add	ip, pc, #0, 12
   120d0:	add	ip, ip, #159744	; 0x27000
   120d4:	ldr	pc, [ip, #32]!

000120d8 <mkstemp64@plt>:
   120d8:	add	ip, pc, #0, 12
   120dc:	add	ip, ip, #159744	; 0x27000
   120e0:	ldr	pc, [ip, #24]!

000120e4 <sysinfo@plt>:
   120e4:	add	ip, pc, #0, 12
   120e8:	add	ip, ip, #159744	; 0x27000
   120ec:	ldr	pc, [ip, #16]!

000120f0 <malloc@plt>:
   120f0:	add	ip, pc, #0, 12
   120f4:	add	ip, ip, #159744	; 0x27000
   120f8:	ldr	pc, [ip, #8]!

000120fc <sigaddset@plt>:
   120fc:	add	ip, pc, #0, 12
   12100:	add	ip, ip, #159744	; 0x27000
   12104:	ldr	pc, [ip, #0]!

00012108 <__libc_start_main@plt>:
   12108:	add	ip, pc, #0, 12
   1210c:	add	ip, ip, #155648	; 0x26000
   12110:	ldr	pc, [ip, #4088]!	; 0xff8

00012114 <__freading@plt>:
   12114:	add	ip, pc, #0, 12
   12118:	add	ip, ip, #155648	; 0x26000
   1211c:	ldr	pc, [ip, #4080]!	; 0xff0

00012120 <__ctype_toupper_loc@plt>:
   12120:	add	ip, pc, #0, 12
   12124:	add	ip, ip, #155648	; 0x26000
   12128:	ldr	pc, [ip, #4072]!	; 0xfe8

0001212c <__gmon_start__@plt>:
   1212c:	add	ip, pc, #0, 12
   12130:	add	ip, ip, #155648	; 0x26000
   12134:	ldr	pc, [ip, #4064]!	; 0xfe0

00012138 <getopt_long@plt>:
   12138:	add	ip, pc, #0, 12
   1213c:	add	ip, ip, #155648	; 0x26000
   12140:	ldr	pc, [ip, #4056]!	; 0xfd8

00012144 <__ctype_b_loc@plt>:
   12144:	add	ip, pc, #0, 12
   12148:	add	ip, ip, #155648	; 0x26000
   1214c:	ldr	pc, [ip, #4048]!	; 0xfd0

00012150 <exit@plt>:
   12150:	add	ip, pc, #0, 12
   12154:	add	ip, ip, #155648	; 0x26000
   12158:	ldr	pc, [ip, #4040]!	; 0xfc8

0001215c <bcmp@plt>:
   1215c:	add	ip, pc, #0, 12
   12160:	add	ip, ip, #155648	; 0x26000
   12164:	ldr	pc, [ip, #4032]!	; 0xfc0

00012168 <strtoul@plt>:
   12168:	add	ip, pc, #0, 12
   1216c:	add	ip, ip, #155648	; 0x26000
   12170:	ldr	pc, [ip, #4024]!	; 0xfb8

00012174 <strlen@plt>:
   12174:	add	ip, pc, #0, 12
   12178:	add	ip, ip, #155648	; 0x26000
   1217c:	ldr	pc, [ip, #4016]!	; 0xfb0

00012180 <strchr@plt>:
   12180:	add	ip, pc, #0, 12
   12184:	add	ip, ip, #155648	; 0x26000
   12188:	ldr	pc, [ip, #4008]!	; 0xfa8

0001218c <strxfrm@plt>:
   1218c:	add	ip, pc, #0, 12
   12190:	add	ip, ip, #155648	; 0x26000
   12194:	ldr	pc, [ip, #4000]!	; 0xfa0

00012198 <__errno_location@plt>:
   12198:	add	ip, pc, #0, 12
   1219c:	add	ip, ip, #155648	; 0x26000
   121a0:	ldr	pc, [ip, #3992]!	; 0xf98

000121a4 <__cxa_atexit@plt>:
   121a4:	add	ip, pc, #0, 12
   121a8:	add	ip, ip, #155648	; 0x26000
   121ac:	ldr	pc, [ip, #3984]!	; 0xf90

000121b0 <setvbuf@plt>:
   121b0:	add	ip, pc, #0, 12
   121b4:	add	ip, ip, #155648	; 0x26000
   121b8:	ldr	pc, [ip, #3976]!	; 0xf88

000121bc <memset@plt>:
   121bc:	add	ip, pc, #0, 12
   121c0:	add	ip, ip, #155648	; 0x26000
   121c4:	ldr	pc, [ip, #3968]!	; 0xf80

000121c8 <fgetc@plt>:
   121c8:	add	ip, pc, #0, 12
   121cc:	add	ip, ip, #155648	; 0x26000
   121d0:	ldr	pc, [ip, #3960]!	; 0xf78

000121d4 <__printf_chk@plt>:
   121d4:	add	ip, pc, #0, 12
   121d8:	add	ip, ip, #155648	; 0x26000
   121dc:	ldr	pc, [ip, #3952]!	; 0xf70

000121e0 <write@plt>:
   121e0:	add	ip, pc, #0, 12
   121e4:	add	ip, ip, #155648	; 0x26000
   121e8:	ldr	pc, [ip, #3944]!	; 0xf68

000121ec <fileno@plt>:
   121ec:	add	ip, pc, #0, 12
   121f0:	add	ip, ip, #155648	; 0x26000
   121f4:	ldr	pc, [ip, #3936]!	; 0xf60

000121f8 <__fprintf_chk@plt>:
   121f8:	add	ip, pc, #0, 12
   121fc:	add	ip, ip, #155648	; 0x26000
   12200:	ldr	pc, [ip, #3928]!	; 0xf58

00012204 <memchr@plt>:
   12204:	add	ip, pc, #0, 12
   12208:	add	ip, ip, #155648	; 0x26000
   1220c:	ldr	pc, [ip, #3920]!	; 0xf50

00012210 <fclose@plt>:
   12210:	add	ip, pc, #0, 12
   12214:	add	ip, ip, #155648	; 0x26000
   12218:	ldr	pc, [ip, #3912]!	; 0xf48

0001221c <pipe@plt>:
   1221c:	add	ip, pc, #0, 12
   12220:	add	ip, ip, #155648	; 0x26000
   12224:	ldr	pc, [ip, #3904]!	; 0xf40

00012228 <fseeko64@plt>:
   12228:	add	ip, pc, #0, 12
   1222c:	add	ip, ip, #155648	; 0x26000
   12230:	ldr	pc, [ip, #3896]!	; 0xf38

00012234 <fcntl64@plt>:
   12234:	add	ip, pc, #0, 12
   12238:	add	ip, ip, #155648	; 0x26000
   1223c:	ldr	pc, [ip, #3888]!	; 0xf30

00012240 <__overflow@plt>:
   12240:	add	ip, pc, #0, 12
   12244:	add	ip, ip, #155648	; 0x26000
   12248:	ldr	pc, [ip, #3880]!	; 0xf28

0001224c <setlocale@plt>:
   1224c:	add	ip, pc, #0, 12
   12250:	add	ip, ip, #155648	; 0x26000
   12254:	ldr	pc, [ip, #3872]!	; 0xf20

00012258 <sigemptyset@plt>:
   12258:	add	ip, pc, #0, 12
   1225c:	add	ip, ip, #155648	; 0x26000
   12260:	ldr	pc, [ip, #3864]!	; 0xf18

00012264 <fork@plt>:
   12264:	add	ip, pc, #0, 12
   12268:	add	ip, ip, #155648	; 0x26000
   1226c:	ldr	pc, [ip, #3856]!	; 0xf10

00012270 <__explicit_bzero_chk@plt>:
   12270:	add	ip, pc, #0, 12
   12274:	add	ip, ip, #155648	; 0x26000
   12278:	ldr	pc, [ip, #3848]!	; 0xf08

0001227c <strrchr@plt>:
   1227c:	add	ip, pc, #0, 12
   12280:	add	ip, ip, #155648	; 0x26000
   12284:	ldr	pc, [ip, #3840]!	; 0xf00

00012288 <pthread_join@plt>:
   12288:	add	ip, pc, #0, 12
   1228c:	add	ip, ip, #155648	; 0x26000
   12290:	ldr	pc, [ip, #3832]!	; 0xef8

00012294 <nl_langinfo@plt>:
   12294:	add	ip, pc, #0, 12
   12298:	add	ip, ip, #155648	; 0x26000
   1229c:	ldr	pc, [ip, #3824]!	; 0xef0

000122a0 <localeconv@plt>:
   122a0:	add	ip, pc, #0, 12
   122a4:	add	ip, ip, #155648	; 0x26000
   122a8:	ldr	pc, [ip, #3816]!	; 0xee8

000122ac <clearerr_unlocked@plt>:
   122ac:	add	ip, pc, #0, 12
   122b0:	add	ip, ip, #155648	; 0x26000
   122b4:	ldr	pc, [ip, #3808]!	; 0xee0

000122b8 <fopen64@plt>:
   122b8:	add	ip, pc, #0, 12
   122bc:	add	ip, ip, #155648	; 0x26000
   122c0:	ldr	pc, [ip, #3800]!	; 0xed8

000122c4 <qsort@plt>:
   122c4:	add	ip, pc, #0, 12
   122c8:	add	ip, ip, #155648	; 0x26000
   122cc:	ldr	pc, [ip, #3792]!	; 0xed0

000122d0 <pipe2@plt>:
   122d0:	add	ip, pc, #0, 12
   122d4:	add	ip, ip, #155648	; 0x26000
   122d8:	ldr	pc, [ip, #3784]!	; 0xec8

000122dc <pthread_cond_wait@plt>:
   122dc:	add	ip, pc, #0, 12
   122e0:	add	ip, ip, #155648	; 0x26000
   122e4:	ldr	pc, [ip, #3776]!	; 0xec0

000122e8 <euidaccess@plt>:
   122e8:	add	ip, pc, #0, 12
   122ec:	add	ip, ip, #155648	; 0x26000
   122f0:	ldr	pc, [ip, #3768]!	; 0xeb8

000122f4 <sched_getaffinity@plt>:
   122f4:	add	ip, pc, #0, 12
   122f8:	add	ip, ip, #155648	; 0x26000
   122fc:	ldr	pc, [ip, #3760]!	; 0xeb0

00012300 <bindtextdomain@plt>:
   12300:	add	ip, pc, #0, 12
   12304:	add	ip, ip, #155648	; 0x26000
   12308:	ldr	pc, [ip, #3752]!	; 0xea8

0001230c <fread_unlocked@plt>:
   1230c:	add	ip, pc, #0, 12
   12310:	add	ip, ip, #155648	; 0x26000
   12314:	ldr	pc, [ip, #3744]!	; 0xea0

00012318 <getrandom@plt>:
   12318:	add	ip, pc, #0, 12
   1231c:	add	ip, ip, #155648	; 0x26000
   12320:	ldr	pc, [ip, #3736]!	; 0xe98

00012324 <__xstat64@plt>:
   12324:	add	ip, pc, #0, 12
   12328:	add	ip, ip, #155648	; 0x26000
   1232c:	ldr	pc, [ip, #3728]!	; 0xe90

00012330 <strncmp@plt>:
   12330:	add	ip, pc, #0, 12
   12334:	add	ip, ip, #155648	; 0x26000
   12338:	ldr	pc, [ip, #3720]!	; 0xe88

0001233c <pthread_cond_signal@plt>:
   1233c:	add	ip, pc, #0, 12
   12340:	add	ip, ip, #155648	; 0x26000
   12344:	ldr	pc, [ip, #3712]!	; 0xe80

00012348 <abort@plt>:
   12348:	add	ip, pc, #0, 12
   1234c:	add	ip, ip, #155648	; 0x26000
   12350:	ldr	pc, [ip, #3704]!	; 0xe78

00012354 <close@plt>:
   12354:	add	ip, pc, #0, 12
   12358:	add	ip, ip, #155648	; 0x26000
   1235c:	ldr	pc, [ip, #3696]!	; 0xe70

00012360 <dcngettext@plt>:
   12360:	add	ip, pc, #0, 12
   12364:	add	ip, ip, #155648	; 0x26000
   12368:	ldr	pc, [ip, #3688]!	; 0xe68

0001236c <__assert_fail@plt>:
   1236c:	add	ip, pc, #0, 12
   12370:	add	ip, ip, #155648	; 0x26000
   12374:	ldr	pc, [ip, #3680]!	; 0xe60

Disassembly of section .text:

00012380 <_obstack_begin@@Base-0x13604>:
   12380:	mov	fp, #0
   12384:	mov	lr, #0
   12388:	pop	{r1}		; (ldr r1, [sp], #4)
   1238c:	mov	r2, sp
   12390:	push	{r2}		; (str r2, [sp, #-4]!)
   12394:	push	{r0}		; (str r0, [sp, #-4]!)
   12398:	ldr	ip, [pc, #16]	; 123b0 <__assert_fail@plt+0x44>
   1239c:	push	{ip}		; (str ip, [sp, #-4]!)
   123a0:	ldr	r0, [pc, #12]	; 123b4 <__assert_fail@plt+0x48>
   123a4:	ldr	r3, [pc, #12]	; 123b8 <__assert_fail@plt+0x4c>
   123a8:	bl	12108 <__libc_start_main@plt>
   123ac:	bl	12348 <abort@plt>
   123b0:			; <UNDEFINED> instruction: 0x000263b8
   123b4:	andeq	r2, r1, r0, asr #17
   123b8:	andeq	r6, r2, r8, asr r3
   123bc:	ldr	r3, [pc, #20]	; 123d8 <__assert_fail@plt+0x6c>
   123c0:	ldr	r2, [pc, #20]	; 123dc <__assert_fail@plt+0x70>
   123c4:	add	r3, pc, r3
   123c8:	ldr	r2, [r3, r2]
   123cc:	cmp	r2, #0
   123d0:	bxeq	lr
   123d4:	b	1212c <__gmon_start__@plt>
   123d8:	andeq	r6, r2, r4, lsr ip
   123dc:	ldrdeq	r0, [r0], -r8
   123e0:	ldr	r0, [pc, #24]	; 12400 <__assert_fail@plt+0x94>
   123e4:	ldr	r3, [pc, #24]	; 12404 <__assert_fail@plt+0x98>
   123e8:	cmp	r3, r0
   123ec:	bxeq	lr
   123f0:	ldr	r3, [pc, #16]	; 12408 <__assert_fail@plt+0x9c>
   123f4:	cmp	r3, #0
   123f8:	bxeq	lr
   123fc:	bx	r3
   12400:			; <UNDEFINED> instruction: 0x000392bc
   12404:			; <UNDEFINED> instruction: 0x000392bc
   12408:	andeq	r0, r0, r0
   1240c:	ldr	r0, [pc, #36]	; 12438 <__assert_fail@plt+0xcc>
   12410:	ldr	r1, [pc, #36]	; 1243c <__assert_fail@plt+0xd0>
   12414:	sub	r1, r1, r0
   12418:	asr	r1, r1, #2
   1241c:	add	r1, r1, r1, lsr #31
   12420:	asrs	r1, r1, #1
   12424:	bxeq	lr
   12428:	ldr	r3, [pc, #16]	; 12440 <__assert_fail@plt+0xd4>
   1242c:	cmp	r3, #0
   12430:	bxeq	lr
   12434:	bx	r3
   12438:			; <UNDEFINED> instruction: 0x000392bc
   1243c:			; <UNDEFINED> instruction: 0x000392bc
   12440:	andeq	r0, r0, r0
   12444:	push	{r4, lr}
   12448:	ldr	r4, [pc, #24]	; 12468 <__assert_fail@plt+0xfc>
   1244c:	ldrb	r3, [r4]
   12450:	cmp	r3, #0
   12454:	popne	{r4, pc}
   12458:	bl	123e0 <__assert_fail@plt+0x74>
   1245c:	mov	r3, #1
   12460:	strb	r3, [r4]
   12464:	pop	{r4, pc}
   12468:	andeq	r9, r3, r4, ror #5
   1246c:	b	1240c <__assert_fail@plt+0xa0>
   12470:	push	{fp, lr}
   12474:	mov	fp, sp
   12478:	sub	sp, sp, #56	; 0x38
   1247c:	mov	r4, r0
   12480:	cmp	r0, #0
   12484:	bne	12878 <__assert_fail@plt+0x50c>
   12488:	movw	r1, #25611	; 0x640b
   1248c:	mov	r0, #0
   12490:	mov	r2, #5
   12494:	movt	r1, #2
   12498:	bl	11f7c <dcgettext@plt>
   1249c:	mov	r1, r0
   124a0:	movw	r0, #39116	; 0x98cc
   124a4:	movt	r0, #3
   124a8:	ldr	r2, [r0]
   124ac:	mov	r0, #1
   124b0:	mov	r3, r2
   124b4:	bl	121d4 <__printf_chk@plt>
   124b8:	movw	r1, #25682	; 0x6452
   124bc:	mov	r0, #0
   124c0:	mov	r2, #5
   124c4:	movt	r1, #2
   124c8:	bl	11f7c <dcgettext@plt>
   124cc:	movw	r7, #37596	; 0x92dc
   124d0:	movt	r7, #3
   124d4:	ldr	r1, [r7]
   124d8:	bl	11e38 <fputs_unlocked@plt>
   124dc:	movw	r1, #30248	; 0x7628
   124e0:	mov	r0, #0
   124e4:	mov	r2, #5
   124e8:	movt	r1, #2
   124ec:	bl	11f7c <dcgettext@plt>
   124f0:	ldr	r1, [r7]
   124f4:	bl	11e38 <fputs_unlocked@plt>
   124f8:	movw	r1, #30304	; 0x7660
   124fc:	mov	r0, #0
   12500:	mov	r2, #5
   12504:	movt	r1, #2
   12508:	bl	11f7c <dcgettext@plt>
   1250c:	ldr	r1, [r7]
   12510:	bl	11e38 <fputs_unlocked@plt>
   12514:	movw	r1, #25745	; 0x6491
   12518:	mov	r0, #0
   1251c:	mov	r2, #5
   12520:	movt	r1, #2
   12524:	bl	11f7c <dcgettext@plt>
   12528:	ldr	r1, [r7]
   1252c:	bl	11e38 <fputs_unlocked@plt>
   12530:	movw	r1, #25765	; 0x64a5
   12534:	mov	r0, #0
   12538:	mov	r2, #5
   1253c:	movt	r1, #2
   12540:	bl	11f7c <dcgettext@plt>
   12544:	ldr	r1, [r7]
   12548:	bl	11e38 <fputs_unlocked@plt>
   1254c:	movw	r1, #25969	; 0x6571
   12550:	mov	r0, #0
   12554:	mov	r2, #5
   12558:	movt	r1, #2
   1255c:	bl	11f7c <dcgettext@plt>
   12560:	ldr	r1, [r7]
   12564:	bl	11e38 <fputs_unlocked@plt>
   12568:	movw	r1, #26180	; 0x6644
   1256c:	mov	r0, #0
   12570:	mov	r2, #5
   12574:	movt	r1, #2
   12578:	bl	11f7c <dcgettext@plt>
   1257c:	ldr	r1, [r7]
   12580:	bl	11e38 <fputs_unlocked@plt>
   12584:	movw	r1, #26256	; 0x6690
   12588:	mov	r0, #0
   1258c:	mov	r2, #5
   12590:	movt	r1, #2
   12594:	bl	11f7c <dcgettext@plt>
   12598:	ldr	r1, [r7]
   1259c:	bl	11e38 <fputs_unlocked@plt>
   125a0:	movw	r1, #26530	; 0x67a2
   125a4:	mov	r0, #0
   125a8:	mov	r2, #5
   125ac:	movt	r1, #2
   125b0:	bl	11f7c <dcgettext@plt>
   125b4:	ldr	r1, [r7]
   125b8:	bl	11e38 <fputs_unlocked@plt>
   125bc:	movw	r1, #26808	; 0x68b8
   125c0:	mov	r0, #0
   125c4:	mov	r2, #5
   125c8:	movt	r1, #2
   125cc:	bl	11f7c <dcgettext@plt>
   125d0:	ldr	r1, [r7]
   125d4:	bl	11e38 <fputs_unlocked@plt>
   125d8:	movw	r1, #26825	; 0x68c9
   125dc:	mov	r0, #0
   125e0:	mov	r2, #5
   125e4:	movt	r1, #2
   125e8:	bl	11f7c <dcgettext@plt>
   125ec:	ldr	r1, [r7]
   125f0:	bl	11e38 <fputs_unlocked@plt>
   125f4:	movw	r1, #26943	; 0x693f
   125f8:	mov	r0, #0
   125fc:	mov	r2, #5
   12600:	movt	r1, #2
   12604:	bl	11f7c <dcgettext@plt>
   12608:	ldr	r1, [r7]
   1260c:	bl	11e38 <fputs_unlocked@plt>
   12610:	movw	r1, #27220	; 0x6a54
   12614:	mov	r0, #0
   12618:	mov	r2, #5
   1261c:	movt	r1, #2
   12620:	bl	11f7c <dcgettext@plt>
   12624:	ldr	r1, [r7]
   12628:	bl	11e38 <fputs_unlocked@plt>
   1262c:	movw	r1, #27568	; 0x6bb0
   12630:	mov	r0, #0
   12634:	mov	r2, #5
   12638:	movt	r1, #2
   1263c:	bl	11f7c <dcgettext@plt>
   12640:	ldr	r1, [r7]
   12644:	bl	11e38 <fputs_unlocked@plt>
   12648:	movw	r1, #27712	; 0x6c40
   1264c:	mov	r0, #0
   12650:	mov	r2, #5
   12654:	movt	r1, #2
   12658:	bl	11f7c <dcgettext@plt>
   1265c:	ldr	r1, [r7]
   12660:	bl	11e38 <fputs_unlocked@plt>
   12664:	movw	r1, #27928	; 0x6d18
   12668:	mov	r0, #0
   1266c:	mov	r2, #5
   12670:	movt	r1, #2
   12674:	bl	11f7c <dcgettext@plt>
   12678:	movw	r2, #28381	; 0x6edd
   1267c:	mov	r1, r0
   12680:	mov	r0, #1
   12684:	movt	r2, #2
   12688:	bl	121d4 <__printf_chk@plt>
   1268c:	movw	r1, #28386	; 0x6ee2
   12690:	mov	r0, #0
   12694:	mov	r2, #5
   12698:	movt	r1, #2
   1269c:	bl	11f7c <dcgettext@plt>
   126a0:	ldr	r1, [r7]
   126a4:	bl	11e38 <fputs_unlocked@plt>
   126a8:	movw	r1, #28450	; 0x6f22
   126ac:	mov	r0, #0
   126b0:	mov	r2, #5
   126b4:	movt	r1, #2
   126b8:	bl	11f7c <dcgettext@plt>
   126bc:	ldr	r1, [r7]
   126c0:	bl	11e38 <fputs_unlocked@plt>
   126c4:	movw	r1, #28495	; 0x6f4f
   126c8:	mov	r0, #0
   126cc:	mov	r2, #5
   126d0:	movt	r1, #2
   126d4:	bl	11f7c <dcgettext@plt>
   126d8:	ldr	r1, [r7]
   126dc:	bl	11e38 <fputs_unlocked@plt>
   126e0:	movw	r1, #28549	; 0x6f85
   126e4:	mov	r0, #0
   126e8:	mov	r2, #5
   126ec:	movt	r1, #2
   126f0:	bl	11f7c <dcgettext@plt>
   126f4:	ldr	r1, [r7]
   126f8:	bl	11e38 <fputs_unlocked@plt>
   126fc:	movw	r1, #29153	; 0x71e1
   12700:	mov	r0, #0
   12704:	mov	r2, #5
   12708:	movt	r1, #2
   1270c:	bl	11f7c <dcgettext@plt>
   12710:	ldr	r1, [r7]
   12714:	bl	11e38 <fputs_unlocked@plt>
   12718:	movw	r0, #33288	; 0x8208
   1271c:	mov	r2, #48	; 0x30
   12720:	mov	r6, sp
   12724:	movw	r5, #29538	; 0x7362
   12728:	movt	r0, #2
   1272c:	movt	r5, #2
   12730:	add	r1, r0, #32
   12734:	add	r3, r0, #16
   12738:	vld1.64	{d18-d19}, [r0], r2
   1273c:	vld1.64	{d16-d17}, [r1]
   12740:	vld1.64	{d20-d21}, [r3]
   12744:	vldr	d22, [r0]
   12748:	add	r1, r6, #32
   1274c:	add	r0, r6, #16
   12750:	vst1.64	{d16-d17}, [r1]
   12754:	movw	r1, #30379	; 0x76ab
   12758:	vst1.64	{d20-d21}, [r0]
   1275c:	mov	r0, r6
   12760:	movt	r1, #2
   12764:	vst1.64	{d18-d19}, [r0], r2
   12768:	vstr	d22, [r0]
   1276c:	mov	r0, r5
   12770:	bl	11e50 <strcmp@plt>
   12774:	cmp	r0, #0
   12778:	ldrne	r1, [r6, #8]!
   1277c:	cmpne	r1, #0
   12780:	bne	1276c <__assert_fail@plt+0x400>
   12784:	movw	r1, #30474	; 0x770a
   12788:	ldr	r6, [r6, #4]
   1278c:	mov	r0, #0
   12790:	mov	r2, #5
   12794:	movt	r1, #2
   12798:	bl	11f7c <dcgettext@plt>
   1279c:	movw	r2, #29812	; 0x7474
   127a0:	movw	r3, #30497	; 0x7721
   127a4:	mov	r1, r0
   127a8:	mov	r0, #1
   127ac:	movt	r2, #2
   127b0:	movt	r3, #2
   127b4:	bl	121d4 <__printf_chk@plt>
   127b8:	cmp	r6, #0
   127bc:	mov	r0, #5
   127c0:	mov	r1, #0
   127c4:	moveq	r6, r5
   127c8:	bl	1224c <setlocale@plt>
   127cc:	cmp	r0, #0
   127d0:	beq	12808 <__assert_fail@plt+0x49c>
   127d4:	movw	r1, #30537	; 0x7749
   127d8:	mov	r2, #3
   127dc:	movt	r1, #2
   127e0:	bl	12330 <strncmp@plt>
   127e4:	cmp	r0, #0
   127e8:	beq	12808 <__assert_fail@plt+0x49c>
   127ec:	movw	r1, #30541	; 0x774d
   127f0:	mov	r0, #0
   127f4:	mov	r2, #5
   127f8:	movt	r1, #2
   127fc:	bl	11f7c <dcgettext@plt>
   12800:	ldr	r1, [r7]
   12804:	bl	11e38 <fputs_unlocked@plt>
   12808:	movw	r1, #30612	; 0x7794
   1280c:	mov	r0, #0
   12810:	mov	r2, #5
   12814:	movt	r1, #2
   12818:	bl	11f7c <dcgettext@plt>
   1281c:	movw	r2, #30497	; 0x7721
   12820:	mov	r1, r0
   12824:	mov	r0, #1
   12828:	mov	r3, r5
   1282c:	movt	r2, #2
   12830:	bl	121d4 <__printf_chk@plt>
   12834:	movw	r1, #30639	; 0x77af
   12838:	mov	r0, #0
   1283c:	mov	r2, #5
   12840:	movt	r1, #2
   12844:	bl	11f7c <dcgettext@plt>
   12848:	mov	r1, r0
   1284c:	movw	r0, #30407	; 0x76c7
   12850:	movw	r3, #25764	; 0x64a4
   12854:	cmp	r6, r5
   12858:	mov	r2, r6
   1285c:	movt	r0, #2
   12860:	movt	r3, #2
   12864:	moveq	r3, r0
   12868:	mov	r0, #1
   1286c:	bl	121d4 <__printf_chk@plt>
   12870:	mov	r0, r4
   12874:	bl	12150 <exit@plt>
   12878:	movw	r0, #37584	; 0x92d0
   1287c:	movw	r1, #25572	; 0x63e4
   12880:	mov	r2, #5
   12884:	movt	r0, #3
   12888:	movt	r1, #2
   1288c:	ldr	r5, [r0]
   12890:	mov	r0, #0
   12894:	bl	11f7c <dcgettext@plt>
   12898:	mov	r2, r0
   1289c:	movw	r0, #39116	; 0x98cc
   128a0:	mov	r1, #1
   128a4:	movt	r0, #3
   128a8:	ldr	r3, [r0]
   128ac:	mov	r0, r5
   128b0:	bl	121f8 <__fprintf_chk@plt>
   128b4:	mov	r0, r4
   128b8:	bl	12150 <exit@plt>
   128bc:	nop	{0}
   128c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128c4:	add	fp, sp, #28
   128c8:	sub	sp, sp, #4
   128cc:	vpush	{d12-d13}
   128d0:	vpush	{d8-d10}
   128d4:	sub	sp, sp, #528	; 0x210
   128d8:	str	r0, [sp, #112]	; 0x70
   128dc:	movw	r0, #29382	; 0x72c6
   128e0:	mov	r5, r1
   128e4:	movt	r0, #2
   128e8:	bl	120cc <getenv@plt>
   128ec:	str	r0, [sp, #116]	; 0x74
   128f0:	bl	20090 <__assert_fail@plt+0xdd24>
   128f4:	mov	r4, r0
   128f8:	ldr	r0, [r5]
   128fc:	str	r5, [sp, #100]	; 0x64
   12900:	bl	200ec <__assert_fail@plt+0xdd80>
   12904:	movw	r1, #25764	; 0x64a4
   12908:	mov	r0, #6
   1290c:	movt	r1, #2
   12910:	str	r1, [sp, #24]
   12914:	bl	1224c <setlocale@plt>
   12918:	movw	r6, #29816	; 0x7478
   1291c:	movw	r1, #29398	; 0x72d6
   12920:	str	r0, [sp, #92]	; 0x5c
   12924:	movt	r6, #2
   12928:	movt	r1, #2
   1292c:	mov	r0, r6
   12930:	bl	12300 <bindtextdomain@plt>
   12934:	mov	r0, r6
   12938:	bl	11fdc <textdomain@plt>
   1293c:	movw	r0, #37488	; 0x9270
   12940:	mov	r1, #2
   12944:	movt	r0, #3
   12948:	str	r1, [r0]
   1294c:	mov	r0, #3
   12950:	bl	1dd1c <__assert_fail@plt+0xb9b0>
   12954:	movw	r5, #39024	; 0x9870
   12958:	movt	r5, #3
   1295c:	strb	r0, [r5]
   12960:	mov	r0, #2
   12964:	bl	1dd1c <__assert_fail@plt+0xb9b0>
   12968:	strb	r0, [r5, #1]
   1296c:	bl	122a0 <localeconv@plt>
   12970:	ldr	r1, [r0]
   12974:	sub	r3, r4, #3504	; 0xdb0
   12978:	mov	r7, #0
   1297c:	sub	r3, r3, #196608	; 0x30000
   12980:	cmp	r3, #696	; 0x2b8
   12984:	movwhi	r7, #1
   12988:	ldrb	r2, [r1]
   1298c:	str	r7, [sp, #108]	; 0x6c
   12990:	cmp	r2, #0
   12994:	strb	r2, [r5, #2]
   12998:	beq	129a8 <__assert_fail@plt+0x63c>
   1299c:	ldrb	r1, [r1, #1]
   129a0:	cmp	r1, #0
   129a4:	beq	129b0 <__assert_fail@plt+0x644>
   129a8:	mov	r1, #46	; 0x2e
   129ac:	strb	r1, [r5, #2]
   129b0:	ldr	r0, [r0, #4]
   129b4:	ldrb	r1, [r0]
   129b8:	cmp	r1, #0
   129bc:	str	r1, [r5, #12]
   129c0:	beq	129d8 <__assert_fail@plt+0x66c>
   129c4:	ldrb	r0, [r0, #1]
   129c8:	cmp	r0, #0
   129cc:	beq	129e0 <__assert_fail@plt+0x674>
   129d0:	mov	r0, #1
   129d4:	strb	r0, [r5, #3]
   129d8:	mov	r0, #256	; 0x100
   129dc:	str	r0, [r5, #12]
   129e0:	mov	r4, #0
   129e4:	strb	r4, [r5, #4]
   129e8:	bl	12144 <__ctype_b_loc@plt>
   129ec:	mov	r8, r0
   129f0:	bl	12120 <__ctype_toupper_loc@plt>
   129f4:	movw	lr, #37992	; 0x9468
   129f8:	movw	ip, #37736	; 0x9368
   129fc:	movw	r2, #38248	; 0x9568
   12a00:	movw	sl, #38504	; 0x9668
   12a04:	mov	r1, #1
   12a08:	mov	r3, #0
   12a0c:	movt	lr, #3
   12a10:	movt	ip, #3
   12a14:	movt	r2, #3
   12a18:	movt	sl, #3
   12a1c:	ldr	r7, [r8]
   12a20:	sub	r5, r3, #10
   12a24:	clz	r5, r5
   12a28:	lsr	r5, r5, #5
   12a2c:	add	r7, r7, r4
   12a30:	add	r4, r4, #2
   12a34:	ldrh	r7, [r7]
   12a38:	bic	r6, r1, r7, lsr #14
   12a3c:	strb	r6, [lr, r3]
   12a40:	and	r6, r7, #1
   12a44:	and	r7, r7, #8
   12a48:	orr	r5, r6, r5
   12a4c:	eor	r6, r6, #1
   12a50:	eor	r7, r1, r7, lsr #3
   12a54:	strb	r5, [ip, r3]
   12a58:	subs	r5, r3, #10
   12a5c:	movwne	r5, #1
   12a60:	and	r6, r5, r6
   12a64:	and	r7, r7, r6
   12a68:	strb	r7, [r2, r3]
   12a6c:	ldr	r7, [r0]
   12a70:	ldr	r7, [r7, r3, lsl #2]
   12a74:	strb	r7, [sl, r3]
   12a78:	add	r3, r3, #1
   12a7c:	cmp	r3, #256	; 0x100
   12a80:	bne	12a1c <__assert_fail@plt+0x6b0>
   12a84:	movw	r0, #39024	; 0x9870
   12a88:	movt	r0, #3
   12a8c:	ldrb	r0, [r0, #1]
   12a90:	cmp	r0, #0
   12a94:	beq	12b50 <__assert_fail@plt+0x7e4>
   12a98:	movw	r5, #14
   12a9c:	mov	r7, #0
   12aa0:	mov	r9, #0
   12aa4:	movt	r5, #2
   12aa8:	b	12ab8 <__assert_fail@plt+0x74c>
   12aac:	cmp	r9, #12
   12ab0:	strb	r7, [r0, r1]
   12ab4:	beq	12b30 <__assert_fail@plt+0x7c4>
   12ab8:	add	r0, r9, r5
   12abc:	bl	12294 <nl_langinfo@plt>
   12ac0:	mov	r4, r0
   12ac4:	bl	12174 <strlen@plt>
   12ac8:	mov	r6, r0
   12acc:	add	r0, r0, #1
   12ad0:	bl	23914 <__assert_fail@plt+0x115a8>
   12ad4:	movw	r1, #37360	; 0x91f0
   12ad8:	cmp	r6, #0
   12adc:	movt	r1, #3
   12ae0:	add	r1, r1, r9, lsl #3
   12ae4:	add	r9, r9, #1
   12ae8:	str	r0, [r1, #24]
   12aec:	str	r9, [r1, #28]
   12af0:	mov	r1, #0
   12af4:	beq	12aac <__assert_fail@plt+0x740>
   12af8:	mov	r1, #0
   12afc:	b	12b0c <__assert_fail@plt+0x7a0>
   12b00:	add	r4, r4, #1
   12b04:	subs	r6, r6, #1
   12b08:	beq	12aac <__assert_fail@plt+0x740>
   12b0c:	ldrb	r2, [r4]
   12b10:	ldr	r3, [r8]
   12b14:	ldrb	r3, [r3, r2, lsl #1]
   12b18:	tst	r3, #1
   12b1c:	bne	12b00 <__assert_fail@plt+0x794>
   12b20:	ldrb	r2, [sl, r2]
   12b24:	strb	r2, [r0, r1]
   12b28:	add	r1, r1, #1
   12b2c:	b	12b00 <__assert_fail@plt+0x794>
   12b30:	movw	r0, #37360	; 0x91f0
   12b34:	movw	r3, #31132	; 0x799c
   12b38:	mov	r1, #12
   12b3c:	mov	r2, #8
   12b40:	movt	r0, #3
   12b44:	movt	r3, #1
   12b48:	add	r0, r0, #24
   12b4c:	bl	122c4 <qsort@plt>
   12b50:	movw	r0, #37608	; 0x92e8
   12b54:	movt	r0, #3
   12b58:	bl	12258 <sigemptyset@plt>
   12b5c:	add	r2, sp, #128	; 0x80
   12b60:	mov	r0, #14
   12b64:	mov	r1, #0
   12b68:	bl	12024 <sigaction@plt>
   12b6c:	ldr	r0, [sp, #128]	; 0x80
   12b70:	cmp	r0, #1
   12b74:	beq	12b88 <__assert_fail@plt+0x81c>
   12b78:	movw	r0, #37608	; 0x92e8
   12b7c:	mov	r1, #14
   12b80:	movt	r0, #3
   12b84:	bl	120fc <sigaddset@plt>
   12b88:	add	r2, sp, #128	; 0x80
   12b8c:	mov	r0, #1
   12b90:	mov	r1, #0
   12b94:	bl	12024 <sigaction@plt>
   12b98:	ldr	r0, [sp, #128]	; 0x80
   12b9c:	cmp	r0, #1
   12ba0:	beq	12bb4 <__assert_fail@plt+0x848>
   12ba4:	movw	r0, #37608	; 0x92e8
   12ba8:	mov	r1, #1
   12bac:	movt	r0, #3
   12bb0:	bl	120fc <sigaddset@plt>
   12bb4:	add	r2, sp, #128	; 0x80
   12bb8:	mov	r0, #2
   12bbc:	mov	r1, #0
   12bc0:	bl	12024 <sigaction@plt>
   12bc4:	ldr	r0, [sp, #128]	; 0x80
   12bc8:	cmp	r0, #1
   12bcc:	beq	12be0 <__assert_fail@plt+0x874>
   12bd0:	movw	r0, #37608	; 0x92e8
   12bd4:	mov	r1, #2
   12bd8:	movt	r0, #3
   12bdc:	bl	120fc <sigaddset@plt>
   12be0:	add	r2, sp, #128	; 0x80
   12be4:	mov	r0, #13
   12be8:	mov	r1, #0
   12bec:	bl	12024 <sigaction@plt>
   12bf0:	ldr	r0, [sp, #128]	; 0x80
   12bf4:	cmp	r0, #1
   12bf8:	beq	12c0c <__assert_fail@plt+0x8a0>
   12bfc:	movw	r0, #37608	; 0x92e8
   12c00:	mov	r1, #13
   12c04:	movt	r0, #3
   12c08:	bl	120fc <sigaddset@plt>
   12c0c:	add	r2, sp, #128	; 0x80
   12c10:	mov	r0, #3
   12c14:	mov	r1, #0
   12c18:	bl	12024 <sigaction@plt>
   12c1c:	ldr	r0, [sp, #128]	; 0x80
   12c20:	cmp	r0, #1
   12c24:	beq	12c38 <__assert_fail@plt+0x8cc>
   12c28:	movw	r0, #37608	; 0x92e8
   12c2c:	mov	r1, #3
   12c30:	movt	r0, #3
   12c34:	bl	120fc <sigaddset@plt>
   12c38:	add	r2, sp, #128	; 0x80
   12c3c:	mov	r0, #15
   12c40:	mov	r1, #0
   12c44:	bl	12024 <sigaction@plt>
   12c48:	ldr	r0, [sp, #128]	; 0x80
   12c4c:	cmp	r0, #1
   12c50:	beq	12c64 <__assert_fail@plt+0x8f8>
   12c54:	movw	r0, #37608	; 0x92e8
   12c58:	mov	r1, #15
   12c5c:	movt	r0, #3
   12c60:	bl	120fc <sigaddset@plt>
   12c64:	add	r2, sp, #128	; 0x80
   12c68:	mov	r0, #29
   12c6c:	mov	r1, #0
   12c70:	bl	12024 <sigaction@plt>
   12c74:	ldr	r0, [sp, #128]	; 0x80
   12c78:	cmp	r0, #1
   12c7c:	beq	12c90 <__assert_fail@plt+0x924>
   12c80:	movw	r0, #37608	; 0x92e8
   12c84:	mov	r1, #29
   12c88:	movt	r0, #3
   12c8c:	bl	120fc <sigaddset@plt>
   12c90:	add	r2, sp, #128	; 0x80
   12c94:	mov	r0, #27
   12c98:	mov	r1, #0
   12c9c:	bl	12024 <sigaction@plt>
   12ca0:	ldr	r0, [sp, #128]	; 0x80
   12ca4:	cmp	r0, #1
   12ca8:	beq	12cbc <__assert_fail@plt+0x950>
   12cac:	movw	r0, #37608	; 0x92e8
   12cb0:	mov	r1, #27
   12cb4:	movt	r0, #3
   12cb8:	bl	120fc <sigaddset@plt>
   12cbc:	add	r2, sp, #128	; 0x80
   12cc0:	mov	r0, #26
   12cc4:	mov	r1, #0
   12cc8:	bl	12024 <sigaction@plt>
   12ccc:	ldr	r0, [sp, #128]	; 0x80
   12cd0:	cmp	r0, #1
   12cd4:	beq	12ce8 <__assert_fail@plt+0x97c>
   12cd8:	movw	r0, #37608	; 0x92e8
   12cdc:	mov	r1, #26
   12ce0:	movt	r0, #3
   12ce4:	bl	120fc <sigaddset@plt>
   12ce8:	add	r2, sp, #128	; 0x80
   12cec:	mov	r0, #24
   12cf0:	mov	r1, #0
   12cf4:	bl	12024 <sigaction@plt>
   12cf8:	ldr	r0, [sp, #128]	; 0x80
   12cfc:	cmp	r0, #1
   12d00:	beq	12d14 <__assert_fail@plt+0x9a8>
   12d04:	movw	r0, #37608	; 0x92e8
   12d08:	mov	r1, #24
   12d0c:	movt	r0, #3
   12d10:	bl	120fc <sigaddset@plt>
   12d14:	add	r4, sp, #128	; 0x80
   12d18:	mov	r0, #25
   12d1c:	mov	r1, #0
   12d20:	mov	r5, #0
   12d24:	mov	r2, r4
   12d28:	bl	12024 <sigaction@plt>
   12d2c:	ldr	r0, [sp, #128]	; 0x80
   12d30:	cmp	r0, #1
   12d34:	beq	12d48 <__assert_fail@plt+0x9dc>
   12d38:	movw	r0, #37608	; 0x92e8
   12d3c:	mov	r1, #25
   12d40:	movt	r0, #3
   12d44:	bl	120fc <sigaddset@plt>
   12d48:	movw	r0, #27256	; 0x6a78
   12d4c:	movw	r6, #37608	; 0x92e8
   12d50:	mov	r2, #128	; 0x80
   12d54:	movt	r0, #1
   12d58:	movt	r6, #3
   12d5c:	str	r0, [sp, #128]	; 0x80
   12d60:	add	r0, r4, #4
   12d64:	mov	r1, r6
   12d68:	bl	11eec <memcpy@plt>
   12d6c:	mov	r0, r6
   12d70:	mov	r1, #14
   12d74:	str	r5, [sp, #260]	; 0x104
   12d78:	bl	11fd0 <sigismember@plt>
   12d7c:	cmp	r0, #0
   12d80:	beq	12d94 <__assert_fail@plt+0xa28>
   12d84:	add	r1, sp, #128	; 0x80
   12d88:	mov	r0, #14
   12d8c:	mov	r2, #0
   12d90:	bl	12024 <sigaction@plt>
   12d94:	movw	r0, #37608	; 0x92e8
   12d98:	mov	r1, #1
   12d9c:	movt	r0, #3
   12da0:	bl	11fd0 <sigismember@plt>
   12da4:	ldr	sl, [sp, #100]	; 0x64
   12da8:	cmp	r0, #0
   12dac:	beq	12dc0 <__assert_fail@plt+0xa54>
   12db0:	add	r1, sp, #128	; 0x80
   12db4:	mov	r0, #1
   12db8:	mov	r2, #0
   12dbc:	bl	12024 <sigaction@plt>
   12dc0:	movw	r0, #37608	; 0x92e8
   12dc4:	mov	r1, #2
   12dc8:	movt	r0, #3
   12dcc:	bl	11fd0 <sigismember@plt>
   12dd0:	cmp	r0, #0
   12dd4:	beq	12de8 <__assert_fail@plt+0xa7c>
   12dd8:	add	r1, sp, #128	; 0x80
   12ddc:	mov	r0, #2
   12de0:	mov	r2, #0
   12de4:	bl	12024 <sigaction@plt>
   12de8:	movw	r0, #37608	; 0x92e8
   12dec:	mov	r1, #13
   12df0:	movt	r0, #3
   12df4:	bl	11fd0 <sigismember@plt>
   12df8:	cmp	r0, #0
   12dfc:	beq	12e10 <__assert_fail@plt+0xaa4>
   12e00:	add	r1, sp, #128	; 0x80
   12e04:	mov	r0, #13
   12e08:	mov	r2, #0
   12e0c:	bl	12024 <sigaction@plt>
   12e10:	movw	r0, #37608	; 0x92e8
   12e14:	mov	r1, #3
   12e18:	movt	r0, #3
   12e1c:	bl	11fd0 <sigismember@plt>
   12e20:	cmp	r0, #0
   12e24:	beq	12e38 <__assert_fail@plt+0xacc>
   12e28:	add	r1, sp, #128	; 0x80
   12e2c:	mov	r0, #3
   12e30:	mov	r2, #0
   12e34:	bl	12024 <sigaction@plt>
   12e38:	movw	r0, #37608	; 0x92e8
   12e3c:	mov	r1, #15
   12e40:	movt	r0, #3
   12e44:	bl	11fd0 <sigismember@plt>
   12e48:	cmp	r0, #0
   12e4c:	beq	12e60 <__assert_fail@plt+0xaf4>
   12e50:	add	r1, sp, #128	; 0x80
   12e54:	mov	r0, #15
   12e58:	mov	r2, #0
   12e5c:	bl	12024 <sigaction@plt>
   12e60:	movw	r0, #37608	; 0x92e8
   12e64:	mov	r1, #29
   12e68:	movt	r0, #3
   12e6c:	bl	11fd0 <sigismember@plt>
   12e70:	cmp	r0, #0
   12e74:	beq	12e88 <__assert_fail@plt+0xb1c>
   12e78:	add	r1, sp, #128	; 0x80
   12e7c:	mov	r0, #29
   12e80:	mov	r2, #0
   12e84:	bl	12024 <sigaction@plt>
   12e88:	movw	r0, #37608	; 0x92e8
   12e8c:	mov	r1, #27
   12e90:	movt	r0, #3
   12e94:	bl	11fd0 <sigismember@plt>
   12e98:	cmp	r0, #0
   12e9c:	beq	12eb0 <__assert_fail@plt+0xb44>
   12ea0:	add	r1, sp, #128	; 0x80
   12ea4:	mov	r0, #27
   12ea8:	mov	r2, #0
   12eac:	bl	12024 <sigaction@plt>
   12eb0:	movw	r0, #37608	; 0x92e8
   12eb4:	mov	r1, #26
   12eb8:	movt	r0, #3
   12ebc:	bl	11fd0 <sigismember@plt>
   12ec0:	cmp	r0, #0
   12ec4:	beq	12ed8 <__assert_fail@plt+0xb6c>
   12ec8:	add	r1, sp, #128	; 0x80
   12ecc:	mov	r0, #26
   12ed0:	mov	r2, #0
   12ed4:	bl	12024 <sigaction@plt>
   12ed8:	movw	r0, #37608	; 0x92e8
   12edc:	mov	r1, #24
   12ee0:	movt	r0, #3
   12ee4:	bl	11fd0 <sigismember@plt>
   12ee8:	cmp	r0, #0
   12eec:	beq	12f00 <__assert_fail@plt+0xb94>
   12ef0:	add	r1, sp, #128	; 0x80
   12ef4:	mov	r0, #24
   12ef8:	mov	r2, #0
   12efc:	bl	12024 <sigaction@plt>
   12f00:	movw	r0, #37608	; 0x92e8
   12f04:	mov	r1, #25
   12f08:	movt	r0, #3
   12f0c:	bl	11fd0 <sigismember@plt>
   12f10:	cmp	r0, #0
   12f14:	beq	12f28 <__assert_fail@plt+0xbbc>
   12f18:	add	r1, sp, #128	; 0x80
   12f1c:	mov	r0, #25
   12f20:	mov	r2, #0
   12f24:	bl	12024 <sigaction@plt>
   12f28:	mov	r0, #17
   12f2c:	mov	r1, #0
   12f30:	mov	r9, #0
   12f34:	bl	11f28 <signal@plt>
   12f38:	movw	r0, #27340	; 0x6acc
   12f3c:	movt	r0, #1
   12f40:	bl	263bc <_obstack_memory_used@@Base+0x69c>
   12f44:	vmov.i32	q8, #0	; 0x00000000
   12f48:	ldr	r6, [sp, #112]	; 0x70
   12f4c:	add	r0, sp, #272	; 0x110
   12f50:	str	r9, [sp, #308]	; 0x134
   12f54:	add	r1, r0, #4
   12f58:	add	r0, r0, #20
   12f5c:	vst1.32	{d16-d17}, [r0]
   12f60:	mvn	r0, #0
   12f64:	vst1.32	{d16-d17}, [r1]
   12f68:	mov	r1, #4
   12f6c:	str	r0, [sp, #272]	; 0x110
   12f70:	str	r0, [sp, #280]	; 0x118
   12f74:	mov	r0, r6
   12f78:	bl	239e4 <__assert_fail@plt+0x11678>
   12f7c:	str	r0, [sp, #124]	; 0x7c
   12f80:	add	r0, r4, #1
   12f84:	movw	r5, #37576	; 0x92c8
   12f88:	mvn	lr, #0
   12f8c:	mov	r4, #0
   12f90:	str	r0, [sp, #104]	; 0x68
   12f94:	sub	r0, fp, #288	; 0x120
   12f98:	movt	r5, #3
   12f9c:	add	r1, r0, #12
   12fa0:	str	r1, [sp, #72]	; 0x48
   12fa4:	orr	r1, r0, #4
   12fa8:	add	r0, r0, #8
   12fac:	str	r0, [sp, #80]	; 0x50
   12fb0:	ldr	r0, [sp, #116]	; 0x74
   12fb4:	str	r1, [sp, #76]	; 0x4c
   12fb8:	mov	r1, #0
   12fbc:	str	r1, [sp, #88]	; 0x58
   12fc0:	clz	r0, r0
   12fc4:	lsr	r0, r0, #5
   12fc8:	str	r0, [sp, #68]	; 0x44
   12fcc:	mov	r0, #0
   12fd0:	str	r0, [sp, #28]
   12fd4:	mov	r0, #0
   12fd8:	str	r0, [sp, #96]	; 0x60
   12fdc:	mov	r0, #0
   12fe0:	str	r0, [sp, #52]	; 0x34
   12fe4:	mov	r0, #0
   12fe8:	str	r0, [sp, #32]
   12fec:	mov	r0, #0
   12ff0:	b	13000 <__assert_fail@plt+0xc94>
   12ff4:	mov	r0, ip
   12ff8:	movw	r5, #37576	; 0x92c8
   12ffc:	movt	r5, #3
   13000:	mov	r1, r4
   13004:	cmn	r4, #1
   13008:	mov	ip, r0
   1300c:	mvn	r4, #0
   13010:	str	lr, [fp, #-104]	; 0xffffff98
   13014:	beq	13750 <__assert_fail@plt+0x13e4>
   13018:	ldr	r0, [sp, #116]	; 0x74
   1301c:	cmp	r0, #0
   13020:	cmpne	r9, #0
   13024:	bne	136ec <__assert_fail@plt+0x1380>
   13028:	movw	r2, #32704	; 0x7fc0
   1302c:	movw	r3, #32736	; 0x7fe0
   13030:	sub	r0, fp, #104	; 0x68
   13034:	mov	r1, sl
   13038:	str	ip, [sp, #120]	; 0x78
   1303c:	mov	r7, sl
   13040:	movt	r2, #2
   13044:	movt	r3, #2
   13048:	str	r0, [sp]
   1304c:	mov	r0, r6
   13050:	bl	12138 <getopt_long@plt>
   13054:	ldr	ip, [sp, #120]	; 0x78
   13058:	ldr	r6, [sp, #112]	; 0x70
   1305c:	movw	r3, #38248	; 0x9568
   13060:	mov	r4, r0
   13064:	add	r1, r0, #3
   13068:	movw	r0, #266	; 0x10a
   1306c:	mvn	lr, #0
   13070:	movt	r3, #3
   13074:	cmp	r1, r0
   13078:	bhi	14fe0 <__assert_fail@plt+0x2c74>
   1307c:	add	r2, pc, #4
   13080:	mov	r0, #1
   13084:	ldr	pc, [r2, r1, lsl #2]
   13088:	andeq	r4, r1, r8, ror #31
   1308c:	andeq	r5, r1, ip, lsr r0
   13090:	andeq	r3, r1, r0, asr r7
   13094:	andeq	r4, r1, r0, ror #31
   13098:	andeq	r3, r1, r4, ror #21
   1309c:	andeq	r4, r1, r0, ror #31
   130a0:	andeq	r4, r1, r0, ror #31
   130a4:	andeq	r4, r1, r0, ror #31
   130a8:	andeq	r4, r1, r0, ror #31
   130ac:	andeq	r4, r1, r0, ror #31
   130b0:	andeq	r4, r1, r0, ror #31
   130b4:	andeq	r4, r1, r0, ror #31
   130b8:	andeq	r4, r1, r0, ror #31
   130bc:	andeq	r4, r1, r0, ror #31
   130c0:	andeq	r4, r1, r0, ror #31
   130c4:	andeq	r4, r1, r0, ror #31
   130c8:	andeq	r4, r1, r0, ror #31
   130cc:	andeq	r4, r1, r0, ror #31
   130d0:	andeq	r4, r1, r0, ror #31
   130d4:	andeq	r4, r1, r0, ror #31
   130d8:	andeq	r4, r1, r0, ror #31
   130dc:	andeq	r4, r1, r0, ror #31
   130e0:	andeq	r4, r1, r0, ror #31
   130e4:	andeq	r4, r1, r0, ror #31
   130e8:	andeq	r4, r1, r0, ror #31
   130ec:	andeq	r4, r1, r0, ror #31
   130f0:	andeq	r4, r1, r0, ror #31
   130f4:	andeq	r4, r1, r0, ror #31
   130f8:	andeq	r4, r1, r0, ror #31
   130fc:	andeq	r4, r1, r0, ror #31
   13100:	andeq	r4, r1, r0, ror #31
   13104:	andeq	r4, r1, r0, ror #31
   13108:	andeq	r4, r1, r0, ror #31
   1310c:	andeq	r4, r1, r0, ror #31
   13110:	andeq	r4, r1, r0, ror #31
   13114:	andeq	r4, r1, r0, ror #31
   13118:	andeq	r4, r1, r0, ror #31
   1311c:	andeq	r4, r1, r0, ror #31
   13120:	andeq	r4, r1, r0, ror #31
   13124:	andeq	r4, r1, r0, ror #31
   13128:	andeq	r4, r1, r0, ror #31
   1312c:	andeq	r4, r1, r0, ror #31
   13130:	andeq	r4, r1, r0, ror #31
   13134:	andeq	r4, r1, r0, ror #31
   13138:	andeq	r4, r1, r0, ror #31
   1313c:	andeq	r4, r1, r0, ror #31
   13140:	andeq	r4, r1, r0, ror #31
   13144:	andeq	r4, r1, r0, ror #31
   13148:	andeq	r4, r1, r0, ror #31
   1314c:	andeq	r4, r1, r0, ror #31
   13150:	andeq	r4, r1, r0, ror #31
   13154:	andeq	r4, r1, r0, ror #31
   13158:	andeq	r4, r1, r0, ror #31
   1315c:	andeq	r4, r1, r0, ror #31
   13160:	andeq	r4, r1, r0, ror #31
   13164:	andeq	r4, r1, r0, ror #31
   13168:	andeq	r4, r1, r0, ror #31
   1316c:	andeq	r4, r1, r0, ror #31
   13170:	andeq	r4, r1, r0, ror #31
   13174:	andeq	r4, r1, r0, ror #31
   13178:	andeq	r4, r1, r0, ror #31
   1317c:	andeq	r4, r1, r0, ror #31
   13180:	andeq	r4, r1, r0, ror #31
   13184:	andeq	r4, r1, r0, ror #31
   13188:	andeq	r4, r1, r0, ror #31
   1318c:	andeq	r4, r1, r0, ror #31
   13190:	andeq	r4, r1, r0, ror #31
   13194:	andeq	r4, r1, r0, ror #31
   13198:	andeq	r4, r1, r0, ror #31
   1319c:	andeq	r4, r1, r0, ror #31
   131a0:	andeq	r4, r1, r0, ror #9
   131a4:	andeq	r4, r1, r0, ror #31
   131a8:	andeq	r4, r1, r0, ror #31
   131ac:	andeq	r4, r1, r0, ror #31
   131b0:	andeq	r4, r1, r0, ror #31
   131b4:	andeq	r4, r1, r0, ror #31
   131b8:	andeq	r4, r1, r0, ror #31
   131bc:	andeq	r4, r1, r0, ror #31
   131c0:	andeq	r4, r1, r0, ror #31
   131c4:	andeq	r4, r1, r0, ror #31
   131c8:			; <UNDEFINED> instruction: 0x000134b4
   131cc:	andeq	r4, r1, r0, ror #31
   131d0:	andeq	r4, r1, r0, ror #31
   131d4:	andeq	r4, r1, r0, ror #31
   131d8:	andeq	r4, r1, r0, ror #31
   131dc:			; <UNDEFINED> instruction: 0x000134b4
   131e0:	andeq	r3, r1, r0, asr #15
   131e4:	strdeq	r3, [r1], -r4
   131e8:	andeq	r4, r1, r0, ror #31
   131ec:			; <UNDEFINED> instruction: 0x000134b4
   131f0:	andeq	r4, r1, r0, ror #31
   131f4:	andeq	r4, r1, r0, ror #31
   131f8:	andeq	r4, r1, r0, ror #31
   131fc:	andeq	r4, r1, r0, ror #31
   13200:	andeq	r4, r1, r0, ror #31
   13204:	andeq	r4, r1, r0, ror #31
   13208:	andeq	r4, r1, r0, ror #31
   1320c:	andeq	r4, r1, r0, ror #31
   13210:	andeq	r4, r1, r0, ror #31
   13214:	andeq	r4, r1, r0, ror #31
   13218:	andeq	r4, r1, r0, ror #31
   1321c:			; <UNDEFINED> instruction: 0x000134b4
   13220:	andeq	r4, r1, r0, ror #9
   13224:			; <UNDEFINED> instruction: 0x000134b4
   13228:	andeq	r4, r1, r0, ror #31
   1322c:			; <UNDEFINED> instruction: 0x000134b4
   13230:			; <UNDEFINED> instruction: 0x000134b4
   13234:			; <UNDEFINED> instruction: 0x000134b4
   13238:			; <UNDEFINED> instruction: 0x000134b4
   1323c:	andeq	r4, r1, r0, ror #31
   13240:			; <UNDEFINED> instruction: 0x000138b0
   13244:	andeq	r4, r1, r0, ror #31
   13248:	andeq	r3, r1, r0
   1324c:			; <UNDEFINED> instruction: 0x000134b4
   13250:	andeq	r3, r1, r0, lsr sl
   13254:	andeq	r4, r1, r0, ror #31
   13258:	andeq	r4, r1, r0, ror #31
   1325c:			; <UNDEFINED> instruction: 0x000134b4
   13260:	ldrdeq	r3, [r1], -r8
   13264:	andeq	r3, r1, r8, asr #18
   13268:			; <UNDEFINED> instruction: 0x000139bc
   1326c:	andeq	r4, r1, r0, ror #31
   13270:	andeq	r4, r1, r0, ror #31
   13274:	andeq	r4, r1, r0, ror #31
   13278:	andeq	r3, r1, r8, lsl #25
   1327c:	andeq	r3, r1, r0, asr #26
   13280:	andeq	r4, r1, r0, ror #31
   13284:	andeq	r4, r1, r0, ror #31
   13288:	andeq	r4, r1, r0, ror #31
   1328c:	andeq	r4, r1, r0, ror #31
   13290:	andeq	r4, r1, r0, ror #31
   13294:	andeq	r4, r1, r0, ror #31
   13298:	andeq	r4, r1, r0, ror #31
   1329c:	andeq	r4, r1, r0, ror #31
   132a0:	andeq	r4, r1, r0, ror #31
   132a4:	andeq	r4, r1, r0, ror #31
   132a8:	andeq	r4, r1, r0, ror #31
   132ac:	andeq	r4, r1, r0, ror #31
   132b0:	andeq	r4, r1, r0, ror #31
   132b4:	andeq	r4, r1, r0, ror #31
   132b8:	andeq	r4, r1, r0, ror #31
   132bc:	andeq	r4, r1, r0, ror #31
   132c0:	andeq	r4, r1, r0, ror #31
   132c4:	andeq	r4, r1, r0, ror #31
   132c8:	andeq	r4, r1, r0, ror #31
   132cc:	andeq	r4, r1, r0, ror #31
   132d0:	andeq	r4, r1, r0, ror #31
   132d4:	andeq	r4, r1, r0, ror #31
   132d8:	andeq	r4, r1, r0, ror #31
   132dc:	andeq	r4, r1, r0, ror #31
   132e0:	andeq	r4, r1, r0, ror #31
   132e4:	andeq	r4, r1, r0, ror #31
   132e8:	andeq	r4, r1, r0, ror #31
   132ec:	andeq	r4, r1, r0, ror #31
   132f0:	andeq	r4, r1, r0, ror #31
   132f4:	andeq	r4, r1, r0, ror #31
   132f8:	andeq	r4, r1, r0, ror #31
   132fc:	andeq	r4, r1, r0, ror #31
   13300:	andeq	r4, r1, r0, ror #31
   13304:	andeq	r4, r1, r0, ror #31
   13308:	andeq	r4, r1, r0, ror #31
   1330c:	andeq	r4, r1, r0, ror #31
   13310:	andeq	r4, r1, r0, ror #31
   13314:	andeq	r4, r1, r0, ror #31
   13318:	andeq	r4, r1, r0, ror #31
   1331c:	andeq	r4, r1, r0, ror #31
   13320:	andeq	r4, r1, r0, ror #31
   13324:	andeq	r4, r1, r0, ror #31
   13328:	andeq	r4, r1, r0, ror #31
   1332c:	andeq	r4, r1, r0, ror #31
   13330:	andeq	r4, r1, r0, ror #31
   13334:	andeq	r4, r1, r0, ror #31
   13338:	andeq	r4, r1, r0, ror #31
   1333c:	andeq	r4, r1, r0, ror #31
   13340:	andeq	r4, r1, r0, ror #31
   13344:	andeq	r4, r1, r0, ror #31
   13348:	andeq	r4, r1, r0, ror #31
   1334c:	andeq	r4, r1, r0, ror #31
   13350:	andeq	r4, r1, r0, ror #31
   13354:	andeq	r4, r1, r0, ror #31
   13358:	andeq	r4, r1, r0, ror #31
   1335c:	andeq	r4, r1, r0, ror #31
   13360:	andeq	r4, r1, r0, ror #31
   13364:	andeq	r4, r1, r0, ror #31
   13368:	andeq	r4, r1, r0, ror #31
   1336c:	andeq	r4, r1, r0, ror #31
   13370:	andeq	r4, r1, r0, ror #31
   13374:	andeq	r4, r1, r0, ror #31
   13378:	andeq	r4, r1, r0, ror #31
   1337c:	andeq	r4, r1, r0, ror #31
   13380:	andeq	r4, r1, r0, ror #31
   13384:	andeq	r4, r1, r0, ror #31
   13388:	andeq	r4, r1, r0, ror #31
   1338c:	andeq	r4, r1, r0, ror #31
   13390:	andeq	r4, r1, r0, ror #31
   13394:	andeq	r4, r1, r0, ror #31
   13398:	andeq	r4, r1, r0, ror #31
   1339c:	andeq	r4, r1, r0, ror #31
   133a0:	andeq	r4, r1, r0, ror #31
   133a4:	andeq	r4, r1, r0, ror #31
   133a8:	andeq	r4, r1, r0, ror #31
   133ac:	andeq	r4, r1, r0, ror #31
   133b0:	andeq	r4, r1, r0, ror #31
   133b4:	andeq	r4, r1, r0, ror #31
   133b8:	andeq	r4, r1, r0, ror #31
   133bc:	andeq	r4, r1, r0, ror #31
   133c0:	andeq	r4, r1, r0, ror #31
   133c4:	andeq	r4, r1, r0, ror #31
   133c8:	andeq	r4, r1, r0, ror #31
   133cc:	andeq	r4, r1, r0, ror #31
   133d0:	andeq	r4, r1, r0, ror #31
   133d4:	andeq	r4, r1, r0, ror #31
   133d8:	andeq	r4, r1, r0, ror #31
   133dc:	andeq	r4, r1, r0, ror #31
   133e0:	andeq	r4, r1, r0, ror #31
   133e4:	andeq	r4, r1, r0, ror #31
   133e8:	andeq	r4, r1, r0, ror #31
   133ec:	andeq	r4, r1, r0, ror #31
   133f0:	andeq	r4, r1, r0, ror #31
   133f4:	andeq	r4, r1, r0, ror #31
   133f8:	andeq	r4, r1, r0, ror #31
   133fc:	andeq	r4, r1, r0, ror #31
   13400:	andeq	r4, r1, r0, ror #31
   13404:	andeq	r4, r1, r0, ror #31
   13408:	andeq	r4, r1, r0, ror #31
   1340c:	andeq	r4, r1, r0, ror #31
   13410:	andeq	r4, r1, r0, ror #31
   13414:	andeq	r4, r1, r0, ror #31
   13418:	andeq	r4, r1, r0, ror #31
   1341c:	andeq	r4, r1, r0, ror #31
   13420:	andeq	r4, r1, r0, ror #31
   13424:	andeq	r4, r1, r0, ror #31
   13428:	andeq	r4, r1, r0, ror #31
   1342c:	andeq	r4, r1, r0, ror #31
   13430:	andeq	r4, r1, r0, ror #31
   13434:	andeq	r4, r1, r0, ror #31
   13438:	andeq	r4, r1, r0, ror #31
   1343c:	andeq	r4, r1, r0, ror #31
   13440:	andeq	r4, r1, r0, ror #31
   13444:	andeq	r4, r1, r0, ror #31
   13448:	andeq	r4, r1, r0, ror #31
   1344c:	andeq	r4, r1, r0, ror #31
   13450:	andeq	r4, r1, r0, ror #31
   13454:	andeq	r4, r1, r0, ror #31
   13458:	andeq	r4, r1, r0, ror #31
   1345c:	andeq	r4, r1, r0, ror #31
   13460:	andeq	r4, r1, r0, ror #31
   13464:	andeq	r4, r1, r0, ror #31
   13468:	andeq	r4, r1, r0, ror #31
   1346c:	andeq	r4, r1, r0, ror #31
   13470:	andeq	r4, r1, r0, ror #31
   13474:	andeq	r4, r1, r0, ror #31
   13478:	andeq	r4, r1, r0, ror #31
   1347c:	andeq	r4, r1, r0, ror #31
   13480:	andeq	r4, r1, r0, ror #31
   13484:	andeq	r4, r1, r0, ror #31
   13488:	andeq	r4, r1, r0, ror #31
   1348c:	andeq	r4, r1, r0, ror #31
   13490:	andeq	r4, r1, r0, ror #31
   13494:	andeq	r3, r1, ip, asr #16
   13498:	andeq	r3, r1, ip, ror r7
   1349c:	andeq	r3, r1, r8, asr lr
   134a0:	andeq	r3, r1, r4, ror lr
   134a4:	andeq	r3, r1, ip, asr sp
   134a8:	andeq	r3, r1, r8, lsl #28
   134ac:	andeq	r3, r1, r0, lsl #21
   134b0:	ldrdeq	r3, [r1], -r8
   134b4:	mov	r0, #0
   134b8:	movw	r5, #38504	; 0x9668
   134bc:	mov	r1, r4
   134c0:	strb	r0, [sp, #129]	; 0x81
   134c4:	ldr	r0, [sp, #104]	; 0x68
   134c8:	movt	r5, #3
   134cc:	strb	r4, [sp, #128]	; 0x80
   134d0:	mvn	r2, #76	; 0x4c
   134d4:	uxtab	r1, r2, r1
   134d8:	cmp	r1, #37	; 0x25
   134dc:	bls	13500 <__assert_fail@plt+0x1194>
   134e0:	b	12ff4 <__assert_fail@plt+0xc88>
   134e4:	mov	r1, #1
   134e8:	strb	r1, [sp, #301]	; 0x12d
   134ec:	ldrb	r1, [r0], #1
   134f0:	mvn	r2, #76	; 0x4c
   134f4:	uxtab	r1, r2, r1
   134f8:	cmp	r1, #37	; 0x25
   134fc:	bhi	12ff4 <__assert_fail@plt+0xc88>
   13500:	add	r2, pc, #0
   13504:	ldr	pc, [r2, r1, lsl #2]
   13508:	andeq	r3, r1, r0, lsr #11
   1350c:	strdeq	r2, [r1], -r4
   13510:	strdeq	r2, [r1], -r4
   13514:	strdeq	r2, [r1], -r4
   13518:	strdeq	r2, [r1], -r4
   1351c:	andeq	r3, r1, ip, lsl #13
   13520:	strdeq	r2, [r1], -r4
   13524:	strdeq	r2, [r1], -r4
   13528:	strdeq	r2, [r1], -r4
   1352c:	andeq	r3, r1, r0, asr r6
   13530:	strdeq	r2, [r1], -r4
   13534:	strdeq	r2, [r1], -r4
   13538:	strdeq	r2, [r1], -r4
   1353c:	strdeq	r2, [r1], -r4
   13540:	strdeq	r2, [r1], -r4
   13544:	strdeq	r2, [r1], -r4
   13548:	strdeq	r2, [r1], -r4
   1354c:	strdeq	r2, [r1], -r4
   13550:	strdeq	r2, [r1], -r4
   13554:	strdeq	r2, [r1], -r4
   13558:	strdeq	r2, [r1], -r4
   1355c:	andeq	r3, r1, ip, lsl #12
   13560:	strdeq	r2, [r1], -r4
   13564:	andeq	r3, r1, r0, ror r6
   13568:	strdeq	r2, [r1], -r4
   1356c:	strdeq	r3, [r1], -r0
   13570:	andeq	r3, r1, r0, lsr r6
   13574:	andeq	r3, r1, r4, ror #9
   13578:	andeq	r3, r1, r0, asr #11
   1357c:	strdeq	r2, [r1], -r4
   13580:	strdeq	r2, [r1], -r4
   13584:	strdeq	r2, [r1], -r4
   13588:	strdeq	r2, [r1], -r4
   1358c:	andeq	r3, r1, ip, asr #13
   13590:	strdeq	r2, [r1], -r4
   13594:	strdeq	r2, [r1], -r4
   13598:	strdeq	r2, [r1], -r4
   1359c:	andeq	r3, r1, ip, lsr #13
   135a0:	mov	r1, #1
   135a4:	strb	r1, [sp, #302]	; 0x12e
   135a8:	ldrb	r1, [r0], #1
   135ac:	mvn	r2, #76	; 0x4c
   135b0:	uxtab	r1, r2, r1
   135b4:	cmp	r1, #37	; 0x25
   135b8:	bls	13500 <__assert_fail@plt+0x1194>
   135bc:	b	12ff4 <__assert_fail@plt+0xc88>
   135c0:	ldr	r1, [sp, #288]	; 0x120
   135c4:	cmp	r1, #0
   135c8:	bne	13658 <__assert_fail@plt+0x12ec>
   135cc:	movw	r1, #37992	; 0x9468
   135d0:	movt	r1, #3
   135d4:	str	r1, [sp, #288]	; 0x120
   135d8:	ldrb	r1, [r0], #1
   135dc:	mvn	r2, #76	; 0x4c
   135e0:	uxtab	r1, r2, r1
   135e4:	cmp	r1, #37	; 0x25
   135e8:	bls	13500 <__assert_fail@plt+0x1194>
   135ec:	b	12ff4 <__assert_fail@plt+0xc88>
   135f0:	ldrb	r1, [r0], #1
   135f4:	str	r5, [sp, #292]	; 0x124
   135f8:	mvn	r2, #76	; 0x4c
   135fc:	uxtab	r1, r2, r1
   13600:	cmp	r1, #37	; 0x25
   13604:	bls	13500 <__assert_fail@plt+0x1194>
   13608:	b	12ff4 <__assert_fail@plt+0xc88>
   1360c:	movw	r1, #257	; 0x101
   13610:	add	r2, sp, #256	; 0x100
   13614:	strh	r1, [r2, #40]	; 0x28
   13618:	ldrb	r1, [r0], #1
   1361c:	mvn	r2, #76	; 0x4c
   13620:	uxtab	r1, r2, r1
   13624:	cmp	r1, #37	; 0x25
   13628:	bls	13500 <__assert_fail@plt+0x1194>
   1362c:	b	12ff4 <__assert_fail@plt+0xc88>
   13630:	mov	r1, #1
   13634:	strb	r1, [sp, #300]	; 0x12c
   13638:	ldrb	r1, [r0], #1
   1363c:	mvn	r2, #76	; 0x4c
   13640:	uxtab	r1, r2, r1
   13644:	cmp	r1, #37	; 0x25
   13648:	bls	13500 <__assert_fail@plt+0x1194>
   1364c:	b	12ff4 <__assert_fail@plt+0xc88>
   13650:	mov	r1, #1
   13654:	strb	r1, [sp, #304]	; 0x130
   13658:	ldrb	r1, [r0], #1
   1365c:	mvn	r2, #76	; 0x4c
   13660:	uxtab	r1, r2, r1
   13664:	cmp	r1, #37	; 0x25
   13668:	bls	13500 <__assert_fail@plt+0x1194>
   1366c:	b	12ff4 <__assert_fail@plt+0xc88>
   13670:	ldrb	r1, [r0], #1
   13674:	str	r3, [sp, #288]	; 0x120
   13678:	mvn	r2, #76	; 0x4c
   1367c:	uxtab	r1, r2, r1
   13680:	cmp	r1, #37	; 0x25
   13684:	bls	13500 <__assert_fail@plt+0x1194>
   13688:	b	12ff4 <__assert_fail@plt+0xc88>
   1368c:	mov	r1, #1
   13690:	strb	r1, [sp, #299]	; 0x12b
   13694:	ldrb	r1, [r0], #1
   13698:	mvn	r2, #76	; 0x4c
   1369c:	uxtab	r1, r2, r1
   136a0:	cmp	r1, #37	; 0x25
   136a4:	bls	13500 <__assert_fail@plt+0x1194>
   136a8:	b	12ff4 <__assert_fail@plt+0xc88>
   136ac:	mov	r1, #1
   136b0:	strb	r1, [sp, #303]	; 0x12f
   136b4:	ldrb	r1, [r0], #1
   136b8:	mvn	r2, #76	; 0x4c
   136bc:	uxtab	r1, r2, r1
   136c0:	cmp	r1, #37	; 0x25
   136c4:	bls	13500 <__assert_fail@plt+0x1194>
   136c8:	b	12ff4 <__assert_fail@plt+0xc88>
   136cc:	mov	r1, #1
   136d0:	strb	r1, [sp, #298]	; 0x12a
   136d4:	ldrb	r1, [r0], #1
   136d8:	mvn	r2, #76	; 0x4c
   136dc:	uxtab	r1, r2, r1
   136e0:	cmp	r1, #37	; 0x25
   136e4:	bls	13500 <__assert_fail@plt+0x1194>
   136e8:	b	12ff4 <__assert_fail@plt+0xc88>
   136ec:	ldr	r0, [sp, #88]	; 0x58
   136f0:	tst	r0, #255	; 0xff
   136f4:	ldreq	r0, [sp, #108]	; 0x6c
   136f8:	eoreq	r0, r0, #1
   136fc:	tsteq	r0, #1
   13700:	bne	1374c <__assert_fail@plt+0x13e0>
   13704:	ldr	r2, [r5]
   13708:	cmp	r2, r6
   1370c:	beq	1374c <__assert_fail@plt+0x13e0>
   13710:	ldr	r0, [sl, r2, lsl #2]
   13714:	ldrb	r3, [r0]
   13718:	cmp	r3, #45	; 0x2d
   1371c:	bne	1374c <__assert_fail@plt+0x13e0>
   13720:	ldrb	r3, [r0, #1]
   13724:	cmp	r3, #111	; 0x6f
   13728:	bne	1374c <__assert_fail@plt+0x13e0>
   1372c:	add	r2, r2, #1
   13730:	cmp	r2, r6
   13734:	bne	13028 <__assert_fail@plt+0xcbc>
   13738:	ldrb	r0, [r0, #2]
   1373c:	mov	r4, r1
   13740:	cmp	r0, #0
   13744:	beq	13750 <__assert_fail@plt+0x13e4>
   13748:	b	13028 <__assert_fail@plt+0xcbc>
   1374c:	mov	r4, r1
   13750:	ldr	r0, [r5]
   13754:	cmp	r0, r6
   13758:	bge	14cd8 <__assert_fail@plt+0x296c>
   1375c:	add	r1, r0, #1
   13760:	str	r1, [r5]
   13764:	ldr	r1, [sp, #124]	; 0x7c
   13768:	ldr	r0, [sl, r0, lsl #2]
   1376c:	str	r0, [r1, r9, lsl #2]
   13770:	add	r9, r9, #1
   13774:	mov	r0, ip
   13778:	b	13000 <__assert_fail@plt+0xc94>
   1377c:	movw	r0, #39024	; 0x9870
   13780:	movt	r0, #3
   13784:	ldr	r0, [r0, #16]
   13788:	cmp	r0, #0
   1378c:	beq	144b8 <__assert_fail@plt+0x214c>
   13790:	movw	r1, #37600	; 0x92e0
   13794:	movt	r1, #3
   13798:	ldr	r4, [r1]
   1379c:	mov	r1, r4
   137a0:	bl	11e50 <strcmp@plt>
   137a4:	ldr	ip, [sp, #120]	; 0x78
   137a8:	ldr	r6, [sp, #112]	; 0x70
   137ac:	mov	sl, r7
   137b0:	mvn	lr, #0
   137b4:	cmp	r0, #0
   137b8:	beq	144c4 <__assert_fail@plt+0x2158>
   137bc:	b	15080 <__assert_fail@plt+0x2d14>
   137c0:	movw	r0, #37600	; 0x92e0
   137c4:	ldr	r4, [fp, #-104]	; 0xffffff98
   137c8:	sub	r1, fp, #208	; 0xd0
   137cc:	add	r3, sp, #128	; 0x80
   137d0:	mov	r2, #10
   137d4:	movt	r0, #3
   137d8:	ldr	r5, [r0]
   137dc:	movw	r0, #31343	; 0x7a6f
   137e0:	movt	r0, #2
   137e4:	str	r0, [sp]
   137e8:	mov	r0, r5
   137ec:	bl	24204 <__assert_fail@plt+0x11e98>
   137f0:	cmp	r0, #2
   137f4:	beq	13e90 <__assert_fail@plt+0x1b24>
   137f8:	cmp	r0, #0
   137fc:	bne	1522c <__assert_fail@plt+0x2ec0>
   13800:	ldr	r0, [fp, #-208]	; 0xffffff30
   13804:	ldr	r6, [sp, #112]	; 0x70
   13808:	ldr	r3, [sp, #120]	; 0x78
   1380c:	mvn	lr, #0
   13810:	ldrb	r0, [r0, #-1]
   13814:	sub	r0, r0, #48	; 0x30
   13818:	cmp	r0, #9
   1381c:	bhi	13f28 <__assert_fail@plt+0x1bbc>
   13820:	ldr	r1, [sp, #132]	; 0x84
   13824:	mov	r0, #0
   13828:	cmp	r0, r1, lsr #22
   1382c:	bne	15228 <__assert_fail@plt+0x2ebc>
   13830:	ldr	r2, [sp, #128]	; 0x80
   13834:	lsl	r1, r1, #10
   13838:	orr	r1, r1, r2, lsr #22
   1383c:	lsl	r0, r2, #10
   13840:	str	r0, [sp, #128]	; 0x80
   13844:	str	r1, [sp, #132]	; 0x84
   13848:	b	13f30 <__assert_fail@plt+0x1bc4>
   1384c:	movw	r0, #37600	; 0x92e0
   13850:	movt	r0, #3
   13854:	ldr	r1, [r0]
   13858:	cmp	r1, #0
   1385c:	beq	144dc <__assert_fail@plt+0x2170>
   13860:	movw	r0, #37484	; 0x926c
   13864:	movw	r4, #33268	; 0x81f4
   13868:	mov	r2, #1
   1386c:	movt	r0, #3
   13870:	movt	r4, #2
   13874:	str	r2, [sp]
   13878:	ldr	r0, [r0]
   1387c:	mov	r3, r4
   13880:	stmib	sp, {r0, r2}
   13884:	movw	r0, #29543	; 0x7367
   13888:	movw	r2, #33272	; 0x81f8
   1388c:	movt	r0, #2
   13890:	movt	r2, #2
   13894:	bl	1c570 <__assert_fail@plt+0xa204>
   13898:	ldr	ip, [sp, #120]	; 0x78
   1389c:	ldr	r6, [sp, #112]	; 0x70
   138a0:	ldrb	r4, [r4, r0]
   138a4:	mov	sl, r7
   138a8:	mvn	lr, #0
   138ac:	b	144e0 <__assert_fail@plt+0x2174>
   138b0:	vmov.i32	q8, #0	; 0x00000000
   138b4:	sub	r1, fp, #288	; 0x120
   138b8:	movw	r4, #37600	; 0x92e0
   138bc:	mov	r0, #36	; 0x24
   138c0:	mov	r2, r1
   138c4:	movt	r4, #3
   138c8:	vst1.64	{d16-d17}, [r2], r0
   138cc:	mov	r0, #0
   138d0:	str	r0, [r2]
   138d4:	add	r2, r1, #16
   138d8:	str	r0, [fp, #-256]	; 0xffffff00
   138dc:	mvn	r0, #0
   138e0:	vst1.64	{d16-d17}, [r2]
   138e4:	str	r0, [fp, #-280]	; 0xfffffee8
   138e8:	ldr	r0, [r4]
   138ec:	movw	r2, #29591	; 0x7397
   138f0:	movt	r2, #2
   138f4:	bl	16b64 <__assert_fail@plt+0x47f8>
   138f8:	ldr	r2, [fp, #-288]	; 0xfffffee0
   138fc:	sub	r1, r2, #1
   13900:	cmp	r2, #0
   13904:	str	r1, [fp, #-288]	; 0xfffffee0
   13908:	beq	15244 <__assert_fail@plt+0x2ed8>
   1390c:	ldrb	r2, [r0]
   13910:	cmp	r2, #46	; 0x2e
   13914:	bne	13f88 <__assert_fail@plt+0x1c1c>
   13918:	ldr	r1, [sp, #76]	; 0x4c
   1391c:	movw	r2, #29481	; 0x7329
   13920:	add	r0, r0, #1
   13924:	movt	r2, #2
   13928:	bl	16b64 <__assert_fail@plt+0x47f8>
   1392c:	ldr	r1, [fp, #-284]	; 0xfffffee4
   13930:	sub	r2, r1, #1
   13934:	cmp	r1, #0
   13938:	str	r2, [fp, #-284]	; 0xfffffee4
   1393c:	beq	1508c <__assert_fail@plt+0x2d20>
   13940:	ldr	r1, [fp, #-288]	; 0xfffffee0
   13944:	b	13f8c <__assert_fail@plt+0x1c20>
   13948:	movw	r4, #37600	; 0x92e0
   1394c:	movt	r4, #3
   13950:	ldr	r0, [r4]
   13954:	ldrb	r1, [r0]
   13958:	cmp	r1, #0
   1395c:	beq	1509c <__assert_fail@plt+0x2d30>
   13960:	ldrb	r2, [r0, #1]
   13964:	cmp	r2, #0
   13968:	beq	13990 <__assert_fail@plt+0x1624>
   1396c:	movw	r1, #29768	; 0x7448
   13970:	movt	r1, #2
   13974:	bl	11e50 <strcmp@plt>
   13978:	ldr	ip, [sp, #120]	; 0x78
   1397c:	ldr	r6, [sp, #112]	; 0x70
   13980:	mvn	lr, #0
   13984:	mov	r1, #0
   13988:	cmp	r0, #0
   1398c:	bne	150a8 <__assert_fail@plt+0x2d3c>
   13990:	movw	r0, #37360	; 0x91f0
   13994:	movt	r0, #3
   13998:	ldr	r0, [r0, #4]
   1399c:	cmp	r0, #256	; 0x100
   139a0:	cmpne	r0, r1
   139a4:	bne	150dc <__assert_fail@plt+0x2d70>
   139a8:	movw	r0, #37360	; 0x91f0
   139ac:	mov	r4, #116	; 0x74
   139b0:	movt	r0, #3
   139b4:	str	r1, [r0, #4]
   139b8:	b	148bc <__assert_fail@plt+0x2550>
   139bc:	movw	r1, #39024	; 0x9870
   139c0:	mov	r0, #1
   139c4:	mov	r4, #117	; 0x75
   139c8:	movt	r1, #3
   139cc:	strb	r0, [r1, #7]
   139d0:	mov	r0, ip
   139d4:	b	13000 <__assert_fail@plt+0xc94>
   139d8:	movw	r0, #37600	; 0x92e0
   139dc:	ldr	r4, [fp, #-104]	; 0xffffff98
   139e0:	add	r3, sp, #128	; 0x80
   139e4:	mov	r1, #0
   139e8:	mov	r2, #10
   139ec:	movt	r0, #3
   139f0:	ldr	r5, [r0]
   139f4:	movw	r0, #25764	; 0x64a4
   139f8:	movt	r0, #2
   139fc:	str	r0, [sp]
   13a00:	mov	r0, r5
   13a04:	bl	24204 <__assert_fail@plt+0x11e98>
   13a08:	cmp	r0, #0
   13a0c:	beq	1418c <__assert_fail@plt+0x1e20>
   13a10:	ldr	r6, [sp, #112]	; 0x70
   13a14:	ldr	sl, [sp, #120]	; 0x78
   13a18:	mvn	r1, #0
   13a1c:	cmp	r0, #1
   13a20:	mvn	lr, #0
   13a24:	str	r1, [sp, #28]
   13a28:	beq	1452c <__assert_fail@plt+0x21c0>
   13a2c:	b	150e8 <__assert_fail@plt+0x2d7c>
   13a30:	movw	r0, #37600	; 0x92e0
   13a34:	mov	r4, #111	; 0x6f
   13a38:	movt	r0, #3
   13a3c:	ldr	r5, [r0]
   13a40:	ldr	r0, [sp, #52]	; 0x34
   13a44:	cmp	r0, #0
   13a48:	beq	14500 <__assert_fail@plt+0x2194>
   13a4c:	mov	r1, r5
   13a50:	mov	r7, ip
   13a54:	bl	11e50 <strcmp@plt>
   13a58:	ldr	r6, [sp, #112]	; 0x70
   13a5c:	ldr	sl, [sp, #100]	; 0x64
   13a60:	str	r5, [sp, #52]	; 0x34
   13a64:	movw	r5, #37576	; 0x92c8
   13a68:	cmp	r0, #0
   13a6c:	mvn	lr, #0
   13a70:	mov	r0, r7
   13a74:	movt	r5, #3
   13a78:	beq	13000 <__assert_fail@plt+0xc94>
   13a7c:	b	15100 <__assert_fail@plt+0x2d94>
   13a80:	movw	r0, #37600	; 0x92e0
   13a84:	movw	r4, #33232	; 0x81d0
   13a88:	mov	r2, #1
   13a8c:	movt	r0, #3
   13a90:	movt	r4, #2
   13a94:	str	r2, [sp]
   13a98:	ldr	r1, [r0]
   13a9c:	movw	r0, #37484	; 0x926c
   13aa0:	mov	r3, r4
   13aa4:	movt	r0, #3
   13aa8:	ldr	r0, [r0]
   13aac:	stmib	sp, {r0, r2}
   13ab0:	movw	r0, #29536	; 0x7360
   13ab4:	movw	r2, #33240	; 0x81d8
   13ab8:	movt	r0, #2
   13abc:	movt	r2, #2
   13ac0:	bl	1c570 <__assert_fail@plt+0xa204>
   13ac4:	ldr	ip, [sp, #120]	; 0x78
   13ac8:	ldr	r6, [sp, #112]	; 0x70
   13acc:	ldrb	r4, [r4, r0]
   13ad0:	movw	r3, #38248	; 0x9568
   13ad4:	mov	sl, r7
   13ad8:	mvn	lr, #0
   13adc:	movt	r3, #3
   13ae0:	b	134b4 <__assert_fail@plt+0x1148>
   13ae4:	movw	r7, #37600	; 0x92e0
   13ae8:	movt	r7, #3
   13aec:	ldr	r1, [r7]
   13af0:	ldrb	r0, [r1]
   13af4:	cmp	r0, #43	; 0x2b
   13af8:	bne	14498 <__assert_fail@plt+0x212c>
   13afc:	ldr	r3, [r5]
   13b00:	mov	r0, #0
   13b04:	mov	r5, #0
   13b08:	mov	r2, #0
   13b0c:	cmp	r3, r6
   13b10:	beq	13b4c <__assert_fail@plt+0x17e0>
   13b14:	ldr	r2, [sp, #100]	; 0x64
   13b18:	mov	r5, #0
   13b1c:	ldr	r3, [r2, r3, lsl #2]
   13b20:	ldrb	r2, [r3]
   13b24:	cmp	r2, #45	; 0x2d
   13b28:	mov	r2, #0
   13b2c:	bne	13b4c <__assert_fail@plt+0x17e0>
   13b30:	ldrb	r2, [r3, #1]
   13b34:	mov	r5, #0
   13b38:	sub	r2, r2, #48	; 0x30
   13b3c:	cmp	r2, #10
   13b40:	ldr	r2, [sp, #68]	; 0x44
   13b44:	movwcc	r5, #1
   13b48:	and	r2, r5, r2
   13b4c:	ldr	r3, [sp, #108]	; 0x6c
   13b50:	orr	r2, r3, r2
   13b54:	tst	r2, #1
   13b58:	beq	148a4 <__assert_fail@plt+0x2538>
   13b5c:	vmov.i32	q8, #0	; 0x00000000
   13b60:	sub	r3, fp, #288	; 0x120
   13b64:	mov	r0, #36	; 0x24
   13b68:	mov	r4, #0
   13b6c:	str	r9, [sp, #84]	; 0x54
   13b70:	mov	r2, r3
   13b74:	str	r4, [fp, #-256]	; 0xffffff00
   13b78:	vst1.64	{d16-d17}, [r2], r0
   13b7c:	add	r0, r3, #16
   13b80:	add	r3, sp, #128	; 0x80
   13b84:	vst1.64	{d16-d17}, [r0]
   13b88:	mvn	r0, #0
   13b8c:	str	r4, [r2]
   13b90:	mov	r2, #10
   13b94:	str	r0, [fp, #-280]	; 0xfffffee8
   13b98:	movw	r0, #25764	; 0x64a4
   13b9c:	movt	r0, #2
   13ba0:	str	r0, [sp]
   13ba4:	add	r0, r1, #1
   13ba8:	sub	r1, fp, #208	; 0xd0
   13bac:	bl	24204 <__assert_fail@plt+0x11e98>
   13bb0:	cmp	r0, #4
   13bb4:	bhi	13bf0 <__assert_fail@plt+0x1884>
   13bb8:	add	r1, pc, #0
   13bbc:	ldr	pc, [r1, r0, lsl #2]
   13bc0:	ldrdeq	r3, [r1], -r4
   13bc4:	andeq	r3, r1, r8, ror #23
   13bc8:	ldrdeq	r3, [r1], -r4
   13bcc:	andeq	r3, r1, r8, ror #23
   13bd0:	andeq	r4, r1, r0, asr #10
   13bd4:	ldr	r1, [sp, #132]	; 0x84
   13bd8:	ldr	r0, [sp, #128]	; 0x80
   13bdc:	cmp	r1, #0
   13be0:	str	r0, [fp, #-288]	; 0xfffffee0
   13be4:	beq	13bf0 <__assert_fail@plt+0x1884>
   13be8:	mvn	r0, #0
   13bec:	str	r0, [fp, #-288]	; 0xfffffee0
   13bf0:	ldr	r0, [fp, #-208]	; 0xffffff30
   13bf4:	ldr	r6, [sp, #112]	; 0x70
   13bf8:	ldr	ip, [sp, #120]	; 0x78
   13bfc:	movw	r3, #38248	; 0x9568
   13c00:	mvn	lr, #0
   13c04:	movt	r3, #3
   13c08:	cmp	r0, #0
   13c0c:	beq	14558 <__assert_fail@plt+0x21ec>
   13c10:	ldrb	r1, [r0]
   13c14:	cmp	r1, #46	; 0x2e
   13c18:	bne	14538 <__assert_fail@plt+0x21cc>
   13c1c:	movw	r1, #25764	; 0x64a4
   13c20:	add	r0, r0, #1
   13c24:	add	r3, sp, #128	; 0x80
   13c28:	mov	r2, #10
   13c2c:	movt	r1, #2
   13c30:	str	r1, [sp]
   13c34:	sub	r1, fp, #208	; 0xd0
   13c38:	bl	24204 <__assert_fail@plt+0x11e98>
   13c3c:	cmp	r0, #4
   13c40:	bhi	13c80 <__assert_fail@plt+0x1914>
   13c44:	add	r1, pc, #4
   13c48:	mov	r4, #0
   13c4c:	ldr	pc, [r1, r0, lsl #2]
   13c50:	andeq	r3, r1, r4, ror #24
   13c54:	andeq	r3, r1, r8, ror ip
   13c58:	andeq	r3, r1, r4, ror #24
   13c5c:	andeq	r3, r1, r8, ror ip
   13c60:	andeq	r4, r1, r4, asr #10
   13c64:	ldr	r1, [sp, #132]	; 0x84
   13c68:	ldr	r0, [sp, #128]	; 0x80
   13c6c:	cmp	r1, #0
   13c70:	str	r0, [fp, #-284]	; 0xfffffee4
   13c74:	beq	13c80 <__assert_fail@plt+0x1914>
   13c78:	mvn	r0, #0
   13c7c:	str	r0, [fp, #-284]	; 0xfffffee4
   13c80:	ldr	r4, [fp, #-208]	; 0xffffff30
   13c84:	b	14544 <__assert_fail@plt+0x21d8>
   13c88:	ldr	r0, [r5]
   13c8c:	mov	r4, #121	; 0x79
   13c90:	add	r1, sl, r0, lsl #2
   13c94:	ldr	r2, [r1, #-4]
   13c98:	movw	r1, #37600	; 0x92e0
   13c9c:	movt	r1, #3
   13ca0:	ldr	r1, [r1]
   13ca4:	cmp	r1, r2
   13ca8:	beq	13cb4 <__assert_fail@plt+0x1948>
   13cac:	mov	r0, ip
   13cb0:	b	13000 <__assert_fail@plt+0xc94>
   13cb4:	ldrb	r2, [r1], #1
   13cb8:	sub	r3, r2, #48	; 0x30
   13cbc:	cmp	r3, #10
   13cc0:	bcc	13cb4 <__assert_fail@plt+0x1948>
   13cc4:	cmp	r2, #0
   13cc8:	subne	r0, r0, #1
   13ccc:	str	r0, [r5]
   13cd0:	mov	r0, ip
   13cd4:	b	13000 <__assert_fail@plt+0xc94>
   13cd8:	movw	r1, #39024	; 0x9870
   13cdc:	mov	r0, #1
   13ce0:	mov	r4, #115	; 0x73
   13ce4:	movt	r1, #3
   13ce8:	strb	r0, [r1, #6]
   13cec:	mov	r0, ip
   13cf0:	b	13000 <__assert_fail@plt+0xc94>
   13cf4:	movw	r5, #39024	; 0x9870
   13cf8:	movw	r2, #37600	; 0x92e0
   13cfc:	movt	r5, #3
   13d00:	movt	r2, #3
   13d04:	ldr	r1, [r5, #24]
   13d08:	ldr	r0, [r5, #36]	; 0x24
   13d0c:	ldr	r4, [r2]
   13d10:	cmp	r1, r0
   13d14:	bne	144a0 <__assert_fail@plt+0x2134>
   13d18:	ldr	r0, [r5, #40]	; 0x28
   13d1c:	add	r1, r5, #36	; 0x24
   13d20:	mov	r2, #4
   13d24:	bl	23ac0 <__assert_fail@plt+0x11754>
   13d28:	str	r0, [r5, #40]	; 0x28
   13d2c:	ldr	ip, [sp, #120]	; 0x78
   13d30:	ldr	r6, [sp, #112]	; 0x70
   13d34:	mvn	lr, #0
   13d38:	ldr	r1, [r5, #24]
   13d3c:	b	144a4 <__assert_fail@plt+0x2138>
   13d40:	movw	r1, #39024	; 0x9870
   13d44:	mov	r0, #1
   13d48:	mov	r4, #122	; 0x7a
   13d4c:	movt	r1, #3
   13d50:	strb	r0, [r1, #8]
   13d54:	mov	r0, ip
   13d58:	b	13000 <__assert_fail@plt+0xc94>
   13d5c:	movw	r0, #37600	; 0x92e0
   13d60:	sub	r3, fp, #240	; 0xf0
   13d64:	mov	r2, #10
   13d68:	movt	r0, #3
   13d6c:	ldr	r1, [r0]
   13d70:	ldr	r0, [fp, #-104]	; 0xffffff98
   13d74:	str	r0, [sp, #84]	; 0x54
   13d78:	movw	r0, #25764	; 0x64a4
   13d7c:	str	r1, [sp, #64]	; 0x40
   13d80:	movt	r0, #2
   13d84:	str	r0, [sp]
   13d88:	mov	r0, r1
   13d8c:	mov	r1, #0
   13d90:	bl	24204 <__assert_fail@plt+0x11e98>
   13d94:	mov	r7, r0
   13d98:	add	r1, sp, #128	; 0x80
   13d9c:	mov	r0, #7
   13da0:	bl	11fb8 <getrlimit64@plt>
   13da4:	ldr	r1, [sp, #128]	; 0x80
   13da8:	cmp	r0, #0
   13dac:	mov	r4, #17
   13db0:	subeq	r4, r1, #3
   13db4:	cmp	r7, #0
   13db8:	bne	1510c <__assert_fail@plt+0x2da0>
   13dbc:	ldr	r1, [fp, #-236]	; 0xffffff14
   13dc0:	ldr	r0, [fp, #-240]	; 0xffffff10
   13dc4:	ldr	sl, [sp, #100]	; 0x64
   13dc8:	ldr	r6, [sp, #112]	; 0x70
   13dcc:	movw	r2, #37360	; 0x91f0
   13dd0:	movw	r5, #37576	; 0x92c8
   13dd4:	mvn	lr, #0
   13dd8:	movt	r2, #3
   13ddc:	movt	r5, #3
   13de0:	cmp	r1, #0
   13de4:	str	r0, [r2, #8]
   13de8:	bne	15114 <__assert_fail@plt+0x2da8>
   13dec:	cmp	r0, #1
   13df0:	bls	15198 <__assert_fail@plt+0x2e2c>
   13df4:	cmp	r4, r0
   13df8:	bcc	15114 <__assert_fail@plt+0x2da8>
   13dfc:	ldr	r0, [sp, #120]	; 0x78
   13e00:	mov	r4, #260	; 0x104
   13e04:	b	13000 <__assert_fail@plt+0xc94>
   13e08:	movw	r0, #37600	; 0x92e0
   13e0c:	movw	r4, #261	; 0x105
   13e10:	movt	r0, #3
   13e14:	ldr	r5, [r0]
   13e18:	ldr	r0, [sp, #32]
   13e1c:	cmp	r0, #0
   13e20:	beq	14508 <__assert_fail@plt+0x219c>
   13e24:	mov	r1, r5
   13e28:	mov	r7, ip
   13e2c:	bl	11e50 <strcmp@plt>
   13e30:	ldr	r6, [sp, #112]	; 0x70
   13e34:	ldr	sl, [sp, #100]	; 0x64
   13e38:	str	r5, [sp, #32]
   13e3c:	movw	r5, #37576	; 0x92c8
   13e40:	cmp	r0, #0
   13e44:	mvn	lr, #0
   13e48:	mov	r0, r7
   13e4c:	movt	r5, #3
   13e50:	beq	13000 <__assert_fail@plt+0xc94>
   13e54:	b	1521c <__assert_fail@plt+0x2eb0>
   13e58:	movw	r1, #39024	; 0x9870
   13e5c:	mov	r0, #1
   13e60:	movw	r4, #258	; 0x102
   13e64:	movt	r1, #3
   13e68:	strb	r0, [r1, #5]
   13e6c:	mov	r0, ip
   13e70:	b	13000 <__assert_fail@plt+0xc94>
   13e74:	movw	r0, #37600	; 0x92e0
   13e78:	movw	r4, #259	; 0x103
   13e7c:	movt	r0, #3
   13e80:	ldr	r0, [r0]
   13e84:	str	r0, [sp, #96]	; 0x60
   13e88:	mov	r0, ip
   13e8c:	b	13000 <__assert_fail@plt+0xc94>
   13e90:	ldr	r1, [fp, #-208]	; 0xffffff30
   13e94:	ldrb	r0, [r1, #-1]
   13e98:	sub	r2, r0, #48	; 0x30
   13e9c:	mov	r0, #2
   13ea0:	cmp	r2, #9
   13ea4:	bhi	1522c <__assert_fail@plt+0x2ec0>
   13ea8:	ldrb	r2, [r1, #1]
   13eac:	ldr	r6, [sp, #112]	; 0x70
   13eb0:	ldr	r3, [sp, #120]	; 0x78
   13eb4:	mvn	lr, #0
   13eb8:	cmp	r2, #0
   13ebc:	bne	1522c <__assert_fail@plt+0x2ec0>
   13ec0:	ldrb	r1, [r1]
   13ec4:	cmp	r1, #98	; 0x62
   13ec8:	beq	13f28 <__assert_fail@plt+0x1bbc>
   13ecc:	cmp	r1, #37	; 0x25
   13ed0:	bne	1522c <__assert_fail@plt+0x2ec0>
   13ed4:	bl	1fd48 <__assert_fail@plt+0xd9dc>
   13ed8:	ldr	r0, [sp, #128]	; 0x80
   13edc:	ldr	r1, [sp, #132]	; 0x84
   13ee0:	vmov.f64	d8, d0
   13ee4:	bl	2612c <_obstack_memory_used@@Base+0x40c>
   13ee8:	vmov	d16, r0, r1
   13eec:	vldr	d17, [pc, #1004]	; 142e0 <__assert_fail@plt+0x1f74>
   13ef0:	vldr	d18, [pc, #1008]	; 142e8 <__assert_fail@plt+0x1f7c>
   13ef4:	vmul.f64	d16, d8, d16
   13ef8:	vdiv.f64	d16, d16, d17
   13efc:	vcmpe.f64	d16, d18
   13f00:	vmrs	APSR_nzcv, fpscr
   13f04:	bpl	15228 <__assert_fail@plt+0x2ebc>
   13f08:	vmov	r0, r1, d16
   13f0c:	bl	261f0 <_obstack_memory_used@@Base+0x4d0>
   13f10:	ldr	r6, [sp, #112]	; 0x70
   13f14:	ldr	r3, [sp, #120]	; 0x78
   13f18:	str	r1, [sp, #132]	; 0x84
   13f1c:	str	r0, [sp, #128]	; 0x80
   13f20:	mvn	lr, #0
   13f24:	b	13f30 <__assert_fail@plt+0x1bc4>
   13f28:	ldr	r0, [sp, #128]	; 0x80
   13f2c:	ldr	r1, [sp, #132]	; 0x84
   13f30:	movw	r2, #39024	; 0x9870
   13f34:	movt	r2, #3
   13f38:	ldr	r2, [r2, #28]
   13f3c:	subs	r2, r0, r2
   13f40:	sbcs	r2, r1, #0
   13f44:	bcc	13f7c <__assert_fail@plt+0x1c10>
   13f48:	movw	r2, #39024	; 0x9870
   13f4c:	cmp	r1, #0
   13f50:	movt	r2, #3
   13f54:	str	r0, [r2, #28]
   13f58:	bne	15228 <__assert_fail@plt+0x2ebc>
   13f5c:	movw	r1, #37360	; 0x91f0
   13f60:	movt	r1, #3
   13f64:	ldr	r1, [r1, #8]
   13f68:	add	r1, r1, r1, lsl #3
   13f6c:	lsl	r1, r1, #1
   13f70:	cmp	r1, r0
   13f74:	movcc	r1, r0
   13f78:	str	r1, [r2, #28]
   13f7c:	mov	r4, #83	; 0x53
   13f80:	mov	r0, r3
   13f84:	b	148c0 <__assert_fail@plt+0x2554>
   13f88:	ldr	r2, [fp, #-284]	; 0xfffffee4
   13f8c:	movw	r3, #38248	; 0x9568
   13f90:	orrs	r1, r1, r2
   13f94:	movt	r3, #3
   13f98:	mvneq	r1, #0
   13f9c:	streq	r1, [fp, #-288]	; 0xfffffee0
   13fa0:	b	13fac <__assert_fail@plt+0x1c40>
   13fa4:	mov	r1, #1
   13fa8:	strb	r1, [fp, #-259]	; 0xfffffefd
   13fac:	add	r0, r0, #1
   13fb0:	ldrb	r1, [r0, #-1]
   13fb4:	sub	r1, r1, #44	; 0x2c
   13fb8:	cmp	r1, #70	; 0x46
   13fbc:	bhi	1416c <__assert_fail@plt+0x1e00>
   13fc0:	add	r2, pc, #0
   13fc4:	ldr	pc, [r2, r1, lsl #2]
   13fc8:	andeq	r4, r1, r0, asr #3
   13fcc:	andeq	r4, r1, ip, ror #2
   13fd0:	andeq	r4, r1, ip, ror #2
   13fd4:	andeq	r4, r1, ip, ror #2
   13fd8:	andeq	r4, r1, ip, ror #2
   13fdc:	andeq	r4, r1, ip, ror #2
   13fe0:	andeq	r4, r1, ip, ror #2
   13fe4:	andeq	r4, r1, ip, ror #2
   13fe8:	andeq	r4, r1, ip, ror #2
   13fec:	andeq	r4, r1, ip, ror #2
   13ff0:	andeq	r4, r1, ip, ror #2
   13ff4:	andeq	r4, r1, ip, ror #2
   13ff8:	andeq	r4, r1, ip, ror #2
   13ffc:	andeq	r4, r1, ip, ror #2
   14000:	andeq	r4, r1, ip, ror #2
   14004:	andeq	r4, r1, ip, ror #2
   14008:	andeq	r4, r1, ip, ror #2
   1400c:	andeq	r4, r1, ip, ror #2
   14010:	andeq	r4, r1, ip, ror #2
   14014:	andeq	r4, r1, ip, ror #2
   14018:	andeq	r4, r1, ip, ror #2
   1401c:	andeq	r4, r1, ip, ror #2
   14020:	andeq	r4, r1, ip, ror #2
   14024:	andeq	r4, r1, ip, ror #2
   14028:	andeq	r4, r1, ip, ror #2
   1402c:	andeq	r4, r1, ip, ror #2
   14030:	andeq	r4, r1, ip, ror #2
   14034:	andeq	r4, r1, ip, ror #2
   14038:	andeq	r4, r1, ip, ror #2
   1403c:	andeq	r4, r1, ip, ror #2
   14040:	andeq	r4, r1, ip, ror #2
   14044:	andeq	r4, r1, ip, ror #2
   14048:	andeq	r4, r1, ip, ror #2
   1404c:	andeq	r4, r1, r4, ror #1
   14050:	andeq	r4, r1, ip, ror #2
   14054:	andeq	r4, r1, ip, ror #2
   14058:	andeq	r4, r1, ip, ror #2
   1405c:	andeq	r4, r1, ip, ror #2
   14060:	andeq	r4, r1, ip, lsl #2
   14064:	andeq	r4, r1, ip, ror #2
   14068:	andeq	r4, r1, ip, ror #2
   1406c:	andeq	r4, r1, ip, ror #2
   14070:	andeq	r4, r1, ip, lsr #2
   14074:	andeq	r4, r1, ip, ror #2
   14078:	andeq	r4, r1, ip, ror #2
   1407c:	andeq	r4, r1, ip, ror #2
   14080:	andeq	r4, r1, ip, ror #2
   14084:	andeq	r4, r1, ip, ror #2
   14088:	andeq	r4, r1, ip, ror #2
   1408c:	andeq	r4, r1, ip, ror #2
   14090:	andeq	r4, r1, ip, ror #2
   14094:	andeq	r4, r1, ip, ror #2
   14098:	andeq	r4, r1, ip, ror #2
   1409c:	andeq	r4, r1, ip, ror #2
   140a0:	andeq	r4, r1, r8, lsl r1
   140a4:	andeq	r4, r1, ip, ror #2
   140a8:	andeq	r4, r1, r4, lsr #2
   140ac:	andeq	r4, r1, ip, ror #2
   140b0:	andeq	r4, r1, r8, lsr r1
   140b4:	andeq	r4, r1, r8, asr #2
   140b8:	andeq	r3, r1, r4, lsr #31
   140bc:	strdeq	r4, [r1], -r0
   140c0:	andeq	r4, r1, ip, ror #2
   140c4:	andeq	r4, r1, ip, ror #2
   140c8:	andeq	r4, r1, ip, ror #2
   140cc:	andeq	r4, r1, ip, ror #2
   140d0:	andeq	r4, r1, r4, asr r1
   140d4:	andeq	r4, r1, ip, ror #2
   140d8:	andeq	r4, r1, ip, ror #2
   140dc:	andeq	r4, r1, ip, ror #2
   140e0:	andeq	r4, r1, r0, ror #2
   140e4:	mov	r1, #1
   140e8:	strb	r1, [fp, #-258]	; 0xfffffefe
   140ec:	b	13fac <__assert_fail@plt+0x1c40>
   140f0:	ldr	r1, [fp, #-272]	; 0xfffffef0
   140f4:	cmp	r1, #0
   140f8:	bne	13fac <__assert_fail@plt+0x1c40>
   140fc:	movw	r1, #37992	; 0x9468
   14100:	movt	r1, #3
   14104:	str	r1, [fp, #-272]	; 0xfffffef0
   14108:	b	13fac <__assert_fail@plt+0x1c40>
   1410c:	mov	r1, #1
   14110:	strb	r1, [fp, #-261]	; 0xfffffefb
   14114:	b	13fac <__assert_fail@plt+0x1c40>
   14118:	mov	r1, #1
   1411c:	strb	r1, [fp, #-264]	; 0xfffffef8
   14120:	b	13fac <__assert_fail@plt+0x1c40>
   14124:	str	r3, [fp, #-272]	; 0xfffffef0
   14128:	b	13fac <__assert_fail@plt+0x1c40>
   1412c:	mov	r1, #1
   14130:	strb	r1, [fp, #-256]	; 0xffffff00
   14134:	b	13fac <__assert_fail@plt+0x1c40>
   14138:	movw	r1, #38504	; 0x9668
   1413c:	movt	r1, #3
   14140:	str	r1, [fp, #-268]	; 0xfffffef4
   14144:	b	13fac <__assert_fail@plt+0x1c40>
   14148:	mov	r1, #1
   1414c:	strb	r1, [fp, #-260]	; 0xfffffefc
   14150:	b	13fac <__assert_fail@plt+0x1c40>
   14154:	mov	r1, #1
   14158:	strb	r1, [fp, #-262]	; 0xfffffefa
   1415c:	b	13fac <__assert_fail@plt+0x1c40>
   14160:	mov	r1, #1
   14164:	strb	r1, [fp, #-257]	; 0xfffffeff
   14168:	b	13fac <__assert_fail@plt+0x1c40>
   1416c:	mov	r1, #0
   14170:	str	r1, [fp, #-276]	; 0xfffffeec
   14174:	mvn	r1, #0
   14178:	str	r1, [fp, #-280]	; 0xfffffee8
   1417c:	ldrb	r1, [r0, #-1]
   14180:	cmp	r1, #0
   14184:	beq	14448 <__assert_fail@plt+0x20dc>
   14188:	b	15254 <__assert_fail@plt+0x2ee8>
   1418c:	ldr	r0, [sp, #132]	; 0x84
   14190:	cmp	r0, #0
   14194:	beq	14510 <__assert_fail@plt+0x21a4>
   14198:	ldr	r6, [sp, #112]	; 0x70
   1419c:	ldr	sl, [sp, #120]	; 0x78
   141a0:	mov	r0, #0
   141a4:	mvn	r1, #0
   141a8:	mvn	lr, #0
   141ac:	str	r0, [sp, #132]	; 0x84
   141b0:	mvn	r0, #0
   141b4:	str	r1, [sp, #128]	; 0x80
   141b8:	str	r0, [sp, #28]
   141bc:	b	1452c <__assert_fail@plt+0x21c0>
   141c0:	ldr	r1, [sp, #80]	; 0x50
   141c4:	movw	r2, #29667	; 0x73e3
   141c8:	movt	r2, #2
   141cc:	bl	16b64 <__assert_fail@plt+0x47f8>
   141d0:	ldr	r1, [fp, #-280]	; 0xfffffee8
   141d4:	sub	r2, r1, #1
   141d8:	cmp	r1, #0
   141dc:	str	r2, [fp, #-280]	; 0xfffffee8
   141e0:	beq	15244 <__assert_fail@plt+0x2ed8>
   141e4:	ldrb	r1, [r0]
   141e8:	cmp	r1, #46	; 0x2e
   141ec:	bne	14204 <__assert_fail@plt+0x1e98>
   141f0:	ldr	r1, [sp, #72]	; 0x48
   141f4:	movw	r2, #29481	; 0x7329
   141f8:	add	r0, r0, #1
   141fc:	movt	r2, #2
   14200:	bl	16b64 <__assert_fail@plt+0x47f8>
   14204:	movw	r6, #38248	; 0x9568
   14208:	movt	r6, #3
   1420c:	ldrb	r1, [r0]
   14210:	sub	r2, r1, #77	; 0x4d
   14214:	cmp	r2, #37	; 0x25
   14218:	bls	1423c <__assert_fail@plt+0x1ed0>
   1421c:	b	1443c <__assert_fail@plt+0x20d0>
   14220:	mov	r1, #1
   14224:	add	r0, r0, #1
   14228:	strb	r1, [fp, #-259]	; 0xfffffefd
   1422c:	ldrb	r1, [r0]
   14230:	sub	r2, r1, #77	; 0x4d
   14234:	cmp	r2, #37	; 0x25
   14238:	bhi	1443c <__assert_fail@plt+0x20d0>
   1423c:	add	r3, pc, #0
   14240:	ldr	pc, [r3, r2, lsl #2]
   14244:	strdeq	r4, [r1], -r0
   14248:	andeq	r4, r1, ip, lsr r4
   1424c:	andeq	r4, r1, ip, lsr r4
   14250:	andeq	r4, r1, ip, lsr r4
   14254:	andeq	r4, r1, ip, lsr r4
   14258:	andeq	r4, r1, r0, ror #7
   1425c:	andeq	r4, r1, ip, lsr r4
   14260:	andeq	r4, r1, ip, lsr r4
   14264:	andeq	r4, r1, ip, lsr r4
   14268:	andeq	r4, r1, r4, lsr #7
   1426c:	andeq	r4, r1, ip, lsr r4
   14270:	andeq	r4, r1, ip, lsr r4
   14274:	andeq	r4, r1, ip, lsr r4
   14278:	andeq	r4, r1, ip, lsr r4
   1427c:	andeq	r4, r1, ip, lsr r4
   14280:	andeq	r4, r1, ip, lsr r4
   14284:	andeq	r4, r1, ip, lsr r4
   14288:	andeq	r4, r1, ip, lsr r4
   1428c:	andeq	r4, r1, ip, lsr r4
   14290:	andeq	r4, r1, ip, lsr r4
   14294:	andeq	r4, r1, ip, lsr r4
   14298:	andeq	r4, r1, r4, ror #6
   1429c:	andeq	r4, r1, ip, lsr r4
   142a0:	andeq	r4, r1, r4, asr #7
   142a4:	andeq	r4, r1, ip, lsr r4
   142a8:	andeq	r4, r1, r0, asr #6
   142ac:	andeq	r4, r1, r4, lsl #7
   142b0:	andeq	r4, r1, r0, lsr #4
   142b4:	andeq	r4, r1, r0, lsl r3
   142b8:	andeq	r4, r1, ip, lsr r4
   142bc:	andeq	r4, r1, ip, lsr r4
   142c0:	andeq	r4, r1, ip, lsr r4
   142c4:	andeq	r4, r1, ip, lsr r4
   142c8:	andeq	r4, r1, r0, lsr #8
   142cc:	andeq	r4, r1, ip, lsr r4
   142d0:	andeq	r4, r1, ip, lsr r4
   142d4:	andeq	r4, r1, ip, lsr r4
   142d8:	andeq	r4, r1, r0, lsl #8
   142dc:	nop	{0}
   142e0:	andeq	r0, r0, r0
   142e4:	subsmi	r0, r9, r0
   142e8:	andeq	r0, r0, r0
   142ec:	mvnsmi	r0, #0
   142f0:	mov	r1, #1
   142f4:	add	r0, r0, #1
   142f8:	strb	r1, [fp, #-258]	; 0xfffffefe
   142fc:	ldrb	r1, [r0]
   14300:	sub	r2, r1, #77	; 0x4d
   14304:	cmp	r2, #37	; 0x25
   14308:	bls	1423c <__assert_fail@plt+0x1ed0>
   1430c:	b	1443c <__assert_fail@plt+0x20d0>
   14310:	ldr	r1, [fp, #-272]	; 0xfffffef0
   14314:	cmp	r1, #0
   14318:	bne	143ac <__assert_fail@plt+0x2040>
   1431c:	movw	r1, #37992	; 0x9468
   14320:	add	r0, r0, #1
   14324:	movt	r1, #3
   14328:	str	r1, [fp, #-272]	; 0xfffffef0
   1432c:	ldrb	r1, [r0]
   14330:	sub	r2, r1, #77	; 0x4d
   14334:	cmp	r2, #37	; 0x25
   14338:	bls	1423c <__assert_fail@plt+0x1ed0>
   1433c:	b	1443c <__assert_fail@plt+0x20d0>
   14340:	movw	r1, #38504	; 0x9668
   14344:	add	r0, r0, #1
   14348:	movt	r1, #3
   1434c:	str	r1, [fp, #-268]	; 0xfffffef4
   14350:	ldrb	r1, [r0]
   14354:	sub	r2, r1, #77	; 0x4d
   14358:	cmp	r2, #37	; 0x25
   1435c:	bls	1423c <__assert_fail@plt+0x1ed0>
   14360:	b	1443c <__assert_fail@plt+0x20d0>
   14364:	mov	r1, #1
   14368:	add	r0, r0, #1
   1436c:	strb	r1, [fp, #-263]	; 0xfffffef9
   14370:	ldrb	r1, [r0]
   14374:	sub	r2, r1, #77	; 0x4d
   14378:	cmp	r2, #37	; 0x25
   1437c:	bls	1423c <__assert_fail@plt+0x1ed0>
   14380:	b	1443c <__assert_fail@plt+0x20d0>
   14384:	mov	r1, #1
   14388:	add	r0, r0, #1
   1438c:	strb	r1, [fp, #-260]	; 0xfffffefc
   14390:	ldrb	r1, [r0]
   14394:	sub	r2, r1, #77	; 0x4d
   14398:	cmp	r2, #37	; 0x25
   1439c:	bls	1423c <__assert_fail@plt+0x1ed0>
   143a0:	b	1443c <__assert_fail@plt+0x20d0>
   143a4:	mov	r1, #1
   143a8:	strb	r1, [fp, #-256]	; 0xffffff00
   143ac:	add	r0, r0, #1
   143b0:	ldrb	r1, [r0]
   143b4:	sub	r2, r1, #77	; 0x4d
   143b8:	cmp	r2, #37	; 0x25
   143bc:	bls	1423c <__assert_fail@plt+0x1ed0>
   143c0:	b	1443c <__assert_fail@plt+0x20d0>
   143c4:	str	r6, [fp, #-272]	; 0xfffffef0
   143c8:	add	r0, r0, #1
   143cc:	ldrb	r1, [r0]
   143d0:	sub	r2, r1, #77	; 0x4d
   143d4:	cmp	r2, #37	; 0x25
   143d8:	bls	1423c <__assert_fail@plt+0x1ed0>
   143dc:	b	1443c <__assert_fail@plt+0x20d0>
   143e0:	mov	r1, #1
   143e4:	add	r0, r0, #1
   143e8:	strb	r1, [fp, #-261]	; 0xfffffefb
   143ec:	ldrb	r1, [r0]
   143f0:	sub	r2, r1, #77	; 0x4d
   143f4:	cmp	r2, #37	; 0x25
   143f8:	bls	1423c <__assert_fail@plt+0x1ed0>
   143fc:	b	1443c <__assert_fail@plt+0x20d0>
   14400:	mov	r1, #1
   14404:	add	r0, r0, #1
   14408:	strb	r1, [fp, #-257]	; 0xfffffeff
   1440c:	ldrb	r1, [r0]
   14410:	sub	r2, r1, #77	; 0x4d
   14414:	cmp	r2, #37	; 0x25
   14418:	bls	1423c <__assert_fail@plt+0x1ed0>
   1441c:	b	1443c <__assert_fail@plt+0x20d0>
   14420:	mov	r1, #1
   14424:	add	r0, r0, #1
   14428:	strb	r1, [fp, #-262]	; 0xfffffefa
   1442c:	ldrb	r1, [r0]
   14430:	sub	r2, r1, #77	; 0x4d
   14434:	cmp	r2, #37	; 0x25
   14438:	bls	1423c <__assert_fail@plt+0x1ed0>
   1443c:	ldr	r7, [sp, #100]	; 0x64
   14440:	cmp	r1, #0
   14444:	bne	15254 <__assert_fail@plt+0x2ee8>
   14448:	sub	r0, fp, #288	; 0x120
   1444c:	mov	r1, #40	; 0x28
   14450:	bl	23d74 <__assert_fail@plt+0x11a08>
   14454:	movw	r1, #39024	; 0x9870
   14458:	movt	r1, #3
   1445c:	add	r1, r1, #20
   14460:	ldr	r3, [r1]
   14464:	mov	r2, r1
   14468:	add	r1, r3, #36	; 0x24
   1446c:	cmp	r3, #0
   14470:	bne	14460 <__assert_fail@plt+0x20f4>
   14474:	mov	r1, #0
   14478:	str	r0, [r2]
   1447c:	ldr	r6, [sp, #112]	; 0x70
   14480:	mov	r4, #107	; 0x6b
   14484:	mvn	lr, #0
   14488:	mov	sl, r7
   1448c:	str	r1, [r0, #36]	; 0x24
   14490:	ldr	r0, [sp, #120]	; 0x78
   14494:	b	13000 <__assert_fail@plt+0xc94>
   14498:	ldr	r0, [sp, #108]	; 0x6c
   1449c:	b	148a4 <__assert_fail@plt+0x2538>
   144a0:	ldr	r0, [r5, #40]	; 0x28
   144a4:	add	r2, r1, #1
   144a8:	str	r2, [r5, #24]
   144ac:	str	r4, [r0, r1, lsl #2]
   144b0:	mov	r4, #84	; 0x54
   144b4:	b	148bc <__assert_fail@plt+0x2550>
   144b8:	movw	r0, #37600	; 0x92e0
   144bc:	movt	r0, #3
   144c0:	ldr	r4, [r0]
   144c4:	movw	r0, #39024	; 0x9870
   144c8:	movt	r0, #3
   144cc:	str	r4, [r0, #16]
   144d0:	movw	r4, #257	; 0x101
   144d4:	mov	r0, ip
   144d8:	b	13000 <__assert_fail@plt+0xc94>
   144dc:	mov	r4, #99	; 0x63
   144e0:	ldr	r0, [sp, #88]	; 0x58
   144e4:	uxtb	r0, r0
   144e8:	cmp	r0, #0
   144ec:	cmpne	r4, r0
   144f0:	bne	15264 <__assert_fail@plt+0x2ef8>
   144f4:	mov	r0, ip
   144f8:	str	r4, [sp, #88]	; 0x58
   144fc:	b	13000 <__assert_fail@plt+0xc94>
   14500:	str	r5, [sp, #52]	; 0x34
   14504:	b	148bc <__assert_fail@plt+0x2550>
   14508:	str	r5, [sp, #32]
   1450c:	b	148bc <__assert_fail@plt+0x2550>
   14510:	ldr	r1, [sp, #128]	; 0x80
   14514:	ldr	r6, [sp, #112]	; 0x70
   14518:	ldr	sl, [sp, #120]	; 0x78
   1451c:	mvn	lr, #0
   14520:	orrs	r0, r1, r0
   14524:	str	r1, [sp, #28]
   14528:	beq	15270 <__assert_fail@plt+0x2f04>
   1452c:	movw	r4, #263	; 0x107
   14530:	mov	r0, sl
   14534:	b	148c0 <__assert_fail@plt+0x2554>
   14538:	mov	r4, r0
   1453c:	b	14558 <__assert_fail@plt+0x21ec>
   14540:	mov	r4, #0
   14544:	ldr	r6, [sp, #112]	; 0x70
   14548:	ldr	ip, [sp, #120]	; 0x78
   1454c:	movw	r3, #38248	; 0x9568
   14550:	mvn	lr, #0
   14554:	movt	r3, #3
   14558:	ldr	r0, [fp, #-288]	; 0xfffffee0
   1455c:	ldr	r1, [fp, #-284]	; 0xfffffee4
   14560:	orrs	r0, r0, r1
   14564:	mvneq	r0, #0
   14568:	streq	r0, [fp, #-288]	; 0xfffffee0
   1456c:	mov	r0, #1
   14570:	cmp	r4, #0
   14574:	bne	14588 <__assert_fail@plt+0x221c>
   14578:	b	148a0 <__assert_fail@plt+0x2534>
   1457c:	mov	r1, #1
   14580:	add	r4, r4, #1
   14584:	strb	r1, [fp, #-259]	; 0xfffffefd
   14588:	ldrb	r1, [r4]
   1458c:	cmp	r1, #114	; 0x72
   14590:	bhi	148a0 <__assert_fail@plt+0x2534>
   14594:	add	r2, pc, #0
   14598:	ldr	pc, [r2, r1, lsl #2]
   1459c:	andeq	r4, r1, r8, asr #17
   145a0:	andeq	r4, r1, r0, lsr #17
   145a4:	andeq	r4, r1, r0, lsr #17
   145a8:	andeq	r4, r1, r0, lsr #17
   145ac:	andeq	r4, r1, r0, lsr #17
   145b0:	andeq	r4, r1, r0, lsr #17
   145b4:	andeq	r4, r1, r0, lsr #17
   145b8:	andeq	r4, r1, r0, lsr #17
   145bc:	andeq	r4, r1, r0, lsr #17
   145c0:	andeq	r4, r1, r0, lsr #17
   145c4:	andeq	r4, r1, r0, lsr #17
   145c8:	andeq	r4, r1, r0, lsr #17
   145cc:	andeq	r4, r1, r0, lsr #17
   145d0:	andeq	r4, r1, r0, lsr #17
   145d4:	andeq	r4, r1, r0, lsr #17
   145d8:	andeq	r4, r1, r0, lsr #17
   145dc:	andeq	r4, r1, r0, lsr #17
   145e0:	andeq	r4, r1, r0, lsr #17
   145e4:	andeq	r4, r1, r0, lsr #17
   145e8:	andeq	r4, r1, r0, lsr #17
   145ec:	andeq	r4, r1, r0, lsr #17
   145f0:	andeq	r4, r1, r0, lsr #17
   145f4:	andeq	r4, r1, r0, lsr #17
   145f8:	andeq	r4, r1, r0, lsr #17
   145fc:	andeq	r4, r1, r0, lsr #17
   14600:	andeq	r4, r1, r0, lsr #17
   14604:	andeq	r4, r1, r0, lsr #17
   14608:	andeq	r4, r1, r0, lsr #17
   1460c:	andeq	r4, r1, r0, lsr #17
   14610:	andeq	r4, r1, r0, lsr #17
   14614:	andeq	r4, r1, r0, lsr #17
   14618:	andeq	r4, r1, r0, lsr #17
   1461c:	andeq	r4, r1, r0, lsr #17
   14620:	andeq	r4, r1, r0, lsr #17
   14624:	andeq	r4, r1, r0, lsr #17
   14628:	andeq	r4, r1, r0, lsr #17
   1462c:	andeq	r4, r1, r0, lsr #17
   14630:	andeq	r4, r1, r0, lsr #17
   14634:	andeq	r4, r1, r0, lsr #17
   14638:	andeq	r4, r1, r0, lsr #17
   1463c:	andeq	r4, r1, r0, lsr #17
   14640:	andeq	r4, r1, r0, lsr #17
   14644:	andeq	r4, r1, r0, lsr #17
   14648:	andeq	r4, r1, r0, lsr #17
   1464c:	andeq	r4, r1, r0, lsr #17
   14650:	andeq	r4, r1, r0, lsr #17
   14654:	andeq	r4, r1, r0, lsr #17
   14658:	andeq	r4, r1, r0, lsr #17
   1465c:	andeq	r4, r1, r0, lsr #17
   14660:	andeq	r4, r1, r0, lsr #17
   14664:	andeq	r4, r1, r0, lsr #17
   14668:	andeq	r4, r1, r0, lsr #17
   1466c:	andeq	r4, r1, r0, lsr #17
   14670:	andeq	r4, r1, r0, lsr #17
   14674:	andeq	r4, r1, r0, lsr #17
   14678:	andeq	r4, r1, r0, lsr #17
   1467c:	andeq	r4, r1, r0, lsr #17
   14680:	andeq	r4, r1, r0, lsr #17
   14684:	andeq	r4, r1, r0, lsr #17
   14688:	andeq	r4, r1, r0, lsr #17
   1468c:	andeq	r4, r1, r0, lsr #17
   14690:	andeq	r4, r1, r0, lsr #17
   14694:	andeq	r4, r1, r0, lsr #17
   14698:	andeq	r4, r1, r0, lsr #17
   1469c:	andeq	r4, r1, r0, lsr #17
   146a0:	andeq	r4, r1, r0, lsr #17
   146a4:	andeq	r4, r1, r0, lsr #17
   146a8:	andeq	r4, r1, r0, lsr #17
   146ac:	andeq	r4, r1, r0, lsr #17
   146b0:	andeq	r4, r1, r0, lsr #17
   146b4:	andeq	r4, r1, r0, lsr #17
   146b8:	andeq	r4, r1, r0, lsr #17
   146bc:	andeq	r4, r1, r0, lsr #17
   146c0:	andeq	r4, r1, r0, lsr #17
   146c4:	andeq	r4, r1, r0, lsr #17
   146c8:	andeq	r4, r1, r0, lsr #17
   146cc:	andeq	r4, r1, r0, lsr #17
   146d0:	andeq	r4, r1, r8, ror #14
   146d4:	andeq	r4, r1, r0, lsr #17
   146d8:	andeq	r4, r1, r0, lsr #17
   146dc:	andeq	r4, r1, r0, lsr #17
   146e0:	andeq	r4, r1, r0, lsr #17
   146e4:	andeq	r4, r1, r4, lsr #15
   146e8:	andeq	r4, r1, r0, lsr #17
   146ec:	andeq	r4, r1, r0, lsr #17
   146f0:	andeq	r4, r1, r0, lsr #17
   146f4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   146f8:	andeq	r4, r1, r0, lsr #17
   146fc:	andeq	r4, r1, r0, lsr #17
   14700:	andeq	r4, r1, r0, lsr #17
   14704:	andeq	r4, r1, r0, lsr #17
   14708:	andeq	r4, r1, r0, lsr #17
   1470c:	andeq	r4, r1, r0, lsr #17
   14710:	andeq	r4, r1, r0, lsr #17
   14714:	andeq	r4, r1, r0, lsr #17
   14718:	andeq	r4, r1, r0, lsr #17
   1471c:	andeq	r4, r1, r0, lsr #17
   14720:	andeq	r4, r1, r0, lsr #17
   14724:	andeq	r4, r1, r0, asr #15
   14728:	andeq	r4, r1, r0, lsr #17
   1472c:	ldrdeq	r4, [r1], -ip
   14730:	andeq	r4, r1, r0, lsr #17
   14734:	andeq	r4, r1, r0, lsl r8
   14738:	andeq	r4, r1, r0, lsr r8
   1473c:	andeq	r4, r1, ip, ror r5
   14740:	andeq	r4, r1, r4, lsl #15
   14744:	andeq	r4, r1, r0, lsr #17
   14748:	andeq	r4, r1, r0, lsr #17
   1474c:	andeq	r4, r1, r0, lsr #17
   14750:	andeq	r4, r1, r0, lsr #17
   14754:	andeq	r4, r1, ip, asr #16
   14758:	andeq	r4, r1, r0, lsr #17
   1475c:	andeq	r4, r1, r0, lsr #17
   14760:	andeq	r4, r1, r0, lsr #17
   14764:	andeq	r4, r1, r8, ror #16
   14768:	mov	r1, #1
   1476c:	add	r4, r4, #1
   14770:	strb	r1, [fp, #-258]	; 0xfffffefe
   14774:	ldrb	r1, [r4]
   14778:	cmp	r1, #114	; 0x72
   1477c:	bls	14594 <__assert_fail@plt+0x2228>
   14780:	b	148a0 <__assert_fail@plt+0x2534>
   14784:	ldr	r1, [fp, #-272]	; 0xfffffef0
   14788:	cmp	r1, #0
   1478c:	beq	14884 <__assert_fail@plt+0x2518>
   14790:	add	r4, r4, #1
   14794:	ldrb	r1, [r4]
   14798:	cmp	r1, #114	; 0x72
   1479c:	bls	14594 <__assert_fail@plt+0x2228>
   147a0:	b	148a0 <__assert_fail@plt+0x2534>
   147a4:	mov	r1, #1
   147a8:	add	r4, r4, #1
   147ac:	strb	r1, [fp, #-261]	; 0xfffffefb
   147b0:	ldrb	r1, [r4]
   147b4:	cmp	r1, #114	; 0x72
   147b8:	bls	14594 <__assert_fail@plt+0x2228>
   147bc:	b	148a0 <__assert_fail@plt+0x2534>
   147c0:	mov	r1, #1
   147c4:	add	r4, r4, #1
   147c8:	strb	r1, [fp, #-264]	; 0xfffffef8
   147cc:	ldrb	r1, [r4]
   147d0:	cmp	r1, #114	; 0x72
   147d4:	bls	14594 <__assert_fail@plt+0x2228>
   147d8:	b	148a0 <__assert_fail@plt+0x2534>
   147dc:	str	r3, [fp, #-272]	; 0xfffffef0
   147e0:	add	r4, r4, #1
   147e4:	ldrb	r1, [r4]
   147e8:	cmp	r1, #114	; 0x72
   147ec:	bls	14594 <__assert_fail@plt+0x2228>
   147f0:	b	148a0 <__assert_fail@plt+0x2534>
   147f4:	mov	r1, #1
   147f8:	strb	r1, [fp, #-256]	; 0xffffff00
   147fc:	add	r4, r4, #1
   14800:	ldrb	r1, [r4]
   14804:	cmp	r1, #114	; 0x72
   14808:	bls	14594 <__assert_fail@plt+0x2228>
   1480c:	b	148a0 <__assert_fail@plt+0x2534>
   14810:	movw	r1, #38504	; 0x9668
   14814:	add	r4, r4, #1
   14818:	movt	r1, #3
   1481c:	str	r1, [fp, #-268]	; 0xfffffef4
   14820:	ldrb	r1, [r4]
   14824:	cmp	r1, #114	; 0x72
   14828:	bls	14594 <__assert_fail@plt+0x2228>
   1482c:	b	148a0 <__assert_fail@plt+0x2534>
   14830:	mov	r1, #1
   14834:	add	r4, r4, #1
   14838:	strb	r1, [fp, #-260]	; 0xfffffefc
   1483c:	ldrb	r1, [r4]
   14840:	cmp	r1, #114	; 0x72
   14844:	bls	14594 <__assert_fail@plt+0x2228>
   14848:	b	148a0 <__assert_fail@plt+0x2534>
   1484c:	mov	r1, #1
   14850:	add	r4, r4, #1
   14854:	strb	r1, [fp, #-262]	; 0xfffffefa
   14858:	ldrb	r1, [r4]
   1485c:	cmp	r1, #114	; 0x72
   14860:	bls	14594 <__assert_fail@plt+0x2228>
   14864:	b	148a0 <__assert_fail@plt+0x2534>
   14868:	mov	r1, #1
   1486c:	add	r4, r4, #1
   14870:	strb	r1, [fp, #-257]	; 0xfffffeff
   14874:	ldrb	r1, [r4]
   14878:	cmp	r1, #114	; 0x72
   1487c:	bls	14594 <__assert_fail@plt+0x2228>
   14880:	b	148a0 <__assert_fail@plt+0x2534>
   14884:	movw	r1, #37992	; 0x9468
   14888:	add	r4, r4, #1
   1488c:	movt	r1, #3
   14890:	str	r1, [fp, #-272]	; 0xfffffef0
   14894:	ldrb	r1, [r4]
   14898:	cmp	r1, #114	; 0x72
   1489c:	bls	14594 <__assert_fail@plt+0x2228>
   148a0:	ldr	r9, [sp, #84]	; 0x54
   148a4:	ldr	r1, [r7]
   148a8:	ldr	r2, [sp, #124]	; 0x7c
   148ac:	mov	r4, #1
   148b0:	str	r0, [sp, #108]	; 0x6c
   148b4:	str	r1, [r2, r9, lsl #2]
   148b8:	add	r9, r9, #1
   148bc:	mov	r0, ip
   148c0:	ldr	sl, [sp, #100]	; 0x64
   148c4:	b	12ff8 <__assert_fail@plt+0xc8c>
   148c8:	ldr	sl, [sp, #100]	; 0x64
   148cc:	cmp	r5, #0
   148d0:	movw	r5, #37576	; 0x92c8
   148d4:	movt	r5, #3
   148d8:	beq	14c78 <__assert_fail@plt+0x290c>
   148dc:	ldr	r0, [r5]
   148e0:	movw	r2, #29422	; 0x72ee
   148e4:	mov	r6, sl
   148e8:	movt	r2, #2
   148ec:	add	r1, r0, #1
   148f0:	str	r1, [r5]
   148f4:	ldr	r1, [sp, #80]	; 0x50
   148f8:	ldr	r4, [sl, r0, lsl #2]
   148fc:	add	r0, r4, #1
   14900:	bl	16b64 <__assert_fail@plt+0x47f8>
   14904:	cmp	r0, #0
   14908:	beq	15294 <__assert_fail@plt+0x2f28>
   1490c:	ldrb	r1, [r0]
   14910:	cmp	r1, #46	; 0x2e
   14914:	bne	1492c <__assert_fail@plt+0x25c0>
   14918:	ldr	r1, [sp, #72]	; 0x48
   1491c:	movw	r2, #29481	; 0x7329
   14920:	add	r0, r0, #1
   14924:	movt	r2, #2
   14928:	bl	16b64 <__assert_fail@plt+0x47f8>
   1492c:	ldr	r1, [fp, #-276]	; 0xfffffeec
   14930:	mov	sl, r6
   14934:	cmp	r1, #0
   14938:	bne	1494c <__assert_fail@plt+0x25e0>
   1493c:	ldr	r1, [fp, #-280]	; 0xfffffee8
   14940:	cmp	r1, #0
   14944:	subne	r1, r1, #1
   14948:	strne	r1, [fp, #-280]	; 0xfffffee8
   1494c:	movw	r3, #38248	; 0x9568
   14950:	movt	r3, #3
   14954:	ldrb	r1, [r0]
   14958:	cmp	r1, #114	; 0x72
   1495c:	bhi	152b4 <__assert_fail@plt+0x2f48>
   14960:	add	r2, pc, #0
   14964:	ldr	pc, [r2, r1, lsl #2]
   14968:	andeq	r4, r1, r8, ror ip
   1496c:			; <UNDEFINED> instruction: 0x000152b4
   14970:			; <UNDEFINED> instruction: 0x000152b4
   14974:			; <UNDEFINED> instruction: 0x000152b4
   14978:			; <UNDEFINED> instruction: 0x000152b4
   1497c:			; <UNDEFINED> instruction: 0x000152b4
   14980:			; <UNDEFINED> instruction: 0x000152b4
   14984:			; <UNDEFINED> instruction: 0x000152b4
   14988:			; <UNDEFINED> instruction: 0x000152b4
   1498c:			; <UNDEFINED> instruction: 0x000152b4
   14990:			; <UNDEFINED> instruction: 0x000152b4
   14994:			; <UNDEFINED> instruction: 0x000152b4
   14998:			; <UNDEFINED> instruction: 0x000152b4
   1499c:			; <UNDEFINED> instruction: 0x000152b4
   149a0:			; <UNDEFINED> instruction: 0x000152b4
   149a4:			; <UNDEFINED> instruction: 0x000152b4
   149a8:			; <UNDEFINED> instruction: 0x000152b4
   149ac:			; <UNDEFINED> instruction: 0x000152b4
   149b0:			; <UNDEFINED> instruction: 0x000152b4
   149b4:			; <UNDEFINED> instruction: 0x000152b4
   149b8:			; <UNDEFINED> instruction: 0x000152b4
   149bc:			; <UNDEFINED> instruction: 0x000152b4
   149c0:			; <UNDEFINED> instruction: 0x000152b4
   149c4:			; <UNDEFINED> instruction: 0x000152b4
   149c8:			; <UNDEFINED> instruction: 0x000152b4
   149cc:			; <UNDEFINED> instruction: 0x000152b4
   149d0:			; <UNDEFINED> instruction: 0x000152b4
   149d4:			; <UNDEFINED> instruction: 0x000152b4
   149d8:			; <UNDEFINED> instruction: 0x000152b4
   149dc:			; <UNDEFINED> instruction: 0x000152b4
   149e0:			; <UNDEFINED> instruction: 0x000152b4
   149e4:			; <UNDEFINED> instruction: 0x000152b4
   149e8:			; <UNDEFINED> instruction: 0x000152b4
   149ec:			; <UNDEFINED> instruction: 0x000152b4
   149f0:			; <UNDEFINED> instruction: 0x000152b4
   149f4:			; <UNDEFINED> instruction: 0x000152b4
   149f8:			; <UNDEFINED> instruction: 0x000152b4
   149fc:			; <UNDEFINED> instruction: 0x000152b4
   14a00:			; <UNDEFINED> instruction: 0x000152b4
   14a04:			; <UNDEFINED> instruction: 0x000152b4
   14a08:			; <UNDEFINED> instruction: 0x000152b4
   14a0c:			; <UNDEFINED> instruction: 0x000152b4
   14a10:			; <UNDEFINED> instruction: 0x000152b4
   14a14:			; <UNDEFINED> instruction: 0x000152b4
   14a18:			; <UNDEFINED> instruction: 0x000152b4
   14a1c:			; <UNDEFINED> instruction: 0x000152b4
   14a20:			; <UNDEFINED> instruction: 0x000152b4
   14a24:			; <UNDEFINED> instruction: 0x000152b4
   14a28:			; <UNDEFINED> instruction: 0x000152b4
   14a2c:			; <UNDEFINED> instruction: 0x000152b4
   14a30:			; <UNDEFINED> instruction: 0x000152b4
   14a34:			; <UNDEFINED> instruction: 0x000152b4
   14a38:			; <UNDEFINED> instruction: 0x000152b4
   14a3c:			; <UNDEFINED> instruction: 0x000152b4
   14a40:			; <UNDEFINED> instruction: 0x000152b4
   14a44:			; <UNDEFINED> instruction: 0x000152b4
   14a48:			; <UNDEFINED> instruction: 0x000152b4
   14a4c:			; <UNDEFINED> instruction: 0x000152b4
   14a50:			; <UNDEFINED> instruction: 0x000152b4
   14a54:			; <UNDEFINED> instruction: 0x000152b4
   14a58:			; <UNDEFINED> instruction: 0x000152b4
   14a5c:			; <UNDEFINED> instruction: 0x000152b4
   14a60:			; <UNDEFINED> instruction: 0x000152b4
   14a64:			; <UNDEFINED> instruction: 0x000152b4
   14a68:			; <UNDEFINED> instruction: 0x000152b4
   14a6c:			; <UNDEFINED> instruction: 0x000152b4
   14a70:			; <UNDEFINED> instruction: 0x000152b4
   14a74:			; <UNDEFINED> instruction: 0x000152b4
   14a78:			; <UNDEFINED> instruction: 0x000152b4
   14a7c:			; <UNDEFINED> instruction: 0x000152b4
   14a80:			; <UNDEFINED> instruction: 0x000152b4
   14a84:			; <UNDEFINED> instruction: 0x000152b4
   14a88:			; <UNDEFINED> instruction: 0x000152b4
   14a8c:			; <UNDEFINED> instruction: 0x000152b4
   14a90:			; <UNDEFINED> instruction: 0x000152b4
   14a94:			; <UNDEFINED> instruction: 0x000152b4
   14a98:			; <UNDEFINED> instruction: 0x000152b4
   14a9c:	andeq	r4, r1, r4, lsr fp
   14aa0:			; <UNDEFINED> instruction: 0x000152b4
   14aa4:			; <UNDEFINED> instruction: 0x000152b4
   14aa8:			; <UNDEFINED> instruction: 0x000152b4
   14aac:			; <UNDEFINED> instruction: 0x000152b4
   14ab0:	andeq	r4, r1, ip, ror #23
   14ab4:			; <UNDEFINED> instruction: 0x000152b4
   14ab8:			; <UNDEFINED> instruction: 0x000152b4
   14abc:			; <UNDEFINED> instruction: 0x000152b4
   14ac0:	andeq	r4, r1, r8, lsl #24
   14ac4:			; <UNDEFINED> instruction: 0x000152b4
   14ac8:			; <UNDEFINED> instruction: 0x000152b4
   14acc:			; <UNDEFINED> instruction: 0x000152b4
   14ad0:			; <UNDEFINED> instruction: 0x000152b4
   14ad4:			; <UNDEFINED> instruction: 0x000152b4
   14ad8:			; <UNDEFINED> instruction: 0x000152b4
   14adc:			; <UNDEFINED> instruction: 0x000152b4
   14ae0:			; <UNDEFINED> instruction: 0x000152b4
   14ae4:			; <UNDEFINED> instruction: 0x000152b4
   14ae8:			; <UNDEFINED> instruction: 0x000152b4
   14aec:			; <UNDEFINED> instruction: 0x000152b4
   14af0:	andeq	r4, r1, r4, lsr #24
   14af4:			; <UNDEFINED> instruction: 0x000152b4
   14af8:			; <UNDEFINED> instruction: 0x00014bb4
   14afc:			; <UNDEFINED> instruction: 0x000152b4
   14b00:	andeq	r4, r1, ip, asr #23
   14b04:	muleq	r1, r8, fp
   14b08:	andeq	r4, r1, r0, asr #24
   14b0c:	andeq	r4, r1, ip, ror #22
   14b10:			; <UNDEFINED> instruction: 0x000152b4
   14b14:			; <UNDEFINED> instruction: 0x000152b4
   14b18:			; <UNDEFINED> instruction: 0x000152b4
   14b1c:			; <UNDEFINED> instruction: 0x000152b4
   14b20:	andeq	r4, r1, ip, asr ip
   14b24:			; <UNDEFINED> instruction: 0x000152b4
   14b28:			; <UNDEFINED> instruction: 0x000152b4
   14b2c:			; <UNDEFINED> instruction: 0x000152b4
   14b30:	andeq	r4, r1, r0, asr fp
   14b34:	mov	r1, #1
   14b38:	add	r0, r0, #1
   14b3c:	strb	r1, [fp, #-258]	; 0xfffffefe
   14b40:	ldrb	r1, [r0]
   14b44:	cmp	r1, #114	; 0x72
   14b48:	bls	14960 <__assert_fail@plt+0x25f4>
   14b4c:	b	152b4 <__assert_fail@plt+0x2f48>
   14b50:	mov	r1, #1
   14b54:	add	r0, r0, #1
   14b58:	strb	r1, [fp, #-257]	; 0xfffffeff
   14b5c:	ldrb	r1, [r0]
   14b60:	cmp	r1, #114	; 0x72
   14b64:	bls	14960 <__assert_fail@plt+0x25f4>
   14b68:	b	152b4 <__assert_fail@plt+0x2f48>
   14b6c:	ldr	r1, [fp, #-272]	; 0xfffffef0
   14b70:	cmp	r1, #0
   14b74:	bne	14c10 <__assert_fail@plt+0x28a4>
   14b78:	movw	r1, #37992	; 0x9468
   14b7c:	add	r0, r0, #1
   14b80:	movt	r1, #3
   14b84:	str	r1, [fp, #-272]	; 0xfffffef0
   14b88:	ldrb	r1, [r0]
   14b8c:	cmp	r1, #114	; 0x72
   14b90:	bls	14960 <__assert_fail@plt+0x25f4>
   14b94:	b	152b4 <__assert_fail@plt+0x2f48>
   14b98:	mov	r1, #1
   14b9c:	add	r0, r0, #1
   14ba0:	strb	r1, [fp, #-260]	; 0xfffffefc
   14ba4:	ldrb	r1, [r0]
   14ba8:	cmp	r1, #114	; 0x72
   14bac:	bls	14960 <__assert_fail@plt+0x25f4>
   14bb0:	b	152b4 <__assert_fail@plt+0x2f48>
   14bb4:	str	r3, [fp, #-272]	; 0xfffffef0
   14bb8:	add	r0, r0, #1
   14bbc:	ldrb	r1, [r0]
   14bc0:	cmp	r1, #114	; 0x72
   14bc4:	bls	14960 <__assert_fail@plt+0x25f4>
   14bc8:	b	152b4 <__assert_fail@plt+0x2f48>
   14bcc:	movw	r1, #38504	; 0x9668
   14bd0:	add	r0, r0, #1
   14bd4:	movt	r1, #3
   14bd8:	str	r1, [fp, #-268]	; 0xfffffef4
   14bdc:	ldrb	r1, [r0]
   14be0:	cmp	r1, #114	; 0x72
   14be4:	bls	14960 <__assert_fail@plt+0x25f4>
   14be8:	b	152b4 <__assert_fail@plt+0x2f48>
   14bec:	mov	r1, #1
   14bf0:	add	r0, r0, #1
   14bf4:	strb	r1, [fp, #-261]	; 0xfffffefb
   14bf8:	ldrb	r1, [r0]
   14bfc:	cmp	r1, #114	; 0x72
   14c00:	bls	14960 <__assert_fail@plt+0x25f4>
   14c04:	b	152b4 <__assert_fail@plt+0x2f48>
   14c08:	mov	r1, #1
   14c0c:	strb	r1, [fp, #-256]	; 0xffffff00
   14c10:	add	r0, r0, #1
   14c14:	ldrb	r1, [r0]
   14c18:	cmp	r1, #114	; 0x72
   14c1c:	bls	14960 <__assert_fail@plt+0x25f4>
   14c20:	b	152b4 <__assert_fail@plt+0x2f48>
   14c24:	mov	r1, #1
   14c28:	add	r0, r0, #1
   14c2c:	strb	r1, [fp, #-263]	; 0xfffffef9
   14c30:	ldrb	r1, [r0]
   14c34:	cmp	r1, #114	; 0x72
   14c38:	bls	14960 <__assert_fail@plt+0x25f4>
   14c3c:	b	152b4 <__assert_fail@plt+0x2f48>
   14c40:	mov	r1, #1
   14c44:	add	r0, r0, #1
   14c48:	strb	r1, [fp, #-259]	; 0xfffffefd
   14c4c:	ldrb	r1, [r0]
   14c50:	cmp	r1, #114	; 0x72
   14c54:	bls	14960 <__assert_fail@plt+0x25f4>
   14c58:	b	152b4 <__assert_fail@plt+0x2f48>
   14c5c:	mov	r1, #1
   14c60:	add	r0, r0, #1
   14c64:	strb	r1, [fp, #-262]	; 0xfffffefa
   14c68:	ldrb	r1, [r0]
   14c6c:	cmp	r1, #114	; 0x72
   14c70:	bls	14960 <__assert_fail@plt+0x25f4>
   14c74:	b	152b4 <__assert_fail@plt+0x2f48>
   14c78:	mov	r0, #1
   14c7c:	mov	r1, #40	; 0x28
   14c80:	strb	r0, [fp, #-255]	; 0xffffff01
   14c84:	sub	r0, fp, #288	; 0x120
   14c88:	bl	23d74 <__assert_fail@plt+0x11a08>
   14c8c:	movw	r1, #39024	; 0x9870
   14c90:	ldr	r9, [sp, #84]	; 0x54
   14c94:	movt	r1, #3
   14c98:	add	r1, r1, #20
   14c9c:	ldr	r3, [r1]
   14ca0:	mov	r2, r1
   14ca4:	add	r1, r3, #36	; 0x24
   14ca8:	cmp	r3, #0
   14cac:	bne	14c9c <__assert_fail@plt+0x2930>
   14cb0:	mov	r1, #0
   14cb4:	str	r0, [r2]
   14cb8:	ldr	r6, [sp, #112]	; 0x70
   14cbc:	mov	r4, #1
   14cc0:	mvn	lr, #0
   14cc4:	str	r1, [r0, #36]	; 0x24
   14cc8:	mov	r0, #1
   14ccc:	str	r0, [sp, #108]	; 0x6c
   14cd0:	ldr	r0, [sp, #120]	; 0x78
   14cd4:	b	13000 <__assert_fail@plt+0xc94>
   14cd8:	ldr	r6, [sp, #96]	; 0x60
   14cdc:	str	ip, [sp, #120]	; 0x78
   14ce0:	cmp	r6, #0
   14ce4:	beq	14de4 <__assert_fail@plt+0x2a78>
   14ce8:	movw	sl, #39024	; 0x9870
   14cec:	cmp	r9, #0
   14cf0:	movt	sl, #3
   14cf4:	bne	152e4 <__assert_fail@plt+0x2f78>
   14cf8:	movw	r1, #30798	; 0x784e
   14cfc:	ldr	r7, [sp, #88]	; 0x58
   14d00:	mov	r0, r6
   14d04:	movt	r1, #2
   14d08:	bl	179a8 <__assert_fail@plt+0x563c>
   14d0c:	cmp	r0, #0
   14d10:	beq	16920 <__assert_fail@plt+0x45b4>
   14d14:	add	r5, sp, #128	; 0x80
   14d18:	mov	r4, r0
   14d1c:	mov	r0, r5
   14d20:	bl	22928 <__assert_fail@plt+0x105bc>
   14d24:	mov	r0, r4
   14d28:	mov	r1, r5
   14d2c:	bl	229dc <__assert_fail@plt+0x10670>
   14d30:	cmp	r0, #0
   14d34:	beq	15360 <__assert_fail@plt+0x2ff4>
   14d38:	mov	r0, r4
   14d3c:	mov	r1, r6
   14d40:	bl	16cd4 <__assert_fail@plt+0x4968>
   14d44:	ldr	r0, [sp, #128]	; 0x80
   14d48:	cmp	r0, #0
   14d4c:	beq	15384 <__assert_fail@plt+0x3018>
   14d50:	ldr	r0, [sp, #124]	; 0x7c
   14d54:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   14d58:	ldr	r0, [sp, #132]	; 0x84
   14d5c:	ldr	r9, [sp, #128]	; 0x80
   14d60:	movw	r4, #31526	; 0x7b26
   14d64:	mov	r6, #0
   14d68:	movt	r4, #2
   14d6c:	str	r0, [sp, #124]	; 0x7c
   14d70:	cmp	r9, r6
   14d74:	beq	14df0 <__assert_fail@plt+0x2a84>
   14d78:	ldr	r0, [sp, #124]	; 0x7c
   14d7c:	mov	r1, r4
   14d80:	ldr	r5, [r0, r6, lsl #2]
   14d84:	mov	r0, r5
   14d88:	bl	11e50 <strcmp@plt>
   14d8c:	cmp	r0, #0
   14d90:	beq	15044 <__assert_fail@plt+0x2cd8>
   14d94:	ldrb	r0, [r5]
   14d98:	add	r6, r6, #1
   14d9c:	cmp	r0, #0
   14da0:	bne	14d70 <__assert_fail@plt+0x2a04>
   14da4:	movw	r1, #30014	; 0x753e
   14da8:	mov	r0, #0
   14dac:	mov	r2, #5
   14db0:	movt	r1, #2
   14db4:	bl	11f7c <dcgettext@plt>
   14db8:	ldr	r2, [sp, #96]	; 0x60
   14dbc:	mov	r4, r0
   14dc0:	mov	r0, #0
   14dc4:	mov	r1, #3
   14dc8:	bl	21e04 <__assert_fail@plt+0xfa98>
   14dcc:	mov	r3, r0
   14dd0:	str	r6, [sp]
   14dd4:	mov	r0, #2
   14dd8:	mov	r1, #0
   14ddc:	mov	r2, r4
   14de0:	bl	120a8 <error@plt>
   14de4:	ldr	r7, [sp, #88]	; 0x58
   14de8:	movw	sl, #39024	; 0x9870
   14dec:	movt	sl, #3
   14df0:	ldr	r0, [sl, #20]
   14df4:	mov	r4, #0
   14df8:	cmp	r0, #0
   14dfc:	beq	14f20 <__assert_fail@plt+0x2bb4>
   14e00:	mov	r4, #0
   14e04:	mov	r1, r0
   14e08:	ldr	r2, [r1, #16]
   14e0c:	cmp	r2, #0
   14e10:	beq	14e3c <__assert_fail@plt+0x2ad0>
   14e14:	ldrb	r2, [r1, #27]
   14e18:	ldr	r1, [r1, #36]	; 0x24
   14e1c:	and	r3, r4, #1
   14e20:	orrs	r4, r2, r3
   14e24:	movwne	r4, #1
   14e28:	cmp	r1, #0
   14e2c:	beq	14f10 <__assert_fail@plt+0x2ba4>
   14e30:	ldr	r2, [r1, #16]
   14e34:	cmp	r2, #0
   14e38:	bne	14e14 <__assert_fail@plt+0x2aa8>
   14e3c:	ldr	r2, [r1, #20]
   14e40:	cmp	r2, #0
   14e44:	bne	14e14 <__assert_fail@plt+0x2aa8>
   14e48:	ldrb	r2, [r1, #24]
   14e4c:	cmp	r2, #0
   14e50:	bne	14e14 <__assert_fail@plt+0x2aa8>
   14e54:	ldrb	r2, [r1, #25]
   14e58:	cmp	r2, #0
   14e5c:	bne	14e14 <__assert_fail@plt+0x2aa8>
   14e60:	ldrb	r2, [r1, #26]
   14e64:	cmp	r2, #0
   14e68:	bne	14e14 <__assert_fail@plt+0x2aa8>
   14e6c:	ldrb	r2, [r1, #28]
   14e70:	cmp	r2, #0
   14e74:	bne	14e14 <__assert_fail@plt+0x2aa8>
   14e78:	ldrb	r2, [r1, #29]
   14e7c:	cmp	r2, #0
   14e80:	bne	14e14 <__assert_fail@plt+0x2aa8>
   14e84:	ldrb	r2, [r1, #30]
   14e88:	cmp	r2, #0
   14e8c:	bne	14e14 <__assert_fail@plt+0x2aa8>
   14e90:	ldrb	r2, [r1, #32]
   14e94:	cmp	r2, #0
   14e98:	bne	14e14 <__assert_fail@plt+0x2aa8>
   14e9c:	ldrb	r2, [r1, #27]
   14ea0:	cmp	r2, #0
   14ea4:	bne	14e14 <__assert_fail@plt+0x2aa8>
   14ea8:	ldrb	r2, [r1, #31]
   14eac:	cmp	r2, #0
   14eb0:	bne	14e14 <__assert_fail@plt+0x2aa8>
   14eb4:	ldr	r2, [sp, #288]	; 0x120
   14eb8:	str	r2, [r1, #16]
   14ebc:	ldr	r2, [sp, #292]	; 0x124
   14ec0:	str	r2, [r1, #20]
   14ec4:	ldrb	r2, [sp, #296]	; 0x128
   14ec8:	strb	r2, [r1, #24]
   14ecc:	ldrb	r2, [sp, #297]	; 0x129
   14ed0:	strb	r2, [r1, #25]
   14ed4:	ldrb	r2, [sp, #302]	; 0x12e
   14ed8:	strb	r2, [r1, #30]
   14edc:	ldrb	r2, [sp, #298]	; 0x12a
   14ee0:	strb	r2, [r1, #26]
   14ee4:	ldrb	r2, [sp, #300]	; 0x12c
   14ee8:	strb	r2, [r1, #28]
   14eec:	ldrb	r2, [sp, #301]	; 0x12d
   14ef0:	strb	r2, [r1, #29]
   14ef4:	ldrb	r2, [sp, #304]	; 0x130
   14ef8:	strb	r2, [r1, #32]
   14efc:	ldrb	r2, [sp, #299]	; 0x12b
   14f00:	strb	r2, [r1, #27]
   14f04:	ldrb	r2, [sp, #303]	; 0x12f
   14f08:	strb	r2, [r1, #31]
   14f0c:	b	14e14 <__assert_fail@plt+0x2aa8>
   14f10:	mov	r1, #0
   14f14:	cmp	r0, #0
   14f18:	str	r1, [sp, #64]	; 0x40
   14f1c:	bne	153a4 <__assert_fail@plt+0x3038>
   14f20:	ldrb	r0, [sp, #297]	; 0x129
   14f24:	ldrb	r1, [sp, #296]	; 0x128
   14f28:	orr	r0, r1, r0
   14f2c:	ldrb	r1, [sp, #298]	; 0x12a
   14f30:	orr	r0, r0, r1
   14f34:	ldrb	r1, [sp, #300]	; 0x12c
   14f38:	orr	r0, r0, r1
   14f3c:	ldrb	r1, [sp, #301]	; 0x12d
   14f40:	orr	r0, r0, r1
   14f44:	ldrb	r1, [sp, #302]	; 0x12e
   14f48:	orr	r0, r0, r1
   14f4c:	ldrb	r1, [sp, #304]	; 0x130
   14f50:	orr	r0, r0, r1
   14f54:	ldrb	r1, [sp, #299]	; 0x12b
   14f58:	orrs	r0, r0, r1
   14f5c:	bne	14f74 <__assert_fail@plt+0x2c08>
   14f60:	ldr	r0, [sp, #288]	; 0x120
   14f64:	cmp	r0, #0
   14f68:	ldreq	r0, [sp, #292]	; 0x124
   14f6c:	cmpeq	r0, #0
   14f70:	beq	14fc8 <__assert_fail@plt+0x2c5c>
   14f74:	add	r0, sp, #272	; 0x110
   14f78:	mov	r1, #40	; 0x28
   14f7c:	bl	23d74 <__assert_fail@plt+0x11a08>
   14f80:	add	r1, sl, #20
   14f84:	ldr	r3, [r1]
   14f88:	mov	r2, r1
   14f8c:	add	r1, r3, #36	; 0x24
   14f90:	cmp	r3, #0
   14f94:	bne	14f84 <__assert_fail@plt+0x2c18>
   14f98:	str	r0, [r2]
   14f9c:	mov	r1, #0
   14fa0:	str	r1, [r0, #36]	; 0x24
   14fa4:	ldrb	r0, [sp, #299]	; 0x12b
   14fa8:	mov	r1, #1
   14fac:	str	r1, [sp, #64]	; 0x40
   14fb0:	orrs	r4, r0, r4
   14fb4:	ldr	r0, [sl, #20]
   14fb8:	movwne	r4, #1
   14fbc:	cmp	r0, #0
   14fc0:	bne	153a4 <__assert_fail@plt+0x3038>
   14fc4:	b	153f0 <__assert_fail@plt+0x3084>
   14fc8:	mov	r0, #0
   14fcc:	str	r0, [sp, #64]	; 0x40
   14fd0:	ldrb	r0, [sl, #5]
   14fd4:	cmp	r0, #1
   14fd8:	bne	15f64 <__assert_fail@plt+0x3bf8>
   14fdc:	b	153fc <__assert_fail@plt+0x3090>
   14fe0:	mov	r0, #2
   14fe4:	bl	12470 <__assert_fail@plt+0x104>
   14fe8:	movw	r0, #37480	; 0x9268
   14fec:	movw	r2, #29839	; 0x748f
   14ff0:	mov	r1, #0
   14ff4:	movw	r7, #29826	; 0x7482
   14ff8:	movt	r0, #3
   14ffc:	movt	r2, #2
   15000:	str	r1, [sp, #8]
   15004:	movw	r1, #29538	; 0x7362
   15008:	movt	r7, #2
   1500c:	movt	r1, #2
   15010:	ldr	r3, [r0]
   15014:	movw	r0, #37596	; 0x92dc
   15018:	str	r2, [sp, #4]
   1501c:	movw	r2, #29812	; 0x7474
   15020:	str	r7, [sp]
   15024:	movt	r0, #3
   15028:	movt	r2, #2
   1502c:	ldr	r0, [r0]
   15030:	bl	236e0 <__assert_fail@plt+0x11374>
   15034:	mov	r0, #0
   15038:	bl	12150 <exit@plt>
   1503c:	mov	r0, #0
   15040:	bl	12470 <__assert_fail@plt+0x104>
   15044:	movw	r1, #29951	; 0x74ff
   15048:	mov	r0, #0
   1504c:	mov	r2, #5
   15050:	movt	r1, #2
   15054:	bl	11f7c <dcgettext@plt>
   15058:	mov	r4, r0
   1505c:	ldr	r0, [sp, #124]	; 0x7c
   15060:	ldr	r1, [r0, r6, lsl #2]
   15064:	mov	r0, #4
   15068:	bl	21b88 <__assert_fail@plt+0xf81c>
   1506c:	mov	r3, r0
   15070:	mov	r0, #2
   15074:	mov	r1, #0
   15078:	mov	r2, r4
   1507c:	bl	120a8 <error@plt>
   15080:	movw	r1, #29554	; 0x7372
   15084:	movt	r1, #2
   15088:	b	15278 <__assert_fail@plt+0x2f0c>
   1508c:	ldr	r0, [r4]
   15090:	movw	r1, #29642	; 0x73ca
   15094:	movt	r1, #2
   15098:	bl	16c40 <__assert_fail@plt+0x48d4>
   1509c:	movw	r1, #29758	; 0x743e
   150a0:	movt	r1, #2
   150a4:	b	15278 <__assert_fail@plt+0x2f0c>
   150a8:	movw	r1, #29771	; 0x744b
   150ac:	mov	r0, #0
   150b0:	mov	r2, #5
   150b4:	movt	r1, #2
   150b8:	bl	11f7c <dcgettext@plt>
   150bc:	mov	r5, r0
   150c0:	ldr	r0, [r4]
   150c4:	bl	220b0 <__assert_fail@plt+0xfd44>
   150c8:	mov	r3, r0
   150cc:	mov	r0, #2
   150d0:	mov	r1, #0
   150d4:	mov	r2, r5
   150d8:	bl	120a8 <error@plt>
   150dc:	movw	r1, #29794	; 0x7462
   150e0:	movt	r1, #2
   150e4:	b	15278 <__assert_fail@plt+0x2f0c>
   150e8:	movw	r3, #32736	; 0x7fe0
   150ec:	mov	r1, r4
   150f0:	mov	r2, #7
   150f4:	str	r5, [sp]
   150f8:	movt	r3, #2
   150fc:	bl	24140 <__assert_fail@plt+0x11dd4>
   15100:	movw	r1, #29692	; 0x73fc
   15104:	movt	r1, #2
   15108:	b	15278 <__assert_fail@plt+0x2f0c>
   1510c:	cmp	r7, #1
   15110:	bne	152c4 <__assert_fail@plt+0x2f58>
   15114:	movw	r1, #31268	; 0x7a24
   15118:	mov	r0, #0
   1511c:	mov	r2, #5
   15120:	movt	r1, #2
   15124:	bl	11f7c <dcgettext@plt>
   15128:	mov	r5, r0
   1512c:	ldr	r0, [sp, #64]	; 0x40
   15130:	bl	220b0 <__assert_fail@plt+0xfd44>
   15134:	ldr	r1, [sp, #84]	; 0x54
   15138:	str	r0, [sp]
   1513c:	movw	r0, #32736	; 0x7fe0
   15140:	mov	r2, r5
   15144:	movt	r0, #2
   15148:	ldr	r6, [r0, r1, lsl #4]
   1514c:	mov	r0, #0
   15150:	mov	r1, #0
   15154:	mov	r3, r6
   15158:	bl	120a8 <error@plt>
   1515c:	movw	r1, #31295	; 0x7a3f
   15160:	mov	r0, #0
   15164:	mov	r2, #5
   15168:	movt	r1, #2
   1516c:	bl	11f7c <dcgettext@plt>
   15170:	mov	r5, r0
   15174:	sub	r1, fp, #208	; 0xd0
   15178:	mov	r0, r4
   1517c:	bl	1f490 <__assert_fail@plt+0xd124>
   15180:	str	r0, [sp]
   15184:	mov	r0, #2
   15188:	mov	r1, #0
   1518c:	mov	r2, r5
   15190:	mov	r3, r6
   15194:	bl	120a8 <error@plt>
   15198:	movw	r1, #31213	; 0x79ed
   1519c:	mov	r0, #0
   151a0:	mov	r2, #5
   151a4:	movt	r1, #2
   151a8:	bl	11f7c <dcgettext@plt>
   151ac:	mov	r4, r0
   151b0:	ldr	r0, [sp, #64]	; 0x40
   151b4:	bl	220b0 <__assert_fail@plt+0xfd44>
   151b8:	ldr	r1, [sp, #84]	; 0x54
   151bc:	str	r0, [sp]
   151c0:	movw	r0, #32736	; 0x7fe0
   151c4:	mov	r2, r4
   151c8:	movt	r0, #2
   151cc:	ldr	r5, [r0, r1, lsl #4]
   151d0:	mov	r0, #0
   151d4:	mov	r1, #0
   151d8:	mov	r3, r5
   151dc:	bl	120a8 <error@plt>
   151e0:	movw	r1, #31238	; 0x7a06
   151e4:	mov	r0, #0
   151e8:	mov	r2, #5
   151ec:	movt	r1, #2
   151f0:	bl	11f7c <dcgettext@plt>
   151f4:	mov	r4, r0
   151f8:	movw	r0, #31266	; 0x7a22
   151fc:	movt	r0, #2
   15200:	bl	220b0 <__assert_fail@plt+0xfd44>
   15204:	str	r0, [sp]
   15208:	mov	r0, #2
   1520c:	mov	r1, #0
   15210:	mov	r2, r4
   15214:	mov	r3, r5
   15218:	bl	120a8 <error@plt>
   1521c:	movw	r1, #29724	; 0x741c
   15220:	movt	r1, #2
   15224:	b	15278 <__assert_fail@plt+0x2f0c>
   15228:	mov	r0, #1
   1522c:	movw	r3, #32736	; 0x7fe0
   15230:	mov	r1, r4
   15234:	mov	r2, #83	; 0x53
   15238:	str	r5, [sp]
   1523c:	movt	r3, #2
   15240:	bl	24140 <__assert_fail@plt+0x11dd4>
   15244:	ldr	r0, [r4]
   15248:	movw	r1, #29621	; 0x73b5
   1524c:	movt	r1, #2
   15250:	bl	16c40 <__assert_fail@plt+0x48d4>
   15254:	ldr	r0, [r4]
   15258:	movw	r1, #29506	; 0x7342
   1525c:	movt	r1, #2
   15260:	bl	16c40 <__assert_fail@plt+0x48d4>
   15264:	movw	r0, #29551	; 0x736f
   15268:	movt	r0, #2
   1526c:	bl	16ca0 <__assert_fail@plt+0x4934>
   15270:	movw	r1, #31356	; 0x7a7c
   15274:	movt	r1, #2
   15278:	mov	r0, #0
   1527c:	mov	r2, #5
   15280:	bl	11f7c <dcgettext@plt>
   15284:	mov	r2, r0
   15288:	mov	r0, #2
   1528c:	mov	r1, #0
   15290:	bl	120a8 <error@plt>
   15294:	movw	r0, #33719	; 0x83b7
   15298:	movw	r1, #29447	; 0x7307
   1529c:	movw	r3, #29458	; 0x7312
   152a0:	movw	r2, #4449	; 0x1161
   152a4:	movt	r0, #2
   152a8:	movt	r1, #2
   152ac:	movt	r3, #2
   152b0:	bl	1236c <__assert_fail@plt>
   152b4:	movw	r1, #29506	; 0x7342
   152b8:	mov	r0, r4
   152bc:	movt	r1, #2
   152c0:	bl	16c40 <__assert_fail@plt+0x48d4>
   152c4:	ldr	r0, [sp, #64]	; 0x40
   152c8:	ldr	r1, [sp, #84]	; 0x54
   152cc:	movw	r3, #32736	; 0x7fe0
   152d0:	mov	r2, #4
   152d4:	movt	r3, #2
   152d8:	str	r0, [sp]
   152dc:	mov	r0, r7
   152e0:	bl	24140 <__assert_fail@plt+0x11dd4>
   152e4:	movw	r1, #29851	; 0x749b
   152e8:	mov	r0, #0
   152ec:	mov	r2, #5
   152f0:	movt	r1, #2
   152f4:	bl	11f7c <dcgettext@plt>
   152f8:	mov	r4, r0
   152fc:	ldr	r0, [sp, #124]	; 0x7c
   15300:	ldr	r1, [r0]
   15304:	mov	r0, #4
   15308:	bl	21b88 <__assert_fail@plt+0xf81c>
   1530c:	mov	r3, r0
   15310:	mov	r0, #0
   15314:	mov	r1, #0
   15318:	mov	r2, r4
   1531c:	bl	120a8 <error@plt>
   15320:	movw	r0, #37584	; 0x92d0
   15324:	movw	r1, #29868	; 0x74ac
   15328:	mov	r2, #5
   1532c:	movt	r0, #3
   15330:	movt	r1, #2
   15334:	ldr	r4, [r0]
   15338:	mov	r0, #0
   1533c:	bl	11f7c <dcgettext@plt>
   15340:	movw	r2, #34278	; 0x85e6
   15344:	mov	r3, r0
   15348:	mov	r0, r4
   1534c:	mov	r1, #1
   15350:	movt	r2, #2
   15354:	bl	121f8 <__fprintf_chk@plt>
   15358:	mov	r0, #2
   1535c:	bl	12470 <__assert_fail@plt+0x104>
   15360:	movw	r1, #29920	; 0x74e0
   15364:	mov	r0, #0
   15368:	mov	r2, #5
   1536c:	movt	r1, #2
   15370:	bl	11f7c <dcgettext@plt>
   15374:	mov	r4, r0
   15378:	mov	r0, #4
   1537c:	mov	r1, r6
   15380:	b	15068 <__assert_fail@plt+0x2cfc>
   15384:	movw	r1, #30052	; 0x7564
   15388:	mov	r0, #0
   1538c:	mov	r2, #5
   15390:	movt	r1, #2
   15394:	bl	11f7c <dcgettext@plt>
   15398:	ldr	r1, [sp, #96]	; 0x60
   1539c:	mov	r4, r0
   153a0:	b	15064 <__assert_fail@plt+0x2cf8>
   153a4:	ldrb	r1, [r0, #32]
   153a8:	ldrb	r2, [r0, #27]
   153ac:	ldrb	r3, [r0, #28]
   153b0:	orr	r1, r2, r1
   153b4:	ldr	r2, [r0, #16]
   153b8:	cmp	r2, #0
   153bc:	ldrb	r2, [r0, #26]
   153c0:	movwne	r1, #1
   153c4:	add	r2, r3, r2
   153c8:	ldrb	r3, [r0, #29]
   153cc:	add	r2, r2, r3
   153d0:	ldrb	r3, [r0, #30]
   153d4:	add	r2, r2, r3
   153d8:	uxtab	r1, r1, r2
   153dc:	cmp	r1, #2
   153e0:	bcs	168fc <__assert_fail@plt+0x4590>
   153e4:	ldr	r0, [r0, #36]	; 0x24
   153e8:	cmp	r0, #0
   153ec:	bne	153a4 <__assert_fail@plt+0x3038>
   153f0:	ldrb	r0, [sl, #5]
   153f4:	cmp	r0, #1
   153f8:	bne	15f64 <__assert_fail@plt+0x3bf8>
   153fc:	ldr	r0, [sp, #52]	; 0x34
   15400:	cmp	r0, #0
   15404:	tsteq	r7, #255	; 0xff
   15408:	beq	15424 <__assert_fail@plt+0x30b8>
   1540c:	movw	r0, #37360	; 0x91f0
   15410:	tst	r7, #255	; 0xff
   15414:	movt	r0, #3
   15418:	moveq	r7, #111	; 0x6f
   1541c:	strb	r7, [r0, #12]!
   15420:	bl	16ca0 <__assert_fail@plt+0x4934>
   15424:	ldr	r0, [sp, #92]	; 0x5c
   15428:	cmp	r0, #0
   1542c:	beq	15448 <__assert_fail@plt+0x30dc>
   15430:	movw	r1, #25764	; 0x64a4
   15434:	mov	r0, #3
   15438:	movt	r1, #2
   1543c:	bl	1224c <setlocale@plt>
   15440:	cmp	r0, #0
   15444:	bne	15474 <__assert_fail@plt+0x3108>
   15448:	movw	r1, #30069	; 0x7575
   1544c:	mov	r0, #0
   15450:	mov	r2, #5
   15454:	movt	r1, #2
   15458:	bl	11f7c <dcgettext@plt>
   1545c:	movw	r2, #33718	; 0x83b6
   15460:	mov	r3, r0
   15464:	mov	r0, #0
   15468:	mov	r1, #0
   1546c:	movt	r2, #2
   15470:	bl	120a8 <error@plt>
   15474:	ldrb	r0, [sl]
   15478:	str	r7, [sp, #88]	; 0x58
   1547c:	str	r9, [sp, #84]	; 0x54
   15480:	str	r4, [sp, #20]
   15484:	cmp	r0, #0
   15488:	beq	154c8 <__assert_fail@plt+0x315c>
   1548c:	movw	r1, #30090	; 0x758a
   15490:	mov	r0, #0
   15494:	mov	r2, #5
   15498:	movt	r1, #2
   1549c:	bl	11f7c <dcgettext@plt>
   154a0:	mov	r5, r0
   154a4:	mov	r0, #3
   154a8:	mov	r1, #0
   154ac:	bl	1224c <setlocale@plt>
   154b0:	bl	220b0 <__assert_fail@plt+0xfd44>
   154b4:	mov	r3, r0
   154b8:	mov	r0, #0
   154bc:	mov	r1, #0
   154c0:	mov	r2, r5
   154c4:	b	154f0 <__assert_fail@plt+0x3184>
   154c8:	movw	r1, #30137	; 0x75b9
   154cc:	mov	r0, #0
   154d0:	mov	r2, #5
   154d4:	movt	r1, #2
   154d8:	bl	11f7c <dcgettext@plt>
   154dc:	movw	r2, #33718	; 0x83b6
   154e0:	mov	r3, r0
   154e4:	mov	r0, #0
   154e8:	mov	r1, #0
   154ec:	movt	r2, #2
   154f0:	bl	120a8 <error@plt>
   154f4:	ldrb	r0, [sp, #302]	; 0x12e
   154f8:	ldr	sl, [sl, #20]
   154fc:	ldrb	r5, [sp, #304]	; 0x130
   15500:	ldrb	r4, [sp, #303]	; 0x12f
   15504:	ldrb	r6, [sp, #296]	; 0x128
   15508:	ldr	r7, [sp, #288]	; 0x120
   1550c:	ldr	lr, [sp, #292]	; 0x124
   15510:	str	r0, [sp, #108]	; 0x6c
   15514:	ldrb	r0, [sp, #301]	; 0x12d
   15518:	cmp	sl, #0
   1551c:	str	r0, [sp, #104]	; 0x68
   15520:	ldrb	r0, [sp, #300]	; 0x12c
   15524:	str	r0, [sp, #100]	; 0x64
   15528:	ldrb	r0, [sp, #299]	; 0x12b
   1552c:	str	r0, [sp, #116]	; 0x74
   15530:	ldrb	r0, [sp, #298]	; 0x12a
   15534:	str	r0, [sp, #112]	; 0x70
   15538:	ldrb	r0, [sp, #297]	; 0x129
   1553c:	str	r0, [sp, #96]	; 0x60
   15540:	beq	15a80 <__assert_fail@plt+0x3714>
   15544:	sub	r0, fp, #208	; 0xd0
   15548:	str	r8, [sp, #16]
   1554c:	sub	r8, fp, #104	; 0x68
   15550:	mov	r9, #1
   15554:	mov	r1, r7
   15558:	orr	r0, r0, #3
   1555c:	str	r0, [sp, #48]	; 0x30
   15560:	sub	r0, fp, #240	; 0xf0
   15564:	orr	r0, r0, #1
   15568:	str	r0, [sp, #44]	; 0x2c
   1556c:	mov	r0, #0
   15570:	str	r0, [sp, #72]	; 0x48
   15574:	mov	r0, #0
   15578:	str	r0, [sp, #68]	; 0x44
   1557c:	mov	r0, #0
   15580:	str	r0, [sp, #40]	; 0x28
   15584:	mov	r0, #0
   15588:	str	r0, [sp, #36]	; 0x24
   1558c:	mov	r0, lr
   15590:	b	1564c <__assert_fail@plt+0x32e0>
   15594:	ldrb	r3, [sl, #27]
   15598:	ldr	r6, [sp, #116]	; 0x74
   1559c:	ldrb	r0, [sl, #31]
   155a0:	ldrb	r2, [sl, #26]
   155a4:	ldrb	r1, [sl, #25]
   155a8:	add	r9, r9, #1
   155ac:	eor	r3, r3, #1
   155b0:	eor	r0, r0, #1
   155b4:	eor	r2, r2, #1
   155b8:	eor	r1, r1, #1
   155bc:	and	r6, r3, r6
   155c0:	ldrb	r3, [sl, #29]
   155c4:	and	r4, r0, r4
   155c8:	ldrb	r0, [sl, #32]
   155cc:	str	r6, [sp, #116]	; 0x74
   155d0:	ldr	r6, [sp, #104]	; 0x68
   155d4:	eor	r3, r3, #1
   155d8:	eor	r0, r0, #1
   155dc:	and	r6, r3, r6
   155e0:	ldrb	r3, [sl, #28]
   155e4:	and	r5, r0, r5
   155e8:	ldrb	r0, [sl, #24]
   155ec:	str	r6, [sp, #104]	; 0x68
   155f0:	ldr	r6, [sp, #100]	; 0x64
   155f4:	eor	r3, r3, #1
   155f8:	eor	r0, r0, #1
   155fc:	and	r6, r3, r6
   15600:	ldr	r3, [sp, #112]	; 0x70
   15604:	str	r6, [sp, #100]	; 0x64
   15608:	ldr	r6, [sp, #92]	; 0x5c
   1560c:	and	r3, r2, r3
   15610:	ldrb	r2, [sl, #30]
   15614:	ldr	sl, [sl, #36]	; 0x24
   15618:	str	r3, [sp, #112]	; 0x70
   1561c:	ldr	r3, [sp, #108]	; 0x6c
   15620:	and	r6, r0, r6
   15624:	mov	r0, lr
   15628:	eor	r2, r2, #1
   1562c:	cmp	sl, #0
   15630:	and	r3, r2, r3
   15634:	ldr	r2, [sp, #96]	; 0x60
   15638:	str	r3, [sp, #108]	; 0x6c
   1563c:	and	r2, r1, r2
   15640:	mov	r1, r7
   15644:	str	r2, [sp, #96]	; 0x60
   15648:	beq	15a20 <__assert_fail@plt+0x36b4>
   1564c:	str	r1, [sp, #76]	; 0x4c
   15650:	str	r0, [sp, #80]	; 0x50
   15654:	ldrb	r1, [sl, #26]
   15658:	ldrb	r0, [sl, #28]
   1565c:	str	r6, [sp, #92]	; 0x5c
   15660:	orr	r1, r0, r1
   15664:	tst	r1, #255	; 0xff
   15668:	bne	15678 <__assert_fail@plt+0x330c>
   1566c:	ldrb	r1, [sl, #29]
   15670:	cmp	r1, #0
   15674:	beq	156a0 <__assert_fail@plt+0x3334>
   15678:	ldr	r2, [sp, #68]	; 0x44
   1567c:	cmp	r0, #0
   15680:	clz	r1, r0
   15684:	movwne	r0, #1
   15688:	orr	r2, r2, r0
   1568c:	lsr	r0, r1, #5
   15690:	ldr	r1, [sp, #72]	; 0x48
   15694:	str	r2, [sp, #68]	; 0x44
   15698:	orr	r1, r1, r0
   1569c:	str	r1, [sp, #72]	; 0x48
   156a0:	ldrb	r0, [sl, #33]	; 0x21
   156a4:	cmp	r0, #0
   156a8:	beq	157e4 <__assert_fail@plt+0x3478>
   156ac:	ldr	r0, [sl]
   156b0:	mov	r1, #43	; 0x2b
   156b4:	str	r4, [sp, #60]	; 0x3c
   156b8:	ldr	r4, [sl, #8]
   156bc:	mov	r2, r8
   156c0:	str	r5, [sp, #56]	; 0x38
   156c4:	strh	r1, [fp, #-240]	; 0xffffff10
   156c8:	mvn	r1, #0
   156cc:	subs	r7, r0, r1
   156d0:	mov	r1, #0
   156d4:	movne	r7, r0
   156d8:	mov	r0, r7
   156dc:	bl	1f4d0 <__assert_fail@plt+0xd164>
   156e0:	mov	r1, r0
   156e4:	ldr	r0, [sp, #44]	; 0x2c
   156e8:	mov	r2, #25
   156ec:	bl	12054 <__stpcpy_chk@plt>
   156f0:	mov	r6, r0
   156f4:	movw	r0, #27437	; 0x6b2d
   156f8:	mov	r1, #0
   156fc:	mov	r2, r8
   15700:	movt	r0, #32
   15704:	str	r0, [fp, #-208]	; 0xffffff30
   15708:	add	r0, r7, #1
   1570c:	bl	1f4d0 <__assert_fail@plt+0xd164>
   15710:	mov	r1, r0
   15714:	ldr	r0, [sp, #48]	; 0x30
   15718:	mov	r2, #24
   1571c:	bl	12054 <__stpcpy_chk@plt>
   15720:	mov	r7, r0
   15724:	ldr	r0, [sl, #8]
   15728:	cmn	r0, #1
   1572c:	beq	15790 <__assert_fail@plt+0x3424>
   15730:	movw	r0, #11552	; 0x2d20
   15734:	add	r5, r4, #1
   15738:	mov	r1, #0
   1573c:	mov	r2, r8
   15740:	strh	r0, [r6]
   15744:	mov	r0, #0
   15748:	strb	r0, [r6, #2]!
   1574c:	mov	r0, r5
   15750:	bl	1f4d0 <__assert_fail@plt+0xd164>
   15754:	mov	r1, r0
   15758:	mov	r0, r6
   1575c:	bl	11f70 <stpcpy@plt>
   15760:	mov	r0, #44	; 0x2c
   15764:	mov	r1, #0
   15768:	mov	r2, r8
   1576c:	strh	r0, [r7], #1
   15770:	ldr	r0, [sl, #12]
   15774:	cmn	r0, #1
   15778:	addeq	r5, r4, #2
   1577c:	mov	r0, r5
   15780:	bl	1f4d0 <__assert_fail@plt+0xd164>
   15784:	mov	r1, r0
   15788:	mov	r0, r7
   1578c:	bl	11f70 <stpcpy@plt>
   15790:	movw	r1, #31528	; 0x7b28
   15794:	mov	r0, #0
   15798:	mov	r2, #5
   1579c:	movt	r1, #2
   157a0:	bl	11f7c <dcgettext@plt>
   157a4:	mov	r5, r0
   157a8:	mov	r0, #0
   157ac:	sub	r1, fp, #240	; 0xf0
   157b0:	bl	220a0 <__assert_fail@plt+0xfd34>
   157b4:	mov	r6, r0
   157b8:	mov	r0, #1
   157bc:	sub	r1, fp, #208	; 0xd0
   157c0:	bl	220a0 <__assert_fail@plt+0xfd34>
   157c4:	str	r0, [sp]
   157c8:	mov	r0, #0
   157cc:	mov	r1, #0
   157d0:	mov	r2, r5
   157d4:	mov	r3, r6
   157d8:	bl	120a8 <error@plt>
   157dc:	ldr	r4, [sp, #60]	; 0x3c
   157e0:	ldr	r5, [sp, #56]	; 0x38
   157e4:	ldr	r1, [sl]
   157e8:	mov	r0, #0
   157ec:	cmn	r1, #1
   157f0:	beq	15830 <__assert_fail@plt+0x34c4>
   157f4:	ldr	r2, [sl, #8]
   157f8:	cmp	r2, r1
   157fc:	bcs	15830 <__assert_fail@plt+0x34c4>
   15800:	movw	r1, #31573	; 0x7b55
   15804:	mov	r0, #0
   15808:	mov	r2, #5
   1580c:	movt	r1, #2
   15810:	bl	11f7c <dcgettext@plt>
   15814:	mov	r2, r0
   15818:	mov	r0, #0
   1581c:	mov	r1, #0
   15820:	mov	r3, r9
   15824:	bl	120a8 <error@plt>
   15828:	sub	r8, fp, #104	; 0x68
   1582c:	mov	r0, #1
   15830:	ldrb	r2, [sl, #26]
   15834:	mov	r1, #1
   15838:	cmp	r2, #0
   1583c:	bne	15858 <__assert_fail@plt+0x34ec>
   15840:	ldrb	r2, [sl, #28]
   15844:	cmp	r2, #0
   15848:	bne	15858 <__assert_fail@plt+0x34ec>
   1584c:	ldrb	r2, [sl, #29]
   15850:	cmp	r2, #0
   15854:	beq	15874 <__assert_fail@plt+0x3508>
   15858:	ldr	r3, [sl, #8]
   1585c:	mov	r2, #0
   15860:	cmp	r3, #0
   15864:	beq	15890 <__assert_fail@plt+0x3524>
   15868:	cmp	r0, #0
   1586c:	beq	158a4 <__assert_fail@plt+0x3538>
   15870:	b	15940 <__assert_fail@plt+0x35d4>
   15874:	ldrb	r1, [sl, #30]
   15878:	cmp	r1, #0
   1587c:	movwne	r1, #1
   15880:	ldr	r3, [sl, #8]
   15884:	mov	r2, #0
   15888:	cmp	r3, #0
   1588c:	bne	15868 <__assert_fail@plt+0x34fc>
   15890:	ldr	r2, [sl, #12]
   15894:	cmp	r2, #0
   15898:	movwne	r2, #1
   1589c:	cmp	r0, #0
   158a0:	bne	15940 <__assert_fail@plt+0x35d4>
   158a4:	movw	r0, #37360	; 0x91f0
   158a8:	ldr	r3, [sp, #64]	; 0x40
   158ac:	movt	r0, #3
   158b0:	ldr	r0, [r0, #4]
   158b4:	subs	r0, r0, #256	; 0x100
   158b8:	movwne	r0, #1
   158bc:	orr	r0, r3, r0
   158c0:	orrs	r0, r2, r0
   158c4:	bne	15940 <__assert_fail@plt+0x35d4>
   158c8:	ldrb	r0, [sl, #24]
   158cc:	cmp	r0, #0
   158d0:	mov	r2, r0
   158d4:	movwne	r2, #1
   158d8:	orr	r1, r1, r2
   158dc:	cmp	r1, #1
   158e0:	bne	15914 <__assert_fail@plt+0x35a8>
   158e4:	cmp	r0, #0
   158e8:	beq	15908 <__assert_fail@plt+0x359c>
   158ec:	ldrb	r0, [sl, #25]
   158f0:	cmp	r0, #0
   158f4:	bne	15940 <__assert_fail@plt+0x35d4>
   158f8:	ldr	r0, [sl, #12]
   158fc:	cmp	r0, #0
   15900:	bne	15914 <__assert_fail@plt+0x35a8>
   15904:	b	15940 <__assert_fail@plt+0x35d4>
   15908:	ldr	r0, [sl, #4]
   1590c:	cmp	r0, #0
   15910:	beq	158ec <__assert_fail@plt+0x3580>
   15914:	movw	r1, #31616	; 0x7b80
   15918:	mov	r0, #0
   1591c:	mov	r2, #5
   15920:	movt	r1, #2
   15924:	bl	11f7c <dcgettext@plt>
   15928:	mov	r2, r0
   1592c:	mov	r0, #0
   15930:	mov	r1, #0
   15934:	mov	r3, r9
   15938:	bl	120a8 <error@plt>
   1593c:	sub	r8, fp, #104	; 0x68
   15940:	ldr	r0, [sp, #64]	; 0x40
   15944:	cmp	r0, #0
   15948:	bne	159e4 <__assert_fail@plt+0x3678>
   1594c:	ldrb	r0, [sl, #26]
   15950:	cmp	r0, #0
   15954:	bne	15970 <__assert_fail@plt+0x3604>
   15958:	ldrb	r0, [sl, #28]
   1595c:	cmp	r0, #0
   15960:	bne	15970 <__assert_fail@plt+0x3604>
   15964:	ldrb	r0, [sl, #29]
   15968:	cmp	r0, #0
   1596c:	beq	159e4 <__assert_fail@plt+0x3678>
   15970:	ldr	r0, [sl]
   15974:	ldr	r1, [sl, #8]
   15978:	mov	r2, #1
   1597c:	adds	r0, r0, #1
   15980:	movcs	r0, r2
   15984:	cmp	r1, r0
   15988:	bcc	159e4 <__assert_fail@plt+0x3678>
   1598c:	movw	r1, #31688	; 0x7bc8
   15990:	mov	r0, #0
   15994:	mov	r2, #5
   15998:	movt	r1, #2
   1599c:	bl	11f7c <dcgettext@plt>
   159a0:	mov	r2, r0
   159a4:	mov	r0, #0
   159a8:	mov	r1, #0
   159ac:	mov	r3, r9
   159b0:	bl	120a8 <error@plt>
   159b4:	ldrb	r0, [sl, #28]
   159b8:	ldr	r2, [sp, #36]	; 0x24
   159bc:	sub	r8, fp, #104	; 0x68
   159c0:	cmp	r0, #0
   159c4:	clz	r1, r0
   159c8:	movwne	r0, #1
   159cc:	orr	r2, r2, r0
   159d0:	lsr	r0, r1, #5
   159d4:	ldr	r1, [sp, #40]	; 0x28
   159d8:	str	r2, [sp, #36]	; 0x24
   159dc:	orr	r1, r1, r0
   159e0:	str	r1, [sp, #40]	; 0x28
   159e4:	ldr	r2, [sp, #76]	; 0x4c
   159e8:	ldr	r1, [sp, #80]	; 0x50
   159ec:	mov	lr, #0
   159f0:	mov	r7, #0
   159f4:	cmp	r2, #0
   159f8:	beq	15a08 <__assert_fail@plt+0x369c>
   159fc:	ldr	r0, [sl, #16]
   15a00:	subs	r7, r2, r0
   15a04:	movne	r7, r2
   15a08:	cmp	r1, #0
   15a0c:	beq	15594 <__assert_fail@plt+0x3228>
   15a10:	ldr	r0, [sl, #20]
   15a14:	subs	lr, r1, r0
   15a18:	movne	lr, r1
   15a1c:	b	15594 <__assert_fail@plt+0x3228>
   15a20:	ldr	r0, [sp, #40]	; 0x28
   15a24:	str	r6, [sp, #92]	; 0x5c
   15a28:	str	r4, [sp, #60]	; 0x3c
   15a2c:	tst	r0, #1
   15a30:	beq	15b8c <__assert_fail@plt+0x3820>
   15a34:	movw	r0, #37360	; 0x91f0
   15a38:	movw	sl, #39024	; 0x9870
   15a3c:	ldr	r6, [sp, #16]
   15a40:	mov	r4, #0
   15a44:	movt	r0, #3
   15a48:	movt	sl, #3
   15a4c:	ldr	r0, [r0, #4]
   15a50:	ldr	r1, [sl, #12]
   15a54:	cmp	r0, #256	; 0x100
   15a58:	bne	15bac <__assert_fail@plt+0x3840>
   15a5c:	cmp	r1, #256	; 0x100
   15a60:	beq	15d48 <__assert_fail@plt+0x39dc>
   15a64:	ldr	r0, [r6]
   15a68:	uxtb	r1, r1
   15a6c:	mov	r4, #0
   15a70:	ldrb	r0, [r0, r1, lsl #1]
   15a74:	tst	r0, #1
   15a78:	bne	15bb4 <__assert_fail@plt+0x3848>
   15a7c:	b	15c0c <__assert_fail@plt+0x38a0>
   15a80:	movw	sl, #39024	; 0x9870
   15a84:	str	r4, [sp, #60]	; 0x3c
   15a88:	str	r6, [sp, #92]	; 0x5c
   15a8c:	mov	r9, #0
   15a90:	mov	r0, #0
   15a94:	mov	r4, #0
   15a98:	movt	sl, #3
   15a9c:	mov	r8, r5
   15aa0:	cmp	r4, #0
   15aa4:	bne	15d5c <__assert_fail@plt+0x39f0>
   15aa8:	orr	r0, r9, r0
   15aac:	tst	r0, #1
   15ab0:	beq	15d5c <__assert_fail@plt+0x39f0>
   15ab4:	movw	r1, #31968	; 0x7ce0
   15ab8:	mov	r0, #0
   15abc:	mov	r2, #5
   15ac0:	mov	r6, lr
   15ac4:	movt	r1, #2
   15ac8:	bl	11f7c <dcgettext@plt>
   15acc:	movw	r1, #37360	; 0x91f0
   15ad0:	mov	r5, r0
   15ad4:	ldrb	r0, [sl, #2]
   15ad8:	movt	r1, #3
   15adc:	ldr	r1, [r1, #4]
   15ae0:	cmp	r1, r0
   15ae4:	beq	15b04 <__assert_fail@plt+0x3798>
   15ae8:	movw	r1, #32019	; 0x7d13
   15aec:	mov	r0, #0
   15af0:	mov	r2, #5
   15af4:	movt	r1, #2
   15af8:	bl	11f7c <dcgettext@plt>
   15afc:	str	r0, [sp, #24]
   15b00:	ldrb	r0, [sl, #2]
   15b04:	mov	r1, #0
   15b08:	strb	r1, [fp, #-243]	; 0xffffff0d
   15b0c:	strb	r0, [fp, #-244]	; 0xffffff0c
   15b10:	sub	r0, fp, #244	; 0xf4
   15b14:	bl	220b0 <__assert_fail@plt+0xfd44>
   15b18:	ldr	r3, [sp, #24]
   15b1c:	str	r0, [sp]
   15b20:	mov	r0, #0
   15b24:	mov	r1, #0
   15b28:	mov	r2, r5
   15b2c:	bl	120a8 <error@plt>
   15b30:	tst	r9, #1
   15b34:	ldr	r9, [sp, #60]	; 0x3c
   15b38:	movw	r5, #38248	; 0x9568
   15b3c:	mov	lr, r6
   15b40:	movt	r5, #3
   15b44:	beq	15d70 <__assert_fail@plt+0x3a04>
   15b48:	ldrb	r0, [sl, #3]
   15b4c:	cmp	r0, #1
   15b50:	bne	15d70 <__assert_fail@plt+0x3a04>
   15b54:	movw	r1, #32025	; 0x7d19
   15b58:	mov	r0, #0
   15b5c:	mov	r2, #5
   15b60:	mov	r5, lr
   15b64:	movt	r1, #2
   15b68:	bl	11f7c <dcgettext@plt>
   15b6c:	mov	r2, r0
   15b70:	mov	r0, #0
   15b74:	mov	r1, #0
   15b78:	bl	120a8 <error@plt>
   15b7c:	mov	lr, r5
   15b80:	movw	r5, #38248	; 0x9568
   15b84:	movt	r5, #3
   15b88:	b	15d70 <__assert_fail@plt+0x3a04>
   15b8c:	ldr	r0, [sp, #36]	; 0x24
   15b90:	ldr	r6, [sp, #16]
   15b94:	movw	sl, #39024	; 0x9870
   15b98:	mov	r4, #0
   15b9c:	movt	sl, #3
   15ba0:	tst	r0, #1
   15ba4:	bne	15c0c <__assert_fail@plt+0x38a0>
   15ba8:	b	15d48 <__assert_fail@plt+0x39dc>
   15bac:	cmp	r0, r1
   15bb0:	bne	15c44 <__assert_fail@plt+0x38d8>
   15bb4:	movw	r1, #31733	; 0x7bf5
   15bb8:	mov	r0, #0
   15bbc:	mov	r2, #5
   15bc0:	mov	r8, lr
   15bc4:	movt	r1, #2
   15bc8:	bl	11f7c <dcgettext@plt>
   15bcc:	mov	r4, r5
   15bd0:	mov	r5, r0
   15bd4:	mov	r0, #0
   15bd8:	strb	r0, [fp, #-239]	; 0xffffff11
   15bdc:	ldr	r0, [sl, #12]
   15be0:	strb	r0, [fp, #-240]	; 0xffffff10
   15be4:	sub	r0, fp, #240	; 0xf0
   15be8:	bl	220b0 <__assert_fail@plt+0xfd44>
   15bec:	mov	r3, r0
   15bf0:	mov	r2, r5
   15bf4:	mov	r0, #0
   15bf8:	mov	r1, #0
   15bfc:	mov	r5, r4
   15c00:	bl	120a8 <error@plt>
   15c04:	mov	lr, r8
   15c08:	mov	r4, #1
   15c0c:	movw	r0, #37360	; 0x91f0
   15c10:	movt	r0, #3
   15c14:	ldr	r0, [r0, #4]
   15c18:	cmp	r0, #256	; 0x100
   15c1c:	bne	15c44 <__assert_fail@plt+0x38d8>
   15c20:	ldr	r0, [sl, #12]
   15c24:	cmp	r0, #256	; 0x100
   15c28:	beq	15d48 <__assert_fail@plt+0x39dc>
   15c2c:	ldrb	r0, [sl, #2]
   15c30:	ldr	r1, [r6]
   15c34:	ldrb	r0, [r1, r0, lsl #1]
   15c38:	tst	r0, #1
   15c3c:	bne	15c50 <__assert_fail@plt+0x38e4>
   15c40:	b	15d48 <__assert_fail@plt+0x39dc>
   15c44:	ldrb	r1, [sl, #2]
   15c48:	cmp	r0, r1
   15c4c:	bne	15cbc <__assert_fail@plt+0x3950>
   15c50:	movw	r1, #31795	; 0x7c33
   15c54:	mov	r0, #0
   15c58:	mov	r2, #5
   15c5c:	mov	r8, r5
   15c60:	mov	r9, #0
   15c64:	mov	r6, lr
   15c68:	movt	r1, #2
   15c6c:	bl	11f7c <dcgettext@plt>
   15c70:	mov	r5, r0
   15c74:	ldrb	r0, [sl, #2]
   15c78:	strb	r9, [fp, #-103]	; 0xffffff99
   15c7c:	strb	r0, [fp, #-104]	; 0xffffff98
   15c80:	sub	r0, fp, #104	; 0x68
   15c84:	bl	220b0 <__assert_fail@plt+0xfd44>
   15c88:	mov	r3, r0
   15c8c:	mov	r0, #0
   15c90:	mov	r1, #0
   15c94:	mov	r2, r5
   15c98:	bl	120a8 <error@plt>
   15c9c:	ldr	r0, [sp, #72]	; 0x48
   15ca0:	mov	lr, r6
   15ca4:	tst	r0, #1
   15ca8:	ldr	r9, [sp, #60]	; 0x3c
   15cac:	movw	r5, #38248	; 0x9568
   15cb0:	movt	r5, #3
   15cb4:	bne	15b48 <__assert_fail@plt+0x37dc>
   15cb8:	b	15d70 <__assert_fail@plt+0x3a04>
   15cbc:	cmp	r0, #45	; 0x2d
   15cc0:	bne	15cd0 <__assert_fail@plt+0x3964>
   15cc4:	movw	r1, #31855	; 0x7c6f
   15cc8:	movt	r1, #2
   15ccc:	b	15cf4 <__assert_fail@plt+0x3988>
   15cd0:	ldr	r1, [sp, #36]	; 0x24
   15cd4:	subs	r0, r0, #43	; 0x2b
   15cd8:	movwne	r0, #1
   15cdc:	mvn	r1, r1
   15ce0:	orr	r0, r1, r0
   15ce4:	tst	r0, #1
   15ce8:	bne	15d48 <__assert_fail@plt+0x39dc>
   15cec:	movw	r1, #31912	; 0x7ca8
   15cf0:	movt	r1, #2
   15cf4:	mov	r0, #0
   15cf8:	mov	r2, #5
   15cfc:	mov	r6, lr
   15d00:	bl	11f7c <dcgettext@plt>
   15d04:	mov	r9, r5
   15d08:	mov	r5, r0
   15d0c:	mov	r0, #0
   15d10:	strb	r0, [fp, #-103]	; 0xffffff99
   15d14:	movw	r0, #37360	; 0x91f0
   15d18:	movt	r0, #3
   15d1c:	ldr	r0, [r0, #4]
   15d20:	strb	r0, [fp, #-104]	; 0xffffff98
   15d24:	sub	r0, fp, #104	; 0x68
   15d28:	bl	220b0 <__assert_fail@plt+0xfd44>
   15d2c:	mov	r3, r0
   15d30:	mov	r2, r5
   15d34:	mov	r0, #0
   15d38:	mov	r1, #0
   15d3c:	mov	r5, r9
   15d40:	bl	120a8 <error@plt>
   15d44:	mov	lr, r6
   15d48:	ldr	r9, [sp, #72]	; 0x48
   15d4c:	ldr	r0, [sp, #68]	; 0x44
   15d50:	mov	r8, r5
   15d54:	cmp	r4, #0
   15d58:	beq	15aa8 <__assert_fail@plt+0x373c>
   15d5c:	tst	r9, #1
   15d60:	ldr	r9, [sp, #60]	; 0x3c
   15d64:	movw	r5, #38248	; 0x9568
   15d68:	movt	r5, #3
   15d6c:	bne	15b48 <__assert_fail@plt+0x37dc>
   15d70:	ldr	r0, [sp, #96]	; 0x60
   15d74:	ldr	r1, [sp, #92]	; 0x5c
   15d78:	cmp	lr, #0
   15d7c:	cmpeq	r7, #0
   15d80:	orr	r1, r1, r0
   15d84:	beq	15dac <__assert_fail@plt+0x3a40>
   15d88:	ldrb	r0, [sl, #6]
   15d8c:	ldrb	r2, [sl, #7]
   15d90:	tst	r1, #255	; 0xff
   15d94:	beq	15e14 <__assert_fail@plt+0x3aa8>
   15d98:	mov	r1, #98	; 0x62
   15d9c:	strb	r1, [fp, #-208]	; 0xffffff30
   15da0:	sub	r1, fp, #208	; 0xd0
   15da4:	add	r1, r1, #1
   15da8:	b	15e18 <__assert_fail@plt+0x3aac>
   15dac:	ldr	r0, [sp, #108]	; 0x6c
   15db0:	ldr	r2, [sp, #104]	; 0x68
   15db4:	orr	r0, r0, r8
   15db8:	orr	r0, r0, r2
   15dbc:	ldr	r2, [sp, #100]	; 0x64
   15dc0:	orr	r0, r0, r2
   15dc4:	ldr	r2, [sp, #116]	; 0x74
   15dc8:	orr	r0, r0, r2
   15dcc:	ldr	r2, [sp, #112]	; 0x70
   15dd0:	orr	r0, r0, r2
   15dd4:	orr	r0, r0, r1
   15dd8:	tst	r0, #255	; 0xff
   15ddc:	bne	15d88 <__assert_fail@plt+0x3a1c>
   15de0:	tst	r9, #255	; 0xff
   15de4:	beq	15f58 <__assert_fail@plt+0x3bec>
   15de8:	ldrb	r0, [sl, #6]
   15dec:	cmp	r0, #0
   15df0:	bne	15e04 <__assert_fail@plt+0x3a98>
   15df4:	ldrb	r3, [sl, #7]
   15df8:	mov	r2, #1
   15dfc:	cmp	r3, #1
   15e00:	bne	15f24 <__assert_fail@plt+0x3bb8>
   15e04:	ldr	r2, [sl, #20]
   15e08:	cmp	r2, #0
   15e0c:	bne	15d8c <__assert_fail@plt+0x3a20>
   15e10:	b	15f14 <__assert_fail@plt+0x3ba8>
   15e14:	sub	r1, fp, #208	; 0xd0
   15e18:	cmp	r7, r5
   15e1c:	moveq	r3, #100	; 0x64
   15e20:	strbeq	r3, [r1], #1
   15e24:	cmp	lr, #0
   15e28:	movne	r3, #102	; 0x66
   15e2c:	strbne	r3, [r1], #1
   15e30:	ldr	r3, [sp, #100]	; 0x64
   15e34:	tst	r3, #255	; 0xff
   15e38:	movne	r3, #103	; 0x67
   15e3c:	strbne	r3, [r1], #1
   15e40:	ldr	r3, [sp, #104]	; 0x68
   15e44:	tst	r3, #255	; 0xff
   15e48:	movne	r3, #104	; 0x68
   15e4c:	strbne	r3, [r1], #1
   15e50:	movw	r3, #37992	; 0x9468
   15e54:	movt	r3, #3
   15e58:	cmp	r7, r3
   15e5c:	moveq	r3, #105	; 0x69
   15e60:	strbeq	r3, [r1], #1
   15e64:	ldr	r3, [sp, #108]	; 0x6c
   15e68:	tst	r3, #255	; 0xff
   15e6c:	movne	r3, #77	; 0x4d
   15e70:	strbne	r3, [r1], #1
   15e74:	ldr	r3, [sp, #112]	; 0x70
   15e78:	tst	r3, #255	; 0xff
   15e7c:	movne	r3, #110	; 0x6e
   15e80:	strbne	r3, [r1], #1
   15e84:	ldr	r3, [sp, #116]	; 0x74
   15e88:	tst	r3, #255	; 0xff
   15e8c:	movne	r3, #82	; 0x52
   15e90:	strbne	r3, [r1], #1
   15e94:	tst	r9, #255	; 0xff
   15e98:	beq	15eb0 <__assert_fail@plt+0x3b44>
   15e9c:	orr	r0, r0, r2
   15ea0:	eor	r0, r0, #1
   15ea4:	tst	r0, #1
   15ea8:	moveq	r0, #114	; 0x72
   15eac:	strbeq	r0, [r1], #1
   15eb0:	tst	r8, #255	; 0xff
   15eb4:	sub	r5, fp, #208	; 0xd0
   15eb8:	movne	r0, #86	; 0x56
   15ebc:	strbne	r0, [r1], #1
   15ec0:	mov	r0, #0
   15ec4:	strb	r0, [r1]
   15ec8:	mov	r0, r5
   15ecc:	bl	12174 <strlen@plt>
   15ed0:	movw	r1, #32095	; 0x7d5f
   15ed4:	movw	r2, #32119	; 0x7d77
   15ed8:	mov	r3, r0
   15edc:	mov	r0, #5
   15ee0:	movt	r1, #2
   15ee4:	movt	r2, #2
   15ee8:	str	r0, [sp]
   15eec:	mov	r0, #0
   15ef0:	bl	12360 <dcngettext@plt>
   15ef4:	mov	r2, r0
   15ef8:	mov	r0, #0
   15efc:	mov	r1, #0
   15f00:	mov	r3, r5
   15f04:	bl	120a8 <error@plt>
   15f08:	tst	r9, #255	; 0xff
   15f0c:	beq	15f58 <__assert_fail@plt+0x3bec>
   15f10:	ldrb	r0, [sl, #6]
   15f14:	cmp	r0, #0
   15f18:	bne	15f58 <__assert_fail@plt+0x3bec>
   15f1c:	ldrb	r0, [sl, #7]
   15f20:	eor	r2, r0, #1
   15f24:	tst	r2, #1
   15f28:	ldrne	r0, [sl, #20]
   15f2c:	cmpne	r0, #0
   15f30:	beq	15f58 <__assert_fail@plt+0x3bec>
   15f34:	movw	r1, #32145	; 0x7d91
   15f38:	mov	r0, #0
   15f3c:	mov	r2, #5
   15f40:	movt	r1, #2
   15f44:	bl	11f7c <dcgettext@plt>
   15f48:	mov	r2, r0
   15f4c:	mov	r0, #0
   15f50:	mov	r1, #0
   15f54:	bl	120a8 <error@plt>
   15f58:	ldr	r9, [sp, #84]	; 0x54
   15f5c:	ldr	r7, [sp, #88]	; 0x58
   15f60:	ldr	r4, [sp, #20]
   15f64:	ldrb	r0, [sp, #303]	; 0x12f
   15f68:	cmp	r4, #0
   15f6c:	strb	r0, [sl, #9]
   15f70:	beq	15fc8 <__assert_fail@plt+0x3c5c>
   15f74:	ldr	r0, [sp, #32]
   15f78:	mov	r1, #16
   15f7c:	bl	220c8 <__assert_fail@plt+0xfd5c>
   15f80:	cmp	r0, #0
   15f84:	beq	169e0 <__assert_fail@plt+0x4674>
   15f88:	sub	r1, fp, #208	; 0xd0
   15f8c:	mov	r2, #16
   15f90:	mov	r4, r0
   15f94:	bl	22244 <__assert_fail@plt+0xfed8>
   15f98:	mov	r0, r4
   15f9c:	bl	223a4 <__assert_fail@plt+0x10038>
   15fa0:	cmp	r0, #0
   15fa4:	bne	16a0c <__assert_fail@plt+0x46a0>
   15fa8:	movw	r4, #38864	; 0x97d0
   15fac:	movt	r4, #3
   15fb0:	mov	r0, r4
   15fb4:	bl	1c830 <__assert_fail@plt+0xa4c4>
   15fb8:	sub	r0, fp, #208	; 0xd0
   15fbc:	mov	r1, #16
   15fc0:	mov	r2, r4
   15fc4:	bl	1d490 <__assert_fail@plt+0xb124>
   15fc8:	ldr	r0, [sl, #24]
   15fcc:	cmp	r0, #0
   15fd0:	beq	16868 <__assert_fail@plt+0x44fc>
   15fd4:	cmp	r9, #0
   15fd8:	beq	168c8 <__assert_fail@plt+0x455c>
   15fdc:	ldr	r0, [sl, #28]
   15fe0:	cmp	r0, #0
   15fe4:	beq	16004 <__assert_fail@plt+0x3c98>
   15fe8:	movw	r1, #37360	; 0x91f0
   15fec:	movt	r1, #3
   15ff0:	ldr	r1, [r1, #8]
   15ff4:	add	r1, r1, r1, lsl #3
   15ff8:	cmp	r0, r1, lsl #1
   15ffc:	lslls	r0, r1, #1
   16000:	str	r0, [sl, #28]
   16004:	tst	r7, #255	; 0xff
   16008:	bne	16978 <__assert_fail@plt+0x460c>
   1600c:	ldr	r6, [sp, #124]	; 0x7c
   16010:	movw	r4, #31526	; 0x7b26
   16014:	str	r9, [sp, #84]	; 0x54
   16018:	movt	r4, #2
   1601c:	b	1602c <__assert_fail@plt+0x3cc0>
   16020:	subs	r9, r9, #1
   16024:	add	r6, r6, #4
   16028:	beq	16074 <__assert_fail@plt+0x3d08>
   1602c:	ldr	r5, [r6]
   16030:	mov	r1, r4
   16034:	mov	r0, r5
   16038:	bl	11e50 <strcmp@plt>
   1603c:	cmp	r0, #0
   16040:	beq	16020 <__assert_fail@plt+0x3cb4>
   16044:	mov	r0, r5
   16048:	mov	r1, #4
   1604c:	bl	122e8 <euidaccess@plt>
   16050:	cmp	r0, #0
   16054:	beq	16020 <__assert_fail@plt+0x3cb4>
   16058:	movw	r1, #32391	; 0x7e87
   1605c:	mov	r0, #0
   16060:	mov	r2, #5
   16064:	movt	r1, #2
   16068:	bl	11f7c <dcgettext@plt>
   1606c:	ldr	r1, [r6]
   16070:	bl	17934 <__assert_fail@plt+0x55c8>
   16074:	ldr	r0, [sp, #52]	; 0x34
   16078:	ldr	r7, [sp, #84]	; 0x54
   1607c:	cmp	r0, #0
   16080:	beq	160c0 <__assert_fail@plt+0x3d54>
   16084:	ldr	r0, [sp, #52]	; 0x34
   16088:	movw	r1, #65	; 0x41
   1608c:	movw	r2, #438	; 0x1b6
   16090:	movt	r1, #8
   16094:	bl	120b4 <open64@plt>
   16098:	cmn	r0, #1
   1609c:	ble	169c4 <__assert_fail@plt+0x4658>
   160a0:	mov	r4, r0
   160a4:	cmp	r0, #1
   160a8:	beq	160c0 <__assert_fail@plt+0x3d54>
   160ac:	mov	r0, r4
   160b0:	mov	r1, #1
   160b4:	bl	11fac <dup2@plt>
   160b8:	mov	r0, r4
   160bc:	bl	12354 <close@plt>
   160c0:	ldr	r0, [sp, #120]	; 0x78
   160c4:	tst	r0, #1
   160c8:	beq	16164 <__assert_fail@plt+0x3df8>
   160cc:	mov	r0, r7
   160d0:	mov	r1, #8
   160d4:	bl	23d28 <__assert_fail@plt+0x119bc>
   160d8:	cmp	r7, #0
   160dc:	beq	16144 <__assert_fail@plt+0x3dd8>
   160e0:	and	r1, r7, #1
   160e4:	mov	r2, #0
   160e8:	cmp	r7, #1
   160ec:	beq	1612c <__assert_fail@plt+0x3dc0>
   160f0:	ldr	r2, [sp, #84]	; 0x54
   160f4:	add	r7, r0, #8
   160f8:	sub	r3, r2, r1
   160fc:	ldr	r2, [sp, #124]	; 0x7c
   16100:	add	r6, r2, #4
   16104:	mov	r2, #0
   16108:	ldr	r5, [r6, #-4]
   1610c:	add	r2, r2, #2
   16110:	cmp	r3, r2
   16114:	str	r5, [r7, #-8]
   16118:	ldr	r5, [r6]
   1611c:	add	r6, r6, #8
   16120:	str	r5, [r7]
   16124:	add	r7, r7, #16
   16128:	bne	16108 <__assert_fail@plt+0x3d9c>
   1612c:	ldr	r7, [sp, #84]	; 0x54
   16130:	cmp	r1, #0
   16134:	beq	16144 <__assert_fail@plt+0x3dd8>
   16138:	ldr	r1, [sp, #124]	; 0x7c
   1613c:	ldr	r1, [r1, r2, lsl #2]
   16140:	str	r1, [r0, r2, lsl #3]
   16144:	ldr	r3, [sp, #52]	; 0x34
   16148:	mov	r1, #0
   1614c:	mov	r2, r7
   16150:	bl	171a0 <__assert_fail@plt+0x4e34>
   16154:	ldrb	r0, [sl, #4]
   16158:	cmp	r0, #1
   1615c:	beq	16838 <__assert_fail@plt+0x44cc>
   16160:	b	16850 <__assert_fail@plt+0x44e4>
   16164:	ldr	r0, [sp, #28]
   16168:	cmp	r0, #0
   1616c:	bne	16180 <__assert_fail@plt+0x3e14>
   16170:	mov	r0, #2
   16174:	bl	1fb5c <__assert_fail@plt+0xd7f0>
   16178:	cmp	r0, #8
   1617c:	movcs	r0, #8
   16180:	movw	r2, #7281	; 0x1c71
   16184:	mov	r1, #0
   16188:	vmov.f64	d9, #104	; 0x3f400000  0.750
   1618c:	vmov.f64	d10, #64	; 0x3e000000  0.125
   16190:	vmov.i32	q6, #0	; 0x00000000
   16194:	sub	r8, fp, #240	; 0xf0
   16198:	movt	r2, #455	; 0x1c7
   1619c:	str	r1, [fp, #-228]	; 0xffffff1c
   161a0:	cmp	r0, r2
   161a4:	movcc	r2, r0
   161a8:	sub	r0, r1, r2, lsl #1
   161ac:	str	r2, [sp, #76]	; 0x4c
   161b0:	str	r0, [sp, #64]	; 0x40
   161b4:	add	r0, r2, r2, lsl #3
   161b8:	lsl	r0, r0, #4
   161bc:	str	r0, [sp, #72]	; 0x48
   161c0:	sub	r0, fp, #208	; 0xd0
   161c4:	add	r1, r0, #32
   161c8:	str	r1, [sp, #96]	; 0x60
   161cc:	orr	r1, r0, #4
   161d0:	add	r0, r0, #48	; 0x30
   161d4:	str	r1, [sp, #92]	; 0x5c
   161d8:	movw	r1, #30798	; 0x784e
   161dc:	str	r0, [sp, #60]	; 0x3c
   161e0:	lsl	r0, r2, #1
   161e4:	movt	r1, #2
   161e8:	str	r0, [sp, #68]	; 0x44
   161ec:	mov	r0, #0
   161f0:	str	r0, [sp, #104]	; 0x68
   161f4:	ldr	r0, [sp, #124]	; 0x7c
   161f8:	ldr	r0, [r0]
   161fc:	str	r0, [sp, #100]	; 0x64
   16200:	bl	179a8 <__assert_fail@plt+0x563c>
   16204:	cmp	r0, #0
   16208:	str	r0, [sp, #108]	; 0x6c
   1620c:	beq	1695c <__assert_fail@plt+0x45f0>
   16210:	ldr	r2, [sp, #76]	; 0x4c
   16214:	mov	r3, #24
   16218:	cmp	r2, #2
   1621c:	bcc	1623c <__assert_fail@plt+0x3ed0>
   16220:	mov	r0, #1
   16224:	mov	r3, #16
   16228:	lsl	r1, r0, #1
   1622c:	cmp	r2, r0, lsl #1
   16230:	add	r3, r3, #16
   16234:	mov	r0, r1
   16238:	bhi	16228 <__assert_fail@plt+0x3ebc>
   1623c:	orr	r0, r3, #1
   16240:	str	r3, [sp, #80]	; 0x50
   16244:	str	r0, [sp, #112]	; 0x70
   16248:	ldr	r0, [fp, #-228]	; 0xffffff1c
   1624c:	cmp	r0, #0
   16250:	bne	164e0 <__assert_fail@plt+0x4174>
   16254:	orr	r5, r3, #2
   16258:	mov	r6, #0
   1625c:	cmp	r6, #0
   16260:	beq	1644c <__assert_fail@plt+0x40e0>
   16264:	ldr	r0, [sp, #124]	; 0x7c
   16268:	movw	r1, #31526	; 0x7b26
   1626c:	movt	r1, #2
   16270:	ldr	r4, [r0, r6, lsl #2]
   16274:	mov	r0, r4
   16278:	bl	11e50 <strcmp@plt>
   1627c:	cmp	r0, #0
   16280:	beq	16460 <__assert_fail@plt+0x40f4>
   16284:	mov	r0, #3
   16288:	mov	r1, r4
   1628c:	sub	r2, fp, #208	; 0xd0
   16290:	bl	12324 <__xstat64@plt>
   16294:	ldr	r3, [sp, #112]	; 0x70
   16298:	cmp	r0, #0
   1629c:	sub	r1, fp, #104	; 0x68
   162a0:	bne	1693c <__assert_fail@plt+0x45d0>
   162a4:	ldr	r0, [fp, #-192]	; 0xffffff40
   162a8:	and	r0, r0, #61440	; 0xf000
   162ac:	cmp	r0, #32768	; 0x8000
   162b0:	bne	163f4 <__assert_fail@plt+0x4088>
   162b4:	ldr	r0, [sp, #60]	; 0x3c
   162b8:	ldm	r0, {r4, r9}
   162bc:	ldr	r0, [sl, #60]	; 0x3c
   162c0:	cmp	r0, #0
   162c4:	bne	16414 <__assert_fail@plt+0x40a8>
   162c8:	ldr	r0, [sl, #28]
   162cc:	cmp	r0, #0
   162d0:	str	r0, [sl, #60]	; 0x3c
   162d4:	bne	16414 <__assert_fail@plt+0x40a8>
   162d8:	mov	r0, #2
   162dc:	bl	11fb8 <getrlimit64@plt>
   162e0:	mvn	r8, #0
   162e4:	cmp	r0, #0
   162e8:	bne	16304 <__assert_fail@plt+0x3f98>
   162ec:	ldr	r8, [fp, #-104]	; 0xffffff98
   162f0:	ldr	r0, [fp, #-100]	; 0xffffff9c
   162f4:	mvn	r2, #0
   162f8:	subs	r1, r8, r2
   162fc:	sbcs	r0, r0, #0
   16300:	movcs	r8, r2
   16304:	mov	r0, #9
   16308:	sub	r1, fp, #104	; 0x68
   1630c:	bl	11fb8 <getrlimit64@plt>
   16310:	cmp	r0, #0
   16314:	bne	1632c <__assert_fail@plt+0x3fc0>
   16318:	ldr	r0, [fp, #-104]	; 0xffffff98
   1631c:	ldr	r1, [fp, #-100]	; 0xffffff9c
   16320:	subs	r2, r0, r8
   16324:	sbcs	r1, r1, #0
   16328:	movcc	r8, r0
   1632c:	mov	r0, #5
   16330:	sub	r1, fp, #104	; 0x68
   16334:	bl	11fb8 <getrlimit64@plt>
   16338:	lsr	r8, r8, #1
   1633c:	cmp	r0, #0
   16340:	bne	16378 <__assert_fail@plt+0x400c>
   16344:	ldr	r0, [fp, #-104]	; 0xffffff98
   16348:	ldr	r1, [fp, #-100]	; 0xffffff9c
   1634c:	lsr	r2, r1, #4
   16350:	lsr	r0, r0, #4
   16354:	lsl	r2, r2, #4
   16358:	orr	r0, r0, r1, lsl #28
   1635c:	sub	r2, r2, r1, lsr #4
   16360:	mov	r1, #15
   16364:	umull	r0, r1, r0, r1
   16368:	add	r1, r1, r2
   1636c:	subs	r2, r0, r8
   16370:	sbcs	r1, r1, #0
   16374:	movcc	r8, r0
   16378:	bl	1fdd0 <__assert_fail@plt+0xda64>
   1637c:	vmov.f64	d8, d0
   16380:	bl	1fd48 <__assert_fail@plt+0xd9dc>
   16384:	vmul.f64	d16, d0, d9
   16388:	vmov	s2, r8
   1638c:	vmul.f64	d17, d0, d10
   16390:	vcvt.u32.f64	s0, d16
   16394:	vcvt.f64.u32	d18, s2
   16398:	vcmpe.f64	d8, d17
   1639c:	vmrs	APSR_nzcv, fpscr
   163a0:	vselgt.f64	d17, d8, d17
   163a4:	vcmpe.f64	d16, d18
   163a8:	vmov	r1, s0
   163ac:	vcvt.u32.f64	s0, d17
   163b0:	vmrs	APSR_nzcv, fpscr
   163b4:	movpl	r1, r8
   163b8:	vmov	s2, r1
   163bc:	vmov	r0, s0
   163c0:	vcvt.f64.u32	d16, s2
   163c4:	ldr	r3, [sp, #112]	; 0x70
   163c8:	vcmpe.f64	d17, d16
   163cc:	vmrs	APSR_nzcv, fpscr
   163d0:	movpl	r0, r1
   163d4:	movw	r1, #37360	; 0x91f0
   163d8:	movt	r1, #3
   163dc:	ldr	r1, [r1, #8]
   163e0:	add	r1, r1, r1, lsl #3
   163e4:	cmp	r0, r1, lsl #1
   163e8:	lslls	r0, r1, #1
   163ec:	str	r0, [sl, #60]	; 0x3c
   163f0:	b	16414 <__assert_fail@plt+0x40a8>
   163f4:	ldr	r0, [sl, #28]
   163f8:	cmp	r0, #0
   163fc:	bne	16484 <__assert_fail@plt+0x4118>
   16400:	mov	r9, #0
   16404:	mov	r4, #131072	; 0x20000
   16408:	ldr	r0, [sl, #60]	; 0x3c
   1640c:	cmp	r0, #0
   16410:	beq	162c8 <__assert_fail@plt+0x3f5c>
   16414:	mul	r1, r3, r4
   16418:	sub	r2, r0, r5
   1641c:	add	r1, r1, #1
   16420:	cmp	r2, r1
   16424:	bls	16484 <__assert_fail@plt+0x4118>
   16428:	udiv	r2, r1, r3
   1642c:	eor	r2, r4, r2
   16430:	orrs	r2, r2, r9
   16434:	bne	16484 <__assert_fail@plt+0x4118>
   16438:	add	r6, r6, #1
   1643c:	add	r5, r1, r5
   16440:	cmp	r7, r6
   16444:	bne	1625c <__assert_fail@plt+0x3ef0>
   16448:	b	16488 <__assert_fail@plt+0x411c>
   1644c:	ldr	r0, [sp, #108]	; 0x6c
   16450:	bl	121ec <fileno@plt>
   16454:	mov	r1, r0
   16458:	mov	r0, #3
   1645c:	b	16468 <__assert_fail@plt+0x40fc>
   16460:	mov	r0, #3
   16464:	mov	r1, #0
   16468:	sub	r2, fp, #208	; 0xd0
   1646c:	bl	12018 <__fxstat64@plt>
   16470:	ldr	r3, [sp, #112]	; 0x70
   16474:	cmp	r0, #0
   16478:	sub	r1, fp, #104	; 0x68
   1647c:	beq	162a4 <__assert_fail@plt+0x3f38>
   16480:	b	1693c <__assert_fail@plt+0x45d0>
   16484:	mov	r5, r0
   16488:	sub	r8, fp, #240	; 0xf0
   1648c:	and	r0, r5, #15
   16490:	sub	r0, r5, r0
   16494:	add	r4, r0, #16
   16498:	mov	r0, r4
   1649c:	bl	24f0c <__assert_fail@plt+0x12ba0>
   164a0:	cmp	r0, #0
   164a4:	bne	164bc <__assert_fail@plt+0x4150>
   164a8:	ldr	r0, [sp, #112]	; 0x70
   164ac:	lsr	r5, r4, #1
   164b0:	cmp	r0, r4, lsr #1
   164b4:	bcc	1648c <__assert_fail@plt+0x4120>
   164b8:	b	1691c <__assert_fail@plt+0x45b0>
   164bc:	ldr	r1, [sp, #80]	; 0x50
   164c0:	str	r1, [fp, #-220]	; 0xffffff24
   164c4:	str	r0, [fp, #-240]	; 0xffffff10
   164c8:	mov	r0, #0
   164cc:	str	r4, [fp, #-228]	; 0xffffff1c
   164d0:	str	r0, [fp, #-224]	; 0xffffff20
   164d4:	str	r0, [fp, #-232]	; 0xffffff18
   164d8:	strb	r0, [fp, #-216]	; 0xffffff28
   164dc:	str	r0, [fp, #-236]	; 0xffffff14
   164e0:	mov	r0, #0
   164e4:	sub	r7, r7, #1
   164e8:	strb	r0, [fp, #-216]	; 0xffffff28
   164ec:	ldr	r0, [sp, #124]	; 0x7c
   164f0:	str	r7, [sp, #84]	; 0x54
   164f4:	add	r0, r0, #4
   164f8:	str	r0, [sp, #124]	; 0x7c
   164fc:	b	16534 <__assert_fail@plt+0x41c8>
   16500:	vld1.32	{d16-d17}, [r4]
   16504:	add	r0, sl, #64	; 0x40
   16508:	vst1.64	{d16-d17}, [r0]
   1650c:	mov	r0, r4
   16510:	ldr	r4, [sp, #120]	; 0x78
   16514:	mov	r1, r5
   16518:	mov	r2, r4
   1651c:	bl	194c0 <__assert_fail@plt+0x7154>
   16520:	mov	r0, r5
   16524:	mov	r1, r4
   16528:	bl	16cd4 <__assert_fail@plt+0x4968>
   1652c:	cmp	r6, #0
   16530:	bne	16804 <__assert_fail@plt+0x4498>
   16534:	ldr	r1, [sp, #108]	; 0x6c
   16538:	ldr	r2, [sp, #100]	; 0x64
   1653c:	mov	r0, r8
   16540:	bl	17c18 <__assert_fail@plt+0x58ac>
   16544:	cmp	r0, #0
   16548:	beq	1677c <__assert_fail@plt+0x4410>
   1654c:	ldrb	r0, [fp, #-216]	; 0xffffff28
   16550:	ldr	r4, [fp, #-228]	; 0xffffff1c
   16554:	cmp	r7, #0
   16558:	cmpne	r0, #0
   1655c:	beq	16580 <__assert_fail@plt+0x4214>
   16560:	ldr	r1, [fp, #-236]	; 0xffffff14
   16564:	ldr	r2, [fp, #-232]	; 0xffffff18
   16568:	ldr	r5, [sp, #80]	; 0x50
   1656c:	sub	r3, r4, r1
   16570:	mls	r2, r2, r5, r3
   16574:	ldr	r3, [sp, #112]	; 0x70
   16578:	cmp	r3, r2
   1657c:	bcc	16778 <__assert_fail@plt+0x440c>
   16580:	ldr	r5, [fp, #-240]	; 0xffffff10
   16584:	mov	r1, #0
   16588:	cmp	r0, #0
   1658c:	str	r1, [sl, #64]	; 0x40
   16590:	beq	165e4 <__assert_fail@plt+0x4278>
   16594:	ldr	r0, [sp, #104]	; 0x68
   16598:	ldr	r1, [fp, #-224]	; 0xffffff20
   1659c:	orr	r0, r0, r7
   165a0:	orrs	r0, r0, r1
   165a4:	bne	165e4 <__assert_fail@plt+0x4278>
   165a8:	ldr	r0, [sp, #108]	; 0x6c
   165ac:	ldr	r1, [sp, #100]	; 0x64
   165b0:	bl	16cd4 <__assert_fail@plt+0x4968>
   165b4:	ldr	r6, [sp, #52]	; 0x34
   165b8:	movw	r1, #32403	; 0x7e93
   165bc:	movt	r1, #2
   165c0:	mov	r0, r6
   165c4:	bl	179a8 <__assert_fail@plt+0x563c>
   165c8:	cmp	r0, #0
   165cc:	beq	16920 <__assert_fail@plt+0x45b4>
   165d0:	str	r0, [fp, #-244]	; 0xffffff0c
   165d4:	mov	r0, #1
   165d8:	str	r6, [sp, #120]	; 0x78
   165dc:	str	r0, [sp, #116]	; 0x74
   165e0:	b	1660c <__assert_fail@plt+0x42a0>
   165e4:	mov	r0, #0
   165e8:	mov	r1, #0
   165ec:	str	r0, [sp, #116]	; 0x74
   165f0:	sub	r0, fp, #244	; 0xf4
   165f4:	bl	1ad94 <__assert_fail@plt+0x8a28>
   165f8:	add	r0, r0, #9
   165fc:	str	r0, [sp, #120]	; 0x78
   16600:	ldr	r0, [sp, #104]	; 0x68
   16604:	add	r0, r0, #1
   16608:	str	r0, [sp, #104]	; 0x68
   1660c:	ldr	r9, [fp, #-232]	; 0xffffff18
   16610:	add	r7, r5, r4
   16614:	str	r5, [sp, #88]	; 0x58
   16618:	cmp	r9, #2
   1661c:	bcc	16734 <__assert_fail@plt+0x43c8>
   16620:	ldr	r1, [sp, #68]	; 0x44
   16624:	movw	r0, #48752	; 0xbe70
   16628:	movt	r0, #1
   1662c:	bl	1f1d8 <__assert_fail@plt+0xce6c>
   16630:	str	r0, [fp, #-208]	; 0xffffff30
   16634:	ldr	r0, [sp, #92]	; 0x5c
   16638:	mov	r1, #0
   1663c:	bl	11f04 <pthread_mutex_init@plt>
   16640:	ldr	r0, [sp, #96]	; 0x60
   16644:	mov	r1, #0
   16648:	bl	11f88 <pthread_cond_init@plt>
   1664c:	ldr	r0, [sp, #72]	; 0x48
   16650:	bl	23914 <__assert_fail@plt+0x115a8>
   16654:	mov	r8, r0
   16658:	mov	r5, #0
   1665c:	mov	sl, r0
   16660:	mov	r1, #0
   16664:	strb	r5, [r0, #44]	; 0x2c
   16668:	str	r5, [r0, #40]	; 0x28
   1666c:	str	r5, [r0, #16]
   16670:	str	r9, [r0, #20]
   16674:	str	r9, [r0, #24]
   16678:	str	r5, [r0, #28]
   1667c:	mov	r0, #72	; 0x48
   16680:	add	r4, r8, #48	; 0x30
   16684:	vst1.32	{d12-d13}, [sl], r0
   16688:	mov	r0, r4
   1668c:	bl	11f04 <pthread_mutex_init@plt>
   16690:	ldr	r6, [sp, #76]	; 0x4c
   16694:	mov	r0, r8
   16698:	mov	r1, sl
   1669c:	mov	r2, r7
   166a0:	str	r9, [sp]
   166a4:	str	r5, [sp, #4]
   166a8:	mov	r3, r6
   166ac:	bl	1bea8 <__assert_fail@plt+0x9b3c>
   166b0:	sub	r0, fp, #208	; 0xd0
   166b4:	ldr	r5, [fp, #-244]	; 0xffffff0c
   166b8:	mov	r1, r6
   166bc:	mov	r2, r9
   166c0:	mov	r3, sl
   166c4:	stm	sp, {r0, r5}
   166c8:	ldr	r0, [sp, #120]	; 0x78
   166cc:	str	r0, [sp, #8]
   166d0:	mov	r0, r7
   166d4:	bl	1b4f0 <__assert_fail@plt+0x9184>
   166d8:	cmp	r6, #0
   166dc:	beq	166f8 <__assert_fail@plt+0x438c>
   166e0:	ldr	r7, [sp, #64]	; 0x40
   166e4:	mov	r0, r4
   166e8:	bl	11e80 <pthread_mutex_destroy@plt>
   166ec:	adds	r7, r7, #1
   166f0:	add	r4, r4, #72	; 0x48
   166f4:	bcc	166e4 <__assert_fail@plt+0x4378>
   166f8:	mov	r0, r8
   166fc:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   16700:	ldr	r0, [fp, #-208]	; 0xffffff30
   16704:	bl	1f23c <__assert_fail@plt+0xced0>
   16708:	ldr	r0, [sp, #96]	; 0x60
   1670c:	bl	11ff4 <pthread_cond_destroy@plt>
   16710:	ldr	r0, [sp, #92]	; 0x5c
   16714:	bl	11e80 <pthread_mutex_destroy@plt>
   16718:	ldr	r7, [sp, #84]	; 0x54
   1671c:	ldr	r6, [sp, #116]	; 0x74
   16720:	ldr	r4, [sp, #120]	; 0x78
   16724:	movw	sl, #39024	; 0x9870
   16728:	sub	r8, fp, #240	; 0xf0
   1672c:	movt	sl, #3
   16730:	b	16520 <__assert_fail@plt+0x41b4>
   16734:	ldrb	r0, [sl, #7]
   16738:	sub	r4, r7, #16
   1673c:	ldr	r5, [fp, #-244]	; 0xffffff0c
   16740:	ldr	r7, [sp, #84]	; 0x54
   16744:	ldr	r6, [sp, #116]	; 0x74
   16748:	cmp	r0, #1
   1674c:	bne	1650c <__assert_fail@plt+0x41a0>
   16750:	ldr	r0, [sl, #64]	; 0x40
   16754:	cmp	r0, #0
   16758:	beq	16500 <__assert_fail@plt+0x4194>
   1675c:	add	r1, sl, #64	; 0x40
   16760:	mov	r0, r4
   16764:	bl	17fac <__assert_fail@plt+0x5c40>
   16768:	cmp	r0, #0
   1676c:	bne	16500 <__assert_fail@plt+0x4194>
   16770:	ldr	r4, [sp, #120]	; 0x78
   16774:	b	16520 <__assert_fail@plt+0x41b4>
   16778:	str	r1, [fp, #-224]	; 0xffffff20
   1677c:	ldr	r0, [sp, #108]	; 0x6c
   16780:	ldr	r1, [sp, #100]	; 0x64
   16784:	bl	16cd4 <__assert_fail@plt+0x4968>
   16788:	movw	r1, #30798	; 0x784e
   1678c:	cmp	r7, #0
   16790:	movt	r1, #2
   16794:	bne	161f4 <__assert_fail@plt+0x3e88>
   16798:	ldr	r0, [fp, #-240]	; 0xffffff10
   1679c:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   167a0:	ldr	r5, [sl, #32]
   167a4:	ldr	r0, [sp, #104]	; 0x68
   167a8:	mov	r1, #8
   167ac:	bl	239e4 <__assert_fail@plt+0x11678>
   167b0:	mov	r4, r0
   167b4:	cmp	r5, #0
   167b8:	beq	167d8 <__assert_fail@plt+0x446c>
   167bc:	add	r0, r4, #4
   167c0:	add	r1, r5, #9
   167c4:	stmda	r0, {r1, r5}
   167c8:	add	r0, r0, #8
   167cc:	ldr	r5, [r5]
   167d0:	cmp	r5, #0
   167d4:	bne	167c0 <__assert_fail@plt+0x4454>
   167d8:	ldr	r1, [sp, #104]	; 0x68
   167dc:	ldr	r3, [sp, #52]	; 0x34
   167e0:	mov	r0, r4
   167e4:	mov	r2, r1
   167e8:	bl	171a0 <__assert_fail@plt+0x4e34>
   167ec:	mov	r0, r4
   167f0:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   167f4:	ldr	r0, [sl, #52]	; 0x34
   167f8:	cmp	r0, #1
   167fc:	bge	16818 <__assert_fail@plt+0x44ac>
   16800:	b	1682c <__assert_fail@plt+0x44c0>
   16804:	ldr	r0, [sp, #88]	; 0x58
   16808:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   1680c:	ldr	r0, [sl, #52]	; 0x34
   16810:	cmp	r0, #1
   16814:	blt	1682c <__assert_fail@plt+0x44c0>
   16818:	mvn	r0, #0
   1681c:	bl	1b28c <__assert_fail@plt+0x8f20>
   16820:	ldr	r0, [sl, #52]	; 0x34
   16824:	cmp	r0, #0
   16828:	bgt	16818 <__assert_fail@plt+0x44ac>
   1682c:	ldrb	r0, [sl, #4]
   16830:	cmp	r0, #1
   16834:	bne	16850 <__assert_fail@plt+0x44e4>
   16838:	movw	r0, #37592	; 0x92d8
   1683c:	movt	r0, #3
   16840:	ldr	r0, [r0]
   16844:	bl	1d69c <__assert_fail@plt+0xb330>
   16848:	cmn	r0, #1
   1684c:	beq	16a48 <__assert_fail@plt+0x46dc>
   16850:	mov	r0, #0
   16854:	sub	sp, fp, #72	; 0x48
   16858:	vpop	{d8-d10}
   1685c:	vpop	{d12-d13}
   16860:	add	sp, sp, #4
   16864:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16868:	movw	r0, #30190	; 0x75ee
   1686c:	movt	r0, #2
   16870:	bl	120cc <getenv@plt>
   16874:	movw	r4, #28381	; 0x6edd
   16878:	cmp	r0, #0
   1687c:	movt	r4, #2
   16880:	movne	r4, r0
   16884:	ldr	r0, [sl, #36]	; 0x24
   16888:	cmp	r0, #0
   1688c:	beq	1689c <__assert_fail@plt+0x4530>
   16890:	ldr	r0, [sl, #40]	; 0x28
   16894:	mov	r1, #0
   16898:	b	168b4 <__assert_fail@plt+0x4548>
   1689c:	ldr	r0, [sl, #40]	; 0x28
   168a0:	add	r1, sl, #36	; 0x24
   168a4:	mov	r2, #4
   168a8:	bl	23ac0 <__assert_fail@plt+0x11754>
   168ac:	str	r0, [sl, #40]	; 0x28
   168b0:	ldr	r1, [sl, #24]
   168b4:	add	r2, r1, #1
   168b8:	str	r2, [sl, #24]
   168bc:	str	r4, [r0, r1, lsl #2]
   168c0:	cmp	r9, #0
   168c4:	bne	15fdc <__assert_fail@plt+0x3c70>
   168c8:	ldr	r0, [sp, #124]	; 0x7c
   168cc:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   168d0:	mov	r0, #4
   168d4:	bl	23914 <__assert_fail@plt+0x115a8>
   168d8:	movw	r1, #31526	; 0x7b26
   168dc:	mov	r9, #1
   168e0:	str	r0, [sp, #124]	; 0x7c
   168e4:	movt	r1, #2
   168e8:	str	r1, [r0]
   168ec:	ldr	r0, [sl, #28]
   168f0:	cmp	r0, #0
   168f4:	bne	15fe8 <__assert_fail@plt+0x3c7c>
   168f8:	b	16004 <__assert_fail@plt+0x3c98>
   168fc:	mov	r1, #0
   16900:	sub	r4, fp, #208	; 0xd0
   16904:	strb	r1, [r0, #31]
   16908:	strh	r1, [r0, #24]
   1690c:	mov	r1, r4
   16910:	bl	17b3c <__assert_fail@plt+0x57d0>
   16914:	mov	r0, r4
   16918:	bl	16ca0 <__assert_fail@plt+0x4934>
   1691c:	bl	23e50 <__assert_fail@plt+0x11ae4>
   16920:	movw	r1, #31391	; 0x7a9f
   16924:	mov	r0, #0
   16928:	mov	r2, #5
   1692c:	movt	r1, #2
   16930:	bl	11f7c <dcgettext@plt>
   16934:	mov	r1, r6
   16938:	bl	17934 <__assert_fail@plt+0x55c8>
   1693c:	movw	r1, #32669	; 0x7f9d
   16940:	mov	r0, #0
   16944:	mov	r2, #5
   16948:	movt	r1, #2
   1694c:	bl	11f7c <dcgettext@plt>
   16950:	ldr	r1, [sp, #124]	; 0x7c
   16954:	ldr	r1, [r1, r6, lsl #2]
   16958:	bl	17934 <__assert_fail@plt+0x55c8>
   1695c:	movw	r1, #31391	; 0x7a9f
   16960:	mov	r0, #0
   16964:	mov	r2, #5
   16968:	movt	r1, #2
   1696c:	bl	11f7c <dcgettext@plt>
   16970:	ldr	r1, [sp, #100]	; 0x64
   16974:	bl	17934 <__assert_fail@plt+0x55c8>
   16978:	ldr	r6, [sp, #124]	; 0x7c
   1697c:	cmp	r9, #2
   16980:	bcc	16a28 <__assert_fail@plt+0x46bc>
   16984:	movw	r1, #30197	; 0x75f5
   16988:	mov	r0, #0
   1698c:	mov	r2, #5
   16990:	movt	r1, #2
   16994:	bl	11f7c <dcgettext@plt>
   16998:	ldr	r1, [r6, #4]
   1699c:	mov	r4, r0
   169a0:	mov	r0, #4
   169a4:	bl	21b88 <__assert_fail@plt+0xf81c>
   169a8:	mov	r3, r0
   169ac:	uxtb	r0, r7
   169b0:	str	r0, [sp]
   169b4:	mov	r0, #2
   169b8:	mov	r1, #0
   169bc:	mov	r2, r4
   169c0:	bl	120a8 <error@plt>
   169c4:	movw	r1, #31391	; 0x7a9f
   169c8:	mov	r0, #0
   169cc:	mov	r2, #5
   169d0:	movt	r1, #2
   169d4:	bl	11f7c <dcgettext@plt>
   169d8:	ldr	r1, [sp, #52]	; 0x34
   169dc:	bl	17934 <__assert_fail@plt+0x55c8>
   169e0:	movw	r1, #31391	; 0x7a9f
   169e4:	mov	r0, #0
   169e8:	mov	r2, #5
   169ec:	movt	r1, #2
   169f0:	bl	11f7c <dcgettext@plt>
   169f4:	ldr	r2, [sp, #32]
   169f8:	movw	r1, #32196	; 0x7dc4
   169fc:	movt	r1, #2
   16a00:	cmp	r2, #0
   16a04:	movne	r1, r2
   16a08:	bl	17934 <__assert_fail@plt+0x55c8>
   16a0c:	movw	r1, #30235	; 0x761b
   16a10:	mov	r0, #0
   16a14:	mov	r2, #5
   16a18:	movt	r1, #2
   16a1c:	bl	11f7c <dcgettext@plt>
   16a20:	ldr	r1, [sp, #32]
   16a24:	bl	17934 <__assert_fail@plt+0x55c8>
   16a28:	ldr	r0, [sp, #52]	; 0x34
   16a2c:	cmp	r0, #0
   16a30:	bne	16a68 <__assert_fail@plt+0x46fc>
   16a34:	ldr	r0, [r6]
   16a38:	uxtb	r1, r7
   16a3c:	bl	16d50 <__assert_fail@plt+0x49e4>
   16a40:	eor	r0, r0, #1
   16a44:	bl	12150 <exit@plt>
   16a48:	movw	r1, #30235	; 0x761b
   16a4c:	mov	r0, #0
   16a50:	mov	r2, #5
   16a54:	movt	r1, #2
   16a58:	bl	11f7c <dcgettext@plt>
   16a5c:	movw	r1, #31526	; 0x7b26
   16a60:	movt	r1, #2
   16a64:	bl	17934 <__assert_fail@plt+0x55c8>
   16a68:	movw	r0, #37360	; 0x91f0
   16a6c:	movt	r0, #3
   16a70:	strb	r7, [r0]
   16a74:	bl	16ca0 <__assert_fail@plt+0x4934>
   16a78:	push	{r4, r5, r6, sl, fp, lr}
   16a7c:	add	fp, sp, #16
   16a80:	movw	r5, #39024	; 0x9870
   16a84:	mov	r4, r0
   16a88:	movt	r5, #3
   16a8c:	ldr	r6, [r5, #32]
   16a90:	cmp	r6, #0
   16a94:	beq	16aac <__assert_fail@plt+0x4740>
   16a98:	add	r0, r6, #9
   16a9c:	bl	11fa0 <unlink@plt>
   16aa0:	ldr	r6, [r6]
   16aa4:	cmp	r6, #0
   16aa8:	bne	16a98 <__assert_fail@plt+0x472c>
   16aac:	mov	r0, #0
   16ab0:	mov	r1, #0
   16ab4:	str	r0, [r5, #32]
   16ab8:	mov	r0, r4
   16abc:	bl	11f28 <signal@plt>
   16ac0:	mov	r0, r4
   16ac4:	pop	{r4, r5, r6, sl, fp, lr}
   16ac8:	b	11e44 <raise@plt>
   16acc:	push	{r4, r5, r6, r7, fp, lr}
   16ad0:	add	fp, sp, #16
   16ad4:	sub	sp, sp, #136	; 0x88
   16ad8:	movw	r5, #39024	; 0x9870
   16adc:	movt	r5, #3
   16ae0:	ldr	r0, [r5, #32]
   16ae4:	cmp	r0, #0
   16ae8:	beq	16b58 <__assert_fail@plt+0x47ec>
   16aec:	movw	r1, #37608	; 0x92e8
   16af0:	add	r0, sp, #4
   16af4:	mov	r6, #0
   16af8:	add	r4, r0, #4
   16afc:	movt	r1, #3
   16b00:	mov	r0, #0
   16b04:	mov	r2, r4
   16b08:	bl	12078 <pthread_sigmask@plt>
   16b0c:	clz	r0, r0
   16b10:	lsr	r0, r0, #5
   16b14:	strb	r0, [sp, #4]
   16b18:	ldr	r7, [r5, #32]
   16b1c:	cmp	r7, #0
   16b20:	beq	16b3c <__assert_fail@plt+0x47d0>
   16b24:	add	r0, r7, #9
   16b28:	bl	11fa0 <unlink@plt>
   16b2c:	ldr	r7, [r7]
   16b30:	cmp	r7, #0
   16b34:	bne	16b24 <__assert_fail@plt+0x47b8>
   16b38:	ldrb	r0, [sp, #4]
   16b3c:	cmp	r0, #0
   16b40:	str	r6, [r5, #32]
   16b44:	beq	16b58 <__assert_fail@plt+0x47ec>
   16b48:	mov	r0, #2
   16b4c:	mov	r1, r4
   16b50:	mov	r2, #0
   16b54:	bl	12078 <pthread_sigmask@plt>
   16b58:	bl	1c744 <__assert_fail@plt+0xa3d8>
   16b5c:	sub	sp, fp, #16
   16b60:	pop	{r4, r5, r6, r7, fp, pc}
   16b64:	push	{r4, r5, r6, sl, fp, lr}
   16b68:	add	fp, sp, #16
   16b6c:	sub	sp, sp, #24
   16b70:	mov	r4, r0
   16b74:	movw	r0, #25764	; 0x64a4
   16b78:	mov	r5, r2
   16b7c:	mov	r6, r1
   16b80:	add	r1, sp, #20
   16b84:	add	r3, sp, #8
   16b88:	mov	r2, #10
   16b8c:	movt	r0, #2
   16b90:	str	r0, [sp]
   16b94:	mov	r0, r4
   16b98:	bl	24204 <__assert_fail@plt+0x11e98>
   16b9c:	cmp	r0, #4
   16ba0:	bhi	16bdc <__assert_fail@plt+0x4870>
   16ba4:	add	r1, pc, #0
   16ba8:	ldr	pc, [r1, r0, lsl #2]
   16bac:	andeq	r6, r1, r0, asr #23
   16bb0:	ldrdeq	r6, [r1], -r4
   16bb4:	andeq	r6, r1, r0, asr #23
   16bb8:	ldrdeq	r6, [r1], -r4
   16bbc:	andeq	r6, r1, r8, ror #23
   16bc0:	ldr	r1, [sp, #12]
   16bc4:	ldr	r0, [sp, #8]
   16bc8:	cmp	r1, #0
   16bcc:	str	r0, [r6]
   16bd0:	beq	16bdc <__assert_fail@plt+0x4870>
   16bd4:	mvn	r0, #0
   16bd8:	str	r0, [r6]
   16bdc:	ldr	r0, [sp, #20]
   16be0:	sub	sp, fp, #16
   16be4:	pop	{r4, r5, r6, sl, fp, pc}
   16be8:	mov	r0, #0
   16bec:	cmp	r5, #0
   16bf0:	beq	16be0 <__assert_fail@plt+0x4874>
   16bf4:	movw	r1, #31050	; 0x794a
   16bf8:	mov	r0, #0
   16bfc:	mov	r2, #5
   16c00:	movt	r1, #2
   16c04:	bl	11f7c <dcgettext@plt>
   16c08:	mov	r6, r0
   16c0c:	mov	r0, #0
   16c10:	mov	r1, r5
   16c14:	mov	r2, #5
   16c18:	bl	11f7c <dcgettext@plt>
   16c1c:	mov	r5, r0
   16c20:	mov	r0, r4
   16c24:	bl	220b0 <__assert_fail@plt+0xfd44>
   16c28:	str	r0, [sp]
   16c2c:	mov	r0, #2
   16c30:	mov	r1, #0
   16c34:	mov	r2, r6
   16c38:	mov	r3, r5
   16c3c:	bl	120a8 <error@plt>
   16c40:	push	{fp, lr}
   16c44:	mov	fp, sp
   16c48:	sub	sp, sp, #8
   16c4c:	mov	r4, r1
   16c50:	movw	r1, #31083	; 0x796b
   16c54:	mov	r5, r0
   16c58:	mov	r0, #0
   16c5c:	mov	r2, #5
   16c60:	movt	r1, #2
   16c64:	bl	11f7c <dcgettext@plt>
   16c68:	mov	r6, r0
   16c6c:	mov	r0, #0
   16c70:	mov	r1, r4
   16c74:	mov	r2, #5
   16c78:	bl	11f7c <dcgettext@plt>
   16c7c:	mov	r4, r0
   16c80:	mov	r0, r5
   16c84:	bl	220b0 <__assert_fail@plt+0xfd44>
   16c88:	str	r0, [sp]
   16c8c:	mov	r0, #2
   16c90:	mov	r1, #0
   16c94:	mov	r2, r6
   16c98:	mov	r3, r4
   16c9c:	bl	120a8 <error@plt>
   16ca0:	push	{fp, lr}
   16ca4:	mov	fp, sp
   16ca8:	movw	r1, #31182	; 0x79ce
   16cac:	mov	r4, r0
   16cb0:	mov	r0, #0
   16cb4:	mov	r2, #5
   16cb8:	movt	r1, #2
   16cbc:	bl	11f7c <dcgettext@plt>
   16cc0:	mov	r2, r0
   16cc4:	mov	r0, #2
   16cc8:	mov	r1, #0
   16ccc:	mov	r3, r4
   16cd0:	bl	120a8 <error@plt>
   16cd4:	push	{r4, r5, fp, lr}
   16cd8:	add	fp, sp, #8
   16cdc:	mov	r4, r1
   16ce0:	mov	r5, r0
   16ce4:	bl	121ec <fileno@plt>
   16ce8:	cmp	r0, #1
   16cec:	beq	16d04 <__assert_fail@plt+0x4998>
   16cf0:	cmp	r0, #0
   16cf4:	bne	16d18 <__assert_fail@plt+0x49ac>
   16cf8:	mov	r0, r5
   16cfc:	pop	{r4, r5, fp, lr}
   16d00:	b	122ac <clearerr_unlocked@plt>
   16d04:	mov	r0, r5
   16d08:	bl	12000 <fflush_unlocked@plt>
   16d0c:	cmp	r0, #0
   16d10:	bne	16d44 <__assert_fail@plt+0x49d8>
   16d14:	pop	{r4, r5, fp, pc}
   16d18:	mov	r0, r5
   16d1c:	bl	1d69c <__assert_fail@plt+0xb330>
   16d20:	cmp	r0, #0
   16d24:	popeq	{r4, r5, fp, pc}
   16d28:	movw	r1, #30235	; 0x761b
   16d2c:	movt	r1, #2
   16d30:	mov	r0, #0
   16d34:	mov	r2, #5
   16d38:	bl	11f7c <dcgettext@plt>
   16d3c:	mov	r1, r4
   16d40:	bl	17934 <__assert_fail@plt+0x55c8>
   16d44:	movw	r1, #31511	; 0x7b17
   16d48:	movt	r1, #2
   16d4c:	b	16d30 <__assert_fail@plt+0x49c4>
   16d50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d54:	add	fp, sp, #28
   16d58:	sub	sp, sp, #108	; 0x6c
   16d5c:	mov	r5, r1
   16d60:	movw	r1, #30798	; 0x784e
   16d64:	mov	r7, r0
   16d68:	movt	r1, #2
   16d6c:	bl	179a8 <__assert_fail@plt+0x563c>
   16d70:	cmp	r0, #0
   16d74:	beq	17184 <__assert_fail@plt+0x4e18>
   16d78:	movw	r2, #39024	; 0x9870
   16d7c:	mov	r4, r0
   16d80:	movw	r0, #37352	; 0x91e8
   16d84:	movt	r0, #3
   16d88:	movt	r2, #3
   16d8c:	ldr	r1, [r0]
   16d90:	ldr	r0, [r2, #28]
   16d94:	ldr	r9, [r2, #20]
   16d98:	cmp	r1, r0
   16d9c:	movhi	r0, r1
   16da0:	ldrb	r1, [r2, #7]
   16da4:	eor	sl, r1, #1
   16da8:	and	r1, r0, #15
   16dac:	sub	r0, r0, r1
   16db0:	add	r6, r0, #16
   16db4:	mov	r0, r6
   16db8:	bl	24f0c <__assert_fail@plt+0x12ba0>
   16dbc:	cmp	r0, #0
   16dc0:	bne	16dd4 <__assert_fail@plt+0x4a68>
   16dc4:	lsr	r0, r6, #1
   16dc8:	cmp	r6, #35	; 0x23
   16dcc:	bhi	16da8 <__assert_fail@plt+0x4a3c>
   16dd0:	bl	23e50 <__assert_fail@plt+0x11ae4>
   16dd4:	mov	r1, #16
   16dd8:	mov	r8, #0
   16ddc:	mov	r2, r7
   16de0:	str	r5, [sp, #28]
   16de4:	str	r1, [fp, #-36]	; 0xffffffdc
   16de8:	str	r0, [fp, #-56]	; 0xffffffc8
   16dec:	sub	r0, fp, #56	; 0x38
   16df0:	mov	r1, r4
   16df4:	str	r6, [fp, #-44]	; 0xffffffd4
   16df8:	str	r8, [fp, #-40]	; 0xffffffd8
   16dfc:	str	r8, [fp, #-48]	; 0xffffffd0
   16e00:	strb	r8, [fp, #-32]	; 0xffffffe0
   16e04:	str	r8, [fp, #-52]	; 0xffffffcc
   16e08:	str	r8, [sp, #64]	; 0x40
   16e0c:	bl	17c18 <__assert_fail@plt+0x58ac>
   16e10:	mov	r5, #1
   16e14:	cmp	r0, #0
   16e18:	beq	1715c <__assert_fail@plt+0x4df0>
   16e1c:	and	r5, sl, #1
   16e20:	mov	r8, #0
   16e24:	cmp	r9, #0
   16e28:	str	r4, [sp, #20]
   16e2c:	str	r7, [sp, #24]
   16e30:	beq	16f6c <__assert_fail@plt+0x4c00>
   16e34:	mov	r0, #0
   16e38:	mov	r9, #0
   16e3c:	str	r0, [sp, #36]	; 0x24
   16e40:	mov	r0, #0
   16e44:	str	r0, [sp, #32]
   16e48:	ldr	sl, [fp, #-56]	; 0xffffffc8
   16e4c:	ldr	r6, [fp, #-44]	; 0xffffffd4
   16e50:	ldr	r7, [fp, #-48]	; 0xffffffd0
   16e54:	cmp	r9, #0
   16e58:	add	r4, sl, r6
   16e5c:	beq	16e74 <__assert_fail@plt+0x4b08>
   16e60:	sub	r1, r4, #16
   16e64:	add	r0, sp, #64	; 0x40
   16e68:	bl	17fac <__assert_fail@plt+0x5c40>
   16e6c:	cmp	r0, r5
   16e70:	bge	17140 <__assert_fail@plt+0x4dd4>
   16e74:	add	r0, sl, r6
   16e78:	str	r4, [sp, #16]
   16e7c:	sub	r4, r4, r7, lsl #4
   16e80:	str	r7, [sp, #12]
   16e84:	sub	sl, r0, #32
   16e88:	add	r0, sl, #16
   16e8c:	cmp	r4, r0
   16e90:	bcs	16eac <__assert_fail@plt+0x4b40>
   16e94:	mov	r1, sl
   16e98:	bl	17fac <__assert_fail@plt+0x5c40>
   16e9c:	sub	sl, sl, #16
   16ea0:	cmp	r0, r5
   16ea4:	blt	16e88 <__assert_fail@plt+0x4b1c>
   16ea8:	b	16f64 <__assert_fail@plt+0x4bf8>
   16eac:	ldr	r0, [sp, #36]	; 0x24
   16eb0:	ldr	r1, [sp, #12]
   16eb4:	ldr	r2, [sl, #20]
   16eb8:	adds	r0, r0, r1
   16ebc:	ldr	r1, [sp, #32]
   16ec0:	str	r0, [sp, #36]	; 0x24
   16ec4:	adc	r1, r1, #0
   16ec8:	cmp	r9, r2
   16ecc:	str	r1, [sp, #32]
   16ed0:	bcs	16f10 <__assert_fail@plt+0x4ba4>
   16ed4:	mov	r1, #0
   16ed8:	cmp	r1, r9, lsl #1
   16edc:	beq	16ef0 <__assert_fail@plt+0x4b84>
   16ee0:	lsl	r9, r9, #1
   16ee4:	cmp	r9, r2
   16ee8:	bcc	16ed8 <__assert_fail@plt+0x4b6c>
   16eec:	b	16ef4 <__assert_fail@plt+0x4b88>
   16ef0:	mov	r9, r2
   16ef4:	mov	r0, r8
   16ef8:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   16efc:	mov	r0, r9
   16f00:	bl	23914 <__assert_fail@plt+0x115a8>
   16f04:	str	r0, [sp, #64]	; 0x40
   16f08:	mov	r8, r0
   16f0c:	ldr	r2, [sl, #20]
   16f10:	ldr	r1, [sl, #16]
   16f14:	mov	r0, r8
   16f18:	bl	11eec <memcpy@plt>
   16f1c:	ldr	r0, [sl, #20]
   16f20:	ldr	r2, [sp, #24]
   16f24:	str	r0, [sp, #68]	; 0x44
   16f28:	ldr	r0, [sl, #16]
   16f2c:	ldr	r1, [sl, #24]
   16f30:	sub	r1, r1, r0
   16f34:	add	r1, r8, r1
   16f38:	str	r1, [sp, #72]	; 0x48
   16f3c:	ldr	r1, [sl, #28]
   16f40:	sub	r0, r1, r0
   16f44:	ldr	r1, [sp, #20]
   16f48:	add	r0, r8, r0
   16f4c:	str	r0, [sp, #76]	; 0x4c
   16f50:	sub	r0, fp, #56	; 0x38
   16f54:	bl	17c18 <__assert_fail@plt+0x58ac>
   16f58:	cmp	r0, #0
   16f5c:	bne	16e48 <__assert_fail@plt+0x4adc>
   16f60:	b	17078 <__assert_fail@plt+0x4d0c>
   16f64:	add	r7, sl, #32
   16f68:	b	1708c <__assert_fail@plt+0x4d20>
   16f6c:	mov	r0, #0
   16f70:	mov	r9, #0
   16f74:	str	r0, [sp, #36]	; 0x24
   16f78:	mov	r0, #0
   16f7c:	str	r0, [sp, #32]
   16f80:	ldr	sl, [fp, #-56]	; 0xffffffc8
   16f84:	ldr	r6, [fp, #-44]	; 0xffffffd4
   16f88:	ldr	r7, [fp, #-48]	; 0xffffffd0
   16f8c:	cmp	r9, #0
   16f90:	add	r4, sl, r6
   16f94:	beq	16fac <__assert_fail@plt+0x4c40>
   16f98:	sub	r1, r4, #16
   16f9c:	add	r0, sp, #64	; 0x40
   16fa0:	bl	17fac <__assert_fail@plt+0x5c40>
   16fa4:	cmp	r0, r5
   16fa8:	bge	17140 <__assert_fail@plt+0x4dd4>
   16fac:	str	r4, [sp, #16]
   16fb0:	sub	r4, r4, r7, lsl #4
   16fb4:	add	r0, sl, r6
   16fb8:	str	r7, [sp, #12]
   16fbc:	sub	r7, r0, #16
   16fc0:	cmp	r4, r7
   16fc4:	bcs	16fe8 <__assert_fail@plt+0x4c7c>
   16fc8:	sub	sl, r7, #16
   16fcc:	mov	r0, r7
   16fd0:	mov	r1, sl
   16fd4:	bl	17fac <__assert_fail@plt+0x5c40>
   16fd8:	cmp	r0, r5
   16fdc:	mov	r7, sl
   16fe0:	blt	16fc0 <__assert_fail@plt+0x4c54>
   16fe4:	b	17088 <__assert_fail@plt+0x4d1c>
   16fe8:	ldr	r0, [sp, #36]	; 0x24
   16fec:	ldr	r1, [sp, #12]
   16ff0:	ldr	r2, [r7, #4]
   16ff4:	adds	r0, r0, r1
   16ff8:	ldr	r1, [sp, #32]
   16ffc:	str	r0, [sp, #36]	; 0x24
   17000:	adc	r1, r1, #0
   17004:	cmp	r9, r2
   17008:	str	r1, [sp, #32]
   1700c:	bcs	1704c <__assert_fail@plt+0x4ce0>
   17010:	mov	r1, #0
   17014:	cmp	r1, r9, lsl #1
   17018:	beq	1702c <__assert_fail@plt+0x4cc0>
   1701c:	lsl	r9, r9, #1
   17020:	cmp	r9, r2
   17024:	bcc	17014 <__assert_fail@plt+0x4ca8>
   17028:	b	17030 <__assert_fail@plt+0x4cc4>
   1702c:	mov	r9, r2
   17030:	mov	r0, r8
   17034:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   17038:	mov	r0, r9
   1703c:	bl	23914 <__assert_fail@plt+0x115a8>
   17040:	str	r0, [sp, #64]	; 0x40
   17044:	mov	r8, r0
   17048:	ldr	r2, [r7, #4]
   1704c:	ldr	r1, [r7]
   17050:	mov	r0, r8
   17054:	bl	11eec <memcpy@plt>
   17058:	ldr	r0, [r7, #4]
   1705c:	ldr	r1, [sp, #20]
   17060:	ldr	r2, [sp, #24]
   17064:	str	r0, [sp, #68]	; 0x44
   17068:	sub	r0, fp, #56	; 0x38
   1706c:	bl	17c18 <__assert_fail@plt+0x58ac>
   17070:	cmp	r0, #0
   17074:	bne	16f80 <__assert_fail@plt+0x4c14>
   17078:	ldr	r7, [sp, #24]
   1707c:	ldr	r4, [sp, #20]
   17080:	mov	r5, #1
   17084:	b	1715c <__assert_fail@plt+0x4df0>
   17088:	add	r7, sl, #16
   1708c:	ldr	r4, [sp, #16]
   17090:	ldr	r0, [sp, #28]
   17094:	mov	r5, #0
   17098:	cmp	r0, #99	; 0x63
   1709c:	bne	17154 <__assert_fail@plt+0x4de8>
   170a0:	movw	sl, #37584	; 0x92d0
   170a4:	movw	r1, #32206	; 0x7dce
   170a8:	mov	r0, #0
   170ac:	mov	r2, #5
   170b0:	movt	sl, #3
   170b4:	movt	r1, #2
   170b8:	ldr	r9, [sl]
   170bc:	bl	11f7c <dcgettext@plt>
   170c0:	mov	r5, r0
   170c4:	ldr	r0, [sp, #36]	; 0x24
   170c8:	ldr	r2, [sp, #32]
   170cc:	sub	r6, r7, #16
   170d0:	sub	r1, r4, r6
   170d4:	adds	r0, r0, r1, asr #4
   170d8:	adc	r1, r2, r1, asr #31
   170dc:	movw	r2, #39116	; 0x98cc
   170e0:	movt	r2, #3
   170e4:	ldr	r4, [r2]
   170e8:	add	r2, sp, #43	; 0x2b
   170ec:	bl	1f4d0 <__assert_fail@plt+0xd164>
   170f0:	ldr	r7, [sp, #24]
   170f4:	str	r0, [sp, #4]
   170f8:	mov	r2, r5
   170fc:	mov	r0, r9
   17100:	mov	r1, #1
   17104:	mov	r3, r4
   17108:	mov	r5, #0
   1710c:	str	r7, [sp]
   17110:	bl	121f8 <__fprintf_chk@plt>
   17114:	movw	r1, #32228	; 0x7de4
   17118:	ldr	r4, [sl]
   1711c:	mov	r0, #0
   17120:	mov	r2, #5
   17124:	movt	r1, #2
   17128:	bl	11f7c <dcgettext@plt>
   1712c:	mov	r2, r0
   17130:	mov	r0, r6
   17134:	mov	r1, r4
   17138:	bl	194c0 <__assert_fail@plt+0x7154>
   1713c:	b	17158 <__assert_fail@plt+0x4dec>
   17140:	mov	r7, r4
   17144:	ldr	r0, [sp, #28]
   17148:	mov	r5, #0
   1714c:	cmp	r0, #99	; 0x63
   17150:	beq	170a0 <__assert_fail@plt+0x4d34>
   17154:	ldr	r7, [sp, #24]
   17158:	ldr	r4, [sp, #20]
   1715c:	mov	r0, r4
   17160:	mov	r1, r7
   17164:	bl	16cd4 <__assert_fail@plt+0x4968>
   17168:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1716c:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   17170:	mov	r0, r8
   17174:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   17178:	mov	r0, r5
   1717c:	sub	sp, fp, #28
   17180:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17184:	movw	r1, #31391	; 0x7a9f
   17188:	mov	r0, #0
   1718c:	mov	r2, #5
   17190:	movt	r1, #2
   17194:	bl	11f7c <dcgettext@plt>
   17198:	mov	r1, r7
   1719c:	bl	17934 <__assert_fail@plt+0x55c8>
   171a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171a4:	add	fp, sp, #28
   171a8:	sub	sp, sp, #148	; 0x94
   171ac:	mov	r9, r0
   171b0:	movw	r0, #37360	; 0x91f0
   171b4:	mov	r7, r2
   171b8:	str	r3, [sp, #12]
   171bc:	str	r1, [sp, #32]
   171c0:	movt	r0, #3
   171c4:	str	r9, [sp, #16]
   171c8:	ldr	r5, [r0, #8]
   171cc:	cmp	r5, r2
   171d0:	bcc	1724c <__assert_fail@plt+0x4ee0>
   171d4:	ldr	r0, [sp, #32]
   171d8:	cmp	r0, r7
   171dc:	bcs	17764 <__assert_fail@plt+0x53f8>
   171e0:	add	r0, sp, #40	; 0x28
   171e4:	str	r7, [sp, #20]
   171e8:	add	r0, r0, #96	; 0x60
   171ec:	str	r0, [sp, #24]
   171f0:	ldr	r0, [sp, #12]
   171f4:	cmp	r0, #0
   171f8:	beq	175e8 <__assert_fail@plt+0x527c>
   171fc:	ldr	r8, [sp, #32]
   17200:	movw	r4, #31526	; 0x7b26
   17204:	mov	r6, #0
   17208:	movt	r4, #2
   1720c:	lsl	r9, r8, #3
   17210:	b	17434 <__assert_fail@plt+0x50c8>
   17214:	ldr	r8, [sp, #32]
   17218:	ldr	r6, [sp, #20]
   1721c:	add	r0, r9, r2, lsl #3
   17220:	mov	r7, r2
   17224:	add	r1, r9, r4, lsl #3
   17228:	sub	r2, r6, r4
   1722c:	lsl	r2, r2, #3
   17230:	bl	11ea4 <memmove@plt>
   17234:	add	r0, r7, r6
   17238:	add	r8, r8, r7
   1723c:	sub	r7, r0, r4
   17240:	str	r8, [sp, #32]
   17244:	cmp	r5, r7
   17248:	bcs	171d4 <__assert_fail@plt+0x4e68>
   1724c:	cmp	r5, r7
   17250:	str	r7, [sp, #20]
   17254:	bls	1726c <__assert_fail@plt+0x4f00>
   17258:	movw	r6, #37360	; 0x91f0
   1725c:	mov	r2, #0
   17260:	mov	r4, #0
   17264:	movt	r6, #3
   17268:	b	17344 <__assert_fail@plt+0x4fd8>
   1726c:	movw	r6, #37360	; 0x91f0
   17270:	mov	r4, #0
   17274:	mov	r2, #0
   17278:	movt	r6, #3
   1727c:	b	172f8 <__assert_fail@plt+0x4f8c>
   17280:	ldr	r6, [sp, #32]
   17284:	ldr	r0, [sp, #40]	; 0x28
   17288:	ldr	r3, [sp, #24]
   1728c:	add	r8, sl, #9
   17290:	mov	r2, r5
   17294:	str	r8, [sp]
   17298:	cmp	r6, r9
   1729c:	str	r0, [sp, #4]
   172a0:	mov	r0, r7
   172a4:	movcc	r9, r6
   172a8:	mov	r1, r9
   172ac:	bl	1a390 <__assert_fail@plt+0x8024>
   172b0:	ldr	r9, [sp, #16]
   172b4:	ldr	r2, [sp, #28]
   172b8:	cmp	r6, r5
   172bc:	add	r4, r5, r4
   172c0:	movcc	r5, r6
   172c4:	sub	r6, r6, r5
   172c8:	mov	r0, r9
   172cc:	str	r8, [r0, r2, lsl #3]!
   172d0:	str	r6, [sp, #32]
   172d4:	movw	r6, #37360	; 0x91f0
   172d8:	add	r2, r2, #1
   172dc:	movt	r6, #3
   172e0:	str	sl, [r0, #4]
   172e4:	ldr	r0, [sp, #20]
   172e8:	ldr	r5, [r6, #8]
   172ec:	sub	r7, r0, r4
   172f0:	cmp	r5, r7
   172f4:	bhi	17344 <__assert_fail@plt+0x4fd8>
   172f8:	sub	r0, fp, #32
   172fc:	mov	r1, #0
   17300:	str	r2, [sp, #28]
   17304:	bl	1ad94 <__assert_fail@plt+0x8a28>
   17308:	mov	sl, r0
   1730c:	add	r7, r9, r4, lsl #3
   17310:	ldr	r9, [r6, #8]
   17314:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17318:	add	r2, sp, #40	; 0x28
   1731c:	str	r0, [sp, #24]
   17320:	mov	r0, r7
   17324:	mov	r1, r9
   17328:	bl	1a07c <__assert_fail@plt+0x7d10>
   1732c:	mov	r5, r0
   17330:	cmp	r0, r9
   17334:	bcs	17280 <__assert_fail@plt+0x4f14>
   17338:	cmp	r5, #1
   1733c:	bhi	17280 <__assert_fail@plt+0x4f14>
   17340:	b	178a0 <__assert_fail@plt+0x5534>
   17344:	udiv	r0, r2, r5
   17348:	mul	r0, r0, r5
   1734c:	sub	r0, r0, r2
   17350:	add	r8, r5, r0
   17354:	cmp	r7, r8
   17358:	bls	17214 <__assert_fail@plt+0x4ea8>
   1735c:	sub	r0, fp, #32
   17360:	mov	r1, #0
   17364:	str	r2, [sp, #28]
   17368:	bl	1ad94 <__assert_fail@plt+0x8a28>
   1736c:	mov	r1, r9
   17370:	mov	r9, r0
   17374:	add	r2, sp, #40	; 0x28
   17378:	add	r0, r1, r4, lsl #3
   1737c:	sub	r1, r7, r8
   17380:	add	r7, r1, #1
   17384:	ldr	r1, [fp, #-32]	; 0xffffffe0
   17388:	str	r0, [sp, #24]
   1738c:	str	r1, [sp, #8]
   17390:	mov	r1, r7
   17394:	bl	1a07c <__assert_fail@plt+0x7d10>
   17398:	mov	r5, r0
   1739c:	cmp	r0, r7
   173a0:	bcs	173ac <__assert_fail@plt+0x5040>
   173a4:	cmp	r5, #1
   173a8:	bls	178f4 <__assert_fail@plt+0x5588>
   173ac:	ldr	r0, [sp, #40]	; 0x28
   173b0:	ldr	r8, [sp, #32]
   173b4:	ldr	r3, [sp, #8]
   173b8:	add	sl, r9, #9
   173bc:	mov	r2, r5
   173c0:	str	sl, [sp]
   173c4:	str	r0, [sp, #4]
   173c8:	ldr	r0, [sp, #24]
   173cc:	cmp	r8, r7
   173d0:	movcc	r7, r8
   173d4:	mov	r1, r7
   173d8:	bl	1a390 <__assert_fail@plt+0x8024>
   173dc:	ldr	r1, [sp, #16]
   173e0:	ldr	r2, [sp, #28]
   173e4:	cmp	r8, r5
   173e8:	add	r4, r5, r4
   173ec:	movcc	r5, r8
   173f0:	sub	r8, r8, r5
   173f4:	mov	r0, r1
   173f8:	str	sl, [r0, r2, lsl #3]!
   173fc:	add	r2, r2, #1
   17400:	str	r9, [r0, #4]
   17404:	mov	r9, r1
   17408:	ldr	r5, [r6, #8]
   1740c:	b	17218 <__assert_fail@plt+0x4eac>
   17410:	add	r0, r6, #9
   17414:	str	r0, [sl]
   17418:	ldr	r0, [sp, #16]
   1741c:	add	r0, r0, r8, lsl #3
   17420:	str	r6, [r0, #4]
   17424:	add	r8, r8, #1
   17428:	add	r9, r9, #8
   1742c:	cmp	r7, r8
   17430:	beq	17764 <__assert_fail@plt+0x53f8>
   17434:	ldr	sl, [sp, #16]
   17438:	mov	r1, r4
   1743c:	ldr	r7, [sl, r9]!
   17440:	mov	r0, r7
   17444:	bl	11e50 <strcmp@plt>
   17448:	mov	r5, r0
   1744c:	ldr	r0, [sp, #12]
   17450:	mov	r1, r7
   17454:	bl	11e50 <strcmp@plt>
   17458:	cmp	r5, #0
   1745c:	beq	174c8 <__assert_fail@plt+0x515c>
   17460:	cmp	r0, #0
   17464:	bne	174c8 <__assert_fail@plt+0x515c>
   17468:	ldr	r7, [sp, #20]
   1746c:	cmp	r6, #0
   17470:	bne	17410 <__assert_fail@plt+0x50a4>
   17474:	add	r0, sp, #36	; 0x24
   17478:	mov	r1, #0
   1747c:	bl	1ad94 <__assert_fail@plt+0x8a28>
   17480:	ldr	r5, [sp, #36]	; 0x24
   17484:	mov	r6, r0
   17488:	mov	r0, sl
   1748c:	mov	r1, #1
   17490:	sub	r2, fp, #32
   17494:	bl	1a07c <__assert_fail@plt+0x7d10>
   17498:	cmp	r0, #0
   1749c:	beq	17914 <__assert_fail@plt+0x55a8>
   174a0:	mov	r2, r0
   174a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   174a8:	add	r1, r6, #9
   174ac:	mov	r3, r5
   174b0:	str	r1, [sp]
   174b4:	mov	r1, #0
   174b8:	str	r0, [sp, #4]
   174bc:	mov	r0, sl
   174c0:	bl	1a390 <__assert_fail@plt+0x8024>
   174c4:	b	17410 <__assert_fail@plt+0x50a4>
   174c8:	movw	r0, #39024	; 0x9870
   174cc:	str	r6, [sp, #28]
   174d0:	mov	r6, r4
   174d4:	movt	r0, #3
   174d8:	ldr	r4, [r0, #44]	; 0x2c
   174dc:	cmp	r4, #0
   174e0:	bne	1751c <__assert_fail@plt+0x51b0>
   174e4:	movw	r2, #38760	; 0x9768
   174e8:	mov	r0, #3
   174ec:	mov	r1, #1
   174f0:	movt	r2, #3
   174f4:	bl	12018 <__fxstat64@plt>
   174f8:	cmp	r0, #0
   174fc:	beq	1750c <__assert_fail@plt+0x51a0>
   17500:	bl	12198 <__errno_location@plt>
   17504:	ldr	r4, [r0]
   17508:	b	17510 <__assert_fail@plt+0x51a4>
   1750c:	mvn	r4, #0
   17510:	movw	r0, #39024	; 0x9870
   17514:	movt	r0, #3
   17518:	str	r4, [r0, #44]	; 0x2c
   1751c:	cmn	r4, #1
   17520:	bgt	17760 <__assert_fail@plt+0x53f4>
   17524:	cmp	r5, #0
   17528:	beq	1754c <__assert_fail@plt+0x51e0>
   1752c:	ldr	r1, [sl]
   17530:	mov	r0, #3
   17534:	add	r2, sp, #40	; 0x28
   17538:	bl	12324 <__xstat64@plt>
   1753c:	ldr	r7, [sp, #20]
   17540:	cmp	r0, #0
   17544:	bne	175cc <__assert_fail@plt+0x5260>
   17548:	b	17568 <__assert_fail@plt+0x51fc>
   1754c:	mov	r0, #3
   17550:	mov	r1, #0
   17554:	add	r2, sp, #40	; 0x28
   17558:	bl	12018 <__fxstat64@plt>
   1755c:	ldr	r7, [sp, #20]
   17560:	cmp	r0, #0
   17564:	bne	175cc <__assert_fail@plt+0x5260>
   17568:	movw	r0, #38760	; 0x9768
   1756c:	ldr	r1, [sp, #24]
   17570:	movt	r0, #3
   17574:	and	r0, r0, r4, asr #31
   17578:	ldrd	r4, [r1]
   1757c:	ldrd	r2, [r0, #96]	; 0x60
   17580:	eor	r1, r5, r3
   17584:	eor	r2, r4, r2
   17588:	orrs	r1, r2, r1
   1758c:	bne	175cc <__assert_fail@plt+0x5260>
   17590:	ldrd	r0, [r0]
   17594:	ldr	r2, [sp, #40]	; 0x28
   17598:	ldr	r3, [sp, #44]	; 0x2c
   1759c:	mov	r4, r6
   175a0:	ldr	r6, [sp, #28]
   175a4:	eor	r1, r3, r1
   175a8:	eor	r0, r2, r0
   175ac:	orrs	r0, r0, r1
   175b0:	beq	17468 <__assert_fail@plt+0x50fc>
   175b4:	ldr	r7, [sp, #20]
   175b8:	add	r8, r8, #1
   175bc:	add	r9, r9, #8
   175c0:	cmp	r7, r8
   175c4:	bne	17434 <__assert_fail@plt+0x50c8>
   175c8:	b	17764 <__assert_fail@plt+0x53f8>
   175cc:	mov	r4, r6
   175d0:	ldr	r6, [sp, #28]
   175d4:	add	r8, r8, #1
   175d8:	add	r9, r9, #8
   175dc:	cmp	r7, r8
   175e0:	bne	17434 <__assert_fail@plt+0x50c8>
   175e4:	b	17764 <__assert_fail@plt+0x53f8>
   175e8:	ldr	r8, [sp, #32]
   175ec:	movw	r9, #39024	; 0x9870
   175f0:	mov	r6, #0
   175f4:	movt	r9, #3
   175f8:	lsl	sl, r8, #3
   175fc:	b	17628 <__assert_fail@plt+0x52bc>
   17600:	add	r0, r6, #9
   17604:	str	r0, [r7]
   17608:	ldr	r0, [sp, #16]
   1760c:	add	r0, r0, r8, lsl #3
   17610:	str	r6, [r0, #4]
   17614:	ldr	r7, [sp, #20]
   17618:	add	r8, r8, #1
   1761c:	add	sl, sl, #8
   17620:	cmp	r7, r8
   17624:	beq	17764 <__assert_fail@plt+0x53f8>
   17628:	ldr	r7, [sp, #16]
   1762c:	movw	r1, #31526	; 0x7b26
   17630:	movt	r1, #2
   17634:	ldr	r0, [r7, sl]!
   17638:	bl	11e50 <strcmp@plt>
   1763c:	ldr	r4, [r9, #44]	; 0x2c
   17640:	mov	r5, r0
   17644:	cmp	r4, #0
   17648:	bne	1767c <__assert_fail@plt+0x5310>
   1764c:	movw	r2, #38760	; 0x9768
   17650:	mov	r0, #3
   17654:	mov	r1, #1
   17658:	movt	r2, #3
   1765c:	bl	12018 <__fxstat64@plt>
   17660:	cmp	r0, #0
   17664:	beq	17674 <__assert_fail@plt+0x5308>
   17668:	bl	12198 <__errno_location@plt>
   1766c:	ldr	r4, [r0]
   17670:	b	17678 <__assert_fail@plt+0x530c>
   17674:	mvn	r4, #0
   17678:	str	r4, [r9, #44]	; 0x2c
   1767c:	cmn	r4, #1
   17680:	bgt	17760 <__assert_fail@plt+0x53f4>
   17684:	cmp	r5, #0
   17688:	beq	176a8 <__assert_fail@plt+0x533c>
   1768c:	ldr	r1, [r7]
   17690:	mov	r0, #3
   17694:	add	r2, sp, #40	; 0x28
   17698:	bl	12324 <__xstat64@plt>
   1769c:	cmp	r0, #0
   176a0:	bne	17614 <__assert_fail@plt+0x52a8>
   176a4:	b	176c0 <__assert_fail@plt+0x5354>
   176a8:	mov	r0, #3
   176ac:	mov	r1, #0
   176b0:	add	r2, sp, #40	; 0x28
   176b4:	bl	12018 <__fxstat64@plt>
   176b8:	cmp	r0, #0
   176bc:	bne	17614 <__assert_fail@plt+0x52a8>
   176c0:	movw	r0, #38760	; 0x9768
   176c4:	ldr	r1, [sp, #24]
   176c8:	movt	r0, #3
   176cc:	and	r0, r0, r4, asr #31
   176d0:	ldrd	r4, [r1]
   176d4:	ldrd	r2, [r0, #96]	; 0x60
   176d8:	eor	r1, r5, r3
   176dc:	eor	r2, r4, r2
   176e0:	orrs	r1, r2, r1
   176e4:	bne	17614 <__assert_fail@plt+0x52a8>
   176e8:	ldrd	r0, [r0]
   176ec:	ldr	r2, [sp, #40]	; 0x28
   176f0:	ldr	r3, [sp, #44]	; 0x2c
   176f4:	eor	r1, r3, r1
   176f8:	eor	r0, r2, r0
   176fc:	orrs	r0, r0, r1
   17700:	bne	17614 <__assert_fail@plt+0x52a8>
   17704:	cmp	r6, #0
   17708:	bne	17600 <__assert_fail@plt+0x5294>
   1770c:	add	r0, sp, #36	; 0x24
   17710:	mov	r1, #0
   17714:	bl	1ad94 <__assert_fail@plt+0x8a28>
   17718:	ldr	r5, [sp, #36]	; 0x24
   1771c:	mov	r6, r0
   17720:	mov	r0, r7
   17724:	mov	r1, #1
   17728:	sub	r2, fp, #32
   1772c:	bl	1a07c <__assert_fail@plt+0x7d10>
   17730:	cmp	r0, #0
   17734:	beq	17914 <__assert_fail@plt+0x55a8>
   17738:	mov	r2, r0
   1773c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17740:	add	r1, r6, #9
   17744:	mov	r3, r5
   17748:	str	r1, [sp]
   1774c:	mov	r1, #0
   17750:	str	r0, [sp, #4]
   17754:	mov	r0, r7
   17758:	bl	1a390 <__assert_fail@plt+0x8024>
   1775c:	b	17600 <__assert_fail@plt+0x5294>
   17760:	ldr	r7, [sp, #20]
   17764:	ldr	r6, [sp, #16]
   17768:	ldr	r9, [sp, #32]
   1776c:	sub	r8, fp, #32
   17770:	sub	r4, r6, #8
   17774:	add	r0, r6, #8
   17778:	str	r0, [sp, #28]
   1777c:	mov	r0, r6
   17780:	mov	r1, r7
   17784:	add	r2, sp, #40	; 0x28
   17788:	bl	1a07c <__assert_fail@plt+0x7d10>
   1778c:	mov	sl, r0
   17790:	cmp	r0, r7
   17794:	str	r7, [sp, #20]
   17798:	bne	177d0 <__assert_fail@plt+0x5464>
   1779c:	ldr	r0, [sp, #12]
   177a0:	movw	r1, #32403	; 0x7e93
   177a4:	movt	r1, #2
   177a8:	bl	179a8 <__assert_fail@plt+0x563c>
   177ac:	cmp	r0, #0
   177b0:	bne	17874 <__assert_fail@plt+0x5508>
   177b4:	bl	12198 <__errno_location@plt>
   177b8:	cmp	r7, #3
   177bc:	bcc	178bc <__assert_fail@plt+0x5550>
   177c0:	ldr	r0, [r0]
   177c4:	cmp	r0, #24
   177c8:	beq	177d8 <__assert_fail@plt+0x546c>
   177cc:	b	178bc <__assert_fail@plt+0x5550>
   177d0:	cmp	sl, #2
   177d4:	bls	178d8 <__assert_fail@plt+0x556c>
   177d8:	ldr	r6, [sp, #40]	; 0x28
   177dc:	sub	r5, r6, #4
   177e0:	ldr	r1, [r4, sl, lsl #3]
   177e4:	ldr	r0, [r5, sl, lsl #2]
   177e8:	bl	16cd4 <__assert_fail@plt+0x4968>
   177ec:	sub	sl, sl, #1
   177f0:	mov	r1, #0
   177f4:	mov	r0, r8
   177f8:	cmp	sl, #2
   177fc:	movwhi	r1, #1
   17800:	bl	1ad94 <__assert_fail@plt+0x8a28>
   17804:	cmp	r0, #0
   17808:	beq	177e0 <__assert_fail@plt+0x5474>
   1780c:	add	r5, r0, #9
   17810:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17814:	mov	r7, r0
   17818:	cmp	r9, sl
   1781c:	mov	r0, r9
   17820:	str	r9, [sp, #32]
   17824:	mov	r9, sl
   17828:	mov	r2, sl
   1782c:	stm	sp, {r5, r6}
   17830:	ldr	r6, [sp, #16]
   17834:	movcc	r9, r0
   17838:	mov	r1, r9
   1783c:	mov	r0, r6
   17840:	bl	1a390 <__assert_fail@plt+0x8024>
   17844:	stm	r6, {r5, r7}
   17848:	add	r1, r6, sl, lsl #3
   1784c:	ldr	r0, [sp, #20]
   17850:	sub	r5, r0, sl
   17854:	ldr	r0, [sp, #28]
   17858:	lsl	r2, r5, #3
   1785c:	bl	11ea4 <memmove@plt>
   17860:	ldr	r0, [sp, #32]
   17864:	add	r7, r5, #1
   17868:	sub	r0, r0, r9
   1786c:	add	r9, r0, #1
   17870:	b	1777c <__assert_fail@plt+0x5410>
   17874:	mov	r3, r0
   17878:	ldr	r0, [sp, #40]	; 0x28
   1787c:	ldr	r1, [sp, #12]
   17880:	mov	r2, r7
   17884:	str	r1, [sp]
   17888:	str	r0, [sp, #4]
   1788c:	mov	r0, r6
   17890:	mov	r1, r9
   17894:	bl	1a390 <__assert_fail@plt+0x8024>
   17898:	sub	sp, fp, #28
   1789c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178a0:	movw	r1, #31391	; 0x7a9f
   178a4:	mov	r0, #0
   178a8:	mov	r2, #5
   178ac:	movt	r1, #2
   178b0:	bl	11f7c <dcgettext@plt>
   178b4:	ldr	r1, [r7, r5, lsl #3]
   178b8:	bl	17934 <__assert_fail@plt+0x55c8>
   178bc:	movw	r1, #31391	; 0x7a9f
   178c0:	mov	r0, #0
   178c4:	mov	r2, #5
   178c8:	movt	r1, #2
   178cc:	bl	11f7c <dcgettext@plt>
   178d0:	ldr	r1, [sp, #12]
   178d4:	bl	17934 <__assert_fail@plt+0x55c8>
   178d8:	movw	r1, #31391	; 0x7a9f
   178dc:	mov	r0, #0
   178e0:	mov	r2, #5
   178e4:	movt	r1, #2
   178e8:	bl	11f7c <dcgettext@plt>
   178ec:	ldr	r1, [r6, sl, lsl #3]
   178f0:	bl	17934 <__assert_fail@plt+0x55c8>
   178f4:	movw	r1, #31391	; 0x7a9f
   178f8:	mov	r0, #0
   178fc:	mov	r2, #5
   17900:	movt	r1, #2
   17904:	bl	11f7c <dcgettext@plt>
   17908:	ldr	r1, [sp, #24]
   1790c:	ldr	r1, [r1, r5, lsl #3]
   17910:	bl	17934 <__assert_fail@plt+0x55c8>
   17914:	movw	r1, #31391	; 0x7a9f
   17918:	mov	r0, #0
   1791c:	mov	r2, #5
   17920:	movt	r1, #2
   17924:	bl	11f7c <dcgettext@plt>
   17928:	ldr	r1, [sp, #16]
   1792c:	ldr	r1, [r1, r8, lsl #3]
   17930:	bl	17934 <__assert_fail@plt+0x55c8>
   17934:	push	{fp, lr}
   17938:	mov	fp, sp
   1793c:	sub	sp, sp, #8
   17940:	mov	r6, r1
   17944:	mov	r4, r0
   17948:	bl	12198 <__errno_location@plt>
   1794c:	ldr	r5, [r0]
   17950:	cmp	r6, #0
   17954:	bne	17970 <__assert_fail@plt+0x5604>
   17958:	movw	r1, #32688	; 0x7fb0
   1795c:	mov	r0, #0
   17960:	mov	r2, #5
   17964:	movt	r1, #2
   17968:	bl	11f7c <dcgettext@plt>
   1796c:	mov	r6, r0
   17970:	mov	r0, #0
   17974:	mov	r1, #3
   17978:	mov	r2, r6
   1797c:	bl	21e04 <__assert_fail@plt+0xfa98>
   17980:	movw	r2, #32681	; 0x7fa9
   17984:	str	r0, [sp]
   17988:	mov	r0, #2
   1798c:	mov	r1, r5
   17990:	mov	r3, r4
   17994:	movt	r2, #2
   17998:	bl	120a8 <error@plt>
   1799c:	ldr	r1, [r1]
   179a0:	ldr	r0, [r0]
   179a4:	b	11e50 <strcmp@plt>
   179a8:	push	{r4, r5, r6, r7, fp, lr}
   179ac:	add	fp, sp, #16
   179b0:	mov	r4, r0
   179b4:	ldrb	r0, [r1]
   179b8:	cmp	r0, #119	; 0x77
   179bc:	beq	17a08 <__assert_fail@plt+0x569c>
   179c0:	cmp	r0, #114	; 0x72
   179c4:	bne	17ae0 <__assert_fail@plt+0x5774>
   179c8:	mov	r5, r1
   179cc:	movw	r1, #31526	; 0x7b26
   179d0:	mov	r0, r4
   179d4:	movt	r1, #2
   179d8:	bl	11e50 <strcmp@plt>
   179dc:	cmp	r0, #0
   179e0:	beq	17a6c <__assert_fail@plt+0x5700>
   179e4:	mov	r0, r4
   179e8:	mov	r1, #524288	; 0x80000
   179ec:	bl	120b4 <open64@plt>
   179f0:	cmp	r0, #0
   179f4:	bmi	17a8c <__assert_fail@plt+0x5720>
   179f8:	mov	r1, r5
   179fc:	bl	11e20 <fdopen@plt>
   17a00:	mov	r4, r0
   17a04:	b	17a90 <__assert_fail@plt+0x5724>
   17a08:	cmp	r4, #0
   17a0c:	beq	17acc <__assert_fail@plt+0x5760>
   17a10:	mov	r0, #1
   17a14:	mov	r2, #0
   17a18:	mov	r3, #0
   17a1c:	bl	11f4c <ftruncate64@plt>
   17a20:	cmp	r0, #0
   17a24:	beq	17acc <__assert_fail@plt+0x5760>
   17a28:	bl	12198 <__errno_location@plt>
   17a2c:	movw	r7, #39024	; 0x9870
   17a30:	mov	r6, r0
   17a34:	movt	r7, #3
   17a38:	ldr	r5, [r6]
   17a3c:	ldr	r0, [r7, #44]	; 0x2c
   17a40:	cmp	r0, #0
   17a44:	bne	17aac <__assert_fail@plt+0x5740>
   17a48:	movw	r2, #38760	; 0x9768
   17a4c:	mov	r0, #3
   17a50:	mov	r1, #1
   17a54:	movt	r2, #3
   17a58:	bl	12018 <__fxstat64@plt>
   17a5c:	cmp	r0, #0
   17a60:	beq	17aa4 <__assert_fail@plt+0x5738>
   17a64:	ldr	r0, [r6]
   17a68:	b	17aa8 <__assert_fail@plt+0x573c>
   17a6c:	movw	r0, #39024	; 0x9870
   17a70:	mov	r1, #1
   17a74:	movt	r0, #3
   17a78:	strb	r1, [r0, #4]
   17a7c:	movw	r0, #37592	; 0x92d8
   17a80:	movt	r0, #3
   17a84:	ldr	r4, [r0]
   17a88:	b	17a90 <__assert_fail@plt+0x5724>
   17a8c:	mov	r4, #0
   17a90:	mov	r0, r4
   17a94:	mov	r1, #2
   17a98:	bl	1d660 <__assert_fail@plt+0xb2f4>
   17a9c:	mov	r0, r4
   17aa0:	pop	{r4, r5, r6, r7, fp, pc}
   17aa4:	mvn	r0, #0
   17aa8:	str	r0, [r7, #44]	; 0x2c
   17aac:	cmn	r0, #1
   17ab0:	bgt	17b00 <__assert_fail@plt+0x5794>
   17ab4:	movw	r0, #38760	; 0x9768
   17ab8:	movt	r0, #3
   17abc:	ldr	r0, [r0, #16]
   17ac0:	and	r0, r0, #61440	; 0xf000
   17ac4:	cmp	r0, #32768	; 0x8000
   17ac8:	beq	17b00 <__assert_fail@plt+0x5794>
   17acc:	movw	r0, #37596	; 0x92dc
   17ad0:	movt	r0, #3
   17ad4:	ldr	r4, [r0]
   17ad8:	mov	r0, r4
   17adc:	pop	{r4, r5, r6, r7, fp, pc}
   17ae0:	movw	r0, #31424	; 0x7ac0
   17ae4:	movw	r1, #29447	; 0x7307
   17ae8:	movw	r3, #31465	; 0x7ae9
   17aec:	movw	r2, #981	; 0x3d5
   17af0:	movt	r0, #2
   17af4:	movt	r1, #2
   17af8:	movt	r3, #2
   17afc:	bl	1236c <__assert_fail@plt>
   17b00:	movw	r1, #31403	; 0x7aab
   17b04:	mov	r0, #0
   17b08:	mov	r2, #5
   17b0c:	movt	r1, #2
   17b10:	bl	11f7c <dcgettext@plt>
   17b14:	mov	r6, r0
   17b18:	mov	r0, #0
   17b1c:	mov	r1, #3
   17b20:	mov	r2, r4
   17b24:	bl	21e04 <__assert_fail@plt+0xfa98>
   17b28:	mov	r3, r0
   17b2c:	mov	r0, #2
   17b30:	mov	r1, r5
   17b34:	mov	r2, r6
   17b38:	bl	120a8 <error@plt>
   17b3c:	ldrb	r2, [r0, #24]
   17b40:	cmp	r2, #0
   17b44:	bne	17b54 <__assert_fail@plt+0x57e8>
   17b48:	ldrb	r2, [r0, #25]
   17b4c:	cmp	r2, #0
   17b50:	beq	17b5c <__assert_fail@plt+0x57f0>
   17b54:	mov	r2, #98	; 0x62
   17b58:	strb	r2, [r1], #1
   17b5c:	ldr	r2, [r0, #16]
   17b60:	movw	r3, #38248	; 0x9568
   17b64:	movt	r3, #3
   17b68:	cmp	r2, r3
   17b6c:	movw	r3, #37992	; 0x9468
   17b70:	moveq	r2, #100	; 0x64
   17b74:	movt	r3, #3
   17b78:	strbeq	r2, [r1], #1
   17b7c:	ldr	r2, [r0, #20]
   17b80:	cmp	r2, #0
   17b84:	movne	r2, #102	; 0x66
   17b88:	strbne	r2, [r1], #1
   17b8c:	ldrb	r2, [r0, #28]
   17b90:	cmp	r2, #0
   17b94:	movne	r2, #103	; 0x67
   17b98:	strbne	r2, [r1], #1
   17b9c:	ldrb	r2, [r0, #29]
   17ba0:	cmp	r2, #0
   17ba4:	movne	r2, #104	; 0x68
   17ba8:	strbne	r2, [r1], #1
   17bac:	ldr	r2, [r0, #16]
   17bb0:	cmp	r2, r3
   17bb4:	moveq	r2, #105	; 0x69
   17bb8:	strbeq	r2, [r1], #1
   17bbc:	ldrb	r2, [r0, #30]
   17bc0:	cmp	r2, #0
   17bc4:	movne	r2, #77	; 0x4d
   17bc8:	strbne	r2, [r1], #1
   17bcc:	ldrb	r2, [r0, #26]
   17bd0:	cmp	r2, #0
   17bd4:	movne	r2, #110	; 0x6e
   17bd8:	strbne	r2, [r1], #1
   17bdc:	ldrb	r2, [r0, #27]
   17be0:	cmp	r2, #0
   17be4:	movne	r2, #82	; 0x52
   17be8:	strbne	r2, [r1], #1
   17bec:	ldrb	r2, [r0, #31]
   17bf0:	cmp	r2, #0
   17bf4:	movne	r2, #114	; 0x72
   17bf8:	strbne	r2, [r1], #1
   17bfc:	ldrb	r0, [r0, #32]
   17c00:	cmp	r0, #0
   17c04:	movne	r0, #86	; 0x56
   17c08:	strbne	r0, [r1], #1
   17c0c:	mov	r0, #0
   17c10:	strb	r0, [r1]
   17c14:	bx	lr
   17c18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c1c:	add	fp, sp, #28
   17c20:	sub	sp, sp, #36	; 0x24
   17c24:	movw	r7, #39024	; 0x9870
   17c28:	mov	ip, r0
   17c2c:	mov	r3, r2
   17c30:	mov	r6, #10
   17c34:	movt	r7, #3
   17c38:	ldrb	r2, [ip, #24]
   17c3c:	ldrb	r0, [r7, #8]
   17c40:	cmp	r0, #0
   17c44:	mov	r0, #0
   17c48:	movwne	r6, #0
   17c4c:	cmp	r2, #0
   17c50:	beq	17c5c <__assert_fail@plt+0x58f0>
   17c54:	sub	sp, fp, #28
   17c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c5c:	ldr	r0, [ip, #20]
   17c60:	str	r1, [sp, #8]
   17c64:	ldr	r2, [ip, #16]
   17c68:	ldr	r1, [ip, #4]
   17c6c:	str	r3, [sp]
   17c70:	str	r0, [sp, #24]
   17c74:	ldr	r0, [r7, #20]
   17c78:	cmp	r1, r2
   17c7c:	str	r0, [sp, #28]
   17c80:	movw	r0, #37352	; 0x91e8
   17c84:	movt	r0, #3
   17c88:	ldr	r4, [r0]
   17c8c:	beq	17cb8 <__assert_fail@plt+0x594c>
   17c90:	ldr	r0, [ip]
   17c94:	mov	r5, ip
   17c98:	add	r1, r0, r1
   17c9c:	sub	r1, r1, r2
   17ca0:	bl	11ea4 <memmove@plt>
   17ca4:	ldr	r1, [r5, #16]
   17ca8:	mov	ip, r5
   17cac:	mov	r0, #0
   17cb0:	str	r1, [r5, #4]
   17cb4:	str	r0, [r5, #8]
   17cb8:	ldr	r0, [sp, #24]
   17cbc:	ldr	r8, [ip]
   17cc0:	sub	sl, r4, #18
   17cc4:	str	ip, [sp, #12]
   17cc8:	str	r6, [sp, #16]
   17ccc:	add	r5, r0, #1
   17cd0:	ldr	r0, [ip, #12]
   17cd4:	str	r5, [sp, #4]
   17cd8:	add	r7, r8, r0
   17cdc:	ldr	r2, [ip, #8]
   17ce0:	ldr	r0, [sp, #24]
   17ce4:	add	r9, r8, r1
   17ce8:	mls	r3, r0, r2, r7
   17cec:	cmp	r2, #0
   17cf0:	beq	17d08 <__assert_fail@plt+0x599c>
   17cf4:	rsb	r1, r2, #0
   17cf8:	mov	r0, r7
   17cfc:	ldr	r1, [r0, r1, lsl #4]!
   17d00:	ldr	r0, [r0, #4]
   17d04:	add	r8, r1, r0
   17d08:	sub	r7, r7, r2, lsl #4
   17d0c:	sub	r4, r3, r9
   17d10:	cmp	r5, r4
   17d14:	bcc	17d3c <__assert_fail@plt+0x59d0>
   17d18:	b	17f08 <__assert_fail@plt+0x5b9c>
   17d1c:	ldr	r9, [sp, #20]
   17d20:	ldr	ip, [sp, #12]
   17d24:	ldr	r5, [sp, #4]
   17d28:	ldrb	r0, [ip, #24]
   17d2c:	cmp	r0, #0
   17d30:	bne	17f08 <__assert_fail@plt+0x5b9c>
   17d34:	cmp	r5, r4
   17d38:	bcs	17f08 <__assert_fail@plt+0x5b9c>
   17d3c:	sub	r0, r4, #1
   17d40:	mov	r1, #1
   17d44:	udiv	r6, r0, r5
   17d48:	ldr	r5, [sp, #8]
   17d4c:	mov	r0, r9
   17d50:	mov	r3, r5
   17d54:	mov	r2, r6
   17d58:	bl	1230c <fread_unlocked@plt>
   17d5c:	add	r1, r9, r0
   17d60:	cmp	r0, r6
   17d64:	bne	17d70 <__assert_fail@plt+0x5a04>
   17d68:	ldr	r6, [sp, #16]
   17d6c:	b	17db8 <__assert_fail@plt+0x5a4c>
   17d70:	ldr	r2, [r5]
   17d74:	ldr	r3, [sp, #12]
   17d78:	tst	r2, #32
   17d7c:	bne	17f90 <__assert_fail@plt+0x5c24>
   17d80:	ldr	r6, [sp, #16]
   17d84:	tst	r2, #16
   17d88:	beq	17db8 <__assert_fail@plt+0x5a4c>
   17d8c:	mov	r2, #1
   17d90:	strb	r2, [r3, #24]
   17d94:	ldr	r2, [r3]
   17d98:	cmp	r2, r1
   17d9c:	beq	17f60 <__assert_fail@plt+0x5bf4>
   17da0:	cmp	r8, r1
   17da4:	mov	r2, r8
   17da8:	beq	17dbc <__assert_fail@plt+0x5a50>
   17dac:	ldrb	r2, [r1, #-1]
   17db0:	cmp	r2, r6
   17db4:	strbne	r6, [r1], #1
   17db8:	mov	r2, r1
   17dbc:	sub	r4, r4, r0
   17dc0:	str	r2, [sp, #20]
   17dc4:	sub	r2, r2, r9
   17dc8:	mov	r0, r9
   17dcc:	mov	r1, r6
   17dd0:	bl	12204 <memchr@plt>
   17dd4:	cmp	r0, #0
   17dd8:	beq	17d1c <__assert_fail@plt+0x59b0>
   17ddc:	ldr	r1, [sp, #28]
   17de0:	cmp	r1, #0
   17de4:	bne	17e74 <__assert_fail@plt+0x5b08>
   17de8:	ldr	r9, [sp, #20]
   17dec:	mov	r1, r8
   17df0:	mov	r8, r0
   17df4:	mov	r0, #0
   17df8:	strb	r0, [r8], #1
   17dfc:	str	r1, [r7, #-16]!
   17e00:	sub	r5, r8, r1
   17e04:	sub	r2, r9, r8
   17e08:	mov	r0, r8
   17e0c:	mov	r1, r6
   17e10:	str	r5, [r7, #4]
   17e14:	bl	12204 <memchr@plt>
   17e18:	ldr	r1, [sp, #24]
   17e1c:	cmp	sl, r5
   17e20:	movls	sl, r5
   17e24:	cmp	r0, #0
   17e28:	sub	r4, r4, r1
   17e2c:	mov	r1, r8
   17e30:	bne	17df0 <__assert_fail@plt+0x5a84>
   17e34:	b	17d20 <__assert_fail@plt+0x59b4>
   17e38:	mov	r0, r6
   17e3c:	mov	r1, r9
   17e40:	bl	19e28 <__assert_fail@plt+0x7abc>
   17e44:	ldr	r9, [sp, #20]
   17e48:	mov	r6, r0
   17e4c:	ldr	r0, [sp, #24]
   17e50:	str	r6, [r5, #-8]
   17e54:	ldr	r6, [sp, #16]
   17e58:	sub	r2, r9, r8
   17e5c:	sub	r4, r4, r0
   17e60:	mov	r0, r8
   17e64:	mov	r1, r6
   17e68:	bl	12204 <memchr@plt>
   17e6c:	cmp	r0, #0
   17e70:	beq	17d20 <__assert_fail@plt+0x59b4>
   17e74:	mov	r6, r8
   17e78:	mov	r8, r0
   17e7c:	mov	r1, #0
   17e80:	ldr	r2, [sp, #28]
   17e84:	mov	r5, r7
   17e88:	strb	r1, [r8], #1
   17e8c:	str	r6, [r7, #-16]!
   17e90:	sub	r9, r8, r6
   17e94:	str	r9, [r7, #4]
   17e98:	cmp	sl, r9
   17e9c:	ldr	r1, [r2, #8]
   17ea0:	movls	sl, r9
   17ea4:	cmn	r1, #1
   17ea8:	beq	17ec0 <__assert_fail@plt+0x5b54>
   17eac:	ldr	r2, [sp, #28]
   17eb0:	mov	r0, r6
   17eb4:	mov	r1, r9
   17eb8:	bl	19cc8 <__assert_fail@plt+0x795c>
   17ebc:	ldr	r2, [sp, #28]
   17ec0:	str	r0, [r5, #-4]
   17ec4:	ldr	r0, [r2]
   17ec8:	cmn	r0, #1
   17ecc:	bne	17e38 <__assert_fail@plt+0x5acc>
   17ed0:	ldrb	r0, [r2, #24]
   17ed4:	cmp	r0, #0
   17ed8:	beq	17f00 <__assert_fail@plt+0x5b94>
   17edc:	ldr	r9, [sp, #20]
   17ee0:	movw	r1, #37736	; 0x9368
   17ee4:	sub	r6, r6, #1
   17ee8:	movt	r1, #3
   17eec:	ldrb	r0, [r6, #1]!
   17ef0:	ldrb	r0, [r1, r0]
   17ef4:	cmp	r0, #0
   17ef8:	bne	17eec <__assert_fail@plt+0x5b80>
   17efc:	b	17e4c <__assert_fail@plt+0x5ae0>
   17f00:	ldr	r9, [sp, #20]
   17f04:	b	17e4c <__assert_fail@plt+0x5ae0>
   17f08:	ldr	r0, [ip]
   17f0c:	ldr	r1, [ip, #12]
   17f10:	add	r3, r0, r1
   17f14:	sub	r2, r9, r0
   17f18:	subs	r3, r3, r7
   17f1c:	asr	r3, r3, #4
   17f20:	stmib	ip, {r2, r3}
   17f24:	bne	17f6c <__assert_fail@plt+0x5c00>
   17f28:	lsr	r1, r1, #4
   17f2c:	mov	r2, #16
   17f30:	mov	r4, ip
   17f34:	str	r1, [sp, #32]
   17f38:	add	r1, sp, #32
   17f3c:	bl	23ac0 <__assert_fail@plt+0x11754>
   17f40:	str	r0, [r4]
   17f44:	mov	r8, r0
   17f48:	mov	ip, r4
   17f4c:	ldr	r0, [sp, #32]
   17f50:	lsl	r0, r0, #4
   17f54:	str	r0, [r4, #12]
   17f58:	ldr	r1, [r4, #4]
   17f5c:	b	17cd8 <__assert_fail@plt+0x596c>
   17f60:	mov	r0, #0
   17f64:	sub	sp, fp, #28
   17f68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f6c:	movw	r1, #37352	; 0x91e8
   17f70:	sub	r0, r9, r8
   17f74:	movt	r1, #3
   17f78:	str	r0, [ip, #16]
   17f7c:	add	r0, sl, #18
   17f80:	str	r0, [r1]
   17f84:	mov	r0, #1
   17f88:	sub	sp, fp, #28
   17f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f90:	movw	r1, #32243	; 0x7df3
   17f94:	mov	r0, #0
   17f98:	mov	r2, #5
   17f9c:	movt	r1, #2
   17fa0:	bl	11f7c <dcgettext@plt>
   17fa4:	ldr	r1, [sp]
   17fa8:	bl	17934 <__assert_fail@plt+0x55c8>
   17fac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fb0:	add	fp, sp, #28
   17fb4:	sub	sp, sp, #4
   17fb8:	vpush	{d8}
   17fbc:	sub	sp, sp, #248	; 0xf8
   17fc0:	sub	sp, sp, #8192	; 0x2000
   17fc4:	movw	r6, #39024	; 0x9870
   17fc8:	str	r1, [sp, #44]	; 0x2c
   17fcc:	str	r0, [sp, #48]	; 0x30
   17fd0:	movt	r6, #3
   17fd4:	ldr	r5, [r6, #20]
   17fd8:	cmp	r5, #0
   17fdc:	beq	19408 <__assert_fail@plt+0x709c>
   17fe0:	add	r0, sp, #4080	; 0xff0
   17fe4:	sub	lr, fp, #3072	; 0xc00
   17fe8:	add	r0, r0, #156	; 0x9c
   17fec:	sub	r1, lr, #1016	; 0x3f8
   17ff0:	str	r0, [sp, #16]
   17ff4:	ldr	r0, [sp, #44]	; 0x2c
   17ff8:	add	r1, r1, #16
   17ffc:	str	r1, [sp]
   18000:	ldr	sl, [r0, #8]
   18004:	ldr	r6, [r0, #12]
   18008:	ldr	r0, [sp, #48]	; 0x30
   1800c:	ldr	r9, [r0, #8]
   18010:	ldr	r8, [r0, #12]
   18014:	b	18068 <__assert_fail@plt+0x5cfc>
   18018:	add	r0, r9, r4
   1801c:	sub	r8, r0, #1
   18020:	ldr	r0, [sp, #44]	; 0x2c
   18024:	ldr	sl, [r0]
   18028:	ldr	r7, [r0, #4]
   1802c:	add	r0, sl, r7
   18030:	sub	r6, r0, #1
   18034:	ldr	r0, [r5]
   18038:	cmn	r0, #1
   1803c:	beq	187f0 <__assert_fail@plt+0x6484>
   18040:	mov	r0, r9
   18044:	mov	r1, r4
   18048:	mov	r2, r5
   1804c:	bl	19e28 <__assert_fail@plt+0x7abc>
   18050:	mov	r9, r0
   18054:	mov	r0, sl
   18058:	mov	r1, r7
   1805c:	mov	r2, r5
   18060:	bl	19e28 <__assert_fail@plt+0x7abc>
   18064:	mov	sl, r0
   18068:	cmp	sl, r6
   1806c:	ldr	ip, [r5, #20]
   18070:	movhi	r6, sl
   18074:	cmp	r9, r8
   18078:	str	r6, [sp, #64]	; 0x40
   1807c:	sub	r4, r6, sl
   18080:	movw	r6, #39024	; 0x9870
   18084:	movhi	r8, r9
   18088:	movt	r6, #3
   1808c:	str	r8, [sp, #68]	; 0x44
   18090:	sub	r3, r8, r9
   18094:	ldr	r8, [r5, #16]
   18098:	ldrb	r0, [r6]
   1809c:	cmp	r0, #0
   180a0:	bne	180ec <__assert_fail@plt+0x5d80>
   180a4:	ldrb	r0, [r5, #26]
   180a8:	cmp	r0, #0
   180ac:	bne	180ec <__assert_fail@plt+0x5d80>
   180b0:	ldrb	r0, [r5, #28]
   180b4:	cmp	r0, #0
   180b8:	bne	180ec <__assert_fail@plt+0x5d80>
   180bc:	ldrb	r0, [r5, #29]
   180c0:	cmp	r0, #0
   180c4:	bne	180ec <__assert_fail@plt+0x5d80>
   180c8:	ldrb	r0, [r5, #30]
   180cc:	cmp	r0, #0
   180d0:	bne	180ec <__assert_fail@plt+0x5d80>
   180d4:	ldrb	r0, [r5, #27]
   180d8:	cmp	r0, #0
   180dc:	bne	180ec <__assert_fail@plt+0x5d80>
   180e0:	ldrb	r0, [r5, #32]
   180e4:	cmp	r0, #0
   180e8:	beq	19194 <__assert_fail@plt+0x6e28>
   180ec:	orrs	r0, ip, r8
   180f0:	movwne	r0, #1
   180f4:	str	r0, [sp, #76]	; 0x4c
   180f8:	beq	181b8 <__assert_fail@plt+0x5e4c>
   180fc:	add	r0, r4, r3
   18100:	mov	r1, #0
   18104:	add	lr, sp, #80	; 0x50
   18108:	str	ip, [sp, #72]	; 0x48
   1810c:	add	r0, r0, #2
   18110:	str	r1, [sp, #52]	; 0x34
   18114:	cmp	r0, #4000	; 0xfa0
   18118:	bls	18134 <__assert_fail@plt+0x5dc8>
   1811c:	mov	r7, r3
   18120:	bl	23914 <__assert_fail@plt+0x115a8>
   18124:	ldr	ip, [sp, #72]	; 0x48
   18128:	mov	r3, r7
   1812c:	mov	lr, r0
   18130:	str	r0, [sp, #52]	; 0x34
   18134:	add	r0, lr, r3
   18138:	cmp	r3, #0
   1813c:	str	r3, [sp, #60]	; 0x3c
   18140:	str	r0, [sp, #40]	; 0x28
   18144:	mov	r0, #0
   18148:	beq	1840c <__assert_fail@plt+0x60a0>
   1814c:	cmp	r8, #0
   18150:	beq	181f0 <__assert_fail@plt+0x5e84>
   18154:	ldr	r2, [sp, #60]	; 0x3c
   18158:	cmp	ip, #0
   1815c:	mov	r0, #0
   18160:	mov	r1, r9
   18164:	bne	18198 <__assert_fail@plt+0x5e2c>
   18168:	ldrb	r3, [r1]
   1816c:	add	r1, r1, #1
   18170:	ldrb	r7, [r8, r3]
   18174:	cmp	r7, #0
   18178:	strbeq	r3, [lr, r0]
   1817c:	addeq	r0, r0, #1
   18180:	subs	r2, r2, #1
   18184:	bne	18168 <__assert_fail@plt+0x5dfc>
   18188:	b	1840c <__assert_fail@plt+0x60a0>
   1818c:	add	r1, r1, #1
   18190:	subs	r2, r2, #1
   18194:	beq	1840c <__assert_fail@plt+0x60a0>
   18198:	ldrb	r3, [r1]
   1819c:	ldrb	r7, [r8, r3]
   181a0:	cmp	r7, #0
   181a4:	bne	1818c <__assert_fail@plt+0x5e20>
   181a8:	ldrb	r3, [ip, r3]
   181ac:	strb	r3, [lr, r0]
   181b0:	add	r0, r0, #1
   181b4:	b	1818c <__assert_fail@plt+0x5e20>
   181b8:	ldr	r1, [sp, #68]	; 0x44
   181bc:	ldr	r2, [sp, #64]	; 0x40
   181c0:	mov	lr, r9
   181c4:	mov	r7, sl
   181c8:	str	r3, [sp, #56]	; 0x38
   181cc:	str	r4, [sp, #68]	; 0x44
   181d0:	ldrb	r0, [r1]
   181d4:	str	r0, [sp, #36]	; 0x24
   181d8:	mov	r0, #0
   181dc:	strb	r0, [r1]
   181e0:	ldrb	r1, [r2]
   181e4:	str	r1, [sp, #32]
   181e8:	mov	r1, r3
   181ec:	b	18718 <__assert_fail@plt+0x63ac>
   181f0:	ldr	r0, [sp, #60]	; 0x3c
   181f4:	cmp	ip, #0
   181f8:	beq	18278 <__assert_fail@plt+0x5f0c>
   181fc:	and	r1, r0, #1
   18200:	ldr	r0, [sp, #68]	; 0x44
   18204:	mvn	r3, r9
   18208:	mov	r2, #0
   1820c:	cmn	r3, r0
   18210:	beq	1825c <__assert_fail@plt+0x5ef0>
   18214:	ldr	r0, [sp, #68]	; 0x44
   18218:	add	r2, r9, r1
   1821c:	sub	r3, r2, r0
   18220:	mov	r2, #0
   18224:	mov	r0, r9
   18228:	mov	r6, lr
   1822c:	ldrb	r7, [r0, -r2]!
   18230:	ldrb	r7, [ip, r7]
   18234:	strb	r7, [r6, -r2]!
   18238:	sub	r2, r2, #2
   1823c:	ldrb	r0, [r0, #1]
   18240:	cmp	r3, r2
   18244:	ldrb	r0, [ip, r0]
   18248:	strb	r0, [r6, #1]
   1824c:	bne	18224 <__assert_fail@plt+0x5eb8>
   18250:	movw	r6, #39024	; 0x9870
   18254:	rsb	r2, r2, #0
   18258:	movt	r6, #3
   1825c:	ldr	r0, [sp, #60]	; 0x3c
   18260:	cmp	r1, #0
   18264:	beq	1840c <__assert_fail@plt+0x60a0>
   18268:	ldrb	r0, [r9, r2]
   1826c:	ldrb	r0, [ip, r0]
   18270:	strb	r0, [lr, r2]
   18274:	b	18408 <__assert_fail@plt+0x609c>
   18278:	mov	r1, #0
   1827c:	cmp	r0, #15
   18280:	bls	18370 <__assert_fail@plt+0x6004>
   18284:	ldr	r0, [sp, #68]	; 0x44
   18288:	cmp	lr, r0
   1828c:	ldrcc	r0, [sp, #40]	; 0x28
   18290:	cmpcc	r9, r0
   18294:	bcc	18370 <__assert_fail@plt+0x6004>
   18298:	ldr	r0, [sp, #60]	; 0x3c
   1829c:	mov	r3, #0
   182a0:	mov	r2, #48	; 0x30
   182a4:	str	r5, [sp, #4]
   182a8:	bic	r1, r0, #15
   182ac:	mov	r0, #1
   182b0:	sub	r6, r1, #16
   182b4:	add	r7, r0, r6, lsr #4
   182b8:	cmp	r6, #48	; 0x30
   182bc:	and	r0, r7, #3
   182c0:	str	r0, [sp, #56]	; 0x38
   182c4:	bcc	1832c <__assert_fail@plt+0x5fc0>
   182c8:	ldr	r0, [sp, #56]	; 0x38
   182cc:	mov	r3, #0
   182d0:	sub	r7, r0, r7
   182d4:	add	r6, r9, r3
   182d8:	add	r0, lr, r3
   182dc:	adds	r7, r7, #4
   182e0:	add	r3, r3, #64	; 0x40
   182e4:	mov	r5, r6
   182e8:	mov	ip, r0
   182ec:	vld1.8	{d16-d17}, [r5], r2
   182f0:	vst1.8	{d16-d17}, [ip], r2
   182f4:	mov	r2, lr
   182f8:	add	lr, r6, #16
   182fc:	vld1.8	{d16-d17}, [lr]
   18300:	mov	lr, r2
   18304:	add	r2, r0, #16
   18308:	add	r0, r0, #32
   1830c:	vst1.8	{d16-d17}, [r2]
   18310:	add	r2, r6, #32
   18314:	vld1.8	{d16-d17}, [r2]
   18318:	mov	r2, #48	; 0x30
   1831c:	vst1.8	{d16-d17}, [r0]
   18320:	vld1.8	{d16-d17}, [r5]
   18324:	vst1.8	{d16-d17}, [ip]
   18328:	bne	182d4 <__assert_fail@plt+0x5f68>
   1832c:	ldr	r0, [sp, #56]	; 0x38
   18330:	cmp	r0, #0
   18334:	beq	18354 <__assert_fail@plt+0x5fe8>
   18338:	add	r7, r9, r3
   1833c:	add	r3, lr, r3
   18340:	rsb	r2, r0, #0
   18344:	vld1.8	{d16-d17}, [r7]!
   18348:	adds	r2, r2, #1
   1834c:	vst1.8	{d16-d17}, [r3]!
   18350:	bcc	18344 <__assert_fail@plt+0x5fd8>
   18354:	ldr	r0, [sp, #60]	; 0x3c
   18358:	ldr	r5, [sp, #4]
   1835c:	ldr	ip, [sp, #72]	; 0x48
   18360:	movw	r6, #39024	; 0x9870
   18364:	movt	r6, #3
   18368:	cmp	r0, r1
   1836c:	beq	1840c <__assert_fail@plt+0x60a0>
   18370:	ldr	r0, [sp, #68]	; 0x44
   18374:	mvn	r2, r1
   18378:	add	r2, r2, r0
   1837c:	sub	r3, r0, r9
   18380:	sub	r2, r2, r9
   18384:	ands	r3, r3, #3
   18388:	beq	183a0 <__assert_fail@plt+0x6034>
   1838c:	ldrb	r7, [r9, r1]
   18390:	subs	r3, r3, #1
   18394:	strb	r7, [lr, r1]
   18398:	add	r1, r1, #1
   1839c:	bne	1838c <__assert_fail@plt+0x6020>
   183a0:	ldr	r0, [sp, #60]	; 0x3c
   183a4:	cmp	r2, #3
   183a8:	mov	r3, r9
   183ac:	mov	r7, lr
   183b0:	mov	r2, r0
   183b4:	bcc	1840c <__assert_fail@plt+0x60a0>
   183b8:	add	r0, r3, #4
   183bc:	ldrb	r6, [r3, r1]!
   183c0:	mov	ip, r5
   183c4:	add	r5, r7, #4
   183c8:	sub	r2, r2, #4
   183cc:	cmp	r1, r2
   183d0:	strb	r6, [r7, r1]!
   183d4:	ldrb	r6, [r3, #1]
   183d8:	strb	r6, [r7, #1]
   183dc:	ldrb	r6, [r3, #2]
   183e0:	strb	r6, [r7, #2]
   183e4:	movw	r6, #39024	; 0x9870
   183e8:	ldrb	r3, [r3, #3]
   183ec:	movt	r6, #3
   183f0:	strb	r3, [r7, #3]
   183f4:	mov	r7, r5
   183f8:	mov	r5, ip
   183fc:	ldr	ip, [sp, #72]	; 0x48
   18400:	mov	r3, r0
   18404:	bne	183b8 <__assert_fail@plt+0x604c>
   18408:	ldr	r0, [sp, #60]	; 0x3c
   1840c:	ldr	r1, [sp, #40]	; 0x28
   18410:	mov	r2, #0
   18414:	cmp	r4, #0
   18418:	str	r0, [sp, #56]	; 0x38
   1841c:	strb	r2, [lr, r0]
   18420:	add	r7, r1, #1
   18424:	beq	1870c <__assert_fail@plt+0x63a0>
   18428:	cmp	r8, #0
   1842c:	beq	1848c <__assert_fail@plt+0x6120>
   18430:	mov	r2, #0
   18434:	cmp	ip, #0
   18438:	bne	1846c <__assert_fail@plt+0x6100>
   1843c:	ldrb	r0, [sl]
   18440:	add	sl, sl, #1
   18444:	ldrb	r1, [r8, r0]
   18448:	cmp	r1, #0
   1844c:	strbeq	r0, [r7, r2]
   18450:	addeq	r2, r2, #1
   18454:	subs	r4, r4, #1
   18458:	bne	1843c <__assert_fail@plt+0x60d0>
   1845c:	b	1870c <__assert_fail@plt+0x63a0>
   18460:	add	sl, sl, #1
   18464:	subs	r4, r4, #1
   18468:	beq	1870c <__assert_fail@plt+0x63a0>
   1846c:	ldrb	r0, [sl]
   18470:	ldrb	r1, [r8, r0]
   18474:	cmp	r1, #0
   18478:	bne	18460 <__assert_fail@plt+0x60f4>
   1847c:	ldrb	r0, [ip, r0]
   18480:	strb	r0, [r7, r2]
   18484:	add	r2, r2, #1
   18488:	b	18460 <__assert_fail@plt+0x60f4>
   1848c:	cmp	ip, #0
   18490:	beq	18518 <__assert_fail@plt+0x61ac>
   18494:	ldr	r3, [sp, #64]	; 0x40
   18498:	mvn	r2, sl
   1849c:	mov	r0, ip
   184a0:	mov	r8, r7
   184a4:	mov	ip, r5
   184a8:	and	r9, r4, #1
   184ac:	mov	r1, #0
   184b0:	cmn	r2, r3
   184b4:	beq	184f8 <__assert_fail@plt+0x618c>
   184b8:	ldr	r1, [sp, #60]	; 0x3c
   184bc:	sub	r3, r4, r9
   184c0:	add	r7, sl, #1
   184c4:	add	r2, lr, r1
   184c8:	mov	r1, #0
   184cc:	add	r6, r7, r1
   184d0:	add	r5, r2, r1
   184d4:	ldrb	r6, [r6, #-1]
   184d8:	ldrb	r6, [r0, r6]
   184dc:	strb	r6, [r5, #1]
   184e0:	ldrb	r6, [r7, r1]
   184e4:	add	r1, r1, #2
   184e8:	cmp	r3, r1
   184ec:	ldrb	r6, [r0, r6]
   184f0:	strb	r6, [r5, #2]
   184f4:	bne	184cc <__assert_fail@plt+0x6160>
   184f8:	cmp	r9, #0
   184fc:	bne	1852c <__assert_fail@plt+0x61c0>
   18500:	movw	r6, #39024	; 0x9870
   18504:	mov	r2, r4
   18508:	mov	r5, ip
   1850c:	mov	r7, r8
   18510:	movt	r6, #3
   18514:	b	1870c <__assert_fail@plt+0x63a0>
   18518:	mov	r1, #0
   1851c:	cmp	r4, #15
   18520:	bhi	18554 <__assert_fail@plt+0x61e8>
   18524:	ldr	r3, [sp, #64]	; 0x40
   18528:	b	1866c <__assert_fail@plt+0x6300>
   1852c:	ldrb	r0, [sl, r1]
   18530:	ldr	r2, [sp, #72]	; 0x48
   18534:	movw	r6, #39024	; 0x9870
   18538:	mov	r7, r8
   1853c:	mov	r5, ip
   18540:	movt	r6, #3
   18544:	ldrb	r0, [r2, r0]
   18548:	mov	r2, r4
   1854c:	strb	r0, [r8, r1]
   18550:	b	1870c <__assert_fail@plt+0x63a0>
   18554:	ldr	r3, [sp, #64]	; 0x40
   18558:	mov	r8, #48	; 0x30
   1855c:	cmp	r7, r3
   18560:	bcs	18584 <__assert_fail@plt+0x6218>
   18564:	ldr	r0, [sp, #68]	; 0x44
   18568:	add	r0, r3, r0
   1856c:	sub	r0, r0, sl
   18570:	sub	r0, r0, r9
   18574:	add	r0, lr, r0
   18578:	add	r0, r0, #1
   1857c:	cmp	sl, r0
   18580:	bcc	1866c <__assert_fail@plt+0x6300>
   18584:	bic	r1, r4, #15
   18588:	mov	r2, #1
   1858c:	ldr	ip, [sp, #40]	; 0x28
   18590:	str	r7, [sp, #60]	; 0x3c
   18594:	str	lr, [sp, #72]	; 0x48
   18598:	mov	r3, #0
   1859c:	str	r5, [sp, #4]
   185a0:	sub	r0, r1, #16
   185a4:	add	r7, r2, r0, lsr #4
   185a8:	cmp	r0, #48	; 0x30
   185ac:	and	lr, r7, #3
   185b0:	bcc	1860c <__assert_fail@plt+0x62a0>
   185b4:	sub	r7, lr, r7
   185b8:	mov	r3, #0
   185bc:	add	r0, sl, r3
   185c0:	add	r5, ip, r3
   185c4:	adds	r7, r7, #4
   185c8:	add	r3, r3, #64	; 0x40
   185cc:	mov	r6, r0
   185d0:	add	r2, r5, #1
   185d4:	vld1.8	{d16-d17}, [r6], r8
   185d8:	vst1.8	{d16-d17}, [r2]
   185dc:	add	r2, r0, #16
   185e0:	add	r0, r0, #32
   185e4:	vld1.8	{d16-d17}, [r2]
   185e8:	add	r2, r5, #17
   185ec:	vst1.8	{d16-d17}, [r2]
   185f0:	vld1.8	{d16-d17}, [r0]
   185f4:	add	r0, r5, #33	; 0x21
   185f8:	vst1.8	{d16-d17}, [r0]
   185fc:	add	r0, r5, #49	; 0x31
   18600:	vld1.8	{d16-d17}, [r6]
   18604:	vst1.8	{d16-d17}, [r0]
   18608:	bne	185bc <__assert_fail@plt+0x6250>
   1860c:	cmp	lr, #0
   18610:	beq	18644 <__assert_fail@plt+0x62d8>
   18614:	ldr	r0, [sp, #68]	; 0x44
   18618:	ldr	r2, [sp, #72]	; 0x48
   1861c:	add	r7, sl, r3
   18620:	add	r0, r3, r0
   18624:	sub	r0, r0, r9
   18628:	add	r0, r2, r0
   1862c:	rsb	r2, lr, #0
   18630:	add	r3, r0, #1
   18634:	vld1.8	{d16-d17}, [r7]!
   18638:	adds	r2, r2, #1
   1863c:	vst1.8	{d16-d17}, [r3]!
   18640:	bcc	18634 <__assert_fail@plt+0x62c8>
   18644:	ldr	r5, [sp, #4]
   18648:	ldr	lr, [sp, #72]	; 0x48
   1864c:	ldr	r7, [sp, #60]	; 0x3c
   18650:	ldr	r3, [sp, #64]	; 0x40
   18654:	movw	r6, #39024	; 0x9870
   18658:	cmp	r4, r1
   1865c:	movt	r6, #3
   18660:	bne	1866c <__assert_fail@plt+0x6300>
   18664:	mov	r2, r4
   18668:	b	1870c <__assert_fail@plt+0x63a0>
   1866c:	mvn	r0, r1
   18670:	mov	r8, r6
   18674:	mov	ip, r7
   18678:	add	r0, r0, r3
   1867c:	sub	r2, r0, sl
   18680:	sub	r0, r3, sl
   18684:	ands	r3, r0, #3
   18688:	beq	186b4 <__assert_fail@plt+0x6348>
   1868c:	ldr	r6, [sp, #40]	; 0x28
   18690:	ldrb	r0, [sl, r1]
   18694:	add	r7, r6, r1
   18698:	subs	r3, r3, #1
   1869c:	add	r1, r1, #1
   186a0:	strb	r0, [r7, #1]
   186a4:	bne	18690 <__assert_fail@plt+0x6324>
   186a8:	cmp	r2, #3
   186ac:	bcs	186c0 <__assert_fail@plt+0x6354>
   186b0:	b	18700 <__assert_fail@plt+0x6394>
   186b4:	ldr	r6, [sp, #40]	; 0x28
   186b8:	cmp	r2, #3
   186bc:	bcc	18700 <__assert_fail@plt+0x6394>
   186c0:	mov	r2, r4
   186c4:	add	r0, sl, #4
   186c8:	ldrb	r3, [sl, r1]!
   186cc:	add	r7, r6, r1
   186d0:	sub	r2, r2, #4
   186d4:	add	r6, r6, #4
   186d8:	cmp	r1, r2
   186dc:	strb	r3, [r7, #1]
   186e0:	ldrb	r3, [sl, #1]
   186e4:	strb	r3, [r7, #2]
   186e8:	ldrb	r3, [sl, #2]
   186ec:	strb	r3, [r7, #3]
   186f0:	ldrb	r3, [sl, #3]
   186f4:	mov	sl, r0
   186f8:	strb	r3, [r7, #4]
   186fc:	bne	186c4 <__assert_fail@plt+0x6358>
   18700:	mov	r2, r4
   18704:	mov	r7, ip
   18708:	mov	r6, r8
   1870c:	str	r2, [sp, #68]	; 0x44
   18710:	add	r2, r7, r2
   18714:	mov	r0, #0
   18718:	strb	r0, [r2]
   1871c:	movw	r3, #37736	; 0x9368
   18720:	str	lr, [sp, #72]	; 0x48
   18724:	str	r7, [sp, #60]	; 0x3c
   18728:	ldrb	r0, [r5, #26]
   1872c:	movt	r3, #3
   18730:	cmp	r0, #0
   18734:	beq	1886c <__assert_fail@plt+0x6500>
   18738:	sub	r0, lr, #1
   1873c:	ldrb	r1, [r0, #1]!
   18740:	ldrb	r1, [r3, r1]
   18744:	cmp	r1, #0
   18748:	bne	1873c <__assert_fail@plt+0x63d0>
   1874c:	sub	r1, r7, #1
   18750:	ldrb	r2, [r1, #1]!
   18754:	ldrb	r2, [r3, r2]
   18758:	cmp	r2, #0
   1875c:	bne	18750 <__assert_fail@plt+0x63e4>
   18760:	ldr	r3, [r6, #12]
   18764:	ldrb	r2, [r6, #2]
   18768:	bl	22d34 <__assert_fail@plt+0x109c8>
   1876c:	mov	r7, r0
   18770:	ldr	r0, [sp, #76]	; 0x4c
   18774:	cmp	r0, #0
   18778:	beq	189a8 <__assert_fail@plt+0x663c>
   1877c:	ldr	r0, [sp, #52]	; 0x34
   18780:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   18784:	cmp	r7, #0
   18788:	bne	193d8 <__assert_fail@plt+0x706c>
   1878c:	ldr	r5, [r5, #36]	; 0x24
   18790:	cmp	r5, #0
   18794:	beq	193ec <__assert_fail@plt+0x7080>
   18798:	ldr	r0, [sp, #48]	; 0x30
   1879c:	ldr	r9, [r0]
   187a0:	ldr	r4, [r0, #4]
   187a4:	ldr	r0, [r5, #8]
   187a8:	cmn	r0, #1
   187ac:	beq	18018 <__assert_fail@plt+0x5cac>
   187b0:	mov	r0, r9
   187b4:	mov	r1, r4
   187b8:	mov	r2, r5
   187bc:	bl	19cc8 <__assert_fail@plt+0x795c>
   187c0:	mov	r8, r0
   187c4:	ldr	r0, [sp, #44]	; 0x2c
   187c8:	mov	r2, r5
   187cc:	ldr	r7, [r0, #4]
   187d0:	ldr	sl, [r0]
   187d4:	mov	r0, sl
   187d8:	mov	r1, r7
   187dc:	bl	19cc8 <__assert_fail@plt+0x795c>
   187e0:	mov	r6, r0
   187e4:	ldr	r0, [r5]
   187e8:	cmn	r0, #1
   187ec:	bne	18040 <__assert_fail@plt+0x5cd4>
   187f0:	ldrb	r0, [r5, #24]
   187f4:	cmp	r0, #0
   187f8:	beq	18068 <__assert_fail@plt+0x5cfc>
   187fc:	mov	r2, r5
   18800:	cmp	r9, r8
   18804:	bcs	18830 <__assert_fail@plt+0x64c4>
   18808:	movw	r1, #37736	; 0x9368
   1880c:	movt	r1, #3
   18810:	ldrb	r0, [r9]
   18814:	ldrb	r0, [r1, r0]
   18818:	cmp	r0, #0
   1881c:	beq	18830 <__assert_fail@plt+0x64c4>
   18820:	add	r9, r9, #1
   18824:	cmp	r8, r9
   18828:	bne	18810 <__assert_fail@plt+0x64a4>
   1882c:	mov	r9, r8
   18830:	cmp	sl, r6
   18834:	mov	r5, r2
   18838:	bcs	18068 <__assert_fail@plt+0x5cfc>
   1883c:	movw	r1, #37736	; 0x9368
   18840:	movt	r1, #3
   18844:	ldrb	r0, [sl]
   18848:	ldrb	r0, [r1, r0]
   1884c:	cmp	r0, #0
   18850:	beq	18afc <__assert_fail@plt+0x6790>
   18854:	add	sl, sl, #1
   18858:	cmp	r6, sl
   1885c:	bne	18844 <__assert_fail@plt+0x64d8>
   18860:	mov	sl, r6
   18864:	mov	r5, r2
   18868:	b	18068 <__assert_fail@plt+0x5cfc>
   1886c:	ldrb	r0, [r5, #28]
   18870:	cmp	r0, #0
   18874:	beq	188e0 <__assert_fail@plt+0x6574>
   18878:	mov	r0, lr
   1887c:	sub	lr, fp, #3072	; 0xc00
   18880:	sub	r1, lr, #1016	; 0x3f8
   18884:	bl	11f40 <strtold@plt>
   18888:	mov	r0, r7
   1888c:	sub	r1, fp, #52	; 0x34
   18890:	vmov.f64	d8, d0
   18894:	bl	11f40 <strtold@plt>
   18898:	add	r1, sp, #4080	; 0xff0
   1889c:	ldr	r2, [sp, #72]	; 0x48
   188a0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   188a4:	ldr	r1, [r1, #312]	; 0x138
   188a8:	cmp	r1, r2
   188ac:	beq	18994 <__assert_fail@plt+0x6628>
   188b0:	mov	r1, r7
   188b4:	mov	r7, #1
   188b8:	cmp	r0, r1
   188bc:	beq	18770 <__assert_fail@plt+0x6404>
   188c0:	vcmpe.f64	d8, d0
   188c4:	vmrs	APSR_nzcv, fpscr
   188c8:	bpl	18a84 <__assert_fail@plt+0x6718>
   188cc:	mvn	r7, #0
   188d0:	ldr	r0, [sp, #76]	; 0x4c
   188d4:	cmp	r0, #0
   188d8:	bne	1877c <__assert_fail@plt+0x6410>
   188dc:	b	189a8 <__assert_fail@plt+0x663c>
   188e0:	ldrb	r0, [r5, #29]
   188e4:	cmp	r0, #0
   188e8:	beq	189d4 <__assert_fail@plt+0x6668>
   188ec:	sub	r0, lr, #1
   188f0:	ldrb	r8, [r0, #1]!
   188f4:	ldrb	r1, [r3, r8]
   188f8:	cmp	r1, #0
   188fc:	bne	188f0 <__assert_fail@plt+0x6584>
   18900:	sub	r1, r7, #1
   18904:	str	r5, [sp, #4]
   18908:	ldrb	lr, [r1, #1]!
   1890c:	ldrb	r2, [r3, lr]
   18910:	cmp	r2, #0
   18914:	bne	18908 <__assert_fail@plt+0x659c>
   18918:	cmp	r8, #45	; 0x2d
   1891c:	mov	r9, r0
   18920:	addeq	r9, r9, #1
   18924:	mov	r4, r9
   18928:	ldrb	r5, [r4], #1
   1892c:	sub	r2, r5, #48	; 0x30
   18930:	cmp	r2, #9
   18934:	bhi	18b04 <__assert_fail@plt+0x6798>
   18938:	ldr	ip, [r6, #12]
   1893c:	mov	sl, #0
   18940:	mov	r2, r4
   18944:	uxtb	r3, r5
   18948:	uxtb	r4, sl
   1894c:	mov	r6, r2
   18950:	cmp	r4, r3
   18954:	ldrb	r3, [r2]
   18958:	movcc	sl, r5
   1895c:	cmp	ip, r3
   18960:	addeq	r6, r9, #2
   18964:	mov	r4, r6
   18968:	mov	r9, r6
   1896c:	ldrb	r5, [r4], #1
   18970:	sub	r7, r5, #48	; 0x30
   18974:	cmp	r7, #10
   18978:	bcc	18940 <__assert_fail@plt+0x65d4>
   1897c:	cmp	ip, r3
   18980:	bne	18c1c <__assert_fail@plt+0x68b0>
   18984:	sub	r4, r6, #1
   18988:	movw	r6, #39024	; 0x9870
   1898c:	movt	r6, #3
   18990:	b	18c38 <__assert_fail@plt+0x68cc>
   18994:	subs	r7, r0, r7
   18998:	mvnne	r7, #0
   1899c:	ldr	r0, [sp, #76]	; 0x4c
   189a0:	cmp	r0, #0
   189a4:	bne	1877c <__assert_fail@plt+0x6410>
   189a8:	ldr	r0, [sp, #36]	; 0x24
   189ac:	ldr	r1, [sp, #72]	; 0x48
   189b0:	ldr	r2, [sp, #56]	; 0x38
   189b4:	strb	r0, [r1, r2]
   189b8:	ldr	r0, [sp, #32]
   189bc:	ldr	r1, [sp, #60]	; 0x3c
   189c0:	ldr	r2, [sp, #68]	; 0x44
   189c4:	strb	r0, [r1, r2]
   189c8:	cmp	r7, #0
   189cc:	beq	1878c <__assert_fail@plt+0x6420>
   189d0:	b	193d8 <__assert_fail@plt+0x706c>
   189d4:	ldrb	r0, [r5, #30]
   189d8:	cmp	r0, #0
   189dc:	beq	18d78 <__assert_fail@plt+0x6a0c>
   189e0:	mov	r8, r5
   189e4:	sub	r0, lr, #1
   189e8:	ldrb	r1, [r0, #1]!
   189ec:	ldrb	r1, [r3, r1]
   189f0:	cmp	r1, #0
   189f4:	bne	189e8 <__assert_fail@plt+0x667c>
   189f8:	mov	lr, #12
   189fc:	mov	ip, #0
   18a00:	movw	r1, #37360	; 0x91f0
   18a04:	add	r3, lr, ip
   18a08:	movt	r1, #3
   18a0c:	lsr	r3, r3, #1
   18a10:	add	r7, r1, r3, lsl #3
   18a14:	ldr	r6, [r7, #24]
   18a18:	ldrb	r4, [r6]
   18a1c:	cmp	r4, #0
   18a20:	beq	18b48 <__assert_fail@plt+0x67dc>
   18a24:	add	r6, r6, #1
   18a28:	mov	r5, #0
   18a2c:	ldrb	r1, [r0, r5]
   18a30:	movw	r2, #38504	; 0x9668
   18a34:	uxtb	r4, r4
   18a38:	movt	r2, #3
   18a3c:	ldrb	r1, [r2, r1]
   18a40:	cmp	r1, r4
   18a44:	bcc	18a60 <__assert_fail@plt+0x66f4>
   18a48:	bhi	18a70 <__assert_fail@plt+0x6704>
   18a4c:	ldrb	r4, [r6, r5]
   18a50:	add	r5, r5, #1
   18a54:	cmp	r4, #0
   18a58:	bne	18a2c <__assert_fail@plt+0x66c0>
   18a5c:	b	18b48 <__assert_fail@plt+0x67dc>
   18a60:	mov	lr, r3
   18a64:	cmp	ip, lr
   18a68:	bcc	18a00 <__assert_fail@plt+0x6694>
   18a6c:	b	18a7c <__assert_fail@plt+0x6710>
   18a70:	add	ip, r3, #1
   18a74:	cmp	ip, lr
   18a78:	bcc	18a00 <__assert_fail@plt+0x6694>
   18a7c:	mov	ip, #0
   18a80:	b	18b4c <__assert_fail@plt+0x67e0>
   18a84:	vcmpe.f64	d8, d0
   18a88:	vmrs	APSR_nzcv, fpscr
   18a8c:	bgt	18770 <__assert_fail@plt+0x6404>
   18a90:	vcmp.f64	d8, d0
   18a94:	mov	r7, #0
   18a98:	vmrs	APSR_nzcv, fpscr
   18a9c:	beq	18770 <__assert_fail@plt+0x6404>
   18aa0:	vcmpe.f64	d0, d0
   18aa4:	mvn	r7, #0
   18aa8:	vmrs	APSR_nzcv, fpscr
   18aac:	bvc	18770 <__assert_fail@plt+0x6404>
   18ab0:	vcmpe.f64	d8, d8
   18ab4:	mov	r7, #1
   18ab8:	vmrs	APSR_nzcv, fpscr
   18abc:	bvc	18770 <__assert_fail@plt+0x6404>
   18ac0:	ldr	r0, [sp, #72]	; 0x48
   18ac4:	mov	r1, #0
   18ac8:	bl	11f40 <strtold@plt>
   18acc:	ldr	r0, [sp, #60]	; 0x3c
   18ad0:	add	r4, sp, #4080	; 0xff0
   18ad4:	mov	r1, #0
   18ad8:	vstr	d0, [r4, #344]	; 0x158
   18adc:	bl	11f40 <strtold@plt>
   18ae0:	sub	lr, fp, #3072	; 0xc00
   18ae4:	mov	r1, r4
   18ae8:	mov	r2, #8
   18aec:	vstr	d0, [r4]
   18af0:	sub	r0, lr, #984	; 0x3d8
   18af4:	bl	11f64 <memcmp@plt>
   18af8:	b	1876c <__assert_fail@plt+0x6400>
   18afc:	mov	r5, r2
   18b00:	b	18068 <__assert_fail@plt+0x5cfc>
   18b04:	mov	sl, #0
   18b08:	ldrb	r2, [r6, #2]
   18b0c:	cmp	r5, r2
   18b10:	bne	18c34 <__assert_fail@plt+0x68c8>
   18b14:	ldrb	r2, [r4]
   18b18:	sub	r3, r2, #48	; 0x30
   18b1c:	cmp	r3, #9
   18b20:	bhi	18c38 <__assert_fail@plt+0x68cc>
   18b24:	uxtb	r3, r2
   18b28:	uxtb	r7, sl
   18b2c:	cmp	r7, r3
   18b30:	movcc	sl, r2
   18b34:	ldrb	r2, [r4, #1]!
   18b38:	sub	r3, r2, #48	; 0x30
   18b3c:	cmp	r3, #10
   18b40:	bcc	18b24 <__assert_fail@plt+0x67b8>
   18b44:	b	18c38 <__assert_fail@plt+0x68cc>
   18b48:	ldr	ip, [r7, #28]
   18b4c:	ldr	r0, [sp, #60]	; 0x3c
   18b50:	movw	r2, #37736	; 0x9368
   18b54:	movt	r2, #3
   18b58:	sub	r1, r0, #1
   18b5c:	ldrb	r0, [r1, #1]!
   18b60:	ldrb	r0, [r2, r0]
   18b64:	cmp	r0, #0
   18b68:	bne	18b5c <__assert_fail@plt+0x67f0>
   18b6c:	mov	r9, #12
   18b70:	mov	lr, #0
   18b74:	add	r0, r9, lr
   18b78:	lsr	r3, r0, #1
   18b7c:	movw	r0, #37360	; 0x91f0
   18b80:	movt	r0, #3
   18b84:	add	r6, r0, r3, lsl #3
   18b88:	ldr	r5, [r6, #24]
   18b8c:	ldrb	r0, [r5]
   18b90:	cmp	r0, #0
   18b94:	beq	18bf8 <__assert_fail@plt+0x688c>
   18b98:	add	r5, r5, #1
   18b9c:	mov	r4, #0
   18ba0:	ldrb	r2, [r1, r4]
   18ba4:	movw	r7, #38504	; 0x9668
   18ba8:	uxtb	r0, r0
   18bac:	movt	r7, #3
   18bb0:	ldrb	r2, [r7, r2]
   18bb4:	cmp	r2, r0
   18bb8:	bcc	18bd4 <__assert_fail@plt+0x6868>
   18bbc:	bhi	18be4 <__assert_fail@plt+0x6878>
   18bc0:	ldrb	r0, [r5, r4]
   18bc4:	add	r4, r4, #1
   18bc8:	cmp	r0, #0
   18bcc:	bne	18ba0 <__assert_fail@plt+0x6834>
   18bd0:	b	18bf8 <__assert_fail@plt+0x688c>
   18bd4:	mov	r9, r3
   18bd8:	cmp	lr, r9
   18bdc:	bcc	18b74 <__assert_fail@plt+0x6808>
   18be0:	b	18bf0 <__assert_fail@plt+0x6884>
   18be4:	add	lr, r3, #1
   18be8:	cmp	lr, r9
   18bec:	bcc	18b74 <__assert_fail@plt+0x6808>
   18bf0:	mov	r0, #0
   18bf4:	b	18bfc <__assert_fail@plt+0x6890>
   18bf8:	ldr	r0, [r6, #28]
   18bfc:	movw	r6, #39024	; 0x9870
   18c00:	sub	r7, ip, r0
   18c04:	mov	r5, r8
   18c08:	movt	r6, #3
   18c0c:	ldr	r0, [sp, #76]	; 0x4c
   18c10:	cmp	r0, #0
   18c14:	bne	1877c <__assert_fail@plt+0x6410>
   18c18:	b	189a8 <__assert_fail@plt+0x663c>
   18c1c:	movw	r6, #39024	; 0x9870
   18c20:	mov	r9, r2
   18c24:	movt	r6, #3
   18c28:	ldrb	r2, [r6, #2]
   18c2c:	cmp	r5, r2
   18c30:	beq	18b14 <__assert_fail@plt+0x67a8>
   18c34:	mov	r4, r9
   18c38:	uxtb	r2, sl
   18c3c:	mov	sl, #0
   18c40:	mov	ip, #0
   18c44:	cmp	r2, #49	; 0x31
   18c48:	bcc	18c64 <__assert_fail@plt+0x68f8>
   18c4c:	ldrb	r2, [r4]
   18c50:	movw	r3, #33344	; 0x8240
   18c54:	cmp	r8, #45	; 0x2d
   18c58:	movt	r3, #2
   18c5c:	ldrb	ip, [r3, r2]
   18c60:	rsbeq	ip, ip, #0
   18c64:	cmp	lr, #45	; 0x2d
   18c68:	mov	r9, r1
   18c6c:	addeq	r9, r9, #1
   18c70:	mov	r3, r9
   18c74:	ldrb	r4, [r3], #1
   18c78:	sub	r2, r4, #48	; 0x30
   18c7c:	cmp	r2, #9
   18c80:	bhi	18cfc <__assert_fail@plt+0x6990>
   18c84:	ldr	r8, [r6, #12]
   18c88:	mov	sl, #0
   18c8c:	mov	r6, r3
   18c90:	uxtb	r2, r4
   18c94:	uxtb	r3, sl
   18c98:	ldrb	r7, [r6]
   18c9c:	cmp	r3, r2
   18ca0:	mov	r2, r6
   18ca4:	movcc	sl, r4
   18ca8:	cmp	r8, r7
   18cac:	addeq	r2, r9, #2
   18cb0:	mov	r3, r2
   18cb4:	mov	r9, r2
   18cb8:	ldrb	r4, [r3], #1
   18cbc:	sub	r5, r4, #48	; 0x30
   18cc0:	cmp	r5, #10
   18cc4:	bcc	18c8c <__assert_fail@plt+0x6920>
   18cc8:	cmp	r8, r7
   18ccc:	bne	18cf0 <__assert_fail@plt+0x6984>
   18cd0:	movw	r6, #39024	; 0x9870
   18cd4:	sub	r3, r2, #1
   18cd8:	movt	r6, #3
   18cdc:	uxtb	r4, sl
   18ce0:	mov	r2, #0
   18ce4:	cmp	r4, #49	; 0x31
   18ce8:	bcs	18d50 <__assert_fail@plt+0x69e4>
   18cec:	b	18d68 <__assert_fail@plt+0x69fc>
   18cf0:	mov	r9, r6
   18cf4:	movw	r6, #39024	; 0x9870
   18cf8:	movt	r6, #3
   18cfc:	ldrb	r2, [r6, #2]
   18d00:	cmp	r4, r2
   18d04:	bne	18d3c <__assert_fail@plt+0x69d0>
   18d08:	ldrb	r2, [r3]
   18d0c:	sub	r4, r2, #48	; 0x30
   18d10:	cmp	r4, #9
   18d14:	bhi	18d40 <__assert_fail@plt+0x69d4>
   18d18:	uxtb	r4, r2
   18d1c:	uxtb	r5, sl
   18d20:	cmp	r5, r4
   18d24:	movcc	sl, r2
   18d28:	ldrb	r2, [r3, #1]!
   18d2c:	sub	r4, r2, #48	; 0x30
   18d30:	cmp	r4, #10
   18d34:	bcc	18d18 <__assert_fail@plt+0x69ac>
   18d38:	b	18d40 <__assert_fail@plt+0x69d4>
   18d3c:	mov	r3, r9
   18d40:	uxtb	r4, sl
   18d44:	mov	r2, #0
   18d48:	cmp	r4, #49	; 0x31
   18d4c:	bcc	18d68 <__assert_fail@plt+0x69fc>
   18d50:	ldrb	r2, [r3]
   18d54:	movw	r3, #33344	; 0x8240
   18d58:	cmp	lr, #45	; 0x2d
   18d5c:	movt	r3, #2
   18d60:	ldrb	r2, [r3, r2]
   18d64:	rsbeq	r2, r2, #0
   18d68:	ldr	r5, [sp, #4]
   18d6c:	subs	r7, ip, r2
   18d70:	bne	18770 <__assert_fail@plt+0x6404>
   18d74:	b	18760 <__assert_fail@plt+0x63f4>
   18d78:	ldrb	r0, [r5, #27]
   18d7c:	cmp	r0, #0
   18d80:	beq	1905c <__assert_fail@plt+0x6cf0>
   18d84:	movw	r4, #38864	; 0x97d0
   18d88:	ldr	r0, [sp, #16]
   18d8c:	mov	r2, #156	; 0x9c
   18d90:	str	r5, [sp, #4]
   18d94:	movt	r4, #3
   18d98:	mov	r1, r4
   18d9c:	bl	11eec <memcpy@plt>
   18da0:	add	r0, sp, #4080	; 0xff0
   18da4:	mov	r1, r4
   18da8:	mov	r2, #156	; 0x9c
   18dac:	bl	11eec <memcpy@plt>
   18db0:	ldrb	r0, [r6]
   18db4:	cmp	r0, #0
   18db8:	beq	19078 <__assert_fail@plt+0x6d0c>
   18dbc:	ldr	r0, [sp, #68]	; 0x44
   18dc0:	ldr	r8, [sp, #72]	; 0x48
   18dc4:	sub	lr, fp, #3072	; 0xc00
   18dc8:	mov	sl, #4000	; 0xfa0
   18dcc:	mov	r6, r7
   18dd0:	mov	r4, #0
   18dd4:	mov	r1, r0
   18dd8:	add	r0, r7, r0
   18ddc:	str	r0, [sp, #28]
   18de0:	ldr	r0, [sp, #56]	; 0x38
   18de4:	add	r2, r8, r0
   18de8:	add	r0, r1, r0
   18dec:	add	r0, r0, r0, lsl #1
   18df0:	str	r2, [sp, #64]	; 0x40
   18df4:	add	r0, r0, #2
   18df8:	str	r0, [sp, #8]
   18dfc:	sub	r0, lr, #984	; 0x3d8
   18e00:	str	r0, [sp, #40]	; 0x28
   18e04:	mov	r0, #0
   18e08:	str	r0, [sp, #12]
   18e0c:	ldr	r9, [sp, #8]
   18e10:	cmp	sl, r9
   18e14:	bcc	18e60 <__assert_fail@plt+0x6af4>
   18e18:	b	18ee0 <__assert_fail@plt+0x6b74>
   18e1c:	ldr	r7, [sp, #40]	; 0x28
   18e20:	mov	r1, r5
   18e24:	add	r2, sp, #4080	; 0xff0
   18e28:	mov	r0, r7
   18e2c:	bl	1d490 <__assert_fail@plt+0xb124>
   18e30:	ldr	r9, [sp, #24]
   18e34:	ldr	r2, [sp, #16]
   18e38:	add	r7, r7, r5
   18e3c:	mov	r0, r7
   18e40:	mov	r1, r9
   18e44:	bl	1d490 <__assert_fail@plt+0xb124>
   18e48:	ldr	r0, [sp, #12]
   18e4c:	cmp	r0, #0
   18e50:	beq	18e9c <__assert_fail@plt+0x6b30>
   18e54:	ldr	r9, [sp, #8]
   18e58:	cmp	sl, r9
   18e5c:	bcs	18ee0 <__assert_fail@plt+0x6b74>
   18e60:	mov	r0, r4
   18e64:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   18e68:	add	r0, sl, sl, lsl #1
   18e6c:	cmp	r9, r0, lsr #1
   18e70:	lsrls	r9, r0, #1
   18e74:	mov	r0, r9
   18e78:	bl	24f0c <__assert_fail@plt+0x12ba0>
   18e7c:	sub	lr, fp, #3072	; 0xc00
   18e80:	cmp	r0, #0
   18e84:	str	r0, [sp, #20]
   18e88:	mov	r4, r0
   18e8c:	sub	r0, lr, #984	; 0x3d8
   18e90:	movweq	r9, #4000	; 0xfa0
   18e94:	moveq	r4, r0
   18e98:	b	18eec <__assert_fail@plt+0x6b80>
   18e9c:	ldr	r0, [sp, #40]	; 0x28
   18ea0:	cmp	r5, r9
   18ea4:	mov	r2, r9
   18ea8:	mov	r1, r7
   18eac:	movcc	r2, r5
   18eb0:	bl	11f64 <memcmp@plt>
   18eb4:	cmp	r0, #0
   18eb8:	str	r0, [sp, #12]
   18ebc:	bne	18e54 <__assert_fail@plt+0x6ae8>
   18ec0:	cmp	r5, r9
   18ec4:	mov	r0, #0
   18ec8:	movwhi	r0, #1
   18ecc:	subcc	r0, r0, #1
   18ed0:	str	r0, [sp, #12]
   18ed4:	ldr	r9, [sp, #8]
   18ed8:	cmp	sl, r9
   18edc:	bcc	18e60 <__assert_fail@plt+0x6af4>
   18ee0:	str	r4, [sp, #20]
   18ee4:	ldr	r4, [sp, #40]	; 0x28
   18ee8:	mov	r9, sl
   18eec:	ldr	r0, [sp, #64]	; 0x40
   18ef0:	mov	r7, #0
   18ef4:	mov	r5, #0
   18ef8:	cmp	r8, r0
   18efc:	bcs	18f14 <__assert_fail@plt+0x6ba8>
   18f00:	mov	r0, r4
   18f04:	mov	r1, r8
   18f08:	mov	r2, r9
   18f0c:	bl	19f94 <__assert_fail@plt+0x7c28>
   18f10:	add	r5, r0, #1
   18f14:	ldr	r0, [sp, #28]
   18f18:	cmp	r6, r0
   18f1c:	bcs	18f44 <__assert_fail@plt+0x6bd8>
   18f20:	cmp	r9, r5
   18f24:	mov	r1, #0
   18f28:	mov	r0, #0
   18f2c:	sub	r2, r9, r5
   18f30:	movcc	r2, r1
   18f34:	addcs	r0, r4, r5
   18f38:	mov	r1, r6
   18f3c:	bl	19f94 <__assert_fail@plt+0x7c28>
   18f40:	add	r7, r0, #1
   18f44:	add	sl, r7, r5
   18f48:	str	r4, [sp, #40]	; 0x28
   18f4c:	str	r7, [sp, #24]
   18f50:	cmp	sl, r9
   18f54:	bhi	18f78 <__assert_fail@plt+0x6c0c>
   18f58:	cmp	r9, r5
   18f5c:	bcc	18f78 <__assert_fail@plt+0x6c0c>
   18f60:	ldr	r4, [sp, #20]
   18f64:	mov	sl, r9
   18f68:	ldr	r0, [sp, #64]	; 0x40
   18f6c:	cmp	r8, r0
   18f70:	bcc	18fe8 <__assert_fail@plt+0x6c7c>
   18f74:	b	18ff8 <__assert_fail@plt+0x6c8c>
   18f78:	ldr	r0, [sp, #20]
   18f7c:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   18f80:	movw	r1, #21845	; 0x5555
   18f84:	add	r0, sl, sl, lsl #1
   18f88:	movt	r1, #21845	; 0x5555
   18f8c:	cmp	sl, r1
   18f90:	lsrcc	sl, r0, #1
   18f94:	mov	r0, sl
   18f98:	bl	23914 <__assert_fail@plt+0x115a8>
   18f9c:	mov	r4, r0
   18fa0:	ldr	r0, [sp, #64]	; 0x40
   18fa4:	cmp	r8, r0
   18fa8:	bcs	18fbc <__assert_fail@plt+0x6c50>
   18fac:	mov	r0, r4
   18fb0:	mov	r1, r8
   18fb4:	mov	r2, r5
   18fb8:	bl	1218c <strxfrm@plt>
   18fbc:	ldr	r0, [sp, #28]
   18fc0:	cmp	r6, r0
   18fc4:	bcs	18fd8 <__assert_fail@plt+0x6c6c>
   18fc8:	ldr	r2, [sp, #24]
   18fcc:	add	r0, r4, r5
   18fd0:	mov	r1, r6
   18fd4:	bl	1218c <strxfrm@plt>
   18fd8:	str	r4, [sp, #40]	; 0x28
   18fdc:	ldr	r0, [sp, #64]	; 0x40
   18fe0:	cmp	r8, r0
   18fe4:	bcs	18ff8 <__assert_fail@plt+0x6c8c>
   18fe8:	mov	r0, r8
   18fec:	bl	12174 <strlen@plt>
   18ff0:	add	r0, r0, r8
   18ff4:	add	r8, r0, #1
   18ff8:	ldr	r0, [sp, #28]
   18ffc:	cmp	r6, r0
   19000:	bcs	19030 <__assert_fail@plt+0x6cc4>
   19004:	mov	r0, r6
   19008:	bl	12174 <strlen@plt>
   1900c:	add	r0, r0, r6
   19010:	add	r6, r0, #1
   19014:	ldr	r0, [sp, #64]	; 0x40
   19018:	cmp	r8, r0
   1901c:	bcc	18e1c <__assert_fail@plt+0x6ab0>
   19020:	ldr	r0, [sp, #28]
   19024:	cmp	r6, r0
   19028:	bcc	18e1c <__assert_fail@plt+0x6ab0>
   1902c:	b	19040 <__assert_fail@plt+0x6cd4>
   19030:	ldr	r0, [sp, #64]	; 0x40
   19034:	cmp	r8, r0
   19038:	bcs	19020 <__assert_fail@plt+0x6cb4>
   1903c:	b	18e1c <__assert_fail@plt+0x6ab0>
   19040:	ldr	sl, [sp, #40]	; 0x28
   19044:	ldr	r9, [sp, #24]
   19048:	movw	r6, #39024	; 0x9870
   1904c:	str	r4, [sp, #20]
   19050:	movt	r6, #3
   19054:	add	r8, sl, r5
   19058:	b	19098 <__assert_fail@plt+0x6d2c>
   1905c:	ldrb	r0, [r5, #32]
   19060:	cmp	r0, #0
   19064:	beq	19164 <__assert_fail@plt+0x6df8>
   19068:	mov	r0, lr
   1906c:	mov	r1, r7
   19070:	bl	1d794 <__assert_fail@plt+0xb428>
   19074:	b	1876c <__assert_fail@plt+0x6400>
   19078:	ldr	r9, [sp, #68]	; 0x44
   1907c:	ldr	r5, [sp, #56]	; 0x38
   19080:	ldr	sl, [sp, #72]	; 0x48
   19084:	mov	r0, #0
   19088:	mov	r8, r7
   1908c:	str	r0, [sp, #20]
   19090:	mov	r0, #0
   19094:	str	r0, [sp, #12]
   19098:	add	r4, sp, #4080	; 0xff0
   1909c:	mov	r0, sl
   190a0:	mov	r1, r5
   190a4:	mov	r2, r4
   190a8:	bl	1d490 <__assert_fail@plt+0xb124>
   190ac:	sub	lr, fp, #3072	; 0xc00
   190b0:	mov	r0, r4
   190b4:	sub	r4, lr, #1016	; 0x3f8
   190b8:	mov	r1, r4
   190bc:	bl	1c898 <__assert_fail@plt+0xa52c>
   190c0:	ldr	r7, [sp, #16]
   190c4:	mov	r0, r8
   190c8:	mov	r1, r9
   190cc:	str	r9, [sp, #24]
   190d0:	mov	r2, r7
   190d4:	bl	1d490 <__assert_fail@plt+0xb124>
   190d8:	mov	r0, r7
   190dc:	ldr	r7, [sp]
   190e0:	mov	r1, r7
   190e4:	bl	1c898 <__assert_fail@plt+0xa52c>
   190e8:	mov	r0, r4
   190ec:	mov	r1, r7
   190f0:	mov	r2, #16
   190f4:	bl	11f64 <memcmp@plt>
   190f8:	mov	r7, r0
   190fc:	cmp	r0, #0
   19100:	bne	19148 <__assert_fail@plt+0x6ddc>
   19104:	ldr	r7, [sp, #12]
   19108:	cmp	r7, #0
   1910c:	bne	19148 <__assert_fail@plt+0x6ddc>
   19110:	ldr	r2, [sp, #24]
   19114:	mov	r0, sl
   19118:	mov	r1, r8
   1911c:	cmp	r5, r2
   19120:	movcc	r2, r5
   19124:	bl	11f64 <memcmp@plt>
   19128:	mov	r7, r0
   1912c:	cmp	r0, #0
   19130:	bne	19148 <__assert_fail@plt+0x6ddc>
   19134:	ldr	r0, [sp, #24]
   19138:	mov	r7, #0
   1913c:	cmp	r5, r0
   19140:	movwhi	r7, #1
   19144:	subcc	r7, r7, #1
   19148:	ldr	r0, [sp, #20]
   1914c:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   19150:	ldr	r5, [sp, #4]
   19154:	ldr	r0, [sp, #76]	; 0x4c
   19158:	cmp	r0, #0
   1915c:	bne	1877c <__assert_fail@plt+0x6410>
   19160:	b	189a8 <__assert_fail@plt+0x663c>
   19164:	ldr	r0, [sp, #56]	; 0x38
   19168:	cmp	r0, #0
   1916c:	beq	19254 <__assert_fail@plt+0x6ee8>
   19170:	ldr	r2, [sp, #68]	; 0x44
   19174:	cmp	r2, #0
   19178:	beq	19270 <__assert_fail@plt+0x6f04>
   1917c:	add	r1, r0, #1
   19180:	add	r3, r2, #1
   19184:	mov	r0, lr
   19188:	mov	r2, r7
   1918c:	bl	23f84 <__assert_fail@plt+0x11c18>
   19190:	b	1876c <__assert_fail@plt+0x6400>
   19194:	cmp	r8, #0
   19198:	beq	19284 <__assert_fail@plt+0x6f18>
   1919c:	cmp	ip, #0
   191a0:	beq	192e0 <__assert_fail@plt+0x6f74>
   191a4:	mov	r0, #0
   191a8:	ldr	r1, [sp, #68]	; 0x44
   191ac:	cmp	r9, r1
   191b0:	bcs	191d4 <__assert_fail@plt+0x6e68>
   191b4:	ldrb	r1, [r9]
   191b8:	ldrb	r1, [r8, r1]
   191bc:	cmp	r1, #0
   191c0:	beq	191e8 <__assert_fail@plt+0x6e7c>
   191c4:	add	r9, r9, #1
   191c8:	ldr	r1, [sp, #68]	; 0x44
   191cc:	cmp	r9, r1
   191d0:	bcc	191b4 <__assert_fail@plt+0x6e48>
   191d4:	mov	r1, #0
   191d8:	ldr	r2, [sp, #64]	; 0x40
   191dc:	cmp	sl, r2
   191e0:	bcc	191f8 <__assert_fail@plt+0x6e8c>
   191e4:	b	19364 <__assert_fail@plt+0x6ff8>
   191e8:	mov	r1, #1
   191ec:	ldr	r2, [sp, #64]	; 0x40
   191f0:	cmp	sl, r2
   191f4:	bcs	19364 <__assert_fail@plt+0x6ff8>
   191f8:	ldrb	r2, [sl]
   191fc:	ldrb	r3, [r8, r2]
   19200:	cmp	r3, #0
   19204:	beq	1921c <__assert_fail@plt+0x6eb0>
   19208:	add	sl, sl, #1
   1920c:	ldr	r2, [sp, #64]	; 0x40
   19210:	cmp	sl, r2
   19214:	bcc	191f8 <__assert_fail@plt+0x6e8c>
   19218:	b	19364 <__assert_fail@plt+0x6ff8>
   1921c:	cmp	r1, #0
   19220:	beq	19360 <__assert_fail@plt+0x6ff4>
   19224:	ldrb	r1, [r9]
   19228:	ldrb	r0, [ip, r2]
   1922c:	ldrb	r1, [ip, r1]
   19230:	subs	r7, r1, r0
   19234:	bne	193d8 <__assert_fail@plt+0x706c>
   19238:	add	sl, sl, #1
   1923c:	add	r9, r9, #1
   19240:	mov	r0, #0
   19244:	ldr	r1, [sp, #68]	; 0x44
   19248:	cmp	r9, r1
   1924c:	bcc	191b4 <__assert_fail@plt+0x6e48>
   19250:	b	191d4 <__assert_fail@plt+0x6e68>
   19254:	ldr	r7, [sp, #68]	; 0x44
   19258:	cmp	r7, #0
   1925c:	mvnne	r7, #0
   19260:	ldr	r0, [sp, #76]	; 0x4c
   19264:	cmp	r0, #0
   19268:	bne	1877c <__assert_fail@plt+0x6410>
   1926c:	b	189a8 <__assert_fail@plt+0x663c>
   19270:	mov	r7, #1
   19274:	ldr	r0, [sp, #76]	; 0x4c
   19278:	cmp	r0, #0
   1927c:	bne	1877c <__assert_fail@plt+0x6410>
   19280:	b	189a8 <__assert_fail@plt+0x663c>
   19284:	cmp	r3, #0
   19288:	beq	19374 <__assert_fail@plt+0x7008>
   1928c:	cmp	r4, #0
   19290:	beq	193cc <__assert_fail@plt+0x7060>
   19294:	cmp	ip, #0
   19298:	beq	1938c <__assert_fail@plt+0x7020>
   1929c:	ldr	r0, [sp, #64]	; 0x40
   192a0:	cmp	sl, r0
   192a4:	ldrcc	r0, [sp, #68]	; 0x44
   192a8:	cmpcc	r9, r0
   192ac:	bcs	193b4 <__assert_fail@plt+0x7048>
   192b0:	ldrb	r0, [sl], #1
   192b4:	ldrb	r1, [r9], #1
   192b8:	ldrb	r0, [ip, r0]
   192bc:	ldrb	r1, [ip, r1]
   192c0:	subs	r7, r1, r0
   192c4:	beq	1929c <__assert_fail@plt+0x6f30>
   192c8:	b	193d8 <__assert_fail@plt+0x706c>
   192cc:	ldrb	r0, [r9]
   192d0:	subs	r7, r0, r2
   192d4:	bne	193d8 <__assert_fail@plt+0x706c>
   192d8:	add	sl, sl, #1
   192dc:	add	r9, r9, #1
   192e0:	mov	r0, #0
   192e4:	ldr	r1, [sp, #68]	; 0x44
   192e8:	cmp	r9, r1
   192ec:	bcs	19310 <__assert_fail@plt+0x6fa4>
   192f0:	ldrb	r1, [r9]
   192f4:	ldrb	r1, [r8, r1]
   192f8:	cmp	r1, #0
   192fc:	beq	19324 <__assert_fail@plt+0x6fb8>
   19300:	add	r9, r9, #1
   19304:	ldr	r1, [sp, #68]	; 0x44
   19308:	cmp	r9, r1
   1930c:	bcc	192f0 <__assert_fail@plt+0x6f84>
   19310:	mov	r1, #0
   19314:	ldr	r2, [sp, #64]	; 0x40
   19318:	cmp	sl, r2
   1931c:	bcc	19334 <__assert_fail@plt+0x6fc8>
   19320:	b	19364 <__assert_fail@plt+0x6ff8>
   19324:	mov	r1, #1
   19328:	ldr	r2, [sp, #64]	; 0x40
   1932c:	cmp	sl, r2
   19330:	bcs	19364 <__assert_fail@plt+0x6ff8>
   19334:	ldrb	r2, [sl]
   19338:	ldrb	r3, [r8, r2]
   1933c:	cmp	r3, #0
   19340:	beq	19358 <__assert_fail@plt+0x6fec>
   19344:	add	sl, sl, #1
   19348:	ldr	r2, [sp, #64]	; 0x40
   1934c:	cmp	sl, r2
   19350:	bcc	19334 <__assert_fail@plt+0x6fc8>
   19354:	b	19364 <__assert_fail@plt+0x6ff8>
   19358:	cmp	r1, #0
   1935c:	bne	192cc <__assert_fail@plt+0x6f60>
   19360:	mov	r0, #1
   19364:	sub	r7, r1, r0
   19368:	cmp	r7, #0
   1936c:	beq	1878c <__assert_fail@plt+0x6420>
   19370:	b	193d8 <__assert_fail@plt+0x706c>
   19374:	cmp	r4, #0
   19378:	mvnne	r4, #0
   1937c:	mov	r7, r4
   19380:	cmp	r7, #0
   19384:	beq	1878c <__assert_fail@plt+0x6420>
   19388:	b	193d8 <__assert_fail@plt+0x706c>
   1938c:	cmp	r3, r4
   19390:	mov	r2, r4
   19394:	mov	r0, r9
   19398:	mov	r1, sl
   1939c:	mov	r7, r3
   193a0:	movcc	r2, r3
   193a4:	bl	11f64 <memcmp@plt>
   193a8:	mov	r3, r7
   193ac:	cmp	r0, #0
   193b0:	bne	193d4 <__assert_fail@plt+0x7068>
   193b4:	subs	r7, r3, r4
   193b8:	movwne	r7, #1
   193bc:	cmp	r3, r4
   193c0:	bcs	189c8 <__assert_fail@plt+0x665c>
   193c4:	mvn	r7, #0
   193c8:	b	193d8 <__assert_fail@plt+0x706c>
   193cc:	mov	r7, #1
   193d0:	b	193d8 <__assert_fail@plt+0x706c>
   193d4:	mov	r7, r0
   193d8:	ldrb	r0, [r5, #31]
   193dc:	cmp	r0, #0
   193e0:	rsbne	r7, r7, #0
   193e4:	cmp	r7, #0
   193e8:	bne	194ac <__assert_fail@plt+0x7140>
   193ec:	ldrb	r0, [r6, #7]
   193f0:	mov	r7, #0
   193f4:	cmp	r0, #0
   193f8:	bne	194ac <__assert_fail@plt+0x7140>
   193fc:	ldrb	r0, [r6, #6]
   19400:	cmp	r0, #0
   19404:	bne	194ac <__assert_fail@plt+0x7140>
   19408:	ldr	r0, [sp, #44]	; 0x2c
   1940c:	ldr	r3, [r0, #4]
   19410:	ldr	r0, [sp, #48]	; 0x30
   19414:	ldr	r1, [r0, #4]
   19418:	sub	r4, r3, #1
   1941c:	subs	r5, r1, #1
   19420:	beq	19454 <__assert_fail@plt+0x70e8>
   19424:	cmp	r4, #0
   19428:	beq	19464 <__assert_fail@plt+0x70f8>
   1942c:	ldr	r0, [sp, #44]	; 0x2c
   19430:	ldrb	r7, [r6]
   19434:	ldr	r2, [r0]
   19438:	ldr	r0, [sp, #48]	; 0x30
   1943c:	cmp	r7, #0
   19440:	ldr	r0, [r0]
   19444:	beq	1946c <__assert_fail@plt+0x7100>
   19448:	bl	23f84 <__assert_fail@plt+0x11c18>
   1944c:	mov	r7, r0
   19450:	b	194a0 <__assert_fail@plt+0x7134>
   19454:	cmp	r4, #0
   19458:	mvnne	r4, #0
   1945c:	mov	r7, r4
   19460:	b	194a0 <__assert_fail@plt+0x7134>
   19464:	mov	r7, #1
   19468:	b	194a0 <__assert_fail@plt+0x7134>
   1946c:	cmp	r5, r4
   19470:	mov	r3, r4
   19474:	mov	r1, r2
   19478:	movcc	r3, r5
   1947c:	mov	r2, r3
   19480:	bl	11f64 <memcmp@plt>
   19484:	mov	r7, r0
   19488:	cmp	r0, #0
   1948c:	bne	194a0 <__assert_fail@plt+0x7134>
   19490:	subs	r7, r5, r4
   19494:	movwne	r7, #1
   19498:	cmp	r5, r4
   1949c:	mvncc	r7, #0
   194a0:	ldrb	r0, [r6, #9]
   194a4:	cmp	r0, #0
   194a8:	rsbne	r7, r7, #0
   194ac:	mov	r0, r7
   194b0:	sub	sp, fp, #40	; 0x28
   194b4:	vpop	{d8}
   194b8:	add	sp, sp, #4
   194bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   194c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194c4:	add	fp, sp, #28
   194c8:	sub	sp, sp, #4
   194cc:	vpush	{d10-d11}
   194d0:	vpush	{d8}
   194d4:	sub	sp, sp, #48	; 0x30
   194d8:	ldr	r5, [r0]
   194dc:	ldr	r7, [r0, #4]
   194e0:	movw	r9, #39024	; 0x9870
   194e4:	mov	r8, r2
   194e8:	mov	r4, r1
   194ec:	cmp	r2, #0
   194f0:	str	r0, [sp, #12]
   194f4:	movt	r9, #3
   194f8:	add	r6, r5, r7
   194fc:	bne	19588 <__assert_fail@plt+0x721c>
   19500:	ldrb	r0, [r9, #5]
   19504:	cmp	r0, #1
   19508:	bne	19588 <__assert_fail@plt+0x721c>
   1950c:	cmp	r7, #1
   19510:	blt	195d4 <__assert_fail@plt+0x7268>
   19514:	sub	r7, r7, #1
   19518:	ldrb	r0, [r5], #1
   1951c:	cmp	r7, #0
   19520:	ldr	r2, [r4, #24]
   19524:	mov	r1, r0
   19528:	movweq	r1, #10
   1952c:	cmp	r0, #9
   19530:	ldr	r0, [r4, #20]
   19534:	movweq	r1, #62	; 0x3e
   19538:	cmp	r0, r2
   1953c:	bcs	1955c <__assert_fail@plt+0x71f0>
   19540:	add	r2, r0, #1
   19544:	str	r2, [r4, #20]
   19548:	strb	r1, [r0]
   1954c:	sub	r7, r7, #1
   19550:	cmp	r5, r6
   19554:	bcc	19518 <__assert_fail@plt+0x71ac>
   19558:	b	195d4 <__assert_fail@plt+0x7268>
   1955c:	mov	r0, r4
   19560:	bl	12240 <__overflow@plt>
   19564:	cmn	r0, #1
   19568:	bne	1954c <__assert_fail@plt+0x71e0>
   1956c:	movw	r1, #32358	; 0x7e66
   19570:	mov	r0, #0
   19574:	mov	r2, #5
   19578:	movt	r1, #2
   1957c:	bl	11f7c <dcgettext@plt>
   19580:	mov	r1, #0
   19584:	bl	17934 <__assert_fail@plt+0x55c8>
   19588:	ldrb	r0, [r9, #8]
   1958c:	mov	r1, #10
   19590:	mov	r2, r7
   19594:	mov	r3, r4
   19598:	cmp	r0, #0
   1959c:	mov	r0, r5
   195a0:	movwne	r1, #0
   195a4:	strb	r1, [r6, #-1]
   195a8:	mov	r1, #1
   195ac:	bl	11f58 <fwrite_unlocked@plt>
   195b0:	cmp	r0, r7
   195b4:	bne	19cac <__assert_fail@plt+0x7940>
   195b8:	mov	r0, #0
   195bc:	strb	r0, [r6, #-1]
   195c0:	sub	sp, fp, #56	; 0x38
   195c4:	vpop	{d8}
   195c8:	vpop	{d10-d11}
   195cc:	add	sp, sp, #4
   195d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195d4:	ldr	r9, [r9, #20]
   195d8:	movw	sl, #37596	; 0x92dc
   195dc:	vmov.i16	d8, #9	; 0x0009
   195e0:	vmov.i32	q5, #1	; 0x00000001
   195e4:	movt	sl, #3
   195e8:	ldr	r0, [sp, #12]
   195ec:	cmp	r9, #0
   195f0:	str	r9, [sp, #16]
   195f4:	ldr	r7, [r0]
   195f8:	ldr	r5, [r0, #4]
   195fc:	add	r0, r7, r5
   19600:	sub	r6, r0, #1
   19604:	beq	196d4 <__assert_fail@plt+0x7368>
   19608:	ldr	r4, [r9]
   1960c:	mov	r8, r7
   19610:	cmn	r4, #1
   19614:	beq	1962c <__assert_fail@plt+0x72c0>
   19618:	mov	r0, r7
   1961c:	mov	r1, r5
   19620:	mov	r2, r9
   19624:	bl	19e28 <__assert_fail@plt+0x7abc>
   19628:	mov	r8, r0
   1962c:	ldr	r0, [r9, #8]
   19630:	cmn	r0, #1
   19634:	beq	1964c <__assert_fail@plt+0x72e0>
   19638:	mov	r0, r7
   1963c:	mov	r1, r5
   19640:	mov	r2, r9
   19644:	bl	19cc8 <__assert_fail@plt+0x795c>
   19648:	mov	r6, r0
   1964c:	ldrb	r0, [r9, #24]
   19650:	cmp	r0, #0
   19654:	beq	19660 <__assert_fail@plt+0x72f4>
   19658:	cmn	r4, #1
   1965c:	beq	19690 <__assert_fail@plt+0x7324>
   19660:	ldrb	r0, [r9, #30]
   19664:	cmp	r0, #0
   19668:	bne	19690 <__assert_fail@plt+0x7324>
   1966c:	ldrb	r0, [r9, #26]
   19670:	cmp	r0, #0
   19674:	bne	19690 <__assert_fail@plt+0x7324>
   19678:	ldrb	r0, [r9, #28]
   1967c:	cmp	r0, #0
   19680:	bne	19690 <__assert_fail@plt+0x7324>
   19684:	ldrb	r0, [r9, #29]
   19688:	cmp	r0, #0
   1968c:	beq	19c90 <__assert_fail@plt+0x7924>
   19690:	ldrb	lr, [r6]
   19694:	movw	r2, #37736	; 0x9368
   19698:	mov	r0, #0
   1969c:	sub	r8, r8, #1
   196a0:	movt	r2, #3
   196a4:	strb	r0, [r6]
   196a8:	mov	r0, r8
   196ac:	ldrb	r1, [r8, #1]!
   196b0:	ldrb	r1, [r2, r1]
   196b4:	cmp	r1, #0
   196b8:	bne	196a8 <__assert_fail@plt+0x733c>
   196bc:	cmp	r6, r8
   196c0:	str	r8, [sp, #44]	; 0x2c
   196c4:	bcs	196e0 <__assert_fail@plt+0x7374>
   196c8:	mov	r9, r6
   196cc:	str	r6, [sp, #44]	; 0x2c
   196d0:	b	19890 <__assert_fail@plt+0x7524>
   196d4:	mov	r9, r6
   196d8:	mov	r8, r7
   196dc:	b	19894 <__assert_fail@plt+0x7528>
   196e0:	ldrb	r1, [r9, #30]
   196e4:	str	r6, [sp, #8]
   196e8:	movw	r6, #38504	; 0x9668
   196ec:	movt	r6, #3
   196f0:	cmp	r1, #0
   196f4:	beq	19790 <__assert_fail@plt+0x7424>
   196f8:	ldrb	r1, [r0, #1]!
   196fc:	ldrb	r1, [r2, r1]
   19700:	cmp	r1, #0
   19704:	bne	196f8 <__assert_fail@plt+0x738c>
   19708:	mov	r2, #12
   1970c:	mov	ip, #0
   19710:	movw	r1, #37360	; 0x91f0
   19714:	add	r3, r2, ip
   19718:	movt	r1, #3
   1971c:	lsr	r3, r3, #1
   19720:	add	r5, r1, r3, lsl #3
   19724:	ldr	r5, [r5, #24]
   19728:	ldrb	r4, [r5]
   1972c:	cmp	r4, #0
   19730:	beq	19884 <__assert_fail@plt+0x7518>
   19734:	add	r5, r5, #1
   19738:	mov	r9, r0
   1973c:	ldrb	r1, [r9]
   19740:	uxtb	r4, r4
   19744:	ldrb	r1, [r6, r1]
   19748:	cmp	r1, r4
   1974c:	bcc	19768 <__assert_fail@plt+0x73fc>
   19750:	bhi	19778 <__assert_fail@plt+0x740c>
   19754:	ldrb	r4, [r5], #1
   19758:	add	r9, r9, #1
   1975c:	cmp	r4, #0
   19760:	bne	1973c <__assert_fail@plt+0x73d0>
   19764:	b	19888 <__assert_fail@plt+0x751c>
   19768:	mov	r2, r3
   1976c:	cmp	ip, r2
   19770:	bcc	19710 <__assert_fail@plt+0x73a4>
   19774:	b	19784 <__assert_fail@plt+0x7418>
   19778:	add	ip, r3, #1
   1977c:	cmp	ip, r2
   19780:	bcc	19710 <__assert_fail@plt+0x73a4>
   19784:	ldr	r6, [sp, #8]
   19788:	mov	r9, r8
   1978c:	b	19890 <__assert_fail@plt+0x7524>
   19790:	ldrb	r0, [r9, #28]
   19794:	cmp	r0, #0
   19798:	beq	197bc <__assert_fail@plt+0x7450>
   1979c:	mov	r0, r8
   197a0:	add	r1, sp, #44	; 0x2c
   197a4:	mov	r4, lr
   197a8:	bl	11f40 <strtold@plt>
   197ac:	ldr	r9, [sp, #44]	; 0x2c
   197b0:	ldr	r6, [sp, #8]
   197b4:	mov	lr, r4
   197b8:	b	19890 <__assert_fail@plt+0x7524>
   197bc:	ldrb	r0, [r9, #26]
   197c0:	ldr	r6, [sp, #8]
   197c4:	cmp	r0, #0
   197c8:	bne	197d8 <__assert_fail@plt+0x746c>
   197cc:	ldrb	r0, [r9, #29]
   197d0:	cmp	r0, #0
   197d4:	beq	196c8 <__assert_fail@plt+0x735c>
   197d8:	mov	r9, #0
   197dc:	cmp	r8, r6
   197e0:	mov	r1, #0
   197e4:	str	lr, [sp, #4]
   197e8:	bcs	197fc <__assert_fail@plt+0x7490>
   197ec:	ldrb	r1, [r8]
   197f0:	sub	r1, r1, #45	; 0x2d
   197f4:	clz	r1, r1
   197f8:	lsr	r1, r1, #5
   197fc:	mov	lr, r8
   19800:	ldrb	r2, [lr, r1]!
   19804:	add	r5, lr, #1
   19808:	sub	r1, r2, #48	; 0x30
   1980c:	cmp	r1, #9
   19810:	bhi	19bdc <__assert_fail@plt+0x7870>
   19814:	movw	r0, #39024	; 0x9870
   19818:	mov	r9, #0
   1981c:	movt	r0, #3
   19820:	ldr	ip, [r0, #12]
   19824:	uxtb	r1, r2
   19828:	uxtb	r4, r9
   1982c:	mov	r3, r5
   19830:	cmp	r4, r1
   19834:	ldrb	r4, [r5]
   19838:	mov	r1, r5
   1983c:	movcc	r9, r2
   19840:	cmp	ip, r4
   19844:	addeq	r1, lr, #2
   19848:	mov	r5, r1
   1984c:	mov	lr, r1
   19850:	ldrb	r2, [r5], #1
   19854:	sub	r0, r2, #48	; 0x30
   19858:	cmp	r0, #10
   1985c:	bcc	19824 <__assert_fail@plt+0x74b8>
   19860:	cmp	ip, r4
   19864:	bne	19bd8 <__assert_fail@plt+0x786c>
   19868:	ldr	lr, [sp, #4]
   1986c:	sub	r5, r1, #1
   19870:	uxtb	r0, r9
   19874:	mov	r9, r8
   19878:	cmp	r0, #48	; 0x30
   1987c:	bcc	19890 <__assert_fail@plt+0x7524>
   19880:	b	19c40 <__assert_fail@plt+0x78d4>
   19884:	mov	r9, r0
   19888:	ldr	r6, [sp, #8]
   1988c:	str	r9, [sp, #44]	; 0x2c
   19890:	strb	lr, [r6]
   19894:	sub	r5, r8, r7
   19898:	mov	r0, r7
   1989c:	mov	r2, #0
   198a0:	mov	r1, r5
   198a4:	bl	1f554 <__assert_fail@plt+0xd1e8>
   198a8:	mov	r4, r0
   198ac:	cmp	r8, r7
   198b0:	bls	199a0 <__assert_fail@plt+0x7634>
   198b4:	cmp	r5, #4
   198b8:	bcc	1998c <__assert_fail@plt+0x7620>
   198bc:	mov	r1, #0
   198c0:	bic	ip, r5, #3
   198c4:	mov	r3, #1
   198c8:	vdup.32	q8, r1
   198cc:	subs	r2, ip, #4
   198d0:	add	r3, r3, r2, lsr #2
   198d4:	and	lr, r3, #1
   198d8:	vmov.32	d16[0], r4
   198dc:	beq	19940 <__assert_fail@plt+0x75d4>
   198e0:	sub	r3, r3, lr
   198e4:	mov	r1, #0
   198e8:	add	r0, sp, #36	; 0x24
   198ec:	add	r2, sp, #40	; 0x28
   198f0:	mov	r6, r7
   198f4:	subs	r3, r3, #2
   198f8:	ldr	r4, [r6, r1]!
   198fc:	add	r1, r1, #8
   19900:	str	r4, [sp, #36]	; 0x24
   19904:	ldr	r6, [r6, #4]
   19908:	vld1.32	{d18[0]}, [r0 :32]
   1990c:	str	r6, [sp, #40]	; 0x28
   19910:	vld1.32	{d19[0]}, [r2 :32]
   19914:	vmovl.u8	q10, d18
   19918:	vceq.i16	d20, d20, d8
   1991c:	vmovl.u8	q9, d19
   19920:	vmovl.u16	q10, d20
   19924:	vceq.i16	d18, d18, d8
   19928:	vand	q10, q10, q5
   1992c:	vmovl.u16	q9, d18
   19930:	vadd.i32	q8, q8, q10
   19934:	vand	q9, q9, q5
   19938:	vadd.i32	q8, q8, q9
   1993c:	bne	198f0 <__assert_fail@plt+0x7584>
   19940:	cmp	lr, #0
   19944:	beq	1996c <__assert_fail@plt+0x7600>
   19948:	ldr	r1, [r7, r1]
   1994c:	str	r1, [sp, #32]
   19950:	add	r1, sp, #32
   19954:	vld1.32	{d18[0]}, [r1 :32]
   19958:	vmovl.u8	q9, d18
   1995c:	vceq.i16	d18, d18, d8
   19960:	vmovl.u16	q9, d18
   19964:	vand	q9, q9, q5
   19968:	vadd.i32	q8, q8, q9
   1996c:	vext.8	q9, q8, q8, #8
   19970:	cmp	ip, r5
   19974:	vadd.i32	q8, q8, q9
   19978:	vdup.32	q9, d16[1]
   1997c:	vadd.i32	q8, q8, q9
   19980:	vmov.32	r4, d16[0]
   19984:	beq	199a0 <__assert_fail@plt+0x7634>
   19988:	add	r7, r7, ip
   1998c:	ldrb	r0, [r7], #1
   19990:	cmp	r0, #9
   19994:	addeq	r4, r4, #1
   19998:	cmp	r8, r7
   1999c:	bne	1998c <__assert_fail@plt+0x7620>
   199a0:	sub	r7, r9, r8
   199a4:	mov	r0, r8
   199a8:	mov	r2, #0
   199ac:	mov	r1, r7
   199b0:	bl	1f554 <__assert_fail@plt+0xd1e8>
   199b4:	mov	r6, r0
   199b8:	cmp	r9, r8
   199bc:	bls	19ab0 <__assert_fail@plt+0x7744>
   199c0:	cmp	r7, #4
   199c4:	add	r0, sp, #24
   199c8:	add	r5, sp, #28
   199cc:	bcc	19a9c <__assert_fail@plt+0x7730>
   199d0:	mov	r1, #0
   199d4:	bic	ip, r7, #3
   199d8:	mov	r3, #1
   199dc:	mov	lr, r7
   199e0:	vdup.32	q8, r1
   199e4:	subs	r2, ip, #4
   199e8:	add	r3, r3, r2, lsr #2
   199ec:	and	r2, r3, #1
   199f0:	vmov.32	d16[0], r6
   199f4:	beq	19a50 <__assert_fail@plt+0x76e4>
   199f8:	sub	r3, r3, r2
   199fc:	mov	r1, #0
   19a00:	mov	r7, r8
   19a04:	subs	r3, r3, #2
   19a08:	ldr	r6, [r7, r1]!
   19a0c:	add	r1, r1, #8
   19a10:	str	r6, [sp, #24]
   19a14:	ldr	r7, [r7, #4]
   19a18:	vld1.32	{d18[0]}, [r0 :32]
   19a1c:	str	r7, [sp, #28]
   19a20:	vld1.32	{d19[0]}, [r5 :32]
   19a24:	vmovl.u8	q10, d18
   19a28:	vceq.i16	d20, d20, d8
   19a2c:	vmovl.u8	q9, d19
   19a30:	vmovl.u16	q10, d20
   19a34:	vceq.i16	d18, d18, d8
   19a38:	vand	q10, q10, q5
   19a3c:	vmovl.u16	q9, d18
   19a40:	vadd.i32	q8, q8, q10
   19a44:	vand	q9, q9, q5
   19a48:	vadd.i32	q8, q8, q9
   19a4c:	bne	19a00 <__assert_fail@plt+0x7694>
   19a50:	cmp	r2, #0
   19a54:	beq	19a7c <__assert_fail@plt+0x7710>
   19a58:	ldr	r1, [r8, r1]
   19a5c:	str	r1, [sp, #20]
   19a60:	add	r1, sp, #20
   19a64:	vld1.32	{d18[0]}, [r1 :32]
   19a68:	vmovl.u8	q9, d18
   19a6c:	vceq.i16	d18, d18, d8
   19a70:	vmovl.u16	q9, d18
   19a74:	vand	q9, q9, q5
   19a78:	vadd.i32	q8, q8, q9
   19a7c:	vext.8	q9, q8, q8, #8
   19a80:	cmp	ip, lr
   19a84:	vadd.i32	q8, q8, q9
   19a88:	vdup.32	q9, d16[1]
   19a8c:	vadd.i32	q8, q8, q9
   19a90:	vmov.32	r6, d16[0]
   19a94:	beq	19ab0 <__assert_fail@plt+0x7744>
   19a98:	add	r8, r8, ip
   19a9c:	ldrb	r0, [r8], #1
   19aa0:	cmp	r0, #9
   19aa4:	addeq	r6, r6, #1
   19aa8:	cmp	r9, r8
   19aac:	bne	19a9c <__assert_fail@plt+0x7730>
   19ab0:	ldr	r9, [sp, #16]
   19ab4:	cmp	r4, #0
   19ab8:	mov	r5, #32
   19abc:	beq	19b00 <__assert_fail@plt+0x7794>
   19ac0:	ldr	r0, [sl]
   19ac4:	sub	r4, r4, #1
   19ac8:	ldr	r1, [r0, #20]
   19acc:	ldr	r2, [r0, #24]
   19ad0:	cmp	r1, r2
   19ad4:	bcs	19af0 <__assert_fail@plt+0x7784>
   19ad8:	add	r2, r1, #1
   19adc:	str	r2, [r0, #20]
   19ae0:	strb	r5, [r1]
   19ae4:	cmp	r4, #0
   19ae8:	bne	19ac0 <__assert_fail@plt+0x7754>
   19aec:	b	19b00 <__assert_fail@plt+0x7794>
   19af0:	mov	r1, #32
   19af4:	bl	12240 <__overflow@plt>
   19af8:	cmp	r4, #0
   19afc:	bne	19ac0 <__assert_fail@plt+0x7754>
   19b00:	cmp	r6, #0
   19b04:	mov	r4, #95	; 0x5f
   19b08:	beq	19bac <__assert_fail@plt+0x7840>
   19b0c:	ldr	r0, [sl]
   19b10:	ldr	r1, [r0, #20]
   19b14:	ldr	r2, [r0, #24]
   19b18:	cmp	r1, r2
   19b1c:	bcs	19b38 <__assert_fail@plt+0x77cc>
   19b20:	add	r2, r1, #1
   19b24:	str	r2, [r0, #20]
   19b28:	strb	r4, [r1]
   19b2c:	subs	r6, r6, #1
   19b30:	bne	19b0c <__assert_fail@plt+0x77a0>
   19b34:	b	19b48 <__assert_fail@plt+0x77dc>
   19b38:	mov	r1, #95	; 0x5f
   19b3c:	bl	12240 <__overflow@plt>
   19b40:	subs	r6, r6, #1
   19b44:	bne	19b0c <__assert_fail@plt+0x77a0>
   19b48:	ldr	r0, [sl]
   19b4c:	ldr	r1, [r0, #20]
   19b50:	ldr	r2, [r0, #24]
   19b54:	cmp	r1, r2
   19b58:	bcs	19c98 <__assert_fail@plt+0x792c>
   19b5c:	add	r2, r1, #1
   19b60:	str	r2, [r0, #20]
   19b64:	mov	r0, #10
   19b68:	strb	r0, [r1]
   19b6c:	cmp	r9, #0
   19b70:	beq	195c0 <__assert_fail@plt+0x7254>
   19b74:	ldr	r9, [r9, #36]	; 0x24
   19b78:	cmp	r9, #0
   19b7c:	bne	195e8 <__assert_fail@plt+0x727c>
   19b80:	movw	r0, #39024	; 0x9870
   19b84:	movt	r0, #3
   19b88:	ldrb	r0, [r0, #7]
   19b8c:	cmp	r0, #0
   19b90:	bne	195c0 <__assert_fail@plt+0x7254>
   19b94:	movw	r0, #39024	; 0x9870
   19b98:	movt	r0, #3
   19b9c:	ldrb	r0, [r0, #6]
   19ba0:	cmp	r0, #0
   19ba4:	beq	195e8 <__assert_fail@plt+0x727c>
   19ba8:	b	195c0 <__assert_fail@plt+0x7254>
   19bac:	movw	r1, #32371	; 0x7e73
   19bb0:	mov	r0, #0
   19bb4:	mov	r2, #5
   19bb8:	movt	r1, #2
   19bbc:	bl	11f7c <dcgettext@plt>
   19bc0:	mov	r1, r0
   19bc4:	mov	r0, #1
   19bc8:	bl	121d4 <__printf_chk@plt>
   19bcc:	cmp	r9, #0
   19bd0:	bne	19b74 <__assert_fail@plt+0x7808>
   19bd4:	b	195c0 <__assert_fail@plt+0x7254>
   19bd8:	mov	lr, r3
   19bdc:	movw	r0, #39024	; 0x9870
   19be0:	movt	r0, #3
   19be4:	ldrb	r0, [r0, #2]
   19be8:	cmp	r2, r0
   19bec:	bne	19c28 <__assert_fail@plt+0x78bc>
   19bf0:	ldrb	r1, [r5]
   19bf4:	sub	r0, r1, #48	; 0x30
   19bf8:	cmp	r0, #9
   19bfc:	bhi	19c6c <__assert_fail@plt+0x7900>
   19c00:	ldr	lr, [sp, #4]
   19c04:	uxtb	r0, r1
   19c08:	uxtb	r2, r9
   19c0c:	cmp	r2, r0
   19c10:	movcc	r9, r1
   19c14:	ldrb	r1, [r5, #1]!
   19c18:	sub	r0, r1, #48	; 0x30
   19c1c:	cmp	r0, #10
   19c20:	bcc	19c04 <__assert_fail@plt+0x7898>
   19c24:	b	19c30 <__assert_fail@plt+0x78c4>
   19c28:	mov	r5, lr
   19c2c:	ldr	lr, [sp, #4]
   19c30:	uxtb	r0, r9
   19c34:	mov	r9, r8
   19c38:	cmp	r0, #48	; 0x30
   19c3c:	bcc	19890 <__assert_fail@plt+0x7524>
   19c40:	ldr	r0, [sp, #16]
   19c44:	ldrb	r0, [r0, #29]
   19c48:	cmp	r0, #0
   19c4c:	beq	19c84 <__assert_fail@plt+0x7918>
   19c50:	ldrb	r0, [r5]
   19c54:	movw	r1, #33344	; 0x8240
   19c58:	movt	r1, #2
   19c5c:	ldrb	r0, [r1, r0]
   19c60:	cmp	r0, #0
   19c64:	movwne	r0, #1
   19c68:	b	19c88 <__assert_fail@plt+0x791c>
   19c6c:	ldr	lr, [sp, #4]
   19c70:	uxtb	r0, r9
   19c74:	mov	r9, r8
   19c78:	cmp	r0, #48	; 0x30
   19c7c:	bcc	19890 <__assert_fail@plt+0x7524>
   19c80:	b	19c40 <__assert_fail@plt+0x78d4>
   19c84:	mov	r0, #0
   19c88:	add	r9, r5, r0
   19c8c:	b	1988c <__assert_fail@plt+0x7520>
   19c90:	mov	r9, r6
   19c94:	b	19894 <__assert_fail@plt+0x7528>
   19c98:	mov	r1, #10
   19c9c:	bl	12240 <__overflow@plt>
   19ca0:	cmp	r9, #0
   19ca4:	bne	19b74 <__assert_fail@plt+0x7808>
   19ca8:	b	195c0 <__assert_fail@plt+0x7254>
   19cac:	movw	r1, #32358	; 0x7e66
   19cb0:	mov	r0, #0
   19cb4:	mov	r2, #5
   19cb8:	movt	r1, #2
   19cbc:	bl	11f7c <dcgettext@plt>
   19cc0:	mov	r1, r8
   19cc4:	bl	17934 <__assert_fail@plt+0x55c8>
   19cc8:	push	{r4, r5, fp, lr}
   19ccc:	add	fp, sp, #8
   19cd0:	movw	r3, #37360	; 0x91f0
   19cd4:	ldr	ip, [r2, #12]
   19cd8:	ldr	r5, [r2, #8]
   19cdc:	add	r1, r0, r1
   19ce0:	movt	r3, #3
   19ce4:	sub	r1, r1, #1
   19ce8:	ldr	r3, [r3, #4]
   19cec:	cmp	ip, #0
   19cf0:	addeq	r5, r5, #1
   19cf4:	cmp	r3, #256	; 0x100
   19cf8:	bne	19d18 <__assert_fail@plt+0x79ac>
   19cfc:	cmp	r1, r0
   19d00:	bls	19e1c <__assert_fail@plt+0x7ab0>
   19d04:	movw	lr, #37736	; 0x9368
   19d08:	movt	lr, #3
   19d0c:	cmp	r5, #0
   19d10:	bne	19d38 <__assert_fail@plt+0x79cc>
   19d14:	b	19e1c <__assert_fail@plt+0x7ab0>
   19d18:	cmp	r1, r0
   19d1c:	bhi	19dec <__assert_fail@plt+0x7a80>
   19d20:	b	19e1c <__assert_fail@plt+0x7ab0>
   19d24:	sub	r5, r5, #1
   19d28:	cmp	r0, r1
   19d2c:	bcs	19e1c <__assert_fail@plt+0x7ab0>
   19d30:	cmp	r5, #0
   19d34:	beq	19e1c <__assert_fail@plt+0x7ab0>
   19d38:	cmp	r0, r1
   19d3c:	bcs	19d60 <__assert_fail@plt+0x79f4>
   19d40:	ldrb	r3, [r0]
   19d44:	ldrb	r3, [lr, r3]
   19d48:	cmp	r3, #0
   19d4c:	beq	19d60 <__assert_fail@plt+0x79f4>
   19d50:	add	r0, r0, #1
   19d54:	cmp	r1, r0
   19d58:	bne	19d40 <__assert_fail@plt+0x79d4>
   19d5c:	b	19d84 <__assert_fail@plt+0x7a18>
   19d60:	cmp	r0, r1
   19d64:	bcs	19d24 <__assert_fail@plt+0x79b8>
   19d68:	ldrb	r3, [r0]
   19d6c:	ldrb	r3, [lr, r3]
   19d70:	cmp	r3, #0
   19d74:	bne	19d24 <__assert_fail@plt+0x79b8>
   19d78:	add	r0, r0, #1
   19d7c:	cmp	r1, r0
   19d80:	bne	19d68 <__assert_fail@plt+0x79fc>
   19d84:	mov	r0, r1
   19d88:	cmp	ip, #0
   19d8c:	beq	19e24 <__assert_fail@plt+0x7ab8>
   19d90:	ldrb	r2, [r2, #25]
   19d94:	cmp	r2, #0
   19d98:	beq	19dcc <__assert_fail@plt+0x7a60>
   19d9c:	cmp	r0, r1
   19da0:	bcs	19dcc <__assert_fail@plt+0x7a60>
   19da4:	movw	r2, #37736	; 0x9368
   19da8:	movt	r2, #3
   19dac:	ldrb	r3, [r0]
   19db0:	ldrb	r3, [r2, r3]
   19db4:	cmp	r3, #0
   19db8:	beq	19dcc <__assert_fail@plt+0x7a60>
   19dbc:	add	r0, r0, #1
   19dc0:	cmp	r1, r0
   19dc4:	bne	19dac <__assert_fail@plt+0x7a40>
   19dc8:	mov	r0, r1
   19dcc:	add	r0, r0, ip
   19dd0:	cmp	r1, r0
   19dd4:	movcc	r0, r1
   19dd8:	pop	{r4, r5, fp, pc}
   19ddc:	orrs	r4, r5, ip
   19de0:	addne	r0, r0, #1
   19de4:	cmp	r0, r1
   19de8:	bcs	19e1c <__assert_fail@plt+0x7ab0>
   19dec:	cmp	r5, #0
   19df0:	beq	19e1c <__assert_fail@plt+0x7ab0>
   19df4:	sub	r5, r5, #1
   19df8:	cmp	r0, r1
   19dfc:	bcs	19de4 <__assert_fail@plt+0x7a78>
   19e00:	ldrb	r4, [r0]
   19e04:	cmp	r3, r4
   19e08:	beq	19ddc <__assert_fail@plt+0x7a70>
   19e0c:	add	r0, r0, #1
   19e10:	cmp	r1, r0
   19e14:	bne	19e00 <__assert_fail@plt+0x7a94>
   19e18:	mov	r0, r1
   19e1c:	cmp	ip, #0
   19e20:	bne	19d90 <__assert_fail@plt+0x7a24>
   19e24:	pop	{r4, r5, fp, pc}
   19e28:	push	{r4, r5, r6, sl, fp, lr}
   19e2c:	add	fp, sp, #16
   19e30:	add	r4, r0, r1
   19e34:	movw	r1, #37360	; 0x91f0
   19e38:	ldm	r2, {r3, ip}
   19e3c:	movt	r1, #3
   19e40:	sub	lr, r4, #1
   19e44:	ldr	r1, [r1, #4]
   19e48:	cmp	r1, #256	; 0x100
   19e4c:	bne	19ec8 <__assert_fail@plt+0x7b5c>
   19e50:	cmp	lr, r0
   19e54:	bls	19f48 <__assert_fail@plt+0x7bdc>
   19e58:	movw	r1, #37736	; 0x9368
   19e5c:	movt	r1, #3
   19e60:	cmp	r3, #0
   19e64:	beq	19f48 <__assert_fail@plt+0x7bdc>
   19e68:	cmp	r0, lr
   19e6c:	bcs	19e90 <__assert_fail@plt+0x7b24>
   19e70:	ldrb	r4, [r0]
   19e74:	ldrb	r4, [r1, r4]
   19e78:	cmp	r4, #0
   19e7c:	beq	19e90 <__assert_fail@plt+0x7b24>
   19e80:	add	r0, r0, #1
   19e84:	cmp	lr, r0
   19e88:	bne	19e70 <__assert_fail@plt+0x7b04>
   19e8c:	b	19f80 <__assert_fail@plt+0x7c14>
   19e90:	cmp	r0, lr
   19e94:	bcs	19eb8 <__assert_fail@plt+0x7b4c>
   19e98:	ldrb	r4, [r0]
   19e9c:	ldrb	r4, [r1, r4]
   19ea0:	cmp	r4, #0
   19ea4:	bne	19eb8 <__assert_fail@plt+0x7b4c>
   19ea8:	add	r0, r0, #1
   19eac:	cmp	lr, r0
   19eb0:	bne	19e98 <__assert_fail@plt+0x7b2c>
   19eb4:	b	19f80 <__assert_fail@plt+0x7c14>
   19eb8:	sub	r3, r3, #1
   19ebc:	cmp	r0, lr
   19ec0:	bcc	19e60 <__assert_fail@plt+0x7af4>
   19ec4:	b	19f48 <__assert_fail@plt+0x7bdc>
   19ec8:	cmp	lr, r0
   19ecc:	bls	19f48 <__assert_fail@plt+0x7bdc>
   19ed0:	sub	r4, r4, #2
   19ed4:	cmp	r3, #0
   19ed8:	bne	19f0c <__assert_fail@plt+0x7ba0>
   19edc:	b	19f48 <__assert_fail@plt+0x7bdc>
   19ee0:	mov	r0, lr
   19ee4:	cmp	r5, lr
   19ee8:	mov	r5, #0
   19eec:	movwcc	r5, #1
   19ef0:	cmp	r5, #0
   19ef4:	addne	r0, r0, #1
   19ef8:	sub	r3, r3, #1
   19efc:	cmp	r0, lr
   19f00:	bcs	19f48 <__assert_fail@plt+0x7bdc>
   19f04:	cmp	r3, #0
   19f08:	beq	19f48 <__assert_fail@plt+0x7bdc>
   19f0c:	cmp	r0, lr
   19f10:	bcs	19ef8 <__assert_fail@plt+0x7b8c>
   19f14:	ldrb	r6, [r0]
   19f18:	mov	r5, #1
   19f1c:	cmp	r1, r6
   19f20:	beq	19ef0 <__assert_fail@plt+0x7b84>
   19f24:	add	r5, r0, #1
   19f28:	cmp	r4, r0
   19f2c:	beq	19ee0 <__assert_fail@plt+0x7b74>
   19f30:	ldrb	r0, [r0, #1]
   19f34:	cmp	r1, r0
   19f38:	mov	r0, r5
   19f3c:	bne	19f24 <__assert_fail@plt+0x7bb8>
   19f40:	mov	r0, r5
   19f44:	b	19ee4 <__assert_fail@plt+0x7b78>
   19f48:	ldrb	r1, [r2, #24]
   19f4c:	cmp	r1, #0
   19f50:	beq	19f84 <__assert_fail@plt+0x7c18>
   19f54:	cmp	r0, lr
   19f58:	bcs	19f84 <__assert_fail@plt+0x7c18>
   19f5c:	movw	r1, #37736	; 0x9368
   19f60:	movt	r1, #3
   19f64:	ldrb	r2, [r0]
   19f68:	ldrb	r2, [r1, r2]
   19f6c:	cmp	r2, #0
   19f70:	beq	19f84 <__assert_fail@plt+0x7c18>
   19f74:	add	r0, r0, #1
   19f78:	cmp	lr, r0
   19f7c:	bne	19f64 <__assert_fail@plt+0x7bf8>
   19f80:	mov	r0, lr
   19f84:	add	r0, r0, ip
   19f88:	cmp	lr, r0
   19f8c:	movcc	r0, lr
   19f90:	pop	{r4, r5, r6, sl, fp, pc}
   19f94:	push	{r4, r5, r6, r7, fp, lr}
   19f98:	add	fp, sp, #16
   19f9c:	mov	r5, r2
   19fa0:	mov	r4, r1
   19fa4:	mov	r6, r0
   19fa8:	bl	12198 <__errno_location@plt>
   19fac:	mov	r7, r0
   19fb0:	mov	r0, #0
   19fb4:	mov	r1, r4
   19fb8:	mov	r2, r5
   19fbc:	str	r0, [r7]
   19fc0:	mov	r0, r6
   19fc4:	bl	1218c <strxfrm@plt>
   19fc8:	ldr	r5, [r7]
   19fcc:	cmp	r5, #0
   19fd0:	popeq	{r4, r5, r6, r7, fp, pc}
   19fd4:	movw	r1, #32255	; 0x7dff
   19fd8:	mov	r0, #0
   19fdc:	mov	r2, #5
   19fe0:	movt	r1, #2
   19fe4:	bl	11f7c <dcgettext@plt>
   19fe8:	mov	r2, r0
   19fec:	mov	r0, #0
   19ff0:	mov	r1, r5
   19ff4:	bl	120a8 <error@plt>
   19ff8:	movw	r1, #32284	; 0x7e1c
   19ffc:	mov	r0, #0
   1a000:	mov	r2, #5
   1a004:	movt	r1, #2
   1a008:	bl	11f7c <dcgettext@plt>
   1a00c:	mov	r2, r0
   1a010:	mov	r0, #0
   1a014:	mov	r1, #0
   1a018:	bl	120a8 <error@plt>
   1a01c:	movw	r1, #32326	; 0x7e46
   1a020:	mov	r0, #0
   1a024:	mov	r2, #5
   1a028:	movt	r1, #2
   1a02c:	bl	11f7c <dcgettext@plt>
   1a030:	mov	r5, r0
   1a034:	mov	r0, #0
   1a038:	mov	r1, #8
   1a03c:	mov	r2, r4
   1a040:	bl	21ae0 <__assert_fail@plt+0xf774>
   1a044:	mov	r3, r0
   1a048:	mov	r0, #2
   1a04c:	mov	r1, #0
   1a050:	mov	r2, r5
   1a054:	bl	120a8 <error@plt>
   1a058:	cmp	r0, r1
   1a05c:	bxeq	lr
   1a060:	push	{r4, sl, fp, lr}
   1a064:	add	fp, sp, #8
   1a068:	mov	r4, r0
   1a06c:	bl	11fac <dup2@plt>
   1a070:	mov	r0, r4
   1a074:	pop	{r4, sl, fp, lr}
   1a078:	b	12354 <close@plt>
   1a07c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a080:	add	fp, sp, #28
   1a084:	sub	sp, sp, #28
   1a088:	mov	r9, r0
   1a08c:	mov	r6, r1
   1a090:	mov	r0, r1
   1a094:	mov	r1, #4
   1a098:	mov	r4, r2
   1a09c:	bl	239e4 <__assert_fail@plt+0x11678>
   1a0a0:	cmp	r6, #0
   1a0a4:	str	r0, [r4]
   1a0a8:	beq	1a2d8 <__assert_fail@plt+0x7f6c>
   1a0ac:	movw	r5, #30798	; 0x784e
   1a0b0:	mov	r7, r0
   1a0b4:	mov	r4, #0
   1a0b8:	str	r6, [sp, #12]
   1a0bc:	str	r9, [sp, #4]
   1a0c0:	str	r0, [sp, #8]
   1a0c4:	movt	r5, #2
   1a0c8:	add	r0, r9, r4, lsl #3
   1a0cc:	ldr	sl, [r0, #4]
   1a0d0:	cmp	sl, #0
   1a0d4:	beq	1a22c <__assert_fail@plt+0x7ec0>
   1a0d8:	ldrb	r0, [sl, #8]
   1a0dc:	cmp	r0, #0
   1a0e0:	beq	1a22c <__assert_fail@plt+0x7ec0>
   1a0e4:	cmp	r0, #1
   1a0e8:	bne	1a120 <__assert_fail@plt+0x7db4>
   1a0ec:	movw	r0, #39024	; 0x9870
   1a0f0:	ldr	r6, [sl, #4]
   1a0f4:	add	r1, sp, #16
   1a0f8:	movt	r0, #3
   1a0fc:	ldr	r0, [r0, #48]	; 0x30
   1a100:	str	r6, [sp, #20]
   1a104:	bl	1ef20 <__assert_fail@plt+0xcbb4>
   1a108:	cmp	r0, #0
   1a10c:	movne	r1, #2
   1a110:	strbne	r1, [r0, #8]
   1a114:	movne	r0, r6
   1a118:	blne	1b28c <__assert_fail@plt+0x8f20>
   1a11c:	ldr	r9, [sp, #4]
   1a120:	add	r0, sl, #9
   1a124:	mov	r1, #0
   1a128:	mov	r8, #0
   1a12c:	bl	120b4 <open64@plt>
   1a130:	cmp	r0, #0
   1a134:	bmi	1a258 <__assert_fail@plt+0x7eec>
   1a138:	mov	r6, r0
   1a13c:	add	r0, sp, #16
   1a140:	mov	r1, #9
   1a144:	bl	1b048 <__assert_fail@plt+0x8cdc>
   1a148:	cmn	r0, #1
   1a14c:	beq	1a278 <__assert_fail@plt+0x7f0c>
   1a150:	cmp	r0, #0
   1a154:	beq	1a2f8 <__assert_fail@plt+0x7f8c>
   1a158:	str	r0, [sl, #4]
   1a15c:	movw	r0, #39024	; 0x9870
   1a160:	movt	r0, #3
   1a164:	ldr	r0, [r0, #48]	; 0x30
   1a168:	cmp	r0, #0
   1a16c:	bne	1a1a8 <__assert_fail@plt+0x7e3c>
   1a170:	movw	r2, #45984	; 0xb3a0
   1a174:	movw	r3, #46000	; 0xb3b0
   1a178:	mov	r0, #0
   1a17c:	mov	r1, #0
   1a180:	movt	r2, #1
   1a184:	movt	r3, #1
   1a188:	str	r0, [sp]
   1a18c:	mov	r0, #47	; 0x2f
   1a190:	bl	1e27c <__assert_fail@plt+0xbf10>
   1a194:	movw	r1, #39024	; 0x9870
   1a198:	cmp	r0, #0
   1a19c:	movt	r1, #3
   1a1a0:	str	r0, [r1, #48]	; 0x30
   1a1a4:	beq	1a34c <__assert_fail@plt+0x7fe0>
   1a1a8:	mov	r1, #1
   1a1ac:	strb	r1, [sl, #8]
   1a1b0:	mov	r1, sl
   1a1b4:	bl	1eed8 <__assert_fail@plt+0xcb6c>
   1a1b8:	cmp	r0, #0
   1a1bc:	beq	1a34c <__assert_fail@plt+0x7fe0>
   1a1c0:	mov	r0, r6
   1a1c4:	bl	12354 <close@plt>
   1a1c8:	ldr	r0, [sp, #20]
   1a1cc:	bl	12354 <close@plt>
   1a1d0:	movw	r5, #30798	; 0x784e
   1a1d4:	ldr	r0, [sp, #16]
   1a1d8:	movt	r5, #2
   1a1dc:	mov	r1, r5
   1a1e0:	bl	11e20 <fdopen@plt>
   1a1e4:	ldr	r6, [sp, #12]
   1a1e8:	mov	r8, r0
   1a1ec:	cmp	r0, #0
   1a1f0:	bne	1a218 <__assert_fail@plt+0x7eac>
   1a1f4:	bl	12198 <__errno_location@plt>
   1a1f8:	mov	r6, r0
   1a1fc:	ldr	r7, [r0]
   1a200:	ldr	r0, [sp, #16]
   1a204:	bl	12354 <close@plt>
   1a208:	str	r7, [r6]
   1a20c:	ldr	r9, [sp, #4]
   1a210:	ldr	r6, [sp, #12]
   1a214:	mov	r8, #0
   1a218:	ldr	r7, [sp, #8]
   1a21c:	cmp	r8, #0
   1a220:	str	r8, [r7, r4, lsl #2]
   1a224:	bne	1a248 <__assert_fail@plt+0x7edc>
   1a228:	b	1a2cc <__assert_fail@plt+0x7f60>
   1a22c:	ldr	r0, [r9, r4, lsl #3]
   1a230:	mov	r1, r5
   1a234:	bl	179a8 <__assert_fail@plt+0x563c>
   1a238:	mov	r8, r0
   1a23c:	cmp	r8, #0
   1a240:	str	r8, [r7, r4, lsl #2]
   1a244:	beq	1a2cc <__assert_fail@plt+0x7f60>
   1a248:	add	r4, r4, #1
   1a24c:	cmp	r6, r4
   1a250:	bne	1a0c8 <__assert_fail@plt+0x7d5c>
   1a254:	b	1a2e8 <__assert_fail@plt+0x7f7c>
   1a258:	ldr	r6, [sp, #12]
   1a25c:	ldr	r7, [sp, #8]
   1a260:	movw	r5, #30798	; 0x784e
   1a264:	movt	r5, #2
   1a268:	cmp	r8, #0
   1a26c:	str	r8, [r7, r4, lsl #2]
   1a270:	bne	1a248 <__assert_fail@plt+0x7edc>
   1a274:	b	1a2cc <__assert_fail@plt+0x7f60>
   1a278:	movw	r5, #39024	; 0x9870
   1a27c:	movt	r5, #3
   1a280:	mov	r8, r5
   1a284:	bl	12198 <__errno_location@plt>
   1a288:	ldr	r5, [r0]
   1a28c:	cmp	r5, #24
   1a290:	bne	1a350 <__assert_fail@plt+0x7fe4>
   1a294:	mov	r7, r0
   1a298:	mov	r0, r6
   1a29c:	bl	12354 <close@plt>
   1a2a0:	mov	r0, #24
   1a2a4:	ldr	r6, [sp, #12]
   1a2a8:	ldr	r9, [sp, #4]
   1a2ac:	movw	r5, #30798	; 0x784e
   1a2b0:	mov	r8, #0
   1a2b4:	str	r0, [r7]
   1a2b8:	ldr	r7, [sp, #8]
   1a2bc:	movt	r5, #2
   1a2c0:	cmp	r8, #0
   1a2c4:	str	r8, [r7, r4, lsl #2]
   1a2c8:	bne	1a248 <__assert_fail@plt+0x7edc>
   1a2cc:	mov	r0, r4
   1a2d0:	sub	sp, fp, #28
   1a2d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2d8:	mov	r4, #0
   1a2dc:	mov	r0, r4
   1a2e0:	sub	sp, fp, #28
   1a2e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2e8:	mov	r4, r6
   1a2ec:	mov	r0, r4
   1a2f0:	sub	sp, fp, #28
   1a2f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2f8:	ldr	r0, [sp, #16]
   1a2fc:	bl	12354 <close@plt>
   1a300:	mov	r0, r6
   1a304:	mov	r1, #0
   1a308:	bl	1a058 <__assert_fail@plt+0x7cec>
   1a30c:	ldr	r0, [sp, #20]
   1a310:	mov	r1, #1
   1a314:	bl	1a058 <__assert_fail@plt+0x7cec>
   1a318:	movw	r0, #39024	; 0x9870
   1a31c:	movw	r2, #32436	; 0x7eb4
   1a320:	mov	r3, #0
   1a324:	movt	r0, #3
   1a328:	movt	r2, #2
   1a32c:	ldr	r0, [r0, #16]
   1a330:	mov	r1, r0
   1a334:	bl	11ef8 <execlp@plt>
   1a338:	bl	12198 <__errno_location@plt>
   1a33c:	ldr	r0, [r0]
   1a340:	movw	r1, #32439	; 0x7eb7
   1a344:	movt	r1, #2
   1a348:	bl	1b200 <__assert_fail@plt+0x8e94>
   1a34c:	bl	23e50 <__assert_fail@plt+0x11ae4>
   1a350:	movw	r1, #32405	; 0x7e95
   1a354:	mov	r0, #0
   1a358:	mov	r2, #5
   1a35c:	movt	r1, #2
   1a360:	bl	11f7c <dcgettext@plt>
   1a364:	ldr	r1, [r8, #16]
   1a368:	mov	r4, r0
   1a36c:	mov	r0, #4
   1a370:	bl	21b88 <__assert_fail@plt+0xf81c>
   1a374:	mov	r3, r0
   1a378:	mov	r0, #2
   1a37c:	mov	r1, r5
   1a380:	mov	r2, r4
   1a384:	bl	120a8 <error@plt>
   1a388:	nop	{0}
   1a38c:	nop	{0}
   1a390:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a394:	add	fp, sp, #28
   1a398:	sub	sp, sp, #84	; 0x54
   1a39c:	str	r1, [sp, #44]	; 0x2c
   1a3a0:	str	r0, [fp, #-48]	; 0xffffffd0
   1a3a4:	mov	r0, r2
   1a3a8:	mov	r1, #28
   1a3ac:	str	r3, [sp, #32]
   1a3b0:	mov	r9, r2
   1a3b4:	bl	239e4 <__assert_fail@plt+0x11678>
   1a3b8:	str	r0, [fp, #-52]	; 0xffffffcc
   1a3bc:	mov	r0, r9
   1a3c0:	mov	r1, #4
   1a3c4:	bl	239e4 <__assert_fail@plt+0x11678>
   1a3c8:	str	r0, [sp, #56]	; 0x38
   1a3cc:	mov	r0, r9
   1a3d0:	mov	r1, #4
   1a3d4:	bl	239e4 <__assert_fail@plt+0x11678>
   1a3d8:	str	r0, [sp, #48]	; 0x30
   1a3dc:	mov	r0, r9
   1a3e0:	mov	r1, #4
   1a3e4:	bl	239e4 <__assert_fail@plt+0x11678>
   1a3e8:	ldr	sl, [fp, #12]
   1a3ec:	mov	r8, r0
   1a3f0:	mov	r0, #0
   1a3f4:	cmp	r9, #0
   1a3f8:	str	r0, [fp, #-44]	; 0xffffffd4
   1a3fc:	beq	1ad58 <__assert_fail@plt+0x89ec>
   1a400:	movw	r0, #39024	; 0x9870
   1a404:	str	r8, [sp, #52]	; 0x34
   1a408:	movt	r0, #3
   1a40c:	ldr	r0, [r0, #20]
   1a410:	str	r0, [sp, #16]
   1a414:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1a418:	add	r0, r0, #16
   1a41c:	str	r0, [sp, #40]	; 0x28
   1a420:	add	r0, sl, #4
   1a424:	mov	sl, #0
   1a428:	str	r0, [sp, #24]
   1a42c:	b	1a47c <__assert_fail@plt+0x8110>
   1a430:	andeq	r0, r0, r0
   1a434:	andeq	r0, r0, r1
   1a438:	andeq	r0, r0, r2
   1a43c:	andeq	r0, r0, r3
   1a440:	ldr	r0, [r5]
   1a444:	ldr	r1, [r6]
   1a448:	ldr	r2, [sp, #56]	; 0x38
   1a44c:	mov	r9, r8
   1a450:	ldr	r8, [sp, #52]	; 0x34
   1a454:	add	r0, r1, r0
   1a458:	sub	r1, r0, #16
   1a45c:	str	r1, [r2, sl, lsl #2]
   1a460:	ldr	r1, [r7]
   1a464:	sub	r0, r0, r1, lsl #4
   1a468:	ldr	r1, [sp, #48]	; 0x30
   1a46c:	str	r0, [r1, sl, lsl #2]
   1a470:	add	sl, sl, #1
   1a474:	cmp	sl, r9
   1a478:	bcs	1a694 <__assert_fail@plt+0x8328>
   1a47c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1a480:	rsb	r0, sl, sl, lsl #3
   1a484:	add	r6, r1, r0, lsl #2
   1a488:	movw	r0, #39024	; 0x9870
   1a48c:	movw	r1, #37352	; 0x91e8
   1a490:	movt	r0, #3
   1a494:	movt	r1, #3
   1a498:	ldr	r0, [r0, #28]
   1a49c:	ldr	r1, [r1]
   1a4a0:	udiv	r0, r0, r9
   1a4a4:	cmp	r1, r0
   1a4a8:	movhi	r0, r1
   1a4ac:	and	r1, r0, #15
   1a4b0:	sub	r0, r0, r1
   1a4b4:	add	r7, r0, #16
   1a4b8:	mov	r0, r7
   1a4bc:	bl	24f0c <__assert_fail@plt+0x12ba0>
   1a4c0:	cmp	r0, #0
   1a4c4:	str	r0, [r6]
   1a4c8:	bne	1a4dc <__assert_fail@plt+0x8170>
   1a4cc:	lsr	r0, r7, #1
   1a4d0:	cmp	r7, #35	; 0x23
   1a4d4:	bhi	1a4ac <__assert_fail@plt+0x8140>
   1a4d8:	b	1a774 <__assert_fail@plt+0x8408>
   1a4dc:	mov	r5, r6
   1a4e0:	mov	r8, r9
   1a4e4:	ldr	r9, [fp, #-48]	; 0xffffffd0
   1a4e8:	ldr	r4, [fp, #12]
   1a4ec:	mov	r0, #0
   1a4f0:	mov	r1, #16
   1a4f4:	str	r7, [r5, #12]!
   1a4f8:	mov	r7, r5
   1a4fc:	str	r0, [r5, #4]
   1a500:	str	r1, [r5, #8]
   1a504:	strb	r0, [r5, #12]
   1a508:	str	r0, [r5, #-8]
   1a50c:	str	r0, [r7, #-4]!
   1a510:	mov	r0, r6
   1a514:	ldr	r2, [r9, sl, lsl #3]
   1a518:	ldr	r1, [r4, sl, lsl #2]
   1a51c:	bl	17c18 <__assert_fail@plt+0x58ac>
   1a520:	cmp	r0, #0
   1a524:	bne	1a440 <__assert_fail@plt+0x80d4>
   1a528:	ldr	r1, [r9, sl, lsl #3]
   1a52c:	ldr	r0, [r4, sl, lsl #2]
   1a530:	bl	16cd4 <__assert_fail@plt+0x4968>
   1a534:	ldr	r5, [sp, #44]	; 0x2c
   1a538:	cmp	sl, r5
   1a53c:	bcs	1a550 <__assert_fail@plt+0x81e4>
   1a540:	ldr	r0, [r9, sl, lsl #3]
   1a544:	bl	1b3c8 <__assert_fail@plt+0x905c>
   1a548:	sub	r5, r5, #1
   1a54c:	str	r5, [sp, #44]	; 0x2c
   1a550:	ldr	r0, [r6]
   1a554:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   1a558:	sub	r9, r8, #1
   1a55c:	cmp	sl, r9
   1a560:	bcs	1a688 <__assert_fail@plt+0x831c>
   1a564:	mvn	r1, sl
   1a568:	mov	r4, r8
   1a56c:	add	r2, r8, r1
   1a570:	ldr	r8, [sp, #52]	; 0x34
   1a574:	mov	r1, sl
   1a578:	cmp	r2, #2
   1a57c:	bcc	1a5e0 <__assert_fail@plt+0x8274>
   1a580:	ldr	r7, [fp, #-48]	; 0xffffffd0
   1a584:	ldr	r1, [fp, #12]
   1a588:	add	r3, r1, sl, lsl #2
   1a58c:	add	r1, r1, r4, lsl #2
   1a590:	add	r7, r7, sl, lsl #3
   1a594:	cmp	r7, r1
   1a598:	bcs	1a5b0 <__assert_fail@plt+0x8244>
   1a59c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1a5a0:	add	r1, r1, r4, lsl #3
   1a5a4:	cmp	r3, r1
   1a5a8:	mov	r1, sl
   1a5ac:	bcc	1a5e0 <__assert_fail@plt+0x8274>
   1a5b0:	bic	ip, r2, #1
   1a5b4:	add	r1, sl, ip
   1a5b8:	mov	r6, ip
   1a5bc:	add	r5, r7, #8
   1a5c0:	subs	r6, r6, #2
   1a5c4:	vld1.32	{d16-d17}, [r5]
   1a5c8:	vst1.32	{d16-d17}, [r7]!
   1a5cc:	vldr	d16, [r3, #4]
   1a5d0:	vst1.32	{d16}, [r3]!
   1a5d4:	bne	1a5bc <__assert_fail@plt+0x8250>
   1a5d8:	cmp	r2, ip
   1a5dc:	beq	1a474 <__assert_fail@plt+0x8108>
   1a5e0:	mvn	r2, r1
   1a5e4:	add	r3, r4, r2
   1a5e8:	sub	r2, r4, #2
   1a5ec:	tst	r3, #1
   1a5f0:	mov	r3, r1
   1a5f4:	beq	1a624 <__assert_fail@plt+0x82b8>
   1a5f8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1a5fc:	add	r3, r1, #1
   1a600:	mov	r7, r5
   1a604:	ldr	r6, [r7, r3, lsl #3]!
   1a608:	ldr	r7, [r7, #4]
   1a60c:	str	r6, [r5, r1, lsl #3]!
   1a610:	str	r7, [r5, #4]
   1a614:	ldr	r7, [fp, #12]
   1a618:	mov	r6, r7
   1a61c:	ldr	r7, [r7, r3, lsl #2]
   1a620:	str	r7, [r6, r1, lsl #2]
   1a624:	cmp	r2, r1
   1a628:	beq	1a474 <__assert_fail@plt+0x8108>
   1a62c:	ldr	r1, [sp, #40]	; 0x28
   1a630:	ldr	r2, [sp, #24]
   1a634:	add	r1, r1, r3, lsl #3
   1a638:	add	r2, r2, r3, lsl #2
   1a63c:	mvn	r3, r3
   1a640:	add	r3, r3, r4
   1a644:	ldr	r7, [r1, #-8]
   1a648:	ldr	r6, [r1, #-4]
   1a64c:	subs	r3, r3, #2
   1a650:	str	r6, [r1, #-12]
   1a654:	str	r7, [r1, #-16]
   1a658:	ldr	r7, [r2]
   1a65c:	str	r7, [r2, #-4]
   1a660:	ldr	r7, [r1]
   1a664:	ldr	r6, [r1, #4]
   1a668:	str	r6, [r1, #-4]
   1a66c:	str	r7, [r1, #-8]
   1a670:	add	r1, r1, #16
   1a674:	ldr	r7, [r2, #4]
   1a678:	str	r7, [r2]
   1a67c:	add	r2, r2, #8
   1a680:	bne	1a644 <__assert_fail@plt+0x82d8>
   1a684:	b	1a474 <__assert_fail@plt+0x8108>
   1a688:	ldr	r8, [sp, #52]	; 0x34
   1a68c:	cmp	sl, r9
   1a690:	bcc	1a47c <__assert_fail@plt+0x8110>
   1a694:	ldr	sl, [fp, #12]
   1a698:	cmp	r9, #0
   1a69c:	beq	1ad58 <__assert_fail@plt+0x89ec>
   1a6a0:	mov	r0, #0
   1a6a4:	cmp	r9, #3
   1a6a8:	bls	1a780 <__assert_fail@plt+0x8414>
   1a6ac:	bic	r0, r9, #3
   1a6b0:	mov	r1, #1
   1a6b4:	sub	r3, pc, #652	; 0x28c
   1a6b8:	sub	r7, r0, #4
   1a6bc:	add	r2, r1, r7, lsr #2
   1a6c0:	cmp	r7, #12
   1a6c4:	and	r1, r2, #3
   1a6c8:	bcs	1a6e0 <__assert_fail@plt+0x8374>
   1a6cc:	vld1.64	{d16-d17}, [r3 :128]
   1a6d0:	mov	r2, #0
   1a6d4:	cmp	r1, #0
   1a6d8:	bne	1a750 <__assert_fail@plt+0x83e4>
   1a6dc:	b	1a778 <__assert_fail@plt+0x840c>
   1a6e0:	sub	r7, pc, #696	; 0x2b8
   1a6e4:	vmov.i32	q9, #12	; 0x0000000c
   1a6e8:	vmov.i32	q10, #8	; 0x00000008
   1a6ec:	vmov.i32	q11, #4	; 0x00000004
   1a6f0:	vmov.i32	q12, #16	; 0x00000010
   1a6f4:	sub	r3, r2, r1
   1a6f8:	mov	r2, #0
   1a6fc:	mov	r5, r8
   1a700:	mov	r6, r8
   1a704:	vld1.64	{d16-d17}, [r7 :128]
   1a708:	mov	r7, #64	; 0x40
   1a70c:	vadd.i32	q13, q8, q9
   1a710:	add	r4, r5, #48	; 0x30
   1a714:	vadd.i32	q14, q8, q10
   1a718:	vadd.i32	q15, q8, q11
   1a71c:	subs	r3, r3, #4
   1a720:	add	r2, r2, #16
   1a724:	vst1.32	{d26-d27}, [r4]
   1a728:	vst1.32	{d16-d17}, [r6], r7
   1a72c:	vadd.i32	q8, q8, q12
   1a730:	add	r4, r5, #32
   1a734:	add	r5, r5, #16
   1a738:	vst1.32	{d28-d29}, [r4]
   1a73c:	vst1.32	{d30-d31}, [r5]
   1a740:	mov	r5, r6
   1a744:	bne	1a70c <__assert_fail@plt+0x83a0>
   1a748:	cmp	r1, #0
   1a74c:	beq	1a778 <__assert_fail@plt+0x840c>
   1a750:	vmov.i32	q9, #4	; 0x00000004
   1a754:	add	r2, r8, r2, lsl #2
   1a758:	rsb	r1, r1, #0
   1a75c:	vadd.i32	q10, q8, q9
   1a760:	vst1.32	{d16-d17}, [r2]!
   1a764:	adds	r1, r1, #1
   1a768:	vorr	q8, q10, q10
   1a76c:	bcc	1a75c <__assert_fail@plt+0x83f0>
   1a770:	b	1a778 <__assert_fail@plt+0x840c>
   1a774:	bl	23e50 <__assert_fail@plt+0x11ae4>
   1a778:	cmp	r9, r0
   1a77c:	beq	1a78c <__assert_fail@plt+0x8420>
   1a780:	str	r0, [r8, r0, lsl #2]
   1a784:	add	r0, r0, #1
   1a788:	b	1a778 <__assert_fail@plt+0x840c>
   1a78c:	ldr	r2, [sp, #56]	; 0x38
   1a790:	cmp	r9, #2
   1a794:	bcc	1a7e8 <__assert_fail@plt+0x847c>
   1a798:	mov	r6, #1
   1a79c:	b	1a7b0 <__assert_fail@plt+0x8444>
   1a7a0:	ldr	r2, [sp, #56]	; 0x38
   1a7a4:	add	r6, r6, #1
   1a7a8:	cmp	r6, r9
   1a7ac:	bcs	1a7e8 <__assert_fail@plt+0x847c>
   1a7b0:	ldr	r0, [r8, r6, lsl #2]
   1a7b4:	sub	r4, r6, #1
   1a7b8:	ldr	r1, [r2, r0, lsl #2]
   1a7bc:	ldr	r0, [r8, r4, lsl #2]
   1a7c0:	ldr	r0, [r2, r0, lsl #2]
   1a7c4:	bl	17fac <__assert_fail@plt+0x5c40>
   1a7c8:	cmp	r0, #1
   1a7cc:	blt	1a7a0 <__assert_fail@plt+0x8434>
   1a7d0:	ldr	r0, [r8, r4, lsl #2]
   1a7d4:	ldr	r1, [r8, r6, lsl #2]
   1a7d8:	str	r1, [r8, r4, lsl #2]
   1a7dc:	str	r0, [r8, r6, lsl #2]
   1a7e0:	mov	r6, #0
   1a7e4:	b	1a7a0 <__assert_fail@plt+0x8434>
   1a7e8:	cmp	r9, #0
   1a7ec:	beq	1ad58 <__assert_fail@plt+0x89ec>
   1a7f0:	add	r0, r8, #4
   1a7f4:	ldr	r4, [sp, #56]	; 0x38
   1a7f8:	mov	r6, #0
   1a7fc:	str	r9, [sp, #40]	; 0x28
   1a800:	str	r0, [sp, #20]
   1a804:	ldr	r0, [sp, #48]	; 0x30
   1a808:	add	r0, r0, #4
   1a80c:	str	r0, [sp, #12]
   1a810:	add	r0, r4, #4
   1a814:	str	r0, [sp, #8]
   1a818:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1a81c:	add	r0, r0, #28
   1a820:	str	r0, [sp, #4]
   1a824:	mov	r0, #0
   1a828:	str	r0, [sp, #28]
   1a82c:	b	1a848 <__assert_fail@plt+0x84dc>
   1a830:	mov	r5, lr
   1a834:	str	r6, [r8, r5, lsl #2]
   1a838:	ldr	r6, [sp, #36]	; 0x24
   1a83c:	cmp	r9, #0
   1a840:	str	r9, [sp, #40]	; 0x28
   1a844:	beq	1ad20 <__assert_fail@plt+0x89b4>
   1a848:	ldr	r0, [r8]
   1a84c:	ldr	sl, [r4, r0, lsl #2]
   1a850:	movw	r0, #39024	; 0x9870
   1a854:	movt	r0, #3
   1a858:	ldrb	r0, [r0, #7]
   1a85c:	cmp	r0, #1
   1a860:	bne	1a8c8 <__assert_fail@plt+0x855c>
   1a864:	ldr	r0, [sp, #28]
   1a868:	ldr	r7, [fp, #-48]	; 0xffffffd0
   1a86c:	cmp	r0, #0
   1a870:	beq	1a894 <__assert_fail@plt+0x8528>
   1a874:	mov	r1, sl
   1a878:	bl	17fac <__assert_fail@plt+0x5c40>
   1a87c:	cmp	r0, #0
   1a880:	beq	1a8fc <__assert_fail@plt+0x8590>
   1a884:	ldr	r1, [sp, #32]
   1a888:	ldr	r2, [fp, #8]
   1a88c:	sub	r0, fp, #44	; 0x2c
   1a890:	bl	194c0 <__assert_fail@plt+0x7154>
   1a894:	ldr	r2, [sl, #4]
   1a898:	cmp	r6, r2
   1a89c:	bcs	1a8ec <__assert_fail@plt+0x8580>
   1a8a0:	ldr	r5, [fp, #-52]	; 0xffffffcc
   1a8a4:	ldr	r9, [sp, #40]	; 0x28
   1a8a8:	mov	r0, r6
   1a8ac:	cmp	r0, #0
   1a8b0:	beq	1a908 <__assert_fail@plt+0x859c>
   1a8b4:	lsl	r6, r0, #1
   1a8b8:	cmp	r2, r0, lsl #1
   1a8bc:	mov	r0, r6
   1a8c0:	bhi	1a8ac <__assert_fail@plt+0x8540>
   1a8c4:	b	1a90c <__assert_fail@plt+0x85a0>
   1a8c8:	ldr	r1, [sp, #32]
   1a8cc:	ldr	r2, [fp, #8]
   1a8d0:	mov	r0, sl
   1a8d4:	str	r6, [sp, #36]	; 0x24
   1a8d8:	bl	194c0 <__assert_fail@plt+0x7154>
   1a8dc:	ldr	r5, [fp, #-52]	; 0xffffffcc
   1a8e0:	ldr	r7, [fp, #-48]	; 0xffffffd0
   1a8e4:	ldr	r9, [sp, #40]	; 0x28
   1a8e8:	b	1a970 <__assert_fail@plt+0x8604>
   1a8ec:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a8f0:	ldr	r5, [fp, #-52]	; 0xffffffcc
   1a8f4:	ldr	r9, [sp, #40]	; 0x28
   1a8f8:	b	1a924 <__assert_fail@plt+0x85b8>
   1a8fc:	ldr	r5, [fp, #-52]	; 0xffffffcc
   1a900:	str	r6, [sp, #36]	; 0x24
   1a904:	b	1a8e4 <__assert_fail@plt+0x8578>
   1a908:	mov	r6, r2
   1a90c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1a910:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   1a914:	mov	r0, r6
   1a918:	bl	23914 <__assert_fail@plt+0x115a8>
   1a91c:	str	r0, [fp, #-44]	; 0xffffffd4
   1a920:	ldr	r2, [sl, #4]
   1a924:	str	r2, [fp, #-40]	; 0xffffffd8
   1a928:	ldr	r1, [sl]
   1a92c:	bl	11eec <memcpy@plt>
   1a930:	ldr	r0, [sp, #16]
   1a934:	str	r6, [sp, #36]	; 0x24
   1a938:	cmp	r0, #0
   1a93c:	beq	1a968 <__assert_fail@plt+0x85fc>
   1a940:	ldr	r0, [sl]
   1a944:	ldr	r1, [sl, #8]
   1a948:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1a94c:	sub	r1, r1, r0
   1a950:	add	r1, r2, r1
   1a954:	str	r1, [fp, #-36]	; 0xffffffdc
   1a958:	ldr	r1, [sl, #12]
   1a95c:	sub	r0, r1, r0
   1a960:	add	r0, r2, r0
   1a964:	str	r0, [fp, #-32]	; 0xffffffe0
   1a968:	sub	r0, fp, #44	; 0x2c
   1a96c:	str	r0, [sp, #28]
   1a970:	ldr	r6, [r8]
   1a974:	ldr	r0, [sp, #48]	; 0x30
   1a978:	ldr	r0, [r0, r6, lsl #2]
   1a97c:	cmp	r0, sl
   1a980:	bcs	1a9a0 <__assert_fail@plt+0x8634>
   1a984:	sub	r0, sl, #16
   1a988:	ldr	sl, [fp, #12]
   1a98c:	str	r0, [r4, r6, lsl #2]
   1a990:	mov	r5, #0
   1a994:	cmp	r9, #2
   1a998:	bcc	1a834 <__assert_fail@plt+0x84c8>
   1a99c:	b	1a9fc <__assert_fail@plt+0x8690>
   1a9a0:	ldr	sl, [fp, #12]
   1a9a4:	ldr	r2, [r7, r6, lsl #3]
   1a9a8:	rsb	r0, r6, r6, lsl #3
   1a9ac:	add	r0, r5, r0, lsl #2
   1a9b0:	ldr	r1, [sl, r6, lsl #2]
   1a9b4:	bl	17c18 <__assert_fail@plt+0x58ac>
   1a9b8:	cmp	r0, #0
   1a9bc:	beq	1ab14 <__assert_fail@plt+0x87a8>
   1a9c0:	ldr	r6, [r8]
   1a9c4:	mov	r1, r5
   1a9c8:	rsb	r0, r6, r6, lsl #3
   1a9cc:	ldr	r0, [r1, r0, lsl #2]!
   1a9d0:	ldr	r2, [r1, #8]
   1a9d4:	ldr	r1, [r1, #12]
   1a9d8:	add	r1, r0, r1
   1a9dc:	sub	r0, r1, #16
   1a9e0:	sub	r1, r1, r2, lsl #4
   1a9e4:	ldr	r2, [sp, #48]	; 0x30
   1a9e8:	str	r0, [r4, r6, lsl #2]
   1a9ec:	str	r1, [r2, r6, lsl #2]
   1a9f0:	mov	r5, #0
   1a9f4:	cmp	r9, #2
   1a9f8:	bcc	1a834 <__assert_fail@plt+0x84c8>
   1a9fc:	mov	sl, r9
   1aa00:	mov	r9, #1
   1aa04:	mov	r7, #1
   1aa08:	b	1aa24 <__assert_fail@plt+0x86b8>
   1aa0c:	mov	sl, r9
   1aa10:	cmp	r7, sl
   1aa14:	bcs	1aa54 <__assert_fail@plt+0x86e8>
   1aa18:	ldr	r0, [r4, r6, lsl #2]
   1aa1c:	add	r1, sl, r7
   1aa20:	lsr	r9, r1, #1
   1aa24:	ldr	r1, [r8, r9, lsl #2]
   1aa28:	ldr	r1, [r4, r1, lsl #2]
   1aa2c:	bl	17fac <__assert_fail@plt+0x5c40>
   1aa30:	cmp	r0, #0
   1aa34:	bmi	1aa0c <__assert_fail@plt+0x86a0>
   1aa38:	bne	1aa48 <__assert_fail@plt+0x86dc>
   1aa3c:	ldr	r0, [r8, r9, lsl #2]
   1aa40:	cmp	r6, r0
   1aa44:	bcc	1aa0c <__assert_fail@plt+0x86a0>
   1aa48:	add	r7, r9, #1
   1aa4c:	cmp	r7, sl
   1aa50:	bcc	1aa18 <__assert_fail@plt+0x86ac>
   1aa54:	ldr	sl, [fp, #12]
   1aa58:	ldr	r9, [sp, #40]	; 0x28
   1aa5c:	subs	lr, r7, #1
   1aa60:	beq	1a834 <__assert_fail@plt+0x84c8>
   1aa64:	mov	r1, #0
   1aa68:	cmp	lr, #4
   1aa6c:	bcc	1aaec <__assert_fail@plt+0x8780>
   1aa70:	bic	r1, lr, #3
   1aa74:	mov	r3, #1
   1aa78:	subs	r2, r1, #4
   1aa7c:	add	r2, r3, r2, lsr #2
   1aa80:	and	ip, r2, #1
   1aa84:	beq	1ad0c <__assert_fail@plt+0x89a0>
   1aa88:	sub	r5, ip, r2
   1aa8c:	mov	r2, #0
   1aa90:	mov	r4, r8
   1aa94:	mov	r0, #20
   1aa98:	add	r3, r4, #4
   1aa9c:	adds	r5, r5, #2
   1aaa0:	add	r2, r2, #8
   1aaa4:	vld1.32	{d16-d17}, [r3]
   1aaa8:	mov	r3, r4
   1aaac:	vst1.32	{d16-d17}, [r3], r0
   1aab0:	vld1.32	{d16-d17}, [r3]
   1aab4:	add	r3, r4, #16
   1aab8:	add	r4, r4, #32
   1aabc:	vst1.32	{d16-d17}, [r3]
   1aac0:	bne	1aa98 <__assert_fail@plt+0x872c>
   1aac4:	ldr	r4, [sp, #56]	; 0x38
   1aac8:	cmp	ip, #0
   1aacc:	beq	1aae4 <__assert_fail@plt+0x8778>
   1aad0:	orr	r3, r2, #1
   1aad4:	add	r2, r8, r2, lsl #2
   1aad8:	add	r3, r8, r3, lsl #2
   1aadc:	vld1.32	{d16-d17}, [r3]
   1aae0:	vst1.32	{d16-d17}, [r2]
   1aae4:	cmp	lr, r1
   1aae8:	beq	1a830 <__assert_fail@plt+0x84c4>
   1aaec:	ldr	r2, [sp, #20]
   1aaf0:	add	r2, r2, r1, lsl #2
   1aaf4:	mvn	r1, r1
   1aaf8:	add	r1, r1, r7
   1aafc:	ldr	r3, [r2]
   1ab00:	subs	r1, r1, #1
   1ab04:	str	r3, [r2, #-4]
   1ab08:	add	r2, r2, #4
   1ab0c:	bne	1aafc <__assert_fail@plt+0x8790>
   1ab10:	b	1a830 <__assert_fail@plt+0x84c4>
   1ab14:	ldr	r4, [sp, #44]	; 0x2c
   1ab18:	cmp	r9, #2
   1ab1c:	bcc	1ab48 <__assert_fail@plt+0x87dc>
   1ab20:	ldr	r1, [sp, #20]
   1ab24:	sub	r0, r9, #1
   1ab28:	ldr	r2, [r1]
   1ab2c:	ldr	r3, [r8]
   1ab30:	cmp	r2, r3
   1ab34:	subhi	r2, r2, #1
   1ab38:	strhi	r2, [r1]
   1ab3c:	add	r1, r1, #4
   1ab40:	subs	r0, r0, #1
   1ab44:	bne	1ab28 <__assert_fail@plt+0x87bc>
   1ab48:	ldr	r0, [r8]
   1ab4c:	ldr	r1, [r7, r0, lsl #3]
   1ab50:	ldr	r0, [sl, r0, lsl #2]
   1ab54:	bl	16cd4 <__assert_fail@plt+0x4968>
   1ab58:	ldr	r0, [r8]
   1ab5c:	sub	r9, r9, #1
   1ab60:	cmp	r0, r4
   1ab64:	bcs	1ab7c <__assert_fail@plt+0x8810>
   1ab68:	ldr	r0, [r7, r0, lsl #3]
   1ab6c:	bl	1b3c8 <__assert_fail@plt+0x905c>
   1ab70:	ldr	r0, [r8]
   1ab74:	sub	r4, r4, #1
   1ab78:	str	r4, [sp, #44]	; 0x2c
   1ab7c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1ab80:	rsb	r0, r0, r0, lsl #3
   1ab84:	ldr	r0, [r1, r0, lsl #2]
   1ab88:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   1ab8c:	ldr	r7, [r8]
   1ab90:	mvn	sl, #15
   1ab94:	cmp	r7, r9
   1ab98:	bcs	1ac34 <__assert_fail@plt+0x88c8>
   1ab9c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1aba0:	ldr	r5, [sp, #40]	; 0x28
   1aba4:	ldr	r0, [sp, #12]
   1aba8:	ldr	r1, [sp, #8]
   1abac:	mvn	r3, r7
   1abb0:	add	r6, r2, r7, lsl #3
   1abb4:	ldr	r2, [sp, #24]
   1abb8:	add	lr, r3, r5
   1abbc:	ldr	r3, [sp, #4]
   1abc0:	add	r0, r0, r7, lsl #2
   1abc4:	add	r1, r1, r7, lsl #2
   1abc8:	mov	r4, r6
   1abcc:	add	r2, r2, r7, lsl #2
   1abd0:	rsb	r7, r7, r7, lsl #3
   1abd4:	add	r3, r3, r7, lsl #2
   1abd8:	ldr	r5, [r2]
   1abdc:	mov	r7, r3
   1abe0:	subs	lr, lr, #1
   1abe4:	str	r5, [r2, #-4]
   1abe8:	add	r2, r2, #4
   1abec:	ldr	r5, [r4, #8]!
   1abf0:	ldr	ip, [r6, #12]
   1abf4:	stm	r6, {r5, ip}
   1abf8:	add	r6, r3, #12
   1abfc:	vld1.32	{d18-d19}, [r6]
   1ac00:	vld1.32	{d16-d17}, [r7], sl
   1ac04:	mov	r6, r4
   1ac08:	vst1.32	{d18-d19}, [r7]
   1ac0c:	sub	r7, r3, #28
   1ac10:	add	r3, r3, #28
   1ac14:	vst1.32	{d16-d17}, [r7]
   1ac18:	ldr	r7, [r1]
   1ac1c:	str	r7, [r1, #-4]
   1ac20:	ldr	r7, [r0]
   1ac24:	add	r1, r1, #4
   1ac28:	str	r7, [r0, #-4]
   1ac2c:	add	r0, r0, #4
   1ac30:	bne	1abd8 <__assert_fail@plt+0x886c>
   1ac34:	ldr	r4, [sp, #56]	; 0x38
   1ac38:	ldr	sl, [fp, #12]
   1ac3c:	ldr	r6, [sp, #36]	; 0x24
   1ac40:	cmp	r9, #0
   1ac44:	beq	1ad20 <__assert_fail@plt+0x89b4>
   1ac48:	mov	r0, #0
   1ac4c:	cmp	r9, #3
   1ac50:	bls	1acd0 <__assert_fail@plt+0x8964>
   1ac54:	bic	r0, r9, #3
   1ac58:	mov	r2, #1
   1ac5c:	subs	r1, r0, #4
   1ac60:	add	r1, r2, r1, lsr #2
   1ac64:	and	r2, r1, #1
   1ac68:	beq	1acfc <__assert_fail@plt+0x8990>
   1ac6c:	sub	r3, r2, r1
   1ac70:	mov	r1, #0
   1ac74:	mov	r5, r8
   1ac78:	add	r6, r5, #4
   1ac7c:	mov	r7, r5
   1ac80:	adds	r3, r3, #2
   1ac84:	add	r1, r1, #8
   1ac88:	vld1.32	{d16-d17}, [r6]
   1ac8c:	mov	r6, #20
   1ac90:	vst1.32	{d16-d17}, [r7], r6
   1ac94:	vld1.32	{d16-d17}, [r7]
   1ac98:	add	r7, r5, #16
   1ac9c:	add	r5, r5, #32
   1aca0:	vst1.32	{d16-d17}, [r7]
   1aca4:	bne	1ac78 <__assert_fail@plt+0x890c>
   1aca8:	cmp	r2, #0
   1acac:	beq	1acc4 <__assert_fail@plt+0x8958>
   1acb0:	orr	r2, r1, #1
   1acb4:	add	r1, r8, r1, lsl #2
   1acb8:	add	r2, r8, r2, lsl #2
   1acbc:	vld1.32	{d16-d17}, [r2]
   1acc0:	vst1.32	{d16-d17}, [r1]
   1acc4:	ldr	r6, [sp, #36]	; 0x24
   1acc8:	cmp	r9, r0
   1accc:	beq	1a83c <__assert_fail@plt+0x84d0>
   1acd0:	ldr	r1, [sp, #20]
   1acd4:	ldr	r2, [sp, #40]	; 0x28
   1acd8:	add	r1, r1, r0, lsl #2
   1acdc:	mvn	r0, r0
   1ace0:	add	r0, r0, r2
   1ace4:	ldr	r2, [r1]
   1ace8:	subs	r0, r0, #1
   1acec:	str	r2, [r1, #-4]
   1acf0:	add	r1, r1, #4
   1acf4:	bne	1ace4 <__assert_fail@plt+0x8978>
   1acf8:	b	1a83c <__assert_fail@plt+0x84d0>
   1acfc:	mov	r1, #0
   1ad00:	cmp	r2, #0
   1ad04:	bne	1acb0 <__assert_fail@plt+0x8944>
   1ad08:	b	1acc4 <__assert_fail@plt+0x8958>
   1ad0c:	mov	r2, #0
   1ad10:	ldr	r4, [sp, #56]	; 0x38
   1ad14:	cmp	ip, #0
   1ad18:	bne	1aad0 <__assert_fail@plt+0x8764>
   1ad1c:	b	1aae4 <__assert_fail@plt+0x8778>
   1ad20:	ldr	r0, [sp, #28]
   1ad24:	cmp	r0, #0
   1ad28:	beq	1ad58 <__assert_fail@plt+0x89ec>
   1ad2c:	movw	r0, #39024	; 0x9870
   1ad30:	movt	r0, #3
   1ad34:	ldrb	r0, [r0, #7]
   1ad38:	cmp	r0, #0
   1ad3c:	beq	1ad58 <__assert_fail@plt+0x89ec>
   1ad40:	ldr	r1, [sp, #32]
   1ad44:	ldr	r2, [fp, #8]
   1ad48:	sub	r0, fp, #44	; 0x2c
   1ad4c:	bl	194c0 <__assert_fail@plt+0x7154>
   1ad50:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1ad54:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   1ad58:	ldr	r0, [sp, #32]
   1ad5c:	ldr	r1, [fp, #8]
   1ad60:	bl	16cd4 <__assert_fail@plt+0x4968>
   1ad64:	mov	r0, sl
   1ad68:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   1ad6c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1ad70:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   1ad74:	mov	r0, r8
   1ad78:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   1ad7c:	ldr	r0, [sp, #48]	; 0x30
   1ad80:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   1ad84:	ldr	r0, [sp, #56]	; 0x38
   1ad88:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   1ad8c:	sub	sp, fp, #28
   1ad90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad98:	add	fp, sp, #28
   1ad9c:	sub	sp, sp, #148	; 0x94
   1ada0:	movw	r7, #39024	; 0x9870
   1ada4:	str	r1, [sp, #8]
   1ada8:	str	r0, [sp, #12]
   1adac:	movt	r7, #3
   1adb0:	ldr	r0, [r7, #40]	; 0x28
   1adb4:	ldr	r1, [r7, #56]	; 0x38
   1adb8:	ldr	r6, [r0, r1, lsl #2]
   1adbc:	mov	r0, r6
   1adc0:	bl	12174 <strlen@plt>
   1adc4:	mov	r5, r0
   1adc8:	add	r0, r0, #24
   1adcc:	bic	r0, r0, #3
   1add0:	bl	23914 <__assert_fail@plt+0x115a8>
   1add4:	add	sl, r0, #9
   1add8:	mov	r4, r0
   1addc:	mov	r1, r6
   1ade0:	mov	r2, r5
   1ade4:	mov	r0, sl
   1ade8:	bl	11eec <memcpy@plt>
   1adec:	movw	r0, #33600	; 0x8340
   1adf0:	movw	r1, #22616	; 0x5858
   1adf4:	movt	r0, #2
   1adf8:	movt	r1, #88	; 0x58
   1adfc:	vldr	d16, [r0]
   1ae00:	add	r0, sl, r5
   1ae04:	str	r1, [r0, #8]
   1ae08:	vst1.8	{d16}, [r0]
   1ae0c:	mov	r0, #0
   1ae10:	str	r0, [r4]
   1ae14:	ldr	r1, [r7, #56]	; 0x38
   1ae18:	ldr	r0, [r7, #24]
   1ae1c:	add	r1, r1, #1
   1ae20:	subs	r0, r1, r0
   1ae24:	movne	r0, r1
   1ae28:	movw	r1, #37608	; 0x92e8
   1ae2c:	str	r0, [r7, #56]	; 0x38
   1ae30:	add	r0, sp, #16
   1ae34:	movt	r1, #3
   1ae38:	add	r9, r0, #4
   1ae3c:	mov	r0, #0
   1ae40:	mov	r2, r9
   1ae44:	bl	12078 <pthread_sigmask@plt>
   1ae48:	clz	r0, r0
   1ae4c:	mov	r1, #524288	; 0x80000
   1ae50:	lsr	r0, r0, #5
   1ae54:	strb	r0, [sp, #16]
   1ae58:	mov	r0, sl
   1ae5c:	bl	22d18 <__assert_fail@plt+0x109ac>
   1ae60:	mov	r7, r0
   1ae64:	cmp	r0, #0
   1ae68:	bmi	1ae80 <__assert_fail@plt+0x8b14>
   1ae6c:	movw	r0, #37356	; 0x91ec
   1ae70:	movt	r0, #3
   1ae74:	ldr	r1, [r0]
   1ae78:	str	r4, [r1]
   1ae7c:	str	r4, [r0]
   1ae80:	bl	12198 <__errno_location@plt>
   1ae84:	mov	r5, r0
   1ae88:	ldr	r8, [r0]
   1ae8c:	ldrb	r0, [sp, #16]
   1ae90:	cmp	r0, #0
   1ae94:	beq	1aea8 <__assert_fail@plt+0x8b3c>
   1ae98:	mov	r0, #2
   1ae9c:	mov	r1, r9
   1aea0:	mov	r2, #0
   1aea4:	bl	12078 <pthread_sigmask@plt>
   1aea8:	cmn	r7, #1
   1aeac:	str	r8, [r5]
   1aeb0:	ble	1af54 <__assert_fail@plt+0x8be8>
   1aeb4:	movw	r6, #39024	; 0x9870
   1aeb8:	mov	r0, #0
   1aebc:	movt	r6, #3
   1aec0:	strb	r0, [r4, #8]
   1aec4:	ldr	r0, [r6, #16]
   1aec8:	cmp	r0, #0
   1aecc:	beq	1af88 <__assert_fail@plt+0x8c1c>
   1aed0:	add	r0, sp, #16
   1aed4:	mov	r1, #4
   1aed8:	bl	1b048 <__assert_fail@plt+0x8cdc>
   1aedc:	cmp	r0, #1
   1aee0:	str	r0, [r4, #4]
   1aee4:	blt	1af80 <__assert_fail@plt+0x8c14>
   1aee8:	mov	r0, r7
   1aeec:	bl	12354 <close@plt>
   1aef0:	ldr	r0, [sp, #16]
   1aef4:	bl	12354 <close@plt>
   1aef8:	ldr	r0, [r6, #48]	; 0x30
   1aefc:	ldr	r7, [sp, #20]
   1af00:	cmp	r0, #0
   1af04:	bne	1af38 <__assert_fail@plt+0x8bcc>
   1af08:	movw	r2, #45984	; 0xb3a0
   1af0c:	movw	r3, #46000	; 0xb3b0
   1af10:	mov	r0, #0
   1af14:	mov	r1, #0
   1af18:	movt	r2, #1
   1af1c:	movt	r3, #1
   1af20:	str	r0, [sp]
   1af24:	mov	r0, #47	; 0x2f
   1af28:	bl	1e27c <__assert_fail@plt+0xbf10>
   1af2c:	cmp	r0, #0
   1af30:	str	r0, [r6, #48]	; 0x30
   1af34:	beq	1af50 <__assert_fail@plt+0x8be4>
   1af38:	mov	r1, #1
   1af3c:	strb	r1, [r4, #8]
   1af40:	mov	r1, r4
   1af44:	bl	1eed8 <__assert_fail@plt+0xcb6c>
   1af48:	cmp	r0, #0
   1af4c:	bne	1af88 <__assert_fail@plt+0x8c1c>
   1af50:	bl	23e50 <__assert_fail@plt+0x11ae4>
   1af54:	cmp	r8, #24
   1af58:	bne	1afb4 <__assert_fail@plt+0x8c48>
   1af5c:	ldr	r0, [sp, #8]
   1af60:	cmp	r0, #0
   1af64:	beq	1afb4 <__assert_fail@plt+0x8c48>
   1af68:	mov	r0, r4
   1af6c:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   1af70:	mov	r4, #0
   1af74:	mov	r0, r4
   1af78:	sub	sp, fp, #28
   1af7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af80:	cmp	r0, #0
   1af84:	beq	1b008 <__assert_fail@plt+0x8c9c>
   1af88:	movw	r1, #32403	; 0x7e93
   1af8c:	mov	r0, r7
   1af90:	movt	r1, #2
   1af94:	bl	11e20 <fdopen@plt>
   1af98:	ldr	r1, [sp, #12]
   1af9c:	cmp	r0, #0
   1afa0:	str	r0, [r1]
   1afa4:	beq	1afec <__assert_fail@plt+0x8c80>
   1afa8:	mov	r0, r4
   1afac:	sub	sp, fp, #28
   1afb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afb4:	movw	r1, #32634	; 0x7f7a
   1afb8:	mov	r0, #0
   1afbc:	mov	r2, #5
   1afc0:	movt	r1, #2
   1afc4:	bl	11f7c <dcgettext@plt>
   1afc8:	mov	r4, r0
   1afcc:	mov	r0, #4
   1afd0:	mov	r1, r6
   1afd4:	bl	21b88 <__assert_fail@plt+0xf81c>
   1afd8:	mov	r3, r0
   1afdc:	mov	r0, #2
   1afe0:	mov	r1, r8
   1afe4:	mov	r2, r4
   1afe8:	bl	120a8 <error@plt>
   1afec:	movw	r1, #32603	; 0x7f5b
   1aff0:	mov	r0, #0
   1aff4:	mov	r2, #5
   1aff8:	movt	r1, #2
   1affc:	bl	11f7c <dcgettext@plt>
   1b000:	mov	r1, sl
   1b004:	bl	17934 <__assert_fail@plt+0x55c8>
   1b008:	ldr	r0, [sp, #20]
   1b00c:	bl	12354 <close@plt>
   1b010:	mov	r0, r7
   1b014:	mov	r1, #1
   1b018:	bl	1a058 <__assert_fail@plt+0x7cec>
   1b01c:	ldr	r0, [sp, #16]
   1b020:	mov	r1, #0
   1b024:	bl	1a058 <__assert_fail@plt+0x7cec>
   1b028:	ldr	r0, [r6, #16]
   1b02c:	mov	r2, #0
   1b030:	mov	r1, r0
   1b034:	bl	11ef8 <execlp@plt>
   1b038:	ldr	r0, [r5]
   1b03c:	movw	r1, #32569	; 0x7f39
   1b040:	movt	r1, #2
   1b044:	bl	1b200 <__assert_fail@plt+0x8e94>
   1b048:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b04c:	add	fp, sp, #28
   1b050:	sub	sp, sp, #4
   1b054:	vpush	{d8}
   1b058:	sub	sp, sp, #136	; 0x88
   1b05c:	mov	r5, r1
   1b060:	mov	r1, #524288	; 0x80000
   1b064:	mov	r4, r0
   1b068:	bl	1fed0 <__assert_fail@plt+0xdb64>
   1b06c:	cmp	r0, #0
   1b070:	bmi	1b1a8 <__assert_fail@plt+0x8e3c>
   1b074:	movw	r1, #37360	; 0x91f0
   1b078:	movw	r7, #39024	; 0x9870
   1b07c:	movt	r1, #3
   1b080:	movt	r7, #3
   1b084:	ldr	r1, [r1, #8]
   1b088:	ldr	r0, [r7, #52]	; 0x34
   1b08c:	add	r1, r1, #1
   1b090:	cmp	r1, r0
   1b094:	bcs	1b0bc <__assert_fail@plt+0x8d50>
   1b098:	mvn	r0, #0
   1b09c:	bl	1b28c <__assert_fail@plt+0x8f20>
   1b0a0:	ldr	r0, [r7, #52]	; 0x34
   1b0a4:	cmp	r0, #1
   1b0a8:	blt	1b0bc <__assert_fail@plt+0x8d50>
   1b0ac:	mov	r0, #0
   1b0b0:	bl	1b28c <__assert_fail@plt+0x8f20>
   1b0b4:	cmp	r0, #0
   1b0b8:	bne	1b0a0 <__assert_fail@plt+0x8d34>
   1b0bc:	cmp	r5, #0
   1b0c0:	beq	1b1b0 <__assert_fail@plt+0x8e44>
   1b0c4:	vmov.f64	d8, #80	; 0x3e800000  0.250
   1b0c8:	add	r0, sp, #4
   1b0cc:	str	r4, [sp]
   1b0d0:	add	sl, r0, #4
   1b0d4:	b	1b0e0 <__assert_fail@plt+0x8d74>
   1b0d8:	cmp	r5, #0
   1b0dc:	beq	1b188 <__assert_fail@plt+0x8e1c>
   1b0e0:	movw	r1, #37608	; 0x92e8
   1b0e4:	mov	r0, #0
   1b0e8:	mov	r2, sl
   1b0ec:	movt	r1, #3
   1b0f0:	bl	12078 <pthread_sigmask@plt>
   1b0f4:	ldr	r9, [r7, #32]
   1b0f8:	clz	r0, r0
   1b0fc:	mov	r1, #0
   1b100:	lsr	r0, r0, #5
   1b104:	str	r1, [r7, #32]
   1b108:	strb	r0, [sp, #4]
   1b10c:	bl	12264 <fork@plt>
   1b110:	mov	r6, r0
   1b114:	bl	12198 <__errno_location@plt>
   1b118:	cmp	r6, #0
   1b11c:	ldr	r8, [r0]
   1b120:	mov	r4, r0
   1b124:	strne	r9, [r7, #32]
   1b128:	ldrb	r0, [sp, #4]
   1b12c:	cmp	r0, #0
   1b130:	beq	1b144 <__assert_fail@plt+0x8dd8>
   1b134:	mov	r0, #2
   1b138:	mov	r1, sl
   1b13c:	mov	r2, #0
   1b140:	bl	12078 <pthread_sigmask@plt>
   1b144:	cmn	r6, #1
   1b148:	str	r8, [r4]
   1b14c:	bgt	1b188 <__assert_fail@plt+0x8e1c>
   1b150:	cmp	r8, #11
   1b154:	bne	1b188 <__assert_fail@plt+0x8e1c>
   1b158:	vmov.f64	d0, d8
   1b15c:	sub	r5, r5, #1
   1b160:	bl	24078 <__assert_fail@plt+0x11d0c>
   1b164:	vadd.f64	d8, d8, d8
   1b168:	ldr	r0, [r7, #52]	; 0x34
   1b16c:	cmp	r0, #1
   1b170:	blt	1b0d8 <__assert_fail@plt+0x8d6c>
   1b174:	mov	r0, #0
   1b178:	bl	1b28c <__assert_fail@plt+0x8f20>
   1b17c:	cmp	r0, #0
   1b180:	bne	1b168 <__assert_fail@plt+0x8dfc>
   1b184:	b	1b0d8 <__assert_fail@plt+0x8d6c>
   1b188:	cmn	r6, #1
   1b18c:	ble	1b1c8 <__assert_fail@plt+0x8e5c>
   1b190:	cmp	r6, #0
   1b194:	beq	1b1b0 <__assert_fail@plt+0x8e44>
   1b198:	ldr	r0, [r7, #52]	; 0x34
   1b19c:	add	r0, r0, #1
   1b1a0:	str	r0, [r7, #52]	; 0x34
   1b1a4:	b	1b1ec <__assert_fail@plt+0x8e80>
   1b1a8:	mvn	r6, #0
   1b1ac:	b	1b1ec <__assert_fail@plt+0x8e80>
   1b1b0:	mov	r0, #0
   1b1b4:	mov	r6, #0
   1b1b8:	bl	12354 <close@plt>
   1b1bc:	mov	r0, #1
   1b1c0:	bl	12354 <close@plt>
   1b1c4:	b	1b1ec <__assert_fail@plt+0x8e80>
   1b1c8:	bl	12198 <__errno_location@plt>
   1b1cc:	ldr	r7, [sp]
   1b1d0:	mov	r4, r0
   1b1d4:	ldr	r5, [r0]
   1b1d8:	ldr	r0, [r7]
   1b1dc:	bl	12354 <close@plt>
   1b1e0:	ldr	r0, [r7, #4]
   1b1e4:	bl	12354 <close@plt>
   1b1e8:	str	r5, [r4]
   1b1ec:	mov	r0, r6
   1b1f0:	sub	sp, fp, #40	; 0x28
   1b1f4:	vpop	{d8}
   1b1f8:	add	sp, sp, #4
   1b1fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b200:	push	{fp, lr}
   1b204:	mov	fp, sp
   1b208:	sub	sp, sp, #16
   1b20c:	mov	r4, r0
   1b210:	mov	r0, r1
   1b214:	mov	r5, r1
   1b218:	bl	12174 <strlen@plt>
   1b21c:	mov	r2, r0
   1b220:	mov	r0, #2
   1b224:	mov	r1, r5
   1b228:	bl	121e0 <write@plt>
   1b22c:	cmp	r4, #0
   1b230:	beq	1b270 <__assert_fail@plt+0x8f04>
   1b234:	add	r1, sp, #4
   1b238:	mov	r0, r4
   1b23c:	bl	1f400 <__assert_fail@plt+0xd094>
   1b240:	movw	r1, #32533	; 0x7f15
   1b244:	mov	r4, r0
   1b248:	mov	r0, #2
   1b24c:	mov	r2, #8
   1b250:	movt	r1, #2
   1b254:	bl	121e0 <write@plt>
   1b258:	mov	r0, r4
   1b25c:	bl	12174 <strlen@plt>
   1b260:	mov	r2, r0
   1b264:	mov	r0, #2
   1b268:	mov	r1, r4
   1b26c:	bl	121e0 <write@plt>
   1b270:	movw	r1, #25763	; 0x64a3
   1b274:	mov	r0, #2
   1b278:	mov	r2, #1
   1b27c:	movt	r1, #2
   1b280:	bl	121e0 <write@plt>
   1b284:	mov	r0, #2
   1b288:	bl	11ee0 <_exit@plt>
   1b28c:	push	{r4, r5, fp, lr}
   1b290:	add	fp, sp, #8
   1b294:	sub	sp, sp, #16
   1b298:	mov	r5, r0
   1b29c:	cmp	r0, #0
   1b2a0:	clz	r1, r5
   1b2a4:	mvneq	r0, #0
   1b2a8:	lsr	r2, r1, #5
   1b2ac:	mov	r1, sp
   1b2b0:	bl	12060 <waitpid@plt>
   1b2b4:	cmn	r0, #1
   1b2b8:	ble	1b320 <__assert_fail@plt+0x8fb4>
   1b2bc:	mov	r4, r0
   1b2c0:	cmp	r0, #0
   1b2c4:	beq	1b314 <__assert_fail@plt+0x8fa8>
   1b2c8:	cmp	r5, #0
   1b2cc:	movw	r5, #39024	; 0x9870
   1b2d0:	movt	r5, #3
   1b2d4:	bgt	1b2f8 <__assert_fail@plt+0x8f8c>
   1b2d8:	ldr	r0, [r5, #48]	; 0x30
   1b2dc:	add	r1, sp, #4
   1b2e0:	str	r4, [sp, #8]
   1b2e4:	bl	1ef20 <__assert_fail@plt+0xcbb4>
   1b2e8:	cmp	r0, #0
   1b2ec:	beq	1b314 <__assert_fail@plt+0x8fa8>
   1b2f0:	mov	r1, #2
   1b2f4:	strb	r1, [r0, #8]
   1b2f8:	ldrh	r0, [sp]
   1b2fc:	mvn	r1, #128	; 0x80
   1b300:	tst	r0, r1
   1b304:	bne	1b368 <__assert_fail@plt+0x8ffc>
   1b308:	ldr	r0, [r5, #52]	; 0x34
   1b30c:	sub	r0, r0, #1
   1b310:	str	r0, [r5, #52]	; 0x34
   1b314:	mov	r0, r4
   1b318:	sub	sp, fp, #8
   1b31c:	pop	{r4, r5, fp, pc}
   1b320:	bl	12198 <__errno_location@plt>
   1b324:	movw	r1, #32483	; 0x7ee3
   1b328:	ldr	r4, [r0]
   1b32c:	mov	r0, #0
   1b330:	mov	r2, #5
   1b334:	movt	r1, #2
   1b338:	bl	11f7c <dcgettext@plt>
   1b33c:	mov	r5, r0
   1b340:	movw	r0, #39024	; 0x9870
   1b344:	movt	r0, #3
   1b348:	ldr	r1, [r0, #16]
   1b34c:	mov	r0, #4
   1b350:	bl	21b88 <__assert_fail@plt+0xf81c>
   1b354:	mov	r3, r0
   1b358:	mov	r0, #2
   1b35c:	mov	r1, r4
   1b360:	mov	r2, r5
   1b364:	bl	120a8 <error@plt>
   1b368:	movw	r1, #32503	; 0x7ef7
   1b36c:	mov	r0, #0
   1b370:	mov	r2, #5
   1b374:	movt	r1, #2
   1b378:	bl	11f7c <dcgettext@plt>
   1b37c:	ldr	r1, [r5, #16]
   1b380:	mov	r4, r0
   1b384:	mov	r0, #4
   1b388:	bl	21b88 <__assert_fail@plt+0xf81c>
   1b38c:	mov	r3, r0
   1b390:	mov	r0, #2
   1b394:	mov	r1, #0
   1b398:	mov	r2, r4
   1b39c:	bl	120a8 <error@plt>
   1b3a0:	ldr	r0, [r0, #4]
   1b3a4:	udiv	r2, r0, r1
   1b3a8:	mls	r0, r2, r1, r0
   1b3ac:	bx	lr
   1b3b0:	ldr	r1, [r1, #4]
   1b3b4:	ldr	r0, [r0, #4]
   1b3b8:	sub	r0, r0, r1
   1b3bc:	clz	r0, r0
   1b3c0:	lsr	r0, r0, #5
   1b3c4:	bx	lr
   1b3c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3cc:	add	fp, sp, #28
   1b3d0:	sub	sp, sp, #132	; 0x84
   1b3d4:	mov	r5, r0
   1b3d8:	movw	r0, #39024	; 0x9870
   1b3dc:	movt	r0, #3
   1b3e0:	add	r4, r0, #32
   1b3e4:	mov	r6, r4
   1b3e8:	ldr	r4, [r4]
   1b3ec:	add	r1, r4, #9
   1b3f0:	cmp	r1, r5
   1b3f4:	bne	1b3e4 <__assert_fail@plt+0x9078>
   1b3f8:	ldrb	r1, [r4, #8]
   1b3fc:	cmp	r1, #1
   1b400:	bne	1b42c <__assert_fail@plt+0x90c0>
   1b404:	ldr	r7, [r4, #4]
   1b408:	ldr	r0, [r0, #48]	; 0x30
   1b40c:	mov	r1, sp
   1b410:	str	r7, [sp, #4]
   1b414:	bl	1ef20 <__assert_fail@plt+0xcbb4>
   1b418:	cmp	r0, #0
   1b41c:	movne	r1, #2
   1b420:	strbne	r1, [r0, #8]
   1b424:	movne	r0, r7
   1b428:	blne	1b28c <__assert_fail@plt+0x8f20>
   1b42c:	movw	r1, #37608	; 0x92e8
   1b430:	mov	r0, sp
   1b434:	ldr	sl, [r4]
   1b438:	add	r7, r0, #4
   1b43c:	movt	r1, #3
   1b440:	mov	r0, #0
   1b444:	mov	r2, r7
   1b448:	bl	12078 <pthread_sigmask@plt>
   1b44c:	clz	r0, r0
   1b450:	lsr	r0, r0, #5
   1b454:	strb	r0, [sp]
   1b458:	mov	r0, r5
   1b45c:	bl	11fa0 <unlink@plt>
   1b460:	mov	r9, r0
   1b464:	bl	12198 <__errno_location@plt>
   1b468:	ldr	r8, [r0]
   1b46c:	str	sl, [r6]
   1b470:	ldrb	r0, [sp]
   1b474:	cmp	r0, #0
   1b478:	beq	1b48c <__assert_fail@plt+0x9120>
   1b47c:	mov	r0, #2
   1b480:	mov	r1, r7
   1b484:	mov	r2, #0
   1b488:	bl	12078 <pthread_sigmask@plt>
   1b48c:	cmp	r9, #0
   1b490:	beq	1b4d0 <__assert_fail@plt+0x9164>
   1b494:	movw	r1, #32542	; 0x7f1e
   1b498:	mov	r0, #0
   1b49c:	mov	r2, #5
   1b4a0:	movt	r1, #2
   1b4a4:	bl	11f7c <dcgettext@plt>
   1b4a8:	mov	r7, r0
   1b4ac:	mov	r0, #0
   1b4b0:	mov	r1, #3
   1b4b4:	mov	r2, r5
   1b4b8:	bl	21e04 <__assert_fail@plt+0xfa98>
   1b4bc:	mov	r3, r0
   1b4c0:	mov	r0, #0
   1b4c4:	mov	r1, r8
   1b4c8:	mov	r2, r7
   1b4cc:	bl	120a8 <error@plt>
   1b4d0:	cmp	sl, #0
   1b4d4:	movweq	r0, #37356	; 0x91ec
   1b4d8:	movteq	r0, #3
   1b4dc:	streq	r6, [r0]
   1b4e0:	mov	r0, r4
   1b4e4:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   1b4e8:	sub	sp, fp, #28
   1b4ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4f4:	add	fp, sp, #28
   1b4f8:	sub	sp, sp, #92	; 0x5c
   1b4fc:	mov	r8, r0
   1b500:	mov	r0, r2
   1b504:	lsr	r0, r1, #1
   1b508:	ldr	r6, [r3, #20]
   1b50c:	ldr	r7, [r3, #24]
   1b510:	str	r2, [sp, #68]	; 0x44
   1b514:	mov	r4, r1
   1b518:	ldr	sl, [fp, #16]
   1b51c:	ldr	r1, [fp, #12]
   1b520:	ldr	r9, [fp, #8]
   1b524:	mov	r5, r3
   1b528:	str	r2, [sp, #24]
   1b52c:	str	r0, [sp, #64]	; 0x40
   1b530:	str	r8, [sp, #60]	; 0x3c
   1b534:	cmp	r4, #2
   1b538:	ldr	r0, [r3, #32]
   1b53c:	str	sl, [sp, #84]	; 0x54
   1b540:	str	r1, [sp, #80]	; 0x50
   1b544:	str	r9, [sp, #76]	; 0x4c
   1b548:	str	r0, [sp, #72]	; 0x48
   1b54c:	addcs	r0, r7, r6
   1b550:	cmpcs	r0, #131072	; 0x20000
   1b554:	bcs	1be00 <__assert_fail@plt+0x9a94>
   1b558:	ldr	r0, [sp, #24]
   1b55c:	cmp	r7, #2
   1b560:	sub	r4, r8, r0, lsl #4
   1b564:	bcc	1b584 <__assert_fail@plt+0x9218>
   1b568:	mvn	r1, #8
   1b56c:	sub	r0, r8, r6, lsl #4
   1b570:	mov	r3, #0
   1b574:	and	r1, r1, r6, lsl #3
   1b578:	sub	r2, r4, r1
   1b57c:	mov	r1, r7
   1b580:	bl	1bfd0 <__assert_fail@plt+0x9c64>
   1b584:	cmp	r6, #2
   1b588:	bcc	1b5a0 <__assert_fail@plt+0x9234>
   1b58c:	mov	r0, r8
   1b590:	mov	r1, r6
   1b594:	mov	r2, r4
   1b598:	mov	r3, #0
   1b59c:	bl	1bfd0 <__assert_fail@plt+0x9c64>
   1b5a0:	sub	r0, r8, r6, lsl #4
   1b5a4:	str	r8, [r5]
   1b5a8:	sub	r1, r0, r7, lsl #4
   1b5ac:	add	r7, r9, #4
   1b5b0:	str	r0, [r5, #4]
   1b5b4:	str	r0, [r5, #8]
   1b5b8:	mov	r0, r7
   1b5bc:	str	r1, [r5, #12]
   1b5c0:	bl	11ebc <pthread_mutex_lock@plt>
   1b5c4:	mov	sl, r9
   1b5c8:	mov	r1, r5
   1b5cc:	ldr	r0, [sl], #32
   1b5d0:	bl	1f25c <__assert_fail@plt+0xcef0>
   1b5d4:	mov	r0, #1
   1b5d8:	strb	r0, [r5, #44]	; 0x2c
   1b5dc:	mov	r0, sl
   1b5e0:	bl	1233c <pthread_cond_signal@plt>
   1b5e4:	str	r7, [sp, #32]
   1b5e8:	str	r7, [sp, #20]
   1b5ec:	str	sl, [sp, #16]
   1b5f0:	b	1b618 <__assert_fail@plt+0x92ac>
   1b5f4:	ldr	r0, [r6, #28]
   1b5f8:	add	r0, r0, #48	; 0x30
   1b5fc:	bl	11ebc <pthread_mutex_lock@plt>
   1b600:	ldr	r5, [r6, #28]
   1b604:	ldrb	r0, [r5, #44]	; 0x2c
   1b608:	cmp	r0, #0
   1b60c:	beq	1b8ec <__assert_fail@plt+0x9580>
   1b610:	add	r0, r5, #48	; 0x30
   1b614:	bl	11e14 <pthread_mutex_unlock@plt>
   1b618:	ldr	r0, [sp, #32]
   1b61c:	bl	11e14 <pthread_mutex_unlock@plt>
   1b620:	mov	r0, r7
   1b624:	bl	11ebc <pthread_mutex_lock@plt>
   1b628:	ldr	r0, [r9]
   1b62c:	bl	1f30c <__assert_fail@plt+0xcfa0>
   1b630:	mov	r6, r0
   1b634:	cmp	r0, #0
   1b638:	bne	1b65c <__assert_fail@plt+0x92f0>
   1b63c:	mov	r0, sl
   1b640:	mov	r1, r7
   1b644:	bl	122dc <pthread_cond_wait@plt>
   1b648:	ldr	r0, [r9]
   1b64c:	bl	1f30c <__assert_fail@plt+0xcfa0>
   1b650:	cmp	r0, #0
   1b654:	beq	1b63c <__assert_fail@plt+0x92d0>
   1b658:	mov	r6, r0
   1b65c:	mov	r0, r7
   1b660:	bl	11e14 <pthread_mutex_unlock@plt>
   1b664:	add	r0, r6, #48	; 0x30
   1b668:	str	r0, [sp, #32]
   1b66c:	bl	11ebc <pthread_mutex_lock@plt>
   1b670:	mov	r0, #0
   1b674:	strb	r0, [r6, #44]	; 0x2c
   1b678:	ldr	r1, [r6, #40]	; 0x28
   1b67c:	cmp	r1, #0
   1b680:	beq	1bdc4 <__assert_fail@plt+0x9a58>
   1b684:	ldr	r2, [sp, #24]
   1b688:	mov	r0, #2
   1b68c:	mov	r3, #1
   1b690:	cmp	r1, #1
   1b694:	add	r0, r0, r1, lsl #1
   1b698:	add	r4, r3, r2, lsr r0
   1b69c:	ldm	r6, {r2, r7}
   1b6a0:	str	r7, [sp, #40]	; 0x28
   1b6a4:	str	r2, [sp, #36]	; 0x24
   1b6a8:	bne	1b808 <__assert_fail@plt+0x949c>
   1b6ac:	ldr	r9, [r6, #8]
   1b6b0:	cmp	r2, r9
   1b6b4:	beq	1b918 <__assert_fail@plt+0x95ac>
   1b6b8:	ldr	r0, [r6, #12]
   1b6bc:	add	r1, sp, #48	; 0x30
   1b6c0:	mov	sl, r2
   1b6c4:	str	r2, [sp, #28]
   1b6c8:	str	r7, [sp, #44]	; 0x2c
   1b6cc:	stm	r1, {r0, r2, r7}
   1b6d0:	ldr	r0, [sp, #48]	; 0x30
   1b6d4:	cmp	r7, r0
   1b6d8:	bne	1b720 <__assert_fail@plt+0x93b4>
   1b6dc:	b	1bad4 <__assert_fail@plt+0x9768>
   1b6e0:	vld1.32	{d16-d17}, [r8]
   1b6e4:	add	r0, r1, #64	; 0x40
   1b6e8:	vst1.64	{d16-d17}, [r0]
   1b6ec:	ldr	r1, [fp, #12]
   1b6f0:	ldr	r2, [fp, #16]
   1b6f4:	mov	r0, r8
   1b6f8:	bl	194c0 <__assert_fail@plt+0x7154>
   1b6fc:	mov	r7, r8
   1b700:	str	r8, [sp, #56]	; 0x38
   1b704:	str	r8, [sp, #44]	; 0x2c
   1b708:	sub	r4, r4, #1
   1b70c:	cmp	sl, r9
   1b710:	beq	1b800 <__assert_fail@plt+0x9494>
   1b714:	ldr	r0, [sp, #48]	; 0x30
   1b718:	cmp	r7, r0
   1b71c:	beq	1bad4 <__assert_fail@plt+0x9768>
   1b720:	cmp	r4, #0
   1b724:	beq	1badc <__assert_fail@plt+0x9770>
   1b728:	sub	r5, sl, #16
   1b72c:	sub	r8, r7, #16
   1b730:	mov	r0, r5
   1b734:	mov	r1, r8
   1b738:	bl	17fac <__assert_fail@plt+0x5c40>
   1b73c:	cmp	r0, #0
   1b740:	ble	1b788 <__assert_fail@plt+0x941c>
   1b744:	movw	r1, #39024	; 0x9870
   1b748:	str	r8, [r6, #4]
   1b74c:	movt	r1, #3
   1b750:	ldrb	r0, [r1, #7]
   1b754:	cmp	r0, #1
   1b758:	bne	1b6ec <__assert_fail@plt+0x9380>
   1b75c:	ldr	r0, [r1, #64]	; 0x40
   1b760:	cmp	r0, #0
   1b764:	beq	1b6e0 <__assert_fail@plt+0x9374>
   1b768:	add	r1, r1, #64	; 0x40
   1b76c:	mov	r0, r8
   1b770:	bl	17fac <__assert_fail@plt+0x5c40>
   1b774:	movw	r1, #39024	; 0x9870
   1b778:	cmp	r0, #0
   1b77c:	movt	r1, #3
   1b780:	bne	1b6e0 <__assert_fail@plt+0x9374>
   1b784:	b	1b6fc <__assert_fail@plt+0x9390>
   1b788:	movw	r1, #39024	; 0x9870
   1b78c:	str	r5, [r6]
   1b790:	ldr	r8, [fp, #16]
   1b794:	movt	r1, #3
   1b798:	ldrb	r0, [r1, #7]
   1b79c:	cmp	r0, #1
   1b7a0:	bne	1b7d8 <__assert_fail@plt+0x946c>
   1b7a4:	ldr	r0, [r1, #64]	; 0x40
   1b7a8:	cmp	r0, #0
   1b7ac:	beq	1b7cc <__assert_fail@plt+0x9460>
   1b7b0:	add	r1, r1, #64	; 0x40
   1b7b4:	mov	r0, r5
   1b7b8:	bl	17fac <__assert_fail@plt+0x5c40>
   1b7bc:	movw	r1, #39024	; 0x9870
   1b7c0:	cmp	r0, #0
   1b7c4:	movt	r1, #3
   1b7c8:	beq	1b7e8 <__assert_fail@plt+0x947c>
   1b7cc:	vld1.32	{d16-d17}, [r5]
   1b7d0:	add	r0, r1, #64	; 0x40
   1b7d4:	vst1.64	{d16-d17}, [r0]
   1b7d8:	ldr	r1, [fp, #12]
   1b7dc:	mov	r0, r5
   1b7e0:	mov	r2, r8
   1b7e4:	bl	194c0 <__assert_fail@plt+0x7154>
   1b7e8:	str	r5, [sp, #52]	; 0x34
   1b7ec:	str	r5, [sp, #28]
   1b7f0:	mov	sl, r5
   1b7f4:	sub	r4, r4, #1
   1b7f8:	cmp	sl, r9
   1b7fc:	bne	1b714 <__assert_fail@plt+0x93a8>
   1b800:	mov	sl, r9
   1b804:	b	1bae0 <__assert_fail@plt+0x9774>
   1b808:	ldr	r1, [r6, #16]
   1b80c:	ldr	r3, [r6, #8]
   1b810:	ldr	r8, [r1]
   1b814:	cmp	r2, r3
   1b818:	str	r1, [sp, #28]
   1b81c:	str	r3, [sp, #48]	; 0x30
   1b820:	beq	1ba14 <__assert_fail@plt+0x96a8>
   1b824:	ldr	r1, [r6, #12]
   1b828:	cmp	r7, r1
   1b82c:	str	r1, [sp, #44]	; 0x2c
   1b830:	beq	1bac0 <__assert_fail@plt+0x9754>
   1b834:	cmp	r4, #0
   1b838:	beq	1bc14 <__assert_fail@plt+0x98a8>
   1b83c:	ldr	r1, [sp, #24]
   1b840:	mov	r3, r7
   1b844:	mov	sl, r2
   1b848:	str	r2, [sp, #52]	; 0x34
   1b84c:	mov	r9, r3
   1b850:	str	r3, [sp, #56]	; 0x38
   1b854:	lsr	r1, r1, r0
   1b858:	sub	r0, r8, #16
   1b85c:	rsb	r7, r1, #0
   1b860:	sub	r4, r9, #16
   1b864:	sub	r5, sl, #16
   1b868:	mov	r8, r0
   1b86c:	mov	r0, r5
   1b870:	mov	r1, r4
   1b874:	bl	17fac <__assert_fail@plt+0x5c40>
   1b878:	cmp	r0, #0
   1b87c:	ble	1b8c0 <__assert_fail@plt+0x9554>
   1b880:	str	r4, [r6, #4]
   1b884:	mov	r9, r4
   1b888:	str	r4, [sp, #56]	; 0x38
   1b88c:	vld1.32	{d16-d17}, [r4]
   1b890:	vst1.32	{d16-d17}, [r8]
   1b894:	ldr	r0, [sp, #48]	; 0x30
   1b898:	cmp	sl, r0
   1b89c:	beq	1b8e0 <__assert_fail@plt+0x9574>
   1b8a0:	ldr	r0, [sp, #44]	; 0x2c
   1b8a4:	cmp	r9, r0
   1b8a8:	beq	1bc2c <__assert_fail@plt+0x98c0>
   1b8ac:	add	r7, r7, #1
   1b8b0:	sub	r0, r8, #16
   1b8b4:	cmp	r7, #1
   1b8b8:	bne	1b860 <__assert_fail@plt+0x94f4>
   1b8bc:	b	1bc38 <__assert_fail@plt+0x98cc>
   1b8c0:	str	r5, [r6]
   1b8c4:	str	r5, [sp, #52]	; 0x34
   1b8c8:	mov	sl, r5
   1b8cc:	vld1.32	{d16-d17}, [r5]
   1b8d0:	vst1.32	{d16-d17}, [r8]
   1b8d4:	ldr	r0, [sp, #48]	; 0x30
   1b8d8:	cmp	sl, r0
   1b8dc:	bne	1b8a0 <__assert_fail@plt+0x9534>
   1b8e0:	ldr	sl, [sp, #48]	; 0x30
   1b8e4:	rsb	r4, r7, #0
   1b8e8:	b	1bc3c <__assert_fail@plt+0x98d0>
   1b8ec:	ldr	r2, [r5]
   1b8f0:	ldr	r1, [r5, #12]
   1b8f4:	ldmib	r5, {r0, r3}
   1b8f8:	cmp	r2, r3
   1b8fc:	bne	1bb24 <__assert_fail@plt+0x97b8>
   1b900:	cmp	r0, r1
   1b904:	beq	1b610 <__assert_fail@plt+0x92a4>
   1b908:	ldr	r0, [r5, #20]
   1b90c:	cmp	r0, #0
   1b910:	bne	1b610 <__assert_fail@plt+0x92a4>
   1b914:	b	1bb38 <__assert_fail@plt+0x97cc>
   1b918:	str	r7, [sp, #56]	; 0x38
   1b91c:	str	r2, [sp, #52]	; 0x34
   1b920:	mov	sl, r2
   1b924:	mov	r9, r2
   1b928:	mov	r1, r2
   1b92c:	mov	r0, r7
   1b930:	mov	r2, r7
   1b934:	ldr	r5, [r6, #24]
   1b938:	sub	r0, r0, r2
   1b93c:	cmp	r5, r0, asr #4
   1b940:	beq	1bafc <__assert_fail@plt+0x9790>
   1b944:	ldr	r0, [sp, #36]	; 0x24
   1b948:	sub	r0, r0, r1
   1b94c:	ldr	r1, [r6, #20]
   1b950:	cmp	r1, r0, asr #4
   1b954:	bne	1bb14 <__assert_fail@plt+0x97a8>
   1b958:	cmp	r4, #0
   1b95c:	ldr	r9, [fp, #8]
   1b960:	ldr	sl, [fp, #16]
   1b964:	ldrne	r8, [r6, #12]
   1b968:	cmpne	r7, r8
   1b96c:	beq	1bb18 <__assert_fail@plt+0x97ac>
   1b970:	movw	r2, #39024	; 0x9870
   1b974:	str	r5, [sp, #48]	; 0x30
   1b978:	sub	r4, r4, #1
   1b97c:	sub	r5, r7, #16
   1b980:	movt	r2, #3
   1b984:	str	r5, [r6, #4]
   1b988:	ldrb	r0, [r2, #7]
   1b98c:	cmp	r0, #1
   1b990:	bne	1b9c8 <__assert_fail@plt+0x965c>
   1b994:	ldr	r0, [r2, #64]	; 0x40
   1b998:	cmp	r0, #0
   1b99c:	beq	1b9bc <__assert_fail@plt+0x9650>
   1b9a0:	add	r1, r2, #64	; 0x40
   1b9a4:	mov	r0, r5
   1b9a8:	bl	17fac <__assert_fail@plt+0x5c40>
   1b9ac:	movw	r2, #39024	; 0x9870
   1b9b0:	cmp	r0, #0
   1b9b4:	movt	r2, #3
   1b9b8:	beq	1b9e0 <__assert_fail@plt+0x9674>
   1b9bc:	vld1.32	{d16-d17}, [r5]
   1b9c0:	add	r0, r2, #64	; 0x40
   1b9c4:	vst1.64	{d16-d17}, [r0]
   1b9c8:	ldr	r1, [fp, #12]
   1b9cc:	mov	r0, r5
   1b9d0:	mov	r2, sl
   1b9d4:	bl	194c0 <__assert_fail@plt+0x7154>
   1b9d8:	movw	r2, #39024	; 0x9870
   1b9dc:	movt	r2, #3
   1b9e0:	sub	r0, r5, #16
   1b9e4:	cmp	r8, r5
   1b9e8:	beq	1ba00 <__assert_fail@plt+0x9694>
   1b9ec:	sub	r1, r4, #1
   1b9f0:	cmp	r4, #0
   1b9f4:	mov	r5, r0
   1b9f8:	mov	r4, r1
   1b9fc:	bne	1b984 <__assert_fail@plt+0x9618>
   1ba00:	ldr	r7, [sp, #20]
   1ba04:	ldr	sl, [sp, #16]
   1ba08:	add	r0, r0, #16
   1ba0c:	str	r0, [sp, #56]	; 0x38
   1ba10:	b	1bc0c <__assert_fail@plt+0x98a0>
   1ba14:	str	r7, [sp, #56]	; 0x38
   1ba18:	str	r2, [sp, #52]	; 0x34
   1ba1c:	mov	r0, r2
   1ba20:	mov	sl, r2
   1ba24:	mov	r9, r7
   1ba28:	ldr	r5, [r6, #24]
   1ba2c:	sub	r1, r7, r9
   1ba30:	cmp	r5, r1, asr #4
   1ba34:	beq	1bc58 <__assert_fail@plt+0x98ec>
   1ba38:	ldr	r1, [r6, #20]
   1ba3c:	sub	r0, r2, sl
   1ba40:	cmp	r1, r0, asr #4
   1ba44:	bne	1bccc <__assert_fail@plt+0x9960>
   1ba48:	cmp	r4, #0
   1ba4c:	ldr	r7, [sp, #20]
   1ba50:	ldr	sl, [sp, #16]
   1ba54:	ldrne	r0, [r6, #12]
   1ba58:	cmpne	r9, r0
   1ba5c:	beq	1bab8 <__assert_fail@plt+0x974c>
   1ba60:	sub	r0, r0, r9
   1ba64:	sub	r1, r4, #1
   1ba68:	mov	r2, #0
   1ba6c:	add	r0, r0, #16
   1ba70:	add	r3, r9, r2
   1ba74:	cmp	r0, r2
   1ba78:	sub	r3, r3, #16
   1ba7c:	vld1.32	{d16-d17}, [r3]
   1ba80:	add	r3, r8, r2
   1ba84:	sub	r3, r3, #16
   1ba88:	vst1.32	{d16-d17}, [r3]
   1ba8c:	sub	r3, r2, #16
   1ba90:	beq	1baa8 <__assert_fail@plt+0x973c>
   1ba94:	sub	r2, r1, #1
   1ba98:	cmp	r1, #0
   1ba9c:	mov	r1, r2
   1baa0:	mov	r2, r3
   1baa4:	bne	1ba70 <__assert_fail@plt+0x9704>
   1baa8:	add	r0, r9, r3
   1baac:	add	r8, r8, r3
   1bab0:	str	r0, [sp, #56]	; 0x38
   1bab4:	str	r0, [r6, #4]
   1bab8:	ldr	r9, [fp, #8]
   1babc:	b	1bcd8 <__assert_fail@plt+0x996c>
   1bac0:	str	r7, [sp, #56]	; 0x38
   1bac4:	str	r2, [sp, #52]	; 0x34
   1bac8:	mov	r9, r7
   1bacc:	mov	sl, r2
   1bad0:	b	1bc44 <__assert_fail@plt+0x98d8>
   1bad4:	ldr	r7, [sp, #48]	; 0x30
   1bad8:	b	1bae0 <__assert_fail@plt+0x9774>
   1badc:	mvn	r4, #0
   1bae0:	ldr	r0, [sp, #40]	; 0x28
   1bae4:	ldr	r1, [sp, #28]
   1bae8:	ldr	r2, [sp, #44]	; 0x2c
   1baec:	ldr	r5, [r6, #24]
   1baf0:	sub	r0, r0, r2
   1baf4:	cmp	r5, r0, asr #4
   1baf8:	bne	1b944 <__assert_fail@plt+0x95d8>
   1bafc:	movw	r2, #39024	; 0x9870
   1bb00:	cmp	sl, r9
   1bb04:	asr	r5, r0, #4
   1bb08:	movt	r2, #3
   1bb0c:	cmpne	r4, #0
   1bb10:	bne	1bb6c <__assert_fail@plt+0x9800>
   1bb14:	ldr	r9, [fp, #8]
   1bb18:	ldr	r7, [sp, #20]
   1bb1c:	ldr	sl, [sp, #16]
   1bb20:	b	1bce0 <__assert_fail@plt+0x9974>
   1bb24:	cmp	r0, r1
   1bb28:	bne	1bb38 <__assert_fail@plt+0x97cc>
   1bb2c:	ldr	r0, [r5, #24]
   1bb30:	cmp	r0, #0
   1bb34:	bne	1b610 <__assert_fail@plt+0x92a4>
   1bb38:	mov	r0, r7
   1bb3c:	bl	11ebc <pthread_mutex_lock@plt>
   1bb40:	ldr	r0, [r9]
   1bb44:	mov	r1, r5
   1bb48:	bl	1f25c <__assert_fail@plt+0xcef0>
   1bb4c:	mov	r0, #1
   1bb50:	strb	r0, [r5, #44]	; 0x2c
   1bb54:	mov	r0, sl
   1bb58:	bl	1233c <pthread_cond_signal@plt>
   1bb5c:	mov	r0, r7
   1bb60:	bl	11e14 <pthread_mutex_unlock@plt>
   1bb64:	ldr	r5, [r6, #28]
   1bb68:	b	1b610 <__assert_fail@plt+0x92a4>
   1bb6c:	str	r5, [sp, #48]	; 0x30
   1bb70:	sub	r5, sl, #16
   1bb74:	ldr	r8, [fp, #16]
   1bb78:	ldr	r7, [sp, #20]
   1bb7c:	ldr	sl, [sp, #16]
   1bb80:	sub	r4, r4, #1
   1bb84:	str	r5, [r6]
   1bb88:	ldrb	r0, [r2, #7]
   1bb8c:	cmp	r0, #1
   1bb90:	bne	1bbc8 <__assert_fail@plt+0x985c>
   1bb94:	ldr	r0, [r2, #64]	; 0x40
   1bb98:	cmp	r0, #0
   1bb9c:	beq	1bbbc <__assert_fail@plt+0x9850>
   1bba0:	add	r1, r2, #64	; 0x40
   1bba4:	mov	r0, r5
   1bba8:	bl	17fac <__assert_fail@plt+0x5c40>
   1bbac:	movw	r2, #39024	; 0x9870
   1bbb0:	cmp	r0, #0
   1bbb4:	movt	r2, #3
   1bbb8:	beq	1bbe0 <__assert_fail@plt+0x9874>
   1bbbc:	vld1.32	{d16-d17}, [r5]
   1bbc0:	add	r0, r2, #64	; 0x40
   1bbc4:	vst1.64	{d16-d17}, [r0]
   1bbc8:	ldr	r1, [fp, #12]
   1bbcc:	mov	r0, r5
   1bbd0:	mov	r2, r8
   1bbd4:	bl	194c0 <__assert_fail@plt+0x7154>
   1bbd8:	movw	r2, #39024	; 0x9870
   1bbdc:	movt	r2, #3
   1bbe0:	sub	r0, r5, #16
   1bbe4:	cmp	r9, r5
   1bbe8:	beq	1bc00 <__assert_fail@plt+0x9894>
   1bbec:	sub	r1, r4, #1
   1bbf0:	cmp	r4, #0
   1bbf4:	mov	r5, r0
   1bbf8:	mov	r4, r1
   1bbfc:	bne	1bb84 <__assert_fail@plt+0x9818>
   1bc00:	ldr	r9, [fp, #8]
   1bc04:	add	r0, r0, #16
   1bc08:	str	r0, [sp, #52]	; 0x34
   1bc0c:	ldr	r5, [sp, #48]	; 0x30
   1bc10:	b	1bce0 <__assert_fail@plt+0x9974>
   1bc14:	str	r7, [sp, #56]	; 0x38
   1bc18:	str	r2, [sp, #52]	; 0x34
   1bc1c:	mov	r9, r7
   1bc20:	mov	sl, r2
   1bc24:	mvn	r4, #0
   1bc28:	b	1bc44 <__assert_fail@plt+0x98d8>
   1bc2c:	ldr	r9, [sp, #44]	; 0x2c
   1bc30:	rsb	r4, r7, #0
   1bc34:	b	1bc3c <__assert_fail@plt+0x98d0>
   1bc38:	mvn	r4, #0
   1bc3c:	ldr	r2, [sp, #36]	; 0x24
   1bc40:	ldr	r7, [sp, #40]	; 0x28
   1bc44:	ldr	r0, [sp, #48]	; 0x30
   1bc48:	ldr	r5, [r6, #24]
   1bc4c:	sub	r1, r7, r9
   1bc50:	cmp	r5, r1, asr #4
   1bc54:	bne	1ba38 <__assert_fail@plt+0x96cc>
   1bc58:	cmp	sl, r0
   1bc5c:	beq	1bccc <__assert_fail@plt+0x9960>
   1bc60:	ldr	r9, [fp, #8]
   1bc64:	cmp	r4, #0
   1bc68:	beq	1bcd0 <__assert_fail@plt+0x9964>
   1bc6c:	ldr	r0, [sp, #48]	; 0x30
   1bc70:	sub	r1, r4, #1
   1bc74:	mov	r2, #0
   1bc78:	sub	r0, r0, sl
   1bc7c:	add	r0, r0, #16
   1bc80:	add	r3, sl, r2
   1bc84:	cmp	r0, r2
   1bc88:	sub	r3, r3, #16
   1bc8c:	vld1.32	{d16-d17}, [r3]
   1bc90:	add	r3, r8, r2
   1bc94:	sub	r3, r3, #16
   1bc98:	vst1.32	{d16-d17}, [r3]
   1bc9c:	sub	r3, r2, #16
   1bca0:	beq	1bcb8 <__assert_fail@plt+0x994c>
   1bca4:	sub	r2, r1, #1
   1bca8:	cmp	r1, #0
   1bcac:	mov	r1, r2
   1bcb0:	mov	r2, r3
   1bcb4:	bne	1bc80 <__assert_fail@plt+0x9914>
   1bcb8:	add	r0, sl, r3
   1bcbc:	add	r8, r8, r3
   1bcc0:	str	r0, [sp, #52]	; 0x34
   1bcc4:	str	r0, [r6]
   1bcc8:	b	1bcd0 <__assert_fail@plt+0x9964>
   1bccc:	ldr	r9, [fp, #8]
   1bcd0:	ldr	r7, [sp, #20]
   1bcd4:	ldr	sl, [sp, #16]
   1bcd8:	ldr	r0, [sp, #28]
   1bcdc:	str	r8, [r0]
   1bce0:	ldr	r0, [sp, #40]	; 0x28
   1bce4:	ldr	r1, [sp, #56]	; 0x38
   1bce8:	ldr	r2, [sp, #52]	; 0x34
   1bcec:	sub	r0, r0, r1
   1bcf0:	ldr	r1, [sp, #36]	; 0x24
   1bcf4:	sub	r0, r5, r0, asr #4
   1bcf8:	str	r0, [r6, #24]
   1bcfc:	sub	r1, r1, r2
   1bd00:	ldr	r2, [r6, #20]
   1bd04:	sub	r2, r2, r1, asr #4
   1bd08:	str	r2, [r6, #20]
   1bd0c:	ldrb	r1, [r6, #44]	; 0x2c
   1bd10:	cmp	r1, #0
   1bd14:	bne	1bd74 <__assert_fail@plt+0x9a08>
   1bd18:	ldr	r4, [r6]
   1bd1c:	ldr	r3, [r6, #12]
   1bd20:	ldmib	r6, {r1, r5}
   1bd24:	cmp	r4, r5
   1bd28:	bne	1bd38 <__assert_fail@plt+0x99cc>
   1bd2c:	cmp	r2, #0
   1bd30:	beq	1bd40 <__assert_fail@plt+0x99d4>
   1bd34:	b	1bd74 <__assert_fail@plt+0x9a08>
   1bd38:	cmp	r0, #0
   1bd3c:	beq	1bd48 <__assert_fail@plt+0x99dc>
   1bd40:	cmp	r1, r3
   1bd44:	beq	1bd74 <__assert_fail@plt+0x9a08>
   1bd48:	mov	r0, r7
   1bd4c:	bl	11ebc <pthread_mutex_lock@plt>
   1bd50:	ldr	r0, [r9]
   1bd54:	mov	r1, r6
   1bd58:	bl	1f25c <__assert_fail@plt+0xcef0>
   1bd5c:	mov	r0, #1
   1bd60:	strb	r0, [r6, #44]	; 0x2c
   1bd64:	mov	r0, sl
   1bd68:	bl	1233c <pthread_cond_signal@plt>
   1bd6c:	mov	r0, r7
   1bd70:	bl	11e14 <pthread_mutex_unlock@plt>
   1bd74:	ldr	r0, [r6, #40]	; 0x28
   1bd78:	cmp	r0, #2
   1bd7c:	bcs	1b5f4 <__assert_fail@plt+0x9288>
   1bd80:	ldr	r0, [r6, #20]
   1bd84:	ldr	r1, [r6, #24]
   1bd88:	cmn	r0, r1
   1bd8c:	bne	1b618 <__assert_fail@plt+0x92ac>
   1bd90:	ldr	r4, [r6, #28]
   1bd94:	mov	r0, r7
   1bd98:	bl	11ebc <pthread_mutex_lock@plt>
   1bd9c:	ldr	r0, [r9]
   1bda0:	mov	r1, r4
   1bda4:	bl	1f25c <__assert_fail@plt+0xcef0>
   1bda8:	mov	r0, #1
   1bdac:	strb	r0, [r4, #44]	; 0x2c
   1bdb0:	mov	r0, sl
   1bdb4:	bl	1233c <pthread_cond_signal@plt>
   1bdb8:	mov	r0, r7
   1bdbc:	bl	11e14 <pthread_mutex_unlock@plt>
   1bdc0:	b	1b618 <__assert_fail@plt+0x92ac>
   1bdc4:	ldr	r0, [sp, #32]
   1bdc8:	bl	11e14 <pthread_mutex_unlock@plt>
   1bdcc:	mov	r0, r7
   1bdd0:	bl	11ebc <pthread_mutex_lock@plt>
   1bdd4:	ldr	r0, [r9]
   1bdd8:	mov	r1, r6
   1bddc:	bl	1f25c <__assert_fail@plt+0xcef0>
   1bde0:	mov	r0, #1
   1bde4:	strb	r0, [r6, #44]	; 0x2c
   1bde8:	mov	r0, sl
   1bdec:	bl	1233c <pthread_cond_signal@plt>
   1bdf0:	mov	r0, r7
   1bdf4:	bl	11e14 <pthread_mutex_unlock@plt>
   1bdf8:	sub	sp, fp, #28
   1bdfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be00:	movw	r2, #49044	; 0xbf94
   1be04:	sub	r0, fp, #32
   1be08:	add	r3, sp, #60	; 0x3c
   1be0c:	mov	r1, #0
   1be10:	movt	r2, #1
   1be14:	bl	12084 <pthread_create@plt>
   1be18:	ldr	r6, [r5, #20]
   1be1c:	cmp	r0, #0
   1be20:	beq	1be3c <__assert_fail@plt+0x9ad0>
   1be24:	ldr	r7, [r5, #24]
   1be28:	ldr	r0, [sp, #24]
   1be2c:	cmp	r7, #2
   1be30:	sub	r4, r8, r0, lsl #4
   1be34:	bcs	1b568 <__assert_fail@plt+0x91fc>
   1be38:	b	1b584 <__assert_fail@plt+0x9218>
   1be3c:	ldr	r0, [fp, #12]
   1be40:	ldr	r3, [r5, #36]	; 0x24
   1be44:	ldr	r2, [sp, #24]
   1be48:	str	r9, [sp]
   1be4c:	sub	r1, r4, r4, lsr #1
   1be50:	stmib	sp, {r0, sl}
   1be54:	sub	r0, r8, r6, lsl #4
   1be58:	bl	1b4f0 <__assert_fail@plt+0x9184>
   1be5c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1be60:	mov	r1, #0
   1be64:	bl	12288 <pthread_join@plt>
   1be68:	sub	sp, fp, #28
   1be6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be70:	ldr	r2, [r1, #40]	; 0x28
   1be74:	ldr	r3, [r0, #40]	; 0x28
   1be78:	cmp	r3, r2
   1be7c:	ldreq	r2, [r1, #20]
   1be80:	ldreq	r1, [r1, #24]
   1be84:	movne	r0, #0
   1be88:	addeq	r1, r1, r2
   1be8c:	ldreq	r2, [r0, #20]
   1be90:	ldreq	r0, [r0, #24]
   1be94:	addeq	r2, r0, r2
   1be98:	moveq	r0, #0
   1be9c:	cmpeq	r2, r1
   1bea0:	movwcc	r0, #1
   1bea4:	bx	lr
   1bea8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1beac:	add	fp, sp, #28
   1beb0:	sub	sp, sp, #12
   1beb4:	mov	r4, r1
   1beb8:	ldr	r1, [fp, #8]
   1bebc:	mov	r6, r2
   1bec0:	ldr	r2, [fp, #12]
   1bec4:	mov	r5, r3
   1bec8:	mov	sl, #0
   1becc:	mov	r8, #1
   1bed0:	rsb	r9, r1, #0
   1bed4:	ands	r1, r2, #1
   1bed8:	mov	r2, #24
   1bedc:	add	r7, r6, r9, lsl #4
   1bee0:	add	r3, r0, #12
   1bee4:	movwne	r2, #20
   1bee8:	cmp	r1, #0
   1beec:	ldr	r2, [r0, r2]
   1bef0:	addne	r3, r0, #8
   1bef4:	str	r7, [r4]
   1bef8:	sub	r1, r2, r2, lsr #1
   1befc:	lsr	r2, r2, #1
   1bf00:	sub	r6, r7, r2, lsl #4
   1bf04:	stmib	r4, {r6, r7}
   1bf08:	str	r6, [r4, #12]
   1bf0c:	str	r3, [r4, #16]
   1bf10:	str	r2, [r4, #20]
   1bf14:	str	r1, [r4, #24]
   1bf18:	str	r0, [r4, #28]
   1bf1c:	mov	r1, #0
   1bf20:	ldr	r0, [r0, #40]	; 0x28
   1bf24:	strb	sl, [r4, #44]	; 0x2c
   1bf28:	add	r0, r0, #1
   1bf2c:	str	r0, [r4, #40]	; 0x28
   1bf30:	add	r0, r4, #48	; 0x30
   1bf34:	bl	11f04 <pthread_mutex_init@plt>
   1bf38:	add	r1, r4, #72	; 0x48
   1bf3c:	cmp	r5, #2
   1bf40:	bcc	1bf7c <__assert_fail@plt+0x9c10>
   1bf44:	ldr	r0, [fp, #8]
   1bf48:	str	r1, [r4, #32]
   1bf4c:	lsr	r3, r5, #1
   1bf50:	mov	r2, r7
   1bf54:	stm	sp, {r0, r8}
   1bf58:	mov	r0, r4
   1bf5c:	bl	1bea8 <__assert_fail@plt+0x9b3c>
   1bf60:	mov	r1, r0
   1bf64:	str	r0, [r4, #36]	; 0x24
   1bf68:	mov	r0, r4
   1bf6c:	sub	r5, r5, r5, lsr #1
   1bf70:	mov	r2, #0
   1bf74:	mov	r4, r1
   1bf78:	b	1bed4 <__assert_fail@plt+0x9b68>
   1bf7c:	mov	r0, #0
   1bf80:	str	r0, [r4, #32]
   1bf84:	str	r0, [r4, #36]	; 0x24
   1bf88:	mov	r0, r1
   1bf8c:	sub	sp, fp, #28
   1bf90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf94:	push	{r4, sl, fp, lr}
   1bf98:	add	fp, sp, #8
   1bf9c:	sub	sp, sp, #16
   1bfa0:	ldr	ip, [r0]
   1bfa4:	ldmib	r0, {r1, r2, r3, lr}
   1bfa8:	ldr	r4, [r0, #20]
   1bfac:	ldr	r0, [r0, #24]
   1bfb0:	str	lr, [sp]
   1bfb4:	str	r0, [sp, #8]
   1bfb8:	mov	r0, ip
   1bfbc:	str	r4, [sp, #4]
   1bfc0:	bl	1b4f0 <__assert_fail@plt+0x9184>
   1bfc4:	mov	r0, #0
   1bfc8:	sub	sp, fp, #8
   1bfcc:	pop	{r4, sl, fp, pc}
   1bfd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bfd4:	add	fp, sp, #28
   1bfd8:	sub	sp, sp, #4
   1bfdc:	mov	r7, r3
   1bfe0:	mov	r9, r2
   1bfe4:	mov	r8, r0
   1bfe8:	cmp	r1, #2
   1bfec:	bne	1c04c <__assert_fail@plt+0x9ce0>
   1bff0:	sub	r6, r8, #16
   1bff4:	sub	r5, r8, #32
   1bff8:	mov	r0, r6
   1bffc:	mov	r1, r5
   1c000:	bl	17fac <__assert_fail@plt+0x5c40>
   1c004:	cmp	r7, #0
   1c008:	beq	1c0a4 <__assert_fail@plt+0x9d38>
   1c00c:	cmp	r0, #0
   1c010:	mvn	r1, #15
   1c014:	mvngt	r1, #31
   1c018:	cmp	r0, #0
   1c01c:	add	r1, r8, r1
   1c020:	vld1.32	{d16-d17}, [r1]
   1c024:	sub	r1, r9, #16
   1c028:	vst1.32	{d16-d17}, [r1]
   1c02c:	mvn	r1, #31
   1c030:	mvngt	r1, #15
   1c034:	add	r0, r8, r1
   1c038:	vld1.32	{d16-d17}, [r0]
   1c03c:	sub	r0, r9, #32
   1c040:	vst1.32	{d16-d17}, [r0]
   1c044:	sub	sp, fp, #28
   1c048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c04c:	mov	r5, r1
   1c050:	lsr	r4, r1, #1
   1c054:	mov	r1, #0
   1c058:	cmp	r7, #0
   1c05c:	mov	r3, r7
   1c060:	sub	r2, r1, r5, lsr #1
   1c064:	mov	r1, r7
   1c068:	sub	r6, r5, r5, lsr #1
   1c06c:	sub	r0, r8, r4, lsl #4
   1c070:	movne	r1, r2
   1c074:	str	r2, [sp]
   1c078:	add	r2, r9, r1, lsl #4
   1c07c:	mov	r1, r6
   1c080:	bl	1bfd0 <__assert_fail@plt+0x9c64>
   1c084:	cmp	r5, #4
   1c088:	bcc	1c0d0 <__assert_fail@plt+0x9d64>
   1c08c:	eor	r3, r7, #1
   1c090:	mov	r0, r8
   1c094:	mov	r1, r4
   1c098:	mov	r2, r9
   1c09c:	bl	1bfd0 <__assert_fail@plt+0x9c64>
   1c0a0:	b	1c0e8 <__assert_fail@plt+0x9d7c>
   1c0a4:	cmp	r0, #1
   1c0a8:	blt	1c1dc <__assert_fail@plt+0x9e70>
   1c0ac:	vld1.32	{d16-d17}, [r6]
   1c0b0:	sub	r0, r9, #16
   1c0b4:	vst1.32	{d16-d17}, [r0]
   1c0b8:	vld1.32	{d16-d17}, [r5]
   1c0bc:	vst1.32	{d16-d17}, [r6]
   1c0c0:	vld1.32	{d16-d17}, [r0]
   1c0c4:	vst1.32	{d16-d17}, [r5]
   1c0c8:	sub	sp, fp, #28
   1c0cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c0d0:	cmp	r7, #0
   1c0d4:	bne	1c0e8 <__assert_fail@plt+0x9d7c>
   1c0d8:	sub	r0, r8, #16
   1c0dc:	vld1.32	{d16-d17}, [r0]
   1c0e0:	sub	r0, r9, #16
   1c0e4:	vst1.32	{d16-d17}, [r0]
   1c0e8:	ldr	r0, [sp]
   1c0ec:	cmp	r7, #0
   1c0f0:	mov	sl, r9
   1c0f4:	movne	sl, r8
   1c0f8:	movne	r8, r9
   1c0fc:	add	r5, r8, r0, lsl #4
   1c100:	str	r4, [sp]
   1c104:	sub	r9, r5, #16
   1c108:	sub	r7, sl, #16
   1c10c:	mov	r4, #0
   1c110:	add	r1, r9, r4
   1c114:	mov	r0, r7
   1c118:	bl	17fac <__assert_fail@plt+0x5c40>
   1c11c:	add	r1, r8, r4
   1c120:	cmp	r0, #0
   1c124:	sub	r1, r1, #16
   1c128:	ble	1c14c <__assert_fail@plt+0x9de0>
   1c12c:	add	r0, r5, r4
   1c130:	sub	r4, r4, #16
   1c134:	subs	r6, r6, #1
   1c138:	sub	r0, r0, #16
   1c13c:	vld1.32	{d16-d17}, [r0]
   1c140:	vst1.32	{d16-d17}, [r1]
   1c144:	bne	1c110 <__assert_fail@plt+0x9da4>
   1c148:	b	1c170 <__assert_fail@plt+0x9e04>
   1c14c:	vld1.32	{d16-d17}, [r7]
   1c150:	add	r5, r5, r4
   1c154:	ldr	r4, [sp]
   1c158:	mov	r8, r1
   1c15c:	mov	sl, r7
   1c160:	subs	r4, r4, #1
   1c164:	vst1.32	{d16-d17}, [r1]
   1c168:	bne	1c100 <__assert_fail@plt+0x9d94>
   1c16c:	b	1c1dc <__assert_fail@plt+0x9e70>
   1c170:	ldr	r1, [sp]
   1c174:	tst	r1, #1
   1c178:	bne	1c190 <__assert_fail@plt+0x9e24>
   1c17c:	add	r2, r8, r4
   1c180:	mov	r0, r1
   1c184:	cmp	r1, #1
   1c188:	bne	1c1b0 <__assert_fail@plt+0x9e44>
   1c18c:	b	1c1dc <__assert_fail@plt+0x9e70>
   1c190:	sub	sl, sl, #16
   1c194:	add	r0, r8, r4
   1c198:	vld1.32	{d16-d17}, [sl]
   1c19c:	sub	r2, r0, #16
   1c1a0:	sub	r0, r1, #1
   1c1a4:	vst1.32	{d16-d17}, [r2]
   1c1a8:	cmp	r1, #1
   1c1ac:	beq	1c1dc <__assert_fail@plt+0x9e70>
   1c1b0:	sub	r1, sl, #16
   1c1b4:	sub	r2, r2, #16
   1c1b8:	mvn	r3, #31
   1c1bc:	sub	r7, r1, #16
   1c1c0:	vld1.32	{d16-d17}, [r1], r3
   1c1c4:	sub	r6, r2, #16
   1c1c8:	subs	r0, r0, #2
   1c1cc:	vst1.32	{d16-d17}, [r2], r3
   1c1d0:	vld1.32	{d16-d17}, [r7]
   1c1d4:	vst1.32	{d16-d17}, [r6]
   1c1d8:	bne	1c1bc <__assert_fail@plt+0x9e50>
   1c1dc:	sub	sp, fp, #28
   1c1e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c1e4:	mov	r0, #1
   1c1e8:	b	12470 <__assert_fail@plt+0x104>
   1c1ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c1f0:	add	fp, sp, #28
   1c1f4:	sub	sp, sp, #12
   1c1f8:	mov	r4, r3
   1c1fc:	mov	r9, r2
   1c200:	mov	r7, r1
   1c204:	mov	r8, r0
   1c208:	bl	12174 <strlen@plt>
   1c20c:	ldr	r6, [r7]
   1c210:	cmp	r6, #0
   1c214:	beq	1c2c0 <__assert_fail@plt+0x9f54>
   1c218:	mov	r5, r0
   1c21c:	cmp	r9, #0
   1c220:	beq	1c2d0 <__assert_fail@plt+0x9f64>
   1c224:	add	r0, r7, #4
   1c228:	mvn	sl, #0
   1c22c:	mov	r7, #0
   1c230:	str	r9, [sp]
   1c234:	str	r0, [sp, #8]
   1c238:	mov	r0, #0
   1c23c:	str	r0, [sp, #4]
   1c240:	mov	r0, r9
   1c244:	b	1c288 <__assert_fail@plt+0x9f1c>
   1c248:	ldr	r0, [sp]
   1c24c:	mov	r1, r9
   1c250:	mov	r2, r4
   1c254:	mla	r0, sl, r4, r0
   1c258:	bl	1215c <bcmp@plt>
   1c25c:	ldr	r1, [sp, #4]
   1c260:	cmp	r0, #0
   1c264:	movwne	r0, #1
   1c268:	orr	r1, r1, r0
   1c26c:	str	r1, [sp, #4]
   1c270:	ldr	r0, [sp, #8]
   1c274:	add	r9, r9, r4
   1c278:	ldr	r6, [r0, r7, lsl #2]
   1c27c:	add	r7, r7, #1
   1c280:	cmp	r6, #0
   1c284:	beq	1c344 <__assert_fail@plt+0x9fd8>
   1c288:	mov	r0, r6
   1c28c:	mov	r1, r8
   1c290:	mov	r2, r5
   1c294:	bl	12330 <strncmp@plt>
   1c298:	cmp	r0, #0
   1c29c:	bne	1c270 <__assert_fail@plt+0x9f04>
   1c2a0:	mov	r0, r6
   1c2a4:	bl	12174 <strlen@plt>
   1c2a8:	cmp	r0, r5
   1c2ac:	beq	1c2c4 <__assert_fail@plt+0x9f58>
   1c2b0:	cmn	sl, #1
   1c2b4:	bne	1c248 <__assert_fail@plt+0x9edc>
   1c2b8:	mov	sl, r7
   1c2bc:	b	1c270 <__assert_fail@plt+0x9f04>
   1c2c0:	mvn	r7, #0
   1c2c4:	mov	r0, r7
   1c2c8:	sub	sp, fp, #28
   1c2cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c2d0:	add	r4, r7, #4
   1c2d4:	mov	r0, #0
   1c2d8:	mvn	r9, #0
   1c2dc:	mvn	sl, #0
   1c2e0:	mov	r7, #0
   1c2e4:	str	r0, [sp, #4]
   1c2e8:	b	1c318 <__assert_fail@plt+0x9fac>
   1c2ec:	ldr	r1, [sp, #4]
   1c2f0:	subs	r0, sl, r9
   1c2f4:	movwne	r0, #1
   1c2f8:	cmn	sl, #1
   1c2fc:	moveq	sl, r7
   1c300:	orr	r1, r1, r0
   1c304:	str	r1, [sp, #4]
   1c308:	ldr	r6, [r4, r7, lsl #2]
   1c30c:	add	r7, r7, #1
   1c310:	cmp	r6, #0
   1c314:	beq	1c344 <__assert_fail@plt+0x9fd8>
   1c318:	mov	r0, r6
   1c31c:	mov	r1, r8
   1c320:	mov	r2, r5
   1c324:	bl	12330 <strncmp@plt>
   1c328:	cmp	r0, #0
   1c32c:	bne	1c308 <__assert_fail@plt+0x9f9c>
   1c330:	mov	r0, r6
   1c334:	bl	12174 <strlen@plt>
   1c338:	cmp	r0, r5
   1c33c:	bne	1c2ec <__assert_fail@plt+0x9f80>
   1c340:	b	1c2c4 <__assert_fail@plt+0x9f58>
   1c344:	ldr	r0, [sp, #4]
   1c348:	tst	r0, #1
   1c34c:	mvnne	sl, #1
   1c350:	mov	r0, sl
   1c354:	sub	sp, fp, #28
   1c358:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c35c:	push	{r4, r5, r6, r7, fp, lr}
   1c360:	add	fp, sp, #16
   1c364:	mov	r5, r0
   1c368:	ldr	r0, [r1]
   1c36c:	mvn	r4, #0
   1c370:	cmp	r0, #0
   1c374:	beq	1c3a0 <__assert_fail@plt+0xa034>
   1c378:	add	r7, r1, #4
   1c37c:	mov	r6, #0
   1c380:	mov	r1, r5
   1c384:	bl	11e50 <strcmp@plt>
   1c388:	cmp	r0, #0
   1c38c:	beq	1c3a8 <__assert_fail@plt+0xa03c>
   1c390:	ldr	r0, [r7, r6, lsl #2]
   1c394:	add	r6, r6, #1
   1c398:	cmp	r0, #0
   1c39c:	bne	1c380 <__assert_fail@plt+0xa014>
   1c3a0:	mov	r0, r4
   1c3a4:	pop	{r4, r5, r6, r7, fp, pc}
   1c3a8:	mov	r0, r6
   1c3ac:	pop	{r4, r5, r6, r7, fp, pc}
   1c3b0:	push	{r4, r5, r6, sl, fp, lr}
   1c3b4:	add	fp, sp, #16
   1c3b8:	sub	sp, sp, #8
   1c3bc:	mov	r5, r0
   1c3c0:	movw	r0, #33631	; 0x835f
   1c3c4:	mov	r4, r1
   1c3c8:	movw	r1, #33658	; 0x837a
   1c3cc:	cmn	r2, #1
   1c3d0:	mov	r2, #5
   1c3d4:	movt	r0, #2
   1c3d8:	movt	r1, #2
   1c3dc:	moveq	r1, r0
   1c3e0:	mov	r0, #0
   1c3e4:	bl	11f7c <dcgettext@plt>
   1c3e8:	mov	r6, r0
   1c3ec:	mov	r0, #0
   1c3f0:	mov	r1, #8
   1c3f4:	mov	r2, r4
   1c3f8:	bl	21ae0 <__assert_fail@plt+0xf774>
   1c3fc:	mov	r4, r0
   1c400:	mov	r0, #1
   1c404:	mov	r1, r5
   1c408:	bl	220a0 <__assert_fail@plt+0xfd34>
   1c40c:	str	r0, [sp]
   1c410:	mov	r0, #0
   1c414:	mov	r1, #0
   1c418:	mov	r2, r6
   1c41c:	mov	r3, r4
   1c420:	bl	120a8 <error@plt>
   1c424:	sub	sp, fp, #16
   1c428:	pop	{r4, r5, r6, sl, fp, pc}
   1c42c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c430:	add	fp, sp, #28
   1c434:	sub	sp, sp, #4
   1c438:	mov	sl, r1
   1c43c:	movw	r1, #33687	; 0x8397
   1c440:	mov	r4, r2
   1c444:	mov	r6, r0
   1c448:	mov	r0, #0
   1c44c:	mov	r2, #5
   1c450:	mov	r8, #0
   1c454:	movt	r1, #2
   1c458:	bl	11f7c <dcgettext@plt>
   1c45c:	movw	r1, #37584	; 0x92d0
   1c460:	movt	r1, #3
   1c464:	ldr	r1, [r1]
   1c468:	bl	11e38 <fputs_unlocked@plt>
   1c46c:	ldr	r7, [r6]
   1c470:	cmp	r7, #0
   1c474:	beq	1c530 <__assert_fail@plt+0xa1c4>
   1c478:	add	r0, r6, #4
   1c47c:	mov	r9, #0
   1c480:	mov	r6, #0
   1c484:	str	r0, [sp]
   1c488:	cmp	r9, #0
   1c48c:	bne	1c4e4 <__assert_fail@plt+0xa178>
   1c490:	mov	r5, #0
   1c494:	movw	r0, #37584	; 0x92d0
   1c498:	movt	r0, #3
   1c49c:	ldr	r6, [r0]
   1c4a0:	mov	r0, r7
   1c4a4:	bl	220b0 <__assert_fail@plt+0xfd44>
   1c4a8:	movw	r2, #33708	; 0x83ac
   1c4ac:	mov	r3, r0
   1c4b0:	mov	r0, r6
   1c4b4:	mov	r1, #1
   1c4b8:	movt	r2, #2
   1c4bc:	bl	121f8 <__fprintf_chk@plt>
   1c4c0:	add	r6, sl, r5
   1c4c4:	ldr	r0, [sp]
   1c4c8:	add	r8, r8, r4
   1c4cc:	ldr	r7, [r0, -r9, lsl #2]
   1c4d0:	sub	r9, r9, #1
   1c4d4:	cmp	r7, #0
   1c4d8:	beq	1c530 <__assert_fail@plt+0xa1c4>
   1c4dc:	cmp	r9, #0
   1c4e0:	beq	1c490 <__assert_fail@plt+0xa124>
   1c4e4:	add	r1, sl, r8
   1c4e8:	mov	r0, r6
   1c4ec:	mov	r2, r4
   1c4f0:	bl	1215c <bcmp@plt>
   1c4f4:	cmp	r0, #0
   1c4f8:	mov	r5, r8
   1c4fc:	bne	1c494 <__assert_fail@plt+0xa128>
   1c500:	movw	r0, #37584	; 0x92d0
   1c504:	movt	r0, #3
   1c508:	ldr	r5, [r0]
   1c50c:	mov	r0, r7
   1c510:	bl	220b0 <__assert_fail@plt+0xfd44>
   1c514:	movw	r2, #33716	; 0x83b4
   1c518:	mov	r3, r0
   1c51c:	mov	r0, r5
   1c520:	mov	r1, #1
   1c524:	movt	r2, #2
   1c528:	bl	121f8 <__fprintf_chk@plt>
   1c52c:	b	1c4c4 <__assert_fail@plt+0xa158>
   1c530:	movw	r0, #37584	; 0x92d0
   1c534:	movt	r0, #3
   1c538:	ldr	r0, [r0]
   1c53c:	ldr	r1, [r0, #20]
   1c540:	ldr	r2, [r0, #24]
   1c544:	cmp	r1, r2
   1c548:	addcc	r2, r1, #1
   1c54c:	strcc	r2, [r0, #20]
   1c550:	movcc	r0, #10
   1c554:	strbcc	r0, [r1]
   1c558:	subcc	sp, fp, #28
   1c55c:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c560:	mov	r1, #10
   1c564:	sub	sp, fp, #28
   1c568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c56c:	b	12240 <__overflow@plt>
   1c570:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c574:	add	fp, sp, #28
   1c578:	sub	sp, sp, #12
   1c57c:	mov	sl, r0
   1c580:	ldr	r0, [fp, #16]
   1c584:	ldr	r9, [fp, #8]
   1c588:	mov	r5, r3
   1c58c:	mov	r8, r2
   1c590:	mov	r6, r1
   1c594:	cmp	r0, #0
   1c598:	beq	1c5c8 <__assert_fail@plt+0xa25c>
   1c59c:	mov	r0, r6
   1c5a0:	mov	r1, r8
   1c5a4:	mov	r2, r5
   1c5a8:	mov	r3, r9
   1c5ac:	bl	1c1ec <__assert_fail@plt+0x9e80>
   1c5b0:	mov	r4, r0
   1c5b4:	cmn	r4, #1
   1c5b8:	ble	1c618 <__assert_fail@plt+0xa2ac>
   1c5bc:	mov	r0, r4
   1c5c0:	sub	sp, fp, #28
   1c5c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c5c8:	ldr	r0, [r8]
   1c5cc:	movw	r7, #33631	; 0x835f
   1c5d0:	str	r5, [sp, #8]
   1c5d4:	movt	r7, #2
   1c5d8:	cmp	r0, #0
   1c5dc:	beq	1c630 <__assert_fail@plt+0xa2c4>
   1c5e0:	add	r5, r8, #4
   1c5e4:	mov	r4, #0
   1c5e8:	mov	r1, r6
   1c5ec:	bl	11e50 <strcmp@plt>
   1c5f0:	cmp	r0, #0
   1c5f4:	beq	1c60c <__assert_fail@plt+0xa2a0>
   1c5f8:	ldr	r0, [r5, r4, lsl #2]
   1c5fc:	add	r4, r4, #1
   1c600:	cmp	r0, #0
   1c604:	bne	1c5e8 <__assert_fail@plt+0xa27c>
   1c608:	b	1c630 <__assert_fail@plt+0xa2c4>
   1c60c:	ldr	r5, [sp, #8]
   1c610:	cmn	r4, #1
   1c614:	bgt	1c5bc <__assert_fail@plt+0xa250>
   1c618:	movw	r0, #33631	; 0x835f
   1c61c:	movw	r7, #33658	; 0x837a
   1c620:	str	r5, [sp, #8]
   1c624:	movt	r0, #2
   1c628:	movt	r7, #2
   1c62c:	moveq	r7, r0
   1c630:	ldr	r5, [fp, #12]
   1c634:	mov	r0, #0
   1c638:	mov	r1, r7
   1c63c:	mov	r2, #5
   1c640:	bl	11f7c <dcgettext@plt>
   1c644:	mov	r4, r0
   1c648:	mov	r0, #0
   1c64c:	mov	r1, #8
   1c650:	mov	r2, r6
   1c654:	bl	21ae0 <__assert_fail@plt+0xf774>
   1c658:	mov	r6, r0
   1c65c:	mov	r0, #1
   1c660:	mov	r1, sl
   1c664:	bl	220a0 <__assert_fail@plt+0xfd34>
   1c668:	str	r0, [sp]
   1c66c:	mov	r0, #0
   1c670:	mov	r1, #0
   1c674:	mov	r2, r4
   1c678:	mov	r3, r6
   1c67c:	bl	120a8 <error@plt>
   1c680:	ldr	r1, [sp, #8]
   1c684:	mov	r0, r8
   1c688:	mov	r2, r9
   1c68c:	bl	1c42c <__assert_fail@plt+0xa0c0>
   1c690:	blx	r5
   1c694:	mvn	r4, #0
   1c698:	mov	r0, r4
   1c69c:	sub	sp, fp, #28
   1c6a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c6a4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c6a8:	add	fp, sp, #24
   1c6ac:	ldr	r6, [r1]
   1c6b0:	cmp	r6, #0
   1c6b4:	beq	1c718 <__assert_fail@plt+0xa3ac>
   1c6b8:	mov	r8, r1
   1c6bc:	mov	r7, r2
   1c6c0:	mov	r1, r2
   1c6c4:	mov	r2, r3
   1c6c8:	mov	r4, r3
   1c6cc:	mov	r9, r0
   1c6d0:	bl	1215c <bcmp@plt>
   1c6d4:	cmp	r0, #0
   1c6d8:	beq	1c710 <__assert_fail@plt+0xa3a4>
   1c6dc:	add	r7, r7, r4
   1c6e0:	add	r5, r8, #4
   1c6e4:	ldr	r6, [r5]
   1c6e8:	cmp	r6, #0
   1c6ec:	beq	1c718 <__assert_fail@plt+0xa3ac>
   1c6f0:	mov	r0, r9
   1c6f4:	mov	r1, r7
   1c6f8:	mov	r2, r4
   1c6fc:	bl	1215c <bcmp@plt>
   1c700:	add	r7, r7, r4
   1c704:	add	r5, r5, #4
   1c708:	cmp	r0, #0
   1c70c:	bne	1c6e4 <__assert_fail@plt+0xa378>
   1c710:	mov	r0, r6
   1c714:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c718:	mov	r6, #0
   1c71c:	mov	r0, r6
   1c720:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1c724:	movw	r1, #39104	; 0x98c0
   1c728:	movt	r1, #3
   1c72c:	str	r0, [r1, #4]
   1c730:	bx	lr
   1c734:	movw	r1, #39104	; 0x98c0
   1c738:	movt	r1, #3
   1c73c:	strb	r0, [r1]
   1c740:	bx	lr
   1c744:	push	{r4, r5, r6, sl, fp, lr}
   1c748:	add	fp, sp, #16
   1c74c:	sub	sp, sp, #8
   1c750:	movw	r0, #37596	; 0x92dc
   1c754:	movt	r0, #3
   1c758:	ldr	r0, [r0]
   1c75c:	bl	252b4 <__assert_fail@plt+0x12f48>
   1c760:	cmp	r0, #0
   1c764:	beq	1c78c <__assert_fail@plt+0xa420>
   1c768:	movw	r5, #39104	; 0x98c0
   1c76c:	movt	r5, #3
   1c770:	ldrb	r0, [r5]
   1c774:	cmp	r0, #0
   1c778:	beq	1c7b8 <__assert_fail@plt+0xa44c>
   1c77c:	bl	12198 <__errno_location@plt>
   1c780:	ldr	r0, [r0]
   1c784:	cmp	r0, #32
   1c788:	bne	1c7b8 <__assert_fail@plt+0xa44c>
   1c78c:	movw	r0, #37584	; 0x92d0
   1c790:	movt	r0, #3
   1c794:	ldr	r0, [r0]
   1c798:	bl	252b4 <__assert_fail@plt+0x12f48>
   1c79c:	cmp	r0, #0
   1c7a0:	subeq	sp, fp, #16
   1c7a4:	popeq	{r4, r5, r6, sl, fp, pc}
   1c7a8:	movw	r0, #37488	; 0x9270
   1c7ac:	movt	r0, #3
   1c7b0:	ldr	r0, [r0]
   1c7b4:	bl	11ee0 <_exit@plt>
   1c7b8:	movw	r1, #33721	; 0x83b9
   1c7bc:	mov	r0, #0
   1c7c0:	mov	r2, #5
   1c7c4:	movt	r1, #2
   1c7c8:	bl	11f7c <dcgettext@plt>
   1c7cc:	ldr	r6, [r5, #4]
   1c7d0:	mov	r4, r0
   1c7d4:	bl	12198 <__errno_location@plt>
   1c7d8:	ldr	r5, [r0]
   1c7dc:	cmp	r6, #0
   1c7e0:	bne	1c7fc <__assert_fail@plt+0xa490>
   1c7e4:	movw	r2, #33718	; 0x83b6
   1c7e8:	mov	r0, #0
   1c7ec:	mov	r1, r5
   1c7f0:	mov	r3, r4
   1c7f4:	movt	r2, #2
   1c7f8:	b	1c81c <__assert_fail@plt+0xa4b0>
   1c7fc:	mov	r0, r6
   1c800:	bl	21d28 <__assert_fail@plt+0xf9bc>
   1c804:	movw	r2, #32681	; 0x7fa9
   1c808:	mov	r3, r0
   1c80c:	str	r4, [sp]
   1c810:	mov	r0, #0
   1c814:	mov	r1, r5
   1c818:	movt	r2, #2
   1c81c:	bl	120a8 <error@plt>
   1c820:	movw	r0, #37488	; 0x9270
   1c824:	movt	r0, #3
   1c828:	ldr	r0, [r0]
   1c82c:	bl	11ee0 <_exit@plt>
   1c830:	add	r2, pc, #40	; 0x28
   1c834:	mov	r1, #0
   1c838:	vld1.64	{d16-d17}, [r2 :128]
   1c83c:	mov	r2, #20
   1c840:	str	r1, [r0, #24]
   1c844:	str	r1, [r0, #16]
   1c848:	vst1.32	{d16-d17}, [r0], r2
   1c84c:	str	r1, [r0]
   1c850:	bx	lr
   1c854:	nop	{0}
   1c858:	nop	{0}
   1c85c:	nop	{0}
   1c860:	strbvs	r2, [r5, -r1, lsl #6]
   1c864:	svc	0x00cdab89
   1c868:	ldmls	sl!, {r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, lr, pc}
   1c86c:	eorsne	r5, r2, r6, ror r4
   1c870:	ldr	r2, [r0]
   1c874:	str	r2, [r1]
   1c878:	ldr	r2, [r0, #4]
   1c87c:	str	r2, [r1, #4]
   1c880:	ldr	r2, [r0, #8]
   1c884:	str	r2, [r1, #8]
   1c888:	ldr	r0, [r0, #12]
   1c88c:	str	r0, [r1, #12]
   1c890:	mov	r0, r1
   1c894:	bx	lr
   1c898:	push	{r4, r5, r6, r7, fp, lr}
   1c89c:	add	fp, sp, #16
   1c8a0:	mov	r4, r1
   1c8a4:	ldr	r1, [r0, #24]
   1c8a8:	ldr	r2, [r0, #16]
   1c8ac:	mov	r5, r0
   1c8b0:	mov	r7, #32
   1c8b4:	add	r0, r2, r1
   1c8b8:	cmp	r1, #56	; 0x38
   1c8bc:	movwcc	r7, #16
   1c8c0:	cmp	r0, r2
   1c8c4:	str	r0, [r5, #16]
   1c8c8:	bcs	1c8d8 <__assert_fail@plt+0xa56c>
   1c8cc:	ldr	r2, [r5, #20]
   1c8d0:	add	r2, r2, #1
   1c8d4:	str	r2, [r5, #20]
   1c8d8:	mvn	r2, #7
   1c8dc:	add	r6, r5, #28
   1c8e0:	lsl	r3, r0, #3
   1c8e4:	add	r2, r2, r7, lsl #2
   1c8e8:	add	ip, r6, r7, lsl #2
   1c8ec:	str	r3, [r6, r2]
   1c8f0:	sub	r2, r2, r1
   1c8f4:	ldr	r3, [r5, #20]
   1c8f8:	lsl	r3, r3, #3
   1c8fc:	orr	r0, r3, r0, lsr #29
   1c900:	str	r0, [ip, #-4]
   1c904:	add	r0, r6, r1
   1c908:	movw	r1, #33736	; 0x83c8
   1c90c:	movt	r1, #2
   1c910:	bl	11eec <memcpy@plt>
   1c914:	lsl	r1, r7, #2
   1c918:	mov	r0, r6
   1c91c:	mov	r2, r5
   1c920:	bl	1c94c <__assert_fail@plt+0xa5e0>
   1c924:	ldr	r0, [r5]
   1c928:	str	r0, [r4]
   1c92c:	ldr	r0, [r5, #4]
   1c930:	str	r0, [r4, #4]
   1c934:	ldr	r0, [r5, #8]
   1c938:	str	r0, [r4, #8]
   1c93c:	ldr	r0, [r5, #12]
   1c940:	str	r0, [r4, #12]
   1c944:	mov	r0, r4
   1c948:	pop	{r4, r5, r6, r7, fp, pc}
   1c94c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c950:	add	fp, sp, #28
   1c954:	sub	sp, sp, #88	; 0x58
   1c958:	ldr	r3, [r2, #16]
   1c95c:	adds	r3, r3, r1
   1c960:	bic	r1, r1, #3
   1c964:	str	r3, [r2, #16]
   1c968:	add	lr, r0, r1
   1c96c:	ldr	r3, [r2, #20]
   1c970:	adc	r3, r3, #0
   1c974:	cmp	lr, r0
   1c978:	str	r3, [r2, #20]
   1c97c:	ldr	r1, [r2, #12]
   1c980:	ldm	r2, {r3, r4, ip}
   1c984:	str	r2, [sp]
   1c988:	bls	1d39c <__assert_fail@plt+0xb030>
   1c98c:	mov	sl, r0
   1c990:	str	lr, [sp, #4]
   1c994:	eor	r2, ip, r1
   1c998:	ldr	r0, [sl]
   1c99c:	str	r3, [sp, #24]
   1c9a0:	mov	r6, r4
   1c9a4:	str	r1, [sp, #28]
   1c9a8:	str	ip, [fp, #-40]	; 0xffffffd8
   1c9ac:	ldr	r5, [sl, #8]
   1c9b0:	ldr	lr, [sl, #12]
   1c9b4:	ldr	r8, [sl, #36]	; 0x24
   1c9b8:	and	r2, r4, r2
   1c9bc:	ldr	r4, [sl, #4]
   1c9c0:	eor	r7, r6, ip
   1c9c4:	eor	r2, r2, r1
   1c9c8:	add	r2, r3, r2
   1c9cc:	movw	r3, #42104	; 0xa478
   1c9d0:	movt	r3, #55146	; 0xd76a
   1c9d4:	add	r2, r2, r0
   1c9d8:	str	r5, [fp, #-36]	; 0xffffffdc
   1c9dc:	str	r0, [fp, #-44]	; 0xffffffd4
   1c9e0:	ldr	r0, [sl, #16]
   1c9e4:	str	lr, [fp, #-52]	; 0xffffffcc
   1c9e8:	str	r8, [fp, #-56]	; 0xffffffc8
   1c9ec:	str	r4, [fp, #-32]	; 0xffffffe0
   1c9f0:	add	r2, r2, r3
   1c9f4:	mov	r3, r6
   1c9f8:	add	r2, r6, r2, ror #25
   1c9fc:	add	r6, r1, r4
   1ca00:	movw	r1, #46934	; 0xb756
   1ca04:	str	r3, [sp, #20]
   1ca08:	movt	r1, #59591	; 0xe8c7
   1ca0c:	str	r0, [sp, #44]	; 0x2c
   1ca10:	and	r7, r2, r7
   1ca14:	eor	r7, r7, ip
   1ca18:	ldr	ip, [sl, #24]
   1ca1c:	add	r7, r6, r7
   1ca20:	eor	r6, r2, r3
   1ca24:	add	r7, r7, r1
   1ca28:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1ca2c:	add	r7, r2, r7, ror #20
   1ca30:	str	ip, [sp, #48]	; 0x30
   1ca34:	and	r6, r7, r6
   1ca38:	add	r4, r1, r5
   1ca3c:	movw	r1, #28891	; 0x70db
   1ca40:	eor	r6, r6, r3
   1ca44:	add	r5, r3, lr
   1ca48:	movt	r1, #9248	; 0x2420
   1ca4c:	add	r6, r4, r6
   1ca50:	add	r6, r6, r1
   1ca54:	movw	r1, #52974	; 0xceee
   1ca58:	add	r4, r7, r6, ror #15
   1ca5c:	eor	r6, r7, r2
   1ca60:	movt	r1, #49597	; 0xc1bd
   1ca64:	and	r6, r4, r6
   1ca68:	eor	r6, r6, r2
   1ca6c:	add	r2, r0, r2
   1ca70:	ldr	r0, [sl, #20]
   1ca74:	add	r6, r5, r6
   1ca78:	add	r6, r6, r1
   1ca7c:	movw	r1, #4015	; 0xfaf
   1ca80:	add	r5, r4, r6, ror #10
   1ca84:	eor	r6, r4, r7
   1ca88:	movt	r1, #62844	; 0xf57c
   1ca8c:	str	r0, [sp, #32]
   1ca90:	and	r6, r5, r6
   1ca94:	eor	r6, r6, r7
   1ca98:	add	r7, r0, r7
   1ca9c:	ldr	r0, [sl, #28]
   1caa0:	add	r2, r2, r6
   1caa4:	movw	r6, #38145	; 0x9501
   1caa8:	add	r2, r2, r1
   1caac:	movw	r1, #50730	; 0xc62a
   1cab0:	movt	r6, #64838	; 0xfd46
   1cab4:	add	r3, r5, r2, ror #25
   1cab8:	eor	r2, r5, r4
   1cabc:	movt	r1, #18311	; 0x4787
   1cac0:	str	r0, [sp, #16]
   1cac4:	and	r2, r3, r2
   1cac8:	eor	r2, r2, r4
   1cacc:	add	r4, ip, r4
   1cad0:	add	r2, r7, r2
   1cad4:	add	r2, r2, r1
   1cad8:	movw	r1, #17939	; 0x4613
   1cadc:	add	r7, r3, r2, ror #20
   1cae0:	eor	r2, r3, r5
   1cae4:	movt	r1, #43056	; 0xa830
   1cae8:	and	r2, r7, r2
   1caec:	eor	r2, r2, r5
   1caf0:	add	r5, r0, r5
   1caf4:	ldr	r0, [sl, #32]
   1caf8:	add	r2, r4, r2
   1cafc:	add	r2, r2, r1
   1cb00:	add	r4, r7, r2, ror #15
   1cb04:	eor	r2, r7, r3
   1cb08:	str	r0, [sp, #40]	; 0x28
   1cb0c:	and	r2, r4, r2
   1cb10:	eor	r1, r2, r3
   1cb14:	add	r3, r0, r3
   1cb18:	ldr	r0, [sl, #40]	; 0x28
   1cb1c:	ldr	r2, [sl, #44]	; 0x2c
   1cb20:	add	r1, r5, r1
   1cb24:	eor	r5, r4, r7
   1cb28:	add	r1, r1, r6
   1cb2c:	movw	r6, #39128	; 0x98d8
   1cb30:	add	r1, r4, r1, ror #10
   1cb34:	movt	r6, #27008	; 0x6980
   1cb38:	str	r2, [fp, #-48]	; 0xffffffd0
   1cb3c:	str	r0, [sp, #52]	; 0x34
   1cb40:	and	r5, r1, r5
   1cb44:	eor	lr, r5, r7
   1cb48:	movw	r5, #63407	; 0xf7af
   1cb4c:	add	r7, r8, r7
   1cb50:	add	r3, r3, lr
   1cb54:	movt	r5, #35652	; 0x8b44
   1cb58:	add	r3, r3, r6
   1cb5c:	add	lr, r1, r3, ror #25
   1cb60:	eor	r3, r1, r4
   1cb64:	and	r3, lr, r3
   1cb68:	eor	r3, r3, r4
   1cb6c:	add	r4, r0, r4
   1cb70:	add	r3, r7, r3
   1cb74:	add	r3, r3, r5
   1cb78:	add	r7, lr, r3, ror #20
   1cb7c:	eor	r3, lr, r1
   1cb80:	and	r3, r7, r3
   1cb84:	eor	r5, r7, lr
   1cb88:	eor	r9, r3, r1
   1cb8c:	movw	r3, #42063	; 0xa44f
   1cb90:	add	r1, r2, r1
   1cb94:	add	r4, r4, r9
   1cb98:	sub	r4, r4, r3
   1cb9c:	movw	r3, #55230	; 0xd7be
   1cba0:	add	r4, r7, r4, ror #15
   1cba4:	movt	r3, #35164	; 0x895c
   1cba8:	and	r5, r4, r5
   1cbac:	eor	r5, r5, lr
   1cbb0:	add	r1, r1, r5
   1cbb4:	add	r1, r1, r3
   1cbb8:	ldr	r3, [sl, #48]	; 0x30
   1cbbc:	add	r5, r4, r1, ror #10
   1cbc0:	eor	r1, r4, r7
   1cbc4:	and	r1, r5, r1
   1cbc8:	str	r3, [sp, #56]	; 0x38
   1cbcc:	add	r6, r3, lr
   1cbd0:	movw	r3, #4386	; 0x1122
   1cbd4:	eor	r1, r1, r7
   1cbd8:	movt	r3, #27536	; 0x6b90
   1cbdc:	add	r1, r6, r1
   1cbe0:	add	r1, r1, r3
   1cbe4:	ldr	r3, [sl, #56]	; 0x38
   1cbe8:	add	r6, r5, r1, ror #25
   1cbec:	eor	r1, r5, r4
   1cbf0:	and	r1, r6, r1
   1cbf4:	eor	lr, r1, r4
   1cbf8:	ldr	r1, [sl, #52]	; 0x34
   1cbfc:	add	r4, r3, r4
   1cc00:	mov	r9, r3
   1cc04:	str	r3, [sp, #8]
   1cc08:	movw	r3, #17294	; 0x438e
   1cc0c:	movt	r3, #42617	; 0xa679
   1cc10:	add	r7, r1, r7
   1cc14:	str	r1, [sp, #36]	; 0x24
   1cc18:	movw	r1, #29075	; 0x7193
   1cc1c:	movt	r1, #64920	; 0xfd98
   1cc20:	add	r7, r7, lr
   1cc24:	add	r7, r7, r1
   1cc28:	eor	r1, r6, r5
   1cc2c:	add	r7, r6, r7, ror #20
   1cc30:	and	r1, r7, r1
   1cc34:	eor	r1, r1, r5
   1cc38:	add	r1, r4, r1
   1cc3c:	eor	r4, r7, r6
   1cc40:	add	r1, r1, r3
   1cc44:	ldr	r3, [sl, #60]	; 0x3c
   1cc48:	add	sl, sl, #64	; 0x40
   1cc4c:	add	r1, r7, r1, ror #15
   1cc50:	and	r4, r1, r4
   1cc54:	add	r5, r3, r5
   1cc58:	mov	lr, r3
   1cc5c:	str	r3, [sp, #12]
   1cc60:	movw	r3, #2081	; 0x821
   1cc64:	eor	r4, r4, r6
   1cc68:	movt	r3, #18868	; 0x49b4
   1cc6c:	add	r4, r5, r4
   1cc70:	add	r4, r4, r3
   1cc74:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1cc78:	add	r4, r1, r4, ror #10
   1cc7c:	eor	r5, r4, r1
   1cc80:	and	r5, r5, r7
   1cc84:	add	r6, r3, r6
   1cc88:	movw	r3, #9570	; 0x2562
   1cc8c:	add	r7, ip, r7
   1cc90:	ldr	ip, [sp, #32]
   1cc94:	eor	r5, r5, r1
   1cc98:	movt	r3, #63006	; 0xf61e
   1cc9c:	add	r5, r6, r5
   1cca0:	add	r5, r5, r3
   1cca4:	movw	r3, #45888	; 0xb340
   1cca8:	add	r5, r4, r5, ror #27
   1ccac:	movt	r3, #49216	; 0xc040
   1ccb0:	eor	r6, r5, r4
   1ccb4:	and	r6, r6, r1
   1ccb8:	add	r1, r2, r1
   1ccbc:	ldr	r2, [fp, #-44]	; 0xffffffd4
   1ccc0:	eor	r6, r6, r4
   1ccc4:	add	r6, r7, r6
   1ccc8:	add	r6, r6, r3
   1cccc:	movw	r3, #23121	; 0x5a51
   1ccd0:	add	r6, r5, r6, ror #23
   1ccd4:	movt	r3, #9822	; 0x265e
   1ccd8:	eor	r7, r6, r5
   1ccdc:	and	r7, r7, r4
   1cce0:	add	r4, r2, r4
   1cce4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1cce8:	eor	r7, r7, r5
   1ccec:	add	r1, r1, r7
   1ccf0:	add	r1, r1, r3
   1ccf4:	movw	r3, #51114	; 0xc7aa
   1ccf8:	add	r1, r6, r1, ror #18
   1ccfc:	movt	r3, #59830	; 0xe9b6
   1cd00:	eor	r7, r1, r6
   1cd04:	and	r7, r7, r5
   1cd08:	add	r5, ip, r5
   1cd0c:	eor	r7, r7, r6
   1cd10:	add	r4, r4, r7
   1cd14:	add	r4, r4, r3
   1cd18:	movw	r3, #4189	; 0x105d
   1cd1c:	add	r4, r1, r4, ror #12
   1cd20:	movt	r3, #54831	; 0xd62f
   1cd24:	eor	r7, r4, r1
   1cd28:	and	r7, r7, r6
   1cd2c:	add	r6, r0, r6
   1cd30:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1cd34:	eor	r7, r7, r1
   1cd38:	add	r5, r5, r7
   1cd3c:	add	r5, r5, r3
   1cd40:	movw	r3, #5203	; 0x1453
   1cd44:	add	r5, r4, r5, ror #27
   1cd48:	movt	r3, #580	; 0x244
   1cd4c:	eor	r7, r5, r4
   1cd50:	and	r7, r7, r1
   1cd54:	add	r1, lr, r1
   1cd58:	ldr	lr, [sp, #44]	; 0x2c
   1cd5c:	eor	r7, r7, r4
   1cd60:	add	r6, r6, r7
   1cd64:	add	r6, r6, r3
   1cd68:	movw	r3, #59009	; 0xe681
   1cd6c:	add	r6, r5, r6, ror #23
   1cd70:	movt	r3, #55457	; 0xd8a1
   1cd74:	eor	r7, r6, r5
   1cd78:	and	r7, r7, r4
   1cd7c:	add	r4, lr, r4
   1cd80:	eor	r7, r7, r5
   1cd84:	add	r1, r1, r7
   1cd88:	add	r1, r1, r3
   1cd8c:	movw	r3, #64456	; 0xfbc8
   1cd90:	add	r1, r6, r1, ror #18
   1cd94:	movt	r3, #59347	; 0xe7d3
   1cd98:	eor	r7, r1, r6
   1cd9c:	and	r7, r7, r5
   1cda0:	add	r5, r8, r5
   1cda4:	ldr	r8, [sp, #36]	; 0x24
   1cda8:	eor	r7, r7, r6
   1cdac:	add	r4, r4, r7
   1cdb0:	add	r4, r4, r3
   1cdb4:	movw	r3, #52710	; 0xcde6
   1cdb8:	add	r4, r1, r4, ror #12
   1cdbc:	movt	r3, #8673	; 0x21e1
   1cdc0:	eor	r7, r4, r1
   1cdc4:	and	r7, r7, r6
   1cdc8:	add	r6, r9, r6
   1cdcc:	ldr	r9, [sp, #56]	; 0x38
   1cdd0:	eor	r7, r7, r1
   1cdd4:	add	r5, r5, r7
   1cdd8:	add	r5, r5, r3
   1cddc:	movw	r3, #2006	; 0x7d6
   1cde0:	add	r5, r4, r5, ror #27
   1cde4:	movt	r3, #49975	; 0xc337
   1cde8:	eor	r7, r5, r4
   1cdec:	and	r7, r7, r1
   1cdf0:	add	r1, r0, r1
   1cdf4:	ldr	r0, [sp, #40]	; 0x28
   1cdf8:	eor	r7, r7, r4
   1cdfc:	add	r6, r6, r7
   1ce00:	add	r6, r6, r3
   1ce04:	movw	r3, #3463	; 0xd87
   1ce08:	add	r6, r5, r6, ror #23
   1ce0c:	movt	r3, #62677	; 0xf4d5
   1ce10:	eor	r7, r6, r5
   1ce14:	and	r7, r7, r4
   1ce18:	add	r4, r0, r4
   1ce1c:	eor	r7, r7, r5
   1ce20:	add	r1, r1, r7
   1ce24:	add	r1, r1, r3
   1ce28:	movw	r3, #5357	; 0x14ed
   1ce2c:	add	r1, r6, r1, ror #18
   1ce30:	movt	r3, #17754	; 0x455a
   1ce34:	eor	r7, r1, r6
   1ce38:	and	r7, r7, r5
   1ce3c:	add	r5, r8, r5
   1ce40:	eor	r7, r7, r6
   1ce44:	add	r4, r4, r7
   1ce48:	add	r4, r4, r3
   1ce4c:	movw	r3, #59653	; 0xe905
   1ce50:	add	r4, r1, r4, ror #12
   1ce54:	movt	r3, #43491	; 0xa9e3
   1ce58:	eor	r7, r4, r1
   1ce5c:	and	r7, r7, r6
   1ce60:	add	r6, r2, r6
   1ce64:	ldr	r2, [sp, #16]
   1ce68:	eor	r7, r7, r1
   1ce6c:	add	r5, r5, r7
   1ce70:	add	r5, r5, r3
   1ce74:	movw	r3, #41976	; 0xa3f8
   1ce78:	add	r5, r4, r5, ror #27
   1ce7c:	movt	r3, #64751	; 0xfcef
   1ce80:	eor	r7, r5, r4
   1ce84:	and	r7, r7, r1
   1ce88:	add	r1, r2, r1
   1ce8c:	eor	r7, r7, r4
   1ce90:	add	r6, r6, r7
   1ce94:	add	r6, r6, r3
   1ce98:	movw	r3, #729	; 0x2d9
   1ce9c:	add	r6, r5, r6, ror #23
   1cea0:	movt	r3, #26479	; 0x676f
   1cea4:	eor	r7, r6, r5
   1cea8:	and	r7, r7, r4
   1ceac:	add	r4, r9, r4
   1ceb0:	ldr	r9, [fp, #-52]	; 0xffffffcc
   1ceb4:	eor	r7, r7, r5
   1ceb8:	add	r1, r1, r7
   1cebc:	add	r1, r1, r3
   1cec0:	add	r1, r6, r1, ror #18
   1cec4:	eor	r7, r1, r6
   1cec8:	and	r3, r7, r5
   1cecc:	add	r5, ip, r5
   1ced0:	ldr	ip, [sp, #8]
   1ced4:	eor	r3, r3, r6
   1ced8:	add	r6, r0, r6
   1cedc:	ldr	r0, [sp, #48]	; 0x30
   1cee0:	add	r3, r4, r3
   1cee4:	movw	r4, #19594	; 0x4c8a
   1cee8:	movt	r4, #36138	; 0x8d2a
   1ceec:	add	r3, r3, r4
   1cef0:	add	r3, r1, r3, ror #12
   1cef4:	eor	r4, r7, r3
   1cef8:	ldr	r7, [fp, #-48]	; 0xffffffd0
   1cefc:	add	r4, r5, r4
   1cf00:	movw	r5, #14658	; 0x3942
   1cf04:	movt	r5, #65530	; 0xfffa
   1cf08:	add	r4, r4, r5
   1cf0c:	eor	r5, r3, r1
   1cf10:	add	r1, r7, r1
   1cf14:	ldr	r7, [fp, #-32]	; 0xffffffe0
   1cf18:	add	r4, r3, r4, ror #28
   1cf1c:	eor	r5, r5, r4
   1cf20:	add	r5, r6, r5
   1cf24:	movw	r6, #63105	; 0xf681
   1cf28:	movt	r6, #34673	; 0x8771
   1cf2c:	add	r5, r5, r6
   1cf30:	eor	r6, r4, r3
   1cf34:	add	r3, ip, r3
   1cf38:	add	r5, r4, r5, ror #21
   1cf3c:	eor	r6, r6, r5
   1cf40:	add	r1, r1, r6
   1cf44:	movw	r6, #24866	; 0x6122
   1cf48:	movt	r6, #28061	; 0x6d9d
   1cf4c:	add	r1, r1, r6
   1cf50:	eor	r6, r5, r4
   1cf54:	add	r4, r7, r4
   1cf58:	ldr	r7, [sp, #52]	; 0x34
   1cf5c:	add	r1, r5, r1, ror #16
   1cf60:	eor	r6, r6, r1
   1cf64:	add	r3, r3, r6
   1cf68:	movw	r6, #14348	; 0x380c
   1cf6c:	movt	r6, #64997	; 0xfde5
   1cf70:	add	r3, r3, r6
   1cf74:	eor	r6, r1, r5
   1cf78:	add	r5, lr, r5
   1cf7c:	ldr	lr, [sp, #12]
   1cf80:	add	r3, r1, r3, ror #9
   1cf84:	eor	r6, r6, r3
   1cf88:	add	r4, r4, r6
   1cf8c:	movw	r6, #59972	; 0xea44
   1cf90:	movt	r6, #42174	; 0xa4be
   1cf94:	add	r4, r4, r6
   1cf98:	eor	r6, r3, r1
   1cf9c:	add	r1, r2, r1
   1cfa0:	add	r4, r3, r4, ror #28
   1cfa4:	eor	r6, r6, r4
   1cfa8:	add	r5, r5, r6
   1cfac:	movw	r6, #53161	; 0xcfa9
   1cfb0:	movt	r6, #19422	; 0x4bde
   1cfb4:	add	r5, r5, r6
   1cfb8:	eor	r6, r4, r3
   1cfbc:	add	r3, r7, r3
   1cfc0:	ldr	r7, [fp, #-36]	; 0xffffffdc
   1cfc4:	add	r5, r4, r5, ror #21
   1cfc8:	eor	r6, r6, r5
   1cfcc:	add	r1, r1, r6
   1cfd0:	movw	r6, #19296	; 0x4b60
   1cfd4:	movt	r6, #63163	; 0xf6bb
   1cfd8:	add	r1, r1, r6
   1cfdc:	eor	r6, r5, r4
   1cfe0:	add	r4, r8, r4
   1cfe4:	ldr	r8, [fp, #-44]	; 0xffffffd4
   1cfe8:	add	r1, r5, r1, ror #16
   1cfec:	eor	r6, r6, r1
   1cff0:	add	r3, r3, r6
   1cff4:	movw	r6, #48240	; 0xbc70
   1cff8:	movt	r6, #48831	; 0xbebf
   1cffc:	add	r3, r3, r6
   1d000:	eor	r6, r1, r5
   1d004:	add	r5, r8, r5
   1d008:	add	r3, r1, r3, ror #9
   1d00c:	eor	r6, r6, r3
   1d010:	add	r4, r4, r6
   1d014:	movw	r6, #32454	; 0x7ec6
   1d018:	movt	r6, #10395	; 0x289b
   1d01c:	add	r4, r4, r6
   1d020:	eor	r6, r3, r1
   1d024:	add	r1, r9, r1
   1d028:	add	r4, r3, r4, ror #28
   1d02c:	eor	r6, r6, r4
   1d030:	add	r5, r5, r6
   1d034:	movw	r6, #10234	; 0x27fa
   1d038:	movt	r6, #60065	; 0xeaa1
   1d03c:	add	r5, r5, r6
   1d040:	eor	r6, r4, r3
   1d044:	add	r3, r0, r3
   1d048:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1d04c:	add	r5, r4, r5, ror #21
   1d050:	eor	r6, r6, r5
   1d054:	add	r1, r1, r6
   1d058:	movw	r6, #12421	; 0x3085
   1d05c:	movt	r6, #54511	; 0xd4ef
   1d060:	add	r1, r1, r6
   1d064:	eor	r6, r5, r4
   1d068:	add	r4, r0, r4
   1d06c:	ldr	r0, [sp, #56]	; 0x38
   1d070:	add	r1, r5, r1, ror #16
   1d074:	eor	r6, r6, r1
   1d078:	add	r3, r3, r6
   1d07c:	movw	r6, #7429	; 0x1d05
   1d080:	movt	r6, #1160	; 0x488
   1d084:	add	r3, r3, r6
   1d088:	eor	r6, r1, r5
   1d08c:	add	r5, r0, r5
   1d090:	add	r3, r1, r3, ror #9
   1d094:	eor	r6, r6, r3
   1d098:	add	r4, r4, r6
   1d09c:	movw	r6, #53305	; 0xd039
   1d0a0:	movt	r6, #55764	; 0xd9d4
   1d0a4:	add	r4, r4, r6
   1d0a8:	eor	r6, r3, r1
   1d0ac:	add	r1, lr, r1
   1d0b0:	add	r4, r3, r4, ror #28
   1d0b4:	eor	r6, r6, r4
   1d0b8:	add	r5, r5, r6
   1d0bc:	movw	r6, #39397	; 0x99e5
   1d0c0:	movt	r6, #59099	; 0xe6db
   1d0c4:	add	r5, r5, r6
   1d0c8:	eor	r6, r4, r3
   1d0cc:	add	r3, r7, r3
   1d0d0:	ldr	r7, [sp, #32]
   1d0d4:	add	r5, r4, r5, ror #21
   1d0d8:	eor	r6, r6, r5
   1d0dc:	add	r2, r2, r5
   1d0e0:	add	r1, r1, r6
   1d0e4:	movw	r6, #31992	; 0x7cf8
   1d0e8:	movt	r6, #8098	; 0x1fa2
   1d0ec:	add	r1, r1, r6
   1d0f0:	eor	r6, r5, r4
   1d0f4:	add	r4, r8, r4
   1d0f8:	add	r1, r5, r1, ror #16
   1d0fc:	eor	r6, r6, r1
   1d100:	add	r3, r3, r6
   1d104:	movw	r6, #22117	; 0x5665
   1d108:	movt	r6, #50348	; 0xc4ac
   1d10c:	add	r3, r3, r6
   1d110:	mvn	r6, r5
   1d114:	movw	r5, #65431	; 0xff97
   1d118:	add	r3, r1, r3, ror #9
   1d11c:	movt	r5, #17194	; 0x432a
   1d120:	orr	r6, r3, r6
   1d124:	eor	r6, r6, r1
   1d128:	add	r4, r4, r6
   1d12c:	movw	r6, #8772	; 0x2244
   1d130:	movt	r6, #62505	; 0xf429
   1d134:	add	r4, r4, r6
   1d138:	mvn	r6, r1
   1d13c:	add	r1, ip, r1
   1d140:	ldr	ip, [fp, #-40]	; 0xffffffd8
   1d144:	add	r4, r3, r4, ror #26
   1d148:	orr	r6, r4, r6
   1d14c:	eor	r6, r6, r3
   1d150:	add	r2, r2, r6
   1d154:	add	r2, r2, r5
   1d158:	mvn	r5, r3
   1d15c:	add	r3, r7, r3
   1d160:	add	r2, r4, r2, ror #22
   1d164:	orr	r5, r2, r5
   1d168:	eor	r5, r5, r4
   1d16c:	add	r1, r1, r5
   1d170:	movw	r5, #9127	; 0x23a7
   1d174:	movt	r5, #43924	; 0xab94
   1d178:	add	r1, r1, r5
   1d17c:	mvn	r5, r4
   1d180:	add	r4, r0, r4
   1d184:	ldr	r0, [sp, #52]	; 0x34
   1d188:	add	r1, r2, r1, ror #17
   1d18c:	orr	r5, r1, r5
   1d190:	eor	r5, r5, r2
   1d194:	add	r3, r3, r5
   1d198:	movw	r5, #41017	; 0xa039
   1d19c:	movt	r5, #64659	; 0xfc93
   1d1a0:	add	r3, r3, r5
   1d1a4:	mvn	r5, r2
   1d1a8:	add	r2, r9, r2
   1d1ac:	add	r3, r1, r3, ror #11
   1d1b0:	orr	r5, r3, r5
   1d1b4:	eor	r5, r5, r1
   1d1b8:	add	r4, r4, r5
   1d1bc:	movw	r5, #22979	; 0x59c3
   1d1c0:	movt	r5, #25947	; 0x655b
   1d1c4:	add	r4, r4, r5
   1d1c8:	mvn	r5, r1
   1d1cc:	add	r1, r0, r1
   1d1d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d1d4:	add	r4, r3, r4, ror #26
   1d1d8:	orr	r5, r4, r5
   1d1dc:	eor	r5, r5, r3
   1d1e0:	add	r2, r2, r5
   1d1e4:	movw	r5, #52370	; 0xcc92
   1d1e8:	movt	r5, #36620	; 0x8f0c
   1d1ec:	add	r2, r2, r5
   1d1f0:	mvn	r5, r3
   1d1f4:	add	r3, r0, r3
   1d1f8:	ldr	r0, [sp, #40]	; 0x28
   1d1fc:	add	r2, r4, r2, ror #22
   1d200:	orr	r5, r2, r5
   1d204:	eor	r5, r5, r4
   1d208:	add	r1, r1, r5
   1d20c:	movw	r5, #62589	; 0xf47d
   1d210:	movt	r5, #65519	; 0xffef
   1d214:	add	r1, r1, r5
   1d218:	mvn	r5, r4
   1d21c:	add	r4, r0, r4
   1d220:	ldr	r0, [sp, #48]	; 0x30
   1d224:	add	r1, r2, r1, ror #17
   1d228:	orr	r5, r1, r5
   1d22c:	eor	r5, r5, r2
   1d230:	add	r3, r3, r5
   1d234:	movw	r5, #24017	; 0x5dd1
   1d238:	movt	r5, #34180	; 0x8584
   1d23c:	add	r3, r3, r5
   1d240:	mvn	r5, r2
   1d244:	add	r2, lr, r2
   1d248:	ldr	lr, [sp, #4]
   1d24c:	add	r3, r1, r3, ror #11
   1d250:	orr	r5, r3, r5
   1d254:	mvn	r7, r3
   1d258:	eor	r5, r5, r1
   1d25c:	cmp	sl, lr
   1d260:	add	r4, r4, r5
   1d264:	movw	r5, #32335	; 0x7e4f
   1d268:	movt	r5, #28584	; 0x6fa8
   1d26c:	add	r4, r4, r5
   1d270:	mvn	r5, r1
   1d274:	add	r1, r0, r1
   1d278:	ldr	r0, [sp, #36]	; 0x24
   1d27c:	add	r4, r3, r4, ror #26
   1d280:	orr	r5, r4, r5
   1d284:	eor	r5, r5, r3
   1d288:	add	r3, r0, r3
   1d28c:	ldr	r0, [sp, #44]	; 0x2c
   1d290:	add	r2, r2, r5
   1d294:	movw	r5, #59104	; 0xe6e0
   1d298:	movt	r5, #65068	; 0xfe2c
   1d29c:	add	r2, r2, r5
   1d2a0:	movw	r5, #17172	; 0x4314
   1d2a4:	add	r6, r0, r4
   1d2a8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1d2ac:	add	r2, r4, r2, ror #22
   1d2b0:	movt	r5, #41729	; 0xa301
   1d2b4:	orr	r7, r2, r7
   1d2b8:	eor	r7, r7, r4
   1d2bc:	add	r1, r1, r7
   1d2c0:	mvn	r7, r4
   1d2c4:	movw	r4, #32386	; 0x7e82
   1d2c8:	add	r1, r1, r5
   1d2cc:	movw	r5, #4513	; 0x11a1
   1d2d0:	movt	r4, #63315	; 0xf753
   1d2d4:	add	r1, r2, r1, ror #17
   1d2d8:	movt	r5, #19976	; 0x4e08
   1d2dc:	orr	r7, r1, r7
   1d2e0:	eor	r7, r7, r2
   1d2e4:	add	r3, r3, r7
   1d2e8:	mvn	r7, r2
   1d2ec:	add	r2, r0, r2
   1d2f0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   1d2f4:	add	r3, r3, r5
   1d2f8:	add	r3, r1, r3, ror #11
   1d2fc:	orr	r7, r3, r7
   1d300:	eor	r7, r7, r1
   1d304:	add	r7, r6, r7
   1d308:	mvn	r6, r1
   1d30c:	add	r1, r0, r1
   1d310:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1d314:	add	r7, r7, r4
   1d318:	movw	r4, #62005	; 0xf235
   1d31c:	add	r7, r3, r7, ror #26
   1d320:	movt	r4, #48442	; 0xbd3a
   1d324:	orr	r6, r7, r6
   1d328:	mvn	r5, r7
   1d32c:	eor	r6, r6, r3
   1d330:	add	r2, r2, r6
   1d334:	mvn	r6, r3
   1d338:	add	r3, r0, r3
   1d33c:	add	r2, r2, r4
   1d340:	movw	r4, #53947	; 0xd2bb
   1d344:	add	r2, r7, r2, ror #22
   1d348:	movt	r4, #10967	; 0x2ad7
   1d34c:	orr	r6, r2, r6
   1d350:	eor	r6, r6, r7
   1d354:	add	r1, r1, r6
   1d358:	add	r1, r1, r4
   1d35c:	ldr	r4, [sp, #20]
   1d360:	add	r1, r2, r1, ror #17
   1d364:	orr	r5, r1, r5
   1d368:	add	ip, r1, ip
   1d36c:	add	r6, r1, r4
   1d370:	movw	r4, #54161	; 0xd391
   1d374:	eor	r5, r5, r2
   1d378:	ldr	r1, [sp, #28]
   1d37c:	movt	r4, #60294	; 0xeb86
   1d380:	add	r3, r3, r5
   1d384:	add	r3, r3, r4
   1d388:	add	r4, r6, r3, ror #11
   1d38c:	ldr	r3, [sp, #24]
   1d390:	add	r1, r2, r1
   1d394:	add	r3, r7, r3
   1d398:	bcc	1c994 <__assert_fail@plt+0xa628>
   1d39c:	ldr	r0, [sp]
   1d3a0:	stm	r0, {r3, r4, ip}
   1d3a4:	str	r1, [r0, #12]
   1d3a8:	sub	sp, fp, #28
   1d3ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d3b4:	add	fp, sp, #24
   1d3b8:	sub	sp, sp, #160	; 0xa0
   1d3bc:	mov	r8, r2
   1d3c0:	add	r2, pc, #184	; 0xb8
   1d3c4:	add	r5, sp, #4
   1d3c8:	vld1.64	{d16-d17}, [r2 :128]
   1d3cc:	mov	r2, #20
   1d3d0:	mov	r3, r5
   1d3d4:	vst1.32	{d16-d17}, [r3], r2
   1d3d8:	mov	r2, #0
   1d3dc:	str	r2, [r3]
   1d3e0:	str	r2, [sp, #28]
   1d3e4:	str	r2, [sp, #20]
   1d3e8:	mov	r2, r5
   1d3ec:	bl	1d490 <__assert_fail@plt+0xb124>
   1d3f0:	ldr	r1, [sp, #28]
   1d3f4:	ldr	r2, [sp, #20]
   1d3f8:	mov	r7, #32
   1d3fc:	add	r0, r2, r1
   1d400:	cmp	r1, #56	; 0x38
   1d404:	movwcc	r7, #16
   1d408:	cmp	r0, r2
   1d40c:	str	r0, [sp, #20]
   1d410:	bcs	1d420 <__assert_fail@plt+0xb0b4>
   1d414:	ldr	r2, [sp, #24]
   1d418:	add	r2, r2, #1
   1d41c:	str	r2, [sp, #24]
   1d420:	mvn	r2, #7
   1d424:	add	r6, r5, #28
   1d428:	lsl	r3, r0, #3
   1d42c:	add	r2, r2, r7, lsl #2
   1d430:	str	r3, [r6, r2]
   1d434:	add	r3, r6, r7, lsl #2
   1d438:	sub	r2, r2, r1
   1d43c:	ldr	r4, [sp, #24]
   1d440:	lsl	r4, r4, #3
   1d444:	orr	r0, r4, r0, lsr #29
   1d448:	str	r0, [r3, #-4]
   1d44c:	add	r0, r6, r1
   1d450:	movw	r1, #33736	; 0x83c8
   1d454:	movt	r1, #2
   1d458:	bl	11eec <memcpy@plt>
   1d45c:	lsl	r1, r7, #2
   1d460:	mov	r0, r6
   1d464:	mov	r2, r5
   1d468:	bl	1c94c <__assert_fail@plt+0xa5e0>
   1d46c:	vld1.32	{d16-d17}, [r5]
   1d470:	mov	r0, r8
   1d474:	vst1.8	{d16-d17}, [r8]
   1d478:	sub	sp, fp, #24
   1d47c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d480:	strbvs	r2, [r5, -r1, lsl #6]
   1d484:	svc	0x00cdab89
   1d488:	ldmls	sl!, {r1, r2, r3, r4, r5, r6, r7, sl, fp, ip, lr, pc}
   1d48c:	eorsne	r5, r2, r6, ror r4
   1d490:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d494:	add	fp, sp, #28
   1d498:	sub	sp, sp, #12
   1d49c:	ldr	r5, [r2, #24]
   1d4a0:	mov	r4, r2
   1d4a4:	mov	r8, r1
   1d4a8:	mov	r6, r0
   1d4ac:	cmp	r5, #0
   1d4b0:	beq	1d520 <__assert_fail@plt+0xb1b4>
   1d4b4:	rsb	r7, r5, #128	; 0x80
   1d4b8:	add	r9, r4, #28
   1d4bc:	mov	r1, r6
   1d4c0:	cmp	r7, r8
   1d4c4:	add	r0, r9, r5
   1d4c8:	movhi	r7, r8
   1d4cc:	mov	r2, r7
   1d4d0:	bl	11eec <memcpy@plt>
   1d4d4:	ldr	r0, [r4, #24]
   1d4d8:	add	r0, r0, r7
   1d4dc:	cmp	r0, #65	; 0x41
   1d4e0:	str	r0, [r4, #24]
   1d4e4:	bcc	1d518 <__assert_fail@plt+0xb1ac>
   1d4e8:	bic	r1, r0, #63	; 0x3f
   1d4ec:	mov	r0, r9
   1d4f0:	mov	r2, r4
   1d4f4:	bl	1c94c <__assert_fail@plt+0xa5e0>
   1d4f8:	ldr	r0, [r4, #24]
   1d4fc:	and	r2, r0, #63	; 0x3f
   1d500:	add	r0, r7, r5
   1d504:	bic	r0, r0, #63	; 0x3f
   1d508:	str	r2, [r4, #24]
   1d50c:	add	r1, r9, r0
   1d510:	mov	r0, r9
   1d514:	bl	11eec <memcpy@plt>
   1d518:	sub	r8, r8, r7
   1d51c:	add	r6, r6, r7
   1d520:	cmp	r8, #64	; 0x40
   1d524:	bcc	1d5c4 <__assert_fail@plt+0xb258>
   1d528:	tst	r6, #3
   1d52c:	beq	1d5d8 <__assert_fail@plt+0xb26c>
   1d530:	cmp	r8, #65	; 0x41
   1d534:	bcc	1d600 <__assert_fail@plt+0xb294>
   1d538:	add	r5, r4, #28
   1d53c:	sub	r0, r8, #65	; 0x41
   1d540:	mov	r7, r6
   1d544:	str	r8, [sp, #8]
   1d548:	bic	r0, r0, #63	; 0x3f
   1d54c:	add	sl, r5, #32
   1d550:	add	r9, r5, #16
   1d554:	str	r0, [sp, #4]
   1d558:	mov	r0, #64	; 0x40
   1d55c:	add	r1, r6, #48	; 0x30
   1d560:	mov	r2, r4
   1d564:	vld1.8	{d16-d17}, [r7], r0
   1d568:	add	r0, r6, #32
   1d56c:	vld1.8	{d18-d19}, [r1]
   1d570:	mov	r1, #48	; 0x30
   1d574:	vld1.8	{d20-d21}, [r0]
   1d578:	mov	r0, r5
   1d57c:	vst1.8	{d16-d17}, [r0], r1
   1d580:	add	r1, r6, #16
   1d584:	vld1.8	{d16-d17}, [r1]
   1d588:	vst1.8	{d18-d19}, [r0]
   1d58c:	mov	r0, r5
   1d590:	mov	r1, #64	; 0x40
   1d594:	vst1.8	{d20-d21}, [sl]
   1d598:	vst1.8	{d16-d17}, [r9]
   1d59c:	bl	1c94c <__assert_fail@plt+0xa5e0>
   1d5a0:	sub	r8, r8, #64	; 0x40
   1d5a4:	mov	r6, r7
   1d5a8:	cmp	r8, #64	; 0x40
   1d5ac:	bhi	1d558 <__assert_fail@plt+0xb1ec>
   1d5b0:	ldr	r0, [sp, #8]
   1d5b4:	ldr	r1, [sp, #4]
   1d5b8:	sub	r0, r0, r1
   1d5bc:	sub	r8, r0, #64	; 0x40
   1d5c0:	b	1d608 <__assert_fail@plt+0xb29c>
   1d5c4:	mov	r7, r6
   1d5c8:	cmp	r8, #0
   1d5cc:	bne	1d608 <__assert_fail@plt+0xb29c>
   1d5d0:	sub	sp, fp, #28
   1d5d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d5d8:	bic	r5, r8, #63	; 0x3f
   1d5dc:	mov	r0, r6
   1d5e0:	mov	r2, r4
   1d5e4:	mov	r1, r5
   1d5e8:	bl	1c94c <__assert_fail@plt+0xa5e0>
   1d5ec:	add	r7, r6, r5
   1d5f0:	and	r8, r8, #63	; 0x3f
   1d5f4:	cmp	r8, #0
   1d5f8:	bne	1d608 <__assert_fail@plt+0xb29c>
   1d5fc:	b	1d5d0 <__assert_fail@plt+0xb264>
   1d600:	mov	r7, r6
   1d604:	mov	r8, #64	; 0x40
   1d608:	ldr	r5, [r4, #24]
   1d60c:	add	r6, r4, #28
   1d610:	mov	r1, r7
   1d614:	mov	r2, r8
   1d618:	add	r0, r6, r5
   1d61c:	bl	11eec <memcpy@plt>
   1d620:	add	r5, r5, r8
   1d624:	cmp	r5, #64	; 0x40
   1d628:	bcc	1d650 <__assert_fail@plt+0xb2e4>
   1d62c:	mov	r0, r6
   1d630:	mov	r1, #64	; 0x40
   1d634:	mov	r2, r4
   1d638:	bl	1c94c <__assert_fail@plt+0xa5e0>
   1d63c:	sub	r5, r5, #64	; 0x40
   1d640:	add	r1, r4, #92	; 0x5c
   1d644:	mov	r0, r6
   1d648:	mov	r2, r5
   1d64c:	bl	11eec <memcpy@plt>
   1d650:	str	r5, [r4, #24]
   1d654:	sub	sp, fp, #28
   1d658:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d65c:	b	11e68 <posix_fadvise64@plt>
   1d660:	cmp	r0, #0
   1d664:	bxeq	lr
   1d668:	push	{r4, sl, fp, lr}
   1d66c:	add	fp, sp, #8
   1d670:	sub	sp, sp, #16
   1d674:	mov	r4, r1
   1d678:	bl	121ec <fileno@plt>
   1d67c:	mov	r1, #0
   1d680:	mov	r2, #0
   1d684:	mov	r3, #0
   1d688:	str	r1, [sp]
   1d68c:	stmib	sp, {r1, r4}
   1d690:	bl	11e68 <posix_fadvise64@plt>
   1d694:	sub	sp, fp, #8
   1d698:	pop	{r4, sl, fp, pc}
   1d69c:	push	{r4, r5, r6, sl, fp, lr}
   1d6a0:	add	fp, sp, #16
   1d6a4:	sub	sp, sp, #8
   1d6a8:	mov	r4, r0
   1d6ac:	bl	121ec <fileno@plt>
   1d6b0:	cmn	r0, #1
   1d6b4:	ble	1d728 <__assert_fail@plt+0xb3bc>
   1d6b8:	mov	r0, r4
   1d6bc:	bl	12114 <__freading@plt>
   1d6c0:	cmp	r0, #0
   1d6c4:	beq	1d6f0 <__assert_fail@plt+0xb384>
   1d6c8:	mov	r0, r4
   1d6cc:	bl	121ec <fileno@plt>
   1d6d0:	mov	r1, #1
   1d6d4:	mov	r2, #0
   1d6d8:	mov	r3, #0
   1d6dc:	str	r1, [sp]
   1d6e0:	bl	12048 <lseek64@plt>
   1d6e4:	and	r0, r0, r1
   1d6e8:	cmn	r0, #1
   1d6ec:	beq	1d728 <__assert_fail@plt+0xb3bc>
   1d6f0:	mov	r0, r4
   1d6f4:	bl	1d738 <__assert_fail@plt+0xb3cc>
   1d6f8:	cmp	r0, #0
   1d6fc:	beq	1d728 <__assert_fail@plt+0xb3bc>
   1d700:	bl	12198 <__errno_location@plt>
   1d704:	ldr	r6, [r0]
   1d708:	mov	r5, r0
   1d70c:	mov	r0, r4
   1d710:	bl	12210 <fclose@plt>
   1d714:	cmp	r6, #0
   1d718:	strne	r6, [r5]
   1d71c:	mvnne	r0, #0
   1d720:	sub	sp, fp, #16
   1d724:	pop	{r4, r5, r6, sl, fp, pc}
   1d728:	mov	r0, r4
   1d72c:	sub	sp, fp, #16
   1d730:	pop	{r4, r5, r6, sl, fp, lr}
   1d734:	b	12210 <fclose@plt>
   1d738:	push	{r4, sl, fp, lr}
   1d73c:	add	fp, sp, #8
   1d740:	sub	sp, sp, #8
   1d744:	mov	r4, r0
   1d748:	cmp	r0, #0
   1d74c:	beq	1d784 <__assert_fail@plt+0xb418>
   1d750:	mov	r0, r4
   1d754:	bl	12114 <__freading@plt>
   1d758:	cmp	r0, #0
   1d75c:	beq	1d784 <__assert_fail@plt+0xb418>
   1d760:	ldrb	r0, [r4, #1]
   1d764:	tst	r0, #1
   1d768:	beq	1d784 <__assert_fail@plt+0xb418>
   1d76c:	mov	r0, #1
   1d770:	mov	r2, #0
   1d774:	mov	r3, #0
   1d778:	str	r0, [sp]
   1d77c:	mov	r0, r4
   1d780:	bl	1dc74 <__assert_fail@plt+0xb908>
   1d784:	mov	r0, r4
   1d788:	sub	sp, fp, #8
   1d78c:	pop	{r4, sl, fp, lr}
   1d790:	b	11e8c <fflush@plt>
   1d794:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d798:	add	fp, sp, #28
   1d79c:	sub	sp, sp, #12
   1d7a0:	mov	r8, r1
   1d7a4:	mov	r9, r0
   1d7a8:	bl	11e50 <strcmp@plt>
   1d7ac:	cmp	r0, #0
   1d7b0:	beq	1d84c <__assert_fail@plt+0xb4e0>
   1d7b4:	ldrb	r4, [r9]
   1d7b8:	cmp	r4, #0
   1d7bc:	beq	1d840 <__assert_fail@plt+0xb4d4>
   1d7c0:	ldrb	r6, [r8]
   1d7c4:	cmp	r6, #0
   1d7c8:	beq	1dc24 <__assert_fail@plt+0xb8b8>
   1d7cc:	mov	sl, r0
   1d7d0:	movw	r0, #33801	; 0x8409
   1d7d4:	mov	r1, r9
   1d7d8:	movt	r0, #2
   1d7dc:	bl	11e50 <strcmp@plt>
   1d7e0:	cmp	r0, #0
   1d7e4:	beq	1d840 <__assert_fail@plt+0xb4d4>
   1d7e8:	movw	r0, #33801	; 0x8409
   1d7ec:	mov	r1, r8
   1d7f0:	movt	r0, #2
   1d7f4:	bl	11e50 <strcmp@plt>
   1d7f8:	cmp	r0, #0
   1d7fc:	beq	1dc24 <__assert_fail@plt+0xb8b8>
   1d800:	movw	r0, #33800	; 0x8408
   1d804:	mov	r1, r9
   1d808:	movt	r0, #2
   1d80c:	bl	11e50 <strcmp@plt>
   1d810:	cmp	r0, #0
   1d814:	beq	1d840 <__assert_fail@plt+0xb4d4>
   1d818:	movw	r0, #33800	; 0x8408
   1d81c:	mov	r1, r8
   1d820:	movt	r0, #2
   1d824:	bl	11e50 <strcmp@plt>
   1d828:	cmp	r0, #0
   1d82c:	beq	1dc24 <__assert_fail@plt+0xb8b8>
   1d830:	cmp	r4, #46	; 0x2e
   1d834:	bne	1d858 <__assert_fail@plt+0xb4ec>
   1d838:	cmp	r6, #46	; 0x2e
   1d83c:	beq	1d858 <__assert_fail@plt+0xb4ec>
   1d840:	mvn	r0, #0
   1d844:	sub	sp, fp, #28
   1d848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d84c:	mov	r0, #0
   1d850:	sub	sp, fp, #28
   1d854:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d858:	cmp	r4, #46	; 0x2e
   1d85c:	bne	1d898 <__assert_fail@plt+0xb52c>
   1d860:	mov	r4, #46	; 0x2e
   1d864:	cmp	r6, #46	; 0x2e
   1d868:	bne	1d8a0 <__assert_fail@plt+0xb534>
   1d86c:	ldrb	r4, [r9, #1]!
   1d870:	add	r8, r8, #1
   1d874:	cmp	r4, #0
   1d878:	bne	1d8a0 <__assert_fail@plt+0xb534>
   1d87c:	mov	r7, #0
   1d880:	mov	r6, r9
   1d884:	ldrb	r0, [r8]
   1d888:	str	r7, [sp, #8]
   1d88c:	cmp	r0, #0
   1d890:	bne	1d948 <__assert_fail@plt+0xb5dc>
   1d894:	b	1d9e4 <__assert_fail@plt+0xb678>
   1d898:	cmp	r6, #46	; 0x2e
   1d89c:	beq	1dc24 <__assert_fail@plt+0xb8b8>
   1d8a0:	mov	r1, #0
   1d8a4:	mvn	r5, #64	; 0x40
   1d8a8:	mov	r6, r9
   1d8ac:	mov	r7, #0
   1d8b0:	tst	r1, #1
   1d8b4:	beq	1d900 <__assert_fail@plt+0xb594>
   1d8b8:	b	1d8dc <__assert_fail@plt+0xb570>
   1d8bc:	cmp	r7, #0
   1d8c0:	mov	r1, #1
   1d8c4:	moveq	r7, r6
   1d8c8:	ldrb	r4, [r6, #1]!
   1d8cc:	cmp	r4, #0
   1d8d0:	beq	1d938 <__assert_fail@plt+0xb5cc>
   1d8d4:	tst	r1, #1
   1d8d8:	beq	1d900 <__assert_fail@plt+0xb594>
   1d8dc:	uxtab	r0, r5, r4
   1d8e0:	mov	r1, #0
   1d8e4:	cmp	r0, #26
   1d8e8:	bcc	1d8c8 <__assert_fail@plt+0xb55c>
   1d8ec:	uxtb	r0, r4
   1d8f0:	sub	r2, r0, #97	; 0x61
   1d8f4:	cmp	r2, #26
   1d8f8:	bcc	1d8c8 <__assert_fail@plt+0xb55c>
   1d8fc:	b	1d920 <__assert_fail@plt+0xb5b4>
   1d900:	uxtb	r0, r4
   1d904:	cmp	r0, #46	; 0x2e
   1d908:	beq	1d8bc <__assert_fail@plt+0xb550>
   1d90c:	bl	24f90 <__assert_fail@plt+0x12c24>
   1d910:	mov	r1, #0
   1d914:	cmp	r0, #0
   1d918:	bne	1d8c8 <__assert_fail@plt+0xb55c>
   1d91c:	ldrb	r0, [r6]
   1d920:	mov	r1, #0
   1d924:	cmp	r0, #126	; 0x7e
   1d928:	movne	r7, r1
   1d92c:	ldrb	r4, [r6, #1]!
   1d930:	cmp	r4, #0
   1d934:	bne	1d8d4 <__assert_fail@plt+0xb568>
   1d938:	ldrb	r0, [r8]
   1d93c:	str	r7, [sp, #8]
   1d940:	cmp	r0, #0
   1d944:	beq	1d9e4 <__assert_fail@plt+0xb678>
   1d948:	mov	r1, #0
   1d94c:	mvn	r5, #64	; 0x40
   1d950:	mov	r4, r8
   1d954:	mov	r7, #0
   1d958:	tst	r1, #1
   1d95c:	beq	1d9a8 <__assert_fail@plt+0xb63c>
   1d960:	b	1d984 <__assert_fail@plt+0xb618>
   1d964:	cmp	r7, #0
   1d968:	mov	r1, #1
   1d96c:	moveq	r7, r4
   1d970:	ldrb	r0, [r4, #1]!
   1d974:	cmp	r0, #0
   1d978:	beq	1d9ec <__assert_fail@plt+0xb680>
   1d97c:	tst	r1, #1
   1d980:	beq	1d9a8 <__assert_fail@plt+0xb63c>
   1d984:	uxtab	r2, r5, r0
   1d988:	mov	r1, #0
   1d98c:	cmp	r2, #26
   1d990:	bcc	1d970 <__assert_fail@plt+0xb604>
   1d994:	uxtb	r0, r0
   1d998:	sub	r2, r0, #97	; 0x61
   1d99c:	cmp	r2, #26
   1d9a0:	bcc	1d970 <__assert_fail@plt+0xb604>
   1d9a4:	b	1d9c8 <__assert_fail@plt+0xb65c>
   1d9a8:	uxtb	r0, r0
   1d9ac:	cmp	r0, #46	; 0x2e
   1d9b0:	beq	1d964 <__assert_fail@plt+0xb5f8>
   1d9b4:	bl	24f90 <__assert_fail@plt+0x12c24>
   1d9b8:	mov	r1, #0
   1d9bc:	cmp	r0, #0
   1d9c0:	bne	1d970 <__assert_fail@plt+0xb604>
   1d9c4:	ldrb	r0, [r4]
   1d9c8:	mov	r1, #0
   1d9cc:	cmp	r0, #126	; 0x7e
   1d9d0:	movne	r7, r1
   1d9d4:	ldrb	r0, [r4, #1]!
   1d9d8:	cmp	r0, #0
   1d9dc:	bne	1d97c <__assert_fail@plt+0xb610>
   1d9e0:	b	1d9ec <__assert_fail@plt+0xb680>
   1d9e4:	mov	r7, #0
   1d9e8:	mov	r4, r8
   1d9ec:	ldr	r1, [sp, #8]
   1d9f0:	cmp	r7, #0
   1d9f4:	mov	r0, r4
   1d9f8:	movne	r0, r7
   1d9fc:	sub	lr, r0, r8
   1da00:	mov	r0, r6
   1da04:	cmp	r1, #0
   1da08:	movne	r0, r1
   1da0c:	sub	r2, r0, r9
   1da10:	orrs	r0, r1, r7
   1da14:	beq	1da44 <__assert_fail@plt+0xb6d8>
   1da18:	cmp	r2, lr
   1da1c:	bne	1da44 <__assert_fail@plt+0xb6d8>
   1da20:	mov	r0, r9
   1da24:	mov	r1, r8
   1da28:	mov	r5, r2
   1da2c:	bl	12330 <strncmp@plt>
   1da30:	cmp	r0, #0
   1da34:	mov	r2, r5
   1da38:	mov	lr, r5
   1da3c:	subeq	lr, r4, r8
   1da40:	subeq	r2, r6, r9
   1da44:	mov	ip, #0
   1da48:	mov	r6, #0
   1da4c:	cmp	ip, lr
   1da50:	cmpcs	r6, r2
   1da54:	bcs	1dc40 <__assert_fail@plt+0xb8d4>
   1da58:	cmp	r6, r2
   1da5c:	bcs	1da70 <__assert_fail@plt+0xb704>
   1da60:	ldrb	r0, [r9, r6]
   1da64:	sub	r0, r0, #48	; 0x30
   1da68:	cmp	r0, #9
   1da6c:	bhi	1da88 <__assert_fail@plt+0xb71c>
   1da70:	cmp	ip, lr
   1da74:	bcs	1db50 <__assert_fail@plt+0xb7e4>
   1da78:	ldrb	r0, [r8, ip]
   1da7c:	sub	r0, r0, #48	; 0x30
   1da80:	cmp	r0, #10
   1da84:	bcc	1db50 <__assert_fail@plt+0xb7e4>
   1da88:	mov	r0, #0
   1da8c:	cmp	r2, r6
   1da90:	mov	r1, #0
   1da94:	beq	1dae4 <__assert_fail@plt+0xb778>
   1da98:	ldrb	r3, [r9, r6]
   1da9c:	sub	r1, r3, #48	; 0x30
   1daa0:	cmp	r1, #10
   1daa4:	mov	r1, #0
   1daa8:	bcc	1dae4 <__assert_fail@plt+0xb778>
   1daac:	sub	r1, r3, #65	; 0x41
   1dab0:	cmp	r1, #26
   1dab4:	bcc	1dae0 <__assert_fail@plt+0xb774>
   1dab8:	sub	r1, r3, #97	; 0x61
   1dabc:	cmp	r1, #26
   1dac0:	mov	r1, r3
   1dac4:	bcc	1dae4 <__assert_fail@plt+0xb778>
   1dac8:	cmp	r3, #126	; 0x7e
   1dacc:	orr	r1, r3, #256	; 0x100
   1dad0:	mvneq	r1, #0
   1dad4:	cmp	lr, ip
   1dad8:	bne	1daec <__assert_fail@plt+0xb780>
   1dadc:	b	1db34 <__assert_fail@plt+0xb7c8>
   1dae0:	mov	r1, r3
   1dae4:	cmp	lr, ip
   1dae8:	beq	1db34 <__assert_fail@plt+0xb7c8>
   1daec:	ldrb	r3, [r8, ip]
   1daf0:	sub	r7, r3, #48	; 0x30
   1daf4:	cmp	r7, #10
   1daf8:	bcc	1db34 <__assert_fail@plt+0xb7c8>
   1dafc:	sub	r0, r3, #65	; 0x41
   1db00:	cmp	r0, #26
   1db04:	bcc	1db30 <__assert_fail@plt+0xb7c4>
   1db08:	sub	r0, r3, #97	; 0x61
   1db0c:	cmp	r0, #26
   1db10:	mov	r0, r3
   1db14:	bcc	1db34 <__assert_fail@plt+0xb7c8>
   1db18:	cmp	r3, #126	; 0x7e
   1db1c:	orr	r0, r3, #256	; 0x100
   1db20:	mvneq	r0, #0
   1db24:	cmp	r1, r0
   1db28:	beq	1db3c <__assert_fail@plt+0xb7d0>
   1db2c:	b	1dc30 <__assert_fail@plt+0xb8c4>
   1db30:	mov	r0, r3
   1db34:	cmp	r1, r0
   1db38:	bne	1dc30 <__assert_fail@plt+0xb8c4>
   1db3c:	add	ip, ip, #1
   1db40:	add	r6, r6, #1
   1db44:	cmp	r6, r2
   1db48:	bcc	1da60 <__assert_fail@plt+0xb6f4>
   1db4c:	b	1da70 <__assert_fail@plt+0xb704>
   1db50:	mov	r3, r6
   1db54:	ldrb	r4, [r9, r3]
   1db58:	add	r3, r3, #1
   1db5c:	cmp	r4, #48	; 0x30
   1db60:	beq	1db54 <__assert_fail@plt+0xb7e8>
   1db64:	sub	r6, r3, #1
   1db68:	ldrb	r5, [r8, ip]
   1db6c:	add	ip, ip, #1
   1db70:	cmp	r5, #48	; 0x30
   1db74:	beq	1db68 <__assert_fail@plt+0xb7fc>
   1db78:	sub	r1, r5, #48	; 0x30
   1db7c:	sub	r7, r4, #48	; 0x30
   1db80:	mov	r0, #0
   1db84:	cmp	r1, #10
   1db88:	mov	r1, #0
   1db8c:	movwcc	r1, #1
   1db90:	cmp	r7, #9
   1db94:	bhi	1dc0c <__assert_fail@plt+0xb8a0>
   1db98:	add	r0, r8, ip
   1db9c:	mvn	r6, #0
   1dba0:	mov	r7, r9
   1dba4:	str	lr, [sp, #4]
   1dba8:	str	r0, [sp, #8]
   1dbac:	mov	r0, #0
   1dbb0:	tst	r1, #1
   1dbb4:	beq	1dc24 <__assert_fail@plt+0xb8b8>
   1dbb8:	ldr	r1, [sp, #8]
   1dbbc:	cmp	r0, #0
   1dbc0:	subeq	r0, r4, r5
   1dbc4:	ldrb	r4, [r7, r3]
   1dbc8:	add	r7, r7, #1
   1dbcc:	add	r1, r1, r6
   1dbd0:	add	r6, r6, #1
   1dbd4:	ldrb	r5, [r1, #1]
   1dbd8:	sub	lr, r4, #48	; 0x30
   1dbdc:	sub	r1, r5, #48	; 0x30
   1dbe0:	cmp	r1, #10
   1dbe4:	mov	r1, #0
   1dbe8:	movwcc	r1, #1
   1dbec:	cmp	lr, #10
   1dbf0:	bcc	1dbb0 <__assert_fail@plt+0xb844>
   1dbf4:	ldr	lr, [sp, #4]
   1dbf8:	add	ip, ip, r6
   1dbfc:	add	r6, r3, r6
   1dc00:	cmp	r1, #0
   1dc04:	beq	1dc18 <__assert_fail@plt+0xb8ac>
   1dc08:	b	1d840 <__assert_fail@plt+0xb4d4>
   1dc0c:	sub	ip, ip, #1
   1dc10:	cmp	r1, #0
   1dc14:	bne	1d840 <__assert_fail@plt+0xb4d4>
   1dc18:	cmp	r0, #0
   1dc1c:	beq	1da4c <__assert_fail@plt+0xb6e0>
   1dc20:	b	1dc38 <__assert_fail@plt+0xb8cc>
   1dc24:	mov	r0, #1
   1dc28:	sub	sp, fp, #28
   1dc2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc30:	subs	r0, r1, r0
   1dc34:	moveq	r0, sl
   1dc38:	sub	sp, fp, #28
   1dc3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc40:	mov	r0, sl
   1dc44:	sub	sp, fp, #28
   1dc48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc4c:	push	{r4, r5, r6, sl, fp, lr}
   1dc50:	add	fp, sp, #16
   1dc54:	mov	r4, r0
   1dc58:	bl	12198 <__errno_location@plt>
   1dc5c:	ldr	r6, [r0]
   1dc60:	mov	r5, r0
   1dc64:	mov	r0, r4
   1dc68:	bl	11eb0 <free@plt>
   1dc6c:	str	r6, [r5]
   1dc70:	pop	{r4, r5, r6, sl, fp, pc}
   1dc74:	push	{r4, r5, r6, r7, fp, lr}
   1dc78:	add	fp, sp, #16
   1dc7c:	sub	sp, sp, #8
   1dc80:	mov	r4, r0
   1dc84:	ldr	r0, [r0, #4]
   1dc88:	mov	r5, r3
   1dc8c:	mov	r6, r2
   1dc90:	ldr	r1, [r4, #8]
   1dc94:	cmp	r1, r0
   1dc98:	bne	1dcb4 <__assert_fail@plt+0xb948>
   1dc9c:	ldrd	r0, [r4, #16]
   1dca0:	cmp	r1, r0
   1dca4:	bne	1dcb4 <__assert_fail@plt+0xb948>
   1dca8:	ldr	r0, [r4, #36]	; 0x24
   1dcac:	cmp	r0, #0
   1dcb0:	beq	1dccc <__assert_fail@plt+0xb960>
   1dcb4:	mov	r0, r4
   1dcb8:	mov	r2, r6
   1dcbc:	mov	r3, r5
   1dcc0:	sub	sp, fp, #16
   1dcc4:	pop	{r4, r5, r6, r7, fp, lr}
   1dcc8:	b	12228 <fseeko64@plt>
   1dccc:	ldr	r7, [fp, #8]
   1dcd0:	mov	r0, r4
   1dcd4:	bl	121ec <fileno@plt>
   1dcd8:	mov	r2, r6
   1dcdc:	mov	r3, r5
   1dce0:	str	r7, [sp]
   1dce4:	bl	12048 <lseek64@plt>
   1dce8:	and	r2, r0, r1
   1dcec:	cmn	r2, #1
   1dcf0:	beq	1dd10 <__assert_fail@plt+0xb9a4>
   1dcf4:	strd	r0, [r4, #80]	; 0x50
   1dcf8:	ldr	r0, [r4]
   1dcfc:	bic	r0, r0, #16
   1dd00:	str	r0, [r4]
   1dd04:	mov	r0, #0
   1dd08:	sub	sp, fp, #16
   1dd0c:	pop	{r4, r5, r6, r7, fp, pc}
   1dd10:	mvn	r0, #0
   1dd14:	sub	sp, fp, #16
   1dd18:	pop	{r4, r5, r6, r7, fp, pc}
   1dd1c:	push	{r4, sl, fp, lr}
   1dd20:	add	fp, sp, #8
   1dd24:	sub	sp, sp, #264	; 0x108
   1dd28:	add	r1, sp, #7
   1dd2c:	movw	r2, #257	; 0x101
   1dd30:	bl	22c64 <__assert_fail@plt+0x108f8>
   1dd34:	mov	r4, #0
   1dd38:	cmp	r0, #0
   1dd3c:	bne	1dd7c <__assert_fail@plt+0xba10>
   1dd40:	movw	r1, #30700	; 0x77ec
   1dd44:	add	r0, sp, #7
   1dd48:	mov	r2, #2
   1dd4c:	movt	r1, #2
   1dd50:	bl	1215c <bcmp@plt>
   1dd54:	cmp	r0, #0
   1dd58:	beq	1dd7c <__assert_fail@plt+0xba10>
   1dd5c:	movw	r1, #33803	; 0x840b
   1dd60:	add	r0, sp, #7
   1dd64:	mov	r2, #6
   1dd68:	movt	r1, #2
   1dd6c:	bl	1215c <bcmp@plt>
   1dd70:	cmp	r0, #0
   1dd74:	mov	r4, r0
   1dd78:	movwne	r4, #1
   1dd7c:	mov	r0, r4
   1dd80:	sub	sp, fp, #8
   1dd84:	pop	{r4, sl, fp, pc}
   1dd88:	ldr	r0, [r0, #8]
   1dd8c:	bx	lr
   1dd90:	ldr	r0, [r0, #12]
   1dd94:	bx	lr
   1dd98:	ldr	r0, [r0, #16]
   1dd9c:	bx	lr
   1dda0:	ldm	r0, {r2, ip}
   1dda4:	mov	r0, #0
   1dda8:	cmp	r2, ip
   1ddac:	bxcs	lr
   1ddb0:	mov	r0, #0
   1ddb4:	ldr	r1, [r2]
   1ddb8:	cmp	r1, #0
   1ddbc:	bne	1ddd8 <__assert_fail@plt+0xba6c>
   1ddc0:	add	r2, r2, #8
   1ddc4:	cmp	r2, ip
   1ddc8:	bcs	1de04 <__assert_fail@plt+0xba98>
   1ddcc:	ldr	r1, [r2]
   1ddd0:	cmp	r1, #0
   1ddd4:	beq	1ddc0 <__assert_fail@plt+0xba54>
   1ddd8:	mov	r3, #0
   1dddc:	mov	r1, r2
   1dde0:	ldr	r1, [r1, #4]
   1dde4:	add	r3, r3, #1
   1dde8:	cmp	r1, #0
   1ddec:	bne	1dde0 <__assert_fail@plt+0xba74>
   1ddf0:	cmp	r3, r0
   1ddf4:	movhi	r0, r3
   1ddf8:	add	r2, r2, #8
   1ddfc:	cmp	r2, ip
   1de00:	bcc	1ddcc <__assert_fail@plt+0xba60>
   1de04:	bx	lr
   1de08:	push	{fp, lr}
   1de0c:	mov	fp, sp
   1de10:	ldm	r0, {r3, ip}
   1de14:	mov	lr, #0
   1de18:	mov	r1, #0
   1de1c:	cmp	r3, ip
   1de20:	bcs	1de74 <__assert_fail@plt+0xbb08>
   1de24:	mov	r1, #0
   1de28:	mov	lr, #0
   1de2c:	ldr	r2, [r3]
   1de30:	cmp	r2, #0
   1de34:	bne	1de50 <__assert_fail@plt+0xbae4>
   1de38:	add	r3, r3, #8
   1de3c:	cmp	r3, ip
   1de40:	bcs	1de74 <__assert_fail@plt+0xbb08>
   1de44:	ldr	r2, [r3]
   1de48:	cmp	r2, #0
   1de4c:	beq	1de38 <__assert_fail@plt+0xbacc>
   1de50:	mov	r2, r3
   1de54:	ldr	r2, [r2, #4]
   1de58:	add	r1, r1, #1
   1de5c:	cmp	r2, #0
   1de60:	bne	1de54 <__assert_fail@plt+0xbae8>
   1de64:	add	lr, lr, #1
   1de68:	add	r3, r3, #8
   1de6c:	cmp	r3, ip
   1de70:	bcc	1de44 <__assert_fail@plt+0xbad8>
   1de74:	ldr	r2, [r0, #12]
   1de78:	cmp	lr, r2
   1de7c:	bne	1de94 <__assert_fail@plt+0xbb28>
   1de80:	ldr	r2, [r0, #16]
   1de84:	mov	r0, #1
   1de88:	cmp	r1, r2
   1de8c:	movne	r0, #0
   1de90:	pop	{fp, pc}
   1de94:	mov	r0, #0
   1de98:	pop	{fp, pc}
   1de9c:	nop	{0}
   1dea0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1dea4:	add	fp, sp, #24
   1dea8:	sub	sp, sp, #8
   1deac:	ldr	r6, [r0]
   1deb0:	ldmib	r0, {r2, r7, r8}
   1deb4:	ldr	r3, [r0, #16]
   1deb8:	mov	r4, r1
   1debc:	mov	r5, #0
   1dec0:	cmp	r6, r2
   1dec4:	bcs	1df1c <__assert_fail@plt+0xbbb0>
   1dec8:	mov	r5, #0
   1decc:	ldr	r0, [r6]
   1ded0:	cmp	r0, #0
   1ded4:	bne	1def0 <__assert_fail@plt+0xbb84>
   1ded8:	add	r6, r6, #8
   1dedc:	cmp	r6, r2
   1dee0:	bcs	1df1c <__assert_fail@plt+0xbbb0>
   1dee4:	ldr	r0, [r6]
   1dee8:	cmp	r0, #0
   1deec:	beq	1ded8 <__assert_fail@plt+0xbb6c>
   1def0:	mov	r0, #0
   1def4:	mov	r1, r6
   1def8:	ldr	r1, [r1, #4]
   1defc:	add	r0, r0, #1
   1df00:	cmp	r1, #0
   1df04:	bne	1def8 <__assert_fail@plt+0xbb8c>
   1df08:	cmp	r0, r5
   1df0c:	movhi	r5, r0
   1df10:	add	r6, r6, #8
   1df14:	cmp	r6, r2
   1df18:	bcc	1dee4 <__assert_fail@plt+0xbb78>
   1df1c:	movw	r2, #33809	; 0x8411
   1df20:	mov	r0, r4
   1df24:	mov	r1, #1
   1df28:	movt	r2, #2
   1df2c:	bl	121f8 <__fprintf_chk@plt>
   1df30:	movw	r2, #33833	; 0x8429
   1df34:	mov	r0, r4
   1df38:	mov	r1, #1
   1df3c:	mov	r3, r7
   1df40:	movt	r2, #2
   1df44:	bl	121f8 <__fprintf_chk@plt>
   1df48:	vmov	s0, r8
   1df4c:	vldr	d16, [pc, #76]	; 1dfa0 <__assert_fail@plt+0xbc34>
   1df50:	movw	r2, #33857	; 0x8441
   1df54:	mov	r0, r4
   1df58:	mov	r1, #1
   1df5c:	mov	r3, r8
   1df60:	movt	r2, #2
   1df64:	vcvt.f64.u32	d17, s0
   1df68:	vmov	s0, r7
   1df6c:	vcvt.f64.u32	d18, s0
   1df70:	vmul.f64	d16, d17, d16
   1df74:	vdiv.f64	d16, d16, d18
   1df78:	vstr	d16, [sp]
   1df7c:	bl	121f8 <__fprintf_chk@plt>
   1df80:	movw	r2, #33890	; 0x8462
   1df84:	mov	r0, r4
   1df88:	mov	r1, #1
   1df8c:	mov	r3, r5
   1df90:	movt	r2, #2
   1df94:	sub	sp, fp, #24
   1df98:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1df9c:	b	121f8 <__fprintf_chk@plt>
   1dfa0:	andeq	r0, r0, r0
   1dfa4:	subsmi	r0, r9, r0
   1dfa8:	push	{r4, r5, r6, r7, fp, lr}
   1dfac:	add	fp, sp, #16
   1dfb0:	mov	r4, r1
   1dfb4:	ldr	r1, [r0, #8]
   1dfb8:	ldr	r2, [r0, #24]
   1dfbc:	mov	r5, r0
   1dfc0:	mov	r0, r4
   1dfc4:	blx	r2
   1dfc8:	ldr	r1, [r5, #8]
   1dfcc:	cmp	r0, r1
   1dfd0:	bcs	1e038 <__assert_fail@plt+0xbccc>
   1dfd4:	ldr	r7, [r5]
   1dfd8:	mov	r6, #0
   1dfdc:	ldr	r1, [r7, r0, lsl #3]!
   1dfe0:	cmp	r1, #0
   1dfe4:	cmpne	r7, #0
   1dfe8:	bne	1e018 <__assert_fail@plt+0xbcac>
   1dfec:	mov	r0, r6
   1dff0:	pop	{r4, r5, r6, r7, fp, pc}
   1dff4:	ldr	r2, [r5, #28]
   1dff8:	mov	r0, r4
   1dffc:	blx	r2
   1e000:	cmp	r0, #0
   1e004:	bne	1e02c <__assert_fail@plt+0xbcc0>
   1e008:	ldr	r7, [r7, #4]
   1e00c:	cmp	r7, #0
   1e010:	beq	1dfec <__assert_fail@plt+0xbc80>
   1e014:	ldr	r1, [r7]
   1e018:	cmp	r1, r4
   1e01c:	bne	1dff4 <__assert_fail@plt+0xbc88>
   1e020:	mov	r6, r4
   1e024:	mov	r0, r6
   1e028:	pop	{r4, r5, r6, r7, fp, pc}
   1e02c:	ldr	r6, [r7]
   1e030:	mov	r0, r6
   1e034:	pop	{r4, r5, r6, r7, fp, pc}
   1e038:	bl	12348 <abort@plt>
   1e03c:	push	{fp, lr}
   1e040:	mov	fp, sp
   1e044:	ldr	r1, [r0, #16]
   1e048:	cmp	r1, #0
   1e04c:	beq	1e06c <__assert_fail@plt+0xbd00>
   1e050:	ldm	r0, {r1, r2}
   1e054:	cmp	r1, r2
   1e058:	bcs	1e074 <__assert_fail@plt+0xbd08>
   1e05c:	ldr	r0, [r1], #8
   1e060:	cmp	r0, #0
   1e064:	beq	1e054 <__assert_fail@plt+0xbce8>
   1e068:	pop	{fp, pc}
   1e06c:	mov	r0, #0
   1e070:	pop	{fp, pc}
   1e074:	bl	12348 <abort@plt>
   1e078:	push	{r4, r5, fp, lr}
   1e07c:	add	fp, sp, #8
   1e080:	mov	r5, r1
   1e084:	ldr	r1, [r0, #8]
   1e088:	ldr	r2, [r0, #24]
   1e08c:	mov	r4, r0
   1e090:	mov	r0, r5
   1e094:	blx	r2
   1e098:	ldr	r1, [r4, #8]
   1e09c:	cmp	r0, r1
   1e0a0:	bcs	1e104 <__assert_fail@plt+0xbd98>
   1e0a4:	ldr	r1, [r4]
   1e0a8:	add	r2, r1, r0, lsl #3
   1e0ac:	ldr	r3, [r2]
   1e0b0:	ldr	r2, [r2, #4]
   1e0b4:	cmp	r3, r5
   1e0b8:	beq	1e0c8 <__assert_fail@plt+0xbd5c>
   1e0bc:	cmp	r2, #0
   1e0c0:	bne	1e0ac <__assert_fail@plt+0xbd40>
   1e0c4:	b	1e0d8 <__assert_fail@plt+0xbd6c>
   1e0c8:	cmp	r2, #0
   1e0cc:	beq	1e0d8 <__assert_fail@plt+0xbd6c>
   1e0d0:	ldr	r0, [r2]
   1e0d4:	pop	{r4, r5, fp, pc}
   1e0d8:	ldr	r2, [r4, #4]
   1e0dc:	add	r0, r1, r0, lsl #3
   1e0e0:	add	r1, r0, #8
   1e0e4:	cmp	r1, r2
   1e0e8:	bcs	1e0fc <__assert_fail@plt+0xbd90>
   1e0ec:	ldr	r0, [r1], #8
   1e0f0:	cmp	r0, #0
   1e0f4:	beq	1e0e4 <__assert_fail@plt+0xbd78>
   1e0f8:	pop	{r4, r5, fp, pc}
   1e0fc:	mov	r0, #0
   1e100:	pop	{r4, r5, fp, pc}
   1e104:	bl	12348 <abort@plt>
   1e108:	push	{r4, r5, fp, lr}
   1e10c:	add	fp, sp, #8
   1e110:	ldm	r0, {r5, lr}
   1e114:	mov	ip, r0
   1e118:	mov	r0, #0
   1e11c:	cmp	r5, lr
   1e120:	popcs	{r4, r5, fp, pc}
   1e124:	mov	r0, #0
   1e128:	ldr	r3, [r5]
   1e12c:	cmp	r3, #0
   1e130:	cmpne	r5, #0
   1e134:	beq	1e140 <__assert_fail@plt+0xbdd4>
   1e138:	b	1e15c <__assert_fail@plt+0xbdf0>
   1e13c:	ldr	lr, [ip, #4]
   1e140:	add	r5, r5, #8
   1e144:	cmp	r5, lr
   1e148:	bcs	1e184 <__assert_fail@plt+0xbe18>
   1e14c:	ldr	r3, [r5]
   1e150:	cmp	r3, #0
   1e154:	cmpne	r5, #0
   1e158:	beq	1e140 <__assert_fail@plt+0xbdd4>
   1e15c:	mov	r3, r5
   1e160:	cmp	r0, r2
   1e164:	bcs	1e184 <__assert_fail@plt+0xbe18>
   1e168:	ldr	r4, [r3]
   1e16c:	str	r4, [r1, r0, lsl #2]
   1e170:	add	r0, r0, #1
   1e174:	ldr	r3, [r3, #4]
   1e178:	cmp	r3, #0
   1e17c:	bne	1e160 <__assert_fail@plt+0xbdf4>
   1e180:	b	1e13c <__assert_fail@plt+0xbdd0>
   1e184:	pop	{r4, r5, fp, pc}
   1e188:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e18c:	add	fp, sp, #24
   1e190:	mov	r5, r1
   1e194:	ldr	r4, [r0]
   1e198:	ldr	r1, [r0, #4]
   1e19c:	mov	r6, #0
   1e1a0:	cmp	r4, r1
   1e1a4:	bcs	1e220 <__assert_fail@plt+0xbeb4>
   1e1a8:	mov	r9, r2
   1e1ac:	mov	r8, r0
   1e1b0:	mov	r6, #0
   1e1b4:	ldr	r0, [r4]
   1e1b8:	cmp	r0, #0
   1e1bc:	cmpne	r4, #0
   1e1c0:	beq	1e1cc <__assert_fail@plt+0xbe60>
   1e1c4:	b	1e1e8 <__assert_fail@plt+0xbe7c>
   1e1c8:	ldr	r1, [r8, #4]
   1e1cc:	add	r4, r4, #8
   1e1d0:	cmp	r4, r1
   1e1d4:	bcs	1e220 <__assert_fail@plt+0xbeb4>
   1e1d8:	ldr	r0, [r4]
   1e1dc:	cmp	r0, #0
   1e1e0:	cmpne	r4, #0
   1e1e4:	beq	1e1cc <__assert_fail@plt+0xbe60>
   1e1e8:	mov	r1, r9
   1e1ec:	blx	r5
   1e1f0:	cmp	r0, #0
   1e1f4:	beq	1e220 <__assert_fail@plt+0xbeb4>
   1e1f8:	mov	r7, r4
   1e1fc:	ldr	r7, [r7, #4]
   1e200:	add	r6, r6, #1
   1e204:	cmp	r7, #0
   1e208:	beq	1e1c8 <__assert_fail@plt+0xbe5c>
   1e20c:	ldr	r0, [r7]
   1e210:	mov	r1, r9
   1e214:	blx	r5
   1e218:	cmp	r0, #0
   1e21c:	bne	1e1fc <__assert_fail@plt+0xbe90>
   1e220:	mov	r0, r6
   1e224:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e228:	ldrb	r2, [r0]
   1e22c:	cmp	r2, #0
   1e230:	moveq	r0, #0
   1e234:	bxeq	lr
   1e238:	add	r3, r0, #1
   1e23c:	mov	r0, #0
   1e240:	rsb	r0, r0, r0, lsl #5
   1e244:	uxtab	r0, r0, r2
   1e248:	udiv	r2, r0, r1
   1e24c:	mls	r0, r2, r1, r0
   1e250:	ldrb	r2, [r3], #1
   1e254:	cmp	r2, #0
   1e258:	bne	1e240 <__assert_fail@plt+0xbed4>
   1e25c:	bx	lr
   1e260:	movw	r1, #33920	; 0x8480
   1e264:	movt	r1, #2
   1e268:	vld1.32	{d16-d17}, [r1]!
   1e26c:	ldr	r1, [r1]
   1e270:	vst1.32	{d16-d17}, [r0]!
   1e274:	str	r1, [r0]
   1e278:	bx	lr
   1e27c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e280:	add	fp, sp, #24
   1e284:	movw	r9, #58544	; 0xe4b0
   1e288:	cmp	r3, #0
   1e28c:	movw	r5, #58524	; 0xe49c
   1e290:	mov	r6, r0
   1e294:	mov	r0, #40	; 0x28
   1e298:	mov	r7, r1
   1e29c:	movt	r9, #1
   1e2a0:	movne	r9, r3
   1e2a4:	cmp	r2, #0
   1e2a8:	movt	r5, #1
   1e2ac:	movne	r5, r2
   1e2b0:	bl	24f0c <__assert_fail@plt+0x12ba0>
   1e2b4:	mov	r8, #0
   1e2b8:	cmp	r0, #0
   1e2bc:	beq	1e484 <__assert_fail@plt+0xc118>
   1e2c0:	mov	r4, r0
   1e2c4:	movw	r0, #33920	; 0x8480
   1e2c8:	cmp	r7, #0
   1e2cc:	movt	r0, #2
   1e2d0:	moveq	r7, r0
   1e2d4:	cmp	r7, r0
   1e2d8:	str	r7, [r4, #20]
   1e2dc:	beq	1e358 <__assert_fail@plt+0xbfec>
   1e2e0:	vldr	s2, [pc, #420]	; 1e48c <__assert_fail@plt+0xc120>
   1e2e4:	vldr	s0, [r7, #8]
   1e2e8:	vcmpe.f32	s0, s2
   1e2ec:	vmrs	APSR_nzcv, fpscr
   1e2f0:	ble	1e404 <__assert_fail@plt+0xc098>
   1e2f4:	vldr	s4, [pc, #404]	; 1e490 <__assert_fail@plt+0xc124>
   1e2f8:	vcmpe.f32	s0, s4
   1e2fc:	vmrs	APSR_nzcv, fpscr
   1e300:	bpl	1e404 <__assert_fail@plt+0xc098>
   1e304:	vldr	s4, [pc, #392]	; 1e494 <__assert_fail@plt+0xc128>
   1e308:	vldr	s6, [r7, #12]
   1e30c:	vcmpe.f32	s6, s4
   1e310:	vmrs	APSR_nzcv, fpscr
   1e314:	ble	1e404 <__assert_fail@plt+0xc098>
   1e318:	vldr	s4, [r7]
   1e31c:	vcmpe.f32	s4, #0.0
   1e320:	vmrs	APSR_nzcv, fpscr
   1e324:	blt	1e404 <__assert_fail@plt+0xc098>
   1e328:	vadd.f32	s2, s4, s2
   1e32c:	vcmpe.f32	s2, s0
   1e330:	vmrs	APSR_nzcv, fpscr
   1e334:	bpl	1e404 <__assert_fail@plt+0xc098>
   1e338:	vldr	s0, [r7, #4]
   1e33c:	vmov.f32	s4, #112	; 0x3f800000  1.0
   1e340:	vcmpe.f32	s0, s4
   1e344:	vmrs	APSR_nzcv, fpscr
   1e348:	bhi	1e404 <__assert_fail@plt+0xc098>
   1e34c:	vcmpe.f32	s2, s0
   1e350:	vmrs	APSR_nzcv, fpscr
   1e354:	bpl	1e404 <__assert_fail@plt+0xc098>
   1e358:	ldrb	r0, [r7, #16]
   1e35c:	cmp	r0, #0
   1e360:	bne	1e38c <__assert_fail@plt+0xc020>
   1e364:	vmov	s2, r6
   1e368:	vldr	s0, [r7, #8]
   1e36c:	vldr	s4, [pc, #292]	; 1e498 <__assert_fail@plt+0xc12c>
   1e370:	vcvt.f32.u32	s2, s2
   1e374:	vdiv.f32	s2, s2, s0
   1e378:	vcvt.u32.f32	s0, s2
   1e37c:	vcmpe.f32	s2, s4
   1e380:	vmrs	APSR_nzcv, fpscr
   1e384:	bge	1e420 <__assert_fail@plt+0xc0b4>
   1e388:	vmov	r6, s0
   1e38c:	cmp	r6, #10
   1e390:	movls	r6, #10
   1e394:	orr	r0, r6, #1
   1e398:	cmn	r0, #1
   1e39c:	beq	1e420 <__assert_fail@plt+0xc0b4>
   1e3a0:	ldr	r6, [fp, #8]
   1e3a4:	mov	r1, #3
   1e3a8:	cmp	r0, #10
   1e3ac:	bcc	1e3e4 <__assert_fail@plt+0xc078>
   1e3b0:	mov	r1, #3
   1e3b4:	mov	r3, #9
   1e3b8:	mov	r2, #12
   1e3bc:	udiv	r7, r0, r1
   1e3c0:	mls	r7, r7, r1, r0
   1e3c4:	cmp	r7, #0
   1e3c8:	beq	1e3e4 <__assert_fail@plt+0xc078>
   1e3cc:	add	r3, r3, r2
   1e3d0:	add	r2, r2, #8
   1e3d4:	add	r1, r1, #2
   1e3d8:	add	r3, r3, #4
   1e3dc:	cmp	r3, r0
   1e3e0:	bcc	1e3bc <__assert_fail@plt+0xc050>
   1e3e4:	udiv	r2, r0, r1
   1e3e8:	mls	r1, r2, r1, r0
   1e3ec:	cmp	r1, #0
   1e3f0:	bne	1e418 <__assert_fail@plt+0xc0ac>
   1e3f4:	add	r0, r0, #2
   1e3f8:	cmn	r0, #1
   1e3fc:	bne	1e3a4 <__assert_fail@plt+0xc038>
   1e400:	b	1e420 <__assert_fail@plt+0xc0b4>
   1e404:	str	r0, [r4, #20]
   1e408:	mov	r0, r4
   1e40c:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   1e410:	mov	r0, r8
   1e414:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e418:	cmp	r0, #536870912	; 0x20000000
   1e41c:	bcc	1e438 <__assert_fail@plt+0xc0cc>
   1e420:	mov	r0, #0
   1e424:	str	r0, [r4, #8]
   1e428:	mov	r0, r4
   1e42c:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   1e430:	mov	r0, r8
   1e434:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e438:	cmp	r0, #0
   1e43c:	str	r0, [r4, #8]
   1e440:	beq	1e428 <__assert_fail@plt+0xc0bc>
   1e444:	mov	r1, #8
   1e448:	bl	24eb8 <__assert_fail@plt+0x12b4c>
   1e44c:	cmp	r0, #0
   1e450:	str	r0, [r4]
   1e454:	beq	1e428 <__assert_fail@plt+0xc0bc>
   1e458:	mov	r1, #0
   1e45c:	str	r5, [r4, #24]
   1e460:	str	r9, [r4, #28]
   1e464:	str	r6, [r4, #32]
   1e468:	mov	r8, r4
   1e46c:	str	r1, [r4, #36]	; 0x24
   1e470:	str	r1, [r4, #12]
   1e474:	str	r1, [r4, #16]
   1e478:	ldr	r1, [r4, #8]
   1e47c:	add	r0, r0, r1, lsl #3
   1e480:	str	r0, [r4, #4]
   1e484:	mov	r0, r8
   1e488:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e48c:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e490:	svccc	0x00666666
   1e494:	svccc	0x008ccccd
   1e498:	svcmi	0x00800000
   1e49c:	ror	r2, r0, #3
   1e4a0:	udiv	r2, r2, r1
   1e4a4:	mul	r1, r2, r1
   1e4a8:	rsb	r0, r1, r0, ror #3
   1e4ac:	bx	lr
   1e4b0:	sub	r0, r0, r1
   1e4b4:	clz	r0, r0
   1e4b8:	lsr	r0, r0, #5
   1e4bc:	bx	lr
   1e4c0:	push	{r4, r5, r6, r7, fp, lr}
   1e4c4:	add	fp, sp, #16
   1e4c8:	mov	r4, r0
   1e4cc:	ldr	r5, [r0]
   1e4d0:	ldr	r0, [r0, #4]
   1e4d4:	cmp	r5, r0
   1e4d8:	bcs	1e588 <__assert_fail@plt+0xc21c>
   1e4dc:	mov	r6, #0
   1e4e0:	ldr	r1, [r5]
   1e4e4:	cmp	r1, #0
   1e4e8:	bne	1e514 <__assert_fail@plt+0xc1a8>
   1e4ec:	b	1e4fc <__assert_fail@plt+0xc190>
   1e4f0:	str	r6, [r5]
   1e4f4:	str	r6, [r5, #4]
   1e4f8:	ldr	r0, [r4, #4]
   1e4fc:	add	r5, r5, #8
   1e500:	cmp	r5, r0
   1e504:	bcs	1e588 <__assert_fail@plt+0xc21c>
   1e508:	ldr	r1, [r5]
   1e50c:	cmp	r1, #0
   1e510:	beq	1e4fc <__assert_fail@plt+0xc190>
   1e514:	ldr	r1, [r4, #32]
   1e518:	ldr	r7, [r5, #4]
   1e51c:	cmp	r1, #0
   1e520:	mov	r0, r1
   1e524:	movwne	r0, #1
   1e528:	cmp	r7, #0
   1e52c:	bne	1e570 <__assert_fail@plt+0xc204>
   1e530:	cmp	r0, #0
   1e534:	beq	1e4f0 <__assert_fail@plt+0xc184>
   1e538:	ldr	r0, [r5]
   1e53c:	blx	r1
   1e540:	b	1e4f0 <__assert_fail@plt+0xc184>
   1e544:	str	r6, [r7]
   1e548:	cmp	r1, #0
   1e54c:	ldr	r2, [r7, #4]
   1e550:	ldr	r0, [r4, #36]	; 0x24
   1e554:	str	r0, [r7, #4]
   1e558:	mov	r0, r1
   1e55c:	str	r7, [r4, #36]	; 0x24
   1e560:	movwne	r0, #1
   1e564:	cmp	r2, #0
   1e568:	mov	r7, r2
   1e56c:	beq	1e530 <__assert_fail@plt+0xc1c4>
   1e570:	tst	r0, #1
   1e574:	beq	1e544 <__assert_fail@plt+0xc1d8>
   1e578:	ldr	r0, [r7]
   1e57c:	blx	r1
   1e580:	ldr	r1, [r4, #32]
   1e584:	b	1e544 <__assert_fail@plt+0xc1d8>
   1e588:	mov	r0, #0
   1e58c:	str	r0, [r4, #12]
   1e590:	str	r0, [r4, #16]
   1e594:	pop	{r4, r5, r6, r7, fp, pc}
   1e598:	push	{r4, r5, r6, sl, fp, lr}
   1e59c:	add	fp, sp, #16
   1e5a0:	mov	r4, r0
   1e5a4:	ldr	r0, [r0, #32]
   1e5a8:	cmp	r0, #0
   1e5ac:	beq	1e620 <__assert_fail@plt+0xc2b4>
   1e5b0:	ldr	r0, [r4, #16]
   1e5b4:	cmp	r0, #0
   1e5b8:	beq	1e620 <__assert_fail@plt+0xc2b4>
   1e5bc:	ldr	r5, [r4]
   1e5c0:	ldr	r1, [r4, #4]
   1e5c4:	cmp	r5, r1
   1e5c8:	bcc	1e5e0 <__assert_fail@plt+0xc274>
   1e5cc:	b	1e620 <__assert_fail@plt+0xc2b4>
   1e5d0:	ldr	r1, [r4, #4]
   1e5d4:	add	r5, r5, #8
   1e5d8:	cmp	r5, r1
   1e5dc:	bcs	1e620 <__assert_fail@plt+0xc2b4>
   1e5e0:	ldr	r0, [r5]
   1e5e4:	cmp	r0, #0
   1e5e8:	cmpne	r5, #0
   1e5ec:	beq	1e5d4 <__assert_fail@plt+0xc268>
   1e5f0:	ldr	r1, [r4, #32]
   1e5f4:	blx	r1
   1e5f8:	ldr	r6, [r5, #4]
   1e5fc:	cmp	r6, #0
   1e600:	beq	1e5d0 <__assert_fail@plt+0xc264>
   1e604:	ldr	r1, [r4, #32]
   1e608:	ldr	r0, [r6]
   1e60c:	blx	r1
   1e610:	ldr	r6, [r6, #4]
   1e614:	cmp	r6, #0
   1e618:	bne	1e604 <__assert_fail@plt+0xc298>
   1e61c:	b	1e5d0 <__assert_fail@plt+0xc264>
   1e620:	ldr	r5, [r4]
   1e624:	ldr	r1, [r4, #4]
   1e628:	cmp	r5, r1
   1e62c:	bcc	1e640 <__assert_fail@plt+0xc2d4>
   1e630:	b	1e668 <__assert_fail@plt+0xc2fc>
   1e634:	add	r5, r5, #8
   1e638:	cmp	r5, r1
   1e63c:	bcs	1e668 <__assert_fail@plt+0xc2fc>
   1e640:	ldr	r0, [r5, #4]
   1e644:	cmp	r0, #0
   1e648:	beq	1e634 <__assert_fail@plt+0xc2c8>
   1e64c:	ldr	r6, [r0, #4]
   1e650:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   1e654:	cmp	r6, #0
   1e658:	mov	r0, r6
   1e65c:	bne	1e64c <__assert_fail@plt+0xc2e0>
   1e660:	ldr	r1, [r4, #4]
   1e664:	b	1e634 <__assert_fail@plt+0xc2c8>
   1e668:	ldr	r0, [r4, #36]	; 0x24
   1e66c:	cmp	r0, #0
   1e670:	beq	1e688 <__assert_fail@plt+0xc31c>
   1e674:	ldr	r5, [r0, #4]
   1e678:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   1e67c:	cmp	r5, #0
   1e680:	mov	r0, r5
   1e684:	bne	1e674 <__assert_fail@plt+0xc308>
   1e688:	ldr	r0, [r4]
   1e68c:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   1e690:	mov	r0, r4
   1e694:	pop	{r4, r5, r6, sl, fp, lr}
   1e698:	b	1dc4c <__assert_fail@plt+0xb8e0>
   1e69c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e6a0:	add	fp, sp, #28
   1e6a4:	sub	sp, sp, #44	; 0x2c
   1e6a8:	mov	r7, r0
   1e6ac:	mov	r4, r0
   1e6b0:	ldr	r0, [r7, #20]!
   1e6b4:	ldrb	r2, [r0, #16]
   1e6b8:	cmp	r2, #0
   1e6bc:	bne	1e6ec <__assert_fail@plt+0xc380>
   1e6c0:	vmov	s2, r1
   1e6c4:	vldr	s0, [r0, #8]
   1e6c8:	vldr	s4, [pc, #592]	; 1e920 <__assert_fail@plt+0xc5b4>
   1e6cc:	mov	r5, #0
   1e6d0:	vcvt.f32.u32	s2, s2
   1e6d4:	vdiv.f32	s2, s2, s0
   1e6d8:	vcvt.u32.f32	s0, s2
   1e6dc:	vcmpe.f32	s2, s4
   1e6e0:	vmrs	APSR_nzcv, fpscr
   1e6e4:	bge	1e810 <__assert_fail@plt+0xc4a4>
   1e6e8:	vmov	r1, s0
   1e6ec:	cmp	r1, #10
   1e6f0:	mov	r5, #0
   1e6f4:	movls	r1, #10
   1e6f8:	orr	r6, r1, #1
   1e6fc:	cmn	r6, #1
   1e700:	beq	1e810 <__assert_fail@plt+0xc4a4>
   1e704:	mov	r0, #3
   1e708:	cmp	r6, #10
   1e70c:	bcc	1e744 <__assert_fail@plt+0xc3d8>
   1e710:	mov	r0, #3
   1e714:	mov	r2, #9
   1e718:	mov	r1, #12
   1e71c:	udiv	r3, r6, r0
   1e720:	mls	r3, r3, r0, r6
   1e724:	cmp	r3, #0
   1e728:	beq	1e744 <__assert_fail@plt+0xc3d8>
   1e72c:	add	r2, r2, r1
   1e730:	add	r1, r1, #8
   1e734:	add	r0, r0, #2
   1e738:	add	r2, r2, #4
   1e73c:	cmp	r2, r6
   1e740:	bcc	1e71c <__assert_fail@plt+0xc3b0>
   1e744:	udiv	r1, r6, r0
   1e748:	mls	r0, r1, r0, r6
   1e74c:	cmp	r0, #0
   1e750:	bne	1e764 <__assert_fail@plt+0xc3f8>
   1e754:	add	r6, r6, #2
   1e758:	cmn	r6, #1
   1e75c:	bne	1e704 <__assert_fail@plt+0xc398>
   1e760:	b	1e810 <__assert_fail@plt+0xc4a4>
   1e764:	sub	r0, r6, #1
   1e768:	cmn	r0, #-536870910	; 0xe0000002
   1e76c:	bhi	1e810 <__assert_fail@plt+0xc4a4>
   1e770:	ldr	r0, [r4, #8]
   1e774:	cmp	r6, r0
   1e778:	bne	1e78c <__assert_fail@plt+0xc420>
   1e77c:	mov	r5, #1
   1e780:	mov	r0, r5
   1e784:	sub	sp, fp, #28
   1e788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e78c:	mov	r0, r6
   1e790:	mov	r1, #8
   1e794:	bl	24eb8 <__assert_fail@plt+0x12b4c>
   1e798:	cmp	r0, #0
   1e79c:	str	r0, [sp, #4]
   1e7a0:	beq	1e810 <__assert_fail@plt+0xc4a4>
   1e7a4:	add	r0, r0, r6, lsl #3
   1e7a8:	mov	r1, #0
   1e7ac:	add	r5, sp, #4
   1e7b0:	mov	sl, r4
   1e7b4:	mov	r2, #0
   1e7b8:	str	r1, [sp, #20]
   1e7bc:	str	r1, [sp, #16]
   1e7c0:	str	r6, [sp, #12]
   1e7c4:	mov	r1, r4
   1e7c8:	str	r0, [sp, #8]
   1e7cc:	add	r0, r5, #20
   1e7d0:	vld1.32	{d16-d17}, [r7]
   1e7d4:	vst1.32	{d16-d17}, [r0]
   1e7d8:	ldr	r0, [sl, #36]!	; 0x24
   1e7dc:	str	r0, [sp, #40]	; 0x28
   1e7e0:	mov	r0, r5
   1e7e4:	bl	1e924 <__assert_fail@plt+0xc5b8>
   1e7e8:	cmp	r0, #0
   1e7ec:	beq	1e81c <__assert_fail@plt+0xc4b0>
   1e7f0:	ldr	r0, [r4]
   1e7f4:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   1e7f8:	mov	r0, #36	; 0x24
   1e7fc:	vld1.32	{d16-d17}, [r5], r0
   1e800:	vst1.32	{d16-d17}, [r4], r0
   1e804:	ldr	r0, [r5]
   1e808:	mov	r5, #1
   1e80c:	str	r0, [r4]
   1e810:	mov	r0, r5
   1e814:	sub	sp, fp, #28
   1e818:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e81c:	ldr	r0, [sp, #40]	; 0x28
   1e820:	str	r0, [sl]
   1e824:	ldr	r0, [sp, #8]
   1e828:	ldr	r8, [sp, #4]
   1e82c:	cmp	r8, r0
   1e830:	str	r0, [sp]
   1e834:	bcs	1e8ec <__assert_fail@plt+0xc580>
   1e838:	mov	r9, #0
   1e83c:	ldr	r0, [r8]
   1e840:	cmp	r0, #0
   1e844:	bne	1e86c <__assert_fail@plt+0xc500>
   1e848:	b	1e850 <__assert_fail@plt+0xc4e4>
   1e84c:	str	r9, [r8, #4]
   1e850:	ldr	r0, [sp]
   1e854:	add	r8, r8, #8
   1e858:	cmp	r8, r0
   1e85c:	bcs	1e8ec <__assert_fail@plt+0xc580>
   1e860:	ldr	r0, [r8]
   1e864:	cmp	r0, #0
   1e868:	beq	1e850 <__assert_fail@plt+0xc4e4>
   1e86c:	ldr	r6, [r8, #4]
   1e870:	cmp	r6, #0
   1e874:	beq	1e84c <__assert_fail@plt+0xc4e0>
   1e878:	ldr	r1, [r4, #8]
   1e87c:	b	1e8a0 <__assert_fail@plt+0xc534>
   1e880:	add	r0, r3, r0, lsl #3
   1e884:	add	r0, r0, #4
   1e888:	ldr	r3, [r0]
   1e88c:	cmp	r2, #0
   1e890:	str	r3, [r6, #4]
   1e894:	str	r6, [r0]
   1e898:	mov	r6, r2
   1e89c:	beq	1e84c <__assert_fail@plt+0xc4e0>
   1e8a0:	ldr	r5, [r6]
   1e8a4:	ldr	r2, [r4, #24]
   1e8a8:	mov	r0, r5
   1e8ac:	blx	r2
   1e8b0:	ldr	r1, [r4, #8]
   1e8b4:	cmp	r0, r1
   1e8b8:	bcs	1e91c <__assert_fail@plt+0xc5b0>
   1e8bc:	ldr	r3, [r4]
   1e8c0:	ldr	r2, [r6, #4]
   1e8c4:	ldr	r7, [r3, r0, lsl #3]
   1e8c8:	cmp	r7, #0
   1e8cc:	bne	1e880 <__assert_fail@plt+0xc514>
   1e8d0:	str	r5, [r3, r0, lsl #3]
   1e8d4:	ldr	r0, [r4, #12]
   1e8d8:	add	r0, r0, #1
   1e8dc:	str	r0, [r4, #12]
   1e8e0:	mov	r0, sl
   1e8e4:	str	r9, [r6]
   1e8e8:	b	1e888 <__assert_fail@plt+0xc51c>
   1e8ec:	add	r1, sp, #4
   1e8f0:	mov	r0, r4
   1e8f4:	mov	r2, #0
   1e8f8:	mov	r5, #0
   1e8fc:	bl	1e924 <__assert_fail@plt+0xc5b8>
   1e900:	cmp	r0, #0
   1e904:	beq	1e91c <__assert_fail@plt+0xc5b0>
   1e908:	ldr	r0, [sp, #4]
   1e90c:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   1e910:	mov	r0, r5
   1e914:	sub	sp, fp, #28
   1e918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e91c:	bl	12348 <abort@plt>
   1e920:	svcmi	0x00800000
   1e924:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e928:	add	fp, sp, #28
   1e92c:	sub	sp, sp, #4
   1e930:	ldr	r8, [r1]
   1e934:	ldr	r3, [r1, #4]
   1e938:	mov	r6, r0
   1e93c:	mov	r0, #1
   1e940:	str	r1, [sp]
   1e944:	cmp	r8, r3
   1e948:	bcs	1eb5c <__assert_fail@plt+0xc7f0>
   1e94c:	add	sl, r6, #36	; 0x24
   1e950:	cmp	r2, #0
   1e954:	beq	1ea10 <__assert_fail@plt+0xc6a4>
   1e958:	mov	r9, #0
   1e95c:	ldr	r1, [r8]
   1e960:	cmp	r1, #0
   1e964:	bne	1e990 <__assert_fail@plt+0xc624>
   1e968:	b	1e978 <__assert_fail@plt+0xc60c>
   1e96c:	ldr	r0, [sp]
   1e970:	ldr	r3, [r0, #4]
   1e974:	str	r9, [r8, #4]
   1e978:	add	r8, r8, #8
   1e97c:	cmp	r8, r3
   1e980:	bcs	1eb58 <__assert_fail@plt+0xc7ec>
   1e984:	ldr	r1, [r8]
   1e988:	cmp	r1, #0
   1e98c:	beq	1e978 <__assert_fail@plt+0xc60c>
   1e990:	ldr	r7, [r8, #4]
   1e994:	cmp	r7, #0
   1e998:	beq	1e974 <__assert_fail@plt+0xc608>
   1e99c:	ldr	r1, [r6, #8]
   1e9a0:	b	1e9d4 <__assert_fail@plt+0xc668>
   1e9a4:	str	r4, [r3, r0, lsl #3]
   1e9a8:	ldr	r0, [r6, #12]
   1e9ac:	add	r0, r0, #1
   1e9b0:	str	r0, [r6, #12]
   1e9b4:	mov	r0, sl
   1e9b8:	str	r9, [r7]
   1e9bc:	ldr	r3, [r0]
   1e9c0:	cmp	r2, #0
   1e9c4:	str	r3, [r7, #4]
   1e9c8:	str	r7, [r0]
   1e9cc:	mov	r7, r2
   1e9d0:	beq	1e96c <__assert_fail@plt+0xc600>
   1e9d4:	ldr	r4, [r7]
   1e9d8:	ldr	r2, [r6, #24]
   1e9dc:	mov	r0, r4
   1e9e0:	blx	r2
   1e9e4:	ldr	r1, [r6, #8]
   1e9e8:	cmp	r0, r1
   1e9ec:	bcs	1eb70 <__assert_fail@plt+0xc804>
   1e9f0:	ldr	r3, [r6]
   1e9f4:	ldr	r2, [r7, #4]
   1e9f8:	ldr	r5, [r3, r0, lsl #3]
   1e9fc:	cmp	r5, #0
   1ea00:	beq	1e9a4 <__assert_fail@plt+0xc638>
   1ea04:	add	r0, r3, r0, lsl #3
   1ea08:	add	r0, r0, #4
   1ea0c:	b	1e9bc <__assert_fail@plt+0xc650>
   1ea10:	mov	r5, #0
   1ea14:	ldr	r7, [r8]
   1ea18:	cmp	r7, #0
   1ea1c:	bne	1ea64 <__assert_fail@plt+0xc6f8>
   1ea20:	b	1ea4c <__assert_fail@plt+0xc6e0>
   1ea24:	str	r7, [r9, r4, lsl #3]
   1ea28:	ldr	r0, [r6, #12]
   1ea2c:	add	r0, r0, #1
   1ea30:	str	r0, [r6, #12]
   1ea34:	ldr	r0, [sp]
   1ea38:	str	r5, [r8]
   1ea3c:	ldr	r1, [r0, #12]
   1ea40:	ldr	r3, [r0, #4]
   1ea44:	sub	r1, r1, #1
   1ea48:	str	r1, [r0, #12]
   1ea4c:	add	r8, r8, #8
   1ea50:	cmp	r8, r3
   1ea54:	bcs	1eb58 <__assert_fail@plt+0xc7ec>
   1ea58:	ldr	r7, [r8]
   1ea5c:	cmp	r7, #0
   1ea60:	beq	1ea4c <__assert_fail@plt+0xc6e0>
   1ea64:	ldr	r9, [r8, #4]
   1ea68:	ldr	r1, [r6, #8]
   1ea6c:	cmp	r9, #0
   1ea70:	bne	1ea98 <__assert_fail@plt+0xc72c>
   1ea74:	b	1eae8 <__assert_fail@plt+0xc77c>
   1ea78:	add	r0, r3, r0, lsl #3
   1ea7c:	add	r0, r0, #4
   1ea80:	ldr	r3, [r0]
   1ea84:	cmp	r2, #0
   1ea88:	str	r3, [r9, #4]
   1ea8c:	str	r9, [r0]
   1ea90:	mov	r9, r2
   1ea94:	beq	1eae4 <__assert_fail@plt+0xc778>
   1ea98:	ldr	r4, [r9]
   1ea9c:	ldr	r2, [r6, #24]
   1eaa0:	mov	r0, r4
   1eaa4:	blx	r2
   1eaa8:	ldr	r1, [r6, #8]
   1eaac:	cmp	r0, r1
   1eab0:	bcs	1eb70 <__assert_fail@plt+0xc804>
   1eab4:	ldr	r3, [r6]
   1eab8:	ldr	r2, [r9, #4]
   1eabc:	ldr	r7, [r3, r0, lsl #3]
   1eac0:	cmp	r7, #0
   1eac4:	bne	1ea78 <__assert_fail@plt+0xc70c>
   1eac8:	str	r4, [r3, r0, lsl #3]
   1eacc:	ldr	r0, [r6, #12]
   1ead0:	add	r0, r0, #1
   1ead4:	str	r0, [r6, #12]
   1ead8:	mov	r0, sl
   1eadc:	str	r5, [r9]
   1eae0:	b	1ea80 <__assert_fail@plt+0xc714>
   1eae4:	ldr	r7, [r8]
   1eae8:	str	r5, [r8, #4]
   1eaec:	mov	r0, r7
   1eaf0:	ldr	r2, [r6, #24]
   1eaf4:	blx	r2
   1eaf8:	mov	r4, r0
   1eafc:	ldr	r0, [r6, #8]
   1eb00:	cmp	r4, r0
   1eb04:	bcs	1eb70 <__assert_fail@plt+0xc804>
   1eb08:	ldr	r9, [r6]
   1eb0c:	ldr	r0, [r9, r4, lsl #3]
   1eb10:	cmp	r0, #0
   1eb14:	beq	1ea24 <__assert_fail@plt+0xc6b8>
   1eb18:	ldr	r0, [sl]
   1eb1c:	cmp	r0, #0
   1eb20:	beq	1eb30 <__assert_fail@plt+0xc7c4>
   1eb24:	ldr	r1, [r0, #4]
   1eb28:	str	r1, [sl]
   1eb2c:	b	1eb40 <__assert_fail@plt+0xc7d4>
   1eb30:	mov	r0, #8
   1eb34:	bl	24f0c <__assert_fail@plt+0x12ba0>
   1eb38:	cmp	r0, #0
   1eb3c:	beq	1eb64 <__assert_fail@plt+0xc7f8>
   1eb40:	add	r1, r9, r4, lsl #3
   1eb44:	str	r7, [r0]
   1eb48:	ldr	r2, [r1, #4]
   1eb4c:	str	r2, [r0, #4]
   1eb50:	str	r0, [r1, #4]
   1eb54:	b	1ea34 <__assert_fail@plt+0xc6c8>
   1eb58:	mov	r0, #1
   1eb5c:	sub	sp, fp, #28
   1eb60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb64:	mov	r0, #0
   1eb68:	sub	sp, fp, #28
   1eb6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb70:	bl	12348 <abort@plt>
   1eb74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb78:	add	fp, sp, #28
   1eb7c:	sub	sp, sp, #4
   1eb80:	cmp	r1, #0
   1eb84:	beq	1eec0 <__assert_fail@plt+0xcb54>
   1eb88:	mov	r8, r2
   1eb8c:	mov	sl, r1
   1eb90:	ldr	r1, [r0, #8]
   1eb94:	ldr	r2, [r0, #24]
   1eb98:	mov	r4, r0
   1eb9c:	mov	r0, sl
   1eba0:	blx	r2
   1eba4:	mov	r7, r0
   1eba8:	ldr	r0, [r4, #8]
   1ebac:	cmp	r7, r0
   1ebb0:	bcs	1eec0 <__assert_fail@plt+0xcb54>
   1ebb4:	ldr	r5, [r4]
   1ebb8:	mov	r9, r5
   1ebbc:	ldr	r1, [r9, r7, lsl #3]!
   1ebc0:	cmp	r1, #0
   1ebc4:	beq	1ec58 <__assert_fail@plt+0xc8ec>
   1ebc8:	cmp	r1, sl
   1ebcc:	beq	1ebf8 <__assert_fail@plt+0xc88c>
   1ebd0:	ldr	r2, [r4, #28]
   1ebd4:	mov	r0, sl
   1ebd8:	blx	r2
   1ebdc:	cmp	r0, #0
   1ebe0:	mov	r6, r9
   1ebe4:	beq	1ec14 <__assert_fail@plt+0xc8a8>
   1ebe8:	ldr	r0, [r6]
   1ebec:	cmp	r0, #0
   1ebf0:	bne	1ebfc <__assert_fail@plt+0xc890>
   1ebf4:	b	1ec58 <__assert_fail@plt+0xc8ec>
   1ebf8:	mov	r0, sl
   1ebfc:	cmp	r8, #0
   1ec00:	mov	r7, #0
   1ec04:	strne	r0, [r8]
   1ec08:	mov	r0, r7
   1ec0c:	sub	sp, fp, #28
   1ec10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec14:	add	r6, r5, r7, lsl #3
   1ec18:	ldr	r0, [r6, #4]!
   1ec1c:	cmp	r0, #0
   1ec20:	beq	1ec58 <__assert_fail@plt+0xc8ec>
   1ec24:	ldr	r1, [r0]
   1ec28:	cmp	r1, sl
   1ec2c:	beq	1ec4c <__assert_fail@plt+0xc8e0>
   1ec30:	ldr	r2, [r4, #28]
   1ec34:	mov	r0, sl
   1ec38:	blx	r2
   1ec3c:	ldr	r6, [r6]
   1ec40:	cmp	r0, #0
   1ec44:	beq	1ec18 <__assert_fail@plt+0xc8ac>
   1ec48:	b	1ebe8 <__assert_fail@plt+0xc87c>
   1ec4c:	mov	r0, sl
   1ec50:	cmp	r0, #0
   1ec54:	bne	1ebfc <__assert_fail@plt+0xc890>
   1ec58:	vldr	s0, [r4, #8]
   1ec5c:	vldr	s2, [r4, #12]
   1ec60:	ldr	r0, [r4, #20]
   1ec64:	vcvt.f32.u32	s0, s0
   1ec68:	vcvt.f32.u32	s4, s2
   1ec6c:	vldr	s2, [r0, #8]
   1ec70:	vmul.f32	s6, s2, s0
   1ec74:	vcmpe.f32	s6, s4
   1ec78:	vmrs	APSR_nzcv, fpscr
   1ec7c:	bpl	1ede0 <__assert_fail@plt+0xca74>
   1ec80:	movw	r1, #33920	; 0x8480
   1ec84:	movt	r1, #2
   1ec88:	cmp	r0, r1
   1ec8c:	beq	1ed28 <__assert_fail@plt+0xc9bc>
   1ec90:	vldr	s6, [pc, #556]	; 1eec4 <__assert_fail@plt+0xcb58>
   1ec94:	vcmpe.f32	s2, s6
   1ec98:	vmrs	APSR_nzcv, fpscr
   1ec9c:	ble	1ed04 <__assert_fail@plt+0xc998>
   1eca0:	vldr	s8, [pc, #544]	; 1eec8 <__assert_fail@plt+0xcb5c>
   1eca4:	vcmpe.f32	s2, s8
   1eca8:	vmrs	APSR_nzcv, fpscr
   1ecac:	bpl	1ed04 <__assert_fail@plt+0xc998>
   1ecb0:	vldr	s8, [pc, #532]	; 1eecc <__assert_fail@plt+0xcb60>
   1ecb4:	vldr	s10, [r0, #12]
   1ecb8:	vcmpe.f32	s10, s8
   1ecbc:	vmrs	APSR_nzcv, fpscr
   1ecc0:	ble	1ed04 <__assert_fail@plt+0xc998>
   1ecc4:	vldr	s8, [r0]
   1ecc8:	vcmpe.f32	s8, #0.0
   1eccc:	vmrs	APSR_nzcv, fpscr
   1ecd0:	blt	1ed04 <__assert_fail@plt+0xc998>
   1ecd4:	vadd.f32	s6, s8, s6
   1ecd8:	vcmpe.f32	s6, s2
   1ecdc:	vmrs	APSR_nzcv, fpscr
   1ece0:	bpl	1ed04 <__assert_fail@plt+0xc998>
   1ece4:	vldr	s8, [r0, #4]
   1ece8:	vmov.f32	s10, #112	; 0x3f800000  1.0
   1ecec:	vcmpe.f32	s8, s10
   1ecf0:	vmrs	APSR_nzcv, fpscr
   1ecf4:	bhi	1ed04 <__assert_fail@plt+0xc998>
   1ecf8:	vcmpe.f32	s6, s8
   1ecfc:	vmrs	APSR_nzcv, fpscr
   1ed00:	bmi	1ed14 <__assert_fail@plt+0xc9a8>
   1ed04:	vldr	s2, [pc, #452]	; 1eed0 <__assert_fail@plt+0xcb64>
   1ed08:	movw	r0, #33920	; 0x8480
   1ed0c:	movt	r0, #2
   1ed10:	str	r0, [r4, #20]
   1ed14:	vmul.f32	s6, s2, s0
   1ed18:	vcmpe.f32	s6, s4
   1ed1c:	vmrs	APSR_nzcv, fpscr
   1ed20:	bmi	1ed3c <__assert_fail@plt+0xc9d0>
   1ed24:	b	1ede0 <__assert_fail@plt+0xca74>
   1ed28:	mov	r0, r1
   1ed2c:	vmul.f32	s6, s2, s0
   1ed30:	vcmpe.f32	s6, s4
   1ed34:	vmrs	APSR_nzcv, fpscr
   1ed38:	bpl	1ede0 <__assert_fail@plt+0xca74>
   1ed3c:	vldr	s4, [r0, #12]
   1ed40:	ldrb	r0, [r0, #16]
   1ed44:	mvn	r7, #0
   1ed48:	cmp	r0, #0
   1ed4c:	vmul.f32	s0, s4, s0
   1ed50:	vldr	s4, [pc, #380]	; 1eed4 <__assert_fail@plt+0xcb68>
   1ed54:	vmul.f32	s2, s2, s0
   1ed58:	vseleq.f32	s0, s2, s0
   1ed5c:	vcmpe.f32	s0, s4
   1ed60:	vmrs	APSR_nzcv, fpscr
   1ed64:	bge	1ee54 <__assert_fail@plt+0xcae8>
   1ed68:	vcvt.u32.f32	s0, s0
   1ed6c:	mov	r0, r4
   1ed70:	vmov	r1, s0
   1ed74:	bl	1e69c <__assert_fail@plt+0xc330>
   1ed78:	cmp	r0, #0
   1ed7c:	beq	1ee54 <__assert_fail@plt+0xcae8>
   1ed80:	ldr	r1, [r4, #8]
   1ed84:	ldr	r2, [r4, #24]
   1ed88:	mov	r0, sl
   1ed8c:	blx	r2
   1ed90:	mov	r7, r0
   1ed94:	ldr	r0, [r4, #8]
   1ed98:	cmp	r7, r0
   1ed9c:	bcs	1eec0 <__assert_fail@plt+0xcb54>
   1eda0:	ldr	r5, [r4]
   1eda4:	mov	r9, r5
   1eda8:	ldr	r1, [r9, r7, lsl #3]!
   1edac:	cmp	r1, #0
   1edb0:	beq	1ede0 <__assert_fail@plt+0xca74>
   1edb4:	cmp	r1, sl
   1edb8:	mov	r0, sl
   1edbc:	beq	1edd8 <__assert_fail@plt+0xca6c>
   1edc0:	ldr	r2, [r4, #28]
   1edc4:	mov	r0, sl
   1edc8:	blx	r2
   1edcc:	cmp	r0, #0
   1edd0:	beq	1ee70 <__assert_fail@plt+0xcb04>
   1edd4:	ldr	r0, [r9]
   1edd8:	cmp	r0, #0
   1eddc:	bne	1eec0 <__assert_fail@plt+0xcb54>
   1ede0:	ldr	r0, [r9]
   1ede4:	cmp	r0, #0
   1ede8:	beq	1ee04 <__assert_fail@plt+0xca98>
   1edec:	ldr	r0, [r4, #36]	; 0x24
   1edf0:	cmp	r0, #0
   1edf4:	beq	1ee24 <__assert_fail@plt+0xcab8>
   1edf8:	ldr	r1, [r0, #4]
   1edfc:	str	r1, [r4, #36]	; 0x24
   1ee00:	b	1ee34 <__assert_fail@plt+0xcac8>
   1ee04:	str	sl, [r9]
   1ee08:	ldr	r0, [r4, #12]
   1ee0c:	ldr	r1, [r4, #16]
   1ee10:	add	r0, r0, #1
   1ee14:	add	r1, r1, #1
   1ee18:	str	r0, [r4, #12]
   1ee1c:	str	r1, [r4, #16]
   1ee20:	b	1ee50 <__assert_fail@plt+0xcae4>
   1ee24:	mov	r0, #8
   1ee28:	bl	24f0c <__assert_fail@plt+0x12ba0>
   1ee2c:	cmp	r0, #0
   1ee30:	beq	1ee60 <__assert_fail@plt+0xcaf4>
   1ee34:	str	sl, [r0]
   1ee38:	ldr	r1, [r9, #4]
   1ee3c:	str	r1, [r0, #4]
   1ee40:	str	r0, [r9, #4]
   1ee44:	ldr	r0, [r4, #16]
   1ee48:	add	r0, r0, #1
   1ee4c:	str	r0, [r4, #16]
   1ee50:	mov	r7, #1
   1ee54:	mov	r0, r7
   1ee58:	sub	sp, fp, #28
   1ee5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee60:	mvn	r7, #0
   1ee64:	mov	r0, r7
   1ee68:	sub	sp, fp, #28
   1ee6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee70:	add	r6, r5, r7, lsl #3
   1ee74:	ldr	r0, [r6, #4]!
   1ee78:	cmp	r0, #0
   1ee7c:	beq	1ede0 <__assert_fail@plt+0xca74>
   1ee80:	ldr	r1, [r0]
   1ee84:	cmp	r1, sl
   1ee88:	beq	1eeb4 <__assert_fail@plt+0xcb48>
   1ee8c:	ldr	r2, [r4, #28]
   1ee90:	mov	r0, sl
   1ee94:	blx	r2
   1ee98:	ldr	r6, [r6]
   1ee9c:	cmp	r0, #0
   1eea0:	beq	1ee74 <__assert_fail@plt+0xcb08>
   1eea4:	ldr	r0, [r6]
   1eea8:	cmp	r0, #0
   1eeac:	beq	1ede0 <__assert_fail@plt+0xca74>
   1eeb0:	b	1eec0 <__assert_fail@plt+0xcb54>
   1eeb4:	mov	r0, sl
   1eeb8:	cmp	r0, #0
   1eebc:	beq	1ede0 <__assert_fail@plt+0xca74>
   1eec0:	bl	12348 <abort@plt>
   1eec4:	stclcc	12, cr12, [ip, #820]	; 0x334
   1eec8:	svccc	0x00666666
   1eecc:	svccc	0x008ccccd
   1eed0:	svccc	0x004ccccd
   1eed4:	svcmi	0x00800000
   1eed8:	push	{r4, sl, fp, lr}
   1eedc:	add	fp, sp, #8
   1eee0:	sub	sp, sp, #8
   1eee4:	add	r2, sp, #4
   1eee8:	mov	r4, r1
   1eeec:	bl	1eb74 <__assert_fail@plt+0xc808>
   1eef0:	cmn	r0, #1
   1eef4:	beq	1ef10 <__assert_fail@plt+0xcba4>
   1eef8:	ldr	r1, [sp, #4]
   1eefc:	cmp	r0, #0
   1ef00:	moveq	r4, r1
   1ef04:	mov	r0, r4
   1ef08:	sub	sp, fp, #8
   1ef0c:	pop	{r4, sl, fp, pc}
   1ef10:	mov	r4, #0
   1ef14:	mov	r0, r4
   1ef18:	sub	sp, fp, #8
   1ef1c:	pop	{r4, sl, fp, pc}
   1ef20:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ef24:	add	fp, sp, #24
   1ef28:	mov	r9, r1
   1ef2c:	ldr	r1, [r0, #8]
   1ef30:	ldr	r2, [r0, #24]
   1ef34:	mov	r5, r0
   1ef38:	mov	r0, r9
   1ef3c:	blx	r2
   1ef40:	mov	r7, r0
   1ef44:	ldr	r0, [r5, #8]
   1ef48:	cmp	r7, r0
   1ef4c:	bcs	1f1c0 <__assert_fail@plt+0xce54>
   1ef50:	ldr	r6, [r5]
   1ef54:	mov	r8, #0
   1ef58:	mov	r4, r6
   1ef5c:	ldr	r1, [r4, r7, lsl #3]!
   1ef60:	cmp	r1, #0
   1ef64:	beq	1f018 <__assert_fail@plt+0xccac>
   1ef68:	cmp	r1, r9
   1ef6c:	beq	1ef88 <__assert_fail@plt+0xcc1c>
   1ef70:	ldr	r2, [r5, #28]
   1ef74:	mov	r0, r9
   1ef78:	blx	r2
   1ef7c:	cmp	r0, #0
   1ef80:	beq	1efc0 <__assert_fail@plt+0xcc54>
   1ef84:	ldr	r9, [r4]
   1ef88:	add	r0, r6, r7, lsl #3
   1ef8c:	ldr	r0, [r0, #4]
   1ef90:	cmp	r0, #0
   1ef94:	beq	1f008 <__assert_fail@plt+0xcc9c>
   1ef98:	ldm	r0, {r1, r2}
   1ef9c:	stm	r4, {r1, r2}
   1efa0:	mov	r1, #0
   1efa4:	str	r1, [r0]
   1efa8:	ldr	r1, [r5, #36]	; 0x24
   1efac:	str	r1, [r0, #4]
   1efb0:	str	r0, [r5, #36]	; 0x24
   1efb4:	cmp	r9, #0
   1efb8:	bne	1f050 <__assert_fail@plt+0xcce4>
   1efbc:	b	1f018 <__assert_fail@plt+0xccac>
   1efc0:	add	r7, r6, r7, lsl #3
   1efc4:	ldr	r0, [r7, #4]!
   1efc8:	cmp	r0, #0
   1efcc:	beq	1f018 <__assert_fail@plt+0xccac>
   1efd0:	ldr	r1, [r0]
   1efd4:	cmp	r1, r9
   1efd8:	beq	1f020 <__assert_fail@plt+0xccb4>
   1efdc:	ldr	r2, [r5, #28]
   1efe0:	mov	r0, r9
   1efe4:	blx	r2
   1efe8:	ldr	r1, [r7]
   1efec:	cmp	r0, #0
   1eff0:	bne	1f028 <__assert_fail@plt+0xccbc>
   1eff4:	ldr	r0, [r1, #4]!
   1eff8:	mov	r7, r1
   1effc:	cmp	r0, #0
   1f000:	bne	1efd0 <__assert_fail@plt+0xcc64>
   1f004:	b	1f018 <__assert_fail@plt+0xccac>
   1f008:	mov	r0, #0
   1f00c:	str	r0, [r4]
   1f010:	cmp	r9, #0
   1f014:	bne	1f050 <__assert_fail@plt+0xcce4>
   1f018:	mov	r0, r8
   1f01c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f020:	mov	r1, r0
   1f024:	b	1f02c <__assert_fail@plt+0xccc0>
   1f028:	ldr	r9, [r1]
   1f02c:	ldr	r0, [r1, #4]
   1f030:	str	r0, [r7]
   1f034:	mov	r0, #0
   1f038:	str	r0, [r1]
   1f03c:	ldr	r0, [r5, #36]	; 0x24
   1f040:	str	r0, [r1, #4]
   1f044:	str	r1, [r5, #36]	; 0x24
   1f048:	cmp	r9, #0
   1f04c:	beq	1f018 <__assert_fail@plt+0xccac>
   1f050:	ldr	r0, [r5, #16]
   1f054:	sub	r0, r0, #1
   1f058:	str	r0, [r5, #16]
   1f05c:	ldr	r0, [r4]
   1f060:	cmp	r0, #0
   1f064:	bne	1f1b4 <__assert_fail@plt+0xce48>
   1f068:	ldr	r0, [r5, #12]
   1f06c:	vldr	s0, [r5, #8]
   1f070:	sub	r1, r0, #1
   1f074:	str	r1, [r5, #12]
   1f078:	vmov	s2, r1
   1f07c:	ldr	r0, [r5, #20]
   1f080:	vcvt.f32.u32	s0, s0
   1f084:	vcvt.f32.u32	s2, s2
   1f088:	vldr	s4, [r0]
   1f08c:	vmul.f32	s6, s4, s0
   1f090:	vcmpe.f32	s6, s2
   1f094:	vmrs	APSR_nzcv, fpscr
   1f098:	ble	1f1b4 <__assert_fail@plt+0xce48>
   1f09c:	movw	r1, #33920	; 0x8480
   1f0a0:	movt	r1, #2
   1f0a4:	cmp	r0, r1
   1f0a8:	beq	1f144 <__assert_fail@plt+0xcdd8>
   1f0ac:	vldr	s8, [pc, #272]	; 1f1c4 <__assert_fail@plt+0xce58>
   1f0b0:	vldr	s6, [r0, #8]
   1f0b4:	vcmpe.f32	s6, s8
   1f0b8:	vmrs	APSR_nzcv, fpscr
   1f0bc:	ble	1f120 <__assert_fail@plt+0xcdb4>
   1f0c0:	vldr	s10, [pc, #256]	; 1f1c8 <__assert_fail@plt+0xce5c>
   1f0c4:	vcmpe.f32	s6, s10
   1f0c8:	vmrs	APSR_nzcv, fpscr
   1f0cc:	bpl	1f120 <__assert_fail@plt+0xcdb4>
   1f0d0:	vcmpe.f32	s4, #0.0
   1f0d4:	vmrs	APSR_nzcv, fpscr
   1f0d8:	blt	1f120 <__assert_fail@plt+0xcdb4>
   1f0dc:	vldr	s10, [r0, #12]
   1f0e0:	vldr	s12, [pc, #228]	; 1f1cc <__assert_fail@plt+0xce60>
   1f0e4:	vcmpe.f32	s10, s12
   1f0e8:	vmrs	APSR_nzcv, fpscr
   1f0ec:	ble	1f120 <__assert_fail@plt+0xcdb4>
   1f0f0:	vadd.f32	s8, s4, s8
   1f0f4:	vcmpe.f32	s8, s6
   1f0f8:	vmrs	APSR_nzcv, fpscr
   1f0fc:	bpl	1f120 <__assert_fail@plt+0xcdb4>
   1f100:	vldr	s6, [r0, #4]
   1f104:	vmov.f32	s10, #112	; 0x3f800000  1.0
   1f108:	vcmpe.f32	s6, s10
   1f10c:	vmrs	APSR_nzcv, fpscr
   1f110:	bhi	1f120 <__assert_fail@plt+0xcdb4>
   1f114:	vcmpe.f32	s8, s6
   1f118:	vmrs	APSR_nzcv, fpscr
   1f11c:	bmi	1f130 <__assert_fail@plt+0xcdc4>
   1f120:	vldr	s4, [pc, #168]	; 1f1d0 <__assert_fail@plt+0xce64>
   1f124:	movw	r0, #33920	; 0x8480
   1f128:	movt	r0, #2
   1f12c:	str	r0, [r5, #20]
   1f130:	vmul.f32	s4, s4, s0
   1f134:	vcmpe.f32	s4, s2
   1f138:	vmrs	APSR_nzcv, fpscr
   1f13c:	bgt	1f158 <__assert_fail@plt+0xcdec>
   1f140:	b	1f1b4 <__assert_fail@plt+0xce48>
   1f144:	mov	r0, r1
   1f148:	vmul.f32	s4, s4, s0
   1f14c:	vcmpe.f32	s4, s2
   1f150:	vmrs	APSR_nzcv, fpscr
   1f154:	ble	1f1b4 <__assert_fail@plt+0xce48>
   1f158:	vldr	s2, [r0, #4]
   1f15c:	ldrb	r1, [r0, #16]
   1f160:	cmp	r1, #0
   1f164:	vmul.f32	s0, s2, s0
   1f168:	bne	1f174 <__assert_fail@plt+0xce08>
   1f16c:	vldr	s2, [r0, #8]
   1f170:	vmul.f32	s0, s0, s2
   1f174:	vcvt.u32.f32	s0, s0
   1f178:	mov	r0, r5
   1f17c:	vmov	r1, s0
   1f180:	bl	1e69c <__assert_fail@plt+0xc330>
   1f184:	cmp	r0, #0
   1f188:	bne	1f1b4 <__assert_fail@plt+0xce48>
   1f18c:	ldr	r0, [r5, #36]	; 0x24
   1f190:	cmp	r0, #0
   1f194:	beq	1f1ac <__assert_fail@plt+0xce40>
   1f198:	ldr	r4, [r0, #4]
   1f19c:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   1f1a0:	cmp	r4, #0
   1f1a4:	mov	r0, r4
   1f1a8:	bne	1f198 <__assert_fail@plt+0xce2c>
   1f1ac:	mov	r0, #0
   1f1b0:	str	r0, [r5, #36]	; 0x24
   1f1b4:	mov	r8, r9
   1f1b8:	mov	r0, r8
   1f1bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f1c0:	bl	12348 <abort@plt>
   1f1c4:	stclcc	12, cr12, [ip, #820]	; 0x334
   1f1c8:	svccc	0x00666666
   1f1cc:	svccc	0x008ccccd
   1f1d0:	andeq	r0, r0, r0
   1f1d4:	b	1ef20 <__assert_fail@plt+0xcbb4>
   1f1d8:	push	{r4, r5, r6, sl, fp, lr}
   1f1dc:	add	fp, sp, #16
   1f1e0:	mov	r5, r0
   1f1e4:	mov	r0, #16
   1f1e8:	mov	r4, r1
   1f1ec:	bl	23914 <__assert_fail@plt+0x115a8>
   1f1f0:	cmp	r4, #0
   1f1f4:	mov	r6, r0
   1f1f8:	mov	r1, #4
   1f1fc:	movweq	r4, #1
   1f200:	mov	r0, r4
   1f204:	bl	239e4 <__assert_fail@plt+0x11678>
   1f208:	movw	r2, #62004	; 0xf234
   1f20c:	mov	r1, #0
   1f210:	cmp	r5, #0
   1f214:	stm	r6, {r0, r4}
   1f218:	movt	r2, #1
   1f21c:	str	r1, [r0]
   1f220:	mov	r0, r6
   1f224:	movne	r2, r5
   1f228:	str	r1, [r6, #8]
   1f22c:	str	r2, [r6, #12]
   1f230:	pop	{r4, r5, r6, sl, fp, pc}
   1f234:	mov	r0, #0
   1f238:	bx	lr
   1f23c:	push	{r4, sl, fp, lr}
   1f240:	add	fp, sp, #8
   1f244:	mov	r4, r0
   1f248:	ldr	r0, [r0]
   1f24c:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   1f250:	mov	r0, r4
   1f254:	pop	{r4, sl, fp, lr}
   1f258:	b	1dc4c <__assert_fail@plt+0xb8e0>
   1f25c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1f260:	add	fp, sp, #24
   1f264:	mov	r6, r1
   1f268:	mov	r1, r0
   1f26c:	mov	r4, r0
   1f270:	ldr	r0, [r1, #4]!
   1f274:	ldr	r2, [r1, #4]
   1f278:	sub	r0, r0, #1
   1f27c:	cmp	r0, r2
   1f280:	bls	1f28c <__assert_fail@plt+0xcf20>
   1f284:	ldr	r0, [r4]
   1f288:	b	1f2a0 <__assert_fail@plt+0xcf34>
   1f28c:	ldr	r0, [r4]
   1f290:	mov	r2, #4
   1f294:	bl	23ac0 <__assert_fail@plt+0x11754>
   1f298:	str	r0, [r4]
   1f29c:	ldr	r2, [r4, #8]
   1f2a0:	add	r5, r2, #1
   1f2a4:	mov	r8, #1
   1f2a8:	cmp	r2, #0
   1f2ac:	str	r5, [r4, #8]
   1f2b0:	str	r6, [r0, r5, lsl #2]
   1f2b4:	ldr	r6, [r4]
   1f2b8:	ldr	r9, [r6, r5, lsl #2]
   1f2bc:	beq	1f2f0 <__assert_fail@plt+0xcf84>
   1f2c0:	ldr	r4, [r4, #12]
   1f2c4:	lsr	r7, r5, #1
   1f2c8:	mov	r1, r9
   1f2cc:	ldr	r0, [r6, r7, lsl #2]
   1f2d0:	blx	r4
   1f2d4:	cmp	r0, #0
   1f2d8:	bgt	1f2fc <__assert_fail@plt+0xcf90>
   1f2dc:	ldr	r0, [r6, r7, lsl #2]
   1f2e0:	cmp	r7, #1
   1f2e4:	str	r0, [r6, r5, lsl #2]
   1f2e8:	mov	r5, r7
   1f2ec:	bne	1f2c4 <__assert_fail@plt+0xcf58>
   1f2f0:	mov	r0, #0
   1f2f4:	str	r9, [r6, r8, lsl #2]
   1f2f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f2fc:	mov	r8, r5
   1f300:	mov	r0, #0
   1f304:	str	r9, [r6, r8, lsl #2]
   1f308:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1f30c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f310:	add	fp, sp, #28
   1f314:	sub	sp, sp, #12
   1f318:	ldr	r1, [r0, #8]
   1f31c:	cmp	r1, #0
   1f320:	beq	1f3cc <__assert_fail@plt+0xd060>
   1f324:	ldr	r2, [r0]
   1f328:	sub	r9, r1, #1
   1f32c:	ldr	r3, [r2, #4]
   1f330:	str	r9, [r0, #8]
   1f334:	ldr	r1, [r2, r1, lsl #2]
   1f338:	str	r3, [sp, #4]
   1f33c:	str	r1, [r2, #4]
   1f340:	mov	r1, #0
   1f344:	ldr	r6, [r0]
   1f348:	cmp	r1, r9, lsr #1
   1f34c:	ldr	r7, [r6, #4]
   1f350:	beq	1f3d8 <__assert_fail@plt+0xd06c>
   1f354:	ldr	sl, [r0, #12]
   1f358:	lsr	r5, r9, #1
   1f35c:	mov	r8, #1
   1f360:	str	r7, [sp, #8]
   1f364:	cmp	r9, r8, lsl #1
   1f368:	lsl	r4, r8, #1
   1f36c:	bls	1f394 <__assert_fail@plt+0xd028>
   1f370:	mov	r7, r9
   1f374:	orr	r9, r4, #1
   1f378:	ldr	r0, [r6, r4, lsl #2]
   1f37c:	ldr	r1, [r6, r9, lsl #2]
   1f380:	blx	sl
   1f384:	cmp	r0, #0
   1f388:	movmi	r4, r9
   1f38c:	mov	r9, r7
   1f390:	ldr	r7, [sp, #8]
   1f394:	ldr	r0, [r6, r4, lsl #2]
   1f398:	mov	r1, r7
   1f39c:	blx	sl
   1f3a0:	cmp	r0, #1
   1f3a4:	blt	1f3ec <__assert_fail@plt+0xd080>
   1f3a8:	ldr	r0, [r6, r4, lsl #2]
   1f3ac:	cmp	r4, r5
   1f3b0:	str	r0, [r6, r8, lsl #2]
   1f3b4:	mov	r8, r4
   1f3b8:	bls	1f364 <__assert_fail@plt+0xcff8>
   1f3bc:	ldr	r0, [sp, #4]
   1f3c0:	str	r7, [r6, r4, lsl #2]
   1f3c4:	sub	sp, fp, #28
   1f3c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f3cc:	mov	r0, #0
   1f3d0:	sub	sp, fp, #28
   1f3d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f3d8:	mov	r4, #1
   1f3dc:	ldr	r0, [sp, #4]
   1f3e0:	str	r7, [r6, r4, lsl #2]
   1f3e4:	sub	sp, fp, #28
   1f3e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f3ec:	mov	r4, r8
   1f3f0:	ldr	r0, [sp, #4]
   1f3f4:	str	r7, [r6, r4, lsl #2]
   1f3f8:	sub	sp, fp, #28
   1f3fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f400:	movw	ip, #26215	; 0x6667
   1f404:	mov	r2, #0
   1f408:	cmp	r0, #0
   1f40c:	movt	ip, #26214	; 0x6666
   1f410:	strb	r2, [r1, #11]
   1f414:	add	r1, r1, #10
   1f418:	bmi	1f454 <__assert_fail@plt+0xd0e8>
   1f41c:	smmul	r3, r0, ip
   1f420:	asr	r2, r3, #2
   1f424:	add	r2, r2, r3, lsr #31
   1f428:	add	r3, r2, r2, lsl #2
   1f42c:	sub	r3, r0, r3, lsl #1
   1f430:	add	r0, r0, #9
   1f434:	cmp	r0, #18
   1f438:	mov	r0, r2
   1f43c:	add	r3, r3, #48	; 0x30
   1f440:	strb	r3, [r1], #-1
   1f444:	bhi	1f41c <__assert_fail@plt+0xd0b0>
   1f448:	add	r1, r1, #1
   1f44c:	mov	r0, r1
   1f450:	bx	lr
   1f454:	smmul	r3, r0, ip
   1f458:	asr	r2, r3, #2
   1f45c:	add	r2, r2, r3, lsr #31
   1f460:	add	r3, r2, r2, lsl #2
   1f464:	rsb	r3, r0, r3, lsl #1
   1f468:	add	r0, r0, #9
   1f46c:	cmp	r0, #18
   1f470:	mov	r0, r2
   1f474:	add	r3, r3, #48	; 0x30
   1f478:	strb	r3, [r1], #-1
   1f47c:	bhi	1f454 <__assert_fail@plt+0xd0e8>
   1f480:	mov	r0, #45	; 0x2d
   1f484:	strb	r0, [r1]
   1f488:	mov	r0, r1
   1f48c:	bx	lr
   1f490:	movw	ip, #52429	; 0xcccd
   1f494:	mov	r2, #0
   1f498:	movt	ip, #52428	; 0xcccc
   1f49c:	strb	r2, [r1, #10]
   1f4a0:	add	r1, r1, #9
   1f4a4:	umull	r3, r2, r0, ip
   1f4a8:	cmp	r0, #9
   1f4ac:	lsr	r2, r2, #3
   1f4b0:	add	r3, r2, r2, lsl #2
   1f4b4:	sub	r3, r0, r3, lsl #1
   1f4b8:	mov	r0, r2
   1f4bc:	orr	r3, r3, #48	; 0x30
   1f4c0:	strb	r3, [r1], #-1
   1f4c4:	bhi	1f4a4 <__assert_fail@plt+0xd138>
   1f4c8:	add	r0, r1, #1
   1f4cc:	bx	lr
   1f4d0:	push	{r4, r5, r6, sl, fp, lr}
   1f4d4:	add	fp, sp, #16
   1f4d8:	mov	r5, r0
   1f4dc:	mov	r0, #0
   1f4e0:	mov	r4, r1
   1f4e4:	add	r6, r2, #19
   1f4e8:	strb	r0, [r2, #20]
   1f4ec:	mov	r0, r5
   1f4f0:	mov	r1, r4
   1f4f4:	mov	r2, #10
   1f4f8:	mov	r3, #0
   1f4fc:	bl	261a0 <_obstack_memory_used@@Base+0x480>
   1f500:	add	r2, r0, r0, lsl #2
   1f504:	sub	r2, r5, r2, lsl #1
   1f508:	orr	r2, r2, #48	; 0x30
   1f50c:	strb	r2, [r6], #-1
   1f510:	rsbs	r2, r5, #9
   1f514:	mov	r5, r0
   1f518:	rscs	r2, r4, #0
   1f51c:	mov	r4, r1
   1f520:	bcc	1f4ec <__assert_fail@plt+0xd180>
   1f524:	add	r0, r6, #1
   1f528:	pop	{r4, r5, r6, sl, fp, pc}
   1f52c:	push	{r4, r5, fp, lr}
   1f530:	add	fp, sp, #8
   1f534:	mov	r4, r1
   1f538:	mov	r5, r0
   1f53c:	bl	12174 <strlen@plt>
   1f540:	mov	r1, r0
   1f544:	mov	r0, r5
   1f548:	mov	r2, r4
   1f54c:	pop	{r4, r5, fp, lr}
   1f550:	b	1f554 <__assert_fail@plt+0xd1e8>
   1f554:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f558:	add	fp, sp, #28
   1f55c:	sub	sp, sp, #20
   1f560:	mov	r5, r2
   1f564:	mov	r6, r1
   1f568:	mov	r4, r0
   1f56c:	add	r7, r0, r1
   1f570:	bl	1206c <__ctype_get_mb_cur_max@plt>
   1f574:	cmp	r0, #1
   1f578:	bls	1f838 <__assert_fail@plt+0xd4cc>
   1f57c:	cmp	r6, #1
   1f580:	blt	1f88c <__assert_fail@plt+0xd520>
   1f584:	and	r2, r5, #1
   1f588:	mov	r3, #0
   1f58c:	add	r8, sp, #4
   1f590:	add	r9, sp, #8
   1f594:	mvn	sl, #-2147483648	; 0x80000000
   1f598:	tst	r5, #2
   1f59c:	bne	1f89c <__assert_fail@plt+0xd530>
   1f5a0:	mov	r5, #0
   1f5a4:	ldrb	r0, [r4]
   1f5a8:	sub	r0, r0, #32
   1f5ac:	cmp	r0, #94	; 0x5e
   1f5b0:	bhi	1f74c <__assert_fail@plt+0xd3e0>
   1f5b4:	add	r1, pc, #0
   1f5b8:	ldr	pc, [r1, r0, lsl #2]
   1f5bc:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f5c0:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f5c4:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f5c8:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f5cc:	andeq	pc, r1, ip, asr #14
   1f5d0:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f5d4:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f5d8:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f5dc:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f5e0:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f5e4:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f5e8:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f5ec:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f5f0:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f5f4:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f5f8:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f5fc:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f600:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f604:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f608:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f60c:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f610:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f614:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f618:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f61c:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f620:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f624:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f628:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f62c:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f630:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f634:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f638:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f63c:	andeq	pc, r1, ip, asr #14
   1f640:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f644:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f648:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f64c:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f650:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f654:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f658:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f65c:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f660:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f664:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f668:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f66c:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f670:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f674:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f678:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f67c:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f680:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f684:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f688:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f68c:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f690:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f694:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f698:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f69c:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f6a0:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f6a4:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f6a8:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f6ac:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f6b0:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f6b4:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f6b8:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f6bc:	andeq	pc, r1, ip, asr #14
   1f6c0:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f6c4:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f6c8:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f6cc:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f6d0:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f6d4:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f6d8:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f6dc:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f6e0:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f6e4:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f6e8:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f6ec:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f6f0:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f6f4:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f6f8:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f6fc:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f700:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f704:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f708:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f70c:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f710:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f714:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f718:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f71c:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f720:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f724:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f728:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f72c:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f730:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f734:	andeq	pc, r1, r8, lsr r7	; <UNPREDICTABLE>
   1f738:	add	r5, r5, #1
   1f73c:	add	r4, r4, #1
   1f740:	cmp	r4, r7
   1f744:	bcc	1f5a4 <__assert_fail@plt+0xd238>
   1f748:	b	1fb30 <__assert_fail@plt+0xd7c4>
   1f74c:	str	r2, [sp]
   1f750:	str	r3, [sp, #12]
   1f754:	str	r3, [sp, #8]
   1f758:	b	1f780 <__assert_fail@plt+0xd414>
   1f75c:	ldr	r0, [sp, #4]
   1f760:	bl	11fe8 <iswcntrl@plt>
   1f764:	cmp	r0, #0
   1f768:	beq	1f7ec <__assert_fail@plt+0xd480>
   1f76c:	mov	r0, r9
   1f770:	add	r4, r4, r6
   1f774:	bl	11f1c <mbsinit@plt>
   1f778:	cmp	r0, #0
   1f77c:	bne	1f824 <__assert_fail@plt+0xd4b8>
   1f780:	sub	r2, r7, r4
   1f784:	mov	r0, r8
   1f788:	mov	r1, r4
   1f78c:	mov	r3, r9
   1f790:	bl	25734 <__assert_fail@plt+0x133c8>
   1f794:	cmp	r0, #0
   1f798:	beq	1f7d4 <__assert_fail@plt+0xd468>
   1f79c:	mov	r6, r0
   1f7a0:	cmn	r0, #2
   1f7a4:	beq	1f7fc <__assert_fail@plt+0xd490>
   1f7a8:	cmn	r6, #1
   1f7ac:	beq	1f810 <__assert_fail@plt+0xd4a4>
   1f7b0:	ldr	r0, [sp, #4]
   1f7b4:	bl	11e98 <wcwidth@plt>
   1f7b8:	cmn	r0, #1
   1f7bc:	ble	1f75c <__assert_fail@plt+0xd3f0>
   1f7c0:	sub	r1, sl, r5
   1f7c4:	cmp	r0, r1
   1f7c8:	bgt	1fb3c <__assert_fail@plt+0xd7d0>
   1f7cc:	add	r5, r0, r5
   1f7d0:	b	1f76c <__assert_fail@plt+0xd400>
   1f7d4:	mov	r6, #1
   1f7d8:	ldr	r0, [sp, #4]
   1f7dc:	bl	11e98 <wcwidth@plt>
   1f7e0:	cmn	r0, #1
   1f7e4:	bgt	1f7c0 <__assert_fail@plt+0xd454>
   1f7e8:	b	1f75c <__assert_fail@plt+0xd3f0>
   1f7ec:	cmn	r5, #-2147483647	; 0x80000001
   1f7f0:	beq	1fb3c <__assert_fail@plt+0xd7d0>
   1f7f4:	add	r5, r5, #1
   1f7f8:	b	1f76c <__assert_fail@plt+0xd400>
   1f7fc:	ldr	r0, [sp]
   1f800:	mov	r4, r7
   1f804:	cmp	r0, #0
   1f808:	beq	1f820 <__assert_fail@plt+0xd4b4>
   1f80c:	b	1fb4c <__assert_fail@plt+0xd7e0>
   1f810:	ldr	r0, [sp]
   1f814:	cmp	r0, #0
   1f818:	bne	1fb4c <__assert_fail@plt+0xd7e0>
   1f81c:	add	r4, r4, #1
   1f820:	add	r5, r5, #1
   1f824:	ldr	r2, [sp]
   1f828:	mov	r3, #0
   1f82c:	cmp	r4, r7
   1f830:	bcc	1f5a4 <__assert_fail@plt+0xd238>
   1f834:	b	1fb30 <__assert_fail@plt+0xd7c4>
   1f838:	cmp	r6, #1
   1f83c:	blt	1f88c <__assert_fail@plt+0xd520>
   1f840:	bl	12144 <__ctype_b_loc@plt>
   1f844:	ldr	r0, [r0]
   1f848:	tst	r5, #2
   1f84c:	bne	1fb00 <__assert_fail@plt+0xd794>
   1f850:	mov	r5, #0
   1f854:	b	1f86c <__assert_fail@plt+0xd500>
   1f858:	cmn	r5, #-2147483647	; 0x80000001
   1f85c:	beq	1fb3c <__assert_fail@plt+0xd7d0>
   1f860:	add	r5, r5, #1
   1f864:	cmp	r4, r7
   1f868:	bcs	1fb30 <__assert_fail@plt+0xd7c4>
   1f86c:	ldrb	r1, [r4], #1
   1f870:	add	r1, r0, r1, lsl #1
   1f874:	ldrh	r1, [r1]
   1f878:	tst	r1, #16384	; 0x4000
   1f87c:	bne	1f858 <__assert_fail@plt+0xd4ec>
   1f880:	tst	r1, #2
   1f884:	beq	1f858 <__assert_fail@plt+0xd4ec>
   1f888:	b	1f864 <__assert_fail@plt+0xd4f8>
   1f88c:	mov	r5, #0
   1f890:	mov	r0, r5
   1f894:	sub	sp, fp, #28
   1f898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f89c:	mov	r5, #0
   1f8a0:	ldrb	r0, [r4]
   1f8a4:	sub	r0, r0, #32
   1f8a8:	cmp	r0, #94	; 0x5e
   1f8ac:	bhi	1fa48 <__assert_fail@plt+0xd6dc>
   1f8b0:	add	r1, pc, #0
   1f8b4:	ldr	pc, [r1, r0, lsl #2]
   1f8b8:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f8bc:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f8c0:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f8c4:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f8c8:	andeq	pc, r1, r8, asr #20
   1f8cc:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f8d0:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f8d4:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f8d8:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f8dc:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f8e0:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f8e4:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f8e8:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f8ec:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f8f0:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f8f4:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f8f8:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f8fc:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f900:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f904:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f908:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f90c:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f910:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f914:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f918:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f91c:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f920:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f924:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f928:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f92c:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f930:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f934:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f938:	andeq	pc, r1, r8, asr #20
   1f93c:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f940:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f944:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f948:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f94c:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f950:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f954:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f958:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f95c:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f960:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f964:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f968:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f96c:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f970:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f974:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f978:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f97c:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f980:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f984:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f988:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f98c:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f990:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f994:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f998:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f99c:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f9a0:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f9a4:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f9a8:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f9ac:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f9b0:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f9b4:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f9b8:	andeq	pc, r1, r8, asr #20
   1f9bc:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f9c0:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f9c4:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f9c8:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f9cc:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f9d0:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f9d4:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f9d8:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f9dc:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f9e0:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f9e4:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f9e8:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f9ec:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f9f0:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f9f4:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f9f8:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1f9fc:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1fa00:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1fa04:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1fa08:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1fa0c:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1fa10:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1fa14:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1fa18:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1fa1c:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1fa20:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1fa24:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1fa28:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1fa2c:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1fa30:	andeq	pc, r1, r4, lsr sl	; <UNPREDICTABLE>
   1fa34:	add	r5, r5, #1
   1fa38:	add	r4, r4, #1
   1fa3c:	cmp	r4, r7
   1fa40:	bcc	1f8a0 <__assert_fail@plt+0xd534>
   1fa44:	b	1fb30 <__assert_fail@plt+0xd7c4>
   1fa48:	str	r2, [sp]
   1fa4c:	str	r3, [sp, #12]
   1fa50:	str	r3, [sp, #8]
   1fa54:	sub	r2, r7, r4
   1fa58:	mov	r0, r8
   1fa5c:	mov	r1, r4
   1fa60:	mov	r3, r9
   1fa64:	bl	25734 <__assert_fail@plt+0x133c8>
   1fa68:	cmp	r0, #0
   1fa6c:	beq	1fa88 <__assert_fail@plt+0xd71c>
   1fa70:	mov	r6, r0
   1fa74:	cmn	r0, #2
   1fa78:	beq	1fac4 <__assert_fail@plt+0xd758>
   1fa7c:	cmn	r6, #1
   1fa80:	bne	1fa8c <__assert_fail@plt+0xd720>
   1fa84:	b	1fad8 <__assert_fail@plt+0xd76c>
   1fa88:	mov	r6, #1
   1fa8c:	ldr	r0, [sp, #4]
   1fa90:	bl	11e98 <wcwidth@plt>
   1fa94:	cmp	r0, #0
   1fa98:	bmi	1fb4c <__assert_fail@plt+0xd7e0>
   1fa9c:	sub	r1, sl, r5
   1faa0:	cmp	r0, r1
   1faa4:	bgt	1fb3c <__assert_fail@plt+0xd7d0>
   1faa8:	add	r5, r0, r5
   1faac:	mov	r0, r9
   1fab0:	add	r4, r4, r6
   1fab4:	bl	11f1c <mbsinit@plt>
   1fab8:	cmp	r0, #0
   1fabc:	beq	1fa54 <__assert_fail@plt+0xd6e8>
   1fac0:	b	1faec <__assert_fail@plt+0xd780>
   1fac4:	ldr	r0, [sp]
   1fac8:	mov	r4, r7
   1facc:	cmp	r0, #0
   1fad0:	beq	1fae8 <__assert_fail@plt+0xd77c>
   1fad4:	b	1fb4c <__assert_fail@plt+0xd7e0>
   1fad8:	ldr	r0, [sp]
   1fadc:	cmp	r0, #0
   1fae0:	bne	1fb4c <__assert_fail@plt+0xd7e0>
   1fae4:	add	r4, r4, #1
   1fae8:	add	r5, r5, #1
   1faec:	ldr	r2, [sp]
   1faf0:	mov	r3, #0
   1faf4:	cmp	r4, r7
   1faf8:	bcc	1f8a0 <__assert_fail@plt+0xd534>
   1fafc:	b	1fb30 <__assert_fail@plt+0xd7c4>
   1fb00:	mov	r5, #0
   1fb04:	ldrb	r1, [r4, r5]
   1fb08:	add	r1, r0, r1, lsl #1
   1fb0c:	ldrb	r1, [r1, #1]
   1fb10:	tst	r1, #64	; 0x40
   1fb14:	beq	1fb4c <__assert_fail@plt+0xd7e0>
   1fb18:	cmn	r5, #-2147483647	; 0x80000001
   1fb1c:	beq	1fb3c <__assert_fail@plt+0xd7d0>
   1fb20:	add	r5, r5, #1
   1fb24:	add	r1, r4, r5
   1fb28:	cmp	r1, r7
   1fb2c:	bcc	1fb04 <__assert_fail@plt+0xd798>
   1fb30:	mov	r0, r5
   1fb34:	sub	sp, fp, #28
   1fb38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb3c:	mvn	r5, #-2147483648	; 0x80000000
   1fb40:	mov	r0, r5
   1fb44:	sub	sp, fp, #28
   1fb48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb4c:	mvn	r5, #0
   1fb50:	mov	r0, r5
   1fb54:	sub	sp, fp, #28
   1fb58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb5c:	push	{r4, r5, fp, lr}
   1fb60:	add	fp, sp, #8
   1fb64:	sub	sp, sp, #128	; 0x80
   1fb68:	mvn	r4, #0
   1fb6c:	cmp	r0, #2
   1fb70:	bne	1fbcc <__assert_fail@plt+0xd860>
   1fb74:	movw	r0, #33940	; 0x8494
   1fb78:	movt	r0, #2
   1fb7c:	bl	120cc <getenv@plt>
   1fb80:	bl	1fc94 <__assert_fail@plt+0xd928>
   1fb84:	mov	r5, r0
   1fb88:	movw	r0, #33956	; 0x84a4
   1fb8c:	movt	r0, #2
   1fb90:	bl	120cc <getenv@plt>
   1fb94:	bl	1fc94 <__assert_fail@plt+0xd928>
   1fb98:	cmp	r0, #0
   1fb9c:	mov	r1, r0
   1fba0:	mvneq	r1, #0
   1fba4:	cmp	r5, r1
   1fba8:	mov	r4, r1
   1fbac:	movcc	r4, r5
   1fbb0:	cmp	r5, #0
   1fbb4:	beq	1fbc4 <__assert_fail@plt+0xd858>
   1fbb8:	mov	r0, r4
   1fbbc:	sub	sp, fp, #8
   1fbc0:	pop	{r4, r5, fp, pc}
   1fbc4:	mov	r0, #1
   1fbc8:	mov	r4, r1
   1fbcc:	cmp	r0, #1
   1fbd0:	bne	1fc04 <__assert_fail@plt+0xd898>
   1fbd4:	mov	r2, sp
   1fbd8:	mov	r0, #0
   1fbdc:	mov	r1, #128	; 0x80
   1fbe0:	bl	122f4 <sched_getaffinity@plt>
   1fbe4:	cmp	r0, #0
   1fbe8:	beq	1fc68 <__assert_fail@plt+0xd8fc>
   1fbec:	mov	r0, #84	; 0x54
   1fbf0:	bl	11f94 <sysconf@plt>
   1fbf4:	cmp	r0, #0
   1fbf8:	mov	r5, r0
   1fbfc:	movle	r5, #1
   1fc00:	b	1fc80 <__assert_fail@plt+0xd914>
   1fc04:	mov	r0, #83	; 0x53
   1fc08:	bl	11f94 <sysconf@plt>
   1fc0c:	mov	r5, r0
   1fc10:	sub	r0, r0, #1
   1fc14:	cmp	r0, #1
   1fc18:	bhi	1fc50 <__assert_fail@plt+0xd8e4>
   1fc1c:	mov	r2, sp
   1fc20:	mov	r0, #0
   1fc24:	mov	r1, #128	; 0x80
   1fc28:	bl	122f4 <sched_getaffinity@plt>
   1fc2c:	cmp	r0, #0
   1fc30:	bne	1fc80 <__assert_fail@plt+0xd914>
   1fc34:	mov	r1, sp
   1fc38:	mov	r0, #128	; 0x80
   1fc3c:	bl	11f34 <__sched_cpucount@plt>
   1fc40:	cmp	r0, #0
   1fc44:	cmpne	r0, r5
   1fc48:	bls	1fc80 <__assert_fail@plt+0xd914>
   1fc4c:	b	1fc54 <__assert_fail@plt+0xd8e8>
   1fc50:	mov	r0, r5
   1fc54:	cmp	r0, #0
   1fc58:	mov	r5, r0
   1fc5c:	bgt	1fc80 <__assert_fail@plt+0xd914>
   1fc60:	mov	r5, #1
   1fc64:	b	1fc80 <__assert_fail@plt+0xd914>
   1fc68:	mov	r1, sp
   1fc6c:	mov	r0, #128	; 0x80
   1fc70:	bl	11f34 <__sched_cpucount@plt>
   1fc74:	cmp	r0, #0
   1fc78:	beq	1fbec <__assert_fail@plt+0xd880>
   1fc7c:	mov	r5, r0
   1fc80:	cmp	r5, r4
   1fc84:	movcc	r4, r5
   1fc88:	mov	r0, r4
   1fc8c:	sub	sp, fp, #8
   1fc90:	pop	{r4, r5, fp, pc}
   1fc94:	push	{fp, lr}
   1fc98:	mov	fp, sp
   1fc9c:	sub	sp, sp, #8
   1fca0:	mov	r2, r0
   1fca4:	mov	r0, #0
   1fca8:	cmp	r2, #0
   1fcac:	bne	1fcb8 <__assert_fail@plt+0xd94c>
   1fcb0:	b	1fd2c <__assert_fail@plt+0xd9c0>
   1fcb4:	add	r2, r2, #1
   1fcb8:	ldrb	r1, [r2]
   1fcbc:	sub	r3, r1, #9
   1fcc0:	cmp	r3, #5
   1fcc4:	bcc	1fcb4 <__assert_fail@plt+0xd948>
   1fcc8:	cmp	r1, #32
   1fccc:	beq	1fcb4 <__assert_fail@plt+0xd948>
   1fcd0:	sub	r1, r1, #48	; 0x30
   1fcd4:	cmp	r1, #9
   1fcd8:	bhi	1fd2c <__assert_fail@plt+0xd9c0>
   1fcdc:	mov	r0, #0
   1fce0:	add	r1, sp, #4
   1fce4:	str	r0, [sp, #4]
   1fce8:	mov	r0, r2
   1fcec:	mov	r2, #10
   1fcf0:	bl	12168 <strtoul@plt>
   1fcf4:	ldr	r1, [sp, #4]
   1fcf8:	cmp	r1, #0
   1fcfc:	bne	1fd08 <__assert_fail@plt+0xd99c>
   1fd00:	b	1fd38 <__assert_fail@plt+0xd9cc>
   1fd04:	add	r1, r1, #1
   1fd08:	ldrb	r2, [r1]
   1fd0c:	sub	r3, r2, #9
   1fd10:	cmp	r3, #5
   1fd14:	bcc	1fd04 <__assert_fail@plt+0xd998>
   1fd18:	cmp	r2, #32
   1fd1c:	beq	1fd04 <__assert_fail@plt+0xd998>
   1fd20:	cmp	r2, #0
   1fd24:	cmpne	r2, #44	; 0x2c
   1fd28:	bne	1fd34 <__assert_fail@plt+0xd9c8>
   1fd2c:	mov	sp, fp
   1fd30:	pop	{fp, pc}
   1fd34:	str	r1, [sp, #4]
   1fd38:	mov	r0, #0
   1fd3c:	mov	sp, fp
   1fd40:	pop	{fp, pc}
   1fd44:	andeq	r0, r0, r0
   1fd48:	push	{r4, sl, fp, lr}
   1fd4c:	add	fp, sp, #8
   1fd50:	sub	sp, sp, #64	; 0x40
   1fd54:	mov	r0, #85	; 0x55
   1fd58:	bl	11f94 <sysconf@plt>
   1fd5c:	mov	r4, r0
   1fd60:	mov	r0, #30
   1fd64:	bl	11f94 <sysconf@plt>
   1fd68:	orr	r1, r0, r4
   1fd6c:	cmn	r1, #1
   1fd70:	ble	1fd90 <__assert_fail@plt+0xda24>
   1fd74:	vmov	s0, r0
   1fd78:	vcvt.f64.s32	d16, s0
   1fd7c:	vmov	s0, r4
   1fd80:	vcvt.f64.s32	d17, s0
   1fd84:	vmul.f64	d0, d17, d16
   1fd88:	sub	sp, fp, #8
   1fd8c:	pop	{r4, sl, fp, pc}
   1fd90:	mov	r0, sp
   1fd94:	bl	120e4 <sysinfo@plt>
   1fd98:	cmp	r0, #0
   1fd9c:	beq	1fdac <__assert_fail@plt+0xda40>
   1fda0:	vldr	d0, [pc, #32]	; 1fdc8 <__assert_fail@plt+0xda5c>
   1fda4:	sub	sp, fp, #8
   1fda8:	pop	{r4, sl, fp, pc}
   1fdac:	vldr	s0, [sp, #16]
   1fdb0:	vldr	s2, [sp, #52]	; 0x34
   1fdb4:	vcvt.f64.u32	d16, s2
   1fdb8:	vcvt.f64.u32	d17, s0
   1fdbc:	vmul.f64	d0, d17, d16
   1fdc0:	sub	sp, fp, #8
   1fdc4:	pop	{r4, sl, fp, pc}
   1fdc8:	andeq	r0, r0, r0
   1fdcc:	orrsmi	r0, r0, r0
   1fdd0:	push	{r4, sl, fp, lr}
   1fdd4:	add	fp, sp, #8
   1fdd8:	sub	sp, sp, #64	; 0x40
   1fddc:	mov	r0, #86	; 0x56
   1fde0:	bl	11f94 <sysconf@plt>
   1fde4:	mov	r4, r0
   1fde8:	mov	r0, #30
   1fdec:	bl	11f94 <sysconf@plt>
   1fdf0:	orrs	r1, r0, r4
   1fdf4:	bmi	1fe14 <__assert_fail@plt+0xdaa8>
   1fdf8:	vmov	s0, r0
   1fdfc:	vcvt.f64.s32	d16, s0
   1fe00:	vmov	s0, r4
   1fe04:	vcvt.f64.s32	d17, s0
   1fe08:	vmul.f64	d0, d17, d16
   1fe0c:	sub	sp, fp, #8
   1fe10:	pop	{r4, sl, fp, pc}
   1fe14:	mov	r0, sp
   1fe18:	bl	120e4 <sysinfo@plt>
   1fe1c:	cmp	r0, #0
   1fe20:	beq	1fe68 <__assert_fail@plt+0xdafc>
   1fe24:	mov	r0, #85	; 0x55
   1fe28:	bl	11f94 <sysconf@plt>
   1fe2c:	mov	r4, r0
   1fe30:	mov	r0, #30
   1fe34:	bl	11f94 <sysconf@plt>
   1fe38:	orr	r1, r0, r4
   1fe3c:	cmn	r1, #1
   1fe40:	ble	1fe90 <__assert_fail@plt+0xdb24>
   1fe44:	vmov	s0, r0
   1fe48:	vcvt.f64.s32	d16, s0
   1fe4c:	vmov	s0, r4
   1fe50:	vcvt.f64.s32	d17, s0
   1fe54:	vmul.f64	d16, d17, d16
   1fe58:	vmov.f64	d17, #80	; 0x3e800000  0.250
   1fe5c:	vmul.f64	d0, d16, d17
   1fe60:	sub	sp, fp, #8
   1fe64:	pop	{r4, sl, fp, pc}
   1fe68:	vldr	s0, [sp, #20]
   1fe6c:	vldr	s2, [sp, #28]
   1fe70:	vldr	s4, [sp, #52]	; 0x34
   1fe74:	vcvt.f64.u32	d16, s2
   1fe78:	vcvt.f64.u32	d17, s0
   1fe7c:	vcvt.f64.u32	d18, s4
   1fe80:	vadd.f64	d16, d17, d16
   1fe84:	vmul.f64	d0, d16, d18
   1fe88:	sub	sp, fp, #8
   1fe8c:	pop	{r4, sl, fp, pc}
   1fe90:	mov	r0, sp
   1fe94:	bl	120e4 <sysinfo@plt>
   1fe98:	cmp	r0, #0
   1fe9c:	beq	1feb4 <__assert_fail@plt+0xdb48>
   1fea0:	vldr	d16, [pc, #32]	; 1fec8 <__assert_fail@plt+0xdb5c>
   1fea4:	vmov.f64	d17, #80	; 0x3e800000  0.250
   1fea8:	vmul.f64	d0, d16, d17
   1feac:	sub	sp, fp, #8
   1feb0:	pop	{r4, sl, fp, pc}
   1feb4:	vldr	s0, [sp, #16]
   1feb8:	vldr	s2, [sp, #52]	; 0x34
   1febc:	vcvt.f64.u32	d16, s2
   1fec0:	vcvt.f64.u32	d17, s0
   1fec4:	b	1fe54 <__assert_fail@plt+0xdae8>
   1fec8:	andeq	r0, r0, r0
   1fecc:	orrsmi	r0, r0, r0
   1fed0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1fed4:	add	fp, sp, #24
   1fed8:	movw	r7, #39112	; 0x98c8
   1fedc:	mov	r4, r0
   1fee0:	ldr	r9, [r0]
   1fee4:	ldr	r8, [r0, #4]
   1fee8:	mov	r5, r1
   1feec:	movt	r7, #3
   1fef0:	ldr	r0, [r7]
   1fef4:	cmp	r0, #0
   1fef8:	bmi	1ff2c <__assert_fail@plt+0xdbc0>
   1fefc:	mov	r0, r4
   1ff00:	mov	r1, r5
   1ff04:	bl	122d0 <pipe2@plt>
   1ff08:	mov	r6, r0
   1ff0c:	cmn	r0, #1
   1ff10:	bgt	1ff54 <__assert_fail@plt+0xdbe8>
   1ff14:	bl	12198 <__errno_location@plt>
   1ff18:	ldr	r0, [r0]
   1ff1c:	cmp	r0, #38	; 0x26
   1ff20:	bne	1ff54 <__assert_fail@plt+0xdbe8>
   1ff24:	mvn	r0, #0
   1ff28:	str	r0, [r7]
   1ff2c:	movw	r0, #63487	; 0xf7ff
   1ff30:	movt	r0, #65527	; 0xfff7
   1ff34:	tst	r5, r0
   1ff38:	beq	1ff64 <__assert_fail@plt+0xdbf8>
   1ff3c:	bl	12198 <__errno_location@plt>
   1ff40:	mov	r1, #22
   1ff44:	str	r1, [r0]
   1ff48:	mvn	r6, #0
   1ff4c:	mov	r0, r6
   1ff50:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ff54:	mov	r0, #1
   1ff58:	str	r0, [r7]
   1ff5c:	mov	r0, r6
   1ff60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ff64:	mov	r0, r4
   1ff68:	bl	1221c <pipe@plt>
   1ff6c:	mvn	r6, #0
   1ff70:	cmp	r0, #0
   1ff74:	bmi	1ff4c <__assert_fail@plt+0xdbe0>
   1ff78:	tst	r5, #2048	; 0x800
   1ff7c:	bne	1fffc <__assert_fail@plt+0xdc90>
   1ff80:	mov	r6, #0
   1ff84:	tst	r5, #524288	; 0x80000
   1ff88:	beq	1ff4c <__assert_fail@plt+0xdbe0>
   1ff8c:	ldr	r0, [r4, #4]
   1ff90:	mov	r1, #1
   1ff94:	mov	r2, #0
   1ff98:	bl	25410 <__assert_fail@plt+0x130a4>
   1ff9c:	cmp	r0, #0
   1ffa0:	bmi	20064 <__assert_fail@plt+0xdcf8>
   1ffa4:	ldr	r1, [r4, #4]
   1ffa8:	orr	r2, r0, #1
   1ffac:	mov	r0, r1
   1ffb0:	mov	r1, #2
   1ffb4:	bl	25410 <__assert_fail@plt+0x130a4>
   1ffb8:	cmn	r0, #1
   1ffbc:	beq	20064 <__assert_fail@plt+0xdcf8>
   1ffc0:	ldr	r0, [r4]
   1ffc4:	mov	r1, #1
   1ffc8:	mov	r2, #0
   1ffcc:	mov	r6, #0
   1ffd0:	bl	25410 <__assert_fail@plt+0x130a4>
   1ffd4:	cmp	r0, #0
   1ffd8:	bmi	20064 <__assert_fail@plt+0xdcf8>
   1ffdc:	ldr	r1, [r4]
   1ffe0:	orr	r2, r0, #1
   1ffe4:	mov	r0, r1
   1ffe8:	mov	r1, #2
   1ffec:	bl	25410 <__assert_fail@plt+0x130a4>
   1fff0:	cmn	r0, #1
   1fff4:	bne	1ff4c <__assert_fail@plt+0xdbe0>
   1fff8:	b	20064 <__assert_fail@plt+0xdcf8>
   1fffc:	ldr	r0, [r4, #4]
   20000:	mov	r1, #3
   20004:	mov	r2, #0
   20008:	bl	25410 <__assert_fail@plt+0x130a4>
   2000c:	cmp	r0, #0
   20010:	bmi	20064 <__assert_fail@plt+0xdcf8>
   20014:	ldr	r1, [r4, #4]
   20018:	orr	r2, r0, #2048	; 0x800
   2001c:	mov	r0, r1
   20020:	mov	r1, #4
   20024:	bl	25410 <__assert_fail@plt+0x130a4>
   20028:	cmn	r0, #1
   2002c:	beq	20064 <__assert_fail@plt+0xdcf8>
   20030:	ldr	r0, [r4]
   20034:	mov	r1, #3
   20038:	mov	r2, #0
   2003c:	bl	25410 <__assert_fail@plt+0x130a4>
   20040:	cmp	r0, #0
   20044:	bmi	20064 <__assert_fail@plt+0xdcf8>
   20048:	ldr	r1, [r4]
   2004c:	orr	r2, r0, #2048	; 0x800
   20050:	mov	r0, r1
   20054:	mov	r1, #4
   20058:	bl	25410 <__assert_fail@plt+0x130a4>
   2005c:	cmn	r0, #1
   20060:	bne	1ff80 <__assert_fail@plt+0xdc14>
   20064:	bl	12198 <__errno_location@plt>
   20068:	mov	r5, r0
   2006c:	ldr	r6, [r0]
   20070:	ldr	r0, [r4]
   20074:	bl	12354 <close@plt>
   20078:	ldr	r0, [r4, #4]
   2007c:	bl	12354 <close@plt>
   20080:	str	r9, [r4]
   20084:	str	r8, [r4, #4]
   20088:	str	r6, [r5]
   2008c:	b	1ff48 <__assert_fail@plt+0xdbdc>
   20090:	push	{r4, sl, fp, lr}
   20094:	add	fp, sp, #8
   20098:	sub	sp, sp, #8
   2009c:	movw	r0, #33973	; 0x84b5
   200a0:	movt	r0, #2
   200a4:	bl	120cc <getenv@plt>
   200a8:	movw	r4, #4201	; 0x1069
   200ac:	cmp	r0, #0
   200b0:	movt	r4, #3
   200b4:	beq	200e0 <__assert_fail@plt+0xdd74>
   200b8:	ldrb	r1, [r0]
   200bc:	cmp	r1, #0
   200c0:	beq	200e0 <__assert_fail@plt+0xdd74>
   200c4:	add	r1, sp, #4
   200c8:	mov	r2, #10
   200cc:	bl	11e5c <strtol@plt>
   200d0:	ldr	r1, [sp, #4]
   200d4:	ldrb	r1, [r1]
   200d8:	cmp	r1, #0
   200dc:	moveq	r4, r0
   200e0:	mov	r0, r4
   200e4:	sub	sp, fp, #8
   200e8:	pop	{r4, sl, fp, pc}
   200ec:	push	{r4, r5, fp, lr}
   200f0:	add	fp, sp, #8
   200f4:	cmp	r0, #0
   200f8:	beq	2018c <__assert_fail@plt+0xde20>
   200fc:	mov	r1, #47	; 0x2f
   20100:	mov	r4, r0
   20104:	bl	1227c <strrchr@plt>
   20108:	cmp	r0, #0
   2010c:	mov	r5, r4
   20110:	addne	r5, r0, #1
   20114:	sub	r0, r5, r4
   20118:	cmp	r0, #7
   2011c:	blt	20170 <__assert_fail@plt+0xde04>
   20120:	movw	r1, #34045	; 0x84fd
   20124:	sub	r0, r5, #7
   20128:	mov	r2, #7
   2012c:	movt	r1, #2
   20130:	bl	12330 <strncmp@plt>
   20134:	cmp	r0, #0
   20138:	bne	20170 <__assert_fail@plt+0xde04>
   2013c:	movw	r1, #34053	; 0x8505
   20140:	mov	r0, r5
   20144:	mov	r2, #3
   20148:	movt	r1, #2
   2014c:	bl	12330 <strncmp@plt>
   20150:	cmp	r0, #0
   20154:	beq	20160 <__assert_fail@plt+0xddf4>
   20158:	mov	r4, r5
   2015c:	b	20170 <__assert_fail@plt+0xde04>
   20160:	movw	r0, #37568	; 0x92c0
   20164:	add	r4, r5, #3
   20168:	movt	r0, #3
   2016c:	str	r4, [r0]
   20170:	movw	r0, #37572	; 0x92c4
   20174:	movt	r0, #3
   20178:	str	r4, [r0]
   2017c:	movw	r0, #39116	; 0x98cc
   20180:	movt	r0, #3
   20184:	str	r4, [r0]
   20188:	pop	{r4, r5, fp, pc}
   2018c:	movw	r0, #37584	; 0x92d0
   20190:	mov	r1, #55	; 0x37
   20194:	mov	r2, #1
   20198:	movt	r0, #3
   2019c:	ldr	r3, [r0]
   201a0:	movw	r0, #33989	; 0x84c5
   201a4:	movt	r0, #2
   201a8:	bl	1203c <fwrite@plt>
   201ac:	bl	12348 <abort@plt>
   201b0:	push	{r4, r5, r6, sl, fp, lr}
   201b4:	add	fp, sp, #16
   201b8:	mov	r4, r0
   201bc:	movw	r0, #39120	; 0x98d0
   201c0:	movt	r0, #3
   201c4:	cmp	r4, #0
   201c8:	moveq	r4, r0
   201cc:	bl	12198 <__errno_location@plt>
   201d0:	ldr	r6, [r0]
   201d4:	mov	r5, r0
   201d8:	mov	r0, r4
   201dc:	mov	r1, #48	; 0x30
   201e0:	bl	23d74 <__assert_fail@plt+0x11a08>
   201e4:	str	r6, [r5]
   201e8:	pop	{r4, r5, r6, sl, fp, pc}
   201ec:	movw	r1, #39120	; 0x98d0
   201f0:	cmp	r0, #0
   201f4:	movt	r1, #3
   201f8:	movne	r1, r0
   201fc:	ldr	r0, [r1]
   20200:	bx	lr
   20204:	movw	r2, #39120	; 0x98d0
   20208:	cmp	r0, #0
   2020c:	movt	r2, #3
   20210:	movne	r2, r0
   20214:	str	r1, [r2]
   20218:	bx	lr
   2021c:	movw	r3, #39120	; 0x98d0
   20220:	cmp	r0, #0
   20224:	and	r2, r2, #1
   20228:	movt	r3, #3
   2022c:	movne	r3, r0
   20230:	ubfx	r0, r1, #5, #3
   20234:	and	r1, r1, #31
   20238:	add	ip, r3, r0, lsl #2
   2023c:	mov	r0, #1
   20240:	ldr	r3, [ip, #8]
   20244:	and	r0, r0, r3, lsr r1
   20248:	eor	r2, r0, r2
   2024c:	eor	r1, r3, r2, lsl r1
   20250:	str	r1, [ip, #8]
   20254:	bx	lr
   20258:	movw	r2, #39120	; 0x98d0
   2025c:	cmp	r0, #0
   20260:	movt	r2, #3
   20264:	movne	r2, r0
   20268:	ldr	r0, [r2, #4]
   2026c:	str	r1, [r2, #4]
   20270:	bx	lr
   20274:	push	{fp, lr}
   20278:	mov	fp, sp
   2027c:	movw	r3, #39120	; 0x98d0
   20280:	cmp	r0, #0
   20284:	movt	r3, #3
   20288:	movne	r3, r0
   2028c:	cmp	r1, #0
   20290:	mov	r0, #10
   20294:	cmpne	r2, #0
   20298:	str	r0, [r3]
   2029c:	bne	202a4 <__assert_fail@plt+0xdf38>
   202a0:	bl	12348 <abort@plt>
   202a4:	str	r1, [r3, #40]	; 0x28
   202a8:	str	r2, [r3, #44]	; 0x2c
   202ac:	pop	{fp, pc}
   202b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   202b4:	add	fp, sp, #28
   202b8:	sub	sp, sp, #20
   202bc:	mov	r7, r0
   202c0:	ldr	r0, [fp, #8]
   202c4:	movw	r5, #39120	; 0x98d0
   202c8:	mov	r8, r3
   202cc:	mov	r9, r2
   202d0:	mov	sl, r1
   202d4:	movt	r5, #3
   202d8:	cmp	r0, #0
   202dc:	movne	r5, r0
   202e0:	bl	12198 <__errno_location@plt>
   202e4:	ldr	r2, [r5, #40]	; 0x28
   202e8:	ldr	r3, [r5, #44]	; 0x2c
   202ec:	mov	r4, r0
   202f0:	ldm	r5, {r0, r1}
   202f4:	add	r5, r5, #8
   202f8:	ldr	r6, [r4]
   202fc:	stm	sp, {r0, r1, r5}
   20300:	mov	r0, r7
   20304:	mov	r1, sl
   20308:	str	r2, [sp, #12]
   2030c:	str	r3, [sp, #16]
   20310:	mov	r2, r9
   20314:	mov	r3, r8
   20318:	bl	20328 <__assert_fail@plt+0xdfbc>
   2031c:	str	r6, [r4]
   20320:	sub	sp, fp, #28
   20324:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20328:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2032c:	add	fp, sp, #28
   20330:	sub	sp, sp, #156	; 0x9c
   20334:	str	r0, [fp, #-84]	; 0xffffffac
   20338:	add	r0, r2, #1
   2033c:	mov	r6, r1
   20340:	mov	r7, r3
   20344:	str	r2, [fp, #-80]	; 0xffffffb0
   20348:	str	r0, [sp, #80]	; 0x50
   2034c:	ldr	r0, [fp, #12]
   20350:	and	r1, r0, #1
   20354:	str	r1, [sp, #36]	; 0x24
   20358:	and	r1, r0, #4
   2035c:	str	r1, [sp, #32]
   20360:	ubfx	r8, r0, #1, #1
   20364:	bl	1206c <__ctype_get_mb_cur_max@plt>
   20368:	str	r0, [sp, #40]	; 0x28
   2036c:	ldr	r0, [fp, #24]
   20370:	ldr	r4, [fp, #8]
   20374:	mov	r1, #0
   20378:	str	r1, [fp, #-52]	; 0xffffffcc
   2037c:	mov	r1, #0
   20380:	str	r1, [sp, #60]	; 0x3c
   20384:	mov	r1, #1
   20388:	str	r1, [sp, #84]	; 0x54
   2038c:	str	r0, [sp, #76]	; 0x4c
   20390:	ldr	r0, [fp, #20]
   20394:	str	r0, [sp, #72]	; 0x48
   20398:	mov	r0, #0
   2039c:	str	r0, [sp, #56]	; 0x38
   203a0:	mov	r0, #0
   203a4:	str	r0, [fp, #-88]	; 0xffffffa8
   203a8:	mov	r0, #0
   203ac:	str	r0, [fp, #-72]	; 0xffffffb8
   203b0:	mov	r0, #0
   203b4:	cmp	r4, #10
   203b8:	bhi	216d4 <__assert_fail@plt+0xf368>
   203bc:	add	r1, pc, #24
   203c0:	ldr	ip, [fp, #-84]	; 0xffffffac
   203c4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   203c8:	mov	r5, r6
   203cc:	mov	r9, #0
   203d0:	mov	r2, #1
   203d4:	mov	r3, #0
   203d8:	ldr	pc, [r1, r4, lsl #2]
   203dc:	andeq	r0, r2, r4, lsr #9
   203e0:	andeq	r0, r2, r0, ror #9
   203e4:			; <UNDEFINED> instruction: 0x000204b4
   203e8:	muleq	r2, ip, r4
   203ec:	ldrdeq	r0, [r2], -r4
   203f0:	andeq	r0, r2, r8, lsr r5
   203f4:	andeq	r0, r2, r4, asr #9
   203f8:			; <UNDEFINED> instruction: 0x000207b0
   203fc:	andeq	r0, r2, r8, lsl #8
   20400:	andeq	r0, r2, r8, lsl #8
   20404:	andeq	r0, r2, r0, asr #12
   20408:	movw	r6, #34133	; 0x8555
   2040c:	mov	r0, #0
   20410:	mov	r2, #5
   20414:	movt	r6, #2
   20418:	mov	r1, r6
   2041c:	bl	11f7c <dcgettext@plt>
   20420:	cmp	r0, r6
   20424:	str	r0, [sp, #72]	; 0x48
   20428:	bne	20618 <__assert_fail@plt+0xe2ac>
   2042c:	bl	256fc <__assert_fail@plt+0x13390>
   20430:	ldrb	r1, [r0]
   20434:	and	r1, r1, #223	; 0xdf
   20438:	cmp	r1, #71	; 0x47
   2043c:	beq	20598 <__assert_fail@plt+0xe22c>
   20440:	cmp	r1, #85	; 0x55
   20444:	bne	205fc <__assert_fail@plt+0xe290>
   20448:	ldrb	r1, [r0, #1]
   2044c:	and	r1, r1, #223	; 0xdf
   20450:	cmp	r1, #84	; 0x54
   20454:	bne	205fc <__assert_fail@plt+0xe290>
   20458:	ldrb	r1, [r0, #2]
   2045c:	and	r1, r1, #223	; 0xdf
   20460:	cmp	r1, #70	; 0x46
   20464:	bne	205fc <__assert_fail@plt+0xe290>
   20468:	ldrb	r1, [r0, #3]
   2046c:	cmp	r1, #45	; 0x2d
   20470:	bne	205fc <__assert_fail@plt+0xe290>
   20474:	ldrb	r1, [r0, #4]
   20478:	cmp	r1, #56	; 0x38
   2047c:	bne	205fc <__assert_fail@plt+0xe290>
   20480:	ldrb	r0, [r0, #5]
   20484:	cmp	r0, #0
   20488:	movw	r0, #34135	; 0x8557
   2048c:	movt	r0, #2
   20490:	str	r0, [sp, #72]	; 0x48
   20494:	bne	205fc <__assert_fail@plt+0xe290>
   20498:	b	20618 <__assert_fail@plt+0xe2ac>
   2049c:	mov	r0, #1
   204a0:	b	204e0 <__assert_fail@plt+0xe174>
   204a4:	mov	r4, #0
   204a8:	mov	r9, #0
   204ac:	mov	r2, r0
   204b0:	b	20530 <__assert_fail@plt+0xe1c4>
   204b4:	tst	r8, #1
   204b8:	bne	204e0 <__assert_fail@plt+0xe174>
   204bc:	mov	r2, r0
   204c0:	b	20508 <__assert_fail@plt+0xe19c>
   204c4:	mov	r0, #1
   204c8:	mov	r9, #0
   204cc:	mov	r4, #5
   204d0:	b	2054c <__assert_fail@plt+0xe1e0>
   204d4:	mov	r2, #1
   204d8:	tst	r8, #1
   204dc:	beq	20508 <__assert_fail@plt+0xe19c>
   204e0:	mov	r1, #1
   204e4:	mov	r9, #0
   204e8:	mov	r4, #2
   204ec:	mov	r2, r0
   204f0:	mov	r3, #1
   204f4:	str	r1, [fp, #-72]	; 0xffffffb8
   204f8:	movw	r1, #29690	; 0x73fa
   204fc:	movt	r1, #2
   20500:	str	r1, [fp, #-88]	; 0xffffffa8
   20504:	b	207b0 <__assert_fail@plt+0xe444>
   20508:	cmp	r5, #0
   2050c:	mov	r9, #1
   20510:	mov	r4, #2
   20514:	movne	r0, #39	; 0x27
   20518:	strbne	r0, [ip]
   2051c:	movw	r0, #29690	; 0x73fa
   20520:	movt	r0, #2
   20524:	str	r0, [fp, #-88]	; 0xffffffa8
   20528:	mov	r0, #1
   2052c:	str	r0, [fp, #-72]	; 0xffffffb8
   20530:	mov	r3, #0
   20534:	b	207b0 <__assert_fail@plt+0xe444>
   20538:	mov	r4, #5
   2053c:	tst	r8, #1
   20540:	beq	20568 <__assert_fail@plt+0xe1fc>
   20544:	mov	r0, #1
   20548:	mov	r9, #0
   2054c:	str	r0, [fp, #-72]	; 0xffffffb8
   20550:	movw	r0, #31463	; 0x7ae7
   20554:	mov	r2, #1
   20558:	mov	r3, #1
   2055c:	movt	r0, #2
   20560:	str	r0, [fp, #-88]	; 0xffffffa8
   20564:	b	207b0 <__assert_fail@plt+0xe444>
   20568:	cmp	r5, #0
   2056c:	mov	r3, #0
   20570:	mov	r9, #1
   20574:	mov	r2, #1
   20578:	movne	r0, #34	; 0x22
   2057c:	strbne	r0, [ip]
   20580:	movw	r0, #31463	; 0x7ae7
   20584:	movt	r0, #2
   20588:	str	r0, [fp, #-88]	; 0xffffffa8
   2058c:	mov	r0, #1
   20590:	str	r0, [fp, #-72]	; 0xffffffb8
   20594:	b	207b0 <__assert_fail@plt+0xe444>
   20598:	ldrb	r1, [r0, #1]
   2059c:	and	r1, r1, #223	; 0xdf
   205a0:	cmp	r1, #66	; 0x42
   205a4:	bne	205fc <__assert_fail@plt+0xe290>
   205a8:	ldrb	r1, [r0, #2]
   205ac:	cmp	r1, #49	; 0x31
   205b0:	bne	205fc <__assert_fail@plt+0xe290>
   205b4:	ldrb	r1, [r0, #3]
   205b8:	cmp	r1, #56	; 0x38
   205bc:	bne	205fc <__assert_fail@plt+0xe290>
   205c0:	ldrb	r1, [r0, #4]
   205c4:	cmp	r1, #48	; 0x30
   205c8:	bne	205fc <__assert_fail@plt+0xe290>
   205cc:	ldrb	r1, [r0, #5]
   205d0:	cmp	r1, #51	; 0x33
   205d4:	bne	205fc <__assert_fail@plt+0xe290>
   205d8:	ldrb	r1, [r0, #6]
   205dc:	cmp	r1, #48	; 0x30
   205e0:	bne	205fc <__assert_fail@plt+0xe290>
   205e4:	ldrb	r0, [r0, #7]
   205e8:	cmp	r0, #0
   205ec:	movw	r0, #34143	; 0x855f
   205f0:	movt	r0, #2
   205f4:	str	r0, [sp, #72]	; 0x48
   205f8:	beq	20618 <__assert_fail@plt+0xe2ac>
   205fc:	movw	r1, #31463	; 0x7ae7
   20600:	movw	r0, #29690	; 0x73fa
   20604:	cmp	r4, #9
   20608:	movt	r1, #2
   2060c:	movt	r0, #2
   20610:	moveq	r0, r1
   20614:	str	r0, [sp, #72]	; 0x48
   20618:	movw	r6, #29690	; 0x73fa
   2061c:	mov	r0, #0
   20620:	mov	r2, #5
   20624:	movt	r6, #2
   20628:	mov	r1, r6
   2062c:	bl	11f7c <dcgettext@plt>
   20630:	cmp	r0, r6
   20634:	str	r0, [sp, #76]	; 0x4c
   20638:	beq	20684 <__assert_fail@plt+0xe318>
   2063c:	ldr	ip, [fp, #-84]	; 0xffffffac
   20640:	mov	r9, #0
   20644:	tst	r8, #1
   20648:	bne	2078c <__assert_fail@plt+0xe420>
   2064c:	ldr	r0, [sp, #72]	; 0x48
   20650:	ldrb	r0, [r0]
   20654:	cmp	r0, #0
   20658:	beq	2078c <__assert_fail@plt+0xe420>
   2065c:	ldr	r1, [sp, #72]	; 0x48
   20660:	mov	r9, #0
   20664:	add	r1, r1, #1
   20668:	cmp	r9, r5
   2066c:	strbcc	r0, [ip, r9]
   20670:	ldrb	r0, [r1, r9]
   20674:	add	r9, r9, #1
   20678:	cmp	r0, #0
   2067c:	bne	20668 <__assert_fail@plt+0xe2fc>
   20680:	b	2078c <__assert_fail@plt+0xe420>
   20684:	bl	256fc <__assert_fail@plt+0x13390>
   20688:	ldrb	r1, [r0]
   2068c:	and	r1, r1, #223	; 0xdf
   20690:	cmp	r1, #71	; 0x47
   20694:	beq	20704 <__assert_fail@plt+0xe398>
   20698:	ldr	ip, [fp, #-84]	; 0xffffffac
   2069c:	cmp	r1, #85	; 0x55
   206a0:	bne	20760 <__assert_fail@plt+0xe3f4>
   206a4:	ldrb	r1, [r0, #1]
   206a8:	and	r1, r1, #223	; 0xdf
   206ac:	cmp	r1, #84	; 0x54
   206b0:	bne	20760 <__assert_fail@plt+0xe3f4>
   206b4:	ldrb	r1, [r0, #2]
   206b8:	and	r1, r1, #223	; 0xdf
   206bc:	cmp	r1, #70	; 0x46
   206c0:	bne	20760 <__assert_fail@plt+0xe3f4>
   206c4:	ldrb	r1, [r0, #3]
   206c8:	cmp	r1, #45	; 0x2d
   206cc:	bne	20760 <__assert_fail@plt+0xe3f4>
   206d0:	ldrb	r1, [r0, #4]
   206d4:	cmp	r1, #56	; 0x38
   206d8:	bne	20760 <__assert_fail@plt+0xe3f4>
   206dc:	ldrb	r0, [r0, #5]
   206e0:	cmp	r0, #0
   206e4:	bne	20760 <__assert_fail@plt+0xe3f4>
   206e8:	movw	r0, #34139	; 0x855b
   206ec:	movt	r0, #2
   206f0:	str	r0, [sp, #76]	; 0x4c
   206f4:	mov	r9, #0
   206f8:	tst	r8, #1
   206fc:	beq	2064c <__assert_fail@plt+0xe2e0>
   20700:	b	2078c <__assert_fail@plt+0xe420>
   20704:	ldrb	r1, [r0, #1]
   20708:	ldr	ip, [fp, #-84]	; 0xffffffac
   2070c:	and	r1, r1, #223	; 0xdf
   20710:	cmp	r1, #66	; 0x42
   20714:	bne	20760 <__assert_fail@plt+0xe3f4>
   20718:	ldrb	r1, [r0, #2]
   2071c:	cmp	r1, #49	; 0x31
   20720:	bne	20760 <__assert_fail@plt+0xe3f4>
   20724:	ldrb	r1, [r0, #3]
   20728:	cmp	r1, #56	; 0x38
   2072c:	bne	20760 <__assert_fail@plt+0xe3f4>
   20730:	ldrb	r1, [r0, #4]
   20734:	cmp	r1, #48	; 0x30
   20738:	bne	20760 <__assert_fail@plt+0xe3f4>
   2073c:	ldrb	r1, [r0, #5]
   20740:	cmp	r1, #51	; 0x33
   20744:	bne	20760 <__assert_fail@plt+0xe3f4>
   20748:	ldrb	r1, [r0, #6]
   2074c:	cmp	r1, #48	; 0x30
   20750:	bne	20760 <__assert_fail@plt+0xe3f4>
   20754:	ldrb	r0, [r0, #7]
   20758:	cmp	r0, #0
   2075c:	beq	21574 <__assert_fail@plt+0xf208>
   20760:	movw	r0, #29690	; 0x73fa
   20764:	cmp	r4, #9
   20768:	movt	r0, #2
   2076c:	mov	r1, r0
   20770:	movw	r0, #31463	; 0x7ae7
   20774:	movt	r0, #2
   20778:	moveq	r1, r0
   2077c:	str	r1, [sp, #76]	; 0x4c
   20780:	mov	r9, #0
   20784:	tst	r8, #1
   20788:	beq	2064c <__assert_fail@plt+0xe2e0>
   2078c:	ldr	r6, [sp, #76]	; 0x4c
   20790:	mov	r0, r6
   20794:	bl	12174 <strlen@plt>
   20798:	ldr	ip, [fp, #-84]	; 0xffffffac
   2079c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   207a0:	str	r0, [fp, #-72]	; 0xffffffb8
   207a4:	str	r6, [fp, #-88]	; 0xffffffa8
   207a8:	mov	r2, #1
   207ac:	mov	r3, r8
   207b0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   207b4:	str	r4, [fp, #-64]	; 0xffffffc0
   207b8:	mov	sl, #0
   207bc:	str	r3, [fp, #-76]	; 0xffffffb4
   207c0:	str	r2, [sp, #88]	; 0x58
   207c4:	cmp	r0, #0
   207c8:	movwne	r0, #1
   207cc:	and	r1, r0, r3
   207d0:	and	r1, r2, r1
   207d4:	str	r1, [sp, #48]	; 0x30
   207d8:	sub	r1, r4, #2
   207dc:	clz	r1, r1
   207e0:	lsr	r1, r1, #5
   207e4:	and	r1, r1, r3
   207e8:	str	r1, [sp, #44]	; 0x2c
   207ec:	subs	r1, r4, #2
   207f0:	eor	r4, r3, #1
   207f4:	movwne	r1, #1
   207f8:	str	r4, [sp, #92]	; 0x5c
   207fc:	orr	r4, r1, r4
   20800:	and	r1, r1, r2
   20804:	and	r0, r0, r1
   20808:	str	r4, [sp, #64]	; 0x40
   2080c:	ldr	r4, [sp, #84]	; 0x54
   20810:	str	r0, [fp, #-60]	; 0xffffffc4
   20814:	orr	r0, r1, r3
   20818:	ldr	r1, [fp, #16]
   2081c:	eor	r0, r0, #1
   20820:	clz	r1, r1
   20824:	lsr	r1, r1, #5
   20828:	orr	r0, r1, r0
   2082c:	str	r0, [fp, #-68]	; 0xffffffbc
   20830:	eor	r0, r2, #1
   20834:	str	r0, [sp, #52]	; 0x34
   20838:	cmn	r7, #1
   2083c:	beq	2084c <__assert_fail@plt+0xe4e0>
   20840:	cmp	sl, r7
   20844:	bne	20858 <__assert_fail@plt+0xe4ec>
   20848:	b	214ec <__assert_fail@plt+0xf180>
   2084c:	ldrb	r0, [lr, sl]
   20850:	cmp	r0, #0
   20854:	beq	214f4 <__assert_fail@plt+0xf188>
   20858:	ldr	r0, [fp, #-60]	; 0xffffffc4
   2085c:	cmp	r0, #0
   20860:	beq	208c0 <__assert_fail@plt+0xe554>
   20864:	ldr	r0, [fp, #-72]	; 0xffffffb8
   20868:	mov	r6, r5
   2086c:	add	r5, sl, r0
   20870:	cmp	r0, #2
   20874:	bcc	208e0 <__assert_fail@plt+0xe574>
   20878:	mov	r0, #0
   2087c:	cmn	r7, #1
   20880:	str	r0, [fp, #-56]	; 0xffffffc8
   20884:	bne	2089c <__assert_fail@plt+0xe530>
   20888:	mov	r0, lr
   2088c:	bl	12174 <strlen@plt>
   20890:	ldr	lr, [fp, #-80]	; 0xffffffb0
   20894:	ldr	ip, [fp, #-84]	; 0xffffffac
   20898:	mov	r7, r0
   2089c:	cmp	r5, r7
   208a0:	bls	208f0 <__assert_fail@plt+0xe584>
   208a4:	mov	r0, #0
   208a8:	mov	r5, r6
   208ac:	str	r0, [fp, #-48]	; 0xffffffd0
   208b0:	ldrb	r6, [lr, sl]
   208b4:	cmp	r6, #126	; 0x7e
   208b8:	bls	20940 <__assert_fail@plt+0xe5d4>
   208bc:	b	20e9c <__assert_fail@plt+0xeb30>
   208c0:	mov	r0, #0
   208c4:	str	r0, [fp, #-56]	; 0xffffffc8
   208c8:	mov	r0, #0
   208cc:	str	r0, [fp, #-48]	; 0xffffffd0
   208d0:	ldrb	r6, [lr, sl]
   208d4:	cmp	r6, #126	; 0x7e
   208d8:	bls	20940 <__assert_fail@plt+0xe5d4>
   208dc:	b	20e9c <__assert_fail@plt+0xeb30>
   208e0:	mov	r0, #0
   208e4:	str	r0, [fp, #-56]	; 0xffffffc8
   208e8:	cmp	r5, r7
   208ec:	bhi	208a4 <__assert_fail@plt+0xe538>
   208f0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   208f4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   208f8:	add	r0, lr, sl
   208fc:	bl	1215c <bcmp@plt>
   20900:	ldr	r2, [sp, #92]	; 0x5c
   20904:	cmp	r0, #0
   20908:	mov	r1, r0
   2090c:	mov	r5, r6
   20910:	movwne	r1, #1
   20914:	orr	r1, r1, r2
   20918:	tst	r1, #1
   2091c:	beq	215b4 <__assert_fail@plt+0xf248>
   20920:	ldr	ip, [fp, #-84]	; 0xffffffac
   20924:	ldr	lr, [fp, #-80]	; 0xffffffb0
   20928:	clz	r0, r0
   2092c:	lsr	r0, r0, #5
   20930:	str	r0, [fp, #-48]	; 0xffffffd0
   20934:	ldrb	r6, [lr, sl]
   20938:	cmp	r6, #126	; 0x7e
   2093c:	bhi	20e9c <__assert_fail@plt+0xeb30>
   20940:	add	r3, pc, #16
   20944:	mov	r8, #1
   20948:	mov	r2, #110	; 0x6e
   2094c:	mov	r0, #97	; 0x61
   20950:	mov	r1, #0
   20954:	ldr	pc, [r3, r6, lsl #2]
   20958:	andeq	r0, r2, r4, asr ip
   2095c:	muleq	r2, ip, lr
   20960:	muleq	r2, ip, lr
   20964:	muleq	r2, ip, lr
   20968:	muleq	r2, ip, lr
   2096c:	muleq	r2, ip, lr
   20970:	muleq	r2, ip, lr
   20974:	andeq	r0, r2, r0, asr pc
   20978:	andeq	r0, r2, r4, lsr ip
   2097c:	andeq	r0, r2, ip, lsr #24
   20980:	andeq	r0, r2, r0, asr #24
   20984:	andeq	r0, r2, r0, ror sp
   20988:	andeq	r0, r2, r4, lsr #24
   2098c:	andeq	r0, r2, ip, lsr ip
   20990:	muleq	r2, ip, lr
   20994:	muleq	r2, ip, lr
   20998:	muleq	r2, ip, lr
   2099c:	muleq	r2, ip, lr
   209a0:	muleq	r2, ip, lr
   209a4:	muleq	r2, ip, lr
   209a8:	muleq	r2, ip, lr
   209ac:	muleq	r2, ip, lr
   209b0:	muleq	r2, ip, lr
   209b4:	muleq	r2, ip, lr
   209b8:	muleq	r2, ip, lr
   209bc:	muleq	r2, ip, lr
   209c0:	muleq	r2, ip, lr
   209c4:	muleq	r2, ip, lr
   209c8:	muleq	r2, ip, lr
   209cc:	muleq	r2, ip, lr
   209d0:	muleq	r2, ip, lr
   209d4:	muleq	r2, ip, lr
   209d8:	andeq	r0, r2, r8, asr #23
   209dc:	andeq	r0, r2, ip, asr #23
   209e0:	andeq	r0, r2, ip, asr #23
   209e4:			; <UNDEFINED> instruction: 0x00020bbc
   209e8:	andeq	r0, r2, ip, asr #23
   209ec:	andeq	r0, r2, r4, asr fp
   209f0:	andeq	r0, r2, ip, asr #23
   209f4:	andeq	r0, r2, r8, ror sp
   209f8:	andeq	r0, r2, ip, asr #23
   209fc:	andeq	r0, r2, ip, asr #23
   20a00:	andeq	r0, r2, ip, asr #23
   20a04:	andeq	r0, r2, r4, asr fp
   20a08:	andeq	r0, r2, r4, asr fp
   20a0c:	andeq	r0, r2, r4, asr fp
   20a10:	andeq	r0, r2, r4, asr fp
   20a14:	andeq	r0, r2, r4, asr fp
   20a18:	andeq	r0, r2, r4, asr fp
   20a1c:	andeq	r0, r2, r4, asr fp
   20a20:	andeq	r0, r2, r4, asr fp
   20a24:	andeq	r0, r2, r4, asr fp
   20a28:	andeq	r0, r2, r4, asr fp
   20a2c:	andeq	r0, r2, r4, asr fp
   20a30:	andeq	r0, r2, r4, asr fp
   20a34:	andeq	r0, r2, r4, asr fp
   20a38:	andeq	r0, r2, r4, asr fp
   20a3c:	andeq	r0, r2, r4, asr fp
   20a40:	andeq	r0, r2, r4, asr fp
   20a44:	andeq	r0, r2, ip, asr #23
   20a48:	andeq	r0, r2, ip, asr #23
   20a4c:	andeq	r0, r2, ip, asr #23
   20a50:	andeq	r0, r2, ip, asr #23
   20a54:	andeq	r0, r2, ip, lsr sp
   20a58:	muleq	r2, ip, lr
   20a5c:	andeq	r0, r2, r4, asr fp
   20a60:	andeq	r0, r2, r4, asr fp
   20a64:	andeq	r0, r2, r4, asr fp
   20a68:	andeq	r0, r2, r4, asr fp
   20a6c:	andeq	r0, r2, r4, asr fp
   20a70:	andeq	r0, r2, r4, asr fp
   20a74:	andeq	r0, r2, r4, asr fp
   20a78:	andeq	r0, r2, r4, asr fp
   20a7c:	andeq	r0, r2, r4, asr fp
   20a80:	andeq	r0, r2, r4, asr fp
   20a84:	andeq	r0, r2, r4, asr fp
   20a88:	andeq	r0, r2, r4, asr fp
   20a8c:	andeq	r0, r2, r4, asr fp
   20a90:	andeq	r0, r2, r4, asr fp
   20a94:	andeq	r0, r2, r4, asr fp
   20a98:	andeq	r0, r2, r4, asr fp
   20a9c:	andeq	r0, r2, r4, asr fp
   20aa0:	andeq	r0, r2, r4, asr fp
   20aa4:	andeq	r0, r2, r4, asr fp
   20aa8:	andeq	r0, r2, r4, asr fp
   20aac:	andeq	r0, r2, r4, asr fp
   20ab0:	andeq	r0, r2, r4, asr fp
   20ab4:	andeq	r0, r2, r4, asr fp
   20ab8:	andeq	r0, r2, r4, asr fp
   20abc:	andeq	r0, r2, r4, asr fp
   20ac0:	andeq	r0, r2, r4, asr fp
   20ac4:	andeq	r0, r2, ip, asr #23
   20ac8:	andeq	r0, r2, r0, lsl #24
   20acc:	andeq	r0, r2, r4, asr fp
   20ad0:	andeq	r0, r2, ip, asr #23
   20ad4:	andeq	r0, r2, r4, asr fp
   20ad8:	andeq	r0, r2, ip, asr #23
   20adc:	andeq	r0, r2, r4, asr fp
   20ae0:	andeq	r0, r2, r4, asr fp
   20ae4:	andeq	r0, r2, r4, asr fp
   20ae8:	andeq	r0, r2, r4, asr fp
   20aec:	andeq	r0, r2, r4, asr fp
   20af0:	andeq	r0, r2, r4, asr fp
   20af4:	andeq	r0, r2, r4, asr fp
   20af8:	andeq	r0, r2, r4, asr fp
   20afc:	andeq	r0, r2, r4, asr fp
   20b00:	andeq	r0, r2, r4, asr fp
   20b04:	andeq	r0, r2, r4, asr fp
   20b08:	andeq	r0, r2, r4, asr fp
   20b0c:	andeq	r0, r2, r4, asr fp
   20b10:	andeq	r0, r2, r4, asr fp
   20b14:	andeq	r0, r2, r4, asr fp
   20b18:	andeq	r0, r2, r4, asr fp
   20b1c:	andeq	r0, r2, r4, asr fp
   20b20:	andeq	r0, r2, r4, asr fp
   20b24:	andeq	r0, r2, r4, asr fp
   20b28:	andeq	r0, r2, r4, asr fp
   20b2c:	andeq	r0, r2, r4, asr fp
   20b30:	andeq	r0, r2, r4, asr fp
   20b34:	andeq	r0, r2, r4, asr fp
   20b38:	andeq	r0, r2, r4, asr fp
   20b3c:	andeq	r0, r2, r4, asr fp
   20b40:	andeq	r0, r2, r4, asr fp
   20b44:	muleq	r2, r4, fp
   20b48:	andeq	r0, r2, ip, asr #23
   20b4c:	muleq	r2, r4, fp
   20b50:			; <UNDEFINED> instruction: 0x00020bbc
   20b54:	ldr	r0, [fp, #-68]	; 0xffffffbc
   20b58:	tst	r0, #1
   20b5c:	bne	20e14 <__assert_fail@plt+0xeaa8>
   20b60:	ldr	r1, [fp, #16]
   20b64:	ubfx	r0, r6, #5, #3
   20b68:	mov	r2, #1
   20b6c:	ldr	r0, [r1, r0, lsl #2]
   20b70:	and	r1, r6, #31
   20b74:	tst	r0, r2, lsl r1
   20b78:	beq	20e14 <__assert_fail@plt+0xeaa8>
   20b7c:	mov	r0, r6
   20b80:	mov	r1, r8
   20b84:	ldr	r2, [fp, #-76]	; 0xffffffb4
   20b88:	tst	r2, #1
   20b8c:	beq	20e34 <__assert_fail@plt+0xeac8>
   20b90:	b	21590 <__assert_fail@plt+0xf224>
   20b94:	cmp	r7, #1
   20b98:	beq	20bbc <__assert_fail@plt+0xe850>
   20b9c:	mov	r8, #0
   20ba0:	cmn	r7, #1
   20ba4:	bne	20e00 <__assert_fail@plt+0xea94>
   20ba8:	ldrb	r0, [lr, #1]
   20bac:	cmp	r0, #0
   20bb0:	beq	20bbc <__assert_fail@plt+0xe850>
   20bb4:	mvn	r7, #0
   20bb8:	b	20e00 <__assert_fail@plt+0xea94>
   20bbc:	mov	r8, #0
   20bc0:	cmp	sl, #0
   20bc4:	bne	20e00 <__assert_fail@plt+0xea94>
   20bc8:	mov	r1, #1
   20bcc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   20bd0:	cmp	r0, #2
   20bd4:	bne	20bec <__assert_fail@plt+0xe880>
   20bd8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   20bdc:	mov	r8, r1
   20be0:	tst	r0, #1
   20be4:	beq	20b54 <__assert_fail@plt+0xe7e8>
   20be8:	b	21590 <__assert_fail@plt+0xf224>
   20bec:	mov	r8, r1
   20bf0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   20bf4:	tst	r0, #1
   20bf8:	beq	20b60 <__assert_fail@plt+0xe7f4>
   20bfc:	b	20e14 <__assert_fail@plt+0xeaa8>
   20c00:	ldr	r0, [fp, #-64]	; 0xffffffc0
   20c04:	cmp	r0, #2
   20c08:	bne	20ec8 <__assert_fail@plt+0xeb5c>
   20c0c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   20c10:	tst	r0, #1
   20c14:	bne	21590 <__assert_fail@plt+0xf224>
   20c18:	mov	r0, #0
   20c1c:	str	r0, [fp, #-56]	; 0xffffffc8
   20c20:	b	20ee0 <__assert_fail@plt+0xeb74>
   20c24:	mov	r0, #102	; 0x66
   20c28:	b	20f50 <__assert_fail@plt+0xebe4>
   20c2c:	mov	r2, #116	; 0x74
   20c30:	b	20c40 <__assert_fail@plt+0xe8d4>
   20c34:	mov	r0, #98	; 0x62
   20c38:	b	20f50 <__assert_fail@plt+0xebe4>
   20c3c:	mov	r2, #114	; 0x72
   20c40:	ldr	r0, [sp, #64]	; 0x40
   20c44:	tst	r0, #1
   20c48:	mov	r0, r2
   20c4c:	bne	20f50 <__assert_fail@plt+0xebe4>
   20c50:	b	21590 <__assert_fail@plt+0xf224>
   20c54:	ldr	r0, [sp, #88]	; 0x58
   20c58:	tst	r0, #1
   20c5c:	beq	20f70 <__assert_fail@plt+0xec04>
   20c60:	ldr	r0, [fp, #-76]	; 0xffffffb4
   20c64:	tst	r0, #1
   20c68:	bne	216cc <__assert_fail@plt+0xf360>
   20c6c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   20c70:	ldr	r1, [fp, #-52]	; 0xffffffcc
   20c74:	subs	r0, r0, #2
   20c78:	movwne	r0, #1
   20c7c:	orr	r0, r0, r1
   20c80:	tst	r0, #1
   20c84:	bne	20cc0 <__assert_fail@plt+0xe954>
   20c88:	cmp	r9, r5
   20c8c:	movcc	r0, #39	; 0x27
   20c90:	strbcc	r0, [ip, r9]
   20c94:	add	r0, r9, #1
   20c98:	cmp	r0, r5
   20c9c:	movcc	r1, #36	; 0x24
   20ca0:	strbcc	r1, [ip, r0]
   20ca4:	add	r0, r9, #2
   20ca8:	add	r9, r9, #3
   20cac:	cmp	r0, r5
   20cb0:	movcc	r1, #39	; 0x27
   20cb4:	strbcc	r1, [ip, r0]
   20cb8:	mov	r0, #1
   20cbc:	str	r0, [fp, #-52]	; 0xffffffcc
   20cc0:	mov	r1, #1
   20cc4:	cmp	r9, r5
   20cc8:	mov	r8, #0
   20ccc:	mov	r6, #48	; 0x30
   20cd0:	str	r1, [fp, #-56]	; 0xffffffc8
   20cd4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   20cd8:	movcc	r0, #92	; 0x5c
   20cdc:	strbcc	r0, [ip, r9]
   20ce0:	add	r0, r9, #1
   20ce4:	cmp	r1, #2
   20ce8:	beq	2113c <__assert_fail@plt+0xedd0>
   20cec:	add	r1, sl, #1
   20cf0:	cmp	r1, r7
   20cf4:	bcs	2113c <__assert_fail@plt+0xedd0>
   20cf8:	ldrb	r1, [lr, r1]
   20cfc:	sub	r1, r1, #48	; 0x30
   20d00:	uxtb	r1, r1
   20d04:	cmp	r1, #9
   20d08:	bhi	2113c <__assert_fail@plt+0xedd0>
   20d0c:	cmp	r0, r5
   20d10:	movcc	r1, #48	; 0x30
   20d14:	strbcc	r1, [ip, r0]
   20d18:	add	r0, r9, #2
   20d1c:	add	r9, r9, #3
   20d20:	cmp	r0, r5
   20d24:	movcc	r1, #48	; 0x30
   20d28:	strbcc	r1, [ip, r0]
   20d2c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   20d30:	tst	r0, #1
   20d34:	beq	20b60 <__assert_fail@plt+0xe7f4>
   20d38:	b	20e14 <__assert_fail@plt+0xeaa8>
   20d3c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   20d40:	mov	r6, #63	; 0x3f
   20d44:	cmp	r0, #5
   20d48:	beq	21150 <__assert_fail@plt+0xede4>
   20d4c:	mov	r1, #0
   20d50:	cmp	r0, #2
   20d54:	str	r1, [fp, #-56]	; 0xffffffc8
   20d58:	bne	21218 <__assert_fail@plt+0xeeac>
   20d5c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   20d60:	mov	r8, #0
   20d64:	tst	r0, #1
   20d68:	beq	20b54 <__assert_fail@plt+0xe7e8>
   20d6c:	b	21590 <__assert_fail@plt+0xf224>
   20d70:	mov	r0, #118	; 0x76
   20d74:	b	20f50 <__assert_fail@plt+0xebe4>
   20d78:	mov	r0, #1
   20d7c:	mov	r6, #39	; 0x27
   20d80:	str	r0, [sp, #60]	; 0x3c
   20d84:	ldr	r0, [fp, #-64]	; 0xffffffc0
   20d88:	cmp	r0, #2
   20d8c:	bne	20f90 <__assert_fail@plt+0xec24>
   20d90:	ldr	r0, [fp, #-76]	; 0xffffffb4
   20d94:	tst	r0, #1
   20d98:	bne	21590 <__assert_fail@plt+0xf224>
   20d9c:	ldr	r2, [sp, #56]	; 0x38
   20da0:	clz	r1, r5
   20da4:	mov	r8, #1
   20da8:	lsr	r1, r1, #5
   20dac:	cmp	r2, #0
   20db0:	mov	r0, r2
   20db4:	movwne	r0, #1
   20db8:	orrs	r0, r0, r1
   20dbc:	moveq	r2, r5
   20dc0:	moveq	r5, r0
   20dc4:	cmp	r9, r5
   20dc8:	str	r2, [sp, #56]	; 0x38
   20dcc:	movcc	r0, #39	; 0x27
   20dd0:	strbcc	r0, [ip, r9]
   20dd4:	add	r0, r9, #1
   20dd8:	cmp	r0, r5
   20ddc:	movcc	r1, #92	; 0x5c
   20de0:	strbcc	r1, [ip, r0]
   20de4:	add	r0, r9, #2
   20de8:	add	r9, r9, #3
   20dec:	cmp	r0, r5
   20df0:	movcc	r1, #39	; 0x27
   20df4:	strbcc	r1, [ip, r0]
   20df8:	mov	r0, #0
   20dfc:	str	r0, [fp, #-52]	; 0xffffffcc
   20e00:	mov	r0, #0
   20e04:	str	r0, [fp, #-56]	; 0xffffffc8
   20e08:	ldr	r0, [fp, #-68]	; 0xffffffbc
   20e0c:	tst	r0, #1
   20e10:	beq	20b60 <__assert_fail@plt+0xe7f4>
   20e14:	ldr	r0, [fp, #-48]	; 0xffffffd0
   20e18:	mov	r1, r8
   20e1c:	cmp	r0, #0
   20e20:	mov	r0, r6
   20e24:	beq	20ee8 <__assert_fail@plt+0xeb7c>
   20e28:	ldr	r2, [fp, #-76]	; 0xffffffb4
   20e2c:	tst	r2, #1
   20e30:	bne	21590 <__assert_fail@plt+0xf224>
   20e34:	ldr	r2, [fp, #-64]	; 0xffffffc0
   20e38:	ldr	r3, [fp, #-52]	; 0xffffffcc
   20e3c:	subs	r2, r2, #2
   20e40:	movwne	r2, #1
   20e44:	orr	r2, r2, r3
   20e48:	tst	r2, #1
   20e4c:	bne	20e88 <__assert_fail@plt+0xeb1c>
   20e50:	cmp	r9, r5
   20e54:	movcc	r2, #39	; 0x27
   20e58:	strbcc	r2, [ip, r9]
   20e5c:	add	r2, r9, #1
   20e60:	cmp	r2, r5
   20e64:	movcc	r3, #36	; 0x24
   20e68:	strbcc	r3, [ip, r2]
   20e6c:	add	r2, r9, #2
   20e70:	add	r9, r9, #3
   20e74:	cmp	r2, r5
   20e78:	movcc	r3, #39	; 0x27
   20e7c:	strbcc	r3, [ip, r2]
   20e80:	mov	r2, #1
   20e84:	str	r2, [fp, #-52]	; 0xffffffcc
   20e88:	cmp	r9, r5
   20e8c:	movcc	r2, #92	; 0x5c
   20e90:	strbcc	r2, [ip, r9]
   20e94:	add	r9, r9, #1
   20e98:	b	20f30 <__assert_fail@plt+0xebc4>
   20e9c:	ldr	r0, [sp, #40]	; 0x28
   20ea0:	cmp	r0, #1
   20ea4:	bne	20fa4 <__assert_fail@plt+0xec38>
   20ea8:	bl	12144 <__ctype_b_loc@plt>
   20eac:	ldr	r0, [r0]
   20eb0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   20eb4:	mov	r1, #1
   20eb8:	add	r0, r0, r6, lsl #1
   20ebc:	ldrb	r0, [r0, #1]
   20ec0:	ubfx	r8, r0, #6, #1
   20ec4:	b	212fc <__assert_fail@plt+0xef90>
   20ec8:	ldr	r1, [sp, #48]	; 0x30
   20ecc:	mov	r0, #0
   20ed0:	str	r0, [fp, #-56]	; 0xffffffc8
   20ed4:	mov	r0, #92	; 0x5c
   20ed8:	cmp	r1, #0
   20edc:	beq	20f50 <__assert_fail@plt+0xebe4>
   20ee0:	mov	r6, #92	; 0x5c
   20ee4:	mov	r8, #0
   20ee8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   20eec:	cmp	r0, #0
   20ef0:	bne	20f28 <__assert_fail@plt+0xebbc>
   20ef4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   20ef8:	tst	r0, #1
   20efc:	beq	20f28 <__assert_fail@plt+0xebbc>
   20f00:	cmp	r9, r5
   20f04:	movcc	r0, #39	; 0x27
   20f08:	strbcc	r0, [ip, r9]
   20f0c:	add	r0, r9, #1
   20f10:	add	r9, r9, #2
   20f14:	cmp	r0, r5
   20f18:	movcc	r1, #39	; 0x27
   20f1c:	strbcc	r1, [ip, r0]
   20f20:	mov	r0, #0
   20f24:	str	r0, [fp, #-52]	; 0xffffffcc
   20f28:	mov	r1, r8
   20f2c:	mov	r0, r6
   20f30:	cmp	r9, r5
   20f34:	and	r4, r4, r1
   20f38:	strbcc	r0, [ip, r9]
   20f3c:	add	r9, r9, #1
   20f40:	add	sl, sl, #1
   20f44:	cmn	r7, #1
   20f48:	bne	20840 <__assert_fail@plt+0xe4d4>
   20f4c:	b	2084c <__assert_fail@plt+0xe4e0>
   20f50:	mov	r1, #0
   20f54:	mov	r8, #0
   20f58:	str	r1, [fp, #-56]	; 0xffffffc8
   20f5c:	ldr	r1, [sp, #88]	; 0x58
   20f60:	tst	r1, #1
   20f64:	mov	r1, #0
   20f68:	beq	20b54 <__assert_fail@plt+0xe7e8>
   20f6c:	b	20e28 <__assert_fail@plt+0xeabc>
   20f70:	ldr	r0, [sp, #36]	; 0x24
   20f74:	mov	r6, #0
   20f78:	mov	r8, #0
   20f7c:	cmp	r0, #0
   20f80:	mov	r0, #0
   20f84:	str	r0, [fp, #-56]	; 0xffffffc8
   20f88:	bne	20f40 <__assert_fail@plt+0xebd4>
   20f8c:	b	20b54 <__assert_fail@plt+0xe7e8>
   20f90:	mov	r8, #1
   20f94:	ldr	r0, [fp, #-68]	; 0xffffffbc
   20f98:	tst	r0, #1
   20f9c:	beq	20b60 <__assert_fail@plt+0xe7f4>
   20fa0:	b	20e14 <__assert_fail@plt+0xeaa8>
   20fa4:	mov	r0, #0
   20fa8:	cmn	r7, #1
   20fac:	str	r0, [fp, #-36]	; 0xffffffdc
   20fb0:	str	r0, [fp, #-40]	; 0xffffffd8
   20fb4:	bne	20fc8 <__assert_fail@plt+0xec5c>
   20fb8:	mov	r0, lr
   20fbc:	bl	12174 <strlen@plt>
   20fc0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   20fc4:	mov	r7, r0
   20fc8:	ldr	r0, [sp, #44]	; 0x2c
   20fcc:	str	r4, [sp, #84]	; 0x54
   20fd0:	str	r5, [sp, #28]
   20fd4:	cmp	r0, #0
   20fd8:	beq	2122c <__assert_fail@plt+0xeec0>
   20fdc:	ldr	r0, [sp, #80]	; 0x50
   20fe0:	mov	r8, #1
   20fe4:	mov	r5, #0
   20fe8:	add	r0, r0, sl
   20fec:	str	r0, [sp, #24]
   20ff0:	sub	r0, fp, #40	; 0x28
   20ff4:	mov	r3, r0
   20ff8:	b	21034 <__assert_fail@plt+0xecc8>
   20ffc:	ldr	r5, [sp, #68]	; 0x44
   21000:	add	r5, r0, r5
   21004:	ldr	r0, [fp, #-44]	; 0xffffffd4
   21008:	bl	1200c <iswprint@plt>
   2100c:	cmp	r0, #0
   21010:	sub	r4, fp, #40	; 0x28
   21014:	movwne	r0, #1
   21018:	and	r8, r8, r0
   2101c:	mov	r0, r4
   21020:	bl	11f1c <mbsinit@plt>
   21024:	ldr	lr, [fp, #-80]	; 0xffffffb0
   21028:	mov	r3, r4
   2102c:	cmp	r0, #0
   21030:	bne	212f0 <__assert_fail@plt+0xef84>
   21034:	str	r5, [sp, #68]	; 0x44
   21038:	add	r5, r5, sl
   2103c:	sub	r0, fp, #44	; 0x2c
   21040:	add	r1, lr, r5
   21044:	sub	r2, r7, r5
   21048:	bl	25734 <__assert_fail@plt+0x133c8>
   2104c:	cmn	r0, #2
   21050:	beq	212b0 <__assert_fail@plt+0xef44>
   21054:	ldr	ip, [fp, #-84]	; 0xffffffac
   21058:	cmn	r0, #1
   2105c:	beq	212a4 <__assert_fail@plt+0xef38>
   21060:	cmp	r0, #0
   21064:	beq	212a8 <__assert_fail@plt+0xef3c>
   21068:	cmp	r0, #2
   2106c:	bcc	20ffc <__assert_fail@plt+0xec90>
   21070:	ldr	r1, [sp, #68]	; 0x44
   21074:	ldr	r2, [sp, #24]
   21078:	add	r1, r2, r1
   2107c:	sub	r2, r0, #1
   21080:	ldrb	r3, [r1]
   21084:	sub	r3, r3, #91	; 0x5b
   21088:	cmp	r3, #33	; 0x21
   2108c:	bls	210ac <__assert_fail@plt+0xed40>
   21090:	add	r1, r1, #1
   21094:	subs	r2, r2, #1
   21098:	beq	20ffc <__assert_fail@plt+0xec90>
   2109c:	ldrb	r3, [r1]
   210a0:	sub	r3, r3, #91	; 0x5b
   210a4:	cmp	r3, #33	; 0x21
   210a8:	bhi	21090 <__assert_fail@plt+0xed24>
   210ac:	add	r5, pc, #0
   210b0:	ldr	pc, [r5, r3, lsl #2]
   210b4:	andeq	r1, r2, r8, asr #11
   210b8:	andeq	r1, r2, r8, asr #11
   210bc:	muleq	r2, r0, r0
   210c0:	andeq	r1, r2, r8, asr #11
   210c4:	muleq	r2, r0, r0
   210c8:	andeq	r1, r2, r8, asr #11
   210cc:	muleq	r2, r0, r0
   210d0:	muleq	r2, r0, r0
   210d4:	muleq	r2, r0, r0
   210d8:	muleq	r2, r0, r0
   210dc:	muleq	r2, r0, r0
   210e0:	muleq	r2, r0, r0
   210e4:	muleq	r2, r0, r0
   210e8:	muleq	r2, r0, r0
   210ec:	muleq	r2, r0, r0
   210f0:	muleq	r2, r0, r0
   210f4:	muleq	r2, r0, r0
   210f8:	muleq	r2, r0, r0
   210fc:	muleq	r2, r0, r0
   21100:	muleq	r2, r0, r0
   21104:	muleq	r2, r0, r0
   21108:	muleq	r2, r0, r0
   2110c:	muleq	r2, r0, r0
   21110:	muleq	r2, r0, r0
   21114:	muleq	r2, r0, r0
   21118:	muleq	r2, r0, r0
   2111c:	muleq	r2, r0, r0
   21120:	muleq	r2, r0, r0
   21124:	muleq	r2, r0, r0
   21128:	muleq	r2, r0, r0
   2112c:	muleq	r2, r0, r0
   21130:	muleq	r2, r0, r0
   21134:	muleq	r2, r0, r0
   21138:	andeq	r1, r2, r8, asr #11
   2113c:	mov	r9, r0
   21140:	ldr	r0, [fp, #-68]	; 0xffffffbc
   21144:	tst	r0, #1
   21148:	beq	20b60 <__assert_fail@plt+0xe7f4>
   2114c:	b	20e14 <__assert_fail@plt+0xeaa8>
   21150:	mov	r0, #0
   21154:	str	r0, [fp, #-56]	; 0xffffffc8
   21158:	ldr	r0, [sp, #32]
   2115c:	cmp	r0, #0
   21160:	beq	21218 <__assert_fail@plt+0xeeac>
   21164:	add	r0, sl, #2
   21168:	mov	r1, r7
   2116c:	cmp	r0, r7
   21170:	bcs	21218 <__assert_fail@plt+0xeeac>
   21174:	add	r1, sl, lr
   21178:	ldrb	r1, [r1, #1]
   2117c:	cmp	r1, #63	; 0x3f
   21180:	bne	21218 <__assert_fail@plt+0xeeac>
   21184:	ldrb	r8, [lr, r0]
   21188:	sub	r2, r8, #33	; 0x21
   2118c:	cmp	r2, #29
   21190:	bhi	21218 <__assert_fail@plt+0xeeac>
   21194:	mov	r1, r4
   21198:	movw	r4, #20929	; 0x51c1
   2119c:	mov	r3, #1
   211a0:	movt	r4, #14336	; 0x3800
   211a4:	tst	r4, r3, lsl r2
   211a8:	beq	214d4 <__assert_fail@plt+0xf168>
   211ac:	ldr	r2, [fp, #-76]	; 0xffffffb4
   211b0:	tst	r2, #1
   211b4:	bne	21590 <__assert_fail@plt+0xf224>
   211b8:	cmp	r9, r5
   211bc:	mov	r6, r8
   211c0:	mov	r4, r1
   211c4:	mov	sl, r0
   211c8:	mov	r8, #0
   211cc:	movcc	r2, #63	; 0x3f
   211d0:	strbcc	r2, [ip, r9]
   211d4:	add	r2, r9, #1
   211d8:	cmp	r2, r5
   211dc:	movcc	r3, #34	; 0x22
   211e0:	strbcc	r3, [ip, r2]
   211e4:	add	r2, r9, #2
   211e8:	cmp	r2, r5
   211ec:	movcc	r3, #34	; 0x22
   211f0:	strbcc	r3, [ip, r2]
   211f4:	add	r2, r9, #3
   211f8:	add	r9, r9, #4
   211fc:	cmp	r2, r5
   21200:	movcc	r3, #63	; 0x3f
   21204:	strbcc	r3, [ip, r2]
   21208:	ldr	r0, [fp, #-68]	; 0xffffffbc
   2120c:	tst	r0, #1
   21210:	beq	20b60 <__assert_fail@plt+0xe7f4>
   21214:	b	20e14 <__assert_fail@plt+0xeaa8>
   21218:	mov	r8, #0
   2121c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   21220:	tst	r0, #1
   21224:	beq	20b60 <__assert_fail@plt+0xe7f4>
   21228:	b	20e14 <__assert_fail@plt+0xeaa8>
   2122c:	mov	r8, #1
   21230:	mov	r5, #0
   21234:	sub	r4, fp, #40	; 0x28
   21238:	str	r5, [sp, #68]	; 0x44
   2123c:	add	r5, r5, sl
   21240:	sub	r0, fp, #44	; 0x2c
   21244:	mov	r3, r4
   21248:	add	r1, lr, r5
   2124c:	sub	r2, r7, r5
   21250:	bl	25734 <__assert_fail@plt+0x133c8>
   21254:	cmn	r0, #2
   21258:	beq	212b0 <__assert_fail@plt+0xef44>
   2125c:	cmn	r0, #1
   21260:	beq	212a4 <__assert_fail@plt+0xef38>
   21264:	ldr	r5, [sp, #68]	; 0x44
   21268:	cmp	r0, #0
   2126c:	beq	212ec <__assert_fail@plt+0xef80>
   21270:	add	r5, r0, r5
   21274:	ldr	r0, [fp, #-44]	; 0xffffffd4
   21278:	bl	1200c <iswprint@plt>
   2127c:	cmp	r0, #0
   21280:	sub	r4, fp, #40	; 0x28
   21284:	movwne	r0, #1
   21288:	and	r8, r8, r0
   2128c:	mov	r0, r4
   21290:	bl	11f1c <mbsinit@plt>
   21294:	ldr	lr, [fp, #-80]	; 0xffffffb0
   21298:	cmp	r0, #0
   2129c:	beq	21238 <__assert_fail@plt+0xeecc>
   212a0:	b	212f0 <__assert_fail@plt+0xef84>
   212a4:	mov	r8, #0
   212a8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   212ac:	b	212e4 <__assert_fail@plt+0xef78>
   212b0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   212b4:	mov	r8, #0
   212b8:	cmp	r5, r7
   212bc:	bcs	212e4 <__assert_fail@plt+0xef78>
   212c0:	ldrb	r0, [lr, r5]
   212c4:	cmp	r0, #0
   212c8:	beq	212e4 <__assert_fail@plt+0xef78>
   212cc:	ldr	r0, [sp, #68]	; 0x44
   212d0:	add	r0, r0, #1
   212d4:	add	r5, r0, sl
   212d8:	str	r0, [sp, #68]	; 0x44
   212dc:	cmp	r5, r7
   212e0:	bcc	212c0 <__assert_fail@plt+0xef54>
   212e4:	ldr	r5, [sp, #68]	; 0x44
   212e8:	b	212f0 <__assert_fail@plt+0xef84>
   212ec:	ldr	lr, [fp, #-80]	; 0xffffffb0
   212f0:	mov	r1, r5
   212f4:	ldr	r5, [sp, #28]
   212f8:	ldr	r4, [sp, #84]	; 0x54
   212fc:	ldr	r0, [sp, #52]	; 0x34
   21300:	ldr	ip, [fp, #-84]	; 0xffffffac
   21304:	cmp	r1, #1
   21308:	orr	r2, r8, r0
   2130c:	mov	r0, r1
   21310:	bhi	2131c <__assert_fail@plt+0xefb0>
   21314:	tst	r2, #1
   21318:	bne	20b54 <__assert_fail@plt+0xe7e8>
   2131c:	add	r0, r0, sl
   21320:	str	r2, [sp, #84]	; 0x54
   21324:	str	r0, [fp, #-56]	; 0xffffffc8
   21328:	mov	r0, #0
   2132c:	tst	r2, #1
   21330:	bne	21410 <__assert_fail@plt+0xf0a4>
   21334:	ldr	r1, [fp, #-76]	; 0xffffffb4
   21338:	tst	r1, #1
   2133c:	bne	21590 <__assert_fail@plt+0xf224>
   21340:	ldr	r1, [fp, #-64]	; 0xffffffc0
   21344:	ldr	r0, [fp, #-52]	; 0xffffffcc
   21348:	subs	r2, r1, #2
   2134c:	movwne	r2, #1
   21350:	orr	r2, r2, r0
   21354:	tst	r2, #1
   21358:	bne	21394 <__assert_fail@plt+0xf028>
   2135c:	cmp	r9, r5
   21360:	add	r2, r9, #1
   21364:	mov	r0, #1
   21368:	movcc	r1, #39	; 0x27
   2136c:	str	r0, [fp, #-52]	; 0xffffffcc
   21370:	strbcc	r1, [ip, r9]
   21374:	cmp	r2, r5
   21378:	movcc	r1, #36	; 0x24
   2137c:	strbcc	r1, [ip, r2]
   21380:	add	r2, r9, #2
   21384:	add	r9, r9, #3
   21388:	cmp	r2, r5
   2138c:	movcc	r1, #39	; 0x27
   21390:	strbcc	r1, [ip, r2]
   21394:	cmp	r9, r5
   21398:	add	r2, r9, #1
   2139c:	movcc	r1, #92	; 0x5c
   213a0:	strbcc	r1, [ip, r9]
   213a4:	cmp	r2, r5
   213a8:	bcs	213bc <__assert_fail@plt+0xf050>
   213ac:	uxtb	r3, r6
   213b0:	mov	r1, #48	; 0x30
   213b4:	orr	r3, r1, r3, lsr #6
   213b8:	strb	r3, [ip, r2]
   213bc:	add	r2, r9, #2
   213c0:	add	r9, r9, #3
   213c4:	cmp	r2, r5
   213c8:	lsrcc	r3, r6, #3
   213cc:	movcc	r1, #6
   213d0:	bficc	r3, r1, #3, #29
   213d4:	mov	r1, #6
   213d8:	bfi	r6, r1, #3, #29
   213dc:	strbcc	r3, [ip, r2]
   213e0:	mov	r2, #1
   213e4:	b	21444 <__assert_fail@plt+0xf0d8>
   213e8:	ldr	r1, [sp, #80]	; 0x50
   213ec:	cmp	r9, r2
   213f0:	mov	r5, r2
   213f4:	ldr	r2, [sp, #84]	; 0x54
   213f8:	strbcc	r6, [ip, r9]
   213fc:	add	r9, r9, #1
   21400:	ldrb	r6, [r1, sl]
   21404:	mov	sl, r3
   21408:	tst	r2, #1
   2140c:	beq	21334 <__assert_fail@plt+0xefc8>
   21410:	ldr	r1, [fp, #-48]	; 0xffffffd0
   21414:	tst	r1, #1
   21418:	beq	21438 <__assert_fail@plt+0xf0cc>
   2141c:	cmp	r9, r5
   21420:	mov	r2, r0
   21424:	movcc	r1, #92	; 0x5c
   21428:	strbcc	r1, [ip, r9]
   2142c:	add	r9, r9, #1
   21430:	mov	r1, #0
   21434:	b	21440 <__assert_fail@plt+0xf0d4>
   21438:	mov	r1, #0
   2143c:	mov	r2, r0
   21440:	str	r1, [fp, #-48]	; 0xffffffd0
   21444:	mov	r0, r2
   21448:	and	r1, r2, #1
   2144c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   21450:	add	r3, sl, #1
   21454:	cmp	r2, r3
   21458:	bls	214b8 <__assert_fail@plt+0xf14c>
   2145c:	mov	r2, r5
   21460:	ldr	r5, [fp, #-52]	; 0xffffffcc
   21464:	cmp	r1, #0
   21468:	movwne	r1, #1
   2146c:	mvn	r5, r5
   21470:	orr	r5, r5, r1
   21474:	tst	r5, #1
   21478:	bne	213e8 <__assert_fail@plt+0xf07c>
   2147c:	cmp	r9, r2
   21480:	movcc	r5, r4
   21484:	movcc	r4, #39	; 0x27
   21488:	strbcc	r4, [ip, r9]
   2148c:	movcc	r4, r5
   21490:	add	r5, r9, #1
   21494:	add	r9, r9, #2
   21498:	cmp	r5, r2
   2149c:	movcc	r1, r4
   214a0:	movcc	r4, #39	; 0x27
   214a4:	strbcc	r4, [ip, r5]
   214a8:	movcc	r4, r1
   214ac:	mov	r1, #0
   214b0:	str	r1, [fp, #-52]	; 0xffffffcc
   214b4:	b	213e8 <__assert_fail@plt+0xf07c>
   214b8:	cmp	r1, #0
   214bc:	movwne	r1, #1
   214c0:	str	r1, [fp, #-56]	; 0xffffffc8
   214c4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   214c8:	cmp	r0, #0
   214cc:	beq	20ef4 <__assert_fail@plt+0xeb88>
   214d0:	b	20f28 <__assert_fail@plt+0xebbc>
   214d4:	mov	r8, #0
   214d8:	mov	r4, r1
   214dc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   214e0:	tst	r0, #1
   214e4:	beq	20b60 <__assert_fail@plt+0xe7f4>
   214e8:	b	20e14 <__assert_fail@plt+0xeaa8>
   214ec:	mov	r7, sl
   214f0:	b	214f8 <__assert_fail@plt+0xf18c>
   214f4:	mvn	r7, #0
   214f8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   214fc:	ldr	r3, [fp, #-76]	; 0xffffffb4
   21500:	ldr	r2, [sp, #88]	; 0x58
   21504:	eor	r0, r1, #2
   21508:	orr	r0, r0, r9
   2150c:	clz	r0, r0
   21510:	lsr	r0, r0, #5
   21514:	tst	r3, r0
   21518:	bne	21590 <__assert_fail@plt+0xf224>
   2151c:	subs	r0, r1, #2
   21520:	movwne	r0, #1
   21524:	orr	r0, r3, r0
   21528:	tst	r0, #1
   2152c:	ldreq	r0, [sp, #60]	; 0x3c
   21530:	eoreq	r0, r0, #1
   21534:	tsteq	r0, #1
   21538:	bne	2166c <__assert_fail@plt+0xf300>
   2153c:	tst	r4, #1
   21540:	bne	21630 <__assert_fail@plt+0xf2c4>
   21544:	ldr	r6, [sp, #56]	; 0x38
   21548:	mov	r8, #0
   2154c:	cmp	r6, #0
   21550:	beq	21668 <__assert_fail@plt+0xf2fc>
   21554:	mov	r1, #0
   21558:	mov	r4, #2
   2155c:	cmp	r5, #0
   21560:	mov	r0, r2
   21564:	mov	r3, #0
   21568:	str	r1, [sp, #84]	; 0x54
   2156c:	beq	203b4 <__assert_fail@plt+0xe048>
   21570:	b	2166c <__assert_fail@plt+0xf300>
   21574:	movw	r0, #34147	; 0x8563
   21578:	movt	r0, #2
   2157c:	str	r0, [sp, #76]	; 0x4c
   21580:	mov	r9, #0
   21584:	tst	r8, #1
   21588:	beq	2064c <__assert_fail@plt+0xe2e0>
   2158c:	b	2078c <__assert_fail@plt+0xe420>
   21590:	ldr	r1, [sp, #88]	; 0x58
   21594:	mov	r0, #2
   21598:	tst	r1, #1
   2159c:	movwne	r0, #4
   215a0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   215a4:	ldr	r1, [fp, #12]
   215a8:	cmp	r2, #2
   215ac:	moveq	r2, r0
   215b0:	b	215e8 <__assert_fail@plt+0xf27c>
   215b4:	ldr	ip, [fp, #-84]	; 0xffffffac
   215b8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   215bc:	ldr	r1, [fp, #12]
   215c0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   215c4:	b	215e8 <__assert_fail@plt+0xf27c>
   215c8:	ldr	r1, [sp, #88]	; 0x58
   215cc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   215d0:	ldr	r5, [sp, #28]
   215d4:	mov	r0, #2
   215d8:	tst	r1, #1
   215dc:	ldr	r1, [fp, #12]
   215e0:	movwne	r0, #4
   215e4:	mov	r2, r0
   215e8:	mov	r0, #0
   215ec:	bic	r1, r1, #2
   215f0:	str	r2, [sp]
   215f4:	mov	r2, lr
   215f8:	str	r0, [sp, #8]
   215fc:	ldr	r0, [sp, #72]	; 0x48
   21600:	str	r1, [sp, #4]
   21604:	mov	r1, r5
   21608:	str	r0, [sp, #12]
   2160c:	ldr	r0, [sp, #76]	; 0x4c
   21610:	str	r0, [sp, #16]
   21614:	mov	r0, ip
   21618:	mov	r3, r7
   2161c:	bl	20328 <__assert_fail@plt+0xdfbc>
   21620:	mov	r9, r0
   21624:	mov	r0, r9
   21628:	sub	sp, fp, #28
   2162c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21630:	mov	r0, #5
   21634:	ldr	r1, [sp, #56]	; 0x38
   21638:	ldr	r2, [fp, #-80]	; 0xffffffb0
   2163c:	str	r0, [sp]
   21640:	ldr	r0, [fp, #12]
   21644:	str	r0, [sp, #4]
   21648:	ldr	r0, [fp, #16]
   2164c:	str	r0, [sp, #8]
   21650:	ldr	r0, [sp, #72]	; 0x48
   21654:	str	r0, [sp, #12]
   21658:	ldr	r0, [sp, #76]	; 0x4c
   2165c:	str	r0, [sp, #16]
   21660:	ldr	r0, [fp, #-84]	; 0xffffffac
   21664:	b	21618 <__assert_fail@plt+0xf2ac>
   21668:	mov	r3, #0
   2166c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   21670:	cmp	r1, #0
   21674:	beq	216b0 <__assert_fail@plt+0xf344>
   21678:	ldr	r2, [fp, #-84]	; 0xffffffac
   2167c:	tst	r3, #1
   21680:	bne	216b4 <__assert_fail@plt+0xf348>
   21684:	ldrb	r0, [r1]
   21688:	cmp	r0, #0
   2168c:	beq	216b4 <__assert_fail@plt+0xf348>
   21690:	add	r1, r1, #1
   21694:	cmp	r9, r5
   21698:	strbcc	r0, [r2, r9]
   2169c:	add	r9, r9, #1
   216a0:	ldrb	r0, [r1], #1
   216a4:	cmp	r0, #0
   216a8:	bne	21694 <__assert_fail@plt+0xf328>
   216ac:	b	216b4 <__assert_fail@plt+0xf348>
   216b0:	ldr	r2, [fp, #-84]	; 0xffffffac
   216b4:	cmp	r9, r5
   216b8:	movcc	r0, #0
   216bc:	strbcc	r0, [r2, r9]
   216c0:	mov	r0, r9
   216c4:	sub	sp, fp, #28
   216c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   216cc:	mov	r0, #4
   216d0:	b	215a0 <__assert_fail@plt+0xf234>
   216d4:	bl	12348 <abort@plt>
   216d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   216dc:	add	fp, sp, #28
   216e0:	sub	sp, sp, #28
   216e4:	movw	r5, #39120	; 0x98d0
   216e8:	cmp	r2, #0
   216ec:	mov	r4, r1
   216f0:	mov	r7, r0
   216f4:	str	r0, [sp, #20]
   216f8:	movt	r5, #3
   216fc:	movne	r5, r2
   21700:	bl	12198 <__errno_location@plt>
   21704:	mov	sl, r0
   21708:	ldr	r2, [r5, #40]	; 0x28
   2170c:	ldr	r3, [r5, #44]	; 0x2c
   21710:	ldm	r5, {r0, r1}
   21714:	orr	r8, r1, #1
   21718:	add	r9, r5, #8
   2171c:	mov	r1, #0
   21720:	ldr	r6, [sl]
   21724:	stm	sp, {r0, r8, r9}
   21728:	mov	r0, #0
   2172c:	str	r2, [sp, #12]
   21730:	str	r3, [sp, #16]
   21734:	mov	r2, r7
   21738:	mov	r3, r4
   2173c:	str	r6, [sp, #24]
   21740:	mov	r6, r4
   21744:	bl	20328 <__assert_fail@plt+0xdfbc>
   21748:	add	r7, r0, #1
   2174c:	mov	r0, r7
   21750:	bl	23944 <__assert_fail@plt+0x115d8>
   21754:	mov	r4, r0
   21758:	ldr	r0, [r5]
   2175c:	ldr	r2, [r5, #44]	; 0x2c
   21760:	ldr	r1, [r5, #40]	; 0x28
   21764:	mov	r3, r6
   21768:	stm	sp, {r0, r8, r9}
   2176c:	str	r2, [sp, #16]
   21770:	ldr	r2, [sp, #20]
   21774:	str	r1, [sp, #12]
   21778:	mov	r0, r4
   2177c:	mov	r1, r7
   21780:	bl	20328 <__assert_fail@plt+0xdfbc>
   21784:	ldr	r0, [sp, #24]
   21788:	str	r0, [sl]
   2178c:	mov	r0, r4
   21790:	sub	sp, fp, #28
   21794:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21798:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2179c:	add	fp, sp, #28
   217a0:	sub	sp, sp, #36	; 0x24
   217a4:	movw	r8, #39120	; 0x98d0
   217a8:	cmp	r3, #0
   217ac:	mov	r4, r2
   217b0:	str	r2, [sp, #24]
   217b4:	mov	r5, r1
   217b8:	mov	r6, r0
   217bc:	str	r0, [sp, #20]
   217c0:	movt	r8, #3
   217c4:	movne	r8, r3
   217c8:	bl	12198 <__errno_location@plt>
   217cc:	str	r0, [sp, #28]
   217d0:	ldr	r1, [r8, #40]	; 0x28
   217d4:	ldr	r2, [r8, #44]	; 0x2c
   217d8:	ldr	r7, [r0]
   217dc:	cmp	r4, #0
   217e0:	add	sl, r8, #8
   217e4:	mov	r0, #0
   217e8:	ldm	r8, {r3, r9}
   217ec:	orreq	r9, r9, #1
   217f0:	stm	sp, {r3, r9, sl}
   217f4:	str	r1, [sp, #12]
   217f8:	str	r2, [sp, #16]
   217fc:	mov	r1, #0
   21800:	mov	r2, r6
   21804:	mov	r3, r5
   21808:	str	r7, [sp, #32]
   2180c:	mov	r7, r5
   21810:	bl	20328 <__assert_fail@plt+0xdfbc>
   21814:	add	r4, r0, #1
   21818:	mov	r5, r0
   2181c:	mov	r0, r4
   21820:	bl	23944 <__assert_fail@plt+0x115d8>
   21824:	mov	r6, r0
   21828:	ldr	r0, [r8]
   2182c:	ldr	r2, [r8, #44]	; 0x2c
   21830:	ldr	r1, [r8, #40]	; 0x28
   21834:	mov	r3, r7
   21838:	stm	sp, {r0, r9, sl}
   2183c:	str	r2, [sp, #16]
   21840:	ldr	r2, [sp, #20]
   21844:	str	r1, [sp, #12]
   21848:	mov	r0, r6
   2184c:	mov	r1, r4
   21850:	bl	20328 <__assert_fail@plt+0xdfbc>
   21854:	ldr	r0, [sp, #24]
   21858:	ldr	r1, [sp, #32]
   2185c:	ldr	r2, [sp, #28]
   21860:	cmp	r0, #0
   21864:	str	r1, [r2]
   21868:	strne	r5, [r0]
   2186c:	mov	r0, r6
   21870:	sub	sp, fp, #28
   21874:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21878:	push	{r4, r5, r6, r7, fp, lr}
   2187c:	add	fp, sp, #16
   21880:	movw	r4, #37544	; 0x92a8
   21884:	movt	r4, #3
   21888:	ldrd	r6, [r4]
   2188c:	cmp	r7, #2
   21890:	blt	218bc <__assert_fail@plt+0xf550>
   21894:	add	r5, r6, #12
   21898:	mov	r7, #0
   2189c:	ldr	r0, [r5, r7, lsl #3]
   218a0:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   218a4:	ldr	r1, [r4, #4]
   218a8:	add	r2, r7, #2
   218ac:	add	r0, r7, #1
   218b0:	mov	r7, r0
   218b4:	cmp	r2, r1
   218b8:	blt	2189c <__assert_fail@plt+0xf530>
   218bc:	ldr	r0, [r6, #4]
   218c0:	movw	r5, #39168	; 0x9900
   218c4:	movt	r5, #3
   218c8:	cmp	r0, r5
   218cc:	beq	218e0 <__assert_fail@plt+0xf574>
   218d0:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   218d4:	mov	r0, #256	; 0x100
   218d8:	str	r0, [r4, #8]
   218dc:	str	r5, [r4, #12]
   218e0:	add	r5, r4, #8
   218e4:	cmp	r6, r5
   218e8:	beq	218f8 <__assert_fail@plt+0xf58c>
   218ec:	mov	r0, r6
   218f0:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   218f4:	str	r5, [r4]
   218f8:	mov	r0, #1
   218fc:	str	r0, [r4, #4]
   21900:	pop	{r4, r5, r6, r7, fp, pc}
   21904:	movw	r3, #39120	; 0x98d0
   21908:	mvn	r2, #0
   2190c:	movt	r3, #3
   21910:	b	21914 <__assert_fail@plt+0xf5a8>
   21914:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21918:	add	fp, sp, #28
   2191c:	sub	sp, sp, #44	; 0x2c
   21920:	mov	r7, r3
   21924:	str	r2, [sp, #36]	; 0x24
   21928:	str	r1, [sp, #32]
   2192c:	mov	r5, r0
   21930:	bl	12198 <__errno_location@plt>
   21934:	cmp	r5, #0
   21938:	bmi	21aa0 <__assert_fail@plt+0xf734>
   2193c:	cmn	r5, #-2147483647	; 0x80000001
   21940:	beq	21aa0 <__assert_fail@plt+0xf734>
   21944:	movw	r8, #37544	; 0x92a8
   21948:	mov	r4, r0
   2194c:	ldr	r0, [r0]
   21950:	movt	r8, #3
   21954:	str	r4, [sp, #28]
   21958:	ldr	r1, [r8, #4]
   2195c:	ldr	r6, [r8]
   21960:	str	r0, [sp, #24]
   21964:	cmp	r1, r5
   21968:	ble	21974 <__assert_fail@plt+0xf608>
   2196c:	mov	sl, r6
   21970:	b	219dc <__assert_fail@plt+0xf670>
   21974:	mov	r0, #8
   21978:	add	r9, r8, #8
   2197c:	str	r1, [fp, #-32]	; 0xffffffe0
   21980:	sub	r1, r5, r1
   21984:	mvn	r3, #-2147483648	; 0x80000000
   21988:	str	r0, [sp]
   2198c:	subs	r0, r6, r9
   21990:	add	r2, r1, #1
   21994:	sub	r1, fp, #32
   21998:	movne	r0, r6
   2199c:	bl	23b44 <__assert_fail@plt+0x117d8>
   219a0:	mov	sl, r0
   219a4:	cmp	r6, r9
   219a8:	str	r0, [r8]
   219ac:	bne	219b8 <__assert_fail@plt+0xf64c>
   219b0:	ldrd	r0, [r8, #8]
   219b4:	stm	sl, {r0, r1}
   219b8:	ldr	r1, [r8, #4]
   219bc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   219c0:	add	r0, sl, r1, lsl #3
   219c4:	sub	r1, r2, r1
   219c8:	lsl	r2, r1, #3
   219cc:	mov	r1, #0
   219d0:	bl	121bc <memset@plt>
   219d4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   219d8:	str	r0, [r8, #4]
   219dc:	mov	r9, sl
   219e0:	ldm	r7, {r0, r1}
   219e4:	orr	r8, r1, #1
   219e8:	add	r1, r7, #8
   219ec:	ldr	r2, [r7, #40]	; 0x28
   219f0:	ldr	r3, [r7, #44]	; 0x2c
   219f4:	ldr	r6, [r9, r5, lsl #3]!
   219f8:	str	r1, [sp, #20]
   219fc:	ldr	r4, [r9, #4]!
   21a00:	stm	sp, {r0, r8}
   21a04:	add	r0, sp, #8
   21a08:	stm	r0, {r1, r2, r3}
   21a0c:	ldr	r2, [sp, #32]
   21a10:	ldr	r3, [sp, #36]	; 0x24
   21a14:	mov	r1, r6
   21a18:	mov	r0, r4
   21a1c:	bl	20328 <__assert_fail@plt+0xdfbc>
   21a20:	cmp	r6, r0
   21a24:	bhi	21a88 <__assert_fail@plt+0xf71c>
   21a28:	add	r6, r0, #1
   21a2c:	movw	r0, #39168	; 0x9900
   21a30:	movt	r0, #3
   21a34:	str	r6, [sl, r5, lsl #3]
   21a38:	cmp	r4, r0
   21a3c:	beq	21a48 <__assert_fail@plt+0xf6dc>
   21a40:	mov	r0, r4
   21a44:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   21a48:	mov	r0, r6
   21a4c:	bl	23944 <__assert_fail@plt+0x115d8>
   21a50:	str	r0, [r9]
   21a54:	mov	r4, r0
   21a58:	add	r3, sp, #8
   21a5c:	ldr	r0, [r7]
   21a60:	ldr	r1, [r7, #40]	; 0x28
   21a64:	ldr	r2, [r7, #44]	; 0x2c
   21a68:	stm	sp, {r0, r8}
   21a6c:	ldr	r0, [sp, #20]
   21a70:	stm	r3, {r0, r1, r2}
   21a74:	ldr	r2, [sp, #32]
   21a78:	ldr	r3, [sp, #36]	; 0x24
   21a7c:	mov	r0, r4
   21a80:	mov	r1, r6
   21a84:	bl	20328 <__assert_fail@plt+0xdfbc>
   21a88:	ldr	r1, [sp, #24]
   21a8c:	ldr	r0, [sp, #28]
   21a90:	str	r1, [r0]
   21a94:	mov	r0, r4
   21a98:	sub	sp, fp, #28
   21a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21aa0:	bl	12348 <abort@plt>
   21aa4:	movw	r3, #39120	; 0x98d0
   21aa8:	movt	r3, #3
   21aac:	b	21914 <__assert_fail@plt+0xf5a8>
   21ab0:	movw	r3, #39120	; 0x98d0
   21ab4:	mov	r1, r0
   21ab8:	mov	r0, #0
   21abc:	mvn	r2, #0
   21ac0:	movt	r3, #3
   21ac4:	b	21914 <__assert_fail@plt+0xf5a8>
   21ac8:	movw	r3, #39120	; 0x98d0
   21acc:	mov	r2, r1
   21ad0:	mov	r1, r0
   21ad4:	mov	r0, #0
   21ad8:	movt	r3, #3
   21adc:	b	21914 <__assert_fail@plt+0xf5a8>
   21ae0:	push	{fp, lr}
   21ae4:	mov	fp, sp
   21ae8:	sub	sp, sp, #48	; 0x30
   21aec:	vmov.i32	q8, #0	; 0x00000000
   21af0:	mov	ip, #32
   21af4:	mov	r3, sp
   21af8:	mov	lr, r2
   21afc:	cmp	r1, #10
   21b00:	add	r2, r3, #16
   21b04:	vst1.64	{d16-d17}, [r3], ip
   21b08:	vst1.64	{d16-d17}, [r2]
   21b0c:	vst1.64	{d16-d17}, [r3]
   21b10:	beq	21b30 <__assert_fail@plt+0xf7c4>
   21b14:	str	r1, [sp]
   21b18:	mov	r3, sp
   21b1c:	mov	r1, lr
   21b20:	mvn	r2, #0
   21b24:	bl	21914 <__assert_fail@plt+0xf5a8>
   21b28:	mov	sp, fp
   21b2c:	pop	{fp, pc}
   21b30:	bl	12348 <abort@plt>
   21b34:	push	{r4, sl, fp, lr}
   21b38:	add	fp, sp, #8
   21b3c:	sub	sp, sp, #48	; 0x30
   21b40:	vmov.i32	q8, #0	; 0x00000000
   21b44:	mov	ip, r3
   21b48:	mov	r3, sp
   21b4c:	mov	lr, #32
   21b50:	cmp	r1, #10
   21b54:	add	r4, r3, #16
   21b58:	vst1.64	{d16-d17}, [r3], lr
   21b5c:	vst1.64	{d16-d17}, [r4]
   21b60:	vst1.64	{d16-d17}, [r3]
   21b64:	beq	21b84 <__assert_fail@plt+0xf818>
   21b68:	str	r1, [sp]
   21b6c:	mov	r1, r2
   21b70:	mov	r3, sp
   21b74:	mov	r2, ip
   21b78:	bl	21914 <__assert_fail@plt+0xf5a8>
   21b7c:	sub	sp, fp, #8
   21b80:	pop	{r4, sl, fp, pc}
   21b84:	bl	12348 <abort@plt>
   21b88:	push	{fp, lr}
   21b8c:	mov	fp, sp
   21b90:	sub	sp, sp, #48	; 0x30
   21b94:	vmov.i32	q8, #0	; 0x00000000
   21b98:	mov	r3, sp
   21b9c:	mov	ip, #32
   21ba0:	cmp	r0, #10
   21ba4:	add	r2, r3, #16
   21ba8:	vst1.64	{d16-d17}, [r3], ip
   21bac:	vst1.64	{d16-d17}, [r2]
   21bb0:	vst1.64	{d16-d17}, [r3]
   21bb4:	beq	21bd4 <__assert_fail@plt+0xf868>
   21bb8:	str	r0, [sp]
   21bbc:	mov	r3, sp
   21bc0:	mov	r0, #0
   21bc4:	mvn	r2, #0
   21bc8:	bl	21914 <__assert_fail@plt+0xf5a8>
   21bcc:	mov	sp, fp
   21bd0:	pop	{fp, pc}
   21bd4:	bl	12348 <abort@plt>
   21bd8:	push	{fp, lr}
   21bdc:	mov	fp, sp
   21be0:	sub	sp, sp, #48	; 0x30
   21be4:	vmov.i32	q8, #0	; 0x00000000
   21be8:	mov	r3, sp
   21bec:	mov	ip, #32
   21bf0:	cmp	r0, #10
   21bf4:	add	lr, r3, #16
   21bf8:	vst1.64	{d16-d17}, [r3], ip
   21bfc:	vst1.64	{d16-d17}, [lr]
   21c00:	vst1.64	{d16-d17}, [r3]
   21c04:	beq	21c20 <__assert_fail@plt+0xf8b4>
   21c08:	str	r0, [sp]
   21c0c:	mov	r3, sp
   21c10:	mov	r0, #0
   21c14:	bl	21914 <__assert_fail@plt+0xf5a8>
   21c18:	mov	sp, fp
   21c1c:	pop	{fp, pc}
   21c20:	bl	12348 <abort@plt>
   21c24:	push	{r4, sl, fp, lr}
   21c28:	add	fp, sp, #8
   21c2c:	sub	sp, sp, #48	; 0x30
   21c30:	mov	lr, r0
   21c34:	movw	r0, #39120	; 0x98d0
   21c38:	mov	ip, r1
   21c3c:	mov	r1, #32
   21c40:	mov	r4, #1
   21c44:	movt	r0, #3
   21c48:	add	r3, r0, #16
   21c4c:	vld1.64	{d16-d17}, [r0], r1
   21c50:	vld1.64	{d20-d21}, [r0]
   21c54:	vld1.64	{d18-d19}, [r3]
   21c58:	mov	r3, sp
   21c5c:	add	r0, r3, #32
   21c60:	add	r1, r3, #16
   21c64:	vst1.64	{d20-d21}, [r0]
   21c68:	mov	r0, #28
   21c6c:	vst1.64	{d18-d19}, [r1]
   21c70:	mov	r1, r3
   21c74:	and	r0, r0, r2, lsr #3
   21c78:	and	r2, r2, #31
   21c7c:	vst1.64	{d16-d17}, [r1], r0
   21c80:	ldr	r0, [r1, #8]
   21c84:	bic	r4, r4, r0, lsr r2
   21c88:	eor	r0, r0, r4, lsl r2
   21c8c:	mov	r2, ip
   21c90:	str	r0, [r1, #8]
   21c94:	mov	r0, #0
   21c98:	mov	r1, lr
   21c9c:	bl	21914 <__assert_fail@plt+0xf5a8>
   21ca0:	sub	sp, fp, #8
   21ca4:	pop	{r4, sl, fp, pc}
   21ca8:	push	{fp, lr}
   21cac:	mov	fp, sp
   21cb0:	sub	sp, sp, #48	; 0x30
   21cb4:	mov	ip, r0
   21cb8:	movw	r0, #39120	; 0x98d0
   21cbc:	mov	r2, #32
   21cc0:	movt	r0, #3
   21cc4:	add	r3, r0, #16
   21cc8:	vld1.64	{d16-d17}, [r0], r2
   21ccc:	vld1.64	{d20-d21}, [r0]
   21cd0:	vld1.64	{d18-d19}, [r3]
   21cd4:	mov	r3, sp
   21cd8:	add	r0, r3, #32
   21cdc:	add	r2, r3, #16
   21ce0:	vst1.64	{d20-d21}, [r0]
   21ce4:	mov	r0, #28
   21ce8:	vst1.64	{d18-d19}, [r2]
   21cec:	mov	r2, r3
   21cf0:	and	r0, r0, r1, lsr #3
   21cf4:	and	r1, r1, #31
   21cf8:	vst1.64	{d16-d17}, [r2], r0
   21cfc:	mov	r0, #1
   21d00:	ldr	lr, [r2, #8]
   21d04:	bic	r0, r0, lr, lsr r1
   21d08:	eor	r0, lr, r0, lsl r1
   21d0c:	mov	r1, ip
   21d10:	str	r0, [r2, #8]
   21d14:	mov	r0, #0
   21d18:	mvn	r2, #0
   21d1c:	bl	21914 <__assert_fail@plt+0xf5a8>
   21d20:	mov	sp, fp
   21d24:	pop	{fp, pc}
   21d28:	push	{fp, lr}
   21d2c:	mov	fp, sp
   21d30:	sub	sp, sp, #48	; 0x30
   21d34:	mov	r1, r0
   21d38:	movw	r0, #39120	; 0x98d0
   21d3c:	mov	r3, #32
   21d40:	movt	r0, #3
   21d44:	add	r2, r0, #16
   21d48:	vld1.64	{d16-d17}, [r0], r3
   21d4c:	mov	r3, sp
   21d50:	vld1.64	{d18-d19}, [r2]
   21d54:	vld1.64	{d20-d21}, [r0]
   21d58:	add	r2, r3, #16
   21d5c:	add	r0, r3, #32
   21d60:	vst1.64	{d18-d19}, [r2]
   21d64:	vst1.64	{d20-d21}, [r0]
   21d68:	mov	r0, #12
   21d6c:	mov	r2, r3
   21d70:	vst1.64	{d16-d17}, [r2], r0
   21d74:	ldr	r0, [r2]
   21d78:	orr	r0, r0, #67108864	; 0x4000000
   21d7c:	str	r0, [r2]
   21d80:	mov	r0, #0
   21d84:	mvn	r2, #0
   21d88:	bl	21914 <__assert_fail@plt+0xf5a8>
   21d8c:	mov	sp, fp
   21d90:	pop	{fp, pc}
   21d94:	push	{fp, lr}
   21d98:	mov	fp, sp
   21d9c:	sub	sp, sp, #48	; 0x30
   21da0:	mov	ip, r1
   21da4:	mov	r1, r0
   21da8:	movw	r0, #39120	; 0x98d0
   21dac:	mov	r2, #32
   21db0:	movt	r0, #3
   21db4:	add	r3, r0, #16
   21db8:	vld1.64	{d16-d17}, [r0], r2
   21dbc:	vld1.64	{d18-d19}, [r3]
   21dc0:	vld1.64	{d20-d21}, [r0]
   21dc4:	mov	r3, sp
   21dc8:	add	r2, r3, #16
   21dcc:	add	r0, r3, #32
   21dd0:	vst1.64	{d18-d19}, [r2]
   21dd4:	vst1.64	{d20-d21}, [r0]
   21dd8:	mov	r0, #12
   21ddc:	mov	r2, r3
   21de0:	vst1.64	{d16-d17}, [r2], r0
   21de4:	ldr	r0, [r2]
   21de8:	orr	r0, r0, #67108864	; 0x4000000
   21dec:	str	r0, [r2]
   21df0:	mov	r0, #0
   21df4:	mov	r2, ip
   21df8:	bl	21914 <__assert_fail@plt+0xf5a8>
   21dfc:	mov	sp, fp
   21e00:	pop	{fp, pc}
   21e04:	push	{r4, sl, fp, lr}
   21e08:	add	fp, sp, #8
   21e0c:	sub	sp, sp, #96	; 0x60
   21e10:	vmov.i32	q8, #0	; 0x00000000
   21e14:	mov	ip, r2
   21e18:	mov	r2, sp
   21e1c:	mov	r4, #28
   21e20:	cmp	r1, #10
   21e24:	mov	r3, r2
   21e28:	add	lr, r2, #16
   21e2c:	vst1.64	{d16-d17}, [r3], r4
   21e30:	vst1.64	{d16-d17}, [lr]
   21e34:	vst1.32	{d16-d17}, [r3]
   21e38:	beq	21e88 <__assert_fail@plt+0xfb1c>
   21e3c:	vld1.64	{d16-d17}, [r2], r4
   21e40:	vld1.64	{d18-d19}, [lr]
   21e44:	add	r3, sp, #48	; 0x30
   21e48:	vld1.32	{d20-d21}, [r2]
   21e4c:	add	r2, r3, #20
   21e50:	add	r4, r3, #4
   21e54:	vst1.32	{d18-d19}, [r2]
   21e58:	add	r2, r3, #32
   21e5c:	vst1.32	{d16-d17}, [r4]
   21e60:	vst1.32	{d20-d21}, [r2]
   21e64:	str	r1, [sp, #48]	; 0x30
   21e68:	mvn	r2, #0
   21e6c:	ldr	r1, [sp, #60]	; 0x3c
   21e70:	orr	r1, r1, #67108864	; 0x4000000
   21e74:	str	r1, [sp, #60]	; 0x3c
   21e78:	mov	r1, ip
   21e7c:	bl	21914 <__assert_fail@plt+0xf5a8>
   21e80:	sub	sp, fp, #8
   21e84:	pop	{r4, sl, fp, pc}
   21e88:	bl	12348 <abort@plt>
   21e8c:	push	{r4, r5, r6, sl, fp, lr}
   21e90:	add	fp, sp, #16
   21e94:	sub	sp, sp, #48	; 0x30
   21e98:	mov	ip, r3
   21e9c:	movw	r3, #39120	; 0x98d0
   21ea0:	mov	r6, #32
   21ea4:	cmp	r1, #0
   21ea8:	mov	r4, sp
   21eac:	movt	r3, #3
   21eb0:	cmpne	r2, #0
   21eb4:	add	r5, r4, #16
   21eb8:	add	lr, r3, #16
   21ebc:	vld1.64	{d16-d17}, [r3], r6
   21ec0:	vld1.64	{d18-d19}, [lr]
   21ec4:	vld1.64	{d20-d21}, [r3]
   21ec8:	mov	r3, #10
   21ecc:	vst1.64	{d16-d17}, [r4], r6
   21ed0:	vst1.64	{d18-d19}, [r5]
   21ed4:	vst1.64	{d20-d21}, [r4]
   21ed8:	str	r3, [sp]
   21edc:	bne	21ee4 <__assert_fail@plt+0xfb78>
   21ee0:	bl	12348 <abort@plt>
   21ee4:	str	r2, [sp, #44]	; 0x2c
   21ee8:	str	r1, [sp, #40]	; 0x28
   21eec:	mov	r3, sp
   21ef0:	mov	r1, ip
   21ef4:	mvn	r2, #0
   21ef8:	bl	21914 <__assert_fail@plt+0xf5a8>
   21efc:	sub	sp, fp, #16
   21f00:	pop	{r4, r5, r6, sl, fp, pc}
   21f04:	push	{r4, r5, r6, sl, fp, lr}
   21f08:	add	fp, sp, #16
   21f0c:	sub	sp, sp, #48	; 0x30
   21f10:	mov	lr, r3
   21f14:	movw	r3, #39120	; 0x98d0
   21f18:	mov	r6, #32
   21f1c:	cmp	r1, #0
   21f20:	mov	r4, sp
   21f24:	movt	r3, #3
   21f28:	cmpne	r2, #0
   21f2c:	add	r5, r4, #16
   21f30:	add	ip, r3, #16
   21f34:	vld1.64	{d16-d17}, [r3], r6
   21f38:	vld1.64	{d18-d19}, [ip]
   21f3c:	vld1.64	{d20-d21}, [r3]
   21f40:	mov	r3, #10
   21f44:	vst1.64	{d16-d17}, [r4], r6
   21f48:	vst1.64	{d18-d19}, [r5]
   21f4c:	vst1.64	{d20-d21}, [r4]
   21f50:	str	r3, [sp]
   21f54:	bne	21f5c <__assert_fail@plt+0xfbf0>
   21f58:	bl	12348 <abort@plt>
   21f5c:	ldr	ip, [fp, #8]
   21f60:	str	r2, [sp, #44]	; 0x2c
   21f64:	str	r1, [sp, #40]	; 0x28
   21f68:	mov	r3, sp
   21f6c:	mov	r1, lr
   21f70:	mov	r2, ip
   21f74:	bl	21914 <__assert_fail@plt+0xf5a8>
   21f78:	sub	sp, fp, #16
   21f7c:	pop	{r4, r5, r6, sl, fp, pc}
   21f80:	push	{r4, sl, fp, lr}
   21f84:	add	fp, sp, #8
   21f88:	sub	sp, sp, #48	; 0x30
   21f8c:	movw	r3, #39120	; 0x98d0
   21f90:	mov	lr, #32
   21f94:	mov	ip, r2
   21f98:	cmp	r0, #0
   21f9c:	movt	r3, #3
   21fa0:	cmpne	r1, #0
   21fa4:	add	r2, r3, #16
   21fa8:	vld1.64	{d16-d17}, [r3], lr
   21fac:	vld1.64	{d20-d21}, [r3]
   21fb0:	vld1.64	{d18-d19}, [r2]
   21fb4:	mov	r2, sp
   21fb8:	add	r4, r2, #16
   21fbc:	vst1.64	{d16-d17}, [r2], lr
   21fc0:	vst1.64	{d20-d21}, [r2]
   21fc4:	mov	r2, #10
   21fc8:	vst1.64	{d18-d19}, [r4]
   21fcc:	str	r2, [sp]
   21fd0:	bne	21fd8 <__assert_fail@plt+0xfc6c>
   21fd4:	bl	12348 <abort@plt>
   21fd8:	str	r1, [sp, #44]	; 0x2c
   21fdc:	str	r0, [sp, #40]	; 0x28
   21fe0:	mov	r3, sp
   21fe4:	mov	r0, #0
   21fe8:	mov	r1, ip
   21fec:	mvn	r2, #0
   21ff0:	bl	21914 <__assert_fail@plt+0xf5a8>
   21ff4:	sub	sp, fp, #8
   21ff8:	pop	{r4, sl, fp, pc}
   21ffc:	push	{r4, r5, fp, lr}
   22000:	add	fp, sp, #8
   22004:	sub	sp, sp, #48	; 0x30
   22008:	mov	ip, r3
   2200c:	movw	r3, #39120	; 0x98d0
   22010:	mov	r4, #32
   22014:	mov	lr, r2
   22018:	cmp	r0, #0
   2201c:	movt	r3, #3
   22020:	cmpne	r1, #0
   22024:	add	r2, r3, #16
   22028:	vld1.64	{d16-d17}, [r3], r4
   2202c:	vld1.64	{d20-d21}, [r3]
   22030:	vld1.64	{d18-d19}, [r2]
   22034:	mov	r2, sp
   22038:	add	r5, r2, #16
   2203c:	vst1.64	{d16-d17}, [r2], r4
   22040:	vst1.64	{d20-d21}, [r2]
   22044:	mov	r2, #10
   22048:	vst1.64	{d18-d19}, [r5]
   2204c:	str	r2, [sp]
   22050:	bne	22058 <__assert_fail@plt+0xfcec>
   22054:	bl	12348 <abort@plt>
   22058:	str	r1, [sp, #44]	; 0x2c
   2205c:	str	r0, [sp, #40]	; 0x28
   22060:	mov	r3, sp
   22064:	mov	r0, #0
   22068:	mov	r1, lr
   2206c:	mov	r2, ip
   22070:	bl	21914 <__assert_fail@plt+0xf5a8>
   22074:	sub	sp, fp, #8
   22078:	pop	{r4, r5, fp, pc}
   2207c:	movw	r3, #37496	; 0x9278
   22080:	movt	r3, #3
   22084:	b	21914 <__assert_fail@plt+0xf5a8>
   22088:	movw	r3, #37496	; 0x9278
   2208c:	mov	r2, r1
   22090:	mov	r1, r0
   22094:	mov	r0, #0
   22098:	movt	r3, #3
   2209c:	b	21914 <__assert_fail@plt+0xf5a8>
   220a0:	movw	r3, #37496	; 0x9278
   220a4:	mvn	r2, #0
   220a8:	movt	r3, #3
   220ac:	b	21914 <__assert_fail@plt+0xf5a8>
   220b0:	movw	r3, #37496	; 0x9278
   220b4:	mov	r1, r0
   220b8:	mov	r0, #0
   220bc:	mvn	r2, #0
   220c0:	movt	r3, #3
   220c4:	b	21914 <__assert_fail@plt+0xf5a8>
   220c8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   220cc:	add	fp, sp, #24
   220d0:	cmp	r1, #0
   220d4:	beq	22144 <__assert_fail@plt+0xfdd8>
   220d8:	mov	r5, r1
   220dc:	mov	r6, r0
   220e0:	cmp	r0, #0
   220e4:	beq	2216c <__assert_fail@plt+0xfe00>
   220e8:	movw	r1, #34236	; 0x85bc
   220ec:	mov	r0, r6
   220f0:	movt	r1, #2
   220f4:	bl	2564c <__assert_fail@plt+0x132e0>
   220f8:	cmp	r0, #0
   220fc:	beq	22218 <__assert_fail@plt+0xfeac>
   22100:	mov	r7, r0
   22104:	movw	r0, #2076	; 0x81c
   22108:	bl	23914 <__assert_fail@plt+0x115a8>
   2210c:	mov	r9, r0
   22110:	movw	r0, #9188	; 0x23e4
   22114:	cmp	r5, #2048	; 0x800
   22118:	mov	r2, #0
   2211c:	movt	r0, #2
   22120:	movcs	r5, #2048	; 0x800
   22124:	str	r7, [r9]
   22128:	add	r1, r9, #12
   2212c:	mov	r3, r5
   22130:	stmib	r9, {r0, r6}
   22134:	mov	r0, r7
   22138:	bl	121b0 <setvbuf@plt>
   2213c:	mov	r0, r9
   22140:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22144:	movw	r0, #2076	; 0x81c
   22148:	bl	23914 <__assert_fail@plt+0x115a8>
   2214c:	movw	r1, #9188	; 0x23e4
   22150:	mov	r9, r0
   22154:	mov	r0, #0
   22158:	movt	r1, #2
   2215c:	stm	r9, {r0, r1}
   22160:	str	r0, [r9, #8]
   22164:	mov	r0, r9
   22168:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2216c:	movw	r0, #2076	; 0x81c
   22170:	bl	23914 <__assert_fail@plt+0x115a8>
   22174:	cmp	r5, #1024	; 0x400
   22178:	mov	r9, r0
   2217c:	movw	r1, #9188	; 0x23e4
   22180:	mov	r0, #0
   22184:	movcs	r5, #1024	; 0x400
   22188:	add	r8, r9, #16
   2218c:	movt	r1, #2
   22190:	stm	r9, {r0, r1}
   22194:	str	r0, [r9, #8]
   22198:	str	r0, [r9, #12]
   2219c:	cmp	r5, #1
   221a0:	blt	22224 <__assert_fail@plt+0xfeb8>
   221a4:	add	r6, r8, r5
   221a8:	mov	r5, r8
   221ac:	b	221bc <__assert_fail@plt+0xfe50>
   221b0:	add	r5, r5, r0
   221b4:	cmp	r5, r6
   221b8:	bcs	22224 <__assert_fail@plt+0xfeb8>
   221bc:	sub	r1, r6, r5
   221c0:	mov	r0, r5
   221c4:	mov	r2, #0
   221c8:	bl	12318 <getrandom@plt>
   221cc:	cmp	r0, #0
   221d0:	bpl	221b0 <__assert_fail@plt+0xfe44>
   221d4:	bl	12198 <__errno_location@plt>
   221d8:	ldr	r4, [r0]
   221dc:	cmp	r4, #4
   221e0:	beq	221b4 <__assert_fail@plt+0xfe48>
   221e4:	ldr	r5, [r9]
   221e8:	mov	r7, r0
   221ec:	mov	r0, r9
   221f0:	movw	r1, #2076	; 0x81c
   221f4:	movw	r2, #2076	; 0x81c
   221f8:	bl	12270 <__explicit_bzero_chk@plt>
   221fc:	mov	r0, r9
   22200:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   22204:	cmp	r5, #0
   22208:	beq	22214 <__assert_fail@plt+0xfea8>
   2220c:	mov	r0, r5
   22210:	bl	1d69c <__assert_fail@plt+0xb330>
   22214:	str	r4, [r7]
   22218:	mov	r9, #0
   2221c:	mov	r0, r9
   22220:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22224:	mov	r0, r8
   22228:	bl	22698 <__assert_fail@plt+0x1032c>
   2222c:	mov	r0, r9
   22230:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22234:	str	r1, [r0, #4]
   22238:	bx	lr
   2223c:	str	r1, [r0, #8]
   22240:	bx	lr
   22244:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22248:	add	fp, sp, #28
   2224c:	sub	sp, sp, #4
   22250:	ldr	r3, [r0]
   22254:	mov	r6, r2
   22258:	mov	r5, r1
   2225c:	mov	sl, r0
   22260:	cmp	r3, #0
   22264:	beq	222e0 <__assert_fail@plt+0xff74>
   22268:	mov	r0, r5
   2226c:	mov	r1, #1
   22270:	mov	r2, r6
   22274:	bl	1230c <fread_unlocked@plt>
   22278:	mov	r4, r0
   2227c:	sub	r6, r6, r0
   22280:	bl	12198 <__errno_location@plt>
   22284:	cmp	r6, #0
   22288:	beq	222d8 <__assert_fail@plt+0xff6c>
   2228c:	mov	r7, r0
   22290:	ldr	r1, [sl]
   22294:	ldr	r0, [r7]
   22298:	ldr	r1, [r1]
   2229c:	lsl	r1, r1, #26
   222a0:	and	r0, r0, r1, asr #31
   222a4:	str	r0, [r7]
   222a8:	ldr	r1, [sl, #4]
   222ac:	ldr	r0, [sl, #8]
   222b0:	blx	r1
   222b4:	ldr	r3, [sl]
   222b8:	add	r5, r5, r4
   222bc:	mov	r1, #1
   222c0:	mov	r2, r6
   222c4:	mov	r0, r5
   222c8:	bl	1230c <fread_unlocked@plt>
   222cc:	mov	r4, r0
   222d0:	subs	r6, r6, r0
   222d4:	bne	22290 <__assert_fail@plt+0xff24>
   222d8:	sub	sp, fp, #28
   222dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   222e0:	ldr	r7, [sl, #12]
   222e4:	movw	r0, #1052	; 0x41c
   222e8:	add	r9, sl, r0
   222ec:	sub	r0, r9, r7
   222f0:	cmp	r7, r6
   222f4:	add	r1, r0, #1024	; 0x400
   222f8:	bcs	22370 <__assert_fail@plt+0x10004>
   222fc:	add	r8, sl, #16
   22300:	mov	r0, r5
   22304:	mov	r2, r7
   22308:	bl	11eec <memcpy@plt>
   2230c:	add	r5, r5, r7
   22310:	sub	r6, r6, r7
   22314:	tst	r5, #3
   22318:	beq	22354 <__assert_fail@plt+0xffe8>
   2231c:	mov	r0, r8
   22320:	mov	r1, r9
   22324:	bl	22454 <__assert_fail@plt+0x100e8>
   22328:	mov	r7, #1024	; 0x400
   2232c:	cmp	r6, #1024	; 0x400
   22330:	mov	r1, r9
   22334:	bhi	22300 <__assert_fail@plt+0xff94>
   22338:	b	22374 <__assert_fail@plt+0x10008>
   2233c:	mov	r0, r8
   22340:	mov	r1, r5
   22344:	bl	22454 <__assert_fail@plt+0x100e8>
   22348:	subs	r6, r6, #1024	; 0x400
   2234c:	add	r5, r5, #1024	; 0x400
   22350:	beq	22394 <__assert_fail@plt+0x10028>
   22354:	cmp	r6, #1024	; 0x400
   22358:	bcs	2233c <__assert_fail@plt+0xffd0>
   2235c:	mov	r0, r8
   22360:	mov	r1, r9
   22364:	bl	22454 <__assert_fail@plt+0x100e8>
   22368:	mov	r7, #1024	; 0x400
   2236c:	b	22374 <__assert_fail@plt+0x10008>
   22370:	mov	r9, r1
   22374:	mov	r0, r5
   22378:	mov	r1, r9
   2237c:	mov	r2, r6
   22380:	bl	11eec <memcpy@plt>
   22384:	sub	r0, r7, r6
   22388:	str	r0, [sl, #12]
   2238c:	sub	sp, fp, #28
   22390:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22394:	mov	r0, #0
   22398:	str	r0, [sl, #12]
   2239c:	sub	sp, fp, #28
   223a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   223a4:	push	{r4, r5, fp, lr}
   223a8:	add	fp, sp, #8
   223ac:	ldr	r4, [r0]
   223b0:	movw	r1, #2076	; 0x81c
   223b4:	mvn	r2, #0
   223b8:	mov	r5, r0
   223bc:	bl	12270 <__explicit_bzero_chk@plt>
   223c0:	mov	r0, r5
   223c4:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   223c8:	cmp	r4, #0
   223cc:	beq	223dc <__assert_fail@plt+0x10070>
   223d0:	mov	r0, r4
   223d4:	pop	{r4, r5, fp, lr}
   223d8:	b	1d69c <__assert_fail@plt+0xb330>
   223dc:	mov	r0, #0
   223e0:	pop	{r4, r5, fp, pc}
   223e4:	push	{fp, lr}
   223e8:	mov	fp, sp
   223ec:	cmp	r0, #0
   223f0:	beq	22450 <__assert_fail@plt+0x100e4>
   223f4:	mov	r4, r0
   223f8:	movw	r0, #37488	; 0x9270
   223fc:	movt	r0, #3
   22400:	ldr	r5, [r0]
   22404:	bl	12198 <__errno_location@plt>
   22408:	ldr	r6, [r0]
   2240c:	movw	r0, #34239	; 0x85bf
   22410:	movw	r1, #34255	; 0x85cf
   22414:	mov	r2, #5
   22418:	movt	r0, #2
   2241c:	movt	r1, #2
   22420:	cmp	r6, #0
   22424:	moveq	r1, r0
   22428:	mov	r0, #0
   2242c:	bl	11f7c <dcgettext@plt>
   22430:	mov	r7, r0
   22434:	mov	r0, r4
   22438:	bl	220b0 <__assert_fail@plt+0xfd44>
   2243c:	mov	r3, r0
   22440:	mov	r0, r5
   22444:	mov	r1, r6
   22448:	mov	r2, r7
   2244c:	bl	120a8 <error@plt>
   22450:	bl	12348 <abort@plt>
   22454:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22458:	add	fp, sp, #28
   2245c:	sub	sp, sp, #8
   22460:	ldr	r7, [r0, #1032]	; 0x408
   22464:	ldr	r2, [r0, #1028]	; 0x404
   22468:	ldr	r3, [r0, #1024]	; 0x400
   2246c:	add	ip, r0, #512	; 0x200
   22470:	mov	r8, #0
   22474:	add	r7, r7, #1
   22478:	add	r6, r7, r2
   2247c:	str	r7, [r0, #1032]	; 0x408
   22480:	mov	r7, r0
   22484:	eor	r3, r3, r3, lsl #13
   22488:	ldr	r4, [r7, r8]!
   2248c:	ldr	r2, [r7, #512]	; 0x200
   22490:	and	r5, r4, #1020	; 0x3fc
   22494:	ldr	r5, [r0, r5]
   22498:	add	r2, r3, r2
   2249c:	add	r3, r2, r6
   224a0:	eor	r2, r2, r2, lsr #6
   224a4:	add	r3, r3, r5
   224a8:	str	r3, [r7]
   224ac:	ubfx	r3, r3, #10, #8
   224b0:	ldr	r3, [r0, r3, lsl #2]
   224b4:	add	r3, r3, r4
   224b8:	mov	r4, r1
   224bc:	str	r3, [r4, r8]!
   224c0:	add	r8, r8, #16
   224c4:	ldr	r5, [r7, #516]	; 0x204
   224c8:	ldr	r6, [r7, #4]
   224cc:	add	lr, r0, r8
   224d0:	cmp	lr, ip
   224d4:	add	r2, r5, r2
   224d8:	and	r5, r6, #1020	; 0x3fc
   224dc:	ldr	r5, [r0, r5]
   224e0:	add	r3, r2, r3
   224e4:	eor	r2, r2, r2, lsl #2
   224e8:	add	r3, r3, r5
   224ec:	str	r3, [r7, #4]
   224f0:	ubfx	r3, r3, #10, #8
   224f4:	ldr	r3, [r0, r3, lsl #2]
   224f8:	add	r3, r3, r6
   224fc:	str	r3, [r4, #4]
   22500:	ldr	r5, [r7, #520]	; 0x208
   22504:	ldr	r6, [r7, #8]
   22508:	add	r2, r5, r2
   2250c:	and	r5, r6, #1020	; 0x3fc
   22510:	ldr	r5, [r0, r5]
   22514:	add	r3, r2, r3
   22518:	eor	r2, r2, r2, lsr #16
   2251c:	add	r3, r3, r5
   22520:	str	r3, [r7, #8]
   22524:	ubfx	r3, r3, #10, #8
   22528:	ldr	r3, [r0, r3, lsl #2]
   2252c:	add	r6, r3, r6
   22530:	str	r6, [r4, #8]
   22534:	ldr	r3, [r7, #524]	; 0x20c
   22538:	ldr	r5, [r7, #12]
   2253c:	add	r3, r3, r2
   22540:	add	r2, r3, r6
   22544:	and	r6, r5, #1020	; 0x3fc
   22548:	ldr	r6, [r0, r6]
   2254c:	add	r2, r2, r6
   22550:	str	r2, [r7, #12]
   22554:	ubfx	r2, r2, #10, #8
   22558:	ldr	r2, [r0, r2, lsl #2]
   2255c:	add	r6, r2, r5
   22560:	str	r6, [r4, #12]
   22564:	bcc	22480 <__assert_fail@plt+0x10114>
   22568:	add	r2, r1, r8
   2256c:	mov	r5, #0
   22570:	str	r2, [sp, #4]
   22574:	add	r2, r0, #1024	; 0x400
   22578:	str	r2, [sp]
   2257c:	ldr	r2, [lr, r5]
   22580:	eor	r3, r3, r3, lsl #13
   22584:	and	r7, r2, #1020	; 0x3fc
   22588:	ldr	sl, [r0, r7]
   2258c:	add	r7, lr, r5
   22590:	ldr	r4, [r7, #-512]	; 0xfffffe00
   22594:	add	r3, r3, r4
   22598:	add	r4, r3, r6
   2259c:	eor	r3, r3, r3, lsr #6
   225a0:	add	r4, r4, sl
   225a4:	str	r4, [lr, r5]
   225a8:	ubfx	r4, r4, #10, #8
   225ac:	ldr	r6, [sp, #4]
   225b0:	ldr	r4, [r0, r4, lsl #2]
   225b4:	add	r2, r4, r2
   225b8:	str	r2, [r6, r5]
   225bc:	ldr	r4, [r7, #-508]	; 0xfffffe04
   225c0:	add	r3, r4, r3
   225c4:	add	r4, r0, r5
   225c8:	add	r6, r4, r8
   225cc:	add	sl, r3, r2
   225d0:	ldr	r4, [r6, #4]
   225d4:	and	r2, r4, #1020	; 0x3fc
   225d8:	ldr	r2, [r0, r2]
   225dc:	add	r2, sl, r2
   225e0:	eor	sl, r3, r3, lsl #2
   225e4:	str	r2, [r6, #4]
   225e8:	ubfx	r2, r2, #10, #8
   225ec:	ldr	r2, [r0, r2, lsl #2]
   225f0:	add	r2, r2, r4
   225f4:	add	r4, r1, r5
   225f8:	add	ip, r4, r8
   225fc:	str	r2, [ip, #4]
   22600:	ldr	r3, [r7, #-504]	; 0xfffffe08
   22604:	add	r3, r3, sl
   22608:	add	sl, r3, r2
   2260c:	ldr	r2, [r7, #8]
   22610:	eor	r3, r3, r3, lsr #16
   22614:	and	r9, r2, #1020	; 0x3fc
   22618:	ldr	r4, [r0, r9]
   2261c:	add	r4, sl, r4
   22620:	str	r4, [r7, #8]
   22624:	ubfx	r4, r4, #10, #8
   22628:	ldr	r4, [r0, r4, lsl #2]
   2262c:	add	r2, r4, r2
   22630:	str	r2, [ip, #8]
   22634:	mov	ip, r1
   22638:	ldr	r4, [r7, #-500]	; 0xfffffe0c
   2263c:	add	r3, r4, r3
   22640:	ldr	r4, [r6, #12]
   22644:	add	r2, r3, r2
   22648:	and	r1, r4, #1020	; 0x3fc
   2264c:	ldr	r1, [r0, r1]
   22650:	add	r1, r2, r1
   22654:	str	r1, [r6, #12]
   22658:	ubfx	r1, r1, #10, #8
   2265c:	ldr	r2, [sp]
   22660:	ldr	r1, [r0, r1, lsl #2]
   22664:	add	r6, r1, r4
   22668:	ldr	r1, [sp, #4]
   2266c:	add	r1, r1, r5
   22670:	add	r5, r5, #16
   22674:	str	r6, [r1, #12]
   22678:	add	r1, r7, #16
   2267c:	cmp	r1, r2
   22680:	mov	r1, ip
   22684:	bcc	2257c <__assert_fail@plt+0x10210>
   22688:	str	r3, [r0, #1024]	; 0x400
   2268c:	str	r6, [r0, #1028]	; 0x404
   22690:	sub	sp, fp, #28
   22694:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22698:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2269c:	add	fp, sp, #28
   226a0:	sub	sp, sp, #28
   226a4:	str	r0, [sp, #20]
   226a8:	add	r7, r0, #28
   226ac:	movw	r0, #19064	; 0x4a78
   226b0:	movw	r6, #57178	; 0xdf5a
   226b4:	movw	r5, #89	; 0x59
   226b8:	movw	r1, #15947	; 0x3e4b
   226bc:	movw	sl, #6872	; 0x1ad8
   226c0:	movw	r8, #15433	; 0x3c49
   226c4:	movw	lr, #37145	; 0x9119
   226c8:	mov	r9, #0
   226cc:	movt	r0, #55594	; 0xd92a
   226d0:	movt	r6, #4967	; 0x1367
   226d4:	movt	r5, #38361	; 0x95d9
   226d8:	movt	r1, #49942	; 0xc316
   226dc:	movt	sl, #3906	; 0xf42
   226e0:	movt	r8, #42266	; 0xa51a
   226e4:	movt	lr, #12384	; 0x3060
   226e8:	str	r0, [sp, #16]
   226ec:	movw	r0, #59931	; 0xea1b
   226f0:	movt	r0, #50415	; 0xc4ef
   226f4:	ldr	r3, [r7, #-28]	; 0xffffffe4
   226f8:	str	r0, [sp, #24]
   226fc:	ldr	r0, [r7]
   22700:	str	lr, [sp, #4]
   22704:	add	r6, r3, r6
   22708:	ldr	r3, [sp, #20]
   2270c:	str	r0, [sp, #12]
   22710:	add	r3, r3, r9, lsl #2
   22714:	add	r9, r9, #8
   22718:	cmp	r9, #256	; 0x100
   2271c:	ldmib	r3, {r2, lr}
   22720:	ldr	r0, [r3, #12]
   22724:	add	r4, lr, r1
   22728:	ldr	ip, [r3, #16]
   2272c:	add	r5, r2, r5
   22730:	eor	r6, r6, r5, lsl #11
   22734:	add	r2, r0, sl
   22738:	add	r5, r4, r5
   2273c:	add	r2, r2, r6
   22740:	str	r6, [sp, #8]
   22744:	add	r6, r2, r4
   22748:	eor	r4, r5, r4, lsr #2
   2274c:	eor	r0, r6, r2, lsl #8
   22750:	ldr	r6, [r3, #20]
   22754:	str	r4, [sp]
   22758:	add	r1, r6, r8
   2275c:	ldr	r6, [sp, #16]
   22760:	add	r1, r1, r0
   22764:	add	r5, ip, r6
   22768:	add	r5, r5, r4
   2276c:	ldr	r4, [sp, #4]
   22770:	add	r2, r5, r2
   22774:	add	r6, r1, r5
   22778:	eor	sl, r2, r5, lsr #16
   2277c:	ldr	r5, [r3, #24]
   22780:	ldr	r2, [sp, #24]
   22784:	eor	ip, r6, r1, lsl #10
   22788:	ldr	r6, [sp, #12]
   2278c:	str	ip, [sp, #16]
   22790:	add	r5, r5, r2
   22794:	add	r6, r6, r4
   22798:	ldr	r2, [sp]
   2279c:	add	r5, r5, sl
   227a0:	add	r6, r6, ip
   227a4:	add	r1, r5, r1
   227a8:	eor	r8, r1, r5, lsr #4
   227ac:	ldr	r1, [sp, #8]
   227b0:	add	r5, r6, r5
   227b4:	add	r4, r8, r1
   227b8:	add	r1, r4, r6
   227bc:	eor	lr, r1, r4, lsr #9
   227c0:	add	r1, lr, r0
   227c4:	eor	r0, r5, r6, lsl #8
   227c8:	add	r5, r0, r2
   227cc:	add	r6, r5, r4
   227d0:	str	r6, [r7, #-28]	; 0xffffffe4
   227d4:	str	r5, [r3, #4]
   227d8:	str	r1, [r3, #8]
   227dc:	str	sl, [r3, #12]
   227e0:	str	ip, [r3, #16]
   227e4:	str	r8, [r3, #20]
   227e8:	str	r0, [r3, #24]
   227ec:	str	lr, [r7]
   227f0:	add	r7, r7, #32
   227f4:	bcc	226f4 <__assert_fail@plt+0x10388>
   227f8:	ldr	r3, [sp, #20]
   227fc:	ldr	r9, [sp, #16]
   22800:	mov	r4, #0
   22804:	add	r7, r3, #28
   22808:	str	r0, [sp, #24]
   2280c:	ldr	r0, [r7]
   22810:	ldr	r3, [r7, #-28]	; 0xffffffe4
   22814:	str	r0, [sp, #16]
   22818:	add	r0, r3, r6
   2281c:	str	r0, [sp, #12]
   22820:	ldr	r0, [sp, #20]
   22824:	add	r3, r0, r4, lsl #2
   22828:	add	r4, r4, #8
   2282c:	cmp	r4, #256	; 0x100
   22830:	ldr	r2, [r3, #16]
   22834:	ldmib	r3, {r6, ip}
   22838:	ldr	r0, [r3, #12]
   2283c:	add	r1, ip, r1
   22840:	add	r5, r6, r5
   22844:	str	r2, [sp, #8]
   22848:	ldr	r2, [sp, #12]
   2284c:	add	r0, r0, sl
   22850:	eor	r2, r2, r5, lsl #11
   22854:	add	r0, r0, r2
   22858:	str	r2, [sp, #12]
   2285c:	add	r2, r0, r1
   22860:	eor	ip, r2, r0, lsl #8
   22864:	ldr	r2, [r3, #20]
   22868:	add	r2, r2, r8
   2286c:	add	r6, r2, ip
   22870:	add	r2, r1, r5
   22874:	eor	r5, r2, r1, lsr #2
   22878:	ldr	r1, [sp, #8]
   2287c:	add	r1, r1, r9
   22880:	add	r1, r1, r5
   22884:	add	r0, r1, r0
   22888:	add	r2, r6, r1
   2288c:	eor	sl, r0, r1, lsr #16
   22890:	ldr	r0, [r3, #24]
   22894:	ldr	r1, [sp, #24]
   22898:	eor	r9, r2, r6, lsl #10
   2289c:	ldr	r2, [sp, #16]
   228a0:	add	r0, r0, r1
   228a4:	add	r2, r2, lr
   228a8:	add	r0, r0, sl
   228ac:	add	lr, r2, r9
   228b0:	add	r1, r0, r6
   228b4:	eor	r8, r1, r0, lsr #4
   228b8:	ldr	r1, [sp, #12]
   228bc:	add	r0, lr, r0
   228c0:	eor	r0, r0, lr, lsl #8
   228c4:	add	r5, r0, r5
   228c8:	add	r6, r8, r1
   228cc:	add	r1, r6, lr
   228d0:	eor	r1, r1, r6, lsr #9
   228d4:	add	r6, r5, r6
   228d8:	str	r6, [r7, #-28]	; 0xffffffe4
   228dc:	str	r5, [r3, #4]
   228e0:	add	r2, r1, ip
   228e4:	mov	lr, r1
   228e8:	str	r2, [r3, #8]
   228ec:	str	sl, [r3, #12]
   228f0:	str	r9, [r3, #16]
   228f4:	str	r8, [r3, #20]
   228f8:	str	r0, [r3, #24]
   228fc:	str	lr, [r7]
   22900:	mov	r1, r2
   22904:	add	r7, r7, #32
   22908:	bcc	22808 <__assert_fail@plt+0x1049c>
   2290c:	ldr	r0, [sp, #20]
   22910:	mov	r1, #0
   22914:	str	r1, [r0, #1024]	; 0x400
   22918:	str	r1, [r0, #1028]	; 0x404
   2291c:	str	r1, [r0, #1032]	; 0x408
   22920:	sub	sp, fp, #28
   22924:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22928:	push	{r4, r5, r6, sl, fp, lr}
   2292c:	add	fp, sp, #16
   22930:	sub	sp, sp, #8
   22934:	movw	r5, #20236	; 0x4f0c
   22938:	movw	r6, #56396	; 0xdc4c
   2293c:	mov	r4, r0
   22940:	mov	r0, #0
   22944:	mov	r1, #0
   22948:	mov	r2, #0
   2294c:	movt	r5, #2
   22950:	movt	r6, #1
   22954:	str	r0, [r4]
   22958:	str	r0, [r4, #4]
   2295c:	str	r0, [r4, #8]
   22960:	add	r0, r4, #12
   22964:	mov	r3, r5
   22968:	str	r6, [sp]
   2296c:	bl	25984 <_obstack_begin@@Base>
   22970:	add	r0, r4, #56	; 0x38
   22974:	mov	r1, #0
   22978:	mov	r2, #0
   2297c:	mov	r3, r5
   22980:	str	r6, [sp]
   22984:	bl	25984 <_obstack_begin@@Base>
   22988:	add	r0, r4, #100	; 0x64
   2298c:	mov	r1, #0
   22990:	mov	r2, #0
   22994:	mov	r3, r5
   22998:	str	r6, [sp]
   2299c:	bl	25984 <_obstack_begin@@Base>
   229a0:	sub	sp, fp, #16
   229a4:	pop	{r4, r5, r6, sl, fp, pc}
   229a8:	push	{r4, sl, fp, lr}
   229ac:	add	fp, sp, #8
   229b0:	mov	r4, r0
   229b4:	add	r0, r0, #12
   229b8:	mov	r1, #0
   229bc:	bl	25c7c <_obstack_free@@Base>
   229c0:	add	r0, r4, #56	; 0x38
   229c4:	mov	r1, #0
   229c8:	bl	25c7c <_obstack_free@@Base>
   229cc:	add	r0, r4, #100	; 0x64
   229d0:	mov	r1, #0
   229d4:	pop	{r4, sl, fp, lr}
   229d8:	b	25c7c <_obstack_free@@Base>
   229dc:	push	{r4, r5, r6, r7, fp, lr}
   229e0:	add	fp, sp, #16
   229e4:	mov	r5, r1
   229e8:	mov	r4, r0
   229ec:	bl	121c8 <fgetc@plt>
   229f0:	cmn	r0, #1
   229f4:	beq	22a60 <__assert_fail@plt+0x106f4>
   229f8:	mov	r7, r0
   229fc:	add	r6, r5, #12
   22a00:	ldr	r0, [r5, #24]
   22a04:	ldr	r1, [r5, #28]
   22a08:	cmp	r1, r0
   22a0c:	beq	22a4c <__assert_fail@plt+0x106e0>
   22a10:	add	r1, r0, #1
   22a14:	cmp	r7, #0
   22a18:	str	r1, [r5, #24]
   22a1c:	strb	r7, [r0]
   22a20:	moveq	r0, r5
   22a24:	bleq	22b8c <__assert_fail@plt+0x10820>
   22a28:	mov	r0, r4
   22a2c:	bl	121c8 <fgetc@plt>
   22a30:	mov	r7, r0
   22a34:	cmn	r0, #1
   22a38:	beq	22a60 <__assert_fail@plt+0x106f4>
   22a3c:	ldr	r0, [r5, #24]
   22a40:	ldr	r1, [r5, #28]
   22a44:	cmp	r1, r0
   22a48:	bne	22a10 <__assert_fail@plt+0x106a4>
   22a4c:	mov	r0, r6
   22a50:	mov	r1, #1
   22a54:	bl	25ad8 <_obstack_newchunk@@Base>
   22a58:	ldr	r0, [r5, #24]
   22a5c:	b	22a10 <__assert_fail@plt+0x106a4>
   22a60:	ldr	r1, [r5, #20]
   22a64:	ldr	r0, [r5, #24]
   22a68:	cmp	r0, r1
   22a6c:	beq	22aa4 <__assert_fail@plt+0x10738>
   22a70:	ldr	r1, [r5, #28]
   22a74:	cmp	r1, r0
   22a78:	bne	22a8c <__assert_fail@plt+0x10720>
   22a7c:	add	r0, r5, #12
   22a80:	mov	r1, #1
   22a84:	bl	25ad8 <_obstack_newchunk@@Base>
   22a88:	ldr	r0, [r5, #24]
   22a8c:	add	r1, r0, #1
   22a90:	str	r1, [r5, #24]
   22a94:	mov	r1, #0
   22a98:	strb	r1, [r0]
   22a9c:	mov	r0, r5
   22aa0:	bl	22b8c <__assert_fail@plt+0x10820>
   22aa4:	ldr	r0, [r5, #68]	; 0x44
   22aa8:	ldr	r1, [r5, #72]	; 0x48
   22aac:	sub	r1, r1, r0
   22ab0:	cmp	r1, #4
   22ab4:	bcs	22ac8 <__assert_fail@plt+0x1075c>
   22ab8:	add	r0, r5, #56	; 0x38
   22abc:	mov	r1, #4
   22ac0:	bl	25ad8 <_obstack_newchunk@@Base>
   22ac4:	ldr	r0, [r5, #68]	; 0x44
   22ac8:	mov	r1, #0
   22acc:	str	r1, [r0]
   22ad0:	ldr	r1, [r5, #68]	; 0x44
   22ad4:	ldr	r0, [r5, #64]	; 0x40
   22ad8:	add	r2, r1, #4
   22adc:	cmp	r2, r0
   22ae0:	str	r2, [r5, #68]	; 0x44
   22ae4:	bne	22af4 <__assert_fail@plt+0x10788>
   22ae8:	ldrb	r1, [r5, #96]	; 0x60
   22aec:	orr	r1, r1, #2
   22af0:	strb	r1, [r5, #96]	; 0x60
   22af4:	ldr	r7, [r5, #80]	; 0x50
   22af8:	ldr	r3, [r5, #60]	; 0x3c
   22afc:	ldr	r1, [r5, #72]	; 0x48
   22b00:	add	r2, r7, r2
   22b04:	bic	r2, r2, r7
   22b08:	sub	r7, r2, r3
   22b0c:	sub	r3, r1, r3
   22b10:	str	r2, [r5, #68]	; 0x44
   22b14:	cmp	r7, r3
   22b18:	movhi	r2, r1
   22b1c:	strhi	r1, [r5, #68]	; 0x44
   22b20:	str	r0, [r5, #4]
   22b24:	str	r2, [r5, #64]	; 0x40
   22b28:	ldr	r0, [r5, #108]	; 0x6c
   22b2c:	ldr	r2, [r5, #112]	; 0x70
   22b30:	cmp	r2, r0
   22b34:	bne	22b44 <__assert_fail@plt+0x107d8>
   22b38:	ldrb	r1, [r5, #140]	; 0x8c
   22b3c:	orr	r1, r1, #2
   22b40:	strb	r1, [r5, #140]	; 0x8c
   22b44:	ldr	r7, [r5, #124]	; 0x7c
   22b48:	ldr	r3, [r5, #104]	; 0x68
   22b4c:	ldr	r1, [r5, #116]	; 0x74
   22b50:	add	r2, r7, r2
   22b54:	bic	r2, r2, r7
   22b58:	sub	r7, r2, r3
   22b5c:	sub	r3, r1, r3
   22b60:	str	r2, [r5, #112]	; 0x70
   22b64:	cmp	r7, r3
   22b68:	strhi	r1, [r5, #112]	; 0x70
   22b6c:	str	r0, [r5, #8]
   22b70:	movhi	r2, r1
   22b74:	mov	r0, r4
   22b78:	str	r2, [r5, #108]	; 0x6c
   22b7c:	bl	11ed4 <ferror@plt>
   22b80:	clz	r0, r0
   22b84:	lsr	r0, r0, #5
   22b88:	pop	{r4, r5, r6, r7, fp, pc}
   22b8c:	push	{r4, r5, r6, r7, fp, lr}
   22b90:	add	fp, sp, #16
   22b94:	ldr	r5, [r0, #20]
   22b98:	ldr	r6, [r0, #24]
   22b9c:	mov	r4, r0
   22ba0:	cmp	r6, r5
   22ba4:	bne	22bb4 <__assert_fail@plt+0x10848>
   22ba8:	ldrb	r0, [r4, #52]	; 0x34
   22bac:	orr	r0, r0, #2
   22bb0:	strb	r0, [r4, #52]	; 0x34
   22bb4:	ldr	r1, [r4, #36]	; 0x24
   22bb8:	ldr	r2, [r4, #16]
   22bbc:	ldr	r0, [r4, #28]
   22bc0:	mvn	r7, r5
   22bc4:	add	r3, r1, r6
   22bc8:	bic	r1, r3, r1
   22bcc:	sub	r3, r1, r2
   22bd0:	sub	r2, r0, r2
   22bd4:	str	r1, [r4, #24]
   22bd8:	cmp	r3, r2
   22bdc:	movhi	r1, r0
   22be0:	strhi	r0, [r4, #24]
   22be4:	str	r1, [r4, #20]
   22be8:	ldr	r0, [r4, #68]	; 0x44
   22bec:	ldr	r1, [r4, #72]	; 0x48
   22bf0:	sub	r1, r1, r0
   22bf4:	cmp	r1, #4
   22bf8:	bcs	22c0c <__assert_fail@plt+0x108a0>
   22bfc:	add	r0, r4, #56	; 0x38
   22c00:	mov	r1, #4
   22c04:	bl	25ad8 <_obstack_newchunk@@Base>
   22c08:	ldr	r0, [r4, #68]	; 0x44
   22c0c:	str	r5, [r0]
   22c10:	add	r6, r6, r7
   22c14:	ldr	r1, [r4, #68]	; 0x44
   22c18:	ldr	r0, [r4, #112]	; 0x70
   22c1c:	ldr	r2, [r4, #116]	; 0x74
   22c20:	add	r1, r1, #4
   22c24:	str	r1, [r4, #68]	; 0x44
   22c28:	sub	r1, r2, r0
   22c2c:	cmp	r1, #4
   22c30:	bcs	22c44 <__assert_fail@plt+0x108d8>
   22c34:	add	r0, r4, #100	; 0x64
   22c38:	mov	r1, #4
   22c3c:	bl	25ad8 <_obstack_newchunk@@Base>
   22c40:	ldr	r0, [r4, #112]	; 0x70
   22c44:	str	r6, [r0]
   22c48:	ldr	r0, [r4]
   22c4c:	ldr	r1, [r4, #112]	; 0x70
   22c50:	add	r1, r1, #4
   22c54:	add	r0, r0, #1
   22c58:	str	r1, [r4, #112]	; 0x70
   22c5c:	str	r0, [r4]
   22c60:	pop	{r4, r5, r6, r7, fp, pc}
   22c64:	push	{r4, r5, r6, r7, fp, lr}
   22c68:	add	fp, sp, #16
   22c6c:	mov	r4, r1
   22c70:	mov	r1, #0
   22c74:	mov	r6, r2
   22c78:	bl	1224c <setlocale@plt>
   22c7c:	cmp	r0, #0
   22c80:	beq	22cb0 <__assert_fail@plt+0x10944>
   22c84:	mov	r7, r0
   22c88:	bl	12174 <strlen@plt>
   22c8c:	cmp	r0, r6
   22c90:	bcs	22ccc <__assert_fail@plt+0x10960>
   22c94:	add	r2, r0, #1
   22c98:	mov	r0, r4
   22c9c:	mov	r1, r7
   22ca0:	bl	11eec <memcpy@plt>
   22ca4:	mov	r5, #0
   22ca8:	mov	r0, r5
   22cac:	pop	{r4, r5, r6, r7, fp, pc}
   22cb0:	mov	r5, #22
   22cb4:	cmp	r6, #0
   22cb8:	beq	22cf4 <__assert_fail@plt+0x10988>
   22cbc:	mov	r0, #0
   22cc0:	strb	r0, [r4]
   22cc4:	mov	r0, r5
   22cc8:	pop	{r4, r5, r6, r7, fp, pc}
   22ccc:	mov	r5, #34	; 0x22
   22cd0:	cmp	r6, #0
   22cd4:	beq	22cf4 <__assert_fail@plt+0x10988>
   22cd8:	sub	r6, r6, #1
   22cdc:	mov	r0, r4
   22ce0:	mov	r1, r7
   22ce4:	mov	r2, r6
   22ce8:	bl	11eec <memcpy@plt>
   22cec:	mov	r0, #0
   22cf0:	strb	r0, [r4, r6]
   22cf4:	mov	r0, r5
   22cf8:	pop	{r4, r5, r6, r7, fp, pc}
   22cfc:	mov	r1, #0
   22d00:	b	1224c <setlocale@plt>
   22d04:	push	{fp, lr}
   22d08:	mov	fp, sp
   22d0c:	bl	120d8 <mkstemp64@plt>
   22d10:	pop	{fp, lr}
   22d14:	b	2320c <__assert_fail@plt+0x10ea0>
   22d18:	push	{r4, sl, fp, lr}
   22d1c:	add	fp, sp, #8
   22d20:	mov	r4, r1
   22d24:	bl	12030 <mkostemp64@plt>
   22d28:	mov	r1, r4
   22d2c:	pop	{r4, sl, fp, lr}
   22d30:	b	255f0 <__assert_fail@plt+0x13284>
   22d34:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22d38:	add	fp, sp, #24
   22d3c:	ldrb	lr, [r0]
   22d40:	ldrb	r5, [r1]
   22d44:	cmp	lr, #45	; 0x2d
   22d48:	bne	22dc0 <__assert_fail@plt+0x10a54>
   22d4c:	ldrb	r4, [r0, #1]!
   22d50:	cmp	r4, #48	; 0x30
   22d54:	beq	22d4c <__assert_fail@plt+0x109e0>
   22d58:	cmp	r4, r3
   22d5c:	beq	22d4c <__assert_fail@plt+0x109e0>
   22d60:	cmp	r5, #45	; 0x2d
   22d64:	bne	22eac <__assert_fail@plt+0x10b40>
   22d68:	ldrb	r5, [r1, #1]!
   22d6c:	cmp	r5, #48	; 0x30
   22d70:	beq	22d68 <__assert_fail@plt+0x109fc>
   22d74:	cmp	r5, r3
   22d78:	beq	22d68 <__assert_fail@plt+0x109fc>
   22d7c:	sub	r6, r4, #48	; 0x30
   22d80:	mov	ip, #0
   22d84:	cmp	r6, #10
   22d88:	mov	lr, #0
   22d8c:	movwcc	lr, #1
   22d90:	cmp	r6, #9
   22d94:	bhi	22f14 <__assert_fail@plt+0x10ba8>
   22d98:	cmp	r5, r4
   22d9c:	bne	22f14 <__assert_fail@plt+0x10ba8>
   22da0:	ldrb	r4, [r0, #1]!
   22da4:	cmp	r4, r3
   22da8:	beq	22da0 <__assert_fail@plt+0x10a34>
   22dac:	ldrb	r5, [r1, #1]!
   22db0:	cmp	r5, r3
   22db4:	beq	22dac <__assert_fail@plt+0x10a40>
   22db8:	sub	r6, r4, #48	; 0x30
   22dbc:	b	22d84 <__assert_fail@plt+0x10a18>
   22dc0:	cmp	r5, #45	; 0x2d
   22dc4:	bne	22e48 <__assert_fail@plt+0x10adc>
   22dc8:	ldrb	r6, [r1, #1]!
   22dcc:	cmp	r6, #48	; 0x30
   22dd0:	beq	22dc8 <__assert_fail@plt+0x10a5c>
   22dd4:	cmp	r6, r3
   22dd8:	beq	22dc8 <__assert_fail@plt+0x10a5c>
   22ddc:	cmp	r6, r2
   22de0:	bne	22df8 <__assert_fail@plt+0x10a8c>
   22de4:	mov	r7, #1
   22de8:	ldrb	r6, [r1, r7]
   22dec:	add	r7, r7, #1
   22df0:	cmp	r6, #48	; 0x30
   22df4:	beq	22de8 <__assert_fail@plt+0x10a7c>
   22df8:	sub	r1, r6, #48	; 0x30
   22dfc:	mov	ip, #1
   22e00:	cmp	r1, #10
   22e04:	bcc	231f8 <__assert_fail@plt+0x10e8c>
   22e08:	cmp	lr, #48	; 0x30
   22e0c:	cmpne	lr, r3
   22e10:	bne	22e24 <__assert_fail@plt+0x10ab8>
   22e14:	ldrb	lr, [r0, #1]!
   22e18:	cmp	lr, #48	; 0x30
   22e1c:	cmpne	lr, r3
   22e20:	beq	22e14 <__assert_fail@plt+0x10aa8>
   22e24:	cmp	lr, r2
   22e28:	bne	22e3c <__assert_fail@plt+0x10ad0>
   22e2c:	add	r0, r0, #1
   22e30:	ldrb	lr, [r0], #1
   22e34:	cmp	lr, #48	; 0x30
   22e38:	beq	22e30 <__assert_fail@plt+0x10ac4>
   22e3c:	sub	r0, lr, #48	; 0x30
   22e40:	b	23198 <__assert_fail@plt+0x10e2c>
   22e44:	ldrb	lr, [r0, #1]!
   22e48:	cmp	lr, #48	; 0x30
   22e4c:	cmpne	lr, r3
   22e50:	beq	22e44 <__assert_fail@plt+0x10ad8>
   22e54:	b	22e5c <__assert_fail@plt+0x10af0>
   22e58:	ldrb	r5, [r1, #1]!
   22e5c:	cmp	r5, #48	; 0x30
   22e60:	cmpne	r5, r3
   22e64:	beq	22e58 <__assert_fail@plt+0x10aec>
   22e68:	sub	r6, lr, #48	; 0x30
   22e6c:	mov	ip, #0
   22e70:	cmp	r6, #10
   22e74:	mov	r4, #0
   22e78:	movwcc	r4, #1
   22e7c:	cmp	r6, #9
   22e80:	bhi	22fbc <__assert_fail@plt+0x10c50>
   22e84:	cmp	lr, r5
   22e88:	bne	22fbc <__assert_fail@plt+0x10c50>
   22e8c:	ldrb	lr, [r0, #1]!
   22e90:	cmp	lr, r3
   22e94:	beq	22e8c <__assert_fail@plt+0x10b20>
   22e98:	ldrb	r5, [r1, #1]!
   22e9c:	cmp	r5, r3
   22ea0:	beq	22e98 <__assert_fail@plt+0x10b2c>
   22ea4:	sub	r6, lr, #48	; 0x30
   22ea8:	b	22e70 <__assert_fail@plt+0x10b04>
   22eac:	cmp	r4, r2
   22eb0:	bne	22ec8 <__assert_fail@plt+0x10b5c>
   22eb4:	mov	r7, #1
   22eb8:	ldrb	r4, [r0, r7]
   22ebc:	add	r7, r7, #1
   22ec0:	cmp	r4, #48	; 0x30
   22ec4:	beq	22eb8 <__assert_fail@plt+0x10b4c>
   22ec8:	sub	r0, r4, #48	; 0x30
   22ecc:	mvn	ip, #0
   22ed0:	cmp	r0, #10
   22ed4:	bcc	231f8 <__assert_fail@plt+0x10e8c>
   22ed8:	cmp	r5, #48	; 0x30
   22edc:	cmpne	r5, r3
   22ee0:	bne	22ef4 <__assert_fail@plt+0x10b88>
   22ee4:	ldrb	r5, [r1, #1]!
   22ee8:	cmp	r5, #48	; 0x30
   22eec:	cmpne	r5, r3
   22ef0:	beq	22ee4 <__assert_fail@plt+0x10b78>
   22ef4:	cmp	r5, r2
   22ef8:	bne	22f0c <__assert_fail@plt+0x10ba0>
   22efc:	add	r0, r1, #1
   22f00:	ldrb	r5, [r0], #1
   22f04:	cmp	r5, #48	; 0x30
   22f08:	beq	22f00 <__assert_fail@plt+0x10b94>
   22f0c:	sub	r0, r5, #48	; 0x30
   22f10:	b	23138 <__assert_fail@plt+0x10dcc>
   22f14:	sub	r6, r5, r2
   22f18:	subs	r7, r4, r2
   22f1c:	sub	r8, r5, #48	; 0x30
   22f20:	clz	r6, r6
   22f24:	movwne	r7, #1
   22f28:	cmp	r8, #10
   22f2c:	lsr	r9, r6, #5
   22f30:	eor	r6, lr, #1
   22f34:	movwcc	ip, #1
   22f38:	tst	r9, r6
   22f3c:	bne	23064 <__assert_fail@plt+0x10cf8>
   22f40:	orrs	r7, ip, r7
   22f44:	beq	23064 <__assert_fail@plt+0x10cf8>
   22f48:	sub	r7, r4, #48	; 0x30
   22f4c:	mov	r2, #0
   22f50:	mov	ip, #0
   22f54:	cmp	r7, #9
   22f58:	bhi	22f7c <__assert_fail@plt+0x10c10>
   22f5c:	mov	ip, #0
   22f60:	ldrb	r7, [r0, #1]!
   22f64:	cmp	r7, r3
   22f68:	beq	22f60 <__assert_fail@plt+0x10bf4>
   22f6c:	sub	r7, r7, #48	; 0x30
   22f70:	add	ip, ip, #1
   22f74:	cmp	r7, #10
   22f78:	bcc	22f60 <__assert_fail@plt+0x10bf4>
   22f7c:	cmp	r8, #9
   22f80:	bhi	22fa4 <__assert_fail@plt+0x10c38>
   22f84:	mov	r2, #0
   22f88:	ldrb	r0, [r1, #1]!
   22f8c:	cmp	r0, r3
   22f90:	beq	22f88 <__assert_fail@plt+0x10c1c>
   22f94:	sub	r0, r0, #48	; 0x30
   22f98:	add	r2, r2, #1
   22f9c:	cmp	r0, #10
   22fa0:	bcc	22f88 <__assert_fail@plt+0x10c1c>
   22fa4:	cmp	ip, r2
   22fa8:	bne	2314c <__assert_fail@plt+0x10de0>
   22fac:	cmp	ip, #0
   22fb0:	subne	ip, r5, r4
   22fb4:	mov	r0, ip
   22fb8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22fbc:	sub	r6, r5, r2
   22fc0:	subs	r7, lr, r2
   22fc4:	sub	r8, r5, #48	; 0x30
   22fc8:	eor	r4, r4, #1
   22fcc:	clz	r6, r6
   22fd0:	movwne	r7, #1
   22fd4:	cmp	r8, #10
   22fd8:	lsr	r6, r6, #5
   22fdc:	movwcc	ip, #1
   22fe0:	tst	r6, r4
   22fe4:	bne	230ac <__assert_fail@plt+0x10d40>
   22fe8:	orrs	r7, ip, r7
   22fec:	beq	230ac <__assert_fail@plt+0x10d40>
   22ff0:	sub	r7, lr, #48	; 0x30
   22ff4:	mov	r2, #0
   22ff8:	mov	ip, #0
   22ffc:	cmp	r7, #9
   23000:	bhi	23024 <__assert_fail@plt+0x10cb8>
   23004:	mov	ip, #0
   23008:	ldrb	r4, [r0, #1]!
   2300c:	cmp	r4, r3
   23010:	beq	23008 <__assert_fail@plt+0x10c9c>
   23014:	sub	r4, r4, #48	; 0x30
   23018:	add	ip, ip, #1
   2301c:	cmp	r4, #10
   23020:	bcc	23008 <__assert_fail@plt+0x10c9c>
   23024:	cmp	r8, #9
   23028:	bhi	2304c <__assert_fail@plt+0x10ce0>
   2302c:	mov	r2, #0
   23030:	ldrb	r0, [r1, #1]!
   23034:	cmp	r0, r3
   23038:	beq	23030 <__assert_fail@plt+0x10cc4>
   2303c:	sub	r0, r0, #48	; 0x30
   23040:	add	r2, r2, #1
   23044:	cmp	r0, #10
   23048:	bcc	23030 <__assert_fail@plt+0x10cc4>
   2304c:	cmp	ip, r2
   23050:	bne	2315c <__assert_fail@plt+0x10df0>
   23054:	cmp	ip, #0
   23058:	subne	ip, lr, r5
   2305c:	mov	r0, ip
   23060:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23064:	uxtb	r2, r2
   23068:	cmp	r5, r2
   2306c:	bne	230f4 <__assert_fail@plt+0x10d88>
   23070:	cmp	r4, r2
   23074:	bne	2316c <__assert_fail@plt+0x10e00>
   23078:	add	r0, r0, #1
   2307c:	add	r1, r1, #1
   23080:	mov	ip, #0
   23084:	ldrb	r7, [r1]
   23088:	ldrb	r3, [r0]
   2308c:	sub	r2, r7, #48	; 0x30
   23090:	cmp	r7, r3
   23094:	bne	231ac <__assert_fail@plt+0x10e40>
   23098:	add	r0, r0, #1
   2309c:	add	r1, r1, #1
   230a0:	cmp	r2, #10
   230a4:	bcc	23084 <__assert_fail@plt+0x10d18>
   230a8:	b	231f8 <__assert_fail@plt+0x10e8c>
   230ac:	uxtb	r2, r2
   230b0:	cmp	lr, r2
   230b4:	bne	23118 <__assert_fail@plt+0x10dac>
   230b8:	cmp	r5, lr
   230bc:	bne	23184 <__assert_fail@plt+0x10e18>
   230c0:	add	r1, r1, #1
   230c4:	add	r0, r0, #1
   230c8:	mov	ip, #0
   230cc:	ldrb	r7, [r0]
   230d0:	ldrb	r3, [r1]
   230d4:	sub	r2, r7, #48	; 0x30
   230d8:	cmp	r7, r3
   230dc:	bne	231d4 <__assert_fail@plt+0x10e68>
   230e0:	add	r1, r1, #1
   230e4:	add	r0, r0, #1
   230e8:	cmp	r2, #10
   230ec:	bcc	230cc <__assert_fail@plt+0x10d60>
   230f0:	b	231f8 <__assert_fail@plt+0x10e8c>
   230f4:	mov	ip, #0
   230f8:	cmp	r4, r2
   230fc:	bne	231f8 <__assert_fail@plt+0x10e8c>
   23100:	add	r0, r0, #1
   23104:	ldrb	r1, [r0], #1
   23108:	cmp	r1, #48	; 0x30
   2310c:	beq	23104 <__assert_fail@plt+0x10d98>
   23110:	sub	r0, r1, #48	; 0x30
   23114:	b	23138 <__assert_fail@plt+0x10dcc>
   23118:	mov	ip, #0
   2311c:	cmp	r5, r2
   23120:	bne	231f8 <__assert_fail@plt+0x10e8c>
   23124:	add	r1, r1, #1
   23128:	ldrb	r0, [r1], #1
   2312c:	cmp	r0, #48	; 0x30
   23130:	beq	23128 <__assert_fail@plt+0x10dbc>
   23134:	sub	r0, r0, #48	; 0x30
   23138:	mov	ip, #0
   2313c:	cmp	r0, #10
   23140:	mvncc	ip, #0
   23144:	mov	r0, ip
   23148:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2314c:	mvn	ip, #0
   23150:	movwcc	ip, #1
   23154:	mov	r0, ip
   23158:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2315c:	mov	ip, #1
   23160:	mvncc	ip, #0
   23164:	mov	r0, ip
   23168:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2316c:	add	r1, r1, #1
   23170:	ldrb	r0, [r1], #1
   23174:	cmp	r0, #48	; 0x30
   23178:	beq	23170 <__assert_fail@plt+0x10e04>
   2317c:	sub	r0, r0, #48	; 0x30
   23180:	b	23198 <__assert_fail@plt+0x10e2c>
   23184:	add	r0, r0, #1
   23188:	ldrb	r1, [r0], #1
   2318c:	cmp	r1, #48	; 0x30
   23190:	beq	23188 <__assert_fail@plt+0x10e1c>
   23194:	sub	r0, r1, #48	; 0x30
   23198:	mov	ip, #0
   2319c:	cmp	r0, #10
   231a0:	movwcc	ip, #1
   231a4:	mov	r0, ip
   231a8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   231ac:	sub	r6, r3, #48	; 0x30
   231b0:	cmp	r2, #9
   231b4:	cmpls	r6, #9
   231b8:	bls	23200 <__assert_fail@plt+0x10e94>
   231bc:	cmp	r2, #10
   231c0:	bcc	23170 <__assert_fail@plt+0x10e04>
   231c4:	mov	ip, #0
   231c8:	cmp	r6, #10
   231cc:	bcc	23104 <__assert_fail@plt+0x10d98>
   231d0:	b	231f8 <__assert_fail@plt+0x10e8c>
   231d4:	sub	r6, r3, #48	; 0x30
   231d8:	cmp	r2, #9
   231dc:	cmpls	r6, #9
   231e0:	bls	23200 <__assert_fail@plt+0x10e94>
   231e4:	cmp	r2, #10
   231e8:	bcc	23188 <__assert_fail@plt+0x10e1c>
   231ec:	mov	ip, #0
   231f0:	cmp	r6, #10
   231f4:	bcc	23128 <__assert_fail@plt+0x10dbc>
   231f8:	mov	r0, ip
   231fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   23200:	sub	ip, r7, r3
   23204:	mov	r0, ip
   23208:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2320c:	push	{r4, r5, r6, r7, fp, lr}
   23210:	add	fp, sp, #16
   23214:	mov	r4, r0
   23218:	cmp	r0, #2
   2321c:	bhi	2324c <__assert_fail@plt+0x10ee0>
   23220:	mov	r0, r4
   23224:	bl	25dd4 <_obstack_memory_used@@Base+0xb4>
   23228:	mov	r5, r0
   2322c:	bl	12198 <__errno_location@plt>
   23230:	ldr	r7, [r0]
   23234:	mov	r6, r0
   23238:	mov	r0, r4
   2323c:	bl	12354 <close@plt>
   23240:	mov	r0, r5
   23244:	str	r7, [r6]
   23248:	pop	{r4, r5, r6, r7, fp, pc}
   2324c:	mov	r0, r4
   23250:	pop	{r4, r5, r6, r7, fp, pc}
   23254:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   23258:	add	fp, sp, #24
   2325c:	sub	sp, sp, #32
   23260:	ldr	r6, [fp, #12]
   23264:	ldr	r7, [fp, #8]
   23268:	mov	r4, r2
   2326c:	mov	r8, r0
   23270:	cmp	r1, #0
   23274:	beq	2329c <__assert_fail@plt+0x10f30>
   23278:	movw	r2, #34270	; 0x85de
   2327c:	mov	r5, r1
   23280:	str	r3, [sp, #4]
   23284:	str	r4, [sp]
   23288:	mov	r0, r8
   2328c:	mov	r1, #1
   23290:	movt	r2, #2
   23294:	mov	r3, r5
   23298:	b	232b4 <__assert_fail@plt+0x10f48>
   2329c:	movw	r2, #34282	; 0x85ea
   232a0:	str	r3, [sp]
   232a4:	mov	r0, r8
   232a8:	mov	r1, #1
   232ac:	mov	r3, r4
   232b0:	movt	r2, #2
   232b4:	bl	121f8 <__fprintf_chk@plt>
   232b8:	movw	r1, #34289	; 0x85f1
   232bc:	mov	r0, #0
   232c0:	mov	r2, #5
   232c4:	movt	r1, #2
   232c8:	bl	11f7c <dcgettext@plt>
   232cc:	movw	r2, #35007	; 0x88bf
   232d0:	mov	r3, r0
   232d4:	movw	r0, #2022	; 0x7e6
   232d8:	mov	r1, #1
   232dc:	movt	r2, #2
   232e0:	str	r0, [sp]
   232e4:	mov	r0, r8
   232e8:	bl	121f8 <__fprintf_chk@plt>
   232ec:	movw	r4, #25763	; 0x64a3
   232f0:	mov	r1, r8
   232f4:	movt	r4, #2
   232f8:	mov	r0, r4
   232fc:	bl	11e38 <fputs_unlocked@plt>
   23300:	movw	r1, #34293	; 0x85f5
   23304:	mov	r0, #0
   23308:	mov	r2, #5
   2330c:	movt	r1, #2
   23310:	bl	11f7c <dcgettext@plt>
   23314:	movw	r3, #34464	; 0x86a0
   23318:	mov	r2, r0
   2331c:	mov	r0, r8
   23320:	mov	r1, #1
   23324:	movt	r3, #2
   23328:	bl	121f8 <__fprintf_chk@plt>
   2332c:	mov	r0, r4
   23330:	mov	r1, r8
   23334:	bl	11e38 <fputs_unlocked@plt>
   23338:	cmp	r6, #9
   2333c:	bhi	23378 <__assert_fail@plt+0x1100c>
   23340:	add	r0, pc, #0
   23344:	ldr	pc, [r0, r6, lsl #2]
   23348:	andeq	r3, r2, r0, ror r3
   2334c:	andeq	r3, r2, r4, lsl #7
   23350:			; <UNDEFINED> instruction: 0x000233b4
   23354:	ldrdeq	r3, [r2], -ip
   23358:	andeq	r3, r2, r4, lsl #8
   2335c:	andeq	r3, r2, ip, lsr #8
   23360:	andeq	r3, r2, r4, asr r4
   23364:	andeq	r3, r2, ip, lsl #9
   23368:	andeq	r3, r2, r4, lsr r5
   2336c:	ldrdeq	r3, [r2], -ip
   23370:	sub	sp, fp, #24
   23374:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23378:	movw	r1, #34817	; 0x8801
   2337c:	movt	r1, #2
   23380:	b	234e4 <__assert_fail@plt+0x11178>
   23384:	movw	r1, #34498	; 0x86c2
   23388:	mov	r0, #0
   2338c:	mov	r2, #5
   23390:	movt	r1, #2
   23394:	bl	11f7c <dcgettext@plt>
   23398:	ldr	r3, [r7]
   2339c:	mov	r2, r0
   233a0:	mov	r0, r8
   233a4:	mov	r1, #1
   233a8:	sub	sp, fp, #24
   233ac:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   233b0:	b	121f8 <__fprintf_chk@plt>
   233b4:	movw	r1, #34514	; 0x86d2
   233b8:	mov	r0, #0
   233bc:	mov	r2, #5
   233c0:	movt	r1, #2
   233c4:	bl	11f7c <dcgettext@plt>
   233c8:	mov	r2, r0
   233cc:	ldr	r3, [r7]
   233d0:	ldr	r0, [r7, #4]
   233d4:	str	r0, [sp]
   233d8:	b	234c8 <__assert_fail@plt+0x1115c>
   233dc:	movw	r1, #34537	; 0x86e9
   233e0:	mov	r0, #0
   233e4:	mov	r2, #5
   233e8:	movt	r1, #2
   233ec:	bl	11f7c <dcgettext@plt>
   233f0:	mov	r2, r0
   233f4:	ldr	r3, [r7]
   233f8:	ldmib	r7, {r0, r1}
   233fc:	stm	sp, {r0, r1}
   23400:	b	234c8 <__assert_fail@plt+0x1115c>
   23404:	movw	r1, #34565	; 0x8705
   23408:	mov	r0, #0
   2340c:	mov	r2, #5
   23410:	movt	r1, #2
   23414:	bl	11f7c <dcgettext@plt>
   23418:	ldr	r3, [r7]
   2341c:	mov	r2, r0
   23420:	ldmib	r7, {r0, r1, r7}
   23424:	stm	sp, {r0, r1, r7}
   23428:	b	234c8 <__assert_fail@plt+0x1115c>
   2342c:	movw	r1, #34597	; 0x8725
   23430:	mov	r0, #0
   23434:	mov	r2, #5
   23438:	movt	r1, #2
   2343c:	bl	11f7c <dcgettext@plt>
   23440:	ldr	r3, [r7]
   23444:	mov	r2, r0
   23448:	ldmib	r7, {r0, r1, r6, r7}
   2344c:	stm	sp, {r0, r1, r6, r7}
   23450:	b	234c8 <__assert_fail@plt+0x1115c>
   23454:	movw	r1, #34633	; 0x8749
   23458:	mov	r0, #0
   2345c:	mov	r2, #5
   23460:	movt	r1, #2
   23464:	bl	11f7c <dcgettext@plt>
   23468:	mov	r2, r0
   2346c:	ldr	r3, [r7]
   23470:	ldmib	r7, {r0, r1, r6}
   23474:	ldr	r5, [r7, #16]
   23478:	ldr	r7, [r7, #20]
   2347c:	stm	sp, {r0, r1, r6}
   23480:	str	r5, [sp, #12]
   23484:	str	r7, [sp, #16]
   23488:	b	234c8 <__assert_fail@plt+0x1115c>
   2348c:	movw	r1, #34673	; 0x8771
   23490:	mov	r0, #0
   23494:	mov	r2, #5
   23498:	movt	r1, #2
   2349c:	bl	11f7c <dcgettext@plt>
   234a0:	mov	r2, r0
   234a4:	ldr	r3, [r7]
   234a8:	ldmib	r7, {r0, r1, r6}
   234ac:	ldr	r5, [r7, #16]
   234b0:	ldr	r4, [r7, #20]
   234b4:	ldr	r7, [r7, #24]
   234b8:	stm	sp, {r0, r1, r6}
   234bc:	str	r5, [sp, #12]
   234c0:	str	r4, [sp, #16]
   234c4:	str	r7, [sp, #20]
   234c8:	mov	r0, r8
   234cc:	mov	r1, #1
   234d0:	bl	121f8 <__fprintf_chk@plt>
   234d4:	sub	sp, fp, #24
   234d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   234dc:	movw	r1, #34765	; 0x87cd
   234e0:	movt	r1, #2
   234e4:	mov	r0, #0
   234e8:	mov	r2, #5
   234ec:	bl	11f7c <dcgettext@plt>
   234f0:	mov	ip, r0
   234f4:	ldr	r3, [r7]
   234f8:	ldr	r0, [r7, #4]
   234fc:	ldr	r1, [r7, #8]
   23500:	ldr	r6, [r7, #12]
   23504:	ldr	r5, [r7, #16]
   23508:	ldr	r4, [r7, #20]
   2350c:	ldr	r2, [r7, #24]
   23510:	ldr	lr, [r7, #28]
   23514:	ldr	r7, [r7, #32]
   23518:	stm	sp, {r0, r1, r6}
   2351c:	str	r5, [sp, #12]
   23520:	str	r4, [sp, #16]
   23524:	str	r2, [sp, #20]
   23528:	str	lr, [sp, #24]
   2352c:	str	r7, [sp, #28]
   23530:	b	23578 <__assert_fail@plt+0x1120c>
   23534:	movw	r1, #34717	; 0x879d
   23538:	mov	r0, #0
   2353c:	mov	r2, #5
   23540:	movt	r1, #2
   23544:	bl	11f7c <dcgettext@plt>
   23548:	mov	ip, r0
   2354c:	ldr	r3, [r7]
   23550:	ldmib	r7, {r0, r1, r6}
   23554:	ldr	r5, [r7, #16]
   23558:	ldr	r4, [r7, #20]
   2355c:	ldr	r2, [r7, #24]
   23560:	ldr	r7, [r7, #28]
   23564:	stm	sp, {r0, r1, r6}
   23568:	str	r5, [sp, #12]
   2356c:	str	r4, [sp, #16]
   23570:	str	r2, [sp, #20]
   23574:	str	r7, [sp, #24]
   23578:	mov	r0, r8
   2357c:	mov	r1, #1
   23580:	mov	r2, ip
   23584:	bl	121f8 <__fprintf_chk@plt>
   23588:	sub	sp, fp, #24
   2358c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23590:	push	{r4, sl, fp, lr}
   23594:	add	fp, sp, #8
   23598:	sub	sp, sp, #8
   2359c:	ldr	ip, [fp, #8]
   235a0:	mov	lr, #0
   235a4:	ldr	r4, [ip, lr, lsl #2]
   235a8:	add	lr, lr, #1
   235ac:	cmp	r4, #0
   235b0:	bne	235a4 <__assert_fail@plt+0x11238>
   235b4:	sub	r4, lr, #1
   235b8:	str	ip, [sp]
   235bc:	str	r4, [sp, #4]
   235c0:	bl	23254 <__assert_fail@plt+0x10ee8>
   235c4:	sub	sp, fp, #8
   235c8:	pop	{r4, sl, fp, pc}
   235cc:	push	{fp, lr}
   235d0:	mov	fp, sp
   235d4:	sub	sp, sp, #48	; 0x30
   235d8:	ldr	ip, [fp, #8]
   235dc:	ldr	lr, [ip]
   235e0:	cmp	lr, #0
   235e4:	str	lr, [sp, #8]
   235e8:	beq	23684 <__assert_fail@plt+0x11318>
   235ec:	ldr	lr, [ip, #4]
   235f0:	cmp	lr, #0
   235f4:	str	lr, [sp, #12]
   235f8:	beq	2368c <__assert_fail@plt+0x11320>
   235fc:	ldr	lr, [ip, #8]
   23600:	cmp	lr, #0
   23604:	str	lr, [sp, #16]
   23608:	beq	23694 <__assert_fail@plt+0x11328>
   2360c:	ldr	lr, [ip, #12]
   23610:	cmp	lr, #0
   23614:	str	lr, [sp, #20]
   23618:	beq	2369c <__assert_fail@plt+0x11330>
   2361c:	ldr	lr, [ip, #16]
   23620:	cmp	lr, #0
   23624:	str	lr, [sp, #24]
   23628:	beq	236a4 <__assert_fail@plt+0x11338>
   2362c:	ldr	lr, [ip, #20]
   23630:	cmp	lr, #0
   23634:	str	lr, [sp, #28]
   23638:	beq	236ac <__assert_fail@plt+0x11340>
   2363c:	ldr	lr, [ip, #24]
   23640:	cmp	lr, #0
   23644:	str	lr, [sp, #32]
   23648:	beq	236b4 <__assert_fail@plt+0x11348>
   2364c:	ldr	lr, [ip, #28]
   23650:	cmp	lr, #0
   23654:	str	lr, [sp, #36]	; 0x24
   23658:	beq	236bc <__assert_fail@plt+0x11350>
   2365c:	ldr	lr, [ip, #32]
   23660:	cmp	lr, #0
   23664:	str	lr, [sp, #40]	; 0x28
   23668:	beq	236c4 <__assert_fail@plt+0x11358>
   2366c:	ldr	lr, [ip, #36]	; 0x24
   23670:	mov	ip, #10
   23674:	cmp	lr, #0
   23678:	str	lr, [sp, #44]	; 0x2c
   2367c:	movweq	ip, #9
   23680:	b	236c8 <__assert_fail@plt+0x1135c>
   23684:	mov	ip, #0
   23688:	b	236c8 <__assert_fail@plt+0x1135c>
   2368c:	mov	ip, #1
   23690:	b	236c8 <__assert_fail@plt+0x1135c>
   23694:	mov	ip, #2
   23698:	b	236c8 <__assert_fail@plt+0x1135c>
   2369c:	mov	ip, #3
   236a0:	b	236c8 <__assert_fail@plt+0x1135c>
   236a4:	mov	ip, #4
   236a8:	b	236c8 <__assert_fail@plt+0x1135c>
   236ac:	mov	ip, #5
   236b0:	b	236c8 <__assert_fail@plt+0x1135c>
   236b4:	mov	ip, #6
   236b8:	b	236c8 <__assert_fail@plt+0x1135c>
   236bc:	mov	ip, #7
   236c0:	b	236c8 <__assert_fail@plt+0x1135c>
   236c4:	mov	ip, #8
   236c8:	add	lr, sp, #8
   236cc:	str	ip, [sp, #4]
   236d0:	str	lr, [sp]
   236d4:	bl	23254 <__assert_fail@plt+0x10ee8>
   236d8:	mov	sp, fp
   236dc:	pop	{fp, pc}
   236e0:	push	{fp, lr}
   236e4:	mov	fp, sp
   236e8:	sub	sp, sp, #56	; 0x38
   236ec:	add	ip, fp, #8
   236f0:	str	ip, [sp, #12]
   236f4:	ldr	lr, [fp, #8]
   236f8:	cmp	lr, #0
   236fc:	str	lr, [sp, #16]
   23700:	beq	2379c <__assert_fail@plt+0x11430>
   23704:	ldr	lr, [ip, #4]
   23708:	cmp	lr, #0
   2370c:	str	lr, [sp, #20]
   23710:	beq	237a4 <__assert_fail@plt+0x11438>
   23714:	ldr	lr, [ip, #8]
   23718:	cmp	lr, #0
   2371c:	str	lr, [sp, #24]
   23720:	beq	237ac <__assert_fail@plt+0x11440>
   23724:	ldr	lr, [ip, #12]
   23728:	cmp	lr, #0
   2372c:	str	lr, [sp, #28]
   23730:	beq	237b4 <__assert_fail@plt+0x11448>
   23734:	ldr	lr, [ip, #16]
   23738:	cmp	lr, #0
   2373c:	str	lr, [sp, #32]
   23740:	beq	237bc <__assert_fail@plt+0x11450>
   23744:	ldr	lr, [ip, #20]
   23748:	cmp	lr, #0
   2374c:	str	lr, [sp, #36]	; 0x24
   23750:	beq	237c4 <__assert_fail@plt+0x11458>
   23754:	ldr	lr, [ip, #24]
   23758:	cmp	lr, #0
   2375c:	str	lr, [sp, #40]	; 0x28
   23760:	beq	237cc <__assert_fail@plt+0x11460>
   23764:	ldr	lr, [ip, #28]
   23768:	cmp	lr, #0
   2376c:	str	lr, [sp, #44]	; 0x2c
   23770:	beq	237d4 <__assert_fail@plt+0x11468>
   23774:	ldr	lr, [ip, #32]
   23778:	cmp	lr, #0
   2377c:	str	lr, [sp, #48]	; 0x30
   23780:	beq	237dc <__assert_fail@plt+0x11470>
   23784:	ldr	lr, [ip, #36]	; 0x24
   23788:	mov	ip, #10
   2378c:	cmp	lr, #0
   23790:	str	lr, [sp, #52]	; 0x34
   23794:	movweq	ip, #9
   23798:	b	237e0 <__assert_fail@plt+0x11474>
   2379c:	mov	ip, #0
   237a0:	b	237e0 <__assert_fail@plt+0x11474>
   237a4:	mov	ip, #1
   237a8:	b	237e0 <__assert_fail@plt+0x11474>
   237ac:	mov	ip, #2
   237b0:	b	237e0 <__assert_fail@plt+0x11474>
   237b4:	mov	ip, #3
   237b8:	b	237e0 <__assert_fail@plt+0x11474>
   237bc:	mov	ip, #4
   237c0:	b	237e0 <__assert_fail@plt+0x11474>
   237c4:	mov	ip, #5
   237c8:	b	237e0 <__assert_fail@plt+0x11474>
   237cc:	mov	ip, #6
   237d0:	b	237e0 <__assert_fail@plt+0x11474>
   237d4:	mov	ip, #7
   237d8:	b	237e0 <__assert_fail@plt+0x11474>
   237dc:	mov	ip, #8
   237e0:	add	lr, sp, #16
   237e4:	str	ip, [sp, #4]
   237e8:	str	lr, [sp]
   237ec:	bl	23254 <__assert_fail@plt+0x10ee8>
   237f0:	mov	sp, fp
   237f4:	pop	{fp, pc}
   237f8:	push	{fp, lr}
   237fc:	mov	fp, sp
   23800:	movw	r0, #37596	; 0x92dc
   23804:	movt	r0, #3
   23808:	ldr	r1, [r0]
   2380c:	movw	r0, #25763	; 0x64a3
   23810:	movt	r0, #2
   23814:	bl	11e38 <fputs_unlocked@plt>
   23818:	movw	r1, #34877	; 0x883d
   2381c:	mov	r0, #0
   23820:	mov	r2, #5
   23824:	movt	r1, #2
   23828:	bl	11f7c <dcgettext@plt>
   2382c:	movw	r2, #34897	; 0x8851
   23830:	mov	r1, r0
   23834:	mov	r0, #1
   23838:	movt	r2, #2
   2383c:	bl	121d4 <__printf_chk@plt>
   23840:	movw	r1, #34919	; 0x8867
   23844:	mov	r0, #0
   23848:	mov	r2, #5
   2384c:	movt	r1, #2
   23850:	bl	11f7c <dcgettext@plt>
   23854:	movw	r2, #29812	; 0x7474
   23858:	movw	r3, #30497	; 0x7721
   2385c:	mov	r1, r0
   23860:	mov	r0, #1
   23864:	movt	r2, #2
   23868:	movt	r3, #2
   2386c:	bl	121d4 <__printf_chk@plt>
   23870:	movw	r1, #34939	; 0x887b
   23874:	mov	r0, #0
   23878:	mov	r2, #5
   2387c:	movt	r1, #2
   23880:	bl	11f7c <dcgettext@plt>
   23884:	movw	r2, #34978	; 0x88a2
   23888:	mov	r1, r0
   2388c:	mov	r0, #1
   23890:	movt	r2, #2
   23894:	pop	{fp, lr}
   23898:	b	121d4 <__printf_chk@plt>
   2389c:	push	{r4, r5, r6, sl, fp, lr}
   238a0:	add	fp, sp, #16
   238a4:	mov	r4, r2
   238a8:	mov	r5, r1
   238ac:	mov	r6, r0
   238b0:	bl	25d98 <_obstack_memory_used@@Base+0x78>
   238b4:	cmp	r0, #0
   238b8:	popne	{r4, r5, r6, sl, fp, pc}
   238bc:	cmp	r6, #0
   238c0:	beq	238d4 <__assert_fail@plt+0x11568>
   238c4:	cmp	r5, #0
   238c8:	cmpne	r4, #0
   238cc:	bne	238d4 <__assert_fail@plt+0x11568>
   238d0:	pop	{r4, r5, r6, sl, fp, pc}
   238d4:	bl	23e50 <__assert_fail@plt+0x11ae4>
   238d8:	push	{r4, r5, r6, sl, fp, lr}
   238dc:	add	fp, sp, #16
   238e0:	mov	r4, r2
   238e4:	mov	r5, r1
   238e8:	mov	r6, r0
   238ec:	bl	25d98 <_obstack_memory_used@@Base+0x78>
   238f0:	cmp	r0, #0
   238f4:	popne	{r4, r5, r6, sl, fp, pc}
   238f8:	cmp	r6, #0
   238fc:	beq	23910 <__assert_fail@plt+0x115a4>
   23900:	cmp	r5, #0
   23904:	cmpne	r4, #0
   23908:	bne	23910 <__assert_fail@plt+0x115a4>
   2390c:	pop	{r4, r5, r6, sl, fp, pc}
   23910:	bl	23e50 <__assert_fail@plt+0x11ae4>
   23914:	push	{fp, lr}
   23918:	mov	fp, sp
   2391c:	bl	24f0c <__assert_fail@plt+0x12ba0>
   23920:	cmp	r0, #0
   23924:	popne	{fp, pc}
   23928:	bl	23e50 <__assert_fail@plt+0x11ae4>
   2392c:	push	{fp, lr}
   23930:	mov	fp, sp
   23934:	bl	24f0c <__assert_fail@plt+0x12ba0>
   23938:	cmp	r0, #0
   2393c:	popne	{fp, pc}
   23940:	bl	23e50 <__assert_fail@plt+0x11ae4>
   23944:	push	{fp, lr}
   23948:	mov	fp, sp
   2394c:	bl	24f0c <__assert_fail@plt+0x12ba0>
   23950:	cmp	r0, #0
   23954:	popne	{fp, pc}
   23958:	bl	23e50 <__assert_fail@plt+0x11ae4>
   2395c:	push	{r4, r5, fp, lr}
   23960:	add	fp, sp, #8
   23964:	mov	r4, r1
   23968:	mov	r5, r0
   2396c:	bl	24f3c <__assert_fail@plt+0x12bd0>
   23970:	cmp	r0, #0
   23974:	popne	{r4, r5, fp, pc}
   23978:	cmp	r5, #0
   2397c:	beq	2398c <__assert_fail@plt+0x11620>
   23980:	cmp	r4, #0
   23984:	bne	2398c <__assert_fail@plt+0x11620>
   23988:	pop	{r4, r5, fp, pc}
   2398c:	bl	23e50 <__assert_fail@plt+0x11ae4>
   23990:	push	{fp, lr}
   23994:	mov	fp, sp
   23998:	cmp	r1, #0
   2399c:	orreq	r1, r1, #1
   239a0:	bl	24f3c <__assert_fail@plt+0x12bd0>
   239a4:	cmp	r0, #0
   239a8:	popne	{fp, pc}
   239ac:	bl	23e50 <__assert_fail@plt+0x11ae4>
   239b0:	push	{fp, lr}
   239b4:	mov	fp, sp
   239b8:	clz	r3, r2
   239bc:	lsr	ip, r3, #5
   239c0:	clz	r3, r1
   239c4:	lsr	r3, r3, #5
   239c8:	orrs	r3, r3, ip
   239cc:	movwne	r1, #1
   239d0:	movwne	r2, #1
   239d4:	bl	25d98 <_obstack_memory_used@@Base+0x78>
   239d8:	cmp	r0, #0
   239dc:	popne	{fp, pc}
   239e0:	bl	23e50 <__assert_fail@plt+0x11ae4>
   239e4:	push	{fp, lr}
   239e8:	mov	fp, sp
   239ec:	mov	r2, r1
   239f0:	mov	r1, r0
   239f4:	mov	r0, #0
   239f8:	bl	25d98 <_obstack_memory_used@@Base+0x78>
   239fc:	cmp	r0, #0
   23a00:	popne	{fp, pc}
   23a04:	bl	23e50 <__assert_fail@plt+0x11ae4>
   23a08:	push	{fp, lr}
   23a0c:	mov	fp, sp
   23a10:	mov	r2, r1
   23a14:	mov	r1, r0
   23a18:	clz	r0, r2
   23a1c:	clz	r3, r1
   23a20:	lsr	r0, r0, #5
   23a24:	lsr	r3, r3, #5
   23a28:	orrs	r0, r3, r0
   23a2c:	mov	r0, #0
   23a30:	movwne	r1, #1
   23a34:	movwne	r2, #1
   23a38:	bl	25d98 <_obstack_memory_used@@Base+0x78>
   23a3c:	cmp	r0, #0
   23a40:	popne	{fp, pc}
   23a44:	bl	23e50 <__assert_fail@plt+0x11ae4>
   23a48:	push	{r4, r5, r6, sl, fp, lr}
   23a4c:	add	fp, sp, #16
   23a50:	ldr	r5, [r1]
   23a54:	mov	r4, r1
   23a58:	mov	r6, r0
   23a5c:	cmp	r0, #0
   23a60:	beq	23a78 <__assert_fail@plt+0x1170c>
   23a64:	mov	r0, #1
   23a68:	add	r0, r0, r5, lsr #1
   23a6c:	adds	r5, r5, r0
   23a70:	bcc	23a80 <__assert_fail@plt+0x11714>
   23a74:	b	23abc <__assert_fail@plt+0x11750>
   23a78:	cmp	r5, #0
   23a7c:	movweq	r5, #64	; 0x40
   23a80:	mov	r0, r6
   23a84:	mov	r1, r5
   23a88:	mov	r2, #1
   23a8c:	bl	25d98 <_obstack_memory_used@@Base+0x78>
   23a90:	cmp	r5, #0
   23a94:	mov	r1, r5
   23a98:	movwne	r1, #1
   23a9c:	cmp	r0, #0
   23aa0:	bne	23ab4 <__assert_fail@plt+0x11748>
   23aa4:	clz	r2, r6
   23aa8:	lsr	r2, r2, #5
   23aac:	orrs	r1, r2, r1
   23ab0:	bne	23abc <__assert_fail@plt+0x11750>
   23ab4:	str	r5, [r4]
   23ab8:	pop	{r4, r5, r6, sl, fp, pc}
   23abc:	bl	23e50 <__assert_fail@plt+0x11ae4>
   23ac0:	push	{r4, r5, r6, r7, fp, lr}
   23ac4:	add	fp, sp, #16
   23ac8:	ldr	r5, [r1]
   23acc:	mov	r6, r2
   23ad0:	mov	r4, r1
   23ad4:	mov	r7, r0
   23ad8:	cmp	r0, #0
   23adc:	beq	23af4 <__assert_fail@plt+0x11788>
   23ae0:	mov	r0, #1
   23ae4:	add	r0, r0, r5, lsr #1
   23ae8:	adds	r5, r5, r0
   23aec:	bcc	23b0c <__assert_fail@plt+0x117a0>
   23af0:	b	23b40 <__assert_fail@plt+0x117d4>
   23af4:	cmp	r5, #0
   23af8:	bne	23b0c <__assert_fail@plt+0x117a0>
   23afc:	mov	r0, #64	; 0x40
   23b00:	cmp	r6, #64	; 0x40
   23b04:	udiv	r5, r0, r6
   23b08:	addhi	r5, r5, #1
   23b0c:	mov	r0, r7
   23b10:	mov	r1, r5
   23b14:	mov	r2, r6
   23b18:	bl	25d98 <_obstack_memory_used@@Base+0x78>
   23b1c:	cmp	r0, #0
   23b20:	bne	23b38 <__assert_fail@plt+0x117cc>
   23b24:	cmp	r7, #0
   23b28:	beq	23b40 <__assert_fail@plt+0x117d4>
   23b2c:	cmp	r6, #0
   23b30:	cmpne	r5, #0
   23b34:	bne	23b40 <__assert_fail@plt+0x117d4>
   23b38:	str	r5, [r4]
   23b3c:	pop	{r4, r5, r6, r7, fp, pc}
   23b40:	bl	23e50 <__assert_fail@plt+0x11ae4>
   23b44:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   23b48:	add	fp, sp, #24
   23b4c:	mov	r8, r1
   23b50:	ldr	r1, [r1]
   23b54:	mov	r5, r0
   23b58:	add	r0, r1, r1, asr #1
   23b5c:	cmp	r0, r1
   23b60:	mvnvs	r0, #-2147483648	; 0x80000000
   23b64:	cmp	r0, r3
   23b68:	mov	r7, r0
   23b6c:	movgt	r7, r3
   23b70:	cmn	r3, #1
   23b74:	movle	r7, r0
   23b78:	ldr	r0, [fp, #8]
   23b7c:	cmn	r0, #1
   23b80:	ble	23ba8 <__assert_fail@plt+0x1183c>
   23b84:	cmp	r0, #0
   23b88:	beq	23bfc <__assert_fail@plt+0x11890>
   23b8c:	cmn	r7, #1
   23b90:	ble	23bd0 <__assert_fail@plt+0x11864>
   23b94:	mvn	r4, #-2147483648	; 0x80000000
   23b98:	udiv	r6, r4, r0
   23b9c:	cmp	r6, r7
   23ba0:	bge	23bfc <__assert_fail@plt+0x11890>
   23ba4:	b	23c0c <__assert_fail@plt+0x118a0>
   23ba8:	cmn	r7, #1
   23bac:	ble	23bec <__assert_fail@plt+0x11880>
   23bb0:	cmn	r0, #1
   23bb4:	beq	23bfc <__assert_fail@plt+0x11890>
   23bb8:	mov	r6, #-2147483648	; 0x80000000
   23bbc:	mvn	r4, #-2147483648	; 0x80000000
   23bc0:	sdiv	r6, r6, r0
   23bc4:	cmp	r6, r7
   23bc8:	bge	23bfc <__assert_fail@plt+0x11890>
   23bcc:	b	23c0c <__assert_fail@plt+0x118a0>
   23bd0:	beq	23bfc <__assert_fail@plt+0x11890>
   23bd4:	mov	r6, #-2147483648	; 0x80000000
   23bd8:	mvn	r4, #-2147483648	; 0x80000000
   23bdc:	sdiv	r6, r6, r7
   23be0:	cmp	r6, r0
   23be4:	bge	23bfc <__assert_fail@plt+0x11890>
   23be8:	b	23c0c <__assert_fail@plt+0x118a0>
   23bec:	mvn	r4, #-2147483648	; 0x80000000
   23bf0:	sdiv	r6, r4, r0
   23bf4:	cmp	r7, r6
   23bf8:	blt	23c0c <__assert_fail@plt+0x118a0>
   23bfc:	mul	r6, r7, r0
   23c00:	mov	r4, #64	; 0x40
   23c04:	cmp	r6, #63	; 0x3f
   23c08:	bgt	23c14 <__assert_fail@plt+0x118a8>
   23c0c:	sdiv	r7, r4, r0
   23c10:	mul	r6, r7, r0
   23c14:	cmp	r5, #0
   23c18:	moveq	r4, #0
   23c1c:	streq	r4, [r8]
   23c20:	sub	r4, r7, r1
   23c24:	cmp	r4, r2
   23c28:	bge	23cd4 <__assert_fail@plt+0x11968>
   23c2c:	add	r7, r1, r2
   23c30:	mov	r6, #0
   23c34:	mov	r2, #0
   23c38:	cmp	r7, r3
   23c3c:	movwgt	r6, #1
   23c40:	cmn	r3, #1
   23c44:	movwgt	r2, #1
   23c48:	cmp	r7, r1
   23c4c:	bvs	23d08 <__assert_fail@plt+0x1199c>
   23c50:	ands	r1, r2, r6
   23c54:	bne	23d08 <__assert_fail@plt+0x1199c>
   23c58:	cmn	r0, #1
   23c5c:	ble	23c84 <__assert_fail@plt+0x11918>
   23c60:	cmp	r0, #0
   23c64:	beq	23cd0 <__assert_fail@plt+0x11964>
   23c68:	cmn	r7, #1
   23c6c:	ble	23ca8 <__assert_fail@plt+0x1193c>
   23c70:	mvn	r1, #-2147483648	; 0x80000000
   23c74:	udiv	r1, r1, r0
   23c78:	cmp	r1, r7
   23c7c:	bge	23cd0 <__assert_fail@plt+0x11964>
   23c80:	b	23d08 <__assert_fail@plt+0x1199c>
   23c84:	cmn	r7, #1
   23c88:	ble	23cc0 <__assert_fail@plt+0x11954>
   23c8c:	cmn	r0, #1
   23c90:	beq	23cd0 <__assert_fail@plt+0x11964>
   23c94:	mov	r1, #-2147483648	; 0x80000000
   23c98:	sdiv	r1, r1, r0
   23c9c:	cmp	r1, r7
   23ca0:	bge	23cd0 <__assert_fail@plt+0x11964>
   23ca4:	b	23d08 <__assert_fail@plt+0x1199c>
   23ca8:	beq	23cd0 <__assert_fail@plt+0x11964>
   23cac:	mov	r1, #-2147483648	; 0x80000000
   23cb0:	sdiv	r1, r1, r7
   23cb4:	cmp	r1, r0
   23cb8:	bge	23cd0 <__assert_fail@plt+0x11964>
   23cbc:	b	23d08 <__assert_fail@plt+0x1199c>
   23cc0:	mvn	r1, #-2147483648	; 0x80000000
   23cc4:	sdiv	r1, r1, r0
   23cc8:	cmp	r7, r1
   23ccc:	blt	23d08 <__assert_fail@plt+0x1199c>
   23cd0:	mul	r6, r7, r0
   23cd4:	mov	r0, r5
   23cd8:	mov	r1, r6
   23cdc:	bl	24f3c <__assert_fail@plt+0x12bd0>
   23ce0:	cmp	r6, #0
   23ce4:	movwne	r6, #1
   23ce8:	cmp	r0, #0
   23cec:	bne	23d00 <__assert_fail@plt+0x11994>
   23cf0:	clz	r1, r5
   23cf4:	lsr	r1, r1, #5
   23cf8:	orrs	r1, r1, r6
   23cfc:	bne	23d08 <__assert_fail@plt+0x1199c>
   23d00:	str	r7, [r8]
   23d04:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   23d08:	bl	23e50 <__assert_fail@plt+0x11ae4>
   23d0c:	push	{fp, lr}
   23d10:	mov	fp, sp
   23d14:	mov	r1, #1
   23d18:	bl	24eb8 <__assert_fail@plt+0x12b4c>
   23d1c:	cmp	r0, #0
   23d20:	popne	{fp, pc}
   23d24:	bl	23e50 <__assert_fail@plt+0x11ae4>
   23d28:	push	{fp, lr}
   23d2c:	mov	fp, sp
   23d30:	bl	24eb8 <__assert_fail@plt+0x12b4c>
   23d34:	cmp	r0, #0
   23d38:	popne	{fp, pc}
   23d3c:	bl	23e50 <__assert_fail@plt+0x11ae4>
   23d40:	push	{fp, lr}
   23d44:	mov	fp, sp
   23d48:	mov	r1, #1
   23d4c:	bl	24eb8 <__assert_fail@plt+0x12b4c>
   23d50:	cmp	r0, #0
   23d54:	popne	{fp, pc}
   23d58:	bl	23e50 <__assert_fail@plt+0x11ae4>
   23d5c:	push	{fp, lr}
   23d60:	mov	fp, sp
   23d64:	bl	24eb8 <__assert_fail@plt+0x12b4c>
   23d68:	cmp	r0, #0
   23d6c:	popne	{fp, pc}
   23d70:	bl	23e50 <__assert_fail@plt+0x11ae4>
   23d74:	push	{r4, r5, fp, lr}
   23d78:	add	fp, sp, #8
   23d7c:	mov	r5, r0
   23d80:	mov	r0, r1
   23d84:	mov	r4, r1
   23d88:	bl	24f0c <__assert_fail@plt+0x12ba0>
   23d8c:	cmp	r0, #0
   23d90:	beq	23da4 <__assert_fail@plt+0x11a38>
   23d94:	mov	r1, r5
   23d98:	mov	r2, r4
   23d9c:	pop	{r4, r5, fp, lr}
   23da0:	b	11eec <memcpy@plt>
   23da4:	bl	23e50 <__assert_fail@plt+0x11ae4>
   23da8:	push	{r4, r5, fp, lr}
   23dac:	add	fp, sp, #8
   23db0:	mov	r5, r0
   23db4:	mov	r0, r1
   23db8:	mov	r4, r1
   23dbc:	bl	24f0c <__assert_fail@plt+0x12ba0>
   23dc0:	cmp	r0, #0
   23dc4:	beq	23dd8 <__assert_fail@plt+0x11a6c>
   23dc8:	mov	r1, r5
   23dcc:	mov	r2, r4
   23dd0:	pop	{r4, r5, fp, lr}
   23dd4:	b	11eec <memcpy@plt>
   23dd8:	bl	23e50 <__assert_fail@plt+0x11ae4>
   23ddc:	push	{r4, r5, fp, lr}
   23de0:	add	fp, sp, #8
   23de4:	mov	r5, r0
   23de8:	add	r0, r1, #1
   23dec:	mov	r4, r1
   23df0:	bl	24f0c <__assert_fail@plt+0x12ba0>
   23df4:	cmp	r0, #0
   23df8:	beq	23e14 <__assert_fail@plt+0x11aa8>
   23dfc:	mov	r1, #0
   23e00:	mov	r2, r4
   23e04:	strb	r1, [r0, r4]
   23e08:	mov	r1, r5
   23e0c:	pop	{r4, r5, fp, lr}
   23e10:	b	11eec <memcpy@plt>
   23e14:	bl	23e50 <__assert_fail@plt+0x11ae4>
   23e18:	push	{r4, r5, fp, lr}
   23e1c:	add	fp, sp, #8
   23e20:	mov	r4, r0
   23e24:	bl	12174 <strlen@plt>
   23e28:	add	r5, r0, #1
   23e2c:	mov	r0, r5
   23e30:	bl	24f0c <__assert_fail@plt+0x12ba0>
   23e34:	cmp	r0, #0
   23e38:	beq	23e4c <__assert_fail@plt+0x11ae0>
   23e3c:	mov	r1, r4
   23e40:	mov	r2, r5
   23e44:	pop	{r4, r5, fp, lr}
   23e48:	b	11eec <memcpy@plt>
   23e4c:	bl	23e50 <__assert_fail@plt+0x11ae4>
   23e50:	push	{fp, lr}
   23e54:	mov	fp, sp
   23e58:	movw	r0, #37488	; 0x9270
   23e5c:	movw	r1, #35054	; 0x88ee
   23e60:	mov	r2, #5
   23e64:	movt	r0, #3
   23e68:	movt	r1, #2
   23e6c:	ldr	r4, [r0]
   23e70:	mov	r0, #0
   23e74:	bl	11f7c <dcgettext@plt>
   23e78:	movw	r2, #33718	; 0x83b6
   23e7c:	mov	r3, r0
   23e80:	mov	r0, r4
   23e84:	mov	r1, #0
   23e88:	movt	r2, #2
   23e8c:	bl	120a8 <error@plt>
   23e90:	bl	12348 <abort@plt>
   23e94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23e98:	add	fp, sp, #28
   23e9c:	sub	sp, sp, #4
   23ea0:	mov	r9, r3
   23ea4:	mov	r6, r2
   23ea8:	mov	r7, r1
   23eac:	mov	r4, r0
   23eb0:	bl	25798 <__assert_fail@plt+0x1342c>
   23eb4:	mov	r8, r0
   23eb8:	bl	12198 <__errno_location@plt>
   23ebc:	ldr	r5, [r0]
   23ec0:	cmp	r5, #0
   23ec4:	beq	23f78 <__assert_fail@plt+0x11c0c>
   23ec8:	movw	r1, #35071	; 0x88ff
   23ecc:	mov	r0, #0
   23ed0:	mov	r2, #5
   23ed4:	movt	r1, #2
   23ed8:	bl	11f7c <dcgettext@plt>
   23edc:	mov	r2, r0
   23ee0:	mov	r0, #0
   23ee4:	mov	r1, r5
   23ee8:	bl	120a8 <error@plt>
   23eec:	movw	r1, #35096	; 0x8918
   23ef0:	mov	r0, #0
   23ef4:	mov	r2, #5
   23ef8:	movt	r1, #2
   23efc:	bl	11f7c <dcgettext@plt>
   23f00:	mov	r2, r0
   23f04:	mov	r0, #0
   23f08:	mov	r1, #0
   23f0c:	bl	120a8 <error@plt>
   23f10:	movw	r0, #37488	; 0x9270
   23f14:	movw	r1, #35139	; 0x8943
   23f18:	mov	r2, #5
   23f1c:	movt	r0, #3
   23f20:	movt	r1, #2
   23f24:	ldr	sl, [r0]
   23f28:	mov	r0, #0
   23f2c:	bl	11f7c <dcgettext@plt>
   23f30:	mov	r5, r0
   23f34:	mov	r0, #0
   23f38:	mov	r1, #8
   23f3c:	mov	r2, r4
   23f40:	mov	r3, r7
   23f44:	bl	21b34 <__assert_fail@plt+0xf7c8>
   23f48:	mov	r4, r0
   23f4c:	mov	r0, #1
   23f50:	mov	r1, #8
   23f54:	mov	r2, r6
   23f58:	mov	r3, r9
   23f5c:	bl	21b34 <__assert_fail@plt+0xf7c8>
   23f60:	str	r0, [sp]
   23f64:	mov	r0, sl
   23f68:	mov	r1, #0
   23f6c:	mov	r2, r5
   23f70:	mov	r3, r4
   23f74:	bl	120a8 <error@plt>
   23f78:	mov	r0, r8
   23f7c:	sub	sp, fp, #28
   23f80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23f84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f88:	add	fp, sp, #28
   23f8c:	sub	sp, sp, #4
   23f90:	mov	r6, r3
   23f94:	mov	r9, r2
   23f98:	mov	r4, r1
   23f9c:	mov	r7, r0
   23fa0:	bl	258b4 <__assert_fail@plt+0x13548>
   23fa4:	mov	r8, r0
   23fa8:	bl	12198 <__errno_location@plt>
   23fac:	ldr	r5, [r0]
   23fb0:	cmp	r5, #0
   23fb4:	beq	24068 <__assert_fail@plt+0x11cfc>
   23fb8:	movw	r1, #35071	; 0x88ff
   23fbc:	mov	r0, #0
   23fc0:	mov	r2, #5
   23fc4:	movt	r1, #2
   23fc8:	bl	11f7c <dcgettext@plt>
   23fcc:	mov	r2, r0
   23fd0:	mov	r0, #0
   23fd4:	mov	r1, r5
   23fd8:	bl	120a8 <error@plt>
   23fdc:	movw	r1, #35096	; 0x8918
   23fe0:	mov	r0, #0
   23fe4:	mov	r2, #5
   23fe8:	movt	r1, #2
   23fec:	bl	11f7c <dcgettext@plt>
   23ff0:	mov	r2, r0
   23ff4:	mov	r0, #0
   23ff8:	mov	r1, #0
   23ffc:	bl	120a8 <error@plt>
   24000:	movw	r0, #37488	; 0x9270
   24004:	movw	r1, #35139	; 0x8943
   24008:	mov	r2, #5
   2400c:	movt	r0, #3
   24010:	movt	r1, #2
   24014:	ldr	sl, [r0]
   24018:	mov	r0, #0
   2401c:	bl	11f7c <dcgettext@plt>
   24020:	mov	r5, r0
   24024:	sub	r3, r4, #1
   24028:	mov	r0, #0
   2402c:	mov	r1, #8
   24030:	mov	r2, r7
   24034:	bl	21b34 <__assert_fail@plt+0xf7c8>
   24038:	mov	r4, r0
   2403c:	sub	r3, r6, #1
   24040:	mov	r0, #1
   24044:	mov	r1, #8
   24048:	mov	r2, r9
   2404c:	bl	21b34 <__assert_fail@plt+0xf7c8>
   24050:	str	r0, [sp]
   24054:	mov	r0, sl
   24058:	mov	r1, #0
   2405c:	mov	r2, r5
   24060:	mov	r3, r4
   24064:	bl	120a8 <error@plt>
   24068:	mov	r0, r8
   2406c:	sub	sp, fp, #28
   24070:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24074:	andeq	r0, r0, r0
   24078:	push	{r4, r5, r6, sl, fp, lr}
   2407c:	add	fp, sp, #16
   24080:	vpush	{d8}
   24084:	sub	sp, sp, #8
   24088:	vldr	d16, [pc, #168]	; 24138 <__assert_fail@plt+0x11dcc>
   2408c:	vmov.f64	d8, d0
   24090:	vcmpe.f64	d0, d16
   24094:	vmrs	APSR_nzcv, fpscr
   24098:	blt	240b0 <__assert_fail@plt+0x11d44>
   2409c:	bl	11e74 <pause@plt>
   240a0:	bl	12198 <__errno_location@plt>
   240a4:	ldr	r0, [r0]
   240a8:	cmp	r0, #4
   240ac:	beq	2409c <__assert_fail@plt+0x11d30>
   240b0:	vmov.f64	d0, d8
   240b4:	mov	r6, sp
   240b8:	mov	r0, r6
   240bc:	bl	25338 <__assert_fail@plt+0x12fcc>
   240c0:	bl	12198 <__errno_location@plt>
   240c4:	mov	r5, #0
   240c8:	mov	r4, r0
   240cc:	mov	r1, r6
   240d0:	str	r5, [r0]
   240d4:	mov	r0, r6
   240d8:	bl	11ec8 <nanosleep@plt>
   240dc:	cmp	r0, #0
   240e0:	beq	24114 <__assert_fail@plt+0x11da8>
   240e4:	mov	r6, sp
   240e8:	mov	r5, #0
   240ec:	ldr	r0, [r4]
   240f0:	orr	r0, r0, #4
   240f4:	cmp	r0, #4
   240f8:	bne	24124 <__assert_fail@plt+0x11db8>
   240fc:	mov	r0, r6
   24100:	mov	r1, r6
   24104:	str	r5, [r4]
   24108:	bl	11ec8 <nanosleep@plt>
   2410c:	cmp	r0, #0
   24110:	bne	240ec <__assert_fail@plt+0x11d80>
   24114:	mov	r0, r5
   24118:	sub	sp, fp, #24
   2411c:	vpop	{d8}
   24120:	pop	{r4, r5, r6, sl, fp, pc}
   24124:	mvn	r5, #0
   24128:	mov	r0, r5
   2412c:	sub	sp, fp, #24
   24130:	vpop	{d8}
   24134:	pop	{r4, r5, r6, sl, fp, pc}
   24138:	andeq	r0, r0, r0
   2413c:	mvnmi	r0, r0
   24140:	push	{fp, lr}
   24144:	mov	fp, sp
   24148:	sub	sp, sp, #8
   2414c:	movw	ip, #37488	; 0x9270
   24150:	movt	ip, #3
   24154:	ldr	ip, [ip]
   24158:	str	ip, [sp, #4]
   2415c:	ldr	ip, [fp, #8]
   24160:	str	ip, [sp]
   24164:	bl	2416c <__assert_fail@plt+0x11e00>
   24168:	bl	12348 <abort@plt>
   2416c:	push	{r4, r5, r6, r7, fp, lr}
   24170:	add	fp, sp, #16
   24174:	sub	sp, sp, #16
   24178:	sub	r0, r0, #1
   2417c:	cmp	r0, #4
   24180:	bcs	24200 <__assert_fail@plt+0x11e94>
   24184:	mov	r5, r1
   24188:	movw	r1, #35272	; 0x89c8
   2418c:	ldr	r4, [fp, #12]
   24190:	ldr	r6, [fp, #8]
   24194:	movt	r1, #2
   24198:	cmn	r5, #1
   2419c:	ldr	r1, [r1, r0, lsl #2]
   241a0:	ble	241b4 <__assert_fail@plt+0x11e48>
   241a4:	ldr	r7, [r3, r5, lsl #4]
   241a8:	movw	r5, #35176	; 0x8968
   241ac:	movt	r5, #2
   241b0:	b	241d0 <__assert_fail@plt+0x11e64>
   241b4:	mov	r0, #0
   241b8:	add	r7, sp, #14
   241bc:	strb	r0, [sp, #15]
   241c0:	movw	r0, #35176	; 0x8968
   241c4:	strb	r2, [sp, #14]
   241c8:	movt	r0, #2
   241cc:	sub	r5, r0, r5
   241d0:	mov	r0, #0
   241d4:	mov	r2, #5
   241d8:	bl	11f7c <dcgettext@plt>
   241dc:	mov	r2, r0
   241e0:	mov	r0, r4
   241e4:	mov	r1, #0
   241e8:	mov	r3, r5
   241ec:	str	r7, [sp]
   241f0:	str	r6, [sp, #4]
   241f4:	bl	120a8 <error@plt>
   241f8:	sub	sp, fp, #16
   241fc:	pop	{r4, r5, r6, r7, fp, pc}
   24200:	bl	12348 <abort@plt>
   24204:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24208:	add	fp, sp, #28
   2420c:	sub	sp, sp, #44	; 0x2c
   24210:	cmp	r2, #37	; 0x25
   24214:	bcs	24e98 <__assert_fail@plt+0x12b2c>
   24218:	ldr	sl, [fp, #8]
   2421c:	mov	r6, r2
   24220:	mov	r7, r1
   24224:	mov	r4, r0
   24228:	str	r3, [sp, #36]	; 0x24
   2422c:	bl	12198 <__errno_location@plt>
   24230:	mov	r5, r0
   24234:	mov	r0, #0
   24238:	str	r0, [r5]
   2423c:	bl	12144 <__ctype_b_loc@plt>
   24240:	ldr	r1, [r0]
   24244:	mov	r2, r4
   24248:	ldrb	r0, [r2], #1
   2424c:	add	r3, r1, r0, lsl #1
   24250:	ldrb	r3, [r3, #1]
   24254:	tst	r3, #32
   24258:	bne	24248 <__assert_fail@plt+0x11edc>
   2425c:	cmp	r7, #0
   24260:	sub	r9, fp, #32
   24264:	mov	r8, #4
   24268:	movne	r9, r7
   2426c:	cmp	r0, #45	; 0x2d
   24270:	beq	24630 <__assert_fail@plt+0x122c4>
   24274:	mov	r0, r4
   24278:	mov	r1, r9
   2427c:	mov	r2, r6
   24280:	mov	r3, #0
   24284:	bl	11f10 <__strtoull_internal@plt>
   24288:	mov	r7, r1
   2428c:	ldr	r1, [r9]
   24290:	cmp	r1, r4
   24294:	beq	242cc <__assert_fail@plt+0x11f60>
   24298:	mov	r6, r0
   2429c:	ldr	r0, [r5]
   242a0:	cmp	r0, #0
   242a4:	beq	245e8 <__assert_fail@plt+0x1227c>
   242a8:	cmp	r0, #34	; 0x22
   242ac:	bne	24630 <__assert_fail@plt+0x122c4>
   242b0:	mov	r8, #1
   242b4:	cmp	sl, #0
   242b8:	beq	24e84 <__assert_fail@plt+0x12b18>
   242bc:	ldrb	r4, [r1]
   242c0:	cmp	r4, #0
   242c4:	bne	24310 <__assert_fail@plt+0x11fa4>
   242c8:	b	24e84 <__assert_fail@plt+0x12b18>
   242cc:	cmp	sl, #0
   242d0:	beq	24630 <__assert_fail@plt+0x122c4>
   242d4:	mov	r5, r1
   242d8:	ldrb	r1, [r4]
   242dc:	cmp	r1, #0
   242e0:	beq	24630 <__assert_fail@plt+0x122c4>
   242e4:	mov	r0, sl
   242e8:	bl	12180 <strchr@plt>
   242ec:	cmp	r0, #0
   242f0:	beq	24630 <__assert_fail@plt+0x122c4>
   242f4:	mov	r1, r5
   242f8:	mov	r8, #0
   242fc:	mov	r6, #1
   24300:	mov	r7, #0
   24304:	ldrb	r4, [r1]
   24308:	cmp	r4, #0
   2430c:	beq	24e84 <__assert_fail@plt+0x12b18>
   24310:	str	r1, [sp, #32]
   24314:	mov	r0, sl
   24318:	mov	r1, r4
   2431c:	bl	12180 <strchr@plt>
   24320:	cmp	r0, #0
   24324:	beq	24624 <__assert_fail@plt+0x122b8>
   24328:	sub	r0, r4, #69	; 0x45
   2432c:	mov	r1, #1
   24330:	mov	r3, #0
   24334:	mov	r5, #1024	; 0x400
   24338:	cmp	r0, #47	; 0x2f
   2433c:	str	r1, [sp, #28]
   24340:	bhi	24444 <__assert_fail@plt+0x120d8>
   24344:	add	r1, pc, #0
   24348:	ldr	pc, [r1, r0, lsl #2]
   2434c:	andeq	r4, r2, ip, lsl #8
   24350:	andeq	r4, r2, r4, asr #8
   24354:	andeq	r4, r2, ip, lsl #8
   24358:	andeq	r4, r2, r4, asr #8
   2435c:	andeq	r4, r2, r4, asr #8
   24360:	andeq	r4, r2, r4, asr #8
   24364:	andeq	r4, r2, ip, lsl #8
   24368:	andeq	r4, r2, r4, asr #8
   2436c:	andeq	r4, r2, ip, lsl #8
   24370:	andeq	r4, r2, r4, asr #8
   24374:	andeq	r4, r2, r4, asr #8
   24378:	andeq	r4, r2, ip, lsl #8
   2437c:	andeq	r4, r2, r4, asr #8
   24380:	andeq	r4, r2, r4, asr #8
   24384:	andeq	r4, r2, r4, asr #8
   24388:	andeq	r4, r2, ip, lsl #8
   2438c:	andeq	r4, r2, r4, asr #8
   24390:	andeq	r4, r2, r4, asr #8
   24394:	andeq	r4, r2, r4, asr #8
   24398:	andeq	r4, r2, r4, asr #8
   2439c:	andeq	r4, r2, ip, lsl #8
   243a0:	andeq	r4, r2, ip, lsl #8
   243a4:	andeq	r4, r2, r4, asr #8
   243a8:	andeq	r4, r2, r4, asr #8
   243ac:	andeq	r4, r2, r4, asr #8
   243b0:	andeq	r4, r2, r4, asr #8
   243b4:	andeq	r4, r2, r4, asr #8
   243b8:	andeq	r4, r2, r4, asr #8
   243bc:	andeq	r4, r2, r4, asr #8
   243c0:	andeq	r4, r2, r4, asr #8
   243c4:	andeq	r4, r2, r4, asr #8
   243c8:	andeq	r4, r2, r4, asr #8
   243cc:	andeq	r4, r2, r4, asr #8
   243d0:	andeq	r4, r2, r4, asr #8
   243d4:	andeq	r4, r2, ip, lsl #8
   243d8:	andeq	r4, r2, r4, asr #8
   243dc:	andeq	r4, r2, r4, asr #8
   243e0:	andeq	r4, r2, r4, asr #8
   243e4:	andeq	r4, r2, ip, lsl #8
   243e8:	andeq	r4, r2, r4, asr #8
   243ec:	andeq	r4, r2, ip, lsl #8
   243f0:	andeq	r4, r2, r4, asr #8
   243f4:	andeq	r4, r2, r4, asr #8
   243f8:	andeq	r4, r2, r4, asr #8
   243fc:	andeq	r4, r2, r4, asr #8
   24400:	andeq	r4, r2, r4, asr #8
   24404:	andeq	r4, r2, r4, asr #8
   24408:	andeq	r4, r2, ip, lsl #8
   2440c:	mov	r0, sl
   24410:	mov	r1, #48	; 0x30
   24414:	bl	12180 <strchr@plt>
   24418:	cmp	r0, #0
   2441c:	beq	24440 <__assert_fail@plt+0x120d4>
   24420:	ldr	r1, [sp, #32]
   24424:	ldrb	r0, [r1, #1]
   24428:	cmp	r0, #66	; 0x42
   2442c:	cmpne	r0, #68	; 0x44
   24430:	bne	245f8 <__assert_fail@plt+0x1228c>
   24434:	mov	r5, #1000	; 0x3e8
   24438:	mov	r0, #2
   2443c:	str	r0, [sp, #28]
   24440:	mov	r3, #0
   24444:	sub	r0, r4, #66	; 0x42
   24448:	cmp	r0, #53	; 0x35
   2444c:	bhi	24624 <__assert_fail@plt+0x122b8>
   24450:	add	r1, pc, #0
   24454:	ldr	pc, [r1, r0, lsl #2]
   24458:	muleq	r2, r4, r9
   2445c:	andeq	r4, r2, r4, lsr #12
   24460:	andeq	r4, r2, r4, lsr #12
   24464:			; <UNDEFINED> instruction: 0x000249bc
   24468:	andeq	r4, r2, r4, lsr #12
   2446c:	andeq	r4, r2, r0, lsr r5
   24470:	andeq	r4, r2, r4, lsr #12
   24474:	andeq	r4, r2, r4, lsr #12
   24478:	andeq	r4, r2, r4, lsr #12
   2447c:	andeq	r4, r2, ip, lsr r6
   24480:	andeq	r4, r2, r4, lsr #12
   24484:	andeq	r4, r2, r4, lsl #13
   24488:	andeq	r4, r2, r4, lsr #12
   2448c:	andeq	r4, r2, r4, lsr #12
   24490:	andeq	r4, r2, r0, lsl fp
   24494:	andeq	r4, r2, r4, lsr #12
   24498:	andeq	r4, r2, r4, lsr #12
   2449c:	andeq	r4, r2, r4, lsr #12
   244a0:	andeq	r4, r2, r0, lsl r7
   244a4:	andeq	r4, r2, r4, lsr #12
   244a8:	andeq	r4, r2, r4, lsr #12
   244ac:	andeq	r4, r2, r4, lsr #12
   244b0:	andeq	r4, r2, r4, lsr #12
   244b4:	andeq	r4, r2, r8, lsr ip
   244b8:	strdeq	r4, [r2], -r8
   244bc:	andeq	r4, r2, r4, lsr #12
   244c0:	andeq	r4, r2, r4, lsr #12
   244c4:	andeq	r4, r2, r4, lsr #12
   244c8:	andeq	r4, r2, r4, lsr #12
   244cc:	andeq	r4, r2, r4, lsr #12
   244d0:	andeq	r4, r2, r4, lsr #12
   244d4:	andeq	r4, r2, r4, lsr #12
   244d8:	andeq	r4, r2, ip, lsl #28
   244dc:	andeq	r4, r2, r4, ror #28
   244e0:	andeq	r4, r2, r4, lsr #12
   244e4:	andeq	r4, r2, r4, lsr #12
   244e8:	andeq	r4, r2, r4, lsr #12
   244ec:	andeq	r4, r2, r0, lsr r5
   244f0:	andeq	r4, r2, r4, lsr #12
   244f4:	andeq	r4, r2, r4, lsr #12
   244f8:	andeq	r4, r2, r4, lsr #12
   244fc:	andeq	r4, r2, ip, lsr r6
   24500:	andeq	r4, r2, r4, lsr #12
   24504:	andeq	r4, r2, r4, lsl #13
   24508:	andeq	r4, r2, r4, lsr #12
   2450c:	andeq	r4, r2, r4, lsr #12
   24510:	andeq	r4, r2, r4, lsr #12
   24514:	andeq	r4, r2, r4, lsr #12
   24518:	andeq	r4, r2, r4, lsr #12
   2451c:	andeq	r4, r2, r4, lsr #12
   24520:	andeq	r4, r2, r0, lsl r7
   24524:	andeq	r4, r2, r4, lsr #12
   24528:	andeq	r4, r2, r4, lsr #12
   2452c:	andeq	r4, r2, r0, asr #28
   24530:	mvn	r0, #0
   24534:	mvn	r1, #0
   24538:	mov	r2, r5
   2453c:	mov	sl, r3
   24540:	bl	261a0 <_obstack_memory_used@@Base+0x480>
   24544:	subs	r3, r0, r6
   24548:	umull	r4, r2, r6, r5
   2454c:	mov	lr, #0
   24550:	str	r1, [sp, #20]
   24554:	sbcs	r3, r1, r7
   24558:	movwcc	lr, #1
   2455c:	mla	ip, r6, sl, r2
   24560:	mov	r2, r1
   24564:	mov	r2, #0
   24568:	cmp	lr, #0
   2456c:	mla	r7, r7, r5, ip
   24570:	mvnne	r4, #0
   24574:	mvnne	r7, #0
   24578:	subs	r6, r0, r4
   2457c:	sbcs	r6, r1, r7
   24580:	umull	r3, r6, r4, r5
   24584:	movwcc	r2, #1
   24588:	cmp	r2, #0
   2458c:	mvnne	r3, #0
   24590:	cmp	r2, #0
   24594:	str	r6, [sp, #16]
   24598:	umull	r6, ip, r3, r5
   2459c:	mla	r1, r3, sl, ip
   245a0:	ldr	ip, [sp, #16]
   245a4:	str	r1, [sp, #12]
   245a8:	mla	r4, r4, sl, ip
   245ac:	mla	r4, r7, r5, r4
   245b0:	mvnne	r4, #0
   245b4:	subs	r0, r0, r3
   245b8:	ldr	r0, [sp, #20]
   245bc:	ldr	r7, [sp, #12]
   245c0:	sbcs	r0, r0, r4
   245c4:	mov	r0, #0
   245c8:	mla	r7, r4, r5, r7
   245cc:	movwcc	r0, #1
   245d0:	cmp	r0, #0
   245d4:	mov	r1, r0
   245d8:	orr	r0, lr, r2
   245dc:	mvnne	r7, #0
   245e0:	mvnne	r6, #0
   245e4:	b	24c30 <__assert_fail@plt+0x128c4>
   245e8:	mov	r8, r0
   245ec:	cmp	sl, #0
   245f0:	bne	242bc <__assert_fail@plt+0x11f50>
   245f4:	b	24e84 <__assert_fail@plt+0x12b18>
   245f8:	cmp	r0, #105	; 0x69
   245fc:	mov	r3, #0
   24600:	bne	24444 <__assert_fail@plt+0x120d8>
   24604:	ldrb	r0, [r1, #2]
   24608:	mov	r1, #1
   2460c:	cmp	r0, #66	; 0x42
   24610:	movweq	r1, #3
   24614:	str	r1, [sp, #28]
   24618:	sub	r0, r4, #66	; 0x42
   2461c:	cmp	r0, #53	; 0x35
   24620:	bls	24450 <__assert_fail@plt+0x120e4>
   24624:	ldr	r0, [sp, #36]	; 0x24
   24628:	orr	r8, r8, #2
   2462c:	strd	r6, [r0]
   24630:	mov	r0, r8
   24634:	sub	sp, fp, #28
   24638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2463c:	mvn	r0, #0
   24640:	mvn	r1, #0
   24644:	mov	r2, r5
   24648:	mov	r4, r3
   2464c:	bl	261a0 <_obstack_memory_used@@Base+0x480>
   24650:	subs	r0, r0, r6
   24654:	mov	r2, #0
   24658:	sbcs	r0, r1, r7
   2465c:	umull	r0, r1, r6, r5
   24660:	movwcc	r2, #1
   24664:	cmp	r2, #0
   24668:	mla	r1, r6, r4, r1
   2466c:	mov	r3, r2
   24670:	mvnne	r0, #0
   24674:	mla	r7, r7, r5, r1
   24678:	mvnne	r7, #0
   2467c:	mov	r6, r0
   24680:	b	24e64 <__assert_fail@plt+0x12af8>
   24684:	mvn	r0, #0
   24688:	mvn	r1, #0
   2468c:	mov	r2, r5
   24690:	str	r3, [sp, #24]
   24694:	bl	261a0 <_obstack_memory_used@@Base+0x480>
   24698:	subs	r3, r0, r6
   2469c:	mov	ip, r0
   246a0:	umull	r4, r0, r6, r5
   246a4:	mov	sl, #0
   246a8:	sbcs	r3, r1, r7
   246ac:	mov	r3, #0
   246b0:	movwcc	r3, #1
   246b4:	cmp	r3, #0
   246b8:	str	r0, [sp, #20]
   246bc:	ldr	r0, [sp, #24]
   246c0:	mvnne	r4, #0
   246c4:	cmp	r3, #0
   246c8:	umull	lr, r2, r4, r5
   246cc:	mla	r2, r4, r0, r2
   246d0:	str	r2, [sp, #16]
   246d4:	ldr	r2, [sp, #20]
   246d8:	mla	r6, r6, r0, r2
   246dc:	ldr	r0, [sp, #16]
   246e0:	mla	r6, r7, r5, r6
   246e4:	mvnne	r6, #0
   246e8:	mla	r7, r6, r5, r0
   246ec:	subs	r0, ip, r4
   246f0:	sbcs	r0, r1, r6
   246f4:	movwcc	sl, #1
   246f8:	cmp	sl, #0
   246fc:	orr	r3, r3, sl
   24700:	mvnne	lr, #0
   24704:	mvnne	r7, #0
   24708:	mov	r6, lr
   2470c:	b	24e64 <__assert_fail@plt+0x12af8>
   24710:	mvn	r0, #0
   24714:	mvn	r1, #0
   24718:	mov	r2, r5
   2471c:	mov	sl, r3
   24720:	bl	261a0 <_obstack_memory_used@@Base+0x480>
   24724:	subs	r3, r0, r6
   24728:	mov	ip, r1
   2472c:	umull	r2, lr, r6, r5
   24730:	str	r0, [sp, #20]
   24734:	sbcs	r3, r1, r7
   24738:	mov	r1, #0
   2473c:	str	ip, [sp, #16]
   24740:	movwcc	r1, #1
   24744:	mla	r6, r6, sl, lr
   24748:	mov	lr, #0
   2474c:	cmp	r1, #0
   24750:	mla	r7, r7, r5, r6
   24754:	mvnne	r2, #0
   24758:	cmp	r1, #0
   2475c:	umull	r3, r4, r2, r5
   24760:	mvnne	r7, #0
   24764:	mla	r4, r2, sl, r4
   24768:	subs	r2, r0, r2
   2476c:	sbcs	r2, ip, r7
   24770:	mla	r4, r7, r5, r4
   24774:	mov	r2, #0
   24778:	movwcc	lr, #1
   2477c:	cmp	lr, #0
   24780:	mvnne	r3, #0
   24784:	mvnne	r4, #0
   24788:	subs	r7, r0, r3
   2478c:	mov	r0, r5
   24790:	sbcs	r7, ip, r4
   24794:	umull	r5, r7, r3, r5
   24798:	movwcc	r2, #1
   2479c:	cmp	r2, #0
   247a0:	mla	r3, r3, sl, r7
   247a4:	mvnne	r5, #0
   247a8:	cmp	r2, #0
   247ac:	mla	r3, r4, r0, r3
   247b0:	umull	r6, ip, r5, r0
   247b4:	mvnne	r3, #0
   247b8:	mla	ip, r5, sl, ip
   247bc:	mla	r7, r3, r0, ip
   247c0:	ldr	r0, [sp, #20]
   247c4:	subs	r0, r0, r5
   247c8:	ldr	r0, [sp, #16]
   247cc:	sbcs	r0, r0, r3
   247d0:	mov	r0, #0
   247d4:	movwcc	r0, #1
   247d8:	cmp	r0, #0
   247dc:	mov	r3, r0
   247e0:	orr	r0, r1, lr
   247e4:	orr	r0, r0, r2
   247e8:	mvnne	r7, #0
   247ec:	mvnne	r6, #0
   247f0:	orr	r3, r0, r3
   247f4:	b	24e64 <__assert_fail@plt+0x12af8>
   247f8:	mvn	r0, #0
   247fc:	mvn	r1, #0
   24800:	mov	r2, r5
   24804:	mov	r4, r3
   24808:	str	r3, [sp, #24]
   2480c:	bl	261a0 <_obstack_memory_used@@Base+0x480>
   24810:	umull	r3, r2, r6, r5
   24814:	mla	r2, r6, r4, r2
   24818:	subs	r6, r0, r6
   2481c:	sbcs	r6, r1, r7
   24820:	mov	r6, #0
   24824:	mla	r2, r7, r5, r2
   24828:	mov	r7, #0
   2482c:	movwcc	r6, #1
   24830:	cmp	r6, #0
   24834:	str	r6, [sp, #20]
   24838:	mvnne	r3, #0
   2483c:	mvnne	r2, #0
   24840:	subs	r4, r0, r3
   24844:	umull	r6, ip, r3, r5
   24848:	sbcs	r4, r1, r2
   2484c:	ldr	r4, [sp, #24]
   24850:	movwcc	r7, #1
   24854:	cmp	r7, #0
   24858:	mov	lr, r7
   2485c:	str	r7, [sp, #16]
   24860:	mvnne	r6, #0
   24864:	cmp	lr, #0
   24868:	mov	lr, #0
   2486c:	umull	sl, r7, r6, r5
   24870:	mla	r3, r3, r4, ip
   24874:	mla	r2, r2, r5, r3
   24878:	mvnne	r2, #0
   2487c:	subs	r3, r0, r6
   24880:	mla	r7, r6, r4, r7
   24884:	mov	r4, r0
   24888:	mov	r0, #0
   2488c:	mla	r7, r2, r5, r7
   24890:	sbcs	r2, r1, r2
   24894:	mov	r3, r4
   24898:	movwcc	r0, #1
   2489c:	str	r3, [sp, #4]
   248a0:	cmp	r0, #0
   248a4:	str	r0, [sp, #12]
   248a8:	mov	r0, r1
   248ac:	mvnne	sl, #0
   248b0:	mvnne	r7, #0
   248b4:	str	r0, [sp, #8]
   248b8:	subs	r2, r4, sl
   248bc:	ldr	r4, [sp, #24]
   248c0:	sbcs	r2, r1, r7
   248c4:	umull	r6, r2, sl, r5
   248c8:	movwcc	lr, #1
   248cc:	cmp	lr, #0
   248d0:	mvnne	r6, #0
   248d4:	mla	r2, sl, r4, r2
   248d8:	cmp	lr, #0
   248dc:	umull	r1, ip, r6, r5
   248e0:	mla	r2, r7, r5, r2
   248e4:	mvnne	r2, #0
   248e8:	mla	ip, r6, r4, ip
   248ec:	subs	r6, r3, r6
   248f0:	mla	r7, r2, r5, ip
   248f4:	sbcs	r2, r0, r2
   248f8:	mov	ip, #0
   248fc:	mov	r2, #0
   24900:	movwcc	ip, #1
   24904:	cmp	ip, #0
   24908:	mvnne	r1, #0
   2490c:	mvnne	r7, #0
   24910:	subs	r6, r3, r1
   24914:	ldr	r3, [sp, #24]
   24918:	sbcs	r6, r0, r7
   2491c:	umull	r0, sl, r1, r5
   24920:	movwcc	r2, #1
   24924:	cmp	r2, #0
   24928:	mvnne	r0, #0
   2492c:	mla	r1, r1, r3, sl
   24930:	cmp	r2, #0
   24934:	umull	r6, r4, r0, r5
   24938:	mla	r1, r7, r5, r1
   2493c:	mvnne	r1, #0
   24940:	mla	r4, r0, r3, r4
   24944:	ldr	r3, [sp, #4]
   24948:	mla	r7, r1, r5, r4
   2494c:	ldr	r5, [sp, #16]
   24950:	subs	r0, r3, r0
   24954:	ldr	r0, [sp, #8]
   24958:	sbcs	r0, r0, r1
   2495c:	mov	r0, #0
   24960:	movwcc	r0, #1
   24964:	cmp	r0, #0
   24968:	mov	r1, r0
   2496c:	ldr	r0, [sp, #20]
   24970:	mvnne	r7, #0
   24974:	mvnne	r6, #0
   24978:	orr	r0, r0, r5
   2497c:	ldr	r5, [sp, #12]
   24980:	orr	r0, r0, r5
   24984:	orr	r0, r0, lr
   24988:	orr	r0, r0, ip
   2498c:	orr	r0, r0, r2
   24990:	b	24e00 <__assert_fail@plt+0x12a94>
   24994:	mov	r1, #0
   24998:	lsl	r2, r7, #10
   2499c:	lsl	r0, r6, #10
   249a0:	lsr	r3, r7, #22
   249a4:	cmp	r1, r7, lsr #22
   249a8:	orr	r2, r2, r6, lsr #22
   249ac:	mvnne	r0, #0
   249b0:	movwne	r3, #1
   249b4:	cmp	r1, r7, lsr #22
   249b8:	b	24e30 <__assert_fail@plt+0x12ac4>
   249bc:	mvn	r0, #0
   249c0:	mvn	r1, #0
   249c4:	mov	r2, r5
   249c8:	mov	sl, r3
   249cc:	bl	261a0 <_obstack_memory_used@@Base+0x480>
   249d0:	subs	r2, r0, r6
   249d4:	mov	ip, r0
   249d8:	mov	r0, #0
   249dc:	sbcs	r2, r1, r7
   249e0:	umull	r4, r2, r6, r5
   249e4:	movwcc	r0, #1
   249e8:	cmp	r0, #0
   249ec:	mla	r2, r6, sl, r2
   249f0:	str	r0, [sp, #20]
   249f4:	mvnne	r4, #0
   249f8:	cmp	r0, #0
   249fc:	mla	r2, r7, r5, r2
   24a00:	mov	r0, #0
   24a04:	umull	lr, r3, r4, r5
   24a08:	mvnne	r2, #0
   24a0c:	mla	r3, r4, sl, r3
   24a10:	mla	r6, r2, r5, r3
   24a14:	subs	r3, ip, r4
   24a18:	mov	r3, r1
   24a1c:	sbcs	r2, r1, r2
   24a20:	str	r3, [sp, #8]
   24a24:	movwcc	r0, #1
   24a28:	cmp	r0, #0
   24a2c:	str	r0, [sp, #16]
   24a30:	mov	r0, ip
   24a34:	mvnne	lr, #0
   24a38:	mvnne	r6, #0
   24a3c:	str	r0, [sp, #12]
   24a40:	subs	r2, ip, lr
   24a44:	umull	r7, r4, lr, r5
   24a48:	sbcs	r2, r1, r6
   24a4c:	mov	r2, #0
   24a50:	movwcc	r2, #1
   24a54:	mla	r4, lr, sl, r4
   24a58:	cmp	r2, #0
   24a5c:	mla	r6, r6, r5, r4
   24a60:	mov	r4, #0
   24a64:	mvnne	r7, #0
   24a68:	cmp	r2, #0
   24a6c:	umull	r1, ip, r7, r5
   24a70:	mvnne	r6, #0
   24a74:	mla	ip, r7, sl, ip
   24a78:	subs	r7, r0, r7
   24a7c:	sbcs	r7, r3, r6
   24a80:	mla	lr, r6, r5, ip
   24a84:	mov	ip, #0
   24a88:	movwcc	ip, #1
   24a8c:	cmp	ip, #0
   24a90:	mvnne	r1, #0
   24a94:	mvnne	lr, #0
   24a98:	subs	r7, r0, r1
   24a9c:	sbcs	r7, r3, lr
   24aa0:	umull	r0, r7, r1, r5
   24aa4:	movwcc	r4, #1
   24aa8:	cmp	r4, #0
   24aac:	mla	r1, r1, sl, r7
   24ab0:	mvnne	r0, #0
   24ab4:	cmp	r4, #0
   24ab8:	mla	r1, lr, r5, r1
   24abc:	umull	r6, r3, r0, r5
   24ac0:	mvnne	r1, #0
   24ac4:	mla	r3, r0, sl, r3
   24ac8:	mla	r7, r1, r5, r3
   24acc:	ldr	r3, [sp, #12]
   24ad0:	subs	r0, r3, r0
   24ad4:	ldr	r0, [sp, #8]
   24ad8:	ldr	r3, [sp, #16]
   24adc:	sbcs	r0, r0, r1
   24ae0:	mov	r0, #0
   24ae4:	movwcc	r0, #1
   24ae8:	cmp	r0, #0
   24aec:	mov	r1, r0
   24af0:	ldr	r0, [sp, #20]
   24af4:	mvnne	r7, #0
   24af8:	mvnne	r6, #0
   24afc:	orr	r0, r0, r3
   24b00:	orr	r0, r0, r2
   24b04:	orr	r0, r0, ip
   24b08:	orr	r0, r0, r4
   24b0c:	b	24c30 <__assert_fail@plt+0x128c4>
   24b10:	mvn	r0, #0
   24b14:	mvn	r1, #0
   24b18:	mov	r2, r5
   24b1c:	mov	sl, r3
   24b20:	bl	261a0 <_obstack_memory_used@@Base+0x480>
   24b24:	umull	r3, r2, r6, r5
   24b28:	mov	lr, r1
   24b2c:	mov	r1, r0
   24b30:	mla	r2, r6, sl, r2
   24b34:	subs	r6, r0, r6
   24b38:	mov	r0, #0
   24b3c:	sbcs	r6, lr, r7
   24b40:	mla	r2, r7, r5, r2
   24b44:	movwcc	r0, #1
   24b48:	cmp	r0, #0
   24b4c:	str	r0, [sp, #20]
   24b50:	mov	r0, r1
   24b54:	mvnne	r3, #0
   24b58:	mvnne	r2, #0
   24b5c:	str	r0, [sp, #16]
   24b60:	subs	r4, r1, r3
   24b64:	umull	r7, ip, r3, r5
   24b68:	sbcs	r4, lr, r2
   24b6c:	mov	r4, #0
   24b70:	movwcc	r4, #1
   24b74:	mla	r3, r3, sl, ip
   24b78:	mov	ip, #0
   24b7c:	cmp	r4, #0
   24b80:	mla	r2, r2, r5, r3
   24b84:	mvnne	r7, #0
   24b88:	cmp	r4, #0
   24b8c:	umull	r1, r6, r7, r5
   24b90:	mvnne	r2, #0
   24b94:	mla	r6, r7, sl, r6
   24b98:	mla	r3, r2, r5, r6
   24b9c:	subs	r6, r0, r7
   24ba0:	sbcs	r2, lr, r2
   24ba4:	mov	r2, #0
   24ba8:	movwcc	ip, #1
   24bac:	cmp	ip, #0
   24bb0:	mvnne	r1, #0
   24bb4:	mvnne	r3, #0
   24bb8:	subs	r6, r0, r1
   24bbc:	sbcs	r6, lr, r3
   24bc0:	umull	r0, r6, r1, r5
   24bc4:	movwcc	r2, #1
   24bc8:	cmp	r2, #0
   24bcc:	mvnne	r0, #0
   24bd0:	cmp	r2, #0
   24bd4:	str	r6, [sp, #12]
   24bd8:	umull	r6, r7, r0, r5
   24bdc:	mla	r7, r0, sl, r7
   24be0:	str	r7, [sp, #8]
   24be4:	ldr	r7, [sp, #12]
   24be8:	mla	r1, r1, sl, r7
   24bec:	mla	r1, r3, r5, r1
   24bf0:	ldr	r3, [sp, #8]
   24bf4:	mvnne	r1, #0
   24bf8:	mla	r7, r1, r5, r3
   24bfc:	ldr	r3, [sp, #16]
   24c00:	subs	r0, r3, r0
   24c04:	sbcs	r0, lr, r1
   24c08:	mov	r0, #0
   24c0c:	movwcc	r0, #1
   24c10:	cmp	r0, #0
   24c14:	mov	r1, r0
   24c18:	ldr	r0, [sp, #20]
   24c1c:	mvnne	r7, #0
   24c20:	mvnne	r6, #0
   24c24:	orr	r0, r0, r4
   24c28:	orr	r0, r0, ip
   24c2c:	orr	r0, r0, r2
   24c30:	orr	r3, r0, r1
   24c34:	b	24e64 <__assert_fail@plt+0x12af8>
   24c38:	mvn	r0, #0
   24c3c:	mvn	r1, #0
   24c40:	mov	r2, r5
   24c44:	mov	sl, r3
   24c48:	bl	261a0 <_obstack_memory_used@@Base+0x480>
   24c4c:	mov	ip, r1
   24c50:	subs	r1, r0, r6
   24c54:	umull	r3, lr, r6, r5
   24c58:	mov	r2, r5
   24c5c:	sbcs	r1, ip, r7
   24c60:	mov	r1, #0
   24c64:	str	ip, [sp, #4]
   24c68:	movwcc	r1, #1
   24c6c:	mla	r6, r6, sl, lr
   24c70:	cmp	r1, #0
   24c74:	mla	r7, r7, r2, r6
   24c78:	str	r1, [sp, #20]
   24c7c:	mvnne	r3, #0
   24c80:	cmp	r1, #0
   24c84:	mov	r1, r0
   24c88:	umull	r4, r5, r3, r5
   24c8c:	mvnne	r7, #0
   24c90:	mov	lr, r1
   24c94:	mla	r5, r3, sl, r5
   24c98:	subs	r3, r0, r3
   24c9c:	sbcs	r0, ip, r7
   24ca0:	mov	r0, #0
   24ca4:	mla	r5, r7, r2, r5
   24ca8:	movwcc	r0, #1
   24cac:	cmp	r0, #0
   24cb0:	str	r0, [sp, #16]
   24cb4:	mvnne	r4, #0
   24cb8:	mvnne	r5, #0
   24cbc:	subs	r0, r1, r4
   24cc0:	mov	r1, #0
   24cc4:	sbcs	r0, ip, r5
   24cc8:	umull	r3, r0, r4, r2
   24ccc:	movwcc	r1, #1
   24cd0:	cmp	r1, #0
   24cd4:	mla	r0, r4, sl, r0
   24cd8:	mov	r4, lr
   24cdc:	str	r1, [sp, #12]
   24ce0:	mvnne	r3, #0
   24ce4:	cmp	r1, #0
   24ce8:	mla	r0, r5, r2, r0
   24cec:	str	r4, [sp]
   24cf0:	umull	r7, r6, r3, r2
   24cf4:	mvnne	r0, #0
   24cf8:	mla	r6, r3, sl, r6
   24cfc:	subs	r3, lr, r3
   24d00:	mov	r3, #0
   24d04:	mla	r5, r0, r2, r6
   24d08:	sbcs	r0, ip, r0
   24d0c:	mov	r0, #0
   24d10:	movwcc	r0, #1
   24d14:	cmp	r0, #0
   24d18:	str	r0, [sp, #8]
   24d1c:	mvnne	r7, #0
   24d20:	mvnne	r5, #0
   24d24:	subs	r0, lr, r7
   24d28:	sbcs	r0, ip, r5
   24d2c:	umull	r6, r0, r7, r2
   24d30:	movwcc	r3, #1
   24d34:	cmp	r3, #0
   24d38:	mla	r7, r7, sl, r0
   24d3c:	mov	r0, ip
   24d40:	mvnne	r6, #0
   24d44:	cmp	r3, #0
   24d48:	mla	r7, r5, r2, r7
   24d4c:	mov	r5, #0
   24d50:	umull	r1, lr, r6, r2
   24d54:	mvnne	r7, #0
   24d58:	mla	lr, r6, sl, lr
   24d5c:	subs	r6, r4, r6
   24d60:	mla	lr, r7, r2, lr
   24d64:	sbcs	r7, ip, r7
   24d68:	mov	ip, #0
   24d6c:	movwcc	ip, #1
   24d70:	cmp	ip, #0
   24d74:	mvnne	r1, #0
   24d78:	mvnne	lr, #0
   24d7c:	subs	r7, r4, r1
   24d80:	sbcs	r7, r0, lr
   24d84:	umull	r0, r7, r1, r2
   24d88:	movwcc	r5, #1
   24d8c:	cmp	r5, #0
   24d90:	mla	r1, r1, sl, r7
   24d94:	mvnne	r0, #0
   24d98:	cmp	r5, #0
   24d9c:	mla	r1, lr, r2, r1
   24da0:	umull	r6, r4, r0, r2
   24da4:	mvnne	r1, #0
   24da8:	mla	r4, r0, sl, r4
   24dac:	mla	r7, r1, r2, r4
   24db0:	ldr	r2, [sp]
   24db4:	subs	r0, r2, r0
   24db8:	ldr	r0, [sp, #4]
   24dbc:	ldr	r2, [sp, #16]
   24dc0:	sbcs	r0, r0, r1
   24dc4:	mov	r0, #0
   24dc8:	movwcc	r0, #1
   24dcc:	cmp	r0, #0
   24dd0:	mov	r1, r0
   24dd4:	ldr	r0, [sp, #20]
   24dd8:	mvnne	r7, #0
   24ddc:	mvnne	r6, #0
   24de0:	orr	r0, r0, r2
   24de4:	ldr	r2, [sp, #12]
   24de8:	orr	r0, r0, r2
   24dec:	ldr	r2, [sp, #8]
   24df0:	orr	r0, r0, r2
   24df4:	orr	r0, r0, r3
   24df8:	orr	r0, r0, ip
   24dfc:	orr	r0, r0, r5
   24e00:	orr	r0, r0, r1
   24e04:	and	r3, r0, #1
   24e08:	b	24e64 <__assert_fail@plt+0x12af8>
   24e0c:	mov	r1, #0
   24e10:	lsl	r2, r7, #9
   24e14:	lsl	r0, r6, #9
   24e18:	lsr	r3, r7, #23
   24e1c:	cmp	r1, r7, lsr #23
   24e20:	orr	r2, r2, r6, lsr #23
   24e24:	mvnne	r0, #0
   24e28:	movwne	r3, #1
   24e2c:	cmp	r1, r7, lsr #23
   24e30:	mvnne	r2, #0
   24e34:	mov	r6, r0
   24e38:	mov	r7, r2
   24e3c:	b	24e64 <__assert_fail@plt+0x12af8>
   24e40:	lsl	r1, r7, #1
   24e44:	cmp	r7, #0
   24e48:	lsl	r0, r6, #1
   24e4c:	lsr	r3, r7, #31
   24e50:	orr	r1, r1, r6, lsr #31
   24e54:	mvnmi	r0, #0
   24e58:	mvnmi	r1, #0
   24e5c:	mov	r6, r0
   24e60:	mov	r7, r1
   24e64:	ldr	r1, [sp, #32]
   24e68:	ldr	r2, [sp, #28]
   24e6c:	orr	r8, r3, r8
   24e70:	add	r0, r1, r2
   24e74:	str	r0, [r9]
   24e78:	ldrb	r0, [r1, r2]
   24e7c:	cmp	r0, #0
   24e80:	orrne	r8, r8, #2
   24e84:	ldr	r0, [sp, #36]	; 0x24
   24e88:	strd	r6, [r0]
   24e8c:	mov	r0, r8
   24e90:	sub	sp, fp, #28
   24e94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24e98:	movw	r0, #35288	; 0x89d8
   24e9c:	movw	r1, #35326	; 0x89fe
   24ea0:	movw	r3, #35342	; 0x8a0e
   24ea4:	mov	r2, #85	; 0x55
   24ea8:	movt	r0, #2
   24eac:	movt	r1, #2
   24eb0:	movt	r3, #2
   24eb4:	bl	1236c <__assert_fail@plt>
   24eb8:	clz	r2, r1
   24ebc:	clz	r3, r0
   24ec0:	lsr	r2, r2, #5
   24ec4:	lsr	r3, r3, #5
   24ec8:	orrs	r2, r3, r2
   24ecc:	movwne	r1, #1
   24ed0:	movwne	r0, #1
   24ed4:	cmp	r1, #0
   24ed8:	beq	24f08 <__assert_fail@plt+0x12b9c>
   24edc:	mvn	r2, #-2147483648	; 0x80000000
   24ee0:	udiv	r2, r2, r1
   24ee4:	cmp	r2, r0
   24ee8:	bcs	24f08 <__assert_fail@plt+0x12b9c>
   24eec:	push	{fp, lr}
   24ef0:	mov	fp, sp
   24ef4:	bl	12198 <__errno_location@plt>
   24ef8:	mov	r1, #12
   24efc:	str	r1, [r0]
   24f00:	mov	r0, #0
   24f04:	pop	{fp, pc}
   24f08:	b	11e2c <calloc@plt>
   24f0c:	cmp	r0, #0
   24f10:	movweq	r0, #1
   24f14:	cmn	r0, #1
   24f18:	ble	24f20 <__assert_fail@plt+0x12bb4>
   24f1c:	b	120f0 <malloc@plt>
   24f20:	push	{fp, lr}
   24f24:	mov	fp, sp
   24f28:	bl	12198 <__errno_location@plt>
   24f2c:	mov	r1, #12
   24f30:	str	r1, [r0]
   24f34:	mov	r0, #0
   24f38:	pop	{fp, pc}
   24f3c:	push	{fp, lr}
   24f40:	mov	fp, sp
   24f44:	cmp	r0, #0
   24f48:	beq	24f64 <__assert_fail@plt+0x12bf8>
   24f4c:	cmp	r1, #0
   24f50:	beq	24f70 <__assert_fail@plt+0x12c04>
   24f54:	cmn	r1, #1
   24f58:	ble	24f7c <__assert_fail@plt+0x12c10>
   24f5c:	pop	{fp, lr}
   24f60:	b	11fc4 <realloc@plt>
   24f64:	mov	r0, r1
   24f68:	pop	{fp, lr}
   24f6c:	b	24f0c <__assert_fail@plt+0x12ba0>
   24f70:	bl	1dc4c <__assert_fail@plt+0xb8e0>
   24f74:	mov	r0, #0
   24f78:	pop	{fp, pc}
   24f7c:	bl	12198 <__errno_location@plt>
   24f80:	mov	r1, #12
   24f84:	str	r1, [r0]
   24f88:	mov	r0, #0
   24f8c:	pop	{fp, pc}
   24f90:	sub	r2, r0, #65	; 0x41
   24f94:	mov	r1, r0
   24f98:	mov	r0, #1
   24f9c:	cmp	r2, #26
   24fa0:	subcs	r2, r1, #97	; 0x61
   24fa4:	cmpcs	r2, #26
   24fa8:	bcs	24fb0 <__assert_fail@plt+0x12c44>
   24fac:	bx	lr
   24fb0:	sub	r1, r1, #48	; 0x30
   24fb4:	cmp	r1, #10
   24fb8:	movcs	r0, #0
   24fbc:	bx	lr
   24fc0:	sub	r2, r0, #65	; 0x41
   24fc4:	mov	r1, r0
   24fc8:	mov	r0, #1
   24fcc:	cmp	r2, #26
   24fd0:	subcs	r1, r1, #97	; 0x61
   24fd4:	cmpcs	r1, #26
   24fd8:	movcs	r0, #0
   24fdc:	bx	lr
   24fe0:	cmp	r0, #128	; 0x80
   24fe4:	mov	r1, #0
   24fe8:	movwcc	r1, #1
   24fec:	mov	r0, r1
   24ff0:	bx	lr
   24ff4:	sub	r1, r0, #9
   24ff8:	sub	r0, r0, #32
   24ffc:	clz	r1, r1
   25000:	clz	r0, r0
   25004:	lsr	r1, r1, #5
   25008:	lsr	r0, r0, #5
   2500c:	orr	r0, r0, r1
   25010:	bx	lr
   25014:	mov	r1, r0
   25018:	mov	r0, #1
   2501c:	cmp	r1, #32
   25020:	bxcc	lr
   25024:	cmp	r1, #127	; 0x7f
   25028:	movne	r0, #0
   2502c:	bx	lr
   25030:	sub	r1, r0, #48	; 0x30
   25034:	mov	r0, #0
   25038:	cmp	r1, #10
   2503c:	movwcc	r0, #1
   25040:	bx	lr
   25044:	sub	r1, r0, #33	; 0x21
   25048:	mov	r0, #0
   2504c:	cmp	r1, #94	; 0x5e
   25050:	movwcc	r0, #1
   25054:	bx	lr
   25058:	sub	r1, r0, #97	; 0x61
   2505c:	mov	r0, #0
   25060:	cmp	r1, #26
   25064:	movwcc	r0, #1
   25068:	bx	lr
   2506c:	sub	r1, r0, #32
   25070:	mov	r0, #0
   25074:	cmp	r1, #95	; 0x5f
   25078:	movwcc	r0, #1
   2507c:	bx	lr
   25080:	sub	r1, r0, #33	; 0x21
   25084:	cmp	r1, #93	; 0x5d
   25088:	bhi	25214 <__assert_fail@plt+0x12ea8>
   2508c:	add	r2, pc, #4
   25090:	mov	r0, #1
   25094:	ldr	pc, [r2, r1, lsl #2]
   25098:	andeq	r5, r2, r0, lsl r2
   2509c:	andeq	r5, r2, r0, lsl r2
   250a0:	andeq	r5, r2, r0, lsl r2
   250a4:	andeq	r5, r2, r0, lsl r2
   250a8:	andeq	r5, r2, r0, lsl r2
   250ac:	andeq	r5, r2, r0, lsl r2
   250b0:	andeq	r5, r2, r0, lsl r2
   250b4:	andeq	r5, r2, r0, lsl r2
   250b8:	andeq	r5, r2, r0, lsl r2
   250bc:	andeq	r5, r2, r0, lsl r2
   250c0:	andeq	r5, r2, r0, lsl r2
   250c4:	andeq	r5, r2, r0, lsl r2
   250c8:	andeq	r5, r2, r0, lsl r2
   250cc:	andeq	r5, r2, r0, lsl r2
   250d0:	andeq	r5, r2, r0, lsl r2
   250d4:	andeq	r5, r2, r4, lsl r2
   250d8:	andeq	r5, r2, r4, lsl r2
   250dc:	andeq	r5, r2, r4, lsl r2
   250e0:	andeq	r5, r2, r4, lsl r2
   250e4:	andeq	r5, r2, r4, lsl r2
   250e8:	andeq	r5, r2, r4, lsl r2
   250ec:	andeq	r5, r2, r4, lsl r2
   250f0:	andeq	r5, r2, r4, lsl r2
   250f4:	andeq	r5, r2, r4, lsl r2
   250f8:	andeq	r5, r2, r4, lsl r2
   250fc:	andeq	r5, r2, r0, lsl r2
   25100:	andeq	r5, r2, r0, lsl r2
   25104:	andeq	r5, r2, r0, lsl r2
   25108:	andeq	r5, r2, r0, lsl r2
   2510c:	andeq	r5, r2, r0, lsl r2
   25110:	andeq	r5, r2, r0, lsl r2
   25114:	andeq	r5, r2, r0, lsl r2
   25118:	andeq	r5, r2, r4, lsl r2
   2511c:	andeq	r5, r2, r4, lsl r2
   25120:	andeq	r5, r2, r4, lsl r2
   25124:	andeq	r5, r2, r4, lsl r2
   25128:	andeq	r5, r2, r4, lsl r2
   2512c:	andeq	r5, r2, r4, lsl r2
   25130:	andeq	r5, r2, r4, lsl r2
   25134:	andeq	r5, r2, r4, lsl r2
   25138:	andeq	r5, r2, r4, lsl r2
   2513c:	andeq	r5, r2, r4, lsl r2
   25140:	andeq	r5, r2, r4, lsl r2
   25144:	andeq	r5, r2, r4, lsl r2
   25148:	andeq	r5, r2, r4, lsl r2
   2514c:	andeq	r5, r2, r4, lsl r2
   25150:	andeq	r5, r2, r4, lsl r2
   25154:	andeq	r5, r2, r4, lsl r2
   25158:	andeq	r5, r2, r4, lsl r2
   2515c:	andeq	r5, r2, r4, lsl r2
   25160:	andeq	r5, r2, r4, lsl r2
   25164:	andeq	r5, r2, r4, lsl r2
   25168:	andeq	r5, r2, r4, lsl r2
   2516c:	andeq	r5, r2, r4, lsl r2
   25170:	andeq	r5, r2, r4, lsl r2
   25174:	andeq	r5, r2, r4, lsl r2
   25178:	andeq	r5, r2, r4, lsl r2
   2517c:	andeq	r5, r2, r4, lsl r2
   25180:	andeq	r5, r2, r0, lsl r2
   25184:	andeq	r5, r2, r0, lsl r2
   25188:	andeq	r5, r2, r0, lsl r2
   2518c:	andeq	r5, r2, r0, lsl r2
   25190:	andeq	r5, r2, r0, lsl r2
   25194:	andeq	r5, r2, r0, lsl r2
   25198:	andeq	r5, r2, r4, lsl r2
   2519c:	andeq	r5, r2, r4, lsl r2
   251a0:	andeq	r5, r2, r4, lsl r2
   251a4:	andeq	r5, r2, r4, lsl r2
   251a8:	andeq	r5, r2, r4, lsl r2
   251ac:	andeq	r5, r2, r4, lsl r2
   251b0:	andeq	r5, r2, r4, lsl r2
   251b4:	andeq	r5, r2, r4, lsl r2
   251b8:	andeq	r5, r2, r4, lsl r2
   251bc:	andeq	r5, r2, r4, lsl r2
   251c0:	andeq	r5, r2, r4, lsl r2
   251c4:	andeq	r5, r2, r4, lsl r2
   251c8:	andeq	r5, r2, r4, lsl r2
   251cc:	andeq	r5, r2, r4, lsl r2
   251d0:	andeq	r5, r2, r4, lsl r2
   251d4:	andeq	r5, r2, r4, lsl r2
   251d8:	andeq	r5, r2, r4, lsl r2
   251dc:	andeq	r5, r2, r4, lsl r2
   251e0:	andeq	r5, r2, r4, lsl r2
   251e4:	andeq	r5, r2, r4, lsl r2
   251e8:	andeq	r5, r2, r4, lsl r2
   251ec:	andeq	r5, r2, r4, lsl r2
   251f0:	andeq	r5, r2, r4, lsl r2
   251f4:	andeq	r5, r2, r4, lsl r2
   251f8:	andeq	r5, r2, r4, lsl r2
   251fc:	andeq	r5, r2, r4, lsl r2
   25200:	andeq	r5, r2, r0, lsl r2
   25204:	andeq	r5, r2, r0, lsl r2
   25208:	andeq	r5, r2, r0, lsl r2
   2520c:	andeq	r5, r2, r0, lsl r2
   25210:	bx	lr
   25214:	mov	r0, #0
   25218:	bx	lr
   2521c:	sub	r0, r0, #9
   25220:	cmp	r0, #23
   25224:	movhi	r0, #0
   25228:	bxhi	lr
   2522c:	movw	r1, #31
   25230:	bic	r0, r0, #-16777216	; 0xff000000
   25234:	mov	r2, #1
   25238:	movt	r1, #128	; 0x80
   2523c:	and	r0, r2, r1, lsr r0
   25240:	bx	lr
   25244:	sub	r1, r0, #65	; 0x41
   25248:	mov	r0, #0
   2524c:	cmp	r1, #26
   25250:	movwcc	r0, #1
   25254:	bx	lr
   25258:	sub	r2, r0, #48	; 0x30
   2525c:	mov	r1, r0
   25260:	mov	r0, #1
   25264:	cmp	r2, #22
   25268:	bhi	25280 <__assert_fail@plt+0x12f14>
   2526c:	movw	r3, #1023	; 0x3ff
   25270:	mov	ip, #1
   25274:	movt	r3, #126	; 0x7e
   25278:	tst	r3, ip, lsl r2
   2527c:	bxne	lr
   25280:	sub	r1, r1, #97	; 0x61
   25284:	cmp	r1, #6
   25288:	movcs	r0, #0
   2528c:	bxcs	lr
   25290:	bx	lr
   25294:	sub	r1, r0, #65	; 0x41
   25298:	cmp	r1, #26
   2529c:	addcc	r0, r0, #32
   252a0:	bx	lr
   252a4:	sub	r1, r0, #97	; 0x61
   252a8:	cmp	r1, #26
   252ac:	subcc	r0, r0, #32
   252b0:	bx	lr
   252b4:	push	{r4, r5, r6, sl, fp, lr}
   252b8:	add	fp, sp, #16
   252bc:	mov	r4, r0
   252c0:	bl	12090 <__fpending@plt>
   252c4:	ldr	r6, [r4]
   252c8:	mov	r5, r0
   252cc:	mov	r0, r4
   252d0:	bl	1d69c <__assert_fail@plt+0xb330>
   252d4:	tst	r6, #32
   252d8:	bne	25310 <__assert_fail@plt+0x12fa4>
   252dc:	cmp	r0, #0
   252e0:	mov	r4, r0
   252e4:	mvnne	r4, #0
   252e8:	cmp	r5, #0
   252ec:	bne	2531c <__assert_fail@plt+0x12fb0>
   252f0:	cmp	r0, #0
   252f4:	beq	2531c <__assert_fail@plt+0x12fb0>
   252f8:	bl	12198 <__errno_location@plt>
   252fc:	ldr	r0, [r0]
   25300:	subs	r4, r0, #9
   25304:	mvnne	r4, #0
   25308:	mov	r0, r4
   2530c:	pop	{r4, r5, r6, sl, fp, pc}
   25310:	mvn	r4, #0
   25314:	cmp	r0, #0
   25318:	beq	25324 <__assert_fail@plt+0x12fb8>
   2531c:	mov	r0, r4
   25320:	pop	{r4, r5, r6, sl, fp, pc}
   25324:	bl	12198 <__errno_location@plt>
   25328:	mov	r1, #0
   2532c:	str	r1, [r0]
   25330:	mov	r0, r4
   25334:	pop	{r4, r5, r6, sl, fp, pc}
   25338:	push	{fp, lr}
   2533c:	mov	fp, sp
   25340:	vldr	d16, [pc, #176]	; 253f8 <__assert_fail@plt+0x1308c>
   25344:	vcmpe.f64	d0, d16
   25348:	vmrs	APSR_nzcv, fpscr
   2534c:	ble	253cc <__assert_fail@plt+0x13060>
   25350:	vldr	d16, [pc, #168]	; 25400 <__assert_fail@plt+0x13094>
   25354:	movw	ip, #51712	; 0xca00
   25358:	movt	ip, #15258	; 0x3b9a
   2535c:	vcmpe.f64	d0, d16
   25360:	vmrs	APSR_nzcv, fpscr
   25364:	bpl	253e0 <__assert_fail@plt+0x13074>
   25368:	vcvt.s32.f64	s2, d0
   2536c:	vldr	d16, [pc, #148]	; 25408 <__assert_fail@plt+0x1309c>
   25370:	movw	r1, #12193	; 0x2fa1
   25374:	movt	r1, #17592	; 0x44b8
   25378:	vcvt.f64.s32	d17, s2
   2537c:	vmov	lr, s2
   25380:	vsub.f64	d17, d0, d17
   25384:	vmul.f64	d16, d17, d16
   25388:	vcvt.s32.f64	s0, d16
   2538c:	vcvt.f64.s32	d17, s0
   25390:	vmov	r2, s0
   25394:	vcmpe.f64	d16, d17
   25398:	vmrs	APSR_nzcv, fpscr
   2539c:	addgt	r2, r2, #1
   253a0:	smmul	r1, r2, r1
   253a4:	asr	r3, r1, #28
   253a8:	add	r1, r3, r1, lsr #31
   253ac:	mls	r2, r1, ip, r2
   253b0:	add	r1, r1, lr
   253b4:	add	r3, r1, r2, asr #31
   253b8:	cmp	r2, #0
   253bc:	addmi	r2, r2, ip
   253c0:	str	r3, [r0]
   253c4:	str	r2, [r0, #4]
   253c8:	pop	{fp, pc}
   253cc:	mov	r2, #0
   253d0:	mov	r3, #-2147483648	; 0x80000000
   253d4:	str	r3, [r0]
   253d8:	str	r2, [r0, #4]
   253dc:	pop	{fp, pc}
   253e0:	sub	r2, ip, #1
   253e4:	mvn	r3, #-2147483648	; 0x80000000
   253e8:	str	r3, [r0]
   253ec:	str	r2, [r0, #4]
   253f0:	pop	{fp, pc}
   253f4:	nop	{0}
   253f8:	andeq	r0, r0, r0
   253fc:	mvngt	r0, r0
   25400:	andeq	r0, r0, r0
   25404:	mvnmi	r0, r0
   25408:	andeq	r0, r0, r0
   2540c:	bicmi	ip, sp, r5, ror #26
   25410:	sub	sp, sp, #8
   25414:	push	{r4, r5, r6, r7, fp, lr}
   25418:	add	fp, sp, #16
   2541c:	sub	sp, sp, #8
   25420:	mov	r5, r0
   25424:	add	r0, fp, #8
   25428:	cmp	r1, #11
   2542c:	str	r2, [fp, #8]
   25430:	str	r3, [fp, #12]
   25434:	str	r0, [sp, #4]
   25438:	bhi	25474 <__assert_fail@plt+0x13108>
   2543c:	mov	r0, #1
   25440:	movw	r2, #1300	; 0x514
   25444:	tst	r2, r0, lsl r1
   25448:	bne	25534 <__assert_fail@plt+0x131c8>
   2544c:	movw	r2, #2570	; 0xa0a
   25450:	tst	r2, r0, lsl r1
   25454:	bne	2549c <__assert_fail@plt+0x13130>
   25458:	cmp	r1, #0
   2545c:	bne	25474 <__assert_fail@plt+0x13108>
   25460:	ldr	r0, [sp, #4]
   25464:	add	r1, r0, #4
   25468:	str	r1, [sp, #4]
   2546c:	mov	r1, #0
   25470:	b	25540 <__assert_fail@plt+0x131d4>
   25474:	sub	r0, r1, #1024	; 0x400
   25478:	cmp	r0, #10
   2547c:	bhi	25534 <__assert_fail@plt+0x131c8>
   25480:	mov	r2, #1
   25484:	movw	r3, #645	; 0x285
   25488:	tst	r3, r2, lsl r0
   2548c:	bne	25534 <__assert_fail@plt+0x131c8>
   25490:	movw	r3, #1282	; 0x502
   25494:	tst	r3, r2, lsl r0
   25498:	beq	254a8 <__assert_fail@plt+0x1313c>
   2549c:	mov	r0, r5
   254a0:	bl	12234 <fcntl64@plt>
   254a4:	b	2554c <__assert_fail@plt+0x131e0>
   254a8:	cmp	r0, #6
   254ac:	bne	25534 <__assert_fail@plt+0x131c8>
   254b0:	ldr	r0, [sp, #4]
   254b4:	movw	r7, #39424	; 0x9a00
   254b8:	movt	r7, #3
   254bc:	add	r1, r0, #4
   254c0:	str	r1, [sp, #4]
   254c4:	ldr	r6, [r0]
   254c8:	ldr	r0, [r7]
   254cc:	cmp	r0, #0
   254d0:	bmi	25570 <__assert_fail@plt+0x13204>
   254d4:	mov	r0, r5
   254d8:	movw	r1, #1030	; 0x406
   254dc:	mov	r2, r6
   254e0:	bl	12234 <fcntl64@plt>
   254e4:	mov	r4, r0
   254e8:	cmn	r0, #1
   254ec:	bgt	25564 <__assert_fail@plt+0x131f8>
   254f0:	bl	12198 <__errno_location@plt>
   254f4:	ldr	r0, [r0]
   254f8:	cmp	r0, #22
   254fc:	bne	25564 <__assert_fail@plt+0x131f8>
   25500:	mov	r0, r5
   25504:	mov	r1, #0
   25508:	mov	r2, r6
   2550c:	bl	12234 <fcntl64@plt>
   25510:	mov	r4, r0
   25514:	cmp	r0, #0
   25518:	bmi	25550 <__assert_fail@plt+0x131e4>
   2551c:	mvn	r0, #0
   25520:	str	r0, [r7]
   25524:	mov	r0, #1
   25528:	cmp	r0, #0
   2552c:	bne	2559c <__assert_fail@plt+0x13230>
   25530:	b	25550 <__assert_fail@plt+0x131e4>
   25534:	ldr	r0, [sp, #4]
   25538:	add	r2, r0, #4
   2553c:	str	r2, [sp, #4]
   25540:	ldr	r2, [r0]
   25544:	mov	r0, r5
   25548:	bl	12234 <fcntl64@plt>
   2554c:	mov	r4, r0
   25550:	mov	r0, r4
   25554:	sub	sp, fp, #16
   25558:	pop	{r4, r5, r6, r7, fp, lr}
   2555c:	add	sp, sp, #8
   25560:	bx	lr
   25564:	mov	r0, #1
   25568:	str	r0, [r7]
   2556c:	b	25550 <__assert_fail@plt+0x131e4>
   25570:	mov	r0, r5
   25574:	mov	r1, #0
   25578:	mov	r2, r6
   2557c:	bl	12234 <fcntl64@plt>
   25580:	mov	r4, r0
   25584:	ldr	r0, [r7]
   25588:	add	r0, r0, #1
   2558c:	clz	r0, r0
   25590:	lsr	r0, r0, #5
   25594:	cmp	r0, #0
   25598:	beq	25550 <__assert_fail@plt+0x131e4>
   2559c:	cmp	r4, #0
   255a0:	bmi	25550 <__assert_fail@plt+0x131e4>
   255a4:	mov	r0, r4
   255a8:	mov	r1, #1
   255ac:	bl	12234 <fcntl64@plt>
   255b0:	cmp	r0, #0
   255b4:	bmi	255d0 <__assert_fail@plt+0x13264>
   255b8:	orr	r2, r0, #1
   255bc:	mov	r0, r4
   255c0:	mov	r1, #2
   255c4:	bl	12234 <fcntl64@plt>
   255c8:	cmn	r0, #1
   255cc:	bne	25550 <__assert_fail@plt+0x131e4>
   255d0:	bl	12198 <__errno_location@plt>
   255d4:	ldr	r6, [r0]
   255d8:	mov	r5, r0
   255dc:	mov	r0, r4
   255e0:	bl	12354 <close@plt>
   255e4:	str	r6, [r5]
   255e8:	mvn	r4, #0
   255ec:	b	25550 <__assert_fail@plt+0x131e4>
   255f0:	push	{r4, r5, r6, r7, fp, lr}
   255f4:	add	fp, sp, #16
   255f8:	mov	r4, r0
   255fc:	cmp	r0, #2
   25600:	bhi	25630 <__assert_fail@plt+0x132c4>
   25604:	mov	r0, r4
   25608:	bl	25638 <__assert_fail@plt+0x132cc>
   2560c:	mov	r5, r0
   25610:	bl	12198 <__errno_location@plt>
   25614:	ldr	r7, [r0]
   25618:	mov	r6, r0
   2561c:	mov	r0, r4
   25620:	bl	12354 <close@plt>
   25624:	mov	r0, r5
   25628:	str	r7, [r6]
   2562c:	pop	{r4, r5, r6, r7, fp, pc}
   25630:	mov	r0, r4
   25634:	pop	{r4, r5, r6, r7, fp, pc}
   25638:	lsl	r1, r1, #12
   2563c:	movw	r2, #1030	; 0x406
   25640:	and	r1, r2, r1, asr #31
   25644:	mov	r2, #3
   25648:	b	25410 <__assert_fail@plt+0x130a4>
   2564c:	push	{r4, r5, r6, r7, fp, lr}
   25650:	add	fp, sp, #16
   25654:	mov	r5, r1
   25658:	bl	122b8 <fopen64@plt>
   2565c:	mov	r4, #0
   25660:	cmp	r0, #0
   25664:	beq	256cc <__assert_fail@plt+0x13360>
   25668:	mov	r6, r0
   2566c:	bl	121ec <fileno@plt>
   25670:	cmp	r0, #2
   25674:	bhi	256d4 <__assert_fail@plt+0x13368>
   25678:	bl	25dd4 <_obstack_memory_used@@Base+0xb4>
   2567c:	cmn	r0, #1
   25680:	ble	256dc <__assert_fail@plt+0x13370>
   25684:	mov	r7, r0
   25688:	mov	r0, r6
   2568c:	bl	1d69c <__assert_fail@plt+0xb330>
   25690:	cmp	r0, #0
   25694:	bne	256b0 <__assert_fail@plt+0x13344>
   25698:	mov	r0, r7
   2569c:	mov	r1, r5
   256a0:	bl	11e20 <fdopen@plt>
   256a4:	mov	r4, r0
   256a8:	cmp	r0, #0
   256ac:	bne	256cc <__assert_fail@plt+0x13360>
   256b0:	bl	12198 <__errno_location@plt>
   256b4:	ldr	r5, [r0]
   256b8:	mov	r4, r0
   256bc:	mov	r0, r7
   256c0:	bl	12354 <close@plt>
   256c4:	str	r5, [r4]
   256c8:	mov	r4, #0
   256cc:	mov	r0, r4
   256d0:	pop	{r4, r5, r6, r7, fp, pc}
   256d4:	mov	r0, r6
   256d8:	pop	{r4, r5, r6, r7, fp, pc}
   256dc:	bl	12198 <__errno_location@plt>
   256e0:	ldr	r7, [r0]
   256e4:	mov	r5, r0
   256e8:	mov	r0, r6
   256ec:	bl	1d69c <__assert_fail@plt+0xb330>
   256f0:	mov	r0, r4
   256f4:	str	r7, [r5]
   256f8:	pop	{r4, r5, r6, r7, fp, pc}
   256fc:	push	{fp, lr}
   25700:	mov	fp, sp
   25704:	mov	r0, #14
   25708:	bl	12294 <nl_langinfo@plt>
   2570c:	movw	r1, #25764	; 0x64a4
   25710:	cmp	r0, #0
   25714:	movt	r1, #2
   25718:	movne	r1, r0
   2571c:	movw	r0, #35421	; 0x8a5d
   25720:	ldrb	r2, [r1]
   25724:	movt	r0, #2
   25728:	cmp	r2, #0
   2572c:	movne	r0, r1
   25730:	pop	{fp, pc}
   25734:	push	{r4, r5, r6, r7, fp, lr}
   25738:	add	fp, sp, #16
   2573c:	sub	sp, sp, #8
   25740:	cmp	r0, #0
   25744:	add	r5, sp, #4
   25748:	mov	r7, r2
   2574c:	mov	r4, r1
   25750:	movne	r5, r0
   25754:	mov	r0, r5
   25758:	bl	1209c <mbrtowc@plt>
   2575c:	mov	r6, r0
   25760:	cmp	r7, #0
   25764:	beq	2578c <__assert_fail@plt+0x13420>
   25768:	cmn	r6, #2
   2576c:	bcc	2578c <__assert_fail@plt+0x13420>
   25770:	mov	r0, #0
   25774:	bl	1dd1c <__assert_fail@plt+0xb9b0>
   25778:	cmp	r0, #0
   2577c:	bne	2578c <__assert_fail@plt+0x13420>
   25780:	ldrb	r0, [r4]
   25784:	mov	r6, #1
   25788:	str	r0, [r5]
   2578c:	mov	r0, r6
   25790:	sub	sp, fp, #16
   25794:	pop	{r4, r5, r6, r7, fp, pc}
   25798:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2579c:	add	fp, sp, #28
   257a0:	sub	sp, sp, #28
   257a4:	mov	r4, r3
   257a8:	mov	r6, r2
   257ac:	mov	r5, r1
   257b0:	mov	r7, r0
   257b4:	cmp	r1, r3
   257b8:	bne	257d4 <__assert_fail@plt+0x13468>
   257bc:	mov	r0, r7
   257c0:	mov	r1, r6
   257c4:	mov	r2, r5
   257c8:	bl	1215c <bcmp@plt>
   257cc:	cmp	r0, #0
   257d0:	beq	2589c <__assert_fail@plt+0x13530>
   257d4:	ldrb	r0, [r6, r4]
   257d8:	mov	r9, #0
   257dc:	str	r4, [sp, #24]
   257e0:	add	r8, r4, #1
   257e4:	str	r5, [sp, #16]
   257e8:	add	sl, r5, #1
   257ec:	str	r0, [sp, #8]
   257f0:	ldrb	r0, [r7, r5]
   257f4:	strb	r9, [r7, r5]
   257f8:	strb	r9, [r6, r4]
   257fc:	str	r0, [sp, #4]
   25800:	bl	12198 <__errno_location@plt>
   25804:	mov	r4, r7
   25808:	mov	r5, r0
   2580c:	mov	r7, r6
   25810:	str	r6, [sp, #20]
   25814:	str	r4, [sp, #12]
   25818:	mov	r0, r4
   2581c:	mov	r1, r7
   25820:	str	r9, [r5]
   25824:	bl	120c0 <strcoll@plt>
   25828:	cmp	r0, #0
   2582c:	bne	2587c <__assert_fail@plt+0x13510>
   25830:	mov	r0, r4
   25834:	bl	12174 <strlen@plt>
   25838:	add	r6, r0, #1
   2583c:	mov	r0, r7
   25840:	sub	sl, sl, r6
   25844:	bl	12174 <strlen@plt>
   25848:	add	r0, r0, #1
   2584c:	cmp	sl, #0
   25850:	sub	r8, r8, r0
   25854:	beq	25870 <__assert_fail@plt+0x13504>
   25858:	add	r4, r4, r6
   2585c:	add	r7, r7, r0
   25860:	cmp	r8, #0
   25864:	bne	25818 <__assert_fail@plt+0x134ac>
   25868:	mov	r0, #1
   2586c:	b	2587c <__assert_fail@plt+0x13510>
   25870:	cmp	r8, #0
   25874:	mvnne	r8, #0
   25878:	mov	r0, r8
   2587c:	ldr	r1, [sp, #24]
   25880:	ldr	r2, [sp, #20]
   25884:	ldr	r3, [sp, #16]
   25888:	ldmib	sp, {r5, r6, r7}
   2588c:	strb	r5, [r7, r3]
   25890:	strb	r6, [r2, r1]
   25894:	sub	sp, fp, #28
   25898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2589c:	bl	12198 <__errno_location@plt>
   258a0:	mov	r1, r0
   258a4:	mov	r0, #0
   258a8:	str	r0, [r1]
   258ac:	sub	sp, fp, #28
   258b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   258b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   258b8:	add	fp, sp, #28
   258bc:	sub	sp, sp, #4
   258c0:	mov	sl, r3
   258c4:	mov	r5, r2
   258c8:	mov	r6, r1
   258cc:	mov	r7, r0
   258d0:	cmp	r1, r3
   258d4:	bne	258f0 <__assert_fail@plt+0x13584>
   258d8:	mov	r0, r7
   258dc:	mov	r1, r5
   258e0:	mov	r2, r6
   258e4:	bl	1215c <bcmp@plt>
   258e8:	cmp	r0, #0
   258ec:	beq	2596c <__assert_fail@plt+0x13600>
   258f0:	bl	12198 <__errno_location@plt>
   258f4:	mov	r8, r0
   258f8:	mov	r9, #0
   258fc:	mov	r0, r7
   25900:	mov	r1, r5
   25904:	str	r9, [r8]
   25908:	bl	120c0 <strcoll@plt>
   2590c:	cmp	r0, #0
   25910:	bne	25950 <__assert_fail@plt+0x135e4>
   25914:	mov	r0, r7
   25918:	bl	12174 <strlen@plt>
   2591c:	add	r4, r0, #1
   25920:	mov	r0, r5
   25924:	sub	r6, r6, r4
   25928:	bl	12174 <strlen@plt>
   2592c:	add	r0, r0, #1
   25930:	cmp	r6, #0
   25934:	sub	sl, sl, r0
   25938:	beq	25958 <__assert_fail@plt+0x135ec>
   2593c:	add	r7, r7, r4
   25940:	add	r5, r5, r0
   25944:	cmp	sl, #0
   25948:	bne	258fc <__assert_fail@plt+0x13590>
   2594c:	mov	r0, #1
   25950:	sub	sp, fp, #28
   25954:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25958:	cmp	sl, #0
   2595c:	mvnne	sl, #0
   25960:	mov	r0, sl
   25964:	sub	sp, fp, #28
   25968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2596c:	bl	12198 <__errno_location@plt>
   25970:	mov	r1, r0
   25974:	mov	r0, #0
   25978:	str	r0, [r1]
   2597c:	sub	sp, fp, #28
   25980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00025984 <_obstack_begin@@Base>:
   25984:	push	{r4, r5, r6, sl, fp, lr}
   25988:	add	fp, sp, #16
   2598c:	cmp	r1, #0
   25990:	mov	r4, r0
   25994:	str	r3, [r0, #28]
   25998:	mov	r5, r2
   2599c:	movweq	r1, #4072	; 0xfe8
   259a0:	cmp	r2, #0
   259a4:	str	r1, [r0]
   259a8:	ldr	r0, [fp, #8]
   259ac:	movweq	r5, #8
   259b0:	sub	r6, r5, #1
   259b4:	str	r0, [r4, #32]
   259b8:	str	r6, [r4, #24]
   259bc:	ldrb	r0, [r4, #40]	; 0x28
   259c0:	and	r0, r0, #254	; 0xfe
   259c4:	strb	r0, [r4, #40]	; 0x28
   259c8:	mov	r0, r1
   259cc:	blx	r3
   259d0:	cmp	r0, #0
   259d4:	str	r0, [r4, #4]
   259d8:	addne	r1, r0, r6
   259dc:	rsbne	r2, r5, #0
   259e0:	addne	r1, r1, #8
   259e4:	andne	r1, r1, r2
   259e8:	strne	r1, [r4, #12]
   259ec:	strne	r1, [r4, #8]
   259f0:	ldrne	r1, [r4]
   259f4:	addne	r1, r0, r1
   259f8:	strne	r1, [r0]
   259fc:	strne	r1, [r4, #16]
   25a00:	movne	r1, #0
   25a04:	strne	r1, [r0, #4]
   25a08:	ldrbne	r0, [r4, #40]	; 0x28
   25a0c:	andne	r0, r0, #249	; 0xf9
   25a10:	strbne	r0, [r4, #40]	; 0x28
   25a14:	movne	r0, #1
   25a18:	popne	{r4, r5, r6, sl, fp, pc}
   25a1c:	movw	r0, #37560	; 0x92b8
   25a20:	movt	r0, #3
   25a24:	ldr	r0, [r0]
   25a28:	blx	r0

00025a2c <_obstack_begin_1@@Base>:
   25a2c:	push	{r4, r5, r6, sl, fp, lr}
   25a30:	add	fp, sp, #16
   25a34:	cmp	r1, #0
   25a38:	mov	r5, r2
   25a3c:	mov	r4, r0
   25a40:	str	r3, [r0, #28]
   25a44:	ldr	r2, [fp, #8]
   25a48:	movweq	r1, #4072	; 0xfe8
   25a4c:	cmp	r5, #0
   25a50:	str	r1, [r0]
   25a54:	ldr	r0, [fp, #12]
   25a58:	movweq	r5, #8
   25a5c:	sub	r6, r5, #1
   25a60:	str	r0, [r4, #36]	; 0x24
   25a64:	str	r2, [r4, #32]
   25a68:	str	r6, [r4, #24]
   25a6c:	ldrb	r2, [r4, #40]	; 0x28
   25a70:	orr	r2, r2, #1
   25a74:	strb	r2, [r4, #40]	; 0x28
   25a78:	blx	r3
   25a7c:	cmp	r0, #0
   25a80:	str	r0, [r4, #4]
   25a84:	addne	r1, r0, r6
   25a88:	rsbne	r2, r5, #0
   25a8c:	addne	r1, r1, #8
   25a90:	andne	r1, r1, r2
   25a94:	strne	r1, [r4, #12]
   25a98:	strne	r1, [r4, #8]
   25a9c:	ldrne	r1, [r4]
   25aa0:	addne	r1, r0, r1
   25aa4:	strne	r1, [r0]
   25aa8:	strne	r1, [r4, #16]
   25aac:	movne	r1, #0
   25ab0:	strne	r1, [r0, #4]
   25ab4:	ldrbne	r0, [r4, #40]	; 0x28
   25ab8:	andne	r0, r0, #249	; 0xf9
   25abc:	strbne	r0, [r4, #40]	; 0x28
   25ac0:	movne	r0, #1
   25ac4:	popne	{r4, r5, r6, sl, fp, pc}
   25ac8:	movw	r0, #37560	; 0x92b8
   25acc:	movt	r0, #3
   25ad0:	ldr	r0, [r0]
   25ad4:	blx	r0

00025ad8 <_obstack_newchunk@@Base>:
   25ad8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25adc:	add	fp, sp, #28
   25ae0:	sub	sp, sp, #4
   25ae4:	mov	r4, r0
   25ae8:	ldr	r2, [r0]
   25aec:	ldr	r0, [r0, #8]
   25af0:	ldr	r3, [r4, #12]
   25af4:	sub	r9, r3, r0
   25af8:	ldr	r0, [r4, #24]
   25afc:	mov	r3, #0
   25b00:	add	r1, r9, r1
   25b04:	adds	r6, r1, r0
   25b08:	adc	r0, r3, #0
   25b0c:	mov	r3, #100	; 0x64
   25b10:	add	r3, r3, r9, lsr #3
   25b14:	adds	r7, r3, r6
   25b18:	movcs	r7, r6
   25b1c:	cmp	r7, r2
   25b20:	movcc	r7, r2
   25b24:	cmp	r1, r9
   25b28:	bcc	25c2c <_obstack_newchunk@@Base+0x154>
   25b2c:	cmp	r0, #0
   25b30:	bne	25c2c <_obstack_newchunk@@Base+0x154>
   25b34:	ldrb	r0, [r4, #40]	; 0x28
   25b38:	ldr	r8, [r4, #4]
   25b3c:	tst	r0, #1
   25b40:	bne	25b60 <_obstack_newchunk@@Base+0x88>
   25b44:	ldr	r1, [r4, #28]
   25b48:	mov	r0, r7
   25b4c:	blx	r1
   25b50:	mov	r6, r0
   25b54:	cmp	r0, #0
   25b58:	bne	25b7c <_obstack_newchunk@@Base+0xa4>
   25b5c:	b	25c2c <_obstack_newchunk@@Base+0x154>
   25b60:	ldr	r2, [r4, #28]
   25b64:	ldr	r0, [r4, #36]	; 0x24
   25b68:	mov	r1, r7
   25b6c:	blx	r2
   25b70:	mov	r6, r0
   25b74:	cmp	r0, #0
   25b78:	beq	25c2c <_obstack_newchunk@@Base+0x154>
   25b7c:	add	r0, r6, r7
   25b80:	str	r6, [r4, #4]
   25b84:	str	r8, [r6, #4]
   25b88:	mov	r2, r9
   25b8c:	str	r0, [r4, #16]
   25b90:	str	r0, [r6]
   25b94:	ldr	r5, [r4, #24]
   25b98:	ldr	sl, [r4, #8]
   25b9c:	add	r0, r6, r5
   25ba0:	mov	r1, sl
   25ba4:	add	r0, r0, #8
   25ba8:	bic	r7, r0, r5
   25bac:	mov	r0, r7
   25bb0:	bl	11eec <memcpy@plt>
   25bb4:	ldrb	r0, [r4, #40]	; 0x28
   25bb8:	tst	r0, #2
   25bbc:	bne	25c0c <_obstack_newchunk@@Base+0x134>
   25bc0:	add	r1, r8, r5
   25bc4:	mvn	r0, r5
   25bc8:	add	r1, r1, #8
   25bcc:	and	r0, r1, r0
   25bd0:	cmp	sl, r0
   25bd4:	bne	25c0c <_obstack_newchunk@@Base+0x134>
   25bd8:	ldr	r0, [r8, #4]
   25bdc:	str	r0, [r6, #4]
   25be0:	ldrb	r0, [r4, #40]	; 0x28
   25be4:	tst	r0, #1
   25be8:	bne	25bfc <_obstack_newchunk@@Base+0x124>
   25bec:	ldr	r1, [r4, #32]
   25bf0:	mov	r0, r8
   25bf4:	blx	r1
   25bf8:	b	25c0c <_obstack_newchunk@@Base+0x134>
   25bfc:	ldr	r2, [r4, #32]
   25c00:	ldr	r0, [r4, #36]	; 0x24
   25c04:	mov	r1, r8
   25c08:	blx	r2
   25c0c:	add	r0, r7, r9
   25c10:	str	r7, [r4, #8]
   25c14:	str	r0, [r4, #12]
   25c18:	ldrb	r0, [r4, #40]	; 0x28
   25c1c:	and	r0, r0, #253	; 0xfd
   25c20:	strb	r0, [r4, #40]	; 0x28
   25c24:	sub	sp, fp, #28
   25c28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c2c:	movw	r0, #37560	; 0x92b8
   25c30:	movt	r0, #3
   25c34:	ldr	r0, [r0]
   25c38:	blx	r0

00025c3c <_obstack_allocated_p@@Base>:
   25c3c:	ldr	r2, [r0, #4]
   25c40:	mov	r0, #0
   25c44:	cmp	r2, #0
   25c48:	bxeq	lr
   25c4c:	cmp	r2, r1
   25c50:	bcc	25c68 <_obstack_allocated_p@@Base+0x2c>
   25c54:	ldr	r2, [r2, #4]
   25c58:	cmp	r2, #0
   25c5c:	bxeq	lr
   25c60:	cmp	r2, r1
   25c64:	bcs	25c54 <_obstack_allocated_p@@Base+0x18>
   25c68:	ldr	r3, [r2]
   25c6c:	cmp	r3, r1
   25c70:	bcc	25c54 <_obstack_allocated_p@@Base+0x18>
   25c74:	mov	r0, #1
   25c78:	bx	lr

00025c7c <_obstack_free@@Base>:
   25c7c:	push	{r4, r5, r6, sl, fp, lr}
   25c80:	add	fp, sp, #16
   25c84:	mov	r5, r1
   25c88:	ldr	r1, [r0, #4]
   25c8c:	cmp	r1, #0
   25c90:	beq	25cfc <_obstack_free@@Base+0x80>
   25c94:	mov	r4, r0
   25c98:	cmp	r1, r5
   25c9c:	bcs	25cdc <_obstack_free@@Base+0x60>
   25ca0:	b	25cd0 <_obstack_free@@Base+0x54>
   25ca4:	ldr	r2, [r4, #32]
   25ca8:	mov	r0, r1
   25cac:	blx	r2
   25cb0:	ldrb	r0, [r4, #40]	; 0x28
   25cb4:	cmp	r6, #0
   25cb8:	mov	r1, r6
   25cbc:	orr	r0, r0, #2
   25cc0:	strb	r0, [r4, #40]	; 0x28
   25cc4:	beq	25cfc <_obstack_free@@Base+0x80>
   25cc8:	cmp	r1, r5
   25ccc:	bcs	25cdc <_obstack_free@@Base+0x60>
   25cd0:	ldr	r0, [r1]
   25cd4:	cmp	r0, r5
   25cd8:	bcs	25d08 <_obstack_free@@Base+0x8c>
   25cdc:	ldrb	r0, [r4, #40]	; 0x28
   25ce0:	ldr	r6, [r1, #4]
   25ce4:	tst	r0, #1
   25ce8:	beq	25ca4 <_obstack_free@@Base+0x28>
   25cec:	ldr	r2, [r4, #32]
   25cf0:	ldr	r0, [r4, #36]	; 0x24
   25cf4:	blx	r2
   25cf8:	b	25cb0 <_obstack_free@@Base+0x34>
   25cfc:	cmp	r5, #0
   25d00:	popeq	{r4, r5, r6, sl, fp, pc}
   25d04:	bl	12348 <abort@plt>
   25d08:	str	r5, [r4, #8]
   25d0c:	str	r5, [r4, #12]
   25d10:	ldr	r0, [r1]
   25d14:	str	r1, [r4, #4]
   25d18:	str	r0, [r4, #16]
   25d1c:	pop	{r4, r5, r6, sl, fp, pc}

00025d20 <_obstack_memory_used@@Base>:
   25d20:	ldr	r1, [r0, #4]
   25d24:	mov	r0, #0
   25d28:	b	25d3c <_obstack_memory_used@@Base+0x1c>
   25d2c:	ldr	r2, [r1]
   25d30:	sub	r0, r0, r1
   25d34:	ldr	r1, [r1, #4]
   25d38:	add	r0, r0, r2
   25d3c:	cmp	r1, #0
   25d40:	bxeq	lr
   25d44:	b	25d2c <_obstack_memory_used@@Base+0xc>
   25d48:	push	{fp, lr}
   25d4c:	mov	fp, sp
   25d50:	movw	r0, #37584	; 0x92d0
   25d54:	movw	r1, #35054	; 0x88ee
   25d58:	mov	r2, #5
   25d5c:	movt	r0, #3
   25d60:	movt	r1, #2
   25d64:	ldr	r4, [r0]
   25d68:	mov	r0, #0
   25d6c:	bl	11f7c <dcgettext@plt>
   25d70:	movw	r2, #34278	; 0x85e6
   25d74:	mov	r3, r0
   25d78:	mov	r0, r4
   25d7c:	mov	r1, #1
   25d80:	movt	r2, #2
   25d84:	bl	121f8 <__fprintf_chk@plt>
   25d88:	movw	r0, #37488	; 0x9270
   25d8c:	movt	r0, #3
   25d90:	ldr	r0, [r0]
   25d94:	bl	12150 <exit@plt>
   25d98:	cmp	r2, #0
   25d9c:	beq	25dcc <_obstack_memory_used@@Base+0xac>
   25da0:	mvn	r3, #0
   25da4:	udiv	r3, r3, r2
   25da8:	cmp	r3, r1
   25dac:	bcs	25dcc <_obstack_memory_used@@Base+0xac>
   25db0:	push	{fp, lr}
   25db4:	mov	fp, sp
   25db8:	bl	12198 <__errno_location@plt>
   25dbc:	mov	r1, #12
   25dc0:	str	r1, [r0]
   25dc4:	mov	r0, #0
   25dc8:	pop	{fp, pc}
   25dcc:	mul	r1, r2, r1
   25dd0:	b	24f3c <__assert_fail@plt+0x12bd0>
   25dd4:	mov	r1, #0
   25dd8:	mov	r2, #3
   25ddc:	b	25410 <__assert_fail@plt+0x130a4>
   25de0:	eor	r1, r1, #-2147483648	; 0x80000000
   25de4:	b	25dec <_obstack_memory_used@@Base+0xcc>
   25de8:	eor	r3, r3, #-2147483648	; 0x80000000
   25dec:	push	{r4, r5, lr}
   25df0:	lsl	r4, r1, #1
   25df4:	lsl	r5, r3, #1
   25df8:	teq	r4, r5
   25dfc:	teqeq	r0, r2
   25e00:	orrsne	ip, r4, r0
   25e04:	orrsne	ip, r5, r2
   25e08:	mvnsne	ip, r4, asr #21
   25e0c:	mvnsne	ip, r5, asr #21
   25e10:	beq	25ffc <_obstack_memory_used@@Base+0x2dc>
   25e14:	lsr	r4, r4, #21
   25e18:	rsbs	r5, r4, r5, lsr #21
   25e1c:	rsblt	r5, r5, #0
   25e20:	ble	25e40 <_obstack_memory_used@@Base+0x120>
   25e24:	add	r4, r4, r5
   25e28:	eor	r2, r0, r2
   25e2c:	eor	r3, r1, r3
   25e30:	eor	r0, r2, r0
   25e34:	eor	r1, r3, r1
   25e38:	eor	r2, r0, r2
   25e3c:	eor	r3, r1, r3
   25e40:	cmp	r5, #54	; 0x36
   25e44:	pophi	{r4, r5, pc}
   25e48:	tst	r1, #-2147483648	; 0x80000000
   25e4c:	lsl	r1, r1, #12
   25e50:	mov	ip, #1048576	; 0x100000
   25e54:	orr	r1, ip, r1, lsr #12
   25e58:	beq	25e64 <_obstack_memory_used@@Base+0x144>
   25e5c:	rsbs	r0, r0, #0
   25e60:	rsc	r1, r1, #0
   25e64:	tst	r3, #-2147483648	; 0x80000000
   25e68:	lsl	r3, r3, #12
   25e6c:	orr	r3, ip, r3, lsr #12
   25e70:	beq	25e7c <_obstack_memory_used@@Base+0x15c>
   25e74:	rsbs	r2, r2, #0
   25e78:	rsc	r3, r3, #0
   25e7c:	teq	r4, r5
   25e80:	beq	25fe4 <_obstack_memory_used@@Base+0x2c4>
   25e84:	sub	r4, r4, #1
   25e88:	rsbs	lr, r5, #32
   25e8c:	blt	25ea8 <_obstack_memory_used@@Base+0x188>
   25e90:	lsl	ip, r2, lr
   25e94:	adds	r0, r0, r2, lsr r5
   25e98:	adc	r1, r1, #0
   25e9c:	adds	r0, r0, r3, lsl lr
   25ea0:	adcs	r1, r1, r3, asr r5
   25ea4:	b	25ec4 <_obstack_memory_used@@Base+0x1a4>
   25ea8:	sub	r5, r5, #32
   25eac:	add	lr, lr, #32
   25eb0:	cmp	r2, #1
   25eb4:	lsl	ip, r3, lr
   25eb8:	orrcs	ip, ip, #2
   25ebc:	adds	r0, r0, r3, asr r5
   25ec0:	adcs	r1, r1, r3, asr #31
   25ec4:	and	r5, r1, #-2147483648	; 0x80000000
   25ec8:	bpl	25ed8 <_obstack_memory_used@@Base+0x1b8>
   25ecc:	rsbs	ip, ip, #0
   25ed0:	rscs	r0, r0, #0
   25ed4:	rsc	r1, r1, #0
   25ed8:	cmp	r1, #1048576	; 0x100000
   25edc:	bcc	25f1c <_obstack_memory_used@@Base+0x1fc>
   25ee0:	cmp	r1, #2097152	; 0x200000
   25ee4:	bcc	25f04 <_obstack_memory_used@@Base+0x1e4>
   25ee8:	lsrs	r1, r1, #1
   25eec:	rrxs	r0, r0
   25ef0:	rrx	ip, ip
   25ef4:	add	r4, r4, #1
   25ef8:	lsl	r2, r4, #21
   25efc:	cmn	r2, #4194304	; 0x400000
   25f00:	bcs	2605c <_obstack_memory_used@@Base+0x33c>
   25f04:	cmp	ip, #-2147483648	; 0x80000000
   25f08:	lsrseq	ip, r0, #1
   25f0c:	adcs	r0, r0, #0
   25f10:	adc	r1, r1, r4, lsl #20
   25f14:	orr	r1, r1, r5
   25f18:	pop	{r4, r5, pc}
   25f1c:	lsls	ip, ip, #1
   25f20:	adcs	r0, r0, r0
   25f24:	adc	r1, r1, r1
   25f28:	tst	r1, #1048576	; 0x100000
   25f2c:	sub	r4, r4, #1
   25f30:	bne	25f04 <_obstack_memory_used@@Base+0x1e4>
   25f34:	teq	r1, #0
   25f38:	moveq	r1, r0
   25f3c:	moveq	r0, #0
   25f40:	clz	r3, r1
   25f44:	addeq	r3, r3, #32
   25f48:	sub	r3, r3, #11
   25f4c:	subs	r2, r3, #32
   25f50:	bge	25f74 <_obstack_memory_used@@Base+0x254>
   25f54:	adds	r2, r2, #12
   25f58:	ble	25f70 <_obstack_memory_used@@Base+0x250>
   25f5c:	add	ip, r2, #20
   25f60:	rsb	r2, r2, #12
   25f64:	lsl	r0, r1, ip
   25f68:	lsr	r1, r1, r2
   25f6c:	b	25f84 <_obstack_memory_used@@Base+0x264>
   25f70:	add	r2, r2, #20
   25f74:	rsble	ip, r2, #32
   25f78:	lsl	r1, r1, r2
   25f7c:	orrle	r1, r1, r0, lsr ip
   25f80:	lslle	r0, r0, r2
   25f84:	subs	r4, r4, r3
   25f88:	addge	r1, r1, r4, lsl #20
   25f8c:	orrge	r1, r1, r5
   25f90:	popge	{r4, r5, pc}
   25f94:	mvn	r4, r4
   25f98:	subs	r4, r4, #31
   25f9c:	bge	25fd8 <_obstack_memory_used@@Base+0x2b8>
   25fa0:	adds	r4, r4, #12
   25fa4:	bgt	25fc0 <_obstack_memory_used@@Base+0x2a0>
   25fa8:	add	r4, r4, #20
   25fac:	rsb	r2, r4, #32
   25fb0:	lsr	r0, r0, r4
   25fb4:	orr	r0, r0, r1, lsl r2
   25fb8:	orr	r1, r5, r1, lsr r4
   25fbc:	pop	{r4, r5, pc}
   25fc0:	rsb	r4, r4, #12
   25fc4:	rsb	r2, r4, #32
   25fc8:	lsr	r0, r0, r2
   25fcc:	orr	r0, r0, r1, lsl r4
   25fd0:	mov	r1, r5
   25fd4:	pop	{r4, r5, pc}
   25fd8:	lsr	r0, r1, r4
   25fdc:	mov	r1, r5
   25fe0:	pop	{r4, r5, pc}
   25fe4:	teq	r4, #0
   25fe8:	eor	r3, r3, #1048576	; 0x100000
   25fec:	eoreq	r1, r1, #1048576	; 0x100000
   25ff0:	addeq	r4, r4, #1
   25ff4:	subne	r5, r5, #1
   25ff8:	b	25e84 <_obstack_memory_used@@Base+0x164>
   25ffc:	mvns	ip, r4, asr #21
   26000:	mvnsne	ip, r5, asr #21
   26004:	beq	2606c <_obstack_memory_used@@Base+0x34c>
   26008:	teq	r4, r5
   2600c:	teqeq	r0, r2
   26010:	beq	26024 <_obstack_memory_used@@Base+0x304>
   26014:	orrs	ip, r4, r0
   26018:	moveq	r1, r3
   2601c:	moveq	r0, r2
   26020:	pop	{r4, r5, pc}
   26024:	teq	r1, r3
   26028:	movne	r1, #0
   2602c:	movne	r0, #0
   26030:	popne	{r4, r5, pc}
   26034:	lsrs	ip, r4, #21
   26038:	bne	2604c <_obstack_memory_used@@Base+0x32c>
   2603c:	lsls	r0, r0, #1
   26040:	adcs	r1, r1, r1
   26044:	orrcs	r1, r1, #-2147483648	; 0x80000000
   26048:	pop	{r4, r5, pc}
   2604c:	adds	r4, r4, #4194304	; 0x400000
   26050:	addcc	r1, r1, #1048576	; 0x100000
   26054:	popcc	{r4, r5, pc}
   26058:	and	r5, r1, #-2147483648	; 0x80000000
   2605c:	orr	r1, r5, #2130706432	; 0x7f000000
   26060:	orr	r1, r1, #15728640	; 0xf00000
   26064:	mov	r0, #0
   26068:	pop	{r4, r5, pc}
   2606c:	mvns	ip, r4, asr #21
   26070:	movne	r1, r3
   26074:	movne	r0, r2
   26078:	mvnseq	ip, r5, asr #21
   2607c:	movne	r3, r1
   26080:	movne	r2, r0
   26084:	orrs	r4, r0, r1, lsl #12
   26088:	orrseq	r5, r2, r3, lsl #12
   2608c:	teqeq	r1, r3
   26090:	orrne	r1, r1, #524288	; 0x80000
   26094:	pop	{r4, r5, pc}
   26098:	teq	r0, #0
   2609c:	moveq	r1, #0
   260a0:	bxeq	lr
   260a4:	push	{r4, r5, lr}
   260a8:	mov	r4, #1024	; 0x400
   260ac:	add	r4, r4, #50	; 0x32
   260b0:	mov	r5, #0
   260b4:	mov	r1, #0
   260b8:	b	25f34 <_obstack_memory_used@@Base+0x214>
   260bc:	teq	r0, #0
   260c0:	moveq	r1, #0
   260c4:	bxeq	lr
   260c8:	push	{r4, r5, lr}
   260cc:	mov	r4, #1024	; 0x400
   260d0:	add	r4, r4, #50	; 0x32
   260d4:	ands	r5, r0, #-2147483648	; 0x80000000
   260d8:	rsbmi	r0, r0, #0
   260dc:	mov	r1, #0
   260e0:	b	25f34 <_obstack_memory_used@@Base+0x214>
   260e4:	lsls	r2, r0, #1
   260e8:	asr	r1, r2, #3
   260ec:	rrx	r1, r1
   260f0:	lsl	r0, r2, #28
   260f4:	andsne	r3, r2, #-16777216	; 0xff000000
   260f8:	teqne	r3, #-16777216	; 0xff000000
   260fc:	eorne	r1, r1, #939524096	; 0x38000000
   26100:	bxne	lr
   26104:	bics	r2, r2, #-16777216	; 0xff000000
   26108:	bxeq	lr
   2610c:	teq	r3, #-16777216	; 0xff000000
   26110:	orreq	r1, r1, #524288	; 0x80000
   26114:	bxeq	lr
   26118:	push	{r4, r5, lr}
   2611c:	mov	r4, #896	; 0x380
   26120:	and	r5, r1, #-2147483648	; 0x80000000
   26124:	bic	r1, r1, #-2147483648	; 0x80000000
   26128:	b	25f34 <_obstack_memory_used@@Base+0x214>
   2612c:	orrs	r2, r0, r1
   26130:	bxeq	lr
   26134:	push	{r4, r5, lr}
   26138:	mov	r5, #0
   2613c:	b	2615c <_obstack_memory_used@@Base+0x43c>
   26140:	orrs	r2, r0, r1
   26144:	bxeq	lr
   26148:	push	{r4, r5, lr}
   2614c:	ands	r5, r1, #-2147483648	; 0x80000000
   26150:	bpl	2615c <_obstack_memory_used@@Base+0x43c>
   26154:	rsbs	r0, r0, #0
   26158:	rsc	r1, r1, #0
   2615c:	mov	r4, #1024	; 0x400
   26160:	add	r4, r4, #50	; 0x32
   26164:	lsrs	ip, r1, #22
   26168:	beq	25ed8 <_obstack_memory_used@@Base+0x1b8>
   2616c:	mov	r2, #3
   26170:	lsrs	ip, ip, #3
   26174:	addne	r2, r2, #3
   26178:	lsrs	ip, ip, #3
   2617c:	addne	r2, r2, #3
   26180:	add	r2, r2, ip, lsr #3
   26184:	rsb	r3, r2, #32
   26188:	lsl	ip, r0, r3
   2618c:	lsr	r0, r0, r2
   26190:	orr	r0, r0, r1, lsl r3
   26194:	lsr	r1, r1, r2
   26198:	add	r4, r4, r2
   2619c:	b	25ed8 <_obstack_memory_used@@Base+0x1b8>
   261a0:	cmp	r3, #0
   261a4:	cmpeq	r2, #0
   261a8:	bne	261c0 <_obstack_memory_used@@Base+0x4a0>
   261ac:	cmp	r1, #0
   261b0:	cmpeq	r0, #0
   261b4:	mvnne	r1, #0
   261b8:	mvnne	r0, #0
   261bc:	b	261dc <_obstack_memory_used@@Base+0x4bc>
   261c0:	sub	sp, sp, #8
   261c4:	push	{sp, lr}
   261c8:	bl	26230 <_obstack_memory_used@@Base+0x510>
   261cc:	ldr	lr, [sp, #4]
   261d0:	add	sp, sp, #8
   261d4:	pop	{r2, r3}
   261d8:	bx	lr
   261dc:	push	{r1, lr}
   261e0:	mov	r0, #8
   261e4:	bl	11e44 <raise@plt>
   261e8:	pop	{r1, pc}
   261ec:	andeq	r0, r0, r0
   261f0:	vmov	d6, r0, r1
   261f4:	vldr	d7, [pc, #36]	; 26220 <_obstack_memory_used@@Base+0x500>
   261f8:	vldr	d5, [pc, #40]	; 26228 <_obstack_memory_used@@Base+0x508>
   261fc:	vmul.f64	d7, d6, d7
   26200:	vcvt.u32.f64	s14, d7
   26204:	vcvt.f64.u32	d4, s14
   26208:	vmov	r1, s14
   2620c:	vmls.f64	d6, d4, d5
   26210:	vcvt.u32.f64	s15, d6
   26214:	vmov	r0, s15
   26218:	bx	lr
   2621c:	nop			; (mov r0, r0)
   26220:	andeq	r0, r0, r0
   26224:	ldclcc	0, cr0, [r0]
   26228:	andeq	r0, r0, r0
   2622c:	mvnsmi	r0, r0
   26230:	cmp	r1, r3
   26234:	cmpeq	r0, r2
   26238:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2623c:	mov	r4, r0
   26240:	movcc	r0, #0
   26244:	mov	r5, r1
   26248:	ldr	lr, [sp, #36]	; 0x24
   2624c:	movcc	r1, r0
   26250:	bcc	2634c <_obstack_memory_used@@Base+0x62c>
   26254:	cmp	r3, #0
   26258:	clzeq	ip, r2
   2625c:	clzne	ip, r3
   26260:	addeq	ip, ip, #32
   26264:	cmp	r5, #0
   26268:	clzeq	r1, r4
   2626c:	addeq	r1, r1, #32
   26270:	clzne	r1, r5
   26274:	sub	ip, ip, r1
   26278:	sub	sl, ip, #32
   2627c:	lsl	r9, r3, ip
   26280:	rsb	fp, ip, #32
   26284:	orr	r9, r9, r2, lsl sl
   26288:	orr	r9, r9, r2, lsr fp
   2628c:	lsl	r8, r2, ip
   26290:	cmp	r5, r9
   26294:	cmpeq	r4, r8
   26298:	movcc	r0, #0
   2629c:	movcc	r1, r0
   262a0:	bcc	262bc <_obstack_memory_used@@Base+0x59c>
   262a4:	mov	r0, #1
   262a8:	subs	r4, r4, r8
   262ac:	lsl	r1, r0, sl
   262b0:	orr	r1, r1, r0, lsr fp
   262b4:	lsl	r0, r0, ip
   262b8:	sbc	r5, r5, r9
   262bc:	cmp	ip, #0
   262c0:	beq	2634c <_obstack_memory_used@@Base+0x62c>
   262c4:	lsr	r6, r8, #1
   262c8:	orr	r6, r6, r9, lsl #31
   262cc:	lsr	r7, r9, #1
   262d0:	mov	r2, ip
   262d4:	b	262f8 <_obstack_memory_used@@Base+0x5d8>
   262d8:	subs	r3, r4, r6
   262dc:	sbc	r8, r5, r7
   262e0:	adds	r3, r3, r3
   262e4:	adc	r8, r8, r8
   262e8:	adds	r4, r3, #1
   262ec:	adc	r5, r8, #0
   262f0:	subs	r2, r2, #1
   262f4:	beq	26314 <_obstack_memory_used@@Base+0x5f4>
   262f8:	cmp	r5, r7
   262fc:	cmpeq	r4, r6
   26300:	bcs	262d8 <_obstack_memory_used@@Base+0x5b8>
   26304:	adds	r4, r4, r4
   26308:	adc	r5, r5, r5
   2630c:	subs	r2, r2, #1
   26310:	bne	262f8 <_obstack_memory_used@@Base+0x5d8>
   26314:	lsr	r3, r4, ip
   26318:	orr	r3, r3, r5, lsl fp
   2631c:	lsr	r2, r5, ip
   26320:	orr	r3, r3, r5, lsr sl
   26324:	adds	r0, r0, r4
   26328:	mov	r4, r3
   2632c:	lsl	r3, r2, ip
   26330:	orr	r3, r3, r4, lsl sl
   26334:	lsl	ip, r4, ip
   26338:	orr	r3, r3, r4, lsr fp
   2633c:	adc	r1, r1, r5
   26340:	subs	r0, r0, ip
   26344:	mov	r5, r2
   26348:	sbc	r1, r1, r3
   2634c:	cmp	lr, #0
   26350:	strdne	r4, [lr]
   26354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26358:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2635c:	mov	r7, r0
   26360:	ldr	r6, [pc, #72]	; 263b0 <_obstack_memory_used@@Base+0x690>
   26364:	ldr	r5, [pc, #72]	; 263b4 <_obstack_memory_used@@Base+0x694>
   26368:	add	r6, pc, r6
   2636c:	add	r5, pc, r5
   26370:	sub	r6, r6, r5
   26374:	mov	r8, r1
   26378:	mov	r9, r2
   2637c:	bl	11df4 <pthread_mutex_unlock@plt-0x20>
   26380:	asrs	r6, r6, #2
   26384:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   26388:	mov	r4, #0
   2638c:	add	r4, r4, #1
   26390:	ldr	r3, [r5], #4
   26394:	mov	r2, r9
   26398:	mov	r1, r8
   2639c:	mov	r0, r7
   263a0:	blx	r3
   263a4:	cmp	r6, r4
   263a8:	bne	2638c <_obstack_memory_used@@Base+0x66c>
   263ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   263b0:	muleq	r1, r4, fp
   263b4:	andeq	r2, r1, ip, lsl #23
   263b8:	bx	lr
   263bc:	ldr	r3, [pc, #12]	; 263d0 <_obstack_memory_used@@Base+0x6b0>
   263c0:	mov	r1, #0
   263c4:	add	r3, pc, r3
   263c8:	ldr	r2, [r3]
   263cc:	b	121a4 <__cxa_atexit@plt>
   263d0:	andeq	r2, r1, r8, lsl lr

Disassembly of section .fini:

000263d4 <.fini>:
   263d4:	push	{r3, lr}
   263d8:	pop	{r3, pc}
