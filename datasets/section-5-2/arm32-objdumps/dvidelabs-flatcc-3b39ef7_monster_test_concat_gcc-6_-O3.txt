
../repos/dvidelabs-flatcc-3b39ef7/test/monster_test_concat/monster_test_concat:     file format elf32-littlearm


Disassembly of section .init:

00012290 <.init>:
   12290:	push	{r3, lr}
   12294:	bl	12598 <_start@@Base+0x3c>
   12298:	pop	{r3, pc}

Disassembly of section .plt:

0001229c <free@plt-0x14>:
   1229c:	push	{lr}		; (str lr, [sp, #-4]!)
   122a0:	ldr	lr, [pc, #4]	; 122ac <free@plt-0x4>
   122a4:	add	lr, pc, lr
   122a8:	ldr	pc, [lr, #8]!
   122ac:	andeq	r9, r1, r4, asr sp

000122b0 <free@plt>:
   122b0:	add	ip, pc, #0, 12
   122b4:	add	ip, ip, #102400	; 0x19000
   122b8:	ldr	pc, [ip, #3412]!	; 0xd54

000122bc <memcpy@plt>:
   122bc:	add	ip, pc, #0, 12
   122c0:	add	ip, ip, #102400	; 0x19000
   122c4:	ldr	pc, [ip, #3404]!	; 0xd4c

000122c8 <memcmp@plt>:
   122c8:	add	ip, pc, #0, 12
   122cc:	add	ip, ip, #102400	; 0x19000
   122d0:	ldr	pc, [ip, #3396]!	; 0xd44

000122d4 <realloc@plt>:
   122d4:	add	ip, pc, #0, 12
   122d8:	add	ip, ip, #102400	; 0x19000
   122dc:	ldr	pc, [ip, #3388]!	; 0xd3c

000122e0 <malloc@plt>:
   122e0:	add	ip, pc, #0, 12
   122e4:	add	ip, ip, #102400	; 0x19000
   122e8:	ldr	pc, [ip, #3380]!	; 0xd34

000122ec <__libc_start_main@plt>:
   122ec:	add	ip, pc, #0, 12
   122f0:	add	ip, ip, #102400	; 0x19000
   122f4:	ldr	pc, [ip, #3372]!	; 0xd2c

000122f8 <__gmon_start__@plt>:
   122f8:	add	ip, pc, #0, 12
   122fc:	add	ip, ip, #102400	; 0x19000
   12300:	ldr	pc, [ip, #3364]!	; 0xd24

00012304 <strlen@plt>:
   12304:	add	ip, pc, #0, 12
   12308:	add	ip, ip, #102400	; 0x19000
   1230c:	ldr	pc, [ip, #3356]!	; 0xd1c

00012310 <posix_memalign@plt>:
   12310:	add	ip, pc, #0, 12
   12314:	add	ip, ip, #102400	; 0x19000
   12318:	ldr	pc, [ip, #3348]!	; 0xd14

0001231c <memset@plt>:
   1231c:	add	ip, pc, #0, 12
   12320:	add	ip, ip, #102400	; 0x19000
   12324:	ldr	pc, [ip, #3340]!	; 0xd0c

00012328 <strncpy@plt>:
   12328:	add	ip, pc, #0, 12
   1232c:	add	ip, ip, #102400	; 0x19000
   12330:	ldr	pc, [ip, #3332]!	; 0xd04

00012334 <memchr@plt>:
   12334:	add	ip, pc, #0, 12
   12338:	add	ip, ip, #102400	; 0x19000
   1233c:	ldr	pc, [ip, #3324]!	; 0xcfc

00012340 <abort@plt>:
   12340:	add	ip, pc, #0, 12
   12344:	add	ip, ip, #102400	; 0x19000
   12348:	ldr	pc, [ip, #3316]!	; 0xcf4

0001234c <__assert_fail@plt>:
   1234c:	add	ip, pc, #0, 12
   12350:	add	ip, ip, #102400	; 0x19000
   12354:	ldr	pc, [ip, #3308]!	; 0xcec

Disassembly of section .text:

00012358 <main@@Base-0x110>:
   12358:	push	{r4, lr}
   1235c:	mov	r2, #308	; 0x134
   12360:	ldr	r3, [pc, #8]	; 12370 <__assert_fail@plt+0x24>
   12364:	ldr	r1, [pc, #8]	; 12374 <__assert_fail@plt+0x28>
   12368:	ldr	r0, [pc, #8]	; 12378 <__assert_fail@plt+0x2c>
   1236c:	bl	1234c <__assert_fail@plt>
   12370:	andeq	sl, r1, ip, lsl #17
   12374:	ldrdeq	sl, [r1], -ip
   12378:	muleq	r1, ip, r0
   1237c:	push	{r4, lr}
   12380:	ldr	r3, [pc, #12]	; 12394 <__assert_fail@plt+0x48>
   12384:	ldr	r2, [pc, #12]	; 12398 <__assert_fail@plt+0x4c>
   12388:	ldr	r1, [pc, #12]	; 1239c <__assert_fail@plt+0x50>
   1238c:	ldr	r0, [pc, #12]	; 123a0 <__assert_fail@plt+0x54>
   12390:	bl	1234c <__assert_fail@plt>
   12394:	muleq	r1, ip, r8
   12398:	andeq	r0, r0, r1, lsr #5
   1239c:	ldrdeq	sl, [r1], -ip
   123a0:	muleq	r1, ip, r0
   123a4:	push	{r4, lr}
   123a8:	ldr	r3, [pc, #12]	; 123bc <__assert_fail@plt+0x70>
   123ac:	ldr	r2, [pc, #12]	; 123c0 <__assert_fail@plt+0x74>
   123b0:	ldr	r1, [pc, #12]	; 123c4 <__assert_fail@plt+0x78>
   123b4:	ldr	r0, [pc, #12]	; 123c8 <__assert_fail@plt+0x7c>
   123b8:	bl	1234c <__assert_fail@plt>
   123bc:	andeq	sl, r1, r8, lsr #17
   123c0:	andeq	r0, r0, r7, lsl #5
   123c4:	ldrdeq	sl, [r1], -ip
   123c8:	muleq	r1, ip, r0
   123cc:	push	{r4, lr}
   123d0:	mov	r2, #892	; 0x37c
   123d4:	ldr	r3, [pc, #8]	; 123e4 <__assert_fail@plt+0x98>
   123d8:	ldr	r1, [pc, #8]	; 123e8 <__assert_fail@plt+0x9c>
   123dc:	ldr	r0, [pc, #8]	; 123ec <__assert_fail@plt+0xa0>
   123e0:	bl	1234c <__assert_fail@plt>
   123e4:			; <UNDEFINED> instruction: 0x0001a8b4
   123e8:	ldrdeq	sl, [r1], -ip
   123ec:	andeq	fp, r1, r4, lsr #32
   123f0:	push	{r4, lr}
   123f4:	ldr	r3, [pc, #12]	; 12408 <__assert_fail@plt+0xbc>
   123f8:	ldr	r2, [pc, #12]	; 1240c <__assert_fail@plt+0xc0>
   123fc:	ldr	r1, [pc, #12]	; 12410 <__assert_fail@plt+0xc4>
   12400:	ldr	r0, [pc, #12]	; 12414 <__assert_fail@plt+0xc8>
   12404:	bl	1234c <__assert_fail@plt>
   12408:	andeq	sl, r1, r8, asr #17
   1240c:	andeq	r0, r0, lr, lsl r2
   12410:	ldrdeq	sl, [r1], -ip
   12414:	andeq	fp, r1, r0, asr #32
   12418:	push	{r4, lr}
   1241c:	ldr	r3, [pc, #12]	; 12430 <__assert_fail@plt+0xe4>
   12420:	ldr	r2, [pc, #12]	; 12434 <__assert_fail@plt+0xe8>
   12424:	ldr	r1, [pc, #12]	; 12438 <__assert_fail@plt+0xec>
   12428:	ldr	r0, [pc, #12]	; 1243c <__assert_fail@plt+0xf0>
   1242c:	bl	1234c <__assert_fail@plt>
   12430:	andeq	sl, r1, r8, ror #17
   12434:	andeq	r0, r0, r6, asr #7
   12438:	ldrdeq	sl, [r1], -ip
   1243c:	andeq	fp, r1, ip, asr r0
   12440:	push	{r4, lr}
   12444:	ldr	r3, [pc, #12]	; 12458 <__assert_fail@plt+0x10c>
   12448:	ldr	r2, [pc, #12]	; 1245c <__assert_fail@plt+0x110>
   1244c:	ldr	r1, [pc, #12]	; 12460 <__assert_fail@plt+0x114>
   12450:	ldr	r0, [pc, #12]	; 12464 <__assert_fail@plt+0x118>
   12454:	bl	1234c <__assert_fail@plt>
   12458:	andeq	sl, r1, r8, lsl #18
   1245c:	andeq	r0, r0, r6, lsl #15
   12460:	ldrdeq	sl, [r1], -ip
   12464:	andeq	fp, r1, r8, lsl #1

00012468 <main@@Base>:
   12468:	push	{r4, lr}
   1246c:	sub	sp, sp, #240	; 0xf0
   12470:	add	r0, sp, #8
   12474:	bl	13490 <flatcc_builder_init@@Base>
   12478:	mov	r3, #0
   1247c:	add	r0, sp, #8
   12480:	mov	r2, r3
   12484:	ldr	r1, [pc, #176]	; 1253c <main@@Base+0xd4>
   12488:	bl	13f80 <flatcc_builder_start_buffer@@Base>
   1248c:	cmp	r0, #0
   12490:	bne	124a0 <main@@Base+0x38>
   12494:	mov	r1, #36	; 0x24
   12498:	add	r0, sp, #8
   1249c:	bl	15b60 <flatcc_builder_start_table@@Base>
   124a0:	ldr	r1, [pc, #152]	; 12540 <main@@Base+0xd8>
   124a4:	add	r0, sp, #8
   124a8:	bl	17910 <flatcc_builder_create_string_str@@Base>
   124ac:	subs	r4, r0, #0
   124b0:	beq	124c8 <main@@Base+0x60>
   124b4:	mov	r1, #3
   124b8:	add	r0, sp, #8
   124bc:	bl	18068 <flatcc_builder_table_add_offset@@Base>
   124c0:	cmp	r0, #0
   124c4:	strne	r4, [r0]
   124c8:	mov	r2, #1
   124cc:	ldr	r1, [pc, #112]	; 12544 <main@@Base+0xdc>
   124d0:	add	r0, sp, #8
   124d4:	bl	16508 <flatcc_builder_check_required@@Base>
   124d8:	cmp	r0, #0
   124dc:	beq	12528 <main@@Base+0xc0>
   124e0:	add	r0, sp, #8
   124e4:	bl	165a0 <flatcc_builder_end_table@@Base>
   124e8:	mov	r1, r0
   124ec:	add	r0, sp, #8
   124f0:	bl	1410c <flatcc_builder_end_buffer@@Base>
   124f4:	add	r1, sp, #4
   124f8:	add	r0, sp, #8
   124fc:	bl	1863c <flatcc_builder_get_direct_buffer@@Base>
   12500:	ldr	r3, [pc, #64]	; 12548 <main@@Base+0xe0>
   12504:	ldr	r2, [pc, #48]	; 1253c <main@@Base+0xd4>
   12508:	ldr	r1, [sp, #4]
   1250c:	bl	19b40 <flatcc_verify_table_as_root@@Base>
   12510:	mov	r4, r0
   12514:	add	r0, sp, #8
   12518:	bl	136fc <flatcc_builder_clear@@Base>
   1251c:	mov	r0, r4
   12520:	add	sp, sp, #240	; 0xf0
   12524:	pop	{r4, pc}
   12528:	ldr	r3, [pc, #28]	; 1254c <main@@Base+0xe4>
   1252c:	ldr	r2, [pc, #28]	; 12550 <main@@Base+0xe8>
   12530:	ldr	r1, [pc, #28]	; 12554 <main@@Base+0xec>
   12534:	ldr	r0, [pc, #28]	; 12558 <main@@Base+0xf0>
   12538:	bl	1234c <__assert_fail@plt>
   1253c:	andeq	sl, r1, r0, ror r7
   12540:	andeq	sl, r1, r8, ror r7
   12544:	andeq	sl, r1, r0, asr r7
   12548:	andeq	r2, r1, r4, ror #17
   1254c:	andeq	sl, r1, r4, asr r7
   12550:	andeq	r0, r0, lr, asr r9
   12554:	andeq	sl, r1, r4, lsl #15
   12558:	andeq	sl, r1, r8, ror #15

0001255c <_start@@Base>:
   1255c:	mov	fp, #0
   12560:	mov	lr, #0
   12564:	pop	{r1}		; (ldr r1, [sp], #4)
   12568:	mov	r2, sp
   1256c:	push	{r2}		; (str r2, [sp, #-4]!)
   12570:	push	{r0}		; (str r0, [sp, #-4]!)
   12574:	ldr	ip, [pc, #16]	; 1258c <_start@@Base+0x30>
   12578:	push	{ip}		; (str ip, [sp, #-4]!)
   1257c:	ldr	r0, [pc, #12]	; 12590 <_start@@Base+0x34>
   12580:	ldr	r3, [pc, #12]	; 12594 <_start@@Base+0x38>
   12584:	bl	122ec <__libc_start_main@plt>
   12588:	bl	12340 <abort@plt>
   1258c:	andeq	sl, r1, r0, asr #14
   12590:	andeq	r2, r1, r8, ror #8
   12594:	andeq	sl, r1, r0, ror #13
   12598:	ldr	r3, [pc, #20]	; 125b4 <_start@@Base+0x58>
   1259c:	ldr	r2, [pc, #20]	; 125b8 <_start@@Base+0x5c>
   125a0:	add	r3, pc, r3
   125a4:	ldr	r2, [r3, r2]
   125a8:	cmp	r2, #0
   125ac:	bxeq	lr
   125b0:	b	122f8 <__gmon_start__@plt>
   125b4:	andeq	r9, r1, r8, asr sl
   125b8:	andeq	r0, r0, r4, asr #32
   125bc:	ldr	r3, [pc, #28]	; 125e0 <_start@@Base+0x84>
   125c0:	ldr	r0, [pc, #28]	; 125e4 <_start@@Base+0x88>
   125c4:	sub	r3, r3, r0
   125c8:	cmp	r3, #6
   125cc:	bxls	lr
   125d0:	ldr	r3, [pc, #16]	; 125e8 <_start@@Base+0x8c>
   125d4:	cmp	r3, #0
   125d8:	bxeq	lr
   125dc:	bx	r3
   125e0:	andeq	ip, r2, r3, asr r0
   125e4:	andeq	ip, r2, r0, asr r0
   125e8:	andeq	r0, r0, r0
   125ec:	ldr	r1, [pc, #36]	; 12618 <_start@@Base+0xbc>
   125f0:	ldr	r0, [pc, #36]	; 1261c <_start@@Base+0xc0>
   125f4:	sub	r1, r1, r0
   125f8:	asr	r1, r1, #2
   125fc:	add	r1, r1, r1, lsr #31
   12600:	asrs	r1, r1, #1
   12604:	bxeq	lr
   12608:	ldr	r3, [pc, #16]	; 12620 <_start@@Base+0xc4>
   1260c:	cmp	r3, #0
   12610:	bxeq	lr
   12614:	bx	r3
   12618:	andeq	ip, r2, r0, asr r0
   1261c:	andeq	ip, r2, r0, asr r0
   12620:	andeq	r0, r0, r0
   12624:	push	{r4, lr}
   12628:	ldr	r4, [pc, #24]	; 12648 <_start@@Base+0xec>
   1262c:	ldrb	r3, [r4]
   12630:	cmp	r3, #0
   12634:	popne	{r4, pc}
   12638:	bl	125bc <_start@@Base+0x60>
   1263c:	mov	r3, #1
   12640:	strb	r3, [r4]
   12644:	pop	{r4, pc}
   12648:	andeq	ip, r2, r0, asr r0
   1264c:	ldr	r0, [pc, #40]	; 1267c <_start@@Base+0x120>
   12650:	ldr	r3, [r0]
   12654:	cmp	r3, #0
   12658:	bne	12660 <_start@@Base+0x104>
   1265c:	b	125ec <_start@@Base+0x90>
   12660:	ldr	r3, [pc, #24]	; 12680 <_start@@Base+0x124>
   12664:	cmp	r3, #0
   12668:	beq	1265c <_start@@Base+0x100>
   1266c:	push	{r4, lr}
   12670:	blx	r3
   12674:	pop	{r4, lr}
   12678:	b	125ec <_start@@Base+0x90>
   1267c:	andeq	fp, r2, r4, lsl pc
   12680:	andeq	r0, r0, r0
   12684:	mov	r0, #0
   12688:	bx	lr
   1268c:	mov	r3, #4
   12690:	mov	r2, r3
   12694:	mov	r1, #0
   12698:	b	18e3c <flatcc_verify_field@@Base>
   1269c:	mov	r3, #8
   126a0:	push	{r4, lr}
   126a4:	mov	r2, r3
   126a8:	mov	r1, #0
   126ac:	mov	r4, r0
   126b0:	bl	18e3c <flatcc_verify_field@@Base>
   126b4:	cmp	r0, #0
   126b8:	popne	{r4, pc}
   126bc:	mov	r3, #4
   126c0:	mov	r0, r4
   126c4:	mov	r2, r3
   126c8:	mov	r1, #1
   126cc:	pop	{r4, lr}
   126d0:	b	18e3c <flatcc_verify_field@@Base>
   126d4:	mov	r3, #1
   126d8:	push	{r4, lr}
   126dc:	mov	r2, r3
   126e0:	mov	r1, #0
   126e4:	mov	r4, r0
   126e8:	bl	18e3c <flatcc_verify_field@@Base>
   126ec:	cmp	r0, #0
   126f0:	popne	{r4, pc}
   126f4:	mov	r3, #1
   126f8:	mov	r2, r3
   126fc:	mov	r1, r3
   12700:	mov	r0, r4
   12704:	bl	18e3c <flatcc_verify_field@@Base>
   12708:	cmp	r0, #0
   1270c:	popne	{r4, pc}
   12710:	mov	r3, #1
   12714:	mov	r2, r3
   12718:	mov	r1, #2
   1271c:	mov	r0, r4
   12720:	bl	18e3c <flatcc_verify_field@@Base>
   12724:	cmp	r0, #0
   12728:	popne	{r4, pc}
   1272c:	mov	r3, #1
   12730:	mov	r0, r4
   12734:	mov	r2, r3
   12738:	mov	r1, #3
   1273c:	pop	{r4, lr}
   12740:	b	18e3c <flatcc_verify_field@@Base>
   12744:	mov	r2, #0
   12748:	push	{r4, lr}
   1274c:	mov	r1, r2
   12750:	mov	r4, r0
   12754:	bl	18eac <flatcc_verify_string_field@@Base>
   12758:	cmp	r0, #0
   1275c:	popne	{r4, pc}
   12760:	mov	r3, #8
   12764:	mov	r2, r3
   12768:	mov	r1, #1
   1276c:	mov	r0, r4
   12770:	bl	18e3c <flatcc_verify_field@@Base>
   12774:	cmp	r0, #0
   12778:	popne	{r4, pc}
   1277c:	mov	r3, #2
   12780:	mov	r0, r4
   12784:	mov	r2, r3
   12788:	mov	r1, r3
   1278c:	pop	{r4, lr}
   12790:	b	18e3c <flatcc_verify_field@@Base>
   12794:	mov	r2, #0
   12798:	push	{r4, lr}
   1279c:	mov	r1, r2
   127a0:	mov	r4, r0
   127a4:	bl	18eac <flatcc_verify_string_field@@Base>
   127a8:	cmp	r0, #0
   127ac:	popne	{r4, pc}
   127b0:	mov	r3, #4
   127b4:	mov	r2, r3
   127b8:	mov	r1, #1
   127bc:	mov	r0, r4
   127c0:	bl	18e3c <flatcc_verify_field@@Base>
   127c4:	cmp	r0, #0
   127c8:	popne	{r4, pc}
   127cc:	mov	r2, r0
   127d0:	mov	r1, #2
   127d4:	mov	r0, r4
   127d8:	bl	18eac <flatcc_verify_string_field@@Base>
   127dc:	cmp	r0, #0
   127e0:	popne	{r4, pc}
   127e4:	mov	r3, #8
   127e8:	mov	r2, r3
   127ec:	mov	r1, #3
   127f0:	mov	r0, r4
   127f4:	bl	18e3c <flatcc_verify_field@@Base>
   127f8:	cmp	r0, #0
   127fc:	popne	{r4, pc}
   12800:	mov	r2, r0
   12804:	mov	r1, #4
   12808:	mov	r0, r4
   1280c:	bl	18eac <flatcc_verify_string_field@@Base>
   12810:	cmp	r0, #0
   12814:	popne	{r4, pc}
   12818:	mov	r3, #8
   1281c:	mov	r2, r3
   12820:	mov	r1, #5
   12824:	mov	r0, r4
   12828:	bl	18e3c <flatcc_verify_field@@Base>
   1282c:	cmp	r0, #0
   12830:	popne	{r4, pc}
   12834:	mov	r3, #4
   12838:	mov	r2, r3
   1283c:	mov	r1, #6
   12840:	mov	r0, r4
   12844:	bl	18e3c <flatcc_verify_field@@Base>
   12848:	cmp	r0, #0
   1284c:	popne	{r4, pc}
   12850:	mov	r3, #8
   12854:	mov	r2, r3
   12858:	mov	r1, #7
   1285c:	mov	r0, r4
   12860:	bl	18e3c <flatcc_verify_field@@Base>
   12864:	cmp	r0, #0
   12868:	popne	{r4, pc}
   1286c:	mov	r3, #4
   12870:	mov	r0, r4
   12874:	mov	r2, r3
   12878:	mov	r1, #8
   1287c:	pop	{r4, lr}
   12880:	b	18e3c <flatcc_verify_field@@Base>
   12884:	mov	r2, #0
   12888:	push	{r4, lr}
   1288c:	mov	r1, r2
   12890:	ldr	r3, [pc, #64]	; 128d8 <_start@@Base+0x37c>
   12894:	mov	r4, r0
   12898:	bl	19234 <flatcc_verify_table_field@@Base>
   1289c:	cmp	r0, #0
   128a0:	popne	{r4, pc}
   128a4:	mov	r2, r0
   128a8:	ldr	r3, [pc, #44]	; 128dc <_start@@Base+0x380>
   128ac:	mov	r1, #1
   128b0:	mov	r0, r4
   128b4:	bl	19234 <flatcc_verify_table_field@@Base>
   128b8:	cmp	r0, #0
   128bc:	popne	{r4, pc}
   128c0:	mov	r2, r0
   128c4:	ldr	r3, [pc, #20]	; 128e0 <_start@@Base+0x384>
   128c8:	mov	r0, r4
   128cc:	mov	r1, #2
   128d0:	pop	{r4, lr}
   128d4:	b	19234 <flatcc_verify_table_field@@Base>
   128d8:	muleq	r1, r4, r7
   128dc:	andeq	r2, r1, ip, asr #30
   128e0:	muleq	r1, ip, r6
   128e4:	push	{r4, r5, r6, r7, r8, lr}
   128e8:	mov	r3, #16
   128ec:	sub	sp, sp, #8
   128f0:	mov	r2, #32
   128f4:	mov	r1, #0
   128f8:	mov	r4, r0
   128fc:	bl	18e3c <flatcc_verify_field@@Base>
   12900:	cmp	r0, #0
   12904:	beq	12910 <_start@@Base+0x3b4>
   12908:	add	sp, sp, #8
   1290c:	pop	{r4, r5, r6, r7, r8, pc}
   12910:	mov	r3, #2
   12914:	mov	r2, r3
   12918:	mov	r1, r3
   1291c:	mov	r0, r4
   12920:	bl	18e3c <flatcc_verify_field@@Base>
   12924:	cmp	r0, #0
   12928:	bne	12908 <_start@@Base+0x3ac>
   1292c:	mov	r3, #2
   12930:	mov	r2, r3
   12934:	mov	r1, #1
   12938:	mov	r0, r4
   1293c:	bl	18e3c <flatcc_verify_field@@Base>
   12940:	cmp	r0, #0
   12944:	bne	12908 <_start@@Base+0x3ac>
   12948:	mov	r2, #1
   1294c:	mov	r1, #3
   12950:	mov	r0, r4
   12954:	bl	18eac <flatcc_verify_string_field@@Base>
   12958:	cmp	r0, #0
   1295c:	bne	12908 <_start@@Base+0x3ac>
   12960:	mov	r3, #1
   12964:	mov	r2, r3
   12968:	mov	r1, #6
   1296c:	mov	r0, r4
   12970:	bl	18e3c <flatcc_verify_field@@Base>
   12974:	cmp	r0, #0
   12978:	bne	12908 <_start@@Base+0x3ac>
   1297c:	mov	r5, #1
   12980:	mvn	r6, #0
   12984:	mov	r2, r0
   12988:	stm	sp, {r5, r6}
   1298c:	mov	r3, r5
   12990:	mov	r1, #5
   12994:	mov	r0, r4
   12998:	bl	18f8c <flatcc_verify_vector_field@@Base>
   1299c:	cmp	r0, #0
   129a0:	bne	12908 <_start@@Base+0x3ac>
   129a4:	mov	r2, r0
   129a8:	ldr	r3, [pc, #840]	; 12cf8 <_start@@Base+0x79c>
   129ac:	mov	r1, #11
   129b0:	mov	r0, r4
   129b4:	bl	19398 <flatcc_verify_table_vector_field@@Base>
   129b8:	cmp	r0, #0
   129bc:	bne	12908 <_start@@Base+0x3ac>
   129c0:	mov	r2, r0
   129c4:	mov	r1, #10
   129c8:	mov	r0, r4
   129cc:	bl	19080 <flatcc_verify_string_vector_field@@Base>
   129d0:	cmp	r0, #0
   129d4:	bne	12908 <_start@@Base+0x3ac>
   129d8:	mov	r2, r0
   129dc:	mov	r1, #28
   129e0:	mov	r0, r4
   129e4:	bl	19080 <flatcc_verify_string_vector_field@@Base>
   129e8:	cmp	r0, #0
   129ec:	bne	12908 <_start@@Base+0x3ac>
   129f0:	mov	r2, r0
   129f4:	stm	sp, {r5, r6}
   129f8:	mov	r3, r5
   129fc:	mov	r1, #24
   12a00:	mov	r0, r4
   12a04:	bl	18f8c <flatcc_verify_vector_field@@Base>
   12a08:	cmp	r0, #0
   12a0c:	bne	12908 <_start@@Base+0x3ac>
   12a10:	mvn	r3, #-536870912	; 0xe0000000
   12a14:	mov	r5, #4
   12a18:	str	r3, [sp, #4]
   12a1c:	str	r5, [sp]
   12a20:	mov	r3, #8
   12a24:	mov	r2, #0
   12a28:	mov	r1, #29
   12a2c:	mov	r0, r4
   12a30:	bl	18f8c <flatcc_verify_vector_field@@Base>
   12a34:	cmp	r0, #0
   12a38:	bne	12908 <_start@@Base+0x3ac>
   12a3c:	ldr	r7, [pc, #692]	; 12cf8 <_start@@Base+0x79c>
   12a40:	mov	r2, r0
   12a44:	mov	r3, r7
   12a48:	mov	r1, #12
   12a4c:	mov	r0, r4
   12a50:	bl	19234 <flatcc_verify_table_field@@Base>
   12a54:	cmp	r0, #0
   12a58:	bne	12908 <_start@@Base+0x3ac>
   12a5c:	mov	r2, r0
   12a60:	ldr	r3, [pc, #660]	; 12cfc <_start@@Base+0x7a0>
   12a64:	mov	r1, #8
   12a68:	mov	r0, r4
   12a6c:	bl	1a2c8 <flatcc_verify_union_field@@Base>
   12a70:	cmp	r0, #0
   12a74:	bne	12908 <_start@@Base+0x3ac>
   12a78:	mvn	r8, #-1073741824	; 0xc0000000
   12a7c:	mov	r6, #2
   12a80:	mov	r2, r0
   12a84:	stm	sp, {r6, r8}
   12a88:	mov	r3, r5
   12a8c:	mov	r1, #9
   12a90:	mov	r0, r4
   12a94:	bl	18f8c <flatcc_verify_vector_field@@Base>
   12a98:	cmp	r0, #0
   12a9c:	bne	12908 <_start@@Base+0x3ac>
   12aa0:	mov	r2, r0
   12aa4:	stm	sp, {r6, r8}
   12aa8:	mov	r3, r5
   12aac:	mov	r1, #31
   12ab0:	mov	r0, r4
   12ab4:	bl	18f8c <flatcc_verify_vector_field@@Base>
   12ab8:	cmp	r0, #0
   12abc:	bne	12908 <_start@@Base+0x3ac>
   12ac0:	mov	r6, #1
   12ac4:	mov	r3, r0
   12ac8:	mov	r2, r0
   12acc:	stm	sp, {r6, r7}
   12ad0:	mov	r1, #13
   12ad4:	mov	r0, r4
   12ad8:	bl	1a038 <flatcc_verify_table_as_nested_root@@Base>
   12adc:	cmp	r0, #0
   12ae0:	bne	12908 <_start@@Base+0x3ac>
   12ae4:	mov	r2, r0
   12ae8:	ldr	r3, [pc, #528]	; 12d00 <_start@@Base+0x7a4>
   12aec:	mov	r1, #14
   12af0:	mov	r0, r4
   12af4:	bl	19234 <flatcc_verify_table_field@@Base>
   12af8:	cmp	r0, #0
   12afc:	bne	12908 <_start@@Base+0x3ac>
   12b00:	mov	r3, r6
   12b04:	mov	r2, r6
   12b08:	mov	r1, #15
   12b0c:	mov	r0, r4
   12b10:	bl	18e3c <flatcc_verify_field@@Base>
   12b14:	cmp	r0, #0
   12b18:	bne	12908 <_start@@Base+0x3ac>
   12b1c:	mov	r3, r5
   12b20:	mov	r2, r5
   12b24:	mov	r1, #16
   12b28:	mov	r0, r4
   12b2c:	bl	18e3c <flatcc_verify_field@@Base>
   12b30:	cmp	r0, #0
   12b34:	bne	12908 <_start@@Base+0x3ac>
   12b38:	mov	r3, r5
   12b3c:	mov	r2, r5
   12b40:	mov	r1, #17
   12b44:	mov	r0, r4
   12b48:	bl	18e3c <flatcc_verify_field@@Base>
   12b4c:	cmp	r0, #0
   12b50:	bne	12908 <_start@@Base+0x3ac>
   12b54:	mov	r3, #8
   12b58:	mov	r2, r3
   12b5c:	mov	r1, #18
   12b60:	mov	r0, r4
   12b64:	bl	18e3c <flatcc_verify_field@@Base>
   12b68:	cmp	r0, #0
   12b6c:	bne	12908 <_start@@Base+0x3ac>
   12b70:	mov	r3, #8
   12b74:	mov	r2, r3
   12b78:	mov	r1, #19
   12b7c:	mov	r0, r4
   12b80:	bl	18e3c <flatcc_verify_field@@Base>
   12b84:	cmp	r0, #0
   12b88:	bne	12908 <_start@@Base+0x3ac>
   12b8c:	mov	r3, r5
   12b90:	mov	r2, r5
   12b94:	mov	r1, #20
   12b98:	mov	r0, r4
   12b9c:	bl	18e3c <flatcc_verify_field@@Base>
   12ba0:	cmp	r0, #0
   12ba4:	bne	12908 <_start@@Base+0x3ac>
   12ba8:	mov	r3, r5
   12bac:	mov	r2, r5
   12bb0:	mov	r1, #21
   12bb4:	mov	r0, r4
   12bb8:	bl	18e3c <flatcc_verify_field@@Base>
   12bbc:	cmp	r0, #0
   12bc0:	bne	12908 <_start@@Base+0x3ac>
   12bc4:	mov	r3, #8
   12bc8:	mov	r2, r3
   12bcc:	mov	r1, #22
   12bd0:	mov	r0, r4
   12bd4:	bl	18e3c <flatcc_verify_field@@Base>
   12bd8:	cmp	r0, #0
   12bdc:	bne	12908 <_start@@Base+0x3ac>
   12be0:	mov	r3, #8
   12be4:	mov	r2, r3
   12be8:	mov	r1, #23
   12bec:	mov	r0, r4
   12bf0:	bl	18e3c <flatcc_verify_field@@Base>
   12bf4:	cmp	r0, #0
   12bf8:	bne	12908 <_start@@Base+0x3ac>
   12bfc:	mov	r3, r5
   12c00:	mov	r2, r5
   12c04:	mov	r1, #25
   12c08:	mov	r0, r4
   12c0c:	bl	18e3c <flatcc_verify_field@@Base>
   12c10:	cmp	r0, #0
   12c14:	bne	12908 <_start@@Base+0x3ac>
   12c18:	mov	r3, r5
   12c1c:	mov	r2, r5
   12c20:	mov	r1, #26
   12c24:	mov	r0, r4
   12c28:	bl	18e3c <flatcc_verify_field@@Base>
   12c2c:	cmp	r0, #0
   12c30:	bne	12908 <_start@@Base+0x3ac>
   12c34:	mov	r3, r5
   12c38:	mov	r2, r5
   12c3c:	mov	r1, #27
   12c40:	mov	r0, r4
   12c44:	bl	18e3c <flatcc_verify_field@@Base>
   12c48:	cmp	r0, #0
   12c4c:	bne	12908 <_start@@Base+0x3ac>
   12c50:	mvn	r1, #0
   12c54:	mov	r2, r0
   12c58:	str	r1, [sp, #4]
   12c5c:	mov	r3, r6
   12c60:	str	r6, [sp]
   12c64:	mov	r1, #30
   12c68:	mov	r0, r4
   12c6c:	bl	18f8c <flatcc_verify_vector_field@@Base>
   12c70:	cmp	r0, #0
   12c74:	bne	12908 <_start@@Base+0x3ac>
   12c78:	mov	r5, #8
   12c7c:	mvn	r6, #-536870912	; 0xe0000000
   12c80:	mov	r3, r5
   12c84:	stm	sp, {r5, r6}
   12c88:	mov	r2, #0
   12c8c:	mov	r1, #32
   12c90:	mov	r0, r4
   12c94:	bl	18f8c <flatcc_verify_vector_field@@Base>
   12c98:	cmp	r0, #0
   12c9c:	bne	12908 <_start@@Base+0x3ac>
   12ca0:	mov	r2, r0
   12ca4:	stm	sp, {r5, r6}
   12ca8:	mov	r3, r5
   12cac:	mov	r1, #33	; 0x21
   12cb0:	mov	r0, r4
   12cb4:	bl	18f8c <flatcc_verify_vector_field@@Base>
   12cb8:	cmp	r0, #0
   12cbc:	bne	12908 <_start@@Base+0x3ac>
   12cc0:	mov	r2, r0
   12cc4:	ldr	r3, [pc, #56]	; 12d04 <_start@@Base+0x7a8>
   12cc8:	mov	r1, #34	; 0x22
   12ccc:	mov	r0, r4
   12cd0:	bl	19234 <flatcc_verify_table_field@@Base>
   12cd4:	cmp	r0, #0
   12cd8:	bne	12908 <_start@@Base+0x3ac>
   12cdc:	mov	r2, r0
   12ce0:	ldr	r3, [pc, #32]	; 12d08 <_start@@Base+0x7ac>
   12ce4:	mov	r0, r4
   12ce8:	mov	r1, #35	; 0x23
   12cec:	add	sp, sp, #8
   12cf0:	pop	{r4, r5, r6, r7, r8, lr}
   12cf4:	b	19234 <flatcc_verify_table_field@@Base>
   12cf8:	andeq	r2, r1, r4, ror #17
   12cfc:	muleq	r1, r4, sp
   12d00:	andeq	r2, r1, r4, asr #14
   12d04:	andeq	r2, r1, r4, asr #30
   12d08:	andeq	r2, r1, ip, lsl #26
   12d0c:	push	{r4, r5, r6, lr}
   12d10:	mov	r4, #1
   12d14:	sub	sp, sp, #8
   12d18:	mvn	r5, #0
   12d1c:	mov	r2, #0
   12d20:	mov	r1, r2
   12d24:	stm	sp, {r4, r5}
   12d28:	mov	r3, r4
   12d2c:	mov	r6, r0
   12d30:	bl	18f8c <flatcc_verify_vector_field@@Base>
   12d34:	subs	r2, r0, #0
   12d38:	beq	12d48 <_start@@Base+0x7ec>
   12d3c:	mov	r0, r2
   12d40:	add	sp, sp, #8
   12d44:	pop	{r4, r5, r6, pc}
   12d48:	stm	sp, {r4, r5}
   12d4c:	mov	r3, r4
   12d50:	mov	r1, r4
   12d54:	mov	r0, r6
   12d58:	bl	18f8c <flatcc_verify_vector_field@@Base>
   12d5c:	subs	r2, r0, #0
   12d60:	bne	12d3c <_start@@Base+0x7e0>
   12d64:	ldr	r3, [pc, #36]	; 12d90 <_start@@Base+0x834>
   12d68:	str	r4, [sp]
   12d6c:	str	r3, [sp, #4]
   12d70:	mov	r0, r6
   12d74:	mov	r3, r2
   12d78:	mov	r1, #2
   12d7c:	bl	1a038 <flatcc_verify_table_as_nested_root@@Base>
   12d80:	mov	r2, r0
   12d84:	mov	r0, r2
   12d88:	add	sp, sp, #8
   12d8c:	pop	{r4, r5, r6, pc}
   12d90:	andeq	r2, r1, r4, ror #17
   12d94:	ldrb	r3, [r0, #12]
   12d98:	sub	r3, r3, #1
   12d9c:	cmp	r3, #3
   12da0:	ldrls	pc, [pc, r3, lsl #2]
   12da4:	b	12dd8 <_start@@Base+0x87c>
   12da8:	ldrdeq	r2, [r1], -r0
   12dac:	andeq	r2, r1, r8, asr #27
   12db0:	andeq	r2, r1, r0, asr #27
   12db4:			; <UNDEFINED> instruction: 0x00012db8
   12db8:	ldr	r1, [pc, #32]	; 12de0 <_start@@Base+0x884>
   12dbc:	b	19688 <flatcc_verify_union_table@@Base>
   12dc0:	ldr	r1, [pc, #28]	; 12de4 <_start@@Base+0x888>
   12dc4:	b	19688 <flatcc_verify_union_table@@Base>
   12dc8:	ldr	r1, [pc, #24]	; 12de8 <_start@@Base+0x88c>
   12dcc:	b	19688 <flatcc_verify_union_table@@Base>
   12dd0:	ldr	r1, [pc, #20]	; 12dec <_start@@Base+0x890>
   12dd4:	b	19688 <flatcc_verify_union_table@@Base>
   12dd8:	mov	r0, #0
   12ddc:	bx	lr
   12de0:	strdeq	r2, [r1], -r0
   12de4:	andeq	r2, r1, r4, lsl #13
   12de8:	ldrdeq	r2, [r1], -r4
   12dec:	andeq	r2, r1, r4, ror #17
   12df0:	mov	r2, #0
   12df4:	push	{r4, lr}
   12df8:	mov	r1, r2
   12dfc:	ldr	r3, [pc, #64]	; 12e44 <_start@@Base+0x8e8>
   12e00:	mov	r4, r0
   12e04:	bl	19234 <flatcc_verify_table_field@@Base>
   12e08:	cmp	r0, #0
   12e0c:	popne	{r4, pc}
   12e10:	mov	r2, r0
   12e14:	ldr	r3, [pc, #44]	; 12e48 <_start@@Base+0x8ec>
   12e18:	mov	r1, #1
   12e1c:	mov	r0, r4
   12e20:	bl	19234 <flatcc_verify_table_field@@Base>
   12e24:	cmp	r0, #0
   12e28:	popne	{r4, pc}
   12e2c:	mov	r2, r0
   12e30:	ldr	r3, [pc, #20]	; 12e4c <_start@@Base+0x8f0>
   12e34:	mov	r0, r4
   12e38:	mov	r1, #3
   12e3c:	pop	{r4, lr}
   12e40:	b	1a434 <flatcc_verify_union_vector_field@@Base>
   12e44:	andeq	r2, r1, r4, lsl #17
   12e48:	andeq	r2, r1, r0, asr lr
   12e4c:	muleq	r1, r4, sp
   12e50:	push	{r4, lr}
   12e54:	mov	r2, #0
   12e58:	ldr	r3, [pc, #124]	; 12edc <_start@@Base+0x980>
   12e5c:	mov	r1, #1
   12e60:	mov	r4, r0
   12e64:	bl	1a2c8 <flatcc_verify_union_field@@Base>
   12e68:	cmp	r0, #0
   12e6c:	popne	{r4, pc}
   12e70:	mov	r2, r0
   12e74:	ldr	r3, [pc, #96]	; 12edc <_start@@Base+0x980>
   12e78:	mov	r1, #3
   12e7c:	mov	r0, r4
   12e80:	bl	1a2c8 <flatcc_verify_union_field@@Base>
   12e84:	cmp	r0, #0
   12e88:	popne	{r4, pc}
   12e8c:	mov	r2, r0
   12e90:	ldr	r3, [pc, #68]	; 12edc <_start@@Base+0x980>
   12e94:	mov	r1, #5
   12e98:	mov	r0, r4
   12e9c:	bl	1a2c8 <flatcc_verify_union_field@@Base>
   12ea0:	cmp	r0, #0
   12ea4:	popne	{r4, pc}
   12ea8:	mov	r2, r0
   12eac:	ldr	r3, [pc, #40]	; 12edc <_start@@Base+0x980>
   12eb0:	mov	r1, #7
   12eb4:	mov	r0, r4
   12eb8:	bl	1a2c8 <flatcc_verify_union_field@@Base>
   12ebc:	cmp	r0, #0
   12ec0:	popne	{r4, pc}
   12ec4:	mov	r2, r0
   12ec8:	ldr	r3, [pc, #12]	; 12edc <_start@@Base+0x980>
   12ecc:	mov	r0, r4
   12ed0:	mov	r1, #9
   12ed4:	pop	{r4, lr}
   12ed8:	b	1a434 <flatcc_verify_union_vector_field@@Base>
   12edc:	andeq	r2, r1, r0, ror #29
   12ee0:	ldrb	r3, [r0, #12]
   12ee4:	cmp	r3, #9
   12ee8:	beq	12f24 <_start@@Base+0x9c8>
   12eec:	bls	12f08 <_start@@Base+0x9ac>
   12ef0:	cmp	r3, #11
   12ef4:	beq	12f04 <_start@@Base+0x9a8>
   12ef8:	bcc	12f24 <_start@@Base+0x9c8>
   12efc:	cmp	r3, #255	; 0xff
   12f00:	bne	12f30 <_start@@Base+0x9d4>
   12f04:	b	197dc <flatcc_verify_union_string@@Base>
   12f08:	cmp	r3, #2
   12f0c:	beq	12f38 <_start@@Base+0x9dc>
   12f10:	cmp	r3, #8
   12f14:	bne	12f30 <_start@@Base+0x9d4>
   12f18:	mov	r2, #2
   12f1c:	mov	r1, r2
   12f20:	b	19780 <flatcc_verify_union_struct@@Base>
   12f24:	mov	r2, #4
   12f28:	mov	r1, r2
   12f2c:	b	19780 <flatcc_verify_union_struct@@Base>
   12f30:	mov	r0, #0
   12f34:	bx	lr
   12f38:	ldr	r1, [pc]	; 12f40 <_start@@Base+0x9e4>
   12f3c:	b	19688 <flatcc_verify_union_table@@Base>
   12f40:	andeq	r2, r1, ip, lsl #13
   12f44:	mov	r0, #0
   12f48:	bx	lr
   12f4c:	mov	r3, #8
   12f50:	push	{r4, lr}
   12f54:	mov	r2, r3
   12f58:	mov	r1, #0
   12f5c:	mov	r4, r0
   12f60:	bl	18e3c <flatcc_verify_field@@Base>
   12f64:	cmp	r0, #0
   12f68:	popne	{r4, pc}
   12f6c:	mov	r3, #4
   12f70:	mov	r0, r4
   12f74:	mov	r2, r3
   12f78:	mov	r1, #1
   12f7c:	pop	{r4, lr}
   12f80:	b	18e3c <flatcc_verify_field@@Base>

00012f84 <flatcc_builder_default_alloc@@Base>:
   12f84:	push	{r4, r5, r6, r7, r8, lr}
   12f88:	subs	r5, r2, #0
   12f8c:	mov	r6, r1
   12f90:	bne	12fb4 <flatcc_builder_default_alloc@@Base+0x30>
   12f94:	ldr	r0, [r1]
   12f98:	cmp	r0, #0
   12f9c:	popeq	{r4, r5, r6, r7, r8, pc}
   12fa0:	bl	122b0 <free@plt>
   12fa4:	str	r5, [r6]
   12fa8:	str	r5, [r6, #4]
   12fac:	mov	r0, r5
   12fb0:	pop	{r4, r5, r6, r7, r8, pc}
   12fb4:	mov	r7, r3
   12fb8:	ldr	r3, [sp, #24]
   12fbc:	sub	r2, r3, #1
   12fc0:	cmp	r2, #6
   12fc4:	ldrls	pc, [pc, r2, lsl #2]
   12fc8:	b	13064 <flatcc_builder_default_alloc@@Base+0xe0>
   12fcc:	andeq	r3, r1, r8, lsr r0
   12fd0:	andeq	r3, r1, r4, rrx
   12fd4:	andeq	r3, r1, r4, rrx
   12fd8:	andeq	r3, r1, ip, asr r0
   12fdc:	andeq	r2, r1, r8, ror #31
   12fe0:	andeq	r3, r1, r4, rrx
   12fe4:	andeq	r3, r1, r4, asr r0
   12fe8:	mov	r4, r5
   12fec:	ldr	r3, [r6, #4]
   12ff0:	cmp	r5, r3
   12ff4:	bhi	13000 <flatcc_builder_default_alloc@@Base+0x7c>
   12ff8:	cmp	r4, r3, lsr #1
   12ffc:	bls	1306c <flatcc_builder_default_alloc@@Base+0xe8>
   13000:	mov	r1, r4
   13004:	ldr	r0, [r6]
   13008:	bl	122d4 <realloc@plt>
   1300c:	subs	r5, r0, #0
   13010:	beq	13088 <flatcc_builder_default_alloc@@Base+0x104>
   13014:	cmp	r7, #0
   13018:	beq	13028 <flatcc_builder_default_alloc@@Base+0xa4>
   1301c:	ldr	r0, [r6, #4]
   13020:	cmp	r0, r4
   13024:	bcc	13074 <flatcc_builder_default_alloc@@Base+0xf0>
   13028:	str	r5, [r6]
   1302c:	str	r4, [r6, #4]
   13030:	mov	r0, #0
   13034:	pop	{r4, r5, r6, r7, r8, pc}
   13038:	mov	r4, #256	; 0x100
   1303c:	cmp	r5, r4
   13040:	bls	12fec <flatcc_builder_default_alloc@@Base+0x68>
   13044:	lsl	r4, r4, #1
   13048:	cmp	r5, r4
   1304c:	bhi	13044 <flatcc_builder_default_alloc@@Base+0xc0>
   13050:	b	12fec <flatcc_builder_default_alloc@@Base+0x68>
   13054:	mov	r4, #64	; 0x40
   13058:	b	1303c <flatcc_builder_default_alloc@@Base+0xb8>
   1305c:	mov	r4, #288	; 0x120
   13060:	b	1303c <flatcc_builder_default_alloc@@Base+0xb8>
   13064:	mov	r4, #32
   13068:	b	1303c <flatcc_builder_default_alloc@@Base+0xb8>
   1306c:	mov	r0, #0
   13070:	pop	{r4, r5, r6, r7, r8, pc}
   13074:	sub	r2, r4, r0
   13078:	mov	r1, #0
   1307c:	add	r0, r5, r0
   13080:	bl	1231c <memset@plt>
   13084:	b	13028 <flatcc_builder_default_alloc@@Base+0xa4>
   13088:	mvn	r0, #0
   1308c:	pop	{r4, r5, r6, r7, r8, pc}
   13090:	push	{r4, r5, r6, r7, r8, lr}
   13094:	mov	r5, r0
   13098:	ldrh	r0, [r0, #128]	; 0x80
   1309c:	sub	sp, sp, #88	; 0x58
   130a0:	mov	r7, #4
   130a4:	cmp	r0, #3
   130a8:	movls	r0, #4
   130ac:	strhls	r0, [r5, #128]	; 0x80
   130b0:	ldr	r0, [r5, #136]	; 0x88
   130b4:	lsls	r4, r2, #2
   130b8:	mov	r8, #1
   130bc:	str	r7, [sp, #16]
   130c0:	str	r8, [sp, #20]
   130c4:	and	ip, r0, #3
   130c8:	movne	r8, #2
   130cc:	str	r7, [sp, #28]
   130d0:	addne	r7, r4, r7
   130d4:	strne	r4, [sp, #36]	; 0x24
   130d8:	add	lr, sp, #12
   130dc:	strne	r1, [sp, #32]
   130e0:	strne	r7, [sp, #16]
   130e4:	strne	r8, [sp, #20]
   130e8:	movne	r4, #3
   130ec:	moveq	r4, #2
   130f0:	cmp	ip, #0
   130f4:	str	r2, [sp, #12]
   130f8:	str	lr, [sp, #24]
   130fc:	beq	13128 <flatcc_builder_default_alloc@@Base+0x1a4>
   13100:	add	lr, r8, #1
   13104:	add	r8, sp, #88	; 0x58
   13108:	add	lr, r8, lr, lsl #3
   1310c:	ldr	r6, [pc, #320]	; 13254 <flatcc_builder_default_alloc@@Base+0x2d0>
   13110:	mov	r8, r4
   13114:	add	r7, r7, ip
   13118:	str	ip, [lr, #-68]	; 0xffffffbc
   1311c:	str	r7, [sp, #16]
   13120:	str	r4, [sp, #20]
   13124:	str	r6, [lr, #-72]	; 0xffffffb8
   13128:	cmp	r2, #0
   1312c:	sub	r4, r0, r7
   13130:	beq	131c4 <flatcc_builder_default_alloc@@Base+0x240>
   13134:	cmp	r3, #0
   13138:	addne	r6, r3, r2
   1313c:	mvnne	r0, #3
   13140:	bne	13174 <flatcc_builder_default_alloc@@Base+0x1f0>
   13144:	b	13200 <flatcc_builder_default_alloc@@Base+0x27c>
   13148:	sub	lr, r0, r4
   1314c:	add	ip, lr, ip
   13150:	str	ip, [r1]
   13154:	ldrb	ip, [r3]
   13158:	cmp	ip, #0
   1315c:	beq	13228 <flatcc_builder_default_alloc@@Base+0x2a4>
   13160:	add	r3, r3, #1
   13164:	cmp	r3, r6
   13168:	add	r1, r1, #4
   1316c:	sub	r0, r0, #4
   13170:	beq	131bc <flatcc_builder_default_alloc@@Base+0x238>
   13174:	ldr	ip, [r1]
   13178:	cmp	ip, #0
   1317c:	bne	13148 <flatcc_builder_default_alloc@@Base+0x1c4>
   13180:	ldrb	ip, [r3]
   13184:	cmp	ip, #0
   13188:	beq	13160 <flatcc_builder_default_alloc@@Base+0x1dc>
   1318c:	ldr	r3, [pc, #196]	; 13258 <flatcc_builder_default_alloc@@Base+0x2d4>
   13190:	ldr	r2, [pc, #196]	; 1325c <flatcc_builder_default_alloc@@Base+0x2d8>
   13194:	ldr	r1, [pc, #196]	; 13260 <flatcc_builder_default_alloc@@Base+0x2dc>
   13198:	ldr	r0, [pc, #196]	; 13264 <flatcc_builder_default_alloc@@Base+0x2e0>
   1319c:	bl	1234c <__assert_fail@plt>
   131a0:	sub	r1, r0, r4
   131a4:	add	r3, r3, #1
   131a8:	add	r1, r1, lr
   131ac:	cmp	r2, r3
   131b0:	str	r1, [ip, #4]!
   131b4:	sub	r0, r0, #4
   131b8:	bne	13208 <flatcc_builder_default_alloc@@Base+0x284>
   131bc:	ldr	r0, [r5, #136]	; 0x88
   131c0:	sub	r4, r0, r7
   131c4:	cmp	r4, r0
   131c8:	bge	13250 <flatcc_builder_default_alloc@@Base+0x2cc>
   131cc:	ldr	r0, [r5, #36]	; 0x24
   131d0:	mov	r2, r8
   131d4:	str	r7, [sp]
   131d8:	mov	r3, r4
   131dc:	ldr	r6, [r5, #44]	; 0x2c
   131e0:	add	r1, sp, #24
   131e4:	blx	r6
   131e8:	cmp	r0, #0
   131ec:	bne	1323c <flatcc_builder_default_alloc@@Base+0x2b8>
   131f0:	mov	r0, r4
   131f4:	str	r4, [r5, #136]	; 0x88
   131f8:	add	sp, sp, #88	; 0x58
   131fc:	pop	{r4, r5, r6, r7, r8, pc}
   13200:	sub	ip, r1, #4
   13204:	mvn	r0, #3
   13208:	ldr	lr, [ip, #4]
   1320c:	cmp	lr, #0
   13210:	bne	131a0 <flatcc_builder_default_alloc@@Base+0x21c>
   13214:	ldr	r3, [pc, #60]	; 13258 <flatcc_builder_default_alloc@@Base+0x2d4>
   13218:	ldr	r2, [pc, #72]	; 13268 <flatcc_builder_default_alloc@@Base+0x2e4>
   1321c:	ldr	r1, [pc, #60]	; 13260 <flatcc_builder_default_alloc@@Base+0x2dc>
   13220:	ldr	r0, [pc, #68]	; 1326c <flatcc_builder_default_alloc@@Base+0x2e8>
   13224:	bl	1234c <__assert_fail@plt>
   13228:	ldr	r3, [pc, #40]	; 13258 <flatcc_builder_default_alloc@@Base+0x2d4>
   1322c:	ldr	r2, [pc, #60]	; 13270 <flatcc_builder_default_alloc@@Base+0x2ec>
   13230:	ldr	r1, [pc, #40]	; 13260 <flatcc_builder_default_alloc@@Base+0x2dc>
   13234:	ldr	r0, [pc, #56]	; 13274 <flatcc_builder_default_alloc@@Base+0x2f0>
   13238:	bl	1234c <__assert_fail@plt>
   1323c:	ldr	r3, [pc, #52]	; 13278 <flatcc_builder_default_alloc@@Base+0x2f4>
   13240:	ldr	r2, [pc, #52]	; 1327c <flatcc_builder_default_alloc@@Base+0x2f8>
   13244:	ldr	r1, [pc, #20]	; 13260 <flatcc_builder_default_alloc@@Base+0x2dc>
   13248:	ldr	r0, [pc, #28]	; 1326c <flatcc_builder_default_alloc@@Base+0x2e8>
   1324c:	bl	1234c <__assert_fail@plt>
   13250:	bl	123a4 <__assert_fail@plt+0x58>
   13254:	andeq	sl, r1, r4, lsr #18
   13258:	andeq	sl, r1, r4, lsr #22
   1325c:			; <UNDEFINED> instruction: 0x000005b5
   13260:	ldrdeq	sl, [r1], -ip
   13264:	andeq	fp, r1, r0, lsr #1
   13268:			; <UNDEFINED> instruction: 0x000005b7
   1326c:	muleq	r1, ip, r0
   13270:			; <UNDEFINED> instruction: 0x000005b1
   13274:	muleq	r1, r0, r0
   13278:	andeq	sl, r1, r8, lsr #17
   1327c:	andeq	r0, r0, fp, lsl #5
   13280:	ldrh	r3, [r0, #128]	; 0x80
   13284:	push	{r4, r5, r6, r7, lr}
   13288:	sub	sp, sp, #92	; 0x5c
   1328c:	cmp	r3, #3
   13290:	movls	r3, #4
   13294:	ldr	lr, [r0, #136]	; 0x88
   13298:	mov	ip, #4
   1329c:	strhls	r3, [r0, #128]	; 0x80
   132a0:	mov	r4, r0
   132a4:	lsls	r6, r2, #2
   132a8:	mov	r0, #1
   132ac:	add	r5, sp, #12
   132b0:	str	ip, [sp, #16]
   132b4:	str	r0, [sp, #20]
   132b8:	and	r3, lr, #3
   132bc:	movne	r0, #2
   132c0:	str	ip, [sp, #28]
   132c4:	addne	ip, r6, ip
   132c8:	str	r5, [sp, #24]
   132cc:	strne	r6, [sp, #36]	; 0x24
   132d0:	strne	r1, [sp, #32]
   132d4:	strne	ip, [sp, #16]
   132d8:	strne	r0, [sp, #20]
   132dc:	movne	r5, r0
   132e0:	movne	r6, #3
   132e4:	moveq	r5, r0
   132e8:	moveq	r6, #2
   132ec:	cmp	r3, #0
   132f0:	str	r2, [sp, #12]
   132f4:	beq	13320 <flatcc_builder_default_alloc@@Base+0x39c>
   132f8:	add	r0, r5, #1
   132fc:	add	r5, sp, #88	; 0x58
   13300:	add	r0, r5, r0, lsl #3
   13304:	ldr	r7, [pc, #204]	; 133d8 <flatcc_builder_default_alloc@@Base+0x454>
   13308:	mov	r5, r6
   1330c:	add	ip, ip, r3
   13310:	str	r3, [r0, #-68]	; 0xffffffbc
   13314:	str	ip, [sp, #16]
   13318:	str	r6, [sp, #20]
   1331c:	str	r7, [r0, #-72]	; 0xffffffb8
   13320:	cmp	r2, #0
   13324:	beq	13380 <flatcc_builder_default_alloc@@Base+0x3fc>
   13328:	ldr	r3, [r1]
   1332c:	cmp	r3, #0
   13330:	beq	13368 <flatcc_builder_default_alloc@@Base+0x3e4>
   13334:	sub	r6, lr, ip
   13338:	mov	r0, #0
   1333c:	mvn	lr, #3
   13340:	sub	r3, r3, r6
   13344:	add	r0, r0, #1
   13348:	add	r3, r3, lr
   1334c:	cmp	r2, r0
   13350:	str	r3, [r1]
   13354:	beq	1337c <flatcc_builder_default_alloc@@Base+0x3f8>
   13358:	ldr	r3, [r1, #4]!
   1335c:	sub	lr, lr, #4
   13360:	cmp	r3, #0
   13364:	bne	13340 <flatcc_builder_default_alloc@@Base+0x3bc>
   13368:	ldr	r3, [pc, #108]	; 133dc <flatcc_builder_default_alloc@@Base+0x458>
   1336c:	ldr	r2, [pc, #108]	; 133e0 <flatcc_builder_default_alloc@@Base+0x45c>
   13370:	ldr	r1, [pc, #108]	; 133e4 <flatcc_builder_default_alloc@@Base+0x460>
   13374:	ldr	r0, [pc, #108]	; 133e8 <flatcc_builder_default_alloc@@Base+0x464>
   13378:	bl	1234c <__assert_fail@plt>
   1337c:	ldr	lr, [r4, #136]	; 0x88
   13380:	sub	r6, lr, ip
   13384:	cmp	r6, lr
   13388:	bge	133d4 <flatcc_builder_default_alloc@@Base+0x450>
   1338c:	ldr	r0, [r4, #36]	; 0x24
   13390:	mov	r2, r5
   13394:	str	ip, [sp]
   13398:	mov	r3, r6
   1339c:	ldr	r5, [r4, #44]	; 0x2c
   133a0:	add	r1, sp, #24
   133a4:	blx	r5
   133a8:	cmp	r0, #0
   133ac:	bne	133c0 <flatcc_builder_default_alloc@@Base+0x43c>
   133b0:	mov	r0, r6
   133b4:	str	r6, [r4, #136]	; 0x88
   133b8:	add	sp, sp, #92	; 0x5c
   133bc:	pop	{r4, r5, r6, r7, pc}
   133c0:	ldr	r3, [pc, #36]	; 133ec <flatcc_builder_default_alloc@@Base+0x468>
   133c4:	ldr	r2, [pc, #36]	; 133f0 <flatcc_builder_default_alloc@@Base+0x46c>
   133c8:	ldr	r1, [pc, #20]	; 133e4 <flatcc_builder_default_alloc@@Base+0x460>
   133cc:	ldr	r0, [pc, #20]	; 133e8 <flatcc_builder_default_alloc@@Base+0x464>
   133d0:	bl	1234c <__assert_fail@plt>
   133d4:	bl	123a4 <__assert_fail@plt+0x58>
   133d8:	andeq	sl, r1, r4, lsr #18
   133dc:	andeq	sl, r1, r4, lsr #22
   133e0:			; <UNDEFINED> instruction: 0x000005b7
   133e4:	ldrdeq	sl, [r1], -ip
   133e8:	muleq	r1, ip, r0
   133ec:	andeq	sl, r1, r8, lsr #17
   133f0:	andeq	r0, r0, fp, lsl #5

000133f4 <flatcc_builder_flush_vtable_cache@@Base>:
   133f4:	ldr	r3, [r0, #116]	; 0x74
   133f8:	cmp	r3, #0
   133fc:	bxeq	lr
   13400:	ldr	r2, [r0, #96]	; 0x60
   13404:	push	{r4, lr}
   13408:	mov	r1, #0
   1340c:	mov	r4, r0
   13410:	ldr	r0, [r0, #92]	; 0x5c
   13414:	bl	1231c <memset@plt>
   13418:	mov	r2, #16
   1341c:	mov	r3, #0
   13420:	str	r2, [r4, #124]	; 0x7c
   13424:	str	r3, [r4, #120]	; 0x78
   13428:	pop	{r4, pc}

0001342c <flatcc_builder_custom_init@@Base>:
   1342c:	push	{r4, r5, r6, r7, r8, lr}
   13430:	mov	r6, r1
   13434:	mov	r7, r2
   13438:	mov	r1, #0
   1343c:	mov	r2, #232	; 0xe8
   13440:	mov	r4, r0
   13444:	mov	r5, r3
   13448:	ldr	r8, [sp, #24]
   1344c:	bl	1231c <memset@plt>
   13450:	cmp	r6, #0
   13454:	moveq	r3, #1
   13458:	ldreq	r6, [pc, #40]	; 13488 <flatcc_builder_custom_init@@Base+0x5c>
   1345c:	addeq	r7, r4, #188	; 0xbc
   13460:	str	r8, [r4, #40]	; 0x28
   13464:	str	r7, [r4, #36]	; 0x24
   13468:	str	r6, [r4, #44]	; 0x2c
   1346c:	mov	r0, #0
   13470:	streq	r3, [r4, #184]	; 0xb8
   13474:	ldr	r3, [pc, #16]	; 1348c <flatcc_builder_custom_init@@Base+0x60>
   13478:	cmp	r5, #0
   1347c:	moveq	r5, r3
   13480:	str	r5, [r4, #48]	; 0x30
   13484:	pop	{r4, r5, r6, r7, r8, pc}
   13488:	andeq	r8, r1, r0, ror #19
   1348c:	andeq	r2, r1, r4, lsl #31

00013490 <flatcc_builder_init@@Base>:
   13490:	push	{r4, lr}
   13494:	mov	r2, #232	; 0xe8
   13498:	mov	r1, #0
   1349c:	mov	r4, r0
   134a0:	bl	1231c <memset@plt>
   134a4:	ldr	r1, [pc, #32]	; 134cc <flatcc_builder_init@@Base+0x3c>
   134a8:	ldr	r3, [pc, #32]	; 134d0 <flatcc_builder_init@@Base+0x40>
   134ac:	mov	r0, #1
   134b0:	add	r2, r4, #188	; 0xbc
   134b4:	str	r0, [r4, #184]	; 0xb8
   134b8:	str	r1, [r4, #48]	; 0x30
   134bc:	str	r2, [r4, #36]	; 0x24
   134c0:	str	r3, [r4, #44]	; 0x2c
   134c4:	mov	r0, #0
   134c8:	pop	{r4, pc}
   134cc:	andeq	r2, r1, r4, lsl #31
   134d0:	andeq	r8, r1, r0, ror #19

000134d4 <flatcc_builder_custom_reset@@Base>:
   134d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134d8:	add	r7, r0, #52	; 0x34
   134dc:	mov	r4, #0
   134e0:	sub	sp, sp, #12
   134e4:	mov	r5, r0
   134e8:	mov	sl, r1
   134ec:	mov	r8, r2
   134f0:	mov	r6, r7
   134f4:	mov	r9, r4
   134f8:	mov	fp, #1
   134fc:	b	13550 <flatcc_builder_custom_reset@@Base+0x7c>
   13500:	cmp	r4, #5
   13504:	cmpne	r8, #0
   13508:	beq	13534 <flatcc_builder_custom_reset@@Base+0x60>
   1350c:	ldr	r0, [r5, #40]	; 0x28
   13510:	mov	r3, fp
   13514:	str	r4, [sp]
   13518:	mov	r2, #1
   1351c:	mov	r1, r6
   13520:	ldr	ip, [r5, #48]	; 0x30
   13524:	blx	ip
   13528:	cmp	r0, #0
   1352c:	bne	13604 <flatcc_builder_custom_reset@@Base+0x130>
   13530:	ldr	r0, [r7, r4, lsl #3]
   13534:	ldr	r2, [r6, #4]
   13538:	mov	r1, r9
   1353c:	bl	1231c <memset@plt>
   13540:	add	r4, r4, #1
   13544:	cmp	r4, #8
   13548:	add	r6, r6, #8
   1354c:	beq	1357c <flatcc_builder_custom_reset@@Base+0xa8>
   13550:	ldr	r0, [r7, r4, lsl #3]
   13554:	cmp	r0, #0
   13558:	bne	13500 <flatcc_builder_custom_reset@@Base+0x2c>
   1355c:	ldr	r3, [r6, #4]
   13560:	cmp	r3, #0
   13564:	beq	13540 <flatcc_builder_custom_reset@@Base+0x6c>
   13568:	ldr	r3, [pc, #156]	; 1360c <flatcc_builder_custom_reset@@Base+0x138>
   1356c:	ldr	r2, [pc, #156]	; 13610 <flatcc_builder_custom_reset@@Base+0x13c>
   13570:	ldr	r1, [pc, #156]	; 13614 <flatcc_builder_custom_reset@@Base+0x140>
   13574:	ldr	r0, [pc, #156]	; 13618 <flatcc_builder_custom_reset@@Base+0x144>
   13578:	bl	1234c <__assert_fail@plt>
   1357c:	ldr	r2, [r5, #124]	; 0x7c
   13580:	mov	r3, #0
   13584:	ldr	r0, [r5, #60]	; 0x3c
   13588:	cmp	r2, r3
   1358c:	str	r3, [r5, #120]	; 0x78
   13590:	ldr	r1, [r5, #76]	; 0x4c
   13594:	movne	r3, #16
   13598:	ldr	r2, [r5, #52]	; 0x34
   1359c:	str	r0, [r5, #16]
   135a0:	ldr	r0, [r5, #184]	; 0xb8
   135a4:	strne	r3, [r5, #124]	; 0x7c
   135a8:	mov	r3, #0
   135ac:	cmp	sl, #0
   135b0:	strne	r3, [r5, #172]	; 0xac
   135b4:	strne	r3, [r5, #176]	; 0xb0
   135b8:	strne	r3, [r5, #180]	; 0xb4
   135bc:	cmp	r0, #0
   135c0:	stm	r5, {r1, r2}
   135c4:	strh	r3, [r5, #128]	; 0x80
   135c8:	str	r3, [r5, #136]	; 0x88
   135cc:	str	r3, [r5, #140]	; 0x8c
   135d0:	str	r3, [r5, #156]	; 0x9c
   135d4:	str	r3, [r5, #160]	; 0xa0
   135d8:	str	r3, [r5, #20]
   135dc:	str	r3, [r5, #24]
   135e0:	str	r3, [r5, #148]	; 0x94
   135e4:	str	r3, [r5, #152]	; 0x98
   135e8:	str	r3, [r5, #32]
   135ec:	beq	135fc <flatcc_builder_custom_reset@@Base+0x128>
   135f0:	add	r0, r5, #188	; 0xbc
   135f4:	bl	188b8 <flatcc_emitter_reset@@Base>
   135f8:	mov	r0, #0
   135fc:	add	sp, sp, #12
   13600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13604:	mvn	r0, #0
   13608:	b	135fc <flatcc_builder_custom_reset@@Base+0x128>
   1360c:	andeq	sl, r1, r4, asr #22
   13610:			; <UNDEFINED> instruction: 0x000001b2
   13614:	ldrdeq	sl, [r1], -ip
   13618:	strheq	fp, [r1], -r0

0001361c <flatcc_builder_reset@@Base>:
   1361c:	push	{r4, r5, r6, r7, r8, lr}
   13620:	mov	r5, r0
   13624:	add	r4, r0, #52	; 0x34
   13628:	add	r6, r0, #116	; 0x74
   1362c:	mov	r7, #0
   13630:	b	1364c <flatcc_builder_reset@@Base+0x30>
   13634:	ldr	r2, [r4, #4]
   13638:	mov	r1, r7
   1363c:	bl	1231c <memset@plt>
   13640:	add	r4, r4, #8
   13644:	cmp	r6, r4
   13648:	beq	13678 <flatcc_builder_reset@@Base+0x5c>
   1364c:	ldr	r0, [r4]
   13650:	cmp	r0, #0
   13654:	bne	13634 <flatcc_builder_reset@@Base+0x18>
   13658:	ldr	r3, [r4, #4]
   1365c:	cmp	r3, #0
   13660:	beq	13640 <flatcc_builder_reset@@Base+0x24>
   13664:	ldr	r3, [pc, #128]	; 136ec <flatcc_builder_reset@@Base+0xd0>
   13668:	ldr	r2, [pc, #128]	; 136f0 <flatcc_builder_reset@@Base+0xd4>
   1366c:	ldr	r1, [pc, #128]	; 136f4 <flatcc_builder_reset@@Base+0xd8>
   13670:	ldr	r0, [pc, #128]	; 136f8 <flatcc_builder_reset@@Base+0xdc>
   13674:	bl	1234c <__assert_fail@plt>
   13678:	ldr	r2, [r5, #124]	; 0x7c
   1367c:	mov	r3, #0
   13680:	cmp	r2, r3
   13684:	str	r3, [r5, #120]	; 0x78
   13688:	movne	r3, #16
   1368c:	strne	r3, [r5, #124]	; 0x7c
   13690:	ldr	r1, [r5, #76]	; 0x4c
   13694:	ldr	r3, [r5, #184]	; 0xb8
   13698:	ldr	r2, [r5, #52]	; 0x34
   1369c:	ldr	r0, [r5, #60]	; 0x3c
   136a0:	cmp	r3, #0
   136a4:	mov	r3, #0
   136a8:	str	r0, [r5, #16]
   136ac:	stm	r5, {r1, r2}
   136b0:	strh	r3, [r5, #128]	; 0x80
   136b4:	str	r3, [r5, #136]	; 0x88
   136b8:	str	r3, [r5, #140]	; 0x8c
   136bc:	str	r3, [r5, #156]	; 0x9c
   136c0:	str	r3, [r5, #160]	; 0xa0
   136c4:	str	r3, [r5, #20]
   136c8:	str	r3, [r5, #24]
   136cc:	str	r3, [r5, #148]	; 0x94
   136d0:	str	r3, [r5, #152]	; 0x98
   136d4:	str	r3, [r5, #32]
   136d8:	beq	136e4 <flatcc_builder_reset@@Base+0xc8>
   136dc:	add	r0, r5, #188	; 0xbc
   136e0:	bl	188b8 <flatcc_emitter_reset@@Base>
   136e4:	mov	r0, #0
   136e8:	pop	{r4, r5, r6, r7, r8, pc}
   136ec:	andeq	sl, r1, r4, asr #22
   136f0:			; <UNDEFINED> instruction: 0x000001b2
   136f4:	ldrdeq	sl, [r1], -ip
   136f8:	strheq	fp, [r1], -r0

000136fc <flatcc_builder_clear@@Base>:
   136fc:	push	{r4, r5, r6, r7, r8, lr}
   13700:	mov	r4, #0
   13704:	sub	sp, sp, #8
   13708:	mov	r6, r0
   1370c:	add	r5, r0, #52	; 0x34
   13710:	mov	r8, r4
   13714:	ldr	r0, [r6, #40]	; 0x28
   13718:	mov	r1, r5
   1371c:	str	r4, [sp]
   13720:	mov	r3, r8
   13724:	add	r4, r4, #1
   13728:	ldr	r7, [r6, #48]	; 0x30
   1372c:	mov	r2, #0
   13730:	blx	r7
   13734:	cmp	r4, #8
   13738:	add	r5, r5, #8
   1373c:	bne	13714 <flatcc_builder_clear@@Base+0x18>
   13740:	ldr	r3, [r6, #184]	; 0xb8
   13744:	cmp	r3, #0
   13748:	beq	13754 <flatcc_builder_clear@@Base+0x58>
   1374c:	add	r0, r6, #188	; 0xbc
   13750:	bl	18974 <flatcc_emitter_clear@@Base>
   13754:	mov	r0, r6
   13758:	mov	r2, #232	; 0xe8
   1375c:	mov	r1, #0
   13760:	add	sp, sp, #8
   13764:	pop	{r4, r5, r6, r7, r8, lr}
   13768:	b	1231c <memset@plt>

0001376c <flatcc_builder_enter_user_frame_ptr@@Base>:
   1376c:	push	{r4, r5, r6, r7, r8, lr}
   13770:	add	r4, r1, #3
   13774:	bic	r4, r4, #3
   13778:	ldr	r7, [r0, #228]	; 0xe4
   1377c:	add	r4, r4, #4
   13780:	ldr	r3, [r0, #112]	; 0x70
   13784:	add	r2, r4, r7
   13788:	cmp	r2, r3
   1378c:	sub	sp, sp, #8
   13790:	mov	r6, r0
   13794:	bhi	137dc <flatcc_builder_enter_user_frame_ptr@@Base+0x70>
   13798:	ldr	r8, [r6, #108]	; 0x6c
   1379c:	adds	r5, r8, r7
   137a0:	beq	13804 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   137a4:	mov	r2, r4
   137a8:	mov	r1, #0
   137ac:	mov	r0, r5
   137b0:	bl	1231c <memset@plt>
   137b4:	ldr	r3, [r6, #224]	; 0xe0
   137b8:	add	r0, r5, #4
   137bc:	str	r3, [r8, r7]
   137c0:	ldr	r3, [r6, #228]	; 0xe4
   137c4:	add	r4, r4, r3
   137c8:	add	r3, r3, #4
   137cc:	str	r4, [r6, #228]	; 0xe4
   137d0:	str	r3, [r6, #224]	; 0xe0
   137d4:	add	sp, sp, #8
   137d8:	pop	{r4, r5, r6, r7, r8, pc}
   137dc:	mov	r3, #7
   137e0:	ldr	r0, [r0, #40]	; 0x28
   137e4:	add	r1, r6, #108	; 0x6c
   137e8:	str	r3, [sp]
   137ec:	mov	r3, #0
   137f0:	ldr	r5, [r6, #48]	; 0x30
   137f4:	blx	r5
   137f8:	cmp	r0, #0
   137fc:	beq	13798 <flatcc_builder_enter_user_frame_ptr@@Base+0x2c>
   13800:	bl	12358 <__assert_fail@plt+0xc>
   13804:	mov	r0, r5
   13808:	b	137d4 <flatcc_builder_enter_user_frame_ptr@@Base+0x68>

0001380c <flatcc_builder_enter_user_frame@@Base>:
   1380c:	push	{r4, r5, r6, r7, lr}
   13810:	add	r4, r1, #3
   13814:	bic	r4, r4, #3
   13818:	ldr	r6, [r0, #228]	; 0xe4
   1381c:	add	r4, r4, #4
   13820:	ldr	r3, [r0, #112]	; 0x70
   13824:	add	r2, r4, r6
   13828:	cmp	r2, r3
   1382c:	sub	sp, sp, #12
   13830:	mov	r5, r0
   13834:	bhi	13874 <flatcc_builder_enter_user_frame@@Base+0x68>
   13838:	ldr	r7, [r5, #108]	; 0x6c
   1383c:	adds	r0, r7, r6
   13840:	beq	1386c <flatcc_builder_enter_user_frame@@Base+0x60>
   13844:	mov	r2, r4
   13848:	mov	r1, #0
   1384c:	bl	1231c <memset@plt>
   13850:	ldr	r3, [r5, #224]	; 0xe0
   13854:	str	r3, [r7, r6]
   13858:	ldr	r0, [r5, #228]	; 0xe4
   1385c:	add	r4, r4, r0
   13860:	add	r0, r0, #4
   13864:	str	r4, [r5, #228]	; 0xe4
   13868:	str	r0, [r5, #224]	; 0xe0
   1386c:	add	sp, sp, #12
   13870:	pop	{r4, r5, r6, r7, pc}
   13874:	mov	r3, #7
   13878:	ldr	r0, [r0, #40]	; 0x28
   1387c:	add	r1, r5, #108	; 0x6c
   13880:	str	r3, [sp]
   13884:	mov	r3, #0
   13888:	ldr	r7, [r5, #48]	; 0x30
   1388c:	blx	r7
   13890:	cmp	r0, #0
   13894:	beq	13838 <flatcc_builder_enter_user_frame@@Base+0x2c>
   13898:	bl	12358 <__assert_fail@plt+0xc>

0001389c <flatcc_builder_exit_user_frame@@Base>:
   1389c:	ldr	r3, [r0, #224]	; 0xe0
   138a0:	cmp	r3, #0
   138a4:	beq	138c8 <flatcc_builder_exit_user_frame@@Base+0x2c>
   138a8:	ldr	r2, [r0, #108]	; 0x6c
   138ac:	sub	r1, r3, #4
   138b0:	add	r3, r2, r3
   138b4:	str	r1, [r0, #228]	; 0xe4
   138b8:	ldr	r3, [r3, #-4]
   138bc:	str	r3, [r0, #224]	; 0xe0
   138c0:	mov	r0, r3
   138c4:	bx	lr
   138c8:	push	{r4, lr}
   138cc:	bl	123f0 <__assert_fail@plt+0xa4>

000138d0 <flatcc_builder_exit_user_frame_at@@Base>:
   138d0:	ldr	r3, [r0, #224]	; 0xe0
   138d4:	push	{r4, lr}
   138d8:	cmp	r3, r1
   138dc:	bcc	1390c <flatcc_builder_exit_user_frame_at@@Base+0x3c>
   138e0:	cmp	r1, #0
   138e4:	str	r1, [r0, #224]	; 0xe0
   138e8:	beq	13920 <flatcc_builder_exit_user_frame_at@@Base+0x50>
   138ec:	ldr	r3, [r0, #108]	; 0x6c
   138f0:	sub	r2, r1, #4
   138f4:	add	r1, r3, r1
   138f8:	str	r2, [r0, #228]	; 0xe4
   138fc:	ldr	r3, [r1, #-4]
   13900:	str	r3, [r0, #224]	; 0xe0
   13904:	mov	r0, r3
   13908:	pop	{r4, pc}
   1390c:	ldr	r3, [pc, #16]	; 13924 <flatcc_builder_exit_user_frame_at@@Base+0x54>
   13910:	ldr	r2, [pc, #16]	; 13928 <flatcc_builder_exit_user_frame_at@@Base+0x58>
   13914:	ldr	r1, [pc, #16]	; 1392c <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   13918:	ldr	r0, [pc, #16]	; 13930 <flatcc_builder_exit_user_frame_at@@Base+0x60>
   1391c:	bl	1234c <__assert_fail@plt>
   13920:	bl	123f0 <__assert_fail@plt+0xa4>
   13924:	andeq	sl, r1, r0, ror #22
   13928:	andeq	r0, r0, r7, lsr #4
   1392c:	ldrdeq	sl, [r1], -ip
   13930:	andeq	fp, r1, r4, asr #1

00013934 <flatcc_builder_get_current_user_frame@@Base>:
   13934:	ldr	r0, [r0, #224]	; 0xe0
   13938:	bx	lr

0001393c <flatcc_builder_get_user_frame_ptr@@Base>:
   1393c:	ldr	r0, [r0, #108]	; 0x6c
   13940:	add	r0, r0, r1
   13944:	bx	lr

00013948 <flatcc_builder_embed_buffer@@Base>:
   13948:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1394c:	sub	sp, sp, #92	; 0x5c
   13950:	cmp	r1, #0
   13954:	ldr	r6, [sp, #132]	; 0x84
   13958:	mov	r8, r2
   1395c:	mov	r5, r0
   13960:	mov	r7, r3
   13964:	ldr	r2, [r0, #152]	; 0x98
   13968:	and	r6, r6, #2
   1396c:	ldrh	r4, [sp, #128]	; 0x80
   13970:	bne	13980 <flatcc_builder_embed_buffer@@Base+0x38>
   13974:	ldrh	r1, [r0, #132]	; 0x84
   13978:	cmp	r1, #0
   1397c:	beq	13b08 <flatcc_builder_embed_buffer@@Base+0x1c0>
   13980:	cmp	r4, #4
   13984:	movcc	r4, #4
   13988:	cmp	r1, r4
   1398c:	movcs	r4, r1
   13990:	cmp	r2, #0
   13994:	bne	139fc <flatcc_builder_embed_buffer@@Base+0xb4>
   13998:	ldr	r9, [r5, #140]	; 0x8c
   1399c:	sub	r1, r1, #1
   139a0:	ands	r1, r1, r9
   139a4:	beq	139fc <flatcc_builder_embed_buffer@@Base+0xb4>
   139a8:	add	r3, r9, r1
   139ac:	ldr	sl, [pc, #420]	; 13b58 <flatcc_builder_embed_buffer@@Base+0x210>
   139b0:	mov	r2, #1
   139b4:	cmp	r9, r3
   139b8:	str	r1, [sp, #16]
   139bc:	str	r1, [sp, #28]
   139c0:	str	sl, [sp, #24]
   139c4:	str	r3, [r5, #140]	; 0x8c
   139c8:	str	r2, [sp, #20]
   139cc:	bgt	13b2c <flatcc_builder_embed_buffer@@Base+0x1e4>
   139d0:	ldr	r0, [r5, #36]	; 0x24
   139d4:	mov	r3, r9
   139d8:	str	r1, [sp]
   139dc:	add	r1, sp, #24
   139e0:	ldr	fp, [r5, #44]	; 0x2c
   139e4:	blx	fp
   139e8:	cmp	r0, #0
   139ec:	bne	13b30 <flatcc_builder_embed_buffer@@Base+0x1e8>
   139f0:	cmn	r9, #1
   139f4:	beq	13b44 <flatcc_builder_embed_buffer@@Base+0x1fc>
   139f8:	ldr	r2, [r5, #152]	; 0x98
   139fc:	ldr	r1, [r5, #136]	; 0x88
   13a00:	cmp	r6, #0
   13a04:	movne	r6, #4
   13a08:	moveq	r6, #0
   13a0c:	sub	r3, r1, r7
   13a10:	sub	r6, r3, r6
   13a14:	sub	r4, r4, #1
   13a18:	and	r4, r4, r6
   13a1c:	mov	r3, #0
   13a20:	add	r0, r7, r4
   13a24:	cmp	r2, #0
   13a28:	str	r0, [sp, #12]
   13a2c:	str	r3, [sp, #16]
   13a30:	str	r3, [sp, #20]
   13a34:	bne	13ae0 <flatcc_builder_embed_buffer@@Base+0x198>
   13a38:	mov	r3, r2
   13a3c:	mov	ip, #2
   13a40:	mov	r0, #1
   13a44:	cmp	r7, #0
   13a48:	beq	13a74 <flatcc_builder_embed_buffer@@Base+0x12c>
   13a4c:	add	r2, r2, #1
   13a50:	add	lr, sp, #88	; 0x58
   13a54:	add	r2, lr, r2, lsl #3
   13a58:	add	r3, r3, r7
   13a5c:	str	r3, [sp, #16]
   13a60:	str	r8, [r2, #-72]	; 0xffffffb8
   13a64:	str	r7, [r2, #-68]	; 0xffffffbc
   13a68:	mov	r2, r0
   13a6c:	str	r0, [sp, #20]
   13a70:	mov	r0, ip
   13a74:	cmp	r4, #0
   13a78:	beq	13aa4 <flatcc_builder_embed_buffer@@Base+0x15c>
   13a7c:	add	r2, r2, #1
   13a80:	add	ip, sp, #88	; 0x58
   13a84:	add	ip, ip, r2, lsl #3
   13a88:	ldr	lr, [pc, #200]	; 13b58 <flatcc_builder_embed_buffer@@Base+0x210>
   13a8c:	mov	r2, r0
   13a90:	add	r3, r3, r4
   13a94:	str	r3, [sp, #16]
   13a98:	str	r4, [ip, #-68]	; 0xffffffbc
   13a9c:	str	lr, [ip, #-72]	; 0xffffffb8
   13aa0:	str	r0, [sp, #20]
   13aa4:	sub	r4, r1, r3
   13aa8:	cmp	r1, r4
   13aac:	ble	13b14 <flatcc_builder_embed_buffer@@Base+0x1cc>
   13ab0:	ldr	r0, [r5, #36]	; 0x24
   13ab4:	add	r1, sp, #24
   13ab8:	str	r3, [sp]
   13abc:	mov	r3, r4
   13ac0:	ldr	r6, [r5, #44]	; 0x2c
   13ac4:	blx	r6
   13ac8:	cmp	r0, #0
   13acc:	bne	13b18 <flatcc_builder_embed_buffer@@Base+0x1d0>
   13ad0:	mov	r0, r4
   13ad4:	str	r4, [r5, #136]	; 0x88
   13ad8:	add	sp, sp, #92	; 0x5c
   13adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ae0:	mov	r3, #4
   13ae4:	add	r0, sp, #12
   13ae8:	mov	r2, #1
   13aec:	str	r0, [sp, #24]
   13af0:	str	r3, [sp, #16]
   13af4:	str	r3, [sp, #28]
   13af8:	str	r2, [sp, #20]
   13afc:	mov	ip, #3
   13b00:	mov	r0, #2
   13b04:	b	13a44 <flatcc_builder_embed_buffer@@Base+0xfc>
   13b08:	cmp	r4, #4
   13b0c:	movcc	r4, #4
   13b10:	b	139fc <flatcc_builder_embed_buffer@@Base+0xb4>
   13b14:	bl	123a4 <__assert_fail@plt+0x58>
   13b18:	ldr	r3, [pc, #60]	; 13b5c <flatcc_builder_embed_buffer@@Base+0x214>
   13b1c:	ldr	r2, [pc, #60]	; 13b60 <flatcc_builder_embed_buffer@@Base+0x218>
   13b20:	ldr	r1, [pc, #60]	; 13b64 <flatcc_builder_embed_buffer@@Base+0x21c>
   13b24:	ldr	r0, [pc, #60]	; 13b68 <flatcc_builder_embed_buffer@@Base+0x220>
   13b28:	bl	1234c <__assert_fail@plt>
   13b2c:	bl	1237c <__assert_fail@plt+0x30>
   13b30:	ldr	r3, [pc, #52]	; 13b6c <flatcc_builder_embed_buffer@@Base+0x224>
   13b34:	ldr	r2, [pc, #52]	; 13b70 <flatcc_builder_embed_buffer@@Base+0x228>
   13b38:	ldr	r1, [pc, #36]	; 13b64 <flatcc_builder_embed_buffer@@Base+0x21c>
   13b3c:	ldr	r0, [pc, #36]	; 13b68 <flatcc_builder_embed_buffer@@Base+0x220>
   13b40:	bl	1234c <__assert_fail@plt>
   13b44:	add	r3, sl, #608	; 0x260
   13b48:	ldr	r2, [pc, #36]	; 13b74 <flatcc_builder_embed_buffer@@Base+0x22c>
   13b4c:	ldr	r1, [pc, #16]	; 13b64 <flatcc_builder_embed_buffer@@Base+0x21c>
   13b50:	ldr	r0, [pc, #16]	; 13b68 <flatcc_builder_embed_buffer@@Base+0x220>
   13b54:	bl	1234c <__assert_fail@plt>
   13b58:	andeq	sl, r1, r4, lsr #18
   13b5c:	andeq	sl, r1, r8, lsr #17
   13b60:	andeq	r0, r0, fp, lsl #5
   13b64:	ldrdeq	sl, [r1], -ip
   13b68:	muleq	r1, ip, r0
   13b6c:	muleq	r1, ip, r8
   13b70:	andeq	r0, r0, r5, lsr #5
   13b74:			; <UNDEFINED> instruction: 0x000002be

00013b78 <flatcc_builder_create_buffer@@Base>:
   13b78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b7c:	sub	sp, sp, #100	; 0x64
   13b80:	mov	ip, #0
   13b84:	ldr	r5, [sp, #140]	; 0x8c
   13b88:	cmp	r2, #0
   13b8c:	mov	r6, r0
   13b90:	mov	r8, r1
   13b94:	mov	sl, r3
   13b98:	and	r7, r5, #1
   13b9c:	str	ip, [sp, #20]
   13ba0:	ldrh	r4, [sp, #136]	; 0x88
   13ba4:	bne	13bb4 <flatcc_builder_create_buffer@@Base+0x3c>
   13ba8:	ldrh	r2, [r0, #132]	; 0x84
   13bac:	cmp	r2, ip
   13bb0:	beq	13dc0 <flatcc_builder_create_buffer@@Base+0x248>
   13bb4:	cmp	r4, #4
   13bb8:	movcc	r4, #4
   13bbc:	cmp	r2, r4
   13bc0:	movcs	r4, r2
   13bc4:	cmp	r7, #0
   13bc8:	bne	13c2c <flatcc_builder_create_buffer@@Base+0xb4>
   13bcc:	ldr	r9, [r6, #140]	; 0x8c
   13bd0:	sub	r2, r2, #1
   13bd4:	ands	r3, r2, r9
   13bd8:	beq	13c2c <flatcc_builder_create_buffer@@Base+0xb4>
   13bdc:	add	r1, r9, r3
   13be0:	ldr	fp, [pc, #584]	; 13e30 <flatcc_builder_create_buffer@@Base+0x2b8>
   13be4:	mov	r2, #1
   13be8:	cmp	r9, r1
   13bec:	str	r3, [sp, #24]
   13bf0:	str	r3, [sp, #36]	; 0x24
   13bf4:	str	fp, [sp, #32]
   13bf8:	str	r1, [r6, #140]	; 0x8c
   13bfc:	str	r2, [sp, #28]
   13c00:	bgt	13e18 <flatcc_builder_create_buffer@@Base+0x2a0>
   13c04:	ldr	r0, [r6, #36]	; 0x24
   13c08:	add	r1, sp, #32
   13c0c:	str	r3, [sp]
   13c10:	mov	r3, r9
   13c14:	ldr	ip, [r6, #44]	; 0x2c
   13c18:	blx	ip
   13c1c:	cmp	r0, #0
   13c20:	bne	13e1c <flatcc_builder_create_buffer@@Base+0x2a4>
   13c24:	cmn	r9, #1
   13c28:	beq	13dd8 <flatcc_builder_create_buffer@@Base+0x260>
   13c2c:	ldrh	r3, [r6, #128]	; 0x80
   13c30:	ldr	r0, [r6, #136]	; 0x88
   13c34:	uxtb	lr, r7
   13c38:	cmp	r3, r4
   13c3c:	strhcc	r4, [r6, #128]	; 0x80
   13c40:	cmp	r8, #0
   13c44:	ldreq	r1, [sp, #20]
   13c48:	ldrne	r1, [r8]
   13c4c:	ldrne	r3, [r8]
   13c50:	strne	r3, [sp, #20]
   13c54:	cmp	r1, #0
   13c58:	movne	r1, #4
   13c5c:	moveq	r1, #0
   13c60:	ands	r5, r5, #2
   13c64:	bne	13d88 <flatcc_builder_create_buffer@@Base+0x210>
   13c68:	sub	r3, r4, #1
   13c6c:	sub	r4, r0, #4
   13c70:	cmp	lr, #0
   13c74:	sub	r4, r4, r1
   13c78:	and	r4, r4, r3
   13c7c:	moveq	r8, #3
   13c80:	moveq	ip, #2
   13c84:	moveq	r2, #1
   13c88:	moveq	r3, #4
   13c8c:	bne	13d98 <flatcc_builder_create_buffer@@Base+0x220>
   13c90:	add	r5, r5, #1
   13c94:	add	r9, sp, #96	; 0x60
   13c98:	add	r5, r9, r5, lsl #3
   13c9c:	add	fp, sp, #12
   13ca0:	mov	r9, #4
   13ca4:	cmp	r1, #0
   13ca8:	str	r3, [sp, #24]
   13cac:	str	fp, [r5, #-72]	; 0xffffffb8
   13cb0:	str	r9, [r5, #-68]	; 0xffffffbc
   13cb4:	str	r2, [sp, #28]
   13cb8:	beq	13ce8 <flatcc_builder_create_buffer@@Base+0x170>
   13cbc:	add	r2, r2, #1
   13cc0:	add	r5, sp, #96	; 0x60
   13cc4:	add	r2, r5, r2, lsl #3
   13cc8:	add	r3, r3, r1
   13ccc:	add	r5, sp, #20
   13cd0:	str	r3, [sp, #24]
   13cd4:	str	r1, [r2, #-68]	; 0xffffffbc
   13cd8:	str	r5, [r2, #-72]	; 0xffffffb8
   13cdc:	mov	r2, ip
   13ce0:	str	ip, [sp, #28]
   13ce4:	mov	ip, r8
   13ce8:	cmp	r4, #0
   13cec:	beq	13d18 <flatcc_builder_create_buffer@@Base+0x1a0>
   13cf0:	add	r2, r2, #1
   13cf4:	add	r1, sp, #96	; 0x60
   13cf8:	add	r1, r1, r2, lsl #3
   13cfc:	ldr	r5, [pc, #300]	; 13e30 <flatcc_builder_create_buffer@@Base+0x2b8>
   13d00:	mov	r2, ip
   13d04:	add	r3, r3, r4
   13d08:	str	r3, [sp, #24]
   13d0c:	str	r4, [r1, #-68]	; 0xffffffbc
   13d10:	str	r5, [r1, #-72]	; 0xffffffb8
   13d14:	str	ip, [sp, #28]
   13d18:	sub	r4, r0, r3
   13d1c:	cmp	lr, #0
   13d20:	mov	r1, r4
   13d24:	beq	13dcc <flatcc_builder_create_buffer@@Base+0x254>
   13d28:	cmp	r7, #0
   13d2c:	add	r1, r4, #4
   13d30:	beq	13dcc <flatcc_builder_create_buffer@@Base+0x254>
   13d34:	ldr	ip, [r6, #144]	; 0x90
   13d38:	sub	ip, ip, r1
   13d3c:	sub	sl, sl, r1
   13d40:	cmp	r4, r0
   13d44:	str	sl, [sp, #12]
   13d48:	str	ip, [sp, #16]
   13d4c:	bge	13dec <flatcc_builder_create_buffer@@Base+0x274>
   13d50:	ldr	r0, [r6, #36]	; 0x24
   13d54:	add	r1, sp, #32
   13d58:	str	r3, [sp]
   13d5c:	mov	r3, r4
   13d60:	ldr	r5, [r6, #44]	; 0x2c
   13d64:	blx	r5
   13d68:	cmp	r0, #0
   13d6c:	bne	13df0 <flatcc_builder_create_buffer@@Base+0x278>
   13d70:	cmp	r4, #0
   13d74:	str	r4, [r6, #136]	; 0x88
   13d78:	beq	13e04 <flatcc_builder_create_buffer@@Base+0x28c>
   13d7c:	mov	r0, r4
   13d80:	add	sp, sp, #100	; 0x64
   13d84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d88:	sub	r3, r0, #8
   13d8c:	sub	r4, r4, #1
   13d90:	sub	r3, r3, r1
   13d94:	and	r4, r4, r3
   13d98:	add	r3, sp, #16
   13d9c:	mov	r8, #4
   13da0:	mov	r5, #1
   13da4:	str	r3, [sp, #32]
   13da8:	str	r8, [sp, #36]	; 0x24
   13dac:	mov	lr, r5
   13db0:	mov	ip, #3
   13db4:	mov	r2, #2
   13db8:	mov	r3, #8
   13dbc:	b	13c90 <flatcc_builder_create_buffer@@Base+0x118>
   13dc0:	cmp	r4, #4
   13dc4:	movcc	r4, #4
   13dc8:	b	13c2c <flatcc_builder_create_buffer@@Base+0xb4>
   13dcc:	ldr	ip, [r6, #140]	; 0x8c
   13dd0:	sub	ip, ip, r1
   13dd4:	b	13d3c <flatcc_builder_create_buffer@@Base+0x1c4>
   13dd8:	add	r3, fp, #608	; 0x260
   13ddc:	ldr	r2, [pc, #80]	; 13e34 <flatcc_builder_create_buffer@@Base+0x2bc>
   13de0:	ldr	r1, [pc, #80]	; 13e38 <flatcc_builder_create_buffer@@Base+0x2c0>
   13de4:	ldr	r0, [pc, #80]	; 13e3c <flatcc_builder_create_buffer@@Base+0x2c4>
   13de8:	bl	1234c <__assert_fail@plt>
   13dec:	bl	123a4 <__assert_fail@plt+0x58>
   13df0:	ldr	r3, [pc, #72]	; 13e40 <flatcc_builder_create_buffer@@Base+0x2c8>
   13df4:	ldr	r2, [pc, #72]	; 13e44 <flatcc_builder_create_buffer@@Base+0x2cc>
   13df8:	ldr	r1, [pc, #56]	; 13e38 <flatcc_builder_create_buffer@@Base+0x2c0>
   13dfc:	ldr	r0, [pc, #56]	; 13e3c <flatcc_builder_create_buffer@@Base+0x2c4>
   13e00:	bl	1234c <__assert_fail@plt>
   13e04:	ldr	r3, [pc, #60]	; 13e48 <flatcc_builder_create_buffer@@Base+0x2d0>
   13e08:	mov	r2, #772	; 0x304
   13e0c:	ldr	r1, [pc, #36]	; 13e38 <flatcc_builder_create_buffer@@Base+0x2c0>
   13e10:	ldr	r0, [pc, #36]	; 13e3c <flatcc_builder_create_buffer@@Base+0x2c4>
   13e14:	bl	1234c <__assert_fail@plt>
   13e18:	bl	1237c <__assert_fail@plt+0x30>
   13e1c:	ldr	r3, [pc, #40]	; 13e4c <flatcc_builder_create_buffer@@Base+0x2d4>
   13e20:	ldr	r2, [pc, #40]	; 13e50 <flatcc_builder_create_buffer@@Base+0x2d8>
   13e24:	ldr	r1, [pc, #12]	; 13e38 <flatcc_builder_create_buffer@@Base+0x2c0>
   13e28:	ldr	r0, [pc, #12]	; 13e3c <flatcc_builder_create_buffer@@Base+0x2c4>
   13e2c:	bl	1234c <__assert_fail@plt>
   13e30:	andeq	sl, r1, r4, lsr #18
   13e34:			; <UNDEFINED> instruction: 0x000002be
   13e38:	ldrdeq	sl, [r1], -ip
   13e3c:	muleq	r1, ip, r0
   13e40:	andeq	sl, r1, r8, lsr #17
   13e44:	andeq	r0, r0, fp, lsl #5
   13e48:	muleq	r1, r4, fp
   13e4c:	muleq	r1, ip, r8
   13e50:	andeq	r0, r0, r5, lsr #5

00013e54 <flatcc_builder_create_struct@@Base>:
   13e54:	cmp	r3, #0
   13e58:	push	{r4, r5, r6, lr}
   13e5c:	sub	sp, sp, #80	; 0x50
   13e60:	beq	13f4c <flatcc_builder_create_struct@@Base+0xf8>
   13e64:	mov	ip, r2
   13e68:	ldrh	r2, [r0, #128]	; 0x80
   13e6c:	mov	r5, r0
   13e70:	cmp	r2, r3
   13e74:	strhcc	r3, [r0, #128]	; 0x80
   13e78:	ldr	r0, [r0, #136]	; 0x88
   13e7c:	mov	r2, #0
   13e80:	sub	r3, r3, #1
   13e84:	sub	r4, r0, ip
   13e88:	cmp	ip, #0
   13e8c:	and	r3, r3, r4
   13e90:	str	r2, [sp, #8]
   13e94:	str	r2, [sp, #12]
   13e98:	bne	13f0c <flatcc_builder_create_struct@@Base+0xb8>
   13e9c:	cmp	r3, #0
   13ea0:	movne	r2, #1
   13ea4:	movne	r1, ip
   13ea8:	beq	13f34 <flatcc_builder_create_struct@@Base+0xe0>
   13eac:	add	r1, r1, #1
   13eb0:	add	r4, sp, #80	; 0x50
   13eb4:	add	ip, ip, r3
   13eb8:	add	r1, r4, r1, lsl #3
   13ebc:	ldr	lr, [pc, #156]	; 13f60 <flatcc_builder_create_struct@@Base+0x10c>
   13ec0:	sub	r4, r0, ip
   13ec4:	str	r3, [r1, #-68]	; 0xffffffbc
   13ec8:	str	ip, [sp, #8]
   13ecc:	str	r2, [sp, #12]
   13ed0:	str	lr, [r1, #-72]	; 0xffffffb8
   13ed4:	cmp	r0, r4
   13ed8:	ble	13f34 <flatcc_builder_create_struct@@Base+0xe0>
   13edc:	ldr	r0, [r5, #36]	; 0x24
   13ee0:	mov	r3, r4
   13ee4:	str	ip, [sp]
   13ee8:	add	r1, sp, #16
   13eec:	ldr	r6, [r5, #44]	; 0x2c
   13ef0:	blx	r6
   13ef4:	cmp	r0, #0
   13ef8:	bne	13f38 <flatcc_builder_create_struct@@Base+0xe4>
   13efc:	mov	r0, r4
   13f00:	str	r4, [r5, #136]	; 0x88
   13f04:	add	sp, sp, #80	; 0x50
   13f08:	pop	{r4, r5, r6, pc}
   13f0c:	cmp	r3, r2
   13f10:	mov	r2, #1
   13f14:	str	r1, [sp, #16]
   13f18:	str	r2, [sp, #12]
   13f1c:	movne	r1, r2
   13f20:	str	ip, [sp, #8]
   13f24:	str	ip, [sp, #20]
   13f28:	movne	r2, #2
   13f2c:	beq	13ed4 <flatcc_builder_create_struct@@Base+0x80>
   13f30:	b	13eac <flatcc_builder_create_struct@@Base+0x58>
   13f34:	bl	123a4 <__assert_fail@plt+0x58>
   13f38:	ldr	r3, [pc, #36]	; 13f64 <flatcc_builder_create_struct@@Base+0x110>
   13f3c:	ldr	r2, [pc, #36]	; 13f68 <flatcc_builder_create_struct@@Base+0x114>
   13f40:	ldr	r1, [pc, #36]	; 13f6c <flatcc_builder_create_struct@@Base+0x118>
   13f44:	ldr	r0, [pc, #36]	; 13f70 <flatcc_builder_create_struct@@Base+0x11c>
   13f48:	bl	1234c <__assert_fail@plt>
   13f4c:	ldr	r3, [pc, #32]	; 13f74 <flatcc_builder_create_struct@@Base+0x120>
   13f50:	ldr	r2, [pc, #32]	; 13f78 <flatcc_builder_create_struct@@Base+0x124>
   13f54:	ldr	r1, [pc, #16]	; 13f6c <flatcc_builder_create_struct@@Base+0x118>
   13f58:	ldr	r0, [pc, #28]	; 13f7c <flatcc_builder_create_struct@@Base+0x128>
   13f5c:	bl	1234c <__assert_fail@plt>
   13f60:	andeq	sl, r1, r4, lsr #18
   13f64:	andeq	sl, r1, r8, lsr #17
   13f68:	andeq	r0, r0, fp, lsl #5
   13f6c:	ldrdeq	sl, [r1], -ip
   13f70:	muleq	r1, ip, r0
   13f74:			; <UNDEFINED> instruction: 0x0001abb4
   13f78:	andeq	r0, r0, pc, lsl #6
   13f7c:	andeq	fp, r1, r4, ror #1

00013f80 <flatcc_builder_start_buffer@@Base>:
   13f80:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13f84:	mov	r4, r0
   13f88:	ldr	r0, [r0, #156]	; 0x9c
   13f8c:	ldr	ip, [r4, #160]	; 0xa0
   13f90:	mov	r5, r1
   13f94:	add	r1, r0, #1
   13f98:	cmp	r1, ip
   13f9c:	sub	sp, sp, #8
   13fa0:	mov	r7, r2
   13fa4:	mov	r6, r3
   13fa8:	str	r1, [r4, #156]	; 0x9c
   13fac:	ldrh	r8, [r4, #128]	; 0x80
   13fb0:	ble	14020 <flatcc_builder_start_buffer@@Base+0xa0>
   13fb4:	ldr	r3, [r4, #176]	; 0xb0
   13fb8:	cmp	r3, #0
   13fbc:	cmpgt	r1, r3
   13fc0:	movgt	r3, #1
   13fc4:	movle	r3, #0
   13fc8:	bgt	140fc <flatcc_builder_start_buffer@@Base+0x17c>
   13fcc:	add	r0, r0, r0, lsl #3
   13fd0:	ldr	r1, [r4, #88]	; 0x58
   13fd4:	lsl	r9, r0, #2
   13fd8:	add	r2, r9, #36	; 0x24
   13fdc:	cmp	r2, r1
   13fe0:	bhi	140d8 <flatcc_builder_start_buffer@@Base+0x158>
   13fe4:	ldr	r3, [r4, #84]	; 0x54
   13fe8:	add	r3, r3, r9
   13fec:	cmp	r3, #0
   13ff0:	str	r3, [r4, #32]
   13ff4:	beq	140fc <flatcc_builder_start_buffer@@Base+0x17c>
   13ff8:	ldr	r2, [r4, #88]	; 0x58
   13ffc:	ldr	r0, [pc, #256]	; 14104 <flatcc_builder_start_buffer@@Base+0x184>
   14000:	ldr	r1, [r4, #176]	; 0xb0
   14004:	umull	r0, r2, r0, r2
   14008:	lsr	r2, r2, #3
   1400c:	cmp	r1, #0
   14010:	cmpgt	r2, r1
   14014:	str	r2, [r4, #160]	; 0xa0
   14018:	strgt	r1, [r4, #160]	; 0xa0
   1401c:	b	1402c <flatcc_builder_start_buffer@@Base+0xac>
   14020:	ldr	r3, [r4, #32]
   14024:	add	r3, r3, #36	; 0x24
   14028:	str	r3, [r4, #32]
   1402c:	ldr	r0, [r4, #20]
   14030:	ldr	r1, [r4, #28]
   14034:	ldrh	lr, [r4, #130]	; 0x82
   14038:	ldrh	ip, [r4, #132]	; 0x84
   1403c:	add	r2, r0, r1
   14040:	add	r2, r2, #7
   14044:	str	r0, [r3, #8]
   14048:	strh	lr, [r3, #12]
   1404c:	bic	r2, r2, #7
   14050:	strh	r8, [r4, #130]	; 0x82
   14054:	mvn	lr, #3
   14058:	str	r1, [r3]
   1405c:	mov	r0, #0
   14060:	mov	r1, #1
   14064:	str	lr, [r3, #4]
   14068:	str	r2, [r4, #28]
   1406c:	str	r0, [r4, #20]
   14070:	strh	r1, [r4, #128]	; 0x80
   14074:	strh	ip, [r3, #34]	; 0x22
   14078:	ldrh	r2, [r4, #164]	; 0xa4
   1407c:	strh	r7, [r4, #132]	; 0x84
   14080:	ldr	ip, [pc, #128]	; 14108 <flatcc_builder_start_buffer@@Base+0x188>
   14084:	strh	r2, [r3, #32]
   14088:	ldr	r2, [r4, #144]	; 0x90
   1408c:	strh	r6, [r4, #164]	; 0xa4
   14090:	str	r2, [r3, #20]
   14094:	ldr	r2, [r4, #152]	; 0x98
   14098:	cmp	r5, r0
   1409c:	str	r2, [r3, #28]
   140a0:	ldr	r2, [r4, #148]	; 0x94
   140a4:	ldr	lr, [r4, #136]	; 0x88
   140a8:	moveq	r5, ip
   140ac:	ldr	ip, [r4, #168]	; 0xa8
   140b0:	add	r6, r2, r1
   140b4:	str	r2, [r4, #152]	; 0x98
   140b8:	str	r6, [r4, #148]	; 0x94
   140bc:	str	lr, [r4, #144]	; 0x90
   140c0:	str	ip, [r3, #16]
   140c4:	ldr	r2, [r5]
   140c8:	str	r2, [r4, #168]	; 0xa8
   140cc:	strh	r1, [r3, #14]
   140d0:	add	sp, sp, #8
   140d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   140d8:	mov	r1, #4
   140dc:	ldr	r0, [r4, #40]	; 0x28
   140e0:	str	r1, [sp]
   140e4:	add	r1, r4, #84	; 0x54
   140e8:	ldr	sl, [r4, #48]	; 0x30
   140ec:	blx	sl
   140f0:	cmp	r0, #0
   140f4:	beq	13fe4 <flatcc_builder_start_buffer@@Base+0x64>
   140f8:	bl	12358 <__assert_fail@plt+0xc>
   140fc:	mvn	r0, #0
   14100:	b	140d0 <flatcc_builder_start_buffer@@Base+0x150>
   14104:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   14108:	andeq	sl, r1, r4, lsr #18

0001410c <flatcc_builder_end_buffer@@Base>:
   1410c:	ldr	r3, [r0, #32]
   14110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14114:	sub	sp, sp, #100	; 0x64
   14118:	ldrh	r5, [r0, #164]	; 0xa4
   1411c:	ldrh	r3, [r3, #14]
   14120:	ldr	r2, [r0, #152]	; 0x98
   14124:	and	r5, r5, #2
   14128:	cmp	r2, #0
   1412c:	orrne	r5, r5, #1
   14130:	cmp	r3, #1
   14134:	bne	14420 <flatcc_builder_end_buffer@@Base+0x314>
   14138:	ldrh	r3, [r0, #132]	; 0x84
   1413c:	ldrh	r2, [r0, #128]	; 0x80
   14140:	mov	r9, r1
   14144:	mov	r1, #0
   14148:	cmp	r3, r2
   1414c:	movhi	r2, r3
   14150:	strhhi	r3, [r0, #128]	; 0x80
   14154:	cmp	r3, #0
   14158:	mov	r4, r0
   1415c:	str	r1, [sp, #20]
   14160:	and	r7, r5, #1
   14164:	beq	143cc <flatcc_builder_end_buffer@@Base+0x2c0>
   14168:	cmp	r3, #4
   1416c:	movcc	r6, #4
   14170:	movcs	r6, r3
   14174:	cmp	r6, r2
   14178:	movcc	r6, r2
   1417c:	cmp	r7, r1
   14180:	bne	141e8 <flatcc_builder_end_buffer@@Base+0xdc>
   14184:	ldr	r8, [r0, #140]	; 0x8c
   14188:	sub	r3, r3, #1
   1418c:	ands	r3, r3, r8
   14190:	beq	141e8 <flatcc_builder_end_buffer@@Base+0xdc>
   14194:	add	r1, r8, r3
   14198:	ldr	sl, [pc, #748]	; 1448c <flatcc_builder_end_buffer@@Base+0x380>
   1419c:	mov	r2, #1
   141a0:	cmp	r8, r1
   141a4:	str	r3, [sp, #24]
   141a8:	str	r3, [sp, #36]	; 0x24
   141ac:	str	sl, [sp, #32]
   141b0:	str	r1, [r0, #140]	; 0x8c
   141b4:	str	r2, [sp, #28]
   141b8:	bgt	14474 <flatcc_builder_end_buffer@@Base+0x368>
   141bc:	ldr	r0, [r0, #36]	; 0x24
   141c0:	add	r1, sp, #32
   141c4:	str	r3, [sp]
   141c8:	mov	r3, r8
   141cc:	ldr	fp, [r4, #44]	; 0x2c
   141d0:	blx	fp
   141d4:	cmp	r0, #0
   141d8:	bne	14478 <flatcc_builder_end_buffer@@Base+0x36c>
   141dc:	cmn	r8, #1
   141e0:	beq	14460 <flatcc_builder_end_buffer@@Base+0x354>
   141e4:	ldrh	r2, [r4, #128]	; 0x80
   141e8:	ldr	r3, [r4, #168]	; 0xa8
   141ec:	cmp	r2, r6
   141f0:	strhcc	r6, [r4, #128]	; 0x80
   141f4:	cmp	r3, #0
   141f8:	movne	r1, #4
   141fc:	moveq	r1, #0
   14200:	ands	r5, r5, #2
   14204:	uxtb	ip, r7
   14208:	str	r3, [sp, #20]
   1420c:	ldr	r0, [r4, #136]	; 0x88
   14210:	bne	143dc <flatcc_builder_end_buffer@@Base+0x2d0>
   14214:	sub	r3, r6, #1
   14218:	sub	r6, r0, #4
   1421c:	cmp	ip, #0
   14220:	sub	r6, r6, r1
   14224:	and	r6, r6, r3
   14228:	moveq	r8, #3
   1422c:	moveq	lr, #2
   14230:	moveq	r2, #1
   14234:	moveq	r3, #4
   14238:	bne	143ec <flatcc_builder_end_buffer@@Base+0x2e0>
   1423c:	add	r5, r5, #1
   14240:	add	sl, sp, #96	; 0x60
   14244:	add	r5, sl, r5, lsl #3
   14248:	add	fp, sp, #12
   1424c:	mov	sl, #4
   14250:	cmp	r1, #0
   14254:	str	r3, [sp, #24]
   14258:	str	fp, [r5, #-72]	; 0xffffffb8
   1425c:	str	sl, [r5, #-68]	; 0xffffffbc
   14260:	str	r2, [sp, #28]
   14264:	beq	14294 <flatcc_builder_end_buffer@@Base+0x188>
   14268:	add	r2, r2, #1
   1426c:	add	r5, sp, #96	; 0x60
   14270:	add	r2, r5, r2, lsl #3
   14274:	add	r3, r3, r1
   14278:	add	r5, sp, #20
   1427c:	str	r3, [sp, #24]
   14280:	str	r1, [r2, #-68]	; 0xffffffbc
   14284:	str	r5, [r2, #-72]	; 0xffffffb8
   14288:	mov	r2, lr
   1428c:	str	lr, [sp, #28]
   14290:	mov	lr, r8
   14294:	cmp	r6, #0
   14298:	beq	142c4 <flatcc_builder_end_buffer@@Base+0x1b8>
   1429c:	add	r2, r2, #1
   142a0:	add	r1, sp, #96	; 0x60
   142a4:	add	r1, r1, r2, lsl #3
   142a8:	ldr	r5, [pc, #476]	; 1448c <flatcc_builder_end_buffer@@Base+0x380>
   142ac:	mov	r2, lr
   142b0:	add	r3, r3, r6
   142b4:	str	r3, [sp, #24]
   142b8:	str	r6, [r1, #-68]	; 0xffffffbc
   142bc:	str	r5, [r1, #-72]	; 0xffffffb8
   142c0:	str	lr, [sp, #28]
   142c4:	sub	r5, r0, r3
   142c8:	cmp	ip, #0
   142cc:	mov	r1, r5
   142d0:	beq	14414 <flatcc_builder_end_buffer@@Base+0x308>
   142d4:	cmp	r7, #0
   142d8:	add	r1, r5, #4
   142dc:	beq	14414 <flatcc_builder_end_buffer@@Base+0x308>
   142e0:	ldr	ip, [r4, #144]	; 0x90
   142e4:	sub	ip, ip, r1
   142e8:	sub	r9, r9, r1
   142ec:	cmp	r5, r0
   142f0:	str	r9, [sp, #12]
   142f4:	str	ip, [sp, #16]
   142f8:	bge	14434 <flatcc_builder_end_buffer@@Base+0x328>
   142fc:	ldr	r0, [r4, #36]	; 0x24
   14300:	add	r1, sp, #32
   14304:	str	r3, [sp]
   14308:	mov	r3, r5
   1430c:	ldr	r6, [r4, #44]	; 0x2c
   14310:	blx	r6
   14314:	subs	r1, r0, #0
   14318:	bne	14438 <flatcc_builder_end_buffer@@Base+0x32c>
   1431c:	cmp	r5, #0
   14320:	str	r5, [r4, #136]	; 0x88
   14324:	beq	1444c <flatcc_builder_end_buffer@@Base+0x340>
   14328:	ldr	r3, [r4, #32]
   1432c:	ldr	r2, [r4, #20]
   14330:	ldr	r0, [r4, #16]
   14334:	ldr	ip, [r3, #20]
   14338:	str	ip, [r4, #144]	; 0x90
   1433c:	ldr	ip, [r3, #28]
   14340:	str	ip, [r4, #152]	; 0x98
   14344:	ldr	ip, [r3, #16]
   14348:	str	ip, [r4, #168]	; 0xa8
   1434c:	ldrh	r3, [r3, #32]
   14350:	strh	r3, [r4, #164]	; 0xa4
   14354:	bl	1231c <memset@plt>
   14358:	ldr	r3, [r4, #32]
   1435c:	ldr	r2, [r4, #64]	; 0x40
   14360:	ldrh	lr, [r4, #130]	; 0x82
   14364:	ldr	ip, [r3]
   14368:	ldr	r1, [r3, #4]
   1436c:	ldrh	r0, [r4, #128]	; 0x80
   14370:	sub	r2, r2, ip
   14374:	cmp	r2, r1
   14378:	movcs	r2, r1
   1437c:	cmp	r0, lr
   14380:	ldr	r0, [r4, #60]	; 0x3c
   14384:	ldr	r6, [r3, #8]
   14388:	str	r2, [r4, #24]
   1438c:	add	r2, r0, ip
   14390:	str	r2, [r4, #16]
   14394:	str	r6, [r4, #20]
   14398:	ldr	r2, [r4, #156]	; 0x9c
   1439c:	str	ip, [r4, #28]
   143a0:	str	r1, [r3, #4]
   143a4:	strhcc	lr, [r4, #128]	; 0x80
   143a8:	ldrh	r1, [r3, #12]
   143ac:	sub	r2, r2, #1
   143b0:	sub	r3, r3, #36	; 0x24
   143b4:	mov	r0, r5
   143b8:	str	r2, [r4, #156]	; 0x9c
   143bc:	strh	r1, [r4, #130]	; 0x82
   143c0:	str	r3, [r4, #32]
   143c4:	add	sp, sp, #100	; 0x64
   143c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143cc:	cmp	r2, #4
   143d0:	movcs	r6, r2
   143d4:	movcc	r6, #4
   143d8:	b	141e8 <flatcc_builder_end_buffer@@Base+0xdc>
   143dc:	sub	r3, r0, #8
   143e0:	sub	r6, r6, #1
   143e4:	sub	r3, r3, r1
   143e8:	and	r6, r6, r3
   143ec:	add	r3, sp, #16
   143f0:	mov	r8, #4
   143f4:	mov	r5, #1
   143f8:	str	r3, [sp, #32]
   143fc:	str	r8, [sp, #36]	; 0x24
   14400:	mov	ip, r5
   14404:	mov	lr, #3
   14408:	mov	r2, #2
   1440c:	mov	r3, #8
   14410:	b	1423c <flatcc_builder_end_buffer@@Base+0x130>
   14414:	ldr	ip, [r4, #140]	; 0x8c
   14418:	sub	ip, ip, r1
   1441c:	b	142e8 <flatcc_builder_end_buffer@@Base+0x1dc>
   14420:	ldr	r3, [pc, #104]	; 14490 <flatcc_builder_end_buffer@@Base+0x384>
   14424:	ldr	r2, [pc, #104]	; 14494 <flatcc_builder_end_buffer@@Base+0x388>
   14428:	ldr	r1, [pc, #104]	; 14498 <flatcc_builder_end_buffer@@Base+0x38c>
   1442c:	ldr	r0, [pc, #104]	; 1449c <flatcc_builder_end_buffer@@Base+0x390>
   14430:	bl	1234c <__assert_fail@plt>
   14434:	bl	123a4 <__assert_fail@plt+0x58>
   14438:	ldr	r3, [pc, #96]	; 144a0 <flatcc_builder_end_buffer@@Base+0x394>
   1443c:	ldr	r2, [pc, #96]	; 144a4 <flatcc_builder_end_buffer@@Base+0x398>
   14440:	ldr	r1, [pc, #80]	; 14498 <flatcc_builder_end_buffer@@Base+0x38c>
   14444:	ldr	r0, [pc, #92]	; 144a8 <flatcc_builder_end_buffer@@Base+0x39c>
   14448:	bl	1234c <__assert_fail@plt>
   1444c:	ldr	r3, [pc, #88]	; 144ac <flatcc_builder_end_buffer@@Base+0x3a0>
   14450:	mov	r2, #772	; 0x304
   14454:	ldr	r1, [pc, #60]	; 14498 <flatcc_builder_end_buffer@@Base+0x38c>
   14458:	ldr	r0, [pc, #72]	; 144a8 <flatcc_builder_end_buffer@@Base+0x39c>
   1445c:	bl	1234c <__assert_fail@plt>
   14460:	add	r3, sl, #608	; 0x260
   14464:	ldr	r2, [pc, #68]	; 144b0 <flatcc_builder_end_buffer@@Base+0x3a4>
   14468:	ldr	r1, [pc, #40]	; 14498 <flatcc_builder_end_buffer@@Base+0x38c>
   1446c:	ldr	r0, [pc, #52]	; 144a8 <flatcc_builder_end_buffer@@Base+0x39c>
   14470:	bl	1234c <__assert_fail@plt>
   14474:	bl	1237c <__assert_fail@plt+0x30>
   14478:	ldr	r3, [pc, #52]	; 144b4 <flatcc_builder_end_buffer@@Base+0x3a8>
   1447c:	ldr	r2, [pc, #52]	; 144b8 <flatcc_builder_end_buffer@@Base+0x3ac>
   14480:	ldr	r1, [pc, #16]	; 14498 <flatcc_builder_end_buffer@@Base+0x38c>
   14484:	ldr	r0, [pc, #28]	; 144a8 <flatcc_builder_end_buffer@@Base+0x39c>
   14488:	bl	1234c <__assert_fail@plt>
   1448c:	andeq	sl, r1, r4, lsr #18
   14490:	ldrdeq	sl, [r1], -r4
   14494:	andeq	r0, r0, r6, asr #6
   14498:	ldrdeq	sl, [r1], -ip
   1449c:	strdeq	fp, [r1], -r0
   144a0:	andeq	sl, r1, r8, lsr #17
   144a4:	andeq	r0, r0, fp, lsl #5
   144a8:	muleq	r1, ip, r0
   144ac:	muleq	r1, r4, fp
   144b0:			; <UNDEFINED> instruction: 0x000002be
   144b4:	muleq	r1, ip, r8
   144b8:	andeq	r0, r0, r5, lsr #5

000144bc <flatcc_builder_start_struct@@Base>:
   144bc:	push	{r4, r5, r6, r7, r8, lr}
   144c0:	mov	r4, r0
   144c4:	ldr	r0, [r0, #156]	; 0x9c
   144c8:	ldr	r3, [r4, #160]	; 0xa0
   144cc:	mov	r6, r1
   144d0:	add	r1, r0, #1
   144d4:	cmp	r1, r3
   144d8:	sub	sp, sp, #8
   144dc:	mov	r5, r2
   144e0:	str	r1, [r4, #156]	; 0x9c
   144e4:	ble	14554 <flatcc_builder_start_struct@@Base+0x98>
   144e8:	ldr	r3, [r4, #176]	; 0xb0
   144ec:	cmp	r3, #0
   144f0:	cmpgt	r1, r3
   144f4:	movgt	r3, #1
   144f8:	movle	r3, #0
   144fc:	bgt	14664 <flatcc_builder_start_struct@@Base+0x1a8>
   14500:	add	r0, r0, r0, lsl #3
   14504:	ldr	r1, [r4, #88]	; 0x58
   14508:	lsl	r7, r0, #2
   1450c:	add	r2, r7, #36	; 0x24
   14510:	cmp	r2, r1
   14514:	bhi	14640 <flatcc_builder_start_struct@@Base+0x184>
   14518:	ldr	r3, [r4, #84]	; 0x54
   1451c:	add	r3, r3, r7
   14520:	cmp	r3, #0
   14524:	str	r3, [r4, #32]
   14528:	beq	14664 <flatcc_builder_start_struct@@Base+0x1a8>
   1452c:	ldr	r2, [r4, #88]	; 0x58
   14530:	ldr	r0, [pc, #308]	; 1466c <flatcc_builder_start_struct@@Base+0x1b0>
   14534:	ldr	r1, [r4, #176]	; 0xb0
   14538:	umull	r0, r2, r0, r2
   1453c:	lsr	r2, r2, #3
   14540:	cmp	r1, #0
   14544:	cmpgt	r2, r1
   14548:	str	r2, [r4, #160]	; 0xa0
   1454c:	strgt	r1, [r4, #160]	; 0xa0
   14550:	b	14560 <flatcc_builder_start_struct@@Base+0xa4>
   14554:	ldr	r3, [r4, #32]
   14558:	add	r3, r3, #36	; 0x24
   1455c:	str	r3, [r4, #32]
   14560:	ldr	lr, [r4, #20]
   14564:	ldr	ip, [r4, #28]
   14568:	ldr	r1, [r4, #64]	; 0x40
   1456c:	add	r2, lr, ip
   14570:	add	r2, r2, #7
   14574:	ldrh	r7, [r4, #130]	; 0x82
   14578:	bic	r2, r2, #7
   1457c:	sub	r1, r1, r2
   14580:	ldr	r0, [r4, #60]	; 0x3c
   14584:	cmn	r1, #4
   14588:	str	lr, [r3, #8]
   1458c:	mvn	lr, #3
   14590:	strh	r7, [r3, #12]
   14594:	movhi	r1, lr
   14598:	strh	r5, [r4, #130]	; 0x82
   1459c:	str	ip, [r3]
   145a0:	mov	r5, #0
   145a4:	mov	ip, #2
   145a8:	str	lr, [r3, #4]
   145ac:	add	r0, r0, r2
   145b0:	str	r5, [r4, #20]
   145b4:	str	r2, [r4, #28]
   145b8:	mvn	r5, #3
   145bc:	strh	ip, [r3, #14]
   145c0:	strls	r1, [r4, #24]
   145c4:	strhi	lr, [r4, #24]
   145c8:	cmp	r6, r1
   145cc:	str	r0, [r4, #16]
   145d0:	str	r5, [r3, #4]
   145d4:	str	r6, [r4, #20]
   145d8:	bcs	145e4 <flatcc_builder_start_struct@@Base+0x128>
   145dc:	add	sp, sp, #8
   145e0:	pop	{r4, r5, r6, r7, r8, pc}
   145e4:	add	r6, r6, #1
   145e8:	mov	r3, #1
   145ec:	ldr	r0, [r4, #40]	; 0x28
   145f0:	add	r2, r6, r2
   145f4:	str	r3, [sp]
   145f8:	add	r1, r4, #60	; 0x3c
   145fc:	ldr	r6, [r4, #48]	; 0x30
   14600:	blx	r6
   14604:	cmp	r0, #0
   14608:	bne	14664 <flatcc_builder_start_struct@@Base+0x1a8>
   1460c:	ldr	r2, [r4, #28]
   14610:	ldr	r3, [r4, #64]	; 0x40
   14614:	ldr	r0, [r4, #60]	; 0x3c
   14618:	sub	r3, r3, r2
   1461c:	ldr	r1, [r4, #32]
   14620:	cmp	r3, r5
   14624:	add	r0, r0, r2
   14628:	movhi	r3, r5
   1462c:	str	r3, [r4, #24]
   14630:	str	r0, [r4, #16]
   14634:	str	r5, [r1, #4]
   14638:	add	sp, sp, #8
   1463c:	pop	{r4, r5, r6, r7, r8, pc}
   14640:	mov	r1, #4
   14644:	ldr	r0, [r4, #40]	; 0x28
   14648:	str	r1, [sp]
   1464c:	add	r1, r4, #84	; 0x54
   14650:	ldr	r8, [r4, #48]	; 0x30
   14654:	blx	r8
   14658:	cmp	r0, #0
   1465c:	beq	14518 <flatcc_builder_start_struct@@Base+0x5c>
   14660:	bl	12358 <__assert_fail@plt+0xc>
   14664:	mov	r0, #0
   14668:	b	145dc <flatcc_builder_start_struct@@Base+0x120>
   1466c:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00014670 <flatcc_builder_struct_edit@@Base>:
   14670:	ldr	r0, [r0, #16]
   14674:	bx	lr

00014678 <flatcc_builder_end_struct@@Base>:
   14678:	ldr	r3, [r0, #32]
   1467c:	push	{r4, r5, r6, lr}
   14680:	sub	sp, sp, #80	; 0x50
   14684:	ldrh	r3, [r3, #14]
   14688:	cmp	r3, #2
   1468c:	bne	14818 <flatcc_builder_end_struct@@Base+0x1a0>
   14690:	ldrh	r3, [r0, #130]	; 0x82
   14694:	mov	r4, r0
   14698:	ldr	r0, [r0, #16]
   1469c:	cmp	r3, #0
   146a0:	ldr	r1, [r4, #20]
   146a4:	beq	14804 <flatcc_builder_end_struct@@Base+0x18c>
   146a8:	ldrh	r2, [r4, #128]	; 0x80
   146ac:	ldr	ip, [r4, #136]	; 0x88
   146b0:	cmp	r2, r3
   146b4:	strhcc	r3, [r4, #128]	; 0x80
   146b8:	mov	r2, #0
   146bc:	sub	r3, r3, #1
   146c0:	sub	r5, ip, r1
   146c4:	cmp	r1, #0
   146c8:	and	r3, r3, r5
   146cc:	str	r2, [sp, #8]
   146d0:	str	r2, [sp, #12]
   146d4:	bne	147c4 <flatcc_builder_end_struct@@Base+0x14c>
   146d8:	cmp	r3, #0
   146dc:	movne	r2, #1
   146e0:	movne	r0, r1
   146e4:	beq	147ec <flatcc_builder_end_struct@@Base+0x174>
   146e8:	add	r0, r0, #1
   146ec:	add	r5, sp, #80	; 0x50
   146f0:	add	r1, r1, r3
   146f4:	add	r0, r5, r0, lsl #3
   146f8:	ldr	lr, [pc, #300]	; 1482c <flatcc_builder_end_struct@@Base+0x1b4>
   146fc:	sub	r5, ip, r1
   14700:	str	r3, [r0, #-68]	; 0xffffffbc
   14704:	str	r1, [sp, #8]
   14708:	str	r2, [sp, #12]
   1470c:	str	lr, [r0, #-72]	; 0xffffffb8
   14710:	cmp	ip, r5
   14714:	ble	147ec <flatcc_builder_end_struct@@Base+0x174>
   14718:	ldr	r0, [r4, #36]	; 0x24
   1471c:	mov	r3, r5
   14720:	str	r1, [sp]
   14724:	add	r1, sp, #16
   14728:	ldr	r6, [r4, #44]	; 0x2c
   1472c:	blx	r6
   14730:	subs	r1, r0, #0
   14734:	bne	147f0 <flatcc_builder_end_struct@@Base+0x178>
   14738:	cmp	r5, #0
   1473c:	str	r5, [r4, #136]	; 0x88
   14740:	beq	147b8 <flatcc_builder_end_struct@@Base+0x140>
   14744:	ldr	r2, [r4, #20]
   14748:	ldr	r0, [r4, #16]
   1474c:	bl	1231c <memset@plt>
   14750:	ldr	r3, [r4, #32]
   14754:	ldr	r2, [r4, #64]	; 0x40
   14758:	ldrh	lr, [r4, #130]	; 0x82
   1475c:	ldr	ip, [r3]
   14760:	ldr	r1, [r3, #4]
   14764:	ldrh	r0, [r4, #128]	; 0x80
   14768:	sub	r2, r2, ip
   1476c:	cmp	r2, r1
   14770:	movcs	r2, r1
   14774:	cmp	r0, lr
   14778:	ldr	r0, [r4, #60]	; 0x3c
   1477c:	ldr	r6, [r3, #8]
   14780:	str	r2, [r4, #24]
   14784:	add	r2, r0, ip
   14788:	str	r2, [r4, #16]
   1478c:	str	r6, [r4, #20]
   14790:	ldr	r2, [r4, #156]	; 0x9c
   14794:	str	ip, [r4, #28]
   14798:	str	r1, [r3, #4]
   1479c:	strhcc	lr, [r4, #128]	; 0x80
   147a0:	ldrh	r1, [r3, #12]
   147a4:	sub	r2, r2, #1
   147a8:	sub	r3, r3, #36	; 0x24
   147ac:	str	r2, [r4, #156]	; 0x9c
   147b0:	strh	r1, [r4, #130]	; 0x82
   147b4:	str	r3, [r4, #32]
   147b8:	mov	r0, r5
   147bc:	add	sp, sp, #80	; 0x50
   147c0:	pop	{r4, r5, r6, pc}
   147c4:	cmp	r3, r2
   147c8:	mov	r2, #1
   147cc:	str	r0, [sp, #16]
   147d0:	str	r2, [sp, #12]
   147d4:	movne	r0, r2
   147d8:	str	r1, [sp, #8]
   147dc:	str	r1, [sp, #20]
   147e0:	movne	r2, #2
   147e4:	beq	14710 <flatcc_builder_end_struct@@Base+0x98>
   147e8:	b	146e8 <flatcc_builder_end_struct@@Base+0x70>
   147ec:	bl	123a4 <__assert_fail@plt+0x58>
   147f0:	ldr	r3, [pc, #56]	; 14830 <flatcc_builder_end_struct@@Base+0x1b8>
   147f4:	ldr	r2, [pc, #56]	; 14834 <flatcc_builder_end_struct@@Base+0x1bc>
   147f8:	ldr	r1, [pc, #56]	; 14838 <flatcc_builder_end_struct@@Base+0x1c0>
   147fc:	ldr	r0, [pc, #56]	; 1483c <flatcc_builder_end_struct@@Base+0x1c4>
   14800:	bl	1234c <__assert_fail@plt>
   14804:	ldr	r3, [pc, #52]	; 14840 <flatcc_builder_end_struct@@Base+0x1c8>
   14808:	ldr	r2, [pc, #52]	; 14844 <flatcc_builder_end_struct@@Base+0x1cc>
   1480c:	ldr	r1, [pc, #36]	; 14838 <flatcc_builder_end_struct@@Base+0x1c0>
   14810:	ldr	r0, [pc, #48]	; 14848 <flatcc_builder_end_struct@@Base+0x1d0>
   14814:	bl	1234c <__assert_fail@plt>
   14818:	ldr	r3, [pc, #44]	; 1484c <flatcc_builder_end_struct@@Base+0x1d4>
   1481c:	mov	r2, #872	; 0x368
   14820:	ldr	r1, [pc, #16]	; 14838 <flatcc_builder_end_struct@@Base+0x1c0>
   14824:	ldr	r0, [pc, #36]	; 14850 <flatcc_builder_end_struct@@Base+0x1d8>
   14828:	bl	1234c <__assert_fail@plt>
   1482c:	andeq	sl, r1, r4, lsr #18
   14830:	andeq	sl, r1, r8, lsr #17
   14834:	andeq	r0, r0, fp, lsl #5
   14838:	ldrdeq	sl, [r1], -ip
   1483c:	muleq	r1, ip, r0
   14840:			; <UNDEFINED> instruction: 0x0001abb4
   14844:	andeq	r0, r0, pc, lsl #6
   14848:	andeq	fp, r1, r4, ror #1
   1484c:	strdeq	sl, [r1], -r0
   14850:	andeq	fp, r1, ip, lsl r1

00014854 <flatcc_builder_extend_vector@@Base>:
   14854:	ldr	r3, [r0, #32]
   14858:	push	{r4, r5, r6, r7, lr}
   1485c:	mov	r5, r0
   14860:	ldr	r0, [r3, #20]
   14864:	ldr	r4, [r3, #24]
   14868:	add	ip, r1, r0
   1486c:	cmp	r0, ip
   14870:	movls	r0, #0
   14874:	movhi	r0, #1
   14878:	cmp	r4, ip
   1487c:	movcs	r4, r0
   14880:	orrcc	r4, r0, #1
   14884:	cmp	r4, #0
   14888:	sub	sp, sp, #12
   1488c:	bne	14928 <flatcc_builder_extend_vector@@Base+0xd4>
   14890:	ldr	r2, [r3, #16]
   14894:	str	ip, [r3, #20]
   14898:	ldr	r6, [r5, #20]
   1489c:	ldr	r3, [r5, #24]
   148a0:	mla	r1, r2, r1, r6
   148a4:	cmp	r1, r3
   148a8:	str	r1, [r5, #20]
   148ac:	bcs	148c0 <flatcc_builder_extend_vector@@Base+0x6c>
   148b0:	ldr	r0, [r5, #16]
   148b4:	add	r0, r0, r6
   148b8:	add	sp, sp, #12
   148bc:	pop	{r4, r5, r6, r7, pc}
   148c0:	ldr	r2, [r5, #28]
   148c4:	mov	r3, #1
   148c8:	add	r2, r2, #1
   148cc:	ldr	r0, [r5, #40]	; 0x28
   148d0:	add	r2, r2, r1
   148d4:	str	r3, [sp]
   148d8:	add	r1, r5, #60	; 0x3c
   148dc:	ldr	r7, [r5, #48]	; 0x30
   148e0:	blx	r7
   148e4:	cmp	r0, #0
   148e8:	bne	14920 <flatcc_builder_extend_vector@@Base+0xcc>
   148ec:	ldr	r2, [r5, #28]
   148f0:	ldr	r3, [r5, #64]	; 0x40
   148f4:	ldr	r0, [r5, #60]	; 0x3c
   148f8:	sub	r3, r3, r2
   148fc:	cmn	r3, #4
   14900:	mvnhi	r3, #3
   14904:	str	r3, [r5, #24]
   14908:	ldr	r3, [r5, #32]
   1490c:	add	r0, r0, r2
   14910:	mvn	r2, #3
   14914:	str	r0, [r5, #16]
   14918:	str	r2, [r3, #4]
   1491c:	b	148b4 <flatcc_builder_extend_vector@@Base+0x60>
   14920:	mov	r0, r4
   14924:	b	148b8 <flatcc_builder_extend_vector@@Base+0x64>
   14928:	bl	123cc <__assert_fail@plt+0x80>

0001492c <flatcc_builder_vector_push@@Base>:
   1492c:	ldr	r3, [r0, #32]
   14930:	push	{r4, r5, r6, r7, r8, lr}
   14934:	sub	sp, sp, #8
   14938:	ldrh	r2, [r3, #14]
   1493c:	cmp	r2, #4
   14940:	bne	14a28 <flatcc_builder_vector_push@@Base+0xfc>
   14944:	mov	r5, r1
   14948:	ldr	r2, [r3, #20]
   1494c:	ldr	r1, [r3, #24]
   14950:	cmp	r2, r1
   14954:	bhi	14a14 <flatcc_builder_vector_push@@Base+0xe8>
   14958:	add	r2, r2, #1
   1495c:	str	r2, [r3, #20]
   14960:	ldr	r7, [r3, #16]
   14964:	ldr	r6, [r0, #20]
   14968:	ldr	r3, [r0, #24]
   1496c:	add	r1, r7, r6
   14970:	cmp	r1, r3
   14974:	mov	r4, r0
   14978:	str	r1, [r0, #20]
   1497c:	bcs	149ac <flatcc_builder_vector_push@@Base+0x80>
   14980:	ldr	r3, [r0, #16]
   14984:	adds	r3, r3, r6
   14988:	beq	149a0 <flatcc_builder_vector_push@@Base+0x74>
   1498c:	mov	r0, r3
   14990:	mov	r2, r7
   14994:	mov	r1, r5
   14998:	bl	122bc <memcpy@plt>
   1499c:	mov	r3, r0
   149a0:	mov	r0, r3
   149a4:	add	sp, sp, #8
   149a8:	pop	{r4, r5, r6, r7, r8, pc}
   149ac:	ldr	r2, [r0, #28]
   149b0:	mov	r3, #1
   149b4:	add	r2, r2, #1
   149b8:	ldr	r0, [r0, #40]	; 0x28
   149bc:	add	r2, r2, r1
   149c0:	str	r3, [sp]
   149c4:	add	r1, r4, #60	; 0x3c
   149c8:	ldr	r8, [r4, #48]	; 0x30
   149cc:	blx	r8
   149d0:	cmp	r0, #0
   149d4:	bne	14a0c <flatcc_builder_vector_push@@Base+0xe0>
   149d8:	ldr	r1, [r4, #28]
   149dc:	ldr	r2, [r4, #64]	; 0x40
   149e0:	ldr	r3, [r4, #60]	; 0x3c
   149e4:	sub	r2, r2, r1
   149e8:	cmn	r2, #4
   149ec:	mvnhi	r2, #3
   149f0:	str	r2, [r4, #24]
   149f4:	ldr	r2, [r4, #32]
   149f8:	add	r3, r3, r1
   149fc:	mvn	r1, #3
   14a00:	str	r3, [r4, #16]
   14a04:	str	r1, [r2, #4]
   14a08:	b	14984 <flatcc_builder_vector_push@@Base+0x58>
   14a0c:	mov	r3, #0
   14a10:	b	149a0 <flatcc_builder_vector_push@@Base+0x74>
   14a14:	ldr	r3, [pc, #32]	; 14a3c <flatcc_builder_vector_push@@Base+0x110>
   14a18:	mov	r2, #908	; 0x38c
   14a1c:	ldr	r1, [pc, #28]	; 14a40 <flatcc_builder_vector_push@@Base+0x114>
   14a20:	ldr	r0, [pc, #28]	; 14a44 <flatcc_builder_vector_push@@Base+0x118>
   14a24:	bl	1234c <__assert_fail@plt>
   14a28:	ldr	r3, [pc, #12]	; 14a3c <flatcc_builder_vector_push@@Base+0x110>
   14a2c:	ldr	r2, [pc, #20]	; 14a48 <flatcc_builder_vector_push@@Base+0x11c>
   14a30:	ldr	r1, [pc, #8]	; 14a40 <flatcc_builder_vector_push@@Base+0x114>
   14a34:	ldr	r0, [pc, #16]	; 14a4c <flatcc_builder_vector_push@@Base+0x120>
   14a38:	bl	1234c <__assert_fail@plt>
   14a3c:	andeq	sl, r1, ip, lsl #24
   14a40:	ldrdeq	sl, [r1], -ip
   14a44:	andeq	fp, r1, r4, ror r1
   14a48:	andeq	r0, r0, fp, lsl #7
   14a4c:	andeq	fp, r1, r8, asr #2

00014a50 <flatcc_builder_append_vector@@Base>:
   14a50:	push	{r4, r5, r6, r7, r8, r9, lr}
   14a54:	mov	r5, r1
   14a58:	ldr	r1, [r0, #32]
   14a5c:	sub	sp, sp, #12
   14a60:	ldrh	r3, [r1, #14]
   14a64:	cmp	r3, #4
   14a68:	bne	14b58 <flatcc_builder_append_vector@@Base+0x108>
   14a6c:	ldr	r3, [r1, #20]
   14a70:	mov	r6, r0
   14a74:	add	r0, r2, r3
   14a78:	cmp	r3, r0
   14a7c:	ldr	r4, [r1, #24]
   14a80:	movls	r3, #0
   14a84:	movhi	r3, #1
   14a88:	cmp	r4, r0
   14a8c:	movcs	r4, r3
   14a90:	orrcc	r4, r3, #1
   14a94:	cmp	r4, #0
   14a98:	bne	14b54 <flatcc_builder_append_vector@@Base+0x104>
   14a9c:	ldr	r7, [r1, #16]
   14aa0:	str	r0, [r1, #20]
   14aa4:	ldr	r8, [r6, #20]
   14aa8:	mul	r7, r7, r2
   14aac:	ldr	r3, [r6, #24]
   14ab0:	add	r1, r7, r8
   14ab4:	cmp	r1, r3
   14ab8:	str	r1, [r6, #20]
   14abc:	bcs	14aec <flatcc_builder_append_vector@@Base+0x9c>
   14ac0:	ldr	r3, [r6, #16]
   14ac4:	adds	r3, r3, r8
   14ac8:	beq	14ae0 <flatcc_builder_append_vector@@Base+0x90>
   14acc:	mov	r0, r3
   14ad0:	mov	r2, r7
   14ad4:	mov	r1, r5
   14ad8:	bl	122bc <memcpy@plt>
   14adc:	mov	r3, r0
   14ae0:	mov	r0, r3
   14ae4:	add	sp, sp, #12
   14ae8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14aec:	ldr	r2, [r6, #28]
   14af0:	mov	r3, #1
   14af4:	add	r2, r2, #1
   14af8:	ldr	r0, [r6, #40]	; 0x28
   14afc:	add	r2, r2, r1
   14b00:	str	r3, [sp]
   14b04:	add	r1, r6, #60	; 0x3c
   14b08:	ldr	r9, [r6, #48]	; 0x30
   14b0c:	blx	r9
   14b10:	cmp	r0, #0
   14b14:	bne	14b4c <flatcc_builder_append_vector@@Base+0xfc>
   14b18:	ldr	r1, [r6, #28]
   14b1c:	ldr	r2, [r6, #64]	; 0x40
   14b20:	ldr	r3, [r6, #60]	; 0x3c
   14b24:	sub	r2, r2, r1
   14b28:	cmn	r2, #4
   14b2c:	mvnhi	r2, #3
   14b30:	str	r2, [r6, #24]
   14b34:	ldr	r2, [r6, #32]
   14b38:	add	r3, r3, r1
   14b3c:	mvn	r1, #3
   14b40:	str	r3, [r6, #16]
   14b44:	str	r1, [r2, #4]
   14b48:	b	14ac4 <flatcc_builder_append_vector@@Base+0x74>
   14b4c:	mov	r3, r4
   14b50:	b	14ae0 <flatcc_builder_append_vector@@Base+0x90>
   14b54:	bl	123cc <__assert_fail@plt+0x80>
   14b58:	ldr	r3, [pc, #12]	; 14b6c <flatcc_builder_append_vector@@Base+0x11c>
   14b5c:	ldr	r2, [pc, #12]	; 14b70 <flatcc_builder_append_vector@@Base+0x120>
   14b60:	ldr	r1, [pc, #12]	; 14b74 <flatcc_builder_append_vector@@Base+0x124>
   14b64:	ldr	r0, [pc, #12]	; 14b78 <flatcc_builder_append_vector@@Base+0x128>
   14b68:	bl	1234c <__assert_fail@plt>
   14b6c:	andeq	sl, r1, r8, lsr #24
   14b70:	muleq	r0, r3, r3
   14b74:	ldrdeq	sl, [r1], -ip
   14b78:	andeq	fp, r1, r8, asr #2

00014b7c <flatcc_builder_extend_offset_vector@@Base>:
   14b7c:	ldr	ip, [r0, #32]
   14b80:	push	{r4, r5, r6, r7, lr}
   14b84:	mov	r4, r0
   14b88:	ldr	r3, [ip, #20]
   14b8c:	sub	sp, sp, #12
   14b90:	adds	r3, r1, r3
   14b94:	movcs	r2, #1
   14b98:	movcc	r2, #0
   14b9c:	cmn	r3, #-1073741823	; 0xc0000001
   14ba0:	movls	r0, #0
   14ba4:	movhi	r0, #1
   14ba8:	orrs	r5, r2, r0
   14bac:	bne	14c44 <flatcc_builder_extend_offset_vector@@Base+0xc8>
   14bb0:	str	r3, [ip, #20]
   14bb4:	ldr	r6, [r4, #20]
   14bb8:	ldr	r3, [r4, #24]
   14bbc:	add	r1, r6, r1, lsl #2
   14bc0:	cmp	r1, r3
   14bc4:	str	r1, [r4, #20]
   14bc8:	bcs	14bdc <flatcc_builder_extend_offset_vector@@Base+0x60>
   14bcc:	ldr	r0, [r4, #16]
   14bd0:	add	r0, r0, r6
   14bd4:	add	sp, sp, #12
   14bd8:	pop	{r4, r5, r6, r7, pc}
   14bdc:	ldr	r2, [r4, #28]
   14be0:	mov	r3, #1
   14be4:	add	r2, r2, #1
   14be8:	ldr	r0, [r4, #40]	; 0x28
   14bec:	add	r2, r2, r1
   14bf0:	str	r3, [sp]
   14bf4:	add	r1, r4, #60	; 0x3c
   14bf8:	ldr	r7, [r4, #48]	; 0x30
   14bfc:	blx	r7
   14c00:	cmp	r0, #0
   14c04:	bne	14c3c <flatcc_builder_extend_offset_vector@@Base+0xc0>
   14c08:	ldr	r2, [r4, #28]
   14c0c:	ldr	r3, [r4, #64]	; 0x40
   14c10:	ldr	r0, [r4, #60]	; 0x3c
   14c14:	sub	r3, r3, r2
   14c18:	cmn	r3, #4
   14c1c:	mvnhi	r3, #3
   14c20:	str	r3, [r4, #24]
   14c24:	ldr	r3, [r4, #32]
   14c28:	add	r0, r0, r2
   14c2c:	mvn	r2, #3
   14c30:	str	r0, [r4, #16]
   14c34:	str	r2, [r3, #4]
   14c38:	b	14bd0 <flatcc_builder_extend_offset_vector@@Base+0x54>
   14c3c:	mov	r0, r5
   14c40:	b	14bd4 <flatcc_builder_extend_offset_vector@@Base+0x58>
   14c44:	bl	123cc <__assert_fail@plt+0x80>

00014c48 <flatcc_builder_offset_vector_push@@Base>:
   14c48:	ldr	r2, [r0, #32]
   14c4c:	push	{r4, r5, r6, r7, lr}
   14c50:	sub	sp, sp, #12
   14c54:	ldrh	r3, [r2, #14]
   14c58:	cmp	r3, #5
   14c5c:	bne	14d14 <flatcc_builder_offset_vector_push@@Base+0xcc>
   14c60:	ldr	r3, [r2, #20]
   14c64:	cmn	r3, #-1073741823	; 0xc0000001
   14c68:	beq	14d08 <flatcc_builder_offset_vector_push@@Base+0xc0>
   14c6c:	add	r3, r3, #1
   14c70:	str	r3, [r2, #20]
   14c74:	ldr	r5, [r0, #20]
   14c78:	ldr	r2, [r0, #24]
   14c7c:	add	r3, r5, #4
   14c80:	cmp	r3, r2
   14c84:	mov	r4, r0
   14c88:	mov	r6, r1
   14c8c:	str	r3, [r0, #20]
   14c90:	bcs	14ca8 <flatcc_builder_offset_vector_push@@Base+0x60>
   14c94:	ldr	r3, [r0, #16]
   14c98:	adds	r0, r3, r5
   14c9c:	strne	r6, [r3, r5]
   14ca0:	add	sp, sp, #12
   14ca4:	pop	{r4, r5, r6, r7, pc}
   14ca8:	ldr	r2, [r0, #28]
   14cac:	mov	r3, #1
   14cb0:	add	r2, r5, r2
   14cb4:	ldr	r0, [r0, #40]	; 0x28
   14cb8:	add	r2, r2, #5
   14cbc:	str	r3, [sp]
   14cc0:	add	r1, r4, #60	; 0x3c
   14cc4:	ldr	r7, [r4, #48]	; 0x30
   14cc8:	blx	r7
   14ccc:	cmp	r0, #0
   14cd0:	bne	14d08 <flatcc_builder_offset_vector_push@@Base+0xc0>
   14cd4:	ldr	r1, [r4, #28]
   14cd8:	ldr	r2, [r4, #64]	; 0x40
   14cdc:	ldr	r3, [r4, #60]	; 0x3c
   14ce0:	sub	r2, r2, r1
   14ce4:	cmn	r2, #4
   14ce8:	mvnhi	r2, #3
   14cec:	str	r2, [r4, #24]
   14cf0:	ldr	r2, [r4, #32]
   14cf4:	add	r3, r3, r1
   14cf8:	mvn	r1, #3
   14cfc:	str	r3, [r4, #16]
   14d00:	str	r1, [r2, #4]
   14d04:	b	14c98 <flatcc_builder_offset_vector_push@@Base+0x50>
   14d08:	mov	r0, #0
   14d0c:	add	sp, sp, #12
   14d10:	pop	{r4, r5, r6, r7, pc}
   14d14:	ldr	r3, [pc, #12]	; 14d28 <flatcc_builder_offset_vector_push@@Base+0xe0>
   14d18:	ldr	r2, [pc, #12]	; 14d2c <flatcc_builder_offset_vector_push@@Base+0xe4>
   14d1c:	ldr	r1, [pc, #12]	; 14d30 <flatcc_builder_offset_vector_push@@Base+0xe8>
   14d20:	ldr	r0, [pc, #12]	; 14d34 <flatcc_builder_offset_vector_push@@Base+0xec>
   14d24:	bl	1234c <__assert_fail@plt>
   14d28:	andeq	sl, r1, r8, asr #24
   14d2c:	andeq	r0, r0, r6, lsr #7
   14d30:	ldrdeq	sl, [r1], -ip
   14d34:			; <UNDEFINED> instruction: 0x0001b1b4

00014d38 <flatcc_builder_append_offset_vector@@Base>:
   14d38:	push	{r4, r5, r6, r7, r8, r9, lr}
   14d3c:	mov	r5, r0
   14d40:	ldr	r0, [r0, #32]
   14d44:	sub	sp, sp, #12
   14d48:	ldrh	r3, [r0, #14]
   14d4c:	cmp	r3, #5
   14d50:	bne	14e34 <flatcc_builder_append_offset_vector@@Base+0xfc>
   14d54:	mov	r7, r1
   14d58:	ldr	r1, [r0, #20]
   14d5c:	adds	r1, r2, r1
   14d60:	movcs	r4, #1
   14d64:	movcc	r4, #0
   14d68:	cmn	r1, #-1073741823	; 0xc0000001
   14d6c:	movls	r3, #0
   14d70:	movhi	r3, #1
   14d74:	orrs	r4, r4, r3
   14d78:	bne	14e30 <flatcc_builder_append_offset_vector@@Base+0xf8>
   14d7c:	str	r1, [r0, #20]
   14d80:	ldr	r8, [r5, #20]
   14d84:	lsl	r6, r2, #2
   14d88:	ldr	r3, [r5, #24]
   14d8c:	add	r1, r6, r8
   14d90:	cmp	r1, r3
   14d94:	str	r1, [r5, #20]
   14d98:	bcs	14dc8 <flatcc_builder_append_offset_vector@@Base+0x90>
   14d9c:	ldr	r3, [r5, #16]
   14da0:	adds	r3, r3, r8
   14da4:	beq	14dbc <flatcc_builder_append_offset_vector@@Base+0x84>
   14da8:	mov	r0, r3
   14dac:	mov	r2, r6
   14db0:	mov	r1, r7
   14db4:	bl	122bc <memcpy@plt>
   14db8:	mov	r3, r0
   14dbc:	mov	r0, r3
   14dc0:	add	sp, sp, #12
   14dc4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14dc8:	ldr	r2, [r5, #28]
   14dcc:	mov	r3, #1
   14dd0:	add	r2, r2, #1
   14dd4:	ldr	r0, [r5, #40]	; 0x28
   14dd8:	add	r2, r2, r1
   14ddc:	str	r3, [sp]
   14de0:	add	r1, r5, #60	; 0x3c
   14de4:	ldr	r9, [r5, #48]	; 0x30
   14de8:	blx	r9
   14dec:	cmp	r0, #0
   14df0:	bne	14e28 <flatcc_builder_append_offset_vector@@Base+0xf0>
   14df4:	ldr	r1, [r5, #28]
   14df8:	ldr	r2, [r5, #64]	; 0x40
   14dfc:	ldr	r3, [r5, #60]	; 0x3c
   14e00:	sub	r2, r2, r1
   14e04:	cmn	r2, #4
   14e08:	mvnhi	r2, #3
   14e0c:	str	r2, [r5, #24]
   14e10:	ldr	r2, [r5, #32]
   14e14:	add	r3, r3, r1
   14e18:	mvn	r1, #3
   14e1c:	str	r3, [r5, #16]
   14e20:	str	r1, [r2, #4]
   14e24:	b	14da0 <flatcc_builder_append_offset_vector@@Base+0x68>
   14e28:	mov	r3, r4
   14e2c:	b	14dbc <flatcc_builder_append_offset_vector@@Base+0x84>
   14e30:	bl	123cc <__assert_fail@plt+0x80>
   14e34:	ldr	r3, [pc, #12]	; 14e48 <flatcc_builder_append_offset_vector@@Base+0x110>
   14e38:	mov	r2, #948	; 0x3b4
   14e3c:	ldr	r1, [pc, #8]	; 14e4c <flatcc_builder_append_offset_vector@@Base+0x114>
   14e40:	ldr	r0, [pc, #8]	; 14e50 <flatcc_builder_append_offset_vector@@Base+0x118>
   14e44:	bl	1234c <__assert_fail@plt>
   14e48:	andeq	sl, r1, ip, ror #24
   14e4c:	ldrdeq	sl, [r1], -ip
   14e50:			; <UNDEFINED> instruction: 0x0001b1b4

00014e54 <flatcc_builder_extend_string@@Base>:
   14e54:	ldr	r2, [r0, #32]
   14e58:	push	{r4, r5, r6, lr}
   14e5c:	sub	sp, sp, #8
   14e60:	ldrh	r3, [r2, #14]
   14e64:	cmp	r3, #6
   14e68:	bne	14f14 <flatcc_builder_extend_string@@Base+0xc0>
   14e6c:	ldr	r3, [r2, #20]
   14e70:	adds	r3, r1, r3
   14e74:	bcs	14f10 <flatcc_builder_extend_string@@Base+0xbc>
   14e78:	str	r3, [r2, #20]
   14e7c:	ldr	r5, [r0, #20]
   14e80:	ldr	r3, [r0, #24]
   14e84:	add	r1, r1, r5
   14e88:	cmp	r1, r3
   14e8c:	mov	r4, r0
   14e90:	str	r1, [r0, #20]
   14e94:	bcs	14ea8 <flatcc_builder_extend_string@@Base+0x54>
   14e98:	ldr	r0, [r0, #16]
   14e9c:	add	r0, r0, r5
   14ea0:	add	sp, sp, #8
   14ea4:	pop	{r4, r5, r6, pc}
   14ea8:	ldr	r2, [r0, #28]
   14eac:	mov	r3, #1
   14eb0:	add	r2, r2, #1
   14eb4:	ldr	r0, [r0, #40]	; 0x28
   14eb8:	add	r2, r2, r1
   14ebc:	str	r3, [sp]
   14ec0:	add	r1, r4, #60	; 0x3c
   14ec4:	ldr	r6, [r4, #48]	; 0x30
   14ec8:	blx	r6
   14ecc:	cmp	r0, #0
   14ed0:	bne	14f08 <flatcc_builder_extend_string@@Base+0xb4>
   14ed4:	ldr	r2, [r4, #28]
   14ed8:	ldr	r3, [r4, #64]	; 0x40
   14edc:	ldr	r0, [r4, #60]	; 0x3c
   14ee0:	sub	r3, r3, r2
   14ee4:	cmn	r3, #4
   14ee8:	mvnhi	r3, #3
   14eec:	str	r3, [r4, #24]
   14ef0:	ldr	r3, [r4, #32]
   14ef4:	add	r0, r0, r2
   14ef8:	mvn	r2, #3
   14efc:	str	r0, [r4, #16]
   14f00:	str	r2, [r3, #4]
   14f04:	b	14e9c <flatcc_builder_extend_string@@Base+0x48>
   14f08:	mov	r0, #0
   14f0c:	b	14ea0 <flatcc_builder_extend_string@@Base+0x4c>
   14f10:	bl	123cc <__assert_fail@plt+0x80>
   14f14:	ldr	r3, [pc, #12]	; 14f28 <flatcc_builder_extend_string@@Base+0xd4>
   14f18:	ldr	r2, [pc, #12]	; 14f2c <flatcc_builder_extend_string@@Base+0xd8>
   14f1c:	ldr	r1, [pc, #12]	; 14f30 <flatcc_builder_extend_string@@Base+0xdc>
   14f20:	ldr	r0, [pc, #12]	; 14f34 <flatcc_builder_extend_string@@Base+0xe0>
   14f24:	bl	1234c <__assert_fail@plt>
   14f28:	muleq	r1, r0, ip
   14f2c:			; <UNDEFINED> instruction: 0x000003bd
   14f30:	ldrdeq	sl, [r1], -ip
   14f34:	andeq	fp, r1, ip, asr r0

00014f38 <flatcc_builder_append_string@@Base>:
   14f38:	push	{r4, r5, r6, r7, r8, lr}
   14f3c:	mov	r6, r1
   14f40:	ldr	r1, [r0, #32]
   14f44:	sub	sp, sp, #8
   14f48:	ldrh	r3, [r1, #14]
   14f4c:	cmp	r3, #6
   14f50:	bne	1501c <flatcc_builder_append_string@@Base+0xe4>
   14f54:	ldr	r3, [r1, #20]
   14f58:	mov	r5, r2
   14f5c:	adds	r3, r2, r3
   14f60:	bcs	15018 <flatcc_builder_append_string@@Base+0xe0>
   14f64:	str	r3, [r1, #20]
   14f68:	ldr	r7, [r0, #20]
   14f6c:	ldr	r3, [r0, #24]
   14f70:	add	r1, r2, r7
   14f74:	cmp	r1, r3
   14f78:	mov	r4, r0
   14f7c:	str	r1, [r0, #20]
   14f80:	bcs	14fb0 <flatcc_builder_append_string@@Base+0x78>
   14f84:	ldr	r3, [r0, #16]
   14f88:	adds	r3, r3, r7
   14f8c:	beq	14fa4 <flatcc_builder_append_string@@Base+0x6c>
   14f90:	mov	r0, r3
   14f94:	mov	r2, r5
   14f98:	mov	r1, r6
   14f9c:	bl	122bc <memcpy@plt>
   14fa0:	mov	r3, r0
   14fa4:	mov	r0, r3
   14fa8:	add	sp, sp, #8
   14fac:	pop	{r4, r5, r6, r7, r8, pc}
   14fb0:	ldr	r2, [r0, #28]
   14fb4:	mov	r3, #1
   14fb8:	add	r2, r2, #1
   14fbc:	ldr	r0, [r0, #40]	; 0x28
   14fc0:	add	r2, r2, r1
   14fc4:	str	r3, [sp]
   14fc8:	add	r1, r4, #60	; 0x3c
   14fcc:	ldr	r8, [r4, #48]	; 0x30
   14fd0:	blx	r8
   14fd4:	cmp	r0, #0
   14fd8:	bne	15010 <flatcc_builder_append_string@@Base+0xd8>
   14fdc:	ldr	r1, [r4, #28]
   14fe0:	ldr	r2, [r4, #64]	; 0x40
   14fe4:	ldr	r3, [r4, #60]	; 0x3c
   14fe8:	sub	r2, r2, r1
   14fec:	cmn	r2, #4
   14ff0:	mvnhi	r2, #3
   14ff4:	str	r2, [r4, #24]
   14ff8:	ldr	r2, [r4, #32]
   14ffc:	add	r3, r3, r1
   15000:	mvn	r1, #3
   15004:	str	r3, [r4, #16]
   15008:	str	r1, [r2, #4]
   1500c:	b	14f88 <flatcc_builder_append_string@@Base+0x50>
   15010:	mov	r3, #0
   15014:	b	14fa4 <flatcc_builder_append_string@@Base+0x6c>
   15018:	bl	123cc <__assert_fail@plt+0x80>
   1501c:	bl	12418 <__assert_fail@plt+0xcc>

00015020 <flatcc_builder_append_string_str@@Base>:
   15020:	push	{r4, r5, r6, r7, r8, lr}
   15024:	mov	r4, r0
   15028:	sub	sp, sp, #8
   1502c:	mov	r0, r1
   15030:	mov	r6, r1
   15034:	bl	12304 <strlen@plt>
   15038:	ldr	r2, [r4, #32]
   1503c:	ldrh	r3, [r2, #14]
   15040:	cmp	r3, #6
   15044:	bne	1510c <flatcc_builder_append_string_str@@Base+0xec>
   15048:	ldr	r3, [r2, #20]
   1504c:	mov	r5, r0
   15050:	adds	r3, r0, r3
   15054:	bcs	15108 <flatcc_builder_append_string_str@@Base+0xe8>
   15058:	str	r3, [r2, #20]
   1505c:	ldr	r7, [r4, #20]
   15060:	ldr	r3, [r4, #24]
   15064:	add	r1, r0, r7
   15068:	cmp	r1, r3
   1506c:	str	r1, [r4, #20]
   15070:	bcs	150a0 <flatcc_builder_append_string_str@@Base+0x80>
   15074:	ldr	r3, [r4, #16]
   15078:	adds	r3, r3, r7
   1507c:	beq	15094 <flatcc_builder_append_string_str@@Base+0x74>
   15080:	mov	r0, r3
   15084:	mov	r2, r5
   15088:	mov	r1, r6
   1508c:	bl	122bc <memcpy@plt>
   15090:	mov	r3, r0
   15094:	mov	r0, r3
   15098:	add	sp, sp, #8
   1509c:	pop	{r4, r5, r6, r7, r8, pc}
   150a0:	ldr	r2, [r4, #28]
   150a4:	mov	r3, #1
   150a8:	add	r2, r2, #1
   150ac:	ldr	r0, [r4, #40]	; 0x28
   150b0:	add	r2, r2, r1
   150b4:	str	r3, [sp]
   150b8:	add	r1, r4, #60	; 0x3c
   150bc:	ldr	r8, [r4, #48]	; 0x30
   150c0:	blx	r8
   150c4:	cmp	r0, #0
   150c8:	bne	15100 <flatcc_builder_append_string_str@@Base+0xe0>
   150cc:	ldr	r1, [r4, #28]
   150d0:	ldr	r2, [r4, #64]	; 0x40
   150d4:	ldr	r3, [r4, #60]	; 0x3c
   150d8:	sub	r2, r2, r1
   150dc:	cmn	r2, #4
   150e0:	mvnhi	r2, #3
   150e4:	str	r2, [r4, #24]
   150e8:	ldr	r2, [r4, #32]
   150ec:	add	r3, r3, r1
   150f0:	mvn	r1, #3
   150f4:	str	r3, [r4, #16]
   150f8:	str	r1, [r2, #4]
   150fc:	b	15078 <flatcc_builder_append_string_str@@Base+0x58>
   15100:	mov	r3, #0
   15104:	b	15094 <flatcc_builder_append_string_str@@Base+0x74>
   15108:	bl	123cc <__assert_fail@plt+0x80>
   1510c:	bl	12418 <__assert_fail@plt+0xcc>

00015110 <flatcc_builder_append_string_strn@@Base>:
   15110:	push	{r4, r5, r6, r7, r8, lr}
   15114:	mov	r6, r1
   15118:	mov	r4, r0
   1511c:	sub	sp, sp, #8
   15120:	mov	r1, #0
   15124:	mov	r0, r6
   15128:	mov	r5, r2
   1512c:	bl	12334 <memchr@plt>
   15130:	ldr	r2, [r4, #32]
   15134:	ldrh	r3, [r2, #14]
   15138:	cmp	r0, #0
   1513c:	subne	r5, r0, r6
   15140:	cmp	r3, #6
   15144:	bne	15208 <flatcc_builder_append_string_strn@@Base+0xf8>
   15148:	ldr	r3, [r2, #20]
   1514c:	adds	r3, r5, r3
   15150:	bcs	15204 <flatcc_builder_append_string_strn@@Base+0xf4>
   15154:	str	r3, [r2, #20]
   15158:	ldr	r7, [r4, #20]
   1515c:	ldr	r3, [r4, #24]
   15160:	add	r1, r5, r7
   15164:	cmp	r1, r3
   15168:	str	r1, [r4, #20]
   1516c:	bcs	1519c <flatcc_builder_append_string_strn@@Base+0x8c>
   15170:	ldr	r3, [r4, #16]
   15174:	adds	r3, r3, r7
   15178:	beq	15190 <flatcc_builder_append_string_strn@@Base+0x80>
   1517c:	mov	r0, r3
   15180:	mov	r2, r5
   15184:	mov	r1, r6
   15188:	bl	122bc <memcpy@plt>
   1518c:	mov	r3, r0
   15190:	mov	r0, r3
   15194:	add	sp, sp, #8
   15198:	pop	{r4, r5, r6, r7, r8, pc}
   1519c:	ldr	r2, [r4, #28]
   151a0:	mov	r3, #1
   151a4:	add	r2, r2, #1
   151a8:	ldr	r0, [r4, #40]	; 0x28
   151ac:	add	r2, r2, r1
   151b0:	str	r3, [sp]
   151b4:	add	r1, r4, #60	; 0x3c
   151b8:	ldr	r8, [r4, #48]	; 0x30
   151bc:	blx	r8
   151c0:	cmp	r0, #0
   151c4:	bne	151fc <flatcc_builder_append_string_strn@@Base+0xec>
   151c8:	ldr	r1, [r4, #28]
   151cc:	ldr	r2, [r4, #64]	; 0x40
   151d0:	ldr	r3, [r4, #60]	; 0x3c
   151d4:	sub	r2, r2, r1
   151d8:	cmn	r2, #4
   151dc:	mvnhi	r2, #3
   151e0:	str	r2, [r4, #24]
   151e4:	ldr	r2, [r4, #32]
   151e8:	add	r3, r3, r1
   151ec:	mvn	r1, #3
   151f0:	str	r3, [r4, #16]
   151f4:	str	r1, [r2, #4]
   151f8:	b	15174 <flatcc_builder_append_string_strn@@Base+0x64>
   151fc:	mov	r3, #0
   15200:	b	15190 <flatcc_builder_append_string_strn@@Base+0x80>
   15204:	bl	123cc <__assert_fail@plt+0x80>
   15208:	bl	12418 <__assert_fail@plt+0xcc>

0001520c <flatcc_builder_truncate_vector@@Base>:
   1520c:	ldr	r3, [r0, #32]
   15210:	push	{r4, lr}
   15214:	ldrh	r2, [r3, #14]
   15218:	cmp	r2, #4
   1521c:	bne	15260 <flatcc_builder_truncate_vector@@Base+0x54>
   15220:	ldr	ip, [r3, #20]
   15224:	cmp	ip, r1
   15228:	bcc	15274 <flatcc_builder_truncate_vector@@Base+0x68>
   1522c:	ldr	r2, [r3, #16]
   15230:	sub	ip, ip, r1
   15234:	str	ip, [r3, #20]
   15238:	mul	r2, r2, r1
   1523c:	ldr	r3, [r0, #20]
   15240:	ldr	r1, [r0, #16]
   15244:	sub	r3, r3, r2
   15248:	str	r3, [r0, #20]
   1524c:	add	r0, r1, r3
   15250:	mov	r1, #0
   15254:	bl	1231c <memset@plt>
   15258:	mov	r0, #0
   1525c:	pop	{r4, pc}
   15260:	ldr	r3, [pc, #32]	; 15288 <flatcc_builder_truncate_vector@@Base+0x7c>
   15264:	ldr	r2, [pc, #32]	; 1528c <flatcc_builder_truncate_vector@@Base+0x80>
   15268:	ldr	r1, [pc, #32]	; 15290 <flatcc_builder_truncate_vector@@Base+0x84>
   1526c:	ldr	r0, [pc, #32]	; 15294 <flatcc_builder_truncate_vector@@Base+0x88>
   15270:	bl	1234c <__assert_fail@plt>
   15274:	ldr	r3, [pc, #12]	; 15288 <flatcc_builder_truncate_vector@@Base+0x7c>
   15278:	ldr	r2, [pc, #24]	; 15298 <flatcc_builder_truncate_vector@@Base+0x8c>
   1527c:	ldr	r1, [pc, #12]	; 15290 <flatcc_builder_truncate_vector@@Base+0x84>
   15280:	ldr	r0, [pc, #20]	; 1529c <flatcc_builder_truncate_vector@@Base+0x90>
   15284:	bl	1234c <__assert_fail@plt>
   15288:			; <UNDEFINED> instruction: 0x0001acb0
   1528c:	ldrdeq	r0, [r0], -r9
   15290:	ldrdeq	sl, [r1], -ip
   15294:	andeq	fp, r1, r8, asr #2
   15298:	ldrdeq	r0, [r0], -sl
   1529c:	andeq	fp, r1, r8, ror #3

000152a0 <flatcc_builder_truncate_offset_vector@@Base>:
   152a0:	ldr	r3, [r0, #32]
   152a4:	push	{r4, lr}
   152a8:	ldrh	r2, [r3, #14]
   152ac:	cmp	r2, #5
   152b0:	bne	152f4 <flatcc_builder_truncate_offset_vector@@Base+0x54>
   152b4:	ldr	ip, [r3, #20]
   152b8:	cmp	ip, r1
   152bc:	bcc	15308 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   152c0:	ldr	r2, [r3, #16]
   152c4:	sub	ip, ip, r1
   152c8:	str	ip, [r3, #20]
   152cc:	mul	r2, r2, r1
   152d0:	ldr	r3, [r0, #20]
   152d4:	ldr	r1, [r0, #16]
   152d8:	sub	r3, r3, r2
   152dc:	str	r3, [r0, #20]
   152e0:	add	r0, r1, r3
   152e4:	mov	r1, #0
   152e8:	bl	1231c <memset@plt>
   152ec:	mov	r0, #0
   152f0:	pop	{r4, pc}
   152f4:	ldr	r3, [pc, #32]	; 1531c <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   152f8:	ldr	r2, [pc, #32]	; 15320 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   152fc:	ldr	r1, [pc, #32]	; 15324 <flatcc_builder_truncate_offset_vector@@Base+0x84>
   15300:	ldr	r0, [pc, #32]	; 15328 <flatcc_builder_truncate_offset_vector@@Base+0x88>
   15304:	bl	1234c <__assert_fail@plt>
   15308:	ldr	r3, [pc, #12]	; 1531c <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   1530c:	ldr	r2, [pc, #24]	; 1532c <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   15310:	ldr	r1, [pc, #12]	; 15324 <flatcc_builder_truncate_offset_vector@@Base+0x84>
   15314:	ldr	r0, [pc, #20]	; 15330 <flatcc_builder_truncate_offset_vector@@Base+0x90>
   15318:	bl	1234c <__assert_fail@plt>
   1531c:	ldrdeq	sl, [r1], -r0
   15320:	andeq	r0, r0, r2, ror #7
   15324:	ldrdeq	sl, [r1], -ip
   15328:			; <UNDEFINED> instruction: 0x0001b1b4
   1532c:	andeq	r0, r0, r3, ror #7
   15330:	andeq	fp, r1, ip, lsl #4

00015334 <flatcc_builder_truncate_string@@Base>:
   15334:	ldr	r2, [r0, #32]
   15338:	push	{r4, lr}
   1533c:	ldrh	r3, [r2, #14]
   15340:	cmp	r3, #6
   15344:	bne	15384 <flatcc_builder_truncate_string@@Base+0x50>
   15348:	ldr	r3, [r2, #20]
   1534c:	cmp	r3, r1
   15350:	bcc	15398 <flatcc_builder_truncate_string@@Base+0x64>
   15354:	sub	r3, r3, r1
   15358:	str	r3, [r2, #20]
   1535c:	ldr	r3, [r0, #20]
   15360:	ldr	r2, [r0, #16]
   15364:	sub	r3, r3, r1
   15368:	str	r3, [r0, #20]
   1536c:	add	r0, r2, r3
   15370:	mov	r2, r1
   15374:	mov	r1, #0
   15378:	bl	1231c <memset@plt>
   1537c:	mov	r0, #0
   15380:	pop	{r4, pc}
   15384:	ldr	r3, [pc, #32]	; 153ac <flatcc_builder_truncate_string@@Base+0x78>
   15388:	ldr	r2, [pc, #32]	; 153b0 <flatcc_builder_truncate_string@@Base+0x7c>
   1538c:	ldr	r1, [pc, #32]	; 153b4 <flatcc_builder_truncate_string@@Base+0x80>
   15390:	ldr	r0, [pc, #32]	; 153b8 <flatcc_builder_truncate_string@@Base+0x84>
   15394:	bl	1234c <__assert_fail@plt>
   15398:	ldr	r3, [pc, #12]	; 153ac <flatcc_builder_truncate_string@@Base+0x78>
   1539c:	mov	r2, #1004	; 0x3ec
   153a0:	ldr	r1, [pc, #12]	; 153b4 <flatcc_builder_truncate_string@@Base+0x80>
   153a4:	ldr	r0, [pc, #16]	; 153bc <flatcc_builder_truncate_string@@Base+0x88>
   153a8:	bl	1234c <__assert_fail@plt>
   153ac:	strdeq	sl, [r1], -r8
   153b0:	andeq	r0, r0, fp, ror #7
   153b4:	ldrdeq	sl, [r1], -ip
   153b8:	andeq	fp, r1, ip, asr r0
   153bc:	andeq	fp, r1, r8, asr #4

000153c0 <flatcc_builder_start_vector@@Base>:
   153c0:	ldr	ip, [r0, #156]	; 0x9c
   153c4:	push	{r4, r5, r6, r7, r8, r9, lr}
   153c8:	cmp	r2, #4
   153cc:	ldr	lr, [r0, #160]	; 0xa0
   153d0:	mov	r4, r0
   153d4:	add	r0, ip, #1
   153d8:	movcs	r7, r2
   153dc:	movcc	r7, #4
   153e0:	cmp	r0, lr
   153e4:	sub	sp, sp, #12
   153e8:	mov	r6, r1
   153ec:	mov	r5, r3
   153f0:	str	r0, [r4, #156]	; 0x9c
   153f4:	ble	15464 <flatcc_builder_start_vector@@Base+0xa4>
   153f8:	ldr	r3, [r4, #176]	; 0xb0
   153fc:	cmp	r3, #0
   15400:	cmpgt	r0, r3
   15404:	movgt	r3, #1
   15408:	movle	r3, #0
   1540c:	bgt	1550c <flatcc_builder_start_vector@@Base+0x14c>
   15410:	add	ip, ip, ip, lsl #3
   15414:	ldr	r1, [r4, #88]	; 0x58
   15418:	lsl	r8, ip, #2
   1541c:	add	r2, r8, #36	; 0x24
   15420:	cmp	r2, r1
   15424:	bhi	154e8 <flatcc_builder_start_vector@@Base+0x128>
   15428:	ldr	r3, [r4, #84]	; 0x54
   1542c:	add	r3, r3, r8
   15430:	cmp	r3, #0
   15434:	str	r3, [r4, #32]
   15438:	beq	1550c <flatcc_builder_start_vector@@Base+0x14c>
   1543c:	ldr	r2, [r4, #88]	; 0x58
   15440:	ldr	r0, [pc, #204]	; 15514 <flatcc_builder_start_vector@@Base+0x154>
   15444:	ldr	r1, [r4, #176]	; 0xb0
   15448:	umull	r0, r2, r0, r2
   1544c:	lsr	r2, r2, #3
   15450:	cmp	r1, #0
   15454:	cmpgt	r2, r1
   15458:	str	r2, [r4, #160]	; 0xa0
   1545c:	strgt	r1, [r4, #160]	; 0xa0
   15460:	b	15470 <flatcc_builder_start_vector@@Base+0xb0>
   15464:	ldr	r3, [r4, #32]
   15468:	add	r3, r3, #36	; 0x24
   1546c:	str	r3, [r4, #32]
   15470:	ldr	r0, [r4, #20]
   15474:	ldr	r1, [r4, #28]
   15478:	ldrh	ip, [r4, #130]	; 0x82
   1547c:	add	r2, r0, r1
   15480:	add	r2, r2, #7
   15484:	str	r0, [r3, #8]
   15488:	bic	r2, r2, #7
   1548c:	mov	r0, #0
   15490:	strh	ip, [r3, #12]
   15494:	strh	r7, [r4, #130]	; 0x82
   15498:	str	r1, [r3]
   1549c:	str	r2, [r4, #28]
   154a0:	str	r0, [r4, #20]
   154a4:	str	r0, [r3, #20]
   154a8:	str	r6, [r3, #16]
   154ac:	str	r5, [r3, #24]
   154b0:	ldr	r1, [r4, #64]	; 0x40
   154b4:	ldr	ip, [r4, #60]	; 0x3c
   154b8:	sub	r1, r1, r2
   154bc:	mvn	lr, #3
   154c0:	cmp	r1, lr
   154c4:	add	r2, ip, r2
   154c8:	movhi	r1, lr
   154cc:	mov	ip, #4
   154d0:	strh	ip, [r3, #14]
   154d4:	str	r2, [r4, #16]
   154d8:	str	r1, [r4, #24]
   154dc:	str	lr, [r3, #4]
   154e0:	add	sp, sp, #12
   154e4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   154e8:	mov	r1, #4
   154ec:	ldr	r0, [r4, #40]	; 0x28
   154f0:	str	r1, [sp]
   154f4:	add	r1, r4, #84	; 0x54
   154f8:	ldr	r9, [r4, #48]	; 0x30
   154fc:	blx	r9
   15500:	cmp	r0, #0
   15504:	beq	15428 <flatcc_builder_start_vector@@Base+0x68>
   15508:	bl	12358 <__assert_fail@plt+0xc>
   1550c:	mvn	r0, #0
   15510:	b	154e0 <flatcc_builder_start_vector@@Base+0x120>
   15514:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00015518 <flatcc_builder_start_offset_vector@@Base>:
   15518:	ldr	r1, [r0, #156]	; 0x9c
   1551c:	ldr	r3, [r0, #160]	; 0xa0
   15520:	add	r2, r1, #1
   15524:	cmp	r2, r3
   15528:	push	{r4, r5, r6, lr}
   1552c:	mov	r4, r0
   15530:	sub	sp, sp, #8
   15534:	str	r2, [r0, #156]	; 0x9c
   15538:	ble	155a8 <flatcc_builder_start_offset_vector@@Base+0x90>
   1553c:	ldr	r3, [r0, #176]	; 0xb0
   15540:	cmp	r3, #0
   15544:	cmpgt	r2, r3
   15548:	movgt	r3, #1
   1554c:	movle	r3, #0
   15550:	bgt	15650 <flatcc_builder_start_offset_vector@@Base+0x138>
   15554:	add	r1, r1, r1, lsl #3
   15558:	ldr	r0, [r0, #88]	; 0x58
   1555c:	lsl	r5, r1, #2
   15560:	add	r2, r5, #36	; 0x24
   15564:	cmp	r2, r0
   15568:	bhi	1562c <flatcc_builder_start_offset_vector@@Base+0x114>
   1556c:	ldr	r3, [r4, #84]	; 0x54
   15570:	add	r3, r3, r5
   15574:	cmp	r3, #0
   15578:	str	r3, [r4, #32]
   1557c:	beq	15650 <flatcc_builder_start_offset_vector@@Base+0x138>
   15580:	ldr	r2, [r4, #88]	; 0x58
   15584:	ldr	r0, [pc, #204]	; 15658 <flatcc_builder_start_offset_vector@@Base+0x140>
   15588:	ldr	r1, [r4, #176]	; 0xb0
   1558c:	umull	r0, r2, r0, r2
   15590:	lsr	r2, r2, #3
   15594:	cmp	r1, #0
   15598:	cmpgt	r2, r1
   1559c:	str	r2, [r4, #160]	; 0xa0
   155a0:	strgt	r1, [r4, #160]	; 0xa0
   155a4:	b	155b4 <flatcc_builder_start_offset_vector@@Base+0x9c>
   155a8:	ldr	r3, [r0, #32]
   155ac:	add	r3, r3, #36	; 0x24
   155b0:	str	r3, [r0, #32]
   155b4:	ldr	lr, [r4, #20]
   155b8:	ldr	ip, [r4, #28]
   155bc:	ldrh	r5, [r4, #130]	; 0x82
   155c0:	add	r2, lr, ip
   155c4:	add	r2, r2, #7
   155c8:	bic	r2, r2, #7
   155cc:	mov	r1, #4
   155d0:	mov	r0, #0
   155d4:	str	lr, [r3, #8]
   155d8:	strh	r5, [r3, #12]
   155dc:	strh	r1, [r4, #130]	; 0x82
   155e0:	str	ip, [r3]
   155e4:	str	r2, [r4, #28]
   155e8:	str	r0, [r4, #20]
   155ec:	str	r1, [r3, #16]
   155f0:	str	r0, [r3, #20]
   155f4:	ldr	r1, [r4, #64]	; 0x40
   155f8:	ldr	ip, [r4, #60]	; 0x3c
   155fc:	sub	r1, r1, r2
   15600:	mvn	lr, #3
   15604:	cmp	r1, lr
   15608:	add	r2, ip, r2
   1560c:	movhi	r1, lr
   15610:	mov	ip, #5
   15614:	strh	ip, [r3, #14]
   15618:	str	r2, [r4, #16]
   1561c:	str	r1, [r4, #24]
   15620:	str	lr, [r3, #4]
   15624:	add	sp, sp, #8
   15628:	pop	{r4, r5, r6, pc}
   1562c:	mov	r1, #4
   15630:	ldr	r0, [r4, #40]	; 0x28
   15634:	str	r1, [sp]
   15638:	add	r1, r4, #84	; 0x54
   1563c:	ldr	r6, [r4, #48]	; 0x30
   15640:	blx	r6
   15644:	cmp	r0, #0
   15648:	beq	1556c <flatcc_builder_start_offset_vector@@Base+0x54>
   1564c:	bl	12358 <__assert_fail@plt+0xc>
   15650:	mvn	r0, #0
   15654:	b	15624 <flatcc_builder_start_offset_vector@@Base+0x10c>
   15658:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

0001565c <flatcc_builder_create_offset_vector@@Base>:
   1565c:	push	{r4, r5, r6, r7, r8, lr}
   15660:	mov	r4, r0
   15664:	ldr	r0, [r0, #156]	; 0x9c
   15668:	ldr	r3, [r4, #160]	; 0xa0
   1566c:	mov	r7, r1
   15670:	add	r1, r0, #1
   15674:	cmp	r1, r3
   15678:	sub	sp, sp, #8
   1567c:	mov	r5, r2
   15680:	str	r1, [r4, #156]	; 0x9c
   15684:	ble	156f4 <flatcc_builder_create_offset_vector@@Base+0x98>
   15688:	ldr	r3, [r4, #176]	; 0xb0
   1568c:	cmp	r1, r3
   15690:	cmpgt	r3, #0
   15694:	movgt	r3, #1
   15698:	movle	r3, #0
   1569c:	bgt	157c4 <flatcc_builder_create_offset_vector@@Base+0x168>
   156a0:	add	r0, r0, r0, lsl #3
   156a4:	ldr	r1, [r4, #88]	; 0x58
   156a8:	lsl	r6, r0, #2
   156ac:	add	r2, r6, #36	; 0x24
   156b0:	cmp	r2, r1
   156b4:	bhi	1582c <flatcc_builder_create_offset_vector@@Base+0x1d0>
   156b8:	ldr	r3, [r4, #84]	; 0x54
   156bc:	add	r3, r3, r6
   156c0:	cmp	r3, #0
   156c4:	str	r3, [r4, #32]
   156c8:	beq	157c4 <flatcc_builder_create_offset_vector@@Base+0x168>
   156cc:	ldr	r2, [r4, #88]	; 0x58
   156d0:	ldr	r0, [pc, #552]	; 15900 <flatcc_builder_create_offset_vector@@Base+0x2a4>
   156d4:	ldr	r1, [r4, #176]	; 0xb0
   156d8:	umull	r0, r2, r0, r2
   156dc:	lsr	r2, r2, #3
   156e0:	cmp	r1, #0
   156e4:	cmpgt	r2, r1
   156e8:	str	r2, [r4, #160]	; 0xa0
   156ec:	strgt	r1, [r4, #160]	; 0xa0
   156f0:	b	15700 <flatcc_builder_create_offset_vector@@Base+0xa4>
   156f4:	ldr	r3, [r4, #32]
   156f8:	add	r3, r3, #36	; 0x24
   156fc:	str	r3, [r4, #32]
   15700:	ldr	r2, [r4, #20]
   15704:	ldr	ip, [r4, #28]
   15708:	ldrh	r6, [r4, #130]	; 0x82
   1570c:	add	r1, r2, ip
   15710:	mvn	lr, #3
   15714:	add	r1, r1, #7
   15718:	str	r2, [r3, #8]
   1571c:	bic	r1, r1, #7
   15720:	mov	r0, #4
   15724:	mov	r2, #0
   15728:	strh	r6, [r3, #12]
   1572c:	strh	r0, [r4, #130]	; 0x82
   15730:	stm	r3, {ip, lr}
   15734:	str	r2, [r4, #20]
   15738:	str	r1, [r4, #28]
   1573c:	str	r0, [r3, #16]
   15740:	str	r2, [r3, #20]
   15744:	ldr	r2, [r4, #64]	; 0x40
   15748:	ldr	r0, [r4, #60]	; 0x3c
   1574c:	sub	r2, r2, r1
   15750:	cmp	r2, lr
   15754:	mov	ip, #5
   15758:	strh	ip, [r3, #14]
   1575c:	add	r0, r0, r1
   15760:	strls	r2, [r4, #24]
   15764:	strhi	lr, [r4, #24]
   15768:	movhi	r2, lr
   1576c:	mvn	r6, #3
   15770:	cmn	r5, #-1073741823	; 0xc0000001
   15774:	str	r0, [r4, #16]
   15778:	str	r6, [r3, #4]
   1577c:	bhi	158e8 <flatcc_builder_create_offset_vector@@Base+0x28c>
   15780:	lsl	r8, r5, #2
   15784:	cmp	r8, r2
   15788:	str	r5, [r3, #20]
   1578c:	str	r8, [r4, #20]
   15790:	bcs	157d4 <flatcc_builder_create_offset_vector@@Base+0x178>
   15794:	cmp	r0, #0
   15798:	beq	157c4 <flatcc_builder_create_offset_vector@@Base+0x168>
   1579c:	mov	r2, r8
   157a0:	mov	r1, r7
   157a4:	bl	122bc <memcpy@plt>
   157a8:	ldr	r3, [r4, #32]
   157ac:	ldrh	r2, [r3, #14]
   157b0:	cmp	r2, #5
   157b4:	bne	158ec <flatcc_builder_create_offset_vector@@Base+0x290>
   157b8:	ldr	r2, [r3, #20]
   157bc:	cmn	r2, #-1073741823	; 0xc0000001
   157c0:	bls	15850 <flatcc_builder_create_offset_vector@@Base+0x1f4>
   157c4:	mov	r5, #0
   157c8:	mov	r0, r5
   157cc:	add	sp, sp, #8
   157d0:	pop	{r4, r5, r6, r7, r8, pc}
   157d4:	mov	r3, #1
   157d8:	add	r2, r8, #1
   157dc:	ldr	r0, [r4, #40]	; 0x28
   157e0:	add	r2, r2, r1
   157e4:	str	r3, [sp]
   157e8:	add	r1, r4, #60	; 0x3c
   157ec:	ldr	r5, [r4, #48]	; 0x30
   157f0:	blx	r5
   157f4:	cmp	r0, #0
   157f8:	bne	157c4 <flatcc_builder_create_offset_vector@@Base+0x168>
   157fc:	ldr	r2, [r4, #28]
   15800:	ldr	r3, [r4, #64]	; 0x40
   15804:	ldr	r0, [r4, #60]	; 0x3c
   15808:	sub	r3, r3, r2
   1580c:	ldr	r1, [r4, #32]
   15810:	cmn	r3, #4
   15814:	movhi	r3, r6
   15818:	add	r0, r0, r2
   1581c:	str	r3, [r4, #24]
   15820:	str	r0, [r4, #16]
   15824:	str	r6, [r1, #4]
   15828:	b	15794 <flatcc_builder_create_offset_vector@@Base+0x138>
   1582c:	mov	r1, #4
   15830:	ldr	r0, [r4, #40]	; 0x28
   15834:	str	r1, [sp]
   15838:	add	r1, r4, #84	; 0x54
   1583c:	ldr	r8, [r4, #48]	; 0x30
   15840:	blx	r8
   15844:	cmp	r0, #0
   15848:	beq	156b8 <flatcc_builder_create_offset_vector@@Base+0x5c>
   1584c:	bl	12358 <__assert_fail@plt+0xc>
   15850:	ldr	r1, [r4, #16]
   15854:	mov	r0, r4
   15858:	bl	13280 <flatcc_builder_default_alloc@@Base+0x2fc>
   1585c:	subs	r5, r0, #0
   15860:	beq	157c4 <flatcc_builder_create_offset_vector@@Base+0x168>
   15864:	ldr	r2, [r4, #20]
   15868:	mov	r1, #0
   1586c:	ldr	r0, [r4, #16]
   15870:	bl	1231c <memset@plt>
   15874:	ldr	r3, [r4, #32]
   15878:	ldr	r2, [r4, #64]	; 0x40
   1587c:	ldrh	lr, [r4, #130]	; 0x82
   15880:	ldr	ip, [r3]
   15884:	ldr	r1, [r3, #4]
   15888:	ldrh	r0, [r4, #128]	; 0x80
   1588c:	sub	r2, r2, ip
   15890:	cmp	r2, r1
   15894:	movcs	r2, r1
   15898:	cmp	r0, lr
   1589c:	ldr	r0, [r4, #60]	; 0x3c
   158a0:	ldr	r6, [r3, #8]
   158a4:	str	r2, [r4, #24]
   158a8:	add	r2, r0, ip
   158ac:	str	r2, [r4, #16]
   158b0:	str	r6, [r4, #20]
   158b4:	ldr	r2, [r4, #156]	; 0x9c
   158b8:	str	ip, [r4, #28]
   158bc:	str	r1, [r3, #4]
   158c0:	strhcc	lr, [r4, #128]	; 0x80
   158c4:	ldrh	r1, [r3, #12]
   158c8:	sub	r2, r2, #1
   158cc:	sub	r3, r3, #36	; 0x24
   158d0:	mov	r0, r5
   158d4:	str	r2, [r4, #156]	; 0x9c
   158d8:	strh	r1, [r4, #130]	; 0x82
   158dc:	str	r3, [r4, #32]
   158e0:	add	sp, sp, #8
   158e4:	pop	{r4, r5, r6, r7, r8, pc}
   158e8:	bl	123cc <__assert_fail@plt+0x80>
   158ec:	ldr	r3, [pc, #16]	; 15904 <flatcc_builder_create_offset_vector@@Base+0x2a8>
   158f0:	ldr	r2, [pc, #16]	; 15908 <flatcc_builder_create_offset_vector@@Base+0x2ac>
   158f4:	ldr	r1, [pc, #16]	; 1590c <flatcc_builder_create_offset_vector@@Base+0x2b0>
   158f8:	ldr	r0, [pc, #16]	; 15910 <flatcc_builder_create_offset_vector@@Base+0x2b4>
   158fc:	bl	1234c <__assert_fail@plt>
   15900:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   15904:	andeq	sl, r1, r8, lsl sp
   15908:	andeq	r0, r0, r8, asr #11
   1590c:	ldrdeq	sl, [r1], -ip
   15910:			; <UNDEFINED> instruction: 0x0001b1b4

00015914 <flatcc_builder_start_string@@Base>:
   15914:	ldr	r1, [r0, #156]	; 0x9c
   15918:	ldr	r3, [r0, #160]	; 0xa0
   1591c:	add	r2, r1, #1
   15920:	cmp	r2, r3
   15924:	push	{r4, r5, r6, lr}
   15928:	mov	r4, r0
   1592c:	sub	sp, sp, #8
   15930:	str	r2, [r0, #156]	; 0x9c
   15934:	ble	159a4 <flatcc_builder_start_string@@Base+0x90>
   15938:	ldr	r3, [r0, #176]	; 0xb0
   1593c:	cmp	r3, #0
   15940:	cmpgt	r2, r3
   15944:	movgt	r3, #1
   15948:	movle	r3, #0
   1594c:	bgt	15a4c <flatcc_builder_start_string@@Base+0x138>
   15950:	add	r1, r1, r1, lsl #3
   15954:	ldr	r0, [r0, #88]	; 0x58
   15958:	lsl	r5, r1, #2
   1595c:	add	r2, r5, #36	; 0x24
   15960:	cmp	r2, r0
   15964:	bhi	15a28 <flatcc_builder_start_string@@Base+0x114>
   15968:	ldr	r3, [r4, #84]	; 0x54
   1596c:	add	r3, r3, r5
   15970:	cmp	r3, #0
   15974:	str	r3, [r4, #32]
   15978:	beq	15a4c <flatcc_builder_start_string@@Base+0x138>
   1597c:	ldr	r2, [r4, #88]	; 0x58
   15980:	ldr	r0, [pc, #204]	; 15a54 <flatcc_builder_start_string@@Base+0x140>
   15984:	ldr	r1, [r4, #176]	; 0xb0
   15988:	umull	r0, r2, r0, r2
   1598c:	lsr	r2, r2, #3
   15990:	cmp	r1, #0
   15994:	cmpgt	r2, r1
   15998:	str	r2, [r4, #160]	; 0xa0
   1599c:	strgt	r1, [r4, #160]	; 0xa0
   159a0:	b	159b0 <flatcc_builder_start_string@@Base+0x9c>
   159a4:	ldr	r3, [r0, #32]
   159a8:	add	r3, r3, #36	; 0x24
   159ac:	str	r3, [r0, #32]
   159b0:	ldr	lr, [r4, #20]
   159b4:	ldr	ip, [r4, #28]
   159b8:	ldrh	r5, [r4, #130]	; 0x82
   159bc:	add	r2, lr, ip
   159c0:	add	r2, r2, #7
   159c4:	bic	r2, r2, #7
   159c8:	mov	r1, #1
   159cc:	mov	r0, #0
   159d0:	str	lr, [r3, #8]
   159d4:	strh	r5, [r3, #12]
   159d8:	strh	r1, [r4, #130]	; 0x82
   159dc:	str	ip, [r3]
   159e0:	str	r2, [r4, #28]
   159e4:	str	r0, [r4, #20]
   159e8:	str	r1, [r3, #16]
   159ec:	str	r0, [r3, #20]
   159f0:	ldr	r1, [r4, #64]	; 0x40
   159f4:	ldr	ip, [r4, #60]	; 0x3c
   159f8:	sub	r1, r1, r2
   159fc:	mvn	lr, #3
   15a00:	cmp	r1, lr
   15a04:	add	r2, ip, r2
   15a08:	movhi	r1, lr
   15a0c:	mov	ip, #6
   15a10:	strh	ip, [r3, #14]
   15a14:	str	r2, [r4, #16]
   15a18:	str	r1, [r4, #24]
   15a1c:	str	lr, [r3, #4]
   15a20:	add	sp, sp, #8
   15a24:	pop	{r4, r5, r6, pc}
   15a28:	mov	r1, #4
   15a2c:	ldr	r0, [r4, #40]	; 0x28
   15a30:	str	r1, [sp]
   15a34:	add	r1, r4, #84	; 0x54
   15a38:	ldr	r6, [r4, #48]	; 0x30
   15a3c:	blx	r6
   15a40:	cmp	r0, #0
   15a44:	beq	15968 <flatcc_builder_start_string@@Base+0x54>
   15a48:	bl	12358 <__assert_fail@plt+0xc>
   15a4c:	mvn	r0, #0
   15a50:	b	15a20 <flatcc_builder_start_string@@Base+0x10c>
   15a54:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00015a58 <flatcc_builder_reserve_table@@Base>:
   15a58:	cmp	r1, #0
   15a5c:	push	{r4, r5, r6, r7, lr}
   15a60:	sub	sp, sp, #12
   15a64:	blt	15b3c <flatcc_builder_reserve_table@@Base+0xe4>
   15a68:	ldr	r2, [r0, #32]
   15a6c:	add	r1, r1, #2
   15a70:	mov	r5, r0
   15a74:	ldrh	r6, [r2, #28]
   15a78:	ldr	r3, [r2, #16]
   15a7c:	ldr	r0, [r0, #56]	; 0x38
   15a80:	lsl	r4, r1, #1
   15a84:	add	r6, r3, r6, lsl #1
   15a88:	add	r2, r6, r4
   15a8c:	cmp	r2, r0
   15a90:	bhi	15aec <flatcc_builder_reserve_table@@Base+0x94>
   15a94:	ldr	r3, [r5, #52]	; 0x34
   15a98:	adds	r3, r3, r6
   15a9c:	streq	r3, [r5, #4]
   15aa0:	mvneq	r0, #0
   15aa4:	beq	15ae4 <flatcc_builder_reserve_table@@Base+0x8c>
   15aa8:	ldr	r2, [r5, #32]
   15aac:	add	r3, r3, #4
   15ab0:	str	r3, [r5, #4]
   15ab4:	ldr	r6, [r2, #20]
   15ab8:	ldr	r3, [r5, #80]	; 0x50
   15abc:	add	r2, r4, r6
   15ac0:	sub	r2, r2, #3
   15ac4:	cmp	r2, r3
   15ac8:	bhi	15b14 <flatcc_builder_reserve_table@@Base+0xbc>
   15acc:	ldr	r3, [r5, #76]	; 0x4c
   15ad0:	add	r3, r3, r6
   15ad4:	cmp	r3, #0
   15ad8:	movne	r0, #0
   15adc:	mvneq	r0, #0
   15ae0:	str	r3, [r5]
   15ae4:	add	sp, sp, #12
   15ae8:	pop	{r4, r5, r6, r7, pc}
   15aec:	mov	r3, #0
   15af0:	ldr	r0, [r5, #40]	; 0x28
   15af4:	add	r1, r5, #52	; 0x34
   15af8:	str	r3, [sp]
   15afc:	mov	r3, #1
   15b00:	ldr	r7, [r5, #48]	; 0x30
   15b04:	blx	r7
   15b08:	cmp	r0, #0
   15b0c:	beq	15a94 <flatcc_builder_reserve_table@@Base+0x3c>
   15b10:	bl	12358 <__assert_fail@plt+0xc>
   15b14:	mov	r3, #3
   15b18:	ldr	r0, [r5, #40]	; 0x28
   15b1c:	add	r1, r5, #76	; 0x4c
   15b20:	str	r3, [sp]
   15b24:	mov	r3, #0
   15b28:	ldr	r4, [r5, #48]	; 0x30
   15b2c:	blx	r4
   15b30:	cmp	r0, #0
   15b34:	beq	15acc <flatcc_builder_reserve_table@@Base+0x74>
   15b38:	b	15b10 <flatcc_builder_reserve_table@@Base+0xb8>
   15b3c:	ldr	r3, [pc, #12]	; 15b50 <flatcc_builder_reserve_table@@Base+0xf8>
   15b40:	ldr	r2, [pc, #12]	; 15b54 <flatcc_builder_reserve_table@@Base+0xfc>
   15b44:	ldr	r1, [pc, #12]	; 15b58 <flatcc_builder_reserve_table@@Base+0x100>
   15b48:	ldr	r0, [pc, #12]	; 15b5c <flatcc_builder_reserve_table@@Base+0x104>
   15b4c:	bl	1234c <__assert_fail@plt>
   15b50:	andeq	sl, r1, ip, lsr sp
   15b54:	andeq	r0, r0, r9, lsr #8
   15b58:	ldrdeq	sl, [r1], -ip
   15b5c:	andeq	fp, r1, ip, ror #4

00015b60 <flatcc_builder_start_table@@Base>:
   15b60:	push	{r4, r5, r6, r7, lr}
   15b64:	mov	r5, r1
   15b68:	ldr	r1, [r0, #156]	; 0x9c
   15b6c:	ldr	r3, [r0, #160]	; 0xa0
   15b70:	add	r2, r1, #1
   15b74:	cmp	r2, r3
   15b78:	sub	sp, sp, #12
   15b7c:	mov	r4, r0
   15b80:	str	r2, [r0, #156]	; 0x9c
   15b84:	ble	15bf4 <flatcc_builder_start_table@@Base+0x94>
   15b88:	ldr	r3, [r0, #176]	; 0xb0
   15b8c:	cmp	r3, #0
   15b90:	cmpgt	r2, r3
   15b94:	movgt	r3, #1
   15b98:	movle	r3, #0
   15b9c:	bgt	15d94 <flatcc_builder_start_table@@Base+0x234>
   15ba0:	add	r1, r1, r1, lsl #3
   15ba4:	ldr	r0, [r0, #88]	; 0x58
   15ba8:	lsl	r6, r1, #2
   15bac:	add	r2, r6, #36	; 0x24
   15bb0:	cmp	r2, r0
   15bb4:	bhi	15d70 <flatcc_builder_start_table@@Base+0x210>
   15bb8:	ldr	r3, [r4, #84]	; 0x54
   15bbc:	add	r3, r3, r6
   15bc0:	cmp	r3, #0
   15bc4:	str	r3, [r4, #32]
   15bc8:	beq	15d94 <flatcc_builder_start_table@@Base+0x234>
   15bcc:	ldr	r2, [r4, #88]	; 0x58
   15bd0:	ldr	r0, [pc, #452]	; 15d9c <flatcc_builder_start_table@@Base+0x23c>
   15bd4:	ldr	r1, [r4, #176]	; 0xb0
   15bd8:	umull	r0, r2, r0, r2
   15bdc:	lsr	r2, r2, #3
   15be0:	cmp	r2, r1
   15be4:	cmpgt	r1, #0
   15be8:	str	r2, [r4, #160]	; 0xa0
   15bec:	strgt	r1, [r4, #160]	; 0xa0
   15bf0:	b	15c00 <flatcc_builder_start_table@@Base+0xa0>
   15bf4:	ldr	r3, [r0, #32]
   15bf8:	add	r3, r3, #36	; 0x24
   15bfc:	str	r3, [r0, #32]
   15c00:	ldr	ip, [r4, #20]
   15c04:	ldr	lr, [r4, #28]
   15c08:	ldrh	r7, [r4, #130]	; 0x82
   15c0c:	ldr	r6, [r4, #4]
   15c10:	ldr	r0, [r4, #52]	; 0x34
   15c14:	add	r2, ip, lr
   15c18:	str	ip, [r3, #8]
   15c1c:	add	r2, r2, #7
   15c20:	mov	ip, #4
   15c24:	strh	r7, [r3, #12]
   15c28:	sub	r1, r6, r0
   15c2c:	strh	ip, [r4, #130]	; 0x82
   15c30:	bic	r2, r2, #7
   15c34:	mvn	r6, #3
   15c38:	mov	ip, #0
   15c3c:	str	lr, [r3]
   15c40:	str	r6, [r3, #4]
   15c44:	str	r2, [r4, #28]
   15c48:	str	ip, [r4, #20]
   15c4c:	str	r1, [r3, #16]
   15c50:	ldr	lr, [r4, #76]	; 0x4c
   15c54:	ldr	r2, [r4]
   15c58:	add	r5, r5, #2
   15c5c:	sub	r2, r2, lr
   15c60:	str	r2, [r3, #20]
   15c64:	ldr	r2, [r4, #12]
   15c68:	lsl	r5, r5, #1
   15c6c:	str	r2, [r3, #24]
   15c70:	ldrh	r6, [r4, #8]
   15c74:	ldr	lr, [pc, #292]	; 15da0 <flatcc_builder_start_table@@Base+0x240>
   15c78:	strh	r6, [r3, #28]
   15c7c:	add	r6, r1, r6, lsl #1
   15c80:	ldr	r1, [r4, #56]	; 0x38
   15c84:	add	r2, r6, r5
   15c88:	cmp	r2, r1
   15c8c:	mov	r1, #3
   15c90:	strh	ip, [r4, #8]
   15c94:	str	lr, [r4, #12]
   15c98:	strh	r1, [r3, #14]
   15c9c:	bhi	15d20 <flatcc_builder_start_table@@Base+0x1c0>
   15ca0:	adds	r6, r6, r0
   15ca4:	streq	r6, [r4, #4]
   15ca8:	beq	15d94 <flatcc_builder_start_table@@Base+0x234>
   15cac:	ldr	r3, [r4, #32]
   15cb0:	add	r6, r6, #4
   15cb4:	str	r6, [r4, #4]
   15cb8:	ldr	r6, [r3, #20]
   15cbc:	sub	r2, r5, #3
   15cc0:	ldr	r3, [r4, #80]	; 0x50
   15cc4:	add	r2, r2, r6
   15cc8:	cmp	r2, r3
   15ccc:	bhi	15d48 <flatcc_builder_start_table@@Base+0x1e8>
   15cd0:	ldr	r3, [r4, #76]	; 0x4c
   15cd4:	add	r3, r3, r6
   15cd8:	cmp	r3, #0
   15cdc:	str	r3, [r4]
   15ce0:	beq	15d94 <flatcc_builder_start_table@@Base+0x234>
   15ce4:	ldr	ip, [r4, #28]
   15ce8:	ldr	r3, [r4, #64]	; 0x40
   15cec:	ldr	r2, [pc, #176]	; 15da4 <flatcc_builder_start_table@@Base+0x244>
   15cf0:	sub	r3, r3, ip
   15cf4:	ldr	r1, [r4, #60]	; 0x3c
   15cf8:	ldr	lr, [r4, #32]
   15cfc:	cmp	r3, r2
   15d00:	mov	r0, #0
   15d04:	add	r1, r1, ip
   15d08:	movcs	r3, r2
   15d0c:	str	r1, [r4, #16]
   15d10:	str	r3, [r4, #24]
   15d14:	str	r2, [lr, #4]
   15d18:	add	sp, sp, #12
   15d1c:	pop	{r4, r5, r6, r7, pc}
   15d20:	ldr	r0, [r4, #40]	; 0x28
   15d24:	mov	r3, #1
   15d28:	str	ip, [sp]
   15d2c:	add	r1, r4, #52	; 0x34
   15d30:	ldr	r7, [r4, #48]	; 0x30
   15d34:	blx	r7
   15d38:	cmp	r0, #0
   15d3c:	bne	15d6c <flatcc_builder_start_table@@Base+0x20c>
   15d40:	ldr	r0, [r4, #52]	; 0x34
   15d44:	b	15ca0 <flatcc_builder_start_table@@Base+0x140>
   15d48:	mov	r3, #3
   15d4c:	ldr	r0, [r4, #40]	; 0x28
   15d50:	add	r1, r4, #76	; 0x4c
   15d54:	str	r3, [sp]
   15d58:	mov	r3, #0
   15d5c:	ldr	r5, [r4, #48]	; 0x30
   15d60:	blx	r5
   15d64:	cmp	r0, #0
   15d68:	beq	15cd0 <flatcc_builder_start_table@@Base+0x170>
   15d6c:	bl	12358 <__assert_fail@plt+0xc>
   15d70:	mov	r1, #4
   15d74:	ldr	r0, [r4, #40]	; 0x28
   15d78:	str	r1, [sp]
   15d7c:	add	r1, r4, #84	; 0x54
   15d80:	ldr	r7, [r4, #48]	; 0x30
   15d84:	blx	r7
   15d88:	cmp	r0, #0
   15d8c:	beq	15bb8 <flatcc_builder_start_table@@Base+0x58>
   15d90:	b	15d6c <flatcc_builder_start_table@@Base+0x20c>
   15d94:	mvn	r0, #0
   15d98:	b	15d18 <flatcc_builder_start_table@@Base+0x1b8>
   15d9c:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   15da0:	svccs	0x00693b52
   15da4:	strdeq	pc, [r0], -ip

00015da8 <flatcc_builder_create_vtable@@Base>:
   15da8:	push	{r4, r5, r6, lr}
   15dac:	sub	sp, sp, #80	; 0x50
   15db0:	mov	r3, #0
   15db4:	cmp	r2, #0
   15db8:	str	r3, [sp, #8]
   15dbc:	str	r3, [sp, #12]
   15dc0:	mov	r4, r0
   15dc4:	ldr	r3, [r0, #152]	; 0x98
   15dc8:	beq	15e3c <flatcc_builder_create_vtable@@Base+0x94>
   15dcc:	mov	r0, #1
   15dd0:	cmp	r3, #0
   15dd4:	str	r1, [sp, #16]
   15dd8:	str	r2, [sp, #8]
   15ddc:	str	r2, [sp, #20]
   15de0:	str	r0, [sp, #12]
   15de4:	mov	r1, r2
   15de8:	beq	15e54 <flatcc_builder_create_vtable@@Base+0xac>
   15dec:	ldr	r3, [r4, #136]	; 0x88
   15df0:	sub	r5, r3, r2
   15df4:	cmp	r3, r5
   15df8:	ble	15e50 <flatcc_builder_create_vtable@@Base+0xa8>
   15dfc:	ldr	r0, [r4, #36]	; 0x24
   15e00:	mov	r3, r5
   15e04:	str	r2, [sp]
   15e08:	add	r1, sp, #16
   15e0c:	ldr	r6, [r4, #44]	; 0x2c
   15e10:	mov	r2, #1
   15e14:	blx	r6
   15e18:	cmp	r0, #0
   15e1c:	bne	15eb8 <flatcc_builder_create_vtable@@Base+0x110>
   15e20:	cmp	r5, #0
   15e24:	str	r5, [r4, #136]	; 0x88
   15e28:	beq	15e30 <flatcc_builder_create_vtable@@Base+0x88>
   15e2c:	add	r5, r5, #1
   15e30:	mov	r0, r5
   15e34:	add	sp, sp, #80	; 0x50
   15e38:	pop	{r4, r5, r6, pc}
   15e3c:	cmp	r3, #0
   15e40:	bne	15e50 <flatcc_builder_create_vtable@@Base+0xa8>
   15e44:	ldr	r2, [r0, #180]	; 0xb4
   15e48:	cmp	r2, #0
   15e4c:	beq	15eac <flatcc_builder_create_vtable@@Base+0x104>
   15e50:	bl	123a4 <__assert_fail@plt+0x58>
   15e54:	ldr	r3, [r4, #180]	; 0xb4
   15e58:	cmp	r3, #0
   15e5c:	bne	15dec <flatcc_builder_create_vtable@@Base+0x44>
   15e60:	ldr	r5, [r4, #140]	; 0x8c
   15e64:	add	r3, r5, r2
   15e68:	cmp	r5, r3
   15e6c:	str	r3, [r4, #140]	; 0x8c
   15e70:	movle	r2, r0
   15e74:	bgt	15ecc <flatcc_builder_create_vtable@@Base+0x124>
   15e78:	ldr	r0, [r4, #36]	; 0x24
   15e7c:	mov	r3, r5
   15e80:	str	r1, [sp]
   15e84:	add	r1, sp, #16
   15e88:	ldr	r4, [r4, #44]	; 0x2c
   15e8c:	blx	r4
   15e90:	cmp	r0, #0
   15e94:	beq	15e2c <flatcc_builder_create_vtable@@Base+0x84>
   15e98:	ldr	r3, [pc, #48]	; 15ed0 <flatcc_builder_create_vtable@@Base+0x128>
   15e9c:	ldr	r2, [pc, #48]	; 15ed4 <flatcc_builder_create_vtable@@Base+0x12c>
   15ea0:	ldr	r1, [pc, #48]	; 15ed8 <flatcc_builder_create_vtable@@Base+0x130>
   15ea4:	ldr	r0, [pc, #48]	; 15edc <flatcc_builder_create_vtable@@Base+0x134>
   15ea8:	bl	1234c <__assert_fail@plt>
   15eac:	ldr	r5, [r4, #140]	; 0x8c
   15eb0:	mov	r1, r2
   15eb4:	b	15e78 <flatcc_builder_create_vtable@@Base+0xd0>
   15eb8:	ldr	r3, [pc, #32]	; 15ee0 <flatcc_builder_create_vtable@@Base+0x138>
   15ebc:	ldr	r2, [pc, #32]	; 15ee4 <flatcc_builder_create_vtable@@Base+0x13c>
   15ec0:	ldr	r1, [pc, #16]	; 15ed8 <flatcc_builder_create_vtable@@Base+0x130>
   15ec4:	ldr	r0, [pc, #16]	; 15edc <flatcc_builder_create_vtable@@Base+0x134>
   15ec8:	bl	1234c <__assert_fail@plt>
   15ecc:	bl	1237c <__assert_fail@plt+0x30>
   15ed0:	muleq	r1, ip, r8
   15ed4:	andeq	r0, r0, r5, lsr #5
   15ed8:	ldrdeq	sl, [r1], -ip
   15edc:	muleq	r1, ip, r0
   15ee0:	andeq	sl, r1, r8, lsr #17
   15ee4:	andeq	r0, r0, fp, lsl #5

00015ee8 <flatcc_builder_create_cached_vtable@@Base>:
   15ee8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15eec:	sub	sp, sp, #28
   15ef0:	ldr	r4, [r0, #116]	; 0x74
   15ef4:	mov	sl, r3
   15ef8:	cmp	r4, #0
   15efc:	mov	r8, r0
   15f00:	str	r1, [sp, #8]
   15f04:	mov	r7, r2
   15f08:	rsbne	r3, r4, #32
   15f0c:	beq	16064 <flatcc_builder_create_cached_vtable@@Base+0x17c>
   15f10:	lsr	sl, sl, r3
   15f14:	ldr	r3, [r8, #92]	; 0x5c
   15f18:	adds	r2, r3, sl, lsl #2
   15f1c:	str	r3, [sp, #16]
   15f20:	str	r2, [sp, #20]
   15f24:	beq	16058 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15f28:	ldr	r5, [r3, sl, lsl #2]
   15f2c:	cmp	r5, #0
   15f30:	beq	16154 <flatcc_builder_create_cached_vtable@@Base+0x26c>
   15f34:	mov	r3, #0
   15f38:	ldr	fp, [r8, #100]	; 0x64
   15f3c:	ldr	r6, [r8, #68]	; 0x44
   15f40:	mov	r9, r2
   15f44:	str	r3, [sp, #12]
   15f48:	b	15f5c <flatcc_builder_create_cached_vtable@@Base+0x74>
   15f4c:	ldr	r5, [r4, #12]
   15f50:	add	r9, r4, #12
   15f54:	cmp	r5, #0
   15f58:	beq	15fac <flatcc_builder_create_cached_vtable@@Base+0xc4>
   15f5c:	add	r4, fp, r5
   15f60:	ldr	r2, [r4, #8]
   15f64:	add	r1, r6, r2
   15f68:	ldrh	r2, [r6, r2]
   15f6c:	cmp	r2, r7
   15f70:	bne	15f4c <flatcc_builder_create_cached_vtable@@Base+0x64>
   15f74:	mov	r2, r7
   15f78:	ldr	r0, [sp, #8]
   15f7c:	bl	122c8 <memcmp@plt>
   15f80:	cmp	r0, #0
   15f84:	bne	15f4c <flatcc_builder_create_cached_vtable@@Base+0x64>
   15f88:	ldr	r1, [r4, #4]
   15f8c:	ldr	r2, [r8, #152]	; 0x98
   15f90:	cmp	r1, r2
   15f94:	beq	16028 <flatcc_builder_create_cached_vtable@@Base+0x140>
   15f98:	ldr	r5, [r4, #12]
   15f9c:	add	r9, r4, #12
   15fa0:	cmp	r5, #0
   15fa4:	str	r4, [sp, #12]
   15fa8:	bne	15f5c <flatcc_builder_create_cached_vtable@@Base+0x74>
   15fac:	ldr	r4, [r8, #124]	; 0x7c
   15fb0:	ldr	r3, [r8, #104]	; 0x68
   15fb4:	add	r2, r4, #16
   15fb8:	cmp	r2, r3
   15fbc:	bhi	1612c <flatcc_builder_create_cached_vtable@@Base+0x244>
   15fc0:	ldr	r5, [r8, #100]	; 0x64
   15fc4:	adds	r6, r5, r4
   15fc8:	beq	16058 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15fcc:	ldr	r3, [r8, #124]	; 0x7c
   15fd0:	ldr	r0, [sp, #16]
   15fd4:	ldr	r2, [r8, #152]	; 0x98
   15fd8:	add	r1, r3, #16
   15fdc:	str	r1, [r8, #124]	; 0x7c
   15fe0:	str	r2, [r6, #4]
   15fe4:	ldr	r1, [r0, sl, lsl #2]
   15fe8:	mov	r2, r7
   15fec:	str	r1, [r6, #12]
   15ff0:	str	r3, [r0, sl, lsl #2]
   15ff4:	ldr	r1, [sp, #8]
   15ff8:	mov	r0, r8
   15ffc:	bl	15da8 <flatcc_builder_create_vtable@@Base>
   16000:	cmp	r0, #0
   16004:	str	r0, [r5, r4]
   16008:	beq	16058 <flatcc_builder_create_cached_vtable@@Base+0x170>
   1600c:	ldr	r3, [sp, #12]
   16010:	cmp	r3, #0
   16014:	beq	1615c <flatcc_builder_create_cached_vtable@@Base+0x274>
   16018:	ldr	r3, [r3, #8]
   1601c:	str	r3, [r6, #8]
   16020:	add	sp, sp, #28
   16024:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16028:	ldr	r3, [sp, #20]
   1602c:	cmp	r3, r9
   16030:	beq	1604c <flatcc_builder_create_cached_vtable@@Base+0x164>
   16034:	ldr	r2, [sp, #16]
   16038:	ldr	r3, [r4, #12]
   1603c:	str	r3, [r9]
   16040:	ldr	r3, [r2, sl, lsl #2]
   16044:	str	r3, [r4, #12]
   16048:	str	r5, [r2, sl, lsl #2]
   1604c:	ldr	r0, [r4]
   16050:	add	sp, sp, #28
   16054:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16058:	mov	r0, #0
   1605c:	add	sp, sp, #28
   16060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16064:	ldr	r3, [r0, #124]	; 0x7c
   16068:	add	r5, r0, #92	; 0x5c
   1606c:	cmp	r3, #0
   16070:	bne	16220 <flatcc_builder_create_cached_vtable@@Base+0x338>
   16074:	ldr	r3, [r0, #104]	; 0x68
   16078:	cmp	r3, #15
   1607c:	bls	16100 <flatcc_builder_create_cached_vtable@@Base+0x218>
   16080:	ldr	r3, [r8, #100]	; 0x64
   16084:	cmp	r3, #0
   16088:	beq	16058 <flatcc_builder_create_cached_vtable@@Base+0x170>
   1608c:	mov	r2, #16
   16090:	mov	r3, #5
   16094:	str	r2, [r8, #124]	; 0x7c
   16098:	ldr	r0, [r8, #40]	; 0x28
   1609c:	mov	r1, r5
   160a0:	str	r3, [sp]
   160a4:	mov	r2, #256	; 0x100
   160a8:	ldr	r5, [r8, #48]	; 0x30
   160ac:	mov	r3, #1
   160b0:	blx	r5
   160b4:	cmp	r0, #0
   160b8:	bne	16058 <flatcc_builder_create_cached_vtable@@Base+0x170>
   160bc:	ldr	r1, [r8, #96]	; 0x60
   160c0:	mov	r3, #256	; 0x100
   160c4:	b	160cc <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   160c8:	mov	r3, r2
   160cc:	lsl	r2, r3, #1
   160d0:	cmp	r2, r1
   160d4:	bls	160c8 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   160d8:	lsr	r3, r3, #2
   160dc:	cmp	r3, #1
   160e0:	bls	161ac <flatcc_builder_create_cached_vtable@@Base+0x2c4>
   160e4:	mov	r2, #1
   160e8:	add	r4, r4, #1
   160ec:	cmp	r3, r2, lsl r4
   160f0:	bhi	160e8 <flatcc_builder_create_cached_vtable@@Base+0x200>
   160f4:	rsb	r3, r4, #32
   160f8:	str	r4, [r8, #116]	; 0x74
   160fc:	b	15f10 <flatcc_builder_create_cached_vtable@@Base+0x28>
   16100:	mov	r3, #6
   16104:	ldr	r0, [r0, #40]	; 0x28
   16108:	mov	r2, #16
   1610c:	str	r3, [sp]
   16110:	add	r1, r8, #100	; 0x64
   16114:	ldr	r6, [r8, #48]	; 0x30
   16118:	mov	r3, r4
   1611c:	blx	r6
   16120:	cmp	r0, #0
   16124:	beq	16080 <flatcc_builder_create_cached_vtable@@Base+0x198>
   16128:	b	16214 <flatcc_builder_create_cached_vtable@@Base+0x32c>
   1612c:	mov	r3, #6
   16130:	ldr	r0, [r8, #40]	; 0x28
   16134:	add	r1, r8, #100	; 0x64
   16138:	str	r3, [sp]
   1613c:	mov	r3, #0
   16140:	ldr	r5, [r8, #48]	; 0x30
   16144:	blx	r5
   16148:	cmp	r0, #0
   1614c:	beq	15fc0 <flatcc_builder_create_cached_vtable@@Base+0xd8>
   16150:	b	16214 <flatcc_builder_create_cached_vtable@@Base+0x32c>
   16154:	str	r5, [sp, #12]
   16158:	b	15fac <flatcc_builder_create_cached_vtable@@Base+0xc4>
   1615c:	ldr	r3, [r8, #172]	; 0xac
   16160:	ldr	r9, [r8, #120]	; 0x78
   16164:	cmp	r3, #0
   16168:	add	r2, r9, r7
   1616c:	beq	161b4 <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   16170:	cmp	r3, r2
   16174:	bcs	161b4 <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   16178:	ldr	r3, [r8, #116]	; 0x74
   1617c:	cmp	r3, #0
   16180:	beq	16020 <flatcc_builder_create_cached_vtable@@Base+0x138>
   16184:	ldr	r6, [sp, #12]
   16188:	ldr	r2, [r8, #96]	; 0x60
   1618c:	mov	r1, r6
   16190:	ldr	r0, [r8, #92]	; 0x5c
   16194:	bl	1231c <memset@plt>
   16198:	mov	r3, #16
   1619c:	ldr	r0, [r5, r4]
   161a0:	str	r6, [r8, #120]	; 0x78
   161a4:	str	r3, [r8, #124]	; 0x7c
   161a8:	b	16020 <flatcc_builder_create_cached_vtable@@Base+0x138>
   161ac:	mov	r3, #32
   161b0:	b	160f8 <flatcc_builder_create_cached_vtable@@Base+0x210>
   161b4:	ldr	r3, [r8, #72]	; 0x48
   161b8:	cmp	r3, r2
   161bc:	bcc	161f0 <flatcc_builder_create_cached_vtable@@Base+0x308>
   161c0:	ldr	r3, [r8, #68]	; 0x44
   161c4:	adds	r0, r3, r9
   161c8:	beq	16218 <flatcc_builder_create_cached_vtable@@Base+0x330>
   161cc:	ldr	r3, [r8, #120]	; 0x78
   161d0:	ldr	r1, [sp, #8]
   161d4:	add	ip, r3, r7
   161d8:	str	r3, [r6, #8]
   161dc:	mov	r2, r7
   161e0:	str	ip, [r8, #120]	; 0x78
   161e4:	bl	122bc <memcpy@plt>
   161e8:	ldr	r0, [r5, r4]
   161ec:	b	16020 <flatcc_builder_create_cached_vtable@@Base+0x138>
   161f0:	mov	r3, #2
   161f4:	ldr	r0, [r8, #40]	; 0x28
   161f8:	add	r1, r8, #68	; 0x44
   161fc:	str	r3, [sp]
   16200:	mov	r3, #0
   16204:	ldr	sl, [r8, #48]	; 0x30
   16208:	blx	sl
   1620c:	cmp	r0, #0
   16210:	beq	161c0 <flatcc_builder_create_cached_vtable@@Base+0x2d8>
   16214:	bl	12358 <__assert_fail@plt+0xc>
   16218:	mvn	r0, #0
   1621c:	b	16020 <flatcc_builder_create_cached_vtable@@Base+0x138>
   16220:	ldr	r3, [pc, #12]	; 16234 <flatcc_builder_create_cached_vtable@@Base+0x34c>
   16224:	ldr	r2, [pc, #12]	; 16238 <flatcc_builder_create_cached_vtable@@Base+0x350>
   16228:	ldr	r1, [pc, #12]	; 1623c <flatcc_builder_create_cached_vtable@@Base+0x354>
   1622c:	ldr	r0, [pc, #12]	; 16240 <flatcc_builder_create_cached_vtable@@Base+0x358>
   16230:	bl	1234c <__assert_fail@plt>
   16234:	andeq	sl, r1, ip, asr sp
   16238:	andeq	r0, r0, r6, asr r1
   1623c:	ldrdeq	sl, [r1], -ip
   16240:	andeq	fp, r1, r8, ror r2

00016244 <flatcc_builder_create_table@@Base>:
   16244:	push	{r4, r5, r6, r7, r8, lr}
   16248:	sub	sp, sp, #88	; 0x58
   1624c:	ldr	r4, [sp, #116]	; 0x74
   16250:	ldr	lr, [sp, #120]	; 0x78
   16254:	cmp	r4, #0
   16258:	blt	16390 <flatcc_builder_create_table@@Base+0x14c>
   1625c:	mov	r8, r2
   16260:	ands	r2, lr, #1
   16264:	beq	163bc <flatcc_builder_create_table@@Base+0x178>
   16268:	mov	r5, r0
   1626c:	ldrh	r0, [r0, #128]	; 0x80
   16270:	cmp	r3, #4
   16274:	movcc	r3, #4
   16278:	ldr	ip, [r5, #136]	; 0x88
   1627c:	cmp	r0, r3
   16280:	mvn	r0, #3
   16284:	strhcc	r3, [r5, #128]	; 0x80
   16288:	sub	r7, ip, r8
   1628c:	sub	r3, r3, #1
   16290:	sub	r0, r0, r8
   16294:	and	r7, r7, r3
   16298:	add	r0, r0, ip
   1629c:	sub	lr, lr, #1
   162a0:	sub	r0, r0, r7
   162a4:	sub	lr, r0, lr
   162a8:	cmp	r4, #0
   162ac:	str	lr, [sp, #12]
   162b0:	beq	162e4 <flatcc_builder_create_table@@Base+0xa0>
   162b4:	ldr	ip, [sp, #112]	; 0x70
   162b8:	mvn	r6, #3
   162bc:	add	r4, ip, r4, lsl #1
   162c0:	sub	r6, r6, r0
   162c4:	ldrh	r3, [ip], #2
   162c8:	sub	lr, r6, r3
   162cc:	ldr	r0, [r1, r3]
   162d0:	cmp	r4, ip
   162d4:	add	r0, r0, lr
   162d8:	str	r0, [r1, r3]
   162dc:	bne	162c4 <flatcc_builder_create_table@@Base+0x80>
   162e0:	ldr	ip, [r5, #136]	; 0x88
   162e4:	cmp	r8, #0
   162e8:	mov	r3, #4
   162ec:	mov	r0, #1
   162f0:	str	r3, [sp, #16]
   162f4:	movne	r2, #2
   162f8:	str	r3, [sp, #28]
   162fc:	addne	r3, r8, r3
   16300:	str	r0, [sp, #20]
   16304:	add	lr, sp, #12
   16308:	strne	r1, [sp, #32]
   1630c:	strne	r8, [sp, #36]	; 0x24
   16310:	strne	r3, [sp, #16]
   16314:	strne	r2, [sp, #20]
   16318:	movne	r0, #3
   1631c:	moveq	r0, #2
   16320:	cmp	r7, #0
   16324:	str	lr, [sp, #24]
   16328:	beq	16354 <flatcc_builder_create_table@@Base+0x110>
   1632c:	add	r2, r2, #1
   16330:	add	r1, sp, #88	; 0x58
   16334:	add	r1, r1, r2, lsl #3
   16338:	ldr	lr, [pc, #144]	; 163d0 <flatcc_builder_create_table@@Base+0x18c>
   1633c:	mov	r2, r0
   16340:	add	r3, r3, r7
   16344:	str	r7, [r1, #-68]	; 0xffffffbc
   16348:	str	r3, [sp, #16]
   1634c:	str	r0, [sp, #20]
   16350:	str	lr, [r1, #-72]	; 0xffffffb8
   16354:	sub	r4, ip, r3
   16358:	cmp	r4, ip
   1635c:	bge	163b8 <flatcc_builder_create_table@@Base+0x174>
   16360:	ldr	r0, [r5, #36]	; 0x24
   16364:	add	r1, sp, #24
   16368:	str	r3, [sp]
   1636c:	mov	r3, r4
   16370:	ldr	r6, [r5, #44]	; 0x2c
   16374:	blx	r6
   16378:	cmp	r0, #0
   1637c:	bne	163a4 <flatcc_builder_create_table@@Base+0x160>
   16380:	mov	r0, r4
   16384:	str	r4, [r5, #136]	; 0x88
   16388:	add	sp, sp, #88	; 0x58
   1638c:	pop	{r4, r5, r6, r7, r8, pc}
   16390:	ldr	r3, [pc, #60]	; 163d4 <flatcc_builder_create_table@@Base+0x190>
   16394:	ldr	r2, [pc, #60]	; 163d8 <flatcc_builder_create_table@@Base+0x194>
   16398:	ldr	r1, [pc, #60]	; 163dc <flatcc_builder_create_table@@Base+0x198>
   1639c:	ldr	r0, [pc, #60]	; 163e0 <flatcc_builder_create_table@@Base+0x19c>
   163a0:	bl	1234c <__assert_fail@plt>
   163a4:	ldr	r3, [pc, #56]	; 163e4 <flatcc_builder_create_table@@Base+0x1a0>
   163a8:	ldr	r2, [pc, #56]	; 163e8 <flatcc_builder_create_table@@Base+0x1a4>
   163ac:	ldr	r1, [pc, #40]	; 163dc <flatcc_builder_create_table@@Base+0x198>
   163b0:	ldr	r0, [pc, #52]	; 163ec <flatcc_builder_create_table@@Base+0x1a8>
   163b4:	bl	1234c <__assert_fail@plt>
   163b8:	bl	123a4 <__assert_fail@plt+0x58>
   163bc:	ldr	r3, [pc, #16]	; 163d4 <flatcc_builder_create_table@@Base+0x190>
   163c0:	ldr	r2, [pc, #40]	; 163f0 <flatcc_builder_create_table@@Base+0x1ac>
   163c4:	ldr	r1, [pc, #16]	; 163dc <flatcc_builder_create_table@@Base+0x198>
   163c8:	ldr	r0, [pc, #36]	; 163f4 <flatcc_builder_create_table@@Base+0x1b0>
   163cc:	bl	1234c <__assert_fail@plt>
   163d0:	andeq	sl, r1, r4, lsr #18
   163d4:	andeq	sl, r1, r8, ror #26
   163d8:	ldrdeq	r0, [r0], -r5
   163dc:	ldrdeq	sl, [r1], -ip
   163e0:	andeq	fp, r1, r8, lsl #5
   163e4:	andeq	sl, r1, r8, lsr #17
   163e8:	andeq	r0, r0, fp, lsl #5
   163ec:	muleq	r1, ip, r0
   163f0:	ldrdeq	r0, [r0], -fp
   163f4:	muleq	r1, ip, r2

000163f8 <flatcc_builder_check_required_field@@Base>:
   163f8:	ldr	r3, [r0, #32]
   163fc:	ldrh	r3, [r3, #14]
   16400:	cmp	r3, #3
   16404:	bne	16430 <flatcc_builder_check_required_field@@Base+0x38>
   16408:	ldrh	r3, [r0, #8]
   1640c:	cmp	r3, r1
   16410:	movls	r0, #0
   16414:	bls	1642c <flatcc_builder_check_required_field@@Base+0x34>
   16418:	ldr	r3, [r0, #4]
   1641c:	lsl	r1, r1, #1
   16420:	ldrh	r0, [r3, r1]
   16424:	adds	r0, r0, #0
   16428:	movne	r0, #1
   1642c:	bx	lr
   16430:	push	{r4, lr}
   16434:	ldr	r3, [pc, #12]	; 16448 <flatcc_builder_check_required_field@@Base+0x50>
   16438:	ldr	r2, [pc, #12]	; 1644c <flatcc_builder_check_required_field@@Base+0x54>
   1643c:	ldr	r1, [pc, #12]	; 16450 <flatcc_builder_check_required_field@@Base+0x58>
   16440:	ldr	r0, [pc, #12]	; 16454 <flatcc_builder_check_required_field@@Base+0x5c>
   16444:	bl	1234c <__assert_fail@plt>
   16448:	andeq	sl, r1, r4, lsl #27
   1644c:	strdeq	r0, [r0], -r8
   16450:	ldrdeq	sl, [r1], -ip
   16454:	andeq	fp, r1, r8, lsr #5

00016458 <flatcc_builder_check_union_field@@Base>:
   16458:	ldr	r3, [r0, #32]
   1645c:	ldrh	r3, [r3, #14]
   16460:	cmp	r3, #3
   16464:	bne	164e0 <flatcc_builder_check_union_field@@Base+0x88>
   16468:	cmp	r1, #0
   1646c:	beq	164b8 <flatcc_builder_check_union_field@@Base+0x60>
   16470:	ldrh	r3, [r0, #8]
   16474:	cmp	r3, r1
   16478:	bls	164b8 <flatcc_builder_check_union_field@@Base+0x60>
   1647c:	sub	r1, r1, #-2147483647	; 0x80000001
   16480:	ldr	r3, [r0, #4]
   16484:	lsl	r1, r1, #1
   16488:	ldrh	r2, [r3, r1]
   1648c:	cmp	r2, #0
   16490:	beq	164cc <flatcc_builder_check_union_field@@Base+0x74>
   16494:	ldr	r0, [r0, #16]
   16498:	add	r1, r3, r1
   1649c:	ldrb	r2, [r0, r2]
   164a0:	ldrh	r1, [r1, #2]
   164a4:	cmp	r2, #0
   164a8:	bne	164c0 <flatcc_builder_check_union_field@@Base+0x68>
   164ac:	clz	r0, r1
   164b0:	lsr	r0, r0, #5
   164b4:	bx	lr
   164b8:	mov	r0, #0
   164bc:	bx	lr
   164c0:	adds	r0, r1, #0
   164c4:	movne	r0, #1
   164c8:	b	164bc <flatcc_builder_check_union_field@@Base+0x64>
   164cc:	add	r1, r3, r1
   164d0:	ldrh	r1, [r1, #2]
   164d4:	clz	r0, r1
   164d8:	lsr	r0, r0, #5
   164dc:	bx	lr
   164e0:	push	{r4, lr}
   164e4:	ldr	r3, [pc, #12]	; 164f8 <flatcc_builder_check_union_field@@Base+0xa0>
   164e8:	ldr	r2, [pc, #12]	; 164fc <flatcc_builder_check_union_field@@Base+0xa4>
   164ec:	ldr	r1, [pc, #12]	; 16500 <flatcc_builder_check_union_field@@Base+0xa8>
   164f0:	ldr	r0, [pc, #12]	; 16504 <flatcc_builder_check_union_field@@Base+0xac>
   164f4:	bl	1234c <__assert_fail@plt>
   164f8:	andeq	sl, r1, r8, lsr #27
   164fc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   16500:	ldrdeq	sl, [r1], -ip
   16504:	andeq	fp, r1, r8, lsr #5

00016508 <flatcc_builder_check_required@@Base>:
   16508:	ldr	r3, [r0, #32]
   1650c:	ldrh	r3, [r3, #14]
   16510:	cmp	r3, #3
   16514:	bne	16578 <flatcc_builder_check_required@@Base+0x70>
   16518:	ldrh	r3, [r0, #8]
   1651c:	cmp	r3, r2
   16520:	movlt	r0, #0
   16524:	blt	16574 <flatcc_builder_check_required@@Base+0x6c>
   16528:	cmp	r2, #0
   1652c:	ble	16570 <flatcc_builder_check_required@@Base+0x68>
   16530:	ldrh	r3, [r1]
   16534:	ldr	ip, [r0, #4]
   16538:	lsl	r3, r3, #1
   1653c:	ldrh	r0, [ip, r3]
   16540:	cmp	r0, #0
   16544:	beq	16574 <flatcc_builder_check_required@@Base+0x6c>
   16548:	add	r2, r1, r2, lsl #1
   1654c:	add	r1, r1, #2
   16550:	b	16568 <flatcc_builder_check_required@@Base+0x60>
   16554:	ldrh	r3, [r1], #2
   16558:	lsl	r3, r3, #1
   1655c:	ldrh	r0, [ip, r3]
   16560:	cmp	r0, #0
   16564:	beq	16574 <flatcc_builder_check_required@@Base+0x6c>
   16568:	cmp	r1, r2
   1656c:	bne	16554 <flatcc_builder_check_required@@Base+0x4c>
   16570:	mov	r0, #1
   16574:	bx	lr
   16578:	push	{r4, lr}
   1657c:	ldr	r3, [pc, #12]	; 16590 <flatcc_builder_check_required@@Base+0x88>
   16580:	ldr	r2, [pc, #12]	; 16594 <flatcc_builder_check_required@@Base+0x8c>
   16584:	ldr	r1, [pc, #12]	; 16598 <flatcc_builder_check_required@@Base+0x90>
   16588:	ldr	r0, [pc, #12]	; 1659c <flatcc_builder_check_required@@Base+0x94>
   1658c:	bl	1234c <__assert_fail@plt>
   16590:	andeq	sl, r1, ip, asr #27
   16594:	andeq	r0, r0, r1, lsl r5
   16598:	ldrdeq	sl, [r1], -ip
   1659c:	andeq	fp, r1, r8, lsr #5

000165a0 <flatcc_builder_end_table@@Base>:
   165a0:	ldr	r3, [r0, #32]
   165a4:	push	{r4, r5, r6, r7, lr}
   165a8:	sub	sp, sp, #20
   165ac:	ldrh	r3, [r3, #14]
   165b0:	cmp	r3, #3
   165b4:	bne	16738 <flatcc_builder_end_table@@Base+0x198>
   165b8:	ldrh	r5, [r0, #8]
   165bc:	ldr	r3, [r0, #12]
   165c0:	ldr	r1, [pc, #388]	; 1674c <flatcc_builder_end_table@@Base+0x1ac>
   165c4:	add	r5, r5, #2
   165c8:	ldr	r2, [r0, #20]
   165cc:	lsl	r5, r5, #1
   165d0:	add	r2, r2, #4
   165d4:	uxth	r5, r5
   165d8:	eor	r3, r3, r5
   165dc:	uxth	r2, r2
   165e0:	mul	r3, r1, r3
   165e4:	ldr	ip, [r0, #4]
   165e8:	eor	r3, r3, r2
   165ec:	sub	r6, ip, #4
   165f0:	mul	r1, r1, r3
   165f4:	strh	r2, [ip, #-2]
   165f8:	strh	r5, [ip, #-4]
   165fc:	mov	r3, r1
   16600:	str	r1, [r0, #12]
   16604:	mov	r2, r5
   16608:	mov	r1, r6
   1660c:	mov	r4, r0
   16610:	bl	15ee8 <flatcc_builder_create_cached_vtable@@Base>
   16614:	subs	r7, r0, #0
   16618:	bne	1662c <flatcc_builder_end_table@@Base+0x8c>
   1661c:	mov	r5, #0
   16620:	mov	r0, r5
   16624:	add	sp, sp, #20
   16628:	pop	{r4, r5, r6, r7, pc}
   1662c:	mov	r2, r5
   16630:	mov	r1, #0
   16634:	mov	r0, r6
   16638:	bl	1231c <memset@plt>
   1663c:	ldr	r3, [r4, #32]
   16640:	ldr	ip, [r4, #76]	; 0x4c
   16644:	ldr	r0, [r4]
   16648:	ldr	r2, [r3, #20]
   1664c:	ldr	r1, [r4, #16]
   16650:	add	ip, ip, r2
   16654:	sub	r0, r0, ip
   16658:	ldrh	r3, [r4, #130]	; 0x82
   1665c:	asr	r0, r0, #1
   16660:	ldr	r2, [r4, #20]
   16664:	str	r0, [sp, #4]
   16668:	str	r7, [sp, #8]
   1666c:	str	ip, [sp]
   16670:	mov	r0, r4
   16674:	bl	16244 <flatcc_builder_create_table@@Base>
   16678:	subs	r5, r0, #0
   1667c:	beq	1661c <flatcc_builder_end_table@@Base+0x7c>
   16680:	ldr	r3, [r4, #32]
   16684:	ldr	r0, [r4, #52]	; 0x34
   16688:	ldr	ip, [r4, #76]	; 0x4c
   1668c:	ldr	r1, [r3, #24]
   16690:	ldr	r2, [r4, #20]
   16694:	str	r1, [r4, #12]
   16698:	ldrh	lr, [r3, #28]
   1669c:	mov	r1, #0
   166a0:	strh	lr, [r4, #8]
   166a4:	ldr	lr, [r3, #16]
   166a8:	add	r0, r0, lr
   166ac:	str	r0, [r4, #4]
   166b0:	ldr	r3, [r3, #20]
   166b4:	ldr	r0, [r4, #16]
   166b8:	add	r3, ip, r3
   166bc:	str	r3, [r4]
   166c0:	bl	1231c <memset@plt>
   166c4:	ldr	r3, [r4, #32]
   166c8:	ldr	r2, [r4, #64]	; 0x40
   166cc:	ldrh	lr, [r4, #130]	; 0x82
   166d0:	ldr	ip, [r3]
   166d4:	ldr	r1, [r3, #4]
   166d8:	ldrh	r0, [r4, #128]	; 0x80
   166dc:	sub	r2, r2, ip
   166e0:	cmp	r2, r1
   166e4:	movcs	r2, r1
   166e8:	cmp	r0, lr
   166ec:	ldr	r0, [r4, #60]	; 0x3c
   166f0:	ldr	r6, [r3, #8]
   166f4:	str	r2, [r4, #24]
   166f8:	add	r2, r0, ip
   166fc:	str	r2, [r4, #16]
   16700:	str	r6, [r4, #20]
   16704:	ldr	r2, [r4, #156]	; 0x9c
   16708:	str	ip, [r4, #28]
   1670c:	str	r1, [r3, #4]
   16710:	strhcc	lr, [r4, #128]	; 0x80
   16714:	ldrh	r1, [r3, #12]
   16718:	sub	r2, r2, #1
   1671c:	sub	r3, r3, #36	; 0x24
   16720:	mov	r0, r5
   16724:	str	r2, [r4, #156]	; 0x9c
   16728:	strh	r1, [r4, #130]	; 0x82
   1672c:	str	r3, [r4, #32]
   16730:	add	sp, sp, #20
   16734:	pop	{r4, r5, r6, r7, pc}
   16738:	ldr	r3, [pc, #16]	; 16750 <flatcc_builder_end_table@@Base+0x1b0>
   1673c:	ldr	r2, [pc, #16]	; 16754 <flatcc_builder_end_table@@Base+0x1b4>
   16740:	ldr	r1, [pc, #16]	; 16758 <flatcc_builder_end_table@@Base+0x1b8>
   16744:	ldr	r0, [pc, #16]	; 1675c <flatcc_builder_end_table@@Base+0x1bc>
   16748:	bl	1234c <__assert_fail@plt>
   1674c:			; <UNDEFINED> instruction: 0x9e3779b1
   16750:	andeq	sl, r1, ip, ror #27
   16754:	andeq	r0, r0, r5, lsr #10
   16758:	ldrdeq	sl, [r1], -ip
   1675c:	andeq	fp, r1, r8, lsr #5

00016760 <flatcc_builder_create_vector@@Base>:
   16760:	push	{r4, r5, r6, lr}
   16764:	sub	sp, sp, #88	; 0x58
   16768:	mov	r4, r0
   1676c:	ldr	ip, [sp, #108]	; 0x6c
   16770:	ldrh	r0, [sp, #104]	; 0x68
   16774:	cmp	r2, ip
   16778:	bhi	16854 <flatcc_builder_create_vector@@Base+0xf4>
   1677c:	ldrh	ip, [r4, #128]	; 0x80
   16780:	mul	r3, r3, r2
   16784:	cmp	r0, #4
   16788:	movcc	r0, #4
   1678c:	ldr	lr, [r4, #136]	; 0x88
   16790:	cmp	ip, r0
   16794:	sub	r6, lr, r3
   16798:	mov	ip, #4
   1679c:	strhcc	r0, [r4, #128]	; 0x80
   167a0:	str	r2, [sp, #12]
   167a4:	cmp	r3, #0
   167a8:	mov	r2, #1
   167ac:	sub	r0, r0, #1
   167b0:	str	ip, [sp, #16]
   167b4:	str	r2, [sp, #20]
   167b8:	and	r0, r0, r6
   167bc:	movne	r2, #2
   167c0:	str	ip, [sp, #28]
   167c4:	addne	ip, r3, ip
   167c8:	strne	r3, [sp, #36]	; 0x24
   167cc:	add	r5, sp, #12
   167d0:	strne	r1, [sp, #32]
   167d4:	strne	ip, [sp, #16]
   167d8:	strne	r2, [sp, #20]
   167dc:	movne	r3, #3
   167e0:	moveq	r3, #2
   167e4:	cmp	r0, #0
   167e8:	str	r5, [sp, #24]
   167ec:	beq	16818 <flatcc_builder_create_vector@@Base+0xb8>
   167f0:	add	r2, r2, #1
   167f4:	add	r1, sp, #88	; 0x58
   167f8:	add	r1, r1, r2, lsl #3
   167fc:	ldr	r5, [pc, #124]	; 16880 <flatcc_builder_create_vector@@Base+0x120>
   16800:	mov	r2, r3
   16804:	add	ip, ip, r0
   16808:	str	r0, [r1, #-68]	; 0xffffffbc
   1680c:	str	ip, [sp, #16]
   16810:	str	r3, [sp, #20]
   16814:	str	r5, [r1, #-72]	; 0xffffffb8
   16818:	sub	r5, lr, ip
   1681c:	cmp	lr, r5
   16820:	ble	1687c <flatcc_builder_create_vector@@Base+0x11c>
   16824:	ldr	r0, [r4, #36]	; 0x24
   16828:	mov	r3, r5
   1682c:	str	ip, [sp]
   16830:	add	r1, sp, #24
   16834:	ldr	r6, [r4, #44]	; 0x2c
   16838:	blx	r6
   1683c:	cmp	r0, #0
   16840:	bne	16868 <flatcc_builder_create_vector@@Base+0x108>
   16844:	mov	r0, r5
   16848:	str	r5, [r4, #136]	; 0x88
   1684c:	add	sp, sp, #88	; 0x58
   16850:	pop	{r4, r5, r6, pc}
   16854:	ldr	r3, [pc, #40]	; 16884 <flatcc_builder_create_vector@@Base+0x124>
   16858:	ldr	r2, [pc, #40]	; 16888 <flatcc_builder_create_vector@@Base+0x128>
   1685c:	ldr	r1, [pc, #40]	; 1688c <flatcc_builder_create_vector@@Base+0x12c>
   16860:	ldr	r0, [pc, #40]	; 16890 <flatcc_builder_create_vector@@Base+0x130>
   16864:	bl	1234c <__assert_fail@plt>
   16868:	ldr	r3, [pc, #36]	; 16894 <flatcc_builder_create_vector@@Base+0x134>
   1686c:	ldr	r2, [pc, #36]	; 16898 <flatcc_builder_create_vector@@Base+0x138>
   16870:	ldr	r1, [pc, #20]	; 1688c <flatcc_builder_create_vector@@Base+0x12c>
   16874:	ldr	r0, [pc, #32]	; 1689c <flatcc_builder_create_vector@@Base+0x13c>
   16878:	bl	1234c <__assert_fail@plt>
   1687c:	bl	123a4 <__assert_fail@plt+0x58>
   16880:	andeq	sl, r1, r4, lsr #18
   16884:	andeq	sl, r1, r8, lsl #28
   16888:	andeq	r0, r0, r5, asr r5
   1688c:	ldrdeq	sl, [r1], -ip
   16890:	ldrdeq	fp, [r1], -r4
   16894:	andeq	sl, r1, r8, lsr #17
   16898:	andeq	r0, r0, fp, lsl #5
   1689c:	muleq	r1, ip, r0

000168a0 <flatcc_builder_end_vector@@Base>:
   168a0:	ldr	r3, [r0, #32]
   168a4:	push	{r4, r5, r6, lr}
   168a8:	sub	sp, sp, #88	; 0x58
   168ac:	ldrh	r2, [r3, #14]
   168b0:	cmp	r2, #4
   168b4:	bne	16a58 <flatcc_builder_end_vector@@Base+0x1b8>
   168b8:	ldr	lr, [r3, #20]
   168bc:	ldr	r2, [r3, #24]
   168c0:	ldr	r1, [r3, #16]
   168c4:	cmp	lr, r2
   168c8:	mov	r4, r0
   168cc:	ldr	r5, [r0, #16]
   168d0:	ldrh	r3, [r0, #130]	; 0x82
   168d4:	bhi	16a44 <flatcc_builder_end_vector@@Base+0x1a4>
   168d8:	ldrh	r2, [r0, #128]	; 0x80
   168dc:	mul	r1, r1, lr
   168e0:	cmp	r3, #4
   168e4:	movcc	r3, #4
   168e8:	ldr	ip, [r0, #136]	; 0x88
   168ec:	cmp	r2, r3
   168f0:	strhcc	r3, [r0, #128]	; 0x80
   168f4:	sub	r2, r3, #1
   168f8:	sub	r0, ip, r1
   168fc:	cmp	r1, #0
   16900:	mov	r3, #4
   16904:	and	r0, r0, r2
   16908:	mov	r2, #1
   1690c:	str	r3, [sp, #16]
   16910:	str	r2, [sp, #20]
   16914:	str	r3, [sp, #28]
   16918:	movne	r2, #2
   1691c:	addne	r3, r1, r3
   16920:	strne	r1, [sp, #36]	; 0x24
   16924:	str	lr, [sp, #12]
   16928:	strne	r5, [sp, #32]
   1692c:	add	lr, sp, #12
   16930:	strne	r3, [sp, #16]
   16934:	strne	r2, [sp, #20]
   16938:	movne	r1, #3
   1693c:	moveq	r1, #2
   16940:	cmp	r0, #0
   16944:	str	lr, [sp, #24]
   16948:	beq	16974 <flatcc_builder_end_vector@@Base+0xd4>
   1694c:	add	r2, r2, #1
   16950:	add	lr, sp, #88	; 0x58
   16954:	add	lr, lr, r2, lsl #3
   16958:	ldr	r5, [pc, #268]	; 16a6c <flatcc_builder_end_vector@@Base+0x1cc>
   1695c:	mov	r2, r1
   16960:	add	r3, r3, r0
   16964:	str	r0, [lr, #-68]	; 0xffffffbc
   16968:	str	r3, [sp, #16]
   1696c:	str	r1, [sp, #20]
   16970:	str	r5, [lr, #-72]	; 0xffffffb8
   16974:	sub	r5, ip, r3
   16978:	cmp	ip, r5
   1697c:	ble	16a40 <flatcc_builder_end_vector@@Base+0x1a0>
   16980:	ldr	r0, [r4, #36]	; 0x24
   16984:	add	r1, sp, #24
   16988:	str	r3, [sp]
   1698c:	mov	r3, r5
   16990:	ldr	r6, [r4, #44]	; 0x2c
   16994:	blx	r6
   16998:	subs	r1, r0, #0
   1699c:	bne	16a2c <flatcc_builder_end_vector@@Base+0x18c>
   169a0:	cmp	r5, #0
   169a4:	str	r5, [r4, #136]	; 0x88
   169a8:	beq	16a20 <flatcc_builder_end_vector@@Base+0x180>
   169ac:	ldr	r2, [r4, #20]
   169b0:	ldr	r0, [r4, #16]
   169b4:	bl	1231c <memset@plt>
   169b8:	ldr	r3, [r4, #32]
   169bc:	ldr	r2, [r4, #64]	; 0x40
   169c0:	ldrh	lr, [r4, #130]	; 0x82
   169c4:	ldr	ip, [r3]
   169c8:	ldr	r1, [r3, #4]
   169cc:	ldrh	r0, [r4, #128]	; 0x80
   169d0:	sub	r2, r2, ip
   169d4:	cmp	r2, r1
   169d8:	movcs	r2, r1
   169dc:	cmp	r0, lr
   169e0:	ldr	r0, [r4, #60]	; 0x3c
   169e4:	ldr	r6, [r3, #8]
   169e8:	str	r2, [r4, #24]
   169ec:	add	r2, r0, ip
   169f0:	str	r2, [r4, #16]
   169f4:	str	r6, [r4, #20]
   169f8:	ldr	r2, [r4, #156]	; 0x9c
   169fc:	str	ip, [r4, #28]
   16a00:	str	r1, [r3, #4]
   16a04:	strhcc	lr, [r4, #128]	; 0x80
   16a08:	ldrh	r1, [r3, #12]
   16a0c:	sub	r2, r2, #1
   16a10:	sub	r3, r3, #36	; 0x24
   16a14:	str	r2, [r4, #156]	; 0x9c
   16a18:	strh	r1, [r4, #130]	; 0x82
   16a1c:	str	r3, [r4, #32]
   16a20:	mov	r0, r5
   16a24:	add	sp, sp, #88	; 0x58
   16a28:	pop	{r4, r5, r6, pc}
   16a2c:	ldr	r3, [pc, #60]	; 16a70 <flatcc_builder_end_vector@@Base+0x1d0>
   16a30:	ldr	r2, [pc, #60]	; 16a74 <flatcc_builder_end_vector@@Base+0x1d4>
   16a34:	ldr	r1, [pc, #60]	; 16a78 <flatcc_builder_end_vector@@Base+0x1d8>
   16a38:	ldr	r0, [pc, #60]	; 16a7c <flatcc_builder_end_vector@@Base+0x1dc>
   16a3c:	bl	1234c <__assert_fail@plt>
   16a40:	bl	123a4 <__assert_fail@plt+0x58>
   16a44:	ldr	r3, [pc, #52]	; 16a80 <flatcc_builder_end_vector@@Base+0x1e0>
   16a48:	ldr	r2, [pc, #52]	; 16a84 <flatcc_builder_end_vector@@Base+0x1e4>
   16a4c:	ldr	r1, [pc, #36]	; 16a78 <flatcc_builder_end_vector@@Base+0x1d8>
   16a50:	ldr	r0, [pc, #48]	; 16a88 <flatcc_builder_end_vector@@Base+0x1e8>
   16a54:	bl	1234c <__assert_fail@plt>
   16a58:	ldr	r3, [pc, #44]	; 16a8c <flatcc_builder_end_vector@@Base+0x1ec>
   16a5c:	ldr	r2, [pc, #44]	; 16a90 <flatcc_builder_end_vector@@Base+0x1f0>
   16a60:	ldr	r1, [pc, #16]	; 16a78 <flatcc_builder_end_vector@@Base+0x1d8>
   16a64:	ldr	r0, [pc, #40]	; 16a94 <flatcc_builder_end_vector@@Base+0x1f4>
   16a68:	bl	1234c <__assert_fail@plt>
   16a6c:	andeq	sl, r1, r4, lsr #18
   16a70:	andeq	sl, r1, r8, lsr #17
   16a74:	andeq	r0, r0, fp, lsl #5
   16a78:	ldrdeq	sl, [r1], -ip
   16a7c:	muleq	r1, ip, r0
   16a80:	andeq	sl, r1, r8, lsl #28
   16a84:	andeq	r0, r0, r5, asr r5
   16a88:	ldrdeq	fp, [r1], -r4
   16a8c:	andeq	sl, r1, r8, lsr #28
   16a90:	andeq	r0, r0, r8, ror r5
   16a94:	andeq	fp, r1, r8, asr #2

00016a98 <flatcc_builder_vector_count@@Base>:
   16a98:	ldr	r3, [r0, #32]
   16a9c:	ldr	r0, [r3, #20]
   16aa0:	bx	lr

00016aa4 <flatcc_builder_vector_edit@@Base>:
   16aa4:	ldr	r0, [r0, #16]
   16aa8:	bx	lr

00016aac <flatcc_builder_create_offset_vector_direct@@Base>:
   16aac:	cmn	r2, #-1073741823	; 0xc0000001
   16ab0:	bls	16abc <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   16ab4:	mov	r0, #0
   16ab8:	bx	lr
   16abc:	b	13280 <flatcc_builder_default_alloc@@Base+0x2fc>

00016ac0 <flatcc_builder_end_offset_vector@@Base>:
   16ac0:	ldr	r3, [r0, #32]
   16ac4:	push	{r4, r5, r6, lr}
   16ac8:	ldrh	r2, [r3, #14]
   16acc:	cmp	r2, #5
   16ad0:	bne	16b80 <flatcc_builder_end_offset_vector@@Base+0xc0>
   16ad4:	ldr	r2, [r3, #20]
   16ad8:	cmn	r2, #-1073741823	; 0xc0000001
   16adc:	bls	16aec <flatcc_builder_end_offset_vector@@Base+0x2c>
   16ae0:	mov	r5, #0
   16ae4:	mov	r0, r5
   16ae8:	pop	{r4, r5, r6, pc}
   16aec:	ldr	r1, [r0, #16]
   16af0:	mov	r4, r0
   16af4:	bl	13280 <flatcc_builder_default_alloc@@Base+0x2fc>
   16af8:	subs	r5, r0, #0
   16afc:	beq	16ae0 <flatcc_builder_end_offset_vector@@Base+0x20>
   16b00:	ldr	r2, [r4, #20]
   16b04:	mov	r1, #0
   16b08:	ldr	r0, [r4, #16]
   16b0c:	bl	1231c <memset@plt>
   16b10:	ldr	r3, [r4, #32]
   16b14:	ldr	r2, [r4, #64]	; 0x40
   16b18:	ldrh	lr, [r4, #130]	; 0x82
   16b1c:	ldr	ip, [r3]
   16b20:	ldr	r1, [r3, #4]
   16b24:	ldrh	r0, [r4, #128]	; 0x80
   16b28:	sub	r2, r2, ip
   16b2c:	cmp	r2, r1
   16b30:	movcs	r2, r1
   16b34:	cmp	r0, lr
   16b38:	ldr	r0, [r4, #60]	; 0x3c
   16b3c:	ldr	r6, [r3, #8]
   16b40:	str	r2, [r4, #24]
   16b44:	add	r2, r0, ip
   16b48:	str	r2, [r4, #16]
   16b4c:	str	r6, [r4, #20]
   16b50:	ldr	r2, [r4, #156]	; 0x9c
   16b54:	str	ip, [r4, #28]
   16b58:	str	r1, [r3, #4]
   16b5c:	strhcc	lr, [r4, #128]	; 0x80
   16b60:	ldrh	r1, [r3, #12]
   16b64:	sub	r2, r2, #1
   16b68:	sub	r3, r3, #36	; 0x24
   16b6c:	str	r2, [r4, #156]	; 0x9c
   16b70:	strh	r1, [r4, #130]	; 0x82
   16b74:	str	r3, [r4, #32]
   16b78:	mov	r0, r5
   16b7c:	pop	{r4, r5, r6, pc}
   16b80:	ldr	r3, [pc, #12]	; 16b94 <flatcc_builder_end_offset_vector@@Base+0xd4>
   16b84:	ldr	r2, [pc, #12]	; 16b98 <flatcc_builder_end_offset_vector@@Base+0xd8>
   16b88:	ldr	r1, [pc, #12]	; 16b9c <flatcc_builder_end_offset_vector@@Base+0xdc>
   16b8c:	ldr	r0, [pc, #12]	; 16ba0 <flatcc_builder_end_offset_vector@@Base+0xe0>
   16b90:	bl	1234c <__assert_fail@plt>
   16b94:	andeq	sl, r1, r8, lsl sp
   16b98:	andeq	r0, r0, r8, asr #11
   16b9c:	ldrdeq	sl, [r1], -ip
   16ba0:			; <UNDEFINED> instruction: 0x0001b1b4

00016ba4 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   16ba4:	ldr	r2, [r0, #32]
   16ba8:	push	{r4, r5, r6, lr}
   16bac:	ldrh	ip, [r2, #14]
   16bb0:	cmp	ip, #5
   16bb4:	bne	16c68 <flatcc_builder_end_offset_vector_for_unions@@Base+0xc4>
   16bb8:	ldr	r2, [r2, #20]
   16bbc:	cmn	r2, #-1073741823	; 0xc0000001
   16bc0:	bls	16bd0 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   16bc4:	mov	r5, #0
   16bc8:	mov	r0, r5
   16bcc:	pop	{r4, r5, r6, pc}
   16bd0:	mov	r3, r1
   16bd4:	ldr	r1, [r0, #16]
   16bd8:	mov	r4, r0
   16bdc:	bl	13090 <flatcc_builder_default_alloc@@Base+0x10c>
   16be0:	subs	r5, r0, #0
   16be4:	beq	16bc4 <flatcc_builder_end_offset_vector_for_unions@@Base+0x20>
   16be8:	ldr	r2, [r4, #20]
   16bec:	mov	r1, #0
   16bf0:	ldr	r0, [r4, #16]
   16bf4:	bl	1231c <memset@plt>
   16bf8:	ldr	r3, [r4, #32]
   16bfc:	ldr	r2, [r4, #64]	; 0x40
   16c00:	ldrh	lr, [r4, #130]	; 0x82
   16c04:	ldr	ip, [r3]
   16c08:	ldr	r1, [r3, #4]
   16c0c:	ldrh	r0, [r4, #128]	; 0x80
   16c10:	sub	r2, r2, ip
   16c14:	cmp	r2, r1
   16c18:	movcs	r2, r1
   16c1c:	cmp	r0, lr
   16c20:	ldr	r0, [r4, #60]	; 0x3c
   16c24:	ldr	r6, [r3, #8]
   16c28:	str	r2, [r4, #24]
   16c2c:	add	r2, r0, ip
   16c30:	str	r2, [r4, #16]
   16c34:	str	r6, [r4, #20]
   16c38:	ldr	r2, [r4, #156]	; 0x9c
   16c3c:	str	ip, [r4, #28]
   16c40:	str	r1, [r3, #4]
   16c44:	strhcc	lr, [r4, #128]	; 0x80
   16c48:	ldrh	r1, [r3, #12]
   16c4c:	sub	r2, r2, #1
   16c50:	sub	r3, r3, #36	; 0x24
   16c54:	str	r2, [r4, #156]	; 0x9c
   16c58:	strh	r1, [r4, #130]	; 0x82
   16c5c:	str	r3, [r4, #32]
   16c60:	mov	r0, r5
   16c64:	pop	{r4, r5, r6, pc}
   16c68:	ldr	r3, [pc, #12]	; 16c7c <flatcc_builder_end_offset_vector_for_unions@@Base+0xd8>
   16c6c:	ldr	r2, [pc, #12]	; 16c80 <flatcc_builder_end_offset_vector_for_unions@@Base+0xdc>
   16c70:	ldr	r1, [pc, #12]	; 16c84 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe0>
   16c74:	ldr	r0, [pc, #12]	; 16c88 <flatcc_builder_end_offset_vector_for_unions@@Base+0xe4>
   16c78:	bl	1234c <__assert_fail@plt>
   16c7c:	andeq	sl, r1, r4, asr #28
   16c80:	ldrdeq	r0, [r0], -r5
   16c84:	ldrdeq	sl, [r1], -ip
   16c88:			; <UNDEFINED> instruction: 0x0001b1b4

00016c8c <flatcc_builder_offset_vector_edit@@Base>:
   16c8c:	ldr	r0, [r0, #16]
   16c90:	bx	lr

00016c94 <flatcc_builder_offset_vector_count@@Base>:
   16c94:	ldr	r3, [r0, #32]
   16c98:	ldr	r0, [r3, #20]
   16c9c:	bx	lr

00016ca0 <flatcc_builder_create_union_vector@@Base>:
   16ca0:	push	{r4, r5, r6, r7, r8, r9, lr}
   16ca4:	mov	r6, r0
   16ca8:	ldr	r0, [r1, #156]	; 0x9c
   16cac:	ldr	ip, [r1, #160]	; 0xa0
   16cb0:	mov	r4, r1
   16cb4:	add	r1, r0, #1
   16cb8:	cmp	r1, ip
   16cbc:	sub	sp, sp, #12
   16cc0:	mov	r5, r2
   16cc4:	mov	r7, r3
   16cc8:	str	r1, [r4, #156]	; 0x9c
   16ccc:	ble	16d54 <flatcc_builder_create_union_vector@@Base+0xb4>
   16cd0:	ldr	r3, [r4, #176]	; 0xb0
   16cd4:	cmp	r1, r3
   16cd8:	cmpgt	r3, #0
   16cdc:	movgt	r3, #1
   16ce0:	movle	r3, #0
   16ce4:	bgt	16d3c <flatcc_builder_create_union_vector@@Base+0x9c>
   16ce8:	add	r0, r0, r0, lsl #3
   16cec:	ldr	r1, [r4, #88]	; 0x58
   16cf0:	lsl	r8, r0, #2
   16cf4:	add	r2, r8, #36	; 0x24
   16cf8:	cmp	r2, r1
   16cfc:	bhi	16f70 <flatcc_builder_create_union_vector@@Base+0x2d0>
   16d00:	ldr	r3, [r4, #84]	; 0x54
   16d04:	add	r3, r3, r8
   16d08:	cmp	r3, #0
   16d0c:	str	r3, [r4, #32]
   16d10:	beq	16d3c <flatcc_builder_create_union_vector@@Base+0x9c>
   16d14:	ldr	r2, [r4, #88]	; 0x58
   16d18:	ldr	r0, [pc, #732]	; 16ffc <flatcc_builder_create_union_vector@@Base+0x35c>
   16d1c:	ldr	r1, [r4, #176]	; 0xb0
   16d20:	umull	r0, r2, r0, r2
   16d24:	lsr	r2, r2, #3
   16d28:	cmp	r1, #0
   16d2c:	cmpgt	r2, r1
   16d30:	str	r2, [r4, #160]	; 0xa0
   16d34:	strgt	r1, [r4, #160]	; 0xa0
   16d38:	b	16d60 <flatcc_builder_create_union_vector@@Base+0xc0>
   16d3c:	mov	r3, #0
   16d40:	mov	r0, r6
   16d44:	str	r3, [r6]
   16d48:	str	r3, [r6, #4]
   16d4c:	add	sp, sp, #12
   16d50:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16d54:	ldr	r3, [r4, #32]
   16d58:	add	r3, r3, #36	; 0x24
   16d5c:	str	r3, [r4, #32]
   16d60:	ldr	r1, [r4, #20]
   16d64:	ldr	ip, [r4, #28]
   16d68:	ldrh	r8, [r4, #130]	; 0x82
   16d6c:	add	r2, r1, ip
   16d70:	mvn	lr, #3
   16d74:	add	r2, r2, #7
   16d78:	str	r1, [r3, #8]
   16d7c:	bic	r2, r2, #7
   16d80:	mov	r0, #4
   16d84:	mov	r1, #0
   16d88:	strh	r8, [r3, #12]
   16d8c:	strh	r0, [r4, #130]	; 0x82
   16d90:	stm	r3, {ip, lr}
   16d94:	str	r1, [r4, #20]
   16d98:	str	r2, [r4, #28]
   16d9c:	str	r0, [r3, #16]
   16da0:	str	r1, [r3, #20]
   16da4:	ldr	r0, [r4, #64]	; 0x40
   16da8:	ldr	r1, [r4, #60]	; 0x3c
   16dac:	sub	r0, r0, r2
   16db0:	cmp	r0, lr
   16db4:	mov	ip, #5
   16db8:	strh	ip, [r3, #14]
   16dbc:	add	r1, r1, r2
   16dc0:	strls	r0, [r4, #24]
   16dc4:	strhi	lr, [r4, #24]
   16dc8:	movhi	r0, lr
   16dcc:	mvn	r8, #3
   16dd0:	cmn	r7, #-1073741823	; 0xc0000001
   16dd4:	str	r1, [r4, #16]
   16dd8:	str	r8, [r3, #4]
   16ddc:	bhi	16ff0 <flatcc_builder_create_union_vector@@Base+0x350>
   16de0:	lsl	ip, r7, #2
   16de4:	cmp	ip, r0
   16de8:	str	r7, [r3, #20]
   16dec:	str	ip, [r4, #20]
   16df0:	bcs	16f18 <flatcc_builder_create_union_vector@@Base+0x278>
   16df4:	cmp	r1, #0
   16df8:	beq	16d3c <flatcc_builder_create_union_vector@@Base+0x9c>
   16dfc:	ldr	r8, [r4, #20]
   16e00:	ldr	r0, [r4, #24]
   16e04:	add	r3, r7, r8
   16e08:	cmp	r3, r0
   16e0c:	str	r3, [r4, #20]
   16e10:	bcs	16f94 <flatcc_builder_create_union_vector@@Base+0x2f4>
   16e14:	adds	r8, r1, r8
   16e18:	beq	16d3c <flatcc_builder_create_union_vector@@Base+0x9c>
   16e1c:	cmp	r7, #0
   16e20:	movne	r2, r5
   16e24:	addne	lr, r2, r7, lsl #3
   16e28:	subne	r0, r8, #1
   16e2c:	subne	r3, r1, #4
   16e30:	beq	16e50 <flatcc_builder_create_union_vector@@Base+0x1b0>
   16e34:	ldrb	ip, [r2]
   16e38:	add	r2, r2, #8
   16e3c:	strb	ip, [r0, #1]!
   16e40:	ldr	ip, [r2, #-4]
   16e44:	cmp	lr, r2
   16e48:	str	ip, [r3, #4]!
   16e4c:	bne	16e34 <flatcc_builder_create_union_vector@@Base+0x194>
   16e50:	mov	r3, r8
   16e54:	mov	r2, r7
   16e58:	mov	r0, r4
   16e5c:	bl	13090 <flatcc_builder_default_alloc@@Base+0x10c>
   16e60:	subs	r5, r0, #0
   16e64:	beq	16ff4 <flatcc_builder_create_union_vector@@Base+0x354>
   16e68:	mvn	r0, #0
   16e6c:	mov	r3, #1
   16e70:	mov	r2, r7
   16e74:	str	r0, [sp, #4]
   16e78:	mov	r1, r8
   16e7c:	str	r3, [sp]
   16e80:	mov	r0, r4
   16e84:	bl	16760 <flatcc_builder_create_vector@@Base>
   16e88:	mov	r7, r0
   16e8c:	ldr	r2, [r4, #20]
   16e90:	mov	r1, #0
   16e94:	ldr	r0, [r4, #16]
   16e98:	bl	1231c <memset@plt>
   16e9c:	ldr	r3, [r4, #32]
   16ea0:	ldr	r2, [r4, #64]	; 0x40
   16ea4:	ldrh	lr, [r4, #130]	; 0x82
   16ea8:	ldr	ip, [r3]
   16eac:	ldr	r1, [r3, #4]
   16eb0:	ldrh	r0, [r4, #128]	; 0x80
   16eb4:	sub	r2, r2, ip
   16eb8:	cmp	r2, r1
   16ebc:	movcs	r2, r1
   16ec0:	cmp	r0, lr
   16ec4:	ldr	r0, [r4, #60]	; 0x3c
   16ec8:	ldr	r8, [r3, #8]
   16ecc:	str	r2, [r4, #24]
   16ed0:	add	r2, r0, ip
   16ed4:	str	r2, [r4, #16]
   16ed8:	str	r8, [r4, #20]
   16edc:	ldr	r2, [r4, #156]	; 0x9c
   16ee0:	str	ip, [r4, #28]
   16ee4:	str	r1, [r3, #4]
   16ee8:	strhcc	lr, [r4, #128]	; 0x80
   16eec:	ldrh	r1, [r3, #12]
   16ef0:	sub	r2, r2, #1
   16ef4:	sub	r3, r3, #36	; 0x24
   16ef8:	mov	r0, r6
   16efc:	str	r7, [r6]
   16f00:	str	r5, [r6, #4]
   16f04:	str	r2, [r4, #156]	; 0x9c
   16f08:	strh	r1, [r4, #130]	; 0x82
   16f0c:	str	r3, [r4, #32]
   16f10:	add	sp, sp, #12
   16f14:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16f18:	add	ip, ip, #1
   16f1c:	mov	r3, #1
   16f20:	ldr	r0, [r4, #40]	; 0x28
   16f24:	add	r2, ip, r2
   16f28:	str	r3, [sp]
   16f2c:	add	r1, r4, #60	; 0x3c
   16f30:	ldr	r9, [r4, #48]	; 0x30
   16f34:	blx	r9
   16f38:	cmp	r0, #0
   16f3c:	bne	16d3c <flatcc_builder_create_union_vector@@Base+0x9c>
   16f40:	ldr	r2, [r4, #28]
   16f44:	ldr	r3, [r4, #64]	; 0x40
   16f48:	ldr	r1, [r4, #60]	; 0x3c
   16f4c:	sub	r3, r3, r2
   16f50:	ldr	r0, [r4, #32]
   16f54:	cmn	r3, #4
   16f58:	movhi	r3, r8
   16f5c:	add	r1, r1, r2
   16f60:	str	r3, [r4, #24]
   16f64:	str	r1, [r4, #16]
   16f68:	str	r8, [r0, #4]
   16f6c:	b	16df4 <flatcc_builder_create_union_vector@@Base+0x154>
   16f70:	mov	r1, #4
   16f74:	ldr	r0, [r4, #40]	; 0x28
   16f78:	str	r1, [sp]
   16f7c:	add	r1, r4, #84	; 0x54
   16f80:	ldr	r9, [r4, #48]	; 0x30
   16f84:	blx	r9
   16f88:	cmp	r0, #0
   16f8c:	beq	16d00 <flatcc_builder_create_union_vector@@Base+0x60>
   16f90:	bl	12358 <__assert_fail@plt+0xc>
   16f94:	add	r1, r3, #1
   16f98:	mov	r3, #1
   16f9c:	ldr	r0, [r4, #40]	; 0x28
   16fa0:	add	r2, r1, r2
   16fa4:	str	r3, [sp]
   16fa8:	add	r1, r4, #60	; 0x3c
   16fac:	ldr	r9, [r4, #48]	; 0x30
   16fb0:	blx	r9
   16fb4:	cmp	r0, #0
   16fb8:	bne	16d3c <flatcc_builder_create_union_vector@@Base+0x9c>
   16fbc:	ldr	r2, [r4, #28]
   16fc0:	ldr	r3, [r4, #64]	; 0x40
   16fc4:	ldr	r1, [r4, #60]	; 0x3c
   16fc8:	sub	r3, r3, r2
   16fcc:	cmn	r3, #4
   16fd0:	mvnhi	r3, #3
   16fd4:	str	r3, [r4, #24]
   16fd8:	ldr	r3, [r4, #32]
   16fdc:	add	r1, r1, r2
   16fe0:	mvn	r2, #3
   16fe4:	str	r1, [r4, #16]
   16fe8:	str	r2, [r3, #4]
   16fec:	b	16e14 <flatcc_builder_create_union_vector@@Base+0x174>
   16ff0:	bl	123cc <__assert_fail@plt+0x80>
   16ff4:	mov	r7, r5
   16ff8:	b	16e8c <flatcc_builder_create_union_vector@@Base+0x1ec>
   16ffc:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00017000 <flatcc_builder_create_union_vector_direct@@Base>:
   17000:	push	{r4, r5, r6, r7, r8, lr}
   17004:	sub	sp, sp, #88	; 0x58
   17008:	mov	r4, r0
   1700c:	ldr	r5, [sp, #112]	; 0x70
   17010:	cmn	r5, #-1073741823	; 0xc0000001
   17014:	bls	17030 <flatcc_builder_create_union_vector_direct@@Base+0x30>
   17018:	mov	r3, #0
   1701c:	mov	r0, r4
   17020:	str	r3, [r4]
   17024:	str	r3, [r4, #4]
   17028:	add	sp, sp, #88	; 0x58
   1702c:	pop	{r4, r5, r6, r7, r8, pc}
   17030:	mov	r6, r1
   17034:	mov	r8, r2
   17038:	mov	r1, r3
   1703c:	mov	r0, r6
   17040:	mov	r3, r2
   17044:	mov	r2, r5
   17048:	bl	13090 <flatcc_builder_default_alloc@@Base+0x10c>
   1704c:	subs	r7, r0, #0
   17050:	beq	17018 <flatcc_builder_create_union_vector_direct@@Base+0x18>
   17054:	ldrh	r3, [r6, #128]	; 0x80
   17058:	ldr	r0, [r6, #136]	; 0x88
   1705c:	mov	r2, #1
   17060:	cmp	r3, #3
   17064:	movls	r3, #4
   17068:	strhls	r3, [r6, #128]	; 0x80
   1706c:	sub	r1, r0, r5
   17070:	cmp	r5, #0
   17074:	mov	r3, #4
   17078:	add	ip, sp, #12
   1707c:	str	r3, [sp, #16]
   17080:	str	r2, [sp, #20]
   17084:	and	r1, r1, #3
   17088:	movne	r2, #2
   1708c:	str	r3, [sp, #28]
   17090:	addne	r3, r5, r3
   17094:	str	ip, [sp, #24]
   17098:	strne	r8, [sp, #32]
   1709c:	strne	r5, [sp, #36]	; 0x24
   170a0:	strne	r3, [sp, #16]
   170a4:	strne	r2, [sp, #20]
   170a8:	movne	ip, #3
   170ac:	moveq	ip, #2
   170b0:	cmp	r1, #0
   170b4:	str	r5, [sp, #12]
   170b8:	beq	170e4 <flatcc_builder_create_union_vector_direct@@Base+0xe4>
   170bc:	add	r2, r2, #1
   170c0:	add	lr, sp, #88	; 0x58
   170c4:	add	lr, lr, r2, lsl #3
   170c8:	ldr	r5, [pc, #108]	; 1713c <flatcc_builder_create_union_vector_direct@@Base+0x13c>
   170cc:	mov	r2, ip
   170d0:	add	r3, r3, r1
   170d4:	str	r1, [lr, #-68]	; 0xffffffbc
   170d8:	str	r3, [sp, #16]
   170dc:	str	ip, [sp, #20]
   170e0:	str	r5, [lr, #-72]	; 0xffffffb8
   170e4:	sub	r5, r0, r3
   170e8:	cmp	r0, r5
   170ec:	ble	17124 <flatcc_builder_create_union_vector_direct@@Base+0x124>
   170f0:	ldr	r0, [r6, #36]	; 0x24
   170f4:	add	r1, sp, #24
   170f8:	str	r3, [sp]
   170fc:	mov	r3, r5
   17100:	ldr	r8, [r6, #44]	; 0x2c
   17104:	blx	r8
   17108:	cmp	r0, #0
   1710c:	bne	17128 <flatcc_builder_create_union_vector_direct@@Base+0x128>
   17110:	mov	r0, r4
   17114:	str	r5, [r6, #136]	; 0x88
   17118:	stm	r4, {r5, r7}
   1711c:	add	sp, sp, #88	; 0x58
   17120:	pop	{r4, r5, r6, r7, r8, pc}
   17124:	bl	123a4 <__assert_fail@plt+0x58>
   17128:	ldr	r3, [pc, #16]	; 17140 <flatcc_builder_create_union_vector_direct@@Base+0x140>
   1712c:	ldr	r2, [pc, #16]	; 17144 <flatcc_builder_create_union_vector_direct@@Base+0x144>
   17130:	ldr	r1, [pc, #16]	; 17148 <flatcc_builder_create_union_vector_direct@@Base+0x148>
   17134:	ldr	r0, [pc, #16]	; 1714c <flatcc_builder_create_union_vector_direct@@Base+0x14c>
   17138:	bl	1234c <__assert_fail@plt>
   1713c:	andeq	sl, r1, r4, lsr #18
   17140:	andeq	sl, r1, r8, lsr #17
   17144:	andeq	r0, r0, fp, lsl #5
   17148:	ldrdeq	sl, [r1], -ip
   1714c:	muleq	r1, ip, r0

00017150 <flatcc_builder_start_union_vector@@Base>:
   17150:	ldr	r1, [r0, #156]	; 0x9c
   17154:	ldr	r3, [r0, #160]	; 0xa0
   17158:	add	r2, r1, #1
   1715c:	cmp	r2, r3
   17160:	push	{r4, r5, r6, lr}
   17164:	mov	r4, r0
   17168:	sub	sp, sp, #8
   1716c:	str	r2, [r0, #156]	; 0x9c
   17170:	ble	171e0 <flatcc_builder_start_union_vector@@Base+0x90>
   17174:	ldr	r3, [r0, #176]	; 0xb0
   17178:	cmp	r3, #0
   1717c:	cmpgt	r2, r3
   17180:	movgt	r3, #1
   17184:	movle	r3, #0
   17188:	bgt	1728c <flatcc_builder_start_union_vector@@Base+0x13c>
   1718c:	add	r1, r1, r1, lsl #3
   17190:	ldr	r0, [r0, #88]	; 0x58
   17194:	lsl	r5, r1, #2
   17198:	add	r2, r5, #36	; 0x24
   1719c:	cmp	r2, r0
   171a0:	bhi	17268 <flatcc_builder_start_union_vector@@Base+0x118>
   171a4:	ldr	r3, [r4, #84]	; 0x54
   171a8:	add	r3, r3, r5
   171ac:	cmp	r3, #0
   171b0:	str	r3, [r4, #32]
   171b4:	beq	1728c <flatcc_builder_start_union_vector@@Base+0x13c>
   171b8:	ldr	r2, [r4, #88]	; 0x58
   171bc:	ldr	r0, [pc, #208]	; 17294 <flatcc_builder_start_union_vector@@Base+0x144>
   171c0:	ldr	r1, [r4, #176]	; 0xb0
   171c4:	umull	r0, r2, r0, r2
   171c8:	lsr	r2, r2, #3
   171cc:	cmp	r1, #0
   171d0:	cmpgt	r2, r1
   171d4:	str	r2, [r4, #160]	; 0xa0
   171d8:	strgt	r1, [r4, #160]	; 0xa0
   171dc:	b	171ec <flatcc_builder_start_union_vector@@Base+0x9c>
   171e0:	ldr	r3, [r0, #32]
   171e4:	add	r3, r3, #36	; 0x24
   171e8:	str	r3, [r0, #32]
   171ec:	ldr	ip, [r4, #20]
   171f0:	ldr	r1, [r4, #28]
   171f4:	ldrh	r5, [r4, #130]	; 0x82
   171f8:	add	r2, ip, r1
   171fc:	add	r2, r2, #7
   17200:	str	ip, [r3, #8]
   17204:	bic	r2, r2, #7
   17208:	mov	lr, #4
   1720c:	mov	r0, #0
   17210:	mov	ip, #8
   17214:	strh	r5, [r3, #12]
   17218:	strh	lr, [r4, #130]	; 0x82
   1721c:	str	r1, [r3]
   17220:	str	r2, [r4, #28]
   17224:	str	r0, [r4, #20]
   17228:	str	r0, [r3, #20]
   1722c:	str	ip, [r3, #16]
   17230:	ldr	r1, [r4, #64]	; 0x40
   17234:	ldr	ip, [r4, #60]	; 0x3c
   17238:	sub	r1, r1, r2
   1723c:	mvn	lr, #3
   17240:	cmp	r1, lr
   17244:	add	r2, ip, r2
   17248:	movhi	r1, lr
   1724c:	mov	ip, #7
   17250:	strh	ip, [r3, #14]
   17254:	str	r2, [r4, #16]
   17258:	str	r1, [r4, #24]
   1725c:	str	lr, [r3, #4]
   17260:	add	sp, sp, #8
   17264:	pop	{r4, r5, r6, pc}
   17268:	mov	r1, #4
   1726c:	ldr	r0, [r4, #40]	; 0x28
   17270:	str	r1, [sp]
   17274:	add	r1, r4, #84	; 0x54
   17278:	ldr	r6, [r4, #48]	; 0x30
   1727c:	blx	r6
   17280:	cmp	r0, #0
   17284:	beq	171a4 <flatcc_builder_start_union_vector@@Base+0x54>
   17288:	bl	12358 <__assert_fail@plt+0xc>
   1728c:	mvn	r0, #0
   17290:	b	17260 <flatcc_builder_start_union_vector@@Base+0x110>
   17294:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^

00017298 <flatcc_builder_end_union_vector@@Base>:
   17298:	ldr	r3, [r1, #32]
   1729c:	push	{r4, r5, r6, r7, r8, r9, lr}
   172a0:	sub	sp, sp, #12
   172a4:	ldrh	r2, [r3, #14]
   172a8:	cmp	r2, #7
   172ac:	bne	1746c <flatcc_builder_end_union_vector@@Base+0x1d4>
   172b0:	ldr	r5, [r3, #20]
   172b4:	ldr	r8, [r1, #20]
   172b8:	ldr	r3, [r1, #24]
   172bc:	lsl	r7, r5, #2
   172c0:	add	r2, r7, r5
   172c4:	add	r2, r2, r8
   172c8:	cmp	r2, r3
   172cc:	mov	r4, r1
   172d0:	mov	r6, r0
   172d4:	str	r2, [r1, #20]
   172d8:	bcs	173b4 <flatcc_builder_end_union_vector@@Base+0x11c>
   172dc:	ldr	r3, [r1, #16]
   172e0:	adds	r1, r3, r8
   172e4:	beq	17454 <flatcc_builder_end_union_vector@@Base+0x1bc>
   172e8:	cmp	r5, #0
   172ec:	add	r7, r1, r7
   172f0:	addne	lr, r3, r5, lsl #3
   172f4:	subne	r0, r7, #1
   172f8:	subne	r2, r1, #4
   172fc:	beq	17414 <flatcc_builder_end_union_vector@@Base+0x17c>
   17300:	ldrb	ip, [r3]
   17304:	add	r3, r3, #8
   17308:	strb	ip, [r0, #1]!
   1730c:	ldr	ip, [r3, #-4]
   17310:	cmp	lr, r3
   17314:	str	ip, [r2, #4]!
   17318:	bne	17300 <flatcc_builder_end_union_vector@@Base+0x68>
   1731c:	cmn	r5, #-1073741823	; 0xc0000001
   17320:	bls	17414 <flatcc_builder_end_union_vector@@Base+0x17c>
   17324:	mov	r8, #0
   17328:	mov	r5, r8
   1732c:	ldr	r2, [r4, #20]
   17330:	mov	r1, #0
   17334:	ldr	r0, [r4, #16]
   17338:	bl	1231c <memset@plt>
   1733c:	ldr	r3, [r4, #32]
   17340:	ldr	r2, [r4, #64]	; 0x40
   17344:	ldrh	lr, [r4, #130]	; 0x82
   17348:	ldr	ip, [r3]
   1734c:	ldr	r1, [r3, #4]
   17350:	ldrh	r0, [r4, #128]	; 0x80
   17354:	sub	r2, r2, ip
   17358:	cmp	r2, r1
   1735c:	movcs	r2, r1
   17360:	cmp	r0, lr
   17364:	ldr	r0, [r4, #60]	; 0x3c
   17368:	ldr	r7, [r3, #8]
   1736c:	str	r2, [r4, #24]
   17370:	add	r2, r0, ip
   17374:	str	r2, [r4, #16]
   17378:	str	r7, [r4, #20]
   1737c:	ldr	r2, [r4, #156]	; 0x9c
   17380:	str	ip, [r4, #28]
   17384:	str	r1, [r3, #4]
   17388:	strhcc	lr, [r4, #128]	; 0x80
   1738c:	ldrh	r1, [r3, #12]
   17390:	sub	r2, r2, #1
   17394:	sub	r3, r3, #36	; 0x24
   17398:	mov	r0, r6
   1739c:	stm	r6, {r5, r8}
   173a0:	str	r2, [r4, #156]	; 0x9c
   173a4:	strh	r1, [r4, #130]	; 0x82
   173a8:	str	r3, [r4, #32]
   173ac:	add	sp, sp, #12
   173b0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   173b4:	ldr	r1, [r1, #28]
   173b8:	mov	r3, #1
   173bc:	add	r1, r1, #1
   173c0:	ldr	r0, [r4, #40]	; 0x28
   173c4:	add	r2, r1, r2
   173c8:	str	r3, [sp]
   173cc:	add	r1, r4, #60	; 0x3c
   173d0:	ldr	r9, [r4, #48]	; 0x30
   173d4:	blx	r9
   173d8:	cmp	r0, #0
   173dc:	bne	17454 <flatcc_builder_end_union_vector@@Base+0x1bc>
   173e0:	ldr	r1, [r4, #28]
   173e4:	ldr	r2, [r4, #64]	; 0x40
   173e8:	ldr	r3, [r4, #60]	; 0x3c
   173ec:	sub	r2, r2, r1
   173f0:	cmn	r2, #4
   173f4:	mvnhi	r2, #3
   173f8:	str	r2, [r4, #24]
   173fc:	ldr	r2, [r4, #32]
   17400:	add	r3, r3, r1
   17404:	mvn	r1, #3
   17408:	str	r3, [r4, #16]
   1740c:	str	r1, [r2, #4]
   17410:	b	172e0 <flatcc_builder_end_union_vector@@Base+0x48>
   17414:	mov	r3, r7
   17418:	mov	r2, r5
   1741c:	mov	r0, r4
   17420:	bl	13090 <flatcc_builder_default_alloc@@Base+0x10c>
   17424:	subs	r8, r0, #0
   17428:	beq	17324 <flatcc_builder_end_union_vector@@Base+0x8c>
   1742c:	mvn	r0, #0
   17430:	mov	r3, #1
   17434:	mov	r2, r5
   17438:	str	r0, [sp, #4]
   1743c:	mov	r1, r7
   17440:	str	r3, [sp]
   17444:	mov	r0, r4
   17448:	bl	16760 <flatcc_builder_create_vector@@Base>
   1744c:	mov	r5, r0
   17450:	b	1732c <flatcc_builder_end_union_vector@@Base+0x94>
   17454:	mov	r3, #0
   17458:	mov	r0, r6
   1745c:	str	r3, [r6]
   17460:	str	r3, [r6, #4]
   17464:	add	sp, sp, #12
   17468:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1746c:	ldr	r3, [pc, #12]	; 17480 <flatcc_builder_end_union_vector@@Base+0x1e8>
   17470:	ldr	r2, [pc, #12]	; 17484 <flatcc_builder_end_union_vector@@Base+0x1ec>
   17474:	ldr	r1, [pc, #12]	; 17488 <flatcc_builder_end_union_vector@@Base+0x1f0>
   17478:	ldr	r0, [pc, #12]	; 1748c <flatcc_builder_end_union_vector@@Base+0x1f4>
   1747c:	bl	1234c <__assert_fail@plt>
   17480:	andeq	sl, r1, r0, ror lr
   17484:	andeq	r0, r0, r1, asr r6
   17488:	ldrdeq	sl, [r1], -ip
   1748c:	andeq	fp, r1, r8, ror #5

00017490 <flatcc_builder_union_vector_edit@@Base>:
   17490:	ldr	r0, [r0, #16]
   17494:	bx	lr

00017498 <flatcc_builder_union_vector_count@@Base>:
   17498:	ldr	r3, [r0, #32]
   1749c:	ldr	r0, [r3, #20]
   174a0:	bx	lr

000174a4 <flatcc_builder_extend_union_vector@@Base>:
   174a4:	ldr	ip, [r0, #32]
   174a8:	push	{r4, r5, r6, r7, lr}
   174ac:	mov	r4, r0
   174b0:	ldr	r3, [ip, #20]
   174b4:	sub	sp, sp, #12
   174b8:	adds	r3, r1, r3
   174bc:	movcs	r2, #1
   174c0:	movcc	r2, #0
   174c4:	cmn	r3, #-536870911	; 0xe0000001
   174c8:	movls	r0, #0
   174cc:	movhi	r0, #1
   174d0:	orrs	r5, r2, r0
   174d4:	bne	1756c <flatcc_builder_extend_union_vector@@Base+0xc8>
   174d8:	str	r3, [ip, #20]
   174dc:	ldr	r6, [r4, #20]
   174e0:	ldr	r3, [r4, #24]
   174e4:	add	r1, r6, r1, lsl #3
   174e8:	cmp	r1, r3
   174ec:	str	r1, [r4, #20]
   174f0:	bcs	17504 <flatcc_builder_extend_union_vector@@Base+0x60>
   174f4:	ldr	r0, [r4, #16]
   174f8:	add	r0, r0, r6
   174fc:	add	sp, sp, #12
   17500:	pop	{r4, r5, r6, r7, pc}
   17504:	ldr	r2, [r4, #28]
   17508:	mov	r3, #1
   1750c:	add	r2, r2, #1
   17510:	ldr	r0, [r4, #40]	; 0x28
   17514:	add	r2, r2, r1
   17518:	str	r3, [sp]
   1751c:	add	r1, r4, #60	; 0x3c
   17520:	ldr	r7, [r4, #48]	; 0x30
   17524:	blx	r7
   17528:	cmp	r0, #0
   1752c:	bne	17564 <flatcc_builder_extend_union_vector@@Base+0xc0>
   17530:	ldr	r2, [r4, #28]
   17534:	ldr	r3, [r4, #64]	; 0x40
   17538:	ldr	r0, [r4, #60]	; 0x3c
   1753c:	sub	r3, r3, r2
   17540:	cmn	r3, #4
   17544:	mvnhi	r3, #3
   17548:	str	r3, [r4, #24]
   1754c:	ldr	r3, [r4, #32]
   17550:	add	r0, r0, r2
   17554:	mvn	r2, #3
   17558:	str	r0, [r4, #16]
   1755c:	str	r2, [r3, #4]
   17560:	b	174f8 <flatcc_builder_extend_union_vector@@Base+0x54>
   17564:	mov	r0, r5
   17568:	b	174fc <flatcc_builder_extend_union_vector@@Base+0x58>
   1756c:	bl	123cc <__assert_fail@plt+0x80>

00017570 <flatcc_builder_truncate_union_vector@@Base>:
   17570:	ldr	r3, [r0, #32]
   17574:	push	{r4, lr}
   17578:	ldrh	r2, [r3, #14]
   1757c:	cmp	r2, #7
   17580:	bne	175c4 <flatcc_builder_truncate_union_vector@@Base+0x54>
   17584:	ldr	ip, [r3, #20]
   17588:	cmp	ip, r1
   1758c:	bcc	175d8 <flatcc_builder_truncate_union_vector@@Base+0x68>
   17590:	ldr	r2, [r3, #16]
   17594:	sub	ip, ip, r1
   17598:	str	ip, [r3, #20]
   1759c:	mul	r2, r2, r1
   175a0:	ldr	r3, [r0, #20]
   175a4:	ldr	r1, [r0, #16]
   175a8:	sub	r3, r3, r2
   175ac:	str	r3, [r0, #20]
   175b0:	add	r0, r1, r3
   175b4:	mov	r1, #0
   175b8:	bl	1231c <memset@plt>
   175bc:	mov	r0, #0
   175c0:	pop	{r4, pc}
   175c4:	ldr	r3, [pc, #32]	; 175ec <flatcc_builder_truncate_union_vector@@Base+0x7c>
   175c8:	ldr	r2, [pc, #32]	; 175f0 <flatcc_builder_truncate_union_vector@@Base+0x80>
   175cc:	ldr	r1, [pc, #32]	; 175f4 <flatcc_builder_truncate_union_vector@@Base+0x84>
   175d0:	ldr	r0, [pc, #32]	; 175f8 <flatcc_builder_truncate_union_vector@@Base+0x88>
   175d4:	bl	1234c <__assert_fail@plt>
   175d8:	ldr	r3, [pc, #12]	; 175ec <flatcc_builder_truncate_union_vector@@Base+0x7c>
   175dc:	ldr	r2, [pc, #24]	; 175fc <flatcc_builder_truncate_union_vector@@Base+0x8c>
   175e0:	ldr	r1, [pc, #12]	; 175f4 <flatcc_builder_truncate_union_vector@@Base+0x84>
   175e4:	ldr	r0, [pc, #20]	; 17600 <flatcc_builder_truncate_union_vector@@Base+0x90>
   175e8:	bl	1234c <__assert_fail@plt>
   175ec:	muleq	r1, r0, lr
   175f0:	andeq	r0, r0, r1, lsl #13
   175f4:	ldrdeq	sl, [r1], -ip
   175f8:	andeq	fp, r1, r8, ror #5
   175fc:	andeq	r0, r0, r2, lsl #13
   17600:	andeq	fp, r1, ip, lsl #4

00017604 <flatcc_builder_union_vector_push@@Base>:
   17604:	push	{r4, r5, r6, r7, lr}
   17608:	mov	r4, r0
   1760c:	ldr	r0, [r0, #32]
   17610:	sub	sp, sp, #20
   17614:	add	r5, sp, #8
   17618:	ldrh	r3, [r0, #14]
   1761c:	stm	r5, {r1, r2}
   17620:	cmp	r3, #7
   17624:	bne	176e8 <flatcc_builder_union_vector_push@@Base+0xe4>
   17628:	ldr	r3, [r0, #20]
   1762c:	cmn	r3, #-536870911	; 0xe0000001
   17630:	beq	176d8 <flatcc_builder_union_vector_push@@Base+0xd4>
   17634:	add	r3, r3, #1
   17638:	str	r3, [r0, #20]
   1763c:	ldr	r6, [r4, #20]
   17640:	ldr	r2, [r4, #24]
   17644:	add	r3, r6, #8
   17648:	cmp	r3, r2
   1764c:	str	r3, [r4, #20]
   17650:	bcs	17678 <flatcc_builder_union_vector_push@@Base+0x74>
   17654:	ldr	r3, [r4, #16]
   17658:	adds	r3, r3, r6
   1765c:	movne	r2, r3
   17660:	ldmne	r5, {r0, r1}
   17664:	moveq	r2, r3
   17668:	stmne	r3, {r0, r1}
   1766c:	mov	r0, r2
   17670:	add	sp, sp, #20
   17674:	pop	{r4, r5, r6, r7, pc}
   17678:	ldr	r2, [r4, #28]
   1767c:	mov	r3, #1
   17680:	add	r2, r6, r2
   17684:	ldr	r0, [r4, #40]	; 0x28
   17688:	add	r2, r2, #9
   1768c:	str	r3, [sp]
   17690:	add	r1, r4, #60	; 0x3c
   17694:	ldr	r7, [r4, #48]	; 0x30
   17698:	blx	r7
   1769c:	cmp	r0, #0
   176a0:	bne	176d8 <flatcc_builder_union_vector_push@@Base+0xd4>
   176a4:	ldr	r1, [r4, #28]
   176a8:	ldr	r2, [r4, #64]	; 0x40
   176ac:	ldr	r3, [r4, #60]	; 0x3c
   176b0:	sub	r2, r2, r1
   176b4:	cmn	r2, #4
   176b8:	mvnhi	r2, #3
   176bc:	str	r2, [r4, #24]
   176c0:	ldr	r2, [r4, #32]
   176c4:	add	r3, r3, r1
   176c8:	mvn	r1, #3
   176cc:	str	r3, [r4, #16]
   176d0:	str	r1, [r2, #4]
   176d4:	b	17658 <flatcc_builder_union_vector_push@@Base+0x54>
   176d8:	mov	r2, #0
   176dc:	mov	r0, r2
   176e0:	add	sp, sp, #20
   176e4:	pop	{r4, r5, r6, r7, pc}
   176e8:	ldr	r3, [pc, #12]	; 176fc <flatcc_builder_union_vector_push@@Base+0xf8>
   176ec:	ldr	r2, [pc, #12]	; 17700 <flatcc_builder_union_vector_push@@Base+0xfc>
   176f0:	ldr	r1, [pc, #12]	; 17704 <flatcc_builder_union_vector_push@@Base+0x100>
   176f4:	ldr	r0, [pc, #12]	; 17708 <flatcc_builder_union_vector_push@@Base+0x104>
   176f8:	bl	1234c <__assert_fail@plt>
   176fc:			; <UNDEFINED> instruction: 0x0001aeb8
   17700:	andeq	r0, r0, sp, lsl #13
   17704:	ldrdeq	sl, [r1], -ip
   17708:	andeq	fp, r1, r8, ror #5

0001770c <flatcc_builder_append_union_vector@@Base>:
   1770c:	push	{r4, r5, r6, r7, r8, r9, lr}
   17710:	mov	r5, r0
   17714:	ldr	r0, [r0, #32]
   17718:	sub	sp, sp, #12
   1771c:	ldrh	r3, [r0, #14]
   17720:	cmp	r3, #7
   17724:	bne	17808 <flatcc_builder_append_union_vector@@Base+0xfc>
   17728:	mov	r7, r1
   1772c:	ldr	r1, [r0, #20]
   17730:	adds	r1, r2, r1
   17734:	movcs	r4, #1
   17738:	movcc	r4, #0
   1773c:	cmn	r1, #-536870911	; 0xe0000001
   17740:	movls	r3, #0
   17744:	movhi	r3, #1
   17748:	orrs	r4, r4, r3
   1774c:	bne	17804 <flatcc_builder_append_union_vector@@Base+0xf8>
   17750:	str	r1, [r0, #20]
   17754:	ldr	r8, [r5, #20]
   17758:	lsl	r6, r2, #3
   1775c:	ldr	r3, [r5, #24]
   17760:	add	r1, r6, r8
   17764:	cmp	r1, r3
   17768:	str	r1, [r5, #20]
   1776c:	bcs	1779c <flatcc_builder_append_union_vector@@Base+0x90>
   17770:	ldr	r3, [r5, #16]
   17774:	adds	r3, r3, r8
   17778:	beq	17790 <flatcc_builder_append_union_vector@@Base+0x84>
   1777c:	mov	r0, r3
   17780:	mov	r2, r6
   17784:	mov	r1, r7
   17788:	bl	122bc <memcpy@plt>
   1778c:	mov	r3, r0
   17790:	mov	r0, r3
   17794:	add	sp, sp, #12
   17798:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1779c:	ldr	r2, [r5, #28]
   177a0:	mov	r3, #1
   177a4:	add	r2, r2, #1
   177a8:	ldr	r0, [r5, #40]	; 0x28
   177ac:	add	r2, r2, r1
   177b0:	str	r3, [sp]
   177b4:	add	r1, r5, #60	; 0x3c
   177b8:	ldr	r9, [r5, #48]	; 0x30
   177bc:	blx	r9
   177c0:	cmp	r0, #0
   177c4:	bne	177fc <flatcc_builder_append_union_vector@@Base+0xf0>
   177c8:	ldr	r1, [r5, #28]
   177cc:	ldr	r2, [r5, #64]	; 0x40
   177d0:	ldr	r3, [r5, #60]	; 0x3c
   177d4:	sub	r2, r2, r1
   177d8:	cmn	r2, #4
   177dc:	mvnhi	r2, #3
   177e0:	str	r2, [r5, #24]
   177e4:	ldr	r2, [r5, #32]
   177e8:	add	r3, r3, r1
   177ec:	mvn	r1, #3
   177f0:	str	r3, [r5, #16]
   177f4:	str	r1, [r2, #4]
   177f8:	b	17774 <flatcc_builder_append_union_vector@@Base+0x68>
   177fc:	mov	r3, r4
   17800:	b	17790 <flatcc_builder_append_union_vector@@Base+0x84>
   17804:	bl	123cc <__assert_fail@plt+0x80>
   17808:	ldr	r3, [pc, #12]	; 1781c <flatcc_builder_append_union_vector@@Base+0x110>
   1780c:	ldr	r2, [pc, #12]	; 17820 <flatcc_builder_append_union_vector@@Base+0x114>
   17810:	ldr	r1, [pc, #12]	; 17824 <flatcc_builder_append_union_vector@@Base+0x118>
   17814:	ldr	r0, [pc, #12]	; 17828 <flatcc_builder_append_union_vector@@Base+0x11c>
   17818:	bl	1234c <__assert_fail@plt>
   1781c:	ldrdeq	sl, [r1], -ip
   17820:	muleq	r0, ip, r6
   17824:	ldrdeq	sl, [r1], -ip
   17828:	andeq	fp, r1, r8, ror #5

0001782c <flatcc_builder_create_string@@Base>:
   1782c:	push	{r4, r5, r6, lr}
   17830:	sub	sp, sp, #88	; 0x58
   17834:	ldr	lr, [r0, #136]	; 0x88
   17838:	mov	r4, r0
   1783c:	add	r0, sp, #88	; 0x58
   17840:	cmp	r2, #0
   17844:	sub	r3, lr, r2
   17848:	str	r2, [r0, #-76]!	; 0xffffffb4
   1784c:	sub	r3, r3, #1
   17850:	str	r0, [sp, #24]
   17854:	moveq	r0, #1
   17858:	strne	r1, [sp, #32]
   1785c:	mov	ip, #4
   17860:	moveq	r1, r0
   17864:	movne	r1, #2
   17868:	and	r3, r3, #3
   1786c:	str	ip, [sp, #28]
   17870:	add	r3, r3, #1
   17874:	addne	ip, r2, ip
   17878:	add	r1, r1, #1
   1787c:	add	ip, ip, r3
   17880:	add	r0, sp, #88	; 0x58
   17884:	add	r1, r0, r1, lsl #3
   17888:	sub	r5, lr, ip
   1788c:	ldr	r0, [pc, #104]	; 178fc <flatcc_builder_create_string@@Base+0xd0>
   17890:	strne	r2, [sp, #36]	; 0x24
   17894:	moveq	r2, #2
   17898:	movne	r2, #3
   1789c:	cmp	lr, r5
   178a0:	str	r3, [r1, #-68]	; 0xffffffbc
   178a4:	str	ip, [sp, #16]
   178a8:	str	r2, [sp, #20]
   178ac:	str	r0, [r1, #-72]	; 0xffffffb8
   178b0:	ble	178e4 <flatcc_builder_create_string@@Base+0xb8>
   178b4:	ldr	r0, [r4, #36]	; 0x24
   178b8:	mov	r3, r5
   178bc:	str	ip, [sp]
   178c0:	add	r1, sp, #24
   178c4:	ldr	r6, [r4, #44]	; 0x2c
   178c8:	blx	r6
   178cc:	cmp	r0, #0
   178d0:	bne	178e8 <flatcc_builder_create_string@@Base+0xbc>
   178d4:	mov	r0, r5
   178d8:	str	r5, [r4, #136]	; 0x88
   178dc:	add	sp, sp, #88	; 0x58
   178e0:	pop	{r4, r5, r6, pc}
   178e4:	bl	123a4 <__assert_fail@plt+0x58>
   178e8:	ldr	r3, [pc, #16]	; 17900 <flatcc_builder_create_string@@Base+0xd4>
   178ec:	ldr	r2, [pc, #16]	; 17904 <flatcc_builder_create_string@@Base+0xd8>
   178f0:	ldr	r1, [pc, #16]	; 17908 <flatcc_builder_create_string@@Base+0xdc>
   178f4:	ldr	r0, [pc, #16]	; 1790c <flatcc_builder_create_string@@Base+0xe0>
   178f8:	bl	1234c <__assert_fail@plt>
   178fc:	andeq	sl, r1, r4, lsr #18
   17900:	andeq	sl, r1, r8, lsr #17
   17904:	andeq	r0, r0, fp, lsl #5
   17908:	ldrdeq	sl, [r1], -ip
   1790c:	muleq	r1, ip, r0

00017910 <flatcc_builder_create_string_str@@Base>:
   17910:	push	{r4, r5, r6, lr}
   17914:	mov	r4, r0
   17918:	sub	sp, sp, #88	; 0x58
   1791c:	mov	r0, r1
   17920:	mov	r5, r1
   17924:	bl	12304 <strlen@plt>
   17928:	ldr	lr, [r4, #136]	; 0x88
   1792c:	add	r2, sp, #88	; 0x58
   17930:	sub	r3, lr, #1
   17934:	mov	ip, #4
   17938:	str	ip, [sp, #28]
   1793c:	cmp	r0, #0
   17940:	str	r0, [r2, #-76]!	; 0xffffffb4
   17944:	sub	r3, r3, r0
   17948:	str	r2, [sp, #24]
   1794c:	moveq	r2, #1
   17950:	moveq	r1, r2
   17954:	movne	r1, #2
   17958:	and	r3, r3, #3
   1795c:	addne	ip, r0, ip
   17960:	add	r3, r3, #1
   17964:	add	r1, r1, #1
   17968:	strne	r0, [sp, #36]	; 0x24
   1796c:	add	ip, ip, r3
   17970:	add	r0, sp, #88	; 0x58
   17974:	strne	r5, [sp, #32]
   17978:	add	r1, r0, r1, lsl #3
   1797c:	sub	r5, lr, ip
   17980:	ldr	r0, [pc, #100]	; 179ec <flatcc_builder_create_string_str@@Base+0xdc>
   17984:	movne	r2, #3
   17988:	moveq	r2, #2
   1798c:	cmp	lr, r5
   17990:	str	r3, [r1, #-68]	; 0xffffffbc
   17994:	str	ip, [sp, #16]
   17998:	str	r2, [sp, #20]
   1799c:	str	r0, [r1, #-72]	; 0xffffffb8
   179a0:	ble	179d4 <flatcc_builder_create_string_str@@Base+0xc4>
   179a4:	ldr	r0, [r4, #36]	; 0x24
   179a8:	mov	r3, r5
   179ac:	str	ip, [sp]
   179b0:	add	r1, sp, #24
   179b4:	ldr	r6, [r4, #44]	; 0x2c
   179b8:	blx	r6
   179bc:	cmp	r0, #0
   179c0:	bne	179d8 <flatcc_builder_create_string_str@@Base+0xc8>
   179c4:	mov	r0, r5
   179c8:	str	r5, [r4, #136]	; 0x88
   179cc:	add	sp, sp, #88	; 0x58
   179d0:	pop	{r4, r5, r6, pc}
   179d4:	bl	123a4 <__assert_fail@plt+0x58>
   179d8:	ldr	r3, [pc, #16]	; 179f0 <flatcc_builder_create_string_str@@Base+0xe0>
   179dc:	ldr	r2, [pc, #16]	; 179f4 <flatcc_builder_create_string_str@@Base+0xe4>
   179e0:	ldr	r1, [pc, #16]	; 179f8 <flatcc_builder_create_string_str@@Base+0xe8>
   179e4:	ldr	r0, [pc, #16]	; 179fc <flatcc_builder_create_string_str@@Base+0xec>
   179e8:	bl	1234c <__assert_fail@plt>
   179ec:	andeq	sl, r1, r4, lsr #18
   179f0:	andeq	sl, r1, r8, lsr #17
   179f4:	andeq	r0, r0, fp, lsl #5
   179f8:	ldrdeq	sl, [r1], -ip
   179fc:	muleq	r1, ip, r0

00017a00 <flatcc_builder_create_string_strn@@Base>:
   17a00:	push	{r4, r5, r6, lr}
   17a04:	mov	r6, r1
   17a08:	sub	sp, sp, #88	; 0x58
   17a0c:	mov	r4, r0
   17a10:	mov	r1, #0
   17a14:	mov	r0, r6
   17a18:	mov	r5, r2
   17a1c:	bl	12334 <memchr@plt>
   17a20:	mov	ip, #4
   17a24:	mov	r1, #1
   17a28:	add	r2, sp, #88	; 0x58
   17a2c:	str	ip, [sp, #28]
   17a30:	add	lr, sp, #88	; 0x58
   17a34:	cmp	r0, #0
   17a38:	subne	r5, r0, r6
   17a3c:	ldr	r0, [r4, #136]	; 0x88
   17a40:	cmp	r5, #0
   17a44:	sub	r3, r0, #1
   17a48:	sub	r3, r3, r5
   17a4c:	movne	r1, #2
   17a50:	and	r3, r3, #3
   17a54:	addne	ip, r5, ip
   17a58:	add	r3, r3, #1
   17a5c:	add	r1, r1, #1
   17a60:	add	ip, r3, ip
   17a64:	str	r5, [r2, #-76]!	; 0xffffffb4
   17a68:	strne	r5, [sp, #36]	; 0x24
   17a6c:	add	r1, lr, r1, lsl #3
   17a70:	sub	r5, r0, ip
   17a74:	ldr	lr, [pc, #108]	; 17ae8 <flatcc_builder_create_string_strn@@Base+0xe8>
   17a78:	str	r2, [sp, #24]
   17a7c:	strne	r6, [sp, #32]
   17a80:	movne	r2, #3
   17a84:	moveq	r2, #2
   17a88:	cmp	r0, r5
   17a8c:	str	r3, [r1, #-68]	; 0xffffffbc
   17a90:	str	ip, [sp, #16]
   17a94:	str	r2, [sp, #20]
   17a98:	str	lr, [r1, #-72]	; 0xffffffb8
   17a9c:	ble	17ad0 <flatcc_builder_create_string_strn@@Base+0xd0>
   17aa0:	ldr	r0, [r4, #36]	; 0x24
   17aa4:	mov	r3, r5
   17aa8:	str	ip, [sp]
   17aac:	add	r1, sp, #24
   17ab0:	ldr	r6, [r4, #44]	; 0x2c
   17ab4:	blx	r6
   17ab8:	cmp	r0, #0
   17abc:	bne	17ad4 <flatcc_builder_create_string_strn@@Base+0xd4>
   17ac0:	mov	r0, r5
   17ac4:	str	r5, [r4, #136]	; 0x88
   17ac8:	add	sp, sp, #88	; 0x58
   17acc:	pop	{r4, r5, r6, pc}
   17ad0:	bl	123a4 <__assert_fail@plt+0x58>
   17ad4:	ldr	r3, [pc, #16]	; 17aec <flatcc_builder_create_string_strn@@Base+0xec>
   17ad8:	ldr	r2, [pc, #16]	; 17af0 <flatcc_builder_create_string_strn@@Base+0xf0>
   17adc:	ldr	r1, [pc, #16]	; 17af4 <flatcc_builder_create_string_strn@@Base+0xf4>
   17ae0:	ldr	r0, [pc, #16]	; 17af8 <flatcc_builder_create_string_strn@@Base+0xf8>
   17ae4:	bl	1234c <__assert_fail@plt>
   17ae8:	andeq	sl, r1, r4, lsr #18
   17aec:	andeq	sl, r1, r8, lsr #17
   17af0:	andeq	r0, r0, fp, lsl #5
   17af4:	ldrdeq	sl, [r1], -ip
   17af8:	muleq	r1, ip, r0

00017afc <flatcc_builder_end_string@@Base>:
   17afc:	ldr	r3, [r0, #32]
   17b00:	push	{r4, r5, r6, lr}
   17b04:	sub	sp, sp, #88	; 0x58
   17b08:	ldrh	r2, [r3, #14]
   17b0c:	cmp	r2, #6
   17b10:	bne	17c7c <flatcc_builder_end_string@@Base+0x180>
   17b14:	ldr	r2, [r3, #20]
   17b18:	ldr	r3, [r0, #20]
   17b1c:	mov	r4, r0
   17b20:	cmp	r2, r3
   17b24:	bne	17c68 <flatcc_builder_end_string@@Base+0x16c>
   17b28:	ldr	r0, [r0, #136]	; 0x88
   17b2c:	add	r1, sp, #88	; 0x58
   17b30:	sub	r3, r0, #1
   17b34:	cmp	r2, #0
   17b38:	sub	r3, r3, r2
   17b3c:	str	r2, [r1, #-76]!	; 0xffffffb4
   17b40:	mov	ip, #4
   17b44:	str	r1, [sp, #24]
   17b48:	ldr	lr, [r4, #16]
   17b4c:	mov	r1, #1
   17b50:	and	r3, r3, #3
   17b54:	movne	r1, #2
   17b58:	str	ip, [sp, #28]
   17b5c:	add	r3, r3, #1
   17b60:	addne	ip, r2, ip
   17b64:	add	r1, r1, #1
   17b68:	strne	lr, [sp, #32]
   17b6c:	add	ip, ip, r3
   17b70:	add	lr, sp, #88	; 0x58
   17b74:	add	r1, lr, r1, lsl #3
   17b78:	sub	r5, r0, ip
   17b7c:	ldr	lr, [pc, #268]	; 17c90 <flatcc_builder_end_string@@Base+0x194>
   17b80:	strne	r2, [sp, #36]	; 0x24
   17b84:	moveq	r2, #2
   17b88:	movne	r2, #3
   17b8c:	cmp	r0, r5
   17b90:	str	r3, [r1, #-68]	; 0xffffffbc
   17b94:	str	ip, [sp, #16]
   17b98:	str	r2, [sp, #20]
   17b9c:	str	lr, [r1, #-72]	; 0xffffffb8
   17ba0:	ble	17c64 <flatcc_builder_end_string@@Base+0x168>
   17ba4:	ldr	r0, [r4, #36]	; 0x24
   17ba8:	add	r1, sp, #24
   17bac:	str	ip, [sp]
   17bb0:	mov	r3, r5
   17bb4:	ldr	r6, [r4, #44]	; 0x2c
   17bb8:	blx	r6
   17bbc:	subs	r1, r0, #0
   17bc0:	bne	17c50 <flatcc_builder_end_string@@Base+0x154>
   17bc4:	cmp	r5, #0
   17bc8:	str	r5, [r4, #136]	; 0x88
   17bcc:	beq	17c44 <flatcc_builder_end_string@@Base+0x148>
   17bd0:	ldr	r2, [r4, #20]
   17bd4:	ldr	r0, [r4, #16]
   17bd8:	bl	1231c <memset@plt>
   17bdc:	ldr	r3, [r4, #32]
   17be0:	ldr	r2, [r4, #64]	; 0x40
   17be4:	ldrh	lr, [r4, #130]	; 0x82
   17be8:	ldr	ip, [r3]
   17bec:	ldr	r1, [r3, #4]
   17bf0:	ldrh	r0, [r4, #128]	; 0x80
   17bf4:	sub	r2, r2, ip
   17bf8:	cmp	r2, r1
   17bfc:	movcs	r2, r1
   17c00:	cmp	r0, lr
   17c04:	ldr	r0, [r4, #60]	; 0x3c
   17c08:	ldr	r6, [r3, #8]
   17c0c:	str	r2, [r4, #24]
   17c10:	add	r2, r0, ip
   17c14:	str	r2, [r4, #16]
   17c18:	str	r6, [r4, #20]
   17c1c:	ldr	r2, [r4, #156]	; 0x9c
   17c20:	str	ip, [r4, #28]
   17c24:	str	r1, [r3, #4]
   17c28:	strhcc	lr, [r4, #128]	; 0x80
   17c2c:	ldrh	r1, [r3, #12]
   17c30:	sub	r2, r2, #1
   17c34:	sub	r3, r3, #36	; 0x24
   17c38:	str	r2, [r4, #156]	; 0x9c
   17c3c:	strh	r1, [r4, #130]	; 0x82
   17c40:	str	r3, [r4, #32]
   17c44:	mov	r0, r5
   17c48:	add	sp, sp, #88	; 0x58
   17c4c:	pop	{r4, r5, r6, pc}
   17c50:	ldr	r3, [pc, #60]	; 17c94 <flatcc_builder_end_string@@Base+0x198>
   17c54:	ldr	r2, [pc, #60]	; 17c98 <flatcc_builder_end_string@@Base+0x19c>
   17c58:	ldr	r1, [pc, #60]	; 17c9c <flatcc_builder_end_string@@Base+0x1a0>
   17c5c:	ldr	r0, [pc, #60]	; 17ca0 <flatcc_builder_end_string@@Base+0x1a4>
   17c60:	bl	1234c <__assert_fail@plt>
   17c64:	bl	123a4 <__assert_fail@plt+0x58>
   17c68:	ldr	r3, [pc, #52]	; 17ca4 <flatcc_builder_end_string@@Base+0x1a8>
   17c6c:	ldr	r2, [pc, #52]	; 17ca8 <flatcc_builder_end_string@@Base+0x1ac>
   17c70:	ldr	r1, [pc, #36]	; 17c9c <flatcc_builder_end_string@@Base+0x1a0>
   17c74:	ldr	r0, [pc, #48]	; 17cac <flatcc_builder_end_string@@Base+0x1b0>
   17c78:	bl	1234c <__assert_fail@plt>
   17c7c:	ldr	r3, [pc, #32]	; 17ca4 <flatcc_builder_end_string@@Base+0x1a8>
   17c80:	ldr	r2, [pc, #40]	; 17cb0 <flatcc_builder_end_string@@Base+0x1b4>
   17c84:	ldr	r1, [pc, #16]	; 17c9c <flatcc_builder_end_string@@Base+0x1a0>
   17c88:	ldr	r0, [pc, #36]	; 17cb4 <flatcc_builder_end_string@@Base+0x1b8>
   17c8c:	bl	1234c <__assert_fail@plt>
   17c90:	andeq	sl, r1, r4, lsr #18
   17c94:	andeq	sl, r1, r8, lsr #17
   17c98:	andeq	r0, r0, fp, lsl #5
   17c9c:	ldrdeq	sl, [r1], -ip
   17ca0:	muleq	r1, ip, r0
   17ca4:	andeq	sl, r1, r0, lsl #30
   17ca8:	andeq	r0, r0, r5, asr #13
   17cac:	andeq	fp, r1, ip, lsl r3
   17cb0:	andeq	r0, r0, r4, asr #13
   17cb4:	andeq	fp, r1, ip, asr r0

00017cb8 <flatcc_builder_string_edit@@Base>:
   17cb8:	ldr	r0, [r0, #16]
   17cbc:	bx	lr

00017cc0 <flatcc_builder_string_len@@Base>:
   17cc0:	ldr	r3, [r0, #32]
   17cc4:	ldr	r0, [r3, #20]
   17cc8:	bx	lr

00017ccc <flatcc_builder_table_add@@Base>:
   17ccc:	push	{r4, r5, r6, r7, r8, r9, lr}
   17cd0:	mov	r4, r0
   17cd4:	ldr	r0, [r0, #32]
   17cd8:	sub	sp, sp, #12
   17cdc:	ldrh	r0, [r0, #14]
   17ce0:	cmp	r0, #3
   17ce4:	bne	17e20 <flatcc_builder_table_add@@Base+0x154>
   17ce8:	ldr	r0, [pc, #324]	; 17e34 <flatcc_builder_table_add@@Base+0x168>
   17cec:	cmp	r1, r0
   17cf0:	bhi	17e0c <flatcc_builder_table_add@@Base+0x140>
   17cf4:	ldrh	r0, [r4, #130]	; 0x82
   17cf8:	lsl	r7, r1, #1
   17cfc:	cmp	r0, r3
   17d00:	ldr	r0, [r4, #4]
   17d04:	strhcc	r3, [r4, #130]	; 0x82
   17d08:	add	lr, r0, r7
   17d0c:	ldrh	r6, [r0, r7]
   17d10:	cmp	r6, #0
   17d14:	bne	17df8 <flatcc_builder_table_add@@Base+0x12c>
   17d18:	ldr	ip, [r4, #12]
   17d1c:	ldr	r9, [pc, #276]	; 17e38 <flatcc_builder_table_add@@Base+0x16c>
   17d20:	eor	ip, ip, r1
   17d24:	uxth	r5, r1
   17d28:	mul	r1, r9, ip
   17d2c:	ldr	r0, [r4, #20]
   17d30:	eor	r1, r1, r2
   17d34:	sub	r8, r3, #1
   17d38:	add	r8, r8, r0
   17d3c:	rsb	r3, r3, #0
   17d40:	and	r8, r8, r3
   17d44:	mul	r1, r9, r1
   17d48:	ldr	r3, [r4, #24]
   17d4c:	add	r2, r2, r8
   17d50:	cmp	r2, r3
   17d54:	str	r1, [r4, #12]
   17d58:	str	r2, [r4, #20]
   17d5c:	bcs	17d88 <flatcc_builder_table_add@@Base+0xbc>
   17d60:	ldr	r0, [r4, #16]
   17d64:	add	r3, r8, #4
   17d68:	strh	r3, [lr]
   17d6c:	ldrh	r3, [r4, #8]
   17d70:	add	r0, r0, r8
   17d74:	cmp	r3, r5
   17d78:	addls	r5, r5, #1
   17d7c:	strhls	r5, [r4, #8]
   17d80:	add	sp, sp, #12
   17d84:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17d88:	ldr	r1, [r4, #28]
   17d8c:	mov	r3, #1
   17d90:	add	r1, r1, #1
   17d94:	ldr	r0, [r4, #40]	; 0x28
   17d98:	add	r2, r1, r2
   17d9c:	str	r3, [sp]
   17da0:	add	r1, r4, #60	; 0x3c
   17da4:	ldr	r9, [r4, #48]	; 0x30
   17da8:	blx	r9
   17dac:	cmp	r0, #0
   17db0:	bne	17df0 <flatcc_builder_table_add@@Base+0x124>
   17db4:	ldr	r6, [r4, #28]
   17db8:	ldr	r3, [r4, #64]	; 0x40
   17dbc:	ldr	r2, [pc, #120]	; 17e3c <flatcc_builder_table_add@@Base+0x170>
   17dc0:	sub	r3, r3, r6
   17dc4:	ldr	r0, [r4, #60]	; 0x3c
   17dc8:	ldr	r1, [r4, #32]
   17dcc:	ldr	lr, [r4, #4]
   17dd0:	cmp	r3, r2
   17dd4:	add	r0, r0, r6
   17dd8:	movcs	r3, r2
   17ddc:	str	r0, [r4, #16]
   17de0:	str	r3, [r4, #24]
   17de4:	add	lr, lr, r7
   17de8:	str	r2, [r1, #4]
   17dec:	b	17d64 <flatcc_builder_table_add@@Base+0x98>
   17df0:	mov	r0, r6
   17df4:	b	17d80 <flatcc_builder_table_add@@Base+0xb4>
   17df8:	ldr	r3, [pc, #64]	; 17e40 <flatcc_builder_table_add@@Base+0x174>
   17dfc:	ldr	r2, [pc, #64]	; 17e44 <flatcc_builder_table_add@@Base+0x178>
   17e00:	ldr	r1, [pc, #64]	; 17e48 <flatcc_builder_table_add@@Base+0x17c>
   17e04:	ldr	r0, [pc, #64]	; 17e4c <flatcc_builder_table_add@@Base+0x180>
   17e08:	bl	1234c <__assert_fail@plt>
   17e0c:	ldr	r3, [pc, #44]	; 17e40 <flatcc_builder_table_add@@Base+0x174>
   17e10:	ldr	r2, [pc, #56]	; 17e50 <flatcc_builder_table_add@@Base+0x184>
   17e14:	ldr	r1, [pc, #44]	; 17e48 <flatcc_builder_table_add@@Base+0x17c>
   17e18:	ldr	r0, [pc, #52]	; 17e54 <flatcc_builder_table_add@@Base+0x188>
   17e1c:	bl	1234c <__assert_fail@plt>
   17e20:	ldr	r3, [pc, #24]	; 17e40 <flatcc_builder_table_add@@Base+0x174>
   17e24:	ldr	r2, [pc, #44]	; 17e58 <flatcc_builder_table_add@@Base+0x18c>
   17e28:	ldr	r1, [pc, #24]	; 17e48 <flatcc_builder_table_add@@Base+0x17c>
   17e2c:	ldr	r0, [pc, #40]	; 17e5c <flatcc_builder_table_add@@Base+0x190>
   17e30:	bl	1234c <__assert_fail@plt>
   17e34:	strdeq	r7, [r0], -ip
   17e38:			; <UNDEFINED> instruction: 0x9e3779b1
   17e3c:	strdeq	pc, [r0], -ip
   17e40:	andeq	sl, r1, ip, lsl pc
   17e44:	strdeq	r0, [r0], -r8
   17e48:	ldrdeq	sl, [r1], -ip
   17e4c:	muleq	r1, ip, r0
   17e50:	andeq	r0, r0, lr, ror #13
   17e54:	andeq	fp, r1, r0, asr #6
   17e58:	andeq	r0, r0, sp, ror #13
   17e5c:	andeq	fp, r1, r8, lsr #5

00017e60 <flatcc_builder_table_edit@@Base>:
   17e60:	ldr	r3, [r0, #32]
   17e64:	ldrh	r3, [r3, #14]
   17e68:	cmp	r3, #3
   17e6c:	bne	17e84 <flatcc_builder_table_edit@@Base+0x24>
   17e70:	ldr	r3, [r0, #20]
   17e74:	ldr	r0, [r0, #16]
   17e78:	sub	r1, r3, r1
   17e7c:	add	r0, r0, r1
   17e80:	bx	lr
   17e84:	push	{r4, lr}
   17e88:	ldr	r3, [pc, #12]	; 17e9c <flatcc_builder_table_edit@@Base+0x3c>
   17e8c:	ldr	r2, [pc, #12]	; 17ea0 <flatcc_builder_table_edit@@Base+0x40>
   17e90:	ldr	r1, [pc, #12]	; 17ea4 <flatcc_builder_table_edit@@Base+0x44>
   17e94:	ldr	r0, [pc, #12]	; 17ea8 <flatcc_builder_table_edit@@Base+0x48>
   17e98:	bl	1234c <__assert_fail@plt>
   17e9c:	andeq	sl, r1, r8, lsr pc
   17ea0:	andeq	r0, r0, r2, lsl #14
   17ea4:	ldrdeq	sl, [r1], -ip
   17ea8:	andeq	fp, r1, r8, lsr #5

00017eac <flatcc_builder_table_add_copy@@Base>:
   17eac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17eb0:	mov	r4, r0
   17eb4:	ldr	r0, [r0, #32]
   17eb8:	mov	r7, r3
   17ebc:	sub	sp, sp, #12
   17ec0:	ldrh	r3, [r0, #14]
   17ec4:	ldrh	ip, [sp, #48]	; 0x30
   17ec8:	cmp	r3, #3
   17ecc:	bne	18028 <flatcc_builder_table_add_copy@@Base+0x17c>
   17ed0:	ldr	r3, [pc, #356]	; 1803c <flatcc_builder_table_add_copy@@Base+0x190>
   17ed4:	cmp	r1, r3
   17ed8:	bhi	18014 <flatcc_builder_table_add_copy@@Base+0x168>
   17edc:	ldrh	r3, [r4, #130]	; 0x82
   17ee0:	lsl	sl, r1, #1
   17ee4:	mov	r8, r2
   17ee8:	cmp	r3, ip
   17eec:	ldr	r3, [r4, #4]
   17ef0:	strhcc	ip, [r4, #130]	; 0x82
   17ef4:	add	r0, r3, sl
   17ef8:	ldrh	r5, [r3, sl]
   17efc:	cmp	r5, #0
   17f00:	bne	18000 <flatcc_builder_table_add_copy@@Base+0x154>
   17f04:	ldr	r2, [r4, #12]
   17f08:	ldr	lr, [pc, #304]	; 18040 <flatcc_builder_table_add_copy@@Base+0x194>
   17f0c:	eor	r2, r2, r1
   17f10:	ldr	r6, [r4, #20]
   17f14:	mul	r2, lr, r2
   17f18:	sub	r3, ip, #1
   17f1c:	eor	r2, r2, r7
   17f20:	add	r3, r3, r6
   17f24:	rsb	ip, ip, #0
   17f28:	and	r6, r3, ip
   17f2c:	mul	lr, lr, r2
   17f30:	ldr	r3, [r4, #24]
   17f34:	uxth	r9, r1
   17f38:	add	r1, r7, r6
   17f3c:	cmp	r1, r3
   17f40:	str	lr, [r4, #12]
   17f44:	str	r1, [r4, #20]
   17f48:	bcs	17f90 <flatcc_builder_table_add_copy@@Base+0xe4>
   17f4c:	ldr	r3, [r4, #16]
   17f50:	add	r2, r6, #4
   17f54:	strh	r2, [r0]
   17f58:	ldrh	r2, [r4, #8]
   17f5c:	cmp	r2, r9
   17f60:	addls	r9, r9, #1
   17f64:	strhls	r9, [r4, #8]
   17f68:	adds	r3, r3, r6
   17f6c:	beq	17f84 <flatcc_builder_table_add_copy@@Base+0xd8>
   17f70:	mov	r0, r3
   17f74:	mov	r2, r7
   17f78:	mov	r1, r8
   17f7c:	bl	122bc <memcpy@plt>
   17f80:	mov	r3, r0
   17f84:	mov	r0, r3
   17f88:	add	sp, sp, #12
   17f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f90:	ldr	r2, [r4, #28]
   17f94:	mov	r3, #1
   17f98:	add	r2, r2, #1
   17f9c:	ldr	r0, [r4, #40]	; 0x28
   17fa0:	add	r2, r2, r1
   17fa4:	str	r3, [sp]
   17fa8:	add	r1, r4, #60	; 0x3c
   17fac:	ldr	fp, [r4, #48]	; 0x30
   17fb0:	blx	fp
   17fb4:	cmp	r0, #0
   17fb8:	bne	17ff8 <flatcc_builder_table_add_copy@@Base+0x14c>
   17fbc:	ldr	r0, [r4, #28]
   17fc0:	ldr	r2, [r4, #64]	; 0x40
   17fc4:	ldr	r1, [pc, #120]	; 18044 <flatcc_builder_table_add_copy@@Base+0x198>
   17fc8:	ldr	r3, [r4, #60]	; 0x3c
   17fcc:	sub	r2, r2, r0
   17fd0:	ldr	ip, [r4, #32]
   17fd4:	add	r3, r3, r0
   17fd8:	cmp	r2, r1
   17fdc:	ldr	r0, [r4, #4]
   17fe0:	movcs	r2, r1
   17fe4:	str	r3, [r4, #16]
   17fe8:	str	r2, [r4, #24]
   17fec:	add	r0, r0, sl
   17ff0:	str	r1, [ip, #4]
   17ff4:	b	17f50 <flatcc_builder_table_add_copy@@Base+0xa4>
   17ff8:	mov	r3, r5
   17ffc:	b	17f84 <flatcc_builder_table_add_copy@@Base+0xd8>
   18000:	ldr	r3, [pc, #64]	; 18048 <flatcc_builder_table_add_copy@@Base+0x19c>
   18004:	ldr	r2, [pc, #64]	; 1804c <flatcc_builder_table_add_copy@@Base+0x1a0>
   18008:	ldr	r1, [pc, #64]	; 18050 <flatcc_builder_table_add_copy@@Base+0x1a4>
   1800c:	ldr	r0, [pc, #64]	; 18054 <flatcc_builder_table_add_copy@@Base+0x1a8>
   18010:	bl	1234c <__assert_fail@plt>
   18014:	ldr	r3, [pc, #44]	; 18048 <flatcc_builder_table_add_copy@@Base+0x19c>
   18018:	ldr	r2, [pc, #56]	; 18058 <flatcc_builder_table_add_copy@@Base+0x1ac>
   1801c:	ldr	r1, [pc, #44]	; 18050 <flatcc_builder_table_add_copy@@Base+0x1a4>
   18020:	ldr	r0, [pc, #52]	; 1805c <flatcc_builder_table_add_copy@@Base+0x1b0>
   18024:	bl	1234c <__assert_fail@plt>
   18028:	ldr	r3, [pc, #24]	; 18048 <flatcc_builder_table_add_copy@@Base+0x19c>
   1802c:	ldr	r2, [pc, #44]	; 18060 <flatcc_builder_table_add_copy@@Base+0x1b4>
   18030:	ldr	r1, [pc, #24]	; 18050 <flatcc_builder_table_add_copy@@Base+0x1a4>
   18034:	ldr	r0, [pc, #40]	; 18064 <flatcc_builder_table_add_copy@@Base+0x1b8>
   18038:	bl	1234c <__assert_fail@plt>
   1803c:	strdeq	r7, [r0], -ip
   18040:			; <UNDEFINED> instruction: 0x9e3779b1
   18044:	strdeq	pc, [r0], -ip
   18048:	andeq	sl, r1, ip, lsl pc
   1804c:	strdeq	r0, [r0], -r8
   18050:	ldrdeq	sl, [r1], -ip
   18054:	muleq	r1, ip, r0
   18058:	andeq	r0, r0, lr, ror #13
   1805c:	andeq	fp, r1, r0, asr #6
   18060:	andeq	r0, r0, sp, ror #13
   18064:	andeq	fp, r1, r8, lsr #5

00018068 <flatcc_builder_table_add_offset@@Base>:
   18068:	ldr	r3, [r0, #32]
   1806c:	push	{r4, r5, r6, r7, r8, r9, lr}
   18070:	sub	sp, sp, #12
   18074:	ldrh	r3, [r3, #14]
   18078:	cmp	r3, #3
   1807c:	bne	181b8 <flatcc_builder_table_add_offset@@Base+0x150>
   18080:	ldr	r3, [pc, #324]	; 181cc <flatcc_builder_table_add_offset@@Base+0x164>
   18084:	cmp	r1, r3
   18088:	bhi	181a4 <flatcc_builder_table_add_offset@@Base+0x13c>
   1808c:	ldr	r3, [r0, #4]
   18090:	lsl	r7, r1, #1
   18094:	mov	r4, r0
   18098:	ldrh	r6, [r3, r7]
   1809c:	add	ip, r3, r7
   180a0:	cmp	r6, #0
   180a4:	bne	18190 <flatcc_builder_table_add_offset@@Base+0x128>
   180a8:	ldr	r3, [r0, #12]
   180ac:	ldr	r2, [pc, #284]	; 181d0 <flatcc_builder_table_add_offset@@Base+0x168>
   180b0:	eor	r3, r3, r1
   180b4:	ldr	r5, [r0, #20]
   180b8:	mul	r3, r2, r3
   180bc:	add	r5, r5, #3
   180c0:	eor	r3, r3, #4
   180c4:	ldr	r0, [r0, #24]
   180c8:	mul	r3, r2, r3
   180cc:	bic	r5, r5, #3
   180d0:	add	r2, r5, #4
   180d4:	cmp	r2, r0
   180d8:	uxth	r8, r1
   180dc:	str	r3, [r4, #12]
   180e0:	str	r2, [r4, #20]
   180e4:	bhi	18124 <flatcc_builder_table_add_offset@@Base+0xbc>
   180e8:	ldr	r0, [r4, #16]
   180ec:	uxth	r2, r5
   180f0:	add	r3, r2, #4
   180f4:	strh	r3, [ip]
   180f8:	ldrh	r3, [r4, #8]
   180fc:	add	r0, r0, r5
   18100:	cmp	r3, r8
   18104:	ldr	r3, [r4]
   18108:	addls	r1, r8, #1
   1810c:	strhls	r1, [r4, #8]
   18110:	add	r1, r3, #2
   18114:	str	r1, [r4]
   18118:	strh	r2, [r3]
   1811c:	add	sp, sp, #12
   18120:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18124:	ldr	r1, [r4, #28]
   18128:	mov	r3, #1
   1812c:	ldr	r0, [r4, #40]	; 0x28
   18130:	add	r2, r2, r1
   18134:	str	r3, [sp]
   18138:	add	r1, r4, #60	; 0x3c
   1813c:	ldr	r9, [r4, #48]	; 0x30
   18140:	blx	r9
   18144:	cmp	r0, #0
   18148:	bne	18188 <flatcc_builder_table_add_offset@@Base+0x120>
   1814c:	ldr	r6, [r4, #28]
   18150:	ldr	r3, [r4, #64]	; 0x40
   18154:	ldr	r2, [pc, #120]	; 181d4 <flatcc_builder_table_add_offset@@Base+0x16c>
   18158:	sub	r3, r3, r6
   1815c:	ldr	r0, [r4, #60]	; 0x3c
   18160:	ldr	r1, [r4, #32]
   18164:	ldr	ip, [r4, #4]
   18168:	cmp	r3, r2
   1816c:	add	r0, r0, r6
   18170:	movcs	r3, r2
   18174:	str	r0, [r4, #16]
   18178:	str	r3, [r4, #24]
   1817c:	add	ip, ip, r7
   18180:	str	r2, [r1, #4]
   18184:	b	180ec <flatcc_builder_table_add_offset@@Base+0x84>
   18188:	mov	r0, r6
   1818c:	b	1811c <flatcc_builder_table_add_offset@@Base+0xb4>
   18190:	ldr	r3, [pc, #64]	; 181d8 <flatcc_builder_table_add_offset@@Base+0x170>
   18194:	ldr	r2, [pc, #64]	; 181dc <flatcc_builder_table_add_offset@@Base+0x174>
   18198:	ldr	r1, [pc, #64]	; 181e0 <flatcc_builder_table_add_offset@@Base+0x178>
   1819c:	ldr	r0, [pc, #64]	; 181e4 <flatcc_builder_table_add_offset@@Base+0x17c>
   181a0:	bl	1234c <__assert_fail@plt>
   181a4:	ldr	r3, [pc, #44]	; 181d8 <flatcc_builder_table_add_offset@@Base+0x170>
   181a8:	ldr	r2, [pc, #56]	; 181e8 <flatcc_builder_table_add_offset@@Base+0x180>
   181ac:	ldr	r1, [pc, #44]	; 181e0 <flatcc_builder_table_add_offset@@Base+0x178>
   181b0:	ldr	r0, [pc, #52]	; 181ec <flatcc_builder_table_add_offset@@Base+0x184>
   181b4:	bl	1234c <__assert_fail@plt>
   181b8:	ldr	r3, [pc, #24]	; 181d8 <flatcc_builder_table_add_offset@@Base+0x170>
   181bc:	ldr	r2, [pc, #44]	; 181f0 <flatcc_builder_table_add_offset@@Base+0x188>
   181c0:	ldr	r1, [pc, #24]	; 181e0 <flatcc_builder_table_add_offset@@Base+0x178>
   181c4:	ldr	r0, [pc, #40]	; 181f4 <flatcc_builder_table_add_offset@@Base+0x18c>
   181c8:	bl	1234c <__assert_fail@plt>
   181cc:	strdeq	r7, [r0], -ip
   181d0:			; <UNDEFINED> instruction: 0x9e3779b1
   181d4:	strdeq	pc, [r0], -ip
   181d8:	andeq	sl, r1, r4, asr pc
   181dc:	andeq	r0, r0, fp, lsl r7
   181e0:	ldrdeq	sl, [r1], -ip
   181e4:	muleq	r1, ip, r0
   181e8:	andeq	r0, r0, r4, lsl r7
   181ec:	andeq	fp, r1, r0, asr #6
   181f0:	andeq	r0, r0, r3, lsl r7
   181f4:	andeq	fp, r1, r8, lsr #5

000181f8 <flatcc_builder_table_add_union@@Base>:
   181f8:	push	{r4, r5, r6, r7, r8, r9, lr}
   181fc:	sub	sp, sp, #20
   18200:	add	ip, sp, #16
   18204:	stmdb	ip, {r2, r3}
   18208:	ldr	r3, [r0, #32]
   1820c:	ldrb	r6, [sp, #8]
   18210:	ldr	r5, [sp, #12]
   18214:	ldrh	r3, [r3, #14]
   18218:	cmp	r3, #3
   1821c:	bne	183a8 <flatcc_builder_table_add_union@@Base+0x1b0>
   18220:	cmp	r6, #0
   18224:	mov	r4, r0
   18228:	mov	r7, r1
   1822c:	beq	182fc <flatcc_builder_table_add_union@@Base+0x104>
   18230:	cmp	r5, #0
   18234:	beq	18258 <flatcc_builder_table_add_union@@Base+0x60>
   18238:	bl	18068 <flatcc_builder_table_add_offset@@Base>
   1823c:	cmp	r0, #0
   18240:	beq	183e4 <flatcc_builder_table_add_union@@Base+0x1ec>
   18244:	ldr	r3, [r4, #32]
   18248:	str	r5, [r0]
   1824c:	ldrh	r3, [r3, #14]
   18250:	cmp	r3, #3
   18254:	bne	183bc <flatcc_builder_table_add_union@@Base+0x1c4>
   18258:	ldr	r3, [pc, #408]	; 183f8 <flatcc_builder_table_add_union@@Base+0x200>
   1825c:	sub	r1, r7, #1
   18260:	cmp	r1, r3
   18264:	bhi	183d0 <flatcc_builder_table_add_union@@Base+0x1d8>
   18268:	ldrh	r3, [r4, #130]	; 0x82
   1826c:	lsl	r5, r1, #1
   18270:	cmp	r3, #0
   18274:	moveq	r3, #1
   18278:	strheq	r3, [r4, #130]	; 0x82
   1827c:	ldr	r3, [r4, #4]
   18280:	add	r0, r3, r5
   18284:	ldrh	r3, [r3, r5]
   18288:	cmp	r3, #0
   1828c:	bne	18394 <flatcc_builder_table_add_union@@Base+0x19c>
   18290:	ldr	r3, [r4, #12]
   18294:	ldr	r2, [pc, #352]	; 183fc <flatcc_builder_table_add_union@@Base+0x204>
   18298:	eor	r3, r3, r1
   1829c:	ldr	r7, [r4, #20]
   182a0:	mul	r3, r2, r3
   182a4:	uxth	r8, r1
   182a8:	eor	r3, r3, #1
   182ac:	ldr	r1, [r4, #24]
   182b0:	mul	r3, r2, r3
   182b4:	add	r2, r7, #1
   182b8:	cmp	r2, r1
   182bc:	str	r3, [r4, #12]
   182c0:	str	r2, [r4, #20]
   182c4:	bcs	18318 <flatcc_builder_table_add_union@@Base+0x120>
   182c8:	ldr	r3, [r4, #16]
   182cc:	add	r2, r7, #4
   182d0:	strh	r2, [r0]
   182d4:	ldrh	r2, [r4, #8]
   182d8:	cmp	r2, r8
   182dc:	addls	r1, r8, #1
   182e0:	strhls	r1, [r4, #8]
   182e4:	cmn	r3, r7
   182e8:	beq	18380 <flatcc_builder_table_add_union@@Base+0x188>
   182ec:	mov	r0, #0
   182f0:	strb	r6, [r3, r7]
   182f4:	add	sp, sp, #20
   182f8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   182fc:	cmp	r5, #0
   18300:	beq	18258 <flatcc_builder_table_add_union@@Base+0x60>
   18304:	ldr	r3, [pc, #244]	; 18400 <flatcc_builder_table_add_union@@Base+0x208>
   18308:	ldr	r2, [pc, #244]	; 18404 <flatcc_builder_table_add_union@@Base+0x20c>
   1830c:	ldr	r1, [pc, #244]	; 18408 <flatcc_builder_table_add_union@@Base+0x210>
   18310:	ldr	r0, [pc, #244]	; 1840c <flatcc_builder_table_add_union@@Base+0x214>
   18314:	bl	1234c <__assert_fail@plt>
   18318:	ldr	r2, [r4, #28]
   1831c:	mov	r3, #1
   18320:	add	r2, r7, r2
   18324:	ldr	r0, [r4, #40]	; 0x28
   18328:	add	r2, r2, #2
   1832c:	str	r3, [sp]
   18330:	add	r1, r4, #60	; 0x3c
   18334:	ldr	r9, [r4, #48]	; 0x30
   18338:	blx	r9
   1833c:	cmp	r0, #0
   18340:	bne	18380 <flatcc_builder_table_add_union@@Base+0x188>
   18344:	ldr	r0, [r4, #28]
   18348:	ldr	r2, [r4, #64]	; 0x40
   1834c:	ldr	r1, [pc, #188]	; 18410 <flatcc_builder_table_add_union@@Base+0x218>
   18350:	ldr	r3, [r4, #60]	; 0x3c
   18354:	sub	r2, r2, r0
   18358:	ldr	ip, [r4, #32]
   1835c:	add	r3, r3, r0
   18360:	cmp	r2, r1
   18364:	ldr	r0, [r4, #4]
   18368:	movcs	r2, r1
   1836c:	str	r3, [r4, #16]
   18370:	str	r2, [r4, #24]
   18374:	add	r0, r0, r5
   18378:	str	r1, [ip, #4]
   1837c:	b	182cc <flatcc_builder_table_add_union@@Base+0xd4>
   18380:	ldr	r3, [pc, #120]	; 18400 <flatcc_builder_table_add_union@@Base+0x208>
   18384:	ldr	r2, [pc, #136]	; 18414 <flatcc_builder_table_add_union@@Base+0x21c>
   18388:	ldr	r1, [pc, #120]	; 18408 <flatcc_builder_table_add_union@@Base+0x210>
   1838c:	ldr	r0, [pc, #132]	; 18418 <flatcc_builder_table_add_union@@Base+0x220>
   18390:	bl	1234c <__assert_fail@plt>
   18394:	ldr	r3, [pc, #128]	; 1841c <flatcc_builder_table_add_union@@Base+0x224>
   18398:	ldr	r2, [pc, #128]	; 18420 <flatcc_builder_table_add_union@@Base+0x228>
   1839c:	ldr	r1, [pc, #100]	; 18408 <flatcc_builder_table_add_union@@Base+0x210>
   183a0:	ldr	r0, [pc, #124]	; 18424 <flatcc_builder_table_add_union@@Base+0x22c>
   183a4:	bl	1234c <__assert_fail@plt>
   183a8:	ldr	r3, [pc, #80]	; 18400 <flatcc_builder_table_add_union@@Base+0x208>
   183ac:	ldr	r2, [pc, #116]	; 18428 <flatcc_builder_table_add_union@@Base+0x230>
   183b0:	ldr	r1, [pc, #80]	; 18408 <flatcc_builder_table_add_union@@Base+0x210>
   183b4:	ldr	r0, [pc, #112]	; 1842c <flatcc_builder_table_add_union@@Base+0x234>
   183b8:	bl	1234c <__assert_fail@plt>
   183bc:	ldr	r3, [pc, #88]	; 1841c <flatcc_builder_table_add_union@@Base+0x224>
   183c0:	ldr	r2, [pc, #104]	; 18430 <flatcc_builder_table_add_union@@Base+0x238>
   183c4:	ldr	r1, [pc, #60]	; 18408 <flatcc_builder_table_add_union@@Base+0x210>
   183c8:	ldr	r0, [pc, #92]	; 1842c <flatcc_builder_table_add_union@@Base+0x234>
   183cc:	bl	1234c <__assert_fail@plt>
   183d0:	ldr	r3, [pc, #68]	; 1841c <flatcc_builder_table_add_union@@Base+0x224>
   183d4:	ldr	r2, [pc, #88]	; 18434 <flatcc_builder_table_add_union@@Base+0x23c>
   183d8:	ldr	r1, [pc, #40]	; 18408 <flatcc_builder_table_add_union@@Base+0x210>
   183dc:	ldr	r0, [pc, #84]	; 18438 <flatcc_builder_table_add_union@@Base+0x240>
   183e0:	bl	1234c <__assert_fail@plt>
   183e4:	ldr	r3, [pc, #20]	; 18400 <flatcc_builder_table_add_union@@Base+0x208>
   183e8:	ldr	r2, [pc, #76]	; 1843c <flatcc_builder_table_add_union@@Base+0x244>
   183ec:	ldr	r1, [pc, #20]	; 18408 <flatcc_builder_table_add_union@@Base+0x210>
   183f0:	ldr	r0, [pc, #72]	; 18440 <flatcc_builder_table_add_union@@Base+0x248>
   183f4:	bl	1234c <__assert_fail@plt>
   183f8:	strdeq	r7, [r0], -ip
   183fc:			; <UNDEFINED> instruction: 0x9e3779b1
   18400:	andeq	sl, r1, r4, ror pc
   18404:	andeq	r0, r0, pc, ror #11
   18408:	ldrdeq	sl, [r1], -ip
   1840c:	andeq	fp, r1, r4, lsl #7
   18410:	strdeq	pc, [r0], -ip
   18414:	strdeq	r0, [r0], -r6
   18418:			; <UNDEFINED> instruction: 0x0001b3b4
   1841c:	andeq	sl, r1, ip, lsl pc
   18420:	strdeq	r0, [r0], -r8
   18424:	muleq	r1, ip, r0
   18428:	andeq	r0, r0, lr, ror #11
   1842c:	andeq	fp, r1, r8, lsr #5
   18430:	andeq	r0, r0, sp, ror #13
   18434:	andeq	r0, r0, lr, ror #13
   18438:	andeq	fp, r1, r0, asr #6
   1843c:	strdeq	r0, [r0], -r2
   18440:	andeq	fp, r1, r8, lsr #7

00018444 <flatcc_builder_table_add_union_vector@@Base>:
   18444:	push	{r4, r5, r6, r7, lr}
   18448:	sub	sp, sp, #12
   1844c:	add	ip, sp, #8
   18450:	stmdb	ip, {r2, r3}
   18454:	ldr	r3, [r0, #32]
   18458:	ldr	r4, [sp]
   1845c:	ldr	r6, [sp, #4]
   18460:	ldrh	r3, [r3, #14]
   18464:	cmp	r3, #3
   18468:	bne	184f8 <flatcc_builder_table_add_union_vector@@Base+0xb4>
   1846c:	clz	r3, r6
   18470:	clz	r2, r4
   18474:	lsr	r3, r3, #5
   18478:	lsr	r2, r2, #5
   1847c:	cmp	r2, r3
   18480:	beq	184a0 <flatcc_builder_table_add_union_vector@@Base+0x5c>
   18484:	adds	r4, r4, #0
   18488:	movne	r4, #1
   1848c:	cmp	r4, r3
   18490:	mvnne	r0, #0
   18494:	beq	1850c <flatcc_builder_table_add_union_vector@@Base+0xc8>
   18498:	add	sp, sp, #12
   1849c:	pop	{r4, r5, r6, r7, pc}
   184a0:	cmp	r4, #0
   184a4:	moveq	r0, r4
   184a8:	beq	18498 <flatcc_builder_table_add_union_vector@@Base+0x54>
   184ac:	mov	r7, r1
   184b0:	sub	r1, r1, #1
   184b4:	mov	r5, r0
   184b8:	bl	18068 <flatcc_builder_table_add_offset@@Base>
   184bc:	cmp	r0, #0
   184c0:	beq	18520 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   184c4:	str	r4, [r0]
   184c8:	mov	r1, r7
   184cc:	mov	r0, r5
   184d0:	bl	18068 <flatcc_builder_table_add_offset@@Base>
   184d4:	cmp	r0, #0
   184d8:	strne	r6, [r0]
   184dc:	movne	r0, #0
   184e0:	bne	18498 <flatcc_builder_table_add_union_vector@@Base+0x54>
   184e4:	ldr	r3, [pc, #72]	; 18534 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   184e8:	ldr	r2, [pc, #72]	; 18538 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   184ec:	ldr	r1, [pc, #72]	; 1853c <flatcc_builder_table_add_union_vector@@Base+0xf8>
   184f0:	ldr	r0, [pc, #72]	; 18540 <flatcc_builder_table_add_union_vector@@Base+0xfc>
   184f4:	bl	1234c <__assert_fail@plt>
   184f8:	ldr	r3, [pc, #52]	; 18534 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   184fc:	mov	r2, #1536	; 0x600
   18500:	ldr	r1, [pc, #52]	; 1853c <flatcc_builder_table_add_union_vector@@Base+0xf8>
   18504:	ldr	r0, [pc, #56]	; 18544 <flatcc_builder_table_add_union_vector@@Base+0x100>
   18508:	bl	1234c <__assert_fail@plt>
   1850c:	ldr	r3, [pc, #32]	; 18534 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   18510:	ldr	r2, [pc, #48]	; 18548 <flatcc_builder_table_add_union_vector@@Base+0x104>
   18514:	ldr	r1, [pc, #32]	; 1853c <flatcc_builder_table_add_union_vector@@Base+0xf8>
   18518:	ldr	r0, [pc, #44]	; 1854c <flatcc_builder_table_add_union_vector@@Base+0x108>
   1851c:	bl	1234c <__assert_fail@plt>
   18520:	ldr	r3, [pc, #12]	; 18534 <flatcc_builder_table_add_union_vector@@Base+0xf0>
   18524:	ldr	r2, [pc, #36]	; 18550 <flatcc_builder_table_add_union_vector@@Base+0x10c>
   18528:	ldr	r1, [pc, #12]	; 1853c <flatcc_builder_table_add_union_vector@@Base+0xf8>
   1852c:	ldr	r0, [pc, #12]	; 18540 <flatcc_builder_table_add_union_vector@@Base+0xfc>
   18530:	bl	1234c <__assert_fail@plt>
   18534:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   18538:	andeq	r0, r0, r8, lsl #12
   1853c:	ldrdeq	sl, [r1], -ip
   18540:	andeq	fp, r1, r8, lsr #7
   18544:	andeq	fp, r1, r8, lsr #5
   18548:	andeq	r0, r0, r1, lsl #12
   1854c:	andeq	fp, r1, r0, asr #7
   18550:	andeq	r0, r0, r4, lsl #12

00018554 <flatcc_builder_push_buffer_alignment@@Base>:
   18554:	mov	r3, r0
   18558:	mov	r2, #4
   1855c:	ldrh	r0, [r0, #128]	; 0x80
   18560:	strh	r2, [r3, #128]	; 0x80
   18564:	bx	lr

00018568 <flatcc_builder_pop_buffer_alignment@@Base>:
   18568:	ldrh	r3, [r0, #128]	; 0x80
   1856c:	cmp	r3, r1
   18570:	strhcc	r1, [r0, #128]	; 0x80
   18574:	bx	lr

00018578 <flatcc_builder_get_buffer_alignment@@Base>:
   18578:	ldrh	r0, [r0, #128]	; 0x80
   1857c:	bx	lr

00018580 <flatcc_builder_set_vtable_clustering@@Base>:
   18580:	clz	r1, r1
   18584:	lsr	r1, r1, #5
   18588:	str	r1, [r0, #180]	; 0xb4
   1858c:	bx	lr

00018590 <flatcc_builder_set_block_align@@Base>:
   18590:	strh	r1, [r0, #132]	; 0x84
   18594:	bx	lr

00018598 <flatcc_builder_get_level@@Base>:
   18598:	ldr	r0, [r0, #156]	; 0x9c
   1859c:	bx	lr

000185a0 <flatcc_builder_set_max_level@@Base>:
   185a0:	ldr	r3, [r0, #160]	; 0xa0
   185a4:	str	r1, [r0, #176]	; 0xb0
   185a8:	cmp	r1, r3
   185ac:	strgt	r1, [r0, #160]	; 0xa0
   185b0:	bx	lr

000185b4 <flatcc_builder_get_buffer_size@@Base>:
   185b4:	ldr	r2, [r0, #140]	; 0x8c
   185b8:	ldr	r0, [r0, #136]	; 0x88
   185bc:	sub	r0, r2, r0
   185c0:	bx	lr

000185c4 <flatcc_builder_get_buffer_start@@Base>:
   185c4:	ldr	r0, [r0, #136]	; 0x88
   185c8:	bx	lr

000185cc <flatcc_builder_get_buffer_end@@Base>:
   185cc:	ldr	r0, [r0, #140]	; 0x8c
   185d0:	bx	lr

000185d4 <flatcc_builder_set_vtable_cache_limit@@Base>:
   185d4:	str	r1, [r0, #172]	; 0xac
   185d8:	bx	lr

000185dc <flatcc_builder_set_identifier@@Base>:
   185dc:	ldr	r3, [pc, #16]	; 185f4 <flatcc_builder_set_identifier@@Base+0x18>
   185e0:	cmp	r1, #0
   185e4:	moveq	r1, r3
   185e8:	ldr	r3, [r1]
   185ec:	str	r3, [r0, #168]	; 0xa8
   185f0:	bx	lr
   185f4:	andeq	sl, r1, r4, lsr #18

000185f8 <flatcc_builder_get_type@@Base>:
   185f8:	ldr	r0, [r0, #32]
   185fc:	cmp	r0, #0
   18600:	ldrhne	r0, [r0, #14]
   18604:	bx	lr

00018608 <flatcc_builder_get_type_at@@Base>:
   18608:	cmp	r1, #0
   1860c:	ble	18634 <flatcc_builder_get_type_at@@Base+0x2c>
   18610:	ldr	r3, [r0, #156]	; 0x9c
   18614:	cmp	r1, r3
   18618:	bgt	18634 <flatcc_builder_get_type_at@@Base+0x2c>
   1861c:	sub	r1, r1, r3
   18620:	ldr	r3, [r0, #32]
   18624:	add	r1, r1, r1, lsl #3
   18628:	add	r1, r3, r1, lsl #2
   1862c:	ldrh	r0, [r1, #14]
   18630:	bx	lr
   18634:	mov	r0, #0
   18638:	bx	lr

0001863c <flatcc_builder_get_direct_buffer@@Base>:
   1863c:	ldr	r3, [r0, #184]	; 0xb8
   18640:	cmp	r3, #0
   18644:	beq	18658 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   18648:	ldr	r2, [r0, #188]	; 0xbc
   1864c:	ldr	r3, [r0, #192]	; 0xc0
   18650:	cmp	r2, r3
   18654:	beq	1866c <flatcc_builder_get_direct_buffer@@Base+0x30>
   18658:	cmp	r1, #0
   1865c:	movne	r0, #0
   18660:	strne	r0, [r1]
   18664:	moveq	r0, r1
   18668:	bx	lr
   1866c:	cmp	r1, #0
   18670:	ldrne	r3, [r0, #212]	; 0xd4
   18674:	ldr	r0, [r0, #196]	; 0xc4
   18678:	strne	r3, [r1]
   1867c:	bx	lr

00018680 <flatcc_builder_copy_buffer@@Base>:
   18680:	ldr	r3, [r0, #184]	; 0xb8
   18684:	cmp	r3, #0
   18688:	beq	186a4 <flatcc_builder_copy_buffer@@Base+0x24>
   1868c:	push	{r4, lr}
   18690:	add	r0, r0, #188	; 0xbc
   18694:	bl	18d58 <flatcc_emitter_copy_buffer@@Base>
   18698:	cmp	r0, #0
   1869c:	popne	{r4, pc}
   186a0:	bl	12440 <__assert_fail@plt+0xf4>
   186a4:	mov	r0, r3
   186a8:	bx	lr

000186ac <flatcc_builder_finalize_buffer@@Base>:
   186ac:	push	{r4, r5, r6, lr}
   186b0:	cmp	r1, #0
   186b4:	ldr	r4, [r0, #140]	; 0x8c
   186b8:	ldr	r2, [r0, #136]	; 0x88
   186bc:	mov	r5, r0
   186c0:	sub	r4, r4, r2
   186c4:	strne	r4, [r1]
   186c8:	mov	r0, r4
   186cc:	bl	122e0 <malloc@plt>
   186d0:	subs	r6, r0, #0
   186d4:	beq	18718 <flatcc_builder_finalize_buffer@@Base+0x6c>
   186d8:	ldr	r3, [r5, #184]	; 0xb8
   186dc:	cmp	r3, #0
   186e0:	beq	18704 <flatcc_builder_finalize_buffer@@Base+0x58>
   186e4:	mov	r2, r4
   186e8:	add	r0, r5, #188	; 0xbc
   186ec:	mov	r1, r6
   186f0:	bl	18d58 <flatcc_emitter_copy_buffer@@Base>
   186f4:	cmp	r0, #0
   186f8:	beq	1872c <flatcc_builder_finalize_buffer@@Base+0x80>
   186fc:	mov	r0, r6
   18700:	pop	{r4, r5, r6, pc}
   18704:	ldr	r3, [pc, #36]	; 18730 <flatcc_builder_finalize_buffer@@Base+0x84>
   18708:	ldr	r2, [pc, #36]	; 18734 <flatcc_builder_finalize_buffer@@Base+0x88>
   1870c:	ldr	r1, [pc, #36]	; 18738 <flatcc_builder_finalize_buffer@@Base+0x8c>
   18710:	ldr	r0, [pc, #36]	; 1873c <flatcc_builder_finalize_buffer@@Base+0x90>
   18714:	bl	1234c <__assert_fail@plt>
   18718:	ldr	r3, [pc, #16]	; 18730 <flatcc_builder_finalize_buffer@@Base+0x84>
   1871c:	ldr	r2, [pc, #28]	; 18740 <flatcc_builder_finalize_buffer@@Base+0x94>
   18720:	ldr	r1, [pc, #16]	; 18738 <flatcc_builder_finalize_buffer@@Base+0x8c>
   18724:	ldr	r0, [pc, #16]	; 1873c <flatcc_builder_finalize_buffer@@Base+0x90>
   18728:	bl	1234c <__assert_fail@plt>
   1872c:	bl	12440 <__assert_fail@plt+0xf4>
   18730:			; <UNDEFINED> instruction: 0x0001afbc
   18734:	muleq	r0, ip, r7
   18738:	ldrdeq	sl, [r1], -ip
   1873c:	muleq	r1, ip, r0
   18740:	muleq	r0, r8, r7

00018744 <flatcc_builder_finalize_aligned_buffer@@Base>:
   18744:	push	{r4, r5, r6, r7, lr}
   18748:	subs	r7, r1, #0
   1874c:	ldrh	r1, [r0, #128]	; 0x80
   18750:	ldr	r4, [r0, #140]	; 0x8c
   18754:	ldr	r3, [r0, #136]	; 0x88
   18758:	sub	sp, sp, #12
   1875c:	sub	r3, r4, r3
   18760:	sub	r4, r1, #1
   18764:	strne	r3, [r7]
   18768:	add	r4, r4, r3
   1876c:	mov	r5, r0
   18770:	rsb	r3, r1, #0
   18774:	add	r0, sp, #8
   18778:	cmp	r1, #4
   1877c:	mov	ip, #0
   18780:	and	r4, r4, r3
   18784:	movcc	r1, #4
   18788:	mov	r2, r4
   1878c:	str	ip, [r0, #-4]!
   18790:	bl	12310 <posix_memalign@plt>
   18794:	cmp	r0, #0
   18798:	beq	187c8 <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   1879c:	ldr	r0, [sp, #4]
   187a0:	cmp	r0, #0
   187a4:	beq	187ac <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   187a8:	bl	122b0 <free@plt>
   187ac:	cmp	r7, #0
   187b0:	moveq	r6, r7
   187b4:	movne	r6, #0
   187b8:	strne	r6, [r7]
   187bc:	mov	r0, r6
   187c0:	add	sp, sp, #12
   187c4:	pop	{r4, r5, r6, r7, pc}
   187c8:	ldr	r6, [sp, #4]
   187cc:	cmp	r6, #0
   187d0:	beq	187ac <flatcc_builder_finalize_aligned_buffer@@Base+0x68>
   187d4:	ldr	r3, [r5, #184]	; 0xb8
   187d8:	cmp	r3, #0
   187dc:	beq	187fc <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   187e0:	mov	r2, r4
   187e4:	add	r0, r5, #188	; 0xbc
   187e8:	mov	r1, r6
   187ec:	bl	18d58 <flatcc_emitter_copy_buffer@@Base>
   187f0:	cmp	r0, #0
   187f4:	bne	187bc <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   187f8:	bl	12440 <__assert_fail@plt+0xf4>
   187fc:	mov	r0, r6
   18800:	b	187a8 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>

00018804 <flatcc_builder_aligned_alloc@@Base>:
   18804:	push	{r4, lr}
   18808:	sub	sp, sp, #8
   1880c:	add	r3, sp, #8
   18810:	cmp	r0, #4
   18814:	mov	r4, #0
   18818:	mov	r2, r1
   1881c:	str	r4, [r3, #-4]!
   18820:	movcs	r1, r0
   18824:	movcc	r1, #4
   18828:	mov	r0, r3
   1882c:	bl	12310 <posix_memalign@plt>
   18830:	cmp	r0, r4
   18834:	ldr	r0, [sp, #4]
   18838:	beq	1884c <flatcc_builder_aligned_alloc@@Base+0x48>
   1883c:	cmp	r0, #0
   18840:	beq	1884c <flatcc_builder_aligned_alloc@@Base+0x48>
   18844:	bl	122b0 <free@plt>
   18848:	mov	r0, r4
   1884c:	add	sp, sp, #8
   18850:	pop	{r4, pc}

00018854 <flatcc_builder_aligned_free@@Base>:
   18854:	b	122b0 <free@plt>

00018858 <flatcc_builder_get_emit_context@@Base>:
   18858:	ldr	r0, [r0, #36]	; 0x24
   1885c:	bx	lr

00018860 <flatcc_emitter_recycle_page@@Base>:
   18860:	ldr	r3, [r0]
   18864:	cmp	r3, r1
   18868:	beq	188b0 <flatcc_emitter_recycle_page@@Base+0x50>
   1886c:	ldr	r2, [r0, #4]
   18870:	cmp	r1, r2
   18874:	beq	188b0 <flatcc_emitter_recycle_page@@Base+0x50>
   18878:	ldr	ip, [r1, #2944]	; 0xb80
   1887c:	ldr	r2, [r1, #2948]	; 0xb84
   18880:	push	{lr}		; (str lr, [sp, #-4]!)
   18884:	mov	r0, #0
   18888:	str	r2, [ip, #2948]	; 0xb84
   1888c:	ldr	r2, [r3, #2948]	; 0xb84
   18890:	ldr	lr, [r1, #2948]	; 0xb84
   18894:	str	ip, [lr, #2944]	; 0xb80
   18898:	str	r3, [r1, #2944]	; 0xb80
   1889c:	str	r2, [r1, #2948]	; 0xb84
   188a0:	str	r1, [r2, #2944]	; 0xb80
   188a4:	ldr	r3, [r1, #2944]	; 0xb80
   188a8:	str	r1, [r3, #2948]	; 0xb84
   188ac:	pop	{pc}		; (ldr pc, [sp], #4)
   188b0:	mvn	r0, #0
   188b4:	bx	lr

000188b8 <flatcc_emitter_reset@@Base>:
   188b8:	ldr	r2, [r0]
   188bc:	cmp	r2, #0
   188c0:	bxeq	lr
   188c4:	ldr	r3, [r0, #32]
   188c8:	mov	r1, #1472	; 0x5c0
   188cc:	push	{r4, lr}
   188d0:	cmp	r3, #0
   188d4:	str	r1, [r0, #12]
   188d8:	str	r1, [r0, #20]
   188dc:	ldr	r1, [r0, #24]
   188e0:	add	ip, r2, #1472	; 0x5c0
   188e4:	moveq	r3, r1
   188e8:	stmib	r0, {r2, ip}
   188ec:	str	ip, [r0, #16]
   188f0:	add	ip, r3, r3, lsl #1
   188f4:	lsr	r3, r1, #2
   188f8:	add	r3, r3, ip, lsr #2
   188fc:	ldr	ip, [r0, #28]
   18900:	ldr	lr, [pc, #104]	; 18970 <flatcc_emitter_reset@@Base+0xb8>
   18904:	cmp	ip, r3, lsl #1
   18908:	mov	r1, #0
   1890c:	str	lr, [r2, #2952]	; 0xb88
   18910:	str	r3, [r0, #32]
   18914:	str	r1, [r0, #24]
   18918:	popls	{r4, pc}
   1891c:	ldr	r3, [r2, #2944]	; 0xb80
   18920:	mov	r4, r0
   18924:	cmp	r2, r3
   18928:	popeq	{r4, pc}
   1892c:	ldr	r1, [r3, #2944]	; 0xb80
   18930:	mov	r0, r3
   18934:	str	r1, [r2, #2944]	; 0xb80
   18938:	ldr	r3, [r3, #2944]	; 0xb80
   1893c:	str	r2, [r3, #2948]	; 0xb84
   18940:	bl	122b0 <free@plt>
   18944:	ldr	r3, [r4, #28]
   18948:	ldr	r2, [r4, #32]
   1894c:	sub	r3, r3, #2944	; 0xb80
   18950:	str	r3, [r4, #28]
   18954:	cmp	r3, r2, lsl #1
   18958:	popls	{r4, pc}
   1895c:	ldm	r4, {r1, r2}
   18960:	ldr	r3, [r2, #2944]	; 0xb80
   18964:	cmp	r3, r1
   18968:	bne	1892c <flatcc_emitter_reset@@Base+0x74>
   1896c:	pop	{r4, pc}
   18970:			; <UNDEFINED> instruction: 0xfffffa40

00018974 <flatcc_emitter_clear@@Base>:
   18974:	ldr	r3, [r0]
   18978:	cmp	r3, #0
   1897c:	bxeq	lr
   18980:	ldr	r2, [r3, #2948]	; 0xb84
   18984:	mov	r1, #0
   18988:	push	{r4, r5, r6, lr}
   1898c:	mov	r5, r0
   18990:	str	r1, [r2, #2944]	; 0xb80
   18994:	ldr	r4, [r3, #2944]	; 0xb80
   18998:	cmp	r4, r1
   1899c:	bne	189a8 <flatcc_emitter_clear@@Base+0x34>
   189a0:	b	189d8 <flatcc_emitter_clear@@Base+0x64>
   189a4:	mov	r4, r3
   189a8:	ldr	r0, [r4, #2948]	; 0xb84
   189ac:	bl	122b0 <free@plt>
   189b0:	ldr	r3, [r4, #2944]	; 0xb80
   189b4:	cmp	r3, #0
   189b8:	bne	189a4 <flatcc_emitter_clear@@Base+0x30>
   189bc:	mov	r0, r4
   189c0:	bl	122b0 <free@plt>
   189c4:	mov	r0, r5
   189c8:	mov	r2, #36	; 0x24
   189cc:	mov	r1, #0
   189d0:	pop	{r4, r5, r6, lr}
   189d4:	b	1231c <memset@plt>
   189d8:	mov	r4, r3
   189dc:	b	189bc <flatcc_emitter_clear@@Base+0x48>

000189e0 <flatcc_emitter@@Base>:
   189e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189e4:	sub	sp, sp, #12
   189e8:	mov	r5, r0
   189ec:	ldr	ip, [sp, #48]	; 0x30
   189f0:	ldr	r0, [r0, #24]
   189f4:	cmp	r3, #0
   189f8:	add	r0, r0, ip
   189fc:	str	r0, [r5, #24]
   18a00:	blt	18bc8 <flatcc_emitter@@Base+0x1e8>
   18a04:	ldr	r0, [r5, #20]
   18a08:	cmp	ip, r0
   18a0c:	bls	18a9c <flatcc_emitter@@Base+0xbc>
   18a10:	cmp	r2, #0
   18a14:	addne	r7, r1, #8
   18a18:	movne	r8, r2
   18a1c:	movne	r9, #2944	; 0xb80
   18a20:	beq	18a90 <flatcc_emitter@@Base+0xb0>
   18a24:	ldr	r6, [r7, #-4]
   18a28:	ldr	sl, [r7, #-8]
   18a2c:	cmp	r6, #0
   18a30:	movne	r4, r0
   18a34:	beq	18a84 <flatcc_emitter@@Base+0xa4>
   18a38:	cmp	r6, r4
   18a3c:	bls	18ae4 <flatcc_emitter@@Base+0x104>
   18a40:	cmp	r4, #0
   18a44:	beq	18af0 <flatcc_emitter@@Base+0x110>
   18a48:	sub	r6, r6, r4
   18a4c:	mov	r2, r4
   18a50:	mov	r1, sl
   18a54:	ldr	r0, [r5, #16]
   18a58:	bl	122bc <memcpy@plt>
   18a5c:	ldr	r0, [r5, #20]
   18a60:	ldr	r3, [r5, #16]
   18a64:	add	sl, sl, r4
   18a68:	add	r3, r3, r4
   18a6c:	cmp	r6, #0
   18a70:	sub	r4, r0, r4
   18a74:	str	r3, [r5, #16]
   18a78:	str	r4, [r5, #20]
   18a7c:	mov	r0, r4
   18a80:	bne	18a38 <flatcc_emitter@@Base+0x58>
   18a84:	subs	r8, r8, #1
   18a88:	add	r7, r7, #8
   18a8c:	bne	18a24 <flatcc_emitter@@Base+0x44>
   18a90:	mov	r0, #0
   18a94:	add	sp, sp, #12
   18a98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a9c:	ldr	r3, [r5, #16]
   18aa0:	sub	r0, r0, ip
   18aa4:	add	ip, r3, ip
   18aa8:	str	r0, [r5, #20]
   18aac:	str	ip, [r5, #16]
   18ab0:	cmp	r2, #0
   18ab4:	addne	r4, r1, #8
   18ab8:	movne	r7, r2
   18abc:	beq	18a90 <flatcc_emitter@@Base+0xb0>
   18ac0:	ldmdb	r4, {r1, r2}
   18ac4:	mov	r0, r3
   18ac8:	bl	122bc <memcpy@plt>
   18acc:	ldr	r2, [r4, #-4]
   18ad0:	subs	r7, r7, #1
   18ad4:	add	r4, r4, #8
   18ad8:	add	r3, r0, r2
   18adc:	bne	18ac0 <flatcc_emitter@@Base+0xe0>
   18ae0:	b	18a90 <flatcc_emitter@@Base+0xb0>
   18ae4:	mov	r4, r6
   18ae8:	mov	r6, #0
   18aec:	b	18a4c <flatcc_emitter@@Base+0x6c>
   18af0:	ldr	r4, [r5, #4]
   18af4:	cmp	r4, #0
   18af8:	beq	18b68 <flatcc_emitter@@Base+0x188>
   18afc:	ldr	fp, [r4, #2944]	; 0xb80
   18b00:	ldr	r3, [r5]
   18b04:	cmp	fp, r3
   18b08:	beq	18b30 <flatcc_emitter@@Base+0x150>
   18b0c:	str	fp, [r5, #4]
   18b10:	ldr	r3, [fp, #2948]	; 0xb84
   18b14:	mov	r4, #2944	; 0xb80
   18b18:	str	fp, [r5, #16]
   18b1c:	ldr	r3, [r3, #2952]	; 0xb88
   18b20:	str	r9, [r5, #20]
   18b24:	add	r3, r3, r4
   18b28:	str	r3, [fp, #2952]	; 0xb88
   18b2c:	b	18a38 <flatcc_emitter@@Base+0x58>
   18b30:	ldr	r0, [pc, #540]	; 18d54 <flatcc_emitter@@Base+0x374>
   18b34:	bl	122e0 <malloc@plt>
   18b38:	cmp	r0, #0
   18b3c:	beq	18b78 <flatcc_emitter@@Base+0x198>
   18b40:	ldr	r3, [r5, #28]
   18b44:	str	fp, [r0, #2944]	; 0xb80
   18b48:	add	r3, r3, #2944	; 0xb80
   18b4c:	str	r4, [r0, #2948]	; 0xb84
   18b50:	str	r3, [r5, #28]
   18b54:	str	r0, [fp, #2948]	; 0xb84
   18b58:	str	r0, [r4, #2944]	; 0xb80
   18b5c:	mov	fp, r0
   18b60:	str	r0, [r5, #4]
   18b64:	b	18b10 <flatcc_emitter@@Base+0x130>
   18b68:	ldr	r0, [pc, #484]	; 18d54 <flatcc_emitter@@Base+0x374>
   18b6c:	bl	122e0 <malloc@plt>
   18b70:	cmp	r0, #0
   18b74:	bne	18b84 <flatcc_emitter@@Base+0x1a4>
   18b78:	mvn	r0, #0
   18b7c:	add	sp, sp, #12
   18b80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b84:	mov	r2, #1472	; 0x5c0
   18b88:	ldr	r3, [r5, #28]
   18b8c:	str	r2, [r5, #12]
   18b90:	str	r2, [r5, #20]
   18b94:	sub	r2, r2, #2944	; 0xb80
   18b98:	str	r2, [r0, #2952]	; 0xb88
   18b9c:	str	r0, [r5]
   18ba0:	add	r3, r3, #2944	; 0xb80
   18ba4:	str	r0, [r5, #4]
   18ba8:	str	r0, [r0, #2944]	; 0xb80
   18bac:	str	r0, [r0, #2948]	; 0xb84
   18bb0:	add	r0, r0, #1472	; 0x5c0
   18bb4:	str	r0, [r5, #8]
   18bb8:	str	r0, [r5, #16]
   18bbc:	str	r3, [r5, #28]
   18bc0:	mov	r4, #1472	; 0x5c0
   18bc4:	b	18a38 <flatcc_emitter@@Base+0x58>
   18bc8:	ldr	r0, [r5, #12]
   18bcc:	cmp	ip, r0
   18bd0:	bls	18c50 <flatcc_emitter@@Base+0x270>
   18bd4:	add	r6, r1, r2, lsl #3
   18bd8:	mov	r7, r2
   18bdc:	mov	r9, #2944	; 0xb80
   18be0:	mov	r8, #0
   18be4:	cmp	r7, #0
   18be8:	beq	18a90 <flatcc_emitter@@Base+0xb0>
   18bec:	ldr	r4, [r6, #-4]
   18bf0:	ldr	sl, [r6, #-8]
   18bf4:	cmp	r4, #0
   18bf8:	add	sl, sl, r4
   18bfc:	beq	18c44 <flatcc_emitter@@Base+0x264>
   18c00:	ldr	r2, [r5, #12]
   18c04:	cmp	r2, r4
   18c08:	bcs	18c68 <flatcc_emitter@@Base+0x288>
   18c0c:	cmp	r2, #0
   18c10:	beq	18c78 <flatcc_emitter@@Base+0x298>
   18c14:	sub	r4, r4, r2
   18c18:	mov	r1, r8
   18c1c:	ldr	r0, [r5, #8]
   18c20:	rsb	r3, r2, #0
   18c24:	add	r0, r0, r3
   18c28:	add	sl, sl, r3
   18c2c:	str	r1, [r5, #12]
   18c30:	str	r0, [r5, #8]
   18c34:	mov	r1, sl
   18c38:	bl	122bc <memcpy@plt>
   18c3c:	cmp	r4, #0
   18c40:	bne	18c00 <flatcc_emitter@@Base+0x220>
   18c44:	sub	r6, r6, #8
   18c48:	sub	r7, r7, #1
   18c4c:	b	18be4 <flatcc_emitter@@Base+0x204>
   18c50:	ldr	r3, [r5, #8]
   18c54:	sub	r0, r0, ip
   18c58:	sub	r3, r3, ip
   18c5c:	str	r0, [r5, #12]
   18c60:	str	r3, [r5, #8]
   18c64:	b	18ab0 <flatcc_emitter@@Base+0xd0>
   18c68:	sub	r1, r2, r4
   18c6c:	mov	r2, r4
   18c70:	mov	r4, #0
   18c74:	b	18c1c <flatcc_emitter@@Base+0x23c>
   18c78:	ldr	r3, [r5]
   18c7c:	cmp	r3, #0
   18c80:	beq	18d04 <flatcc_emitter@@Base+0x324>
   18c84:	ldr	fp, [r3, #2948]	; 0xb84
   18c88:	ldr	r2, [r5, #4]
   18c8c:	cmp	fp, r2
   18c90:	beq	18cc4 <flatcc_emitter@@Base+0x2e4>
   18c94:	ldr	r3, [r3, #2952]	; 0xb88
   18c98:	sub	r3, r3, #2944	; 0xb80
   18c9c:	str	r3, [fp, #2952]	; 0xb88
   18ca0:	str	fp, [r5]
   18ca4:	ldr	r3, [fp, #2944]	; 0xb80
   18ca8:	add	r2, fp, #2944	; 0xb80
   18cac:	str	r9, [r5, #12]
   18cb0:	ldr	r3, [r3, #2952]	; 0xb88
   18cb4:	str	r2, [r5, #8]
   18cb8:	sub	r3, r3, #2944	; 0xb80
   18cbc:	str	r3, [fp, #2952]	; 0xb88
   18cc0:	b	18c00 <flatcc_emitter@@Base+0x220>
   18cc4:	ldr	r0, [pc, #136]	; 18d54 <flatcc_emitter@@Base+0x374>
   18cc8:	str	r3, [sp, #4]
   18ccc:	bl	122e0 <malloc@plt>
   18cd0:	ldr	r3, [sp, #4]
   18cd4:	cmp	r0, #0
   18cd8:	beq	18b78 <flatcc_emitter@@Base+0x198>
   18cdc:	ldr	r2, [r5, #28]
   18ce0:	str	fp, [r0, #2948]	; 0xb84
   18ce4:	add	r2, r2, #2944	; 0xb80
   18ce8:	str	r3, [r0, #2944]	; 0xb80
   18cec:	str	r2, [r5, #28]
   18cf0:	str	r0, [r3, #2948]	; 0xb84
   18cf4:	str	r0, [fp, #2944]	; 0xb80
   18cf8:	str	r0, [r5]
   18cfc:	mov	fp, r0
   18d00:	b	18ca4 <flatcc_emitter@@Base+0x2c4>
   18d04:	ldr	r0, [pc, #72]	; 18d54 <flatcc_emitter@@Base+0x374>
   18d08:	bl	122e0 <malloc@plt>
   18d0c:	cmp	r0, #0
   18d10:	beq	18b78 <flatcc_emitter@@Base+0x198>
   18d14:	mov	r2, #1472	; 0x5c0
   18d18:	ldr	r3, [r5, #28]
   18d1c:	str	r2, [r5, #12]
   18d20:	str	r2, [r5, #20]
   18d24:	sub	r2, r2, #2944	; 0xb80
   18d28:	str	r2, [r0, #2952]	; 0xb88
   18d2c:	str	r0, [r5]
   18d30:	add	r3, r3, #2944	; 0xb80
   18d34:	str	r0, [r5, #4]
   18d38:	str	r0, [r0, #2944]	; 0xb80
   18d3c:	str	r0, [r0, #2948]	; 0xb84
   18d40:	add	r0, r0, #1472	; 0x5c0
   18d44:	str	r0, [r5, #8]
   18d48:	str	r0, [r5, #16]
   18d4c:	str	r3, [r5, #28]
   18d50:	b	18c00 <flatcc_emitter@@Base+0x220>
   18d54:	andeq	r0, r0, ip, lsl #23

00018d58 <flatcc_emitter_copy_buffer@@Base>:
   18d58:	ldr	ip, [r0, #24]
   18d5c:	cmp	ip, r2
   18d60:	bhi	18dfc <flatcc_emitter_copy_buffer@@Base+0xa4>
   18d64:	ldr	r2, [r0]
   18d68:	cmp	r2, #0
   18d6c:	beq	18dfc <flatcc_emitter_copy_buffer@@Base+0xa4>
   18d70:	mov	r3, r1
   18d74:	ldr	r1, [r0, #4]
   18d78:	push	{r4, r5, r6, lr}
   18d7c:	cmp	r2, r1
   18d80:	mov	r5, r0
   18d84:	beq	18e08 <flatcc_emitter_copy_buffer@@Base+0xb0>
   18d88:	ldr	r4, [r0, #12]
   18d8c:	ldr	r1, [r5, #8]
   18d90:	rsb	r4, r4, #2944	; 0xb80
   18d94:	mov	r2, r4
   18d98:	mov	r0, r3
   18d9c:	bl	122bc <memcpy@plt>
   18da0:	ldr	r2, [r5]
   18da4:	ldr	r1, [r5, #4]
   18da8:	add	r3, r0, r4
   18dac:	ldr	r4, [r2, #2944]	; 0xb80
   18db0:	cmp	r4, r1
   18db4:	beq	18de0 <flatcc_emitter_copy_buffer@@Base+0x88>
   18db8:	mov	r6, #2944	; 0xb80
   18dbc:	mov	r1, r4
   18dc0:	mov	r0, r3
   18dc4:	mov	r2, r6
   18dc8:	bl	122bc <memcpy@plt>
   18dcc:	ldr	r4, [r4, #2944]	; 0xb80
   18dd0:	ldr	r1, [r5, #4]
   18dd4:	cmp	r1, r4
   18dd8:	add	r3, r0, #2944	; 0xb80
   18ddc:	bne	18dbc <flatcc_emitter_copy_buffer@@Base+0x64>
   18de0:	ldr	r2, [r5, #20]
   18de4:	mov	r0, r3
   18de8:	rsb	r2, r2, #2944	; 0xb80
   18dec:	bl	122bc <memcpy@plt>
   18df0:	mov	r3, r0
   18df4:	mov	r0, r3
   18df8:	pop	{r4, r5, r6, pc}
   18dfc:	mov	r3, #0
   18e00:	mov	r0, r3
   18e04:	bx	lr
   18e08:	ldr	r1, [r0, #8]
   18e0c:	mov	r2, ip
   18e10:	mov	r0, r3
   18e14:	bl	122bc <memcpy@plt>
   18e18:	mov	r3, r0
   18e1c:	b	18df4 <flatcc_emitter_copy_buffer@@Base+0x9c>

00018e20 <flatcc_verify_error_string@@Base>:
   18e20:	cmp	r0, #36	; 0x24
   18e24:	ldrls	r3, [pc, #8]	; 18e34 <flatcc_verify_error_string@@Base+0x14>
   18e28:	ldrls	r0, [r3, r0, lsl #2]
   18e2c:	ldrhi	r0, [pc, #4]	; 18e38 <flatcc_verify_error_string@@Base+0x18>
   18e30:	bx	lr
   18e34:	andeq	fp, r1, r8, ror #7
   18e38:	andeq	fp, r1, ip, ror r4

00018e3c <flatcc_verify_field@@Base>:
   18e3c:	add	r1, r1, #2
   18e40:	ldrh	ip, [r0, #22]
   18e44:	lsl	r1, r1, #1
   18e48:	uxth	r1, r1
   18e4c:	cmp	ip, r1
   18e50:	bls	18e84 <flatcc_verify_field@@Base+0x48>
   18e54:	ldr	ip, [r0, #12]
   18e58:	ldrh	r1, [ip, r1]
   18e5c:	cmp	r1, #0
   18e60:	beq	18e84 <flatcc_verify_field@@Base+0x48>
   18e64:	push	{lr}		; (str lr, [sp, #-4]!)
   18e68:	add	r2, r2, r1
   18e6c:	ldrh	lr, [r0, #20]
   18e70:	ldr	ip, [r0]
   18e74:	cmp	r2, lr
   18e78:	bls	18e8c <flatcc_verify_field@@Base+0x50>
   18e7c:	mov	r0, #13
   18e80:	pop	{pc}		; (ldr pc, [sp], #4)
   18e84:	mov	r0, #0
   18e88:	bx	lr
   18e8c:	ldr	r0, [r0, #16]
   18e90:	sub	r3, r3, #1
   18e94:	add	r0, ip, r0
   18e98:	add	r0, r0, r1
   18e9c:	tst	r0, r3
   18ea0:	moveq	r0, #0
   18ea4:	movne	r0, #12
   18ea8:	pop	{pc}		; (ldr pc, [sp], #4)

00018eac <flatcc_verify_string_field@@Base>:
   18eac:	add	r1, r1, #2
   18eb0:	ldrh	r3, [r0, #22]
   18eb4:	lsl	r1, r1, #1
   18eb8:	uxth	r1, r1
   18ebc:	cmp	r3, r1
   18ec0:	bls	18eec <flatcc_verify_string_field@@Base+0x40>
   18ec4:	ldr	r3, [r0, #12]
   18ec8:	ldrh	r3, [r3, r1]
   18ecc:	cmp	r3, #0
   18ed0:	beq	18eec <flatcc_verify_string_field@@Base+0x40>
   18ed4:	ldrh	r2, [r0, #20]
   18ed8:	add	r1, r3, #4
   18edc:	cmp	r1, r2
   18ee0:	bls	18efc <flatcc_verify_string_field@@Base+0x50>
   18ee4:	mov	r0, #13
   18ee8:	bx	lr
   18eec:	cmp	r2, #0
   18ef0:	movne	r0, #4
   18ef4:	moveq	r0, #0
   18ef8:	bx	lr
   18efc:	ldr	r2, [r0, #16]
   18f00:	add	r2, r3, r2
   18f04:	tst	r2, #3
   18f08:	beq	18f14 <flatcc_verify_string_field@@Base+0x68>
   18f0c:	mov	r0, #12
   18f10:	bx	lr
   18f14:	cmp	r2, #0
   18f18:	beq	18f6c <flatcc_verify_string_field@@Base+0xc0>
   18f1c:	ldr	r1, [r0]
   18f20:	ldr	r3, [r1, r2]
   18f24:	add	r3, r2, r3
   18f28:	cmp	r2, r3
   18f2c:	bcs	18f64 <flatcc_verify_string_field@@Base+0xb8>
   18f30:	ldr	r2, [r0, #4]
   18f34:	add	r0, r3, #4
   18f38:	cmp	r2, r0
   18f3c:	bcc	18f64 <flatcc_verify_string_field@@Base+0xb8>
   18f40:	tst	r3, #3
   18f44:	bne	18f64 <flatcc_verify_string_field@@Base+0xb8>
   18f48:	ldr	r3, [r1, r3]
   18f4c:	sub	r2, r2, r0
   18f50:	add	ip, r3, #1
   18f54:	cmp	r2, ip
   18f58:	bcs	18f74 <flatcc_verify_string_field@@Base+0xc8>
   18f5c:	mov	r0, #8
   18f60:	bx	lr
   18f64:	mov	r0, #17
   18f68:	bx	lr
   18f6c:	mov	r0, r2
   18f70:	bx	lr
   18f74:	add	r1, r1, r0
   18f78:	ldrb	r0, [r1, r3]
   18f7c:	cmp	r0, #0
   18f80:	movne	r0, #7
   18f84:	moveq	r0, #0
   18f88:	bx	lr

00018f8c <flatcc_verify_vector_field@@Base>:
   18f8c:	add	r1, r1, #2
   18f90:	ldrh	ip, [r0, #22]
   18f94:	lsl	r1, r1, #1
   18f98:	push	{lr}		; (str lr, [sp, #-4]!)
   18f9c:	uxth	r1, r1
   18fa0:	cmp	ip, r1
   18fa4:	ldrh	ip, [sp, #4]
   18fa8:	bls	18fd4 <flatcc_verify_vector_field@@Base+0x48>
   18fac:	ldr	lr, [r0, #12]
   18fb0:	ldrh	r1, [lr, r1]
   18fb4:	cmp	r1, #0
   18fb8:	beq	18fd4 <flatcc_verify_vector_field@@Base+0x48>
   18fbc:	ldrh	r2, [r0, #20]
   18fc0:	add	lr, r1, #4
   18fc4:	cmp	lr, r2
   18fc8:	bls	18fe4 <flatcc_verify_vector_field@@Base+0x58>
   18fcc:	mov	r0, #13
   18fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   18fd4:	cmp	r2, #0
   18fd8:	movne	r0, #4
   18fdc:	moveq	r0, #0
   18fe0:	pop	{pc}		; (ldr pc, [sp], #4)
   18fe4:	ldr	r2, [r0, #16]
   18fe8:	add	r2, r1, r2
   18fec:	tst	r2, #3
   18ff0:	beq	18ffc <flatcc_verify_vector_field@@Base+0x70>
   18ff4:	mov	r0, #12
   18ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   18ffc:	cmp	r2, #0
   19000:	beq	19060 <flatcc_verify_vector_field@@Base+0xd4>
   19004:	ldr	lr, [r0]
   19008:	ldr	r1, [lr, r2]
   1900c:	add	r1, r2, r1
   19010:	cmp	r1, r2
   19014:	bls	19058 <flatcc_verify_vector_field@@Base+0xcc>
   19018:	ldr	r2, [r0, #4]
   1901c:	add	r0, r1, #4
   19020:	cmp	r2, r0
   19024:	bcc	19058 <flatcc_verify_vector_field@@Base+0xcc>
   19028:	cmp	ip, #4
   1902c:	movcc	ip, #4
   19030:	sub	ip, ip, #1
   19034:	orr	ip, ip, #3
   19038:	tst	ip, r0
   1903c:	bne	19058 <flatcc_verify_vector_field@@Base+0xcc>
   19040:	ldr	r1, [lr, r1]
   19044:	ldr	ip, [sp, #8]
   19048:	cmp	ip, r1
   1904c:	bcs	19068 <flatcc_verify_vector_field@@Base+0xdc>
   19050:	mov	r0, #25
   19054:	pop	{pc}		; (ldr pc, [sp], #4)
   19058:	mov	r0, #16
   1905c:	pop	{pc}		; (ldr pc, [sp], #4)
   19060:	mov	r0, r2
   19064:	pop	{pc}		; (ldr pc, [sp], #4)
   19068:	mul	r3, r1, r3
   1906c:	sub	r2, r2, r0
   19070:	cmp	r2, r3
   19074:	movcc	r0, #26
   19078:	movcs	r0, #0
   1907c:	pop	{pc}		; (ldr pc, [sp], #4)

00019080 <flatcc_verify_string_vector_field@@Base>:
   19080:	add	r1, r1, #2
   19084:	ldrh	r3, [r0, #22]
   19088:	lsl	r1, r1, #1
   1908c:	uxth	r1, r1
   19090:	cmp	r3, r1
   19094:	bls	190c0 <flatcc_verify_string_vector_field@@Base+0x40>
   19098:	ldr	r3, [r0, #12]
   1909c:	ldrh	r3, [r3, r1]
   190a0:	cmp	r3, #0
   190a4:	beq	190c0 <flatcc_verify_string_vector_field@@Base+0x40>
   190a8:	ldrh	r2, [r0, #20]
   190ac:	add	r1, r3, #4
   190b0:	cmp	r1, r2
   190b4:	bls	190d0 <flatcc_verify_string_vector_field@@Base+0x50>
   190b8:	mov	r0, #13
   190bc:	bx	lr
   190c0:	cmp	r2, #0
   190c4:	movne	r0, #4
   190c8:	moveq	r0, #0
   190cc:	bx	lr
   190d0:	ldr	r2, [r0, #16]
   190d4:	add	r2, r3, r2
   190d8:	tst	r2, #3
   190dc:	beq	190e8 <flatcc_verify_string_vector_field@@Base+0x68>
   190e0:	mov	r0, #12
   190e4:	bx	lr
   190e8:	cmp	r2, #0
   190ec:	beq	191ac <flatcc_verify_string_vector_field@@Base+0x12c>
   190f0:	push	{r4, r5, r6, lr}
   190f4:	ldr	lr, [r0]
   190f8:	ldr	r1, [lr, r2]
   190fc:	add	r1, r2, r1
   19100:	cmp	r2, r1
   19104:	bcs	19140 <flatcc_verify_string_vector_field@@Base+0xc0>
   19108:	ldr	r5, [r0, #4]
   1910c:	add	r3, r1, #4
   19110:	cmp	r5, r3
   19114:	bcc	19140 <flatcc_verify_string_vector_field@@Base+0xc0>
   19118:	tst	r3, #3
   1911c:	bne	19140 <flatcc_verify_string_vector_field@@Base+0xc0>
   19120:	ldr	r0, [lr, r1]
   19124:	cmn	r0, #-1073741823	; 0xc0000001
   19128:	bls	19148 <flatcc_verify_string_vector_field@@Base+0xc8>
   1912c:	ldr	r2, [lr, r1]
   19130:	cmn	r2, #-1073741823	; 0xc0000001
   19134:	bls	191b4 <flatcc_verify_string_vector_field@@Base+0x134>
   19138:	mov	r0, #25
   1913c:	pop	{r4, r5, r6, pc}
   19140:	mov	r0, #16
   19144:	pop	{r4, r5, r6, pc}
   19148:	lsl	r4, r0, #2
   1914c:	sub	r2, r5, r3
   19150:	cmp	r2, r4
   19154:	bcc	1912c <flatcc_verify_string_vector_field@@Base+0xac>
   19158:	cmp	r0, #0
   1915c:	popeq	{r4, r5, r6, pc}
   19160:	ldr	r2, [lr, r3]
   19164:	add	ip, lr, r3
   19168:	add	r2, r3, r2
   1916c:	cmp	r3, r2
   19170:	bcs	191a4 <flatcc_verify_string_vector_field@@Base+0x124>
   19174:	add	r1, r2, #4
   19178:	cmp	r5, r1
   1917c:	bcc	191a4 <flatcc_verify_string_vector_field@@Base+0x124>
   19180:	tst	r2, #3
   19184:	bne	191a4 <flatcc_verify_string_vector_field@@Base+0x124>
   19188:	ldr	r2, [lr, r2]
   1918c:	sub	r0, r5, r1
   19190:	add	r6, r2, #1
   19194:	cmp	r6, r0
   19198:	bls	191c8 <flatcc_verify_string_vector_field@@Base+0x148>
   1919c:	mov	r0, #8
   191a0:	pop	{r4, r5, r6, pc}
   191a4:	mov	r0, #17
   191a8:	pop	{r4, r5, r6, pc}
   191ac:	mov	r0, r2
   191b0:	bx	lr
   191b4:	sub	r3, r5, r3
   191b8:	cmp	r3, r2, lsl #2
   191bc:	movcs	r0, #0
   191c0:	movcc	r0, #26
   191c4:	pop	{r4, r5, r6, pc}
   191c8:	add	r4, r3, r4
   191cc:	add	r1, lr, r1
   191d0:	ldrb	r0, [r1, r2]
   191d4:	cmp	r0, #0
   191d8:	beq	191e4 <flatcc_verify_string_vector_field@@Base+0x164>
   191dc:	mov	r0, #7
   191e0:	pop	{r4, r5, r6, pc}
   191e4:	add	r3, r3, #4
   191e8:	cmp	r4, r3
   191ec:	beq	19230 <flatcc_verify_string_vector_field@@Base+0x1b0>
   191f0:	ldr	r2, [ip, #4]!
   191f4:	add	r2, r3, r2
   191f8:	cmp	r3, r2
   191fc:	add	r1, r2, #4
   19200:	bcs	191a4 <flatcc_verify_string_vector_field@@Base+0x124>
   19204:	cmp	r5, r1
   19208:	bcc	191a4 <flatcc_verify_string_vector_field@@Base+0x124>
   1920c:	tst	r2, #3
   19210:	sub	r6, r5, r1
   19214:	bne	191a4 <flatcc_verify_string_vector_field@@Base+0x124>
   19218:	ldr	r2, [lr, r2]
   1921c:	add	r0, r2, #1
   19220:	cmp	r6, r0
   19224:	bcs	191cc <flatcc_verify_string_vector_field@@Base+0x14c>
   19228:	mov	r0, #8
   1922c:	pop	{r4, r5, r6, pc}
   19230:	pop	{r4, r5, r6, pc}

00019234 <flatcc_verify_table_field@@Base>:
   19234:	add	r1, r1, #2
   19238:	ldrh	ip, [r0, #22]
   1923c:	lsl	r1, r1, #1
   19240:	uxth	r1, r1
   19244:	cmp	ip, r1
   19248:	bls	19274 <flatcc_verify_table_field@@Base+0x40>
   1924c:	ldr	ip, [r0, #12]
   19250:	ldrh	r1, [ip, r1]
   19254:	cmp	r1, #0
   19258:	beq	19274 <flatcc_verify_table_field@@Base+0x40>
   1925c:	ldrh	r2, [r0, #20]
   19260:	add	ip, r1, #4
   19264:	cmp	ip, r2
   19268:	bls	19284 <flatcc_verify_table_field@@Base+0x50>
   1926c:	mov	r0, #13
   19270:	bx	lr
   19274:	cmp	r2, #0
   19278:	movne	r0, #4
   1927c:	moveq	r0, #0
   19280:	bx	lr
   19284:	ldr	r2, [r0, #16]
   19288:	add	r2, r1, r2
   1928c:	tst	r2, #3
   19290:	beq	1929c <flatcc_verify_table_field@@Base+0x68>
   19294:	mov	r0, #12
   19298:	bx	lr
   1929c:	cmp	r2, #0
   192a0:	beq	192d8 <flatcc_verify_table_field@@Base+0xa4>
   192a4:	ldr	r1, [r0, #8]
   192a8:	ldr	ip, [r0]
   192ac:	push	{r4, r5, lr}
   192b0:	sub	r1, r1, #1
   192b4:	sub	sp, sp, #28
   192b8:	cmp	r1, #0
   192bc:	ldr	lr, [r0, #4]
   192c0:	ldr	r0, [ip, r2]
   192c4:	str	r1, [sp, #8]
   192c8:	moveq	r0, #3
   192cc:	bne	192e0 <flatcc_verify_table_field@@Base+0xac>
   192d0:	add	sp, sp, #28
   192d4:	pop	{r4, r5, pc}
   192d8:	mov	r0, r2
   192dc:	bx	lr
   192e0:	add	r1, r0, r2
   192e4:	cmp	r2, r1
   192e8:	bcs	19380 <flatcc_verify_table_field@@Base+0x14c>
   192ec:	add	r2, r1, #4
   192f0:	cmp	lr, r2
   192f4:	bcc	19380 <flatcc_verify_table_field@@Base+0x14c>
   192f8:	tst	r1, #3
   192fc:	bne	19380 <flatcc_verify_table_field@@Base+0x14c>
   19300:	str	r1, [sp, #16]
   19304:	ldr	r2, [ip, r1]
   19308:	subs	r2, r1, r2
   1930c:	bmi	19388 <flatcc_verify_table_field@@Base+0x154>
   19310:	tst	r2, #1
   19314:	bne	19388 <flatcc_verify_table_field@@Base+0x154>
   19318:	add	r0, r2, #2
   1931c:	cmp	lr, r0
   19320:	movcc	r0, #27
   19324:	bcc	192d0 <flatcc_verify_table_field@@Base+0x9c>
   19328:	ldrh	r4, [ip, r2]
   1932c:	add	r5, ip, r2
   19330:	add	r2, r4, r2
   19334:	cmp	lr, r2
   19338:	strh	r4, [sp, #22]
   1933c:	bcc	19390 <flatcc_verify_table_field@@Base+0x15c>
   19340:	tst	r4, #1
   19344:	bne	19390 <flatcc_verify_table_field@@Base+0x15c>
   19348:	cmp	r4, #3
   1934c:	movls	r0, #28
   19350:	bls	192d0 <flatcc_verify_table_field@@Base+0x9c>
   19354:	ldrh	r2, [ip, r0]
   19358:	sub	r1, lr, r1
   1935c:	cmp	r1, r2
   19360:	strh	r2, [sp, #20]
   19364:	movcc	r0, #20
   19368:	bcc	192d0 <flatcc_verify_table_field@@Base+0x9c>
   1936c:	mov	r0, sp
   19370:	str	r5, [sp, #12]
   19374:	stm	sp, {ip, lr}
   19378:	blx	r3
   1937c:	b	192d0 <flatcc_verify_table_field@@Base+0x9c>
   19380:	mov	r0, #15
   19384:	b	192d0 <flatcc_verify_table_field@@Base+0x9c>
   19388:	mov	r0, #29
   1938c:	b	192d0 <flatcc_verify_table_field@@Base+0x9c>
   19390:	mov	r0, #30
   19394:	b	192d0 <flatcc_verify_table_field@@Base+0x9c>

00019398 <flatcc_verify_table_vector_field@@Base>:
   19398:	add	r1, r1, #2
   1939c:	ldrh	ip, [r0, #22]
   193a0:	lsl	r1, r1, #1
   193a4:	uxth	r1, r1
   193a8:	cmp	ip, r1
   193ac:	bls	193d8 <flatcc_verify_table_vector_field@@Base+0x40>
   193b0:	ldr	ip, [r0, #12]
   193b4:	ldrh	r1, [ip, r1]
   193b8:	cmp	r1, #0
   193bc:	beq	193d8 <flatcc_verify_table_vector_field@@Base+0x40>
   193c0:	ldrh	r2, [r0, #20]
   193c4:	add	ip, r1, #4
   193c8:	cmp	ip, r2
   193cc:	bls	193f0 <flatcc_verify_table_vector_field@@Base+0x58>
   193d0:	mov	r0, #13
   193d4:	bx	lr
   193d8:	cmp	r2, #0
   193dc:	beq	193e8 <flatcc_verify_table_vector_field@@Base+0x50>
   193e0:	mov	r0, #4
   193e4:	bx	lr
   193e8:	mov	r0, #0
   193ec:	bx	lr
   193f0:	ldr	r2, [r0, #16]
   193f4:	add	r1, r1, r2
   193f8:	tst	r1, #3
   193fc:	beq	19408 <flatcc_verify_table_vector_field@@Base+0x70>
   19400:	mov	r0, #12
   19404:	bx	lr
   19408:	cmp	r1, #0
   1940c:	beq	193e8 <flatcc_verify_table_vector_field@@Base+0x50>
   19410:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19414:	sub	sp, sp, #32
   19418:	ldr	r7, [r0, #8]
   1941c:	cmp	r7, #0
   19420:	ble	19494 <flatcc_verify_table_vector_field@@Base+0xfc>
   19424:	ldr	r8, [r0]
   19428:	ldr	ip, [r8, r1]
   1942c:	add	ip, r1, ip
   19430:	cmp	r1, ip
   19434:	bcs	19488 <flatcc_verify_table_vector_field@@Base+0xf0>
   19438:	ldr	r9, [r0, #4]
   1943c:	add	r4, ip, #4
   19440:	cmp	r9, r4
   19444:	bcc	19488 <flatcc_verify_table_vector_field@@Base+0xf0>
   19448:	tst	r4, #3
   1944c:	bne	19488 <flatcc_verify_table_vector_field@@Base+0xf0>
   19450:	ldr	r2, [r8, ip]
   19454:	cmn	r2, #-1073741823	; 0xc0000001
   19458:	bls	194a0 <flatcc_verify_table_vector_field@@Base+0x108>
   1945c:	ldr	r3, [r8, ip]
   19460:	cmn	r3, #-1073741823	; 0xc0000001
   19464:	movhi	r0, #25
   19468:	bhi	1948c <flatcc_verify_table_vector_field@@Base+0xf4>
   1946c:	sub	r4, r9, r4
   19470:	cmp	r4, r3, lsl #2
   19474:	movcc	r0, #26
   19478:	bcc	1948c <flatcc_verify_table_vector_field@@Base+0xf4>
   1947c:	mov	r0, #0
   19480:	add	sp, sp, #32
   19484:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19488:	mov	r0, #16
   1948c:	add	sp, sp, #32
   19490:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19494:	mov	r0, #3
   19498:	add	sp, sp, #32
   1949c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   194a0:	lsl	r6, r2, #2
   194a4:	sub	r1, r9, r4
   194a8:	cmp	r1, r6
   194ac:	bcc	1945c <flatcc_verify_table_vector_field@@Base+0xc4>
   194b0:	cmp	r2, #0
   194b4:	beq	1947c <flatcc_verify_table_vector_field@@Base+0xe4>
   194b8:	sub	r7, r7, #2
   194bc:	cmp	r7, #0
   194c0:	ldr	r2, [r8, r4]
   194c4:	add	r1, r8, r4
   194c8:	str	r7, [sp, #16]
   194cc:	beq	19494 <flatcc_verify_table_vector_field@@Base+0xfc>
   194d0:	add	r2, r4, r2
   194d4:	cmp	r2, r4
   194d8:	bls	19664 <flatcc_verify_table_vector_field@@Base+0x2cc>
   194dc:	add	r0, r2, #4
   194e0:	cmp	r9, r0
   194e4:	bcc	19664 <flatcc_verify_table_vector_field@@Base+0x2cc>
   194e8:	tst	r2, #3
   194ec:	bne	19664 <flatcc_verify_table_vector_field@@Base+0x2cc>
   194f0:	add	ip, ip, #8
   194f4:	add	r5, r8, ip
   194f8:	mov	sl, r1
   194fc:	add	r6, r4, r6
   19500:	str	r2, [sp, #24]
   19504:	ldr	r1, [r8, r2]
   19508:	subs	r1, r2, r1
   1950c:	bmi	19518 <flatcc_verify_table_vector_field@@Base+0x180>
   19510:	tst	r1, #1
   19514:	beq	195c4 <flatcc_verify_table_vector_field@@Base+0x22c>
   19518:	ldr	r2, [sl]
   1951c:	str	r7, [sp, #16]
   19520:	add	r2, r4, r2
   19524:	cmp	r2, r4
   19528:	bls	19670 <flatcc_verify_table_vector_field@@Base+0x2d8>
   1952c:	add	r1, r2, #4
   19530:	cmp	r9, r1
   19534:	bcc	19670 <flatcc_verify_table_vector_field@@Base+0x2d8>
   19538:	tst	r2, #3
   1953c:	bne	19670 <flatcc_verify_table_vector_field@@Base+0x2d8>
   19540:	str	r2, [sp, #24]
   19544:	ldr	r1, [r8, r2]
   19548:	subs	r1, r2, r1
   1954c:	bmi	19678 <flatcc_verify_table_vector_field@@Base+0x2e0>
   19550:	tst	r1, #1
   19554:	bne	19678 <flatcc_verify_table_vector_field@@Base+0x2e0>
   19558:	add	ip, r1, #2
   1955c:	cmp	r9, ip
   19560:	movcc	r0, #27
   19564:	bcc	1948c <flatcc_verify_table_vector_field@@Base+0xf4>
   19568:	ldrh	r0, [r8, r1]
   1956c:	add	lr, r8, r1
   19570:	add	r1, r0, r1
   19574:	cmp	r9, r1
   19578:	strh	r0, [sp, #30]
   1957c:	bcc	19680 <flatcc_verify_table_vector_field@@Base+0x2e8>
   19580:	tst	r0, #1
   19584:	bne	19680 <flatcc_verify_table_vector_field@@Base+0x2e8>
   19588:	cmp	r0, #3
   1958c:	movls	r0, #28
   19590:	bls	1948c <flatcc_verify_table_vector_field@@Base+0xf4>
   19594:	ldrh	r1, [r8, ip]
   19598:	sub	r2, r9, r2
   1959c:	cmp	r2, r1
   195a0:	strh	r1, [sp, #28]
   195a4:	movcc	r0, #20
   195a8:	bcc	1948c <flatcc_verify_table_vector_field@@Base+0xf4>
   195ac:	add	r0, sp, #8
   195b0:	str	lr, [sp, #20]
   195b4:	str	r8, [sp, #8]
   195b8:	str	r9, [sp, #12]
   195bc:	blx	r3
   195c0:	b	1948c <flatcc_verify_table_vector_field@@Base+0xf4>
   195c4:	add	r0, r1, #2
   195c8:	cmp	r9, r0
   195cc:	bcc	19518 <flatcc_verify_table_vector_field@@Base+0x180>
   195d0:	ldrh	lr, [r8, r1]
   195d4:	add	ip, r8, r1
   195d8:	add	r1, lr, r1
   195dc:	cmp	r9, r1
   195e0:	strh	lr, [sp, #30]
   195e4:	bcc	19518 <flatcc_verify_table_vector_field@@Base+0x180>
   195e8:	tst	lr, #1
   195ec:	bne	19518 <flatcc_verify_table_vector_field@@Base+0x180>
   195f0:	cmp	lr, #3
   195f4:	bls	19518 <flatcc_verify_table_vector_field@@Base+0x180>
   195f8:	ldrh	r1, [r8, r0]
   195fc:	sub	r2, r9, r2
   19600:	cmp	r2, r1
   19604:	strh	r1, [sp, #28]
   19608:	bcc	19518 <flatcc_verify_table_vector_field@@Base+0x180>
   1960c:	add	r0, sp, #8
   19610:	stmib	sp, {r3, r8, r9}
   19614:	str	ip, [sp, #20]
   19618:	blx	r3
   1961c:	ldr	r3, [sp, #4]
   19620:	cmp	r0, #0
   19624:	bne	19518 <flatcc_verify_table_vector_field@@Base+0x180>
   19628:	add	r4, r4, #4
   1962c:	cmp	r6, r4
   19630:	beq	1947c <flatcc_verify_table_vector_field@@Base+0xe4>
   19634:	mov	r1, r5
   19638:	ldr	r2, [r5], #4
   1963c:	str	r7, [sp, #16]
   19640:	add	r2, r2, r4
   19644:	cmp	r4, r2
   19648:	bcs	19664 <flatcc_verify_table_vector_field@@Base+0x2cc>
   1964c:	add	r0, r2, #4
   19650:	cmp	r9, r0
   19654:	bcc	19664 <flatcc_verify_table_vector_field@@Base+0x2cc>
   19658:	tst	r2, #3
   1965c:	add	sl, sl, #4
   19660:	beq	19500 <flatcc_verify_table_vector_field@@Base+0x168>
   19664:	ldr	r2, [r1]
   19668:	str	r7, [sp, #16]
   1966c:	b	19520 <flatcc_verify_table_vector_field@@Base+0x188>
   19670:	mov	r0, #15
   19674:	b	1948c <flatcc_verify_table_vector_field@@Base+0xf4>
   19678:	mov	r0, #29
   1967c:	b	1948c <flatcc_verify_table_vector_field@@Base+0xf4>
   19680:	mov	r0, #30
   19684:	b	1948c <flatcc_verify_table_vector_field@@Base+0xf4>

00019688 <flatcc_verify_union_table@@Base>:
   19688:	ldr	r3, [r0, #8]
   1968c:	push	{r4, r5, lr}
   19690:	sub	r3, r3, #1
   19694:	sub	sp, sp, #28
   19698:	cmp	r3, #0
   1969c:	ldr	lr, [r0]
   196a0:	str	r3, [sp, #8]
   196a4:	ldr	ip, [r0, #4]
   196a8:	ldr	r2, [r0, #16]
   196ac:	ldr	r3, [r0, #20]
   196b0:	moveq	r0, #3
   196b4:	bne	196c0 <flatcc_verify_union_table@@Base+0x38>
   196b8:	add	sp, sp, #28
   196bc:	pop	{r4, r5, pc}
   196c0:	add	r3, r2, r3
   196c4:	cmp	r2, r3
   196c8:	bcs	19764 <flatcc_verify_union_table@@Base+0xdc>
   196cc:	add	r2, r3, #4
   196d0:	cmp	ip, r2
   196d4:	bcc	19764 <flatcc_verify_union_table@@Base+0xdc>
   196d8:	tst	r3, #3
   196dc:	bne	19764 <flatcc_verify_union_table@@Base+0xdc>
   196e0:	str	r3, [sp, #16]
   196e4:	ldr	r2, [lr, r3]
   196e8:	subs	r2, r3, r2
   196ec:	bmi	19770 <flatcc_verify_union_table@@Base+0xe8>
   196f0:	tst	r2, #1
   196f4:	bne	19770 <flatcc_verify_union_table@@Base+0xe8>
   196f8:	add	r0, r2, #2
   196fc:	cmp	ip, r0
   19700:	movcc	r0, #27
   19704:	bcc	196b8 <flatcc_verify_union_table@@Base+0x30>
   19708:	ldrh	r4, [lr, r2]
   1970c:	add	r5, lr, r2
   19710:	add	r2, r4, r2
   19714:	cmp	ip, r2
   19718:	strh	r4, [sp, #22]
   1971c:	bcc	19778 <flatcc_verify_union_table@@Base+0xf0>
   19720:	tst	r4, #1
   19724:	bne	19778 <flatcc_verify_union_table@@Base+0xf0>
   19728:	cmp	r4, #3
   1972c:	movls	r0, #28
   19730:	bls	196b8 <flatcc_verify_union_table@@Base+0x30>
   19734:	ldrh	r2, [lr, r0]
   19738:	sub	r3, ip, r3
   1973c:	cmp	r3, r2
   19740:	strh	r2, [sp, #20]
   19744:	movcc	r0, #20
   19748:	bcc	196b8 <flatcc_verify_union_table@@Base+0x30>
   1974c:	mov	r0, sp
   19750:	str	r5, [sp, #12]
   19754:	str	lr, [sp]
   19758:	str	ip, [sp, #4]
   1975c:	blx	r1
   19760:	b	196b8 <flatcc_verify_union_table@@Base+0x30>
   19764:	mov	r0, #15
   19768:	add	sp, sp, #28
   1976c:	pop	{r4, r5, pc}
   19770:	mov	r0, #29
   19774:	b	196b8 <flatcc_verify_union_table@@Base+0x30>
   19778:	mov	r0, #30
   1977c:	b	196b8 <flatcc_verify_union_table@@Base+0x30>

00019780 <flatcc_verify_union_struct@@Base>:
   19780:	ldr	r3, [r0, #20]
   19784:	ldr	ip, [r0, #4]
   19788:	cmp	r3, #0
   1978c:	ldr	r0, [r0, #16]
   19790:	bne	1979c <flatcc_verify_union_struct@@Base+0x1c>
   19794:	mov	r0, #18
   19798:	bx	lr
   1979c:	add	r3, r0, r3
   197a0:	cmp	ip, r3
   197a4:	bcc	19794 <flatcc_verify_union_struct@@Base+0x14>
   197a8:	adds	r1, r1, r3
   197ac:	bcc	197b8 <flatcc_verify_union_struct@@Base+0x38>
   197b0:	mov	r0, #10
   197b4:	bx	lr
   197b8:	cmp	ip, r1
   197bc:	bcs	197c8 <flatcc_verify_union_struct@@Base+0x48>
   197c0:	mov	r0, #9
   197c4:	bx	lr
   197c8:	sub	r2, r2, #1
   197cc:	tst	r2, r3
   197d0:	movne	r0, #11
   197d4:	moveq	r0, #0
   197d8:	bx	lr

000197dc <flatcc_verify_union_string@@Base>:
   197dc:	ldr	r2, [r0, #16]
   197e0:	ldr	r3, [r0, #20]
   197e4:	add	r3, r2, r3
   197e8:	cmp	r2, r3
   197ec:	bcs	19828 <flatcc_verify_union_string@@Base+0x4c>
   197f0:	ldr	r2, [r0, #4]
   197f4:	add	r1, r3, #4
   197f8:	cmp	r2, r1
   197fc:	bcc	19828 <flatcc_verify_union_string@@Base+0x4c>
   19800:	tst	r3, #3
   19804:	bne	19828 <flatcc_verify_union_string@@Base+0x4c>
   19808:	ldr	r0, [r0]
   1980c:	sub	r2, r2, r1
   19810:	ldr	r3, [r0, r3]
   19814:	add	ip, r3, #1
   19818:	cmp	r2, ip
   1981c:	bcs	19830 <flatcc_verify_union_string@@Base+0x54>
   19820:	mov	r0, #8
   19824:	bx	lr
   19828:	mov	r0, #17
   1982c:	bx	lr
   19830:	add	r1, r0, r1
   19834:	ldrb	r0, [r1, r3]
   19838:	cmp	r0, #0
   1983c:	movne	r0, #7
   19840:	moveq	r0, #0
   19844:	bx	lr

00019848 <flatcc_verify_buffer_header@@Base>:
   19848:	ands	r3, r0, #3
   1984c:	beq	19858 <flatcc_verify_buffer_header@@Base+0x10>
   19850:	mov	r0, #5
   19854:	bx	lr
   19858:	cmn	r1, #9
   1985c:	bls	19868 <flatcc_verify_buffer_header@@Base+0x20>
   19860:	mov	r0, #6
   19864:	bx	lr
   19868:	cmp	r1, #7
   1986c:	bls	198b8 <flatcc_verify_buffer_header@@Base+0x70>
   19870:	cmp	r2, #0
   19874:	beq	198c0 <flatcc_verify_buffer_header@@Base+0x78>
   19878:	push	{r4, lr}
   1987c:	sub	sp, sp, #8
   19880:	mov	r4, r0
   19884:	add	r0, sp, #8
   19888:	mov	r1, r2
   1988c:	str	r3, [r0, #-4]!
   19890:	mov	r2, #4
   19894:	bl	12328 <strncpy@plt>
   19898:	ldr	r2, [r4, #4]
   1989c:	ldr	r3, [sp, #4]
   198a0:	cmp	r3, #0
   198a4:	cmpne	r2, r3
   198a8:	moveq	r0, #0
   198ac:	movne	r0, #2
   198b0:	add	sp, sp, #8
   198b4:	pop	{r4, pc}
   198b8:	mov	r0, #1
   198bc:	bx	lr
   198c0:	mov	r0, #0
   198c4:	bx	lr

000198c8 <flatcc_verify_typed_buffer_header@@Base>:
   198c8:	tst	r0, #3
   198cc:	beq	198d8 <flatcc_verify_typed_buffer_header@@Base+0x10>
   198d0:	mov	r0, #5
   198d4:	bx	lr
   198d8:	cmn	r1, #9
   198dc:	bls	198e8 <flatcc_verify_typed_buffer_header@@Base+0x20>
   198e0:	mov	r0, #6
   198e4:	bx	lr
   198e8:	cmp	r1, #7
   198ec:	bls	19914 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   198f0:	cmp	r2, #0
   198f4:	beq	1990c <flatcc_verify_typed_buffer_header@@Base+0x44>
   198f8:	ldr	r0, [r0, #4]
   198fc:	cmp	r2, r0
   19900:	movne	r0, #2
   19904:	moveq	r0, #0
   19908:	bx	lr
   1990c:	mov	r0, r2
   19910:	bx	lr
   19914:	mov	r0, #1
   19918:	bx	lr

0001991c <flatcc_verify_struct_as_root@@Base>:
   1991c:	cmn	r1, #9
   19920:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19924:	mov	r6, r1
   19928:	movls	r5, #0
   1992c:	movhi	r5, #1
   19930:	ands	r1, r0, #3
   19934:	movne	r1, #1
   19938:	orr	r5, r5, r1
   1993c:	sub	sp, sp, #16
   19940:	cmp	r6, #7
   19944:	movhi	r7, r5
   19948:	orrls	r7, r5, #1
   1994c:	cmp	r7, #0
   19950:	mov	r4, r0
   19954:	mov	sl, r2
   19958:	and	r9, r0, #3
   1995c:	ldrh	r8, [sp, #48]	; 0x30
   19960:	bne	1999c <flatcc_verify_struct_as_root@@Base+0x80>
   19964:	cmp	r2, #0
   19968:	beq	199f8 <flatcc_verify_struct_as_root@@Base+0xdc>
   1996c:	add	r0, sp, #16
   19970:	mov	r2, #4
   19974:	mov	r1, sl
   19978:	str	r7, [r0, #-4]!
   1997c:	str	r3, [sp, #4]
   19980:	bl	12328 <strncpy@plt>
   19984:	ldr	r2, [sp, #12]
   19988:	ldr	r1, [r4, #4]
   1998c:	ldr	r3, [sp, #4]
   19990:	cmp	r2, #0
   19994:	cmpne	r1, r2
   19998:	beq	199f8 <flatcc_verify_struct_as_root@@Base+0xdc>
   1999c:	cmp	r9, #0
   199a0:	movne	r0, #5
   199a4:	bne	19a18 <flatcc_verify_struct_as_root@@Base+0xfc>
   199a8:	cmp	r5, #0
   199ac:	movne	r0, #6
   199b0:	bne	19a18 <flatcc_verify_struct_as_root@@Base+0xfc>
   199b4:	cmp	r7, #0
   199b8:	movne	r0, #1
   199bc:	bne	19a18 <flatcc_verify_struct_as_root@@Base+0xfc>
   199c0:	cmp	sl, #0
   199c4:	beq	19a48 <flatcc_verify_struct_as_root@@Base+0x12c>
   199c8:	add	r0, sp, #16
   199cc:	mov	r2, #4
   199d0:	mov	r1, sl
   199d4:	str	r7, [r0, #-4]!
   199d8:	bl	12328 <strncpy@plt>
   199dc:	ldr	r2, [r4, #4]
   199e0:	ldr	r3, [sp, #12]
   199e4:	cmp	r3, #0
   199e8:	cmpne	r2, r3
   199ec:	movne	r0, #2
   199f0:	bne	19a18 <flatcc_verify_struct_as_root@@Base+0xfc>
   199f4:	b	19a48 <flatcc_verify_struct_as_root@@Base+0x12c>
   199f8:	ldr	r1, [r4]
   199fc:	clz	r2, r1
   19a00:	lsr	r2, r2, #5
   19a04:	cmp	r6, r1
   19a08:	orrcc	r2, r2, #1
   19a0c:	cmp	r2, #0
   19a10:	movne	r0, #18
   19a14:	beq	19a20 <flatcc_verify_struct_as_root@@Base+0x104>
   19a18:	add	sp, sp, #16
   19a1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19a20:	adds	r3, r3, r1
   19a24:	movcs	r0, #10
   19a28:	bcs	19a18 <flatcc_verify_struct_as_root@@Base+0xfc>
   19a2c:	cmp	r6, r3
   19a30:	movcc	r0, #9
   19a34:	bcc	19a18 <flatcc_verify_struct_as_root@@Base+0xfc>
   19a38:	sub	r8, r8, #1
   19a3c:	tst	r8, r1
   19a40:	movne	r0, #11
   19a44:	bne	19a18 <flatcc_verify_struct_as_root@@Base+0xfc>
   19a48:	mov	r0, #0
   19a4c:	b	19a18 <flatcc_verify_struct_as_root@@Base+0xfc>

00019a50 <flatcc_verify_struct_as_typed_root@@Base>:
   19a50:	push	{lr}		; (str lr, [sp, #-4]!)
   19a54:	sub	lr, r1, #8
   19a58:	cmn	lr, #17
   19a5c:	movls	lr, #0
   19a60:	movhi	lr, #1
   19a64:	ands	ip, r0, #3
   19a68:	movne	ip, #1
   19a6c:	orrs	ip, lr, ip
   19a70:	ldrh	lr, [sp, #4]
   19a74:	bne	19ac4 <flatcc_verify_struct_as_typed_root@@Base+0x74>
   19a78:	cmp	r2, #0
   19a7c:	beq	19a9c <flatcc_verify_struct_as_typed_root@@Base+0x4c>
   19a80:	ldr	ip, [r0, #4]
   19a84:	cmp	r2, ip
   19a88:	beq	19a9c <flatcc_verify_struct_as_typed_root@@Base+0x4c>
   19a8c:	cmn	r1, #9
   19a90:	bls	19ae8 <flatcc_verify_struct_as_typed_root@@Base+0x98>
   19a94:	mov	r0, #6
   19a98:	pop	{pc}		; (ldr pc, [sp], #4)
   19a9c:	ldr	r0, [r0]
   19aa0:	cmp	r1, r0
   19aa4:	movcs	r2, #0
   19aa8:	movcc	r2, #1
   19aac:	cmp	r0, #0
   19ab0:	orreq	r2, r2, #1
   19ab4:	cmp	r2, #0
   19ab8:	beq	19ad8 <flatcc_verify_struct_as_typed_root@@Base+0x88>
   19abc:	mov	r0, #18
   19ac0:	pop	{pc}		; (ldr pc, [sp], #4)
   19ac4:	and	ip, r0, #3
   19ac8:	cmp	ip, #0
   19acc:	beq	19a8c <flatcc_verify_struct_as_typed_root@@Base+0x3c>
   19ad0:	mov	r0, #5
   19ad4:	pop	{pc}		; (ldr pc, [sp], #4)
   19ad8:	adds	r3, r3, r0
   19adc:	bcc	19b14 <flatcc_verify_struct_as_typed_root@@Base+0xc4>
   19ae0:	mov	r0, #10
   19ae4:	pop	{pc}		; (ldr pc, [sp], #4)
   19ae8:	cmp	r1, #7
   19aec:	bls	19b0c <flatcc_verify_struct_as_typed_root@@Base+0xbc>
   19af0:	cmp	r2, #0
   19af4:	beq	19b24 <flatcc_verify_struct_as_typed_root@@Base+0xd4>
   19af8:	ldr	r0, [r0, #4]
   19afc:	cmp	r2, r0
   19b00:	movne	r0, #2
   19b04:	moveq	r0, #0
   19b08:	pop	{pc}		; (ldr pc, [sp], #4)
   19b0c:	mov	r0, #1
   19b10:	pop	{pc}		; (ldr pc, [sp], #4)
   19b14:	cmp	r1, r3
   19b18:	bcs	19b2c <flatcc_verify_struct_as_typed_root@@Base+0xdc>
   19b1c:	mov	r0, #9
   19b20:	pop	{pc}		; (ldr pc, [sp], #4)
   19b24:	mov	r0, r2
   19b28:	pop	{pc}		; (ldr pc, [sp], #4)
   19b2c:	sub	lr, lr, #1
   19b30:	tst	lr, r0
   19b34:	moveq	r0, #0
   19b38:	movne	r0, #11
   19b3c:	pop	{pc}		; (ldr pc, [sp], #4)

00019b40 <flatcc_verify_table_as_root@@Base>:
   19b40:	push	{r4, r5, r6, lr}
   19b44:	mov	r5, r1
   19b48:	sub	r1, r1, #8
   19b4c:	cmn	r1, #17
   19b50:	movls	r1, #0
   19b54:	movhi	r1, #1
   19b58:	mov	r4, r0
   19b5c:	ands	r0, r0, #3
   19b60:	movne	r0, #1
   19b64:	orrs	r1, r1, r0
   19b68:	sub	sp, sp, #32
   19b6c:	mov	r6, r2
   19b70:	bne	19cb0 <flatcc_verify_table_as_root@@Base+0x170>
   19b74:	cmp	r2, #0
   19b78:	beq	19c04 <flatcc_verify_table_as_root@@Base+0xc4>
   19b7c:	add	r0, sp, #32
   19b80:	mov	r2, #4
   19b84:	str	r1, [r0, #-24]!	; 0xffffffe8
   19b88:	mov	r1, r6
   19b8c:	str	r3, [sp, #4]
   19b90:	bl	12328 <strncpy@plt>
   19b94:	ldr	r2, [sp, #8]
   19b98:	ldr	r1, [r4, #4]
   19b9c:	ldr	r3, [sp, #4]
   19ba0:	cmp	r2, #0
   19ba4:	cmpne	r1, r2
   19ba8:	beq	19c04 <flatcc_verify_table_as_root@@Base+0xc4>
   19bac:	cmn	r5, #9
   19bb0:	movhi	r0, #6
   19bb4:	bhi	19cc0 <flatcc_verify_table_as_root@@Base+0x180>
   19bb8:	cmp	r5, #7
   19bbc:	movls	r0, #1
   19bc0:	bls	19cc0 <flatcc_verify_table_as_root@@Base+0x180>
   19bc4:	cmp	r6, #0
   19bc8:	beq	19bfc <flatcc_verify_table_as_root@@Base+0xbc>
   19bcc:	add	r0, sp, #32
   19bd0:	mov	r3, #0
   19bd4:	str	r3, [r0, #-24]!	; 0xffffffe8
   19bd8:	mov	r2, #4
   19bdc:	mov	r1, r6
   19be0:	bl	12328 <strncpy@plt>
   19be4:	ldr	r2, [r4, #4]
   19be8:	ldr	r3, [sp, #8]
   19bec:	cmp	r3, #0
   19bf0:	cmpne	r2, r3
   19bf4:	movne	r0, #2
   19bf8:	bne	19cc0 <flatcc_verify_table_as_root@@Base+0x180>
   19bfc:	mov	r0, #0
   19c00:	b	19cc0 <flatcc_verify_table_as_root@@Base+0x180>
   19c04:	ldr	r2, [r4]
   19c08:	mov	r1, #99	; 0x63
   19c0c:	cmp	r2, #0
   19c10:	str	r1, [sp, #16]
   19c14:	beq	19cc8 <flatcc_verify_table_as_root@@Base+0x188>
   19c18:	add	r1, r2, #4
   19c1c:	cmp	r5, r1
   19c20:	bcc	19cc8 <flatcc_verify_table_as_root@@Base+0x188>
   19c24:	tst	r2, #3
   19c28:	bne	19cc8 <flatcc_verify_table_as_root@@Base+0x188>
   19c2c:	ldr	r1, [r4, r2]
   19c30:	str	r2, [sp, #24]
   19c34:	subs	r1, r2, r1
   19c38:	bmi	19cd4 <flatcc_verify_table_as_root@@Base+0x194>
   19c3c:	tst	r1, #1
   19c40:	bne	19cd4 <flatcc_verify_table_as_root@@Base+0x194>
   19c44:	add	r0, r1, #2
   19c48:	cmp	r5, r0
   19c4c:	movcc	r0, #27
   19c50:	bcc	19cc0 <flatcc_verify_table_as_root@@Base+0x180>
   19c54:	ldrh	ip, [r4, r1]
   19c58:	add	lr, r4, r1
   19c5c:	add	r1, ip, r1
   19c60:	cmp	r5, r1
   19c64:	strh	ip, [sp, #30]
   19c68:	bcc	19cdc <flatcc_verify_table_as_root@@Base+0x19c>
   19c6c:	tst	ip, #1
   19c70:	bne	19cdc <flatcc_verify_table_as_root@@Base+0x19c>
   19c74:	cmp	ip, #3
   19c78:	movls	r0, #28
   19c7c:	bls	19cc0 <flatcc_verify_table_as_root@@Base+0x180>
   19c80:	ldrh	r1, [r4, r0]
   19c84:	sub	r2, r5, r2
   19c88:	cmp	r2, r1
   19c8c:	strh	r1, [sp, #28]
   19c90:	movcc	r0, #20
   19c94:	bcc	19cc0 <flatcc_verify_table_as_root@@Base+0x180>
   19c98:	add	r0, sp, #8
   19c9c:	str	lr, [sp, #20]
   19ca0:	str	r4, [sp, #8]
   19ca4:	str	r5, [sp, #12]
   19ca8:	blx	r3
   19cac:	b	19cc0 <flatcc_verify_table_as_root@@Base+0x180>
   19cb0:	and	r2, r4, #3
   19cb4:	cmp	r2, #0
   19cb8:	movne	r0, #5
   19cbc:	beq	19bac <flatcc_verify_table_as_root@@Base+0x6c>
   19cc0:	add	sp, sp, #32
   19cc4:	pop	{r4, r5, r6, pc}
   19cc8:	mov	r0, #15
   19ccc:	add	sp, sp, #32
   19cd0:	pop	{r4, r5, r6, pc}
   19cd4:	mov	r0, #29
   19cd8:	b	19cc0 <flatcc_verify_table_as_root@@Base+0x180>
   19cdc:	mov	r0, #30
   19ce0:	b	19cc0 <flatcc_verify_table_as_root@@Base+0x180>

00019ce4 <flatcc_verify_table_as_typed_root@@Base>:
   19ce4:	push	{r4, r5, lr}
   19ce8:	sub	lr, r1, #8
   19cec:	cmn	lr, #17
   19cf0:	movls	lr, #0
   19cf4:	movhi	lr, #1
   19cf8:	ands	ip, r0, #3
   19cfc:	movne	ip, #1
   19d00:	orrs	ip, lr, ip
   19d04:	sub	sp, sp, #28
   19d08:	bne	19d58 <flatcc_verify_table_as_typed_root@@Base+0x74>
   19d0c:	cmp	r2, #0
   19d10:	beq	19d70 <flatcc_verify_table_as_typed_root@@Base+0x8c>
   19d14:	ldr	ip, [r0, #4]
   19d18:	cmp	r2, ip
   19d1c:	beq	19d70 <flatcc_verify_table_as_typed_root@@Base+0x8c>
   19d20:	cmn	r1, #9
   19d24:	movhi	r0, #6
   19d28:	bhi	19d68 <flatcc_verify_table_as_typed_root@@Base+0x84>
   19d2c:	cmp	r1, #7
   19d30:	movls	r0, #1
   19d34:	bls	19d68 <flatcc_verify_table_as_typed_root@@Base+0x84>
   19d38:	cmp	r2, #0
   19d3c:	moveq	r0, r2
   19d40:	beq	19d68 <flatcc_verify_table_as_typed_root@@Base+0x84>
   19d44:	ldr	r0, [r0, #4]
   19d48:	cmp	r2, r0
   19d4c:	movne	r0, #2
   19d50:	moveq	r0, #0
   19d54:	b	19d68 <flatcc_verify_table_as_typed_root@@Base+0x84>
   19d58:	and	ip, r0, #3
   19d5c:	cmp	ip, #0
   19d60:	movne	r0, #5
   19d64:	beq	19d20 <flatcc_verify_table_as_typed_root@@Base+0x3c>
   19d68:	add	sp, sp, #28
   19d6c:	pop	{r4, r5, pc}
   19d70:	ldr	r2, [r0]
   19d74:	mov	ip, #99	; 0x63
   19d78:	cmp	r2, #0
   19d7c:	str	ip, [sp, #8]
   19d80:	beq	19e20 <flatcc_verify_table_as_typed_root@@Base+0x13c>
   19d84:	add	ip, r2, #4
   19d88:	cmp	r1, ip
   19d8c:	bcc	19e20 <flatcc_verify_table_as_typed_root@@Base+0x13c>
   19d90:	tst	r2, #3
   19d94:	bne	19e20 <flatcc_verify_table_as_typed_root@@Base+0x13c>
   19d98:	ldr	ip, [r0, r2]
   19d9c:	str	r2, [sp, #16]
   19da0:	subs	ip, r2, ip
   19da4:	bmi	19e2c <flatcc_verify_table_as_typed_root@@Base+0x148>
   19da8:	tst	ip, #1
   19dac:	bne	19e2c <flatcc_verify_table_as_typed_root@@Base+0x148>
   19db0:	add	lr, ip, #2
   19db4:	cmp	r1, lr
   19db8:	movcc	r0, #27
   19dbc:	bcc	19d68 <flatcc_verify_table_as_typed_root@@Base+0x84>
   19dc0:	ldrh	r4, [r0, ip]
   19dc4:	add	r5, r0, ip
   19dc8:	add	ip, r4, ip
   19dcc:	cmp	r1, ip
   19dd0:	strh	r4, [sp, #22]
   19dd4:	bcc	19e34 <flatcc_verify_table_as_typed_root@@Base+0x150>
   19dd8:	tst	r4, #1
   19ddc:	bne	19e34 <flatcc_verify_table_as_typed_root@@Base+0x150>
   19de0:	cmp	r4, #3
   19de4:	movls	r0, #28
   19de8:	bls	19d68 <flatcc_verify_table_as_typed_root@@Base+0x84>
   19dec:	ldrh	ip, [r0, lr]
   19df0:	sub	r2, r1, r2
   19df4:	cmp	r2, ip
   19df8:	strh	ip, [sp, #20]
   19dfc:	movcc	r0, #20
   19e00:	bcc	19d68 <flatcc_verify_table_as_typed_root@@Base+0x84>
   19e04:	mov	r2, r0
   19e08:	mov	r0, sp
   19e0c:	str	r5, [sp, #12]
   19e10:	str	r2, [sp]
   19e14:	str	r1, [sp, #4]
   19e18:	blx	r3
   19e1c:	b	19d68 <flatcc_verify_table_as_typed_root@@Base+0x84>
   19e20:	mov	r0, #15
   19e24:	add	sp, sp, #28
   19e28:	pop	{r4, r5, pc}
   19e2c:	mov	r0, #29
   19e30:	b	19d68 <flatcc_verify_table_as_typed_root@@Base+0x84>
   19e34:	mov	r0, #30
   19e38:	b	19d68 <flatcc_verify_table_as_typed_root@@Base+0x84>

00019e3c <flatcc_verify_struct_as_nested_root@@Base>:
   19e3c:	add	ip, r1, #2
   19e40:	push	{r4, r5, r6, r7, r8, lr}
   19e44:	lsl	ip, ip, #1
   19e48:	ldrh	lr, [r0, #22]
   19e4c:	sub	sp, sp, #16
   19e50:	uxth	ip, ip
   19e54:	cmp	lr, ip
   19e58:	ldr	r5, [sp, #40]	; 0x28
   19e5c:	ldrh	r4, [sp, #44]	; 0x2c
   19e60:	bls	19ea4 <flatcc_verify_struct_as_nested_root@@Base+0x68>
   19e64:	ldr	lr, [r0, #12]
   19e68:	ldrh	ip, [lr, ip]
   19e6c:	cmp	ip, #0
   19e70:	beq	19ea4 <flatcc_verify_struct_as_nested_root@@Base+0x68>
   19e74:	ldrh	lr, [r0, #20]
   19e78:	add	r6, ip, #4
   19e7c:	cmp	r6, lr
   19e80:	bls	19eb8 <flatcc_verify_struct_as_nested_root@@Base+0x7c>
   19e84:	mvn	lr, #0
   19e88:	mov	ip, #1
   19e8c:	mov	r3, r4
   19e90:	str	lr, [sp, #44]	; 0x2c
   19e94:	str	ip, [sp, #40]	; 0x28
   19e98:	add	sp, sp, #16
   19e9c:	pop	{r4, r5, r6, r7, r8, lr}
   19ea0:	b	18f8c <flatcc_verify_vector_field@@Base>
   19ea4:	cmp	r2, #0
   19ea8:	bne	19e84 <flatcc_verify_struct_as_nested_root@@Base+0x48>
   19eac:	mov	r0, #0
   19eb0:	add	sp, sp, #16
   19eb4:	pop	{r4, r5, r6, r7, r8, pc}
   19eb8:	ldr	lr, [r0, #16]
   19ebc:	add	ip, ip, lr
   19ec0:	tst	ip, #3
   19ec4:	bne	19e84 <flatcc_verify_struct_as_nested_root@@Base+0x48>
   19ec8:	cmp	ip, #0
   19ecc:	beq	19fc8 <flatcc_verify_struct_as_nested_root@@Base+0x18c>
   19ed0:	ldr	r7, [r0]
   19ed4:	add	lr, r7, ip
   19ed8:	ldr	r6, [r7, ip]
   19edc:	add	r6, ip, r6
   19ee0:	cmp	r6, ip
   19ee4:	bls	19e84 <flatcc_verify_struct_as_nested_root@@Base+0x48>
   19ee8:	ldr	ip, [r0, #4]
   19eec:	add	r8, r6, #4
   19ef0:	cmp	ip, r8
   19ef4:	bcc	19e84 <flatcc_verify_struct_as_nested_root@@Base+0x48>
   19ef8:	tst	r8, #3
   19efc:	bne	19e84 <flatcc_verify_struct_as_nested_root@@Base+0x48>
   19f00:	ldr	r6, [r7, r6]
   19f04:	sub	ip, ip, r8
   19f08:	mul	r6, r6, r4
   19f0c:	cmp	ip, r6
   19f10:	bcc	19e84 <flatcc_verify_struct_as_nested_root@@Base+0x48>
   19f14:	ldr	r2, [lr]
   19f18:	add	r6, lr, r2
   19f1c:	ldr	r7, [lr, r2]
   19f20:	and	r0, r6, #3
   19f24:	sub	r2, r7, #8
   19f28:	cmn	r2, #17
   19f2c:	movls	r2, #0
   19f30:	movhi	r2, #1
   19f34:	ands	r1, r6, #3
   19f38:	movne	r1, #1
   19f3c:	orrs	r1, r2, r1
   19f40:	bne	19fd8 <flatcc_verify_struct_as_nested_root@@Base+0x19c>
   19f44:	cmp	r3, #0
   19f48:	beq	19f7c <flatcc_verify_struct_as_nested_root@@Base+0x140>
   19f4c:	add	r0, sp, #16
   19f50:	mov	r2, #4
   19f54:	str	r1, [r0, #-4]!
   19f58:	mov	r1, r3
   19f5c:	str	r3, [sp, #4]
   19f60:	bl	12328 <strncpy@plt>
   19f64:	ldr	r2, [sp, #12]
   19f68:	ldr	r1, [r6, #8]
   19f6c:	ldr	r3, [sp, #4]
   19f70:	cmp	r2, #0
   19f74:	cmpne	r1, r2
   19f78:	bne	19fe4 <flatcc_verify_struct_as_nested_root@@Base+0x1a8>
   19f7c:	ldr	r2, [r6, #4]
   19f80:	clz	r3, r2
   19f84:	lsr	r3, r3, #5
   19f88:	cmp	r7, r2
   19f8c:	orrcc	r3, r3, #1
   19f90:	cmp	r3, #0
   19f94:	movne	r0, #18
   19f98:	bne	19eb0 <flatcc_verify_struct_as_nested_root@@Base+0x74>
   19f9c:	adds	r5, r5, r2
   19fa0:	movcs	r0, #10
   19fa4:	bcs	19eb0 <flatcc_verify_struct_as_nested_root@@Base+0x74>
   19fa8:	cmp	r7, r5
   19fac:	movcc	r0, #9
   19fb0:	bcc	19eb0 <flatcc_verify_struct_as_nested_root@@Base+0x74>
   19fb4:	sub	r4, r4, #1
   19fb8:	tst	r4, r2
   19fbc:	movne	r0, #11
   19fc0:	bne	19eb0 <flatcc_verify_struct_as_nested_root@@Base+0x74>
   19fc4:	b	19eac <flatcc_verify_struct_as_nested_root@@Base+0x70>
   19fc8:	ldr	lr, [r0]
   19fcc:	cmp	lr, #0
   19fd0:	bne	19f14 <flatcc_verify_struct_as_nested_root@@Base+0xd8>
   19fd4:	b	19eac <flatcc_verify_struct_as_nested_root@@Base+0x70>
   19fd8:	cmp	r0, #0
   19fdc:	movne	r0, #5
   19fe0:	bne	19eb0 <flatcc_verify_struct_as_nested_root@@Base+0x74>
   19fe4:	cmn	r7, #9
   19fe8:	movhi	r0, #6
   19fec:	bhi	19eb0 <flatcc_verify_struct_as_nested_root@@Base+0x74>
   19ff0:	cmp	r7, #7
   19ff4:	movls	r0, #1
   19ff8:	bls	19eb0 <flatcc_verify_struct_as_nested_root@@Base+0x74>
   19ffc:	cmp	r3, #0
   1a000:	beq	19eac <flatcc_verify_struct_as_nested_root@@Base+0x70>
   1a004:	add	r0, sp, #16
   1a008:	mov	r2, #0
   1a00c:	mov	r1, r3
   1a010:	str	r2, [r0, #-4]!
   1a014:	mov	r2, #4
   1a018:	bl	12328 <strncpy@plt>
   1a01c:	ldr	r2, [r6, #8]
   1a020:	ldr	r3, [sp, #12]
   1a024:	cmp	r3, #0
   1a028:	cmpne	r2, r3
   1a02c:	movne	r0, #2
   1a030:	bne	19eb0 <flatcc_verify_struct_as_nested_root@@Base+0x74>
   1a034:	b	19eac <flatcc_verify_struct_as_nested_root@@Base+0x70>

0001a038 <flatcc_verify_table_as_nested_root@@Base>:
   1a038:	push	{r4, r5, r6, r7, lr}
   1a03c:	mov	r4, r0
   1a040:	add	r0, r1, #2
   1a044:	ldrh	ip, [r4, #22]
   1a048:	lsl	r0, r0, #1
   1a04c:	sub	sp, sp, #44	; 0x2c
   1a050:	uxth	r0, r0
   1a054:	cmp	ip, r0
   1a058:	ldrh	r5, [sp, #64]	; 0x40
   1a05c:	bls	1a0a0 <flatcc_verify_table_as_nested_root@@Base+0x68>
   1a060:	ldr	ip, [r4, #12]
   1a064:	ldrh	r0, [ip, r0]
   1a068:	cmp	r0, #0
   1a06c:	beq	1a0a0 <flatcc_verify_table_as_nested_root@@Base+0x68>
   1a070:	ldrh	ip, [r4, #20]
   1a074:	add	lr, r0, #4
   1a078:	cmp	lr, ip
   1a07c:	bls	1a0b4 <flatcc_verify_table_as_nested_root@@Base+0x7c>
   1a080:	mvn	lr, #0
   1a084:	mov	ip, #1
   1a088:	mov	r3, r5
   1a08c:	mov	r0, r4
   1a090:	stm	sp, {ip, lr}
   1a094:	bl	18f8c <flatcc_verify_vector_field@@Base>
   1a098:	add	sp, sp, #44	; 0x2c
   1a09c:	pop	{r4, r5, r6, r7, pc}
   1a0a0:	cmp	r2, #0
   1a0a4:	bne	1a080 <flatcc_verify_table_as_nested_root@@Base+0x48>
   1a0a8:	mov	r0, #0
   1a0ac:	add	sp, sp, #44	; 0x2c
   1a0b0:	pop	{r4, r5, r6, r7, pc}
   1a0b4:	ldr	ip, [r4, #16]
   1a0b8:	add	r0, r0, ip
   1a0bc:	tst	r0, #3
   1a0c0:	bne	1a080 <flatcc_verify_table_as_nested_root@@Base+0x48>
   1a0c4:	cmp	r0, #0
   1a0c8:	beq	1a248 <flatcc_verify_table_as_nested_root@@Base+0x210>
   1a0cc:	ldr	r6, [r4]
   1a0d0:	add	ip, r6, r0
   1a0d4:	ldr	lr, [r6, r0]
   1a0d8:	add	lr, r0, lr
   1a0dc:	cmp	lr, r0
   1a0e0:	bls	1a080 <flatcc_verify_table_as_nested_root@@Base+0x48>
   1a0e4:	ldr	r0, [r4, #4]
   1a0e8:	add	r7, lr, #4
   1a0ec:	cmp	r0, r7
   1a0f0:	bcc	1a080 <flatcc_verify_table_as_nested_root@@Base+0x48>
   1a0f4:	tst	r7, #3
   1a0f8:	bne	1a080 <flatcc_verify_table_as_nested_root@@Base+0x48>
   1a0fc:	ldr	lr, [r6, lr]
   1a100:	sub	r0, r0, r7
   1a104:	mul	lr, lr, r5
   1a108:	cmp	r0, lr
   1a10c:	bcc	1a080 <flatcc_verify_table_as_nested_root@@Base+0x48>
   1a110:	ldr	r2, [ip]
   1a114:	add	r6, ip, r2
   1a118:	ldr	r7, [ip, r2]
   1a11c:	add	r5, r6, #4
   1a120:	sub	r2, r7, #8
   1a124:	cmn	r2, #17
   1a128:	movls	r2, #0
   1a12c:	movhi	r2, #1
   1a130:	ands	r1, r5, #3
   1a134:	movne	r1, #1
   1a138:	orrs	r1, r2, r1
   1a13c:	and	r2, r5, #3
   1a140:	bne	1a258 <flatcc_verify_table_as_nested_root@@Base+0x220>
   1a144:	cmp	r3, #0
   1a148:	beq	1a17c <flatcc_verify_table_as_nested_root@@Base+0x144>
   1a14c:	add	r0, sp, #40	; 0x28
   1a150:	mov	r2, #4
   1a154:	str	r1, [r0, #-24]!	; 0xffffffe8
   1a158:	mov	r1, r3
   1a15c:	str	r3, [sp, #12]
   1a160:	bl	12328 <strncpy@plt>
   1a164:	ldr	r2, [sp, #16]
   1a168:	ldr	r1, [r6, #8]
   1a16c:	ldr	r3, [sp, #12]
   1a170:	cmp	r2, #0
   1a174:	cmpne	r1, r2
   1a178:	bne	1a264 <flatcc_verify_table_as_nested_root@@Base+0x22c>
   1a17c:	ldr	r3, [r4, #8]
   1a180:	ldr	r2, [r6, #4]
   1a184:	sub	r3, r3, #1
   1a188:	cmp	r3, #0
   1a18c:	str	r3, [sp, #24]
   1a190:	moveq	r0, #3
   1a194:	beq	1a098 <flatcc_verify_table_as_nested_root@@Base+0x60>
   1a198:	cmp	r2, #0
   1a19c:	beq	1a23c <flatcc_verify_table_as_nested_root@@Base+0x204>
   1a1a0:	add	r3, r2, #4
   1a1a4:	cmp	r7, r3
   1a1a8:	bcc	1a23c <flatcc_verify_table_as_nested_root@@Base+0x204>
   1a1ac:	tst	r2, #3
   1a1b0:	bne	1a23c <flatcc_verify_table_as_nested_root@@Base+0x204>
   1a1b4:	str	r2, [sp, #32]
   1a1b8:	ldr	r3, [r5, r2]
   1a1bc:	subs	r3, r2, r3
   1a1c0:	bmi	1a2b8 <flatcc_verify_table_as_nested_root@@Base+0x280>
   1a1c4:	tst	r3, #1
   1a1c8:	bne	1a2b8 <flatcc_verify_table_as_nested_root@@Base+0x280>
   1a1cc:	add	r1, r3, #2
   1a1d0:	cmp	r7, r1
   1a1d4:	movcc	r0, #27
   1a1d8:	bcc	1a098 <flatcc_verify_table_as_nested_root@@Base+0x60>
   1a1dc:	ldrh	r0, [r5, r3]
   1a1e0:	add	ip, r5, r3
   1a1e4:	add	r3, r0, r3
   1a1e8:	cmp	r7, r3
   1a1ec:	strh	r0, [sp, #38]	; 0x26
   1a1f0:	bcc	1a2c0 <flatcc_verify_table_as_nested_root@@Base+0x288>
   1a1f4:	tst	r0, #1
   1a1f8:	bne	1a2c0 <flatcc_verify_table_as_nested_root@@Base+0x288>
   1a1fc:	cmp	r0, #3
   1a200:	movls	r0, #28
   1a204:	bls	1a098 <flatcc_verify_table_as_nested_root@@Base+0x60>
   1a208:	ldrh	r3, [r5, r1]
   1a20c:	sub	r2, r7, r2
   1a210:	cmp	r2, r3
   1a214:	strh	r3, [sp, #36]	; 0x24
   1a218:	movcc	r0, #20
   1a21c:	bcc	1a098 <flatcc_verify_table_as_nested_root@@Base+0x60>
   1a220:	add	r0, sp, #16
   1a224:	ldr	r3, [sp, #68]	; 0x44
   1a228:	str	ip, [sp, #28]
   1a22c:	str	r5, [sp, #16]
   1a230:	str	r7, [sp, #20]
   1a234:	blx	r3
   1a238:	b	1a098 <flatcc_verify_table_as_nested_root@@Base+0x60>
   1a23c:	mov	r0, #15
   1a240:	add	sp, sp, #44	; 0x2c
   1a244:	pop	{r4, r5, r6, r7, pc}
   1a248:	ldr	ip, [r4]
   1a24c:	cmp	ip, #0
   1a250:	bne	1a110 <flatcc_verify_table_as_nested_root@@Base+0xd8>
   1a254:	b	1a0a8 <flatcc_verify_table_as_nested_root@@Base+0x70>
   1a258:	cmp	r2, #0
   1a25c:	movne	r0, #5
   1a260:	bne	1a098 <flatcc_verify_table_as_nested_root@@Base+0x60>
   1a264:	cmn	r7, #9
   1a268:	movhi	r0, #6
   1a26c:	bhi	1a098 <flatcc_verify_table_as_nested_root@@Base+0x60>
   1a270:	cmp	r7, #7
   1a274:	movls	r0, #1
   1a278:	bls	1a098 <flatcc_verify_table_as_nested_root@@Base+0x60>
   1a27c:	cmp	r3, #0
   1a280:	beq	1a0a8 <flatcc_verify_table_as_nested_root@@Base+0x70>
   1a284:	add	r0, sp, #40	; 0x28
   1a288:	mov	r2, #0
   1a28c:	mov	r1, r3
   1a290:	str	r2, [r0, #-24]!	; 0xffffffe8
   1a294:	mov	r2, #4
   1a298:	bl	12328 <strncpy@plt>
   1a29c:	ldr	r2, [r6, #8]
   1a2a0:	ldr	r3, [sp, #16]
   1a2a4:	cmp	r3, #0
   1a2a8:	cmpne	r2, r3
   1a2ac:	movne	r0, #2
   1a2b0:	bne	1a098 <flatcc_verify_table_as_nested_root@@Base+0x60>
   1a2b4:	b	1a0a8 <flatcc_verify_table_as_nested_root@@Base+0x70>
   1a2b8:	mov	r0, #29
   1a2bc:	b	1a098 <flatcc_verify_table_as_nested_root@@Base+0x60>
   1a2c0:	mov	r0, #30
   1a2c4:	b	1a098 <flatcc_verify_table_as_nested_root@@Base+0x60>

0001a2c8 <flatcc_verify_union_field@@Base>:
   1a2c8:	sub	ip, r1, #1
   1a2cc:	push	{r4, r5, r6, r7, lr}
   1a2d0:	uxth	ip, ip
   1a2d4:	add	ip, ip, #2
   1a2d8:	ldrh	lr, [r0, #22]
   1a2dc:	lsl	ip, ip, #1
   1a2e0:	sub	sp, sp, #28
   1a2e4:	uxth	ip, ip
   1a2e8:	cmp	ip, lr
   1a2ec:	ldr	r4, [r0, #12]
   1a2f0:	bcs	1a31c <flatcc_verify_union_field@@Base+0x54>
   1a2f4:	ldrh	ip, [r4, ip]
   1a2f8:	cmp	ip, #0
   1a2fc:	beq	1a31c <flatcc_verify_union_field@@Base+0x54>
   1a300:	ldrh	r5, [r0, #20]
   1a304:	add	r6, ip, #1
   1a308:	cmp	r6, r5
   1a30c:	bls	1a35c <flatcc_verify_union_field@@Base+0x94>
   1a310:	mov	r0, #13
   1a314:	add	sp, sp, #28
   1a318:	pop	{r4, r5, r6, r7, pc}
   1a31c:	add	r1, r1, #2
   1a320:	lsl	r1, r1, #1
   1a324:	uxth	r1, r1
   1a328:	cmp	lr, r1
   1a32c:	bhi	1a344 <flatcc_verify_union_field@@Base+0x7c>
   1a330:	cmp	r2, #0
   1a334:	movne	r0, #21
   1a338:	moveq	r0, #0
   1a33c:	add	sp, sp, #28
   1a340:	pop	{r4, r5, r6, r7, pc}
   1a344:	ldrh	r3, [r4, r1]
   1a348:	cmp	r3, #0
   1a34c:	movne	r0, #23
   1a350:	beq	1a330 <flatcc_verify_union_field@@Base+0x68>
   1a354:	add	sp, sp, #28
   1a358:	pop	{r4, r5, r6, r7, pc}
   1a35c:	add	r1, r1, #2
   1a360:	ldr	r6, [r0]
   1a364:	lsl	r1, r1, #1
   1a368:	uxth	r1, r1
   1a36c:	cmp	lr, r1
   1a370:	bls	1a3a8 <flatcc_verify_union_field@@Base+0xe0>
   1a374:	ldr	r7, [r0, #16]
   1a378:	ldrh	r4, [r4, r1]
   1a37c:	add	ip, r7, ip
   1a380:	ldrb	r1, [r6, ip]
   1a384:	adds	lr, r1, #0
   1a388:	movne	lr, #1
   1a38c:	cmp	r4, #0
   1a390:	orreq	lr, lr, #1
   1a394:	cmp	lr, #0
   1a398:	bne	1a3cc <flatcc_verify_union_field@@Base+0x104>
   1a39c:	mov	r0, #24
   1a3a0:	add	sp, sp, #28
   1a3a4:	pop	{r4, r5, r6, r7, pc}
   1a3a8:	ldr	r3, [r0, #16]
   1a3ac:	add	ip, r6, ip
   1a3b0:	ldrb	r0, [ip, r3]
   1a3b4:	cmp	r0, #0
   1a3b8:	beq	1a314 <flatcc_verify_union_field@@Base+0x4c>
   1a3bc:	cmp	r2, #0
   1a3c0:	movne	r0, #4
   1a3c4:	moveq	r0, #0
   1a3c8:	b	1a314 <flatcc_verify_union_field@@Base+0x4c>
   1a3cc:	cmp	r1, #0
   1a3d0:	beq	1a42c <flatcc_verify_union_field@@Base+0x164>
   1a3d4:	cmp	r4, #0
   1a3d8:	beq	1a3bc <flatcc_verify_union_field@@Base+0xf4>
   1a3dc:	add	r2, r4, #4
   1a3e0:	cmp	r5, r2
   1a3e4:	bcc	1a310 <flatcc_verify_union_field@@Base+0x48>
   1a3e8:	add	r7, r7, r4
   1a3ec:	tst	r7, #3
   1a3f0:	movne	r0, #12
   1a3f4:	bne	1a314 <flatcc_verify_union_field@@Base+0x4c>
   1a3f8:	cmp	r7, #0
   1a3fc:	beq	1a42c <flatcc_verify_union_field@@Base+0x164>
   1a400:	ldmib	r0, {r1, r2}
   1a404:	str	r7, [sp, #16]
   1a408:	mov	r0, sp
   1a40c:	stmib	sp, {r1, r2}
   1a410:	ldr	r2, [r6, r7]
   1a414:	str	r6, [sp]
   1a418:	str	r2, [sp, #20]
   1a41c:	ldrb	r2, [r6, ip]
   1a420:	strb	r2, [sp, #12]
   1a424:	blx	r3
   1a428:	b	1a314 <flatcc_verify_union_field@@Base+0x4c>
   1a42c:	mov	r0, #0
   1a430:	b	1a314 <flatcc_verify_union_field@@Base+0x4c>

0001a434 <flatcc_verify_union_vector_field@@Base>:
   1a434:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a438:	sub	r4, r1, #1
   1a43c:	ldrh	lr, [r0, #22]
   1a440:	uxth	r4, r4
   1a444:	add	ip, r4, #2
   1a448:	sub	sp, sp, #44	; 0x2c
   1a44c:	lsl	ip, ip, #1
   1a450:	ldr	r5, [r0, #12]
   1a454:	uxth	ip, ip
   1a458:	cmp	ip, lr
   1a45c:	bcs	1a58c <flatcc_verify_union_vector_field@@Base+0x158>
   1a460:	ldrh	ip, [r5, ip]
   1a464:	cmp	ip, #0
   1a468:	beq	1a58c <flatcc_verify_union_vector_field@@Base+0x158>
   1a46c:	ldrh	r7, [r0, #20]
   1a470:	add	r6, ip, #4
   1a474:	cmp	r6, r7
   1a478:	bhi	1a5b4 <flatcc_verify_union_vector_field@@Base+0x180>
   1a47c:	ldr	r8, [r0, #16]
   1a480:	add	ip, ip, r8
   1a484:	tst	ip, #3
   1a488:	bne	1a5b4 <flatcc_verify_union_vector_field@@Base+0x180>
   1a48c:	cmp	ip, #0
   1a490:	beq	1a6c8 <flatcc_verify_union_vector_field@@Base+0x294>
   1a494:	ldr	r6, [r0]
   1a498:	ldr	r9, [r6, ip]
   1a49c:	add	r9, ip, r9
   1a4a0:	cmp	r9, ip
   1a4a4:	bls	1a5b4 <flatcc_verify_union_vector_field@@Base+0x180>
   1a4a8:	ldr	sl, [r0, #4]
   1a4ac:	add	fp, r9, #4
   1a4b0:	cmp	sl, fp
   1a4b4:	bcc	1a5b4 <flatcc_verify_union_vector_field@@Base+0x180>
   1a4b8:	tst	fp, #3
   1a4bc:	bne	1a5b4 <flatcc_verify_union_vector_field@@Base+0x180>
   1a4c0:	ldr	r9, [r6, r9]
   1a4c4:	sub	sl, sl, fp
   1a4c8:	cmp	r9, sl
   1a4cc:	bhi	1a5b4 <flatcc_verify_union_vector_field@@Base+0x180>
   1a4d0:	adds	ip, r6, ip
   1a4d4:	beq	1a580 <flatcc_verify_union_vector_field@@Base+0x14c>
   1a4d8:	add	r1, r1, #2
   1a4dc:	lsl	r1, r1, #1
   1a4e0:	uxth	r1, r1
   1a4e4:	cmp	lr, r1
   1a4e8:	bls	1a5e4 <flatcc_verify_union_vector_field@@Base+0x1b0>
   1a4ec:	ldrh	r1, [r5, r1]
   1a4f0:	cmp	r1, #0
   1a4f4:	beq	1a5e4 <flatcc_verify_union_vector_field@@Base+0x1b0>
   1a4f8:	add	r2, r1, #4
   1a4fc:	cmp	r2, r7
   1a500:	movhi	r0, #13
   1a504:	bhi	1a5c8 <flatcc_verify_union_vector_field@@Base+0x194>
   1a508:	add	r2, r1, r8
   1a50c:	tst	r2, #3
   1a510:	movne	r0, #12
   1a514:	bne	1a5c8 <flatcc_verify_union_vector_field@@Base+0x194>
   1a518:	cmp	r2, #0
   1a51c:	beq	1a580 <flatcc_verify_union_vector_field@@Base+0x14c>
   1a520:	ldr	lr, [r0, #8]
   1a524:	cmp	lr, #0
   1a528:	movle	r0, #3
   1a52c:	ble	1a5c8 <flatcc_verify_union_vector_field@@Base+0x194>
   1a530:	ldr	r1, [r6, r2]
   1a534:	add	r1, r2, r1
   1a538:	cmp	r2, r1
   1a53c:	bcs	1a5f8 <flatcc_verify_union_vector_field@@Base+0x1c4>
   1a540:	ldr	r9, [r0, #4]
   1a544:	add	r4, r1, #4
   1a548:	cmp	r9, r4
   1a54c:	bcc	1a5f8 <flatcc_verify_union_vector_field@@Base+0x1c4>
   1a550:	ands	r2, r4, #3
   1a554:	beq	1a600 <flatcc_verify_union_vector_field@@Base+0x1cc>
   1a558:	cmp	r2, #0
   1a55c:	bne	1a5f8 <flatcc_verify_union_vector_field@@Base+0x1c4>
   1a560:	ldr	r3, [r6, r1]
   1a564:	cmn	r3, #-1073741823	; 0xc0000001
   1a568:	movhi	r0, #25
   1a56c:	bhi	1a5c8 <flatcc_verify_union_vector_field@@Base+0x194>
   1a570:	sub	r4, r9, r4
   1a574:	cmp	r4, r3, lsl #2
   1a578:	movcc	r0, #26
   1a57c:	bcc	1a5c8 <flatcc_verify_union_vector_field@@Base+0x194>
   1a580:	mov	r0, #0
   1a584:	add	sp, sp, #44	; 0x2c
   1a588:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a58c:	add	r3, r1, #2
   1a590:	lsl	r3, r3, #1
   1a594:	uxth	r3, r3
   1a598:	cmp	lr, r3
   1a59c:	bls	1a5d0 <flatcc_verify_union_vector_field@@Base+0x19c>
   1a5a0:	ldrh	r3, [r5, r3]
   1a5a4:	cmp	r3, #0
   1a5a8:	beq	1a5d0 <flatcc_verify_union_vector_field@@Base+0x19c>
   1a5ac:	cmp	r2, #0
   1a5b0:	beq	1a580 <flatcc_verify_union_vector_field@@Base+0x14c>
   1a5b4:	mvn	ip, #0
   1a5b8:	mov	r3, #1
   1a5bc:	mov	r1, r4
   1a5c0:	stm	sp, {r3, ip}
   1a5c4:	bl	18f8c <flatcc_verify_vector_field@@Base>
   1a5c8:	add	sp, sp, #44	; 0x2c
   1a5cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5d0:	cmp	r2, #0
   1a5d4:	movne	r0, #22
   1a5d8:	moveq	r0, #0
   1a5dc:	add	sp, sp, #44	; 0x2c
   1a5e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5e4:	cmp	r2, #0
   1a5e8:	movne	r0, #4
   1a5ec:	moveq	r0, #0
   1a5f0:	add	sp, sp, #44	; 0x2c
   1a5f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5f8:	mov	r0, #16
   1a5fc:	b	1a5c8 <flatcc_verify_union_vector_field@@Base+0x194>
   1a600:	ldr	r7, [r6, r1]
   1a604:	add	r2, r6, r1
   1a608:	cmn	r7, #-1073741823	; 0xc0000001
   1a60c:	bhi	1a560 <flatcc_verify_union_vector_field@@Base+0x12c>
   1a610:	lsl	r0, r7, #2
   1a614:	sub	r5, r9, r4
   1a618:	cmp	r5, r0
   1a61c:	bcc	1a560 <flatcc_verify_union_vector_field@@Base+0x12c>
   1a620:	ldr	r8, [ip]
   1a624:	add	r5, ip, r8
   1a628:	ldr	ip, [ip, r8]
   1a62c:	cmp	ip, r7
   1a630:	movne	r0, #34	; 0x22
   1a634:	bne	1a5c8 <flatcc_verify_union_vector_field@@Base+0x194>
   1a638:	sub	lr, lr, #1
   1a63c:	cmp	ip, #0
   1a640:	str	lr, [sp, #24]
   1a644:	str	r6, [sp, #16]
   1a648:	str	r9, [sp, #20]
   1a64c:	beq	1a580 <flatcc_verify_union_vector_field@@Base+0x14c>
   1a650:	add	r1, r1, r0
   1a654:	add	r7, r6, r1
   1a658:	add	r5, r5, #4
   1a65c:	mov	r6, r2
   1a660:	b	1a680 <flatcc_verify_union_vector_field@@Base+0x24c>
   1a664:	ldrb	r2, [r5]
   1a668:	cmp	r2, #0
   1a66c:	bne	1a6d0 <flatcc_verify_union_vector_field@@Base+0x29c>
   1a670:	cmp	r7, r6
   1a674:	add	r4, r4, #4
   1a678:	add	r5, r5, #1
   1a67c:	beq	1a580 <flatcc_verify_union_vector_field@@Base+0x14c>
   1a680:	ldr	r2, [r6, #4]!
   1a684:	add	r0, sp, #16
   1a688:	cmp	r2, #0
   1a68c:	beq	1a664 <flatcc_verify_union_vector_field@@Base+0x230>
   1a690:	ldrb	r1, [r5]
   1a694:	cmp	r1, #0
   1a698:	beq	1a6d8 <flatcc_verify_union_vector_field@@Base+0x2a4>
   1a69c:	str	r3, [sp, #12]
   1a6a0:	strb	r1, [sp, #28]
   1a6a4:	str	r4, [sp, #32]
   1a6a8:	str	r2, [sp, #36]	; 0x24
   1a6ac:	blx	r3
   1a6b0:	ldr	r3, [sp, #12]
   1a6b4:	cmp	r0, #0
   1a6b8:	beq	1a670 <flatcc_verify_union_vector_field@@Base+0x23c>
   1a6bc:	add	r0, sp, #16
   1a6c0:	blx	r3
   1a6c4:	b	1a5c8 <flatcc_verify_union_vector_field@@Base+0x194>
   1a6c8:	ldr	r6, [r0]
   1a6cc:	b	1a4d0 <flatcc_verify_union_vector_field@@Base+0x9c>
   1a6d0:	mov	r0, #32
   1a6d4:	b	1a5c8 <flatcc_verify_union_vector_field@@Base+0x194>
   1a6d8:	mov	r0, #33	; 0x21
   1a6dc:	b	1a5c8 <flatcc_verify_union_vector_field@@Base+0x194>

0001a6e0 <__libc_csu_init@@Base>:
   1a6e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a6e4:	mov	r7, r0
   1a6e8:	ldr	r6, [pc, #72]	; 1a738 <__libc_csu_init@@Base+0x58>
   1a6ec:	ldr	r5, [pc, #72]	; 1a73c <__libc_csu_init@@Base+0x5c>
   1a6f0:	add	r6, pc, r6
   1a6f4:	add	r5, pc, r5
   1a6f8:	sub	r6, r6, r5
   1a6fc:	mov	r8, r1
   1a700:	mov	r9, r2
   1a704:	bl	12290 <free@plt-0x20>
   1a708:	asrs	r6, r6, #2
   1a70c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a710:	mov	r4, #0
   1a714:	add	r4, r4, #1
   1a718:	ldr	r3, [r5], #4
   1a71c:	mov	r2, r9
   1a720:	mov	r1, r8
   1a724:	mov	r0, r7
   1a728:	blx	r3
   1a72c:	cmp	r6, r4
   1a730:	bne	1a714 <__libc_csu_init@@Base+0x34>
   1a734:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a738:	andeq	r1, r1, r8, lsl r8
   1a73c:	andeq	r1, r1, r0, lsl r8

0001a740 <__libc_csu_fini@@Base>:
   1a740:	bx	lr

Disassembly of section .fini:

0001a744 <.fini>:
   1a744:	push	{r3, lr}
   1a748:	pop	{r3, pc}
