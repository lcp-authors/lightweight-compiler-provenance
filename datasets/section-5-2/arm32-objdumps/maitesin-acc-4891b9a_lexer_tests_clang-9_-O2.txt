
../repos/maitesin-acc-4891b9a/bin/lexer_tests:     file format elf32-littlearm


Disassembly of section .init:

000125f0 <.init>:
   125f0:	push	{r3, lr}
   125f4:	bl	1283c <_start@@Base+0x3c>
   125f8:	pop	{r3, pc}

Disassembly of section .plt:

000125fc <fdopen@plt-0x14>:
   125fc:	push	{lr}		; (str lr, [sp, #-4]!)
   12600:	ldr	lr, [pc, #4]	; 1260c <fdopen@plt-0x4>
   12604:	add	lr, pc, lr
   12608:	ldr	pc, [lr, #8]!
   1260c:	strdeq	sp, [r1], -r4

00012610 <fdopen@plt>:
   12610:	add	ip, pc, #0, 12
   12614:	add	ip, ip, #118784	; 0x1d000
   12618:	ldr	pc, [ip, #2548]!	; 0x9f4

0001261c <strtol@plt>:
   1261c:	add	ip, pc, #0, 12
   12620:	add	ip, ip, #118784	; 0x1d000
   12624:	ldr	pc, [ip, #2540]!	; 0x9ec

00012628 <longjmp@plt>:
   12628:	add	ip, pc, #0, 12
   1262c:	add	ip, ip, #118784	; 0x1d000
   12630:	ldr	pc, [ip, #2532]!	; 0x9e4

00012634 <fflush@plt>:
   12634:	add	ip, pc, #0, 12
   12638:	add	ip, ip, #118784	; 0x1d000
   1263c:	ldr	pc, [ip, #2524]!	; 0x9dc

00012640 <_setjmp@plt>:
   12640:	add	ip, pc, #0, 12
   12644:	add	ip, ip, #118784	; 0x1d000
   12648:	ldr	pc, [ip, #2516]!	; 0x9d4

0001264c <free@plt>:
   1264c:	add	ip, pc, #0, 12
   12650:	add	ip, ip, #118784	; 0x1d000
   12654:	ldr	pc, [ip, #2508]!	; 0x9cc

00012658 <__isnanf@plt>:
   12658:	add	ip, pc, #0, 12
   1265c:	add	ip, ip, #118784	; 0x1d000
   12660:	ldr	pc, [ip, #2500]!	; 0x9c4

00012664 <memcpy@plt>:
   12664:	add	ip, pc, #0, 12
   12668:	add	ip, ip, #118784	; 0x1d000
   1266c:	ldr	pc, [ip, #2492]!	; 0x9bc

00012670 <mmap64@plt>:
   12670:	add	ip, pc, #0, 12
   12674:	add	ip, ip, #118784	; 0x1d000
   12678:	ldr	pc, [ip, #2484]!	; 0x9b4

0001267c <ftell@plt>:
   1267c:	add	ip, pc, #0, 12
   12680:	add	ip, ip, #118784	; 0x1d000
   12684:	ldr	pc, [ip, #2476]!	; 0x9ac

00012688 <uname@plt>:
   12688:	add	ip, pc, #0, 12
   1268c:	add	ip, ip, #118784	; 0x1d000
   12690:	ldr	pc, [ip, #2468]!	; 0x9a4

00012694 <strdup@plt>:
   12694:	add	ip, pc, #0, 12
   12698:	add	ip, ip, #118784	; 0x1d000
   1269c:	ldr	pc, [ip, #2460]!	; 0x99c

000126a0 <__isinff@plt>:
   126a0:	add	ip, pc, #0, 12
   126a4:	add	ip, ip, #118784	; 0x1d000
   126a8:	ldr	pc, [ip, #2452]!	; 0x994

000126ac <realloc@plt>:
   126ac:	add	ip, pc, #0, 12
   126b0:	add	ip, ip, #118784	; 0x1d000
   126b4:	ldr	pc, [ip, #2444]!	; 0x98c

000126b8 <fwrite@plt>:
   126b8:	add	ip, pc, #0, 12
   126bc:	add	ip, ip, #118784	; 0x1d000
   126c0:	ldr	pc, [ip, #2436]!	; 0x984

000126c4 <open64@plt>:
   126c4:	add	ip, pc, #0, 12
   126c8:	add	ip, ip, #118784	; 0x1d000
   126cc:	ldr	pc, [ip, #2428]!	; 0x97c

000126d0 <getenv@plt>:
   126d0:	add	ip, pc, #0, 12
   126d4:	add	ip, ip, #118784	; 0x1d000
   126d8:	ldr	pc, [ip, #2420]!	; 0x974

000126dc <malloc@plt>:
   126dc:	add	ip, pc, #0, 12
   126e0:	add	ip, ip, #118784	; 0x1d000
   126e4:	ldr	pc, [ip, #2412]!	; 0x96c

000126e8 <__libc_start_main@plt>:
   126e8:	add	ip, pc, #0, 12
   126ec:	add	ip, ip, #118784	; 0x1d000
   126f0:	ldr	pc, [ip, #2404]!	; 0x964

000126f4 <strerror@plt>:
   126f4:	add	ip, pc, #0, 12
   126f8:	add	ip, ip, #118784	; 0x1d000
   126fc:	ldr	pc, [ip, #2396]!	; 0x95c

00012700 <__gmon_start__@plt>:
   12700:	add	ip, pc, #0, 12
   12704:	add	ip, ip, #118784	; 0x1d000
   12708:	ldr	pc, [ip, #2388]!	; 0x954

0001270c <getpid@plt>:
   1270c:	add	ip, pc, #0, 12
   12710:	add	ip, ip, #118784	; 0x1d000
   12714:	ldr	pc, [ip, #2380]!	; 0x94c

00012718 <exit@plt>:
   12718:	add	ip, pc, #0, 12
   1271c:	add	ip, ip, #118784	; 0x1d000
   12720:	ldr	pc, [ip, #2372]!	; 0x944

00012724 <strlen@plt>:
   12724:	add	ip, pc, #0, 12
   12728:	add	ip, ip, #118784	; 0x1d000
   1272c:	ldr	pc, [ip, #2364]!	; 0x93c

00012730 <strchr@plt>:
   12730:	add	ip, pc, #0, 12
   12734:	add	ip, ip, #118784	; 0x1d000
   12738:	ldr	pc, [ip, #2356]!	; 0x934

0001273c <fprintf@plt>:
   1273c:	add	ip, pc, #0, 12
   12740:	add	ip, ip, #118784	; 0x1d000
   12744:	ldr	pc, [ip, #2348]!	; 0x92c

00012748 <__errno_location@plt>:
   12748:	add	ip, pc, #0, 12
   1274c:	add	ip, ip, #118784	; 0x1d000
   12750:	ldr	pc, [ip, #2340]!	; 0x924

00012754 <__cxa_atexit@plt>:
   12754:	add	ip, pc, #0, 12
   12758:	add	ip, ip, #118784	; 0x1d000
   1275c:	ldr	pc, [ip, #2332]!	; 0x91c

00012760 <mkdir@plt>:
   12760:	add	ip, pc, #0, 12
   12764:	add	ip, ip, #118784	; 0x1d000
   12768:	ldr	pc, [ip, #2324]!	; 0x914

0001276c <memset@plt>:
   1276c:	add	ip, pc, #0, 12
   12770:	add	ip, ip, #118784	; 0x1d000
   12774:	ldr	pc, [ip, #2316]!	; 0x90c

00012778 <strncpy@plt>:
   12778:	add	ip, pc, #0, 12
   1277c:	add	ip, ip, #118784	; 0x1d000
   12780:	ldr	pc, [ip, #2308]!	; 0x904

00012784 <prctl@plt>:
   12784:	add	ip, pc, #0, 12
   12788:	add	ip, ip, #118784	; 0x1d000
   1278c:	ldr	pc, [ip, #2300]!	; 0x8fc

00012790 <fileno@plt>:
   12790:	add	ip, pc, #0, 12
   12794:	add	ip, ip, #118784	; 0x1d000
   12798:	ldr	pc, [ip, #2292]!	; 0x8f4

0001279c <fclose@plt>:
   1279c:	add	ip, pc, #0, 12
   127a0:	add	ip, ip, #118784	; 0x1d000
   127a4:	ldr	pc, [ip, #2284]!	; 0x8ec

000127a8 <munmap@plt>:
   127a8:	add	ip, pc, #0, 12
   127ac:	add	ip, ip, #118784	; 0x1d000
   127b0:	ldr	pc, [ip, #2276]!	; 0x8e4

000127b4 <fcntl64@plt>:
   127b4:	add	ip, pc, #0, 12
   127b8:	add	ip, ip, #118784	; 0x1d000
   127bc:	ldr	pc, [ip, #2268]!	; 0x8dc

000127c0 <strrchr@plt>:
   127c0:	add	ip, pc, #0, 12
   127c4:	add	ip, ip, #118784	; 0x1d000
   127c8:	ldr	pc, [ip, #2260]!	; 0x8d4

000127cc <msync@plt>:
   127cc:	add	ip, pc, #0, 12
   127d0:	add	ip, ip, #118784	; 0x1d000
   127d4:	ldr	pc, [ip, #2252]!	; 0x8cc

000127d8 <putc@plt>:
   127d8:	add	ip, pc, #0, 12
   127dc:	add	ip, ip, #118784	; 0x1d000
   127e0:	ldr	pc, [ip, #2244]!	; 0x8c4

000127e4 <fseek@plt>:
   127e4:	add	ip, pc, #0, 12
   127e8:	add	ip, ip, #118784	; 0x1d000
   127ec:	ldr	pc, [ip, #2236]!	; 0x8bc

000127f0 <abort@plt>:
   127f0:	add	ip, pc, #0, 12
   127f4:	add	ip, ip, #118784	; 0x1d000
   127f8:	ldr	pc, [ip, #2228]!	; 0x8b4

Disassembly of section .text:

00012800 <_start@@Base>:
   12800:	mov	fp, #0
   12804:	mov	lr, #0
   12808:	pop	{r1}		; (ldr r1, [sp], #4)
   1280c:	mov	r2, sp
   12810:	push	{r2}		; (str r2, [sp, #-4]!)
   12814:	push	{r0}		; (str r0, [sp, #-4]!)
   12818:	ldr	ip, [pc, #16]	; 12830 <_start@@Base+0x30>
   1281c:	push	{ip}		; (str ip, [sp, #-4]!)
   12820:	ldr	r0, [pc, #12]	; 12834 <_start@@Base+0x34>
   12824:	ldr	r3, [pc, #12]	; 12838 <_start@@Base+0x38>
   12828:	bl	126e8 <__libc_start_main@plt>
   1282c:	bl	127f0 <abort@plt>
   12830:	strdeq	lr, [r1], -r8
   12834:	andeq	r3, r1, r0, lsr #31
   12838:	muleq	r1, r8, r0
   1283c:	ldr	r3, [pc, #20]	; 12858 <_start@@Base+0x58>
   12840:	ldr	r2, [pc, #20]	; 1285c <_start@@Base+0x5c>
   12844:	add	r3, pc, r3
   12848:	ldr	r2, [r3, r2]
   1284c:	cmp	r2, #0
   12850:	bxeq	lr
   12854:	b	12700 <__gmon_start__@plt>
   12858:			; <UNDEFINED> instruction: 0x0001d7b4
   1285c:	andeq	r0, r0, ip, lsr #2
   12860:	ldr	r0, [pc, #24]	; 12880 <_start@@Base+0x80>
   12864:	ldr	r3, [pc, #24]	; 12884 <_start@@Base+0x84>
   12868:	cmp	r3, r0
   1286c:	bxeq	lr
   12870:	ldr	r3, [pc, #16]	; 12888 <_start@@Base+0x88>
   12874:	cmp	r3, #0
   12878:	bxeq	lr
   1287c:	bx	r3
   12880:	andeq	r0, r3, r8, lsr #3
   12884:	andeq	r0, r3, r8, lsr #3
   12888:	andeq	r0, r0, r0
   1288c:	ldr	r0, [pc, #36]	; 128b8 <_start@@Base+0xb8>
   12890:	ldr	r1, [pc, #36]	; 128bc <_start@@Base+0xbc>
   12894:	sub	r1, r1, r0
   12898:	asr	r1, r1, #2
   1289c:	add	r1, r1, r1, lsr #31
   128a0:	asrs	r1, r1, #1
   128a4:	bxeq	lr
   128a8:	ldr	r3, [pc, #16]	; 128c0 <_start@@Base+0xc0>
   128ac:	cmp	r3, #0
   128b0:	bxeq	lr
   128b4:	bx	r3
   128b8:	andeq	r0, r3, r8, lsr #3
   128bc:	andeq	r0, r3, r8, lsr #3
   128c0:	andeq	r0, r0, r0
   128c4:	push	{r4, lr}
   128c8:	ldr	r4, [pc, #24]	; 128e8 <_start@@Base+0xe8>
   128cc:	ldrb	r3, [r4]
   128d0:	cmp	r3, #0
   128d4:	popne	{r4, pc}
   128d8:	bl	12860 <_start@@Base+0x60>
   128dc:	mov	r3, #1
   128e0:	strb	r3, [r4]
   128e4:	pop	{r4, pc}
   128e8:			; <UNDEFINED> instruction: 0x000301b0
   128ec:	b	1288c <_start@@Base+0x8c>

000128f0 <simple_file_only_main@@Base>:
   128f0:	push	{r4, r5, fp, lr}
   128f4:	add	fp, sp, #8
   128f8:	sub	sp, sp, #16
   128fc:	ldr	r0, [pc, #396]	; 12a90 <simple_file_only_main@@Base+0x1a0>
   12900:	add	r1, pc, #376	; 0x178
   12904:	add	r4, sp, #4
   12908:	vld1.64	{d16-d17}, [r1 :128]
   1290c:	add	r0, pc, r0
   12910:	vld1.64	{d18-d19}, [r0 :128]
   12914:	vadd.i64	q8, q9, q8
   12918:	vst1.64	{d16-d17}, [r0 :128]
   1291c:	mov	r0, r4
   12920:	ldr	r1, [pc, #364]	; 12a94 <simple_file_only_main@@Base+0x1a4>
   12924:	add	r1, pc, r1
   12928:	bl	19450 <init_lexer@@Base>
   1292c:	mov	r0, r4
   12930:	bl	19820 <next@@Base>
   12934:	ldr	r1, [r0]
   12938:	mov	r5, #148	; 0x94
   1293c:	mov	r0, #0
   12940:	mov	r2, #0
   12944:	mov	r3, #23
   12948:	str	r5, [sp]
   1294c:	bl	1598c <UnityAssertEqualNumber@@Base>
   12950:	mov	r0, r4
   12954:	bl	19820 <next@@Base>
   12958:	ldr	r1, [r0]
   1295c:	mov	r0, #2
   12960:	mov	r2, #0
   12964:	mov	r3, #25
   12968:	str	r5, [sp]
   1296c:	bl	1598c <UnityAssertEqualNumber@@Base>
   12970:	mov	r0, r4
   12974:	bl	19820 <next@@Base>
   12978:	ldr	r1, [r0]
   1297c:	mov	r0, #3
   12980:	mov	r2, #0
   12984:	mov	r3, #27
   12988:	str	r5, [sp]
   1298c:	bl	1598c <UnityAssertEqualNumber@@Base>
   12990:	mov	r0, r4
   12994:	bl	19820 <next@@Base>
   12998:	ldr	r1, [r0]
   1299c:	mov	r0, #4
   129a0:	mov	r2, #0
   129a4:	mov	r3, #29
   129a8:	str	r5, [sp]
   129ac:	bl	1598c <UnityAssertEqualNumber@@Base>
   129b0:	mov	r0, r4
   129b4:	bl	19820 <next@@Base>
   129b8:	ldr	r1, [r0]
   129bc:	mov	r0, #5
   129c0:	mov	r2, #0
   129c4:	mov	r3, #31
   129c8:	str	r5, [sp]
   129cc:	bl	1598c <UnityAssertEqualNumber@@Base>
   129d0:	mov	r0, r4
   129d4:	bl	19820 <next@@Base>
   129d8:	ldr	r1, [r0]
   129dc:	mov	r0, #7
   129e0:	mov	r2, #0
   129e4:	mov	r3, #33	; 0x21
   129e8:	str	r5, [sp]
   129ec:	bl	1598c <UnityAssertEqualNumber@@Base>
   129f0:	mov	r0, r4
   129f4:	bl	19820 <next@@Base>
   129f8:	ldr	r1, [r0]
   129fc:	mov	r0, #1
   12a00:	mov	r2, #0
   12a04:	mov	r3, #35	; 0x23
   12a08:	str	r5, [sp]
   12a0c:	bl	1598c <UnityAssertEqualNumber@@Base>
   12a10:	mov	r0, r4
   12a14:	bl	19820 <next@@Base>
   12a18:	ldr	r1, [r0]
   12a1c:	mov	r0, #8
   12a20:	mov	r2, #0
   12a24:	mov	r3, #37	; 0x25
   12a28:	str	r5, [sp]
   12a2c:	bl	1598c <UnityAssertEqualNumber@@Base>
   12a30:	mov	r0, r4
   12a34:	bl	19820 <next@@Base>
   12a38:	ldr	r1, [r0]
   12a3c:	mov	r0, #6
   12a40:	mov	r2, #0
   12a44:	mov	r3, #39	; 0x27
   12a48:	str	r5, [sp]
   12a4c:	bl	1598c <UnityAssertEqualNumber@@Base>
   12a50:	mov	r0, r4
   12a54:	bl	19820 <next@@Base>
   12a58:	ldr	r1, [r0]
   12a5c:	mov	r0, #9
   12a60:	mov	r2, #0
   12a64:	mov	r3, #41	; 0x29
   12a68:	str	r5, [sp]
   12a6c:	bl	1598c <UnityAssertEqualNumber@@Base>
   12a70:	mov	r0, r4
   12a74:	bl	194a0 <destroy_lexer@@Base>
   12a78:	sub	sp, fp, #8
   12a7c:	pop	{r4, r5, fp, pc}
   12a80:	andeq	r0, r0, r1
   12a84:	andeq	r0, r0, r0
   12a88:	andeq	r0, r0, r1
   12a8c:	andeq	r0, r0, r0
   12a90:	andeq	sp, r1, ip, lsr #17
   12a94:	strdeq	fp, [r0], -r4
   12a98:	nop	{0}
   12a9c:	nop	{0}

00012aa0 <push_token_to_stack@@Base>:
   12aa0:	push	{r4, r5, fp, lr}
   12aa4:	add	fp, sp, #8
   12aa8:	sub	sp, sp, #16
   12aac:	ldr	r0, [pc, #140]	; 12b40 <push_token_to_stack@@Base+0xa0>
   12ab0:	add	r1, pc, #120	; 0x78
   12ab4:	add	r4, sp, #4
   12ab8:	vld1.64	{d16-d17}, [r1 :128]
   12abc:	add	r0, pc, r0
   12ac0:	vld1.64	{d18-d19}, [r0 :128]
   12ac4:	vadd.i64	q8, q9, q8
   12ac8:	vst1.64	{d16-d17}, [r0 :128]
   12acc:	mov	r0, r4
   12ad0:	ldr	r1, [pc, #108]	; 12b44 <push_token_to_stack@@Base+0xa4>
   12ad4:	add	r1, pc, r1
   12ad8:	bl	19450 <init_lexer@@Base>
   12adc:	mov	r0, #8
   12ae0:	bl	126dc <malloc@plt>
   12ae4:	mov	r5, r0
   12ae8:	mov	r0, r4
   12aec:	mov	r1, r5
   12af0:	bl	195a0 <push_back@@Base>
   12af4:	ldr	r0, [sp, #8]
   12af8:	mov	r1, #148	; 0x94
   12afc:	mov	r2, #0
   12b00:	mov	r3, #62	; 0x3e
   12b04:	ldr	r0, [r0, #4]
   12b08:	str	r1, [sp]
   12b0c:	mov	r1, r5
   12b10:	bl	1598c <UnityAssertEqualNumber@@Base>
   12b14:	mov	r0, r4
   12b18:	bl	194a0 <destroy_lexer@@Base>
   12b1c:	mov	r0, r5
   12b20:	bl	1264c <free@plt>
   12b24:	sub	sp, fp, #8
   12b28:	pop	{r4, r5, fp, pc}
   12b2c:	nop	{0}
   12b30:	andeq	r0, r0, r1
   12b34:	andeq	r0, r0, r0
   12b38:	andeq	r0, r0, r1
   12b3c:	andeq	r0, r0, r0
   12b40:	andeq	sp, r1, ip, lsl #14
   12b44:	andeq	fp, r0, r4, asr #12
   12b48:	nop	{0}
   12b4c:	nop	{0}

00012b50 <push_two_tokens_to_stack@@Base>:
   12b50:	push	{r4, r5, r6, r7, fp, lr}
   12b54:	add	fp, sp, #16
   12b58:	sub	sp, sp, #16
   12b5c:	ldr	r0, [pc, #204]	; 12c30 <push_two_tokens_to_stack@@Base+0xe0>
   12b60:	add	r1, pc, #184	; 0xb8
   12b64:	add	r4, sp, #4
   12b68:	vld1.64	{d16-d17}, [r1 :128]
   12b6c:	add	r0, pc, r0
   12b70:	vld1.64	{d18-d19}, [r0 :128]
   12b74:	vadd.i64	q8, q9, q8
   12b78:	vst1.64	{d16-d17}, [r0 :128]
   12b7c:	mov	r0, r4
   12b80:	ldr	r1, [pc, #172]	; 12c34 <push_two_tokens_to_stack@@Base+0xe4>
   12b84:	add	r1, pc, r1
   12b88:	bl	19450 <init_lexer@@Base>
   12b8c:	mov	r0, #8
   12b90:	bl	126dc <malloc@plt>
   12b94:	mov	r5, r0
   12b98:	mov	r0, #8
   12b9c:	bl	126dc <malloc@plt>
   12ba0:	mov	r6, r0
   12ba4:	mov	r0, r4
   12ba8:	mov	r1, r5
   12bac:	bl	195a0 <push_back@@Base>
   12bb0:	ldr	r0, [sp, #8]
   12bb4:	mov	r7, #148	; 0x94
   12bb8:	mov	r1, r5
   12bbc:	mov	r2, #0
   12bc0:	mov	r3, #86	; 0x56
   12bc4:	ldr	r0, [r0, #4]
   12bc8:	str	r7, [sp]
   12bcc:	bl	1598c <UnityAssertEqualNumber@@Base>
   12bd0:	mov	r0, r4
   12bd4:	mov	r1, r6
   12bd8:	bl	195a0 <push_back@@Base>
   12bdc:	ldr	r0, [sp, #8]
   12be0:	mov	r1, r6
   12be4:	mov	r2, #0
   12be8:	mov	r3, #88	; 0x58
   12bec:	ldr	r0, [r0, #4]
   12bf0:	str	r7, [sp]
   12bf4:	bl	1598c <UnityAssertEqualNumber@@Base>
   12bf8:	mov	r0, r4
   12bfc:	bl	194a0 <destroy_lexer@@Base>
   12c00:	mov	r0, r5
   12c04:	bl	1264c <free@plt>
   12c08:	mov	r0, r6
   12c0c:	bl	1264c <free@plt>
   12c10:	sub	sp, fp, #16
   12c14:	pop	{r4, r5, r6, r7, fp, pc}
   12c18:	nop	{0}
   12c1c:	nop	{0}
   12c20:	andeq	r0, r0, r1
   12c24:	andeq	r0, r0, r0
   12c28:	andeq	r0, r0, r1
   12c2c:	andeq	r0, r0, r0
   12c30:	andeq	sp, r1, ip, ror #12
   12c34:	muleq	r0, r4, r5
   12c38:	nop	{0}
   12c3c:	nop	{0}

00012c40 <push_token_and_call_next@@Base>:
   12c40:	push	{r4, r5, fp, lr}
   12c44:	add	fp, sp, #8
   12c48:	sub	sp, sp, #16
   12c4c:	ldr	r0, [pc, #140]	; 12ce0 <push_token_and_call_next@@Base+0xa0>
   12c50:	add	r1, pc, #120	; 0x78
   12c54:	add	r4, sp, #4
   12c58:	vld1.64	{d16-d17}, [r1 :128]
   12c5c:	add	r0, pc, r0
   12c60:	vld1.64	{d18-d19}, [r0 :128]
   12c64:	vadd.i64	q8, q9, q8
   12c68:	vst1.64	{d16-d17}, [r0 :128]
   12c6c:	mov	r0, r4
   12c70:	ldr	r1, [pc, #108]	; 12ce4 <push_token_and_call_next@@Base+0xa4>
   12c74:	add	r1, pc, r1
   12c78:	bl	19450 <init_lexer@@Base>
   12c7c:	mov	r0, #8
   12c80:	bl	126dc <malloc@plt>
   12c84:	mov	r5, r0
   12c88:	mov	r0, r4
   12c8c:	mov	r1, r5
   12c90:	bl	195a0 <push_back@@Base>
   12c94:	mov	r0, r4
   12c98:	bl	19820 <next@@Base>
   12c9c:	mov	r1, r0
   12ca0:	mov	r0, #148	; 0x94
   12ca4:	mov	r2, #0
   12ca8:	mov	r3, #113	; 0x71
   12cac:	str	r0, [sp]
   12cb0:	mov	r0, r5
   12cb4:	bl	1598c <UnityAssertEqualNumber@@Base>
   12cb8:	mov	r0, r4
   12cbc:	bl	194a0 <destroy_lexer@@Base>
   12cc0:	mov	r0, r5
   12cc4:	bl	1264c <free@plt>
   12cc8:	sub	sp, fp, #8
   12ccc:	pop	{r4, r5, fp, pc}
   12cd0:	andeq	r0, r0, r1
   12cd4:	andeq	r0, r0, r0
   12cd8:	andeq	r0, r0, r1
   12cdc:	andeq	r0, r0, r0
   12ce0:	andeq	sp, r1, ip, lsl #11
   12ce4:	andeq	fp, r0, r4, lsr #9
   12ce8:	nop	{0}
   12cec:	nop	{0}

00012cf0 <if_without_else@@Base>:
   12cf0:	push	{r4, r5, fp, lr}
   12cf4:	add	fp, sp, #8
   12cf8:	sub	sp, sp, #16
   12cfc:	ldr	r0, [pc, #748]	; 12ff0 <if_without_else@@Base+0x300>
   12d00:	add	r1, pc, #728	; 0x2d8
   12d04:	add	r4, sp, #4
   12d08:	vld1.64	{d16-d17}, [r1 :128]
   12d0c:	add	r0, pc, r0
   12d10:	vld1.64	{d18-d19}, [r0 :128]
   12d14:	vadd.i64	q8, q9, q8
   12d18:	vst1.64	{d16-d17}, [r0 :128]
   12d1c:	mov	r0, r4
   12d20:	ldr	r1, [pc, #716]	; 12ff4 <if_without_else@@Base+0x304>
   12d24:	add	r1, pc, r1
   12d28:	bl	19450 <init_lexer@@Base>
   12d2c:	mov	r0, r4
   12d30:	bl	19820 <next@@Base>
   12d34:	ldr	r1, [r0]
   12d38:	mov	r5, #148	; 0x94
   12d3c:	mov	r0, #0
   12d40:	mov	r2, #0
   12d44:	mov	r3, #140	; 0x8c
   12d48:	str	r5, [sp]
   12d4c:	bl	1598c <UnityAssertEqualNumber@@Base>
   12d50:	mov	r0, r4
   12d54:	bl	19820 <next@@Base>
   12d58:	ldr	r1, [r0]
   12d5c:	mov	r0, #2
   12d60:	mov	r2, #0
   12d64:	mov	r3, #142	; 0x8e
   12d68:	str	r5, [sp]
   12d6c:	bl	1598c <UnityAssertEqualNumber@@Base>
   12d70:	mov	r0, r4
   12d74:	bl	19820 <next@@Base>
   12d78:	ldr	r1, [r0]
   12d7c:	mov	r0, #3
   12d80:	mov	r2, #0
   12d84:	mov	r3, #144	; 0x90
   12d88:	str	r5, [sp]
   12d8c:	bl	1598c <UnityAssertEqualNumber@@Base>
   12d90:	mov	r0, r4
   12d94:	bl	19820 <next@@Base>
   12d98:	ldr	r1, [r0]
   12d9c:	mov	r0, #4
   12da0:	mov	r2, #0
   12da4:	mov	r3, #146	; 0x92
   12da8:	str	r5, [sp]
   12dac:	bl	1598c <UnityAssertEqualNumber@@Base>
   12db0:	mov	r0, r4
   12db4:	bl	19820 <next@@Base>
   12db8:	ldr	r1, [r0]
   12dbc:	mov	r0, #5
   12dc0:	mov	r2, #0
   12dc4:	mov	r3, #148	; 0x94
   12dc8:	str	r5, [sp]
   12dcc:	bl	1598c <UnityAssertEqualNumber@@Base>
   12dd0:	mov	r0, r4
   12dd4:	bl	19820 <next@@Base>
   12dd8:	ldr	r1, [r0]
   12ddc:	mov	r0, #10
   12de0:	mov	r2, #0
   12de4:	mov	r3, #150	; 0x96
   12de8:	str	r5, [sp]
   12dec:	bl	1598c <UnityAssertEqualNumber@@Base>
   12df0:	mov	r0, r4
   12df4:	bl	19820 <next@@Base>
   12df8:	ldr	r1, [r0]
   12dfc:	mov	r0, #3
   12e00:	mov	r2, #0
   12e04:	mov	r3, #152	; 0x98
   12e08:	str	r5, [sp]
   12e0c:	bl	1598c <UnityAssertEqualNumber@@Base>
   12e10:	mov	r0, r4
   12e14:	bl	19820 <next@@Base>
   12e18:	ldr	r1, [r0]
   12e1c:	mov	r0, #1
   12e20:	mov	r2, #0
   12e24:	mov	r3, #154	; 0x9a
   12e28:	str	r5, [sp]
   12e2c:	bl	1598c <UnityAssertEqualNumber@@Base>
   12e30:	mov	r0, r4
   12e34:	bl	19820 <next@@Base>
   12e38:	ldr	r1, [r0]
   12e3c:	mov	r0, #12
   12e40:	mov	r2, #0
   12e44:	mov	r3, #156	; 0x9c
   12e48:	str	r5, [sp]
   12e4c:	bl	1598c <UnityAssertEqualNumber@@Base>
   12e50:	mov	r0, r4
   12e54:	bl	19820 <next@@Base>
   12e58:	ldr	r1, [r0]
   12e5c:	mov	r0, #1
   12e60:	mov	r2, #0
   12e64:	mov	r3, #158	; 0x9e
   12e68:	str	r5, [sp]
   12e6c:	bl	1598c <UnityAssertEqualNumber@@Base>
   12e70:	mov	r0, r4
   12e74:	bl	19820 <next@@Base>
   12e78:	ldr	r1, [r0]
   12e7c:	mov	r0, #4
   12e80:	mov	r2, #0
   12e84:	mov	r3, #160	; 0xa0
   12e88:	str	r5, [sp]
   12e8c:	bl	1598c <UnityAssertEqualNumber@@Base>
   12e90:	mov	r0, r4
   12e94:	bl	19820 <next@@Base>
   12e98:	ldr	r1, [r0]
   12e9c:	mov	r0, #5
   12ea0:	mov	r2, #0
   12ea4:	mov	r3, #162	; 0xa2
   12ea8:	str	r5, [sp]
   12eac:	bl	1598c <UnityAssertEqualNumber@@Base>
   12eb0:	mov	r0, r4
   12eb4:	bl	19820 <next@@Base>
   12eb8:	ldr	r1, [r0]
   12ebc:	mov	r0, #7
   12ec0:	mov	r2, #0
   12ec4:	mov	r3, #164	; 0xa4
   12ec8:	str	r5, [sp]
   12ecc:	bl	1598c <UnityAssertEqualNumber@@Base>
   12ed0:	mov	r0, r4
   12ed4:	bl	19820 <next@@Base>
   12ed8:	ldr	r1, [r0]
   12edc:	mov	r0, #1
   12ee0:	mov	r2, #0
   12ee4:	mov	r3, #166	; 0xa6
   12ee8:	str	r5, [sp]
   12eec:	bl	1598c <UnityAssertEqualNumber@@Base>
   12ef0:	mov	r0, r4
   12ef4:	bl	19820 <next@@Base>
   12ef8:	ldr	r1, [r0]
   12efc:	mov	r0, #8
   12f00:	mov	r2, #0
   12f04:	mov	r3, #168	; 0xa8
   12f08:	str	r5, [sp]
   12f0c:	bl	1598c <UnityAssertEqualNumber@@Base>
   12f10:	mov	r0, r4
   12f14:	bl	19820 <next@@Base>
   12f18:	ldr	r1, [r0]
   12f1c:	mov	r0, #6
   12f20:	mov	r2, #0
   12f24:	mov	r3, #170	; 0xaa
   12f28:	str	r5, [sp]
   12f2c:	bl	1598c <UnityAssertEqualNumber@@Base>
   12f30:	mov	r0, r4
   12f34:	bl	19820 <next@@Base>
   12f38:	ldr	r1, [r0]
   12f3c:	mov	r0, #7
   12f40:	mov	r2, #0
   12f44:	mov	r3, #172	; 0xac
   12f48:	str	r5, [sp]
   12f4c:	bl	1598c <UnityAssertEqualNumber@@Base>
   12f50:	mov	r0, r4
   12f54:	bl	19820 <next@@Base>
   12f58:	ldr	r1, [r0]
   12f5c:	mov	r0, #1
   12f60:	mov	r2, #0
   12f64:	mov	r3, #174	; 0xae
   12f68:	str	r5, [sp]
   12f6c:	bl	1598c <UnityAssertEqualNumber@@Base>
   12f70:	mov	r0, r4
   12f74:	bl	19820 <next@@Base>
   12f78:	ldr	r1, [r0]
   12f7c:	mov	r0, #8
   12f80:	mov	r2, #0
   12f84:	mov	r3, #176	; 0xb0
   12f88:	str	r5, [sp]
   12f8c:	bl	1598c <UnityAssertEqualNumber@@Base>
   12f90:	mov	r0, r4
   12f94:	bl	19820 <next@@Base>
   12f98:	ldr	r1, [r0]
   12f9c:	mov	r0, #6
   12fa0:	mov	r2, #0
   12fa4:	mov	r3, #178	; 0xb2
   12fa8:	str	r5, [sp]
   12fac:	bl	1598c <UnityAssertEqualNumber@@Base>
   12fb0:	mov	r0, r4
   12fb4:	bl	19820 <next@@Base>
   12fb8:	ldr	r1, [r0]
   12fbc:	mov	r0, #9
   12fc0:	mov	r2, #0
   12fc4:	mov	r3, #180	; 0xb4
   12fc8:	str	r5, [sp]
   12fcc:	bl	1598c <UnityAssertEqualNumber@@Base>
   12fd0:	mov	r0, r4
   12fd4:	bl	194a0 <destroy_lexer@@Base>
   12fd8:	sub	sp, fp, #8
   12fdc:	pop	{r4, r5, fp, pc}
   12fe0:	andeq	r0, r0, r1
   12fe4:	andeq	r0, r0, r0
   12fe8:	andeq	r0, r0, r1
   12fec:	andeq	r0, r0, r0
   12ff0:	andeq	sp, r1, ip, ror #9
   12ff4:	andeq	fp, r0, lr, lsl #8
   12ff8:	nop	{0}
   12ffc:	nop	{0}

00013000 <if_with_else@@Base>:
   13000:	push	{r4, r5, fp, lr}
   13004:	add	fp, sp, #8
   13008:	sub	sp, sp, #16
   1300c:	ldr	r0, [pc, #940]	; 133c0 <if_with_else@@Base+0x3c0>
   13010:	add	r1, pc, #920	; 0x398
   13014:	add	r4, sp, #4
   13018:	vld1.64	{d16-d17}, [r1 :128]
   1301c:	add	r0, pc, r0
   13020:	vld1.64	{d18-d19}, [r0 :128]
   13024:	vadd.i64	q8, q9, q8
   13028:	vst1.64	{d16-d17}, [r0 :128]
   1302c:	mov	r0, r4
   13030:	ldr	r1, [pc, #908]	; 133c4 <if_with_else@@Base+0x3c4>
   13034:	add	r1, pc, r1
   13038:	bl	19450 <init_lexer@@Base>
   1303c:	mov	r0, r4
   13040:	bl	19820 <next@@Base>
   13044:	ldr	r1, [r0]
   13048:	mov	r5, #148	; 0x94
   1304c:	mov	r0, #0
   13050:	mov	r2, #0
   13054:	mov	r3, #210	; 0xd2
   13058:	str	r5, [sp]
   1305c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13060:	mov	r0, r4
   13064:	bl	19820 <next@@Base>
   13068:	ldr	r1, [r0]
   1306c:	mov	r0, #2
   13070:	mov	r2, #0
   13074:	mov	r3, #212	; 0xd4
   13078:	str	r5, [sp]
   1307c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13080:	mov	r0, r4
   13084:	bl	19820 <next@@Base>
   13088:	ldr	r1, [r0]
   1308c:	mov	r0, #3
   13090:	mov	r2, #0
   13094:	mov	r3, #214	; 0xd6
   13098:	str	r5, [sp]
   1309c:	bl	1598c <UnityAssertEqualNumber@@Base>
   130a0:	mov	r0, r4
   130a4:	bl	19820 <next@@Base>
   130a8:	ldr	r1, [r0]
   130ac:	mov	r0, #4
   130b0:	mov	r2, #0
   130b4:	mov	r3, #216	; 0xd8
   130b8:	str	r5, [sp]
   130bc:	bl	1598c <UnityAssertEqualNumber@@Base>
   130c0:	mov	r0, r4
   130c4:	bl	19820 <next@@Base>
   130c8:	ldr	r1, [r0]
   130cc:	mov	r0, #5
   130d0:	mov	r2, #0
   130d4:	mov	r3, #218	; 0xda
   130d8:	str	r5, [sp]
   130dc:	bl	1598c <UnityAssertEqualNumber@@Base>
   130e0:	mov	r0, r4
   130e4:	bl	19820 <next@@Base>
   130e8:	ldr	r1, [r0]
   130ec:	mov	r0, #10
   130f0:	mov	r2, #0
   130f4:	mov	r3, #220	; 0xdc
   130f8:	str	r5, [sp]
   130fc:	bl	1598c <UnityAssertEqualNumber@@Base>
   13100:	mov	r0, r4
   13104:	bl	19820 <next@@Base>
   13108:	ldr	r1, [r0]
   1310c:	mov	r0, #3
   13110:	mov	r2, #0
   13114:	mov	r3, #222	; 0xde
   13118:	str	r5, [sp]
   1311c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13120:	mov	r0, r4
   13124:	bl	19820 <next@@Base>
   13128:	ldr	r1, [r0]
   1312c:	mov	r0, #1
   13130:	mov	r2, #0
   13134:	mov	r3, #224	; 0xe0
   13138:	str	r5, [sp]
   1313c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13140:	mov	r0, r4
   13144:	bl	19820 <next@@Base>
   13148:	ldr	r1, [r0]
   1314c:	mov	r0, #12
   13150:	mov	r2, #0
   13154:	mov	r3, #226	; 0xe2
   13158:	str	r5, [sp]
   1315c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13160:	mov	r0, r4
   13164:	bl	19820 <next@@Base>
   13168:	ldr	r1, [r0]
   1316c:	mov	r0, #1
   13170:	mov	r2, #0
   13174:	mov	r3, #228	; 0xe4
   13178:	str	r5, [sp]
   1317c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13180:	mov	r0, r4
   13184:	bl	19820 <next@@Base>
   13188:	ldr	r1, [r0]
   1318c:	mov	r0, #4
   13190:	mov	r2, #0
   13194:	mov	r3, #230	; 0xe6
   13198:	str	r5, [sp]
   1319c:	bl	1598c <UnityAssertEqualNumber@@Base>
   131a0:	mov	r0, r4
   131a4:	bl	19820 <next@@Base>
   131a8:	ldr	r1, [r0]
   131ac:	mov	r0, #5
   131b0:	mov	r2, #0
   131b4:	mov	r3, #232	; 0xe8
   131b8:	str	r5, [sp]
   131bc:	bl	1598c <UnityAssertEqualNumber@@Base>
   131c0:	mov	r0, r4
   131c4:	bl	19820 <next@@Base>
   131c8:	ldr	r1, [r0]
   131cc:	mov	r0, #7
   131d0:	mov	r2, #0
   131d4:	mov	r3, #234	; 0xea
   131d8:	str	r5, [sp]
   131dc:	bl	1598c <UnityAssertEqualNumber@@Base>
   131e0:	mov	r0, r4
   131e4:	bl	19820 <next@@Base>
   131e8:	ldr	r1, [r0]
   131ec:	mov	r0, #1
   131f0:	mov	r2, #0
   131f4:	mov	r3, #236	; 0xec
   131f8:	str	r5, [sp]
   131fc:	bl	1598c <UnityAssertEqualNumber@@Base>
   13200:	mov	r0, r4
   13204:	bl	19820 <next@@Base>
   13208:	ldr	r1, [r0]
   1320c:	mov	r0, #8
   13210:	mov	r2, #0
   13214:	mov	r3, #238	; 0xee
   13218:	str	r5, [sp]
   1321c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13220:	mov	r0, r4
   13224:	bl	19820 <next@@Base>
   13228:	ldr	r1, [r0]
   1322c:	mov	r0, #6
   13230:	mov	r2, #0
   13234:	mov	r3, #240	; 0xf0
   13238:	str	r5, [sp]
   1323c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13240:	mov	r0, r4
   13244:	bl	19820 <next@@Base>
   13248:	ldr	r1, [r0]
   1324c:	mov	r0, #11
   13250:	mov	r2, #0
   13254:	mov	r3, #242	; 0xf2
   13258:	str	r5, [sp]
   1325c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13260:	mov	r0, r4
   13264:	bl	19820 <next@@Base>
   13268:	ldr	r1, [r0]
   1326c:	mov	r0, #5
   13270:	mov	r2, #0
   13274:	mov	r3, #244	; 0xf4
   13278:	str	r5, [sp]
   1327c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13280:	mov	r0, r4
   13284:	bl	19820 <next@@Base>
   13288:	ldr	r1, [r0]
   1328c:	mov	r0, #7
   13290:	mov	r2, #0
   13294:	mov	r3, #246	; 0xf6
   13298:	str	r5, [sp]
   1329c:	bl	1598c <UnityAssertEqualNumber@@Base>
   132a0:	mov	r0, r4
   132a4:	bl	19820 <next@@Base>
   132a8:	ldr	r1, [r0]
   132ac:	mov	r0, #1
   132b0:	mov	r2, #0
   132b4:	mov	r3, #248	; 0xf8
   132b8:	str	r5, [sp]
   132bc:	bl	1598c <UnityAssertEqualNumber@@Base>
   132c0:	mov	r0, r4
   132c4:	bl	19820 <next@@Base>
   132c8:	ldr	r1, [r0]
   132cc:	mov	r0, #8
   132d0:	mov	r2, #0
   132d4:	mov	r3, #250	; 0xfa
   132d8:	str	r5, [sp]
   132dc:	bl	1598c <UnityAssertEqualNumber@@Base>
   132e0:	mov	r0, r4
   132e4:	bl	19820 <next@@Base>
   132e8:	ldr	r1, [r0]
   132ec:	mov	r0, #6
   132f0:	mov	r2, #0
   132f4:	mov	r3, #252	; 0xfc
   132f8:	str	r5, [sp]
   132fc:	bl	1598c <UnityAssertEqualNumber@@Base>
   13300:	mov	r0, r4
   13304:	bl	19820 <next@@Base>
   13308:	ldr	r1, [r0]
   1330c:	mov	r0, #7
   13310:	mov	r2, #0
   13314:	mov	r3, #254	; 0xfe
   13318:	str	r5, [sp]
   1331c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13320:	mov	r0, r4
   13324:	bl	19820 <next@@Base>
   13328:	ldr	r1, [r0]
   1332c:	mov	r0, #1
   13330:	mov	r2, #0
   13334:	mov	r3, #256	; 0x100
   13338:	str	r5, [sp]
   1333c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13340:	mov	r0, r4
   13344:	bl	19820 <next@@Base>
   13348:	ldr	r1, [r0]
   1334c:	mov	r0, #8
   13350:	mov	r2, #0
   13354:	movw	r3, #258	; 0x102
   13358:	str	r5, [sp]
   1335c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13360:	mov	r0, r4
   13364:	bl	19820 <next@@Base>
   13368:	ldr	r1, [r0]
   1336c:	mov	r0, #6
   13370:	mov	r2, #0
   13374:	mov	r3, #260	; 0x104
   13378:	str	r5, [sp]
   1337c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13380:	mov	r0, r4
   13384:	bl	19820 <next@@Base>
   13388:	ldr	r1, [r0]
   1338c:	mov	r0, #9
   13390:	mov	r2, #0
   13394:	movw	r3, #262	; 0x106
   13398:	str	r5, [sp]
   1339c:	bl	1598c <UnityAssertEqualNumber@@Base>
   133a0:	mov	r0, r4
   133a4:	bl	194a0 <destroy_lexer@@Base>
   133a8:	sub	sp, fp, #8
   133ac:	pop	{r4, r5, fp, pc}
   133b0:	andeq	r0, r0, r1
   133b4:	andeq	r0, r0, r0
   133b8:	andeq	r0, r0, r1
   133bc:	andeq	r0, r0, r0
   133c0:	andeq	sp, r1, ip, ror #3
   133c4:	andeq	fp, r0, r7, lsr r1
   133c8:	nop	{0}
   133cc:	nop	{0}

000133d0 <read_token_int_type@@Base>:
   133d0:	push	{r4, sl, fp, lr}
   133d4:	add	fp, sp, #8
   133d8:	sub	sp, sp, #16
   133dc:	ldr	r0, [pc, #108]	; 13450 <read_token_int_type@@Base+0x80>
   133e0:	add	r1, pc, #88	; 0x58
   133e4:	add	r4, sp, #4
   133e8:	vld1.64	{d16-d17}, [r1 :128]
   133ec:	add	r0, pc, r0
   133f0:	vld1.64	{d18-d19}, [r0 :128]
   133f4:	vadd.i64	q8, q9, q8
   133f8:	vst1.64	{d16-d17}, [r0 :128]
   133fc:	mov	r0, r4
   13400:	ldr	r1, [pc, #76]	; 13454 <read_token_int_type@@Base+0x84>
   13404:	add	r1, pc, r1
   13408:	bl	19450 <init_lexer@@Base>
   1340c:	mov	r0, r4
   13410:	bl	19820 <next@@Base>
   13414:	ldr	r1, [r0]
   13418:	mov	r0, #148	; 0x94
   1341c:	mov	r2, #0
   13420:	movw	r3, #279	; 0x117
   13424:	str	r0, [sp]
   13428:	mov	r0, #0
   1342c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13430:	mov	r0, r4
   13434:	bl	194a0 <destroy_lexer@@Base>
   13438:	sub	sp, fp, #8
   1343c:	pop	{r4, sl, fp, pc}
   13440:	andeq	r0, r0, r1
   13444:	andeq	r0, r0, r0
   13448:	andeq	r0, r0, r1
   1344c:	andeq	r0, r0, r0
   13450:	andeq	ip, r1, ip, lsr #28
   13454:	andeq	fp, r0, ip, lsl r3
   13458:	nop	{0}
   1345c:	nop	{0}

00013460 <read_token_int_value@@Base>:
   13460:	push	{r4, sl, fp, lr}
   13464:	add	fp, sp, #8
   13468:	sub	sp, sp, #16
   1346c:	ldr	r0, [pc, #108]	; 134e0 <read_token_int_value@@Base+0x80>
   13470:	add	r1, pc, #88	; 0x58
   13474:	add	r4, sp, #4
   13478:	vld1.64	{d16-d17}, [r1 :128]
   1347c:	add	r0, pc, r0
   13480:	vld1.64	{d18-d19}, [r0 :128]
   13484:	vadd.i64	q8, q9, q8
   13488:	vst1.64	{d16-d17}, [r0 :128]
   1348c:	mov	r0, r4
   13490:	ldr	r1, [pc, #76]	; 134e4 <read_token_int_value@@Base+0x84>
   13494:	add	r1, pc, r1
   13498:	bl	19450 <init_lexer@@Base>
   1349c:	mov	r0, r4
   134a0:	bl	19820 <next@@Base>
   134a4:	ldr	r1, [r0]
   134a8:	mov	r0, #148	; 0x94
   134ac:	mov	r2, #0
   134b0:	mov	r3, #296	; 0x128
   134b4:	str	r0, [sp]
   134b8:	mov	r0, #1
   134bc:	bl	1598c <UnityAssertEqualNumber@@Base>
   134c0:	mov	r0, r4
   134c4:	bl	194a0 <destroy_lexer@@Base>
   134c8:	sub	sp, fp, #8
   134cc:	pop	{r4, sl, fp, pc}
   134d0:	andeq	r0, r0, r1
   134d4:	andeq	r0, r0, r0
   134d8:	andeq	r0, r0, r1
   134dc:	andeq	r0, r0, r0
   134e0:	andeq	ip, r1, ip, lsr #27
   134e4:	andeq	sl, r0, r8, lsr #26
   134e8:	nop	{0}
   134ec:	nop	{0}

000134f0 <read_token_function@@Base>:
   134f0:	push	{r4, sl, fp, lr}
   134f4:	add	fp, sp, #8
   134f8:	sub	sp, sp, #16
   134fc:	ldr	r0, [pc, #108]	; 13570 <read_token_function@@Base+0x80>
   13500:	add	r1, pc, #88	; 0x58
   13504:	add	r4, sp, #4
   13508:	vld1.64	{d16-d17}, [r1 :128]
   1350c:	add	r0, pc, r0
   13510:	vld1.64	{d18-d19}, [r0 :128]
   13514:	vadd.i64	q8, q9, q8
   13518:	vst1.64	{d16-d17}, [r0 :128]
   1351c:	mov	r0, r4
   13520:	ldr	r1, [pc, #76]	; 13574 <read_token_function@@Base+0x84>
   13524:	add	r1, pc, r1
   13528:	bl	19450 <init_lexer@@Base>
   1352c:	mov	r0, r4
   13530:	bl	19820 <next@@Base>
   13534:	ldr	r1, [r0]
   13538:	mov	r0, #148	; 0x94
   1353c:	mov	r2, #0
   13540:	movw	r3, #313	; 0x139
   13544:	str	r0, [sp]
   13548:	mov	r0, #2
   1354c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13550:	mov	r0, r4
   13554:	bl	194a0 <destroy_lexer@@Base>
   13558:	sub	sp, fp, #8
   1355c:	pop	{r4, sl, fp, pc}
   13560:	andeq	r0, r0, r1
   13564:	andeq	r0, r0, r0
   13568:	andeq	r0, r0, r1
   1356c:	andeq	r0, r0, r0
   13570:	andeq	ip, r1, ip, lsr #26
   13574:	andeq	sl, r0, r5, lsr #27
   13578:	nop	{0}
   1357c:	nop	{0}

00013580 <read_token_opar@@Base>:
   13580:	push	{r4, sl, fp, lr}
   13584:	add	fp, sp, #8
   13588:	sub	sp, sp, #16
   1358c:	ldr	r0, [pc, #108]	; 13600 <read_token_opar@@Base+0x80>
   13590:	add	r1, pc, #88	; 0x58
   13594:	add	r4, sp, #4
   13598:	vld1.64	{d16-d17}, [r1 :128]
   1359c:	add	r0, pc, r0
   135a0:	vld1.64	{d18-d19}, [r0 :128]
   135a4:	vadd.i64	q8, q9, q8
   135a8:	vst1.64	{d16-d17}, [r0 :128]
   135ac:	mov	r0, r4
   135b0:	ldr	r1, [pc, #76]	; 13604 <read_token_opar@@Base+0x84>
   135b4:	add	r1, pc, r1
   135b8:	bl	19450 <init_lexer@@Base>
   135bc:	mov	r0, r4
   135c0:	bl	19820 <next@@Base>
   135c4:	ldr	r1, [r0]
   135c8:	mov	r0, #148	; 0x94
   135cc:	mov	r2, #0
   135d0:	movw	r3, #330	; 0x14a
   135d4:	str	r0, [sp]
   135d8:	mov	r0, #3
   135dc:	bl	1598c <UnityAssertEqualNumber@@Base>
   135e0:	mov	r0, r4
   135e4:	bl	194a0 <destroy_lexer@@Base>
   135e8:	sub	sp, fp, #8
   135ec:	pop	{r4, sl, fp, pc}
   135f0:	andeq	r0, r0, r1
   135f4:	andeq	r0, r0, r0
   135f8:	andeq	r0, r0, r1
   135fc:	andeq	r0, r0, r0
   13600:	andeq	ip, r1, ip, lsr #25
   13604:	andeq	sl, r0, sp, lsl #24
   13608:	nop	{0}
   1360c:	nop	{0}

00013610 <read_token_cpar@@Base>:
   13610:	push	{r4, sl, fp, lr}
   13614:	add	fp, sp, #8
   13618:	sub	sp, sp, #16
   1361c:	ldr	r0, [pc, #108]	; 13690 <read_token_cpar@@Base+0x80>
   13620:	add	r1, pc, #88	; 0x58
   13624:	add	r4, sp, #4
   13628:	vld1.64	{d16-d17}, [r1 :128]
   1362c:	add	r0, pc, r0
   13630:	vld1.64	{d18-d19}, [r0 :128]
   13634:	vadd.i64	q8, q9, q8
   13638:	vst1.64	{d16-d17}, [r0 :128]
   1363c:	mov	r0, r4
   13640:	ldr	r1, [pc, #76]	; 13694 <read_token_cpar@@Base+0x84>
   13644:	add	r1, pc, r1
   13648:	bl	19450 <init_lexer@@Base>
   1364c:	mov	r0, r4
   13650:	bl	19820 <next@@Base>
   13654:	ldr	r1, [r0]
   13658:	mov	r0, #148	; 0x94
   1365c:	mov	r2, #0
   13660:	movw	r3, #347	; 0x15b
   13664:	str	r0, [sp]
   13668:	mov	r0, #4
   1366c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13670:	mov	r0, r4
   13674:	bl	194a0 <destroy_lexer@@Base>
   13678:	sub	sp, fp, #8
   1367c:	pop	{r4, sl, fp, pc}
   13680:	andeq	r0, r0, r1
   13684:	andeq	r0, r0, r0
   13688:	andeq	r0, r0, r1
   1368c:	andeq	r0, r0, r0
   13690:	andeq	ip, r1, ip, lsr #24
   13694:	andeq	sl, r0, pc, ror fp
   13698:	nop	{0}
   1369c:	nop	{0}

000136a0 <read_token_obra@@Base>:
   136a0:	push	{r4, sl, fp, lr}
   136a4:	add	fp, sp, #8
   136a8:	sub	sp, sp, #16
   136ac:	ldr	r0, [pc, #108]	; 13720 <read_token_obra@@Base+0x80>
   136b0:	add	r1, pc, #88	; 0x58
   136b4:	add	r4, sp, #4
   136b8:	vld1.64	{d16-d17}, [r1 :128]
   136bc:	add	r0, pc, r0
   136c0:	vld1.64	{d18-d19}, [r0 :128]
   136c4:	vadd.i64	q8, q9, q8
   136c8:	vst1.64	{d16-d17}, [r0 :128]
   136cc:	mov	r0, r4
   136d0:	ldr	r1, [pc, #76]	; 13724 <read_token_obra@@Base+0x84>
   136d4:	add	r1, pc, r1
   136d8:	bl	19450 <init_lexer@@Base>
   136dc:	mov	r0, r4
   136e0:	bl	19820 <next@@Base>
   136e4:	ldr	r1, [r0]
   136e8:	mov	r0, #148	; 0x94
   136ec:	mov	r2, #0
   136f0:	mov	r3, #364	; 0x16c
   136f4:	str	r0, [sp]
   136f8:	mov	r0, #5
   136fc:	bl	1598c <UnityAssertEqualNumber@@Base>
   13700:	mov	r0, r4
   13704:	bl	194a0 <destroy_lexer@@Base>
   13708:	sub	sp, fp, #8
   1370c:	pop	{r4, sl, fp, pc}
   13710:	andeq	r0, r0, r1
   13714:	andeq	r0, r0, r0
   13718:	andeq	r0, r0, r1
   1371c:	andeq	r0, r0, r0
   13720:	andeq	ip, r1, ip, lsr #23
   13724:	strdeq	sl, [r0], -r1
   13728:	nop	{0}
   1372c:	nop	{0}

00013730 <read_token_cbra@@Base>:
   13730:	push	{r4, sl, fp, lr}
   13734:	add	fp, sp, #8
   13738:	sub	sp, sp, #16
   1373c:	ldr	r0, [pc, #108]	; 137b0 <read_token_cbra@@Base+0x80>
   13740:	add	r1, pc, #88	; 0x58
   13744:	add	r4, sp, #4
   13748:	vld1.64	{d16-d17}, [r1 :128]
   1374c:	add	r0, pc, r0
   13750:	vld1.64	{d18-d19}, [r0 :128]
   13754:	vadd.i64	q8, q9, q8
   13758:	vst1.64	{d16-d17}, [r0 :128]
   1375c:	mov	r0, r4
   13760:	ldr	r1, [pc, #76]	; 137b4 <read_token_cbra@@Base+0x84>
   13764:	add	r1, pc, r1
   13768:	bl	19450 <init_lexer@@Base>
   1376c:	mov	r0, r4
   13770:	bl	19820 <next@@Base>
   13774:	ldr	r1, [r0]
   13778:	mov	r0, #148	; 0x94
   1377c:	mov	r2, #0
   13780:	movw	r3, #382	; 0x17e
   13784:	str	r0, [sp]
   13788:	mov	r0, #6
   1378c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13790:	mov	r0, r4
   13794:	bl	194a0 <destroy_lexer@@Base>
   13798:	sub	sp, fp, #8
   1379c:	pop	{r4, sl, fp, pc}
   137a0:	andeq	r0, r0, r1
   137a4:	andeq	r0, r0, r0
   137a8:	andeq	r0, r0, r1
   137ac:	andeq	r0, r0, r0
   137b0:	andeq	ip, r1, ip, lsr #22
   137b4:	andeq	sl, r0, ip, asr #19
   137b8:	nop	{0}
   137bc:	nop	{0}

000137c0 <read_token_return@@Base>:
   137c0:	push	{r4, sl, fp, lr}
   137c4:	add	fp, sp, #8
   137c8:	sub	sp, sp, #16
   137cc:	ldr	r0, [pc, #108]	; 13840 <read_token_return@@Base+0x80>
   137d0:	add	r1, pc, #88	; 0x58
   137d4:	add	r4, sp, #4
   137d8:	vld1.64	{d16-d17}, [r1 :128]
   137dc:	add	r0, pc, r0
   137e0:	vld1.64	{d18-d19}, [r0 :128]
   137e4:	vadd.i64	q8, q9, q8
   137e8:	vst1.64	{d16-d17}, [r0 :128]
   137ec:	mov	r0, r4
   137f0:	ldr	r1, [pc, #76]	; 13844 <read_token_return@@Base+0x84>
   137f4:	add	r1, pc, r1
   137f8:	bl	19450 <init_lexer@@Base>
   137fc:	mov	r0, r4
   13800:	bl	19820 <next@@Base>
   13804:	ldr	r1, [r0]
   13808:	mov	r0, #148	; 0x94
   1380c:	mov	r2, #0
   13810:	movw	r3, #399	; 0x18f
   13814:	str	r0, [sp]
   13818:	mov	r0, #7
   1381c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13820:	mov	r0, r4
   13824:	bl	194a0 <destroy_lexer@@Base>
   13828:	sub	sp, fp, #8
   1382c:	pop	{r4, sl, fp, pc}
   13830:	andeq	r0, r0, r1
   13834:	andeq	r0, r0, r0
   13838:	andeq	r0, r0, r1
   1383c:	andeq	r0, r0, r0
   13840:	andeq	ip, r1, ip, lsr #21
   13844:	andeq	sl, r0, r5, asr #23
   13848:	nop	{0}
   1384c:	nop	{0}

00013850 <read_token_semicolon@@Base>:
   13850:	push	{r4, sl, fp, lr}
   13854:	add	fp, sp, #8
   13858:	sub	sp, sp, #16
   1385c:	ldr	r0, [pc, #108]	; 138d0 <read_token_semicolon@@Base+0x80>
   13860:	add	r1, pc, #88	; 0x58
   13864:	add	r4, sp, #4
   13868:	vld1.64	{d16-d17}, [r1 :128]
   1386c:	add	r0, pc, r0
   13870:	vld1.64	{d18-d19}, [r0 :128]
   13874:	vadd.i64	q8, q9, q8
   13878:	vst1.64	{d16-d17}, [r0 :128]
   1387c:	mov	r0, r4
   13880:	ldr	r1, [pc, #76]	; 138d4 <read_token_semicolon@@Base+0x84>
   13884:	add	r1, pc, r1
   13888:	bl	19450 <init_lexer@@Base>
   1388c:	mov	r0, r4
   13890:	bl	19820 <next@@Base>
   13894:	ldr	r1, [r0]
   13898:	mov	r0, #148	; 0x94
   1389c:	mov	r2, #0
   138a0:	mov	r3, #416	; 0x1a0
   138a4:	str	r0, [sp]
   138a8:	mov	r0, #8
   138ac:	bl	1598c <UnityAssertEqualNumber@@Base>
   138b0:	mov	r0, r4
   138b4:	bl	194a0 <destroy_lexer@@Base>
   138b8:	sub	sp, fp, #8
   138bc:	pop	{r4, sl, fp, pc}
   138c0:	andeq	r0, r0, r1
   138c4:	andeq	r0, r0, r0
   138c8:	andeq	r0, r0, r1
   138cc:	andeq	r0, r0, r0
   138d0:	andeq	ip, r1, ip, lsr #20
   138d4:	andeq	sl, r0, r3, asr #18
   138d8:	nop	{0}
   138dc:	nop	{0}

000138e0 <read_token_eof@@Base>:
   138e0:	push	{r4, sl, fp, lr}
   138e4:	add	fp, sp, #8
   138e8:	sub	sp, sp, #16
   138ec:	ldr	r0, [pc, #108]	; 13960 <read_token_eof@@Base+0x80>
   138f0:	add	r1, pc, #88	; 0x58
   138f4:	add	r4, sp, #4
   138f8:	vld1.64	{d16-d17}, [r1 :128]
   138fc:	add	r0, pc, r0
   13900:	vld1.64	{d18-d19}, [r0 :128]
   13904:	vadd.i64	q8, q9, q8
   13908:	vst1.64	{d16-d17}, [r0 :128]
   1390c:	mov	r0, r4
   13910:	ldr	r1, [pc, #76]	; 13964 <read_token_eof@@Base+0x84>
   13914:	add	r1, pc, r1
   13918:	bl	19450 <init_lexer@@Base>
   1391c:	mov	r0, r4
   13920:	bl	19820 <next@@Base>
   13924:	ldr	r1, [r0]
   13928:	mov	r0, #148	; 0x94
   1392c:	mov	r2, #0
   13930:	movw	r3, #433	; 0x1b1
   13934:	str	r0, [sp]
   13938:	mov	r0, #9
   1393c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13940:	mov	r0, r4
   13944:	bl	194a0 <destroy_lexer@@Base>
   13948:	sub	sp, fp, #8
   1394c:	pop	{r4, sl, fp, pc}
   13950:	andeq	r0, r0, r1
   13954:	andeq	r0, r0, r0
   13958:	andeq	r0, r0, r1
   1395c:	andeq	r0, r0, r0
   13960:	andeq	ip, r1, ip, lsr #19
   13964:	andeq	fp, r0, r0, ror r5
   13968:	nop	{0}
   1396c:	nop	{0}

00013970 <read_token_if@@Base>:
   13970:	push	{r4, sl, fp, lr}
   13974:	add	fp, sp, #8
   13978:	sub	sp, sp, #16
   1397c:	ldr	r0, [pc, #108]	; 139f0 <read_token_if@@Base+0x80>
   13980:	add	r1, pc, #88	; 0x58
   13984:	add	r4, sp, #4
   13988:	vld1.64	{d16-d17}, [r1 :128]
   1398c:	add	r0, pc, r0
   13990:	vld1.64	{d18-d19}, [r0 :128]
   13994:	vadd.i64	q8, q9, q8
   13998:	vst1.64	{d16-d17}, [r0 :128]
   1399c:	mov	r0, r4
   139a0:	ldr	r1, [pc, #76]	; 139f4 <read_token_if@@Base+0x84>
   139a4:	add	r1, pc, r1
   139a8:	bl	19450 <init_lexer@@Base>
   139ac:	mov	r0, r4
   139b0:	bl	19820 <next@@Base>
   139b4:	ldr	r1, [r0]
   139b8:	mov	r0, #148	; 0x94
   139bc:	mov	r2, #0
   139c0:	movw	r3, #450	; 0x1c2
   139c4:	str	r0, [sp]
   139c8:	mov	r0, #10
   139cc:	bl	1598c <UnityAssertEqualNumber@@Base>
   139d0:	mov	r0, r4
   139d4:	bl	194a0 <destroy_lexer@@Base>
   139d8:	sub	sp, fp, #8
   139dc:	pop	{r4, sl, fp, pc}
   139e0:	andeq	r0, r0, r1
   139e4:	andeq	r0, r0, r0
   139e8:	andeq	r0, r0, r1
   139ec:	andeq	r0, r0, r0
   139f0:	andeq	ip, r1, ip, lsr #18
   139f4:	andeq	sl, r0, fp, asr #20
   139f8:	nop	{0}
   139fc:	nop	{0}

00013a00 <read_token_else@@Base>:
   13a00:	push	{r4, sl, fp, lr}
   13a04:	add	fp, sp, #8
   13a08:	sub	sp, sp, #16
   13a0c:	ldr	r0, [pc, #108]	; 13a80 <read_token_else@@Base+0x80>
   13a10:	add	r1, pc, #88	; 0x58
   13a14:	add	r4, sp, #4
   13a18:	vld1.64	{d16-d17}, [r1 :128]
   13a1c:	add	r0, pc, r0
   13a20:	vld1.64	{d18-d19}, [r0 :128]
   13a24:	vadd.i64	q8, q9, q8
   13a28:	vst1.64	{d16-d17}, [r0 :128]
   13a2c:	mov	r0, r4
   13a30:	ldr	r1, [pc, #76]	; 13a84 <read_token_else@@Base+0x84>
   13a34:	add	r1, pc, r1
   13a38:	bl	19450 <init_lexer@@Base>
   13a3c:	mov	r0, r4
   13a40:	bl	19820 <next@@Base>
   13a44:	ldr	r1, [r0]
   13a48:	mov	r0, #148	; 0x94
   13a4c:	mov	r2, #0
   13a50:	movw	r3, #467	; 0x1d3
   13a54:	str	r0, [sp]
   13a58:	mov	r0, #11
   13a5c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13a60:	mov	r0, r4
   13a64:	bl	194a0 <destroy_lexer@@Base>
   13a68:	sub	sp, fp, #8
   13a6c:	pop	{r4, sl, fp, pc}
   13a70:	andeq	r0, r0, r1
   13a74:	andeq	r0, r0, r0
   13a78:	andeq	r0, r0, r1
   13a7c:	andeq	r0, r0, r0
   13a80:	andeq	ip, r1, ip, lsr #17
   13a84:	strdeq	sl, [r0], -r8
   13a88:	nop	{0}
   13a8c:	nop	{0}

00013a90 <read_token_equalequal@@Base>:
   13a90:	push	{r4, sl, fp, lr}
   13a94:	add	fp, sp, #8
   13a98:	sub	sp, sp, #16
   13a9c:	ldr	r0, [pc, #108]	; 13b10 <read_token_equalequal@@Base+0x80>
   13aa0:	add	r1, pc, #88	; 0x58
   13aa4:	add	r4, sp, #4
   13aa8:	vld1.64	{d16-d17}, [r1 :128]
   13aac:	add	r0, pc, r0
   13ab0:	vld1.64	{d18-d19}, [r0 :128]
   13ab4:	vadd.i64	q8, q9, q8
   13ab8:	vst1.64	{d16-d17}, [r0 :128]
   13abc:	mov	r0, r4
   13ac0:	ldr	r1, [pc, #76]	; 13b14 <read_token_equalequal@@Base+0x84>
   13ac4:	add	r1, pc, r1
   13ac8:	bl	19450 <init_lexer@@Base>
   13acc:	mov	r0, r4
   13ad0:	bl	19820 <next@@Base>
   13ad4:	ldr	r1, [r0]
   13ad8:	mov	r0, #148	; 0x94
   13adc:	mov	r2, #0
   13ae0:	mov	r3, #484	; 0x1e4
   13ae4:	str	r0, [sp]
   13ae8:	mov	r0, #12
   13aec:	bl	1598c <UnityAssertEqualNumber@@Base>
   13af0:	mov	r0, r4
   13af4:	bl	194a0 <destroy_lexer@@Base>
   13af8:	sub	sp, fp, #8
   13afc:	pop	{r4, sl, fp, pc}
   13b00:	andeq	r0, r0, r1
   13b04:	andeq	r0, r0, r0
   13b08:	andeq	r0, r0, r1
   13b0c:	andeq	r0, r0, r0
   13b10:	andeq	ip, r1, ip, lsr #16
   13b14:	andeq	sl, r0, r5, lsl #14
   13b18:	nop	{0}
   13b1c:	nop	{0}

00013b20 <read_token_notequal@@Base>:
   13b20:	push	{r4, sl, fp, lr}
   13b24:	add	fp, sp, #8
   13b28:	sub	sp, sp, #16
   13b2c:	ldr	r0, [pc, #108]	; 13ba0 <read_token_notequal@@Base+0x80>
   13b30:	add	r1, pc, #88	; 0x58
   13b34:	add	r4, sp, #4
   13b38:	vld1.64	{d16-d17}, [r1 :128]
   13b3c:	add	r0, pc, r0
   13b40:	vld1.64	{d18-d19}, [r0 :128]
   13b44:	vadd.i64	q8, q9, q8
   13b48:	vst1.64	{d16-d17}, [r0 :128]
   13b4c:	mov	r0, r4
   13b50:	ldr	r1, [pc, #76]	; 13ba4 <read_token_notequal@@Base+0x84>
   13b54:	add	r1, pc, r1
   13b58:	bl	19450 <init_lexer@@Base>
   13b5c:	mov	r0, r4
   13b60:	bl	19820 <next@@Base>
   13b64:	ldr	r1, [r0]
   13b68:	mov	r0, #148	; 0x94
   13b6c:	mov	r2, #0
   13b70:	movw	r3, #501	; 0x1f5
   13b74:	str	r0, [sp]
   13b78:	mov	r0, #12
   13b7c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13b80:	mov	r0, r4
   13b84:	bl	194a0 <destroy_lexer@@Base>
   13b88:	sub	sp, fp, #8
   13b8c:	pop	{r4, sl, fp, pc}
   13b90:	andeq	r0, r0, r1
   13b94:	andeq	r0, r0, r0
   13b98:	andeq	r0, r0, r1
   13b9c:	andeq	r0, r0, r0
   13ba0:	andeq	ip, r1, ip, lsr #15
   13ba4:	andeq	sl, r0, r8, ror r6
   13ba8:	nop	{0}
   13bac:	nop	{0}

00013bb0 <read_token_lessequalthan@@Base>:
   13bb0:	push	{r4, sl, fp, lr}
   13bb4:	add	fp, sp, #8
   13bb8:	sub	sp, sp, #16
   13bbc:	ldr	r0, [pc, #108]	; 13c30 <read_token_lessequalthan@@Base+0x80>
   13bc0:	add	r1, pc, #88	; 0x58
   13bc4:	add	r4, sp, #4
   13bc8:	vld1.64	{d16-d17}, [r1 :128]
   13bcc:	add	r0, pc, r0
   13bd0:	vld1.64	{d18-d19}, [r0 :128]
   13bd4:	vadd.i64	q8, q9, q8
   13bd8:	vst1.64	{d16-d17}, [r0 :128]
   13bdc:	mov	r0, r4
   13be0:	ldr	r1, [pc, #76]	; 13c34 <read_token_lessequalthan@@Base+0x84>
   13be4:	add	r1, pc, r1
   13be8:	bl	19450 <init_lexer@@Base>
   13bec:	mov	r0, r4
   13bf0:	bl	19820 <next@@Base>
   13bf4:	ldr	r1, [r0]
   13bf8:	mov	r0, #148	; 0x94
   13bfc:	mov	r2, #0
   13c00:	movw	r3, #518	; 0x206
   13c04:	str	r0, [sp]
   13c08:	mov	r0, #12
   13c0c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13c10:	mov	r0, r4
   13c14:	bl	194a0 <destroy_lexer@@Base>
   13c18:	sub	sp, fp, #8
   13c1c:	pop	{r4, sl, fp, pc}
   13c20:	andeq	r0, r0, r1
   13c24:	andeq	r0, r0, r0
   13c28:	andeq	r0, r0, r1
   13c2c:	andeq	r0, r0, r0
   13c30:	andeq	ip, r1, ip, lsr #14
   13c34:	andeq	sl, r0, fp, ror #11
   13c38:	nop	{0}
   13c3c:	nop	{0}

00013c40 <read_token_oror@@Base>:
   13c40:	push	{r4, sl, fp, lr}
   13c44:	add	fp, sp, #8
   13c48:	sub	sp, sp, #16
   13c4c:	ldr	r0, [pc, #108]	; 13cc0 <read_token_oror@@Base+0x80>
   13c50:	add	r1, pc, #88	; 0x58
   13c54:	add	r4, sp, #4
   13c58:	vld1.64	{d16-d17}, [r1 :128]
   13c5c:	add	r0, pc, r0
   13c60:	vld1.64	{d18-d19}, [r0 :128]
   13c64:	vadd.i64	q8, q9, q8
   13c68:	vst1.64	{d16-d17}, [r0 :128]
   13c6c:	mov	r0, r4
   13c70:	ldr	r1, [pc, #76]	; 13cc4 <read_token_oror@@Base+0x84>
   13c74:	add	r1, pc, r1
   13c78:	bl	19450 <init_lexer@@Base>
   13c7c:	mov	r0, r4
   13c80:	bl	19820 <next@@Base>
   13c84:	ldr	r1, [r0]
   13c88:	mov	r0, #148	; 0x94
   13c8c:	mov	r2, #0
   13c90:	movw	r3, #535	; 0x217
   13c94:	str	r0, [sp]
   13c98:	mov	r0, #12
   13c9c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13ca0:	mov	r0, r4
   13ca4:	bl	194a0 <destroy_lexer@@Base>
   13ca8:	sub	sp, fp, #8
   13cac:	pop	{r4, sl, fp, pc}
   13cb0:	andeq	r0, r0, r1
   13cb4:	andeq	r0, r0, r0
   13cb8:	andeq	r0, r0, r1
   13cbc:	andeq	r0, r0, r0
   13cc0:	andeq	ip, r1, ip, lsr #13
   13cc4:	andeq	sl, r0, lr, asr r5
   13cc8:	nop	{0}
   13ccc:	nop	{0}

00013cd0 <read_token_andand@@Base>:
   13cd0:	push	{r4, sl, fp, lr}
   13cd4:	add	fp, sp, #8
   13cd8:	sub	sp, sp, #16
   13cdc:	ldr	r0, [pc, #108]	; 13d50 <read_token_andand@@Base+0x80>
   13ce0:	add	r1, pc, #88	; 0x58
   13ce4:	add	r4, sp, #4
   13ce8:	vld1.64	{d16-d17}, [r1 :128]
   13cec:	add	r0, pc, r0
   13cf0:	vld1.64	{d18-d19}, [r0 :128]
   13cf4:	vadd.i64	q8, q9, q8
   13cf8:	vst1.64	{d16-d17}, [r0 :128]
   13cfc:	mov	r0, r4
   13d00:	ldr	r1, [pc, #76]	; 13d54 <read_token_andand@@Base+0x84>
   13d04:	add	r1, pc, r1
   13d08:	bl	19450 <init_lexer@@Base>
   13d0c:	mov	r0, r4
   13d10:	bl	19820 <next@@Base>
   13d14:	ldr	r1, [r0]
   13d18:	mov	r0, #148	; 0x94
   13d1c:	mov	r2, #0
   13d20:	mov	r3, #552	; 0x228
   13d24:	str	r0, [sp]
   13d28:	mov	r0, #12
   13d2c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13d30:	mov	r0, r4
   13d34:	bl	194a0 <destroy_lexer@@Base>
   13d38:	sub	sp, fp, #8
   13d3c:	pop	{r4, sl, fp, pc}
   13d40:	andeq	r0, r0, r1
   13d44:	andeq	r0, r0, r0
   13d48:	andeq	r0, r0, r1
   13d4c:	andeq	r0, r0, r0
   13d50:	andeq	ip, r1, ip, lsr #12
   13d54:	ldrdeq	sl, [r0], -r1
   13d58:	nop	{0}
   13d5c:	nop	{0}

00013d60 <read_token_greaterequalthan@@Base>:
   13d60:	push	{r4, sl, fp, lr}
   13d64:	add	fp, sp, #8
   13d68:	sub	sp, sp, #16
   13d6c:	ldr	r0, [pc, #108]	; 13de0 <read_token_greaterequalthan@@Base+0x80>
   13d70:	add	r1, pc, #88	; 0x58
   13d74:	add	r4, sp, #4
   13d78:	vld1.64	{d16-d17}, [r1 :128]
   13d7c:	add	r0, pc, r0
   13d80:	vld1.64	{d18-d19}, [r0 :128]
   13d84:	vadd.i64	q8, q9, q8
   13d88:	vst1.64	{d16-d17}, [r0 :128]
   13d8c:	mov	r0, r4
   13d90:	ldr	r1, [pc, #76]	; 13de4 <read_token_greaterequalthan@@Base+0x84>
   13d94:	add	r1, pc, r1
   13d98:	bl	19450 <init_lexer@@Base>
   13d9c:	mov	r0, r4
   13da0:	bl	19820 <next@@Base>
   13da4:	ldr	r1, [r0]
   13da8:	mov	r0, #148	; 0x94
   13dac:	mov	r2, #0
   13db0:	movw	r3, #569	; 0x239
   13db4:	str	r0, [sp]
   13db8:	mov	r0, #12
   13dbc:	bl	1598c <UnityAssertEqualNumber@@Base>
   13dc0:	mov	r0, r4
   13dc4:	bl	194a0 <destroy_lexer@@Base>
   13dc8:	sub	sp, fp, #8
   13dcc:	pop	{r4, sl, fp, pc}
   13dd0:	andeq	r0, r0, r1
   13dd4:	andeq	r0, r0, r0
   13dd8:	andeq	r0, r0, r1
   13ddc:	andeq	r0, r0, r0
   13de0:	andeq	ip, r1, ip, lsr #11
   13de4:	andeq	sl, r0, r4, asr #8
   13de8:	nop	{0}
   13dec:	nop	{0}

00013df0 <read_token_lessthan@@Base>:
   13df0:	push	{r4, sl, fp, lr}
   13df4:	add	fp, sp, #8
   13df8:	sub	sp, sp, #16
   13dfc:	ldr	r0, [pc, #108]	; 13e70 <read_token_lessthan@@Base+0x80>
   13e00:	add	r1, pc, #88	; 0x58
   13e04:	add	r4, sp, #4
   13e08:	vld1.64	{d16-d17}, [r1 :128]
   13e0c:	add	r0, pc, r0
   13e10:	vld1.64	{d18-d19}, [r0 :128]
   13e14:	vadd.i64	q8, q9, q8
   13e18:	vst1.64	{d16-d17}, [r0 :128]
   13e1c:	mov	r0, r4
   13e20:	ldr	r1, [pc, #76]	; 13e74 <read_token_lessthan@@Base+0x84>
   13e24:	add	r1, pc, r1
   13e28:	bl	19450 <init_lexer@@Base>
   13e2c:	mov	r0, r4
   13e30:	bl	19820 <next@@Base>
   13e34:	ldr	r1, [r0]
   13e38:	mov	r0, #148	; 0x94
   13e3c:	mov	r2, #0
   13e40:	movw	r3, #586	; 0x24a
   13e44:	str	r0, [sp]
   13e48:	mov	r0, #12
   13e4c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13e50:	mov	r0, r4
   13e54:	bl	194a0 <destroy_lexer@@Base>
   13e58:	sub	sp, fp, #8
   13e5c:	pop	{r4, sl, fp, pc}
   13e60:	andeq	r0, r0, r1
   13e64:	andeq	r0, r0, r0
   13e68:	andeq	r0, r0, r1
   13e6c:	andeq	r0, r0, r0
   13e70:	andeq	ip, r1, ip, lsr #10
   13e74:			; <UNDEFINED> instruction: 0x0000a3b7
   13e78:	nop	{0}
   13e7c:	nop	{0}

00013e80 <read_token_greaterthan@@Base>:
   13e80:	push	{r4, sl, fp, lr}
   13e84:	add	fp, sp, #8
   13e88:	sub	sp, sp, #16
   13e8c:	ldr	r0, [pc, #108]	; 13f00 <read_token_greaterthan@@Base+0x80>
   13e90:	add	r1, pc, #88	; 0x58
   13e94:	add	r4, sp, #4
   13e98:	vld1.64	{d16-d17}, [r1 :128]
   13e9c:	add	r0, pc, r0
   13ea0:	vld1.64	{d18-d19}, [r0 :128]
   13ea4:	vadd.i64	q8, q9, q8
   13ea8:	vst1.64	{d16-d17}, [r0 :128]
   13eac:	mov	r0, r4
   13eb0:	ldr	r1, [pc, #76]	; 13f04 <read_token_greaterthan@@Base+0x84>
   13eb4:	add	r1, pc, r1
   13eb8:	bl	19450 <init_lexer@@Base>
   13ebc:	mov	r0, r4
   13ec0:	bl	19820 <next@@Base>
   13ec4:	ldr	r1, [r0]
   13ec8:	mov	r0, #148	; 0x94
   13ecc:	mov	r2, #0
   13ed0:	movw	r3, #603	; 0x25b
   13ed4:	str	r0, [sp]
   13ed8:	mov	r0, #12
   13edc:	bl	1598c <UnityAssertEqualNumber@@Base>
   13ee0:	mov	r0, r4
   13ee4:	bl	194a0 <destroy_lexer@@Base>
   13ee8:	sub	sp, fp, #8
   13eec:	pop	{r4, sl, fp, pc}
   13ef0:	andeq	r0, r0, r1
   13ef4:	andeq	r0, r0, r0
   13ef8:	andeq	r0, r0, r1
   13efc:	andeq	r0, r0, r0
   13f00:	andeq	ip, r1, ip, lsr #9
   13f04:	andeq	sl, r0, r9, lsr #6
   13f08:	nop	{0}
   13f0c:	nop	{0}

00013f10 <read_token_not@@Base>:
   13f10:	push	{r4, sl, fp, lr}
   13f14:	add	fp, sp, #8
   13f18:	sub	sp, sp, #16
   13f1c:	ldr	r0, [pc, #108]	; 13f90 <read_token_not@@Base+0x80>
   13f20:	add	r1, pc, #88	; 0x58
   13f24:	add	r4, sp, #4
   13f28:	vld1.64	{d16-d17}, [r1 :128]
   13f2c:	add	r0, pc, r0
   13f30:	vld1.64	{d18-d19}, [r0 :128]
   13f34:	vadd.i64	q8, q9, q8
   13f38:	vst1.64	{d16-d17}, [r0 :128]
   13f3c:	mov	r0, r4
   13f40:	ldr	r1, [pc, #76]	; 13f94 <read_token_not@@Base+0x84>
   13f44:	add	r1, pc, r1
   13f48:	bl	19450 <init_lexer@@Base>
   13f4c:	mov	r0, r4
   13f50:	bl	19820 <next@@Base>
   13f54:	ldr	r1, [r0]
   13f58:	mov	r0, #148	; 0x94
   13f5c:	mov	r2, #0
   13f60:	mov	r3, #620	; 0x26c
   13f64:	str	r0, [sp]
   13f68:	mov	r0, #12
   13f6c:	bl	1598c <UnityAssertEqualNumber@@Base>
   13f70:	mov	r0, r4
   13f74:	bl	194a0 <destroy_lexer@@Base>
   13f78:	sub	sp, fp, #8
   13f7c:	pop	{r4, sl, fp, pc}
   13f80:	andeq	r0, r0, r1
   13f84:	andeq	r0, r0, r0
   13f88:	andeq	r0, r0, r1
   13f8c:	andeq	r0, r0, r0
   13f90:	andeq	ip, r1, ip, lsr #8
   13f94:	muleq	r0, fp, r2
   13f98:	nop	{0}
   13f9c:	nop	{0}

00013fa0 <main@@Base>:
   13fa0:	push	{fp, lr}
   13fa4:	mov	fp, sp
   13fa8:	ldr	r0, [pc, #704]	; 14270 <main@@Base+0x2d0>
   13fac:	add	r1, pc, #684	; 0x2ac
   13fb0:	vld1.64	{d16-d17}, [r1 :128]
   13fb4:	add	r0, pc, r0
   13fb8:	vld1.64	{d18-d19}, [r0 :128]
   13fbc:	vadd.i64	q8, q9, q8
   13fc0:	vst1.64	{d16-d17}, [r0 :128]
   13fc4:	ldr	r0, [pc, #680]	; 14274 <main@@Base+0x2d4>
   13fc8:	add	r0, pc, r0
   13fcc:	bl	18220 <UnityBegin@@Base>
   13fd0:	ldr	r0, [pc, #672]	; 14278 <main@@Base+0x2d8>
   13fd4:	movw	r2, #629	; 0x275
   13fd8:	ldr	r0, [pc, r0]
   13fdc:	ldr	r1, [pc, #664]	; 1427c <main@@Base+0x2dc>
   13fe0:	add	r1, pc, r1
   13fe4:	bl	18114 <UnityDefaultTestRun@@Base>
   13fe8:	ldr	r0, [pc, #656]	; 14280 <main@@Base+0x2e0>
   13fec:	movw	r2, #630	; 0x276
   13ff0:	ldr	r0, [pc, r0]
   13ff4:	ldr	r1, [pc, #648]	; 14284 <main@@Base+0x2e4>
   13ff8:	add	r1, pc, r1
   13ffc:	bl	18114 <UnityDefaultTestRun@@Base>
   14000:	ldr	r0, [pc, #640]	; 14288 <main@@Base+0x2e8>
   14004:	movw	r2, #631	; 0x277
   14008:	ldr	r0, [pc, r0]
   1400c:	ldr	r1, [pc, #632]	; 1428c <main@@Base+0x2ec>
   14010:	add	r1, pc, r1
   14014:	bl	18114 <UnityDefaultTestRun@@Base>
   14018:	ldr	r0, [pc, #624]	; 14290 <main@@Base+0x2f0>
   1401c:	mov	r2, #632	; 0x278
   14020:	ldr	r0, [pc, r0]
   14024:	ldr	r1, [pc, #616]	; 14294 <main@@Base+0x2f4>
   14028:	add	r1, pc, r1
   1402c:	bl	18114 <UnityDefaultTestRun@@Base>
   14030:	ldr	r0, [pc, #608]	; 14298 <main@@Base+0x2f8>
   14034:	movw	r2, #633	; 0x279
   14038:	ldr	r0, [pc, r0]
   1403c:	ldr	r1, [pc, #600]	; 1429c <main@@Base+0x2fc>
   14040:	add	r1, pc, r1
   14044:	bl	18114 <UnityDefaultTestRun@@Base>
   14048:	ldr	r0, [pc, #592]	; 142a0 <main@@Base+0x300>
   1404c:	movw	r2, #634	; 0x27a
   14050:	ldr	r0, [pc, r0]
   14054:	ldr	r1, [pc, #584]	; 142a4 <main@@Base+0x304>
   14058:	add	r1, pc, r1
   1405c:	bl	18114 <UnityDefaultTestRun@@Base>
   14060:	ldr	r0, [pc, #576]	; 142a8 <main@@Base+0x308>
   14064:	movw	r2, #635	; 0x27b
   14068:	ldr	r0, [pc, r0]
   1406c:	ldr	r1, [pc, #568]	; 142ac <main@@Base+0x30c>
   14070:	add	r1, pc, r1
   14074:	bl	18114 <UnityDefaultTestRun@@Base>
   14078:	ldr	r0, [pc, #560]	; 142b0 <main@@Base+0x310>
   1407c:	mov	r2, #636	; 0x27c
   14080:	ldr	r0, [pc, r0]
   14084:	ldr	r1, [pc, #552]	; 142b4 <main@@Base+0x314>
   14088:	add	r1, pc, r1
   1408c:	bl	18114 <UnityDefaultTestRun@@Base>
   14090:	ldr	r0, [pc, #544]	; 142b8 <main@@Base+0x318>
   14094:	movw	r2, #637	; 0x27d
   14098:	ldr	r0, [pc, r0]
   1409c:	ldr	r1, [pc, #536]	; 142bc <main@@Base+0x31c>
   140a0:	add	r1, pc, r1
   140a4:	bl	18114 <UnityDefaultTestRun@@Base>
   140a8:	ldr	r0, [pc, #528]	; 142c0 <main@@Base+0x320>
   140ac:	movw	r2, #638	; 0x27e
   140b0:	ldr	r0, [pc, r0]
   140b4:	ldr	r1, [pc, #520]	; 142c4 <main@@Base+0x324>
   140b8:	add	r1, pc, r1
   140bc:	bl	18114 <UnityDefaultTestRun@@Base>
   140c0:	ldr	r0, [pc, #512]	; 142c8 <main@@Base+0x328>
   140c4:	movw	r2, #639	; 0x27f
   140c8:	ldr	r0, [pc, r0]
   140cc:	ldr	r1, [pc, #504]	; 142cc <main@@Base+0x32c>
   140d0:	add	r1, pc, r1
   140d4:	bl	18114 <UnityDefaultTestRun@@Base>
   140d8:	ldr	r0, [pc, #496]	; 142d0 <main@@Base+0x330>
   140dc:	mov	r2, #640	; 0x280
   140e0:	ldr	r0, [pc, r0]
   140e4:	ldr	r1, [pc, #488]	; 142d4 <main@@Base+0x334>
   140e8:	add	r1, pc, r1
   140ec:	bl	18114 <UnityDefaultTestRun@@Base>
   140f0:	ldr	r0, [pc, #480]	; 142d8 <main@@Base+0x338>
   140f4:	movw	r2, #641	; 0x281
   140f8:	ldr	r0, [pc, r0]
   140fc:	ldr	r1, [pc, #472]	; 142dc <main@@Base+0x33c>
   14100:	add	r1, pc, r1
   14104:	bl	18114 <UnityDefaultTestRun@@Base>
   14108:	ldr	r0, [pc, #464]	; 142e0 <main@@Base+0x340>
   1410c:	movw	r2, #642	; 0x282
   14110:	ldr	r0, [pc, r0]
   14114:	ldr	r1, [pc, #456]	; 142e4 <main@@Base+0x344>
   14118:	add	r1, pc, r1
   1411c:	bl	18114 <UnityDefaultTestRun@@Base>
   14120:	ldr	r0, [pc, #448]	; 142e8 <main@@Base+0x348>
   14124:	movw	r2, #643	; 0x283
   14128:	ldr	r0, [pc, r0]
   1412c:	ldr	r1, [pc, #440]	; 142ec <main@@Base+0x34c>
   14130:	add	r1, pc, r1
   14134:	bl	18114 <UnityDefaultTestRun@@Base>
   14138:	ldr	r0, [pc, #432]	; 142f0 <main@@Base+0x350>
   1413c:	mov	r2, #644	; 0x284
   14140:	ldr	r0, [pc, r0]
   14144:	ldr	r1, [pc, #424]	; 142f4 <main@@Base+0x354>
   14148:	add	r1, pc, r1
   1414c:	bl	18114 <UnityDefaultTestRun@@Base>
   14150:	ldr	r0, [pc, #416]	; 142f8 <main@@Base+0x358>
   14154:	movw	r2, #645	; 0x285
   14158:	ldr	r0, [pc, r0]
   1415c:	ldr	r1, [pc, #408]	; 142fc <main@@Base+0x35c>
   14160:	add	r1, pc, r1
   14164:	bl	18114 <UnityDefaultTestRun@@Base>
   14168:	ldr	r0, [pc, #400]	; 14300 <main@@Base+0x360>
   1416c:	movw	r2, #646	; 0x286
   14170:	ldr	r0, [pc, r0]
   14174:	ldr	r1, [pc, #392]	; 14304 <main@@Base+0x364>
   14178:	add	r1, pc, r1
   1417c:	bl	18114 <UnityDefaultTestRun@@Base>
   14180:	ldr	r0, [pc, #384]	; 14308 <main@@Base+0x368>
   14184:	movw	r2, #647	; 0x287
   14188:	ldr	r0, [pc, r0]
   1418c:	ldr	r1, [pc, #376]	; 1430c <main@@Base+0x36c>
   14190:	add	r1, pc, r1
   14194:	bl	18114 <UnityDefaultTestRun@@Base>
   14198:	ldr	r0, [pc, #368]	; 14310 <main@@Base+0x370>
   1419c:	mov	r2, #648	; 0x288
   141a0:	ldr	r0, [pc, r0]
   141a4:	ldr	r1, [pc, #360]	; 14314 <main@@Base+0x374>
   141a8:	add	r1, pc, r1
   141ac:	bl	18114 <UnityDefaultTestRun@@Base>
   141b0:	ldr	r0, [pc, #352]	; 14318 <main@@Base+0x378>
   141b4:	movw	r2, #649	; 0x289
   141b8:	ldr	r0, [pc, r0]
   141bc:	ldr	r1, [pc, #344]	; 1431c <main@@Base+0x37c>
   141c0:	add	r1, pc, r1
   141c4:	bl	18114 <UnityDefaultTestRun@@Base>
   141c8:	ldr	r0, [pc, #336]	; 14320 <main@@Base+0x380>
   141cc:	movw	r2, #650	; 0x28a
   141d0:	ldr	r0, [pc, r0]
   141d4:	ldr	r1, [pc, #328]	; 14324 <main@@Base+0x384>
   141d8:	add	r1, pc, r1
   141dc:	bl	18114 <UnityDefaultTestRun@@Base>
   141e0:	ldr	r0, [pc, #320]	; 14328 <main@@Base+0x388>
   141e4:	movw	r2, #651	; 0x28b
   141e8:	ldr	r0, [pc, r0]
   141ec:	ldr	r1, [pc, #312]	; 1432c <main@@Base+0x38c>
   141f0:	add	r1, pc, r1
   141f4:	bl	18114 <UnityDefaultTestRun@@Base>
   141f8:	ldr	r0, [pc, #304]	; 14330 <main@@Base+0x390>
   141fc:	mov	r2, #652	; 0x28c
   14200:	ldr	r0, [pc, r0]
   14204:	ldr	r1, [pc, #296]	; 14334 <main@@Base+0x394>
   14208:	add	r1, pc, r1
   1420c:	bl	18114 <UnityDefaultTestRun@@Base>
   14210:	ldr	r0, [pc, #288]	; 14338 <main@@Base+0x398>
   14214:	movw	r2, #653	; 0x28d
   14218:	ldr	r0, [pc, r0]
   1421c:	ldr	r1, [pc, #280]	; 1433c <main@@Base+0x39c>
   14220:	add	r1, pc, r1
   14224:	bl	18114 <UnityDefaultTestRun@@Base>
   14228:	ldr	r0, [pc, #272]	; 14340 <main@@Base+0x3a0>
   1422c:	movw	r2, #654	; 0x28e
   14230:	ldr	r0, [pc, r0]
   14234:	ldr	r1, [pc, #264]	; 14344 <main@@Base+0x3a4>
   14238:	add	r1, pc, r1
   1423c:	bl	18114 <UnityDefaultTestRun@@Base>
   14240:	ldr	r0, [pc, #256]	; 14348 <main@@Base+0x3a8>
   14244:	movw	r2, #655	; 0x28f
   14248:	ldr	r0, [pc, r0]
   1424c:	ldr	r1, [pc, #248]	; 1434c <main@@Base+0x3ac>
   14250:	add	r1, pc, r1
   14254:	bl	18114 <UnityDefaultTestRun@@Base>
   14258:	pop	{fp, lr}
   1425c:	b	18290 <UnityEnd@@Base>
   14260:	andeq	r0, r0, r1
   14264:	andeq	r0, r0, r0
   14268:	andeq	r0, r0, r1
   1426c:	andeq	r0, r0, r0
   14270:			; <UNDEFINED> instruction: 0x0001c3b4
   14274:	andeq	sl, r0, r9, lsl r2
   14278:	muleq	r1, r8, r1
   1427c:	ldrdeq	sl, [r0], -r8
   14280:	muleq	r1, r0, r1
   14284:	ldrdeq	sl, [r0], -r6
   14288:	andeq	ip, r1, r8, asr #2
   1428c:	ldrdeq	sl, [r0], -r2
   14290:	andeq	ip, r1, ip, lsl r1
   14294:	ldrdeq	sl, [r0], -r3
   14298:	andeq	ip, r1, r0, lsr r1
   1429c:	ldrdeq	sl, [r0], -r4
   142a0:	andeq	ip, r1, r0, lsl #1
   142a4:	andeq	sl, r0, ip, asr #5
   142a8:	muleq	r1, r8, r0
   142ac:	andeq	sl, r0, r1, asr #5
   142b0:	andeq	ip, r1, ip, lsr #1
   142b4:			; <UNDEFINED> instruction: 0x0000a2bd
   142b8:	andeq	ip, r1, r0, ror #1
   142bc:			; <UNDEFINED> instruction: 0x0000a2ba
   142c0:	andeq	ip, r1, r4, rrx
   142c4:			; <UNDEFINED> instruction: 0x0000a2b6
   142c8:	andeq	ip, r1, ip, ror r0
   142cc:	andeq	sl, r0, lr, lsr #5
   142d0:	ldrdeq	fp, [r1], -r0
   142d4:	andeq	sl, r0, r6, lsr #5
   142d8:	andeq	ip, r1, r4, ror r0
   142dc:	muleq	r0, lr, r2
   142e0:	andeq	ip, r1, r0, lsr r0
   142e4:	muleq	r0, r6, r2
   142e8:	ldrdeq	fp, [r1], -r4
   142ec:	muleq	r0, r0, r2
   142f0:	andeq	fp, r1, r4, ror pc
   142f4:	andeq	sl, r0, sp, lsl #5
   142f8:			; <UNDEFINED> instruction: 0x0001bfb0
   142fc:	andeq	sl, r0, r4, lsl #5
   14300:	andeq	fp, r1, ip, ror #31
   14304:	andeq	sl, r0, sl, ror r2
   14308:	strdeq	fp, [r1], -ip
   1430c:	andeq	sl, r0, r2, ror r2
   14310:	ldrdeq	fp, [r1], -ip
   14314:	andeq	sl, r0, r0, ror r2
   14318:	strdeq	fp, [r1], -r0
   1431c:	andeq	sl, r0, ip, ror #4
   14320:	andeq	fp, r1, r8, asr #30
   14324:	andeq	sl, r0, pc, lsl #5
   14328:	andeq	fp, r1, r0, ror #29
   1432c:	andeq	sl, r0, r5, asr r2
   14330:	ldrdeq	fp, [r1], -r4
   14334:	andeq	sl, r0, sp, asr #4
   14338:	andeq	fp, r1, r8, asr #30
   1433c:	andeq	sl, r0, r3, ror #4
   14340:	andeq	fp, r1, r0, asr #29
   14344:	andeq	sl, r0, pc, asr r2
   14348:	andeq	fp, r1, r8, ror #29
   1434c:	andeq	sl, r0, lr, asr r2
   14350:	push	{r4, r5, r6, lr}
   14354:	sub	sp, sp, #8
   14358:	ldr	r0, [pc, #112]	; 143d0 <main@@Base+0x430>
   1435c:	ldr	r1, [pc, #112]	; 143d4 <main@@Base+0x434>
   14360:	movw	r2, #13578	; 0x350a
   14364:	movt	r2, #46656	; 0xb640
   14368:	add	r0, pc, r0
   1436c:	add	r1, pc, r1
   14370:	bl	1b0e0 <next@@Base+0x18c0>
   14374:	ldr	r0, [pc, #92]	; 143d8 <main@@Base+0x438>
   14378:	ldr	r6, [pc, #92]	; 143dc <main@@Base+0x43c>
   1437c:	mov	r5, #0
   14380:	add	r0, pc, r0
   14384:	add	r6, pc, r6
   14388:	add	r4, r0, #4
   1438c:	mov	r3, r6
   14390:	ldr	r0, [r3, r5]!
   14394:	ldr	r1, [r3, #16]
   14398:	str	r1, [sp]
   1439c:	ldmib	r3, {r1, r2}
   143a0:	ldrb	r3, [r3, #12]
   143a4:	bl	1b800 <next@@Base+0x1fe0>
   143a8:	ldrd	r0, [r4, #-4]
   143ac:	bl	1c0b4 <next@@Base+0x2894>
   143b0:	add	r5, r5, #20
   143b4:	add	r4, r4, #8
   143b8:	cmp	r5, #560	; 0x230
   143bc:	bne	1438c <main@@Base+0x3ec>
   143c0:	bl	1c83c <next@@Base+0x301c>
   143c4:	add	sp, sp, #8
   143c8:	pop	{r4, r5, r6, lr}
   143cc:	b	1d5a8 <next@@Base+0x3d88>
   143d0:	ldrdeq	r9, [r0], -r2
   143d4:	andeq	r9, r0, r7, asr #30
   143d8:	andeq	fp, r1, r8, asr #5
   143dc:	muleq	r1, r4, r0
   143e0:	push	{fp, lr}
   143e4:	bl	14350 <main@@Base+0x3b0>
   143e8:	ldr	r0, [pc, #336]	; 14540 <main@@Base+0x5a0>
   143ec:	vmov.i32	q8, #0	; 0x00000000
   143f0:	add	r0, pc, r0
   143f4:	vst1.64	{d16-d17}, [r0 :128]
   143f8:	ldr	r0, [pc, #324]	; 14544 <main@@Base+0x5a4>
   143fc:	add	r0, pc, r0
   14400:	vst1.64	{d16-d17}, [r0 :128]
   14404:	ldr	r0, [pc, #316]	; 14548 <main@@Base+0x5a8>
   14408:	add	r0, pc, r0
   1440c:	vst1.64	{d16-d17}, [r0 :128]
   14410:	ldr	r0, [pc, #308]	; 1454c <main@@Base+0x5ac>
   14414:	add	r0, pc, r0
   14418:	vst1.64	{d16-d17}, [r0 :128]
   1441c:	ldr	r0, [pc, #300]	; 14550 <main@@Base+0x5b0>
   14420:	add	r0, pc, r0
   14424:	vst1.64	{d16-d17}, [r0 :128]
   14428:	ldr	r0, [pc, #292]	; 14554 <main@@Base+0x5b4>
   1442c:	add	r0, pc, r0
   14430:	vst1.64	{d16-d17}, [r0 :128]
   14434:	ldr	r0, [pc, #284]	; 14558 <main@@Base+0x5b8>
   14438:	add	r0, pc, r0
   1443c:	vst1.64	{d16-d17}, [r0 :128]
   14440:	ldr	r0, [pc, #276]	; 1455c <main@@Base+0x5bc>
   14444:	add	r0, pc, r0
   14448:	vst1.64	{d16-d17}, [r0 :128]
   1444c:	ldr	r0, [pc, #268]	; 14560 <main@@Base+0x5c0>
   14450:	add	r0, pc, r0
   14454:	vst1.64	{d16-d17}, [r0 :128]
   14458:	ldr	r0, [pc, #260]	; 14564 <main@@Base+0x5c4>
   1445c:	add	r0, pc, r0
   14460:	vst1.64	{d16-d17}, [r0 :128]
   14464:	ldr	r0, [pc, #252]	; 14568 <main@@Base+0x5c8>
   14468:	add	r0, pc, r0
   1446c:	vst1.64	{d16-d17}, [r0 :128]
   14470:	ldr	r0, [pc, #244]	; 1456c <main@@Base+0x5cc>
   14474:	add	r0, pc, r0
   14478:	vst1.64	{d16-d17}, [r0 :128]
   1447c:	ldr	r0, [pc, #236]	; 14570 <main@@Base+0x5d0>
   14480:	add	r0, pc, r0
   14484:	vst1.64	{d16-d17}, [r0 :128]
   14488:	ldr	r0, [pc, #228]	; 14574 <main@@Base+0x5d4>
   1448c:	add	r0, pc, r0
   14490:	vst1.64	{d16-d17}, [r0 :128]
   14494:	ldr	r0, [pc, #220]	; 14578 <main@@Base+0x5d8>
   14498:	add	r0, pc, r0
   1449c:	vst1.64	{d16-d17}, [r0 :128]
   144a0:	ldr	r0, [pc, #212]	; 1457c <main@@Base+0x5dc>
   144a4:	add	r0, pc, r0
   144a8:	vst1.64	{d16-d17}, [r0 :128]
   144ac:	ldr	r0, [pc, #204]	; 14580 <main@@Base+0x5e0>
   144b0:	add	r0, pc, r0
   144b4:	vst1.64	{d16-d17}, [r0 :128]
   144b8:	ldr	r0, [pc, #196]	; 14584 <main@@Base+0x5e4>
   144bc:	add	r0, pc, r0
   144c0:	vst1.64	{d16-d17}, [r0 :128]
   144c4:	ldr	r0, [pc, #188]	; 14588 <main@@Base+0x5e8>
   144c8:	add	r0, pc, r0
   144cc:	vst1.64	{d16-d17}, [r0 :128]
   144d0:	ldr	r0, [pc, #180]	; 1458c <main@@Base+0x5ec>
   144d4:	add	r0, pc, r0
   144d8:	vst1.64	{d16-d17}, [r0 :128]
   144dc:	ldr	r0, [pc, #172]	; 14590 <main@@Base+0x5f0>
   144e0:	add	r0, pc, r0
   144e4:	vst1.64	{d16-d17}, [r0 :128]
   144e8:	ldr	r0, [pc, #164]	; 14594 <main@@Base+0x5f4>
   144ec:	add	r0, pc, r0
   144f0:	vst1.64	{d16-d17}, [r0 :128]
   144f4:	ldr	r0, [pc, #156]	; 14598 <main@@Base+0x5f8>
   144f8:	add	r0, pc, r0
   144fc:	vst1.64	{d16-d17}, [r0 :128]
   14500:	ldr	r0, [pc, #148]	; 1459c <main@@Base+0x5fc>
   14504:	add	r0, pc, r0
   14508:	vst1.64	{d16-d17}, [r0 :128]
   1450c:	ldr	r0, [pc, #140]	; 145a0 <main@@Base+0x600>
   14510:	add	r0, pc, r0
   14514:	vst1.64	{d16-d17}, [r0 :128]
   14518:	ldr	r0, [pc, #132]	; 145a4 <main@@Base+0x604>
   1451c:	add	r0, pc, r0
   14520:	vst1.64	{d16-d17}, [r0 :128]
   14524:	ldr	r0, [pc, #124]	; 145a8 <main@@Base+0x608>
   14528:	add	r0, pc, r0
   1452c:	vst1.64	{d16-d17}, [r0 :128]
   14530:	ldr	r0, [pc, #116]	; 145ac <main@@Base+0x60c>
   14534:	add	r0, pc, r0
   14538:	vst1.64	{d16-d17}, [r0 :128]
   1453c:	pop	{fp, pc}
   14540:	ldrdeq	fp, [r1], -r8
   14544:			; <UNDEFINED> instruction: 0x0001bdbc
   14548:	ldrdeq	fp, [r1], -r0
   1454c:	ldrdeq	fp, [r1], -r4
   14550:	ldrdeq	fp, [r1], -r8
   14554:	ldrdeq	fp, [r1], -ip
   14558:	andeq	fp, r1, r0, ror #27
   1455c:	andeq	fp, r1, r4, ror #27
   14560:	andeq	fp, r1, r8, ror #27
   14564:	andeq	fp, r1, ip, ror #27
   14568:	strdeq	fp, [r1], -r0
   1456c:	strdeq	fp, [r1], -r4
   14570:	strdeq	fp, [r1], -r8
   14574:	strdeq	fp, [r1], -ip
   14578:	andeq	fp, r1, r0, lsl #28
   1457c:	andeq	fp, r1, r4, lsl #28
   14580:	andeq	fp, r1, r8, lsl #28
   14584:	andeq	fp, r1, ip, lsl #28
   14588:	andeq	fp, r1, r0, lsl lr
   1458c:	andeq	fp, r1, r4, lsl lr
   14590:	andeq	fp, r1, r8, lsl lr
   14594:	andeq	fp, r1, ip, lsl lr
   14598:	andeq	fp, r1, r0, lsr #28
   1459c:	andeq	fp, r1, r4, lsr #28
   145a0:	andeq	fp, r1, r8, lsr #28
   145a4:	andeq	fp, r1, ip, lsr #28
   145a8:	andeq	fp, r1, r0, lsr lr
   145ac:	andeq	fp, r1, r4, lsr lr
   145b0:	ldr	r0, [pc, #12]	; 145c4 <main@@Base+0x624>
   145b4:	ldr	r1, [pc, #12]	; 145c8 <main@@Base+0x628>
   145b8:	add	r0, pc, r0
   145bc:	add	r1, pc, r1
   145c0:	b	1da5c <__gcov_flush@@Base+0xb8>
   145c4:			; <UNDEFINED> instruction: 0xfffffd90
   145c8:			; <UNDEFINED> instruction: 0xfffffe1c
   145cc:	andeq	r0, r0, r0

000145d0 <UnityPrint@@Base>:
   145d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145d4:	add	fp, sp, #28
   145d8:	sub	sp, sp, #4
   145dc:	vpush	{d8-d9}
   145e0:	sub	sp, sp, #8
   145e4:	ldr	r4, [pc, #612]	; 14850 <UnityPrint@@Base+0x280>
   145e8:	ldr	r1, [pc, #612]	; 14854 <UnityPrint@@Base+0x284>
   145ec:	ldr	r1, [pc, r1]
   145f0:	add	r4, pc, r4
   145f4:	adds	r1, r1, #1
   145f8:	str	r1, [r4]
   145fc:	ldr	r1, [r4, #4]
   14600:	adc	r1, r1, #0
   14604:	cmp	r0, #0
   14608:	str	r1, [r4, #4]
   1460c:	beq	147fc <UnityPrint@@Base+0x22c>
   14610:	ldrd	r2, [r4, #8]
   14614:	adds	r2, r2, #1
   14618:	adc	r3, r3, #0
   1461c:	strd	r2, [r4, #8]
   14620:	add	r2, r4, #32
   14624:	ldrb	r1, [r0]
   14628:	cmp	r1, #0
   1462c:	beq	14808 <UnityPrint@@Base+0x238>
   14630:	str	r2, [sp]
   14634:	add	r6, r0, #1
   14638:	add	r7, r4, #48	; 0x30
   1463c:	add	r9, r4, #64	; 0x40
   14640:	add	r0, r4, #72	; 0x48
   14644:	ldr	r5, [pc, #524]	; 14858 <UnityPrint@@Base+0x288>
   14648:	ldr	sl, [pc, #524]	; 1485c <UnityPrint@@Base+0x28c>
   1464c:	ldr	sl, [pc, sl]
   14650:	add	r5, pc, r5
   14654:	str	r0, [sp, #4]
   14658:	b	146d4 <UnityPrint@@Base+0x104>
   1465c:	add	r0, pc, #476	; 0x1dc
   14660:	vld1.64	{d16-d17}, [r5 :128]
   14664:	vld1.64	{d8-d9}, [r0 :128]
   14668:	ldrd	r0, [r4, #80]	; 0x50
   1466c:	adds	r0, r0, #1
   14670:	adc	r1, r1, #0
   14674:	vadd.i64	q8, q8, q4
   14678:	strd	r0, [r4, #80]	; 0x50
   1467c:	ldr	r1, [sl]
   14680:	mov	r0, #92	; 0x5c
   14684:	vst1.64	{d16-d17}, [r5 :128]
   14688:	bl	127d8 <putc@plt>
   1468c:	vld1.64	{d16-d17}, [r5 :128]
   14690:	ldr	r1, [sl]
   14694:	mov	r0, #114	; 0x72
   14698:	vadd.i64	q8, q8, q4
   1469c:	vst1.64	{d16-d17}, [r5 :128]
   146a0:	bl	127d8 <putc@plt>
   146a4:	add	r0, r4, #96	; 0x60
   146a8:	ldrd	r2, [r0]
   146ac:	adds	r2, r2, #1
   146b0:	adc	r3, r3, #0
   146b4:	strd	r2, [r0]
   146b8:	ldrd	r0, [r4, #136]	; 0x88
   146bc:	adds	r0, r0, #1
   146c0:	adc	r1, r1, #0
   146c4:	strd	r0, [r4, #136]	; 0x88
   146c8:	ldrb	r1, [r6], #1
   146cc:	cmp	r1, #0
   146d0:	beq	14804 <UnityPrint@@Base+0x234>
   146d4:	ldr	r0, [r4, #24]
   146d8:	ldr	r3, [r4, #28]
   146dc:	adds	r0, r0, #1
   146e0:	str	r0, [r4, #24]
   146e4:	uxtb	r0, r1
   146e8:	adc	r3, r3, #0
   146ec:	mov	r1, r7
   146f0:	str	r3, [r4, #28]
   146f4:	cmp	r0, #126	; 0x7e
   146f8:	bhi	1474c <UnityPrint@@Base+0x17c>
   146fc:	ldrd	r2, [r4, #40]	; 0x28
   14700:	mov	r1, r9
   14704:	adds	r2, r2, #1
   14708:	adc	r3, r3, #0
   1470c:	cmp	r0, #32
   14710:	strd	r2, [r4, #40]	; 0x28
   14714:	bcc	1474c <UnityPrint@@Base+0x17c>
   14718:	add	r1, pc, #288	; 0x120
   1471c:	vld1.64	{d18-d19}, [r5 :128]
   14720:	ldrd	r2, [r4, #56]	; 0x38
   14724:	vld1.64	{d16-d17}, [r1 :128]
   14728:	ldr	r1, [sl]
   1472c:	adds	r2, r2, #1
   14730:	adc	r3, r3, #0
   14734:	vadd.i64	q8, q9, q8
   14738:	strd	r2, [r4, #56]	; 0x38
   1473c:	vst1.64	{d16-d17}, [r5 :128]
   14740:	bl	127d8 <putc@plt>
   14744:	ldr	r0, [sp, #4]
   14748:	b	146a8 <UnityPrint@@Base+0xd8>
   1474c:	ldm	r1, {r0, r3}
   14750:	adds	r0, r0, #1
   14754:	adc	r3, r3, #0
   14758:	stm	r1, {r0, r3}
   1475c:	ldrb	r8, [r6, #-1]
   14760:	cmp	r8, #13
   14764:	beq	1465c <UnityPrint@@Base+0x8c>
   14768:	add	r0, pc, #208	; 0xd0
   1476c:	vld1.64	{d18-d19}, [r5 :128]
   14770:	vld1.64	{d16-d17}, [r0 :128]
   14774:	ldrd	r0, [r4, #88]	; 0x58
   14778:	adds	r0, r0, #1
   1477c:	adc	r1, r1, #0
   14780:	vadd.i64	q8, q9, q8
   14784:	strd	r0, [r4, #88]	; 0x58
   14788:	ldr	r1, [sl]
   1478c:	mov	r0, #92	; 0x5c
   14790:	vst1.64	{d16-d17}, [r5 :128]
   14794:	bl	127d8 <putc@plt>
   14798:	cmp	r8, #10
   1479c:	bne	147d8 <UnityPrint@@Base+0x208>
   147a0:	add	r0, pc, #152	; 0x98
   147a4:	vld1.64	{d18-d19}, [r5 :128]
   147a8:	vld1.64	{d16-d17}, [r0 :128]
   147ac:	ldrd	r0, [r4, #104]	; 0x68
   147b0:	adds	r0, r0, #1
   147b4:	adc	r1, r1, #0
   147b8:	vadd.i64	q8, q9, q8
   147bc:	strd	r0, [r4, #104]	; 0x68
   147c0:	ldr	r1, [sl]
   147c4:	mov	r0, #110	; 0x6e
   147c8:	vst1.64	{d16-d17}, [r5 :128]
   147cc:	bl	127d8 <putc@plt>
   147d0:	add	r0, r4, #120	; 0x78
   147d4:	b	146a8 <UnityPrint@@Base+0xd8>
   147d8:	ldrd	r0, [r4, #112]	; 0x70
   147dc:	adds	r0, r0, #1
   147e0:	adc	r1, r1, #0
   147e4:	strd	r0, [r4, #112]	; 0x70
   147e8:	mov	r1, #2
   147ec:	ldrb	r0, [r6, #-1]
   147f0:	bl	14860 <UnityPrintNumberHex@@Base>
   147f4:	add	r0, r4, #128	; 0x80
   147f8:	b	146a8 <UnityPrint@@Base+0xd8>
   147fc:	add	r2, r4, #16
   14800:	b	14808 <UnityPrint@@Base+0x238>
   14804:	ldr	r2, [sp]
   14808:	ldrd	r0, [r2]
   1480c:	adds	r0, r0, #1
   14810:	adc	r1, r1, #0
   14814:	strd	r0, [r2]
   14818:	ldrd	r0, [r4, #144]	; 0x90
   1481c:	adds	r0, r0, #1
   14820:	adc	r1, r1, #0
   14824:	strd	r0, [r4, #144]	; 0x90
   14828:	sub	sp, fp, #48	; 0x30
   1482c:	vpop	{d8-d9}
   14830:	add	sp, sp, #4
   14834:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14838:	nop	{0}
   1483c:	nop	{0}
   14840:	andeq	r0, r0, r1
   14844:	andeq	r0, r0, r0
   14848:	andeq	r0, r0, r1
   1484c:	andeq	r0, r0, r0
   14850:	andeq	fp, r1, r8, lsl #27
   14854:	andeq	fp, r1, ip, lsl #27
   14858:	andeq	fp, r1, r8, asr #27
   1485c:	andeq	fp, r1, r0, lsl #22

00014860 <UnityPrintNumberHex@@Base>:
   14860:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14864:	add	fp, sp, #28
   14868:	sub	sp, sp, #4
   1486c:	vpush	{d8-d9}
   14870:	ldr	r7, [pc, #392]	; 14a00 <UnityPrintNumberHex@@Base+0x1a0>
   14874:	mov	r5, r0
   14878:	add	r0, pc, #368	; 0x170
   1487c:	mov	r4, r1
   14880:	vld1.64	{d8-d9}, [r0 :128]
   14884:	add	r7, pc, r7
   14888:	vld1.64	{d16-d17}, [r7 :128]
   1488c:	ldr	r6, [pc, #368]	; 14a04 <UnityPrintNumberHex@@Base+0x1a4>
   14890:	ldr	r0, [pc, #368]	; 14a08 <UnityPrintNumberHex@@Base+0x1a8>
   14894:	ldr	r0, [pc, r0]
   14898:	add	r6, pc, r6
   1489c:	vadd.i64	q8, q8, q4
   148a0:	adds	r0, r0, #1
   148a4:	vst1.64	{d16-d17}, [r7 :128]
   148a8:	str	r0, [r6]
   148ac:	ldr	r0, [r6, #4]
   148b0:	adc	r0, r0, #0
   148b4:	str	r0, [r6, #4]
   148b8:	mov	r0, #48	; 0x30
   148bc:	ldr	r8, [pc, #328]	; 14a0c <UnityPrintNumberHex@@Base+0x1ac>
   148c0:	ldr	r8, [pc, r8]
   148c4:	ldr	r1, [r8]
   148c8:	bl	127d8 <putc@plt>
   148cc:	vld1.64	{d16-d17}, [r7 :128]
   148d0:	ldr	r1, [r8]
   148d4:	mov	r0, #120	; 0x78
   148d8:	vadd.i64	q8, q8, q4
   148dc:	vst1.64	{d16-d17}, [r7 :128]
   148e0:	bl	127d8 <putc@plt>
   148e4:	ldrd	r0, [r6, #8]
   148e8:	adds	r0, r0, #1
   148ec:	adc	r1, r1, #0
   148f0:	cmp	r4, #0
   148f4:	strd	r0, [r6, #8]
   148f8:	beq	149b4 <UnityPrintNumberHex@@Base+0x154>
   148fc:	add	sl, r6, #48	; 0x30
   14900:	add	r9, r6, #56	; 0x38
   14904:	b	1496c <UnityPrintNumberHex@@Base+0x10c>
   14908:	ldrd	r2, [r6, #40]	; 0x28
   1490c:	add	r0, r0, #55	; 0x37
   14910:	mov	r8, r9
   14914:	adds	r2, r2, #1
   14918:	adc	r3, r3, #0
   1491c:	strd	r2, [r6, #40]	; 0x28
   14920:	add	r1, pc, #200	; 0xc8
   14924:	vld1.64	{d18-d19}, [r7 :128]
   14928:	vld1.64	{d16-d17}, [r1 :128]
   1492c:	vadd.i64	q8, q9, q8
   14930:	vst1.64	{d16-d17}, [r7 :128]
   14934:	ldr	r1, [pc, #212]	; 14a10 <UnityPrintNumberHex@@Base+0x1b0>
   14938:	ldr	r1, [pc, r1]
   1493c:	ldr	r1, [r1]
   14940:	bl	127d8 <putc@plt>
   14944:	ldrd	r0, [r8]
   14948:	adds	r0, r0, #1
   1494c:	adc	r1, r1, #0
   14950:	strd	r0, [r8]
   14954:	ldrd	r0, [r6, #64]	; 0x40
   14958:	adds	r0, r0, #1
   1495c:	adc	r1, r1, #0
   14960:	tst	r4, #255	; 0xff
   14964:	strd	r0, [r6, #64]	; 0x40
   14968:	beq	149b4 <UnityPrintNumberHex@@Base+0x154>
   1496c:	ldrd	r0, [r6, #16]
   14970:	sub	r4, r4, #1
   14974:	adds	r0, r0, #1
   14978:	adc	r1, r1, #0
   1497c:	strd	r0, [r6, #16]
   14980:	uxtb	r0, r4
   14984:	mov	r1, #15
   14988:	lsl	r0, r0, #2
   1498c:	and	r0, r1, r5, lsr r0
   14990:	cmp	r0, #9
   14994:	bhi	14908 <UnityPrintNumberHex@@Base+0xa8>
   14998:	ldrd	r2, [r6, #32]
   1499c:	orr	r0, r0, #48	; 0x30
   149a0:	mov	r8, sl
   149a4:	adds	r2, r2, #1
   149a8:	adc	r3, r3, #0
   149ac:	strd	r2, [r6, #32]
   149b0:	b	14920 <UnityPrintNumberHex@@Base+0xc0>
   149b4:	ldrd	r0, [r6, #24]
   149b8:	ldrd	r2, [r6, #72]	; 0x48
   149bc:	adds	r0, r0, #1
   149c0:	adc	r1, r1, #0
   149c4:	adds	r2, r2, #1
   149c8:	str	r2, [r6, #72]	; 0x48
   149cc:	strd	r0, [r6, #24]
   149d0:	adc	r0, r3, #0
   149d4:	str	r0, [r6, #76]	; 0x4c
   149d8:	vpop	{d8-d9}
   149dc:	add	sp, sp, #4
   149e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149e4:	nop	{0}
   149e8:	nop	{0}
   149ec:	nop	{0}
   149f0:	andeq	r0, r0, r1
   149f4:	andeq	r0, r0, r0
   149f8:	andeq	r0, r0, r1
   149fc:	andeq	r0, r0, r0
   14a00:	muleq	r1, r4, fp
   14a04:	muleq	r1, r0, fp
   14a08:	muleq	r1, r4, fp
   14a0c:	andeq	fp, r1, ip, lsl #17
   14a10:	andeq	fp, r1, r4, lsl r8
   14a14:	nop	{0}
   14a18:	nop	{0}
   14a1c:	nop	{0}

00014a20 <UnityPrintLen@@Base>:
   14a20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a24:	add	fp, sp, #28
   14a28:	sub	sp, sp, #4
   14a2c:	vpush	{d8-d9}
   14a30:	sub	sp, sp, #24
   14a34:	ldr	r6, [pc, #660]	; 14cd0 <UnityPrintLen@@Base+0x2b0>
   14a38:	mov	sl, r0
   14a3c:	ldr	r0, [pc, #656]	; 14cd4 <UnityPrintLen@@Base+0x2b4>
   14a40:	ldr	r0, [pc, r0]
   14a44:	add	r6, pc, r6
   14a48:	adds	r0, r0, #1
   14a4c:	str	r0, [r6]
   14a50:	ldr	r0, [r6, #4]
   14a54:	adc	r0, r0, #0
   14a58:	cmp	sl, #0
   14a5c:	str	r0, [r6, #4]
   14a60:	beq	14c78 <UnityPrintLen@@Base+0x258>
   14a64:	mov	r4, r1
   14a68:	ldrd	r0, [r6, #8]
   14a6c:	add	r2, r6, #32
   14a70:	adds	r0, r0, #1
   14a74:	adc	r1, r1, #0
   14a78:	strd	r0, [r6, #8]
   14a7c:	ldrb	r0, [sl]
   14a80:	cmp	r0, #0
   14a84:	beq	14c8c <UnityPrintLen@@Base+0x26c>
   14a88:	add	r1, r6, #48	; 0x30
   14a8c:	str	r2, [sp, #8]
   14a90:	mov	r5, sl
   14a94:	str	r1, [sp, #4]
   14a98:	add	r1, r6, #64	; 0x40
   14a9c:	str	r1, [sp, #20]
   14aa0:	add	r1, r6, #80	; 0x50
   14aa4:	str	r1, [sp, #16]
   14aa8:	add	r1, r6, #88	; 0x58
   14aac:	ldr	r8, [pc, #548]	; 14cd8 <UnityPrintLen@@Base+0x2b8>
   14ab0:	ldr	r7, [pc, #548]	; 14cdc <UnityPrintLen@@Base+0x2bc>
   14ab4:	ldr	r7, [pc, r7]
   14ab8:	add	r8, pc, r8
   14abc:	str	r1, [sp, #12]
   14ac0:	b	14b3c <UnityPrintLen@@Base+0x11c>
   14ac4:	add	r0, pc, #500	; 0x1f4
   14ac8:	vld1.64	{d16-d17}, [r8 :128]
   14acc:	vld1.64	{d8-d9}, [r0 :128]
   14ad0:	ldrd	r0, [r6, #96]	; 0x60
   14ad4:	adds	r0, r0, #1
   14ad8:	adc	r1, r1, #0
   14adc:	vadd.i64	q8, q8, q4
   14ae0:	strd	r0, [r6, #96]	; 0x60
   14ae4:	ldr	r1, [r7]
   14ae8:	mov	r0, #92	; 0x5c
   14aec:	vst1.64	{d16-d17}, [r8 :128]
   14af0:	bl	127d8 <putc@plt>
   14af4:	vld1.64	{d16-d17}, [r8 :128]
   14af8:	ldr	r1, [r7]
   14afc:	mov	r0, #114	; 0x72
   14b00:	vadd.i64	q8, q8, q4
   14b04:	vst1.64	{d16-d17}, [r8 :128]
   14b08:	bl	127d8 <putc@plt>
   14b0c:	add	r0, r6, #112	; 0x70
   14b10:	ldrd	r2, [r0]
   14b14:	adds	r2, r2, #1
   14b18:	adc	r3, r3, #0
   14b1c:	strd	r2, [r0]
   14b20:	ldrd	r0, [r6, #152]	; 0x98
   14b24:	adds	r0, r0, #1
   14b28:	adc	r1, r1, #0
   14b2c:	strd	r0, [r6, #152]	; 0x98
   14b30:	ldrb	r0, [r5, #1]!
   14b34:	cmp	r0, #0
   14b38:	beq	14c80 <UnityPrintLen@@Base+0x260>
   14b3c:	ldrd	r2, [r6, #24]
   14b40:	sub	r1, r5, sl
   14b44:	adds	r2, r2, #1
   14b48:	adc	r3, r3, #0
   14b4c:	cmp	r1, r4
   14b50:	strd	r2, [r6, #24]
   14b54:	bcs	14c88 <UnityPrintLen@@Base+0x268>
   14b58:	ldrd	r2, [r6, #40]	; 0x28
   14b5c:	ldr	r1, [sp, #20]
   14b60:	uxtb	r0, r0
   14b64:	adds	r2, r2, #1
   14b68:	adc	r3, r3, #0
   14b6c:	cmp	r0, #126	; 0x7e
   14b70:	strd	r2, [r6, #40]	; 0x28
   14b74:	bhi	14bc8 <UnityPrintLen@@Base+0x1a8>
   14b78:	ldrd	r2, [r6, #56]	; 0x38
   14b7c:	ldr	r1, [sp, #16]
   14b80:	adds	r2, r2, #1
   14b84:	adc	r3, r3, #0
   14b88:	cmp	r0, #32
   14b8c:	strd	r2, [r6, #56]	; 0x38
   14b90:	bcc	14bc8 <UnityPrintLen@@Base+0x1a8>
   14b94:	add	r1, pc, #292	; 0x124
   14b98:	vld1.64	{d18-d19}, [r8 :128]
   14b9c:	ldrd	r2, [r6, #72]	; 0x48
   14ba0:	vld1.64	{d16-d17}, [r1 :128]
   14ba4:	ldr	r1, [r7]
   14ba8:	adds	r2, r2, #1
   14bac:	adc	r3, r3, #0
   14bb0:	vadd.i64	q8, q9, q8
   14bb4:	strd	r2, [r6, #72]	; 0x48
   14bb8:	vst1.64	{d16-d17}, [r8 :128]
   14bbc:	bl	127d8 <putc@plt>
   14bc0:	ldr	r0, [sp, #12]
   14bc4:	b	14b10 <UnityPrintLen@@Base+0xf0>
   14bc8:	ldm	r1, {r0, r3}
   14bcc:	adds	r0, r0, #1
   14bd0:	adc	r3, r3, #0
   14bd4:	stm	r1, {r0, r3}
   14bd8:	ldrb	r9, [r5]
   14bdc:	cmp	r9, #13
   14be0:	beq	14ac4 <UnityPrintLen@@Base+0xa4>
   14be4:	add	r0, pc, #212	; 0xd4
   14be8:	vld1.64	{d18-d19}, [r8 :128]
   14bec:	vld1.64	{d16-d17}, [r0 :128]
   14bf0:	ldrd	r0, [r6, #104]	; 0x68
   14bf4:	adds	r0, r0, #1
   14bf8:	adc	r1, r1, #0
   14bfc:	vadd.i64	q8, q9, q8
   14c00:	strd	r0, [r6, #104]	; 0x68
   14c04:	ldr	r1, [r7]
   14c08:	mov	r0, #92	; 0x5c
   14c0c:	vst1.64	{d16-d17}, [r8 :128]
   14c10:	bl	127d8 <putc@plt>
   14c14:	cmp	r9, #10
   14c18:	bne	14c54 <UnityPrintLen@@Base+0x234>
   14c1c:	add	r0, pc, #156	; 0x9c
   14c20:	vld1.64	{d18-d19}, [r8 :128]
   14c24:	vld1.64	{d16-d17}, [r0 :128]
   14c28:	ldrd	r0, [r6, #120]	; 0x78
   14c2c:	adds	r0, r0, #1
   14c30:	adc	r1, r1, #0
   14c34:	vadd.i64	q8, q9, q8
   14c38:	strd	r0, [r6, #120]	; 0x78
   14c3c:	ldr	r1, [r7]
   14c40:	mov	r0, #110	; 0x6e
   14c44:	vst1.64	{d16-d17}, [r8 :128]
   14c48:	bl	127d8 <putc@plt>
   14c4c:	add	r0, r6, #136	; 0x88
   14c50:	b	14b10 <UnityPrintLen@@Base+0xf0>
   14c54:	ldrd	r0, [r6, #128]	; 0x80
   14c58:	adds	r0, r0, #1
   14c5c:	adc	r1, r1, #0
   14c60:	strd	r0, [r6, #128]	; 0x80
   14c64:	mov	r1, #2
   14c68:	ldrb	r0, [r5]
   14c6c:	bl	14860 <UnityPrintNumberHex@@Base>
   14c70:	add	r0, r6, #144	; 0x90
   14c74:	b	14b10 <UnityPrintLen@@Base+0xf0>
   14c78:	add	r2, r6, #16
   14c7c:	b	14c8c <UnityPrintLen@@Base+0x26c>
   14c80:	ldr	r2, [sp, #8]
   14c84:	b	14c8c <UnityPrintLen@@Base+0x26c>
   14c88:	ldr	r2, [sp, #4]
   14c8c:	ldrd	r0, [r2]
   14c90:	adds	r0, r0, #1
   14c94:	adc	r1, r1, #0
   14c98:	strd	r0, [r2]
   14c9c:	ldrd	r0, [r6, #160]	; 0xa0
   14ca0:	adds	r0, r0, #1
   14ca4:	adc	r1, r1, #0
   14ca8:	strd	r0, [r6, #160]	; 0xa0
   14cac:	sub	sp, fp, #48	; 0x30
   14cb0:	vpop	{d8-d9}
   14cb4:	add	sp, sp, #4
   14cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cbc:	nop	{0}
   14cc0:	andeq	r0, r0, r1
   14cc4:	andeq	r0, r0, r0
   14cc8:	andeq	r0, r0, r1
   14ccc:	andeq	r0, r0, r0
   14cd0:	andeq	fp, r1, r4, lsr sl
   14cd4:	andeq	fp, r1, r8, lsr sl
   14cd8:	andeq	fp, r1, r0, ror #18
   14cdc:	muleq	r1, r8, r6

00014ce0 <UnityPrintNumberByStyle@@Base>:
   14ce0:	push	{r4, r6, r7, sl, fp, lr}
   14ce4:	add	fp, sp, #16
   14ce8:	ldr	r4, [pc, #204]	; 14dbc <UnityPrintNumberByStyle@@Base+0xdc>
   14cec:	ldr	r2, [pc, #204]	; 14dc0 <UnityPrintNumberByStyle@@Base+0xe0>
   14cf0:	ldr	r2, [pc, r2]
   14cf4:	add	r4, pc, r4
   14cf8:	adds	r2, r2, #1
   14cfc:	str	r2, [r4]
   14d00:	ldr	r2, [r4, #4]
   14d04:	adc	r2, r2, #0
   14d08:	tst	r1, #16
   14d0c:	str	r2, [r4, #4]
   14d10:	bne	14d50 <UnityPrintNumberByStyle@@Base+0x70>
   14d14:	ldrd	r2, [r4, #16]
   14d18:	adds	r2, r2, #1
   14d1c:	adc	r3, r3, #0
   14d20:	tst	r1, #32
   14d24:	strd	r2, [r4, #16]
   14d28:	and	r2, r1, #15
   14d2c:	bne	14d6c <UnityPrintNumberByStyle@@Base+0x8c>
   14d30:	ldrd	r6, [r4, #40]	; 0x28
   14d34:	lsl	r1, r2, #1
   14d38:	adds	r6, r6, #1
   14d3c:	adc	r7, r7, #0
   14d40:	strd	r6, [r4, #40]	; 0x28
   14d44:	bl	14860 <UnityPrintNumberHex@@Base>
   14d48:	add	r0, r4, #56	; 0x38
   14d4c:	b	14d98 <UnityPrintNumberByStyle@@Base+0xb8>
   14d50:	ldrd	r2, [r4, #8]
   14d54:	adds	r2, r2, #1
   14d58:	adc	r3, r3, #0
   14d5c:	strd	r2, [r4, #8]
   14d60:	bl	14dd0 <UnityPrintNumber@@Base>
   14d64:	add	r0, r4, #24
   14d68:	b	14d98 <UnityPrintNumberByStyle@@Base+0xb8>
   14d6c:	ldrd	r6, [r4, #32]
   14d70:	adds	r6, r6, #1
   14d74:	adc	r7, r7, #0
   14d78:	strd	r6, [r4, #32]
   14d7c:	ldr	r1, [pc, #64]	; 14dc4 <UnityPrintNumberByStyle@@Base+0xe4>
   14d80:	ldr	r1, [pc, r1]
   14d84:	add	r1, r1, r2, lsl #2
   14d88:	ldr	r1, [r1, #-4]
   14d8c:	and	r0, r1, r0
   14d90:	bl	15020 <UnityPrintNumberUnsigned@@Base>
   14d94:	add	r0, r4, #48	; 0x30
   14d98:	ldrd	r2, [r0]
   14d9c:	adds	r2, r2, #1
   14da0:	adc	r3, r3, #0
   14da4:	strd	r2, [r0]
   14da8:	ldrd	r0, [r4, #64]	; 0x40
   14dac:	adds	r0, r0, #1
   14db0:	adc	r1, r1, #0
   14db4:	strd	r0, [r4, #64]	; 0x40
   14db8:	pop	{r4, r6, r7, sl, fp, pc}
   14dbc:	andeq	fp, r1, r4, lsr r8
   14dc0:	andeq	fp, r1, r8, lsr r8
   14dc4:	andeq	fp, r1, ip, asr #6
   14dc8:	nop	{0}
   14dcc:	nop	{0}

00014dd0 <UnityPrintNumber@@Base>:
   14dd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14dd4:	add	fp, sp, #28
   14dd8:	sub	sp, sp, #4
   14ddc:	ldr	r5, [pc, #540]	; 15000 <UnityPrintNumber@@Base+0x230>
   14de0:	mov	sl, r0
   14de4:	ldr	r0, [pc, #536]	; 15004 <UnityPrintNumber@@Base+0x234>
   14de8:	ldr	r0, [pc, r0]
   14dec:	add	r5, pc, r5
   14df0:	adds	r0, r0, #1
   14df4:	str	r0, [r5]
   14df8:	ldr	r0, [r5, #4]
   14dfc:	adc	r0, r0, #0
   14e00:	cmn	sl, #1
   14e04:	str	r0, [r5, #4]
   14e08:	ldr	r8, [pc, #504]	; 15008 <UnityPrintNumber@@Base+0x238>
   14e0c:	add	r8, pc, r8
   14e10:	ble	14e2c <UnityPrintNumber@@Base+0x5c>
   14e14:	ldrd	r0, [r5, #16]
   14e18:	adds	r0, r0, #1
   14e1c:	adc	r1, r1, #0
   14e20:	strd	r0, [r5, #16]
   14e24:	add	r0, r5, #32
   14e28:	b	14e6c <UnityPrintNumber@@Base+0x9c>
   14e2c:	add	r0, pc, #444	; 0x1bc
   14e30:	vld1.64	{d18-d19}, [r8 :128]
   14e34:	vld1.64	{d16-d17}, [r0 :128]
   14e38:	ldrd	r0, [r5, #8]
   14e3c:	adds	r0, r0, #1
   14e40:	vadd.i64	q8, q9, q8
   14e44:	adc	r1, r1, #0
   14e48:	strd	r0, [r5, #8]
   14e4c:	vst1.64	{d16-d17}, [r8 :128]
   14e50:	ldr	r0, [pc, #436]	; 1500c <UnityPrintNumber@@Base+0x23c>
   14e54:	ldr	r0, [pc, r0]
   14e58:	ldr	r1, [r0]
   14e5c:	mov	r0, #45	; 0x2d
   14e60:	bl	127d8 <putc@plt>
   14e64:	add	r0, r5, #24
   14e68:	rsb	sl, sl, #0
   14e6c:	ldrd	r2, [r0]
   14e70:	adds	r2, r2, #1
   14e74:	adc	r3, r3, #0
   14e78:	strd	r2, [r0]
   14e7c:	ldrd	r0, [r5, #40]	; 0x28
   14e80:	adds	r0, r0, #1
   14e84:	adc	r1, r1, #0
   14e88:	cmp	sl, #10
   14e8c:	strd	r0, [r5, #40]	; 0x28
   14e90:	bcc	14f00 <UnityPrintNumber@@Base+0x130>
   14e94:	ldrd	r2, [r5, #48]	; 0x30
   14e98:	mov	r4, #1
   14e9c:	add	lr, r5, #72	; 0x48
   14ea0:	add	ip, r5, #56	; 0x38
   14ea4:	add	r6, r4, r4, lsl #2
   14ea8:	adds	r2, r2, #1
   14eac:	adc	r3, r3, #0
   14eb0:	cmp	r4, r6, lsl #1
   14eb4:	bcs	14ef8 <UnityPrintNumber@@Base+0x128>
   14eb8:	lsl	r4, r6, #1
   14ebc:	ldr	r6, [r5, #64]	; 0x40
   14ec0:	ldr	r9, [r5, #68]	; 0x44
   14ec4:	ldrd	r0, [r5, #80]	; 0x50
   14ec8:	adds	r6, r6, #1
   14ecc:	adc	r9, r9, #0
   14ed0:	adds	r0, r0, #1
   14ed4:	str	r0, [r5, #80]	; 0x50
   14ed8:	adc	r0, r1, #0
   14edc:	str	r6, [r5, #64]	; 0x40
   14ee0:	str	r9, [r5, #68]	; 0x44
   14ee4:	str	r0, [r5, #84]	; 0x54
   14ee8:	udiv	r0, sl, r4
   14eec:	cmp	r0, #9
   14ef0:	bhi	14ea4 <UnityPrintNumber@@Base+0xd4>
   14ef4:	mov	lr, ip
   14ef8:	strd	r2, [r5, #48]	; 0x30
   14efc:	b	14f08 <UnityPrintNumber@@Base+0x138>
   14f00:	add	lr, r5, #56	; 0x38
   14f04:	mov	r4, #1
   14f08:	ldrd	r0, [lr]
   14f0c:	movw	r6, #52429	; 0xcccd
   14f10:	movt	r6, #52428	; 0xcccc
   14f14:	adds	r0, r0, #1
   14f18:	adc	r1, r1, #0
   14f1c:	strd	r0, [lr]
   14f20:	add	r0, pc, #200	; 0xc8
   14f24:	vld1.64	{d18-d19}, [r8 :128]
   14f28:	vld1.64	{d16-d17}, [r0 :128]
   14f2c:	ldrd	r0, [r5, #88]	; 0x58
   14f30:	adds	r0, r0, #1
   14f34:	adc	r1, r1, #0
   14f38:	vadd.i64	q8, q9, q8
   14f3c:	strd	r0, [r5, #88]	; 0x58
   14f40:	udiv	r0, sl, r4
   14f44:	vst1.64	{d16-d17}, [r8 :128]
   14f48:	ldr	r9, [pc, #192]	; 15010 <UnityPrintNumber@@Base+0x240>
   14f4c:	ldr	r9, [pc, r9]
   14f50:	umull	r1, r2, r0, r6
   14f54:	lsr	r1, r2, #3
   14f58:	add	r1, r1, r1, lsl #2
   14f5c:	sub	r0, r0, r1, lsl #1
   14f60:	ldr	r1, [r9]
   14f64:	orr	r0, r0, #48	; 0x30
   14f68:	bl	127d8 <putc@plt>
   14f6c:	cmp	r4, #10
   14f70:	bcc	14fcc <UnityPrintNumber@@Base+0x1fc>
   14f74:	add	r0, pc, #116	; 0x74
   14f78:	vld1.64	{d18-d19}, [r8 :128]
   14f7c:	vld1.64	{d16-d17}, [r0 :128]
   14f80:	ldrd	r0, [r5, #96]	; 0x60
   14f84:	adds	r0, r0, #1
   14f88:	adc	r1, r1, #0
   14f8c:	vadd.i64	q8, q9, q8
   14f90:	strd	r0, [r5, #96]	; 0x60
   14f94:	umull	r0, r1, r4, r6
   14f98:	vst1.64	{d16-d17}, [r8 :128]
   14f9c:	lsr	r7, r1, #3
   14fa0:	udiv	r0, sl, r7
   14fa4:	umull	r1, r2, r0, r6
   14fa8:	lsr	r1, r2, #3
   14fac:	add	r1, r1, r1, lsl #2
   14fb0:	sub	r0, r0, r1, lsl #1
   14fb4:	ldr	r1, [r9]
   14fb8:	orr	r0, r0, #48	; 0x30
   14fbc:	bl	127d8 <putc@plt>
   14fc0:	cmp	r4, #99	; 0x63
   14fc4:	mov	r4, r7
   14fc8:	bhi	14f74 <UnityPrintNumber@@Base+0x1a4>
   14fcc:	add	r1, pc, #28
   14fd0:	add	r0, r5, #104	; 0x68
   14fd4:	vld1.64	{d16-d17}, [r1 :128]
   14fd8:	vld1.64	{d18-d19}, [r0]
   14fdc:	vadd.i64	q8, q9, q8
   14fe0:	vst1.64	{d16-d17}, [r0]
   14fe4:	sub	sp, fp, #28
   14fe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fec:	nop	{0}
   14ff0:	andeq	r0, r0, r1
   14ff4:	andeq	r0, r0, r0
   14ff8:	andeq	r0, r0, r1
   14ffc:	andeq	r0, r0, r0
   15000:	andeq	fp, r1, ip, lsl #15
   15004:	muleq	r1, r0, r7
   15008:	andeq	fp, r1, ip, lsl #12
   1500c:	strdeq	fp, [r1], -r8
   15010:	andeq	fp, r1, r0, lsl #4
   15014:	nop	{0}
   15018:	nop	{0}
   1501c:	nop	{0}

00015020 <UnityPrintNumberUnsigned@@Base>:
   15020:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15024:	add	fp, sp, #28
   15028:	sub	sp, sp, #4
   1502c:	ldr	sl, [pc, #412]	; 151d0 <UnityPrintNumberUnsigned@@Base+0x1b0>
   15030:	mov	r8, r0
   15034:	add	r0, pc, #388	; 0x184
   15038:	mov	r5, #1
   1503c:	vld1.64	{d16-d17}, [r0 :128]
   15040:	mov	r0, #24
   15044:	cmp	r8, #10
   15048:	add	sl, pc, sl
   1504c:	vld1.64	{d18-d19}, [sl :128]
   15050:	mov	r1, sl
   15054:	vadd.i64	q8, q9, q8
   15058:	vst1.64	{d16-d17}, [r1 :128], r0
   1505c:	bcc	150cc <UnityPrintNumberUnsigned@@Base+0xac>
   15060:	ldrd	r2, [sl, #16]
   15064:	mov	r5, #1
   15068:	add	r1, sl, #40	; 0x28
   1506c:	add	ip, sl, #24
   15070:	add	r7, r5, r5, lsl #2
   15074:	adds	r2, r2, #1
   15078:	adc	r3, r3, #0
   1507c:	cmp	r5, r7, lsl #1
   15080:	bcs	150c8 <UnityPrintNumberUnsigned@@Base+0xa8>
   15084:	ldr	r4, [sl, #32]
   15088:	lsl	r5, r7, #1
   1508c:	ldr	r7, [sl, #36]	; 0x24
   15090:	ldr	r0, [sl, #48]	; 0x30
   15094:	ldr	r9, [sl, #52]	; 0x34
   15098:	adds	r4, r4, #1
   1509c:	adc	r7, r7, #0
   150a0:	adds	r0, r0, #1
   150a4:	str	r0, [sl, #48]	; 0x30
   150a8:	adc	r0, r9, #0
   150ac:	str	r4, [sl, #32]
   150b0:	str	r7, [sl, #36]	; 0x24
   150b4:	str	r0, [sl, #52]	; 0x34
   150b8:	udiv	r0, r8, r5
   150bc:	cmp	r0, #9
   150c0:	bhi	15070 <UnityPrintNumberUnsigned@@Base+0x50>
   150c4:	mov	r1, ip
   150c8:	strd	r2, [sl, #16]
   150cc:	ldm	r1, {r0, r3}
   150d0:	movw	r4, #52429	; 0xcccd
   150d4:	movt	r4, #52428	; 0xcccc
   150d8:	adds	r0, r0, #1
   150dc:	adc	r3, r3, #0
   150e0:	stm	r1, {r0, r3}
   150e4:	ldr	r7, [pc, #232]	; 151d4 <UnityPrintNumberUnsigned@@Base+0x1b4>
   150e8:	add	r0, pc, #208	; 0xd0
   150ec:	vld1.64	{d16-d17}, [r0 :128]
   150f0:	ldrd	r0, [sl, #56]	; 0x38
   150f4:	add	r7, pc, r7
   150f8:	adds	r0, r0, #1
   150fc:	vld1.64	{d18-d19}, [r7 :128]
   15100:	adc	r1, r1, #0
   15104:	strd	r0, [sl, #56]	; 0x38
   15108:	udiv	r0, r8, r5
   1510c:	vadd.i64	q8, q9, q8
   15110:	vst1.64	{d16-d17}, [r7 :128]
   15114:	ldr	r9, [pc, #188]	; 151d8 <UnityPrintNumberUnsigned@@Base+0x1b8>
   15118:	ldr	r9, [pc, r9]
   1511c:	umull	r1, r2, r0, r4
   15120:	lsr	r1, r2, #3
   15124:	add	r1, r1, r1, lsl #2
   15128:	sub	r0, r0, r1, lsl #1
   1512c:	ldr	r1, [r9]
   15130:	orr	r0, r0, #48	; 0x30
   15134:	bl	127d8 <putc@plt>
   15138:	cmp	r5, #10
   1513c:	bcc	15198 <UnityPrintNumberUnsigned@@Base+0x178>
   15140:	add	r0, pc, #120	; 0x78
   15144:	vld1.64	{d18-d19}, [r7 :128]
   15148:	vld1.64	{d16-d17}, [r0 :128]
   1514c:	ldrd	r0, [sl, #64]	; 0x40
   15150:	adds	r0, r0, #1
   15154:	adc	r1, r1, #0
   15158:	vadd.i64	q8, q9, q8
   1515c:	strd	r0, [sl, #64]	; 0x40
   15160:	umull	r0, r1, r5, r4
   15164:	vst1.64	{d16-d17}, [r7 :128]
   15168:	lsr	r6, r1, #3
   1516c:	udiv	r0, r8, r6
   15170:	umull	r1, r2, r0, r4
   15174:	lsr	r1, r2, #3
   15178:	add	r1, r1, r1, lsl #2
   1517c:	sub	r0, r0, r1, lsl #1
   15180:	ldr	r1, [r9]
   15184:	orr	r0, r0, #48	; 0x30
   15188:	bl	127d8 <putc@plt>
   1518c:	cmp	r5, #99	; 0x63
   15190:	mov	r5, r6
   15194:	bhi	15140 <UnityPrintNumberUnsigned@@Base+0x120>
   15198:	add	r1, pc, #32
   1519c:	add	r0, sl, #72	; 0x48
   151a0:	vld1.64	{d16-d17}, [r1 :128]
   151a4:	vld1.64	{d18-d19}, [r0]
   151a8:	vadd.i64	q8, q9, q8
   151ac:	vst1.64	{d16-d17}, [r0]
   151b0:	sub	sp, fp, #28
   151b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151b8:	nop	{0}
   151bc:	nop	{0}
   151c0:	andeq	r0, r0, r1
   151c4:	andeq	r0, r0, r0
   151c8:	andeq	r0, r0, r1
   151cc:	andeq	r0, r0, r0
   151d0:			; <UNDEFINED> instruction: 0x0001b5b0
   151d4:	andeq	fp, r1, r4, lsr #6
   151d8:	andeq	fp, r1, r4, lsr r0
   151dc:	nop	{0}

000151e0 <UnityPrintMask@@Base>:
   151e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151e4:	add	fp, sp, #28
   151e8:	sub	sp, sp, #12
   151ec:	ldr	r6, [pc, #348]	; 15350 <UnityPrintMask@@Base+0x170>
   151f0:	mov	sl, r0
   151f4:	add	r0, pc, #324	; 0x144
   151f8:	mov	r8, r1
   151fc:	mov	r7, #-2147483648	; 0x80000000
   15200:	mov	r4, #32
   15204:	vld1.64	{d16-d17}, [r0 :128]
   15208:	add	r6, pc, r6
   1520c:	vld1.64	{d18-d19}, [r6 :128]
   15210:	add	r0, r6, #80	; 0x50
   15214:	str	r0, [sp, #4]
   15218:	add	r0, r6, #72	; 0x48
   1521c:	vadd.i64	q8, q9, q8
   15220:	vst1.64	{d16-d17}, [r6 :128]
   15224:	ldr	r5, [pc, #296]	; 15354 <UnityPrintMask@@Base+0x174>
   15228:	str	r0, [sp]
   1522c:	add	r0, r6, #64	; 0x40
   15230:	str	r0, [sp, #8]
   15234:	add	r5, pc, r5
   15238:	b	152a4 <UnityPrintMask@@Base+0xc4>
   1523c:	ldrd	r0, [r6, #40]	; 0x28
   15240:	ldr	r9, [sp, #4]
   15244:	adds	r0, r0, #1
   15248:	adc	r1, r1, #0
   1524c:	strd	r0, [r6, #40]	; 0x28
   15250:	mov	r0, #88	; 0x58
   15254:	add	r1, pc, #228	; 0xe4
   15258:	vld1.64	{d18-d19}, [r5 :128]
   1525c:	vld1.64	{d16-d17}, [r1 :128]
   15260:	vadd.i64	q8, q9, q8
   15264:	vst1.64	{d16-d17}, [r5 :128]
   15268:	ldr	r1, [pc, #232]	; 15358 <UnityPrintMask@@Base+0x178>
   1526c:	ldr	r1, [pc, r1]
   15270:	ldr	r1, [r1]
   15274:	bl	127d8 <putc@plt>
   15278:	ldrd	r0, [r9]
   1527c:	lsr	r7, r7, #1
   15280:	adds	r0, r0, #1
   15284:	adc	r1, r1, #0
   15288:	strd	r0, [r9]
   1528c:	ldrd	r0, [r6, #88]	; 0x58
   15290:	adds	r0, r0, #1
   15294:	adc	r1, r1, #0
   15298:	subs	r4, r4, #1
   1529c:	strd	r0, [r6, #88]	; 0x58
   152a0:	beq	1530c <UnityPrintMask@@Base+0x12c>
   152a4:	ldrd	r0, [r6, #16]
   152a8:	adds	r0, r0, #1
   152ac:	adc	r1, r1, #0
   152b0:	tst	r7, sl
   152b4:	strd	r0, [r6, #16]
   152b8:	beq	1523c <UnityPrintMask@@Base+0x5c>
   152bc:	ldrd	r0, [r6, #32]
   152c0:	adds	r0, r0, #1
   152c4:	adc	r1, r1, #0
   152c8:	tst	r7, r8
   152cc:	strd	r0, [r6, #32]
   152d0:	beq	152f0 <UnityPrintMask@@Base+0x110>
   152d4:	ldrd	r0, [r6, #48]	; 0x30
   152d8:	ldr	r9, [sp, #8]
   152dc:	adds	r0, r0, #1
   152e0:	adc	r1, r1, #0
   152e4:	strd	r0, [r6, #48]	; 0x30
   152e8:	mov	r0, #49	; 0x31
   152ec:	b	15254 <UnityPrintMask@@Base+0x74>
   152f0:	ldrd	r0, [r6, #56]	; 0x38
   152f4:	ldr	r9, [sp]
   152f8:	adds	r0, r0, #1
   152fc:	adc	r1, r1, #0
   15300:	strd	r0, [r6, #56]	; 0x38
   15304:	mov	r0, #48	; 0x30
   15308:	b	15254 <UnityPrintMask@@Base+0x74>
   1530c:	ldrd	r0, [r6, #24]
   15310:	ldrd	r2, [r6, #96]	; 0x60
   15314:	adds	r0, r0, #1
   15318:	adc	r1, r1, #0
   1531c:	adds	r2, r2, #1
   15320:	str	r2, [r6, #96]	; 0x60
   15324:	strd	r0, [r6, #24]
   15328:	adc	r0, r3, #0
   1532c:	str	r0, [r6, #100]	; 0x64
   15330:	sub	sp, fp, #28
   15334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15338:	nop	{0}
   1533c:	nop	{0}
   15340:	andeq	r0, r0, r1
   15344:	andeq	r0, r0, r0
   15348:	andeq	r0, r0, r1
   1534c:	andeq	r0, r0, r0
   15350:	andeq	fp, r1, r0, asr r4
   15354:	andeq	fp, r1, r4, ror #3
   15358:	andeq	sl, r1, r0, ror #29
   1535c:	nop	{0}

00015360 <UnityPrintFail@@Base>:
   15360:	ldr	r0, [pc, #56]	; 153a0 <UnityPrintFail@@Base+0x40>
   15364:	add	r1, pc, #36	; 0x24
   15368:	vld1.64	{d16-d17}, [r1 :128]
   1536c:	add	r0, pc, r0
   15370:	vld1.64	{d18-d19}, [r0 :128]
   15374:	vadd.i64	q8, q9, q8
   15378:	vst1.64	{d16-d17}, [r0 :128]
   1537c:	ldr	r0, [pc, #32]	; 153a4 <UnityPrintFail@@Base+0x44>
   15380:	ldr	r0, [pc, r0]
   15384:	b	145d0 <UnityPrint@@Base>
   15388:	nop	{0}
   1538c:	nop	{0}
   15390:	andeq	r0, r0, r1
   15394:	andeq	r0, r0, r0
   15398:	andeq	r0, r0, r1
   1539c:	andeq	r0, r0, r0
   153a0:	andeq	fp, r1, ip, asr r3
   153a4:	andeq	sl, r1, r8, lsr #27
   153a8:	nop	{0}
   153ac:	nop	{0}

000153b0 <UnityPrintOk@@Base>:
   153b0:	ldr	r0, [pc, #56]	; 153f0 <UnityPrintOk@@Base+0x40>
   153b4:	add	r1, pc, #36	; 0x24
   153b8:	vld1.64	{d16-d17}, [r1 :128]
   153bc:	add	r0, pc, r0
   153c0:	vld1.64	{d18-d19}, [r0 :128]
   153c4:	vadd.i64	q8, q9, q8
   153c8:	vst1.64	{d16-d17}, [r0 :128]
   153cc:	ldr	r0, [pc, #32]	; 153f4 <UnityPrintOk@@Base+0x44>
   153d0:	ldr	r0, [pc, r0]
   153d4:	b	145d0 <UnityPrint@@Base>
   153d8:	nop	{0}
   153dc:	nop	{0}
   153e0:	andeq	r0, r0, r1
   153e4:	andeq	r0, r0, r0
   153e8:	andeq	r0, r0, r1
   153ec:	andeq	r0, r0, r0
   153f0:	andeq	fp, r1, ip, lsl r3
   153f4:	strdeq	sl, [r1], -r4
   153f8:	nop	{0}
   153fc:	nop	{0}

00015400 <UnityConcludeTest@@Base>:
   15400:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15404:	add	fp, sp, #24
   15408:	vpush	{d8-d9}
   1540c:	ldr	r5, [pc, #444]	; 155d0 <UnityConcludeTest@@Base+0x1d0>
   15410:	ldr	r0, [pc, #444]	; 155d4 <UnityConcludeTest@@Base+0x1d4>
   15414:	ldr	r0, [pc, r0]
   15418:	add	r5, pc, r5
   1541c:	adds	r0, r0, #1
   15420:	str	r0, [r5]
   15424:	ldr	r0, [r5, #4]
   15428:	adc	r0, r0, #0
   1542c:	str	r0, [r5, #4]
   15430:	ldr	r6, [pc, #416]	; 155d8 <UnityConcludeTest@@Base+0x1d8>
   15434:	ldr	r6, [pc, r6]
   15438:	ldr	r0, [r6, #36]	; 0x24
   1543c:	ldr	r7, [pc, #408]	; 155dc <UnityConcludeTest@@Base+0x1dc>
   15440:	cmp	r0, #0
   15444:	add	r7, pc, r7
   15448:	beq	15470 <UnityConcludeTest@@Base+0x70>
   1544c:	ldrd	r0, [r5, #8]
   15450:	adds	r0, r0, #1
   15454:	adc	r1, r1, #0
   15458:	strd	r0, [r5, #8]
   1545c:	ldr	r0, [r6, #28]
   15460:	add	r0, r0, #1
   15464:	str	r0, [r6, #28]
   15468:	add	r0, r5, #24
   1546c:	b	15558 <UnityConcludeTest@@Base+0x158>
   15470:	ldrd	r0, [r5, #16]
   15474:	adds	r0, r0, #1
   15478:	adc	r1, r1, #0
   1547c:	strd	r0, [r5, #16]
   15480:	ldr	r0, [r6, #32]
   15484:	cmp	r0, #0
   15488:	beq	154b0 <UnityConcludeTest@@Base+0xb0>
   1548c:	ldrd	r0, [r5, #32]
   15490:	adds	r0, r0, #1
   15494:	adc	r1, r1, #0
   15498:	strd	r0, [r5, #32]
   1549c:	ldr	r0, [r6, #24]
   154a0:	add	r0, r0, #1
   154a4:	str	r0, [r6, #24]
   154a8:	add	r0, r5, #56	; 0x38
   154ac:	b	15558 <UnityConcludeTest@@Base+0x158>
   154b0:	ldr	r0, [pc, #296]	; 155e0 <UnityConcludeTest@@Base+0x1e0>
   154b4:	add	r1, pc, #260	; 0x104
   154b8:	ldrd	r2, [r5, #40]	; 0x28
   154bc:	ldr	r4, [r6, #16]
   154c0:	vld1.64	{d8-d9}, [r1 :128]
   154c4:	add	r0, pc, r0
   154c8:	adds	r2, r2, #1
   154cc:	vld1.64	{d16-d17}, [r0 :128]
   154d0:	adc	r3, r3, #0
   154d4:	strd	r2, [r5, #40]	; 0x28
   154d8:	vadd.i64	q8, q8, q4
   154dc:	vst1.64	{d16-d17}, [r0 :128]
   154e0:	ldr	r0, [r6]
   154e4:	bl	145d0 <UnityPrint@@Base>
   154e8:	vld1.64	{d16-d17}, [r7 :128]
   154ec:	mov	r0, #58	; 0x3a
   154f0:	vadd.i64	q8, q8, q4
   154f4:	vst1.64	{d16-d17}, [r7 :128]
   154f8:	ldr	r8, [pc, #228]	; 155e4 <UnityConcludeTest@@Base+0x1e4>
   154fc:	ldr	r8, [pc, r8]
   15500:	ldr	r1, [r8]
   15504:	bl	127d8 <putc@plt>
   15508:	mov	r0, r4
   1550c:	bl	14dd0 <UnityPrintNumber@@Base>
   15510:	vld1.64	{d16-d17}, [r7 :128]
   15514:	ldr	r1, [r8]
   15518:	mov	r0, #58	; 0x3a
   1551c:	vadd.i64	q8, q8, q4
   15520:	vst1.64	{d16-d17}, [r7 :128]
   15524:	bl	127d8 <putc@plt>
   15528:	ldr	r0, [r6, #4]
   1552c:	bl	145d0 <UnityPrint@@Base>
   15530:	vld1.64	{d16-d17}, [r7 :128]
   15534:	ldr	r1, [r8]
   15538:	mov	r0, #58	; 0x3a
   1553c:	vadd.i64	q8, q8, q4
   15540:	vst1.64	{d16-d17}, [r7 :128]
   15544:	bl	127d8 <putc@plt>
   15548:	ldr	r0, [pc, #152]	; 155e8 <UnityConcludeTest@@Base+0x1e8>
   1554c:	ldr	r0, [pc, r0]
   15550:	bl	145d0 <UnityPrint@@Base>
   15554:	add	r0, r5, #48	; 0x30
   15558:	ldrd	r2, [r0]
   1555c:	adds	r2, r2, #1
   15560:	adc	r3, r3, #0
   15564:	strd	r2, [r0]
   15568:	add	r0, pc, #80	; 0x50
   1556c:	vld1.64	{d18-d19}, [r7 :128]
   15570:	vld1.64	{d16-d17}, [r0 :128]
   15574:	mov	r0, #0
   15578:	str	r0, [r6, #32]
   1557c:	str	r0, [r6, #36]	; 0x24
   15580:	ldrd	r0, [r5, #64]	; 0x40
   15584:	vadd.i64	q8, q9, q8
   15588:	adds	r0, r0, #1
   1558c:	adc	r1, r1, #0
   15590:	strd	r0, [r5, #64]	; 0x40
   15594:	vst1.64	{d16-d17}, [r7 :128]
   15598:	ldr	r0, [pc, #76]	; 155ec <UnityConcludeTest@@Base+0x1ec>
   1559c:	ldr	r0, [pc, r0]
   155a0:	ldr	r1, [r0]
   155a4:	mov	r0, #10
   155a8:	vpop	{d8-d9}
   155ac:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   155b0:	b	127d8 <putc@plt>
   155b4:	nop	{0}
   155b8:	nop	{0}
   155bc:	nop	{0}
   155c0:	andeq	r0, r0, r1
   155c4:	andeq	r0, r0, r0
   155c8:	andeq	r0, r0, r1
   155cc:	andeq	r0, r0, r0
   155d0:	ldrdeq	fp, [r1], -r0
   155d4:	ldrdeq	fp, [r1], -r4
   155d8:	andeq	sl, r1, r0, lsl #26
   155dc:	ldrdeq	sl, [r1], -r4
   155e0:	andeq	fp, r1, r4, ror r2
   155e4:	andeq	sl, r1, r0, asr ip
   155e8:	andeq	sl, r1, r0, ror #22
   155ec:			; <UNDEFINED> instruction: 0x0001abb0

000155f0 <UnityAssertBits@@Base>:
   155f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   155f4:	add	fp, sp, #24
   155f8:	mov	r7, r1
   155fc:	ldr	r1, [pc, #256]	; 15704 <UnityAssertBits@@Base+0x114>
   15600:	mov	r6, r0
   15604:	ldr	r0, [pc, #252]	; 15708 <UnityAssertBits@@Base+0x118>
   15608:	mov	r8, r3
   1560c:	ldr	r0, [pc, r0]
   15610:	add	r1, pc, r1
   15614:	adds	r0, r0, #1
   15618:	str	r0, [r1]
   1561c:	ldr	r0, [r1, #4]
   15620:	adc	r0, r0, #0
   15624:	str	r0, [r1, #4]
   15628:	ldr	r4, [pc, #220]	; 1570c <UnityAssertBits@@Base+0x11c>
   1562c:	ldr	r4, [pc, r4]
   15630:	ldr	r0, [r4, #32]
   15634:	ldr	r3, [r4, #36]	; 0x24
   15638:	orrs	r0, r3, r0
   1563c:	beq	15648 <UnityAssertBits@@Base+0x58>
   15640:	add	r0, r1, #8
   15644:	b	15674 <UnityAssertBits@@Base+0x84>
   15648:	ldr	r0, [r1, #16]
   1564c:	ldr	r3, [r1, #20]
   15650:	mov	r5, r2
   15654:	adds	r0, r0, #1
   15658:	str	r0, [r1, #16]
   1565c:	eor	r0, r2, r7
   15660:	adc	r3, r3, #0
   15664:	tst	r0, r6
   15668:	str	r3, [r1, #20]
   1566c:	bne	156a0 <UnityAssertBits@@Base+0xb0>
   15670:	add	r0, r1, #32
   15674:	ldrd	r2, [r0]
   15678:	adds	r2, r2, #1
   1567c:	adc	r3, r3, #0
   15680:	strd	r2, [r0]
   15684:	ldr	r0, [r1, #40]	; 0x28
   15688:	ldr	r3, [r1, #44]	; 0x2c
   1568c:	adds	r0, r0, #1
   15690:	adc	r3, r3, #0
   15694:	str	r0, [r1, #40]	; 0x28
   15698:	str	r3, [r1, #44]	; 0x2c
   1569c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   156a0:	ldrd	r2, [r1, #24]
   156a4:	ldr	r0, [fp, #8]
   156a8:	adds	r2, r2, #1
   156ac:	adc	r3, r3, #0
   156b0:	strd	r2, [r1, #24]
   156b4:	bl	15720 <UnityAssertBits@@Base+0x130>
   156b8:	ldr	r0, [pc, #80]	; 15710 <UnityAssertBits@@Base+0x120>
   156bc:	ldr	r0, [pc, r0]
   156c0:	bl	145d0 <UnityPrint@@Base>
   156c4:	mov	r0, r6
   156c8:	mov	r1, r7
   156cc:	bl	151e0 <UnityPrintMask@@Base>
   156d0:	ldr	r0, [pc, #60]	; 15714 <UnityAssertBits@@Base+0x124>
   156d4:	ldr	r0, [pc, r0]
   156d8:	bl	145d0 <UnityPrint@@Base>
   156dc:	mov	r0, r6
   156e0:	mov	r1, r5
   156e4:	bl	151e0 <UnityPrintMask@@Base>
   156e8:	mov	r0, r8
   156ec:	bl	15838 <UnityAssertBits@@Base+0x248>
   156f0:	mov	r0, #1
   156f4:	mov	r1, #1
   156f8:	str	r0, [r4, #32]
   156fc:	add	r0, r4, #40	; 0x28
   15700:	bl	12628 <longjmp@plt>
   15704:	andeq	fp, r1, r8, lsr r1
   15708:	andeq	fp, r1, ip, lsr r1
   1570c:	andeq	sl, r1, r8, lsl #22
   15710:	andeq	sl, r1, r8, lsr sl
   15714:	andeq	sl, r1, r4, lsl #21
   15718:	nop	{0}
   1571c:	nop	{0}
   15720:	push	{r4, r5, r6, r7, fp, lr}
   15724:	add	fp, sp, #16
   15728:	vpush	{d8-d9}
   1572c:	mov	r4, r0
   15730:	ldr	r0, [pc, #232]	; 15820 <UnityAssertBits@@Base+0x230>
   15734:	ldr	r1, [pc, #232]	; 15824 <UnityAssertBits@@Base+0x234>
   15738:	add	r2, pc, #208	; 0xd0
   1573c:	vld1.64	{d8-d9}, [r2 :128]
   15740:	add	r0, pc, r0
   15744:	add	r1, pc, r1
   15748:	vld1.64	{d16-d17}, [r1 :128]
   1574c:	vld1.64	{d18-d19}, [r0 :128]
   15750:	vadd.i64	q8, q8, q4
   15754:	vadd.i64	q9, q9, q4
   15758:	vst1.64	{d16-d17}, [r1 :128]
   1575c:	vst1.64	{d18-d19}, [r0 :128]
   15760:	ldr	r7, [pc, #192]	; 15828 <UnityAssertBits@@Base+0x238>
   15764:	ldr	r7, [pc, r7]
   15768:	ldr	r0, [r7]
   1576c:	bl	145d0 <UnityPrint@@Base>
   15770:	ldr	r5, [pc, #180]	; 1582c <UnityAssertBits@@Base+0x23c>
   15774:	mov	r0, #58	; 0x3a
   15778:	add	r5, pc, r5
   1577c:	vld1.64	{d16-d17}, [r5 :128]
   15780:	vadd.i64	q8, q8, q4
   15784:	vst1.64	{d16-d17}, [r5 :128]
   15788:	ldr	r6, [pc, #160]	; 15830 <UnityAssertBits@@Base+0x240>
   1578c:	ldr	r6, [pc, r6]
   15790:	ldr	r1, [r6]
   15794:	bl	127d8 <putc@plt>
   15798:	mov	r0, r4
   1579c:	bl	14dd0 <UnityPrintNumber@@Base>
   157a0:	vld1.64	{d16-d17}, [r5 :128]
   157a4:	ldr	r1, [r6]
   157a8:	mov	r0, #58	; 0x3a
   157ac:	vadd.i64	q8, q8, q4
   157b0:	vst1.64	{d16-d17}, [r5 :128]
   157b4:	bl	127d8 <putc@plt>
   157b8:	ldr	r0, [r7, #4]
   157bc:	bl	145d0 <UnityPrint@@Base>
   157c0:	vld1.64	{d16-d17}, [r5 :128]
   157c4:	ldr	r1, [r6]
   157c8:	mov	r0, #58	; 0x3a
   157cc:	vadd.i64	q8, q8, q4
   157d0:	vst1.64	{d16-d17}, [r5 :128]
   157d4:	bl	127d8 <putc@plt>
   157d8:	ldr	r0, [pc, #84]	; 15834 <UnityAssertBits@@Base+0x244>
   157dc:	ldr	r0, [pc, r0]
   157e0:	bl	145d0 <UnityPrint@@Base>
   157e4:	vld1.64	{d16-d17}, [r5 :128]
   157e8:	ldr	r1, [r6]
   157ec:	mov	r0, #58	; 0x3a
   157f0:	vadd.i64	q8, q8, q4
   157f4:	vst1.64	{d16-d17}, [r5 :128]
   157f8:	vpop	{d8-d9}
   157fc:	pop	{r4, r5, r6, r7, fp, lr}
   15800:	b	127d8 <putc@plt>
   15804:	nop	{0}
   15808:	nop	{0}
   1580c:	nop	{0}
   15810:	andeq	r0, r0, r1
   15814:	andeq	r0, r0, r0
   15818:	andeq	r0, r0, r1
   1581c:	andeq	r0, r0, r0
   15820:	strdeq	sl, [r1], -r8
   15824:	andeq	fp, r1, r4, lsr r0
   15828:	ldrdeq	sl, [r1], -r0
   1582c:	andeq	sl, r1, r0, lsr #25
   15830:	andeq	sl, r1, r0, asr #19
   15834:	andeq	sl, r1, ip, asr #18
   15838:	push	{r4, r5, r6, sl, fp, lr}
   1583c:	add	fp, sp, #16
   15840:	ldr	r5, [pc, #296]	; 15970 <UnityAssertBits@@Base+0x380>
   15844:	mov	r4, r0
   15848:	ldr	r0, [pc, #292]	; 15974 <UnityAssertBits@@Base+0x384>
   1584c:	ldr	r0, [pc, r0]
   15850:	add	r5, pc, r5
   15854:	adds	r0, r0, #1
   15858:	str	r0, [r5]
   1585c:	ldr	r0, [r5, #4]
   15860:	adc	r0, r0, #0
   15864:	cmp	r4, #0
   15868:	str	r0, [r5, #4]
   1586c:	beq	158fc <UnityAssertBits@@Base+0x30c>
   15870:	ldrd	r0, [r5, #8]
   15874:	adds	r0, r0, #1
   15878:	adc	r1, r1, #0
   1587c:	strd	r0, [r5, #8]
   15880:	ldr	r0, [pc, #240]	; 15978 <UnityAssertBits@@Base+0x388>
   15884:	ldr	r0, [pc, r0]
   15888:	bl	145d0 <UnityPrint@@Base>
   1588c:	ldr	r6, [pc, #232]	; 1597c <UnityAssertBits@@Base+0x38c>
   15890:	ldr	r6, [pc, r6]
   15894:	ldr	r0, [r6, #8]
   15898:	cmp	r0, #0
   1589c:	beq	15904 <UnityAssertBits@@Base+0x314>
   158a0:	ldrd	r0, [r5, #24]
   158a4:	adds	r0, r0, #1
   158a8:	adc	r1, r1, #0
   158ac:	strd	r0, [r5, #24]
   158b0:	ldr	r0, [pc, #200]	; 15980 <UnityAssertBits@@Base+0x390>
   158b4:	ldr	r0, [pc, r0]
   158b8:	bl	145d0 <UnityPrint@@Base>
   158bc:	ldr	r0, [r6, #8]
   158c0:	bl	145d0 <UnityPrint@@Base>
   158c4:	ldr	r0, [r6, #12]
   158c8:	cmp	r0, #0
   158cc:	beq	1590c <UnityAssertBits@@Base+0x31c>
   158d0:	ldrd	r0, [r5, #40]	; 0x28
   158d4:	adds	r0, r0, #1
   158d8:	adc	r1, r1, #0
   158dc:	strd	r0, [r5, #40]	; 0x28
   158e0:	ldr	r0, [pc, #156]	; 15984 <UnityAssertBits@@Base+0x394>
   158e4:	ldr	r0, [pc, r0]
   158e8:	bl	145d0 <UnityPrint@@Base>
   158ec:	ldr	r0, [r6, #12]
   158f0:	bl	145d0 <UnityPrint@@Base>
   158f4:	add	r0, r5, #56	; 0x38
   158f8:	b	15910 <UnityAssertBits@@Base+0x320>
   158fc:	add	r0, r5, #16
   15900:	b	1594c <UnityAssertBits@@Base+0x35c>
   15904:	add	r0, r5, #32
   15908:	b	15930 <UnityAssertBits@@Base+0x340>
   1590c:	add	r0, r5, #48	; 0x30
   15910:	ldrd	r2, [r0]
   15914:	adds	r2, r2, #1
   15918:	adc	r3, r3, #0
   1591c:	strd	r2, [r0]
   15920:	ldr	r0, [pc, #96]	; 15988 <UnityAssertBits@@Base+0x398>
   15924:	ldr	r0, [pc, r0]
   15928:	bl	145d0 <UnityPrint@@Base>
   1592c:	add	r0, r5, #64	; 0x40
   15930:	ldrd	r2, [r0]
   15934:	adds	r2, r2, #1
   15938:	adc	r3, r3, #0
   1593c:	strd	r2, [r0]
   15940:	mov	r0, r4
   15944:	bl	145d0 <UnityPrint@@Base>
   15948:	add	r0, r5, #72	; 0x48
   1594c:	ldrd	r2, [r0]
   15950:	adds	r2, r2, #1
   15954:	adc	r3, r3, #0
   15958:	strd	r2, [r0]
   1595c:	ldrd	r0, [r5, #80]	; 0x50
   15960:	adds	r0, r0, #1
   15964:	adc	r1, r1, #0
   15968:	strd	r0, [r5, #80]	; 0x50
   1596c:	pop	{r4, r5, r6, sl, fp, pc}
   15970:	andeq	sl, r1, r8, lsr pc
   15974:	andeq	sl, r1, ip, lsr pc
   15978:	andeq	sl, r1, r0, ror #17
   1597c:	andeq	sl, r1, r4, lsr #17
   15980:	andeq	sl, r1, r0, lsr #17
   15984:	andeq	sl, r1, r0, lsr #16
   15988:	andeq	sl, r1, r0, asr #16

0001598c <UnityAssertEqualNumber@@Base>:
   1598c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15990:	add	fp, sp, #24
   15994:	mov	r6, r0
   15998:	ldr	r0, [pc, #252]	; 15a9c <UnityAssertEqualNumber@@Base+0x110>
   1599c:	mov	r5, r1
   159a0:	ldr	r1, [pc, #248]	; 15aa0 <UnityAssertEqualNumber@@Base+0x114>
   159a4:	mov	r4, r2
   159a8:	ldr	r1, [pc, r1]
   159ac:	add	r0, pc, r0
   159b0:	adds	r1, r1, #1
   159b4:	str	r1, [r0]
   159b8:	ldr	r1, [r0, #4]
   159bc:	adc	r1, r1, #0
   159c0:	str	r1, [r0, #4]
   159c4:	ldr	r7, [pc, #216]	; 15aa4 <UnityAssertEqualNumber@@Base+0x118>
   159c8:	ldr	r7, [pc, r7]
   159cc:	ldr	r2, [r7, #32]
   159d0:	ldr	r1, [r7, #36]	; 0x24
   159d4:	orrs	r1, r1, r2
   159d8:	beq	159e4 <UnityAssertEqualNumber@@Base+0x58>
   159dc:	add	r1, r0, #8
   159e0:	b	15a08 <UnityAssertEqualNumber@@Base+0x7c>
   159e4:	ldr	r2, [r0, #16]
   159e8:	ldr	r1, [r0, #20]
   159ec:	adds	r2, r2, #1
   159f0:	adc	r1, r1, #0
   159f4:	cmp	r6, r5
   159f8:	str	r2, [r0, #16]
   159fc:	str	r1, [r0, #20]
   15a00:	bne	15a2c <UnityAssertEqualNumber@@Base+0xa0>
   15a04:	add	r1, r0, #32
   15a08:	ldrd	r2, [r1]
   15a0c:	adds	r2, r2, #1
   15a10:	adc	r3, r3, #0
   15a14:	strd	r2, [r1]
   15a18:	ldrd	r2, [r0, #40]	; 0x28
   15a1c:	adds	r2, r2, #1
   15a20:	adc	r3, r3, #0
   15a24:	strd	r2, [r0, #40]	; 0x28
   15a28:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15a2c:	ldr	r2, [r0, #24]
   15a30:	ldr	r1, [r0, #28]
   15a34:	ldr	r8, [fp, #8]
   15a38:	adds	r2, r2, #1
   15a3c:	adc	r1, r1, #0
   15a40:	str	r2, [r0, #24]
   15a44:	str	r1, [r0, #28]
   15a48:	mov	r0, r3
   15a4c:	bl	15720 <UnityAssertBits@@Base+0x130>
   15a50:	ldr	r0, [pc, #80]	; 15aa8 <UnityAssertEqualNumber@@Base+0x11c>
   15a54:	ldr	r0, [pc, r0]
   15a58:	bl	145d0 <UnityPrint@@Base>
   15a5c:	mov	r0, r6
   15a60:	mov	r1, r8
   15a64:	bl	14ce0 <UnityPrintNumberByStyle@@Base>
   15a68:	ldr	r0, [pc, #60]	; 15aac <UnityAssertEqualNumber@@Base+0x120>
   15a6c:	ldr	r0, [pc, r0]
   15a70:	bl	145d0 <UnityPrint@@Base>
   15a74:	mov	r0, r5
   15a78:	mov	r1, r8
   15a7c:	bl	14ce0 <UnityPrintNumberByStyle@@Base>
   15a80:	mov	r0, r4
   15a84:	bl	15838 <UnityAssertBits@@Base+0x248>
   15a88:	mov	r0, #1
   15a8c:	mov	r1, #1
   15a90:	str	r0, [r7, #32]
   15a94:	add	r0, r7, #40	; 0x28
   15a98:	bl	12628 <longjmp@plt>
   15a9c:	andeq	sl, r1, ip, lsr lr
   15aa0:	andeq	sl, r1, r0, asr #28
   15aa4:	andeq	sl, r1, ip, ror #14
   15aa8:	andeq	sl, r1, r0, lsr #13
   15aac:	andeq	sl, r1, ip, ror #13

00015ab0 <UnityAssertEqualIntArray@@Base>:
   15ab0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ab4:	add	fp, sp, #28
   15ab8:	sub	sp, sp, #4
   15abc:	ldr	r9, [pc, #1276]	; 15fc0 <UnityAssertEqualIntArray@@Base+0x510>
   15ac0:	mov	r7, r0
   15ac4:	ldr	r0, [pc, #1272]	; 15fc4 <UnityAssertEqualIntArray@@Base+0x514>
   15ac8:	mov	r5, r1
   15acc:	ldr	r0, [pc, r0]
   15ad0:	add	r9, pc, r9
   15ad4:	adds	r0, r0, #1
   15ad8:	str	r0, [r9]
   15adc:	ldr	r0, [r9, #4]
   15ae0:	adc	r0, r0, #0
   15ae4:	str	r0, [r9, #4]
   15ae8:	ldr	r4, [pc, #1240]	; 15fc8 <UnityAssertEqualIntArray@@Base+0x518>
   15aec:	ldr	r4, [pc, r4]
   15af0:	ldrd	r0, [r4, #32]
   15af4:	orrs	r0, r1, r0
   15af8:	beq	15b14 <UnityAssertEqualIntArray@@Base+0x64>
   15afc:	ldrd	r0, [r9, #8]
   15b00:	adds	r0, r0, #1
   15b04:	adc	r1, r1, #0
   15b08:	strd	r0, [r9, #8]
   15b0c:	add	r0, r9, #24
   15b10:	b	15df8 <UnityAssertEqualIntArray@@Base+0x348>
   15b14:	ldrd	r0, [r9, #16]
   15b18:	mov	r8, r2
   15b1c:	ldr	r2, [fp, #8]
   15b20:	mov	sl, r3
   15b24:	adds	r0, r0, #1
   15b28:	adc	r1, r1, #0
   15b2c:	cmp	r8, #0
   15b30:	strd	r0, [r9, #16]
   15b34:	beq	15f64 <UnityAssertEqualIntArray@@Base+0x4b4>
   15b38:	ldrd	r0, [r9, #40]	; 0x28
   15b3c:	mov	r3, sl
   15b40:	adds	r0, r0, #1
   15b44:	adc	r1, r1, #0
   15b48:	strd	r0, [r9, #40]	; 0x28
   15b4c:	mov	r0, r7
   15b50:	mov	r1, r5
   15b54:	bl	15ff8 <UnityAssertEqualIntArray@@Base+0x548>
   15b58:	cmp	r0, #1
   15b5c:	bne	15b78 <UnityAssertEqualIntArray@@Base+0xc8>
   15b60:	ldrd	r0, [r9, #48]	; 0x30
   15b64:	adds	r0, r0, #1
   15b68:	adc	r1, r1, #0
   15b6c:	strd	r0, [r9, #48]	; 0x30
   15b70:	add	r0, r9, #64	; 0x40
   15b74:	b	15df8 <UnityAssertEqualIntArray@@Base+0x348>
   15b78:	ldrd	r0, [r9, #56]	; 0x38
   15b7c:	ldr	lr, [fp, #12]
   15b80:	adds	r0, r0, #1
   15b84:	adc	r1, r1, #0
   15b88:	strd	r0, [r9, #56]	; 0x38
   15b8c:	bic	r0, lr, #128	; 0x80
   15b90:	sub	r0, r0, #17
   15b94:	cmp	r0, #49	; 0x31
   15b98:	bhi	15d80 <UnityAssertEqualIntArray@@Base+0x2d0>
   15b9c:	add	r1, pc, #4
   15ba0:	ldr	r0, [r1, r0, lsl #2]
   15ba4:	add	pc, r1, r0
   15ba8:	andeq	r0, r0, r8, asr #1
   15bac:	andeq	r0, r0, r0, asr r1
   15bb0:	ldrdeq	r0, [r0], -r8
   15bb4:	ldrdeq	r0, [r0], -r8
   15bb8:	ldrdeq	r0, [r0], -r8
   15bbc:	ldrdeq	r0, [r0], -r8
   15bc0:	ldrdeq	r0, [r0], -r8
   15bc4:	ldrdeq	r0, [r0], -r8
   15bc8:	ldrdeq	r0, [r0], -r8
   15bcc:	ldrdeq	r0, [r0], -r8
   15bd0:	ldrdeq	r0, [r0], -r8
   15bd4:	ldrdeq	r0, [r0], -r8
   15bd8:	ldrdeq	r0, [r0], -r8
   15bdc:	ldrdeq	r0, [r0], -r8
   15be0:	ldrdeq	r0, [r0], -r8
   15be4:	ldrdeq	r0, [r0], -r8
   15be8:	andeq	r0, r0, r8, asr #1
   15bec:	andeq	r0, r0, r0, asr r1
   15bf0:	ldrdeq	r0, [r0], -r8
   15bf4:	ldrdeq	r0, [r0], -r8
   15bf8:	ldrdeq	r0, [r0], -r8
   15bfc:	ldrdeq	r0, [r0], -r8
   15c00:	ldrdeq	r0, [r0], -r8
   15c04:	ldrdeq	r0, [r0], -r8
   15c08:	ldrdeq	r0, [r0], -r8
   15c0c:	ldrdeq	r0, [r0], -r8
   15c10:	ldrdeq	r0, [r0], -r8
   15c14:	ldrdeq	r0, [r0], -r8
   15c18:	ldrdeq	r0, [r0], -r8
   15c1c:	ldrdeq	r0, [r0], -r8
   15c20:	ldrdeq	r0, [r0], -r8
   15c24:	ldrdeq	r0, [r0], -r8
   15c28:	ldrdeq	r0, [r0], -r8
   15c2c:	ldrdeq	r0, [r0], -r8
   15c30:	ldrdeq	r0, [r0], -r8
   15c34:	ldrdeq	r0, [r0], -r8
   15c38:	ldrdeq	r0, [r0], -r8
   15c3c:	ldrdeq	r0, [r0], -r8
   15c40:	ldrdeq	r0, [r0], -r8
   15c44:	ldrdeq	r0, [r0], -r8
   15c48:	ldrdeq	r0, [r0], -r8
   15c4c:	ldrdeq	r0, [r0], -r8
   15c50:	ldrdeq	r0, [r0], -r8
   15c54:	ldrdeq	r0, [r0], -r8
   15c58:	ldrdeq	r0, [r0], -r8
   15c5c:	ldrdeq	r0, [r0], -r8
   15c60:	ldrdeq	r0, [r0], -r8
   15c64:	ldrdeq	r0, [r0], -r8
   15c68:	andeq	r0, r0, r8, asr #1
   15c6c:	andeq	r0, r0, r0, asr r1
   15c70:	ldrd	r0, [r9, #96]	; 0x60
   15c74:	ldr	r2, [r9, #128]	; 0x80
   15c78:	ldr	r3, [r9, #132]	; 0x84
   15c7c:	mov	r4, #0
   15c80:	add	ip, r9, #144	; 0x90
   15c84:	adds	r0, r0, #1
   15c88:	adc	r1, r1, #0
   15c8c:	adds	r2, r2, #1
   15c90:	str	r2, [r9, #128]	; 0x80
   15c94:	strd	r0, [r9, #96]	; 0x60
   15c98:	adc	r0, r3, #0
   15c9c:	add	r3, r9, #160	; 0xa0
   15ca0:	str	r0, [r9, #132]	; 0x84
   15ca4:	ldr	r1, [r9, #140]	; 0x8c
   15ca8:	ldr	r2, [r9, #136]	; 0x88
   15cac:	adds	r2, r2, #1
   15cb0:	adc	r1, r1, #0
   15cb4:	str	r2, [r9, #136]	; 0x88
   15cb8:	str	r1, [r9, #140]	; 0x8c
   15cbc:	ldrb	r0, [r5]
   15cc0:	ldrb	r6, [r7]
   15cc4:	cmp	r6, r0
   15cc8:	bne	15e28 <UnityAssertEqualIntArray@@Base+0x378>
   15ccc:	add	r0, pc, #732	; 0x2dc
   15cd0:	vld1.64	{d18-d19}, [r3 :128]
   15cd4:	add	r4, r4, #1
   15cd8:	add	r5, r5, #1
   15cdc:	add	r7, r7, #1
   15ce0:	vld1.64	{d16-d17}, [r0 :128]
   15ce4:	cmp	r8, r4
   15ce8:	vadd.i64	q8, q9, q8
   15cec:	vst1.64	{d16-d17}, [r3 :128]
   15cf0:	bne	15cac <UnityAssertEqualIntArray@@Base+0x1fc>
   15cf4:	b	15de4 <UnityAssertEqualIntArray@@Base+0x334>
   15cf8:	ldrd	r0, [r9, #120]	; 0x78
   15cfc:	ldr	r2, [r9, #176]	; 0xb0
   15d00:	ldr	r3, [r9, #180]	; 0xb4
   15d04:	mov	r4, #0
   15d08:	add	ip, r9, #192	; 0xc0
   15d0c:	adds	r0, r0, #1
   15d10:	adc	r1, r1, #0
   15d14:	adds	r2, r2, #1
   15d18:	str	r2, [r9, #176]	; 0xb0
   15d1c:	strd	r0, [r9, #120]	; 0x78
   15d20:	adc	r0, r3, #0
   15d24:	add	r3, r9, #208	; 0xd0
   15d28:	str	r0, [r9, #180]	; 0xb4
   15d2c:	ldr	r1, [r9, #188]	; 0xbc
   15d30:	ldr	r2, [r9, #184]	; 0xb8
   15d34:	adds	r2, r2, #1
   15d38:	adc	r1, r1, #0
   15d3c:	str	r2, [r9, #184]	; 0xb8
   15d40:	str	r1, [r9, #188]	; 0xbc
   15d44:	ldrh	r0, [r5]
   15d48:	ldrh	r6, [r7]
   15d4c:	cmp	r6, r0
   15d50:	bne	15e84 <UnityAssertEqualIntArray@@Base+0x3d4>
   15d54:	add	r0, pc, #596	; 0x254
   15d58:	vld1.64	{d18-d19}, [r3 :128]
   15d5c:	add	r4, r4, #1
   15d60:	add	r5, r5, #2
   15d64:	add	r7, r7, #2
   15d68:	vld1.64	{d16-d17}, [r0 :128]
   15d6c:	cmp	r8, r4
   15d70:	vadd.i64	q8, q9, q8
   15d74:	vst1.64	{d16-d17}, [r3 :128]
   15d78:	bne	15d34 <UnityAssertEqualIntArray@@Base+0x284>
   15d7c:	b	15de4 <UnityAssertEqualIntArray@@Base+0x334>
   15d80:	ldrd	r0, [r9, #72]	; 0x48
   15d84:	ldrd	r2, [r9, #224]	; 0xe0
   15d88:	mov	r4, #0
   15d8c:	add	ip, r9, #232	; 0xe8
   15d90:	adds	r0, r0, #1
   15d94:	adc	r1, r1, #0
   15d98:	strd	r0, [r9, #72]	; 0x48
   15d9c:	add	r1, r9, #248	; 0xf8
   15da0:	adds	r2, r2, #1
   15da4:	adc	r3, r3, #0
   15da8:	strd	r2, [r9, #224]	; 0xe0
   15dac:	ldr	r0, [r5]
   15db0:	ldr	r6, [r7]
   15db4:	cmp	r6, r0
   15db8:	bne	15ee0 <UnityAssertEqualIntArray@@Base+0x430>
   15dbc:	add	r0, pc, #492	; 0x1ec
   15dc0:	vld1.64	{d18-d19}, [r1]
   15dc4:	add	r4, r4, #1
   15dc8:	add	r5, r5, #4
   15dcc:	add	r7, r7, #4
   15dd0:	vld1.64	{d16-d17}, [r0 :128]
   15dd4:	cmp	r8, r4
   15dd8:	vadd.i64	q8, q9, q8
   15ddc:	vst1.64	{d16-d17}, [r1]
   15de0:	bne	15da0 <UnityAssertEqualIntArray@@Base+0x2f0>
   15de4:	ldrd	r0, [ip]
   15de8:	adds	r0, r0, #1
   15dec:	adc	r1, r1, #0
   15df0:	strd	r0, [ip]
   15df4:	add	r0, r9, #264	; 0x108
   15df8:	ldrd	r2, [r0]
   15dfc:	adds	r2, r2, #1
   15e00:	adc	r3, r3, #0
   15e04:	strd	r2, [r0]
   15e08:	ldr	r0, [r9, #272]	; 0x110
   15e0c:	ldr	r1, [r9, #276]	; 0x114
   15e10:	adds	r0, r0, #1
   15e14:	adc	r1, r1, #0
   15e18:	str	r0, [r9, #272]	; 0x110
   15e1c:	str	r1, [r9, #276]	; 0x114
   15e20:	sub	sp, fp, #28
   15e24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e28:	ldrd	r0, [r9, #152]	; 0x98
   15e2c:	mov	r6, lr
   15e30:	adds	r0, r0, #1
   15e34:	adc	r1, r1, #0
   15e38:	strd	r0, [r9, #152]	; 0x98
   15e3c:	ldr	r0, [fp, #8]
   15e40:	bl	15720 <UnityAssertBits@@Base+0x130>
   15e44:	ldr	r0, [pc, #384]	; 15fcc <UnityAssertEqualIntArray@@Base+0x51c>
   15e48:	ldr	r0, [pc, r0]
   15e4c:	bl	145d0 <UnityPrint@@Base>
   15e50:	mov	r0, r4
   15e54:	bl	15020 <UnityPrintNumberUnsigned@@Base>
   15e58:	ldr	r0, [pc, #368]	; 15fd0 <UnityAssertEqualIntArray@@Base+0x520>
   15e5c:	ldr	r0, [pc, r0]
   15e60:	bl	145d0 <UnityPrint@@Base>
   15e64:	ldrsb	r0, [r7]
   15e68:	mov	r1, r6
   15e6c:	bl	14ce0 <UnityPrintNumberByStyle@@Base>
   15e70:	ldr	r0, [pc, #348]	; 15fd4 <UnityAssertEqualIntArray@@Base+0x524>
   15e74:	ldr	r0, [pc, r0]
   15e78:	bl	145d0 <UnityPrint@@Base>
   15e7c:	ldrsb	r0, [r5]
   15e80:	b	15f38 <UnityAssertEqualIntArray@@Base+0x488>
   15e84:	ldrd	r0, [r9, #200]	; 0xc8
   15e88:	mov	r6, lr
   15e8c:	adds	r0, r0, #1
   15e90:	adc	r1, r1, #0
   15e94:	strd	r0, [r9, #200]	; 0xc8
   15e98:	ldr	r0, [fp, #8]
   15e9c:	bl	15720 <UnityAssertBits@@Base+0x130>
   15ea0:	ldr	r0, [pc, #308]	; 15fdc <UnityAssertEqualIntArray@@Base+0x52c>
   15ea4:	ldr	r0, [pc, r0]
   15ea8:	bl	145d0 <UnityPrint@@Base>
   15eac:	mov	r0, r4
   15eb0:	bl	15020 <UnityPrintNumberUnsigned@@Base>
   15eb4:	ldr	r0, [pc, #292]	; 15fe0 <UnityAssertEqualIntArray@@Base+0x530>
   15eb8:	ldr	r0, [pc, r0]
   15ebc:	bl	145d0 <UnityPrint@@Base>
   15ec0:	ldrsh	r0, [r7]
   15ec4:	mov	r1, r6
   15ec8:	bl	14ce0 <UnityPrintNumberByStyle@@Base>
   15ecc:	ldr	r0, [pc, #272]	; 15fe4 <UnityAssertEqualIntArray@@Base+0x534>
   15ed0:	ldr	r0, [pc, r0]
   15ed4:	bl	145d0 <UnityPrint@@Base>
   15ed8:	ldrsh	r0, [r5]
   15edc:	b	15f38 <UnityAssertEqualIntArray@@Base+0x488>
   15ee0:	ldrd	r0, [r9, #240]	; 0xf0
   15ee4:	mov	r6, lr
   15ee8:	adds	r0, r0, #1
   15eec:	adc	r1, r1, #0
   15ef0:	strd	r0, [r9, #240]	; 0xf0
   15ef4:	ldr	r0, [fp, #8]
   15ef8:	bl	15720 <UnityAssertBits@@Base+0x130>
   15efc:	ldr	r0, [pc, #228]	; 15fe8 <UnityAssertEqualIntArray@@Base+0x538>
   15f00:	ldr	r0, [pc, r0]
   15f04:	bl	145d0 <UnityPrint@@Base>
   15f08:	mov	r0, r4
   15f0c:	bl	15020 <UnityPrintNumberUnsigned@@Base>
   15f10:	ldr	r0, [pc, #212]	; 15fec <UnityAssertEqualIntArray@@Base+0x53c>
   15f14:	ldr	r0, [pc, r0]
   15f18:	bl	145d0 <UnityPrint@@Base>
   15f1c:	ldr	r0, [r7]
   15f20:	mov	r1, r6
   15f24:	bl	14ce0 <UnityPrintNumberByStyle@@Base>
   15f28:	ldr	r0, [pc, #192]	; 15ff0 <UnityAssertEqualIntArray@@Base+0x540>
   15f2c:	ldr	r0, [pc, r0]
   15f30:	bl	145d0 <UnityPrint@@Base>
   15f34:	ldr	r0, [r5]
   15f38:	mov	r1, r6
   15f3c:	bl	14ce0 <UnityPrintNumberByStyle@@Base>
   15f40:	mov	r0, sl
   15f44:	bl	15838 <UnityAssertBits@@Base+0x248>
   15f48:	ldr	r1, [pc, #136]	; 15fd8 <UnityAssertEqualIntArray@@Base+0x528>
   15f4c:	mov	r0, #1
   15f50:	ldr	r1, [pc, r1]
   15f54:	str	r0, [r1, #32]
   15f58:	add	r0, r1, #40	; 0x28
   15f5c:	mov	r1, #1
   15f60:	bl	12628 <longjmp@plt>
   15f64:	ldrd	r0, [r9, #32]
   15f68:	adds	r0, r0, #1
   15f6c:	adc	r1, r1, #0
   15f70:	strd	r0, [r9, #32]
   15f74:	mov	r0, r2
   15f78:	bl	15720 <UnityAssertBits@@Base+0x130>
   15f7c:	ldr	r0, [pc, #112]	; 15ff4 <UnityAssertEqualIntArray@@Base+0x544>
   15f80:	ldr	r0, [pc, r0]
   15f84:	bl	145d0 <UnityPrint@@Base>
   15f88:	mov	r0, sl
   15f8c:	bl	15838 <UnityAssertBits@@Base+0x248>
   15f90:	mov	r0, #1
   15f94:	mov	r1, #1
   15f98:	str	r0, [r4, #32]
   15f9c:	add	r0, r4, #40	; 0x28
   15fa0:	bl	12628 <longjmp@plt>
   15fa4:	nop	{0}
   15fa8:	nop	{0}
   15fac:	nop	{0}
   15fb0:	andeq	r0, r0, r1
   15fb4:	andeq	r0, r0, r0
   15fb8:	andeq	r0, r0, r1
   15fbc:	andeq	r0, r0, r0
   15fc0:	andeq	sl, r1, r8, asr #26
   15fc4:	andeq	sl, r1, ip, asr #26
   15fc8:	andeq	sl, r1, r8, asr #12
   15fcc:	ldrdeq	sl, [r1], -r8
   15fd0:	muleq	r1, r8, r2
   15fd4:	andeq	sl, r1, r4, ror #5
   15fd8:	andeq	sl, r1, r4, ror #3
   15fdc:	andeq	sl, r1, ip, ror r2
   15fe0:	andeq	sl, r1, ip, lsr r2
   15fe4:	andeq	sl, r1, r8, lsl #5
   15fe8:	andeq	sl, r1, r0, lsr #4
   15fec:	andeq	sl, r1, r0, ror #3
   15ff0:	andeq	sl, r1, ip, lsr #4
   15ff4:	strdeq	sl, [r1], -r4
   15ff8:	push	{r4, r5, r7, sl, fp, lr}
   15ffc:	add	fp, sp, #16
   16000:	mov	r5, r3
   16004:	ldr	r3, [pc, #296]	; 16134 <UnityAssertEqualIntArray@@Base+0x684>
   16008:	ldr	r4, [pc, #296]	; 16138 <UnityAssertEqualIntArray@@Base+0x688>
   1600c:	ldr	r4, [pc, r4]
   16010:	add	r3, pc, r3
   16014:	adds	r4, r4, #1
   16018:	str	r4, [r3]
   1601c:	ldr	r4, [r3, #4]
   16020:	adc	r4, r4, #0
   16024:	str	r4, [r3, #4]
   16028:	orrs	r4, r0, r1
   1602c:	bne	16040 <UnityAssertEqualIntArray@@Base+0x590>
   16030:	add	r1, r3, #24
   16034:	add	r2, r3, #8
   16038:	mov	r0, #1
   1603c:	b	1608c <UnityAssertEqualIntArray@@Base+0x5dc>
   16040:	ldr	r4, [r3, #16]
   16044:	ldr	r7, [r3, #20]
   16048:	adds	r4, r4, #1
   1604c:	adc	r7, r7, #0
   16050:	cmp	r0, #0
   16054:	str	r4, [r3, #16]
   16058:	str	r7, [r3, #20]
   1605c:	beq	160c8 <UnityAssertEqualIntArray@@Base+0x618>
   16060:	ldr	r0, [r3, #40]	; 0x28
   16064:	ldr	r7, [r3, #44]	; 0x2c
   16068:	adds	r0, r0, #1
   1606c:	adc	r7, r7, #0
   16070:	cmp	r1, #0
   16074:	str	r0, [r3, #40]	; 0x28
   16078:	str	r7, [r3, #44]	; 0x2c
   1607c:	beq	160ec <UnityAssertEqualIntArray@@Base+0x63c>
   16080:	add	r1, r3, #64	; 0x40
   16084:	add	r2, r3, #56	; 0x38
   16088:	mov	r0, #0
   1608c:	ldrd	r4, [r2]
   16090:	adds	r4, r4, #1
   16094:	adc	r5, r5, #0
   16098:	strd	r4, [r2]
   1609c:	ldm	r1, {r2, r5}
   160a0:	adds	r2, r2, #1
   160a4:	adc	r5, r5, #0
   160a8:	stm	r1, {r2, r5}
   160ac:	ldr	r2, [r3, #72]	; 0x48
   160b0:	ldr	r1, [r3, #76]	; 0x4c
   160b4:	adds	r2, r2, #1
   160b8:	adc	r1, r1, #0
   160bc:	str	r2, [r3, #72]	; 0x48
   160c0:	str	r1, [r3, #76]	; 0x4c
   160c4:	pop	{r4, r5, r7, sl, fp, pc}
   160c8:	ldrd	r0, [r3, #32]
   160cc:	adds	r0, r0, #1
   160d0:	adc	r1, r1, #0
   160d4:	strd	r0, [r3, #32]
   160d8:	mov	r0, r2
   160dc:	bl	15720 <UnityAssertBits@@Base+0x130>
   160e0:	ldr	r0, [pc, #84]	; 1613c <UnityAssertEqualIntArray@@Base+0x68c>
   160e4:	ldr	r0, [pc, r0]
   160e8:	b	1610c <UnityAssertEqualIntArray@@Base+0x65c>
   160ec:	ldrd	r0, [r3, #48]	; 0x30
   160f0:	adds	r0, r0, #1
   160f4:	adc	r1, r1, #0
   160f8:	strd	r0, [r3, #48]	; 0x30
   160fc:	mov	r0, r2
   16100:	bl	15720 <UnityAssertBits@@Base+0x130>
   16104:	ldr	r0, [pc, #56]	; 16144 <UnityAssertEqualIntArray@@Base+0x694>
   16108:	ldr	r0, [pc, r0]
   1610c:	bl	145d0 <UnityPrint@@Base>
   16110:	mov	r0, r5
   16114:	bl	15838 <UnityAssertBits@@Base+0x248>
   16118:	ldr	r0, [pc, #32]	; 16140 <UnityAssertEqualIntArray@@Base+0x690>
   1611c:	mov	r1, #1
   16120:	ldr	r0, [pc, r0]
   16124:	str	r1, [r0, #32]
   16128:	add	r0, r0, #40	; 0x28
   1612c:	mov	r1, #1
   16130:	bl	12628 <longjmp@plt>
   16134:	andeq	sl, r1, r8, lsr #18
   16138:	andeq	sl, r1, ip, lsr #18
   1613c:	andeq	sl, r1, r8, lsr #1
   16140:	andeq	sl, r1, r4, lsl r0
   16144:	andeq	sl, r1, r0, asr #32
   16148:	nop	{0}
   1614c:	nop	{0}

00016150 <UnityAssertEqualFloatArray@@Base>:
   16150:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16154:	add	fp, sp, #28
   16158:	sub	sp, sp, #12
   1615c:	ldr	r8, [pc, #756]	; 16458 <UnityAssertEqualFloatArray@@Base+0x308>
   16160:	mov	r5, r0
   16164:	ldr	r0, [pc, #752]	; 1645c <UnityAssertEqualFloatArray@@Base+0x30c>
   16168:	mov	r7, r1
   1616c:	ldr	r0, [pc, r0]
   16170:	add	r8, pc, r8
   16174:	adds	r0, r0, #1
   16178:	str	r0, [r8]
   1617c:	ldr	r0, [r8, #4]
   16180:	adc	r0, r0, #0
   16184:	str	r0, [r8, #4]
   16188:	ldr	r9, [pc, #720]	; 16460 <UnityAssertEqualFloatArray@@Base+0x310>
   1618c:	ldr	r9, [pc, r9]
   16190:	ldrd	r0, [r9, #32]
   16194:	orrs	r0, r1, r0
   16198:	beq	161b4 <UnityAssertEqualFloatArray@@Base+0x64>
   1619c:	ldrd	r0, [r8, #8]
   161a0:	adds	r0, r0, #1
   161a4:	adc	r1, r1, #0
   161a8:	strd	r0, [r8, #8]
   161ac:	add	r0, r8, #24
   161b0:	b	16368 <UnityAssertEqualFloatArray@@Base+0x218>
   161b4:	ldrd	r0, [r8, #16]
   161b8:	mov	r6, r2
   161bc:	ldr	r2, [fp, #8]
   161c0:	mov	r4, r3
   161c4:	adds	r0, r0, #1
   161c8:	adc	r1, r1, #0
   161cc:	cmp	r6, #0
   161d0:	strd	r0, [r8, #16]
   161d4:	beq	163f8 <UnityAssertEqualFloatArray@@Base+0x2a8>
   161d8:	ldrd	r0, [r8, #40]	; 0x28
   161dc:	mov	r3, r4
   161e0:	adds	r0, r0, #1
   161e4:	adc	r1, r1, #0
   161e8:	strd	r0, [r8, #40]	; 0x28
   161ec:	mov	r0, r5
   161f0:	mov	r1, r7
   161f4:	bl	15ff8 <UnityAssertEqualIntArray@@Base+0x548>
   161f8:	cmp	r0, #1
   161fc:	bne	16218 <UnityAssertEqualFloatArray@@Base+0xc8>
   16200:	ldrd	r0, [r8, #48]	; 0x30
   16204:	adds	r0, r0, #1
   16208:	adc	r1, r1, #0
   1620c:	strd	r0, [r8, #48]	; 0x30
   16210:	add	r0, r8, #64	; 0x40
   16214:	b	16368 <UnityAssertEqualFloatArray@@Base+0x218>
   16218:	ldrd	r2, [r8, #56]	; 0x38
   1621c:	vldr	s0, [pc, #556]	; 16450 <UnityAssertEqualFloatArray@@Base+0x300>
   16220:	vldr	s2, [pc, #556]	; 16454 <UnityAssertEqualFloatArray@@Base+0x304>
   16224:	ldr	r0, [r8, #72]	; 0x48
   16228:	ldr	r9, [r8, #76]	; 0x4c
   1622c:	add	r1, r8, #96	; 0x60
   16230:	str	r4, [sp]
   16234:	mov	r4, #0
   16238:	add	lr, r8, #120	; 0x78
   1623c:	add	sl, r8, #128	; 0x80
   16240:	str	r1, [sp, #8]
   16244:	add	r1, r8, #104	; 0x68
   16248:	str	r1, [sp, #4]
   1624c:	adds	r2, r2, #1
   16250:	adc	r3, r3, #0
   16254:	strd	r2, [r8, #56]	; 0x38
   16258:	adds	r0, r0, #1
   1625c:	adc	r9, r9, #0
   16260:	str	r0, [r8, #72]	; 0x48
   16264:	str	r9, [r8, #76]	; 0x4c
   16268:	vldr	s4, [r7]
   1626c:	vldr	s6, [r5]
   16270:	vsub.f32	s4, s6, s4
   16274:	vcmpe.f32	s4, #0.0
   16278:	vmrs	APSR_nzcv, fpscr
   1627c:	bpl	1629c <UnityAssertEqualFloatArray@@Base+0x14c>
   16280:	ldrd	r2, [r8, #88]	; 0x58
   16284:	vsub.f32	s4, s0, s4
   16288:	ldr	ip, [sp, #4]
   1628c:	adds	r2, r2, #1
   16290:	adc	r3, r3, #0
   16294:	strd	r2, [r8, #88]	; 0x58
   16298:	b	162a0 <UnityAssertEqualFloatArray@@Base+0x150>
   1629c:	ldr	ip, [sp, #8]
   162a0:	ldrd	r2, [ip]
   162a4:	adds	r2, r2, #1
   162a8:	adc	r3, r3, #0
   162ac:	strd	r2, [ip]
   162b0:	vldr	s6, [r5]
   162b4:	vmul.f32	s6, s6, s2
   162b8:	vcmpe.f32	s6, #0.0
   162bc:	vmrs	APSR_nzcv, fpscr
   162c0:	bpl	162e0 <UnityAssertEqualFloatArray@@Base+0x190>
   162c4:	ldrd	r2, [r8, #112]	; 0x70
   162c8:	vsub.f32	s6, s0, s6
   162cc:	adds	r2, r2, #1
   162d0:	adc	r3, r3, #0
   162d4:	strd	r2, [r8, #112]	; 0x70
   162d8:	mov	r2, sl
   162dc:	b	162e4 <UnityAssertEqualFloatArray@@Base+0x194>
   162e0:	mov	r2, lr
   162e4:	vmul.f32	s8, s4, s0
   162e8:	ldr	r3, [r2]
   162ec:	ldr	r1, [r2, #4]
   162f0:	adds	r3, r3, #1
   162f4:	vcmp.f32	s8, #0.0
   162f8:	adc	r1, r1, #0
   162fc:	str	r3, [r2]
   16300:	str	r1, [r2, #4]
   16304:	vmrs	APSR_nzcv, fpscr
   16308:	bne	16390 <UnityAssertEqualFloatArray@@Base+0x240>
   1630c:	ldrd	r2, [r8, #144]	; 0x90
   16310:	vcmpe.f32	s4, s6
   16314:	adds	r2, r2, #1
   16318:	adc	r3, r3, #0
   1631c:	vmrs	APSR_nzcv, fpscr
   16320:	strd	r2, [r8, #144]	; 0x90
   16324:	bgt	16398 <UnityAssertEqualFloatArray@@Base+0x248>
   16328:	add	r2, pc, #272	; 0x110
   1632c:	add	r1, r8, #160	; 0xa0
   16330:	add	r4, r4, #1
   16334:	add	r7, r7, #4
   16338:	add	r5, r5, #4
   1633c:	vld1.64	{d16-d17}, [r2 :128]
   16340:	vld1.64	{d18-d19}, [r1 :128]
   16344:	cmp	r6, r4
   16348:	vadd.i64	q8, q9, q8
   1634c:	vst1.64	{d16-d17}, [r1 :128]
   16350:	bne	16258 <UnityAssertEqualFloatArray@@Base+0x108>
   16354:	ldrd	r0, [r8, #80]	; 0x50
   16358:	adds	r0, r0, #1
   1635c:	adc	r1, r1, #0
   16360:	strd	r0, [r8, #80]	; 0x50
   16364:	add	r0, r8, #176	; 0xb0
   16368:	ldrd	r2, [r0]
   1636c:	adds	r2, r2, #1
   16370:	adc	r3, r3, #0
   16374:	strd	r2, [r0]
   16378:	ldrd	r0, [r8, #184]	; 0xb8
   1637c:	adds	r0, r0, #1
   16380:	adc	r1, r1, #0
   16384:	strd	r0, [r8, #184]	; 0xb8
   16388:	sub	sp, fp, #28
   1638c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16390:	add	r0, r8, #136	; 0x88
   16394:	b	1639c <UnityAssertEqualFloatArray@@Base+0x24c>
   16398:	add	r0, r8, #152	; 0x98
   1639c:	ldrd	r2, [r0]
   163a0:	adds	r2, r2, #1
   163a4:	adc	r3, r3, #0
   163a8:	strd	r2, [r0]
   163ac:	ldr	r0, [fp, #8]
   163b0:	bl	15720 <UnityAssertBits@@Base+0x130>
   163b4:	ldr	r0, [pc, #168]	; 16464 <UnityAssertEqualFloatArray@@Base+0x314>
   163b8:	ldr	r0, [pc, r0]
   163bc:	bl	145d0 <UnityPrint@@Base>
   163c0:	mov	r0, r4
   163c4:	bl	15020 <UnityPrintNumberUnsigned@@Base>
   163c8:	ldr	r0, [pc, #152]	; 16468 <UnityAssertEqualFloatArray@@Base+0x318>
   163cc:	ldr	r0, [pc, r0]
   163d0:	bl	145d0 <UnityPrint@@Base>
   163d4:	ldr	r0, [sp]
   163d8:	bl	15838 <UnityAssertBits@@Base+0x248>
   163dc:	ldr	r1, [pc, #136]	; 1646c <UnityAssertEqualFloatArray@@Base+0x31c>
   163e0:	mov	r0, #1
   163e4:	ldr	r1, [pc, r1]
   163e8:	str	r0, [r1, #32]
   163ec:	add	r0, r1, #40	; 0x28
   163f0:	mov	r1, #1
   163f4:	bl	12628 <longjmp@plt>
   163f8:	ldrd	r0, [r8, #32]
   163fc:	adds	r0, r0, #1
   16400:	adc	r1, r1, #0
   16404:	strd	r0, [r8, #32]
   16408:	mov	r0, r2
   1640c:	bl	15720 <UnityAssertBits@@Base+0x130>
   16410:	ldr	r0, [pc, #88]	; 16470 <UnityAssertEqualFloatArray@@Base+0x320>
   16414:	ldr	r0, [pc, r0]
   16418:	bl	145d0 <UnityPrint@@Base>
   1641c:	mov	r0, r4
   16420:	bl	15838 <UnityAssertBits@@Base+0x248>
   16424:	mov	r0, #1
   16428:	mov	r1, #1
   1642c:	str	r0, [r9, #32]
   16430:	add	r0, r9, #40	; 0x28
   16434:	bl	12628 <longjmp@plt>
   16438:	nop	{0}
   1643c:	nop	{0}
   16440:	andeq	r0, r0, r1
   16444:	andeq	r0, r0, r0
   16448:	andeq	r0, r0, r1
	...
   16454:	strcc	ip, [r7, -ip, lsr #11]!
   16458:	andeq	sl, r1, r8, lsl r8
   1645c:	andeq	sl, r1, ip, lsl r8
   16460:	andeq	r9, r1, r8, lsr #31
   16464:	andeq	r9, r1, r8, ror #26
   16468:	andeq	r9, r1, r4, asr #26
   1646c:	andeq	r9, r1, r0, asr sp
   16470:	andeq	r9, r1, r0, ror #26

00016474 <UnityAssertFloatsWithin@@Base>:
   16474:	push	{r4, r5, r6, r7, fp, lr}
   16478:	add	fp, sp, #16
   1647c:	mov	r4, r0
   16480:	ldr	r0, [pc, #396]	; 16614 <UnityAssertFloatsWithin@@Base+0x1a0>
   16484:	ldr	r2, [pc, #396]	; 16618 <UnityAssertFloatsWithin@@Base+0x1a4>
   16488:	ldr	r2, [pc, r2]
   1648c:	add	r0, pc, r0
   16490:	adds	r2, r2, #1
   16494:	str	r2, [r0]
   16498:	ldr	r2, [r0, #4]
   1649c:	adc	r2, r2, #0
   164a0:	str	r2, [r0, #4]
   164a4:	ldr	r5, [pc, #368]	; 1661c <UnityAssertFloatsWithin@@Base+0x1a8>
   164a8:	ldr	r5, [pc, r5]
   164ac:	ldrd	r2, [r5, #32]
   164b0:	orrs	r2, r3, r2
   164b4:	beq	164c4 <UnityAssertFloatsWithin@@Base+0x50>
   164b8:	add	r1, r0, #24
   164bc:	add	r2, r0, #8
   164c0:	b	16590 <UnityAssertFloatsWithin@@Base+0x11c>
   164c4:	vsub.f32	s2, s2, s1
   164c8:	ldrd	r2, [r0, #16]
   164cc:	adds	r2, r2, #1
   164d0:	vcmpe.f32	s2, #0.0
   164d4:	adc	r3, r3, #0
   164d8:	strd	r2, [r0, #16]
   164dc:	vmrs	APSR_nzcv, fpscr
   164e0:	bpl	16504 <UnityAssertFloatsWithin@@Base+0x90>
   164e4:	vldr	s4, [pc, #292]	; 16610 <UnityAssertFloatsWithin@@Base+0x19c>
   164e8:	ldrd	r2, [r0, #32]
   164ec:	adds	r2, r2, #1
   164f0:	vsub.f32	s2, s4, s2
   164f4:	adc	r3, r3, #0
   164f8:	strd	r2, [r0, #32]
   164fc:	add	r2, r0, #48	; 0x30
   16500:	b	16508 <UnityAssertFloatsWithin@@Base+0x94>
   16504:	add	r2, r0, #40	; 0x28
   16508:	ldrd	r6, [r2]
   1650c:	vcmpe.f32	s0, #0.0
   16510:	adds	r6, r6, #1
   16514:	adc	r7, r7, #0
   16518:	vmrs	APSR_nzcv, fpscr
   1651c:	strd	r6, [r2]
   16520:	bpl	16544 <UnityAssertFloatsWithin@@Base+0xd0>
   16524:	vldr	s4, [pc, #228]	; 16610 <UnityAssertFloatsWithin@@Base+0x19c>
   16528:	ldrd	r2, [r0, #56]	; 0x38
   1652c:	adds	r2, r2, #1
   16530:	vsub.f32	s0, s4, s0
   16534:	adc	r3, r3, #0
   16538:	strd	r2, [r0, #56]	; 0x38
   1653c:	add	r2, r0, #72	; 0x48
   16540:	b	16548 <UnityAssertFloatsWithin@@Base+0xd4>
   16544:	add	r2, r0, #64	; 0x40
   16548:	vldr	s4, [pc, #192]	; 16610 <UnityAssertFloatsWithin@@Base+0x19c>
   1654c:	ldrd	r6, [r2]
   16550:	adds	r6, r6, #1
   16554:	vmul.f32	s4, s2, s4
   16558:	adc	r7, r7, #0
   1655c:	strd	r6, [r2]
   16560:	vcmp.f32	s4, #0.0
   16564:	vmrs	APSR_nzcv, fpscr
   16568:	bne	165c4 <UnityAssertFloatsWithin@@Base+0x150>
   1656c:	ldrd	r2, [r0, #88]	; 0x58
   16570:	vcmpe.f32	s0, s2
   16574:	adds	r2, r2, #1
   16578:	adc	r3, r3, #0
   1657c:	vmrs	APSR_nzcv, fpscr
   16580:	strd	r2, [r0, #88]	; 0x58
   16584:	bmi	165cc <UnityAssertFloatsWithin@@Base+0x158>
   16588:	add	r1, r0, #112	; 0x70
   1658c:	add	r2, r0, #104	; 0x68
   16590:	ldrd	r4, [r2]
   16594:	adds	r4, r4, #1
   16598:	adc	r5, r5, #0
   1659c:	strd	r4, [r2]
   165a0:	ldrd	r2, [r1]
   165a4:	adds	r2, r2, #1
   165a8:	adc	r3, r3, #0
   165ac:	strd	r2, [r1]
   165b0:	ldrd	r2, [r0, #120]	; 0x78
   165b4:	adds	r2, r2, #1
   165b8:	adc	r3, r3, #0
   165bc:	strd	r2, [r0, #120]	; 0x78
   165c0:	pop	{r4, r5, r6, r7, fp, pc}
   165c4:	add	r0, r0, #80	; 0x50
   165c8:	b	165d0 <UnityAssertFloatsWithin@@Base+0x15c>
   165cc:	add	r0, r0, #96	; 0x60
   165d0:	ldrd	r2, [r0]
   165d4:	adds	r2, r2, #1
   165d8:	adc	r3, r3, #0
   165dc:	strd	r2, [r0]
   165e0:	mov	r0, r1
   165e4:	bl	15720 <UnityAssertBits@@Base+0x130>
   165e8:	ldr	r0, [pc, #48]	; 16620 <UnityAssertFloatsWithin@@Base+0x1ac>
   165ec:	ldr	r0, [pc, r0]
   165f0:	bl	145d0 <UnityPrint@@Base>
   165f4:	mov	r0, r4
   165f8:	bl	15838 <UnityAssertBits@@Base+0x248>
   165fc:	mov	r0, #1
   16600:	mov	r1, #1
   16604:	str	r0, [r5, #32]
   16608:	add	r0, r5, #40	; 0x28
   1660c:	bl	12628 <longjmp@plt>
   16610:	andeq	r0, r0, r0
   16614:			; <UNDEFINED> instruction: 0x0001a5bc
   16618:	andeq	sl, r1, r0, asr #11
   1661c:	andeq	r9, r1, ip, lsl #25
   16620:	andeq	r9, r1, r4, lsr #22

00016624 <UnityAssertFloatSpecial@@Base>:
   16624:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16628:	add	fp, sp, #28
   1662c:	sub	sp, sp, #4
   16630:	vpush	{d8}
   16634:	sub	sp, sp, #16
   16638:	ldr	r7, [pc, #792]	; 16958 <UnityAssertFloatSpecial@@Base+0x334>
   1663c:	mov	r8, r0
   16640:	ldr	r0, [pc, #788]	; 1695c <UnityAssertFloatSpecial@@Base+0x338>
   16644:	mov	r4, sp
   16648:	mov	r5, r1
   1664c:	ldr	r0, [pc, r0]
   16650:	add	r7, pc, r7
   16654:	adds	r0, r0, #1
   16658:	str	r0, [r7]
   1665c:	ldr	r0, [r7, #4]
   16660:	adc	r0, r0, #0
   16664:	str	r0, [r7, #4]
   16668:	ldr	r0, [pc, #752]	; 16960 <UnityAssertFloatSpecial@@Base+0x33c>
   1666c:	add	r0, pc, r0
   16670:	vld1.64	{d16-d17}, [r0]
   16674:	vst1.64	{d16-d17}, [r4]
   16678:	ldr	sl, [pc, #740]	; 16964 <UnityAssertFloatSpecial@@Base+0x340>
   1667c:	ldr	sl, [pc, sl]
   16680:	ldrd	r0, [sl, #32]
   16684:	orrs	r0, r1, r0
   16688:	beq	166a4 <UnityAssertFloatSpecial@@Base+0x80>
   1668c:	ldrd	r0, [r7, #8]
   16690:	adds	r0, r0, #1
   16694:	adc	r1, r1, #0
   16698:	strd	r0, [r7, #8]
   1669c:	add	r0, r7, #24
   166a0:	b	16844 <UnityAssertFloatSpecial@@Base+0x220>
   166a4:	ldrd	r0, [r7, #16]
   166a8:	and	r9, r2, #1
   166ac:	adds	r0, r0, #1
   166b0:	adc	r1, r1, #0
   166b4:	cmp	r2, #7
   166b8:	strd	r0, [r7, #16]
   166bc:	bhi	167d0 <UnityAssertFloatSpecial@@Base+0x1ac>
   166c0:	add	r0, pc, #8
   166c4:	vmov.f32	s16, s0
   166c8:	ldr	r1, [r0, r2, lsl #2]
   166cc:	add	pc, r0, r1
   166d0:	andeq	r0, r0, r0, lsr #32
   166d4:	andeq	r0, r0, r0, lsr #32
   166d8:	andeq	r0, r0, r8, asr #1
   166dc:	andeq	r0, r0, r8, asr #1
   166e0:	andeq	r0, r0, r8, asr r0
   166e4:	andeq	r0, r0, r8, asr r0
   166e8:	andeq	r0, r0, ip, ror r0
   166ec:	andeq	r0, r0, ip, ror r0
   166f0:	ldrd	r0, [r7, #48]	; 0x30
   166f4:	vmov.f32	s0, s16
   166f8:	vcmpe.f32	s16, #0.0
   166fc:	mov	r6, #0
   16700:	adds	r0, r0, #1
   16704:	adc	r1, r1, #0
   16708:	vmrs	APSR_nzcv, fpscr
   1670c:	movwgt	r6, #1
   16710:	strd	r0, [r7, #48]	; 0x30
   16714:	bl	126a0 <__isinff@plt>
   16718:	and	r0, r0, r6
   1671c:	mov	r1, #0
   16720:	add	r6, r7, #104	; 0x68
   16724:	b	16818 <UnityAssertFloatSpecial@@Base+0x1f4>
   16728:	ldrd	r0, [r7, #80]	; 0x50
   1672c:	vmov.f32	s0, s16
   16730:	add	r6, r7, #120	; 0x78
   16734:	adds	r0, r0, #1
   16738:	adc	r1, r1, #0
   1673c:	strd	r0, [r7, #80]	; 0x50
   16740:	bl	12658 <__isnanf@plt>
   16744:	mov	r1, #2
   16748:	b	16818 <UnityAssertFloatSpecial@@Base+0x1f4>
   1674c:	ldrd	r0, [r7, #96]	; 0x60
   16750:	vmov.f32	s0, s16
   16754:	adds	r0, r0, #1
   16758:	adc	r1, r1, #0
   1675c:	strd	r0, [r7, #96]	; 0x60
   16760:	bl	126a0 <__isinff@plt>
   16764:	vmov.f32	s0, s16
   16768:	mov	r6, r0
   1676c:	bl	12658 <__isnanf@plt>
   16770:	orrs	r0, r0, r6
   16774:	beq	167fc <UnityAssertFloatSpecial@@Base+0x1d8>
   16778:	ldrd	r0, [r7, #128]	; 0x80
   1677c:	add	r6, r7, #144	; 0x90
   16780:	adds	r0, r0, #1
   16784:	adc	r1, r1, #0
   16788:	strd	r0, [r7, #128]	; 0x80
   1678c:	mov	r1, #3
   16790:	mov	r0, #0
   16794:	b	16818 <UnityAssertFloatSpecial@@Base+0x1f4>
   16798:	ldrd	r0, [r7, #64]	; 0x40
   1679c:	vmov.f32	s0, s16
   167a0:	vcmpe.f32	s16, #0.0
   167a4:	mov	r6, #0
   167a8:	adds	r0, r0, #1
   167ac:	adc	r1, r1, #0
   167b0:	vmrs	APSR_nzcv, fpscr
   167b4:	movwmi	r6, #1
   167b8:	strd	r0, [r7, #64]	; 0x40
   167bc:	bl	126a0 <__isinff@plt>
   167c0:	and	r0, r0, r6
   167c4:	add	r6, r7, #112	; 0x70
   167c8:	mov	r1, #1
   167cc:	b	16818 <UnityAssertFloatSpecial@@Base+0x1f4>
   167d0:	ldrd	r2, [r7, #32]
   167d4:	eor	r0, r9, #1
   167d8:	add	r6, r7, #160	; 0xa0
   167dc:	adds	r2, r2, #1
   167e0:	adc	r3, r3, #0
   167e4:	strd	r2, [r7, #32]
   167e8:	ldr	r1, [pc, #376]	; 16968 <UnityAssertFloatSpecial@@Base+0x344>
   167ec:	ldr	r1, [pc, r1]
   167f0:	str	r1, [sp]
   167f4:	mov	r1, #0
   167f8:	b	16818 <UnityAssertFloatSpecial@@Base+0x1f4>
   167fc:	ldrd	r0, [r7, #136]	; 0x88
   16800:	add	r6, r7, #152	; 0x98
   16804:	adds	r0, r0, #1
   16808:	adc	r1, r1, #0
   1680c:	strd	r0, [r7, #136]	; 0x88
   16810:	mov	r1, #3
   16814:	mov	r0, #1
   16818:	ldrd	r2, [r6]
   1681c:	adds	r2, r2, #1
   16820:	adc	r3, r3, #0
   16824:	cmp	r0, r9
   16828:	strd	r2, [r6]
   1682c:	bne	16874 <UnityAssertFloatSpecial@@Base+0x250>
   16830:	ldrd	r0, [r7, #176]	; 0xb0
   16834:	adds	r0, r0, #1
   16838:	adc	r1, r1, #0
   1683c:	strd	r0, [r7, #176]	; 0xb0
   16840:	add	r0, r7, #232	; 0xe8
   16844:	ldrd	r2, [r0]
   16848:	adds	r2, r2, #1
   1684c:	adc	r3, r3, #0
   16850:	strd	r2, [r0]
   16854:	ldrd	r0, [r7, #240]	; 0xf0
   16858:	adds	r0, r0, #1
   1685c:	adc	r1, r1, #0
   16860:	strd	r0, [r7, #240]	; 0xf0
   16864:	sub	sp, fp, #40	; 0x28
   16868:	vpop	{d8}
   1686c:	add	sp, sp, #4
   16870:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16874:	mov	r6, r1
   16878:	ldrd	r0, [r7, #168]	; 0xa8
   1687c:	adds	r0, r0, #1
   16880:	adc	r1, r1, #0
   16884:	strd	r0, [r7, #168]	; 0xa8
   16888:	mov	r0, r5
   1688c:	bl	15720 <UnityAssertBits@@Base+0x130>
   16890:	ldr	r0, [pc, #212]	; 1696c <UnityAssertFloatSpecial@@Base+0x348>
   16894:	ldr	r0, [pc, r0]
   16898:	bl	145d0 <UnityPrint@@Base>
   1689c:	cmp	r9, #0
   168a0:	beq	168ac <UnityAssertFloatSpecial@@Base+0x288>
   168a4:	add	r0, r7, #184	; 0xb8
   168a8:	b	168cc <UnityAssertFloatSpecial@@Base+0x2a8>
   168ac:	ldrd	r0, [r7, #192]	; 0xc0
   168b0:	adds	r0, r0, #1
   168b4:	adc	r1, r1, #0
   168b8:	strd	r0, [r7, #192]	; 0xc0
   168bc:	ldr	r0, [pc, #172]	; 16970 <UnityAssertFloatSpecial@@Base+0x34c>
   168c0:	ldr	r0, [pc, r0]
   168c4:	bl	145d0 <UnityPrint@@Base>
   168c8:	add	r0, r7, #200	; 0xc8
   168cc:	ldrd	r2, [r0]
   168d0:	ldr	r5, [r4, r6, lsl #2]
   168d4:	adds	r2, r2, #1
   168d8:	adc	r3, r3, #0
   168dc:	strd	r2, [r0]
   168e0:	mov	r0, r5
   168e4:	bl	145d0 <UnityPrint@@Base>
   168e8:	ldr	r0, [pc, #132]	; 16974 <UnityAssertFloatSpecial@@Base+0x350>
   168ec:	ldr	r0, [pc, r0]
   168f0:	bl	145d0 <UnityPrint@@Base>
   168f4:	cmp	r9, #0
   168f8:	beq	16920 <UnityAssertFloatSpecial@@Base+0x2fc>
   168fc:	ldrd	r0, [r7, #208]	; 0xd0
   16900:	adds	r0, r0, #1
   16904:	adc	r1, r1, #0
   16908:	strd	r0, [r7, #208]	; 0xd0
   1690c:	ldr	r0, [pc, #100]	; 16978 <UnityAssertFloatSpecial@@Base+0x354>
   16910:	ldr	r0, [pc, r0]
   16914:	bl	145d0 <UnityPrint@@Base>
   16918:	add	r0, r7, #224	; 0xe0
   1691c:	b	16924 <UnityAssertFloatSpecial@@Base+0x300>
   16920:	add	r0, r7, #216	; 0xd8
   16924:	ldrd	r2, [r0]
   16928:	adds	r2, r2, #1
   1692c:	adc	r3, r3, #0
   16930:	strd	r2, [r0]
   16934:	mov	r0, r5
   16938:	bl	145d0 <UnityPrint@@Base>
   1693c:	mov	r0, r8
   16940:	bl	15838 <UnityAssertBits@@Base+0x248>
   16944:	mov	r0, #1
   16948:	mov	r1, #1
   1694c:	str	r0, [sl, #32]
   16950:	add	r0, sl, #40	; 0x28
   16954:	bl	12628 <longjmp@plt>
   16958:	andeq	sl, r1, r8, ror r4
   1695c:	andeq	sl, r1, ip, ror r4
   16960:	strheq	r9, [r1], -ip
   16964:			; <UNDEFINED> instruction: 0x00019ab8
   16968:	andeq	r9, r1, ip, ror #17
   1696c:	andeq	r9, r1, r0, ror #16
   16970:	andeq	r9, r1, r8, lsr r8
   16974:	andeq	r9, r1, ip, ror #16
   16978:	andeq	r9, r1, r8, ror #15

0001697c <UnityAssertNumbersWithin@@Base>:
   1697c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16980:	add	fp, sp, #28
   16984:	sub	sp, sp, #4
   16988:	mov	r6, r1
   1698c:	ldr	r1, [pc, #528]	; 16ba4 <UnityAssertNumbersWithin@@Base+0x228>
   16990:	mov	r7, r0
   16994:	ldr	r0, [pc, #524]	; 16ba8 <UnityAssertNumbersWithin@@Base+0x22c>
   16998:	mov	r9, r3
   1699c:	ldr	r0, [pc, r0]
   169a0:	add	r1, pc, r1
   169a4:	adds	r0, r0, #1
   169a8:	str	r0, [r1]
   169ac:	ldr	r0, [r1, #4]
   169b0:	adc	r0, r0, #0
   169b4:	str	r0, [r1, #4]
   169b8:	ldr	sl, [pc, #492]	; 16bac <UnityAssertNumbersWithin@@Base+0x230>
   169bc:	ldr	sl, [pc, sl]
   169c0:	ldr	r0, [sl, #32]
   169c4:	ldr	r3, [sl, #36]	; 0x24
   169c8:	orrs	r0, r3, r0
   169cc:	beq	169d8 <UnityAssertNumbersWithin@@Base+0x5c>
   169d0:	add	r0, r1, #8
   169d4:	b	16af8 <UnityAssertNumbersWithin@@Base+0x17c>
   169d8:	ldr	r0, [r1, #16]
   169dc:	ldr	r8, [fp, #12]
   169e0:	ldr	r3, [r1, #20]
   169e4:	mov	r4, r2
   169e8:	adds	r0, r0, #1
   169ec:	adc	r3, r3, #0
   169f0:	tst	r8, #16
   169f4:	str	r0, [r1, #16]
   169f8:	str	r3, [r1, #20]
   169fc:	bne	16a44 <UnityAssertNumbersWithin@@Base+0xc8>
   16a00:	ldr	r0, [r1, #32]
   16a04:	ldr	r3, [r1, #36]	; 0x24
   16a08:	adds	r0, r0, #1
   16a0c:	adc	r3, r3, #0
   16a10:	cmp	r4, r6
   16a14:	str	r0, [r1, #32]
   16a18:	str	r3, [r1, #36]	; 0x24
   16a1c:	bls	16a88 <UnityAssertNumbersWithin@@Base+0x10c>
   16a20:	ldr	r0, [r1, #72]	; 0x48
   16a24:	ldr	r3, [r1, #76]	; 0x4c
   16a28:	add	r2, r1, #88	; 0x58
   16a2c:	adds	r0, r0, #1
   16a30:	adc	r3, r3, #0
   16a34:	str	r0, [r1, #72]	; 0x48
   16a38:	sub	r0, r4, r6
   16a3c:	str	r3, [r1, #76]	; 0x4c
   16a40:	b	16acc <UnityAssertNumbersWithin@@Base+0x150>
   16a44:	ldr	r0, [r1, #24]
   16a48:	ldr	r3, [r1, #28]
   16a4c:	adds	r0, r0, #1
   16a50:	adc	r3, r3, #0
   16a54:	cmp	r4, r6
   16a58:	str	r0, [r1, #24]
   16a5c:	str	r3, [r1, #28]
   16a60:	ble	16aac <UnityAssertNumbersWithin@@Base+0x130>
   16a64:	ldr	r0, [r1, #40]	; 0x28
   16a68:	ldr	r3, [r1, #44]	; 0x2c
   16a6c:	add	r2, r1, #56	; 0x38
   16a70:	adds	r0, r0, #1
   16a74:	adc	r3, r3, #0
   16a78:	str	r0, [r1, #40]	; 0x28
   16a7c:	sub	r0, r4, r6
   16a80:	str	r3, [r1, #44]	; 0x2c
   16a84:	b	16acc <UnityAssertNumbersWithin@@Base+0x150>
   16a88:	ldr	r0, [r1, #80]	; 0x50
   16a8c:	ldr	r3, [r1, #84]	; 0x54
   16a90:	add	r2, r1, #96	; 0x60
   16a94:	adds	r0, r0, #1
   16a98:	str	r0, [r1, #80]	; 0x50
   16a9c:	adc	r3, r3, #0
   16aa0:	sub	r0, r6, r4
   16aa4:	str	r3, [r1, #84]	; 0x54
   16aa8:	b	16acc <UnityAssertNumbersWithin@@Base+0x150>
   16aac:	ldr	r0, [r1, #48]	; 0x30
   16ab0:	ldr	r3, [r1, #52]	; 0x34
   16ab4:	add	r2, r1, #64	; 0x40
   16ab8:	adds	r0, r0, #1
   16abc:	adc	r3, r3, #0
   16ac0:	str	r0, [r1, #48]	; 0x30
   16ac4:	sub	r0, r6, r4
   16ac8:	str	r3, [r1, #52]	; 0x34
   16acc:	cmp	r0, r7
   16ad0:	mov	r3, #0
   16ad4:	movwhi	r3, #1
   16ad8:	str	r3, [sl, #32]
   16adc:	ldm	r2, {r3, r5}
   16ae0:	adds	r3, r3, #1
   16ae4:	adc	r5, r5, #0
   16ae8:	cmp	r0, r7
   16aec:	stm	r2, {r3, r5}
   16af0:	bhi	16b28 <UnityAssertNumbersWithin@@Base+0x1ac>
   16af4:	add	r0, r1, #112	; 0x70
   16af8:	ldrd	r2, [r0]
   16afc:	adds	r2, r2, #1
   16b00:	adc	r3, r3, #0
   16b04:	strd	r2, [r0]
   16b08:	ldr	r0, [r1, #120]	; 0x78
   16b0c:	ldr	r3, [r1, #124]	; 0x7c
   16b10:	adds	r0, r0, #1
   16b14:	adc	r3, r3, #0
   16b18:	str	r0, [r1, #120]	; 0x78
   16b1c:	str	r3, [r1, #124]	; 0x7c
   16b20:	sub	sp, fp, #28
   16b24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b28:	ldrd	r2, [r1, #104]	; 0x68
   16b2c:	ldr	r0, [fp, #8]
   16b30:	adds	r2, r2, #1
   16b34:	adc	r3, r3, #0
   16b38:	strd	r2, [r1, #104]	; 0x68
   16b3c:	bl	15720 <UnityAssertBits@@Base+0x130>
   16b40:	ldr	r0, [pc, #104]	; 16bb0 <UnityAssertNumbersWithin@@Base+0x234>
   16b44:	ldr	r0, [pc, r0]
   16b48:	bl	145d0 <UnityPrint@@Base>
   16b4c:	mov	r0, r7
   16b50:	mov	r1, r8
   16b54:	bl	14ce0 <UnityPrintNumberByStyle@@Base>
   16b58:	ldr	r0, [pc, #84]	; 16bb4 <UnityAssertNumbersWithin@@Base+0x238>
   16b5c:	ldr	r0, [pc, r0]
   16b60:	bl	145d0 <UnityPrint@@Base>
   16b64:	mov	r0, r6
   16b68:	mov	r1, r8
   16b6c:	bl	14ce0 <UnityPrintNumberByStyle@@Base>
   16b70:	ldr	r0, [pc, #64]	; 16bb8 <UnityAssertNumbersWithin@@Base+0x23c>
   16b74:	ldr	r0, [pc, r0]
   16b78:	bl	145d0 <UnityPrint@@Base>
   16b7c:	mov	r0, r4
   16b80:	mov	r1, r8
   16b84:	bl	14ce0 <UnityPrintNumberByStyle@@Base>
   16b88:	mov	r0, r9
   16b8c:	bl	15838 <UnityAssertBits@@Base+0x248>
   16b90:	mov	r0, #1
   16b94:	mov	r1, #1
   16b98:	str	r0, [sl, #32]
   16b9c:	add	r0, sl, #40	; 0x28
   16ba0:	bl	12628 <longjmp@plt>
   16ba4:	andeq	sl, r1, r8, lsr #4
   16ba8:	andeq	sl, r1, ip, lsr #4
   16bac:	andeq	r9, r1, r8, ror r7
   16bb0:	andeq	r9, r1, ip, asr #11
   16bb4:	muleq	r1, r8, r5
   16bb8:	andeq	r9, r1, r4, ror #11

00016bbc <UnityAssertEqualString@@Base>:
   16bbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16bc0:	add	fp, sp, #28
   16bc4:	sub	sp, sp, #20
   16bc8:	ldr	lr, [pc, #584]	; 16e18 <UnityAssertEqualString@@Base+0x25c>
   16bcc:	mov	sl, r1
   16bd0:	ldr	r1, [pc, #580]	; 16e1c <UnityAssertEqualString@@Base+0x260>
   16bd4:	mov	r6, r2
   16bd8:	ldr	r1, [pc, r1]
   16bdc:	add	lr, pc, lr
   16be0:	adds	r1, r1, #1
   16be4:	str	r1, [lr]
   16be8:	ldr	r1, [lr, #4]
   16bec:	adc	r1, r1, #0
   16bf0:	str	r1, [lr, #4]
   16bf4:	ldr	r7, [pc, #548]	; 16e20 <UnityAssertEqualString@@Base+0x264>
   16bf8:	ldr	r7, [pc, r7]
   16bfc:	ldr	r2, [r7, #32]
   16c00:	ldr	r1, [r7, #36]	; 0x24
   16c04:	orrs	r1, r1, r2
   16c08:	beq	16c18 <UnityAssertEqualString@@Base+0x5c>
   16c0c:	add	r1, lr, #24
   16c10:	add	r2, lr, #8
   16c14:	b	16d48 <UnityAssertEqualString@@Base+0x18c>
   16c18:	ldrd	r4, [lr, #16]
   16c1c:	mov	r8, r0
   16c20:	adds	r4, r4, #1
   16c24:	adc	r5, r5, #0
   16c28:	cmp	r0, #0
   16c2c:	cmpne	sl, #0
   16c30:	strd	r4, [lr, #16]
   16c34:	bne	16c58 <UnityAssertEqualString@@Base+0x9c>
   16c38:	ldrd	r0, [lr, #40]	; 0x28
   16c3c:	adds	r0, r0, #1
   16c40:	adc	r1, r1, #0
   16c44:	cmp	r8, sl
   16c48:	strd	r0, [lr, #40]	; 0x28
   16c4c:	bne	16d80 <UnityAssertEqualString@@Base+0x1c4>
   16c50:	add	r9, lr, #128	; 0x80
   16c54:	b	16d28 <UnityAssertEqualString@@Base+0x16c>
   16c58:	ldrd	r4, [lr, #32]
   16c5c:	add	r0, lr, #104	; 0x68
   16c60:	str	r6, [sp, #16]
   16c64:	add	r7, lr, #72	; 0x48
   16c68:	add	r9, lr, #80	; 0x50
   16c6c:	add	ip, lr, #112	; 0x70
   16c70:	mov	r6, r8
   16c74:	str	sl, [sp, #12]
   16c78:	str	r0, [sp, #8]
   16c7c:	add	r0, lr, #88	; 0x58
   16c80:	str	r0, [sp, #4]
   16c84:	adds	r4, r4, #1
   16c88:	adc	r5, r5, #0
   16c8c:	strd	r4, [lr, #32]
   16c90:	add	r5, lr, #48	; 0x30
   16c94:	add	r4, lr, #56	; 0x38
   16c98:	ldrd	r0, [r5]
   16c9c:	adds	r0, r0, #1
   16ca0:	adc	r1, r1, #0
   16ca4:	strd	r0, [r5]
   16ca8:	mov	r5, r4
   16cac:	ldrb	r0, [r6]
   16cb0:	cmp	r0, #0
   16cb4:	bne	16cd8 <UnityAssertEqualString@@Base+0x11c>
   16cb8:	ldrd	r0, [lr, #64]	; 0x40
   16cbc:	mov	r5, r7
   16cc0:	adds	r0, r0, #1
   16cc4:	adc	r1, r1, #0
   16cc8:	strd	r0, [lr, #64]	; 0x40
   16ccc:	ldrb	r0, [sl]
   16cd0:	cmp	r0, #0
   16cd4:	beq	16d18 <UnityAssertEqualString@@Base+0x15c>
   16cd8:	ldrd	r0, [r5]
   16cdc:	adds	r0, r0, #1
   16ce0:	adc	r1, r1, #0
   16ce4:	strd	r0, [r5]
   16ce8:	ldrb	r0, [sl]
   16cec:	ldrb	r1, [r6]
   16cf0:	cmp	r1, r0
   16cf4:	bne	16d98 <UnityAssertEqualString@@Base+0x1dc>
   16cf8:	ldrd	r0, [lr, #96]	; 0x60
   16cfc:	add	r6, r6, #1
   16d00:	add	sl, sl, #1
   16d04:	mov	r5, ip
   16d08:	adds	r0, r0, #1
   16d0c:	adc	r1, r1, #0
   16d10:	strd	r0, [lr, #96]	; 0x60
   16d14:	b	16c98 <UnityAssertEqualString@@Base+0xdc>
   16d18:	ldr	r6, [sp, #16]
   16d1c:	ldr	sl, [sp, #12]
   16d20:	ldr	r7, [pc, #252]	; 16e24 <UnityAssertEqualString@@Base+0x268>
   16d24:	ldr	r7, [pc, r7]
   16d28:	ldrd	r0, [r9]
   16d2c:	adds	r0, r0, #1
   16d30:	adc	r1, r1, #0
   16d34:	cmp	r2, #0
   16d38:	strd	r0, [r9]
   16d3c:	bne	16dd8 <UnityAssertEqualString@@Base+0x21c>
   16d40:	add	r1, lr, #160	; 0xa0
   16d44:	add	r2, lr, #152	; 0x98
   16d48:	ldm	r2, {r0, r3}
   16d4c:	adds	r0, r0, #1
   16d50:	adc	r3, r3, #0
   16d54:	stm	r2, {r0, r3}
   16d58:	ldm	r1, {r0, r3}
   16d5c:	adds	r0, r0, #1
   16d60:	adc	r3, r3, #0
   16d64:	stm	r1, {r0, r3}
   16d68:	ldrd	r0, [lr, #168]	; 0xa8
   16d6c:	adds	r0, r0, #1
   16d70:	adc	r1, r1, #0
   16d74:	strd	r0, [lr, #168]	; 0xa8
   16d78:	sub	sp, fp, #28
   16d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d80:	add	r0, lr, #136	; 0x88
   16d84:	str	sl, [sp, #12]
   16d88:	str	r6, [sp, #16]
   16d8c:	str	r0, [sp, #8]
   16d90:	add	r0, lr, #120	; 0x78
   16d94:	str	r0, [sp, #4]
   16d98:	ldr	r2, [sp, #4]
   16d9c:	ldrd	r0, [r2]
   16da0:	adds	r0, r0, #1
   16da4:	adc	r1, r1, #0
   16da8:	strd	r0, [r2]
   16dac:	mov	r0, #1
   16db0:	ldr	r7, [pc, #112]	; 16e28 <UnityAssertEqualString@@Base+0x26c>
   16db4:	ldr	r7, [pc, r7]
   16db8:	ldr	r2, [sp, #8]
   16dbc:	ldr	r6, [sp, #16]
   16dc0:	ldr	sl, [sp, #12]
   16dc4:	str	r0, [r7, #32]
   16dc8:	ldrd	r0, [r2]
   16dcc:	adds	r0, r0, #1
   16dd0:	adc	r1, r1, #0
   16dd4:	strd	r0, [r2]
   16dd8:	ldrd	r0, [lr, #144]	; 0x90
   16ddc:	adds	r0, r0, #1
   16de0:	adc	r1, r1, #0
   16de4:	strd	r0, [lr, #144]	; 0x90
   16de8:	mov	r0, r3
   16dec:	bl	15720 <UnityAssertBits@@Base+0x130>
   16df0:	mov	r0, r8
   16df4:	mov	r1, sl
   16df8:	bl	16e30 <UnityAssertEqualString@@Base+0x274>
   16dfc:	mov	r0, r6
   16e00:	bl	15838 <UnityAssertBits@@Base+0x248>
   16e04:	mov	r0, #1
   16e08:	mov	r1, #1
   16e0c:	str	r0, [r7, #32]
   16e10:	add	r0, r7, #40	; 0x28
   16e14:	bl	12628 <longjmp@plt>
   16e18:	andeq	sl, r1, ip, rrx
   16e1c:	andeq	sl, r1, r0, ror r0
   16e20:	andeq	r9, r1, ip, lsr r5
   16e24:	andeq	r9, r1, r0, lsl r4
   16e28:	andeq	r9, r1, r0, lsl #7
   16e2c:	nop	{0}
   16e30:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16e34:	add	fp, sp, #24
   16e38:	vpush	{d8-d9}
   16e3c:	ldr	r6, [pc, #412]	; 16fe0 <UnityAssertEqualString@@Base+0x424>
   16e40:	mov	r5, r0
   16e44:	ldr	r0, [pc, #408]	; 16fe4 <UnityAssertEqualString@@Base+0x428>
   16e48:	mov	r8, r1
   16e4c:	ldr	r0, [pc, r0]
   16e50:	add	r6, pc, r6
   16e54:	adds	r0, r0, #1
   16e58:	str	r0, [r6]
   16e5c:	ldr	r0, [r6, #4]
   16e60:	adc	r0, r0, #0
   16e64:	str	r0, [r6, #4]
   16e68:	ldr	r0, [pc, #376]	; 16fe8 <UnityAssertEqualString@@Base+0x42c>
   16e6c:	ldr	r0, [pc, r0]
   16e70:	bl	145d0 <UnityPrint@@Base>
   16e74:	ldr	r7, [pc, #368]	; 16fec <UnityAssertEqualString@@Base+0x430>
   16e78:	cmp	r5, #0
   16e7c:	add	r7, pc, r7
   16e80:	beq	16ee4 <UnityAssertEqualString@@Base+0x328>
   16e84:	add	r0, pc, #324	; 0x144
   16e88:	vld1.64	{d16-d17}, [r7 :128]
   16e8c:	vld1.64	{d8-d9}, [r0 :128]
   16e90:	ldrd	r0, [r6, #8]
   16e94:	adds	r0, r0, #1
   16e98:	vadd.i64	q8, q8, q4
   16e9c:	adc	r1, r1, #0
   16ea0:	strd	r0, [r6, #8]
   16ea4:	mov	r0, #39	; 0x27
   16ea8:	vst1.64	{d16-d17}, [r7 :128]
   16eac:	ldr	r4, [pc, #316]	; 16ff0 <UnityAssertEqualString@@Base+0x434>
   16eb0:	ldr	r4, [pc, r4]
   16eb4:	ldr	r1, [r4]
   16eb8:	bl	127d8 <putc@plt>
   16ebc:	mov	r0, r5
   16ec0:	bl	145d0 <UnityPrint@@Base>
   16ec4:	vld1.64	{d16-d17}, [r7 :128]
   16ec8:	ldr	r1, [r4]
   16ecc:	mov	r0, #39	; 0x27
   16ed0:	vadd.i64	q8, q8, q4
   16ed4:	vst1.64	{d16-d17}, [r7 :128]
   16ed8:	bl	127d8 <putc@plt>
   16edc:	add	r0, r6, #24
   16ee0:	b	16f04 <UnityAssertEqualString@@Base+0x348>
   16ee4:	ldrd	r0, [r6, #16]
   16ee8:	adds	r0, r0, #1
   16eec:	adc	r1, r1, #0
   16ef0:	strd	r0, [r6, #16]
   16ef4:	ldr	r0, [pc, #248]	; 16ff4 <UnityAssertEqualString@@Base+0x438>
   16ef8:	ldr	r0, [pc, r0]
   16efc:	bl	145d0 <UnityPrint@@Base>
   16f00:	add	r0, r6, #32
   16f04:	ldrd	r2, [r0]
   16f08:	adds	r2, r2, #1
   16f0c:	adc	r3, r3, #0
   16f10:	strd	r2, [r0]
   16f14:	ldr	r0, [pc, #220]	; 16ff8 <UnityAssertEqualString@@Base+0x43c>
   16f18:	ldr	r0, [pc, r0]
   16f1c:	bl	145d0 <UnityPrint@@Base>
   16f20:	cmp	r8, #0
   16f24:	beq	16f88 <UnityAssertEqualString@@Base+0x3cc>
   16f28:	add	r0, pc, #160	; 0xa0
   16f2c:	vld1.64	{d16-d17}, [r7 :128]
   16f30:	vld1.64	{d8-d9}, [r0 :128]
   16f34:	ldrd	r0, [r6, #40]	; 0x28
   16f38:	adds	r0, r0, #1
   16f3c:	vadd.i64	q8, q8, q4
   16f40:	adc	r1, r1, #0
   16f44:	strd	r0, [r6, #40]	; 0x28
   16f48:	mov	r0, #39	; 0x27
   16f4c:	vst1.64	{d16-d17}, [r7 :128]
   16f50:	ldr	r4, [pc, #164]	; 16ffc <UnityAssertEqualString@@Base+0x440>
   16f54:	ldr	r4, [pc, r4]
   16f58:	ldr	r1, [r4]
   16f5c:	bl	127d8 <putc@plt>
   16f60:	mov	r0, r8
   16f64:	bl	145d0 <UnityPrint@@Base>
   16f68:	vld1.64	{d16-d17}, [r7 :128]
   16f6c:	ldr	r1, [r4]
   16f70:	mov	r0, #39	; 0x27
   16f74:	vadd.i64	q8, q8, q4
   16f78:	vst1.64	{d16-d17}, [r7 :128]
   16f7c:	bl	127d8 <putc@plt>
   16f80:	add	r0, r6, #56	; 0x38
   16f84:	b	16fa8 <UnityAssertEqualString@@Base+0x3ec>
   16f88:	ldrd	r0, [r6, #48]	; 0x30
   16f8c:	adds	r0, r0, #1
   16f90:	adc	r1, r1, #0
   16f94:	strd	r0, [r6, #48]	; 0x30
   16f98:	ldr	r0, [pc, #96]	; 17000 <UnityAssertEqualString@@Base+0x444>
   16f9c:	ldr	r0, [pc, r0]
   16fa0:	bl	145d0 <UnityPrint@@Base>
   16fa4:	add	r0, r6, #64	; 0x40
   16fa8:	ldrd	r2, [r0]
   16fac:	adds	r2, r2, #1
   16fb0:	adc	r3, r3, #0
   16fb4:	strd	r2, [r0]
   16fb8:	ldrd	r0, [r6, #72]	; 0x48
   16fbc:	adds	r0, r0, #1
   16fc0:	adc	r1, r1, #0
   16fc4:	strd	r0, [r6, #72]	; 0x48
   16fc8:	vpop	{d8-d9}
   16fcc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16fd0:	andeq	r0, r0, r1
   16fd4:	andeq	r0, r0, r0
   16fd8:	andeq	r0, r0, r1
   16fdc:	andeq	r0, r0, r0
   16fe0:	andeq	r9, r1, r8, lsr #29
   16fe4:	andeq	r9, r1, ip, lsr #29
   16fe8:	andeq	r9, r1, r8, lsl #5
   16fec:	muleq	r1, ip, r5
   16ff0:	muleq	r1, ip, r2
   16ff4:	andeq	r9, r1, r0, asr #4
   16ff8:	andeq	r9, r1, r0, asr #4
   16ffc:	strdeq	r9, [r1], -r8
   17000:	muleq	r1, ip, r1

00017004 <UnityAssertEqualStringLen@@Base>:
   17004:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17008:	add	fp, sp, #28
   1700c:	sub	sp, sp, #28
   17010:	mov	r6, r1
   17014:	ldr	r1, [pc, #672]	; 172bc <UnityAssertEqualStringLen@@Base+0x2b8>
   17018:	mov	r4, r2
   1701c:	ldr	r2, [pc, #668]	; 172c0 <UnityAssertEqualStringLen@@Base+0x2bc>
   17020:	mov	r8, r3
   17024:	ldr	r2, [pc, r2]
   17028:	add	r1, pc, r1
   1702c:	adds	r2, r2, #1
   17030:	str	r2, [r1]
   17034:	ldr	r2, [r1, #4]
   17038:	adc	r2, r2, #0
   1703c:	str	r2, [r1, #4]
   17040:	ldr	r7, [pc, #636]	; 172c4 <UnityAssertEqualStringLen@@Base+0x2c0>
   17044:	ldr	r7, [pc, r7]
   17048:	ldr	sl, [r7, #32]
   1704c:	ldr	r3, [r7, #36]	; 0x24
   17050:	orrs	r2, r3, sl
   17054:	beq	17064 <UnityAssertEqualStringLen@@Base+0x60>
   17058:	add	r0, r1, #24
   1705c:	add	r2, r1, #8
   17060:	b	171d8 <UnityAssertEqualStringLen@@Base+0x1d4>
   17064:	ldrd	r2, [r1, #16]
   17068:	str	r0, [sp, #12]
   1706c:	adds	r2, r2, #1
   17070:	adc	r3, r3, #0
   17074:	cmp	r0, #0
   17078:	cmpne	r6, #0
   1707c:	strd	r2, [r1, #16]
   17080:	bne	170a4 <UnityAssertEqualStringLen@@Base+0xa0>
   17084:	ldrd	r2, [r1, #40]	; 0x28
   17088:	adds	r2, r2, #1
   1708c:	adc	r3, r3, #0
   17090:	cmp	r0, r6
   17094:	strd	r2, [r1, #40]	; 0x28
   17098:	bne	17218 <UnityAssertEqualStringLen@@Base+0x214>
   1709c:	add	r3, r1, #144	; 0x90
   170a0:	b	171b8 <UnityAssertEqualStringLen@@Base+0x1b4>
   170a4:	ldrd	r2, [r1, #32]
   170a8:	add	r7, r1, #96	; 0x60
   170ac:	str	r8, [sp, #24]
   170b0:	add	ip, r1, #48	; 0x30
   170b4:	add	r9, r1, #72	; 0x48
   170b8:	add	lr, r1, #128	; 0x80
   170bc:	mov	r8, r4
   170c0:	str	r6, [sp, #16]
   170c4:	str	r4, [sp, #20]
   170c8:	str	r7, [sp, #8]
   170cc:	add	r7, r1, #120	; 0x78
   170d0:	str	r7, [sp, #4]
   170d4:	add	r7, r1, #104	; 0x68
   170d8:	str	r7, [sp]
   170dc:	mov	r7, r0
   170e0:	adds	r2, r2, #1
   170e4:	adc	r3, r3, #0
   170e8:	strd	r2, [r1, #32]
   170ec:	add	r2, r1, #56	; 0x38
   170f0:	add	r3, r1, #80	; 0x50
   170f4:	ldrd	r4, [ip]
   170f8:	adds	r4, r4, #1
   170fc:	adc	r5, r5, #0
   17100:	strd	r4, [ip]
   17104:	mov	r4, r2
   17108:	ldrb	r5, [r7]
   1710c:	cmp	r5, #0
   17110:	bne	17134 <UnityAssertEqualStringLen@@Base+0x130>
   17114:	ldrd	r4, [r1, #64]	; 0x40
   17118:	adds	r4, r4, #1
   1711c:	adc	r5, r5, #0
   17120:	strd	r4, [r1, #64]	; 0x40
   17124:	mov	r4, r9
   17128:	ldrb	r5, [r6]
   1712c:	cmp	r5, #0
   17130:	beq	171a4 <UnityAssertEqualStringLen@@Base+0x1a0>
   17134:	ldm	r4, {r0, r5}
   17138:	adds	r0, r0, #1
   1713c:	adc	r5, r5, #0
   17140:	cmp	r8, #0
   17144:	stm	r4, {r0, r5}
   17148:	beq	171a0 <UnityAssertEqualStringLen@@Base+0x19c>
   1714c:	ldr	r0, [r1, #88]	; 0x58
   17150:	ldr	r5, [r1, #92]	; 0x5c
   17154:	adds	r0, r0, #1
   17158:	adc	r5, r5, #0
   1715c:	str	r0, [r1, #88]	; 0x58
   17160:	str	r5, [r1, #92]	; 0x5c
   17164:	ldrb	r0, [r6]
   17168:	ldrb	r5, [r7]
   1716c:	cmp	r5, r0
   17170:	bne	17234 <UnityAssertEqualStringLen@@Base+0x230>
   17174:	ldr	r0, [r1, #112]	; 0x70
   17178:	ldr	r5, [r1, #116]	; 0x74
   1717c:	add	r7, r7, #1
   17180:	add	r6, r6, #1
   17184:	sub	r8, r8, #1
   17188:	mov	ip, lr
   1718c:	adds	r0, r0, #1
   17190:	adc	r5, r5, #0
   17194:	str	r0, [r1, #112]	; 0x70
   17198:	str	r5, [r1, #116]	; 0x74
   1719c:	b	170f4 <UnityAssertEqualStringLen@@Base+0xf0>
   171a0:	ldr	r3, [sp, #8]
   171a4:	ldr	r8, [sp, #24]
   171a8:	ldr	r4, [sp, #20]
   171ac:	ldr	r7, [pc, #276]	; 172c8 <UnityAssertEqualStringLen@@Base+0x2c4>
   171b0:	ldr	r7, [pc, r7]
   171b4:	ldr	r6, [sp, #16]
   171b8:	ldm	r3, {r0, r5}
   171bc:	adds	r0, r0, #1
   171c0:	adc	r5, r5, #0
   171c4:	cmp	sl, #0
   171c8:	stm	r3, {r0, r5}
   171cc:	bne	17278 <UnityAssertEqualStringLen@@Base+0x274>
   171d0:	add	r0, r1, #176	; 0xb0
   171d4:	add	r2, r1, #168	; 0xa8
   171d8:	ldrd	r4, [r2]
   171dc:	adds	r4, r4, #1
   171e0:	adc	r5, r5, #0
   171e4:	strd	r4, [r2]
   171e8:	ldrd	r2, [r0]
   171ec:	adds	r2, r2, #1
   171f0:	adc	r3, r3, #0
   171f4:	strd	r2, [r0]
   171f8:	ldr	r0, [r1, #184]	; 0xb8
   171fc:	ldr	r3, [r1, #188]	; 0xbc
   17200:	adds	r0, r0, #1
   17204:	adc	r3, r3, #0
   17208:	str	r0, [r1, #184]	; 0xb8
   1720c:	str	r3, [r1, #188]	; 0xbc
   17210:	sub	sp, fp, #28
   17214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17218:	add	r0, r1, #152	; 0x98
   1721c:	str	r6, [sp, #16]
   17220:	str	r4, [sp, #20]
   17224:	str	r8, [sp, #24]
   17228:	str	r0, [sp, #4]
   1722c:	add	r0, r1, #136	; 0x88
   17230:	str	r0, [sp]
   17234:	ldr	r2, [sp]
   17238:	ldm	r2, {r0, r3}
   1723c:	adds	r0, r0, #1
   17240:	adc	r3, r3, #0
   17244:	stm	r2, {r0, r3}
   17248:	mov	r0, #1
   1724c:	ldr	r7, [pc, #120]	; 172cc <UnityAssertEqualStringLen@@Base+0x2c8>
   17250:	ldr	r7, [pc, r7]
   17254:	ldr	r2, [sp, #4]
   17258:	ldr	r8, [sp, #24]
   1725c:	ldr	r4, [sp, #20]
   17260:	ldr	r6, [sp, #16]
   17264:	str	r0, [r7, #32]
   17268:	ldm	r2, {r0, r3}
   1726c:	adds	r0, r0, #1
   17270:	adc	r3, r3, #0
   17274:	stm	r2, {r0, r3}
   17278:	ldrd	r2, [r1, #160]	; 0xa0
   1727c:	ldr	r0, [fp, #8]
   17280:	adds	r2, r2, #1
   17284:	adc	r3, r3, #0
   17288:	strd	r2, [r1, #160]	; 0xa0
   1728c:	bl	15720 <UnityAssertBits@@Base+0x130>
   17290:	ldr	r0, [sp, #12]
   17294:	mov	r1, r6
   17298:	mov	r2, r4
   1729c:	bl	172d0 <UnityAssertEqualStringLen@@Base+0x2cc>
   172a0:	mov	r0, r8
   172a4:	bl	15838 <UnityAssertBits@@Base+0x248>
   172a8:	mov	r0, #1
   172ac:	mov	r1, #1
   172b0:	str	r0, [r7, #32]
   172b4:	add	r0, r7, #40	; 0x28
   172b8:	bl	12628 <longjmp@plt>
   172bc:	andeq	r9, r1, r0, lsr #26
   172c0:	andeq	r9, r1, r4, lsr #26
   172c4:	strdeq	r9, [r1], -r0
   172c8:	andeq	r8, r1, r4, lsl #31
   172cc:	andeq	r8, r1, r4, ror #29
   172d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   172d4:	add	fp, sp, #24
   172d8:	vpush	{d8-d9}
   172dc:	ldr	r7, [pc, #428]	; 17490 <UnityAssertEqualStringLen@@Base+0x48c>
   172e0:	mov	r6, r0
   172e4:	ldr	r0, [pc, #424]	; 17494 <UnityAssertEqualStringLen@@Base+0x490>
   172e8:	mov	r8, r2
   172ec:	mov	r9, r1
   172f0:	ldr	r0, [pc, r0]
   172f4:	add	r7, pc, r7
   172f8:	adds	r0, r0, #1
   172fc:	str	r0, [r7]
   17300:	ldr	r0, [r7, #4]
   17304:	adc	r0, r0, #0
   17308:	str	r0, [r7, #4]
   1730c:	ldr	r0, [pc, #388]	; 17498 <UnityAssertEqualStringLen@@Base+0x494>
   17310:	ldr	r0, [pc, r0]
   17314:	bl	145d0 <UnityPrint@@Base>
   17318:	ldr	r4, [pc, #380]	; 1749c <UnityAssertEqualStringLen@@Base+0x498>
   1731c:	cmp	r6, #0
   17320:	add	r4, pc, r4
   17324:	beq	1738c <UnityAssertEqualStringLen@@Base+0x388>
   17328:	add	r0, pc, #336	; 0x150
   1732c:	vld1.64	{d16-d17}, [r4 :128]
   17330:	vld1.64	{d8-d9}, [r0 :128]
   17334:	ldrd	r0, [r7, #8]
   17338:	adds	r0, r0, #1
   1733c:	vadd.i64	q8, q8, q4
   17340:	adc	r1, r1, #0
   17344:	strd	r0, [r7, #8]
   17348:	mov	r0, #39	; 0x27
   1734c:	vst1.64	{d16-d17}, [r4 :128]
   17350:	ldr	r5, [pc, #328]	; 174a0 <UnityAssertEqualStringLen@@Base+0x49c>
   17354:	ldr	r5, [pc, r5]
   17358:	ldr	r1, [r5]
   1735c:	bl	127d8 <putc@plt>
   17360:	mov	r0, r6
   17364:	mov	r1, r8
   17368:	bl	14a20 <UnityPrintLen@@Base>
   1736c:	vld1.64	{d16-d17}, [r4 :128]
   17370:	ldr	r1, [r5]
   17374:	mov	r0, #39	; 0x27
   17378:	vadd.i64	q8, q8, q4
   1737c:	vst1.64	{d16-d17}, [r4 :128]
   17380:	bl	127d8 <putc@plt>
   17384:	add	r0, r7, #24
   17388:	b	173ac <UnityAssertEqualStringLen@@Base+0x3a8>
   1738c:	ldrd	r0, [r7, #16]
   17390:	adds	r0, r0, #1
   17394:	adc	r1, r1, #0
   17398:	strd	r0, [r7, #16]
   1739c:	ldr	r0, [pc, #256]	; 174a4 <UnityAssertEqualStringLen@@Base+0x4a0>
   173a0:	ldr	r0, [pc, r0]
   173a4:	bl	145d0 <UnityPrint@@Base>
   173a8:	add	r0, r7, #32
   173ac:	ldrd	r2, [r0]
   173b0:	adds	r2, r2, #1
   173b4:	adc	r3, r3, #0
   173b8:	strd	r2, [r0]
   173bc:	ldr	r0, [pc, #228]	; 174a8 <UnityAssertEqualStringLen@@Base+0x4a4>
   173c0:	ldr	r0, [pc, r0]
   173c4:	bl	145d0 <UnityPrint@@Base>
   173c8:	cmp	r9, #0
   173cc:	beq	17434 <UnityAssertEqualStringLen@@Base+0x430>
   173d0:	add	r0, pc, #168	; 0xa8
   173d4:	vld1.64	{d16-d17}, [r4 :128]
   173d8:	vld1.64	{d8-d9}, [r0 :128]
   173dc:	ldrd	r0, [r7, #40]	; 0x28
   173e0:	adds	r0, r0, #1
   173e4:	vadd.i64	q8, q8, q4
   173e8:	adc	r1, r1, #0
   173ec:	strd	r0, [r7, #40]	; 0x28
   173f0:	mov	r0, #39	; 0x27
   173f4:	vst1.64	{d16-d17}, [r4 :128]
   173f8:	ldr	r5, [pc, #172]	; 174ac <UnityAssertEqualStringLen@@Base+0x4a8>
   173fc:	ldr	r5, [pc, r5]
   17400:	ldr	r1, [r5]
   17404:	bl	127d8 <putc@plt>
   17408:	mov	r0, r9
   1740c:	mov	r1, r8
   17410:	bl	14a20 <UnityPrintLen@@Base>
   17414:	vld1.64	{d16-d17}, [r4 :128]
   17418:	ldr	r1, [r5]
   1741c:	mov	r0, #39	; 0x27
   17420:	vadd.i64	q8, q8, q4
   17424:	vst1.64	{d16-d17}, [r4 :128]
   17428:	bl	127d8 <putc@plt>
   1742c:	add	r0, r7, #56	; 0x38
   17430:	b	17454 <UnityAssertEqualStringLen@@Base+0x450>
   17434:	ldrd	r0, [r7, #48]	; 0x30
   17438:	adds	r0, r0, #1
   1743c:	adc	r1, r1, #0
   17440:	strd	r0, [r7, #48]	; 0x30
   17444:	ldr	r0, [pc, #100]	; 174b0 <UnityAssertEqualStringLen@@Base+0x4ac>
   17448:	ldr	r0, [pc, r0]
   1744c:	bl	145d0 <UnityPrint@@Base>
   17450:	add	r0, r7, #64	; 0x40
   17454:	ldrd	r2, [r0]
   17458:	adds	r2, r2, #1
   1745c:	adc	r3, r3, #0
   17460:	strd	r2, [r0]
   17464:	ldrd	r0, [r7, #72]	; 0x48
   17468:	adds	r0, r0, #1
   1746c:	adc	r1, r1, #0
   17470:	strd	r0, [r7, #72]	; 0x48
   17474:	vpop	{d8-d9}
   17478:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1747c:	nop	{0}
   17480:	andeq	r0, r0, r1
   17484:	andeq	r0, r0, r0
   17488:	andeq	r0, r0, r1
   1748c:	andeq	r0, r0, r0
   17490:	andeq	r9, r1, r4, lsl fp
   17494:	andeq	r9, r1, r8, lsl fp
   17498:	andeq	r8, r1, r4, ror #27
   1749c:	strdeq	r9, [r1], -r8
   174a0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   174a4:	muleq	r1, r8, sp
   174a8:	muleq	r1, r8, sp
   174ac:	andeq	r8, r1, r0, asr sp
   174b0:	strdeq	r8, [r1], -r0

000174b4 <UnityAssertEqualStringArray@@Base>:
   174b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174b8:	add	fp, sp, #28
   174bc:	sub	sp, sp, #20
   174c0:	ldr	r7, [pc, #952]	; 17880 <UnityAssertEqualStringArray@@Base+0x3cc>
   174c4:	mov	r5, r0
   174c8:	ldr	r0, [pc, #948]	; 17884 <UnityAssertEqualStringArray@@Base+0x3d0>
   174cc:	mov	r6, r1
   174d0:	ldr	r0, [pc, r0]
   174d4:	add	r7, pc, r7
   174d8:	adds	r0, r0, #1
   174dc:	str	r0, [r7]
   174e0:	ldr	r0, [r7, #4]
   174e4:	adc	r0, r0, #0
   174e8:	str	r0, [r7, #4]
   174ec:	ldr	r8, [pc, #916]	; 17888 <UnityAssertEqualStringArray@@Base+0x3d4>
   174f0:	ldr	r8, [pc, r8]
   174f4:	ldrd	r0, [r8, #32]
   174f8:	orrs	r0, r1, r0
   174fc:	beq	17518 <UnityAssertEqualStringArray@@Base+0x64>
   17500:	ldrd	r0, [r7, #8]
   17504:	adds	r0, r0, #1
   17508:	adc	r1, r1, #0
   1750c:	strd	r0, [r7, #8]
   17510:	add	r0, r7, #24
   17514:	b	17738 <UnityAssertEqualStringArray@@Base+0x284>
   17518:	ldrd	r0, [r7, #16]
   1751c:	mov	sl, r2
   17520:	ldr	r2, [fp, #8]
   17524:	mov	r4, r3
   17528:	adds	r0, r0, #1
   1752c:	adc	r1, r1, #0
   17530:	cmp	sl, #0
   17534:	strd	r0, [r7, #16]
   17538:	beq	17840 <UnityAssertEqualStringArray@@Base+0x38c>
   1753c:	ldrd	r0, [r7, #40]	; 0x28
   17540:	mov	r3, r4
   17544:	adds	r0, r0, #1
   17548:	adc	r1, r1, #0
   1754c:	strd	r0, [r7, #40]	; 0x28
   17550:	mov	r0, r5
   17554:	mov	r1, r6
   17558:	bl	15ff8 <UnityAssertEqualIntArray@@Base+0x548>
   1755c:	cmp	r0, #1
   17560:	bne	1757c <UnityAssertEqualStringArray@@Base+0xc8>
   17564:	ldrd	r0, [r7, #48]	; 0x30
   17568:	adds	r0, r0, #1
   1756c:	adc	r1, r1, #0
   17570:	strd	r0, [r7, #48]	; 0x30
   17574:	add	r0, r7, #64	; 0x40
   17578:	b	17738 <UnityAssertEqualStringArray@@Base+0x284>
   1757c:	add	r0, r7, #192	; 0xc0
   17580:	str	r4, [sp]
   17584:	add	r3, r7, #56	; 0x38
   17588:	mov	r4, #0
   1758c:	add	r2, r7, #80	; 0x50
   17590:	add	r8, r7, #240	; 0xf0
   17594:	add	ip, r7, #96	; 0x60
   17598:	add	lr, r7, #112	; 0x70
   1759c:	str	r0, [sp, #8]
   175a0:	add	r0, r7, #176	; 0xb0
   175a4:	str	r0, [sp, #4]
   175a8:	add	r0, r7, #184	; 0xb8
   175ac:	str	r0, [sp, #16]
   175b0:	add	r0, r7, #104	; 0x68
   175b4:	str	r0, [sp, #12]
   175b8:	ldm	r3, {r0, r9}
   175bc:	adds	r0, r0, #1
   175c0:	adc	r9, r9, #0
   175c4:	stm	r3, {r0, r9}
   175c8:	ldr	r0, [r5, r4, lsl #2]
   175cc:	cmp	r0, #0
   175d0:	mov	r0, r2
   175d4:	beq	176b4 <UnityAssertEqualStringArray@@Base+0x200>
   175d8:	ldr	r0, [r7, #72]	; 0x48
   175dc:	ldr	r3, [r7, #76]	; 0x4c
   175e0:	adds	r0, r0, #1
   175e4:	adc	r3, r3, #0
   175e8:	str	r0, [r7, #72]	; 0x48
   175ec:	str	r3, [r7, #76]	; 0x4c
   175f0:	ldr	r0, [r6, r4, lsl #2]
   175f4:	cmp	r0, #0
   175f8:	mov	r0, ip
   175fc:	beq	176b4 <UnityAssertEqualStringArray@@Base+0x200>
   17600:	ldr	r0, [r7, #88]	; 0x58
   17604:	ldr	r3, [r7, #92]	; 0x5c
   17608:	mov	r9, #0
   1760c:	adds	r0, r0, #1
   17610:	str	r0, [r7, #88]	; 0x58
   17614:	ldr	r0, [sp, #12]
   17618:	adc	r3, r3, #0
   1761c:	str	r3, [r7, #92]	; 0x5c
   17620:	ldr	r3, [r0]
   17624:	ldr	r1, [r0, #4]
   17628:	adds	r3, r3, #1
   1762c:	adc	r1, r1, #0
   17630:	str	r3, [r0]
   17634:	str	r1, [r0, #4]
   17638:	ldr	r0, [r5, r4, lsl #2]
   1763c:	ldrb	r0, [r0, r9]
   17640:	cmp	r0, #0
   17644:	mov	r0, lr
   17648:	bne	17670 <UnityAssertEqualStringArray@@Base+0x1bc>
   1764c:	ldrd	r0, [r7, #120]	; 0x78
   17650:	adds	r0, r0, #1
   17654:	adc	r1, r1, #0
   17658:	strd	r0, [r7, #120]	; 0x78
   1765c:	ldr	r0, [r6, r4, lsl #2]
   17660:	ldrb	r0, [r0, r9]
   17664:	cmp	r0, #0
   17668:	beq	176dc <UnityAssertEqualStringArray@@Base+0x228>
   1766c:	add	r0, r7, #128	; 0x80
   17670:	ldm	r0, {r1, r3}
   17674:	adds	r1, r1, #1
   17678:	adc	r3, r3, #0
   1767c:	stm	r0, {r1, r3}
   17680:	ldr	r0, [r6, r4, lsl #2]
   17684:	ldr	r1, [r5, r4, lsl #2]
   17688:	ldrb	r0, [r0, r9]
   1768c:	ldrb	r1, [r1, r9]
   17690:	cmp	r1, r0
   17694:	bne	17768 <UnityAssertEqualStringArray@@Base+0x2b4>
   17698:	ldrd	r0, [r7, #152]	; 0x98
   1769c:	add	r9, r9, #1
   176a0:	adds	r0, r0, #1
   176a4:	adc	r1, r1, #0
   176a8:	strd	r0, [r7, #152]	; 0x98
   176ac:	add	r0, r7, #168	; 0xa8
   176b0:	b	17620 <UnityAssertEqualStringArray@@Base+0x16c>
   176b4:	ldm	r0, {r1, r3}
   176b8:	adds	r1, r1, #1
   176bc:	adc	r3, r3, #0
   176c0:	stm	r0, {r1, r3}
   176c4:	ldr	r0, [r6, r4, lsl #2]
   176c8:	ldr	r1, [r5, r4, lsl #2]
   176cc:	cmp	r1, r0
   176d0:	ldr	r0, [sp, #16]
   176d4:	beq	176e0 <UnityAssertEqualStringArray@@Base+0x22c>
   176d8:	b	17778 <UnityAssertEqualStringArray@@Base+0x2c4>
   176dc:	add	r0, r7, #136	; 0x88
   176e0:	ldr	r1, [pc, #424]	; 17890 <UnityAssertEqualStringArray@@Base+0x3dc>
   176e4:	ldr	r1, [pc, r1]
   176e8:	ldm	r0, {r3, r9}
   176ec:	adds	r3, r3, #1
   176f0:	ldr	r1, [r1, #32]
   176f4:	adc	r9, r9, #0
   176f8:	stm	r0, {r3, r9}
   176fc:	cmp	r1, #0
   17700:	bne	177b0 <UnityAssertEqualStringArray@@Base+0x2fc>
   17704:	ldrd	r0, [r7, #208]	; 0xd0
   17708:	add	r4, r4, #1
   1770c:	mov	r3, r8
   17710:	adds	r0, r0, #1
   17714:	adc	r1, r1, #0
   17718:	cmp	r4, sl
   1771c:	strd	r0, [r7, #208]	; 0xd0
   17720:	bne	175b8 <UnityAssertEqualStringArray@@Base+0x104>
   17724:	ldrd	r0, [r7, #248]	; 0xf8
   17728:	adds	r0, r0, #1
   1772c:	adc	r1, r1, #0
   17730:	strd	r0, [r7, #248]	; 0xf8
   17734:	add	r0, r7, #256	; 0x100
   17738:	ldrd	r2, [r0]
   1773c:	adds	r2, r2, #1
   17740:	adc	r3, r3, #0
   17744:	strd	r2, [r0]
   17748:	ldr	r0, [r7, #264]	; 0x108
   1774c:	ldr	r1, [r7, #268]	; 0x10c
   17750:	adds	r0, r0, #1
   17754:	adc	r1, r1, #0
   17758:	str	r0, [r7, #264]	; 0x108
   1775c:	str	r1, [r7, #268]	; 0x10c
   17760:	sub	sp, fp, #28
   17764:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17768:	add	r0, r7, #160	; 0xa0
   1776c:	str	r0, [sp, #8]
   17770:	add	r0, r7, #144	; 0x90
   17774:	str	r0, [sp, #4]
   17778:	ldr	r2, [sp, #4]
   1777c:	ldrd	r0, [r2]
   17780:	adds	r0, r0, #1
   17784:	adc	r1, r1, #0
   17788:	strd	r0, [r2]
   1778c:	mov	r0, #1
   17790:	ldr	r1, [pc, #244]	; 1788c <UnityAssertEqualStringArray@@Base+0x3d8>
   17794:	ldr	r1, [pc, r1]
   17798:	ldr	r2, [sp, #8]
   1779c:	str	r0, [r1, #32]
   177a0:	ldrd	r0, [r2]
   177a4:	adds	r0, r0, #1
   177a8:	adc	r1, r1, #0
   177ac:	strd	r0, [r2]
   177b0:	ldrd	r0, [r7, #200]	; 0xc8
   177b4:	adds	r0, r0, #1
   177b8:	adc	r1, r1, #0
   177bc:	strd	r0, [r7, #200]	; 0xc8
   177c0:	ldr	r0, [fp, #8]
   177c4:	bl	15720 <UnityAssertBits@@Base+0x130>
   177c8:	cmp	sl, #2
   177cc:	bcc	177fc <UnityAssertEqualStringArray@@Base+0x348>
   177d0:	ldrd	r0, [r7, #216]	; 0xd8
   177d4:	adds	r0, r0, #1
   177d8:	adc	r1, r1, #0
   177dc:	strd	r0, [r7, #216]	; 0xd8
   177e0:	ldr	r0, [pc, #172]	; 17894 <UnityAssertEqualStringArray@@Base+0x3e0>
   177e4:	ldr	r0, [pc, r0]
   177e8:	bl	145d0 <UnityPrint@@Base>
   177ec:	mov	r0, r4
   177f0:	bl	15020 <UnityPrintNumberUnsigned@@Base>
   177f4:	add	r0, r7, #232	; 0xe8
   177f8:	b	17800 <UnityAssertEqualStringArray@@Base+0x34c>
   177fc:	add	r0, r7, #224	; 0xe0
   17800:	ldrd	r2, [r0]
   17804:	adds	r2, r2, #1
   17808:	adc	r3, r3, #0
   1780c:	strd	r2, [r0]
   17810:	ldr	r1, [r6, r4, lsl #2]
   17814:	ldr	r0, [r5, r4, lsl #2]
   17818:	bl	16e30 <UnityAssertEqualString@@Base+0x274>
   1781c:	ldr	r0, [sp]
   17820:	bl	15838 <UnityAssertBits@@Base+0x248>
   17824:	ldr	r1, [pc, #108]	; 17898 <UnityAssertEqualStringArray@@Base+0x3e4>
   17828:	mov	r0, #1
   1782c:	ldr	r1, [pc, r1]
   17830:	str	r0, [r1, #32]
   17834:	add	r0, r1, #40	; 0x28
   17838:	mov	r1, #1
   1783c:	bl	12628 <longjmp@plt>
   17840:	ldrd	r0, [r7, #32]
   17844:	adds	r0, r0, #1
   17848:	adc	r1, r1, #0
   1784c:	strd	r0, [r7, #32]
   17850:	mov	r0, r2
   17854:	bl	15720 <UnityAssertBits@@Base+0x130>
   17858:	ldr	r0, [pc, #60]	; 1789c <UnityAssertEqualStringArray@@Base+0x3e8>
   1785c:	ldr	r0, [pc, r0]
   17860:	bl	145d0 <UnityPrint@@Base>
   17864:	mov	r0, r4
   17868:	bl	15838 <UnityAssertBits@@Base+0x248>
   1786c:	mov	r0, #1
   17870:	mov	r1, #1
   17874:	str	r0, [r8, #32]
   17878:	add	r0, r8, #40	; 0x28
   1787c:	bl	12628 <longjmp@plt>
   17880:	andeq	r9, r1, r4, lsl #19
   17884:	andeq	r9, r1, r8, lsl #19
   17888:	andeq	r8, r1, r4, asr #24
   1788c:	andeq	r8, r1, r0, lsr #19
   17890:	andeq	r8, r1, r0, asr sl
   17894:	andeq	r8, r1, ip, lsr r9
   17898:	andeq	r8, r1, r8, lsl #18
   1789c:	andeq	r8, r1, r8, lsl r9

000178a0 <UnityAssertEqualMemory@@Base>:
   178a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178a4:	add	fp, sp, #28
   178a8:	sub	sp, sp, #28
   178ac:	ldr	lr, [pc, #768]	; 17bb4 <UnityAssertEqualMemory@@Base+0x314>
   178b0:	mov	r6, r0
   178b4:	ldr	r0, [pc, #764]	; 17bb8 <UnityAssertEqualMemory@@Base+0x318>
   178b8:	mov	r8, r1
   178bc:	ldr	r0, [pc, r0]
   178c0:	add	lr, pc, lr
   178c4:	adds	r0, r0, #1
   178c8:	str	r0, [lr]
   178cc:	ldr	r0, [lr, #4]
   178d0:	adc	r0, r0, #0
   178d4:	str	r0, [lr, #4]
   178d8:	ldr	r9, [pc, #732]	; 17bbc <UnityAssertEqualMemory@@Base+0x31c>
   178dc:	ldr	r9, [pc, r9]
   178e0:	ldrd	r0, [r9, #32]
   178e4:	orrs	r0, r1, r0
   178e8:	beq	17928 <UnityAssertEqualMemory@@Base+0x88>
   178ec:	ldrd	r0, [lr, #8]
   178f0:	adds	r0, r0, #1
   178f4:	adc	r1, r1, #0
   178f8:	strd	r0, [lr, #8]
   178fc:	add	r0, lr, #24
   17900:	ldrd	r2, [r0]
   17904:	adds	r2, r2, #1
   17908:	adc	r3, r3, #0
   1790c:	strd	r2, [r0]
   17910:	ldrd	r0, [lr, #168]	; 0xa8
   17914:	adds	r0, r0, #1
   17918:	adc	r1, r1, #0
   1791c:	strd	r0, [lr, #168]	; 0xa8
   17920:	sub	sp, fp, #28
   17924:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17928:	ldrd	r0, [lr, #16]
   1792c:	mov	r5, r2
   17930:	ldr	r2, [fp, #12]
   17934:	ldr	sl, [fp, #8]
   17938:	adds	r0, r0, #1
   1793c:	adc	r1, r1, #0
   17940:	cmp	r5, #0
   17944:	movne	r7, r3
   17948:	cmpne	r3, #0
   1794c:	strd	r0, [lr, #16]
   17950:	bne	17994 <UnityAssertEqualMemory@@Base+0xf4>
   17954:	ldrd	r0, [lr, #32]
   17958:	adds	r0, r0, #1
   1795c:	adc	r1, r1, #0
   17960:	strd	r0, [lr, #32]
   17964:	mov	r0, r2
   17968:	bl	15720 <UnityAssertBits@@Base+0x130>
   1796c:	ldr	r0, [pc, #612]	; 17bd8 <UnityAssertEqualMemory@@Base+0x338>
   17970:	ldr	r0, [pc, r0]
   17974:	bl	145d0 <UnityPrint@@Base>
   17978:	mov	r0, sl
   1797c:	bl	15838 <UnityAssertBits@@Base+0x248>
   17980:	mov	r0, #1
   17984:	mov	r1, #1
   17988:	str	r0, [r9, #32]
   1798c:	add	r0, r9, #40	; 0x28
   17990:	bl	12628 <longjmp@plt>
   17994:	ldrd	r0, [lr, #40]	; 0x28
   17998:	mov	r3, sl
   1799c:	mov	r4, lr
   179a0:	adds	r0, r0, #1
   179a4:	adc	r1, r1, #0
   179a8:	strd	r0, [lr, #40]	; 0x28
   179ac:	mov	r0, r6
   179b0:	mov	r1, r8
   179b4:	bl	15ff8 <UnityAssertEqualIntArray@@Base+0x548>
   179b8:	cmp	r0, #1
   179bc:	bne	179dc <UnityAssertEqualMemory@@Base+0x13c>
   179c0:	ldrd	r0, [r4, #48]	; 0x30
   179c4:	mov	lr, r4
   179c8:	adds	r0, r0, #1
   179cc:	adc	r1, r1, #0
   179d0:	strd	r0, [r4, #48]	; 0x30
   179d4:	add	r0, r4, #64	; 0x40
   179d8:	b	17900 <UnityAssertEqualMemory@@Base+0x60>
   179dc:	ldrd	r0, [r4, #56]	; 0x38
   179e0:	ldrd	r2, [r4, #72]	; 0x48
   179e4:	str	r7, [sp]
   179e8:	mov	lr, r4
   179ec:	adds	r0, r0, #1
   179f0:	adc	r1, r1, #0
   179f4:	strd	r0, [r4, #56]	; 0x38
   179f8:	ldrd	r0, [r4, #88]	; 0x58
   179fc:	adds	r0, r0, #1
   17a00:	mov	r9, #0
   17a04:	str	r7, [sp, #4]
   17a08:	adc	r1, r1, #0
   17a0c:	adds	r2, r2, #1
   17a10:	str	r0, [sp, #16]
   17a14:	adc	r3, r3, #0
   17a18:	strd	r0, [lr, #88]	; 0x58
   17a1c:	sub	r0, r7, #1
   17a20:	str	r1, [sp, #12]
   17a24:	str	r2, [sp, #24]
   17a28:	strd	r2, [lr, #72]	; 0x48
   17a2c:	str	r0, [sp, #8]
   17a30:	str	r3, [sp, #20]
   17a34:	ldrd	r0, [lr, #96]	; 0x60
   17a38:	adds	r0, r0, #1
   17a3c:	adc	r1, r1, #0
   17a40:	strd	r0, [lr, #96]	; 0x60
   17a44:	ldrb	sl, [r8]
   17a48:	ldrb	ip, [r6]
   17a4c:	cmp	ip, sl
   17a50:	bne	17ad4 <UnityAssertEqualMemory@@Base+0x234>
   17a54:	ldrd	r2, [lr, #120]	; 0x78
   17a58:	ldr	r4, [lr, #152]	; 0x98
   17a5c:	ldr	r7, [lr, #156]	; 0x9c
   17a60:	add	r9, r9, #1
   17a64:	add	r8, r8, #1
   17a68:	add	r6, r6, #1
   17a6c:	adds	r2, r2, #1
   17a70:	adc	r3, r3, #0
   17a74:	adds	r4, r4, #1
   17a78:	str	r4, [lr, #152]	; 0x98
   17a7c:	strd	r2, [lr, #120]	; 0x78
   17a80:	adc	r2, r7, #0
   17a84:	cmp	r5, r9
   17a88:	str	r2, [lr, #156]	; 0x9c
   17a8c:	bne	17a38 <UnityAssertEqualMemory@@Base+0x198>
   17a90:	ldrd	r0, [lr, #104]	; 0x68
   17a94:	ldr	r7, [sp, #8]
   17a98:	ldr	r2, [sp, #24]
   17a9c:	ldr	r3, [sp, #20]
   17aa0:	adds	r0, r0, #1
   17aa4:	adc	r1, r1, #0
   17aa8:	cmp	r7, #0
   17aac:	strd	r0, [lr, #104]	; 0x68
   17ab0:	ldr	r0, [sp, #16]
   17ab4:	ldr	r1, [sp, #12]
   17ab8:	bne	179fc <UnityAssertEqualMemory@@Base+0x15c>
   17abc:	ldrd	r0, [lr, #80]	; 0x50
   17ac0:	adds	r0, r0, #1
   17ac4:	adc	r1, r1, #0
   17ac8:	strd	r0, [lr, #80]	; 0x50
   17acc:	add	r0, lr, #160	; 0xa0
   17ad0:	b	17900 <UnityAssertEqualMemory@@Base+0x60>
   17ad4:	ldrd	r0, [lr, #112]	; 0x70
   17ad8:	mov	r4, lr
   17adc:	adds	r0, r0, #1
   17ae0:	adc	r1, r1, #0
   17ae4:	strd	r0, [lr, #112]	; 0x70
   17ae8:	ldr	r0, [fp, #12]
   17aec:	bl	15720 <UnityAssertBits@@Base+0x130>
   17af0:	ldr	r0, [pc, #200]	; 17bc0 <UnityAssertEqualMemory@@Base+0x320>
   17af4:	ldr	r0, [pc, r0]
   17af8:	bl	145d0 <UnityPrint@@Base>
   17afc:	ldr	r0, [sp]
   17b00:	cmp	r0, #2
   17b04:	bcc	17b38 <UnityAssertEqualMemory@@Base+0x298>
   17b08:	ldrd	r0, [r4, #128]	; 0x80
   17b0c:	adds	r0, r0, #1
   17b10:	adc	r1, r1, #0
   17b14:	strd	r0, [r4, #128]	; 0x80
   17b18:	ldr	r0, [pc, #164]	; 17bc4 <UnityAssertEqualMemory@@Base+0x324>
   17b1c:	ldr	r0, [pc, r0]
   17b20:	bl	145d0 <UnityPrint@@Base>
   17b24:	ldm	sp, {r0, r1}
   17b28:	sub	r0, r0, r1
   17b2c:	bl	15020 <UnityPrintNumberUnsigned@@Base>
   17b30:	add	r0, r4, #144	; 0x90
   17b34:	b	17b3c <UnityAssertEqualMemory@@Base+0x29c>
   17b38:	add	r0, r4, #136	; 0x88
   17b3c:	ldrd	r2, [r0]
   17b40:	adds	r2, r2, #1
   17b44:	adc	r3, r3, #0
   17b48:	strd	r2, [r0]
   17b4c:	ldr	r0, [pc, #116]	; 17bc8 <UnityAssertEqualMemory@@Base+0x328>
   17b50:	ldr	r0, [pc, r0]
   17b54:	bl	145d0 <UnityPrint@@Base>
   17b58:	mov	r0, r9
   17b5c:	bl	15020 <UnityPrintNumberUnsigned@@Base>
   17b60:	ldr	r0, [pc, #100]	; 17bcc <UnityAssertEqualMemory@@Base+0x32c>
   17b64:	ldr	r0, [pc, r0]
   17b68:	bl	145d0 <UnityPrint@@Base>
   17b6c:	ldrb	r0, [r6]
   17b70:	mov	r1, #65	; 0x41
   17b74:	bl	14ce0 <UnityPrintNumberByStyle@@Base>
   17b78:	ldr	r0, [pc, #80]	; 17bd0 <UnityAssertEqualMemory@@Base+0x330>
   17b7c:	ldr	r0, [pc, r0]
   17b80:	bl	145d0 <UnityPrint@@Base>
   17b84:	ldrb	r0, [r8]
   17b88:	mov	r1, #65	; 0x41
   17b8c:	bl	14ce0 <UnityPrintNumberByStyle@@Base>
   17b90:	ldr	r0, [fp, #8]
   17b94:	bl	15838 <UnityAssertBits@@Base+0x248>
   17b98:	ldr	r1, [pc, #52]	; 17bd4 <UnityAssertEqualMemory@@Base+0x334>
   17b9c:	mov	r0, #1
   17ba0:	ldr	r1, [pc, r1]
   17ba4:	str	r0, [r1, #32]
   17ba8:	add	r0, r1, #40	; 0x28
   17bac:	mov	r1, #1
   17bb0:	bl	12628 <longjmp@plt>
   17bb4:	andeq	r9, r1, r8, lsr #13
   17bb8:	andeq	r9, r1, ip, lsr #13
   17bbc:	andeq	r8, r1, r8, asr r8
   17bc0:	andeq	r8, r1, ip, ror #11
   17bc4:	andeq	r8, r1, r4, lsl #12
   17bc8:	andeq	r8, r1, r0, ror r5
   17bcc:	muleq	r1, r0, r5
   17bd0:	ldrdeq	r8, [r1], -ip
   17bd4:	muleq	r1, r4, r5
   17bd8:	andeq	r8, r1, r4, lsl #16
   17bdc:	nop	{0}

00017be0 <UnityFail@@Base>:
   17be0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17be4:	add	fp, sp, #24
   17be8:	vpush	{d8-d9}
   17bec:	ldr	r6, [pc, #668]	; 17e90 <UnityFail@@Base+0x2b0>
   17bf0:	mov	r4, r0
   17bf4:	ldr	r0, [pc, #664]	; 17e94 <UnityFail@@Base+0x2b4>
   17bf8:	mov	r5, r1
   17bfc:	ldr	r0, [pc, r0]
   17c00:	add	r6, pc, r6
   17c04:	adds	r0, r0, #1
   17c08:	str	r0, [r6]
   17c0c:	ldr	r0, [r6, #4]
   17c10:	adc	r0, r0, #0
   17c14:	str	r0, [r6, #4]
   17c18:	ldr	r7, [pc, #632]	; 17e98 <UnityFail@@Base+0x2b8>
   17c1c:	ldr	r7, [pc, r7]
   17c20:	ldrd	r0, [r7, #32]
   17c24:	orrs	r0, r1, r0
   17c28:	beq	17c58 <UnityFail@@Base+0x78>
   17c2c:	ldrd	r0, [r6, #8]
   17c30:	ldrd	r2, [r6, #24]
   17c34:	adds	r0, r0, #1
   17c38:	adc	r1, r1, #0
   17c3c:	adds	r2, r2, #1
   17c40:	str	r2, [r6, #24]
   17c44:	strd	r0, [r6, #8]
   17c48:	adc	r0, r3, #0
   17c4c:	str	r0, [r6, #28]
   17c50:	vpop	{d8-d9}
   17c54:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17c58:	ldr	r0, [pc, #572]	; 17e9c <UnityFail@@Base+0x2bc>
   17c5c:	add	r1, pc, #540	; 0x21c
   17c60:	ldrd	r2, [r6, #16]
   17c64:	vld1.64	{d8-d9}, [r1 :128]
   17c68:	add	r0, pc, r0
   17c6c:	adds	r2, r2, #1
   17c70:	vld1.64	{d16-d17}, [r0 :128]
   17c74:	adc	r3, r3, #0
   17c78:	strd	r2, [r6, #16]
   17c7c:	vadd.i64	q8, q8, q4
   17c80:	vst1.64	{d16-d17}, [r0 :128]
   17c84:	ldr	r0, [r7]
   17c88:	bl	145d0 <UnityPrint@@Base>
   17c8c:	ldr	r8, [pc, #524]	; 17ea0 <UnityFail@@Base+0x2c0>
   17c90:	mov	r0, #58	; 0x3a
   17c94:	add	r8, pc, r8
   17c98:	vld1.64	{d16-d17}, [r8 :128]
   17c9c:	vadd.i64	q8, q8, q4
   17ca0:	vst1.64	{d16-d17}, [r8 :128]
   17ca4:	ldr	r9, [pc, #504]	; 17ea4 <UnityFail@@Base+0x2c4>
   17ca8:	ldr	r9, [pc, r9]
   17cac:	ldr	r1, [r9]
   17cb0:	bl	127d8 <putc@plt>
   17cb4:	mov	r0, r5
   17cb8:	bl	14dd0 <UnityPrintNumber@@Base>
   17cbc:	vld1.64	{d16-d17}, [r8 :128]
   17cc0:	ldr	r1, [r9]
   17cc4:	mov	r0, #58	; 0x3a
   17cc8:	vadd.i64	q8, q8, q4
   17ccc:	vst1.64	{d16-d17}, [r8 :128]
   17cd0:	bl	127d8 <putc@plt>
   17cd4:	ldr	r0, [r7, #4]
   17cd8:	bl	145d0 <UnityPrint@@Base>
   17cdc:	vld1.64	{d16-d17}, [r8 :128]
   17ce0:	ldr	r1, [r9]
   17ce4:	mov	r0, #58	; 0x3a
   17ce8:	vadd.i64	q8, q8, q4
   17cec:	vst1.64	{d16-d17}, [r8 :128]
   17cf0:	bl	127d8 <putc@plt>
   17cf4:	ldr	r0, [pc, #428]	; 17ea8 <UnityFail@@Base+0x2c8>
   17cf8:	add	r0, pc, r0
   17cfc:	vld1.64	{d16-d17}, [r0 :128]
   17d00:	vadd.i64	q8, q8, q4
   17d04:	vst1.64	{d16-d17}, [r0 :128]
   17d08:	ldr	r0, [pc, #412]	; 17eac <UnityFail@@Base+0x2cc>
   17d0c:	ldr	r0, [pc, r0]
   17d10:	bl	145d0 <UnityPrint@@Base>
   17d14:	cmp	r4, #0
   17d18:	bne	17d24 <UnityFail@@Base+0x144>
   17d1c:	add	r0, r6, #40	; 0x28
   17d20:	b	17e5c <UnityFail@@Base+0x27c>
   17d24:	add	r0, pc, #340	; 0x154
   17d28:	vld1.64	{d18-d19}, [r8 :128]
   17d2c:	vld1.64	{d16-d17}, [r0 :128]
   17d30:	ldrd	r0, [r6, #32]
   17d34:	adds	r0, r0, #1
   17d38:	adc	r1, r1, #0
   17d3c:	vadd.i64	q8, q9, q8
   17d40:	strd	r0, [r6, #32]
   17d44:	ldr	r1, [r9]
   17d48:	mov	r0, #58	; 0x3a
   17d4c:	vst1.64	{d16-d17}, [r8 :128]
   17d50:	bl	127d8 <putc@plt>
   17d54:	ldr	r0, [r7, #8]
   17d58:	cmp	r0, #0
   17d5c:	bne	17d68 <UnityFail@@Base+0x188>
   17d60:	add	r0, r6, #56	; 0x38
   17d64:	b	17de8 <UnityFail@@Base+0x208>
   17d68:	ldrd	r0, [r6, #48]	; 0x30
   17d6c:	adds	r0, r0, #1
   17d70:	adc	r1, r1, #0
   17d74:	strd	r0, [r6, #48]	; 0x30
   17d78:	ldr	r0, [pc, #304]	; 17eb0 <UnityFail@@Base+0x2d0>
   17d7c:	ldr	r0, [pc, r0]
   17d80:	bl	145d0 <UnityPrint@@Base>
   17d84:	ldr	r0, [r7, #8]
   17d88:	bl	145d0 <UnityPrint@@Base>
   17d8c:	ldr	r0, [r7, #12]
   17d90:	cmp	r0, #0
   17d94:	bne	17da0 <UnityFail@@Base+0x1c0>
   17d98:	add	r0, r6, #72	; 0x48
   17d9c:	b	17dc8 <UnityFail@@Base+0x1e8>
   17da0:	ldrd	r0, [r6, #64]	; 0x40
   17da4:	adds	r0, r0, #1
   17da8:	adc	r1, r1, #0
   17dac:	strd	r0, [r6, #64]	; 0x40
   17db0:	ldr	r0, [pc, #252]	; 17eb4 <UnityFail@@Base+0x2d4>
   17db4:	ldr	r0, [pc, r0]
   17db8:	bl	145d0 <UnityPrint@@Base>
   17dbc:	ldr	r0, [r7, #12]
   17dc0:	bl	145d0 <UnityPrint@@Base>
   17dc4:	add	r0, r6, #80	; 0x50
   17dc8:	ldrd	r2, [r0]
   17dcc:	adds	r2, r2, #1
   17dd0:	adc	r3, r3, #0
   17dd4:	strd	r2, [r0]
   17dd8:	ldr	r0, [pc, #216]	; 17eb8 <UnityFail@@Base+0x2d8>
   17ddc:	ldr	r0, [pc, r0]
   17de0:	bl	145d0 <UnityPrint@@Base>
   17de4:	add	r0, r6, #88	; 0x58
   17de8:	ldrd	r2, [r0]
   17dec:	adds	r2, r2, #1
   17df0:	adc	r3, r3, #0
   17df4:	strd	r2, [r0]
   17df8:	ldrb	r0, [r4]
   17dfc:	cmp	r0, #32
   17e00:	bne	17e0c <UnityFail@@Base+0x22c>
   17e04:	add	r0, r6, #104	; 0x68
   17e08:	b	17e40 <UnityFail@@Base+0x260>
   17e0c:	add	r0, pc, #108	; 0x6c
   17e10:	vld1.64	{d18-d19}, [r8 :128]
   17e14:	vld1.64	{d16-d17}, [r0 :128]
   17e18:	ldrd	r0, [r6, #96]	; 0x60
   17e1c:	adds	r0, r0, #1
   17e20:	adc	r1, r1, #0
   17e24:	vadd.i64	q8, q9, q8
   17e28:	strd	r0, [r6, #96]	; 0x60
   17e2c:	ldr	r1, [r9]
   17e30:	mov	r0, #32
   17e34:	vst1.64	{d16-d17}, [r8 :128]
   17e38:	bl	127d8 <putc@plt>
   17e3c:	add	r0, r6, #112	; 0x70
   17e40:	ldrd	r2, [r0]
   17e44:	adds	r2, r2, #1
   17e48:	adc	r3, r3, #0
   17e4c:	strd	r2, [r0]
   17e50:	mov	r0, r4
   17e54:	bl	145d0 <UnityPrint@@Base>
   17e58:	add	r0, r6, #120	; 0x78
   17e5c:	ldrd	r2, [r0]
   17e60:	mov	r1, #1
   17e64:	adds	r2, r2, #1
   17e68:	adc	r3, r3, #0
   17e6c:	strd	r2, [r0]
   17e70:	mov	r0, #1
   17e74:	str	r0, [r7, #32]
   17e78:	add	r0, r7, #40	; 0x28
   17e7c:	bl	12628 <longjmp@plt>
   17e80:	andeq	r0, r0, r1
   17e84:	andeq	r0, r0, r0
   17e88:	andeq	r0, r0, r1
   17e8c:	andeq	r0, r0, r0
   17e90:	andeq	r9, r1, r8, lsl r4
   17e94:	andeq	r9, r1, ip, lsl r4
   17e98:	andeq	r8, r1, r8, lsl r5
   17e9c:	ldrdeq	r8, [r1], -r0
   17ea0:	andeq	r8, r1, r4, lsl #15
   17ea4:	andeq	r8, r1, r4, lsr #9
   17ea8:	ldrdeq	r8, [r1], -r0
   17eac:	andeq	r8, r1, ip, lsl r4
   17eb0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17eb4:	andeq	r8, r1, r0, asr r3
   17eb8:	andeq	r8, r1, r8, lsl #7
   17ebc:	nop	{0}

00017ec0 <UnityIgnore@@Base>:
   17ec0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17ec4:	add	fp, sp, #24
   17ec8:	vpush	{d8-d9}
   17ecc:	ldr	r6, [pc, #428]	; 18080 <UnityIgnore@@Base+0x1c0>
   17ed0:	mov	r4, r0
   17ed4:	ldr	r0, [pc, #424]	; 18084 <UnityIgnore@@Base+0x1c4>
   17ed8:	mov	r5, r1
   17edc:	ldr	r0, [pc, r0]
   17ee0:	add	r6, pc, r6
   17ee4:	adds	r0, r0, #1
   17ee8:	str	r0, [r6]
   17eec:	ldr	r0, [r6, #4]
   17ef0:	adc	r0, r0, #0
   17ef4:	str	r0, [r6, #4]
   17ef8:	ldr	r7, [pc, #392]	; 18088 <UnityIgnore@@Base+0x1c8>
   17efc:	ldr	r7, [pc, r7]
   17f00:	ldrd	r0, [r7, #32]
   17f04:	orrs	r0, r1, r0
   17f08:	beq	17f38 <UnityIgnore@@Base+0x78>
   17f0c:	ldrd	r0, [r6, #8]
   17f10:	ldrd	r2, [r6, #24]
   17f14:	adds	r0, r0, #1
   17f18:	adc	r1, r1, #0
   17f1c:	adds	r2, r2, #1
   17f20:	str	r2, [r6, #24]
   17f24:	strd	r0, [r6, #8]
   17f28:	adc	r0, r3, #0
   17f2c:	str	r0, [r6, #28]
   17f30:	vpop	{d8-d9}
   17f34:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17f38:	ldr	r0, [pc, #332]	; 1808c <UnityIgnore@@Base+0x1cc>
   17f3c:	add	r1, pc, #300	; 0x12c
   17f40:	ldrd	r2, [r6, #16]
   17f44:	vld1.64	{d8-d9}, [r1 :128]
   17f48:	add	r0, pc, r0
   17f4c:	adds	r2, r2, #1
   17f50:	vld1.64	{d16-d17}, [r0 :128]
   17f54:	adc	r3, r3, #0
   17f58:	strd	r2, [r6, #16]
   17f5c:	vadd.i64	q8, q8, q4
   17f60:	vst1.64	{d16-d17}, [r0 :128]
   17f64:	ldr	r0, [r7]
   17f68:	bl	145d0 <UnityPrint@@Base>
   17f6c:	ldr	r8, [pc, #284]	; 18090 <UnityIgnore@@Base+0x1d0>
   17f70:	mov	r0, #58	; 0x3a
   17f74:	add	r8, pc, r8
   17f78:	vld1.64	{d16-d17}, [r8 :128]
   17f7c:	vadd.i64	q8, q8, q4
   17f80:	vst1.64	{d16-d17}, [r8 :128]
   17f84:	ldr	r9, [pc, #264]	; 18094 <UnityIgnore@@Base+0x1d4>
   17f88:	ldr	r9, [pc, r9]
   17f8c:	ldr	r1, [r9]
   17f90:	bl	127d8 <putc@plt>
   17f94:	mov	r0, r5
   17f98:	bl	14dd0 <UnityPrintNumber@@Base>
   17f9c:	vld1.64	{d16-d17}, [r8 :128]
   17fa0:	ldr	r1, [r9]
   17fa4:	mov	r0, #58	; 0x3a
   17fa8:	vadd.i64	q8, q8, q4
   17fac:	vst1.64	{d16-d17}, [r8 :128]
   17fb0:	bl	127d8 <putc@plt>
   17fb4:	ldr	r0, [r7, #4]
   17fb8:	bl	145d0 <UnityPrint@@Base>
   17fbc:	vld1.64	{d16-d17}, [r8 :128]
   17fc0:	ldr	r1, [r9]
   17fc4:	mov	r0, #58	; 0x3a
   17fc8:	vadd.i64	q8, q8, q4
   17fcc:	vst1.64	{d16-d17}, [r8 :128]
   17fd0:	bl	127d8 <putc@plt>
   17fd4:	ldr	r0, [pc, #188]	; 18098 <UnityIgnore@@Base+0x1d8>
   17fd8:	ldr	r0, [pc, r0]
   17fdc:	bl	145d0 <UnityPrint@@Base>
   17fe0:	cmp	r4, #0
   17fe4:	bne	17ff0 <UnityIgnore@@Base+0x130>
   17fe8:	add	r0, r6, #40	; 0x28
   17fec:	b	18044 <UnityIgnore@@Base+0x184>
   17ff0:	add	r0, pc, #120	; 0x78
   17ff4:	vld1.64	{d16-d17}, [r8 :128]
   17ff8:	vld1.64	{d8-d9}, [r0 :128]
   17ffc:	ldrd	r0, [r6, #32]
   18000:	adds	r0, r0, #1
   18004:	adc	r1, r1, #0
   18008:	vadd.i64	q8, q8, q4
   1800c:	strd	r0, [r6, #32]
   18010:	ldr	r1, [r9]
   18014:	mov	r0, #58	; 0x3a
   18018:	vst1.64	{d16-d17}, [r8 :128]
   1801c:	bl	127d8 <putc@plt>
   18020:	vld1.64	{d16-d17}, [r8 :128]
   18024:	ldr	r1, [r9]
   18028:	mov	r0, #32
   1802c:	vadd.i64	q8, q8, q4
   18030:	vst1.64	{d16-d17}, [r8 :128]
   18034:	bl	127d8 <putc@plt>
   18038:	mov	r0, r4
   1803c:	bl	145d0 <UnityPrint@@Base>
   18040:	add	r0, r6, #48	; 0x30
   18044:	ldrd	r2, [r0]
   18048:	mov	r1, #1
   1804c:	adds	r2, r2, #1
   18050:	adc	r3, r3, #0
   18054:	strd	r2, [r0]
   18058:	mov	r0, #1
   1805c:	str	r0, [r7, #36]	; 0x24
   18060:	add	r0, r7, #40	; 0x28
   18064:	bl	12628 <longjmp@plt>
   18068:	nop	{0}
   1806c:	nop	{0}
   18070:	andeq	r0, r0, r1
   18074:	andeq	r0, r0, r0
   18078:	andeq	r0, r0, r1
   1807c:	andeq	r0, r0, r0
   18080:			; <UNDEFINED> instruction: 0x000191b8
   18084:			; <UNDEFINED> instruction: 0x000191bc
   18088:	andeq	r8, r1, r8, lsr r2
   1808c:	strdeq	r8, [r1], -r0
   18090:	andeq	r8, r1, r4, lsr #9
   18094:	andeq	r8, r1, r4, asr #3
   18098:			; <UNDEFINED> instruction: 0x000181b0
   1809c:	nop	{0}

000180a0 <setUp@@Base>:
   180a0:	ldr	r0, [pc, #40]	; 180d0 <setUp@@Base+0x30>
   180a4:	add	r1, pc, #20
   180a8:	vld1.64	{d16-d17}, [r1 :128]
   180ac:	add	r0, pc, r0
   180b0:	vld1.64	{d18-d19}, [r0 :128]
   180b4:	vadd.i64	q8, q9, q8
   180b8:	vst1.64	{d16-d17}, [r0 :128]
   180bc:	bx	lr
   180c0:	andeq	r0, r0, r1
   180c4:	andeq	r0, r0, r0
   180c8:	andeq	r0, r0, r1
   180cc:	andeq	r0, r0, r0
   180d0:	andeq	r9, r1, ip, lsr #32
   180d4:	nop	{0}
   180d8:	nop	{0}
   180dc:	nop	{0}

000180e0 <tearDown@@Base>:
   180e0:	ldr	r0, [pc, #40]	; 18110 <tearDown@@Base+0x30>
   180e4:	add	r1, pc, #20
   180e8:	vld1.64	{d16-d17}, [r1 :128]
   180ec:	add	r0, pc, r0
   180f0:	vld1.64	{d18-d19}, [r0 :128]
   180f4:	vadd.i64	q8, q9, q8
   180f8:	vst1.64	{d16-d17}, [r0 :128]
   180fc:	bx	lr
   18100:	andeq	r0, r0, r1
   18104:	andeq	r0, r0, r0
   18108:	andeq	r0, r0, r1
   1810c:	andeq	r0, r0, r0
   18110:	strdeq	r8, [r1], -ip

00018114 <UnityDefaultTestRun@@Base>:
   18114:	push	{r4, r5, r6, r7, fp, lr}
   18118:	add	fp, sp, #16
   1811c:	ldr	r7, [pc, #236]	; 18210 <UnityDefaultTestRun@@Base+0xfc>
   18120:	mov	r4, r0
   18124:	mov	r0, #0
   18128:	ldr	r7, [pc, r7]
   1812c:	str	r2, [r7, #16]
   18130:	str	r1, [r7, #4]
   18134:	str	r0, [r7, #12]
   18138:	str	r0, [r7, #8]
   1813c:	add	r5, r7, #40	; 0x28
   18140:	ldr	r6, [pc, #204]	; 18214 <UnityDefaultTestRun@@Base+0x100>
   18144:	ldr	r0, [pc, #204]	; 18218 <UnityDefaultTestRun@@Base+0x104>
   18148:	ldr	r0, [pc, r0]
   1814c:	add	r6, pc, r6
   18150:	adds	r0, r0, #1
   18154:	str	r0, [r6]
   18158:	ldr	r0, [r6, #4]
   1815c:	adc	r0, r0, #0
   18160:	str	r0, [r6, #4]
   18164:	ldr	r0, [r7, #20]
   18168:	add	r0, r0, #1
   1816c:	str	r0, [r7, #20]
   18170:	mov	r0, r5
   18174:	bl	12640 <_setjmp@plt>
   18178:	cmp	r0, #0
   1817c:	beq	18188 <UnityDefaultTestRun@@Base+0x74>
   18180:	add	r0, r6, #16
   18184:	b	181a4 <UnityDefaultTestRun@@Base+0x90>
   18188:	ldrd	r0, [r6, #8]
   1818c:	adds	r0, r0, #1
   18190:	adc	r1, r1, #0
   18194:	strd	r0, [r6, #8]
   18198:	bl	180a0 <setUp@@Base>
   1819c:	blx	r4
   181a0:	add	r0, r6, #24
   181a4:	ldrd	r2, [r0]
   181a8:	adds	r2, r2, #1
   181ac:	adc	r3, r3, #0
   181b0:	strd	r2, [r0]
   181b4:	mov	r0, r5
   181b8:	bl	12640 <_setjmp@plt>
   181bc:	ldr	r1, [r7, #36]	; 0x24
   181c0:	orrs	r0, r1, r0
   181c4:	beq	181d0 <UnityDefaultTestRun@@Base+0xbc>
   181c8:	add	r0, r6, #32
   181cc:	b	181e8 <UnityDefaultTestRun@@Base+0xd4>
   181d0:	ldrd	r0, [r6, #40]	; 0x28
   181d4:	adds	r0, r0, #1
   181d8:	adc	r1, r1, #0
   181dc:	strd	r0, [r6, #40]	; 0x28
   181e0:	bl	180e0 <tearDown@@Base>
   181e4:	add	r0, r6, #48	; 0x30
   181e8:	ldrd	r2, [r0]
   181ec:	adds	r2, r2, #1
   181f0:	adc	r3, r3, #0
   181f4:	strd	r2, [r0]
   181f8:	ldrd	r0, [r6, #56]	; 0x38
   181fc:	adds	r0, r0, #1
   18200:	adc	r1, r1, #0
   18204:	strd	r0, [r6, #56]	; 0x38
   18208:	bl	15400 <UnityConcludeTest@@Base>
   1820c:	pop	{r4, r5, r6, r7, fp, pc}
   18210:	andeq	r8, r1, ip
   18214:	andeq	r8, r1, ip, lsr #31
   18218:			; <UNDEFINED> instruction: 0x00018fb0
   1821c:	nop	{0}

00018220 <UnityBegin@@Base>:
   18220:	ldr	r1, [pc, #88]	; 18280 <UnityBegin@@Base+0x60>
   18224:	add	r2, pc, #68	; 0x44
   18228:	vmov.i32	q10, #0	; 0x00000000
   1822c:	vld1.64	{d16-d17}, [r2 :128]
   18230:	add	r1, pc, r1
   18234:	vld1.64	{d18-d19}, [r1 :128]
   18238:	ldr	r2, [pc, #68]	; 18284 <UnityBegin@@Base+0x64>
   1823c:	ldr	r2, [pc, r2]
   18240:	vadd.i64	q8, q9, q8
   18244:	str	r0, [r2]
   18248:	mov	r0, #0
   1824c:	vst1.64	{d16-d17}, [r1 :128]
   18250:	str	r0, [r2, #36]	; 0x24
   18254:	add	r0, r2, #4
   18258:	vst1.32	{d20-d21}, [r0]
   1825c:	add	r0, r2, #20
   18260:	vst1.32	{d20-d21}, [r0]
   18264:	bx	lr
   18268:	nop	{0}
   1826c:	nop	{0}
   18270:	andeq	r0, r0, r1
   18274:	andeq	r0, r0, r0
   18278:	andeq	r0, r0, r1
   1827c:	andeq	r0, r0, r0
   18280:	andeq	r8, r1, r8, lsl #30
   18284:	strdeq	r7, [r1], -r8
   18288:	nop	{0}
   1828c:	nop	{0}

00018290 <UnityEnd@@Base>:
   18290:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18294:	add	fp, sp, #24
   18298:	vpush	{d8-d9}
   1829c:	ldr	r4, [pc, #428]	; 18450 <UnityEnd@@Base+0x1c0>
   182a0:	add	r0, pc, #408	; 0x198
   182a4:	vld1.64	{d8-d9}, [r0 :128]
   182a8:	add	r4, pc, r4
   182ac:	vld1.64	{d16-d17}, [r4 :128]
   182b0:	ldr	r5, [pc, #412]	; 18454 <UnityEnd@@Base+0x1c4>
   182b4:	ldr	r0, [pc, #412]	; 18458 <UnityEnd@@Base+0x1c8>
   182b8:	ldr	r0, [pc, r0]
   182bc:	add	r5, pc, r5
   182c0:	vadd.i64	q8, q8, q4
   182c4:	adds	r0, r0, #1
   182c8:	vst1.64	{d16-d17}, [r4 :128]
   182cc:	str	r0, [r5]
   182d0:	ldr	r0, [r5, #4]
   182d4:	adc	r0, r0, #0
   182d8:	str	r0, [r5, #4]
   182dc:	mov	r0, #10
   182e0:	ldr	r8, [pc, #372]	; 1845c <UnityEnd@@Base+0x1cc>
   182e4:	ldr	r8, [pc, r8]
   182e8:	ldr	r1, [r8]
   182ec:	bl	127d8 <putc@plt>
   182f0:	ldr	r0, [pc, #360]	; 18460 <UnityEnd@@Base+0x1d0>
   182f4:	ldr	r0, [pc, r0]
   182f8:	bl	145d0 <UnityPrint@@Base>
   182fc:	vld1.64	{d16-d17}, [r4 :128]
   18300:	ldr	r1, [r8]
   18304:	mov	r0, #10
   18308:	vadd.i64	q8, q8, q4
   1830c:	vst1.64	{d16-d17}, [r4 :128]
   18310:	bl	127d8 <putc@plt>
   18314:	ldr	r7, [pc, #328]	; 18464 <UnityEnd@@Base+0x1d4>
   18318:	ldr	r7, [pc, r7]
   1831c:	ldr	r0, [r7, #20]
   18320:	bl	14dd0 <UnityPrintNumber@@Base>
   18324:	ldr	r0, [pc, #316]	; 18468 <UnityEnd@@Base+0x1d8>
   18328:	ldr	r0, [pc, r0]
   1832c:	bl	145d0 <UnityPrint@@Base>
   18330:	ldr	r0, [r7, #24]
   18334:	bl	14dd0 <UnityPrintNumber@@Base>
   18338:	ldr	r0, [pc, #300]	; 1846c <UnityEnd@@Base+0x1dc>
   1833c:	ldr	r0, [pc, r0]
   18340:	bl	145d0 <UnityPrint@@Base>
   18344:	ldr	r0, [r7, #28]
   18348:	bl	14dd0 <UnityPrintNumber@@Base>
   1834c:	ldr	r0, [pc, #284]	; 18470 <UnityEnd@@Base+0x1e0>
   18350:	ldr	r0, [pc, r0]
   18354:	bl	145d0 <UnityPrint@@Base>
   18358:	vld1.64	{d16-d17}, [r4 :128]
   1835c:	ldr	r1, [r8]
   18360:	mov	r0, #10
   18364:	vadd.i64	q8, q8, q4
   18368:	vst1.64	{d16-d17}, [r4 :128]
   1836c:	bl	127d8 <putc@plt>
   18370:	ldr	r0, [r7, #24]
   18374:	cmp	r0, #0
   18378:	beq	183a4 <UnityEnd@@Base+0x114>
   1837c:	ldrd	r0, [r5, #16]
   18380:	add	r6, r5, #32
   18384:	adds	r0, r0, #1
   18388:	adc	r1, r1, #0
   1838c:	strd	r0, [r5, #16]
   18390:	ldr	r2, [pc, #228]	; 1847c <UnityEnd@@Base+0x1ec>
   18394:	ldr	r0, [pc, #228]	; 18480 <UnityEnd@@Base+0x1f0>
   18398:	ldr	r0, [pc, r0]
   1839c:	add	r2, pc, r2
   183a0:	b	183c8 <UnityEnd@@Base+0x138>
   183a4:	ldrd	r0, [r5, #8]
   183a8:	add	r6, r5, #24
   183ac:	adds	r0, r0, #1
   183b0:	adc	r1, r1, #0
   183b4:	strd	r0, [r5, #8]
   183b8:	ldr	r2, [pc, #180]	; 18474 <UnityEnd@@Base+0x1e4>
   183bc:	ldr	r0, [pc, #180]	; 18478 <UnityEnd@@Base+0x1e8>
   183c0:	ldr	r0, [pc, r0]
   183c4:	add	r2, pc, r2
   183c8:	add	r1, r2, #8
   183cc:	ldm	r2, {r3, r9}
   183d0:	adds	r3, r3, #1
   183d4:	adc	r9, r9, #0
   183d8:	stm	r2, {r3, r9}
   183dc:	ldrd	r2, [r1]
   183e0:	adds	r2, r2, #1
   183e4:	adc	r3, r3, #0
   183e8:	strd	r2, [r1]
   183ec:	bl	145d0 <UnityPrint@@Base>
   183f0:	ldrd	r0, [r6]
   183f4:	adds	r0, r0, #1
   183f8:	adc	r1, r1, #0
   183fc:	strd	r0, [r6]
   18400:	add	r0, pc, #56	; 0x38
   18404:	vld1.64	{d18-d19}, [r4 :128]
   18408:	vld1.64	{d16-d17}, [r0 :128]
   1840c:	ldrd	r0, [r5, #40]	; 0x28
   18410:	adds	r0, r0, #1
   18414:	adc	r1, r1, #0
   18418:	vadd.i64	q8, q9, q8
   1841c:	strd	r0, [r5, #40]	; 0x28
   18420:	ldr	r1, [r8]
   18424:	mov	r0, #10
   18428:	vst1.64	{d16-d17}, [r4 :128]
   1842c:	bl	127d8 <putc@plt>
   18430:	ldr	r0, [r7, #24]
   18434:	vpop	{d8-d9}
   18438:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1843c:	nop	{0}
   18440:	andeq	r0, r0, r1
   18444:	andeq	r0, r0, r0
   18448:	andeq	r0, r0, r1
   1844c:	andeq	r0, r0, r0
   18450:	andeq	r8, r1, r0, ror r1
   18454:	andeq	r8, r1, ip, lsl #29
   18458:	muleq	r1, r0, lr
   1845c:	andeq	r7, r1, r8, ror #28
   18460:	andeq	r7, r1, r8, lsr #28
   18464:	andeq	r7, r1, ip, lsl lr
   18468:	andeq	r7, r1, r4, asr #27
   1846c:	andeq	r7, r1, ip, lsr #27
   18470:	andeq	r7, r1, ip, ror #26
   18474:	andeq	r8, r1, r4, lsl r3
   18478:	andeq	r7, r1, r4, lsl #26
   1847c:	andeq	r8, r1, ip, lsr #6
   18480:	muleq	r1, r0, sp
   18484:	push	{r4, r5, r6, lr}
   18488:	sub	sp, sp, #8
   1848c:	ldr	r0, [pc, #112]	; 18504 <UnityEnd@@Base+0x274>
   18490:	ldr	r1, [pc, #112]	; 18508 <UnityEnd@@Base+0x278>
   18494:	movw	r2, #50507	; 0xc54b
   18498:	movt	r2, #17914	; 0x45fa
   1849c:	add	r0, pc, r0
   184a0:	add	r1, pc, r1
   184a4:	bl	1b0e0 <next@@Base+0x18c0>
   184a8:	ldr	r0, [pc, #92]	; 1850c <UnityEnd@@Base+0x27c>
   184ac:	ldr	r6, [pc, #92]	; 18510 <UnityEnd@@Base+0x280>
   184b0:	mov	r5, #0
   184b4:	add	r0, pc, r0
   184b8:	add	r6, pc, r6
   184bc:	add	r4, r0, #4
   184c0:	mov	r3, r6
   184c4:	ldr	r0, [r3, r5]!
   184c8:	ldr	r1, [r3, #16]
   184cc:	str	r1, [sp]
   184d0:	ldmib	r3, {r1, r2}
   184d4:	ldrb	r3, [r3, #12]
   184d8:	bl	1b800 <next@@Base+0x1fe0>
   184dc:	ldrd	r0, [r4, #-4]
   184e0:	bl	1c0b4 <next@@Base+0x2894>
   184e4:	add	r5, r5, #20
   184e8:	add	r4, r4, #8
   184ec:	cmp	r5, #700	; 0x2bc
   184f0:	bne	184c0 <UnityEnd@@Base+0x230>
   184f4:	bl	1c83c <next@@Base+0x301c>
   184f8:	add	sp, sp, #8
   184fc:	pop	{r4, r5, r6, lr}
   18500:	b	1d5a8 <next@@Base+0x3d88>
   18504:	andeq	r6, r0, r8, lsl #4
   18508:	andeq	r5, r0, r3, lsl lr
   1850c:	andeq	r7, r1, r4, asr #10
   18510:	andeq	r7, r1, r0, lsl #5
   18514:	push	{r4, r5, r6, r7, fp, lr}
   18518:	vpush	{d8-d9}
   1851c:	bl	18484 <UnityEnd@@Base+0x1f4>
   18520:	ldr	r0, [pc, #1136]	; 18998 <UnityEnd@@Base+0x708>
   18524:	mov	r1, #0
   18528:	mov	r2, #152	; 0x98
   1852c:	mov	r4, #0
   18530:	add	r0, pc, r0
   18534:	bl	1276c <memset@plt>
   18538:	ldr	r0, [pc, #1116]	; 1899c <UnityEnd@@Base+0x70c>
   1853c:	vmov.i32	q4, #0	; 0x00000000
   18540:	mov	r5, #64	; 0x40
   18544:	mov	r2, #168	; 0xa8
   18548:	add	r0, pc, r0
   1854c:	vst1.64	{d8-d9}, [r0 :128]
   18550:	ldr	r0, [pc, #1096]	; 189a0 <UnityEnd@@Base+0x710>
   18554:	add	r0, pc, r0
   18558:	add	r1, r0, #16
   1855c:	vst1.64	{d8-d9}, [r1 :128]
   18560:	add	r1, r0, #32
   18564:	vst1.64	{d8-d9}, [r1 :128]
   18568:	add	r1, r0, #48	; 0x30
   1856c:	vst1.64	{d8-d9}, [r0 :128], r5
   18570:	vst1.64	{d8-d9}, [r1 :128]
   18574:	vst1.64	{d8-d9}, [r0 :128]
   18578:	mov	r1, #0
   1857c:	ldr	r0, [pc, #1056]	; 189a4 <UnityEnd@@Base+0x714>
   18580:	add	r0, pc, r0
   18584:	bl	1276c <memset@plt>
   18588:	ldr	r0, [pc, #1048]	; 189a8 <UnityEnd@@Base+0x718>
   1858c:	mov	r6, #32
   18590:	add	r0, pc, r0
   18594:	add	r1, r0, #16
   18598:	str	r4, [r0, #64]	; 0x40
   1859c:	vst1.64	{d8-d9}, [r1 :128]
   185a0:	add	r1, r0, #32
   185a4:	vst1.64	{d8-d9}, [r1 :128]
   185a8:	add	r1, r0, #48	; 0x30
   185ac:	vst1.64	{d8-d9}, [r1 :128]
   185b0:	ldr	r2, [pc, #1012]	; 189ac <UnityEnd@@Base+0x71c>
   185b4:	add	r2, pc, r2
   185b8:	add	r1, r2, #16
   185bc:	str	r4, [r2, #112]	; 0x70
   185c0:	vst1.64	{d8-d9}, [r1 :128]
   185c4:	add	r1, r2, #32
   185c8:	vst1.64	{d8-d9}, [r1 :128]
   185cc:	add	r1, r2, #48	; 0x30
   185d0:	vst1.64	{d8-d9}, [r1 :128]
   185d4:	add	r1, r2, #64	; 0x40
   185d8:	vst1.64	{d8-d9}, [r1 :128]
   185dc:	add	r1, r2, #80	; 0x50
   185e0:	vst1.64	{d8-d9}, [r1 :128]
   185e4:	add	r1, r2, #96	; 0x60
   185e8:	vst1.64	{d8-d9}, [r1 :128]
   185ec:	ldr	r3, [pc, #956]	; 189b0 <UnityEnd@@Base+0x720>
   185f0:	add	r3, pc, r3
   185f4:	add	r1, r3, #16
   185f8:	str	r4, [r3, #80]	; 0x50
   185fc:	vst1.64	{d8-d9}, [r1 :128]
   18600:	add	r1, r3, #32
   18604:	vst1.64	{d8-d9}, [r1 :128]
   18608:	add	r1, r3, #48	; 0x30
   1860c:	vst1.64	{d8-d9}, [r1 :128]
   18610:	add	r1, r3, #64	; 0x40
   18614:	vst1.64	{d8-d9}, [r1 :128]
   18618:	mov	r1, #68	; 0x44
   1861c:	vst1.64	{d8-d9}, [r0 :128], r1
   18620:	str	r4, [r0]
   18624:	mov	r0, #116	; 0x74
   18628:	vst1.64	{d8-d9}, [r2 :128], r0
   1862c:	mov	r0, #84	; 0x54
   18630:	vst1.64	{d8-d9}, [r3 :128], r0
   18634:	str	r4, [r2]
   18638:	str	r4, [r3]
   1863c:	ldr	r2, [pc, #880]	; 189b4 <UnityEnd@@Base+0x724>
   18640:	add	r2, pc, r2
   18644:	add	r3, r2, #80	; 0x50
   18648:	str	r4, [r2, #96]	; 0x60
   1864c:	vst1.64	{d8-d9}, [r3 :128]
   18650:	add	r3, r2, #64	; 0x40
   18654:	vst1.64	{d8-d9}, [r3 :128]
   18658:	add	r3, r2, #48	; 0x30
   1865c:	vst1.64	{d8-d9}, [r3 :128]
   18660:	add	r3, r2, #32
   18664:	vst1.64	{d8-d9}, [r3 :128]
   18668:	add	r3, r2, #16
   1866c:	vst1.64	{d8-d9}, [r3 :128]
   18670:	mov	r3, #100	; 0x64
   18674:	vst1.64	{d8-d9}, [r2 :128], r3
   18678:	str	r4, [r2]
   1867c:	ldr	r2, [pc, #820]	; 189b8 <UnityEnd@@Base+0x728>
   18680:	add	r2, pc, r2
   18684:	vst1.64	{d8-d9}, [r2 :128]
   18688:	ldr	r2, [pc, #812]	; 189bc <UnityEnd@@Base+0x72c>
   1868c:	add	r2, pc, r2
   18690:	vst1.64	{d8-d9}, [r2 :128]
   18694:	ldr	r2, [pc, #804]	; 189c0 <UnityEnd@@Base+0x730>
   18698:	add	r2, pc, r2
   1869c:	add	r3, r2, #48	; 0x30
   186a0:	str	r4, [r2, #64]	; 0x40
   186a4:	vst1.64	{d8-d9}, [r3 :128]
   186a8:	add	r3, r2, #32
   186ac:	vst1.64	{d8-d9}, [r3 :128]
   186b0:	add	r3, r2, #16
   186b4:	vst1.64	{d8-d9}, [r2 :128], r1
   186b8:	vst1.64	{d8-d9}, [r3 :128]
   186bc:	str	r4, [r2]
   186c0:	ldr	r1, [pc, #764]	; 189c4 <UnityEnd@@Base+0x734>
   186c4:	add	r1, pc, r1
   186c8:	vst1.64	{d8-d9}, [r1 :128]
   186cc:	ldr	r1, [pc, #756]	; 189c8 <UnityEnd@@Base+0x738>
   186d0:	add	r1, pc, r1
   186d4:	add	r2, r1, #16
   186d8:	vst1.64	{d8-d9}, [r1 :128], r6
   186dc:	vst1.64	{d8-d9}, [r2 :128]
   186e0:	vst1.64	{d8-d9}, [r1 :128]
   186e4:	ldr	r1, [pc, #736]	; 189cc <UnityEnd@@Base+0x73c>
   186e8:	add	r1, pc, r1
   186ec:	vst1.64	{d8-d9}, [r1 :128]
   186f0:	ldr	r1, [pc, #728]	; 189d0 <UnityEnd@@Base+0x740>
   186f4:	add	r1, pc, r1
   186f8:	add	r2, r1, #64	; 0x40
   186fc:	str	r4, [r1, #80]	; 0x50
   18700:	vst1.64	{d8-d9}, [r2 :128]
   18704:	add	r2, r1, #48	; 0x30
   18708:	vst1.64	{d8-d9}, [r2 :128]
   1870c:	add	r2, r1, #32
   18710:	vst1.64	{d8-d9}, [r2 :128]
   18714:	add	r2, r1, #16
   18718:	vst1.64	{d8-d9}, [r1 :128], r0
   1871c:	vst1.64	{d8-d9}, [r2 :128]
   18720:	str	r4, [r1]
   18724:	mov	r2, #280	; 0x118
   18728:	ldr	r0, [pc, #676]	; 189d4 <UnityEnd@@Base+0x744>
   1872c:	add	r0, pc, r0
   18730:	add	r1, r0, #16
   18734:	vst1.64	{d8-d9}, [r0 :128], r6
   18738:	vst1.64	{d8-d9}, [r1 :128]
   1873c:	vst1.64	{d8-d9}, [r0 :128]
   18740:	mov	r1, #0
   18744:	ldr	r0, [pc, #652]	; 189d8 <UnityEnd@@Base+0x748>
   18748:	add	r0, pc, r0
   1874c:	bl	1276c <memset@plt>
   18750:	ldr	r0, [pc, #644]	; 189dc <UnityEnd@@Base+0x74c>
   18754:	mov	r2, #192	; 0xc0
   18758:	add	r0, pc, r0
   1875c:	add	r1, r0, #16
   18760:	vst1.64	{d8-d9}, [r1 :128]
   18764:	add	r1, r0, #32
   18768:	vst1.64	{d8-d9}, [r1 :128]
   1876c:	add	r1, r0, #48	; 0x30
   18770:	vst1.64	{d8-d9}, [r0 :128], r5
   18774:	vst1.64	{d8-d9}, [r1 :128]
   18778:	vst1.64	{d8-d9}, [r0 :128]
   1877c:	mov	r1, #0
   18780:	ldr	r0, [pc, #600]	; 189e0 <UnityEnd@@Base+0x750>
   18784:	add	r0, pc, r0
   18788:	bl	1276c <memset@plt>
   1878c:	ldr	r0, [pc, #592]	; 189e4 <UnityEnd@@Base+0x754>
   18790:	mov	r7, #112	; 0x70
   18794:	mov	r2, #248	; 0xf8
   18798:	add	r0, pc, r0
   1879c:	add	r1, r0, #16
   187a0:	vst1.64	{d8-d9}, [r1 :128]
   187a4:	add	r1, r0, #32
   187a8:	vst1.64	{d8-d9}, [r1 :128]
   187ac:	add	r1, r0, #48	; 0x30
   187b0:	vst1.64	{d8-d9}, [r1 :128]
   187b4:	add	r1, r0, #64	; 0x40
   187b8:	vst1.64	{d8-d9}, [r1 :128]
   187bc:	add	r1, r0, #80	; 0x50
   187c0:	vst1.64	{d8-d9}, [r1 :128]
   187c4:	add	r1, r0, #96	; 0x60
   187c8:	vst1.64	{d8-d9}, [r0 :128], r7
   187cc:	vst1.64	{d8-d9}, [r1 :128]
   187d0:	vst1.64	{d8-d9}, [r0 :128]
   187d4:	mov	r1, #0
   187d8:	ldr	r0, [pc, #520]	; 189e8 <UnityEnd@@Base+0x758>
   187dc:	add	r0, pc, r0
   187e0:	bl	1276c <memset@plt>
   187e4:	ldr	r0, [pc, #512]	; 189ec <UnityEnd@@Base+0x75c>
   187e8:	mov	r2, #176	; 0xb0
   187ec:	add	r0, pc, r0
   187f0:	add	r1, r0, #16
   187f4:	vst1.64	{d8-d9}, [r1 :128]
   187f8:	add	r1, r0, #32
   187fc:	vst1.64	{d8-d9}, [r1 :128]
   18800:	add	r1, r0, #48	; 0x30
   18804:	vst1.64	{d8-d9}, [r1 :128]
   18808:	add	r1, r0, #64	; 0x40
   1880c:	vst1.64	{d8-d9}, [r1 :128]
   18810:	add	r1, r0, #80	; 0x50
   18814:	vst1.64	{d8-d9}, [r1 :128]
   18818:	add	r1, r0, #96	; 0x60
   1881c:	vst1.64	{d8-d9}, [r0 :128], r7
   18820:	vst1.64	{d8-d9}, [r1 :128]
   18824:	vst1.64	{d8-d9}, [r0 :128]
   18828:	mov	r1, #0
   1882c:	ldr	r0, [pc, #444]	; 189f0 <UnityEnd@@Base+0x760>
   18830:	add	r0, pc, r0
   18834:	bl	1276c <memset@plt>
   18838:	ldr	r0, [pc, #436]	; 189f4 <UnityEnd@@Base+0x764>
   1883c:	mov	r2, #192	; 0xc0
   18840:	add	r0, pc, r0
   18844:	add	r1, r0, #16
   18848:	vst1.64	{d8-d9}, [r1 :128]
   1884c:	add	r1, r0, #32
   18850:	vst1.64	{d8-d9}, [r1 :128]
   18854:	add	r1, r0, #48	; 0x30
   18858:	vst1.64	{d8-d9}, [r0 :128], r5
   1885c:	vst1.64	{d8-d9}, [r1 :128]
   18860:	vst1.64	{d8-d9}, [r0 :128]
   18864:	mov	r1, #0
   18868:	ldr	r0, [pc, #392]	; 189f8 <UnityEnd@@Base+0x768>
   1886c:	add	r0, pc, r0
   18870:	bl	1276c <memset@plt>
   18874:	ldr	r0, [pc, #384]	; 189fc <UnityEnd@@Base+0x76c>
   18878:	mov	r2, #272	; 0x110
   1887c:	add	r0, pc, r0
   18880:	add	r1, r0, #16
   18884:	vst1.64	{d8-d9}, [r1 :128]
   18888:	add	r1, r0, #32
   1888c:	vst1.64	{d8-d9}, [r1 :128]
   18890:	add	r1, r0, #48	; 0x30
   18894:	vst1.64	{d8-d9}, [r0 :128], r5
   18898:	vst1.64	{d8-d9}, [r1 :128]
   1889c:	vst1.64	{d8-d9}, [r0 :128]
   188a0:	mov	r1, #0
   188a4:	ldr	r0, [pc, #340]	; 18a00 <UnityEnd@@Base+0x770>
   188a8:	add	r0, pc, r0
   188ac:	bl	1276c <memset@plt>
   188b0:	ldr	r0, [pc, #332]	; 18a04 <UnityEnd@@Base+0x774>
   188b4:	mov	r1, #0
   188b8:	mov	r2, #176	; 0xb0
   188bc:	add	r0, pc, r0
   188c0:	bl	1276c <memset@plt>
   188c4:	ldr	r1, [pc, #316]	; 18a08 <UnityEnd@@Base+0x778>
   188c8:	mov	r0, #48	; 0x30
   188cc:	add	r1, pc, r1
   188d0:	mov	r2, r1
   188d4:	vst1.64	{d8-d9}, [r2 :128], r0
   188d8:	vst1.64	{d8-d9}, [r2 :128]
   188dc:	ldr	r0, [pc, #296]	; 18a0c <UnityEnd@@Base+0x77c>
   188e0:	add	r0, pc, r0
   188e4:	add	r2, r0, #16
   188e8:	vst1.64	{d8-d9}, [r2 :128]
   188ec:	add	r2, r0, #32
   188f0:	vst1.64	{d8-d9}, [r2 :128]
   188f4:	add	r2, r0, #48	; 0x30
   188f8:	vst1.64	{d8-d9}, [r2 :128]
   188fc:	add	r2, r0, #64	; 0x40
   18900:	vst1.64	{d8-d9}, [r2 :128]
   18904:	add	r2, r0, #80	; 0x50
   18908:	vst1.64	{d8-d9}, [r2 :128]
   1890c:	add	r2, r0, #96	; 0x60
   18910:	vst1.64	{d8-d9}, [r2 :128]
   18914:	ldr	r2, [pc, #244]	; 18a10 <UnityEnd@@Base+0x780>
   18918:	add	r2, pc, r2
   1891c:	add	r3, r2, #16
   18920:	str	r4, [r2, #48]	; 0x30
   18924:	vst1.64	{d8-d9}, [r3 :128]
   18928:	add	r3, r2, #32
   1892c:	vst1.64	{d8-d9}, [r3 :128]
   18930:	ldr	r3, [pc, #220]	; 18a14 <UnityEnd@@Base+0x784>
   18934:	add	r3, pc, r3
   18938:	vst1.64	{d8-d9}, [r3 :128]
   1893c:	ldr	r3, [pc, #212]	; 18a18 <UnityEnd@@Base+0x788>
   18940:	vst1.64	{d8-d9}, [r0 :128], r7
   18944:	vst1.64	{d8-d9}, [r0 :128]
   18948:	mov	r0, #52	; 0x34
   1894c:	vst1.64	{d8-d9}, [r2 :128], r0
   18950:	str	r4, [r2]
   18954:	add	r3, pc, r3
   18958:	vst1.64	{d8-d9}, [r3 :128]
   1895c:	add	r3, r1, #16
   18960:	add	r1, r1, #32
   18964:	vst1.64	{d8-d9}, [r3 :128]
   18968:	vst1.64	{d8-d9}, [r1 :128]
   1896c:	ldr	r0, [pc, #168]	; 18a1c <UnityEnd@@Base+0x78c>
   18970:	add	r0, pc, r0
   18974:	vst1.64	{d8-d9}, [r0 :128]
   18978:	ldr	r0, [pc, #160]	; 18a20 <UnityEnd@@Base+0x790>
   1897c:	add	r0, pc, r0
   18980:	add	r1, r0, #16
   18984:	vst1.64	{d8-d9}, [r0 :128], r6
   18988:	vst1.64	{d8-d9}, [r1 :128]
   1898c:	vst1.64	{d8-d9}, [r0 :128]
   18990:	vpop	{d8-d9}
   18994:	pop	{r4, r5, r6, r7, fp, pc}
   18998:	andeq	r7, r1, r8, asr #28
   1899c:	ldrdeq	r7, [r1], -r0
   189a0:	ldrdeq	r7, [r1], -r4
   189a4:	strdeq	r7, [r1], -r8
   189a8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   189ac:	andeq	r7, r1, r4, asr #31
   189b0:	andeq	r8, r1, r8
   189b4:	andeq	r8, r1, r8, lsl r0
   189b8:	andeq	r8, r1, r8, asr #32
   189bc:	andeq	r8, r1, ip, asr #32
   189c0:	andeq	r8, r1, r0, asr r0
   189c4:	andeq	r8, r1, r4, ror r0
   189c8:	andeq	r8, r1, r8, ror r0
   189cc:	muleq	r1, r0, r0
   189d0:	muleq	r1, r4, r0
   189d4:	strheq	r8, [r1], -ip
   189d8:	ldrdeq	r8, [r1], -r0
   189dc:	andeq	r8, r1, r0, ror #3
   189e0:	andeq	r8, r1, r4, lsl #4
   189e4:			; <UNDEFINED> instruction: 0x000182b0
   189e8:	andeq	r8, r1, ip, ror #5
   189ec:	ldrdeq	r8, [r1], -ip
   189f0:	andeq	r8, r1, r8, lsl r4
   189f4:			; <UNDEFINED> instruction: 0x000184b8
   189f8:	ldrdeq	r8, [r1], -ip
   189fc:	andeq	r8, r1, ip, lsl #11
   18a00:			; <UNDEFINED> instruction: 0x000185b0
   18a04:	andeq	r8, r1, ip, lsr #13
   18a08:	andeq	r8, r1, ip, lsr #16
   18a0c:	andeq	r8, r1, r8, lsr r7
   18a10:	andeq	r8, r1, r0, lsl #15
   18a14:	andeq	r8, r1, r4, lsr #15
   18a18:	muleq	r1, r4, r7
   18a1c:	andeq	r8, r1, r8, asr #15
   18a20:	andeq	r8, r1, ip, asr #15
   18a24:	ldr	r0, [pc, #12]	; 18a38 <UnityEnd@@Base+0x7a8>
   18a28:	ldr	r1, [pc, #12]	; 18a3c <UnityEnd@@Base+0x7ac>
   18a2c:	add	r0, pc, r0
   18a30:	add	r1, pc, r1
   18a34:	b	1da5c <__gcov_flush@@Base+0xb8>
   18a38:			; <UNDEFINED> instruction: 0xfffffa50
   18a3c:			; <UNDEFINED> instruction: 0xfffffadc

00018a40 <init_token_int_type@@Base>:
   18a40:	ldr	r1, [pc, #56]	; 18a80 <init_token_int_type@@Base+0x40>
   18a44:	add	r2, pc, #36	; 0x24
   18a48:	vld1.64	{d16-d17}, [r2 :128]
   18a4c:	add	r1, pc, r1
   18a50:	vld1.64	{d18-d19}, [r1 :128]
   18a54:	vadd.i64	q8, q9, q8
   18a58:	vst1.64	{d16-d17}, [r1 :128]
   18a5c:	mov	r1, #0
   18a60:	str	r1, [r0]
   18a64:	bx	lr
   18a68:	nop	{0}
   18a6c:	nop	{0}
   18a70:	andeq	r0, r0, r1
   18a74:	andeq	r0, r0, r0
   18a78:	andeq	r0, r0, r1
   18a7c:	andeq	r0, r0, r0
   18a80:	andeq	r8, r1, ip, lsr #14
   18a84:	nop	{0}
   18a88:	nop	{0}
   18a8c:	nop	{0}

00018a90 <init_token_int_value@@Base>:
   18a90:	ldr	r2, [pc, #56]	; 18ad0 <init_token_int_value@@Base+0x40>
   18a94:	add	r3, pc, #36	; 0x24
   18a98:	vld1.64	{d16-d17}, [r3 :128]
   18a9c:	add	r2, pc, r2
   18aa0:	vld1.64	{d18-d19}, [r2 :128]
   18aa4:	vadd.i64	q8, q9, q8
   18aa8:	vst1.64	{d16-d17}, [r2 :128]
   18aac:	mov	r2, #1
   18ab0:	str	r2, [r0]
   18ab4:	str	r1, [r0, #4]
   18ab8:	bx	lr
   18abc:	nop	{0}
   18ac0:	andeq	r0, r0, r1
   18ac4:	andeq	r0, r0, r0
   18ac8:	andeq	r0, r0, r1
   18acc:	andeq	r0, r0, r0
   18ad0:	andeq	r8, r1, ip, ror #13
   18ad4:	nop	{0}
   18ad8:	nop	{0}
   18adc:	nop	{0}

00018ae0 <init_token_function@@Base>:
   18ae0:	ldr	r2, [pc, #56]	; 18b20 <init_token_function@@Base+0x40>
   18ae4:	add	r3, pc, #36	; 0x24
   18ae8:	vld1.64	{d16-d17}, [r3 :128]
   18aec:	add	r2, pc, r2
   18af0:	vld1.64	{d18-d19}, [r2 :128]
   18af4:	vadd.i64	q8, q9, q8
   18af8:	vst1.64	{d16-d17}, [r2 :128]
   18afc:	mov	r2, #2
   18b00:	str	r2, [r0]
   18b04:	str	r1, [r0, #4]
   18b08:	bx	lr
   18b0c:	nop	{0}
   18b10:	andeq	r0, r0, r1
   18b14:	andeq	r0, r0, r0
   18b18:	andeq	r0, r0, r1
   18b1c:	andeq	r0, r0, r0
   18b20:	andeq	r8, r1, ip, lsr #13
   18b24:	nop	{0}
   18b28:	nop	{0}
   18b2c:	nop	{0}

00018b30 <init_token_opar@@Base>:
   18b30:	ldr	r1, [pc, #56]	; 18b70 <init_token_opar@@Base+0x40>
   18b34:	add	r2, pc, #36	; 0x24
   18b38:	vld1.64	{d16-d17}, [r2 :128]
   18b3c:	add	r1, pc, r1
   18b40:	vld1.64	{d18-d19}, [r1 :128]
   18b44:	vadd.i64	q8, q9, q8
   18b48:	vst1.64	{d16-d17}, [r1 :128]
   18b4c:	mov	r1, #3
   18b50:	str	r1, [r0]
   18b54:	bx	lr
   18b58:	nop	{0}
   18b5c:	nop	{0}
   18b60:	andeq	r0, r0, r1
   18b64:	andeq	r0, r0, r0
   18b68:	andeq	r0, r0, r1
   18b6c:	andeq	r0, r0, r0
   18b70:	andeq	r8, r1, ip, ror #12
   18b74:	nop	{0}
   18b78:	nop	{0}
   18b7c:	nop	{0}

00018b80 <init_token_cpar@@Base>:
   18b80:	ldr	r1, [pc, #56]	; 18bc0 <init_token_cpar@@Base+0x40>
   18b84:	add	r2, pc, #36	; 0x24
   18b88:	vld1.64	{d16-d17}, [r2 :128]
   18b8c:	add	r1, pc, r1
   18b90:	vld1.64	{d18-d19}, [r1 :128]
   18b94:	vadd.i64	q8, q9, q8
   18b98:	vst1.64	{d16-d17}, [r1 :128]
   18b9c:	mov	r1, #4
   18ba0:	str	r1, [r0]
   18ba4:	bx	lr
   18ba8:	nop	{0}
   18bac:	nop	{0}
   18bb0:	andeq	r0, r0, r1
   18bb4:	andeq	r0, r0, r0
   18bb8:	andeq	r0, r0, r1
   18bbc:	andeq	r0, r0, r0
   18bc0:	andeq	r8, r1, ip, lsr #12
   18bc4:	nop	{0}
   18bc8:	nop	{0}
   18bcc:	nop	{0}

00018bd0 <init_token_obra@@Base>:
   18bd0:	ldr	r1, [pc, #56]	; 18c10 <init_token_obra@@Base+0x40>
   18bd4:	add	r2, pc, #36	; 0x24
   18bd8:	vld1.64	{d16-d17}, [r2 :128]
   18bdc:	add	r1, pc, r1
   18be0:	vld1.64	{d18-d19}, [r1 :128]
   18be4:	vadd.i64	q8, q9, q8
   18be8:	vst1.64	{d16-d17}, [r1 :128]
   18bec:	mov	r1, #5
   18bf0:	str	r1, [r0]
   18bf4:	bx	lr
   18bf8:	nop	{0}
   18bfc:	nop	{0}
   18c00:	andeq	r0, r0, r1
   18c04:	andeq	r0, r0, r0
   18c08:	andeq	r0, r0, r1
   18c0c:	andeq	r0, r0, r0
   18c10:	andeq	r8, r1, ip, ror #11
   18c14:	nop	{0}
   18c18:	nop	{0}
   18c1c:	nop	{0}

00018c20 <init_token_cbra@@Base>:
   18c20:	ldr	r1, [pc, #56]	; 18c60 <init_token_cbra@@Base+0x40>
   18c24:	add	r2, pc, #36	; 0x24
   18c28:	vld1.64	{d16-d17}, [r2 :128]
   18c2c:	add	r1, pc, r1
   18c30:	vld1.64	{d18-d19}, [r1 :128]
   18c34:	vadd.i64	q8, q9, q8
   18c38:	vst1.64	{d16-d17}, [r1 :128]
   18c3c:	mov	r1, #6
   18c40:	str	r1, [r0]
   18c44:	bx	lr
   18c48:	nop	{0}
   18c4c:	nop	{0}
   18c50:	andeq	r0, r0, r1
   18c54:	andeq	r0, r0, r0
   18c58:	andeq	r0, r0, r1
   18c5c:	andeq	r0, r0, r0
   18c60:	andeq	r8, r1, ip, lsr #11
   18c64:	nop	{0}
   18c68:	nop	{0}
   18c6c:	nop	{0}

00018c70 <init_token_return@@Base>:
   18c70:	ldr	r1, [pc, #56]	; 18cb0 <init_token_return@@Base+0x40>
   18c74:	add	r2, pc, #36	; 0x24
   18c78:	vld1.64	{d16-d17}, [r2 :128]
   18c7c:	add	r1, pc, r1
   18c80:	vld1.64	{d18-d19}, [r1 :128]
   18c84:	vadd.i64	q8, q9, q8
   18c88:	vst1.64	{d16-d17}, [r1 :128]
   18c8c:	mov	r1, #7
   18c90:	str	r1, [r0]
   18c94:	bx	lr
   18c98:	nop	{0}
   18c9c:	nop	{0}
   18ca0:	andeq	r0, r0, r1
   18ca4:	andeq	r0, r0, r0
   18ca8:	andeq	r0, r0, r1
   18cac:	andeq	r0, r0, r0
   18cb0:	andeq	r8, r1, ip, ror #10
   18cb4:	nop	{0}
   18cb8:	nop	{0}
   18cbc:	nop	{0}

00018cc0 <init_token_semicolon@@Base>:
   18cc0:	ldr	r1, [pc, #56]	; 18d00 <init_token_semicolon@@Base+0x40>
   18cc4:	add	r2, pc, #36	; 0x24
   18cc8:	vld1.64	{d16-d17}, [r2 :128]
   18ccc:	add	r1, pc, r1
   18cd0:	vld1.64	{d18-d19}, [r1 :128]
   18cd4:	vadd.i64	q8, q9, q8
   18cd8:	vst1.64	{d16-d17}, [r1 :128]
   18cdc:	mov	r1, #8
   18ce0:	str	r1, [r0]
   18ce4:	bx	lr
   18ce8:	nop	{0}
   18cec:	nop	{0}
   18cf0:	andeq	r0, r0, r1
   18cf4:	andeq	r0, r0, r0
   18cf8:	andeq	r0, r0, r1
   18cfc:	andeq	r0, r0, r0
   18d00:	andeq	r8, r1, ip, lsr #10
   18d04:	nop	{0}
   18d08:	nop	{0}
   18d0c:	nop	{0}

00018d10 <init_token_eof@@Base>:
   18d10:	ldr	r1, [pc, #56]	; 18d50 <init_token_eof@@Base+0x40>
   18d14:	add	r2, pc, #36	; 0x24
   18d18:	vld1.64	{d16-d17}, [r2 :128]
   18d1c:	add	r1, pc, r1
   18d20:	vld1.64	{d18-d19}, [r1 :128]
   18d24:	vadd.i64	q8, q9, q8
   18d28:	vst1.64	{d16-d17}, [r1 :128]
   18d2c:	mov	r1, #9
   18d30:	str	r1, [r0]
   18d34:	bx	lr
   18d38:	nop	{0}
   18d3c:	nop	{0}
   18d40:	andeq	r0, r0, r1
   18d44:	andeq	r0, r0, r0
   18d48:	andeq	r0, r0, r1
   18d4c:	andeq	r0, r0, r0
   18d50:	andeq	r8, r1, ip, ror #9
   18d54:	nop	{0}
   18d58:	nop	{0}
   18d5c:	nop	{0}

00018d60 <init_token_if@@Base>:
   18d60:	ldr	r1, [pc, #56]	; 18da0 <init_token_if@@Base+0x40>
   18d64:	add	r2, pc, #36	; 0x24
   18d68:	vld1.64	{d16-d17}, [r2 :128]
   18d6c:	add	r1, pc, r1
   18d70:	vld1.64	{d18-d19}, [r1 :128]
   18d74:	vadd.i64	q8, q9, q8
   18d78:	vst1.64	{d16-d17}, [r1 :128]
   18d7c:	mov	r1, #10
   18d80:	str	r1, [r0]
   18d84:	bx	lr
   18d88:	nop	{0}
   18d8c:	nop	{0}
   18d90:	andeq	r0, r0, r1
   18d94:	andeq	r0, r0, r0
   18d98:	andeq	r0, r0, r1
   18d9c:	andeq	r0, r0, r0
   18da0:	andeq	r8, r1, ip, lsr #9
   18da4:	nop	{0}
   18da8:	nop	{0}
   18dac:	nop	{0}

00018db0 <init_token_else@@Base>:
   18db0:	ldr	r1, [pc, #56]	; 18df0 <init_token_else@@Base+0x40>
   18db4:	add	r2, pc, #36	; 0x24
   18db8:	vld1.64	{d16-d17}, [r2 :128]
   18dbc:	add	r1, pc, r1
   18dc0:	vld1.64	{d18-d19}, [r1 :128]
   18dc4:	vadd.i64	q8, q9, q8
   18dc8:	vst1.64	{d16-d17}, [r1 :128]
   18dcc:	mov	r1, #11
   18dd0:	str	r1, [r0]
   18dd4:	bx	lr
   18dd8:	nop	{0}
   18ddc:	nop	{0}
   18de0:	andeq	r0, r0, r1
   18de4:	andeq	r0, r0, r0
   18de8:	andeq	r0, r0, r1
   18dec:	andeq	r0, r0, r0
   18df0:	andeq	r8, r1, ip, ror #8
   18df4:	nop	{0}
   18df8:	nop	{0}
   18dfc:	nop	{0}

00018e00 <init_token_boolean_op@@Base>:
   18e00:	ldr	r2, [pc, #56]	; 18e40 <init_token_boolean_op@@Base+0x40>
   18e04:	add	r3, pc, #36	; 0x24
   18e08:	vld1.64	{d16-d17}, [r3 :128]
   18e0c:	add	r2, pc, r2
   18e10:	vld1.64	{d18-d19}, [r2 :128]
   18e14:	vadd.i64	q8, q9, q8
   18e18:	vst1.64	{d16-d17}, [r2 :128]
   18e1c:	mov	r2, #12
   18e20:	str	r2, [r0]
   18e24:	str	r1, [r0, #4]
   18e28:	bx	lr
   18e2c:	nop	{0}
   18e30:	andeq	r0, r0, r1
   18e34:	andeq	r0, r0, r0
   18e38:	andeq	r0, r0, r1
   18e3c:	andeq	r0, r0, r0
   18e40:	andeq	r8, r1, ip, lsr #8
   18e44:	nop	{0}
   18e48:	nop	{0}
   18e4c:	nop	{0}

00018e50 <free_token_int_type@@Base>:
   18e50:	ldr	r1, [pc, #40]	; 18e80 <free_token_int_type@@Base+0x30>
   18e54:	add	r2, pc, #20
   18e58:	vld1.64	{d16-d17}, [r2 :128]
   18e5c:	add	r1, pc, r1
   18e60:	vld1.64	{d18-d19}, [r1 :128]
   18e64:	vadd.i64	q8, q9, q8
   18e68:	vst1.64	{d16-d17}, [r1 :128]
   18e6c:	b	1264c <free@plt>
   18e70:	andeq	r0, r0, r1
   18e74:	andeq	r0, r0, r0
   18e78:	andeq	r0, r0, r1
   18e7c:	andeq	r0, r0, r0
   18e80:	andeq	r8, r1, ip, ror #7
   18e84:	nop	{0}
   18e88:	nop	{0}
   18e8c:	nop	{0}

00018e90 <free_token_int_value@@Base>:
   18e90:	ldr	r1, [pc, #40]	; 18ec0 <free_token_int_value@@Base+0x30>
   18e94:	add	r2, pc, #20
   18e98:	vld1.64	{d16-d17}, [r2 :128]
   18e9c:	add	r1, pc, r1
   18ea0:	vld1.64	{d18-d19}, [r1 :128]
   18ea4:	vadd.i64	q8, q9, q8
   18ea8:	vst1.64	{d16-d17}, [r1 :128]
   18eac:	b	1264c <free@plt>
   18eb0:	andeq	r0, r0, r1
   18eb4:	andeq	r0, r0, r0
   18eb8:	andeq	r0, r0, r1
   18ebc:	andeq	r0, r0, r0
   18ec0:			; <UNDEFINED> instruction: 0x000183bc
   18ec4:	nop	{0}
   18ec8:	nop	{0}
   18ecc:	nop	{0}

00018ed0 <free_token_function@@Base>:
   18ed0:	ldr	r1, [pc, #40]	; 18f00 <free_token_function@@Base+0x30>
   18ed4:	add	r2, pc, #20
   18ed8:	vld1.64	{d16-d17}, [r2 :128]
   18edc:	add	r1, pc, r1
   18ee0:	vld1.64	{d18-d19}, [r1 :128]
   18ee4:	vadd.i64	q8, q9, q8
   18ee8:	vst1.64	{d16-d17}, [r1 :128]
   18eec:	b	1264c <free@plt>
   18ef0:	andeq	r0, r0, r1
   18ef4:	andeq	r0, r0, r0
   18ef8:	andeq	r0, r0, r1
   18efc:	andeq	r0, r0, r0
   18f00:	andeq	r8, r1, ip, lsl #7
   18f04:	nop	{0}
   18f08:	nop	{0}
   18f0c:	nop	{0}

00018f10 <free_token_opar@@Base>:
   18f10:	ldr	r1, [pc, #40]	; 18f40 <free_token_opar@@Base+0x30>
   18f14:	add	r2, pc, #20
   18f18:	vld1.64	{d16-d17}, [r2 :128]
   18f1c:	add	r1, pc, r1
   18f20:	vld1.64	{d18-d19}, [r1 :128]
   18f24:	vadd.i64	q8, q9, q8
   18f28:	vst1.64	{d16-d17}, [r1 :128]
   18f2c:	b	1264c <free@plt>
   18f30:	andeq	r0, r0, r1
   18f34:	andeq	r0, r0, r0
   18f38:	andeq	r0, r0, r1
   18f3c:	andeq	r0, r0, r0
   18f40:	andeq	r8, r1, ip, asr r3
   18f44:	nop	{0}
   18f48:	nop	{0}
   18f4c:	nop	{0}

00018f50 <free_token_cpar@@Base>:
   18f50:	ldr	r1, [pc, #40]	; 18f80 <free_token_cpar@@Base+0x30>
   18f54:	add	r2, pc, #20
   18f58:	vld1.64	{d16-d17}, [r2 :128]
   18f5c:	add	r1, pc, r1
   18f60:	vld1.64	{d18-d19}, [r1 :128]
   18f64:	vadd.i64	q8, q9, q8
   18f68:	vst1.64	{d16-d17}, [r1 :128]
   18f6c:	b	1264c <free@plt>
   18f70:	andeq	r0, r0, r1
   18f74:	andeq	r0, r0, r0
   18f78:	andeq	r0, r0, r1
   18f7c:	andeq	r0, r0, r0
   18f80:	andeq	r8, r1, ip, lsr #6
   18f84:	nop	{0}
   18f88:	nop	{0}
   18f8c:	nop	{0}

00018f90 <free_token_obra@@Base>:
   18f90:	ldr	r1, [pc, #40]	; 18fc0 <free_token_obra@@Base+0x30>
   18f94:	add	r2, pc, #20
   18f98:	vld1.64	{d16-d17}, [r2 :128]
   18f9c:	add	r1, pc, r1
   18fa0:	vld1.64	{d18-d19}, [r1 :128]
   18fa4:	vadd.i64	q8, q9, q8
   18fa8:	vst1.64	{d16-d17}, [r1 :128]
   18fac:	b	1264c <free@plt>
   18fb0:	andeq	r0, r0, r1
   18fb4:	andeq	r0, r0, r0
   18fb8:	andeq	r0, r0, r1
   18fbc:	andeq	r0, r0, r0
   18fc0:	strdeq	r8, [r1], -ip
   18fc4:	nop	{0}
   18fc8:	nop	{0}
   18fcc:	nop	{0}

00018fd0 <free_token_cbra@@Base>:
   18fd0:	ldr	r1, [pc, #40]	; 19000 <free_token_cbra@@Base+0x30>
   18fd4:	add	r2, pc, #20
   18fd8:	vld1.64	{d16-d17}, [r2 :128]
   18fdc:	add	r1, pc, r1
   18fe0:	vld1.64	{d18-d19}, [r1 :128]
   18fe4:	vadd.i64	q8, q9, q8
   18fe8:	vst1.64	{d16-d17}, [r1 :128]
   18fec:	b	1264c <free@plt>
   18ff0:	andeq	r0, r0, r1
   18ff4:	andeq	r0, r0, r0
   18ff8:	andeq	r0, r0, r1
   18ffc:	andeq	r0, r0, r0
   19000:	andeq	r8, r1, ip, asr #5
   19004:	nop	{0}
   19008:	nop	{0}
   1900c:	nop	{0}

00019010 <free_token_return@@Base>:
   19010:	ldr	r1, [pc, #40]	; 19040 <free_token_return@@Base+0x30>
   19014:	add	r2, pc, #20
   19018:	vld1.64	{d16-d17}, [r2 :128]
   1901c:	add	r1, pc, r1
   19020:	vld1.64	{d18-d19}, [r1 :128]
   19024:	vadd.i64	q8, q9, q8
   19028:	vst1.64	{d16-d17}, [r1 :128]
   1902c:	b	1264c <free@plt>
   19030:	andeq	r0, r0, r1
   19034:	andeq	r0, r0, r0
   19038:	andeq	r0, r0, r1
   1903c:	andeq	r0, r0, r0
   19040:	muleq	r1, ip, r2
   19044:	nop	{0}
   19048:	nop	{0}
   1904c:	nop	{0}

00019050 <free_token_semicolon@@Base>:
   19050:	ldr	r1, [pc, #40]	; 19080 <free_token_semicolon@@Base+0x30>
   19054:	add	r2, pc, #20
   19058:	vld1.64	{d16-d17}, [r2 :128]
   1905c:	add	r1, pc, r1
   19060:	vld1.64	{d18-d19}, [r1 :128]
   19064:	vadd.i64	q8, q9, q8
   19068:	vst1.64	{d16-d17}, [r1 :128]
   1906c:	b	1264c <free@plt>
   19070:	andeq	r0, r0, r1
   19074:	andeq	r0, r0, r0
   19078:	andeq	r0, r0, r1
   1907c:	andeq	r0, r0, r0
   19080:	andeq	r8, r1, ip, ror #4
   19084:	nop	{0}
   19088:	nop	{0}
   1908c:	nop	{0}

00019090 <free_token_eof@@Base>:
   19090:	ldr	r1, [pc, #40]	; 190c0 <free_token_eof@@Base+0x30>
   19094:	add	r2, pc, #20
   19098:	vld1.64	{d16-d17}, [r2 :128]
   1909c:	add	r1, pc, r1
   190a0:	vld1.64	{d18-d19}, [r1 :128]
   190a4:	vadd.i64	q8, q9, q8
   190a8:	vst1.64	{d16-d17}, [r1 :128]
   190ac:	b	1264c <free@plt>
   190b0:	andeq	r0, r0, r1
   190b4:	andeq	r0, r0, r0
   190b8:	andeq	r0, r0, r1
   190bc:	andeq	r0, r0, r0
   190c0:	andeq	r8, r1, ip, lsr r2
   190c4:	nop	{0}
   190c8:	nop	{0}
   190cc:	nop	{0}

000190d0 <free_token_if@@Base>:
   190d0:	ldr	r1, [pc, #40]	; 19100 <free_token_if@@Base+0x30>
   190d4:	add	r2, pc, #20
   190d8:	vld1.64	{d16-d17}, [r2 :128]
   190dc:	add	r1, pc, r1
   190e0:	vld1.64	{d18-d19}, [r1 :128]
   190e4:	vadd.i64	q8, q9, q8
   190e8:	vst1.64	{d16-d17}, [r1 :128]
   190ec:	b	1264c <free@plt>
   190f0:	andeq	r0, r0, r1
   190f4:	andeq	r0, r0, r0
   190f8:	andeq	r0, r0, r1
   190fc:	andeq	r0, r0, r0
   19100:	andeq	r8, r1, ip, lsl #4
   19104:	nop	{0}
   19108:	nop	{0}
   1910c:	nop	{0}

00019110 <free_token_else@@Base>:
   19110:	ldr	r1, [pc, #40]	; 19140 <free_token_else@@Base+0x30>
   19114:	add	r2, pc, #20
   19118:	vld1.64	{d16-d17}, [r2 :128]
   1911c:	add	r1, pc, r1
   19120:	vld1.64	{d18-d19}, [r1 :128]
   19124:	vadd.i64	q8, q9, q8
   19128:	vst1.64	{d16-d17}, [r1 :128]
   1912c:	b	1264c <free@plt>
   19130:	andeq	r0, r0, r1
   19134:	andeq	r0, r0, r0
   19138:	andeq	r0, r0, r1
   1913c:	andeq	r0, r0, r0
   19140:	ldrdeq	r8, [r1], -ip

00019144 <free_token_boolean_op@@Base>:
   19144:	push	{r4, r5, fp, lr}
   19148:	add	fp, sp, #8
   1914c:	ldr	r5, [pc, #120]	; 191cc <free_token_boolean_op@@Base+0x88>
   19150:	mov	r4, r0
   19154:	ldr	r0, [pc, #116]	; 191d0 <free_token_boolean_op@@Base+0x8c>
   19158:	ldr	r0, [pc, r0]
   1915c:	add	r5, pc, r5
   19160:	adds	r0, r0, #1
   19164:	str	r0, [r5]
   19168:	ldr	r0, [r5, #4]
   1916c:	adc	r0, r0, #0
   19170:	str	r0, [r5, #4]
   19174:	ldr	r0, [r4, #4]
   19178:	cmp	r0, #0
   1917c:	beq	1919c <free_token_boolean_op@@Base+0x58>
   19180:	ldrd	r2, [r5, #8]
   19184:	adds	r2, r2, #1
   19188:	adc	r3, r3, #0
   1918c:	strd	r2, [r5, #8]
   19190:	bl	1264c <free@plt>
   19194:	add	r0, r5, #24
   19198:	b	191a0 <free_token_boolean_op@@Base+0x5c>
   1919c:	add	r0, r5, #16
   191a0:	ldrd	r2, [r0]
   191a4:	adds	r2, r2, #1
   191a8:	adc	r3, r3, #0
   191ac:	strd	r2, [r0]
   191b0:	ldrd	r0, [r5, #32]
   191b4:	adds	r0, r0, #1
   191b8:	adc	r1, r1, #0
   191bc:	strd	r0, [r5, #32]
   191c0:	mov	r0, r4
   191c4:	pop	{r4, r5, fp, lr}
   191c8:	b	1264c <free@plt>
   191cc:	andeq	r8, r1, ip, lsr #3
   191d0:			; <UNDEFINED> instruction: 0x000181b0
   191d4:	push	{r4, r5, r6, lr}
   191d8:	sub	sp, sp, #8
   191dc:	ldr	r0, [pc, #112]	; 19254 <free_token_boolean_op@@Base+0x110>
   191e0:	ldr	r1, [pc, #112]	; 19258 <free_token_boolean_op@@Base+0x114>
   191e4:	movw	r2, #23366	; 0x5b46
   191e8:	movt	r2, #47030	; 0xb7b6
   191ec:	add	r0, pc, r0
   191f0:	add	r1, pc, r1
   191f4:	bl	1b0e0 <next@@Base+0x18c0>
   191f8:	ldr	r0, [pc, #92]	; 1925c <free_token_boolean_op@@Base+0x118>
   191fc:	ldr	r6, [pc, #92]	; 19260 <free_token_boolean_op@@Base+0x11c>
   19200:	mov	r5, #0
   19204:	add	r0, pc, r0
   19208:	add	r6, pc, r6
   1920c:	add	r4, r0, #4
   19210:	mov	r3, r6
   19214:	ldr	r0, [r3, r5]!
   19218:	ldr	r1, [r3, #16]
   1921c:	str	r1, [sp]
   19220:	ldmib	r3, {r1, r2}
   19224:	ldrb	r3, [r3, #12]
   19228:	bl	1b800 <next@@Base+0x1fe0>
   1922c:	ldrd	r0, [r4, #-4]
   19230:	bl	1c0b4 <next@@Base+0x2894>
   19234:	add	r5, r5, #20
   19238:	add	r4, r4, #8
   1923c:	cmp	r5, #520	; 0x208
   19240:	bne	19210 <free_token_boolean_op@@Base+0xcc>
   19244:	bl	1c83c <next@@Base+0x301c>
   19248:	add	sp, sp, #8
   1924c:	pop	{r4, r5, r6, lr}
   19250:	b	1d5a8 <next@@Base+0x3d88>
   19254:	ldrdeq	r5, [r0], -lr
   19258:	andeq	r5, r0, r3, asr #1
   1925c:	andeq	r6, r1, r4, lsr #22
   19260:	andeq	r6, r1, r0, lsl r9
   19264:	push	{fp, lr}
   19268:	bl	191d4 <free_token_boolean_op@@Base+0x90>
   1926c:	ldr	r0, [pc, #336]	; 193c4 <free_token_boolean_op@@Base+0x280>
   19270:	vmov.i32	q8, #0	; 0x00000000
   19274:	mov	r1, #0
   19278:	add	r0, pc, r0
   1927c:	vst1.64	{d16-d17}, [r0 :128]
   19280:	ldr	r0, [pc, #320]	; 193c8 <free_token_boolean_op@@Base+0x284>
   19284:	add	r0, pc, r0
   19288:	vst1.64	{d16-d17}, [r0 :128]
   1928c:	ldr	r0, [pc, #312]	; 193cc <free_token_boolean_op@@Base+0x288>
   19290:	add	r0, pc, r0
   19294:	vst1.64	{d16-d17}, [r0 :128]
   19298:	ldr	r0, [pc, #304]	; 193d0 <free_token_boolean_op@@Base+0x28c>
   1929c:	add	r0, pc, r0
   192a0:	vst1.64	{d16-d17}, [r0 :128]
   192a4:	ldr	r0, [pc, #296]	; 193d4 <free_token_boolean_op@@Base+0x290>
   192a8:	add	r0, pc, r0
   192ac:	vst1.64	{d16-d17}, [r0 :128]
   192b0:	ldr	r0, [pc, #288]	; 193d8 <free_token_boolean_op@@Base+0x294>
   192b4:	add	r0, pc, r0
   192b8:	vst1.64	{d16-d17}, [r0 :128]
   192bc:	ldr	r0, [pc, #280]	; 193dc <free_token_boolean_op@@Base+0x298>
   192c0:	add	r0, pc, r0
   192c4:	vst1.64	{d16-d17}, [r0 :128]
   192c8:	ldr	r0, [pc, #272]	; 193e0 <free_token_boolean_op@@Base+0x29c>
   192cc:	add	r0, pc, r0
   192d0:	vst1.64	{d16-d17}, [r0 :128]
   192d4:	ldr	r0, [pc, #264]	; 193e4 <free_token_boolean_op@@Base+0x2a0>
   192d8:	add	r0, pc, r0
   192dc:	vst1.64	{d16-d17}, [r0 :128]
   192e0:	ldr	r0, [pc, #256]	; 193e8 <free_token_boolean_op@@Base+0x2a4>
   192e4:	add	r0, pc, r0
   192e8:	vst1.64	{d16-d17}, [r0 :128]
   192ec:	ldr	r0, [pc, #248]	; 193ec <free_token_boolean_op@@Base+0x2a8>
   192f0:	add	r0, pc, r0
   192f4:	vst1.64	{d16-d17}, [r0 :128]
   192f8:	ldr	r0, [pc, #240]	; 193f0 <free_token_boolean_op@@Base+0x2ac>
   192fc:	add	r0, pc, r0
   19300:	vst1.64	{d16-d17}, [r0 :128]
   19304:	ldr	r0, [pc, #232]	; 193f4 <free_token_boolean_op@@Base+0x2b0>
   19308:	add	r0, pc, r0
   1930c:	vst1.64	{d16-d17}, [r0 :128]
   19310:	ldr	r0, [pc, #224]	; 193f8 <free_token_boolean_op@@Base+0x2b4>
   19314:	add	r0, pc, r0
   19318:	vst1.64	{d16-d17}, [r0 :128]
   1931c:	ldr	r0, [pc, #216]	; 193fc <free_token_boolean_op@@Base+0x2b8>
   19320:	add	r0, pc, r0
   19324:	vst1.64	{d16-d17}, [r0 :128]
   19328:	ldr	r0, [pc, #208]	; 19400 <free_token_boolean_op@@Base+0x2bc>
   1932c:	add	r0, pc, r0
   19330:	vst1.64	{d16-d17}, [r0 :128]
   19334:	ldr	r0, [pc, #200]	; 19404 <free_token_boolean_op@@Base+0x2c0>
   19338:	add	r0, pc, r0
   1933c:	vst1.64	{d16-d17}, [r0 :128]
   19340:	ldr	r0, [pc, #192]	; 19408 <free_token_boolean_op@@Base+0x2c4>
   19344:	add	r0, pc, r0
   19348:	vst1.64	{d16-d17}, [r0 :128]
   1934c:	ldr	r0, [pc, #184]	; 1940c <free_token_boolean_op@@Base+0x2c8>
   19350:	add	r0, pc, r0
   19354:	vst1.64	{d16-d17}, [r0 :128]
   19358:	ldr	r0, [pc, #176]	; 19410 <free_token_boolean_op@@Base+0x2cc>
   1935c:	add	r0, pc, r0
   19360:	vst1.64	{d16-d17}, [r0 :128]
   19364:	ldr	r0, [pc, #168]	; 19414 <free_token_boolean_op@@Base+0x2d0>
   19368:	add	r0, pc, r0
   1936c:	vst1.64	{d16-d17}, [r0 :128]
   19370:	ldr	r0, [pc, #160]	; 19418 <free_token_boolean_op@@Base+0x2d4>
   19374:	add	r0, pc, r0
   19378:	vst1.64	{d16-d17}, [r0 :128]
   1937c:	ldr	r0, [pc, #152]	; 1941c <free_token_boolean_op@@Base+0x2d8>
   19380:	add	r0, pc, r0
   19384:	vst1.64	{d16-d17}, [r0 :128]
   19388:	ldr	r0, [pc, #144]	; 19420 <free_token_boolean_op@@Base+0x2dc>
   1938c:	add	r0, pc, r0
   19390:	vst1.64	{d16-d17}, [r0 :128]
   19394:	ldr	r0, [pc, #136]	; 19424 <free_token_boolean_op@@Base+0x2e0>
   19398:	add	r0, pc, r0
   1939c:	vst1.64	{d16-d17}, [r0 :128]
   193a0:	ldr	r0, [pc, #128]	; 19428 <free_token_boolean_op@@Base+0x2e4>
   193a4:	add	r0, pc, r0
   193a8:	add	r2, r0, #16
   193ac:	str	r1, [r0, #32]
   193b0:	vst1.64	{d16-d17}, [r2 :128]
   193b4:	mov	r2, #36	; 0x24
   193b8:	vst1.64	{d16-d17}, [r0 :128], r2
   193bc:	str	r1, [r0]
   193c0:	pop	{fp, pc}
   193c4:	andeq	r7, r1, r0, lsl pc
   193c8:	strdeq	r7, [r1], -r4
   193cc:	andeq	r7, r1, r8, lsl #30
   193d0:	andeq	r7, r1, ip, lsl #30
   193d4:	andeq	r7, r1, r0, lsl pc
   193d8:	andeq	r7, r1, r4, lsl pc
   193dc:	andeq	r7, r1, r8, lsl pc
   193e0:	andeq	r7, r1, ip, lsl pc
   193e4:	andeq	r7, r1, r0, lsr #30
   193e8:	andeq	r7, r1, r4, lsr #30
   193ec:	andeq	r7, r1, r8, lsr #30
   193f0:	andeq	r7, r1, ip, lsr #30
   193f4:	andeq	r7, r1, r0, lsr pc
   193f8:	andeq	r7, r1, r4, lsr pc
   193fc:	andeq	r7, r1, r8, lsr pc
   19400:	andeq	r7, r1, ip, lsr pc
   19404:	andeq	r7, r1, r0, asr #30
   19408:	andeq	r7, r1, r4, asr #30
   1940c:	andeq	r7, r1, r8, asr #30
   19410:	andeq	r7, r1, ip, asr #30
   19414:	andeq	r7, r1, r0, asr pc
   19418:	andeq	r7, r1, r4, asr pc
   1941c:	andeq	r7, r1, r8, asr pc
   19420:	andeq	r7, r1, ip, asr pc
   19424:	andeq	r7, r1, r0, ror #30
   19428:	andeq	r7, r1, r4, ror #30
   1942c:	ldr	r0, [pc, #12]	; 19440 <free_token_boolean_op@@Base+0x2fc>
   19430:	ldr	r1, [pc, #12]	; 19444 <free_token_boolean_op@@Base+0x300>
   19434:	add	r0, pc, r0
   19438:	add	r1, pc, r1
   1943c:	b	1da5c <__gcov_flush@@Base+0xb8>
   19440:			; <UNDEFINED> instruction: 0xfffffd98
   19444:			; <UNDEFINED> instruction: 0xfffffe24
	...

00019450 <init_lexer@@Base>:
   19450:	ldr	r2, [pc, #56]	; 19490 <init_lexer@@Base+0x40>
   19454:	add	r3, pc, #36	; 0x24
   19458:	vld1.64	{d16-d17}, [r3 :128]
   1945c:	add	r2, pc, r2
   19460:	vld1.64	{d18-d19}, [r2 :128]
   19464:	vadd.i64	q8, q9, q8
   19468:	vst1.64	{d16-d17}, [r2 :128]
   1946c:	mov	r2, #0
   19470:	stm	r0, {r1, r2}
   19474:	str	r2, [r0, #8]
   19478:	bx	lr
   1947c:	nop	{0}
   19480:	andeq	r0, r0, r1
   19484:	andeq	r0, r0, r0
   19488:	andeq	r0, r0, r1
   1948c:	andeq	r0, r0, r0
   19490:	ldrdeq	r7, [r1], -ip
   19494:	nop	{0}
   19498:	nop	{0}
   1949c:	nop	{0}

000194a0 <destroy_lexer@@Base>:
   194a0:	push	{r4, sl, fp, lr}
   194a4:	add	fp, sp, #8
   194a8:	ldr	r4, [pc, #160]	; 19550 <destroy_lexer@@Base+0xb0>
   194ac:	ldr	r1, [pc, #160]	; 19554 <destroy_lexer@@Base+0xb4>
   194b0:	ldr	r1, [pc, r1]
   194b4:	add	r4, pc, r4
   194b8:	adds	r1, r1, #1
   194bc:	str	r1, [r4]
   194c0:	ldr	r1, [r4, #4]
   194c4:	adc	r1, r1, #0
   194c8:	str	r1, [r4, #4]
   194cc:	ldr	r0, [r0, #4]
   194d0:	cmp	r0, #0
   194d4:	beq	19510 <destroy_lexer@@Base+0x70>
   194d8:	ldr	r1, [pc, #120]	; 19558 <destroy_lexer@@Base+0xb8>
   194dc:	add	r2, pc, #92	; 0x5c
   194e0:	vld1.64	{d16-d17}, [r2 :128]
   194e4:	ldrd	r2, [r4, #8]
   194e8:	add	r1, pc, r1
   194ec:	vld1.64	{d18-d19}, [r1 :128]
   194f0:	adds	r2, r2, #1
   194f4:	adc	r3, r3, #0
   194f8:	strd	r2, [r4, #8]
   194fc:	vadd.i64	q8, q9, q8
   19500:	vst1.64	{d16-d17}, [r1 :128]
   19504:	bl	1264c <free@plt>
   19508:	add	r0, r4, #24
   1950c:	b	19514 <destroy_lexer@@Base+0x74>
   19510:	add	r0, r4, #16
   19514:	ldrd	r2, [r0]
   19518:	adds	r2, r2, #1
   1951c:	adc	r3, r3, #0
   19520:	strd	r2, [r0]
   19524:	ldrd	r0, [r4, #32]
   19528:	adds	r0, r0, #1
   1952c:	adc	r1, r1, #0
   19530:	strd	r0, [r4, #32]
   19534:	pop	{r4, sl, fp, pc}
   19538:	nop	{0}
   1953c:	nop	{0}
   19540:	andeq	r0, r0, r1
   19544:	andeq	r0, r0, r0
   19548:	andeq	r0, r0, r1
   1954c:	andeq	r0, r0, r0
   19550:	muleq	r1, r4, lr
   19554:	muleq	r1, r8, lr
   19558:	muleq	r1, r0, lr
   1955c:	nop	{0}

00019560 <free_stack_base@@Base>:
   19560:	ldr	r1, [pc, #40]	; 19590 <free_stack_base@@Base+0x30>
   19564:	add	r2, pc, #20
   19568:	vld1.64	{d16-d17}, [r2 :128]
   1956c:	add	r1, pc, r1
   19570:	vld1.64	{d18-d19}, [r1 :128]
   19574:	vadd.i64	q8, q9, q8
   19578:	vst1.64	{d16-d17}, [r1 :128]
   1957c:	b	1264c <free@plt>
   19580:	andeq	r0, r0, r1
   19584:	andeq	r0, r0, r0
   19588:	andeq	r0, r0, r1
   1958c:	andeq	r0, r0, r0
   19590:	andeq	r7, r1, ip, lsl #28
   19594:	nop	{0}
   19598:	nop	{0}
   1959c:	nop	{0}

000195a0 <push_back@@Base>:
   195a0:	push	{r4, r5, fp, lr}
   195a4:	add	fp, sp, #8
   195a8:	mov	r5, r0
   195ac:	ldr	r0, [pc, #76]	; 19600 <push_back@@Base+0x60>
   195b0:	mov	r4, r1
   195b4:	add	r1, pc, #52	; 0x34
   195b8:	vld1.64	{d16-d17}, [r1 :128]
   195bc:	add	r0, pc, r0
   195c0:	vld1.64	{d18-d19}, [r0 :128]
   195c4:	vadd.i64	q8, q9, q8
   195c8:	vst1.64	{d16-d17}, [r0 :128]
   195cc:	mov	r0, #8
   195d0:	bl	126dc <malloc@plt>
   195d4:	ldr	r1, [r5, #4]
   195d8:	stm	r0, {r1, r4}
   195dc:	str	r0, [r5, #4]
   195e0:	pop	{r4, r5, fp, pc}
   195e4:	nop	{0}
   195e8:	nop	{0}
   195ec:	nop	{0}
   195f0:	andeq	r0, r0, r1
   195f4:	andeq	r0, r0, r0
   195f8:	andeq	r0, r0, r1
   195fc:	andeq	r0, r0, r0
   19600:	andeq	r7, r1, ip, asr #27
   19604:	nop	{0}
   19608:	nop	{0}
   1960c:	nop	{0}

00019610 <get_char@@Base>:
   19610:	ldr	r1, [pc, #72]	; 19660 <get_char@@Base+0x50>
   19614:	add	r2, pc, #52	; 0x34
   19618:	vld1.64	{d16-d17}, [r2 :128]
   1961c:	add	r1, pc, r1
   19620:	vld1.64	{d18-d19}, [r1 :128]
   19624:	vadd.i64	q8, q9, q8
   19628:	vst1.64	{d16-d17}, [r1 :128]
   1962c:	ldr	r2, [r0, #8]
   19630:	ldr	r1, [r0]
   19634:	add	r3, r2, #1
   19638:	str	r3, [r0, #8]
   1963c:	ldrb	r0, [r1, r2]
   19640:	bx	lr
   19644:	nop	{0}
   19648:	nop	{0}
   1964c:	nop	{0}
   19650:	andeq	r0, r0, r1
   19654:	andeq	r0, r0, r0
   19658:	andeq	r0, r0, r1
   1965c:	andeq	r0, r0, r0
   19660:	andeq	r7, r1, ip, ror sp

00019664 <push_back_chars@@Base>:
   19664:	push	{r4, r5, r6, r7, fp, lr}
   19668:	add	fp, sp, #16
   1966c:	ldr	r2, [pc, #144]	; 19704 <push_back_chars@@Base+0xa0>
   19670:	ldr	r3, [pc, #144]	; 19708 <push_back_chars@@Base+0xa4>
   19674:	ldr	r3, [pc, r3]
   19678:	add	r2, pc, r2
   1967c:	adds	r3, r3, #1
   19680:	str	r3, [r2]
   19684:	ldr	r3, [r2, #4]
   19688:	adc	r3, r3, #0
   1968c:	str	r3, [r2, #4]
   19690:	ldr	r3, [r0, #8]
   19694:	cmp	r3, r1
   19698:	bcc	196cc <push_back_chars@@Base+0x68>
   1969c:	ldrd	r4, [r2, #8]
   196a0:	ldrd	r6, [r2, #24]
   196a4:	sub	r1, r3, r1
   196a8:	adds	r4, r4, #1
   196ac:	adc	r5, r5, #0
   196b0:	adds	r6, r6, #1
   196b4:	adc	r7, r7, #0
   196b8:	str	r6, [r2, #24]
   196bc:	strd	r4, [r2, #8]
   196c0:	str	r7, [r2, #28]
   196c4:	str	r1, [r0, #8]
   196c8:	pop	{r4, r5, r6, r7, fp, pc}
   196cc:	ldrd	r0, [r2, #16]
   196d0:	adds	r0, r0, #1
   196d4:	adc	r1, r1, #0
   196d8:	strd	r0, [r2, #16]
   196dc:	mov	r1, #32
   196e0:	mov	r2, #1
   196e4:	ldr	r0, [pc, #32]	; 1970c <push_back_chars@@Base+0xa8>
   196e8:	ldr	r0, [pc, r0]
   196ec:	ldr	r3, [r0]
   196f0:	ldr	r0, [pc, #24]	; 19710 <push_back_chars@@Base+0xac>
   196f4:	add	r0, pc, r0
   196f8:	bl	126b8 <fwrite@plt>
   196fc:	mov	r0, #1
   19700:	bl	12718 <exit@plt>
   19704:	andeq	r7, r1, r0, lsr sp
   19708:	andeq	r7, r1, r4, lsr sp
   1970c:	andeq	r6, r1, r4, lsr #20
   19710:	andeq	r5, r0, r3, lsl r5
   19714:	nop	{0}
   19718:	nop	{0}
   1971c:	nop	{0}

00019720 <push_back_one_char@@Base>:
   19720:	push	{r4, r5, r6, r7, fp, lr}
   19724:	add	fp, sp, #16
   19728:	ldr	r2, [pc, #208]	; 19800 <push_back_one_char@@Base+0xe0>
   1972c:	add	r1, pc, #188	; 0xbc
   19730:	vld1.64	{d16-d17}, [r1 :128]
   19734:	add	r2, pc, r2
   19738:	vld1.64	{d18-d19}, [r2 :128]
   1973c:	ldr	r1, [pc, #192]	; 19804 <push_back_one_char@@Base+0xe4>
   19740:	ldr	r3, [pc, #192]	; 19808 <push_back_one_char@@Base+0xe8>
   19744:	ldr	r3, [pc, r3]
   19748:	add	r1, pc, r1
   1974c:	vadd.i64	q8, q9, q8
   19750:	adds	r3, r3, #1
   19754:	vst1.64	{d16-d17}, [r2 :128]
   19758:	str	r3, [r1]
   1975c:	ldr	r3, [r1, #4]
   19760:	adc	r3, r3, #0
   19764:	str	r3, [r1, #4]
   19768:	ldr	r2, [r0, #8]
   1976c:	cmp	r2, #0
   19770:	beq	197a4 <push_back_one_char@@Base+0x84>
   19774:	ldrd	r4, [r1, #8]
   19778:	ldrd	r6, [r1, #24]
   1977c:	adds	r4, r4, #1
   19780:	adc	r5, r5, #0
   19784:	adds	r3, r6, #1
   19788:	str	r3, [r1, #24]
   1978c:	adc	r3, r7, #0
   19790:	strd	r4, [r1, #8]
   19794:	str	r3, [r1, #28]
   19798:	sub	r1, r2, #1
   1979c:	str	r1, [r0, #8]
   197a0:	pop	{r4, r5, r6, r7, fp, pc}
   197a4:	ldr	r0, [r1, #16]
   197a8:	ldr	r3, [r1, #20]
   197ac:	mov	r2, #1
   197b0:	adds	r0, r0, #1
   197b4:	adc	r3, r3, #0
   197b8:	str	r0, [r1, #16]
   197bc:	str	r3, [r1, #20]
   197c0:	mov	r1, #32
   197c4:	ldr	r0, [pc, #64]	; 1980c <push_back_one_char@@Base+0xec>
   197c8:	ldr	r0, [pc, r0]
   197cc:	ldr	r3, [r0]
   197d0:	ldr	r0, [pc, #56]	; 19810 <push_back_one_char@@Base+0xf0>
   197d4:	add	r0, pc, r0
   197d8:	bl	126b8 <fwrite@plt>
   197dc:	mov	r0, #1
   197e0:	bl	12718 <exit@plt>
   197e4:	nop	{0}
   197e8:	nop	{0}
   197ec:	nop	{0}
   197f0:	andeq	r0, r0, r1
   197f4:	andeq	r0, r0, r0
   197f8:	andeq	r0, r0, r1
   197fc:	andeq	r0, r0, r0
   19800:	muleq	r1, r4, ip
   19804:	andeq	r7, r1, r0, ror #24
   19808:	andeq	r7, r1, r4, ror #24
   1980c:	andeq	r6, r1, r4, asr #18
   19810:	andeq	r5, r0, r3, lsr r4
   19814:	nop	{0}
   19818:	nop	{0}
   1981c:	nop	{0}

00019820 <next@@Base>:
   19820:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19824:	add	fp, sp, #28
   19828:	sub	sp, sp, #524	; 0x20c
   1982c:	ldr	r7, [pc, #3832]	; 1a72c <next@@Base+0xf0c>
   19830:	mov	r4, r0
   19834:	ldr	r0, [pc, #3828]	; 1a730 <next@@Base+0xf10>
   19838:	ldr	r0, [pc, r0]
   1983c:	add	r7, pc, r7
   19840:	adds	r0, r0, #1
   19844:	str	r0, [r7]
   19848:	ldr	r0, [r7, #4]
   1984c:	adc	r0, r0, #0
   19850:	str	r0, [r7, #4]
   19854:	ldr	r0, [r4, #4]
   19858:	cmp	r0, #0
   1985c:	beq	198ac <next@@Base+0x8c>
   19860:	ldrd	r2, [r7, #8]
   19864:	adds	r2, r2, #1
   19868:	adc	r3, r3, #0
   1986c:	strd	r2, [r7, #8]
   19870:	ldr	r1, [r0]
   19874:	str	r1, [r4, #4]
   19878:	mov	r1, #0
   1987c:	ldr	r6, [r0, #4]
   19880:	str	r1, [r0, #4]
   19884:	ldr	r1, [pc, #4044]	; 1a858 <next@@Base+0x1038>
   19888:	add	r2, pc, #1008	; 0x3f0
   1988c:	vld1.64	{d16-d17}, [r2 :128]
   19890:	add	r1, pc, r1
   19894:	vld1.64	{d18-d19}, [r1 :128]
   19898:	vadd.i64	q8, q9, q8
   1989c:	vst1.64	{d16-d17}, [r1 :128]
   198a0:	bl	1264c <free@plt>
   198a4:	add	r0, r7, #24
   198a8:	b	19d9c <next@@Base+0x57c>
   198ac:	ldr	lr, [pc, #4008]	; 1a85c <next@@Base+0x103c>
   198b0:	add	r1, pc, #968	; 0x3c8
   198b4:	ldrd	r2, [r7, #16]
   198b8:	vld1.64	{d16-d17}, [r1 :128]
   198bc:	add	lr, pc, lr
   198c0:	adds	r2, r2, #1
   198c4:	vld1.64	{d18-d19}, [lr :128]
   198c8:	adc	r3, r3, #0
   198cc:	strd	r2, [r7, #16]
   198d0:	vadd.i64	q8, q9, q8
   198d4:	vst1.64	{d16-d17}, [lr :128]
   198d8:	ldr	r2, [r4, #8]
   198dc:	ldr	r1, [r4]
   198e0:	add	r3, r2, #1
   198e4:	str	r3, [r4, #8]
   198e8:	ldrb	r5, [r1, r2]
   198ec:	ldrd	r2, [r7, #32]
   198f0:	adds	r2, r2, #1
   198f4:	adc	r3, r3, #0
   198f8:	cmp	r5, #0
   198fc:	strd	r2, [r7, #32]
   19900:	beq	19d78 <next@@Base+0x558>
   19904:	mov	r2, #0
   19908:	add	r8, r7, #56	; 0x38
   1990c:	add	r9, r7, #112	; 0x70
   19910:	add	ip, sp, #8
   19914:	mov	sl, #0
   19918:	b	19950 <next@@Base+0x130>
   1991c:	mov	r1, r8
   19920:	ldm	r1, {r0, r3}
   19924:	adds	r0, r0, #1
   19928:	adc	r3, r3, #0
   1992c:	stm	r1, {r0, r3}
   19930:	ldr	r0, [r7, #984]	; 0x3d8
   19934:	ldr	r1, [r7, #988]	; 0x3dc
   19938:	adds	r0, r0, #1
   1993c:	adc	r1, r1, #0
   19940:	tst	r5, #255	; 0xff
   19944:	str	r0, [r7, #984]	; 0x3d8
   19948:	str	r1, [r7, #988]	; 0x3dc
   1994c:	beq	19d78 <next@@Base+0x558>
   19950:	ldr	r1, [r7, #40]	; 0x28
   19954:	ldr	r3, [r7, #44]	; 0x2c
   19958:	adds	r1, r1, #1
   1995c:	adc	r3, r3, #0
   19960:	cmp	r2, #5
   19964:	str	r1, [r7, #40]	; 0x28
   19968:	str	r3, [r7, #44]	; 0x2c
   1996c:	bhi	1991c <next@@Base+0xfc>
   19970:	add	r1, pc, #4
   19974:	ldr	r2, [r1, r2, lsl #2]
   19978:	add	pc, r1, r2
   1997c:	andeq	r0, r0, r8, lsl r0
   19980:	andeq	r0, r0, r4, asr r4
   19984:	andeq	r0, r0, r8, lsl r8
   19988:	andeq	r0, r0, ip, lsl #10
   1998c:	andeq	r0, r0, r8, asr #12
   19990:			; <UNDEFINED> instruction: 0x000008bc
   19994:	ldrd	r2, [r7, #64]	; 0x40
   19998:	mov	r1, r9
   1999c:	adds	r2, r2, #1
   199a0:	adc	r3, r3, #0
   199a4:	strd	r2, [r7, #64]	; 0x40
   199a8:	uxtb	r2, r5
   199ac:	cmp	r2, #9
   199b0:	beq	19a00 <next@@Base+0x1e0>
   199b4:	ldr	r1, [r7, #120]	; 0x78
   199b8:	ldr	r3, [r7, #124]	; 0x7c
   199bc:	adds	r1, r1, #1
   199c0:	adc	r3, r3, #0
   199c4:	cmp	r2, #32
   199c8:	str	r1, [r7, #120]	; 0x78
   199cc:	str	r3, [r7, #124]	; 0x7c
   199d0:	bne	199dc <next@@Base+0x1bc>
   199d4:	add	r1, r7, #128	; 0x80
   199d8:	b	19a00 <next@@Base+0x1e0>
   199dc:	ldr	r1, [r7, #136]	; 0x88
   199e0:	ldr	r3, [r7, #140]	; 0x8c
   199e4:	adds	r1, r1, #1
   199e8:	adc	r3, r3, #0
   199ec:	cmp	r2, #10
   199f0:	str	r1, [r7, #136]	; 0x88
   199f4:	str	r3, [r7, #140]	; 0x8c
   199f8:	bne	19a48 <next@@Base+0x228>
   199fc:	add	r1, r7, #144	; 0x90
   19a00:	ldrd	r2, [r1]
   19a04:	adds	r2, r2, #1
   19a08:	adc	r3, r3, #0
   19a0c:	strd	r2, [r1]
   19a10:	add	r1, pc, #616	; 0x268
   19a14:	vld1.64	{d18-d19}, [lr :128]
   19a18:	vld1.64	{d16-d17}, [r1 :128]
   19a1c:	vadd.i64	q8, q9, q8
   19a20:	vst1.64	{d16-d17}, [lr :128]
   19a24:	ldr	r3, [r4, #8]
   19a28:	ldr	r2, [r4]
   19a2c:	add	r1, r3, #1
   19a30:	add	r5, r2, r3
   19a34:	mov	r2, #0
   19a38:	str	r1, [r4, #8]
   19a3c:	add	r1, r7, #160	; 0xa0
   19a40:	ldrb	r5, [r5]
   19a44:	b	19920 <next@@Base+0x100>
   19a48:	ldr	r1, [r7, #152]	; 0x98
   19a4c:	ldr	r3, [r7, #156]	; 0x9c
   19a50:	adds	r1, r1, #1
   19a54:	adc	r3, r3, #0
   19a58:	cmp	r2, #48	; 0x30
   19a5c:	str	r1, [r7, #152]	; 0x98
   19a60:	str	r3, [r7, #156]	; 0x9c
   19a64:	beq	1a468 <next@@Base+0xc48>
   19a68:	ldr	r1, [r7, #176]	; 0xb0
   19a6c:	ldr	r3, [r7, #180]	; 0xb4
   19a70:	adds	r1, r1, #1
   19a74:	adc	r3, r3, #0
   19a78:	cmp	r2, #49	; 0x31
   19a7c:	str	r1, [r7, #176]	; 0xb0
   19a80:	str	r3, [r7, #180]	; 0xb4
   19a84:	bcc	1a494 <next@@Base+0xc74>
   19a88:	ldr	r1, [r7, #192]	; 0xc0
   19a8c:	ldr	r3, [r7, #196]	; 0xc4
   19a90:	adds	r1, r1, #1
   19a94:	adc	r3, r3, #0
   19a98:	cmp	r2, #57	; 0x39
   19a9c:	str	r1, [r7, #192]	; 0xc0
   19aa0:	str	r3, [r7, #196]	; 0xc4
   19aa4:	bhi	19af4 <next@@Base+0x2d4>
   19aa8:	add	r1, pc, #464	; 0x1d0
   19aac:	vld1.64	{d18-d19}, [lr :128]
   19ab0:	ldrd	r2, [r7, #208]	; 0xd0
   19ab4:	strb	r5, [ip, sl]
   19ab8:	add	sl, sl, #1
   19abc:	vld1.64	{d16-d17}, [r1 :128]
   19ac0:	adds	r2, r2, #1
   19ac4:	adc	r3, r3, #0
   19ac8:	vadd.i64	q8, q9, q8
   19acc:	strd	r2, [r7, #208]	; 0xd0
   19ad0:	vst1.64	{d16-d17}, [lr :128]
   19ad4:	ldr	r3, [r4, #8]
   19ad8:	ldr	r2, [r4]
   19adc:	add	r1, r3, #1
   19ae0:	add	r5, r2, r3
   19ae4:	mov	r2, #1
   19ae8:	str	r1, [r4, #8]
   19aec:	add	r1, r7, #224	; 0xe0
   19af0:	b	19a40 <next@@Base+0x220>
   19af4:	ldrd	r0, [r7, #240]	; 0xf0
   19af8:	ldr	r6, [r7, #216]	; 0xd8
   19afc:	ldr	r3, [r7, #220]	; 0xdc
   19b00:	adds	r0, r0, #1
   19b04:	str	r0, [r7, #240]	; 0xf0
   19b08:	adc	r1, r1, #0
   19b0c:	adds	r6, r6, #1
   19b10:	ldr	r0, [r7, #264]	; 0x108
   19b14:	adc	r3, r3, #0
   19b18:	adds	r0, r0, #1
   19b1c:	str	r0, [r7, #264]	; 0x108
   19b20:	str	r6, [r7, #216]	; 0xd8
   19b24:	str	r3, [r7, #220]	; 0xdc
   19b28:	str	r1, [r7, #244]	; 0xf4
   19b2c:	ldr	r0, [r7, #268]	; 0x10c
   19b30:	adc	r0, r0, #0
   19b34:	cmp	r2, #123	; 0x7b
   19b38:	str	r0, [r7, #268]	; 0x10c
   19b3c:	beq	1a51c <next@@Base+0xcfc>
   19b40:	ldr	r0, [r7, #288]	; 0x120
   19b44:	ldr	r1, [r7, #292]	; 0x124
   19b48:	adds	r0, r0, #1
   19b4c:	adc	r1, r1, #0
   19b50:	cmp	r2, #125	; 0x7d
   19b54:	str	r0, [r7, #288]	; 0x120
   19b58:	str	r1, [r7, #292]	; 0x124
   19b5c:	beq	1a54c <next@@Base+0xd2c>
   19b60:	ldr	r0, [r7, #312]	; 0x138
   19b64:	ldr	r1, [r7, #316]	; 0x13c
   19b68:	adds	r0, r0, #1
   19b6c:	adc	r1, r1, #0
   19b70:	cmp	r2, #59	; 0x3b
   19b74:	str	r0, [r7, #312]	; 0x138
   19b78:	str	r1, [r7, #316]	; 0x13c
   19b7c:	beq	1a57c <next@@Base+0xd5c>
   19b80:	ldr	r0, [r7, #336]	; 0x150
   19b84:	ldr	r1, [r7, #340]	; 0x154
   19b88:	adds	r0, r0, #1
   19b8c:	adc	r1, r1, #0
   19b90:	cmp	r2, #101	; 0x65
   19b94:	str	r0, [r7, #336]	; 0x150
   19b98:	str	r1, [r7, #340]	; 0x154
   19b9c:	bne	19bf8 <next@@Base+0x3d8>
   19ba0:	add	r0, pc, #216	; 0xd8
   19ba4:	vld1.64	{d18-d19}, [lr :128]
   19ba8:	ldr	r1, [r7, #356]	; 0x164
   19bac:	vld1.64	{d16-d17}, [r0 :128]
   19bb0:	mov	r0, #101	; 0x65
   19bb4:	strb	r0, [ip, sl]
   19bb8:	ldr	r0, [r7, #352]	; 0x160
   19bbc:	add	sl, sl, #1
   19bc0:	vadd.i64	q8, q9, q8
   19bc4:	adds	r0, r0, #1
   19bc8:	adc	r1, r1, #0
   19bcc:	str	r0, [r7, #352]	; 0x160
   19bd0:	str	r1, [r7, #356]	; 0x164
   19bd4:	vst1.64	{d16-d17}, [lr :128]
   19bd8:	ldr	r2, [r4, #8]
   19bdc:	ldr	r0, [r4]
   19be0:	add	r1, r2, #1
   19be4:	add	r5, r0, r2
   19be8:	mov	r2, #5
   19bec:	str	r1, [r4, #8]
   19bf0:	add	r1, r7, #368	; 0x170
   19bf4:	b	19a40 <next@@Base+0x220>
   19bf8:	ldr	r0, [r7, #360]	; 0x168
   19bfc:	ldr	r1, [r7, #364]	; 0x16c
   19c00:	mov	r3, #109	; 0x6d
   19c04:	mov	r6, #114	; 0x72
   19c08:	adds	r0, r0, #1
   19c0c:	adc	r1, r1, #0
   19c10:	cmp	r2, #105	; 0x69
   19c14:	str	r0, [r7, #360]	; 0x168
   19c18:	str	r1, [r7, #364]	; 0x16c
   19c1c:	mov	r1, #105	; 0x69
   19c20:	bne	19c90 <next@@Base+0x470>
   19c24:	add	r0, pc, #84	; 0x54
   19c28:	vld1.64	{d18-d19}, [lr :128]
   19c2c:	strb	r1, [ip, sl]
   19c30:	ldr	r1, [r7, #380]	; 0x17c
   19c34:	add	sl, sl, #1
   19c38:	vld1.64	{d16-d17}, [r0 :128]
   19c3c:	ldr	r0, [r7, #376]	; 0x178
   19c40:	adds	r0, r0, #1
   19c44:	vadd.i64	q8, q9, q8
   19c48:	adc	r1, r1, #0
   19c4c:	str	r0, [r7, #376]	; 0x178
   19c50:	str	r1, [r7, #380]	; 0x17c
   19c54:	vst1.64	{d16-d17}, [lr :128]
   19c58:	ldr	r2, [r4, #8]
   19c5c:	ldr	r0, [r4]
   19c60:	add	r1, r2, #1
   19c64:	add	r5, r0, r2
   19c68:	mov	r2, #2
   19c6c:	str	r1, [r4, #8]
   19c70:	add	r1, r7, #392	; 0x188
   19c74:	b	19a40 <next@@Base+0x220>
   19c78:	nop	{0}
   19c7c:	nop	{0}
   19c80:	andeq	r0, r0, r1
   19c84:	andeq	r0, r0, r0
   19c88:	andeq	r0, r0, r1
   19c8c:	andeq	r0, r0, r0
   19c90:	ldr	r0, [r7, #384]	; 0x180
   19c94:	ldr	r1, [r7, #388]	; 0x184
   19c98:	adds	r0, r0, #1
   19c9c:	adc	r1, r1, #0
   19ca0:	cmp	r2, #109	; 0x6d
   19ca4:	str	r0, [r7, #384]	; 0x180
   19ca8:	str	r1, [r7, #388]	; 0x184
   19cac:	bne	19d04 <next@@Base+0x4e4>
   19cb0:	sub	r0, pc, #56	; 0x38
   19cb4:	vld1.64	{d18-d19}, [lr :128]
   19cb8:	ldr	r1, [r7, #404]	; 0x194
   19cbc:	strb	r3, [ip, sl]
   19cc0:	add	sl, sl, #1
   19cc4:	vld1.64	{d16-d17}, [r0 :128]
   19cc8:	ldr	r0, [r7, #400]	; 0x190
   19ccc:	adds	r0, r0, #1
   19cd0:	vadd.i64	q8, q9, q8
   19cd4:	adc	r1, r1, #0
   19cd8:	str	r0, [r7, #400]	; 0x190
   19cdc:	str	r1, [r7, #404]	; 0x194
   19ce0:	vst1.64	{d16-d17}, [lr :128]
   19ce4:	ldr	r2, [r4, #8]
   19ce8:	ldr	r0, [r4]
   19cec:	add	r1, r2, #1
   19cf0:	add	r5, r0, r2
   19cf4:	mov	r2, #3
   19cf8:	str	r1, [r4, #8]
   19cfc:	add	r1, r7, #416	; 0x1a0
   19d00:	b	19a40 <next@@Base+0x220>
   19d04:	ldr	r0, [r7, #408]	; 0x198
   19d08:	ldr	r1, [r7, #412]	; 0x19c
   19d0c:	adds	r0, r0, #1
   19d10:	adc	r1, r1, #0
   19d14:	cmp	r2, #114	; 0x72
   19d18:	str	r0, [r7, #408]	; 0x198
   19d1c:	str	r1, [r7, #412]	; 0x19c
   19d20:	bne	1a934 <next@@Base+0x1114>
   19d24:	sub	r0, pc, #172	; 0xac
   19d28:	vld1.64	{d18-d19}, [lr :128]
   19d2c:	ldr	r1, [r7, #428]	; 0x1ac
   19d30:	strb	r6, [ip, sl]
   19d34:	add	sl, sl, #1
   19d38:	vld1.64	{d16-d17}, [r0 :128]
   19d3c:	ldr	r0, [r7, #424]	; 0x1a8
   19d40:	adds	r0, r0, #1
   19d44:	vadd.i64	q8, q9, q8
   19d48:	adc	r1, r1, #0
   19d4c:	str	r0, [r7, #424]	; 0x1a8
   19d50:	str	r1, [r7, #428]	; 0x1ac
   19d54:	vst1.64	{d16-d17}, [lr :128]
   19d58:	ldr	r2, [r4, #8]
   19d5c:	ldr	r0, [r4]
   19d60:	add	r1, r2, #1
   19d64:	add	r5, r0, r2
   19d68:	mov	r2, #4
   19d6c:	str	r1, [r4, #8]
   19d70:	add	r1, r7, #440	; 0x1b8
   19d74:	b	19a40 <next@@Base+0x220>
   19d78:	ldrd	r0, [r7, #48]	; 0x30
   19d7c:	adds	r0, r0, #1
   19d80:	adc	r1, r1, #0
   19d84:	strd	r0, [r7, #48]	; 0x30
   19d88:	mov	r0, #4
   19d8c:	bl	126dc <malloc@plt>
   19d90:	mov	r6, r0
   19d94:	bl	18d10 <init_token_eof@@Base>
   19d98:	add	r0, r7, #992	; 0x3e0
   19d9c:	ldrd	r2, [r0]
   19da0:	adds	r2, r2, #1
   19da4:	adc	r3, r3, #0
   19da8:	strd	r2, [r0]
   19dac:	ldr	r0, [r7, #1000]	; 0x3e8
   19db0:	ldr	r1, [r7, #1004]	; 0x3ec
   19db4:	adds	r0, r0, #1
   19db8:	adc	r1, r1, #0
   19dbc:	str	r0, [r7, #1000]	; 0x3e8
   19dc0:	mov	r0, r6
   19dc4:	str	r1, [r7, #1004]	; 0x3ec
   19dc8:	sub	sp, fp, #28
   19dcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19dd0:	ldrd	r2, [r7, #72]	; 0x48
   19dd4:	sub	r1, r5, #48	; 0x30
   19dd8:	uxtb	r1, r1
   19ddc:	adds	r2, r2, #1
   19de0:	adc	r3, r3, #0
   19de4:	cmp	r1, #9
   19de8:	strd	r2, [r7, #72]	; 0x48
   19dec:	bhi	1a340 <next@@Base+0xb20>
   19df0:	ldr	r1, [lr, #4]
   19df4:	ldr	r2, [pc, #4068]	; 1ade0 <next@@Base+0x15c0>
   19df8:	mov	r8, ip
   19dfc:	ldr	r2, [pc, r2]
   19e00:	ldr	r0, [r7, #696]	; 0x2b8
   19e04:	adds	r2, r2, #1
   19e08:	ldr	r3, [r7, #700]	; 0x2bc
   19e0c:	strb	r5, [r8, sl]
   19e10:	add	sl, sl, #1
   19e14:	adc	r1, r1, #0
   19e18:	str	r2, [lr]
   19e1c:	str	r1, [lr, #4]
   19e20:	ldr	r6, [lr, #8]
   19e24:	adds	r0, r0, #1
   19e28:	str	r0, [r7, #696]	; 0x2b8
   19e2c:	adc	r0, r3, #0
   19e30:	ldr	r3, [lr, #12]
   19e34:	str	r0, [r7, #700]	; 0x2bc
   19e38:	adds	r6, r6, #1
   19e3c:	str	r6, [lr, #8]
   19e40:	adc	r0, r3, #0
   19e44:	str	r0, [lr, #12]
   19e48:	ldr	r3, [r4, #8]
   19e4c:	ldr	r0, [r4]
   19e50:	add	r6, r3, #1
   19e54:	str	r6, [r4, #8]
   19e58:	ldrb	r5, [r0, r3]
   19e5c:	ldr	r0, [r7, #712]	; 0x2c8
   19e60:	ldr	r3, [r7, #716]	; 0x2cc
   19e64:	adds	r0, r0, #1
   19e68:	str	r0, [r7, #712]	; 0x2c8
   19e6c:	sub	r0, r5, #48	; 0x30
   19e70:	adc	r3, r3, #0
   19e74:	uxtb	r0, r0
   19e78:	str	r3, [r7, #716]	; 0x2cc
   19e7c:	cmp	r0, #10
   19e80:	bcc	19e00 <next@@Base+0x5e0>
   19e84:	b	1a344 <next@@Base+0xb24>
   19e88:	ldrd	r0, [r7, #88]	; 0x58
   19e8c:	adds	r0, r0, #1
   19e90:	adc	r1, r1, #0
   19e94:	strd	r0, [r7, #88]	; 0x58
   19e98:	uxtb	r0, r5
   19e9c:	cmp	r0, #97	; 0x61
   19ea0:	bne	1acac <next@@Base+0x148c>
   19ea4:	sub	r0, pc, #556	; 0x22c
   19ea8:	vld1.64	{d16-d17}, [lr :128]
   19eac:	ldr	r1, [r7, #796]	; 0x31c
   19eb0:	vld1.64	{d18-d19}, [r0 :128]
   19eb4:	mov	r0, #97	; 0x61
   19eb8:	strb	r0, [ip, sl]
   19ebc:	ldr	r0, [r7, #792]	; 0x318
   19ec0:	vadd.i64	q9, q8, q9
   19ec4:	adds	r0, r0, #1
   19ec8:	adc	r1, r1, #0
   19ecc:	str	r0, [r7, #792]	; 0x318
   19ed0:	str	r1, [r7, #796]	; 0x31c
   19ed4:	vst1.64	{d18-d19}, [lr :128]
   19ed8:	ldr	r1, [r4, #8]
   19edc:	ldr	r0, [r4]
   19ee0:	add	r2, r1, #1
   19ee4:	str	r2, [r4, #8]
   19ee8:	ldrb	r0, [r0, r1]
   19eec:	cmp	r0, #105	; 0x69
   19ef0:	bne	1accc <next@@Base+0x14ac>
   19ef4:	add	r1, sl, ip
   19ef8:	mov	r0, #105	; 0x69
   19efc:	ldr	r2, [r7, #812]	; 0x32c
   19f00:	mov	r5, ip
   19f04:	strb	r0, [r1, #1]
   19f08:	vmov.32	r0, d16[0]
   19f0c:	adds	r0, r0, #2
   19f10:	str	r0, [lr]
   19f14:	vmov.32	r0, d16[1]
   19f18:	adc	r0, r0, #0
   19f1c:	str	r0, [lr, #4]
   19f20:	ldr	r0, [r7, #808]	; 0x328
   19f24:	adds	r0, r0, #1
   19f28:	str	r0, [r7, #808]	; 0x328
   19f2c:	adc	r0, r2, #0
   19f30:	ldrd	r2, [lr, #8]
   19f34:	str	r0, [r7, #812]	; 0x32c
   19f38:	adds	r2, r2, #1
   19f3c:	adc	r0, r3, #0
   19f40:	str	r2, [lr, #8]
   19f44:	str	r0, [lr, #12]
   19f48:	ldr	r2, [r4, #8]
   19f4c:	ldr	r0, [r4]
   19f50:	add	r3, r2, #1
   19f54:	str	r3, [r4, #8]
   19f58:	ldrb	r0, [r0, r2]
   19f5c:	cmp	r0, #110	; 0x6e
   19f60:	bne	1acec <next@@Base+0x14cc>
   19f64:	mov	r0, #110	; 0x6e
   19f68:	strh	r0, [r1, #2]
   19f6c:	ldr	r0, [r7, #824]	; 0x338
   19f70:	ldr	r1, [r7, #828]	; 0x33c
   19f74:	adds	r0, r0, #1
   19f78:	adc	r1, r1, #0
   19f7c:	str	r0, [r7, #824]	; 0x338
   19f80:	add	r0, sl, #4
   19f84:	str	r1, [r7, #828]	; 0x33c
   19f88:	bl	126dc <malloc@plt>
   19f8c:	add	r6, sl, #3
   19f90:	mov	r1, r5
   19f94:	mov	r4, r0
   19f98:	mov	r2, r6
   19f9c:	bl	12778 <strncpy@plt>
   19fa0:	mov	r0, #0
   19fa4:	strb	r0, [r4, r6]
   19fa8:	mov	r0, #8
   19fac:	bl	126dc <malloc@plt>
   19fb0:	mov	r1, r4
   19fb4:	mov	r6, r0
   19fb8:	bl	18ae0 <init_token_function@@Base>
   19fbc:	add	r0, r7, #832	; 0x340
   19fc0:	b	19d9c <next@@Base+0x57c>
   19fc4:	ldrd	r0, [r7, #96]	; 0x60
   19fc8:	adds	r0, r0, #1
   19fcc:	adc	r1, r1, #0
   19fd0:	strd	r0, [r7, #96]	; 0x60
   19fd4:	uxtb	r0, r5
   19fd8:	cmp	r0, #101	; 0x65
   19fdc:	bne	1ad0c <next@@Base+0x14ec>
   19fe0:	sub	r0, pc, #872	; 0x368
   19fe4:	vld1.64	{d16-d17}, [lr :128]
   19fe8:	ldr	r1, [r7, #852]	; 0x354
   19fec:	vld1.64	{d18-d19}, [r0 :128]
   19ff0:	mov	r0, #101	; 0x65
   19ff4:	strb	r0, [ip, sl]
   19ff8:	ldr	r0, [r7, #848]	; 0x350
   19ffc:	vadd.i64	q9, q8, q9
   1a000:	adds	r0, r0, #1
   1a004:	adc	r1, r1, #0
   1a008:	str	r0, [r7, #848]	; 0x350
   1a00c:	str	r1, [r7, #852]	; 0x354
   1a010:	vst1.64	{d18-d19}, [lr :128]
   1a014:	ldr	r1, [r4, #8]
   1a018:	ldr	r0, [r4]
   1a01c:	add	r2, r1, #1
   1a020:	str	r2, [r4, #8]
   1a024:	ldrb	r0, [r0, r1]
   1a028:	cmp	r0, #116	; 0x74
   1a02c:	bne	1ad2c <next@@Base+0x150c>
   1a030:	vmov.32	r3, d16[0]
   1a034:	vmov.32	r2, d16[1]
   1a038:	add	r1, sl, ip
   1a03c:	mov	r0, #116	; 0x74
   1a040:	ldr	r6, [r7, #868]	; 0x364
   1a044:	strb	r0, [r1, #1]
   1a048:	adds	r0, r3, #2
   1a04c:	str	r0, [lr]
   1a050:	adc	r0, r2, #0
   1a054:	str	r0, [lr, #4]
   1a058:	ldr	r0, [r7, #864]	; 0x360
   1a05c:	ldr	r5, [lr, #12]
   1a060:	adds	r0, r0, #1
   1a064:	str	r0, [r7, #864]	; 0x360
   1a068:	adc	r0, r6, #0
   1a06c:	ldr	r6, [lr, #8]
   1a070:	str	r0, [r7, #868]	; 0x364
   1a074:	adds	r6, r6, #1
   1a078:	adc	r0, r5, #0
   1a07c:	str	r6, [lr, #8]
   1a080:	str	r0, [lr, #12]
   1a084:	ldr	r6, [r4, #8]
   1a088:	ldr	r0, [r4]
   1a08c:	add	r5, r6, #1
   1a090:	str	r5, [r4, #8]
   1a094:	ldrb	r0, [r0, r6]
   1a098:	cmp	r0, #117	; 0x75
   1a09c:	bne	1ad4c <next@@Base+0x152c>
   1a0a0:	adds	r0, r3, #3
   1a0a4:	ldr	r6, [r7, #884]	; 0x374
   1a0a8:	str	r0, [lr]
   1a0ac:	mov	r0, #117	; 0x75
   1a0b0:	strb	r0, [r1, #2]
   1a0b4:	adc	r0, r2, #0
   1a0b8:	str	r0, [lr, #4]
   1a0bc:	ldr	r0, [r7, #880]	; 0x370
   1a0c0:	ldr	r5, [lr, #12]
   1a0c4:	adds	r0, r0, #1
   1a0c8:	str	r0, [r7, #880]	; 0x370
   1a0cc:	adc	r0, r6, #0
   1a0d0:	ldr	r6, [lr, #8]
   1a0d4:	str	r0, [r7, #884]	; 0x374
   1a0d8:	adds	r6, r6, #1
   1a0dc:	adc	r0, r5, #0
   1a0e0:	str	r6, [lr, #8]
   1a0e4:	str	r0, [lr, #12]
   1a0e8:	ldr	r6, [r4, #8]
   1a0ec:	ldr	r0, [r4]
   1a0f0:	add	r5, r6, #1
   1a0f4:	str	r5, [r4, #8]
   1a0f8:	ldrb	r0, [r0, r6]
   1a0fc:	cmp	r0, #114	; 0x72
   1a100:	bne	1ad6c <next@@Base+0x154c>
   1a104:	adds	r0, r3, #4
   1a108:	str	r0, [lr]
   1a10c:	mov	r0, #114	; 0x72
   1a110:	strb	r0, [r1, #3]
   1a114:	adc	r0, r2, #0
   1a118:	ldr	r1, [r7, #900]	; 0x384
   1a11c:	str	r0, [lr, #4]
   1a120:	ldr	r0, [r7, #896]	; 0x380
   1a124:	ldrd	r2, [lr, #8]
   1a128:	adds	r0, r0, #1
   1a12c:	str	r0, [r7, #896]	; 0x380
   1a130:	adc	r0, r1, #0
   1a134:	adds	r1, r2, #1
   1a138:	str	r0, [r7, #900]	; 0x384
   1a13c:	adc	r0, r3, #0
   1a140:	str	r1, [lr, #8]
   1a144:	str	r0, [lr, #12]
   1a148:	ldr	r1, [r4, #8]
   1a14c:	ldr	r0, [r4]
   1a150:	add	r2, r1, #1
   1a154:	str	r2, [r4, #8]
   1a158:	ldrb	r0, [r0, r1]
   1a15c:	cmp	r0, #110	; 0x6e
   1a160:	bne	1ada0 <next@@Base+0x1580>
   1a164:	ldr	r0, [r7, #912]	; 0x390
   1a168:	ldr	r1, [r7, #916]	; 0x394
   1a16c:	adds	r0, r0, #1
   1a170:	adc	r1, r1, #0
   1a174:	str	r0, [r7, #912]	; 0x390
   1a178:	mov	r0, #4
   1a17c:	str	r1, [r7, #916]	; 0x394
   1a180:	bl	126dc <malloc@plt>
   1a184:	mov	r6, r0
   1a188:	bl	18c70 <init_token_return@@Base>
   1a18c:	add	r0, r7, #920	; 0x398
   1a190:	b	19d9c <next@@Base+0x57c>
   1a194:	ldrd	r0, [r7, #80]	; 0x50
   1a198:	adds	r0, r0, #1
   1a19c:	adc	r1, r1, #0
   1a1a0:	strd	r0, [r7, #80]	; 0x50
   1a1a4:	uxtb	r1, r5
   1a1a8:	cmp	r1, #102	; 0x66
   1a1ac:	beq	1a42c <next@@Base+0xc0c>
   1a1b0:	cmp	r1, #110	; 0x6e
   1a1b4:	bne	1adc0 <next@@Base+0x15a0>
   1a1b8:	add	r0, pc, #1008	; 0x3f0
   1a1bc:	vld1.64	{d18-d19}, [lr :128]
   1a1c0:	ldr	r1, [r7, #740]	; 0x2e4
   1a1c4:	vld1.64	{d16-d17}, [r0 :128]
   1a1c8:	mov	r0, #110	; 0x6e
   1a1cc:	strb	r0, [ip, sl]
   1a1d0:	ldr	r0, [r7, #736]	; 0x2e0
   1a1d4:	vadd.i64	q8, q9, q8
   1a1d8:	adds	r0, r0, #1
   1a1dc:	adc	r1, r1, #0
   1a1e0:	str	r0, [r7, #736]	; 0x2e0
   1a1e4:	str	r1, [r7, #740]	; 0x2e4
   1a1e8:	vst1.64	{d16-d17}, [lr :128]
   1a1ec:	ldr	r1, [r4, #8]
   1a1f0:	ldr	r0, [r4]
   1a1f4:	add	r2, r1, #1
   1a1f8:	str	r2, [r4, #8]
   1a1fc:	ldrb	r0, [r0, r1]
   1a200:	cmp	r0, #116	; 0x74
   1a204:	bne	1ae44 <next@@Base+0x1624>
   1a208:	ldr	r0, [r7, #760]	; 0x2f8
   1a20c:	ldr	r1, [r7, #764]	; 0x2fc
   1a210:	adds	r0, r0, #1
   1a214:	adc	r1, r1, #0
   1a218:	str	r0, [r7, #760]	; 0x2f8
   1a21c:	mov	r0, #4
   1a220:	str	r1, [r7, #764]	; 0x2fc
   1a224:	bl	126dc <malloc@plt>
   1a228:	mov	r6, r0
   1a22c:	bl	18a40 <init_token_int_type@@Base>
   1a230:	add	r0, r7, #768	; 0x300
   1a234:	b	19d9c <next@@Base+0x57c>
   1a238:	ldrd	r0, [r7, #104]	; 0x68
   1a23c:	adds	r0, r0, #1
   1a240:	adc	r1, r1, #0
   1a244:	strd	r0, [r7, #104]	; 0x68
   1a248:	uxtb	r0, r5
   1a24c:	cmp	r0, #108	; 0x6c
   1a250:	bne	1ade4 <next@@Base+0x15c4>
   1a254:	add	r0, pc, #852	; 0x354
   1a258:	vld1.64	{d16-d17}, [lr :128]
   1a25c:	ldr	r1, [r7, #940]	; 0x3ac
   1a260:	vld1.64	{d18-d19}, [r0 :128]
   1a264:	mov	r0, #108	; 0x6c
   1a268:	strb	r0, [ip, sl]
   1a26c:	ldr	r0, [r7, #936]	; 0x3a8
   1a270:	vadd.i64	q9, q8, q9
   1a274:	adds	r0, r0, #1
   1a278:	adc	r1, r1, #0
   1a27c:	str	r0, [r7, #936]	; 0x3a8
   1a280:	str	r1, [r7, #940]	; 0x3ac
   1a284:	vst1.64	{d18-d19}, [lr :128]
   1a288:	ldr	r1, [r4, #8]
   1a28c:	ldr	r0, [r4]
   1a290:	add	r2, r1, #1
   1a294:	str	r2, [r4, #8]
   1a298:	ldrb	r0, [r0, r1]
   1a29c:	cmp	r0, #115	; 0x73
   1a2a0:	bne	1ae04 <next@@Base+0x15e4>
   1a2a4:	add	r0, sl, ip
   1a2a8:	mov	r1, #115	; 0x73
   1a2ac:	strb	r1, [r0, #1]
   1a2b0:	vmov.32	r0, d16[0]
   1a2b4:	ldr	r1, [r7, #956]	; 0x3bc
   1a2b8:	adds	r0, r0, #2
   1a2bc:	str	r0, [lr]
   1a2c0:	vmov.32	r0, d16[1]
   1a2c4:	adc	r0, r0, #0
   1a2c8:	str	r0, [lr, #4]
   1a2cc:	ldr	r0, [r7, #952]	; 0x3b8
   1a2d0:	ldrd	r2, [lr, #8]
   1a2d4:	adds	r0, r0, #1
   1a2d8:	str	r0, [r7, #952]	; 0x3b8
   1a2dc:	adc	r0, r1, #0
   1a2e0:	adds	r1, r2, #1
   1a2e4:	str	r0, [r7, #956]	; 0x3bc
   1a2e8:	adc	r0, r3, #0
   1a2ec:	str	r1, [lr, #8]
   1a2f0:	str	r0, [lr, #12]
   1a2f4:	ldr	r1, [r4, #8]
   1a2f8:	ldr	r0, [r4]
   1a2fc:	add	r2, r1, #1
   1a300:	str	r2, [r4, #8]
   1a304:	ldrb	r0, [r0, r1]
   1a308:	cmp	r0, #101	; 0x65
   1a30c:	bne	1ae24 <next@@Base+0x1604>
   1a310:	ldr	r0, [r7, #968]	; 0x3c8
   1a314:	ldr	r1, [r7, #972]	; 0x3cc
   1a318:	adds	r0, r0, #1
   1a31c:	adc	r1, r1, #0
   1a320:	str	r0, [r7, #968]	; 0x3c8
   1a324:	mov	r0, #4
   1a328:	str	r1, [r7, #972]	; 0x3cc
   1a32c:	bl	126dc <malloc@plt>
   1a330:	mov	r6, r0
   1a334:	bl	18db0 <init_token_else@@Base>
   1a338:	add	r0, r7, #976	; 0x3d0
   1a33c:	b	19d9c <next@@Base+0x57c>
   1a340:	mov	r8, ip
   1a344:	ldr	r1, [pc, #3076]	; 1af50 <next@@Base+0x1730>
   1a348:	add	r0, pc, #608	; 0x260
   1a34c:	vld1.64	{d16-d17}, [r0 :128]
   1a350:	add	r1, pc, r1
   1a354:	vld1.64	{d18-d19}, [r1 :128]
   1a358:	ldr	r0, [pc, #3060]	; 1af54 <next@@Base+0x1734>
   1a35c:	ldr	r2, [pc, #3060]	; 1af58 <next@@Base+0x1738>
   1a360:	ldr	r2, [pc, r2]
   1a364:	add	r0, pc, r0
   1a368:	ldr	r3, [r7, #704]	; 0x2c0
   1a36c:	ldr	r6, [r7, #708]	; 0x2c4
   1a370:	vadd.i64	q8, q9, q8
   1a374:	adds	r2, r2, #1
   1a378:	vst1.64	{d16-d17}, [r1 :128]
   1a37c:	str	r2, [r0]
   1a380:	ldr	r2, [r0, #4]
   1a384:	adc	r2, r2, #0
   1a388:	adds	r3, r3, #1
   1a38c:	adc	r1, r6, #0
   1a390:	str	r2, [r0, #4]
   1a394:	str	r3, [r7, #704]	; 0x2c0
   1a398:	str	r1, [r7, #708]	; 0x2c4
   1a39c:	ldr	r1, [r4, #8]
   1a3a0:	cmp	r1, #0
   1a3a4:	beq	1ac74 <next@@Base+0x1454>
   1a3a8:	ldrd	r2, [r0, #8]
   1a3ac:	ldr	r6, [r0, #24]
   1a3b0:	ldr	r5, [r0, #28]
   1a3b4:	adds	r2, r2, #1
   1a3b8:	adc	r3, r3, #0
   1a3bc:	adds	r6, r6, #1
   1a3c0:	str	r6, [r0, #24]
   1a3c4:	strd	r2, [r0, #8]
   1a3c8:	adc	r2, r5, #0
   1a3cc:	str	r2, [r0, #28]
   1a3d0:	sub	r0, r1, #1
   1a3d4:	str	r0, [r4, #8]
   1a3d8:	mov	r0, #0
   1a3dc:	strb	r0, [r8, sl]
   1a3e0:	mov	r0, #8
   1a3e4:	bl	126dc <malloc@plt>
   1a3e8:	mov	r6, r0
   1a3ec:	ldr	r0, [pc, #2920]	; 1af5c <next@@Base+0x173c>
   1a3f0:	add	r1, pc, #440	; 0x1b8
   1a3f4:	mov	r2, #10
   1a3f8:	vld1.64	{d16-d17}, [r1 :128]
   1a3fc:	mov	r1, #0
   1a400:	add	r0, pc, r0
   1a404:	vld1.64	{d18-d19}, [r0 :128]
   1a408:	vadd.i64	q8, q9, q8
   1a40c:	vst1.64	{d16-d17}, [r0 :128]
   1a410:	mov	r0, r8
   1a414:	bl	1261c <strtol@plt>
   1a418:	mov	r1, r0
   1a41c:	mov	r0, r6
   1a420:	bl	18a90 <init_token_int_value@@Base>
   1a424:	add	r0, r7, #720	; 0x2d0
   1a428:	b	19d9c <next@@Base+0x57c>
   1a42c:	add	r0, ip, sl
   1a430:	mov	r1, #102	; 0x66
   1a434:	strh	r1, [r0]
   1a438:	ldr	r0, [r7, #744]	; 0x2e8
   1a43c:	ldr	r1, [r7, #748]	; 0x2ec
   1a440:	adds	r0, r0, #1
   1a444:	adc	r1, r1, #0
   1a448:	str	r0, [r7, #744]	; 0x2e8
   1a44c:	mov	r0, #4
   1a450:	str	r1, [r7, #748]	; 0x2ec
   1a454:	bl	126dc <malloc@plt>
   1a458:	mov	r6, r0
   1a45c:	bl	18d60 <init_token_if@@Base>
   1a460:	add	r0, r7, #776	; 0x308
   1a464:	b	19d9c <next@@Base+0x57c>
   1a468:	ldrd	r0, [r7, #168]	; 0xa8
   1a46c:	adds	r0, r0, #1
   1a470:	adc	r1, r1, #0
   1a474:	strd	r0, [r7, #168]	; 0xa8
   1a478:	mov	r0, #8
   1a47c:	bl	126dc <malloc@plt>
   1a480:	mov	r1, #0
   1a484:	mov	r6, r0
   1a488:	bl	18a90 <init_token_int_value@@Base>
   1a48c:	add	r0, r7, #184	; 0xb8
   1a490:	b	19d9c <next@@Base+0x57c>
   1a494:	ldrd	r8, [r7, #200]	; 0xc8
   1a498:	adds	r8, r8, #1
   1a49c:	adc	r9, r9, #0
   1a4a0:	cmp	r2, #40	; 0x28
   1a4a4:	strd	r8, [r7, #200]	; 0xc8
   1a4a8:	bne	1a4d4 <next@@Base+0xcb4>
   1a4ac:	ldrd	r0, [r7, #232]	; 0xe8
   1a4b0:	adds	r0, r0, #1
   1a4b4:	adc	r1, r1, #0
   1a4b8:	strd	r0, [r7, #232]	; 0xe8
   1a4bc:	mov	r0, #4
   1a4c0:	bl	126dc <malloc@plt>
   1a4c4:	mov	r6, r0
   1a4c8:	bl	18b30 <init_token_opar@@Base>
   1a4cc:	add	r0, r7, #248	; 0xf8
   1a4d0:	b	19d9c <next@@Base+0x57c>
   1a4d4:	ldrd	r8, [r7, #240]	; 0xf0
   1a4d8:	adds	r8, r8, #1
   1a4dc:	adc	r9, r9, #0
   1a4e0:	cmp	r2, #41	; 0x29
   1a4e4:	strd	r8, [r7, #240]	; 0xf0
   1a4e8:	bne	1a5c0 <next@@Base+0xda0>
   1a4ec:	ldr	r0, [r7, #256]	; 0x100
   1a4f0:	ldr	r1, [r7, #260]	; 0x104
   1a4f4:	adds	r0, r0, #1
   1a4f8:	adc	r1, r1, #0
   1a4fc:	str	r0, [r7, #256]	; 0x100
   1a500:	mov	r0, #4
   1a504:	str	r1, [r7, #260]	; 0x104
   1a508:	bl	126dc <malloc@plt>
   1a50c:	mov	r6, r0
   1a510:	bl	18b80 <init_token_cpar@@Base>
   1a514:	add	r0, r7, #272	; 0x110
   1a518:	b	19d9c <next@@Base+0x57c>
   1a51c:	ldr	r0, [r7, #280]	; 0x118
   1a520:	ldr	r1, [r7, #284]	; 0x11c
   1a524:	adds	r0, r0, #1
   1a528:	adc	r1, r1, #0
   1a52c:	str	r0, [r7, #280]	; 0x118
   1a530:	mov	r0, #4
   1a534:	str	r1, [r7, #284]	; 0x11c
   1a538:	bl	126dc <malloc@plt>
   1a53c:	mov	r6, r0
   1a540:	bl	18bd0 <init_token_obra@@Base>
   1a544:	add	r0, r7, #296	; 0x128
   1a548:	b	19d9c <next@@Base+0x57c>
   1a54c:	ldr	r0, [r7, #304]	; 0x130
   1a550:	ldr	r1, [r7, #308]	; 0x134
   1a554:	adds	r0, r0, #1
   1a558:	adc	r1, r1, #0
   1a55c:	str	r0, [r7, #304]	; 0x130
   1a560:	mov	r0, #4
   1a564:	str	r1, [r7, #308]	; 0x134
   1a568:	bl	126dc <malloc@plt>
   1a56c:	mov	r6, r0
   1a570:	bl	18c20 <init_token_cbra@@Base>
   1a574:	add	r0, r7, #320	; 0x140
   1a578:	b	19d9c <next@@Base+0x57c>
   1a57c:	ldr	r0, [r7, #328]	; 0x148
   1a580:	ldr	r1, [r7, #332]	; 0x14c
   1a584:	adds	r0, r0, #1
   1a588:	adc	r1, r1, #0
   1a58c:	str	r0, [r7, #328]	; 0x148
   1a590:	mov	r0, #4
   1a594:	str	r1, [r7, #332]	; 0x14c
   1a598:	bl	126dc <malloc@plt>
   1a59c:	mov	r6, r0
   1a5a0:	bl	18cc0 <init_token_semicolon@@Base>
   1a5a4:	add	r0, r7, #344	; 0x158
   1a5a8:	b	19d9c <next@@Base+0x57c>
   1a5ac:	nop	{0}
   1a5b0:	andeq	r0, r0, r1
   1a5b4:	andeq	r0, r0, r0
   1a5b8:	andeq	r0, r0, r1
   1a5bc:	andeq	r0, r0, r0
   1a5c0:	ldr	r0, [r7, #408]	; 0x198
   1a5c4:	ldr	r1, [r7, #412]	; 0x19c
   1a5c8:	ldr	r3, [r7, #384]	; 0x180
   1a5cc:	ldr	r6, [r7, #388]	; 0x184
   1a5d0:	adds	r0, r0, #1
   1a5d4:	adc	r1, r1, #0
   1a5d8:	adds	r5, r3, #1
   1a5dc:	adc	r8, r6, #0
   1a5e0:	ldr	r6, [r7, #360]	; 0x168
   1a5e4:	str	r1, [sp, #4]
   1a5e8:	adds	r6, r6, #1
   1a5ec:	str	r6, [r7, #360]	; 0x168
   1a5f0:	str	r5, [r7, #384]	; 0x180
   1a5f4:	str	r0, [r7, #408]	; 0x198
   1a5f8:	ldr	r0, [r7, #364]	; 0x16c
   1a5fc:	ldr	r6, [r7, #264]	; 0x108
   1a600:	ldr	r5, [r7, #268]	; 0x10c
   1a604:	ldr	r1, [r7, #288]	; 0x120
   1a608:	ldr	r3, [r7, #292]	; 0x124
   1a60c:	adc	r9, r0, #0
   1a610:	ldr	r0, [r7, #336]	; 0x150
   1a614:	adds	r6, r6, #1
   1a618:	adc	r5, r5, #0
   1a61c:	adds	r0, r0, #1
   1a620:	str	r0, [r7, #336]	; 0x150
   1a624:	str	r6, [r7, #264]	; 0x108
   1a628:	str	r5, [r7, #268]	; 0x10c
   1a62c:	ldr	r0, [r7, #340]	; 0x154
   1a630:	ldr	r5, [r7, #312]	; 0x138
   1a634:	adc	r0, r0, #0
   1a638:	adds	r5, r5, #1
   1a63c:	str	r5, [r7, #312]	; 0x138
   1a640:	ldr	r5, [r7, #316]	; 0x13c
   1a644:	ldr	r6, [r7, #432]	; 0x1b0
   1a648:	adc	r5, r5, #0
   1a64c:	adds	r1, r1, #1
   1a650:	adc	r3, r3, #0
   1a654:	adds	r6, r6, #1
   1a658:	str	r6, [r7, #432]	; 0x1b0
   1a65c:	str	r1, [r7, #288]	; 0x120
   1a660:	str	r3, [r7, #292]	; 0x124
   1a664:	str	r5, [r7, #316]	; 0x13c
   1a668:	str	r0, [r7, #340]	; 0x154
   1a66c:	ldr	r0, [sp, #4]
   1a670:	str	r9, [r7, #364]	; 0x16c
   1a674:	str	r8, [r7, #388]	; 0x184
   1a678:	str	r0, [r7, #412]	; 0x19c
   1a67c:	ldr	r0, [r7, #436]	; 0x1b4
   1a680:	adc	r0, r0, #0
   1a684:	cmp	r2, #33	; 0x21
   1a688:	str	r0, [r7, #436]	; 0x1b4
   1a68c:	bne	1a734 <next@@Base+0xf14>
   1a690:	sub	r0, pc, #232	; 0xe8
   1a694:	vld1.64	{d18-d19}, [lr :128]
   1a698:	ldr	r1, [r7, #452]	; 0x1c4
   1a69c:	vld1.64	{d16-d17}, [r0 :128]
   1a6a0:	mov	r0, #33	; 0x21
   1a6a4:	strb	r0, [ip, sl]
   1a6a8:	ldr	r0, [r7, #448]	; 0x1c0
   1a6ac:	vadd.i64	q8, q9, q8
   1a6b0:	adds	r0, r0, #1
   1a6b4:	adc	r1, r1, #0
   1a6b8:	str	r0, [r7, #448]	; 0x1c0
   1a6bc:	str	r1, [r7, #452]	; 0x1c4
   1a6c0:	vst1.64	{d16-d17}, [lr :128]
   1a6c4:	ldr	r1, [r4, #8]
   1a6c8:	ldr	r0, [r4]
   1a6cc:	add	r2, r1, #1
   1a6d0:	str	r2, [r4, #8]
   1a6d4:	ldrb	r5, [r0, r1]
   1a6d8:	mov	r0, #8
   1a6dc:	bl	126dc <malloc@plt>
   1a6e0:	mov	r6, r0
   1a6e4:	cmp	r5, #61	; 0x3d
   1a6e8:	bne	1a860 <next@@Base+0x1040>
   1a6ec:	ldr	r0, [r7, #472]	; 0x1d8
   1a6f0:	ldr	r1, [r7, #476]	; 0x1dc
   1a6f4:	adds	r0, r0, #1
   1a6f8:	adc	r1, r1, #0
   1a6fc:	str	r0, [r7, #472]	; 0x1d8
   1a700:	mov	r0, #3
   1a704:	str	r1, [r7, #476]	; 0x1dc
   1a708:	bl	126dc <malloc@plt>
   1a70c:	mov	r1, r0
   1a710:	ldrb	r0, [sp, #8]
   1a714:	mov	r2, #61	; 0x3d
   1a718:	strb	r2, [r1, #1]
   1a71c:	add	r2, r1, #2
   1a720:	strb	r0, [r1]
   1a724:	add	r0, r7, #488	; 0x1e8
   1a728:	b	1a90c <next@@Base+0x10ec>
   1a72c:	muleq	r1, ip, fp
   1a730:	andeq	r7, r1, r0, lsr #23
   1a734:	ldr	r0, [r7, #584]	; 0x248
   1a738:	ldr	r1, [r7, #588]	; 0x24c
   1a73c:	ldr	r3, [r7, #528]	; 0x210
   1a740:	ldr	r6, [r7, #532]	; 0x214
   1a744:	ldr	r5, [r7, #456]	; 0x1c8
   1a748:	adds	r0, r0, #1
   1a74c:	adc	r8, r1, #0
   1a750:	ldr	r1, [r7, #512]	; 0x200
   1a754:	adds	r9, r3, #1
   1a758:	ldr	r3, [r7, #516]	; 0x204
   1a75c:	str	r0, [sp, #4]
   1a760:	ldr	r0, [r7, #460]	; 0x1cc
   1a764:	adc	r6, r6, #0
   1a768:	adds	r1, r1, #1
   1a76c:	str	r1, [r7, #512]	; 0x200
   1a770:	adc	r1, r3, #0
   1a774:	adds	r3, r5, #1
   1a778:	ldr	r5, [r7, #624]	; 0x270
   1a77c:	adc	r0, r0, #0
   1a780:	adds	r5, r5, #1
   1a784:	str	r5, [r7, #624]	; 0x270
   1a788:	str	r0, [r7, #460]	; 0x1cc
   1a78c:	ldr	r0, [sp, #4]
   1a790:	str	r3, [r7, #456]	; 0x1c8
   1a794:	str	r1, [r7, #516]	; 0x204
   1a798:	str	r9, [r7, #528]	; 0x210
   1a79c:	str	r6, [r7, #532]	; 0x214
   1a7a0:	str	r8, [r7, #588]	; 0x24c
   1a7a4:	str	r0, [r7, #584]	; 0x248
   1a7a8:	ldr	r0, [r7, #628]	; 0x274
   1a7ac:	adc	r0, r0, #0
   1a7b0:	cmp	r2, #38	; 0x26
   1a7b4:	str	r0, [r7, #628]	; 0x274
   1a7b8:	bne	1aebc <next@@Base+0x169c>
   1a7bc:	sub	r0, pc, #532	; 0x214
   1a7c0:	vld1.64	{d18-d19}, [lr :128]
   1a7c4:	ldr	r1, [r7, #660]	; 0x294
   1a7c8:	mov	r5, #38	; 0x26
   1a7cc:	vld1.64	{d16-d17}, [r0 :128]
   1a7d0:	ldr	r0, [r7, #656]	; 0x290
   1a7d4:	strb	r5, [ip, sl]
   1a7d8:	adds	r0, r0, #1
   1a7dc:	vadd.i64	q8, q9, q8
   1a7e0:	adc	r1, r1, #0
   1a7e4:	str	r0, [r7, #656]	; 0x290
   1a7e8:	str	r1, [r7, #660]	; 0x294
   1a7ec:	vst1.64	{d16-d17}, [lr :128]
   1a7f0:	ldr	r1, [r4, #8]
   1a7f4:	ldr	r0, [r4]
   1a7f8:	add	r2, r1, #1
   1a7fc:	str	r2, [r4, #8]
   1a800:	ldrb	r4, [r0, r1]
   1a804:	mov	r0, #8
   1a808:	bl	126dc <malloc@plt>
   1a80c:	cmp	r4, #38	; 0x26
   1a810:	bne	1ae64 <next@@Base+0x1644>
   1a814:	mov	r6, r0
   1a818:	ldr	r0, [r7, #680]	; 0x2a8
   1a81c:	ldr	r1, [r7, #684]	; 0x2ac
   1a820:	adds	r0, r0, #1
   1a824:	adc	r1, r1, #0
   1a828:	str	r0, [r7, #680]	; 0x2a8
   1a82c:	mov	r0, #3
   1a830:	str	r1, [r7, #684]	; 0x2ac
   1a834:	bl	126dc <malloc@plt>
   1a838:	mov	r1, r0
   1a83c:	ldrb	r0, [sp, #8]
   1a840:	strh	r5, [r1, #1]
   1a844:	strb	r0, [r1]
   1a848:	mov	r0, r6
   1a84c:	bl	18e00 <init_token_boolean_op@@Base>
   1a850:	add	r0, r7, #688	; 0x2b0
   1a854:	b	19d9c <next@@Base+0x57c>
   1a858:	andeq	r7, r1, r8, ror #21
   1a85c:	ldrdeq	r7, [r1], -ip
   1a860:	ldr	r1, [pc, #1736]	; 1af30 <next@@Base+0x1710>
   1a864:	sub	r0, pc, #700	; 0x2bc
   1a868:	vld1.64	{d16-d17}, [r0 :128]
   1a86c:	add	r1, pc, r1
   1a870:	vld1.64	{d18-d19}, [r1 :128]
   1a874:	ldr	r0, [pc, #1720]	; 1af34 <next@@Base+0x1714>
   1a878:	ldr	r2, [pc, #1720]	; 1af38 <next@@Base+0x1718>
   1a87c:	ldr	r2, [pc, r2]
   1a880:	add	r0, pc, r0
   1a884:	ldr	r3, [r7, #464]	; 0x1d0
   1a888:	ldr	r5, [r7, #468]	; 0x1d4
   1a88c:	vadd.i64	q8, q9, q8
   1a890:	adds	r2, r2, #1
   1a894:	vst1.64	{d16-d17}, [r1 :128]
   1a898:	str	r2, [r0]
   1a89c:	ldr	r2, [r0, #4]
   1a8a0:	adc	r2, r2, #0
   1a8a4:	adds	r3, r3, #1
   1a8a8:	adc	r1, r5, #0
   1a8ac:	str	r2, [r0, #4]
   1a8b0:	str	r3, [r7, #464]	; 0x1d0
   1a8b4:	str	r1, [r7, #468]	; 0x1d4
   1a8b8:	ldr	r1, [r4, #8]
   1a8bc:	cmp	r1, #0
   1a8c0:	beq	1ac74 <next@@Base+0x1454>
   1a8c4:	ldrd	r2, [r0, #8]
   1a8c8:	ldrd	r8, [r0, #24]
   1a8cc:	adds	r2, r2, #1
   1a8d0:	adc	r3, r3, #0
   1a8d4:	adds	r5, r8, #1
   1a8d8:	str	r5, [r0, #24]
   1a8dc:	strd	r2, [r0, #8]
   1a8e0:	adc	r2, r9, #0
   1a8e4:	str	r2, [r0, #28]
   1a8e8:	sub	r0, r1, #1
   1a8ec:	str	r0, [r4, #8]
   1a8f0:	mov	r0, #2
   1a8f4:	bl	126dc <malloc@plt>
   1a8f8:	mov	r1, r0
   1a8fc:	ldrb	r0, [sp, #8]
   1a900:	mov	r2, r1
   1a904:	strb	r0, [r2], #1
   1a908:	add	r0, r7, #480	; 0x1e0
   1a90c:	mov	r3, #0
   1a910:	strb	r3, [r2]
   1a914:	ldrd	r2, [r0]
   1a918:	adds	r2, r2, #1
   1a91c:	adc	r3, r3, #0
   1a920:	strd	r2, [r0]
   1a924:	mov	r0, r6
   1a928:	bl	18e00 <init_token_boolean_op@@Base>
   1a92c:	add	r0, r7, #496	; 0x1f0
   1a930:	b	19d9c <next@@Base+0x57c>
   1a934:	ldr	r0, [r7, #432]	; 0x1b0
   1a938:	ldr	r1, [r7, #436]	; 0x1b4
   1a93c:	ldr	r3, [r7, #456]	; 0x1c8
   1a940:	ldr	r6, [r7, #460]	; 0x1cc
   1a944:	adds	r0, r0, #1
   1a948:	adc	r1, r1, #0
   1a94c:	adds	r3, r3, #1
   1a950:	str	r0, [r7, #432]	; 0x1b0
   1a954:	adc	r0, r6, #0
   1a958:	cmp	r2, #60	; 0x3c
   1a95c:	str	r1, [r7, #436]	; 0x1b4
   1a960:	str	r3, [r7, #456]	; 0x1c8
   1a964:	str	r0, [r7, #460]	; 0x1cc
   1a968:	bne	1a974 <next@@Base+0x1154>
   1a96c:	add	r1, r7, #504	; 0x1f8
   1a970:	b	1a998 <next@@Base+0x1178>
   1a974:	ldr	r0, [r7, #512]	; 0x200
   1a978:	ldr	r1, [r7, #516]	; 0x204
   1a97c:	adds	r0, r0, #1
   1a980:	adc	r1, r1, #0
   1a984:	cmp	r2, #62	; 0x3e
   1a988:	str	r0, [r7, #512]	; 0x200
   1a98c:	str	r1, [r7, #516]	; 0x204
   1a990:	bne	1aafc <next@@Base+0x12dc>
   1a994:	add	r1, r7, #520	; 0x208
   1a998:	ldm	r1, {r0, r3}
   1a99c:	adds	r0, r0, #1
   1a9a0:	adc	r3, r3, #0
   1a9a4:	stm	r1, {r0, r3}
   1a9a8:	add	r0, pc, #992	; 0x3e0
   1a9ac:	vld1.64	{d18-d19}, [lr :128]
   1a9b0:	strb	r5, [ip, sl]
   1a9b4:	vld1.64	{d16-d17}, [r0 :128]
   1a9b8:	vadd.i64	q8, q9, q8
   1a9bc:	vst1.64	{d16-d17}, [lr :128]
   1a9c0:	ldr	r1, [r4, #8]
   1a9c4:	ldr	r0, [r4]
   1a9c8:	add	r2, r1, #1
   1a9cc:	str	r2, [r4, #8]
   1a9d0:	ldrb	r5, [r0, r1]
   1a9d4:	mov	r0, #8
   1a9d8:	bl	126dc <malloc@plt>
   1a9dc:	mov	r6, r0
   1a9e0:	cmp	r5, #61	; 0x3d
   1a9e4:	bne	1aa28 <next@@Base+0x1208>
   1a9e8:	ldr	r0, [r7, #544]	; 0x220
   1a9ec:	ldr	r1, [r7, #548]	; 0x224
   1a9f0:	adds	r0, r0, #1
   1a9f4:	adc	r1, r1, #0
   1a9f8:	str	r0, [r7, #544]	; 0x220
   1a9fc:	mov	r0, #3
   1aa00:	str	r1, [r7, #548]	; 0x224
   1aa04:	bl	126dc <malloc@plt>
   1aa08:	mov	r1, r0
   1aa0c:	ldrb	r0, [sp, #8]
   1aa10:	mov	r2, #61	; 0x3d
   1aa14:	strb	r2, [r1, #1]
   1aa18:	add	r2, r1, #2
   1aa1c:	strb	r0, [r1]
   1aa20:	add	r0, r7, #560	; 0x230
   1aa24:	b	1aad4 <next@@Base+0x12b4>
   1aa28:	ldr	r1, [pc, #1292]	; 1af3c <next@@Base+0x171c>
   1aa2c:	add	r0, pc, #860	; 0x35c
   1aa30:	vld1.64	{d16-d17}, [r0 :128]
   1aa34:	add	r1, pc, r1
   1aa38:	vld1.64	{d18-d19}, [r1 :128]
   1aa3c:	ldr	r0, [pc, #1276]	; 1af40 <next@@Base+0x1720>
   1aa40:	ldr	r2, [pc, #1276]	; 1af44 <next@@Base+0x1724>
   1aa44:	ldr	r2, [pc, r2]
   1aa48:	add	r0, pc, r0
   1aa4c:	ldr	r3, [r7, #536]	; 0x218
   1aa50:	ldr	r5, [r7, #540]	; 0x21c
   1aa54:	vadd.i64	q8, q9, q8
   1aa58:	adds	r2, r2, #1
   1aa5c:	vst1.64	{d16-d17}, [r1 :128]
   1aa60:	str	r2, [r0]
   1aa64:	ldr	r2, [r0, #4]
   1aa68:	adc	r2, r2, #0
   1aa6c:	adds	r3, r3, #1
   1aa70:	adc	r1, r5, #0
   1aa74:	str	r2, [r0, #4]
   1aa78:	str	r3, [r7, #536]	; 0x218
   1aa7c:	str	r1, [r7, #540]	; 0x21c
   1aa80:	ldr	r1, [r4, #8]
   1aa84:	cmp	r1, #0
   1aa88:	beq	1ac74 <next@@Base+0x1454>
   1aa8c:	ldrd	r2, [r0, #8]
   1aa90:	ldrd	r8, [r0, #24]
   1aa94:	adds	r2, r2, #1
   1aa98:	adc	r3, r3, #0
   1aa9c:	adds	r5, r8, #1
   1aaa0:	str	r5, [r0, #24]
   1aaa4:	strd	r2, [r0, #8]
   1aaa8:	adc	r2, r9, #0
   1aaac:	str	r2, [r0, #28]
   1aab0:	sub	r0, r1, #1
   1aab4:	str	r0, [r4, #8]
   1aab8:	mov	r0, #2
   1aabc:	bl	126dc <malloc@plt>
   1aac0:	mov	r1, r0
   1aac4:	ldrb	r0, [sp, #8]
   1aac8:	mov	r2, r1
   1aacc:	strb	r0, [r2], #1
   1aad0:	add	r0, r7, #552	; 0x228
   1aad4:	mov	r3, #0
   1aad8:	strb	r3, [r2]
   1aadc:	ldrd	r2, [r0]
   1aae0:	adds	r2, r2, #1
   1aae4:	adc	r3, r3, #0
   1aae8:	strd	r2, [r0]
   1aaec:	mov	r0, r6
   1aaf0:	bl	18e00 <init_token_boolean_op@@Base>
   1aaf4:	add	r0, r7, #568	; 0x238
   1aaf8:	b	19d9c <next@@Base+0x57c>
   1aafc:	ldr	r0, [r7, #528]	; 0x210
   1ab00:	ldr	r1, [r7, #532]	; 0x214
   1ab04:	adds	r0, r0, #1
   1ab08:	adc	r1, r1, #0
   1ab0c:	cmp	r2, #61	; 0x3d
   1ab10:	str	r0, [r7, #528]	; 0x210
   1ab14:	str	r1, [r7, #532]	; 0x214
   1ab18:	bne	1abb8 <next@@Base+0x1398>
   1ab1c:	add	r0, pc, #620	; 0x26c
   1ab20:	vld1.64	{d18-d19}, [lr :128]
   1ab24:	ldr	r1, [r7, #580]	; 0x244
   1ab28:	mov	r5, #61	; 0x3d
   1ab2c:	vld1.64	{d16-d17}, [r0 :128]
   1ab30:	ldr	r0, [r7, #576]	; 0x240
   1ab34:	strb	r5, [ip, sl]
   1ab38:	adds	r0, r0, #1
   1ab3c:	vadd.i64	q8, q9, q8
   1ab40:	adc	r1, r1, #0
   1ab44:	str	r0, [r7, #576]	; 0x240
   1ab48:	str	r1, [r7, #580]	; 0x244
   1ab4c:	vst1.64	{d16-d17}, [lr :128]
   1ab50:	ldr	r1, [r4, #8]
   1ab54:	ldr	r0, [r4]
   1ab58:	add	r2, r1, #1
   1ab5c:	str	r2, [r4, #8]
   1ab60:	ldrb	r4, [r0, r1]
   1ab64:	mov	r0, #8
   1ab68:	bl	126dc <malloc@plt>
   1ab6c:	cmp	r4, #61	; 0x3d
   1ab70:	bne	1ae84 <next@@Base+0x1664>
   1ab74:	mov	r6, r0
   1ab78:	ldr	r0, [r7, #600]	; 0x258
   1ab7c:	ldr	r1, [r7, #604]	; 0x25c
   1ab80:	adds	r0, r0, #1
   1ab84:	adc	r1, r1, #0
   1ab88:	str	r0, [r7, #600]	; 0x258
   1ab8c:	mov	r0, #3
   1ab90:	str	r1, [r7, #604]	; 0x25c
   1ab94:	bl	126dc <malloc@plt>
   1ab98:	mov	r1, r0
   1ab9c:	ldrb	r0, [sp, #8]
   1aba0:	strh	r5, [r1, #1]
   1aba4:	strb	r0, [r1]
   1aba8:	mov	r0, r6
   1abac:	bl	18e00 <init_token_boolean_op@@Base>
   1abb0:	add	r0, r7, #608	; 0x260
   1abb4:	b	19d9c <next@@Base+0x57c>
   1abb8:	ldr	r0, [r7, #584]	; 0x248
   1abbc:	ldr	r1, [r7, #588]	; 0x24c
   1abc0:	adds	r0, r0, #1
   1abc4:	adc	r1, r1, #0
   1abc8:	cmp	r2, #124	; 0x7c
   1abcc:	str	r0, [r7, #584]	; 0x248
   1abd0:	str	r1, [r7, #588]	; 0x24c
   1abd4:	bne	1aea4 <next@@Base+0x1684>
   1abd8:	add	r0, pc, #832	; 0x340
   1abdc:	vld1.64	{d18-d19}, [lr :128]
   1abe0:	ldr	r1, [r7, #620]	; 0x26c
   1abe4:	mov	r5, #124	; 0x7c
   1abe8:	vld1.64	{d16-d17}, [r0 :128]
   1abec:	ldr	r0, [r7, #616]	; 0x268
   1abf0:	strb	r5, [ip, sl]
   1abf4:	adds	r0, r0, #1
   1abf8:	vadd.i64	q8, q9, q8
   1abfc:	adc	r1, r1, #0
   1ac00:	str	r0, [r7, #616]	; 0x268
   1ac04:	str	r1, [r7, #620]	; 0x26c
   1ac08:	vst1.64	{d16-d17}, [lr :128]
   1ac0c:	ldr	r1, [r4, #8]
   1ac10:	ldr	r0, [r4]
   1ac14:	add	r2, r1, #1
   1ac18:	str	r2, [r4, #8]
   1ac1c:	ldrb	r4, [r0, r1]
   1ac20:	mov	r0, #8
   1ac24:	bl	126dc <malloc@plt>
   1ac28:	cmp	r4, #124	; 0x7c
   1ac2c:	bne	1aef4 <next@@Base+0x16d4>
   1ac30:	mov	r6, r0
   1ac34:	ldr	r0, [r7, #640]	; 0x280
   1ac38:	ldr	r1, [r7, #644]	; 0x284
   1ac3c:	adds	r0, r0, #1
   1ac40:	adc	r1, r1, #0
   1ac44:	str	r0, [r7, #640]	; 0x280
   1ac48:	mov	r0, #3
   1ac4c:	str	r1, [r7, #644]	; 0x284
   1ac50:	bl	126dc <malloc@plt>
   1ac54:	mov	r1, r0
   1ac58:	ldrb	r0, [sp, #8]
   1ac5c:	strh	r5, [r1, #1]
   1ac60:	strb	r0, [r1]
   1ac64:	mov	r0, r6
   1ac68:	bl	18e00 <init_token_boolean_op@@Base>
   1ac6c:	add	r0, r7, #648	; 0x288
   1ac70:	b	19d9c <next@@Base+0x57c>
   1ac74:	ldrd	r2, [r0, #16]
   1ac78:	mov	r1, #32
   1ac7c:	adds	r2, r2, #1
   1ac80:	adc	r3, r3, #0
   1ac84:	strd	r2, [r0, #16]
   1ac88:	mov	r2, #1
   1ac8c:	ldr	r0, [pc, #716]	; 1af60 <next@@Base+0x1740>
   1ac90:	ldr	r0, [pc, r0]
   1ac94:	ldr	r3, [r0]
   1ac98:	ldr	r0, [pc, #708]	; 1af64 <next@@Base+0x1744>
   1ac9c:	add	r0, pc, r0
   1aca0:	bl	126b8 <fwrite@plt>
   1aca4:	mov	r0, #1
   1aca8:	bl	12718 <exit@plt>
   1acac:	ldr	r0, [r7, #784]	; 0x310
   1acb0:	ldr	r1, [r7, #788]	; 0x314
   1acb4:	adds	r0, r0, #1
   1acb8:	adc	r1, r1, #0
   1acbc:	str	r0, [r7, #784]	; 0x310
   1acc0:	mov	r0, #1
   1acc4:	str	r1, [r7, #788]	; 0x314
   1acc8:	bl	12718 <exit@plt>
   1accc:	ldr	r0, [r7, #800]	; 0x320
   1acd0:	ldr	r1, [r7, #804]	; 0x324
   1acd4:	adds	r0, r0, #1
   1acd8:	adc	r1, r1, #0
   1acdc:	str	r0, [r7, #800]	; 0x320
   1ace0:	mov	r0, #1
   1ace4:	str	r1, [r7, #804]	; 0x324
   1ace8:	bl	12718 <exit@plt>
   1acec:	ldr	r0, [r7, #816]	; 0x330
   1acf0:	ldr	r1, [r7, #820]	; 0x334
   1acf4:	adds	r0, r0, #1
   1acf8:	adc	r1, r1, #0
   1acfc:	str	r0, [r7, #816]	; 0x330
   1ad00:	mov	r0, #1
   1ad04:	str	r1, [r7, #820]	; 0x334
   1ad08:	bl	12718 <exit@plt>
   1ad0c:	ldr	r0, [r7, #840]	; 0x348
   1ad10:	ldr	r1, [r7, #844]	; 0x34c
   1ad14:	adds	r0, r0, #1
   1ad18:	adc	r1, r1, #0
   1ad1c:	str	r0, [r7, #840]	; 0x348
   1ad20:	mov	r0, #1
   1ad24:	str	r1, [r7, #844]	; 0x34c
   1ad28:	bl	12718 <exit@plt>
   1ad2c:	ldr	r0, [r7, #856]	; 0x358
   1ad30:	ldr	r1, [r7, #860]	; 0x35c
   1ad34:	adds	r0, r0, #1
   1ad38:	adc	r1, r1, #0
   1ad3c:	str	r0, [r7, #856]	; 0x358
   1ad40:	mov	r0, #1
   1ad44:	str	r1, [r7, #860]	; 0x35c
   1ad48:	bl	12718 <exit@plt>
   1ad4c:	ldr	r0, [r7, #872]	; 0x368
   1ad50:	ldr	r1, [r7, #876]	; 0x36c
   1ad54:	adds	r0, r0, #1
   1ad58:	adc	r1, r1, #0
   1ad5c:	str	r0, [r7, #872]	; 0x368
   1ad60:	mov	r0, #1
   1ad64:	str	r1, [r7, #876]	; 0x36c
   1ad68:	bl	12718 <exit@plt>
   1ad6c:	ldr	r0, [r7, #888]	; 0x378
   1ad70:	ldr	r1, [r7, #892]	; 0x37c
   1ad74:	adds	r0, r0, #1
   1ad78:	adc	r1, r1, #0
   1ad7c:	str	r0, [r7, #888]	; 0x378
   1ad80:	mov	r0, #1
   1ad84:	str	r1, [r7, #892]	; 0x37c
   1ad88:	bl	12718 <exit@plt>
   1ad8c:	nop	{0}
   1ad90:	andeq	r0, r0, r1
   1ad94:	andeq	r0, r0, r0
   1ad98:	andeq	r0, r0, r1
   1ad9c:	andeq	r0, r0, r0
   1ada0:	ldr	r0, [r7, #904]	; 0x388
   1ada4:	ldr	r1, [r7, #908]	; 0x38c
   1ada8:	adds	r0, r0, #1
   1adac:	adc	r1, r1, #0
   1adb0:	str	r0, [r7, #904]	; 0x388
   1adb4:	mov	r0, #1
   1adb8:	str	r1, [r7, #908]	; 0x38c
   1adbc:	bl	12718 <exit@plt>
   1adc0:	ldr	r0, [r7, #728]	; 0x2d8
   1adc4:	ldr	r1, [r7, #732]	; 0x2dc
   1adc8:	adds	r0, r0, #1
   1adcc:	adc	r1, r1, #0
   1add0:	str	r0, [r7, #728]	; 0x2d8
   1add4:	mov	r0, #1
   1add8:	str	r1, [r7, #732]	; 0x2dc
   1addc:	bl	12718 <exit@plt>
   1ade0:	muleq	r1, ip, r5
   1ade4:	ldr	r0, [r7, #928]	; 0x3a0
   1ade8:	ldr	r1, [r7, #932]	; 0x3a4
   1adec:	adds	r0, r0, #1
   1adf0:	adc	r1, r1, #0
   1adf4:	str	r0, [r7, #928]	; 0x3a0
   1adf8:	mov	r0, #1
   1adfc:	str	r1, [r7, #932]	; 0x3a4
   1ae00:	bl	12718 <exit@plt>
   1ae04:	ldr	r0, [r7, #944]	; 0x3b0
   1ae08:	ldr	r1, [r7, #948]	; 0x3b4
   1ae0c:	adds	r0, r0, #1
   1ae10:	adc	r1, r1, #0
   1ae14:	str	r0, [r7, #944]	; 0x3b0
   1ae18:	mov	r0, #1
   1ae1c:	str	r1, [r7, #948]	; 0x3b4
   1ae20:	bl	12718 <exit@plt>
   1ae24:	ldr	r0, [r7, #960]	; 0x3c0
   1ae28:	ldr	r1, [r7, #964]	; 0x3c4
   1ae2c:	adds	r0, r0, #1
   1ae30:	adc	r1, r1, #0
   1ae34:	str	r0, [r7, #960]	; 0x3c0
   1ae38:	mov	r0, #1
   1ae3c:	str	r1, [r7, #964]	; 0x3c4
   1ae40:	bl	12718 <exit@plt>
   1ae44:	ldr	r0, [r7, #752]	; 0x2f0
   1ae48:	ldr	r1, [r7, #756]	; 0x2f4
   1ae4c:	adds	r0, r0, #1
   1ae50:	adc	r1, r1, #0
   1ae54:	str	r0, [r7, #752]	; 0x2f0
   1ae58:	mov	r0, #1
   1ae5c:	str	r1, [r7, #756]	; 0x2f4
   1ae60:	bl	12718 <exit@plt>
   1ae64:	ldr	r0, [r7, #672]	; 0x2a0
   1ae68:	ldr	r1, [r7, #676]	; 0x2a4
   1ae6c:	adds	r0, r0, #1
   1ae70:	adc	r1, r1, #0
   1ae74:	str	r0, [r7, #672]	; 0x2a0
   1ae78:	mov	r0, #1
   1ae7c:	str	r1, [r7, #676]	; 0x2a4
   1ae80:	bl	12718 <exit@plt>
   1ae84:	ldr	r0, [r7, #592]	; 0x250
   1ae88:	ldr	r1, [r7, #596]	; 0x254
   1ae8c:	adds	r0, r0, #1
   1ae90:	adc	r1, r1, #0
   1ae94:	str	r0, [r7, #592]	; 0x250
   1ae98:	mov	r0, #1
   1ae9c:	str	r1, [r7, #596]	; 0x254
   1aea0:	bl	12718 <exit@plt>
   1aea4:	ldr	r0, [r7, #624]	; 0x270
   1aea8:	ldr	r1, [r7, #628]	; 0x274
   1aeac:	adds	r0, r0, #1
   1aeb0:	adc	r1, r1, #0
   1aeb4:	str	r0, [r7, #624]	; 0x270
   1aeb8:	str	r1, [r7, #628]	; 0x274
   1aebc:	ldr	r0, [r7, #664]	; 0x298
   1aec0:	ldr	r1, [r7, #668]	; 0x29c
   1aec4:	adds	r0, r0, #1
   1aec8:	adc	r1, r1, #0
   1aecc:	str	r0, [r7, #664]	; 0x298
   1aed0:	str	r1, [r7, #668]	; 0x29c
   1aed4:	ldr	r0, [pc, #108]	; 1af48 <next@@Base+0x1728>
   1aed8:	ldr	r0, [pc, r0]
   1aedc:	ldr	r0, [r0]
   1aee0:	ldr	r1, [pc, #100]	; 1af4c <next@@Base+0x172c>
   1aee4:	add	r1, pc, r1
   1aee8:	bl	1273c <fprintf@plt>
   1aeec:	mov	r0, #1
   1aef0:	bl	12718 <exit@plt>
   1aef4:	ldr	r0, [r7, #632]	; 0x278
   1aef8:	ldr	r1, [r7, #636]	; 0x27c
   1aefc:	adds	r0, r0, #1
   1af00:	adc	r1, r1, #0
   1af04:	str	r0, [r7, #632]	; 0x278
   1af08:	mov	r0, #1
   1af0c:	str	r1, [r7, #636]	; 0x27c
   1af10:	bl	12718 <exit@plt>
   1af14:	nop	{0}
   1af18:	nop	{0}
   1af1c:	nop	{0}
   1af20:	andeq	r0, r0, r1
   1af24:	andeq	r0, r0, r0
   1af28:	andeq	r0, r0, r1
   1af2c:	andeq	r0, r0, r0
   1af30:	andeq	r6, r1, ip, asr fp
   1af34:	andeq	r6, r1, r8, lsr #22
   1af38:	andeq	r6, r1, ip, lsr #22
   1af3c:	muleq	r1, r4, r9
   1af40:	andeq	r6, r1, r0, ror #18
   1af44:	andeq	r6, r1, r4, ror #18
   1af48:	andeq	r5, r1, r4, lsr r2
   1af4c:	andeq	r3, r0, r4, asr #26
   1af50:	andeq	r7, r1, r8, ror r0
   1af54:	andeq	r7, r1, r4, asr #32
   1af58:	andeq	r7, r1, r8, asr #32
   1af5c:	andeq	r7, r1, r8, asr #7
   1af60:	andeq	r5, r1, ip, ror r4
   1af64:	andeq	r3, r0, fp, ror #30
   1af68:	push	{r4, r5, r6, lr}
   1af6c:	sub	sp, sp, #8
   1af70:	ldr	r0, [pc, #112]	; 1afe8 <next@@Base+0x17c8>
   1af74:	ldr	r1, [pc, #112]	; 1afec <next@@Base+0x17cc>
   1af78:	movw	r2, #8093	; 0x1f9d
   1af7c:	movt	r2, #48445	; 0xbd3d
   1af80:	add	r0, pc, r0
   1af84:	add	r1, pc, r1
   1af88:	bl	1b0e0 <next@@Base+0x18c0>
   1af8c:	ldr	r0, [pc, #92]	; 1aff0 <next@@Base+0x17d0>
   1af90:	ldr	r6, [pc, #92]	; 1aff4 <next@@Base+0x17d4>
   1af94:	mov	r5, #0
   1af98:	add	r0, pc, r0
   1af9c:	add	r6, pc, r6
   1afa0:	add	r4, r0, #4
   1afa4:	mov	r3, r6
   1afa8:	ldr	r0, [r3, r5]!
   1afac:	ldr	r1, [r3, #16]
   1afb0:	str	r1, [sp]
   1afb4:	ldmib	r3, {r1, r2}
   1afb8:	ldrb	r3, [r3, #12]
   1afbc:	bl	1b800 <next@@Base+0x1fe0>
   1afc0:	ldrd	r0, [r4, #-4]
   1afc4:	bl	1c0b4 <next@@Base+0x2894>
   1afc8:	add	r5, r5, #20
   1afcc:	add	r4, r4, #8
   1afd0:	cmp	r5, #180	; 0xb4
   1afd4:	bne	1afa4 <next@@Base+0x1784>
   1afd8:	bl	1c83c <next@@Base+0x301c>
   1afdc:	add	sp, sp, #8
   1afe0:	pop	{r4, r5, r6, lr}
   1afe4:	b	1d5a8 <next@@Base+0x3d88>
   1afe8:	ldrdeq	r3, [r0], -r0
   1afec:	andeq	r3, r0, pc, lsr #6
   1aff0:	andeq	r4, r1, r0, lsr #30
   1aff4:	andeq	r4, r1, ip, asr lr
   1aff8:	push	{fp, lr}
   1affc:	vpush	{d8-d9}
   1b000:	bl	1af68 <next@@Base+0x1748>
   1b004:	ldr	r0, [pc, #148]	; 1b0a0 <next@@Base+0x1880>
   1b008:	vmov.i32	q4, #0	; 0x00000000
   1b00c:	add	r0, pc, r0
   1b010:	vst1.64	{d8-d9}, [r0 :128]
   1b014:	ldr	r0, [pc, #136]	; 1b0a4 <next@@Base+0x1884>
   1b018:	add	r0, pc, r0
   1b01c:	add	r1, r0, #16
   1b020:	vst1.64	{d8-d9}, [r1 :128]
   1b024:	mov	r1, #0
   1b028:	str	r1, [r0, #32]
   1b02c:	ldr	r2, [pc, #116]	; 1b0a8 <next@@Base+0x1888>
   1b030:	add	r2, pc, r2
   1b034:	vst1.64	{d8-d9}, [r2 :128]
   1b038:	ldr	r2, [pc, #108]	; 1b0ac <next@@Base+0x188c>
   1b03c:	add	r2, pc, r2
   1b040:	vst1.64	{d8-d9}, [r2 :128]
   1b044:	ldr	r2, [pc, #100]	; 1b0b0 <next@@Base+0x1890>
   1b048:	add	r2, pc, r2
   1b04c:	vst1.64	{d8-d9}, [r2 :128]
   1b050:	ldr	r2, [pc, #92]	; 1b0b4 <next@@Base+0x1894>
   1b054:	add	r2, pc, r2
   1b058:	vst1.64	{d8-d9}, [r2 :128]
   1b05c:	mov	r2, #36	; 0x24
   1b060:	vst1.64	{d8-d9}, [r0 :128], r2
   1b064:	mov	r2, #1008	; 0x3f0
   1b068:	str	r1, [r0]
   1b06c:	mov	r1, #0
   1b070:	ldr	r0, [pc, #64]	; 1b0b8 <next@@Base+0x1898>
   1b074:	add	r0, pc, r0
   1b078:	vst1.64	{d8-d9}, [r0 :128]!
   1b07c:	vst1.64	{d8-d9}, [r0 :128]
   1b080:	ldr	r0, [pc, #52]	; 1b0bc <next@@Base+0x189c>
   1b084:	add	r0, pc, r0
   1b088:	bl	1276c <memset@plt>
   1b08c:	ldr	r0, [pc, #44]	; 1b0c0 <next@@Base+0x18a0>
   1b090:	add	r0, pc, r0
   1b094:	vst1.64	{d8-d9}, [r0 :128]
   1b098:	vpop	{d8-d9}
   1b09c:	pop	{fp, pc}
   1b0a0:	andeq	r6, r1, ip, lsr #6
   1b0a4:	andeq	r6, r1, r0, lsr r3
   1b0a8:	andeq	r6, r1, r8, asr #6
   1b0ac:	andeq	r6, r1, ip, asr #6
   1b0b0:	andeq	r6, r1, r0, asr r3
   1b0b4:	andeq	r6, r1, r4, ror r3
   1b0b8:	andeq	r6, r1, r4, lsr r3
   1b0bc:	andeq	r6, r1, r4, asr r3
   1b0c0:	andeq	r6, r1, r8, lsr r7
   1b0c4:	ldr	r0, [pc, #12]	; 1b0d8 <next@@Base+0x18b8>
   1b0c8:	ldr	r1, [pc, #12]	; 1b0dc <next@@Base+0x18bc>
   1b0cc:	add	r0, pc, r0
   1b0d0:	add	r1, pc, r1
   1b0d4:	b	1da5c <__gcov_flush@@Base+0xb8>
   1b0d8:			; <UNDEFINED> instruction: 0xfffffe94
   1b0dc:			; <UNDEFINED> instruction: 0xffffff20
   1b0e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0e4:	add	fp, sp, #28
   1b0e8:	sub	sp, sp, #36	; 0x24
   1b0ec:	mov	r9, r1
   1b0f0:	mov	r6, r0
   1b0f4:	add	r0, sp, #28
   1b0f8:	add	r1, sp, #32
   1b0fc:	mov	r8, r2
   1b100:	bl	1def4 <__gcov_flush@@Base+0x550>
   1b104:	cmp	r0, #0
   1b108:	beq	1b14c <next@@Base+0x192c>
   1b10c:	mov	r4, r0
   1b110:	mov	r0, r6
   1b114:	ldr	r5, [sp, #32]
   1b118:	bl	12724 <strlen@plt>
   1b11c:	add	r0, r5, r0
   1b120:	add	r0, r0, #2
   1b124:	bl	126dc <malloc@plt>
   1b128:	mov	r7, r0
   1b12c:	ldr	r0, [sp, #28]
   1b130:	mov	r1, r6
   1b134:	mov	r2, r4
   1b138:	str	r0, [sp]
   1b13c:	mov	r0, r7
   1b140:	mov	r3, r5
   1b144:	bl	1df88 <__gcov_flush@@Base+0x5e4>
   1b148:	b	1b158 <next@@Base+0x1938>
   1b14c:	mov	r0, r6
   1b150:	bl	12694 <strdup@plt>
   1b154:	mov	r7, r0
   1b158:	ldr	r0, [pc, #1492]	; 1b734 <next@@Base+0x1f14>
   1b15c:	ldr	r6, [pc, #1492]	; 1b738 <next@@Base+0x1f18>
   1b160:	mov	r1, #2
   1b164:	add	r0, pc, r0
   1b168:	add	r6, pc, r6
   1b16c:	str	r7, [r0]
   1b170:	mov	r0, r7
   1b174:	mov	r5, #0
   1b178:	strb	r5, [r6]
   1b17c:	bl	126c4 <open64@plt>
   1b180:	ldr	r4, [pc, #1460]	; 1b73c <next@@Base+0x1f1c>
   1b184:	cmn	r0, #1
   1b188:	add	r4, pc, r4
   1b18c:	str	r0, [r4]
   1b190:	beq	1b1a0 <next@@Base+0x1980>
   1b194:	ldr	r6, [pc, #1444]	; 1b740 <next@@Base+0x1f20>
   1b198:	add	r6, pc, r6
   1b19c:	b	1b1fc <next@@Base+0x19dc>
   1b1a0:	mov	r0, #1
   1b1a4:	strb	r0, [r6]
   1b1a8:	ldr	r0, [pc, #1488]	; 1b780 <next@@Base+0x1f60>
   1b1ac:	mov	r1, #66	; 0x42
   1b1b0:	mov	r2, #420	; 0x1a4
   1b1b4:	ldr	r0, [pc, r0]
   1b1b8:	bl	126c4 <open64@plt>
   1b1bc:	ldr	r6, [pc, #1472]	; 1b784 <next@@Base+0x1f64>
   1b1c0:	cmn	r0, #1
   1b1c4:	str	r0, [r4]
   1b1c8:	add	r6, pc, r6
   1b1cc:	bne	1b1fc <next@@Base+0x19dc>
   1b1d0:	ldr	r0, [pc, #1456]	; 1b788 <next@@Base+0x1f68>
   1b1d4:	ldr	r0, [pc, r0]
   1b1d8:	bl	1db6c <__gcov_flush@@Base+0x1c8>
   1b1dc:	ldr	r0, [pc, #1448]	; 1b78c <next@@Base+0x1f6c>
   1b1e0:	mov	r1, #66	; 0x42
   1b1e4:	mov	r2, #420	; 0x1a4
   1b1e8:	ldr	r0, [pc, r0]
   1b1ec:	bl	126c4 <open64@plt>
   1b1f0:	cmn	r0, #1
   1b1f4:	str	r0, [r4]
   1b1f8:	beq	1b6ec <next@@Base+0x1ecc>
   1b1fc:	str	r9, [sp, #20]
   1b200:	str	r8, [sp, #24]
   1b204:	bl	1dc30 <__gcov_flush@@Base+0x28c>
   1b208:	ldr	r0, [pc, #1332]	; 1b744 <next@@Base+0x1f24>
   1b20c:	mov	r1, r6
   1b210:	ldr	r0, [pc, r0]
   1b214:	bl	12610 <fdopen@plt>
   1b218:	ldr	r7, [pc, #1320]	; 1b748 <next@@Base+0x1f28>
   1b21c:	ldr	r9, [pc, #1320]	; 1b74c <next@@Base+0x1f2c>
   1b220:	ldr	r1, [pc, #1320]	; 1b750 <next@@Base+0x1f30>
   1b224:	ldr	sl, [pc, #1320]	; 1b754 <next@@Base+0x1f34>
   1b228:	add	r7, pc, r7
   1b22c:	add	r9, pc, r9
   1b230:	add	r1, pc, r1
   1b234:	add	sl, pc, sl
   1b238:	str	r5, [r7]
   1b23c:	str	r5, [r7, #4]
   1b240:	str	r5, [r9]
   1b244:	str	r5, [r9, #4]
   1b248:	str	r0, [r1]
   1b24c:	str	r5, [sl]
   1b250:	ldr	r6, [pc, #1280]	; 1b758 <next@@Base+0x1f38>
   1b254:	mov	r4, #131072	; 0x20000
   1b258:	add	r6, pc, r6
   1b25c:	ldrb	r1, [r6]
   1b260:	cmp	r1, #0
   1b264:	beq	1b358 <next@@Base+0x1b38>
   1b268:	mov	r0, r4
   1b26c:	bl	126dc <malloc@plt>
   1b270:	mov	r8, r0
   1b274:	strd	r4, [r7]
   1b278:	str	r0, [sl]
   1b27c:	mov	r0, r8
   1b280:	mov	r1, #0
   1b284:	mov	r2, #131072	; 0x20000
   1b288:	bl	1276c <memset@plt>
   1b28c:	ldr	r0, [r9, #4]
   1b290:	ldr	r1, [pc, #1284]	; 1b79c <next@@Base+0x1f7c>
   1b294:	mov	r7, #7
   1b298:	orr	r7, r7, #131072	; 0x20000
   1b29c:	ldr	r1, [pc, r1]
   1b2a0:	ldr	sl, [pc, #1272]	; 1b7a0 <next@@Base+0x1f80>
   1b2a4:	adds	r2, r1, #4
   1b2a8:	add	sl, pc, sl
   1b2ac:	adc	r3, r0, #0
   1b2b0:	ldr	r5, [sl, #4]
   1b2b4:	ldr	r4, [pc, #1256]	; 1b7a4 <next@@Base+0x1f84>
   1b2b8:	ldr	r4, [pc, r4]
   1b2bc:	subs	r2, r4, r2
   1b2c0:	sbcs	r2, r5, r3
   1b2c4:	bcs	1b3d8 <next@@Base+0x1bb8>
   1b2c8:	adds	r1, r7, r1
   1b2cc:	adc	r0, r0, #0
   1b2d0:	subs	r1, r1, #4
   1b2d4:	sbc	r0, r0, #0
   1b2d8:	mvn	r2, #0
   1b2dc:	and	r5, r0, r2
   1b2e0:	mov	r0, #16646144	; 0xfe0000
   1b2e4:	orr	r0, r0, #-16777216	; 0xff000000
   1b2e8:	and	r4, r1, r0
   1b2ec:	mov	r0, r8
   1b2f0:	mov	r1, r4
   1b2f4:	bl	126ac <realloc@plt>
   1b2f8:	ldr	r1, [pc, #1068]	; 1b72c <next@@Base+0x1f0c>
   1b2fc:	strd	r4, [sl]
   1b300:	mov	r3, r0
   1b304:	mov	r7, r1
   1b308:	lsr	r2, r1, #24
   1b30c:	ldr	r1, [pc, #1176]	; 1b7ac <next@@Base+0x1f8c>
   1b310:	ldrb	r6, [r6]
   1b314:	lsr	r4, r7, #16
   1b318:	add	r1, pc, r1
   1b31c:	str	r0, [r1]
   1b320:	ldr	r1, [r9, #4]
   1b324:	ldr	r5, [pc, #1156]	; 1b7b0 <next@@Base+0x1f90>
   1b328:	ldr	r5, [pc, r5]
   1b32c:	strb	r7, [r3, r5]!
   1b330:	strb	r2, [r3, #3]
   1b334:	lsr	r2, r7, #8
   1b338:	strb	r2, [r3, #1]
   1b33c:	adds	r2, r5, #4
   1b340:	adc	ip, r1, #0
   1b344:	cmp	r6, #1
   1b348:	strb	r4, [r3, #2]
   1b34c:	stm	r9, {r2, ip}
   1b350:	beq	1b41c <next@@Base+0x1bfc>
   1b354:	b	1b5d4 <next@@Base+0x1db4>
   1b358:	mov	r1, #0
   1b35c:	mov	r2, #2
   1b360:	mov	r8, #0
   1b364:	bl	127e4 <fseek@plt>
   1b368:	ldr	r0, [pc, #1004]	; 1b75c <next@@Base+0x1f3c>
   1b36c:	ldr	r0, [pc, r0]
   1b370:	bl	1267c <ftell@plt>
   1b374:	mov	r2, r0
   1b378:	ldr	r0, [pc, #992]	; 1b760 <next@@Base+0x1f40>
   1b37c:	asr	r3, r2, #31
   1b380:	add	r0, pc, r0
   1b384:	cmp	r2, #0
   1b388:	strd	r2, [r0]
   1b38c:	beq	1b67c <next@@Base+0x1e5c>
   1b390:	ldr	r0, [pc, #972]	; 1b764 <next@@Base+0x1f44>
   1b394:	mov	r1, r2
   1b398:	mov	r2, #3
   1b39c:	mov	r3, #1
   1b3a0:	ldr	r0, [pc, r0]
   1b3a4:	str	r8, [sp, #8]
   1b3a8:	str	r8, [sp, #12]
   1b3ac:	str	r0, [sp]
   1b3b0:	mov	r0, #0
   1b3b4:	bl	12670 <mmap64@plt>
   1b3b8:	cmn	r0, #1
   1b3bc:	str	r0, [sl]
   1b3c0:	beq	1b644 <next@@Base+0x1e24>
   1b3c4:	ldrb	r1, [r6]
   1b3c8:	cmp	r1, #0
   1b3cc:	beq	1b594 <next@@Base+0x1d74>
   1b3d0:	mov	r8, r0
   1b3d4:	b	1b28c <next@@Base+0x1a6c>
   1b3d8:	ldr	r1, [r9, #4]
   1b3dc:	ldr	r5, [pc, #964]	; 1b7a8 <next@@Base+0x1f88>
   1b3e0:	ldr	r0, [pc, #836]	; 1b72c <next@@Base+0x1f0c>
   1b3e4:	mov	r6, r8
   1b3e8:	ldr	r5, [pc, r5]
   1b3ec:	mov	r7, r0
   1b3f0:	lsr	r2, r7, #16
   1b3f4:	strb	r7, [r6, r5]!
   1b3f8:	lsr	r0, r0, #24
   1b3fc:	lsr	r3, r7, #8
   1b400:	strb	r2, [r6, #2]
   1b404:	adds	r2, r5, #4
   1b408:	strb	r0, [r6, #3]
   1b40c:	strb	r3, [r6, #1]
   1b410:	adc	ip, r1, #0
   1b414:	stm	r9, {r2, ip}
   1b418:	mov	r0, r8
   1b41c:	ldr	r7, [sl, #4]
   1b420:	ldr	r3, [pc, #908]	; 1b7b4 <next@@Base+0x1f94>
   1b424:	adds	r6, r5, #8
   1b428:	adc	r4, r1, #0
   1b42c:	ldr	r3, [pc, r3]
   1b430:	subs	r3, r3, r6
   1b434:	sbcs	r3, r7, r4
   1b438:	bcs	1b4dc <next@@Base+0x1cbc>
   1b43c:	mov	r2, #7
   1b440:	orr	r2, r2, #131072	; 0x20000
   1b444:	adds	r2, r5, r2
   1b448:	adc	r1, r1, #0
   1b44c:	mvn	r3, #0
   1b450:	and	r5, r1, r3
   1b454:	mov	r1, #16646144	; 0xfe0000
   1b458:	orr	r1, r1, #-16777216	; 0xff000000
   1b45c:	and	r4, r2, r1
   1b460:	mov	r1, r4
   1b464:	bl	126ac <realloc@plt>
   1b468:	strd	r4, [sl]
   1b46c:	ldr	r1, [pc, #840]	; 1b7bc <next@@Base+0x1f9c>
   1b470:	mov	r4, r0
   1b474:	mov	lr, r9
   1b478:	add	r1, pc, r1
   1b47c:	str	r0, [r1]
   1b480:	ldr	r1, [pc, #824]	; 1b7c0 <next@@Base+0x1fa0>
   1b484:	ldr	r2, [sp, #20]
   1b488:	ldr	ip, [r9, #4]
   1b48c:	add	r1, pc, r1
   1b490:	ldrb	r3, [r1]
   1b494:	ldrb	r1, [r2]
   1b498:	ldrb	r7, [r2, #1]
   1b49c:	ldrb	r6, [r2, #2]
   1b4a0:	ldrb	r5, [r2, #3]
   1b4a4:	ldr	r2, [pc, #792]	; 1b7c4 <next@@Base+0x1fa4>
   1b4a8:	ldr	r2, [pc, r2]
   1b4ac:	strb	r1, [r4, r2]!
   1b4b0:	strb	r5, [r4, #3]
   1b4b4:	ldr	r5, [sp, #24]
   1b4b8:	strb	r6, [r4, #2]
   1b4bc:	adds	r6, r2, #4
   1b4c0:	adc	r1, ip, #0
   1b4c4:	cmp	r3, #1
   1b4c8:	str	r6, [lr]
   1b4cc:	strb	r7, [r4, #1]
   1b4d0:	str	r1, [lr, #4]
   1b4d4:	beq	1b51c <next@@Base+0x1cfc>
   1b4d8:	b	1b614 <next@@Base+0x1df4>
   1b4dc:	ldr	r6, [sp, #20]
   1b4e0:	mov	r5, r0
   1b4e4:	ldrb	r1, [r6]
   1b4e8:	ldrb	r3, [r6, #1]
   1b4ec:	ldrb	r7, [r6, #2]
   1b4f0:	ldrb	r6, [r6, #3]
   1b4f4:	strb	r1, [r5, r2]!
   1b4f8:	strb	r6, [r5, #3]
   1b4fc:	strb	r3, [r5, #1]
   1b500:	adds	r6, r2, #4
   1b504:	mov	r3, r9
   1b508:	adc	r1, ip, #0
   1b50c:	strb	r7, [r5, #2]
   1b510:	str	r6, [r3]
   1b514:	str	r1, [r3, #4]
   1b518:	ldr	r5, [sp, #24]
   1b51c:	ldr	r7, [sl, #4]
   1b520:	ldr	r4, [pc, #672]	; 1b7c8 <next@@Base+0x1fa8>
   1b524:	adds	r3, r2, #8
   1b528:	adc	lr, ip, #0
   1b52c:	ldr	r4, [pc, r4]
   1b530:	subs	r3, r4, r3
   1b534:	sbcs	r3, r7, lr
   1b538:	bcs	1b58c <next@@Base+0x1d6c>
   1b53c:	mov	r1, #7
   1b540:	orr	r1, r1, #131072	; 0x20000
   1b544:	adds	r1, r2, r1
   1b548:	adc	r2, ip, #0
   1b54c:	mvn	r3, #0
   1b550:	and	r7, r2, r3
   1b554:	mov	r2, #16646144	; 0xfe0000
   1b558:	orr	r2, r2, #-16777216	; 0xff000000
   1b55c:	and	r4, r1, r2
   1b560:	mov	r1, r4
   1b564:	bl	126ac <realloc@plt>
   1b568:	stm	sl, {r4, r7}
   1b56c:	ldr	r1, [r9, #4]
   1b570:	ldr	r2, [pc, #596]	; 1b7cc <next@@Base+0x1fac>
   1b574:	mov	lr, r9
   1b578:	add	r2, pc, r2
   1b57c:	str	r0, [r2]
   1b580:	ldr	r6, [pc, #584]	; 1b7d0 <next@@Base+0x1fb0>
   1b584:	ldr	r6, [pc, r6]
   1b588:	b	1b614 <next@@Base+0x1df4>
   1b58c:	mov	lr, r9
   1b590:	b	1b614 <next@@Base+0x1df4>
   1b594:	ldr	r6, [r9, #4]
   1b598:	ldr	r5, [pc, #536]	; 1b7b8 <next@@Base+0x1f98>
   1b59c:	ldr	r1, [pc, #392]	; 1b72c <next@@Base+0x1f0c>
   1b5a0:	mov	r4, r0
   1b5a4:	ldr	r5, [pc, r5]
   1b5a8:	mov	r7, r1
   1b5ac:	lsr	r2, r7, #16
   1b5b0:	strb	r7, [r4, r5]!
   1b5b4:	lsr	r1, r1, #24
   1b5b8:	strb	r2, [r4, #2]
   1b5bc:	adds	r2, r5, #4
   1b5c0:	lsr	r3, r7, #8
   1b5c4:	adc	ip, r6, #0
   1b5c8:	strb	r1, [r4, #3]
   1b5cc:	strb	r3, [r4, #1]
   1b5d0:	stm	r9, {r2, ip}
   1b5d4:	ldr	r4, [sp, #20]
   1b5d8:	mov	r5, r0
   1b5dc:	mov	lr, r9
   1b5e0:	ldrb	r1, [r4]
   1b5e4:	ldrb	r6, [r4, #3]
   1b5e8:	ldrb	r3, [r4, #1]
   1b5ec:	ldrb	r7, [r4, #2]
   1b5f0:	strb	r1, [r5, r2]!
   1b5f4:	strb	r6, [r5, #3]
   1b5f8:	adds	r6, r2, #4
   1b5fc:	adc	r1, ip, #0
   1b600:	strb	r7, [r5, #2]
   1b604:	strb	r3, [r5, #1]
   1b608:	str	r6, [lr]
   1b60c:	str	r1, [lr, #4]
   1b610:	ldr	r5, [sp, #24]
   1b614:	lsr	r2, r5, #24
   1b618:	strb	r5, [r0, r6]!
   1b61c:	lsr	r3, r5, #16
   1b620:	lsr	r7, r5, #8
   1b624:	strb	r2, [r0, #3]
   1b628:	strb	r3, [r0, #2]
   1b62c:	strb	r7, [r0, #1]
   1b630:	adds	r0, r6, #4
   1b634:	adc	r1, r1, #0
   1b638:	strd	r0, [lr]
   1b63c:	sub	sp, fp, #28
   1b640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b644:	bl	12748 <__errno_location@plt>
   1b648:	ldr	r1, [pc, #280]	; 1b768 <next@@Base+0x1f48>
   1b64c:	ldr	r1, [pc, r1]
   1b650:	ldr	r0, [r0]
   1b654:	ldr	r4, [r1]
   1b658:	ldr	r5, [pc, #268]	; 1b76c <next@@Base+0x1f4c>
   1b65c:	ldr	r5, [pc, r5]
   1b660:	bl	126f4 <strerror@plt>
   1b664:	ldr	r1, [pc, #260]	; 1b770 <next@@Base+0x1f50>
   1b668:	mov	r3, r0
   1b66c:	mov	r0, r4
   1b670:	add	r1, pc, r1
   1b674:	mov	r2, r5
   1b678:	bl	1273c <fprintf@plt>
   1b67c:	ldr	r0, [pc, #240]	; 1b774 <next@@Base+0x1f54>
   1b680:	str	r8, [sl]
   1b684:	mov	r2, #16646144	; 0xfe0000
   1b688:	add	r0, pc, r0
   1b68c:	orr	r2, r2, #-16777216	; 0xff000000
   1b690:	str	r8, [r0]
   1b694:	str	r8, [r0, #4]
   1b698:	mov	r0, #1
   1b69c:	strb	r0, [r6]
   1b6a0:	ldr	r0, [r9, #4]
   1b6a4:	ldr	r1, [pc, #204]	; 1b778 <next@@Base+0x1f58>
   1b6a8:	mvn	r3, #0
   1b6ac:	eor	r3, r0, r3
   1b6b0:	ldr	r1, [pc, r1]
   1b6b4:	eor	r2, r1, r2
   1b6b8:	orrs	r2, r2, r3
   1b6bc:	beq	1b27c <next@@Base+0x1a5c>
   1b6c0:	ldr	r2, [pc, #104]	; 1b730 <next@@Base+0x1f10>
   1b6c4:	ldr	r7, [pc, #176]	; 1b77c <next@@Base+0x1f5c>
   1b6c8:	adds	r1, r1, r2
   1b6cc:	mov	r2, #16646144	; 0xfe0000
   1b6d0:	orr	r2, r2, #-16777216	; 0xff000000
   1b6d4:	and	r4, r1, r2
   1b6d8:	adc	r0, r0, #0
   1b6dc:	mvn	r1, #0
   1b6e0:	and	r5, r0, r1
   1b6e4:	add	r7, pc, r7
   1b6e8:	b	1b268 <next@@Base+0x1a48>
   1b6ec:	bl	12748 <__errno_location@plt>
   1b6f0:	ldr	r1, [pc, #152]	; 1b790 <next@@Base+0x1f70>
   1b6f4:	ldr	r1, [pc, r1]
   1b6f8:	ldr	r0, [r0]
   1b6fc:	ldr	r4, [r1]
   1b700:	ldr	r5, [pc, #140]	; 1b794 <next@@Base+0x1f74>
   1b704:	ldr	r5, [pc, r5]
   1b708:	bl	126f4 <strerror@plt>
   1b70c:	ldr	r1, [pc, #132]	; 1b798 <next@@Base+0x1f78>
   1b710:	mov	r3, r0
   1b714:	mov	r0, r4
   1b718:	add	r1, pc, r1
   1b71c:	mov	r2, r5
   1b720:	bl	1273c <fprintf@plt>
   1b724:	sub	sp, fp, #28
   1b728:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b72c:	strbvs	r6, [r3, -r1, ror #8]!
   1b730:	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
   1b734:	andeq	r6, r1, r4, ror r6
   1b738:	andeq	r6, r1, r4, ror r6
   1b73c:	andeq	r5, r1, r0, lsl r0
   1b740:	andeq	r3, r0, fp, lsl #23
   1b744:	andeq	r4, r1, r8, lsl #31
   1b748:	andeq	r6, r1, r0, asr #11
   1b74c:	andeq	r6, r1, r4, asr #11
   1b750:			; <UNDEFINED> instruction: 0x000165b0
   1b754:			; <UNDEFINED> instruction: 0x000165b0
   1b758:	andeq	r6, r1, r4, lsl #11
   1b75c:	andeq	r6, r1, r4, ror r4
   1b760:	andeq	r6, r1, r8, lsl #9
   1b764:	strdeq	r4, [r1], -r8
   1b768:	andeq	r4, r1, r0, asr #21
   1b76c:	andeq	r6, r1, ip, ror r1
   1b770:	andeq	r3, r0, r5, lsl r8
   1b774:	andeq	r6, r1, r0, ror #2
   1b778:	andeq	r6, r1, r0, asr #2
   1b77c:	andeq	r6, r1, r4, lsl #2
   1b780:	andeq	r6, r1, r4, lsr #12
   1b784:	andeq	r3, r0, pc, asr fp
   1b788:	andeq	r6, r1, r4, lsl #12
   1b78c:	strdeq	r6, [r1], -r0
   1b790:	andeq	r4, r1, r8, lsl sl
   1b794:	ldrdeq	r6, [r1], -r4
   1b798:	andeq	r3, r0, r3, lsl r6
   1b79c:	andeq	r6, r1, r4, asr r5
   1b7a0:	andeq	r6, r1, r0, asr #10
   1b7a4:	andeq	r6, r1, r0, lsr r5
   1b7a8:	andeq	r6, r1, r8, lsl #8
   1b7ac:	andeq	r6, r1, ip, asr #9
   1b7b0:	andeq	r6, r1, r8, asr #9
   1b7b4:			; <UNDEFINED> instruction: 0x000163bc
   1b7b8:	andeq	r6, r1, ip, asr #4
   1b7bc:	andeq	r6, r1, ip, ror #6
   1b7c0:	andeq	r6, r1, r0, asr r3
   1b7c4:	andeq	r6, r1, r8, asr #6
   1b7c8:			; <UNDEFINED> instruction: 0x000162bc
   1b7cc:	andeq	r6, r1, ip, ror #4
   1b7d0:	andeq	r6, r1, ip, ror #4
   1b7d4:	ldr	r0, [r0]
   1b7d8:	cmn	r0, #1
   1b7dc:	beq	1b7fc <next@@Base+0x1fdc>
   1b7e0:	ldr	r0, [r1, r0, lsl #2]
   1b7e4:	cmp	r0, #0
   1b7e8:	bxeq	lr
   1b7ec:	ldrd	r2, [r0]
   1b7f0:	adds	r2, r2, #1
   1b7f4:	adc	r3, r3, #0
   1b7f8:	strd	r2, [r0]
   1b7fc:	bx	lr
   1b800:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b804:	add	fp, sp, #28
   1b808:	sub	sp, sp, #12
   1b80c:	ldr	r7, [pc, #2008]	; 1bfec <next@@Base+0x27cc>
   1b810:	mov	sl, #2
   1b814:	cmp	r3, #0
   1b818:	movne	sl, #3
   1b81c:	ldr	r7, [pc, r7]
   1b820:	cmp	r7, #0
   1b824:	beq	1bfe4 <next@@Base+0x27c4>
   1b828:	stm	sp, {r0, r2, r3}
   1b82c:	ldr	r0, [pc, #1980]	; 1bff0 <next@@Base+0x27d0>
   1b830:	mov	r5, r1
   1b834:	add	r0, pc, r0
   1b838:	ldrb	r0, [r0]
   1b83c:	ldr	r8, [pc, #1968]	; 1bff4 <next@@Base+0x27d4>
   1b840:	cmp	r0, #1
   1b844:	add	r8, pc, r8
   1b848:	bne	1b8cc <next@@Base+0x20ac>
   1b84c:	ldr	r4, [pc, #1956]	; 1bff8 <next@@Base+0x27d8>
   1b850:	ldr	r0, [r8, #4]
   1b854:	ldr	r1, [pc, #1952]	; 1bffc <next@@Base+0x27dc>
   1b858:	add	r4, pc, r4
   1b85c:	ldr	r1, [pc, r1]
   1b860:	ldr	r7, [r4, #4]
   1b864:	ldr	r6, [pc, #1940]	; 1c000 <next@@Base+0x27e0>
   1b868:	adds	r2, r1, #4
   1b86c:	adc	r3, r0, #0
   1b870:	ldr	r6, [pc, r6]
   1b874:	subs	r2, r6, r2
   1b878:	sbcs	r2, r7, r3
   1b87c:	bcs	1b8cc <next@@Base+0x20ac>
   1b880:	mov	r2, #7
   1b884:	orr	r2, r2, #131072	; 0x20000
   1b888:	adds	r1, r2, r1
   1b88c:	adc	r0, r0, #0
   1b890:	subs	r1, r1, #4
   1b894:	sbc	r0, r0, #0
   1b898:	mvn	r2, #0
   1b89c:	and	r7, r0, r2
   1b8a0:	mov	r0, #16646144	; 0xfe0000
   1b8a4:	orr	r0, r0, #-16777216	; 0xff000000
   1b8a8:	ldr	r9, [pc, #1876]	; 1c004 <next@@Base+0x27e4>
   1b8ac:	and	r6, r1, r0
   1b8b0:	ldr	r0, [pc, #1872]	; 1c008 <next@@Base+0x27e8>
   1b8b4:	mov	r1, r6
   1b8b8:	add	r9, pc, r9
   1b8bc:	ldr	r0, [pc, r0]
   1b8c0:	bl	126ac <realloc@plt>
   1b8c4:	strd	r6, [r4]
   1b8c8:	str	r0, [r9]
   1b8cc:	ldr	r7, [pc, #1848]	; 1c00c <next@@Base+0x27ec>
   1b8d0:	mov	r0, #0
   1b8d4:	mov	r2, #1
   1b8d8:	ldr	r7, [pc, r7]
   1b8dc:	ldr	ip, [pc, #1836]	; 1c010 <next@@Base+0x27f0>
   1b8e0:	adds	r4, r7, #4
   1b8e4:	ldr	ip, [pc, ip]
   1b8e8:	ldr	r6, [r8, #4]
   1b8ec:	mov	r1, ip
   1b8f0:	adc	r9, r6, #0
   1b8f4:	strb	r0, [r1, r7]!
   1b8f8:	cmp	r5, #0
   1b8fc:	strb	r2, [r1, #3]
   1b900:	strb	r0, [r1, #2]
   1b904:	strb	r0, [r1, #1]
   1b908:	stm	r8, {r4, r9}
   1b90c:	mov	r8, r5
   1b910:	beq	1b92c <next@@Base+0x210c>
   1b914:	mov	r0, r8
   1b918:	mov	r5, ip
   1b91c:	bl	12724 <strlen@plt>
   1b920:	add	r0, sl, r0, lsr #2
   1b924:	mov	ip, r5
   1b928:	add	sl, r0, #2
   1b92c:	ldr	r0, [pc, #1760]	; 1c014 <next@@Base+0x27f4>
   1b930:	add	r0, pc, r0
   1b934:	ldrb	r0, [r0]
   1b938:	cmp	r0, #0
   1b93c:	beq	1ba18 <next@@Base+0x21f8>
   1b940:	ldr	lr, [pc, #1748]	; 1c01c <next@@Base+0x27fc>
   1b944:	adds	r0, r7, #8
   1b948:	adc	r1, r6, #0
   1b94c:	add	lr, pc, lr
   1b950:	ldr	r2, [lr, #4]
   1b954:	ldr	r3, [pc, #1732]	; 1c020 <next@@Base+0x2800>
   1b958:	ldr	r3, [pc, r3]
   1b95c:	subs	r0, r3, r0
   1b960:	sbcs	r0, r2, r1
   1b964:	bcs	1ba84 <next@@Base+0x2264>
   1b968:	mov	r0, #7
   1b96c:	orr	r0, r0, #131072	; 0x20000
   1b970:	adds	r0, r7, r0
   1b974:	adc	r1, r6, #0
   1b978:	mvn	r2, #0
   1b97c:	and	r5, r1, r2
   1b980:	mov	r1, #16646144	; 0xfe0000
   1b984:	orr	r1, r1, #-16777216	; 0xff000000
   1b988:	and	r6, r0, r1
   1b98c:	ldr	r4, [pc, #1684]	; 1c028 <next@@Base+0x2808>
   1b990:	mov	r0, ip
   1b994:	mov	r1, r6
   1b998:	add	r4, pc, r4
   1b99c:	mov	r7, lr
   1b9a0:	bl	126ac <realloc@plt>
   1b9a4:	mov	lr, r7
   1b9a8:	mov	ip, r0
   1b9ac:	str	r6, [lr]
   1b9b0:	str	r5, [lr, #4]
   1b9b4:	str	ip, [r4]
   1b9b8:	ldr	r1, [pc, #1644]	; 1c02c <next@@Base+0x280c>
   1b9bc:	lsr	r0, sl, #24
   1b9c0:	add	r1, pc, r1
   1b9c4:	lsr	r3, sl, #16
   1b9c8:	ldrb	r2, [r1]
   1b9cc:	ldr	r1, [pc, #1628]	; 1c030 <next@@Base+0x2810>
   1b9d0:	add	r1, pc, r1
   1b9d4:	mov	r7, r1
   1b9d8:	ldr	r9, [r1, #4]
   1b9dc:	ldr	r4, [pc, #1616]	; 1c034 <next@@Base+0x2814>
   1b9e0:	mov	r1, ip
   1b9e4:	ldr	r4, [pc, r4]
   1b9e8:	strb	sl, [r1, r4]!
   1b9ec:	strb	r0, [r1, #3]
   1b9f0:	lsr	r0, sl, #8
   1b9f4:	strb	r0, [r1, #1]
   1b9f8:	adds	r0, r4, #4
   1b9fc:	strb	r3, [r1, #2]
   1ba00:	adc	r1, r9, #0
   1ba04:	mov	sl, r7
   1ba08:	cmp	r2, #1
   1ba0c:	strd	r0, [sl]
   1ba10:	bne	1ba4c <next@@Base+0x222c>
   1ba14:	b	1bab8 <next@@Base+0x2298>
   1ba18:	mov	r3, ip
   1ba1c:	lsr	r0, sl, #24
   1ba20:	strb	sl, [r3, r4]!
   1ba24:	lsr	r1, sl, #16
   1ba28:	lsr	r2, sl, #8
   1ba2c:	strb	r0, [r3, #3]
   1ba30:	strb	r1, [r3, #2]
   1ba34:	strb	r2, [r3, #1]
   1ba38:	ldr	sl, [pc, #1496]	; 1c018 <next@@Base+0x27f8>
   1ba3c:	adds	r0, r7, #8
   1ba40:	adc	r1, r6, #0
   1ba44:	add	sl, pc, sl
   1ba48:	strd	r0, [sl]
   1ba4c:	ldr	r5, [sp]
   1ba50:	mov	r6, ip
   1ba54:	lsr	r2, r5, #24
   1ba58:	strb	r5, [r6, r0]!
   1ba5c:	lsr	r3, r5, #16
   1ba60:	lsr	r7, r5, #8
   1ba64:	strb	r2, [r6, #3]
   1ba68:	strb	r3, [r6, #2]
   1ba6c:	strb	r7, [r6, #1]
   1ba70:	adds	r2, r0, #4
   1ba74:	adc	r3, r1, #0
   1ba78:	ldmib	sp, {r5, r9}
   1ba7c:	strd	r2, [sl]
   1ba80:	b	1bc2c <next@@Base+0x240c>
   1ba84:	mov	r3, ip
   1ba88:	lsr	r0, sl, #24
   1ba8c:	strb	sl, [r3, r4]!
   1ba90:	lsr	r1, sl, #16
   1ba94:	lsr	r2, sl, #8
   1ba98:	strb	r0, [r3, #3]
   1ba9c:	strb	r1, [r3, #2]
   1baa0:	strb	r2, [r3, #1]
   1baa4:	ldr	sl, [pc, #1400]	; 1c024 <next@@Base+0x2804>
   1baa8:	adds	r0, r7, #8
   1baac:	adc	r1, r6, #0
   1bab0:	add	sl, pc, sl
   1bab4:	strd	r0, [sl]
   1bab8:	ldr	r7, [lr, #4]
   1babc:	ldr	r6, [pc, #1396]	; 1c038 <next@@Base+0x2818>
   1bac0:	adds	r2, r4, #8
   1bac4:	adc	r3, r9, #0
   1bac8:	ldr	r6, [pc, r6]
   1bacc:	subs	r2, r6, r2
   1bad0:	sbcs	r2, r7, r3
   1bad4:	bcs	1bb7c <next@@Base+0x235c>
   1bad8:	mov	r0, #7
   1badc:	orr	r0, r0, #131072	; 0x20000
   1bae0:	adds	r0, r4, r0
   1bae4:	adc	r1, r9, #0
   1bae8:	mvn	r2, #0
   1baec:	and	r5, r1, r2
   1baf0:	mov	r1, #16646144	; 0xfe0000
   1baf4:	orr	r1, r1, #-16777216	; 0xff000000
   1baf8:	and	r4, r0, r1
   1bafc:	ldr	r7, [pc, #1336]	; 1c03c <next@@Base+0x281c>
   1bb00:	mov	r0, ip
   1bb04:	mov	r1, r4
   1bb08:	add	r7, pc, r7
   1bb0c:	mov	r6, lr
   1bb10:	bl	126ac <realloc@plt>
   1bb14:	mov	lr, r6
   1bb18:	str	r0, [r7]
   1bb1c:	strd	r4, [lr]
   1bb20:	mov	ip, r0
   1bb24:	ldr	r6, [sp]
   1bb28:	ldr	r0, [pc, #1296]	; 1c040 <next@@Base+0x2820>
   1bb2c:	ldr	r1, [sl, #4]
   1bb30:	mov	r3, ip
   1bb34:	add	r0, pc, r0
   1bb38:	lsr	r2, r6, #24
   1bb3c:	ldrb	r7, [r0]
   1bb40:	ldr	r0, [pc, #1276]	; 1c044 <next@@Base+0x2824>
   1bb44:	ldr	r0, [pc, r0]
   1bb48:	strb	r6, [r3, r0]!
   1bb4c:	ldmib	sp, {r5, r9}
   1bb50:	strb	r2, [r3, #3]
   1bb54:	lsr	r2, r6, #8
   1bb58:	lsr	r6, r6, #16
   1bb5c:	strb	r2, [r3, #1]
   1bb60:	adds	r2, r0, #4
   1bb64:	strb	r6, [r3, #2]
   1bb68:	adc	r3, r1, #0
   1bb6c:	cmp	r7, #1
   1bb70:	strd	r2, [sl]
   1bb74:	beq	1bbb0 <next@@Base+0x2390>
   1bb78:	b	1bc2c <next@@Base+0x240c>
   1bb7c:	ldr	r5, [sp]
   1bb80:	mov	r6, ip
   1bb84:	lsr	r2, r5, #24
   1bb88:	strb	r5, [r6, r0]!
   1bb8c:	lsr	r3, r5, #16
   1bb90:	lsr	r7, r5, #8
   1bb94:	strb	r2, [r6, #3]
   1bb98:	strb	r3, [r6, #2]
   1bb9c:	strb	r7, [r6, #1]
   1bba0:	adds	r2, r0, #4
   1bba4:	adc	r3, r1, #0
   1bba8:	ldmib	sp, {r5, r9}
   1bbac:	strd	r2, [sl]
   1bbb0:	str	r8, [sp, #8]
   1bbb4:	mov	r8, lr
   1bbb8:	adds	r7, r0, #8
   1bbbc:	ldr	r6, [r8, #4]
   1bbc0:	ldr	r4, [pc, #1152]	; 1c048 <next@@Base+0x2828>
   1bbc4:	adc	lr, r1, #0
   1bbc8:	ldr	r4, [pc, r4]
   1bbcc:	subs	r7, r4, r7
   1bbd0:	sbcs	r7, r6, lr
   1bbd4:	bcs	1bc28 <next@@Base+0x2408>
   1bbd8:	mov	r2, #7
   1bbdc:	orr	r2, r2, #131072	; 0x20000
   1bbe0:	adds	r0, r0, r2
   1bbe4:	adc	r1, r1, #0
   1bbe8:	mvn	r2, #0
   1bbec:	and	r7, r1, r2
   1bbf0:	mov	r1, #16646144	; 0xfe0000
   1bbf4:	orr	r1, r1, #-16777216	; 0xff000000
   1bbf8:	and	r6, r0, r1
   1bbfc:	ldr	r4, [pc, #1096]	; 1c04c <next@@Base+0x282c>
   1bc00:	mov	r0, ip
   1bc04:	mov	r1, r6
   1bc08:	add	r4, pc, r4
   1bc0c:	bl	126ac <realloc@plt>
   1bc10:	strd	r6, [r8]
   1bc14:	str	r0, [r4]
   1bc18:	ldr	r3, [sl, #4]
   1bc1c:	ldr	r2, [pc, #1068]	; 1c050 <next@@Base+0x2830>
   1bc20:	mov	ip, r0
   1bc24:	ldr	r2, [pc, r2]
   1bc28:	ldr	r8, [sp, #8]
   1bc2c:	mov	r6, ip
   1bc30:	lsr	r7, r5, #8
   1bc34:	strb	r5, [r6, r2]!
   1bc38:	adds	r4, r2, #4
   1bc3c:	lsr	r0, r5, #24
   1bc40:	lsr	r1, r5, #16
   1bc44:	strb	r7, [r6, #1]
   1bc48:	adc	r7, r3, #0
   1bc4c:	cmp	r9, #0
   1bc50:	strb	r0, [r6, #3]
   1bc54:	strb	r1, [r6, #2]
   1bc58:	stm	sl, {r4, r7}
   1bc5c:	beq	1bd30 <next@@Base+0x2510>
   1bc60:	ldr	r0, [pc, #1004]	; 1c054 <next@@Base+0x2834>
   1bc64:	ldr	sl, [fp, #8]
   1bc68:	add	r0, pc, r0
   1bc6c:	ldrb	r0, [r0]
   1bc70:	cmp	r0, #1
   1bc74:	bne	1bcfc <next@@Base+0x24dc>
   1bc78:	ldr	r9, [pc, #984]	; 1c058 <next@@Base+0x2838>
   1bc7c:	adds	r0, r2, #8
   1bc80:	adc	r1, r3, #0
   1bc84:	add	r9, pc, r9
   1bc88:	ldr	r6, [r9, #4]
   1bc8c:	ldr	r5, [pc, #968]	; 1c05c <next@@Base+0x283c>
   1bc90:	ldr	r5, [pc, r5]
   1bc94:	subs	r0, r5, r0
   1bc98:	sbcs	r0, r6, r1
   1bc9c:	bcs	1bcfc <next@@Base+0x24dc>
   1bca0:	mov	r0, #7
   1bca4:	orr	r0, r0, #131072	; 0x20000
   1bca8:	adds	r0, r2, r0
   1bcac:	adc	r1, r3, #0
   1bcb0:	mvn	r2, #0
   1bcb4:	and	r5, r1, r2
   1bcb8:	mov	r1, #16646144	; 0xfe0000
   1bcbc:	orr	r1, r1, #-16777216	; 0xff000000
   1bcc0:	and	r6, r0, r1
   1bcc4:	ldr	r4, [pc, #916]	; 1c060 <next@@Base+0x2840>
   1bcc8:	mov	r0, ip
   1bccc:	mov	r1, r6
   1bcd0:	add	r4, pc, r4
   1bcd4:	bl	126ac <realloc@plt>
   1bcd8:	str	r6, [r9]
   1bcdc:	str	r5, [r9, #4]
   1bce0:	mov	ip, r0
   1bce4:	ldr	r0, [pc, #888]	; 1c064 <next@@Base+0x2844>
   1bce8:	str	ip, [r4]
   1bcec:	add	r0, pc, r0
   1bcf0:	ldr	r7, [r0, #4]
   1bcf4:	ldr	r4, [pc, #876]	; 1c068 <next@@Base+0x2848>
   1bcf8:	ldr	r4, [pc, r4]
   1bcfc:	mov	r3, ip
   1bd00:	lsr	r0, sl, #24
   1bd04:	strb	sl, [r3, r4]!
   1bd08:	lsr	r1, sl, #16
   1bd0c:	lsr	r2, sl, #8
   1bd10:	strb	r0, [r3, #3]
   1bd14:	strb	r1, [r3, #2]
   1bd18:	strb	r2, [r3, #1]
   1bd1c:	ldr	sl, [pc, #840]	; 1c06c <next@@Base+0x284c>
   1bd20:	adds	r4, r4, #4
   1bd24:	adc	r7, r7, #0
   1bd28:	add	sl, pc, sl
   1bd2c:	stm	sl, {r4, r7}
   1bd30:	cmp	r8, #0
   1bd34:	beq	1bfe4 <next@@Base+0x27c4>
   1bd38:	mov	r0, r8
   1bd3c:	mov	r9, ip
   1bd40:	bl	12724 <strlen@plt>
   1bd44:	mov	r6, #1
   1bd48:	add	r5, r6, r0, lsr #2
   1bd4c:	ldr	r0, [pc, #796]	; 1c070 <next@@Base+0x2850>
   1bd50:	add	r0, pc, r0
   1bd54:	ldrb	r0, [r0]
   1bd58:	cmp	r0, #1
   1bd5c:	bne	1be00 <next@@Base+0x25e0>
   1bd60:	ldr	sl, [pc, #780]	; 1c074 <next@@Base+0x2854>
   1bd64:	adds	r0, r4, #4
   1bd68:	adc	r1, r7, #0
   1bd6c:	add	sl, pc, sl
   1bd70:	ldr	r2, [sl, #4]
   1bd74:	ldr	r3, [pc, #764]	; 1c078 <next@@Base+0x2858>
   1bd78:	ldr	r3, [pc, r3]
   1bd7c:	subs	r0, r3, r0
   1bd80:	sbcs	r0, r2, r1
   1bd84:	bcs	1be14 <next@@Base+0x25f4>
   1bd88:	mov	r0, #0
   1bd8c:	str	r0, [sp, #8]
   1bd90:	mov	r0, #7
   1bd94:	orr	r0, r0, #131072	; 0x20000
   1bd98:	adds	r0, r0, r4
   1bd9c:	adc	r1, r7, #0
   1bda0:	subs	r0, r0, #4
   1bda4:	sbc	r1, r1, #0
   1bda8:	mvn	r2, #0
   1bdac:	and	r7, r1, r2
   1bdb0:	mov	r1, #16646144	; 0xfe0000
   1bdb4:	orr	r1, r1, #-16777216	; 0xff000000
   1bdb8:	and	r4, r0, r1
   1bdbc:	ldr	r6, [pc, #700]	; 1c080 <next@@Base+0x2860>
   1bdc0:	mov	r0, r9
   1bdc4:	mov	r1, r4
   1bdc8:	add	r6, pc, r6
   1bdcc:	bl	126ac <realloc@plt>
   1bdd0:	stm	sl, {r4, r7}
   1bdd4:	str	r0, [r6]
   1bdd8:	ldr	sl, [pc, #676]	; 1c084 <next@@Base+0x2864>
   1bddc:	mov	r3, r0
   1bde0:	add	sl, pc, sl
   1bde4:	ldr	r7, [sl, #4]
   1bde8:	ldr	r0, [pc, #664]	; 1c088 <next@@Base+0x2868>
   1bdec:	add	r0, pc, r0
   1bdf0:	ldrb	r6, [r0]
   1bdf4:	ldr	r4, [pc, #656]	; 1c08c <next@@Base+0x286c>
   1bdf8:	ldr	r4, [pc, r4]
   1bdfc:	b	1be28 <next@@Base+0x2608>
   1be00:	mov	r0, #0
   1be04:	str	r0, [sp, #8]
   1be08:	mov	r6, #0
   1be0c:	mov	r3, r9
   1be10:	b	1be28 <next@@Base+0x2608>
   1be14:	mov	r0, #0
   1be18:	str	r0, [sp, #8]
   1be1c:	ldr	sl, [pc, #600]	; 1c07c <next@@Base+0x285c>
   1be20:	mov	r3, r9
   1be24:	add	sl, pc, sl
   1be28:	mov	r9, r3
   1be2c:	strb	r5, [r3, r4]!
   1be30:	lsr	r0, r5, #24
   1be34:	adds	r4, r4, #4
   1be38:	lsr	r1, r5, #16
   1be3c:	lsr	r2, r5, #8
   1be40:	strb	r0, [r3, #3]
   1be44:	mov	r0, r8
   1be48:	adc	r5, r7, #0
   1be4c:	strb	r1, [r3, #2]
   1be50:	strb	r2, [r3, #1]
   1be54:	strd	r4, [sl]
   1be58:	bl	12724 <strlen@plt>
   1be5c:	mov	r7, r0
   1be60:	cmp	r6, #0
   1be64:	beq	1bf00 <next@@Base+0x26e0>
   1be68:	ldr	r6, [pc, #544]	; 1c090 <next@@Base+0x2870>
   1be6c:	adds	r0, r4, r7
   1be70:	adc	r1, r5, #0
   1be74:	add	r6, pc, r6
   1be78:	ldr	r2, [r6, #4]
   1be7c:	ldr	r3, [pc, #528]	; 1c094 <next@@Base+0x2874>
   1be80:	ldr	r3, [pc, r3]
   1be84:	subs	r3, r3, r0
   1be88:	sbcs	r2, r2, r1
   1be8c:	bcs	1bef8 <next@@Base+0x26d8>
   1be90:	mov	r2, #7
   1be94:	orr	r2, r2, #131072	; 0x20000
   1be98:	adds	r0, r2, r0
   1be9c:	adc	r1, r1, #0
   1bea0:	subs	r0, r0, #8
   1bea4:	sbc	r1, r1, #0
   1bea8:	mvn	r2, #0
   1beac:	and	r5, r1, r2
   1beb0:	mov	r1, #16646144	; 0xfe0000
   1beb4:	orr	r1, r1, #-16777216	; 0xff000000
   1beb8:	and	r4, r0, r1
   1bebc:	mov	r0, r9
   1bec0:	mov	r1, r4
   1bec4:	bl	126ac <realloc@plt>
   1bec8:	strd	r4, [r6]
   1becc:	ldr	r1, [pc, #452]	; 1c098 <next@@Base+0x2878>
   1bed0:	ldr	r5, [sl, #4]
   1bed4:	add	r1, pc, r1
   1bed8:	str	r0, [r1]
   1bedc:	ldr	r1, [pc, #440]	; 1c09c <next@@Base+0x287c>
   1bee0:	add	r1, pc, r1
   1bee4:	ldrb	r1, [r1]
   1bee8:	str	r1, [sp, #8]
   1beec:	ldr	r4, [pc, #428]	; 1c0a0 <next@@Base+0x2880>
   1bef0:	ldr	r4, [pc, r4]
   1bef4:	b	1bf04 <next@@Base+0x26e4>
   1bef8:	mov	r0, #1
   1befc:	str	r0, [sp, #8]
   1bf00:	mov	r0, r9
   1bf04:	mov	r9, r0
   1bf08:	add	r0, r0, r4
   1bf0c:	mov	r1, r8
   1bf10:	mov	r2, r7
   1bf14:	bl	12664 <memcpy@plt>
   1bf18:	adds	r6, r4, r7
   1bf1c:	mov	r0, r8
   1bf20:	adc	r5, r5, #0
   1bf24:	str	r6, [sl]
   1bf28:	str	r5, [sl, #4]
   1bf2c:	bl	12724 <strlen@plt>
   1bf30:	and	r0, r0, #3
   1bf34:	rsb	r4, r0, #4
   1bf38:	ldr	r0, [sp, #8]
   1bf3c:	cmp	r0, #0
   1bf40:	beq	1bfc8 <next@@Base+0x27a8>
   1bf44:	ldr	r7, [pc, #344]	; 1c0a4 <next@@Base+0x2884>
   1bf48:	adds	r0, r6, r4
   1bf4c:	adc	r1, r5, #0
   1bf50:	add	r7, pc, r7
   1bf54:	ldr	r2, [r7, #4]
   1bf58:	ldr	r3, [pc, #328]	; 1c0a8 <next@@Base+0x2888>
   1bf5c:	ldr	r3, [pc, r3]
   1bf60:	subs	r3, r3, r0
   1bf64:	sbcs	r2, r2, r1
   1bf68:	bcs	1bfc8 <next@@Base+0x27a8>
   1bf6c:	mov	r2, #7
   1bf70:	orr	r2, r2, #131072	; 0x20000
   1bf74:	adds	r0, r2, r0
   1bf78:	adc	r1, r1, #0
   1bf7c:	subs	r0, r0, #8
   1bf80:	sbc	r1, r1, #0
   1bf84:	mvn	r2, #0
   1bf88:	and	r5, r1, r2
   1bf8c:	mov	r1, #16646144	; 0xfe0000
   1bf90:	orr	r1, r1, #-16777216	; 0xff000000
   1bf94:	and	r6, r0, r1
   1bf98:	ldr	r8, [pc, #268]	; 1c0ac <next@@Base+0x288c>
   1bf9c:	mov	r0, r9
   1bfa0:	mov	r1, r6
   1bfa4:	add	r8, pc, r8
   1bfa8:	bl	126ac <realloc@plt>
   1bfac:	str	r6, [r7]
   1bfb0:	str	r5, [r7, #4]
   1bfb4:	str	r0, [r8]
   1bfb8:	ldr	r5, [sl, #4]
   1bfbc:	ldr	r6, [pc, #236]	; 1c0b0 <next@@Base+0x2890>
   1bfc0:	mov	r9, r0
   1bfc4:	ldr	r6, [pc, r6]
   1bfc8:	add	r0, r9, r6
   1bfcc:	mov	r1, #0
   1bfd0:	mov	r2, r4
   1bfd4:	bl	1276c <memset@plt>
   1bfd8:	adds	r0, r6, r4
   1bfdc:	adc	r1, r5, #0
   1bfe0:	strd	r0, [sl]
   1bfe4:	sub	sp, fp, #28
   1bfe8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bfec:	andeq	r5, r1, r4, asr #31
   1bff0:	andeq	r5, r1, r8, lsr #31
   1bff4:	andeq	r5, r1, ip, lsr #31
   1bff8:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1bffc:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1c000:	andeq	r5, r1, r8, ror pc
   1c004:	andeq	r5, r1, ip, lsr #30
   1c008:	andeq	r5, r1, r8, lsr #30
   1c00c:	andeq	r5, r1, r8, lsl pc
   1c010:	andeq	r5, r1, r0, lsl #30
   1c014:	andeq	r5, r1, ip, lsr #29
   1c018:	andeq	r5, r1, ip, lsr #27
   1c01c:	muleq	r1, ip, lr
   1c020:	muleq	r1, r0, lr
   1c024:	andeq	r5, r1, r0, asr #26
   1c028:	andeq	r5, r1, ip, asr #28
   1c02c:	andeq	r5, r1, ip, lsl lr
   1c030:	andeq	r5, r1, r0, lsr #28
   1c034:	andeq	r5, r1, ip, lsl #28
   1c038:	andeq	r5, r1, r0, lsr #26
   1c03c:	ldrdeq	r5, [r1], -ip
   1c040:	andeq	r5, r1, r8, lsr #25
   1c044:	andeq	r5, r1, ip, lsr #25
   1c048:	andeq	r5, r1, r0, lsr #24
   1c04c:	ldrdeq	r5, [r1], -ip
   1c050:	andeq	r5, r1, ip, asr #23
   1c054:	andeq	r5, r1, r4, ror fp
   1c058:	andeq	r5, r1, r4, ror #22
   1c05c:	andeq	r5, r1, r8, asr fp
   1c060:	andeq	r5, r1, r4, lsl fp
   1c064:	andeq	r5, r1, r4, lsl #22
   1c068:	strdeq	r5, [r1], -r8
   1c06c:	andeq	r5, r1, r8, asr #21
   1c070:	andeq	r5, r1, ip, lsl #21
   1c074:	andeq	r5, r1, ip, ror sl
   1c078:	andeq	r5, r1, r0, ror sl
   1c07c:	andeq	r5, r1, ip, asr #19
   1c080:	andeq	r5, r1, ip, lsl sl
   1c084:	andeq	r5, r1, r0, lsl sl
   1c088:	strdeq	r5, [r1], -r0
   1c08c:	strdeq	r5, [r1], -r8
   1c090:	andeq	r5, r1, r4, ror r9
   1c094:	andeq	r5, r1, r8, ror #18
   1c098:	andeq	r5, r1, r0, lsl r9
   1c09c:	strdeq	r5, [r1], -ip
   1c0a0:	andeq	r5, r1, r0, lsl #18
   1c0a4:	muleq	r1, r8, r8
   1c0a8:	andeq	r5, r1, ip, lsl #17
   1c0ac:	andeq	r5, r1, r0, asr #16
   1c0b0:	andeq	r5, r1, ip, lsr #16
   1c0b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0b8:	add	fp, sp, #28
   1c0bc:	sub	sp, sp, #28
   1c0c0:	mov	ip, r0
   1c0c4:	ldr	r0, [pc, #1740]	; 1c798 <next@@Base+0x2f78>
   1c0c8:	ldr	r0, [pc, r0]
   1c0cc:	cmp	r0, #0
   1c0d0:	beq	1c1ec <next@@Base+0x29cc>
   1c0d4:	ldr	r5, [pc, #1728]	; 1c79c <next@@Base+0x2f7c>
   1c0d8:	mov	sl, r1
   1c0dc:	add	r5, pc, r5
   1c0e0:	ldr	r3, [r5, #4]
   1c0e4:	ldr	r4, [pc, #1716]	; 1c7a0 <next@@Base+0x2f80>
   1c0e8:	ldr	r4, [pc, r4]
   1c0ec:	ldr	r6, [pc, #1712]	; 1c7a4 <next@@Base+0x2f84>
   1c0f0:	add	r6, pc, r6
   1c0f4:	ldrb	r0, [r6]
   1c0f8:	cmp	r0, #0
   1c0fc:	beq	1c1f4 <next@@Base+0x29d4>
   1c100:	ldr	r8, [pc, #1732]	; 1c7cc <next@@Base+0x2fac>
   1c104:	mov	r5, #10551296	; 0xa10000
   1c108:	adds	r9, r4, #4
   1c10c:	add	r8, pc, r8
   1c110:	adc	r2, r3, #0
   1c114:	ldr	r0, [r8, #4]
   1c118:	ldr	r1, [pc, #1712]	; 1c7d0 <next@@Base+0x2fb0>
   1c11c:	orr	r5, r5, #16777216	; 0x1000000
   1c120:	ldr	r1, [pc, r1]
   1c124:	subs	r1, r1, r9
   1c128:	sbcs	r0, r0, r2
   1c12c:	bcs	1c2f8 <next@@Base+0x2ad8>
   1c130:	mov	r0, #3
   1c134:	orr	r0, r0, #131072	; 0x20000
   1c138:	adds	r0, r4, r0
   1c13c:	adc	r1, r3, #0
   1c140:	mvn	r2, #0
   1c144:	and	r9, r1, r2
   1c148:	mov	r1, #16646144	; 0xfe0000
   1c14c:	orr	r1, r1, #-16777216	; 0xff000000
   1c150:	and	r4, r0, r1
   1c154:	ldr	r0, [pc, #1664]	; 1c7dc <next@@Base+0x2fbc>
   1c158:	mov	r1, r4
   1c15c:	mov	r7, ip
   1c160:	ldr	r0, [pc, r0]
   1c164:	bl	126ac <realloc@plt>
   1c168:	ldr	ip, [pc, #1648]	; 1c7e0 <next@@Base+0x2fc0>
   1c16c:	ldr	lr, [pc, #1648]	; 1c7e4 <next@@Base+0x2fc4>
   1c170:	stm	r8, {r4, r9}
   1c174:	ldr	r1, [pc, #1644]	; 1c7e8 <next@@Base+0x2fc8>
   1c178:	add	ip, pc, ip
   1c17c:	add	lr, pc, lr
   1c180:	add	r1, pc, r1
   1c184:	mov	r2, r0
   1c188:	str	r2, [r1]
   1c18c:	mov	r6, ip
   1c190:	ldrb	ip, [ip]
   1c194:	ldr	r3, [lr, #4]
   1c198:	ldr	r4, [pc, #1612]	; 1c7ec <next@@Base+0x2fcc>
   1c19c:	lsr	r0, r5, #24
   1c1a0:	mov	r1, r8
   1c1a4:	ldr	r4, [pc, r4]
   1c1a8:	str	r2, [sp, #20]
   1c1ac:	lsl	r8, r7, #1
   1c1b0:	strb	r5, [r2, r4]!
   1c1b4:	adds	r9, r4, #4
   1c1b8:	strb	r0, [r2, #3]
   1c1bc:	lsr	r0, r5, #16
   1c1c0:	strb	r0, [r2, #2]
   1c1c4:	lsr	r0, r5, #8
   1c1c8:	strb	r0, [r2, #1]
   1c1cc:	adc	r5, r3, #0
   1c1d0:	mov	r0, #0
   1c1d4:	cmp	ip, #1
   1c1d8:	str	r3, [sp, #16]
   1c1dc:	str	r9, [lr]
   1c1e0:	str	r5, [lr, #4]
   1c1e4:	beq	1c34c <next@@Base+0x2b2c>
   1c1e8:	b	1c4b0 <next@@Base+0x2c90>
   1c1ec:	sub	sp, fp, #28
   1c1f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c1f4:	ldr	r0, [pc, #1452]	; 1c7a8 <next@@Base+0x2f88>
   1c1f8:	mov	r7, r3
   1c1fc:	mov	r9, #0
   1c200:	ldr	r0, [pc, r0]
   1c204:	str	r0, [sp, #20]
   1c208:	ldrb	r1, [r0, r4]!
   1c20c:	str	r7, [sp, #16]
   1c210:	ldrb	r2, [r0, #1]
   1c214:	ldrb	r3, [r0, #2]
   1c218:	ldrb	r0, [r0, #3]
   1c21c:	orr	r1, r1, r2, lsl #8
   1c220:	orr	r1, r1, r3, lsl #16
   1c224:	adds	r2, r4, #4
   1c228:	orr	r3, r1, r0, lsl #24
   1c22c:	adc	r7, r7, #0
   1c230:	mov	r1, r5
   1c234:	stm	r5, {r2, r7}
   1c238:	mov	r5, #10551296	; 0xa10000
   1c23c:	orr	r5, r5, #16777216	; 0x1000000
   1c240:	cmn	r3, #1
   1c244:	beq	1c3f8 <next@@Base+0x2bd8>
   1c248:	cmp	r3, r5
   1c24c:	bne	1c408 <next@@Base+0x2be8>
   1c250:	str	r7, [sp, #8]
   1c254:	ldr	r0, [sp, #20]
   1c258:	str	r4, [sp, #4]
   1c25c:	mov	r8, r5
   1c260:	ldr	r3, [r0, r2]
   1c264:	ldr	r0, [sp, #16]
   1c268:	adds	r5, r4, #8
   1c26c:	adc	r9, r0, #0
   1c270:	cmn	r3, #1
   1c274:	stm	r1, {r5, r9}
   1c278:	beq	1c414 <next@@Base+0x2bf4>
   1c27c:	lsr	r0, r3, #1
   1c280:	mov	r7, ip
   1c284:	cmp	r0, ip
   1c288:	bne	1c414 <next@@Base+0x2bf4>
   1c28c:	lsl	r0, r7, #3
   1c290:	mov	r4, r2
   1c294:	bl	126dc <malloc@plt>
   1c298:	cmp	r7, #0
   1c29c:	beq	1c43c <next@@Base+0x2c1c>
   1c2a0:	str	r0, [sp, #12]
   1c2a4:	str	r7, [sp, #24]
   1c2a8:	ldr	r2, [sp, #20]
   1c2ac:	ldr	r3, [r2, r5]!
   1c2b0:	adds	r5, r5, #8
   1c2b4:	ldr	r2, [r2, #4]
   1c2b8:	str	r3, [r0]
   1c2bc:	adc	r9, r9, #0
   1c2c0:	str	r2, [r0, #4]
   1c2c4:	add	r0, r0, #8
   1c2c8:	subs	r7, r7, #1
   1c2cc:	bne	1c2a8 <next@@Base+0x2a88>
   1c2d0:	ldr	lr, [pc, #1260]	; 1c7c4 <next@@Base+0x2fa4>
   1c2d4:	add	lr, pc, lr
   1c2d8:	stm	lr, {r5, r9}
   1c2dc:	ldr	ip, [pc, #1252]	; 1c7c8 <next@@Base+0x2fa8>
   1c2e0:	mov	r1, lr
   1c2e4:	ldr	r0, [sp, #12]
   1c2e8:	add	ip, pc, ip
   1c2ec:	mov	r6, ip
   1c2f0:	ldr	ip, [sp, #24]
   1c2f4:	b	1c458 <next@@Base+0x2c38>
   1c2f8:	str	r3, [sp, #16]
   1c2fc:	ldr	r3, [pc, #1232]	; 1c7d4 <next@@Base+0x2fb4>
   1c300:	mov	lr, r5
   1c304:	mov	r7, ip
   1c308:	lsr	ip, r5, #16
   1c30c:	ldr	r3, [pc, r3]
   1c310:	lsr	r1, r5, #8
   1c314:	str	r3, [sp, #20]
   1c318:	strb	lr, [r3, r4]!
   1c31c:	lsr	r0, lr, #24
   1c320:	strb	r1, [r3, #1]
   1c324:	strb	r0, [r3, #3]
   1c328:	strb	ip, [r3, #2]
   1c32c:	ldr	lr, [pc, #1188]	; 1c7d8 <next@@Base+0x2fb8>
   1c330:	lsl	r5, r7, #1
   1c334:	add	lr, pc, lr
   1c338:	mov	r1, r8
   1c33c:	mov	r8, r5
   1c340:	str	r9, [lr]
   1c344:	str	r2, [lr, #4]
   1c348:	mov	r5, r2
   1c34c:	str	r8, [sp, #24]
   1c350:	mov	r8, r1
   1c354:	ldr	r0, [sp, #16]
   1c358:	ldr	r2, [r8, #4]
   1c35c:	ldr	r3, [pc, #1164]	; 1c7f0 <next@@Base+0x2fd0>
   1c360:	adds	ip, r4, #8
   1c364:	adc	r1, r0, #0
   1c368:	mov	r0, #0
   1c36c:	ldr	r3, [pc, r3]
   1c370:	subs	r3, r3, ip
   1c374:	sbcs	r1, r2, r1
   1c378:	bcs	1c3f0 <next@@Base+0x2bd0>
   1c37c:	ldr	r5, [pc, #1136]	; 1c7f4 <next@@Base+0x2fd4>
   1c380:	mov	r0, #3
   1c384:	ldr	r1, [sp, #16]
   1c388:	orr	r0, r0, #131072	; 0x20000
   1c38c:	adds	r0, r0, r4
   1c390:	adc	r1, r1, #0
   1c394:	adds	r0, r0, #4
   1c398:	adc	r1, r1, #0
   1c39c:	mvn	r2, #0
   1c3a0:	and	r9, r1, r2
   1c3a4:	mov	r1, #16646144	; 0xfe0000
   1c3a8:	orr	r1, r1, #-16777216	; 0xff000000
   1c3ac:	and	r4, r0, r1
   1c3b0:	ldr	r0, [sp, #20]
   1c3b4:	mov	r1, r4
   1c3b8:	add	r5, pc, r5
   1c3bc:	bl	126ac <realloc@plt>
   1c3c0:	ldr	ip, [pc, #1072]	; 1c7f8 <next@@Base+0x2fd8>
   1c3c4:	ldr	lr, [pc, #1072]	; 1c7fc <next@@Base+0x2fdc>
   1c3c8:	stm	r8, {r4, r9}
   1c3cc:	add	lr, pc, lr
   1c3d0:	str	r0, [r5]
   1c3d4:	str	r0, [sp, #20]
   1c3d8:	ldr	r5, [lr, #4]
   1c3dc:	ldr	r9, [pc, #1052]	; 1c800 <next@@Base+0x2fe0>
   1c3e0:	add	ip, pc, ip
   1c3e4:	mov	r6, ip
   1c3e8:	mov	r0, #0
   1c3ec:	ldr	r9, [pc, r9]
   1c3f0:	ldr	r8, [sp, #24]
   1c3f4:	b	1c4b0 <next@@Base+0x2c90>
   1c3f8:	mov	r3, r2
   1c3fc:	ldr	r2, [sp, #16]
   1c400:	mov	r0, #0
   1c404:	b	1c470 <next@@Base+0x2c50>
   1c408:	ldr	r1, [pc, #924]	; 1c7ac <next@@Base+0x2f8c>
   1c40c:	add	r1, pc, r1
   1c410:	b	1c41c <next@@Base+0x2bfc>
   1c414:	ldr	r1, [pc, #924]	; 1c7b8 <next@@Base+0x2f98>
   1c418:	add	r1, pc, r1
   1c41c:	ldr	r0, [pc, #908]	; 1c7b0 <next@@Base+0x2f90>
   1c420:	ldr	r0, [pc, r0]
   1c424:	ldr	r0, [r0]
   1c428:	ldr	r2, [pc, #900]	; 1c7b4 <next@@Base+0x2f94>
   1c42c:	ldr	r2, [pc, r2]
   1c430:	sub	sp, fp, #28
   1c434:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c438:	b	1273c <fprintf@plt>
   1c43c:	ldr	lr, [pc, #888]	; 1c7bc <next@@Base+0x2f9c>
   1c440:	ldr	ip, [pc, #888]	; 1c7c0 <next@@Base+0x2fa0>
   1c444:	add	lr, pc, lr
   1c448:	add	ip, pc, ip
   1c44c:	mov	r6, ip
   1c450:	mov	r1, lr
   1c454:	mov	ip, r7
   1c458:	mov	r3, r4
   1c45c:	ldr	r7, [sp, #8]
   1c460:	ldr	r4, [sp, #4]
   1c464:	ldr	r2, [sp, #16]
   1c468:	mov	r9, #0
   1c46c:	mov	r5, r8
   1c470:	mov	lr, r1
   1c474:	mov	r1, #1
   1c478:	str	r4, [lr]
   1c47c:	str	r2, [lr, #4]
   1c480:	ldr	r2, [sp, #20]
   1c484:	lsl	r8, ip, #1
   1c488:	strb	r5, [r2, r4]!
   1c48c:	mov	r5, r7
   1c490:	strb	r1, [r2, #3]
   1c494:	mov	r1, #161	; 0xa1
   1c498:	strb	r9, [r2, #1]
   1c49c:	mov	r9, r3
   1c4a0:	strb	r1, [r2, #2]
   1c4a4:	str	r9, [lr]
   1c4a8:	str	r7, [lr, #4]
   1c4ac:	mov	r7, ip
   1c4b0:	ldr	r3, [sp, #20]
   1c4b4:	lsr	r1, r8, #16
   1c4b8:	mov	ip, r3
   1c4bc:	strb	r8, [r3, r9]!
   1c4c0:	lsr	r4, r8, #24
   1c4c4:	lsr	r2, r8, #8
   1c4c8:	adds	r8, r9, #4
   1c4cc:	strb	r1, [r3, #2]
   1c4d0:	adc	r1, r5, #0
   1c4d4:	cmp	r7, #0
   1c4d8:	strb	r4, [r3, #3]
   1c4dc:	strb	r2, [r3, #1]
   1c4e0:	str	r8, [lr]
   1c4e4:	str	r1, [lr, #4]
   1c4e8:	str	r7, [sp, #24]
   1c4ec:	beq	1c78c <next@@Base+0x2f6c>
   1c4f0:	ldr	r7, [pc, #780]	; 1c804 <next@@Base+0x2fe4>
   1c4f4:	mov	r4, lr
   1c4f8:	mov	r2, r0
   1c4fc:	add	r7, pc, r7
   1c500:	str	r0, [sp, #12]
   1c504:	b	1c5a0 <next@@Base+0x2d80>
   1c508:	mov	r7, ip
   1c50c:	lsr	r2, r4, #24
   1c510:	strb	r4, [r7, r8]!
   1c514:	mov	lr, r6
   1c518:	lsr	r9, r4, #16
   1c51c:	lsr	r6, r4, #8
   1c520:	strb	r2, [r7, #3]
   1c524:	adds	r2, r8, #4
   1c528:	mov	r4, r0
   1c52c:	strb	r9, [r7, #2]
   1c530:	mov	r3, ip
   1c534:	strb	r6, [r7, #1]
   1c538:	adc	r9, r1, #0
   1c53c:	stm	r4, {r2, r9}
   1c540:	mov	ip, r3
   1c544:	lsr	r1, r5, #16
   1c548:	strb	r5, [r3, r2]!
   1c54c:	lsr	r0, r5, #24
   1c550:	lsr	r7, r5, #8
   1c554:	adds	r8, r2, #4
   1c558:	strb	r1, [r3, #2]
   1c55c:	adc	r1, r9, #0
   1c560:	strb	r0, [r3, #3]
   1c564:	strb	r7, [r3, #1]
   1c568:	str	r8, [r4]
   1c56c:	str	r1, [r4, #4]
   1c570:	ldr	r0, [sp, #24]
   1c574:	ldr	r2, [sp, #16]
   1c578:	mov	r6, lr
   1c57c:	subs	r0, r0, #1
   1c580:	str	r0, [sp, #24]
   1c584:	ldr	sl, [sp, #20]
   1c588:	ldr	r0, [sp, #12]
   1c58c:	ldr	r7, [pc, #676]	; 1c838 <next@@Base+0x3018>
   1c590:	add	r2, r2, #8
   1c594:	add	sl, sl, #8
   1c598:	add	r7, pc, r7
   1c59c:	beq	1c78c <next@@Base+0x2f6c>
   1c5a0:	cmp	r0, #0
   1c5a4:	mov	r0, r4
   1c5a8:	str	r2, [sp, #16]
   1c5ac:	beq	1c5b8 <next@@Base+0x2d98>
   1c5b0:	ldrd	r2, [r2]
   1c5b4:	b	1c5c0 <next@@Base+0x2da0>
   1c5b8:	mov	r2, #0
   1c5bc:	mov	r3, #0
   1c5c0:	ldrd	r4, [sl]
   1c5c4:	adds	r4, r4, r2
   1c5c8:	adc	r5, r5, r3
   1c5cc:	strd	r4, [sl]
   1c5d0:	ldrb	r2, [r6]
   1c5d4:	str	sl, [sp, #20]
   1c5d8:	cmp	r2, #0
   1c5dc:	beq	1c508 <next@@Base+0x2ce8>
   1c5e0:	ldr	r3, [r7, #4]
   1c5e4:	ldr	r6, [pc, #540]	; 1c808 <next@@Base+0x2fe8>
   1c5e8:	adds	r2, r8, #4
   1c5ec:	adc	r9, r1, #0
   1c5f0:	ldr	r6, [pc, r6]
   1c5f4:	subs	r2, r6, r2
   1c5f8:	sbcs	r2, r3, r9
   1c5fc:	bcs	1c6a8 <next@@Base+0x2e88>
   1c600:	mov	r2, #3
   1c604:	orr	r2, r2, #131072	; 0x20000
   1c608:	adds	r0, r8, r2
   1c60c:	adc	r1, r1, #0
   1c610:	mvn	r2, #0
   1c614:	and	r8, r1, r2
   1c618:	mov	r1, #16646144	; 0xfe0000
   1c61c:	orr	r1, r1, #-16777216	; 0xff000000
   1c620:	and	r6, r0, r1
   1c624:	mov	r0, ip
   1c628:	mov	r1, r6
   1c62c:	bl	126ac <realloc@plt>
   1c630:	ldr	ip, [pc, #468]	; 1c80c <next@@Base+0x2fec>
   1c634:	ldr	lr, [pc, #468]	; 1c810 <next@@Base+0x2ff0>
   1c638:	stm	r7, {r6, r8}
   1c63c:	mov	r3, r0
   1c640:	ldr	r0, [pc, #460]	; 1c814 <next@@Base+0x2ff4>
   1c644:	add	lr, pc, lr
   1c648:	mov	r9, lr
   1c64c:	add	r0, pc, r0
   1c650:	add	ip, pc, ip
   1c654:	str	r3, [r0]
   1c658:	mov	lr, ip
   1c65c:	ldrb	ip, [ip]
   1c660:	ldr	r1, [r9, #4]
   1c664:	ldr	r8, [pc, #428]	; 1c818 <next@@Base+0x2ff8>
   1c668:	mov	r7, r3
   1c66c:	lsr	r2, r4, #24
   1c670:	ldr	r8, [pc, r8]
   1c674:	lsr	r6, r4, #16
   1c678:	strb	r4, [r7, r8]!
   1c67c:	strb	r2, [r7, #3]
   1c680:	lsr	r2, r4, #8
   1c684:	strb	r2, [r7, #1]
   1c688:	adds	r2, r8, #4
   1c68c:	mov	r4, r9
   1c690:	adc	r9, r1, #0
   1c694:	cmp	ip, #1
   1c698:	strb	r6, [r7, #2]
   1c69c:	stm	r4, {r2, r9}
   1c6a0:	bne	1c540 <next@@Base+0x2d20>
   1c6a4:	b	1c6dc <next@@Base+0x2ebc>
   1c6a8:	mov	r6, ip
   1c6ac:	lsr	r2, r4, #24
   1c6b0:	strb	r4, [r6, r8]!
   1c6b4:	lsr	r9, r4, #16
   1c6b8:	lsr	r7, r4, #8
   1c6bc:	strb	r2, [r6, #3]
   1c6c0:	adds	r2, r8, #4
   1c6c4:	mov	r4, r0
   1c6c8:	strb	r9, [r6, #2]
   1c6cc:	mov	r3, ip
   1c6d0:	strb	r7, [r6, #1]
   1c6d4:	adc	r9, r1, #0
   1c6d8:	stm	r4, {r2, r9}
   1c6dc:	ldr	lr, [pc, #312]	; 1c81c <next@@Base+0x2ffc>
   1c6e0:	mov	r0, r4
   1c6e4:	adds	r7, r8, #8
   1c6e8:	add	lr, pc, lr
   1c6ec:	adc	ip, r1, #0
   1c6f0:	ldr	r4, [lr, #4]
   1c6f4:	ldr	r6, [pc, #292]	; 1c820 <next@@Base+0x3000>
   1c6f8:	ldr	r6, [pc, r6]
   1c6fc:	subs	r7, r6, r7
   1c700:	sbcs	r7, r4, ip
   1c704:	bcs	1c77c <next@@Base+0x2f5c>
   1c708:	mov	r2, #3
   1c70c:	orr	r2, r2, #131072	; 0x20000
   1c710:	adds	r0, r2, r8
   1c714:	adc	r1, r1, #0
   1c718:	adds	r0, r0, #4
   1c71c:	adc	r1, r1, #0
   1c720:	mvn	r2, #0
   1c724:	and	r7, r1, r2
   1c728:	mov	r1, #16646144	; 0xfe0000
   1c72c:	orr	r1, r1, #-16777216	; 0xff000000
   1c730:	and	r6, r0, r1
   1c734:	mov	r0, r3
   1c738:	mov	r1, r6
   1c73c:	mov	r8, lr
   1c740:	bl	126ac <realloc@plt>
   1c744:	ldr	lr, [pc, #220]	; 1c828 <next@@Base+0x3008>
   1c748:	strd	r6, [r8]
   1c74c:	mov	r3, r0
   1c750:	add	lr, pc, lr
   1c754:	mov	r4, lr
   1c758:	ldr	r9, [lr, #4]
   1c75c:	ldr	r0, [pc, #200]	; 1c82c <next@@Base+0x300c>
   1c760:	add	r0, pc, r0
   1c764:	str	r3, [r0]
   1c768:	ldr	r2, [pc, #192]	; 1c830 <next@@Base+0x3010>
   1c76c:	ldr	r2, [pc, r2]
   1c770:	ldr	lr, [pc, #188]	; 1c834 <next@@Base+0x3014>
   1c774:	add	lr, pc, lr
   1c778:	b	1c540 <next@@Base+0x2d20>
   1c77c:	ldr	lr, [pc, #160]	; 1c824 <next@@Base+0x3004>
   1c780:	mov	r4, r0
   1c784:	add	lr, pc, lr
   1c788:	b	1c540 <next@@Base+0x2d20>
   1c78c:	sub	sp, fp, #28
   1c790:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c794:	b	1264c <free@plt>
   1c798:	andeq	r5, r1, r8, lsl r7
   1c79c:	andeq	r5, r1, r4, lsl r7
   1c7a0:	andeq	r5, r1, r8, lsl #14
   1c7a4:	andeq	r5, r1, ip, ror #13
   1c7a8:	andeq	r5, r1, r4, ror #11
   1c7ac:	andeq	r2, r0, pc, lsr r9
   1c7b0:	andeq	r3, r1, ip, ror #25
   1c7b4:	andeq	r5, r1, ip, lsr #7
   1c7b8:	andeq	r2, r0, sp, ror r9
   1c7bc:	andeq	r5, r1, ip, lsr #7
   1c7c0:	muleq	r1, r4, r3
   1c7c4:	andeq	r5, r1, ip, lsl r5
   1c7c8:	strdeq	r5, [r1], -r4
   1c7cc:	ldrdeq	r5, [r1], -ip
   1c7d0:	andeq	r5, r1, r8, asr #13
   1c7d4:	ldrdeq	r5, [r1], -r8
   1c7d8:			; <UNDEFINED> instruction: 0x000154bc
   1c7dc:	andeq	r5, r1, r4, lsl #13
   1c7e0:	andeq	r5, r1, r4, ror #12
   1c7e4:	andeq	r5, r1, r4, ror r6
   1c7e8:	andeq	r5, r1, r4, ror #12
   1c7ec:	andeq	r5, r1, ip, asr #12
   1c7f0:	andeq	r5, r1, ip, ror r4
   1c7f4:	andeq	r5, r1, ip, lsr #8
   1c7f8:	strdeq	r5, [r1], -ip
   1c7fc:	andeq	r5, r1, r4, lsr #8
   1c800:	andeq	r5, r1, r4, lsl #8
   1c804:	andeq	r5, r1, ip, ror #5
   1c808:	strdeq	r5, [r1], -r8
   1c80c:	andeq	r5, r1, ip, lsl #3
   1c810:	andeq	r5, r1, ip, lsr #3
   1c814:	muleq	r1, r8, r1
   1c818:	andeq	r5, r1, r0, lsl #3
   1c81c:	andeq	r5, r1, r0, lsl #2
   1c820:	strdeq	r5, [r1], -r0
   1c824:	andeq	r5, r1, r8, asr r0
   1c828:	andeq	r5, r1, r0, lsr #1
   1c82c:	andeq	r5, r1, r4, lsl #1
   1c830:	andeq	r5, r1, r4, lsl #1
   1c834:	andeq	r5, r1, r8, rrx
   1c838:	andeq	r5, r1, r0, asr r2
   1c83c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c840:	add	fp, sp, #28
   1c844:	sub	sp, sp, #4
   1c848:	ldr	r0, [pc, #3180]	; 1d4bc <next@@Base+0x3c9c>
   1c84c:	ldr	r0, [pc, r0]
   1c850:	cmp	r0, #0
   1c854:	beq	1ceb0 <next@@Base+0x3690>
   1c858:	ldr	sl, [pc, #3168]	; 1d4c0 <next@@Base+0x3ca0>
   1c85c:	add	sl, pc, sl
   1c860:	ldr	r6, [sl, #4]
   1c864:	ldr	r5, [pc, #3160]	; 1d4c4 <next@@Base+0x3ca4>
   1c868:	ldr	r5, [pc, r5]
   1c86c:	ldr	r8, [pc, #3156]	; 1d4c8 <next@@Base+0x3ca8>
   1c870:	add	r8, pc, r8
   1c874:	ldrb	r0, [r8]
   1c878:	cmp	r0, #0
   1c87c:	beq	1c940 <next@@Base+0x3120>
   1c880:	ldr	r9, [pc, #3164]	; 1d4e4 <next@@Base+0x3cc4>
   1c884:	adds	r2, r5, #4
   1c888:	adc	ip, r6, #0
   1c88c:	add	r9, pc, r9
   1c890:	ldr	r0, [r9, #4]
   1c894:	ldr	r3, [pc, #3148]	; 1d4e8 <next@@Base+0x3cc8>
   1c898:	ldr	r3, [pc, r3]
   1c89c:	subs	r3, r3, r2
   1c8a0:	sbcs	r0, r0, ip
   1c8a4:	bcs	1c994 <next@@Base+0x3174>
   1c8a8:	mov	r0, #7
   1c8ac:	orr	r0, r0, #131072	; 0x20000
   1c8b0:	adds	r0, r0, r5
   1c8b4:	adc	r1, r6, #0
   1c8b8:	subs	r0, r0, #4
   1c8bc:	sbc	r1, r1, #0
   1c8c0:	mvn	r2, #0
   1c8c4:	and	r5, r1, r2
   1c8c8:	mov	r1, #16646144	; 0xfe0000
   1c8cc:	orr	r1, r1, #-16777216	; 0xff000000
   1c8d0:	ldr	r4, [pc, #3096]	; 1d4f0 <next@@Base+0x3cd0>
   1c8d4:	and	r6, r0, r1
   1c8d8:	ldr	r0, [pc, #3092]	; 1d4f4 <next@@Base+0x3cd4>
   1c8dc:	mov	r1, r6
   1c8e0:	add	r4, pc, r4
   1c8e4:	ldr	r0, [pc, r0]
   1c8e8:	bl	126ac <realloc@plt>
   1c8ec:	str	r6, [r9]
   1c8f0:	str	r5, [r9, #4]
   1c8f4:	str	r0, [r4]
   1c8f8:	ldrb	r3, [r8]
   1c8fc:	ldr	r6, [sl, #4]
   1c900:	ldr	r5, [pc, #3056]	; 1d4f8 <next@@Base+0x3cd8>
   1c904:	mov	r2, r0
   1c908:	mov	r1, #0
   1c90c:	mov	r7, #161	; 0xa1
   1c910:	ldr	r5, [pc, r5]
   1c914:	strb	r1, [r2, r5]!
   1c918:	strb	r7, [r2, #3]
   1c91c:	strb	r1, [r2, #2]
   1c920:	strb	r1, [r2, #1]
   1c924:	adds	r2, r5, #4
   1c928:	adc	ip, r6, #0
   1c92c:	mov	r7, #1
   1c930:	cmp	r3, #1
   1c934:	stm	sl, {r2, ip}
   1c938:	beq	1c9bc <next@@Base+0x319c>
   1c93c:	b	1cb94 <next@@Base+0x3374>
   1c940:	ldr	r0, [pc, #2948]	; 1d4cc <next@@Base+0x3cac>
   1c944:	ldr	r0, [pc, r0]
   1c948:	mov	r1, r0
   1c94c:	ldrb	r2, [r1, r5]!
   1c950:	ldrb	r3, [r1, #1]
   1c954:	ldrb	r7, [r1, #2]
   1c958:	ldrb	r1, [r1, #3]
   1c95c:	orr	r2, r2, r3, lsl #8
   1c960:	orr	r2, r2, r7, lsl #16
   1c964:	orr	r3, r2, r1, lsl #24
   1c968:	adds	r2, r5, #4
   1c96c:	adc	ip, r6, #0
   1c970:	cmp	r3, #-1593835520	; 0xa1000000
   1c974:	stm	sl, {r2, ip}
   1c978:	beq	1cb34 <next@@Base+0x3314>
   1c97c:	mov	r7, #1
   1c980:	cmn	r3, #1
   1c984:	beq	1cb74 <next@@Base+0x3354>
   1c988:	ldr	r1, [pc, #2880]	; 1d4d0 <next@@Base+0x3cb0>
   1c98c:	add	r1, pc, r1
   1c990:	b	1d274 <next@@Base+0x3a54>
   1c994:	ldr	r0, [pc, #2896]	; 1d4ec <next@@Base+0x3ccc>
   1c998:	mov	r3, #0
   1c99c:	mov	r4, #161	; 0xa1
   1c9a0:	ldr	r0, [pc, r0]
   1c9a4:	mov	r7, r0
   1c9a8:	strb	r3, [r7, r5]!
   1c9ac:	strb	r4, [r7, #3]
   1c9b0:	strb	r3, [r7, #2]
   1c9b4:	strb	r3, [r7, #1]
   1c9b8:	stm	sl, {r2, ip}
   1c9bc:	ldr	r4, [r9, #4]
   1c9c0:	ldr	r1, [pc, #2868]	; 1d4fc <next@@Base+0x3cdc>
   1c9c4:	adds	r3, r5, #8
   1c9c8:	adc	r7, r6, #0
   1c9cc:	ldr	r1, [pc, r1]
   1c9d0:	subs	r1, r1, r3
   1c9d4:	sbcs	r1, r4, r7
   1c9d8:	bcs	1ca64 <next@@Base+0x3244>
   1c9dc:	mov	r1, #7
   1c9e0:	orr	r1, r1, #131072	; 0x20000
   1c9e4:	adds	r1, r5, r1
   1c9e8:	adc	r2, r6, #0
   1c9ec:	mvn	r3, #0
   1c9f0:	and	r5, r2, r3
   1c9f4:	mov	r2, #16646144	; 0xfe0000
   1c9f8:	orr	r2, r2, #-16777216	; 0xff000000
   1c9fc:	ldr	r4, [pc, #2812]	; 1d500 <next@@Base+0x3ce0>
   1ca00:	and	r6, r1, r2
   1ca04:	mov	r1, r6
   1ca08:	add	r4, pc, r4
   1ca0c:	bl	126ac <realloc@plt>
   1ca10:	str	r6, [r9]
   1ca14:	str	r5, [r9, #4]
   1ca18:	str	r0, [r4]
   1ca1c:	ldrb	r1, [r8]
   1ca20:	ldr	ip, [sl, #4]
   1ca24:	ldr	r2, [pc, #2776]	; 1d504 <next@@Base+0x3ce4>
   1ca28:	mov	r7, r0
   1ca2c:	mov	r3, #9
   1ca30:	ldr	r2, [pc, r2]
   1ca34:	strb	r3, [r7, r2]!
   1ca38:	mov	r3, #0
   1ca3c:	strb	r3, [r7, #3]
   1ca40:	strb	r3, [r7, #2]
   1ca44:	strb	r3, [r7, #1]
   1ca48:	adds	r3, r2, #4
   1ca4c:	adc	r5, ip, #0
   1ca50:	mov	r7, #1
   1ca54:	cmp	r1, #1
   1ca58:	stm	sl, {r3, r5}
   1ca5c:	beq	1ca8c <next@@Base+0x326c>
   1ca60:	b	1cbbc <next@@Base+0x339c>
   1ca64:	mov	r3, r0
   1ca68:	mov	r1, #9
   1ca6c:	strb	r1, [r3, r2]!
   1ca70:	mov	r1, #0
   1ca74:	strb	r1, [r3, #3]
   1ca78:	strb	r1, [r3, #2]
   1ca7c:	strb	r1, [r3, #1]
   1ca80:	adds	r3, r2, #4
   1ca84:	adc	r5, ip, #0
   1ca88:	stm	sl, {r3, r5}
   1ca8c:	ldr	r6, [r9, #4]
   1ca90:	ldr	r4, [pc, #2672]	; 1d508 <next@@Base+0x3ce8>
   1ca94:	adds	r1, r2, #8
   1ca98:	adc	r7, ip, #0
   1ca9c:	ldr	r4, [pc, r4]
   1caa0:	subs	r1, r4, r1
   1caa4:	sbcs	r1, r6, r7
   1caa8:	bcs	1cf80 <next@@Base+0x3760>
   1caac:	mov	r1, #7
   1cab0:	orr	r1, r1, #131072	; 0x20000
   1cab4:	adds	r1, r2, r1
   1cab8:	adc	r2, ip, #0
   1cabc:	mvn	r3, #0
   1cac0:	and	r5, r2, r3
   1cac4:	mov	r2, #16646144	; 0xfe0000
   1cac8:	orr	r2, r2, #-16777216	; 0xff000000
   1cacc:	ldr	r4, [pc, #2616]	; 1d50c <next@@Base+0x3cec>
   1cad0:	and	r6, r1, r2
   1cad4:	mov	r1, r6
   1cad8:	add	r4, pc, r4
   1cadc:	bl	126ac <realloc@plt>
   1cae0:	str	r6, [r9]
   1cae4:	str	r5, [r9, #4]
   1cae8:	str	r0, [r4]
   1caec:	ldrb	r2, [r8]
   1caf0:	ldr	r5, [sl, #4]
   1caf4:	ldr	r3, [pc, #2580]	; 1d510 <next@@Base+0x3cf0>
   1caf8:	mov	r7, r0
   1cafc:	mov	r1, #0
   1cb00:	ldr	r3, [pc, r3]
   1cb04:	adds	r6, r3, #4
   1cb08:	strb	r1, [r7, r3]!
   1cb0c:	str	r6, [sl]
   1cb10:	strb	r1, [r7, #3]
   1cb14:	strb	r1, [r7, #2]
   1cb18:	strb	r1, [r7, #1]
   1cb1c:	adc	r1, r5, #0
   1cb20:	mov	r7, #1
   1cb24:	cmp	r2, #1
   1cb28:	str	r1, [sl, #4]
   1cb2c:	bne	1cbe4 <next@@Base+0x33c4>
   1cb30:	b	1cfa8 <next@@Base+0x3788>
   1cb34:	ldr	r3, [r0, r2]
   1cb38:	adds	r4, r5, #8
   1cb3c:	adc	r7, r6, #0
   1cb40:	cmp	r3, #9
   1cb44:	stm	sl, {r4, r7}
   1cb48:	bne	1d26c <next@@Base+0x3a4c>
   1cb4c:	ldr	r3, [pc, #2444]	; 1d4e0 <next@@Base+0x3cc0>
   1cb50:	adds	r4, r5, #20
   1cb54:	adc	r7, r6, #0
   1cb58:	add	r3, pc, r3
   1cb5c:	add	r6, r5, r0
   1cb60:	ldrb	r3, [r3]
   1cb64:	ldr	r6, [r6, #16]
   1cb68:	stm	sl, {r4, r7}
   1cb6c:	eor	r3, r3, #1
   1cb70:	add	r7, r6, r3
   1cb74:	mov	r6, r0
   1cb78:	mov	r3, #0
   1cb7c:	strb	r3, [r6, r5]!
   1cb80:	mov	r5, #161	; 0xa1
   1cb84:	strb	r5, [r6, #3]
   1cb88:	strb	r3, [r6, #2]
   1cb8c:	strb	r3, [r6, #1]
   1cb90:	stm	sl, {r2, ip}
   1cb94:	mov	r3, r0
   1cb98:	mov	r1, #9
   1cb9c:	strb	r1, [r3, r2]!
   1cba0:	mov	r1, #0
   1cba4:	strb	r1, [r3, #3]
   1cba8:	strb	r1, [r3, #2]
   1cbac:	strb	r1, [r3, #1]
   1cbb0:	adds	r3, r2, #4
   1cbb4:	adc	r5, ip, #0
   1cbb8:	stm	sl, {r3, r5}
   1cbbc:	mov	r2, r0
   1cbc0:	mov	r1, #0
   1cbc4:	strb	r1, [r2, r3]!
   1cbc8:	adds	r6, r3, #4
   1cbcc:	strb	r1, [r2, #3]
   1cbd0:	strb	r1, [r2, #2]
   1cbd4:	strb	r1, [r2, #1]
   1cbd8:	adc	r1, r5, #0
   1cbdc:	str	r6, [sl]
   1cbe0:	str	r1, [sl, #4]
   1cbe4:	mov	r3, r0
   1cbe8:	mov	r2, #0
   1cbec:	strb	r2, [r3, r6]!
   1cbf0:	strb	r2, [r3, #3]
   1cbf4:	strb	r2, [r3, #2]
   1cbf8:	strb	r2, [r3, #1]
   1cbfc:	adds	r2, r6, #4
   1cc00:	adc	r3, r1, #0
   1cc04:	strd	r2, [sl]
   1cc08:	lsr	r1, r7, #24
   1cc0c:	strb	r7, [r0, r2]!
   1cc10:	lsr	r6, r7, #16
   1cc14:	lsr	r5, r7, #8
   1cc18:	strb	r1, [r0, #3]
   1cc1c:	strb	r6, [r0, #2]
   1cc20:	strb	r5, [r0, #1]
   1cc24:	ldrb	r0, [r8]
   1cc28:	adds	r4, r2, #4
   1cc2c:	adc	r5, r3, #0
   1cc30:	cmp	r0, #0
   1cc34:	strd	r4, [sl]
   1cc38:	beq	1ccec <next@@Base+0x34cc>
   1cc3c:	ldr	r9, [pc, #2284]	; 1d530 <next@@Base+0x3d10>
   1cc40:	adds	r0, r2, #8
   1cc44:	adc	r1, r3, #0
   1cc48:	add	r9, pc, r9
   1cc4c:	ldr	r7, [r9, #4]
   1cc50:	ldr	r6, [pc, #2268]	; 1d534 <next@@Base+0x3d14>
   1cc54:	ldr	r6, [pc, r6]
   1cc58:	subs	r0, r6, r0
   1cc5c:	sbcs	r0, r7, r1
   1cc60:	bcs	1ceb8 <next@@Base+0x3698>
   1cc64:	mov	r0, #7
   1cc68:	orr	r0, r0, #131072	; 0x20000
   1cc6c:	adds	r0, r2, r0
   1cc70:	adc	r1, r3, #0
   1cc74:	mvn	r2, #0
   1cc78:	and	r5, r1, r2
   1cc7c:	mov	r1, #16646144	; 0xfe0000
   1cc80:	orr	r1, r1, #-16777216	; 0xff000000
   1cc84:	ldr	r4, [pc, #2268]	; 1d568 <next@@Base+0x3d48>
   1cc88:	and	r6, r0, r1
   1cc8c:	ldr	r0, [pc, #2264]	; 1d56c <next@@Base+0x3d4c>
   1cc90:	mov	r1, r6
   1cc94:	add	r4, pc, r4
   1cc98:	ldr	r0, [pc, r0]
   1cc9c:	bl	126ac <realloc@plt>
   1cca0:	str	r6, [r9]
   1cca4:	str	r5, [r9, #4]
   1cca8:	str	r0, [r4]
   1ccac:	ldrb	r1, [r8]
   1ccb0:	ldr	r5, [sl, #4]
   1ccb4:	ldr	r4, [pc, #2228]	; 1d570 <next@@Base+0x3d50>
   1ccb8:	mov	r3, r0
   1ccbc:	mov	r2, #0
   1ccc0:	ldr	r4, [pc, r4]
   1ccc4:	strb	r2, [r3, r4]!
   1ccc8:	strb	r2, [r3, #3]
   1cccc:	strb	r2, [r3, #2]
   1ccd0:	strb	r2, [r3, #1]
   1ccd4:	adds	r2, r4, #4
   1ccd8:	adc	r3, r5, #0
   1ccdc:	cmp	r1, #0
   1cce0:	strd	r2, [sl]
   1cce4:	beq	1cd18 <next@@Base+0x34f8>
   1cce8:	b	1cee4 <next@@Base+0x36c4>
   1ccec:	ldr	r0, [pc, #2104]	; 1d52c <next@@Base+0x3d0c>
   1ccf0:	adds	r2, r2, #8
   1ccf4:	mov	r1, #0
   1ccf8:	adc	r3, r3, #0
   1ccfc:	ldr	r0, [pc, r0]
   1cd00:	mov	r7, r0
   1cd04:	strb	r1, [r7, r4]!
   1cd08:	strb	r1, [r7, #3]
   1cd0c:	strb	r1, [r7, #2]
   1cd10:	strb	r1, [r7, #1]
   1cd14:	strd	r2, [sl]
   1cd18:	mov	r7, r0
   1cd1c:	mov	r1, #0
   1cd20:	strb	r1, [r7, r2]!
   1cd24:	strb	r1, [r7, #3]
   1cd28:	strb	r1, [r7, #2]
   1cd2c:	strb	r1, [r7, #1]
   1cd30:	adds	r1, r2, #4
   1cd34:	adc	r5, r3, #0
   1cd38:	stm	sl, {r1, r5}
   1cd3c:	mov	r3, r0
   1cd40:	mov	r2, #0
   1cd44:	strb	r2, [r3, r1]!
   1cd48:	strb	r2, [r3, #3]
   1cd4c:	strb	r2, [r3, #2]
   1cd50:	strb	r2, [r3, #1]
   1cd54:	adds	r2, r1, #4
   1cd58:	adc	r3, r5, #0
   1cd5c:	strd	r2, [sl]
   1cd60:	mov	r7, r0
   1cd64:	mov	r1, #0
   1cd68:	strb	r1, [r7, r2]!
   1cd6c:	strb	r1, [r7, #3]
   1cd70:	strb	r1, [r7, #2]
   1cd74:	strb	r1, [r7, #1]
   1cd78:	adds	r1, r2, #4
   1cd7c:	adc	r5, r3, #0
   1cd80:	stm	sl, {r1, r5}
   1cd84:	mov	r3, r0
   1cd88:	mov	r2, #0
   1cd8c:	strb	r2, [r3, r1]!
   1cd90:	adds	r4, r1, #4
   1cd94:	strb	r2, [r3, #3]
   1cd98:	strb	r2, [r3, #2]
   1cd9c:	strb	r2, [r3, #1]
   1cda0:	adc	r3, r5, #0
   1cda4:	str	r4, [sl]
   1cda8:	str	r3, [sl, #4]
   1cdac:	mov	r2, r0
   1cdb0:	mov	r1, #0
   1cdb4:	strb	r1, [r2, r4]!
   1cdb8:	strb	r1, [r2, #3]
   1cdbc:	strb	r1, [r2, #2]
   1cdc0:	strb	r1, [r2, #1]
   1cdc4:	adds	r2, r4, #4
   1cdc8:	adc	r1, r3, #0
   1cdcc:	str	r2, [sl]
   1cdd0:	str	r1, [sl, #4]
   1cdd4:	mov	r3, r0
   1cdd8:	mov	r4, #0
   1cddc:	strb	r4, [r3, r2]!
   1cde0:	mov	r7, #163	; 0xa3
   1cde4:	strb	r7, [r3, #3]
   1cde8:	strb	r4, [r3, #2]
   1cdec:	strb	r4, [r3, #1]
   1cdf0:	ldrb	r7, [r8]
   1cdf4:	adds	r6, r2, #4
   1cdf8:	adc	r3, r1, #0
   1cdfc:	cmp	r7, #1
   1ce00:	str	r6, [sl]
   1ce04:	str	r3, [sl, #4]
   1ce08:	bne	1ce7c <next@@Base+0x365c>
   1ce0c:	ldr	r8, [pc, #1852]	; 1d550 <next@@Base+0x3d30>
   1ce10:	adds	lr, r2, #8
   1ce14:	adc	ip, r1, #0
   1ce18:	add	r8, pc, r8
   1ce1c:	ldr	r5, [r8, #4]
   1ce20:	ldr	r7, [pc, #1836]	; 1d554 <next@@Base+0x3d34>
   1ce24:	ldr	r7, [pc, r7]
   1ce28:	subs	r7, r7, lr
   1ce2c:	sbcs	r7, r5, ip
   1ce30:	bcs	1ce7c <next@@Base+0x365c>
   1ce34:	mov	r3, #7
   1ce38:	orr	r3, r3, #131072	; 0x20000
   1ce3c:	adds	r2, r2, r3
   1ce40:	adc	r1, r1, #0
   1ce44:	mvn	r3, #0
   1ce48:	and	r7, r1, r3
   1ce4c:	mov	r1, #16646144	; 0xfe0000
   1ce50:	orr	r1, r1, #-16777216	; 0xff000000
   1ce54:	ldr	r5, [pc, #1788]	; 1d558 <next@@Base+0x3d38>
   1ce58:	and	r6, r2, r1
   1ce5c:	mov	r1, r6
   1ce60:	add	r5, pc, r5
   1ce64:	bl	126ac <realloc@plt>
   1ce68:	strd	r6, [r8]
   1ce6c:	str	r0, [r5]
   1ce70:	ldr	r3, [sl, #4]
   1ce74:	ldr	r6, [pc, #1760]	; 1d55c <next@@Base+0x3d3c>
   1ce78:	ldr	r6, [pc, r6]
   1ce7c:	ldr	r0, [pc, #1756]	; 1d560 <next@@Base+0x3d40>
   1ce80:	ldr	r1, [pc, #1756]	; 1d564 <next@@Base+0x3d44>
   1ce84:	adds	r2, r6, #4
   1ce88:	add	r0, pc, r0
   1ce8c:	adc	r3, r3, #0
   1ce90:	ldr	r1, [pc, r1]
   1ce94:	strb	r4, [r1, r6]!
   1ce98:	strb	r4, [r1, #3]
   1ce9c:	strb	r4, [r1, #2]
   1cea0:	strb	r4, [r1, #1]
   1cea4:	mov	r1, #1
   1cea8:	strd	r2, [sl]
   1ceac:	strb	r1, [r0]
   1ceb0:	sub	sp, fp, #28
   1ceb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ceb8:	ldr	r0, [pc, #1656]	; 1d538 <next@@Base+0x3d18>
   1cebc:	adds	r2, r2, #8
   1cec0:	mov	r1, #0
   1cec4:	adc	r3, r3, #0
   1cec8:	ldr	r0, [pc, r0]
   1cecc:	mov	r7, r0
   1ced0:	strb	r1, [r7, r4]!
   1ced4:	strb	r1, [r7, #3]
   1ced8:	strb	r1, [r7, #2]
   1cedc:	strb	r1, [r7, #1]
   1cee0:	strd	r2, [sl]
   1cee4:	ldr	r6, [r9, #4]
   1cee8:	ldr	r1, [pc, #1668]	; 1d574 <next@@Base+0x3d54>
   1ceec:	adds	ip, r4, #8
   1cef0:	adc	r7, r5, #0
   1cef4:	ldr	r1, [pc, r1]
   1cef8:	subs	r1, r1, ip
   1cefc:	sbcs	r1, r6, r7
   1cf00:	bcs	1d04c <next@@Base+0x382c>
   1cf04:	mov	r1, #7
   1cf08:	orr	r1, r1, #131072	; 0x20000
   1cf0c:	adds	r1, r4, r1
   1cf10:	adc	r2, r5, #0
   1cf14:	mvn	r3, #0
   1cf18:	and	r5, r2, r3
   1cf1c:	mov	r2, #16646144	; 0xfe0000
   1cf20:	orr	r2, r2, #-16777216	; 0xff000000
   1cf24:	ldr	r6, [pc, #1612]	; 1d578 <next@@Base+0x3d58>
   1cf28:	and	r4, r1, r2
   1cf2c:	mov	r1, r4
   1cf30:	add	r6, pc, r6
   1cf34:	bl	126ac <realloc@plt>
   1cf38:	str	r0, [r6]
   1cf3c:	strd	r4, [r9]
   1cf40:	ldrb	r7, [r8]
   1cf44:	ldr	r3, [sl, #4]
   1cf48:	ldr	r2, [pc, #1580]	; 1d57c <next@@Base+0x3d5c>
   1cf4c:	mov	r6, r0
   1cf50:	mov	r1, #0
   1cf54:	ldr	r2, [pc, r2]
   1cf58:	strb	r1, [r6, r2]!
   1cf5c:	strb	r1, [r6, #3]
   1cf60:	strb	r1, [r6, #2]
   1cf64:	strb	r1, [r6, #1]
   1cf68:	adds	r1, r2, #4
   1cf6c:	adc	r5, r3, #0
   1cf70:	cmp	r7, #1
   1cf74:	stm	sl, {r1, r5}
   1cf78:	bne	1cd3c <next@@Base+0x351c>
   1cf7c:	b	1d070 <next@@Base+0x3850>
   1cf80:	mov	r2, r0
   1cf84:	mov	r1, #0
   1cf88:	strb	r1, [r2, r3]!
   1cf8c:	adds	r6, r3, #4
   1cf90:	strb	r1, [r2, #3]
   1cf94:	strb	r1, [r2, #2]
   1cf98:	strb	r1, [r2, #1]
   1cf9c:	adc	r1, r5, #0
   1cfa0:	str	r6, [sl]
   1cfa4:	str	r1, [sl, #4]
   1cfa8:	ldr	r4, [r9, #4]
   1cfac:	ldr	r2, [pc, #1376]	; 1d514 <next@@Base+0x3cf4>
   1cfb0:	adds	ip, r3, #8
   1cfb4:	adc	r7, r5, #0
   1cfb8:	ldr	r2, [pc, r2]
   1cfbc:	subs	r2, r2, ip
   1cfc0:	sbcs	r2, r4, r7
   1cfc4:	bcs	1d110 <next@@Base+0x38f0>
   1cfc8:	mov	r1, #7
   1cfcc:	orr	r1, r1, #131072	; 0x20000
   1cfd0:	adds	r1, r3, r1
   1cfd4:	adc	r2, r5, #0
   1cfd8:	mvn	r3, #0
   1cfdc:	and	r5, r2, r3
   1cfe0:	mov	r2, #16646144	; 0xfe0000
   1cfe4:	orr	r2, r2, #-16777216	; 0xff000000
   1cfe8:	ldr	r4, [pc, #1320]	; 1d518 <next@@Base+0x3cf8>
   1cfec:	and	r6, r1, r2
   1cff0:	mov	r1, r6
   1cff4:	add	r4, pc, r4
   1cff8:	bl	126ac <realloc@plt>
   1cffc:	str	r6, [r9]
   1d000:	str	r5, [r9, #4]
   1d004:	str	r0, [r4]
   1d008:	ldrb	r5, [r8]
   1d00c:	ldr	r1, [sl, #4]
   1d010:	ldr	r6, [pc, #1284]	; 1d51c <next@@Base+0x3cfc>
   1d014:	mov	r3, r0
   1d018:	mov	r2, #0
   1d01c:	mov	r7, #1
   1d020:	ldr	r6, [pc, r6]
   1d024:	strb	r2, [r3, r6]!
   1d028:	strb	r2, [r3, #3]
   1d02c:	strb	r2, [r3, #2]
   1d030:	strb	r2, [r3, #1]
   1d034:	adds	r2, r6, #4
   1d038:	adc	r3, r1, #0
   1d03c:	cmp	r5, #1
   1d040:	strd	r2, [sl]
   1d044:	bne	1cc08 <next@@Base+0x33e8>
   1d048:	b	1d134 <next@@Base+0x3914>
   1d04c:	mov	r7, r0
   1d050:	mov	r1, #0
   1d054:	strb	r1, [r7, r2]!
   1d058:	strb	r1, [r7, #3]
   1d05c:	strb	r1, [r7, #2]
   1d060:	strb	r1, [r7, #1]
   1d064:	adds	r1, r2, #4
   1d068:	adc	r5, r3, #0
   1d06c:	stm	sl, {r1, r5}
   1d070:	ldr	r4, [r9, #4]
   1d074:	ldr	r6, [pc, #1284]	; 1d580 <next@@Base+0x3d60>
   1d078:	adds	r7, r2, #8
   1d07c:	adc	ip, r3, #0
   1d080:	ldr	r6, [pc, r6]
   1d084:	subs	r7, r6, r7
   1d088:	sbcs	r7, r4, ip
   1d08c:	bcs	1d1a8 <next@@Base+0x3988>
   1d090:	mov	r1, #7
   1d094:	orr	r1, r1, #131072	; 0x20000
   1d098:	adds	r1, r2, r1
   1d09c:	adc	r2, r3, #0
   1d0a0:	mvn	r3, #0
   1d0a4:	and	r5, r2, r3
   1d0a8:	mov	r2, #16646144	; 0xfe0000
   1d0ac:	orr	r2, r2, #-16777216	; 0xff000000
   1d0b0:	ldr	r4, [pc, #1228]	; 1d584 <next@@Base+0x3d64>
   1d0b4:	and	r6, r1, r2
   1d0b8:	mov	r1, r6
   1d0bc:	add	r4, pc, r4
   1d0c0:	bl	126ac <realloc@plt>
   1d0c4:	str	r6, [r9]
   1d0c8:	str	r5, [r9, #4]
   1d0cc:	str	r0, [r4]
   1d0d0:	ldrb	r7, [r8]
   1d0d4:	ldr	r5, [sl, #4]
   1d0d8:	ldr	r1, [pc, #1192]	; 1d588 <next@@Base+0x3d68>
   1d0dc:	mov	r3, r0
   1d0e0:	mov	r2, #0
   1d0e4:	ldr	r1, [pc, r1]
   1d0e8:	strb	r2, [r3, r1]!
   1d0ec:	strb	r2, [r3, #3]
   1d0f0:	strb	r2, [r3, #2]
   1d0f4:	strb	r2, [r3, #1]
   1d0f8:	adds	r2, r1, #4
   1d0fc:	adc	r3, r5, #0
   1d100:	cmp	r7, #1
   1d104:	strd	r2, [sl]
   1d108:	bne	1cd60 <next@@Base+0x3540>
   1d10c:	b	1d1cc <next@@Base+0x39ac>
   1d110:	mov	r3, r0
   1d114:	mov	r2, #0
   1d118:	strb	r2, [r3, r6]!
   1d11c:	strb	r2, [r3, #3]
   1d120:	strb	r2, [r3, #2]
   1d124:	strb	r2, [r3, #1]
   1d128:	adds	r2, r6, #4
   1d12c:	adc	r3, r1, #0
   1d130:	strd	r2, [sl]
   1d134:	ldr	r4, [r9, #4]
   1d138:	ldr	r5, [pc, #992]	; 1d520 <next@@Base+0x3d00>
   1d13c:	adds	lr, r6, #8
   1d140:	adc	ip, r1, #0
   1d144:	mov	r7, #1
   1d148:	ldr	r5, [pc, r5]
   1d14c:	subs	r5, r5, lr
   1d150:	sbcs	r5, r4, ip
   1d154:	bcs	1cc08 <next@@Base+0x33e8>
   1d158:	mov	r2, #7
   1d15c:	orr	r2, r2, #131072	; 0x20000
   1d160:	adds	r2, r6, r2
   1d164:	adc	r1, r1, #0
   1d168:	mvn	r3, #0
   1d16c:	and	r5, r1, r3
   1d170:	mov	r1, #16646144	; 0xfe0000
   1d174:	orr	r1, r1, #-16777216	; 0xff000000
   1d178:	ldr	r4, [pc, #932]	; 1d524 <next@@Base+0x3d04>
   1d17c:	and	r6, r2, r1
   1d180:	mov	r1, r6
   1d184:	add	r4, pc, r4
   1d188:	bl	126ac <realloc@plt>
   1d18c:	str	r6, [r9]
   1d190:	str	r5, [r9, #4]
   1d194:	str	r0, [r4]
   1d198:	ldr	r3, [sl, #4]
   1d19c:	ldr	r2, [pc, #900]	; 1d528 <next@@Base+0x3d08>
   1d1a0:	ldr	r2, [pc, r2]
   1d1a4:	b	1cc08 <next@@Base+0x33e8>
   1d1a8:	mov	r3, r0
   1d1ac:	mov	r2, #0
   1d1b0:	strb	r2, [r3, r1]!
   1d1b4:	strb	r2, [r3, #3]
   1d1b8:	strb	r2, [r3, #2]
   1d1bc:	strb	r2, [r3, #1]
   1d1c0:	adds	r2, r1, #4
   1d1c4:	adc	r3, r5, #0
   1d1c8:	strd	r2, [sl]
   1d1cc:	ldr	r4, [r9, #4]
   1d1d0:	ldr	r6, [pc, #948]	; 1d58c <next@@Base+0x3d6c>
   1d1d4:	adds	r7, r1, #8
   1d1d8:	adc	ip, r5, #0
   1d1dc:	ldr	r6, [pc, r6]
   1d1e0:	subs	r7, r6, r7
   1d1e4:	sbcs	r7, r4, ip
   1d1e8:	bcs	1d294 <next@@Base+0x3a74>
   1d1ec:	mov	r2, #7
   1d1f0:	orr	r2, r2, #131072	; 0x20000
   1d1f4:	adds	r1, r1, r2
   1d1f8:	adc	r2, r5, #0
   1d1fc:	mvn	r3, #0
   1d200:	and	r5, r2, r3
   1d204:	mov	r2, #16646144	; 0xfe0000
   1d208:	orr	r2, r2, #-16777216	; 0xff000000
   1d20c:	ldr	r4, [pc, #892]	; 1d590 <next@@Base+0x3d70>
   1d210:	and	r6, r1, r2
   1d214:	mov	r1, r6
   1d218:	add	r4, pc, r4
   1d21c:	bl	126ac <realloc@plt>
   1d220:	str	r6, [r9]
   1d224:	str	r5, [r9, #4]
   1d228:	str	r0, [r4]
   1d22c:	ldrb	r7, [r8]
   1d230:	ldr	r3, [sl, #4]
   1d234:	ldr	r2, [pc, #856]	; 1d594 <next@@Base+0x3d74>
   1d238:	mov	r6, r0
   1d23c:	mov	r1, #0
   1d240:	ldr	r2, [pc, r2]
   1d244:	strb	r1, [r6, r2]!
   1d248:	strb	r1, [r6, #3]
   1d24c:	strb	r1, [r6, #2]
   1d250:	strb	r1, [r6, #1]
   1d254:	adds	r1, r2, #4
   1d258:	adc	r5, r3, #0
   1d25c:	cmp	r7, #1
   1d260:	stm	sl, {r1, r5}
   1d264:	bne	1cd84 <next@@Base+0x3564>
   1d268:	b	1d2b8 <next@@Base+0x3a98>
   1d26c:	ldr	r1, [pc, #616]	; 1d4dc <next@@Base+0x3cbc>
   1d270:	add	r1, pc, r1
   1d274:	ldr	r0, [pc, #600]	; 1d4d4 <next@@Base+0x3cb4>
   1d278:	ldr	r0, [pc, r0]
   1d27c:	ldr	r0, [r0]
   1d280:	ldr	r2, [pc, #592]	; 1d4d8 <next@@Base+0x3cb8>
   1d284:	ldr	r2, [pc, r2]
   1d288:	sub	sp, fp, #28
   1d28c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d290:	b	1273c <fprintf@plt>
   1d294:	mov	r7, r0
   1d298:	mov	r1, #0
   1d29c:	strb	r1, [r7, r2]!
   1d2a0:	strb	r1, [r7, #3]
   1d2a4:	strb	r1, [r7, #2]
   1d2a8:	strb	r1, [r7, #1]
   1d2ac:	adds	r1, r2, #4
   1d2b0:	adc	r5, r3, #0
   1d2b4:	stm	sl, {r1, r5}
   1d2b8:	ldr	r4, [r9, #4]
   1d2bc:	ldr	r6, [pc, #724]	; 1d598 <next@@Base+0x3d78>
   1d2c0:	adds	r7, r2, #8
   1d2c4:	adc	ip, r3, #0
   1d2c8:	ldr	r6, [pc, r6]
   1d2cc:	subs	r7, r6, r7
   1d2d0:	sbcs	r7, r4, ip
   1d2d4:	bcs	1d35c <next@@Base+0x3b3c>
   1d2d8:	mov	r1, #7
   1d2dc:	orr	r1, r1, #131072	; 0x20000
   1d2e0:	adds	r1, r2, r1
   1d2e4:	adc	r2, r3, #0
   1d2e8:	mvn	r3, #0
   1d2ec:	and	r5, r2, r3
   1d2f0:	mov	r2, #16646144	; 0xfe0000
   1d2f4:	orr	r2, r2, #-16777216	; 0xff000000
   1d2f8:	ldr	r4, [pc, #668]	; 1d59c <next@@Base+0x3d7c>
   1d2fc:	and	r6, r1, r2
   1d300:	mov	r1, r6
   1d304:	add	r4, pc, r4
   1d308:	bl	126ac <realloc@plt>
   1d30c:	str	r6, [r9]
   1d310:	str	r5, [r9, #4]
   1d314:	str	r0, [r4]
   1d318:	ldrb	r2, [r8]
   1d31c:	ldr	r5, [sl, #4]
   1d320:	ldr	r1, [pc, #632]	; 1d5a0 <next@@Base+0x3d80>
   1d324:	mov	r7, r0
   1d328:	mov	r3, #0
   1d32c:	ldr	r1, [pc, r1]
   1d330:	adds	r4, r1, #4
   1d334:	strb	r3, [r7, r1]!
   1d338:	str	r4, [sl]
   1d33c:	strb	r3, [r7, #3]
   1d340:	strb	r3, [r7, #2]
   1d344:	strb	r3, [r7, #1]
   1d348:	adc	r3, r5, #0
   1d34c:	cmp	r2, #1
   1d350:	str	r3, [sl, #4]
   1d354:	bne	1cdac <next@@Base+0x358c>
   1d358:	b	1d384 <next@@Base+0x3b64>
   1d35c:	mov	r3, r0
   1d360:	mov	r2, #0
   1d364:	strb	r2, [r3, r1]!
   1d368:	adds	r4, r1, #4
   1d36c:	strb	r2, [r3, #3]
   1d370:	strb	r2, [r3, #2]
   1d374:	strb	r2, [r3, #1]
   1d378:	adc	r3, r5, #0
   1d37c:	str	r4, [sl]
   1d380:	str	r3, [sl, #4]
   1d384:	ldr	r6, [r9, #4]
   1d388:	ldr	r2, [pc, #532]	; 1d5a4 <next@@Base+0x3d84>
   1d38c:	adds	ip, r1, #8
   1d390:	adc	r7, r5, #0
   1d394:	ldr	r2, [pc, r2]
   1d398:	subs	r2, r2, ip
   1d39c:	sbcs	r2, r6, r7
   1d3a0:	bcs	1d428 <next@@Base+0x3c08>
   1d3a4:	mov	r2, #7
   1d3a8:	orr	r2, r2, #131072	; 0x20000
   1d3ac:	adds	r1, r1, r2
   1d3b0:	adc	r2, r5, #0
   1d3b4:	mvn	r3, #0
   1d3b8:	and	r5, r2, r3
   1d3bc:	mov	r2, #16646144	; 0xfe0000
   1d3c0:	orr	r2, r2, #-16777216	; 0xff000000
   1d3c4:	ldr	r4, [pc, #368]	; 1d53c <next@@Base+0x3d1c>
   1d3c8:	and	r6, r1, r2
   1d3cc:	mov	r1, r6
   1d3d0:	add	r4, pc, r4
   1d3d4:	bl	126ac <realloc@plt>
   1d3d8:	str	r6, [r9]
   1d3dc:	str	r5, [r9, #4]
   1d3e0:	str	r0, [r4]
   1d3e4:	ldrb	r7, [r8]
   1d3e8:	ldr	r3, [sl, #4]
   1d3ec:	ldr	r4, [pc, #332]	; 1d540 <next@@Base+0x3d20>
   1d3f0:	mov	r2, r0
   1d3f4:	mov	r1, #0
   1d3f8:	ldr	r4, [pc, r4]
   1d3fc:	strb	r1, [r2, r4]!
   1d400:	strb	r1, [r2, #3]
   1d404:	strb	r1, [r2, #2]
   1d408:	strb	r1, [r2, #1]
   1d40c:	adds	r2, r4, #4
   1d410:	adc	r1, r3, #0
   1d414:	cmp	r7, #0
   1d418:	str	r2, [sl]
   1d41c:	str	r1, [sl, #4]
   1d420:	beq	1cdd4 <next@@Base+0x35b4>
   1d424:	b	1d450 <next@@Base+0x3c30>
   1d428:	mov	r2, r0
   1d42c:	mov	r1, #0
   1d430:	strb	r1, [r2, r4]!
   1d434:	strb	r1, [r2, #3]
   1d438:	strb	r1, [r2, #2]
   1d43c:	strb	r1, [r2, #1]
   1d440:	adds	r2, r4, #4
   1d444:	adc	r1, r3, #0
   1d448:	str	r2, [sl]
   1d44c:	str	r1, [sl, #4]
   1d450:	ldr	r5, [r9, #4]
   1d454:	ldr	r6, [pc, #232]	; 1d544 <next@@Base+0x3d24>
   1d458:	adds	r7, r4, #8
   1d45c:	adc	ip, r3, #0
   1d460:	ldr	r6, [pc, r6]
   1d464:	subs	r7, r6, r7
   1d468:	sbcs	r7, r5, ip
   1d46c:	bcs	1cdd4 <next@@Base+0x35b4>
   1d470:	mov	r1, #7
   1d474:	orr	r1, r1, #131072	; 0x20000
   1d478:	adds	r1, r4, r1
   1d47c:	adc	r2, r3, #0
   1d480:	mvn	r3, #0
   1d484:	and	r7, r2, r3
   1d488:	mov	r2, #16646144	; 0xfe0000
   1d48c:	orr	r2, r2, #-16777216	; 0xff000000
   1d490:	ldr	r5, [pc, #176]	; 1d548 <next@@Base+0x3d28>
   1d494:	and	r6, r1, r2
   1d498:	mov	r1, r6
   1d49c:	add	r5, pc, r5
   1d4a0:	bl	126ac <realloc@plt>
   1d4a4:	strd	r6, [r9]
   1d4a8:	str	r0, [r5]
   1d4ac:	ldr	r1, [sl, #4]
   1d4b0:	ldr	r2, [pc, #148]	; 1d54c <next@@Base+0x3d2c>
   1d4b4:	ldr	r2, [pc, r2]
   1d4b8:	b	1cdd4 <next@@Base+0x35b4>
   1d4bc:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1d4c0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1d4c4:	andeq	r4, r1, r8, lsl #31
   1d4c8:	andeq	r4, r1, ip, ror #30
   1d4cc:	andeq	r4, r1, r0, lsr #29
   1d4d0:	andeq	r2, r0, sp, asr r4
   1d4d4:	muleq	r1, r4, lr
   1d4d8:	andeq	r4, r1, r4, asr r5
   1d4dc:	andeq	r1, r0, r6, asr #23
   1d4e0:	andeq	r4, r1, r0, lsr #25
   1d4e4:	andeq	r4, r1, ip, asr pc
   1d4e8:	andeq	r4, r1, r0, asr pc
   1d4ec:	andeq	r4, r1, r4, asr #28
   1d4f0:	andeq	r4, r1, r4, lsl #30
   1d4f4:	andeq	r4, r1, r0, lsl #30
   1d4f8:	andeq	r4, r1, r0, ror #29
   1d4fc:	andeq	r4, r1, ip, lsl lr
   1d500:	ldrdeq	r4, [r1], -ip
   1d504:	andeq	r4, r1, r0, asr #27
   1d508:	andeq	r4, r1, ip, asr #26
   1d50c:	andeq	r4, r1, ip, lsl #26
   1d510:	strdeq	r4, [r1], -r0
   1d514:	andeq	r4, r1, r0, lsr r8
   1d518:	strdeq	r4, [r1], -r0
   1d51c:	ldrdeq	r4, [r1], -r0
   1d520:	andeq	r4, r1, r0, lsr #13
   1d524:	andeq	r4, r1, r0, ror #12
   1d528:	andeq	r4, r1, r0, asr r6
   1d52c:	andeq	r4, r1, r8, ror #21
   1d530:	andeq	r4, r1, r0, lsr #23
   1d534:	muleq	r1, r4, fp
   1d538:	andeq	r4, r1, ip, lsl r9
   1d53c:	andeq	r4, r1, r4, lsl r4
   1d540:	strdeq	r4, [r1], -r8
   1d544:	andeq	r4, r1, r8, lsl #7
   1d548:	andeq	r4, r1, r8, asr #6
   1d54c:	andeq	r4, r1, ip, lsr r3
   1d550:	ldrdeq	r4, [r1], -r0
   1d554:	andeq	r4, r1, r4, asr #19
   1d558:	andeq	r4, r1, r4, lsl #19
   1d55c:	andeq	r4, r1, r8, ror r9
   1d560:	andeq	r4, r1, r0, ror r9
   1d564:	andeq	r4, r1, r4, asr r9
   1d568:	andeq	r4, r1, r0, asr fp
   1d56c:	andeq	r4, r1, ip, asr #22
   1d570:	andeq	r4, r1, r0, lsr fp
   1d574:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1d578:			; <UNDEFINED> instruction: 0x000148b4
   1d57c:	muleq	r1, ip, r8
   1d580:	andeq	r4, r1, r8, ror #14
   1d584:	andeq	r4, r1, r8, lsr #14
   1d588:	andeq	r4, r1, ip, lsl #14
   1d58c:	andeq	r4, r1, ip, lsl #12
   1d590:	andeq	r4, r1, ip, asr #11
   1d594:			; <UNDEFINED> instruction: 0x000145b0
   1d598:	andeq	r4, r1, r0, lsr #10
   1d59c:	andeq	r4, r1, r0, ror #9
   1d5a0:	andeq	r4, r1, r4, asr #9
   1d5a4:	andeq	r4, r1, r4, asr r4
   1d5a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d5ac:	add	fp, sp, #28
   1d5b0:	sub	sp, sp, #4
   1d5b4:	ldr	r0, [pc, #496]	; 1d7ac <next@@Base+0x3f8c>
   1d5b8:	ldr	r0, [pc, r0]
   1d5bc:	cmp	r0, #0
   1d5c0:	beq	1d754 <next@@Base+0x3f34>
   1d5c4:	ldr	sl, [pc, #484]	; 1d7b0 <next@@Base+0x3f90>
   1d5c8:	mov	r5, #0
   1d5cc:	mov	r1, #0
   1d5d0:	add	sl, pc, sl
   1d5d4:	ldrb	r0, [sl]
   1d5d8:	ldr	r8, [pc, #468]	; 1d7b4 <next@@Base+0x3f94>
   1d5dc:	ldr	r4, [pc, #468]	; 1d7b8 <next@@Base+0x3f98>
   1d5e0:	cmp	r0, #1
   1d5e4:	add	r8, pc, r8
   1d5e8:	add	r4, pc, r4
   1d5ec:	bne	1d668 <next@@Base+0x3e48>
   1d5f0:	ldr	r9, [pc, #452]	; 1d7bc <next@@Base+0x3f9c>
   1d5f4:	ldr	r0, [r8, #4]
   1d5f8:	ldr	r2, [pc, #448]	; 1d7c0 <next@@Base+0x3fa0>
   1d5fc:	add	r9, pc, r9
   1d600:	mov	ip, r4
   1d604:	mov	r1, #1
   1d608:	ldr	r2, [pc, r2]
   1d60c:	ldr	r7, [r9, #4]
   1d610:	ldr	r4, [pc, #428]	; 1d7c4 <next@@Base+0x3fa4>
   1d614:	adds	r3, r2, #8
   1d618:	adc	r6, r0, #0
   1d61c:	ldr	r4, [pc, r4]
   1d620:	subs	r3, r4, r3
   1d624:	mov	r4, ip
   1d628:	sbcs	r3, r7, r6
   1d62c:	bcs	1d668 <next@@Base+0x3e48>
   1d630:	mov	r1, #7
   1d634:	orr	r1, r1, #131072	; 0x20000
   1d638:	adds	r1, r2, r1
   1d63c:	adc	r7, r0, #0
   1d640:	mov	r0, #16646144	; 0xfe0000
   1d644:	orr	r0, r0, #-16777216	; 0xff000000
   1d648:	and	r6, r1, r0
   1d64c:	ldr	r0, [pc, #372]	; 1d7c8 <next@@Base+0x3fa8>
   1d650:	mov	r1, r6
   1d654:	ldr	r0, [pc, r0]
   1d658:	bl	126ac <realloc@plt>
   1d65c:	ldrb	r1, [sl]
   1d660:	strd	r6, [r9]
   1d664:	str	r0, [r4]
   1d668:	ldr	r2, [pc, #348]	; 1d7cc <next@@Base+0x3fac>
   1d66c:	ldr	r2, [pc, r2]
   1d670:	ldr	r0, [pc, #344]	; 1d7d0 <next@@Base+0x3fb0>
   1d674:	ldr	r0, [pc, r0]
   1d678:	ldr	r3, [r8, #4]
   1d67c:	mov	r7, r0
   1d680:	strb	r5, [r7, r2]!
   1d684:	adds	r2, r2, #8
   1d688:	adc	r3, r3, #0
   1d68c:	strb	r5, [r7, #5]
   1d690:	strb	r5, [r7, #3]
   1d694:	strb	r5, [r7, #2]
   1d698:	strb	r5, [r7, #1]
   1d69c:	strb	r5, [r7, #4]!
   1d6a0:	cmp	r1, #0
   1d6a4:	strb	r5, [r7, #3]
   1d6a8:	strb	r5, [r7, #2]
   1d6ac:	strd	r2, [r8]
   1d6b0:	beq	1d6d8 <next@@Base+0x3eb8>
   1d6b4:	ldr	r3, [pc, #280]	; 1d7d4 <next@@Base+0x3fb4>
   1d6b8:	mov	r1, r2
   1d6bc:	mov	r2, #1
   1d6c0:	ldr	r3, [pc, r3]
   1d6c4:	bl	126b8 <fwrite@plt>
   1d6c8:	ldr	r0, [pc, #264]	; 1d7d8 <next@@Base+0x3fb8>
   1d6cc:	ldr	r0, [pc, r0]
   1d6d0:	bl	1264c <free@plt>
   1d6d4:	b	1d71c <next@@Base+0x3efc>
   1d6d8:	ldr	r1, [pc, #252]	; 1d7dc <next@@Base+0x3fbc>
   1d6dc:	mov	r2, #4
   1d6e0:	ldr	r1, [pc, r1]
   1d6e4:	bl	127cc <msync@plt>
   1d6e8:	cmn	r0, #1
   1d6ec:	beq	1d768 <next@@Base+0x3f48>
   1d6f0:	ldr	r1, [pc, #244]	; 1d7ec <next@@Base+0x3fcc>
   1d6f4:	ldr	r1, [pc, r1]
   1d6f8:	ldr	r0, [pc, #240]	; 1d7f0 <next@@Base+0x3fd0>
   1d6fc:	ldr	r0, [pc, r0]
   1d700:	bl	127a8 <munmap@plt>
   1d704:	ldr	r0, [pc, #232]	; 1d7f4 <next@@Base+0x3fd4>
   1d708:	mov	r1, #0
   1d70c:	str	r1, [r4]
   1d710:	add	r0, pc, r0
   1d714:	str	r1, [r0]
   1d718:	str	r1, [r0, #4]
   1d71c:	ldr	r0, [pc, #212]	; 1d7f8 <next@@Base+0x3fd8>
   1d720:	ldr	r0, [pc, r0]
   1d724:	bl	12634 <fflush@plt>
   1d728:	ldr	r0, [pc, #204]	; 1d7fc <next@@Base+0x3fdc>
   1d72c:	ldr	r0, [pc, r0]
   1d730:	bl	1dca8 <__gcov_flush@@Base+0x304>
   1d734:	ldr	r0, [pc, #196]	; 1d800 <next@@Base+0x3fe0>
   1d738:	ldr	r0, [pc, r0]
   1d73c:	bl	1279c <fclose@plt>
   1d740:	ldr	r0, [pc, #188]	; 1d804 <next@@Base+0x3fe4>
   1d744:	mov	r1, #0
   1d748:	str	r1, [r4]
   1d74c:	add	r0, pc, r0
   1d750:	str	r1, [r0]
   1d754:	ldr	r0, [pc, #172]	; 1d808 <next@@Base+0x3fe8>
   1d758:	ldr	r0, [pc, r0]
   1d75c:	sub	sp, fp, #28
   1d760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d764:	b	1264c <free@plt>
   1d768:	bl	12748 <__errno_location@plt>
   1d76c:	ldr	r1, [pc, #108]	; 1d7e0 <next@@Base+0x3fc0>
   1d770:	mov	r6, r4
   1d774:	ldr	r1, [pc, r1]
   1d778:	ldr	r0, [r0]
   1d77c:	ldr	r4, [r1]
   1d780:	ldr	r5, [pc, #92]	; 1d7e4 <next@@Base+0x3fc4>
   1d784:	ldr	r5, [pc, r5]
   1d788:	bl	126f4 <strerror@plt>
   1d78c:	ldr	r1, [pc, #84]	; 1d7e8 <next@@Base+0x3fc8>
   1d790:	mov	r3, r0
   1d794:	mov	r0, r4
   1d798:	add	r1, pc, r1
   1d79c:	mov	r2, r5
   1d7a0:	mov	r4, r6
   1d7a4:	bl	1273c <fprintf@plt>
   1d7a8:	b	1d6f0 <next@@Base+0x3ed0>
   1d7ac:	andeq	r4, r1, r8, lsr #4
   1d7b0:	andeq	r4, r1, ip, lsl #4
   1d7b4:	andeq	r4, r1, ip, lsl #4
   1d7b8:	strdeq	r4, [r1], -ip
   1d7bc:	andeq	r4, r1, ip, ror #3
   1d7c0:	andeq	r4, r1, r8, ror #3
   1d7c4:	andeq	r4, r1, ip, asr #3
   1d7c8:	muleq	r1, r0, r1
   1d7cc:	andeq	r4, r1, r4, lsl #3
   1d7d0:	andeq	r4, r1, r0, ror r1
   1d7d4:	andeq	r4, r1, r0, lsr #2
   1d7d8:	andeq	r4, r1, r8, lsl r1
   1d7dc:	andeq	r4, r1, r8, lsr #2
   1d7e0:	muleq	r1, r8, r9
   1d7e4:	andeq	r4, r1, r4, asr r0
   1d7e8:	andeq	r1, r0, ip, lsl #14
   1d7ec:	andeq	r4, r1, r4, lsl r1
   1d7f0:	andeq	r4, r1, r8, ror #1
   1d7f4:	strdeq	r4, [r1], -r8
   1d7f8:	andeq	r4, r1, r0, asr #1
   1d7fc:	andeq	r2, r1, ip, ror #20
   1d800:	andeq	r4, r1, r8, lsr #1
   1d804:	muleq	r1, r4, r0
   1d808:	andeq	r4, r1, r0, lsl #1
   1d80c:	push	{r4, sl, fp, lr}
   1d810:	add	fp, sp, #8
   1d814:	mov	r4, r0
   1d818:	mov	r0, #12
   1d81c:	bl	126dc <malloc@plt>
   1d820:	ldr	r1, [pc, #60]	; 1d864 <next@@Base+0x4044>
   1d824:	mov	r2, #0
   1d828:	add	r1, pc, r1
   1d82c:	stm	r0, {r1, r4}
   1d830:	str	r2, [r0, #8]
   1d834:	ldr	r1, [pc, #44]	; 1d868 <next@@Base+0x4048>
   1d838:	ldr	r1, [pc, r1]
   1d83c:	mov	r2, r1
   1d840:	ldr	r3, [r2], #4
   1d844:	ldr	r4, [r2]
   1d848:	cmp	r3, #0
   1d84c:	mov	r3, r2
   1d850:	addne	r3, r4, #8
   1d854:	moveq	r2, r1
   1d858:	str	r0, [r3]
   1d85c:	str	r0, [r2]
   1d860:	pop	{r4, sl, fp, pc}
   1d864:	ldrdeq	r3, [r1], -r4
   1d868:	andeq	r2, r1, ip, lsr #17
   1d86c:	push	{r4, r5, fp, lr}
   1d870:	add	fp, sp, #8
   1d874:	ldr	r0, [pc, #64]	; 1d8bc <next@@Base+0x409c>
   1d878:	ldr	r0, [pc, r0]
   1d87c:	ldr	r4, [r0]
   1d880:	cmp	r4, #0
   1d884:	beq	1d8b8 <next@@Base+0x4098>
   1d888:	ldr	r5, [pc, #48]	; 1d8c0 <next@@Base+0x40a0>
   1d88c:	add	r5, pc, r5
   1d890:	b	1d8a0 <next@@Base+0x4080>
   1d894:	ldr	r4, [r4, #8]
   1d898:	cmp	r4, #0
   1d89c:	beq	1d8b8 <next@@Base+0x4098>
   1d8a0:	ldr	r0, [r4]
   1d8a4:	cmp	r0, r5
   1d8a8:	bne	1d894 <next@@Base+0x4074>
   1d8ac:	ldr	r0, [r4, #4]
   1d8b0:	blx	r0
   1d8b4:	b	1d894 <next@@Base+0x4074>
   1d8b8:	pop	{r4, r5, fp, pc}
   1d8bc:	andeq	r2, r1, ip, ror #16
   1d8c0:	andeq	r3, r1, r0, ror pc
   1d8c4:	push	{r4, r5, r6, r7, fp, lr}
   1d8c8:	add	fp, sp, #16
   1d8cc:	ldr	r4, [pc, #104]	; 1d93c <next@@Base+0x411c>
   1d8d0:	ldr	r4, [pc, r4]
   1d8d4:	ldr	r0, [r4]
   1d8d8:	cmp	r0, #0
   1d8dc:	beq	1d938 <next@@Base+0x4118>
   1d8e0:	ldr	r5, [pc, #88]	; 1d940 <next@@Base+0x4120>
   1d8e4:	mov	r6, #0
   1d8e8:	add	r5, pc, r5
   1d8ec:	b	1d920 <next@@Base+0x4100>
   1d8f0:	ldr	r1, [r4]
   1d8f4:	cmp	r0, r1
   1d8f8:	streq	r7, [r4]
   1d8fc:	ldr	r1, [r4, #4]
   1d900:	cmp	r0, r1
   1d904:	streq	r6, [r4, #4]
   1d908:	cmp	r6, #0
   1d90c:	strne	r7, [r6, #8]
   1d910:	bl	1264c <free@plt>
   1d914:	mov	r0, r7
   1d918:	cmp	r7, #0
   1d91c:	beq	1d938 <next@@Base+0x4118>
   1d920:	ldr	r1, [r0]
   1d924:	ldr	r7, [r0, #8]
   1d928:	cmp	r1, r5
   1d92c:	beq	1d8f0 <next@@Base+0x40d0>
   1d930:	mov	r6, r0
   1d934:	b	1d914 <next@@Base+0x40f4>
   1d938:	pop	{r4, r5, r6, r7, fp, pc}
   1d93c:	andeq	r2, r1, r4, lsl r8
   1d940:	andeq	r3, r1, r4, lsl pc
   1d944:	push	{r4, sl, fp, lr}
   1d948:	add	fp, sp, #8
   1d94c:	mov	r4, r0
   1d950:	mov	r0, #12
   1d954:	bl	126dc <malloc@plt>
   1d958:	ldr	r1, [pc, #60]	; 1d99c <next@@Base+0x417c>
   1d95c:	mov	r2, #0
   1d960:	add	r1, pc, r1
   1d964:	stm	r0, {r1, r4}
   1d968:	str	r2, [r0, #8]
   1d96c:	ldr	r1, [pc, #44]	; 1d9a0 <next@@Base+0x4180>
   1d970:	ldr	r1, [pc, r1]
   1d974:	mov	r2, r1
   1d978:	ldr	r3, [r2], #4
   1d97c:	ldr	r4, [r2]
   1d980:	cmp	r3, #0
   1d984:	mov	r3, r2
   1d988:	addne	r3, r4, #8
   1d98c:	moveq	r2, r1
   1d990:	str	r0, [r3]
   1d994:	str	r0, [r2]
   1d998:	pop	{r4, sl, fp, pc}
   1d99c:	muleq	r1, ip, lr
   1d9a0:	andeq	r2, r1, ip, ror #14

0001d9a4 <__gcov_flush@@Base>:
   1d9a4:	push	{r4, sl, fp, lr}
   1d9a8:	add	fp, sp, #8
   1d9ac:	ldr	r0, [pc, #36]	; 1d9d8 <__gcov_flush@@Base+0x34>
   1d9b0:	ldr	r0, [pc, r0]
   1d9b4:	ldr	r4, [r0]
   1d9b8:	cmp	r4, #0
   1d9bc:	beq	1d9d4 <__gcov_flush@@Base+0x30>
   1d9c0:	ldr	r0, [r4, #4]
   1d9c4:	blx	r0
   1d9c8:	ldr	r4, [r4, #8]
   1d9cc:	cmp	r4, #0
   1d9d0:	bne	1d9c0 <__gcov_flush@@Base+0x1c>
   1d9d4:	pop	{r4, sl, fp, pc}
   1d9d8:	andeq	r2, r1, ip, lsr #14
   1d9dc:	push	{r4, r5, r6, r7, fp, lr}
   1d9e0:	add	fp, sp, #16
   1d9e4:	ldr	r4, [pc, #104]	; 1da54 <__gcov_flush@@Base+0xb0>
   1d9e8:	ldr	r4, [pc, r4]
   1d9ec:	ldr	r0, [r4]
   1d9f0:	cmp	r0, #0
   1d9f4:	beq	1da50 <__gcov_flush@@Base+0xac>
   1d9f8:	ldr	r5, [pc, #88]	; 1da58 <__gcov_flush@@Base+0xb4>
   1d9fc:	mov	r6, #0
   1da00:	add	r5, pc, r5
   1da04:	b	1da38 <__gcov_flush@@Base+0x94>
   1da08:	ldr	r1, [r4]
   1da0c:	cmp	r0, r1
   1da10:	streq	r7, [r4]
   1da14:	ldr	r1, [r4, #4]
   1da18:	cmp	r0, r1
   1da1c:	streq	r6, [r4, #4]
   1da20:	cmp	r6, #0
   1da24:	strne	r7, [r6, #8]
   1da28:	bl	1264c <free@plt>
   1da2c:	mov	r0, r7
   1da30:	cmp	r7, #0
   1da34:	beq	1da50 <__gcov_flush@@Base+0xac>
   1da38:	ldr	r1, [r0]
   1da3c:	ldr	r7, [r0, #8]
   1da40:	cmp	r1, r5
   1da44:	beq	1da08 <__gcov_flush@@Base+0x64>
   1da48:	mov	r6, r0
   1da4c:	b	1da2c <__gcov_flush@@Base+0x88>
   1da50:	pop	{r4, r5, r6, r7, fp, pc}
   1da54:	strdeq	r2, [r1], -r4
   1da58:	strdeq	r3, [r1], -ip
   1da5c:	push	{r4, r5, r6, sl, fp, lr}
   1da60:	add	fp, sp, #16
   1da64:	ldr	r6, [pc, #228]	; 1db50 <__gcov_flush@@Base+0x1ac>
   1da68:	mov	r4, r1
   1da6c:	cmp	r0, #0
   1da70:	add	r6, pc, r6
   1da74:	beq	1dac0 <__gcov_flush@@Base+0x11c>
   1da78:	mov	r5, r0
   1da7c:	mov	r0, #12
   1da80:	bl	126dc <malloc@plt>
   1da84:	mov	r1, #0
   1da88:	str	r6, [r0]
   1da8c:	str	r5, [r0, #4]
   1da90:	str	r1, [r0, #8]
   1da94:	ldr	r1, [pc, #184]	; 1db54 <__gcov_flush@@Base+0x1b0>
   1da98:	ldr	r1, [pc, r1]
   1da9c:	mov	r2, r1
   1daa0:	ldr	r3, [r2], #4
   1daa4:	ldr	r5, [r2]
   1daa8:	cmp	r3, #0
   1daac:	mov	r3, r2
   1dab0:	addne	r3, r5, #8
   1dab4:	moveq	r2, r1
   1dab8:	str	r0, [r3]
   1dabc:	str	r0, [r2]
   1dac0:	cmp	r4, #0
   1dac4:	beq	1db0c <__gcov_flush@@Base+0x168>
   1dac8:	mov	r0, #12
   1dacc:	bl	126dc <malloc@plt>
   1dad0:	mov	r1, #0
   1dad4:	str	r6, [r0]
   1dad8:	str	r4, [r0, #4]
   1dadc:	str	r1, [r0, #8]
   1dae0:	ldr	r1, [pc, #112]	; 1db58 <__gcov_flush@@Base+0x1b4>
   1dae4:	ldr	r1, [pc, r1]
   1dae8:	mov	r2, r1
   1daec:	ldr	r3, [r2], #4
   1daf0:	ldr	r6, [r2]
   1daf4:	cmp	r3, #0
   1daf8:	mov	r3, r2
   1dafc:	addne	r3, r6, #8
   1db00:	moveq	r2, r1
   1db04:	str	r0, [r3]
   1db08:	str	r0, [r2]
   1db0c:	ldr	r1, [pc, #72]	; 1db5c <__gcov_flush@@Base+0x1b8>
   1db10:	add	r1, pc, r1
   1db14:	ldrb	r0, [r1]
   1db18:	cmp	r0, #0
   1db1c:	popne	{r4, r5, r6, sl, fp, pc}
   1db20:	ldr	r0, [pc, #56]	; 1db60 <__gcov_flush@@Base+0x1bc>
   1db24:	mov	r2, #1
   1db28:	strb	r2, [r1]
   1db2c:	add	r0, pc, r0
   1db30:	bl	1e0fc <__libc_csu_fini@@Base+0x4>
   1db34:	ldr	r0, [pc, #40]	; 1db64 <__gcov_flush@@Base+0x1c0>
   1db38:	add	r0, pc, r0
   1db3c:	bl	1e0fc <__libc_csu_fini@@Base+0x4>
   1db40:	ldr	r0, [pc, #32]	; 1db68 <__gcov_flush@@Base+0x1c4>
   1db44:	add	r0, pc, r0
   1db48:	pop	{r4, r5, r6, sl, fp, lr}
   1db4c:	b	1e0fc <__libc_csu_fini@@Base+0x4>
   1db50:	andeq	r3, r1, ip, lsl #27
   1db54:	andeq	r2, r1, ip, asr #12
   1db58:	strdeq	r2, [r1], -r8
   1db5c:	strdeq	r3, [r1], -r0
   1db60:			; <UNDEFINED> instruction: 0xfffffea8
   1db64:			; <UNDEFINED> instruction: 0xfffffd84
   1db68:			; <UNDEFINED> instruction: 0xfffffd20
   1db6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1db70:	add	fp, sp, #24
   1db74:	ldr	r7, [pc, #68]	; 1dbc0 <__gcov_flush@@Base+0x21c>
   1db78:	mov	r4, r0
   1db7c:	mov	r5, #1
   1db80:	mov	r8, #0
   1db84:	ldr	r7, [pc, r7]
   1db88:	mov	r6, #47	; 0x2f
   1db8c:	b	1dba8 <__gcov_flush@@Base+0x204>
   1db90:	strb	r8, [r4, r5]
   1db94:	ldr	r1, [r7]
   1db98:	mov	r0, r4
   1db9c:	bl	12760 <mkdir@plt>
   1dba0:	strb	r6, [r4, r5]
   1dba4:	add	r5, r5, #1
   1dba8:	ldrb	r0, [r4, r5]
   1dbac:	cmp	r0, #47	; 0x2f
   1dbb0:	beq	1db90 <__gcov_flush@@Base+0x1ec>
   1dbb4:	cmp	r0, #0
   1dbb8:	bne	1dba4 <__gcov_flush@@Base+0x200>
   1dbbc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1dbc0:	andeq	r2, r1, r4, lsr r5
   1dbc4:	ldr	r0, [pc, #8]	; 1dbd4 <__gcov_flush@@Base+0x230>
   1dbc8:	ldr	r0, [pc, r0]
   1dbcc:	ldr	r0, [r0]
   1dbd0:	bx	lr
   1dbd4:	strdeq	r2, [r1], -r0
   1dbd8:	ldr	r1, [pc, #8]	; 1dbe8 <__gcov_flush@@Base+0x244>
   1dbdc:	ldr	r1, [pc, r1]
   1dbe0:	str	r0, [r1]
   1dbe4:	bx	lr
   1dbe8:	ldrdeq	r2, [r1], -ip
   1dbec:	push	{r4, r5, r6, sl, fp, lr}
   1dbf0:	add	fp, sp, #16
   1dbf4:	sub	sp, sp, #392	; 0x188
   1dbf8:	mov	r6, sp
   1dbfc:	mov	r5, r0
   1dc00:	mov	r0, r6
   1dc04:	mov	r4, r1
   1dc08:	bl	12688 <uname@plt>
   1dc0c:	cmp	r0, #0
   1dc10:	bmi	1dc28 <__gcov_flush@@Base+0x284>
   1dc14:	add	r1, r6, #65	; 0x41
   1dc18:	mov	r0, r5
   1dc1c:	mov	r2, r4
   1dc20:	bl	12778 <strncpy@plt>
   1dc24:	mov	r0, #0
   1dc28:	sub	sp, fp, #16
   1dc2c:	pop	{r4, r5, r6, sl, fp, pc}
   1dc30:	push	{r4, r5, r6, sl, fp, lr}
   1dc34:	add	fp, sp, #16
   1dc38:	sub	sp, sp, #32
   1dc3c:	mov	r4, #0
   1dc40:	str	r4, [sp, #8]
   1dc44:	strh	r4, [sp, #2]
   1dc48:	mov	r5, r0
   1dc4c:	str	r4, [sp, #12]
   1dc50:	str	r4, [sp, #16]
   1dc54:	str	r4, [sp, #20]
   1dc58:	bl	1270c <getpid@plt>
   1dc5c:	mov	r6, sp
   1dc60:	str	r0, [sp, #24]
   1dc64:	mov	r0, #1
   1dc68:	strh	r0, [sp]
   1dc6c:	mov	r0, r5
   1dc70:	mov	r1, #14
   1dc74:	mov	r2, r6
   1dc78:	bl	127b4 <fcntl64@plt>
   1dc7c:	cmn	r0, #1
   1dc80:	bne	1dc9c <__gcov_flush@@Base+0x2f8>
   1dc84:	bl	12748 <__errno_location@plt>
   1dc88:	ldr	r0, [r0]
   1dc8c:	cmp	r0, #4
   1dc90:	beq	1dc6c <__gcov_flush@@Base+0x2c8>
   1dc94:	cmp	r0, #37	; 0x25
   1dc98:	mvneq	r4, #0
   1dc9c:	mov	r0, r4
   1dca0:	sub	sp, fp, #16
   1dca4:	pop	{r4, r5, r6, sl, fp, pc}
   1dca8:	push	{r4, r5, r6, sl, fp, lr}
   1dcac:	add	fp, sp, #16
   1dcb0:	sub	sp, sp, #32
   1dcb4:	mov	r4, #0
   1dcb8:	str	r4, [sp, #8]
   1dcbc:	strh	r4, [sp, #2]
   1dcc0:	mov	r5, r0
   1dcc4:	str	r4, [sp, #12]
   1dcc8:	str	r4, [sp, #16]
   1dccc:	str	r4, [sp, #20]
   1dcd0:	bl	1270c <getpid@plt>
   1dcd4:	mov	r6, sp
   1dcd8:	str	r0, [sp, #24]
   1dcdc:	mov	r0, #2
   1dce0:	strh	r0, [sp]
   1dce4:	mov	r0, r5
   1dce8:	mov	r1, #14
   1dcec:	mov	r2, r6
   1dcf0:	bl	127b4 <fcntl64@plt>
   1dcf4:	cmn	r0, #1
   1dcf8:	bne	1dd14 <__gcov_flush@@Base+0x370>
   1dcfc:	bl	12748 <__errno_location@plt>
   1dd00:	ldr	r0, [r0]
   1dd04:	cmp	r0, #4
   1dd08:	beq	1dce4 <__gcov_flush@@Base+0x340>
   1dd0c:	cmp	r0, #37	; 0x25
   1dd10:	mvneq	r4, #0
   1dd14:	mov	r0, r4
   1dd18:	sub	sp, fp, #16
   1dd1c:	pop	{r4, r5, r6, sl, fp, pc}
   1dd20:	push	{r4, r5, r6, sl, fp, lr}
   1dd24:	add	fp, sp, #16
   1dd28:	sub	sp, sp, #32
   1dd2c:	bl	12790 <fileno@plt>
   1dd30:	mov	r4, #0
   1dd34:	str	r4, [sp, #8]
   1dd38:	strh	r4, [sp, #2]
   1dd3c:	mov	r5, r0
   1dd40:	str	r4, [sp, #12]
   1dd44:	str	r4, [sp, #16]
   1dd48:	str	r4, [sp, #20]
   1dd4c:	bl	1270c <getpid@plt>
   1dd50:	mov	r6, sp
   1dd54:	str	r0, [sp, #24]
   1dd58:	mov	r0, #1
   1dd5c:	strh	r0, [sp]
   1dd60:	mov	r0, r5
   1dd64:	mov	r1, #14
   1dd68:	mov	r2, r6
   1dd6c:	bl	127b4 <fcntl64@plt>
   1dd70:	cmn	r0, #1
   1dd74:	bne	1dd90 <__gcov_flush@@Base+0x3ec>
   1dd78:	bl	12748 <__errno_location@plt>
   1dd7c:	ldr	r0, [r0]
   1dd80:	cmp	r0, #4
   1dd84:	beq	1dd60 <__gcov_flush@@Base+0x3bc>
   1dd88:	cmp	r0, #37	; 0x25
   1dd8c:	mvneq	r4, #0
   1dd90:	mov	r0, r4
   1dd94:	sub	sp, fp, #16
   1dd98:	pop	{r4, r5, r6, sl, fp, pc}
   1dd9c:	push	{r4, r5, r6, sl, fp, lr}
   1dda0:	add	fp, sp, #16
   1dda4:	sub	sp, sp, #32
   1dda8:	bl	12790 <fileno@plt>
   1ddac:	mov	r4, #0
   1ddb0:	str	r4, [sp, #8]
   1ddb4:	strh	r4, [sp, #2]
   1ddb8:	mov	r5, r0
   1ddbc:	str	r4, [sp, #12]
   1ddc0:	str	r4, [sp, #16]
   1ddc4:	str	r4, [sp, #20]
   1ddc8:	bl	1270c <getpid@plt>
   1ddcc:	mov	r6, sp
   1ddd0:	str	r0, [sp, #24]
   1ddd4:	mov	r0, #2
   1ddd8:	strh	r0, [sp]
   1dddc:	mov	r0, r5
   1dde0:	mov	r1, #14
   1dde4:	mov	r2, r6
   1dde8:	bl	127b4 <fcntl64@plt>
   1ddec:	cmn	r0, #1
   1ddf0:	bne	1de0c <__gcov_flush@@Base+0x468>
   1ddf4:	bl	12748 <__errno_location@plt>
   1ddf8:	ldr	r0, [r0]
   1ddfc:	cmp	r0, #4
   1de00:	beq	1dddc <__gcov_flush@@Base+0x438>
   1de04:	cmp	r0, #37	; 0x25
   1de08:	mvneq	r4, #0
   1de0c:	mov	r0, r4
   1de10:	sub	sp, fp, #16
   1de14:	pop	{r4, r5, r6, sl, fp, pc}
   1de18:	push	{r4, r5, fp, lr}
   1de1c:	add	fp, sp, #8
   1de20:	sub	sp, sp, #32
   1de24:	mov	r2, #182	; 0xb6
   1de28:	orr	r2, r2, #256	; 0x100
   1de2c:	mov	r1, #66	; 0x42
   1de30:	bl	126c4 <open64@plt>
   1de34:	cmp	r0, #0
   1de38:	bmi	1deb4 <__gcov_flush@@Base+0x510>
   1de3c:	mov	r4, r0
   1de40:	mov	r0, #0
   1de44:	str	r0, [sp, #8]
   1de48:	strh	r0, [sp, #2]
   1de4c:	str	r0, [sp, #12]
   1de50:	str	r0, [sp, #16]
   1de54:	str	r0, [sp, #20]
   1de58:	bl	1270c <getpid@plt>
   1de5c:	mov	r5, sp
   1de60:	str	r0, [sp, #24]
   1de64:	mov	r0, #1
   1de68:	strh	r0, [sp]
   1de6c:	mov	r0, r4
   1de70:	mov	r1, #14
   1de74:	mov	r2, r5
   1de78:	bl	127b4 <fcntl64@plt>
   1de7c:	cmn	r0, #1
   1de80:	bne	1de9c <__gcov_flush@@Base+0x4f8>
   1de84:	bl	12748 <__errno_location@plt>
   1de88:	ldr	r0, [r0]
   1de8c:	cmp	r0, #4
   1de90:	beq	1de6c <__gcov_flush@@Base+0x4c8>
   1de94:	cmp	r0, #37	; 0x25
   1de98:	beq	1dec0 <__gcov_flush@@Base+0x51c>
   1de9c:	ldr	r1, [pc, #76]	; 1def0 <__gcov_flush@@Base+0x54c>
   1dea0:	mov	r0, r4
   1dea4:	add	r1, pc, r1
   1dea8:	bl	12610 <fdopen@plt>
   1deac:	sub	sp, fp, #8
   1deb0:	pop	{r4, r5, fp, pc}
   1deb4:	mov	r0, #0
   1deb8:	sub	sp, fp, #8
   1debc:	pop	{r4, r5, fp, pc}
   1dec0:	ldr	r1, [pc, #28]	; 1dee4 <__gcov_flush@@Base+0x540>
   1dec4:	ldr	r2, [pc, #28]	; 1dee8 <__gcov_flush@@Base+0x544>
   1dec8:	ldr	r0, [pc, #28]	; 1deec <__gcov_flush@@Base+0x548>
   1decc:	add	r1, pc, r1
   1ded0:	add	r2, pc, r2
   1ded4:	ldr	r0, [pc, r0]
   1ded8:	ldr	r0, [r0]
   1dedc:	bl	1273c <fprintf@plt>
   1dee0:	b	1de9c <__gcov_flush@@Base+0x4f8>
   1dee4:	strdeq	r0, [r0], -r9
   1dee8:	andeq	r1, r0, lr, lsr r0
   1deec:	andeq	r2, r1, r8, lsr r2
   1def0:	andeq	r0, r0, pc, ror lr
   1def4:	push	{r4, r5, r6, sl, fp, lr}
   1def8:	add	fp, sp, #16
   1defc:	mov	r6, r0
   1df00:	ldr	r0, [pc, #120]	; 1df80 <__gcov_flush@@Base+0x5dc>
   1df04:	mov	r4, r1
   1df08:	add	r0, pc, r0
   1df0c:	bl	126d0 <getenv@plt>
   1df10:	mov	r5, r0
   1df14:	ldr	r0, [pc, #104]	; 1df84 <__gcov_flush@@Base+0x5e0>
   1df18:	add	r0, pc, r0
   1df1c:	bl	126d0 <getenv@plt>
   1df20:	mov	r1, #0
   1df24:	str	r1, [r4]
   1df28:	str	r1, [r6]
   1df2c:	cmp	r5, #0
   1df30:	ldrbne	r2, [r5]
   1df34:	cmpne	r2, #0
   1df38:	bne	1df44 <__gcov_flush@@Base+0x5a0>
   1df3c:	mov	r0, r1
   1df40:	pop	{r4, r5, r6, sl, fp, pc}
   1df44:	cmp	r0, #0
   1df48:	beq	1df60 <__gcov_flush@@Base+0x5bc>
   1df4c:	mov	r1, #0
   1df50:	mov	r2, #10
   1df54:	bl	1261c <strtol@plt>
   1df58:	bic	r0, r0, r0, asr #31
   1df5c:	b	1df64 <__gcov_flush@@Base+0x5c0>
   1df60:	mov	r0, #0
   1df64:	str	r0, [r6]
   1df68:	mov	r0, r5
   1df6c:	bl	12724 <strlen@plt>
   1df70:	mov	r1, r5
   1df74:	str	r0, [r4]
   1df78:	mov	r0, r1
   1df7c:	pop	{r4, r5, r6, sl, fp, pc}
   1df80:	andeq	r1, r0, r4, lsr r0
   1df84:	andeq	r1, r0, r0, lsr r0
   1df88:	push	{r4, r5, r6, r7, fp, lr}
   1df8c:	add	fp, sp, #16
   1df90:	mov	r6, r0
   1df94:	ldr	r0, [fp, #8]
   1df98:	mov	r5, r3
   1df9c:	mov	r7, r2
   1dfa0:	mov	r4, r1
   1dfa4:	cmp	r0, #1
   1dfa8:	blt	1dfe0 <__gcov_flush@@Base+0x63c>
   1dfac:	add	r1, r4, #1
   1dfb0:	mov	r2, #0
   1dfb4:	b	1dfcc <__gcov_flush@@Base+0x628>
   1dfb8:	add	r2, r2, #1
   1dfbc:	mov	r4, r1
   1dfc0:	add	r1, r1, #1
   1dfc4:	cmp	r2, r0
   1dfc8:	bge	1dfe0 <__gcov_flush@@Base+0x63c>
   1dfcc:	ldrb	r3, [r1]
   1dfd0:	cmp	r3, #47	; 0x2f
   1dfd4:	beq	1dfb8 <__gcov_flush@@Base+0x614>
   1dfd8:	cmp	r3, #0
   1dfdc:	bne	1dfc0 <__gcov_flush@@Base+0x61c>
   1dfe0:	mov	r0, r6
   1dfe4:	mov	r1, r7
   1dfe8:	mov	r2, r5
   1dfec:	bl	12664 <memcpy@plt>
   1dff0:	add	r0, r5, r7
   1dff4:	ldrb	r0, [r0, #-1]
   1dff8:	cmp	r0, #47	; 0x2f
   1dffc:	movne	r0, #47	; 0x2f
   1e000:	strbne	r0, [r6, r5]
   1e004:	mov	r0, r4
   1e008:	addne	r5, r5, #1
   1e00c:	add	r5, r6, r5
   1e010:	bl	12724 <strlen@plt>
   1e014:	add	r2, r0, #1
   1e018:	mov	r0, r5
   1e01c:	mov	r1, r4
   1e020:	pop	{r4, r5, r6, r7, fp, lr}
   1e024:	b	12664 <memcpy@plt>
   1e028:	mov	r1, #47	; 0x2f
   1e02c:	b	12730 <strchr@plt>
   1e030:	mov	r1, #47	; 0x2f
   1e034:	b	127c0 <strrchr@plt>
   1e038:	push	{fp, lr}
   1e03c:	mov	fp, sp
   1e040:	sub	sp, sp, #8
   1e044:	mov	r0, #0
   1e048:	str	r0, [sp, #4]
   1e04c:	add	r1, sp, #4
   1e050:	mov	r0, #2
   1e054:	bl	12784 <prctl@plt>
   1e058:	ldr	r1, [sp, #4]
   1e05c:	cmp	r0, #0
   1e060:	cmpeq	r1, #9
   1e064:	bne	1e078 <__gcov_flush@@Base+0x6d4>
   1e068:	mov	r0, #1
   1e06c:	mov	r1, #0
   1e070:	bl	12784 <prctl@plt>
   1e074:	ldr	r1, [sp, #4]
   1e078:	sub	r0, r1, #9
   1e07c:	clz	r0, r0
   1e080:	lsr	r0, r0, #5
   1e084:	mov	sp, fp
   1e088:	pop	{fp, pc}
   1e08c:	mov	r0, #1
   1e090:	mov	r1, #9
   1e094:	b	12784 <prctl@plt>

0001e098 <__libc_csu_init@@Base>:
   1e098:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e09c:	mov	r7, r0
   1e0a0:	ldr	r6, [pc, #72]	; 1e0f0 <__libc_csu_init@@Base+0x58>
   1e0a4:	ldr	r5, [pc, #72]	; 1e0f4 <__libc_csu_init@@Base+0x5c>
   1e0a8:	add	r6, pc, r6
   1e0ac:	add	r5, pc, r5
   1e0b0:	sub	r6, r6, r5
   1e0b4:	mov	r8, r1
   1e0b8:	mov	r9, r2
   1e0bc:	bl	125f0 <fdopen@plt-0x20>
   1e0c0:	asrs	r6, r6, #2
   1e0c4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e0c8:	mov	r4, #0
   1e0cc:	add	r4, r4, #1
   1e0d0:	ldr	r3, [r5], #4
   1e0d4:	mov	r2, r9
   1e0d8:	mov	r1, r8
   1e0dc:	mov	r0, r7
   1e0e0:	blx	r3
   1e0e4:	cmp	r6, r4
   1e0e8:	bne	1e0cc <__libc_csu_init@@Base+0x34>
   1e0ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e0f0:	andeq	r1, r1, ip, ror #6
   1e0f4:	andeq	r1, r1, r4, asr r3

0001e0f8 <__libc_csu_fini@@Base>:
   1e0f8:	bx	lr
   1e0fc:	ldr	r3, [pc, #12]	; 1e110 <__libc_csu_fini@@Base+0x18>
   1e100:	mov	r1, #0
   1e104:	add	r3, pc, r3
   1e108:	ldr	r2, [r3]
   1e10c:	b	12754 <__cxa_atexit@plt>
   1e110:	muleq	r1, r0, r0

Disassembly of section .fini:

0001e114 <.fini>:
   1e114:	push	{r3, lr}
   1e118:	pop	{r3, pc}
