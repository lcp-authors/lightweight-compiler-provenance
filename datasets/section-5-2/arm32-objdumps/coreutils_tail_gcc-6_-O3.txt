
../repos/coreutils/src/tail:     file format elf32-littlearm


Disassembly of section .init:

0001107c <.init>:
   1107c:	push	{r3, lr}
   11080:	bl	141fc <__assert_fail@plt+0x2de8>
   11084:	pop	{r3, pc}

Disassembly of section .plt:

00011088 <fstatfs64@plt-0x14>:
   11088:	push	{lr}		; (str lr, [sp, #-4]!)
   1108c:	ldr	lr, [pc, #4]	; 11098 <fstatfs64@plt-0x4>
   11090:	add	lr, pc, lr
   11094:	ldr	pc, [lr, #8]!
   11098:	andeq	r0, r2, r8, ror #30

0001109c <fstatfs64@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #32, 20	; 0x20000
   110a4:	ldr	pc, [ip, #3944]!	; 0xf68

000110a8 <calloc@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #32, 20	; 0x20000
   110b0:	ldr	pc, [ip, #3936]!	; 0xf60

000110b4 <fputs_unlocked@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #32, 20	; 0x20000
   110bc:	ldr	pc, [ip, #3928]!	; 0xf58

000110c0 <raise@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #32, 20	; 0x20000
   110c8:	ldr	pc, [ip, #3920]!	; 0xf50

000110cc <strcmp@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #32, 20	; 0x20000
   110d4:	ldr	pc, [ip, #3912]!	; 0xf48

000110d8 <strtol@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #32, 20	; 0x20000
   110e0:	ldr	pc, [ip, #3904]!	; 0xf40

000110e4 <pause@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #32, 20	; 0x20000
   110ec:	ldr	pc, [ip, #3896]!	; 0xf38

000110f0 <read@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #32, 20	; 0x20000
   110f8:	ldr	pc, [ip, #3888]!	; 0xf30

000110fc <fflush@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #32, 20	; 0x20000
   11104:	ldr	pc, [ip, #3880]!	; 0xf28

00011108 <free@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #32, 20	; 0x20000
   11110:	ldr	pc, [ip, #3872]!	; 0xf20

00011114 <nanosleep@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #32, 20	; 0x20000
   1111c:	ldr	pc, [ip, #3864]!	; 0xf18

00011120 <_exit@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #32, 20	; 0x20000
   11128:	ldr	pc, [ip, #3856]!	; 0xf10

0001112c <memcpy@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #32, 20	; 0x20000
   11134:	ldr	pc, [ip, #3848]!	; 0xf08

00011138 <__strtoull_internal@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #32, 20	; 0x20000
   11140:	ldr	pc, [ip, #3840]!	; 0xf00

00011144 <mbsinit@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #32, 20	; 0x20000
   1114c:	ldr	pc, [ip, #3832]!	; 0xef8

00011150 <fwrite_unlocked@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #32, 20	; 0x20000
   11158:	ldr	pc, [ip, #3824]!	; 0xef0

0001115c <memcmp@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #32, 20	; 0x20000
   11164:	ldr	pc, [ip, #3816]!	; 0xee8

00011168 <fputc_unlocked@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #32, 20	; 0x20000
   11170:	ldr	pc, [ip, #3808]!	; 0xee0

00011174 <dcgettext@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #32, 20	; 0x20000
   1117c:	ldr	pc, [ip, #3800]!	; 0xed8

00011180 <realloc@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #32, 20	; 0x20000
   11188:	ldr	pc, [ip, #3792]!	; 0xed0

0001118c <textdomain@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #32, 20	; 0x20000
   11194:	ldr	pc, [ip, #3784]!	; 0xec8

00011198 <rawmemchr@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #32, 20	; 0x20000
   111a0:	ldr	pc, [ip, #3776]!	; 0xec0

000111a4 <fflush_unlocked@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #32, 20	; 0x20000
   111ac:	ldr	pc, [ip, #3768]!	; 0xeb8

000111b0 <iswprint@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #32, 20	; 0x20000
   111b8:	ldr	pc, [ip, #3760]!	; 0xeb0

000111bc <poll@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #32, 20	; 0x20000
   111c4:	ldr	pc, [ip, #3752]!	; 0xea8

000111c8 <__fxstat64@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #32, 20	; 0x20000
   111d0:	ldr	pc, [ip, #3744]!	; 0xea0

000111d4 <__poll_chk@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #32, 20	; 0x20000
   111dc:	ldr	pc, [ip, #3736]!	; 0xe98

000111e0 <fwrite@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #32, 20	; 0x20000
   111e8:	ldr	pc, [ip, #3728]!	; 0xe90

000111ec <lseek64@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #32, 20	; 0x20000
   111f4:	ldr	pc, [ip, #3720]!	; 0xe88

000111f8 <__ctype_get_mb_cur_max@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #32, 20	; 0x20000
   11200:	ldr	pc, [ip, #3712]!	; 0xe80

00011204 <__fpending@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #32, 20	; 0x20000
   1120c:	ldr	pc, [ip, #3704]!	; 0xe78

00011210 <mbrtowc@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #32, 20	; 0x20000
   11218:	ldr	pc, [ip, #3696]!	; 0xe70

0001121c <error@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #32, 20	; 0x20000
   11224:	ldr	pc, [ip, #3688]!	; 0xe68

00011228 <open64@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #32, 20	; 0x20000
   11230:	ldr	pc, [ip, #3680]!	; 0xe60

00011234 <getenv@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #32, 20	; 0x20000
   1123c:	ldr	pc, [ip, #3672]!	; 0xe58

00011240 <malloc@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #32, 20	; 0x20000
   11248:	ldr	pc, [ip, #3664]!	; 0xe50

0001124c <__libc_start_main@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #32, 20	; 0x20000
   11254:	ldr	pc, [ip, #3656]!	; 0xe48

00011258 <__freading@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #32, 20	; 0x20000
   11260:	ldr	pc, [ip, #3648]!	; 0xe40

00011264 <__gmon_start__@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #32, 20	; 0x20000
   1126c:	ldr	pc, [ip, #3640]!	; 0xe38

00011270 <getopt_long@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #32, 20	; 0x20000
   11278:	ldr	pc, [ip, #3632]!	; 0xe30

0001127c <kill@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #32, 20	; 0x20000
   11284:	ldr	pc, [ip, #3624]!	; 0xe28

00011288 <__ctype_b_loc@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #32, 20	; 0x20000
   11290:	ldr	pc, [ip, #3616]!	; 0xe20

00011294 <exit@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #32, 20	; 0x20000
   1129c:	ldr	pc, [ip, #3608]!	; 0xe18

000112a0 <strlen@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #32, 20	; 0x20000
   112a8:	ldr	pc, [ip, #3600]!	; 0xe10

000112ac <inotify_init@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #32, 20	; 0x20000
   112b4:	ldr	pc, [ip, #3592]!	; 0xe08

000112b8 <strchr@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #32, 20	; 0x20000
   112c0:	ldr	pc, [ip, #3584]!	; 0xe00

000112c4 <memrchr@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #32, 20	; 0x20000
   112cc:	ldr	pc, [ip, #3576]!	; 0xdf8

000112d0 <inotify_add_watch@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #32, 20	; 0x20000
   112d8:	ldr	pc, [ip, #3568]!	; 0xdf0

000112dc <__errno_location@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #32, 20	; 0x20000
   112e4:	ldr	pc, [ip, #3560]!	; 0xde8

000112e8 <__cxa_atexit@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #32, 20	; 0x20000
   112f0:	ldr	pc, [ip, #3552]!	; 0xde0

000112f4 <memset@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #32, 20	; 0x20000
   112fc:	ldr	pc, [ip, #3544]!	; 0xdd8

00011300 <__printf_chk@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #32, 20	; 0x20000
   11308:	ldr	pc, [ip, #3536]!	; 0xdd0

0001130c <strtod@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #32, 20	; 0x20000
   11314:	ldr	pc, [ip, #3528]!	; 0xdc8

00011318 <fileno@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #32, 20	; 0x20000
   11320:	ldr	pc, [ip, #3520]!	; 0xdc0

00011324 <__fprintf_chk@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #32, 20	; 0x20000
   1132c:	ldr	pc, [ip, #3512]!	; 0xdb8

00011330 <memchr@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #32, 20	; 0x20000
   11338:	ldr	pc, [ip, #3504]!	; 0xdb0

0001133c <fclose@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #32, 20	; 0x20000
   11344:	ldr	pc, [ip, #3496]!	; 0xda8

00011348 <fseeko64@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #32, 20	; 0x20000
   11350:	ldr	pc, [ip, #3488]!	; 0xda0

00011354 <strtod_l@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #32, 20	; 0x20000
   1135c:	ldr	pc, [ip, #3480]!	; 0xd98

00011360 <fcntl64@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #32, 20	; 0x20000
   11368:	ldr	pc, [ip, #3472]!	; 0xd90

0001136c <__overflow@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #32, 20	; 0x20000
   11374:	ldr	pc, [ip, #3464]!	; 0xd88

00011378 <setlocale@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #32, 20	; 0x20000
   11380:	ldr	pc, [ip, #3456]!	; 0xd80

00011384 <strrchr@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #32, 20	; 0x20000
   1138c:	ldr	pc, [ip, #3448]!	; 0xd78

00011390 <nl_langinfo@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #32, 20	; 0x20000
   11398:	ldr	pc, [ip, #3440]!	; 0xd70

0001139c <newlocale@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #32, 20	; 0x20000
   113a4:	ldr	pc, [ip, #3432]!	; 0xd68

000113a8 <clearerr_unlocked@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #32, 20	; 0x20000
   113b0:	ldr	pc, [ip, #3424]!	; 0xd60

000113b4 <bindtextdomain@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #32, 20	; 0x20000
   113bc:	ldr	pc, [ip, #3416]!	; 0xd58

000113c0 <__xstat64@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #32, 20	; 0x20000
   113c8:	ldr	pc, [ip, #3408]!	; 0xd50

000113cc <isatty@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #32, 20	; 0x20000
   113d4:	ldr	pc, [ip, #3400]!	; 0xd48

000113d8 <inotify_rm_watch@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #32, 20	; 0x20000
   113e0:	ldr	pc, [ip, #3392]!	; 0xd40

000113e4 <strncmp@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #32, 20	; 0x20000
   113ec:	ldr	pc, [ip, #3384]!	; 0xd38

000113f0 <abort@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #32, 20	; 0x20000
   113f8:	ldr	pc, [ip, #3376]!	; 0xd30

000113fc <close@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #32, 20	; 0x20000
   11404:	ldr	pc, [ip, #3368]!	; 0xd28

00011408 <__lxstat64@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #32, 20	; 0x20000
   11410:	ldr	pc, [ip, #3360]!	; 0xd20

00011414 <__assert_fail@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #32, 20	; 0x20000
   1141c:	ldr	pc, [ip, #3352]!	; 0xd18

Disassembly of section .text:

00011420 <.text>:
   11420:	ldr	r3, [pc, #68]	; 1146c <__assert_fail@plt+0x58>
   11424:	push	{r4, lr}
   11428:	ldr	r0, [r3]
   1142c:	bl	113a8 <clearerr_unlocked@plt>
   11430:	bl	112dc <__errno_location@plt>
   11434:	mov	r2, #5
   11438:	ldr	r1, [pc, #48]	; 11470 <__assert_fail@plt+0x5c>
   1143c:	ldr	r4, [r0]
   11440:	mov	r0, #0
   11444:	bl	11174 <dcgettext@plt>
   11448:	ldr	r1, [pc, #36]	; 11474 <__assert_fail@plt+0x60>
   1144c:	mov	r5, r0
   11450:	mov	r0, #4
   11454:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   11458:	mov	r2, r5
   1145c:	mov	r1, r4
   11460:	mov	r3, r0
   11464:	mov	r0, #1
   11468:	bl	1121c <error@plt>
   1146c:	andeq	r2, r3, r4, asr #3
   11470:	andeq	pc, r1, r8, asr #21
   11474:	ldrdeq	pc, [r1], -ip
   11478:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1147c:	vpush	{d8-d11}
   11480:	mov	r2, #10
   11484:	mov	r3, #0
   11488:	mov	r5, r0
   1148c:	sub	sp, sp, #348	; 0x15c
   11490:	ldr	r0, [r1]
   11494:	strd	r2, [sp, #104]	; 0x68
   11498:	mov	r6, r1
   1149c:	bl	18934 <__assert_fail@plt+0x7520>
   114a0:	ldr	r1, [pc, #1256]	; 11990 <__assert_fail@plt+0x57c>
   114a4:	mov	r0, #6
   114a8:	bl	11378 <setlocale@plt>
   114ac:	ldr	r1, [pc, #1076]	; 118e8 <__assert_fail@plt+0x4d4>
   114b0:	ldr	r0, [pc, #1076]	; 118ec <__assert_fail@plt+0x4d8>
   114b4:	bl	113b4 <bindtextdomain@plt>
   114b8:	ldr	sl, [pc, #1072]	; 118f0 <__assert_fail@plt+0x4dc>
   114bc:	ldr	r0, [pc, #1064]	; 118ec <__assert_fail@plt+0x4d8>
   114c0:	bl	1118c <textdomain@plt>
   114c4:	ldr	r0, [pc, #1064]	; 118f4 <__assert_fail@plt+0x4e0>
   114c8:	bl	1f93c <__assert_fail@plt+0xe528>
   114cc:	mov	r3, #0
   114d0:	mov	r1, #1
   114d4:	mov	r2, #10
   114d8:	cmp	r5, #2
   114dc:	strb	r1, [sl, #5]
   114e0:	strb	r2, [sl]
   114e4:	strb	r3, [sl, #4]
   114e8:	strb	r3, [sl, #3]
   114ec:	strb	r3, [sl, #6]
   114f0:	strb	r3, [sl, #7]
   114f4:	beq	117dc <__assert_fail@plt+0x3c8>
   114f8:	cmp	r5, #3
   114fc:	beq	117ac <__assert_fail@plt+0x398>
   11500:	cmp	r5, #4
   11504:	beq	117c8 <__assert_fail@plt+0x3b4>
   11508:	mov	r3, #0
   1150c:	ldr	r7, [pc, #996]	; 118f8 <__assert_fail@plt+0x4e4>
   11510:	vldr	d8, [pc, #960]	; 118d8 <__assert_fail@plt+0x4c4>
   11514:	vldr	d9, [pc, #964]	; 118e0 <__assert_fail@plt+0x4cc>
   11518:	ldr	r8, [pc, #988]	; 118fc <__assert_fail@plt+0x4e8>
   1151c:	ldr	r9, [pc, #988]	; 11900 <__assert_fail@plt+0x4ec>
   11520:	sub	r5, r5, r3
   11524:	add	r6, r6, r3, lsl #2
   11528:	sub	r3, r7, #20
   1152c:	str	r3, [sp, #28]
   11530:	mov	r3, #0
   11534:	str	r3, [sp, #24]
   11538:	mov	r4, #0
   1153c:	str	r4, [sp]
   11540:	mov	r3, r7
   11544:	mov	r2, r8
   11548:	mov	r1, r6
   1154c:	mov	r0, r5
   11550:	bl	11270 <getopt_long@plt>
   11554:	cmn	r0, #1
   11558:	beq	11acc <__assert_fail@plt+0x6b8>
   1155c:	cmp	r0, #113	; 0x71
   11560:	beq	11a9c <__assert_fail@plt+0x688>
   11564:	ble	115a0 <__assert_fail@plt+0x18c>
   11568:	ldr	r3, [pc, #916]	; 11904 <__assert_fail@plt+0x4f0>
   1156c:	cmp	r0, r3
   11570:	beq	11a50 <__assert_fail@plt+0x63c>
   11574:	bgt	115cc <__assert_fail@plt+0x1b8>
   11578:	cmp	r0, #118	; 0x76
   1157c:	beq	11a38 <__assert_fail@plt+0x624>
   11580:	ble	11668 <__assert_fail@plt+0x254>
   11584:	cmp	r0, #122	; 0x7a
   11588:	beq	11a30 <__assert_fail@plt+0x61c>
   1158c:	cmp	r0, #256	; 0x100
   11590:	bne	11a28 <__assert_fail@plt+0x614>
   11594:	mov	r3, #1
   11598:	strb	r3, [sl, #1]
   1159c:	b	11538 <__assert_fail@plt+0x124>
   115a0:	cmp	r0, #57	; 0x39
   115a4:	bgt	115fc <__assert_fail@plt+0x1e8>
   115a8:	cmp	r0, #48	; 0x30
   115ac:	mov	fp, r0
   115b0:	bge	11a04 <__assert_fail@plt+0x5f0>
   115b4:	cmn	r0, #3
   115b8:	beq	11628 <__assert_fail@plt+0x214>
   115bc:	cmn	r0, #2
   115c0:	bne	11a28 <__assert_fail@plt+0x614>
   115c4:	mov	r0, r4
   115c8:	bl	15fd0 <__assert_fail@plt+0x4bbc>
   115cc:	ldr	r3, [pc, #820]	; 11908 <__assert_fail@plt+0x4f4>
   115d0:	cmp	r0, r3
   115d4:	beq	11a44 <__assert_fail@plt+0x630>
   115d8:	blt	11764 <__assert_fail@plt+0x350>
   115dc:	cmp	r0, #260	; 0x104
   115e0:	beq	119b4 <__assert_fail@plt+0x5a0>
   115e4:	add	r3, r3, #2
   115e8:	cmp	r0, r3
   115ec:	bne	11a28 <__assert_fail@plt+0x614>
   115f0:	mov	r3, #1
   115f4:	strb	r3, [sl, #2]
   115f8:	b	11538 <__assert_fail@plt+0x124>
   115fc:	cmp	r0, #99	; 0x63
   11600:	beq	116dc <__assert_fail@plt+0x2c8>
   11604:	bgt	116cc <__assert_fail@plt+0x2b8>
   11608:	cmp	r0, #70	; 0x46
   1160c:	bne	11a28 <__assert_fail@plt+0x614>
   11610:	ldr	r2, [pc, #872]	; 11980 <__assert_fail@plt+0x56c>
   11614:	mov	r3, #1
   11618:	strb	r3, [sl, #7]
   1161c:	str	r3, [r2, #4]
   11620:	strb	r3, [sl, #1]
   11624:	b	11538 <__assert_fail@plt+0x124>
   11628:	ldr	lr, [pc, #732]	; 1190c <__assert_fail@plt+0x4f8>
   1162c:	ldr	ip, [pc, #732]	; 11910 <__assert_fail@plt+0x4fc>
   11630:	ldr	r1, [pc, #732]	; 11914 <__assert_fail@plt+0x500>
   11634:	ldr	r3, [pc, #732]	; 11918 <__assert_fail@plt+0x504>
   11638:	ldr	r0, [pc, #868]	; 119a4 <__assert_fail@plt+0x590>
   1163c:	ldr	r2, [pc, #728]	; 1191c <__assert_fail@plt+0x508>
   11640:	str	r4, [sp, #16]
   11644:	ldr	r0, [r0]
   11648:	ldr	r3, [r3]
   1164c:	stmib	sp, {r1, ip, lr}
   11650:	str	r2, [sp]
   11654:	ldr	r1, [pc, #708]	; 11920 <__assert_fail@plt+0x50c>
   11658:	ldr	r2, [pc, #708]	; 11924 <__assert_fail@plt+0x510>
   1165c:	bl	1d278 <__assert_fail@plt+0xbe64>
   11660:	mov	r0, r4
   11664:	bl	11294 <exit@plt>
   11668:	cmp	r0, #115	; 0x73
   1166c:	bne	11a28 <__assert_fail@plt+0x614>
   11670:	mov	r1, r4
   11674:	ldr	r3, [pc, #684]	; 11928 <__assert_fail@plt+0x514>
   11678:	add	r2, sp, #240	; 0xf0
   1167c:	ldr	r0, [r9]
   11680:	bl	1de00 <__assert_fail@plt+0xc9ec>
   11684:	cmp	r0, #0
   11688:	beq	1169c <__assert_fail@plt+0x288>
   1168c:	vldr	d8, [sp, #240]	; 0xf0
   11690:	vcmpe.f64	d8, d9
   11694:	vmrs	APSR_nzcv, fpscr
   11698:	bge	11538 <__assert_fail@plt+0x124>
   1169c:	mov	r2, #5
   116a0:	ldr	r1, [pc, #644]	; 1192c <__assert_fail@plt+0x518>
   116a4:	mov	r0, #0
   116a8:	bl	11174 <dcgettext@plt>
   116ac:	mov	r4, r0
   116b0:	ldr	r0, [r9]
   116b4:	bl	1c800 <__assert_fail@plt+0xb3ec>
   116b8:	mov	r2, r4
   116bc:	mov	r1, #0
   116c0:	mov	r3, r0
   116c4:	mov	r0, #1
   116c8:	bl	1121c <error@plt>
   116cc:	cmp	r0, #102	; 0x66
   116d0:	beq	119b4 <__assert_fail@plt+0x5a0>
   116d4:	cmp	r0, #110	; 0x6e
   116d8:	bne	11a28 <__assert_fail@plt+0x614>
   116dc:	ldr	r2, [r9]
   116e0:	sub	r3, r0, #110	; 0x6e
   116e4:	clz	r3, r3
   116e8:	lsr	r3, r3, #5
   116ec:	strb	r3, [sl, #5]
   116f0:	ldrb	r3, [r2]
   116f4:	cmp	r3, #43	; 0x2b
   116f8:	moveq	r3, #1
   116fc:	strbeq	r3, [sl, #6]
   11700:	beq	11710 <__assert_fail@plt+0x2fc>
   11704:	cmp	r3, #45	; 0x2d
   11708:	addeq	r2, r2, #1
   1170c:	streq	r2, [r9]
   11710:	cmp	r0, #110	; 0x6e
   11714:	mov	r2, #5
   11718:	ldreq	r1, [pc, #528]	; 11930 <__assert_fail@plt+0x51c>
   1171c:	ldrne	r1, [pc, #528]	; 11934 <__assert_fail@plt+0x520>
   11720:	mov	r0, #0
   11724:	ldr	r4, [r9]
   11728:	bl	11174 <dcgettext@plt>
   1172c:	ldr	r1, [pc, #516]	; 11938 <__assert_fail@plt+0x524>
   11730:	mvn	r2, #0
   11734:	mvn	r3, #0
   11738:	str	r1, [sp, #8]
   1173c:	mov	r1, #0
   11740:	strd	r2, [sp]
   11744:	str	r1, [sp, #16]
   11748:	mov	r2, #0
   1174c:	mov	r3, #0
   11750:	str	r0, [sp, #12]
   11754:	mov	r0, r4
   11758:	bl	1dc24 <__assert_fail@plt+0xc810>
   1175c:	strd	r0, [sp, #104]	; 0x68
   11760:	b	11538 <__assert_fail@plt+0x124>
   11764:	mov	r2, #5
   11768:	ldr	r1, [pc, #460]	; 1193c <__assert_fail@plt+0x528>
   1176c:	mov	r0, r4
   11770:	ldr	fp, [r9]
   11774:	bl	11174 <dcgettext@plt>
   11778:	ldr	r1, [pc, #528]	; 11990 <__assert_fail@plt+0x57c>
   1177c:	mvn	r2, #-2147483648	; 0x80000000
   11780:	mov	r3, #0
   11784:	str	r4, [sp, #16]
   11788:	strd	r2, [sp]
   1178c:	str	r1, [sp, #8]
   11790:	mov	r2, #0
   11794:	mov	r3, #0
   11798:	str	r0, [sp, #12]
   1179c:	mov	r0, fp
   117a0:	bl	1dc24 <__assert_fail@plt+0xc810>
   117a4:	str	r0, [sl, #8]
   117a8:	b	11538 <__assert_fail@plt+0x124>
   117ac:	ldr	r3, [r6, #8]
   117b0:	ldrb	r2, [r3]
   117b4:	cmp	r2, #45	; 0x2d
   117b8:	bne	117dc <__assert_fail@plt+0x3c8>
   117bc:	ldrb	r3, [r3, #1]
   117c0:	cmp	r3, #0
   117c4:	beq	117dc <__assert_fail@plt+0x3c8>
   117c8:	ldr	r1, [pc, #368]	; 11940 <__assert_fail@plt+0x52c>
   117cc:	ldr	r0, [r6, #8]
   117d0:	bl	110cc <strcmp@plt>
   117d4:	cmp	r0, #0
   117d8:	bne	11508 <__assert_fail@plt+0xf4>
   117dc:	bl	188d4 <__assert_fail@plt+0x74c0>
   117e0:	ldr	r3, [r6, #4]
   117e4:	add	ip, r3, #1
   117e8:	ldrb	r1, [r3]
   117ec:	cmp	r1, #43	; 0x2b
   117f0:	sub	r2, r0, #199680	; 0x30c00
   117f4:	sub	r2, r2, #432	; 0x1b0
   117f8:	beq	11ab8 <__assert_fail@plt+0x6a4>
   117fc:	cmp	r1, #45	; 0x2d
   11800:	bne	11508 <__assert_fail@plt+0xf4>
   11804:	ldr	r2, [pc, #312]	; 11944 <__assert_fail@plt+0x530>
   11808:	ldrb	r3, [r3, #1]
   1180c:	cmp	r0, r2
   11810:	ble	1182c <__assert_fail@plt+0x418>
   11814:	sub	r2, r3, #99	; 0x63
   11818:	clz	r2, r2
   1181c:	lsr	r2, r2, #5
   11820:	ldrb	r2, [ip, r2]
   11824:	cmp	r2, #0
   11828:	beq	11508 <__assert_fail@plt+0xf4>
   1182c:	mov	r4, #0
   11830:	sub	r2, r3, #48	; 0x30
   11834:	cmp	r2, #9
   11838:	mov	r2, ip
   1183c:	bhi	11850 <__assert_fail@plt+0x43c>
   11840:	ldrb	r3, [r2, #1]!
   11844:	sub	r1, r3, #48	; 0x30
   11848:	cmp	r1, #9
   1184c:	bls	11840 <__assert_fail@plt+0x42c>
   11850:	cmp	r3, #99	; 0x63
   11854:	beq	11f1c <__assert_fail@plt+0xb08>
   11858:	cmp	r3, #108	; 0x6c
   1185c:	beq	11f10 <__assert_fail@plt+0xafc>
   11860:	cmp	r3, #98	; 0x62
   11864:	movne	r3, r2
   11868:	movne	r8, #1
   1186c:	movne	r0, #10
   11870:	beq	11f00 <__assert_fail@plt+0xaec>
   11874:	ldrb	r1, [r3]
   11878:	cmp	r1, #102	; 0x66
   1187c:	addeq	r3, r3, #1
   11880:	moveq	r9, #1
   11884:	ldrb	r7, [r3]
   11888:	movne	r9, #0
   1188c:	cmp	r7, #0
   11890:	bne	11508 <__assert_fail@plt+0xf4>
   11894:	cmp	ip, r2
   11898:	beq	128b4 <__assert_fail@plt+0x14a0>
   1189c:	ldr	r3, [pc, #164]	; 11948 <__assert_fail@plt+0x534>
   118a0:	mov	r0, ip
   118a4:	str	r3, [sp]
   118a8:	mov	r2, #10
   118ac:	add	r3, sp, #104	; 0x68
   118b0:	mov	r1, r7
   118b4:	bl	1dea8 <__assert_fail@plt+0xca94>
   118b8:	bics	r3, r0, #2
   118bc:	bne	14124 <__assert_fail@plt+0x2d10>
   118c0:	strb	r4, [sl, #6]
   118c4:	strb	r8, [sl, #5]
   118c8:	strb	r9, [sl, #7]
   118cc:	mov	r3, #1
   118d0:	b	1150c <__assert_fail@plt+0xf8>
   118d4:	nop			; (mov r0, r0)
   118d8:	andeq	r0, r0, r0
   118dc:	svccc	0x00f00000	; IMB
	...
   118e8:	andeq	r0, r2, r0, ror #16
   118ec:			; <UNDEFINED> instruction: 0x000207b4
   118f0:	ldrdeq	r2, [r3], -r0
   118f4:	andeq	r6, r1, ip, asr #21
   118f8:			; <UNDEFINED> instruction: 0x0001f9b4
   118fc:			; <UNDEFINED> instruction: 0x000209b0
   11900:	andeq	r2, r3, r8, asr #3
   11904:	andeq	r0, r0, r1, lsl #2
   11908:	andeq	r0, r0, r3, lsl #2
   1190c:	andeq	r0, r2, r8, asr #18
   11910:	andeq	r0, r2, r8, asr r9
   11914:	andeq	r0, r2, ip, ror #18
   11918:	andeq	r2, r3, r0, ror #2
   1191c:	andeq	r0, r2, ip, ror r9
   11920:	andeq	pc, r1, ip, lsl #26
   11924:			; <UNDEFINED> instruction: 0x000207b0
   11928:	andeq	r6, r1, r0, lsr sl
   1192c:	andeq	r0, r2, r8, lsr #18
   11930:	muleq	r2, r8, r8
   11934:			; <UNDEFINED> instruction: 0x000208b0
   11938:	andeq	r0, r2, r8, asr #17
   1193c:	andeq	r0, r2, ip, lsl r9
   11940:	andeq	r0, r2, r8, ror r8
   11944:	andeq	r0, r3, pc, lsr #27
   11948:	andeq	r0, r2, ip, ror r8
   1194c:	andeq	r2, r3, r4, ror #2
   11950:	ldrdeq	r0, [r2], -r8
   11954:	andeq	pc, r1, r8, lsr #19
   11958:	andeq	pc, r1, r0, ror #18
   1195c:	andeq	r0, r2, r8, lsl #19
   11960:	andeq	r0, r2, r4, ror #17
   11964:	andeq	r0, r2, r0, lsl #21
   11968:			; <UNDEFINED> instruction: 0x000321b8
   1196c:	andeq	r2, r3, r0, asr r1
   11970:	andeq	r0, r2, r8, lsl #20
   11974:	andeq	r0, r2, r0, asr #20
   11978:	andeq	r0, r2, r0, lsl fp
   1197c:	andeq	r2, r0, ip
   11980:	andeq	r2, r3, r8, asr #2
   11984:	andeq	pc, r1, r4, asr #22
   11988:	andeq	pc, r1, r8, lsr fp	; <UNPREDICTABLE>
   1198c:	andeq	r0, r2, r4, ror #22
   11990:			; <UNDEFINED> instruction: 0x000205b4
   11994:	andeq	pc, r1, ip, asr ip	; <UNPREDICTABLE>
   11998:	andeq	pc, r1, r4, lsr #22
   1199c:			; <UNDEFINED> instruction: 0x0001fab4
   119a0:			; <UNDEFINED> instruction: 0x0001fab8
   119a4:	andeq	r2, r3, r4, asr #3
   119a8:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   119ac:	andeq	r0, r2, ip, lsr #22
   119b0:	andeq	r2, r0, r8
   119b4:	ldr	r1, [r9]
   119b8:	mov	r3, #1
   119bc:	cmp	r1, #0
   119c0:	strb	r3, [sl, #7]
   119c4:	beq	11aa8 <__assert_fail@plt+0x694>
   119c8:	ldr	r0, [pc, #-132]	; 1194c <__assert_fail@plt+0x538>
   119cc:	str	r3, [sp, #8]
   119d0:	mov	r2, #4
   119d4:	ldr	r3, [r0]
   119d8:	ldr	r0, [pc, #-144]	; 11950 <__assert_fail@plt+0x53c>
   119dc:	stm	sp, {r2, r3}
   119e0:	ldr	r3, [sp, #28]
   119e4:	ldr	r2, [pc, #-152]	; 11954 <__assert_fail@plt+0x540>
   119e8:	bl	166dc <__assert_fail@plt+0x52c8>
   119ec:	ldr	r2, [pc, #-156]	; 11958 <__assert_fail@plt+0x544>
   119f0:	ldr	r3, [pc, #-120]	; 11980 <__assert_fail@plt+0x56c>
   119f4:	add	r0, r2, r0, lsl #2
   119f8:	ldr	r2, [r0, #64]	; 0x40
   119fc:	str	r2, [r3, #4]
   11a00:	b	11538 <__assert_fail@plt+0x124>
   11a04:	mov	r2, #5
   11a08:	ldr	r1, [pc, #-180]	; 1195c <__assert_fail@plt+0x548>
   11a0c:	mov	r0, r4
   11a10:	bl	11174 <dcgettext@plt>
   11a14:	mov	r3, fp
   11a18:	mov	r1, r4
   11a1c:	mov	r2, r0
   11a20:	mov	r0, #1
   11a24:	bl	1121c <error@plt>
   11a28:	mov	r0, #1
   11a2c:	bl	15fd0 <__assert_fail@plt+0x4bbc>
   11a30:	strb	r4, [sl]
   11a34:	b	11538 <__assert_fail@plt+0x124>
   11a38:	mov	r3, #1
   11a3c:	str	r3, [sp, #24]
   11a40:	b	11538 <__assert_fail@plt+0x124>
   11a44:	mov	r3, #1
   11a48:	strb	r3, [sl, #12]
   11a4c:	b	11538 <__assert_fail@plt+0x124>
   11a50:	mov	r2, #5
   11a54:	ldr	r1, [pc, #-252]	; 11960 <__assert_fail@plt+0x54c>
   11a58:	mov	r0, r4
   11a5c:	ldr	fp, [r9]
   11a60:	bl	11174 <dcgettext@plt>
   11a64:	ldr	r1, [pc, #-220]	; 11990 <__assert_fail@plt+0x57c>
   11a68:	mvn	r2, #0
   11a6c:	mvn	r3, #0
   11a70:	str	r4, [sp, #16]
   11a74:	strd	r2, [sp]
   11a78:	str	r1, [sp, #8]
   11a7c:	mov	r3, #0
   11a80:	mov	r2, #0
   11a84:	str	r0, [sp, #12]
   11a88:	mov	r0, fp
   11a8c:	bl	1dc24 <__assert_fail@plt+0xc810>
   11a90:	ldr	r3, [pc, #-280]	; 11980 <__assert_fail@plt+0x56c>
   11a94:	strd	r0, [r3, #16]
   11a98:	b	11538 <__assert_fail@plt+0x124>
   11a9c:	mov	r3, #2
   11aa0:	str	r3, [sp, #24]
   11aa4:	b	11538 <__assert_fail@plt+0x124>
   11aa8:	ldr	r3, [pc, #-304]	; 11980 <__assert_fail@plt+0x56c>
   11aac:	mov	r2, #2
   11ab0:	str	r2, [r3, #4]
   11ab4:	b	11538 <__assert_fail@plt+0x124>
   11ab8:	cmp	r2, #696	; 0x2b8
   11abc:	movhi	r4, #1
   11ac0:	ldrbhi	r3, [r3, #1]
   11ac4:	bhi	11830 <__assert_fail@plt+0x41c>
   11ac8:	b	11508 <__assert_fail@plt+0xf4>
   11acc:	ldrb	r3, [sl, #1]
   11ad0:	mov	fp, r0
   11ad4:	cmp	r3, r4
   11ad8:	beq	11ec4 <__assert_fail@plt+0xab0>
   11adc:	ldrb	r7, [sl, #7]
   11ae0:	cmp	r7, r4
   11ae4:	beq	12e1c <__assert_fail@plt+0x1a08>
   11ae8:	ldr	r3, [pc, #-368]	; 11980 <__assert_fail@plt+0x56c>
   11aec:	ldr	r3, [r3, #4]
   11af0:	cmp	r3, #2
   11af4:	beq	11ea4 <__assert_fail@plt+0xa90>
   11af8:	ldr	r0, [sl, #8]
   11afc:	cmp	r0, #0
   11b00:	beq	11b4c <__assert_fail@plt+0x738>
   11b04:	mov	r1, #0
   11b08:	bl	1127c <kill@plt>
   11b0c:	cmp	r0, #0
   11b10:	beq	11b4c <__assert_fail@plt+0x738>
   11b14:	bl	112dc <__errno_location@plt>
   11b18:	ldr	r3, [r0]
   11b1c:	cmp	r3, #38	; 0x26
   11b20:	bne	11b4c <__assert_fail@plt+0x738>
   11b24:	mov	r2, #5
   11b28:	ldr	r1, [pc, #-460]	; 11964 <__assert_fail@plt+0x550>
   11b2c:	mov	r0, #0
   11b30:	bl	11174 <dcgettext@plt>
   11b34:	mov	r1, #0
   11b38:	mov	r2, r0
   11b3c:	mov	r0, r1
   11b40:	bl	1121c <error@plt>
   11b44:	mov	r3, #0
   11b48:	str	r3, [sl, #8]
   11b4c:	ldrb	r3, [sl, #6]
   11b50:	cmp	r3, #0
   11b54:	beq	11b70 <__assert_fail@plt+0x75c>
   11b58:	ldrd	r2, [sp, #104]	; 0x68
   11b5c:	orrs	r1, r2, r3
   11b60:	beq	11b70 <__assert_fail@plt+0x75c>
   11b64:	subs	r2, r2, #1
   11b68:	sbc	r3, r3, #0
   11b6c:	strd	r2, [sp, #104]	; 0x68
   11b70:	ldr	r3, [pc, #-528]	; 11968 <__assert_fail@plt+0x554>
   11b74:	ldr	r3, [r3]
   11b78:	cmp	r5, r3
   11b7c:	bgt	11f28 <__assert_fail@plt+0xb14>
   11b80:	ldr	r6, [pc, #-540]	; 1196c <__assert_fail@plt+0x558>
   11b84:	mov	r3, #1
   11b88:	str	r3, [sp, #64]	; 0x40
   11b8c:	mov	r5, #0
   11b90:	ldr	r7, [pc, #-508]	; 1199c <__assert_fail@plt+0x588>
   11b94:	ldr	r9, [sp, #64]	; 0x40
   11b98:	mov	r4, r5
   11b9c:	sub	r8, r6, #4
   11ba0:	mov	r1, r7
   11ba4:	ldr	r0, [r8, #4]!
   11ba8:	bl	110cc <strcmp@plt>
   11bac:	add	r4, r4, #1
   11bb0:	cmp	r0, #0
   11bb4:	moveq	r5, #1
   11bb8:	cmp	r4, r9
   11bbc:	bcc	11ba0 <__assert_fail@plt+0x78c>
   11bc0:	cmp	r5, #0
   11bc4:	beq	11c10 <__assert_fail@plt+0x7fc>
   11bc8:	ldr	r3, [pc, #-592]	; 11980 <__assert_fail@plt+0x56c>
   11bcc:	ldr	r4, [r3, #4]
   11bd0:	cmp	r4, #1
   11bd4:	beq	136b8 <__assert_fail@plt+0x22a4>
   11bd8:	ldrb	r3, [sl, #7]
   11bdc:	cmp	r3, #0
   11be0:	beq	11c10 <__assert_fail@plt+0x7fc>
   11be4:	ldr	r1, [sl, #8]
   11be8:	cmp	r1, #0
   11bec:	bne	11c00 <__assert_fail@plt+0x7ec>
   11bf0:	ldr	r3, [sp, #64]	; 0x40
   11bf4:	cmp	r4, #2
   11bf8:	cmpeq	r3, #1
   11bfc:	beq	136f0 <__assert_fail@plt+0x22dc>
   11c00:	mov	r0, #0
   11c04:	bl	113cc <isatty@plt>
   11c08:	cmp	r0, #0
   11c0c:	bne	135ac <__assert_fail@plt+0x2198>
   11c10:	ldrd	r2, [sp, #104]	; 0x68
   11c14:	orrs	r3, r2, r3
   11c18:	bne	1293c <__assert_fail@plt+0x1528>
   11c1c:	ldrb	r3, [sl, #7]
   11c20:	cmp	r3, #0
   11c24:	bne	11c34 <__assert_fail@plt+0x820>
   11c28:	ldrb	r0, [sl, #6]
   11c2c:	cmp	r0, #0
   11c30:	beq	11f38 <__assert_fail@plt+0xb24>
   11c34:	ldr	r4, [sp, #64]	; 0x40
   11c38:	mov	r1, #80	; 0x50
   11c3c:	mov	r0, r4
   11c40:	bl	1d544 <__assert_fail@plt+0xc130>
   11c44:	cmp	r4, #0
   11c48:	str	r0, [sp, #72]	; 0x48
   11c4c:	beq	130c8 <__assert_fail@plt+0x1cb4>
   11c50:	ldr	ip, [sp, #72]	; 0x48
   11c54:	ldr	lr, [sp, #64]	; 0x40
   11c58:	mov	r3, #0
   11c5c:	mov	r0, #80	; 0x50
   11c60:	mul	r2, r0, r3
   11c64:	ldr	r1, [r6, r3, lsl #2]
   11c68:	add	r3, r3, #1
   11c6c:	cmp	r3, lr
   11c70:	str	r1, [ip, r2]
   11c74:	bne	11c60 <__assert_fail@plt+0x84c>
   11c78:	ldr	r3, [sp, #24]
   11c7c:	cmp	r3, #1
   11c80:	beq	11ca4 <__assert_fail@plt+0x890>
   11c84:	ldr	r2, [sp, #64]	; 0x40
   11c88:	ldr	r3, [sp, #24]
   11c8c:	cmp	r2, #1
   11c90:	clz	r3, r3
   11c94:	lsr	r3, r3, #5
   11c98:	movls	r3, #0
   11c9c:	cmp	r3, #0
   11ca0:	beq	11cac <__assert_fail@plt+0x898>
   11ca4:	mov	r3, #1
   11ca8:	strb	r3, [sl, #3]
   11cac:	ldr	r3, [sp, #72]	; 0x48
   11cb0:	str	fp, [sp, #76]	; 0x4c
   11cb4:	str	r3, [sp, #24]
   11cb8:	mov	r3, #0
   11cbc:	str	r3, [sp, #44]	; 0x2c
   11cc0:	mov	r3, #1
   11cc4:	str	r3, [sp, #60]	; 0x3c
   11cc8:	b	11e40 <__assert_fail@plt+0xa2c>
   11ccc:	ldr	r2, [sp, #24]
   11cd0:	strb	r3, [r2, #46]	; 0x2e
   11cd4:	ldr	r3, [sp, #56]	; 0x38
   11cd8:	str	r3, [sp, #28]
   11cdc:	ldrb	r3, [sl, #3]
   11ce0:	cmp	r3, #0
   11ce4:	bne	121c4 <__assert_fail@plt+0xdb0>
   11ce8:	ldr	r3, [sp, #24]
   11cec:	ldr	r1, [pc, #-856]	; 1199c <__assert_fail@plt+0x588>
   11cf0:	ldr	r4, [r3]
   11cf4:	mov	r0, r4
   11cf8:	bl	110cc <strcmp@plt>
   11cfc:	cmp	r0, #0
   11d00:	strne	r4, [sp, #68]	; 0x44
   11d04:	bne	11d18 <__assert_fail@plt+0x904>
   11d08:	mov	r2, #5
   11d0c:	ldr	r1, [pc, #-884]	; 119a0 <__assert_fail@plt+0x58c>
   11d10:	bl	11174 <dcgettext@plt>
   11d14:	str	r0, [sp, #68]	; 0x44
   11d18:	ldrb	r3, [sl, #5]
   11d1c:	mov	r0, #0
   11d20:	mov	r1, #0
   11d24:	cmp	r3, #0
   11d28:	str	r3, [sp, #48]	; 0x30
   11d2c:	strd	r0, [sp, #112]	; 0x70
   11d30:	bne	12028 <__assert_fail@plt+0xc14>
   11d34:	add	r2, sp, #240	; 0xf0
   11d38:	ldr	r1, [sp, #28]
   11d3c:	mov	r0, #3
   11d40:	bl	111c8 <__fxstat64@plt>
   11d44:	cmp	r0, #0
   11d48:	bne	12864 <__assert_fail@plt+0x1450>
   11d4c:	ldrb	r3, [sl, #6]
   11d50:	cmp	r3, #0
   11d54:	str	r3, [sp, #48]	; 0x30
   11d58:	beq	123bc <__assert_fail@plt+0xfa8>
   11d5c:	ldrb	r4, [sl, #12]
   11d60:	cmp	r4, #0
   11d64:	bne	127f8 <__assert_fail@plt+0x13e4>
   11d68:	ldrd	r2, [sp, #32]
   11d6c:	cmp	r2, #0
   11d70:	sbcs	r3, r3, #0
   11d74:	blt	127f8 <__assert_fail@plt+0x13e4>
   11d78:	ldr	r3, [sp, #256]	; 0x100
   11d7c:	and	r3, r3, #61440	; 0xf000
   11d80:	cmp	r3, #32768	; 0x8000
   11d84:	beq	12da0 <__assert_fail@plt+0x198c>
   11d88:	mov	r3, #1
   11d8c:	str	r3, [sp]
   11d90:	ldr	r0, [sp, #28]
   11d94:	ldrd	r2, [sp, #32]
   11d98:	bl	111ec <lseek64@plt>
   11d9c:	mvn	r3, #0
   11da0:	mvn	r2, #0
   11da4:	cmp	r1, r3
   11da8:	cmpeq	r0, r2
   11dac:	beq	127f8 <__assert_fail@plt+0x13e4>
   11db0:	ldrd	r2, [sp, #112]	; 0x70
   11db4:	ldrd	r0, [sp, #32]
   11db8:	adds	r0, r0, r2
   11dbc:	adc	r1, r1, r3
   11dc0:	mov	r2, r0
   11dc4:	mov	r3, r1
   11dc8:	mvn	r0, #0
   11dcc:	mvn	r1, #0
   11dd0:	strd	r2, [sp, #112]	; 0x70
   11dd4:	strd	r0, [sp, #32]
   11dd8:	ldrd	r2, [sp, #32]
   11ddc:	ldr	r0, [sp, #68]	; 0x44
   11de0:	ldr	r1, [sp, #28]
   11de4:	bl	14ab8 <__assert_fail@plt+0x36a4>
   11de8:	ldrd	r2, [sp, #112]	; 0x70
   11dec:	mov	ip, #1
   11df0:	str	ip, [sp, #48]	; 0x30
   11df4:	adds	r0, r0, r2
   11df8:	adc	r1, r1, r3
   11dfc:	strd	r0, [sp, #112]	; 0x70
   11e00:	ldrb	r4, [sl, #7]
   11e04:	cmp	r4, #0
   11e08:	bne	12224 <__assert_fail@plt+0xe10>
   11e0c:	ldr	r3, [sp, #56]	; 0x38
   11e10:	cmp	r3, #0
   11e14:	bne	12478 <__assert_fail@plt+0x1064>
   11e18:	ldr	r3, [sp, #60]	; 0x3c
   11e1c:	ldr	r2, [sp, #48]	; 0x30
   11e20:	and	r3, r3, r2
   11e24:	str	r3, [sp, #60]	; 0x3c
   11e28:	ldr	r3, [sp, #44]	; 0x2c
   11e2c:	add	r3, r3, #1
   11e30:	str	r3, [sp, #44]	; 0x2c
   11e34:	ldr	r3, [sp, #24]
   11e38:	add	r3, r3, #80	; 0x50
   11e3c:	str	r3, [sp, #24]
   11e40:	ldr	r3, [sp, #44]	; 0x2c
   11e44:	ldr	r2, [sp, #64]	; 0x40
   11e48:	cmp	r3, r2
   11e4c:	beq	12828 <__assert_fail@plt+0x1414>
   11e50:	ldr	r3, [sp, #24]
   11e54:	ldr	r1, [pc, #-1216]	; 1199c <__assert_fail@plt+0x588>
   11e58:	ldr	r4, [r3]
   11e5c:	mov	r0, r4
   11e60:	bl	110cc <strcmp@plt>
   11e64:	ldrd	r2, [sp, #104]	; 0x68
   11e68:	strd	r2, [sp, #32]
   11e6c:	subs	r3, r0, #0
   11e70:	str	r3, [sp, #56]	; 0x38
   11e74:	bne	11f44 <__assert_fail@plt+0xb30>
   11e78:	ldrb	r2, [sl, #1]
   11e7c:	mov	r3, #1
   11e80:	strb	r3, [sl, #4]
   11e84:	cmp	r2, #0
   11e88:	beq	11ccc <__assert_fail@plt+0x8b8>
   11e8c:	ldr	r3, [sp, #56]	; 0x38
   11e90:	str	r3, [sp, #28]
   11e94:	ldr	r2, [sp, #24]
   11e98:	mov	r3, #1
   11e9c:	strb	r3, [r2, #46]	; 0x2e
   11ea0:	b	11cdc <__assert_fail@plt+0x8c8>
   11ea4:	mov	r2, #5
   11ea8:	ldr	r1, [pc, #-1344]	; 11970 <__assert_fail@plt+0x55c>
   11eac:	mov	r0, r4
   11eb0:	bl	11174 <dcgettext@plt>
   11eb4:	mov	r1, r4
   11eb8:	mov	r2, r0
   11ebc:	mov	r0, r4
   11ec0:	bl	1121c <error@plt>
   11ec4:	ldr	r0, [sl, #8]
   11ec8:	cmp	r0, #0
   11ecc:	beq	11b4c <__assert_fail@plt+0x738>
   11ed0:	ldrb	r4, [sl, #7]
   11ed4:	cmp	r4, #0
   11ed8:	bne	11b04 <__assert_fail@plt+0x6f0>
   11edc:	mov	r2, #5
   11ee0:	ldr	r1, [pc, #-1396]	; 11974 <__assert_fail@plt+0x560>
   11ee4:	mov	r0, r4
   11ee8:	bl	11174 <dcgettext@plt>
   11eec:	mov	r1, r4
   11ef0:	mov	r2, r0
   11ef4:	mov	r0, r4
   11ef8:	bl	1121c <error@plt>
   11efc:	b	11b4c <__assert_fail@plt+0x738>
   11f00:	mov	r8, #0
   11f04:	mov	r0, #5120	; 0x1400
   11f08:	add	r3, r2, #1
   11f0c:	b	11874 <__assert_fail@plt+0x460>
   11f10:	mov	r8, #1
   11f14:	mov	r0, #10
   11f18:	b	11f08 <__assert_fail@plt+0xaf4>
   11f1c:	mov	r8, #0
   11f20:	mov	r0, #10
   11f24:	b	11f08 <__assert_fail@plt+0xaf4>
   11f28:	sub	r2, r5, r3
   11f2c:	str	r2, [sp, #64]	; 0x40
   11f30:	add	r6, r6, r3, lsl #2
   11f34:	b	11b8c <__assert_fail@plt+0x778>
   11f38:	add	sp, sp, #348	; 0x15c
   11f3c:	vpop	{d8-d11}
   11f40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f44:	mov	r0, r4
   11f48:	mov	r1, #0
   11f4c:	bl	16ee4 <__assert_fail@plt+0x5ad0>
   11f50:	ldrb	r3, [sl, #1]
   11f54:	cmp	r3, #0
   11f58:	str	r0, [sp, #28]
   11f5c:	beq	12458 <__assert_fail@plt+0x1044>
   11f60:	cmn	r0, #1
   11f64:	bne	11e94 <__assert_fail@plt+0xa80>
   11f68:	mov	r3, #0
   11f6c:	ldr	r2, [sp, #24]
   11f70:	mov	r4, r3
   11f74:	strb	r3, [r2, #46]	; 0x2e
   11f78:	ldrb	r3, [sl, #7]
   11f7c:	cmp	r3, #0
   11f80:	beq	11fb4 <__assert_fail@plt+0xba0>
   11f84:	ldr	r5, [sp, #24]
   11f88:	mvn	r3, #0
   11f8c:	str	r3, [r5, #48]	; 0x30
   11f90:	bl	112dc <__errno_location@plt>
   11f94:	strb	r4, [r5, #44]	; 0x2c
   11f98:	mov	r2, r5
   11f9c:	mov	r4, #0
   11fa0:	mov	r5, #0
   11fa4:	strd	r4, [r2, #32]
   11fa8:	strd	r4, [r2, #24]
   11fac:	ldr	r3, [r0]
   11fb0:	str	r3, [r2, #52]	; 0x34
   11fb4:	bl	112dc <__errno_location@plt>
   11fb8:	mov	r2, #5
   11fbc:	ldr	r1, [pc, #-1612]	; 11978 <__assert_fail@plt+0x564>
   11fc0:	ldr	r5, [r0]
   11fc4:	mov	r0, #0
   11fc8:	bl	11174 <dcgettext@plt>
   11fcc:	ldr	r3, [sp, #24]
   11fd0:	ldr	r1, [pc, #-1596]	; 1199c <__assert_fail@plt+0x588>
   11fd4:	ldr	r4, [r3]
   11fd8:	mov	r6, r0
   11fdc:	mov	r0, r4
   11fe0:	bl	110cc <strcmp@plt>
   11fe4:	cmp	r0, #0
   11fe8:	movne	r1, r4
   11fec:	bne	12000 <__assert_fail@plt+0xbec>
   11ff0:	ldr	r1, [pc, #-1624]	; 119a0 <__assert_fail@plt+0x58c>
   11ff4:	mov	r2, #5
   11ff8:	bl	11174 <dcgettext@plt>
   11ffc:	mov	r1, r0
   12000:	mov	r0, #4
   12004:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   12008:	mov	r2, r6
   1200c:	mov	r1, r5
   12010:	mov	r3, r0
   12014:	mov	r0, #0
   12018:	bl	1121c <error@plt>
   1201c:	mov	r3, #0
   12020:	str	r3, [sp, #48]	; 0x30
   12024:	b	11e18 <__assert_fail@plt+0xa04>
   12028:	add	r2, sp, #136	; 0x88
   1202c:	ldr	r1, [sp, #28]
   12030:	mov	r0, #3
   12034:	bl	111c8 <__fxstat64@plt>
   12038:	cmp	r0, #0
   1203c:	bne	1291c <__assert_fail@plt+0x1508>
   12040:	ldrb	r3, [sl, #6]
   12044:	cmp	r3, #0
   12048:	str	r3, [sp, #80]	; 0x50
   1204c:	bne	128cc <__assert_fail@plt+0x14b8>
   12050:	ldrb	r4, [sl, #12]
   12054:	cmp	r4, #0
   12058:	bne	1206c <__assert_fail@plt+0xc58>
   1205c:	ldr	r3, [sp, #152]	; 0x98
   12060:	and	r3, r3, #61440	; 0xf000
   12064:	cmp	r3, #32768	; 0x8000
   12068:	beq	12ff4 <__assert_fail@plt+0x1be0>
   1206c:	ldr	r0, [pc, #-1784]	; 1197c <__assert_fail@plt+0x568>
   12070:	bl	1d460 <__assert_fail@plt+0xc04c>
   12074:	mov	fp, #0
   12078:	str	fp, [sp, #40]	; 0x28
   1207c:	add	r3, r0, #8192	; 0x2000
   12080:	str	r0, [sp, #52]	; 0x34
   12084:	mov	r7, r0
   12088:	str	fp, [r3, #4]
   1208c:	str	fp, [r3]
   12090:	str	fp, [r3, #8]
   12094:	ldr	r0, [pc, #-1824]	; 1197c <__assert_fail@plt+0x568>
   12098:	bl	1d460 <__assert_fail@plt+0xc04c>
   1209c:	mov	r8, r0
   120a0:	mov	r2, #8192	; 0x2000
   120a4:	mov	r1, r8
   120a8:	ldr	r0, [sp, #28]
   120ac:	bl	1c980 <__assert_fail@plt+0xb56c>
   120b0:	sub	r3, r0, #1
   120b4:	cmn	r3, #3
   120b8:	mov	r9, r0
   120bc:	bhi	125a4 <__assert_fail@plt+0x1190>
   120c0:	ldrd	r2, [sp, #112]	; 0x70
   120c4:	add	r4, r8, #8192	; 0x2000
   120c8:	add	r5, r8, r0
   120cc:	adds	r2, r2, r0
   120d0:	adc	r3, r3, #0
   120d4:	str	r0, [r4]
   120d8:	strd	r2, [sp, #112]	; 0x70
   120dc:	mov	r3, #0
   120e0:	ldrb	r6, [sl]
   120e4:	mov	r0, r8
   120e8:	str	r3, [r4, #4]
   120ec:	str	r3, [r4, #8]
   120f0:	mov	fp, r3
   120f4:	b	12104 <__assert_fail@plt+0xcf0>
   120f8:	add	r0, r0, #1
   120fc:	mov	fp, r3
   12100:	str	r3, [r4, #4]
   12104:	sub	r2, r5, r0
   12108:	mov	r1, r6
   1210c:	bl	11330 <memchr@plt>
   12110:	add	r3, fp, #1
   12114:	cmp	r0, #0
   12118:	bne	120f8 <__assert_fail@plt+0xce4>
   1211c:	ldr	r3, [sp, #52]	; 0x34
   12120:	ldr	r2, [pc, #-1920]	; 119a8 <__assert_fail@plt+0x594>
   12124:	add	r5, r3, #8192	; 0x2000
   12128:	ldr	r3, [sp, #40]	; 0x28
   1212c:	ldr	r0, [r5]
   12130:	add	r3, r3, fp
   12134:	str	r3, [sp, #40]	; 0x28
   12138:	add	r3, r9, r0
   1213c:	cmp	r3, r2
   12140:	bls	12180 <__assert_fail@plt+0xd6c>
   12144:	add	r2, r7, #8192	; 0x2000
   12148:	ldr	r1, [sp, #40]	; 0x28
   1214c:	str	r8, [r5, #8]
   12150:	ldr	r3, [r2, #4]
   12154:	ldrd	r4, [sp, #32]
   12158:	sub	r3, r1, r3
   1215c:	mov	r1, #0
   12160:	cmp	r5, r1
   12164:	cmpeq	r4, r3
   12168:	bcs	121b0 <__assert_fail@plt+0xd9c>
   1216c:	str	r8, [sp, #52]	; 0x34
   12170:	str	r3, [sp, #40]	; 0x28
   12174:	mov	r8, r7
   12178:	ldr	r7, [r2, #8]
   1217c:	b	120a0 <__assert_fail@plt+0xc8c>
   12180:	ldr	r3, [sp, #52]	; 0x34
   12184:	mov	r2, r9
   12188:	add	r0, r3, r0
   1218c:	mov	r1, r8
   12190:	bl	1112c <memcpy@plt>
   12194:	ldm	r4, {r0, r1}
   12198:	ldr	r2, [r5]
   1219c:	ldr	r3, [r5, #4]
   121a0:	add	r2, r2, r0
   121a4:	add	r3, r3, r1
   121a8:	stm	r5, {r2, r3}
   121ac:	b	120a0 <__assert_fail@plt+0xc8c>
   121b0:	ldr	r0, [pc, #-2108]	; 1197c <__assert_fail@plt+0x568>
   121b4:	bl	1d460 <__assert_fail@plt+0xc04c>
   121b8:	str	r8, [sp, #52]	; 0x34
   121bc:	mov	r8, r0
   121c0:	b	120a0 <__assert_fail@plt+0xc8c>
   121c4:	ldr	r3, [sp, #24]
   121c8:	ldr	r1, [pc, #-2100]	; 1199c <__assert_fail@plt+0x588>
   121cc:	ldr	r4, [r3]
   121d0:	mov	r0, r4
   121d4:	bl	110cc <strcmp@plt>
   121d8:	cmp	r0, #0
   121dc:	movne	r3, r4
   121e0:	bne	121f4 <__assert_fail@plt+0xde0>
   121e4:	mov	r2, #5
   121e8:	ldr	r1, [pc, #-2128]	; 119a0 <__assert_fail@plt+0x58c>
   121ec:	bl	11174 <dcgettext@plt>
   121f0:	mov	r3, r0
   121f4:	ldr	r4, [pc, #-2172]	; 11980 <__assert_fail@plt+0x56c>
   121f8:	ldr	r0, [pc, #-2160]	; 11990 <__assert_fail@plt+0x57c>
   121fc:	ldr	r2, [pc, #-2176]	; 11984 <__assert_fail@plt+0x570>
   12200:	ldrb	ip, [r4]
   12204:	ldr	r1, [pc, #-2180]	; 11988 <__assert_fail@plt+0x574>
   12208:	cmp	ip, #0
   1220c:	movne	r2, r0
   12210:	mov	r0, #1
   12214:	bl	11300 <__printf_chk@plt>
   12218:	mov	r3, #0
   1221c:	strb	r3, [r4]
   12220:	b	11ce8 <__assert_fail@plt+0x8d4>
   12224:	ldr	r2, [sp, #24]
   12228:	ldr	r3, [sp, #48]	; 0x30
   1222c:	ldr	r1, [sp, #28]
   12230:	sub	r3, r3, #1
   12234:	str	r3, [r2, #52]	; 0x34
   12238:	mov	r0, #3
   1223c:	add	r2, sp, #240	; 0xf0
   12240:	bl	111c8 <__fxstat64@plt>
   12244:	cmp	r0, #0
   12248:	blt	12d30 <__assert_fail@plt+0x191c>
   1224c:	ldr	r2, [sp, #256]	; 0x100
   12250:	and	r3, r2, #61440	; 0xf000
   12254:	sub	r3, r3, #4096	; 0x1000
   12258:	and	ip, r2, #45056	; 0xb000
   1225c:	bic	r3, r3, #4096	; 0x1000
   12260:	cmp	r3, #0
   12264:	cmpne	ip, #32768	; 0x8000
   12268:	movne	ip, #1
   1226c:	moveq	ip, #0
   12270:	beq	124f8 <__assert_fail@plt+0x10e4>
   12274:	ldrb	r3, [sl, #1]
   12278:	ldr	r4, [sp, #24]
   1227c:	mvn	r2, #0
   12280:	eor	r3, r3, #1
   12284:	mov	r0, #0
   12288:	strb	r3, [r4, #44]	; 0x2c
   1228c:	str	r2, [r4, #52]	; 0x34
   12290:	strb	r0, [r4, #46]	; 0x2e
   12294:	mov	r2, #5
   12298:	ldr	r1, [pc, #-2324]	; 1198c <__assert_fail@plt+0x578>
   1229c:	bl	11174 <dcgettext@plt>
   122a0:	ldr	r4, [r4]
   122a4:	ldr	r1, [pc, #-2320]	; 1199c <__assert_fail@plt+0x588>
   122a8:	mov	r5, r0
   122ac:	mov	r0, r4
   122b0:	bl	110cc <strcmp@plt>
   122b4:	cmp	r0, #0
   122b8:	movne	r2, r4
   122bc:	bne	122d0 <__assert_fail@plt+0xebc>
   122c0:	mov	r2, #5
   122c4:	ldr	r1, [pc, #-2348]	; 119a0 <__assert_fail@plt+0x58c>
   122c8:	bl	11174 <dcgettext@plt>
   122cc:	mov	r2, r0
   122d0:	mov	r1, #3
   122d4:	mov	r0, #0
   122d8:	bl	1b90c <__assert_fail@plt+0xa4f8>
   122dc:	ldr	r3, [sp, #24]
   122e0:	ldrb	r3, [r3, #44]	; 0x2c
   122e4:	cmp	r3, #0
   122e8:	mov	r4, r0
   122ec:	ldreq	r0, [pc, #-2404]	; 11990 <__assert_fail@plt+0x57c>
   122f0:	bne	130d8 <__assert_fail@plt+0x1cc4>
   122f4:	mov	r1, #0
   122f8:	str	r0, [sp]
   122fc:	mov	r3, r4
   12300:	mov	r2, r5
   12304:	mov	r0, r1
   12308:	bl	1121c <error@plt>
   1230c:	ldr	r2, [sp, #24]
   12310:	ldrb	r3, [sl, #1]
   12314:	ldr	r1, [pc, #-2432]	; 1199c <__assert_fail@plt+0x588>
   12318:	ldr	r4, [r2]
   1231c:	eor	r3, r3, #1
   12320:	strb	r3, [r2, #44]	; 0x2c
   12324:	mov	r0, r4
   12328:	bl	110cc <strcmp@plt>
   1232c:	cmp	r0, #0
   12330:	bne	12344 <__assert_fail@plt+0xf30>
   12334:	mov	r2, #5
   12338:	ldr	r1, [pc, #-2464]	; 119a0 <__assert_fail@plt+0x58c>
   1233c:	bl	11174 <dcgettext@plt>
   12340:	mov	r4, r0
   12344:	ldr	r3, [sp, #28]
   12348:	cmp	r3, #0
   1234c:	beq	123a4 <__assert_fail@plt+0xf90>
   12350:	mov	r0, r3
   12354:	bl	113fc <close@plt>
   12358:	cmp	r0, #0
   1235c:	beq	123a4 <__assert_fail@plt+0xf90>
   12360:	bl	112dc <__errno_location@plt>
   12364:	mov	r2, #5
   12368:	ldr	r1, [pc, #-2524]	; 11994 <__assert_fail@plt+0x580>
   1236c:	ldr	r6, [r0]
   12370:	mov	r0, #0
   12374:	bl	11174 <dcgettext@plt>
   12378:	mov	r1, r4
   1237c:	mov	r5, r0
   12380:	mov	r0, #4
   12384:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   12388:	ldr	r3, [sp, #28]
   1238c:	mov	r1, r6
   12390:	str	r3, [sp]
   12394:	mov	r2, r5
   12398:	mov	r3, r0
   1239c:	mov	r0, #0
   123a0:	bl	1121c <error@plt>
   123a4:	ldr	r2, [sp, #24]
   123a8:	mvn	r3, #0
   123ac:	str	r3, [r2, #48]	; 0x30
   123b0:	mov	r3, #0
   123b4:	str	r3, [sp, #48]	; 0x30
   123b8:	b	11e18 <__assert_fail@plt+0xa04>
   123bc:	ldrb	r3, [sl, #12]
   123c0:	cmp	r3, #0
   123c4:	bne	12708 <__assert_fail@plt+0x12f4>
   123c8:	ldrd	r2, [sp, #32]
   123cc:	cmp	r2, #0
   123d0:	sbcs	r3, r3, #0
   123d4:	blt	12708 <__assert_fail@plt+0x12f4>
   123d8:	ldr	r3, [sp, #256]	; 0x100
   123dc:	and	r3, r3, #53248	; 0xd000
   123e0:	cmp	r3, #32768	; 0x8000
   123e4:	bne	12e44 <__assert_fail@plt+0x1a30>
   123e8:	add	r3, sp, #288	; 0x120
   123ec:	mvn	r8, #0
   123f0:	ldrd	r4, [r3]
   123f4:	mvn	r9, #0
   123f8:	ldr	r2, [sp, #296]	; 0x128
   123fc:	sub	r3, r2, #1
   12400:	cmn	r3, #-536870911	; 0xe0000001
   12404:	movhi	r2, #512	; 0x200
   12408:	cmp	r2, r4
   1240c:	asr	r3, r2, #31
   12410:	sbcs	r3, r3, r5
   12414:	bge	12708 <__assert_fail@plt+0x12f4>
   12418:	mvn	r3, #0
   1241c:	mvn	r2, #0
   12420:	cmp	r9, r3
   12424:	cmpeq	r8, r2
   12428:	beq	12f54 <__assert_fail@plt+0x1b40>
   1242c:	cmp	r8, r4
   12430:	sbcs	r3, r9, r5
   12434:	bge	12450 <__assert_fail@plt+0x103c>
   12438:	ldrd	r0, [sp, #32]
   1243c:	subs	r2, r4, r8
   12440:	sbc	r3, r5, r9
   12444:	cmp	r1, r3
   12448:	cmpeq	r0, r2
   1244c:	bcc	12e90 <__assert_fail@plt+0x1a7c>
   12450:	strd	r8, [sp, #112]	; 0x70
   12454:	b	11dd8 <__assert_fail@plt+0x9c4>
   12458:	ldr	r3, [sp, #28]
   1245c:	ldr	r2, [sp, #24]
   12460:	cmn	r3, #1
   12464:	mov	r3, #1
   12468:	strb	r3, [r2, #46]	; 0x2e
   1246c:	bne	11cdc <__assert_fail@plt+0x8c8>
   12470:	mov	r4, r3
   12474:	b	11f78 <__assert_fail@plt+0xb64>
   12478:	ldr	r0, [sp, #28]
   1247c:	bl	113fc <close@plt>
   12480:	cmp	r0, #0
   12484:	beq	11e18 <__assert_fail@plt+0xa04>
   12488:	bl	112dc <__errno_location@plt>
   1248c:	mov	r2, #5
   12490:	ldr	r1, [pc, #-2816]	; 11998 <__assert_fail@plt+0x584>
   12494:	ldr	r6, [r0]
   12498:	mov	r0, r4
   1249c:	bl	11174 <dcgettext@plt>
   124a0:	ldr	r3, [sp, #24]
   124a4:	ldr	r1, [pc, #-2832]	; 1199c <__assert_fail@plt+0x588>
   124a8:	ldr	r5, [r3]
   124ac:	mov	r7, r0
   124b0:	mov	r0, r5
   124b4:	bl	110cc <strcmp@plt>
   124b8:	cmp	r0, #0
   124bc:	movne	r1, r5
   124c0:	bne	124d4 <__assert_fail@plt+0x10c0>
   124c4:	ldr	r1, [pc, #-2860]	; 119a0 <__assert_fail@plt+0x58c>
   124c8:	mov	r2, #5
   124cc:	bl	11174 <dcgettext@plt>
   124d0:	mov	r1, r0
   124d4:	mov	r0, #4
   124d8:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   124dc:	mov	r2, r7
   124e0:	mov	r1, r6
   124e4:	mov	r3, r0
   124e8:	mov	r0, #0
   124ec:	bl	1121c <error@plt>
   124f0:	str	r4, [sp, #48]	; 0x30
   124f4:	b	11e18 <__assert_fail@plt+0xa04>
   124f8:	ldr	r3, [sp, #48]	; 0x30
   124fc:	cmp	r3, #0
   12500:	beq	1230c <__assert_fail@plt+0xef8>
   12504:	ldr	lr, [sp, #56]	; 0x38
   12508:	ldr	r3, [sp, #76]	; 0x4c
   1250c:	cmp	lr, #0
   12510:	ldr	lr, [sp, #24]
   12514:	movne	r3, #1
   12518:	ldrd	r0, [sp, #112]	; 0x70
   1251c:	str	r3, [lr, #56]	; 0x38
   12520:	ldr	r3, [sp, #28]
   12524:	strd	r0, [lr, #8]
   12528:	str	r3, [lr, #48]	; 0x30
   1252c:	str	r2, [lr, #40]	; 0x28
   12530:	add	r1, sp, #336	; 0x150
   12534:	ldrd	r2, [sp, #240]	; 0xf0
   12538:	mov	r4, #0
   1253c:	mov	r5, #0
   12540:	ldrd	r0, [r1]
   12544:	strd	r2, [lr, #24]
   12548:	strd	r4, [lr, #72]	; 0x48
   1254c:	ldr	r2, [sp, #324]	; 0x144
   12550:	ldr	r4, [lr]
   12554:	ldr	r3, [sp, #320]	; 0x140
   12558:	strd	r0, [lr, #32]
   1255c:	strb	ip, [lr, #44]	; 0x2c
   12560:	ldr	r1, [pc, #-3020]	; 1199c <__assert_fail@plt+0x588>
   12564:	str	r2, [lr, #20]
   12568:	str	r3, [lr, #16]
   1256c:	mov	r0, r4
   12570:	bl	110cc <strcmp@plt>
   12574:	cmp	r0, #0
   12578:	movne	r1, r4
   1257c:	bne	12590 <__assert_fail@plt+0x117c>
   12580:	ldr	r1, [pc, #-3048]	; 119a0 <__assert_fail@plt+0x58c>
   12584:	mov	r2, #5
   12588:	bl	11174 <dcgettext@plt>
   1258c:	mov	r1, r0
   12590:	ldr	r0, [sp, #28]
   12594:	bl	1434c <__assert_fail@plt+0x2f38>
   12598:	ldr	r3, [sp, #24]
   1259c:	strb	r0, [r3, #45]	; 0x2d
   125a0:	b	11e18 <__assert_fail@plt+0xa04>
   125a4:	mov	r0, r8
   125a8:	bl	16f1c <__assert_fail@plt+0x5b08>
   125ac:	cmn	r9, #1
   125b0:	beq	12f0c <__assert_fail@plt+0x1af8>
   125b4:	ldr	ip, [sp, #52]	; 0x34
   125b8:	ldrd	r0, [sp, #32]
   125bc:	add	r2, ip, #8192	; 0x2000
   125c0:	orr	r3, r0, r1
   125c4:	ldr	r1, [r2]
   125c8:	cmp	r3, #0
   125cc:	cmpne	r1, #0
   125d0:	beq	126e4 <__assert_fail@plt+0x12d0>
   125d4:	add	r3, ip, r1
   125d8:	ldrb	r5, [sl]
   125dc:	ldrb	r3, [r3, #-1]
   125e0:	cmp	r3, r5
   125e4:	beq	12600 <__assert_fail@plt+0x11ec>
   125e8:	ldr	r3, [r2, #4]
   125ec:	ldr	r1, [sp, #40]	; 0x28
   125f0:	add	r3, r3, #1
   125f4:	add	r1, r1, #1
   125f8:	str	r1, [sp, #40]	; 0x28
   125fc:	str	r3, [r2, #4]
   12600:	mov	r2, r7
   12604:	mov	lr, r7
   12608:	ldr	ip, [sp, #40]	; 0x28
   1260c:	ldrd	r6, [sp, #32]
   12610:	b	1261c <__assert_fail@plt+0x1208>
   12614:	ldr	r2, [r4, #8]
   12618:	mov	ip, r3
   1261c:	add	r4, r2, #8192	; 0x2000
   12620:	mov	r1, #0
   12624:	ldr	r3, [r4, #4]
   12628:	cmp	r7, r1
   1262c:	sub	r3, ip, r3
   12630:	cmpeq	r6, r3
   12634:	bcc	12614 <__assert_fail@plt+0x1200>
   12638:	ldrd	r8, [sp, #32]
   1263c:	mov	r3, #0
   12640:	ldr	r6, [r4]
   12644:	cmp	r9, r3
   12648:	mov	r0, r2
   1264c:	cmpeq	r8, ip
   12650:	mov	r7, lr
   12654:	add	r6, r0, r6
   12658:	bcs	1267c <__assert_fail@plt+0x1268>
   1265c:	sub	fp, ip, r8
   12660:	b	12674 <__assert_fail@plt+0x1260>
   12664:	mov	r1, r5
   12668:	bl	11198 <rawmemchr@plt>
   1266c:	sub	fp, fp, #1
   12670:	add	r0, r0, #1
   12674:	cmp	fp, #0
   12678:	bne	12664 <__assert_fail@plt+0x1250>
   1267c:	subs	r6, r6, r0
   12680:	beq	126a0 <__assert_fail@plt+0x128c>
   12684:	ldr	r3, [pc, #-3304]	; 119a4 <__assert_fail@plt+0x590>
   12688:	mov	r2, r6
   1268c:	mov	r1, #1
   12690:	ldr	r3, [r3]
   12694:	bl	11150 <fwrite_unlocked@plt>
   12698:	cmp	r6, r0
   1269c:	bhi	136ec <__assert_fail@plt+0x22d8>
   126a0:	ldr	r0, [r4, #8]
   126a4:	mov	r6, #1
   126a8:	b	126dc <__assert_fail@plt+0x12c8>
   126ac:	add	r5, r0, #8192	; 0x2000
   126b0:	ldr	r4, [r5]
   126b4:	cmp	r4, #0
   126b8:	beq	126d8 <__assert_fail@plt+0x12c4>
   126bc:	ldr	r3, [pc, #-3360]	; 119a4 <__assert_fail@plt+0x590>
   126c0:	mov	r2, r4
   126c4:	mov	r1, r6
   126c8:	ldr	r3, [r3]
   126cc:	bl	11150 <fwrite_unlocked@plt>
   126d0:	cmp	r4, r0
   126d4:	bhi	136ec <__assert_fail@plt+0x22d8>
   126d8:	ldr	r0, [r5, #8]
   126dc:	cmp	r0, #0
   126e0:	bne	126ac <__assert_fail@plt+0x1298>
   126e4:	cmp	r7, #0
   126e8:	movne	r0, r7
   126ec:	beq	11e00 <__assert_fail@plt+0x9ec>
   126f0:	add	r3, r0, #8192	; 0x2000
   126f4:	ldr	r4, [r3, #8]
   126f8:	bl	16f1c <__assert_fail@plt+0x5b08>
   126fc:	subs	r0, r4, #0
   12700:	bne	126f0 <__assert_fail@plt+0x12dc>
   12704:	b	11e00 <__assert_fail@plt+0x9ec>
   12708:	ldr	r0, [pc, #-3424]	; 119b0 <__assert_fail@plt+0x59c>
   1270c:	bl	1d460 <__assert_fail@plt+0xc04c>
   12710:	mov	r5, #0
   12714:	add	r3, r0, #8192	; 0x2000
   12718:	mov	r7, r0
   1271c:	str	r5, [r3]
   12720:	str	r5, [r3, #4]
   12724:	ldr	r0, [pc, #-3452]	; 119b0 <__assert_fail@plt+0x59c>
   12728:	bl	1d460 <__assert_fail@plt+0xc04c>
   1272c:	mov	r4, r7
   12730:	ldr	fp, [sp, #28]
   12734:	mov	r6, r0
   12738:	b	12774 <__assert_fail@plt+0x1360>
   1273c:	add	r2, r4, #8192	; 0x2000
   12740:	str	r6, [r8, #4]
   12744:	ldrd	r8, [sp, #32]
   12748:	ldr	r3, [r2]
   1274c:	mov	r1, #0
   12750:	sub	r3, r5, r3
   12754:	cmp	r9, r1
   12758:	cmpeq	r8, r3
   1275c:	bcs	128c0 <__assert_fail@plt+0x14ac>
   12760:	mov	r0, r4
   12764:	ldr	r4, [r2, #4]
   12768:	mov	r5, r3
   1276c:	mov	r7, r6
   12770:	mov	r6, r0
   12774:	mov	r2, #8192	; 0x2000
   12778:	mov	r1, r6
   1277c:	mov	r0, fp
   12780:	bl	1c980 <__assert_fail@plt+0xb56c>
   12784:	sub	r3, r0, #1
   12788:	cmn	r3, #3
   1278c:	bhi	12950 <__assert_fail@plt+0x153c>
   12790:	ldrd	r2, [sp, #112]	; 0x70
   12794:	add	r9, r6, #8192	; 0x2000
   12798:	add	r8, r7, #8192	; 0x2000
   1279c:	adds	r2, r2, r0
   127a0:	adc	r3, r3, #0
   127a4:	ldr	r1, [pc, #-3588]	; 119a8 <__assert_fail@plt+0x594>
   127a8:	strd	r2, [sp, #112]	; 0x70
   127ac:	str	r0, [r9]
   127b0:	ldr	r3, [r8]
   127b4:	mov	r2, #0
   127b8:	str	r2, [r9, #4]
   127bc:	add	r2, r0, r3
   127c0:	cmp	r2, r1
   127c4:	add	r5, r5, r0
   127c8:	bhi	1273c <__assert_fail@plt+0x1328>
   127cc:	mov	r2, r0
   127d0:	mov	r1, r6
   127d4:	add	r0, r7, r3
   127d8:	bl	1112c <memcpy@plt>
   127dc:	ldr	r2, [r9]
   127e0:	ldr	r3, [r8]
   127e4:	mov	r0, r6
   127e8:	add	r3, r3, r2
   127ec:	mov	r6, r7
   127f0:	str	r3, [r8]
   127f4:	b	1276c <__assert_fail@plt+0x1358>
   127f8:	add	r1, sp, #112	; 0x70
   127fc:	str	r1, [sp]
   12800:	ldrd	r2, [sp, #32]
   12804:	ldr	r1, [sp, #28]
   12808:	ldr	r0, [sp, #68]	; 0x44
   1280c:	bl	14da4 <__assert_fail@plt+0x3990>
   12810:	cmp	r0, #0
   12814:	bne	128a8 <__assert_fail@plt+0x1494>
   12818:	mvn	r2, #0
   1281c:	mvn	r3, #0
   12820:	strd	r2, [sp, #32]
   12824:	b	11dd8 <__assert_fail@plt+0x9c4>
   12828:	ldrb	r3, [sl, #7]
   1282c:	ldr	fp, [sp, #76]	; 0x4c
   12830:	cmp	r3, #0
   12834:	str	r3, [sp, #48]	; 0x30
   12838:	bne	12a54 <__assert_fail@plt+0x1640>
   1283c:	ldrb	r3, [sl, #4]
   12840:	cmp	r3, #0
   12844:	beq	12858 <__assert_fail@plt+0x1444>
   12848:	mov	r0, #0
   1284c:	bl	113fc <close@plt>
   12850:	cmp	r0, #0
   12854:	blt	12fe0 <__assert_fail@plt+0x1bcc>
   12858:	ldr	r3, [sp, #60]	; 0x3c
   1285c:	eor	r0, r3, #1
   12860:	bl	11294 <exit@plt>
   12864:	bl	112dc <__errno_location@plt>
   12868:	ldr	r6, [sp, #48]	; 0x30
   1286c:	ldr	r1, [pc, #-3784]	; 119ac <__assert_fail@plt+0x598>
   12870:	mov	r2, #5
   12874:	ldr	r4, [r0]
   12878:	mov	r0, r6
   1287c:	bl	11174 <dcgettext@plt>
   12880:	ldr	r1, [sp, #68]	; 0x44
   12884:	mov	r5, r0
   12888:	mov	r0, #4
   1288c:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   12890:	mov	r2, r5
   12894:	mov	r1, r4
   12898:	mov	r3, r0
   1289c:	mov	r0, #0
   128a0:	bl	1121c <error@plt>
   128a4:	b	11e00 <__assert_fail@plt+0x9ec>
   128a8:	lsr	r3, r0, #31
   128ac:	str	r3, [sp, #48]	; 0x30
   128b0:	b	11e00 <__assert_fail@plt+0x9ec>
   128b4:	asr	r1, r0, #31
   128b8:	strd	r0, [sp, #104]	; 0x68
   128bc:	b	118c0 <__assert_fail@plt+0x4ac>
   128c0:	ldr	r0, [pc, #-3864]	; 119b0 <__assert_fail@plt+0x59c>
   128c4:	bl	1d460 <__assert_fail@plt+0xc04c>
   128c8:	b	1276c <__assert_fail@plt+0x1358>
   128cc:	add	r1, sp, #112	; 0x70
   128d0:	str	r1, [sp]
   128d4:	ldrd	r2, [sp, #32]
   128d8:	ldr	r1, [sp, #28]
   128dc:	ldr	r0, [sp, #68]	; 0x44
   128e0:	bl	152fc <__assert_fail@plt+0x3ee8>
   128e4:	cmp	r0, #0
   128e8:	bne	128a8 <__assert_fail@plt+0x1494>
   128ec:	mvn	r2, #0
   128f0:	mvn	r3, #0
   128f4:	ldr	r0, [sp, #68]	; 0x44
   128f8:	ldr	r1, [sp, #28]
   128fc:	bl	14ab8 <__assert_fail@plt+0x36a4>
   12900:	ldrd	r2, [sp, #112]	; 0x70
   12904:	ldr	ip, [sp, #80]	; 0x50
   12908:	str	ip, [sp, #48]	; 0x30
   1290c:	adds	r2, r2, r0
   12910:	adc	r3, r3, r1
   12914:	strd	r2, [sp, #112]	; 0x70
   12918:	b	11e00 <__assert_fail@plt+0x9ec>
   1291c:	bl	112dc <__errno_location@plt>
   12920:	mov	r3, #0
   12924:	mov	r2, #5
   12928:	ldr	r1, [pc, #3864]	; 13848 <__assert_fail@plt+0x2434>
   1292c:	str	r3, [sp, #48]	; 0x30
   12930:	ldr	r4, [r0]
   12934:	mov	r0, r3
   12938:	b	1287c <__assert_fail@plt+0x1468>
   1293c:	mov	r1, #80	; 0x50
   12940:	ldr	r0, [sp, #64]	; 0x40
   12944:	bl	1d544 <__assert_fail@plt+0xc130>
   12948:	str	r0, [sp, #72]	; 0x48
   1294c:	b	11c50 <__assert_fail@plt+0x83c>
   12950:	mov	fp, r0
   12954:	mov	r0, r6
   12958:	bl	16f1c <__assert_fail@plt+0x5b08>
   1295c:	cmn	fp, #1
   12960:	beq	13544 <__assert_fail@plt+0x2130>
   12964:	ldrd	r8, [sp, #32]
   12968:	mov	ip, r4
   1296c:	b	12978 <__assert_fail@plt+0x1564>
   12970:	ldr	ip, [r6, #4]
   12974:	mov	r5, r3
   12978:	add	r6, ip, #8192	; 0x2000
   1297c:	mov	r1, #0
   12980:	ldr	r2, [r6]
   12984:	cmp	r9, r1
   12988:	sub	r3, r5, r2
   1298c:	cmpeq	r8, r3
   12990:	mov	r0, r3
   12994:	bcc	12970 <__assert_fail@plt+0x155c>
   12998:	mov	r1, ip
   1299c:	mov	ip, r2
   129a0:	ldrd	r2, [sp, #32]
   129a4:	mov	r9, #0
   129a8:	cmp	r3, r9
   129ac:	cmpeq	r2, r5
   129b0:	movcc	r3, r2
   129b4:	subcc	r0, r5, r3
   129b8:	movcs	r0, #0
   129bc:	subs	r7, ip, r0
   129c0:	beq	129e4 <__assert_fail@plt+0x15d0>
   129c4:	ldr	r3, [pc, #3712]	; 1384c <__assert_fail@plt+0x2438>
   129c8:	add	r0, r1, r0
   129cc:	mov	r2, r7
   129d0:	ldr	r3, [r3]
   129d4:	mov	r1, #1
   129d8:	bl	11150 <fwrite_unlocked@plt>
   129dc:	cmp	r7, r0
   129e0:	bhi	136ec <__assert_fail@plt+0x22d8>
   129e4:	ldr	r0, [r6, #4]
   129e8:	mov	r7, #1
   129ec:	b	12a20 <__assert_fail@plt+0x160c>
   129f0:	add	r6, r0, #8192	; 0x2000
   129f4:	ldr	r5, [r6]
   129f8:	cmp	r5, #0
   129fc:	beq	12a1c <__assert_fail@plt+0x1608>
   12a00:	ldr	r3, [pc, #3652]	; 1384c <__assert_fail@plt+0x2438>
   12a04:	mov	r2, r5
   12a08:	mov	r1, r7
   12a0c:	ldr	r3, [r3]
   12a10:	bl	11150 <fwrite_unlocked@plt>
   12a14:	cmp	r5, r0
   12a18:	bhi	136ec <__assert_fail@plt+0x22d8>
   12a1c:	ldr	r0, [r6, #4]
   12a20:	cmp	r0, #0
   12a24:	bne	129f0 <__assert_fail@plt+0x15dc>
   12a28:	mov	r3, #1
   12a2c:	str	r3, [sp, #48]	; 0x30
   12a30:	mov	r0, r4
   12a34:	b	12a48 <__assert_fail@plt+0x1634>
   12a38:	add	r3, r0, #8192	; 0x2000
   12a3c:	ldr	r4, [r3, #4]
   12a40:	bl	16f1c <__assert_fail@plt+0x5b08>
   12a44:	mov	r0, r4
   12a48:	cmp	r0, #0
   12a4c:	bne	12a38 <__assert_fail@plt+0x1624>
   12a50:	b	11e00 <__assert_fail@plt+0x9ec>
   12a54:	ldr	r2, [sp, #44]	; 0x2c
   12a58:	mov	r8, #80	; 0x50
   12a5c:	ldr	r3, [sp, #72]	; 0x48
   12a60:	mul	r8, r8, r2
   12a64:	mov	r9, r3
   12a68:	mov	r6, #0
   12a6c:	add	r4, r3, r8
   12a70:	ldr	r5, [pc, #3544]	; 13850 <__assert_fail@plt+0x243c>
   12a74:	mvn	r7, #0
   12a78:	b	12ac0 <__assert_fail@plt+0x16ac>
   12a7c:	mov	r1, r5
   12a80:	ldr	r0, [r9]
   12a84:	bl	110cc <strcmp@plt>
   12a88:	cmp	r0, #0
   12a8c:	bne	12ab8 <__assert_fail@plt+0x16a4>
   12a90:	ldrb	r3, [r9, #44]	; 0x2c
   12a94:	cmp	r3, #0
   12a98:	bne	12ab8 <__assert_fail@plt+0x16a4>
   12a9c:	ldr	r3, [r9, #48]	; 0x30
   12aa0:	cmp	r3, #0
   12aa4:	blt	12ab8 <__assert_fail@plt+0x16a4>
   12aa8:	ldr	r3, [r9, #40]	; 0x28
   12aac:	and	r3, r3, #61440	; 0xf000
   12ab0:	cmp	r3, #4096	; 0x1000
   12ab4:	beq	12d20 <__assert_fail@plt+0x190c>
   12ab8:	add	r6, r6, #1
   12abc:	add	r9, r9, #80	; 0x50
   12ac0:	cmp	r4, r9
   12ac4:	bne	12a7c <__assert_fail@plt+0x1668>
   12ac8:	cmp	r6, #0
   12acc:	beq	1283c <__assert_fail@plt+0x1428>
   12ad0:	add	r2, sp, #136	; 0x88
   12ad4:	mov	r1, #1
   12ad8:	mov	r0, #3
   12adc:	bl	111c8 <__fxstat64@plt>
   12ae0:	cmp	r0, #0
   12ae4:	blt	14160 <__assert_fail@plt+0x2d4c>
   12ae8:	ldr	r3, [sp, #152]	; 0x98
   12aec:	ldrb	r4, [sl, #2]
   12af0:	and	r3, r3, #61440	; 0xf000
   12af4:	sub	r3, r3, #4096	; 0x1000
   12af8:	cmp	r4, #0
   12afc:	clz	r3, r3
   12b00:	lsr	r3, r3, #5
   12b04:	strb	r3, [sl, #13]
   12b08:	bne	12ba8 <__assert_fail@plt+0x1794>
   12b0c:	ldr	r5, [pc, #3388]	; 13850 <__assert_fail@plt+0x243c>
   12b10:	ldr	r6, [sp, #72]	; 0x48
   12b14:	b	12b40 <__assert_fail@plt+0x172c>
   12b18:	add	r3, r6, r4
   12b1c:	ldrb	r3, [r3, #44]	; 0x2c
   12b20:	cmp	r3, #0
   12b24:	bne	12b3c <__assert_fail@plt+0x1728>
   12b28:	mov	r1, r5
   12b2c:	ldr	r0, [r6, r4]
   12b30:	bl	110cc <strcmp@plt>
   12b34:	cmp	r0, #0
   12b38:	beq	12ba8 <__assert_fail@plt+0x1794>
   12b3c:	add	r4, r4, #80	; 0x50
   12b40:	cmp	r8, r4
   12b44:	bne	12b18 <__assert_fail@plt+0x1704>
   12b48:	ldr	r3, [sp, #72]	; 0x48
   12b4c:	b	12b6c <__assert_fail@plt+0x1758>
   12b50:	ldr	r2, [r3, #48]	; 0x30
   12b54:	cmp	r2, #0
   12b58:	blt	12b68 <__assert_fail@plt+0x1754>
   12b5c:	ldrb	r2, [r3, #45]	; 0x2d
   12b60:	cmp	r2, #0
   12b64:	bne	12ba8 <__assert_fail@plt+0x1794>
   12b68:	add	r3, r3, #80	; 0x50
   12b6c:	cmp	r9, r3
   12b70:	bne	12b50 <__assert_fail@plt+0x173c>
   12b74:	str	r3, [sp, #28]
   12b78:	ldr	r3, [sp, #72]	; 0x48
   12b7c:	b	12b9c <__assert_fail@plt+0x1788>
   12b80:	ldr	r2, [r3, #48]	; 0x30
   12b84:	cmp	r2, #0
   12b88:	blt	12b98 <__assert_fail@plt+0x1784>
   12b8c:	ldrb	r2, [r3, #45]	; 0x2d
   12b90:	cmp	r2, #0
   12b94:	beq	13718 <__assert_fail@plt+0x2304>
   12b98:	add	r3, r3, #80	; 0x50
   12b9c:	ldr	r2, [sp, #28]
   12ba0:	cmp	r2, r3
   12ba4:	bne	12b80 <__assert_fail@plt+0x176c>
   12ba8:	sub	r8, r8, #80	; 0x50
   12bac:	ldr	r2, [sl, #8]
   12bb0:	mov	r3, #1
   12bb4:	cmp	r2, #0
   12bb8:	strb	r3, [sl, #2]
   12bbc:	bne	12bd8 <__assert_fail@plt+0x17c4>
   12bc0:	ldr	r3, [pc, #3212]	; 13854 <__assert_fail@plt+0x2440>
   12bc4:	ldr	r1, [sp, #44]	; 0x2c
   12bc8:	ldr	r3, [r3, #4]
   12bcc:	cmp	r3, #2
   12bd0:	cmpeq	r1, #1
   12bd4:	beq	13690 <__assert_fail@plt+0x227c>
   12bd8:	mov	r9, #0
   12bdc:	ldr	r3, [sp, #72]	; 0x48
   12be0:	str	r9, [sp, #32]
   12be4:	add	r3, r3, r8
   12be8:	str	r3, [sp, #52]	; 0x34
   12bec:	ldr	r3, [sp, #44]	; 0x2c
   12bf0:	str	r9, [sp, #28]
   12bf4:	sub	r2, r3, #1
   12bf8:	mov	r9, r3
   12bfc:	str	r2, [sp, #40]	; 0x28
   12c00:	mov	r2, #0
   12c04:	str	r2, [sp, #44]	; 0x2c
   12c08:	cmp	r9, #0
   12c0c:	beq	13588 <__assert_fail@plt+0x2174>
   12c10:	mov	r3, #0
   12c14:	str	r3, [sp, #24]
   12c18:	mov	r7, r3
   12c1c:	ldr	r6, [sp, #72]	; 0x48
   12c20:	b	12cf8 <__assert_fail@plt+0x18e4>
   12c24:	ldr	r8, [r6]
   12c28:	ldr	r1, [pc, #3104]	; 13850 <__assert_fail@plt+0x243c>
   12c2c:	mov	r0, r8
   12c30:	bl	110cc <strcmp@plt>
   12c34:	cmp	r0, #0
   12c38:	bne	12c4c <__assert_fail@plt+0x1838>
   12c3c:	mov	r2, #5
   12c40:	ldr	r1, [pc, #3088]	; 13858 <__assert_fail@plt+0x2444>
   12c44:	bl	11174 <dcgettext@plt>
   12c48:	mov	r8, r0
   12c4c:	ldr	fp, [r6, #56]	; 0x38
   12c50:	ldr	r3, [sp, #28]
   12c54:	ldr	r5, [r6, #40]	; 0x28
   12c58:	cmp	r3, fp
   12c5c:	beq	12cac <__assert_fail@plt+0x1898>
   12c60:	mov	r1, #3
   12c64:	mov	r0, r4
   12c68:	bl	16d10 <__assert_fail@plt+0x58fc>
   12c6c:	ldr	r3, [sp, #28]
   12c70:	cmp	r3, #0
   12c74:	bne	131b0 <__assert_fail@plt+0x1d9c>
   12c78:	cmp	r0, #0
   12c7c:	orr	r2, r0, #2048	; 0x800
   12c80:	blt	131b8 <__assert_fail@plt+0x1da4>
   12c84:	cmp	r0, r2
   12c88:	beq	12ca0 <__assert_fail@plt+0x188c>
   12c8c:	mov	r1, #4
   12c90:	mov	r0, r4
   12c94:	bl	16d10 <__assert_fail@plt+0x58fc>
   12c98:	cmn	r0, #1
   12c9c:	beq	131b8 <__assert_fail@plt+0x1da4>
   12ca0:	ldr	r3, [sp, #28]
   12ca4:	mov	fp, r3
   12ca8:	str	r3, [r6, #56]	; 0x38
   12cac:	cmp	fp, #0
   12cb0:	mvnne	r2, #1
   12cb4:	mvnne	r3, #0
   12cb8:	beq	130ec <__assert_fail@plt+0x1cd8>
   12cbc:	mov	r1, r4
   12cc0:	mov	r0, r8
   12cc4:	bl	14ab8 <__assert_fail@plt+0x36a4>
   12cc8:	ldrd	r2, [r6, #8]
   12ccc:	orrs	ip, r0, r1
   12cd0:	ldr	ip, [sp, #24]
   12cd4:	orrne	ip, ip, #1
   12cd8:	adds	r2, r2, r0
   12cdc:	adc	r3, r3, r1
   12ce0:	str	ip, [sp, #24]
   12ce4:	strd	r2, [r6, #8]
   12ce8:	add	r7, r7, #1
   12cec:	cmp	r9, r7
   12cf0:	add	r6, r6, #80	; 0x50
   12cf4:	beq	1324c <__assert_fail@plt+0x1e38>
   12cf8:	ldrb	r3, [r6, #44]	; 0x2c
   12cfc:	cmp	r3, #0
   12d00:	bne	12ce8 <__assert_fail@plt+0x18d4>
   12d04:	ldr	r4, [r6, #48]	; 0x30
   12d08:	cmp	r4, #0
   12d0c:	bge	12c24 <__assert_fail@plt+0x1810>
   12d10:	ldr	r1, [sp, #32]
   12d14:	mov	r0, r6
   12d18:	bl	15434 <__assert_fail@plt+0x4020>
   12d1c:	b	12ce8 <__assert_fail@plt+0x18d4>
   12d20:	mov	r3, #1
   12d24:	str	r7, [r9, #48]	; 0x30
   12d28:	strb	r3, [r9, #44]	; 0x2c
   12d2c:	b	12abc <__assert_fail@plt+0x16a8>
   12d30:	bl	112dc <__errno_location@plt>
   12d34:	ldr	r4, [sp, #24]
   12d38:	mov	r2, #5
   12d3c:	ldr	r1, [pc, #2840]	; 1385c <__assert_fail@plt+0x2448>
   12d40:	ldr	r5, [r0]
   12d44:	mov	r0, #0
   12d48:	str	r5, [r4, #52]	; 0x34
   12d4c:	bl	11174 <dcgettext@plt>
   12d50:	ldr	r4, [r4]
   12d54:	ldr	r1, [pc, #2804]	; 13850 <__assert_fail@plt+0x243c>
   12d58:	mov	r6, r0
   12d5c:	mov	r0, r4
   12d60:	bl	110cc <strcmp@plt>
   12d64:	cmp	r0, #0
   12d68:	movne	r1, r4
   12d6c:	bne	12d80 <__assert_fail@plt+0x196c>
   12d70:	ldr	r1, [pc, #2784]	; 13858 <__assert_fail@plt+0x2444>
   12d74:	mov	r2, #5
   12d78:	bl	11174 <dcgettext@plt>
   12d7c:	mov	r1, r0
   12d80:	mov	r0, #4
   12d84:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   12d88:	mov	r2, r6
   12d8c:	mov	r1, r5
   12d90:	mov	r3, r0
   12d94:	mov	r0, #0
   12d98:	bl	1121c <error@plt>
   12d9c:	b	1230c <__assert_fail@plt+0xef8>
   12da0:	mov	r5, #1
   12da4:	ldrd	r2, [sp, #32]
   12da8:	str	r5, [sp]
   12dac:	ldr	r0, [sp, #28]
   12db0:	bl	111ec <lseek64@plt>
   12db4:	cmp	r0, #0
   12db8:	sbcs	r3, r1, #0
   12dbc:	bge	11db0 <__assert_fail@plt+0x99c>
   12dc0:	ldrd	r0, [sp, #32]
   12dc4:	add	r2, sp, #136	; 0x88
   12dc8:	bl	18804 <__assert_fail@plt+0x73f0>
   12dcc:	mov	r8, r0
   12dd0:	bl	112dc <__errno_location@plt>
   12dd4:	ldr	r1, [pc, #2692]	; 13860 <__assert_fail@plt+0x244c>
   12dd8:	mov	r2, #5
   12ddc:	ldr	r7, [r0]
   12de0:	mov	r0, r4
   12de4:	bl	11174 <dcgettext@plt>
   12de8:	ldr	r2, [sp, #68]	; 0x44
   12dec:	mov	r1, #3
   12df0:	mov	r6, r0
   12df4:	mov	r0, r4
   12df8:	bl	1b90c <__assert_fail@plt+0xa4f8>
   12dfc:	mov	r1, r7
   12e00:	mov	r2, r6
   12e04:	str	r8, [sp]
   12e08:	mov	r3, r0
   12e0c:	mov	r0, r4
   12e10:	bl	1121c <error@plt>
   12e14:	mov	r0, #1
   12e18:	bl	11294 <exit@plt>
   12e1c:	mov	r2, #5
   12e20:	ldr	r1, [pc, #2620]	; 13864 <__assert_fail@plt+0x2450>
   12e24:	mov	r0, r7
   12e28:	strb	r7, [sl, #1]
   12e2c:	bl	11174 <dcgettext@plt>
   12e30:	mov	r1, r7
   12e34:	mov	r2, r0
   12e38:	mov	r0, r7
   12e3c:	bl	1121c <error@plt>
   12e40:	b	11ec4 <__assert_fail@plt+0xab0>
   12e44:	ldrd	r4, [sp, #32]
   12e48:	mov	r3, #2
   12e4c:	str	r3, [sp]
   12e50:	rsbs	r2, r4, #0
   12e54:	rsc	r3, r5, #0
   12e58:	ldr	r0, [sp, #28]
   12e5c:	bl	111ec <lseek64@plt>
   12e60:	mvn	r3, #0
   12e64:	mvn	r2, #0
   12e68:	cmp	r1, r3
   12e6c:	cmpeq	r0, r2
   12e70:	mov	r8, r0
   12e74:	mov	r9, r1
   12e78:	beq	12708 <__assert_fail@plt+0x12f4>
   12e7c:	adds	r2, r4, r0
   12e80:	adc	r3, r5, r1
   12e84:	mov	r4, r2
   12e88:	mov	r5, r3
   12e8c:	b	123f8 <__assert_fail@plt+0xfe4>
   12e90:	subs	r8, r4, r0
   12e94:	sbc	r9, r5, r1
   12e98:	mov	r4, #0
   12e9c:	mov	r3, r9
   12ea0:	mov	r2, r8
   12ea4:	str	r4, [sp]
   12ea8:	ldr	r0, [sp, #28]
   12eac:	bl	111ec <lseek64@plt>
   12eb0:	cmp	r0, #0
   12eb4:	sbcs	r3, r1, #0
   12eb8:	bge	12450 <__assert_fail@plt+0x103c>
   12ebc:	mov	r1, r9
   12ec0:	add	r2, sp, #136	; 0x88
   12ec4:	mov	r0, r8
   12ec8:	bl	18804 <__assert_fail@plt+0x73f0>
   12ecc:	mov	r7, r0
   12ed0:	bl	112dc <__errno_location@plt>
   12ed4:	mov	r2, #5
   12ed8:	ldr	r1, [pc, #2440]	; 13868 <__assert_fail@plt+0x2454>
   12edc:	ldr	r6, [r0]
   12ee0:	mov	r0, r4
   12ee4:	bl	11174 <dcgettext@plt>
   12ee8:	ldr	r2, [sp, #68]	; 0x44
   12eec:	mov	r1, #3
   12ef0:	mov	r5, r0
   12ef4:	mov	r0, r4
   12ef8:	bl	1b90c <__assert_fail@plt+0xa4f8>
   12efc:	str	r7, [sp]
   12f00:	mov	r1, r6
   12f04:	mov	r2, r5
   12f08:	b	12e08 <__assert_fail@plt+0x19f4>
   12f0c:	bl	112dc <__errno_location@plt>
   12f10:	ldr	r3, [sp, #80]	; 0x50
   12f14:	mov	r2, #5
   12f18:	ldr	r1, [pc, #2364]	; 1385c <__assert_fail@plt+0x2448>
   12f1c:	str	r3, [sp, #48]	; 0x30
   12f20:	ldr	r4, [r0]
   12f24:	mov	r0, #0
   12f28:	bl	11174 <dcgettext@plt>
   12f2c:	ldr	r1, [sp, #68]	; 0x44
   12f30:	mov	r5, r0
   12f34:	mov	r0, #4
   12f38:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   12f3c:	mov	r2, r5
   12f40:	mov	r1, r4
   12f44:	mov	r3, r0
   12f48:	mov	r0, #0
   12f4c:	bl	1121c <error@plt>
   12f50:	b	126e4 <__assert_fail@plt+0x12d0>
   12f54:	mov	r6, #1
   12f58:	mov	r3, #0
   12f5c:	str	r6, [sp]
   12f60:	mov	r2, #0
   12f64:	ldr	r0, [sp, #28]
   12f68:	bl	111ec <lseek64@plt>
   12f6c:	cmp	r0, #0
   12f70:	sbcs	r3, r1, #0
   12f74:	mov	r8, r0
   12f78:	mov	r9, r1
   12f7c:	bge	1242c <__assert_fail@plt+0x1018>
   12f80:	add	r2, sp, #136	; 0x88
   12f84:	mov	r1, #0
   12f88:	mov	r0, #0
   12f8c:	bl	18804 <__assert_fail@plt+0x73f0>
   12f90:	mov	r7, r0
   12f94:	bl	112dc <__errno_location@plt>
   12f98:	mov	r2, #5
   12f9c:	ldr	r1, [pc, #2236]	; 13860 <__assert_fail@plt+0x244c>
   12fa0:	ldr	r5, [r0]
   12fa4:	mov	r0, #0
   12fa8:	bl	11174 <dcgettext@plt>
   12fac:	ldr	r2, [sp, #68]	; 0x44
   12fb0:	mov	r1, #3
   12fb4:	mov	r4, r0
   12fb8:	mov	r0, #0
   12fbc:	bl	1b90c <__assert_fail@plt+0xa4f8>
   12fc0:	str	r7, [sp]
   12fc4:	mov	r1, r5
   12fc8:	mov	r2, r4
   12fcc:	mov	r3, r0
   12fd0:	mov	r0, #0
   12fd4:	bl	1121c <error@plt>
   12fd8:	mov	r0, r6
   12fdc:	bl	11294 <exit@plt>
   12fe0:	bl	112dc <__errno_location@plt>
   12fe4:	ldr	r2, [pc, #2148]	; 13850 <__assert_fail@plt+0x243c>
   12fe8:	ldr	r1, [r0]
   12fec:	mov	r0, #1
   12ff0:	bl	1121c <error@plt>
   12ff4:	ldr	r8, [sp, #28]
   12ff8:	mov	r5, #1
   12ffc:	mov	r2, #0
   13000:	mov	r3, #0
   13004:	str	r5, [sp]
   13008:	mov	r0, r8
   1300c:	bl	111ec <lseek64@plt>
   13010:	mvn	r3, #0
   13014:	mvn	r2, #0
   13018:	cmp	r1, r3
   1301c:	cmpeq	r0, r2
   13020:	mov	r6, r0
   13024:	mov	r7, r1
   13028:	beq	1206c <__assert_fail@plt+0xc58>
   1302c:	mov	r3, #2
   13030:	str	r3, [sp]
   13034:	mov	r2, #0
   13038:	mov	r3, #0
   1303c:	mov	r0, r8
   13040:	bl	111ec <lseek64@plt>
   13044:	cmp	r6, r0
   13048:	sbcs	r3, r7, r1
   1304c:	bge	13084 <__assert_fail@plt+0x1c70>
   13050:	orrs	r3, r0, r1
   13054:	strd	r0, [sp, #112]	; 0x70
   13058:	beq	11e00 <__assert_fail@plt+0x9ec>
   1305c:	add	ip, sp, #112	; 0x70
   13060:	strd	r0, [sp, #8]
   13064:	strd	r6, [sp]
   13068:	ldrd	r2, [sp, #32]
   1306c:	ldr	r0, [sp, #68]	; 0x44
   13070:	str	ip, [sp, #16]
   13074:	ldr	r1, [sp, #28]
   13078:	bl	14ecc <__assert_fail@plt+0x3ab8>
   1307c:	str	r0, [sp, #48]	; 0x30
   13080:	b	11e00 <__assert_fail@plt+0x9ec>
   13084:	mov	r3, r7
   13088:	str	r4, [sp]
   1308c:	mov	r2, r6
   13090:	ldr	r0, [sp, #28]
   13094:	bl	111ec <lseek64@plt>
   13098:	cmp	r0, #0
   1309c:	sbcs	r3, r1, #0
   130a0:	bge	1206c <__assert_fail@plt+0xc58>
   130a4:	mov	r1, r7
   130a8:	add	r2, sp, #240	; 0xf0
   130ac:	mov	r0, r6
   130b0:	bl	18804 <__assert_fail@plt+0x73f0>
   130b4:	mov	r8, r0
   130b8:	bl	112dc <__errno_location@plt>
   130bc:	mov	r2, #5
   130c0:	ldr	r1, [pc, #1952]	; 13868 <__assert_fail@plt+0x2454>
   130c4:	b	12ddc <__assert_fail@plt+0x19c8>
   130c8:	ldr	r3, [sp, #24]
   130cc:	cmp	r3, #1
   130d0:	bne	11cac <__assert_fail@plt+0x898>
   130d4:	b	11ca4 <__assert_fail@plt+0x890>
   130d8:	mov	r2, #5
   130dc:	ldr	r1, [pc, #1928]	; 1386c <__assert_fail@plt+0x2458>
   130e0:	mov	r0, #0
   130e4:	bl	11174 <dcgettext@plt>
   130e8:	b	122f4 <__assert_fail@plt+0xee0>
   130ec:	add	r2, sp, #240	; 0xf0
   130f0:	mov	r1, r4
   130f4:	mov	r0, #3
   130f8:	bl	111c8 <__fxstat64@plt>
   130fc:	cmp	r0, #0
   13100:	bne	13208 <__assert_fail@plt+0x1df4>
   13104:	ldr	ip, [sp, #256]	; 0x100
   13108:	ldr	r3, [r6, #40]	; 0x28
   1310c:	cmp	r3, ip
   13110:	beq	13374 <__assert_fail@plt+0x1f60>
   13114:	ldr	r2, [sp, #320]	; 0x140
   13118:	ldr	r3, [sp, #324]	; 0x144
   1311c:	and	r5, r5, #61440	; 0xf000
   13120:	str	r2, [r6, #16]
   13124:	str	r3, [r6, #20]
   13128:	mov	r2, #0
   1312c:	mov	r3, #0
   13130:	cmp	r5, #32768	; 0x8000
   13134:	str	ip, [r6, #40]	; 0x28
   13138:	strd	r2, [r6, #72]	; 0x48
   1313c:	beq	13424 <__assert_fail@plt+0x2010>
   13140:	ldr	r3, [sp, #40]	; 0x28
   13144:	cmp	r3, r7
   13148:	beq	1318c <__assert_fail@plt+0x1d78>
   1314c:	ldrb	r3, [sl, #3]
   13150:	cmp	r3, #0
   13154:	beq	1318c <__assert_fail@plt+0x1d78>
   13158:	ldr	r3, [pc, #1780]	; 13854 <__assert_fail@plt+0x2440>
   1315c:	ldr	r1, [pc, #1804]	; 13870 <__assert_fail@plt+0x245c>
   13160:	ldr	r2, [pc, #1804]	; 13874 <__assert_fail@plt+0x2460>
   13164:	ldrb	r0, [r3]
   13168:	mov	r3, r8
   1316c:	cmp	r0, #0
   13170:	movne	r2, r1
   13174:	mov	r0, #1
   13178:	ldr	r1, [pc, #1784]	; 13878 <__assert_fail@plt+0x2464>
   1317c:	bl	11300 <__printf_chk@plt>
   13180:	ldr	r2, [pc, #1740]	; 13854 <__assert_fail@plt+0x2440>
   13184:	mov	r3, #0
   13188:	strb	r3, [r2]
   1318c:	ldr	r3, [r6, #56]	; 0x38
   13190:	cmp	r3, #0
   13194:	bne	13640 <__assert_fail@plt+0x222c>
   13198:	cmp	r5, #32768	; 0x8000
   1319c:	beq	131e0 <__assert_fail@plt+0x1dcc>
   131a0:	mvn	r2, #0
   131a4:	mov	r3, r2
   131a8:	str	r7, [sp, #40]	; 0x28
   131ac:	b	12cbc <__assert_fail@plt+0x18a8>
   131b0:	cmp	r0, #0
   131b4:	bge	12ca0 <__assert_fail@plt+0x188c>
   131b8:	ldr	r3, [r6, #40]	; 0x28
   131bc:	and	r3, r3, #61440	; 0xf000
   131c0:	cmp	r3, #32768	; 0x8000
   131c4:	bne	13650 <__assert_fail@plt+0x223c>
   131c8:	bl	112dc <__errno_location@plt>
   131cc:	ldr	r3, [r0]
   131d0:	cmp	r3, #1
   131d4:	bne	13650 <__assert_fail@plt+0x223c>
   131d8:	ldr	fp, [r6, #56]	; 0x38
   131dc:	b	12cac <__assert_fail@plt+0x1898>
   131e0:	ldrb	r3, [r6, #45]	; 0x2d
   131e4:	cmp	r3, #0
   131e8:	beq	131a0 <__assert_fail@plt+0x1d8c>
   131ec:	add	r3, sp, #288	; 0x120
   131f0:	ldrd	r0, [r6, #8]
   131f4:	ldrd	r2, [r3]
   131f8:	str	r7, [sp, #40]	; 0x28
   131fc:	subs	r2, r2, r0
   13200:	sbc	r3, r3, r1
   13204:	b	12cbc <__assert_fail@plt+0x18a8>
   13208:	mvn	r3, #0
   1320c:	str	r3, [r6, #48]	; 0x30
   13210:	bl	112dc <__errno_location@plt>
   13214:	mov	r2, r8
   13218:	mov	r1, #3
   1321c:	ldr	r5, [r0]
   13220:	mov	r0, fp
   13224:	str	r5, [r6, #52]	; 0x34
   13228:	bl	1b90c <__assert_fail@plt+0xa4f8>
   1322c:	mov	r1, r5
   13230:	ldr	r2, [pc, #1604]	; 1387c <__assert_fail@plt+0x2468>
   13234:	mov	r3, r0
   13238:	mov	r0, fp
   1323c:	bl	1121c <error@plt>
   13240:	mov	r0, r4
   13244:	bl	113fc <close@plt>
   13248:	b	12ce8 <__assert_fail@plt+0x18d4>
   1324c:	ldrb	r0, [sl, #1]
   13250:	cmp	r0, #0
   13254:	beq	13268 <__assert_fail@plt+0x1e54>
   13258:	ldr	r3, [pc, #1524]	; 13854 <__assert_fail@plt+0x2440>
   1325c:	ldr	r3, [r3, #4]
   13260:	cmp	r3, #1
   13264:	beq	132e4 <__assert_fail@plt+0x1ed0>
   13268:	ldr	r3, [sp, #72]	; 0x48
   1326c:	ldr	r3, [r3, #48]	; 0x30
   13270:	cmp	r3, #0
   13274:	bge	132e4 <__assert_fail@plt+0x1ed0>
   13278:	ldr	r2, [sp, #72]	; 0x48
   1327c:	ldrb	r3, [r2, #44]	; 0x2c
   13280:	eor	r3, r3, #1
   13284:	tst	r0, r3
   13288:	bne	132e4 <__assert_fail@plt+0x1ed0>
   1328c:	mov	r3, r2
   13290:	ldr	ip, [sp, #52]	; 0x34
   13294:	b	132b8 <__assert_fail@plt+0x1ea4>
   13298:	ldr	r2, [r3, #128]	; 0x80
   1329c:	cmp	r2, #0
   132a0:	bge	132e4 <__assert_fail@plt+0x1ed0>
   132a4:	ldrb	r2, [r3, #124]	; 0x7c
   132a8:	add	r3, r3, #80	; 0x50
   132ac:	eor	r2, r2, #1
   132b0:	tst	r0, r2
   132b4:	bne	132e4 <__assert_fail@plt+0x1ed0>
   132b8:	cmp	ip, r3
   132bc:	bne	13298 <__assert_fail@plt+0x1e84>
   132c0:	mov	r2, #5
   132c4:	ldr	r1, [pc, #1460]	; 13880 <__assert_fail@plt+0x246c>
   132c8:	mov	r0, #0
   132cc:	bl	11174 <dcgettext@plt>
   132d0:	mov	r1, #0
   132d4:	mov	r2, r0
   132d8:	mov	r0, r1
   132dc:	bl	1121c <error@plt>
   132e0:	b	1283c <__assert_fail@plt+0x1428>
   132e4:	ldr	r3, [sp, #24]
   132e8:	ldr	r2, [sp, #32]
   132ec:	eor	r3, r3, #1
   132f0:	orrs	r3, r2, r3
   132f4:	beq	134a8 <__assert_fail@plt+0x2094>
   132f8:	ldr	r3, [pc, #1356]	; 1384c <__assert_fail@plt+0x2438>
   132fc:	ldr	r0, [r3]
   13300:	bl	111a4 <fflush_unlocked@plt>
   13304:	cmp	r0, #0
   13308:	bne	13630 <__assert_fail@plt+0x221c>
   1330c:	ldrb	r3, [sl, #13]
   13310:	cmp	r3, #0
   13314:	bne	134b8 <__assert_fail@plt+0x20a4>
   13318:	ldr	r3, [sp, #24]
   1331c:	cmp	r3, #0
   13320:	bne	12c08 <__assert_fail@plt+0x17f4>
   13324:	ldr	r3, [sp, #44]	; 0x2c
   13328:	cmp	r3, #0
   1332c:	bne	1283c <__assert_fail@plt+0x1428>
   13330:	ldr	r0, [sl, #8]
   13334:	cmp	r0, #0
   13338:	bne	13518 <__assert_fail@plt+0x2104>
   1333c:	vmov.f64	d0, d8
   13340:	bl	1dd60 <__assert_fail@plt+0xc94c>
   13344:	cmp	r0, #0
   13348:	beq	12c08 <__assert_fail@plt+0x17f4>
   1334c:	bl	112dc <__errno_location@plt>
   13350:	ldr	r1, [pc, #1324]	; 13884 <__assert_fail@plt+0x2470>
   13354:	mov	r2, #5
   13358:	ldr	r4, [r0]
   1335c:	mov	r0, #0
   13360:	bl	11174 <dcgettext@plt>
   13364:	mov	r1, r4
   13368:	mov	r2, r0
   1336c:	mov	r0, #1
   13370:	bl	1121c <error@plt>
   13374:	and	r3, ip, #61440	; 0xf000
   13378:	cmp	r3, #32768	; 0x8000
   1337c:	beq	134fc <__assert_fail@plt+0x20e8>
   13380:	ldr	r1, [r6, #16]
   13384:	ldr	r2, [sp, #320]	; 0x140
   13388:	ldr	r3, [sp, #324]	; 0x144
   1338c:	cmp	r2, r1
   13390:	ldr	lr, [r6, #20]
   13394:	movle	r0, #0
   13398:	movgt	r0, #1
   1339c:	cmp	r2, r1
   133a0:	rsbge	r0, r0, #0
   133a4:	rsblt	r0, r0, #1
   133a8:	cmp	r3, lr
   133ac:	movle	r1, #0
   133b0:	movgt	r1, #1
   133b4:	cmp	r3, lr
   133b8:	rsbge	r1, r1, #0
   133bc:	rsblt	r1, r1, #1
   133c0:	add	r1, r1, r0, lsl #1
   133c4:	cmp	r1, #0
   133c8:	bne	1311c <__assert_fail@plt+0x1d08>
   133cc:	ldr	r3, [pc, #1152]	; 13854 <__assert_fail@plt+0x2440>
   133d0:	ldrd	r0, [r6, #72]	; 0x48
   133d4:	ldrd	r2, [r3, #16]
   133d8:	adds	r4, r0, #1
   133dc:	adc	r5, r1, #0
   133e0:	cmp	r1, r3
   133e4:	cmpeq	r0, r2
   133e8:	strd	r4, [r6, #72]	; 0x48
   133ec:	bcc	12ce8 <__assert_fail@plt+0x18d4>
   133f0:	ldr	r3, [pc, #1116]	; 13854 <__assert_fail@plt+0x2440>
   133f4:	ldr	r3, [r3, #4]
   133f8:	cmp	r3, #1
   133fc:	bne	12ce8 <__assert_fail@plt+0x18d4>
   13400:	ldr	r1, [r6, #56]	; 0x38
   13404:	mov	r0, r6
   13408:	adds	r1, r1, #0
   1340c:	movne	r1, #1
   13410:	bl	15434 <__assert_fail@plt+0x4020>
   13414:	mov	r2, #0
   13418:	mov	r3, #0
   1341c:	strd	r2, [r6, #72]	; 0x48
   13420:	b	12ce8 <__assert_fail@plt+0x18d4>
   13424:	add	r3, sp, #288	; 0x120
   13428:	ldrd	r0, [r3]
   1342c:	ldrd	r2, [r6, #8]
   13430:	cmp	r0, r2
   13434:	sbcs	r3, r1, r3
   13438:	bge	13140 <__assert_fail@plt+0x1d2c>
   1343c:	mov	r2, #5
   13440:	ldr	r1, [pc, #1088]	; 13888 <__assert_fail@plt+0x2474>
   13444:	mov	r0, #0
   13448:	bl	11174 <dcgettext@plt>
   1344c:	mov	r2, r8
   13450:	mov	r1, #3
   13454:	mov	fp, r0
   13458:	mov	r0, #0
   1345c:	bl	1b90c <__assert_fail@plt+0xa4f8>
   13460:	mov	r1, #0
   13464:	mov	r2, fp
   13468:	mov	fp, r1
   1346c:	mov	r3, r0
   13470:	mov	r0, r1
   13474:	bl	1121c <error@plt>
   13478:	mov	r3, #0
   1347c:	str	fp, [sp]
   13480:	mov	r2, #0
   13484:	mov	r0, r4
   13488:	bl	111ec <lseek64@plt>
   1348c:	cmp	r0, #0
   13490:	sbcs	r3, r1, #0
   13494:	blt	135d0 <__assert_fail@plt+0x21bc>
   13498:	mov	r2, #0
   1349c:	mov	r3, #0
   134a0:	strd	r2, [r6, #8]
   134a4:	b	13140 <__assert_fail@plt+0x1d2c>
   134a8:	ldrb	r3, [sl, #13]
   134ac:	cmp	r3, #0
   134b0:	str	r3, [sp, #24]
   134b4:	beq	12c08 <__assert_fail@plt+0x17f4>
   134b8:	mov	r3, #1
   134bc:	mov	ip, #8
   134c0:	mov	r1, r3
   134c4:	mov	r2, #0
   134c8:	add	r0, sp, #112	; 0x70
   134cc:	str	r3, [sp, #112]	; 0x70
   134d0:	strh	ip, [sp, #116]	; 0x74
   134d4:	bl	111bc <poll@plt>
   134d8:	cmp	r0, #0
   134dc:	blt	13318 <__assert_fail@plt+0x1f04>
   134e0:	ldrh	r3, [sp, #118]	; 0x76
   134e4:	tst	r3, #8
   134e8:	beq	13318 <__assert_fail@plt+0x1f04>
   134ec:	mov	r0, #13
   134f0:	bl	110c0 <raise@plt>
   134f4:	mov	r0, #1
   134f8:	bl	11294 <exit@plt>
   134fc:	add	r3, sp, #288	; 0x120
   13500:	ldrd	r0, [r6, #8]
   13504:	ldrd	r2, [r3]
   13508:	cmp	r1, r3
   1350c:	cmpeq	r0, r2
   13510:	bne	13114 <__assert_fail@plt+0x1d00>
   13514:	b	13380 <__assert_fail@plt+0x1f6c>
   13518:	mov	r1, r3
   1351c:	bl	1127c <kill@plt>
   13520:	cmp	r0, #0
   13524:	beq	1333c <__assert_fail@plt+0x1f28>
   13528:	bl	112dc <__errno_location@plt>
   1352c:	ldr	r3, [r0]
   13530:	cmp	r3, #1
   13534:	ldrne	r3, [sp, #48]	; 0x30
   13538:	strne	r3, [sp, #44]	; 0x2c
   1353c:	bne	12c08 <__assert_fail@plt+0x17f4>
   13540:	b	1333c <__assert_fail@plt+0x1f28>
   13544:	bl	112dc <__errno_location@plt>
   13548:	mov	r2, #5
   1354c:	ldr	r1, [pc, #776]	; 1385c <__assert_fail@plt+0x2448>
   13550:	ldr	r5, [r0]
   13554:	mov	r0, #0
   13558:	bl	11174 <dcgettext@plt>
   1355c:	ldr	r1, [sp, #68]	; 0x44
   13560:	mov	r6, r0
   13564:	mov	r0, #4
   13568:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   1356c:	mov	r2, r6
   13570:	mov	r1, r5
   13574:	mov	r3, r0
   13578:	mov	r0, #0
   1357c:	bl	1121c <error@plt>
   13580:	mov	r0, r4
   13584:	b	12a48 <__assert_fail@plt+0x1634>
   13588:	ldrb	r3, [sl, #1]
   1358c:	cmp	r3, #0
   13590:	beq	132c0 <__assert_fail@plt+0x1eac>
   13594:	ldr	r3, [pc, #696]	; 13854 <__assert_fail@plt+0x2440>
   13598:	ldr	r3, [r3, #4]
   1359c:	cmp	r3, #1
   135a0:	bne	132c0 <__assert_fail@plt+0x1eac>
   135a4:	str	r9, [sp, #24]
   135a8:	b	132f8 <__assert_fail@plt+0x1ee4>
   135ac:	mov	r2, #5
   135b0:	ldr	r1, [pc, #724]	; 1388c <__assert_fail@plt+0x2478>
   135b4:	mov	r0, #0
   135b8:	bl	11174 <dcgettext@plt>
   135bc:	mov	r1, #0
   135c0:	mov	r2, r0
   135c4:	mov	r0, r1
   135c8:	bl	1121c <error@plt>
   135cc:	b	11c10 <__assert_fail@plt+0x7fc>
   135d0:	add	r2, sp, #112	; 0x70
   135d4:	mov	r1, #0
   135d8:	mov	r0, #0
   135dc:	bl	18804 <__assert_fail@plt+0x73f0>
   135e0:	mov	r6, r0
   135e4:	bl	112dc <__errno_location@plt>
   135e8:	mov	r2, #5
   135ec:	ldr	r1, [pc, #628]	; 13868 <__assert_fail@plt+0x2454>
   135f0:	ldr	r5, [r0]
   135f4:	mov	r0, fp
   135f8:	bl	11174 <dcgettext@plt>
   135fc:	mov	r2, r8
   13600:	mov	r1, #3
   13604:	mov	r4, r0
   13608:	mov	r0, fp
   1360c:	bl	1b90c <__assert_fail@plt+0xa4f8>
   13610:	str	r6, [sp]
   13614:	mov	r1, r5
   13618:	mov	r2, r4
   1361c:	mov	r3, r0
   13620:	mov	r0, fp
   13624:	bl	1121c <error@plt>
   13628:	mov	r0, #1
   1362c:	bl	11294 <exit@plt>
   13630:	bl	112dc <__errno_location@plt>
   13634:	mov	r2, #5
   13638:	ldr	r1, [pc, #592]	; 13890 <__assert_fail@plt+0x247c>
   1363c:	b	13358 <__assert_fail@plt+0x1f44>
   13640:	mvn	r2, #1
   13644:	mvn	r3, #0
   13648:	str	r7, [sp, #40]	; 0x28
   1364c:	b	12cbc <__assert_fail@plt+0x18a8>
   13650:	bl	112dc <__errno_location@plt>
   13654:	mov	r2, #5
   13658:	ldr	r1, [pc, #564]	; 13894 <__assert_fail@plt+0x2480>
   1365c:	ldr	r4, [r0]
   13660:	mov	r0, #0
   13664:	bl	11174 <dcgettext@plt>
   13668:	mov	r2, r8
   1366c:	mov	r1, #3
   13670:	mov	r5, r0
   13674:	mov	r0, #0
   13678:	bl	1b90c <__assert_fail@plt+0xa4f8>
   1367c:	mov	r2, r5
   13680:	mov	r1, r4
   13684:	mov	r3, r0
   13688:	mov	r0, #1
   1368c:	bl	1121c <error@plt>
   13690:	ldr	r1, [sp, #72]	; 0x48
   13694:	ldr	r3, [r1, #48]	; 0x30
   13698:	cmn	r3, #1
   1369c:	moveq	r9, r2
   136a0:	beq	12bdc <__assert_fail@plt+0x17c8>
   136a4:	ldr	r3, [r1, #40]	; 0x28
   136a8:	and	r3, r3, #61440	; 0xf000
   136ac:	subs	r9, r3, #32768	; 0x8000
   136b0:	movne	r9, #1
   136b4:	b	12bdc <__assert_fail@plt+0x17c8>
   136b8:	mov	r2, #5
   136bc:	ldr	r1, [pc, #468]	; 13898 <__assert_fail@plt+0x2484>
   136c0:	mov	r0, #0
   136c4:	bl	11174 <dcgettext@plt>
   136c8:	ldr	r1, [pc, #384]	; 13850 <__assert_fail@plt+0x243c>
   136cc:	mov	r5, r0
   136d0:	mov	r0, #4
   136d4:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   136d8:	mov	r2, r5
   136dc:	mov	r1, #0
   136e0:	mov	r3, r0
   136e4:	mov	r0, r4
   136e8:	bl	1121c <error@plt>
   136ec:	bl	11420 <__assert_fail@plt+0xc>
   136f0:	add	r2, sp, #240	; 0xf0
   136f4:	mov	r0, #3
   136f8:	bl	111c8 <__fxstat64@plt>
   136fc:	cmp	r0, #0
   13700:	bne	11c00 <__assert_fail@plt+0x7ec>
   13704:	ldr	r3, [sp, #256]	; 0x100
   13708:	and	r3, r3, #61440	; 0xf000
   1370c:	cmp	r3, #32768	; 0x8000
   13710:	bne	11c10 <__assert_fail@plt+0x7fc>
   13714:	b	11c00 <__assert_fail@plt+0x7ec>
   13718:	str	r2, [sp, #64]	; 0x40
   1371c:	mov	r4, r2
   13720:	mov	r6, #80	; 0x50
   13724:	mov	r5, #3
   13728:	b	13760 <__assert_fail@plt+0x234c>
   1372c:	mul	r3, r6, r4
   13730:	ldr	r1, [sp, #72]	; 0x48
   13734:	add	r2, sp, #240	; 0xf0
   13738:	mov	r0, r5
   1373c:	ldr	r1, [r1, r3]
   13740:	bl	11408 <__lxstat64@plt>
   13744:	cmp	r0, #0
   13748:	bne	1375c <__assert_fail@plt+0x2348>
   1374c:	ldr	r3, [sp, #256]	; 0x100
   13750:	and	r3, r3, #61440	; 0xf000
   13754:	cmp	r3, #40960	; 0xa000
   13758:	beq	12ba8 <__assert_fail@plt+0x1794>
   1375c:	add	r4, r4, #1
   13760:	ldr	r3, [sp, #44]	; 0x2c
   13764:	cmp	r3, r4
   13768:	bne	1372c <__assert_fail@plt+0x2318>
   1376c:	ldr	r3, [sp, #72]	; 0x48
   13770:	b	13798 <__assert_fail@plt+0x2384>
   13774:	ldr	r2, [r3, #48]	; 0x30
   13778:	cmp	r2, #0
   1377c:	blt	13794 <__assert_fail@plt+0x2380>
   13780:	ldr	r2, [r3, #40]	; 0x28
   13784:	and	r2, r2, #61440	; 0xf000
   13788:	cmp	r2, #32768	; 0x8000
   1378c:	cmpne	r2, #4096	; 0x1000
   13790:	bne	12ba8 <__assert_fail@plt+0x1794>
   13794:	add	r3, r3, #80	; 0x50
   13798:	ldr	r2, [sp, #28]
   1379c:	cmp	r2, r3
   137a0:	bne	13774 <__assert_fail@plt+0x2360>
   137a4:	ldr	r3, [sp, #60]	; 0x3c
   137a8:	cmp	r3, #0
   137ac:	bne	137c0 <__assert_fail@plt+0x23ac>
   137b0:	ldr	r3, [pc, #156]	; 13854 <__assert_fail@plt+0x2440>
   137b4:	ldr	r3, [r3, #4]
   137b8:	cmp	r3, #2
   137bc:	beq	12ba8 <__assert_fail@plt+0x1794>
   137c0:	bl	112ac <inotify_init@plt>
   137c4:	subs	r9, r0, #0
   137c8:	sublt	r8, r8, #80	; 0x50
   137cc:	blt	13a4c <__assert_fail@plt+0x2638>
   137d0:	ldr	r3, [pc, #116]	; 1384c <__assert_fail@plt+0x2438>
   137d4:	ldr	r0, [r3]
   137d8:	bl	111a4 <fflush_unlocked@plt>
   137dc:	subs	r3, r0, #0
   137e0:	str	r3, [sp, #56]	; 0x38
   137e4:	bne	13630 <__assert_fail@plt+0x221c>
   137e8:	ldr	r1, [sp, #56]	; 0x38
   137ec:	ldr	r3, [pc, #168]	; 1389c <__assert_fail@plt+0x2488>
   137f0:	str	r1, [sp]
   137f4:	ldr	r2, [pc, #164]	; 138a0 <__assert_fail@plt+0x248c>
   137f8:	ldr	r0, [sp, #44]	; 0x2c
   137fc:	bl	176f8 <__assert_fail@plt+0x62e4>
   13800:	subs	r3, r0, #0
   13804:	str	r3, [sp, #24]
   13808:	beq	14078 <__assert_fail@plt+0x2c64>
   1380c:	ldr	r3, [pc, #64]	; 13854 <__assert_fail@plt+0x2440>
   13810:	ldr	r1, [sp, #64]	; 0x40
   13814:	mov	r2, r3
   13818:	str	r3, [sp, #40]	; 0x28
   1381c:	ldr	r2, [r2, #4]
   13820:	ldr	r3, [pc, #124]	; 138a4 <__assert_fail@plt+0x2490>
   13824:	cmp	r2, #1
   13828:	movne	r3, #2
   1382c:	ldr	r4, [sp, #72]	; 0x48
   13830:	str	r1, [sp, #32]
   13834:	str	r3, [sp, #84]	; 0x54
   13838:	str	r1, [sp, #68]	; 0x44
   1383c:	ldr	r7, [sp, #56]	; 0x38
   13840:	str	r8, [sp, #52]	; 0x34
   13844:	b	138dc <__assert_fail@plt+0x24c8>
   13848:	andeq	r0, r2, ip, lsr #22
   1384c:	andeq	r2, r3, r4, asr #3
   13850:			; <UNDEFINED> instruction: 0x0001fab4
   13854:	andeq	r2, r3, r8, asr #2
   13858:			; <UNDEFINED> instruction: 0x0001fab8
   1385c:	andeq	pc, r1, r4, lsr #22
   13860:	andeq	r0, r2, ip, lsr fp
   13864:	andeq	r0, r2, r8, asr #19
   13868:	andeq	pc, r1, r8, asr #22
   1386c:	andeq	pc, r1, ip, lsl #24
   13870:			; <UNDEFINED> instruction: 0x000205b4
   13874:	andeq	pc, r1, r4, asr #22
   13878:	andeq	pc, r1, r8, lsr fp	; <UNPREDICTABLE>
   1387c:	muleq	r2, r4, r8
   13880:	strdeq	r0, [r2], -r4
   13884:	ldrdeq	r0, [r2], -r4
   13888:	andeq	pc, r1, ip, ror #25
   1388c:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   13890:	andeq	pc, r1, r0, lsl #26
   13894:			; <UNDEFINED> instruction: 0x00020cb0
   13898:			; <UNDEFINED> instruction: 0x00020ab4
   1389c:	strdeq	r4, [r1], -ip
   138a0:	andeq	r4, r1, r8, ror #5
   138a4:	andeq	r0, r0, r6, lsl #24
   138a8:	andeq	r0, r0, r4, lsl #15
   138ac:	andeq	r0, r2, ip, asr r8
   138b0:	ldrdeq	r0, [r2], -r4
   138b4:			; <UNDEFINED> instruction: 0x00020bb8
   138b8:	andeq	r0, r2, r0, lsl #25
   138bc:	mov	r1, r4
   138c0:	ldr	r0, [sp, #24]
   138c4:	bl	18060 <__assert_fail@plt+0x6c4c>
   138c8:	cmp	r0, #0
   138cc:	beq	14078 <__assert_fail@plt+0x2c64>
   138d0:	ldr	r3, [sp, #48]	; 0x30
   138d4:	str	r3, [sp, #68]	; 0x44
   138d8:	add	r4, r4, #80	; 0x50
   138dc:	ldr	r3, [sp, #28]
   138e0:	cmp	r3, r4
   138e4:	beq	13a78 <__assert_fail@plt+0x2664>
   138e8:	ldrb	r8, [r4, #44]	; 0x2c
   138ec:	cmp	r8, #0
   138f0:	bne	138d8 <__assert_fail@plt+0x24c4>
   138f4:	ldr	r6, [r4]
   138f8:	mov	r0, r6
   138fc:	bl	112a0 <strlen@plt>
   13900:	ldr	r3, [sp, #40]	; 0x28
   13904:	mvn	r2, #0
   13908:	str	r2, [r4, #60]	; 0x3c
   1390c:	ldr	r3, [r3, #4]
   13910:	cmp	r7, r0
   13914:	movcc	r7, r0
   13918:	cmp	r3, #1
   1391c:	bne	1397c <__assert_fail@plt+0x2568>
   13920:	mov	r0, r6
   13924:	bl	16bb0 <__assert_fail@plt+0x579c>
   13928:	mov	r5, r0
   1392c:	mov	r0, r6
   13930:	bl	16984 <__assert_fail@plt+0x5570>
   13934:	ldrb	r3, [r6, r5]
   13938:	cmp	r5, #0
   1393c:	ldr	r2, [pc, #-156]	; 138a8 <__assert_fail@plt+0x2494>
   13940:	ldreq	r1, [pc, #-156]	; 138ac <__assert_fail@plt+0x2498>
   13944:	str	r3, [sp, #76]	; 0x4c
   13948:	sub	r0, r0, r6
   1394c:	str	r0, [r4, #68]	; 0x44
   13950:	strb	r8, [r6, r5]
   13954:	mov	r0, r9
   13958:	ldrne	r1, [r4]
   1395c:	bl	112d0 <inotify_add_watch@plt>
   13960:	ldr	r2, [r4]
   13964:	ldr	r3, [sp, #76]	; 0x4c
   13968:	str	r0, [r4, #64]	; 0x40
   1396c:	strb	r3, [r2, r5]
   13970:	ldr	r3, [r4, #64]	; 0x40
   13974:	cmp	r3, #0
   13978:	blt	14170 <__assert_fail@plt+0x2d5c>
   1397c:	ldr	r2, [sp, #84]	; 0x54
   13980:	ldr	r1, [r4]
   13984:	mov	r0, r9
   13988:	bl	112d0 <inotify_add_watch@plt>
   1398c:	cmp	r0, #0
   13990:	str	r0, [r4, #60]	; 0x3c
   13994:	bge	138bc <__assert_fail@plt+0x24a8>
   13998:	ldr	r3, [r4, #48]	; 0x30
   1399c:	ldr	r1, [sp, #48]	; 0x30
   139a0:	cmn	r3, #1
   139a4:	ldr	r2, [sp, #32]
   139a8:	movne	r2, r1
   139ac:	str	r2, [sp, #32]
   139b0:	bl	112dc <__errno_location@plt>
   139b4:	ldr	r5, [r0]
   139b8:	bic	r3, r5, #16
   139bc:	cmp	r3, #12
   139c0:	beq	13a08 <__assert_fail@plt+0x25f4>
   139c4:	ldr	r3, [r4, #52]	; 0x34
   139c8:	cmp	r5, r3
   139cc:	beq	138d8 <__assert_fail@plt+0x24c4>
   139d0:	mov	r2, #5
   139d4:	ldr	r1, [pc, #-300]	; 138b0 <__assert_fail@plt+0x249c>
   139d8:	mov	r0, #0
   139dc:	bl	11174 <dcgettext@plt>
   139e0:	ldr	r1, [r4]
   139e4:	mov	r6, r0
   139e8:	mov	r0, #4
   139ec:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   139f0:	mov	r2, r6
   139f4:	mov	r1, r5
   139f8:	mov	r3, r0
   139fc:	mov	r0, #0
   13a00:	bl	1121c <error@plt>
   13a04:	b	138d8 <__assert_fail@plt+0x24c4>
   13a08:	ldr	r8, [sp, #52]	; 0x34
   13a0c:	mov	r2, #5
   13a10:	ldr	r1, [pc, #-356]	; 138b4 <__assert_fail@plt+0x24a0>
   13a14:	mov	r0, #0
   13a18:	bl	11174 <dcgettext@plt>
   13a1c:	mov	r1, #0
   13a20:	sub	r8, r8, #80	; 0x50
   13a24:	mov	r2, r0
   13a28:	mov	r0, r1
   13a2c:	bl	1121c <error@plt>
   13a30:	ldr	r0, [sp, #24]
   13a34:	bl	179e8 <__assert_fail@plt+0x65d4>
   13a38:	mov	r0, r9
   13a3c:	bl	113fc <close@plt>
   13a40:	bl	112dc <__errno_location@plt>
   13a44:	mov	r3, #0
   13a48:	str	r3, [r0]
   13a4c:	bl	112dc <__errno_location@plt>
   13a50:	mov	r2, #5
   13a54:	ldr	r1, [pc, #-420]	; 138b8 <__assert_fail@plt+0x24a4>
   13a58:	ldr	r4, [r0]
   13a5c:	mov	r0, #0
   13a60:	bl	11174 <dcgettext@plt>
   13a64:	mov	r1, r4
   13a68:	mov	r2, r0
   13a6c:	mov	r0, #0
   13a70:	bl	1121c <error@plt>
   13a74:	b	12bac <__assert_fail@plt+0x1798>
   13a78:	ldr	r3, [sp, #40]	; 0x28
   13a7c:	ldr	r8, [sp, #52]	; 0x34
   13a80:	ldr	r3, [r3, #4]
   13a84:	cmp	r3, #2
   13a88:	beq	140c4 <__assert_fail@plt+0x2cb0>
   13a8c:	ldr	r4, [sp, #72]	; 0x48
   13a90:	sub	r8, r8, #80	; 0x50
   13a94:	add	r5, sp, #344	; 0x158
   13a98:	add	r3, r4, r8
   13a9c:	str	r3, [r5, #-244]!	; 0xffffff0c
   13aa0:	mov	r6, #3
   13aa4:	b	13b08 <__assert_fail@plt+0x26f4>
   13aa8:	ldr	r3, [r4, #48]	; 0x30
   13aac:	cmn	r3, #1
   13ab0:	beq	13af8 <__assert_fail@plt+0x26e4>
   13ab4:	add	r2, sp, #240	; 0xf0
   13ab8:	ldr	r1, [r4]
   13abc:	mov	r0, r6
   13ac0:	bl	113c0 <__xstat64@plt>
   13ac4:	cmp	r0, #0
   13ac8:	bne	13af8 <__assert_fail@plt+0x26e4>
   13acc:	ldrd	r0, [r4, #24]
   13ad0:	ldrd	r2, [sp, #240]	; 0xf0
   13ad4:	cmp	r1, r3
   13ad8:	cmpeq	r0, r2
   13adc:	bne	1407c <__assert_fail@plt+0x2c68>
   13ae0:	add	r3, sp, #336	; 0x150
   13ae4:	ldrd	r0, [r4, #32]
   13ae8:	ldrd	r2, [r3]
   13aec:	cmp	r1, r3
   13af0:	cmpeq	r0, r2
   13af4:	bne	1407c <__assert_fail@plt+0x2c68>
   13af8:	mov	r1, r5
   13afc:	mov	r0, r4
   13b00:	bl	15d08 <__assert_fail@plt+0x48f4>
   13b04:	add	r4, r4, #80	; 0x50
   13b08:	ldr	r3, [sp, #28]
   13b0c:	cmp	r3, r4
   13b10:	beq	13b3c <__assert_fail@plt+0x2728>
   13b14:	ldrb	r1, [r4, #44]	; 0x2c
   13b18:	cmp	r1, #0
   13b1c:	bne	13b04 <__assert_fail@plt+0x26f0>
   13b20:	ldr	r3, [sp, #40]	; 0x28
   13b24:	ldr	r3, [r3, #4]
   13b28:	cmp	r3, #1
   13b2c:	bne	13aa8 <__assert_fail@plt+0x2694>
   13b30:	mov	r0, r4
   13b34:	bl	15434 <__assert_fail@plt+0x4020>
   13b38:	b	13af8 <__assert_fail@plt+0x26e4>
   13b3c:	add	r3, r7, #17
   13b40:	str	r3, [sp, #76]	; 0x4c
   13b44:	mov	r0, r3
   13b48:	mov	r3, #0
   13b4c:	mov	r4, r3
   13b50:	str	r3, [sp, #80]	; 0x50
   13b54:	bl	1d460 <__assert_fail@plt+0xc04c>
   13b58:	vldr	d9, [pc, #880]	; 13ed0 <__assert_fail@plt+0x2abc>
   13b5c:	vldr	d11, [pc, #884]	; 13ed8 <__assert_fail@plt+0x2ac4>
   13b60:	vldr	d10, [pc, #888]	; 13ee0 <__assert_fail@plt+0x2acc>
   13b64:	mov	r3, #3
   13b68:	str	r4, [sp, #32]
   13b6c:	str	r3, [sp, #68]	; 0x44
   13b70:	str	r8, [sp, #88]	; 0x58
   13b74:	str	r0, [sp, #52]	; 0x34
   13b78:	ldr	r3, [sp, #40]	; 0x28
   13b7c:	ldr	r4, [r3, #4]
   13b80:	cmp	r4, #1
   13b84:	beq	13e60 <__assert_fail@plt+0x2a4c>
   13b88:	ldr	r3, [sp, #32]
   13b8c:	ldr	r2, [sp, #80]	; 0x50
   13b90:	cmp	r3, r2
   13b94:	bcc	13c60 <__assert_fail@plt+0x284c>
   13b98:	mov	r5, #1
   13b9c:	ldr	r7, [sp, #56]	; 0x38
   13ba0:	ldr	r6, [sp, #64]	; 0x40
   13ba4:	b	13c08 <__assert_fail@plt+0x27f4>
   13ba8:	cmp	r6, #0
   13bac:	bne	1411c <__assert_fail@plt+0x2d08>
   13bb0:	mov	r1, r6
   13bb4:	bl	1127c <kill@plt>
   13bb8:	cmp	r0, #0
   13bbc:	beq	13c1c <__assert_fail@plt+0x2808>
   13bc0:	bl	112dc <__errno_location@plt>
   13bc4:	ldr	r3, [r0]
   13bc8:	cmp	r3, #1
   13bcc:	movne	r2, r7
   13bd0:	ldrne	r6, [sp, #48]	; 0x30
   13bd4:	beq	13c1c <__assert_fail@plt+0x2808>
   13bd8:	ldrb	r1, [sl, #13]
   13bdc:	mov	r4, #0
   13be0:	mov	r3, #16
   13be4:	add	r1, r1, #1
   13be8:	add	r0, sp, #240	; 0xf0
   13bec:	str	r9, [sp, #240]	; 0xf0
   13bf0:	strh	r5, [sp, #244]	; 0xf4
   13bf4:	str	r5, [sp, #248]	; 0xf8
   13bf8:	str	r4, [sp, #252]	; 0xfc
   13bfc:	bl	111d4 <__poll_chk@plt>
   13c00:	cmp	r0, r4
   13c04:	bne	13dbc <__assert_fail@plt+0x29a8>
   13c08:	ldr	r0, [sl, #8]
   13c0c:	cmp	r0, #0
   13c10:	bne	13ba8 <__assert_fail@plt+0x2794>
   13c14:	mov	r2, fp
   13c18:	b	13bd8 <__assert_fail@plt+0x27c4>
   13c1c:	vcmpe.f64	d8, d9
   13c20:	vmrs	APSR_nzcv, fpscr
   13c24:	movls	r2, r7
   13c28:	bls	13bd8 <__assert_fail@plt+0x27c4>
   13c2c:	vcmpe.f64	d8, d11
   13c30:	vmrs	APSR_nzcv, fpscr
   13c34:	bpl	13c14 <__assert_fail@plt+0x2800>
   13c38:	vmul.f64	d6, d8, d10
   13c3c:	vcvt.s32.f64	s15, d6
   13c40:	vcvt.f64.s32	d5, s15
   13c44:	vmov	r3, s15
   13c48:	vcmpe.f64	d6, d5
   13c4c:	vmrs	APSR_nzcv, fpscr
   13c50:	movgt	r2, #1
   13c54:	movle	r2, #0
   13c58:	add	r2, r3, r2
   13c5c:	b	13bd8 <__assert_fail@plt+0x27c4>
   13c60:	ldr	r3, [sp, #32]
   13c64:	ldr	r2, [sp, #52]	; 0x34
   13c68:	add	r5, r2, r3
   13c6c:	add	r2, r3, #16
   13c70:	ldr	r7, [r5, #4]
   13c74:	ldr	r3, [r5, #12]
   13c78:	ands	r4, r7, #1024	; 0x400
   13c7c:	add	r2, r3, r2
   13c80:	str	r2, [sp, #32]
   13c84:	beq	13d1c <__assert_fail@plt+0x2908>
   13c88:	cmp	r3, #0
   13c8c:	movne	r4, #0
   13c90:	ldrne	r6, [sp, #72]	; 0x48
   13c94:	bne	13d2c <__assert_fail@plt+0x2918>
   13c98:	ldr	r2, [r5]
   13c9c:	ldr	r3, [sp, #72]	; 0x48
   13ca0:	b	13cb4 <__assert_fail@plt+0x28a0>
   13ca4:	add	r3, r3, #80	; 0x50
   13ca8:	ldr	r1, [r3, #-16]
   13cac:	cmp	r2, r1
   13cb0:	beq	13ea8 <__assert_fail@plt+0x2a94>
   13cb4:	ldr	r1, [sp, #28]
   13cb8:	cmp	r1, r3
   13cbc:	bne	13ca4 <__assert_fail@plt+0x2890>
   13cc0:	add	r1, sp, #240	; 0xf0
   13cc4:	ldr	r0, [sp, #24]
   13cc8:	str	r2, [sp, #300]	; 0x12c
   13ccc:	bl	17418 <__assert_fail@plt+0x6004>
   13cd0:	mov	r4, r0
   13cd4:	cmp	r4, #0
   13cd8:	beq	13b78 <__assert_fail@plt+0x2764>
   13cdc:	ldr	r3, [r5, #4]
   13ce0:	ldr	r2, [pc, #512]	; 13ee8 <__assert_fail@plt+0x2ad4>
   13ce4:	tst	r3, r2
   13ce8:	beq	13e98 <__assert_fail@plt+0x2a84>
   13cec:	tst	r3, #1024	; 0x400
   13cf0:	beq	13d0c <__assert_fail@plt+0x28f8>
   13cf4:	ldr	r1, [r4, #60]	; 0x3c
   13cf8:	mov	r0, r9
   13cfc:	bl	113d8 <inotify_rm_watch@plt>
   13d00:	mov	r1, r4
   13d04:	ldr	r0, [sp, #24]
   13d08:	bl	18324 <__assert_fail@plt+0x6f10>
   13d0c:	mov	r0, r4
   13d10:	mov	r1, #0
   13d14:	bl	15434 <__assert_fail@plt+0x4020>
   13d18:	b	13b78 <__assert_fail@plt+0x2764>
   13d1c:	cmp	r3, #0
   13d20:	ldreq	r2, [r5]
   13d24:	beq	13cc0 <__assert_fail@plt+0x28ac>
   13d28:	ldr	r6, [sp, #72]	; 0x48
   13d2c:	add	r8, r5, #16
   13d30:	str	r7, [sp, #92]	; 0x5c
   13d34:	mov	r7, r5
   13d38:	ldr	r5, [sp, #44]	; 0x2c
   13d3c:	b	13d48 <__assert_fail@plt+0x2934>
   13d40:	add	r4, r4, #1
   13d44:	add	r6, r6, #80	; 0x50
   13d48:	cmp	r5, r4
   13d4c:	beq	13b78 <__assert_fail@plt+0x2764>
   13d50:	ldr	r1, [r6, #64]	; 0x40
   13d54:	ldr	r3, [r7]
   13d58:	cmp	r1, r3
   13d5c:	bne	13d40 <__assert_fail@plt+0x292c>
   13d60:	ldr	r3, [r6, #68]	; 0x44
   13d64:	ldr	r1, [r6]
   13d68:	mov	r0, r8
   13d6c:	add	r1, r1, r3
   13d70:	bl	110cc <strcmp@plt>
   13d74:	cmp	r0, #0
   13d78:	bne	13d40 <__assert_fail@plt+0x292c>
   13d7c:	mov	r3, #80	; 0x50
   13d80:	mov	r5, r7
   13d84:	mul	r3, r3, r4
   13d88:	ldr	r7, [sp, #92]	; 0x5c
   13d8c:	ldr	r2, [sp, #72]	; 0x48
   13d90:	ands	r7, r7, #512	; 0x200
   13d94:	add	r4, r2, r3
   13d98:	beq	13f1c <__assert_fail@plt+0x2b08>
   13d9c:	ldr	r3, [sp, #40]	; 0x28
   13da0:	ldr	r3, [r3, #4]
   13da4:	cmp	r3, #1
   13da8:	bne	13cd4 <__assert_fail@plt+0x28c0>
   13dac:	mov	r1, #0
   13db0:	mov	r0, r4
   13db4:	bl	15434 <__assert_fail@plt+0x4020>
   13db8:	b	13cd4 <__assert_fail@plt+0x28c0>
   13dbc:	str	r6, [sp, #64]	; 0x40
   13dc0:	blt	140f4 <__assert_fail@plt+0x2ce0>
   13dc4:	ldrsh	r4, [sp, #254]	; 0xfe
   13dc8:	cmp	r4, #0
   13dcc:	bne	134ec <__assert_fail@plt+0x20d8>
   13dd0:	ldr	r2, [sp, #76]	; 0x4c
   13dd4:	ldr	r1, [sp, #52]	; 0x34
   13dd8:	mov	r0, r9
   13ddc:	bl	1c980 <__assert_fail@plt+0xb56c>
   13de0:	subs	r3, r0, #0
   13de4:	str	r3, [sp, #80]	; 0x50
   13de8:	beq	13e18 <__assert_fail@plt+0x2a04>
   13dec:	cmn	r3, #1
   13df0:	strne	r4, [sp, #32]
   13df4:	bne	13c60 <__assert_fail@plt+0x284c>
   13df8:	bl	112dc <__errno_location@plt>
   13dfc:	ldr	r3, [r0]
   13e00:	cmp	r3, #22
   13e04:	beq	13e18 <__assert_fail@plt+0x2a04>
   13e08:	bl	112dc <__errno_location@plt>
   13e0c:	mov	r2, #5
   13e10:	ldr	r1, [pc, #212]	; 13eec <__assert_fail@plt+0x2ad8>
   13e14:	b	13358 <__assert_fail@plt+0x1f44>
   13e18:	ldr	r3, [sp, #68]	; 0x44
   13e1c:	cmp	r3, #0
   13e20:	beq	13e08 <__assert_fail@plt+0x29f4>
   13e24:	ldr	r3, [sp, #76]	; 0x4c
   13e28:	ldr	r0, [sp, #52]	; 0x34
   13e2c:	lsl	r3, r3, #1
   13e30:	str	r3, [sp, #76]	; 0x4c
   13e34:	mov	r1, r3
   13e38:	mov	r3, #0
   13e3c:	mov	r4, r3
   13e40:	str	r3, [sp, #80]	; 0x50
   13e44:	ldr	r3, [sp, #68]	; 0x44
   13e48:	sub	r3, r3, #1
   13e4c:	str	r3, [sp, #68]	; 0x44
   13e50:	bl	1d49c <__assert_fail@plt+0xc088>
   13e54:	str	r4, [sp, #32]
   13e58:	str	r0, [sp, #52]	; 0x34
   13e5c:	b	13b78 <__assert_fail@plt+0x2764>
   13e60:	ldrb	r3, [sl, #1]
   13e64:	cmp	r3, #0
   13e68:	bne	13b88 <__assert_fail@plt+0x2774>
   13e6c:	ldr	r0, [sp, #24]
   13e70:	bl	17250 <__assert_fail@plt+0x5e3c>
   13e74:	subs	r5, r0, #0
   13e78:	bne	13b88 <__assert_fail@plt+0x2774>
   13e7c:	mov	r2, #5
   13e80:	ldr	r1, [pc, #104]	; 13ef0 <__assert_fail@plt+0x2adc>
   13e84:	bl	11174 <dcgettext@plt>
   13e88:	mov	r1, r5
   13e8c:	mov	r2, r0
   13e90:	mov	r0, r4
   13e94:	bl	1121c <error@plt>
   13e98:	mov	r0, r4
   13e9c:	add	r1, sp, #100	; 0x64
   13ea0:	bl	15d08 <__assert_fail@plt+0x48f4>
   13ea4:	b	13b78 <__assert_fail@plt+0x2764>
   13ea8:	ldr	r8, [sp, #88]	; 0x58
   13eac:	ldr	r1, [pc, #64]	; 13ef4 <__assert_fail@plt+0x2ae0>
   13eb0:	mov	r2, #5
   13eb4:	mov	r0, #0
   13eb8:	bl	11174 <dcgettext@plt>
   13ebc:	mov	r1, #0
   13ec0:	mov	r2, r0
   13ec4:	mov	r0, r1
   13ec8:	bl	1121c <error@plt>
   13ecc:	b	13a30 <__assert_fail@plt+0x261c>
	...
   13edc:	cmpmi	r0, sp, asr #4
   13ee0:	andeq	r0, r0, r0
   13ee4:	addmi	r4, pc, r0
   13ee8:	andeq	r0, r0, r4, lsl #28
   13eec:	andeq	r0, r2, r4, lsr ip
   13ef0:	strdeq	r0, [r2], -r4
   13ef4:	andeq	r0, r2, r0, asr ip
   13ef8:	ldrdeq	r0, [r2], -r4
   13efc:	andeq	pc, r1, ip, asr ip	; <UNPREDICTABLE>
   13f00:	andeq	r0, r2, r4, ror #23
   13f04:			; <UNDEFINED> instruction: 0x00020bb8
   13f08:	andeq	r0, r2, r8, lsl #24
   13f0c:	andeq	r0, r2, r0, lsl #17
   13f10:	muleq	r2, r0, r8
   13f14:	ldrdeq	pc, [r1], -ip
   13f18:	muleq	r2, r4, fp
   13f1c:	ldr	r2, [sp, #72]	; 0x48
   13f20:	mov	r0, r9
   13f24:	ldr	r1, [r2, r3]
   13f28:	ldr	r2, [sp, #84]	; 0x54
   13f2c:	bl	112d0 <inotify_add_watch@plt>
   13f30:	subs	r6, r0, #0
   13f34:	bge	13f80 <__assert_fail@plt+0x2b6c>
   13f38:	bl	112dc <__errno_location@plt>
   13f3c:	ldr	r8, [r0]
   13f40:	bic	r3, r8, #16
   13f44:	cmp	r3, #12
   13f48:	beq	140e4 <__assert_fail@plt+0x2cd0>
   13f4c:	mov	r2, #5
   13f50:	ldr	r1, [pc, #-96]	; 13ef8 <__assert_fail@plt+0x2ae4>
   13f54:	mov	r0, r7
   13f58:	bl	11174 <dcgettext@plt>
   13f5c:	ldr	r1, [r4]
   13f60:	str	r0, [sp, #92]	; 0x5c
   13f64:	mov	r0, #4
   13f68:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   13f6c:	ldr	r2, [sp, #92]	; 0x5c
   13f70:	mov	r1, r8
   13f74:	mov	r3, r0
   13f78:	mov	r0, r7
   13f7c:	bl	1121c <error@plt>
   13f80:	ldr	r1, [r4, #60]	; 0x3c
   13f84:	subs	r3, r6, r1
   13f88:	movne	r3, #1
   13f8c:	orrs	r3, r3, r1, lsr #31
   13f90:	beq	13d9c <__assert_fail@plt+0x2988>
   13f94:	cmp	r1, #0
   13f98:	blt	13fb0 <__assert_fail@plt+0x2b9c>
   13f9c:	mov	r0, r9
   13fa0:	bl	113d8 <inotify_rm_watch@plt>
   13fa4:	mov	r1, r4
   13fa8:	ldr	r0, [sp, #24]
   13fac:	bl	18324 <__assert_fail@plt+0x6f10>
   13fb0:	cmn	r6, #1
   13fb4:	str	r6, [r4, #60]	; 0x3c
   13fb8:	beq	13b78 <__assert_fail@plt+0x2764>
   13fbc:	mov	r1, r4
   13fc0:	ldr	r0, [sp, #24]
   13fc4:	bl	18324 <__assert_fail@plt+0x6f10>
   13fc8:	cmp	r0, #0
   13fcc:	cmpne	r4, r0
   13fd0:	mov	r7, r0
   13fd4:	beq	14064 <__assert_fail@plt+0x2c50>
   13fd8:	ldr	r3, [sp, #40]	; 0x28
   13fdc:	ldr	r3, [r3, #4]
   13fe0:	cmp	r3, #1
   13fe4:	bne	13ff0 <__assert_fail@plt+0x2bdc>
   13fe8:	mov	r1, #0
   13fec:	bl	15434 <__assert_fail@plt+0x4020>
   13ff0:	mvn	r3, #0
   13ff4:	str	r3, [r7, #60]	; 0x3c
   13ff8:	ldr	r0, [r7]
   13ffc:	ldr	r6, [r7, #48]	; 0x30
   14000:	bl	14314 <__assert_fail@plt+0x2f00>
   14004:	add	r3, r6, #1
   14008:	cmp	r3, #1
   1400c:	mov	r7, r0
   14010:	bls	14064 <__assert_fail@plt+0x2c50>
   14014:	mov	r0, r6
   14018:	bl	113fc <close@plt>
   1401c:	cmp	r0, #0
   14020:	beq	14064 <__assert_fail@plt+0x2c50>
   14024:	bl	112dc <__errno_location@plt>
   14028:	mov	r2, #5
   1402c:	ldr	r1, [pc, #-312]	; 13efc <__assert_fail@plt+0x2ae8>
   14030:	ldr	r8, [r0]
   14034:	mov	r0, #0
   14038:	bl	11174 <dcgettext@plt>
   1403c:	mov	r1, r7
   14040:	str	r0, [sp, #92]	; 0x5c
   14044:	mov	r0, #4
   14048:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   1404c:	mov	r1, r8
   14050:	ldr	r2, [sp, #92]	; 0x5c
   14054:	str	r6, [sp]
   14058:	mov	r3, r0
   1405c:	mov	r0, #0
   14060:	bl	1121c <error@plt>
   14064:	mov	r1, r4
   14068:	ldr	r0, [sp, #24]
   1406c:	bl	18060 <__assert_fail@plt+0x6c4c>
   14070:	cmp	r0, #0
   14074:	bne	13d9c <__assert_fail@plt+0x2988>
   14078:	bl	1daa8 <__assert_fail@plt+0xc694>
   1407c:	bl	112dc <__errno_location@plt>
   14080:	mov	r2, #5
   14084:	ldr	r1, [pc, #-396]	; 13f00 <__assert_fail@plt+0x2aec>
   14088:	ldr	r5, [r0]
   1408c:	mov	r0, #0
   14090:	bl	11174 <dcgettext@plt>
   14094:	mov	r6, r0
   14098:	ldr	r0, [r4]
   1409c:	bl	14314 <__assert_fail@plt+0x2f00>
   140a0:	mov	r1, r0
   140a4:	mov	r0, #4
   140a8:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   140ac:	mov	r2, r6
   140b0:	mov	r1, r5
   140b4:	mov	r3, r0
   140b8:	mov	r0, #0
   140bc:	bl	1121c <error@plt>
   140c0:	b	13a30 <__assert_fail@plt+0x261c>
   140c4:	ldr	r3, [sp, #32]
   140c8:	cmp	r3, #0
   140cc:	subne	r8, r8, #80	; 0x50
   140d0:	bne	13a30 <__assert_fail@plt+0x261c>
   140d4:	ldr	r3, [sp, #68]	; 0x44
   140d8:	cmp	r3, #0
   140dc:	bne	13a8c <__assert_fail@plt+0x2678>
   140e0:	b	12e14 <__assert_fail@plt+0x1a00>
   140e4:	ldr	r8, [sp, #88]	; 0x58
   140e8:	mov	r2, #5
   140ec:	ldr	r1, [pc, #-496]	; 13f04 <__assert_fail@plt+0x2af0>
   140f0:	b	13eb4 <__assert_fail@plt+0x2aa0>
   140f4:	bl	112dc <__errno_location@plt>
   140f8:	mov	r2, #5
   140fc:	ldr	r1, [pc, #-508]	; 13f08 <__assert_fail@plt+0x2af4>
   14100:	ldr	r5, [r0]
   14104:	mov	r0, r4
   14108:	bl	11174 <dcgettext@plt>
   1410c:	mov	r1, r5
   14110:	mov	r2, r0
   14114:	mov	r0, #1
   14118:	bl	1121c <error@plt>
   1411c:	mov	r0, #0
   14120:	bl	11294 <exit@plt>
   14124:	bl	112dc <__errno_location@plt>
   14128:	mov	r2, #5
   1412c:	ldr	r1, [pc, #-552]	; 13f0c <__assert_fail@plt+0x2af8>
   14130:	ldr	r5, [r0]
   14134:	mov	r0, r7
   14138:	bl	11174 <dcgettext@plt>
   1413c:	mov	r4, r0
   14140:	ldr	r0, [r6, #4]
   14144:	bl	1c800 <__assert_fail@plt+0xb3ec>
   14148:	mov	r1, r5
   1414c:	mov	r3, r4
   14150:	ldr	r2, [pc, #-584]	; 13f10 <__assert_fail@plt+0x2afc>
   14154:	str	r0, [sp]
   14158:	mov	r0, #1
   1415c:	bl	1121c <error@plt>
   14160:	bl	112dc <__errno_location@plt>
   14164:	mov	r2, #5
   14168:	ldr	r1, [pc, #-604]	; 13f14 <__assert_fail@plt+0x2b00>
   1416c:	b	13358 <__assert_fail@plt+0x1f44>
   14170:	bl	112dc <__errno_location@plt>
   14174:	ldr	r8, [sp, #52]	; 0x34
   14178:	mov	r2, #5
   1417c:	ldr	r5, [r0]
   14180:	cmp	r5, #28
   14184:	beq	13a10 <__assert_fail@plt+0x25fc>
   14188:	ldr	r1, [pc, #-632]	; 13f18 <__assert_fail@plt+0x2b04>
   1418c:	mov	r0, #0
   14190:	bl	11174 <dcgettext@plt>
   14194:	ldr	r1, [r4]
   14198:	sub	r8, r8, #80	; 0x50
   1419c:	mov	r6, r0
   141a0:	mov	r0, #4
   141a4:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   141a8:	mov	r2, r6
   141ac:	mov	r1, r5
   141b0:	mov	r3, r0
   141b4:	mov	r0, #0
   141b8:	bl	1121c <error@plt>
   141bc:	b	13a30 <__assert_fail@plt+0x261c>
   141c0:	mov	fp, #0
   141c4:	mov	lr, #0
   141c8:	pop	{r1}		; (ldr r1, [sp], #4)
   141cc:	mov	r2, sp
   141d0:	push	{r2}		; (str r2, [sp, #-4]!)
   141d4:	push	{r0}		; (str r0, [sp, #-4]!)
   141d8:	ldr	ip, [pc, #16]	; 141f0 <__assert_fail@plt+0x2ddc>
   141dc:	push	{ip}		; (str ip, [sp, #-4]!)
   141e0:	ldr	r0, [pc, #12]	; 141f4 <__assert_fail@plt+0x2de0>
   141e4:	ldr	r3, [pc, #12]	; 141f8 <__assert_fail@plt+0x2de4>
   141e8:	bl	1124c <__libc_start_main@plt>
   141ec:	bl	113f0 <abort@plt>
   141f0:	andeq	pc, r1, r8, lsr r9	; <UNPREDICTABLE>
   141f4:	andeq	r1, r1, r8, ror r4
   141f8:	ldrdeq	pc, [r1], -r8
   141fc:	ldr	r3, [pc, #20]	; 14218 <__assert_fail@plt+0x2e04>
   14200:	ldr	r2, [pc, #20]	; 1421c <__assert_fail@plt+0x2e08>
   14204:	add	r3, pc, r3
   14208:	ldr	r2, [r3, r2]
   1420c:	cmp	r2, #0
   14210:	bxeq	lr
   14214:	b	11264 <__gmon_start__@plt>
   14218:	strdeq	sp, [r1], -r4
   1421c:	andeq	r0, r0, r8, lsr r1
   14220:	ldr	r3, [pc, #28]	; 14244 <__assert_fail@plt+0x2e30>
   14224:	ldr	r0, [pc, #28]	; 14248 <__assert_fail@plt+0x2e34>
   14228:	sub	r3, r3, r0
   1422c:	cmp	r3, #6
   14230:	bxls	lr
   14234:	ldr	r3, [pc, #16]	; 1424c <__assert_fail@plt+0x2e38>
   14238:	cmp	r3, #0
   1423c:	bxeq	lr
   14240:	bx	r3
   14244:	andeq	r2, r3, pc, lsr #3
   14248:	andeq	r2, r3, ip, lsr #3
   1424c:	andeq	r0, r0, r0
   14250:	ldr	r1, [pc, #36]	; 1427c <__assert_fail@plt+0x2e68>
   14254:	ldr	r0, [pc, #36]	; 14280 <__assert_fail@plt+0x2e6c>
   14258:	sub	r1, r1, r0
   1425c:	asr	r1, r1, #2
   14260:	add	r1, r1, r1, lsr #31
   14264:	asrs	r1, r1, #1
   14268:	bxeq	lr
   1426c:	ldr	r3, [pc, #16]	; 14284 <__assert_fail@plt+0x2e70>
   14270:	cmp	r3, #0
   14274:	bxeq	lr
   14278:	bx	r3
   1427c:	andeq	r2, r3, ip, lsr #3
   14280:	andeq	r2, r3, ip, lsr #3
   14284:	andeq	r0, r0, r0
   14288:	push	{r4, lr}
   1428c:	ldr	r4, [pc, #24]	; 142ac <__assert_fail@plt+0x2e98>
   14290:	ldrb	r3, [r4]
   14294:	cmp	r3, #0
   14298:	popne	{r4, pc}
   1429c:	bl	14220 <__assert_fail@plt+0x2e0c>
   142a0:	mov	r3, #1
   142a4:	strb	r3, [r4]
   142a8:	pop	{r4, pc}
   142ac:	andeq	r2, r3, ip, asr #3
   142b0:	ldr	r0, [pc, #40]	; 142e0 <__assert_fail@plt+0x2ecc>
   142b4:	ldr	r3, [r0]
   142b8:	cmp	r3, #0
   142bc:	bne	142c4 <__assert_fail@plt+0x2eb0>
   142c0:	b	14250 <__assert_fail@plt+0x2e3c>
   142c4:	ldr	r3, [pc, #24]	; 142e4 <__assert_fail@plt+0x2ed0>
   142c8:	cmp	r3, #0
   142cc:	beq	142c0 <__assert_fail@plt+0x2eac>
   142d0:	push	{r4, lr}
   142d4:	blx	r3
   142d8:	pop	{r4, lr}
   142dc:	b	14250 <__assert_fail@plt+0x2e3c>
   142e0:	andeq	r1, r3, r4, lsl pc
   142e4:	andeq	r0, r0, r0
   142e8:	push	{r4, lr}
   142ec:	ldr	r0, [r0, #60]	; 0x3c
   142f0:	bl	1f46c <__assert_fail@plt+0xe058>
   142f4:	mov	r0, r1
   142f8:	pop	{r4, pc}
   142fc:	ldr	r0, [r0, #60]	; 0x3c
   14300:	ldr	r3, [r1, #60]	; 0x3c
   14304:	sub	r0, r0, r3
   14308:	clz	r0, r0
   1430c:	lsr	r0, r0, #5
   14310:	bx	lr
   14314:	push	{r4, lr}
   14318:	mov	r4, r0
   1431c:	ldr	r1, [pc, #32]	; 14344 <__assert_fail@plt+0x2f30>
   14320:	bl	110cc <strcmp@plt>
   14324:	cmp	r0, #0
   14328:	beq	14334 <__assert_fail@plt+0x2f20>
   1432c:	mov	r0, r4
   14330:	pop	{r4, pc}
   14334:	mov	r2, #5
   14338:	ldr	r1, [pc, #8]	; 14348 <__assert_fail@plt+0x2f34>
   1433c:	pop	{r4, lr}
   14340:	b	11174 <dcgettext@plt>
   14344:			; <UNDEFINED> instruction: 0x0001fab4
   14348:			; <UNDEFINED> instruction: 0x0001fab8
   1434c:	push	{r4, r5, r6, lr}
   14350:	sub	sp, sp, #88	; 0x58
   14354:	mov	r5, r1
   14358:	mov	r1, sp
   1435c:	bl	1109c <fstatfs64@plt>
   14360:	cmp	r0, #0
   14364:	beq	143e8 <__assert_fail@plt+0x2fd4>
   14368:	bl	112dc <__errno_location@plt>
   1436c:	ldr	r4, [r0]
   14370:	cmp	r4, #38	; 0x26
   14374:	beq	143dc <__assert_fail@plt+0x2fc8>
   14378:	mov	r2, #5
   1437c:	ldr	r1, [pc, #1516]	; 14970 <__assert_fail@plt+0x355c>
   14380:	mov	r0, #0
   14384:	bl	11174 <dcgettext@plt>
   14388:	mov	r1, r5
   1438c:	mov	r6, r0
   14390:	mov	r0, #4
   14394:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   14398:	mov	r2, r6
   1439c:	mov	r1, r4
   143a0:	mov	r3, r0
   143a4:	mov	r0, #0
   143a8:	bl	1121c <error@plt>
   143ac:	mov	r0, #1
   143b0:	add	sp, sp, #88	; 0x58
   143b4:	pop	{r4, r5, r6, pc}
   143b8:	ldr	r2, [pc, #1460]	; 14974 <__assert_fail@plt+0x3560>
   143bc:	cmp	r3, r2
   143c0:	beq	1463c <__assert_fail@plt+0x3228>
   143c4:	ldr	r2, [pc, #1452]	; 14978 <__assert_fail@plt+0x3564>
   143c8:	cmp	r3, r2
   143cc:	beq	1463c <__assert_fail@plt+0x3228>
   143d0:	ldr	r2, [pc, #1444]	; 1497c <__assert_fail@plt+0x3568>
   143d4:	cmp	r3, r2
   143d8:	beq	1463c <__assert_fail@plt+0x3228>
   143dc:	mov	r0, #1
   143e0:	add	sp, sp, #88	; 0x58
   143e4:	pop	{r4, r5, r6, pc}
   143e8:	ldr	r3, [sp]
   143ec:	ldr	r2, [pc, #1420]	; 14980 <__assert_fail@plt+0x356c>
   143f0:	cmp	r3, r2
   143f4:	beq	1463c <__assert_fail@plt+0x3228>
   143f8:	bhi	1445c <__assert_fail@plt+0x3048>
   143fc:	ldr	r2, [pc, #1408]	; 14984 <__assert_fail@plt+0x3570>
   14400:	cmp	r3, r2
   14404:	bhi	14504 <__assert_fail@plt+0x30f0>
   14408:	sub	r2, r2, #2
   1440c:	cmp	r3, r2
   14410:	bcs	1463c <__assert_fail@plt+0x3228>
   14414:	ldr	r2, [pc, #1388]	; 14988 <__assert_fail@plt+0x3574>
   14418:	cmp	r3, r2
   1441c:	beq	1463c <__assert_fail@plt+0x3228>
   14420:	bhi	14550 <__assert_fail@plt+0x313c>
   14424:	ldr	r2, [pc, #1376]	; 1498c <__assert_fail@plt+0x3578>
   14428:	cmp	r3, r2
   1442c:	beq	1463c <__assert_fail@plt+0x3228>
   14430:	bhi	14724 <__assert_fail@plt+0x3310>
   14434:	ldr	r2, [pc, #1364]	; 14990 <__assert_fail@plt+0x357c>
   14438:	cmp	r3, r2
   1443c:	beq	1463c <__assert_fail@plt+0x3228>
   14440:	cmp	r3, #392	; 0x188
   14444:	bcs	14904 <__assert_fail@plt+0x34f0>
   14448:	cmp	r3, #47	; 0x2f
   1444c:	beq	1463c <__assert_fail@plt+0x3228>
   14450:	cmp	r3, #51	; 0x33
   14454:	bne	143dc <__assert_fail@plt+0x2fc8>
   14458:	b	1463c <__assert_fail@plt+0x3228>
   1445c:	ldr	r2, [pc, #1328]	; 14994 <__assert_fail@plt+0x3580>
   14460:	cmp	r3, r2
   14464:	beq	1463c <__assert_fail@plt+0x3228>
   14468:	bls	144b8 <__assert_fail@plt+0x30a4>
   1446c:	ldr	r2, [pc, #1316]	; 14998 <__assert_fail@plt+0x3584>
   14470:	cmp	r3, r2
   14474:	beq	1463c <__assert_fail@plt+0x3228>
   14478:	bhi	145c8 <__assert_fail@plt+0x31b4>
   1447c:	ldr	r2, [pc, #1304]	; 1499c <__assert_fail@plt+0x3588>
   14480:	cmp	r3, r2
   14484:	beq	1463c <__assert_fail@plt+0x3228>
   14488:	bls	14670 <__assert_fail@plt+0x325c>
   1448c:	ldr	r2, [pc, #1292]	; 149a0 <__assert_fail@plt+0x358c>
   14490:	cmp	r3, r2
   14494:	beq	1463c <__assert_fail@plt+0x3228>
   14498:	bhi	147f0 <__assert_fail@plt+0x33dc>
   1449c:	ldr	r2, [pc, #1280]	; 149a4 <__assert_fail@plt+0x3590>
   144a0:	cmp	r3, r2
   144a4:	beq	1463c <__assert_fail@plt+0x3228>
   144a8:	ldr	r2, [pc, #1272]	; 149a8 <__assert_fail@plt+0x3594>
   144ac:	cmp	r3, r2
   144b0:	bne	143dc <__assert_fail@plt+0x2fc8>
   144b4:	b	1463c <__assert_fail@plt+0x3228>
   144b8:	ldr	r2, [pc, #1260]	; 149ac <__assert_fail@plt+0x3598>
   144bc:	cmp	r3, r2
   144c0:	beq	1463c <__assert_fail@plt+0x3228>
   144c4:	bhi	1458c <__assert_fail@plt+0x3178>
   144c8:	ldr	r2, [pc, #1248]	; 149b0 <__assert_fail@plt+0x359c>
   144cc:	cmp	r3, r2
   144d0:	beq	1463c <__assert_fail@plt+0x3228>
   144d4:	bhi	14750 <__assert_fail@plt+0x333c>
   144d8:	ldr	r2, [pc, #1236]	; 149b4 <__assert_fail@plt+0x35a0>
   144dc:	cmp	r3, r2
   144e0:	beq	1463c <__assert_fail@plt+0x3228>
   144e4:	bhi	148e4 <__assert_fail@plt+0x34d0>
   144e8:	ldr	r2, [pc, #1224]	; 149b8 <__assert_fail@plt+0x35a4>
   144ec:	cmp	r3, r2
   144f0:	beq	1463c <__assert_fail@plt+0x3228>
   144f4:	ldr	r2, [pc, #1216]	; 149bc <__assert_fail@plt+0x35a8>
   144f8:	cmp	r3, r2
   144fc:	bne	143dc <__assert_fail@plt+0x2fc8>
   14500:	b	1463c <__assert_fail@plt+0x3228>
   14504:	ldr	r2, [pc, #1204]	; 149c0 <__assert_fail@plt+0x35ac>
   14508:	cmp	r3, r2
   1450c:	beq	1463c <__assert_fail@plt+0x3228>
   14510:	bhi	14604 <__assert_fail@plt+0x31f0>
   14514:	ldr	r2, [pc, #1192]	; 149c4 <__assert_fail@plt+0x35b0>
   14518:	cmp	r3, r2
   1451c:	beq	1463c <__assert_fail@plt+0x3228>
   14520:	bhi	146f8 <__assert_fail@plt+0x32e4>
   14524:	ldr	r2, [pc, #1180]	; 149c8 <__assert_fail@plt+0x35b4>
   14528:	cmp	r3, r2
   1452c:	beq	1463c <__assert_fail@plt+0x3228>
   14530:	bhi	148b8 <__assert_fail@plt+0x34a4>
   14534:	ldr	r2, [pc, #1168]	; 149cc <__assert_fail@plt+0x35b8>
   14538:	cmp	r3, r2
   1453c:	beq	1463c <__assert_fail@plt+0x3228>
   14540:	add	r2, r2, #10
   14544:	cmp	r3, r2
   14548:	bne	143dc <__assert_fail@plt+0x2fc8>
   1454c:	b	1463c <__assert_fail@plt+0x3228>
   14550:	ldr	r2, [pc, #1144]	; 149d0 <__assert_fail@plt+0x35bc>
   14554:	cmp	r3, r2
   14558:	beq	1463c <__assert_fail@plt+0x3228>
   1455c:	bls	1469c <__assert_fail@plt+0x3288>
   14560:	ldr	r2, [pc, #1132]	; 149d4 <__assert_fail@plt+0x35c0>
   14564:	cmp	r3, r2
   14568:	beq	1463c <__assert_fail@plt+0x3228>
   1456c:	bhi	147c8 <__assert_fail@plt+0x33b4>
   14570:	ldr	r2, [pc, #1120]	; 149d8 <__assert_fail@plt+0x35c4>
   14574:	cmp	r3, r2
   14578:	beq	1463c <__assert_fail@plt+0x3228>
   1457c:	add	r2, r2, #22
   14580:	cmp	r3, r2
   14584:	bne	143dc <__assert_fail@plt+0x2fc8>
   14588:	b	1463c <__assert_fail@plt+0x3228>
   1458c:	ldr	r2, [pc, #1096]	; 149dc <__assert_fail@plt+0x35c8>
   14590:	cmp	r3, r2
   14594:	beq	1463c <__assert_fail@plt+0x3228>
   14598:	bls	146c4 <__assert_fail@plt+0x32b0>
   1459c:	ldr	r2, [pc, #1084]	; 149e0 <__assert_fail@plt+0x35cc>
   145a0:	cmp	r3, r2
   145a4:	beq	1463c <__assert_fail@plt+0x3228>
   145a8:	bhi	1481c <__assert_fail@plt+0x3408>
   145ac:	ldr	r2, [pc, #1072]	; 149e4 <__assert_fail@plt+0x35d0>
   145b0:	cmp	r3, r2
   145b4:	beq	1463c <__assert_fail@plt+0x3228>
   145b8:	ldr	r2, [pc, #1064]	; 149e8 <__assert_fail@plt+0x35d4>
   145bc:	cmp	r3, r2
   145c0:	bne	143dc <__assert_fail@plt+0x2fc8>
   145c4:	b	1463c <__assert_fail@plt+0x3228>
   145c8:	ldr	r2, [pc, #1052]	; 149ec <__assert_fail@plt+0x35d8>
   145cc:	cmp	r3, r2
   145d0:	beq	1463c <__assert_fail@plt+0x3228>
   145d4:	bls	14644 <__assert_fail@plt+0x3230>
   145d8:	ldr	r2, [pc, #1040]	; 149f0 <__assert_fail@plt+0x35dc>
   145dc:	cmp	r3, r2
   145e0:	beq	1463c <__assert_fail@plt+0x3228>
   145e4:	bhi	143b8 <__assert_fail@plt+0x2fa4>
   145e8:	ldr	r2, [pc, #1028]	; 149f4 <__assert_fail@plt+0x35e0>
   145ec:	cmp	r3, r2
   145f0:	beq	1463c <__assert_fail@plt+0x3228>
   145f4:	ldr	r2, [pc, #1020]	; 149f8 <__assert_fail@plt+0x35e4>
   145f8:	cmp	r3, r2
   145fc:	bne	143dc <__assert_fail@plt+0x2fc8>
   14600:	b	1463c <__assert_fail@plt+0x3228>
   14604:	ldr	r2, [pc, #1008]	; 149fc <__assert_fail@plt+0x35e8>
   14608:	cmp	r3, r2
   1460c:	beq	1463c <__assert_fail@plt+0x3228>
   14610:	bls	1477c <__assert_fail@plt+0x3368>
   14614:	ldr	r2, [pc, #996]	; 14a00 <__assert_fail@plt+0x35ec>
   14618:	cmp	r3, r2
   1461c:	beq	1463c <__assert_fail@plt+0x3228>
   14620:	bhi	147a0 <__assert_fail@plt+0x338c>
   14624:	ldr	r2, [pc, #984]	; 14a04 <__assert_fail@plt+0x35f0>
   14628:	cmp	r3, r2
   1462c:	beq	1463c <__assert_fail@plt+0x3228>
   14630:	ldr	r2, [pc, #976]	; 14a08 <__assert_fail@plt+0x35f4>
   14634:	cmp	r3, r2
   14638:	bne	143dc <__assert_fail@plt+0x2fc8>
   1463c:	mov	r0, #0
   14640:	b	143e0 <__assert_fail@plt+0x2fcc>
   14644:	ldr	r2, [pc, #960]	; 14a0c <__assert_fail@plt+0x35f8>
   14648:	cmp	r3, r2
   1464c:	beq	1463c <__assert_fail@plt+0x3228>
   14650:	bhi	1487c <__assert_fail@plt+0x3468>
   14654:	add	r2, r2, #-268435456	; 0xf0000000
   14658:	cmp	r3, r2
   1465c:	beq	1463c <__assert_fail@plt+0x3228>
   14660:	ldr	r2, [pc, #936]	; 14a10 <__assert_fail@plt+0x35fc>
   14664:	cmp	r3, r2
   14668:	bne	143dc <__assert_fail@plt+0x2fc8>
   1466c:	b	1463c <__assert_fail@plt+0x3228>
   14670:	ldr	r2, [pc, #924]	; 14a14 <__assert_fail@plt+0x3600>
   14674:	cmp	r3, r2
   14678:	beq	1463c <__assert_fail@plt+0x3228>
   1467c:	bhi	14898 <__assert_fail@plt+0x3484>
   14680:	ldr	r2, [pc, #912]	; 14a18 <__assert_fail@plt+0x3604>
   14684:	cmp	r3, r2
   14688:	beq	1463c <__assert_fail@plt+0x3228>
   1468c:	add	r2, r2, #2
   14690:	cmp	r3, r2
   14694:	bne	143dc <__assert_fail@plt+0x2fc8>
   14698:	b	1463c <__assert_fail@plt+0x3228>
   1469c:	ldr	r2, [pc, #888]	; 14a1c <__assert_fail@plt+0x3608>
   146a0:	cmp	r3, r2
   146a4:	beq	1463c <__assert_fail@plt+0x3228>
   146a8:	bhi	14844 <__assert_fail@plt+0x3430>
   146ac:	cmp	r3, #16384	; 0x4000
   146b0:	beq	1463c <__assert_fail@plt+0x3228>
   146b4:	sub	r2, r2, #2
   146b8:	cmp	r3, r2
   146bc:	bne	143dc <__assert_fail@plt+0x2fc8>
   146c0:	b	1463c <__assert_fail@plt+0x3228>
   146c4:	ldr	r2, [pc, #852]	; 14a20 <__assert_fail@plt+0x360c>
   146c8:	cmp	r3, r2
   146cc:	beq	1463c <__assert_fail@plt+0x3228>
   146d0:	bhi	14860 <__assert_fail@plt+0x344c>
   146d4:	sub	r2, r2, #8960	; 0x2300
   146d8:	sub	r2, r2, #1
   146dc:	cmp	r3, r2
   146e0:	beq	1463c <__assert_fail@plt+0x3228>
   146e4:	add	r2, r2, #5824	; 0x16c0
   146e8:	add	r2, r2, #57	; 0x39
   146ec:	cmp	r3, r2
   146f0:	bne	143dc <__assert_fail@plt+0x2fc8>
   146f4:	b	1463c <__assert_fail@plt+0x3228>
   146f8:	ldr	r2, [pc, #804]	; 14a24 <__assert_fail@plt+0x3610>
   146fc:	cmp	r3, r2
   14700:	beq	1463c <__assert_fail@plt+0x3228>
   14704:	bhi	14954 <__assert_fail@plt+0x3540>
   14708:	ldr	r2, [pc, #792]	; 14a28 <__assert_fail@plt+0x3614>
   1470c:	cmp	r3, r2
   14710:	beq	1463c <__assert_fail@plt+0x3228>
   14714:	ldr	r2, [pc, #784]	; 14a2c <__assert_fail@plt+0x3618>
   14718:	cmp	r3, r2
   1471c:	bne	143dc <__assert_fail@plt+0x2fc8>
   14720:	b	1463c <__assert_fail@plt+0x3228>
   14724:	ldr	r2, [pc, #772]	; 14a30 <__assert_fail@plt+0x361c>
   14728:	cmp	r3, r2
   1472c:	beq	1463c <__assert_fail@plt+0x3228>
   14730:	bhi	148d4 <__assert_fail@plt+0x34c0>
   14734:	ldr	r2, [pc, #760]	; 14a34 <__assert_fail@plt+0x3620>
   14738:	cmp	r3, r2
   1473c:	beq	1463c <__assert_fail@plt+0x3228>
   14740:	add	r2, r2, #16
   14744:	cmp	r3, r2
   14748:	bne	143dc <__assert_fail@plt+0x2fc8>
   1474c:	b	1463c <__assert_fail@plt+0x3228>
   14750:	ldr	r2, [pc, #736]	; 14a38 <__assert_fail@plt+0x3624>
   14754:	cmp	r3, r2
   14758:	beq	1463c <__assert_fail@plt+0x3228>
   1475c:	bhi	14938 <__assert_fail@plt+0x3524>
   14760:	ldr	r2, [pc, #724]	; 14a3c <__assert_fail@plt+0x3628>
   14764:	cmp	r3, r2
   14768:	beq	1463c <__assert_fail@plt+0x3228>
   1476c:	ldr	r2, [pc, #716]	; 14a40 <__assert_fail@plt+0x362c>
   14770:	cmp	r3, r2
   14774:	bne	143dc <__assert_fail@plt+0x2fc8>
   14778:	b	1463c <__assert_fail@plt+0x3228>
   1477c:	ldr	r2, [pc, #704]	; 14a44 <__assert_fail@plt+0x3630>
   14780:	cmp	r3, r2
   14784:	beq	1463c <__assert_fail@plt+0x3228>
   14788:	bhi	1491c <__assert_fail@plt+0x3508>
   1478c:	ldr	r2, [pc, #692]	; 14a48 <__assert_fail@plt+0x3634>
   14790:	add	r2, r3, r2
   14794:	cmp	r2, #3
   14798:	bhi	143dc <__assert_fail@plt+0x2fc8>
   1479c:	b	1463c <__assert_fail@plt+0x3228>
   147a0:	ldr	r2, [pc, #676]	; 14a4c <__assert_fail@plt+0x3638>
   147a4:	cmp	r3, r2
   147a8:	beq	1463c <__assert_fail@plt+0x3228>
   147ac:	ldr	r2, [pc, #668]	; 14a50 <__assert_fail@plt+0x363c>
   147b0:	cmp	r3, r2
   147b4:	beq	1463c <__assert_fail@plt+0x3228>
   147b8:	ldr	r2, [pc, #660]	; 14a54 <__assert_fail@plt+0x3640>
   147bc:	cmp	r3, r2
   147c0:	bne	143dc <__assert_fail@plt+0x2fc8>
   147c4:	b	1463c <__assert_fail@plt+0x3228>
   147c8:	ldr	r2, [pc, #648]	; 14a58 <__assert_fail@plt+0x3644>
   147cc:	cmp	r3, r2
   147d0:	beq	1463c <__assert_fail@plt+0x3228>
   147d4:	ldr	r2, [pc, #640]	; 14a5c <__assert_fail@plt+0x3648>
   147d8:	cmp	r3, r2
   147dc:	beq	1463c <__assert_fail@plt+0x3228>
   147e0:	ldr	r2, [pc, #632]	; 14a60 <__assert_fail@plt+0x364c>
   147e4:	cmp	r3, r2
   147e8:	bne	143dc <__assert_fail@plt+0x2fc8>
   147ec:	b	1463c <__assert_fail@plt+0x3228>
   147f0:	ldr	r2, [pc, #620]	; 14a64 <__assert_fail@plt+0x3650>
   147f4:	cmp	r3, r2
   147f8:	beq	1463c <__assert_fail@plt+0x3228>
   147fc:	add	r2, r2, #65280	; 0xff00
   14800:	add	r2, r2, #17
   14804:	cmp	r3, r2
   14808:	beq	1463c <__assert_fail@plt+0x3228>
   1480c:	ldr	r2, [pc, #596]	; 14a68 <__assert_fail@plt+0x3654>
   14810:	cmp	r3, r2
   14814:	bne	143dc <__assert_fail@plt+0x2fc8>
   14818:	b	1463c <__assert_fail@plt+0x3228>
   1481c:	ldr	r2, [pc, #584]	; 14a6c <__assert_fail@plt+0x3658>
   14820:	cmp	r3, r2
   14824:	beq	1463c <__assert_fail@plt+0x3228>
   14828:	ldr	r2, [pc, #576]	; 14a70 <__assert_fail@plt+0x365c>
   1482c:	cmp	r3, r2
   14830:	beq	1463c <__assert_fail@plt+0x3228>
   14834:	ldr	r2, [pc, #568]	; 14a74 <__assert_fail@plt+0x3660>
   14838:	cmp	r3, r2
   1483c:	bne	143dc <__assert_fail@plt+0x2fc8>
   14840:	b	1463c <__assert_fail@plt+0x3228>
   14844:	ldr	r2, [pc, #556]	; 14a78 <__assert_fail@plt+0x3664>
   14848:	cmp	r3, r2
   1484c:	beq	1463c <__assert_fail@plt+0x3228>
   14850:	ldr	r2, [pc, #548]	; 14a7c <__assert_fail@plt+0x3668>
   14854:	cmp	r3, r2
   14858:	bne	143dc <__assert_fail@plt+0x2fc8>
   1485c:	b	1463c <__assert_fail@plt+0x3228>
   14860:	ldr	r2, [pc, #536]	; 14a80 <__assert_fail@plt+0x366c>
   14864:	cmp	r3, r2
   14868:	beq	1463c <__assert_fail@plt+0x3228>
   1486c:	ldr	r2, [pc, #528]	; 14a84 <__assert_fail@plt+0x3670>
   14870:	cmp	r3, r2
   14874:	bne	143dc <__assert_fail@plt+0x2fc8>
   14878:	b	1463c <__assert_fail@plt+0x3228>
   1487c:	ldr	r2, [pc, #516]	; 14a88 <__assert_fail@plt+0x3674>
   14880:	cmp	r3, r2
   14884:	beq	1463c <__assert_fail@plt+0x3228>
   14888:	ldr	r2, [pc, #508]	; 14a8c <__assert_fail@plt+0x3678>
   1488c:	cmp	r3, r2
   14890:	bne	143dc <__assert_fail@plt+0x2fc8>
   14894:	b	1463c <__assert_fail@plt+0x3228>
   14898:	ldr	r2, [pc, #496]	; 14a90 <__assert_fail@plt+0x367c>
   1489c:	cmp	r3, r2
   148a0:	beq	1463c <__assert_fail@plt+0x3228>
   148a4:	add	r2, r2, #129024	; 0x1f800
   148a8:	add	r2, r2, #600	; 0x258
   148ac:	cmp	r3, r2
   148b0:	bne	143dc <__assert_fail@plt+0x2fc8>
   148b4:	b	1463c <__assert_fail@plt+0x3228>
   148b8:	ldr	r2, [pc, #468]	; 14a94 <__assert_fail@plt+0x3680>
   148bc:	cmp	r3, r2
   148c0:	beq	1463c <__assert_fail@plt+0x3228>
   148c4:	add	r2, r2, #524	; 0x20c
   148c8:	cmp	r3, r2
   148cc:	bne	143dc <__assert_fail@plt+0x2fc8>
   148d0:	b	1463c <__assert_fail@plt+0x3228>
   148d4:	ldr	r2, [pc, #444]	; 14a98 <__assert_fail@plt+0x3684>
   148d8:	cmp	r3, r2
   148dc:	bne	14740 <__assert_fail@plt+0x332c>
   148e0:	b	1463c <__assert_fail@plt+0x3228>
   148e4:	ldr	r2, [pc, #432]	; 14a9c <__assert_fail@plt+0x3688>
   148e8:	cmp	r3, r2
   148ec:	beq	1463c <__assert_fail@plt+0x3228>
   148f0:	add	r2, r2, #194560	; 0x2f800
   148f4:	add	r2, r2, #796	; 0x31c
   148f8:	cmp	r3, r2
   148fc:	bne	143dc <__assert_fail@plt+0x2fc8>
   14900:	b	1463c <__assert_fail@plt+0x3228>
   14904:	cmp	r3, #1984	; 0x7c0
   14908:	beq	1463c <__assert_fail@plt+0x3228>
   1490c:	ldr	r2, [pc, #396]	; 14aa0 <__assert_fail@plt+0x368c>
   14910:	cmp	r3, r2
   14914:	bne	143dc <__assert_fail@plt+0x2fc8>
   14918:	b	1463c <__assert_fail@plt+0x3228>
   1491c:	ldr	r2, [pc, #384]	; 14aa4 <__assert_fail@plt+0x3690>
   14920:	cmp	r3, r2
   14924:	beq	1463c <__assert_fail@plt+0x3228>
   14928:	ldr	r2, [pc, #376]	; 14aa8 <__assert_fail@plt+0x3694>
   1492c:	cmp	r3, r2
   14930:	bne	143dc <__assert_fail@plt+0x2fc8>
   14934:	b	1463c <__assert_fail@plt+0x3228>
   14938:	ldr	r2, [pc, #364]	; 14aac <__assert_fail@plt+0x3698>
   1493c:	cmp	r3, r2
   14940:	beq	1463c <__assert_fail@plt+0x3228>
   14944:	ldr	r2, [pc, #356]	; 14ab0 <__assert_fail@plt+0x369c>
   14948:	cmp	r3, r2
   1494c:	bne	143dc <__assert_fail@plt+0x2fc8>
   14950:	b	1463c <__assert_fail@plt+0x3228>
   14954:	ldr	r2, [pc, #344]	; 14ab4 <__assert_fail@plt+0x36a0>
   14958:	cmp	r3, r2
   1495c:	beq	1463c <__assert_fail@plt+0x3228>
   14960:	add	r2, r2, #3
   14964:	cmp	r3, r2
   14968:	bne	143dc <__assert_fail@plt+0x2fc8>
   1496c:	b	1463c <__assert_fail@plt+0x3228>
   14970:	andeq	pc, r1, ip, ror #21
   14974:			; <UNDEFINED> instruction: 0xf97cff8c
   14978:			; <UNDEFINED> instruction: 0xf995e849
   1497c:	vshr.s32	d18, d0, #11
   14980:	stmiacs	sp, {r0, r2, r6, r8, sl, fp, ip, sp}^
   14984:	andeq	r9, r0, r2, lsr #31
   14988:	andeq	r3, r0, r4, lsr r4
   1498c:	andeq	r1, r0, sp, ror r3
   14990:	andeq	r0, r0, r7, lsl #3
   14994:	rsbvs	r6, r4, #494927872	; 0x1d800000
   14998:	ldrbtvc	r6, [r2], #-355	; 0xfffffe9d
   1499c:	ldrbvs	r6, [r9, -r9, ror #18]
   149a0:	mrcvs	6, 3, r6, cr3, cr3, {3}
   149a4:	ldmdavs	r9, {r1, r5, r8, ip}
   149a8:	stclvs	15, cr6, [pc], #-448	; 147f0 <__assert_fail@plt+0x33dc>
   149ac:	movtpl	r4, #21325	; 0x534d
   149b0:	movtmi	r5, #7507	; 0x1d53
   149b4:	cmpcc	r3, sl, asr #12
   149b8:	blcs	feb5c168 <optarg@@GLIBC_2.4+0xfeb29fa0>
   149bc:	svccs	0x00c12fc1
   149c0:			; <UNDEFINED> instruction: 0x012fd16d
   149c4:	andeq	r1, r1, r4, asr r9
   149c8:	andeq	lr, r0, r1, asr pc
   149cc:	strdeq	sl, [r0], -r5
   149d0:	andeq	r4, r0, r8, asr r8
   149d4:	strdeq	r5, [r0], -r5	; <UNPREDICTABLE>
   149d8:	andeq	r4, r0, r4, asr #26
   149dc:			; <UNDEFINED> instruction: 0x565a4653
   149e0:	bpl	f2f1a8 <optarg@@GLIBC_2.4+0xefcfe0>
   149e4:	stmdapl	r9!, {r0, r3, r5, fp, ip, lr}
   149e8:	stmdapl	r6, {r1, r6, r8, r9, ip, lr}^
   149ec:	ldmdbgt	lr!, {r3, r5, r6, r8, pc}^
   149f0:	rscs	lr, r5, r2, ror #3
   149f4:	bgt	fffa7240 <optarg@@GLIBC_2.4+0xfff75078>
   149f8:	logle<illegal precision>z	f0, f4
   149fc:	teqne	r0, r4, asr r8
   14a00:	stmibne	r0, {r1, r9}
   14a04:	cmnne	r6, #-1744830463	; 0x98000001
   14a08:	strne	r3, [r1, #-838]	; 0xfffffcba
   14a0c:	strls	r5, [r4, #2294]	; 0x8f6
   14a10:			; <UNDEFINED> instruction: 0x9123683e
   14a14:	cmnvs	r7, #112, 4
   14a18:	rsbvs	r6, r5, #112, 10	; 0x1c000000
   14a1c:	andeq	r4, r0, r6
   14a20:	movtpl	r5, #25678	; 0x644e
   14a24:	sbceq	pc, r0, lr, ror #31
   14a28:	eoreq	lr, r7, fp, ror #1
   14a2c:	subeq	r4, r1, r3, asr sl
   14a30:	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
   14a34:	andeq	r1, r0, pc, ror r3
   14a38:	strbmi	r4, [sp, #-1101]	; 0xfffffbb3
   14a3c:	strbmi	r4, [sp], #-322	; 0xfffffebe
   14a40:	ldrmi	ip, [sp, #-3368]!	; 0xfffff2d8
   14a44:	strbeq	r5, [r5, -r1, lsr #16]!
   14a48:	vcmla.f32	q8, q0, d12[0], #90
   14a4c:			; <UNDEFINED> instruction: 0x2011bab0
   14a50:	strcs	r1, [r5], #-2309	; 0xfffff6fb
   14a54:	blne	feb93594 <optarg@@GLIBC_2.4+0xfeb613cc>
   14a58:			; <UNDEFINED> instruction: 0x000072b6
   14a5c:	andeq	r9, r0, r0, ror #12
   14a60:	andeq	r7, r0, r5, ror r2
   14a64:	cmnvc	r1, #104, 6	; 0xa0000001
   14a68:	cmnvc	r3, #120586240	; 0x7300000
   14a6c:	stclpl	13, cr2, [sl, #980]	; 0x3d4
   14a70:	cmnvs	r5, ip, ror #14
   14a74:	bpl	13e63c8 <optarg@@GLIBC_2.4+0x13b4200>
   14a78:	andeq	r4, r0, r4, asr #4
   14a7c:	andeq	r4, r0, fp, lsr #16
   14a80:	movtpl	r4, #62283	; 0xf34b
   14a84:	ldrpl	r0, [r9], #-256	; 0xffffff00
   14a88:	blge	fee9b060 <optarg@@GLIBC_2.4+0xfee68e98>
   14a8c:			; <UNDEFINED> instruction: 0xc7571590
   14a90:	strbtvs	r6, [r2], #-1824	; 0xfffff8e0
   14a94:	andeq	lr, r0, r3, asr pc
   14a98:	andeq	r2, r0, r8, ror #8
   14a9c:	submi	r5, r6, #-1006632960	; 0xc4000000
   14aa0:	andeq	r1, r0, r3, ror r3
   14aa4:	stmdbeq	r4, {r2, r4, r5, r8, fp, ip}
   14aa8:	bleq	feb5c258 <optarg@@GLIBC_2.4+0xfeb2a090>
   14aac:	ldrbmi	r4, [r8, #-1619]	; 0xfffff9ad
   14ab0:	rsbpl	r4, r5, #1884160	; 0x1cc000
   14ab4:			; <UNDEFINED> instruction: 0x01021994
   14ab8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14abc:	mov	r5, r3
   14ac0:	sub	sp, sp, #8192	; 0x2000
   14ac4:	mvn	r3, #0
   14ac8:	mov	r4, r2
   14acc:	sub	sp, sp, #20
   14ad0:	mvn	r2, #0
   14ad4:	cmp	r5, r3
   14ad8:	cmpeq	r4, r2
   14adc:	strd	r4, [sp]
   14ae0:	str	r0, [sp, #12]
   14ae4:	mov	r8, r1
   14ae8:	beq	14bc4 <__assert_fail@plt+0x37b0>
   14aec:	mov	r7, r5
   14af0:	add	r5, sp, #16
   14af4:	mov	r6, r4
   14af8:	mov	sl, #0
   14afc:	mov	fp, #0
   14b00:	mov	r9, #1
   14b04:	str	r1, [sp, #8]
   14b08:	mov	r8, r5
   14b0c:	b	14b78 <__assert_fail@plt+0x3764>
   14b10:	cmp	r0, #0
   14b14:	beq	14bb0 <__assert_fail@plt+0x379c>
   14b18:	ldr	r3, [pc, #340]	; 14c74 <__assert_fail@plt+0x3860>
   14b1c:	mov	r2, r0
   14b20:	mov	r1, r9
   14b24:	ldr	r3, [r3]
   14b28:	mov	r0, r8
   14b2c:	bl	11150 <fwrite_unlocked@plt>
   14b30:	cmp	r5, r0
   14b34:	bhi	14c3c <__assert_fail@plt+0x3828>
   14b38:	subs	r6, r6, r5
   14b3c:	mov	r1, #0
   14b40:	sbc	r7, r7, r1
   14b44:	adds	sl, sl, r5
   14b48:	adc	fp, fp, r1
   14b4c:	ldrd	r0, [sp]
   14b50:	orrs	r3, r6, r7
   14b54:	mvn	r5, #0
   14b58:	moveq	r3, #1
   14b5c:	movne	r3, #0
   14b60:	mvn	r4, #1
   14b64:	cmp	r1, r5
   14b68:	cmpeq	r0, r4
   14b6c:	orreq	r3, r3, #1
   14b70:	cmp	r3, #0
   14b74:	bne	14bb0 <__assert_fail@plt+0x379c>
   14b78:	cmp	r7, #0
   14b7c:	cmpeq	r6, #8192	; 0x2000
   14b80:	mov	r2, r6
   14b84:	mov	r1, r8
   14b88:	movhi	r2, #8192	; 0x2000
   14b8c:	ldr	r0, [sp, #8]
   14b90:	bl	1c980 <__assert_fail@plt+0xb56c>
   14b94:	cmn	r0, #1
   14b98:	mov	r5, r0
   14b9c:	bne	14b10 <__assert_fail@plt+0x36fc>
   14ba0:	bl	112dc <__errno_location@plt>
   14ba4:	ldr	r4, [r0]
   14ba8:	cmp	r4, #11
   14bac:	bne	14c40 <__assert_fail@plt+0x382c>
   14bb0:	mov	r0, sl
   14bb4:	mov	r1, fp
   14bb8:	add	sp, sp, #8192	; 0x2000
   14bbc:	add	sp, sp, #20
   14bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bc4:	ldr	r9, [pc, #168]	; 14c74 <__assert_fail@plt+0x3860>
   14bc8:	mov	sl, #0
   14bcc:	mov	fp, #0
   14bd0:	add	r5, sp, #16
   14bd4:	mov	r6, #8192	; 0x2000
   14bd8:	mov	r7, #1
   14bdc:	b	14c0c <__assert_fail@plt+0x37f8>
   14be0:	cmp	r0, #0
   14be4:	beq	14bb0 <__assert_fail@plt+0x379c>
   14be8:	mov	r2, r0
   14bec:	ldr	r3, [r9]
   14bf0:	mov	r1, r7
   14bf4:	mov	r0, r5
   14bf8:	bl	11150 <fwrite_unlocked@plt>
   14bfc:	cmp	r4, r0
   14c00:	bhi	14c3c <__assert_fail@plt+0x3828>
   14c04:	adds	sl, sl, r4
   14c08:	adc	fp, fp, #0
   14c0c:	mov	r2, r6
   14c10:	mov	r1, r5
   14c14:	mov	r0, r8
   14c18:	bl	1c980 <__assert_fail@plt+0xb56c>
   14c1c:	cmn	r0, #1
   14c20:	mov	r4, r0
   14c24:	bne	14be0 <__assert_fail@plt+0x37cc>
   14c28:	bl	112dc <__errno_location@plt>
   14c2c:	ldr	r4, [r0]
   14c30:	cmp	r4, #11
   14c34:	beq	14bb0 <__assert_fail@plt+0x379c>
   14c38:	b	14c40 <__assert_fail@plt+0x382c>
   14c3c:	bl	11420 <__assert_fail@plt+0xc>
   14c40:	mov	r2, #5
   14c44:	ldr	r1, [pc, #44]	; 14c78 <__assert_fail@plt+0x3864>
   14c48:	mov	r0, #0
   14c4c:	bl	11174 <dcgettext@plt>
   14c50:	ldr	r1, [sp, #12]
   14c54:	mov	r5, r0
   14c58:	mov	r0, #4
   14c5c:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   14c60:	mov	r2, r5
   14c64:	mov	r1, r4
   14c68:	mov	r3, r0
   14c6c:	mov	r0, #1
   14c70:	bl	1121c <error@plt>
   14c74:	andeq	r2, r3, r4, asr #3
   14c78:	andeq	pc, r1, r4, lsr #22
   14c7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c80:	sub	sp, sp, #8192	; 0x2000
   14c84:	sub	sp, sp, #12
   14c88:	ldr	fp, [pc, #252]	; 14d8c <__assert_fail@plt+0x3978>
   14c8c:	ldr	sl, [pc, #252]	; 14d90 <__assert_fail@plt+0x397c>
   14c90:	mov	r5, r0
   14c94:	str	r1, [sp, #4]
   14c98:	mov	r9, r2
   14c9c:	mov	r6, #0
   14ca0:	mov	r7, #0
   14ca4:	mov	r8, #8192	; 0x2000
   14ca8:	b	14d14 <__assert_fail@plt+0x3900>
   14cac:	cmp	r0, #0
   14cb0:	beq	14d40 <__assert_fail@plt+0x392c>
   14cb4:	cmp	r5, #0
   14cb8:	beq	14cec <__assert_fail@plt+0x38d8>
   14cbc:	ldrb	r2, [fp]
   14cc0:	ldr	ip, [pc, #204]	; 14d94 <__assert_fail@plt+0x3980>
   14cc4:	ldr	r0, [pc, #204]	; 14d98 <__assert_fail@plt+0x3984>
   14cc8:	cmp	r2, #0
   14ccc:	moveq	r0, ip
   14cd0:	ldr	r3, [sp, #4]
   14cd4:	mov	r2, r0
   14cd8:	ldr	r1, [pc, #188]	; 14d9c <__assert_fail@plt+0x3988>
   14cdc:	mov	r0, #1
   14ce0:	bl	11300 <__printf_chk@plt>
   14ce4:	mov	r3, #0
   14ce8:	strb	r3, [fp]
   14cec:	ldr	r3, [sl]
   14cf0:	mov	r2, r4
   14cf4:	mov	r1, #1
   14cf8:	add	r0, sp, #8
   14cfc:	bl	11150 <fwrite_unlocked@plt>
   14d00:	cmp	r4, r0
   14d04:	bhi	14d54 <__assert_fail@plt+0x3940>
   14d08:	adds	r6, r6, r4
   14d0c:	adc	r7, r7, #0
   14d10:	mov	r5, #0
   14d14:	mov	r2, r8
   14d18:	add	r1, sp, #8
   14d1c:	mov	r0, r9
   14d20:	bl	1c980 <__assert_fail@plt+0xb56c>
   14d24:	cmn	r0, #1
   14d28:	mov	r4, r0
   14d2c:	bne	14cac <__assert_fail@plt+0x3898>
   14d30:	bl	112dc <__errno_location@plt>
   14d34:	ldr	r4, [r0]
   14d38:	cmp	r4, #11
   14d3c:	bne	14d58 <__assert_fail@plt+0x3944>
   14d40:	mov	r0, r6
   14d44:	mov	r1, r7
   14d48:	add	sp, sp, #8192	; 0x2000
   14d4c:	add	sp, sp, #12
   14d50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d54:	bl	11420 <__assert_fail@plt+0xc>
   14d58:	mov	r2, #5
   14d5c:	ldr	r1, [pc, #60]	; 14da0 <__assert_fail@plt+0x398c>
   14d60:	mov	r0, #0
   14d64:	bl	11174 <dcgettext@plt>
   14d68:	ldr	r1, [sp, #4]
   14d6c:	mov	r5, r0
   14d70:	mov	r0, #4
   14d74:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   14d78:	mov	r2, r5
   14d7c:	mov	r1, r4
   14d80:	mov	r3, r0
   14d84:	mov	r0, #1
   14d88:	bl	1121c <error@plt>
   14d8c:	andeq	r2, r3, r8, asr #2
   14d90:	andeq	r2, r3, r4, asr #3
   14d94:	andeq	pc, r1, r4, asr #22
   14d98:			; <UNDEFINED> instruction: 0x000205b4
   14d9c:	andeq	pc, r1, r8, lsr fp	; <UNPREDICTABLE>
   14da0:	andeq	pc, r1, r4, lsr #22
   14da4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14da8:	sub	sp, sp, #8192	; 0x2000
   14dac:	mov	r5, r3
   14db0:	sub	sp, sp, #4
   14db4:	mov	r4, r2
   14db8:	orrs	r3, r4, r5
   14dbc:	add	r3, sp, #8192	; 0x2000
   14dc0:	add	r3, r3, #40	; 0x28
   14dc4:	ldr	r8, [r3]
   14dc8:	beq	14e64 <__assert_fail@plt+0x3a50>
   14dcc:	mov	fp, r0
   14dd0:	mov	r9, r1
   14dd4:	mov	sl, #8192	; 0x2000
   14dd8:	b	14e14 <__assert_fail@plt+0x3a00>
   14ddc:	cmn	r0, #1
   14de0:	beq	14e74 <__assert_fail@plt+0x3a60>
   14de4:	ldrd	r2, [r8]
   14de8:	mov	r7, #0
   14dec:	adds	r2, r2, r0
   14df0:	adc	r3, r3, r7
   14df4:	cmp	r7, r5
   14df8:	cmpeq	r0, r4
   14dfc:	strd	r2, [r8]
   14e00:	bhi	14e3c <__assert_fail@plt+0x3a28>
   14e04:	subs	r4, r4, r0
   14e08:	sbc	r5, r5, r7
   14e0c:	orrs	r3, r4, r5
   14e10:	beq	14e64 <__assert_fail@plt+0x3a50>
   14e14:	mov	r2, sl
   14e18:	mov	r1, sp
   14e1c:	mov	r0, r9
   14e20:	bl	1c980 <__assert_fail@plt+0xb56c>
   14e24:	cmp	r0, #0
   14e28:	bne	14ddc <__assert_fail@plt+0x39c8>
   14e2c:	mvn	r0, #0
   14e30:	add	sp, sp, #8192	; 0x2000
   14e34:	add	sp, sp, #4
   14e38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e3c:	subs	r6, r0, r4
   14e40:	beq	14e64 <__assert_fail@plt+0x3a50>
   14e44:	ldr	r3, [pc, #120]	; 14ec4 <__assert_fail@plt+0x3ab0>
   14e48:	add	r0, sp, r4
   14e4c:	mov	r2, r6
   14e50:	ldr	r3, [r3]
   14e54:	mov	r1, #1
   14e58:	bl	11150 <fwrite_unlocked@plt>
   14e5c:	cmp	r6, r0
   14e60:	bhi	14ec0 <__assert_fail@plt+0x3aac>
   14e64:	mov	r0, #0
   14e68:	add	sp, sp, #8192	; 0x2000
   14e6c:	add	sp, sp, #4
   14e70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e74:	bl	112dc <__errno_location@plt>
   14e78:	mov	r2, #5
   14e7c:	ldr	r1, [pc, #68]	; 14ec8 <__assert_fail@plt+0x3ab4>
   14e80:	ldr	r4, [r0]
   14e84:	mov	r0, #0
   14e88:	bl	11174 <dcgettext@plt>
   14e8c:	mov	r1, fp
   14e90:	mov	r5, r0
   14e94:	mov	r0, #4
   14e98:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   14e9c:	mov	r2, r5
   14ea0:	mov	r1, r4
   14ea4:	mov	r3, r0
   14ea8:	mov	r0, #0
   14eac:	bl	1121c <error@plt>
   14eb0:	mov	r0, #1
   14eb4:	add	sp, sp, #8192	; 0x2000
   14eb8:	add	sp, sp, #4
   14ebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ec0:	bl	11420 <__assert_fail@plt+0xc>
   14ec4:	andeq	r2, r3, r4, asr #3
   14ec8:	andeq	pc, r1, r4, lsr #22
   14ecc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ed0:	sub	sp, sp, #8192	; 0x2000
   14ed4:	sub	sp, sp, #52	; 0x34
   14ed8:	mov	r4, r2
   14edc:	mov	r5, r3
   14ee0:	orrs	r3, r4, r5
   14ee4:	str	r0, [sp, #12]
   14ee8:	beq	150c8 <__assert_fail@plt+0x3cb4>
   14eec:	mov	fp, r1
   14ef0:	add	r3, sp, #8256	; 0x2040
   14ef4:	add	r1, sp, #8256	; 0x2040
   14ef8:	add	r3, r3, #32
   14efc:	add	r1, r1, #24
   14f00:	ldrd	r2, [r3]
   14f04:	ldrd	r0, [r1]
   14f08:	ldr	r8, [pc, #984]	; 152e8 <__assert_fail@plt+0x3ed4>
   14f0c:	mov	r9, #0
   14f10:	subs	r2, r2, r0
   14f14:	sbc	r3, r3, r1
   14f18:	asr	r0, r3, #31
   14f1c:	eor	r2, r2, r0
   14f20:	subs	r2, r2, r0
   14f24:	add	r3, sp, #8256	; 0x2040
   14f28:	and	r2, r2, r8
   14f2c:	add	r3, r3, #32
   14f30:	eor	r2, r2, r0
   14f34:	subs	r0, r2, r0
   14f38:	ldrd	r2, [r3]
   14f3c:	cmp	r0, #0
   14f40:	movne	r6, r0
   14f44:	moveq	r6, #8192	; 0x2000
   14f48:	movne	r7, #0
   14f4c:	moveq	r7, #0
   14f50:	mov	sl, r0
   14f54:	moveq	sl, #8192	; 0x2000
   14f58:	subs	r2, r2, r6
   14f5c:	sbc	r3, r3, r7
   14f60:	str	r9, [sp]
   14f64:	mov	r0, fp
   14f68:	mov	r7, r3
   14f6c:	mov	r6, r2
   14f70:	bl	111ec <lseek64@plt>
   14f74:	cmp	r0, #0
   14f78:	sbcs	r3, r1, #0
   14f7c:	blt	15218 <__assert_fail@plt+0x3e04>
   14f80:	add	r8, sp, #48	; 0x30
   14f84:	mov	r2, sl
   14f88:	mov	r1, r8
   14f8c:	mov	r0, fp
   14f90:	bl	1c980 <__assert_fail@plt+0xb56c>
   14f94:	cmn	r0, #1
   14f98:	mov	sl, r0
   14f9c:	beq	15178 <__assert_fail@plt+0x3d64>
   14fa0:	add	r1, sp, #8256	; 0x2040
   14fa4:	mov	r2, r0
   14fa8:	mov	r3, #0
   14fac:	add	r1, r1, #40	; 0x28
   14fb0:	strd	r2, [sp, #16]
   14fb4:	ldr	r1, [r1]
   14fb8:	adds	r2, r0, r6
   14fbc:	adc	r3, r3, r7
   14fc0:	cmp	r0, #0
   14fc4:	strd	r2, [r1]
   14fc8:	beq	15038 <__assert_fail@plt+0x3c24>
   14fcc:	ldr	r3, [pc, #792]	; 152ec <__assert_fail@plt+0x3ed8>
   14fd0:	add	r2, r8, r0
   14fd4:	ldrb	r1, [r3]
   14fd8:	ldrb	r2, [r2, #-1]
   14fdc:	cmp	r2, r1
   14fe0:	beq	14fec <__assert_fail@plt+0x3bd8>
   14fe4:	subs	r4, r4, #1
   14fe8:	sbc	r5, r5, #0
   14fec:	cmp	sl, #0
   14ff0:	beq	15038 <__assert_fail@plt+0x3c24>
   14ff4:	ldrb	r9, [r3]
   14ff8:	mov	r2, sl
   14ffc:	b	15024 <__assert_fail@plt+0x3c10>
   15000:	subs	r0, r4, #1
   15004:	sbc	r1, r5, #0
   15008:	orrs	r2, r4, r5
   1500c:	sub	r2, r3, r8
   15010:	beq	150dc <__assert_fail@plt+0x3cc8>
   15014:	cmp	r2, #0
   15018:	mov	r4, r0
   1501c:	mov	r5, r1
   15020:	beq	15038 <__assert_fail@plt+0x3c24>
   15024:	mov	r1, r9
   15028:	mov	r0, r8
   1502c:	bl	112c4 <memrchr@plt>
   15030:	subs	r3, r0, #0
   15034:	bne	15000 <__assert_fail@plt+0x3bec>
   15038:	add	r3, sp, #8256	; 0x2040
   1503c:	add	r3, r3, #24
   15040:	ldrd	r2, [r3]
   15044:	cmp	r7, r3
   15048:	cmpeq	r6, r2
   1504c:	beq	15228 <__assert_fail@plt+0x3e14>
   15050:	subs	r6, r6, #8192	; 0x2000
   15054:	sbc	r7, r7, #0
   15058:	mov	r9, #0
   1505c:	mov	r3, r7
   15060:	mov	r2, r6
   15064:	str	r9, [sp]
   15068:	mov	r0, fp
   1506c:	bl	111ec <lseek64@plt>
   15070:	cmp	r0, #0
   15074:	sbcs	r3, r1, #0
   15078:	blt	151b8 <__assert_fail@plt+0x3da4>
   1507c:	mov	r2, #8192	; 0x2000
   15080:	mov	r1, r8
   15084:	mov	r0, fp
   15088:	bl	1c980 <__assert_fail@plt+0xb56c>
   1508c:	cmn	r0, #1
   15090:	mov	sl, r0
   15094:	beq	15178 <__assert_fail@plt+0x3d64>
   15098:	add	r1, sp, #8256	; 0x2040
   1509c:	mov	r2, r0
   150a0:	mov	r3, #0
   150a4:	add	r1, r1, #40	; 0x28
   150a8:	strd	r2, [sp, #16]
   150ac:	ldr	r1, [r1]
   150b0:	adds	r2, r0, r6
   150b4:	adc	r3, r3, r7
   150b8:	cmp	r0, #0
   150bc:	strd	r2, [r1]
   150c0:	ldrne	r3, [pc, #548]	; 152ec <__assert_fail@plt+0x3ed8>
   150c4:	bne	14ff4 <__assert_fail@plt+0x3be0>
   150c8:	mov	r9, #1
   150cc:	mov	r0, r9
   150d0:	add	sp, sp, #8192	; 0x2000
   150d4:	add	sp, sp, #52	; 0x34
   150d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150dc:	sub	sl, sl, #1
   150e0:	subs	sl, sl, r2
   150e4:	beq	15108 <__assert_fail@plt+0x3cf4>
   150e8:	ldr	r1, [pc, #512]	; 152f0 <__assert_fail@plt+0x3edc>
   150ec:	add	r0, r3, #1
   150f0:	mov	r2, sl
   150f4:	ldr	r3, [r1]
   150f8:	mov	r1, #1
   150fc:	bl	11150 <fwrite_unlocked@plt>
   15100:	cmp	sl, r0
   15104:	bhi	152e4 <__assert_fail@plt+0x3ed0>
   15108:	add	r1, sp, #8256	; 0x2040
   1510c:	add	r1, r1, #32
   15110:	ldrd	r2, [sp, #16]
   15114:	ldrd	r0, [r1]
   15118:	mov	r9, #1
   1511c:	adds	r2, r2, r6
   15120:	adc	r3, r3, r7
   15124:	subs	r0, r0, r2
   15128:	sbc	r1, r1, r3
   1512c:	mov	r2, r0
   15130:	mov	r3, r1
   15134:	ldr	r0, [sp, #12]
   15138:	mov	r1, fp
   1513c:	bl	14ab8 <__assert_fail@plt+0x36a4>
   15140:	add	r3, sp, #8256	; 0x2040
   15144:	add	r3, r3, #40	; 0x28
   15148:	ldr	r3, [r3]
   1514c:	ldrd	r2, [r3]
   15150:	adds	r0, r0, r2
   15154:	adc	r1, r1, r3
   15158:	add	r3, sp, #8256	; 0x2040
   1515c:	add	r3, r3, #40	; 0x28
   15160:	ldr	r3, [r3]
   15164:	strd	r0, [r3]
   15168:	mov	r0, r9
   1516c:	add	sp, sp, #8192	; 0x2000
   15170:	add	sp, sp, #52	; 0x34
   15174:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15178:	bl	112dc <__errno_location@plt>
   1517c:	mov	r2, #5
   15180:	ldr	r1, [pc, #364]	; 152f4 <__assert_fail@plt+0x3ee0>
   15184:	ldr	r4, [r0]
   15188:	mov	r0, r9
   1518c:	bl	11174 <dcgettext@plt>
   15190:	ldr	r1, [sp, #12]
   15194:	mov	r5, r0
   15198:	mov	r0, #4
   1519c:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   151a0:	mov	r2, r5
   151a4:	mov	r1, r4
   151a8:	mov	r3, r0
   151ac:	mov	r0, r9
   151b0:	bl	1121c <error@plt>
   151b4:	b	150cc <__assert_fail@plt+0x3cb8>
   151b8:	sub	r2, r8, #24
   151bc:	mov	r0, r6
   151c0:	mov	r1, r7
   151c4:	bl	18804 <__assert_fail@plt+0x73f0>
   151c8:	mov	r6, r0
   151cc:	bl	112dc <__errno_location@plt>
   151d0:	mov	r2, #5
   151d4:	ldr	r1, [pc, #284]	; 152f8 <__assert_fail@plt+0x3ee4>
   151d8:	ldr	r5, [r0]
   151dc:	mov	r0, r9
   151e0:	bl	11174 <dcgettext@plt>
   151e4:	ldr	r2, [sp, #12]
   151e8:	mov	r1, #3
   151ec:	mov	r4, r0
   151f0:	mov	r0, r9
   151f4:	bl	1b90c <__assert_fail@plt+0xa4f8>
   151f8:	str	r6, [sp]
   151fc:	mov	r1, r5
   15200:	mov	r2, r4
   15204:	mov	r3, r0
   15208:	mov	r0, r9
   1520c:	bl	1121c <error@plt>
   15210:	mov	r0, #1
   15214:	bl	11294 <exit@plt>
   15218:	mov	r0, r6
   1521c:	mov	r1, r7
   15220:	add	r2, sp, #48	; 0x30
   15224:	b	151c4 <__assert_fail@plt+0x3db0>
   15228:	mov	r4, #0
   1522c:	mov	r3, r7
   15230:	str	r4, [sp]
   15234:	mov	r2, r6
   15238:	mov	r0, fp
   1523c:	bl	111ec <lseek64@plt>
   15240:	cmp	r0, #0
   15244:	sbcs	r3, r1, #0
   15248:	blt	15284 <__assert_fail@plt+0x3e70>
   1524c:	add	r3, sp, #8256	; 0x2040
   15250:	add	r3, r3, #32
   15254:	mov	r1, fp
   15258:	ldrd	r2, [r3]
   1525c:	ldr	r0, [sp, #12]
   15260:	bl	14ab8 <__assert_fail@plt+0x36a4>
   15264:	add	r3, sp, #8256	; 0x2040
   15268:	add	r3, r3, #40	; 0x28
   1526c:	mov	r9, #1
   15270:	ldr	r3, [r3]
   15274:	adds	r0, r0, r6
   15278:	adc	r1, r1, r7
   1527c:	strd	r0, [r3]
   15280:	b	150cc <__assert_fail@plt+0x3cb8>
   15284:	sub	r2, r8, #24
   15288:	mov	r1, r7
   1528c:	mov	r0, r6
   15290:	bl	18804 <__assert_fail@plt+0x73f0>
   15294:	mov	r8, r0
   15298:	bl	112dc <__errno_location@plt>
   1529c:	mov	r2, #5
   152a0:	ldr	r1, [pc, #80]	; 152f8 <__assert_fail@plt+0x3ee4>
   152a4:	ldr	r6, [r0]
   152a8:	mov	r0, r4
   152ac:	bl	11174 <dcgettext@plt>
   152b0:	ldr	r2, [sp, #12]
   152b4:	mov	r1, #3
   152b8:	mov	r5, r0
   152bc:	mov	r0, r4
   152c0:	bl	1b90c <__assert_fail@plt+0xa4f8>
   152c4:	str	r8, [sp]
   152c8:	mov	r1, r6
   152cc:	mov	r2, r5
   152d0:	mov	r3, r0
   152d4:	mov	r0, r4
   152d8:	bl	1121c <error@plt>
   152dc:	mov	r0, #1
   152e0:	bl	11294 <exit@plt>
   152e4:	bl	11420 <__assert_fail@plt+0xc>
   152e8:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   152ec:	ldrdeq	r2, [r3], -r0
   152f0:	andeq	r2, r3, r4, asr #3
   152f4:	andeq	pc, r1, r4, lsr #22
   152f8:	andeq	pc, r1, r8, asr #22
   152fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15300:	sub	sp, sp, #8192	; 0x2000
   15304:	sub	sp, sp, #12
   15308:	mov	r5, r3
   1530c:	mov	r4, r2
   15310:	orrs	r3, r4, r5
   15314:	add	r3, sp, #8192	; 0x2000
   15318:	add	r3, r3, #48	; 0x30
   1531c:	str	r0, [sp, #4]
   15320:	ldr	r8, [r3]
   15324:	beq	153a4 <__assert_fail@plt+0x3f90>
   15328:	ldr	fp, [pc, #248]	; 15428 <__assert_fail@plt+0x4014>
   1532c:	mov	r9, r1
   15330:	mov	sl, #8192	; 0x2000
   15334:	mov	r2, sl
   15338:	add	r1, sp, #8
   1533c:	mov	r0, r9
   15340:	bl	1c980 <__assert_fail@plt+0xb56c>
   15344:	cmp	r0, #0
   15348:	beq	153dc <__assert_fail@plt+0x3fc8>
   1534c:	cmn	r0, #1
   15350:	beq	153e4 <__assert_fail@plt+0x3fd0>
   15354:	ldrd	r2, [r8]
   15358:	ldrb	r7, [fp]
   1535c:	add	r1, sp, #8
   15360:	adds	r2, r2, r0
   15364:	add	r6, r1, r0
   15368:	adc	r3, r3, #0
   1536c:	mov	r0, r1
   15370:	strd	r2, [r8]
   15374:	sub	r2, r6, r0
   15378:	mov	r1, r7
   1537c:	bl	11330 <memchr@plt>
   15380:	cmp	r0, #0
   15384:	beq	15334 <__assert_fail@plt+0x3f20>
   15388:	subs	r4, r4, #1
   1538c:	sbc	r5, r5, #0
   15390:	orrs	r3, r4, r5
   15394:	add	r0, r0, #1
   15398:	bne	15374 <__assert_fail@plt+0x3f60>
   1539c:	cmp	r6, r0
   153a0:	bhi	153b4 <__assert_fail@plt+0x3fa0>
   153a4:	mov	r0, #0
   153a8:	add	sp, sp, #8192	; 0x2000
   153ac:	add	sp, sp, #12
   153b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153b4:	subs	r6, r6, r0
   153b8:	beq	153a4 <__assert_fail@plt+0x3f90>
   153bc:	ldr	r3, [pc, #104]	; 1542c <__assert_fail@plt+0x4018>
   153c0:	mov	r2, r6
   153c4:	mov	r1, #1
   153c8:	ldr	r3, [r3]
   153cc:	bl	11150 <fwrite_unlocked@plt>
   153d0:	cmp	r6, r0
   153d4:	bls	153a4 <__assert_fail@plt+0x3f90>
   153d8:	bl	11420 <__assert_fail@plt+0xc>
   153dc:	mvn	r0, #0
   153e0:	b	153a8 <__assert_fail@plt+0x3f94>
   153e4:	bl	112dc <__errno_location@plt>
   153e8:	mov	r2, #5
   153ec:	ldr	r1, [pc, #60]	; 15430 <__assert_fail@plt+0x401c>
   153f0:	ldr	r4, [r0]
   153f4:	mov	r0, #0
   153f8:	bl	11174 <dcgettext@plt>
   153fc:	ldr	r1, [sp, #4]
   15400:	mov	r5, r0
   15404:	mov	r0, #4
   15408:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   1540c:	mov	r2, r5
   15410:	mov	r1, r4
   15414:	mov	r3, r0
   15418:	mov	r0, #0
   1541c:	bl	1121c <error@plt>
   15420:	mov	r0, #1
   15424:	b	153a8 <__assert_fail@plt+0x3f94>
   15428:	ldrdeq	r2, [r3], -r0
   1542c:	andeq	r2, r3, r4, asr #3
   15430:	andeq	pc, r1, r4, lsr #22
   15434:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15438:	mov	r4, r0
   1543c:	ldr	r5, [r0]
   15440:	sub	sp, sp, #140	; 0x8c
   15444:	mov	r0, r5
   15448:	mov	r6, r1
   1544c:	ldr	r1, [pc, #2140]	; 15cb0 <__assert_fail@plt+0x489c>
   15450:	bl	110cc <strcmp@plt>
   15454:	ldr	r8, [r4, #52]	; 0x34
   15458:	ldrb	r9, [r4, #46]	; 0x2e
   1545c:	subs	r7, r0, #0
   15460:	moveq	r3, r8
   15464:	moveq	r5, r7
   15468:	beq	15488 <__assert_fail@plt+0x4074>
   1546c:	cmp	r6, #0
   15470:	mov	r0, r5
   15474:	moveq	r1, #2048	; 0x800
   15478:	movne	r1, #0
   1547c:	bl	16ee4 <__assert_fail@plt+0x5ad0>
   15480:	ldr	r3, [r4, #52]	; 0x34
   15484:	mov	r5, r0
   15488:	ldr	r2, [r4, #48]	; 0x30
   1548c:	clz	r3, r3
   15490:	cmn	r2, #1
   15494:	movne	r2, #0
   15498:	moveq	r2, #1
   1549c:	lsr	r3, r3, #5
   154a0:	cmp	r2, r3
   154a4:	beq	15c88 <__assert_fail@plt+0x4874>
   154a8:	ldr	sl, [pc, #2052]	; 15cb4 <__assert_fail@plt+0x48a0>
   154ac:	adds	r3, r5, #1
   154b0:	movne	r3, #1
   154b4:	ldrb	fp, [sl, #1]
   154b8:	ldrb	r2, [sl, #2]
   154bc:	eor	r1, fp, #1
   154c0:	orr	r3, r3, r1
   154c4:	cmp	r2, #0
   154c8:	strb	r3, [r4, #46]	; 0x2e
   154cc:	beq	15704 <__assert_fail@plt+0x42f0>
   154d0:	cmn	r5, #1
   154d4:	beq	155bc <__assert_fail@plt+0x41a8>
   154d8:	add	r2, sp, #32
   154dc:	mov	r1, r5
   154e0:	mov	r0, #3
   154e4:	bl	111c8 <__fxstat64@plt>
   154e8:	cmp	r0, #0
   154ec:	blt	155bc <__assert_fail@plt+0x41a8>
   154f0:	ldr	r2, [sp, #48]	; 0x30
   154f4:	and	r3, r2, #61440	; 0xf000
   154f8:	sub	r3, r3, #4096	; 0x1000
   154fc:	bic	r3, r3, #4096	; 0x1000
   15500:	and	r2, r2, #45056	; 0xb000
   15504:	cmp	r3, #0
   15508:	cmpne	r2, #32768	; 0x8000
   1550c:	movne	r3, #1
   15510:	moveq	r3, #0
   15514:	beq	15798 <__assert_fail@plt+0x4384>
   15518:	mvn	r1, #0
   1551c:	mov	r2, #0
   15520:	cmp	fp, #0
   15524:	str	r1, [r4, #52]	; 0x34
   15528:	strb	r2, [r4, #46]	; 0x2e
   1552c:	bne	15b68 <__assert_fail@plt+0x4754>
   15530:	adds	r8, r8, #1
   15534:	movne	r8, #1
   15538:	orrs	r2, r9, r8
   1553c:	strb	r3, [r4, #44]	; 0x2c
   15540:	beq	155dc <__assert_fail@plt+0x41c8>
   15544:	mov	r2, #5
   15548:	ldr	r1, [pc, #1896]	; 15cb8 <__assert_fail@plt+0x48a4>
   1554c:	mov	r0, #0
   15550:	bl	11174 <dcgettext@plt>
   15554:	ldr	r6, [r4]
   15558:	ldr	r1, [pc, #1872]	; 15cb0 <__assert_fail@plt+0x489c>
   1555c:	mov	r7, r0
   15560:	mov	r0, r6
   15564:	bl	110cc <strcmp@plt>
   15568:	cmp	r0, #0
   1556c:	movne	r1, r6
   15570:	bne	15584 <__assert_fail@plt+0x4170>
   15574:	ldr	r1, [pc, #1856]	; 15cbc <__assert_fail@plt+0x48a8>
   15578:	mov	r2, #5
   1557c:	bl	11174 <dcgettext@plt>
   15580:	mov	r1, r0
   15584:	mov	r0, #4
   15588:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   1558c:	ldrb	r3, [r4, #44]	; 0x2c
   15590:	cmp	r3, #0
   15594:	mov	r6, r0
   15598:	ldreq	r0, [pc, #1824]	; 15cc0 <__assert_fail@plt+0x48ac>
   1559c:	bne	15c74 <__assert_fail@plt+0x4860>
   155a0:	mov	r1, #0
   155a4:	str	r0, [sp]
   155a8:	mov	r3, r6
   155ac:	mov	r2, r7
   155b0:	mov	r0, r1
   155b4:	bl	1121c <error@plt>
   155b8:	b	155dc <__assert_fail@plt+0x41c8>
   155bc:	bl	112dc <__errno_location@plt>
   155c0:	ldrb	r3, [r4, #46]	; 0x2e
   155c4:	cmp	r3, #0
   155c8:	ldr	r6, [r0]
   155cc:	str	r6, [r4, #52]	; 0x34
   155d0:	bne	156a8 <__assert_fail@plt+0x4294>
   155d4:	cmp	r9, #0
   155d8:	bne	15ba4 <__assert_fail@plt+0x4790>
   155dc:	ldr	r6, [r4]
   155e0:	ldr	r1, [pc, #1736]	; 15cb0 <__assert_fail@plt+0x489c>
   155e4:	mov	r0, r6
   155e8:	bl	110cc <strcmp@plt>
   155ec:	cmp	r0, #0
   155f0:	beq	15b84 <__assert_fail@plt+0x4770>
   155f4:	add	r3, r5, #1
   155f8:	cmp	r3, #1
   155fc:	bls	15b7c <__assert_fail@plt+0x4768>
   15600:	mov	r0, r5
   15604:	bl	113fc <close@plt>
   15608:	cmp	r0, #0
   1560c:	bne	15b24 <__assert_fail@plt+0x4710>
   15610:	ldr	r6, [r4]
   15614:	ldr	r1, [pc, #1684]	; 15cb0 <__assert_fail@plt+0x489c>
   15618:	mov	r0, r6
   1561c:	bl	110cc <strcmp@plt>
   15620:	ldr	r5, [r4, #48]	; 0x30
   15624:	cmp	r0, #0
   15628:	bne	1563c <__assert_fail@plt+0x4228>
   1562c:	mov	r2, #5
   15630:	ldr	r1, [pc, #1668]	; 15cbc <__assert_fail@plt+0x48a8>
   15634:	bl	11174 <dcgettext@plt>
   15638:	mov	r6, r0
   1563c:	add	r3, r5, #1
   15640:	cmp	r3, #1
   15644:	bls	15698 <__assert_fail@plt+0x4284>
   15648:	mov	r0, r5
   1564c:	bl	113fc <close@plt>
   15650:	cmp	r0, #0
   15654:	beq	15698 <__assert_fail@plt+0x4284>
   15658:	bl	112dc <__errno_location@plt>
   1565c:	mov	r2, #5
   15660:	ldr	r1, [pc, #1628]	; 15cc4 <__assert_fail@plt+0x48b0>
   15664:	ldr	r8, [r0]
   15668:	mov	r0, #0
   1566c:	bl	11174 <dcgettext@plt>
   15670:	mov	r1, r6
   15674:	mov	r7, r0
   15678:	mov	r0, #4
   1567c:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   15680:	mov	r1, r8
   15684:	mov	r2, r7
   15688:	str	r5, [sp]
   1568c:	mov	r3, r0
   15690:	mov	r0, #0
   15694:	bl	1121c <error@plt>
   15698:	mvn	r3, #0
   1569c:	str	r3, [r4, #48]	; 0x30
   156a0:	add	sp, sp, #140	; 0x8c
   156a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156a8:	ldr	r6, [r0]
   156ac:	cmp	r8, r6
   156b0:	beq	155dc <__assert_fail@plt+0x41c8>
   156b4:	ldr	r7, [r4]
   156b8:	ldr	r1, [pc, #1520]	; 15cb0 <__assert_fail@plt+0x489c>
   156bc:	mov	r0, r7
   156c0:	bl	110cc <strcmp@plt>
   156c4:	cmp	r0, #0
   156c8:	movne	r2, r7
   156cc:	bne	156e0 <__assert_fail@plt+0x42cc>
   156d0:	mov	r2, #5
   156d4:	ldr	r1, [pc, #1504]	; 15cbc <__assert_fail@plt+0x48a8>
   156d8:	bl	11174 <dcgettext@plt>
   156dc:	mov	r2, r0
   156e0:	mov	r1, #3
   156e4:	mov	r0, #0
   156e8:	bl	1b90c <__assert_fail@plt+0xa4f8>
   156ec:	mov	r1, r6
   156f0:	ldr	r2, [pc, #1488]	; 15cc8 <__assert_fail@plt+0x48b4>
   156f4:	mov	r3, r0
   156f8:	mov	r0, #0
   156fc:	bl	1121c <error@plt>
   15700:	b	155dc <__assert_fail@plt+0x41c8>
   15704:	add	r2, sp, #32
   15708:	ldr	r1, [r4]
   1570c:	mov	r0, #3
   15710:	bl	11408 <__lxstat64@plt>
   15714:	cmp	r0, #0
   15718:	bne	154d0 <__assert_fail@plt+0x40bc>
   1571c:	ldr	r3, [sp, #48]	; 0x30
   15720:	and	r3, r3, #61440	; 0xf000
   15724:	cmp	r3, #40960	; 0xa000
   15728:	bne	154d0 <__assert_fail@plt+0x40bc>
   1572c:	mov	r3, #1
   15730:	mvn	r2, #0
   15734:	str	r2, [r4, #52]	; 0x34
   15738:	strb	r3, [r4, #44]	; 0x2c
   1573c:	mov	r2, #5
   15740:	ldr	r1, [pc, #1412]	; 15ccc <__assert_fail@plt+0x48b8>
   15744:	bl	11174 <dcgettext@plt>
   15748:	ldr	r6, [r4]
   1574c:	ldr	r1, [pc, #1372]	; 15cb0 <__assert_fail@plt+0x489c>
   15750:	mov	r7, r0
   15754:	mov	r0, r6
   15758:	bl	110cc <strcmp@plt>
   1575c:	cmp	r0, #0
   15760:	movne	r1, r6
   15764:	bne	15778 <__assert_fail@plt+0x4364>
   15768:	ldr	r1, [pc, #1356]	; 15cbc <__assert_fail@plt+0x48a8>
   1576c:	mov	r2, #5
   15770:	bl	11174 <dcgettext@plt>
   15774:	mov	r1, r0
   15778:	mov	r0, #4
   1577c:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   15780:	mov	r1, #0
   15784:	mov	r2, r7
   15788:	mov	r3, r0
   1578c:	mov	r0, r1
   15790:	bl	1121c <error@plt>
   15794:	b	155dc <__assert_fail@plt+0x41c8>
   15798:	ldr	r9, [r4]
   1579c:	ldr	r1, [pc, #1292]	; 15cb0 <__assert_fail@plt+0x489c>
   157a0:	mov	r0, r9
   157a4:	bl	110cc <strcmp@plt>
   157a8:	cmp	r0, #0
   157ac:	movne	r1, r9
   157b0:	beq	15b10 <__assert_fail@plt+0x46fc>
   157b4:	mov	r0, r5
   157b8:	bl	1434c <__assert_fail@plt+0x2f38>
   157bc:	cmp	r0, #0
   157c0:	strb	r0, [r4, #45]	; 0x2d
   157c4:	bne	15a60 <__assert_fail@plt+0x464c>
   157c8:	mov	r0, #0
   157cc:	bics	r8, r8, #2
   157d0:	str	r0, [r4, #52]	; 0x34
   157d4:	beq	158e0 <__assert_fail@plt+0x44cc>
   157d8:	ldr	r3, [r4, #48]	; 0x30
   157dc:	cmn	r3, #1
   157e0:	moveq	r2, #5
   157e4:	ldreq	r1, [pc, #1252]	; 15cd0 <__assert_fail@plt+0x48bc>
   157e8:	bne	15c9c <__assert_fail@plt+0x4888>
   157ec:	bl	11174 <dcgettext@plt>
   157f0:	ldr	r8, [r4]
   157f4:	ldr	r1, [pc, #1204]	; 15cb0 <__assert_fail@plt+0x489c>
   157f8:	mov	r9, r0
   157fc:	mov	r0, r8
   15800:	bl	110cc <strcmp@plt>
   15804:	cmp	r0, #0
   15808:	movne	r1, r8
   1580c:	bne	15820 <__assert_fail@plt+0x440c>
   15810:	ldr	r1, [pc, #1188]	; 15cbc <__assert_fail@plt+0x48a8>
   15814:	mov	r2, #5
   15818:	bl	11174 <dcgettext@plt>
   1581c:	mov	r1, r0
   15820:	mov	r0, #4
   15824:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   15828:	mov	r1, #0
   1582c:	mov	r2, r9
   15830:	mov	r3, r0
   15834:	mov	r0, r1
   15838:	bl	1121c <error@plt>
   1583c:	ldrd	r2, [sp, #32]
   15840:	cmp	r7, #0
   15844:	mvneq	r6, #0
   15848:	ldrd	r0, [sp, #128]	; 0x80
   1584c:	strd	r2, [r4, #24]
   15850:	ldr	ip, [sp, #116]	; 0x74
   15854:	str	r6, [r4, #56]	; 0x38
   15858:	mov	r7, #0
   1585c:	mov	r6, #0
   15860:	ldr	lr, [sp, #112]	; 0x70
   15864:	ldr	r2, [sp, #48]	; 0x30
   15868:	ldr	r8, [r4]
   1586c:	mov	r3, #0
   15870:	strd	r0, [r4, #32]
   15874:	str	r5, [r4, #48]	; 0x30
   15878:	strd	r6, [r4, #8]
   1587c:	strd	r6, [r4, #72]	; 0x48
   15880:	str	ip, [r4, #20]
   15884:	str	lr, [r4, #16]
   15888:	str	r2, [r4, #40]	; 0x28
   1588c:	mov	r0, r8
   15890:	strb	r3, [r4, #44]	; 0x2c
   15894:	ldr	r1, [pc, #1044]	; 15cb0 <__assert_fail@plt+0x489c>
   15898:	bl	110cc <strcmp@plt>
   1589c:	cmp	r0, #0
   158a0:	bne	158b4 <__assert_fail@plt+0x44a0>
   158a4:	mov	r2, #5
   158a8:	ldr	r1, [pc, #1036]	; 15cbc <__assert_fail@plt+0x48a8>
   158ac:	bl	11174 <dcgettext@plt>
   158b0:	mov	r8, r0
   158b4:	mov	r4, #0
   158b8:	mov	r3, #0
   158bc:	mov	r0, r5
   158c0:	str	r4, [sp]
   158c4:	mov	r2, #0
   158c8:	bl	111ec <lseek64@plt>
   158cc:	cmp	r0, #0
   158d0:	sbcs	r3, r1, #0
   158d4:	blt	15c04 <__assert_fail@plt+0x47f0>
   158d8:	add	sp, sp, #140	; 0x8c
   158dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158e0:	ldr	r3, [r4, #48]	; 0x30
   158e4:	cmn	r3, #1
   158e8:	beq	15c64 <__assert_fail@plt+0x4850>
   158ec:	ldrd	r0, [r4, #32]
   158f0:	ldrd	r2, [sp, #128]	; 0x80
   158f4:	cmp	r1, r3
   158f8:	cmpeq	r0, r2
   158fc:	beq	159c8 <__assert_fail@plt+0x45b4>
   15900:	mov	r2, #5
   15904:	ldr	r1, [pc, #968]	; 15cd4 <__assert_fail@plt+0x48c0>
   15908:	mov	r0, #0
   1590c:	bl	11174 <dcgettext@plt>
   15910:	ldr	r8, [r4]
   15914:	ldr	r1, [pc, #916]	; 15cb0 <__assert_fail@plt+0x489c>
   15918:	mov	r9, r0
   1591c:	mov	r0, r8
   15920:	bl	110cc <strcmp@plt>
   15924:	cmp	r0, #0
   15928:	movne	r1, r8
   1592c:	beq	15afc <__assert_fail@plt+0x46e8>
   15930:	mov	r0, #4
   15934:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   15938:	mov	r1, #0
   1593c:	mov	r2, r9
   15940:	mov	r3, r0
   15944:	mov	r0, r1
   15948:	bl	1121c <error@plt>
   1594c:	ldr	r8, [r4]
   15950:	ldr	r1, [pc, #856]	; 15cb0 <__assert_fail@plt+0x489c>
   15954:	mov	r0, r8
   15958:	bl	110cc <strcmp@plt>
   1595c:	ldr	r9, [r4, #48]	; 0x30
   15960:	cmp	r0, #0
   15964:	beq	15adc <__assert_fail@plt+0x46c8>
   15968:	add	r3, r9, #1
   1596c:	cmp	r3, #1
   15970:	bls	1583c <__assert_fail@plt+0x4428>
   15974:	mov	r0, r9
   15978:	bl	113fc <close@plt>
   1597c:	cmp	r0, #0
   15980:	beq	1583c <__assert_fail@plt+0x4428>
   15984:	bl	112dc <__errno_location@plt>
   15988:	mov	r2, #5
   1598c:	ldr	r1, [pc, #816]	; 15cc4 <__assert_fail@plt+0x48b0>
   15990:	ldr	fp, [r0]
   15994:	mov	r0, #0
   15998:	bl	11174 <dcgettext@plt>
   1599c:	mov	r1, r8
   159a0:	mov	sl, r0
   159a4:	mov	r0, #4
   159a8:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   159ac:	mov	r1, fp
   159b0:	mov	r2, sl
   159b4:	str	r9, [sp]
   159b8:	mov	r3, r0
   159bc:	mov	r0, #0
   159c0:	bl	1121c <error@plt>
   159c4:	b	1583c <__assert_fail@plt+0x4428>
   159c8:	ldrd	r0, [r4, #24]
   159cc:	ldrd	r2, [sp, #32]
   159d0:	cmp	r1, r3
   159d4:	cmpeq	r0, r2
   159d8:	bne	15900 <__assert_fail@plt+0x44ec>
   159dc:	ldr	r4, [r4]
   159e0:	ldr	r1, [pc, #712]	; 15cb0 <__assert_fail@plt+0x489c>
   159e4:	mov	r0, r4
   159e8:	bl	110cc <strcmp@plt>
   159ec:	cmp	r0, #0
   159f0:	bne	15a04 <__assert_fail@plt+0x45f0>
   159f4:	mov	r2, #5
   159f8:	ldr	r1, [pc, #700]	; 15cbc <__assert_fail@plt+0x48a8>
   159fc:	bl	11174 <dcgettext@plt>
   15a00:	mov	r4, r0
   15a04:	cmp	r5, #0
   15a08:	beq	158d8 <__assert_fail@plt+0x44c4>
   15a0c:	mov	r0, r5
   15a10:	bl	113fc <close@plt>
   15a14:	cmp	r0, #0
   15a18:	beq	158d8 <__assert_fail@plt+0x44c4>
   15a1c:	bl	112dc <__errno_location@plt>
   15a20:	mov	r2, #5
   15a24:	ldr	r1, [pc, #664]	; 15cc4 <__assert_fail@plt+0x48b0>
   15a28:	ldr	r7, [r0]
   15a2c:	mov	r0, #0
   15a30:	bl	11174 <dcgettext@plt>
   15a34:	mov	r1, r4
   15a38:	mov	r6, r0
   15a3c:	mov	r0, #4
   15a40:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   15a44:	mov	r1, r7
   15a48:	mov	r2, r6
   15a4c:	str	r5, [sp]
   15a50:	mov	r3, r0
   15a54:	mov	r0, #0
   15a58:	bl	1121c <error@plt>
   15a5c:	b	158d8 <__assert_fail@plt+0x44c4>
   15a60:	ldrb	r0, [sl, #2]
   15a64:	cmp	r0, #0
   15a68:	bne	157c8 <__assert_fail@plt+0x43b4>
   15a6c:	mvn	r3, #0
   15a70:	str	r3, [r4, #52]	; 0x34
   15a74:	mov	r2, #5
   15a78:	ldr	r1, [pc, #600]	; 15cd8 <__assert_fail@plt+0x48c4>
   15a7c:	bl	11174 <dcgettext@plt>
   15a80:	ldr	r6, [r4]
   15a84:	ldr	r1, [pc, #548]	; 15cb0 <__assert_fail@plt+0x489c>
   15a88:	mov	r7, r0
   15a8c:	mov	r0, r6
   15a90:	bl	110cc <strcmp@plt>
   15a94:	cmp	r0, #0
   15a98:	movne	r1, r6
   15a9c:	bne	15ab0 <__assert_fail@plt+0x469c>
   15aa0:	ldr	r1, [pc, #532]	; 15cbc <__assert_fail@plt+0x48a8>
   15aa4:	mov	r2, #5
   15aa8:	bl	11174 <dcgettext@plt>
   15aac:	mov	r1, r0
   15ab0:	mov	r0, #4
   15ab4:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   15ab8:	mov	r1, #0
   15abc:	mov	r2, r7
   15ac0:	mov	r3, r0
   15ac4:	mov	r0, r1
   15ac8:	bl	1121c <error@plt>
   15acc:	mov	r3, #1
   15ad0:	strb	r3, [r4, #44]	; 0x2c
   15ad4:	strb	r3, [r4, #45]	; 0x2d
   15ad8:	b	155dc <__assert_fail@plt+0x41c8>
   15adc:	mov	r2, #5
   15ae0:	ldr	r1, [pc, #468]	; 15cbc <__assert_fail@plt+0x48a8>
   15ae4:	bl	11174 <dcgettext@plt>
   15ae8:	add	r3, r9, #1
   15aec:	cmp	r3, #1
   15af0:	mov	r8, r0
   15af4:	bhi	15974 <__assert_fail@plt+0x4560>
   15af8:	b	1583c <__assert_fail@plt+0x4428>
   15afc:	ldr	r1, [pc, #440]	; 15cbc <__assert_fail@plt+0x48a8>
   15b00:	mov	r2, #5
   15b04:	bl	11174 <dcgettext@plt>
   15b08:	mov	r1, r0
   15b0c:	b	15930 <__assert_fail@plt+0x451c>
   15b10:	ldr	r1, [pc, #420]	; 15cbc <__assert_fail@plt+0x48a8>
   15b14:	mov	r2, #5
   15b18:	bl	11174 <dcgettext@plt>
   15b1c:	mov	r1, r0
   15b20:	b	157b4 <__assert_fail@plt+0x43a0>
   15b24:	bl	112dc <__errno_location@plt>
   15b28:	mov	r2, #5
   15b2c:	ldr	r1, [pc, #400]	; 15cc4 <__assert_fail@plt+0x48b0>
   15b30:	ldr	r8, [r0]
   15b34:	mov	r0, #0
   15b38:	bl	11174 <dcgettext@plt>
   15b3c:	mov	r1, r6
   15b40:	mov	r7, r0
   15b44:	mov	r0, #4
   15b48:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   15b4c:	mov	r1, r8
   15b50:	mov	r2, r7
   15b54:	str	r5, [sp]
   15b58:	mov	r3, r0
   15b5c:	mov	r0, #0
   15b60:	bl	1121c <error@plt>
   15b64:	b	15610 <__assert_fail@plt+0x41fc>
   15b68:	ldr	r3, [pc, #364]	; 15cdc <__assert_fail@plt+0x48c8>
   15b6c:	ldr	r3, [r3, #4]
   15b70:	subs	r3, r3, #1
   15b74:	movne	r3, #1
   15b78:	b	15530 <__assert_fail@plt+0x411c>
   15b7c:	ldr	r5, [r4, #48]	; 0x30
   15b80:	b	1563c <__assert_fail@plt+0x4228>
   15b84:	mov	r2, #5
   15b88:	ldr	r1, [pc, #300]	; 15cbc <__assert_fail@plt+0x48a8>
   15b8c:	bl	11174 <dcgettext@plt>
   15b90:	add	r3, r5, #1
   15b94:	cmp	r3, #1
   15b98:	mov	r6, r0
   15b9c:	bhi	15600 <__assert_fail@plt+0x41ec>
   15ba0:	b	15610 <__assert_fail@plt+0x41fc>
   15ba4:	mov	r0, r3
   15ba8:	mov	r2, #5
   15bac:	ldr	r1, [pc, #300]	; 15ce0 <__assert_fail@plt+0x48cc>
   15bb0:	bl	11174 <dcgettext@plt>
   15bb4:	ldr	r7, [r4]
   15bb8:	ldr	r1, [pc, #240]	; 15cb0 <__assert_fail@plt+0x489c>
   15bbc:	mov	r8, r0
   15bc0:	mov	r0, r7
   15bc4:	bl	110cc <strcmp@plt>
   15bc8:	cmp	r0, #0
   15bcc:	movne	r1, r7
   15bd0:	bne	15be4 <__assert_fail@plt+0x47d0>
   15bd4:	ldr	r1, [pc, #224]	; 15cbc <__assert_fail@plt+0x48a8>
   15bd8:	mov	r2, #5
   15bdc:	bl	11174 <dcgettext@plt>
   15be0:	mov	r1, r0
   15be4:	mov	r0, #4
   15be8:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   15bec:	mov	r2, r8
   15bf0:	mov	r1, r6
   15bf4:	mov	r3, r0
   15bf8:	mov	r0, #0
   15bfc:	bl	1121c <error@plt>
   15c00:	b	155dc <__assert_fail@plt+0x41c8>
   15c04:	add	r2, sp, #8
   15c08:	mov	r1, #0
   15c0c:	mov	r0, #0
   15c10:	bl	18804 <__assert_fail@plt+0x73f0>
   15c14:	mov	r7, r0
   15c18:	bl	112dc <__errno_location@plt>
   15c1c:	mov	r2, #5
   15c20:	ldr	r1, [pc, #188]	; 15ce4 <__assert_fail@plt+0x48d0>
   15c24:	ldr	r6, [r0]
   15c28:	mov	r0, r4
   15c2c:	bl	11174 <dcgettext@plt>
   15c30:	mov	r2, r8
   15c34:	mov	r1, #3
   15c38:	mov	r5, r0
   15c3c:	mov	r0, r4
   15c40:	bl	1b90c <__assert_fail@plt+0xa4f8>
   15c44:	str	r7, [sp]
   15c48:	mov	r1, r6
   15c4c:	mov	r2, r5
   15c50:	mov	r3, r0
   15c54:	mov	r0, r4
   15c58:	bl	1121c <error@plt>
   15c5c:	mov	r0, #1
   15c60:	bl	11294 <exit@plt>
   15c64:	mov	r0, r8
   15c68:	mov	r2, #5
   15c6c:	ldr	r1, [pc, #116]	; 15ce8 <__assert_fail@plt+0x48d4>
   15c70:	b	157ec <__assert_fail@plt+0x43d8>
   15c74:	mov	r2, #5
   15c78:	ldr	r1, [pc, #108]	; 15cec <__assert_fail@plt+0x48d8>
   15c7c:	mov	r0, #0
   15c80:	bl	11174 <dcgettext@plt>
   15c84:	b	155a0 <__assert_fail@plt+0x418c>
   15c88:	ldr	r3, [pc, #96]	; 15cf0 <__assert_fail@plt+0x48dc>
   15c8c:	ldr	r2, [pc, #96]	; 15cf4 <__assert_fail@plt+0x48e0>
   15c90:	ldr	r1, [pc, #96]	; 15cf8 <__assert_fail@plt+0x48e4>
   15c94:	ldr	r0, [pc, #96]	; 15cfc <__assert_fail@plt+0x48e8>
   15c98:	bl	11414 <__assert_fail@plt>
   15c9c:	ldr	r3, [pc, #76]	; 15cf0 <__assert_fail@plt+0x48dc>
   15ca0:	ldr	r2, [pc, #88]	; 15d00 <__assert_fail@plt+0x48ec>
   15ca4:	ldr	r1, [pc, #76]	; 15cf8 <__assert_fail@plt+0x48e4>
   15ca8:	ldr	r0, [pc, #84]	; 15d04 <__assert_fail@plt+0x48f0>
   15cac:	bl	11414 <__assert_fail@plt>
   15cb0:			; <UNDEFINED> instruction: 0x0001fab4
   15cb4:	ldrdeq	r2, [r3], -r0
   15cb8:	ldrdeq	pc, [r1], -ip
   15cbc:			; <UNDEFINED> instruction: 0x0001fab8
   15cc0:			; <UNDEFINED> instruction: 0x000205b4
   15cc4:	andeq	pc, r1, ip, asr ip	; <UNPREDICTABLE>
   15cc8:	muleq	r2, r4, r8
   15ccc:	andeq	pc, r1, r8, lsl #23
   15cd0:	andeq	pc, r1, ip, ror ip	; <UNPREDICTABLE>
   15cd4:	andeq	pc, r1, r0, asr #25
   15cd8:	andeq	pc, r1, r8, lsr #24
   15cdc:	andeq	r2, r3, r8, asr #2
   15ce0:	andeq	pc, r1, r0, asr #23
   15ce4:	andeq	pc, r1, r8, asr #22
   15ce8:	muleq	r1, r8, ip
   15cec:	andeq	pc, r1, ip, lsl #24
   15cf0:	andeq	pc, r1, r0, ror #18
   15cf4:	andeq	r0, r0, r2, ror #7
   15cf8:	andeq	pc, r1, r8, ror #22
   15cfc:	andeq	pc, r1, r4, ror fp	; <UNPREDICTABLE>
   15d00:	andeq	r0, r0, pc, lsr #8
   15d04:	andeq	pc, r1, r0, ror ip	; <UNPREDICTABLE>
   15d08:	push	{r4, r5, r6, r7, r8, r9, lr}
   15d0c:	sub	sp, sp, #140	; 0x8c
   15d10:	ldr	r5, [r0, #48]	; 0x30
   15d14:	cmn	r5, #1
   15d18:	beq	15da4 <__assert_fail@plt+0x4990>
   15d1c:	ldr	r6, [r0]
   15d20:	mov	r7, r1
   15d24:	mov	r4, r0
   15d28:	ldr	r1, [pc, #640]	; 15fb0 <__assert_fail@plt+0x4b9c>
   15d2c:	mov	r0, r6
   15d30:	bl	110cc <strcmp@plt>
   15d34:	cmp	r0, #0
   15d38:	beq	15dac <__assert_fail@plt+0x4998>
   15d3c:	mov	r1, r5
   15d40:	add	r2, sp, #32
   15d44:	mov	r0, #3
   15d48:	bl	111c8 <__fxstat64@plt>
   15d4c:	subs	r5, r0, #0
   15d50:	bne	15dc4 <__assert_fail@plt+0x49b0>
   15d54:	ldr	r3, [r4, #40]	; 0x28
   15d58:	and	r3, r3, #61440	; 0xf000
   15d5c:	cmp	r3, #32768	; 0x8000
   15d60:	beq	15e80 <__assert_fail@plt+0x4a6c>
   15d64:	ldr	r3, [pc, #584]	; 15fb4 <__assert_fail@plt+0x4ba0>
   15d68:	ldrb	r0, [r3, #3]
   15d6c:	cmp	r0, #0
   15d70:	beq	15d80 <__assert_fail@plt+0x496c>
   15d74:	ldr	r0, [r7]
   15d78:	subs	r0, r0, r4
   15d7c:	movne	r0, #1
   15d80:	ldr	r2, [r4, #48]	; 0x30
   15d84:	mov	r1, r6
   15d88:	bl	14c7c <__assert_fail@plt+0x3868>
   15d8c:	ldrd	r2, [r4, #8]
   15d90:	adds	r2, r2, r0
   15d94:	adc	r3, r3, r1
   15d98:	orrs	r1, r0, r1
   15d9c:	strd	r2, [r4, #8]
   15da0:	bne	15e40 <__assert_fail@plt+0x4a2c>
   15da4:	add	sp, sp, #140	; 0x8c
   15da8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15dac:	mov	r2, #5
   15db0:	ldr	r1, [pc, #512]	; 15fb8 <__assert_fail@plt+0x4ba4>
   15db4:	bl	11174 <dcgettext@plt>
   15db8:	ldr	r5, [r4, #48]	; 0x30
   15dbc:	mov	r6, r0
   15dc0:	b	15d3c <__assert_fail@plt+0x4928>
   15dc4:	bl	112dc <__errno_location@plt>
   15dc8:	ldr	r5, [r4, #48]	; 0x30
   15dcc:	add	r2, r5, #1
   15dd0:	cmp	r2, #1
   15dd4:	ldr	r3, [r0]
   15dd8:	mov	r7, r0
   15ddc:	str	r3, [r4, #52]	; 0x34
   15de0:	bls	15e30 <__assert_fail@plt+0x4a1c>
   15de4:	mov	r0, r5
   15de8:	bl	113fc <close@plt>
   15dec:	cmp	r0, #0
   15df0:	beq	15e30 <__assert_fail@plt+0x4a1c>
   15df4:	mov	r2, #5
   15df8:	ldr	r1, [pc, #444]	; 15fbc <__assert_fail@plt+0x4ba8>
   15dfc:	mov	r0, #0
   15e00:	ldr	r7, [r7]
   15e04:	bl	11174 <dcgettext@plt>
   15e08:	mov	r1, r6
   15e0c:	mov	r8, r0
   15e10:	mov	r0, #4
   15e14:	bl	1ae90 <__assert_fail@plt+0x9a7c>
   15e18:	mov	r2, r8
   15e1c:	mov	r1, r7
   15e20:	str	r5, [sp]
   15e24:	mov	r3, r0
   15e28:	mov	r0, #0
   15e2c:	bl	1121c <error@plt>
   15e30:	mvn	r3, #0
   15e34:	str	r3, [r4, #48]	; 0x30
   15e38:	add	sp, sp, #140	; 0x8c
   15e3c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15e40:	ldr	r3, [pc, #376]	; 15fc0 <__assert_fail@plt+0x4bac>
   15e44:	str	r4, [r7]
   15e48:	ldr	r0, [r3]
   15e4c:	bl	111a4 <fflush_unlocked@plt>
   15e50:	cmp	r0, #0
   15e54:	beq	15da4 <__assert_fail@plt+0x4990>
   15e58:	bl	112dc <__errno_location@plt>
   15e5c:	mov	r2, #5
   15e60:	ldr	r1, [pc, #348]	; 15fc4 <__assert_fail@plt+0x4bb0>
   15e64:	ldr	r4, [r0]
   15e68:	mov	r0, #0
   15e6c:	bl	11174 <dcgettext@plt>
   15e70:	mov	r1, r4
   15e74:	mov	r2, r0
   15e78:	mov	r0, #1
   15e7c:	bl	1121c <error@plt>
   15e80:	ldrd	r8, [sp, #80]	; 0x50
   15e84:	ldrd	r2, [r4, #8]
   15e88:	cmp	r8, r2
   15e8c:	sbcs	r1, r9, r3
   15e90:	blt	15ef0 <__assert_fail@plt+0x4adc>
   15e94:	cmp	r9, r3
   15e98:	cmpeq	r8, r2
   15e9c:	bne	15d64 <__assert_fail@plt+0x4950>
   15ea0:	ldr	r3, [r4, #16]
   15ea4:	ldr	ip, [sp, #112]	; 0x70
   15ea8:	ldr	r0, [sp, #116]	; 0x74
   15eac:	cmp	ip, r3
   15eb0:	ldr	r1, [r4, #20]
   15eb4:	movle	r2, #0
   15eb8:	movgt	r2, #1
   15ebc:	cmp	ip, r3
   15ec0:	rsbge	r2, r2, #0
   15ec4:	rsblt	r2, r2, #1
   15ec8:	cmp	r0, r1
   15ecc:	movle	r3, #0
   15ed0:	movgt	r3, #1
   15ed4:	cmp	r0, r1
   15ed8:	rsbge	r3, r3, #0
   15edc:	rsblt	r3, r3, #1
   15ee0:	add	r3, r3, r2, lsl #1
   15ee4:	cmp	r3, #0
   15ee8:	beq	15da4 <__assert_fail@plt+0x4990>
   15eec:	b	15d64 <__assert_fail@plt+0x4950>
   15ef0:	mov	r2, #5
   15ef4:	ldr	r1, [pc, #204]	; 15fc8 <__assert_fail@plt+0x4bb4>
   15ef8:	bl	11174 <dcgettext@plt>
   15efc:	mov	r2, r6
   15f00:	mov	r1, #3
   15f04:	mov	r8, r0
   15f08:	mov	r0, r5
   15f0c:	bl	1b90c <__assert_fail@plt+0xa4f8>
   15f10:	mov	r2, r8
   15f14:	mov	r1, r5
   15f18:	mov	r3, r0
   15f1c:	mov	r0, r5
   15f20:	bl	1121c <error@plt>
   15f24:	ldr	r0, [r4, #48]	; 0x30
   15f28:	mov	r3, #0
   15f2c:	str	r5, [sp]
   15f30:	mov	r2, #0
   15f34:	bl	111ec <lseek64@plt>
   15f38:	cmp	r0, #0
   15f3c:	sbcs	r3, r1, #0
   15f40:	movge	r2, #0
   15f44:	movge	r3, #0
   15f48:	strdge	r2, [r4, #8]
   15f4c:	bge	15d64 <__assert_fail@plt+0x4950>
   15f50:	add	r2, sp, #8
   15f54:	mov	r1, #0
   15f58:	mov	r0, #0
   15f5c:	bl	18804 <__assert_fail@plt+0x73f0>
   15f60:	mov	r8, r0
   15f64:	bl	112dc <__errno_location@plt>
   15f68:	mov	r2, #5
   15f6c:	ldr	r1, [pc, #88]	; 15fcc <__assert_fail@plt+0x4bb8>
   15f70:	ldr	r7, [r0]
   15f74:	mov	r0, r5
   15f78:	bl	11174 <dcgettext@plt>
   15f7c:	mov	r2, r6
   15f80:	mov	r1, #3
   15f84:	mov	r4, r0
   15f88:	mov	r0, r5
   15f8c:	bl	1b90c <__assert_fail@plt+0xa4f8>
   15f90:	str	r8, [sp]
   15f94:	mov	r1, r7
   15f98:	mov	r2, r4
   15f9c:	mov	r3, r0
   15fa0:	mov	r0, r5
   15fa4:	bl	1121c <error@plt>
   15fa8:	mov	r0, #1
   15fac:	bl	11294 <exit@plt>
   15fb0:			; <UNDEFINED> instruction: 0x0001fab4
   15fb4:	ldrdeq	r2, [r3], -r0
   15fb8:			; <UNDEFINED> instruction: 0x0001fab8
   15fbc:	andeq	pc, r1, ip, asr ip	; <UNPREDICTABLE>
   15fc0:	andeq	r2, r3, r4, asr #3
   15fc4:	andeq	pc, r1, r0, lsl #26
   15fc8:	andeq	pc, r1, ip, ror #25
   15fcc:	andeq	pc, r1, r8, asr #22
   15fd0:	subs	r5, r0, #0
   15fd4:	push	{r7, lr}
   15fd8:	sub	sp, sp, #56	; 0x38
   15fdc:	beq	16018 <__assert_fail@plt+0x4c04>
   15fe0:	ldr	r3, [pc, #872]	; 16350 <__assert_fail@plt+0x4f3c>
   15fe4:	mov	r2, #5
   15fe8:	ldr	r1, [pc, #868]	; 16354 <__assert_fail@plt+0x4f40>
   15fec:	mov	r0, #0
   15ff0:	ldr	r4, [r3]
   15ff4:	bl	11174 <dcgettext@plt>
   15ff8:	ldr	r3, [pc, #856]	; 16358 <__assert_fail@plt+0x4f44>
   15ffc:	mov	r1, #1
   16000:	ldr	r3, [r3]
   16004:	mov	r2, r0
   16008:	mov	r0, r4
   1600c:	bl	11324 <__fprintf_chk@plt>
   16010:	mov	r0, r5
   16014:	bl	11294 <exit@plt>
   16018:	mov	r2, #5
   1601c:	ldr	r1, [pc, #824]	; 1635c <__assert_fail@plt+0x4f48>
   16020:	bl	11174 <dcgettext@plt>
   16024:	ldr	r3, [pc, #812]	; 16358 <__assert_fail@plt+0x4f44>
   16028:	ldr	r6, [pc, #816]	; 16360 <__assert_fail@plt+0x4f4c>
   1602c:	ldr	r4, [pc, #816]	; 16364 <__assert_fail@plt+0x4f50>
   16030:	ldr	r2, [r3]
   16034:	mov	r1, r0
   16038:	mov	r0, #1
   1603c:	bl	11300 <__printf_chk@plt>
   16040:	mov	r2, #5
   16044:	ldr	r1, [pc, #796]	; 16368 <__assert_fail@plt+0x4f54>
   16048:	mov	r0, r5
   1604c:	bl	11174 <dcgettext@plt>
   16050:	mov	r2, #10
   16054:	mov	r1, r0
   16058:	mov	r0, #1
   1605c:	bl	11300 <__printf_chk@plt>
   16060:	mov	r2, #5
   16064:	ldr	r1, [pc, #768]	; 1636c <__assert_fail@plt+0x4f58>
   16068:	mov	r0, r5
   1606c:	bl	11174 <dcgettext@plt>
   16070:	ldr	r1, [r6]
   16074:	bl	110b4 <fputs_unlocked@plt>
   16078:	mov	r2, #5
   1607c:	ldr	r1, [pc, #748]	; 16370 <__assert_fail@plt+0x4f5c>
   16080:	mov	r0, r5
   16084:	bl	11174 <dcgettext@plt>
   16088:	ldr	r1, [r6]
   1608c:	bl	110b4 <fputs_unlocked@plt>
   16090:	mov	r2, #5
   16094:	ldr	r1, [pc, #728]	; 16374 <__assert_fail@plt+0x4f60>
   16098:	mov	r0, r5
   1609c:	bl	11174 <dcgettext@plt>
   160a0:	ldr	r1, [r6]
   160a4:	bl	110b4 <fputs_unlocked@plt>
   160a8:	mov	r2, #5
   160ac:	ldr	r1, [pc, #708]	; 16378 <__assert_fail@plt+0x4f64>
   160b0:	mov	r0, r5
   160b4:	bl	11174 <dcgettext@plt>
   160b8:	ldr	r1, [r6]
   160bc:	bl	110b4 <fputs_unlocked@plt>
   160c0:	mov	r2, #5
   160c4:	ldr	r1, [pc, #688]	; 1637c <__assert_fail@plt+0x4f68>
   160c8:	mov	r0, r5
   160cc:	bl	11174 <dcgettext@plt>
   160d0:	mov	r3, #5
   160d4:	mov	r2, #10
   160d8:	mov	r1, r0
   160dc:	mov	r0, #1
   160e0:	bl	11300 <__printf_chk@plt>
   160e4:	mov	r2, #5
   160e8:	ldr	r1, [pc, #656]	; 16380 <__assert_fail@plt+0x4f6c>
   160ec:	mov	r0, r5
   160f0:	bl	11174 <dcgettext@plt>
   160f4:	ldr	r1, [r6]
   160f8:	bl	110b4 <fputs_unlocked@plt>
   160fc:	mov	r2, #5
   16100:	ldr	r1, [pc, #636]	; 16384 <__assert_fail@plt+0x4f70>
   16104:	mov	r0, r5
   16108:	bl	11174 <dcgettext@plt>
   1610c:	ldr	r1, [r6]
   16110:	bl	110b4 <fputs_unlocked@plt>
   16114:	mov	r2, #5
   16118:	ldr	r1, [pc, #616]	; 16388 <__assert_fail@plt+0x4f74>
   1611c:	mov	r0, r5
   16120:	bl	11174 <dcgettext@plt>
   16124:	ldr	r1, [r6]
   16128:	bl	110b4 <fputs_unlocked@plt>
   1612c:	mov	r2, #5
   16130:	ldr	r1, [pc, #596]	; 1638c <__assert_fail@plt+0x4f78>
   16134:	mov	r0, r5
   16138:	bl	11174 <dcgettext@plt>
   1613c:	ldr	r1, [r6]
   16140:	bl	110b4 <fputs_unlocked@plt>
   16144:	mov	r2, #5
   16148:	ldr	r1, [pc, #576]	; 16390 <__assert_fail@plt+0x4f7c>
   1614c:	mov	r0, r5
   16150:	bl	11174 <dcgettext@plt>
   16154:	ldr	r1, [r6]
   16158:	bl	110b4 <fputs_unlocked@plt>
   1615c:	mov	r2, #5
   16160:	ldr	r1, [pc, #556]	; 16394 <__assert_fail@plt+0x4f80>
   16164:	mov	r0, r5
   16168:	bl	11174 <dcgettext@plt>
   1616c:	ldr	r1, [r6]
   16170:	bl	110b4 <fputs_unlocked@plt>
   16174:	mov	r2, #5
   16178:	ldr	r1, [pc, #536]	; 16398 <__assert_fail@plt+0x4f84>
   1617c:	mov	r0, r5
   16180:	bl	11174 <dcgettext@plt>
   16184:	ldr	r1, [r6]
   16188:	bl	110b4 <fputs_unlocked@plt>
   1618c:	ldm	r4!, {r0, r1, r2, r3}
   16190:	mov	lr, sp
   16194:	stmia	lr!, {r0, r1, r2, r3}
   16198:	ldm	r4!, {r0, r1, r2, r3}
   1619c:	ldr	ip, [sp]
   161a0:	stmia	lr!, {r0, r1, r2, r3}
   161a4:	cmp	ip, #0
   161a8:	ldm	r4!, {r0, r1, r2, r3}
   161ac:	stmia	lr!, {r0, r1, r2, r3}
   161b0:	ldm	r4, {r0, r1}
   161b4:	moveq	r4, sp
   161b8:	stm	lr, {r0, r1}
   161bc:	beq	161ec <__assert_fail@plt+0x4dd8>
   161c0:	ldr	r7, [pc, #468]	; 1639c <__assert_fail@plt+0x4f88>
   161c4:	mov	r4, sp
   161c8:	b	161d8 <__assert_fail@plt+0x4dc4>
   161cc:	ldr	ip, [r4, #8]!
   161d0:	cmp	ip, #0
   161d4:	beq	161ec <__assert_fail@plt+0x4dd8>
   161d8:	mov	r1, ip
   161dc:	mov	r0, r7
   161e0:	bl	110cc <strcmp@plt>
   161e4:	cmp	r0, #0
   161e8:	bne	161cc <__assert_fail@plt+0x4db8>
   161ec:	ldr	r4, [r4, #4]
   161f0:	mov	r2, #5
   161f4:	cmp	r4, #0
   161f8:	ldr	r1, [pc, #416]	; 163a0 <__assert_fail@plt+0x4f8c>
   161fc:	beq	162a4 <__assert_fail@plt+0x4e90>
   16200:	mov	r0, #0
   16204:	bl	11174 <dcgettext@plt>
   16208:	ldr	r3, [pc, #404]	; 163a4 <__assert_fail@plt+0x4f90>
   1620c:	ldr	r2, [pc, #404]	; 163a8 <__assert_fail@plt+0x4f94>
   16210:	mov	r1, r0
   16214:	mov	r0, #1
   16218:	bl	11300 <__printf_chk@plt>
   1621c:	mov	r1, #0
   16220:	mov	r0, #5
   16224:	bl	11378 <setlocale@plt>
   16228:	cmp	r0, #0
   1622c:	ldreq	r7, [pc, #360]	; 1639c <__assert_fail@plt+0x4f88>
   16230:	beq	1624c <__assert_fail@plt+0x4e38>
   16234:	mov	r2, #3
   16238:	ldr	r1, [pc, #364]	; 163ac <__assert_fail@plt+0x4f98>
   1623c:	bl	113e4 <strncmp@plt>
   16240:	ldr	r7, [pc, #340]	; 1639c <__assert_fail@plt+0x4f88>
   16244:	cmp	r0, #0
   16248:	bne	16334 <__assert_fail@plt+0x4f20>
   1624c:	mov	r2, #5
   16250:	ldr	r1, [pc, #344]	; 163b0 <__assert_fail@plt+0x4f9c>
   16254:	mov	r0, #0
   16258:	bl	11174 <dcgettext@plt>
   1625c:	ldr	r3, [pc, #312]	; 1639c <__assert_fail@plt+0x4f88>
   16260:	ldr	r2, [pc, #316]	; 163a4 <__assert_fail@plt+0x4f90>
   16264:	mov	r1, r0
   16268:	mov	r0, #1
   1626c:	bl	11300 <__printf_chk@plt>
   16270:	mov	r2, #5
   16274:	ldr	r1, [pc, #312]	; 163b4 <__assert_fail@plt+0x4fa0>
   16278:	mov	r0, #0
   1627c:	bl	11174 <dcgettext@plt>
   16280:	ldr	r2, [pc, #304]	; 163b8 <__assert_fail@plt+0x4fa4>
   16284:	cmp	r4, r7
   16288:	ldr	r3, [pc, #300]	; 163bc <__assert_fail@plt+0x4fa8>
   1628c:	movne	r3, r2
   16290:	mov	r1, r0
   16294:	mov	r2, r4
   16298:	mov	r0, #1
   1629c:	bl	11300 <__printf_chk@plt>
   162a0:	b	16010 <__assert_fail@plt+0x4bfc>
   162a4:	mov	r0, r4
   162a8:	bl	11174 <dcgettext@plt>
   162ac:	ldr	r3, [pc, #240]	; 163a4 <__assert_fail@plt+0x4f90>
   162b0:	ldr	r2, [pc, #240]	; 163a8 <__assert_fail@plt+0x4f94>
   162b4:	mov	r1, r0
   162b8:	mov	r0, #1
   162bc:	bl	11300 <__printf_chk@plt>
   162c0:	mov	r1, r4
   162c4:	mov	r0, #5
   162c8:	bl	11378 <setlocale@plt>
   162cc:	cmp	r0, #0
   162d0:	beq	162e8 <__assert_fail@plt+0x4ed4>
   162d4:	mov	r2, #3
   162d8:	ldr	r1, [pc, #204]	; 163ac <__assert_fail@plt+0x4f98>
   162dc:	bl	113e4 <strncmp@plt>
   162e0:	cmp	r0, #0
   162e4:	bne	1632c <__assert_fail@plt+0x4f18>
   162e8:	mov	r2, #5
   162ec:	ldr	r1, [pc, #188]	; 163b0 <__assert_fail@plt+0x4f9c>
   162f0:	mov	r0, #0
   162f4:	bl	11174 <dcgettext@plt>
   162f8:	ldr	r3, [pc, #156]	; 1639c <__assert_fail@plt+0x4f88>
   162fc:	ldr	r2, [pc, #160]	; 163a4 <__assert_fail@plt+0x4f90>
   16300:	mov	r4, r3
   16304:	mov	r1, r0
   16308:	mov	r0, #1
   1630c:	bl	11300 <__printf_chk@plt>
   16310:	ldr	r1, [pc, #156]	; 163b4 <__assert_fail@plt+0x4fa0>
   16314:	mov	r2, #5
   16318:	mov	r0, #0
   1631c:	bl	11174 <dcgettext@plt>
   16320:	ldr	r3, [pc, #148]	; 163bc <__assert_fail@plt+0x4fa8>
   16324:	mov	r1, r0
   16328:	b	16294 <__assert_fail@plt+0x4e80>
   1632c:	ldr	r7, [pc, #104]	; 1639c <__assert_fail@plt+0x4f88>
   16330:	mov	r4, r7
   16334:	mov	r2, #5
   16338:	ldr	r1, [pc, #128]	; 163c0 <__assert_fail@plt+0x4fac>
   1633c:	mov	r0, #0
   16340:	bl	11174 <dcgettext@plt>
   16344:	ldr	r1, [r6]
   16348:	bl	110b4 <fputs_unlocked@plt>
   1634c:	b	1624c <__assert_fail@plt+0x4e38>
   16350:	andeq	r2, r3, r0, asr #3
   16354:	andeq	pc, r1, r4, lsl sp	; <UNPREDICTABLE>
   16358:	andeq	r2, r3, ip, ror #3
   1635c:	andeq	pc, r1, ip, lsr sp	; <UNPREDICTABLE>
   16360:	andeq	r2, r3, r4, asr #3
   16364:	andeq	pc, r1, r8, ror #18
   16368:	andeq	pc, r1, r0, ror #26
   1636c:	andeq	pc, r1, r4, ror #27
   16370:	andeq	pc, r1, ip, lsl lr	; <UNPREDICTABLE>
   16374:	andeq	pc, r1, r8, ror #28
   16378:	strdeq	pc, [r1], -ip
   1637c:	andeq	pc, r1, r8, ror #31
   16380:	andeq	r0, r2, r4, lsl r2
   16384:	andeq	r0, r2, ip, ror #5
   16388:	andeq	r0, r2, r8, lsr r4
   1638c:	andeq	r0, r2, r8, ror r4
   16390:	andeq	r0, r2, r8, lsr #9
   16394:	andeq	r0, r2, r0, ror #9
   16398:			; <UNDEFINED> instruction: 0x000205b8
   1639c:	andeq	pc, r1, ip, lsl #26
   163a0:	andeq	r0, r2, r0, ror r7
   163a4:	andeq	r0, r2, r8, lsl #15
   163a8:			; <UNDEFINED> instruction: 0x000207b0
   163ac:	andeq	r0, r2, r0, asr #15
   163b0:	andeq	r0, r2, ip, lsl #16
   163b4:	andeq	r0, r2, r8, lsr #16
   163b8:			; <UNDEFINED> instruction: 0x000205b4
   163bc:	strdeq	r0, [r2], -r8
   163c0:	andeq	r0, r2, r4, asr #15
   163c4:	mov	r0, #1
   163c8:	b	15fd0 <__assert_fail@plt+0x4bbc>
   163cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163d0:	mov	r4, r1
   163d4:	sub	sp, sp, #12
   163d8:	mov	r5, r2
   163dc:	str	r2, [sp, #4]
   163e0:	mov	r7, r3
   163e4:	mov	sl, r0
   163e8:	bl	112a0 <strlen@plt>
   163ec:	ldr	fp, [r4]
   163f0:	cmp	fp, #0
   163f4:	beq	16508 <__assert_fail@plt+0x50f4>
   163f8:	cmp	r5, #0
   163fc:	mov	r8, r0
   16400:	mov	r3, r5
   16404:	beq	164b0 <__assert_fail@plt+0x509c>
   16408:	mov	r2, #0
   1640c:	mov	r5, r2
   16410:	mov	r6, r3
   16414:	mvn	r9, #0
   16418:	str	r2, [sp]
   1641c:	mov	r2, r8
   16420:	mov	r1, sl
   16424:	mov	r0, fp
   16428:	bl	113e4 <strncmp@plt>
   1642c:	cmp	r0, #0
   16430:	mov	r0, fp
   16434:	bne	16474 <__assert_fail@plt+0x5060>
   16438:	bl	112a0 <strlen@plt>
   1643c:	ldr	r3, [sp, #4]
   16440:	mov	r2, r7
   16444:	mov	r1, r6
   16448:	cmp	r8, r0
   1644c:	mla	r0, r7, r9, r3
   16450:	beq	164a0 <__assert_fail@plt+0x508c>
   16454:	cmn	r9, #1
   16458:	moveq	r9, r5
   1645c:	beq	16474 <__assert_fail@plt+0x5060>
   16460:	bl	1115c <memcmp@plt>
   16464:	ldr	r3, [sp]
   16468:	cmp	r0, #0
   1646c:	movne	r3, #1
   16470:	str	r3, [sp]
   16474:	ldr	fp, [r4, #4]!
   16478:	add	r5, r5, #1
   1647c:	cmp	fp, #0
   16480:	add	r6, r6, r7
   16484:	bne	1641c <__assert_fail@plt+0x5008>
   16488:	ldr	r3, [sp]
   1648c:	cmp	r3, #0
   16490:	mvnne	r9, #1
   16494:	mov	r0, r9
   16498:	add	sp, sp, #12
   1649c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164a0:	mov	r9, r5
   164a4:	mov	r0, r9
   164a8:	add	sp, sp, #12
   164ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164b0:	mov	r6, r5
   164b4:	mvn	r9, #0
   164b8:	mov	r2, r8
   164bc:	mov	r1, sl
   164c0:	mov	r0, fp
   164c4:	bl	113e4 <strncmp@plt>
   164c8:	cmp	r0, #0
   164cc:	mov	r0, fp
   164d0:	bne	164ec <__assert_fail@plt+0x50d8>
   164d4:	bl	112a0 <strlen@plt>
   164d8:	cmp	r8, r0
   164dc:	beq	164a0 <__assert_fail@plt+0x508c>
   164e0:	cmn	r9, #1
   164e4:	moveq	r9, r5
   164e8:	movne	r6, #1
   164ec:	ldr	fp, [r4, #4]!
   164f0:	add	r5, r5, #1
   164f4:	cmp	fp, #0
   164f8:	bne	164b8 <__assert_fail@plt+0x50a4>
   164fc:	str	r6, [sp]
   16500:	mov	r3, r6
   16504:	b	1648c <__assert_fail@plt+0x5078>
   16508:	mvn	r9, #0
   1650c:	b	16494 <__assert_fail@plt+0x5080>
   16510:	push	{r4, r5, r6, lr}
   16514:	mov	r6, r0
   16518:	ldr	r0, [r1]
   1651c:	cmp	r0, #0
   16520:	beq	16558 <__assert_fail@plt+0x5144>
   16524:	mov	r4, r1
   16528:	mov	r5, #0
   1652c:	b	16540 <__assert_fail@plt+0x512c>
   16530:	ldr	r0, [r4, #4]!
   16534:	add	r5, r5, #1
   16538:	cmp	r0, #0
   1653c:	beq	16558 <__assert_fail@plt+0x5144>
   16540:	mov	r1, r6
   16544:	bl	110cc <strcmp@plt>
   16548:	cmp	r0, #0
   1654c:	bne	16530 <__assert_fail@plt+0x511c>
   16550:	mov	r0, r5
   16554:	pop	{r4, r5, r6, pc}
   16558:	mvn	r0, #0
   1655c:	pop	{r4, r5, r6, pc}
   16560:	cmn	r2, #1
   16564:	push	{r4, r5, r6, lr}
   16568:	mov	r2, #5
   1656c:	sub	sp, sp, #8
   16570:	mov	r4, r1
   16574:	mov	r5, r0
   16578:	ldreq	r1, [pc, #76]	; 165cc <__assert_fail@plt+0x51b8>
   1657c:	ldrne	r1, [pc, #76]	; 165d0 <__assert_fail@plt+0x51bc>
   16580:	mov	r0, #0
   16584:	bl	11174 <dcgettext@plt>
   16588:	mov	r2, r4
   1658c:	mov	r1, #8
   16590:	mov	r6, r0
   16594:	mov	r0, #0
   16598:	bl	1aab0 <__assert_fail@plt+0x969c>
   1659c:	mov	r1, r5
   165a0:	mov	r4, r0
   165a4:	mov	r0, #1
   165a8:	bl	1c64c <__assert_fail@plt+0xb238>
   165ac:	mov	r1, #0
   165b0:	mov	r3, r4
   165b4:	mov	r2, r6
   165b8:	str	r0, [sp]
   165bc:	mov	r0, r1
   165c0:	bl	1121c <error@plt>
   165c4:	add	sp, sp, #8
   165c8:	pop	{r4, r5, r6, pc}
   165cc:	andeq	r0, r2, r0, lsr #28
   165d0:	andeq	r0, r2, ip, lsr lr
   165d4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165d8:	mov	r6, r0
   165dc:	ldr	r9, [pc, #232]	; 166cc <__assert_fail@plt+0x52b8>
   165e0:	mov	r4, r1
   165e4:	mov	r7, r2
   165e8:	ldr	r1, [pc, #224]	; 166d0 <__assert_fail@plt+0x52bc>
   165ec:	mov	r2, #5
   165f0:	mov	r0, #0
   165f4:	bl	11174 <dcgettext@plt>
   165f8:	ldr	r1, [r9]
   165fc:	bl	110b4 <fputs_unlocked@plt>
   16600:	ldr	fp, [r6]
   16604:	cmp	fp, #0
   16608:	movne	r8, #0
   1660c:	movne	r5, r8
   16610:	movne	sl, #1
   16614:	bne	16654 <__assert_fail@plt+0x5240>
   16618:	b	16698 <__assert_fail@plt+0x5284>
   1661c:	mov	r0, fp
   16620:	ldr	r8, [r9]
   16624:	bl	1c800 <__assert_fail@plt+0xb3ec>
   16628:	ldr	r2, [pc, #164]	; 166d4 <__assert_fail@plt+0x52c0>
   1662c:	mov	r1, sl
   16630:	mov	r3, r0
   16634:	mov	r0, r8
   16638:	bl	11324 <__fprintf_chk@plt>
   1663c:	mov	r8, r4
   16640:	ldr	fp, [r6, #4]!
   16644:	add	r5, r5, #1
   16648:	cmp	fp, #0
   1664c:	add	r4, r4, r7
   16650:	beq	16698 <__assert_fail@plt+0x5284>
   16654:	cmp	r5, #0
   16658:	mov	r1, r4
   1665c:	mov	r2, r7
   16660:	mov	r0, r8
   16664:	beq	1661c <__assert_fail@plt+0x5208>
   16668:	bl	1115c <memcmp@plt>
   1666c:	cmp	r0, #0
   16670:	bne	1661c <__assert_fail@plt+0x5208>
   16674:	mov	r0, fp
   16678:	ldr	fp, [r9]
   1667c:	bl	1c800 <__assert_fail@plt+0xb3ec>
   16680:	ldr	r2, [pc, #80]	; 166d8 <__assert_fail@plt+0x52c4>
   16684:	mov	r1, sl
   16688:	mov	r3, r0
   1668c:	mov	r0, fp
   16690:	bl	11324 <__fprintf_chk@plt>
   16694:	b	16640 <__assert_fail@plt+0x522c>
   16698:	ldr	r0, [r9]
   1669c:	ldr	r3, [r0, #20]
   166a0:	ldr	r2, [r0, #24]
   166a4:	cmp	r3, r2
   166a8:	bcs	166c0 <__assert_fail@plt+0x52ac>
   166ac:	add	r1, r3, #1
   166b0:	mov	r2, #10
   166b4:	str	r1, [r0, #20]
   166b8:	strb	r2, [r3]
   166bc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166c0:	mov	r1, #10
   166c4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166c8:	b	1136c <__overflow@plt>
   166cc:	andeq	r2, r3, r0, asr #3
   166d0:	andeq	r0, r2, ip, asr lr
   166d4:	andeq	r0, r2, r4, ror lr
   166d8:	andeq	r0, r2, ip, ror lr
   166dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166e0:	sub	sp, sp, #36	; 0x24
   166e4:	mov	r6, r1
   166e8:	ldrb	ip, [sp, #80]	; 0x50
   166ec:	str	r0, [sp, #28]
   166f0:	str	r2, [sp, #24]
   166f4:	cmp	ip, #0
   166f8:	str	ip, [sp, #20]
   166fc:	str	r3, [sp, #12]
   16700:	ldr	r7, [sp, #72]	; 0x48
   16704:	bne	167bc <__assert_fail@plt+0x53a8>
   16708:	ldr	r0, [r2]
   1670c:	cmp	r0, #0
   16710:	movne	sl, ip
   16714:	movne	r4, r2
   16718:	bne	167a0 <__assert_fail@plt+0x538c>
   1671c:	mov	r2, #5
   16720:	ldr	r1, [pc, #512]	; 16928 <__assert_fail@plt+0x5514>
   16724:	mov	r0, #0
   16728:	bl	11174 <dcgettext@plt>
   1672c:	mov	r4, r0
   16730:	mov	r2, r6
   16734:	mov	r1, #8
   16738:	mov	r0, #0
   1673c:	bl	1aab0 <__assert_fail@plt+0x969c>
   16740:	ldr	r1, [sp, #28]
   16744:	mvn	sl, #0
   16748:	mov	r5, r0
   1674c:	mov	r0, #1
   16750:	bl	1c64c <__assert_fail@plt+0xb238>
   16754:	mov	r1, #0
   16758:	mov	r3, r5
   1675c:	mov	r2, r4
   16760:	str	r0, [sp]
   16764:	mov	r0, r1
   16768:	bl	1121c <error@plt>
   1676c:	ldr	r0, [sp, #24]
   16770:	mov	r2, r7
   16774:	ldr	r1, [sp, #12]
   16778:	bl	165d4 <__assert_fail@plt+0x51c0>
   1677c:	ldr	r3, [sp, #76]	; 0x4c
   16780:	blx	r3
   16784:	mov	r0, sl
   16788:	add	sp, sp, #36	; 0x24
   1678c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16790:	ldr	r0, [r4, #4]!
   16794:	add	sl, sl, #1
   16798:	cmp	r0, #0
   1679c:	beq	1671c <__assert_fail@plt+0x5308>
   167a0:	mov	r1, r6
   167a4:	bl	110cc <strcmp@plt>
   167a8:	cmp	r0, #0
   167ac:	bne	16790 <__assert_fail@plt+0x537c>
   167b0:	mov	r0, sl
   167b4:	add	sp, sp, #36	; 0x24
   167b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167bc:	mov	r0, r1
   167c0:	bl	112a0 <strlen@plt>
   167c4:	ldr	r3, [sp, #24]
   167c8:	ldr	fp, [r3]
   167cc:	cmp	fp, #0
   167d0:	mov	r9, r0
   167d4:	beq	1671c <__assert_fail@plt+0x5308>
   167d8:	ldr	r2, [sp, #12]
   167dc:	cmp	r2, #0
   167e0:	beq	1689c <__assert_fail@plt+0x5488>
   167e4:	mov	r1, #0
   167e8:	mov	r4, r1
   167ec:	mov	r8, r3
   167f0:	mov	r5, r2
   167f4:	mvn	sl, #0
   167f8:	str	r1, [sp, #16]
   167fc:	mov	r2, r9
   16800:	mov	r1, r6
   16804:	mov	r0, fp
   16808:	bl	113e4 <strncmp@plt>
   1680c:	cmp	r0, #0
   16810:	mov	r0, fp
   16814:	bne	16858 <__assert_fail@plt+0x5444>
   16818:	bl	112a0 <strlen@plt>
   1681c:	ldr	r3, [sp, #12]
   16820:	mov	r2, r7
   16824:	mov	r1, r5
   16828:	cmp	r9, r0
   1682c:	mla	r0, r7, sl, r3
   16830:	beq	1688c <__assert_fail@plt+0x5478>
   16834:	cmn	sl, #1
   16838:	moveq	sl, r4
   1683c:	beq	16858 <__assert_fail@plt+0x5444>
   16840:	bl	1115c <memcmp@plt>
   16844:	ldr	r2, [sp, #20]
   16848:	ldr	r3, [sp, #16]
   1684c:	cmp	r0, #0
   16850:	movne	r3, r2
   16854:	str	r3, [sp, #16]
   16858:	ldr	fp, [r8, #4]!
   1685c:	add	r4, r4, #1
   16860:	cmp	fp, #0
   16864:	add	r5, r5, r7
   16868:	bne	167fc <__assert_fail@plt+0x53e8>
   1686c:	ldr	r3, [sp, #16]
   16870:	cmp	r3, #0
   16874:	bne	16910 <__assert_fail@plt+0x54fc>
   16878:	cmn	sl, #1
   1687c:	beq	1671c <__assert_fail@plt+0x5308>
   16880:	mov	r0, sl
   16884:	add	sp, sp, #36	; 0x24
   16888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1688c:	mov	sl, r4
   16890:	mov	r0, sl
   16894:	add	sp, sp, #36	; 0x24
   16898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1689c:	mov	r5, r3
   168a0:	ldr	r3, [sp, #12]
   168a4:	str	r7, [sp, #72]	; 0x48
   168a8:	mov	r7, fp
   168ac:	ldr	fp, [sp, #20]
   168b0:	mov	r8, r3
   168b4:	mvn	sl, #0
   168b8:	mov	r4, r3
   168bc:	mov	r2, r9
   168c0:	mov	r1, r6
   168c4:	mov	r0, r7
   168c8:	bl	113e4 <strncmp@plt>
   168cc:	cmp	r0, #0
   168d0:	mov	r0, r7
   168d4:	bne	168f0 <__assert_fail@plt+0x54dc>
   168d8:	bl	112a0 <strlen@plt>
   168dc:	cmp	r9, r0
   168e0:	beq	1688c <__assert_fail@plt+0x5478>
   168e4:	cmn	sl, #1
   168e8:	moveq	sl, r4
   168ec:	movne	r8, fp
   168f0:	ldr	r7, [r5, #4]!
   168f4:	add	r4, r4, #1
   168f8:	cmp	r7, #0
   168fc:	bne	168bc <__assert_fail@plt+0x54a8>
   16900:	str	r8, [sp, #16]
   16904:	ldr	r7, [sp, #72]	; 0x48
   16908:	mov	r3, r8
   1690c:	b	16870 <__assert_fail@plt+0x545c>
   16910:	mov	r2, #5
   16914:	ldr	r1, [pc, #16]	; 1692c <__assert_fail@plt+0x5518>
   16918:	mov	r0, #0
   1691c:	bl	11174 <dcgettext@plt>
   16920:	mov	r4, r0
   16924:	b	16730 <__assert_fail@plt+0x531c>
   16928:	andeq	r0, r2, r0, lsr #28
   1692c:	andeq	r0, r2, ip, lsr lr
   16930:	push	{r4, r5, r6, r7, r8, lr}
   16934:	ldr	r7, [r1]
   16938:	cmp	r7, #0
   1693c:	beq	1697c <__assert_fail@plt+0x5568>
   16940:	mov	r6, r3
   16944:	mov	r8, r0
   16948:	mov	r4, r2
   1694c:	mov	r5, r1
   16950:	b	16960 <__assert_fail@plt+0x554c>
   16954:	ldr	r7, [r5, #4]!
   16958:	cmp	r7, #0
   1695c:	beq	1697c <__assert_fail@plt+0x5568>
   16960:	mov	r1, r4
   16964:	mov	r2, r6
   16968:	mov	r0, r8
   1696c:	bl	1115c <memcmp@plt>
   16970:	add	r4, r4, r6
   16974:	cmp	r0, #0
   16978:	bne	16954 <__assert_fail@plt+0x5540>
   1697c:	mov	r0, r7
   16980:	pop	{r4, r5, r6, r7, r8, pc}
   16984:	ldrb	r3, [r0]
   16988:	cmp	r3, #47	; 0x2f
   1698c:	bne	1699c <__assert_fail@plt+0x5588>
   16990:	ldrb	r3, [r0, #1]!
   16994:	cmp	r3, #47	; 0x2f
   16998:	beq	16990 <__assert_fail@plt+0x557c>
   1699c:	cmp	r3, #0
   169a0:	bxeq	lr
   169a4:	mov	r2, #0
   169a8:	push	{lr}		; (str lr, [sp, #-4]!)
   169ac:	mov	ip, r2
   169b0:	mov	r1, r0
   169b4:	mov	lr, #1
   169b8:	cmp	r3, #47	; 0x2f
   169bc:	moveq	r2, lr
   169c0:	beq	169d0 <__assert_fail@plt+0x55bc>
   169c4:	cmp	r2, #0
   169c8:	movne	r0, r1
   169cc:	movne	r2, ip
   169d0:	ldrb	r3, [r1, #1]!
   169d4:	cmp	r3, #0
   169d8:	bne	169b8 <__assert_fail@plt+0x55a4>
   169dc:	pop	{pc}		; (ldr pc, [sp], #4)
   169e0:	push	{r4, lr}
   169e4:	mov	r4, r0
   169e8:	bl	112a0 <strlen@plt>
   169ec:	cmp	r0, #1
   169f0:	popls	{r4, pc}
   169f4:	sub	r3, r0, #1
   169f8:	add	r2, r4, r3
   169fc:	ldrb	r1, [r4, r3]
   16a00:	cmp	r1, #47	; 0x2f
   16a04:	popne	{r4, pc}
   16a08:	cmp	r3, #1
   16a0c:	beq	16a20 <__assert_fail@plt+0x560c>
   16a10:	ldrb	r1, [r2, #-1]!
   16a14:	sub	r0, r3, #1
   16a18:	cmp	r1, #47	; 0x2f
   16a1c:	beq	16a28 <__assert_fail@plt+0x5614>
   16a20:	mov	r0, r3
   16a24:	pop	{r4, pc}
   16a28:	mov	r3, r0
   16a2c:	b	16a08 <__assert_fail@plt+0x55f4>
   16a30:	push	{r4, r5, r6, lr}
   16a34:	vpush	{d8}
   16a38:	mov	r4, r1
   16a3c:	mov	r5, r0
   16a40:	sub	sp, sp, #8
   16a44:	mov	r1, sp
   16a48:	bl	1130c <strtod@plt>
   16a4c:	ldr	r3, [sp]
   16a50:	ldrb	r3, [r3]
   16a54:	cmp	r3, #0
   16a58:	vmov.f64	d8, d0
   16a5c:	bne	16a7c <__assert_fail@plt+0x5668>
   16a60:	cmp	r4, #0
   16a64:	vmov.f64	d0, d8
   16a68:	ldrne	r3, [sp]
   16a6c:	strne	r3, [r4]
   16a70:	add	sp, sp, #8
   16a74:	vpop	{d8}
   16a78:	pop	{r4, r5, r6, pc}
   16a7c:	bl	112dc <__errno_location@plt>
   16a80:	add	r1, sp, #4
   16a84:	mov	r6, r0
   16a88:	mov	r0, r5
   16a8c:	ldr	r5, [r6]
   16a90:	bl	1ed48 <__assert_fail@plt+0xd934>
   16a94:	ldm	sp, {r2, r3}
   16a98:	cmp	r2, r3
   16a9c:	strcc	r3, [sp]
   16aa0:	strcs	r5, [r6]
   16aa4:	vmovcc.f64	d8, d0
   16aa8:	b	16a60 <__assert_fail@plt+0x564c>
   16aac:	ldr	r3, [pc, #4]	; 16ab8 <__assert_fail@plt+0x56a4>
   16ab0:	str	r0, [r3]
   16ab4:	bx	lr
   16ab8:	andeq	r2, r3, r0, ror #3
   16abc:	ldr	r3, [pc, #4]	; 16ac8 <__assert_fail@plt+0x56b4>
   16ac0:	strb	r0, [r3, #4]
   16ac4:	bx	lr
   16ac8:	andeq	r2, r3, r0, ror #3
   16acc:	ldr	r3, [pc, #192]	; 16b94 <__assert_fail@plt+0x5780>
   16ad0:	push	{r4, r5, r6, lr}
   16ad4:	sub	sp, sp, #8
   16ad8:	ldr	r0, [r3]
   16adc:	bl	1edc4 <__assert_fail@plt+0xd9b0>
   16ae0:	cmp	r0, #0
   16ae4:	beq	16b08 <__assert_fail@plt+0x56f4>
   16ae8:	ldr	r4, [pc, #168]	; 16b98 <__assert_fail@plt+0x5784>
   16aec:	ldrb	r3, [r4, #4]
   16af0:	cmp	r3, #0
   16af4:	beq	16b24 <__assert_fail@plt+0x5710>
   16af8:	bl	112dc <__errno_location@plt>
   16afc:	ldr	r3, [r0]
   16b00:	cmp	r3, #32
   16b04:	bne	16b24 <__assert_fail@plt+0x5710>
   16b08:	ldr	r3, [pc, #140]	; 16b9c <__assert_fail@plt+0x5788>
   16b0c:	ldr	r0, [r3]
   16b10:	bl	1edc4 <__assert_fail@plt+0xd9b0>
   16b14:	cmp	r0, #0
   16b18:	bne	16b6c <__assert_fail@plt+0x5758>
   16b1c:	add	sp, sp, #8
   16b20:	pop	{r4, r5, r6, pc}
   16b24:	mov	r2, #5
   16b28:	ldr	r1, [pc, #112]	; 16ba0 <__assert_fail@plt+0x578c>
   16b2c:	mov	r0, #0
   16b30:	bl	11174 <dcgettext@plt>
   16b34:	ldr	r4, [r4]
   16b38:	cmp	r4, #0
   16b3c:	mov	r5, r0
   16b40:	beq	16b78 <__assert_fail@plt+0x5764>
   16b44:	bl	112dc <__errno_location@plt>
   16b48:	ldr	r6, [r0]
   16b4c:	mov	r0, r4
   16b50:	bl	1b5a0 <__assert_fail@plt+0xa18c>
   16b54:	mov	r1, r6
   16b58:	str	r5, [sp]
   16b5c:	ldr	r2, [pc, #64]	; 16ba4 <__assert_fail@plt+0x5790>
   16b60:	mov	r3, r0
   16b64:	mov	r0, #0
   16b68:	bl	1121c <error@plt>
   16b6c:	ldr	r3, [pc, #52]	; 16ba8 <__assert_fail@plt+0x5794>
   16b70:	ldr	r0, [r3]
   16b74:	bl	11120 <_exit@plt>
   16b78:	bl	112dc <__errno_location@plt>
   16b7c:	mov	r3, r5
   16b80:	ldr	r2, [pc, #36]	; 16bac <__assert_fail@plt+0x5798>
   16b84:	ldr	r1, [r0]
   16b88:	mov	r0, r4
   16b8c:	bl	1121c <error@plt>
   16b90:	b	16b6c <__assert_fail@plt+0x5758>
   16b94:	andeq	r2, r3, r4, asr #3
   16b98:	andeq	r2, r3, r0, ror #3
   16b9c:	andeq	r2, r3, r0, asr #3
   16ba0:	andeq	pc, r1, r0, lsl #26
   16ba4:	muleq	r2, r0, r8
   16ba8:	andeq	r2, r3, r8, ror #2
   16bac:	muleq	r2, r4, r8
   16bb0:	push	{r4, r5, r6, lr}
   16bb4:	mov	r5, r0
   16bb8:	ldrb	r4, [r0]
   16bbc:	bl	16984 <__assert_fail@plt+0x5570>
   16bc0:	sub	r4, r4, #47	; 0x2f
   16bc4:	clz	r4, r4
   16bc8:	lsr	r4, r4, #5
   16bcc:	sub	r0, r0, r5
   16bd0:	cmp	r0, r4
   16bd4:	bls	16c20 <__assert_fail@plt+0x580c>
   16bd8:	sub	r3, r0, #1
   16bdc:	add	r2, r5, r3
   16be0:	ldrb	r1, [r5, r3]
   16be4:	cmp	r1, #47	; 0x2f
   16be8:	beq	16c04 <__assert_fail@plt+0x57f0>
   16bec:	b	16c20 <__assert_fail@plt+0x580c>
   16bf0:	ldrb	r1, [r2, #-1]!
   16bf4:	sub	r0, r3, #1
   16bf8:	cmp	r1, #47	; 0x2f
   16bfc:	bne	16c14 <__assert_fail@plt+0x5800>
   16c00:	mov	r3, r0
   16c04:	cmp	r4, r3
   16c08:	bne	16bf0 <__assert_fail@plt+0x57dc>
   16c0c:	mov	r0, r4
   16c10:	pop	{r4, r5, r6, pc}
   16c14:	mov	r4, r3
   16c18:	mov	r0, r4
   16c1c:	pop	{r4, r5, r6, pc}
   16c20:	mov	r4, r0
   16c24:	b	16c0c <__assert_fail@plt+0x57f8>
   16c28:	push	{r4, r5, r6, r7, r8, lr}
   16c2c:	mov	r6, r0
   16c30:	ldrb	r4, [r0]
   16c34:	bl	16984 <__assert_fail@plt+0x5570>
   16c38:	sub	r4, r4, #47	; 0x2f
   16c3c:	clz	r4, r4
   16c40:	lsr	r4, r4, #5
   16c44:	sub	r5, r0, r6
   16c48:	cmp	r5, r4
   16c4c:	bls	16d08 <__assert_fail@plt+0x58f4>
   16c50:	sub	r3, r5, #1
   16c54:	add	r2, r6, r3
   16c58:	ldrb	r1, [r6, r3]
   16c5c:	cmp	r1, #47	; 0x2f
   16c60:	beq	16c7c <__assert_fail@plt+0x5868>
   16c64:	b	16cd8 <__assert_fail@plt+0x58c4>
   16c68:	ldrb	r0, [r2, #-1]!
   16c6c:	sub	ip, r3, #1
   16c70:	cmp	r0, #47	; 0x2f
   16c74:	bne	16cd4 <__assert_fail@plt+0x58c0>
   16c78:	mov	r3, ip
   16c7c:	cmp	r4, r3
   16c80:	bne	16c68 <__assert_fail@plt+0x5854>
   16c84:	eor	r3, r4, #1
   16c88:	and	r3, r3, #1
   16c8c:	add	r0, r4, #1
   16c90:	add	r0, r0, r3
   16c94:	uxtb	r5, r3
   16c98:	bl	1ecbc <__assert_fail@plt+0xd8a8>
   16c9c:	subs	r7, r0, #0
   16ca0:	beq	16d00 <__assert_fail@plt+0x58ec>
   16ca4:	mov	r1, r6
   16ca8:	mov	r2, r4
   16cac:	bl	1112c <memcpy@plt>
   16cb0:	cmp	r5, #0
   16cb4:	movne	r5, #1
   16cb8:	moveq	r5, r4
   16cbc:	movne	r3, #46	; 0x2e
   16cc0:	strbne	r3, [r7]
   16cc4:	mov	r3, #0
   16cc8:	strb	r3, [r7, r5]
   16ccc:	mov	r0, r7
   16cd0:	pop	{r4, r5, r6, r7, r8, pc}
   16cd4:	mov	r5, r3
   16cd8:	add	r0, r5, #1
   16cdc:	cmp	r5, #0
   16ce0:	addeq	r0, r0, #1
   16ce4:	bl	1ecbc <__assert_fail@plt+0xd8a8>
   16ce8:	subs	r7, r0, #0
   16cec:	beq	16d00 <__assert_fail@plt+0x58ec>
   16cf0:	mov	r1, r6
   16cf4:	mov	r2, r5
   16cf8:	bl	1112c <memcpy@plt>
   16cfc:	b	16cc4 <__assert_fail@plt+0x58b0>
   16d00:	mov	r7, #0
   16d04:	b	16ccc <__assert_fail@plt+0x58b8>
   16d08:	mov	r4, r5
   16d0c:	b	16c84 <__assert_fail@plt+0x5870>
   16d10:	push	{r1, r2, r3}
   16d14:	push	{r4, r5, r6, r7, lr}
   16d18:	sub	sp, sp, #8
   16d1c:	add	r3, sp, #32
   16d20:	ldr	r1, [sp, #28]
   16d24:	str	r3, [sp, #4]
   16d28:	cmp	r1, #0
   16d2c:	beq	16dc4 <__assert_fail@plt+0x59b0>
   16d30:	ldr	r2, [pc, #412]	; 16ed4 <__assert_fail@plt+0x5ac0>
   16d34:	mov	r5, r0
   16d38:	cmp	r1, r2
   16d3c:	bne	16d88 <__assert_fail@plt+0x5974>
   16d40:	ldr	r6, [pc, #400]	; 16ed8 <__assert_fail@plt+0x5ac4>
   16d44:	ldr	r7, [r3]
   16d48:	add	r2, sp, #36	; 0x24
   16d4c:	ldr	r3, [r6]
   16d50:	str	r2, [sp, #4]
   16d54:	cmp	r3, #0
   16d58:	mov	r2, r7
   16d5c:	blt	16e88 <__assert_fail@plt+0x5a74>
   16d60:	bl	11360 <fcntl64@plt>
   16d64:	subs	r4, r0, #0
   16d68:	blt	16e0c <__assert_fail@plt+0x59f8>
   16d6c:	mov	r3, #1
   16d70:	str	r3, [r6]
   16d74:	mov	r0, r4
   16d78:	add	sp, sp, #8
   16d7c:	pop	{r4, r5, r6, r7, lr}
   16d80:	add	sp, sp, #12
   16d84:	bx	lr
   16d88:	cmp	r1, #11
   16d8c:	beq	16db4 <__assert_fail@plt+0x59a0>
   16d90:	bgt	16dd4 <__assert_fail@plt+0x59c0>
   16d94:	cmp	r1, #3
   16d98:	beq	16db4 <__assert_fail@plt+0x59a0>
   16d9c:	ble	16ec8 <__assert_fail@plt+0x5ab4>
   16da0:	cmp	r1, #8
   16da4:	beq	16df4 <__assert_fail@plt+0x59e0>
   16da8:	ble	16df4 <__assert_fail@plt+0x59e0>
   16dac:	cmp	r1, #9
   16db0:	bne	16df4 <__assert_fail@plt+0x59e0>
   16db4:	mov	r0, r5
   16db8:	bl	11360 <fcntl64@plt>
   16dbc:	mov	r4, r0
   16dc0:	b	16d74 <__assert_fail@plt+0x5960>
   16dc4:	ldr	r2, [sp, #32]
   16dc8:	bl	11360 <fcntl64@plt>
   16dcc:	mov	r4, r0
   16dd0:	b	16d74 <__assert_fail@plt+0x5960>
   16dd4:	ldr	r3, [pc, #256]	; 16edc <__assert_fail@plt+0x5ac8>
   16dd8:	cmp	r1, r3
   16ddc:	bgt	16ea8 <__assert_fail@plt+0x5a94>
   16de0:	cmp	r1, r2
   16de4:	bge	16df4 <__assert_fail@plt+0x59e0>
   16de8:	sub	r3, r3, #6
   16dec:	cmp	r1, r3
   16df0:	beq	16db4 <__assert_fail@plt+0x59a0>
   16df4:	ldr	r3, [sp, #4]
   16df8:	mov	r0, r5
   16dfc:	ldr	r2, [r3]
   16e00:	bl	11360 <fcntl64@plt>
   16e04:	mov	r4, r0
   16e08:	b	16d74 <__assert_fail@plt+0x5960>
   16e0c:	bl	112dc <__errno_location@plt>
   16e10:	ldr	r3, [r0]
   16e14:	cmp	r3, #22
   16e18:	bne	16d6c <__assert_fail@plt+0x5958>
   16e1c:	mov	r2, r7
   16e20:	mov	r0, r5
   16e24:	mov	r1, #0
   16e28:	bl	11360 <fcntl64@plt>
   16e2c:	subs	r4, r0, #0
   16e30:	blt	16d74 <__assert_fail@plt+0x5960>
   16e34:	mvn	r3, #0
   16e38:	str	r3, [r6]
   16e3c:	mov	r1, #1
   16e40:	mov	r0, r4
   16e44:	bl	11360 <fcntl64@plt>
   16e48:	subs	r2, r0, #0
   16e4c:	blt	16e68 <__assert_fail@plt+0x5a54>
   16e50:	orr	r2, r2, #1
   16e54:	mov	r1, #2
   16e58:	mov	r0, r4
   16e5c:	bl	11360 <fcntl64@plt>
   16e60:	cmn	r0, #1
   16e64:	bne	16d74 <__assert_fail@plt+0x5960>
   16e68:	bl	112dc <__errno_location@plt>
   16e6c:	mov	r5, r0
   16e70:	mov	r0, r4
   16e74:	ldr	r6, [r5]
   16e78:	mvn	r4, #0
   16e7c:	bl	113fc <close@plt>
   16e80:	str	r6, [r5]
   16e84:	b	16d74 <__assert_fail@plt+0x5960>
   16e88:	mov	r1, #0
   16e8c:	bl	11360 <fcntl64@plt>
   16e90:	subs	r4, r0, #0
   16e94:	blt	16d74 <__assert_fail@plt+0x5960>
   16e98:	ldr	r3, [r6]
   16e9c:	cmn	r3, #1
   16ea0:	beq	16e3c <__assert_fail@plt+0x5a28>
   16ea4:	b	16d74 <__assert_fail@plt+0x5960>
   16ea8:	ldr	r3, [pc, #48]	; 16ee0 <__assert_fail@plt+0x5acc>
   16eac:	cmp	r1, r3
   16eb0:	beq	16df4 <__assert_fail@plt+0x59e0>
   16eb4:	blt	16db4 <__assert_fail@plt+0x59a0>
   16eb8:	add	r3, r3, #1
   16ebc:	cmp	r1, r3
   16ec0:	bne	16df4 <__assert_fail@plt+0x59e0>
   16ec4:	b	16db4 <__assert_fail@plt+0x59a0>
   16ec8:	cmp	r1, #1
   16ecc:	bne	16df4 <__assert_fail@plt+0x59e0>
   16ed0:	b	16db4 <__assert_fail@plt+0x59a0>
   16ed4:	andeq	r0, r0, r6, lsl #8
   16ed8:	andeq	r2, r3, r8, ror #3
   16edc:	andeq	r0, r0, r7, lsl #8
   16ee0:	andeq	r0, r0, r9, lsl #8
   16ee4:	push	{r1, r2, r3}
   16ee8:	push	{lr}		; (str lr, [sp, #-4]!)
   16eec:	sub	sp, sp, #8
   16ef0:	ldr	r1, [sp, #12]
   16ef4:	ands	r2, r1, #64	; 0x40
   16ef8:	addne	r3, sp, #16
   16efc:	ldrne	r2, [sp, #16]
   16f00:	strne	r3, [sp, #4]
   16f04:	bl	11228 <open64@plt>
   16f08:	bl	1c9e8 <__assert_fail@plt+0xb5d4>
   16f0c:	add	sp, sp, #8
   16f10:	pop	{lr}		; (ldr lr, [sp], #4)
   16f14:	add	sp, sp, #12
   16f18:	bx	lr
   16f1c:	push	{r4, r5, lr}
   16f20:	sub	sp, sp, #12
   16f24:	mov	r5, r0
   16f28:	bl	112dc <__errno_location@plt>
   16f2c:	mov	r2, #0
   16f30:	mov	r4, r0
   16f34:	ldr	r3, [r0]
   16f38:	str	r2, [r4]
   16f3c:	mov	r0, r5
   16f40:	str	r3, [sp]
   16f44:	str	r3, [sp, #4]
   16f48:	bl	11108 <free@plt>
   16f4c:	ldr	r3, [r4]
   16f50:	add	r2, sp, #8
   16f54:	cmp	r3, #0
   16f58:	moveq	r3, #4
   16f5c:	movne	r3, #0
   16f60:	add	r3, r2, r3
   16f64:	ldr	r3, [r3, #-8]
   16f68:	str	r3, [r4]
   16f6c:	add	sp, sp, #12
   16f70:	pop	{r4, r5, pc}
   16f74:	andeq	r0, r0, r0
   16f78:	push	{r4, lr}
   16f7c:	ror	r0, r0, #3
   16f80:	bl	1f46c <__assert_fail@plt+0xe058>
   16f84:	mov	r0, r1
   16f88:	pop	{r4, pc}
   16f8c:	sub	r0, r1, r0
   16f90:	clz	r0, r0
   16f94:	lsr	r0, r0, #5
   16f98:	bx	lr
   16f9c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16fa0:	mov	r5, r1
   16fa4:	mov	r6, r0
   16fa8:	ldr	r4, [r0, #24]
   16fac:	ldr	r1, [r0, #8]
   16fb0:	mov	r0, r5
   16fb4:	mov	r8, r3
   16fb8:	mov	sl, r2
   16fbc:	blx	r4
   16fc0:	ldr	r3, [r6, #8]
   16fc4:	cmp	r0, r3
   16fc8:	bcs	170b8 <__assert_fail@plt+0x5ca4>
   16fcc:	ldr	r9, [r6]
   16fd0:	mov	r7, r0
   16fd4:	add	r4, r9, r0, lsl #3
   16fd8:	str	r4, [sl]
   16fdc:	ldr	r3, [r9, r0, lsl #3]
   16fe0:	cmp	r3, #0
   16fe4:	beq	17078 <__assert_fail@plt+0x5c64>
   16fe8:	cmp	r5, r3
   16fec:	beq	1700c <__assert_fail@plt+0x5bf8>
   16ff0:	mov	r1, r3
   16ff4:	mov	r0, r5
   16ff8:	ldr	r3, [r6, #28]
   16ffc:	blx	r3
   17000:	cmp	r0, #0
   17004:	beq	1706c <__assert_fail@plt+0x5c58>
   17008:	ldr	r3, [r9, r7, lsl #3]
   1700c:	cmp	r8, #0
   17010:	beq	1703c <__assert_fail@plt+0x5c28>
   17014:	ldr	r2, [r4, #4]
   17018:	cmp	r2, #0
   1701c:	movne	ip, #0
   17020:	ldmne	r2, {r0, r1}
   17024:	streq	r2, [r9, r7, lsl #3]
   17028:	stmne	r4, {r0, r1}
   1702c:	strne	ip, [r2]
   17030:	ldrne	r1, [r6, #36]	; 0x24
   17034:	strne	r1, [r2, #4]
   17038:	strne	r2, [r6, #36]	; 0x24
   1703c:	mov	r0, r3
   17040:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17044:	ldr	r3, [r2]
   17048:	cmp	r5, r3
   1704c:	beq	1708c <__assert_fail@plt+0x5c78>
   17050:	mov	r1, r3
   17054:	mov	r0, r5
   17058:	ldr	r3, [r6, #28]
   1705c:	blx	r3
   17060:	cmp	r0, #0
   17064:	bne	17084 <__assert_fail@plt+0x5c70>
   17068:	ldr	r4, [r4, #4]
   1706c:	ldr	r2, [r4, #4]
   17070:	cmp	r2, #0
   17074:	bne	17044 <__assert_fail@plt+0x5c30>
   17078:	mov	r3, #0
   1707c:	mov	r0, r3
   17080:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17084:	ldr	r2, [r4, #4]
   17088:	ldr	r3, [r2]
   1708c:	cmp	r8, #0
   17090:	beq	1703c <__assert_fail@plt+0x5c28>
   17094:	ldr	r0, [r2, #4]
   17098:	mov	r1, #0
   1709c:	str	r0, [r4, #4]
   170a0:	str	r1, [r2]
   170a4:	ldr	r1, [r6, #36]	; 0x24
   170a8:	mov	r0, r3
   170ac:	str	r1, [r2, #4]
   170b0:	str	r2, [r6, #36]	; 0x24
   170b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   170b8:	bl	113f0 <abort@plt>
   170bc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170c0:	ldr	r6, [r1]
   170c4:	ldr	r3, [r1, #4]
   170c8:	cmp	r6, r3
   170cc:	bcs	1719c <__assert_fail@plt+0x5d88>
   170d0:	mov	r9, r2
   170d4:	mov	r5, r0
   170d8:	mov	r8, r1
   170dc:	add	r6, r6, #8
   170e0:	mov	sl, #0
   170e4:	ldr	fp, [r6, #-8]
   170e8:	mov	r7, r6
   170ec:	cmp	fp, #0
   170f0:	beq	17190 <__assert_fail@plt+0x5d7c>
   170f4:	ldr	r4, [r6, #-4]
   170f8:	cmp	r4, #0
   170fc:	beq	17180 <__assert_fail@plt+0x5d6c>
   17100:	ldr	r1, [r5, #8]
   17104:	b	17120 <__assert_fail@plt+0x5d0c>
   17108:	ldr	r3, [ip, #4]
   1710c:	cmp	r2, #0
   17110:	str	r3, [r4, #4]
   17114:	str	r4, [ip, #4]
   17118:	beq	1717c <__assert_fail@plt+0x5d68>
   1711c:	mov	r4, r2
   17120:	ldr	fp, [r4]
   17124:	ldr	r3, [r5, #24]
   17128:	mov	r0, fp
   1712c:	blx	r3
   17130:	ldr	r1, [r5, #8]
   17134:	cmp	r0, r1
   17138:	bcs	1723c <__assert_fail@plt+0x5e28>
   1713c:	ldr	r3, [r5]
   17140:	ldr	r2, [r4, #4]
   17144:	add	ip, r3, r0, lsl #3
   17148:	ldr	lr, [r3, r0, lsl #3]
   1714c:	cmp	lr, #0
   17150:	bne	17108 <__assert_fail@plt+0x5cf4>
   17154:	ldr	ip, [r5, #12]
   17158:	str	fp, [r3, r0, lsl #3]
   1715c:	add	r3, ip, #1
   17160:	str	r3, [r5, #12]
   17164:	str	lr, [r4]
   17168:	ldr	r3, [r5, #36]	; 0x24
   1716c:	cmp	r2, #0
   17170:	str	r3, [r4, #4]
   17174:	str	r4, [r5, #36]	; 0x24
   17178:	bne	1711c <__assert_fail@plt+0x5d08>
   1717c:	ldr	fp, [r6, #-8]
   17180:	cmp	r9, #0
   17184:	str	sl, [r6, #-4]
   17188:	beq	171a4 <__assert_fail@plt+0x5d90>
   1718c:	ldr	r3, [r8, #4]
   17190:	cmp	r3, r7
   17194:	add	r6, r6, #8
   17198:	bhi	170e4 <__assert_fail@plt+0x5cd0>
   1719c:	mov	r0, #1
   171a0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171a4:	ldr	r3, [r5, #24]
   171a8:	ldr	r1, [r5, #8]
   171ac:	mov	r0, fp
   171b0:	blx	r3
   171b4:	ldr	r3, [r5, #8]
   171b8:	cmp	r0, r3
   171bc:	bcs	1723c <__assert_fail@plt+0x5e28>
   171c0:	ldr	r3, [r5]
   171c4:	add	r4, r3, r0, lsl #3
   171c8:	ldr	r2, [r3, r0, lsl #3]
   171cc:	cmp	r2, #0
   171d0:	beq	17210 <__assert_fail@plt+0x5dfc>
   171d4:	ldr	r0, [r5, #36]	; 0x24
   171d8:	cmp	r0, #0
   171dc:	beq	17224 <__assert_fail@plt+0x5e10>
   171e0:	ldr	r3, [r0, #4]
   171e4:	str	r3, [r5, #36]	; 0x24
   171e8:	ldr	r3, [r4, #4]
   171ec:	str	fp, [r0]
   171f0:	str	r3, [r0, #4]
   171f4:	str	r0, [r4, #4]
   171f8:	ldr	r2, [r8, #12]
   171fc:	str	sl, [r6, #-8]
   17200:	sub	r2, r2, #1
   17204:	ldr	r3, [r8, #4]
   17208:	str	r2, [r8, #12]
   1720c:	b	17190 <__assert_fail@plt+0x5d7c>
   17210:	ldr	r2, [r5, #12]
   17214:	str	fp, [r3, r0, lsl #3]
   17218:	add	r3, r2, #1
   1721c:	str	r3, [r5, #12]
   17220:	b	171f8 <__assert_fail@plt+0x5de4>
   17224:	mov	r0, #8
   17228:	bl	1ecbc <__assert_fail@plt+0xd8a8>
   1722c:	cmp	r0, #0
   17230:	bne	171e8 <__assert_fail@plt+0x5dd4>
   17234:	mov	r0, r9
   17238:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1723c:	bl	113f0 <abort@plt>
   17240:	ldr	r0, [r0, #8]
   17244:	bx	lr
   17248:	ldr	r0, [r0, #12]
   1724c:	bx	lr
   17250:	ldr	r0, [r0, #16]
   17254:	bx	lr
   17258:	ldm	r0, {r1, ip}
   1725c:	mov	r0, #0
   17260:	cmp	r1, ip
   17264:	bcs	172ac <__assert_fail@plt+0x5e98>
   17268:	ldr	r3, [r1]
   1726c:	cmp	r3, #0
   17270:	beq	1729c <__assert_fail@plt+0x5e88>
   17274:	ldr	r3, [r1, #4]
   17278:	mov	r2, #1
   1727c:	cmp	r3, #0
   17280:	beq	17294 <__assert_fail@plt+0x5e80>
   17284:	ldr	r3, [r3, #4]
   17288:	add	r2, r2, #1
   1728c:	cmp	r3, #0
   17290:	bne	17284 <__assert_fail@plt+0x5e70>
   17294:	cmp	r0, r2
   17298:	movcc	r0, r2
   1729c:	add	r1, r1, #8
   172a0:	cmp	r1, ip
   172a4:	bcc	17268 <__assert_fail@plt+0x5e54>
   172a8:	bx	lr
   172ac:	bx	lr
   172b0:	push	{lr}		; (str lr, [sp, #-4]!)
   172b4:	mov	r2, #0
   172b8:	ldm	r0, {r1, lr}
   172bc:	mov	ip, r2
   172c0:	cmp	r1, lr
   172c4:	bcs	17304 <__assert_fail@plt+0x5ef0>
   172c8:	ldr	r3, [r1]
   172cc:	cmp	r3, #0
   172d0:	beq	172f8 <__assert_fail@plt+0x5ee4>
   172d4:	ldr	r3, [r1, #4]
   172d8:	add	ip, ip, #1
   172dc:	cmp	r3, #0
   172e0:	add	r2, r2, #1
   172e4:	beq	172f8 <__assert_fail@plt+0x5ee4>
   172e8:	ldr	r3, [r3, #4]
   172ec:	add	r2, r2, #1
   172f0:	cmp	r3, #0
   172f4:	bne	172e8 <__assert_fail@plt+0x5ed4>
   172f8:	add	r1, r1, #8
   172fc:	cmp	r1, lr
   17300:	bcc	172c8 <__assert_fail@plt+0x5eb4>
   17304:	ldr	r3, [r0, #12]
   17308:	cmp	r3, ip
   1730c:	ldreq	r0, [r0, #16]
   17310:	subeq	r0, r0, r2
   17314:	clzeq	r0, r0
   17318:	lsreq	r0, r0, #5
   1731c:	movne	r0, #0
   17320:	pop	{pc}		; (ldr pc, [sp], #4)
   17324:	push	{r4, r5, r6, r7, lr}
   17328:	mov	r5, r1
   1732c:	ldm	r0, {ip, lr}
   17330:	sub	sp, sp, #12
   17334:	ldr	r3, [r0, #16]
   17338:	cmp	ip, lr
   1733c:	mov	r4, #0
   17340:	ldr	r6, [r0, #8]
   17344:	ldr	r7, [r0, #12]
   17348:	bcs	1738c <__assert_fail@plt+0x5f78>
   1734c:	ldr	r2, [ip]
   17350:	cmp	r2, #0
   17354:	beq	17380 <__assert_fail@plt+0x5f6c>
   17358:	ldr	r2, [ip, #4]
   1735c:	mov	r1, #1
   17360:	cmp	r2, #0
   17364:	beq	17378 <__assert_fail@plt+0x5f64>
   17368:	ldr	r2, [r2, #4]
   1736c:	add	r1, r1, #1
   17370:	cmp	r2, #0
   17374:	bne	17368 <__assert_fail@plt+0x5f54>
   17378:	cmp	r4, r1
   1737c:	movcc	r4, r1
   17380:	add	ip, ip, #8
   17384:	cmp	ip, lr
   17388:	bcc	1734c <__assert_fail@plt+0x5f38>
   1738c:	ldr	r2, [pc, #116]	; 17408 <__assert_fail@plt+0x5ff4>
   17390:	mov	r1, #1
   17394:	mov	r0, r5
   17398:	bl	11324 <__fprintf_chk@plt>
   1739c:	mov	r3, r6
   173a0:	ldr	r2, [pc, #100]	; 1740c <__assert_fail@plt+0x5ff8>
   173a4:	mov	r1, #1
   173a8:	mov	r0, r5
   173ac:	bl	11324 <__fprintf_chk@plt>
   173b0:	vmov	s15, r7
   173b4:	vldr	d5, [pc, #68]	; 17400 <__assert_fail@plt+0x5fec>
   173b8:	mov	r3, r7
   173bc:	ldr	r2, [pc, #76]	; 17410 <__assert_fail@plt+0x5ffc>
   173c0:	vcvt.f64.u32	d6, s15
   173c4:	vmov	s15, r6
   173c8:	mov	r1, #1
   173cc:	mov	r0, r5
   173d0:	vcvt.f64.u32	d7, s15
   173d4:	vmul.f64	d6, d6, d5
   173d8:	vdiv.f64	d5, d6, d7
   173dc:	vstr	d5, [sp]
   173e0:	bl	11324 <__fprintf_chk@plt>
   173e4:	mov	r3, r4
   173e8:	mov	r0, r5
   173ec:	ldr	r2, [pc, #32]	; 17414 <__assert_fail@plt+0x6000>
   173f0:	mov	r1, #1
   173f4:	add	sp, sp, #12
   173f8:	pop	{r4, r5, r6, r7, lr}
   173fc:	b	11324 <__fprintf_chk@plt>
   17400:	andeq	r0, r0, r0
   17404:	subsmi	r0, r9, r0
   17408:	muleq	r2, r8, lr
   1740c:			; <UNDEFINED> instruction: 0x00020eb0
   17410:	andeq	r0, r2, r8, asr #29
   17414:	andeq	r0, r2, ip, ror #29
   17418:	push	{r4, r5, r6, lr}
   1741c:	mov	r5, r1
   17420:	ldr	r3, [r0, #24]
   17424:	mov	r6, r0
   17428:	ldr	r1, [r0, #8]
   1742c:	mov	r0, r5
   17430:	blx	r3
   17434:	ldr	r3, [r6, #8]
   17438:	cmp	r0, r3
   1743c:	bcs	1749c <__assert_fail@plt+0x6088>
   17440:	ldr	r3, [r6]
   17444:	add	r4, r3, r0, lsl #3
   17448:	ldr	r1, [r3, r0, lsl #3]
   1744c:	cmp	r1, #0
   17450:	bne	1745c <__assert_fail@plt+0x6048>
   17454:	b	17484 <__assert_fail@plt+0x6070>
   17458:	ldr	r1, [r4]
   1745c:	cmp	r5, r1
   17460:	beq	1748c <__assert_fail@plt+0x6078>
   17464:	ldr	r3, [r6, #28]
   17468:	mov	r0, r5
   1746c:	blx	r3
   17470:	cmp	r0, #0
   17474:	bne	17494 <__assert_fail@plt+0x6080>
   17478:	ldr	r4, [r4, #4]
   1747c:	cmp	r4, #0
   17480:	bne	17458 <__assert_fail@plt+0x6044>
   17484:	mov	r0, #0
   17488:	pop	{r4, r5, r6, pc}
   1748c:	mov	r0, r5
   17490:	pop	{r4, r5, r6, pc}
   17494:	ldr	r0, [r4]
   17498:	pop	{r4, r5, r6, pc}
   1749c:	bl	113f0 <abort@plt>
   174a0:	ldr	r3, [r0, #16]
   174a4:	cmp	r3, #0
   174a8:	beq	174dc <__assert_fail@plt+0x60c8>
   174ac:	ldr	r3, [r0]
   174b0:	ldr	r2, [r0, #4]
   174b4:	cmp	r3, r2
   174b8:	bcc	174cc <__assert_fail@plt+0x60b8>
   174bc:	b	174e4 <__assert_fail@plt+0x60d0>
   174c0:	add	r3, r3, #8
   174c4:	cmp	r3, r2
   174c8:	bcs	174e4 <__assert_fail@plt+0x60d0>
   174cc:	ldr	r0, [r3]
   174d0:	cmp	r0, #0
   174d4:	beq	174c0 <__assert_fail@plt+0x60ac>
   174d8:	bx	lr
   174dc:	mov	r0, r3
   174e0:	bx	lr
   174e4:	push	{r4, lr}
   174e8:	bl	113f0 <abort@plt>
   174ec:	push	{r4, r5, r6, lr}
   174f0:	mov	r4, r1
   174f4:	ldr	r3, [r0, #24]
   174f8:	mov	r5, r0
   174fc:	ldr	r1, [r0, #8]
   17500:	mov	r0, r4
   17504:	blx	r3
   17508:	ldr	r3, [r5, #8]
   1750c:	cmp	r0, r3
   17510:	bcs	17574 <__assert_fail@plt+0x6160>
   17514:	ldr	r3, [r5]
   17518:	add	r0, r3, r0, lsl #3
   1751c:	mov	r3, r0
   17520:	b	1752c <__assert_fail@plt+0x6118>
   17524:	cmp	r3, #0
   17528:	beq	17540 <__assert_fail@plt+0x612c>
   1752c:	ldm	r3, {r2, r3}
   17530:	cmp	r4, r2
   17534:	bne	17524 <__assert_fail@plt+0x6110>
   17538:	cmp	r3, #0
   1753c:	bne	1756c <__assert_fail@plt+0x6158>
   17540:	ldr	r2, [r5, #4]
   17544:	mov	r3, r0
   17548:	b	17558 <__assert_fail@plt+0x6144>
   1754c:	ldr	r0, [r3]
   17550:	cmp	r0, #0
   17554:	popne	{r4, r5, r6, pc}
   17558:	add	r3, r3, #8
   1755c:	cmp	r3, r2
   17560:	bcc	1754c <__assert_fail@plt+0x6138>
   17564:	mov	r0, #0
   17568:	pop	{r4, r5, r6, pc}
   1756c:	ldr	r0, [r3]
   17570:	pop	{r4, r5, r6, pc}
   17574:	bl	113f0 <abort@plt>
   17578:	push	{r4, r5, r6, lr}
   1757c:	mov	r5, r0
   17580:	ldr	r4, [r0]
   17584:	ldr	r0, [r0, #4]
   17588:	cmp	r4, r0
   1758c:	bcs	17608 <__assert_fail@plt+0x61f4>
   17590:	add	r4, r4, #8
   17594:	mov	ip, #0
   17598:	ldr	r3, [r4, #-8]
   1759c:	mov	r6, r4
   175a0:	cmp	r3, #0
   175a4:	beq	175f0 <__assert_fail@plt+0x61dc>
   175a8:	cmp	r2, ip
   175ac:	bls	175fc <__assert_fail@plt+0x61e8>
   175b0:	str	r3, [r1, ip, lsl #2]
   175b4:	ldr	r3, [r4, #-4]
   175b8:	add	r0, ip, #1
   175bc:	cmp	r3, #0
   175c0:	add	ip, r1, ip, lsl #2
   175c4:	beq	175e8 <__assert_fail@plt+0x61d4>
   175c8:	cmp	r2, r0
   175cc:	beq	17604 <__assert_fail@plt+0x61f0>
   175d0:	ldr	lr, [r3]
   175d4:	add	r0, r0, #1
   175d8:	str	lr, [ip, #4]!
   175dc:	ldr	r3, [r3, #4]
   175e0:	cmp	r3, #0
   175e4:	bne	175c8 <__assert_fail@plt+0x61b4>
   175e8:	mov	ip, r0
   175ec:	ldr	r0, [r5, #4]
   175f0:	cmp	r0, r6
   175f4:	add	r4, r4, #8
   175f8:	bhi	17598 <__assert_fail@plt+0x6184>
   175fc:	mov	r0, ip
   17600:	pop	{r4, r5, r6, pc}
   17604:	pop	{r4, r5, r6, pc}
   17608:	mov	r0, #0
   1760c:	pop	{r4, r5, r6, pc}
   17610:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17614:	ldr	r3, [r0, #4]
   17618:	ldr	r8, [r0]
   1761c:	cmp	r8, r3
   17620:	bcs	17684 <__assert_fail@plt+0x6270>
   17624:	mov	r7, r2
   17628:	mov	r6, r1
   1762c:	mov	r9, r0
   17630:	mov	r5, #0
   17634:	ldr	r0, [r8]
   17638:	cmp	r0, #0
   1763c:	beq	17670 <__assert_fail@plt+0x625c>
   17640:	mov	r4, r8
   17644:	b	1764c <__assert_fail@plt+0x6238>
   17648:	ldr	r0, [r4]
   1764c:	mov	r1, r7
   17650:	blx	r6
   17654:	cmp	r0, #0
   17658:	beq	1767c <__assert_fail@plt+0x6268>
   1765c:	ldr	r4, [r4, #4]
   17660:	add	r5, r5, #1
   17664:	cmp	r4, #0
   17668:	bne	17648 <__assert_fail@plt+0x6234>
   1766c:	ldr	r3, [r9, #4]
   17670:	add	r8, r8, #8
   17674:	cmp	r3, r8
   17678:	bhi	17634 <__assert_fail@plt+0x6220>
   1767c:	mov	r0, r5
   17680:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17684:	mov	r5, #0
   17688:	b	1767c <__assert_fail@plt+0x6268>
   1768c:	push	{r4, r5, r6, lr}
   17690:	mov	r4, r0
   17694:	ldrb	r0, [r0]
   17698:	cmp	r0, #0
   1769c:	beq	176cc <__assert_fail@plt+0x62b8>
   176a0:	mov	r5, r1
   176a4:	mov	r1, #0
   176a8:	rsb	r1, r1, r1, lsl #5
   176ac:	add	r0, r1, r0
   176b0:	mov	r1, r5
   176b4:	bl	1f46c <__assert_fail@plt+0xe058>
   176b8:	ldrb	r0, [r4, #1]!
   176bc:	cmp	r0, #0
   176c0:	bne	176a8 <__assert_fail@plt+0x6294>
   176c4:	mov	r0, r1
   176c8:	pop	{r4, r5, r6, pc}
   176cc:	mov	r1, r0
   176d0:	b	176c4 <__assert_fail@plt+0x62b0>
   176d4:	push	{lr}		; (str lr, [sp, #-4]!)
   176d8:	mov	ip, r0
   176dc:	ldr	lr, [pc, #16]	; 176f4 <__assert_fail@plt+0x62e0>
   176e0:	ldm	lr!, {r0, r1, r2, r3}
   176e4:	ldr	lr, [lr]
   176e8:	stmia	ip!, {r0, r1, r2, r3}
   176ec:	str	lr, [ip]
   176f0:	pop	{pc}		; (ldr pc, [sp], #4)
   176f4:	andeq	r0, r2, r4, lsl #29
   176f8:	cmp	r2, #0
   176fc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17700:	mov	r4, r0
   17704:	ldr	sl, [pc, #548]	; 17930 <__assert_fail@plt+0x651c>
   17708:	mov	r0, #40	; 0x28
   1770c:	movne	sl, r2
   17710:	cmp	r3, #0
   17714:	ldr	fp, [pc, #536]	; 17934 <__assert_fail@plt+0x6520>
   17718:	mov	r5, r1
   1771c:	movne	fp, r3
   17720:	bl	1ecbc <__assert_fail@plt+0xd8a8>
   17724:	subs	r8, r0, #0
   17728:	beq	177c0 <__assert_fail@plt+0x63ac>
   1772c:	cmp	r5, #0
   17730:	ldr	r3, [pc, #512]	; 17938 <__assert_fail@plt+0x6524>
   17734:	beq	177c8 <__assert_fail@plt+0x63b4>
   17738:	cmp	r5, r3
   1773c:	str	r5, [r8, #20]
   17740:	beq	177cc <__assert_fail@plt+0x63b8>
   17744:	vldr	s15, [r5, #8]
   17748:	vldr	s14, [pc, #456]	; 17918 <__assert_fail@plt+0x6504>
   1774c:	vcmpe.f32	s15, s14
   17750:	vmrs	APSR_nzcv, fpscr
   17754:	ble	177b0 <__assert_fail@plt+0x639c>
   17758:	vldr	s13, [pc, #444]	; 1791c <__assert_fail@plt+0x6508>
   1775c:	vcmpe.f32	s15, s13
   17760:	vmrs	APSR_nzcv, fpscr
   17764:	bpl	177b0 <__assert_fail@plt+0x639c>
   17768:	vldr	s13, [pc, #432]	; 17920 <__assert_fail@plt+0x650c>
   1776c:	vldr	s12, [r5, #12]
   17770:	vcmpe.f32	s12, s13
   17774:	vmrs	APSR_nzcv, fpscr
   17778:	ble	177b0 <__assert_fail@plt+0x639c>
   1777c:	vldr	s13, [r5]
   17780:	vcmpe.f32	s13, #0.0
   17784:	vmrs	APSR_nzcv, fpscr
   17788:	blt	177b0 <__assert_fail@plt+0x639c>
   1778c:	vadd.f32	s14, s13, s14
   17790:	vldr	s13, [r5, #4]
   17794:	vcmpe.f32	s14, s13
   17798:	vmrs	APSR_nzcv, fpscr
   1779c:	bpl	177b0 <__assert_fail@plt+0x639c>
   177a0:	vldr	s12, [pc, #380]	; 17924 <__assert_fail@plt+0x6510>
   177a4:	vcmpe.f32	s13, s12
   177a8:	vmrs	APSR_nzcv, fpscr
   177ac:	bls	178fc <__assert_fail@plt+0x64e8>
   177b0:	str	r3, [r8, #20]
   177b4:	mov	r0, r8
   177b8:	bl	16f1c <__assert_fail@plt+0x5b08>
   177bc:	mov	r8, #0
   177c0:	mov	r0, r8
   177c4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177c8:	str	r3, [r8, #20]
   177cc:	vldr	s15, [pc, #340]	; 17928 <__assert_fail@plt+0x6514>
   177d0:	vmov	s14, r4
   177d4:	vldr	s13, [pc, #336]	; 1792c <__assert_fail@plt+0x6518>
   177d8:	vcvt.f32.u32	s12, s14
   177dc:	vdiv.f32	s14, s12, s15
   177e0:	vcmpe.f32	s14, s13
   177e4:	vmrs	APSR_nzcv, fpscr
   177e8:	bge	178e8 <__assert_fail@plt+0x64d4>
   177ec:	vcvt.u32.f32	s15, s14
   177f0:	vmov	r4, s15
   177f4:	cmp	r4, #10
   177f8:	movcc	r4, #10
   177fc:	orr	r7, r4, #1
   17800:	cmn	r7, #1
   17804:	ldrne	r9, [pc, #304]	; 1793c <__assert_fail@plt+0x6528>
   17808:	beq	17880 <__assert_fail@plt+0x646c>
   1780c:	cmp	r7, #9
   17810:	bls	178f4 <__assert_fail@plt+0x64e0>
   17814:	umull	r2, r3, r9, r7
   17818:	lsr	r3, r3, #1
   1781c:	add	r3, r3, r3, lsl #1
   17820:	cmp	r7, r3
   17824:	beq	17874 <__assert_fail@plt+0x6460>
   17828:	mov	r6, #16
   1782c:	mov	r5, #9
   17830:	mov	r4, #3
   17834:	b	17848 <__assert_fail@plt+0x6434>
   17838:	bl	1f46c <__assert_fail@plt+0xe058>
   1783c:	add	r6, r6, #8
   17840:	cmp	r1, #0
   17844:	beq	17874 <__assert_fail@plt+0x6460>
   17848:	add	r5, r5, r6
   1784c:	add	r4, r4, #2
   17850:	cmp	r5, r7
   17854:	mov	r0, r7
   17858:	mov	r1, r4
   1785c:	bcc	17838 <__assert_fail@plt+0x6424>
   17860:	mov	r1, r4
   17864:	mov	r0, r7
   17868:	bl	1f46c <__assert_fail@plt+0xe058>
   1786c:	cmp	r1, #0
   17870:	bne	17880 <__assert_fail@plt+0x646c>
   17874:	add	r7, r7, #2
   17878:	cmn	r7, #1
   1787c:	bne	1780c <__assert_fail@plt+0x63f8>
   17880:	lsrs	r3, r7, #30
   17884:	movne	r4, #1
   17888:	moveq	r4, #0
   1788c:	tst	r7, #536870912	; 0x20000000
   17890:	bne	178e8 <__assert_fail@plt+0x64d4>
   17894:	cmp	r4, #0
   17898:	bne	178e8 <__assert_fail@plt+0x64d4>
   1789c:	str	r7, [r8, #8]
   178a0:	mov	r0, r7
   178a4:	mov	r1, #8
   178a8:	bl	1ec74 <__assert_fail@plt+0xd860>
   178ac:	cmp	r0, #0
   178b0:	str	r0, [r8]
   178b4:	beq	177b4 <__assert_fail@plt+0x63a0>
   178b8:	ldr	r3, [r8, #8]
   178bc:	str	r4, [r8, #12]
   178c0:	str	r4, [r8, #16]
   178c4:	add	r0, r0, r3, lsl #3
   178c8:	ldr	r3, [sp, #40]	; 0x28
   178cc:	str	r0, [r8, #4]
   178d0:	str	sl, [r8, #24]
   178d4:	str	fp, [r8, #28]
   178d8:	str	r3, [r8, #32]
   178dc:	str	r4, [r8, #36]	; 0x24
   178e0:	mov	r0, r8
   178e4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178e8:	mov	r3, #0
   178ec:	str	r3, [r8, #8]
   178f0:	b	177b4 <__assert_fail@plt+0x63a0>
   178f4:	mov	r4, #3
   178f8:	b	17860 <__assert_fail@plt+0x644c>
   178fc:	vcmpe.f32	s15, s14
   17900:	vmrs	APSR_nzcv, fpscr
   17904:	ble	177b0 <__assert_fail@plt+0x639c>
   17908:	ldrb	r3, [r5, #16]
   1790c:	cmp	r3, #0
   17910:	bne	177f4 <__assert_fail@plt+0x63e0>
   17914:	b	177d0 <__assert_fail@plt+0x63bc>
   17918:	stclcc	12, cr12, [ip, #820]	; 0x334
   1791c:	svccc	0x00666666
   17920:	svccc	0x008ccccd
   17924:	svccc	0x00800000
   17928:	svccc	0x004ccccd
   1792c:	svcmi	0x00800000
   17930:	andeq	r6, r1, r8, ror pc
   17934:	andeq	r6, r1, ip, lsl #31
   17938:	andeq	r0, r2, r4, lsl #29
   1793c:	bge	feac23f0 <optarg@@GLIBC_2.4+0xfea90228>
   17940:	push	{r4, r5, r6, r7, r8, lr}
   17944:	mov	r5, r0
   17948:	ldr	r7, [r0]
   1794c:	ldr	r3, [r0, #4]
   17950:	cmp	r7, r3
   17954:	addcc	r7, r7, #8
   17958:	movcc	r6, #0
   1795c:	bcs	179d8 <__assert_fail@plt+0x65c4>
   17960:	ldr	r2, [r7, #-8]
   17964:	mov	r8, r7
   17968:	cmp	r2, #0
   1796c:	beq	179cc <__assert_fail@plt+0x65b8>
   17970:	ldr	r4, [r7, #-4]
   17974:	ldr	r2, [r5, #32]
   17978:	cmp	r4, #0
   1797c:	beq	179b0 <__assert_fail@plt+0x659c>
   17980:	cmp	r2, #0
   17984:	beq	17994 <__assert_fail@plt+0x6580>
   17988:	ldr	r0, [r4]
   1798c:	blx	r2
   17990:	ldr	r2, [r5, #32]
   17994:	ldr	r3, [r4, #4]
   17998:	ldr	r1, [r5, #36]	; 0x24
   1799c:	str	r6, [r4]
   179a0:	str	r1, [r4, #4]
   179a4:	str	r4, [r5, #36]	; 0x24
   179a8:	subs	r4, r3, #0
   179ac:	bne	17980 <__assert_fail@plt+0x656c>
   179b0:	cmp	r2, #0
   179b4:	beq	179c0 <__assert_fail@plt+0x65ac>
   179b8:	ldr	r0, [r7, #-8]
   179bc:	blx	r2
   179c0:	str	r6, [r7, #-8]
   179c4:	str	r6, [r7, #-4]
   179c8:	ldr	r3, [r5, #4]
   179cc:	cmp	r3, r8
   179d0:	add	r7, r7, #8
   179d4:	bhi	17960 <__assert_fail@plt+0x654c>
   179d8:	mov	r3, #0
   179dc:	str	r3, [r5, #12]
   179e0:	str	r3, [r5, #16]
   179e4:	pop	{r4, r5, r6, r7, r8, pc}
   179e8:	ldr	r3, [r0, #32]
   179ec:	push	{r4, r5, r6, lr}
   179f0:	cmp	r3, #0
   179f4:	mov	r5, r0
   179f8:	beq	17a58 <__assert_fail@plt+0x6644>
   179fc:	ldr	r3, [r0, #16]
   17a00:	cmp	r3, #0
   17a04:	beq	17a58 <__assert_fail@plt+0x6644>
   17a08:	ldr	r6, [r0]
   17a0c:	ldr	r3, [r0, #4]
   17a10:	cmp	r6, r3
   17a14:	bcs	17a94 <__assert_fail@plt+0x6680>
   17a18:	ldr	r0, [r6]
   17a1c:	cmp	r0, #0
   17a20:	beq	17a48 <__assert_fail@plt+0x6634>
   17a24:	mov	r4, r6
   17a28:	b	17a30 <__assert_fail@plt+0x661c>
   17a2c:	ldr	r0, [r4]
   17a30:	ldr	r3, [r5, #32]
   17a34:	blx	r3
   17a38:	ldr	r4, [r4, #4]
   17a3c:	cmp	r4, #0
   17a40:	bne	17a2c <__assert_fail@plt+0x6618>
   17a44:	ldr	r3, [r5, #4]
   17a48:	add	r6, r6, #8
   17a4c:	cmp	r3, r6
   17a50:	bhi	17a18 <__assert_fail@plt+0x6604>
   17a54:	b	17a5c <__assert_fail@plt+0x6648>
   17a58:	ldr	r3, [r5, #4]
   17a5c:	ldr	r6, [r5]
   17a60:	cmp	r6, r3
   17a64:	bcs	17a94 <__assert_fail@plt+0x6680>
   17a68:	ldr	r0, [r6, #4]
   17a6c:	cmp	r0, #0
   17a70:	beq	17a88 <__assert_fail@plt+0x6674>
   17a74:	ldr	r4, [r0, #4]
   17a78:	bl	16f1c <__assert_fail@plt+0x5b08>
   17a7c:	subs	r0, r4, #0
   17a80:	bne	17a74 <__assert_fail@plt+0x6660>
   17a84:	ldr	r3, [r5, #4]
   17a88:	add	r6, r6, #8
   17a8c:	cmp	r3, r6
   17a90:	bhi	17a68 <__assert_fail@plt+0x6654>
   17a94:	ldr	r0, [r5, #36]	; 0x24
   17a98:	cmp	r0, #0
   17a9c:	beq	17ab0 <__assert_fail@plt+0x669c>
   17aa0:	ldr	r4, [r0, #4]
   17aa4:	bl	16f1c <__assert_fail@plt+0x5b08>
   17aa8:	subs	r0, r4, #0
   17aac:	bne	17aa0 <__assert_fail@plt+0x668c>
   17ab0:	ldr	r0, [r5]
   17ab4:	bl	16f1c <__assert_fail@plt+0x5b08>
   17ab8:	mov	r0, r5
   17abc:	pop	{r4, r5, r6, lr}
   17ac0:	b	16f1c <__assert_fail@plt+0x5b08>
   17ac4:	ldr	r3, [r0, #20]
   17ac8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17acc:	mov	r8, r0
   17ad0:	ldrb	r2, [r3, #16]
   17ad4:	sub	sp, sp, #40	; 0x28
   17ad8:	cmp	r2, #0
   17adc:	bne	17b08 <__assert_fail@plt+0x66f4>
   17ae0:	vmov	s15, r1
   17ae4:	vldr	s13, [r3, #8]
   17ae8:	vldr	s14, [pc, #648]	; 17d78 <__assert_fail@plt+0x6964>
   17aec:	vcvt.f32.u32	s12, s15
   17af0:	vdiv.f32	s15, s12, s13
   17af4:	vcmpe.f32	s15, s14
   17af8:	vmrs	APSR_nzcv, fpscr
   17afc:	bge	17d30 <__assert_fail@plt+0x691c>
   17b00:	vcvt.u32.f32	s15, s15
   17b04:	vmov	r1, s15
   17b08:	cmp	r1, #10
   17b0c:	movcc	r1, #10
   17b10:	orr	r7, r1, #1
   17b14:	cmn	r7, #1
   17b18:	ldrne	r9, [pc, #604]	; 17d7c <__assert_fail@plt+0x6968>
   17b1c:	beq	17b94 <__assert_fail@plt+0x6780>
   17b20:	cmp	r7, #9
   17b24:	bls	17d40 <__assert_fail@plt+0x692c>
   17b28:	umull	r2, r3, r9, r7
   17b2c:	lsr	r3, r3, #1
   17b30:	add	r3, r3, r3, lsl #1
   17b34:	cmp	r7, r3
   17b38:	beq	17b88 <__assert_fail@plt+0x6774>
   17b3c:	mov	r6, #16
   17b40:	mov	r5, #9
   17b44:	mov	r4, #3
   17b48:	b	17b64 <__assert_fail@plt+0x6750>
   17b4c:	mov	r1, r4
   17b50:	mov	r0, r7
   17b54:	bl	1f46c <__assert_fail@plt+0xe058>
   17b58:	add	r6, r6, #8
   17b5c:	cmp	r1, #0
   17b60:	beq	17b88 <__assert_fail@plt+0x6774>
   17b64:	add	r5, r5, r6
   17b68:	cmp	r5, r7
   17b6c:	add	r4, r4, #2
   17b70:	bcc	17b4c <__assert_fail@plt+0x6738>
   17b74:	mov	r1, r4
   17b78:	mov	r0, r7
   17b7c:	bl	1f46c <__assert_fail@plt+0xe058>
   17b80:	cmp	r1, #0
   17b84:	bne	17b94 <__assert_fail@plt+0x6780>
   17b88:	add	r7, r7, #2
   17b8c:	cmn	r7, #1
   17b90:	bne	17b20 <__assert_fail@plt+0x670c>
   17b94:	lsrs	r3, r7, #30
   17b98:	movne	r4, #1
   17b9c:	moveq	r4, #0
   17ba0:	tst	r7, #536870912	; 0x20000000
   17ba4:	bne	17d30 <__assert_fail@plt+0x691c>
   17ba8:	cmp	r4, #0
   17bac:	bne	17d30 <__assert_fail@plt+0x691c>
   17bb0:	ldr	r3, [r8, #8]
   17bb4:	cmp	r3, r7
   17bb8:	beq	17d20 <__assert_fail@plt+0x690c>
   17bbc:	mov	r1, #8
   17bc0:	mov	r0, r7
   17bc4:	bl	1ec74 <__assert_fail@plt+0xd860>
   17bc8:	cmp	r0, #0
   17bcc:	str	r0, [sp]
   17bd0:	beq	17d30 <__assert_fail@plt+0x691c>
   17bd4:	ldr	r1, [r8, #24]
   17bd8:	ldr	r5, [r8, #20]
   17bdc:	ldr	lr, [r8, #28]
   17be0:	ldr	ip, [r8, #32]
   17be4:	add	r0, r0, r7, lsl #3
   17be8:	ldr	r3, [r8, #36]	; 0x24
   17bec:	str	r0, [sp, #4]
   17bf0:	str	r1, [sp, #24]
   17bf4:	mov	r2, r4
   17bf8:	mov	r0, sp
   17bfc:	mov	r1, r8
   17c00:	str	r7, [sp, #8]
   17c04:	str	r4, [sp, #12]
   17c08:	str	r4, [sp, #16]
   17c0c:	str	r5, [sp, #20]
   17c10:	str	lr, [sp, #28]
   17c14:	str	ip, [sp, #32]
   17c18:	str	r3, [sp, #36]	; 0x24
   17c1c:	bl	170bc <__assert_fail@plt+0x5ca8>
   17c20:	subs	r9, r0, #0
   17c24:	bne	17d48 <__assert_fail@plt+0x6934>
   17c28:	ldr	r5, [sp]
   17c2c:	ldr	r2, [sp, #4]
   17c30:	ldr	r3, [sp, #36]	; 0x24
   17c34:	cmp	r5, r2
   17c38:	str	r3, [r8, #36]	; 0x24
   17c3c:	addcc	r5, r5, #8
   17c40:	movcc	r7, r9
   17c44:	bcs	17cf4 <__assert_fail@plt+0x68e0>
   17c48:	ldr	r3, [r5, #-8]
   17c4c:	mov	r6, r5
   17c50:	cmp	r3, #0
   17c54:	beq	17ce8 <__assert_fail@plt+0x68d4>
   17c58:	ldr	r4, [r5, #-4]
   17c5c:	cmp	r4, #0
   17c60:	beq	17ce4 <__assert_fail@plt+0x68d0>
   17c64:	ldr	r1, [r8, #8]
   17c68:	b	17c84 <__assert_fail@plt+0x6870>
   17c6c:	ldr	r3, [ip, #4]
   17c70:	cmp	r2, #0
   17c74:	str	r3, [r4, #4]
   17c78:	str	r4, [ip, #4]
   17c7c:	beq	17ce0 <__assert_fail@plt+0x68cc>
   17c80:	mov	r4, r2
   17c84:	ldr	sl, [r4]
   17c88:	ldr	r3, [r8, #24]
   17c8c:	mov	r0, sl
   17c90:	blx	r3
   17c94:	ldr	r1, [r8, #8]
   17c98:	cmp	r0, r1
   17c9c:	bcs	17d74 <__assert_fail@plt+0x6960>
   17ca0:	ldr	r3, [r8]
   17ca4:	ldr	r2, [r4, #4]
   17ca8:	add	ip, r3, r0, lsl #3
   17cac:	ldr	lr, [r3, r0, lsl #3]
   17cb0:	cmp	lr, #0
   17cb4:	bne	17c6c <__assert_fail@plt+0x6858>
   17cb8:	ldr	ip, [r8, #12]
   17cbc:	str	sl, [r3, r0, lsl #3]
   17cc0:	add	r3, ip, #1
   17cc4:	str	r3, [r8, #12]
   17cc8:	str	lr, [r4]
   17ccc:	ldr	r3, [r8, #36]	; 0x24
   17cd0:	cmp	r2, #0
   17cd4:	str	r3, [r4, #4]
   17cd8:	str	r4, [r8, #36]	; 0x24
   17cdc:	bne	17c80 <__assert_fail@plt+0x686c>
   17ce0:	ldr	r2, [sp, #4]
   17ce4:	str	r7, [r5, #-4]
   17ce8:	cmp	r6, r2
   17cec:	add	r5, r5, #8
   17cf0:	bcc	17c48 <__assert_fail@plt+0x6834>
   17cf4:	mov	r1, sp
   17cf8:	mov	r0, r8
   17cfc:	mov	r2, #0
   17d00:	bl	170bc <__assert_fail@plt+0x5ca8>
   17d04:	cmp	r0, #0
   17d08:	beq	17d74 <__assert_fail@plt+0x6960>
   17d0c:	ldr	r0, [sp]
   17d10:	bl	16f1c <__assert_fail@plt+0x5b08>
   17d14:	mov	r0, r9
   17d18:	add	sp, sp, #40	; 0x28
   17d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17d20:	mov	r9, #1
   17d24:	mov	r0, r9
   17d28:	add	sp, sp, #40	; 0x28
   17d2c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17d30:	mov	r9, #0
   17d34:	mov	r0, r9
   17d38:	add	sp, sp, #40	; 0x28
   17d3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17d40:	mov	r4, #3
   17d44:	b	17b74 <__assert_fail@plt+0x6760>
   17d48:	ldr	r0, [r8]
   17d4c:	bl	16f1c <__assert_fail@plt+0x5b08>
   17d50:	ldmib	sp, {r0, r1, r2}
   17d54:	ldr	ip, [sp]
   17d58:	ldr	r3, [sp, #36]	; 0x24
   17d5c:	stmib	r8, {r0, r1, r2}
   17d60:	mov	r0, r9
   17d64:	str	ip, [r8]
   17d68:	str	r3, [r8, #36]	; 0x24
   17d6c:	add	sp, sp, #40	; 0x28
   17d70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17d74:	bl	113f0 <abort@plt>
   17d78:	svcmi	0x00800000
   17d7c:	bge	feac2830 <optarg@@GLIBC_2.4+0xfea90668>
   17d80:	push	{r4, r5, r6, r7, r8, r9, lr}
   17d84:	subs	r5, r1, #0
   17d88:	sub	sp, sp, #12
   17d8c:	beq	17fa8 <__assert_fail@plt+0x6b94>
   17d90:	ldr	r3, [r0, #24]
   17d94:	mov	r6, r0
   17d98:	ldr	r1, [r0, #8]
   17d9c:	mov	r0, r5
   17da0:	mov	r7, r2
   17da4:	blx	r3
   17da8:	ldr	r3, [r6, #8]
   17dac:	cmp	r0, r3
   17db0:	mov	r8, r0
   17db4:	bcs	17fa8 <__assert_fail@plt+0x6b94>
   17db8:	ldr	r9, [r6]
   17dbc:	add	r4, r9, r0, lsl #3
   17dc0:	ldr	r1, [r9, r0, lsl #3]
   17dc4:	str	r4, [sp, #4]
   17dc8:	cmp	r1, #0
   17dcc:	beq	17fac <__assert_fail@plt+0x6b98>
   17dd0:	cmp	r5, r1
   17dd4:	beq	17e2c <__assert_fail@plt+0x6a18>
   17dd8:	ldr	r3, [r6, #28]
   17ddc:	mov	r0, r5
   17de0:	blx	r3
   17de4:	cmp	r0, #0
   17de8:	bne	17e40 <__assert_fail@plt+0x6a2c>
   17dec:	ldr	r3, [r4, #4]
   17df0:	cmp	r3, #0
   17df4:	bne	17e20 <__assert_fail@plt+0x6a0c>
   17df8:	b	17e4c <__assert_fail@plt+0x6a38>
   17dfc:	ldr	r3, [r6, #28]
   17e00:	mov	r0, r5
   17e04:	blx	r3
   17e08:	cmp	r0, #0
   17e0c:	bne	17ec0 <__assert_fail@plt+0x6aac>
   17e10:	ldr	r4, [r4, #4]
   17e14:	ldr	r3, [r4, #4]
   17e18:	cmp	r3, #0
   17e1c:	beq	17e4c <__assert_fail@plt+0x6a38>
   17e20:	ldr	r1, [r3]
   17e24:	cmp	r5, r1
   17e28:	bne	17dfc <__assert_fail@plt+0x69e8>
   17e2c:	mov	r0, #0
   17e30:	cmp	r7, #0
   17e34:	strne	r1, [r7]
   17e38:	add	sp, sp, #12
   17e3c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17e40:	ldr	r1, [r9, r8, lsl #3]
   17e44:	cmp	r1, #0
   17e48:	bne	17e2c <__assert_fail@plt+0x6a18>
   17e4c:	vldr	s15, [r6, #8]
   17e50:	ldr	r3, [r6, #20]
   17e54:	vldr	s14, [r6, #12]
   17e58:	vcvt.f32.u32	s15, s15
   17e5c:	vldr	s13, [r3, #8]
   17e60:	vcvt.f32.u32	s14, s14
   17e64:	vmul.f32	s12, s13, s15
   17e68:	vcmpe.f32	s14, s12
   17e6c:	vmrs	APSR_nzcv, fpscr
   17e70:	bgt	17ecc <__assert_fail@plt+0x6ab8>
   17e74:	ldr	r4, [sp, #4]
   17e78:	ldr	r3, [r4]
   17e7c:	cmp	r3, #0
   17e80:	beq	18010 <__assert_fail@plt+0x6bfc>
   17e84:	ldr	r3, [r6, #36]	; 0x24
   17e88:	cmp	r3, #0
   17e8c:	beq	17ff8 <__assert_fail@plt+0x6be4>
   17e90:	ldr	r2, [r3, #4]
   17e94:	str	r2, [r6, #36]	; 0x24
   17e98:	ldr	r2, [r6, #16]
   17e9c:	ldr	r1, [r4, #4]
   17ea0:	add	r2, r2, #1
   17ea4:	str	r5, [r3]
   17ea8:	str	r1, [r3, #4]
   17eac:	mov	r0, #1
   17eb0:	str	r3, [r4, #4]
   17eb4:	str	r2, [r6, #16]
   17eb8:	add	sp, sp, #12
   17ebc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17ec0:	ldr	r3, [r4, #4]
   17ec4:	ldr	r1, [r3]
   17ec8:	b	17e44 <__assert_fail@plt+0x6a30>
   17ecc:	ldr	r2, [pc, #392]	; 1805c <__assert_fail@plt+0x6c48>
   17ed0:	cmp	r3, r2
   17ed4:	beq	17f58 <__assert_fail@plt+0x6b44>
   17ed8:	vldr	s12, [pc, #352]	; 18040 <__assert_fail@plt+0x6c2c>
   17edc:	vcmpe.f32	s13, s12
   17ee0:	vmrs	APSR_nzcv, fpscr
   17ee4:	ble	17f40 <__assert_fail@plt+0x6b2c>
   17ee8:	vldr	s11, [pc, #340]	; 18044 <__assert_fail@plt+0x6c30>
   17eec:	vcmpe.f32	s13, s11
   17ef0:	vmrs	APSR_nzcv, fpscr
   17ef4:	bpl	17f40 <__assert_fail@plt+0x6b2c>
   17ef8:	vldr	s11, [r3, #12]
   17efc:	vldr	s10, [pc, #324]	; 18048 <__assert_fail@plt+0x6c34>
   17f00:	vcmpe.f32	s11, s10
   17f04:	vmrs	APSR_nzcv, fpscr
   17f08:	ble	17f40 <__assert_fail@plt+0x6b2c>
   17f0c:	vldr	s10, [r3]
   17f10:	vcmpe.f32	s10, #0.0
   17f14:	vmrs	APSR_nzcv, fpscr
   17f18:	blt	17f40 <__assert_fail@plt+0x6b2c>
   17f1c:	vadd.f32	s12, s10, s12
   17f20:	vldr	s10, [r3, #4]
   17f24:	vcmpe.f32	s12, s10
   17f28:	vmrs	APSR_nzcv, fpscr
   17f2c:	bpl	17f40 <__assert_fail@plt+0x6b2c>
   17f30:	vldr	s9, [pc, #276]	; 1804c <__assert_fail@plt+0x6c38>
   17f34:	vcmpe.f32	s10, s9
   17f38:	vmrs	APSR_nzcv, fpscr
   17f3c:	bls	18020 <__assert_fail@plt+0x6c0c>
   17f40:	vldr	s13, [pc, #264]	; 18050 <__assert_fail@plt+0x6c3c>
   17f44:	str	r2, [r6, #20]
   17f48:	vmul.f32	s12, s15, s13
   17f4c:	vcmpe.f32	s12, s14
   17f50:	vmrs	APSR_nzcv, fpscr
   17f54:	bpl	17e74 <__assert_fail@plt+0x6a60>
   17f58:	vldr	s11, [pc, #244]	; 18054 <__assert_fail@plt+0x6c40>
   17f5c:	vmul.f32	s15, s15, s11
   17f60:	vmul.f32	s15, s15, s13
   17f64:	vldr	s14, [pc, #236]	; 18058 <__assert_fail@plt+0x6c44>
   17f68:	vcmpe.f32	s15, s14
   17f6c:	vmrs	APSR_nzcv, fpscr
   17f70:	bge	18018 <__assert_fail@plt+0x6c04>
   17f74:	vcvt.u32.f32	s15, s15
   17f78:	mov	r0, r6
   17f7c:	vmov	r1, s15
   17f80:	bl	17ac4 <__assert_fail@plt+0x66b0>
   17f84:	cmp	r0, #0
   17f88:	beq	18018 <__assert_fail@plt+0x6c04>
   17f8c:	mov	r3, #0
   17f90:	add	r2, sp, #4
   17f94:	mov	r1, r5
   17f98:	mov	r0, r6
   17f9c:	bl	16f9c <__assert_fail@plt+0x5b88>
   17fa0:	cmp	r0, #0
   17fa4:	beq	17e74 <__assert_fail@plt+0x6a60>
   17fa8:	bl	113f0 <abort@plt>
   17fac:	vmov	s15, r3
   17fb0:	ldr	r2, [r6, #12]
   17fb4:	ldr	r3, [r6, #20]
   17fb8:	vcvt.f32.u32	s15, s15
   17fbc:	vldr	s13, [r3, #8]
   17fc0:	vmov	s14, r2
   17fc4:	vcvt.f32.u32	s14, s14
   17fc8:	vmul.f32	s12, s13, s15
   17fcc:	vcmpe.f32	s14, s12
   17fd0:	vmrs	APSR_nzcv, fpscr
   17fd4:	bgt	17ecc <__assert_fail@plt+0x6ab8>
   17fd8:	ldr	r3, [r6, #16]
   17fdc:	add	r2, r2, #1
   17fe0:	add	r3, r3, #1
   17fe4:	str	r5, [r4]
   17fe8:	mov	r0, #1
   17fec:	str	r2, [r6, #12]
   17ff0:	str	r3, [r6, #16]
   17ff4:	b	17e38 <__assert_fail@plt+0x6a24>
   17ff8:	mov	r0, #8
   17ffc:	bl	1ecbc <__assert_fail@plt+0xd8a8>
   18000:	subs	r3, r0, #0
   18004:	beq	18018 <__assert_fail@plt+0x6c04>
   18008:	ldr	r4, [sp, #4]
   1800c:	b	17e98 <__assert_fail@plt+0x6a84>
   18010:	ldr	r2, [r6, #12]
   18014:	b	17fd8 <__assert_fail@plt+0x6bc4>
   18018:	mvn	r0, #0
   1801c:	b	17e38 <__assert_fail@plt+0x6a24>
   18020:	vcmpe.f32	s12, s13
   18024:	vmrs	APSR_nzcv, fpscr
   18028:	bpl	17f40 <__assert_fail@plt+0x6b2c>
   1802c:	ldrb	r3, [r3, #16]
   18030:	cmp	r3, #0
   18034:	vmulne.f32	s15, s11, s15
   18038:	bne	17f64 <__assert_fail@plt+0x6b50>
   1803c:	b	17f5c <__assert_fail@plt+0x6b48>
   18040:	stclcc	12, cr12, [ip, #820]	; 0x334
   18044:	svccc	0x00666666
   18048:	svccc	0x008ccccd
   1804c:	svccc	0x00800000
   18050:	svccc	0x004ccccd
   18054:	svccc	0x00b4fdf4
   18058:	svcmi	0x00800000
   1805c:	andeq	r0, r2, r4, lsl #29
   18060:	push	{r4, r5, r6, r7, r8, lr}
   18064:	subs	r5, r1, #0
   18068:	sub	sp, sp, #8
   1806c:	beq	18270 <__assert_fail@plt+0x6e5c>
   18070:	ldr	r3, [r0, #24]
   18074:	mov	r6, r0
   18078:	ldr	r1, [r0, #8]
   1807c:	mov	r0, r5
   18080:	blx	r3
   18084:	ldr	r3, [r6, #8]
   18088:	cmp	r0, r3
   1808c:	mov	r7, r0
   18090:	bcs	18270 <__assert_fail@plt+0x6e5c>
   18094:	ldr	r8, [r6]
   18098:	add	r4, r8, r0, lsl #3
   1809c:	ldr	r1, [r8, r0, lsl #3]
   180a0:	str	r4, [sp, #4]
   180a4:	cmp	r1, #0
   180a8:	beq	18274 <__assert_fail@plt+0x6e60>
   180ac:	cmp	r5, r1
   180b0:	beq	180d4 <__assert_fail@plt+0x6cc0>
   180b4:	ldr	r3, [r6, #28]
   180b8:	mov	r0, r5
   180bc:	blx	r3
   180c0:	cmp	r0, #0
   180c4:	beq	18104 <__assert_fail@plt+0x6cf0>
   180c8:	ldr	r1, [r8, r7, lsl #3]
   180cc:	cmp	r1, #0
   180d0:	beq	18110 <__assert_fail@plt+0x6cfc>
   180d4:	mov	r0, r1
   180d8:	add	sp, sp, #8
   180dc:	pop	{r4, r5, r6, r7, r8, pc}
   180e0:	ldr	r1, [r3]
   180e4:	cmp	r5, r1
   180e8:	beq	180d4 <__assert_fail@plt+0x6cc0>
   180ec:	ldr	r3, [r6, #28]
   180f0:	mov	r0, r5
   180f4:	blx	r3
   180f8:	cmp	r0, #0
   180fc:	bne	18188 <__assert_fail@plt+0x6d74>
   18100:	ldr	r4, [r4, #4]
   18104:	ldr	r3, [r4, #4]
   18108:	cmp	r3, #0
   1810c:	bne	180e0 <__assert_fail@plt+0x6ccc>
   18110:	vldr	s15, [r6, #8]
   18114:	ldr	r3, [r6, #20]
   18118:	vldr	s14, [r6, #12]
   1811c:	vcvt.f32.u32	s15, s15
   18120:	vldr	s13, [r3, #8]
   18124:	vcvt.f32.u32	s14, s14
   18128:	vmul.f32	s12, s13, s15
   1812c:	vcmpe.f32	s14, s12
   18130:	vmrs	APSR_nzcv, fpscr
   18134:	bgt	18194 <__assert_fail@plt+0x6d80>
   18138:	ldr	r4, [sp, #4]
   1813c:	ldr	r3, [r4]
   18140:	cmp	r3, #0
   18144:	beq	182d4 <__assert_fail@plt+0x6ec0>
   18148:	ldr	r0, [r6, #36]	; 0x24
   1814c:	cmp	r0, #0
   18150:	beq	182bc <__assert_fail@plt+0x6ea8>
   18154:	ldr	r3, [r0, #4]
   18158:	str	r3, [r6, #36]	; 0x24
   1815c:	ldr	r3, [r6, #16]
   18160:	ldr	r2, [r4, #4]
   18164:	add	r3, r3, #1
   18168:	str	r5, [r0]
   1816c:	str	r2, [r0, #4]
   18170:	str	r0, [r4, #4]
   18174:	str	r3, [r6, #16]
   18178:	mov	r1, r5
   1817c:	mov	r0, r1
   18180:	add	sp, sp, #8
   18184:	pop	{r4, r5, r6, r7, r8, pc}
   18188:	ldr	r3, [r4, #4]
   1818c:	ldr	r1, [r3]
   18190:	b	180cc <__assert_fail@plt+0x6cb8>
   18194:	ldr	r2, [pc, #388]	; 18320 <__assert_fail@plt+0x6f0c>
   18198:	cmp	r3, r2
   1819c:	beq	18220 <__assert_fail@plt+0x6e0c>
   181a0:	vldr	s12, [pc, #348]	; 18304 <__assert_fail@plt+0x6ef0>
   181a4:	vcmpe.f32	s13, s12
   181a8:	vmrs	APSR_nzcv, fpscr
   181ac:	ble	18208 <__assert_fail@plt+0x6df4>
   181b0:	vldr	s11, [pc, #336]	; 18308 <__assert_fail@plt+0x6ef4>
   181b4:	vcmpe.f32	s13, s11
   181b8:	vmrs	APSR_nzcv, fpscr
   181bc:	bpl	18208 <__assert_fail@plt+0x6df4>
   181c0:	vldr	s11, [r3, #12]
   181c4:	vldr	s10, [pc, #320]	; 1830c <__assert_fail@plt+0x6ef8>
   181c8:	vcmpe.f32	s11, s10
   181cc:	vmrs	APSR_nzcv, fpscr
   181d0:	ble	18208 <__assert_fail@plt+0x6df4>
   181d4:	vldr	s10, [r3]
   181d8:	vcmpe.f32	s10, #0.0
   181dc:	vmrs	APSR_nzcv, fpscr
   181e0:	blt	18208 <__assert_fail@plt+0x6df4>
   181e4:	vadd.f32	s12, s10, s12
   181e8:	vldr	s10, [r3, #4]
   181ec:	vcmpe.f32	s12, s10
   181f0:	vmrs	APSR_nzcv, fpscr
   181f4:	bpl	18208 <__assert_fail@plt+0x6df4>
   181f8:	vldr	s9, [pc, #272]	; 18310 <__assert_fail@plt+0x6efc>
   181fc:	vcmpe.f32	s10, s9
   18200:	vmrs	APSR_nzcv, fpscr
   18204:	bls	182e4 <__assert_fail@plt+0x6ed0>
   18208:	vldr	s13, [pc, #260]	; 18314 <__assert_fail@plt+0x6f00>
   1820c:	str	r2, [r6, #20]
   18210:	vmul.f32	s12, s15, s13
   18214:	vcmpe.f32	s12, s14
   18218:	vmrs	APSR_nzcv, fpscr
   1821c:	bpl	18138 <__assert_fail@plt+0x6d24>
   18220:	vldr	s11, [pc, #240]	; 18318 <__assert_fail@plt+0x6f04>
   18224:	vmul.f32	s15, s15, s11
   18228:	vmul.f32	s15, s15, s13
   1822c:	vldr	s14, [pc, #232]	; 1831c <__assert_fail@plt+0x6f08>
   18230:	vcmpe.f32	s15, s14
   18234:	vmrs	APSR_nzcv, fpscr
   18238:	bge	182dc <__assert_fail@plt+0x6ec8>
   1823c:	vcvt.u32.f32	s15, s15
   18240:	mov	r0, r6
   18244:	vmov	r1, s15
   18248:	bl	17ac4 <__assert_fail@plt+0x66b0>
   1824c:	cmp	r0, #0
   18250:	beq	182dc <__assert_fail@plt+0x6ec8>
   18254:	mov	r3, #0
   18258:	add	r2, sp, #4
   1825c:	mov	r1, r5
   18260:	mov	r0, r6
   18264:	bl	16f9c <__assert_fail@plt+0x5b88>
   18268:	cmp	r0, #0
   1826c:	beq	18138 <__assert_fail@plt+0x6d24>
   18270:	bl	113f0 <abort@plt>
   18274:	vmov	s15, r3
   18278:	ldr	r2, [r6, #12]
   1827c:	ldr	r3, [r6, #20]
   18280:	vcvt.f32.u32	s15, s15
   18284:	vldr	s13, [r3, #8]
   18288:	vmov	s14, r2
   1828c:	vcvt.f32.u32	s14, s14
   18290:	vmul.f32	s12, s15, s13
   18294:	vcmpe.f32	s12, s14
   18298:	vmrs	APSR_nzcv, fpscr
   1829c:	bmi	18194 <__assert_fail@plt+0x6d80>
   182a0:	ldr	r3, [r6, #16]
   182a4:	add	r2, r2, #1
   182a8:	add	r3, r3, #1
   182ac:	str	r5, [r4]
   182b0:	str	r2, [r6, #12]
   182b4:	str	r3, [r6, #16]
   182b8:	b	18178 <__assert_fail@plt+0x6d64>
   182bc:	mov	r0, #8
   182c0:	bl	1ecbc <__assert_fail@plt+0xd8a8>
   182c4:	cmp	r0, #0
   182c8:	beq	182dc <__assert_fail@plt+0x6ec8>
   182cc:	ldr	r4, [sp, #4]
   182d0:	b	1815c <__assert_fail@plt+0x6d48>
   182d4:	ldr	r2, [r6, #12]
   182d8:	b	182a0 <__assert_fail@plt+0x6e8c>
   182dc:	mov	r1, #0
   182e0:	b	180d4 <__assert_fail@plt+0x6cc0>
   182e4:	vcmpe.f32	s12, s13
   182e8:	vmrs	APSR_nzcv, fpscr
   182ec:	bpl	18208 <__assert_fail@plt+0x6df4>
   182f0:	ldrb	r3, [r3, #16]
   182f4:	cmp	r3, #0
   182f8:	vmulne.f32	s15, s11, s15
   182fc:	bne	1822c <__assert_fail@plt+0x6e18>
   18300:	b	18224 <__assert_fail@plt+0x6e10>
   18304:	stclcc	12, cr12, [ip, #820]	; 0x334
   18308:	svccc	0x00666666
   1830c:	svccc	0x008ccccd
   18310:	svccc	0x00800000
   18314:	svccc	0x004ccccd
   18318:	svccc	0x00b4fdf4
   1831c:	svcmi	0x00800000
   18320:	andeq	r0, r2, r4, lsl #29
   18324:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18328:	mov	r7, r1
   1832c:	ldr	r3, [r0, #24]
   18330:	mov	r6, r0
   18334:	ldr	r1, [r0, #8]
   18338:	mov	r0, r7
   1833c:	blx	r3
   18340:	ldr	r3, [r6, #8]
   18344:	cmp	r0, r3
   18348:	bcs	18574 <__assert_fail@plt+0x7160>
   1834c:	ldr	r9, [r6]
   18350:	mov	r8, r0
   18354:	add	r5, r9, r0, lsl #3
   18358:	ldr	r4, [r9, r0, lsl #3]
   1835c:	cmp	r4, #0
   18360:	beq	1840c <__assert_fail@plt+0x6ff8>
   18364:	cmp	r7, r4
   18368:	beq	18388 <__assert_fail@plt+0x6f74>
   1836c:	mov	r1, r4
   18370:	ldr	r3, [r6, #28]
   18374:	mov	r0, r7
   18378:	blx	r3
   1837c:	cmp	r0, #0
   18380:	beq	18400 <__assert_fail@plt+0x6fec>
   18384:	ldr	r4, [r9, r8, lsl #3]
   18388:	ldr	r3, [r5, #4]
   1838c:	cmp	r3, #0
   18390:	movne	r2, #0
   18394:	ldmne	r3, {r0, r1}
   18398:	streq	r3, [r9, r8, lsl #3]
   1839c:	stmne	r5, {r0, r1}
   183a0:	strne	r2, [r3]
   183a4:	ldrne	r2, [r6, #36]	; 0x24
   183a8:	strne	r2, [r3, #4]
   183ac:	strne	r3, [r6, #36]	; 0x24
   183b0:	cmp	r4, #0
   183b4:	beq	1840c <__assert_fail@plt+0x6ff8>
   183b8:	ldr	r2, [r9, r8, lsl #3]
   183bc:	ldr	r3, [r6, #16]
   183c0:	cmp	r2, #0
   183c4:	sub	r3, r3, #1
   183c8:	str	r3, [r6, #16]
   183cc:	beq	18440 <__assert_fail@plt+0x702c>
   183d0:	mov	r0, r4
   183d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   183d8:	ldr	r4, [r3]
   183dc:	cmp	r7, r4
   183e0:	beq	18420 <__assert_fail@plt+0x700c>
   183e4:	mov	r1, r4
   183e8:	ldr	r3, [r6, #28]
   183ec:	mov	r0, r7
   183f0:	blx	r3
   183f4:	cmp	r0, #0
   183f8:	bne	18418 <__assert_fail@plt+0x7004>
   183fc:	ldr	r5, [r5, #4]
   18400:	ldr	r3, [r5, #4]
   18404:	cmp	r3, #0
   18408:	bne	183d8 <__assert_fail@plt+0x6fc4>
   1840c:	mov	r4, #0
   18410:	mov	r0, r4
   18414:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18418:	ldr	r3, [r5, #4]
   1841c:	ldr	r4, [r3]
   18420:	ldr	r1, [r3, #4]
   18424:	mov	r2, #0
   18428:	str	r1, [r5, #4]
   1842c:	str	r2, [r3]
   18430:	ldr	r2, [r6, #36]	; 0x24
   18434:	str	r2, [r3, #4]
   18438:	str	r3, [r6, #36]	; 0x24
   1843c:	b	183b0 <__assert_fail@plt+0x6f9c>
   18440:	vldr	s15, [r6, #8]
   18444:	ldr	r3, [r6, #12]
   18448:	ldr	r2, [r6, #20]
   1844c:	sub	r3, r3, #1
   18450:	vcvt.f32.u32	s14, s15
   18454:	vldr	s13, [r2]
   18458:	vmov	s15, r3
   1845c:	str	r3, [r6, #12]
   18460:	vcvt.f32.u32	s15, s15
   18464:	vmul.f32	s12, s13, s14
   18468:	vcmpe.f32	s15, s12
   1846c:	vmrs	APSR_nzcv, fpscr
   18470:	bpl	183d0 <__assert_fail@plt+0x6fbc>
   18474:	ldr	r3, [pc, #276]	; 18590 <__assert_fail@plt+0x717c>
   18478:	cmp	r2, r3
   1847c:	beq	1855c <__assert_fail@plt+0x7148>
   18480:	vldr	s12, [r2, #8]
   18484:	vldr	s11, [pc, #236]	; 18578 <__assert_fail@plt+0x7164>
   18488:	vcmpe.f32	s12, s11
   1848c:	vmrs	APSR_nzcv, fpscr
   18490:	ble	18544 <__assert_fail@plt+0x7130>
   18494:	vldr	s10, [pc, #224]	; 1857c <__assert_fail@plt+0x7168>
   18498:	vcmpe.f32	s12, s10
   1849c:	vmrs	APSR_nzcv, fpscr
   184a0:	bpl	18544 <__assert_fail@plt+0x7130>
   184a4:	vldr	s10, [pc, #212]	; 18580 <__assert_fail@plt+0x716c>
   184a8:	vldr	s9, [r2, #12]
   184ac:	vcmpe.f32	s9, s10
   184b0:	vmrs	APSR_nzcv, fpscr
   184b4:	ble	18544 <__assert_fail@plt+0x7130>
   184b8:	vcmpe.f32	s13, #0.0
   184bc:	vmrs	APSR_nzcv, fpscr
   184c0:	blt	18544 <__assert_fail@plt+0x7130>
   184c4:	vadd.f32	s13, s13, s11
   184c8:	vldr	s11, [r2, #4]
   184cc:	vcmpe.f32	s13, s11
   184d0:	vmrs	APSR_nzcv, fpscr
   184d4:	bpl	18544 <__assert_fail@plt+0x7130>
   184d8:	vldr	s10, [pc, #164]	; 18584 <__assert_fail@plt+0x7170>
   184dc:	vcmpe.f32	s11, s10
   184e0:	vmrs	APSR_nzcv, fpscr
   184e4:	bhi	18544 <__assert_fail@plt+0x7130>
   184e8:	vcmpe.f32	s12, s13
   184ec:	vmrs	APSR_nzcv, fpscr
   184f0:	ble	18544 <__assert_fail@plt+0x7130>
   184f4:	ldrb	r3, [r2, #16]
   184f8:	cmp	r3, #0
   184fc:	beq	18564 <__assert_fail@plt+0x7150>
   18500:	vmul.f32	s15, s14, s11
   18504:	vcvt.u32.f32	s15, s15
   18508:	vmov	r1, s15
   1850c:	mov	r0, r6
   18510:	bl	17ac4 <__assert_fail@plt+0x66b0>
   18514:	cmp	r0, #0
   18518:	bne	183d0 <__assert_fail@plt+0x6fbc>
   1851c:	ldr	r0, [r6, #36]	; 0x24
   18520:	cmp	r0, #0
   18524:	beq	18538 <__assert_fail@plt+0x7124>
   18528:	ldr	r5, [r0, #4]
   1852c:	bl	16f1c <__assert_fail@plt+0x5b08>
   18530:	subs	r0, r5, #0
   18534:	bne	18528 <__assert_fail@plt+0x7114>
   18538:	mov	r3, #0
   1853c:	str	r3, [r6, #36]	; 0x24
   18540:	b	183d0 <__assert_fail@plt+0x6fbc>
   18544:	vldr	s13, [pc, #60]	; 18588 <__assert_fail@plt+0x7174>
   18548:	str	r3, [r6, #20]
   1854c:	vmul.f32	s13, s14, s13
   18550:	vcmpe.f32	s15, s13
   18554:	vmrs	APSR_nzcv, fpscr
   18558:	bpl	183d0 <__assert_fail@plt+0x6fbc>
   1855c:	vldr	s12, [pc, #40]	; 1858c <__assert_fail@plt+0x7178>
   18560:	vldr	s11, [pc, #28]	; 18584 <__assert_fail@plt+0x7170>
   18564:	vmul.f32	s15, s14, s11
   18568:	vmul.f32	s15, s15, s12
   1856c:	vcvt.u32.f32	s15, s15
   18570:	b	18508 <__assert_fail@plt+0x70f4>
   18574:	bl	113f0 <abort@plt>
   18578:	stclcc	12, cr12, [ip, #820]	; 0x334
   1857c:	svccc	0x00666666
   18580:	svccc	0x008ccccd
   18584:	svccc	0x00800000
   18588:	andeq	r0, r0, r0
   1858c:	svccc	0x004ccccd
   18590:	andeq	r0, r2, r4, lsl #29
   18594:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18598:	mov	r7, r1
   1859c:	ldr	r3, [r0, #24]
   185a0:	mov	r6, r0
   185a4:	ldr	r1, [r0, #8]
   185a8:	mov	r0, r7
   185ac:	blx	r3
   185b0:	ldr	r3, [r6, #8]
   185b4:	cmp	r0, r3
   185b8:	bcs	187e4 <__assert_fail@plt+0x73d0>
   185bc:	ldr	r9, [r6]
   185c0:	mov	r8, r0
   185c4:	add	r5, r9, r0, lsl #3
   185c8:	ldr	r4, [r9, r0, lsl #3]
   185cc:	cmp	r4, #0
   185d0:	beq	1867c <__assert_fail@plt+0x7268>
   185d4:	cmp	r7, r4
   185d8:	beq	185f8 <__assert_fail@plt+0x71e4>
   185dc:	mov	r1, r4
   185e0:	ldr	r3, [r6, #28]
   185e4:	mov	r0, r7
   185e8:	blx	r3
   185ec:	cmp	r0, #0
   185f0:	beq	18670 <__assert_fail@plt+0x725c>
   185f4:	ldr	r4, [r9, r8, lsl #3]
   185f8:	ldr	r3, [r5, #4]
   185fc:	cmp	r3, #0
   18600:	movne	r2, #0
   18604:	ldmne	r3, {r0, r1}
   18608:	streq	r3, [r9, r8, lsl #3]
   1860c:	stmne	r5, {r0, r1}
   18610:	strne	r2, [r3]
   18614:	ldrne	r2, [r6, #36]	; 0x24
   18618:	strne	r2, [r3, #4]
   1861c:	strne	r3, [r6, #36]	; 0x24
   18620:	cmp	r4, #0
   18624:	beq	1867c <__assert_fail@plt+0x7268>
   18628:	ldr	r2, [r9, r8, lsl #3]
   1862c:	ldr	r3, [r6, #16]
   18630:	cmp	r2, #0
   18634:	sub	r3, r3, #1
   18638:	str	r3, [r6, #16]
   1863c:	beq	186b0 <__assert_fail@plt+0x729c>
   18640:	mov	r0, r4
   18644:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18648:	ldr	r4, [r3]
   1864c:	cmp	r7, r4
   18650:	beq	18690 <__assert_fail@plt+0x727c>
   18654:	mov	r1, r4
   18658:	ldr	r3, [r6, #28]
   1865c:	mov	r0, r7
   18660:	blx	r3
   18664:	cmp	r0, #0
   18668:	bne	18688 <__assert_fail@plt+0x7274>
   1866c:	ldr	r5, [r5, #4]
   18670:	ldr	r3, [r5, #4]
   18674:	cmp	r3, #0
   18678:	bne	18648 <__assert_fail@plt+0x7234>
   1867c:	mov	r4, #0
   18680:	mov	r0, r4
   18684:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18688:	ldr	r3, [r5, #4]
   1868c:	ldr	r4, [r3]
   18690:	ldr	r1, [r3, #4]
   18694:	mov	r2, #0
   18698:	str	r1, [r5, #4]
   1869c:	str	r2, [r3]
   186a0:	ldr	r2, [r6, #36]	; 0x24
   186a4:	str	r2, [r3, #4]
   186a8:	str	r3, [r6, #36]	; 0x24
   186ac:	b	18620 <__assert_fail@plt+0x720c>
   186b0:	vldr	s15, [r6, #8]
   186b4:	ldr	r3, [r6, #12]
   186b8:	ldr	r2, [r6, #20]
   186bc:	sub	r3, r3, #1
   186c0:	vcvt.f32.u32	s14, s15
   186c4:	vldr	s13, [r2]
   186c8:	vmov	s15, r3
   186cc:	str	r3, [r6, #12]
   186d0:	vcvt.f32.u32	s15, s15
   186d4:	vmul.f32	s12, s13, s14
   186d8:	vcmpe.f32	s15, s12
   186dc:	vmrs	APSR_nzcv, fpscr
   186e0:	bpl	18640 <__assert_fail@plt+0x722c>
   186e4:	ldr	r3, [pc, #276]	; 18800 <__assert_fail@plt+0x73ec>
   186e8:	cmp	r2, r3
   186ec:	beq	187cc <__assert_fail@plt+0x73b8>
   186f0:	vldr	s12, [r2, #8]
   186f4:	vldr	s11, [pc, #236]	; 187e8 <__assert_fail@plt+0x73d4>
   186f8:	vcmpe.f32	s12, s11
   186fc:	vmrs	APSR_nzcv, fpscr
   18700:	ble	187b4 <__assert_fail@plt+0x73a0>
   18704:	vldr	s10, [pc, #224]	; 187ec <__assert_fail@plt+0x73d8>
   18708:	vcmpe.f32	s12, s10
   1870c:	vmrs	APSR_nzcv, fpscr
   18710:	bpl	187b4 <__assert_fail@plt+0x73a0>
   18714:	vldr	s10, [pc, #212]	; 187f0 <__assert_fail@plt+0x73dc>
   18718:	vldr	s9, [r2, #12]
   1871c:	vcmpe.f32	s9, s10
   18720:	vmrs	APSR_nzcv, fpscr
   18724:	ble	187b4 <__assert_fail@plt+0x73a0>
   18728:	vcmpe.f32	s13, #0.0
   1872c:	vmrs	APSR_nzcv, fpscr
   18730:	blt	187b4 <__assert_fail@plt+0x73a0>
   18734:	vadd.f32	s13, s13, s11
   18738:	vldr	s11, [r2, #4]
   1873c:	vcmpe.f32	s13, s11
   18740:	vmrs	APSR_nzcv, fpscr
   18744:	bpl	187b4 <__assert_fail@plt+0x73a0>
   18748:	vldr	s10, [pc, #164]	; 187f4 <__assert_fail@plt+0x73e0>
   1874c:	vcmpe.f32	s11, s10
   18750:	vmrs	APSR_nzcv, fpscr
   18754:	bhi	187b4 <__assert_fail@plt+0x73a0>
   18758:	vcmpe.f32	s12, s13
   1875c:	vmrs	APSR_nzcv, fpscr
   18760:	ble	187b4 <__assert_fail@plt+0x73a0>
   18764:	ldrb	r3, [r2, #16]
   18768:	cmp	r3, #0
   1876c:	beq	187d4 <__assert_fail@plt+0x73c0>
   18770:	vmul.f32	s15, s14, s11
   18774:	vcvt.u32.f32	s15, s15
   18778:	vmov	r1, s15
   1877c:	mov	r0, r6
   18780:	bl	17ac4 <__assert_fail@plt+0x66b0>
   18784:	cmp	r0, #0
   18788:	bne	18640 <__assert_fail@plt+0x722c>
   1878c:	ldr	r0, [r6, #36]	; 0x24
   18790:	cmp	r0, #0
   18794:	beq	187a8 <__assert_fail@plt+0x7394>
   18798:	ldr	r5, [r0, #4]
   1879c:	bl	16f1c <__assert_fail@plt+0x5b08>
   187a0:	subs	r0, r5, #0
   187a4:	bne	18798 <__assert_fail@plt+0x7384>
   187a8:	mov	r3, #0
   187ac:	str	r3, [r6, #36]	; 0x24
   187b0:	b	18640 <__assert_fail@plt+0x722c>
   187b4:	vldr	s13, [pc, #60]	; 187f8 <__assert_fail@plt+0x73e4>
   187b8:	str	r3, [r6, #20]
   187bc:	vmul.f32	s13, s14, s13
   187c0:	vcmpe.f32	s15, s13
   187c4:	vmrs	APSR_nzcv, fpscr
   187c8:	bpl	18640 <__assert_fail@plt+0x722c>
   187cc:	vldr	s12, [pc, #40]	; 187fc <__assert_fail@plt+0x73e8>
   187d0:	vldr	s11, [pc, #28]	; 187f4 <__assert_fail@plt+0x73e0>
   187d4:	vmul.f32	s15, s14, s11
   187d8:	vmul.f32	s15, s15, s12
   187dc:	vcvt.u32.f32	s15, s15
   187e0:	b	18778 <__assert_fail@plt+0x7364>
   187e4:	bl	113f0 <abort@plt>
   187e8:	stclcc	12, cr12, [ip, #820]	; 0x334
   187ec:	svccc	0x00666666
   187f0:	svccc	0x008ccccd
   187f4:	svccc	0x00800000
   187f8:	andeq	r0, r0, r0
   187fc:	svccc	0x004ccccd
   18800:	andeq	r0, r2, r4, lsl #29
   18804:	cmp	r0, #0
   18808:	sbcs	r3, r1, #0
   1880c:	mov	r3, #0
   18810:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18814:	mov	r4, r0
   18818:	mov	r5, r1
   1881c:	strb	r3, [r2, #20]
   18820:	add	r6, r2, #20
   18824:	mov	r8, #10
   18828:	mov	r9, #0
   1882c:	blt	1887c <__assert_fail@plt+0x7468>
   18830:	mov	r0, r4
   18834:	mov	r1, r5
   18838:	mov	r2, r8
   1883c:	mov	r3, r9
   18840:	bl	1f6cc <__assert_fail@plt+0xe2b8>
   18844:	mov	r0, r4
   18848:	mov	r1, r5
   1884c:	mov	r3, r9
   18850:	add	r2, r2, #48	; 0x30
   18854:	strb	r2, [r6, #-1]!
   18858:	mov	r2, r8
   1885c:	bl	1f6cc <__assert_fail@plt+0xe2b8>
   18860:	mov	r4, r0
   18864:	mov	r5, r1
   18868:	orrs	r3, r4, r5
   1886c:	bne	18830 <__assert_fail@plt+0x741c>
   18870:	mov	r0, r6
   18874:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18878:	mov	r6, r7
   1887c:	mov	r0, r4
   18880:	mov	r1, r5
   18884:	mov	r2, r8
   18888:	mov	r3, r9
   1888c:	bl	1f6cc <__assert_fail@plt+0xe2b8>
   18890:	mov	r0, r4
   18894:	mov	r1, r5
   18898:	mov	r3, r9
   1889c:	sub	r7, r6, #1
   188a0:	rsb	r2, r2, #48	; 0x30
   188a4:	strb	r2, [r6, #-1]
   188a8:	mov	r2, r8
   188ac:	bl	1f6cc <__assert_fail@plt+0xe2b8>
   188b0:	mov	r4, r0
   188b4:	mov	r5, r1
   188b8:	orrs	r3, r4, r5
   188bc:	bne	18878 <__assert_fail@plt+0x7464>
   188c0:	mov	r3, #45	; 0x2d
   188c4:	sub	r6, r6, #2
   188c8:	strb	r3, [r7, #-1]
   188cc:	mov	r0, r6
   188d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   188d4:	push	{lr}		; (str lr, [sp, #-4]!)
   188d8:	sub	sp, sp, #12
   188dc:	ldr	r0, [pc, #72]	; 1892c <__assert_fail@plt+0x7518>
   188e0:	bl	11234 <getenv@plt>
   188e4:	subs	r3, r0, #0
   188e8:	beq	188f8 <__assert_fail@plt+0x74e4>
   188ec:	ldrb	r3, [r3]
   188f0:	cmp	r3, #0
   188f4:	bne	18904 <__assert_fail@plt+0x74f0>
   188f8:	ldr	r0, [pc, #48]	; 18930 <__assert_fail@plt+0x751c>
   188fc:	add	sp, sp, #12
   18900:	pop	{pc}		; (ldr pc, [sp], #4)
   18904:	mov	r2, #10
   18908:	add	r1, sp, #4
   1890c:	bl	110d8 <strtol@plt>
   18910:	ldr	r2, [sp, #4]
   18914:	ldr	r3, [pc, #20]	; 18930 <__assert_fail@plt+0x751c>
   18918:	ldrb	r2, [r2]
   1891c:	cmp	r2, #0
   18920:	movne	r0, r3
   18924:	add	sp, sp, #12
   18928:	pop	{pc}		; (ldr pc, [sp], #4)
   1892c:	andeq	r0, r2, r4, lsl #30
   18930:	andeq	r1, r3, r9, rrx
   18934:	push	{r4, r5, r6, lr}
   18938:	subs	r4, r0, #0
   1893c:	beq	189b0 <__assert_fail@plt+0x759c>
   18940:	mov	r1, #47	; 0x2f
   18944:	bl	11384 <strrchr@plt>
   18948:	subs	r5, r0, #0
   1894c:	beq	1899c <__assert_fail@plt+0x7588>
   18950:	add	r6, r5, #1
   18954:	sub	r3, r6, r4
   18958:	cmp	r3, #6
   1895c:	ble	1899c <__assert_fail@plt+0x7588>
   18960:	mov	r2, #7
   18964:	ldr	r1, [pc, #96]	; 189cc <__assert_fail@plt+0x75b8>
   18968:	sub	r0, r5, #6
   1896c:	bl	113e4 <strncmp@plt>
   18970:	cmp	r0, #0
   18974:	bne	1899c <__assert_fail@plt+0x7588>
   18978:	mov	r2, #3
   1897c:	ldr	r1, [pc, #76]	; 189d0 <__assert_fail@plt+0x75bc>
   18980:	mov	r0, r6
   18984:	bl	113e4 <strncmp@plt>
   18988:	cmp	r0, #0
   1898c:	movne	r4, r6
   18990:	ldreq	r3, [pc, #60]	; 189d4 <__assert_fail@plt+0x75c0>
   18994:	addeq	r4, r5, #4
   18998:	streq	r4, [r3]
   1899c:	ldr	r2, [pc, #52]	; 189d8 <__assert_fail@plt+0x75c4>
   189a0:	ldr	r3, [pc, #52]	; 189dc <__assert_fail@plt+0x75c8>
   189a4:	str	r4, [r2]
   189a8:	str	r4, [r3]
   189ac:	pop	{r4, r5, r6, pc}
   189b0:	ldr	r3, [pc, #40]	; 189e0 <__assert_fail@plt+0x75cc>
   189b4:	mov	r2, #55	; 0x37
   189b8:	mov	r1, #1
   189bc:	ldr	r3, [r3]
   189c0:	ldr	r0, [pc, #28]	; 189e4 <__assert_fail@plt+0x75d0>
   189c4:	bl	111e0 <fwrite@plt>
   189c8:	bl	113f0 <abort@plt>
   189cc:	andeq	r0, r2, ip, asr #30
   189d0:	andeq	r0, r2, r4, asr pc
   189d4:			; <UNDEFINED> instruction: 0x000321b0
   189d8:	andeq	r2, r3, ip, ror #3
   189dc:			; <UNDEFINED> instruction: 0x000321b4
   189e0:	andeq	r2, r3, r0, asr #3
   189e4:	andeq	r0, r2, r4, lsl pc
   189e8:	push	{r4, r5, r6, lr}
   189ec:	mov	r4, r0
   189f0:	mov	r5, r1
   189f4:	bl	1f0ac <__assert_fail@plt+0xdc98>
   189f8:	ldrb	r3, [r0]
   189fc:	bic	r3, r3, #32
   18a00:	cmp	r3, #85	; 0x55
   18a04:	bne	18a64 <__assert_fail@plt+0x7650>
   18a08:	ldrb	r3, [r0, #1]
   18a0c:	bic	r3, r3, #32
   18a10:	cmp	r3, #84	; 0x54
   18a14:	bne	18aa0 <__assert_fail@plt+0x768c>
   18a18:	ldrb	r3, [r0, #2]
   18a1c:	bic	r3, r3, #32
   18a20:	cmp	r3, #70	; 0x46
   18a24:	bne	18aa0 <__assert_fail@plt+0x768c>
   18a28:	ldrb	r3, [r0, #3]
   18a2c:	cmp	r3, #45	; 0x2d
   18a30:	bne	18aa0 <__assert_fail@plt+0x768c>
   18a34:	ldrb	r3, [r0, #4]
   18a38:	cmp	r3, #56	; 0x38
   18a3c:	bne	18aa0 <__assert_fail@plt+0x768c>
   18a40:	ldrb	r3, [r0, #5]
   18a44:	cmp	r3, #0
   18a48:	bne	18aa0 <__assert_fail@plt+0x768c>
   18a4c:	ldrb	r2, [r4]
   18a50:	ldr	r3, [pc, #152]	; 18af0 <__assert_fail@plt+0x76dc>
   18a54:	ldr	r0, [pc, #152]	; 18af4 <__assert_fail@plt+0x76e0>
   18a58:	cmp	r2, #96	; 0x60
   18a5c:	movne	r0, r3
   18a60:	pop	{r4, r5, r6, pc}
   18a64:	cmp	r3, #71	; 0x47
   18a68:	bne	18aa0 <__assert_fail@plt+0x768c>
   18a6c:	ldrb	r3, [r0, #1]
   18a70:	bic	r3, r3, #32
   18a74:	cmp	r3, #66	; 0x42
   18a78:	bne	18aa0 <__assert_fail@plt+0x768c>
   18a7c:	ldrb	r3, [r0, #2]
   18a80:	cmp	r3, #49	; 0x31
   18a84:	bne	18aa0 <__assert_fail@plt+0x768c>
   18a88:	ldrb	r3, [r0, #3]
   18a8c:	cmp	r3, #56	; 0x38
   18a90:	bne	18aa0 <__assert_fail@plt+0x768c>
   18a94:	ldrb	r3, [r0, #4]
   18a98:	cmp	r3, #48	; 0x30
   18a9c:	beq	18ab4 <__assert_fail@plt+0x76a0>
   18aa0:	ldr	r3, [pc, #80]	; 18af8 <__assert_fail@plt+0x76e4>
   18aa4:	cmp	r5, #9
   18aa8:	ldr	r0, [pc, #76]	; 18afc <__assert_fail@plt+0x76e8>
   18aac:	movne	r0, r3
   18ab0:	pop	{r4, r5, r6, pc}
   18ab4:	ldrb	r3, [r0, #5]
   18ab8:	cmp	r3, #51	; 0x33
   18abc:	bne	18aa0 <__assert_fail@plt+0x768c>
   18ac0:	ldrb	r3, [r0, #6]
   18ac4:	cmp	r3, #48	; 0x30
   18ac8:	bne	18aa0 <__assert_fail@plt+0x768c>
   18acc:	ldrb	r3, [r0, #7]
   18ad0:	cmp	r3, #0
   18ad4:	bne	18aa0 <__assert_fail@plt+0x768c>
   18ad8:	ldrb	r2, [r4]
   18adc:	ldr	r3, [pc, #28]	; 18b00 <__assert_fail@plt+0x76ec>
   18ae0:	ldr	r0, [pc, #28]	; 18b04 <__assert_fail@plt+0x76f0>
   18ae4:	cmp	r2, #96	; 0x60
   18ae8:	movne	r0, r3
   18aec:	pop	{r4, r5, r6, pc}
   18af0:			; <UNDEFINED> instruction: 0x00020fb0
   18af4:	andeq	r0, r2, ip, lsr #31
   18af8:	andeq	r0, r2, r0, asr #31
   18afc:			; <UNDEFINED> instruction: 0x00020fbc
   18b00:			; <UNDEFINED> instruction: 0x00020fb8
   18b04:			; <UNDEFINED> instruction: 0x00020fb4
   18b08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b0c:	sub	sp, sp, #140	; 0x8c
   18b10:	mov	r9, r1
   18b14:	str	r3, [sp, #24]
   18b18:	mov	r3, #1
   18b1c:	mov	sl, r0
   18b20:	str	r2, [sp, #44]	; 0x2c
   18b24:	str	r3, [sp, #28]
   18b28:	bl	111f8 <__ctype_get_mb_cur_max@plt>
   18b2c:	ldr	r3, [sp, #180]	; 0xb4
   18b30:	mov	fp, r9
   18b34:	mov	r9, sl
   18b38:	lsr	r3, r3, #1
   18b3c:	and	r3, r3, #1
   18b40:	str	r3, [sp, #40]	; 0x28
   18b44:	ldr	r3, [sp, #180]	; 0xb4
   18b48:	mov	r2, #0
   18b4c:	and	r3, r3, #4
   18b50:	str	r3, [sp, #100]	; 0x64
   18b54:	ldr	r3, [sp, #180]	; 0xb4
   18b58:	str	r2, [sp, #76]	; 0x4c
   18b5c:	and	r3, r3, #1
   18b60:	str	r3, [sp, #96]	; 0x60
   18b64:	str	r2, [sp, #36]	; 0x24
   18b68:	str	r2, [sp, #56]	; 0x38
   18b6c:	str	r2, [sp, #68]	; 0x44
   18b70:	str	r2, [sp, #72]	; 0x48
   18b74:	str	r2, [sp, #84]	; 0x54
   18b78:	str	r0, [sp, #80]	; 0x50
   18b7c:	ldr	r3, [sp, #176]	; 0xb0
   18b80:	cmp	r3, #10
   18b84:	ldrls	pc, [pc, r3, lsl #2]
   18b88:	b	19d60 <__assert_fail@plt+0x894c>
   18b8c:			; <UNDEFINED> instruction: 0x00018bb8
   18b90:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18b94:	andeq	r9, r1, r0, lsr r0
   18b98:	andeq	r8, r1, ip, lsl #30
   18b9c:	andeq	r9, r1, r4, lsl #1
   18ba0:	andeq	r9, r1, r4, rrx
   18ba4:	andeq	r8, r1, ip, lsr #30
   18ba8:	andeq	r8, r1, r0, asr pc
   18bac:	andeq	r8, r1, r8, ror pc
   18bb0:	andeq	r8, r1, r8, ror pc
   18bb4:	andeq	r8, r1, r8, ror pc
   18bb8:	mov	r3, #0
   18bbc:	ldr	r1, [sp, #56]	; 0x38
   18bc0:	ldr	r2, [sp, #176]	; 0xb0
   18bc4:	ldr	lr, [sp, #176]	; 0xb0
   18bc8:	mov	r8, r3
   18bcc:	mov	ip, r3
   18bd0:	str	r3, [sp, #40]	; 0x28
   18bd4:	mov	r3, r1
   18bd8:	cmp	r2, #2
   18bdc:	moveq	r3, #0
   18be0:	andne	r3, r3, #1
   18be4:	mov	r0, r3
   18be8:	str	r3, [sp, #92]	; 0x5c
   18bec:	ldr	r3, [sp, #68]	; 0x44
   18bf0:	sub	lr, lr, #2
   18bf4:	adds	r2, r3, #0
   18bf8:	movne	r2, #1
   18bfc:	and	r3, r1, ip
   18c00:	and	r3, r2, r3
   18c04:	clz	lr, lr
   18c08:	str	r3, [sp, #88]	; 0x58
   18c0c:	lsr	lr, lr, #5
   18c10:	mov	r3, ip
   18c14:	and	r3, r3, lr
   18c18:	mov	sl, #0
   18c1c:	and	r0, r2, r0
   18c20:	str	r3, [sp, #64]	; 0x40
   18c24:	eor	r3, r1, #1
   18c28:	str	lr, [sp, #52]	; 0x34
   18c2c:	str	r0, [sp, #48]	; 0x30
   18c30:	str	r3, [sp, #60]	; 0x3c
   18c34:	ldr	r3, [sp, #24]
   18c38:	cmn	r3, #1
   18c3c:	beq	1916c <__assert_fail@plt+0x7d58>
   18c40:	subs	r7, r3, sl
   18c44:	movne	r7, #1
   18c48:	cmp	r7, #0
   18c4c:	beq	19184 <__assert_fail@plt+0x7d70>
   18c50:	ldr	r3, [sp, #48]	; 0x30
   18c54:	cmp	r3, #0
   18c58:	beq	194f0 <__assert_fail@plt+0x80dc>
   18c5c:	ldr	r2, [sp, #68]	; 0x44
   18c60:	ldr	r1, [sp, #24]
   18c64:	cmp	r2, #1
   18c68:	mov	r3, r2
   18c6c:	movls	r3, #0
   18c70:	movhi	r3, #1
   18c74:	cmn	r1, #1
   18c78:	movne	r3, #0
   18c7c:	cmp	r3, #0
   18c80:	add	r4, sl, r2
   18c84:	beq	18c94 <__assert_fail@plt+0x7880>
   18c88:	ldr	r0, [sp, #44]	; 0x2c
   18c8c:	bl	112a0 <strlen@plt>
   18c90:	str	r0, [sp, #24]
   18c94:	ldr	r3, [sp, #24]
   18c98:	cmp	r3, r4
   18c9c:	ldr	r3, [sp, #44]	; 0x2c
   18ca0:	add	r5, r3, sl
   18ca4:	bcc	194f8 <__assert_fail@plt+0x80e4>
   18ca8:	mov	r0, r5
   18cac:	ldr	r2, [sp, #68]	; 0x44
   18cb0:	ldr	r1, [sp, #72]	; 0x48
   18cb4:	bl	1115c <memcmp@plt>
   18cb8:	cmp	r0, #0
   18cbc:	bne	194f8 <__assert_fail@plt+0x80e4>
   18cc0:	ldr	r3, [sp, #40]	; 0x28
   18cc4:	cmp	r3, #0
   18cc8:	bne	19eb4 <__assert_fail@plt+0x8aa0>
   18ccc:	ldrb	r4, [r5]
   18cd0:	cmp	r4, #126	; 0x7e
   18cd4:	ldrls	pc, [pc, r4, lsl #2]
   18cd8:	b	19df0 <__assert_fail@plt+0x89dc>
   18cdc:			; <UNDEFINED> instruction: 0x000193b0
   18ce0:	strdeq	r9, [r1], -r0
   18ce4:	strdeq	r9, [r1], -r0
   18ce8:	strdeq	r9, [r1], -r0
   18cec:	strdeq	r9, [r1], -r0
   18cf0:	strdeq	r9, [r1], -r0
   18cf4:	strdeq	r9, [r1], -r0
   18cf8:	muleq	r1, ip, r3
   18cfc:	andeq	r9, r1, r8, lsl #7
   18d00:	andeq	r9, r1, r4, ror #6
   18d04:	andeq	r9, r1, r4, asr #6
   18d08:	andeq	r9, r1, r4, ror r3
   18d0c:	andeq	r9, r1, ip, lsr #5
   18d10:	andeq	r9, r1, r0, ror #9
   18d14:	strdeq	r9, [r1], -r0
   18d18:	strdeq	r9, [r1], -r0
   18d1c:	strdeq	r9, [r1], -r0
   18d20:	strdeq	r9, [r1], -r0
   18d24:	strdeq	r9, [r1], -r0
   18d28:	strdeq	r9, [r1], -r0
   18d2c:	strdeq	r9, [r1], -r0
   18d30:	strdeq	r9, [r1], -r0
   18d34:	strdeq	r9, [r1], -r0
   18d38:	strdeq	r9, [r1], -r0
   18d3c:	strdeq	r9, [r1], -r0
   18d40:	strdeq	r9, [r1], -r0
   18d44:	strdeq	r9, [r1], -r0
   18d48:	strdeq	r9, [r1], -r0
   18d4c:	strdeq	r9, [r1], -r0
   18d50:	strdeq	r9, [r1], -r0
   18d54:	strdeq	r9, [r1], -r0
   18d58:	strdeq	r9, [r1], -r0
   18d5c:	ldrdeq	r9, [r1], -r0
   18d60:			; <UNDEFINED> instruction: 0x000194b0
   18d64:			; <UNDEFINED> instruction: 0x000194b0
   18d68:	muleq	r1, r0, r4
   18d6c:			; <UNDEFINED> instruction: 0x000194b0
   18d70:	muleq	r1, ip, r2
   18d74:			; <UNDEFINED> instruction: 0x000194b0
   18d78:	andeq	r9, r1, r8, ror r2
   18d7c:			; <UNDEFINED> instruction: 0x000194b0
   18d80:			; <UNDEFINED> instruction: 0x000194b0
   18d84:			; <UNDEFINED> instruction: 0x000194b0
   18d88:	muleq	r1, ip, r2
   18d8c:	muleq	r1, ip, r2
   18d90:	muleq	r1, ip, r2
   18d94:	muleq	r1, ip, r2
   18d98:	muleq	r1, ip, r2
   18d9c:	muleq	r1, ip, r2
   18da0:	muleq	r1, ip, r2
   18da4:	muleq	r1, ip, r2
   18da8:	muleq	r1, ip, r2
   18dac:	muleq	r1, ip, r2
   18db0:	muleq	r1, ip, r2
   18db4:	muleq	r1, ip, r2
   18db8:	muleq	r1, ip, r2
   18dbc:	muleq	r1, ip, r2
   18dc0:	muleq	r1, ip, r2
   18dc4:	muleq	r1, ip, r2
   18dc8:			; <UNDEFINED> instruction: 0x000194b0
   18dcc:			; <UNDEFINED> instruction: 0x000194b0
   18dd0:			; <UNDEFINED> instruction: 0x000194b0
   18dd4:			; <UNDEFINED> instruction: 0x000194b0
   18dd8:	andeq	r9, r1, r8, lsr #4
   18ddc:	strdeq	r9, [r1], -r0
   18de0:	muleq	r1, ip, r2
   18de4:	muleq	r1, ip, r2
   18de8:	muleq	r1, ip, r2
   18dec:	muleq	r1, ip, r2
   18df0:	muleq	r1, ip, r2
   18df4:	muleq	r1, ip, r2
   18df8:	muleq	r1, ip, r2
   18dfc:	muleq	r1, ip, r2
   18e00:	muleq	r1, ip, r2
   18e04:	muleq	r1, ip, r2
   18e08:	muleq	r1, ip, r2
   18e0c:	muleq	r1, ip, r2
   18e10:	muleq	r1, ip, r2
   18e14:	muleq	r1, ip, r2
   18e18:	muleq	r1, ip, r2
   18e1c:	muleq	r1, ip, r2
   18e20:	muleq	r1, ip, r2
   18e24:	muleq	r1, ip, r2
   18e28:	muleq	r1, ip, r2
   18e2c:	muleq	r1, ip, r2
   18e30:	muleq	r1, ip, r2
   18e34:	muleq	r1, ip, r2
   18e38:	muleq	r1, ip, r2
   18e3c:	muleq	r1, ip, r2
   18e40:	muleq	r1, ip, r2
   18e44:	muleq	r1, ip, r2
   18e48:			; <UNDEFINED> instruction: 0x000194b0
   18e4c:	strdeq	r9, [r1], -r4
   18e50:	muleq	r1, ip, r2
   18e54:			; <UNDEFINED> instruction: 0x000194b0
   18e58:	muleq	r1, ip, r2
   18e5c:			; <UNDEFINED> instruction: 0x000194b0
   18e60:	muleq	r1, ip, r2
   18e64:	muleq	r1, ip, r2
   18e68:	muleq	r1, ip, r2
   18e6c:	muleq	r1, ip, r2
   18e70:	muleq	r1, ip, r2
   18e74:	muleq	r1, ip, r2
   18e78:	muleq	r1, ip, r2
   18e7c:	muleq	r1, ip, r2
   18e80:	muleq	r1, ip, r2
   18e84:	muleq	r1, ip, r2
   18e88:	muleq	r1, ip, r2
   18e8c:	muleq	r1, ip, r2
   18e90:	muleq	r1, ip, r2
   18e94:	muleq	r1, ip, r2
   18e98:	muleq	r1, ip, r2
   18e9c:	muleq	r1, ip, r2
   18ea0:	muleq	r1, ip, r2
   18ea4:	muleq	r1, ip, r2
   18ea8:	muleq	r1, ip, r2
   18eac:	muleq	r1, ip, r2
   18eb0:	muleq	r1, ip, r2
   18eb4:	muleq	r1, ip, r2
   18eb8:	muleq	r1, ip, r2
   18ebc:	muleq	r1, ip, r2
   18ec0:	muleq	r1, ip, r2
   18ec4:	muleq	r1, ip, r2
   18ec8:	andeq	r9, r1, ip, lsr #1
   18ecc:			; <UNDEFINED> instruction: 0x000194b0
   18ed0:	andeq	r9, r1, ip, lsr #1
   18ed4:	muleq	r1, r0, r4
   18ed8:	mov	r3, #1
   18edc:	str	r3, [sp, #40]	; 0x28
   18ee0:	str	r3, [sp, #68]	; 0x44
   18ee4:	mov	r8, #0
   18ee8:	ldr	r3, [pc, #4056]	; 19ec8 <__assert_fail@plt+0x8ab4>
   18eec:	str	r3, [sp, #72]	; 0x48
   18ef0:	mov	r3, #2
   18ef4:	str	r3, [sp, #176]	; 0xb0
   18ef8:	ldr	r1, [sp, #56]	; 0x38
   18efc:	mov	r2, r3
   18f00:	ldr	ip, [sp, #40]	; 0x28
   18f04:	mov	lr, r3
   18f08:	b	18bd4 <__assert_fail@plt+0x77c0>
   18f0c:	mov	r3, #1
   18f10:	str	r3, [sp, #56]	; 0x38
   18f14:	str	r3, [sp, #68]	; 0x44
   18f18:	str	r3, [sp, #40]	; 0x28
   18f1c:	ldr	r3, [pc, #4004]	; 19ec8 <__assert_fail@plt+0x8ab4>
   18f20:	mov	r8, #0
   18f24:	str	r3, [sp, #72]	; 0x48
   18f28:	b	18ef0 <__assert_fail@plt+0x7adc>
   18f2c:	mov	r3, #1
   18f30:	str	r3, [sp, #56]	; 0x38
   18f34:	str	r3, [sp, #68]	; 0x44
   18f38:	str	r3, [sp, #40]	; 0x28
   18f3c:	ldr	r3, [pc, #3976]	; 19ecc <__assert_fail@plt+0x8ab8>
   18f40:	mov	r8, #0
   18f44:	str	r3, [sp, #72]	; 0x48
   18f48:	mov	r3, #5
   18f4c:	b	18ef4 <__assert_fail@plt+0x7ae0>
   18f50:	mov	r3, #0
   18f54:	str	r3, [sp, #40]	; 0x28
   18f58:	mov	r3, #1
   18f5c:	str	r3, [sp, #56]	; 0x38
   18f60:	mov	r8, #0
   18f64:	mov	r1, r3
   18f68:	ldr	r2, [sp, #176]	; 0xb0
   18f6c:	ldr	ip, [sp, #40]	; 0x28
   18f70:	ldr	lr, [sp, #176]	; 0xb0
   18f74:	b	18bd4 <__assert_fail@plt+0x77c0>
   18f78:	ldr	r3, [sp, #176]	; 0xb0
   18f7c:	cmp	r3, #10
   18f80:	beq	18fc4 <__assert_fail@plt+0x7bb0>
   18f84:	mov	r2, #5
   18f88:	ldr	r1, [pc, #3904]	; 19ed0 <__assert_fail@plt+0x8abc>
   18f8c:	mov	r0, #0
   18f90:	bl	11174 <dcgettext@plt>
   18f94:	ldr	r2, [pc, #3892]	; 19ed0 <__assert_fail@plt+0x8abc>
   18f98:	cmp	r0, r2
   18f9c:	str	r0, [sp, #188]	; 0xbc
   18fa0:	beq	1a05c <__assert_fail@plt+0x8c48>
   18fa4:	mov	r2, #5
   18fa8:	ldr	r1, [pc, #3864]	; 19ec8 <__assert_fail@plt+0x8ab4>
   18fac:	mov	r0, #0
   18fb0:	bl	11174 <dcgettext@plt>
   18fb4:	ldr	r2, [pc, #3852]	; 19ec8 <__assert_fail@plt+0x8ab4>
   18fb8:	cmp	r0, r2
   18fbc:	str	r0, [sp, #192]	; 0xc0
   18fc0:	beq	1a04c <__assert_fail@plt+0x8c38>
   18fc4:	ldr	r8, [sp, #40]	; 0x28
   18fc8:	cmp	r8, #0
   18fcc:	movne	r8, #0
   18fd0:	bne	19000 <__assert_fail@plt+0x7bec>
   18fd4:	ldr	r3, [sp, #188]	; 0xbc
   18fd8:	ldrb	r3, [r3]
   18fdc:	cmp	r3, #0
   18fe0:	beq	19000 <__assert_fail@plt+0x7bec>
   18fe4:	ldr	r2, [sp, #188]	; 0xbc
   18fe8:	cmp	fp, r8
   18fec:	strbhi	r3, [r9, r8]
   18ff0:	ldrb	r3, [r2, #1]!
   18ff4:	add	r8, r8, #1
   18ff8:	cmp	r3, #0
   18ffc:	bne	18fe8 <__assert_fail@plt+0x7bd4>
   19000:	ldr	r0, [sp, #192]	; 0xc0
   19004:	bl	112a0 <strlen@plt>
   19008:	ldr	r3, [sp, #192]	; 0xc0
   1900c:	ldr	r2, [sp, #176]	; 0xb0
   19010:	str	r3, [sp, #72]	; 0x48
   19014:	mov	r3, #1
   19018:	str	r3, [sp, #56]	; 0x38
   1901c:	mov	r1, r3
   19020:	ldr	ip, [sp, #40]	; 0x28
   19024:	ldr	lr, [sp, #176]	; 0xb0
   19028:	str	r0, [sp, #68]	; 0x44
   1902c:	b	18bd4 <__assert_fail@plt+0x77c0>
   19030:	ldr	r3, [sp, #40]	; 0x28
   19034:	cmp	r3, #0
   19038:	beq	19ce0 <__assert_fail@plt+0x88cc>
   1903c:	mov	r3, #1
   19040:	str	r3, [sp, #68]	; 0x44
   19044:	ldr	r3, [pc, #3708]	; 19ec8 <__assert_fail@plt+0x8ab4>
   19048:	str	r3, [sp, #72]	; 0x48
   1904c:	mov	r8, #0
   19050:	ldr	r1, [sp, #56]	; 0x38
   19054:	ldr	r2, [sp, #176]	; 0xb0
   19058:	ldr	ip, [sp, #40]	; 0x28
   1905c:	ldr	lr, [sp, #176]	; 0xb0
   19060:	b	18bd4 <__assert_fail@plt+0x77c0>
   19064:	ldr	r3, [sp, #40]	; 0x28
   19068:	cmp	r3, #0
   1906c:	beq	19d64 <__assert_fail@plt+0x8950>
   19070:	str	r3, [sp, #56]	; 0x38
   19074:	mov	r3, #1
   19078:	str	r3, [sp, #68]	; 0x44
   1907c:	ldr	r3, [pc, #3656]	; 19ecc <__assert_fail@plt+0x8ab8>
   19080:	b	19048 <__assert_fail@plt+0x7c34>
   19084:	ldr	r3, [sp, #40]	; 0x28
   19088:	cmp	r3, #0
   1908c:	mov	r3, #1
   19090:	streq	r3, [sp, #56]	; 0x38
   19094:	beq	19ce0 <__assert_fail@plt+0x88cc>
   19098:	str	r3, [sp, #68]	; 0x44
   1909c:	ldr	r3, [pc, #3620]	; 19ec8 <__assert_fail@plt+0x8ab4>
   190a0:	mov	r8, #0
   190a4:	str	r3, [sp, #72]	; 0x48
   190a8:	b	18ef0 <__assert_fail@plt+0x7adc>
   190ac:	ldr	r3, [sp, #24]
   190b0:	ldr	r6, [sp, #48]	; 0x30
   190b4:	cmn	r3, #1
   190b8:	beq	19714 <__assert_fail@plt+0x8300>
   190bc:	subs	r3, r3, #1
   190c0:	movne	r3, #1
   190c4:	cmp	r3, #0
   190c8:	beq	19494 <__assert_fail@plt+0x8080>
   190cc:	ldr	r1, [sp, #52]	; 0x34
   190d0:	mov	r7, r3
   190d4:	mov	r3, #0
   190d8:	str	r3, [sp, #32]
   190dc:	ldr	r3, [sp, #60]	; 0x3c
   190e0:	orr	r2, r1, r3
   190e4:	ldr	r3, [sp, #40]	; 0x28
   190e8:	eor	r2, r2, #1
   190ec:	orr	r2, r3, r2
   190f0:	tst	r2, #255	; 0xff
   190f4:	bne	19a18 <__assert_fail@plt+0x8604>
   190f8:	cmp	r6, #0
   190fc:	bne	192d8 <__assert_fail@plt+0x7ec4>
   19100:	ldr	r3, [sp, #36]	; 0x24
   19104:	add	sl, sl, #1
   19108:	and	r3, r3, r7
   1910c:	uxtb	r6, r3
   19110:	cmp	r6, #0
   19114:	beq	19140 <__assert_fail@plt+0x7d2c>
   19118:	cmp	fp, r8
   1911c:	movhi	r3, #39	; 0x27
   19120:	strbhi	r3, [r9, r8]
   19124:	add	r3, r8, #1
   19128:	cmp	fp, r3
   1912c:	movhi	r2, #39	; 0x27
   19130:	add	r8, r8, #2
   19134:	strbhi	r2, [r9, r3]
   19138:	mov	r3, #0
   1913c:	str	r3, [sp, #36]	; 0x24
   19140:	ldr	r2, [sp, #32]
   19144:	cmp	r8, fp
   19148:	ldr	r3, [sp, #28]
   1914c:	strbcc	r4, [r9, r8]
   19150:	cmp	r2, #0
   19154:	moveq	r3, #0
   19158:	str	r3, [sp, #28]
   1915c:	ldr	r3, [sp, #24]
   19160:	add	r8, r8, #1
   19164:	cmn	r3, #1
   19168:	bne	18c40 <__assert_fail@plt+0x782c>
   1916c:	ldr	r3, [sp, #44]	; 0x2c
   19170:	ldrb	r3, [r3, sl]
   19174:	adds	r7, r3, #0
   19178:	movne	r7, #1
   1917c:	cmp	r7, #0
   19180:	bne	18c50 <__assert_fail@plt+0x783c>
   19184:	ldr	r3, [sp, #64]	; 0x40
   19188:	cmp	r8, #0
   1918c:	movne	r3, #0
   19190:	andeq	r3, r3, #1
   19194:	cmp	r3, #0
   19198:	str	r3, [sp, #64]	; 0x40
   1919c:	bne	19c40 <__assert_fail@plt+0x882c>
   191a0:	ldr	r3, [sp, #40]	; 0x28
   191a4:	ldr	r2, [sp, #52]	; 0x34
   191a8:	eor	r3, r3, #1
   191ac:	ands	r2, r2, r3
   191b0:	beq	1a06c <__assert_fail@plt+0x8c58>
   191b4:	ldr	r3, [sp, #76]	; 0x4c
   191b8:	cmp	r3, #0
   191bc:	beq	1a03c <__assert_fail@plt+0x8c28>
   191c0:	ldr	r3, [sp, #28]
   191c4:	cmp	r3, #0
   191c8:	bne	19ff8 <__assert_fail@plt+0x8be4>
   191cc:	ldr	r2, [sp, #84]	; 0x54
   191d0:	clz	r3, fp
   191d4:	cmp	r2, #0
   191d8:	lsr	r3, r3, #5
   191dc:	moveq	r3, #0
   191e0:	cmp	r3, #0
   191e4:	beq	19f98 <__assert_fail@plt+0x8b84>
   191e8:	mov	fp, r2
   191ec:	str	r3, [sp, #76]	; 0x4c
   191f0:	b	18b7c <__assert_fail@plt+0x7768>
   191f4:	ldr	r3, [sp, #176]	; 0xb0
   191f8:	ldr	r6, [sp, #48]	; 0x30
   191fc:	cmp	r3, #2
   19200:	beq	19738 <__assert_fail@plt+0x8324>
   19204:	ldr	r3, [sp, #88]	; 0x58
   19208:	cmp	r3, #0
   1920c:	beq	19cbc <__assert_fail@plt+0x88a8>
   19210:	mov	r3, #0
   19214:	add	sl, sl, #1
   19218:	ldr	r6, [sp, #36]	; 0x24
   1921c:	str	r3, [sp, #32]
   19220:	mov	r4, #92	; 0x5c
   19224:	b	19110 <__assert_fail@plt+0x7cfc>
   19228:	ldr	r3, [sp, #176]	; 0xb0
   1922c:	ldr	r6, [sp, #48]	; 0x30
   19230:	cmp	r3, #2
   19234:	beq	19768 <__assert_fail@plt+0x8354>
   19238:	cmp	r3, #5
   1923c:	bne	19ccc <__assert_fail@plt+0x88b8>
   19240:	ldr	r3, [sp, #100]	; 0x64
   19244:	cmp	r3, #0
   19248:	beq	19d30 <__assert_fail@plt+0x891c>
   1924c:	ldr	r2, [sp, #24]
   19250:	add	r3, sl, #2
   19254:	cmp	r2, r3
   19258:	bls	19268 <__assert_fail@plt+0x7e54>
   1925c:	ldrb	r4, [r5, #1]
   19260:	cmp	r4, #63	; 0x3f
   19264:	beq	19ed8 <__assert_fail@plt+0x8ac4>
   19268:	mov	r1, #0
   1926c:	str	r1, [sp, #32]
   19270:	mov	r4, #63	; 0x3f
   19274:	b	190dc <__assert_fail@plt+0x7cc8>
   19278:	ldr	r3, [sp, #176]	; 0xb0
   1927c:	ldr	r6, [sp, #48]	; 0x30
   19280:	cmp	r3, #2
   19284:	beq	19794 <__assert_fail@plt+0x8380>
   19288:	str	r7, [sp, #32]
   1928c:	str	r7, [sp, #76]	; 0x4c
   19290:	mov	r1, #0
   19294:	mov	r4, #39	; 0x27
   19298:	b	190dc <__assert_fail@plt+0x7cc8>
   1929c:	ldr	r6, [sp, #48]	; 0x30
   192a0:	ldr	r1, [sp, #52]	; 0x34
   192a4:	str	r7, [sp, #32]
   192a8:	b	190dc <__assert_fail@plt+0x7cc8>
   192ac:	ldr	r6, [sp, #48]	; 0x30
   192b0:	ldr	r1, [sp, #52]	; 0x34
   192b4:	mov	r4, #12
   192b8:	mov	r3, #102	; 0x66
   192bc:	ldr	r2, [sp, #56]	; 0x38
   192c0:	cmp	r2, #0
   192c4:	streq	r2, [sp, #32]
   192c8:	beq	190dc <__assert_fail@plt+0x7cc8>
   192cc:	mov	r4, r3
   192d0:	mov	r3, #0
   192d4:	str	r3, [sp, #32]
   192d8:	ldr	r3, [sp, #40]	; 0x28
   192dc:	cmp	r3, #0
   192e0:	bne	19a50 <__assert_fail@plt+0x863c>
   192e4:	ldr	r3, [sp, #36]	; 0x24
   192e8:	eor	r3, r3, #1
   192ec:	and	r3, r3, r1
   192f0:	ands	r3, r3, #255	; 0xff
   192f4:	beq	1932c <__assert_fail@plt+0x7f18>
   192f8:	cmp	fp, r8
   192fc:	movhi	r2, #39	; 0x27
   19300:	strbhi	r2, [r9, r8]
   19304:	add	r2, r8, #1
   19308:	cmp	fp, r2
   1930c:	movhi	r1, #36	; 0x24
   19310:	strbhi	r1, [r9, r2]
   19314:	add	r2, r8, #2
   19318:	cmp	fp, r2
   1931c:	add	r8, r8, #3
   19320:	movhi	r1, #39	; 0x27
   19324:	strbhi	r1, [r9, r2]
   19328:	str	r3, [sp, #36]	; 0x24
   1932c:	cmp	fp, r8
   19330:	movhi	r3, #92	; 0x5c
   19334:	strbhi	r3, [r9, r8]
   19338:	add	sl, sl, #1
   1933c:	add	r8, r8, #1
   19340:	b	19140 <__assert_fail@plt+0x7d2c>
   19344:	ldr	r6, [sp, #48]	; 0x30
   19348:	mov	r4, #10
   1934c:	mov	r3, #110	; 0x6e
   19350:	ldr	r2, [sp, #64]	; 0x40
   19354:	cmp	r2, #0
   19358:	bne	19dd8 <__assert_fail@plt+0x89c4>
   1935c:	ldr	r1, [sp, #52]	; 0x34
   19360:	b	192bc <__assert_fail@plt+0x7ea8>
   19364:	ldr	r6, [sp, #48]	; 0x30
   19368:	ldr	r1, [sp, #52]	; 0x34
   1936c:	mov	r3, #116	; 0x74
   19370:	b	192bc <__assert_fail@plt+0x7ea8>
   19374:	ldr	r6, [sp, #48]	; 0x30
   19378:	ldr	r1, [sp, #52]	; 0x34
   1937c:	mov	r4, #11
   19380:	mov	r3, #118	; 0x76
   19384:	b	192bc <__assert_fail@plt+0x7ea8>
   19388:	ldr	r6, [sp, #48]	; 0x30
   1938c:	ldr	r1, [sp, #52]	; 0x34
   19390:	mov	r4, #8
   19394:	mov	r3, #98	; 0x62
   19398:	b	192bc <__assert_fail@plt+0x7ea8>
   1939c:	ldr	r6, [sp, #48]	; 0x30
   193a0:	ldr	r1, [sp, #52]	; 0x34
   193a4:	mov	r4, #7
   193a8:	mov	r3, #97	; 0x61
   193ac:	b	192bc <__assert_fail@plt+0x7ea8>
   193b0:	ldr	r3, [sp, #56]	; 0x38
   193b4:	ldr	r6, [sp, #48]	; 0x30
   193b8:	cmp	r3, #0
   193bc:	beq	19880 <__assert_fail@plt+0x846c>
   193c0:	ldr	r3, [sp, #40]	; 0x28
   193c4:	cmp	r3, #0
   193c8:	bne	19eb4 <__assert_fail@plt+0x8aa0>
   193cc:	ldr	r3, [sp, #36]	; 0x24
   193d0:	ldr	r2, [sp, #52]	; 0x34
   193d4:	eor	r3, r3, #1
   193d8:	ands	r3, r2, r3
   193dc:	moveq	r2, r8
   193e0:	beq	19418 <__assert_fail@plt+0x8004>
   193e4:	cmp	fp, r8
   193e8:	movhi	r2, #39	; 0x27
   193ec:	strbhi	r2, [r9, r8]
   193f0:	add	r2, r8, #1
   193f4:	cmp	fp, r2
   193f8:	movhi	r1, #36	; 0x24
   193fc:	strbhi	r1, [r9, r2]
   19400:	add	r2, r8, #2
   19404:	cmp	fp, r2
   19408:	movhi	r1, #39	; 0x27
   1940c:	strbhi	r1, [r9, r2]
   19410:	add	r2, r8, #3
   19414:	str	r3, [sp, #36]	; 0x24
   19418:	cmp	fp, r2
   1941c:	movhi	r3, #92	; 0x5c
   19420:	strbhi	r3, [r9, r2]
   19424:	ldr	r3, [sp, #92]	; 0x5c
   19428:	add	r8, r2, #1
   1942c:	cmp	r3, #0
   19430:	beq	19db4 <__assert_fail@plt+0x89a0>
   19434:	ldr	r1, [sp, #24]
   19438:	add	r3, sl, #1
   1943c:	cmp	r1, r3
   19440:	bls	19478 <__assert_fail@plt+0x8064>
   19444:	ldr	r1, [sp, #44]	; 0x2c
   19448:	ldrb	r3, [r1, r3]
   1944c:	sub	r3, r3, #48	; 0x30
   19450:	cmp	r3, #9
   19454:	bhi	19478 <__assert_fail@plt+0x8064>
   19458:	cmp	fp, r8
   1945c:	movhi	r3, #48	; 0x30
   19460:	strbhi	r3, [r9, r8]
   19464:	add	r3, r2, #2
   19468:	cmp	fp, r3
   1946c:	add	r8, r2, #3
   19470:	movhi	r1, #48	; 0x30
   19474:	strbhi	r1, [r9, r3]
   19478:	ldr	r3, [sp, #40]	; 0x28
   1947c:	ldr	r1, [sp, #52]	; 0x34
   19480:	mov	r7, r3
   19484:	str	r3, [sp, #32]
   19488:	mov	r4, #48	; 0x30
   1948c:	b	190dc <__assert_fail@plt+0x7cc8>
   19490:	ldr	r6, [sp, #48]	; 0x30
   19494:	cmp	sl, #0
   19498:	streq	r7, [sp, #32]
   1949c:	beq	194bc <__assert_fail@plt+0x80a8>
   194a0:	mov	r3, #0
   194a4:	ldr	r1, [sp, #52]	; 0x34
   194a8:	str	r3, [sp, #32]
   194ac:	b	190dc <__assert_fail@plt+0x7cc8>
   194b0:	ldr	r6, [sp, #48]	; 0x30
   194b4:	mov	r3, #0
   194b8:	str	r3, [sp, #32]
   194bc:	ldr	r3, [sp, #64]	; 0x40
   194c0:	cmp	r3, #0
   194c4:	bne	19c40 <__assert_fail@plt+0x882c>
   194c8:	ldr	r1, [sp, #52]	; 0x34
   194cc:	b	190dc <__assert_fail@plt+0x7cc8>
   194d0:	ldr	r3, [sp, #48]	; 0x30
   194d4:	mov	r6, r3
   194d8:	str	r3, [sp, #32]
   194dc:	b	194bc <__assert_fail@plt+0x80a8>
   194e0:	ldr	r6, [sp, #48]	; 0x30
   194e4:	mov	r4, #13
   194e8:	mov	r3, #114	; 0x72
   194ec:	b	19350 <__assert_fail@plt+0x7f3c>
   194f0:	ldr	r3, [sp, #44]	; 0x2c
   194f4:	add	r5, r3, sl
   194f8:	ldrb	r4, [r5]
   194fc:	cmp	r4, #126	; 0x7e
   19500:	ldrls	pc, [pc, r4, lsl #2]
   19504:	b	198a0 <__assert_fail@plt+0x848c>
   19508:	andeq	r9, r1, r0, ror r8
   1950c:	andeq	r9, r1, r0, lsr #17
   19510:	andeq	r9, r1, r0, lsr #17
   19514:	andeq	r9, r1, r0, lsr #17
   19518:	andeq	r9, r1, r0, lsr #17
   1951c:	andeq	r9, r1, r0, lsr #17
   19520:	andeq	r9, r1, r0, lsr #17
   19524:	andeq	r9, r1, r8, ror #16
   19528:	andeq	r9, r1, r0, ror #16
   1952c:	andeq	r9, r1, r4, asr r8
   19530:	andeq	r9, r1, ip, asr #16
   19534:	andeq	r9, r1, r4, asr #16
   19538:	andeq	r9, r1, ip, lsr r8
   1953c:	andeq	r9, r1, r4, lsr r8
   19540:	andeq	r9, r1, r0, lsr #17
   19544:	andeq	r9, r1, r0, lsr #17
   19548:	andeq	r9, r1, r0, lsr #17
   1954c:	andeq	r9, r1, r0, lsr #17
   19550:	andeq	r9, r1, r0, lsr #17
   19554:	andeq	r9, r1, r0, lsr #17
   19558:	andeq	r9, r1, r0, lsr #17
   1955c:	andeq	r9, r1, r0, lsr #17
   19560:	andeq	r9, r1, r0, lsr #17
   19564:	andeq	r9, r1, r0, lsr #17
   19568:	andeq	r9, r1, r0, lsr #17
   1956c:	andeq	r9, r1, r0, lsr #17
   19570:	andeq	r9, r1, r0, lsr #17
   19574:	andeq	r9, r1, r0, lsr #17
   19578:	andeq	r9, r1, r0, lsr #17
   1957c:	andeq	r9, r1, r0, lsr #17
   19580:	andeq	r9, r1, r0, lsr #17
   19584:	andeq	r9, r1, r0, lsr #17
   19588:	andeq	r9, r1, r8, lsr #16
   1958c:	andeq	r9, r1, r0, lsr #16
   19590:	andeq	r9, r1, r0, lsr #16
   19594:	andeq	r9, r1, r8, lsl r8
   19598:	andeq	r9, r1, r0, lsr #16
   1959c:	andeq	r9, r1, r0, lsl r8
   195a0:	andeq	r9, r1, r0, lsr #16
   195a4:	andeq	r9, r1, r4, lsl #15
   195a8:	andeq	r9, r1, r0, lsr #16
   195ac:	andeq	r9, r1, r0, lsr #16
   195b0:	andeq	r9, r1, r0, lsr #16
   195b4:	andeq	r9, r1, r0, lsl r8
   195b8:	andeq	r9, r1, r0, lsl r8
   195bc:	andeq	r9, r1, r0, lsl r8
   195c0:	andeq	r9, r1, r0, lsl r8
   195c4:	andeq	r9, r1, r0, lsl r8
   195c8:	andeq	r9, r1, r0, lsl r8
   195cc:	andeq	r9, r1, r0, lsl r8
   195d0:	andeq	r9, r1, r0, lsl r8
   195d4:	andeq	r9, r1, r0, lsl r8
   195d8:	andeq	r9, r1, r0, lsl r8
   195dc:	andeq	r9, r1, r0, lsl r8
   195e0:	andeq	r9, r1, r0, lsl r8
   195e4:	andeq	r9, r1, r0, lsl r8
   195e8:	andeq	r9, r1, r0, lsl r8
   195ec:	andeq	r9, r1, r0, lsl r8
   195f0:	andeq	r9, r1, r0, lsl r8
   195f4:	andeq	r9, r1, r0, lsr #16
   195f8:	andeq	r9, r1, r0, lsr #16
   195fc:	andeq	r9, r1, r0, lsr #16
   19600:	andeq	r9, r1, r0, lsr #16
   19604:	andeq	r9, r1, r8, asr r7
   19608:	andeq	r9, r1, r0, lsr #17
   1960c:	andeq	r9, r1, r0, lsl r8
   19610:	andeq	r9, r1, r0, lsl r8
   19614:	andeq	r9, r1, r0, lsl r8
   19618:	andeq	r9, r1, r0, lsl r8
   1961c:	andeq	r9, r1, r0, lsl r8
   19620:	andeq	r9, r1, r0, lsl r8
   19624:	andeq	r9, r1, r0, lsl r8
   19628:	andeq	r9, r1, r0, lsl r8
   1962c:	andeq	r9, r1, r0, lsl r8
   19630:	andeq	r9, r1, r0, lsl r8
   19634:	andeq	r9, r1, r0, lsl r8
   19638:	andeq	r9, r1, r0, lsl r8
   1963c:	andeq	r9, r1, r0, lsl r8
   19640:	andeq	r9, r1, r0, lsl r8
   19644:	andeq	r9, r1, r0, lsl r8
   19648:	andeq	r9, r1, r0, lsl r8
   1964c:	andeq	r9, r1, r0, lsl r8
   19650:	andeq	r9, r1, r0, lsl r8
   19654:	andeq	r9, r1, r0, lsl r8
   19658:	andeq	r9, r1, r0, lsl r8
   1965c:	andeq	r9, r1, r0, lsl r8
   19660:	andeq	r9, r1, r0, lsl r8
   19664:	andeq	r9, r1, r0, lsl r8
   19668:	andeq	r9, r1, r0, lsl r8
   1966c:	andeq	r9, r1, r0, lsl r8
   19670:	andeq	r9, r1, r0, lsl r8
   19674:	andeq	r9, r1, r0, lsr #16
   19678:	andeq	r9, r1, r8, lsr #14
   1967c:	andeq	r9, r1, r0, lsl r8
   19680:	andeq	r9, r1, r0, lsr #16
   19684:	andeq	r9, r1, r0, lsl r8
   19688:	andeq	r9, r1, r0, lsr #16
   1968c:	andeq	r9, r1, r0, lsl r8
   19690:	andeq	r9, r1, r0, lsl r8
   19694:	andeq	r9, r1, r0, lsl r8
   19698:	andeq	r9, r1, r0, lsl r8
   1969c:	andeq	r9, r1, r0, lsl r8
   196a0:	andeq	r9, r1, r0, lsl r8
   196a4:	andeq	r9, r1, r0, lsl r8
   196a8:	andeq	r9, r1, r0, lsl r8
   196ac:	andeq	r9, r1, r0, lsl r8
   196b0:	andeq	r9, r1, r0, lsl r8
   196b4:	andeq	r9, r1, r0, lsl r8
   196b8:	andeq	r9, r1, r0, lsl r8
   196bc:	andeq	r9, r1, r0, lsl r8
   196c0:	andeq	r9, r1, r0, lsl r8
   196c4:	andeq	r9, r1, r0, lsl r8
   196c8:	andeq	r9, r1, r0, lsl r8
   196cc:	andeq	r9, r1, r0, lsl r8
   196d0:	andeq	r9, r1, r0, lsl r8
   196d4:	andeq	r9, r1, r0, lsl r8
   196d8:	andeq	r9, r1, r0, lsl r8
   196dc:	andeq	r9, r1, r0, lsl r8
   196e0:	andeq	r9, r1, r0, lsl r8
   196e4:	andeq	r9, r1, r0, lsl r8
   196e8:	andeq	r9, r1, r0, lsl r8
   196ec:	andeq	r9, r1, r0, lsl r8
   196f0:	andeq	r9, r1, r0, lsl r8
   196f4:	andeq	r9, r1, r4, lsl #14
   196f8:	andeq	r9, r1, r0, lsr #16
   196fc:	andeq	r9, r1, r4, lsl #14
   19700:	andeq	r9, r1, r8, lsl r8
   19704:	ldr	r3, [sp, #24]
   19708:	mov	r6, #0
   1970c:	cmn	r3, #1
   19710:	bne	190bc <__assert_fail@plt+0x7ca8>
   19714:	ldr	r3, [sp, #44]	; 0x2c
   19718:	ldrb	r3, [r3, #1]
   1971c:	adds	r3, r3, #0
   19720:	movne	r3, #1
   19724:	b	190c4 <__assert_fail@plt+0x7cb0>
   19728:	ldr	r3, [sp, #176]	; 0xb0
   1972c:	mov	r6, #0
   19730:	cmp	r3, #2
   19734:	bne	19204 <__assert_fail@plt+0x7df0>
   19738:	ldr	r3, [sp, #64]	; 0x40
   1973c:	cmp	r3, #0
   19740:	bne	19f78 <__assert_fail@plt+0x8b64>
   19744:	add	sl, sl, #1
   19748:	ldr	r6, [sp, #36]	; 0x24
   1974c:	str	r3, [sp, #32]
   19750:	mov	r4, #92	; 0x5c
   19754:	b	19110 <__assert_fail@plt+0x7cfc>
   19758:	ldr	r3, [sp, #176]	; 0xb0
   1975c:	mov	r6, #0
   19760:	cmp	r3, #2
   19764:	bne	19238 <__assert_fail@plt+0x7e24>
   19768:	ldr	r3, [sp, #40]	; 0x28
   1976c:	cmp	r3, #0
   19770:	bne	19a54 <__assert_fail@plt+0x8640>
   19774:	mov	r1, r7
   19778:	str	r3, [sp, #32]
   1977c:	mov	r4, #63	; 0x3f
   19780:	b	190dc <__assert_fail@plt+0x7cc8>
   19784:	ldr	r3, [sp, #176]	; 0xb0
   19788:	mov	r6, #0
   1978c:	cmp	r3, #2
   19790:	bne	19288 <__assert_fail@plt+0x7e74>
   19794:	ldr	r3, [sp, #64]	; 0x40
   19798:	cmp	r3, #0
   1979c:	bne	19f78 <__assert_fail@plt+0x8b64>
   197a0:	ldr	r2, [sp, #84]	; 0x54
   197a4:	adds	r3, fp, #0
   197a8:	movne	r3, #1
   197ac:	cmp	r2, #0
   197b0:	movne	r3, #0
   197b4:	cmp	r3, #0
   197b8:	strne	fp, [sp, #84]	; 0x54
   197bc:	movne	fp, #0
   197c0:	bne	197f0 <__assert_fail@plt+0x83dc>
   197c4:	cmp	fp, r8
   197c8:	movhi	r3, #39	; 0x27
   197cc:	strbhi	r3, [r9, r8]
   197d0:	add	r3, r8, #1
   197d4:	cmp	fp, r3
   197d8:	movhi	r2, #92	; 0x5c
   197dc:	strbhi	r2, [r9, r3]
   197e0:	add	r3, r8, #2
   197e4:	cmp	fp, r3
   197e8:	movhi	r2, #39	; 0x27
   197ec:	strbhi	r2, [r9, r3]
   197f0:	ldr	r3, [sp, #64]	; 0x40
   197f4:	add	r8, r8, #3
   197f8:	mov	r1, r7
   197fc:	str	r7, [sp, #32]
   19800:	str	r7, [sp, #76]	; 0x4c
   19804:	str	r3, [sp, #36]	; 0x24
   19808:	mov	r4, #39	; 0x27
   1980c:	b	190dc <__assert_fail@plt+0x7cc8>
   19810:	mov	r6, #0
   19814:	b	192a0 <__assert_fail@plt+0x7e8c>
   19818:	mov	r6, #0
   1981c:	b	19494 <__assert_fail@plt+0x8080>
   19820:	mov	r6, #0
   19824:	b	194b4 <__assert_fail@plt+0x80a0>
   19828:	str	r7, [sp, #32]
   1982c:	mov	r6, #0
   19830:	b	194bc <__assert_fail@plt+0x80a8>
   19834:	mov	r6, #0
   19838:	b	194e4 <__assert_fail@plt+0x80d0>
   1983c:	mov	r6, #0
   19840:	b	192b0 <__assert_fail@plt+0x7e9c>
   19844:	mov	r6, #0
   19848:	b	19378 <__assert_fail@plt+0x7f64>
   1984c:	mov	r6, #0
   19850:	b	19348 <__assert_fail@plt+0x7f34>
   19854:	mov	r6, #0
   19858:	mov	r3, #116	; 0x74
   1985c:	b	19350 <__assert_fail@plt+0x7f3c>
   19860:	mov	r6, #0
   19864:	b	1938c <__assert_fail@plt+0x7f78>
   19868:	mov	r6, #0
   1986c:	b	193a0 <__assert_fail@plt+0x7f8c>
   19870:	ldr	r3, [sp, #56]	; 0x38
   19874:	mov	r6, #0
   19878:	cmp	r3, #0
   1987c:	bne	193c0 <__assert_fail@plt+0x7fac>
   19880:	ldr	r3, [sp, #96]	; 0x60
   19884:	cmp	r3, #0
   19888:	addne	sl, sl, #1
   1988c:	bne	18c34 <__assert_fail@plt+0x7820>
   19890:	ldr	r1, [sp, #52]	; 0x34
   19894:	str	r3, [sp, #32]
   19898:	mov	r4, r3
   1989c:	b	190dc <__assert_fail@plt+0x7cc8>
   198a0:	mov	r6, #0
   198a4:	ldr	r3, [sp, #80]	; 0x50
   198a8:	cmp	r3, #1
   198ac:	bne	19a9c <__assert_fail@plt+0x8688>
   198b0:	bl	11288 <__ctype_b_loc@plt>
   198b4:	ldr	r2, [sp, #80]	; 0x50
   198b8:	sxth	r3, r4
   198bc:	mov	r1, r2
   198c0:	lsl	r3, r3, #1
   198c4:	ldr	r2, [r0]
   198c8:	ldrh	r3, [r2, r3]
   198cc:	and	r3, r3, #16384	; 0x4000
   198d0:	cmp	r3, #0
   198d4:	movne	r3, #1
   198d8:	moveq	r3, #0
   198dc:	str	r3, [sp, #32]
   198e0:	moveq	r3, #1
   198e4:	movne	r3, #0
   198e8:	ldr	r2, [sp, #56]	; 0x38
   198ec:	and	r3, r3, r2
   198f0:	ands	r3, r3, #255	; 0xff
   198f4:	beq	194c8 <__assert_fail@plt+0x80b4>
   198f8:	add	r1, sl, r1
   198fc:	mov	r0, #0
   19900:	ldr	r7, [sp, #40]	; 0x28
   19904:	ldr	r2, [sp, #36]	; 0x24
   19908:	ldr	lr, [sp, #52]	; 0x34
   1990c:	b	199bc <__assert_fail@plt+0x85a8>
   19910:	cmp	r7, #0
   19914:	bne	19d10 <__assert_fail@plt+0x88fc>
   19918:	eor	r0, r2, #1
   1991c:	ands	r0, lr, r0
   19920:	beq	19958 <__assert_fail@plt+0x8544>
   19924:	cmp	fp, r8
   19928:	movhi	r2, #39	; 0x27
   1992c:	strbhi	r2, [r9, r8]
   19930:	add	r2, r8, #1
   19934:	cmp	fp, r2
   19938:	movhi	ip, #36	; 0x24
   1993c:	strbhi	ip, [r9, r2]
   19940:	add	r2, r8, #2
   19944:	cmp	fp, r2
   19948:	movhi	ip, #39	; 0x27
   1994c:	strbhi	ip, [r9, r2]
   19950:	add	r8, r8, #3
   19954:	mov	r2, r0
   19958:	cmp	fp, r8
   1995c:	movhi	r0, #92	; 0x5c
   19960:	strbhi	r0, [r9, r8]
   19964:	add	r0, r8, #1
   19968:	cmp	fp, r0
   1996c:	lsrhi	ip, r4, #6
   19970:	addhi	ip, ip, #48	; 0x30
   19974:	strbhi	ip, [r9, r0]
   19978:	add	ip, r8, #2
   1997c:	cmp	fp, ip
   19980:	lsrhi	r0, r4, #3
   19984:	andhi	r0, r0, #7
   19988:	addhi	r0, r0, #48	; 0x30
   1998c:	add	sl, sl, #1
   19990:	strbhi	r0, [r9, ip]
   19994:	and	r4, r4, #7
   19998:	cmp	sl, r1
   1999c:	add	r4, r4, #48	; 0x30
   199a0:	add	r8, r8, #3
   199a4:	bcs	19d28 <__assert_fail@plt+0x8914>
   199a8:	mov	r0, r3
   199ac:	cmp	fp, r8
   199b0:	strbhi	r4, [r9, r8]
   199b4:	ldrb	r4, [r5, #1]!
   199b8:	add	r8, r8, #1
   199bc:	cmp	r3, #0
   199c0:	bne	19910 <__assert_fail@plt+0x84fc>
   199c4:	cmp	r6, #0
   199c8:	bne	19a6c <__assert_fail@plt+0x8658>
   199cc:	eor	r6, r0, #1
   199d0:	and	r6, r6, r2
   199d4:	add	sl, sl, #1
   199d8:	cmp	r1, sl
   199dc:	uxtb	r6, r6
   199e0:	bls	19a94 <__assert_fail@plt+0x8680>
   199e4:	cmp	r6, #0
   199e8:	beq	199ac <__assert_fail@plt+0x8598>
   199ec:	cmp	fp, r8
   199f0:	movhi	r2, #39	; 0x27
   199f4:	strbhi	r2, [r9, r8]
   199f8:	add	r2, r8, #1
   199fc:	cmp	fp, r2
   19a00:	movhi	ip, #39	; 0x27
   19a04:	strbhi	ip, [r9, r2]
   19a08:	add	r8, r8, #2
   19a0c:	mov	r6, r3
   19a10:	mov	r2, r3
   19a14:	b	199ac <__assert_fail@plt+0x8598>
   19a18:	ldr	r3, [sp, #184]	; 0xb8
   19a1c:	cmp	r3, #0
   19a20:	beq	190f8 <__assert_fail@plt+0x7ce4>
   19a24:	lsr	r2, r4, #5
   19a28:	mov	r0, r3
   19a2c:	uxtb	r2, r2
   19a30:	and	r3, r4, #31
   19a34:	ldr	r2, [r0, r2, lsl #2]
   19a38:	lsr	r3, r2, r3
   19a3c:	tst	r3, #1
   19a40:	beq	190f8 <__assert_fail@plt+0x7ce4>
   19a44:	ldr	r3, [sp, #40]	; 0x28
   19a48:	cmp	r3, #0
   19a4c:	beq	192e4 <__assert_fail@plt+0x7ed0>
   19a50:	mov	r3, r1
   19a54:	str	r3, [sp, #64]	; 0x40
   19a58:	mov	sl, r9
   19a5c:	ldr	r3, [sp, #56]	; 0x38
   19a60:	mov	r9, fp
   19a64:	ldr	r2, [sp, #64]	; 0x40
   19a68:	b	19c58 <__assert_fail@plt+0x8844>
   19a6c:	cmp	fp, r8
   19a70:	eor	r6, r0, #1
   19a74:	movhi	ip, #92	; 0x5c
   19a78:	and	r6, r6, r2
   19a7c:	add	sl, sl, #1
   19a80:	strbhi	ip, [r9, r8]
   19a84:	cmp	r1, sl
   19a88:	add	r8, r8, #1
   19a8c:	uxtb	r6, r6
   19a90:	bhi	199e4 <__assert_fail@plt+0x85d0>
   19a94:	str	r2, [sp, #36]	; 0x24
   19a98:	b	19110 <__assert_fail@plt+0x7cfc>
   19a9c:	ldr	r3, [sp, #24]
   19aa0:	cmn	r3, #1
   19aa4:	mov	r3, #0
   19aa8:	str	r3, [sp, #128]	; 0x80
   19aac:	str	r3, [sp, #132]	; 0x84
   19ab0:	beq	19da4 <__assert_fail@plt+0x8990>
   19ab4:	mov	r2, r7
   19ab8:	mov	r3, #0
   19abc:	str	r7, [sp, #104]	; 0x68
   19ac0:	str	r5, [sp, #116]	; 0x74
   19ac4:	mov	r7, r3
   19ac8:	mov	r5, r2
   19acc:	str	r4, [sp, #32]
   19ad0:	str	r6, [sp, #108]	; 0x6c
   19ad4:	str	r8, [sp, #112]	; 0x70
   19ad8:	ldr	r3, [sp, #44]	; 0x2c
   19adc:	add	r6, sl, r7
   19ae0:	add	r4, r3, r6
   19ae4:	ldr	r3, [sp, #24]
   19ae8:	mov	r1, r4
   19aec:	sub	r2, r3, r6
   19af0:	add	r0, sp, #124	; 0x7c
   19af4:	add	r3, sp, #128	; 0x80
   19af8:	bl	1f0e0 <__assert_fail@plt+0xdccc>
   19afc:	subs	r8, r0, #0
   19b00:	beq	19e88 <__assert_fail@plt+0x8a74>
   19b04:	cmn	r8, #1
   19b08:	beq	19e60 <__assert_fail@plt+0x8a4c>
   19b0c:	cmn	r8, #2
   19b10:	beq	19df8 <__assert_fail@plt+0x89e4>
   19b14:	ldr	r3, [sp, #64]	; 0x40
   19b18:	cmp	r3, #0
   19b1c:	beq	19bdc <__assert_fail@plt+0x87c8>
   19b20:	cmp	r8, #1
   19b24:	beq	19bdc <__assert_fail@plt+0x87c8>
   19b28:	sub	r3, r8, #1
   19b2c:	add	r6, r3, r6
   19b30:	ldr	r3, [sp, #44]	; 0x2c
   19b34:	add	r6, r3, r6
   19b38:	ldrb	r3, [r4, #1]!
   19b3c:	sub	r3, r3, #91	; 0x5b
   19b40:	cmp	r3, #33	; 0x21
   19b44:	ldrls	pc, [pc, r3, lsl #2]
   19b48:	b	19bd4 <__assert_fail@plt+0x87c0>
   19b4c:	andeq	r9, r1, r0, asr #24
   19b50:	andeq	r9, r1, r0, asr #24
   19b54:	ldrdeq	r9, [r1], -r4
   19b58:	andeq	r9, r1, r0, asr #24
   19b5c:	ldrdeq	r9, [r1], -r4
   19b60:	andeq	r9, r1, r0, asr #24
   19b64:	ldrdeq	r9, [r1], -r4
   19b68:	ldrdeq	r9, [r1], -r4
   19b6c:	ldrdeq	r9, [r1], -r4
   19b70:	ldrdeq	r9, [r1], -r4
   19b74:	ldrdeq	r9, [r1], -r4
   19b78:	ldrdeq	r9, [r1], -r4
   19b7c:	ldrdeq	r9, [r1], -r4
   19b80:	ldrdeq	r9, [r1], -r4
   19b84:	ldrdeq	r9, [r1], -r4
   19b88:	ldrdeq	r9, [r1], -r4
   19b8c:	ldrdeq	r9, [r1], -r4
   19b90:	ldrdeq	r9, [r1], -r4
   19b94:	ldrdeq	r9, [r1], -r4
   19b98:	ldrdeq	r9, [r1], -r4
   19b9c:	ldrdeq	r9, [r1], -r4
   19ba0:	ldrdeq	r9, [r1], -r4
   19ba4:	ldrdeq	r9, [r1], -r4
   19ba8:	ldrdeq	r9, [r1], -r4
   19bac:	ldrdeq	r9, [r1], -r4
   19bb0:	ldrdeq	r9, [r1], -r4
   19bb4:	ldrdeq	r9, [r1], -r4
   19bb8:	ldrdeq	r9, [r1], -r4
   19bbc:	ldrdeq	r9, [r1], -r4
   19bc0:	ldrdeq	r9, [r1], -r4
   19bc4:	ldrdeq	r9, [r1], -r4
   19bc8:	ldrdeq	r9, [r1], -r4
   19bcc:	ldrdeq	r9, [r1], -r4
   19bd0:	andeq	r9, r1, r0, asr #24
   19bd4:	cmp	r6, r4
   19bd8:	bne	19b38 <__assert_fail@plt+0x8724>
   19bdc:	ldr	r0, [sp, #124]	; 0x7c
   19be0:	bl	111b0 <iswprint@plt>
   19be4:	add	r7, r7, r8
   19be8:	cmp	r0, #0
   19bec:	add	r0, sp, #128	; 0x80
   19bf0:	moveq	r5, #0
   19bf4:	bl	11144 <mbsinit@plt>
   19bf8:	cmp	r0, #0
   19bfc:	beq	19ad8 <__assert_fail@plt+0x86c4>
   19c00:	ldr	r4, [sp, #32]
   19c04:	str	r5, [sp, #32]
   19c08:	ldr	r3, [sp, #32]
   19c0c:	mov	r1, r7
   19c10:	eor	r3, r3, #1
   19c14:	ldr	r7, [sp, #104]	; 0x68
   19c18:	ldr	r6, [sp, #108]	; 0x6c
   19c1c:	ldr	r8, [sp, #112]	; 0x70
   19c20:	ldr	r5, [sp, #116]	; 0x74
   19c24:	uxtb	r3, r3
   19c28:	cmp	r1, #1
   19c2c:	bls	198e8 <__assert_fail@plt+0x84d4>
   19c30:	ldr	r2, [sp, #56]	; 0x38
   19c34:	and	r3, r3, r2
   19c38:	uxtb	r3, r3
   19c3c:	b	198f8 <__assert_fail@plt+0x84e4>
   19c40:	mov	r3, #2
   19c44:	str	r3, [sp, #176]	; 0xb0
   19c48:	ldr	r2, [sp, #64]	; 0x40
   19c4c:	ldr	r3, [sp, #56]	; 0x38
   19c50:	mov	sl, r9
   19c54:	mov	r9, fp
   19c58:	and	r3, r3, r2
   19c5c:	tst	r3, #255	; 0xff
   19c60:	ldr	r3, [sp, #176]	; 0xb0
   19c64:	movne	r3, #4
   19c68:	str	r3, [sp, #176]	; 0xb0
   19c6c:	ldr	r3, [sp, #180]	; 0xb4
   19c70:	mov	ip, #0
   19c74:	bic	r3, r3, #2
   19c78:	str	r3, [sp, #4]
   19c7c:	ldr	r3, [sp, #192]	; 0xc0
   19c80:	ldr	r2, [sp, #44]	; 0x2c
   19c84:	str	r3, [sp, #16]
   19c88:	ldr	r3, [sp, #188]	; 0xbc
   19c8c:	mov	r1, r9
   19c90:	str	r3, [sp, #12]
   19c94:	ldr	r3, [sp, #176]	; 0xb0
   19c98:	mov	r0, sl
   19c9c:	str	r3, [sp]
   19ca0:	str	ip, [sp, #8]
   19ca4:	ldr	r3, [sp, #24]
   19ca8:	bl	18b08 <__assert_fail@plt+0x76f4>
   19cac:	mov	fp, r0
   19cb0:	mov	r0, fp
   19cb4:	add	sp, sp, #140	; 0x8c
   19cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cbc:	mov	r4, #92	; 0x5c
   19cc0:	mov	r1, #0
   19cc4:	mov	r3, r4
   19cc8:	b	192bc <__assert_fail@plt+0x7ea8>
   19ccc:	mov	r3, #0
   19cd0:	ldr	r1, [sp, #52]	; 0x34
   19cd4:	str	r3, [sp, #32]
   19cd8:	mov	r4, #63	; 0x3f
   19cdc:	b	190dc <__assert_fail@plt+0x7cc8>
   19ce0:	cmp	fp, #0
   19ce4:	beq	19d40 <__assert_fail@plt+0x892c>
   19ce8:	mov	r3, #39	; 0x27
   19cec:	strb	r3, [r9]
   19cf0:	mov	r3, #0
   19cf4:	str	r3, [sp, #40]	; 0x28
   19cf8:	mov	r3, #1
   19cfc:	str	r3, [sp, #68]	; 0x44
   19d00:	ldr	r3, [pc, #448]	; 19ec8 <__assert_fail@plt+0x8ab4>
   19d04:	mov	r8, #1
   19d08:	str	r3, [sp, #72]	; 0x48
   19d0c:	b	18ef0 <__assert_fail@plt+0x7adc>
   19d10:	ldr	r3, [sp, #40]	; 0x28
   19d14:	mov	sl, r9
   19d18:	str	r3, [sp, #56]	; 0x38
   19d1c:	mov	r9, fp
   19d20:	ldr	r2, [sp, #64]	; 0x40
   19d24:	b	19c58 <__assert_fail@plt+0x8844>
   19d28:	str	r2, [sp, #36]	; 0x24
   19d2c:	b	19140 <__assert_fail@plt+0x7d2c>
   19d30:	mov	r1, #0
   19d34:	str	r3, [sp, #32]
   19d38:	mov	r4, #63	; 0x3f
   19d3c:	b	190dc <__assert_fail@plt+0x7cc8>
   19d40:	ldr	r3, [pc, #384]	; 19ec8 <__assert_fail@plt+0x8ab4>
   19d44:	str	r3, [sp, #72]	; 0x48
   19d48:	mov	r3, #0
   19d4c:	str	r3, [sp, #40]	; 0x28
   19d50:	mov	r3, #1
   19d54:	str	r3, [sp, #68]	; 0x44
   19d58:	mov	r8, r3
   19d5c:	b	18ef0 <__assert_fail@plt+0x7adc>
   19d60:	bl	113f0 <abort@plt>
   19d64:	cmp	fp, #0
   19d68:	beq	19dc8 <__assert_fail@plt+0x89b4>
   19d6c:	mov	r2, #1
   19d70:	mov	r3, #34	; 0x22
   19d74:	strb	r3, [r9]
   19d78:	mov	r8, r2
   19d7c:	mov	r3, r2
   19d80:	str	r2, [sp, #68]	; 0x44
   19d84:	str	r3, [sp, #56]	; 0x38
   19d88:	ldr	r3, [pc, #316]	; 19ecc <__assert_fail@plt+0x8ab8>
   19d8c:	ldr	r1, [sp, #56]	; 0x38
   19d90:	str	r3, [sp, #72]	; 0x48
   19d94:	ldr	r2, [sp, #176]	; 0xb0
   19d98:	ldr	ip, [sp, #40]	; 0x28
   19d9c:	ldr	lr, [sp, #176]	; 0xb0
   19da0:	b	18bd4 <__assert_fail@plt+0x77c0>
   19da4:	ldr	r0, [sp, #44]	; 0x2c
   19da8:	bl	112a0 <strlen@plt>
   19dac:	str	r0, [sp, #24]
   19db0:	b	19ab4 <__assert_fail@plt+0x86a0>
   19db4:	mov	r7, #0
   19db8:	ldr	r1, [sp, #52]	; 0x34
   19dbc:	str	r3, [sp, #32]
   19dc0:	mov	r4, #48	; 0x30
   19dc4:	b	190dc <__assert_fail@plt+0x7cc8>
   19dc8:	mov	r3, #1
   19dcc:	str	r3, [sp, #68]	; 0x44
   19dd0:	mov	r8, r3
   19dd4:	b	19d84 <__assert_fail@plt+0x8970>
   19dd8:	mov	r3, #2
   19ddc:	mov	sl, r9
   19de0:	str	r3, [sp, #176]	; 0xb0
   19de4:	mov	r9, fp
   19de8:	ldr	r3, [sp, #56]	; 0x38
   19dec:	b	19c58 <__assert_fail@plt+0x8844>
   19df0:	ldr	r6, [sp, #48]	; 0x30
   19df4:	b	198a4 <__assert_fail@plt+0x8490>
   19df8:	ldr	r0, [sp, #24]
   19dfc:	mov	ip, r6
   19e00:	cmp	r0, ip
   19e04:	mov	r1, r7
   19e08:	mov	r2, r4
   19e0c:	ldr	r7, [sp, #104]	; 0x68
   19e10:	ldr	r4, [sp, #32]
   19e14:	ldr	r6, [sp, #108]	; 0x6c
   19e18:	ldr	r8, [sp, #112]	; 0x70
   19e1c:	ldr	r5, [sp, #116]	; 0x74
   19e20:	bls	19e50 <__assert_fail@plt+0x8a3c>
   19e24:	ldrb	r3, [r2]
   19e28:	cmp	r3, #0
   19e2c:	bne	19e40 <__assert_fail@plt+0x8a2c>
   19e30:	b	19f60 <__assert_fail@plt+0x8b4c>
   19e34:	ldrb	r3, [r2, #1]!
   19e38:	cmp	r3, #0
   19e3c:	beq	19f60 <__assert_fail@plt+0x8b4c>
   19e40:	add	r1, r1, #1
   19e44:	add	r3, sl, r1
   19e48:	cmp	r0, r3
   19e4c:	bhi	19e34 <__assert_fail@plt+0x8a20>
   19e50:	mov	r2, #0
   19e54:	mov	r3, r7
   19e58:	str	r2, [sp, #32]
   19e5c:	b	19c28 <__assert_fail@plt+0x8814>
   19e60:	mov	r1, r7
   19e64:	ldr	r7, [sp, #104]	; 0x68
   19e68:	mov	r2, #0
   19e6c:	ldr	r4, [sp, #32]
   19e70:	ldr	r6, [sp, #108]	; 0x6c
   19e74:	ldr	r8, [sp, #112]	; 0x70
   19e78:	ldr	r5, [sp, #116]	; 0x74
   19e7c:	mov	r3, r7
   19e80:	str	r2, [sp, #32]
   19e84:	b	19c28 <__assert_fail@plt+0x8814>
   19e88:	mov	r3, r5
   19e8c:	eor	r3, r3, #1
   19e90:	ldr	r4, [sp, #32]
   19e94:	mov	r1, r7
   19e98:	str	r5, [sp, #32]
   19e9c:	ldr	r7, [sp, #104]	; 0x68
   19ea0:	ldr	r6, [sp, #108]	; 0x6c
   19ea4:	ldr	r8, [sp, #112]	; 0x70
   19ea8:	ldr	r5, [sp, #116]	; 0x74
   19eac:	uxtb	r3, r3
   19eb0:	b	19c28 <__assert_fail@plt+0x8814>
   19eb4:	mov	sl, r9
   19eb8:	str	r3, [sp, #56]	; 0x38
   19ebc:	mov	r9, fp
   19ec0:	ldr	r2, [sp, #64]	; 0x40
   19ec4:	b	19c58 <__assert_fail@plt+0x8844>
   19ec8:	andeq	r0, r2, r0, asr #31
   19ecc:			; <UNDEFINED> instruction: 0x00020fbc
   19ed0:	andeq	r0, r2, r4, asr #31
   19ed4:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   19ed8:	ldr	r2, [sp, #44]	; 0x2c
   19edc:	ldrb	r1, [r2, r3]
   19ee0:	sub	r2, r1, #33	; 0x21
   19ee4:	uxtb	r2, r2
   19ee8:	cmp	r2, #29
   19eec:	bhi	19f6c <__assert_fail@plt+0x8b58>
   19ef0:	ldr	r0, [pc, #-36]	; 19ed4 <__assert_fail@plt+0x8ac0>
   19ef4:	mov	ip, #1
   19ef8:	ands	r2, r0, ip, lsl r2
   19efc:	beq	19f8c <__assert_fail@plt+0x8b78>
   19f00:	ldr	r2, [sp, #40]	; 0x28
   19f04:	cmp	r2, #0
   19f08:	bne	1a080 <__assert_fail@plt+0x8c6c>
   19f0c:	add	r2, r8, #1
   19f10:	cmp	fp, r8
   19f14:	strbhi	r4, [r9, r8]
   19f18:	cmp	fp, r2
   19f1c:	movhi	r0, #34	; 0x22
   19f20:	strbhi	r0, [r9, r2]
   19f24:	add	r2, r8, #2
   19f28:	cmp	fp, r2
   19f2c:	movhi	r0, #34	; 0x22
   19f30:	strbhi	r0, [r9, r2]
   19f34:	add	r2, r8, #3
   19f38:	cmp	fp, r2
   19f3c:	mov	sl, r3
   19f40:	ldr	r3, [sp, #40]	; 0x28
   19f44:	movhi	r0, #63	; 0x3f
   19f48:	mov	r4, r1
   19f4c:	strbhi	r0, [r9, r2]
   19f50:	add	r8, r8, #4
   19f54:	mov	r1, r3
   19f58:	str	r3, [sp, #32]
   19f5c:	b	190dc <__assert_fail@plt+0x7cc8>
   19f60:	str	r3, [sp, #32]
   19f64:	mov	r3, r7
   19f68:	b	19c28 <__assert_fail@plt+0x8814>
   19f6c:	mov	r1, #0
   19f70:	str	r1, [sp, #32]
   19f74:	b	190dc <__assert_fail@plt+0x7cc8>
   19f78:	mov	sl, r9
   19f7c:	ldr	r3, [sp, #56]	; 0x38
   19f80:	mov	r9, fp
   19f84:	ldr	r2, [sp, #64]	; 0x40
   19f88:	b	19c58 <__assert_fail@plt+0x8844>
   19f8c:	str	r2, [sp, #32]
   19f90:	mov	r1, #0
   19f94:	b	190dc <__assert_fail@plt+0x7cc8>
   19f98:	ldr	r2, [sp, #76]	; 0x4c
   19f9c:	mov	sl, r9
   19fa0:	mov	r9, fp
   19fa4:	mov	fp, r8
   19fa8:	ldr	r1, [sp, #72]	; 0x48
   19fac:	cmp	r1, #0
   19fb0:	moveq	r3, #0
   19fb4:	andne	r3, r2, #1
   19fb8:	cmp	r3, #0
   19fbc:	beq	19fe8 <__assert_fail@plt+0x8bd4>
   19fc0:	ldrb	r3, [r1]
   19fc4:	cmp	r3, #0
   19fc8:	beq	19fe8 <__assert_fail@plt+0x8bd4>
   19fcc:	mov	r2, r1
   19fd0:	cmp	r9, fp
   19fd4:	strbhi	r3, [sl, fp]
   19fd8:	ldrb	r3, [r2, #1]!
   19fdc:	add	fp, fp, #1
   19fe0:	cmp	r3, #0
   19fe4:	bne	19fd0 <__assert_fail@plt+0x8bbc>
   19fe8:	cmp	r9, fp
   19fec:	movhi	r3, #0
   19ff0:	strbhi	r3, [sl, fp]
   19ff4:	b	19cb0 <__assert_fail@plt+0x889c>
   19ff8:	ldr	r3, [sp, #192]	; 0xc0
   19ffc:	mov	ip, #5
   1a000:	str	r3, [sp, #16]
   1a004:	ldr	r3, [sp, #188]	; 0xbc
   1a008:	ldr	r2, [sp, #44]	; 0x2c
   1a00c:	str	r3, [sp, #12]
   1a010:	ldr	r3, [sp, #184]	; 0xb8
   1a014:	ldr	r1, [sp, #84]	; 0x54
   1a018:	str	r3, [sp, #8]
   1a01c:	ldr	r3, [sp, #180]	; 0xb4
   1a020:	mov	r0, r9
   1a024:	str	r3, [sp, #4]
   1a028:	str	ip, [sp]
   1a02c:	ldr	r3, [sp, #24]
   1a030:	bl	18b08 <__assert_fail@plt+0x76f4>
   1a034:	mov	fp, r0
   1a038:	b	19cb0 <__assert_fail@plt+0x889c>
   1a03c:	mov	sl, r9
   1a040:	mov	r9, fp
   1a044:	mov	fp, r8
   1a048:	b	19fa8 <__assert_fail@plt+0x8b94>
   1a04c:	ldr	r1, [sp, #176]	; 0xb0
   1a050:	bl	189e8 <__assert_fail@plt+0x75d4>
   1a054:	str	r0, [sp, #192]	; 0xc0
   1a058:	b	18fc4 <__assert_fail@plt+0x7bb0>
   1a05c:	ldr	r1, [sp, #176]	; 0xb0
   1a060:	bl	189e8 <__assert_fail@plt+0x75d4>
   1a064:	str	r0, [sp, #188]	; 0xbc
   1a068:	b	18fa4 <__assert_fail@plt+0x7b90>
   1a06c:	mov	sl, r9
   1a070:	mov	r2, r3
   1a074:	mov	r9, fp
   1a078:	mov	fp, r8
   1a07c:	b	19fa8 <__assert_fail@plt+0x8b94>
   1a080:	mov	sl, r9
   1a084:	mov	r9, fp
   1a088:	b	19c6c <__assert_fail@plt+0x8858>
   1a08c:	push	{r4, r5, r6, lr}
   1a090:	mov	r5, r0
   1a094:	bl	112dc <__errno_location@plt>
   1a098:	cmp	r5, #0
   1a09c:	mov	r1, #48	; 0x30
   1a0a0:	mov	r4, r0
   1a0a4:	ldr	r0, [pc, #16]	; 1a0bc <__assert_fail@plt+0x8ca8>
   1a0a8:	ldr	r6, [r4]
   1a0ac:	movne	r0, r5
   1a0b0:	bl	1d9cc <__assert_fail@plt+0xc5b8>
   1a0b4:	str	r6, [r4]
   1a0b8:	pop	{r4, r5, r6, pc}
   1a0bc:	strdeq	r2, [r3], -r0
   1a0c0:	ldr	r3, [pc, #12]	; 1a0d4 <__assert_fail@plt+0x8cc0>
   1a0c4:	cmp	r0, #0
   1a0c8:	moveq	r0, r3
   1a0cc:	ldr	r0, [r0]
   1a0d0:	bx	lr
   1a0d4:	strdeq	r2, [r3], -r0
   1a0d8:	ldr	r3, [pc, #12]	; 1a0ec <__assert_fail@plt+0x8cd8>
   1a0dc:	cmp	r0, #0
   1a0e0:	moveq	r0, r3
   1a0e4:	str	r1, [r0]
   1a0e8:	bx	lr
   1a0ec:	strdeq	r2, [r3], -r0
   1a0f0:	ldr	r3, [pc, #52]	; 1a12c <__assert_fail@plt+0x8d18>
   1a0f4:	cmp	r0, #0
   1a0f8:	moveq	r0, r3
   1a0fc:	add	r3, r0, #8
   1a100:	push	{lr}		; (str lr, [sp, #-4]!)
   1a104:	lsr	lr, r1, #5
   1a108:	and	r1, r1, #31
   1a10c:	ldr	ip, [r3, lr, lsl #2]
   1a110:	lsr	r0, ip, r1
   1a114:	eor	r2, r2, r0
   1a118:	and	r2, r2, #1
   1a11c:	and	r0, r0, #1
   1a120:	eor	r1, ip, r2, lsl r1
   1a124:	str	r1, [r3, lr, lsl #2]
   1a128:	pop	{pc}		; (ldr pc, [sp], #4)
   1a12c:	strdeq	r2, [r3], -r0
   1a130:	ldr	r3, [pc, #16]	; 1a148 <__assert_fail@plt+0x8d34>
   1a134:	cmp	r0, #0
   1a138:	movne	r3, r0
   1a13c:	ldr	r0, [r3, #4]
   1a140:	str	r1, [r3, #4]
   1a144:	bx	lr
   1a148:	strdeq	r2, [r3], -r0
   1a14c:	ldr	r3, [pc, #44]	; 1a180 <__assert_fail@plt+0x8d6c>
   1a150:	cmp	r0, #0
   1a154:	moveq	r0, r3
   1a158:	mov	ip, #10
   1a15c:	cmp	r2, #0
   1a160:	cmpne	r1, #0
   1a164:	str	ip, [r0]
   1a168:	beq	1a178 <__assert_fail@plt+0x8d64>
   1a16c:	str	r1, [r0, #40]	; 0x28
   1a170:	str	r2, [r0, #44]	; 0x2c
   1a174:	bx	lr
   1a178:	push	{r4, lr}
   1a17c:	bl	113f0 <abort@plt>
   1a180:	strdeq	r2, [r3], -r0
   1a184:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a188:	sub	sp, sp, #24
   1a18c:	ldr	ip, [pc, #108]	; 1a200 <__assert_fail@plt+0x8dec>
   1a190:	ldr	r4, [sp, #56]	; 0x38
   1a194:	mov	r9, r2
   1a198:	cmp	r4, #0
   1a19c:	moveq	r4, ip
   1a1a0:	mov	sl, r3
   1a1a4:	mov	r7, r0
   1a1a8:	mov	r8, r1
   1a1ac:	bl	112dc <__errno_location@plt>
   1a1b0:	ldr	r3, [r4, #44]	; 0x2c
   1a1b4:	mov	r1, r8
   1a1b8:	ldr	r6, [r0]
   1a1bc:	str	r3, [sp, #16]
   1a1c0:	ldr	r2, [r4, #40]	; 0x28
   1a1c4:	add	r3, r4, #8
   1a1c8:	str	r3, [sp, #8]
   1a1cc:	str	r2, [sp, #12]
   1a1d0:	ldr	r2, [r4, #4]
   1a1d4:	mov	r5, r0
   1a1d8:	str	r2, [sp, #4]
   1a1dc:	ldr	ip, [r4]
   1a1e0:	mov	r3, sl
   1a1e4:	mov	r2, r9
   1a1e8:	mov	r0, r7
   1a1ec:	str	ip, [sp]
   1a1f0:	bl	18b08 <__assert_fail@plt+0x76f4>
   1a1f4:	str	r6, [r5]
   1a1f8:	add	sp, sp, #24
   1a1fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a200:	strdeq	r2, [r3], -r0
   1a204:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a208:	cmp	r2, #0
   1a20c:	sub	sp, sp, #36	; 0x24
   1a210:	ldr	r4, [pc, #164]	; 1a2bc <__assert_fail@plt+0x8ea8>
   1a214:	mov	r8, r1
   1a218:	movne	r4, r2
   1a21c:	mov	r7, r0
   1a220:	bl	112dc <__errno_location@plt>
   1a224:	ldr	r3, [r4, #44]	; 0x2c
   1a228:	ldr	r5, [r4, #4]
   1a22c:	add	r9, r4, #8
   1a230:	orr	r5, r5, #1
   1a234:	mov	r1, #0
   1a238:	mov	r2, r7
   1a23c:	ldr	fp, [r0]
   1a240:	str	r3, [sp, #16]
   1a244:	ldr	r3, [r4, #40]	; 0x28
   1a248:	stmib	sp, {r5, r9}
   1a24c:	str	r3, [sp, #12]
   1a250:	ldr	r3, [r4]
   1a254:	mov	r6, r0
   1a258:	str	r3, [sp]
   1a25c:	mov	r0, r1
   1a260:	mov	r3, r8
   1a264:	bl	18b08 <__assert_fail@plt+0x76f4>
   1a268:	add	r1, r0, #1
   1a26c:	mov	r0, r1
   1a270:	str	r1, [sp, #28]
   1a274:	bl	1d488 <__assert_fail@plt+0xc074>
   1a278:	ldr	r3, [r4, #44]	; 0x2c
   1a27c:	ldr	r1, [sp, #28]
   1a280:	str	r3, [sp, #16]
   1a284:	ldr	r3, [r4, #40]	; 0x28
   1a288:	str	r5, [sp, #4]
   1a28c:	str	r3, [sp, #12]
   1a290:	str	r9, [sp, #8]
   1a294:	ldr	ip, [r4]
   1a298:	mov	r3, r8
   1a29c:	mov	r2, r7
   1a2a0:	str	ip, [sp]
   1a2a4:	mov	sl, r0
   1a2a8:	bl	18b08 <__assert_fail@plt+0x76f4>
   1a2ac:	mov	r0, sl
   1a2b0:	str	fp, [r6]
   1a2b4:	add	sp, sp, #36	; 0x24
   1a2b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2bc:	strdeq	r2, [r3], -r0
   1a2c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2c4:	cmp	r3, #0
   1a2c8:	sub	sp, sp, #44	; 0x2c
   1a2cc:	ldr	r4, [pc, #192]	; 1a394 <__assert_fail@plt+0x8f80>
   1a2d0:	mov	r6, r2
   1a2d4:	movne	r4, r3
   1a2d8:	mov	r9, r1
   1a2dc:	mov	r8, r0
   1a2e0:	bl	112dc <__errno_location@plt>
   1a2e4:	ldr	r3, [r4, #44]	; 0x2c
   1a2e8:	ldr	r5, [r4, #4]
   1a2ec:	add	sl, r4, #8
   1a2f0:	cmp	r6, #0
   1a2f4:	orreq	r5, r5, #1
   1a2f8:	mov	r1, #0
   1a2fc:	ldr	r2, [r0]
   1a300:	str	r3, [sp, #16]
   1a304:	ldr	r3, [r4, #40]	; 0x28
   1a308:	stmib	sp, {r5, sl}
   1a30c:	str	r3, [sp, #12]
   1a310:	ldr	r3, [r4]
   1a314:	mov	r7, r0
   1a318:	str	r2, [sp, #28]
   1a31c:	str	r3, [sp]
   1a320:	mov	r2, r8
   1a324:	mov	r3, r9
   1a328:	mov	r0, r1
   1a32c:	bl	18b08 <__assert_fail@plt+0x76f4>
   1a330:	add	r1, r0, #1
   1a334:	mov	fp, r0
   1a338:	mov	r0, r1
   1a33c:	str	r1, [sp, #36]	; 0x24
   1a340:	bl	1d488 <__assert_fail@plt+0xc074>
   1a344:	ldr	r3, [r4, #44]	; 0x2c
   1a348:	mov	r2, r8
   1a34c:	str	r3, [sp, #16]
   1a350:	ldr	r3, [r4, #40]	; 0x28
   1a354:	str	r5, [sp, #4]
   1a358:	str	r3, [sp, #12]
   1a35c:	str	sl, [sp, #8]
   1a360:	ldr	ip, [r4]
   1a364:	ldr	r1, [sp, #36]	; 0x24
   1a368:	mov	r3, r9
   1a36c:	str	ip, [sp]
   1a370:	str	r0, [sp, #32]
   1a374:	bl	18b08 <__assert_fail@plt+0x76f4>
   1a378:	ldr	r2, [sp, #28]
   1a37c:	cmp	r6, #0
   1a380:	str	r2, [r7]
   1a384:	ldr	r0, [sp, #32]
   1a388:	strne	fp, [r6]
   1a38c:	add	sp, sp, #44	; 0x2c
   1a390:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a394:	strdeq	r2, [r3], -r0
   1a398:	push	{r4, r5, r6, r7, r8, lr}
   1a39c:	ldr	r6, [pc, #116]	; 1a418 <__assert_fail@plt+0x9004>
   1a3a0:	ldr	r3, [r6, #4]
   1a3a4:	ldr	r7, [r6]
   1a3a8:	cmp	r3, #1
   1a3ac:	movgt	r5, r7
   1a3b0:	movgt	r4, #1
   1a3b4:	ble	1a3d4 <__assert_fail@plt+0x8fc0>
   1a3b8:	ldr	r0, [r5, #12]
   1a3bc:	bl	16f1c <__assert_fail@plt+0x5b08>
   1a3c0:	ldr	r3, [r6, #4]
   1a3c4:	add	r4, r4, #1
   1a3c8:	cmp	r3, r4
   1a3cc:	add	r5, r5, #8
   1a3d0:	bgt	1a3b8 <__assert_fail@plt+0x8fa4>
   1a3d4:	ldr	r0, [r7, #4]
   1a3d8:	ldr	r4, [pc, #60]	; 1a41c <__assert_fail@plt+0x9008>
   1a3dc:	cmp	r0, r4
   1a3e0:	beq	1a3f4 <__assert_fail@plt+0x8fe0>
   1a3e4:	bl	16f1c <__assert_fail@plt+0x5b08>
   1a3e8:	mov	r3, #256	; 0x100
   1a3ec:	str	r4, [r6, #12]
   1a3f0:	str	r3, [r6, #8]
   1a3f4:	ldr	r4, [pc, #36]	; 1a420 <__assert_fail@plt+0x900c>
   1a3f8:	cmp	r7, r4
   1a3fc:	beq	1a40c <__assert_fail@plt+0x8ff8>
   1a400:	mov	r0, r7
   1a404:	bl	16f1c <__assert_fail@plt+0x5b08>
   1a408:	str	r4, [r6]
   1a40c:	mov	r3, #1
   1a410:	str	r3, [r6, #4]
   1a414:	pop	{r4, r5, r6, r7, r8, pc}
   1a418:	andeq	r2, r3, ip, ror #2
   1a41c:	andeq	r2, r3, r0, lsr #4
   1a420:	andeq	r2, r3, r4, ror r1
   1a424:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a428:	sub	sp, sp, #44	; 0x2c
   1a42c:	mov	r5, r0
   1a430:	mov	sl, r1
   1a434:	bl	112dc <__errno_location@plt>
   1a438:	ldr	r4, [pc, #400]	; 1a5d0 <__assert_fail@plt+0x91bc>
   1a43c:	cmn	r5, #-2147483647	; 0x80000001
   1a440:	ldr	r6, [r4]
   1a444:	mov	r8, r0
   1a448:	movne	r0, #0
   1a44c:	moveq	r0, #1
   1a450:	ldr	r3, [r8]
   1a454:	orrs	r0, r0, r5, lsr #31
   1a458:	str	r3, [sp, #24]
   1a45c:	bne	1a5cc <__assert_fail@plt+0x91b8>
   1a460:	ldr	r2, [r4, #4]
   1a464:	cmp	r5, r2
   1a468:	blt	1a4c8 <__assert_fail@plt+0x90b4>
   1a46c:	add	r7, r4, #8
   1a470:	cmp	r6, r7
   1a474:	str	r2, [sp, #36]	; 0x24
   1a478:	beq	1a59c <__assert_fail@plt+0x9188>
   1a47c:	mov	r3, #8
   1a480:	sub	r2, r5, r2
   1a484:	mov	r0, r6
   1a488:	str	r3, [sp]
   1a48c:	add	r2, r2, #1
   1a490:	mvn	r3, #-2147483648	; 0x80000000
   1a494:	add	r1, sp, #36	; 0x24
   1a498:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1a49c:	mov	r6, r0
   1a4a0:	str	r0, [r4]
   1a4a4:	ldr	r0, [r4, #4]
   1a4a8:	ldr	r2, [sp, #36]	; 0x24
   1a4ac:	mov	r1, #0
   1a4b0:	sub	r2, r2, r0
   1a4b4:	add	r0, r6, r0, lsl #3
   1a4b8:	lsl	r2, r2, #3
   1a4bc:	bl	112f4 <memset@plt>
   1a4c0:	ldr	r3, [sp, #36]	; 0x24
   1a4c4:	str	r3, [r4, #4]
   1a4c8:	ldr	r4, [pc, #260]	; 1a5d4 <__assert_fail@plt+0x91c0>
   1a4cc:	add	fp, r6, r5, lsl #3
   1a4d0:	ldr	r9, [r6, r5, lsl #3]
   1a4d4:	ldr	r0, [r4, #4]
   1a4d8:	ldr	r3, [r4]
   1a4dc:	ldr	r7, [fp, #4]
   1a4e0:	ldr	r1, [r4, #44]	; 0x2c
   1a4e4:	ldr	r2, [r4, #40]	; 0x28
   1a4e8:	orr	r0, r0, #1
   1a4ec:	str	r3, [sp]
   1a4f0:	add	r3, r4, #8
   1a4f4:	str	r0, [sp, #28]
   1a4f8:	str	r0, [sp, #4]
   1a4fc:	str	r1, [sp, #16]
   1a500:	str	r2, [sp, #12]
   1a504:	str	r3, [sp, #8]
   1a508:	mov	r0, r7
   1a50c:	mov	r1, r9
   1a510:	mvn	r3, #0
   1a514:	mov	r2, sl
   1a518:	bl	18b08 <__assert_fail@plt+0x76f4>
   1a51c:	cmp	r9, r0
   1a520:	bhi	1a588 <__assert_fail@plt+0x9174>
   1a524:	add	r3, r4, #48	; 0x30
   1a528:	add	r9, r0, #1
   1a52c:	cmp	r7, r3
   1a530:	str	r9, [r6, r5, lsl #3]
   1a534:	beq	1a540 <__assert_fail@plt+0x912c>
   1a538:	mov	r0, r7
   1a53c:	bl	16f1c <__assert_fail@plt+0x5b08>
   1a540:	mov	r0, r9
   1a544:	bl	1d488 <__assert_fail@plt+0xc074>
   1a548:	ldr	ip, [r4, #44]	; 0x2c
   1a54c:	ldr	r3, [r4]
   1a550:	ldr	lr, [r4, #40]	; 0x28
   1a554:	ldr	r4, [pc, #124]	; 1a5d8 <__assert_fail@plt+0x91c4>
   1a558:	mov	r2, sl
   1a55c:	mov	r1, r9
   1a560:	str	r0, [fp, #4]
   1a564:	str	r4, [sp, #8]
   1a568:	ldr	r4, [sp, #28]
   1a56c:	str	r3, [sp]
   1a570:	str	r4, [sp, #4]
   1a574:	str	ip, [sp, #16]
   1a578:	str	lr, [sp, #12]
   1a57c:	mvn	r3, #0
   1a580:	mov	r7, r0
   1a584:	bl	18b08 <__assert_fail@plt+0x76f4>
   1a588:	ldr	r3, [sp, #24]
   1a58c:	mov	r0, r7
   1a590:	str	r3, [r8]
   1a594:	add	sp, sp, #44	; 0x2c
   1a598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a59c:	mov	r3, #8
   1a5a0:	sub	r2, r5, r2
   1a5a4:	str	r3, [sp]
   1a5a8:	add	r1, sp, #36	; 0x24
   1a5ac:	add	r2, r2, #1
   1a5b0:	mvn	r3, #-2147483648	; 0x80000000
   1a5b4:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1a5b8:	mov	r6, r0
   1a5bc:	ldm	r7, {r0, r1}
   1a5c0:	str	r6, [r4]
   1a5c4:	stm	r6, {r0, r1}
   1a5c8:	b	1a4a4 <__assert_fail@plt+0x9090>
   1a5cc:	bl	113f0 <abort@plt>
   1a5d0:	andeq	r2, r3, ip, ror #2
   1a5d4:	strdeq	r2, [r3], -r0
   1a5d8:	strdeq	r2, [r3], -r8
   1a5dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5e0:	sub	sp, sp, #52	; 0x34
   1a5e4:	mov	r5, r0
   1a5e8:	mov	sl, r1
   1a5ec:	mov	fp, r2
   1a5f0:	bl	112dc <__errno_location@plt>
   1a5f4:	ldr	r4, [pc, #408]	; 1a794 <__assert_fail@plt+0x9380>
   1a5f8:	cmn	r5, #-2147483647	; 0x80000001
   1a5fc:	ldr	r6, [r4]
   1a600:	mov	r8, r0
   1a604:	movne	r0, #0
   1a608:	moveq	r0, #1
   1a60c:	ldr	r3, [r8]
   1a610:	orrs	r0, r0, r5, lsr #31
   1a614:	str	r3, [sp, #28]
   1a618:	bne	1a790 <__assert_fail@plt+0x937c>
   1a61c:	ldr	r2, [r4, #4]
   1a620:	cmp	r5, r2
   1a624:	blt	1a684 <__assert_fail@plt+0x9270>
   1a628:	add	r7, r4, #8
   1a62c:	cmp	r6, r7
   1a630:	str	r2, [sp, #44]	; 0x2c
   1a634:	beq	1a760 <__assert_fail@plt+0x934c>
   1a638:	mov	r3, #8
   1a63c:	sub	r2, r5, r2
   1a640:	mov	r0, r6
   1a644:	str	r3, [sp]
   1a648:	add	r2, r2, #1
   1a64c:	mvn	r3, #-2147483648	; 0x80000000
   1a650:	add	r1, sp, #44	; 0x2c
   1a654:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1a658:	mov	r6, r0
   1a65c:	str	r0, [r4]
   1a660:	ldr	r0, [r4, #4]
   1a664:	ldr	r2, [sp, #44]	; 0x2c
   1a668:	mov	r1, #0
   1a66c:	sub	r2, r2, r0
   1a670:	add	r0, r6, r0, lsl #3
   1a674:	lsl	r2, r2, #3
   1a678:	bl	112f4 <memset@plt>
   1a67c:	ldr	r3, [sp, #44]	; 0x2c
   1a680:	str	r3, [r4, #4]
   1a684:	ldr	r4, [pc, #268]	; 1a798 <__assert_fail@plt+0x9384>
   1a688:	add	r3, r6, r5, lsl #3
   1a68c:	str	r3, [sp, #32]
   1a690:	ldr	r7, [r3, #4]
   1a694:	ldr	r0, [r4, #4]
   1a698:	ldr	r3, [r4]
   1a69c:	ldr	r9, [r6, r5, lsl #3]
   1a6a0:	ldr	r1, [r4, #44]	; 0x2c
   1a6a4:	ldr	r2, [r4, #40]	; 0x28
   1a6a8:	orr	r0, r0, #1
   1a6ac:	str	r3, [sp]
   1a6b0:	add	r3, r4, #8
   1a6b4:	str	r0, [sp, #36]	; 0x24
   1a6b8:	str	r0, [sp, #4]
   1a6bc:	str	r1, [sp, #16]
   1a6c0:	str	r2, [sp, #12]
   1a6c4:	str	r3, [sp, #8]
   1a6c8:	mov	r0, r7
   1a6cc:	mov	r1, r9
   1a6d0:	mov	r3, fp
   1a6d4:	mov	r2, sl
   1a6d8:	bl	18b08 <__assert_fail@plt+0x76f4>
   1a6dc:	cmp	r9, r0
   1a6e0:	bhi	1a74c <__assert_fail@plt+0x9338>
   1a6e4:	add	r3, r4, #48	; 0x30
   1a6e8:	add	r9, r0, #1
   1a6ec:	cmp	r7, r3
   1a6f0:	str	r9, [r6, r5, lsl #3]
   1a6f4:	beq	1a700 <__assert_fail@plt+0x92ec>
   1a6f8:	mov	r0, r7
   1a6fc:	bl	16f1c <__assert_fail@plt+0x5b08>
   1a700:	mov	r0, r9
   1a704:	bl	1d488 <__assert_fail@plt+0xc074>
   1a708:	ldr	ip, [sp, #32]
   1a70c:	ldr	lr, [r4, #44]	; 0x2c
   1a710:	ldr	r5, [r4, #40]	; 0x28
   1a714:	mov	r3, fp
   1a718:	mov	r2, sl
   1a71c:	mov	r1, r9
   1a720:	str	r0, [ip, #4]
   1a724:	ldr	ip, [r4]
   1a728:	ldr	r4, [pc, #108]	; 1a79c <__assert_fail@plt+0x9388>
   1a72c:	str	lr, [sp, #16]
   1a730:	str	r4, [sp, #8]
   1a734:	ldr	r4, [sp, #36]	; 0x24
   1a738:	str	r5, [sp, #12]
   1a73c:	str	r4, [sp, #4]
   1a740:	str	ip, [sp]
   1a744:	mov	r7, r0
   1a748:	bl	18b08 <__assert_fail@plt+0x76f4>
   1a74c:	ldr	r3, [sp, #28]
   1a750:	mov	r0, r7
   1a754:	str	r3, [r8]
   1a758:	add	sp, sp, #52	; 0x34
   1a75c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a760:	mov	r3, #8
   1a764:	sub	r2, r5, r2
   1a768:	str	r3, [sp]
   1a76c:	add	r1, sp, #44	; 0x2c
   1a770:	add	r2, r2, #1
   1a774:	mvn	r3, #-2147483648	; 0x80000000
   1a778:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1a77c:	mov	r6, r0
   1a780:	ldm	r7, {r0, r1}
   1a784:	str	r6, [r4]
   1a788:	stm	r6, {r0, r1}
   1a78c:	b	1a660 <__assert_fail@plt+0x924c>
   1a790:	bl	113f0 <abort@plt>
   1a794:	andeq	r2, r3, ip, ror #2
   1a798:	strdeq	r2, [r3], -r0
   1a79c:	strdeq	r2, [r3], -r8
   1a7a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a7a4:	sub	sp, sp, #44	; 0x2c
   1a7a8:	mov	sl, r0
   1a7ac:	bl	112dc <__errno_location@plt>
   1a7b0:	ldr	r4, [pc, #352]	; 1a918 <__assert_fail@plt+0x9504>
   1a7b4:	ldr	r2, [r4, #4]
   1a7b8:	ldr	r5, [r4]
   1a7bc:	cmp	r2, #0
   1a7c0:	ldr	r3, [r0]
   1a7c4:	mov	r8, r0
   1a7c8:	str	r3, [sp, #28]
   1a7cc:	bgt	1a828 <__assert_fail@plt+0x9414>
   1a7d0:	add	r6, r4, #8
   1a7d4:	cmp	r5, r6
   1a7d8:	str	r2, [sp, #36]	; 0x24
   1a7dc:	beq	1a8e8 <__assert_fail@plt+0x94d4>
   1a7e0:	mov	r3, #8
   1a7e4:	mov	r0, r5
   1a7e8:	str	r3, [sp]
   1a7ec:	rsb	r2, r2, #1
   1a7f0:	mvn	r3, #-2147483648	; 0x80000000
   1a7f4:	add	r1, sp, #36	; 0x24
   1a7f8:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1a7fc:	mov	r5, r0
   1a800:	str	r0, [r4]
   1a804:	ldr	r0, [r4, #4]
   1a808:	ldr	r2, [sp, #36]	; 0x24
   1a80c:	mov	r1, #0
   1a810:	sub	r2, r2, r0
   1a814:	add	r0, r5, r0, lsl #3
   1a818:	lsl	r2, r2, #3
   1a81c:	bl	112f4 <memset@plt>
   1a820:	ldr	r3, [sp, #36]	; 0x24
   1a824:	str	r3, [r4, #4]
   1a828:	ldr	r4, [pc, #236]	; 1a91c <__assert_fail@plt+0x9508>
   1a82c:	ldr	r9, [r5]
   1a830:	ldr	r6, [r5, #4]
   1a834:	ldr	r7, [r4, #4]
   1a838:	ldr	r1, [r4, #44]	; 0x2c
   1a83c:	ldr	r2, [r4, #40]	; 0x28
   1a840:	ldr	r3, [r4]
   1a844:	orr	r7, r7, #1
   1a848:	add	fp, r4, #8
   1a84c:	str	r1, [sp, #16]
   1a850:	str	r2, [sp, #12]
   1a854:	str	r3, [sp]
   1a858:	str	r7, [sp, #4]
   1a85c:	str	fp, [sp, #8]
   1a860:	mov	r1, r9
   1a864:	mov	r0, r6
   1a868:	mvn	r3, #0
   1a86c:	mov	r2, sl
   1a870:	bl	18b08 <__assert_fail@plt+0x76f4>
   1a874:	cmp	r9, r0
   1a878:	bhi	1a8d4 <__assert_fail@plt+0x94c0>
   1a87c:	add	r3, r4, #48	; 0x30
   1a880:	add	r9, r0, #1
   1a884:	cmp	r6, r3
   1a888:	str	r9, [r5]
   1a88c:	beq	1a898 <__assert_fail@plt+0x9484>
   1a890:	mov	r0, r6
   1a894:	bl	16f1c <__assert_fail@plt+0x5b08>
   1a898:	mov	r0, r9
   1a89c:	bl	1d488 <__assert_fail@plt+0xc074>
   1a8a0:	ldr	ip, [r4, #44]	; 0x2c
   1a8a4:	ldr	r3, [r4]
   1a8a8:	ldr	lr, [r4, #40]	; 0x28
   1a8ac:	mov	r2, sl
   1a8b0:	mov	r1, r9
   1a8b4:	str	r0, [r5, #4]
   1a8b8:	str	r3, [sp]
   1a8bc:	stmib	sp, {r7, fp}
   1a8c0:	str	ip, [sp, #16]
   1a8c4:	str	lr, [sp, #12]
   1a8c8:	mvn	r3, #0
   1a8cc:	mov	r6, r0
   1a8d0:	bl	18b08 <__assert_fail@plt+0x76f4>
   1a8d4:	ldr	r3, [sp, #28]
   1a8d8:	mov	r0, r6
   1a8dc:	str	r3, [r8]
   1a8e0:	add	sp, sp, #44	; 0x2c
   1a8e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8e8:	mov	r3, #8
   1a8ec:	str	r3, [sp]
   1a8f0:	add	r1, sp, #36	; 0x24
   1a8f4:	rsb	r2, r2, #1
   1a8f8:	mvn	r3, #-2147483648	; 0x80000000
   1a8fc:	mov	r0, #0
   1a900:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1a904:	mov	r5, r0
   1a908:	ldm	r6, {r0, r1}
   1a90c:	str	r5, [r4]
   1a910:	stm	r5, {r0, r1}
   1a914:	b	1a804 <__assert_fail@plt+0x93f0>
   1a918:	andeq	r2, r3, ip, ror #2
   1a91c:	strdeq	r2, [r3], -r0
   1a920:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a924:	sub	sp, sp, #44	; 0x2c
   1a928:	mov	r9, r0
   1a92c:	mov	sl, r1
   1a930:	bl	112dc <__errno_location@plt>
   1a934:	ldr	r4, [pc, #364]	; 1aaa8 <__assert_fail@plt+0x9694>
   1a938:	ldr	r2, [r4, #4]
   1a93c:	ldr	r5, [r4]
   1a940:	cmp	r2, #0
   1a944:	ldr	r3, [r0]
   1a948:	mov	r7, r0
   1a94c:	str	r3, [sp, #24]
   1a950:	bgt	1a9ac <__assert_fail@plt+0x9598>
   1a954:	add	r6, r4, #8
   1a958:	cmp	r5, r6
   1a95c:	str	r2, [sp, #36]	; 0x24
   1a960:	beq	1aa78 <__assert_fail@plt+0x9664>
   1a964:	mov	r3, #8
   1a968:	mov	r0, r5
   1a96c:	str	r3, [sp]
   1a970:	rsb	r2, r2, #1
   1a974:	mvn	r3, #-2147483648	; 0x80000000
   1a978:	add	r1, sp, #36	; 0x24
   1a97c:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1a980:	mov	r5, r0
   1a984:	str	r0, [r4]
   1a988:	ldr	r0, [r4, #4]
   1a98c:	ldr	r2, [sp, #36]	; 0x24
   1a990:	mov	r1, #0
   1a994:	sub	r2, r2, r0
   1a998:	add	r0, r5, r0, lsl #3
   1a99c:	lsl	r2, r2, #3
   1a9a0:	bl	112f4 <memset@plt>
   1a9a4:	ldr	r3, [sp, #36]	; 0x24
   1a9a8:	str	r3, [r4, #4]
   1a9ac:	ldr	r4, [pc, #248]	; 1aaac <__assert_fail@plt+0x9698>
   1a9b0:	ldr	r8, [r5]
   1a9b4:	ldr	r6, [r5, #4]
   1a9b8:	ldr	r0, [r4, #4]
   1a9bc:	ldr	r1, [r4, #44]	; 0x2c
   1a9c0:	ldr	r2, [r4, #40]	; 0x28
   1a9c4:	ldr	r3, [r4]
   1a9c8:	orr	r0, r0, #1
   1a9cc:	add	fp, r4, #8
   1a9d0:	str	r0, [sp, #28]
   1a9d4:	str	r0, [sp, #4]
   1a9d8:	str	r1, [sp, #16]
   1a9dc:	str	r2, [sp, #12]
   1a9e0:	str	r3, [sp]
   1a9e4:	str	fp, [sp, #8]
   1a9e8:	mov	r1, r8
   1a9ec:	mov	r0, r6
   1a9f0:	mov	r3, sl
   1a9f4:	mov	r2, r9
   1a9f8:	bl	18b08 <__assert_fail@plt+0x76f4>
   1a9fc:	cmp	r8, r0
   1aa00:	bhi	1aa64 <__assert_fail@plt+0x9650>
   1aa04:	add	r3, r4, #48	; 0x30
   1aa08:	add	r8, r0, #1
   1aa0c:	cmp	r6, r3
   1aa10:	str	r8, [r5]
   1aa14:	beq	1aa20 <__assert_fail@plt+0x960c>
   1aa18:	mov	r0, r6
   1aa1c:	bl	16f1c <__assert_fail@plt+0x5b08>
   1aa20:	mov	r0, r8
   1aa24:	bl	1d488 <__assert_fail@plt+0xc074>
   1aa28:	ldr	lr, [r4, #44]	; 0x2c
   1aa2c:	ldr	ip, [r4]
   1aa30:	mov	r3, sl
   1aa34:	mov	r2, r9
   1aa38:	mov	r1, r8
   1aa3c:	str	r0, [r5, #4]
   1aa40:	ldr	r5, [r4, #40]	; 0x28
   1aa44:	ldr	r4, [sp, #28]
   1aa48:	str	fp, [sp, #8]
   1aa4c:	str	r4, [sp, #4]
   1aa50:	str	lr, [sp, #16]
   1aa54:	str	r5, [sp, #12]
   1aa58:	str	ip, [sp]
   1aa5c:	mov	r6, r0
   1aa60:	bl	18b08 <__assert_fail@plt+0x76f4>
   1aa64:	ldr	r3, [sp, #24]
   1aa68:	mov	r0, r6
   1aa6c:	str	r3, [r7]
   1aa70:	add	sp, sp, #44	; 0x2c
   1aa74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa78:	mov	r3, #8
   1aa7c:	str	r3, [sp]
   1aa80:	add	r1, sp, #36	; 0x24
   1aa84:	rsb	r2, r2, #1
   1aa88:	mvn	r3, #-2147483648	; 0x80000000
   1aa8c:	mov	r0, #0
   1aa90:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1aa94:	mov	r5, r0
   1aa98:	ldm	r6, {r0, r1}
   1aa9c:	str	r5, [r4]
   1aaa0:	stm	r5, {r0, r1}
   1aaa4:	b	1a988 <__assert_fail@plt+0x9574>
   1aaa8:	andeq	r2, r3, ip, ror #2
   1aaac:	strdeq	r2, [r3], -r0
   1aab0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aab4:	sub	sp, sp, #132	; 0x84
   1aab8:	mov	r5, r1
   1aabc:	mov	r4, r0
   1aac0:	mov	r9, r2
   1aac4:	add	r0, sp, #80	; 0x50
   1aac8:	mov	r2, #48	; 0x30
   1aacc:	mov	r1, #0
   1aad0:	bl	112f4 <memset@plt>
   1aad4:	cmp	r5, #10
   1aad8:	beq	1ac90 <__assert_fail@plt+0x987c>
   1aadc:	add	lr, sp, #80	; 0x50
   1aae0:	str	r5, [sp, #80]	; 0x50
   1aae4:	ldm	lr!, {r0, r1, r2, r3}
   1aae8:	add	ip, sp, #32
   1aaec:	ldr	r6, [pc, #416]	; 1ac94 <__assert_fail@plt+0x9880>
   1aaf0:	stmia	ip!, {r0, r1, r2, r3}
   1aaf4:	ldm	lr!, {r0, r1, r2, r3}
   1aaf8:	stmia	ip!, {r0, r1, r2, r3}
   1aafc:	ldm	lr, {r0, r1, r2, r3}
   1ab00:	stm	ip, {r0, r1, r2, r3}
   1ab04:	bl	112dc <__errno_location@plt>
   1ab08:	cmn	r4, #-2147483647	; 0x80000001
   1ab0c:	ldr	r5, [r6]
   1ab10:	mov	r7, r0
   1ab14:	movne	r0, #0
   1ab18:	moveq	r0, #1
   1ab1c:	ldr	r3, [r7]
   1ab20:	orrs	r0, r0, r4, lsr #31
   1ab24:	str	r3, [sp, #24]
   1ab28:	bne	1ac90 <__assert_fail@plt+0x987c>
   1ab2c:	ldr	r2, [r6, #4]
   1ab30:	cmp	r4, r2
   1ab34:	blt	1ab94 <__assert_fail@plt+0x9780>
   1ab38:	add	r8, r6, #8
   1ab3c:	cmp	r5, r8
   1ab40:	str	r2, [sp, #80]	; 0x50
   1ab44:	beq	1ac60 <__assert_fail@plt+0x984c>
   1ab48:	mov	r3, #8
   1ab4c:	sub	r2, r4, r2
   1ab50:	mov	r0, r5
   1ab54:	str	r3, [sp]
   1ab58:	add	r2, r2, #1
   1ab5c:	add	r1, sp, #80	; 0x50
   1ab60:	mvn	r3, #-2147483648	; 0x80000000
   1ab64:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1ab68:	mov	r5, r0
   1ab6c:	str	r0, [r6]
   1ab70:	ldr	r0, [r6, #4]
   1ab74:	ldr	r2, [sp, #80]	; 0x50
   1ab78:	mov	r1, #0
   1ab7c:	sub	r2, r2, r0
   1ab80:	add	r0, r5, r0, lsl #3
   1ab84:	lsl	r2, r2, #3
   1ab88:	bl	112f4 <memset@plt>
   1ab8c:	ldr	r3, [sp, #80]	; 0x50
   1ab90:	str	r3, [r6, #4]
   1ab94:	add	fp, r5, r4, lsl #3
   1ab98:	ldr	r1, [sp, #36]	; 0x24
   1ab9c:	ldr	r8, [r5, r4, lsl #3]
   1aba0:	ldr	r6, [fp, #4]
   1aba4:	ldr	r2, [sp, #72]	; 0x48
   1aba8:	ldr	r3, [sp, #32]
   1abac:	ldr	ip, [sp, #76]	; 0x4c
   1abb0:	orr	r1, r1, #1
   1abb4:	add	sl, sp, #40	; 0x28
   1abb8:	str	r1, [sp, #28]
   1abbc:	str	r1, [sp, #4]
   1abc0:	str	r2, [sp, #12]
   1abc4:	str	r3, [sp]
   1abc8:	mov	r0, r6
   1abcc:	mov	r1, r8
   1abd0:	str	ip, [sp, #16]
   1abd4:	str	sl, [sp, #8]
   1abd8:	mvn	r3, #0
   1abdc:	mov	r2, r9
   1abe0:	bl	18b08 <__assert_fail@plt+0x76f4>
   1abe4:	cmp	r8, r0
   1abe8:	bhi	1ac4c <__assert_fail@plt+0x9838>
   1abec:	ldr	r3, [pc, #164]	; 1ac98 <__assert_fail@plt+0x9884>
   1abf0:	add	r8, r0, #1
   1abf4:	cmp	r6, r3
   1abf8:	str	r8, [r5, r4, lsl #3]
   1abfc:	beq	1ac08 <__assert_fail@plt+0x97f4>
   1ac00:	mov	r0, r6
   1ac04:	bl	16f1c <__assert_fail@plt+0x5b08>
   1ac08:	mov	r0, r8
   1ac0c:	bl	1d488 <__assert_fail@plt+0xc074>
   1ac10:	ldr	lr, [sp, #76]	; 0x4c
   1ac14:	ldr	r3, [sp, #32]
   1ac18:	ldr	ip, [sp, #72]	; 0x48
   1ac1c:	ldr	r4, [sp, #28]
   1ac20:	mov	r2, r9
   1ac24:	mov	r1, r8
   1ac28:	str	r0, [fp, #4]
   1ac2c:	str	r3, [sp]
   1ac30:	str	sl, [sp, #8]
   1ac34:	str	r4, [sp, #4]
   1ac38:	str	lr, [sp, #16]
   1ac3c:	str	ip, [sp, #12]
   1ac40:	mvn	r3, #0
   1ac44:	mov	r6, r0
   1ac48:	bl	18b08 <__assert_fail@plt+0x76f4>
   1ac4c:	ldr	r3, [sp, #24]
   1ac50:	mov	r0, r6
   1ac54:	str	r3, [r7]
   1ac58:	add	sp, sp, #132	; 0x84
   1ac5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac60:	mov	r3, #8
   1ac64:	sub	r2, r4, r2
   1ac68:	add	r1, sp, #80	; 0x50
   1ac6c:	str	r3, [sp]
   1ac70:	add	r2, r2, #1
   1ac74:	mvn	r3, #-2147483648	; 0x80000000
   1ac78:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1ac7c:	mov	r5, r0
   1ac80:	ldm	r8, {r0, r1}
   1ac84:	str	r5, [r6]
   1ac88:	stm	r5, {r0, r1}
   1ac8c:	b	1ab70 <__assert_fail@plt+0x975c>
   1ac90:	bl	113f0 <abort@plt>
   1ac94:	andeq	r2, r3, ip, ror #2
   1ac98:	andeq	r2, r3, r0, lsr #4
   1ac9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aca0:	sub	sp, sp, #132	; 0x84
   1aca4:	mov	r5, r1
   1aca8:	mov	r4, r0
   1acac:	mov	r9, r2
   1acb0:	add	r0, sp, #80	; 0x50
   1acb4:	mov	r2, #48	; 0x30
   1acb8:	mov	r1, #0
   1acbc:	mov	sl, r3
   1acc0:	bl	112f4 <memset@plt>
   1acc4:	cmp	r5, #10
   1acc8:	beq	1ae84 <__assert_fail@plt+0x9a70>
   1accc:	add	lr, sp, #80	; 0x50
   1acd0:	str	r5, [sp, #80]	; 0x50
   1acd4:	ldm	lr!, {r0, r1, r2, r3}
   1acd8:	add	ip, sp, #32
   1acdc:	ldr	r6, [pc, #420]	; 1ae88 <__assert_fail@plt+0x9a74>
   1ace0:	stmia	ip!, {r0, r1, r2, r3}
   1ace4:	ldm	lr!, {r0, r1, r2, r3}
   1ace8:	stmia	ip!, {r0, r1, r2, r3}
   1acec:	ldm	lr, {r0, r1, r2, r3}
   1acf0:	stm	ip, {r0, r1, r2, r3}
   1acf4:	bl	112dc <__errno_location@plt>
   1acf8:	cmn	r4, #-2147483647	; 0x80000001
   1acfc:	ldr	r5, [r6]
   1ad00:	mov	r7, r0
   1ad04:	movne	r0, #0
   1ad08:	moveq	r0, #1
   1ad0c:	ldr	r3, [r7]
   1ad10:	orrs	r0, r0, r4, lsr #31
   1ad14:	str	r3, [sp, #24]
   1ad18:	bne	1ae84 <__assert_fail@plt+0x9a70>
   1ad1c:	ldr	r2, [r6, #4]
   1ad20:	cmp	r4, r2
   1ad24:	blt	1ad84 <__assert_fail@plt+0x9970>
   1ad28:	add	r8, r6, #8
   1ad2c:	cmp	r5, r8
   1ad30:	str	r2, [sp, #80]	; 0x50
   1ad34:	beq	1ae54 <__assert_fail@plt+0x9a40>
   1ad38:	mov	r3, #8
   1ad3c:	sub	r2, r4, r2
   1ad40:	mov	r0, r5
   1ad44:	str	r3, [sp]
   1ad48:	add	r2, r2, #1
   1ad4c:	add	r1, sp, #80	; 0x50
   1ad50:	mvn	r3, #-2147483648	; 0x80000000
   1ad54:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1ad58:	mov	r5, r0
   1ad5c:	str	r0, [r6]
   1ad60:	ldr	r0, [r6, #4]
   1ad64:	ldr	r2, [sp, #80]	; 0x50
   1ad68:	mov	r1, #0
   1ad6c:	sub	r2, r2, r0
   1ad70:	add	r0, r5, r0, lsl #3
   1ad74:	lsl	r2, r2, #3
   1ad78:	bl	112f4 <memset@plt>
   1ad7c:	ldr	r3, [sp, #80]	; 0x50
   1ad80:	str	r3, [r6, #4]
   1ad84:	add	fp, r5, r4, lsl #3
   1ad88:	ldr	r3, [sp, #32]
   1ad8c:	ldr	r1, [sp, #36]	; 0x24
   1ad90:	ldr	r8, [r5, r4, lsl #3]
   1ad94:	ldr	r6, [fp, #4]
   1ad98:	ldr	r2, [sp, #72]	; 0x48
   1ad9c:	ldr	ip, [sp, #76]	; 0x4c
   1ada0:	orr	r1, r1, #1
   1ada4:	str	r3, [sp]
   1ada8:	add	r3, sp, #40	; 0x28
   1adac:	str	r1, [sp, #28]
   1adb0:	str	r1, [sp, #4]
   1adb4:	str	r2, [sp, #12]
   1adb8:	str	r3, [sp, #8]
   1adbc:	mov	r0, r6
   1adc0:	mov	r1, r8
   1adc4:	str	ip, [sp, #16]
   1adc8:	mov	r3, sl
   1adcc:	mov	r2, r9
   1add0:	bl	18b08 <__assert_fail@plt+0x76f4>
   1add4:	cmp	r8, r0
   1add8:	bhi	1ae40 <__assert_fail@plt+0x9a2c>
   1addc:	ldr	r3, [pc, #168]	; 1ae8c <__assert_fail@plt+0x9a78>
   1ade0:	add	r8, r0, #1
   1ade4:	cmp	r6, r3
   1ade8:	str	r8, [r5, r4, lsl #3]
   1adec:	beq	1adf8 <__assert_fail@plt+0x99e4>
   1adf0:	mov	r0, r6
   1adf4:	bl	16f1c <__assert_fail@plt+0x5b08>
   1adf8:	mov	r0, r8
   1adfc:	bl	1d488 <__assert_fail@plt+0xc074>
   1ae00:	add	lr, sp, #40	; 0x28
   1ae04:	ldr	ip, [sp, #76]	; 0x4c
   1ae08:	ldr	r4, [sp, #72]	; 0x48
   1ae0c:	ldr	r5, [sp, #28]
   1ae10:	mov	r3, sl
   1ae14:	mov	r2, r9
   1ae18:	mov	r1, r8
   1ae1c:	str	r0, [fp, #4]
   1ae20:	str	lr, [sp, #8]
   1ae24:	ldr	lr, [sp, #32]
   1ae28:	str	r5, [sp, #4]
   1ae2c:	str	ip, [sp, #16]
   1ae30:	str	r4, [sp, #12]
   1ae34:	str	lr, [sp]
   1ae38:	mov	r6, r0
   1ae3c:	bl	18b08 <__assert_fail@plt+0x76f4>
   1ae40:	ldr	r3, [sp, #24]
   1ae44:	mov	r0, r6
   1ae48:	str	r3, [r7]
   1ae4c:	add	sp, sp, #132	; 0x84
   1ae50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae54:	mov	r3, #8
   1ae58:	sub	r2, r4, r2
   1ae5c:	add	r1, sp, #80	; 0x50
   1ae60:	str	r3, [sp]
   1ae64:	add	r2, r2, #1
   1ae68:	mvn	r3, #-2147483648	; 0x80000000
   1ae6c:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1ae70:	mov	r5, r0
   1ae74:	ldm	r8, {r0, r1}
   1ae78:	str	r5, [r6]
   1ae7c:	stm	r5, {r0, r1}
   1ae80:	b	1ad60 <__assert_fail@plt+0x994c>
   1ae84:	bl	113f0 <abort@plt>
   1ae88:	andeq	r2, r3, ip, ror #2
   1ae8c:	andeq	r2, r3, r0, lsr #4
   1ae90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae94:	sub	sp, sp, #124	; 0x7c
   1ae98:	mov	r4, r0
   1ae9c:	mov	r9, r1
   1aea0:	add	r0, sp, #72	; 0x48
   1aea4:	mov	r2, #48	; 0x30
   1aea8:	mov	r1, #0
   1aeac:	bl	112f4 <memset@plt>
   1aeb0:	cmp	r4, #10
   1aeb4:	beq	1b040 <__assert_fail@plt+0x9c2c>
   1aeb8:	add	lr, sp, #72	; 0x48
   1aebc:	str	r4, [sp, #72]	; 0x48
   1aec0:	ldm	lr!, {r0, r1, r2, r3}
   1aec4:	add	ip, sp, #24
   1aec8:	ldr	r5, [pc, #372]	; 1b044 <__assert_fail@plt+0x9c30>
   1aecc:	stmia	ip!, {r0, r1, r2, r3}
   1aed0:	ldm	lr!, {r0, r1, r2, r3}
   1aed4:	stmia	ip!, {r0, r1, r2, r3}
   1aed8:	ldm	lr, {r0, r1, r2, r3}
   1aedc:	stm	ip, {r0, r1, r2, r3}
   1aee0:	bl	112dc <__errno_location@plt>
   1aee4:	ldr	r2, [r5, #4]
   1aee8:	ldr	r4, [r5]
   1aeec:	cmp	r2, #0
   1aef0:	mov	r7, r0
   1aef4:	ldr	fp, [r0]
   1aef8:	bgt	1af54 <__assert_fail@plt+0x9b40>
   1aefc:	add	r6, r5, #8
   1af00:	cmp	r4, r6
   1af04:	str	r2, [sp, #72]	; 0x48
   1af08:	beq	1b010 <__assert_fail@plt+0x9bfc>
   1af0c:	mov	r3, #8
   1af10:	mov	r0, r4
   1af14:	str	r3, [sp]
   1af18:	rsb	r2, r2, #1
   1af1c:	add	r1, sp, #72	; 0x48
   1af20:	mvn	r3, #-2147483648	; 0x80000000
   1af24:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1af28:	mov	r4, r0
   1af2c:	str	r0, [r5]
   1af30:	ldr	r0, [r5, #4]
   1af34:	ldr	r2, [sp, #72]	; 0x48
   1af38:	mov	r1, #0
   1af3c:	sub	r2, r2, r0
   1af40:	add	r0, r4, r0, lsl #3
   1af44:	lsl	r2, r2, #3
   1af48:	bl	112f4 <memset@plt>
   1af4c:	ldr	r3, [sp, #72]	; 0x48
   1af50:	str	r3, [r5, #4]
   1af54:	ldr	r6, [sp, #28]
   1af58:	ldr	r8, [r4]
   1af5c:	ldr	r5, [r4, #4]
   1af60:	ldr	r2, [sp, #64]	; 0x40
   1af64:	ldr	r3, [sp, #24]
   1af68:	ldr	ip, [sp, #68]	; 0x44
   1af6c:	orr	r6, r6, #1
   1af70:	add	sl, sp, #32
   1af74:	str	r2, [sp, #12]
   1af78:	str	r3, [sp]
   1af7c:	str	r6, [sp, #4]
   1af80:	mov	r1, r8
   1af84:	mov	r0, r5
   1af88:	str	ip, [sp, #16]
   1af8c:	str	sl, [sp, #8]
   1af90:	mvn	r3, #0
   1af94:	mov	r2, r9
   1af98:	bl	18b08 <__assert_fail@plt+0x76f4>
   1af9c:	cmp	r8, r0
   1afa0:	bhi	1b000 <__assert_fail@plt+0x9bec>
   1afa4:	ldr	r3, [pc, #156]	; 1b048 <__assert_fail@plt+0x9c34>
   1afa8:	add	r8, r0, #1
   1afac:	cmp	r5, r3
   1afb0:	str	r8, [r4]
   1afb4:	beq	1afc0 <__assert_fail@plt+0x9bac>
   1afb8:	mov	r0, r5
   1afbc:	bl	16f1c <__assert_fail@plt+0x5b08>
   1afc0:	mov	r0, r8
   1afc4:	bl	1d488 <__assert_fail@plt+0xc074>
   1afc8:	ldr	lr, [sp, #68]	; 0x44
   1afcc:	ldr	r3, [sp, #24]
   1afd0:	ldr	ip, [sp, #64]	; 0x40
   1afd4:	mov	r2, r9
   1afd8:	mov	r1, r8
   1afdc:	str	r0, [r4, #4]
   1afe0:	str	r3, [sp]
   1afe4:	str	sl, [sp, #8]
   1afe8:	str	r6, [sp, #4]
   1afec:	str	lr, [sp, #16]
   1aff0:	str	ip, [sp, #12]
   1aff4:	mvn	r3, #0
   1aff8:	mov	r5, r0
   1affc:	bl	18b08 <__assert_fail@plt+0x76f4>
   1b000:	mov	r0, r5
   1b004:	str	fp, [r7]
   1b008:	add	sp, sp, #124	; 0x7c
   1b00c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b010:	mov	r3, #8
   1b014:	add	r1, sp, #72	; 0x48
   1b018:	str	r3, [sp]
   1b01c:	rsb	r2, r2, #1
   1b020:	mvn	r3, #-2147483648	; 0x80000000
   1b024:	mov	r0, #0
   1b028:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1b02c:	mov	r4, r0
   1b030:	ldm	r6, {r0, r1}
   1b034:	str	r4, [r5]
   1b038:	stm	r4, {r0, r1}
   1b03c:	b	1af30 <__assert_fail@plt+0x9b1c>
   1b040:	bl	113f0 <abort@plt>
   1b044:	andeq	r2, r3, ip, ror #2
   1b048:	andeq	r2, r3, r0, lsr #4
   1b04c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b050:	sub	sp, sp, #132	; 0x84
   1b054:	mov	r4, r0
   1b058:	mov	r9, r1
   1b05c:	mov	sl, r2
   1b060:	add	r0, sp, #80	; 0x50
   1b064:	mov	r2, #48	; 0x30
   1b068:	mov	r1, #0
   1b06c:	bl	112f4 <memset@plt>
   1b070:	cmp	r4, #10
   1b074:	beq	1b208 <__assert_fail@plt+0x9df4>
   1b078:	add	lr, sp, #80	; 0x50
   1b07c:	str	r4, [sp, #80]	; 0x50
   1b080:	ldm	lr!, {r0, r1, r2, r3}
   1b084:	add	ip, sp, #32
   1b088:	ldr	r5, [pc, #380]	; 1b20c <__assert_fail@plt+0x9df8>
   1b08c:	stmia	ip!, {r0, r1, r2, r3}
   1b090:	ldm	lr!, {r0, r1, r2, r3}
   1b094:	stmia	ip!, {r0, r1, r2, r3}
   1b098:	ldm	lr, {r0, r1, r2, r3}
   1b09c:	stm	ip, {r0, r1, r2, r3}
   1b0a0:	bl	112dc <__errno_location@plt>
   1b0a4:	ldr	r2, [r5, #4]
   1b0a8:	ldr	r4, [r5]
   1b0ac:	cmp	r2, #0
   1b0b0:	ldr	r3, [r0]
   1b0b4:	mov	r7, r0
   1b0b8:	str	r3, [sp, #28]
   1b0bc:	bgt	1b118 <__assert_fail@plt+0x9d04>
   1b0c0:	add	r6, r5, #8
   1b0c4:	cmp	r4, r6
   1b0c8:	str	r2, [sp, #80]	; 0x50
   1b0cc:	beq	1b1d8 <__assert_fail@plt+0x9dc4>
   1b0d0:	mov	r3, #8
   1b0d4:	mov	r0, r4
   1b0d8:	str	r3, [sp]
   1b0dc:	rsb	r2, r2, #1
   1b0e0:	add	r1, sp, #80	; 0x50
   1b0e4:	mvn	r3, #-2147483648	; 0x80000000
   1b0e8:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1b0ec:	mov	r4, r0
   1b0f0:	str	r0, [r5]
   1b0f4:	ldr	r0, [r5, #4]
   1b0f8:	ldr	r2, [sp, #80]	; 0x50
   1b0fc:	mov	r1, #0
   1b100:	sub	r2, r2, r0
   1b104:	add	r0, r4, r0, lsl #3
   1b108:	lsl	r2, r2, #3
   1b10c:	bl	112f4 <memset@plt>
   1b110:	ldr	r3, [sp, #80]	; 0x50
   1b114:	str	r3, [r5, #4]
   1b118:	ldr	r6, [sp, #36]	; 0x24
   1b11c:	ldr	r8, [r4]
   1b120:	ldr	r5, [r4, #4]
   1b124:	ldr	r2, [sp, #72]	; 0x48
   1b128:	ldr	r3, [sp, #32]
   1b12c:	ldr	ip, [sp, #76]	; 0x4c
   1b130:	orr	r6, r6, #1
   1b134:	add	fp, sp, #40	; 0x28
   1b138:	str	r2, [sp, #12]
   1b13c:	str	r3, [sp]
   1b140:	str	r6, [sp, #4]
   1b144:	mov	r1, r8
   1b148:	mov	r0, r5
   1b14c:	str	ip, [sp, #16]
   1b150:	str	fp, [sp, #8]
   1b154:	mov	r3, sl
   1b158:	mov	r2, r9
   1b15c:	bl	18b08 <__assert_fail@plt+0x76f4>
   1b160:	cmp	r8, r0
   1b164:	bhi	1b1c4 <__assert_fail@plt+0x9db0>
   1b168:	ldr	r3, [pc, #160]	; 1b210 <__assert_fail@plt+0x9dfc>
   1b16c:	add	r8, r0, #1
   1b170:	cmp	r5, r3
   1b174:	str	r8, [r4]
   1b178:	beq	1b184 <__assert_fail@plt+0x9d70>
   1b17c:	mov	r0, r5
   1b180:	bl	16f1c <__assert_fail@plt+0x5b08>
   1b184:	mov	r0, r8
   1b188:	bl	1d488 <__assert_fail@plt+0xc074>
   1b18c:	ldr	ip, [sp, #76]	; 0x4c
   1b190:	ldr	lr, [sp, #32]
   1b194:	mov	r3, sl
   1b198:	mov	r2, r9
   1b19c:	mov	r1, r8
   1b1a0:	str	r0, [r4, #4]
   1b1a4:	ldr	r4, [sp, #72]	; 0x48
   1b1a8:	str	fp, [sp, #8]
   1b1ac:	str	r6, [sp, #4]
   1b1b0:	str	ip, [sp, #16]
   1b1b4:	str	r4, [sp, #12]
   1b1b8:	str	lr, [sp]
   1b1bc:	mov	r5, r0
   1b1c0:	bl	18b08 <__assert_fail@plt+0x76f4>
   1b1c4:	ldr	r3, [sp, #28]
   1b1c8:	mov	r0, r5
   1b1cc:	str	r3, [r7]
   1b1d0:	add	sp, sp, #132	; 0x84
   1b1d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b1d8:	mov	r3, #8
   1b1dc:	add	r1, sp, #80	; 0x50
   1b1e0:	str	r3, [sp]
   1b1e4:	rsb	r2, r2, #1
   1b1e8:	mvn	r3, #-2147483648	; 0x80000000
   1b1ec:	mov	r0, #0
   1b1f0:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1b1f4:	mov	r4, r0
   1b1f8:	ldm	r6, {r0, r1}
   1b1fc:	str	r4, [r5]
   1b200:	stm	r4, {r0, r1}
   1b204:	b	1b0f4 <__assert_fail@plt+0x9ce0>
   1b208:	bl	113f0 <abort@plt>
   1b20c:	andeq	r2, r3, ip, ror #2
   1b210:	andeq	r2, r3, r0, lsr #4
   1b214:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b218:	mov	r4, r2
   1b21c:	ldr	lr, [pc, #432]	; 1b3d4 <__assert_fail@plt+0x9fc0>
   1b220:	mov	sl, r0
   1b224:	mov	fp, r1
   1b228:	ldm	lr!, {r0, r1, r2, r3}
   1b22c:	sub	sp, sp, #92	; 0x5c
   1b230:	add	ip, sp, #40	; 0x28
   1b234:	lsr	r7, r4, #5
   1b238:	stmia	ip!, {r0, r1, r2, r3}
   1b23c:	add	r6, sp, #48	; 0x30
   1b240:	ldm	lr!, {r0, r1, r2, r3}
   1b244:	and	r4, r4, #31
   1b248:	ldr	r5, [pc, #392]	; 1b3d8 <__assert_fail@plt+0x9fc4>
   1b24c:	stmia	ip!, {r0, r1, r2, r3}
   1b250:	ldm	lr, {r0, r1, r2, r3}
   1b254:	stm	ip, {r0, r1, r2, r3}
   1b258:	ldr	r2, [r6, r7, lsl #2]
   1b25c:	lsr	r3, r2, r4
   1b260:	eor	r3, r3, #1
   1b264:	and	r3, r3, #1
   1b268:	eor	r4, r2, r3, lsl r4
   1b26c:	str	r4, [r6, r7, lsl #2]
   1b270:	bl	112dc <__errno_location@plt>
   1b274:	ldr	r2, [r5, #4]
   1b278:	ldr	r4, [r5]
   1b27c:	cmp	r2, #0
   1b280:	ldr	r3, [r0]
   1b284:	mov	r8, r0
   1b288:	str	r3, [sp, #28]
   1b28c:	bgt	1b2e8 <__assert_fail@plt+0x9ed4>
   1b290:	add	r7, r5, #8
   1b294:	cmp	r4, r7
   1b298:	str	r2, [sp, #36]	; 0x24
   1b29c:	beq	1b3a4 <__assert_fail@plt+0x9f90>
   1b2a0:	mov	r3, #8
   1b2a4:	mov	r0, r4
   1b2a8:	str	r3, [sp]
   1b2ac:	rsb	r2, r2, #1
   1b2b0:	mvn	r3, #-2147483648	; 0x80000000
   1b2b4:	add	r1, sp, #36	; 0x24
   1b2b8:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1b2bc:	mov	r4, r0
   1b2c0:	str	r0, [r5]
   1b2c4:	ldr	r0, [r5, #4]
   1b2c8:	ldr	r2, [sp, #36]	; 0x24
   1b2cc:	mov	r1, #0
   1b2d0:	sub	r2, r2, r0
   1b2d4:	add	r0, r4, r0, lsl #3
   1b2d8:	lsl	r2, r2, #3
   1b2dc:	bl	112f4 <memset@plt>
   1b2e0:	ldr	r3, [sp, #36]	; 0x24
   1b2e4:	str	r3, [r5, #4]
   1b2e8:	ldr	r7, [sp, #44]	; 0x2c
   1b2ec:	ldr	r9, [r4]
   1b2f0:	ldr	r5, [r4, #4]
   1b2f4:	ldr	r2, [sp, #80]	; 0x50
   1b2f8:	ldr	r3, [sp, #40]	; 0x28
   1b2fc:	ldr	ip, [sp, #84]	; 0x54
   1b300:	orr	r7, r7, #1
   1b304:	str	r2, [sp, #12]
   1b308:	str	r3, [sp]
   1b30c:	str	r7, [sp, #4]
   1b310:	str	r6, [sp, #8]
   1b314:	mov	r1, r9
   1b318:	mov	r0, r5
   1b31c:	str	ip, [sp, #16]
   1b320:	mov	r3, fp
   1b324:	mov	r2, sl
   1b328:	bl	18b08 <__assert_fail@plt+0x76f4>
   1b32c:	cmp	r9, r0
   1b330:	bhi	1b390 <__assert_fail@plt+0x9f7c>
   1b334:	ldr	r3, [pc, #160]	; 1b3dc <__assert_fail@plt+0x9fc8>
   1b338:	add	r9, r0, #1
   1b33c:	cmp	r5, r3
   1b340:	str	r9, [r4]
   1b344:	beq	1b350 <__assert_fail@plt+0x9f3c>
   1b348:	mov	r0, r5
   1b34c:	bl	16f1c <__assert_fail@plt+0x5b08>
   1b350:	mov	r0, r9
   1b354:	bl	1d488 <__assert_fail@plt+0xc074>
   1b358:	ldr	ip, [sp, #84]	; 0x54
   1b35c:	ldr	lr, [sp, #40]	; 0x28
   1b360:	mov	r3, fp
   1b364:	mov	r2, sl
   1b368:	mov	r1, r9
   1b36c:	str	r0, [r4, #4]
   1b370:	ldr	r4, [sp, #80]	; 0x50
   1b374:	str	r6, [sp, #8]
   1b378:	str	r7, [sp, #4]
   1b37c:	str	ip, [sp, #16]
   1b380:	str	r4, [sp, #12]
   1b384:	str	lr, [sp]
   1b388:	mov	r5, r0
   1b38c:	bl	18b08 <__assert_fail@plt+0x76f4>
   1b390:	ldr	r3, [sp, #28]
   1b394:	mov	r0, r5
   1b398:	str	r3, [r8]
   1b39c:	add	sp, sp, #92	; 0x5c
   1b3a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b3a4:	mov	r3, #8
   1b3a8:	str	r3, [sp]
   1b3ac:	add	r1, sp, #36	; 0x24
   1b3b0:	rsb	r2, r2, #1
   1b3b4:	mvn	r3, #-2147483648	; 0x80000000
   1b3b8:	mov	r0, #0
   1b3bc:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1b3c0:	mov	r4, r0
   1b3c4:	ldm	r7, {r0, r1}
   1b3c8:	str	r4, [r5]
   1b3cc:	stm	r4, {r0, r1}
   1b3d0:	b	1b2c4 <__assert_fail@plt+0x9eb0>
   1b3d4:	strdeq	r2, [r3], -r0
   1b3d8:	andeq	r2, r3, ip, ror #2
   1b3dc:	andeq	r2, r3, r0, lsr #4
   1b3e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3e4:	mov	r4, r1
   1b3e8:	ldr	lr, [pc, #420]	; 1b594 <__assert_fail@plt+0xa180>
   1b3ec:	mov	r6, r0
   1b3f0:	sub	sp, sp, #84	; 0x54
   1b3f4:	ldm	lr!, {r0, r1, r2, r3}
   1b3f8:	add	ip, sp, #32
   1b3fc:	lsr	r8, r4, #5
   1b400:	add	r5, sp, #40	; 0x28
   1b404:	stmia	ip!, {r0, r1, r2, r3}
   1b408:	and	r4, r4, #31
   1b40c:	ldm	lr!, {r0, r1, r2, r3}
   1b410:	ldr	r7, [pc, #384]	; 1b598 <__assert_fail@plt+0xa184>
   1b414:	stmia	ip!, {r0, r1, r2, r3}
   1b418:	ldm	lr, {r0, r1, r2, r3}
   1b41c:	stm	ip, {r0, r1, r2, r3}
   1b420:	ldr	r2, [r5, r8, lsl #2]
   1b424:	lsr	r3, r2, r4
   1b428:	eor	r3, r3, #1
   1b42c:	and	r3, r3, #1
   1b430:	eor	r4, r2, r3, lsl r4
   1b434:	str	r4, [r5, r8, lsl #2]
   1b438:	bl	112dc <__errno_location@plt>
   1b43c:	ldr	r2, [r7, #4]
   1b440:	ldr	r4, [r7]
   1b444:	cmp	r2, #0
   1b448:	mov	r9, r0
   1b44c:	ldr	sl, [r0]
   1b450:	bgt	1b4ac <__assert_fail@plt+0xa098>
   1b454:	add	r8, r7, #8
   1b458:	cmp	r4, r8
   1b45c:	str	r2, [sp, #28]
   1b460:	beq	1b564 <__assert_fail@plt+0xa150>
   1b464:	mov	r3, #8
   1b468:	mov	r0, r4
   1b46c:	str	r3, [sp]
   1b470:	rsb	r2, r2, #1
   1b474:	mvn	r3, #-2147483648	; 0x80000000
   1b478:	add	r1, sp, #28
   1b47c:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1b480:	mov	r4, r0
   1b484:	str	r0, [r7]
   1b488:	ldr	r0, [r7, #4]
   1b48c:	ldr	r2, [sp, #28]
   1b490:	mov	r1, #0
   1b494:	sub	r2, r2, r0
   1b498:	add	r0, r4, r0, lsl #3
   1b49c:	lsl	r2, r2, #3
   1b4a0:	bl	112f4 <memset@plt>
   1b4a4:	ldr	r3, [sp, #28]
   1b4a8:	str	r3, [r7, #4]
   1b4ac:	ldr	r8, [sp, #36]	; 0x24
   1b4b0:	ldr	fp, [r4]
   1b4b4:	ldr	r7, [r4, #4]
   1b4b8:	ldr	r2, [sp, #72]	; 0x48
   1b4bc:	ldr	r3, [sp, #32]
   1b4c0:	ldr	ip, [sp, #76]	; 0x4c
   1b4c4:	orr	r8, r8, #1
   1b4c8:	str	r2, [sp, #12]
   1b4cc:	str	r3, [sp]
   1b4d0:	str	r8, [sp, #4]
   1b4d4:	str	r5, [sp, #8]
   1b4d8:	mov	r1, fp
   1b4dc:	mov	r0, r7
   1b4e0:	str	ip, [sp, #16]
   1b4e4:	mvn	r3, #0
   1b4e8:	mov	r2, r6
   1b4ec:	bl	18b08 <__assert_fail@plt+0x76f4>
   1b4f0:	cmp	fp, r0
   1b4f4:	bhi	1b554 <__assert_fail@plt+0xa140>
   1b4f8:	ldr	r3, [pc, #156]	; 1b59c <__assert_fail@plt+0xa188>
   1b4fc:	add	fp, r0, #1
   1b500:	cmp	r7, r3
   1b504:	str	fp, [r4]
   1b508:	beq	1b514 <__assert_fail@plt+0xa100>
   1b50c:	mov	r0, r7
   1b510:	bl	16f1c <__assert_fail@plt+0x5b08>
   1b514:	mov	r0, fp
   1b518:	bl	1d488 <__assert_fail@plt+0xc074>
   1b51c:	ldr	lr, [sp, #76]	; 0x4c
   1b520:	ldr	r3, [sp, #32]
   1b524:	ldr	ip, [sp, #72]	; 0x48
   1b528:	mov	r2, r6
   1b52c:	mov	r1, fp
   1b530:	str	r0, [r4, #4]
   1b534:	str	r3, [sp]
   1b538:	str	r5, [sp, #8]
   1b53c:	str	r8, [sp, #4]
   1b540:	str	lr, [sp, #16]
   1b544:	str	ip, [sp, #12]
   1b548:	mvn	r3, #0
   1b54c:	mov	r7, r0
   1b550:	bl	18b08 <__assert_fail@plt+0x76f4>
   1b554:	mov	r0, r7
   1b558:	str	sl, [r9]
   1b55c:	add	sp, sp, #84	; 0x54
   1b560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b564:	mov	r3, #8
   1b568:	str	r3, [sp]
   1b56c:	add	r1, sp, #28
   1b570:	rsb	r2, r2, #1
   1b574:	mvn	r3, #-2147483648	; 0x80000000
   1b578:	mov	r0, #0
   1b57c:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1b580:	mov	r4, r0
   1b584:	ldm	r8, {r0, r1}
   1b588:	str	r4, [r7]
   1b58c:	stm	r4, {r0, r1}
   1b590:	b	1b488 <__assert_fail@plt+0xa074>
   1b594:	strdeq	r2, [r3], -r0
   1b598:	andeq	r2, r3, ip, ror #2
   1b59c:	andeq	r2, r3, r0, lsr #4
   1b5a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b5a4:	mov	r6, r0
   1b5a8:	ldr	lr, [pc, #404]	; 1b744 <__assert_fail@plt+0xa330>
   1b5ac:	sub	sp, sp, #84	; 0x54
   1b5b0:	add	ip, sp, #32
   1b5b4:	ldm	lr!, {r0, r1, r2, r3}
   1b5b8:	ldr	r5, [pc, #392]	; 1b748 <__assert_fail@plt+0xa334>
   1b5bc:	stmia	ip!, {r0, r1, r2, r3}
   1b5c0:	ldm	lr!, {r0, r1, r2, r3}
   1b5c4:	ldr	r4, [sp, #44]	; 0x2c
   1b5c8:	stmia	ip!, {r0, r1, r2, r3}
   1b5cc:	ldm	lr, {r0, r1, r2, r3}
   1b5d0:	mvn	lr, r4
   1b5d4:	and	lr, lr, #67108864	; 0x4000000
   1b5d8:	eor	lr, lr, r4
   1b5dc:	stm	ip, {r0, r1, r2, r3}
   1b5e0:	str	lr, [sp, #44]	; 0x2c
   1b5e4:	bl	112dc <__errno_location@plt>
   1b5e8:	ldr	r2, [r5, #4]
   1b5ec:	ldr	r4, [r5]
   1b5f0:	cmp	r2, #0
   1b5f4:	mov	r8, r0
   1b5f8:	ldr	sl, [r0]
   1b5fc:	bgt	1b658 <__assert_fail@plt+0xa244>
   1b600:	add	r7, r5, #8
   1b604:	cmp	r4, r7
   1b608:	str	r2, [sp, #28]
   1b60c:	beq	1b714 <__assert_fail@plt+0xa300>
   1b610:	mov	r3, #8
   1b614:	mov	r0, r4
   1b618:	str	r3, [sp]
   1b61c:	rsb	r2, r2, #1
   1b620:	mvn	r3, #-2147483648	; 0x80000000
   1b624:	add	r1, sp, #28
   1b628:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1b62c:	mov	r4, r0
   1b630:	str	r0, [r5]
   1b634:	ldr	r0, [r5, #4]
   1b638:	ldr	r2, [sp, #28]
   1b63c:	mov	r1, #0
   1b640:	sub	r2, r2, r0
   1b644:	add	r0, r4, r0, lsl #3
   1b648:	lsl	r2, r2, #3
   1b64c:	bl	112f4 <memset@plt>
   1b650:	ldr	r3, [sp, #28]
   1b654:	str	r3, [r5, #4]
   1b658:	ldr	r7, [sp, #36]	; 0x24
   1b65c:	ldr	r9, [r4]
   1b660:	ldr	r5, [r4, #4]
   1b664:	ldr	r2, [sp, #72]	; 0x48
   1b668:	ldr	r3, [sp, #32]
   1b66c:	ldr	ip, [sp, #76]	; 0x4c
   1b670:	orr	r7, r7, #1
   1b674:	add	fp, sp, #40	; 0x28
   1b678:	str	r2, [sp, #12]
   1b67c:	str	r3, [sp]
   1b680:	str	r7, [sp, #4]
   1b684:	mov	r1, r9
   1b688:	mov	r0, r5
   1b68c:	str	ip, [sp, #16]
   1b690:	str	fp, [sp, #8]
   1b694:	mvn	r3, #0
   1b698:	mov	r2, r6
   1b69c:	bl	18b08 <__assert_fail@plt+0x76f4>
   1b6a0:	cmp	r9, r0
   1b6a4:	bhi	1b704 <__assert_fail@plt+0xa2f0>
   1b6a8:	ldr	r3, [pc, #156]	; 1b74c <__assert_fail@plt+0xa338>
   1b6ac:	add	r9, r0, #1
   1b6b0:	cmp	r5, r3
   1b6b4:	str	r9, [r4]
   1b6b8:	beq	1b6c4 <__assert_fail@plt+0xa2b0>
   1b6bc:	mov	r0, r5
   1b6c0:	bl	16f1c <__assert_fail@plt+0x5b08>
   1b6c4:	mov	r0, r9
   1b6c8:	bl	1d488 <__assert_fail@plt+0xc074>
   1b6cc:	ldr	lr, [sp, #76]	; 0x4c
   1b6d0:	ldr	r3, [sp, #32]
   1b6d4:	ldr	ip, [sp, #72]	; 0x48
   1b6d8:	mov	r2, r6
   1b6dc:	mov	r1, r9
   1b6e0:	str	r0, [r4, #4]
   1b6e4:	str	r3, [sp]
   1b6e8:	str	fp, [sp, #8]
   1b6ec:	str	r7, [sp, #4]
   1b6f0:	str	lr, [sp, #16]
   1b6f4:	str	ip, [sp, #12]
   1b6f8:	mvn	r3, #0
   1b6fc:	mov	r5, r0
   1b700:	bl	18b08 <__assert_fail@plt+0x76f4>
   1b704:	mov	r0, r5
   1b708:	str	sl, [r8]
   1b70c:	add	sp, sp, #84	; 0x54
   1b710:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b714:	mov	r3, #8
   1b718:	str	r3, [sp]
   1b71c:	add	r1, sp, #28
   1b720:	rsb	r2, r2, #1
   1b724:	mvn	r3, #-2147483648	; 0x80000000
   1b728:	mov	r0, #0
   1b72c:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1b730:	mov	r4, r0
   1b734:	ldm	r7, {r0, r1}
   1b738:	str	r4, [r5]
   1b73c:	stm	r4, {r0, r1}
   1b740:	b	1b634 <__assert_fail@plt+0xa220>
   1b744:	strdeq	r2, [r3], -r0
   1b748:	andeq	r2, r3, ip, ror #2
   1b74c:	andeq	r2, r3, r0, lsr #4
   1b750:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b754:	mov	r9, r0
   1b758:	ldr	lr, [pc, #416]	; 1b900 <__assert_fail@plt+0xa4ec>
   1b75c:	mov	sl, r1
   1b760:	sub	sp, sp, #92	; 0x5c
   1b764:	ldm	lr!, {r0, r1, r2, r3}
   1b768:	add	ip, sp, #40	; 0x28
   1b76c:	ldr	r5, [pc, #400]	; 1b904 <__assert_fail@plt+0xa4f0>
   1b770:	stmia	ip!, {r0, r1, r2, r3}
   1b774:	ldm	lr!, {r0, r1, r2, r3}
   1b778:	ldr	r4, [sp, #52]	; 0x34
   1b77c:	stmia	ip!, {r0, r1, r2, r3}
   1b780:	ldm	lr, {r0, r1, r2, r3}
   1b784:	mvn	lr, r4
   1b788:	and	lr, lr, #67108864	; 0x4000000
   1b78c:	eor	lr, lr, r4
   1b790:	stm	ip, {r0, r1, r2, r3}
   1b794:	str	lr, [sp, #52]	; 0x34
   1b798:	bl	112dc <__errno_location@plt>
   1b79c:	ldr	r2, [r5, #4]
   1b7a0:	ldr	r4, [r5]
   1b7a4:	cmp	r2, #0
   1b7a8:	ldr	r3, [r0]
   1b7ac:	mov	r7, r0
   1b7b0:	str	r3, [sp, #28]
   1b7b4:	bgt	1b810 <__assert_fail@plt+0xa3fc>
   1b7b8:	add	r6, r5, #8
   1b7bc:	cmp	r4, r6
   1b7c0:	str	r2, [sp, #36]	; 0x24
   1b7c4:	beq	1b8d0 <__assert_fail@plt+0xa4bc>
   1b7c8:	mov	r3, #8
   1b7cc:	mov	r0, r4
   1b7d0:	str	r3, [sp]
   1b7d4:	rsb	r2, r2, #1
   1b7d8:	mvn	r3, #-2147483648	; 0x80000000
   1b7dc:	add	r1, sp, #36	; 0x24
   1b7e0:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1b7e4:	mov	r4, r0
   1b7e8:	str	r0, [r5]
   1b7ec:	ldr	r0, [r5, #4]
   1b7f0:	ldr	r2, [sp, #36]	; 0x24
   1b7f4:	mov	r1, #0
   1b7f8:	sub	r2, r2, r0
   1b7fc:	add	r0, r4, r0, lsl #3
   1b800:	lsl	r2, r2, #3
   1b804:	bl	112f4 <memset@plt>
   1b808:	ldr	r3, [sp, #36]	; 0x24
   1b80c:	str	r3, [r5, #4]
   1b810:	ldr	r6, [sp, #44]	; 0x2c
   1b814:	ldr	r8, [r4]
   1b818:	ldr	r5, [r4, #4]
   1b81c:	ldr	r2, [sp, #80]	; 0x50
   1b820:	ldr	r3, [sp, #40]	; 0x28
   1b824:	ldr	ip, [sp, #84]	; 0x54
   1b828:	orr	r6, r6, #1
   1b82c:	add	fp, sp, #48	; 0x30
   1b830:	str	r2, [sp, #12]
   1b834:	str	r3, [sp]
   1b838:	str	r6, [sp, #4]
   1b83c:	mov	r1, r8
   1b840:	mov	r0, r5
   1b844:	str	ip, [sp, #16]
   1b848:	str	fp, [sp, #8]
   1b84c:	mov	r3, sl
   1b850:	mov	r2, r9
   1b854:	bl	18b08 <__assert_fail@plt+0x76f4>
   1b858:	cmp	r8, r0
   1b85c:	bhi	1b8bc <__assert_fail@plt+0xa4a8>
   1b860:	ldr	r3, [pc, #160]	; 1b908 <__assert_fail@plt+0xa4f4>
   1b864:	add	r8, r0, #1
   1b868:	cmp	r5, r3
   1b86c:	str	r8, [r4]
   1b870:	beq	1b87c <__assert_fail@plt+0xa468>
   1b874:	mov	r0, r5
   1b878:	bl	16f1c <__assert_fail@plt+0x5b08>
   1b87c:	mov	r0, r8
   1b880:	bl	1d488 <__assert_fail@plt+0xc074>
   1b884:	ldr	ip, [sp, #84]	; 0x54
   1b888:	ldr	lr, [sp, #40]	; 0x28
   1b88c:	mov	r3, sl
   1b890:	mov	r2, r9
   1b894:	mov	r1, r8
   1b898:	str	r0, [r4, #4]
   1b89c:	ldr	r4, [sp, #80]	; 0x50
   1b8a0:	str	fp, [sp, #8]
   1b8a4:	str	r6, [sp, #4]
   1b8a8:	str	ip, [sp, #16]
   1b8ac:	str	r4, [sp, #12]
   1b8b0:	str	lr, [sp]
   1b8b4:	mov	r5, r0
   1b8b8:	bl	18b08 <__assert_fail@plt+0x76f4>
   1b8bc:	ldr	r3, [sp, #28]
   1b8c0:	mov	r0, r5
   1b8c4:	str	r3, [r7]
   1b8c8:	add	sp, sp, #92	; 0x5c
   1b8cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8d0:	mov	r3, #8
   1b8d4:	str	r3, [sp]
   1b8d8:	add	r1, sp, #36	; 0x24
   1b8dc:	rsb	r2, r2, #1
   1b8e0:	mvn	r3, #-2147483648	; 0x80000000
   1b8e4:	mov	r0, #0
   1b8e8:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1b8ec:	mov	r4, r0
   1b8f0:	ldm	r6, {r0, r1}
   1b8f4:	str	r4, [r5]
   1b8f8:	stm	r4, {r0, r1}
   1b8fc:	b	1b7ec <__assert_fail@plt+0xa3d8>
   1b900:	strdeq	r2, [r3], -r0
   1b904:	andeq	r2, r3, ip, ror #2
   1b908:	andeq	r2, r3, r0, lsr #4
   1b90c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b910:	sub	sp, sp, #180	; 0xb4
   1b914:	mov	r6, r1
   1b918:	mov	r4, r0
   1b91c:	mov	r9, r2
   1b920:	add	r0, sp, #80	; 0x50
   1b924:	mov	r2, #48	; 0x30
   1b928:	mov	r1, #0
   1b92c:	bl	112f4 <memset@plt>
   1b930:	cmp	r6, #10
   1b934:	beq	1bb14 <__assert_fail@plt+0xa700>
   1b938:	add	r5, sp, #80	; 0x50
   1b93c:	str	r6, [sp, #80]	; 0x50
   1b940:	ldm	r5!, {r0, r1, r2, r3}
   1b944:	add	ip, sp, #128	; 0x80
   1b948:	mov	r7, ip
   1b94c:	add	lr, sp, #32
   1b950:	stmia	ip!, {r0, r1, r2, r3}
   1b954:	mov	r8, #67108864	; 0x4000000
   1b958:	ldm	r5!, {r0, r1, r2, r3}
   1b95c:	ldr	r6, [pc, #436]	; 1bb18 <__assert_fail@plt+0xa704>
   1b960:	stmia	ip!, {r0, r1, r2, r3}
   1b964:	ldm	r5, {r0, r1, r2, r3}
   1b968:	stm	ip, {r0, r1, r2, r3}
   1b96c:	ldm	r7!, {r0, r1, r2, r3}
   1b970:	stmia	lr!, {r0, r1, r2, r3}
   1b974:	ldm	r7!, {r0, r1, r2, r3}
   1b978:	str	r8, [sp, #44]	; 0x2c
   1b97c:	stmia	lr!, {r0, r1, r2, r3}
   1b980:	ldm	ip, {r0, r1, r2, r3}
   1b984:	stm	lr, {r0, r1, r2, r3}
   1b988:	bl	112dc <__errno_location@plt>
   1b98c:	cmn	r4, #-2147483647	; 0x80000001
   1b990:	ldr	r5, [r6]
   1b994:	mov	r7, r0
   1b998:	movne	r0, #0
   1b99c:	moveq	r0, #1
   1b9a0:	ldr	r3, [r7]
   1b9a4:	orrs	r0, r0, r4, lsr #31
   1b9a8:	str	r3, [sp, #24]
   1b9ac:	bne	1bb14 <__assert_fail@plt+0xa700>
   1b9b0:	ldr	r2, [r6, #4]
   1b9b4:	cmp	r4, r2
   1b9b8:	blt	1ba18 <__assert_fail@plt+0xa604>
   1b9bc:	add	r8, r6, #8
   1b9c0:	cmp	r5, r8
   1b9c4:	str	r2, [sp, #80]	; 0x50
   1b9c8:	beq	1bae4 <__assert_fail@plt+0xa6d0>
   1b9cc:	mov	r3, #8
   1b9d0:	sub	r2, r4, r2
   1b9d4:	mov	r0, r5
   1b9d8:	str	r3, [sp]
   1b9dc:	add	r2, r2, #1
   1b9e0:	add	r1, sp, #80	; 0x50
   1b9e4:	mvn	r3, #-2147483648	; 0x80000000
   1b9e8:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1b9ec:	mov	r5, r0
   1b9f0:	str	r0, [r6]
   1b9f4:	ldr	r0, [r6, #4]
   1b9f8:	ldr	r2, [sp, #80]	; 0x50
   1b9fc:	mov	r1, #0
   1ba00:	sub	r2, r2, r0
   1ba04:	add	r0, r5, r0, lsl #3
   1ba08:	lsl	r2, r2, #3
   1ba0c:	bl	112f4 <memset@plt>
   1ba10:	ldr	r3, [sp, #80]	; 0x50
   1ba14:	str	r3, [r6, #4]
   1ba18:	add	fp, r5, r4, lsl #3
   1ba1c:	ldr	r1, [sp, #36]	; 0x24
   1ba20:	ldr	r8, [r5, r4, lsl #3]
   1ba24:	ldr	r6, [fp, #4]
   1ba28:	ldr	r2, [sp, #72]	; 0x48
   1ba2c:	ldr	r3, [sp, #32]
   1ba30:	ldr	ip, [sp, #76]	; 0x4c
   1ba34:	orr	r1, r1, #1
   1ba38:	add	sl, sp, #40	; 0x28
   1ba3c:	str	r1, [sp, #28]
   1ba40:	str	r1, [sp, #4]
   1ba44:	str	r2, [sp, #12]
   1ba48:	str	r3, [sp]
   1ba4c:	mov	r0, r6
   1ba50:	mov	r1, r8
   1ba54:	str	ip, [sp, #16]
   1ba58:	str	sl, [sp, #8]
   1ba5c:	mvn	r3, #0
   1ba60:	mov	r2, r9
   1ba64:	bl	18b08 <__assert_fail@plt+0x76f4>
   1ba68:	cmp	r8, r0
   1ba6c:	bhi	1bad0 <__assert_fail@plt+0xa6bc>
   1ba70:	ldr	r3, [pc, #164]	; 1bb1c <__assert_fail@plt+0xa708>
   1ba74:	add	r8, r0, #1
   1ba78:	cmp	r6, r3
   1ba7c:	str	r8, [r5, r4, lsl #3]
   1ba80:	beq	1ba8c <__assert_fail@plt+0xa678>
   1ba84:	mov	r0, r6
   1ba88:	bl	16f1c <__assert_fail@plt+0x5b08>
   1ba8c:	mov	r0, r8
   1ba90:	bl	1d488 <__assert_fail@plt+0xc074>
   1ba94:	ldr	lr, [sp, #76]	; 0x4c
   1ba98:	ldr	r3, [sp, #32]
   1ba9c:	ldr	ip, [sp, #72]	; 0x48
   1baa0:	ldr	r4, [sp, #28]
   1baa4:	mov	r2, r9
   1baa8:	mov	r1, r8
   1baac:	str	r0, [fp, #4]
   1bab0:	str	r3, [sp]
   1bab4:	str	sl, [sp, #8]
   1bab8:	str	r4, [sp, #4]
   1babc:	str	lr, [sp, #16]
   1bac0:	str	ip, [sp, #12]
   1bac4:	mvn	r3, #0
   1bac8:	mov	r6, r0
   1bacc:	bl	18b08 <__assert_fail@plt+0x76f4>
   1bad0:	ldr	r3, [sp, #24]
   1bad4:	mov	r0, r6
   1bad8:	str	r3, [r7]
   1badc:	add	sp, sp, #180	; 0xb4
   1bae0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bae4:	mov	r3, #8
   1bae8:	sub	r2, r4, r2
   1baec:	add	r1, sp, #80	; 0x50
   1baf0:	str	r3, [sp]
   1baf4:	add	r2, r2, #1
   1baf8:	mvn	r3, #-2147483648	; 0x80000000
   1bafc:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1bb00:	mov	r5, r0
   1bb04:	ldm	r8, {r0, r1}
   1bb08:	str	r5, [r6]
   1bb0c:	stm	r5, {r0, r1}
   1bb10:	b	1b9f4 <__assert_fail@plt+0xa5e0>
   1bb14:	bl	113f0 <abort@plt>
   1bb18:	andeq	r2, r3, ip, ror #2
   1bb1c:	andeq	r2, r3, r0, lsr #4
   1bb20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb24:	mov	r7, r1
   1bb28:	ldr	lr, [pc, #492]	; 1bd1c <__assert_fail@plt+0xa908>
   1bb2c:	mov	r8, r2
   1bb30:	mov	r4, r0
   1bb34:	mov	fp, r3
   1bb38:	ldm	lr!, {r0, r1, r2, r3}
   1bb3c:	sub	sp, sp, #100	; 0x64
   1bb40:	add	ip, sp, #48	; 0x30
   1bb44:	mov	sl, #10
   1bb48:	stmia	ip!, {r0, r1, r2, r3}
   1bb4c:	cmp	r8, #0
   1bb50:	cmpne	r7, #0
   1bb54:	ldm	lr!, {r0, r1, r2, r3}
   1bb58:	str	sl, [sp, #48]	; 0x30
   1bb5c:	stmia	ip!, {r0, r1, r2, r3}
   1bb60:	ldm	lr, {r0, r1, r2, r3}
   1bb64:	stm	ip, {r0, r1, r2, r3}
   1bb68:	beq	1bd18 <__assert_fail@plt+0xa904>
   1bb6c:	str	r7, [sp, #88]	; 0x58
   1bb70:	str	r8, [sp, #92]	; 0x5c
   1bb74:	bl	112dc <__errno_location@plt>
   1bb78:	ldr	r6, [pc, #416]	; 1bd20 <__assert_fail@plt+0xa90c>
   1bb7c:	cmn	r4, #-2147483647	; 0x80000001
   1bb80:	ldr	r5, [r6]
   1bb84:	mov	r9, r0
   1bb88:	movne	r0, #0
   1bb8c:	moveq	r0, #1
   1bb90:	ldr	r3, [r9]
   1bb94:	orrs	r0, r0, r4, lsr #31
   1bb98:	str	r3, [sp, #28]
   1bb9c:	bne	1bd18 <__assert_fail@plt+0xa904>
   1bba0:	ldr	r2, [r6, #4]
   1bba4:	cmp	r4, r2
   1bba8:	movlt	r3, sl
   1bbac:	blt	1bc18 <__assert_fail@plt+0xa804>
   1bbb0:	add	r7, r6, #8
   1bbb4:	cmp	r5, r7
   1bbb8:	str	r2, [sp, #44]	; 0x2c
   1bbbc:	beq	1bce8 <__assert_fail@plt+0xa8d4>
   1bbc0:	mov	r3, #8
   1bbc4:	sub	r2, r4, r2
   1bbc8:	mov	r0, r5
   1bbcc:	str	r3, [sp]
   1bbd0:	add	r2, r2, #1
   1bbd4:	mvn	r3, #-2147483648	; 0x80000000
   1bbd8:	add	r1, sp, #44	; 0x2c
   1bbdc:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1bbe0:	mov	r5, r0
   1bbe4:	str	r0, [r6]
   1bbe8:	ldr	r0, [r6, #4]
   1bbec:	ldr	r2, [sp, #44]	; 0x2c
   1bbf0:	mov	r1, #0
   1bbf4:	sub	r2, r2, r0
   1bbf8:	add	r0, r5, r0, lsl #3
   1bbfc:	lsl	r2, r2, #3
   1bc00:	bl	112f4 <memset@plt>
   1bc04:	ldr	r3, [sp, #48]	; 0x30
   1bc08:	ldr	r7, [sp, #88]	; 0x58
   1bc0c:	ldr	r8, [sp, #92]	; 0x5c
   1bc10:	ldr	r2, [sp, #44]	; 0x2c
   1bc14:	str	r2, [r6, #4]
   1bc18:	add	r2, r5, r4, lsl #3
   1bc1c:	mov	r1, r2
   1bc20:	str	r2, [sp, #32]
   1bc24:	ldr	r2, [sp, #52]	; 0x34
   1bc28:	ldr	r6, [r1, #4]
   1bc2c:	ldr	sl, [r5, r4, lsl #3]
   1bc30:	orr	r2, r2, #1
   1bc34:	str	r3, [sp]
   1bc38:	add	r3, sp, #56	; 0x38
   1bc3c:	str	r2, [sp, #36]	; 0x24
   1bc40:	str	r2, [sp, #4]
   1bc44:	str	r3, [sp, #8]
   1bc48:	mov	r0, r6
   1bc4c:	str	r8, [sp, #16]
   1bc50:	str	r7, [sp, #12]
   1bc54:	mov	r1, sl
   1bc58:	mvn	r3, #0
   1bc5c:	mov	r2, fp
   1bc60:	bl	18b08 <__assert_fail@plt+0x76f4>
   1bc64:	cmp	sl, r0
   1bc68:	bhi	1bcd4 <__assert_fail@plt+0xa8c0>
   1bc6c:	ldr	r3, [pc, #176]	; 1bd24 <__assert_fail@plt+0xa910>
   1bc70:	add	r7, r0, #1
   1bc74:	cmp	r6, r3
   1bc78:	str	r7, [r5, r4, lsl #3]
   1bc7c:	beq	1bc88 <__assert_fail@plt+0xa874>
   1bc80:	mov	r0, r6
   1bc84:	bl	16f1c <__assert_fail@plt+0x5b08>
   1bc88:	mov	r0, r7
   1bc8c:	bl	1d488 <__assert_fail@plt+0xc074>
   1bc90:	ldr	r3, [sp, #32]
   1bc94:	ldr	lr, [sp, #92]	; 0x5c
   1bc98:	ldr	ip, [sp, #88]	; 0x58
   1bc9c:	ldr	r4, [sp, #36]	; 0x24
   1bca0:	mov	r2, fp
   1bca4:	mov	r1, r7
   1bca8:	str	r0, [r3, #4]
   1bcac:	add	r3, sp, #56	; 0x38
   1bcb0:	str	r3, [sp, #8]
   1bcb4:	ldr	r3, [sp, #48]	; 0x30
   1bcb8:	str	r4, [sp, #4]
   1bcbc:	str	r3, [sp]
   1bcc0:	str	lr, [sp, #16]
   1bcc4:	str	ip, [sp, #12]
   1bcc8:	mvn	r3, #0
   1bccc:	mov	r6, r0
   1bcd0:	bl	18b08 <__assert_fail@plt+0x76f4>
   1bcd4:	ldr	r3, [sp, #28]
   1bcd8:	mov	r0, r6
   1bcdc:	str	r3, [r9]
   1bce0:	add	sp, sp, #100	; 0x64
   1bce4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bce8:	mov	r3, #8
   1bcec:	sub	r2, r4, r2
   1bcf0:	str	r3, [sp]
   1bcf4:	add	r1, sp, #44	; 0x2c
   1bcf8:	add	r2, r2, #1
   1bcfc:	mvn	r3, #-2147483648	; 0x80000000
   1bd00:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1bd04:	mov	r5, r0
   1bd08:	ldm	r7, {r0, r1}
   1bd0c:	str	r5, [r6]
   1bd10:	stm	r5, {r0, r1}
   1bd14:	b	1bbe8 <__assert_fail@plt+0xa7d4>
   1bd18:	bl	113f0 <abort@plt>
   1bd1c:	strdeq	r2, [r3], -r0
   1bd20:	andeq	r2, r3, ip, ror #2
   1bd24:	andeq	r2, r3, r0, lsr #4
   1bd28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd2c:	mov	r7, r1
   1bd30:	ldr	lr, [pc, #492]	; 1bf24 <__assert_fail@plt+0xab10>
   1bd34:	mov	r8, r2
   1bd38:	mov	r4, r0
   1bd3c:	mov	fp, r3
   1bd40:	ldm	lr!, {r0, r1, r2, r3}
   1bd44:	sub	sp, sp, #100	; 0x64
   1bd48:	add	ip, sp, #48	; 0x30
   1bd4c:	mov	sl, #10
   1bd50:	stmia	ip!, {r0, r1, r2, r3}
   1bd54:	cmp	r8, #0
   1bd58:	cmpne	r7, #0
   1bd5c:	ldm	lr!, {r0, r1, r2, r3}
   1bd60:	str	sl, [sp, #48]	; 0x30
   1bd64:	stmia	ip!, {r0, r1, r2, r3}
   1bd68:	ldm	lr, {r0, r1, r2, r3}
   1bd6c:	stm	ip, {r0, r1, r2, r3}
   1bd70:	beq	1bf20 <__assert_fail@plt+0xab0c>
   1bd74:	str	r7, [sp, #88]	; 0x58
   1bd78:	str	r8, [sp, #92]	; 0x5c
   1bd7c:	bl	112dc <__errno_location@plt>
   1bd80:	ldr	r6, [pc, #416]	; 1bf28 <__assert_fail@plt+0xab14>
   1bd84:	cmn	r4, #-2147483647	; 0x80000001
   1bd88:	ldr	r5, [r6]
   1bd8c:	mov	r9, r0
   1bd90:	movne	r0, #0
   1bd94:	moveq	r0, #1
   1bd98:	ldr	r3, [r9]
   1bd9c:	orrs	r0, r0, r4, lsr #31
   1bda0:	str	r3, [sp, #28]
   1bda4:	bne	1bf20 <__assert_fail@plt+0xab0c>
   1bda8:	ldr	r2, [r6, #4]
   1bdac:	cmp	r4, r2
   1bdb0:	movlt	r3, sl
   1bdb4:	blt	1be20 <__assert_fail@plt+0xaa0c>
   1bdb8:	add	r7, r6, #8
   1bdbc:	cmp	r5, r7
   1bdc0:	str	r2, [sp, #44]	; 0x2c
   1bdc4:	beq	1bef0 <__assert_fail@plt+0xaadc>
   1bdc8:	mov	r3, #8
   1bdcc:	sub	r2, r4, r2
   1bdd0:	mov	r0, r5
   1bdd4:	str	r3, [sp]
   1bdd8:	add	r2, r2, #1
   1bddc:	mvn	r3, #-2147483648	; 0x80000000
   1bde0:	add	r1, sp, #44	; 0x2c
   1bde4:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1bde8:	mov	r5, r0
   1bdec:	str	r0, [r6]
   1bdf0:	ldr	r0, [r6, #4]
   1bdf4:	ldr	r2, [sp, #44]	; 0x2c
   1bdf8:	mov	r1, #0
   1bdfc:	sub	r2, r2, r0
   1be00:	add	r0, r5, r0, lsl #3
   1be04:	lsl	r2, r2, #3
   1be08:	bl	112f4 <memset@plt>
   1be0c:	ldr	r3, [sp, #48]	; 0x30
   1be10:	ldr	r7, [sp, #88]	; 0x58
   1be14:	ldr	r8, [sp, #92]	; 0x5c
   1be18:	ldr	r2, [sp, #44]	; 0x2c
   1be1c:	str	r2, [r6, #4]
   1be20:	add	r2, r5, r4, lsl #3
   1be24:	mov	r1, r2
   1be28:	str	r2, [sp, #32]
   1be2c:	ldr	r2, [sp, #52]	; 0x34
   1be30:	ldr	r6, [r1, #4]
   1be34:	ldr	sl, [r5, r4, lsl #3]
   1be38:	orr	r2, r2, #1
   1be3c:	str	r3, [sp]
   1be40:	add	r3, sp, #56	; 0x38
   1be44:	str	r2, [sp, #36]	; 0x24
   1be48:	str	r2, [sp, #4]
   1be4c:	str	r3, [sp, #8]
   1be50:	mov	r0, r6
   1be54:	str	r8, [sp, #16]
   1be58:	str	r7, [sp, #12]
   1be5c:	mov	r1, sl
   1be60:	ldr	r3, [sp, #136]	; 0x88
   1be64:	mov	r2, fp
   1be68:	bl	18b08 <__assert_fail@plt+0x76f4>
   1be6c:	cmp	sl, r0
   1be70:	bhi	1bedc <__assert_fail@plt+0xaac8>
   1be74:	ldr	r3, [pc, #176]	; 1bf2c <__assert_fail@plt+0xab18>
   1be78:	add	r7, r0, #1
   1be7c:	cmp	r6, r3
   1be80:	str	r7, [r5, r4, lsl #3]
   1be84:	beq	1be90 <__assert_fail@plt+0xaa7c>
   1be88:	mov	r0, r6
   1be8c:	bl	16f1c <__assert_fail@plt+0x5b08>
   1be90:	mov	r0, r7
   1be94:	bl	1d488 <__assert_fail@plt+0xc074>
   1be98:	ldr	r3, [sp, #32]
   1be9c:	ldr	lr, [sp, #92]	; 0x5c
   1bea0:	ldr	ip, [sp, #88]	; 0x58
   1bea4:	ldr	r4, [sp, #36]	; 0x24
   1bea8:	mov	r2, fp
   1beac:	mov	r1, r7
   1beb0:	str	r0, [r3, #4]
   1beb4:	add	r3, sp, #56	; 0x38
   1beb8:	str	r3, [sp, #8]
   1bebc:	ldr	r3, [sp, #48]	; 0x30
   1bec0:	str	r4, [sp, #4]
   1bec4:	str	r3, [sp]
   1bec8:	str	lr, [sp, #16]
   1becc:	str	ip, [sp, #12]
   1bed0:	ldr	r3, [sp, #136]	; 0x88
   1bed4:	mov	r6, r0
   1bed8:	bl	18b08 <__assert_fail@plt+0x76f4>
   1bedc:	ldr	r3, [sp, #28]
   1bee0:	mov	r0, r6
   1bee4:	str	r3, [r9]
   1bee8:	add	sp, sp, #100	; 0x64
   1beec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bef0:	mov	r3, #8
   1bef4:	sub	r2, r4, r2
   1bef8:	str	r3, [sp]
   1befc:	add	r1, sp, #44	; 0x2c
   1bf00:	add	r2, r2, #1
   1bf04:	mvn	r3, #-2147483648	; 0x80000000
   1bf08:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1bf0c:	mov	r5, r0
   1bf10:	ldm	r7, {r0, r1}
   1bf14:	str	r5, [r6]
   1bf18:	stm	r5, {r0, r1}
   1bf1c:	b	1bdf0 <__assert_fail@plt+0xa9dc>
   1bf20:	bl	113f0 <abort@plt>
   1bf24:	strdeq	r2, [r3], -r0
   1bf28:	andeq	r2, r3, ip, ror #2
   1bf2c:	andeq	r2, r3, r0, lsr #4
   1bf30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf34:	mov	r5, r0
   1bf38:	ldr	lr, [pc, #452]	; 1c104 <__assert_fail@plt+0xacf0>
   1bf3c:	mov	r6, r1
   1bf40:	mov	sl, r2
   1bf44:	ldm	lr!, {r0, r1, r2, r3}
   1bf48:	sub	sp, sp, #92	; 0x5c
   1bf4c:	add	ip, sp, #40	; 0x28
   1bf50:	cmp	r6, #0
   1bf54:	cmpne	r5, #0
   1bf58:	stmia	ip!, {r0, r1, r2, r3}
   1bf5c:	mov	r9, #10
   1bf60:	ldm	lr!, {r0, r1, r2, r3}
   1bf64:	moveq	fp, #1
   1bf68:	movne	fp, #0
   1bf6c:	str	r9, [sp, #40]	; 0x28
   1bf70:	stmia	ip!, {r0, r1, r2, r3}
   1bf74:	ldm	lr, {r0, r1, r2, r3}
   1bf78:	stm	ip, {r0, r1, r2, r3}
   1bf7c:	beq	1c100 <__assert_fail@plt+0xacec>
   1bf80:	str	r5, [sp, #80]	; 0x50
   1bf84:	str	r6, [sp, #84]	; 0x54
   1bf88:	bl	112dc <__errno_location@plt>
   1bf8c:	ldr	r7, [pc, #372]	; 1c108 <__assert_fail@plt+0xacf4>
   1bf90:	ldr	r2, [r7, #4]
   1bf94:	ldr	r4, [r7]
   1bf98:	cmp	r2, #0
   1bf9c:	ldr	r3, [r0]
   1bfa0:	mov	r8, r0
   1bfa4:	str	r3, [sp, #24]
   1bfa8:	movgt	r3, r9
   1bfac:	bgt	1c014 <__assert_fail@plt+0xac00>
   1bfb0:	add	r5, r7, #8
   1bfb4:	cmp	r4, r5
   1bfb8:	str	r2, [sp, #36]	; 0x24
   1bfbc:	beq	1c0d0 <__assert_fail@plt+0xacbc>
   1bfc0:	mov	r3, #8
   1bfc4:	mov	r0, r4
   1bfc8:	str	r3, [sp]
   1bfcc:	rsb	r2, r2, #1
   1bfd0:	mvn	r3, #-2147483648	; 0x80000000
   1bfd4:	add	r1, sp, #36	; 0x24
   1bfd8:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1bfdc:	mov	r4, r0
   1bfe0:	str	r0, [r7]
   1bfe4:	ldr	r0, [r7, #4]
   1bfe8:	ldr	r2, [sp, #36]	; 0x24
   1bfec:	mov	r1, #0
   1bff0:	sub	r2, r2, r0
   1bff4:	add	r0, r4, r0, lsl #3
   1bff8:	lsl	r2, r2, #3
   1bffc:	bl	112f4 <memset@plt>
   1c000:	ldr	r3, [sp, #40]	; 0x28
   1c004:	ldr	r5, [sp, #80]	; 0x50
   1c008:	ldr	r6, [sp, #84]	; 0x54
   1c00c:	ldr	r2, [sp, #36]	; 0x24
   1c010:	str	r2, [r7, #4]
   1c014:	ldr	r2, [sp, #44]	; 0x2c
   1c018:	ldr	r9, [r4]
   1c01c:	ldr	r7, [r4, #4]
   1c020:	orr	r2, r2, #1
   1c024:	add	fp, sp, #48	; 0x30
   1c028:	str	r2, [sp, #28]
   1c02c:	str	r2, [sp, #4]
   1c030:	str	r3, [sp]
   1c034:	str	r6, [sp, #16]
   1c038:	str	r5, [sp, #12]
   1c03c:	mov	r1, r9
   1c040:	mov	r0, r7
   1c044:	str	fp, [sp, #8]
   1c048:	mvn	r3, #0
   1c04c:	mov	r2, sl
   1c050:	bl	18b08 <__assert_fail@plt+0x76f4>
   1c054:	cmp	r9, r0
   1c058:	bhi	1c0bc <__assert_fail@plt+0xaca8>
   1c05c:	ldr	r3, [pc, #168]	; 1c10c <__assert_fail@plt+0xacf8>
   1c060:	add	r5, r0, #1
   1c064:	cmp	r7, r3
   1c068:	str	r5, [r4]
   1c06c:	beq	1c078 <__assert_fail@plt+0xac64>
   1c070:	mov	r0, r7
   1c074:	bl	16f1c <__assert_fail@plt+0x5b08>
   1c078:	mov	r0, r5
   1c07c:	bl	1d488 <__assert_fail@plt+0xc074>
   1c080:	ldr	lr, [sp, #84]	; 0x54
   1c084:	ldr	r3, [sp, #40]	; 0x28
   1c088:	ldr	ip, [sp, #80]	; 0x50
   1c08c:	mov	r2, sl
   1c090:	mov	r1, r5
   1c094:	str	r0, [r4, #4]
   1c098:	ldr	r4, [sp, #28]
   1c09c:	str	r3, [sp]
   1c0a0:	str	fp, [sp, #8]
   1c0a4:	str	r4, [sp, #4]
   1c0a8:	str	lr, [sp, #16]
   1c0ac:	str	ip, [sp, #12]
   1c0b0:	mvn	r3, #0
   1c0b4:	mov	r7, r0
   1c0b8:	bl	18b08 <__assert_fail@plt+0x76f4>
   1c0bc:	ldr	r3, [sp, #24]
   1c0c0:	mov	r0, r7
   1c0c4:	str	r3, [r8]
   1c0c8:	add	sp, sp, #92	; 0x5c
   1c0cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c0d0:	mov	r3, #8
   1c0d4:	str	r3, [sp]
   1c0d8:	add	r1, sp, #36	; 0x24
   1c0dc:	rsb	r2, r2, #1
   1c0e0:	mov	r0, fp
   1c0e4:	mvn	r3, #-2147483648	; 0x80000000
   1c0e8:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1c0ec:	mov	r4, r0
   1c0f0:	ldm	r5, {r0, r1}
   1c0f4:	str	r4, [r7]
   1c0f8:	stm	r4, {r0, r1}
   1c0fc:	b	1bfe4 <__assert_fail@plt+0xabd0>
   1c100:	bl	113f0 <abort@plt>
   1c104:	strdeq	r2, [r3], -r0
   1c108:	andeq	r2, r3, ip, ror #2
   1c10c:	andeq	r2, r3, r0, lsr #4
   1c110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c114:	mov	r5, r0
   1c118:	ldr	lr, [pc, #464]	; 1c2f0 <__assert_fail@plt+0xaedc>
   1c11c:	mov	r6, r1
   1c120:	mov	sl, r2
   1c124:	mov	fp, r3
   1c128:	ldm	lr!, {r0, r1, r2, r3}
   1c12c:	sub	sp, sp, #92	; 0x5c
   1c130:	add	ip, sp, #40	; 0x28
   1c134:	cmp	r6, #0
   1c138:	cmpne	r5, #0
   1c13c:	stmia	ip!, {r0, r1, r2, r3}
   1c140:	moveq	r4, #1
   1c144:	ldm	lr!, {r0, r1, r2, r3}
   1c148:	movne	r4, #0
   1c14c:	mov	r9, #10
   1c150:	str	r4, [sp, #28]
   1c154:	stmia	ip!, {r0, r1, r2, r3}
   1c158:	ldm	lr, {r0, r1, r2, r3}
   1c15c:	str	r9, [sp, #40]	; 0x28
   1c160:	stm	ip, {r0, r1, r2, r3}
   1c164:	beq	1c2ec <__assert_fail@plt+0xaed8>
   1c168:	str	r5, [sp, #80]	; 0x50
   1c16c:	str	r6, [sp, #84]	; 0x54
   1c170:	bl	112dc <__errno_location@plt>
   1c174:	ldr	r7, [pc, #376]	; 1c2f4 <__assert_fail@plt+0xaee0>
   1c178:	ldr	r2, [r7, #4]
   1c17c:	ldr	r4, [r7]
   1c180:	cmp	r2, #0
   1c184:	ldr	r3, [r0]
   1c188:	mov	r8, r0
   1c18c:	str	r3, [sp, #24]
   1c190:	movgt	r3, r9
   1c194:	bgt	1c1fc <__assert_fail@plt+0xade8>
   1c198:	add	r5, r7, #8
   1c19c:	cmp	r4, r5
   1c1a0:	str	r2, [sp, #36]	; 0x24
   1c1a4:	beq	1c2bc <__assert_fail@plt+0xaea8>
   1c1a8:	mov	r3, #8
   1c1ac:	mov	r0, r4
   1c1b0:	str	r3, [sp]
   1c1b4:	rsb	r2, r2, #1
   1c1b8:	mvn	r3, #-2147483648	; 0x80000000
   1c1bc:	add	r1, sp, #36	; 0x24
   1c1c0:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1c1c4:	mov	r4, r0
   1c1c8:	str	r0, [r7]
   1c1cc:	ldr	r0, [r7, #4]
   1c1d0:	ldr	r2, [sp, #36]	; 0x24
   1c1d4:	mov	r1, #0
   1c1d8:	sub	r2, r2, r0
   1c1dc:	add	r0, r4, r0, lsl #3
   1c1e0:	lsl	r2, r2, #3
   1c1e4:	bl	112f4 <memset@plt>
   1c1e8:	ldr	r3, [sp, #40]	; 0x28
   1c1ec:	ldr	r5, [sp, #80]	; 0x50
   1c1f0:	ldr	r6, [sp, #84]	; 0x54
   1c1f4:	ldr	r2, [sp, #36]	; 0x24
   1c1f8:	str	r2, [r7, #4]
   1c1fc:	ldr	r2, [sp, #44]	; 0x2c
   1c200:	ldr	r9, [r4]
   1c204:	ldr	r7, [r4, #4]
   1c208:	orr	r2, r2, #1
   1c20c:	str	r3, [sp]
   1c210:	add	r3, sp, #48	; 0x30
   1c214:	str	r2, [sp, #28]
   1c218:	str	r2, [sp, #4]
   1c21c:	str	r3, [sp, #8]
   1c220:	str	r6, [sp, #16]
   1c224:	str	r5, [sp, #12]
   1c228:	mov	r1, r9
   1c22c:	mov	r0, r7
   1c230:	mov	r3, fp
   1c234:	mov	r2, sl
   1c238:	bl	18b08 <__assert_fail@plt+0x76f4>
   1c23c:	cmp	r9, r0
   1c240:	bhi	1c2a8 <__assert_fail@plt+0xae94>
   1c244:	ldr	r3, [pc, #172]	; 1c2f8 <__assert_fail@plt+0xaee4>
   1c248:	add	r5, r0, #1
   1c24c:	cmp	r7, r3
   1c250:	str	r5, [r4]
   1c254:	beq	1c260 <__assert_fail@plt+0xae4c>
   1c258:	mov	r0, r7
   1c25c:	bl	16f1c <__assert_fail@plt+0x5b08>
   1c260:	mov	r0, r5
   1c264:	bl	1d488 <__assert_fail@plt+0xc074>
   1c268:	add	lr, sp, #48	; 0x30
   1c26c:	ldr	ip, [sp, #84]	; 0x54
   1c270:	mov	r1, r5
   1c274:	ldr	r5, [sp, #28]
   1c278:	mov	r3, fp
   1c27c:	mov	r2, sl
   1c280:	str	r0, [r4, #4]
   1c284:	ldr	r4, [sp, #80]	; 0x50
   1c288:	str	lr, [sp, #8]
   1c28c:	ldr	lr, [sp, #40]	; 0x28
   1c290:	str	r5, [sp, #4]
   1c294:	str	ip, [sp, #16]
   1c298:	str	r4, [sp, #12]
   1c29c:	str	lr, [sp]
   1c2a0:	mov	r7, r0
   1c2a4:	bl	18b08 <__assert_fail@plt+0x76f4>
   1c2a8:	ldr	r3, [sp, #24]
   1c2ac:	mov	r0, r7
   1c2b0:	str	r3, [r8]
   1c2b4:	add	sp, sp, #92	; 0x5c
   1c2b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c2bc:	mov	r3, #8
   1c2c0:	str	r3, [sp]
   1c2c4:	add	r1, sp, #36	; 0x24
   1c2c8:	rsb	r2, r2, #1
   1c2cc:	ldr	r0, [sp, #28]
   1c2d0:	mvn	r3, #-2147483648	; 0x80000000
   1c2d4:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1c2d8:	mov	r4, r0
   1c2dc:	ldm	r5, {r0, r1}
   1c2e0:	str	r4, [r7]
   1c2e4:	stm	r4, {r0, r1}
   1c2e8:	b	1c1cc <__assert_fail@plt+0xadb8>
   1c2ec:	bl	113f0 <abort@plt>
   1c2f0:	strdeq	r2, [r3], -r0
   1c2f4:	andeq	r2, r3, ip, ror #2
   1c2f8:	andeq	r2, r3, r0, lsr #4
   1c2fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c300:	sub	sp, sp, #52	; 0x34
   1c304:	mov	r5, r0
   1c308:	mov	sl, r1
   1c30c:	mov	fp, r2
   1c310:	bl	112dc <__errno_location@plt>
   1c314:	ldr	r4, [pc, #404]	; 1c4b0 <__assert_fail@plt+0xb09c>
   1c318:	cmn	r5, #-2147483647	; 0x80000001
   1c31c:	ldr	r6, [r4]
   1c320:	mov	r8, r0
   1c324:	movne	r0, #0
   1c328:	moveq	r0, #1
   1c32c:	ldr	r3, [r8]
   1c330:	orrs	r0, r0, r5, lsr #31
   1c334:	str	r3, [sp, #28]
   1c338:	bne	1c4ac <__assert_fail@plt+0xb098>
   1c33c:	ldr	r2, [r4, #4]
   1c340:	cmp	r5, r2
   1c344:	blt	1c3a4 <__assert_fail@plt+0xaf90>
   1c348:	add	r7, r4, #8
   1c34c:	cmp	r6, r7
   1c350:	str	r2, [sp, #44]	; 0x2c
   1c354:	beq	1c47c <__assert_fail@plt+0xb068>
   1c358:	mov	r3, #8
   1c35c:	sub	r2, r5, r2
   1c360:	mov	r0, r6
   1c364:	str	r3, [sp]
   1c368:	add	r2, r2, #1
   1c36c:	mvn	r3, #-2147483648	; 0x80000000
   1c370:	add	r1, sp, #44	; 0x2c
   1c374:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1c378:	mov	r6, r0
   1c37c:	str	r0, [r4]
   1c380:	ldr	r0, [r4, #4]
   1c384:	ldr	r2, [sp, #44]	; 0x2c
   1c388:	mov	r1, #0
   1c38c:	sub	r2, r2, r0
   1c390:	add	r0, r6, r0, lsl #3
   1c394:	lsl	r2, r2, #3
   1c398:	bl	112f4 <memset@plt>
   1c39c:	ldr	r3, [sp, #44]	; 0x2c
   1c3a0:	str	r3, [r4, #4]
   1c3a4:	ldr	r2, [r4, #56]	; 0x38
   1c3a8:	add	r3, r6, r5, lsl #3
   1c3ac:	ldr	r1, [r4, #20]
   1c3b0:	ldr	r7, [r3, #4]
   1c3b4:	ldr	r9, [r6, r5, lsl #3]
   1c3b8:	ldr	ip, [r4, #60]	; 0x3c
   1c3bc:	str	r3, [sp, #32]
   1c3c0:	ldr	r3, [r4, #16]
   1c3c4:	str	r2, [sp, #12]
   1c3c8:	ldr	r2, [pc, #228]	; 1c4b4 <__assert_fail@plt+0xb0a0>
   1c3cc:	orr	r1, r1, #1
   1c3d0:	str	r1, [sp, #36]	; 0x24
   1c3d4:	str	r1, [sp, #4]
   1c3d8:	str	r2, [sp, #8]
   1c3dc:	str	r3, [sp]
   1c3e0:	mov	r0, r7
   1c3e4:	mov	r1, r9
   1c3e8:	str	ip, [sp, #16]
   1c3ec:	mov	r3, fp
   1c3f0:	mov	r2, sl
   1c3f4:	bl	18b08 <__assert_fail@plt+0x76f4>
   1c3f8:	cmp	r9, r0
   1c3fc:	bhi	1c468 <__assert_fail@plt+0xb054>
   1c400:	ldr	r3, [pc, #176]	; 1c4b8 <__assert_fail@plt+0xb0a4>
   1c404:	add	r9, r0, #1
   1c408:	cmp	r7, r3
   1c40c:	str	r9, [r6, r5, lsl #3]
   1c410:	beq	1c41c <__assert_fail@plt+0xb008>
   1c414:	mov	r0, r7
   1c418:	bl	16f1c <__assert_fail@plt+0x5b08>
   1c41c:	mov	r0, r9
   1c420:	bl	1d488 <__assert_fail@plt+0xc074>
   1c424:	ldr	ip, [sp, #32]
   1c428:	ldr	lr, [r4, #60]	; 0x3c
   1c42c:	ldr	r5, [r4, #56]	; 0x38
   1c430:	mov	r3, fp
   1c434:	mov	r2, sl
   1c438:	mov	r1, r9
   1c43c:	str	r0, [ip, #4]
   1c440:	ldr	ip, [r4, #16]
   1c444:	ldr	r4, [pc, #104]	; 1c4b4 <__assert_fail@plt+0xb0a0>
   1c448:	str	lr, [sp, #16]
   1c44c:	str	r4, [sp, #8]
   1c450:	ldr	r4, [sp, #36]	; 0x24
   1c454:	str	r5, [sp, #12]
   1c458:	str	r4, [sp, #4]
   1c45c:	str	ip, [sp]
   1c460:	mov	r7, r0
   1c464:	bl	18b08 <__assert_fail@plt+0x76f4>
   1c468:	ldr	r3, [sp, #28]
   1c46c:	mov	r0, r7
   1c470:	str	r3, [r8]
   1c474:	add	sp, sp, #52	; 0x34
   1c478:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c47c:	mov	r3, #8
   1c480:	sub	r2, r5, r2
   1c484:	str	r3, [sp]
   1c488:	add	r1, sp, #44	; 0x2c
   1c48c:	add	r2, r2, #1
   1c490:	mvn	r3, #-2147483648	; 0x80000000
   1c494:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1c498:	mov	r6, r0
   1c49c:	ldm	r7, {r0, r1}
   1c4a0:	str	r6, [r4]
   1c4a4:	stm	r6, {r0, r1}
   1c4a8:	b	1c380 <__assert_fail@plt+0xaf6c>
   1c4ac:	bl	113f0 <abort@plt>
   1c4b0:	andeq	r2, r3, ip, ror #2
   1c4b4:	andeq	r2, r3, r4, lsl #3
   1c4b8:	andeq	r2, r3, r0, lsr #4
   1c4bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c4c0:	sub	sp, sp, #44	; 0x2c
   1c4c4:	mov	r9, r0
   1c4c8:	mov	sl, r1
   1c4cc:	bl	112dc <__errno_location@plt>
   1c4d0:	ldr	r4, [pc, #360]	; 1c640 <__assert_fail@plt+0xb22c>
   1c4d4:	ldr	r2, [r4, #4]
   1c4d8:	ldr	r5, [r4]
   1c4dc:	cmp	r2, #0
   1c4e0:	ldr	r3, [r0]
   1c4e4:	mov	r7, r0
   1c4e8:	str	r3, [sp, #24]
   1c4ec:	bgt	1c548 <__assert_fail@plt+0xb134>
   1c4f0:	add	r6, r4, #8
   1c4f4:	cmp	r5, r6
   1c4f8:	str	r2, [sp, #36]	; 0x24
   1c4fc:	beq	1c610 <__assert_fail@plt+0xb1fc>
   1c500:	mov	r3, #8
   1c504:	mov	r0, r5
   1c508:	str	r3, [sp]
   1c50c:	rsb	r2, r2, #1
   1c510:	mvn	r3, #-2147483648	; 0x80000000
   1c514:	add	r1, sp, #36	; 0x24
   1c518:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1c51c:	mov	r5, r0
   1c520:	str	r0, [r4]
   1c524:	ldr	r0, [r4, #4]
   1c528:	ldr	r2, [sp, #36]	; 0x24
   1c52c:	mov	r1, #0
   1c530:	sub	r2, r2, r0
   1c534:	add	r0, r5, r0, lsl #3
   1c538:	lsl	r2, r2, #3
   1c53c:	bl	112f4 <memset@plt>
   1c540:	ldr	r3, [sp, #36]	; 0x24
   1c544:	str	r3, [r4, #4]
   1c548:	ldr	r1, [r4, #20]
   1c54c:	ldr	r8, [r5]
   1c550:	ldr	r6, [r5, #4]
   1c554:	ldr	r2, [r4, #56]	; 0x38
   1c558:	ldr	r3, [r4, #16]
   1c55c:	ldr	ip, [r4, #60]	; 0x3c
   1c560:	ldr	fp, [pc, #220]	; 1c644 <__assert_fail@plt+0xb230>
   1c564:	orr	r1, r1, #1
   1c568:	str	r1, [sp, #28]
   1c56c:	str	r1, [sp, #4]
   1c570:	str	r2, [sp, #12]
   1c574:	str	r3, [sp]
   1c578:	mov	r1, r8
   1c57c:	mov	r0, r6
   1c580:	str	ip, [sp, #16]
   1c584:	str	fp, [sp, #8]
   1c588:	mov	r3, sl
   1c58c:	mov	r2, r9
   1c590:	bl	18b08 <__assert_fail@plt+0x76f4>
   1c594:	cmp	r8, r0
   1c598:	bhi	1c5fc <__assert_fail@plt+0xb1e8>
   1c59c:	ldr	r3, [pc, #164]	; 1c648 <__assert_fail@plt+0xb234>
   1c5a0:	add	r8, r0, #1
   1c5a4:	cmp	r6, r3
   1c5a8:	str	r8, [r5]
   1c5ac:	beq	1c5b8 <__assert_fail@plt+0xb1a4>
   1c5b0:	mov	r0, r6
   1c5b4:	bl	16f1c <__assert_fail@plt+0x5b08>
   1c5b8:	mov	r0, r8
   1c5bc:	bl	1d488 <__assert_fail@plt+0xc074>
   1c5c0:	ldr	lr, [r4, #60]	; 0x3c
   1c5c4:	ldr	ip, [r4, #16]
   1c5c8:	mov	r3, sl
   1c5cc:	mov	r2, r9
   1c5d0:	mov	r1, r8
   1c5d4:	str	r0, [r5, #4]
   1c5d8:	ldr	r5, [r4, #56]	; 0x38
   1c5dc:	ldr	r4, [sp, #28]
   1c5e0:	str	fp, [sp, #8]
   1c5e4:	str	r4, [sp, #4]
   1c5e8:	str	lr, [sp, #16]
   1c5ec:	str	r5, [sp, #12]
   1c5f0:	str	ip, [sp]
   1c5f4:	mov	r6, r0
   1c5f8:	bl	18b08 <__assert_fail@plt+0x76f4>
   1c5fc:	ldr	r3, [sp, #24]
   1c600:	mov	r0, r6
   1c604:	str	r3, [r7]
   1c608:	add	sp, sp, #44	; 0x2c
   1c60c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c610:	mov	r3, #8
   1c614:	str	r3, [sp]
   1c618:	add	r1, sp, #36	; 0x24
   1c61c:	rsb	r2, r2, #1
   1c620:	mvn	r3, #-2147483648	; 0x80000000
   1c624:	mov	r0, #0
   1c628:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1c62c:	mov	r5, r0
   1c630:	ldm	r6, {r0, r1}
   1c634:	str	r5, [r4]
   1c638:	stm	r5, {r0, r1}
   1c63c:	b	1c524 <__assert_fail@plt+0xb110>
   1c640:	andeq	r2, r3, ip, ror #2
   1c644:	andeq	r2, r3, r4, lsl #3
   1c648:	andeq	r2, r3, r0, lsr #4
   1c64c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c650:	sub	sp, sp, #44	; 0x2c
   1c654:	mov	r5, r0
   1c658:	mov	sl, r1
   1c65c:	bl	112dc <__errno_location@plt>
   1c660:	ldr	r4, [pc, #396]	; 1c7f4 <__assert_fail@plt+0xb3e0>
   1c664:	cmn	r5, #-2147483647	; 0x80000001
   1c668:	ldr	r6, [r4]
   1c66c:	mov	r8, r0
   1c670:	movne	r0, #0
   1c674:	moveq	r0, #1
   1c678:	ldr	r3, [r8]
   1c67c:	orrs	r0, r0, r5, lsr #31
   1c680:	str	r3, [sp, #24]
   1c684:	bne	1c7f0 <__assert_fail@plt+0xb3dc>
   1c688:	ldr	r2, [r4, #4]
   1c68c:	cmp	r5, r2
   1c690:	blt	1c6f0 <__assert_fail@plt+0xb2dc>
   1c694:	add	r7, r4, #8
   1c698:	cmp	r6, r7
   1c69c:	str	r2, [sp, #36]	; 0x24
   1c6a0:	beq	1c7c0 <__assert_fail@plt+0xb3ac>
   1c6a4:	mov	r3, #8
   1c6a8:	sub	r2, r5, r2
   1c6ac:	mov	r0, r6
   1c6b0:	str	r3, [sp]
   1c6b4:	add	r2, r2, #1
   1c6b8:	mvn	r3, #-2147483648	; 0x80000000
   1c6bc:	add	r1, sp, #36	; 0x24
   1c6c0:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1c6c4:	mov	r6, r0
   1c6c8:	str	r0, [r4]
   1c6cc:	ldr	r0, [r4, #4]
   1c6d0:	ldr	r2, [sp, #36]	; 0x24
   1c6d4:	mov	r1, #0
   1c6d8:	sub	r2, r2, r0
   1c6dc:	add	r0, r6, r0, lsl #3
   1c6e0:	lsl	r2, r2, #3
   1c6e4:	bl	112f4 <memset@plt>
   1c6e8:	ldr	r3, [sp, #36]	; 0x24
   1c6ec:	str	r3, [r4, #4]
   1c6f0:	ldr	r2, [r4, #56]	; 0x38
   1c6f4:	add	fp, r6, r5, lsl #3
   1c6f8:	ldr	r1, [r4, #20]
   1c6fc:	ldr	r9, [r6, r5, lsl #3]
   1c700:	ldr	r7, [fp, #4]
   1c704:	ldr	r3, [r4, #16]
   1c708:	ldr	ip, [r4, #60]	; 0x3c
   1c70c:	str	r2, [sp, #12]
   1c710:	ldr	r2, [pc, #224]	; 1c7f8 <__assert_fail@plt+0xb3e4>
   1c714:	orr	r1, r1, #1
   1c718:	str	r1, [sp, #28]
   1c71c:	str	r1, [sp, #4]
   1c720:	str	r2, [sp, #8]
   1c724:	str	r3, [sp]
   1c728:	mov	r0, r7
   1c72c:	mov	r1, r9
   1c730:	str	ip, [sp, #16]
   1c734:	mvn	r3, #0
   1c738:	mov	r2, sl
   1c73c:	bl	18b08 <__assert_fail@plt+0x76f4>
   1c740:	cmp	r9, r0
   1c744:	bhi	1c7ac <__assert_fail@plt+0xb398>
   1c748:	ldr	r3, [pc, #172]	; 1c7fc <__assert_fail@plt+0xb3e8>
   1c74c:	add	r9, r0, #1
   1c750:	cmp	r7, r3
   1c754:	str	r9, [r6, r5, lsl #3]
   1c758:	beq	1c764 <__assert_fail@plt+0xb350>
   1c75c:	mov	r0, r7
   1c760:	bl	16f1c <__assert_fail@plt+0x5b08>
   1c764:	mov	r0, r9
   1c768:	bl	1d488 <__assert_fail@plt+0xc074>
   1c76c:	ldr	ip, [r4, #60]	; 0x3c
   1c770:	ldr	r3, [r4, #16]
   1c774:	ldr	lr, [r4, #56]	; 0x38
   1c778:	ldr	r4, [pc, #120]	; 1c7f8 <__assert_fail@plt+0xb3e4>
   1c77c:	mov	r2, sl
   1c780:	mov	r1, r9
   1c784:	str	r0, [fp, #4]
   1c788:	str	r4, [sp, #8]
   1c78c:	ldr	r4, [sp, #28]
   1c790:	str	r3, [sp]
   1c794:	str	r4, [sp, #4]
   1c798:	str	ip, [sp, #16]
   1c79c:	str	lr, [sp, #12]
   1c7a0:	mvn	r3, #0
   1c7a4:	mov	r7, r0
   1c7a8:	bl	18b08 <__assert_fail@plt+0x76f4>
   1c7ac:	ldr	r3, [sp, #24]
   1c7b0:	mov	r0, r7
   1c7b4:	str	r3, [r8]
   1c7b8:	add	sp, sp, #44	; 0x2c
   1c7bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c7c0:	mov	r3, #8
   1c7c4:	sub	r2, r5, r2
   1c7c8:	str	r3, [sp]
   1c7cc:	add	r1, sp, #36	; 0x24
   1c7d0:	add	r2, r2, #1
   1c7d4:	mvn	r3, #-2147483648	; 0x80000000
   1c7d8:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1c7dc:	mov	r6, r0
   1c7e0:	ldm	r7, {r0, r1}
   1c7e4:	str	r6, [r4]
   1c7e8:	stm	r6, {r0, r1}
   1c7ec:	b	1c6cc <__assert_fail@plt+0xb2b8>
   1c7f0:	bl	113f0 <abort@plt>
   1c7f4:	andeq	r2, r3, ip, ror #2
   1c7f8:	andeq	r2, r3, r4, lsl #3
   1c7fc:	andeq	r2, r3, r0, lsr #4
   1c800:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c804:	sub	sp, sp, #44	; 0x2c
   1c808:	mov	sl, r0
   1c80c:	bl	112dc <__errno_location@plt>
   1c810:	ldr	r4, [pc, #348]	; 1c974 <__assert_fail@plt+0xb560>
   1c814:	ldr	r2, [r4, #4]
   1c818:	ldr	r5, [r4]
   1c81c:	cmp	r2, #0
   1c820:	ldr	r3, [r0]
   1c824:	mov	r8, r0
   1c828:	str	r3, [sp, #28]
   1c82c:	bgt	1c888 <__assert_fail@plt+0xb474>
   1c830:	add	r6, r4, #8
   1c834:	cmp	r5, r6
   1c838:	str	r2, [sp, #36]	; 0x24
   1c83c:	beq	1c944 <__assert_fail@plt+0xb530>
   1c840:	mov	r3, #8
   1c844:	mov	r0, r5
   1c848:	str	r3, [sp]
   1c84c:	rsb	r2, r2, #1
   1c850:	mvn	r3, #-2147483648	; 0x80000000
   1c854:	add	r1, sp, #36	; 0x24
   1c858:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1c85c:	mov	r5, r0
   1c860:	str	r0, [r4]
   1c864:	ldr	r0, [r4, #4]
   1c868:	ldr	r2, [sp, #36]	; 0x24
   1c86c:	mov	r1, #0
   1c870:	sub	r2, r2, r0
   1c874:	add	r0, r5, r0, lsl #3
   1c878:	lsl	r2, r2, #3
   1c87c:	bl	112f4 <memset@plt>
   1c880:	ldr	r3, [sp, #36]	; 0x24
   1c884:	str	r3, [r4, #4]
   1c888:	ldr	r7, [r4, #20]
   1c88c:	ldr	r9, [r5]
   1c890:	ldr	r6, [r5, #4]
   1c894:	ldr	r2, [r4, #56]	; 0x38
   1c898:	ldr	r3, [r4, #16]
   1c89c:	ldr	ip, [r4, #60]	; 0x3c
   1c8a0:	ldr	fp, [pc, #208]	; 1c978 <__assert_fail@plt+0xb564>
   1c8a4:	orr	r7, r7, #1
   1c8a8:	str	r2, [sp, #12]
   1c8ac:	str	r3, [sp]
   1c8b0:	str	r7, [sp, #4]
   1c8b4:	mov	r1, r9
   1c8b8:	mov	r0, r6
   1c8bc:	str	ip, [sp, #16]
   1c8c0:	str	fp, [sp, #8]
   1c8c4:	mvn	r3, #0
   1c8c8:	mov	r2, sl
   1c8cc:	bl	18b08 <__assert_fail@plt+0x76f4>
   1c8d0:	cmp	r9, r0
   1c8d4:	bhi	1c930 <__assert_fail@plt+0xb51c>
   1c8d8:	ldr	r3, [pc, #156]	; 1c97c <__assert_fail@plt+0xb568>
   1c8dc:	add	r9, r0, #1
   1c8e0:	cmp	r6, r3
   1c8e4:	str	r9, [r5]
   1c8e8:	beq	1c8f4 <__assert_fail@plt+0xb4e0>
   1c8ec:	mov	r0, r6
   1c8f0:	bl	16f1c <__assert_fail@plt+0x5b08>
   1c8f4:	mov	r0, r9
   1c8f8:	bl	1d488 <__assert_fail@plt+0xc074>
   1c8fc:	ldr	ip, [r4, #60]	; 0x3c
   1c900:	ldr	r3, [r4, #16]
   1c904:	ldr	lr, [r4, #56]	; 0x38
   1c908:	mov	r2, sl
   1c90c:	mov	r1, r9
   1c910:	str	r0, [r5, #4]
   1c914:	str	r3, [sp]
   1c918:	stmib	sp, {r7, fp}
   1c91c:	str	ip, [sp, #16]
   1c920:	str	lr, [sp, #12]
   1c924:	mvn	r3, #0
   1c928:	mov	r6, r0
   1c92c:	bl	18b08 <__assert_fail@plt+0x76f4>
   1c930:	ldr	r3, [sp, #28]
   1c934:	mov	r0, r6
   1c938:	str	r3, [r8]
   1c93c:	add	sp, sp, #44	; 0x2c
   1c940:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c944:	mov	r3, #8
   1c948:	str	r3, [sp]
   1c94c:	add	r1, sp, #36	; 0x24
   1c950:	rsb	r2, r2, #1
   1c954:	mvn	r3, #-2147483648	; 0x80000000
   1c958:	mov	r0, #0
   1c95c:	bl	1d6a4 <__assert_fail@plt+0xc290>
   1c960:	mov	r5, r0
   1c964:	ldm	r6, {r0, r1}
   1c968:	str	r5, [r4]
   1c96c:	stm	r5, {r0, r1}
   1c970:	b	1c864 <__assert_fail@plt+0xb450>
   1c974:	andeq	r2, r3, ip, ror #2
   1c978:	andeq	r2, r3, r4, lsl #3
   1c97c:	andeq	r2, r3, r0, lsr #4
   1c980:	push	{r4, r5, r6, r7, r8, lr}
   1c984:	mov	r8, r0
   1c988:	ldr	r5, [pc, #84]	; 1c9e4 <__assert_fail@plt+0xb5d0>
   1c98c:	mov	r7, r1
   1c990:	mov	r4, r2
   1c994:	mov	r2, r4
   1c998:	mov	r1, r7
   1c99c:	mov	r0, r8
   1c9a0:	bl	110f0 <read@plt>
   1c9a4:	subs	r6, r0, #0
   1c9a8:	bge	1c9dc <__assert_fail@plt+0xb5c8>
   1c9ac:	bl	112dc <__errno_location@plt>
   1c9b0:	ldr	r3, [r0]
   1c9b4:	cmp	r3, #4
   1c9b8:	beq	1c994 <__assert_fail@plt+0xb580>
   1c9bc:	cmp	r4, r5
   1c9c0:	movls	r2, #0
   1c9c4:	movhi	r2, #1
   1c9c8:	cmp	r3, #22
   1c9cc:	movne	r2, #0
   1c9d0:	cmp	r2, #0
   1c9d4:	mov	r4, r5
   1c9d8:	bne	1c994 <__assert_fail@plt+0xb580>
   1c9dc:	mov	r0, r6
   1c9e0:	pop	{r4, r5, r6, r7, r8, pc}
   1c9e4:	svcvc	0x00f00000	; IMB
   1c9e8:	cmp	r0, #2
   1c9ec:	push	{r4, r5, r6, r7, r8, lr}
   1c9f0:	mov	r4, r0
   1c9f4:	bhi	1ca1c <__assert_fail@plt+0xb608>
   1c9f8:	bl	1f180 <__assert_fail@plt+0xdd6c>
   1c9fc:	mov	r7, r0
   1ca00:	bl	112dc <__errno_location@plt>
   1ca04:	mov	r5, r0
   1ca08:	mov	r0, r4
   1ca0c:	ldr	r6, [r5]
   1ca10:	mov	r4, r7
   1ca14:	bl	113fc <close@plt>
   1ca18:	str	r6, [r5]
   1ca1c:	mov	r0, r4
   1ca20:	pop	{r4, r5, r6, r7, r8, pc}
   1ca24:	push	{r4, r5, r6, lr}
   1ca28:	sub	sp, sp, #32
   1ca2c:	cmp	r1, #0
   1ca30:	mov	r4, r0
   1ca34:	ldr	r5, [sp, #48]	; 0x30
   1ca38:	ldr	r6, [sp, #52]	; 0x34
   1ca3c:	beq	1cd54 <__assert_fail@plt+0xb940>
   1ca40:	stm	sp, {r2, r3}
   1ca44:	mov	r3, r1
   1ca48:	ldr	r2, [pc, #808]	; 1cd78 <__assert_fail@plt+0xb964>
   1ca4c:	mov	r1, #1
   1ca50:	bl	11324 <__fprintf_chk@plt>
   1ca54:	mov	r2, #5
   1ca58:	ldr	r1, [pc, #796]	; 1cd7c <__assert_fail@plt+0xb968>
   1ca5c:	mov	r0, #0
   1ca60:	bl	11174 <dcgettext@plt>
   1ca64:	ldr	r3, [pc, #788]	; 1cd80 <__assert_fail@plt+0xb96c>
   1ca68:	ldr	r2, [pc, #788]	; 1cd84 <__assert_fail@plt+0xb970>
   1ca6c:	str	r3, [sp]
   1ca70:	mov	r1, #1
   1ca74:	mov	r3, r0
   1ca78:	mov	r0, r4
   1ca7c:	bl	11324 <__fprintf_chk@plt>
   1ca80:	mov	r1, r4
   1ca84:	mov	r0, #10
   1ca88:	bl	11168 <fputc_unlocked@plt>
   1ca8c:	mov	r2, #5
   1ca90:	ldr	r1, [pc, #752]	; 1cd88 <__assert_fail@plt+0xb974>
   1ca94:	mov	r0, #0
   1ca98:	bl	11174 <dcgettext@plt>
   1ca9c:	mov	r1, #1
   1caa0:	ldr	r3, [pc, #740]	; 1cd8c <__assert_fail@plt+0xb978>
   1caa4:	mov	r2, r0
   1caa8:	mov	r0, r4
   1caac:	bl	11324 <__fprintf_chk@plt>
   1cab0:	mov	r1, r4
   1cab4:	mov	r0, #10
   1cab8:	bl	11168 <fputc_unlocked@plt>
   1cabc:	cmp	r6, #9
   1cac0:	ldrls	pc, [pc, r6, lsl #2]
   1cac4:	b	1cd6c <__assert_fail@plt+0xb958>
   1cac8:	andeq	ip, r1, ip, asr #22
   1cacc:	andeq	ip, r1, r4, asr fp
   1cad0:	andeq	ip, r1, r0, lsl #23
   1cad4:			; <UNDEFINED> instruction: 0x0001cbb4
   1cad8:	strdeq	ip, [r1], -r0
   1cadc:	andeq	ip, r1, ip, lsr #24
   1cae0:	andeq	ip, r1, r8, ror #24
   1cae4:	andeq	ip, r1, ip, lsr #25
   1cae8:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1caec:	strdeq	ip, [r1], -r0
   1caf0:	ldr	r1, [pc, #664]	; 1cd90 <__assert_fail@plt+0xb97c>
   1caf4:	mov	r2, #5
   1caf8:	mov	r0, #0
   1cafc:	bl	11174 <dcgettext@plt>
   1cb00:	ldr	ip, [r5, #32]
   1cb04:	ldr	r1, [r5, #28]
   1cb08:	ldr	r2, [r5, #24]
   1cb0c:	ldr	r3, [r5]
   1cb10:	ldr	r6, [r5, #20]
   1cb14:	str	ip, [sp, #28]
   1cb18:	ldr	lr, [r5, #16]
   1cb1c:	str	r1, [sp, #24]
   1cb20:	ldr	ip, [r5, #12]
   1cb24:	str	r2, [sp, #20]
   1cb28:	ldr	r1, [r5, #8]
   1cb2c:	ldr	r2, [r5, #4]
   1cb30:	str	r6, [sp, #16]
   1cb34:	stmib	sp, {r1, ip, lr}
   1cb38:	mov	r1, #1
   1cb3c:	str	r2, [sp]
   1cb40:	mov	r2, r0
   1cb44:	mov	r0, r4
   1cb48:	bl	11324 <__fprintf_chk@plt>
   1cb4c:	add	sp, sp, #32
   1cb50:	pop	{r4, r5, r6, pc}
   1cb54:	mov	r2, #5
   1cb58:	ldr	r1, [pc, #564]	; 1cd94 <__assert_fail@plt+0xb980>
   1cb5c:	mov	r0, #0
   1cb60:	bl	11174 <dcgettext@plt>
   1cb64:	ldr	r3, [r5]
   1cb68:	mov	r1, #1
   1cb6c:	mov	r2, r0
   1cb70:	mov	r0, r4
   1cb74:	add	sp, sp, #32
   1cb78:	pop	{r4, r5, r6, lr}
   1cb7c:	b	11324 <__fprintf_chk@plt>
   1cb80:	mov	r2, #5
   1cb84:	ldr	r1, [pc, #524]	; 1cd98 <__assert_fail@plt+0xb984>
   1cb88:	mov	r0, #0
   1cb8c:	bl	11174 <dcgettext@plt>
   1cb90:	ldr	r2, [r5, #4]
   1cb94:	ldr	r3, [r5]
   1cb98:	mov	r1, #1
   1cb9c:	str	r2, [sp, #48]	; 0x30
   1cba0:	mov	r2, r0
   1cba4:	mov	r0, r4
   1cba8:	add	sp, sp, #32
   1cbac:	pop	{r4, r5, r6, lr}
   1cbb0:	b	11324 <__fprintf_chk@plt>
   1cbb4:	mov	r2, #5
   1cbb8:	ldr	r1, [pc, #476]	; 1cd9c <__assert_fail@plt+0xb988>
   1cbbc:	mov	r0, #0
   1cbc0:	bl	11174 <dcgettext@plt>
   1cbc4:	ldr	r1, [r5, #8]
   1cbc8:	ldr	r2, [r5, #4]
   1cbcc:	ldr	r3, [r5]
   1cbd0:	str	r1, [sp, #52]	; 0x34
   1cbd4:	str	r2, [sp, #48]	; 0x30
   1cbd8:	mov	r1, #1
   1cbdc:	mov	r2, r0
   1cbe0:	mov	r0, r4
   1cbe4:	add	sp, sp, #32
   1cbe8:	pop	{r4, r5, r6, lr}
   1cbec:	b	11324 <__fprintf_chk@plt>
   1cbf0:	mov	r2, #5
   1cbf4:	ldr	r1, [pc, #420]	; 1cda0 <__assert_fail@plt+0xb98c>
   1cbf8:	mov	r0, #0
   1cbfc:	bl	11174 <dcgettext@plt>
   1cc00:	ldr	r1, [r5, #8]
   1cc04:	ldr	ip, [r5, #12]
   1cc08:	ldr	r2, [r5, #4]
   1cc0c:	ldr	r3, [r5]
   1cc10:	stmib	sp, {r1, ip}
   1cc14:	str	r2, [sp]
   1cc18:	mov	r1, #1
   1cc1c:	mov	r2, r0
   1cc20:	mov	r0, r4
   1cc24:	bl	11324 <__fprintf_chk@plt>
   1cc28:	b	1cb4c <__assert_fail@plt+0xb738>
   1cc2c:	mov	r2, #5
   1cc30:	ldr	r1, [pc, #364]	; 1cda4 <__assert_fail@plt+0xb990>
   1cc34:	mov	r0, #0
   1cc38:	bl	11174 <dcgettext@plt>
   1cc3c:	add	r1, r5, #8
   1cc40:	ldr	r2, [r5, #4]
   1cc44:	ldm	r1, {r1, ip, lr}
   1cc48:	ldr	r3, [r5]
   1cc4c:	str	r2, [sp]
   1cc50:	stmib	sp, {r1, ip, lr}
   1cc54:	mov	r1, #1
   1cc58:	mov	r2, r0
   1cc5c:	mov	r0, r4
   1cc60:	bl	11324 <__fprintf_chk@plt>
   1cc64:	b	1cb4c <__assert_fail@plt+0xb738>
   1cc68:	mov	r2, #5
   1cc6c:	ldr	r1, [pc, #308]	; 1cda8 <__assert_fail@plt+0xb994>
   1cc70:	mov	r0, #0
   1cc74:	bl	11174 <dcgettext@plt>
   1cc78:	add	r1, r5, #8
   1cc7c:	ldr	r2, [r5, #4]
   1cc80:	ldm	r1, {r1, ip, lr}
   1cc84:	ldr	r6, [r5, #20]
   1cc88:	ldr	r3, [r5]
   1cc8c:	stmib	sp, {r1, ip, lr}
   1cc90:	mov	r1, #1
   1cc94:	str	r2, [sp]
   1cc98:	str	r6, [sp, #16]
   1cc9c:	mov	r2, r0
   1cca0:	mov	r0, r4
   1cca4:	bl	11324 <__fprintf_chk@plt>
   1cca8:	b	1cb4c <__assert_fail@plt+0xb738>
   1ccac:	mov	r2, #5
   1ccb0:	ldr	r1, [pc, #244]	; 1cdac <__assert_fail@plt+0xb998>
   1ccb4:	mov	r0, #0
   1ccb8:	bl	11174 <dcgettext@plt>
   1ccbc:	ldr	r2, [r5, #24]
   1ccc0:	ldr	r3, [r5]
   1ccc4:	ldr	r6, [r5, #20]
   1ccc8:	ldr	lr, [r5, #16]
   1cccc:	ldr	ip, [r5, #12]
   1ccd0:	str	r2, [sp, #20]
   1ccd4:	ldr	r1, [r5, #8]
   1ccd8:	ldr	r2, [r5, #4]
   1ccdc:	str	r6, [sp, #16]
   1cce0:	stmib	sp, {r1, ip, lr}
   1cce4:	mov	r1, #1
   1cce8:	str	r2, [sp]
   1ccec:	mov	r2, r0
   1ccf0:	mov	r0, r4
   1ccf4:	bl	11324 <__fprintf_chk@plt>
   1ccf8:	b	1cb4c <__assert_fail@plt+0xb738>
   1ccfc:	mov	r2, #5
   1cd00:	ldr	r1, [pc, #168]	; 1cdb0 <__assert_fail@plt+0xb99c>
   1cd04:	mov	r0, #0
   1cd08:	bl	11174 <dcgettext@plt>
   1cd0c:	ldr	r1, [r5, #28]
   1cd10:	ldr	r2, [r5, #24]
   1cd14:	ldr	r3, [r5]
   1cd18:	ldr	r6, [r5, #20]
   1cd1c:	ldr	lr, [r5, #16]
   1cd20:	str	r1, [sp, #24]
   1cd24:	ldr	ip, [r5, #12]
   1cd28:	str	r2, [sp, #20]
   1cd2c:	ldr	r1, [r5, #8]
   1cd30:	ldr	r2, [r5, #4]
   1cd34:	str	r6, [sp, #16]
   1cd38:	stmib	sp, {r1, ip, lr}
   1cd3c:	mov	r1, #1
   1cd40:	str	r2, [sp]
   1cd44:	mov	r2, r0
   1cd48:	mov	r0, r4
   1cd4c:	bl	11324 <__fprintf_chk@plt>
   1cd50:	b	1cb4c <__assert_fail@plt+0xb738>
   1cd54:	str	r3, [sp]
   1cd58:	mov	r1, #1
   1cd5c:	mov	r3, r2
   1cd60:	ldr	r2, [pc, #76]	; 1cdb4 <__assert_fail@plt+0xb9a0>
   1cd64:	bl	11324 <__fprintf_chk@plt>
   1cd68:	b	1ca54 <__assert_fail@plt+0xb640>
   1cd6c:	mov	r2, #5
   1cd70:	ldr	r1, [pc, #64]	; 1cdb8 <__assert_fail@plt+0xb9a4>
   1cd74:	b	1caf8 <__assert_fail@plt+0xb6e4>
   1cd78:	andeq	r1, r2, ip, lsr #32
   1cd7c:	andeq	r1, r2, r0, asr #32
   1cd80:	andeq	r0, r0, r6, ror #15
   1cd84:	andeq	r1, r2, r8, lsl r3
   1cd88:	andeq	r1, r2, r4, asr #32
   1cd8c:	strdeq	r1, [r2], -r0
   1cd90:	andeq	r1, r2, r0, lsr #4
   1cd94:	andeq	r1, r2, r4, lsl r1
   1cd98:	andeq	r1, r2, r4, lsr #2
   1cd9c:	andeq	r1, r2, ip, lsr r1
   1cda0:	andeq	r1, r2, r8, asr r1
   1cda4:	andeq	r1, r2, r8, ror r1
   1cda8:	muleq	r2, ip, r1
   1cdac:	andeq	r1, r2, r4, asr #3
   1cdb0:	strdeq	r1, [r2], -r0
   1cdb4:	andeq	r1, r2, r8, lsr r0
   1cdb8:	andeq	r1, r2, r4, asr r2
   1cdbc:	push	{r4, r5, lr}
   1cdc0:	sub	sp, sp, #12
   1cdc4:	ldr	r5, [sp, #24]
   1cdc8:	ldr	ip, [r5]
   1cdcc:	cmp	ip, #0
   1cdd0:	beq	1cdec <__assert_fail@plt+0xb9d8>
   1cdd4:	mov	lr, r5
   1cdd8:	mov	ip, #0
   1cddc:	ldr	r4, [lr, #4]!
   1cde0:	add	ip, ip, #1
   1cde4:	cmp	r4, #0
   1cde8:	bne	1cddc <__assert_fail@plt+0xb9c8>
   1cdec:	stm	sp, {r5, ip}
   1cdf0:	bl	1ca24 <__assert_fail@plt+0xb610>
   1cdf4:	add	sp, sp, #12
   1cdf8:	pop	{r4, r5, pc}
   1cdfc:	push	{r4, r5, lr}
   1ce00:	sub	sp, sp, #76	; 0x4c
   1ce04:	mov	r5, r0
   1ce08:	ldr	ip, [sp, #88]	; 0x58
   1ce0c:	ldr	r0, [ip]
   1ce10:	cmp	r0, #0
   1ce14:	str	r0, [sp, #32]
   1ce18:	beq	1d1ec <__assert_fail@plt+0xbdd8>
   1ce1c:	ldr	r0, [ip, #4]
   1ce20:	cmp	r0, #0
   1ce24:	str	r0, [sp, #36]	; 0x24
   1ce28:	beq	1d1f4 <__assert_fail@plt+0xbde0>
   1ce2c:	ldr	r0, [ip, #8]
   1ce30:	cmp	r0, #0
   1ce34:	str	r0, [sp, #40]	; 0x28
   1ce38:	beq	1d1fc <__assert_fail@plt+0xbde8>
   1ce3c:	ldr	r0, [ip, #12]
   1ce40:	cmp	r0, #0
   1ce44:	str	r0, [sp, #44]	; 0x2c
   1ce48:	beq	1d204 <__assert_fail@plt+0xbdf0>
   1ce4c:	ldr	r0, [ip, #16]
   1ce50:	cmp	r0, #0
   1ce54:	str	r0, [sp, #48]	; 0x30
   1ce58:	beq	1d20c <__assert_fail@plt+0xbdf8>
   1ce5c:	ldr	r0, [ip, #20]
   1ce60:	cmp	r0, #0
   1ce64:	str	r0, [sp, #52]	; 0x34
   1ce68:	beq	1d214 <__assert_fail@plt+0xbe00>
   1ce6c:	ldr	r0, [ip, #24]
   1ce70:	cmp	r0, #0
   1ce74:	str	r0, [sp, #56]	; 0x38
   1ce78:	beq	1d21c <__assert_fail@plt+0xbe08>
   1ce7c:	ldr	r0, [ip, #28]
   1ce80:	cmp	r0, #0
   1ce84:	str	r0, [sp, #60]	; 0x3c
   1ce88:	beq	1d224 <__assert_fail@plt+0xbe10>
   1ce8c:	ldr	r0, [ip, #32]
   1ce90:	cmp	r0, #0
   1ce94:	str	r0, [sp, #64]	; 0x40
   1ce98:	beq	1d22c <__assert_fail@plt+0xbe18>
   1ce9c:	ldr	r0, [ip, #36]	; 0x24
   1cea0:	cmp	r0, #0
   1cea4:	movne	r4, #10
   1cea8:	moveq	r4, #9
   1ceac:	cmp	r1, #0
   1ceb0:	beq	1d1c4 <__assert_fail@plt+0xbdb0>
   1ceb4:	stm	sp, {r2, r3}
   1ceb8:	mov	r0, r5
   1cebc:	mov	r3, r1
   1cec0:	ldr	r2, [pc, #876]	; 1d234 <__assert_fail@plt+0xbe20>
   1cec4:	mov	r1, #1
   1cec8:	bl	11324 <__fprintf_chk@plt>
   1cecc:	mov	r2, #5
   1ced0:	ldr	r1, [pc, #864]	; 1d238 <__assert_fail@plt+0xbe24>
   1ced4:	mov	r0, #0
   1ced8:	bl	11174 <dcgettext@plt>
   1cedc:	ldr	r3, [pc, #856]	; 1d23c <__assert_fail@plt+0xbe28>
   1cee0:	ldr	r2, [pc, #856]	; 1d240 <__assert_fail@plt+0xbe2c>
   1cee4:	str	r3, [sp]
   1cee8:	mov	r1, #1
   1ceec:	mov	r3, r0
   1cef0:	mov	r0, r5
   1cef4:	bl	11324 <__fprintf_chk@plt>
   1cef8:	mov	r1, r5
   1cefc:	mov	r0, #10
   1cf00:	bl	11168 <fputc_unlocked@plt>
   1cf04:	mov	r2, #5
   1cf08:	ldr	r1, [pc, #820]	; 1d244 <__assert_fail@plt+0xbe30>
   1cf0c:	mov	r0, #0
   1cf10:	bl	11174 <dcgettext@plt>
   1cf14:	mov	r1, #1
   1cf18:	ldr	r3, [pc, #808]	; 1d248 <__assert_fail@plt+0xbe34>
   1cf1c:	mov	r2, r0
   1cf20:	mov	r0, r5
   1cf24:	bl	11324 <__fprintf_chk@plt>
   1cf28:	mov	r1, r5
   1cf2c:	mov	r0, #10
   1cf30:	bl	11168 <fputc_unlocked@plt>
   1cf34:	cmp	r4, #9
   1cf38:	ldrls	pc, [pc, r4, lsl #2]
   1cf3c:	b	1d1e0 <__assert_fail@plt+0xbdcc>
   1cf40:	andeq	ip, r1, r4, asr #31
   1cf44:	andeq	ip, r1, ip, asr #31
   1cf48:	strdeq	ip, [r1], -r8
   1cf4c:	andeq	sp, r1, ip, lsr #32
   1cf50:	andeq	sp, r1, r4, rrx
   1cf54:	andeq	sp, r1, r0, lsr #1
   1cf58:	ldrdeq	sp, [r1], -ip
   1cf5c:	andeq	sp, r1, r0, lsr #2
   1cf60:	andeq	sp, r1, ip, ror #2
   1cf64:	andeq	ip, r1, r8, ror #30
   1cf68:	ldr	r1, [pc, #732]	; 1d24c <__assert_fail@plt+0xbe38>
   1cf6c:	mov	r2, #5
   1cf70:	mov	r0, #0
   1cf74:	bl	11174 <dcgettext@plt>
   1cf78:	ldr	ip, [sp, #64]	; 0x40
   1cf7c:	ldr	r1, [sp, #60]	; 0x3c
   1cf80:	ldr	r2, [sp, #56]	; 0x38
   1cf84:	ldr	lr, [sp, #48]	; 0x30
   1cf88:	str	ip, [sp, #28]
   1cf8c:	str	r1, [sp, #24]
   1cf90:	ldr	ip, [sp, #44]	; 0x2c
   1cf94:	ldr	r1, [sp, #40]	; 0x28
   1cf98:	ldr	r4, [sp, #52]	; 0x34
   1cf9c:	str	r2, [sp, #20]
   1cfa0:	ldr	r2, [sp, #36]	; 0x24
   1cfa4:	stmib	sp, {r1, ip, lr}
   1cfa8:	mov	r1, #1
   1cfac:	str	r2, [sp]
   1cfb0:	ldr	r3, [sp, #32]
   1cfb4:	str	r4, [sp, #16]
   1cfb8:	mov	r2, r0
   1cfbc:	mov	r0, r5
   1cfc0:	bl	11324 <__fprintf_chk@plt>
   1cfc4:	add	sp, sp, #76	; 0x4c
   1cfc8:	pop	{r4, r5, pc}
   1cfcc:	mov	r2, #5
   1cfd0:	ldr	r1, [pc, #632]	; 1d250 <__assert_fail@plt+0xbe3c>
   1cfd4:	mov	r0, #0
   1cfd8:	bl	11174 <dcgettext@plt>
   1cfdc:	ldr	r3, [sp, #32]
   1cfe0:	mov	r1, #1
   1cfe4:	mov	r2, r0
   1cfe8:	mov	r0, r5
   1cfec:	add	sp, sp, #76	; 0x4c
   1cff0:	pop	{r4, r5, lr}
   1cff4:	b	11324 <__fprintf_chk@plt>
   1cff8:	mov	r2, #5
   1cffc:	ldr	r1, [pc, #592]	; 1d254 <__assert_fail@plt+0xbe40>
   1d000:	mov	r0, #0
   1d004:	bl	11174 <dcgettext@plt>
   1d008:	ldr	r2, [sp, #36]	; 0x24
   1d00c:	ldr	r3, [sp, #32]
   1d010:	str	r2, [sp, #88]	; 0x58
   1d014:	mov	r1, #1
   1d018:	mov	r2, r0
   1d01c:	mov	r0, r5
   1d020:	add	sp, sp, #76	; 0x4c
   1d024:	pop	{r4, r5, lr}
   1d028:	b	11324 <__fprintf_chk@plt>
   1d02c:	mov	r2, #5
   1d030:	ldr	r1, [pc, #544]	; 1d258 <__assert_fail@plt+0xbe44>
   1d034:	mov	r0, #0
   1d038:	bl	11174 <dcgettext@plt>
   1d03c:	ldr	r1, [sp, #40]	; 0x28
   1d040:	ldr	r2, [sp, #36]	; 0x24
   1d044:	str	r1, [sp, #4]
   1d048:	str	r2, [sp]
   1d04c:	ldr	r3, [sp, #32]
   1d050:	mov	r1, #1
   1d054:	mov	r2, r0
   1d058:	mov	r0, r5
   1d05c:	bl	11324 <__fprintf_chk@plt>
   1d060:	b	1cfc4 <__assert_fail@plt+0xbbb0>
   1d064:	mov	r2, #5
   1d068:	ldr	r1, [pc, #492]	; 1d25c <__assert_fail@plt+0xbe48>
   1d06c:	mov	r0, #0
   1d070:	bl	11174 <dcgettext@plt>
   1d074:	ldr	r1, [sp, #40]	; 0x28
   1d078:	ldr	ip, [sp, #44]	; 0x2c
   1d07c:	ldr	r2, [sp, #36]	; 0x24
   1d080:	ldr	r3, [sp, #32]
   1d084:	stmib	sp, {r1, ip}
   1d088:	str	r2, [sp]
   1d08c:	mov	r1, #1
   1d090:	mov	r2, r0
   1d094:	mov	r0, r5
   1d098:	bl	11324 <__fprintf_chk@plt>
   1d09c:	b	1cfc4 <__assert_fail@plt+0xbbb0>
   1d0a0:	mov	r2, #5
   1d0a4:	ldr	r1, [pc, #436]	; 1d260 <__assert_fail@plt+0xbe4c>
   1d0a8:	mov	r0, #0
   1d0ac:	bl	11174 <dcgettext@plt>
   1d0b0:	add	r1, sp, #40	; 0x28
   1d0b4:	ldr	r2, [sp, #36]	; 0x24
   1d0b8:	ldm	r1, {r1, ip, lr}
   1d0bc:	ldr	r3, [sp, #32]
   1d0c0:	str	r2, [sp]
   1d0c4:	stmib	sp, {r1, ip, lr}
   1d0c8:	mov	r1, #1
   1d0cc:	mov	r2, r0
   1d0d0:	mov	r0, r5
   1d0d4:	bl	11324 <__fprintf_chk@plt>
   1d0d8:	b	1cfc4 <__assert_fail@plt+0xbbb0>
   1d0dc:	mov	r2, #5
   1d0e0:	ldr	r1, [pc, #380]	; 1d264 <__assert_fail@plt+0xbe50>
   1d0e4:	mov	r0, #0
   1d0e8:	bl	11174 <dcgettext@plt>
   1d0ec:	add	r1, sp, #40	; 0x28
   1d0f0:	ldr	r2, [sp, #36]	; 0x24
   1d0f4:	ldm	r1, {r1, ip, lr}
   1d0f8:	ldr	r4, [sp, #52]	; 0x34
   1d0fc:	str	r2, [sp]
   1d100:	stmib	sp, {r1, ip, lr}
   1d104:	mov	r1, #1
   1d108:	ldr	r3, [sp, #32]
   1d10c:	str	r4, [sp, #16]
   1d110:	mov	r2, r0
   1d114:	mov	r0, r5
   1d118:	bl	11324 <__fprintf_chk@plt>
   1d11c:	b	1cfc4 <__assert_fail@plt+0xbbb0>
   1d120:	mov	r2, #5
   1d124:	ldr	r1, [pc, #316]	; 1d268 <__assert_fail@plt+0xbe54>
   1d128:	mov	r0, #0
   1d12c:	bl	11174 <dcgettext@plt>
   1d130:	add	r1, sp, #40	; 0x28
   1d134:	ldr	r2, [sp, #56]	; 0x38
   1d138:	ldm	r1, {r1, ip, lr}
   1d13c:	ldr	r4, [sp, #52]	; 0x34
   1d140:	str	r2, [sp, #20]
   1d144:	ldr	r2, [sp, #36]	; 0x24
   1d148:	stmib	sp, {r1, ip, lr}
   1d14c:	mov	r1, #1
   1d150:	str	r2, [sp]
   1d154:	ldr	r3, [sp, #32]
   1d158:	str	r4, [sp, #16]
   1d15c:	mov	r2, r0
   1d160:	mov	r0, r5
   1d164:	bl	11324 <__fprintf_chk@plt>
   1d168:	b	1cfc4 <__assert_fail@plt+0xbbb0>
   1d16c:	mov	r2, #5
   1d170:	ldr	r1, [pc, #244]	; 1d26c <__assert_fail@plt+0xbe58>
   1d174:	mov	r0, #0
   1d178:	bl	11174 <dcgettext@plt>
   1d17c:	ldr	r1, [sp, #60]	; 0x3c
   1d180:	ldr	r2, [sp, #56]	; 0x38
   1d184:	ldr	lr, [sp, #48]	; 0x30
   1d188:	ldr	ip, [sp, #44]	; 0x2c
   1d18c:	str	r1, [sp, #24]
   1d190:	ldr	r1, [sp, #40]	; 0x28
   1d194:	ldr	r4, [sp, #52]	; 0x34
   1d198:	str	r2, [sp, #20]
   1d19c:	ldr	r2, [sp, #36]	; 0x24
   1d1a0:	stmib	sp, {r1, ip, lr}
   1d1a4:	mov	r1, #1
   1d1a8:	str	r2, [sp]
   1d1ac:	ldr	r3, [sp, #32]
   1d1b0:	str	r4, [sp, #16]
   1d1b4:	mov	r2, r0
   1d1b8:	mov	r0, r5
   1d1bc:	bl	11324 <__fprintf_chk@plt>
   1d1c0:	b	1cfc4 <__assert_fail@plt+0xbbb0>
   1d1c4:	str	r3, [sp]
   1d1c8:	mov	r1, #1
   1d1cc:	mov	r3, r2
   1d1d0:	mov	r0, r5
   1d1d4:	ldr	r2, [pc, #148]	; 1d270 <__assert_fail@plt+0xbe5c>
   1d1d8:	bl	11324 <__fprintf_chk@plt>
   1d1dc:	b	1cecc <__assert_fail@plt+0xbab8>
   1d1e0:	mov	r2, #5
   1d1e4:	ldr	r1, [pc, #136]	; 1d274 <__assert_fail@plt+0xbe60>
   1d1e8:	b	1cf70 <__assert_fail@plt+0xbb5c>
   1d1ec:	mov	r4, r0
   1d1f0:	b	1ceac <__assert_fail@plt+0xba98>
   1d1f4:	mov	r4, #1
   1d1f8:	b	1ceac <__assert_fail@plt+0xba98>
   1d1fc:	mov	r4, #2
   1d200:	b	1ceac <__assert_fail@plt+0xba98>
   1d204:	mov	r4, #3
   1d208:	b	1ceac <__assert_fail@plt+0xba98>
   1d20c:	mov	r4, #4
   1d210:	b	1ceac <__assert_fail@plt+0xba98>
   1d214:	mov	r4, #5
   1d218:	b	1ceac <__assert_fail@plt+0xba98>
   1d21c:	mov	r4, #6
   1d220:	b	1ceac <__assert_fail@plt+0xba98>
   1d224:	mov	r4, #7
   1d228:	b	1ceac <__assert_fail@plt+0xba98>
   1d22c:	mov	r4, #8
   1d230:	b	1ceac <__assert_fail@plt+0xba98>
   1d234:	andeq	r1, r2, ip, lsr #32
   1d238:	andeq	r1, r2, r0, asr #32
   1d23c:	andeq	r0, r0, r6, ror #15
   1d240:	andeq	r1, r2, r8, lsl r3
   1d244:	andeq	r1, r2, r4, asr #32
   1d248:	strdeq	r1, [r2], -r0
   1d24c:	andeq	r1, r2, r0, lsr #4
   1d250:	andeq	r1, r2, r4, lsl r1
   1d254:	andeq	r1, r2, r4, lsr #2
   1d258:	andeq	r1, r2, ip, lsr r1
   1d25c:	andeq	r1, r2, r8, asr r1
   1d260:	andeq	r1, r2, r8, ror r1
   1d264:	muleq	r2, ip, r1
   1d268:	andeq	r1, r2, r4, asr #3
   1d26c:	strdeq	r1, [r2], -r0
   1d270:	andeq	r1, r2, r8, lsr r0
   1d274:	andeq	r1, r2, r4, asr r2
   1d278:	push	{r3}		; (str r3, [sp, #-4]!)
   1d27c:	push	{lr}		; (str lr, [sp, #-4]!)
   1d280:	sub	sp, sp, #56	; 0x38
   1d284:	add	r3, sp, #64	; 0x40
   1d288:	ldr	ip, [sp, #64]	; 0x40
   1d28c:	str	r3, [sp, #12]
   1d290:	cmp	ip, #0
   1d294:	str	ip, [sp, #16]
   1d298:	beq	1d330 <__assert_fail@plt+0xbf1c>
   1d29c:	ldr	ip, [sp, #68]	; 0x44
   1d2a0:	cmp	ip, #0
   1d2a4:	str	ip, [sp, #20]
   1d2a8:	beq	1d350 <__assert_fail@plt+0xbf3c>
   1d2ac:	ldr	ip, [sp, #72]	; 0x48
   1d2b0:	cmp	ip, #0
   1d2b4:	str	ip, [sp, #24]
   1d2b8:	beq	1d358 <__assert_fail@plt+0xbf44>
   1d2bc:	ldr	ip, [sp, #76]	; 0x4c
   1d2c0:	cmp	ip, #0
   1d2c4:	str	ip, [sp, #28]
   1d2c8:	beq	1d360 <__assert_fail@plt+0xbf4c>
   1d2cc:	ldr	ip, [sp, #80]	; 0x50
   1d2d0:	cmp	ip, #0
   1d2d4:	str	ip, [sp, #32]
   1d2d8:	beq	1d368 <__assert_fail@plt+0xbf54>
   1d2dc:	ldr	ip, [sp, #84]	; 0x54
   1d2e0:	cmp	ip, #0
   1d2e4:	str	ip, [sp, #36]	; 0x24
   1d2e8:	beq	1d370 <__assert_fail@plt+0xbf5c>
   1d2ec:	ldr	ip, [sp, #88]	; 0x58
   1d2f0:	cmp	ip, #0
   1d2f4:	str	ip, [sp, #40]	; 0x28
   1d2f8:	beq	1d378 <__assert_fail@plt+0xbf64>
   1d2fc:	ldr	ip, [sp, #92]	; 0x5c
   1d300:	cmp	ip, #0
   1d304:	str	ip, [sp, #44]	; 0x2c
   1d308:	beq	1d380 <__assert_fail@plt+0xbf6c>
   1d30c:	ldr	ip, [sp, #96]	; 0x60
   1d310:	cmp	ip, #0
   1d314:	str	ip, [sp, #48]	; 0x30
   1d318:	beq	1d388 <__assert_fail@plt+0xbf74>
   1d31c:	ldr	ip, [sp, #100]	; 0x64
   1d320:	cmp	ip, #0
   1d324:	str	ip, [sp, #52]	; 0x34
   1d328:	movne	ip, #10
   1d32c:	moveq	ip, #9
   1d330:	add	r3, sp, #16
   1d334:	stm	sp, {r3, ip}
   1d338:	ldr	r3, [sp, #60]	; 0x3c
   1d33c:	bl	1ca24 <__assert_fail@plt+0xb610>
   1d340:	add	sp, sp, #56	; 0x38
   1d344:	pop	{lr}		; (ldr lr, [sp], #4)
   1d348:	add	sp, sp, #4
   1d34c:	bx	lr
   1d350:	mov	ip, #1
   1d354:	b	1d330 <__assert_fail@plt+0xbf1c>
   1d358:	mov	ip, #2
   1d35c:	b	1d330 <__assert_fail@plt+0xbf1c>
   1d360:	mov	ip, #3
   1d364:	b	1d330 <__assert_fail@plt+0xbf1c>
   1d368:	mov	ip, #4
   1d36c:	b	1d330 <__assert_fail@plt+0xbf1c>
   1d370:	mov	ip, #5
   1d374:	b	1d330 <__assert_fail@plt+0xbf1c>
   1d378:	mov	ip, #6
   1d37c:	b	1d330 <__assert_fail@plt+0xbf1c>
   1d380:	mov	ip, #7
   1d384:	b	1d330 <__assert_fail@plt+0xbf1c>
   1d388:	mov	ip, #8
   1d38c:	b	1d330 <__assert_fail@plt+0xbf1c>
   1d390:	ldr	r3, [pc, #116]	; 1d40c <__assert_fail@plt+0xbff8>
   1d394:	push	{r4, lr}
   1d398:	mov	r0, #10
   1d39c:	ldr	r1, [r3]
   1d3a0:	bl	11168 <fputc_unlocked@plt>
   1d3a4:	mov	r2, #5
   1d3a8:	ldr	r1, [pc, #96]	; 1d410 <__assert_fail@plt+0xbffc>
   1d3ac:	mov	r0, #0
   1d3b0:	bl	11174 <dcgettext@plt>
   1d3b4:	ldr	r2, [pc, #88]	; 1d414 <__assert_fail@plt+0xc000>
   1d3b8:	mov	r1, r0
   1d3bc:	mov	r0, #1
   1d3c0:	bl	11300 <__printf_chk@plt>
   1d3c4:	mov	r2, #5
   1d3c8:	ldr	r1, [pc, #72]	; 1d418 <__assert_fail@plt+0xc004>
   1d3cc:	mov	r0, #0
   1d3d0:	bl	11174 <dcgettext@plt>
   1d3d4:	ldr	r3, [pc, #64]	; 1d41c <__assert_fail@plt+0xc008>
   1d3d8:	ldr	r2, [pc, #64]	; 1d420 <__assert_fail@plt+0xc00c>
   1d3dc:	mov	r1, r0
   1d3e0:	mov	r0, #1
   1d3e4:	bl	11300 <__printf_chk@plt>
   1d3e8:	mov	r2, #5
   1d3ec:	ldr	r1, [pc, #48]	; 1d424 <__assert_fail@plt+0xc010>
   1d3f0:	mov	r0, #0
   1d3f4:	bl	11174 <dcgettext@plt>
   1d3f8:	ldr	r2, [pc, #40]	; 1d428 <__assert_fail@plt+0xc014>
   1d3fc:	pop	{r4, lr}
   1d400:	mov	r1, r0
   1d404:	mov	r0, #1
   1d408:	b	11300 <__printf_chk@plt>
   1d40c:	andeq	r2, r3, r4, asr #3
   1d410:	muleq	r2, r0, r2
   1d414:	andeq	r1, r2, r4, lsr #5
   1d418:			; <UNDEFINED> instruction: 0x000212bc
   1d41c:	andeq	r0, r2, r8, lsl #15
   1d420:			; <UNDEFINED> instruction: 0x000207b0
   1d424:	ldrdeq	r1, [r2], -r0
   1d428:	strdeq	r1, [r2], -r8
   1d42c:	push	{r4, r5, r6, lr}
   1d430:	mov	r6, r0
   1d434:	mov	r5, r1
   1d438:	mov	r4, r2
   1d43c:	bl	1f134 <__assert_fail@plt+0xdd20>
   1d440:	cmp	r0, #0
   1d444:	popne	{r4, r5, r6, pc}
   1d448:	cmp	r6, #0
   1d44c:	beq	1d45c <__assert_fail@plt+0xc048>
   1d450:	cmp	r5, #0
   1d454:	cmpne	r4, #0
   1d458:	popeq	{r4, r5, r6, pc}
   1d45c:	bl	1daa8 <__assert_fail@plt+0xc694>
   1d460:	push	{r4, lr}
   1d464:	bl	1ecbc <__assert_fail@plt+0xd8a8>
   1d468:	cmp	r0, #0
   1d46c:	popne	{r4, pc}
   1d470:	bl	1daa8 <__assert_fail@plt+0xc694>
   1d474:	push	{r4, lr}
   1d478:	bl	1ecbc <__assert_fail@plt+0xd8a8>
   1d47c:	cmp	r0, #0
   1d480:	popne	{r4, pc}
   1d484:	bl	1daa8 <__assert_fail@plt+0xc694>
   1d488:	push	{r4, lr}
   1d48c:	bl	1ecbc <__assert_fail@plt+0xd8a8>
   1d490:	cmp	r0, #0
   1d494:	popne	{r4, pc}
   1d498:	bl	1daa8 <__assert_fail@plt+0xc694>
   1d49c:	push	{r4, r5, r6, lr}
   1d4a0:	mov	r5, r0
   1d4a4:	mov	r4, r1
   1d4a8:	bl	1ece8 <__assert_fail@plt+0xd8d4>
   1d4ac:	cmp	r0, #0
   1d4b0:	popne	{r4, r5, r6, pc}
   1d4b4:	adds	r4, r4, #0
   1d4b8:	movne	r4, #1
   1d4bc:	cmp	r5, #0
   1d4c0:	orreq	r4, r4, #1
   1d4c4:	cmp	r4, #0
   1d4c8:	popeq	{r4, r5, r6, pc}
   1d4cc:	bl	1daa8 <__assert_fail@plt+0xc694>
   1d4d0:	push	{r4, lr}
   1d4d4:	cmp	r1, #0
   1d4d8:	orreq	r1, r1, #1
   1d4dc:	bl	1ece8 <__assert_fail@plt+0xd8d4>
   1d4e0:	cmp	r0, #0
   1d4e4:	popne	{r4, pc}
   1d4e8:	bl	1daa8 <__assert_fail@plt+0xc694>
   1d4ec:	push	{r4, r5, r6, lr}
   1d4f0:	mov	r6, r0
   1d4f4:	mov	r5, r1
   1d4f8:	mov	r4, r2
   1d4fc:	bl	1f134 <__assert_fail@plt+0xdd20>
   1d500:	cmp	r0, #0
   1d504:	popne	{r4, r5, r6, pc}
   1d508:	cmp	r6, #0
   1d50c:	beq	1d51c <__assert_fail@plt+0xc108>
   1d510:	cmp	r5, #0
   1d514:	cmpne	r4, #0
   1d518:	popeq	{r4, r5, r6, pc}
   1d51c:	bl	1daa8 <__assert_fail@plt+0xc694>
   1d520:	cmp	r2, #0
   1d524:	cmpne	r1, #0
   1d528:	moveq	r2, #1
   1d52c:	moveq	r1, r2
   1d530:	push	{r4, lr}
   1d534:	bl	1f134 <__assert_fail@plt+0xdd20>
   1d538:	cmp	r0, #0
   1d53c:	popne	{r4, pc}
   1d540:	bl	1daa8 <__assert_fail@plt+0xc694>
   1d544:	push	{r4, lr}
   1d548:	mov	r2, r1
   1d54c:	mov	r1, r0
   1d550:	mov	r0, #0
   1d554:	bl	1f134 <__assert_fail@plt+0xdd20>
   1d558:	cmp	r0, #0
   1d55c:	popne	{r4, pc}
   1d560:	bl	1daa8 <__assert_fail@plt+0xc694>
   1d564:	cmp	r1, #0
   1d568:	cmpne	r0, #0
   1d56c:	moveq	r2, #1
   1d570:	movne	r2, r1
   1d574:	moveq	r1, r2
   1d578:	movne	r1, r0
   1d57c:	push	{r4, lr}
   1d580:	mov	r0, #0
   1d584:	bl	1f134 <__assert_fail@plt+0xdd20>
   1d588:	cmp	r0, #0
   1d58c:	popne	{r4, pc}
   1d590:	bl	1daa8 <__assert_fail@plt+0xc694>
   1d594:	cmp	r0, #0
   1d598:	push	{r4, r5, r6, lr}
   1d59c:	mov	r5, r1
   1d5a0:	ldr	r4, [r1]
   1d5a4:	beq	1d5e0 <__assert_fail@plt+0xc1cc>
   1d5a8:	lsr	r2, r4, #1
   1d5ac:	add	r3, r2, #1
   1d5b0:	mvn	r3, r3
   1d5b4:	cmp	r4, r3
   1d5b8:	bhi	1d5fc <__assert_fail@plt+0xc1e8>
   1d5bc:	add	r4, r4, #1
   1d5c0:	add	r4, r4, r2
   1d5c4:	mov	r1, r4
   1d5c8:	mov	r2, #1
   1d5cc:	bl	1f134 <__assert_fail@plt+0xdd20>
   1d5d0:	cmp	r0, #0
   1d5d4:	beq	1d600 <__assert_fail@plt+0xc1ec>
   1d5d8:	str	r4, [r5]
   1d5dc:	pop	{r4, r5, r6, pc}
   1d5e0:	cmp	r4, #0
   1d5e4:	moveq	r4, #64	; 0x40
   1d5e8:	mov	r1, r4
   1d5ec:	mov	r2, #1
   1d5f0:	bl	1f134 <__assert_fail@plt+0xdd20>
   1d5f4:	cmp	r0, #0
   1d5f8:	bne	1d5d8 <__assert_fail@plt+0xc1c4>
   1d5fc:	bl	1daa8 <__assert_fail@plt+0xc694>
   1d600:	cmp	r4, #0
   1d604:	bne	1d5fc <__assert_fail@plt+0xc1e8>
   1d608:	str	r4, [r5]
   1d60c:	pop	{r4, r5, r6, pc}
   1d610:	cmp	r0, #0
   1d614:	push	{r4, r5, r6, lr}
   1d618:	mov	r5, r1
   1d61c:	ldr	r4, [r1]
   1d620:	mov	r6, r2
   1d624:	beq	1d668 <__assert_fail@plt+0xc254>
   1d628:	lsr	r1, r4, #1
   1d62c:	add	r3, r1, #1
   1d630:	mvn	r3, r3
   1d634:	cmp	r4, r3
   1d638:	bhi	1d6a0 <__assert_fail@plt+0xc28c>
   1d63c:	add	r4, r4, #1
   1d640:	add	r4, r4, r1
   1d644:	mov	r1, r4
   1d648:	bl	1f134 <__assert_fail@plt+0xdd20>
   1d64c:	cmp	r0, #0
   1d650:	bne	1d660 <__assert_fail@plt+0xc24c>
   1d654:	cmp	r4, #0
   1d658:	cmpne	r6, #0
   1d65c:	bne	1d6a0 <__assert_fail@plt+0xc28c>
   1d660:	str	r4, [r5]
   1d664:	pop	{r4, r5, r6, pc}
   1d668:	cmp	r4, #0
   1d66c:	bne	1d688 <__assert_fail@plt+0xc274>
   1d670:	mov	r1, r2
   1d674:	mov	r0, #64	; 0x40
   1d678:	bl	1f280 <__assert_fail@plt+0xde6c>
   1d67c:	cmp	r0, #0
   1d680:	movne	r4, r0
   1d684:	addeq	r4, r0, #1
   1d688:	mov	r2, r6
   1d68c:	mov	r1, r4
   1d690:	mov	r0, #0
   1d694:	bl	1f134 <__assert_fail@plt+0xdd20>
   1d698:	cmp	r0, #0
   1d69c:	bne	1d660 <__assert_fail@plt+0xc24c>
   1d6a0:	bl	1daa8 <__assert_fail@plt+0xc694>
   1d6a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d6a8:	sub	sp, sp, #12
   1d6ac:	ldr	r6, [r1]
   1d6b0:	mov	r8, r1
   1d6b4:	mov	r9, r0
   1d6b8:	asrs	r4, r6, #1
   1d6bc:	mov	sl, r2
   1d6c0:	mov	fp, r3
   1d6c4:	ldr	r7, [sp, #48]	; 0x30
   1d6c8:	bmi	1d844 <__assert_fail@plt+0xc430>
   1d6cc:	mvn	r1, #-2147483648	; 0x80000000
   1d6d0:	sub	r1, r1, r4
   1d6d4:	cmp	r6, r1
   1d6d8:	movle	r1, #0
   1d6dc:	movgt	r1, #1
   1d6e0:	mvn	r3, fp
   1d6e4:	cmp	r1, #0
   1d6e8:	addeq	r4, r4, r6
   1d6ec:	mvnne	r4, #-2147483648	; 0x80000000
   1d6f0:	lsr	r3, r3, #31
   1d6f4:	cmp	fp, r4
   1d6f8:	movge	r2, #0
   1d6fc:	andlt	r2, r3, #1
   1d700:	cmp	r2, #0
   1d704:	beq	1d7f4 <__assert_fail@plt+0xc3e0>
   1d708:	cmp	r7, #0
   1d70c:	blt	1d8dc <__assert_fail@plt+0xc4c8>
   1d710:	bne	1d8d4 <__assert_fail@plt+0xc4c0>
   1d714:	mov	r5, #64	; 0x40
   1d718:	mov	r1, r7
   1d71c:	mov	r0, r5
   1d720:	str	r3, [sp, #4]
   1d724:	bl	1f48c <__assert_fail@plt+0xe078>
   1d728:	mov	r1, r7
   1d72c:	mov	r4, r0
   1d730:	mov	r0, r5
   1d734:	bl	1f6ac <__assert_fail@plt+0xe298>
   1d738:	ldr	r3, [sp, #4]
   1d73c:	sub	r5, r5, r1
   1d740:	cmp	r9, #0
   1d744:	sub	r2, r4, r6
   1d748:	streq	r9, [r8]
   1d74c:	cmp	r2, sl
   1d750:	bge	1d7d4 <__assert_fail@plt+0xc3c0>
   1d754:	cmp	sl, #0
   1d758:	blt	1d874 <__assert_fail@plt+0xc460>
   1d75c:	cmp	r6, #0
   1d760:	blt	1d780 <__assert_fail@plt+0xc36c>
   1d764:	mvn	r2, #-2147483648	; 0x80000000
   1d768:	sub	r2, r2, sl
   1d76c:	cmp	r6, r2
   1d770:	movle	r2, #0
   1d774:	movgt	r2, #1
   1d778:	cmp	r2, #0
   1d77c:	bne	1d870 <__assert_fail@plt+0xc45c>
   1d780:	add	r6, r6, sl
   1d784:	cmp	fp, r6
   1d788:	movge	r3, #0
   1d78c:	andlt	r3, r3, #1
   1d790:	cmp	r3, #0
   1d794:	mov	r4, r6
   1d798:	bne	1d870 <__assert_fail@plt+0xc45c>
   1d79c:	cmp	r7, #0
   1d7a0:	blt	1d888 <__assert_fail@plt+0xc474>
   1d7a4:	beq	1d7d0 <__assert_fail@plt+0xc3bc>
   1d7a8:	cmp	r6, #0
   1d7ac:	blt	1d92c <__assert_fail@plt+0xc518>
   1d7b0:	mov	r1, r7
   1d7b4:	mvn	r0, #-2147483648	; 0x80000000
   1d7b8:	bl	1f48c <__assert_fail@plt+0xe078>
   1d7bc:	cmp	r6, r0
   1d7c0:	movle	r0, #0
   1d7c4:	movgt	r0, #1
   1d7c8:	cmp	r0, #0
   1d7cc:	bne	1d870 <__assert_fail@plt+0xc45c>
   1d7d0:	mul	r5, r6, r7
   1d7d4:	mov	r1, r5
   1d7d8:	mov	r0, r9
   1d7dc:	bl	1ece8 <__assert_fail@plt+0xd8d4>
   1d7e0:	cmp	r0, #0
   1d7e4:	beq	1d858 <__assert_fail@plt+0xc444>
   1d7e8:	str	r4, [r8]
   1d7ec:	add	sp, sp, #12
   1d7f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d7f4:	cmp	r7, #0
   1d7f8:	blt	1d8b4 <__assert_fail@plt+0xc4a0>
   1d7fc:	beq	1d714 <__assert_fail@plt+0xc300>
   1d800:	cmp	r4, #0
   1d804:	blt	1d8e4 <__assert_fail@plt+0xc4d0>
   1d808:	mov	r1, r7
   1d80c:	mvn	r0, #-2147483648	; 0x80000000
   1d810:	str	r3, [sp, #4]
   1d814:	bl	1f48c <__assert_fail@plt+0xe078>
   1d818:	ldr	r3, [sp, #4]
   1d81c:	cmp	r0, r4
   1d820:	movge	r0, #0
   1d824:	movlt	r0, #1
   1d828:	cmp	r0, #0
   1d82c:	mvnne	r5, #-2147483648	; 0x80000000
   1d830:	bne	1d718 <__assert_fail@plt+0xc304>
   1d834:	mul	r5, r7, r4
   1d838:	cmp	r5, #63	; 0x3f
   1d83c:	bgt	1d740 <__assert_fail@plt+0xc32c>
   1d840:	b	1d714 <__assert_fail@plt+0xc300>
   1d844:	rsb	r1, r4, #-2147483648	; 0x80000000
   1d848:	cmp	r6, r1
   1d84c:	movge	r1, #0
   1d850:	movlt	r1, #1
   1d854:	b	1d6e0 <__assert_fail@plt+0xc2cc>
   1d858:	adds	r5, r5, #0
   1d85c:	movne	r5, #1
   1d860:	cmp	r9, #0
   1d864:	orreq	r5, r5, #1
   1d868:	cmp	r5, #0
   1d86c:	beq	1d7e8 <__assert_fail@plt+0xc3d4>
   1d870:	bl	1daa8 <__assert_fail@plt+0xc694>
   1d874:	rsb	r2, sl, #-2147483648	; 0x80000000
   1d878:	cmp	r6, r2
   1d87c:	movge	r2, #0
   1d880:	movlt	r2, #1
   1d884:	b	1d778 <__assert_fail@plt+0xc364>
   1d888:	cmp	r6, #0
   1d88c:	blt	1d910 <__assert_fail@plt+0xc4fc>
   1d890:	cmn	r7, #1
   1d894:	beq	1d7d0 <__assert_fail@plt+0xc3bc>
   1d898:	mov	r1, r7
   1d89c:	mov	r0, #-2147483648	; 0x80000000
   1d8a0:	bl	1f48c <__assert_fail@plt+0xe078>
   1d8a4:	cmp	r6, r0
   1d8a8:	movle	r0, #0
   1d8ac:	movgt	r0, #1
   1d8b0:	b	1d7c8 <__assert_fail@plt+0xc3b4>
   1d8b4:	cmp	r4, #0
   1d8b8:	blt	1d950 <__assert_fail@plt+0xc53c>
   1d8bc:	cmn	r7, #1
   1d8c0:	beq	1d834 <__assert_fail@plt+0xc420>
   1d8c4:	str	r3, [sp, #4]
   1d8c8:	mov	r1, r7
   1d8cc:	mov	r0, #-2147483648	; 0x80000000
   1d8d0:	b	1d814 <__assert_fail@plt+0xc400>
   1d8d4:	mov	r4, fp
   1d8d8:	b	1d808 <__assert_fail@plt+0xc3f4>
   1d8dc:	mov	r4, fp
   1d8e0:	b	1d8bc <__assert_fail@plt+0xc4a8>
   1d8e4:	cmn	r4, #1
   1d8e8:	beq	1d834 <__assert_fail@plt+0xc420>
   1d8ec:	mov	r1, r4
   1d8f0:	mov	r0, #-2147483648	; 0x80000000
   1d8f4:	str	r3, [sp, #4]
   1d8f8:	bl	1f48c <__assert_fail@plt+0xe078>
   1d8fc:	ldr	r3, [sp, #4]
   1d900:	cmp	r7, r0
   1d904:	movle	r0, #0
   1d908:	movgt	r0, #1
   1d90c:	b	1d828 <__assert_fail@plt+0xc414>
   1d910:	mov	r1, r7
   1d914:	mvn	r0, #-2147483648	; 0x80000000
   1d918:	bl	1f48c <__assert_fail@plt+0xe078>
   1d91c:	cmp	r6, r0
   1d920:	movge	r0, #0
   1d924:	movlt	r0, #1
   1d928:	b	1d7c8 <__assert_fail@plt+0xc3b4>
   1d92c:	cmn	r6, #1
   1d930:	beq	1d7d0 <__assert_fail@plt+0xc3bc>
   1d934:	mov	r1, r6
   1d938:	mov	r0, #-2147483648	; 0x80000000
   1d93c:	bl	1f48c <__assert_fail@plt+0xe078>
   1d940:	cmp	r7, r0
   1d944:	movle	r0, #0
   1d948:	movgt	r0, #1
   1d94c:	b	1d7c8 <__assert_fail@plt+0xc3b4>
   1d950:	mov	r1, r7
   1d954:	mvn	r0, #-2147483648	; 0x80000000
   1d958:	str	r3, [sp, #4]
   1d95c:	bl	1f48c <__assert_fail@plt+0xe078>
   1d960:	ldr	r3, [sp, #4]
   1d964:	cmp	r0, r4
   1d968:	movle	r0, #0
   1d96c:	movgt	r0, #1
   1d970:	b	1d828 <__assert_fail@plt+0xc414>
   1d974:	push	{r4, lr}
   1d978:	mov	r1, #1
   1d97c:	bl	1ec74 <__assert_fail@plt+0xd860>
   1d980:	cmp	r0, #0
   1d984:	popne	{r4, pc}
   1d988:	bl	1daa8 <__assert_fail@plt+0xc694>
   1d98c:	push	{r4, lr}
   1d990:	mov	r1, #1
   1d994:	bl	1ec74 <__assert_fail@plt+0xd860>
   1d998:	cmp	r0, #0
   1d99c:	popne	{r4, pc}
   1d9a0:	bl	1daa8 <__assert_fail@plt+0xc694>
   1d9a4:	push	{r4, lr}
   1d9a8:	bl	1ec74 <__assert_fail@plt+0xd860>
   1d9ac:	cmp	r0, #0
   1d9b0:	popne	{r4, pc}
   1d9b4:	bl	1daa8 <__assert_fail@plt+0xc694>
   1d9b8:	push	{r4, lr}
   1d9bc:	bl	1ec74 <__assert_fail@plt+0xd860>
   1d9c0:	cmp	r0, #0
   1d9c4:	popne	{r4, pc}
   1d9c8:	bl	1daa8 <__assert_fail@plt+0xc694>
   1d9cc:	push	{r4, r5, r6, lr}
   1d9d0:	mov	r6, r0
   1d9d4:	mov	r0, r1
   1d9d8:	mov	r4, r1
   1d9dc:	bl	1ecbc <__assert_fail@plt+0xd8a8>
   1d9e0:	subs	r5, r0, #0
   1d9e4:	beq	1d9fc <__assert_fail@plt+0xc5e8>
   1d9e8:	mov	r2, r4
   1d9ec:	mov	r1, r6
   1d9f0:	bl	1112c <memcpy@plt>
   1d9f4:	mov	r0, r5
   1d9f8:	pop	{r4, r5, r6, pc}
   1d9fc:	bl	1daa8 <__assert_fail@plt+0xc694>
   1da00:	push	{r4, r5, r6, lr}
   1da04:	mov	r6, r0
   1da08:	mov	r0, r1
   1da0c:	mov	r4, r1
   1da10:	bl	1ecbc <__assert_fail@plt+0xd8a8>
   1da14:	subs	r5, r0, #0
   1da18:	beq	1da30 <__assert_fail@plt+0xc61c>
   1da1c:	mov	r2, r4
   1da20:	mov	r1, r6
   1da24:	bl	1112c <memcpy@plt>
   1da28:	mov	r0, r5
   1da2c:	pop	{r4, r5, r6, pc}
   1da30:	bl	1daa8 <__assert_fail@plt+0xc694>
   1da34:	push	{r4, r5, r6, lr}
   1da38:	mov	r6, r0
   1da3c:	add	r0, r1, #1
   1da40:	mov	r4, r1
   1da44:	bl	1ecbc <__assert_fail@plt+0xd8a8>
   1da48:	subs	r5, r0, #0
   1da4c:	beq	1da6c <__assert_fail@plt+0xc658>
   1da50:	mov	r3, #0
   1da54:	mov	r1, r6
   1da58:	strb	r3, [r5, r4]
   1da5c:	mov	r2, r4
   1da60:	bl	1112c <memcpy@plt>
   1da64:	mov	r0, r5
   1da68:	pop	{r4, r5, r6, pc}
   1da6c:	bl	1daa8 <__assert_fail@plt+0xc694>
   1da70:	push	{r4, r5, r6, lr}
   1da74:	mov	r6, r0
   1da78:	bl	112a0 <strlen@plt>
   1da7c:	add	r4, r0, #1
   1da80:	mov	r0, r4
   1da84:	bl	1ecbc <__assert_fail@plt+0xd8a8>
   1da88:	subs	r5, r0, #0
   1da8c:	beq	1daa4 <__assert_fail@plt+0xc690>
   1da90:	mov	r2, r4
   1da94:	mov	r1, r6
   1da98:	bl	1112c <memcpy@plt>
   1da9c:	mov	r0, r5
   1daa0:	pop	{r4, r5, r6, pc}
   1daa4:	bl	1daa8 <__assert_fail@plt+0xc694>
   1daa8:	ldr	r3, [pc, #44]	; 1dadc <__assert_fail@plt+0xc6c8>
   1daac:	push	{r4, lr}
   1dab0:	mov	r2, #5
   1dab4:	ldr	r1, [pc, #36]	; 1dae0 <__assert_fail@plt+0xc6cc>
   1dab8:	mov	r0, #0
   1dabc:	ldr	r4, [r3]
   1dac0:	bl	11174 <dcgettext@plt>
   1dac4:	ldr	r2, [pc, #24]	; 1dae4 <__assert_fail@plt+0xc6d0>
   1dac8:	mov	r1, #0
   1dacc:	mov	r3, r0
   1dad0:	mov	r0, r4
   1dad4:	bl	1121c <error@plt>
   1dad8:	bl	113f0 <abort@plt>
   1dadc:	andeq	r2, r3, r8, ror #2
   1dae0:	andeq	r1, r2, r8, asr #6
   1dae4:	muleq	r2, r4, r8
   1dae8:	push	{r4, r5, r6, r7, lr}
   1daec:	sub	sp, sp, #20
   1daf0:	mov	r6, r2
   1daf4:	ldr	ip, [sp, #48]	; 0x30
   1daf8:	mov	r2, r1
   1dafc:	mov	r7, r3
   1db00:	str	ip, [sp]
   1db04:	add	r3, sp, #8
   1db08:	mov	r1, #0
   1db0c:	mov	r5, r0
   1db10:	ldr	r4, [sp, #56]	; 0x38
   1db14:	bl	1dea8 <__assert_fail@plt+0xca94>
   1db18:	cmp	r0, #0
   1db1c:	bne	1dba0 <__assert_fail@plt+0xc78c>
   1db20:	ldrd	r0, [sp, #8]
   1db24:	cmp	r1, r7
   1db28:	cmpeq	r0, r6
   1db2c:	ldrd	r6, [sp, #40]	; 0x28
   1db30:	movcc	r3, #1
   1db34:	movcs	r3, #0
   1db38:	cmp	r1, r7
   1db3c:	cmpeq	r0, r6
   1db40:	orrhi	r3, r3, #1
   1db44:	cmp	r3, #0
   1db48:	beq	1db98 <__assert_fail@plt+0xc784>
   1db4c:	mov	r3, #0
   1db50:	mvn	r2, #-1073741824	; 0xc0000000
   1db54:	cmp	r1, r3
   1db58:	cmpeq	r0, r2
   1db5c:	bhi	1dbcc <__assert_fail@plt+0xc7b8>
   1db60:	bl	112dc <__errno_location@plt>
   1db64:	mov	r3, #34	; 0x22
   1db68:	mov	r6, r3
   1db6c:	str	r3, [r0]
   1db70:	cmp	r4, #0
   1db74:	moveq	r4, #1
   1db78:	mov	r0, r5
   1db7c:	bl	1c800 <__assert_fail@plt+0xb3ec>
   1db80:	mov	r1, r6
   1db84:	ldr	r3, [sp, #52]	; 0x34
   1db88:	ldr	r2, [pc, #144]	; 1dc20 <__assert_fail@plt+0xc80c>
   1db8c:	str	r0, [sp]
   1db90:	mov	r0, r4
   1db94:	bl	1121c <error@plt>
   1db98:	add	sp, sp, #20
   1db9c:	pop	{r4, r5, r6, r7, pc}
   1dba0:	cmp	r0, #1
   1dba4:	beq	1dbe0 <__assert_fail@plt+0xc7cc>
   1dba8:	cmp	r0, #3
   1dbac:	beq	1dc10 <__assert_fail@plt+0xc7fc>
   1dbb0:	cmp	r4, #0
   1dbb4:	beq	1dc00 <__assert_fail@plt+0xc7ec>
   1dbb8:	bl	112dc <__errno_location@plt>
   1dbbc:	ldr	r6, [r0]
   1dbc0:	cmp	r6, #22
   1dbc4:	moveq	r6, #0
   1dbc8:	b	1db78 <__assert_fail@plt+0xc764>
   1dbcc:	bl	112dc <__errno_location@plt>
   1dbd0:	mov	r3, #75	; 0x4b
   1dbd4:	mov	r6, r3
   1dbd8:	str	r3, [r0]
   1dbdc:	b	1db70 <__assert_fail@plt+0xc75c>
   1dbe0:	bl	112dc <__errno_location@plt>
   1dbe4:	mov	r3, #75	; 0x4b
   1dbe8:	mov	r6, r3
   1dbec:	str	r3, [r0]
   1dbf0:	cmp	r4, #0
   1dbf4:	moveq	r4, #1
   1dbf8:	bne	1dbc0 <__assert_fail@plt+0xc7ac>
   1dbfc:	b	1db78 <__assert_fail@plt+0xc764>
   1dc00:	bl	112dc <__errno_location@plt>
   1dc04:	mov	r4, #1
   1dc08:	ldr	r6, [r0]
   1dc0c:	b	1dbc0 <__assert_fail@plt+0xc7ac>
   1dc10:	bl	112dc <__errno_location@plt>
   1dc14:	mov	r6, #0
   1dc18:	str	r6, [r0]
   1dc1c:	b	1dbf0 <__assert_fail@plt+0xc7dc>
   1dc20:	muleq	r2, r0, r8
   1dc24:	push	{r4, r5, r6, r7, lr}
   1dc28:	sub	sp, sp, #20
   1dc2c:	mov	r6, r2
   1dc30:	ldr	r1, [sp, #48]	; 0x30
   1dc34:	mov	r7, r3
   1dc38:	str	r1, [sp]
   1dc3c:	add	r3, sp, #8
   1dc40:	mov	r2, #10
   1dc44:	mov	r1, #0
   1dc48:	mov	r5, r0
   1dc4c:	ldr	r4, [sp, #56]	; 0x38
   1dc50:	bl	1dea8 <__assert_fail@plt+0xca94>
   1dc54:	cmp	r0, #0
   1dc58:	bne	1dcdc <__assert_fail@plt+0xc8c8>
   1dc5c:	ldrd	r0, [sp, #8]
   1dc60:	cmp	r7, r1
   1dc64:	cmpeq	r6, r0
   1dc68:	ldrd	r6, [sp, #40]	; 0x28
   1dc6c:	movhi	r3, #1
   1dc70:	movls	r3, #0
   1dc74:	cmp	r7, r1
   1dc78:	cmpeq	r6, r0
   1dc7c:	orrcc	r3, r3, #1
   1dc80:	cmp	r3, #0
   1dc84:	beq	1dcd4 <__assert_fail@plt+0xc8c0>
   1dc88:	mov	r3, #0
   1dc8c:	mvn	r2, #-1073741824	; 0xc0000000
   1dc90:	cmp	r1, r3
   1dc94:	cmpeq	r0, r2
   1dc98:	bhi	1dd08 <__assert_fail@plt+0xc8f4>
   1dc9c:	bl	112dc <__errno_location@plt>
   1dca0:	mov	r3, #34	; 0x22
   1dca4:	mov	r6, r3
   1dca8:	str	r3, [r0]
   1dcac:	cmp	r4, #0
   1dcb0:	moveq	r4, #1
   1dcb4:	mov	r0, r5
   1dcb8:	bl	1c800 <__assert_fail@plt+0xb3ec>
   1dcbc:	mov	r1, r6
   1dcc0:	ldr	r3, [sp, #52]	; 0x34
   1dcc4:	ldr	r2, [pc, #144]	; 1dd5c <__assert_fail@plt+0xc948>
   1dcc8:	str	r0, [sp]
   1dccc:	mov	r0, r4
   1dcd0:	bl	1121c <error@plt>
   1dcd4:	add	sp, sp, #20
   1dcd8:	pop	{r4, r5, r6, r7, pc}
   1dcdc:	cmp	r0, #1
   1dce0:	beq	1dd1c <__assert_fail@plt+0xc908>
   1dce4:	cmp	r0, #3
   1dce8:	beq	1dd4c <__assert_fail@plt+0xc938>
   1dcec:	cmp	r4, #0
   1dcf0:	beq	1dd3c <__assert_fail@plt+0xc928>
   1dcf4:	bl	112dc <__errno_location@plt>
   1dcf8:	ldr	r6, [r0]
   1dcfc:	cmp	r6, #22
   1dd00:	moveq	r6, #0
   1dd04:	b	1dcb4 <__assert_fail@plt+0xc8a0>
   1dd08:	bl	112dc <__errno_location@plt>
   1dd0c:	mov	r3, #75	; 0x4b
   1dd10:	mov	r6, r3
   1dd14:	str	r3, [r0]
   1dd18:	b	1dcac <__assert_fail@plt+0xc898>
   1dd1c:	bl	112dc <__errno_location@plt>
   1dd20:	mov	r3, #75	; 0x4b
   1dd24:	mov	r6, r3
   1dd28:	str	r3, [r0]
   1dd2c:	cmp	r4, #0
   1dd30:	moveq	r4, #1
   1dd34:	bne	1dcfc <__assert_fail@plt+0xc8e8>
   1dd38:	b	1dcb4 <__assert_fail@plt+0xc8a0>
   1dd3c:	bl	112dc <__errno_location@plt>
   1dd40:	mov	r4, #1
   1dd44:	ldr	r6, [r0]
   1dd48:	b	1dcfc <__assert_fail@plt+0xc8e8>
   1dd4c:	bl	112dc <__errno_location@plt>
   1dd50:	mov	r6, #0
   1dd54:	str	r6, [r0]
   1dd58:	b	1dd2c <__assert_fail@plt+0xc918>
   1dd5c:	muleq	r2, r0, r8
   1dd60:	vldr	d7, [pc, #144]	; 1ddf8 <__assert_fail@plt+0xc9e4>
   1dd64:	push	{r4, r5, lr}
   1dd68:	vpush	{d8}
   1dd6c:	vmov.f64	d8, d0
   1dd70:	vcmpe.f64	d0, d7
   1dd74:	sub	sp, sp, #12
   1dd78:	vmrs	APSR_nzcv, fpscr
   1dd7c:	bge	1ddcc <__assert_fail@plt+0xc9b8>
   1dd80:	bl	112dc <__errno_location@plt>
   1dd84:	mov	r4, r0
   1dd88:	vmov.f64	d0, d8
   1dd8c:	mov	r0, sp
   1dd90:	bl	1ee40 <__assert_fail@plt+0xda2c>
   1dd94:	mov	r5, #0
   1dd98:	b	1dda8 <__assert_fail@plt+0xc994>
   1dd9c:	ldr	r3, [r4]
   1dda0:	bics	r3, r3, #4
   1dda4:	bne	1dde8 <__assert_fail@plt+0xc9d4>
   1dda8:	str	r5, [r4]
   1ddac:	mov	r1, sp
   1ddb0:	mov	r0, sp
   1ddb4:	bl	11114 <nanosleep@plt>
   1ddb8:	cmp	r0, #0
   1ddbc:	bne	1dd9c <__assert_fail@plt+0xc988>
   1ddc0:	add	sp, sp, #12
   1ddc4:	vpop	{d8}
   1ddc8:	pop	{r4, r5, pc}
   1ddcc:	bl	112dc <__errno_location@plt>
   1ddd0:	mov	r4, r0
   1ddd4:	bl	110e4 <pause@plt>
   1ddd8:	ldr	r3, [r4]
   1dddc:	cmp	r3, #4
   1dde0:	beq	1ddd4 <__assert_fail@plt+0xc9c0>
   1dde4:	b	1dd88 <__assert_fail@plt+0xc974>
   1dde8:	mvn	r0, #0
   1ddec:	add	sp, sp, #12
   1ddf0:	vpop	{d8}
   1ddf4:	pop	{r4, r5, pc}
   1ddf8:	andeq	r0, r0, r0
   1ddfc:	mvnmi	r0, r0
   1de00:	push	{r4, r5, r6, r7, r8, r9, lr}
   1de04:	sub	sp, sp, #12
   1de08:	mov	r6, r0
   1de0c:	mov	r9, r3
   1de10:	mov	r5, r1
   1de14:	mov	r8, r2
   1de18:	bl	112dc <__errno_location@plt>
   1de1c:	mov	r4, #0
   1de20:	add	r1, sp, #4
   1de24:	str	r4, [r0]
   1de28:	mov	r7, r0
   1de2c:	mov	r0, r6
   1de30:	blx	r9
   1de34:	ldr	r3, [sp, #4]
   1de38:	cmp	r6, r3
   1de3c:	beq	1de7c <__assert_fail@plt+0xca68>
   1de40:	cmp	r5, r4
   1de44:	beq	1de84 <__assert_fail@plt+0xca70>
   1de48:	vcmp.f64	d0, #0.0
   1de4c:	vmrs	APSR_nzcv, fpscr
   1de50:	moveq	r0, #1
   1de54:	beq	1de6c <__assert_fail@plt+0xca58>
   1de58:	ldr	r0, [r7]
   1de5c:	subs	r0, r0, #34	; 0x22
   1de60:	movne	r0, #1
   1de64:	cmp	r5, #0
   1de68:	beq	1de70 <__assert_fail@plt+0xca5c>
   1de6c:	str	r3, [r5]
   1de70:	vstr	d0, [r8]
   1de74:	add	sp, sp, #12
   1de78:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1de7c:	mov	r0, r4
   1de80:	b	1de64 <__assert_fail@plt+0xca50>
   1de84:	ldrb	r2, [r3]
   1de88:	cmp	r2, r4
   1de8c:	movne	r0, r5
   1de90:	bne	1de70 <__assert_fail@plt+0xca5c>
   1de94:	vcmp.f64	d0, #0.0
   1de98:	vmrs	APSR_nzcv, fpscr
   1de9c:	bne	1de58 <__assert_fail@plt+0xca44>
   1dea0:	mov	r0, #1
   1dea4:	b	1de70 <__assert_fail@plt+0xca5c>
   1dea8:	cmp	r2, #36	; 0x24
   1deac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1deb0:	sub	sp, sp, #52	; 0x34
   1deb4:	bhi	1ec44 <__assert_fail@plt+0xd830>
   1deb8:	cmp	r1, #0
   1debc:	mov	r6, r2
   1dec0:	mov	sl, r0
   1dec4:	mov	r5, r1
   1dec8:	mov	r8, r3
   1decc:	addeq	r5, sp, #44	; 0x2c
   1ded0:	bl	112dc <__errno_location@plt>
   1ded4:	mov	r3, #0
   1ded8:	str	r3, [r0]
   1dedc:	mov	fp, r0
   1dee0:	bl	11288 <__ctype_b_loc@plt>
   1dee4:	ldrb	r3, [sl]
   1dee8:	mov	r2, sl
   1deec:	ldr	r0, [r0]
   1def0:	b	1def8 <__assert_fail@plt+0xcae4>
   1def4:	ldrb	r3, [r2, #1]!
   1def8:	lsl	r1, r3, #1
   1defc:	ldrh	r4, [r0, r1]
   1df00:	ands	r4, r4, #8192	; 0x2000
   1df04:	bne	1def4 <__assert_fail@plt+0xcae0>
   1df08:	cmp	r3, #45	; 0x2d
   1df0c:	bne	1df20 <__assert_fail@plt+0xcb0c>
   1df10:	mov	r4, #4
   1df14:	mov	r0, r4
   1df18:	add	sp, sp, #52	; 0x34
   1df1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df20:	mov	r2, r6
   1df24:	mov	r3, r4
   1df28:	mov	r1, r5
   1df2c:	mov	r0, sl
   1df30:	bl	11138 <__strtoull_internal@plt>
   1df34:	ldr	r9, [r5]
   1df38:	cmp	sl, r9
   1df3c:	mov	r6, r0
   1df40:	mov	r7, r1
   1df44:	beq	1df8c <__assert_fail@plt+0xcb78>
   1df48:	ldr	r4, [fp]
   1df4c:	cmp	r4, #0
   1df50:	bne	1df7c <__assert_fail@plt+0xcb68>
   1df54:	ldr	r3, [sp, #88]	; 0x58
   1df58:	cmp	r3, #0
   1df5c:	beq	1df6c <__assert_fail@plt+0xcb58>
   1df60:	ldrb	sl, [r9]
   1df64:	cmp	sl, #0
   1df68:	bne	1dfc0 <__assert_fail@plt+0xcbac>
   1df6c:	mov	r0, r4
   1df70:	strd	r6, [r8]
   1df74:	add	sp, sp, #52	; 0x34
   1df78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df7c:	cmp	r4, #34	; 0x22
   1df80:	bne	1df10 <__assert_fail@plt+0xcafc>
   1df84:	mov	r4, #1
   1df88:	b	1df54 <__assert_fail@plt+0xcb40>
   1df8c:	ldr	r3, [sp, #88]	; 0x58
   1df90:	cmp	r3, #0
   1df94:	beq	1df10 <__assert_fail@plt+0xcafc>
   1df98:	ldrb	sl, [r9]
   1df9c:	cmp	sl, #0
   1dfa0:	beq	1df10 <__assert_fail@plt+0xcafc>
   1dfa4:	mov	r1, sl
   1dfa8:	mov	r0, r3
   1dfac:	bl	112b8 <strchr@plt>
   1dfb0:	cmp	r0, #0
   1dfb4:	movne	r6, #1
   1dfb8:	movne	r7, #0
   1dfbc:	beq	1df10 <__assert_fail@plt+0xcafc>
   1dfc0:	mov	r1, sl
   1dfc4:	ldr	r0, [sp, #88]	; 0x58
   1dfc8:	bl	112b8 <strchr@plt>
   1dfcc:	cmp	r0, #0
   1dfd0:	beq	1eb30 <__assert_fail@plt+0xd71c>
   1dfd4:	sub	r3, sl, #69	; 0x45
   1dfd8:	cmp	r3, #47	; 0x2f
   1dfdc:	ldrls	pc, [pc, r3, lsl #2]
   1dfe0:	b	1e0d4 <__assert_fail@plt+0xccc0>
   1dfe4:	andeq	lr, r1, r4, lsr #1
   1dfe8:	ldrdeq	lr, [r1], -r4
   1dfec:	andeq	lr, r1, r4, lsr #1
   1dff0:	ldrdeq	lr, [r1], -r4
   1dff4:	ldrdeq	lr, [r1], -r4
   1dff8:	ldrdeq	lr, [r1], -r4
   1dffc:	andeq	lr, r1, r4, lsr #1
   1e000:	ldrdeq	lr, [r1], -r4
   1e004:	andeq	lr, r1, r4, lsr #1
   1e008:	ldrdeq	lr, [r1], -r4
   1e00c:	ldrdeq	lr, [r1], -r4
   1e010:	andeq	lr, r1, r4, lsr #1
   1e014:	ldrdeq	lr, [r1], -r4
   1e018:	ldrdeq	lr, [r1], -r4
   1e01c:	ldrdeq	lr, [r1], -r4
   1e020:	andeq	lr, r1, r4, lsr #1
   1e024:	ldrdeq	lr, [r1], -r4
   1e028:	ldrdeq	lr, [r1], -r4
   1e02c:	ldrdeq	lr, [r1], -r4
   1e030:	ldrdeq	lr, [r1], -r4
   1e034:	andeq	lr, r1, r4, lsr #1
   1e038:	andeq	lr, r1, r4, lsr #1
   1e03c:	ldrdeq	lr, [r1], -r4
   1e040:	ldrdeq	lr, [r1], -r4
   1e044:	ldrdeq	lr, [r1], -r4
   1e048:	ldrdeq	lr, [r1], -r4
   1e04c:	ldrdeq	lr, [r1], -r4
   1e050:	ldrdeq	lr, [r1], -r4
   1e054:	ldrdeq	lr, [r1], -r4
   1e058:	ldrdeq	lr, [r1], -r4
   1e05c:	ldrdeq	lr, [r1], -r4
   1e060:	ldrdeq	lr, [r1], -r4
   1e064:	ldrdeq	lr, [r1], -r4
   1e068:	ldrdeq	lr, [r1], -r4
   1e06c:	andeq	lr, r1, r4, lsr #1
   1e070:	ldrdeq	lr, [r1], -r4
   1e074:	ldrdeq	lr, [r1], -r4
   1e078:	ldrdeq	lr, [r1], -r4
   1e07c:	andeq	lr, r1, r4, lsr #1
   1e080:	ldrdeq	lr, [r1], -r4
   1e084:	andeq	lr, r1, r4, lsr #1
   1e088:	ldrdeq	lr, [r1], -r4
   1e08c:	ldrdeq	lr, [r1], -r4
   1e090:	ldrdeq	lr, [r1], -r4
   1e094:	ldrdeq	lr, [r1], -r4
   1e098:	ldrdeq	lr, [r1], -r4
   1e09c:	ldrdeq	lr, [r1], -r4
   1e0a0:	andeq	lr, r1, r4, lsr #1
   1e0a4:	mov	r1, #48	; 0x30
   1e0a8:	ldr	r0, [sp, #88]	; 0x58
   1e0ac:	bl	112b8 <strchr@plt>
   1e0b0:	cmp	r0, #0
   1e0b4:	beq	1ebc4 <__assert_fail@plt+0xd7b0>
   1e0b8:	ldrb	r3, [r9, #1]
   1e0bc:	cmp	r3, #68	; 0x44
   1e0c0:	beq	1eba4 <__assert_fail@plt+0xd790>
   1e0c4:	cmp	r3, #105	; 0x69
   1e0c8:	beq	1eb74 <__assert_fail@plt+0xd760>
   1e0cc:	cmp	r3, #66	; 0x42
   1e0d0:	beq	1eba4 <__assert_fail@plt+0xd790>
   1e0d4:	ldr	r3, [pc, #2948]	; 1ec60 <__assert_fail@plt+0xd84c>
   1e0d8:	mvn	r2, #0
   1e0dc:	mov	r1, #1024	; 0x400
   1e0e0:	mov	lr, #0
   1e0e4:	strd	r2, [sp]
   1e0e8:	mov	r3, #1
   1e0ec:	str	r3, [sp, #12]
   1e0f0:	sub	sl, sl, #66	; 0x42
   1e0f4:	cmp	sl, #53	; 0x35
   1e0f8:	ldrls	pc, [pc, sl, lsl #2]
   1e0fc:	b	1eb30 <__assert_fail@plt+0xd71c>
   1e100:	andeq	lr, r1, r0, lsl #22
   1e104:	andeq	lr, r1, r0, lsr fp
   1e108:	andeq	lr, r1, r0, lsr fp
   1e10c:	andeq	lr, r1, ip, ror r9
   1e110:	andeq	lr, r1, r0, lsr fp
   1e114:			; <UNDEFINED> instruction: 0x0001e8b8
   1e118:	andeq	lr, r1, r0, lsr fp
   1e11c:	andeq	lr, r1, r0, lsr fp
   1e120:	andeq	lr, r1, r0, lsr fp
   1e124:	andeq	lr, r1, ip, lsr fp
   1e128:	andeq	lr, r1, r0, lsr fp
   1e12c:	ldrdeq	lr, [r1], -r8
   1e130:	andeq	lr, r1, r0, lsr fp
   1e134:	andeq	lr, r1, r0, lsr fp
   1e138:	andeq	lr, r1, r4, ror #4
   1e13c:	andeq	lr, r1, r0, lsr fp
   1e140:	andeq	lr, r1, r0, lsr fp
   1e144:	andeq	lr, r1, r0, lsr fp
   1e148:	andeq	lr, r1, r4, ror #11
   1e14c:	andeq	lr, r1, r0, lsr fp
   1e150:	andeq	lr, r1, r0, lsr fp
   1e154:	andeq	lr, r1, r0, lsr fp
   1e158:	andeq	lr, r1, r0, lsr fp
   1e15c:			; <UNDEFINED> instruction: 0x0001e3bc
   1e160:	andeq	lr, r1, r8, lsl r7
   1e164:	andeq	lr, r1, r0, lsr fp
   1e168:	andeq	lr, r1, r0, lsr fp
   1e16c:	andeq	lr, r1, r0, lsr fp
   1e170:	andeq	lr, r1, r0, lsr fp
   1e174:	andeq	lr, r1, r0, lsr fp
   1e178:	andeq	lr, r1, r0, lsr fp
   1e17c:	andeq	lr, r1, r0, lsr fp
   1e180:	andeq	lr, r1, r8, ror #13
   1e184:	andeq	lr, r1, r0, ror #13
   1e188:	andeq	lr, r1, r0, lsr fp
   1e18c:	andeq	lr, r1, r0, lsr fp
   1e190:	andeq	lr, r1, r0, lsr fp
   1e194:			; <UNDEFINED> instruction: 0x0001e8b8
   1e198:	andeq	lr, r1, r0, lsr fp
   1e19c:	andeq	lr, r1, r0, lsr fp
   1e1a0:	andeq	lr, r1, r0, lsr fp
   1e1a4:	andeq	lr, r1, ip, lsr fp
   1e1a8:	andeq	lr, r1, r0, lsr fp
   1e1ac:	ldrdeq	lr, [r1], -r8
   1e1b0:	andeq	lr, r1, r0, lsr fp
   1e1b4:	andeq	lr, r1, r0, lsr fp
   1e1b8:	andeq	lr, r1, r0, lsr fp
   1e1bc:	andeq	lr, r1, r0, lsr fp
   1e1c0:	andeq	lr, r1, r0, lsr fp
   1e1c4:	andeq	lr, r1, r0, lsr fp
   1e1c8:	andeq	lr, r1, r4, ror #11
   1e1cc:	andeq	lr, r1, r0, lsr fp
   1e1d0:	andeq	lr, r1, r0, lsr fp
   1e1d4:	andeq	lr, r1, r4, asr #13
   1e1d8:	mul	r0, r6, lr
   1e1dc:	ldrd	sl, [sp]
   1e1e0:	umull	r2, r3, r6, r1
   1e1e4:	mla	r0, r1, r7, r0
   1e1e8:	cmp	r7, fp
   1e1ec:	cmpeq	r6, sl
   1e1f0:	add	r3, r0, r3
   1e1f4:	mvnhi	r3, #0
   1e1f8:	mvnhi	r2, #0
   1e1fc:	mul	r6, r1, r3
   1e200:	umull	r0, r1, r1, r2
   1e204:	mla	lr, lr, r2, r6
   1e208:	ldrd	r6, [sp]
   1e20c:	movhi	ip, #1
   1e210:	movls	ip, #0
   1e214:	cmp	r7, r3
   1e218:	cmpeq	r6, r2
   1e21c:	mvncc	r0, #0
   1e220:	add	r1, lr, r1
   1e224:	mov	sl, r6
   1e228:	movcc	r1, r0
   1e22c:	mov	fp, r7
   1e230:	cmp	fp, r3
   1e234:	cmpeq	sl, r2
   1e238:	mov	r6, r0
   1e23c:	mov	r7, r1
   1e240:	orrcc	ip, ip, #1
   1e244:	ldr	r2, [sp, #12]
   1e248:	orr	r4, r4, ip
   1e24c:	add	r3, r9, r2
   1e250:	str	r3, [r5]
   1e254:	ldrb	r3, [r9, r2]
   1e258:	cmp	r3, #0
   1e25c:	orrne	r4, r4, #2
   1e260:	b	1df6c <__assert_fail@plt+0xcb58>
   1e264:	ldrd	sl, [sp]
   1e268:	umull	r2, r3, r6, r1
   1e26c:	mul	r0, r6, lr
   1e270:	cmp	r7, fp
   1e274:	cmpeq	r6, sl
   1e278:	mvnhi	r2, #0
   1e27c:	mla	r0, r1, r7, r0
   1e280:	umull	sl, fp, r2, r1
   1e284:	add	r3, r0, r3
   1e288:	mul	r0, lr, r2
   1e28c:	mvnhi	r3, #0
   1e290:	strd	sl, [sp, #16]
   1e294:	ldrd	sl, [sp]
   1e298:	mla	r0, r1, r3, r0
   1e29c:	ldr	ip, [sp, #20]
   1e2a0:	cmp	r3, fp
   1e2a4:	add	r0, r0, ip
   1e2a8:	cmpeq	r2, sl
   1e2ac:	str	r0, [sp, #20]
   1e2b0:	bls	1e2c8 <__assert_fail@plt+0xceb4>
   1e2b4:	mvn	sl, #0
   1e2b8:	mvn	fp, #0
   1e2bc:	strd	sl, [sp, #16]
   1e2c0:	ldr	r0, [sp, #20]
   1e2c4:	ldrd	sl, [sp]
   1e2c8:	cmp	r7, fp
   1e2cc:	cmpeq	r6, sl
   1e2d0:	mul	r0, r1, r0
   1e2d4:	ldrd	r6, [sp, #16]
   1e2d8:	mla	ip, lr, r6, r0
   1e2dc:	mov	r0, r6
   1e2e0:	movhi	r0, #1
   1e2e4:	movls	r0, #0
   1e2e8:	cmp	r3, fp
   1e2ec:	cmpeq	r2, sl
   1e2f0:	ldrd	r2, [sp, #16]
   1e2f4:	umull	r6, r7, r1, r6
   1e2f8:	orrhi	r0, r0, #1
   1e2fc:	cmp	fp, r3
   1e300:	cmpeq	sl, r2
   1e304:	add	r7, ip, r7
   1e308:	bcc	1ec14 <__assert_fail@plt+0xd800>
   1e30c:	mov	sl, r6
   1e310:	mov	fp, r7
   1e314:	strd	r6, [sp, #24]
   1e318:	mul	r3, r1, fp
   1e31c:	umull	r6, r7, r1, sl
   1e320:	mla	ip, lr, sl, r3
   1e324:	ldrd	sl, [sp]
   1e328:	ldrd	r2, [sp, #16]
   1e32c:	add	r7, ip, r7
   1e330:	cmp	fp, r3
   1e334:	cmpeq	sl, r2
   1e338:	mov	r3, fp
   1e33c:	mov	r2, sl
   1e340:	ldrd	sl, [sp, #24]
   1e344:	orrcc	r0, r0, #1
   1e348:	str	r0, [sp, #16]
   1e34c:	cmp	r3, fp
   1e350:	cmpeq	r2, sl
   1e354:	bcs	1e8ac <__assert_fail@plt+0xd498>
   1e358:	mvn	r2, #0
   1e35c:	mvn	r3, #0
   1e360:	mul	ip, lr, r2
   1e364:	ldrd	sl, [sp]
   1e368:	mla	ip, r1, r3, ip
   1e36c:	umull	r6, r7, r2, r1
   1e370:	ldrd	r0, [sp, #24]
   1e374:	add	r7, ip, r7
   1e378:	cmp	fp, r1
   1e37c:	ldr	r1, [sp, #16]
   1e380:	cmpeq	sl, r0
   1e384:	orrcc	r1, r1, #1
   1e388:	cmp	r3, fp
   1e38c:	cmpeq	r2, sl
   1e390:	mvnhi	r0, #0
   1e394:	movls	ip, r7
   1e398:	movhi	ip, r0
   1e39c:	movls	r0, r6
   1e3a0:	cmp	r3, fp
   1e3a4:	cmpeq	r2, sl
   1e3a8:	mov	r7, ip
   1e3ac:	mov	r6, r0
   1e3b0:	movls	ip, r1
   1e3b4:	orrhi	ip, r1, #1
   1e3b8:	b	1e244 <__assert_fail@plt+0xce30>
   1e3bc:	ldrd	sl, [sp]
   1e3c0:	umull	r2, r3, r6, r1
   1e3c4:	mul	r0, r6, lr
   1e3c8:	cmp	r7, fp
   1e3cc:	cmpeq	r6, sl
   1e3d0:	mvnhi	r2, #0
   1e3d4:	mla	r0, r1, r7, r0
   1e3d8:	umull	sl, fp, r2, r1
   1e3dc:	add	r3, r0, r3
   1e3e0:	mul	r0, lr, r2
   1e3e4:	mvnhi	r3, #0
   1e3e8:	strd	sl, [sp, #16]
   1e3ec:	ldrd	sl, [sp]
   1e3f0:	mla	r0, r1, r3, r0
   1e3f4:	ldr	ip, [sp, #20]
   1e3f8:	cmp	r3, fp
   1e3fc:	add	r0, r0, ip
   1e400:	cmpeq	r2, sl
   1e404:	str	r0, [sp, #20]
   1e408:	mvnhi	sl, #0
   1e40c:	mvnhi	fp, #0
   1e410:	strdhi	sl, [sp, #16]
   1e414:	ldrdhi	sl, [sp]
   1e418:	ldr	r0, [sp, #16]
   1e41c:	cmp	r3, fp
   1e420:	ldr	r3, [sp, #20]
   1e424:	mul	r0, lr, r0
   1e428:	cmpeq	r2, sl
   1e42c:	mla	r0, r1, r3, r0
   1e430:	ldr	r3, [sp, #16]
   1e434:	umull	r2, r3, r3, r1
   1e438:	strd	r2, [sp, #24]
   1e43c:	movhi	r3, #1
   1e440:	movls	r3, #0
   1e444:	cmp	r7, fp
   1e448:	cmpeq	r6, sl
   1e44c:	ldrd	r6, [sp, #16]
   1e450:	ldr	r2, [sp, #28]
   1e454:	movls	ip, r3
   1e458:	orrhi	ip, r3, #1
   1e45c:	cmp	r7, fp
   1e460:	add	r2, r0, r2
   1e464:	cmpeq	r6, sl
   1e468:	str	r2, [sp, #28]
   1e46c:	mvnhi	r2, #0
   1e470:	mvnhi	r3, #0
   1e474:	strdhi	r2, [sp, #24]
   1e478:	ldrd	r6, [sp, #24]
   1e47c:	mul	r2, r1, r7
   1e480:	umull	sl, fp, r1, r6
   1e484:	mla	r3, lr, r6, r2
   1e488:	ldrd	r6, [sp]
   1e48c:	str	r3, [sp, #32]
   1e490:	ldrd	r2, [sp, #16]
   1e494:	cmp	r3, r7
   1e498:	cmpeq	r2, r6
   1e49c:	ldrd	r2, [sp, #24]
   1e4a0:	orrhi	ip, ip, #1
   1e4a4:	cmp	r3, r7
   1e4a8:	ldr	r3, [sp, #32]
   1e4ac:	cmpeq	r2, r6
   1e4b0:	add	r2, r3, fp
   1e4b4:	mov	fp, r2
   1e4b8:	bhi	1ebfc <__assert_fail@plt+0xd7e8>
   1e4bc:	strd	sl, [sp, #16]
   1e4c0:	mul	r2, r1, fp
   1e4c4:	umull	r6, r7, r1, sl
   1e4c8:	mla	r3, lr, sl, r2
   1e4cc:	ldrd	sl, [sp]
   1e4d0:	str	r3, [sp, #32]
   1e4d4:	ldrd	r2, [sp, #24]
   1e4d8:	cmp	r3, fp
   1e4dc:	cmpeq	r2, sl
   1e4e0:	ldrd	r2, [sp, #16]
   1e4e4:	orrhi	ip, ip, #1
   1e4e8:	cmp	fp, r3
   1e4ec:	ldr	r3, [sp, #32]
   1e4f0:	cmpeq	sl, r2
   1e4f4:	add	r2, r3, r7
   1e4f8:	mov	r7, r2
   1e4fc:	mvncc	r7, #0
   1e500:	mvncc	r6, #0
   1e504:	mul	r2, r1, r7
   1e508:	mov	sl, r6
   1e50c:	strd	r6, [sp, #24]
   1e510:	mla	r0, lr, sl, r2
   1e514:	ldrd	r2, [sp, #16]
   1e518:	ldrd	sl, [sp]
   1e51c:	umull	r6, r7, r1, r6
   1e520:	cmp	fp, r3
   1e524:	cmpeq	sl, r2
   1e528:	mov	r3, fp
   1e52c:	mov	r2, sl
   1e530:	ldrd	sl, [sp, #24]
   1e534:	orrcc	ip, ip, #1
   1e538:	add	r7, r0, r7
   1e53c:	cmp	r3, fp
   1e540:	cmpeq	r2, sl
   1e544:	mvncc	r6, #0
   1e548:	mvncc	r7, #0
   1e54c:	umull	sl, fp, r1, r6
   1e550:	mul	r3, r1, r7
   1e554:	strd	sl, [sp, #16]
   1e558:	mla	r0, lr, r6, r3
   1e55c:	ldrd	sl, [sp, #24]
   1e560:	ldrd	r2, [sp]
   1e564:	cmp	r3, fp
   1e568:	cmpeq	r2, sl
   1e56c:	orrcc	ip, ip, #1
   1e570:	cmp	r3, r7
   1e574:	ldr	r3, [sp, #20]
   1e578:	cmpeq	r2, r6
   1e57c:	add	r3, r0, r3
   1e580:	str	r3, [sp, #20]
   1e584:	mvncc	r2, #0
   1e588:	mvncc	r3, #0
   1e58c:	ldrdcs	r2, [sp, #16]
   1e590:	ldrd	sl, [sp]
   1e594:	mul	r0, r1, r3
   1e598:	cmp	fp, r7
   1e59c:	str	r0, [sp, #16]
   1e5a0:	cmpeq	sl, r6
   1e5a4:	ldr	r6, [sp, #16]
   1e5a8:	umull	r0, r1, r1, r2
   1e5ac:	mla	lr, lr, r2, r6
   1e5b0:	orrcc	ip, ip, #1
   1e5b4:	cmp	r3, fp
   1e5b8:	cmpeq	r2, sl
   1e5bc:	add	r1, lr, r1
   1e5c0:	bls	1e5cc <__assert_fail@plt+0xd1b8>
   1e5c4:	mvn	r0, #0
   1e5c8:	mov	r1, r0
   1e5cc:	cmp	r3, fp
   1e5d0:	cmpeq	r2, sl
   1e5d4:	mov	r6, r0
   1e5d8:	mov	r7, r1
   1e5dc:	orrhi	ip, ip, #1
   1e5e0:	b	1e244 <__assert_fail@plt+0xce30>
   1e5e4:	ldrd	sl, [sp]
   1e5e8:	umull	r2, r3, r6, r1
   1e5ec:	mul	r0, r6, lr
   1e5f0:	cmp	r7, fp
   1e5f4:	cmpeq	r6, sl
   1e5f8:	mvnhi	r2, #0
   1e5fc:	mla	r0, r1, r7, r0
   1e600:	umull	sl, fp, r1, r2
   1e604:	add	r3, r0, r3
   1e608:	mvnhi	r3, #0
   1e60c:	strd	sl, [sp, #16]
   1e610:	mul	r0, r1, r3
   1e614:	ldrd	sl, [sp]
   1e618:	mla	r0, lr, r2, r0
   1e61c:	ldr	ip, [sp, #20]
   1e620:	cmp	fp, r3
   1e624:	add	r0, r0, ip
   1e628:	cmpeq	sl, r2
   1e62c:	str	r0, [sp, #20]
   1e630:	mvncc	sl, #0
   1e634:	mvncc	fp, #0
   1e638:	strdcc	sl, [sp, #16]
   1e63c:	ldrdcc	sl, [sp]
   1e640:	ldr	r0, [sp, #16]
   1e644:	cmp	fp, r3
   1e648:	cmpeq	sl, r2
   1e64c:	mul	r0, lr, r0
   1e650:	ldr	r2, [sp, #20]
   1e654:	ldr	r3, [sp, #16]
   1e658:	movcc	ip, #1
   1e65c:	movcs	ip, #0
   1e660:	cmp	r7, fp
   1e664:	cmpeq	r6, sl
   1e668:	ldrd	r6, [sp, #16]
   1e66c:	mla	r0, r1, r2, r0
   1e670:	umull	r2, r3, r3, r1
   1e674:	orrhi	ip, ip, #1
   1e678:	cmp	r7, fp
   1e67c:	cmpeq	r6, sl
   1e680:	add	r3, r0, r3
   1e684:	mvnhi	r3, #0
   1e688:	mvnhi	r2, #0
   1e68c:	mul	r0, r1, r3
   1e690:	cmp	r7, fp
   1e694:	str	r0, [sp, #24]
   1e698:	cmpeq	r6, sl
   1e69c:	ldr	r6, [sp, #24]
   1e6a0:	umull	r0, r1, r1, r2
   1e6a4:	mla	lr, lr, r2, r6
   1e6a8:	orrhi	ip, ip, #1
   1e6ac:	cmp	fp, r3
   1e6b0:	cmpeq	sl, r2
   1e6b4:	mvncc	r0, #0
   1e6b8:	add	r1, lr, r1
   1e6bc:	movcc	r1, r0
   1e6c0:	b	1e230 <__assert_fail@plt+0xce1c>
   1e6c4:	cmp	r6, #0
   1e6c8:	sbcs	r3, r7, #0
   1e6cc:	blt	1eb64 <__assert_fail@plt+0xd750>
   1e6d0:	adds	r6, r6, r6
   1e6d4:	adc	r7, r7, r7
   1e6d8:	mov	ip, #0
   1e6dc:	b	1e244 <__assert_fail@plt+0xce30>
   1e6e0:	mov	ip, #0
   1e6e4:	b	1e244 <__assert_fail@plt+0xce30>
   1e6e8:	ldr	r3, [pc, #1396]	; 1ec64 <__assert_fail@plt+0xd850>
   1e6ec:	mvn	r2, #0
   1e6f0:	cmp	r7, r3
   1e6f4:	cmpeq	r6, r2
   1e6f8:	bhi	1eb64 <__assert_fail@plt+0xd750>
   1e6fc:	lsl	r3, r7, #9
   1e700:	orr	r3, r3, r6, lsr #23
   1e704:	lsl	r2, r6, #9
   1e708:	mov	r6, r2
   1e70c:	mov	r7, r3
   1e710:	mov	ip, #0
   1e714:	b	1e244 <__assert_fail@plt+0xce30>
   1e718:	ldrd	sl, [sp]
   1e71c:	umull	r2, r3, r6, r1
   1e720:	mul	r0, r6, lr
   1e724:	cmp	r7, fp
   1e728:	cmpeq	r6, sl
   1e72c:	mvnhi	r2, #0
   1e730:	mla	r0, r1, r7, r0
   1e734:	umull	sl, fp, r2, r1
   1e738:	add	r3, r0, r3
   1e73c:	mul	r0, lr, r2
   1e740:	mvnhi	r3, #0
   1e744:	strd	sl, [sp, #16]
   1e748:	ldrd	sl, [sp]
   1e74c:	mla	r0, r1, r3, r0
   1e750:	ldr	ip, [sp, #20]
   1e754:	cmp	r3, fp
   1e758:	add	r0, r0, ip
   1e75c:	cmpeq	r2, sl
   1e760:	str	r0, [sp, #20]
   1e764:	mvnhi	sl, #0
   1e768:	mvnhi	fp, #0
   1e76c:	strdhi	sl, [sp, #16]
   1e770:	ldrdhi	sl, [sp]
   1e774:	ldr	r0, [sp, #16]
   1e778:	cmp	r3, fp
   1e77c:	ldr	r3, [sp, #20]
   1e780:	mul	r0, lr, r0
   1e784:	cmpeq	r2, sl
   1e788:	mla	r0, r1, r3, r0
   1e78c:	ldr	r3, [sp, #16]
   1e790:	umull	r2, r3, r3, r1
   1e794:	strd	r2, [sp, #24]
   1e798:	movhi	r3, #1
   1e79c:	movls	r3, #0
   1e7a0:	cmp	r7, fp
   1e7a4:	cmpeq	r6, sl
   1e7a8:	ldrd	r6, [sp, #16]
   1e7ac:	ldr	r2, [sp, #28]
   1e7b0:	movls	ip, r3
   1e7b4:	orrhi	ip, r3, #1
   1e7b8:	cmp	r7, fp
   1e7bc:	add	r2, r0, r2
   1e7c0:	cmpeq	r6, sl
   1e7c4:	str	r2, [sp, #28]
   1e7c8:	mvnhi	r2, #0
   1e7cc:	mvnhi	r3, #0
   1e7d0:	strdhi	r2, [sp, #24]
   1e7d4:	ldrd	r6, [sp, #24]
   1e7d8:	mul	r2, lr, r6
   1e7dc:	umull	sl, fp, r6, r1
   1e7e0:	mla	r3, r1, r7, r2
   1e7e4:	ldrd	r6, [sp]
   1e7e8:	str	r3, [sp, #32]
   1e7ec:	ldrd	r2, [sp, #16]
   1e7f0:	cmp	r3, r7
   1e7f4:	cmpeq	r2, r6
   1e7f8:	ldrd	r2, [sp, #24]
   1e7fc:	orrhi	ip, ip, #1
   1e800:	cmp	r3, r7
   1e804:	ldr	r3, [sp, #32]
   1e808:	cmpeq	r2, r6
   1e80c:	add	r2, r3, fp
   1e810:	mov	fp, r2
   1e814:	bhi	1ec2c <__assert_fail@plt+0xd818>
   1e818:	strd	sl, [sp, #16]
   1e81c:	mul	r2, lr, sl
   1e820:	umull	r6, r7, sl, r1
   1e824:	mla	r3, r1, fp, r2
   1e828:	ldrd	sl, [sp]
   1e82c:	str	r3, [sp, #32]
   1e830:	ldrd	r2, [sp, #24]
   1e834:	cmp	r3, fp
   1e838:	cmpeq	r2, sl
   1e83c:	ldrd	r2, [sp, #16]
   1e840:	orrhi	ip, ip, #1
   1e844:	cmp	r3, fp
   1e848:	ldr	r3, [sp, #32]
   1e84c:	cmpeq	r2, sl
   1e850:	add	r2, r3, r7
   1e854:	mov	r7, r2
   1e858:	mvnhi	r7, #0
   1e85c:	mvnhi	r6, #0
   1e860:	mul	r2, r1, r7
   1e864:	mov	sl, r6
   1e868:	strd	r6, [sp, #24]
   1e86c:	mla	r0, lr, sl, r2
   1e870:	ldrd	sl, [sp]
   1e874:	ldrd	r2, [sp, #16]
   1e878:	umull	r6, r7, r1, r6
   1e87c:	cmp	r3, fp
   1e880:	cmpeq	r2, sl
   1e884:	mov	r3, ip
   1e888:	orrhi	r3, r3, #1
   1e88c:	mov	r2, sl
   1e890:	str	r3, [sp, #16]
   1e894:	mov	r3, fp
   1e898:	ldrd	sl, [sp, #24]
   1e89c:	add	r7, r0, r7
   1e8a0:	cmp	r3, fp
   1e8a4:	cmpeq	r2, sl
   1e8a8:	bcc	1e358 <__assert_fail@plt+0xcf44>
   1e8ac:	mov	r2, r6
   1e8b0:	mov	r3, r7
   1e8b4:	b	1e360 <__assert_fail@plt+0xcf4c>
   1e8b8:	ldrd	sl, [sp]
   1e8bc:	umull	r2, r3, r6, r1
   1e8c0:	mul	r0, r6, lr
   1e8c4:	cmp	r7, fp
   1e8c8:	cmpeq	r6, sl
   1e8cc:	mvnhi	r2, #0
   1e8d0:	mla	r0, r1, r7, r0
   1e8d4:	umull	sl, fp, r2, r1
   1e8d8:	add	r3, r0, r3
   1e8dc:	mul	r0, lr, r2
   1e8e0:	mvnhi	r3, #0
   1e8e4:	strd	sl, [sp, #16]
   1e8e8:	ldrd	sl, [sp]
   1e8ec:	mla	r0, r1, r3, r0
   1e8f0:	ldr	ip, [sp, #20]
   1e8f4:	cmp	r3, fp
   1e8f8:	add	r0, r0, ip
   1e8fc:	cmpeq	r2, sl
   1e900:	str	r0, [sp, #20]
   1e904:	mvnhi	sl, #0
   1e908:	mvnhi	fp, #0
   1e90c:	strdhi	sl, [sp, #16]
   1e910:	ldrdhi	sl, [sp]
   1e914:	ldr	r0, [sp, #16]
   1e918:	cmp	r3, fp
   1e91c:	ldr	ip, [sp, #20]
   1e920:	mul	r0, lr, r0
   1e924:	ldr	r3, [sp, #16]
   1e928:	cmpeq	r2, sl
   1e92c:	mla	r0, r1, ip, r0
   1e930:	umull	r2, r3, r3, r1
   1e934:	movhi	r1, #1
   1e938:	movls	r1, #0
   1e93c:	cmp	r7, fp
   1e940:	cmpeq	r6, sl
   1e944:	ldrd	r6, [sp, #16]
   1e948:	movls	ip, r1
   1e94c:	orrhi	ip, r1, #1
   1e950:	cmp	r7, fp
   1e954:	cmpeq	r6, sl
   1e958:	mvnhi	r2, #0
   1e95c:	add	r3, r0, r3
   1e960:	movhi	r3, r2
   1e964:	cmp	r7, fp
   1e968:	cmpeq	r6, sl
   1e96c:	mov	r7, r3
   1e970:	mov	r6, r2
   1e974:	orrhi	ip, ip, #1
   1e978:	b	1e244 <__assert_fail@plt+0xce30>
   1e97c:	ldrd	sl, [sp]
   1e980:	umull	r2, r3, r6, r1
   1e984:	mul	r0, r6, lr
   1e988:	cmp	r7, fp
   1e98c:	cmpeq	r6, sl
   1e990:	mvnhi	r2, #0
   1e994:	mla	r0, r1, r7, r0
   1e998:	umull	sl, fp, r1, r2
   1e99c:	add	r3, r0, r3
   1e9a0:	mvnhi	r3, #0
   1e9a4:	strd	sl, [sp, #16]
   1e9a8:	mul	r0, r1, r3
   1e9ac:	ldrd	sl, [sp]
   1e9b0:	mla	r0, lr, r2, r0
   1e9b4:	ldr	ip, [sp, #20]
   1e9b8:	cmp	fp, r3
   1e9bc:	add	r0, r0, ip
   1e9c0:	cmpeq	sl, r2
   1e9c4:	str	r0, [sp, #20]
   1e9c8:	mvncc	sl, #0
   1e9cc:	mvncc	fp, #0
   1e9d0:	strdcc	sl, [sp, #16]
   1e9d4:	ldrdcc	sl, [sp]
   1e9d8:	ldr	r0, [sp, #16]
   1e9dc:	cmp	fp, r3
   1e9e0:	ldr	r3, [sp, #20]
   1e9e4:	mul	r0, lr, r0
   1e9e8:	cmpeq	sl, r2
   1e9ec:	mla	r0, r1, r3, r0
   1e9f0:	ldr	r3, [sp, #16]
   1e9f4:	umull	r2, r3, r3, r1
   1e9f8:	strd	r2, [sp, #24]
   1e9fc:	movcc	r3, #1
   1ea00:	movcs	r3, #0
   1ea04:	cmp	r7, fp
   1ea08:	cmpeq	r6, sl
   1ea0c:	movls	ip, r3
   1ea10:	orrhi	ip, r3, #1
   1ea14:	ldrd	r2, [sp, #16]
   1ea18:	cmp	r3, fp
   1ea1c:	ldr	r3, [sp, #28]
   1ea20:	cmpeq	r2, sl
   1ea24:	add	r3, r0, r3
   1ea28:	str	r3, [sp, #28]
   1ea2c:	bhi	1ebe4 <__assert_fail@plt+0xd7d0>
   1ea30:	ldrd	r2, [sp, #24]
   1ea34:	mov	sl, r2
   1ea38:	mov	fp, r3
   1ea3c:	mul	r2, lr, sl
   1ea40:	umull	r6, r7, sl, r1
   1ea44:	mla	r0, r1, fp, r2
   1ea48:	ldrd	r2, [sp]
   1ea4c:	add	r7, r0, r7
   1ea50:	mov	sl, r2
   1ea54:	mov	fp, r3
   1ea58:	strd	r2, [sp, #32]
   1ea5c:	ldrd	r2, [sp, #16]
   1ea60:	cmp	r3, fp
   1ea64:	cmpeq	r2, sl
   1ea68:	ldrd	r2, [sp, #32]
   1ea6c:	ldrd	sl, [sp, #24]
   1ea70:	orrhi	ip, ip, #1
   1ea74:	cmp	fp, r3
   1ea78:	cmpeq	sl, r2
   1ea7c:	mvnhi	r6, #0
   1ea80:	mvnhi	r7, #0
   1ea84:	umull	sl, fp, r6, r1
   1ea88:	mul	r3, lr, r6
   1ea8c:	strd	sl, [sp, #16]
   1ea90:	mla	r0, r1, r7, r3
   1ea94:	ldrd	sl, [sp, #24]
   1ea98:	ldrd	r2, [sp]
   1ea9c:	cmp	fp, r3
   1eaa0:	cmpeq	sl, r2
   1eaa4:	orrhi	ip, ip, #1
   1eaa8:	cmp	r7, r3
   1eaac:	ldr	r3, [sp, #20]
   1eab0:	cmpeq	r6, r2
   1eab4:	add	r3, r0, r3
   1eab8:	str	r3, [sp, #20]
   1eabc:	mvnhi	r2, #0
   1eac0:	mvnhi	r3, #0
   1eac4:	ldrdls	r2, [sp, #16]
   1eac8:	ldrd	sl, [sp]
   1eacc:	mul	r0, r1, r3
   1ead0:	cmp	r7, fp
   1ead4:	str	r0, [sp, #16]
   1ead8:	cmpeq	r6, sl
   1eadc:	ldr	r6, [sp, #16]
   1eae0:	umull	r0, r1, r1, r2
   1eae4:	mla	lr, lr, r2, r6
   1eae8:	orrhi	ip, ip, #1
   1eaec:	cmp	r3, fp
   1eaf0:	cmpeq	r2, sl
   1eaf4:	add	r1, lr, r1
   1eaf8:	bls	1e5cc <__assert_fail@plt+0xd1b8>
   1eafc:	b	1e5c4 <__assert_fail@plt+0xd1b0>
   1eb00:	ldr	r3, [pc, #344]	; 1ec60 <__assert_fail@plt+0xd84c>
   1eb04:	mvn	r2, #0
   1eb08:	cmp	r7, r3
   1eb0c:	cmpeq	r6, r2
   1eb10:	bhi	1eb64 <__assert_fail@plt+0xd750>
   1eb14:	lsl	r3, r7, #10
   1eb18:	orr	r3, r3, r6, lsr #22
   1eb1c:	lsl	r2, r6, #10
   1eb20:	mov	r6, r2
   1eb24:	mov	r7, r3
   1eb28:	mov	ip, #0
   1eb2c:	b	1e244 <__assert_fail@plt+0xce30>
   1eb30:	strd	r6, [r8]
   1eb34:	orr	r4, r4, #2
   1eb38:	b	1df14 <__assert_fail@plt+0xcb00>
   1eb3c:	ldrd	r2, [sp]
   1eb40:	cmp	r7, r3
   1eb44:	cmpeq	r6, r2
   1eb48:	bhi	1eb64 <__assert_fail@plt+0xd750>
   1eb4c:	mul	r3, r6, lr
   1eb50:	mov	ip, #0
   1eb54:	mla	r3, r1, r7, r3
   1eb58:	umull	r6, r7, r6, r1
   1eb5c:	add	r7, r3, r7
   1eb60:	b	1e244 <__assert_fail@plt+0xce30>
   1eb64:	mvn	r6, #0
   1eb68:	mvn	r7, #0
   1eb6c:	mov	ip, #1
   1eb70:	b	1e244 <__assert_fail@plt+0xce30>
   1eb74:	ldrb	r3, [r9, #2]
   1eb78:	mvn	r2, #0
   1eb7c:	mov	r1, #1024	; 0x400
   1eb80:	cmp	r3, #66	; 0x42
   1eb84:	ldr	r3, [pc, #212]	; 1ec60 <__assert_fail@plt+0xd84c>
   1eb88:	mov	lr, #0
   1eb8c:	strd	r2, [sp]
   1eb90:	moveq	r3, #3
   1eb94:	streq	r3, [sp, #12]
   1eb98:	movne	r3, #1
   1eb9c:	strne	r3, [sp, #12]
   1eba0:	b	1e0f0 <__assert_fail@plt+0xccdc>
   1eba4:	add	r3, pc, #172	; 0xac
   1eba8:	ldrd	r2, [r3]
   1ebac:	mov	r1, #1000	; 0x3e8
   1ebb0:	mov	lr, #0
   1ebb4:	strd	r2, [sp]
   1ebb8:	mov	r3, #2
   1ebbc:	str	r3, [sp, #12]
   1ebc0:	b	1e0f0 <__assert_fail@plt+0xccdc>
   1ebc4:	ldr	r3, [pc, #148]	; 1ec60 <__assert_fail@plt+0xd84c>
   1ebc8:	mvn	r2, #0
   1ebcc:	mov	lr, r0
   1ebd0:	strd	r2, [sp]
   1ebd4:	mov	r3, #1
   1ebd8:	mov	r1, #1024	; 0x400
   1ebdc:	str	r3, [sp, #12]
   1ebe0:	b	1e0f0 <__assert_fail@plt+0xccdc>
   1ebe4:	mvn	r2, #0
   1ebe8:	mvn	r3, #0
   1ebec:	mov	sl, r2
   1ebf0:	strd	r2, [sp, #24]
   1ebf4:	mov	fp, r3
   1ebf8:	b	1ea3c <__assert_fail@plt+0xd628>
   1ebfc:	mvn	r2, #0
   1ec00:	mvn	r3, #0
   1ec04:	mov	sl, r2
   1ec08:	strd	r2, [sp, #16]
   1ec0c:	mov	fp, r3
   1ec10:	b	1e4c0 <__assert_fail@plt+0xd0ac>
   1ec14:	mvn	r2, #0
   1ec18:	mvn	r3, #0
   1ec1c:	mov	sl, r2
   1ec20:	strd	r2, [sp, #24]
   1ec24:	mov	fp, r3
   1ec28:	b	1e318 <__assert_fail@plt+0xcf04>
   1ec2c:	mvn	r2, #0
   1ec30:	mvn	r3, #0
   1ec34:	mov	sl, r2
   1ec38:	strd	r2, [sp, #16]
   1ec3c:	mov	fp, r3
   1ec40:	b	1e81c <__assert_fail@plt+0xd408>
   1ec44:	ldr	r3, [pc, #28]	; 1ec68 <__assert_fail@plt+0xd854>
   1ec48:	mov	r2, #85	; 0x55
   1ec4c:	ldr	r1, [pc, #24]	; 1ec6c <__assert_fail@plt+0xd858>
   1ec50:	ldr	r0, [pc, #24]	; 1ec70 <__assert_fail@plt+0xd85c>
   1ec54:	bl	11414 <__assert_fail@plt>
   1ec58:	blmi	ff1c8c1c <optarg@@GLIBC_2.4+0xff196a54>
   1ec5c:	subeq	r8, r1, r7, lsr r9
   1ec60:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   1ec64:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   1ec68:	andeq	r1, r2, ip, asr r3
   1ec6c:	andeq	r1, r2, r8, ror #6
   1ec70:	andeq	r1, r2, r8, ror r3
   1ec74:	cmp	r1, #0
   1ec78:	cmpne	r0, #0
   1ec7c:	moveq	r1, #1
   1ec80:	moveq	r0, r1
   1ec84:	umull	r2, r3, r0, r1
   1ec88:	adds	r3, r3, #0
   1ec8c:	movne	r3, #1
   1ec90:	cmp	r2, #0
   1ec94:	blt	1eca4 <__assert_fail@plt+0xd890>
   1ec98:	cmp	r3, #0
   1ec9c:	bne	1eca4 <__assert_fail@plt+0xd890>
   1eca0:	b	110a8 <calloc@plt>
   1eca4:	push	{r4, lr}
   1eca8:	bl	112dc <__errno_location@plt>
   1ecac:	mov	r3, #12
   1ecb0:	str	r3, [r0]
   1ecb4:	mov	r0, #0
   1ecb8:	pop	{r4, pc}
   1ecbc:	cmp	r0, #0
   1ecc0:	moveq	r0, #1
   1ecc4:	cmp	r0, #0
   1ecc8:	blt	1ecd0 <__assert_fail@plt+0xd8bc>
   1eccc:	b	11240 <malloc@plt>
   1ecd0:	push	{r4, lr}
   1ecd4:	bl	112dc <__errno_location@plt>
   1ecd8:	mov	r3, #12
   1ecdc:	str	r3, [r0]
   1ece0:	mov	r0, #0
   1ece4:	pop	{r4, pc}
   1ece8:	cmp	r0, #0
   1ecec:	beq	1ed10 <__assert_fail@plt+0xd8fc>
   1ecf0:	cmp	r1, #0
   1ecf4:	push	{lr}		; (str lr, [sp, #-4]!)
   1ecf8:	sub	sp, sp, #12
   1ecfc:	beq	1ed18 <__assert_fail@plt+0xd904>
   1ed00:	blt	1ed30 <__assert_fail@plt+0xd91c>
   1ed04:	add	sp, sp, #12
   1ed08:	pop	{lr}		; (ldr lr, [sp], #4)
   1ed0c:	b	11180 <realloc@plt>
   1ed10:	mov	r0, r1
   1ed14:	b	1ecbc <__assert_fail@plt+0xd8a8>
   1ed18:	str	r1, [sp, #4]
   1ed1c:	bl	16f1c <__assert_fail@plt+0x5b08>
   1ed20:	ldr	r3, [sp, #4]
   1ed24:	mov	r0, r3
   1ed28:	add	sp, sp, #12
   1ed2c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ed30:	bl	112dc <__errno_location@plt>
   1ed34:	mov	r2, #12
   1ed38:	mov	r3, #0
   1ed3c:	str	r2, [r0]
   1ed40:	b	1ed24 <__assert_fail@plt+0xd910>
   1ed44:	andeq	r0, r0, r0
   1ed48:	push	{r4, r5, r6, lr}
   1ed4c:	mov	r6, r0
   1ed50:	ldr	r4, [pc, #96]	; 1edb8 <__assert_fail@plt+0xd9a4>
   1ed54:	mov	r5, r1
   1ed58:	ldr	r2, [r4]
   1ed5c:	cmp	r2, #0
   1ed60:	beq	1ed94 <__assert_fail@plt+0xd980>
   1ed64:	ldr	r2, [r4]
   1ed68:	cmp	r2, #0
   1ed6c:	beq	1ed80 <__assert_fail@plt+0xd96c>
   1ed70:	mov	r1, r5
   1ed74:	mov	r0, r6
   1ed78:	pop	{r4, r5, r6, lr}
   1ed7c:	b	11354 <strtod_l@plt>
   1ed80:	cmp	r5, #0
   1ed84:	beq	1eda8 <__assert_fail@plt+0xd994>
   1ed88:	str	r6, [r5]
   1ed8c:	vldr	d0, [pc, #28]	; 1edb0 <__assert_fail@plt+0xd99c>
   1ed90:	pop	{r4, r5, r6, pc}
   1ed94:	ldr	r1, [pc, #32]	; 1edbc <__assert_fail@plt+0xd9a8>
   1ed98:	ldr	r0, [pc, #32]	; 1edc0 <__assert_fail@plt+0xd9ac>
   1ed9c:	bl	1139c <newlocale@plt>
   1eda0:	str	r0, [r4]
   1eda4:	b	1ed64 <__assert_fail@plt+0xd950>
   1eda8:	vldr	d0, [pc]	; 1edb0 <__assert_fail@plt+0xd99c>
   1edac:	pop	{r4, r5, r6, pc}
	...
   1edb8:	andeq	r2, r3, r0, lsr #6
   1edbc:	andeq	r1, r2, r0, lsr #7
   1edc0:			; <UNDEFINED> instruction: 0x00001fbf
   1edc4:	push	{r4, r5, r6, lr}
   1edc8:	mov	r4, r0
   1edcc:	bl	11204 <__fpending@plt>
   1edd0:	ldr	r5, [r4]
   1edd4:	and	r5, r5, #32
   1edd8:	mov	r6, r0
   1eddc:	mov	r0, r4
   1ede0:	bl	1ef0c <__assert_fail@plt+0xdaf8>
   1ede4:	cmp	r5, #0
   1ede8:	mov	r4, r0
   1edec:	bne	1ee0c <__assert_fail@plt+0xd9f8>
   1edf0:	cmp	r0, #0
   1edf4:	beq	1ee04 <__assert_fail@plt+0xd9f0>
   1edf8:	cmp	r6, #0
   1edfc:	beq	1ee28 <__assert_fail@plt+0xda14>
   1ee00:	mvn	r4, #0
   1ee04:	mov	r0, r4
   1ee08:	pop	{r4, r5, r6, pc}
   1ee0c:	cmp	r0, #0
   1ee10:	bne	1ee00 <__assert_fail@plt+0xd9ec>
   1ee14:	bl	112dc <__errno_location@plt>
   1ee18:	str	r4, [r0]
   1ee1c:	mvn	r4, #0
   1ee20:	mov	r0, r4
   1ee24:	pop	{r4, r5, r6, pc}
   1ee28:	bl	112dc <__errno_location@plt>
   1ee2c:	ldr	r4, [r0]
   1ee30:	subs	r4, r4, #9
   1ee34:	mvnne	r4, #0
   1ee38:	mov	r0, r4
   1ee3c:	pop	{r4, r5, r6, pc}
   1ee40:	vldr	d7, [pc, #160]	; 1eee8 <__assert_fail@plt+0xdad4>
   1ee44:	vcmpe.f64	d0, d7
   1ee48:	vmrs	APSR_nzcv, fpscr
   1ee4c:	ble	1eed8 <__assert_fail@plt+0xdac4>
   1ee50:	vldr	d7, [pc, #152]	; 1eef0 <__assert_fail@plt+0xdadc>
   1ee54:	vcmpe.f64	d0, d7
   1ee58:	vmrs	APSR_nzcv, fpscr
   1ee5c:	bpl	1eec8 <__assert_fail@plt+0xdab4>
   1ee60:	vcvt.s32.f64	s14, d0
   1ee64:	vldr	d6, [pc, #140]	; 1eef8 <__assert_fail@plt+0xdae4>
   1ee68:	ldr	r2, [pc, #144]	; 1ef00 <__assert_fail@plt+0xdaec>
   1ee6c:	ldr	ip, [pc, #144]	; 1ef04 <__assert_fail@plt+0xdaf0>
   1ee70:	vcvt.f64.s32	d5, s14
   1ee74:	vsub.f64	d0, d0, d5
   1ee78:	vmul.f64	d0, d0, d6
   1ee7c:	vcvt.s32.f64	s15, d0
   1ee80:	vcvt.f64.s32	d6, s15
   1ee84:	vmov	r1, s15
   1ee88:	vcmpe.f64	d0, d6
   1ee8c:	vmrs	APSR_nzcv, fpscr
   1ee90:	movgt	r3, #1
   1ee94:	movle	r3, #0
   1ee98:	add	r3, r1, r3
   1ee9c:	smull	r2, r1, r2, r3
   1eea0:	asr	r2, r3, #31
   1eea4:	rsb	r2, r2, r1, asr #28
   1eea8:	vmov	r1, s14
   1eeac:	add	r1, r2, r1
   1eeb0:	mul	r2, ip, r2
   1eeb4:	subs	r3, r3, r2
   1eeb8:	submi	r1, r1, #1
   1eebc:	addmi	r3, r3, ip
   1eec0:	stm	r0, {r1, r3}
   1eec4:	bx	lr
   1eec8:	ldr	r3, [pc, #56]	; 1ef08 <__assert_fail@plt+0xdaf4>
   1eecc:	mvn	r2, #-2147483648	; 0x80000000
   1eed0:	stm	r0, {r2, r3}
   1eed4:	bx	lr
   1eed8:	mov	r2, #-2147483648	; 0x80000000
   1eedc:	mov	r3, #0
   1eee0:	stm	r0, {r2, r3}
   1eee4:	bx	lr
   1eee8:	andeq	r0, r0, r0
   1eeec:	mvngt	r0, r0
   1eef0:	andeq	r0, r0, r0
   1eef4:	mvnmi	r0, r0
   1eef8:	andeq	r0, r0, r0
   1eefc:	bicmi	ip, sp, r5, ror #26
   1ef00:	ldrtmi	r2, [r8], #4001	; 0xfa1
   1ef04:	blcc	fe6d170c <optarg@@GLIBC_2.4+0xfe69f544>
   1ef08:	blcc	fe6d170c <optarg@@GLIBC_2.4+0xfe69f544>
   1ef0c:	push	{r4, r5, lr}
   1ef10:	sub	sp, sp, #12
   1ef14:	mov	r4, r0
   1ef18:	bl	11318 <fileno@plt>
   1ef1c:	cmp	r0, #0
   1ef20:	mov	r0, r4
   1ef24:	blt	1efa0 <__assert_fail@plt+0xdb8c>
   1ef28:	bl	11258 <__freading@plt>
   1ef2c:	cmp	r0, #0
   1ef30:	bne	1ef6c <__assert_fail@plt+0xdb58>
   1ef34:	mov	r0, r4
   1ef38:	bl	1efac <__assert_fail@plt+0xdb98>
   1ef3c:	cmp	r0, #0
   1ef40:	beq	1ef9c <__assert_fail@plt+0xdb88>
   1ef44:	bl	112dc <__errno_location@plt>
   1ef48:	mov	r5, r0
   1ef4c:	mov	r0, r4
   1ef50:	ldr	r4, [r5]
   1ef54:	bl	1133c <fclose@plt>
   1ef58:	cmp	r4, #0
   1ef5c:	mvnne	r0, #0
   1ef60:	strne	r4, [r5]
   1ef64:	add	sp, sp, #12
   1ef68:	pop	{r4, r5, pc}
   1ef6c:	mov	r0, r4
   1ef70:	bl	11318 <fileno@plt>
   1ef74:	mov	r3, #1
   1ef78:	str	r3, [sp]
   1ef7c:	mov	r2, #0
   1ef80:	mov	r3, #0
   1ef84:	bl	111ec <lseek64@plt>
   1ef88:	mvn	r3, #0
   1ef8c:	mvn	r2, #0
   1ef90:	cmp	r1, r3
   1ef94:	cmpeq	r0, r2
   1ef98:	bne	1ef34 <__assert_fail@plt+0xdb20>
   1ef9c:	mov	r0, r4
   1efa0:	add	sp, sp, #12
   1efa4:	pop	{r4, r5, lr}
   1efa8:	b	1133c <fclose@plt>
   1efac:	push	{r4, lr}
   1efb0:	subs	r4, r0, #0
   1efb4:	sub	sp, sp, #8
   1efb8:	beq	1efd4 <__assert_fail@plt+0xdbc0>
   1efbc:	bl	11258 <__freading@plt>
   1efc0:	cmp	r0, #0
   1efc4:	beq	1efd4 <__assert_fail@plt+0xdbc0>
   1efc8:	ldr	r3, [r4]
   1efcc:	tst	r3, #256	; 0x100
   1efd0:	bne	1efe4 <__assert_fail@plt+0xdbd0>
   1efd4:	mov	r0, r4
   1efd8:	add	sp, sp, #8
   1efdc:	pop	{r4, lr}
   1efe0:	b	110fc <fflush@plt>
   1efe4:	mov	r3, #1
   1efe8:	str	r3, [sp]
   1efec:	mov	r2, #0
   1eff0:	mov	r3, #0
   1eff4:	mov	r0, r4
   1eff8:	bl	1f00c <__assert_fail@plt+0xdbf8>
   1effc:	mov	r0, r4
   1f000:	add	sp, sp, #8
   1f004:	pop	{r4, lr}
   1f008:	b	110fc <fflush@plt>
   1f00c:	push	{r4, r5, r6, r7, r8, lr}
   1f010:	sub	sp, sp, #8
   1f014:	ldmib	r0, {ip, lr}
   1f018:	mov	r4, r0
   1f01c:	ldr	r5, [sp, #32]
   1f020:	cmp	lr, ip
   1f024:	beq	1f03c <__assert_fail@plt+0xdc28>
   1f028:	str	r5, [sp, #32]
   1f02c:	mov	r0, r4
   1f030:	add	sp, sp, #8
   1f034:	pop	{r4, r5, r6, r7, r8, lr}
   1f038:	b	11348 <fseeko64@plt>
   1f03c:	ldr	lr, [r0, #20]
   1f040:	ldr	ip, [r0, #16]
   1f044:	cmp	lr, ip
   1f048:	bne	1f028 <__assert_fail@plt+0xdc14>
   1f04c:	ldr	r8, [r0, #36]	; 0x24
   1f050:	cmp	r8, #0
   1f054:	bne	1f028 <__assert_fail@plt+0xdc14>
   1f058:	mov	r6, r2
   1f05c:	mov	r7, r3
   1f060:	bl	11318 <fileno@plt>
   1f064:	mov	r2, r6
   1f068:	mov	r3, r7
   1f06c:	str	r5, [sp]
   1f070:	bl	111ec <lseek64@plt>
   1f074:	mvn	r3, #0
   1f078:	mvn	r2, #0
   1f07c:	cmp	r1, r3
   1f080:	cmpeq	r0, r2
   1f084:	beq	1f0a4 <__assert_fail@plt+0xdc90>
   1f088:	ldr	r3, [r4]
   1f08c:	strd	r0, [r4, #80]	; 0x50
   1f090:	mov	r0, r8
   1f094:	bic	r3, r3, #16
   1f098:	str	r3, [r4]
   1f09c:	add	sp, sp, #8
   1f0a0:	pop	{r4, r5, r6, r7, r8, pc}
   1f0a4:	mvn	r0, #0
   1f0a8:	b	1f09c <__assert_fail@plt+0xdc88>
   1f0ac:	push	{r4, lr}
   1f0b0:	mov	r0, #14
   1f0b4:	bl	11390 <nl_langinfo@plt>
   1f0b8:	cmp	r0, #0
   1f0bc:	beq	1f0d4 <__assert_fail@plt+0xdcc0>
   1f0c0:	ldrb	r2, [r0]
   1f0c4:	ldr	r3, [pc, #16]	; 1f0dc <__assert_fail@plt+0xdcc8>
   1f0c8:	cmp	r2, #0
   1f0cc:	moveq	r0, r3
   1f0d0:	pop	{r4, pc}
   1f0d4:	ldr	r0, [pc]	; 1f0dc <__assert_fail@plt+0xdcc8>
   1f0d8:	pop	{r4, pc}
   1f0dc:	andeq	r1, r2, r4, lsr #7
   1f0e0:	push	{r4, r5, r6, r7, lr}
   1f0e4:	subs	r6, r0, #0
   1f0e8:	sub	sp, sp, #12
   1f0ec:	addeq	r6, sp, #4
   1f0f0:	mov	r0, r6
   1f0f4:	mov	r5, r2
   1f0f8:	mov	r7, r1
   1f0fc:	bl	11210 <mbrtowc@plt>
   1f100:	cmp	r5, #0
   1f104:	cmnne	r0, #3
   1f108:	mov	r4, r0
   1f10c:	bls	1f128 <__assert_fail@plt+0xdd14>
   1f110:	mov	r0, #0
   1f114:	bl	1f18c <__assert_fail@plt+0xdd78>
   1f118:	cmp	r0, #0
   1f11c:	moveq	r4, #1
   1f120:	ldrbeq	r3, [r7]
   1f124:	streq	r3, [r6]
   1f128:	mov	r0, r4
   1f12c:	add	sp, sp, #12
   1f130:	pop	{r4, r5, r6, r7, pc}
   1f134:	push	{r4, r5, r6, lr}
   1f138:	subs	r4, r2, #0
   1f13c:	mov	r6, r0
   1f140:	mov	r5, r1
   1f144:	beq	1f170 <__assert_fail@plt+0xdd5c>
   1f148:	mov	r1, r4
   1f14c:	mvn	r0, #0
   1f150:	bl	1f280 <__assert_fail@plt+0xde6c>
   1f154:	cmp	r0, r5
   1f158:	bcs	1f170 <__assert_fail@plt+0xdd5c>
   1f15c:	bl	112dc <__errno_location@plt>
   1f160:	mov	r3, #12
   1f164:	str	r3, [r0]
   1f168:	mov	r0, #0
   1f16c:	pop	{r4, r5, r6, pc}
   1f170:	mul	r1, r5, r4
   1f174:	mov	r0, r6
   1f178:	pop	{r4, r5, r6, lr}
   1f17c:	b	1ece8 <__assert_fail@plt+0xd8d4>
   1f180:	mov	r2, #3
   1f184:	mov	r1, #0
   1f188:	b	16d10 <__assert_fail@plt+0x58fc>
   1f18c:	push	{lr}		; (str lr, [sp, #-4]!)
   1f190:	sub	sp, sp, #268	; 0x10c
   1f194:	add	r1, sp, #4
   1f198:	ldr	r2, [pc, #60]	; 1f1dc <__assert_fail@plt+0xddc8>
   1f19c:	bl	1f1e8 <__assert_fail@plt+0xddd4>
   1f1a0:	cmp	r0, #0
   1f1a4:	movne	r0, #0
   1f1a8:	bne	1f1d4 <__assert_fail@plt+0xddc0>
   1f1ac:	ldr	r1, [pc, #44]	; 1f1e0 <__assert_fail@plt+0xddcc>
   1f1b0:	add	r0, sp, #4
   1f1b4:	bl	110cc <strcmp@plt>
   1f1b8:	cmp	r0, #0
   1f1bc:	beq	1f1d4 <__assert_fail@plt+0xddc0>
   1f1c0:	add	r0, sp, #4
   1f1c4:	ldr	r1, [pc, #24]	; 1f1e4 <__assert_fail@plt+0xddd0>
   1f1c8:	bl	110cc <strcmp@plt>
   1f1cc:	adds	r0, r0, #0
   1f1d0:	movne	r0, #1
   1f1d4:	add	sp, sp, #268	; 0x10c
   1f1d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1f1dc:	andeq	r0, r0, r1, lsl #2
   1f1e0:	andeq	r1, r2, r0, lsr #7
   1f1e4:	andeq	r1, r2, ip, lsr #7
   1f1e8:	push	{r4, r5, r6, lr}
   1f1ec:	mov	r5, r1
   1f1f0:	mov	r1, #0
   1f1f4:	mov	r4, r2
   1f1f8:	bl	11378 <setlocale@plt>
   1f1fc:	subs	r6, r0, #0
   1f200:	beq	1f25c <__assert_fail@plt+0xde48>
   1f204:	bl	112a0 <strlen@plt>
   1f208:	cmp	r4, r0
   1f20c:	bhi	1f244 <__assert_fail@plt+0xde30>
   1f210:	cmp	r4, #0
   1f214:	bne	1f220 <__assert_fail@plt+0xde0c>
   1f218:	mov	r0, #34	; 0x22
   1f21c:	pop	{r4, r5, r6, pc}
   1f220:	sub	r4, r4, #1
   1f224:	mov	r1, r6
   1f228:	mov	r2, r4
   1f22c:	mov	r0, r5
   1f230:	bl	1112c <memcpy@plt>
   1f234:	mov	r3, #0
   1f238:	strb	r3, [r5, r4]
   1f23c:	mov	r0, #34	; 0x22
   1f240:	pop	{r4, r5, r6, pc}
   1f244:	add	r2, r0, #1
   1f248:	mov	r1, r6
   1f24c:	mov	r0, r5
   1f250:	bl	1112c <memcpy@plt>
   1f254:	mov	r0, #0
   1f258:	pop	{r4, r5, r6, pc}
   1f25c:	cmp	r4, #0
   1f260:	beq	1f270 <__assert_fail@plt+0xde5c>
   1f264:	strb	r6, [r5]
   1f268:	mov	r0, #22
   1f26c:	pop	{r4, r5, r6, pc}
   1f270:	mov	r0, #22
   1f274:	pop	{r4, r5, r6, pc}
   1f278:	mov	r1, #0
   1f27c:	b	11378 <setlocale@plt>
   1f280:	subs	r2, r1, #1
   1f284:	bxeq	lr
   1f288:	bcc	1f460 <__assert_fail@plt+0xe04c>
   1f28c:	cmp	r0, r1
   1f290:	bls	1f444 <__assert_fail@plt+0xe030>
   1f294:	tst	r1, r2
   1f298:	beq	1f450 <__assert_fail@plt+0xe03c>
   1f29c:	clz	r3, r0
   1f2a0:	clz	r2, r1
   1f2a4:	sub	r3, r2, r3
   1f2a8:	rsbs	r3, r3, #31
   1f2ac:	addne	r3, r3, r3, lsl #1
   1f2b0:	mov	r2, #0
   1f2b4:	addne	pc, pc, r3, lsl #2
   1f2b8:	nop			; (mov r0, r0)
   1f2bc:	cmp	r0, r1, lsl #31
   1f2c0:	adc	r2, r2, r2
   1f2c4:	subcs	r0, r0, r1, lsl #31
   1f2c8:	cmp	r0, r1, lsl #30
   1f2cc:	adc	r2, r2, r2
   1f2d0:	subcs	r0, r0, r1, lsl #30
   1f2d4:	cmp	r0, r1, lsl #29
   1f2d8:	adc	r2, r2, r2
   1f2dc:	subcs	r0, r0, r1, lsl #29
   1f2e0:	cmp	r0, r1, lsl #28
   1f2e4:	adc	r2, r2, r2
   1f2e8:	subcs	r0, r0, r1, lsl #28
   1f2ec:	cmp	r0, r1, lsl #27
   1f2f0:	adc	r2, r2, r2
   1f2f4:	subcs	r0, r0, r1, lsl #27
   1f2f8:	cmp	r0, r1, lsl #26
   1f2fc:	adc	r2, r2, r2
   1f300:	subcs	r0, r0, r1, lsl #26
   1f304:	cmp	r0, r1, lsl #25
   1f308:	adc	r2, r2, r2
   1f30c:	subcs	r0, r0, r1, lsl #25
   1f310:	cmp	r0, r1, lsl #24
   1f314:	adc	r2, r2, r2
   1f318:	subcs	r0, r0, r1, lsl #24
   1f31c:	cmp	r0, r1, lsl #23
   1f320:	adc	r2, r2, r2
   1f324:	subcs	r0, r0, r1, lsl #23
   1f328:	cmp	r0, r1, lsl #22
   1f32c:	adc	r2, r2, r2
   1f330:	subcs	r0, r0, r1, lsl #22
   1f334:	cmp	r0, r1, lsl #21
   1f338:	adc	r2, r2, r2
   1f33c:	subcs	r0, r0, r1, lsl #21
   1f340:	cmp	r0, r1, lsl #20
   1f344:	adc	r2, r2, r2
   1f348:	subcs	r0, r0, r1, lsl #20
   1f34c:	cmp	r0, r1, lsl #19
   1f350:	adc	r2, r2, r2
   1f354:	subcs	r0, r0, r1, lsl #19
   1f358:	cmp	r0, r1, lsl #18
   1f35c:	adc	r2, r2, r2
   1f360:	subcs	r0, r0, r1, lsl #18
   1f364:	cmp	r0, r1, lsl #17
   1f368:	adc	r2, r2, r2
   1f36c:	subcs	r0, r0, r1, lsl #17
   1f370:	cmp	r0, r1, lsl #16
   1f374:	adc	r2, r2, r2
   1f378:	subcs	r0, r0, r1, lsl #16
   1f37c:	cmp	r0, r1, lsl #15
   1f380:	adc	r2, r2, r2
   1f384:	subcs	r0, r0, r1, lsl #15
   1f388:	cmp	r0, r1, lsl #14
   1f38c:	adc	r2, r2, r2
   1f390:	subcs	r0, r0, r1, lsl #14
   1f394:	cmp	r0, r1, lsl #13
   1f398:	adc	r2, r2, r2
   1f39c:	subcs	r0, r0, r1, lsl #13
   1f3a0:	cmp	r0, r1, lsl #12
   1f3a4:	adc	r2, r2, r2
   1f3a8:	subcs	r0, r0, r1, lsl #12
   1f3ac:	cmp	r0, r1, lsl #11
   1f3b0:	adc	r2, r2, r2
   1f3b4:	subcs	r0, r0, r1, lsl #11
   1f3b8:	cmp	r0, r1, lsl #10
   1f3bc:	adc	r2, r2, r2
   1f3c0:	subcs	r0, r0, r1, lsl #10
   1f3c4:	cmp	r0, r1, lsl #9
   1f3c8:	adc	r2, r2, r2
   1f3cc:	subcs	r0, r0, r1, lsl #9
   1f3d0:	cmp	r0, r1, lsl #8
   1f3d4:	adc	r2, r2, r2
   1f3d8:	subcs	r0, r0, r1, lsl #8
   1f3dc:	cmp	r0, r1, lsl #7
   1f3e0:	adc	r2, r2, r2
   1f3e4:	subcs	r0, r0, r1, lsl #7
   1f3e8:	cmp	r0, r1, lsl #6
   1f3ec:	adc	r2, r2, r2
   1f3f0:	subcs	r0, r0, r1, lsl #6
   1f3f4:	cmp	r0, r1, lsl #5
   1f3f8:	adc	r2, r2, r2
   1f3fc:	subcs	r0, r0, r1, lsl #5
   1f400:	cmp	r0, r1, lsl #4
   1f404:	adc	r2, r2, r2
   1f408:	subcs	r0, r0, r1, lsl #4
   1f40c:	cmp	r0, r1, lsl #3
   1f410:	adc	r2, r2, r2
   1f414:	subcs	r0, r0, r1, lsl #3
   1f418:	cmp	r0, r1, lsl #2
   1f41c:	adc	r2, r2, r2
   1f420:	subcs	r0, r0, r1, lsl #2
   1f424:	cmp	r0, r1, lsl #1
   1f428:	adc	r2, r2, r2
   1f42c:	subcs	r0, r0, r1, lsl #1
   1f430:	cmp	r0, r1
   1f434:	adc	r2, r2, r2
   1f438:	subcs	r0, r0, r1
   1f43c:	mov	r0, r2
   1f440:	bx	lr
   1f444:	moveq	r0, #1
   1f448:	movne	r0, #0
   1f44c:	bx	lr
   1f450:	clz	r2, r1
   1f454:	rsb	r2, r2, #31
   1f458:	lsr	r0, r0, r2
   1f45c:	bx	lr
   1f460:	cmp	r0, #0
   1f464:	mvnne	r0, #0
   1f468:	b	1f7a0 <__assert_fail@plt+0xe38c>
   1f46c:	cmp	r1, #0
   1f470:	beq	1f460 <__assert_fail@plt+0xe04c>
   1f474:	push	{r0, r1, lr}
   1f478:	bl	1f280 <__assert_fail@plt+0xde6c>
   1f47c:	pop	{r1, r2, lr}
   1f480:	mul	r3, r2, r0
   1f484:	sub	r1, r1, r3
   1f488:	bx	lr
   1f48c:	cmp	r1, #0
   1f490:	beq	1f69c <__assert_fail@plt+0xe288>
   1f494:	eor	ip, r0, r1
   1f498:	rsbmi	r1, r1, #0
   1f49c:	subs	r2, r1, #1
   1f4a0:	beq	1f668 <__assert_fail@plt+0xe254>
   1f4a4:	movs	r3, r0
   1f4a8:	rsbmi	r3, r0, #0
   1f4ac:	cmp	r3, r1
   1f4b0:	bls	1f674 <__assert_fail@plt+0xe260>
   1f4b4:	tst	r1, r2
   1f4b8:	beq	1f684 <__assert_fail@plt+0xe270>
   1f4bc:	clz	r2, r3
   1f4c0:	clz	r0, r1
   1f4c4:	sub	r2, r0, r2
   1f4c8:	rsbs	r2, r2, #31
   1f4cc:	addne	r2, r2, r2, lsl #1
   1f4d0:	mov	r0, #0
   1f4d4:	addne	pc, pc, r2, lsl #2
   1f4d8:	nop			; (mov r0, r0)
   1f4dc:	cmp	r3, r1, lsl #31
   1f4e0:	adc	r0, r0, r0
   1f4e4:	subcs	r3, r3, r1, lsl #31
   1f4e8:	cmp	r3, r1, lsl #30
   1f4ec:	adc	r0, r0, r0
   1f4f0:	subcs	r3, r3, r1, lsl #30
   1f4f4:	cmp	r3, r1, lsl #29
   1f4f8:	adc	r0, r0, r0
   1f4fc:	subcs	r3, r3, r1, lsl #29
   1f500:	cmp	r3, r1, lsl #28
   1f504:	adc	r0, r0, r0
   1f508:	subcs	r3, r3, r1, lsl #28
   1f50c:	cmp	r3, r1, lsl #27
   1f510:	adc	r0, r0, r0
   1f514:	subcs	r3, r3, r1, lsl #27
   1f518:	cmp	r3, r1, lsl #26
   1f51c:	adc	r0, r0, r0
   1f520:	subcs	r3, r3, r1, lsl #26
   1f524:	cmp	r3, r1, lsl #25
   1f528:	adc	r0, r0, r0
   1f52c:	subcs	r3, r3, r1, lsl #25
   1f530:	cmp	r3, r1, lsl #24
   1f534:	adc	r0, r0, r0
   1f538:	subcs	r3, r3, r1, lsl #24
   1f53c:	cmp	r3, r1, lsl #23
   1f540:	adc	r0, r0, r0
   1f544:	subcs	r3, r3, r1, lsl #23
   1f548:	cmp	r3, r1, lsl #22
   1f54c:	adc	r0, r0, r0
   1f550:	subcs	r3, r3, r1, lsl #22
   1f554:	cmp	r3, r1, lsl #21
   1f558:	adc	r0, r0, r0
   1f55c:	subcs	r3, r3, r1, lsl #21
   1f560:	cmp	r3, r1, lsl #20
   1f564:	adc	r0, r0, r0
   1f568:	subcs	r3, r3, r1, lsl #20
   1f56c:	cmp	r3, r1, lsl #19
   1f570:	adc	r0, r0, r0
   1f574:	subcs	r3, r3, r1, lsl #19
   1f578:	cmp	r3, r1, lsl #18
   1f57c:	adc	r0, r0, r0
   1f580:	subcs	r3, r3, r1, lsl #18
   1f584:	cmp	r3, r1, lsl #17
   1f588:	adc	r0, r0, r0
   1f58c:	subcs	r3, r3, r1, lsl #17
   1f590:	cmp	r3, r1, lsl #16
   1f594:	adc	r0, r0, r0
   1f598:	subcs	r3, r3, r1, lsl #16
   1f59c:	cmp	r3, r1, lsl #15
   1f5a0:	adc	r0, r0, r0
   1f5a4:	subcs	r3, r3, r1, lsl #15
   1f5a8:	cmp	r3, r1, lsl #14
   1f5ac:	adc	r0, r0, r0
   1f5b0:	subcs	r3, r3, r1, lsl #14
   1f5b4:	cmp	r3, r1, lsl #13
   1f5b8:	adc	r0, r0, r0
   1f5bc:	subcs	r3, r3, r1, lsl #13
   1f5c0:	cmp	r3, r1, lsl #12
   1f5c4:	adc	r0, r0, r0
   1f5c8:	subcs	r3, r3, r1, lsl #12
   1f5cc:	cmp	r3, r1, lsl #11
   1f5d0:	adc	r0, r0, r0
   1f5d4:	subcs	r3, r3, r1, lsl #11
   1f5d8:	cmp	r3, r1, lsl #10
   1f5dc:	adc	r0, r0, r0
   1f5e0:	subcs	r3, r3, r1, lsl #10
   1f5e4:	cmp	r3, r1, lsl #9
   1f5e8:	adc	r0, r0, r0
   1f5ec:	subcs	r3, r3, r1, lsl #9
   1f5f0:	cmp	r3, r1, lsl #8
   1f5f4:	adc	r0, r0, r0
   1f5f8:	subcs	r3, r3, r1, lsl #8
   1f5fc:	cmp	r3, r1, lsl #7
   1f600:	adc	r0, r0, r0
   1f604:	subcs	r3, r3, r1, lsl #7
   1f608:	cmp	r3, r1, lsl #6
   1f60c:	adc	r0, r0, r0
   1f610:	subcs	r3, r3, r1, lsl #6
   1f614:	cmp	r3, r1, lsl #5
   1f618:	adc	r0, r0, r0
   1f61c:	subcs	r3, r3, r1, lsl #5
   1f620:	cmp	r3, r1, lsl #4
   1f624:	adc	r0, r0, r0
   1f628:	subcs	r3, r3, r1, lsl #4
   1f62c:	cmp	r3, r1, lsl #3
   1f630:	adc	r0, r0, r0
   1f634:	subcs	r3, r3, r1, lsl #3
   1f638:	cmp	r3, r1, lsl #2
   1f63c:	adc	r0, r0, r0
   1f640:	subcs	r3, r3, r1, lsl #2
   1f644:	cmp	r3, r1, lsl #1
   1f648:	adc	r0, r0, r0
   1f64c:	subcs	r3, r3, r1, lsl #1
   1f650:	cmp	r3, r1
   1f654:	adc	r0, r0, r0
   1f658:	subcs	r3, r3, r1
   1f65c:	cmp	ip, #0
   1f660:	rsbmi	r0, r0, #0
   1f664:	bx	lr
   1f668:	teq	ip, r0
   1f66c:	rsbmi	r0, r0, #0
   1f670:	bx	lr
   1f674:	movcc	r0, #0
   1f678:	asreq	r0, ip, #31
   1f67c:	orreq	r0, r0, #1
   1f680:	bx	lr
   1f684:	clz	r2, r1
   1f688:	rsb	r2, r2, #31
   1f68c:	cmp	ip, #0
   1f690:	lsr	r0, r3, r2
   1f694:	rsbmi	r0, r0, #0
   1f698:	bx	lr
   1f69c:	cmp	r0, #0
   1f6a0:	mvngt	r0, #-2147483648	; 0x80000000
   1f6a4:	movlt	r0, #-2147483648	; 0x80000000
   1f6a8:	b	1f7a0 <__assert_fail@plt+0xe38c>
   1f6ac:	cmp	r1, #0
   1f6b0:	beq	1f69c <__assert_fail@plt+0xe288>
   1f6b4:	push	{r0, r1, lr}
   1f6b8:	bl	1f494 <__assert_fail@plt+0xe080>
   1f6bc:	pop	{r1, r2, lr}
   1f6c0:	mul	r3, r2, r0
   1f6c4:	sub	r1, r1, r3
   1f6c8:	bx	lr
   1f6cc:	cmp	r3, #0
   1f6d0:	cmpeq	r2, #0
   1f6d4:	bne	1f6f8 <__assert_fail@plt+0xe2e4>
   1f6d8:	cmp	r1, #0
   1f6dc:	movlt	r1, #-2147483648	; 0x80000000
   1f6e0:	movlt	r0, #0
   1f6e4:	blt	1f6f4 <__assert_fail@plt+0xe2e0>
   1f6e8:	cmpeq	r0, #0
   1f6ec:	mvnne	r1, #-2147483648	; 0x80000000
   1f6f0:	mvnne	r0, #0
   1f6f4:	b	1f7a0 <__assert_fail@plt+0xe38c>
   1f6f8:	sub	sp, sp, #8
   1f6fc:	push	{sp, lr}
   1f700:	cmp	r1, #0
   1f704:	blt	1f724 <__assert_fail@plt+0xe310>
   1f708:	cmp	r3, #0
   1f70c:	blt	1f758 <__assert_fail@plt+0xe344>
   1f710:	bl	1f7b0 <__assert_fail@plt+0xe39c>
   1f714:	ldr	lr, [sp, #4]
   1f718:	add	sp, sp, #8
   1f71c:	pop	{r2, r3}
   1f720:	bx	lr
   1f724:	rsbs	r0, r0, #0
   1f728:	sbc	r1, r1, r1, lsl #1
   1f72c:	cmp	r3, #0
   1f730:	blt	1f77c <__assert_fail@plt+0xe368>
   1f734:	bl	1f7b0 <__assert_fail@plt+0xe39c>
   1f738:	ldr	lr, [sp, #4]
   1f73c:	add	sp, sp, #8
   1f740:	pop	{r2, r3}
   1f744:	rsbs	r0, r0, #0
   1f748:	sbc	r1, r1, r1, lsl #1
   1f74c:	rsbs	r2, r2, #0
   1f750:	sbc	r3, r3, r3, lsl #1
   1f754:	bx	lr
   1f758:	rsbs	r2, r2, #0
   1f75c:	sbc	r3, r3, r3, lsl #1
   1f760:	bl	1f7b0 <__assert_fail@plt+0xe39c>
   1f764:	ldr	lr, [sp, #4]
   1f768:	add	sp, sp, #8
   1f76c:	pop	{r2, r3}
   1f770:	rsbs	r0, r0, #0
   1f774:	sbc	r1, r1, r1, lsl #1
   1f778:	bx	lr
   1f77c:	rsbs	r2, r2, #0
   1f780:	sbc	r3, r3, r3, lsl #1
   1f784:	bl	1f7b0 <__assert_fail@plt+0xe39c>
   1f788:	ldr	lr, [sp, #4]
   1f78c:	add	sp, sp, #8
   1f790:	pop	{r2, r3}
   1f794:	rsbs	r2, r2, #0
   1f798:	sbc	r3, r3, r3, lsl #1
   1f79c:	bx	lr
   1f7a0:	push	{r1, lr}
   1f7a4:	mov	r0, #8
   1f7a8:	bl	110c0 <raise@plt>
   1f7ac:	pop	{r1, pc}
   1f7b0:	cmp	r1, r3
   1f7b4:	push	{r4, r5, r6, r7, r8, r9, lr}
   1f7b8:	cmpeq	r0, r2
   1f7bc:	mov	r4, r0
   1f7c0:	mov	r5, r1
   1f7c4:	ldr	r9, [sp, #28]
   1f7c8:	movcc	r0, #0
   1f7cc:	movcc	r1, #0
   1f7d0:	bcc	1f8c8 <__assert_fail@plt+0xe4b4>
   1f7d4:	cmp	r3, #0
   1f7d8:	clzeq	ip, r2
   1f7dc:	clzne	ip, r3
   1f7e0:	addeq	ip, ip, #32
   1f7e4:	cmp	r5, #0
   1f7e8:	clzeq	r1, r4
   1f7ec:	addeq	r1, r1, #32
   1f7f0:	clzne	r1, r5
   1f7f4:	sub	ip, ip, r1
   1f7f8:	sub	lr, ip, #32
   1f7fc:	lsl	r7, r3, ip
   1f800:	rsb	r8, ip, #32
   1f804:	orr	r7, r7, r2, lsl lr
   1f808:	orr	r7, r7, r2, lsr r8
   1f80c:	lsl	r6, r2, ip
   1f810:	cmp	r5, r7
   1f814:	cmpeq	r4, r6
   1f818:	movcc	r0, #0
   1f81c:	movcc	r1, #0
   1f820:	bcc	1f83c <__assert_fail@plt+0xe428>
   1f824:	mov	r3, #1
   1f828:	subs	r4, r4, r6
   1f82c:	lsl	r1, r3, lr
   1f830:	lsl	r0, r3, ip
   1f834:	orr	r1, r1, r3, lsr r8
   1f838:	sbc	r5, r5, r7
   1f83c:	cmp	ip, #0
   1f840:	beq	1f8c8 <__assert_fail@plt+0xe4b4>
   1f844:	lsrs	r3, r7, #1
   1f848:	rrx	r2, r6
   1f84c:	mov	r6, ip
   1f850:	b	1f874 <__assert_fail@plt+0xe460>
   1f854:	subs	r4, r4, r2
   1f858:	sbc	r5, r5, r3
   1f85c:	adds	r4, r4, r4
   1f860:	adc	r5, r5, r5
   1f864:	adds	r4, r4, #1
   1f868:	adc	r5, r5, #0
   1f86c:	subs	r6, r6, #1
   1f870:	beq	1f890 <__assert_fail@plt+0xe47c>
   1f874:	cmp	r5, r3
   1f878:	cmpeq	r4, r2
   1f87c:	bcs	1f854 <__assert_fail@plt+0xe440>
   1f880:	adds	r4, r4, r4
   1f884:	adc	r5, r5, r5
   1f888:	subs	r6, r6, #1
   1f88c:	bne	1f874 <__assert_fail@plt+0xe460>
   1f890:	lsr	r6, r4, ip
   1f894:	lsr	r7, r5, ip
   1f898:	orr	r6, r6, r5, lsl r8
   1f89c:	adds	r2, r0, r4
   1f8a0:	orr	r6, r6, r5, lsr lr
   1f8a4:	adc	r3, r1, r5
   1f8a8:	lsl	r1, r7, ip
   1f8ac:	orr	r1, r1, r6, lsl lr
   1f8b0:	lsl	r0, r6, ip
   1f8b4:	orr	r1, r1, r6, lsr r8
   1f8b8:	subs	r0, r2, r0
   1f8bc:	mov	r4, r6
   1f8c0:	mov	r5, r7
   1f8c4:	sbc	r1, r3, r1
   1f8c8:	cmp	r9, #0
   1f8cc:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1f8d0:	strd	r4, [r9]
   1f8d4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1f8d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f8dc:	mov	r7, r0
   1f8e0:	ldr	r6, [pc, #72]	; 1f930 <__assert_fail@plt+0xe51c>
   1f8e4:	ldr	r5, [pc, #72]	; 1f934 <__assert_fail@plt+0xe520>
   1f8e8:	add	r6, pc, r6
   1f8ec:	add	r5, pc, r5
   1f8f0:	sub	r6, r6, r5
   1f8f4:	mov	r8, r1
   1f8f8:	mov	r9, r2
   1f8fc:	bl	1107c <fstatfs64@plt-0x20>
   1f900:	asrs	r6, r6, #2
   1f904:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f908:	mov	r4, #0
   1f90c:	add	r4, r4, #1
   1f910:	ldr	r3, [r5], #4
   1f914:	mov	r2, r9
   1f918:	mov	r1, r8
   1f91c:	mov	r0, r7
   1f920:	blx	r3
   1f924:	cmp	r6, r4
   1f928:	bne	1f90c <__assert_fail@plt+0xe4f8>
   1f92c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f930:	andeq	r2, r1, r0, lsr #12
   1f934:	andeq	r2, r1, r8, lsl r6
   1f938:	bx	lr
   1f93c:	ldr	r3, [pc, #12]	; 1f950 <__assert_fail@plt+0xe53c>
   1f940:	mov	r1, #0
   1f944:	add	r3, pc, r3
   1f948:	ldr	r2, [r3]
   1f94c:	b	112e8 <__cxa_atexit@plt>
   1f950:	strdeq	r2, [r1], -r8

Disassembly of section .fini:

0001f954 <.fini>:
   1f954:	push	{r3, lr}
   1f958:	pop	{r3, pc}
