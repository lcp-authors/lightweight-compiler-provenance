
../repos/greatscottgadgets-libbtbb-9d66440/lib/src/libbtbb.so.1.0:     file format elf32-littlearm


Disassembly of section .init:

000045a4 <.init>:
    45a4:	push	{r3, lr}
    45a8:	bl	4a14 <__assert_fail@plt+0xc>
    45ac:	pop	{r3, pc}

Disassembly of section .plt:

000045b0 <calloc@plt-0x14>:
    45b0:	push	{lr}		; (str lr, [sp, #-4]!)
    45b4:	ldr	lr, [pc, #4]	; 45c0 <calloc@plt-0x4>
    45b8:	add	lr, pc, lr
    45bc:	ldr	pc, [lr, #8]!
    45c0:	andeq	r1, r2, r0, asr #20

000045c4 <calloc@plt>:
    45c4:	add	ip, pc, #0, 12
    45c8:	add	ip, ip, #135168	; 0x21000
    45cc:	ldr	pc, [ip, #2624]!	; 0xa40

000045d0 <raise@plt>:
    45d0:	add	ip, pc, #0, 12
    45d4:	add	ip, ip, #135168	; 0x21000
    45d8:	ldr	pc, [ip, #2616]!	; 0xa38

000045dc <btbb_piconet_new@plt>:
    45dc:	add	ip, pc, #0, 12
    45e0:	add	ip, ip, #135168	; 0x21000
    45e4:	ldr	pc, [ip, #2608]!	; 0xa30

000045e8 <gen_hop_pattern@plt>:
    45e8:	add	ip, pc, #0, 12
    45ec:	add	ip, ip, #135168	; 0x21000
    45f0:	ldr	pc, [ip, #2600]!	; 0xa28

000045f4 <count_bits@plt>:
    45f4:	add	ip, pc, #0, 12
    45f8:	add	ip, ip, #135168	; 0x21000
    45fc:	ldr	pc, [ip, #2592]!	; 0xa20

00004600 <__cxa_finalize@plt>:
    4600:	add	ip, pc, #0, 12
    4604:	add	ip, ip, #135168	; 0x21000
    4608:	ldr	pc, [ip, #2584]!	; 0xa18

0000460c <btbb_get_payload_packed@plt>:
    460c:	add	ip, pc, #0, 12
    4610:	add	ip, ip, #135168	; 0x21000
    4614:	ldr	pc, [ip, #2576]!	; 0xa10

00004618 <printf@plt>:
    4618:	add	ip, pc, #0, 12
    461c:	add	ip, ip, #135168	; 0x21000
    4620:	ldr	pc, [ip, #2568]!	; 0xa08

00004624 <fopen@plt>:
    4624:	add	ip, pc, #0, 12
    4628:	add	ip, ip, #135168	; 0x21000
    462c:	ldr	pc, [ip, #2560]!	; 0xa00

00004630 <lell_packet_is_data@plt>:
    4630:	add	ip, pc, #0, 12
    4634:	add	ip, ip, #135168	; 0x21000
    4638:	ldr	pc, [ip, #2552]!	; 0x9f8

0000463c <fflush@plt>:
    463c:	add	ip, pc, #0, 12
    4640:	add	ip, ip, #135168	; 0x21000
    4644:	ldr	pc, [ip, #2544]!	; 0x9f0

00004648 <btbb_packet_set_flag@plt>:
    4648:	add	ip, pc, #0, 12
    464c:	add	ip, ip, #135168	; 0x21000
    4650:	ldr	pc, [ip, #2536]!	; 0x9e8

00004654 <pcapng_append_interface_option@plt>:
    4654:	add	ip, pc, #0, 12
    4658:	add	ip, ip, #135168	; 0x21000
    465c:	ldr	pc, [ip, #2528]!	; 0x9e0

00004660 <free@plt>:
    4660:	add	ip, pc, #0, 12
    4664:	add	ip, ip, #135168	; 0x21000
    4668:	ldr	pc, [ip, #2520]!	; 0x9d8

0000466c <btbb_packet_get_modulation@plt>:
    466c:	add	ip, pc, #0, 12
    4670:	add	ip, ip, #135168	; 0x21000
    4674:	ldr	pc, [ip, #2512]!	; 0x9d0

00004678 <btbb_packet_get_ac_errors@plt>:
    4678:	add	ip, pc, #0, 12
    467c:	add	ip, ip, #135168	; 0x21000
    4680:	ldr	pc, [ip, #2504]!	; 0x9c8

00004684 <memcpy@plt>:
    4684:	add	ip, pc, #0, 12
    4688:	add	ip, ip, #135168	; 0x21000
    468c:	ldr	pc, [ip, #2496]!	; 0x9c0

00004690 <btbb_uap_from_header@plt>:
    4690:	add	ip, pc, #0, 12
    4694:	add	ip, ip, #135168	; 0x21000
    4698:	ldr	pc, [ip, #2488]!	; 0x9b8

0000469c <btbb_packet_get_flag@plt>:
    469c:	add	ip, pc, #0, 12
    46a0:	add	ip, ip, #135168	; 0x21000
    46a4:	ldr	pc, [ip, #2480]!	; 0x9b0

000046a8 <fhs@plt>:
    46a8:	add	ip, pc, #0, 12
    46ac:	add	ip, ip, #135168	; 0x21000
    46b0:	ldr	pc, [ip, #2472]!	; 0x9a8

000046b4 <EV4@plt>:
    46b4:	add	ip, pc, #0, 12
    46b8:	add	ip, ip, #135168	; 0x21000
    46bc:	ldr	pc, [ip, #2464]!	; 0x9a0

000046c0 <btbb_piconet_get_uap@plt>:
    46c0:	add	ip, pc, #0, 12
    46c4:	add	ip, ip, #135168	; 0x21000
    46c8:	ldr	pc, [ip, #2456]!	; 0x998

000046cc <memcmp@plt>:
    46cc:	add	ip, pc, #0, 12
    46d0:	add	ip, ip, #135168	; 0x21000
    46d4:	ldr	pc, [ip, #2448]!	; 0x990

000046d8 <lell_pcap_close@plt>:
    46d8:	add	ip, pc, #0, 12
    46dc:	add	ip, ip, #135168	; 0x21000
    46e0:	ldr	pc, [ip, #2440]!	; 0x988

000046e4 <btbb_piconet_get_channel_seen@plt>:
    46e4:	add	ip, pc, #0, 12
    46e8:	add	ip, ip, #135168	; 0x21000
    46ec:	ldr	pc, [ip, #2432]!	; 0x980

000046f0 <btbb_pcap_open@plt>:
    46f0:	add	ip, pc, #0, 12
    46f4:	add	ip, ip, #135168	; 0x21000
    46f8:	ldr	pc, [ip, #2424]!	; 0x978

000046fc <btbb_header_present@plt>:
    46fc:	add	ip, pc, #0, 12
    4700:	add	ip, ip, #135168	; 0x21000
    4704:	ldr	pc, [ip, #2416]!	; 0x970

00004708 <btbb_piconet_get_flag@plt>:
    4708:	add	ip, pc, #0, 12
    470c:	add	ip, ip, #135168	; 0x21000
    4710:	ldr	pc, [ip, #2408]!	; 0x968

00004714 <pcapng_create@plt>:
    4714:	add	ip, pc, #0, 12
    4718:	add	ip, ip, #135168	; 0x21000
    471c:	ldr	pc, [ip, #2400]!	; 0x960

00004720 <DM@plt>:
    4720:	add	ip, pc, #0, 12
    4724:	add	ip, ip, #135168	; 0x21000
    4728:	ldr	pc, [ip, #2392]!	; 0x958

0000472c <btbb_piconet_set_flag@plt>:
    472c:	add	ip, pc, #0, 12
    4730:	add	ip, ip, #135168	; 0x21000
    4734:	ldr	pc, [ip, #2384]!	; 0x950

00004738 <HV@plt>:
    4738:	add	ip, pc, #0, 12
    473c:	add	ip, ip, #135168	; 0x21000
    4740:	ldr	pc, [ip, #2376]!	; 0x948

00004744 <perror@plt>:
    4744:	add	ip, pc, #0, 12
    4748:	add	ip, ip, #135168	; 0x21000
    474c:	ldr	pc, [ip, #2368]!	; 0x940

00004750 <btbb_piconet_set_channel_seen@plt>:
    4750:	add	ip, pc, #0, 12
    4754:	add	ip, ip, #135168	; 0x21000
    4758:	ldr	pc, [ip, #2360]!	; 0x938

0000475c <perm_table_init@plt>:
    475c:	add	ip, pc, #0, 12
    4760:	add	ip, ip, #135168	; 0x21000
    4764:	ldr	pc, [ip, #2352]!	; 0x930

00004768 <btbb_packet_set_uap@plt>:
    4768:	add	ip, pc, #0, 12
    476c:	add	ip, ip, #135168	; 0x21000
    4770:	ldr	pc, [ip, #2344]!	; 0x928

00004774 <fwrite@plt>:
    4774:	add	ip, pc, #0, 12
    4778:	add	ip, ip, #135168	; 0x21000
    477c:	ldr	pc, [ip, #2336]!	; 0x920

00004780 <btbb_gen_syncword@plt>:
    4780:	add	ip, pc, #0, 12
    4784:	add	ip, ip, #135168	; 0x21000
    4788:	ldr	pc, [ip, #2328]!	; 0x918

0000478c <btbb_pcap_close@plt>:
    478c:	add	ip, pc, #0, 12
    4790:	add	ip, ip, #135168	; 0x21000
    4794:	ldr	pc, [ip, #2320]!	; 0x910

00004798 <crc_check@plt>:
    4798:	add	ip, pc, #0, 12
    479c:	add	ip, ip, #135168	; 0x21000
    47a0:	ldr	pc, [ip, #2312]!	; 0x908

000047a4 <btbb_decode@plt>:
    47a4:	add	ip, pc, #0, 12
    47a8:	add	ip, ip, #135168	; 0x21000
    47ac:	ldr	pc, [ip, #2304]!	; 0x900

000047b0 <btbb_winnow@plt>:
    47b0:	add	ip, pc, #0, 12
    47b4:	add	ip, ip, #135168	; 0x21000
    47b8:	ldr	pc, [ip, #2296]!	; 0x8f8

000047bc <lell_get_adv_type_str@plt>:
    47bc:	add	ip, pc, #0, 12
    47c0:	add	ip, ip, #135168	; 0x21000
    47c4:	ldr	pc, [ip, #2288]!	; 0x8f0

000047c8 <get_hop_pattern@plt>:
    47c8:	add	ip, pc, #0, 12
    47cc:	add	ip, ip, #135168	; 0x21000
    47d0:	ldr	pc, [ip, #2280]!	; 0x8e8

000047d4 <puts@plt>:
    47d4:	add	ip, pc, #0, 12
    47d8:	add	ip, ip, #135168	; 0x21000
    47dc:	ldr	pc, [ip, #2272]!	; 0x8e0

000047e0 <malloc@plt>:
    47e0:	add	ip, pc, #0, 12
    47e4:	add	ip, ip, #135168	; 0x21000
    47e8:	ldr	pc, [ip, #2264]!	; 0x8d8

000047ec <try_hop@plt>:
    47ec:	add	ip, pc, #0, 12
    47f0:	add	ip, ip, #135168	; 0x21000
    47f4:	ldr	pc, [ip, #2256]!	; 0x8d0

000047f8 <btbb_packet_new@plt>:
    47f8:	add	ip, pc, #0, 12
    47fc:	add	ip, ip, #135168	; 0x21000
    4800:	ldr	pc, [ip, #2248]!	; 0x8c8

00004804 <btbb_pcap_dump@plt>:
    4804:	add	ip, pc, #0, 12
    4808:	add	ip, ip, #135168	; 0x21000
    480c:	ldr	pc, [ip, #2240]!	; 0x8c0

00004810 <__gmon_start__@plt>:
    4810:	add	ip, pc, #0, 12
    4814:	add	ip, ip, #135168	; 0x21000
    4818:	ldr	pc, [ip, #2232]!	; 0x8b8

0000481c <open@plt>:
    481c:	add	ip, pc, #0, 12
    4820:	add	ip, ip, #135168	; 0x21000
    4824:	ldr	pc, [ip, #2224]!	; 0x8b0

00004828 <__ctype_b_loc@plt>:
    4828:	add	ip, pc, #0, 12
    482c:	add	ip, ip, #135168	; 0x21000
    4830:	ldr	pc, [ip, #2216]!	; 0x8a8

00004834 <exit@plt>:
    4834:	add	ip, pc, #0, 12
    4838:	add	ip, ip, #135168	; 0x21000
    483c:	ldr	pc, [ip, #2208]!	; 0x8a0

00004840 <btbb_packet_get_payload_length@plt>:
    4840:	add	ip, pc, #0, 12
    4844:	add	ip, ip, #135168	; 0x21000
    4848:	ldr	pc, [ip, #2200]!	; 0x898

0000484c <strlen@plt>:
    484c:	add	ip, pc, #0, 12
    4850:	add	ip, ip, #135168	; 0x21000
    4854:	ldr	pc, [ip, #2192]!	; 0x890

00004858 <btbb_decode_header@plt>:
    4858:	add	ip, pc, #0, 12
    485c:	add	ip, ip, #135168	; 0x21000
    4860:	ldr	pc, [ip, #2184]!	; 0x888

00004864 <mmap@plt>:
    4864:	add	ip, pc, #0, 12
    4868:	add	ip, ip, #135168	; 0x21000
    486c:	ldr	pc, [ip, #2176]!	; 0x880

00004870 <btbb_packet_get_header_packed@plt>:
    4870:	add	ip, pc, #0, 12
    4874:	add	ip, ip, #135168	; 0x21000
    4878:	ldr	pc, [ip, #2168]!	; 0x878

0000487c <lell_pcapng_record_connect_req@plt>:
    487c:	add	ip, pc, #0, 12
    4880:	add	ip, ip, #135168	; 0x21000
    4884:	ldr	pc, [ip, #2160]!	; 0x870

00004888 <lell_get_channel_k@plt>:
    4888:	add	ip, pc, #0, 12
    488c:	add	ip, ip, #135168	; 0x21000
    4890:	ldr	pc, [ip, #2152]!	; 0x868

00004894 <fprintf@plt>:
    4894:	add	ip, pc, #0, 12
    4898:	add	ip, ip, #135168	; 0x21000
    489c:	ldr	pc, [ip, #2144]!	; 0x860

000048a0 <getpagesize@plt>:
    48a0:	add	ip, pc, #0, 12
    48a4:	add	ip, ip, #135168	; 0x21000
    48a8:	ldr	pc, [ip, #2136]!	; 0x858

000048ac <pcapng_append_packet@plt>:
    48ac:	add	ip, pc, #0, 12
    48b0:	add	ip, ip, #135168	; 0x21000
    48b4:	ldr	pc, [ip, #2128]!	; 0x850

000048b8 <btbb_packet_get_transport@plt>:
    48b8:	add	ip, pc, #0, 12
    48bc:	add	ip, ip, #135168	; 0x21000
    48c0:	ldr	pc, [ip, #2120]!	; 0x848

000048c4 <find_known_lap@plt>:
    48c4:	add	ip, pc, #0, 12
    48c8:	add	ip, ip, #135168	; 0x21000
    48cc:	ldr	pc, [ip, #2112]!	; 0x840

000048d0 <address_precalc@plt>:
    48d0:	add	ip, pc, #0, 12
    48d4:	add	ip, ip, #135168	; 0x21000
    48d8:	ldr	pc, [ip, #2104]!	; 0x838

000048dc <memset@plt>:
    48dc:	add	ip, pc, #0, 12
    48e0:	add	ip, ip, #135168	; 0x21000
    48e4:	ldr	pc, [ip, #2096]!	; 0x830

000048e8 <putchar@plt>:
    48e8:	add	ip, pc, #0, 12
    48ec:	add	ip, ip, #135168	; 0x21000
    48f0:	ldr	pc, [ip, #2088]!	; 0x828

000048f4 <strncpy@plt>:
    48f4:	add	ip, pc, #0, 12
    48f8:	add	ip, ip, #135168	; 0x21000
    48fc:	ldr	pc, [ip, #2080]!	; 0x820

00004900 <EV3@plt>:
    4900:	add	ip, pc, #0, 12
    4904:	add	ip, ip, #135168	; 0x21000
    4908:	ldr	pc, [ip, #2072]!	; 0x818

0000490c <btbb_packet_get_lap@plt>:
    490c:	add	ip, pc, #0, 12
    4910:	add	ip, ip, #135168	; 0x21000
    4914:	ldr	pc, [ip, #2064]!	; 0x810

00004918 <lell_packet_new@plt>:
    4918:	add	ip, pc, #0, 12
    491c:	add	ip, ip, #135168	; 0x21000
    4920:	ldr	pc, [ip, #2056]!	; 0x808

00004924 <bt_compidtostr@plt>:
    4924:	add	ip, pc, #0, 12
    4928:	add	ip, ip, #135168	; 0x21000
    492c:	ldr	pc, [ip, #2048]!	; 0x800

00004930 <write@plt>:
    4930:	add	ip, pc, #0, 12
    4934:	add	ip, ip, #135168	; 0x21000
    4938:	ldr	pc, [ip, #2040]!	; 0x7f8

0000493c <get_piconet@plt>:
    493c:	add	ip, pc, #0, 12
    4940:	add	ip, ip, #135168	; 0x21000
    4944:	ldr	pc, [ip, #2032]!	; 0x7f0

00004948 <perm5@plt>:
    4948:	add	ip, pc, #0, 12
    494c:	add	ip, ip, #135168	; 0x21000
    4950:	ldr	pc, [ip, #2024]!	; 0x7e8

00004954 <fclose@plt>:
    4954:	add	ip, pc, #0, 12
    4958:	add	ip, ip, #135168	; 0x21000
    495c:	ldr	pc, [ip, #2016]!	; 0x7e0

00004960 <EV5@plt>:
    4960:	add	ip, pc, #0, 12
    4964:	add	ip, ip, #135168	; 0x21000
    4968:	ldr	pc, [ip, #2008]!	; 0x7d8

0000496c <munmap@plt>:
    496c:	add	ip, pc, #0, 12
    4970:	add	ip, ip, #135168	; 0x21000
    4974:	ldr	pc, [ip, #2000]!	; 0x7d0

00004978 <DH@plt>:
    4978:	add	ip, pc, #0, 12
    497c:	add	ip, ip, #135168	; 0x21000
    4980:	ldr	pc, [ip, #1992]!	; 0x7c8

00004984 <btbb_packet_get_channel@plt>:
    4984:	add	ip, pc, #0, 12
    4988:	add	ip, ip, #135168	; 0x21000
    498c:	ldr	pc, [ip, #1984]!	; 0x7c0

00004990 <precalc@plt>:
    4990:	add	ip, pc, #0, 12
    4994:	add	ip, ip, #135168	; 0x21000
    4998:	ldr	pc, [ip, #1976]!	; 0x7b8

0000499c <btbb_decode_payload@plt>:
    499c:	add	ip, pc, #0, 12
    49a0:	add	ip, ip, #135168	; 0x21000
    49a4:	ldr	pc, [ip, #1968]!	; 0x7b0

000049a8 <promiscuous_packet_search@plt>:
    49a8:	add	ip, pc, #0, 12
    49ac:	add	ip, ip, #135168	; 0x21000
    49b0:	ldr	pc, [ip, #1960]!	; 0x7a8

000049b4 <pcapng_close@plt>:
    49b4:	add	ip, pc, #0, 12
    49b8:	add	ip, ip, #135168	; 0x21000
    49bc:	ldr	pc, [ip, #1952]!	; 0x7a0

000049c0 <btbb_print_packet@plt>:
    49c0:	add	ip, pc, #0, 12
    49c4:	add	ip, ip, #135168	; 0x21000
    49c8:	ldr	pc, [ip, #1944]!	; 0x798

000049cc <fast_perm@plt>:
    49cc:	add	ip, pc, #0, 12
    49d0:	add	ip, ip, #135168	; 0x21000
    49d4:	ldr	pc, [ip, #1936]!	; 0x790

000049d8 <try_clock@plt>:
    49d8:	add	ip, pc, #0, 12
    49dc:	add	ip, ip, #135168	; 0x21000
    49e0:	ldr	pc, [ip, #1928]!	; 0x788

000049e4 <btbb_init_hop_reversal@plt>:
    49e4:	add	ip, pc, #0, 12
    49e8:	add	ip, ip, #135168	; 0x21000
    49ec:	ldr	pc, [ip, #1920]!	; 0x780

000049f0 <btbb_init_piconet@plt>:
    49f0:	add	ip, pc, #0, 12
    49f4:	add	ip, ip, #135168	; 0x21000
    49f8:	ldr	pc, [ip, #1912]!	; 0x778

000049fc <close@plt>:
    49fc:	add	ip, pc, #0, 12
    4a00:	add	ip, ip, #135168	; 0x21000
    4a04:	ldr	pc, [ip, #1904]!	; 0x770

00004a08 <__assert_fail@plt>:
    4a08:	add	ip, pc, #0, 12
    4a0c:	add	ip, ip, #135168	; 0x21000
    4a10:	ldr	pc, [ip, #1896]!	; 0x768

Disassembly of section .text:

00004a14 <btbb_gen_syncword@@Base-0x124>:
    4a14:	ldr	r3, [pc, #20]	; 4a30 <__assert_fail@plt+0x28>
    4a18:	ldr	r2, [pc, #20]	; 4a34 <__assert_fail@plt+0x2c>
    4a1c:	add	r3, pc, r3
    4a20:	ldr	r2, [r3, r2]
    4a24:	cmp	r2, #0
    4a28:	bxeq	lr
    4a2c:	b	4810 <__gmon_start__@plt>
    4a30:	ldrdeq	r1, [r2], -ip
    4a34:	muleq	r0, r0, r1
    4a38:	ldr	r0, [pc, #44]	; 4a6c <__assert_fail@plt+0x64>
    4a3c:	ldr	r3, [pc, #44]	; 4a70 <__assert_fail@plt+0x68>
    4a40:	add	r0, pc, r0
    4a44:	add	r3, pc, r3
    4a48:	cmp	r3, r0
    4a4c:	ldr	r3, [pc, #32]	; 4a74 <__assert_fail@plt+0x6c>
    4a50:	add	r3, pc, r3
    4a54:	bxeq	lr
    4a58:	ldr	r2, [pc, #24]	; 4a78 <__assert_fail@plt+0x70>
    4a5c:	ldr	r3, [r3, r2]
    4a60:	cmp	r3, #0
    4a64:	bxeq	lr
    4a68:	bx	r3
    4a6c:	andeq	r1, r2, ip, asr r7
    4a70:	andeq	r1, r2, r8, asr r7
    4a74:	andeq	r1, r2, r8, lsr #11
    4a78:	andeq	r0, r0, r0, lsl #3
    4a7c:	ldr	r0, [pc, #56]	; 4abc <__assert_fail@plt+0xb4>
    4a80:	ldr	r3, [pc, #56]	; 4ac0 <__assert_fail@plt+0xb8>
    4a84:	add	r0, pc, r0
    4a88:	add	r3, pc, r3
    4a8c:	sub	r1, r3, r0
    4a90:	ldr	r3, [pc, #44]	; 4ac4 <__assert_fail@plt+0xbc>
    4a94:	asr	r1, r1, #2
    4a98:	add	r3, pc, r3
    4a9c:	add	r1, r1, r1, lsr #31
    4aa0:	asrs	r1, r1, #1
    4aa4:	bxeq	lr
    4aa8:	ldr	r2, [pc, #24]	; 4ac8 <__assert_fail@plt+0xc0>
    4aac:	ldr	r3, [r3, r2]
    4ab0:	cmp	r3, #0
    4ab4:	bxeq	lr
    4ab8:	bx	r3
    4abc:	andeq	r1, r2, r8, lsl r7
    4ac0:	andeq	r1, r2, r4, lsl r7
    4ac4:	andeq	r1, r2, r0, ror #10
    4ac8:	muleq	r0, r8, r1
    4acc:	ldr	r3, [pc, #76]	; 4b20 <__assert_fail@plt+0x118>
    4ad0:	ldr	r2, [pc, #76]	; 4b24 <__assert_fail@plt+0x11c>
    4ad4:	add	r3, pc, r3
    4ad8:	add	r2, pc, r2
    4adc:	ldrb	r3, [r3]
    4ae0:	cmp	r3, #0
    4ae4:	bxne	lr
    4ae8:	ldr	r3, [pc, #56]	; 4b28 <__assert_fail@plt+0x120>
    4aec:	push	{r4, lr}
    4af0:	ldr	r3, [r2, r3]
    4af4:	cmp	r3, #0
    4af8:	beq	4b08 <__assert_fail@plt+0x100>
    4afc:	ldr	r3, [pc, #40]	; 4b2c <__assert_fail@plt+0x124>
    4b00:	ldr	r0, [pc, r3]
    4b04:	bl	4600 <__cxa_finalize@plt>
    4b08:	bl	4a38 <__assert_fail@plt+0x30>
    4b0c:	ldr	r3, [pc, #28]	; 4b30 <__assert_fail@plt+0x128>
    4b10:	mov	r2, #1
    4b14:	add	r3, pc, r3
    4b18:	strb	r2, [r3]
    4b1c:	pop	{r4, pc}
    4b20:	andeq	r1, r2, r8, asr #13
    4b24:	andeq	r1, r2, r0, lsr #10
    4b28:	andeq	r0, r0, ip, ror r1
    4b2c:	muleq	r2, r4, r6
    4b30:	andeq	r1, r2, r8, lsl #13
    4b34:	b	4a7c <__assert_fail@plt+0x74>

00004b38 <btbb_gen_syncword@@Base>:
    4b38:	push	{r4, r5, fp, lr}
    4b3c:	add	fp, sp, #8
    4b40:	mov	r1, #-1342177278	; 0xb0000002
    4b44:	movw	ip, #3710	; 0xe7e
    4b48:	movt	ip, #51074	; 0xc782
    4b4c:	mov	r3, #0
    4b50:	ldr	r2, [pc, #44]	; 4b84 <btbb_gen_syncword@@Base+0x4c>
    4b54:	add	r2, pc, r2
    4b58:	mov	lr, #8388608	; 0x800000
    4b5c:	tst	r0, lr, lsr r3
    4b60:	ldrdne	r4, [r2]
    4b64:	eorne	r1, r5, r1
    4b68:	eorne	ip, r4, ip
    4b6c:	add	r2, r2, #8
    4b70:	add	r3, r3, #1
    4b74:	cmp	r3, #24
    4b78:	moveq	r0, ip
    4b7c:	popeq	{r4, r5, fp, pc}
    4b80:	b	4b5c <btbb_gen_syncword@@Base+0x24>
    4b84:	andeq	r7, r0, r4, lsr #1

00004b88 <btbb_get_release@@Base>:
    4b88:	ldr	r0, [pc, #4]	; 4b94 <btbb_get_release@@Base+0xc>
    4b8c:	add	r0, pc, r0
    4b90:	bx	lr
    4b94:	andeq	r9, r0, r0, lsl #13

00004b98 <btbb_get_version@@Base>:
    4b98:	ldr	r0, [pc, #4]	; 4ba4 <btbb_get_version@@Base+0xc>
    4b9c:	add	r0, pc, r0
    4ba0:	bx	lr
    4ba4:	andeq	r9, r0, fp, ror r6

00004ba8 <btbb_init@@Base>:
    4ba8:	push	{r4, sl, fp, lr}
    4bac:	add	fp, sp, #8
    4bb0:	cmp	r0, #6
    4bb4:	bcs	4bdc <btbb_init@@Base+0x34>
    4bb8:	mov	r4, #0
    4bbc:	cmp	r0, #0
    4bc0:	beq	4bd4 <btbb_init@@Base+0x2c>
    4bc4:	ldr	r1, [pc, #72]	; 4c14 <btbb_init@@Base+0x6c>
    4bc8:	ldr	r1, [pc, r1]
    4bcc:	cmp	r1, #0
    4bd0:	bleq	4c18 <btbb_init@@Base+0x70>
    4bd4:	mov	r0, r4
    4bd8:	pop	{r4, sl, fp, pc}
    4bdc:	ldr	r0, [pc, #36]	; 4c08 <btbb_init@@Base+0x60>
    4be0:	ldr	r0, [pc, r0]
    4be4:	ldr	r0, [r0]
    4be8:	ldr	r1, [pc, #28]	; 4c0c <btbb_init@@Base+0x64>
    4bec:	add	r1, pc, r1
    4bf0:	ldr	r2, [pc, #24]	; 4c10 <btbb_init@@Base+0x68>
    4bf4:	add	r2, pc, r2
    4bf8:	bl	4894 <fprintf@plt>
    4bfc:	mvn	r4, #0
    4c00:	mov	r0, r4
    4c04:	pop	{r4, sl, fp, pc}
    4c08:	muleq	r2, ip, r5
    4c0c:	andeq	r9, r0, pc, lsr #12
    4c10:	andeq	r9, r0, r7, asr #12
    4c14:	ldrdeq	r1, [r2], -r8
    4c18:	push	{r4, r5, fp, lr}
    4c1c:	add	fp, sp, #8
    4c20:	cmp	r0, #1
    4c24:	poplt	{r4, r5, fp, pc}
    4c28:	mov	r4, r0
    4c2c:	mov	r5, #0
    4c30:	add	r5, r5, #1
    4c34:	mov	r0, #0
    4c38:	mov	r1, #0
    4c3c:	mov	r2, #0
    4c40:	mov	r3, r5
    4c44:	bl	6714 <clock_from_fhs@@Base+0xc>
    4c48:	cmp	r4, r5
    4c4c:	bne	4c30 <btbb_init@@Base+0x88>
    4c50:	pop	{r4, r5, fp, pc}

00004c54 <btbb_packet_new@@Base>:
    4c54:	push	{r4, r5, fp, lr}
    4c58:	add	fp, sp, #8
    4c5c:	mov	r5, #1
    4c60:	mov	r0, #1
    4c64:	mov	r1, #5952	; 0x1740
    4c68:	bl	45c4 <calloc@plt>
    4c6c:	mov	r4, r0
    4c70:	cmp	r0, #0
    4c74:	strne	r5, [r4]
    4c78:	movne	r0, r4
    4c7c:	popne	{r4, r5, fp, pc}
    4c80:	ldr	r0, [pc, #32]	; 4ca8 <btbb_packet_new@@Base+0x54>
    4c84:	ldr	r0, [pc, r0]
    4c88:	ldr	r3, [r0]
    4c8c:	ldr	r0, [pc, #24]	; 4cac <btbb_packet_new@@Base+0x58>
    4c90:	add	r0, pc, r0
    4c94:	mov	r1, #25
    4c98:	mov	r2, #1
    4c9c:	bl	4774 <fwrite@plt>
    4ca0:	mov	r0, r4
    4ca4:	pop	{r4, r5, fp, pc}
    4ca8:	strdeq	r1, [r2], -r8
    4cac:			; <UNDEFINED> instruction: 0x000095b5

00004cb0 <btbb_packet_ref@@Base>:
    4cb0:	ldr	r1, [r0]
    4cb4:	add	r1, r1, #1
    4cb8:	str	r1, [r0]
    4cbc:	bx	lr

00004cc0 <btbb_packet_unref@@Base>:
    4cc0:	ldr	r1, [r0]
    4cc4:	subs	r1, r1, #1
    4cc8:	str	r1, [r0]
    4ccc:	bxne	lr
    4cd0:	b	4660 <free@plt>

00004cd4 <btbb_packet_get_lap@@Base>:
    4cd4:	ldr	r0, [r0, #12]
    4cd8:	bx	lr

00004cdc <btbb_packet_set_uap@@Base>:
    4cdc:	strb	r1, [r0, #9]
    4ce0:	mov	r1, #2
    4ce4:	mov	r2, #1
    4ce8:	b	4cec <btbb_packet_set_flag@@Base>

00004cec <btbb_packet_set_flag@@Base>:
    4cec:	push	{fp, lr}
    4cf0:	mov	fp, sp
    4cf4:	ldr	lr, [r0, #4]
    4cf8:	mov	ip, #1
    4cfc:	orr	r3, lr, ip, lsl r1
    4d00:	cmp	r2, #0
    4d04:	biceq	r3, lr, ip, lsl r1
    4d08:	str	r3, [r0, #4]
    4d0c:	pop	{fp, pc}

00004d10 <btbb_packet_get_uap@@Base>:
    4d10:	ldrb	r0, [r0, #9]
    4d14:	bx	lr

00004d18 <btbb_packet_get_nap@@Base>:
    4d18:	ldrh	r0, [r0, #10]
    4d1c:	bx	lr

00004d20 <btbb_packet_get_clkn@@Base>:
    4d20:	ldr	r0, [r0, #2816]	; 0xb00
    4d24:	bx	lr

00004d28 <btbb_packet_get_channel@@Base>:
    4d28:	ldrb	r0, [r0, #8]
    4d2c:	bx	lr

00004d30 <btbb_packet_set_modulation@@Base>:
    4d30:	strb	r1, [r0, #16]
    4d34:	bx	lr

00004d38 <btbb_packet_get_modulation@@Base>:
    4d38:	ldrb	r0, [r0, #16]
    4d3c:	bx	lr

00004d40 <btbb_packet_set_transport@@Base>:
    4d40:	strb	r1, [r0, #17]
    4d44:	bx	lr

00004d48 <btbb_packet_get_transport@@Base>:
    4d48:	ldrb	r0, [r0, #17]
    4d4c:	bx	lr

00004d50 <btbb_packet_get_ac_errors@@Base>:
    4d50:	ldrb	r0, [r0, #2820]	; 0xb04
    4d54:	bx	lr

00004d58 <promiscuous_packet_search@@Base>:
    4d58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d5c:	add	fp, sp, #28
    4d60:	sub	sp, sp, #4
    4d64:	cmp	r1, #1
    4d68:	blt	4e8c <promiscuous_packet_search@@Base+0x134>
    4d6c:	mov	r5, r3
    4d70:	mov	r6, r1
    4d74:	mov	r7, r0
    4d78:	str	r2, [sp]
    4d7c:	add	r0, r0, #57	; 0x39
    4d80:	mov	r1, #6
    4d84:	bl	4eb8 <promiscuous_packet_search@@Base+0x160>
    4d88:	lsl	r8, r0, #1
    4d8c:	ldr	r3, [pc, #280]	; 4eac <promiscuous_packet_search@@Base+0x154>
    4d90:	add	r3, pc, r3
    4d94:	mov	r4, #0
    4d98:	add	r0, r7, r4
    4d9c:	ldrb	r1, [r0, #63]	; 0x3f
    4da0:	lsl	r1, r1, #6
    4da4:	and	r2, r8, #254	; 0xfe
    4da8:	orr	r8, r1, r2, lsr #1
    4dac:	uxtb	r1, r8
    4db0:	ldrb	r1, [r3, r1]
    4db4:	cmp	r1, #1
    4db8:	bhi	4e80 <promiscuous_packet_search@@Base+0x128>
    4dbc:	bl	4ee4 <promiscuous_packet_search@@Base+0x18c>
    4dc0:	mov	r2, #1016	; 0x3f8
    4dc4:	and	r2, r2, r1, lsr #22
    4dc8:	ldr	r3, [pc, #224]	; 4eb0 <promiscuous_packet_search@@Base+0x158>
    4dcc:	add	r3, pc, r3
    4dd0:	ldr	r2, [r3, r2]!
    4dd4:	orr	r0, r0, r2
    4dd8:	movw	r2, #21756	; 0x54fc
    4ddc:	movt	r2, #48076	; 0xbbcc
    4de0:	eor	r0, r0, r2
    4de4:	ldr	r2, [r3, #4]
    4de8:	bic	r1, r1, #-33554432	; 0xfe000000
    4dec:	orr	r9, r1, r2
    4df0:	movw	r1, #36246	; 0x8d96
    4df4:	movt	r1, #33668	; 0x8384
    4df8:	eor	r1, r9, r1
    4dfc:	bl	4f34 <promiscuous_packet_search@@Base+0x1dc>
    4e00:	ldr	r3, [fp, #8]
    4e04:	mov	r2, #0
    4e08:	strb	r2, [r3]
    4e0c:	orrs	r2, r0, r1
    4e10:	lsr	sl, r9, #2
    4e14:	beq	4e6c <promiscuous_packet_search@@Base+0x114>
    4e18:	bl	4fc0 <promiscuous_packet_search@@Base+0x268>
    4e1c:	cmp	r0, #0
    4e20:	beq	4e60 <promiscuous_packet_search@@Base+0x108>
    4e24:	mov	sl, r6
    4e28:	mov	r6, r7
    4e2c:	mov	r7, r5
    4e30:	ldr	r5, [r0, #12]
    4e34:	ldr	r0, [r0, #8]
    4e38:	mov	r1, r5
    4e3c:	bl	5108 <promiscuous_packet_search@@Base+0x3b0>
    4e40:	ldr	r3, [fp, #8]
    4e44:	strb	r0, [r3]
    4e48:	eor	r0, r5, r9
    4e4c:	mov	r5, r7
    4e50:	mov	r7, r6
    4e54:	mov	r6, sl
    4e58:	lsr	sl, r0, #2
    4e5c:	b	4e6c <promiscuous_packet_search@@Base+0x114>
    4e60:	ldr	r3, [fp, #8]
    4e64:	mov	r0, #255	; 0xff
    4e68:	strb	r0, [r3]
    4e6c:	ldrb	r0, [r3]
    4e70:	cmp	r0, r5
    4e74:	ldr	r3, [pc, #56]	; 4eb4 <promiscuous_packet_search@@Base+0x15c>
    4e78:	add	r3, pc, r3
    4e7c:	ble	4e94 <promiscuous_packet_search@@Base+0x13c>
    4e80:	add	r4, r4, #1
    4e84:	cmp	r4, r6
    4e88:	blt	4d98 <promiscuous_packet_search@@Base+0x40>
    4e8c:	mvn	r4, #0
    4e90:	b	4ea0 <promiscuous_packet_search@@Base+0x148>
    4e94:	bic	r0, sl, #-16777216	; 0xff000000
    4e98:	ldr	r1, [sp]
    4e9c:	str	r0, [r1]
    4ea0:	mov	r0, r4
    4ea4:	sub	sp, fp, #28
    4ea8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4eac:	andeq	r6, r0, r8, lsr #30
    4eb0:	andeq	r6, r0, ip, ror #30
    4eb4:	andeq	r6, r0, r0, asr #28
    4eb8:	mov	ip, #0
    4ebc:	cmp	r1, #1
    4ec0:	blt	4edc <promiscuous_packet_search@@Base+0x184>
    4ec4:	mov	r3, #0
    4ec8:	ldrb	r2, [r0, r3]
    4ecc:	orr	ip, ip, r2, lsl r3
    4ed0:	add	r3, r3, #1
    4ed4:	cmp	r1, r3
    4ed8:	bne	4ec8 <promiscuous_packet_search@@Base+0x170>
    4edc:	uxtb	r0, ip
    4ee0:	bx	lr
    4ee4:	push	{r4, sl, fp, lr}
    4ee8:	add	fp, sp, #8
    4eec:	mov	ip, r0
    4ef0:	mov	r0, #0
    4ef4:	mov	r1, #0
    4ef8:	mov	r3, #0
    4efc:	ldrb	lr, [ip, r3]
    4f00:	rsb	r2, r3, #32
    4f04:	lsr	r2, lr, r2
    4f08:	sub	r4, r3, #32
    4f0c:	cmp	r4, #0
    4f10:	lslge	r2, lr, r4
    4f14:	orr	r1, r2, r1
    4f18:	lsl	r2, lr, r3
    4f1c:	movwge	r2, #0
    4f20:	orr	r0, r2, r0
    4f24:	add	r3, r3, #1
    4f28:	cmp	r3, #64	; 0x40
    4f2c:	bne	4efc <promiscuous_packet_search@@Base+0x1a4>
    4f30:	pop	{r4, sl, fp, pc}
    4f34:	push	{r4, sl, fp, lr}
    4f38:	add	fp, sp, #8
    4f3c:	movw	ip, #2040	; 0x7f8
    4f40:	and	r3, ip, r1, lsr #5
    4f44:	ldr	r2, [pc, #100]	; 4fb0 <promiscuous_packet_search@@Base+0x258>
    4f48:	add	r2, pc, r2
    4f4c:	ldr	lr, [r2, r3]!
    4f50:	uxtb	r3, r1
    4f54:	ldr	r4, [pc, #88]	; 4fb4 <promiscuous_packet_search@@Base+0x25c>
    4f58:	add	r4, pc, r4
    4f5c:	ldr	r3, [r4, r3, lsl #3]!
    4f60:	eor	r0, r3, r0
    4f64:	eor	lr, r0, lr
    4f68:	and	r0, ip, r1, lsr #13
    4f6c:	ldr	r3, [pc, #68]	; 4fb8 <promiscuous_packet_search@@Base+0x260>
    4f70:	add	r3, pc, r3
    4f74:	ldr	r0, [r3, r0]!
    4f78:	eor	lr, lr, r0
    4f7c:	and	r0, ip, r1, lsr #21
    4f80:	ldr	r1, [pc, #52]	; 4fbc <promiscuous_packet_search@@Base+0x264>
    4f84:	add	r1, pc, r1
    4f88:	ldr	r0, [r1, r0]!
    4f8c:	eor	r0, lr, r0
    4f90:	ldr	r2, [r2, #4]
    4f94:	ldr	r4, [r4, #4]
    4f98:	eor	r2, r4, r2
    4f9c:	ldr	r3, [r3, #4]
    4fa0:	eor	r2, r2, r3
    4fa4:	ldr	r1, [r1, #4]
    4fa8:	eor	r1, r2, r1
    4fac:	pop	{r4, sl, fp, pc}
    4fb0:	strdeq	r7, [r0], -r0
    4fb4:	andeq	r7, r0, r0, ror #3
    4fb8:	andeq	r8, r0, r8, asr #3
    4fbc:			; <UNDEFINED> instruction: 0x000089b4
    4fc0:	push	{r4, r5, r6, sl, fp, lr}
    4fc4:	add	fp, sp, #16
    4fc8:	push	{r0, r1}
    4fcc:	ldr	r0, [pc, #304]	; 5104 <promiscuous_packet_search@@Base+0x3ac>
    4fd0:	ldr	r0, [pc, r0]
    4fd4:	cmp	r0, #0
    4fd8:	beq	50b4 <promiscuous_packet_search@@Base+0x35c>
    4fdc:	ldr	r1, [sp, #4]
    4fe0:	movw	r2, #31161	; 0x79b9
    4fe4:	movt	r2, #40503	; 0x9e37
    4fe8:	add	r2, r1, r2
    4fec:	ldrb	r3, [sp]
    4ff0:	ldrb	r6, [sp, #1]
    4ff4:	ldrb	r5, [sp, #2]
    4ff8:	ldrb	r4, [sp, #3]
    4ffc:	movw	ip, #47810	; 0xbac2
    5000:	movt	ip, #40777	; 0x9f49
    5004:	add	r4, ip, r4, lsl #24
    5008:	sub	r2, r4, r2
    500c:	add	r2, r2, r5, lsl #16
    5010:	add	r2, r2, r6, lsl #8
    5014:	add	r2, r2, r3
    5018:	movw	r3, #63341	; 0xf76d
    501c:	movt	r3, #7
    5020:	eor	r2, r2, r3
    5024:	add	r1, r1, ip
    5028:	sub	r1, r1, r2
    502c:	eor	r1, r1, r2, lsl #8
    5030:	movw	r3, #48887	; 0xbef7
    5034:	movt	r3, #65261	; 0xfeed
    5038:	sub	r3, r3, r2
    503c:	sub	r3, r3, r1
    5040:	eor	r3, r3, r1, lsr #13
    5044:	sub	r2, r2, r1
    5048:	sub	r2, r2, r3
    504c:	eor	r2, r2, r3, lsr #12
    5050:	sub	r1, r1, r3
    5054:	sub	r1, r1, r2
    5058:	eor	r1, r1, r2, lsl #16
    505c:	sub	r3, r3, r2
    5060:	sub	r3, r3, r1
    5064:	eor	r3, r3, r1, lsr #5
    5068:	sub	r2, r2, r1
    506c:	sub	r2, r2, r3
    5070:	eor	r2, r2, r3, lsr #3
    5074:	sub	r1, r1, r3
    5078:	sub	r1, r1, r2
    507c:	eor	r1, r1, r2, lsl #10
    5080:	sub	r2, r3, r2
    5084:	sub	r2, r2, r1
    5088:	eor	r1, r2, r1, lsr #15
    508c:	ldr	r6, [r0, #16]
    5090:	ldm	r6, {r0, r2}
    5094:	sub	r2, r2, #1
    5098:	and	r1, r1, r2
    509c:	add	r1, r1, r1, lsl #1
    50a0:	ldr	r0, [r0, r1, lsl #2]
    50a4:	cmp	r0, #0
    50a8:	ldrne	r1, [r6, #20]
    50ac:	subsne	r4, r0, r1
    50b0:	bne	50c4 <promiscuous_packet_search@@Base+0x36c>
    50b4:	mov	r4, #0
    50b8:	mov	r0, r4
    50bc:	sub	sp, fp, #16
    50c0:	pop	{r4, r5, r6, sl, fp, pc}
    50c4:	mov	r5, sp
    50c8:	ldr	r0, [r4, #40]	; 0x28
    50cc:	cmp	r0, #8
    50d0:	bne	50ec <promiscuous_packet_search@@Base+0x394>
    50d4:	ldr	r0, [r4, #36]	; 0x24
    50d8:	mov	r1, r5
    50dc:	mov	r2, #8
    50e0:	bl	46cc <memcmp@plt>
    50e4:	cmp	r0, #0
    50e8:	beq	50b8 <promiscuous_packet_search@@Base+0x360>
    50ec:	ldr	r0, [r4, #32]
    50f0:	cmp	r0, #0
    50f4:	ldrne	r1, [r6, #20]
    50f8:	subsne	r4, r0, r1
    50fc:	bne	50c8 <promiscuous_packet_search@@Base+0x370>
    5100:	b	50b4 <promiscuous_packet_search@@Base+0x35c>
    5104:	ldrdeq	r1, [r2], -r0
    5108:	push	{r4, sl, fp, lr}
    510c:	add	fp, sp, #8
    5110:	movw	ip, #21845	; 0x5555
    5114:	movt	ip, #21845	; 0x5555
    5118:	and	r3, ip, r1, lsr #1
    511c:	sub	r1, r1, r3
    5120:	movw	r3, #13107	; 0x3333
    5124:	movt	r3, #13107	; 0x3333
    5128:	and	r2, r3, r1, lsr #2
    512c:	and	r1, r1, r3
    5130:	add	r1, r1, r2
    5134:	add	r1, r1, r1, lsr #4
    5138:	movw	lr, #3855	; 0xf0f
    513c:	movt	lr, #3855	; 0xf0f
    5140:	and	r1, r1, lr
    5144:	movw	r4, #257	; 0x101
    5148:	movt	r4, #257	; 0x101
    514c:	mul	r1, r1, r4
    5150:	and	r2, ip, r0, lsr #1
    5154:	sub	r0, r0, r2
    5158:	and	r2, r3, r0, lsr #2
    515c:	and	r0, r0, r3
    5160:	add	r0, r0, r2
    5164:	add	r0, r0, r0, lsr #4
    5168:	and	r0, r0, lr
    516c:	mul	r0, r0, r4
    5170:	lsr	r0, r0, #24
    5174:	add	r0, r0, r1, lsr #24
    5178:	pop	{r4, sl, fp, pc}

0000517c <find_known_lap@@Base>:
    517c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5180:	add	fp, sp, #28
    5184:	sub	sp, sp, #4
    5188:	mov	r9, r3
    518c:	mov	r6, r1
    5190:	mov	sl, r0
    5194:	mov	r0, r2
    5198:	bl	4780 <btbb_gen_syncword@plt>
    519c:	mov	r5, r0
    51a0:	mvn	r0, #0
    51a4:	cmp	r6, #1
    51a8:	blt	51e8 <find_known_lap@@Base+0x6c>
    51ac:	mov	r4, r1
    51b0:	ldr	r8, [fp, #8]
    51b4:	mov	r7, #0
    51b8:	add	r0, sl, r7
    51bc:	bl	4ee4 <promiscuous_packet_search@@Base+0x18c>
    51c0:	eor	r0, r0, r5
    51c4:	eor	r1, r1, r4
    51c8:	bl	5108 <promiscuous_packet_search@@Base+0x3b0>
    51cc:	strb	r0, [r8]
    51d0:	cmp	r0, r9
    51d4:	ble	51f0 <find_known_lap@@Base+0x74>
    51d8:	add	r7, r7, #1
    51dc:	cmp	r7, r6
    51e0:	blt	51b8 <find_known_lap@@Base+0x3c>
    51e4:	mvn	r0, #0
    51e8:	sub	sp, fp, #28
    51ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    51f0:	mov	r0, r7
    51f4:	sub	sp, fp, #28
    51f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

000051fc <btbb_find_ac@@Base>:
    51fc:	push	{r4, r5, fp, lr}
    5200:	add	fp, sp, #8
    5204:	sub	sp, sp, #16
    5208:	str	r2, [sp, #12]
    520c:	cmn	r2, #1
    5210:	beq	5224 <btbb_find_ac@@Base+0x28>
    5214:	add	r5, sp, #11
    5218:	str	r5, [sp]
    521c:	bl	48c4 <find_known_lap@plt>
    5220:	b	5234 <btbb_find_ac@@Base+0x38>
    5224:	add	r2, sp, #11
    5228:	str	r2, [sp]
    522c:	add	r2, sp, #12
    5230:	bl	49a8 <promiscuous_packet_search@plt>
    5234:	mov	r4, r0
    5238:	cmp	r0, #0
    523c:	blt	5268 <btbb_find_ac@@Base+0x6c>
    5240:	ldr	r5, [fp, #8]
    5244:	ldr	r0, [r5]
    5248:	cmp	r0, #0
    524c:	bne	5258 <btbb_find_ac@@Base+0x5c>
    5250:	bl	47f8 <btbb_packet_new@plt>
    5254:	str	r0, [r5]
    5258:	ldr	r0, [r5]
    525c:	ldrb	r2, [sp, #11]
    5260:	ldr	r1, [sp, #12]
    5264:	bl	5274 <btbb_find_ac@@Base+0x78>
    5268:	mov	r0, r4
    526c:	sub	sp, fp, #8
    5270:	pop	{r4, r5, fp, pc}
    5274:	strb	r2, [r0, #2820]	; 0xb04
    5278:	str	r1, [r0, #12]
    527c:	mov	r1, #0
    5280:	str	r1, [r0, #4]
    5284:	mov	r1, #0
    5288:	mov	r2, #1
    528c:	b	4cec <btbb_packet_set_flag@@Base>

00005290 <btbb_packet_set_data@@Base>:
    5290:	push	{r4, r5, fp, lr}
    5294:	add	fp, sp, #8
    5298:	movw	ip, #3125	; 0xc35
    529c:	cmp	r2, ip
    52a0:	movlt	ip, r2
    52a4:	ldr	lr, [fp, #8]
    52a8:	cmp	r2, #1
    52ac:	blt	52d0 <btbb_packet_set_data@@Base+0x40>
    52b0:	movw	r2, #2824	; 0xb08
    52b4:	add	r2, r0, r2
    52b8:	mov	r4, #0
    52bc:	ldrb	r5, [r1, r4]
    52c0:	strb	r5, [r2, r4]
    52c4:	add	r4, r4, #1
    52c8:	cmp	r4, ip
    52cc:	blt	52bc <btbb_packet_set_data@@Base+0x2c>
    52d0:	movw	r1, #2822	; 0xb06
    52d4:	strh	ip, [r0, r1]
    52d8:	strb	r3, [r0, #8]
    52dc:	lsr	r1, lr, #1
    52e0:	str	r1, [r0, #2816]	; 0xb00
    52e4:	pop	{r4, r5, fp, pc}

000052e8 <btbb_packet_get_flag@@Base>:
    52e8:	ldr	r0, [r0, #4]
    52ec:	mov	r2, #1
    52f0:	and	r0, r0, r2, lsl r1
    52f4:	cmp	r0, #0
    52f8:	movwne	r0, #1
    52fc:	bx	lr

00005300 <btbb_get_symbols@@Base>:
    5300:	movw	r1, #2824	; 0xb08
    5304:	add	r0, r0, r1
    5308:	bx	lr

0000530c <btbb_packet_get_payload_length@@Base>:
    530c:	ldr	r0, [r0, #64]	; 0x40
    5310:	bx	lr

00005314 <btbb_get_payload@@Base>:
    5314:	add	r0, r0, #68	; 0x44
    5318:	bx	lr

0000531c <btbb_get_payload_packed@@Base>:
    531c:	push	{r4, r5, r6, r7, fp, lr}
    5320:	add	fp, sp, #16
    5324:	mov	r5, r0
    5328:	ldr	r0, [r0, #64]	; 0x40
    532c:	cmp	r0, #1
    5330:	poplt	{r4, r5, r6, r7, fp, pc}
    5334:	mov	r4, r1
    5338:	add	r6, r5, #68	; 0x44
    533c:	mov	r7, #0
    5340:	mov	r0, r6
    5344:	mov	r1, #8
    5348:	bl	4eb8 <promiscuous_packet_search@@Base+0x160>
    534c:	strb	r0, [r4, r7]
    5350:	add	r6, r6, #8
    5354:	add	r7, r7, #1
    5358:	ldr	r0, [r5, #64]	; 0x40
    535c:	cmp	r7, r0
    5360:	blt	5340 <btbb_get_payload_packed@@Base+0x24>
    5364:	pop	{r4, r5, r6, r7, fp, pc}

00005368 <btbb_packet_get_type@@Base>:
    5368:	ldrb	r0, [r0, #18]
    536c:	bx	lr

00005370 <btbb_packet_get_lt_addr@@Base>:
    5370:	ldrb	r0, [r0, #19]
    5374:	bx	lr

00005378 <btbb_packet_get_header_flags@@Base>:
    5378:	ldrb	r0, [r0, #20]
    537c:	bx	lr

00005380 <btbb_packet_get_hec@@Base>:
    5380:	ldrb	r0, [r0, #21]
    5384:	bx	lr

00005388 <btbb_packet_get_header_packed@@Base>:
    5388:	add	r0, r0, #22
    538c:	mov	r1, #18
    5390:	b	5394 <btbb_packet_get_header_packed@@Base+0xc>
    5394:	cmp	r1, #1
    5398:	movlt	r0, #0
    539c:	bxlt	lr
    53a0:	mov	ip, r0
    53a4:	mov	r0, #0
    53a8:	mov	r3, #0
    53ac:	ldrb	r2, [ip, r3]
    53b0:	orr	r0, r0, r2, lsl r3
    53b4:	add	r3, r3, #1
    53b8:	cmp	r1, r3
    53bc:	bne	53ac <btbb_packet_get_header_packed@@Base+0x24>
    53c0:	bx	lr

000053c4 <crc_check@@Base>:
    53c4:	push	{r4, sl, fp, lr}
    53c8:	add	fp, sp, #8
    53cc:	mov	r4, r1
    53d0:	mov	r1, r0
    53d4:	ldrb	r0, [r4, #18]
    53d8:	sub	r2, r0, #2
    53dc:	mov	r0, #1
    53e0:	cmp	r2, #13
    53e4:	bhi	545c <crc_check@@Base+0x98>
    53e8:	add	r3, pc, #4
    53ec:	ldr	r2, [r3, r2, lsl #2]
    53f0:	add	pc, r3, r2
    53f4:	strheq	r0, [r0], -r4
    53f8:	andeq	r0, r0, r8, lsr r0
    53fc:	andeq	r0, r0, r4, ror r0
    5400:	andeq	r0, r0, ip, asr #1
    5404:	andeq	r0, r0, r8, rrx
    5408:	andeq	r0, r0, r4, ror #1
    540c:	andeq	r0, r0, r8, lsr r0
    5410:	andeq	r0, r0, r8, rrx
    5414:	andeq	r0, r0, r8, lsr r0
    5418:	andeq	r0, r0, r4, ror r0
    541c:	strdeq	r0, [r0], -ip
    5420:	andeq	r0, r0, r4, lsl r1
    5424:	andeq	r0, r0, r8, lsr r0
    5428:	andeq	r0, r0, r4, ror r0
    542c:	mov	r0, r1
    5430:	mov	r1, r4
    5434:	bl	4720 <DM@plt>
    5438:	cmp	r0, #0
    543c:	beq	547c <crc_check@@Base+0xb8>
    5440:	cmp	r0, #2
    5444:	blt	545c <crc_check@@Base+0x98>
    5448:	ldrb	r2, [r4, #18]
    544c:	mov	r1, #1
    5450:	cmp	r2, #7
    5454:	cmpne	r2, #13
    5458:	beq	54a0 <crc_check@@Base+0xdc>
    545c:	mov	r1, r0
    5460:	mov	r0, r1
    5464:	pop	{r4, sl, fp, pc}
    5468:	mov	r0, r1
    546c:	mov	r1, r4
    5470:	bl	4978 <DH@plt>
    5474:	cmp	r0, #0
    5478:	bne	5440 <crc_check@@Base+0x7c>
    547c:	ldrb	r2, [r4, #18]
    5480:	mov	r1, #1
    5484:	cmp	r2, #5
    5488:	bhi	54a0 <crc_check@@Base+0xdc>
    548c:	mov	r0, #0
    5490:	mov	r3, #1
    5494:	mov	r4, #44	; 0x2c
    5498:	tst	r4, r3, lsl r2
    549c:	movne	r1, r0
    54a0:	mov	r0, r1
    54a4:	pop	{r4, sl, fp, pc}
    54a8:	mov	r0, r1
    54ac:	mov	r1, r4
    54b0:	bl	46a8 <fhs@plt>
    54b4:	cmp	r0, #0
    54b8:	bne	5440 <crc_check@@Base+0x7c>
    54bc:	b	547c <crc_check@@Base+0xb8>
    54c0:	mov	r0, r1
    54c4:	mov	r1, r4
    54c8:	bl	4738 <HV@plt>
    54cc:	cmp	r0, #0
    54d0:	bne	5440 <crc_check@@Base+0x7c>
    54d4:	b	547c <crc_check@@Base+0xb8>
    54d8:	mov	r0, r1
    54dc:	mov	r1, r4
    54e0:	bl	4900 <EV3@plt>
    54e4:	cmp	r0, #0
    54e8:	bne	5440 <crc_check@@Base+0x7c>
    54ec:	b	547c <crc_check@@Base+0xb8>
    54f0:	mov	r0, r1
    54f4:	mov	r1, r4
    54f8:	bl	46b4 <EV4@plt>
    54fc:	cmp	r0, #0
    5500:	bne	5440 <crc_check@@Base+0x7c>
    5504:	b	547c <crc_check@@Base+0xb8>
    5508:	mov	r0, r1
    550c:	mov	r1, r4
    5510:	bl	4960 <EV5@plt>
    5514:	cmp	r0, #0
    5518:	bne	5440 <crc_check@@Base+0x7c>
    551c:	b	547c <crc_check@@Base+0xb8>

00005520 <fhs@@Base>:
    5520:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5524:	add	fp, sp, #28
    5528:	sub	sp, sp, #12
    552c:	mov	r8, r0
    5530:	mov	r0, #20
    5534:	str	r0, [r1, #64]	; 0x40
    5538:	movw	r0, #2822	; 0xb06
    553c:	ldrh	r0, [r1, r0]
    5540:	lsr	r0, r0, #1
    5544:	mov	r9, #1
    5548:	cmp	r0, #181	; 0xb5
    554c:	bcc	5604 <fhs@@Base+0xe4>
    5550:	mov	r4, r1
    5554:	movw	r0, #2946	; 0xb82
    5558:	add	r0, r1, r0
    555c:	mov	r1, #160	; 0xa0
    5560:	bl	5c4c <HV@@Base+0x158>
    5564:	mov	r9, #0
    5568:	cmp	r0, #0
    556c:	beq	5604 <fhs@@Base+0xe4>
    5570:	mov	r6, r0
    5574:	ldr	r0, [r4, #64]	; 0x40
    5578:	mov	sl, #18
    557c:	str	sl, [sp]
    5580:	str	r4, [sp, #4]
    5584:	add	r7, r4, #68	; 0x44
    5588:	lsl	r3, r0, #3
    558c:	mov	r0, r6
    5590:	mov	r1, r7
    5594:	mov	r2, r8
    5598:	bl	5dec <HV@@Base+0x2f8>
    559c:	mov	r0, r4
    55a0:	bl	5e8c <HV@@Base+0x398>
    55a4:	cmp	r0, #0
    55a8:	bne	55f8 <fhs@@Base+0xd8>
    55ac:	mov	r5, #32
    55b0:	ldr	r0, [r4, #64]	; 0x40
    55b4:	str	sl, [sp]
    55b8:	str	r4, [sp, #4]
    55bc:	lsl	r3, r0, #3
    55c0:	mov	r0, r6
    55c4:	mov	r1, r7
    55c8:	mov	r2, r5
    55cc:	bl	5dec <HV@@Base+0x2f8>
    55d0:	mov	r0, r4
    55d4:	bl	5e8c <HV@@Base+0x398>
    55d8:	cmp	r0, #0
    55dc:	bne	55f8 <fhs@@Base+0xd8>
    55e0:	add	r5, r5, #1
    55e4:	cmp	r5, #63	; 0x3f
    55e8:	bls	55b0 <fhs@@Base+0x90>
    55ec:	mov	r0, r6
    55f0:	bl	4660 <free@plt>
    55f4:	b	5604 <fhs@@Base+0xe4>
    55f8:	mov	r0, r6
    55fc:	bl	4660 <free@plt>
    5600:	mov	r9, #1000	; 0x3e8
    5604:	mov	r0, r9
    5608:	sub	sp, fp, #28
    560c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005610 <DM@@Base>:
    5610:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    5614:	add	fp, sp, #24
    5618:	sub	sp, sp, #8
    561c:	mov	r4, r1
    5620:	mov	r8, r0
    5624:	ldrb	r0, [r1, #18]
    5628:	sub	r1, r0, #3
    562c:	cmp	r1, #11
    5630:	bhi	5748 <DM@@Base+0x138>
    5634:	movw	r0, #2946	; 0xb82
    5638:	add	r9, r4, r0
    563c:	movw	r0, #2822	; 0xb06
    5640:	ldrh	r0, [r4, r0]
    5644:	sub	r7, r0, #122	; 0x7a
    5648:	mov	r6, #20
    564c:	mov	r2, #1
    5650:	add	r3, pc, #8
    5654:	ldr	r1, [r3, r1, lsl #2]
    5658:	mov	r5, #0
    565c:	add	pc, r3, r1
    5660:	andeq	r0, r0, r4, asr r0
    5664:	andeq	r0, r0, ip, ror #1
    5668:	andeq	r0, r0, ip, ror #1
    566c:	andeq	r0, r0, ip, ror #1
    5670:	andeq	r0, r0, ip, ror #1
    5674:	andeq	r0, r0, r0, lsr r0
    5678:	andeq	r0, r0, ip, ror #1
    567c:	andeq	r0, r0, r4, asr #32
    5680:	andeq	r0, r0, ip, ror #1
    5684:	andeq	r0, r0, ip, ror #1
    5688:	andeq	r0, r0, ip, ror #1
    568c:	andeq	r0, r0, ip, asr #32
    5690:	movw	r1, #3026	; 0xbd2
    5694:	add	r9, r4, r1
    5698:	sub	r7, r0, #202	; 0xca
    569c:	mov	r6, #12
    56a0:	b	56b4 <DM@@Base+0xa4>
    56a4:	mov	r6, #125	; 0x7d
    56a8:	b	56b0 <DM@@Base+0xa0>
    56ac:	mov	r6, #228	; 0xe4
    56b0:	mov	r2, #2
    56b4:	mov	r5, #1
    56b8:	str	r5, [sp]
    56bc:	str	r4, [sp, #4]
    56c0:	mov	r0, r9
    56c4:	mov	r1, r8
    56c8:	mov	r3, r7
    56cc:	bl	5ed4 <HV@@Base+0x3e0>
    56d0:	cmp	r0, #0
    56d4:	beq	5748 <DM@@Base+0x138>
    56d8:	ldr	r0, [r4, #64]	; 0x40
    56dc:	cmp	r0, r6
    56e0:	bgt	574c <DM@@Base+0x13c>
    56e4:	cmp	r7, r0, lsl #3
    56e8:	blt	574c <DM@@Base+0x13c>
    56ec:	lsl	r7, r0, #3
    56f0:	mov	r0, r9
    56f4:	mov	r1, r7
    56f8:	bl	5c4c <HV@@Base+0x158>
    56fc:	cmp	r0, #0
    5700:	mov	r5, #0
    5704:	beq	574c <DM@@Base+0x13c>
    5708:	mov	r6, r0
    570c:	mov	r0, #18
    5710:	stm	sp, {r0, r4}
    5714:	add	r1, r4, #68	; 0x44
    5718:	mov	r0, r6
    571c:	mov	r2, r8
    5720:	mov	r3, r7
    5724:	bl	5dec <HV@@Base+0x2f8>
    5728:	mov	r0, r6
    572c:	bl	4660 <free@plt>
    5730:	mov	r0, r4
    5734:	bl	5e8c <HV@@Base+0x398>
    5738:	mov	r5, #10
    573c:	cmp	r0, #0
    5740:	movweq	r5, #2
    5744:	b	574c <DM@@Base+0x13c>
    5748:	mov	r5, #0
    574c:	mov	r0, r5
    5750:	sub	sp, fp, #24
    5754:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00005758 <DH@@Base>:
    5758:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    575c:	add	fp, sp, #24
    5760:	sub	sp, sp, #8
    5764:	mov	r4, r1
    5768:	mov	r8, r0
    576c:	ldrb	r0, [r1, #18]
    5770:	sub	r1, r0, #4
    5774:	mov	r6, #0
    5778:	cmp	r1, #11
    577c:	bhi	5868 <DH@@Base+0x110>
    5780:	movw	r0, #2822	; 0xb06
    5784:	ldrh	r0, [r4, r0]
    5788:	mov	r2, #1
    578c:	mov	r9, #30
    5790:	add	r3, pc, #4
    5794:	ldr	r1, [r3, r1, lsl #2]
    5798:	add	pc, r3, r1
    579c:	andeq	r0, r0, r4, asr #32
    57a0:	andeq	r0, r0, ip, asr #1
    57a4:	andeq	r0, r0, ip, asr #1
    57a8:	andeq	r0, r0, ip, asr #1
    57ac:	andeq	r0, r0, ip, asr #1
    57b0:	andeq	r0, r0, r4, asr #32
    57b4:	andeq	r0, r0, ip, asr #1
    57b8:	andeq	r0, r0, r0, lsr r0
    57bc:	andeq	r0, r0, ip, asr #1
    57c0:	andeq	r0, r0, ip, asr #1
    57c4:	andeq	r0, r0, ip, asr #1
    57c8:	andeq	r0, r0, ip, lsr r0
    57cc:	mov	r2, #2
    57d0:	mov	r9, #187	; 0xbb
    57d4:	b	57e0 <DH@@Base+0x88>
    57d8:	mov	r2, #2
    57dc:	movw	r9, #343	; 0x157
    57e0:	movw	r1, #2946	; 0xb82
    57e4:	add	r7, r4, r1
    57e8:	sub	r5, r0, #122	; 0x7a
    57ec:	mov	r6, #0
    57f0:	str	r6, [sp]
    57f4:	str	r4, [sp, #4]
    57f8:	mov	r0, r7
    57fc:	mov	r1, r8
    5800:	mov	r3, r5
    5804:	bl	5ed4 <HV@@Base+0x3e0>
    5808:	cmp	r0, #0
    580c:	beq	5868 <DH@@Base+0x110>
    5810:	ldr	r0, [r4, #64]	; 0x40
    5814:	mov	r6, #1
    5818:	cmp	r0, r9
    581c:	bgt	5868 <DH@@Base+0x110>
    5820:	cmp	r5, r0, lsl #3
    5824:	blt	5868 <DH@@Base+0x110>
    5828:	lsl	r3, r0, #3
    582c:	mov	r0, #18
    5830:	stm	sp, {r0, r4}
    5834:	add	r1, r4, #68	; 0x44
    5838:	mov	r0, r7
    583c:	mov	r2, r8
    5840:	bl	5dec <HV@@Base+0x2f8>
    5844:	ldrb	r0, [r4, #18]
    5848:	mov	r6, #2
    584c:	cmp	r0, #9
    5850:	beq	5868 <DH@@Base+0x110>
    5854:	mov	r0, r4
    5858:	bl	5e8c <HV@@Base+0x398>
    585c:	mov	r6, #10
    5860:	cmp	r0, #0
    5864:	movweq	r6, #2
    5868:	mov	r0, r6
    586c:	sub	sp, fp, #24
    5870:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00005874 <EV3@@Base>:
    5874:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    5878:	add	fp, sp, #24
    587c:	sub	sp, sp, #8
    5880:	mov	r4, r1
    5884:	mov	r8, r0
    5888:	mov	r0, #0
    588c:	str	r0, [r1, #64]	; 0x40
    5890:	movw	r1, #2946	; 0xb82
    5894:	add	r6, r4, r1
    5898:	movw	r1, #2822	; 0xb06
    589c:	ldrh	r1, [r4, r1]
    58a0:	sub	r7, r1, #122	; 0x7a
    58a4:	add	r1, r0, #1
    58a8:	lsl	r1, r1, #3
    58ac:	cmp	r1, r7
    58b0:	bgt	5910 <EV3@@Base+0x9c>
    58b4:	lsl	r0, r0, #3
    58b8:	add	r1, r0, #18
    58bc:	stm	sp, {r1, r4}
    58c0:	add	r0, r4, r0
    58c4:	add	r1, r0, #68	; 0x44
    58c8:	mov	r0, r6
    58cc:	mov	r2, r8
    58d0:	mov	r3, #8
    58d4:	bl	5dec <HV@@Base+0x2f8>
    58d8:	ldr	r5, [r4, #64]	; 0x40
    58dc:	cmp	r5, #3
    58e0:	blt	58f4 <EV3@@Base+0x80>
    58e4:	mov	r0, r4
    58e8:	bl	5e8c <HV@@Base+0x398>
    58ec:	cmp	r0, #0
    58f0:	bne	591c <EV3@@Base+0xa8>
    58f4:	add	r0, r5, #1
    58f8:	str	r0, [r4, #64]	; 0x40
    58fc:	cmp	r5, #31
    5900:	blt	58a4 <EV3@@Base+0x30>
    5904:	mov	r0, #2
    5908:	sub	sp, fp, #24
    590c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    5910:	mov	r0, #1
    5914:	sub	sp, fp, #24
    5918:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    591c:	mov	r0, #10
    5920:	sub	sp, fp, #24
    5924:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00005928 <EV4@@Base>:
    5928:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    592c:	add	fp, sp, #28
    5930:	sub	sp, sp, #20
    5934:	mov	r5, r1
    5938:	str	r0, [sp, #12]
    593c:	mov	r0, #1
    5940:	str	r0, [r1, #64]	; 0x40
    5944:	movw	r0, #2946	; 0xb82
    5948:	add	r0, r1, r0
    594c:	str	r0, [sp, #16]
    5950:	movw	r0, #2822	; 0xb06
    5954:	ldrh	r0, [r1, r0]
    5958:	sub	sl, r0, #122	; 0x7a
    595c:	mov	r4, #0
    5960:	mov	r8, #0
    5964:	add	r9, r8, #15
    5968:	cmp	r9, sl
    596c:	bgt	5a18 <EV4@@Base+0xf0>
    5970:	ldr	r0, [sp, #16]
    5974:	add	r0, r0, r8
    5978:	mov	r1, #10
    597c:	bl	5c4c <HV@@Base+0x158>
    5980:	mov	r7, r0
    5984:	cmp	r0, #0
    5988:	beq	5a24 <EV4@@Base+0xfc>
    598c:	add	r0, r4, #18
    5990:	stm	sp, {r0, r5}
    5994:	add	r0, r5, r4
    5998:	add	r1, r0, #68	; 0x44
    599c:	mov	r0, r7
    59a0:	ldr	r2, [sp, #12]
    59a4:	mov	r3, #10
    59a8:	bl	5dec <HV@@Base+0x2f8>
    59ac:	mov	r0, r7
    59b0:	bl	4660 <free@plt>
    59b4:	ldr	r0, [r5, #64]	; 0x40
    59b8:	cmp	r4, r0, lsl #3
    59bc:	blt	59ec <EV4@@Base+0xc4>
    59c0:	add	r7, r0, #1
    59c4:	lsl	r6, r0, #3
    59c8:	mov	r0, r5
    59cc:	bl	5e8c <HV@@Base+0x398>
    59d0:	cmp	r0, #0
    59d4:	bne	5a0c <EV4@@Base+0xe4>
    59d8:	str	r7, [r5, #64]	; 0x40
    59dc:	add	r7, r7, #1
    59e0:	add	r6, r6, #8
    59e4:	cmp	r6, r4
    59e8:	ble	59c8 <EV4@@Base+0xa0>
    59ec:	add	r4, r4, #10
    59f0:	movw	r0, #1470	; 0x5be
    59f4:	cmp	r9, r0
    59f8:	mov	r8, r9
    59fc:	bcc	5964 <EV4@@Base+0x3c>
    5a00:	mov	r0, #2
    5a04:	sub	sp, fp, #28
    5a08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a0c:	mov	r0, #10
    5a10:	sub	sp, fp, #28
    5a14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a18:	mov	r0, #1
    5a1c:	sub	sp, fp, #28
    5a20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a24:	mov	r0, r7
    5a28:	bl	4660 <free@plt>
    5a2c:	mov	r0, #0
    5a30:	cmp	r8, #44	; 0x2c
    5a34:	movwhi	r0, #1
    5a38:	sub	sp, fp, #28
    5a3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005a40 <EV5@@Base>:
    5a40:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    5a44:	add	fp, sp, #24
    5a48:	sub	sp, sp, #8
    5a4c:	mov	r4, r1
    5a50:	mov	r8, r0
    5a54:	mov	r0, #0
    5a58:	str	r0, [r1, #64]	; 0x40
    5a5c:	movw	r1, #2946	; 0xb82
    5a60:	add	r6, r4, r1
    5a64:	movw	r1, #2822	; 0xb06
    5a68:	ldrh	r1, [r4, r1]
    5a6c:	sub	r7, r1, #122	; 0x7a
    5a70:	add	r1, r0, #1
    5a74:	lsl	r1, r1, #3
    5a78:	cmp	r1, r7
    5a7c:	bgt	5adc <EV5@@Base+0x9c>
    5a80:	lsl	r0, r0, #3
    5a84:	add	r1, r0, #18
    5a88:	stm	sp, {r1, r4}
    5a8c:	add	r0, r4, r0
    5a90:	add	r1, r0, #68	; 0x44
    5a94:	mov	r0, r6
    5a98:	mov	r2, r8
    5a9c:	mov	r3, #8
    5aa0:	bl	5dec <HV@@Base+0x2f8>
    5aa4:	ldr	r5, [r4, #64]	; 0x40
    5aa8:	cmp	r5, #3
    5aac:	blt	5ac0 <EV5@@Base+0x80>
    5ab0:	mov	r0, r4
    5ab4:	bl	5e8c <HV@@Base+0x398>
    5ab8:	cmp	r0, #0
    5abc:	bne	5ae8 <EV5@@Base+0xa8>
    5ac0:	add	r0, r5, #1
    5ac4:	str	r0, [r4, #64]	; 0x40
    5ac8:	cmp	r5, #181	; 0xb5
    5acc:	blt	5a70 <EV5@@Base+0x30>
    5ad0:	mov	r0, #2
    5ad4:	sub	sp, fp, #24
    5ad8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    5adc:	mov	r0, #1
    5ae0:	sub	sp, fp, #24
    5ae4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    5ae8:	mov	r0, #10
    5aec:	sub	sp, fp, #24
    5af0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00005af4 <HV@@Base>:
    5af4:	push	{r4, r5, r6, r7, fp, lr}
    5af8:	add	fp, sp, #16
    5afc:	sub	sp, sp, #88	; 0x58
    5b00:	mov	r6, r1
    5b04:	mov	r5, r0
    5b08:	mov	r0, #0
    5b0c:	str	r0, [r1, #40]	; 0x28
    5b10:	movw	r1, #2822	; 0xb06
    5b14:	ldrh	r1, [r6, r1]
    5b18:	lsr	r1, r1, #1
    5b1c:	cmp	r1, #180	; 0xb4
    5b20:	bhi	5b30 <HV@@Base+0x3c>
    5b24:	str	r0, [r6, #64]	; 0x40
    5b28:	mov	r4, #1
    5b2c:	b	5c40 <HV@@Base+0x14c>
    5b30:	movw	r0, #2946	; 0xb82
    5b34:	add	r7, r6, r0
    5b38:	ldrb	r0, [r6, #18]
    5b3c:	mov	r4, #2
    5b40:	cmp	r0, #7
    5b44:	beq	5ba4 <HV@@Base+0xb0>
    5b48:	cmp	r0, #6
    5b4c:	beq	5be0 <HV@@Base+0xec>
    5b50:	cmp	r0, #5
    5b54:	bne	5c40 <HV@@Base+0x14c>
    5b58:	add	r1, sp, #8
    5b5c:	mov	r0, r7
    5b60:	mov	r2, #80	; 0x50
    5b64:	bl	6068 <HV@@Base+0x574>
    5b68:	cmp	r0, #0
    5b6c:	beq	5c3c <HV@@Base+0x148>
    5b70:	mov	r0, #10
    5b74:	str	r0, [r6, #64]	; 0x40
    5b78:	mov	r0, r6
    5b7c:	mov	r1, #7
    5b80:	mov	r2, #1
    5b84:	bl	4648 <btbb_packet_set_flag@plt>
    5b88:	ldr	r0, [r6, #64]	; 0x40
    5b8c:	mov	r1, #18
    5b90:	stm	sp, {r1, r6}
    5b94:	add	r1, r6, #68	; 0x44
    5b98:	lsl	r3, r0, #3
    5b9c:	add	r0, sp, #8
    5ba0:	b	5bd4 <HV@@Base+0xe0>
    5ba4:	mov	r0, #30
    5ba8:	str	r0, [r6, #64]	; 0x40
    5bac:	mov	r0, r6
    5bb0:	mov	r1, #7
    5bb4:	mov	r2, #1
    5bb8:	bl	4648 <btbb_packet_set_flag@plt>
    5bbc:	ldr	r0, [r6, #64]	; 0x40
    5bc0:	mov	r1, #18
    5bc4:	stm	sp, {r1, r6}
    5bc8:	add	r1, r6, #68	; 0x44
    5bcc:	lsl	r3, r0, #3
    5bd0:	mov	r0, r7
    5bd4:	mov	r2, r5
    5bd8:	bl	5dec <HV@@Base+0x2f8>
    5bdc:	b	5c40 <HV@@Base+0x14c>
    5be0:	mov	r0, r7
    5be4:	mov	r1, #160	; 0xa0
    5be8:	bl	5c4c <HV@@Base+0x158>
    5bec:	cmp	r0, #0
    5bf0:	beq	5c3c <HV@@Base+0x148>
    5bf4:	mov	r7, r0
    5bf8:	mov	r0, #20
    5bfc:	str	r0, [r6, #64]	; 0x40
    5c00:	mov	r0, r6
    5c04:	mov	r1, #7
    5c08:	mov	r2, #1
    5c0c:	bl	4648 <btbb_packet_set_flag@plt>
    5c10:	ldr	r0, [r6, #64]	; 0x40
    5c14:	mov	r1, #18
    5c18:	stm	sp, {r1, r6}
    5c1c:	add	r1, r6, #68	; 0x44
    5c20:	lsl	r3, r0, #3
    5c24:	mov	r0, r7
    5c28:	mov	r2, r5
    5c2c:	bl	5dec <HV@@Base+0x2f8>
    5c30:	mov	r0, r7
    5c34:	bl	4660 <free@plt>
    5c38:	b	5c40 <HV@@Base+0x14c>
    5c3c:	mov	r4, #0
    5c40:	mov	r0, r4
    5c44:	sub	sp, fp, #16
    5c48:	pop	{r4, r5, r6, r7, fp, pc}
    5c4c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    5c50:	add	fp, sp, #24
    5c54:	mov	r8, r1
    5c58:	mov	r5, r0
    5c5c:	movw	r0, #26215	; 0x6667
    5c60:	movt	r0, #26214	; 0x6666
    5c64:	smmul	r0, r1, r0
    5c68:	lsr	r1, r0, #2
    5c6c:	add	r0, r1, r0, lsr #31
    5c70:	add	r0, r0, r0, lsl #2
    5c74:	sub	r0, r8, r0, lsl #1
    5c78:	uxtb	r0, r0
    5c7c:	rsb	r1, r0, #10
    5c80:	cmp	r0, #0
    5c84:	addne	r8, r8, r1
    5c88:	mov	r0, r8
    5c8c:	bl	47e0 <malloc@plt>
    5c90:	mov	r9, r0
    5c94:	cmp	r8, #1
    5c98:	blt	5dd0 <HV@@Base+0x2dc>
    5c9c:	mov	r6, #0
    5ca0:	vld1.8	{d16}, [r5]
    5ca4:	add	r0, r9, r6
    5ca8:	ldrh	r1, [r5, #8]
    5cac:	strh	r1, [r0, #8]
    5cb0:	vst1.8	{d16}, [r0]
    5cb4:	mov	r0, r5
    5cb8:	mov	r1, #10
    5cbc:	bl	6198 <try_clock@@Base+0xa4>
    5cc0:	mov	r7, r0
    5cc4:	add	r0, r5, #10
    5cc8:	mov	r1, #5
    5ccc:	bl	4eb8 <promiscuous_packet_search@@Base+0x160>
    5cd0:	mov	r4, r0
    5cd4:	mov	r0, r7
    5cd8:	bl	6bb0 <clock_from_fhs@@Base+0x4a8>
    5cdc:	eor	r0, r4, r0, lsr #10
    5ce0:	sub	r1, r0, #1
    5ce4:	tst	r1, r0
    5ce8:	beq	5dc0 <HV@@Base+0x2cc>
    5cec:	sub	r0, r0, #7
    5cf0:	cmp	r0, #24
    5cf4:	bhi	5dd8 <HV@@Base+0x2e4>
    5cf8:	add	r1, pc, #4
    5cfc:	ldr	r0, [r1, r0, lsl #2]
    5d00:	add	pc, r1, r0
    5d04:	andeq	r0, r0, r4, rrx
    5d08:	ldrdeq	r0, [r0], -r4
    5d0c:	ldrdeq	r0, [r0], -r4
    5d10:	ldrdeq	r0, [r0], -r4
    5d14:	andeq	r0, r0, ip, rrx
    5d18:	ldrdeq	r0, [r0], -r4
    5d1c:	andeq	r0, r0, r4, ror r0
    5d20:	andeq	r0, r0, ip, ror r0
    5d24:	ldrdeq	r0, [r0], -r4
    5d28:	ldrdeq	r0, [r0], -r4
    5d2c:	ldrdeq	r0, [r0], -r4
    5d30:	ldrdeq	r0, [r0], -r4
    5d34:	andeq	r0, r0, r4, lsl #1
    5d38:	ldrdeq	r0, [r0], -r4
    5d3c:	andeq	r0, r0, ip, lsl #1
    5d40:	muleq	r0, r4, r0
    5d44:	ldrdeq	r0, [r0], -r4
    5d48:	ldrdeq	r0, [r0], -r4
    5d4c:	ldrdeq	r0, [r0], -r4
    5d50:	muleq	r0, ip, r0
    5d54:	ldrdeq	r0, [r0], -r4
    5d58:	andeq	r0, r0, r4, lsr #1
    5d5c:	ldrdeq	r0, [r0], -r4
    5d60:	ldrdeq	r0, [r0], -r4
    5d64:	andeq	r0, r0, ip, lsr #1
    5d68:	add	r0, r6, #2
    5d6c:	b	5db4 <HV@@Base+0x2c0>
    5d70:	mov	r0, r6
    5d74:	b	5db4 <HV@@Base+0x2c0>
    5d78:	add	r0, r6, #6
    5d7c:	b	5db4 <HV@@Base+0x2c0>
    5d80:	add	r0, r6, #3
    5d84:	b	5db4 <HV@@Base+0x2c0>
    5d88:	add	r0, r6, #5
    5d8c:	b	5db4 <HV@@Base+0x2c0>
    5d90:	add	r0, r6, #9
    5d94:	b	5db4 <HV@@Base+0x2c0>
    5d98:	orr	r0, r6, #1
    5d9c:	b	5db4 <HV@@Base+0x2c0>
    5da0:	add	r0, r6, #7
    5da4:	b	5db4 <HV@@Base+0x2c0>
    5da8:	add	r0, r6, #4
    5dac:	b	5db4 <HV@@Base+0x2c0>
    5db0:	add	r0, r6, #8
    5db4:	ldrb	r1, [r9, r0]
    5db8:	eor	r1, r1, #1
    5dbc:	strb	r1, [r9, r0]
    5dc0:	add	r5, r5, #15
    5dc4:	add	r6, r6, #10
    5dc8:	cmp	r6, r8
    5dcc:	blt	5ca0 <HV@@Base+0x1ac>
    5dd0:	mov	r0, r9
    5dd4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    5dd8:	mov	r0, r9
    5ddc:	bl	4660 <free@plt>
    5de0:	mov	r9, #0
    5de4:	mov	r0, r9
    5de8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    5dec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5df0:	add	fp, sp, #28
    5df4:	sub	sp, sp, #4
    5df8:	cmp	r3, #1
    5dfc:	blt	5e7c <HV@@Base+0x388>
    5e00:	mov	r4, r3
    5e04:	mov	r5, r1
    5e08:	mov	r6, r0
    5e0c:	ldr	r8, [fp, #12]
    5e10:	ldr	r0, [fp, #8]
    5e14:	and	r1, r2, #63	; 0x3f
    5e18:	ldr	r2, [pc, #100]	; 5e84 <HV@@Base+0x390>
    5e1c:	add	r2, pc, r2
    5e20:	ldrb	r1, [r2, r1]
    5e24:	add	r0, r1, r0
    5e28:	movw	sl, #1033	; 0x409
    5e2c:	movt	sl, #33026	; 0x8102
    5e30:	ldr	r9, [pc, #80]	; 5e88 <HV@@Base+0x394>
    5e34:	add	r9, pc, r9
    5e38:	smmla	r1, r0, sl, r0
    5e3c:	asr	r2, r1, #6
    5e40:	add	r1, r2, r1, lsr #31
    5e44:	rsb	r1, r1, r1, lsl #7
    5e48:	sub	r7, r0, r1
    5e4c:	mov	r0, r8
    5e50:	mov	r1, #0
    5e54:	bl	469c <btbb_packet_get_flag@plt>
    5e58:	ldrb	r1, [r6]
    5e5c:	cmp	r0, #0
    5e60:	ldrbne	r0, [r9, r7]
    5e64:	eorne	r1, r0, r1
    5e68:	strb	r1, [r5], #1
    5e6c:	subs	r4, r4, #1
    5e70:	add	r6, r6, #1
    5e74:	add	r0, r7, #1
    5e78:	bne	5e38 <HV@@Base+0x344>
    5e7c:	sub	sp, fp, #28
    5e80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e84:			; <UNDEFINED> instruction: 0x000084b6
    5e88:	andeq	r8, r0, r8, lsl r3
    5e8c:	push	{r4, r5, r6, sl, fp, lr}
    5e90:	add	fp, sp, #16
    5e94:	ldr	r1, [r0, #64]	; 0x40
    5e98:	mvn	r2, #15
    5e9c:	add	r4, r2, r1, lsl #3
    5ea0:	ldrb	r2, [r0, #9]
    5ea4:	add	r5, r0, #68	; 0x44
    5ea8:	mov	r0, r5
    5eac:	mov	r1, r4
    5eb0:	bl	6bf4 <clock_from_fhs@@Base+0x4ec>
    5eb4:	mov	r6, r0
    5eb8:	add	r0, r5, r4
    5ebc:	mov	r1, #16
    5ec0:	bl	6198 <try_clock@@Base+0xa4>
    5ec4:	sub	r0, r6, r0
    5ec8:	clz	r0, r0
    5ecc:	lsr	r0, r0, #5
    5ed0:	pop	{r4, r5, r6, sl, fp, pc}
    5ed4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    5ed8:	add	fp, sp, #24
    5edc:	sub	sp, sp, #8
    5ee0:	mov	r4, r2
    5ee4:	mov	r5, r1
    5ee8:	ldr	r7, [fp, #12]
    5eec:	ldr	r1, [fp, #8]
    5ef0:	mov	r6, #0
    5ef4:	cmp	r2, #2
    5ef8:	bne	5f50 <HV@@Base+0x45c>
    5efc:	cmp	r3, #16
    5f00:	blt	6058 <HV@@Base+0x564>
    5f04:	cmp	r1, #0
    5f08:	beq	5fa4 <HV@@Base+0x4b0>
    5f0c:	cmp	r3, #30
    5f10:	blt	6058 <HV@@Base+0x564>
    5f14:	mov	r1, #16
    5f18:	bl	5c4c <HV@@Base+0x158>
    5f1c:	cmp	r0, #0
    5f20:	beq	6058 <HV@@Base+0x564>
    5f24:	mov	r8, r0
    5f28:	mov	r0, #18
    5f2c:	stm	sp, {r0, r7}
    5f30:	add	r1, r7, #44	; 0x2c
    5f34:	mov	r0, r8
    5f38:	mov	r2, r5
    5f3c:	mov	r3, #16
    5f40:	bl	5dec <HV@@Base+0x2f8>
    5f44:	mov	r0, r8
    5f48:	bl	4660 <free@plt>
    5f4c:	b	5fbc <HV@@Base+0x4c8>
    5f50:	cmp	r3, #8
    5f54:	blt	6058 <HV@@Base+0x564>
    5f58:	cmp	r1, #0
    5f5c:	beq	5fd0 <HV@@Base+0x4dc>
    5f60:	cmp	r3, #15
    5f64:	blt	6058 <HV@@Base+0x564>
    5f68:	mov	r1, #8
    5f6c:	bl	5c4c <HV@@Base+0x158>
    5f70:	cmp	r0, #0
    5f74:	beq	6058 <HV@@Base+0x564>
    5f78:	mov	r8, r0
    5f7c:	mov	r0, #18
    5f80:	stm	sp, {r0, r7}
    5f84:	add	r1, r7, #44	; 0x2c
    5f88:	mov	r0, r8
    5f8c:	mov	r2, r5
    5f90:	mov	r3, #8
    5f94:	bl	5dec <HV@@Base+0x2f8>
    5f98:	mov	r0, r8
    5f9c:	bl	4660 <free@plt>
    5fa0:	b	5fe8 <HV@@Base+0x4f4>
    5fa4:	mov	r1, #18
    5fa8:	stm	sp, {r1, r7}
    5fac:	add	r1, r7, #44	; 0x2c
    5fb0:	mov	r2, r5
    5fb4:	mov	r3, #16
    5fb8:	bl	5dec <HV@@Base+0x2f8>
    5fbc:	add	r0, r7, #47	; 0x2f
    5fc0:	mov	r1, #10
    5fc4:	bl	6198 <try_clock@@Base+0xa4>
    5fc8:	add	r0, r0, #4
    5fcc:	b	5ff8 <HV@@Base+0x504>
    5fd0:	mov	r1, #18
    5fd4:	stm	sp, {r1, r7}
    5fd8:	add	r1, r7, #44	; 0x2c
    5fdc:	mov	r2, r5
    5fe0:	mov	r3, #8
    5fe4:	bl	5dec <HV@@Base+0x2f8>
    5fe8:	add	r0, r7, #47	; 0x2f
    5fec:	mov	r1, #5
    5ff0:	bl	4eb8 <promiscuous_packet_search@@Base+0x160>
    5ff4:	add	r0, r0, #3
    5ff8:	str	r0, [r7, #64]	; 0x40
    5ffc:	ldrb	r0, [r7, #18]
    6000:	sub	r1, r0, #3
    6004:	uxtb	r2, r1
    6008:	mov	r0, #0
    600c:	cmp	r2, #12
    6010:	sxtbls	r0, r1
    6014:	ldrls	r1, [pc, #72]	; 6064 <HV@@Base+0x570>
    6018:	addls	r1, pc, r1
    601c:	ldrls	r0, [r1, r0, lsl #2]
    6020:	ldr	r1, [r7, #64]	; 0x40
    6024:	cmp	r1, r0
    6028:	movlt	r0, r1
    602c:	str	r0, [r7, #64]	; 0x40
    6030:	add	r0, r7, #44	; 0x2c
    6034:	mov	r1, #2
    6038:	bl	4eb8 <promiscuous_packet_search@@Base+0x160>
    603c:	strb	r0, [r7, #60]	; 0x3c
    6040:	add	r0, r7, #46	; 0x2e
    6044:	mov	r6, #1
    6048:	mov	r1, #1
    604c:	bl	4eb8 <promiscuous_packet_search@@Base+0x160>
    6050:	strb	r0, [r7, #61]	; 0x3d
    6054:	str	r4, [r7, #40]	; 0x28
    6058:	mov	r0, r6
    605c:	sub	sp, fp, #24
    6060:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    6064:	andeq	r8, r0, r0, asr #3
    6068:	push	{r4, r5, r6, r7, fp, lr}
    606c:	add	fp, sp, #16
    6070:	mov	ip, r0
    6074:	mov	r0, #0
    6078:	cmp	r2, #1
    607c:	mov	lr, #0
    6080:	blt	60e0 <HV@@Base+0x5ec>
    6084:	add	r3, ip, #1
    6088:	mov	lr, #0
    608c:	mov	ip, r2
    6090:	ldrb	r4, [r3, #-1]
    6094:	ldrb	r5, [r3]
    6098:	ldrb	r6, [r3, #1]
    609c:	orr	r7, r6, r4
    60a0:	and	r5, r7, r5
    60a4:	and	r4, r6, r4
    60a8:	orr	r4, r5, r4
    60ac:	strb	r4, [r1], #1
    60b0:	ldrb	r4, [r3, #-1]
    60b4:	ldrb	r5, [r3]
    60b8:	ldrb	r6, [r3, #1]
    60bc:	eor	r7, r5, r4
    60c0:	eor	r5, r6, r5
    60c4:	orr	r5, r5, r7
    60c8:	eor	r4, r6, r4
    60cc:	orr	r4, r5, r4
    60d0:	uxtab	lr, lr, r4
    60d4:	add	r3, r3, #3
    60d8:	subs	ip, ip, #1
    60dc:	bne	6090 <HV@@Base+0x59c>
    60e0:	asr	r1, r2, #31
    60e4:	add	r1, r2, r1, lsr #30
    60e8:	cmp	lr, r1, asr #2
    60ec:	movwlt	r0, #1
    60f0:	pop	{r4, r5, r6, r7, fp, pc}

000060f4 <try_clock@@Base>:
    60f4:	push	{r4, r5, r6, sl, fp, lr}
    60f8:	add	fp, sp, #16
    60fc:	sub	sp, sp, #48	; 0x30
    6100:	mov	r4, r1
    6104:	mov	r5, r0
    6108:	movw	r0, #2892	; 0xb4c
    610c:	add	r0, r1, r0
    6110:	add	r1, sp, #30
    6114:	mov	r2, #18
    6118:	bl	6068 <HV@@Base+0x574>
    611c:	cmp	r0, #0
    6120:	beq	6188 <try_clock@@Base+0x94>
    6124:	mov	r0, #0
    6128:	stm	sp, {r0, r4}
    612c:	add	r0, sp, #30
    6130:	add	r6, sp, #12
    6134:	mov	r1, r6
    6138:	mov	r2, r5
    613c:	mov	r3, #18
    6140:	bl	5dec <HV@@Base+0x2f8>
    6144:	mov	r0, r6
    6148:	mov	r1, #10
    614c:	bl	6198 <try_clock@@Base+0xa4>
    6150:	mov	r5, r0
    6154:	add	r0, r6, #10
    6158:	mov	r1, #8
    615c:	bl	4eb8 <promiscuous_packet_search@@Base+0x160>
    6160:	mov	r1, r0
    6164:	mov	r0, r5
    6168:	bl	61c4 <try_clock@@Base+0xd0>
    616c:	mov	r5, r0
    6170:	strb	r0, [r4, #9]
    6174:	add	r0, r6, #3
    6178:	mov	r1, #4
    617c:	bl	4eb8 <promiscuous_packet_search@@Base+0x160>
    6180:	strb	r0, [r4, #18]
    6184:	b	618c <try_clock@@Base+0x98>
    6188:	mov	r5, #0
    618c:	mov	r0, r5
    6190:	sub	sp, fp, #16
    6194:	pop	{r4, r5, r6, sl, fp, pc}
    6198:	mov	ip, #0
    619c:	cmp	r1, #1
    61a0:	blt	61bc <try_clock@@Base+0xc8>
    61a4:	mov	r3, #0
    61a8:	ldrb	r2, [r0, r3]
    61ac:	orr	ip, ip, r2, lsl r3
    61b0:	add	r3, r3, #1
    61b4:	cmp	r1, r3
    61b8:	bne	61a8 <try_clock@@Base+0xb4>
    61bc:	uxth	r0, ip
    61c0:	bx	lr
    61c4:	push	{fp, lr}
    61c8:	mov	fp, sp
    61cc:	mov	r2, #9
    61d0:	mov	ip, #1
    61d4:	and	lr, ip, r0, lsr r2
    61d8:	sxtb	r3, r1
    61dc:	cmn	r3, #1
    61e0:	eorle	r1, r1, #101	; 0x65
    61e4:	uxtb	r1, r1
    61e8:	eor	r3, lr, r1, lsr #7
    61ec:	orr	r1, r3, r1, lsl #1
    61f0:	sub	r2, r2, #1
    61f4:	cmn	r2, #1
    61f8:	bne	61d4 <try_clock@@Base+0xe0>
    61fc:	uxtb	r0, r1
    6200:	pop	{fp, lr}
    6204:	b	6c5c <clock_from_fhs@@Base+0x554>

00006208 <btbb_decode_header@@Base>:
    6208:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    620c:	add	fp, sp, #24
    6210:	sub	sp, sp, #32
    6214:	mov	r4, r0
    6218:	mov	r1, #4
    621c:	bl	469c <btbb_packet_get_flag@plt>
    6220:	mov	r5, #0
    6224:	cmp	r0, #0
    6228:	beq	62dc <btbb_decode_header@@Base+0xd4>
    622c:	movw	r0, #2892	; 0xb4c
    6230:	add	r0, r4, r0
    6234:	add	r1, sp, #14
    6238:	mov	r2, #18
    623c:	bl	6068 <HV@@Base+0x574>
    6240:	cmp	r0, #0
    6244:	beq	62dc <btbb_decode_header@@Base+0xd4>
    6248:	ldr	r2, [r4, #2816]	; 0xb00
    624c:	mov	r5, #0
    6250:	str	r5, [sp]
    6254:	str	r4, [sp, #4]
    6258:	add	r6, r4, #22
    625c:	add	r0, sp, #14
    6260:	mov	r1, r6
    6264:	mov	r3, #18
    6268:	bl	5dec <HV@@Base+0x2f8>
    626c:	mov	r0, r6
    6270:	mov	r1, #10
    6274:	bl	6198 <try_clock@@Base+0xa4>
    6278:	mov	r7, r0
    627c:	add	r0, r4, #32
    6280:	mov	r1, #8
    6284:	bl	4eb8 <promiscuous_packet_search@@Base+0x160>
    6288:	mov	r8, r0
    628c:	mov	r0, r7
    6290:	mov	r1, r8
    6294:	bl	61c4 <try_clock@@Base+0xd0>
    6298:	ldrb	r1, [r4, #9]
    629c:	cmp	r0, r1
    62a0:	bne	62dc <btbb_decode_header@@Base+0xd4>
    62a4:	mov	r0, r6
    62a8:	mov	r1, #3
    62ac:	bl	4eb8 <promiscuous_packet_search@@Base+0x160>
    62b0:	strb	r0, [r4, #19]
    62b4:	add	r0, r4, #25
    62b8:	mov	r1, #4
    62bc:	bl	4eb8 <promiscuous_packet_search@@Base+0x160>
    62c0:	strb	r0, [r4, #18]
    62c4:	add	r0, r4, #29
    62c8:	mov	r1, #3
    62cc:	bl	4eb8 <promiscuous_packet_search@@Base+0x160>
    62d0:	strb	r0, [r4, #20]
    62d4:	strb	r8, [r4, #21]
    62d8:	mov	r5, #1
    62dc:	mov	r0, r5
    62e0:	sub	sp, fp, #24
    62e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000062e8 <btbb_decode_payload@@Base>:
    62e8:	push	{r4, r5, fp, lr}
    62ec:	add	fp, sp, #8
    62f0:	mov	r4, r0
    62f4:	mov	r5, #0
    62f8:	str	r5, [r0, #40]	; 0x28
    62fc:	ldrb	r0, [r0, #18]
    6300:	cmp	r0, #15
    6304:	bhi	63dc <btbb_decode_payload@@Base+0xf4>
    6308:	add	r1, pc, #4
    630c:	ldr	r0, [r1, r0, lsl #2]
    6310:	add	pc, r1, r0
    6314:	andeq	r0, r0, r0, rrx
    6318:	andeq	r0, r0, r0, rrx
    631c:	andeq	r0, r0, r0, ror r0
    6320:	andeq	r0, r0, r0, asr #32
    6324:	andeq	r0, r0, r0, asr r0
    6328:	muleq	r0, r8, r0
    632c:	muleq	r0, r8, r0
    6330:	andeq	r0, r0, r0, lsl #1
    6334:	andeq	r0, r0, r0, asr #32
    6338:	andeq	r0, r0, r0, asr r0
    633c:	andeq	r0, r0, r0, asr #32
    6340:	andeq	r0, r0, r0, asr r0
    6344:	strheq	r0, [r0], -r8
    6348:	andeq	r0, r0, r8, lsr #1
    634c:	andeq	r0, r0, r0, asr #32
    6350:	andeq	r0, r0, r0, asr r0
    6354:	ldr	r0, [r4, #2816]	; 0xb00
    6358:	mov	r1, r4
    635c:	bl	4720 <DM@plt>
    6360:	b	63d8 <btbb_decode_payload@@Base+0xf0>
    6364:	ldr	r0, [r4, #2816]	; 0xb00
    6368:	mov	r1, r4
    636c:	bl	4978 <DH@plt>
    6370:	b	63d8 <btbb_decode_payload@@Base+0xf0>
    6374:	mov	r0, #0
    6378:	str	r0, [r4, #64]	; 0x40
    637c:	mov	r5, #1
    6380:	b	63dc <btbb_decode_payload@@Base+0xf4>
    6384:	ldr	r0, [r4, #2816]	; 0xb00
    6388:	mov	r1, r4
    638c:	bl	46a8 <fhs@plt>
    6390:	b	63d8 <btbb_decode_payload@@Base+0xf0>
    6394:	ldr	r0, [r4, #2816]	; 0xb00
    6398:	mov	r1, r4
    639c:	bl	4900 <EV3@plt>
    63a0:	mov	r5, r0
    63a4:	cmp	r0, #1
    63a8:	bgt	63dc <btbb_decode_payload@@Base+0xf4>
    63ac:	ldr	r0, [r4, #2816]	; 0xb00
    63b0:	mov	r1, r4
    63b4:	bl	4738 <HV@plt>
    63b8:	b	63d8 <btbb_decode_payload@@Base+0xf0>
    63bc:	ldr	r0, [r4, #2816]	; 0xb00
    63c0:	mov	r1, r4
    63c4:	bl	4960 <EV5@plt>
    63c8:	b	63d8 <btbb_decode_payload@@Base+0xf0>
    63cc:	ldr	r0, [r4, #2816]	; 0xb00
    63d0:	mov	r1, r4
    63d4:	bl	46b4 <EV4@plt>
    63d8:	mov	r5, r0
    63dc:	mov	r0, r4
    63e0:	mov	r1, #7
    63e4:	mov	r2, #1
    63e8:	bl	4648 <btbb_packet_set_flag@plt>
    63ec:	mov	r0, r5
    63f0:	pop	{r4, r5, fp, pc}

000063f4 <btbb_decode@@Base>:
    63f4:	push	{r4, r5, fp, lr}
    63f8:	add	fp, sp, #8
    63fc:	mov	r5, r0
    6400:	mov	r4, #0
    6404:	mov	r1, #7
    6408:	mov	r2, #0
    640c:	bl	4648 <btbb_packet_set_flag@plt>
    6410:	mov	r0, r5
    6414:	bl	4858 <btbb_decode_header@plt>
    6418:	cmp	r0, #0
    641c:	beq	6454 <btbb_decode@@Base+0x60>
    6420:	mov	r0, r5
    6424:	bl	499c <btbb_decode_payload@plt>
    6428:	mov	r4, r0
    642c:	cmp	r0, #1
    6430:	blt	6454 <btbb_decode@@Base+0x60>
    6434:	ldr	r0, [r5, #2816]	; 0xb00
    6438:	and	r1, r0, #63	; 0x3f
    643c:	ldr	r0, [pc, #24]	; 645c <btbb_decode@@Base+0x68>
    6440:	add	r0, pc, r0
    6444:	mov	r2, r4
    6448:	bl	4618 <printf@plt>
    644c:	mov	r0, r5
    6450:	bl	49c0 <btbb_print_packet@plt>
    6454:	mov	r0, r4
    6458:	pop	{r4, r5, fp, pc}
    645c:	andeq	r7, r0, pc, lsl lr

00006460 <btbb_print_packet@@Base>:
    6460:	push	{r4, r5, r6, r7, fp, lr}
    6464:	add	fp, sp, #16
    6468:	mov	r4, r0
    646c:	mov	r1, #7
    6470:	bl	469c <btbb_packet_get_flag@plt>
    6474:	cmp	r0, #0
    6478:	beq	6550 <btbb_print_packet@@Base+0xf0>
    647c:	ldrb	r0, [r4, #18]
    6480:	ldr	r1, [pc, #204]	; 6554 <btbb_print_packet@@Base+0xf4>
    6484:	add	r1, pc, r1
    6488:	ldr	r1, [r1, r0, lsl #2]
    648c:	ldr	r0, [pc, #196]	; 6558 <btbb_print_packet@@Base+0xf8>
    6490:	add	r0, pc, r0
    6494:	bl	4618 <printf@plt>
    6498:	ldr	r0, [r4, #40]	; 0x28
    649c:	cmp	r0, #1
    64a0:	blt	64e4 <btbb_print_packet@@Base+0x84>
    64a4:	ldrb	r1, [r4, #19]
    64a8:	ldr	r0, [pc, #172]	; 655c <btbb_print_packet@@Base+0xfc>
    64ac:	add	r0, pc, r0
    64b0:	bl	4618 <printf@plt>
    64b4:	ldrb	r1, [r4, #60]	; 0x3c
    64b8:	ldr	r0, [pc, #160]	; 6560 <btbb_print_packet@@Base+0x100>
    64bc:	add	r0, pc, r0
    64c0:	bl	4618 <printf@plt>
    64c4:	ldrb	r1, [r4, #61]	; 0x3d
    64c8:	ldr	r0, [pc, #148]	; 6564 <btbb_print_packet@@Base+0x104>
    64cc:	add	r0, pc, r0
    64d0:	bl	4618 <printf@plt>
    64d4:	ldr	r1, [r4, #64]	; 0x40
    64d8:	ldr	r0, [pc, #136]	; 6568 <btbb_print_packet@@Base+0x108>
    64dc:	add	r0, pc, r0
    64e0:	bl	4618 <printf@plt>
    64e4:	ldr	r0, [r4, #64]	; 0x40
    64e8:	cmp	r0, #0
    64ec:	popeq	{r4, r5, r6, r7, fp, pc}
    64f0:	ldr	r0, [pc, #116]	; 656c <btbb_print_packet@@Base+0x10c>
    64f4:	add	r0, pc, r0
    64f8:	bl	4618 <printf@plt>
    64fc:	ldr	r0, [r4, #64]	; 0x40
    6500:	cmp	r0, #1
    6504:	blt	6544 <btbb_print_packet@@Base+0xe4>
    6508:	add	r5, r4, #68	; 0x44
    650c:	mov	r7, #0
    6510:	ldr	r6, [pc, #88]	; 6570 <btbb_print_packet@@Base+0x110>
    6514:	add	r6, pc, r6
    6518:	mov	r0, r5
    651c:	mov	r1, #8
    6520:	bl	4eb8 <promiscuous_packet_search@@Base+0x160>
    6524:	mov	r1, r0
    6528:	mov	r0, r6
    652c:	bl	4618 <printf@plt>
    6530:	add	r5, r5, #8
    6534:	add	r7, r7, #1
    6538:	ldr	r0, [r4, #64]	; 0x40
    653c:	cmp	r7, r0
    6540:	blt	6518 <btbb_print_packet@@Base+0xb8>
    6544:	mov	r0, #10
    6548:	pop	{r4, r5, r6, r7, fp, lr}
    654c:	b	48e8 <putchar@plt>
    6550:	pop	{r4, r5, r6, r7, fp, pc}
    6554:	andeq	lr, r1, r4, asr #18
    6558:	strdeq	r7, [r0], -r9
    655c:	andeq	r7, r0, r9, ror #27
    6560:	andeq	r7, r0, r8, ror #27
    6564:	andeq	r7, r0, r4, ror #27
    6568:	andeq	r7, r0, r0, ror #27
    656c:	andeq	r8, r0, sl, asr r4
    6570:	andeq	r8, r0, r3, asr #13

00006574 <tun_format@@Base>:
    6574:	push	{r4, r5, r6, r7, fp, lr}
    6578:	add	fp, sp, #16
    657c:	mov	r5, r0
    6580:	ldr	r7, [r0, #64]	; 0x40
    6584:	add	r0, r7, #9
    6588:	bl	47e0 <malloc@plt>
    658c:	mov	r4, r0
    6590:	ldr	r0, [r5, #2816]	; 0xb00
    6594:	strb	r0, [r4]
    6598:	lsr	r1, r0, #8
    659c:	strb	r1, [r4, #1]
    65a0:	lsr	r1, r0, #16
    65a4:	strb	r1, [r4, #2]
    65a8:	lsr	r0, r0, #24
    65ac:	strb	r0, [r4, #3]
    65b0:	ldrb	r0, [r5, #8]
    65b4:	strb	r0, [r4, #4]
    65b8:	mov	r0, r5
    65bc:	mov	r1, #5
    65c0:	bl	469c <btbb_packet_get_flag@plt>
    65c4:	mov	r6, r0
    65c8:	mov	r0, r5
    65cc:	mov	r1, #1
    65d0:	bl	469c <btbb_packet_get_flag@plt>
    65d4:	orr	r0, r6, r0, lsl #1
    65d8:	strb	r0, [r4, #5]
    65dc:	add	r0, r5, #22
    65e0:	mov	r1, #7
    65e4:	bl	4eb8 <promiscuous_packet_search@@Base+0x160>
    65e8:	strb	r0, [r4, #6]
    65ec:	add	r0, r5, #29
    65f0:	mov	r1, #3
    65f4:	bl	4eb8 <promiscuous_packet_search@@Base+0x160>
    65f8:	strb	r0, [r4, #7]
    65fc:	add	r0, r5, #32
    6600:	mov	r1, #8
    6604:	bl	4eb8 <promiscuous_packet_search@@Base+0x160>
    6608:	strb	r0, [r4, #8]
    660c:	cmp	r7, #1
    6610:	blt	6638 <tun_format@@Base+0xc4>
    6614:	add	r5, r5, #68	; 0x44
    6618:	add	r6, r4, #9
    661c:	mov	r0, r5
    6620:	mov	r1, #8
    6624:	bl	4eb8 <promiscuous_packet_search@@Base+0x160>
    6628:	strb	r0, [r6], #1
    662c:	add	r5, r5, #8
    6630:	subs	r7, r7, #1
    6634:	bne	661c <tun_format@@Base+0xa8>
    6638:	mov	r0, r4
    663c:	pop	{r4, r5, r6, r7, fp, pc}

00006640 <btbb_header_present@@Base>:
    6640:	movw	r1, #2822	; 0xb06
    6644:	ldrh	r2, [r0, r1]
    6648:	mov	r1, #0
    664c:	cmp	r2, #122	; 0x7a
    6650:	bcc	66dc <btbb_header_present@@Base+0x9c>
    6654:	push	{r4, sl, fp, lr}
    6658:	add	fp, sp, #8
    665c:	ldrb	r1, [r0, #2887]	; 0xb47
    6660:	ldrb	ip, [r0, #2888]	; 0xb48
    6664:	ldrb	lr, [r0, #2889]	; 0xb49
    6668:	ldrb	r2, [r0, #2890]	; 0xb4a
    666c:	clz	r3, r1
    6670:	lsr	r3, r3, #5
    6674:	eor	r4, r2, r3
    6678:	eor	r3, ip, r3
    667c:	eor	r2, lr, r1
    6680:	uxtab	r2, r3, r2
    6684:	add	r2, r2, r4
    6688:	ldrb	r3, [r0, #2891]	; 0xb4b
    668c:	eor	r1, r3, r1
    6690:	uxtab	r2, r2, r1
    6694:	mov	r1, #0
    6698:	add	r3, r0, r1
    669c:	ldrb	ip, [r3, #2892]	; 0xb4c
    66a0:	ldrb	r4, [r3, #2893]	; 0xb4d
    66a4:	ldrb	r3, [r3, #2894]	; 0xb4e
    66a8:	eor	lr, r4, ip
    66ac:	eor	r4, r3, r4
    66b0:	orr	r4, r4, lr
    66b4:	eor	r3, r3, ip
    66b8:	orr	r3, r4, r3
    66bc:	uxtab	r2, r2, r3
    66c0:	add	r1, r1, #3
    66c4:	cmp	r1, #54	; 0x36
    66c8:	bcc	6698 <btbb_header_present@@Base+0x58>
    66cc:	mov	r1, #0
    66d0:	cmp	r2, #5
    66d4:	movwlt	r1, #1
    66d8:	pop	{r4, sl, fp, lr}
    66dc:	mov	r0, r1
    66e0:	bx	lr

000066e4 <lap_from_fhs@@Base>:
    66e4:	add	r0, r0, #102	; 0x66
    66e8:	mov	r1, #24
    66ec:	b	5394 <btbb_packet_get_header_packed@@Base+0xc>

000066f0 <uap_from_fhs@@Base>:
    66f0:	add	r0, r0, #132	; 0x84
    66f4:	mov	r1, #8
    66f8:	b	4eb8 <promiscuous_packet_search@@Base+0x160>

000066fc <nap_from_fhs@@Base>:
    66fc:	add	r0, r0, #140	; 0x8c
    6700:	mov	r1, #16
    6704:	b	6198 <try_clock@@Base+0xa4>

00006708 <clock_from_fhs@@Base>:
    6708:	add	r0, r0, #183	; 0xb7
    670c:	mov	r1, #26
    6710:	b	5394 <btbb_packet_get_header_packed@@Base+0xc>
    6714:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6718:	add	fp, sp, #28
    671c:	sub	sp, sp, #4
    6720:	cmp	r2, #57	; 0x39
    6724:	bgt	67b8 <clock_from_fhs@@Base+0xb0>
    6728:	mov	r5, r2
    672c:	mov	r8, r1
    6730:	mov	r9, r0
    6734:	sub	r7, r3, #1
    6738:	mov	sl, #1
    673c:	lsl	r0, sl, r5
    6740:	sub	r1, r5, #32
    6744:	cmp	r1, #0
    6748:	movwge	r0, #0
    674c:	orr	r4, r0, r9
    6750:	rsb	r0, r5, #32
    6754:	lsr	r0, sl, r0
    6758:	lslge	r0, sl, r1
    675c:	orr	r6, r0, r8
    6760:	cmp	r7, #0
    6764:	beq	6780 <clock_from_fhs@@Base+0x78>
    6768:	add	r2, r5, #1
    676c:	mov	r0, r4
    6770:	mov	r1, r6
    6774:	mov	r3, r7
    6778:	bl	6714 <clock_from_fhs@@Base+0xc>
    677c:	b	67a8 <clock_from_fhs@@Base+0xa0>
    6780:	movw	r0, #19995	; 0x4e1b
    6784:	movt	r0, #65377	; 0xff61
    6788:	eor	r0, r4, r0
    678c:	movw	r1, #29288	; 0x7268
    6790:	movt	r1, #52347	; 0xcc7b
    6794:	eor	r1, r6, r1
    6798:	bl	4f34 <promiscuous_packet_search@@Base+0x1dc>
    679c:	mov	r2, r4
    67a0:	mov	r3, r6
    67a4:	bl	67c0 <clock_from_fhs@@Base+0xb8>
    67a8:	add	r0, r5, #1
    67ac:	cmp	r5, #57	; 0x39
    67b0:	mov	r5, r0
    67b4:	blt	673c <clock_from_fhs@@Base+0x34>
    67b8:	sub	sp, fp, #28
    67bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    67c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    67c4:	add	fp, sp, #28
    67c8:	sub	sp, sp, #4
    67cc:	mov	r8, r3
    67d0:	mov	r6, r2
    67d4:	mov	r7, r1
    67d8:	mov	r5, r0
    67dc:	mov	r0, #48	; 0x30
    67e0:	bl	47e0 <malloc@plt>
    67e4:	mov	r4, r0
    67e8:	stm	r0, {r5, r7}
    67ec:	str	r6, [r0, #8]
    67f0:	str	r8, [r0, #12]
    67f4:	mov	r0, #0
    67f8:	str	r0, [r4, #24]
    67fc:	mov	r1, #8
    6800:	str	r4, [r4, #36]	; 0x24
    6804:	str	r1, [r4, #40]	; 0x28
    6808:	add	r8, r4, #16
    680c:	ldr	r1, [pc, #908]	; 6ba0 <clock_from_fhs@@Base+0x498>
    6810:	ldr	r1, [pc, r1]
    6814:	cmp	r1, #0
    6818:	beq	6840 <clock_from_fhs@@Base+0x138>
    681c:	ldr	r0, [r1, #16]
    6820:	ldr	r1, [r0, #16]
    6824:	str	r4, [r1, #8]
    6828:	ldr	r1, [r0, #16]
    682c:	ldr	r2, [r0, #20]
    6830:	sub	r1, r1, r2
    6834:	str	r1, [r4, #20]
    6838:	str	r8, [r0, #16]
    683c:	b	68ec <clock_from_fhs@@Base+0x1e4>
    6840:	ldr	r1, [pc, #860]	; 6ba4 <clock_from_fhs@@Base+0x49c>
    6844:	add	r1, pc, r1
    6848:	str	r4, [r1]
    684c:	str	r0, [r4, #20]
    6850:	mov	r0, #44	; 0x2c
    6854:	bl	47e0 <malloc@plt>
    6858:	str	r0, [r4, #16]
    685c:	ldr	r5, [pc, #836]	; 6ba8 <clock_from_fhs@@Base+0x4a0>
    6860:	ldr	r5, [pc, r5]
    6864:	ldr	r0, [r5, #16]
    6868:	cmp	r0, #0
    686c:	beq	6b98 <clock_from_fhs@@Base+0x490>
    6870:	vmov.i32	q8, #0	; 0x00000000
    6874:	mov	r1, #28
    6878:	add	r2, r0, #16
    687c:	vst1.32	{d16-d17}, [r0], r1
    6880:	vst1.32	{d16-d17}, [r0]
    6884:	vst1.32	{d16-d17}, [r2]
    6888:	mov	r6, r5
    688c:	ldr	r0, [r6, #16]!
    6890:	str	r6, [r0, #16]
    6894:	ldr	r0, [r6]
    6898:	mov	r1, #5
    689c:	mov	r2, #32
    68a0:	str	r2, [r0, #4]
    68a4:	str	r1, [r0, #8]
    68a8:	mov	r1, #16
    68ac:	str	r1, [r0, #20]
    68b0:	mov	r0, #384	; 0x180
    68b4:	bl	47e0 <malloc@plt>
    68b8:	ldr	r1, [r6]
    68bc:	str	r0, [r1]
    68c0:	ldr	r0, [r6]
    68c4:	ldr	r0, [r0]
    68c8:	cmp	r0, #0
    68cc:	beq	6b98 <clock_from_fhs@@Base+0x490>
    68d0:	mov	r1, #0
    68d4:	mov	r2, #384	; 0x180
    68d8:	bl	48dc <memset@plt>
    68dc:	ldr	r0, [r5, #16]
    68e0:	movw	r1, #8161	; 0x1fe1
    68e4:	movt	r1, #40977	; 0xa011
    68e8:	str	r1, [r0, #40]	; 0x28
    68ec:	ldr	r0, [pc, #696]	; 6bac <clock_from_fhs@@Base+0x4a4>
    68f0:	ldr	r0, [pc, r0]
    68f4:	ldr	r1, [r0, #16]
    68f8:	ldr	r2, [r1, #12]
    68fc:	add	r2, r2, #1
    6900:	str	r2, [r1, #12]
    6904:	ldr	r1, [r0, #16]
    6908:	str	r1, [r4, #16]
    690c:	ldr	r1, [r4, #4]
    6910:	movw	r2, #31161	; 0x79b9
    6914:	movt	r2, #40503	; 0x9e37
    6918:	add	r2, r1, r2
    691c:	ldrb	r3, [r4]
    6920:	ldrb	r7, [r4, #1]
    6924:	ldrb	r6, [r4, #2]
    6928:	ldrb	r5, [r4, #3]
    692c:	movw	ip, #47810	; 0xbac2
    6930:	movt	ip, #40777	; 0x9f49
    6934:	add	r5, ip, r5, lsl #24
    6938:	sub	r2, r5, r2
    693c:	add	r2, r2, r6, lsl #16
    6940:	add	r2, r2, r7, lsl #8
    6944:	add	r2, r2, r3
    6948:	movw	r3, #63341	; 0xf76d
    694c:	movt	r3, #7
    6950:	eor	r2, r2, r3
    6954:	add	r1, r1, ip
    6958:	sub	r1, r1, r2
    695c:	eor	r1, r1, r2, lsl #8
    6960:	movw	r3, #48887	; 0xbef7
    6964:	movt	r3, #65261	; 0xfeed
    6968:	sub	r3, r3, r2
    696c:	sub	r3, r3, r1
    6970:	eor	r3, r3, r1, lsr #13
    6974:	sub	r2, r2, r1
    6978:	sub	r2, r2, r3
    697c:	eor	r2, r2, r3, lsr #12
    6980:	sub	r1, r1, r3
    6984:	sub	r1, r1, r2
    6988:	eor	r1, r1, r2, lsl #16
    698c:	sub	r3, r3, r2
    6990:	sub	r3, r3, r1
    6994:	eor	r3, r3, r1, lsr #5
    6998:	sub	r2, r2, r1
    699c:	sub	r2, r2, r3
    69a0:	eor	r2, r2, r3, lsr #3
    69a4:	sub	r1, r1, r3
    69a8:	sub	r1, r1, r2
    69ac:	eor	r1, r1, r2, lsl #10
    69b0:	sub	r2, r3, r2
    69b4:	sub	r2, r2, r1
    69b8:	eor	r1, r2, r1, lsr #15
    69bc:	str	r1, [r4, #44]	; 0x2c
    69c0:	ldr	r2, [r0, #16]
    69c4:	ldm	r2, {r0, r2}
    69c8:	sub	r2, r2, #1
    69cc:	and	r1, r1, r2
    69d0:	add	r2, r1, r1, lsl #1
    69d4:	mov	r3, r0
    69d8:	ldr	r7, [r3, r2, lsl #2]!
    69dc:	ldr	r1, [r3, #4]
    69e0:	add	r1, r1, #1
    69e4:	str	r1, [r3, #4]
    69e8:	mov	r6, #0
    69ec:	str	r6, [r4, #28]
    69f0:	str	r7, [r4, #32]
    69f4:	ldr	r7, [r3]
    69f8:	cmp	r7, #0
    69fc:	strne	r8, [r7, #12]
    6a00:	str	r8, [r3]
    6a04:	add	r0, r0, r2, lsl #2
    6a08:	ldr	r0, [r0, #8]
    6a0c:	add	r0, r0, r0, lsl #2
    6a10:	mov	r2, #10
    6a14:	add	r0, r2, r0, lsl #1
    6a18:	cmp	r1, r0
    6a1c:	bcc	6b90 <clock_from_fhs@@Base+0x488>
    6a20:	ldr	r6, [r8]
    6a24:	ldr	r0, [r6, #36]	; 0x24
    6a28:	cmp	r0, #1
    6a2c:	beq	6b90 <clock_from_fhs@@Base+0x488>
    6a30:	ldr	r0, [r6, #4]
    6a34:	add	r0, r0, r0, lsl #1
    6a38:	lsl	r0, r0, #3
    6a3c:	bl	47e0 <malloc@plt>
    6a40:	cmp	r0, #0
    6a44:	beq	6b98 <clock_from_fhs@@Base+0x490>
    6a48:	mov	r9, r0
    6a4c:	ldr	r0, [r6, #4]
    6a50:	add	r0, r0, r0, lsl #1
    6a54:	lsl	r2, r0, #3
    6a58:	mov	r4, #0
    6a5c:	mov	r0, r9
    6a60:	mov	r1, #0
    6a64:	bl	48dc <memset@plt>
    6a68:	str	r4, [r6, #28]
    6a6c:	ldm	r6, {r0, ip}
    6a70:	ldr	r1, [r6, #8]
    6a74:	ldr	r7, [r6, #12]
    6a78:	add	r1, r1, #1
    6a7c:	mov	r5, #1
    6a80:	mvn	r2, #0
    6a84:	add	r2, r2, ip, lsl #1
    6a88:	lsr	r3, r7, r1
    6a8c:	tst	r2, r7
    6a90:	addne	r3, r5, r7, lsr r1
    6a94:	str	r3, [r6, #24]
    6a98:	cmp	ip, #0
    6a9c:	beq	6b3c <clock_from_fhs@@Base+0x434>
    6aa0:	str	r8, [sp]
    6aa4:	ldr	lr, [r6]
    6aa8:	mov	sl, #0
    6aac:	add	r1, sl, sl, lsl #1
    6ab0:	ldr	r0, [r0, r1, lsl #2]
    6ab4:	cmp	r0, #0
    6ab8:	beq	6b24 <clock_from_fhs@@Base+0x41c>
    6abc:	ldr	r5, [r0, #16]
    6ac0:	ldr	r1, [r0, #28]
    6ac4:	and	r1, r1, r2
    6ac8:	add	r1, r1, r1, lsl #1
    6acc:	add	r7, r9, r1, lsl #2
    6ad0:	ldr	r1, [r7, #4]
    6ad4:	add	r1, r1, #1
    6ad8:	str	r1, [r7, #4]
    6adc:	cmp	r1, r3
    6ae0:	bls	6afc <clock_from_fhs@@Base+0x3f4>
    6ae4:	ldr	r8, [r6, #28]
    6ae8:	add	r4, r8, #1
    6aec:	str	r4, [r6, #28]
    6af0:	mov	r4, #0
    6af4:	udiv	r1, r1, r3
    6af8:	str	r1, [r7, #8]
    6afc:	str	r4, [r0, #12]
    6b00:	ldr	r1, [r7]
    6b04:	str	r1, [r0, #16]
    6b08:	ldr	r1, [r7]
    6b0c:	cmp	r1, #0
    6b10:	strne	r0, [r1, #12]
    6b14:	str	r0, [r7]
    6b18:	cmp	r5, #0
    6b1c:	mov	r0, r5
    6b20:	bne	6abc <clock_from_fhs@@Base+0x3b4>
    6b24:	add	sl, sl, #1
    6b28:	cmp	sl, ip
    6b2c:	mov	r0, lr
    6b30:	bne	6aac <clock_from_fhs@@Base+0x3a4>
    6b34:	mov	r0, lr
    6b38:	ldr	r8, [sp]
    6b3c:	bl	4660 <free@plt>
    6b40:	ldr	r0, [r8]
    6b44:	ldmib	r0, {r1, r2}
    6b48:	lsl	r1, r1, #1
    6b4c:	add	r2, r2, #1
    6b50:	stmib	r0, {r1, r2}
    6b54:	ldr	r1, [r8]
    6b58:	str	r9, [r1]
    6b5c:	ldr	r1, [r0, #12]
    6b60:	ldr	r2, [r0, #28]
    6b64:	cmp	r2, r1, lsr #1
    6b68:	movls	r1, #0
    6b6c:	strls	r1, [r0, #32]
    6b70:	subls	sp, fp, #28
    6b74:	popls	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6b78:	ldr	r1, [r0, #32]
    6b7c:	add	r1, r1, #1
    6b80:	str	r1, [r0, #32]
    6b84:	cmp	r1, #2
    6b88:	movcs	r1, #1
    6b8c:	strcs	r1, [r0, #36]	; 0x24
    6b90:	sub	sp, fp, #28
    6b94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6b98:	mvn	r0, #0
    6b9c:	bl	4834 <exit@plt>
    6ba0:	muleq	r1, r0, r9
    6ba4:	andeq	pc, r1, ip, asr r9	; <UNPREDICTABLE>
    6ba8:	andeq	pc, r1, r0, asr #18
    6bac:			; <UNDEFINED> instruction: 0x0001f8b0
    6bb0:	push	{fp, lr}
    6bb4:	mov	fp, sp
    6bb8:	mov	lr, #0
    6bbc:	ldr	r2, [pc, #44]	; 6bf0 <clock_from_fhs@@Base+0x4e8>
    6bc0:	add	r2, pc, r2
    6bc4:	mov	ip, #1
    6bc8:	mov	r3, #0
    6bcc:	tst	r0, ip, lsl r3
    6bd0:	ldrhne	r1, [r2]
    6bd4:	eorne	lr, r1, lr
    6bd8:	add	r2, r2, #2
    6bdc:	add	r3, r3, #1
    6be0:	cmp	r3, #10
    6be4:	uxtheq	r0, lr
    6be8:	popeq	{fp, pc}
    6bec:	b	6bcc <clock_from_fhs@@Base+0x4c4>
    6bf0:	andeq	r7, r0, r8, ror r5
    6bf4:	push	{r4, r5, fp, lr}
    6bf8:	add	fp, sp, #8
    6bfc:	mov	r4, r1
    6c00:	mov	r5, r0
    6c04:	uxtb	r0, r2
    6c08:	bl	6c5c <clock_from_fhs@@Base+0x554>
    6c0c:	lsl	r0, r0, #8
    6c10:	cmp	r4, #1
    6c14:	blt	6c54 <clock_from_fhs@@Base+0x54c>
    6c18:	mov	r3, #0
    6c1c:	movw	ip, #65534	; 0xfffe
    6c20:	mov	r2, #0
    6c24:	and	r1, r0, ip
    6c28:	ldrb	r3, [r5, r3]
    6c2c:	eor	r0, r0, r3
    6c30:	lsl	r3, r0, #15
    6c34:	orr	r1, r3, r1, lsr #1
    6c38:	and	r0, r0, #1
    6c3c:	eor	r1, r1, r0, lsl #10
    6c40:	eor	r0, r1, r0, lsl #3
    6c44:	add	r2, r2, #1
    6c48:	uxth	r3, r2
    6c4c:	cmp	r3, r4
    6c50:	blt	6c24 <clock_from_fhs@@Base+0x51c>
    6c54:	uxth	r0, r0
    6c58:	pop	{r4, r5, fp, pc}
    6c5c:	mov	r1, #2
    6c60:	and	r1, r1, r0, lsr #5
    6c64:	lsl	r2, r0, #7
    6c68:	orr	r2, r2, r0, lsr #7
    6c6c:	orr	r1, r2, r1
    6c70:	mov	r2, #4
    6c74:	and	r2, r2, r0, lsr #3
    6c78:	orr	r1, r1, r2
    6c7c:	mov	r2, #8
    6c80:	and	r2, r2, r0, lsr #1
    6c84:	orr	r1, r1, r2
    6c88:	and	r2, r0, #8
    6c8c:	orr	r1, r1, r2, lsl #1
    6c90:	and	r2, r0, #4
    6c94:	orr	r1, r1, r2, lsl #3
    6c98:	and	r0, r0, #2
    6c9c:	orr	r0, r1, r0, lsl #5
    6ca0:	uxtb	r0, r0
    6ca4:	bx	lr

00006ca8 <count_bits@@Base>:
    6ca8:	mov	r1, #0
    6cac:	cmp	r0, #0
    6cb0:	beq	6cc8 <count_bits@@Base+0x20>
    6cb4:	sub	r2, r0, #1
    6cb8:	and	r0, r2, r0
    6cbc:	add	r1, r1, #1
    6cc0:	tst	r0, #255	; 0xff
    6cc4:	bne	6cb4 <count_bits@@Base+0xc>
    6cc8:	mov	r0, r1
    6ccc:	bx	lr

00006cd0 <btbb_piconet_new@@Base>:
    6cd0:	push	{r4, sl, fp, lr}
    6cd4:	add	fp, sp, #8
    6cd8:	mov	r4, #1
    6cdc:	mov	r0, #1
    6ce0:	movw	r1, #5660	; 0x161c
    6ce4:	bl	45c4 <calloc@plt>
    6ce8:	str	r4, [r0]
    6cec:	pop	{r4, sl, fp, pc}

00006cf0 <btbb_piconet_ref@@Base>:
    6cf0:	ldr	r1, [r0]
    6cf4:	add	r1, r1, #1
    6cf8:	str	r1, [r0]
    6cfc:	bx	lr

00006d00 <btbb_piconet_unref@@Base>:
    6d00:	ldr	r1, [r0]
    6d04:	subs	r1, r1, #1
    6d08:	str	r1, [r0]
    6d0c:	bxne	lr
    6d10:	b	4660 <free@plt>

00006d14 <btbb_init_survey@@Base>:
    6d14:	ldr	r0, [pc, #16]	; 6d2c <btbb_init_survey@@Base+0x18>
    6d18:	add	r0, pc, r0
    6d1c:	mov	r1, #1
    6d20:	strb	r1, [r0]
    6d24:	mov	r0, #0
    6d28:	bx	lr
    6d2c:	muleq	r1, r0, r4

00006d30 <btbb_init_piconet@@Base>:
    6d30:	str	r1, [r0, #24]
    6d34:	mov	r1, #3
    6d38:	mov	r2, #1
    6d3c:	b	6d40 <btbb_piconet_set_flag@@Base>

00006d40 <btbb_piconet_set_flag@@Base>:
    6d40:	push	{fp, lr}
    6d44:	mov	fp, sp
    6d48:	ldr	lr, [r0, #4]
    6d4c:	mov	ip, #1
    6d50:	orr	r3, lr, ip, lsl r1
    6d54:	cmp	r2, #0
    6d58:	biceq	r3, lr, ip, lsl r1
    6d5c:	str	r3, [r0, #4]
    6d60:	pop	{fp, pc}

00006d64 <btbb_piconet_get_flag@@Base>:
    6d64:	ldr	r0, [r0, #4]
    6d68:	mov	r2, #1
    6d6c:	and	r0, r0, r2, lsl r1
    6d70:	cmp	r0, #0
    6d74:	movwne	r0, #1
    6d78:	bx	lr

00006d7c <btbb_piconet_set_uap@@Base>:
    6d7c:	strb	r1, [r0, #28]
    6d80:	mov	r1, #2
    6d84:	mov	r2, #1
    6d88:	b	6d40 <btbb_piconet_set_flag@@Base>

00006d8c <btbb_piconet_get_uap@@Base>:
    6d8c:	ldrb	r0, [r0, #28]
    6d90:	bx	lr

00006d94 <btbb_piconet_get_lap@@Base>:
    6d94:	ldr	r0, [r0, #24]
    6d98:	bx	lr

00006d9c <btbb_piconet_get_nap@@Base>:
    6d9c:	ldrh	r0, [r0, #30]
    6da0:	bx	lr

00006da4 <btbb_piconet_get_bdaddr@@Base>:
    6da4:	ldrb	r1, [r0, #28]
    6da8:	ldr	r2, [r0, #24]
    6dac:	orr	r2, r2, r1, lsl #24
    6db0:	ldrh	r1, [r0, #30]
    6db4:	mov	r0, r2
    6db8:	bx	lr

00006dbc <btbb_piconet_get_clk_offset@@Base>:
    6dbc:	movw	r1, #5648	; 0x1610
    6dc0:	ldr	r0, [r0, r1]
    6dc4:	bx	lr

00006dc8 <btbb_piconet_set_clk_offset@@Base>:
    6dc8:	movw	r2, #5648	; 0x1610
    6dcc:	str	r1, [r0, r2]
    6dd0:	bx	lr

00006dd4 <btbb_piconet_set_afh_map@@Base>:
    6dd4:	push	{r4, r5, r6, sl, fp, lr}
    6dd8:	add	fp, sp, #16
    6ddc:	mov	r5, r1
    6de0:	mov	r4, r0
    6de4:	mov	r6, #0
    6de8:	strb	r6, [r0, #22]
    6dec:	ldrb	r0, [r5, r6]
    6df0:	add	r1, r4, r6
    6df4:	strb	r0, [r1, #12]
    6df8:	bl	45f4 <count_bits@plt>
    6dfc:	ldrb	r1, [r4, #22]
    6e00:	add	r0, r1, r0
    6e04:	strb	r0, [r4, #22]
    6e08:	add	r6, r6, #1
    6e0c:	cmp	r6, #10
    6e10:	bne	6dec <btbb_piconet_set_afh_map@@Base+0x18>
    6e14:	mov	r0, r4
    6e18:	mov	r1, #2
    6e1c:	bl	4708 <btbb_piconet_get_flag@plt>
    6e20:	cmp	r0, #0
    6e24:	popeq	{r4, r5, r6, sl, fp, pc}
    6e28:	mov	r0, r4
    6e2c:	pop	{r4, r5, r6, sl, fp, lr}
    6e30:	b	6e34 <get_hop_pattern@@Base>

00006e34 <get_hop_pattern@@Base>:
    6e34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e38:	add	fp, sp, #28
    6e3c:	sub	sp, sp, #20
    6e40:	mov	r5, r0
    6e44:	mov	r1, #11
    6e48:	bl	4708 <btbb_piconet_get_flag@plt>
    6e4c:	ldrb	r1, [r5, #22]
    6e50:	orr	r6, r1, r0, lsl #7
    6e54:	ldr	r0, [r5, #24]
    6e58:	ldrb	r1, [r5, #28]
    6e5c:	str	r6, [sp, #12]
    6e60:	orr	r8, r0, r1, lsl #24
    6e64:	str	r8, [sp, #8]
    6e68:	movw	r9, #63341	; 0xf76d
    6e6c:	movt	r9, #7
    6e70:	movw	ip, #16653	; 0x410d
    6e74:	movt	ip, #274	; 0x112
    6e78:	movw	r7, #47814	; 0xbac6
    6e7c:	movt	r7, #40777	; 0x9f49
    6e80:	movw	sl, #48883	; 0xbef3
    6e84:	movt	sl, #65261	; 0xfeed
    6e88:	ldr	r0, [pc, #1204]	; 7344 <get_hop_pattern@@Base+0x510>
    6e8c:	ldr	r0, [pc, r0]
    6e90:	cmp	r0, #0
    6e94:	beq	6f84 <get_hop_pattern@@Base+0x150>
    6e98:	ldrb	r1, [sp, #8]
    6e9c:	ldrb	r2, [sp, #9]
    6ea0:	ldrb	r3, [sp, #10]
    6ea4:	ldrb	r4, [sp, #11]
    6ea8:	add	r4, ip, r4, lsl #24
    6eac:	add	r3, r4, r3, lsl #16
    6eb0:	add	r2, r3, r2, lsl #8
    6eb4:	add	r1, r2, r1
    6eb8:	eor	r1, r1, r9
    6ebc:	sub	r2, r7, r1
    6ec0:	eor	r2, r2, r1, lsl #8
    6ec4:	sub	r3, sl, r1
    6ec8:	sub	r3, r3, r2
    6ecc:	eor	r3, r3, r2, lsr #13
    6ed0:	sub	r1, r1, r2
    6ed4:	sub	r1, r1, r3
    6ed8:	eor	r1, r1, r3, lsr #12
    6edc:	sub	r2, r2, r3
    6ee0:	sub	r2, r2, r1
    6ee4:	eor	r2, r2, r1, lsl #16
    6ee8:	sub	r3, r3, r1
    6eec:	sub	r3, r3, r2
    6ef0:	eor	r3, r3, r2, lsr #5
    6ef4:	sub	r1, r1, r2
    6ef8:	sub	r1, r1, r3
    6efc:	eor	r1, r1, r3, lsr #3
    6f00:	sub	r2, r2, r3
    6f04:	sub	r2, r2, r1
    6f08:	eor	r2, r2, r1, lsl #10
    6f0c:	sub	r1, r3, r1
    6f10:	sub	r1, r1, r2
    6f14:	eor	r1, r1, r2, lsr #15
    6f18:	ldr	r0, [r0, #12]
    6f1c:	ldm	r0, {r2, r3}
    6f20:	sub	r3, r3, #1
    6f24:	and	r1, r1, r3
    6f28:	add	r1, r1, r1, lsl #1
    6f2c:	ldr	r1, [r2, r1, lsl #2]
    6f30:	b	6f38 <get_hop_pattern@@Base+0x104>
    6f34:	ldr	r1, [r4, #28]
    6f38:	cmp	r1, #0
    6f3c:	ldrne	r2, [r0, #20]
    6f40:	subsne	r4, r1, r2
    6f44:	beq	6f84 <get_hop_pattern@@Base+0x150>
    6f48:	ldr	r1, [r4, #36]	; 0x24
    6f4c:	cmp	r1, #4
    6f50:	bne	6f34 <get_hop_pattern@@Base+0x100>
    6f54:	ldr	r1, [r4, #32]
    6f58:	ldr	r1, [r1]
    6f5c:	ldr	r2, [sp, #8]
    6f60:	cmp	r1, r2
    6f64:	bne	6f34 <get_hop_pattern@@Base+0x100>
    6f68:	ldr	r0, [pc, #1000]	; 7358 <get_hop_pattern@@Base+0x524>
    6f6c:	add	r0, pc, r0
    6f70:	bl	47d4 <puts@plt>
    6f74:	ldr	r0, [r4, #8]
    6f78:	str	r0, [r5, #372]	; 0x174
    6f7c:	sub	sp, fp, #28
    6f80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f84:	mov	r0, r5
    6f88:	bl	45e8 <gen_hop_pattern@plt>
    6f8c:	mov	r0, #48	; 0x30
    6f90:	bl	47e0 <malloc@plt>
    6f94:	mov	r4, r0
    6f98:	ldr	r1, [r5, #372]	; 0x174
    6f9c:	mov	r0, #0
    6fa0:	str	r0, [r4, #20]
    6fa4:	mov	r2, #4
    6fa8:	str	r8, [r4]
    6fac:	str	r6, [r4, #4]
    6fb0:	str	r1, [r4, #8]
    6fb4:	str	r4, [r4, #32]
    6fb8:	str	r2, [r4, #36]	; 0x24
    6fbc:	add	r5, r4, #12
    6fc0:	ldr	r1, [pc, #896]	; 7348 <get_hop_pattern@@Base+0x514>
    6fc4:	ldr	r1, [pc, r1]
    6fc8:	cmp	r1, #0
    6fcc:	beq	6ff4 <get_hop_pattern@@Base+0x1c0>
    6fd0:	ldr	r0, [r1, #12]
    6fd4:	ldr	r1, [r0, #16]
    6fd8:	str	r4, [r1, #8]
    6fdc:	ldr	r1, [r0, #16]
    6fe0:	ldr	r2, [r0, #20]
    6fe4:	sub	r1, r1, r2
    6fe8:	str	r1, [r4, #16]
    6fec:	str	r5, [r0, #16]
    6ff0:	b	70a8 <get_hop_pattern@@Base+0x274>
    6ff4:	mov	r7, r5
    6ff8:	ldr	r1, [pc, #844]	; 734c <get_hop_pattern@@Base+0x518>
    6ffc:	add	r1, pc, r1
    7000:	str	r4, [r1]
    7004:	str	r0, [r4, #16]
    7008:	mov	r0, #44	; 0x2c
    700c:	bl	47e0 <malloc@plt>
    7010:	str	r0, [r4, #12]
    7014:	ldr	r5, [pc, #820]	; 7350 <get_hop_pattern@@Base+0x51c>
    7018:	ldr	r5, [pc, r5]
    701c:	ldr	r0, [r5, #12]
    7020:	cmp	r0, #0
    7024:	beq	733c <get_hop_pattern@@Base+0x508>
    7028:	vmov.i32	q8, #0	; 0x00000000
    702c:	mov	r1, #28
    7030:	add	r2, r0, #16
    7034:	vst1.32	{d16-d17}, [r0], r1
    7038:	vst1.32	{d16-d17}, [r0]
    703c:	vst1.32	{d16-d17}, [r2]
    7040:	mov	r6, r5
    7044:	ldr	r0, [r6, #12]!
    7048:	str	r6, [r0, #16]
    704c:	ldr	r0, [r6]
    7050:	mov	r1, #5
    7054:	mov	r2, #32
    7058:	str	r2, [r0, #4]
    705c:	str	r1, [r0, #8]
    7060:	mov	r1, #12
    7064:	str	r1, [r0, #20]
    7068:	mov	r0, #384	; 0x180
    706c:	bl	47e0 <malloc@plt>
    7070:	ldr	r1, [r6]
    7074:	str	r0, [r1]
    7078:	ldr	r0, [r6]
    707c:	ldr	r0, [r0]
    7080:	cmp	r0, #0
    7084:	beq	733c <get_hop_pattern@@Base+0x508>
    7088:	mov	r1, #0
    708c:	mov	r2, #384	; 0x180
    7090:	bl	48dc <memset@plt>
    7094:	ldr	r0, [r5, #12]
    7098:	movw	r1, #8161	; 0x1fe1
    709c:	movt	r1, #40977	; 0xa011
    70a0:	str	r1, [r0, #40]	; 0x28
    70a4:	mov	r5, r7
    70a8:	ldr	r0, [pc, #676]	; 7354 <get_hop_pattern@@Base+0x520>
    70ac:	ldr	r0, [pc, r0]
    70b0:	ldr	r1, [r0, #12]
    70b4:	ldr	r2, [r1, #12]
    70b8:	add	r2, r2, #1
    70bc:	str	r2, [r1, #12]
    70c0:	ldr	r1, [r0, #12]
    70c4:	str	r1, [r4, #12]
    70c8:	ldrb	r1, [r4]
    70cc:	ldrb	r2, [r4, #1]
    70d0:	ldrb	r3, [r4, #2]
    70d4:	ldrb	r6, [r4, #3]
    70d8:	movw	r7, #16653	; 0x410d
    70dc:	movt	r7, #274	; 0x112
    70e0:	add	r7, r7, r6, lsl #24
    70e4:	add	r3, r7, r3, lsl #16
    70e8:	add	r2, r3, r2, lsl #8
    70ec:	add	r1, r2, r1
    70f0:	eor	r1, r1, r9
    70f4:	movw	r2, #47814	; 0xbac6
    70f8:	movt	r2, #40777	; 0x9f49
    70fc:	sub	r2, r2, r1
    7100:	eor	r2, r2, r1, lsl #8
    7104:	sub	r3, sl, r1
    7108:	sub	r3, r3, r2
    710c:	eor	r3, r3, r2, lsr #13
    7110:	sub	r1, r1, r2
    7114:	sub	r1, r1, r3
    7118:	eor	r1, r1, r3, lsr #12
    711c:	sub	r2, r2, r3
    7120:	sub	r2, r2, r1
    7124:	eor	r2, r2, r1, lsl #16
    7128:	sub	r3, r3, r1
    712c:	sub	r3, r3, r2
    7130:	eor	r3, r3, r2, lsr #5
    7134:	sub	r1, r1, r2
    7138:	sub	r1, r1, r3
    713c:	eor	r1, r1, r3, lsr #3
    7140:	sub	r2, r2, r3
    7144:	sub	r2, r2, r1
    7148:	eor	r2, r2, r1, lsl #10
    714c:	sub	r1, r3, r1
    7150:	sub	r1, r1, r2
    7154:	eor	r1, r1, r2, lsr #15
    7158:	str	r1, [r4, #40]	; 0x28
    715c:	ldr	r2, [r0, #12]
    7160:	ldm	r2, {r0, r2}
    7164:	sub	r2, r2, #1
    7168:	and	r1, r1, r2
    716c:	add	r2, r1, r1, lsl #1
    7170:	mov	r3, r0
    7174:	ldr	r7, [r3, r2, lsl #2]!
    7178:	ldr	r1, [r3, #4]
    717c:	add	r1, r1, #1
    7180:	str	r1, [r3, #4]
    7184:	mov	r6, #0
    7188:	str	r6, [r4, #24]
    718c:	str	r7, [r4, #28]
    7190:	ldr	r7, [r3]
    7194:	cmp	r7, #0
    7198:	strne	r5, [r7, #12]
    719c:	str	r5, [r3]
    71a0:	add	r0, r0, r2, lsl #2
    71a4:	ldr	r0, [r0, #8]
    71a8:	add	r0, r0, r0, lsl #2
    71ac:	mov	r2, #10
    71b0:	add	r0, r2, r0, lsl #1
    71b4:	cmp	r1, r0
    71b8:	bcc	7334 <get_hop_pattern@@Base+0x500>
    71bc:	ldr	r6, [r5]
    71c0:	ldr	r0, [r6, #36]	; 0x24
    71c4:	cmp	r0, #1
    71c8:	beq	7334 <get_hop_pattern@@Base+0x500>
    71cc:	str	r5, [sp, #4]
    71d0:	ldr	r0, [r6, #4]
    71d4:	add	r0, r0, r0, lsl #1
    71d8:	lsl	r0, r0, #3
    71dc:	bl	47e0 <malloc@plt>
    71e0:	cmp	r0, #0
    71e4:	beq	733c <get_hop_pattern@@Base+0x508>
    71e8:	mov	r9, r0
    71ec:	ldr	r0, [r6, #4]
    71f0:	add	r0, r0, r0, lsl #1
    71f4:	lsl	r2, r0, #3
    71f8:	mov	r4, #0
    71fc:	mov	r0, r9
    7200:	mov	r1, #0
    7204:	bl	48dc <memset@plt>
    7208:	str	r4, [r6, #28]
    720c:	ldm	r6, {r0, ip}
    7210:	ldr	r1, [r6, #8]
    7214:	ldr	r7, [r6, #12]
    7218:	add	r1, r1, #1
    721c:	mov	r5, #1
    7220:	mvn	r2, #0
    7224:	add	r2, r2, ip, lsl #1
    7228:	lsr	r3, r7, r1
    722c:	tst	r2, r7
    7230:	addne	r3, r5, r7, lsr r1
    7234:	str	r3, [r6, #24]
    7238:	cmp	ip, #0
    723c:	beq	72d4 <get_hop_pattern@@Base+0x4a0>
    7240:	ldr	lr, [r6]
    7244:	mov	sl, #0
    7248:	add	r1, sl, sl, lsl #1
    724c:	ldr	r0, [r0, r1, lsl #2]
    7250:	cmp	r0, #0
    7254:	beq	72c0 <get_hop_pattern@@Base+0x48c>
    7258:	ldr	r5, [r0, #16]
    725c:	ldr	r1, [r0, #28]
    7260:	and	r1, r1, r2
    7264:	add	r1, r1, r1, lsl #1
    7268:	add	r7, r9, r1, lsl #2
    726c:	ldr	r1, [r7, #4]
    7270:	add	r1, r1, #1
    7274:	str	r1, [r7, #4]
    7278:	cmp	r1, r3
    727c:	bls	7298 <get_hop_pattern@@Base+0x464>
    7280:	ldr	r8, [r6, #28]
    7284:	add	r4, r8, #1
    7288:	str	r4, [r6, #28]
    728c:	mov	r4, #0
    7290:	udiv	r1, r1, r3
    7294:	str	r1, [r7, #8]
    7298:	str	r4, [r0, #12]
    729c:	ldr	r1, [r7]
    72a0:	str	r1, [r0, #16]
    72a4:	ldr	r1, [r7]
    72a8:	cmp	r1, #0
    72ac:	strne	r0, [r1, #12]
    72b0:	str	r0, [r7]
    72b4:	cmp	r5, #0
    72b8:	mov	r0, r5
    72bc:	bne	7258 <get_hop_pattern@@Base+0x424>
    72c0:	add	sl, sl, #1
    72c4:	cmp	sl, ip
    72c8:	mov	r0, lr
    72cc:	bne	7248 <get_hop_pattern@@Base+0x414>
    72d0:	mov	r0, lr
    72d4:	bl	4660 <free@plt>
    72d8:	ldr	r3, [sp, #4]
    72dc:	ldr	r0, [r3]
    72e0:	ldmib	r0, {r1, r2}
    72e4:	lsl	r1, r1, #1
    72e8:	add	r2, r2, #1
    72ec:	stmib	r0, {r1, r2}
    72f0:	ldr	r1, [r3]
    72f4:	str	r9, [r1]
    72f8:	ldr	r1, [r0, #12]
    72fc:	ldr	r2, [r0, #28]
    7300:	cmp	r2, r1, lsr #1
    7304:	movls	r1, #0
    7308:	strls	r1, [r0, #32]
    730c:	subls	sp, fp, #28
    7310:	popls	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7314:	ldr	r1, [r0, #32]
    7318:	add	r1, r1, #1
    731c:	str	r1, [r0, #32]
    7320:	cmp	r1, #2
    7324:	movcs	r1, #1
    7328:	strcs	r1, [r0, #36]	; 0x24
    732c:	subcs	sp, fp, #28
    7330:	popcs	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7334:	sub	sp, fp, #28
    7338:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    733c:	mvn	r0, #0
    7340:	bl	4834 <exit@plt>
    7344:	andeq	pc, r1, r0, lsr #6
    7348:	andeq	pc, r1, r8, ror #3
    734c:			; <UNDEFINED> instruction: 0x0001f1b0
    7350:	muleq	r1, r4, r1
    7354:	andeq	pc, r1, r0, lsl #2
    7358:	muleq	r0, ip, r5

0000735c <btbb_piconet_get_afh_map@@Base>:
    735c:	add	r0, r0, #12
    7360:	bx	lr

00007364 <btbb_piconet_set_channel_seen@@Base>:
    7364:	push	{fp, lr}
    7368:	mov	fp, sp
    736c:	and	lr, r1, #7
    7370:	mov	ip, #1
    7374:	add	r2, r0, r1, lsr #3
    7378:	ldrb	r3, [r2, #12]!
    737c:	mov	r1, #0
    7380:	tst	r3, ip, lsl lr
    7384:	beq	7390 <btbb_piconet_set_channel_seen@@Base+0x2c>
    7388:	mov	r0, r1
    738c:	pop	{fp, pc}
    7390:	lsl	r1, ip, lr
    7394:	orr	r1, r3, r1
    7398:	strb	r1, [r2]
    739c:	ldrb	r1, [r0, #22]
    73a0:	add	r1, r1, #1
    73a4:	strb	r1, [r0, #22]
    73a8:	mov	r1, #1
    73ac:	mov	r0, r1
    73b0:	pop	{fp, pc}

000073b4 <btbb_piconet_clear_channel_seen@@Base>:
    73b4:	push	{fp, lr}
    73b8:	mov	fp, sp
    73bc:	mov	lr, r0
    73c0:	and	ip, r1, #7
    73c4:	mov	r0, #1
    73c8:	add	r1, lr, r1, lsr #3
    73cc:	ldrb	r3, [r1, #12]!
    73d0:	tst	r3, r0, lsl ip
    73d4:	moveq	r0, #0
    73d8:	popeq	{fp, pc}
    73dc:	lsl	r2, r0, ip
    73e0:	bic	r2, r3, r2
    73e4:	strb	r2, [r1]
    73e8:	ldrb	r1, [lr, #22]
    73ec:	sub	r1, r1, #1
    73f0:	strb	r1, [lr, #22]
    73f4:	pop	{fp, pc}

000073f8 <btbb_piconet_get_channel_seen@@Base>:
    73f8:	mov	r2, r0
    73fc:	mov	r0, #1
    7400:	cmp	r1, #78	; 0x4e
    7404:	bxhi	lr
    7408:	add	r0, r2, r1, lsr #3
    740c:	ldrb	r0, [r0, #12]
    7410:	and	r1, r1, #7
    7414:	mov	r2, #1
    7418:	and	r0, r0, r2, lsl r1
    741c:	cmp	r0, #0
    7420:	movwne	r0, #1
    7424:	bx	lr

00007428 <precalc@@Base>:
    7428:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    742c:	add	fp, sp, #24
    7430:	mov	r4, r0
    7434:	mov	r5, #0
    7438:	movw	r8, #29865	; 0x74a9
    743c:	movt	r8, #53092	; 0xcf64
    7440:	mov	r9, #79	; 0x4f
    7444:	mov	r6, #0
    7448:	b	7458 <precalc@@Base+0x30>
    744c:	add	r5, r5, #1
    7450:	cmp	r5, #79	; 0x4f
    7454:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
    7458:	mov	r0, r4
    745c:	mov	r1, #11
    7460:	bl	4708 <btbb_piconet_get_flag@plt>
    7464:	lsl	r1, r5, #1
    7468:	uxtb	r1, r1
    746c:	umull	r2, r3, r1, r8
    7470:	lsr	r2, r3, #6
    7474:	mls	r7, r2, r9, r1
    7478:	cmp	r0, #0
    747c:	beq	74a4 <precalc@@Base+0x7c>
    7480:	uxtb	r1, r7
    7484:	mov	r0, r4
    7488:	bl	46e4 <btbb_piconet_get_channel_seen@plt>
    748c:	cmp	r0, #0
    7490:	beq	744c <precalc@@Base+0x24>
    7494:	add	r1, r6, #1
    7498:	mov	r0, r6
    749c:	mov	r6, r1
    74a0:	b	74a8 <precalc@@Base+0x80>
    74a4:	mov	r0, r5
    74a8:	add	r0, r4, r0, lsl #2
    74ac:	str	r7, [r0, #56]	; 0x38
    74b0:	b	744c <precalc@@Base+0x24>

000074b4 <address_precalc@@Base>:
    74b4:	push	{r4, r5, fp, lr}
    74b8:	add	fp, sp, #8
    74bc:	ubfx	r2, r0, #19, #4
    74c0:	str	r2, [r1, #36]	; 0x24
    74c4:	ubfx	r2, r0, #23, #5
    74c8:	str	r2, [r1, #44]	; 0x2c
    74cc:	ubfx	r2, r0, #10, #9
    74d0:	str	r2, [r1, #52]	; 0x34
    74d4:	mov	lr, #16
    74d8:	and	r3, lr, r0, asr #4
    74dc:	mov	ip, #8
    74e0:	and	r2, ip, r0, asr #3
    74e4:	and	r4, r0, #1
    74e8:	orr	r2, r2, r4
    74ec:	orr	r2, r2, r3
    74f0:	mov	r3, #4
    74f4:	and	r4, r3, r0, asr #2
    74f8:	orr	r2, r2, r4
    74fc:	mov	r4, #2
    7500:	and	r5, r4, r0, asr #1
    7504:	orr	r2, r2, r5
    7508:	str	r2, [r1, #48]	; 0x30
    750c:	mov	r2, #32
    7510:	and	r2, r2, r0, lsr #6
    7514:	mov	r5, #64	; 0x40
    7518:	and	r5, r5, r0, lsr #7
    751c:	orr	r2, r5, r2
    7520:	and	r5, lr, r0, lsr #5
    7524:	orr	r2, r2, r5
    7528:	and	r5, ip, r0, asr #4
    752c:	orr	r2, r2, r5
    7530:	and	r3, r3, r0, asr #3
    7534:	orr	r2, r2, r3
    7538:	and	r3, r4, r0, asr #2
    753c:	orr	r2, r2, r3
    7540:	mov	r3, #1
    7544:	and	r0, r3, r0, asr #1
    7548:	orr	r0, r2, r0
    754c:	str	r0, [r1, #40]	; 0x28
    7550:	pop	{r4, r5, fp, pc}

00007554 <perm5@@Base>:
    7554:	push	{r4, r5, r6, sl, fp, lr}
    7558:	add	fp, sp, #16
    755c:	sub	sp, sp, #76	; 0x4c
    7560:	mov	r3, #0
    7564:	mov	ip, #1
    7568:	mov	lr, sp
    756c:	and	r4, ip, r2, lsr r3
    7570:	str	r4, [lr, r3, lsl #2]
    7574:	add	r3, r3, #1
    7578:	cmp	r3, #9
    757c:	bne	756c <perm5@@Base+0x18>
    7580:	add	r2, lr, #36	; 0x24
    7584:	mov	r3, #0
    7588:	mov	ip, #1
    758c:	and	r4, ip, r1, lsr r3
    7590:	str	r4, [r2, r3, lsl #2]
    7594:	add	r3, r3, #1
    7598:	cmp	r3, #5
    759c:	bne	758c <perm5@@Base+0x38>
    75a0:	mov	r2, #0
    75a4:	mov	r3, #1
    75a8:	sub	r1, fp, #36	; 0x24
    75ac:	and	r4, r3, r0, lsr r2
    75b0:	str	r4, [r1, r2, lsl #2]
    75b4:	add	r2, r2, #1
    75b8:	cmp	r2, #5
    75bc:	bne	75ac <perm5@@Base+0x58>
    75c0:	mov	r0, #13
    75c4:	ldr	ip, [pc, #92]	; 7628 <perm5@@Base+0xd4>
    75c8:	add	ip, pc, ip
    75cc:	ldr	r2, [pc, #88]	; 762c <perm5@@Base+0xd8>
    75d0:	add	r2, pc, r2
    75d4:	ldr	r3, [lr, r0, lsl #2]
    75d8:	cmp	r3, #0
    75dc:	beq	75f8 <perm5@@Base+0xa4>
    75e0:	ldr	r3, [ip, r0, lsl #2]
    75e4:	ldr	r4, [r1, r3, lsl #2]
    75e8:	ldr	r5, [r2, r0, lsl #2]
    75ec:	ldr	r6, [r1, r5, lsl #2]
    75f0:	str	r6, [r1, r3, lsl #2]
    75f4:	str	r4, [r1, r5, lsl #2]
    75f8:	sub	r0, r0, #1
    75fc:	cmn	r0, #1
    7600:	bne	75d4 <perm5@@Base+0x80>
    7604:	mov	r0, #0
    7608:	mov	r2, #0
    760c:	ldr	r3, [r1, r2, lsl #2]
    7610:	add	r0, r0, r3, lsl r2
    7614:	add	r2, r2, #1
    7618:	cmp	r2, #5
    761c:	bne	760c <perm5@@Base+0xb8>
    7620:	sub	sp, fp, #16
    7624:	pop	{r4, r5, r6, sl, fp, pc}
    7628:	andeq	r6, r0, ip, asr #27
    762c:	strdeq	r6, [r0], -ip

00007630 <perm_table_init@@Base>:
    7630:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    7634:	add	fp, sp, #24
    7638:	mov	r4, #0
    763c:	ldr	r8, [pc, #84]	; 7698 <perm_table_init@@Base+0x68>
    7640:	ldr	r8, [pc, r8]
    7644:	b	7658 <perm_table_init@@Base+0x28>
    7648:	add	r8, r8, #16384	; 0x4000
    764c:	add	r4, r4, #1
    7650:	cmp	r4, #32
    7654:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
    7658:	mov	r7, r8
    765c:	mov	r5, #0
    7660:	mov	r6, #0
    7664:	mov	r0, r4
    7668:	mov	r1, r5
    766c:	mov	r2, r6
    7670:	bl	4948 <perm5@plt>
    7674:	strb	r0, [r7, r6]
    7678:	add	r6, r6, #1
    767c:	cmp	r6, #512	; 0x200
    7680:	bne	7664 <perm_table_init@@Base+0x34>
    7684:	add	r7, r7, #512	; 0x200
    7688:	add	r5, r5, #1
    768c:	cmp	r5, #32
    7690:	bne	7660 <perm_table_init@@Base+0x30>
    7694:	b	7648 <perm_table_init@@Base+0x18>
    7698:	andeq	lr, r1, r0, asr #22

0000769c <fast_perm@@Base>:
    769c:	push	{r4, r5, r6, r7, fp, lr}
    76a0:	add	fp, sp, #16
    76a4:	mov	r4, r2
    76a8:	mov	r5, r1
    76ac:	mov	r6, r0
    76b0:	ldr	r7, [pc, #48]	; 76e8 <fast_perm@@Base+0x4c>
    76b4:	ldr	r7, [pc, r7]
    76b8:	ldr	r0, [r7]
    76bc:	cmp	r0, #0
    76c0:	bne	76d0 <fast_perm@@Base+0x34>
    76c4:	bl	475c <perm_table_init@plt>
    76c8:	mov	r0, #1
    76cc:	str	r0, [r7]
    76d0:	ldr	r0, [pc, #20]	; 76ec <fast_perm@@Base+0x50>
    76d4:	ldr	r0, [pc, r0]
    76d8:	add	r0, r0, r6, lsl #14
    76dc:	add	r0, r0, r5, lsl #9
    76e0:	ldrb	r0, [r0, r4]
    76e4:	pop	{r4, r5, r6, r7, fp, pc}
    76e8:	ldrdeq	lr, [r1], -r0
    76ec:	andeq	lr, r1, ip, lsr #21

000076f0 <gen_hop_pattern@@Base>:
    76f0:	push	{r4, sl, fp, lr}
    76f4:	add	fp, sp, #8
    76f8:	mov	r4, r0
    76fc:	ldr	r0, [pc, #72]	; 774c <gen_hop_pattern@@Base+0x5c>
    7700:	add	r0, pc, r0
    7704:	bl	47d4 <puts@plt>
    7708:	mov	r0, #134217728	; 0x8000000
    770c:	bl	47e0 <malloc@plt>
    7710:	str	r0, [r4, #372]	; 0x174
    7714:	mov	r0, r4
    7718:	bl	4990 <precalc@plt>
    771c:	ldrb	r0, [r4, #28]
    7720:	ldr	r1, [r4, #24]
    7724:	orr	r0, r1, r0, lsl #24
    7728:	bic	r0, r0, #-268435456	; 0xf0000000
    772c:	mov	r1, r4
    7730:	bl	48d0 <address_precalc@plt>
    7734:	mov	r0, r4
    7738:	bl	7754 <gen_hop_pattern@@Base+0x64>
    773c:	ldr	r0, [pc, #12]	; 7750 <gen_hop_pattern@@Base+0x60>
    7740:	add	r0, pc, r0
    7744:	pop	{r4, sl, fp, lr}
    7748:	b	47d4 <puts@plt>
    774c:	andeq	r6, r0, r8, lsr lr
    7750:	andeq	r6, r0, r8, lsr #28
    7754:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7758:	add	fp, sp, #28
    775c:	sub	sp, sp, #68	; 0x44
    7760:	mov	r4, r0
    7764:	mov	sl, #0
    7768:	mov	r3, #0
    776c:	mov	r1, #0
    7770:	mov	r2, #0
    7774:	str	r2, [fp, #-32]	; 0xffffffe0
    7778:	mov	r2, #0
    777c:	str	r2, [fp, #-44]	; 0xffffffd4
    7780:	b	77a4 <gen_hop_pattern@@Base+0xb4>
    7784:	ldr	r1, [sp, #8]
    7788:	add	r1, r1, #1
    778c:	ldr	sl, [sp, #12]
    7790:	add	sl, sl, #33554432	; 0x2000000
    7794:	cmp	r1, #4
    7798:	ldr	r3, [sp, #4]
    779c:	subeq	sp, fp, #28
    77a0:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    77a4:	str	r1, [sp, #8]
    77a8:	add	r1, r3, #8388608	; 0x800000
    77ac:	str	r1, [sp, #4]
    77b0:	str	sl, [sp, #12]
    77b4:	mov	r2, #0
    77b8:	ldr	r0, [r4, #44]	; 0x2c
    77bc:	str	r2, [sp, #20]
    77c0:	eor	r0, r0, r2
    77c4:	str	r0, [sp, #40]	; 0x28
    77c8:	add	r0, r3, #262144	; 0x40000
    77cc:	str	r0, [sp, #16]
    77d0:	mov	r2, #0
    77d4:	str	sl, [sp, #24]
    77d8:	ldr	r0, [r4, #48]	; 0x30
    77dc:	str	r2, [sp, #36]	; 0x24
    77e0:	eor	r0, r0, r2
    77e4:	str	r0, [fp, #-36]	; 0xffffffdc
    77e8:	eor	r0, r0, #31
    77ec:	str	r0, [fp, #-40]	; 0xffffffd8
    77f0:	add	r0, r3, #8192	; 0x2000
    77f4:	str	r0, [sp, #28]
    77f8:	str	sl, [sp, #32]
    77fc:	mov	r1, #0
    7800:	str	r3, [sp, #48]	; 0x30
    7804:	ldr	r0, [r4, #52]	; 0x34
    7808:	str	r1, [sp, #44]	; 0x2c
    780c:	eor	r7, r0, r1
    7810:	mov	r8, #0
    7814:	ldr	r9, [sp, #40]	; 0x28
    7818:	asr	r0, r9, #31
    781c:	add	r0, r9, r0, lsr #27
    7820:	bic	r0, r0, #31
    7824:	sub	r0, r9, r0
    7828:	ldr	r1, [r4, #36]	; 0x24
    782c:	eor	r5, r1, r0
    7830:	mov	r0, r5
    7834:	ldr	r1, [fp, #-36]	; 0xffffffdc
    7838:	mov	r2, r7
    783c:	bl	49cc <fast_perm@plt>
    7840:	mov	r6, r0
    7844:	mov	r0, r4
    7848:	mov	r1, #11
    784c:	bl	4708 <btbb_piconet_get_flag@plt>
    7850:	ldr	r1, [r4, #40]	; 0x28
    7854:	add	r1, r1, r6
    7858:	cmp	r0, #0
    785c:	beq	7878 <gen_hop_pattern@@Base+0x188>
    7860:	ldr	r0, [fp, #-32]	; 0xffffffe0
    7864:	add	r0, r1, r0
    7868:	ldrb	r1, [r4, #22]
    786c:	udiv	r2, r0, r1
    7870:	mls	r0, r2, r1, r0
    7874:	b	7898 <gen_hop_pattern@@Base+0x1a8>
    7878:	ldr	r0, [fp, #-44]	; 0xffffffd4
    787c:	add	r0, r1, r0
    7880:	movw	r1, #29865	; 0x74a9
    7884:	movt	r1, #53092	; 0xcf64
    7888:	umull	r1, r2, r0, r1
    788c:	lsr	r1, r2, #6
    7890:	mov	r2, #79	; 0x4f
    7894:	mls	r0, r1, r2, r0
    7898:	ldr	r1, [r4, #372]	; 0x174
    789c:	add	r1, r1, sl
    78a0:	add	r0, r4, r0, lsl #2
    78a4:	ldr	r0, [r0, #56]	; 0x38
    78a8:	strb	r0, [r1, r8]
    78ac:	mov	r0, r5
    78b0:	ldr	r1, [fp, #-40]	; 0xffffffd8
    78b4:	mov	r2, r7
    78b8:	bl	49cc <fast_perm@plt>
    78bc:	mov	r5, r0
    78c0:	mov	r0, r4
    78c4:	mov	r1, #11
    78c8:	bl	4708 <btbb_piconet_get_flag@plt>
    78cc:	ldr	r1, [r4, #40]	; 0x28
    78d0:	add	r1, r1, r5
    78d4:	add	r1, r1, #32
    78d8:	cmp	r0, #0
    78dc:	beq	78f8 <gen_hop_pattern@@Base+0x208>
    78e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
    78e4:	add	r0, r1, r0
    78e8:	ldrb	r1, [r4, #22]
    78ec:	udiv	r2, r0, r1
    78f0:	mls	r0, r2, r1, r0
    78f4:	b	7918 <gen_hop_pattern@@Base+0x228>
    78f8:	ldr	r0, [fp, #-44]	; 0xffffffd4
    78fc:	add	r0, r1, r0
    7900:	movw	r1, #29865	; 0x74a9
    7904:	movt	r1, #53092	; 0xcf64
    7908:	umull	r1, r2, r0, r1
    790c:	lsr	r1, r2, #6
    7910:	mov	r2, #79	; 0x4f
    7914:	mls	r0, r1, r2, r0
    7918:	ldr	r1, [r4, #372]	; 0x174
    791c:	add	r1, r1, sl
    7920:	add	r1, r1, r8
    7924:	add	r0, r4, r0, lsl #2
    7928:	ldr	r0, [r0, #56]	; 0x38
    792c:	strb	r0, [r1, #1]
    7930:	add	r9, r9, #1
    7934:	add	r8, r8, #2
    7938:	cmp	r8, #64	; 0x40
    793c:	bne	7818 <gen_hop_pattern@@Base+0x128>
    7940:	ldr	r3, [sp, #48]	; 0x30
    7944:	add	r3, r3, #16
    7948:	movw	r0, #29865	; 0x74a9
    794c:	movt	r0, #53092	; 0xcf64
    7950:	umull	r0, r1, r3, r0
    7954:	lsr	r0, r1, #6
    7958:	mov	r1, #79	; 0x4f
    795c:	mls	r2, r0, r1, r3
    7960:	ldrb	r0, [r4, #22]
    7964:	udiv	r1, r2, r0
    7968:	str	r2, [fp, #-44]	; 0xffffffd4
    796c:	mls	r0, r1, r0, r2
    7970:	str	r0, [fp, #-32]	; 0xffffffe0
    7974:	ldr	r1, [sp, #44]	; 0x2c
    7978:	add	r1, r1, #1
    797c:	add	sl, sl, #64	; 0x40
    7980:	cmp	r1, #512	; 0x200
    7984:	bne	7800 <gen_hop_pattern@@Base+0x110>
    7988:	ldr	r2, [sp, #36]	; 0x24
    798c:	add	r2, r2, #1
    7990:	ldr	sl, [sp, #32]
    7994:	add	sl, sl, #32768	; 0x8000
    7998:	cmp	r2, #32
    799c:	ldr	r3, [sp, #28]
    79a0:	bne	77d8 <gen_hop_pattern@@Base+0xe8>
    79a4:	ldr	r2, [sp, #20]
    79a8:	add	r2, r2, #1
    79ac:	ldr	sl, [sp, #24]
    79b0:	add	sl, sl, #1048576	; 0x100000
    79b4:	cmp	r2, #32
    79b8:	ldr	r3, [sp, #16]
    79bc:	bne	77b8 <gen_hop_pattern@@Base+0xc8>
    79c0:	b	7784 <gen_hop_pattern@@Base+0x94>

000079c4 <single_hop@@Base>:
    79c4:	push	{r4, r5, r6, r7, fp, lr}
    79c8:	add	fp, sp, #16
    79cc:	mov	r4, r1
    79d0:	mov	r6, r0
    79d4:	ldr	r0, [r1, #36]	; 0x24
    79d8:	ldr	r2, [r1, #44]	; 0x2c
    79dc:	ldr	r1, [r1, #48]	; 0x30
    79e0:	ldr	r3, [r4, #52]	; 0x34
    79e4:	eor	r1, r1, r6, lsr #16
    79e8:	and	r1, r1, #31
    79ec:	ubfx	r7, r6, #1, #1
    79f0:	rsb	r5, r7, r7, lsl #5
    79f4:	eor	r1, r1, r5
    79f8:	eor	r2, r2, r6, lsr #21
    79fc:	add	r2, r2, r6, lsr #2
    7a00:	and	r2, r2, #31
    7a04:	eor	r0, r2, r0
    7a08:	eor	r2, r3, r6, lsr #7
    7a0c:	bfc	r2, #9, #23
    7a10:	bl	49cc <fast_perm@plt>
    7a14:	mov	r5, r0
    7a18:	movw	r0, #65520	; 0xfff0
    7a1c:	movt	r0, #511	; 0x1ff
    7a20:	and	r6, r0, r6, lsr #3
    7a24:	mov	r0, r4
    7a28:	mov	r1, #11
    7a2c:	bl	4708 <btbb_piconet_get_flag@plt>
    7a30:	lsl	r1, r7, #5
    7a34:	cmp	r0, #0
    7a38:	ldrbne	r0, [r4, #22]
    7a3c:	moveq	r0, #79	; 0x4f
    7a40:	udiv	r2, r6, r0
    7a44:	mls	r2, r2, r0, r6
    7a48:	add	r1, r5, r1
    7a4c:	add	r1, r1, r2
    7a50:	ldr	r2, [r4, #40]	; 0x28
    7a54:	add	r1, r1, r2
    7a58:	udiv	r2, r1, r0
    7a5c:	mls	r0, r2, r0, r1
    7a60:	add	r0, r4, r0, lsl #2
    7a64:	ldrb	r0, [r0, #56]	; 0x38
    7a68:	pop	{r4, r5, r6, r7, fp, pc}

00007a6c <hop@@Base>:
    7a6c:	ldr	r1, [r1, #372]	; 0x174
    7a70:	ldrb	r0, [r1, r0]
    7a74:	bx	lr

00007a78 <btbb_init_hop_reversal@@Base>:
    7a78:	push	{r4, r5, fp, lr}
    7a7c:	add	fp, sp, #8
    7a80:	mov	r4, r1
    7a84:	mov	r5, r0
    7a88:	mov	r0, r1
    7a8c:	bl	47c8 <get_hop_pattern@plt>
    7a90:	movw	r0, #15728	; 0x3d70
    7a94:	movt	r0, #10
    7a98:	cmp	r5, #0
    7a9c:	movweq	r0, #15760	; 0x3d90
    7aa0:	movteq	r0, #3
    7aa4:	bl	47e0 <malloc@plt>
    7aa8:	str	r0, [r4, #32]
    7aac:	movw	r0, #5648	; 0x1610
    7ab0:	ldr	r0, [r4, r0]
    7ab4:	movw	r1, #5652	; 0x1614
    7ab8:	ldr	r1, [r4, r1]
    7abc:	add	r0, r1, r0
    7ac0:	and	r1, r0, #63	; 0x3f
    7ac4:	movw	r0, #4648	; 0x1228
    7ac8:	ldrb	r0, [r4, r0]
    7acc:	mov	r2, r4
    7ad0:	bl	7b2c <btbb_init_hop_reversal@@Base+0xb4>
    7ad4:	str	r0, [r4, #376]	; 0x178
    7ad8:	mov	r0, #0
    7adc:	str	r0, [r4, #388]	; 0x184
    7ae0:	mov	r0, r4
    7ae4:	mov	r1, #9
    7ae8:	mov	r2, #1
    7aec:	bl	472c <btbb_piconet_set_flag@plt>
    7af0:	mov	r0, r4
    7af4:	mov	r1, #5
    7af8:	mov	r2, #0
    7afc:	bl	472c <btbb_piconet_set_flag@plt>
    7b00:	mov	r0, r4
    7b04:	mov	r1, #13
    7b08:	mov	r2, r5
    7b0c:	bl	472c <btbb_piconet_set_flag@plt>
    7b10:	ldr	r1, [r4, #376]	; 0x178
    7b14:	ldr	r0, [pc, #12]	; 7b28 <btbb_init_hop_reversal@@Base+0xb0>
    7b18:	add	r0, pc, r0
    7b1c:	bl	4618 <printf@plt>
    7b20:	ldr	r0, [r4, #376]	; 0x178
    7b24:	pop	{r4, r5, fp, pc}
    7b28:	andeq	r6, r0, ip, ror #17
    7b2c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    7b30:	add	fp, sp, #24
    7b34:	mov	r6, #0
    7b38:	cmn	r1, #-134217727	; 0xf8000001
    7b3c:	bgt	7b8c <btbb_init_hop_reversal@@Base+0x114>
    7b40:	mov	r4, r2
    7b44:	mov	r7, r1
    7b48:	mov	r5, r0
    7b4c:	mov	r6, #0
    7b50:	movw	r8, #65472	; 0xffc0
    7b54:	movt	r8, #2047	; 0x7ff
    7b58:	ldr	r1, [r4, #8]
    7b5c:	ldr	r0, [r4, #372]	; 0x174
    7b60:	ldrb	r0, [r0, r7]
    7b64:	cmp	r1, #0
    7b68:	blne	8994 <btbb_process_packet@@Base+0x194>
    7b6c:	cmp	r0, r5
    7b70:	ldreq	r0, [r4, #32]
    7b74:	streq	r7, [r0, r6, lsl #2]
    7b78:	addeq	r6, r6, #1
    7b7c:	add	r0, r7, #64	; 0x40
    7b80:	cmp	r7, r8
    7b84:	mov	r7, r0
    7b88:	blt	7b58 <btbb_init_hop_reversal@@Base+0xe0>
    7b8c:	mov	r0, r6
    7b90:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00007b94 <try_hop@@Base>:
    7b94:	push	{r4, r5, r6, r7, fp, lr}
    7b98:	add	fp, sp, #16
    7b9c:	mov	r4, r1
    7ba0:	mov	r5, r0
    7ba4:	ldrb	r7, [r1, #28]
    7ba8:	bl	47a4 <btbb_decode@plt>
    7bac:	mov	r0, r4
    7bb0:	mov	r1, #9
    7bb4:	bl	4708 <btbb_piconet_get_flag@plt>
    7bb8:	cmp	r0, #0
    7bbc:	beq	7c30 <try_hop@@Base+0x9c>
    7bc0:	ldr	r0, [r4, #380]	; 0x17c
    7bc4:	add	r0, r4, r0, lsl #2
    7bc8:	movw	r1, #5652	; 0x1614
    7bcc:	ldr	r1, [r4, r1]
    7bd0:	ldr	r2, [r5, #2816]	; 0xb00
    7bd4:	sub	r1, r2, r1
    7bd8:	str	r1, [r0, #648]	; 0x288
    7bdc:	ldr	r0, [r4, #380]	; 0x17c
    7be0:	add	r0, r4, r0
    7be4:	ldrb	r1, [r5, #8]
    7be8:	movw	r2, #4648	; 0x1228
    7bec:	strb	r1, [r0, r2]
    7bf0:	ldr	r0, [r4, #380]	; 0x17c
    7bf4:	ldr	r1, [r4, #384]	; 0x180
    7bf8:	add	r0, r0, #1
    7bfc:	add	r1, r1, #1
    7c00:	str	r0, [r4, #380]	; 0x17c
    7c04:	str	r1, [r4, #384]	; 0x180
    7c08:	mov	r0, r4
    7c0c:	bl	47b0 <btbb_winnow@plt>
    7c10:	mov	r0, r4
    7c14:	mov	r1, #5
    7c18:	bl	4708 <btbb_piconet_get_flag@plt>
    7c1c:	cmp	r0, #0
    7c20:	beq	7c88 <try_hop@@Base+0xf4>
    7c24:	ldr	r0, [pc, #196]	; 7cf0 <try_hop@@Base+0x15c>
    7c28:	add	r0, pc, r0
    7c2c:	b	7c70 <try_hop@@Base+0xdc>
    7c30:	mov	r0, r4
    7c34:	mov	r1, #4
    7c38:	bl	4708 <btbb_piconet_get_flag@plt>
    7c3c:	mov	r6, r0
    7c40:	mov	r0, r5
    7c44:	mov	r1, r4
    7c48:	bl	4690 <btbb_uap_from_header@plt>
    7c4c:	cmp	r6, #0
    7c50:	beq	7cb4 <try_hop@@Base+0x120>
    7c54:	mov	r0, r4
    7c58:	mov	r1, #5
    7c5c:	bl	4708 <btbb_piconet_get_flag@plt>
    7c60:	cmp	r0, #0
    7c64:	beq	7c88 <try_hop@@Base+0xf4>
    7c68:	ldr	r0, [pc, #136]	; 7cf8 <try_hop@@Base+0x164>
    7c6c:	add	r0, pc, r0
    7c70:	bl	47d4 <puts@plt>
    7c74:	movw	r0, #5648	; 0x1610
    7c78:	ldr	r1, [r4, r0]
    7c7c:	ldr	r0, [pc, #112]	; 7cf4 <try_hop@@Base+0x160>
    7c80:	add	r0, pc, r0
    7c84:	bl	4618 <printf@plt>
    7c88:	mov	r0, r4
    7c8c:	mov	r1, #2
    7c90:	bl	4708 <btbb_piconet_get_flag@plt>
    7c94:	cmp	r0, #0
    7c98:	popne	{r4, r5, r6, r7, fp, pc}
    7c9c:	mov	r0, r4
    7ca0:	mov	r1, #2
    7ca4:	mov	r2, #1
    7ca8:	bl	472c <btbb_piconet_set_flag@plt>
    7cac:	strb	r7, [r4, #28]
    7cb0:	pop	{r4, r5, r6, r7, fp, pc}
    7cb4:	cmp	r0, #0
    7cb8:	beq	7c88 <try_hop@@Base+0xf4>
    7cbc:	ldrb	r0, [r4, #28]
    7cc0:	cmp	r7, r0
    7cc4:	bne	7ce0 <try_hop@@Base+0x14c>
    7cc8:	mov	r0, #0
    7ccc:	mov	r1, r4
    7cd0:	bl	49e4 <btbb_init_hop_reversal@plt>
    7cd4:	mov	r0, r4
    7cd8:	bl	47b0 <btbb_winnow@plt>
    7cdc:	b	7c88 <try_hop@@Base+0xf4>
    7ce0:	ldr	r0, [pc, #20]	; 7cfc <try_hop@@Base+0x168>
    7ce4:	add	r0, pc, r0
    7ce8:	bl	47d4 <puts@plt>
    7cec:	b	7c88 <try_hop@@Base+0xf4>
    7cf0:	andeq	r6, r0, pc, asr #17
    7cf4:	andeq	r6, r0, r3, lsr #15
    7cf8:	andeq	r6, r0, fp, lsl #17
    7cfc:	andeq	r6, r0, r4, lsr #17

00007d00 <btbb_winnow@@Base>:
    7d00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d04:	add	fp, sp, #28
    7d08:	sub	sp, sp, #4
    7d0c:	mov	r4, r0
    7d10:	ldr	r1, [r0, #380]	; 0x17c
    7d14:	ldr	r0, [r0, #388]	; 0x184
    7d18:	cmp	r0, r1
    7d1c:	bge	7dd0 <btbb_winnow@@Base+0xd0>
    7d20:	movw	r9, #4648	; 0x1228
    7d24:	add	r1, r4, r0
    7d28:	ldrb	r5, [r1, r9]
    7d2c:	add	r0, r4, r0, lsl #2
    7d30:	ldr	r7, [r0, #648]	; 0x288
    7d34:	mov	r0, r7
    7d38:	mov	r1, r5
    7d3c:	mov	r2, r4
    7d40:	bl	80e0 <btbb_uap_from_header@@Base+0x2fc>
    7d44:	mov	r6, r0
    7d48:	cmp	r0, #2
    7d4c:	blt	7dd4 <btbb_winnow@@Base+0xd4>
    7d50:	ldr	r0, [r4, #380]	; 0x17c
    7d54:	cmp	r0, #1
    7d58:	blt	7db4 <btbb_winnow@@Base+0xb4>
    7d5c:	ldr	r0, [r4, #388]	; 0x184
    7d60:	sub	r0, r0, #1
    7d64:	add	r1, r4, r0
    7d68:	ldrb	r8, [r1, r9]
    7d6c:	add	r0, r4, r0, lsl #2
    7d70:	ldr	sl, [r0, #648]	; 0x288
    7d74:	mov	r0, r4
    7d78:	mov	r1, #12
    7d7c:	bl	4708 <btbb_piconet_get_flag@plt>
    7d80:	cmp	r5, r8
    7d84:	bne	7db4 <btbb_winnow@@Base+0xb4>
    7d88:	add	r1, sl, #1
    7d8c:	cmp	r7, r1
    7d90:	cmpeq	r0, #0
    7d94:	bne	7db4 <btbb_winnow@@Base+0xb4>
    7d98:	mov	r0, r4
    7d9c:	mov	r1, #12
    7da0:	mov	r2, #1
    7da4:	bl	472c <btbb_piconet_set_flag@plt>
    7da8:	ldr	r0, [pc, #48]	; 7de0 <btbb_winnow@@Base+0xe0>
    7dac:	add	r0, pc, r0
    7db0:	bl	47d4 <puts@plt>
    7db4:	ldr	r1, [r4, #380]	; 0x17c
    7db8:	ldr	r0, [r4, #388]	; 0x184
    7dbc:	add	r0, r0, #1
    7dc0:	str	r0, [r4, #388]	; 0x184
    7dc4:	cmp	r0, r1
    7dc8:	blt	7d24 <btbb_winnow@@Base+0x24>
    7dcc:	b	7dd4 <btbb_winnow@@Base+0xd4>
    7dd0:	ldr	r6, [r4, #376]	; 0x178
    7dd4:	mov	r0, r6
    7dd8:	sub	sp, fp, #28
    7ddc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7de0:	strdeq	r6, [r0], -ip

00007de4 <btbb_uap_from_header@@Base>:
    7de4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7de8:	add	fp, sp, #28
    7dec:	sub	sp, sp, #20
    7df0:	mov	r4, r1
    7df4:	mov	r8, r0
    7df8:	ldr	r0, [r0, #2816]	; 0xb00
    7dfc:	str	r0, [sp, #16]
    7e00:	mov	r0, r1
    7e04:	mov	r1, #10
    7e08:	bl	4708 <btbb_piconet_get_flag@plt>
    7e0c:	cmp	r0, #0
    7e10:	movweq	r0, #5652	; 0x1614
    7e14:	ldreq	r1, [sp, #16]
    7e18:	streq	r1, [r4, r0]
    7e1c:	ldrb	r1, [r8, #8]
    7e20:	mov	r0, r4
    7e24:	bl	4750 <btbb_piconet_set_channel_seen@plt>
    7e28:	ldr	r0, [r4, #380]	; 0x17c
    7e2c:	cmp	r0, #1000	; 0x3e8
    7e30:	bge	7fec <btbb_uap_from_header@@Base+0x208>
    7e34:	add	r0, r4, r0, lsl #2
    7e38:	movw	r1, #5652	; 0x1614
    7e3c:	mov	r2, r4
    7e40:	ldr	r1, [r2, r1]!
    7e44:	str	r2, [sp, #12]
    7e48:	ldr	r2, [sp, #16]
    7e4c:	sub	r1, r2, r1
    7e50:	str	r1, [r0, #648]	; 0x288
    7e54:	ldr	r0, [r4, #380]	; 0x17c
    7e58:	add	r0, r4, r0
    7e5c:	ldrb	r1, [r8, #8]
    7e60:	movw	r2, #4648	; 0x1228
    7e64:	strb	r1, [r0, r2]
    7e68:	ldr	r0, [r4, #380]	; 0x17c
    7e6c:	ldr	r1, [r4, #384]	; 0x180
    7e70:	add	r0, r0, #1
    7e74:	add	r1, r1, #1
    7e78:	str	r0, [r4, #380]	; 0x17c
    7e7c:	str	r1, [r4, #384]	; 0x180
    7e80:	mov	r9, #0
    7e84:	mov	r0, #0
    7e88:	str	r0, [sp, #8]
    7e8c:	mov	r0, #0
    7e90:	str	r0, [sp, #4]
    7e94:	add	sl, r4, r9, lsl #2
    7e98:	ldr	r0, [sl, #392]	; 0x188
    7e9c:	cmn	r0, #1
    7ea0:	ble	7f48 <btbb_uap_from_header@@Base+0x164>
    7ea4:	ldr	r0, [sp, #16]
    7ea8:	add	r0, r0, r9
    7eac:	ldr	r1, [sp, #12]
    7eb0:	ldr	r1, [r1]
    7eb4:	sub	r0, r0, r1
    7eb8:	and	r5, r0, #63	; 0x3f
    7ebc:	mov	r0, r5
    7ec0:	mov	r1, r8
    7ec4:	bl	49d8 <try_clock@plt>
    7ec8:	mov	r6, r0
    7ecc:	mov	r0, r4
    7ed0:	mov	r1, #10
    7ed4:	bl	4708 <btbb_piconet_get_flag@plt>
    7ed8:	cmp	r0, #0
    7edc:	beq	7ef0 <btbb_uap_from_header@@Base+0x10c>
    7ee0:	ldr	r0, [sl, #392]	; 0x188
    7ee4:	mvn	r7, #0
    7ee8:	cmp	r0, r6
    7eec:	bne	7f00 <btbb_uap_from_header@@Base+0x11c>
    7ef0:	mov	r0, r5
    7ef4:	mov	r1, r8
    7ef8:	bl	4798 <crc_check@plt>
    7efc:	mov	r7, r0
    7f00:	mov	r0, r4
    7f04:	mov	r1, #2
    7f08:	bl	4708 <btbb_piconet_get_flag@plt>
    7f0c:	cmp	r0, #0
    7f10:	beq	7f24 <btbb_uap_from_header@@Base+0x140>
    7f14:	ldrb	r0, [r4, #28]
    7f18:	cmp	r6, r0
    7f1c:	mvn	r0, #0
    7f20:	movne	r7, r0
    7f24:	sub	r0, r7, #1
    7f28:	cmp	r0, #2
    7f2c:	bcc	7f60 <btbb_uap_from_header@@Base+0x17c>
    7f30:	add	r0, r7, #1
    7f34:	cmp	r0, #1
    7f38:	bhi	8008 <btbb_uap_from_header@@Base+0x224>
    7f3c:	mvn	r0, #0
    7f40:	str	r0, [sl, #392]	; 0x188
    7f44:	b	7f74 <btbb_uap_from_header@@Base+0x190>
    7f48:	mov	r0, r4
    7f4c:	mov	r1, #10
    7f50:	bl	4708 <btbb_piconet_get_flag@plt>
    7f54:	cmp	r0, #0
    7f58:	bne	7f74 <btbb_uap_from_header@@Base+0x190>
    7f5c:	b	7ea4 <btbb_uap_from_header@@Base+0xc0>
    7f60:	str	r6, [sl, #392]	; 0x188
    7f64:	ldr	r0, [sp, #8]
    7f68:	add	r0, r0, #1
    7f6c:	str	r0, [sp, #8]
    7f70:	str	r9, [sp, #4]
    7f74:	add	r9, r9, #1
    7f78:	cmp	r9, #64	; 0x40
    7f7c:	bcc	7e94 <btbb_uap_from_header@@Base+0xb0>
    7f80:	mov	r0, r4
    7f84:	mov	r1, #10
    7f88:	mov	r2, #1
    7f8c:	bl	472c <btbb_piconet_set_flag@plt>
    7f90:	mov	r5, #0
    7f94:	ldr	r0, [sp, #8]
    7f98:	cmp	r0, #0
    7f9c:	beq	8048 <btbb_uap_from_header@@Base+0x264>
    7fa0:	cmp	r0, #1
    7fa4:	bne	80c0 <btbb_uap_from_header@@Base+0x2dc>
    7fa8:	ldr	r0, [sp, #12]
    7fac:	ldr	r0, [r0]
    7fb0:	ldr	r6, [sp, #4]
    7fb4:	sub	r0, r6, r0
    7fb8:	and	r5, r0, #63	; 0x3f
    7fbc:	movw	r0, #5648	; 0x1610
    7fc0:	str	r5, [r4, r0]
    7fc4:	mov	r0, r4
    7fc8:	mov	r1, #2
    7fcc:	bl	4708 <btbb_piconet_get_flag@plt>
    7fd0:	cmp	r0, #0
    7fd4:	beq	8070 <btbb_uap_from_header@@Base+0x28c>
    7fd8:	ldr	r2, [r4, #384]	; 0x180
    7fdc:	ldr	r0, [pc, #244]	; 80d8 <btbb_uap_from_header@@Base+0x2f4>
    7fe0:	add	r0, pc, r0
    7fe4:	mov	r1, r5
    7fe8:	b	8084 <btbb_uap_from_header@@Base+0x2a0>
    7fec:	ldr	r0, [pc, #232]	; 80dc <btbb_uap_from_header@@Base+0x2f8>
    7ff0:	add	r0, pc, r0
    7ff4:	bl	47d4 <puts@plt>
    7ff8:	mov	r0, r4
    7ffc:	bl	81cc <btbb_uap_from_header@@Base+0x3e8>
    8000:	mov	r5, #0
    8004:	b	80c0 <btbb_uap_from_header@@Base+0x2dc>
    8008:	ldr	r0, [sp, #12]
    800c:	ldr	r0, [r0]
    8010:	sub	r0, r9, r0
    8014:	and	r5, r0, #63	; 0x3f
    8018:	movw	r0, #5648	; 0x1610
    801c:	str	r5, [r4, r0]
    8020:	mov	r0, r4
    8024:	mov	r1, #2
    8028:	bl	4708 <btbb_piconet_get_flag@plt>
    802c:	cmp	r0, #0
    8030:	beq	8054 <btbb_uap_from_header@@Base+0x270>
    8034:	ldr	r2, [r4, #384]	; 0x180
    8038:	ldr	r0, [pc, #144]	; 80d0 <btbb_uap_from_header@@Base+0x2ec>
    803c:	add	r0, pc, r0
    8040:	mov	r1, r5
    8044:	b	8064 <btbb_uap_from_header@@Base+0x280>
    8048:	mov	r0, r4
    804c:	bl	81cc <btbb_uap_from_header@@Base+0x3e8>
    8050:	b	80c0 <btbb_uap_from_header@@Base+0x2dc>
    8054:	ldr	r2, [r4, #384]	; 0x180
    8058:	ldr	r0, [pc, #108]	; 80cc <btbb_uap_from_header@@Base+0x2e8>
    805c:	add	r0, pc, r0
    8060:	mov	r1, r6
    8064:	bl	4618 <printf@plt>
    8068:	strb	r6, [r4, #28]
    806c:	b	8094 <btbb_uap_from_header@@Base+0x2b0>
    8070:	add	r0, r4, r6, lsl #2
    8074:	ldr	r1, [r0, #392]	; 0x188
    8078:	ldr	r2, [r4, #384]	; 0x180
    807c:	ldr	r0, [pc, #80]	; 80d4 <btbb_uap_from_header@@Base+0x2f0>
    8080:	add	r0, pc, r0
    8084:	bl	4618 <printf@plt>
    8088:	add	r0, r4, r6, lsl #2
    808c:	ldr	r0, [r0, #392]	; 0x188
    8090:	strb	r0, [r4, #28]
    8094:	mov	r5, #1
    8098:	mov	r0, r4
    809c:	mov	r1, #4
    80a0:	mov	r2, #1
    80a4:	bl	472c <btbb_piconet_set_flag@plt>
    80a8:	mov	r0, r4
    80ac:	mov	r1, #2
    80b0:	mov	r2, #1
    80b4:	bl	472c <btbb_piconet_set_flag@plt>
    80b8:	mov	r0, #0
    80bc:	str	r0, [r4, #384]	; 0x180
    80c0:	mov	r0, r5
    80c4:	sub	sp, fp, #28
    80c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    80cc:	ldrdeq	r6, [r0], -fp
    80d0:	andeq	r6, r0, r2, lsr r4
    80d4:	andeq	r6, r0, r4, asr #7
    80d8:	muleq	r0, fp, r4
    80dc:	andeq	r6, r0, r8, ror #11
    80e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    80e4:	add	fp, sp, #28
    80e8:	sub	sp, sp, #4
    80ec:	mov	r4, r2
    80f0:	mov	r9, r0
    80f4:	ldr	r0, [r2, #376]	; 0x178
    80f8:	cmp	r0, #0
    80fc:	ble	81a8 <btbb_uap_from_header@@Base+0x3c4>
    8100:	mov	r8, r1
    8104:	mov	sl, #0
    8108:	mov	r6, #0
    810c:	ldr	r1, [r4, #8]
    8110:	ldr	r7, [r4, #32]
    8114:	ldr	r0, [r4, #372]	; 0x174
    8118:	ldr	r5, [r7, r6, lsl #2]
    811c:	add	r2, r5, r9
    8120:	bic	r2, r2, #-134217728	; 0xf8000000
    8124:	ldrb	r0, [r0, r2]
    8128:	cmp	r1, #0
    812c:	blne	8994 <btbb_process_packet@@Base+0x194>
    8130:	cmp	r0, r8
    8134:	streq	r5, [r7, sl, lsl #2]
    8138:	addeq	sl, sl, #1
    813c:	ldr	r0, [r4, #376]	; 0x178
    8140:	add	r6, r6, #1
    8144:	cmp	r6, r0
    8148:	blt	810c <btbb_uap_from_header@@Base+0x328>
    814c:	str	sl, [r4, #376]	; 0x178
    8150:	cmp	sl, #0
    8154:	beq	81b0 <btbb_uap_from_header@@Base+0x3cc>
    8158:	cmp	sl, #1
    815c:	bne	81bc <btbb_uap_from_header@@Base+0x3d8>
    8160:	movw	r0, #5652	; 0x1614
    8164:	ldr	r0, [r4, r0]
    8168:	ldr	r1, [r4, #32]
    816c:	ldr	r2, [r1]
    8170:	sub	r0, r2, r0
    8174:	lsl	r0, r0, #1
    8178:	movw	r2, #5648	; 0x1610
    817c:	str	r0, [r4, r2]
    8180:	ldr	r1, [r1]
    8184:	ldr	r0, [pc, #60]	; 81c8 <btbb_uap_from_header@@Base+0x3e4>
    8188:	add	r0, pc, r0
    818c:	bl	4618 <printf@plt>
    8190:	mov	sl, #1
    8194:	mov	r0, r4
    8198:	mov	r1, #5
    819c:	mov	r2, #1
    81a0:	bl	472c <btbb_piconet_set_flag@plt>
    81a4:	b	81bc <btbb_uap_from_header@@Base+0x3d8>
    81a8:	mov	r0, #0
    81ac:	str	r0, [r4, #376]	; 0x178
    81b0:	mov	r0, r4
    81b4:	bl	81cc <btbb_uap_from_header@@Base+0x3e8>
    81b8:	mov	sl, #0
    81bc:	mov	r0, sl
    81c0:	sub	sp, fp, #28
    81c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    81c8:	andeq	r6, r0, r3, asr r3
    81cc:	push	{r4, r5, fp, lr}
    81d0:	add	fp, sp, #8
    81d4:	mov	r4, r0
    81d8:	mov	r1, #9
    81dc:	bl	4708 <btbb_piconet_get_flag@plt>
    81e0:	cmp	r0, #0
    81e4:	beq	81f8 <btbb_uap_from_header@@Base+0x414>
    81e8:	ldr	r0, [r4, #32]
    81ec:	bl	4660 <free@plt>
    81f0:	mov	r0, #0
    81f4:	str	r0, [r4, #372]	; 0x174
    81f8:	mov	r5, #0
    81fc:	mov	r0, r4
    8200:	mov	r1, #10
    8204:	mov	r2, #0
    8208:	bl	472c <btbb_piconet_set_flag@plt>
    820c:	mov	r0, r4
    8210:	mov	r1, #9
    8214:	mov	r2, #0
    8218:	bl	472c <btbb_piconet_set_flag@plt>
    821c:	mov	r0, r4
    8220:	mov	r1, #2
    8224:	mov	r2, #0
    8228:	bl	472c <btbb_piconet_set_flag@plt>
    822c:	mov	r0, r4
    8230:	mov	r1, #4
    8234:	mov	r2, #0
    8238:	bl	472c <btbb_piconet_set_flag@plt>
    823c:	mov	r0, r4
    8240:	mov	r1, #5
    8244:	mov	r2, #0
    8248:	bl	472c <btbb_piconet_set_flag@plt>
    824c:	str	r5, [r4, #380]	; 0x17c
    8250:	mov	r0, r4
    8254:	mov	r1, #12
    8258:	bl	4708 <btbb_piconet_get_flag@plt>
    825c:	mov	r2, r0
    8260:	mov	r0, r4
    8264:	mov	r1, #11
    8268:	pop	{r4, r5, fp, lr}
    826c:	b	6d40 <btbb_piconet_set_flag@@Base>

00008270 <btbb_print_afh_map@@Base>:
    8270:	push	{r4, r5, r6, r7, fp, lr}
    8274:	add	fp, sp, #16
    8278:	sub	sp, sp, #32
    827c:	ldrb	r1, [r0, #12]
    8280:	ldrb	r2, [r0, #13]
    8284:	ldrb	r3, [r0, #14]
    8288:	ldrb	ip, [r0, #15]
    828c:	ldrb	lr, [r0, #16]
    8290:	ldrb	r4, [r0, #17]
    8294:	ldrb	r5, [r0, #18]
    8298:	ldrb	r6, [r0, #19]
    829c:	ldrb	r7, [r0, #20]
    82a0:	ldrb	r0, [r0, #21]
    82a4:	stm	sp, {ip, lr}
    82a8:	add	ip, sp, #8
    82ac:	stm	ip, {r4, r5, r6, r7}
    82b0:	str	r0, [sp, #24]
    82b4:	ldr	r0, [pc, #12]	; 82c8 <btbb_print_afh_map@@Base+0x58>
    82b8:	add	r0, pc, r0
    82bc:	bl	4618 <printf@plt>
    82c0:	sub	sp, fp, #16
    82c4:	pop	{r4, r5, r6, r7, fp, pc}
    82c8:	andeq	r6, r0, lr, ror #3

000082cc <get_piconet@@Base>:
    82cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    82d0:	add	fp, sp, #28
    82d4:	sub	sp, sp, #12
    82d8:	mov	r6, r0
    82dc:	str	r0, [sp, #8]
    82e0:	movw	sl, #63341	; 0xf76d
    82e4:	movt	sl, #7
    82e8:	movw	r7, #16653	; 0x410d
    82ec:	movt	r7, #274	; 0x112
    82f0:	movw	r4, #47814	; 0xbac6
    82f4:	movt	r4, #40777	; 0x9f49
    82f8:	movw	r8, #48883	; 0xbef3
    82fc:	movt	r8, #65261	; 0xfeed
    8300:	ldr	r0, [pc, #1180]	; 87a4 <get_piconet@@Base+0x4d8>
    8304:	ldr	r0, [pc, r0]
    8308:	cmp	r0, #0
    830c:	beq	83e8 <get_piconet@@Base+0x11c>
    8310:	ldrb	r1, [sp, #8]
    8314:	ldrb	r2, [sp, #9]
    8318:	ldrb	r3, [sp, #10]
    831c:	ldrb	r5, [sp, #11]
    8320:	add	r5, r7, r5, lsl #24
    8324:	add	r3, r5, r3, lsl #16
    8328:	add	r2, r3, r2, lsl #8
    832c:	add	r1, r2, r1
    8330:	eor	r1, r1, sl
    8334:	sub	r2, r4, r1
    8338:	eor	r2, r2, r1, lsl #8
    833c:	sub	r3, r8, r1
    8340:	sub	r3, r3, r2
    8344:	eor	r3, r3, r2, lsr #13
    8348:	sub	r1, r1, r2
    834c:	sub	r1, r1, r3
    8350:	eor	r1, r1, r3, lsr #12
    8354:	sub	r2, r2, r3
    8358:	sub	r2, r2, r1
    835c:	eor	r2, r2, r1, lsl #16
    8360:	sub	r3, r3, r1
    8364:	sub	r3, r3, r2
    8368:	eor	r3, r3, r2, lsr #5
    836c:	sub	r1, r1, r2
    8370:	sub	r1, r1, r3
    8374:	eor	r1, r1, r3, lsr #3
    8378:	sub	r2, r2, r3
    837c:	sub	r2, r2, r1
    8380:	eor	r2, r2, r1, lsl #10
    8384:	sub	r1, r3, r1
    8388:	sub	r1, r1, r2
    838c:	eor	r1, r1, r2, lsr #15
    8390:	ldr	r0, [r0, #8]
    8394:	ldm	r0, {r2, r3}
    8398:	sub	r3, r3, #1
    839c:	and	r1, r1, r3
    83a0:	add	r1, r1, r1, lsl #1
    83a4:	ldr	r1, [r2, r1, lsl #2]
    83a8:	b	83b0 <get_piconet@@Base+0xe4>
    83ac:	ldr	r1, [r1, #24]
    83b0:	cmp	r1, #0
    83b4:	ldrne	r2, [r0, #20]
    83b8:	subsne	r1, r1, r2
    83bc:	beq	83e8 <get_piconet@@Base+0x11c>
    83c0:	ldr	r2, [r1, #32]
    83c4:	cmp	r2, #4
    83c8:	bne	83ac <get_piconet@@Base+0xe0>
    83cc:	ldr	r2, [r1, #28]
    83d0:	ldr	r2, [r2]
    83d4:	ldr	r3, [sp, #8]
    83d8:	cmp	r2, r3
    83dc:	bne	83ac <get_piconet@@Base+0xe0>
    83e0:	ldr	r9, [r1, #4]
    83e4:	b	8790 <get_piconet@@Base+0x4c4>
    83e8:	bl	45dc <btbb_piconet_new@plt>
    83ec:	mov	r9, r0
    83f0:	mov	r1, r6
    83f4:	bl	49f0 <btbb_init_piconet@plt>
    83f8:	mov	r0, #40	; 0x28
    83fc:	bl	47e0 <malloc@plt>
    8400:	mov	r5, r0
    8404:	stm	r0, {r6, r9}
    8408:	mov	r0, #0
    840c:	str	r0, [r5, #16]
    8410:	mov	r1, #4
    8414:	str	r5, [r5, #28]
    8418:	str	r1, [r5, #32]
    841c:	add	r4, r5, #8
    8420:	ldr	r1, [pc, #896]	; 87a8 <get_piconet@@Base+0x4dc>
    8424:	ldr	r1, [pc, r1]
    8428:	cmp	r1, #0
    842c:	beq	8454 <get_piconet@@Base+0x188>
    8430:	ldr	r0, [r1, #8]
    8434:	ldr	r1, [r0, #16]
    8438:	str	r5, [r1, #8]
    843c:	ldr	r1, [r0, #16]
    8440:	ldr	r2, [r0, #20]
    8444:	sub	r1, r1, r2
    8448:	str	r1, [r5, #12]
    844c:	str	r4, [r0, #16]
    8450:	b	8510 <get_piconet@@Base+0x244>
    8454:	mov	r8, r4
    8458:	ldr	r1, [pc, #844]	; 87ac <get_piconet@@Base+0x4e0>
    845c:	add	r1, pc, r1
    8460:	str	r5, [r1]
    8464:	str	r0, [r5, #12]
    8468:	mov	r0, #44	; 0x2c
    846c:	bl	47e0 <malloc@plt>
    8470:	str	r0, [r5, #8]
    8474:	ldr	r4, [pc, #820]	; 87b0 <get_piconet@@Base+0x4e4>
    8478:	ldr	r4, [pc, r4]
    847c:	ldr	r0, [r4, #8]
    8480:	cmp	r0, #0
    8484:	beq	879c <get_piconet@@Base+0x4d0>
    8488:	vmov.i32	q8, #0	; 0x00000000
    848c:	mov	r1, #28
    8490:	add	r2, r0, #16
    8494:	vst1.32	{d16-d17}, [r0], r1
    8498:	vst1.32	{d16-d17}, [r0]
    849c:	vst1.32	{d16-d17}, [r2]
    84a0:	mov	r6, r4
    84a4:	ldr	r0, [r6, #8]!
    84a8:	str	r6, [r0, #16]
    84ac:	ldr	r0, [r6]
    84b0:	mov	r1, #5
    84b4:	mov	r2, #32
    84b8:	str	r2, [r0, #4]
    84bc:	str	r1, [r0, #8]
    84c0:	mov	r1, #8
    84c4:	str	r1, [r0, #20]
    84c8:	mov	r0, #384	; 0x180
    84cc:	bl	47e0 <malloc@plt>
    84d0:	ldr	r1, [r6]
    84d4:	str	r0, [r1]
    84d8:	ldr	r0, [r6]
    84dc:	ldr	r0, [r0]
    84e0:	cmp	r0, #0
    84e4:	beq	879c <get_piconet@@Base+0x4d0>
    84e8:	mov	r1, #0
    84ec:	mov	r2, #384	; 0x180
    84f0:	bl	48dc <memset@plt>
    84f4:	ldr	r0, [r4, #8]
    84f8:	movw	r1, #8161	; 0x1fe1
    84fc:	movt	r1, #40977	; 0xa011
    8500:	str	r1, [r0, #40]	; 0x28
    8504:	mov	r4, r8
    8508:	movw	r8, #48883	; 0xbef3
    850c:	movt	r8, #65261	; 0xfeed
    8510:	ldr	r0, [pc, #668]	; 87b4 <get_piconet@@Base+0x4e8>
    8514:	ldr	r0, [pc, r0]
    8518:	ldr	r1, [r0, #8]
    851c:	ldr	r2, [r1, #12]
    8520:	add	r2, r2, #1
    8524:	str	r2, [r1, #12]
    8528:	ldr	r1, [r0, #8]
    852c:	str	r1, [r5, #8]
    8530:	ldrb	r1, [r5]
    8534:	ldrb	r2, [r5, #1]
    8538:	ldrb	r3, [r5, #2]
    853c:	ldrb	r6, [r5, #3]
    8540:	add	r7, r7, r6, lsl #24
    8544:	add	r3, r7, r3, lsl #16
    8548:	add	r2, r3, r2, lsl #8
    854c:	add	r1, r2, r1
    8550:	eor	r1, r1, sl
    8554:	movw	r2, #47814	; 0xbac6
    8558:	movt	r2, #40777	; 0x9f49
    855c:	sub	r2, r2, r1
    8560:	eor	r2, r2, r1, lsl #8
    8564:	sub	r3, r8, r1
    8568:	sub	r3, r3, r2
    856c:	eor	r3, r3, r2, lsr #13
    8570:	sub	r1, r1, r2
    8574:	sub	r1, r1, r3
    8578:	eor	r1, r1, r3, lsr #12
    857c:	sub	r2, r2, r3
    8580:	sub	r2, r2, r1
    8584:	eor	r2, r2, r1, lsl #16
    8588:	sub	r3, r3, r1
    858c:	sub	r3, r3, r2
    8590:	eor	r3, r3, r2, lsr #5
    8594:	sub	r1, r1, r2
    8598:	sub	r1, r1, r3
    859c:	eor	r1, r1, r3, lsr #3
    85a0:	sub	r2, r2, r3
    85a4:	sub	r2, r2, r1
    85a8:	eor	r2, r2, r1, lsl #10
    85ac:	sub	r1, r3, r1
    85b0:	sub	r1, r1, r2
    85b4:	eor	r1, r1, r2, lsr #15
    85b8:	str	r1, [r5, #36]	; 0x24
    85bc:	ldr	r2, [r0, #8]
    85c0:	ldm	r2, {r0, r2}
    85c4:	sub	r2, r2, #1
    85c8:	and	r1, r1, r2
    85cc:	add	r2, r1, r1, lsl #1
    85d0:	mov	r3, r0
    85d4:	ldr	r7, [r3, r2, lsl #2]!
    85d8:	ldr	r1, [r3, #4]
    85dc:	add	r1, r1, #1
    85e0:	str	r1, [r3, #4]
    85e4:	mov	r6, #0
    85e8:	str	r6, [r5, #20]
    85ec:	str	r7, [r5, #24]
    85f0:	ldr	r7, [r3]
    85f4:	cmp	r7, #0
    85f8:	strne	r4, [r7, #12]
    85fc:	str	r4, [r3]
    8600:	add	r0, r0, r2, lsl #2
    8604:	ldr	r0, [r0, #8]
    8608:	add	r0, r0, r0, lsl #2
    860c:	mov	r2, #10
    8610:	add	r0, r2, r0, lsl #1
    8614:	cmp	r1, r0
    8618:	bcc	8790 <get_piconet@@Base+0x4c4>
    861c:	ldr	r7, [r4]
    8620:	ldr	r0, [r7, #36]	; 0x24
    8624:	cmp	r0, #1
    8628:	beq	8790 <get_piconet@@Base+0x4c4>
    862c:	str	r4, [sp, #4]
    8630:	ldr	r0, [r7, #4]
    8634:	add	r0, r0, r0, lsl #1
    8638:	lsl	r0, r0, #3
    863c:	bl	47e0 <malloc@plt>
    8640:	cmp	r0, #0
    8644:	beq	879c <get_piconet@@Base+0x4d0>
    8648:	mov	r5, r0
    864c:	ldr	r0, [r7, #4]
    8650:	add	r0, r0, r0, lsl #1
    8654:	lsl	r2, r0, #3
    8658:	mov	sl, #0
    865c:	mov	r0, r5
    8660:	mov	r1, #0
    8664:	bl	48dc <memset@plt>
    8668:	str	sl, [r7, #28]
    866c:	ldm	r7, {r0, ip}
    8670:	ldr	r1, [r7, #8]
    8674:	ldr	r6, [r7, #12]
    8678:	add	r1, r1, #1
    867c:	mov	r4, #1
    8680:	mvn	r2, #0
    8684:	add	r2, r2, ip, lsl #1
    8688:	lsr	r3, r6, r1
    868c:	tst	r2, r6
    8690:	addne	r3, r4, r6, lsr r1
    8694:	str	r3, [r7, #24]
    8698:	cmp	ip, #0
    869c:	beq	8738 <get_piconet@@Base+0x46c>
    86a0:	str	r9, [sp]
    86a4:	ldr	lr, [r7]
    86a8:	mov	r9, #0
    86ac:	add	r1, r9, r9, lsl #1
    86b0:	ldr	r0, [r0, r1, lsl #2]
    86b4:	cmp	r0, #0
    86b8:	beq	8720 <get_piconet@@Base+0x454>
    86bc:	ldr	r6, [r0, #16]
    86c0:	ldr	r1, [r0, #28]
    86c4:	and	r1, r1, r2
    86c8:	add	r1, r1, r1, lsl #1
    86cc:	add	r4, r5, r1, lsl #2
    86d0:	ldr	r1, [r4, #4]
    86d4:	add	r8, r1, #1
    86d8:	str	r8, [r4, #4]
    86dc:	cmp	r8, r3
    86e0:	bls	86f8 <get_piconet@@Base+0x42c>
    86e4:	ldr	r1, [r7, #28]
    86e8:	add	r1, r1, #1
    86ec:	str	r1, [r7, #28]
    86f0:	udiv	r1, r8, r3
    86f4:	str	r1, [r4, #8]
    86f8:	str	sl, [r0, #12]
    86fc:	ldr	r1, [r4]
    8700:	str	r1, [r0, #16]
    8704:	ldr	r1, [r4]
    8708:	cmp	r1, #0
    870c:	strne	r0, [r1, #12]
    8710:	str	r0, [r4]
    8714:	cmp	r6, #0
    8718:	mov	r0, r6
    871c:	bne	86bc <get_piconet@@Base+0x3f0>
    8720:	add	r9, r9, #1
    8724:	cmp	r9, ip
    8728:	mov	r0, lr
    872c:	bne	86ac <get_piconet@@Base+0x3e0>
    8730:	mov	r0, lr
    8734:	ldr	r9, [sp]
    8738:	bl	4660 <free@plt>
    873c:	ldr	r3, [sp, #4]
    8740:	ldr	r0, [r3]
    8744:	ldmib	r0, {r1, r2}
    8748:	lsl	r1, r1, #1
    874c:	add	r2, r2, #1
    8750:	stmib	r0, {r1, r2}
    8754:	ldr	r1, [r3]
    8758:	str	r5, [r1]
    875c:	ldr	r1, [r0, #12]
    8760:	ldr	r2, [r0, #28]
    8764:	cmp	r2, r1, lsr #1
    8768:	bls	8788 <get_piconet@@Base+0x4bc>
    876c:	ldr	r1, [r0, #32]
    8770:	add	r1, r1, #1
    8774:	str	r1, [r0, #32]
    8778:	cmp	r1, #2
    877c:	movcs	r1, #1
    8780:	strcs	r1, [r0, #36]	; 0x24
    8784:	b	8790 <get_piconet@@Base+0x4c4>
    8788:	mov	r1, #0
    878c:	str	r1, [r0, #32]
    8790:	mov	r0, r9
    8794:	sub	sp, fp, #28
    8798:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    879c:	mvn	r0, #0
    87a0:	bl	4834 <exit@plt>
    87a4:	andeq	sp, r1, ip, lsr #29
    87a8:	andeq	sp, r1, ip, lsl #27
    87ac:	andeq	sp, r1, r4, asr sp
    87b0:	andeq	sp, r1, r8, lsr sp
    87b4:	muleq	r1, ip, ip

000087b8 <btbb_next_survey_result@@Base>:
    87b8:	push	{r4, sl, fp, lr}
    87bc:	add	fp, sp, #8
    87c0:	ldr	r0, [pc, #48]	; 87f8 <btbb_next_survey_result@@Base+0x40>
    87c4:	ldr	r0, [pc, r0]
    87c8:	cmp	r0, #0
    87cc:	moveq	r4, #0
    87d0:	moveq	r0, r4
    87d4:	popeq	{r4, sl, fp, pc}
    87d8:	ldr	r4, [r0, #4]
    87dc:	ldr	r1, [r0, #16]
    87e0:	ldr	r2, [pc, #20]	; 87fc <btbb_next_survey_result@@Base+0x44>
    87e4:	add	r2, pc, r2
    87e8:	str	r1, [r2]
    87ec:	bl	4660 <free@plt>
    87f0:	mov	r0, r4
    87f4:	pop	{r4, sl, fp, pc}
    87f8:	andeq	sp, r1, ip, ror #19
    87fc:	andeq	sp, r1, ip, asr #19

00008800 <btbb_process_packet@@Base>:
    8800:	push	{r4, r5, r6, r7, fp, lr}
    8804:	add	fp, sp, #16
    8808:	mov	r5, r0
    880c:	ldr	r0, [pc, #376]	; 898c <btbb_process_packet@@Base+0x18c>
    8810:	add	r0, pc, r0
    8814:	ldrb	r0, [r0]
    8818:	cmp	r0, #1
    881c:	bne	8874 <btbb_process_packet@@Base+0x74>
    8820:	mov	r0, r5
    8824:	bl	490c <btbb_packet_get_lap@plt>
    8828:	bl	493c <get_piconet@plt>
    882c:	mov	r6, r0
    8830:	ldrb	r1, [r5, #8]
    8834:	bl	4750 <btbb_piconet_set_channel_seen@plt>
    8838:	mov	r0, r5
    883c:	bl	46fc <btbb_header_present@plt>
    8840:	mov	r4, #0
    8844:	cmp	r0, #0
    8848:	beq	8970 <btbb_process_packet@@Base+0x170>
    884c:	mov	r0, r6
    8850:	mov	r1, #2
    8854:	bl	4708 <btbb_piconet_get_flag@plt>
    8858:	cmp	r0, #0
    885c:	bne	8970 <btbb_process_packet@@Base+0x170>
    8860:	mov	r0, r5
    8864:	mov	r1, r6
    8868:	bl	4690 <btbb_uap_from_header@plt>
    886c:	mov	r0, r4
    8870:	pop	{r4, r5, r6, r7, fp, pc}
    8874:	mov	r6, r1
    8878:	mov	r4, #0
    887c:	cmp	r1, #0
    8880:	beq	8970 <btbb_process_packet@@Base+0x170>
    8884:	ldrb	r1, [r5, #8]
    8888:	mov	r0, r6
    888c:	bl	4750 <btbb_piconet_set_channel_seen@plt>
    8890:	mov	r0, r6
    8894:	mov	r1, #3
    8898:	bl	4708 <btbb_piconet_get_flag@plt>
    889c:	cmp	r0, #0
    88a0:	beq	8970 <btbb_process_packet@@Base+0x170>
    88a4:	mov	r0, r5
    88a8:	bl	46fc <btbb_header_present@plt>
    88ac:	cmp	r0, #0
    88b0:	beq	8970 <btbb_process_packet@@Base+0x170>
    88b4:	mov	r0, r6
    88b8:	mov	r1, #14
    88bc:	bl	4708 <btbb_piconet_get_flag@plt>
    88c0:	mov	r7, r0
    88c4:	mov	r0, r6
    88c8:	bl	46c0 <btbb_piconet_get_uap@plt>
    88cc:	mov	r1, r0
    88d0:	cmp	r7, #0
    88d4:	beq	8920 <btbb_process_packet@@Base+0x120>
    88d8:	mov	r0, r5
    88dc:	bl	4768 <btbb_packet_set_uap@plt>
    88e0:	mov	r0, r5
    88e4:	mov	r1, #4
    88e8:	mov	r2, #1
    88ec:	bl	4648 <btbb_packet_set_flag@plt>
    88f0:	mov	r0, r5
    88f4:	mov	r1, #5
    88f8:	mov	r2, #1
    88fc:	bl	4648 <btbb_packet_set_flag@plt>
    8900:	mov	r0, r5
    8904:	bl	47a4 <btbb_decode@plt>
    8908:	cmp	r0, #0
    890c:	beq	8978 <btbb_process_packet@@Base+0x178>
    8910:	mov	r0, r5
    8914:	bl	49c0 <btbb_print_packet@plt>
    8918:	mov	r0, r4
    891c:	pop	{r4, r5, r6, r7, fp, pc}
    8920:	cmp	r1, #0
    8924:	beq	8860 <btbb_process_packet@@Base+0x60>
    8928:	mov	r0, r5
    892c:	mov	r1, r6
    8930:	bl	47ec <try_hop@plt>
    8934:	mov	r0, r6
    8938:	mov	r1, #4
    893c:	bl	4708 <btbb_piconet_get_flag@plt>
    8940:	cmp	r0, #0
    8944:	beq	8970 <btbb_process_packet@@Base+0x170>
    8948:	mov	r0, r6
    894c:	mov	r1, #5
    8950:	bl	4708 <btbb_piconet_get_flag@plt>
    8954:	cmp	r0, #0
    8958:	beq	8970 <btbb_process_packet@@Base+0x170>
    895c:	mov	r0, r6
    8960:	mov	r1, #14
    8964:	mov	r2, #1
    8968:	bl	472c <btbb_piconet_set_flag@plt>
    896c:	mvn	r4, #0
    8970:	mov	r0, r4
    8974:	pop	{r4, r5, r6, r7, fp, pc}
    8978:	ldr	r0, [pc, #16]	; 8990 <btbb_process_packet@@Base+0x190>
    897c:	add	r0, pc, r0
    8980:	bl	47d4 <puts@plt>
    8984:	mov	r0, r4
    8988:	pop	{r4, r5, r6, r7, fp, pc}
    898c:	muleq	r1, r8, r9
    8990:	andeq	r5, r0, ip, lsl #25
    8994:	add	r0, r0, #24
    8998:	movw	r1, #34079	; 0x851f
    899c:	movt	r1, #20971	; 0x51eb
    89a0:	umull	r1, r2, r0, r1
    89a4:	lsr	r1, r2, #3
    89a8:	mov	r2, #25
    89ac:	mls	r0, r1, r2, r0
    89b0:	add	r0, r0, #26
    89b4:	bx	lr

000089b8 <lell_packet_new@@Base>:
    89b8:	push	{r4, sl, fp, lr}
    89bc:	add	fp, sp, #8
    89c0:	mov	r4, #1
    89c4:	mov	r0, #1
    89c8:	mov	r1, #104	; 0x68
    89cc:	bl	45c4 <calloc@plt>
    89d0:	str	r4, [r0, #96]	; 0x60
    89d4:	pop	{r4, sl, fp, pc}

000089d8 <lell_packet_ref@@Base>:
    89d8:	ldr	r1, [r0, #96]	; 0x60
    89dc:	add	r1, r1, #1
    89e0:	str	r1, [r0, #96]	; 0x60
    89e4:	bx	lr

000089e8 <lell_packet_unref@@Base>:
    89e8:	ldr	r1, [r0, #96]	; 0x60
    89ec:	subs	r1, r1, #1
    89f0:	str	r1, [r0, #96]	; 0x60
    89f4:	bxne	lr
    89f8:	b	4660 <free@plt>

000089fc <lell_allocate_and_decode@@Base>:
    89fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    8a00:	add	fp, sp, #24
    8a04:	mov	r8, r3
    8a08:	mov	r6, r2
    8a0c:	mov	r7, r1
    8a10:	mov	r5, r0
    8a14:	bl	4918 <lell_packet_new@plt>
    8a18:	mov	r4, r0
    8a1c:	str	r0, [r8]
    8a20:	add	r0, r5, #16
    8a24:	mov	r1, #48	; 0x30
    8a28:	add	r2, r5, #32
    8a2c:	vld1.8	{d16-d17}, [r5], r1
    8a30:	vld1.8	{d18-d19}, [r0]
    8a34:	add	r0, r4, #16
    8a38:	vld1.8	{d20-d21}, [r2]
    8a3c:	vld1.8	{d22-d23}, [r5]
    8a40:	vst1.8	{d18-d19}, [r0]
    8a44:	add	r0, r4, #32
    8a48:	vst1.8	{d20-d21}, [r0]
    8a4c:	add	r0, r4, #48	; 0x30
    8a50:	vst1.8	{d22-d23}, [r0]
    8a54:	mov	r0, #5
    8a58:	mov	r5, r4
    8a5c:	vst1.8	{d16-d17}, [r5], r0
    8a60:	mov	r0, r7
    8a64:	bl	8b48 <lell_allocate_and_decode@@Base+0x14c>
    8a68:	strb	r0, [r4, #68]	; 0x44
    8a6c:	movw	r0, #2402	; 0x962
    8a70:	sub	r0, r7, r0
    8a74:	add	r0, r0, r0, lsr #31
    8a78:	lsr	r0, r0, #1
    8a7c:	strb	r0, [r4, #69]	; 0x45
    8a80:	str	r6, [r4, #76]	; 0x4c
    8a84:	ldr	r6, [r4]
    8a88:	str	r6, [r4, #64]	; 0x40
    8a8c:	mov	r0, r4
    8a90:	bl	4630 <lell_packet_is_data@plt>
    8a94:	ldrb	r1, [r5]
    8a98:	cmp	r0, #0
    8a9c:	beq	8ad0 <lell_allocate_and_decode@@Base+0xd4>
    8aa0:	and	r0, r1, #31
    8aa4:	str	r0, [r4, #72]	; 0x48
    8aa8:	mov	r0, r6
    8aac:	bl	8bcc <lell_packet_is_data@@Base+0x14>
    8ab0:	str	r0, [r4, #92]	; 0x5c
    8ab4:	clz	r0, r0
    8ab8:	lsr	r0, r0, #5
    8abc:	ldrb	r1, [r4, #100]	; 0x64
    8ac0:	and	r1, r1, #254	; 0xfe
    8ac4:	orr	r0, r1, r0
    8ac8:	strb	r0, [r4, #100]	; 0x64
    8acc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    8ad0:	and	r0, r1, #63	; 0x3f
    8ad4:	str	r0, [r4, #72]	; 0x48
    8ad8:	ldrb	r0, [r4, #4]
    8adc:	ldrb	r1, [r4, #100]	; 0x64
    8ae0:	lsr	r2, r0, #7
    8ae4:	str	r2, [r4, #88]	; 0x58
    8ae8:	and	r2, r0, #15
    8aec:	strb	r2, [r4, #80]	; 0x50
    8af0:	ubfx	r0, r0, #6, #1
    8af4:	str	r0, [r4, #84]	; 0x54
    8af8:	movw	r0, #16682	; 0x412a
    8afc:	movt	r0, #29046	; 0x7176
    8b00:	add	r0, r6, r0
    8b04:	clz	r0, r0
    8b08:	lsr	r0, r0, #5
    8b0c:	and	r1, r1, #254	; 0xfe
    8b10:	orr	r0, r1, r0
    8b14:	strb	r0, [r4, #100]	; 0x64
    8b18:	ldr	r4, [r8]
    8b1c:	ldrb	r0, [r4, #100]	; 0x64
    8b20:	mov	r1, #0
    8b24:	tst	r0, #1
    8b28:	bne	8b40 <lell_allocate_and_decode@@Base+0x144>
    8b2c:	ldr	r0, [r4, #64]	; 0x40
    8b30:	bl	9510 <lell_packet_is_data@@Base+0x958>
    8b34:	mov	r1, #1
    8b38:	cmp	r0, #0
    8b3c:	movweq	r1, #32
    8b40:	str	r1, [r4, #92]	; 0x5c
    8b44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    8b48:	mov	r1, #37	; 0x25
    8b4c:	movw	r2, #2402	; 0x962
    8b50:	cmp	r0, r2
    8b54:	beq	8bb0 <lell_allocate_and_decode@@Base+0x1b4>
    8b58:	movw	r1, #2425	; 0x979
    8b5c:	cmp	r0, r1
    8b60:	bhi	8b7c <lell_allocate_and_decode@@Base+0x180>
    8b64:	movw	r1, #2404	; 0x964
    8b68:	sub	r0, r0, r1
    8b6c:	add	r0, r0, r0, lsr #31
    8b70:	asr	r1, r0, #1
    8b74:	uxtb	r0, r1
    8b78:	bx	lr
    8b7c:	mov	r1, #38	; 0x26
    8b80:	movw	r2, #2426	; 0x97a
    8b84:	cmp	r0, r2
    8b88:	beq	8bb0 <lell_allocate_and_decode@@Base+0x1b4>
    8b8c:	lsr	r2, r0, #4
    8b90:	mov	r1, #39	; 0x27
    8b94:	cmp	r2, #154	; 0x9a
    8b98:	bhi	8bb0 <lell_allocate_and_decode@@Base+0x1b4>
    8b9c:	movw	r1, #2428	; 0x97c
    8ba0:	sub	r0, r0, r1
    8ba4:	add	r0, r0, r0, lsr #31
    8ba8:	mov	r1, #11
    8bac:	add	r1, r1, r0, lsr #1
    8bb0:	uxtb	r0, r1
    8bb4:	bx	lr

00008bb8 <lell_packet_is_data@@Base>:
    8bb8:	ldrb	r1, [r0, #68]	; 0x44
    8bbc:	mov	r0, #0
    8bc0:	cmp	r1, #37	; 0x25
    8bc4:	movwcc	r0, #1
    8bc8:	bx	lr
    8bcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8bd0:	add	fp, sp, #28
    8bd4:	sub	sp, sp, #4
    8bd8:	mov	r4, r0
    8bdc:	ldr	r0, [pc, #2336]	; 9504 <lell_packet_is_data@@Base+0x94c>
    8be0:	add	r0, pc, r0
    8be4:	ldr	r1, [pc, #2332]	; 9508 <lell_packet_is_data@@Base+0x950>
    8be8:	add	r1, pc, r1
    8bec:	tst	r4, #1
    8bf0:	mov	r2, r1
    8bf4:	moveq	r2, r0
    8bf8:	uxtb	r3, r4
    8bfc:	ldrb	r2, [r2, r3]
    8c00:	tst	r4, #128	; 0x80
    8c04:	mov	r7, r1
    8c08:	moveq	r7, r0
    8c0c:	ubfx	r6, r4, #8, #8
    8c10:	ldrb	r7, [r7, r6]
    8c14:	add	r2, r7, r2
    8c18:	tst	r4, #32768	; 0x8000
    8c1c:	mov	r7, r1
    8c20:	moveq	r7, r0
    8c24:	ubfx	r6, r4, #16, #8
    8c28:	ldrb	r7, [r7, r6]
    8c2c:	add	r2, r2, r7
    8c30:	tst	r4, #8388608	; 0x800000
    8c34:	moveq	r1, r0
    8c38:	ldrb	r0, [r1, r4, lsr #24]
    8c3c:	add	r5, r2, r0
    8c40:	movw	r0, #48854	; 0xbed6
    8c44:	movt	r0, #36489	; 0x8e89
    8c48:	cmp	r4, r0
    8c4c:	mov	r0, #1
    8c50:	movweq	r0, #2
    8c54:	eor	r1, r3, r4, lsr #24
    8c58:	eor	r2, r4, r4, lsr #16
    8c5c:	eor	r3, r4, r4, lsr #8
    8c60:	orr	r2, r3, r2
    8c64:	uxtb	r2, r2
    8c68:	orr	r1, r1, r2
    8c6c:	clz	r1, r1
    8c70:	lsr	r1, r1, #5
    8c74:	add	r0, r0, r1
    8c78:	ldr	r1, [pc, #2188]	; 950c <lell_packet_is_data@@Base+0x954>
    8c7c:	add	r1, pc, r1
    8c80:	ldrb	r1, [r1, r4, lsr #26]
    8c84:	sub	r6, r0, r1
    8c88:	mov	r0, r4
    8c8c:	bl	9510 <lell_packet_is_data@@Base+0x958>
    8c90:	add	r0, r6, r0
    8c94:	add	r1, r0, r5
    8c98:	cmp	r5, #24
    8c9c:	subhi	r0, r1, #24
    8ca0:	mov	r1, #0
    8ca4:	movw	r2, #4095	; 0xfff
    8ca8:	movw	r3, #2035	; 0x7f3
    8cac:	movw	sl, #765	; 0x2fd
    8cb0:	movw	ip, #3063	; 0xbf7
    8cb4:	movw	r8, #3325	; 0xcfd
    8cb8:	movw	r7, #1
    8cbc:	movt	r7, #65535	; 0xffff
    8cc0:	b	8cd4 <lell_packet_is_data@@Base+0x11c>
    8cc4:	add	r1, r1, #4
    8cc8:	cmp	r1, #21
    8ccc:	subcs	sp, fp, #28
    8cd0:	popcs	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8cd4:	and	lr, r2, r4, lsr r1
    8cd8:	cmp	lr, r3
    8cdc:	ble	8d14 <lell_packet_is_data@@Base+0x15c>
    8ce0:	cmp	lr, ip
    8ce4:	ble	9334 <lell_packet_is_data@@Base+0x77c>
    8ce8:	cmp	lr, #3712	; 0xe80
    8cec:	bge	93a0 <lell_packet_is_data@@Base+0x7e8>
    8cf0:	cmp	lr, r8
    8cf4:	bgt	9420 <lell_packet_is_data@@Base+0x868>
    8cf8:	movw	r5, #3064	; 0xbf8
    8cfc:	sub	r5, lr, r5
    8d00:	cmp	r5, #16
    8d04:	bcc	94e8 <lell_packet_is_data@@Base+0x930>
    8d08:	cmp	lr, #3200	; 0xc80
    8d0c:	beq	94e8 <lell_packet_is_data@@Base+0x930>
    8d10:	b	8cc4 <lell_packet_is_data@@Base+0x10c>
    8d14:	cmp	lr, sl
    8d18:	bgt	9368 <lell_packet_is_data@@Base+0x7b0>
    8d1c:	cmp	lr, #384	; 0x180
    8d20:	bhi	9470 <lell_packet_is_data@@Base+0x8b8>
    8d24:	add	r6, pc, #4
    8d28:	ldr	r5, [r6, lr, lsl #2]
    8d2c:	add	pc, r6, r5
    8d30:			; <UNDEFINED> instruction: 0x000007b8
    8d34:			; <UNDEFINED> instruction: 0x000007b8
    8d38:			; <UNDEFINED> instruction: 0x000007b8
    8d3c:			; <UNDEFINED> instruction: 0x000007b8
    8d40:			; <UNDEFINED> instruction: 0x000007b8
    8d44:			; <UNDEFINED> instruction: 0x000007b8
    8d48:			; <UNDEFINED> instruction: 0x000007b8
    8d4c:			; <UNDEFINED> instruction: 0x000007b8
    8d50:			; <UNDEFINED> instruction: 0x000007b8
    8d54:			; <UNDEFINED> instruction: 0x000007b8
    8d58:			; <UNDEFINED> instruction: 0x000007b8
    8d5c:			; <UNDEFINED> instruction: 0x000007b8
    8d60:			; <UNDEFINED> instruction: 0x000007b8
    8d64:			; <UNDEFINED> instruction: 0x000007b8
    8d68:			; <UNDEFINED> instruction: 0x000007b8
    8d6c:			; <UNDEFINED> instruction: 0x000007b8
    8d70:			; <UNDEFINED> instruction: 0x000007b8
    8d74:			; <UNDEFINED> instruction: 0x000007b8
    8d78:			; <UNDEFINED> instruction: 0x000007b8
    8d7c:			; <UNDEFINED> instruction: 0x000007b8
    8d80:			; <UNDEFINED> instruction: 0x000007b8
    8d84:			; <UNDEFINED> instruction: 0x000007b8
    8d88:			; <UNDEFINED> instruction: 0x000007b8
    8d8c:			; <UNDEFINED> instruction: 0x000007b8
    8d90:			; <UNDEFINED> instruction: 0x000007b8
    8d94:			; <UNDEFINED> instruction: 0x000007b8
    8d98:			; <UNDEFINED> instruction: 0x000007b8
    8d9c:			; <UNDEFINED> instruction: 0x000007b8
    8da0:			; <UNDEFINED> instruction: 0x000007b8
    8da4:			; <UNDEFINED> instruction: 0x000007b8
    8da8:			; <UNDEFINED> instruction: 0x000007b8
    8dac:			; <UNDEFINED> instruction: 0x000007b8
    8db0:			; <UNDEFINED> instruction: 0xffffff94
    8db4:			; <UNDEFINED> instruction: 0xffffff94
    8db8:			; <UNDEFINED> instruction: 0xffffff94
    8dbc:			; <UNDEFINED> instruction: 0xffffff94
    8dc0:			; <UNDEFINED> instruction: 0xffffff94
    8dc4:			; <UNDEFINED> instruction: 0xffffff94
    8dc8:			; <UNDEFINED> instruction: 0xffffff94
    8dcc:			; <UNDEFINED> instruction: 0xffffff94
    8dd0:			; <UNDEFINED> instruction: 0xffffff94
    8dd4:			; <UNDEFINED> instruction: 0xffffff94
    8dd8:			; <UNDEFINED> instruction: 0xffffff94
    8ddc:			; <UNDEFINED> instruction: 0xffffff94
    8de0:			; <UNDEFINED> instruction: 0xffffff94
    8de4:			; <UNDEFINED> instruction: 0xffffff94
    8de8:			; <UNDEFINED> instruction: 0xffffff94
    8dec:			; <UNDEFINED> instruction: 0xffffff94
    8df0:			; <UNDEFINED> instruction: 0xffffff94
    8df4:			; <UNDEFINED> instruction: 0xffffff94
    8df8:			; <UNDEFINED> instruction: 0xffffff94
    8dfc:			; <UNDEFINED> instruction: 0xffffff94
    8e00:			; <UNDEFINED> instruction: 0xffffff94
    8e04:			; <UNDEFINED> instruction: 0xffffff94
    8e08:			; <UNDEFINED> instruction: 0xffffff94
    8e0c:			; <UNDEFINED> instruction: 0xffffff94
    8e10:			; <UNDEFINED> instruction: 0xffffff94
    8e14:			; <UNDEFINED> instruction: 0xffffff94
    8e18:			; <UNDEFINED> instruction: 0xffffff94
    8e1c:			; <UNDEFINED> instruction: 0xffffff94
    8e20:			; <UNDEFINED> instruction: 0xffffff94
    8e24:			; <UNDEFINED> instruction: 0xffffff94
    8e28:			; <UNDEFINED> instruction: 0xffffff94
    8e2c:			; <UNDEFINED> instruction: 0xffffff94
    8e30:			; <UNDEFINED> instruction: 0xffffff94
    8e34:			; <UNDEFINED> instruction: 0xffffff94
    8e38:			; <UNDEFINED> instruction: 0xffffff94
    8e3c:			; <UNDEFINED> instruction: 0xffffff94
    8e40:			; <UNDEFINED> instruction: 0xffffff94
    8e44:			; <UNDEFINED> instruction: 0xffffff94
    8e48:			; <UNDEFINED> instruction: 0xffffff94
    8e4c:			; <UNDEFINED> instruction: 0xffffff94
    8e50:			; <UNDEFINED> instruction: 0xffffff94
    8e54:			; <UNDEFINED> instruction: 0xffffff94
    8e58:			; <UNDEFINED> instruction: 0xffffff94
    8e5c:			; <UNDEFINED> instruction: 0xffffff94
    8e60:			; <UNDEFINED> instruction: 0xffffff94
    8e64:			; <UNDEFINED> instruction: 0xffffff94
    8e68:			; <UNDEFINED> instruction: 0xffffff94
    8e6c:			; <UNDEFINED> instruction: 0xffffff94
    8e70:			; <UNDEFINED> instruction: 0xffffff94
    8e74:			; <UNDEFINED> instruction: 0xffffff94
    8e78:			; <UNDEFINED> instruction: 0xffffff94
    8e7c:			; <UNDEFINED> instruction: 0xffffff94
    8e80:			; <UNDEFINED> instruction: 0xffffff94
    8e84:			; <UNDEFINED> instruction: 0xffffff94
    8e88:			; <UNDEFINED> instruction: 0xffffff94
    8e8c:			; <UNDEFINED> instruction: 0xffffff94
    8e90:			; <UNDEFINED> instruction: 0xffffff94
    8e94:			; <UNDEFINED> instruction: 0xffffff94
    8e98:			; <UNDEFINED> instruction: 0xffffff94
    8e9c:			; <UNDEFINED> instruction: 0xffffff94
    8ea0:			; <UNDEFINED> instruction: 0xffffff94
    8ea4:			; <UNDEFINED> instruction: 0xffffff94
    8ea8:			; <UNDEFINED> instruction: 0xffffff94
    8eac:			; <UNDEFINED> instruction: 0xffffff94
    8eb0:			; <UNDEFINED> instruction: 0xffffff94
    8eb4:			; <UNDEFINED> instruction: 0xffffff94
    8eb8:			; <UNDEFINED> instruction: 0xffffff94
    8ebc:			; <UNDEFINED> instruction: 0xffffff94
    8ec0:			; <UNDEFINED> instruction: 0xffffff94
    8ec4:			; <UNDEFINED> instruction: 0xffffff94
    8ec8:			; <UNDEFINED> instruction: 0xffffff94
    8ecc:			; <UNDEFINED> instruction: 0xffffff94
    8ed0:			; <UNDEFINED> instruction: 0xffffff94
    8ed4:			; <UNDEFINED> instruction: 0xffffff94
    8ed8:			; <UNDEFINED> instruction: 0xffffff94
    8edc:			; <UNDEFINED> instruction: 0xffffff94
    8ee0:			; <UNDEFINED> instruction: 0xffffff94
    8ee4:			; <UNDEFINED> instruction: 0xffffff94
    8ee8:			; <UNDEFINED> instruction: 0xffffff94
    8eec:			; <UNDEFINED> instruction: 0xffffff94
    8ef0:			; <UNDEFINED> instruction: 0xffffff94
    8ef4:			; <UNDEFINED> instruction: 0xffffff94
    8ef8:			; <UNDEFINED> instruction: 0xffffff94
    8efc:			; <UNDEFINED> instruction: 0xffffff94
    8f00:			; <UNDEFINED> instruction: 0xffffff94
    8f04:			; <UNDEFINED> instruction: 0xffffff94
    8f08:			; <UNDEFINED> instruction: 0xffffff94
    8f0c:			; <UNDEFINED> instruction: 0xffffff94
    8f10:			; <UNDEFINED> instruction: 0xffffff94
    8f14:			; <UNDEFINED> instruction: 0xffffff94
    8f18:			; <UNDEFINED> instruction: 0xffffff94
    8f1c:			; <UNDEFINED> instruction: 0xffffff94
    8f20:			; <UNDEFINED> instruction: 0xffffff94
    8f24:			; <UNDEFINED> instruction: 0xffffff94
    8f28:			; <UNDEFINED> instruction: 0xffffff94
    8f2c:			; <UNDEFINED> instruction: 0x000007b8
    8f30:			; <UNDEFINED> instruction: 0x000007b8
    8f34:			; <UNDEFINED> instruction: 0xffffff94
    8f38:			; <UNDEFINED> instruction: 0xffffff94
    8f3c:			; <UNDEFINED> instruction: 0xffffff94
    8f40:			; <UNDEFINED> instruction: 0xffffff94
    8f44:			; <UNDEFINED> instruction: 0xffffff94
    8f48:			; <UNDEFINED> instruction: 0xffffff94
    8f4c:			; <UNDEFINED> instruction: 0xffffff94
    8f50:			; <UNDEFINED> instruction: 0xffffff94
    8f54:			; <UNDEFINED> instruction: 0xffffff94
    8f58:			; <UNDEFINED> instruction: 0xffffff94
    8f5c:			; <UNDEFINED> instruction: 0xffffff94
    8f60:			; <UNDEFINED> instruction: 0xffffff94
    8f64:			; <UNDEFINED> instruction: 0xffffff94
    8f68:			; <UNDEFINED> instruction: 0xffffff94
    8f6c:			; <UNDEFINED> instruction: 0xffffff94
    8f70:			; <UNDEFINED> instruction: 0xffffff94
    8f74:			; <UNDEFINED> instruction: 0xffffff94
    8f78:			; <UNDEFINED> instruction: 0xffffff94
    8f7c:			; <UNDEFINED> instruction: 0xffffff94
    8f80:			; <UNDEFINED> instruction: 0xffffff94
    8f84:			; <UNDEFINED> instruction: 0xffffff94
    8f88:			; <UNDEFINED> instruction: 0xffffff94
    8f8c:			; <UNDEFINED> instruction: 0xffffff94
    8f90:			; <UNDEFINED> instruction: 0xffffff94
    8f94:			; <UNDEFINED> instruction: 0xffffff94
    8f98:			; <UNDEFINED> instruction: 0xffffff94
    8f9c:			; <UNDEFINED> instruction: 0xffffff94
    8fa0:			; <UNDEFINED> instruction: 0xffffff94
    8fa4:			; <UNDEFINED> instruction: 0xffffff94
    8fa8:			; <UNDEFINED> instruction: 0xffffff94
    8fac:			; <UNDEFINED> instruction: 0xffffff94
    8fb0:			; <UNDEFINED> instruction: 0xffffff94
    8fb4:			; <UNDEFINED> instruction: 0xffffff94
    8fb8:			; <UNDEFINED> instruction: 0xffffff94
    8fbc:			; <UNDEFINED> instruction: 0xffffff94
    8fc0:			; <UNDEFINED> instruction: 0xffffff94
    8fc4:			; <UNDEFINED> instruction: 0xffffff94
    8fc8:			; <UNDEFINED> instruction: 0xffffff94
    8fcc:			; <UNDEFINED> instruction: 0xffffff94
    8fd0:			; <UNDEFINED> instruction: 0xffffff94
    8fd4:			; <UNDEFINED> instruction: 0xffffff94
    8fd8:			; <UNDEFINED> instruction: 0xffffff94
    8fdc:			; <UNDEFINED> instruction: 0xffffff94
    8fe0:			; <UNDEFINED> instruction: 0xffffff94
    8fe4:			; <UNDEFINED> instruction: 0xffffff94
    8fe8:			; <UNDEFINED> instruction: 0xffffff94
    8fec:			; <UNDEFINED> instruction: 0xffffff94
    8ff0:			; <UNDEFINED> instruction: 0xffffff94
    8ff4:			; <UNDEFINED> instruction: 0xffffff94
    8ff8:			; <UNDEFINED> instruction: 0xffffff94
    8ffc:			; <UNDEFINED> instruction: 0xffffff94
    9000:			; <UNDEFINED> instruction: 0xffffff94
    9004:			; <UNDEFINED> instruction: 0xffffff94
    9008:			; <UNDEFINED> instruction: 0xffffff94
    900c:			; <UNDEFINED> instruction: 0xffffff94
    9010:			; <UNDEFINED> instruction: 0xffffff94
    9014:			; <UNDEFINED> instruction: 0xffffff94
    9018:			; <UNDEFINED> instruction: 0xffffff94
    901c:			; <UNDEFINED> instruction: 0xffffff94
    9020:			; <UNDEFINED> instruction: 0xffffff94
    9024:			; <UNDEFINED> instruction: 0xffffff94
    9028:			; <UNDEFINED> instruction: 0xffffff94
    902c:			; <UNDEFINED> instruction: 0xffffff94
    9030:			; <UNDEFINED> instruction: 0xffffff94
    9034:			; <UNDEFINED> instruction: 0xffffff94
    9038:			; <UNDEFINED> instruction: 0xffffff94
    903c:			; <UNDEFINED> instruction: 0xffffff94
    9040:			; <UNDEFINED> instruction: 0xffffff94
    9044:			; <UNDEFINED> instruction: 0xffffff94
    9048:			; <UNDEFINED> instruction: 0xffffff94
    904c:			; <UNDEFINED> instruction: 0xffffff94
    9050:			; <UNDEFINED> instruction: 0xffffff94
    9054:			; <UNDEFINED> instruction: 0xffffff94
    9058:			; <UNDEFINED> instruction: 0xffffff94
    905c:			; <UNDEFINED> instruction: 0xffffff94
    9060:			; <UNDEFINED> instruction: 0xffffff94
    9064:			; <UNDEFINED> instruction: 0xffffff94
    9068:			; <UNDEFINED> instruction: 0xffffff94
    906c:			; <UNDEFINED> instruction: 0xffffff94
    9070:			; <UNDEFINED> instruction: 0xffffff94
    9074:			; <UNDEFINED> instruction: 0xffffff94
    9078:			; <UNDEFINED> instruction: 0xffffff94
    907c:			; <UNDEFINED> instruction: 0xffffff94
    9080:			; <UNDEFINED> instruction: 0xffffff94
    9084:			; <UNDEFINED> instruction: 0xffffff94
    9088:			; <UNDEFINED> instruction: 0xffffff94
    908c:			; <UNDEFINED> instruction: 0xffffff94
    9090:			; <UNDEFINED> instruction: 0xffffff94
    9094:			; <UNDEFINED> instruction: 0xffffff94
    9098:			; <UNDEFINED> instruction: 0xffffff94
    909c:			; <UNDEFINED> instruction: 0xffffff94
    90a0:			; <UNDEFINED> instruction: 0xffffff94
    90a4:			; <UNDEFINED> instruction: 0xffffff94
    90a8:			; <UNDEFINED> instruction: 0xffffff94
    90ac:			; <UNDEFINED> instruction: 0xffffff94
    90b0:			; <UNDEFINED> instruction: 0xffffff94
    90b4:			; <UNDEFINED> instruction: 0xffffff94
    90b8:			; <UNDEFINED> instruction: 0xffffff94
    90bc:			; <UNDEFINED> instruction: 0xffffff94
    90c0:			; <UNDEFINED> instruction: 0xffffff94
    90c4:			; <UNDEFINED> instruction: 0xffffff94
    90c8:			; <UNDEFINED> instruction: 0xffffff94
    90cc:			; <UNDEFINED> instruction: 0xffffff94
    90d0:			; <UNDEFINED> instruction: 0xffffff94
    90d4:			; <UNDEFINED> instruction: 0xffffff94
    90d8:			; <UNDEFINED> instruction: 0xffffff94
    90dc:			; <UNDEFINED> instruction: 0xffffff94
    90e0:			; <UNDEFINED> instruction: 0xffffff94
    90e4:			; <UNDEFINED> instruction: 0xffffff94
    90e8:			; <UNDEFINED> instruction: 0xffffff94
    90ec:			; <UNDEFINED> instruction: 0xffffff94
    90f0:			; <UNDEFINED> instruction: 0xffffff94
    90f4:			; <UNDEFINED> instruction: 0xffffff94
    90f8:			; <UNDEFINED> instruction: 0xffffff94
    90fc:			; <UNDEFINED> instruction: 0xffffff94
    9100:			; <UNDEFINED> instruction: 0xffffff94
    9104:			; <UNDEFINED> instruction: 0xffffff94
    9108:			; <UNDEFINED> instruction: 0xffffff94
    910c:			; <UNDEFINED> instruction: 0xffffff94
    9110:			; <UNDEFINED> instruction: 0xffffff94
    9114:			; <UNDEFINED> instruction: 0xffffff94
    9118:			; <UNDEFINED> instruction: 0xffffff94
    911c:			; <UNDEFINED> instruction: 0xffffff94
    9120:			; <UNDEFINED> instruction: 0xffffff94
    9124:			; <UNDEFINED> instruction: 0xffffff94
    9128:			; <UNDEFINED> instruction: 0x000007b8
    912c:			; <UNDEFINED> instruction: 0x000007b8
    9130:			; <UNDEFINED> instruction: 0x000007b8
    9134:			; <UNDEFINED> instruction: 0x000007b8
    9138:			; <UNDEFINED> instruction: 0xffffff94
    913c:			; <UNDEFINED> instruction: 0xffffff94
    9140:			; <UNDEFINED> instruction: 0xffffff94
    9144:			; <UNDEFINED> instruction: 0xffffff94
    9148:			; <UNDEFINED> instruction: 0xffffff94
    914c:			; <UNDEFINED> instruction: 0xffffff94
    9150:			; <UNDEFINED> instruction: 0xffffff94
    9154:			; <UNDEFINED> instruction: 0xffffff94
    9158:			; <UNDEFINED> instruction: 0xffffff94
    915c:			; <UNDEFINED> instruction: 0xffffff94
    9160:			; <UNDEFINED> instruction: 0xffffff94
    9164:			; <UNDEFINED> instruction: 0xffffff94
    9168:			; <UNDEFINED> instruction: 0xffffff94
    916c:			; <UNDEFINED> instruction: 0xffffff94
    9170:			; <UNDEFINED> instruction: 0xffffff94
    9174:			; <UNDEFINED> instruction: 0xffffff94
    9178:			; <UNDEFINED> instruction: 0xffffff94
    917c:			; <UNDEFINED> instruction: 0xffffff94
    9180:			; <UNDEFINED> instruction: 0xffffff94
    9184:			; <UNDEFINED> instruction: 0xffffff94
    9188:			; <UNDEFINED> instruction: 0xffffff94
    918c:			; <UNDEFINED> instruction: 0xffffff94
    9190:			; <UNDEFINED> instruction: 0xffffff94
    9194:			; <UNDEFINED> instruction: 0xffffff94
    9198:			; <UNDEFINED> instruction: 0xffffff94
    919c:			; <UNDEFINED> instruction: 0xffffff94
    91a0:			; <UNDEFINED> instruction: 0xffffff94
    91a4:			; <UNDEFINED> instruction: 0xffffff94
    91a8:			; <UNDEFINED> instruction: 0xffffff94
    91ac:			; <UNDEFINED> instruction: 0xffffff94
    91b0:			; <UNDEFINED> instruction: 0xffffff94
    91b4:			; <UNDEFINED> instruction: 0xffffff94
    91b8:			; <UNDEFINED> instruction: 0xffffff94
    91bc:			; <UNDEFINED> instruction: 0xffffff94
    91c0:			; <UNDEFINED> instruction: 0xffffff94
    91c4:			; <UNDEFINED> instruction: 0xffffff94
    91c8:			; <UNDEFINED> instruction: 0xffffff94
    91cc:			; <UNDEFINED> instruction: 0xffffff94
    91d0:			; <UNDEFINED> instruction: 0xffffff94
    91d4:			; <UNDEFINED> instruction: 0xffffff94
    91d8:			; <UNDEFINED> instruction: 0xffffff94
    91dc:			; <UNDEFINED> instruction: 0xffffff94
    91e0:			; <UNDEFINED> instruction: 0xffffff94
    91e4:			; <UNDEFINED> instruction: 0xffffff94
    91e8:			; <UNDEFINED> instruction: 0xffffff94
    91ec:			; <UNDEFINED> instruction: 0xffffff94
    91f0:			; <UNDEFINED> instruction: 0xffffff94
    91f4:			; <UNDEFINED> instruction: 0xffffff94
    91f8:			; <UNDEFINED> instruction: 0xffffff94
    91fc:			; <UNDEFINED> instruction: 0xffffff94
    9200:			; <UNDEFINED> instruction: 0xffffff94
    9204:			; <UNDEFINED> instruction: 0xffffff94
    9208:			; <UNDEFINED> instruction: 0xffffff94
    920c:			; <UNDEFINED> instruction: 0xffffff94
    9210:			; <UNDEFINED> instruction: 0xffffff94
    9214:			; <UNDEFINED> instruction: 0xffffff94
    9218:			; <UNDEFINED> instruction: 0xffffff94
    921c:			; <UNDEFINED> instruction: 0xffffff94
    9220:			; <UNDEFINED> instruction: 0xffffff94
    9224:			; <UNDEFINED> instruction: 0xffffff94
    9228:			; <UNDEFINED> instruction: 0xffffff94
    922c:			; <UNDEFINED> instruction: 0xffffff94
    9230:			; <UNDEFINED> instruction: 0xffffff94
    9234:			; <UNDEFINED> instruction: 0xffffff94
    9238:			; <UNDEFINED> instruction: 0xffffff94
    923c:			; <UNDEFINED> instruction: 0xffffff94
    9240:			; <UNDEFINED> instruction: 0xffffff94
    9244:			; <UNDEFINED> instruction: 0xffffff94
    9248:			; <UNDEFINED> instruction: 0xffffff94
    924c:			; <UNDEFINED> instruction: 0xffffff94
    9250:			; <UNDEFINED> instruction: 0xffffff94
    9254:			; <UNDEFINED> instruction: 0xffffff94
    9258:			; <UNDEFINED> instruction: 0xffffff94
    925c:			; <UNDEFINED> instruction: 0xffffff94
    9260:			; <UNDEFINED> instruction: 0xffffff94
    9264:			; <UNDEFINED> instruction: 0xffffff94
    9268:			; <UNDEFINED> instruction: 0xffffff94
    926c:			; <UNDEFINED> instruction: 0xffffff94
    9270:			; <UNDEFINED> instruction: 0xffffff94
    9274:			; <UNDEFINED> instruction: 0xffffff94
    9278:			; <UNDEFINED> instruction: 0xffffff94
    927c:			; <UNDEFINED> instruction: 0xffffff94
    9280:			; <UNDEFINED> instruction: 0xffffff94
    9284:			; <UNDEFINED> instruction: 0xffffff94
    9288:			; <UNDEFINED> instruction: 0xffffff94
    928c:			; <UNDEFINED> instruction: 0xffffff94
    9290:			; <UNDEFINED> instruction: 0xffffff94
    9294:			; <UNDEFINED> instruction: 0xffffff94
    9298:			; <UNDEFINED> instruction: 0xffffff94
    929c:			; <UNDEFINED> instruction: 0xffffff94
    92a0:			; <UNDEFINED> instruction: 0xffffff94
    92a4:			; <UNDEFINED> instruction: 0xffffff94
    92a8:			; <UNDEFINED> instruction: 0xffffff94
    92ac:			; <UNDEFINED> instruction: 0xffffff94
    92b0:			; <UNDEFINED> instruction: 0xffffff94
    92b4:			; <UNDEFINED> instruction: 0xffffff94
    92b8:			; <UNDEFINED> instruction: 0xffffff94
    92bc:			; <UNDEFINED> instruction: 0xffffff94
    92c0:			; <UNDEFINED> instruction: 0xffffff94
    92c4:			; <UNDEFINED> instruction: 0xffffff94
    92c8:			; <UNDEFINED> instruction: 0xffffff94
    92cc:			; <UNDEFINED> instruction: 0xffffff94
    92d0:			; <UNDEFINED> instruction: 0xffffff94
    92d4:			; <UNDEFINED> instruction: 0xffffff94
    92d8:			; <UNDEFINED> instruction: 0xffffff94
    92dc:			; <UNDEFINED> instruction: 0xffffff94
    92e0:			; <UNDEFINED> instruction: 0xffffff94
    92e4:			; <UNDEFINED> instruction: 0xffffff94
    92e8:			; <UNDEFINED> instruction: 0xffffff94
    92ec:			; <UNDEFINED> instruction: 0xffffff94
    92f0:			; <UNDEFINED> instruction: 0xffffff94
    92f4:			; <UNDEFINED> instruction: 0xffffff94
    92f8:			; <UNDEFINED> instruction: 0xffffff94
    92fc:			; <UNDEFINED> instruction: 0xffffff94
    9300:			; <UNDEFINED> instruction: 0xffffff94
    9304:			; <UNDEFINED> instruction: 0xffffff94
    9308:			; <UNDEFINED> instruction: 0xffffff94
    930c:			; <UNDEFINED> instruction: 0xffffff94
    9310:			; <UNDEFINED> instruction: 0xffffff94
    9314:			; <UNDEFINED> instruction: 0xffffff94
    9318:			; <UNDEFINED> instruction: 0xffffff94
    931c:			; <UNDEFINED> instruction: 0xffffff94
    9320:			; <UNDEFINED> instruction: 0xffffff94
    9324:			; <UNDEFINED> instruction: 0xffffff94
    9328:			; <UNDEFINED> instruction: 0xffffff94
    932c:			; <UNDEFINED> instruction: 0xffffff94
    9330:			; <UNDEFINED> instruction: 0x000007b8
    9334:	cmp	lr, #2432	; 0x980
    9338:	bge	93f4 <lell_packet_is_data@@Base+0x83c>
    933c:	movw	r5, #2036	; 0x7f4
    9340:	sub	r5, lr, r5
    9344:	cmp	r5, #28
    9348:	bcc	94e8 <lell_packet_is_data@@Base+0x930>
    934c:	movw	r5, #2302	; 0x8fe
    9350:	sub	r5, lr, r5
    9354:	cmp	r5, #4
    9358:	bcc	94e8 <lell_packet_is_data@@Base+0x930>
    935c:	cmp	lr, #2176	; 0x880
    9360:	beq	94e8 <lell_packet_is_data@@Base+0x930>
    9364:	b	8cc4 <lell_packet_is_data@@Base+0x10c>
    9368:	cmp	lr, #1152	; 0x480
    936c:	bge	93c4 <lell_packet_is_data@@Base+0x80c>
    9370:	sub	r6, lr, #1016	; 0x3f8
    9374:	cmp	r6, #15
    9378:	bhi	9384 <lell_packet_is_data@@Base+0x7cc>
    937c:	cmp	r6, #9
    9380:	bne	94e8 <lell_packet_is_data@@Base+0x930>
    9384:	movw	r5, #766	; 0x2fe
    9388:	sub	r5, lr, r5
    938c:	cmp	r5, #4
    9390:	bcc	94e8 <lell_packet_is_data@@Base+0x930>
    9394:	cmp	lr, #896	; 0x380
    9398:	beq	94e8 <lell_packet_is_data@@Base+0x930>
    939c:	b	8cc4 <lell_packet_is_data@@Base+0x10c>
    93a0:	cmp	lr, #4064	; 0xfe0
    93a4:	blt	94d8 <lell_packet_is_data@@Base+0x920>
    93a8:	sub	r6, lr, #4064	; 0xfe0
    93ac:	cmp	r6, #31
    93b0:	bhi	8cc4 <lell_packet_is_data@@Base+0x10c>
    93b4:	mov	r5, #1
    93b8:	tst	r7, r5, lsl r6
    93bc:	addne	r0, r0, #1
    93c0:	b	8cc4 <lell_packet_is_data@@Base+0x10c>
    93c4:	movw	r5, #1531	; 0x5fb
    93c8:	cmp	lr, r5
    93cc:	ble	9490 <lell_packet_is_data@@Base+0x8d8>
    93d0:	cmp	lr, #1664	; 0x680
    93d4:	bge	94b4 <lell_packet_is_data@@Base+0x8fc>
    93d8:	movw	r5, #1532	; 0x5fc
    93dc:	sub	r6, lr, r5
    93e0:	cmp	r6, #7
    93e4:	bhi	8cc4 <lell_packet_is_data@@Base+0x10c>
    93e8:	cmp	r6, #4
    93ec:	bne	94e8 <lell_packet_is_data@@Base+0x930>
    93f0:	b	8cc4 <lell_packet_is_data@@Base+0x10c>
    93f4:	cmp	lr, #2688	; 0xa80
    93f8:	bge	944c <lell_packet_is_data@@Base+0x894>
    93fc:	movw	r5, #2556	; 0x9fc
    9400:	sub	r6, lr, r5
    9404:	cmp	r6, #7
    9408:	bhi	9414 <lell_packet_is_data@@Base+0x85c>
    940c:	cmp	r6, #4
    9410:	bne	94e8 <lell_packet_is_data@@Base+0x930>
    9414:	cmp	lr, #2432	; 0x980
    9418:	beq	94e8 <lell_packet_is_data@@Base+0x930>
    941c:	b	8cc4 <lell_packet_is_data@@Base+0x10c>
    9420:	movw	r5, #3580	; 0xdfc
    9424:	sub	r5, lr, r5
    9428:	cmp	r5, #8
    942c:	bcc	94e8 <lell_packet_is_data@@Base+0x930>
    9430:	movw	r5, #3326	; 0xcfe
    9434:	sub	r5, lr, r5
    9438:	cmp	r5, #4
    943c:	bcc	94e8 <lell_packet_is_data@@Base+0x930>
    9440:	cmp	lr, #3456	; 0xd80
    9444:	beq	94e8 <lell_packet_is_data@@Base+0x930>
    9448:	b	8cc4 <lell_packet_is_data@@Base+0x10c>
    944c:	movw	r5, #2814	; 0xafe
    9450:	sub	r5, lr, r5
    9454:	cmp	r5, #4
    9458:	bcc	94e8 <lell_packet_is_data@@Base+0x930>
    945c:	cmp	lr, #2688	; 0xa80
    9460:	beq	94e8 <lell_packet_is_data@@Base+0x930>
    9464:	cmp	lr, #2944	; 0xb80
    9468:	beq	94e8 <lell_packet_is_data@@Base+0x930>
    946c:	b	8cc4 <lell_packet_is_data@@Base+0x10c>
    9470:	sub	r9, lr, #508	; 0x1fc
    9474:	cmp	r9, #7
    9478:	bhi	9484 <lell_packet_is_data@@Base+0x8cc>
    947c:	cmp	r9, #4
    9480:	bne	94e8 <lell_packet_is_data@@Base+0x930>
    9484:	cmp	lr, #640	; 0x280
    9488:	beq	94e8 <lell_packet_is_data@@Base+0x930>
    948c:	b	8cc4 <lell_packet_is_data@@Base+0x10c>
    9490:	movw	r5, #1278	; 0x4fe
    9494:	sub	r5, lr, r5
    9498:	cmp	r5, #4
    949c:	bcc	94e8 <lell_packet_is_data@@Base+0x930>
    94a0:	cmp	lr, #1152	; 0x480
    94a4:	beq	94e8 <lell_packet_is_data@@Base+0x930>
    94a8:	cmp	lr, #1408	; 0x580
    94ac:	beq	94e8 <lell_packet_is_data@@Base+0x930>
    94b0:	b	8cc4 <lell_packet_is_data@@Base+0x10c>
    94b4:	movw	r5, #1790	; 0x6fe
    94b8:	sub	r5, lr, r5
    94bc:	cmp	r5, #4
    94c0:	bcc	94e8 <lell_packet_is_data@@Base+0x930>
    94c4:	cmp	lr, #1664	; 0x680
    94c8:	beq	94e8 <lell_packet_is_data@@Base+0x930>
    94cc:	cmp	lr, #1920	; 0x780
    94d0:	beq	94e8 <lell_packet_is_data@@Base+0x930>
    94d4:	b	8cc4 <lell_packet_is_data@@Base+0x10c>
    94d8:	movw	r5, #3838	; 0xefe
    94dc:	sub	r5, lr, r5
    94e0:	cmp	r5, #4
    94e4:	bcs	94f0 <lell_packet_is_data@@Base+0x938>
    94e8:	add	r0, r0, #1
    94ec:	b	8cc4 <lell_packet_is_data@@Base+0x10c>
    94f0:	cmp	lr, #3712	; 0xe80
    94f4:	beq	94e8 <lell_packet_is_data@@Base+0x930>
    94f8:	cmp	lr, #3968	; 0xf80
    94fc:	beq	94e8 <lell_packet_is_data@@Base+0x930>
    9500:	b	8cc4 <lell_packet_is_data@@Base+0x10c>
    9504:	andeq	r6, r0, r3, ror #3
    9508:	andeq	r5, r0, sl, ror sp
    950c:	andeq	r6, r0, r7, asr #4
    9510:	push	{fp, lr}
    9514:	mov	fp, sp
    9518:	movw	r1, #48854	; 0xbed6
    951c:	movt	r1, #36489	; 0x8e89
    9520:	eor	r0, r0, r1
    9524:	bl	a1d8 <lell_print@@Base+0xc34>
    9528:	sub	r0, r0, #1
    952c:	clz	r0, r0
    9530:	lsr	r0, r0, #5
    9534:	pop	{fp, pc}

00009538 <lell_get_access_address@@Base>:
    9538:	ldr	r0, [r0, #64]	; 0x40
    953c:	bx	lr

00009540 <lell_get_access_address_offenses@@Base>:
    9540:	ldr	r0, [r0, #92]	; 0x5c
    9544:	bx	lr

00009548 <lell_get_channel_index@@Base>:
    9548:	ldrb	r0, [r0, #68]	; 0x44
    954c:	bx	lr

00009550 <lell_get_channel_k@@Base>:
    9550:	ldrb	r0, [r0, #69]	; 0x45
    9554:	bx	lr

00009558 <lell_get_adv_type_str@@Base>:
    9558:	push	{r4, sl, fp, lr}
    955c:	add	fp, sp, #8
    9560:	mov	r4, r0
    9564:	bl	4630 <lell_packet_is_data@plt>
    9568:	mov	r1, r0
    956c:	mov	r0, #0
    9570:	cmp	r1, #0
    9574:	popne	{r4, sl, fp, pc}
    9578:	ldrb	r0, [r4, #80]	; 0x50
    957c:	cmp	r0, #6
    9580:	ldrhi	r0, [pc, #20]	; 959c <lell_get_adv_type_str@@Base+0x44>
    9584:	addhi	r0, pc, r0
    9588:	pophi	{r4, sl, fp, pc}
    958c:	ldr	r1, [pc, #12]	; 95a0 <lell_get_adv_type_str@@Base+0x48>
    9590:	add	r1, pc, r1
    9594:	ldr	r0, [r1, r0, lsl #2]
    9598:	pop	{r4, sl, fp, pc}
    959c:	muleq	r0, ip, r0
    95a0:	andeq	fp, r1, r8, ror r8

000095a4 <lell_print@@Base>:
    95a4:	push	{r4, r5, r6, r7, fp, lr}
    95a8:	add	fp, sp, #16
    95ac:	mov	r4, r0
    95b0:	bl	4630 <lell_packet_is_data@plt>
    95b4:	cmp	r0, #0
    95b8:	beq	9670 <lell_print@@Base+0xcc>
    95bc:	ldrb	r0, [r4, #100]	; 0x64
    95c0:	ldr	r1, [pc, #1056]	; 99e8 <lell_print@@Base+0x444>
    95c4:	add	r1, pc, r1
    95c8:	ldr	r2, [pc, #1052]	; 99ec <lell_print@@Base+0x448>
    95cc:	add	r2, pc, r2
    95d0:	tst	r0, #1
    95d4:	moveq	r2, r1
    95d8:	ldrb	r5, [r4, #4]
    95dc:	ldr	r3, [r4, #72]	; 0x48
    95e0:	ldr	r1, [r4, #64]	; 0x40
    95e4:	ldr	r0, [pc, #1028]	; 99f0 <lell_print@@Base+0x44c>
    95e8:	add	r0, pc, r0
    95ec:	bl	4618 <printf@plt>
    95f0:	ldrb	r1, [r4, #68]	; 0x44
    95f4:	ldr	r0, [pc, #1016]	; 99f4 <lell_print@@Base+0x450>
    95f8:	add	r0, pc, r0
    95fc:	bl	4618 <printf@plt>
    9600:	and	r5, r5, #3
    9604:	ldr	r0, [pc, #1004]	; 99f8 <lell_print@@Base+0x454>
    9608:	add	r0, pc, r0
    960c:	ldr	r2, [r0, r5, lsl #2]
    9610:	ldr	r0, [pc, #996]	; 99fc <lell_print@@Base+0x458>
    9614:	add	r0, pc, r0
    9618:	mov	r1, r5
    961c:	bl	4618 <printf@plt>
    9620:	ldrb	r0, [r4, #4]
    9624:	ubfx	r1, r0, #2, #1
    9628:	ubfx	r2, r0, #3, #1
    962c:	ubfx	r3, r0, #4, #1
    9630:	ldr	r0, [pc, #968]	; 9a00 <lell_print@@Base+0x45c>
    9634:	add	r0, pc, r0
    9638:	bl	4618 <printf@plt>
    963c:	cmp	r5, #3
    9640:	bne	9840 <lell_print@@Base+0x29c>
    9644:	ldrb	r1, [r4, #6]
    9648:	cmp	r1, #20
    964c:	mov	r0, r1
    9650:	movcs	r0, #20
    9654:	ldr	r2, [pc, #936]	; 9a04 <lell_print@@Base+0x460>
    9658:	add	r2, pc, r2
    965c:	ldr	r2, [r2, r0, lsl #2]
    9660:	ldr	r0, [pc, #928]	; 9a08 <lell_print@@Base+0x464>
    9664:	add	r0, pc, r0
    9668:	bl	4618 <printf@plt>
    966c:	b	9840 <lell_print@@Base+0x29c>
    9670:	ldrb	r0, [r4, #100]	; 0x64
    9674:	ldr	r1, [pc, #912]	; 9a0c <lell_print@@Base+0x468>
    9678:	add	r1, pc, r1
    967c:	ldr	r2, [pc, #908]	; 9a10 <lell_print@@Base+0x46c>
    9680:	add	r2, pc, r2
    9684:	tst	r0, #1
    9688:	moveq	r2, r1
    968c:	ldr	r1, [r4, #64]	; 0x40
    9690:	ldr	r3, [r4, #72]	; 0x48
    9694:	ldr	r0, [pc, #888]	; 9a14 <lell_print@@Base+0x470>
    9698:	add	r0, pc, r0
    969c:	bl	4618 <printf@plt>
    96a0:	ldrb	r1, [r4, #68]	; 0x44
    96a4:	ldr	r0, [pc, #876]	; 9a18 <lell_print@@Base+0x474>
    96a8:	add	r0, pc, r0
    96ac:	bl	4618 <printf@plt>
    96b0:	mov	r0, r4
    96b4:	bl	47bc <lell_get_adv_type_str@plt>
    96b8:	mov	r1, r0
    96bc:	ldr	r0, [pc, #856]	; 9a1c <lell_print@@Base+0x478>
    96c0:	add	r0, pc, r0
    96c4:	bl	4618 <printf@plt>
    96c8:	ldrb	r0, [r4, #80]	; 0x50
    96cc:	cmp	r0, #6
    96d0:	bhi	9840 <lell_print@@Base+0x29c>
    96d4:	add	r1, pc, #4
    96d8:	ldr	r0, [r1, r0, lsl #2]
    96dc:	add	pc, r1, r0
    96e0:	andeq	r0, r0, ip, lsl r0
    96e4:	andeq	r0, r0, ip, lsl #1
    96e8:	andeq	r0, r0, ip, lsl r0
    96ec:	andeq	r0, r0, r0, lsr r1
    96f0:	strheq	r0, [r0], -r4
    96f4:	andeq	r0, r0, r0, lsl #4
    96f8:	andeq	r0, r0, ip, lsl r0
    96fc:	ldr	r3, [r4, #84]	; 0x54
    9700:	ldr	r0, [pc, #792]	; 9a20 <lell_print@@Base+0x47c>
    9704:	add	r0, pc, r0
    9708:	mov	r1, r4
    970c:	mov	r2, #6
    9710:	bl	9a84 <lell_print@@Base+0x4e0>
    9714:	ldr	r0, [r4, #72]	; 0x48
    9718:	cmp	r0, #7
    971c:	blt	9840 <lell_print@@Base+0x29c>
    9720:	ldr	r0, [pc, #764]	; 9a24 <lell_print@@Base+0x480>
    9724:	add	r0, pc, r0
    9728:	bl	4618 <printf@plt>
    972c:	ldr	r0, [r4, #72]	; 0x48
    9730:	cmp	r0, #7
    9734:	blt	97f4 <lell_print@@Base+0x250>
    9738:	add	r6, r4, #12
    973c:	mov	r7, #0
    9740:	ldr	r5, [pc, #736]	; 9a28 <lell_print@@Base+0x484>
    9744:	add	r5, pc, r5
    9748:	ldrb	r1, [r6, r7]
    974c:	mov	r0, r5
    9750:	bl	4618 <printf@plt>
    9754:	add	r7, r7, #1
    9758:	ldr	r0, [r4, #72]	; 0x48
    975c:	sub	r0, r0, #6
    9760:	cmp	r7, r0
    9764:	blt	9748 <lell_print@@Base+0x1a4>
    9768:	b	97f4 <lell_print@@Base+0x250>
    976c:	ldr	r3, [r4, #84]	; 0x54
    9770:	ldr	r0, [pc, #692]	; 9a2c <lell_print@@Base+0x488>
    9774:	add	r0, pc, r0
    9778:	mov	r1, r4
    977c:	mov	r2, #6
    9780:	bl	9a84 <lell_print@@Base+0x4e0>
    9784:	ldr	r3, [r4, #88]	; 0x58
    9788:	ldr	r0, [pc, #672]	; 9a30 <lell_print@@Base+0x48c>
    978c:	add	r0, pc, r0
    9790:	b	9834 <lell_print@@Base+0x290>
    9794:	ldr	r3, [r4, #84]	; 0x54
    9798:	ldr	r0, [pc, #668]	; 9a3c <lell_print@@Base+0x498>
    979c:	add	r0, pc, r0
    97a0:	mov	r1, r4
    97a4:	mov	r2, #6
    97a8:	bl	9a84 <lell_print@@Base+0x4e0>
    97ac:	ldr	r0, [pc, #652]	; 9a40 <lell_print@@Base+0x49c>
    97b0:	add	r0, pc, r0
    97b4:	bl	4618 <printf@plt>
    97b8:	ldr	r0, [r4, #72]	; 0x48
    97bc:	cmp	r0, #7
    97c0:	blt	97f4 <lell_print@@Base+0x250>
    97c4:	add	r6, r4, #12
    97c8:	mov	r7, #0
    97cc:	ldr	r5, [pc, #624]	; 9a44 <lell_print@@Base+0x4a0>
    97d0:	add	r5, pc, r5
    97d4:	ldrb	r1, [r6, r7]
    97d8:	mov	r0, r5
    97dc:	bl	4618 <printf@plt>
    97e0:	add	r7, r7, #1
    97e4:	ldr	r0, [r4, #72]	; 0x48
    97e8:	sub	r0, r0, #6
    97ec:	cmp	r7, r0
    97f0:	blt	97d4 <lell_print@@Base+0x230>
    97f4:	mov	r0, #10
    97f8:	bl	48e8 <putchar@plt>
    97fc:	ldr	r1, [r4, #72]	; 0x48
    9800:	add	r0, r4, #12
    9804:	sub	r1, r1, #6
    9808:	bl	9b0c <lell_print@@Base+0x568>
    980c:	b	9840 <lell_print@@Base+0x29c>
    9810:	ldr	r3, [r4, #84]	; 0x54
    9814:	ldr	r0, [pc, #536]	; 9a34 <lell_print@@Base+0x490>
    9818:	add	r0, pc, r0
    981c:	mov	r1, r4
    9820:	mov	r2, #6
    9824:	bl	9a84 <lell_print@@Base+0x4e0>
    9828:	ldr	r3, [r4, #88]	; 0x58
    982c:	ldr	r0, [pc, #516]	; 9a38 <lell_print@@Base+0x494>
    9830:	add	r0, pc, r0
    9834:	mov	r1, r4
    9838:	mov	r2, #12
    983c:	bl	9a84 <lell_print@@Base+0x4e0>
    9840:	mov	r0, #10
    9844:	bl	48e8 <putchar@plt>
    9848:	ldr	r0, [pc, #548]	; 9a74 <lell_print@@Base+0x4d0>
    984c:	add	r0, pc, r0
    9850:	bl	4618 <printf@plt>
    9854:	ldr	r0, [r4, #72]	; 0x48
    9858:	cmp	r0, #1
    985c:	blt	9890 <lell_print@@Base+0x2ec>
    9860:	mov	r6, #6
    9864:	ldr	r5, [pc, #524]	; 9a78 <lell_print@@Base+0x4d4>
    9868:	add	r5, pc, r5
    986c:	ldrb	r1, [r4, r6]
    9870:	mov	r0, r5
    9874:	bl	4618 <printf@plt>
    9878:	add	r0, r6, #1
    987c:	ldr	r1, [r4, #72]	; 0x48
    9880:	add	r1, r1, #5
    9884:	cmp	r6, r1
    9888:	mov	r6, r0
    988c:	blt	986c <lell_print@@Base+0x2c8>
    9890:	mov	r0, #10
    9894:	bl	48e8 <putchar@plt>
    9898:	ldr	r0, [pc, #476]	; 9a7c <lell_print@@Base+0x4d8>
    989c:	add	r0, pc, r0
    98a0:	bl	4618 <printf@plt>
    98a4:	add	r6, r4, #6
    98a8:	mov	r7, #0
    98ac:	ldr	r5, [pc, #460]	; 9a80 <lell_print@@Base+0x4dc>
    98b0:	add	r5, pc, r5
    98b4:	ldr	r0, [r4, #72]	; 0x48
    98b8:	add	r0, r6, r0
    98bc:	ldrb	r1, [r0, -r7]
    98c0:	mov	r0, r5
    98c4:	bl	4618 <printf@plt>
    98c8:	sub	r7, r7, #1
    98cc:	cmn	r7, #3
    98d0:	bne	98b4 <lell_print@@Base+0x310>
    98d4:	mov	r0, #10
    98d8:	pop	{r4, r5, r6, r7, fp, lr}
    98dc:	b	48e8 <putchar@plt>
    98e0:	ldr	r3, [r4, #84]	; 0x54
    98e4:	ldr	r0, [pc, #348]	; 9a48 <lell_print@@Base+0x4a4>
    98e8:	add	r0, pc, r0
    98ec:	mov	r1, r4
    98f0:	mov	r2, #6
    98f4:	bl	9a84 <lell_print@@Base+0x4e0>
    98f8:	ldr	r3, [r4, #88]	; 0x58
    98fc:	ldr	r0, [pc, #328]	; 9a4c <lell_print@@Base+0x4a8>
    9900:	add	r0, pc, r0
    9904:	mov	r1, r4
    9908:	mov	r2, #12
    990c:	bl	9a84 <lell_print@@Base+0x4e0>
    9910:	mov	r0, r4
    9914:	bl	a138 <lell_print@@Base+0xb94>
    9918:	mov	r0, r4
    991c:	bl	a158 <lell_print@@Base+0xbb4>
    9920:	mov	r0, r4
    9924:	bl	a18c <lell_print@@Base+0xbe8>
    9928:	ldr	r0, [pc, #288]	; 9a50 <lell_print@@Base+0x4ac>
    992c:	add	r0, pc, r0
    9930:	mov	r1, r4
    9934:	mov	r2, #26
    9938:	bl	a1b0 <lell_print@@Base+0xc0c>
    993c:	ldr	r0, [pc, #272]	; 9a54 <lell_print@@Base+0x4b0>
    9940:	add	r0, pc, r0
    9944:	mov	r1, r4
    9948:	mov	r2, #28
    994c:	bl	a1b0 <lell_print@@Base+0xc0c>
    9950:	ldr	r0, [pc, #256]	; 9a58 <lell_print@@Base+0x4b4>
    9954:	add	r0, pc, r0
    9958:	mov	r1, r4
    995c:	mov	r2, #30
    9960:	bl	a1b0 <lell_print@@Base+0xc0c>
    9964:	ldr	r0, [pc, #240]	; 9a5c <lell_print@@Base+0x4b8>
    9968:	add	r0, pc, r0
    996c:	mov	r1, r4
    9970:	mov	r2, #32
    9974:	bl	a1b0 <lell_print@@Base+0xc0c>
    9978:	ldr	r0, [pc, #224]	; 9a60 <lell_print@@Base+0x4bc>
    997c:	add	r0, pc, r0
    9980:	bl	4618 <printf@plt>
    9984:	add	r6, r4, #34	; 0x22
    9988:	mov	r7, #0
    998c:	ldr	r5, [pc, #208]	; 9a64 <lell_print@@Base+0x4c0>
    9990:	add	r5, pc, r5
    9994:	ldrb	r1, [r6, -r7]
    9998:	mov	r0, r5
    999c:	bl	4618 <printf@plt>
    99a0:	sub	r7, r7, #1
    99a4:	cmn	r7, #5
    99a8:	bne	9994 <lell_print@@Base+0x3f0>
    99ac:	mov	r0, #10
    99b0:	bl	48e8 <putchar@plt>
    99b4:	ldrb	r0, [r4, #39]	; 0x27
    99b8:	and	r1, r0, #31
    99bc:	ldr	r0, [pc, #164]	; 9a68 <lell_print@@Base+0x4c4>
    99c0:	add	r0, pc, r0
    99c4:	bl	4618 <printf@plt>
    99c8:	ldrb	r0, [r4, #39]	; 0x27
    99cc:	lsr	r1, r0, #5
    99d0:	ldr	r0, [pc, #148]	; 9a6c <lell_print@@Base+0x4c8>
    99d4:	add	r0, pc, r0
    99d8:	ldr	r2, [r0, r1, lsl #2]
    99dc:	ldr	r0, [pc, #140]	; 9a70 <lell_print@@Base+0x4cc>
    99e0:	add	r0, pc, r0
    99e4:	b	9668 <lell_print@@Base+0xc4>
    99e8:	andeq	r5, r0, r1, ror #1
    99ec:	ldrdeq	r5, [r0], -fp
    99f0:	muleq	r0, ip, r0
    99f4:	strheq	r5, [r0], -r5	; <UNPREDICTABLE>
    99f8:	andeq	fp, r1, ip, lsl r8
    99fc:	strheq	r5, [r0], -r0
    9a00:	andeq	r5, r0, r3, lsr #1
    9a04:	ldrdeq	fp, [r1], -ip
    9a08:	strdeq	r5, [r0], -r9
    9a0c:	andeq	r5, r0, sp, lsr #32
    9a10:	andeq	r5, r0, r7, lsr #32
    9a14:	ldrdeq	r5, [r0], -sl
    9a18:	andeq	r5, r0, r5
    9a1c:	ldrdeq	r5, [r0], -r9
    9a20:	andeq	r5, r0, r4, lsr #3
    9a24:	andeq	r5, r0, ip, lsl #3
    9a28:	muleq	r0, r3, r4
    9a2c:	andeq	r5, r0, r4, lsr r1
    9a30:	andeq	r5, r0, r1, lsr r1
    9a34:	andeq	r5, r0, sp, lsr #1
    9a38:	andeq	r5, r0, r8, ror r0
    9a3c:	andeq	r5, r0, ip, lsl #2
    9a40:	andeq	r5, r0, sp, lsl r1
    9a44:	andeq	r5, r0, r7, lsl #8
    9a48:	ldrdeq	r4, [r0], -r5
    9a4c:	andeq	r4, r0, r8, lsr #31
    9a50:	andeq	r4, r0, lr, asr #31
    9a54:	andeq	r4, r0, r6, asr #31
    9a58:			; <UNDEFINED> instruction: 0x00004fbd
    9a5c:			; <UNDEFINED> instruction: 0x00004fb3
    9a60:	andeq	r4, r0, r9, lsr #31
    9a64:	andeq	r5, r0, r7, asr #4
    9a68:	andeq	r4, r0, lr, ror #30
    9a6c:			; <UNDEFINED> instruction: 0x0001b4b4
    9a70:	andeq	r4, r0, fp, asr pc
    9a74:	andeq	r5, r0, r0, lsl #2
    9a78:	andeq	r5, r0, pc, ror #6
    9a7c:	strheq	r5, [r0], -fp
    9a80:	andeq	r5, r0, r7, lsr #6
    9a84:	push	{r4, r5, r6, r7, fp, lr}
    9a88:	add	fp, sp, #16
    9a8c:	mov	r4, r3
    9a90:	mov	r3, r0
    9a94:	add	r6, r1, r2
    9a98:	ldrb	r2, [r6, #5]
    9a9c:	ldr	r0, [pc, #84]	; 9af8 <lell_print@@Base+0x554>
    9aa0:	add	r0, pc, r0
    9aa4:	mov	r1, r3
    9aa8:	bl	4618 <printf@plt>
    9aac:	mov	r7, #4
    9ab0:	ldr	r5, [pc, #68]	; 9afc <lell_print@@Base+0x558>
    9ab4:	add	r5, pc, r5
    9ab8:	ldrb	r1, [r6, r7]
    9abc:	mov	r0, r5
    9ac0:	bl	4618 <printf@plt>
    9ac4:	sub	r7, r7, #1
    9ac8:	cmn	r7, #1
    9acc:	bne	9ab8 <lell_print@@Base+0x514>
    9ad0:	ldr	r0, [pc, #40]	; 9b00 <lell_print@@Base+0x55c>
    9ad4:	add	r0, pc, r0
    9ad8:	ldr	r1, [pc, #36]	; 9b04 <lell_print@@Base+0x560>
    9adc:	add	r1, pc, r1
    9ae0:	cmp	r4, #0
    9ae4:	moveq	r1, r0
    9ae8:	ldr	r0, [pc, #24]	; 9b08 <lell_print@@Base+0x564>
    9aec:	add	r0, pc, r0
    9af0:	pop	{r4, r5, r6, r7, fp, lr}
    9af4:	b	4618 <printf@plt>
    9af8:	andeq	r5, r0, r4, lsl r0
    9afc:	andeq	r5, r0, fp
    9b00:	strdeq	r4, [r0], -pc	; <UNPREDICTABLE>
    9b04:	strdeq	r4, [r0], -r0
    9b08:	ldrdeq	r4, [r0], -r9
    9b0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b10:	add	fp, sp, #28
    9b14:	sub	sp, sp, #4
    9b18:	vpush	{d8}
    9b1c:	sub	sp, sp, #32
    9b20:	cmp	r1, #1
    9b24:	blt	a048 <lell_print@@Base+0xaa4>
    9b28:	mov	r4, r1
    9b2c:	mov	r9, r0
    9b30:	add	r0, r0, #2
    9b34:	str	r0, [sp, #8]
    9b38:	add	r0, r9, #4
    9b3c:	str	r0, [sp, #4]
    9b40:	mov	r8, #0
    9b44:	ldr	r5, [pc, #1356]	; a098 <lell_print@@Base+0xaf4>
    9b48:	add	r5, pc, r5
    9b4c:	vmov.f64	d8, #116	; 0x3fa00000  1.250
    9b50:	str	r1, [sp, #12]
    9b54:	mov	sl, r8
    9b58:	ldrb	r7, [r9, r8]
    9b5c:	add	r1, r8, #1
    9b60:	add	r8, r1, r7
    9b64:	cmp	r8, r4
    9b68:	bgt	a058 <lell_print@@Base+0xab4>
    9b6c:	cmp	r7, #0
    9b70:	beq	a07c <lell_print@@Base+0xad8>
    9b74:	ldrb	r6, [r9, r1]
    9b78:	ldr	r0, [pc, #1308]	; a09c <lell_print@@Base+0xaf8>
    9b7c:	add	r0, pc, r0
    9b80:	mov	r1, r6
    9b84:	bl	4618 <printf@plt>
    9b88:	sub	r0, r6, #1
    9b8c:	cmp	r0, #21
    9b90:	bhi	9c90 <lell_print@@Base+0x6ec>
    9b94:	add	r1, pc, #4
    9b98:	ldr	r0, [r1, r0, lsl #2]
    9b9c:	add	pc, r1, r0
    9ba0:	andeq	r0, r0, r8, asr r0
    9ba4:	andeq	r0, r0, r4, asr #3
    9ba8:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    9bac:	andeq	r0, r0, r4, lsl #3
    9bb0:	andeq	r0, r0, r4, lsl #3
    9bb4:	andeq	r0, r0, r4, lsr #4
    9bb8:	andeq	r0, r0, r4, lsr r2
    9bbc:	andeq	r0, r0, r4, lsl #3
    9bc0:	andeq	r0, r0, r8, ror #4
    9bc4:	andeq	r0, r0, ip, asr #5
    9bc8:	andeq	r0, r0, r4, lsl #3
    9bcc:	andeq	r0, r0, r4, lsl #3
    9bd0:	andeq	r0, r0, r4, lsl #3
    9bd4:	andeq	r0, r0, r4, lsl #3
    9bd8:	andeq	r0, r0, r4, lsl #3
    9bdc:	andeq	r0, r0, r4, lsl #3
    9be0:	andeq	r0, r0, r4, lsl #3
    9be4:	andeq	r0, r0, r4, lsl #6
    9be8:	andeq	r0, r0, r4, lsl #3
    9bec:	andeq	r0, r0, r4, lsl #3
    9bf0:	andeq	r0, r0, r4, lsl #3
    9bf4:	andeq	r0, r0, r0, lsl #7
    9bf8:	ldr	r0, [pc, #1188]	; a0a4 <lell_print@@Base+0xb00>
    9bfc:	add	r0, pc, r0
    9c00:	bl	47d4 <puts@plt>
    9c04:	ldr	r0, [pc, #1180]	; a0a8 <lell_print@@Base+0xb04>
    9c08:	add	r0, pc, r0
    9c0c:	bl	4618 <printf@plt>
    9c10:	add	r6, sl, #2
    9c14:	mov	r4, #7
    9c18:	mov	r5, #1
    9c1c:	ldr	r7, [pc, #1160]	; a0ac <lell_print@@Base+0xb08>
    9c20:	add	r7, pc, r7
    9c24:	ldrb	r0, [r9, r6]
    9c28:	and	r1, r0, r5, lsl r4
    9c2c:	cmp	r1, #0
    9c30:	movwne	r1, #1
    9c34:	mov	r0, r7
    9c38:	bl	4618 <printf@plt>
    9c3c:	sub	r4, r4, #1
    9c40:	cmn	r4, #1
    9c44:	bne	9c24 <lell_print@@Base+0x680>
    9c48:	mov	r0, #10
    9c4c:	bl	48e8 <putchar@plt>
    9c50:	mov	r4, #0
    9c54:	ldr	sl, [pc, #1108]	; a0b0 <lell_print@@Base+0xb0c>
    9c58:	add	sl, pc, sl
    9c5c:	ldr	r7, [pc, #1104]	; a0b4 <lell_print@@Base+0xb10>
    9c60:	add	r7, pc, r7
    9c64:	ldrb	r0, [r9, r6]
    9c68:	tst	r0, r5, lsl r4
    9c6c:	beq	9c80 <lell_print@@Base+0x6dc>
    9c70:	mov	r0, sl
    9c74:	bl	4618 <printf@plt>
    9c78:	ldr	r0, [r7, r4, lsl #2]
    9c7c:	bl	47d4 <puts@plt>
    9c80:	add	r4, r4, #1
    9c84:	cmp	r4, #8
    9c88:	bne	9c64 <lell_print@@Base+0x6c0>
    9c8c:	b	9e60 <lell_print@@Base+0x8bc>
    9c90:	cmp	r6, #255	; 0xff
    9c94:	bne	9d24 <lell_print@@Base+0x780>
    9c98:	ldr	r0, [pc, #1140]	; a114 <lell_print@@Base+0xb70>
    9c9c:	add	r0, pc, r0
    9ca0:	bl	47d4 <puts@plt>
    9ca4:	ldr	r4, [pc, #1132]	; a118 <lell_print@@Base+0xb74>
    9ca8:	add	r4, pc, r4
    9cac:	mov	r0, r4
    9cb0:	bl	4618 <printf@plt>
    9cb4:	cmp	r7, #3
    9cb8:	bcc	9fac <lell_print@@Base+0xa08>
    9cbc:	mov	r5, r8
    9cc0:	add	r0, r9, sl
    9cc4:	ldrh	r0, [r0, #2]
    9cc8:	bl	4924 <bt_compidtostr@plt>
    9ccc:	mov	r1, r0
    9cd0:	ldr	r0, [pc, #1092]	; a11c <lell_print@@Base+0xb78>
    9cd4:	add	r0, pc, r0
    9cd8:	bl	4618 <printf@plt>
    9cdc:	mov	r0, r4
    9ce0:	bl	4618 <printf@plt>
    9ce4:	ldr	r0, [pc, #1076]	; a120 <lell_print@@Base+0xb7c>
    9ce8:	add	r0, pc, r0
    9cec:	bl	4618 <printf@plt>
    9cf0:	cmp	r7, #3
    9cf4:	ldr	r8, [pc, #1064]	; a124 <lell_print@@Base+0xb80>
    9cf8:	add	r8, pc, r8
    9cfc:	beq	9f9c <lell_print@@Base+0x9f8>
    9d00:	ldr	r0, [sp, #4]
    9d04:	add	r4, r0, sl
    9d08:	sub	r6, r7, #3
    9d0c:	ldrb	r1, [r4], #1
    9d10:	mov	r0, r8
    9d14:	bl	4618 <printf@plt>
    9d18:	subs	r6, r6, #1
    9d1c:	bne	9d0c <lell_print@@Base+0x768>
    9d20:	b	9f9c <lell_print@@Base+0x9f8>
    9d24:	mov	r0, #10
    9d28:	bl	48e8 <putchar@plt>
    9d2c:	ldr	r0, [pc, #876]	; a0a0 <lell_print@@Base+0xafc>
    9d30:	add	r0, pc, r0
    9d34:	bl	4618 <printf@plt>
    9d38:	cmp	r7, #2
    9d3c:	bcc	9e60 <lell_print@@Base+0x8bc>
    9d40:	ldr	r0, [sp, #8]
    9d44:	add	r4, r0, sl
    9d48:	sub	r6, r7, #1
    9d4c:	ldrb	r1, [r4], #1
    9d50:	mov	r0, r5
    9d54:	bl	4618 <printf@plt>
    9d58:	subs	r6, r6, #1
    9d5c:	bne	9d4c <lell_print@@Base+0x7a8>
    9d60:	b	9e60 <lell_print@@Base+0x8bc>
    9d64:	ldr	r0, [pc, #844]	; a0b8 <lell_print@@Base+0xb14>
    9d68:	add	r0, pc, r0
    9d6c:	b	9d78 <lell_print@@Base+0x7d4>
    9d70:	ldr	r0, [pc, #836]	; a0bc <lell_print@@Base+0xb18>
    9d74:	add	r0, pc, r0
    9d78:	bl	47d4 <puts@plt>
    9d7c:	ldr	r5, [pc, #828]	; a0c0 <lell_print@@Base+0xb1c>
    9d80:	add	r5, pc, r5
    9d84:	tst	r7, #1
    9d88:	beq	a034 <lell_print@@Base+0xa90>
    9d8c:	cmp	r7, #2
    9d90:	bcc	a034 <lell_print@@Base+0xa90>
    9d94:	sub	r4, r7, #1
    9d98:	ldr	r0, [sp, #8]
    9d9c:	add	r6, r0, sl
    9da0:	mov	r7, #0
    9da4:	add	r0, r6, r7
    9da8:	ldrh	r1, [r0]
    9dac:	mov	r0, r5
    9db0:	bl	4618 <printf@plt>
    9db4:	add	r7, r7, #2
    9db8:	cmp	r7, r4
    9dbc:	blt	9da4 <lell_print@@Base+0x800>
    9dc0:	b	a034 <lell_print@@Base+0xa90>
    9dc4:	mov	r5, r8
    9dc8:	ldr	r0, [pc, #756]	; a0c4 <lell_print@@Base+0xb20>
    9dcc:	add	r0, pc, r0
    9dd0:	b	9de0 <lell_print@@Base+0x83c>
    9dd4:	mov	r5, r8
    9dd8:	ldr	r0, [pc, #744]	; a0c8 <lell_print@@Base+0xb24>
    9ddc:	add	r0, pc, r0
    9de0:	bl	47d4 <puts@plt>
    9de4:	sub	r8, r7, #1
    9de8:	tst	r8, #15
    9dec:	beq	9fbc <lell_print@@Base+0xa18>
    9df0:	ldr	r0, [pc, #728]	; a0d0 <lell_print@@Base+0xb2c>
    9df4:	add	r0, pc, r0
    9df8:	mov	r1, r8
    9dfc:	bl	4618 <printf@plt>
    9e00:	mov	r8, r5
    9e04:	b	a034 <lell_print@@Base+0xa90>
    9e08:	ldr	r0, [pc, #708]	; a0d4 <lell_print@@Base+0xb30>
    9e0c:	add	r0, pc, r0
    9e10:	bl	47d4 <puts@plt>
    9e14:	ldr	r0, [pc, #700]	; a0d8 <lell_print@@Base+0xb34>
    9e18:	add	r0, pc, r0
    9e1c:	bl	4618 <printf@plt>
    9e20:	cmp	r7, #2
    9e24:	bcc	9e60 <lell_print@@Base+0x8bc>
    9e28:	ldr	r0, [sp, #8]
    9e2c:	add	r6, r0, sl
    9e30:	sub	r4, r7, #1
    9e34:	bl	4828 <__ctype_b_loc@plt>
    9e38:	mov	r7, r0
    9e3c:	ldrb	r0, [r6], #1
    9e40:	ldr	r1, [r7]
    9e44:	add	r1, r1, r0, lsl #1
    9e48:	ldrh	r1, [r1]
    9e4c:	tst	r1, #16384	; 0x4000
    9e50:	movweq	r0, #46	; 0x2e
    9e54:	bl	48e8 <putchar@plt>
    9e58:	subs	r4, r4, #1
    9e5c:	bne	9e3c <lell_print@@Base+0x898>
    9e60:	mov	r0, #10
    9e64:	bl	48e8 <putchar@plt>
    9e68:	b	a034 <lell_print@@Base+0xa90>
    9e6c:	ldr	r0, [pc, #616]	; a0dc <lell_print@@Base+0xb38>
    9e70:	add	r0, pc, r0
    9e74:	bl	47d4 <puts@plt>
    9e78:	ldr	r0, [pc, #608]	; a0e0 <lell_print@@Base+0xb3c>
    9e7c:	add	r0, pc, r0
    9e80:	bl	4618 <printf@plt>
    9e84:	sub	r1, r7, #1
    9e88:	cmp	r1, #1
    9e8c:	bne	a01c <lell_print@@Base+0xa78>
    9e90:	add	r0, r9, sl
    9e94:	ldrb	r1, [r0, #2]
    9e98:	ldr	r0, [pc, #580]	; a0e4 <lell_print@@Base+0xb40>
    9e9c:	add	r0, pc, r0
    9ea0:	b	a030 <lell_print@@Base+0xa8c>
    9ea4:	ldr	r0, [pc, #576]	; a0ec <lell_print@@Base+0xb48>
    9ea8:	add	r0, pc, r0
    9eac:	bl	47d4 <puts@plt>
    9eb0:	ldr	r0, [pc, #568]	; a0f0 <lell_print@@Base+0xb4c>
    9eb4:	add	r0, pc, r0
    9eb8:	bl	4618 <printf@plt>
    9ebc:	sub	r1, r7, #1
    9ec0:	cmp	r1, #4
    9ec4:	bne	a028 <lell_print@@Base+0xa84>
    9ec8:	add	r4, r9, sl
    9ecc:	ldrb	r0, [r4, #2]
    9ed0:	ldrb	r1, [r4, #3]
    9ed4:	orr	r0, r0, r1, lsl #8
    9ed8:	vmov	s0, r0
    9edc:	vcvt.f64.s32	d16, s0
    9ee0:	vmul.f64	d16, d16, d8
    9ee4:	vmov	r2, r3, d16
    9ee8:	ldr	r0, [pc, #516]	; a0f4 <lell_print@@Base+0xb50>
    9eec:	add	r0, pc, r0
    9ef0:	bl	4618 <printf@plt>
    9ef4:	ldrb	r0, [r4, #4]
    9ef8:	ldrb	r1, [r4, #5]
    9efc:	orr	r0, r0, r1, lsl #8
    9f00:	vmov	s0, r0
    9f04:	vcvt.f64.s32	d16, s0
    9f08:	vmul.f64	d16, d16, d8
    9f0c:	vmov	r2, r3, d16
    9f10:	ldr	r0, [pc, #480]	; a0f8 <lell_print@@Base+0xb54>
    9f14:	add	r0, pc, r0
    9f18:	bl	4618 <printf@plt>
    9f1c:	b	a034 <lell_print@@Base+0xa90>
    9f20:	ldr	r0, [pc, #472]	; a100 <lell_print@@Base+0xb5c>
    9f24:	add	r0, pc, r0
    9f28:	bl	47d4 <puts@plt>
    9f2c:	ldr	r0, [pc, #464]	; a104 <lell_print@@Base+0xb60>
    9f30:	add	r0, pc, r0
    9f34:	bl	4618 <printf@plt>
    9f38:	cmp	r7, #3
    9f3c:	bcc	9fac <lell_print@@Base+0xa08>
    9f40:	mov	r5, r8
    9f44:	add	r0, r9, sl
    9f48:	ldrb	r1, [r0, #2]
    9f4c:	ldrb	r0, [r0, #3]
    9f50:	orr	r1, r1, r0, lsl #8
    9f54:	ldr	r0, [pc, #428]	; a108 <lell_print@@Base+0xb64>
    9f58:	add	r0, pc, r0
    9f5c:	bl	4618 <printf@plt>
    9f60:	cmp	r7, #3
    9f64:	ldr	r8, [pc, #416]	; a10c <lell_print@@Base+0xb68>
    9f68:	add	r8, pc, r8
    9f6c:	beq	9f9c <lell_print@@Base+0x9f8>
    9f70:	ldr	r0, [pc, #408]	; a110 <lell_print@@Base+0xb6c>
    9f74:	add	r0, pc, r0
    9f78:	bl	4618 <printf@plt>
    9f7c:	ldr	r0, [sp, #4]
    9f80:	add	r4, r0, sl
    9f84:	sub	r6, r7, #3
    9f88:	ldrb	r1, [r4], #1
    9f8c:	mov	r0, r8
    9f90:	bl	4618 <printf@plt>
    9f94:	subs	r6, r6, #1
    9f98:	bne	9f88 <lell_print@@Base+0x9e4>
    9f9c:	mov	r0, #10
    9fa0:	bl	48e8 <putchar@plt>
    9fa4:	mov	r8, r5
    9fa8:	b	a034 <lell_print@@Base+0xa90>
    9fac:	sub	r1, r7, #1
    9fb0:	ldr	r0, [pc, #368]	; a128 <lell_print@@Base+0xb84>
    9fb4:	add	r0, pc, r0
    9fb8:	b	a030 <lell_print@@Base+0xa8c>
    9fbc:	cmp	r7, #2
    9fc0:	bcc	a014 <lell_print@@Base+0xa70>
    9fc4:	ldr	r0, [sp, #8]
    9fc8:	add	r6, r0, sl
    9fcc:	mov	r7, #0
    9fd0:	ldrb	r0, [r6, r7]
    9fd4:	and	r1, r7, #15
    9fd8:	eor	r2, r1, #15
    9fdc:	add	r3, sp, #16
    9fe0:	strb	r0, [r3, r2]
    9fe4:	cmp	r1, #15
    9fe8:	bne	a008 <lell_print@@Base+0xa64>
    9fec:	ldr	r0, [pc, #216]	; a0cc <lell_print@@Base+0xb28>
    9ff0:	add	r0, pc, r0
    9ff4:	bl	4618 <printf@plt>
    9ff8:	add	r0, sp, #16
    9ffc:	bl	a1fc <lell_print@@Base+0xc58>
    a000:	mov	r0, #10
    a004:	bl	48e8 <putchar@plt>
    a008:	add	r7, r7, #1
    a00c:	cmp	r8, r7
    a010:	bne	9fd0 <lell_print@@Base+0xa2c>
    a014:	mov	r8, r5
    a018:	b	a034 <lell_print@@Base+0xa90>
    a01c:	ldr	r0, [pc, #196]	; a0e8 <lell_print@@Base+0xb44>
    a020:	add	r0, pc, r0
    a024:	b	a030 <lell_print@@Base+0xa8c>
    a028:	ldr	r0, [pc, #204]	; a0fc <lell_print@@Base+0xb58>
    a02c:	add	r0, pc, r0
    a030:	bl	4618 <printf@plt>
    a034:	ldr	r4, [sp, #12]
    a038:	cmp	r8, r4
    a03c:	ldr	r5, [pc, #232]	; a12c <lell_print@@Base+0xb88>
    a040:	add	r5, pc, r5
    a044:	blt	9b54 <lell_print@@Base+0x5b0>
    a048:	sub	sp, fp, #40	; 0x28
    a04c:	vpop	{d8}
    a050:	add	sp, sp, #4
    a054:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a058:	ldr	r0, [pc, #208]	; a130 <lell_print@@Base+0xb8c>
    a05c:	add	r0, pc, r0
    a060:	mov	r2, r7
    a064:	mov	r3, r4
    a068:	sub	sp, fp, #40	; 0x28
    a06c:	vpop	{d8}
    a070:	add	sp, sp, #4
    a074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a078:	b	4618 <printf@plt>
    a07c:	ldr	r0, [pc, #176]	; a134 <lell_print@@Base+0xb90>
    a080:	add	r0, pc, r0
    a084:	sub	sp, fp, #40	; 0x28
    a088:	vpop	{d8}
    a08c:	add	sp, sp, #4
    a090:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a094:	b	47d4 <puts@plt>
    a098:	andeq	r5, r0, pc, lsl #1
    a09c:	muleq	r0, r8, pc	; <UNPREDICTABLE>
    a0a0:	strdeq	r4, [r0], -sp
    a0a4:			; <UNDEFINED> instruction: 0x000051be
    a0a8:	andeq	r4, r0, r5, lsr #30
    a0ac:	andeq	r4, r0, r6, lsl #30
    a0b0:	ldrdeq	r4, [r0], -r1
    a0b4:	andeq	fp, r1, r8, asr #4
    a0b8:	andeq	r5, r0, r0, lsr #5
    a0bc:	andeq	r5, r0, r4, ror r2
    a0c0:			; <UNDEFINED> instruction: 0x00004db9
    a0c4:	andeq	r5, r0, ip, ror #3
    a0c8:			; <UNDEFINED> instruction: 0x000051bc
    a0cc:	andeq	r4, r0, sp, lsr fp
    a0d0:	andeq	r4, r0, r6, asr sp
    a0d4:	andeq	r5, r0, ip, ror #2
    a0d8:	andeq	r4, r0, r5, lsl sp
    a0dc:	andeq	r5, r0, r8, ror #1
    a0e0:			; <UNDEFINED> instruction: 0x00004cb1
    a0e4:	ldrdeq	r4, [r0], -sl
    a0e8:	andeq	r4, r0, lr, asr fp
    a0ec:	andeq	r5, r0, r0, lsl #1
    a0f0:	andeq	r4, r0, r9, ror ip
    a0f4:			; <UNDEFINED> instruction: 0x00004cb2
    a0f8:	muleq	r0, r3, ip
    a0fc:	andeq	r4, r0, r6, lsl #23
    a100:	andeq	r4, r0, r6, lsl #29
    a104:	strdeq	r4, [r0], -sp
    a108:	andeq	r4, r0, sl, ror ip
    a10c:	andeq	r4, r0, pc, ror #24
    a110:	andeq	r4, r0, r9, ror #24
    a114:	andeq	r5, r0, ip, ror #4
    a118:	andeq	r4, r0, r5, lsl #29
    a11c:	andeq	r4, r0, sl, lsr pc
    a120:	strdeq	r4, [r0], -r0
    a124:	ldrdeq	r4, [r0], -pc	; <UNPREDICTABLE>
    a128:	andeq	r4, r0, r7, lsr ip
    a12c:	muleq	r0, r7, fp
    a130:	andeq	r4, r0, lr, ror sl
    a134:			; <UNDEFINED> instruction: 0x00004fb8
    a138:	ldr	r2, [r0, #18]
    a13c:	ldr	r0, [pc, #12]	; a150 <lell_print@@Base+0xbac>
    a140:	add	r0, pc, r0
    a144:	ldr	r1, [pc, #8]	; a154 <lell_print@@Base+0xbb0>
    a148:	add	r1, pc, r1
    a14c:	b	4618 <printf@plt>
    a150:	andeq	r4, r0, r2, lsr #23
    a154:	muleq	r0, r6, r7
    a158:	ldrb	r1, [r0, #22]
    a15c:	ldrb	r2, [r0, #23]
    a160:	ldrb	r0, [r0, #24]
    a164:	lsl	r2, r2, #8
    a168:	orr	r0, r2, r0, lsl #16
    a16c:	orr	r2, r0, r1
    a170:	ldr	r0, [pc, #12]	; a184 <lell_print@@Base+0xbe0>
    a174:	add	r0, pc, r0
    a178:	ldr	r1, [pc, #8]	; a188 <lell_print@@Base+0xbe4>
    a17c:	add	r1, pc, r1
    a180:	b	4618 <printf@plt>
    a184:	andeq	r4, r0, sl, ror fp
    a188:	andeq	r4, r0, sl, ror #14
    a18c:	ldrb	r2, [r0, #25]
    a190:	ldr	r0, [pc, #16]	; a1a8 <lell_print@@Base+0xc04>
    a194:	add	r0, pc, r0
    a198:	ldr	r1, [pc, #12]	; a1ac <lell_print@@Base+0xc08>
    a19c:	add	r1, pc, r1
    a1a0:	mov	r3, r2
    a1a4:	b	4618 <printf@plt>
    a1a8:	andeq	r4, r0, r6, ror #22
    a1ac:	andeq	r4, r0, r4, asr r7
    a1b0:	mov	r3, r0
    a1b4:	ldrb	r0, [r1, r2]!
    a1b8:	ldrb	r1, [r1, #1]
    a1bc:	orr	r2, r0, r1, lsl #8
    a1c0:	ldr	r0, [pc, #12]	; a1d4 <lell_print@@Base+0xc30>
    a1c4:	add	r0, pc, r0
    a1c8:	mov	r1, r3
    a1cc:	mov	r3, r2
    a1d0:	b	4618 <printf@plt>
    a1d4:	andeq	r4, r0, r7, asr #22
    a1d8:	mov	r1, #0
    a1dc:	cmp	r0, #0
    a1e0:	beq	a1f4 <lell_print@@Base+0xc50>
    a1e4:	sub	r2, r0, #1
    a1e8:	ands	r0, r2, r0
    a1ec:	add	r1, r1, #1
    a1f0:	bne	a1e4 <lell_print@@Base+0xc40>
    a1f4:	uxtb	r0, r1
    a1f8:	bx	lr
    a1fc:	push	{r4, r5, r6, r7, fp, lr}
    a200:	add	fp, sp, #16
    a204:	mov	r4, r0
    a208:	mov	r6, #0
    a20c:	ldr	r5, [pc, #220]	; a2f0 <lell_print@@Base+0xd4c>
    a210:	add	r5, pc, r5
    a214:	ldrb	r1, [r4, r6]
    a218:	mov	r0, r5
    a21c:	bl	4618 <printf@plt>
    a220:	add	r6, r6, #1
    a224:	cmp	r6, #4
    a228:	bne	a214 <lell_print@@Base+0xc70>
    a22c:	mov	r0, #45	; 0x2d
    a230:	bl	48e8 <putchar@plt>
    a234:	add	r6, r4, #4
    a238:	mov	r7, #0
    a23c:	ldr	r5, [pc, #176]	; a2f4 <lell_print@@Base+0xd50>
    a240:	add	r5, pc, r5
    a244:	ldrb	r1, [r6, r7]
    a248:	mov	r0, r5
    a24c:	bl	4618 <printf@plt>
    a250:	add	r7, r7, #1
    a254:	cmp	r7, #2
    a258:	bne	a244 <lell_print@@Base+0xca0>
    a25c:	mov	r0, #45	; 0x2d
    a260:	bl	48e8 <putchar@plt>
    a264:	add	r6, r4, #6
    a268:	mov	r7, #0
    a26c:	ldr	r5, [pc, #132]	; a2f8 <lell_print@@Base+0xd54>
    a270:	add	r5, pc, r5
    a274:	ldrb	r1, [r6, r7]
    a278:	mov	r0, r5
    a27c:	bl	4618 <printf@plt>
    a280:	add	r7, r7, #1
    a284:	cmp	r7, #2
    a288:	bne	a274 <lell_print@@Base+0xcd0>
    a28c:	mov	r0, #45	; 0x2d
    a290:	bl	48e8 <putchar@plt>
    a294:	add	r6, r4, #8
    a298:	mov	r7, #0
    a29c:	ldr	r5, [pc, #88]	; a2fc <lell_print@@Base+0xd58>
    a2a0:	add	r5, pc, r5
    a2a4:	ldrb	r1, [r6, r7]
    a2a8:	mov	r0, r5
    a2ac:	bl	4618 <printf@plt>
    a2b0:	add	r7, r7, #1
    a2b4:	cmp	r7, #2
    a2b8:	bne	a2a4 <lell_print@@Base+0xd00>
    a2bc:	mov	r0, #45	; 0x2d
    a2c0:	bl	48e8 <putchar@plt>
    a2c4:	add	r5, r4, #10
    a2c8:	mov	r6, #0
    a2cc:	ldr	r4, [pc, #44]	; a300 <lell_print@@Base+0xd5c>
    a2d0:	add	r4, pc, r4
    a2d4:	ldrb	r1, [r5, r6]
    a2d8:	mov	r0, r4
    a2dc:	bl	4618 <printf@plt>
    a2e0:	add	r6, r6, #1
    a2e4:	cmp	r6, #6
    a2e8:	bne	a2d4 <lell_print@@Base+0xd30>
    a2ec:	pop	{r4, r5, r6, r7, fp, pc}
    a2f0:	andeq	r4, r0, r8, asr #19
    a2f4:	muleq	r0, r8, r9
    a2f8:	andeq	r4, r0, r8, ror #18
    a2fc:	andeq	r4, r0, r8, lsr r9
    a300:	andeq	r4, r0, r8, lsl #18

0000a304 <bt_compidtostr@@Base>:
    a304:	add	r0, r0, #1
    a308:	uxth	r1, r0
    a30c:	movw	r2, #1038	; 0x40e
    a310:	cmp	r1, r2
    a314:	ldrhi	r0, [pc, #28]	; a338 <bt_compidtostr@@Base+0x34>
    a318:	addhi	r0, pc, r0
    a31c:	bxhi	lr
    a320:	sxth	r0, r0
    a324:	ldr	r1, [pc, #8]	; a334 <bt_compidtostr@@Base+0x30>
    a328:	add	r1, pc, r1
    a32c:	ldr	r0, [r1, r0, lsl #2]
    a330:	bx	lr
    a334:	andeq	sl, r1, r0, lsr #23
    a338:	andeq	r9, r0, fp, ror #22

0000a33c <btbb_pcap_open@@Base>:
    a33c:	push	{r4, sl, fp, lr}
    a340:	add	fp, sp, #8
    a344:	sub	sp, sp, #24
    a348:	movw	r3, #15437	; 0x3c4d
    a34c:	movt	r3, #41394	; 0xa1b2
    a350:	str	r3, [sp]
    a354:	movw	r3, #2
    a358:	movt	r3, #4
    a35c:	str	r3, [sp, #4]
    a360:	mov	r3, #0
    a364:	str	r3, [sp, #8]
    a368:	str	r3, [sp, #12]
    a36c:	str	r2, [sp, #16]
    a370:	str	r1, [sp, #20]
    a374:	ldr	r1, [pc, #48]	; a3ac <btbb_pcap_open@@Base+0x70>
    a378:	add	r1, pc, r1
    a37c:	bl	4624 <fopen@plt>
    a380:	mov	r4, r0
    a384:	cmp	r0, #0
    a388:	beq	a3a0 <btbb_pcap_open@@Base+0x64>
    a38c:	mov	r0, sp
    a390:	mov	r1, #24
    a394:	mov	r2, #1
    a398:	mov	r3, r4
    a39c:	bl	4774 <fwrite@plt>
    a3a0:	mov	r0, r4
    a3a4:	sub	sp, fp, #8
    a3a8:	pop	{r4, sl, fp, pc}
    a3ac:	andeq	r9, r0, r8, lsl fp

0000a3b0 <btbb_pcap_create_file@@Base>:
    a3b0:	push	{r4, r5, r6, r7, fp, lr}
    a3b4:	add	fp, sp, #16
    a3b8:	mov	r6, r1
    a3bc:	mov	r7, r0
    a3c0:	mov	r0, #4
    a3c4:	bl	47e0 <malloc@plt>
    a3c8:	mov	r4, r0
    a3cc:	cmp	r0, #0
    a3d0:	beq	a414 <btbb_pcap_create_file@@Base+0x64>
    a3d4:	mov	r5, #0
    a3d8:	str	r5, [r4]
    a3dc:	mov	r0, r7
    a3e0:	mov	r1, #255	; 0xff
    a3e4:	mov	r2, #400	; 0x190
    a3e8:	bl	46f0 <btbb_pcap_open@plt>
    a3ec:	str	r0, [r4]
    a3f0:	cmp	r0, #0
    a3f4:	strne	r4, [r6]
    a3f8:	movne	r0, r5
    a3fc:	popne	{r4, r5, r6, r7, fp, pc}
    a400:	ldr	r0, [pc, #32]	; a428 <btbb_pcap_create_file@@Base+0x78>
    a404:	add	r0, pc, r0
    a408:	bl	4744 <perror@plt>
    a40c:	mvn	r5, #1
    a410:	b	a418 <btbb_pcap_create_file@@Base+0x68>
    a414:	mvn	r5, #2
    a418:	mov	r0, r4
    a41c:	bl	478c <btbb_pcap_close@plt>
    a420:	mov	r0, r5
    a424:	pop	{r4, r5, r6, r7, fp, pc}
    a428:	andeq	r9, r0, lr, lsl #21

0000a42c <btbb_pcap_close@@Base>:
    a42c:	cmp	r0, #0
    a430:	mvneq	r0, #0
    a434:	bxeq	lr
    a438:	push	{r4, sl, fp, lr}
    a43c:	add	fp, sp, #8
    a440:	mov	r4, r0
    a444:	ldr	r0, [r0]
    a448:	cmp	r0, #0
    a44c:	beq	a454 <btbb_pcap_close@@Base+0x28>
    a450:	bl	4954 <fclose@plt>
    a454:	mov	r0, r4
    a458:	bl	4660 <free@plt>
    a45c:	mov	r0, #0
    a460:	pop	{r4, sl, fp, pc}

0000a464 <btbb_pcap_dump@@Base>:
    a464:	push	{r4, r5, r6, sl, fp, lr}
    a468:	add	fp, sp, #16
    a46c:	mov	r4, r2
    a470:	mov	r5, r1
    a474:	mov	r6, r0
    a478:	mov	r0, r1
    a47c:	mov	r1, #16
    a480:	mov	r2, #1
    a484:	mov	r3, r6
    a488:	bl	4774 <fwrite@plt>
    a48c:	ldr	r1, [r5, #8]
    a490:	mov	r0, r4
    a494:	mov	r2, #1
    a498:	mov	r3, r6
    a49c:	bl	4774 <fwrite@plt>
    a4a0:	mov	r0, r6
    a4a4:	pop	{r4, r5, r6, sl, fp, lr}
    a4a8:	b	463c <fflush@plt>

0000a4ac <btbb_pcap_append_packet@@Base>:
    a4ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a4b0:	add	fp, sp, #28
    a4b4:	sub	sp, sp, #468	; 0x1d4
    a4b8:	mov	r4, r0
    a4bc:	mvn	r0, #0
    a4c0:	cmp	r4, #0
    a4c4:	ldrne	r1, [r4]
    a4c8:	cmpne	r1, #0
    a4cc:	bne	a4d8 <btbb_pcap_append_packet@@Base+0x2c>
    a4d0:	sub	sp, fp, #28
    a4d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a4d8:	ldr	r6, [fp, #24]
    a4dc:	mov	r0, r6
    a4e0:	str	r3, [fp, #-480]	; 0xfffffe20
    a4e4:	str	r2, [fp, #-484]	; 0xfffffe1c
    a4e8:	bl	4840 <btbb_packet_get_payload_length@plt>
    a4ec:	mov	r7, r0
    a4f0:	str	sp, [fp, #-476]	; 0xfffffe24
    a4f4:	add	r0, r0, #7
    a4f8:	bic	r0, r0, #7
    a4fc:	sub	r5, sp, r0
    a500:	mov	sp, r5
    a504:	mov	r0, r6
    a508:	mov	r1, r5
    a50c:	bl	460c <btbb_get_payload_packed@plt>
    a510:	mov	r0, r6
    a514:	bl	4984 <btbb_packet_get_channel@plt>
    a518:	str	r0, [fp, #-488]	; 0xfffffe18
    a51c:	mov	r0, r6
    a520:	bl	4678 <btbb_packet_get_ac_errors@plt>
    a524:	str	r0, [fp, #-492]	; 0xfffffe14
    a528:	mov	r0, r6
    a52c:	bl	48b8 <btbb_packet_get_transport@plt>
    a530:	mov	sl, r0
    a534:	mov	r0, r6
    a538:	bl	466c <btbb_packet_get_modulation@plt>
    a53c:	mov	r8, r0
    a540:	mov	r0, r6
    a544:	bl	490c <btbb_packet_get_lap@plt>
    a548:	mov	r9, r0
    a54c:	mov	r0, r6
    a550:	bl	4870 <btbb_packet_get_header_packed@plt>
    a554:	sub	sp, sp, #56	; 0x38
    a558:	mov	r1, #3
    a55c:	ldr	ip, [fp, #12]
    a560:	ldr	r3, [fp, #8]
    a564:	cmp	ip, r3
    a568:	movwlt	r1, #7
    a56c:	ldr	r2, [fp, #16]
    a570:	cmn	r2, #1
    a574:	orrne	r1, r1, #16
    a578:	ldr	r6, [fp, #20]
    a57c:	cmp	r6, #255	; 0xff
    a580:	orrne	r1, r1, #128	; 0x80
    a584:	str	r2, [sp, #32]
    a588:	str	r6, [sp, #36]	; 0x24
    a58c:	add	r2, sp, #40	; 0x28
    a590:	stm	r2, {r0, r1, r5}
    a594:	cmp	r7, #400	; 0x190
    a598:	movcs	r7, #400	; 0x190
    a59c:	str	r7, [sp]
    a5a0:	ldr	r0, [fp, #-488]	; 0xfffffe18
    a5a4:	stmib	sp, {r0, r3, ip}
    a5a8:	ldr	r0, [fp, #-492]	; 0xfffffe14
    a5ac:	str	r0, [sp, #16]
    a5b0:	str	sl, [sp, #20]
    a5b4:	str	r8, [sp, #24]
    a5b8:	str	r9, [sp, #28]
    a5bc:	sub	r5, fp, #472	; 0x1d8
    a5c0:	mov	r0, r5
    a5c4:	ldr	r2, [fp, #-484]	; 0xfffffe1c
    a5c8:	ldr	r3, [fp, #-480]	; 0xfffffe20
    a5cc:	bl	a5f4 <btbb_pcap_append_packet@@Base+0x148>
    a5d0:	add	sp, sp, #56	; 0x38
    a5d4:	ldr	r0, [r4]
    a5d8:	add	r2, r5, #16
    a5dc:	mov	r1, r5
    a5e0:	bl	4804 <btbb_pcap_dump@plt>
    a5e4:	mov	r0, #0
    a5e8:	ldr	sp, [fp, #-476]	; 0xfffffe24
    a5ec:	sub	sp, fp, #28
    a5f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a5f4:	push	{r4, r5, r6, sl, fp, lr}
    a5f8:	add	fp, sp, #16
    a5fc:	mov	r1, r3
    a600:	mov	r5, r2
    a604:	mov	r4, r0
    a608:	mov	r0, #0
    a60c:	strb	r0, [r4, #21]
    a610:	strh	r0, [r4, #22]
    a614:	movw	r6, #51712	; 0xca00
    a618:	movt	r6, #15258	; 0x3b9a
    a61c:	mov	r0, r2
    a620:	mov	r2, r6
    a624:	mov	r3, #0
    a628:	bl	ba7c <lell_pcapng_close@@Base+0xc0>
    a62c:	str	r0, [r4]
    a630:	mls	r0, r0, r6, r5
    a634:	str	r0, [r4, #4]
    a638:	ldr	r0, [fp, #12]
    a63c:	strb	r0, [r4, #16]
    a640:	ldr	r0, [fp, #16]
    a644:	strb	r0, [r4, #17]
    a648:	ldr	r0, [fp, #20]
    a64c:	strb	r0, [r4, #18]
    a650:	ldr	r0, [fp, #24]
    a654:	strb	r0, [r4, #19]
    a658:	ldr	r5, [fp, #8]
    a65c:	add	r0, r5, #22
    a660:	str	r0, [r4, #8]
    a664:	str	r0, [r4, #12]
    a668:	ldr	r0, [fp, #28]
    a66c:	ldr	r1, [fp, #32]
    a670:	orr	r0, r1, r0, lsl #4
    a674:	strb	r0, [r4, #20]
    a678:	ldr	r0, [fp, #36]	; 0x24
    a67c:	bl	aa68 <lell_pcap_append_ppi_packet@@Base+0x130>
    a680:	str	r0, [r4, #24]
    a684:	ldr	r0, [fp, #40]	; 0x28
    a688:	bic	r0, r0, #-16777216	; 0xff000000
    a68c:	ldr	r1, [fp, #44]	; 0x2c
    a690:	orr	r0, r0, r1, lsl #24
    a694:	bl	aa68 <lell_pcap_append_ppi_packet@@Base+0x130>
    a698:	str	r0, [r4, #28]
    a69c:	ldr	r0, [fp, #48]	; 0x30
    a6a0:	bl	aa68 <lell_pcap_append_ppi_packet@@Base+0x130>
    a6a4:	str	r0, [r4, #32]
    a6a8:	ldr	r6, [fp, #52]	; 0x34
    a6ac:	mov	r0, r6
    a6b0:	bl	aa64 <lell_pcap_append_ppi_packet@@Base+0x12c>
    a6b4:	strh	r6, [r4, #36]	; 0x24
    a6b8:	cmp	r5, #0
    a6bc:	beq	a6e4 <btbb_pcap_append_packet@@Base+0x238>
    a6c0:	cmp	r5, #400	; 0x190
    a6c4:	bhi	a6f4 <btbb_pcap_append_packet@@Base+0x248>
    a6c8:	ldr	r1, [fp, #56]	; 0x38
    a6cc:	add	r0, r4, #38	; 0x26
    a6d0:	mov	r2, r5
    a6d4:	bl	4684 <memcpy@plt>
    a6d8:	orr	r0, r6, #32
    a6dc:	strh	r0, [r4, #36]	; 0x24
    a6e0:	pop	{r4, r5, r6, sl, fp, pc}
    a6e4:	movw	r0, #65503	; 0xffdf
    a6e8:	and	r0, r6, r0
    a6ec:	strh	r0, [r4, #36]	; 0x24
    a6f0:	pop	{r4, r5, r6, sl, fp, pc}
    a6f4:	ldr	r0, [pc, #24]	; a714 <btbb_pcap_append_packet@@Base+0x268>
    a6f8:	add	r0, pc, r0
    a6fc:	ldr	r1, [pc, #20]	; a718 <btbb_pcap_append_packet@@Base+0x26c>
    a700:	add	r1, pc, r1
    a704:	ldr	r3, [pc, #16]	; a71c <btbb_pcap_append_packet@@Base+0x270>
    a708:	add	r3, pc, r3
    a70c:	mov	r2, #162	; 0xa2
    a710:	bl	4a08 <__assert_fail@plt>
    a714:	andeq	r9, r0, r6, lsr #15
    a718:	ldrdeq	r9, [r0], -r3
    a71c:	andeq	r9, r0, r3, lsl r8

0000a720 <lell_pcap_create_file@@Base>:
    a720:	mov	r2, r1
    a724:	mov	r1, #256	; 0x100
    a728:	b	a72c <lell_pcap_create_file@@Base+0xc>
    a72c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    a730:	add	fp, sp, #24
    a734:	mov	r8, r2
    a738:	mov	r7, r1
    a73c:	mov	r6, r0
    a740:	mov	r0, #12
    a744:	bl	47e0 <malloc@plt>
    a748:	mov	r5, r0
    a74c:	cmp	r0, #0
    a750:	beq	a794 <lell_pcap_create_file@@Base+0x74>
    a754:	mov	r4, #0
    a758:	str	r4, [r5]
    a75c:	str	r4, [r5, #4]
    a760:	str	r4, [r5, #8]
    a764:	mov	r0, r6
    a768:	mov	r1, r7
    a76c:	mov	r2, #400	; 0x190
    a770:	bl	46f0 <btbb_pcap_open@plt>
    a774:	str	r0, [r5]
    a778:	cmp	r0, #0
    a77c:	strne	r7, [r5, #4]
    a780:	strne	r5, [r8]
    a784:	movne	r0, r4
    a788:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
    a78c:	mvn	r4, #1
    a790:	b	a798 <lell_pcap_create_file@@Base+0x78>
    a794:	mvn	r4, #2
    a798:	mov	r0, r5
    a79c:	bl	46d8 <lell_pcap_close@plt>
    a7a0:	mov	r0, r4
    a7a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0000a7a8 <lell_pcap_ppi_create_file@@Base>:
    a7a8:	push	{r4, r5, fp, lr}
    a7ac:	add	fp, sp, #8
    a7b0:	mov	r5, r2
    a7b4:	mov	r4, r1
    a7b8:	mov	r1, #192	; 0xc0
    a7bc:	bl	a72c <lell_pcap_create_file@@Base+0xc>
    a7c0:	cmp	r0, #0
    a7c4:	ldreq	r1, [r5]
    a7c8:	strbeq	r4, [r1, #8]
    a7cc:	pop	{r4, r5, fp, pc}

0000a7d0 <lell_pcap_append_packet@@Base>:
    a7d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a7d4:	add	fp, sp, #28
    a7d8:	sub	sp, sp, #324	; 0x144
    a7dc:	mov	r4, r0
    a7e0:	mvn	r0, #0
    a7e4:	cmp	r4, #0
    a7e8:	ldrne	r1, [r4]
    a7ec:	cmpne	r1, #0
    a7f0:	bne	a7fc <lell_pcap_append_packet@@Base+0x2c>
    a7f4:	sub	sp, fp, #28
    a7f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a7fc:	ldr	r1, [r4, #4]
    a800:	cmp	r1, #256	; 0x100
    a804:	bne	a7f4 <lell_pcap_append_packet@@Base+0x24>
    a808:	mov	r5, r3
    a80c:	mov	r6, r2
    a810:	ldr	r7, [fp, #20]
    a814:	ldr	r8, [fp, #16]
    a818:	ldr	r9, [fp, #12]
    a81c:	ldr	sl, [fp, #8]
    a820:	mov	r0, r7
    a824:	bl	4630 <lell_packet_is_data@plt>
    a828:	ldr	r1, [r7, #72]	; 0x48
    a82c:	ldrb	r2, [r7, #69]	; 0x45
    a830:	ldrb	ip, [r7, #92]	; 0x5c
    a834:	mov	r3, #35	; 0x23
    a838:	cmp	r9, sl
    a83c:	movwlt	r3, #39	; 0x27
    a840:	clz	r0, r0
    a844:	lsr	r0, r0, #5
    a848:	orr	r0, r3, r0, lsl #4
    a84c:	add	r1, r1, #9
    a850:	stm	sp, {r1, r2, sl}
    a854:	str	r9, [sp, #12]
    a858:	str	ip, [sp, #16]
    a85c:	str	r8, [sp, #20]
    a860:	str	r0, [sp, #24]
    a864:	str	r7, [sp, #28]
    a868:	add	r7, sp, #36	; 0x24
    a86c:	mov	r0, r7
    a870:	mov	r2, r6
    a874:	mov	r3, r5
    a878:	bl	a898 <lell_pcap_append_packet@@Base+0xc8>
    a87c:	ldr	r0, [r4]
    a880:	add	r2, r7, #16
    a884:	mov	r1, r7
    a888:	bl	4804 <btbb_pcap_dump@plt>
    a88c:	mov	r0, #0
    a890:	sub	sp, fp, #28
    a894:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a898:	push	{r4, r5, r6, sl, fp, lr}
    a89c:	add	fp, sp, #16
    a8a0:	mov	r1, r3
    a8a4:	mov	r5, r2
    a8a8:	mov	r4, r0
    a8ac:	movw	r6, #51712	; 0xca00
    a8b0:	movt	r6, #15258	; 0x3b9a
    a8b4:	mov	r0, r2
    a8b8:	mov	r2, r6
    a8bc:	mov	r3, #0
    a8c0:	bl	ba7c <lell_pcapng_close@@Base+0xc0>
    a8c4:	str	r0, [r4]
    a8c8:	mls	r0, r0, r6, r5
    a8cc:	str	r0, [r4, #4]
    a8d0:	ldr	r0, [fp, #12]
    a8d4:	strb	r0, [r4, #16]
    a8d8:	ldr	r0, [fp, #16]
    a8dc:	strb	r0, [r4, #17]
    a8e0:	ldr	r0, [fp, #20]
    a8e4:	strb	r0, [r4, #18]
    a8e8:	ldr	r0, [fp, #24]
    a8ec:	strb	r0, [r4, #19]
    a8f0:	ldr	r5, [fp, #8]
    a8f4:	add	r0, r5, #10
    a8f8:	str	r0, [r4, #8]
    a8fc:	cmp	r5, #255	; 0xff
    a900:	movcs	r5, #255	; 0xff
    a904:	add	r0, r5, #10
    a908:	str	r0, [r4, #12]
    a90c:	ldr	r0, [fp, #28]
    a910:	bl	aa68 <lell_pcap_append_ppi_packet@@Base+0x130>
    a914:	str	r0, [r4, #20]
    a918:	ldr	r0, [fp, #32]
    a91c:	bl	aa64 <lell_pcap_append_ppi_packet@@Base+0x12c>
    a920:	strh	r0, [r4, #24]
    a924:	add	r0, r4, #26
    a928:	ldr	r1, [fp, #36]	; 0x24
    a92c:	mov	r2, r5
    a930:	pop	{r4, r5, r6, sl, fp, lr}
    a934:	b	4684 <memcpy@plt>

0000a938 <lell_pcap_append_ppi_packet@@Base>:
    a938:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a93c:	add	fp, sp, #28
    a940:	sub	sp, sp, #300	; 0x12c
    a944:	mvn	r4, #0
    a948:	cmp	r0, #0
    a94c:	beq	aa58 <lell_pcap_append_ppi_packet@@Base+0x120>
    a950:	mov	r5, r0
    a954:	ldr	r0, [r0]
    a958:	cmp	r0, #0
    a95c:	beq	aa58 <lell_pcap_append_ppi_packet@@Base+0x120>
    a960:	ldr	r0, [r5, #4]
    a964:	cmp	r0, #192	; 0xc0
    a968:	bne	aa58 <lell_pcap_append_ppi_packet@@Base+0x120>
    a96c:	mov	r7, r2
    a970:	ldr	r8, [fp, #28]
    a974:	ldr	sl, [fp, #8]
    a978:	movw	r9, #51712	; 0xca00
    a97c:	movt	r9, #15258	; 0x3b9a
    a980:	mov	r4, #0
    a984:	mov	r0, r2
    a988:	mov	r1, r3
    a98c:	mov	r2, r9
    a990:	mov	r3, #0
    a994:	bl	ba7c <lell_pcapng_close@@Base+0xc0>
    a998:	mov	r6, r0
    a99c:	mls	r7, r0, r9, r7
    a9a0:	mov	r0, r8
    a9a4:	bl	4888 <lell_get_channel_k@plt>
    a9a8:	ldr	r1, [r8, #72]	; 0x48
    a9ac:	stm	sp, {r6, r7}
    a9b0:	mov	r2, #1572864	; 0x180000
    a9b4:	str	r2, [sp, #16]
    a9b8:	mov	r2, #147	; 0x93
    a9bc:	str	r2, [sp, #20]
    a9c0:	movw	r2, #30006	; 0x7536
    a9c4:	movt	r2, #12
    a9c8:	str	r2, [sp, #24]
    a9cc:	add	r2, r1, #33	; 0x21
    a9d0:	str	r2, [sp, #12]
    a9d4:	add	r6, r1, #9
    a9d8:	cmp	r6, #255	; 0xff
    a9dc:	movcs	r6, #255	; 0xff
    a9e0:	add	r1, r6, #24
    a9e4:	str	r1, [sp, #8]
    a9e8:	ldrb	r1, [r5, #8]
    a9ec:	strb	r1, [sp, #28]
    a9f0:	movw	r1, #2402	; 0x962
    a9f4:	add	r0, r1, r0, lsl #1
    a9f8:	uxth	r0, r0
    a9fc:	bl	aa64 <lell_pcap_append_ppi_packet@@Base+0x12c>
    aa00:	strb	sl, [sp, #31]
    aa04:	strh	r0, [sp, #29]
    aa08:	ldr	r0, [r8, #76]	; 0x4c
    aa0c:	bl	aa68 <lell_pcap_append_ppi_packet@@Base+0x130>
    aa10:	ldr	r1, [fp, #16]
    aa14:	strb	r1, [sp, #36]	; 0x24
    aa18:	str	r0, [sp, #32]
    aa1c:	ldr	r0, [fp, #12]
    aa20:	strb	r0, [sp, #37]	; 0x25
    aa24:	ldr	r0, [fp, #20]
    aa28:	strb	r0, [sp, #38]	; 0x26
    aa2c:	ldr	r0, [fp, #24]
    aa30:	strb	r0, [sp, #39]	; 0x27
    aa34:	mov	r7, sp
    aa38:	add	r0, r7, #40	; 0x28
    aa3c:	mov	r1, r8
    aa40:	mov	r2, r6
    aa44:	bl	4684 <memcpy@plt>
    aa48:	ldr	r0, [r5]
    aa4c:	add	r2, r7, #16
    aa50:	mov	r1, r7
    aa54:	bl	4804 <btbb_pcap_dump@plt>
    aa58:	mov	r0, r4
    aa5c:	sub	sp, fp, #28
    aa60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa64:	bx	lr
    aa68:	bx	lr

0000aa6c <lell_pcap_close@@Base>:
    aa6c:	cmp	r0, #0
    aa70:	mvneq	r0, #0
    aa74:	bxeq	lr
    aa78:	push	{r4, sl, fp, lr}
    aa7c:	add	fp, sp, #8
    aa80:	mov	r4, r0
    aa84:	ldr	r0, [r0]
    aa88:	cmp	r0, #0
    aa8c:	beq	aa94 <lell_pcap_close@@Base+0x28>
    aa90:	bl	4954 <fclose@plt>
    aa94:	mov	r0, r4
    aa98:	bl	4660 <free@plt>
    aa9c:	mov	r0, #0
    aaa0:	pop	{r4, sl, fp, pc}

0000aaa4 <pcapng_create@@Base>:
    aaa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aaa8:	add	fp, sp, #28
    aaac:	sub	sp, sp, #4
    aab0:	vpush	{d8-d9}
    aab4:	sub	sp, sp, #48	; 0x30
    aab8:	mov	r7, r3
    aabc:	mov	r9, r2
    aac0:	mov	r6, r1
    aac4:	mov	r4, r0
    aac8:	vmov.i32	q4, #0	; 0x00000000
    aacc:	add	r5, r0, #4
    aad0:	bl	48a0 <getpagesize@plt>
    aad4:	mov	sl, r0
    aad8:	vst1.32	{d8-d9}, [r5]
    aadc:	mov	r0, #0
    aae0:	str	r0, [r4, #20]
    aae4:	str	r0, [r4, #24]
    aae8:	mov	r0, r6
    aaec:	mov	r1, #194	; 0xc2
    aaf0:	mov	r2, #432	; 0x1b0
    aaf4:	bl	481c <open@plt>
    aaf8:	str	r0, [r4]
    aafc:	mov	r8, #6
    ab00:	cmn	r0, #1
    ab04:	beq	af08 <pcapng_create@@Base+0x464>
    ab08:	ldr	r1, [pc, #1044]	; af24 <pcapng_create@@Base+0x480>
    ab0c:	add	r1, pc, r1
    ab10:	vld1.64	{d16-d17}, [r1]!
    ab14:	vldr	d18, [r1]
    ab18:	add	r1, sp, #24
    ab1c:	mov	r2, r1
    ab20:	vst1.64	{d16-d17}, [r2]!
    ab24:	vstr	d18, [r2]
    ab28:	mov	r2, #24
    ab2c:	str	r2, [r4, #8]
    ab30:	mov	r2, #24
    ab34:	bl	4930 <write@plt>
    ab38:	mov	r6, r0
    ab3c:	cmn	r0, #1
    ab40:	str	r5, [sp, #20]
    ab44:	cmpne	r9, #0
    ab48:	bne	ab60 <pcapng_create@@Base+0xbc>
    ab4c:	ldr	r0, [r4, #8]
    ab50:	str	r0, [r4, #12]
    ab54:	cmn	r6, #1
    ab58:	bne	ac20 <pcapng_create@@Base+0x17c>
    ab5c:	b	af08 <pcapng_create@@Base+0x464>
    ab60:	str	r7, [sp, #12]
    ab64:	str	sl, [sp, #16]
    ab68:	ldrh	r0, [r9]
    ab6c:	cmp	r0, #0
    ab70:	beq	ac0c <pcapng_create@@Base+0x168>
    ab74:	ldr	r7, [pc, #940]	; af28 <pcapng_create@@Base+0x484>
    ab78:	add	r7, pc, r7
    ab7c:	ldrh	r8, [r9, #2]
    ab80:	cmp	r8, #0
    ab84:	beq	ac0c <pcapng_create@@Base+0x168>
    ab88:	ldr	r0, [r4]
    ab8c:	add	r2, r8, #4
    ab90:	mov	r1, r9
    ab94:	bl	4930 <write@plt>
    ab98:	mov	r6, r0
    ab9c:	add	r0, r8, #3
    aba0:	movw	r1, #65532	; 0xfffc
    aba4:	movt	r1, #1
    aba8:	and	sl, r0, r1
    abac:	subs	r0, sl, r8
    abb0:	cmnne	r6, #1
    abb4:	beq	abe4 <pcapng_create@@Base+0x140>
    abb8:	add	r0, r8, #1
    abbc:	sub	r5, r0, sl
    abc0:	ldr	r0, [r4]
    abc4:	mov	r1, r7
    abc8:	mov	r2, #1
    abcc:	bl	4930 <write@plt>
    abd0:	mov	r6, r0
    abd4:	cmp	r5, #0
    abd8:	addne	r5, r5, #1
    abdc:	cmnne	r6, #1
    abe0:	bne	abc0 <pcapng_create@@Base+0x11c>
    abe4:	ldr	r1, [r4, #8]
    abe8:	add	r0, sl, #4
    abec:	add	r1, r1, r0
    abf0:	str	r1, [r4, #8]
    abf4:	cmn	r6, #1
    abf8:	beq	aef0 <pcapng_create@@Base+0x44c>
    abfc:	add	r9, r9, r0
    ac00:	ldrh	r0, [r9]
    ac04:	cmp	r0, #0
    ac08:	bne	ab7c <pcapng_create@@Base+0xd8>
    ac0c:	ldr	r0, [r4, #8]
    ac10:	str	r0, [r4, #12]
    ac14:	mov	r8, #6
    ac18:	ldr	sl, [sp, #16]
    ac1c:	ldr	r7, [sp, #12]
    ac20:	add	r0, r7, sl
    ac24:	ldr	r1, [r4, #8]
    ac28:	add	r0, r0, r1
    ac2c:	add	r0, r0, #3
    ac30:	udiv	r0, r0, sl
    ac34:	mul	r0, r0, sl
    ac38:	str	r0, [r4, #8]
    ac3c:	subs	r7, r0, r1
    ac40:	cmnne	r6, #1
    ac44:	beq	ac70 <pcapng_create@@Base+0x1cc>
    ac48:	ldr	r5, [pc, #732]	; af2c <pcapng_create@@Base+0x488>
    ac4c:	add	r5, pc, r5
    ac50:	ldr	r0, [r4]
    ac54:	mov	r1, r5
    ac58:	mov	r2, #1
    ac5c:	bl	4930 <write@plt>
    ac60:	mov	r6, r0
    ac64:	subs	r7, r7, #1
    ac68:	cmnne	r6, #1
    ac6c:	bne	ac50 <pcapng_create@@Base+0x1ac>
    ac70:	ldr	r0, [r4]
    ac74:	ldr	r1, [r4, #8]
    ac78:	mov	r2, #0
    ac7c:	stm	sp, {r0, r2}
    ac80:	mov	r0, #0
    ac84:	mov	r2, #3
    ac88:	mov	r3, #1
    ac8c:	bl	4864 <mmap@plt>
    ac90:	str	r0, [r4, #4]
    ac94:	cmn	r6, #1
    ac98:	beq	af08 <pcapng_create@@Base+0x464>
    ac9c:	ldr	r0, [sp, #20]
    aca0:	ldr	r0, [r0]
    aca4:	cmn	r0, #1
    aca8:	beq	ad10 <pcapng_create@@Base+0x26c>
    acac:	ldr	r0, [fp, #12]
    acb0:	ldr	r1, [fp, #8]
    acb4:	mov	r2, #0
    acb8:	str	r2, [sp, #28]
    acbc:	mov	r3, #1
    acc0:	str	r3, [sp, #24]
    acc4:	strh	r1, [sp, #32]
    acc8:	strh	r2, [sp, #34]	; 0x22
    accc:	str	r0, [sp, #36]	; 0x24
    acd0:	mov	r0, #16
    acd4:	str	r0, [r4, #20]
    acd8:	ldr	r0, [r4]
    acdc:	add	r1, sp, #24
    ace0:	mov	r2, #16
    ace4:	bl	4930 <write@plt>
    ace8:	mov	r5, r0
    acec:	cmn	r0, #1
    acf0:	ldrne	r6, [fp, #16]
    acf4:	cmpne	r6, #0
    acf8:	bne	ad18 <pcapng_create@@Base+0x274>
    acfc:	ldr	r0, [r4, #20]
    ad00:	str	r0, [r4, #24]
    ad04:	cmn	r5, #1
    ad08:	bne	add0 <pcapng_create@@Base+0x32c>
    ad0c:	b	af08 <pcapng_create@@Base+0x464>
    ad10:	mov	r8, #7
    ad14:	b	af08 <pcapng_create@@Base+0x464>
    ad18:	str	sl, [sp, #16]
    ad1c:	ldrh	r0, [r6]
    ad20:	cmp	r0, #0
    ad24:	beq	adc0 <pcapng_create@@Base+0x31c>
    ad28:	movw	r8, #65532	; 0xfffc
    ad2c:	movt	r8, #1
    ad30:	ldr	sl, [pc, #504]	; af30 <pcapng_create@@Base+0x48c>
    ad34:	add	sl, pc, sl
    ad38:	ldrh	r7, [r6, #2]
    ad3c:	cmp	r7, #0
    ad40:	beq	adc0 <pcapng_create@@Base+0x31c>
    ad44:	ldr	r0, [r4]
    ad48:	add	r2, r7, #4
    ad4c:	mov	r1, r6
    ad50:	bl	4930 <write@plt>
    ad54:	mov	r5, r0
    ad58:	add	r0, r7, #3
    ad5c:	and	r9, r0, r8
    ad60:	subs	r0, r9, r7
    ad64:	cmnne	r5, #1
    ad68:	beq	ad98 <pcapng_create@@Base+0x2f4>
    ad6c:	add	r0, r7, #1
    ad70:	sub	r7, r0, r9
    ad74:	ldr	r0, [r4]
    ad78:	mov	r1, sl
    ad7c:	mov	r2, #1
    ad80:	bl	4930 <write@plt>
    ad84:	mov	r5, r0
    ad88:	cmp	r7, #0
    ad8c:	addne	r7, r7, #1
    ad90:	cmnne	r5, #1
    ad94:	bne	ad74 <pcapng_create@@Base+0x2d0>
    ad98:	ldr	r1, [r4, #20]
    ad9c:	add	r0, r9, #4
    ada0:	add	r1, r1, r0
    ada4:	str	r1, [r4, #20]
    ada8:	cmn	r5, #1
    adac:	beq	aefc <pcapng_create@@Base+0x458>
    adb0:	add	r6, r6, r0
    adb4:	ldrh	r0, [r6]
    adb8:	cmp	r0, #0
    adbc:	bne	ad38 <pcapng_create@@Base+0x294>
    adc0:	ldr	r0, [r4, #20]
    adc4:	str	r0, [r4, #24]
    adc8:	mov	r8, #6
    adcc:	ldr	sl, [sp, #16]
    add0:	ldr	r0, [fp, #20]
    add4:	add	r0, r0, sl
    add8:	ldr	r1, [r4, #20]
    addc:	add	r0, r0, r1
    ade0:	add	r0, r0, #3
    ade4:	udiv	r0, r0, sl
    ade8:	mul	r0, r0, sl
    adec:	str	r0, [r4, #20]
    adf0:	subs	r7, r0, r1
    adf4:	beq	ae20 <pcapng_create@@Base+0x37c>
    adf8:	ldr	r6, [pc, #308]	; af34 <pcapng_create@@Base+0x490>
    adfc:	add	r6, pc, r6
    ae00:	ldr	r0, [r4]
    ae04:	mov	r1, r6
    ae08:	mov	r2, #1
    ae0c:	bl	4930 <write@plt>
    ae10:	mov	r5, r0
    ae14:	subs	r7, r7, #1
    ae18:	cmnne	r5, #1
    ae1c:	bne	ae00 <pcapng_create@@Base+0x35c>
    ae20:	ldr	r0, [r4]
    ae24:	ldr	r2, [r4, #8]
    ae28:	ldr	r1, [r4, #20]
    ae2c:	stm	sp, {r0, r2}
    ae30:	mov	r0, #0
    ae34:	mov	r2, #3
    ae38:	mov	r3, #1
    ae3c:	bl	4864 <mmap@plt>
    ae40:	str	r0, [r4, #16]
    ae44:	cmn	r5, #1
    ae48:	beq	af08 <pcapng_create@@Base+0x464>
    ae4c:	ldr	r0, [r4, #16]
    ae50:	cmn	r0, #1
    ae54:	mov	r8, #7
    ae58:	beq	af08 <pcapng_create@@Base+0x464>
    ae5c:	ldmib	r4, {r0, r1, r2}
    ae60:	sub	r1, r1, r2
    ae64:	sub	r1, r1, #12
    ae68:	ldr	r3, [pc, #200]	; af38 <pcapng_create@@Base+0x494>
    ae6c:	add	r3, pc, r3
    ae70:	strh	r1, [r3, #2]
    ae74:	ldr	r1, [pc, #192]	; af3c <pcapng_create@@Base+0x498>
    ae78:	ldr	r1, [pc, r1]
    ae7c:	str	r1, [r0, r2]
    ae80:	ldmib	r4, {r0, r1}
    ae84:	str	r1, [r0, #4]
    ae88:	ldr	r0, [r4, #4]
    ae8c:	bic	r2, r1, #3
    ae90:	add	r0, r0, r2
    ae94:	str	r1, [r0, #-4]
    ae98:	ldr	r0, [r4, #20]
    ae9c:	ldr	r1, [r4, #24]
    aea0:	sub	r0, r0, r1
    aea4:	sub	r0, r0, #12
    aea8:	strh	r0, [r3, #2]
    aeac:	ldr	r0, [r4, #16]
    aeb0:	ldr	r2, [pc, #136]	; af40 <pcapng_create@@Base+0x49c>
    aeb4:	ldr	r2, [pc, r2]
    aeb8:	str	r2, [r0, r1]
    aebc:	ldr	r0, [r4, #16]
    aec0:	ldr	r1, [r4, #20]
    aec4:	str	r1, [r0, #4]
    aec8:	ldr	r0, [r4, #16]
    aecc:	bic	r2, r1, #3
    aed0:	add	r0, r0, r2
    aed4:	str	r1, [r0, #-4]
    aed8:	ldr	r0, [r4, #4]
    aedc:	ldr	r1, [r4, #20]
    aee0:	mov	r8, #0
    aee4:	str	r8, [r0, #20]
    aee8:	str	r1, [r0, #16]
    aeec:	b	af10 <pcapng_create@@Base+0x46c>
    aef0:	ldr	r0, [r4, #8]
    aef4:	str	r0, [r4, #12]
    aef8:	b	af04 <pcapng_create@@Base+0x460>
    aefc:	ldr	r0, [r4, #20]
    af00:	str	r0, [r4, #24]
    af04:	mov	r8, #6
    af08:	mov	r0, r4
    af0c:	bl	49b4 <pcapng_close@plt>
    af10:	mov	r0, r8
    af14:	sub	sp, fp, #48	; 0x30
    af18:	vpop	{d8-d9}
    af1c:	add	sp, sp, #4
    af20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af24:	andeq	r9, r0, ip, asr #10
    af28:	strdeq	r9, [r0], -r8
    af2c:	andeq	r9, r0, r4, lsr #8
    af30:	andeq	r9, r0, ip, lsr r3
    af34:	andeq	r9, r0, r4, ror r2
    af38:	andeq	fp, r1, ip, lsr #6
    af3c:	andeq	fp, r1, r0, lsr #6
    af40:	andeq	fp, r1, r4, ror #5

0000af44 <pcapng_close@@Base>:
    af44:	push	{r4, sl, fp, lr}
    af48:	add	fp, sp, #8
    af4c:	mov	r4, r0
    af50:	ldr	r0, [r0, #16]
    af54:	add	r1, r0, #1
    af58:	cmp	r1, #2
    af5c:	bcc	af68 <pcapng_close@@Base+0x24>
    af60:	ldr	r1, [r4, #20]
    af64:	bl	496c <munmap@plt>
    af68:	ldr	r0, [r4, #4]
    af6c:	add	r1, r0, #1
    af70:	cmp	r1, #2
    af74:	bcc	af80 <pcapng_close@@Base+0x3c>
    af78:	ldr	r1, [r4, #8]
    af7c:	bl	496c <munmap@plt>
    af80:	ldr	r0, [r4]
    af84:	cmn	r0, #1
    af88:	beq	af90 <pcapng_close@@Base+0x4c>
    af8c:	bl	49fc <close@plt>
    af90:	mov	r0, #0
    af94:	pop	{r4, sl, fp, pc}

0000af98 <pcapng_append_section_option@@Base>:
    af98:	push	{r4, r5, fp, lr}
    af9c:	add	fp, sp, #8
    afa0:	mov	r4, r0
    afa4:	mov	r0, #1
    afa8:	cmp	r4, #0
    afac:	ldrne	r2, [r4]
    afb0:	cmnne	r2, #1
    afb4:	beq	afdc <pcapng_append_section_option@@Base+0x44>
    afb8:	ldr	r2, [r4, #4]
    afbc:	add	r3, r2, #1
    afc0:	mov	r0, #5
    afc4:	cmp	r3, #2
    afc8:	popcc	{r4, r5, fp, pc}
    afcc:	cmp	r1, #0
    afd0:	ldrne	r3, [r4, #12]
    afd4:	cmpne	r3, #0
    afd8:	bne	afe0 <pcapng_append_section_option@@Base+0x48>
    afdc:	pop	{r4, r5, fp, pc}
    afe0:	add	r0, r2, r3
    afe4:	ldrh	r5, [r1, #2]
    afe8:	add	r2, r5, #4
    afec:	bl	4684 <memcpy@plt>
    aff0:	add	r0, r5, #7
    aff4:	movw	r1, #65532	; 0xfffc
    aff8:	movt	r1, #1
    affc:	and	r0, r0, r1
    b000:	ldmib	r4, {r1, r2, r3}
    b004:	add	r0, r0, r3
    b008:	str	r0, [r4, #12]
    b00c:	sub	r2, r2, r0
    b010:	sub	r2, r2, #12
    b014:	ldr	r3, [pc, #24]	; b034 <pcapng_append_section_option@@Base+0x9c>
    b018:	add	r3, pc, r3
    b01c:	strh	r2, [r3, #2]
    b020:	ldr	r2, [pc, #16]	; b038 <pcapng_append_section_option@@Base+0xa0>
    b024:	ldr	r2, [pc, r2]
    b028:	str	r2, [r1, r0]
    b02c:	mov	r0, #0
    b030:	pop	{r4, r5, fp, pc}
    b034:	andeq	fp, r1, r0, lsl #3
    b038:	andeq	fp, r1, r4, ror r1

0000b03c <pcapng_append_interface_option@@Base>:
    b03c:	push	{r4, r5, fp, lr}
    b040:	add	fp, sp, #8
    b044:	mov	r4, r0
    b048:	mov	r0, #1
    b04c:	cmp	r4, #0
    b050:	ldrne	r2, [r4]
    b054:	cmnne	r2, #1
    b058:	beq	b080 <pcapng_append_interface_option@@Base+0x44>
    b05c:	ldr	r2, [r4, #16]
    b060:	add	r3, r2, #1
    b064:	mov	r0, #5
    b068:	cmp	r3, #2
    b06c:	popcc	{r4, r5, fp, pc}
    b070:	cmp	r1, #0
    b074:	ldrne	r3, [r4, #24]
    b078:	cmpne	r3, #0
    b07c:	bne	b084 <pcapng_append_interface_option@@Base+0x48>
    b080:	pop	{r4, r5, fp, pc}
    b084:	add	r0, r2, r3
    b088:	ldrh	r5, [r1, #2]
    b08c:	add	r2, r5, #4
    b090:	bl	4684 <memcpy@plt>
    b094:	add	r0, r5, #7
    b098:	movw	r1, #65532	; 0xfffc
    b09c:	movt	r1, #1
    b0a0:	and	r0, r0, r1
    b0a4:	add	r3, r4, #16
    b0a8:	ldm	r3, {r1, r2, r3}
    b0ac:	add	r0, r0, r3
    b0b0:	str	r0, [r4, #24]
    b0b4:	sub	r2, r2, r0
    b0b8:	sub	r2, r2, #12
    b0bc:	ldr	r3, [pc, #24]	; b0dc <pcapng_append_interface_option@@Base+0xa0>
    b0c0:	add	r3, pc, r3
    b0c4:	strh	r2, [r3, #2]
    b0c8:	ldr	r2, [pc, #16]	; b0e0 <pcapng_append_interface_option@@Base+0xa4>
    b0cc:	ldr	r2, [pc, r2]
    b0d0:	str	r2, [r1, r0]
    b0d4:	mov	r0, #0
    b0d8:	pop	{r4, r5, fp, pc}
    b0dc:	ldrdeq	fp, [r1], -r8
    b0e0:	andeq	fp, r1, ip, asr #1

0000b0e4 <pcapng_append_packet@@Base>:
    b0e4:	push	{r4, r5, fp, lr}
    b0e8:	add	fp, sp, #8
    b0ec:	mov	r4, r0
    b0f0:	mov	r0, #1
    b0f4:	cmp	r4, #0
    b0f8:	ldrne	r2, [r4]
    b0fc:	cmnne	r2, #1
    b100:	bne	b108 <pcapng_append_packet@@Base+0x24>
    b104:	pop	{r4, r5, fp, pc}
    b108:	ldr	r5, [r1, #4]
    b10c:	mov	r0, r2
    b110:	mov	r2, r5
    b114:	bl	4930 <write@plt>
    b118:	mov	r1, r0
    b11c:	mov	r0, #0
    b120:	cmn	r1, #1
    b124:	popeq	{r4, r5, fp, pc}
    b128:	ldr	r1, [r4, #4]
    b12c:	ldr	r2, [r1, #16]
    b130:	ldr	r3, [r1, #20]
    b134:	adds	r2, r2, r5
    b138:	str	r2, [r1, #16]
    b13c:	adc	r2, r3, #0
    b140:	str	r2, [r1, #20]
    b144:	pop	{r4, r5, fp, pc}

0000b148 <btbb_pcapng_create_file@@Base>:
    b148:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    b14c:	add	fp, sp, #24
    b150:	sub	sp, sp, #264	; 0x108
    b154:	mov	r8, r2
    b158:	mov	r7, r1
    b15c:	mov	r6, r0
    b160:	mov	r0, #28
    b164:	bl	47e0 <malloc@plt>
    b168:	cmp	r0, #0
    b16c:	mvneq	r0, #4
    b170:	subeq	sp, fp, #24
    b174:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
    b178:	mov	r5, r0
    b17c:	mov	r9, sp
    b180:	orr	r0, r9, #2
    b184:	mov	r4, #0
    b188:	mov	r1, #0
    b18c:	movw	r2, #258	; 0x102
    b190:	bl	48dc <memset@plt>
    b194:	mov	r0, #3
    b198:	strh	r0, [sp]
    b19c:	cmp	r7, #0
    b1a0:	beq	b1d0 <btbb_pcapng_create_file@@Base+0x88>
    b1a4:	add	r4, r9, #4
    b1a8:	mov	r0, r4
    b1ac:	mov	r1, r7
    b1b0:	mov	r2, #256	; 0x100
    b1b4:	bl	48f4 <strncpy@plt>
    b1b8:	mov	r0, #0
    b1bc:	strb	r0, [sp, #259]	; 0x103
    b1c0:	mov	r0, r4
    b1c4:	bl	484c <strlen@plt>
    b1c8:	strh	r0, [sp, #2]
    b1cc:	mov	r4, r9
    b1d0:	mov	r0, r5
    b1d4:	mov	r1, r6
    b1d8:	mov	r2, r4
    b1dc:	bl	b208 <btbb_pcapng_create_file@@Base+0xc0>
    b1e0:	mov	r4, r0
    b1e4:	cmp	r0, #0
    b1e8:	beq	b1f8 <btbb_pcapng_create_file@@Base+0xb0>
    b1ec:	mov	r0, r5
    b1f0:	bl	4660 <free@plt>
    b1f4:	b	b1fc <btbb_pcapng_create_file@@Base+0xb4>
    b1f8:	str	r5, [r8]
    b1fc:	rsb	r0, r4, #0
    b200:	sub	sp, fp, #24
    b204:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    b208:	push	{r4, r5, r6, sl, fp, lr}
    b20c:	add	fp, sp, #16
    b210:	sub	sp, sp, #16
    b214:	mov	r5, r2
    b218:	mov	r6, r1
    b21c:	mov	r4, r0
    b220:	bl	48a0 <getpagesize@plt>
    b224:	mov	r3, r0
    b228:	mov	r0, #400	; 0x190
    b22c:	mov	r1, #255	; 0xff
    b230:	str	r1, [sp]
    b234:	stmib	sp, {r0, r5}
    b238:	str	r3, [sp, #12]
    b23c:	ldr	r2, [pc, #76]	; b290 <btbb_pcapng_create_file@@Base+0x148>
    b240:	ldr	r2, [pc, r2]
    b244:	mov	r0, r4
    b248:	mov	r1, r6
    b24c:	bl	4714 <pcapng_create@plt>
    b250:	mov	r6, r0
    b254:	cmp	r0, #0
    b258:	bne	b284 <btbb_pcapng_create_file@@Base+0x13c>
    b25c:	mov	r0, r4
    b260:	mov	r1, r5
    b264:	bl	b9e4 <lell_pcapng_close@@Base+0x28>
    b268:	cmp	r0, #0
    b26c:	beq	b280 <btbb_pcapng_create_file@@Base+0x138>
    b270:	mov	r6, r0
    b274:	mov	r0, r4
    b278:	bl	49b4 <pcapng_close@plt>
    b27c:	b	b284 <btbb_pcapng_create_file@@Base+0x13c>
    b280:	mov	r6, #0
    b284:	mov	r0, r6
    b288:	sub	sp, fp, #16
    b28c:	pop	{r4, r5, r6, sl, fp, pc}
    b290:	andeq	sl, r1, ip, asr #30

0000b294 <btbb_pcapng_append_packet@@Base>:
    b294:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b298:	add	fp, sp, #28
    b29c:	sub	sp, sp, #484	; 0x1e4
    b2a0:	str	r3, [fp, #-492]	; 0xfffffe14
    b2a4:	str	r2, [fp, #-496]	; 0xfffffe10
    b2a8:	str	r0, [fp, #-488]	; 0xfffffe18
    b2ac:	ldr	r8, [fp, #24]
    b2b0:	mov	r0, r8
    b2b4:	bl	4840 <btbb_packet_get_payload_length@plt>
    b2b8:	mov	r7, r0
    b2bc:	add	r0, r0, #7
    b2c0:	bic	r0, r0, #7
    b2c4:	sub	sl, sp, r0
    b2c8:	mov	sp, sl
    b2cc:	mov	r0, r8
    b2d0:	mov	r1, sl
    b2d4:	bl	460c <btbb_get_payload_packed@plt>
    b2d8:	mov	r0, r8
    b2dc:	bl	4984 <btbb_packet_get_channel@plt>
    b2e0:	str	r0, [fp, #-500]	; 0xfffffe0c
    b2e4:	mov	r0, r8
    b2e8:	bl	4678 <btbb_packet_get_ac_errors@plt>
    b2ec:	str	r0, [fp, #-504]	; 0xfffffe08
    b2f0:	mov	r0, r8
    b2f4:	bl	48b8 <btbb_packet_get_transport@plt>
    b2f8:	str	r0, [fp, #-508]	; 0xfffffe04
    b2fc:	mov	r0, r8
    b300:	bl	466c <btbb_packet_get_modulation@plt>
    b304:	mov	r9, r0
    b308:	mov	r0, r8
    b30c:	bl	490c <btbb_packet_get_lap@plt>
    b310:	mov	r4, r0
    b314:	mov	r0, r8
    b318:	bl	4870 <btbb_packet_get_header_packed@plt>
    b31c:	sub	sp, sp, #56	; 0x38
    b320:	str	sl, [sp, #48]	; 0x30
    b324:	ldr	r1, [fp, #8]
    b328:	ldr	r2, [fp, #12]
    b32c:	mov	r3, #3
    b330:	cmp	r2, r1
    b334:	movwlt	r3, #7
    b338:	ldr	r5, [fp, #16]
    b33c:	cmn	r5, #1
    b340:	orrne	r3, r3, #16
    b344:	ldr	r6, [fp, #20]
    b348:	cmp	r6, #255	; 0xff
    b34c:	orrne	r3, r3, #128	; 0x80
    b350:	str	r3, [sp, #44]	; 0x2c
    b354:	str	r0, [sp, #40]	; 0x28
    b358:	str	r6, [sp, #36]	; 0x24
    b35c:	str	r5, [sp, #32]
    b360:	cmp	r7, #400	; 0x190
    b364:	movge	r7, #400	; 0x190
    b368:	str	r7, [sp]
    b36c:	ldr	r0, [fp, #-500]	; 0xfffffe0c
    b370:	stmib	sp, {r0, r1, r2}
    b374:	ldr	r0, [fp, #-504]	; 0xfffffe08
    b378:	str	r0, [sp, #16]
    b37c:	ldr	r0, [fp, #-508]	; 0xfffffe04
    b380:	str	r0, [sp, #20]
    b384:	str	r9, [sp, #24]
    b388:	str	r4, [sp, #28]
    b38c:	sub	r4, fp, #484	; 0x1e4
    b390:	mov	r0, r4
    b394:	ldr	r2, [fp, #-496]	; 0xfffffe10
    b398:	ldr	r3, [fp, #-492]	; 0xfffffe14
    b39c:	bl	b3bc <btbb_pcapng_append_packet@@Base+0x128>
    b3a0:	add	sp, sp, #56	; 0x38
    b3a4:	ldr	r0, [fp, #-488]	; 0xfffffe18
    b3a8:	mov	r1, r4
    b3ac:	bl	b4e8 <btbb_pcapng_append_packet@@Base+0x254>
    b3b0:	rsb	r0, r0, #0
    b3b4:	sub	sp, fp, #28
    b3b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b3bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    b3c0:	add	fp, sp, #24
    b3c4:	mov	r4, r0
    b3c8:	mov	r0, #6
    b3cc:	str	r0, [r4]
    b3d0:	mov	r0, #0
    b3d4:	str	r0, [r4, #8]
    b3d8:	str	r3, [r4, #12]
    b3dc:	str	r2, [r4, #16]
    b3e0:	strb	r0, [r4, #33]	; 0x21
    b3e4:	strh	r0, [r4, #34]	; 0x22
    b3e8:	ldr	r0, [fp, #12]
    b3ec:	strb	r0, [r4, #28]
    b3f0:	ldr	r0, [fp, #16]
    b3f4:	strb	r0, [r4, #29]
    b3f8:	ldr	r0, [fp, #20]
    b3fc:	strb	r0, [r4, #30]
    b400:	ldr	r0, [fp, #24]
    b404:	strb	r0, [r4, #31]
    b408:	ldr	r8, [fp, #8]
    b40c:	add	r0, r8, #22
    b410:	str	r0, [r4, #20]
    b414:	str	r0, [r4, #24]
    b418:	ldr	r0, [fp, #28]
    b41c:	ldr	r1, [fp, #32]
    b420:	orr	r0, r1, r0, lsl #4
    b424:	strb	r0, [r4, #32]
    b428:	add	r5, r8, #61	; 0x3d
    b42c:	bic	r7, r5, #3
    b430:	str	r7, [r4, #4]
    b434:	ldr	r0, [fp, #36]	; 0x24
    b438:	bl	ba78 <lell_pcapng_close@@Base+0xbc>
    b43c:	str	r0, [r4, #36]	; 0x24
    b440:	ldr	r0, [fp, #40]	; 0x28
    b444:	bic	r0, r0, #-16777216	; 0xff000000
    b448:	ldr	r1, [fp, #44]	; 0x2c
    b44c:	orr	r0, r0, r1, lsl #24
    b450:	bl	ba78 <lell_pcapng_close@@Base+0xbc>
    b454:	str	r0, [r4, #40]	; 0x28
    b458:	ldr	r0, [fp, #48]	; 0x30
    b45c:	bl	ba78 <lell_pcapng_close@@Base+0xbc>
    b460:	str	r0, [r4, #44]	; 0x2c
    b464:	ldr	r6, [fp, #52]	; 0x34
    b468:	mov	r0, r6
    b46c:	bl	ba74 <lell_pcapng_close@@Base+0xb8>
    b470:	strh	r6, [r4, #48]	; 0x30
    b474:	cmp	r8, #0
    b478:	beq	b49c <btbb_pcapng_append_packet@@Base+0x208>
    b47c:	cmp	r8, #400	; 0x190
    b480:	bhi	b4bc <btbb_pcapng_append_packet@@Base+0x228>
    b484:	ldr	r1, [fp, #56]	; 0x38
    b488:	add	r0, r4, #50	; 0x32
    b48c:	mov	r2, r8
    b490:	bl	4684 <memcpy@plt>
    b494:	orr	r0, r6, #32
    b498:	b	b4a4 <btbb_pcapng_append_packet@@Base+0x210>
    b49c:	movw	r0, #65503	; 0xffdf
    b4a0:	and	r0, r6, r0
    b4a4:	lsr	r1, r5, #2
    b4a8:	strh	r0, [r4, #48]	; 0x30
    b4ac:	add	r0, r4, r1, lsl #2
    b4b0:	mov	r1, #0
    b4b4:	stmdb	r0, {r1, r7}
    b4b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    b4bc:	ldr	r0, [pc, #24]	; b4dc <btbb_pcapng_append_packet@@Base+0x248>
    b4c0:	add	r0, pc, r0
    b4c4:	ldr	r1, [pc, #20]	; b4e0 <btbb_pcapng_append_packet@@Base+0x24c>
    b4c8:	add	r1, pc, r1
    b4cc:	ldr	r3, [pc, #16]	; b4e4 <btbb_pcapng_append_packet@@Base+0x250>
    b4d0:	add	r3, pc, r3
    b4d4:	mov	r2, #221	; 0xdd
    b4d8:	bl	4a08 <__assert_fail@plt>
    b4dc:	ldrdeq	r8, [r0], -lr
    b4e0:	andeq	r8, r0, r1, asr #23
    b4e4:	andeq	r8, r0, r6, lsl #24
    b4e8:	b	48ac <pcapng_append_packet@plt>

0000b4ec <btbb_pcapng_record_bdaddr@@Base>:
    b4ec:	push	{fp, lr}
    b4f0:	mov	fp, sp
    b4f4:	sub	sp, sp, #8
    b4f8:	ldr	r1, [fp, #12]
    b4fc:	str	r1, [sp, #4]
    b500:	ldr	r1, [fp, #8]
    b504:	str	r1, [sp]
    b508:	bl	b518 <btbb_pcapng_record_bdaddr@@Base+0x2c>
    b50c:	rsb	r0, r0, #0
    b510:	mov	sp, fp
    b514:	pop	{fp, pc}
    b518:	push	{fp, lr}
    b51c:	mov	fp, sp
    b520:	sub	sp, sp, #16
    b524:	strb	r2, [sp, #8]
    b528:	movw	r1, #54080	; 0xd340
    b52c:	movt	r1, #12
    b530:	str	r1, [sp, #4]
    b534:	strb	r3, [sp, #12]
    b538:	lsr	r1, r2, #8
    b53c:	strb	r1, [sp, #9]
    b540:	lsr	r1, r2, #16
    b544:	strb	r1, [sp, #10]
    b548:	lsr	r1, r2, #24
    b54c:	strb	r1, [sp, #11]
    b550:	lsr	r1, r3, #8
    b554:	strb	r1, [sp, #13]
    b558:	ldr	r1, [fp, #8]
    b55c:	strb	r1, [sp, #14]
    b560:	ldr	r1, [fp, #12]
    b564:	strb	r1, [sp, #15]
    b568:	add	r1, sp, #4
    b56c:	bl	4654 <pcapng_append_interface_option@plt>
    b570:	mov	sp, fp
    b574:	pop	{fp, pc}

0000b578 <btbb_pcapng_record_btclock@@Base>:
    b578:	push	{fp, lr}
    b57c:	mov	fp, sp
    b580:	sub	sp, sp, #16
    b584:	ldr	r1, [fp, #20]
    b588:	str	r1, [sp, #12]
    b58c:	ldr	r1, [fp, #16]
    b590:	str	r1, [sp, #8]
    b594:	ldr	r1, [fp, #12]
    b598:	str	r1, [sp, #4]
    b59c:	ldr	r1, [fp, #8]
    b5a0:	str	r1, [sp]
    b5a4:	bl	b5b4 <btbb_pcapng_record_btclock@@Base+0x3c>
    b5a8:	rsb	r0, r0, #0
    b5ac:	mov	sp, fp
    b5b0:	pop	{fp, pc}
    b5b4:	push	{r4, r5, fp, lr}
    b5b8:	add	fp, sp, #8
    b5bc:	sub	sp, sp, #24
    b5c0:	mov	r4, r2
    b5c4:	mov	r5, r0
    b5c8:	movw	r0, #54081	; 0xd341
    b5cc:	movt	r0, #24
    b5d0:	str	r0, [sp]
    b5d4:	ldr	r0, [fp, #12]
    b5d8:	str	r0, [sp, #8]
    b5dc:	ldr	r0, [fp, #8]
    b5e0:	str	r0, [sp, #4]
    b5e4:	mov	r0, r2
    b5e8:	bl	ba78 <lell_pcapng_close@@Base+0xbc>
    b5ec:	ldr	r0, [fp, #16]
    b5f0:	str	r0, [sp, #16]
    b5f4:	str	r4, [sp, #12]
    b5f8:	ldr	r0, [fp, #20]
    b5fc:	str	r0, [sp, #20]
    b600:	mov	r1, sp
    b604:	mov	r0, r5
    b608:	bl	4654 <pcapng_append_interface_option@plt>
    b60c:	sub	sp, fp, #8
    b610:	pop	{r4, r5, fp, pc}

0000b614 <btbb_pcapng_close@@Base>:
    b614:	push	{r4, sl, fp, lr}
    b618:	add	fp, sp, #8
    b61c:	mov	r4, r0
    b620:	bl	49b4 <pcapng_close@plt>
    b624:	cmp	r4, #0
    b628:	beq	b634 <btbb_pcapng_close@@Base+0x20>
    b62c:	mov	r0, r4
    b630:	bl	4660 <free@plt>
    b634:	mvn	r0, #0
    b638:	pop	{r4, sl, fp, pc}

0000b63c <lell_pcapng_create_file@@Base>:
    b63c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    b640:	add	fp, sp, #24
    b644:	sub	sp, sp, #264	; 0x108
    b648:	mov	r8, r2
    b64c:	mov	r7, r1
    b650:	mov	r6, r0
    b654:	mov	r0, #28
    b658:	bl	47e0 <malloc@plt>
    b65c:	cmp	r0, #0
    b660:	mvneq	r0, #4
    b664:	subeq	sp, fp, #24
    b668:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
    b66c:	mov	r5, r0
    b670:	mov	r9, sp
    b674:	orr	r0, r9, #2
    b678:	mov	r4, #0
    b67c:	mov	r1, #0
    b680:	movw	r2, #258	; 0x102
    b684:	bl	48dc <memset@plt>
    b688:	mov	r0, #3
    b68c:	strh	r0, [sp]
    b690:	cmp	r7, #0
    b694:	beq	b6c4 <lell_pcapng_create_file@@Base+0x88>
    b698:	add	r4, r9, #4
    b69c:	mov	r0, r4
    b6a0:	mov	r1, r7
    b6a4:	mov	r2, #256	; 0x100
    b6a8:	bl	48f4 <strncpy@plt>
    b6ac:	mov	r0, #0
    b6b0:	strb	r0, [sp, #259]	; 0x103
    b6b4:	mov	r0, r4
    b6b8:	bl	484c <strlen@plt>
    b6bc:	strh	r0, [sp, #2]
    b6c0:	mov	r4, r9
    b6c4:	mov	r0, r5
    b6c8:	mov	r1, r6
    b6cc:	mov	r2, r4
    b6d0:	bl	b6fc <lell_pcapng_create_file@@Base+0xc0>
    b6d4:	mov	r4, r0
    b6d8:	cmp	r0, #0
    b6dc:	beq	b6ec <lell_pcapng_create_file@@Base+0xb0>
    b6e0:	mov	r0, r5
    b6e4:	bl	4660 <free@plt>
    b6e8:	b	b6f0 <lell_pcapng_create_file@@Base+0xb4>
    b6ec:	str	r5, [r8]
    b6f0:	rsb	r0, r4, #0
    b6f4:	sub	sp, fp, #24
    b6f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    b6fc:	push	{r4, r5, r6, sl, fp, lr}
    b700:	add	fp, sp, #16
    b704:	sub	sp, sp, #16
    b708:	mov	r5, r2
    b70c:	mov	r6, r1
    b710:	mov	r4, r0
    b714:	bl	48a0 <getpagesize@plt>
    b718:	mov	r3, r0
    b71c:	mov	r0, #64	; 0x40
    b720:	mov	r1, #256	; 0x100
    b724:	str	r1, [sp]
    b728:	stmib	sp, {r0, r5}
    b72c:	str	r3, [sp, #12]
    b730:	ldr	r2, [pc, #76]	; b784 <lell_pcapng_create_file@@Base+0x148>
    b734:	ldr	r2, [pc, r2]
    b738:	mov	r0, r4
    b73c:	mov	r1, r6
    b740:	bl	4714 <pcapng_create@plt>
    b744:	mov	r6, r0
    b748:	cmp	r0, #0
    b74c:	bne	b778 <lell_pcapng_create_file@@Base+0x13c>
    b750:	mov	r0, r4
    b754:	mov	r1, r5
    b758:	bl	b9e4 <lell_pcapng_close@@Base+0x28>
    b75c:	cmp	r0, #0
    b760:	beq	b774 <lell_pcapng_create_file@@Base+0x138>
    b764:	mov	r6, r0
    b768:	mov	r0, r4
    b76c:	bl	49b4 <pcapng_close@plt>
    b770:	b	b778 <lell_pcapng_create_file@@Base+0x13c>
    b774:	mov	r6, #0
    b778:	mov	r0, r6
    b77c:	sub	sp, fp, #16
    b780:	pop	{r4, r5, r6, sl, fp, pc}
    b784:	andeq	sl, r1, r8, asr sl

0000b788 <lell_pcapng_append_packet@@Base>:
    b788:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b78c:	add	fp, sp, #28
    b790:	sub	sp, sp, #340	; 0x154
    b794:	mov	r8, r3
    b798:	mov	r9, r2
    b79c:	mov	sl, r0
    b7a0:	ldr	r4, [fp, #8]
    b7a4:	ldr	r5, [fp, #12]
    b7a8:	mov	r6, #35	; 0x23
    b7ac:	cmp	r5, r4
    b7b0:	movwlt	r6, #39	; 0x27
    b7b4:	ldr	r7, [fp, #20]
    b7b8:	mov	r0, r7
    b7bc:	bl	4630 <lell_packet_is_data@plt>
    b7c0:	clz	r0, r0
    b7c4:	lsr	r0, r0, #5
    b7c8:	orr	r0, r6, r0, lsl #4
    b7cc:	ldr	r1, [r7, #72]	; 0x48
    b7d0:	ldrb	r2, [r7, #69]	; 0x45
    b7d4:	ldrb	r3, [r7, #92]	; 0x5c
    b7d8:	str	r7, [sp, #28]
    b7dc:	str	r0, [sp, #24]
    b7e0:	ldr	r0, [fp, #16]
    b7e4:	str	r0, [sp, #20]
    b7e8:	str	r3, [sp, #16]
    b7ec:	stmib	sp, {r2, r4, r5}
    b7f0:	add	r0, r1, #9
    b7f4:	str	r0, [sp]
    b7f8:	add	r4, sp, #32
    b7fc:	mov	r0, r4
    b800:	mov	r2, r9
    b804:	mov	r3, r8
    b808:	bl	b860 <lell_pcapng_append_packet@@Base+0xd8>
    b80c:	mov	r0, sl
    b810:	mov	r1, r4
    b814:	bl	b93c <lell_pcapng_append_packet@@Base+0x1b4>
    b818:	rsb	r4, r0, #0
    b81c:	cmp	r0, #0
    b820:	bne	b854 <lell_pcapng_append_packet@@Base+0xcc>
    b824:	mov	r0, r7
    b828:	bl	4630 <lell_packet_is_data@plt>
    b82c:	cmp	r0, #0
    b830:	bne	b854 <lell_pcapng_append_packet@@Base+0xcc>
    b834:	ldrb	r0, [r7, #80]	; 0x50
    b838:	cmp	r0, #5
    b83c:	bne	b854 <lell_pcapng_append_packet@@Base+0xcc>
    b840:	str	r7, [sp]
    b844:	mov	r0, sl
    b848:	mov	r2, r9
    b84c:	mov	r3, r8
    b850:	bl	487c <lell_pcapng_record_connect_req@plt>
    b854:	mov	r0, r4
    b858:	sub	sp, fp, #28
    b85c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b860:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b864:	add	fp, sp, #28
    b868:	sub	sp, sp, #4
    b86c:	ldr	r5, [fp, #8]
    b870:	cmp	r5, #256	; 0x100
    b874:	bcs	b910 <lell_pcapng_append_packet@@Base+0x188>
    b878:	mov	r4, r0
    b87c:	add	r1, r5, #10
    b880:	add	r0, r5, #49	; 0x31
    b884:	bic	r6, r0, #3
    b888:	lsr	r7, r0, #2
    b88c:	ldr	r9, [fp, #32]
    b890:	ldr	r0, [fp, #28]
    b894:	ldr	lr, [fp, #20]
    b898:	ldr	sl, [fp, #16]
    b89c:	ldr	ip, [fp, #12]
    b8a0:	str	r6, [r4, #4]
    b8a4:	mov	r8, #6
    b8a8:	str	r8, [r4]
    b8ac:	mov	r8, #0
    b8b0:	str	r8, [r4, #8]
    b8b4:	str	r2, [r4, #16]
    b8b8:	str	r1, [r4, #20]
    b8bc:	str	r1, [r4, #24]
    b8c0:	strb	ip, [r4, #28]
    b8c4:	strb	sl, [r4, #29]
    b8c8:	strb	lr, [r4, #30]
    b8cc:	ldr	r1, [fp, #24]
    b8d0:	strb	r1, [r4, #31]
    b8d4:	str	r3, [r4, #12]
    b8d8:	bl	ba78 <lell_pcapng_close@@Base+0xbc>
    b8dc:	str	r0, [r4, #32]
    b8e0:	mov	r0, r9
    b8e4:	bl	ba74 <lell_pcapng_close@@Base+0xb8>
    b8e8:	strh	r9, [r4, #36]	; 0x24
    b8ec:	add	r0, r4, #38	; 0x26
    b8f0:	ldr	r1, [fp, #36]	; 0x24
    b8f4:	mov	r2, r5
    b8f8:	bl	4684 <memcpy@plt>
    b8fc:	add	r0, r4, r7, lsl #2
    b900:	str	r8, [r0, #-8]
    b904:	str	r6, [r0, #-4]
    b908:	sub	sp, fp, #28
    b90c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b910:	ldr	r0, [pc, #24]	; b930 <lell_pcapng_append_packet@@Base+0x1a8>
    b914:	add	r0, pc, r0
    b918:	ldr	r1, [pc, #20]	; b934 <lell_pcapng_append_packet@@Base+0x1ac>
    b91c:	add	r1, pc, r1
    b920:	ldr	r3, [pc, #16]	; b938 <lell_pcapng_append_packet@@Base+0x1b0>
    b924:	add	r3, pc, r3
    b928:	movw	r2, #441	; 0x1b9
    b92c:	bl	4a08 <__assert_fail@plt>
    b930:	strdeq	r8, [r0], -lr
    b934:	andeq	r8, r0, sp, ror #14
    b938:	andeq	r8, r0, r7, lsl #18
    b93c:	b	48ac <pcapng_append_packet@plt>

0000b940 <lell_pcapng_record_connect_req@@Base>:
    b940:	push	{fp, lr}
    b944:	mov	fp, sp
    b948:	sub	sp, sp, #8
    b94c:	ldr	r1, [fp, #8]
    b950:	str	r1, [sp]
    b954:	bl	b964 <lell_pcapng_record_connect_req@@Base+0x24>
    b958:	rsb	r0, r0, #0
    b95c:	mov	sp, fp
    b960:	pop	{fp, pc}
    b964:	push	{fp, lr}
    b968:	mov	fp, sp
    b96c:	sub	sp, sp, #48	; 0x30
    b970:	stmib	sp, {r2, r3}
    b974:	movw	r1, #54144	; 0xd380
    b978:	movt	r1, #46	; 0x2e
    b97c:	str	r1, [sp]
    b980:	mov	r1, sp
    b984:	ldr	r2, [fp, #8]
    b988:	mov	ip, #32
    b98c:	add	lr, r2, #16
    b990:	vld1.8	{d16-d17}, [r2], ip
    b994:	add	r3, r1, #12
    b998:	vld1.8	{d18-d19}, [lr]
    b99c:	vst1.32	{d16-d17}, [r3]
    b9a0:	add	r3, r1, #28
    b9a4:	vst1.32	{d18-d19}, [r3]
    b9a8:	ldrh	r2, [r2]
    b9ac:	strh	r2, [sp, #44]	; 0x2c
    b9b0:	bl	4654 <pcapng_append_interface_option@plt>
    b9b4:	mov	sp, fp
    b9b8:	pop	{fp, pc}

0000b9bc <lell_pcapng_close@@Base>:
    b9bc:	push	{r4, sl, fp, lr}
    b9c0:	add	fp, sp, #8
    b9c4:	mov	r4, r0
    b9c8:	bl	49b4 <pcapng_close@plt>
    b9cc:	cmp	r4, #0
    b9d0:	beq	b9dc <lell_pcapng_close@@Base+0x20>
    b9d4:	mov	r0, r4
    b9d8:	bl	4660 <free@plt>
    b9dc:	mvn	r0, #0
    b9e0:	pop	{r4, sl, fp, pc}
    b9e4:	cmp	r1, #0
    b9e8:	ldrhne	r3, [r1]
    b9ec:	cmpne	r3, #0
    b9f0:	bne	ba2c <lell_pcapng_close@@Base+0x70>
    b9f4:	push	{fp, lr}
    b9f8:	mov	fp, sp
    b9fc:	sub	sp, sp, #8
    ba00:	ldr	r1, [pc, #100]	; ba6c <lell_pcapng_close@@Base+0xb0>
    ba04:	add	r1, pc, r1
    ba08:	ldrb	r1, [r1, #4]
    ba0c:	strb	r1, [sp, #4]
    ba10:	ldr	r1, [pc, #88]	; ba70 <lell_pcapng_close@@Base+0xb4>
    ba14:	ldr	r1, [pc, r1]
    ba18:	str	r1, [sp]
    ba1c:	mov	r1, sp
    ba20:	bl	4654 <pcapng_append_interface_option@plt>
    ba24:	mov	sp, fp
    ba28:	pop	{fp, pc}
    ba2c:	movw	ip, #65532	; 0xfffc
    ba30:	movt	ip, #1
    ba34:	ldrh	r2, [r1, #2]
    ba38:	cmp	r2, #0
    ba3c:	beq	b9f4 <lell_pcapng_close@@Base+0x38>
    ba40:	uxth	r3, r3
    ba44:	cmp	r3, #9
    ba48:	moveq	r0, #0
    ba4c:	bxeq	lr
    ba50:	add	r2, r2, #3
    ba54:	and	r2, r2, ip
    ba58:	add	r1, r1, r2
    ba5c:	ldrh	r3, [r1, #4]!
    ba60:	cmp	r3, #0
    ba64:	bne	ba34 <lell_pcapng_close@@Base+0x78>
    ba68:	b	b9f4 <lell_pcapng_close@@Base+0x38>
    ba6c:	andeq	r8, r0, r0, lsl #13
    ba70:	andeq	r8, r0, r0, ror r6
    ba74:	bx	lr
    ba78:	bx	lr
    ba7c:	cmp	r3, #0
    ba80:	cmpeq	r2, #0
    ba84:	bne	ba9c <lell_pcapng_close@@Base+0xe0>
    ba88:	cmp	r1, #0
    ba8c:	cmpeq	r0, #0
    ba90:	mvnne	r1, #0
    ba94:	mvnne	r0, #0
    ba98:	b	bab8 <lell_pcapng_close@@Base+0xfc>
    ba9c:	sub	sp, sp, #8
    baa0:	push	{sp, lr}
    baa4:	bl	bac8 <lell_pcapng_close@@Base+0x10c>
    baa8:	ldr	lr, [sp, #4]
    baac:	add	sp, sp, #8
    bab0:	pop	{r2, r3}
    bab4:	bx	lr
    bab8:	push	{r1, lr}
    babc:	mov	r0, #8
    bac0:	bl	45d0 <raise@plt>
    bac4:	pop	{r1, pc}
    bac8:	cmp	r1, r3
    bacc:	cmpeq	r0, r2
    bad0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bad4:	mov	r4, r0
    bad8:	movcc	r0, #0
    badc:	mov	r5, r1
    bae0:	ldr	lr, [sp, #36]	; 0x24
    bae4:	movcc	r1, r0
    bae8:	bcc	bbe4 <lell_pcapng_close@@Base+0x228>
    baec:	cmp	r3, #0
    baf0:	clzeq	ip, r2
    baf4:	clzne	ip, r3
    baf8:	addeq	ip, ip, #32
    bafc:	cmp	r5, #0
    bb00:	clzeq	r1, r4
    bb04:	addeq	r1, r1, #32
    bb08:	clzne	r1, r5
    bb0c:	sub	ip, ip, r1
    bb10:	sub	sl, ip, #32
    bb14:	lsl	r9, r3, ip
    bb18:	rsb	fp, ip, #32
    bb1c:	orr	r9, r9, r2, lsl sl
    bb20:	orr	r9, r9, r2, lsr fp
    bb24:	lsl	r8, r2, ip
    bb28:	cmp	r5, r9
    bb2c:	cmpeq	r4, r8
    bb30:	movcc	r0, #0
    bb34:	movcc	r1, r0
    bb38:	bcc	bb54 <lell_pcapng_close@@Base+0x198>
    bb3c:	mov	r0, #1
    bb40:	subs	r4, r4, r8
    bb44:	lsl	r1, r0, sl
    bb48:	orr	r1, r1, r0, lsr fp
    bb4c:	lsl	r0, r0, ip
    bb50:	sbc	r5, r5, r9
    bb54:	cmp	ip, #0
    bb58:	beq	bbe4 <lell_pcapng_close@@Base+0x228>
    bb5c:	lsr	r6, r8, #1
    bb60:	orr	r6, r6, r9, lsl #31
    bb64:	lsr	r7, r9, #1
    bb68:	mov	r2, ip
    bb6c:	b	bb90 <lell_pcapng_close@@Base+0x1d4>
    bb70:	subs	r3, r4, r6
    bb74:	sbc	r8, r5, r7
    bb78:	adds	r3, r3, r3
    bb7c:	adc	r8, r8, r8
    bb80:	adds	r4, r3, #1
    bb84:	adc	r5, r8, #0
    bb88:	subs	r2, r2, #1
    bb8c:	beq	bbac <lell_pcapng_close@@Base+0x1f0>
    bb90:	cmp	r5, r7
    bb94:	cmpeq	r4, r6
    bb98:	bcs	bb70 <lell_pcapng_close@@Base+0x1b4>
    bb9c:	adds	r4, r4, r4
    bba0:	adc	r5, r5, r5
    bba4:	subs	r2, r2, #1
    bba8:	bne	bb90 <lell_pcapng_close@@Base+0x1d4>
    bbac:	lsr	r3, r4, ip
    bbb0:	orr	r3, r3, r5, lsl fp
    bbb4:	lsr	r2, r5, ip
    bbb8:	orr	r3, r3, r5, lsr sl
    bbbc:	adds	r0, r0, r4
    bbc0:	mov	r4, r3
    bbc4:	lsl	r3, r2, ip
    bbc8:	orr	r3, r3, r4, lsl sl
    bbcc:	lsl	ip, r4, ip
    bbd0:	orr	r3, r3, r4, lsr fp
    bbd4:	adc	r1, r1, r5
    bbd8:	subs	r0, r0, ip
    bbdc:	mov	r5, r2
    bbe0:	sbc	r1, r1, r3
    bbe4:	cmp	lr, #0
    bbe8:	strdne	r4, [lr]
    bbec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

Disassembly of section .fini:

0000bbf0 <.fini>:
    bbf0:	push	{r3, lr}
    bbf4:	pop	{r3, pc}
