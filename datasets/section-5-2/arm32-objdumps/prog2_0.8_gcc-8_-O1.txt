
../repos/prog2/0.8:     file format elf32-littlearm


Disassembly of section .init:

000105e8 <.init>:
   105e8:	push	{r3, lr}
   105ec:	bl	10698 <_start@@Base+0x3c>
   105f0:	pop	{r3, pc}

Disassembly of section .plt:

000105f4 <printf@plt-0x14>:
   105f4:	push	{lr}		; (str lr, [sp, #-4]!)
   105f8:	ldr	lr, [pc, #4]	; 10604 <printf@plt-0x4>
   105fc:	add	lr, pc, lr
   10600:	ldr	pc, [lr, #8]!
   10604:	strdeq	r0, [r1], -ip

00010608 <printf@plt>:
   10608:	add	ip, pc, #0, 12
   1060c:	add	ip, ip, #16, 20	; 0x10000
   10610:	ldr	pc, [ip, #2556]!	; 0x9fc

00010614 <strcpy@plt>:
   10614:	add	ip, pc, #0, 12
   10618:	add	ip, ip, #16, 20	; 0x10000
   1061c:	ldr	pc, [ip, #2548]!	; 0x9f4

00010620 <__libc_start_main@plt>:
   10620:	add	ip, pc, #0, 12
   10624:	add	ip, ip, #16, 20	; 0x10000
   10628:	ldr	pc, [ip, #2540]!	; 0x9ec

0001062c <__gmon_start__@plt>:
   1062c:	add	ip, pc, #0, 12
   10630:	add	ip, ip, #16, 20	; 0x10000
   10634:	ldr	pc, [ip, #2532]!	; 0x9e4

00010638 <memset@plt>:
   10638:	add	ip, pc, #0, 12
   1063c:	add	ip, ip, #16, 20	; 0x10000
   10640:	ldr	pc, [ip, #2524]!	; 0x9dc

00010644 <__isoc99_scanf@plt>:
   10644:	add	ip, pc, #0, 12
   10648:	add	ip, ip, #16, 20	; 0x10000
   1064c:	ldr	pc, [ip, #2516]!	; 0x9d4

00010650 <abort@plt>:
   10650:	add	ip, pc, #0, 12
   10654:	add	ip, ip, #16, 20	; 0x10000
   10658:	ldr	pc, [ip, #2508]!	; 0x9cc

Disassembly of section .text:

0001065c <_start@@Base>:
   1065c:	mov	fp, #0
   10660:	mov	lr, #0
   10664:	pop	{r1}		; (ldr r1, [sp], #4)
   10668:	mov	r2, sp
   1066c:	push	{r2}		; (str r2, [sp, #-4]!)
   10670:	push	{r0}		; (str r0, [sp, #-4]!)
   10674:	ldr	ip, [pc, #16]	; 1068c <_start@@Base+0x30>
   10678:	push	{ip}		; (str ip, [sp, #-4]!)
   1067c:	ldr	r0, [pc, #12]	; 10690 <_start@@Base+0x34>
   10680:	ldr	r3, [pc, #12]	; 10694 <_start@@Base+0x38>
   10684:	bl	10620 <__libc_start_main@plt>
   10688:	bl	10650 <abort@plt>
   1068c:	muleq	r1, r8, r9
   10690:	andeq	r0, r1, r4, ror #16
   10694:	andeq	r0, r1, r8, lsr r9
   10698:	ldr	r3, [pc, #20]	; 106b4 <_start@@Base+0x58>
   1069c:	ldr	r2, [pc, #20]	; 106b8 <_start@@Base+0x5c>
   106a0:	add	r3, pc, r3
   106a4:	ldr	r2, [r3, r2]
   106a8:	cmp	r2, #0
   106ac:	bxeq	lr
   106b0:	b	1062c <__gmon_start__@plt>
   106b4:	andeq	r0, r1, r8, asr r9
   106b8:	andeq	r0, r0, r8, lsr #32
   106bc:	ldr	r0, [pc, #24]	; 106dc <_start@@Base+0x80>
   106c0:	ldr	r3, [pc, #24]	; 106e0 <_start@@Base+0x84>
   106c4:	cmp	r3, r0
   106c8:	bxeq	lr
   106cc:	ldr	r3, [pc, #16]	; 106e4 <_start@@Base+0x88>
   106d0:	cmp	r3, #0
   106d4:	bxeq	lr
   106d8:	bx	r3
   106dc:	andeq	r1, r2, r4, lsr r0
   106e0:	andeq	r1, r2, r4, lsr r0
   106e4:	andeq	r0, r0, r0
   106e8:	ldr	r0, [pc, #36]	; 10714 <_start@@Base+0xb8>
   106ec:	ldr	r1, [pc, #36]	; 10718 <_start@@Base+0xbc>
   106f0:	sub	r1, r1, r0
   106f4:	asr	r1, r1, #2
   106f8:	add	r1, r1, r1, lsr #31
   106fc:	asrs	r1, r1, #1
   10700:	bxeq	lr
   10704:	ldr	r3, [pc, #16]	; 1071c <_start@@Base+0xc0>
   10708:	cmp	r3, #0
   1070c:	bxeq	lr
   10710:	bx	r3
   10714:	andeq	r1, r2, r4, lsr r0
   10718:	andeq	r1, r2, r4, lsr r0
   1071c:	andeq	r0, r0, r0
   10720:	push	{r4, lr}
   10724:	ldr	r4, [pc, #24]	; 10744 <_start@@Base+0xe8>
   10728:	ldrb	r3, [r4]
   1072c:	cmp	r3, #0
   10730:	popne	{r4, pc}
   10734:	bl	106bc <_start@@Base+0x60>
   10738:	mov	r3, #1
   1073c:	strb	r3, [r4]
   10740:	pop	{r4, pc}
   10744:	andeq	r1, r2, r4, lsr r0
   10748:	b	106e8 <_start@@Base+0x8c>

0001074c <lerpontuacoes@@Base>:
   1074c:	strd	r4, [sp, #-20]!	; 0xffffffec
   10750:	strd	r6, [sp, #8]
   10754:	str	lr, [sp, #16]
   10758:	sub	sp, sp, #12
   1075c:	mov	r5, r0
   10760:	mov	r4, r1
   10764:	add	r1, sp, #4
   10768:	movw	r0, #2472	; 0x9a8
   1076c:	movt	r0, #1
   10770:	bl	10644 <__isoc99_scanf@plt>
   10774:	ldr	r0, [sp, #4]
   10778:	cmp	r0, #0
   1077c:	ble	107b4 <lerpontuacoes@@Base+0x68>
   10780:	mov	r6, #0
   10784:	movw	r7, #2476	; 0x9ac
   10788:	movt	r7, #1
   1078c:	mov	r2, r4
   10790:	mov	r1, r5
   10794:	mov	r0, r7
   10798:	bl	10644 <__isoc99_scanf@plt>
   1079c:	add	r6, r6, #1
   107a0:	ldr	r0, [sp, #4]
   107a4:	add	r5, r5, #50	; 0x32
   107a8:	add	r4, r4, #4
   107ac:	cmp	r0, r6
   107b0:	bgt	1078c <lerpontuacoes@@Base+0x40>
   107b4:	add	sp, sp, #12
   107b8:	ldrd	r4, [sp]
   107bc:	ldrd	r6, [sp, #8]
   107c0:	add	sp, sp, #16
   107c4:	pop	{pc}		; (ldr pc, [sp], #4)

000107c8 <primeiroUltimo@@Base>:
   107c8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   107cc:	strd	r6, [sp, #8]
   107d0:	strd	r8, [sp, #16]
   107d4:	str	sl, [sp, #24]
   107d8:	str	lr, [sp, #28]
   107dc:	ldr	r8, [r1]
   107e0:	cmp	r2, #1
   107e4:	ble	1084c <primeiroUltimo@@Base+0x84>
   107e8:	mov	r9, r3
   107ec:	add	r4, r1, #4
   107f0:	add	r5, r0, #50	; 0x32
   107f4:	add	r7, r1, r2, lsl #2
   107f8:	mov	sl, r8
   107fc:	b	10830 <primeiroUltimo@@Base+0x68>
   10800:	mov	r1, r5
   10804:	mov	r0, r9
   10808:	bl	10614 <strcpy@plt>
   1080c:	mov	r8, r6
   10810:	b	1083c <primeiroUltimo@@Base+0x74>
   10814:	mov	r1, r5
   10818:	ldr	r0, [sp, #32]
   1081c:	bl	10614 <strcpy@plt>
   10820:	mov	sl, r6
   10824:	add	r5, r5, #50	; 0x32
   10828:	cmp	r4, r7
   1082c:	beq	1084c <primeiroUltimo@@Base+0x84>
   10830:	ldr	r6, [r4], #4
   10834:	cmp	r6, r8
   10838:	bgt	10800 <primeiroUltimo@@Base+0x38>
   1083c:	ldr	r6, [r4, #-4]
   10840:	cmp	r6, sl
   10844:	bge	10824 <primeiroUltimo@@Base+0x5c>
   10848:	b	10814 <primeiroUltimo@@Base+0x4c>
   1084c:	ldrd	r4, [sp]
   10850:	ldrd	r6, [sp, #8]
   10854:	ldrd	r8, [sp, #16]
   10858:	ldr	sl, [sp, #24]
   1085c:	add	sp, sp, #28
   10860:	pop	{pc}		; (ldr pc, [sp], #4)

00010864 <main@@Base>:
   10864:	strd	r4, [sp, #-12]!
   10868:	str	lr, [sp, #8]
   1086c:	sub	sp, sp, #1184	; 0x4a0
   10870:	sub	sp, sp, #12
   10874:	mov	r2, #80	; 0x50
   10878:	mov	r1, #0
   1087c:	add	r0, sp, #1104	; 0x450
   10880:	add	r0, r0, #8
   10884:	bl	10638 <memset@plt>
   10888:	mov	r2, #1000	; 0x3e8
   1088c:	mov	r1, #0
   10890:	add	r0, sp, #112	; 0x70
   10894:	bl	10638 <memset@plt>
   10898:	mov	r5, #50	; 0x32
   1089c:	mov	r2, r5
   108a0:	mov	r1, #0
   108a4:	add	r0, sp, #60	; 0x3c
   108a8:	bl	10638 <memset@plt>
   108ac:	add	r4, sp, #8
   108b0:	mov	r2, r5
   108b4:	mov	r1, #0
   108b8:	mov	r0, r4
   108bc:	bl	10638 <memset@plt>
   108c0:	add	r1, sp, #1104	; 0x450
   108c4:	add	r1, r1, #8
   108c8:	add	r0, sp, #112	; 0x70
   108cc:	bl	1074c <lerpontuacoes@@Base>
   108d0:	mov	r5, r0
   108d4:	str	r4, [sp]
   108d8:	add	r3, sp, #60	; 0x3c
   108dc:	mov	r2, r0
   108e0:	add	r1, sp, #1104	; 0x450
   108e4:	add	r1, r1, #8
   108e8:	add	r0, sp, #112	; 0x70
   108ec:	bl	107c8 <primeiroUltimo@@Base>
   108f0:	mov	r1, r5
   108f4:	movw	r0, #2484	; 0x9b4
   108f8:	movt	r0, #1
   108fc:	bl	10608 <printf@plt>
   10900:	add	r1, sp, #60	; 0x3c
   10904:	movw	r0, #2512	; 0x9d0
   10908:	movt	r0, #1
   1090c:	bl	10608 <printf@plt>
   10910:	mov	r1, r4
   10914:	movw	r0, #2528	; 0x9e0
   10918:	movt	r0, #1
   1091c:	bl	10608 <printf@plt>
   10920:	mov	r0, #0
   10924:	add	sp, sp, #1184	; 0x4a0
   10928:	add	sp, sp, #12
   1092c:	ldrd	r4, [sp]
   10930:	add	sp, sp, #8
   10934:	pop	{pc}		; (ldr pc, [sp], #4)

00010938 <__libc_csu_init@@Base>:
   10938:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1093c:	mov	r7, r0
   10940:	ldr	r6, [pc, #72]	; 10990 <__libc_csu_init@@Base+0x58>
   10944:	ldr	r5, [pc, #72]	; 10994 <__libc_csu_init@@Base+0x5c>
   10948:	add	r6, pc, r6
   1094c:	add	r5, pc, r5
   10950:	sub	r6, r6, r5
   10954:	mov	r8, r1
   10958:	mov	r9, r2
   1095c:	bl	105e8 <printf@plt-0x20>
   10960:	asrs	r6, r6, #2
   10964:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10968:	mov	r4, #0
   1096c:	add	r4, r4, #1
   10970:	ldr	r3, [r5], #4
   10974:	mov	r2, r9
   10978:	mov	r1, r8
   1097c:	mov	r0, r7
   10980:	blx	r3
   10984:	cmp	r6, r4
   10988:	bne	1096c <__libc_csu_init@@Base+0x34>
   1098c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10990:	andeq	r0, r1, r4, asr #11
   10994:			; <UNDEFINED> instruction: 0x000105bc

00010998 <__libc_csu_fini@@Base>:
   10998:	bx	lr

Disassembly of section .fini:

0001099c <.fini>:
   1099c:	push	{r3, lr}
   109a0:	pop	{r3, pc}
