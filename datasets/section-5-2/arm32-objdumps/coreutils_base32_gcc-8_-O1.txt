
../repos/coreutils/src/base32:     file format elf32-littlearm


Disassembly of section .init:

00010c7c <.init>:
   10c7c:	push	{r3, lr}
   10c80:	bl	10f48 <__assert_fail@plt+0x48>
   10c84:	pop	{r3, pc}

Disassembly of section .plt:

00010c88 <calloc@plt-0x14>:
   10c88:	push	{lr}		; (str lr, [sp, #-4]!)
   10c8c:	ldr	lr, [pc, #4]	; 10c98 <calloc@plt-0x4>
   10c90:	add	lr, pc, lr
   10c94:	ldr	pc, [lr, #8]!
   10c98:	andeq	r6, r1, r8, ror #6

00010c9c <calloc@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #90112	; 0x16000
   10ca4:	ldr	pc, [ip, #872]!	; 0x368

00010ca8 <fputs_unlocked@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #90112	; 0x16000
   10cb0:	ldr	pc, [ip, #864]!	; 0x360

00010cb4 <strcmp@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #90112	; 0x16000
   10cbc:	ldr	pc, [ip, #856]!	; 0x358

00010cc0 <posix_fadvise64@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #90112	; 0x16000
   10cc8:	ldr	pc, [ip, #848]!	; 0x350

00010ccc <fflush@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #90112	; 0x16000
   10cd4:	ldr	pc, [ip, #840]!	; 0x348

00010cd8 <memmove@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #90112	; 0x16000
   10ce0:	ldr	pc, [ip, #832]!	; 0x340

00010ce4 <free@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #90112	; 0x16000
   10cec:	ldr	pc, [ip, #824]!	; 0x338

00010cf0 <_exit@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #90112	; 0x16000
   10cf8:	ldr	pc, [ip, #816]!	; 0x330

00010cfc <memcpy@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #90112	; 0x16000
   10d04:	ldr	pc, [ip, #808]!	; 0x328

00010d08 <mbsinit@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #90112	; 0x16000
   10d10:	ldr	pc, [ip, #800]!	; 0x320

00010d14 <fwrite_unlocked@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #90112	; 0x16000
   10d1c:	ldr	pc, [ip, #792]!	; 0x318

00010d20 <memcmp@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #90112	; 0x16000
   10d28:	ldr	pc, [ip, #784]!	; 0x310

00010d2c <fputc_unlocked@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #90112	; 0x16000
   10d34:	ldr	pc, [ip, #776]!	; 0x308

00010d38 <dcgettext@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #90112	; 0x16000
   10d40:	ldr	pc, [ip, #768]!	; 0x300

00010d44 <realloc@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #90112	; 0x16000
   10d4c:	ldr	pc, [ip, #760]!	; 0x2f8

00010d50 <textdomain@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #90112	; 0x16000
   10d58:	ldr	pc, [ip, #752]!	; 0x2f0

00010d5c <iswprint@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #90112	; 0x16000
   10d64:	ldr	pc, [ip, #744]!	; 0x2e8

00010d68 <fwrite@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #90112	; 0x16000
   10d70:	ldr	pc, [ip, #736]!	; 0x2e0

00010d74 <lseek64@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #90112	; 0x16000
   10d7c:	ldr	pc, [ip, #728]!	; 0x2d8

00010d80 <__ctype_get_mb_cur_max@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #90112	; 0x16000
   10d88:	ldr	pc, [ip, #720]!	; 0x2d0

00010d8c <__fpending@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #90112	; 0x16000
   10d94:	ldr	pc, [ip, #712]!	; 0x2c8

00010d98 <mbrtowc@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #90112	; 0x16000
   10da0:	ldr	pc, [ip, #704]!	; 0x2c0

00010da4 <error@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #90112	; 0x16000
   10dac:	ldr	pc, [ip, #696]!	; 0x2b8

00010db0 <malloc@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #90112	; 0x16000
   10db8:	ldr	pc, [ip, #688]!	; 0x2b0

00010dbc <__libc_start_main@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #90112	; 0x16000
   10dc4:	ldr	pc, [ip, #680]!	; 0x2a8

00010dc8 <__freading@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #90112	; 0x16000
   10dd0:	ldr	pc, [ip, #672]!	; 0x2a0

00010dd4 <__gmon_start__@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #90112	; 0x16000
   10ddc:	ldr	pc, [ip, #664]!	; 0x298

00010de0 <getopt_long@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #90112	; 0x16000
   10de8:	ldr	pc, [ip, #656]!	; 0x290

00010dec <__ctype_b_loc@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #90112	; 0x16000
   10df4:	ldr	pc, [ip, #648]!	; 0x288

00010df8 <exit@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #90112	; 0x16000
   10e00:	ldr	pc, [ip, #640]!	; 0x280

00010e04 <strlen@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #90112	; 0x16000
   10e0c:	ldr	pc, [ip, #632]!	; 0x278

00010e10 <strchr@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #90112	; 0x16000
   10e18:	ldr	pc, [ip, #624]!	; 0x270

00010e1c <__errno_location@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #90112	; 0x16000
   10e24:	ldr	pc, [ip, #616]!	; 0x268

00010e28 <__cxa_atexit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #90112	; 0x16000
   10e30:	ldr	pc, [ip, #608]!	; 0x260

00010e34 <memset@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #90112	; 0x16000
   10e3c:	ldr	pc, [ip, #600]!	; 0x258

00010e40 <__printf_chk@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #90112	; 0x16000
   10e48:	ldr	pc, [ip, #592]!	; 0x250

00010e4c <fileno@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #90112	; 0x16000
   10e54:	ldr	pc, [ip, #584]!	; 0x248

00010e58 <__fprintf_chk@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #90112	; 0x16000
   10e60:	ldr	pc, [ip, #576]!	; 0x240

00010e64 <memchr@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #90112	; 0x16000
   10e6c:	ldr	pc, [ip, #568]!	; 0x238

00010e70 <fclose@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #90112	; 0x16000
   10e78:	ldr	pc, [ip, #560]!	; 0x230

00010e7c <fseeko64@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #90112	; 0x16000
   10e84:	ldr	pc, [ip, #552]!	; 0x228

00010e88 <__overflow@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #90112	; 0x16000
   10e90:	ldr	pc, [ip, #544]!	; 0x220

00010e94 <setlocale@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #90112	; 0x16000
   10e9c:	ldr	pc, [ip, #536]!	; 0x218

00010ea0 <strrchr@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #90112	; 0x16000
   10ea8:	ldr	pc, [ip, #528]!	; 0x210

00010eac <nl_langinfo@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #90112	; 0x16000
   10eb4:	ldr	pc, [ip, #520]!	; 0x208

00010eb8 <__strtoll_internal@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #90112	; 0x16000
   10ec0:	ldr	pc, [ip, #512]!	; 0x200

00010ec4 <fopen64@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #90112	; 0x16000
   10ecc:	ldr	pc, [ip, #504]!	; 0x1f8

00010ed0 <bindtextdomain@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #90112	; 0x16000
   10ed8:	ldr	pc, [ip, #496]!	; 0x1f0

00010edc <fread_unlocked@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #90112	; 0x16000
   10ee4:	ldr	pc, [ip, #488]!	; 0x1e8

00010ee8 <strncmp@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #90112	; 0x16000
   10ef0:	ldr	pc, [ip, #480]!	; 0x1e0

00010ef4 <abort@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #90112	; 0x16000
   10efc:	ldr	pc, [ip, #472]!	; 0x1d8

00010f00 <__assert_fail@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #90112	; 0x16000
   10f08:	ldr	pc, [ip, #464]!	; 0x1d0

Disassembly of section .text:

00010f0c <.text>:
   10f0c:	mov	fp, #0
   10f10:	mov	lr, #0
   10f14:	pop	{r1}		; (ldr r1, [sp], #4)
   10f18:	mov	r2, sp
   10f1c:	push	{r2}		; (str r2, [sp, #-4]!)
   10f20:	push	{r0}		; (str r0, [sp, #-4]!)
   10f24:	ldr	ip, [pc, #16]	; 10f3c <__assert_fail@plt+0x3c>
   10f28:	push	{ip}		; (str ip, [sp, #-4]!)
   10f2c:	ldr	r0, [pc, #12]	; 10f40 <__assert_fail@plt+0x40>
   10f30:	ldr	r3, [pc, #12]	; 10f44 <__assert_fail@plt+0x44>
   10f34:	bl	10dbc <__libc_start_main@plt>
   10f38:	bl	10ef4 <abort@plt>
   10f3c:	andeq	r6, r1, r8, lsr r2
   10f40:	andeq	r1, r1, r8, lsl #9
   10f44:	ldrdeq	r6, [r1], -r8
   10f48:	ldr	r3, [pc, #20]	; 10f64 <__assert_fail@plt+0x64>
   10f4c:	ldr	r2, [pc, #20]	; 10f68 <__assert_fail@plt+0x68>
   10f50:	add	r3, pc, r3
   10f54:	ldr	r2, [r3, r2]
   10f58:	cmp	r2, #0
   10f5c:	bxeq	lr
   10f60:	b	10dd4 <__gmon_start__@plt>
   10f64:	andeq	r6, r1, r8, lsr #1
   10f68:	ldrdeq	r0, [r0], -ip
   10f6c:	ldr	r0, [pc, #24]	; 10f8c <__assert_fail@plt+0x8c>
   10f70:	ldr	r3, [pc, #24]	; 10f90 <__assert_fail@plt+0x90>
   10f74:	cmp	r3, r0
   10f78:	bxeq	lr
   10f7c:	ldr	r3, [pc, #16]	; 10f94 <__assert_fail@plt+0x94>
   10f80:	cmp	r3, #0
   10f84:	bxeq	lr
   10f88:	bx	r3
   10f8c:	andeq	r7, r2, r0, lsr r1
   10f90:	andeq	r7, r2, r0, lsr r1
   10f94:	andeq	r0, r0, r0
   10f98:	ldr	r0, [pc, #36]	; 10fc4 <__assert_fail@plt+0xc4>
   10f9c:	ldr	r1, [pc, #36]	; 10fc8 <__assert_fail@plt+0xc8>
   10fa0:	sub	r1, r1, r0
   10fa4:	asr	r1, r1, #2
   10fa8:	add	r1, r1, r1, lsr #31
   10fac:	asrs	r1, r1, #1
   10fb0:	bxeq	lr
   10fb4:	ldr	r3, [pc, #16]	; 10fcc <__assert_fail@plt+0xcc>
   10fb8:	cmp	r3, #0
   10fbc:	bxeq	lr
   10fc0:	bx	r3
   10fc4:	andeq	r7, r2, r0, lsr r1
   10fc8:	andeq	r7, r2, r0, lsr r1
   10fcc:	andeq	r0, r0, r0
   10fd0:	push	{r4, lr}
   10fd4:	ldr	r4, [pc, #24]	; 10ff4 <__assert_fail@plt+0xf4>
   10fd8:	ldrb	r3, [r4]
   10fdc:	cmp	r3, #0
   10fe0:	popne	{r4, pc}
   10fe4:	bl	10f6c <__assert_fail@plt+0x6c>
   10fe8:	mov	r3, #1
   10fec:	strb	r3, [r4]
   10ff0:	pop	{r4, pc}
   10ff4:	andeq	r7, r2, r4, asr r1
   10ff8:	b	10f98 <__assert_fail@plt+0x98>
   10ffc:	str	r4, [sp, #-8]!
   11000:	str	lr, [sp, #4]
   11004:	mov	r4, r1
   11008:	bl	126ac <__assert_fail@plt+0x17ac>
   1100c:	cmp	r0, #0
   11010:	beq	11088 <__assert_fail@plt+0x188>
   11014:	movw	r1, #25336	; 0x62f8
   11018:	movt	r1, #1
   1101c:	mov	r0, r4
   11020:	bl	10cb4 <strcmp@plt>
   11024:	cmp	r0, #0
   11028:	bne	11058 <__assert_fail@plt+0x158>
   1102c:	bl	10e1c <__errno_location@plt>
   11030:	ldr	r4, [r0]
   11034:	mov	r2, #5
   11038:	movw	r1, #25340	; 0x62fc
   1103c:	movt	r1, #1
   11040:	mov	r0, #0
   11044:	bl	10d38 <dcgettext@plt>
   11048:	mov	r2, r0
   1104c:	mov	r1, r4
   11050:	mov	r0, #1
   11054:	bl	10da4 <error@plt>
   11058:	bl	10e1c <__errno_location@plt>
   1105c:	ldr	r5, [r0]
   11060:	mov	r2, r4
   11064:	mov	r1, #3
   11068:	mov	r0, #0
   1106c:	bl	14a28 <__assert_fail@plt+0x3b28>
   11070:	mov	r3, r0
   11074:	movw	r2, #26548	; 0x67b4
   11078:	movt	r2, #1
   1107c:	mov	r1, r5
   11080:	mov	r0, #1
   11084:	bl	10da4 <error@plt>
   11088:	mov	r0, #0
   1108c:	bl	10df8 <exit@plt>
   11090:	push	{lr}		; (str lr, [sp, #-4]!)
   11094:	sub	sp, sp, #60	; 0x3c
   11098:	subs	r4, r0, #0
   1109c:	beq	110e4 <__assert_fail@plt+0x1e4>
   110a0:	movw	r3, #28992	; 0x7140
   110a4:	movt	r3, #2
   110a8:	ldr	r5, [r3]
   110ac:	mov	r2, #5
   110b0:	movw	r1, #25372	; 0x631c
   110b4:	movt	r1, #1
   110b8:	mov	r0, #0
   110bc:	bl	10d38 <dcgettext@plt>
   110c0:	movw	r3, #29024	; 0x7160
   110c4:	movt	r3, #2
   110c8:	ldr	r3, [r3]
   110cc:	mov	r2, r0
   110d0:	mov	r1, #1
   110d4:	mov	r0, r5
   110d8:	bl	10e58 <__fprintf_chk@plt>
   110dc:	mov	r0, r4
   110e0:	bl	10df8 <exit@plt>
   110e4:	mov	r2, #5
   110e8:	movw	r1, #25412	; 0x6344
   110ec:	movt	r1, #1
   110f0:	mov	r0, #0
   110f4:	bl	10d38 <dcgettext@plt>
   110f8:	movw	r3, #29024	; 0x7160
   110fc:	movt	r3, #2
   11100:	ldr	r2, [r3]
   11104:	mov	r1, r0
   11108:	mov	r0, #1
   1110c:	bl	10e40 <__printf_chk@plt>
   11110:	mov	r2, #5
   11114:	movw	r1, #25444	; 0x6364
   11118:	movt	r1, #1
   1111c:	mov	r0, #0
   11120:	bl	10d38 <dcgettext@plt>
   11124:	mov	r2, #32
   11128:	mov	r1, r0
   1112c:	mov	r0, #1
   11130:	bl	10e40 <__printf_chk@plt>
   11134:	mov	r2, #5
   11138:	movw	r1, #25516	; 0x63ac
   1113c:	movt	r1, #1
   11140:	mov	r0, #0
   11144:	bl	10d38 <dcgettext@plt>
   11148:	movw	r5, #29004	; 0x714c
   1114c:	movt	r5, #2
   11150:	ldr	r1, [r5]
   11154:	bl	10ca8 <fputs_unlocked@plt>
   11158:	mov	r2, #5
   1115c:	movw	r1, #25572	; 0x63e4
   11160:	movt	r1, #1
   11164:	mov	r0, #0
   11168:	bl	10d38 <dcgettext@plt>
   1116c:	ldr	r1, [r5]
   11170:	bl	10ca8 <fputs_unlocked@plt>
   11174:	mov	r2, #5
   11178:	movw	r1, #25648	; 0x6430
   1117c:	movt	r1, #1
   11180:	mov	r0, #0
   11184:	bl	10d38 <dcgettext@plt>
   11188:	ldr	r1, [r5]
   1118c:	bl	10ca8 <fputs_unlocked@plt>
   11190:	mov	r2, #5
   11194:	movw	r1, #25892	; 0x6524
   11198:	movt	r1, #1
   1119c:	mov	r0, #0
   111a0:	bl	10d38 <dcgettext@plt>
   111a4:	ldr	r1, [r5]
   111a8:	bl	10ca8 <fputs_unlocked@plt>
   111ac:	mov	r2, #5
   111b0:	movw	r1, #25940	; 0x6554
   111b4:	movt	r1, #1
   111b8:	mov	r0, #0
   111bc:	bl	10d38 <dcgettext@plt>
   111c0:	ldr	r1, [r5]
   111c4:	bl	10ca8 <fputs_unlocked@plt>
   111c8:	mov	r2, #5
   111cc:	movw	r1, #25996	; 0x658c
   111d0:	movt	r1, #1
   111d4:	mov	r0, #0
   111d8:	bl	10d38 <dcgettext@plt>
   111dc:	movw	r2, #25364	; 0x6314
   111e0:	movt	r2, #1
   111e4:	mov	r3, r2
   111e8:	mov	r1, r0
   111ec:	mov	r0, #1
   111f0:	bl	10e40 <__printf_chk@plt>
   111f4:	movw	r0, #25184	; 0x6260
   111f8:	movt	r0, #1
   111fc:	ldr	r1, [r0]
   11200:	ldr	r3, [r0, #4]
   11204:	str	r1, [sp]
   11208:	str	r3, [sp, #4]
   1120c:	ldrd	r2, [r0, #8]
   11210:	strd	r2, [sp, #8]
   11214:	ldrd	r2, [r0, #16]
   11218:	strd	r2, [sp, #16]
   1121c:	ldrd	r2, [r0, #24]
   11220:	strd	r2, [sp, #24]
   11224:	ldrd	r2, [r0, #32]
   11228:	strd	r2, [sp, #32]
   1122c:	ldrd	r2, [r0, #40]	; 0x28
   11230:	strd	r2, [sp, #40]	; 0x28
   11234:	ldrd	r2, [r0, #48]	; 0x30
   11238:	strd	r2, [sp, #48]	; 0x30
   1123c:	cmp	r1, #0
   11240:	moveq	r5, sp
   11244:	beq	11270 <__assert_fail@plt+0x370>
   11248:	mov	r5, sp
   1124c:	movw	r6, #25364	; 0x6314
   11250:	movt	r6, #1
   11254:	mov	r0, r6
   11258:	bl	10cb4 <strcmp@plt>
   1125c:	cmp	r0, #0
   11260:	beq	11270 <__assert_fail@plt+0x370>
   11264:	ldr	r1, [r5, #8]!
   11268:	cmp	r1, #0
   1126c:	bne	11254 <__assert_fail@plt+0x354>
   11270:	ldr	r5, [r5, #4]
   11274:	cmp	r5, #0
   11278:	beq	113d4 <__assert_fail@plt+0x4d4>
   1127c:	mov	r2, #5
   11280:	movw	r1, #26264	; 0x6698
   11284:	movt	r1, #1
   11288:	mov	r0, #0
   1128c:	bl	10d38 <dcgettext@plt>
   11290:	movw	r3, #26288	; 0x66b0
   11294:	movt	r3, #1
   11298:	movw	r2, #26328	; 0x66d8
   1129c:	movt	r2, #1
   112a0:	mov	r1, r0
   112a4:	mov	r0, #1
   112a8:	bl	10e40 <__printf_chk@plt>
   112ac:	mov	r1, #0
   112b0:	mov	r0, #5
   112b4:	bl	10e94 <setlocale@plt>
   112b8:	cmp	r0, #0
   112bc:	beq	112d8 <__assert_fail@plt+0x3d8>
   112c0:	mov	r2, #3
   112c4:	movw	r1, #26344	; 0x66e8
   112c8:	movt	r1, #1
   112cc:	bl	10ee8 <strncmp@plt>
   112d0:	cmp	r0, #0
   112d4:	bne	11354 <__assert_fail@plt+0x454>
   112d8:	mov	r2, #5
   112dc:	movw	r1, #26420	; 0x6734
   112e0:	movt	r1, #1
   112e4:	mov	r0, #0
   112e8:	bl	10d38 <dcgettext@plt>
   112ec:	movw	r6, #25364	; 0x6314
   112f0:	movt	r6, #1
   112f4:	mov	r3, r6
   112f8:	movw	r2, #26288	; 0x66b0
   112fc:	movt	r2, #1
   11300:	mov	r1, r0
   11304:	mov	r0, #1
   11308:	bl	10e40 <__printf_chk@plt>
   1130c:	mov	r2, #5
   11310:	movw	r1, #26448	; 0x6750
   11314:	movt	r1, #1
   11318:	mov	r0, #0
   1131c:	bl	10d38 <dcgettext@plt>
   11320:	mov	r1, r0
   11324:	movw	r2, #26648	; 0x6818
   11328:	movt	r2, #1
   1132c:	movw	r3, #25936	; 0x6550
   11330:	movt	r3, #1
   11334:	cmp	r5, r6
   11338:	moveq	r3, r2
   1133c:	mov	r2, r5
   11340:	mov	r0, #1
   11344:	bl	10e40 <__printf_chk@plt>
   11348:	b	110dc <__assert_fail@plt+0x1dc>
   1134c:	movw	r5, #25364	; 0x6314
   11350:	movt	r5, #1
   11354:	mov	r2, #5
   11358:	movw	r1, #26348	; 0x66ec
   1135c:	movt	r1, #1
   11360:	mov	r0, #0
   11364:	bl	10d38 <dcgettext@plt>
   11368:	movw	r3, #29004	; 0x714c
   1136c:	movt	r3, #2
   11370:	ldr	r1, [r3]
   11374:	bl	10ca8 <fputs_unlocked@plt>
   11378:	b	112d8 <__assert_fail@plt+0x3d8>
   1137c:	mov	r2, #5
   11380:	movw	r1, #26420	; 0x6734
   11384:	movt	r1, #1
   11388:	mov	r0, #0
   1138c:	bl	10d38 <dcgettext@plt>
   11390:	movw	r5, #25364	; 0x6314
   11394:	movt	r5, #1
   11398:	mov	r3, r5
   1139c:	movw	r2, #26288	; 0x66b0
   113a0:	movt	r2, #1
   113a4:	mov	r1, r0
   113a8:	mov	r0, #1
   113ac:	bl	10e40 <__printf_chk@plt>
   113b0:	mov	r2, #5
   113b4:	movw	r1, #26448	; 0x6750
   113b8:	movt	r1, #1
   113bc:	mov	r0, #0
   113c0:	bl	10d38 <dcgettext@plt>
   113c4:	mov	r1, r0
   113c8:	movw	r3, #26648	; 0x6818
   113cc:	movt	r3, #1
   113d0:	b	1133c <__assert_fail@plt+0x43c>
   113d4:	mov	r2, #5
   113d8:	movw	r1, #26264	; 0x6698
   113dc:	movt	r1, #1
   113e0:	mov	r0, #0
   113e4:	bl	10d38 <dcgettext@plt>
   113e8:	movw	r3, #26288	; 0x66b0
   113ec:	movt	r3, #1
   113f0:	movw	r2, #26328	; 0x66d8
   113f4:	movt	r2, #1
   113f8:	mov	r1, r0
   113fc:	mov	r0, #1
   11400:	bl	10e40 <__printf_chk@plt>
   11404:	mov	r1, #0
   11408:	mov	r0, #5
   1140c:	bl	10e94 <setlocale@plt>
   11410:	cmp	r0, #0
   11414:	beq	1137c <__assert_fail@plt+0x47c>
   11418:	mov	r2, #3
   1141c:	movw	r1, #26344	; 0x66e8
   11420:	movt	r1, #1
   11424:	bl	10ee8 <strncmp@plt>
   11428:	cmp	r0, #0
   1142c:	bne	1134c <__assert_fail@plt+0x44c>
   11430:	mov	r2, #5
   11434:	movw	r1, #26420	; 0x6734
   11438:	movt	r1, #1
   1143c:	mov	r0, #0
   11440:	bl	10d38 <dcgettext@plt>
   11444:	movw	r5, #25364	; 0x6314
   11448:	movt	r5, #1
   1144c:	mov	r3, r5
   11450:	movw	r2, #26288	; 0x66b0
   11454:	movt	r2, #1
   11458:	mov	r1, r0
   1145c:	mov	r0, #1
   11460:	bl	10e40 <__printf_chk@plt>
   11464:	mov	r2, #5
   11468:	movw	r1, #26448	; 0x6750
   1146c:	movt	r1, #1
   11470:	mov	r0, #0
   11474:	bl	10d38 <dcgettext@plt>
   11478:	mov	r1, r0
   1147c:	movw	r3, #26648	; 0x6818
   11480:	movt	r3, #1
   11484:	b	1133c <__assert_fail@plt+0x43c>
   11488:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1148c:	strd	r6, [sp, #8]
   11490:	strd	r8, [sp, #16]
   11494:	strd	sl, [sp, #24]
   11498:	str	lr, [sp, #32]
   1149c:	sub	sp, sp, #68	; 0x44
   114a0:	mov	r9, r0
   114a4:	mov	r5, r1
   114a8:	ldr	r0, [r1]
   114ac:	bl	128f8 <__assert_fail@plt+0x19f8>
   114b0:	movw	r1, #25936	; 0x6550
   114b4:	movt	r1, #1
   114b8:	mov	r0, #6
   114bc:	bl	10e94 <setlocale@plt>
   114c0:	movw	r4, #26332	; 0x66dc
   114c4:	movt	r4, #1
   114c8:	movw	r1, #26500	; 0x6784
   114cc:	movt	r1, #1
   114d0:	mov	r0, r4
   114d4:	bl	10ed0 <bindtextdomain@plt>
   114d8:	mov	r0, r4
   114dc:	bl	10d50 <textdomain@plt>
   114e0:	movw	r0, #9516	; 0x252c
   114e4:	movt	r0, #1
   114e8:	bl	1623c <__assert_fail@plt+0x533c>
   114ec:	mov	r6, #76	; 0x4c
   114f0:	mov	fp, #0
   114f4:	mov	r8, fp
   114f8:	ldr	sl, [pc, #1876]	; 11c54 <__assert_fail@plt+0xd54>
   114fc:	movw	r4, #26568	; 0x67c8
   11500:	movt	r4, #1
   11504:	movw	r7, #29008	; 0x7150
   11508:	movt	r7, #2
   1150c:	mov	r3, #0
   11510:	str	r3, [sp]
   11514:	mov	r3, sl
   11518:	mov	r2, r4
   1151c:	mov	r1, r5
   11520:	mov	r0, r9
   11524:	bl	10de0 <getopt_long@plt>
   11528:	cmn	r0, #1
   1152c:	beq	11678 <__assert_fail@plt+0x778>
   11530:	cmp	r0, #100	; 0x64
   11534:	beq	11668 <__assert_fail@plt+0x768>
   11538:	ble	115bc <__assert_fail@plt+0x6bc>
   1153c:	cmp	r0, #105	; 0x69
   11540:	beq	11670 <__assert_fail@plt+0x770>
   11544:	cmp	r0, #119	; 0x77
   11548:	bne	11660 <__assert_fail@plt+0x760>
   1154c:	movw	r3, #25936	; 0x6550
   11550:	movt	r3, #1
   11554:	str	r3, [sp]
   11558:	add	r3, sp, #48	; 0x30
   1155c:	mov	r2, #10
   11560:	mov	r1, #0
   11564:	ldr	r0, [r7]
   11568:	bl	157f8 <__assert_fail@plt+0x48f8>
   1156c:	mov	ip, r0
   11570:	cmp	r0, #1
   11574:	bhi	115d4 <__assert_fail@plt+0x6d4>
   11578:	ldrd	r2, [sp, #48]	; 0x30
   1157c:	cmp	r2, #0
   11580:	sbcs	r1, r3, #0
   11584:	blt	115d4 <__assert_fail@plt+0x6d4>
   11588:	mvn	r0, #-2147483648	; 0x80000000
   1158c:	mov	r1, #0
   11590:	cmp	r0, r2
   11594:	sbcs	r1, r1, r3
   11598:	movge	r1, #1
   1159c:	movlt	r1, #0
   115a0:	cmp	ip, #1
   115a4:	moveq	r1, #0
   115a8:	andne	r1, r1, #1
   115ac:	cmp	r1, #0
   115b0:	moveq	r2, #0
   115b4:	mov	r6, r2
   115b8:	b	1150c <__assert_fail@plt+0x60c>
   115bc:	cmn	r0, #3
   115c0:	beq	11618 <__assert_fail@plt+0x718>
   115c4:	cmn	r0, #2
   115c8:	bne	11660 <__assert_fail@plt+0x760>
   115cc:	mov	r0, #0
   115d0:	bl	11090 <__assert_fail@plt+0x190>
   115d4:	mov	r2, #5
   115d8:	movw	r1, #26524	; 0x679c
   115dc:	movt	r1, #1
   115e0:	mov	r0, #0
   115e4:	bl	10d38 <dcgettext@plt>
   115e8:	mov	r4, r0
   115ec:	movw	r3, #29008	; 0x7150
   115f0:	movt	r3, #2
   115f4:	ldr	r0, [r3]
   115f8:	bl	14bf4 <__assert_fail@plt+0x3cf4>
   115fc:	str	r0, [sp]
   11600:	mov	r3, r4
   11604:	movw	r2, #26544	; 0x67b0
   11608:	movt	r2, #1
   1160c:	mov	r1, #0
   11610:	mov	r0, #1
   11614:	bl	10da4 <error@plt>
   11618:	movw	r3, #28904	; 0x70e8
   1161c:	movt	r3, #2
   11620:	movw	r0, #29004	; 0x714c
   11624:	movt	r0, #2
   11628:	mov	r4, #0
   1162c:	str	r4, [sp, #4]
   11630:	movw	r2, #26552	; 0x67b8
   11634:	movt	r2, #1
   11638:	str	r2, [sp]
   1163c:	ldr	r3, [r3]
   11640:	movw	r2, #26328	; 0x66d8
   11644:	movt	r2, #1
   11648:	movw	r1, #25364	; 0x6314
   1164c:	movt	r1, #1
   11650:	ldr	r0, [r0]
   11654:	bl	150f0 <__assert_fail@plt+0x41f0>
   11658:	mov	r0, r4
   1165c:	bl	10df8 <exit@plt>
   11660:	mov	r0, #1
   11664:	bl	11090 <__assert_fail@plt+0x190>
   11668:	mov	r8, #1
   1166c:	b	1150c <__assert_fail@plt+0x60c>
   11670:	mov	fp, #1
   11674:	b	1150c <__assert_fail@plt+0x60c>
   11678:	movw	r3, #28984	; 0x7138
   1167c:	movt	r3, #2
   11680:	ldr	r3, [r3]
   11684:	sub	r2, r9, r3
   11688:	cmp	r2, #1
   1168c:	bgt	11700 <__assert_fail@plt+0x800>
   11690:	cmp	r3, r9
   11694:	bge	1174c <__assert_fail@plt+0x84c>
   11698:	ldr	r3, [r5, r3, lsl #2]
   1169c:	str	r3, [sp, #24]
   116a0:	movw	r1, #25336	; 0x62f8
   116a4:	movt	r1, #1
   116a8:	mov	r0, r3
   116ac:	bl	10cb4 <strcmp@plt>
   116b0:	cmp	r0, #0
   116b4:	beq	11758 <__assert_fail@plt+0x858>
   116b8:	movw	r1, #26596	; 0x67e4
   116bc:	movt	r1, #1
   116c0:	ldr	r0, [sp, #24]
   116c4:	bl	10ec4 <fopen64@plt>
   116c8:	subs	sl, r0, #0
   116cc:	bne	11764 <__assert_fail@plt+0x864>
   116d0:	bl	10e1c <__errno_location@plt>
   116d4:	ldr	r4, [r0]
   116d8:	ldr	r2, [sp, #24]
   116dc:	mov	r1, #3
   116e0:	mov	r0, #0
   116e4:	bl	14a28 <__assert_fail@plt+0x3b28>
   116e8:	mov	r3, r0
   116ec:	movw	r2, #26548	; 0x67b4
   116f0:	movt	r2, #1
   116f4:	mov	r1, r4
   116f8:	mov	r0, #1
   116fc:	bl	10da4 <error@plt>
   11700:	mov	r2, #5
   11704:	movw	r1, #26576	; 0x67d0
   11708:	movt	r1, #1
   1170c:	mov	r0, #0
   11710:	bl	10d38 <dcgettext@plt>
   11714:	mov	r4, r0
   11718:	movw	r3, #28984	; 0x7138
   1171c:	movt	r3, #2
   11720:	ldr	r3, [r3]
   11724:	add	r3, r3, #1
   11728:	ldr	r0, [r5, r3, lsl #2]
   1172c:	bl	14bf4 <__assert_fail@plt+0x3cf4>
   11730:	mov	r3, r0
   11734:	mov	r2, r4
   11738:	mov	r1, #0
   1173c:	mov	r0, r1
   11740:	bl	10da4 <error@plt>
   11744:	mov	r0, #1
   11748:	bl	11090 <__assert_fail@plt+0x190>
   1174c:	movw	r3, #25336	; 0x62f8
   11750:	movt	r3, #1
   11754:	str	r3, [sp, #24]
   11758:	movw	r3, #29000	; 0x7148
   1175c:	movt	r3, #2
   11760:	ldr	sl, [r3]
   11764:	mov	r1, #2
   11768:	mov	r0, sl
   1176c:	bl	1266c <__assert_fail@plt+0x176c>
   11770:	cmp	r8, #0
   11774:	beq	1190c <__assert_fail@plt+0xa0c>
   11778:	movw	r3, #29004	; 0x714c
   1177c:	movt	r3, #2
   11780:	ldr	r3, [r3]
   11784:	str	r3, [sp, #16]
   11788:	mov	r0, #8192	; 0x2000
   1178c:	bl	151c8 <__assert_fail@plt+0x42c8>
   11790:	mov	r9, r0
   11794:	mov	r0, #5120	; 0x1400
   11798:	bl	151c8 <__assert_fail@plt+0x42c8>
   1179c:	str	r0, [sp, #12]
   117a0:	add	r0, sp, #48	; 0x30
   117a4:	bl	121e4 <__assert_fail@plt+0x12e4>
   117a8:	str	fp, [sp, #20]
   117ac:	b	11c4c <__assert_fail@plt+0xd4c>
   117b0:	sub	r5, r5, #1
   117b4:	add	r1, r6, #1
   117b8:	sub	r2, r5, r7
   117bc:	add	r1, r9, r1
   117c0:	mov	r0, r8
   117c4:	bl	10cd8 <memmove@plt>
   117c8:	bic	r3, r7, r7, asr #31
   117cc:	cmp	r5, r3
   117d0:	ble	11800 <__assert_fail@plt+0x900>
   117d4:	add	r6, r4, r7
   117d8:	add	r8, r9, r6
   117dc:	ldrb	fp, [r9, r6]
   117e0:	mov	r0, fp
   117e4:	bl	121cc <__assert_fail@plt+0x12cc>
   117e8:	cmp	fp, #61	; 0x3d
   117ec:	orreq	r0, r0, #1
   117f0:	tst	r0, #255	; 0xff
   117f4:	addne	r7, r7, #1
   117f8:	bne	117c8 <__assert_fail@plt+0x8c8>
   117fc:	b	117b0 <__assert_fail@plt+0x8b0>
   11800:	add	r4, r4, r5
   11804:	ldr	r3, [sl]
   11808:	ands	r6, r3, #32
   1180c:	bne	1184c <__assert_fail@plt+0x94c>
   11810:	cmp	r4, #8192	; 0x2000
   11814:	bge	118fc <__assert_fail@plt+0x9fc>
   11818:	tst	r3, #16
   1181c:	bne	11878 <__assert_fail@plt+0x978>
   11820:	mov	r3, sl
   11824:	rsb	r2, r4, #8192	; 0x2000
   11828:	mov	r1, #1
   1182c:	add	r0, r9, r4
   11830:	bl	10edc <fread_unlocked@plt>
   11834:	mov	r5, r0
   11838:	ldr	r3, [sp, #20]
   1183c:	cmp	r3, #0
   11840:	beq	11800 <__assert_fail@plt+0x900>
   11844:	mov	r7, #0
   11848:	b	117c8 <__assert_fail@plt+0x8c8>
   1184c:	bl	10e1c <__errno_location@plt>
   11850:	ldr	r4, [r0]
   11854:	mov	r2, #5
   11858:	movw	r1, #26600	; 0x67e8
   1185c:	movt	r1, #1
   11860:	mov	r0, #0
   11864:	bl	10d38 <dcgettext@plt>
   11868:	mov	r2, r0
   1186c:	mov	r1, r4
   11870:	mov	r0, #1
   11874:	bl	10da4 <error@plt>
   11878:	mov	r5, r6
   1187c:	b	11900 <__assert_fail@plt+0xa00>
   11880:	ldr	r2, [sp, #48]	; 0x30
   11884:	cmp	r2, #0
   11888:	beq	118e8 <__assert_fail@plt+0x9e8>
   1188c:	str	r7, [sp, #44]	; 0x2c
   11890:	mov	r2, fp
   11894:	b	11bf0 <__assert_fail@plt+0xcf0>
   11898:	bl	10e1c <__errno_location@plt>
   1189c:	ldr	r4, [r0]
   118a0:	mov	r2, #5
   118a4:	movw	r1, #26612	; 0x67f4
   118a8:	movt	r1, #1
   118ac:	mov	r0, #0
   118b0:	bl	10d38 <dcgettext@plt>
   118b4:	mov	r2, r0
   118b8:	mov	r1, r4
   118bc:	mov	r0, #1
   118c0:	bl	10da4 <error@plt>
   118c4:	mov	r2, #5
   118c8:	movw	r1, #26624	; 0x6800
   118cc:	movt	r1, #1
   118d0:	mov	r0, #0
   118d4:	bl	10d38 <dcgettext@plt>
   118d8:	mov	r2, r0
   118dc:	mov	r1, #0
   118e0:	mov	r0, #1
   118e4:	bl	10da4 <error@plt>
   118e8:	cmp	r3, #0
   118ec:	beq	11c4c <__assert_fail@plt+0xd4c>
   118f0:	ldr	r1, [sp, #24]
   118f4:	mov	r0, sl
   118f8:	bl	10ffc <__assert_fail@plt+0xfc>
   118fc:	mov	r5, r6
   11900:	mov	r7, #5120	; 0x1400
   11904:	mov	fp, r6
   11908:	b	11c38 <__assert_fail@plt+0xd38>
   1190c:	movw	r3, #29004	; 0x714c
   11910:	movt	r3, #2
   11914:	ldr	fp, [r3]
   11918:	mov	r0, #30720	; 0x7800
   1191c:	bl	151c8 <__assert_fail@plt+0x42c8>
   11920:	mov	r8, r0
   11924:	mov	r0, #49152	; 0xc000
   11928:	bl	151c8 <__assert_fail@plt+0x42c8>
   1192c:	str	r0, [sp, #16]
   11930:	mov	r9, #0
   11934:	movw	r3, #29004	; 0x714c
   11938:	movt	r3, #2
   1193c:	str	r3, [sp, #20]
   11940:	str	r6, [sp, #12]
   11944:	b	11a60 <__assert_fail@plt+0xb60>
   11948:	mov	r6, #0
   1194c:	str	sl, [sp, #28]
   11950:	str	r8, [sp, #32]
   11954:	ldr	r8, [sp, #16]
   11958:	str	r5, [sp, #36]	; 0x24
   1195c:	ldr	r5, [sp, #12]
   11960:	ldr	sl, [sp, #20]
   11964:	b	11998 <__assert_fail@plt+0xa98>
   11968:	ldr	r3, [sl]
   1196c:	mov	r2, r4
   11970:	mov	r1, #1
   11974:	add	r0, r8, r6
   11978:	bl	10d14 <fwrite_unlocked@plt>
   1197c:	cmp	r4, r0
   11980:	bhi	11a10 <__assert_fail@plt+0xb10>
   11984:	add	r6, r6, r4
   11988:	add	r4, r4, r9
   1198c:	cmp	r6, r7
   11990:	bge	11a3c <__assert_fail@plt+0xb3c>
   11994:	mov	r9, r4
   11998:	sub	r4, r7, r6
   1199c:	sub	r3, r5, r9
   119a0:	cmp	r4, r3
   119a4:	movge	r4, r3
   119a8:	cmp	r4, #0
   119ac:	bne	11968 <__assert_fail@plt+0xa68>
   119b0:	ldr	r3, [fp, #20]
   119b4:	ldr	r2, [fp, #24]
   119b8:	cmp	r3, r2
   119bc:	addcc	r2, r3, #1
   119c0:	strcc	r2, [fp, #20]
   119c4:	movcc	r2, #10
   119c8:	strbcc	r2, [r3]
   119cc:	bcc	1198c <__assert_fail@plt+0xa8c>
   119d0:	mov	r1, #10
   119d4:	mov	r0, fp
   119d8:	bl	10e88 <__overflow@plt>
   119dc:	cmn	r0, #1
   119e0:	bne	1198c <__assert_fail@plt+0xa8c>
   119e4:	bl	10e1c <__errno_location@plt>
   119e8:	ldr	r4, [r0]
   119ec:	mov	r2, #5
   119f0:	movw	r1, #26612	; 0x67f4
   119f4:	movt	r1, #1
   119f8:	mov	r0, #0
   119fc:	bl	10d38 <dcgettext@plt>
   11a00:	mov	r2, r0
   11a04:	mov	r1, r4
   11a08:	mov	r0, #1
   11a0c:	bl	10da4 <error@plt>
   11a10:	bl	10e1c <__errno_location@plt>
   11a14:	ldr	r4, [r0]
   11a18:	mov	r2, #5
   11a1c:	movw	r1, #26612	; 0x67f4
   11a20:	movt	r1, #1
   11a24:	mov	r0, #0
   11a28:	bl	10d38 <dcgettext@plt>
   11a2c:	mov	r2, r0
   11a30:	mov	r1, r4
   11a34:	mov	r0, #1
   11a38:	bl	10da4 <error@plt>
   11a3c:	ldr	sl, [sp, #28]
   11a40:	ldr	r8, [sp, #32]
   11a44:	ldr	r5, [sp, #36]	; 0x24
   11a48:	mov	r9, r4
   11a4c:	ldr	r3, [sl]
   11a50:	and	r3, r3, #48	; 0x30
   11a54:	cmp	r5, #30720	; 0x7800
   11a58:	cmpeq	r3, #0
   11a5c:	bne	11b1c <__assert_fail@plt+0xc1c>
   11a60:	mov	r5, #0
   11a64:	movw	r4, #30719	; 0x77ff
   11a68:	mov	r3, sl
   11a6c:	rsb	r2, r5, #30720	; 0x7800
   11a70:	mov	r1, #1
   11a74:	add	r0, r8, r5
   11a78:	bl	10edc <fread_unlocked@plt>
   11a7c:	add	r5, r5, r0
   11a80:	ldr	r3, [sl]
   11a84:	and	r3, r3, #48	; 0x30
   11a88:	cmp	r5, r4
   11a8c:	cmple	r3, #0
   11a90:	beq	11a68 <__assert_fail@plt+0xb68>
   11a94:	cmp	r5, #0
   11a98:	ble	11a4c <__assert_fail@plt+0xb4c>
   11a9c:	add	r7, r5, #4
   11aa0:	mov	r3, #5
   11aa4:	sdiv	r7, r7, r3
   11aa8:	lsl	r7, r7, #3
   11aac:	mov	r3, r7
   11ab0:	ldr	r4, [sp, #16]
   11ab4:	mov	r2, r4
   11ab8:	mov	r1, r5
   11abc:	mov	r0, r8
   11ac0:	bl	11ef0 <__assert_fail@plt+0xff0>
   11ac4:	ldr	r3, [sp, #12]
   11ac8:	cmp	r3, #0
   11acc:	bne	11948 <__assert_fail@plt+0xa48>
   11ad0:	ldr	r3, [sp, #20]
   11ad4:	ldr	r3, [r3]
   11ad8:	mov	r2, r7
   11adc:	mov	r1, #1
   11ae0:	mov	r0, r4
   11ae4:	bl	10d14 <fwrite_unlocked@plt>
   11ae8:	cmp	r7, r0
   11aec:	bls	11a4c <__assert_fail@plt+0xb4c>
   11af0:	bl	10e1c <__errno_location@plt>
   11af4:	ldr	r4, [r0]
   11af8:	mov	r2, #5
   11afc:	movw	r1, #26612	; 0x67f4
   11b00:	movt	r1, #1
   11b04:	mov	r0, #0
   11b08:	bl	10d38 <dcgettext@plt>
   11b0c:	mov	r2, r0
   11b10:	mov	r1, r4
   11b14:	mov	r0, #1
   11b18:	bl	10da4 <error@plt>
   11b1c:	ldr	r6, [sp, #12]
   11b20:	cmp	r6, #0
   11b24:	cmpne	r9, #0
   11b28:	bgt	11b44 <__assert_fail@plt+0xc44>
   11b2c:	ldr	r3, [sl]
   11b30:	tst	r3, #32
   11b34:	bne	11ba4 <__assert_fail@plt+0xca4>
   11b38:	ldr	r1, [sp, #24]
   11b3c:	mov	r0, sl
   11b40:	bl	10ffc <__assert_fail@plt+0xfc>
   11b44:	ldr	r3, [fp, #20]
   11b48:	ldr	r2, [fp, #24]
   11b4c:	cmp	r3, r2
   11b50:	addcc	r2, r3, #1
   11b54:	strcc	r2, [fp, #20]
   11b58:	movcc	r2, #10
   11b5c:	strbcc	r2, [r3]
   11b60:	bcc	11b2c <__assert_fail@plt+0xc2c>
   11b64:	mov	r1, #10
   11b68:	mov	r0, fp
   11b6c:	bl	10e88 <__overflow@plt>
   11b70:	cmn	r0, #1
   11b74:	bne	11b2c <__assert_fail@plt+0xc2c>
   11b78:	bl	10e1c <__errno_location@plt>
   11b7c:	ldr	r4, [r0]
   11b80:	mov	r2, #5
   11b84:	movw	r1, #26612	; 0x67f4
   11b88:	movt	r1, #1
   11b8c:	mov	r0, #0
   11b90:	bl	10d38 <dcgettext@plt>
   11b94:	mov	r2, r0
   11b98:	mov	r1, r4
   11b9c:	mov	r0, #1
   11ba0:	bl	10da4 <error@plt>
   11ba4:	bl	10e1c <__errno_location@plt>
   11ba8:	ldr	r4, [r0]
   11bac:	mov	r2, #5
   11bb0:	movw	r1, #26600	; 0x67e8
   11bb4:	movt	r1, #1
   11bb8:	mov	r0, #0
   11bbc:	bl	10d38 <dcgettext@plt>
   11bc0:	mov	r2, r0
   11bc4:	mov	r1, r4
   11bc8:	mov	r0, #1
   11bcc:	bl	10da4 <error@plt>
   11bd0:	cmp	r5, #1
   11bd4:	bgt	118f0 <__assert_fail@plt+0x9f0>
   11bd8:	cmp	r5, #1
   11bdc:	beq	11880 <__assert_fail@plt+0x980>
   11be0:	str	r7, [sp, #44]	; 0x2c
   11be4:	cmp	r5, #0
   11be8:	movne	r2, r6
   11bec:	moveq	r2, r4
   11bf0:	add	r3, sp, #44	; 0x2c
   11bf4:	str	r3, [sp]
   11bf8:	ldr	r3, [sp, #12]
   11bfc:	mov	r1, r9
   11c00:	add	r0, sp, #48	; 0x30
   11c04:	bl	121f0 <__assert_fail@plt+0x12f0>
   11c08:	mov	r8, r0
   11c0c:	ldr	r3, [sp, #16]
   11c10:	ldr	r2, [sp, #44]	; 0x2c
   11c14:	mov	r1, #1
   11c18:	ldr	r0, [sp, #12]
   11c1c:	bl	10d14 <fwrite_unlocked@plt>
   11c20:	ldr	r3, [sp, #44]	; 0x2c
   11c24:	cmp	r0, r3
   11c28:	bcc	11898 <__assert_fail@plt+0x998>
   11c2c:	cmp	r8, #0
   11c30:	beq	118c4 <__assert_fail@plt+0x9c4>
   11c34:	add	r5, r5, #1
   11c38:	ldr	r3, [sl]
   11c3c:	ands	r3, r3, #16
   11c40:	bne	11bd0 <__assert_fail@plt+0xcd0>
   11c44:	cmp	r5, #0
   11c48:	ble	11bd8 <__assert_fail@plt+0xcd8>
   11c4c:	mov	r4, #0
   11c50:	b	11820 <__assert_fail@plt+0x920>
   11c54:	muleq	r1, r8, r2
   11c58:	cmp	r1, #7
   11c5c:	ble	11ee0 <__assert_fail@plt+0xfe0>
   11c60:	movw	r1, #26812	; 0x68bc
   11c64:	movt	r1, #1
   11c68:	ldrb	ip, [r0]
   11c6c:	ldrsb	ip, [r1, ip]
   11c70:	cmp	ip, #0
   11c74:	blt	11ee8 <__assert_fail@plt+0xfe8>
   11c78:	strd	r4, [sp, #-12]!
   11c7c:	str	lr, [sp, #8]
   11c80:	movw	r1, #26812	; 0x68bc
   11c84:	movt	r1, #1
   11c88:	ldrb	lr, [r0, #1]
   11c8c:	ldrsb	r4, [r1, lr]
   11c90:	cmp	r4, #0
   11c94:	movlt	r0, #0
   11c98:	blt	11e74 <__assert_fail@plt+0xf74>
   11c9c:	ldr	r1, [r2]
   11ca0:	ldr	lr, [r3]
   11ca4:	cmp	lr, #0
   11ca8:	beq	11cc4 <__assert_fail@plt+0xdc4>
   11cac:	asr	lr, r4, #2
   11cb0:	orr	ip, lr, ip, lsl #3
   11cb4:	strb	ip, [r1], #1
   11cb8:	ldr	ip, [r3]
   11cbc:	sub	ip, ip, #1
   11cc0:	str	ip, [r3]
   11cc4:	ldrb	ip, [r0, #2]
   11cc8:	cmp	ip, #61	; 0x3d
   11ccc:	beq	11e24 <__assert_fail@plt+0xf24>
   11cd0:	movw	lr, #26812	; 0x68bc
   11cd4:	movt	lr, #1
   11cd8:	ldrsb	ip, [lr, ip]
   11cdc:	cmp	ip, #0
   11ce0:	blt	11e6c <__assert_fail@plt+0xf6c>
   11ce4:	movw	lr, #26812	; 0x68bc
   11ce8:	movt	lr, #1
   11cec:	ldrb	r5, [r0, #3]
   11cf0:	ldrsb	lr, [lr, r5]
   11cf4:	cmp	lr, #0
   11cf8:	blt	11e6c <__assert_fail@plt+0xf6c>
   11cfc:	ldr	r5, [r3]
   11d00:	cmp	r5, #0
   11d04:	beq	11d24 <__assert_fail@plt+0xe24>
   11d08:	lsl	ip, ip, #1
   11d0c:	orr	ip, ip, r4, lsl #6
   11d10:	orr	ip, ip, lr, asr #4
   11d14:	strb	ip, [r1], #1
   11d18:	ldr	ip, [r3]
   11d1c:	sub	ip, ip, #1
   11d20:	str	ip, [r3]
   11d24:	ldrb	ip, [r0, #4]
   11d28:	cmp	ip, #61	; 0x3d
   11d2c:	beq	11e80 <__assert_fail@plt+0xf80>
   11d30:	movw	r4, #26812	; 0x68bc
   11d34:	movt	r4, #1
   11d38:	ldrsb	ip, [r4, ip]
   11d3c:	cmp	ip, #0
   11d40:	strlt	r1, [r2]
   11d44:	movlt	r0, #0
   11d48:	blt	11e74 <__assert_fail@plt+0xf74>
   11d4c:	ldr	r4, [r3]
   11d50:	cmp	r4, #0
   11d54:	beq	11d70 <__assert_fail@plt+0xe70>
   11d58:	asr	r4, ip, #1
   11d5c:	orr	lr, r4, lr, lsl #4
   11d60:	strb	lr, [r1], #1
   11d64:	ldr	lr, [r3]
   11d68:	sub	lr, lr, #1
   11d6c:	str	lr, [r3]
   11d70:	ldrb	lr, [r0, #5]
   11d74:	cmp	lr, #61	; 0x3d
   11d78:	beq	11eb0 <__assert_fail@plt+0xfb0>
   11d7c:	movw	r4, #26812	; 0x68bc
   11d80:	movt	r4, #1
   11d84:	ldrsb	lr, [r4, lr]
   11d88:	cmp	lr, #0
   11d8c:	blt	11ed4 <__assert_fail@plt+0xfd4>
   11d90:	movw	r4, #26812	; 0x68bc
   11d94:	movt	r4, #1
   11d98:	ldrb	r5, [r0, #6]
   11d9c:	ldrsb	r4, [r4, r5]
   11da0:	cmp	r4, #0
   11da4:	blt	11ed4 <__assert_fail@plt+0xfd4>
   11da8:	ldr	r5, [r3]
   11dac:	cmp	r5, #0
   11db0:	beq	11dd0 <__assert_fail@plt+0xed0>
   11db4:	lsl	lr, lr, #2
   11db8:	orr	ip, lr, ip, lsl #7
   11dbc:	orr	ip, ip, r4, asr #3
   11dc0:	strb	ip, [r1], #1
   11dc4:	ldr	ip, [r3]
   11dc8:	sub	ip, ip, #1
   11dcc:	str	ip, [r3]
   11dd0:	ldrb	r0, [r0, #7]
   11dd4:	cmp	r0, #61	; 0x3d
   11dd8:	beq	11e18 <__assert_fail@plt+0xf18>
   11ddc:	movw	ip, #26812	; 0x68bc
   11de0:	movt	ip, #1
   11de4:	ldrsb	r0, [ip, r0]
   11de8:	cmp	r0, #0
   11dec:	strlt	r1, [r2]
   11df0:	movlt	r0, #0
   11df4:	blt	11e74 <__assert_fail@plt+0xf74>
   11df8:	ldr	ip, [r3]
   11dfc:	cmp	ip, #0
   11e00:	beq	11e18 <__assert_fail@plt+0xf18>
   11e04:	orr	r0, r0, r4, lsl #5
   11e08:	strb	r0, [r1], #1
   11e0c:	ldr	r0, [r3]
   11e10:	sub	r0, r0, #1
   11e14:	str	r0, [r3]
   11e18:	str	r1, [r2]
   11e1c:	mov	r0, #1
   11e20:	b	11e74 <__assert_fail@plt+0xf74>
   11e24:	ldrb	r3, [r0, #3]
   11e28:	cmp	r3, #61	; 0x3d
   11e2c:	bne	11e60 <__assert_fail@plt+0xf60>
   11e30:	ldrb	r3, [r0, #4]
   11e34:	cmp	r3, #61	; 0x3d
   11e38:	bne	11e60 <__assert_fail@plt+0xf60>
   11e3c:	ldrb	r3, [r0, #5]
   11e40:	cmp	r3, #61	; 0x3d
   11e44:	bne	11e60 <__assert_fail@plt+0xf60>
   11e48:	ldrb	r3, [r0, #6]
   11e4c:	cmp	r3, #61	; 0x3d
   11e50:	bne	11e60 <__assert_fail@plt+0xf60>
   11e54:	ldrb	r3, [r0, #7]
   11e58:	cmp	r3, #61	; 0x3d
   11e5c:	beq	11e18 <__assert_fail@plt+0xf18>
   11e60:	str	r1, [r2]
   11e64:	mov	r0, #0
   11e68:	b	11e74 <__assert_fail@plt+0xf74>
   11e6c:	str	r1, [r2]
   11e70:	mov	r0, #0
   11e74:	ldrd	r4, [sp]
   11e78:	add	sp, sp, #8
   11e7c:	pop	{pc}		; (ldr pc, [sp], #4)
   11e80:	ldrb	r3, [r0, #5]
   11e84:	cmp	r3, #61	; 0x3d
   11e88:	bne	11ea4 <__assert_fail@plt+0xfa4>
   11e8c:	ldrb	r3, [r0, #6]
   11e90:	cmp	r3, #61	; 0x3d
   11e94:	bne	11ea4 <__assert_fail@plt+0xfa4>
   11e98:	ldrb	r3, [r0, #7]
   11e9c:	cmp	r3, #61	; 0x3d
   11ea0:	beq	11e18 <__assert_fail@plt+0xf18>
   11ea4:	str	r1, [r2]
   11ea8:	mov	r0, #0
   11eac:	b	11e74 <__assert_fail@plt+0xf74>
   11eb0:	ldrb	r3, [r0, #6]
   11eb4:	cmp	r3, #61	; 0x3d
   11eb8:	bne	11ec8 <__assert_fail@plt+0xfc8>
   11ebc:	ldrb	r3, [r0, #7]
   11ec0:	cmp	r3, #61	; 0x3d
   11ec4:	beq	11e18 <__assert_fail@plt+0xf18>
   11ec8:	str	r1, [r2]
   11ecc:	mov	r0, #0
   11ed0:	b	11e74 <__assert_fail@plt+0xf74>
   11ed4:	str	r1, [r2]
   11ed8:	mov	r0, #0
   11edc:	b	11e74 <__assert_fail@plt+0xf74>
   11ee0:	mov	r0, #0
   11ee4:	bx	lr
   11ee8:	mov	r0, #0
   11eec:	bx	lr
   11ef0:	strd	r4, [sp, #-12]!
   11ef4:	str	lr, [sp, #8]
   11ef8:	movw	r4, #26812	; 0x68bc
   11efc:	movt	r4, #1
   11f00:	mov	r5, #61	; 0x3d
   11f04:	b	11fc8 <__assert_fail@plt+0x10c8>
   11f08:	and	ip, ip, #31
   11f0c:	add	ip, r4, ip
   11f10:	ldrb	ip, [ip, #256]	; 0x100
   11f14:	strb	ip, [r2, #1]
   11f18:	cmp	r3, #2
   11f1c:	beq	120fc <__assert_fail@plt+0x11fc>
   11f20:	cmp	lr, #0
   11f24:	bne	12018 <__assert_fail@plt+0x1118>
   11f28:	strb	r5, [r2, #2]
   11f2c:	cmp	r3, #3
   11f30:	beq	120fc <__assert_fail@plt+0x11fc>
   11f34:	strb	r5, [r2, #3]
   11f38:	cmp	r3, #4
   11f3c:	beq	120fc <__assert_fail@plt+0x11fc>
   11f40:	mov	r1, r5
   11f44:	b	12088 <__assert_fail@plt+0x1188>
   11f48:	strb	r5, [r2, #5]
   11f4c:	cmp	r3, #6
   11f50:	beq	120fc <__assert_fail@plt+0x11fc>
   11f54:	cmp	lr, #0
   11f58:	moveq	r1, r5
   11f5c:	bne	120b8 <__assert_fail@plt+0x11b8>
   11f60:	strb	r1, [r2, #6]
   11f64:	cmp	r3, #7
   11f68:	beq	120fc <__assert_fail@plt+0x11fc>
   11f6c:	cmp	lr, #0
   11f70:	beq	11fb4 <__assert_fail@plt+0x10b4>
   11f74:	add	r2, r2, #8
   11f78:	ldrb	r1, [r0, #4]
   11f7c:	and	r1, r1, #31
   11f80:	add	r1, r4, r1
   11f84:	ldrb	r1, [r1, #256]	; 0x100
   11f88:	strb	r1, [r2, #-1]
   11f8c:	subs	r3, r3, #8
   11f90:	beq	120fc <__assert_fail@plt+0x11fc>
   11f94:	subs	lr, lr, #1
   11f98:	addne	r0, r0, #5
   11f9c:	b	11fc4 <__assert_fail@plt+0x10c4>
   11fa0:	cmp	r3, #0
   11fa4:	beq	120fc <__assert_fail@plt+0x11fc>
   11fa8:	mov	r3, #0
   11fac:	strb	r3, [r2]
   11fb0:	b	120fc <__assert_fail@plt+0x11fc>
   11fb4:	add	r2, r2, #8
   11fb8:	strb	r5, [r2, #-1]
   11fbc:	subs	r3, r3, #8
   11fc0:	beq	120fc <__assert_fail@plt+0x11fc>
   11fc4:	mov	r1, lr
   11fc8:	cmp	r1, #0
   11fcc:	cmpne	r3, #0
   11fd0:	beq	11fa0 <__assert_fail@plt+0x10a0>
   11fd4:	ldrb	ip, [r0]
   11fd8:	add	lr, r4, ip, lsr #3
   11fdc:	ldrb	lr, [lr, #256]	; 0x100
   11fe0:	strb	lr, [r2]
   11fe4:	cmp	r3, #1
   11fe8:	beq	120fc <__assert_fail@plt+0x11fc>
   11fec:	lsl	ip, ip, #2
   11ff0:	subs	lr, r1, #1
   11ff4:	beq	11f08 <__assert_fail@plt+0x1008>
   11ff8:	ldrb	lr, [r0, #1]
   11ffc:	add	ip, ip, lr, lsr #6
   12000:	and	ip, ip, #31
   12004:	add	ip, r4, ip
   12008:	ldrb	ip, [ip, #256]	; 0x100
   1200c:	strb	ip, [r2, #1]
   12010:	cmp	r3, #2
   12014:	beq	120fc <__assert_fail@plt+0x11fc>
   12018:	ldrb	ip, [r0, #1]
   1201c:	ubfx	ip, ip, #1, #5
   12020:	add	ip, r4, ip
   12024:	ldrb	ip, [ip, #256]	; 0x100
   12028:	strb	ip, [r2, #2]
   1202c:	cmp	r3, #3
   12030:	beq	120fc <__assert_fail@plt+0x11fc>
   12034:	ldrb	ip, [r0, #1]
   12038:	lsl	ip, ip, #4
   1203c:	cmp	r1, #2
   12040:	beq	120e4 <__assert_fail@plt+0x11e4>
   12044:	ldrb	lr, [r0, #2]
   12048:	add	ip, ip, lr, lsr #4
   1204c:	and	ip, ip, #31
   12050:	add	ip, r4, ip
   12054:	ldrb	ip, [ip, #256]	; 0x100
   12058:	strb	ip, [r2, #3]
   1205c:	cmp	r3, #4
   12060:	beq	120fc <__assert_fail@plt+0x11fc>
   12064:	lsl	ip, lr, #1
   12068:	subs	lr, r1, #3
   1206c:	ldrbne	r1, [r0, #3]
   12070:	lsrne	r1, r1, #7
   12074:	moveq	r1, lr
   12078:	add	ip, ip, r1
   1207c:	and	ip, ip, #31
   12080:	add	ip, r4, ip
   12084:	ldrb	r1, [ip, #256]	; 0x100
   12088:	strb	r1, [r2, #4]
   1208c:	cmp	r3, #5
   12090:	beq	120fc <__assert_fail@plt+0x11fc>
   12094:	cmp	lr, #0
   12098:	beq	11f48 <__assert_fail@plt+0x1048>
   1209c:	ldrb	r1, [r0, #3]
   120a0:	ubfx	r1, r1, #2, #5
   120a4:	add	r1, r4, r1
   120a8:	ldrb	r1, [r1, #256]	; 0x100
   120ac:	strb	r1, [r2, #5]
   120b0:	cmp	r3, #6
   120b4:	beq	120fc <__assert_fail@plt+0x11fc>
   120b8:	ldrb	r1, [r0, #3]
   120bc:	lsl	r1, r1, #3
   120c0:	subs	lr, lr, #1
   120c4:	ldrbne	ip, [r0, #4]
   120c8:	lsrne	ip, ip, #5
   120cc:	moveq	ip, lr
   120d0:	add	r1, r1, ip
   120d4:	and	r1, r1, #31
   120d8:	add	r1, r4, r1
   120dc:	ldrb	r1, [r1, #256]	; 0x100
   120e0:	b	11f60 <__assert_fail@plt+0x1060>
   120e4:	and	ip, ip, #31
   120e8:	add	ip, r4, ip
   120ec:	ldrb	r1, [ip, #256]	; 0x100
   120f0:	strb	r1, [r2, #3]
   120f4:	cmp	r3, #4
   120f8:	bne	12108 <__assert_fail@plt+0x1208>
   120fc:	ldrd	r4, [sp]
   12100:	add	sp, sp, #8
   12104:	pop	{pc}		; (ldr pc, [sp], #4)
   12108:	mov	r1, r5
   1210c:	mov	lr, #0
   12110:	b	12088 <__assert_fail@plt+0x1188>
   12114:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12118:	strd	r6, [sp, #8]
   1211c:	str	r8, [sp, #16]
   12120:	str	lr, [sp, #20]
   12124:	movw	r3, #26215	; 0x6667
   12128:	movt	r3, #26214	; 0x6666
   1212c:	smull	r3, ip, r3, r1
   12130:	asr	r3, r1, #31
   12134:	rsb	r3, r3, ip, asr #1
   12138:	add	ip, r3, r3, lsl #2
   1213c:	cmp	r1, ip
   12140:	addne	r3, r3, #1
   12144:	asr	r5, r3, #31
   12148:	lsl	lr, r5, #3
   1214c:	orr	lr, lr, r3, lsr #29
   12150:	lsl	r3, r3, #3
   12154:	asr	ip, r3, #31
   12158:	subs	ip, ip, lr
   1215c:	movne	ip, #1
   12160:	orrs	ip, ip, r1, lsr #31
   12164:	movne	r6, #0
   12168:	strne	r6, [r2]
   1216c:	beq	12188 <__assert_fail@plt+0x1288>
   12170:	mov	r0, r6
   12174:	ldrd	r4, [sp]
   12178:	ldrd	r6, [sp, #8]
   1217c:	ldr	r8, [sp, #16]
   12180:	add	sp, sp, #20
   12184:	pop	{pc}		; (ldr pc, [sp], #4)
   12188:	mov	r8, r2
   1218c:	mov	r5, r1
   12190:	mov	r7, r0
   12194:	mov	r6, r3
   12198:	add	r4, r3, #1
   1219c:	mov	r0, r4
   121a0:	bl	15ea8 <__assert_fail@plt+0x4fa8>
   121a4:	str	r0, [r8]
   121a8:	cmp	r0, #0
   121ac:	moveq	r6, r4
   121b0:	beq	12170 <__assert_fail@plt+0x1270>
   121b4:	mov	r3, r4
   121b8:	mov	r2, r0
   121bc:	mov	r1, r5
   121c0:	mov	r0, r7
   121c4:	bl	11ef0 <__assert_fail@plt+0xff0>
   121c8:	b	12170 <__assert_fail@plt+0x1270>
   121cc:	movw	r3, #26812	; 0x68bc
   121d0:	movt	r3, #1
   121d4:	ldrb	r0, [r3, r0]
   121d8:	mvn	r0, r0
   121dc:	ubfx	r0, r0, #7, #1
   121e0:	bx	lr
   121e4:	mov	r3, #0
   121e8:	str	r3, [r0]
   121ec:	bx	lr
   121f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   121f4:	strd	r6, [sp, #8]
   121f8:	strd	r8, [sp, #16]
   121fc:	strd	sl, [sp, #24]
   12200:	str	lr, [sp, #32]
   12204:	sub	sp, sp, #20
   12208:	mov	fp, r1
   1220c:	mov	r5, r2
   12210:	str	r3, [sp, #4]
   12214:	ldr	r3, [sp, #56]	; 0x38
   12218:	ldr	r3, [r3]
   1221c:	str	r3, [sp, #12]
   12220:	subs	r6, r0, #0
   12224:	movne	sl, #1
   12228:	moveq	sl, #0
   1222c:	beq	1224c <__assert_fail@plt+0x134c>
   12230:	ldr	r9, [r6]
   12234:	clz	r8, r2
   12238:	lsr	r8, r8, #5
   1223c:	eor	r8, r8, #1
   12240:	and	r3, r8, sl
   12244:	str	r3, [sp]
   12248:	b	12330 <__assert_fail@plt+0x1430>
   1224c:	mov	r9, #0
   12250:	mov	r8, r9
   12254:	b	1223c <__assert_fail@plt+0x133c>
   12258:	mov	r4, fp
   1225c:	add	fp, fp, r5
   12260:	sub	r5, fp, r4
   12264:	ldr	r7, [sp, #12]
   12268:	add	r3, sp, #12
   1226c:	add	r2, sp, #4
   12270:	mov	r1, r5
   12274:	mov	r0, r4
   12278:	bl	11c58 <__assert_fail@plt+0xd58>
   1227c:	cmp	r0, #0
   12280:	beq	1234c <__assert_fail@plt+0x144c>
   12284:	add	r4, r4, #8
   12288:	b	12260 <__assert_fail@plt+0x1360>
   1228c:	mov	r2, #8
   12290:	mov	r1, #10
   12294:	mov	r0, r4
   12298:	bl	10e64 <memchr@plt>
   1229c:	cmp	r0, #0
   122a0:	bne	12450 <__assert_fail@plt+0x1550>
   122a4:	add	fp, r4, #8
   122a8:	mov	r5, #8
   122ac:	b	12310 <__assert_fail@plt+0x1410>
   122b0:	cmp	r4, r7
   122b4:	beq	122e8 <__assert_fail@plt+0x13e8>
   122b8:	ldrb	r1, [r4], #1
   122bc:	cmp	r1, #10
   122c0:	beq	122b0 <__assert_fail@plt+0x13b0>
   122c4:	ldr	r0, [r6]
   122c8:	add	r2, r0, #1
   122cc:	mov	r3, r6
   122d0:	str	r2, [r3], r0
   122d4:	strb	r1, [r3, #4]
   122d8:	cmp	r2, #8
   122dc:	bne	122b0 <__assert_fail@plt+0x13b0>
   122e0:	mov	fp, r4
   122e4:	b	122ec <__assert_fail@plt+0x13ec>
   122e8:	mov	fp, r7
   122ec:	mov	r4, r6
   122f0:	ldr	r5, [r4], #4
   122f4:	cmp	r5, #0
   122f8:	beq	123b8 <__assert_fail@plt+0x14b8>
   122fc:	cmp	r5, #7
   12300:	bgt	12310 <__assert_fail@plt+0x1410>
   12304:	ldr	r3, [sp]
   12308:	cmp	r3, #0
   1230c:	bne	123f4 <__assert_fail@plt+0x14f4>
   12310:	add	r3, sp, #12
   12314:	add	r2, sp, #4
   12318:	mov	r1, r5
   1231c:	mov	r0, r4
   12320:	bl	11c58 <__assert_fail@plt+0xd58>
   12324:	cmp	r0, #0
   12328:	beq	123b8 <__assert_fail@plt+0x14b8>
   1232c:	sub	r5, r7, fp
   12330:	cmp	r9, #0
   12334:	moveq	r3, r8
   12338:	movne	r3, #0
   1233c:	cmp	r3, #0
   12340:	bne	12258 <__assert_fail@plt+0x1358>
   12344:	ldr	r7, [sp, #12]
   12348:	mov	r4, fp
   1234c:	cmp	r5, #0
   12350:	moveq	r3, r8
   12354:	movne	r3, #0
   12358:	cmp	r3, #0
   1235c:	bne	123b4 <__assert_fail@plt+0x14b4>
   12360:	cmp	r5, #0
   12364:	beq	123fc <__assert_fail@plt+0x14fc>
   12368:	ldrb	r3, [r4]
   1236c:	cmp	r3, #10
   12370:	movne	r3, #0
   12374:	andeq	r3, sl, #1
   12378:	cmp	r3, #0
   1237c:	addne	fp, r4, #1
   12380:	subne	r5, r5, #1
   12384:	bne	12330 <__assert_fail@plt+0x1430>
   12388:	ldr	r3, [sp, #12]
   1238c:	sub	r2, r7, r3
   12390:	ldr	r3, [sp, #4]
   12394:	sub	r3, r3, r2
   12398:	str	r3, [sp, #4]
   1239c:	str	r7, [sp, #12]
   123a0:	add	r7, r4, r5
   123a4:	cmp	r6, #0
   123a8:	moveq	fp, r4
   123ac:	beq	122f4 <__assert_fail@plt+0x13f4>
   123b0:	b	12420 <__assert_fail@plt+0x1520>
   123b4:	mov	r5, #0
   123b8:	ldr	r3, [sp, #56]	; 0x38
   123bc:	ldr	r3, [r3]
   123c0:	ldr	r2, [sp, #12]
   123c4:	sub	r3, r3, r2
   123c8:	ldr	r2, [sp, #56]	; 0x38
   123cc:	str	r3, [r2]
   123d0:	clz	r0, r5
   123d4:	lsr	r0, r0, #5
   123d8:	add	sp, sp, #20
   123dc:	ldrd	r4, [sp]
   123e0:	ldrd	r6, [sp, #8]
   123e4:	ldrd	r8, [sp, #16]
   123e8:	ldrd	sl, [sp, #24]
   123ec:	add	sp, sp, #32
   123f0:	pop	{pc}		; (ldr pc, [sp], #4)
   123f4:	mov	r5, #0
   123f8:	b	123b8 <__assert_fail@plt+0x14b8>
   123fc:	ldr	r3, [sp, #12]
   12400:	sub	r2, r7, r3
   12404:	ldr	r3, [sp, #4]
   12408:	sub	r3, r3, r2
   1240c:	str	r3, [sp, #4]
   12410:	str	r7, [sp, #12]
   12414:	add	r7, r4, r5
   12418:	cmp	r6, #0
   1241c:	beq	123b8 <__assert_fail@plt+0x14b8>
   12420:	ldr	r3, [r6]
   12424:	cmp	r3, #8
   12428:	moveq	r3, #0
   1242c:	streq	r3, [r6]
   12430:	ldr	r3, [r6]
   12434:	cmp	r5, #7
   12438:	movle	r5, #0
   1243c:	movgt	r5, #1
   12440:	cmp	r3, #0
   12444:	movne	r5, #0
   12448:	cmp	r5, #0
   1244c:	bne	1228c <__assert_fail@plt+0x138c>
   12450:	cmp	r7, r4
   12454:	movls	fp, r4
   12458:	bhi	122b8 <__assert_fail@plt+0x13b8>
   1245c:	b	122ec <__assert_fail@plt+0x13ec>
   12460:	strd	r4, [sp, #-20]!	; 0xffffffec
   12464:	strd	r6, [sp, #8]
   12468:	str	lr, [sp, #16]
   1246c:	sub	sp, sp, #20
   12470:	mov	r6, r0
   12474:	mov	r7, r1
   12478:	mov	r4, r2
   1247c:	mov	r5, r3
   12480:	asr	r0, r2, #3
   12484:	add	r0, r0, #1
   12488:	add	r0, r0, r0, lsl #2
   1248c:	str	r0, [sp, #12]
   12490:	bl	15ea8 <__assert_fail@plt+0x4fa8>
   12494:	str	r0, [r5]
   12498:	cmp	r0, #0
   1249c:	moveq	r4, #1
   124a0:	beq	124e0 <__assert_fail@plt+0x15e0>
   124a4:	add	r3, sp, #12
   124a8:	str	r3, [sp]
   124ac:	mov	r3, r0
   124b0:	mov	r2, r4
   124b4:	mov	r1, r7
   124b8:	mov	r0, r6
   124bc:	bl	121f0 <__assert_fail@plt+0x12f0>
   124c0:	subs	r4, r0, #0
   124c4:	beq	124f8 <__assert_fail@plt+0x15f8>
   124c8:	ldr	r3, [sp, #40]	; 0x28
   124cc:	cmp	r3, #0
   124d0:	beq	124e0 <__assert_fail@plt+0x15e0>
   124d4:	ldr	r3, [sp, #12]
   124d8:	ldr	r2, [sp, #40]	; 0x28
   124dc:	str	r3, [r2]
   124e0:	mov	r0, r4
   124e4:	add	sp, sp, #20
   124e8:	ldrd	r4, [sp]
   124ec:	ldrd	r6, [sp, #8]
   124f0:	add	sp, sp, #16
   124f4:	pop	{pc}		; (ldr pc, [sp], #4)
   124f8:	ldr	r0, [r5]
   124fc:	bl	127d8 <__assert_fail@plt+0x18d8>
   12500:	mov	r3, #0
   12504:	str	r3, [r5]
   12508:	b	124e0 <__assert_fail@plt+0x15e0>
   1250c:	movw	r3, #29016	; 0x7158
   12510:	movt	r3, #2
   12514:	str	r0, [r3]
   12518:	bx	lr
   1251c:	movw	r3, #29016	; 0x7158
   12520:	movt	r3, #2
   12524:	strb	r0, [r3, #4]
   12528:	bx	lr
   1252c:	strd	r4, [sp, #-16]!
   12530:	str	r6, [sp, #8]
   12534:	str	lr, [sp, #12]
   12538:	sub	sp, sp, #8
   1253c:	movw	r3, #29004	; 0x714c
   12540:	movt	r3, #2
   12544:	ldr	r0, [r3]
   12548:	bl	15f40 <__assert_fail@plt+0x5040>
   1254c:	cmp	r0, #0
   12550:	beq	12578 <__assert_fail@plt+0x1678>
   12554:	movw	r3, #29016	; 0x7158
   12558:	movt	r3, #2
   1255c:	ldrb	r3, [r3, #4]
   12560:	cmp	r3, #0
   12564:	beq	125a4 <__assert_fail@plt+0x16a4>
   12568:	bl	10e1c <__errno_location@plt>
   1256c:	ldr	r3, [r0]
   12570:	cmp	r3, #32
   12574:	bne	125a4 <__assert_fail@plt+0x16a4>
   12578:	movw	r3, #28992	; 0x7140
   1257c:	movt	r3, #2
   12580:	ldr	r0, [r3]
   12584:	bl	15f40 <__assert_fail@plt+0x5040>
   12588:	cmp	r0, #0
   1258c:	bne	1262c <__assert_fail@plt+0x172c>
   12590:	add	sp, sp, #8
   12594:	ldrd	r4, [sp]
   12598:	ldr	r6, [sp, #8]
   1259c:	add	sp, sp, #12
   125a0:	pop	{pc}		; (ldr pc, [sp], #4)
   125a4:	mov	r2, #5
   125a8:	movw	r1, #26612	; 0x67f4
   125ac:	movt	r1, #1
   125b0:	mov	r0, #0
   125b4:	bl	10d38 <dcgettext@plt>
   125b8:	mov	r4, r0
   125bc:	movw	r3, #29016	; 0x7158
   125c0:	movt	r3, #2
   125c4:	ldr	r5, [r3]
   125c8:	cmp	r5, #0
   125cc:	beq	1260c <__assert_fail@plt+0x170c>
   125d0:	bl	10e1c <__errno_location@plt>
   125d4:	ldr	r6, [r0]
   125d8:	mov	r0, r5
   125dc:	bl	149f0 <__assert_fail@plt+0x3af0>
   125e0:	str	r4, [sp]
   125e4:	mov	r3, r0
   125e8:	movw	r2, #26544	; 0x67b0
   125ec:	movt	r2, #1
   125f0:	mov	r1, r6
   125f4:	mov	r0, #0
   125f8:	bl	10da4 <error@plt>
   125fc:	movw	r3, #28908	; 0x70ec
   12600:	movt	r3, #2
   12604:	ldr	r0, [r3]
   12608:	bl	10cf0 <_exit@plt>
   1260c:	bl	10e1c <__errno_location@plt>
   12610:	mov	r3, r4
   12614:	movw	r2, #26548	; 0x67b4
   12618:	movt	r2, #1
   1261c:	ldr	r1, [r0]
   12620:	mov	r0, #0
   12624:	bl	10da4 <error@plt>
   12628:	b	125fc <__assert_fail@plt+0x16fc>
   1262c:	movw	r3, #28908	; 0x70ec
   12630:	movt	r3, #2
   12634:	ldr	r0, [r3]
   12638:	bl	10cf0 <_exit@plt>
   1263c:	strd	r4, [sp, #-12]!
   12640:	str	lr, [sp, #8]
   12644:	sub	sp, sp, #20
   12648:	ldr	r1, [sp, #40]	; 0x28
   1264c:	str	r1, [sp, #8]
   12650:	ldrd	r4, [sp, #32]
   12654:	strd	r4, [sp]
   12658:	bl	10cc0 <posix_fadvise64@plt>
   1265c:	add	sp, sp, #20
   12660:	ldrd	r4, [sp]
   12664:	add	sp, sp, #8
   12668:	pop	{pc}		; (ldr pc, [sp], #4)
   1266c:	cmp	r0, #0
   12670:	bxeq	lr
   12674:	str	r4, [sp, #-8]!
   12678:	str	lr, [sp, #4]
   1267c:	sub	sp, sp, #16
   12680:	mov	r4, r1
   12684:	bl	10e4c <fileno@plt>
   12688:	str	r4, [sp, #8]
   1268c:	mov	r2, #0
   12690:	mov	r3, #0
   12694:	strd	r2, [sp]
   12698:	bl	10cc0 <posix_fadvise64@plt>
   1269c:	add	sp, sp, #16
   126a0:	ldr	r4, [sp]
   126a4:	add	sp, sp, #4
   126a8:	pop	{pc}		; (ldr pc, [sp], #4)
   126ac:	strd	r4, [sp, #-16]!
   126b0:	str	r6, [sp, #8]
   126b4:	str	lr, [sp, #12]
   126b8:	sub	sp, sp, #8
   126bc:	mov	r4, r0
   126c0:	bl	10e4c <fileno@plt>
   126c4:	cmp	r0, #0
   126c8:	blt	12740 <__assert_fail@plt+0x1840>
   126cc:	mov	r0, r4
   126d0:	bl	10dc8 <__freading@plt>
   126d4:	cmp	r0, #0
   126d8:	beq	1270c <__assert_fail@plt+0x180c>
   126dc:	mov	r0, r4
   126e0:	bl	10e4c <fileno@plt>
   126e4:	mov	r3, #1
   126e8:	str	r3, [sp]
   126ec:	mov	r2, #0
   126f0:	mov	r3, #0
   126f4:	bl	10d74 <lseek64@plt>
   126f8:	mvn	r2, #0
   126fc:	mvn	r3, #0
   12700:	cmp	r1, r3
   12704:	cmpeq	r0, r2
   12708:	beq	1274c <__assert_fail@plt+0x184c>
   1270c:	mov	r0, r4
   12710:	bl	12768 <__assert_fail@plt+0x1868>
   12714:	cmp	r0, #0
   12718:	beq	1274c <__assert_fail@plt+0x184c>
   1271c:	bl	10e1c <__errno_location@plt>
   12720:	mov	r5, r0
   12724:	ldr	r6, [r0]
   12728:	mov	r0, r4
   1272c:	bl	10e70 <fclose@plt>
   12730:	cmp	r6, #0
   12734:	strne	r6, [r5]
   12738:	mvnne	r0, #0
   1273c:	b	12754 <__assert_fail@plt+0x1854>
   12740:	mov	r0, r4
   12744:	bl	10e70 <fclose@plt>
   12748:	b	12754 <__assert_fail@plt+0x1854>
   1274c:	mov	r0, r4
   12750:	bl	10e70 <fclose@plt>
   12754:	add	sp, sp, #8
   12758:	ldrd	r4, [sp]
   1275c:	ldr	r6, [sp, #8]
   12760:	add	sp, sp, #12
   12764:	pop	{pc}		; (ldr pc, [sp], #4)
   12768:	str	r4, [sp, #-8]!
   1276c:	str	lr, [sp, #4]
   12770:	sub	sp, sp, #8
   12774:	subs	r4, r0, #0
   12778:	beq	1278c <__assert_fail@plt+0x188c>
   1277c:	mov	r0, r4
   12780:	bl	10dc8 <__freading@plt>
   12784:	cmp	r0, #0
   12788:	bne	127a4 <__assert_fail@plt+0x18a4>
   1278c:	mov	r0, r4
   12790:	bl	10ccc <fflush@plt>
   12794:	add	sp, sp, #8
   12798:	ldr	r4, [sp]
   1279c:	add	sp, sp, #4
   127a0:	pop	{pc}		; (ldr pc, [sp], #4)
   127a4:	ldr	r3, [r4]
   127a8:	tst	r3, #256	; 0x100
   127ac:	bne	127bc <__assert_fail@plt+0x18bc>
   127b0:	mov	r0, r4
   127b4:	bl	10ccc <fflush@plt>
   127b8:	b	12794 <__assert_fail@plt+0x1894>
   127bc:	mov	r3, #1
   127c0:	str	r3, [sp]
   127c4:	mov	r2, #0
   127c8:	mov	r3, #0
   127cc:	mov	r0, r4
   127d0:	bl	12838 <__assert_fail@plt+0x1938>
   127d4:	b	127b0 <__assert_fail@plt+0x18b0>
   127d8:	strd	r4, [sp, #-12]!
   127dc:	str	lr, [sp, #8]
   127e0:	sub	sp, sp, #12
   127e4:	mov	r5, r0
   127e8:	bl	10e1c <__errno_location@plt>
   127ec:	mov	r4, r0
   127f0:	ldr	r3, [r0]
   127f4:	str	r3, [sp]
   127f8:	str	r3, [sp, #4]
   127fc:	mov	r3, #0
   12800:	str	r3, [r0]
   12804:	mov	r0, r5
   12808:	bl	10ce4 <free@plt>
   1280c:	ldr	r3, [r4]
   12810:	clz	r3, r3
   12814:	lsr	r3, r3, #5
   12818:	add	r2, sp, #8
   1281c:	add	r3, r2, r3, lsl #2
   12820:	ldr	r3, [r3, #-8]
   12824:	str	r3, [r4]
   12828:	add	sp, sp, #12
   1282c:	ldrd	r4, [sp]
   12830:	add	sp, sp, #8
   12834:	pop	{pc}		; (ldr pc, [sp], #4)
   12838:	str	r4, [sp, #-16]!
   1283c:	strd	r6, [sp, #4]
   12840:	str	lr, [sp, #12]
   12844:	sub	sp, sp, #8
   12848:	mov	r4, r0
   1284c:	mov	r6, r2
   12850:	mov	r7, r3
   12854:	ldr	r2, [r0, #8]
   12858:	ldr	r3, [r0, #4]
   1285c:	cmp	r2, r3
   12860:	beq	12890 <__assert_fail@plt+0x1990>
   12864:	ldr	r3, [sp, #24]
   12868:	str	r3, [sp]
   1286c:	mov	r2, r6
   12870:	mov	r3, r7
   12874:	mov	r0, r4
   12878:	bl	10e7c <fseeko64@plt>
   1287c:	add	sp, sp, #8
   12880:	ldr	r4, [sp]
   12884:	ldrd	r6, [sp, #4]
   12888:	add	sp, sp, #12
   1288c:	pop	{pc}		; (ldr pc, [sp], #4)
   12890:	ldr	r2, [r0, #20]
   12894:	ldr	r3, [r0, #16]
   12898:	cmp	r2, r3
   1289c:	bne	12864 <__assert_fail@plt+0x1964>
   128a0:	ldr	r3, [r0, #36]	; 0x24
   128a4:	cmp	r3, #0
   128a8:	bne	12864 <__assert_fail@plt+0x1964>
   128ac:	bl	10e4c <fileno@plt>
   128b0:	ldr	r3, [sp, #24]
   128b4:	str	r3, [sp]
   128b8:	mov	r2, r6
   128bc:	mov	r3, r7
   128c0:	bl	10d74 <lseek64@plt>
   128c4:	mvn	r2, #0
   128c8:	mvn	r3, #0
   128cc:	cmp	r1, r3
   128d0:	cmpeq	r0, r2
   128d4:	beq	128f0 <__assert_fail@plt+0x19f0>
   128d8:	ldr	r3, [r4]
   128dc:	bic	r3, r3, #16
   128e0:	str	r3, [r4]
   128e4:	strd	r0, [r4, #80]	; 0x50
   128e8:	mov	r0, #0
   128ec:	b	1287c <__assert_fail@plt+0x197c>
   128f0:	mvn	r0, #0
   128f4:	b	1287c <__assert_fail@plt+0x197c>
   128f8:	strd	r4, [sp, #-16]!
   128fc:	str	r6, [sp, #8]
   12900:	str	lr, [sp, #12]
   12904:	subs	r4, r0, #0
   12908:	beq	129a4 <__assert_fail@plt+0x1aa4>
   1290c:	mov	r1, #47	; 0x2f
   12910:	mov	r0, r4
   12914:	bl	10ea0 <strrchr@plt>
   12918:	subs	r5, r0, #0
   1291c:	beq	1297c <__assert_fail@plt+0x1a7c>
   12920:	add	r6, r5, #1
   12924:	sub	r3, r6, r4
   12928:	cmp	r3, #6
   1292c:	ble	1297c <__assert_fail@plt+0x1a7c>
   12930:	mov	r2, #7
   12934:	movw	r1, #27156	; 0x6a14
   12938:	movt	r1, #1
   1293c:	sub	r0, r5, #6
   12940:	bl	10ee8 <strncmp@plt>
   12944:	cmp	r0, #0
   12948:	bne	1297c <__assert_fail@plt+0x1a7c>
   1294c:	mov	r2, #3
   12950:	movw	r1, #27164	; 0x6a1c
   12954:	movt	r1, #1
   12958:	mov	r0, r6
   1295c:	bl	10ee8 <strncmp@plt>
   12960:	cmp	r0, #0
   12964:	movne	r4, r6
   12968:	bne	1297c <__assert_fail@plt+0x1a7c>
   1296c:	add	r4, r5, #4
   12970:	movw	r3, #28976	; 0x7130
   12974:	movt	r3, #2
   12978:	str	r4, [r3]
   1297c:	movw	r3, #29024	; 0x7160
   12980:	movt	r3, #2
   12984:	str	r4, [r3]
   12988:	movw	r3, #28980	; 0x7134
   1298c:	movt	r3, #2
   12990:	str	r4, [r3]
   12994:	ldrd	r4, [sp]
   12998:	ldr	r6, [sp, #8]
   1299c:	add	sp, sp, #12
   129a0:	pop	{pc}		; (ldr pc, [sp], #4)
   129a4:	movw	r3, #28992	; 0x7140
   129a8:	movt	r3, #2
   129ac:	ldr	r3, [r3]
   129b0:	mov	r2, #55	; 0x37
   129b4:	mov	r1, #1
   129b8:	movw	r0, #27100	; 0x69dc
   129bc:	movt	r0, #1
   129c0:	bl	10d68 <fwrite@plt>
   129c4:	bl	10ef4 <abort@plt>
   129c8:	mov	r2, #0
   129cc:	mov	r3, #0
   129d0:	strd	r2, [r0]
   129d4:	strd	r2, [r0, #8]
   129d8:	strd	r2, [r0, #16]
   129dc:	strd	r2, [r0, #24]
   129e0:	strd	r2, [r0, #32]
   129e4:	strd	r2, [r0, #40]	; 0x28
   129e8:	cmp	r1, #10
   129ec:	beq	129f8 <__assert_fail@plt+0x1af8>
   129f0:	str	r1, [r0]
   129f4:	bx	lr
   129f8:	str	r4, [sp, #-8]!
   129fc:	str	lr, [sp, #4]
   12a00:	bl	10ef4 <abort@plt>
   12a04:	strd	r4, [sp, #-16]!
   12a08:	str	r6, [sp, #8]
   12a0c:	str	lr, [sp, #12]
   12a10:	mov	r5, r0
   12a14:	mov	r6, r1
   12a18:	mov	r2, #5
   12a1c:	mov	r1, r0
   12a20:	mov	r0, #0
   12a24:	bl	10d38 <dcgettext@plt>
   12a28:	mov	r4, r0
   12a2c:	cmp	r5, r0
   12a30:	beq	12a48 <__assert_fail@plt+0x1b48>
   12a34:	mov	r0, r4
   12a38:	ldrd	r4, [sp]
   12a3c:	ldr	r6, [sp, #8]
   12a40:	add	sp, sp, #12
   12a44:	pop	{pc}		; (ldr pc, [sp], #4)
   12a48:	bl	15fcc <__assert_fail@plt+0x50cc>
   12a4c:	ldrb	r3, [r0]
   12a50:	bic	r3, r3, #32
   12a54:	cmp	r3, #85	; 0x55
   12a58:	bne	12adc <__assert_fail@plt+0x1bdc>
   12a5c:	ldrb	r3, [r0, #1]
   12a60:	bic	r3, r3, #32
   12a64:	cmp	r3, #84	; 0x54
   12a68:	bne	12aa0 <__assert_fail@plt+0x1ba0>
   12a6c:	ldrb	r3, [r0, #2]
   12a70:	bic	r3, r3, #32
   12a74:	cmp	r3, #70	; 0x46
   12a78:	bne	12aa0 <__assert_fail@plt+0x1ba0>
   12a7c:	ldrb	r3, [r0, #3]
   12a80:	cmp	r3, #45	; 0x2d
   12a84:	bne	12aa0 <__assert_fail@plt+0x1ba0>
   12a88:	ldrb	r3, [r0, #4]
   12a8c:	cmp	r3, #56	; 0x38
   12a90:	bne	12aa0 <__assert_fail@plt+0x1ba0>
   12a94:	ldrb	r3, [r0, #5]
   12a98:	cmp	r3, #0
   12a9c:	beq	12abc <__assert_fail@plt+0x1bbc>
   12aa0:	movw	r4, #27252	; 0x6a74
   12aa4:	movt	r4, #1
   12aa8:	movw	r3, #27272	; 0x6a88
   12aac:	movt	r3, #1
   12ab0:	cmp	r6, #9
   12ab4:	movne	r4, r3
   12ab8:	b	12a34 <__assert_fail@plt+0x1b34>
   12abc:	ldrb	r2, [r4]
   12ac0:	movw	r4, #27268	; 0x6a84
   12ac4:	movt	r4, #1
   12ac8:	movw	r3, #27256	; 0x6a78
   12acc:	movt	r3, #1
   12ad0:	cmp	r2, #96	; 0x60
   12ad4:	movne	r4, r3
   12ad8:	b	12a34 <__assert_fail@plt+0x1b34>
   12adc:	cmp	r3, #71	; 0x47
   12ae0:	bne	12aa0 <__assert_fail@plt+0x1ba0>
   12ae4:	ldrb	r3, [r0, #1]
   12ae8:	bic	r3, r3, #32
   12aec:	cmp	r3, #66	; 0x42
   12af0:	bne	12aa0 <__assert_fail@plt+0x1ba0>
   12af4:	ldrb	r3, [r0, #2]
   12af8:	cmp	r3, #49	; 0x31
   12afc:	bne	12aa0 <__assert_fail@plt+0x1ba0>
   12b00:	ldrb	r3, [r0, #3]
   12b04:	cmp	r3, #56	; 0x38
   12b08:	bne	12aa0 <__assert_fail@plt+0x1ba0>
   12b0c:	ldrb	r3, [r0, #4]
   12b10:	cmp	r3, #48	; 0x30
   12b14:	bne	12aa0 <__assert_fail@plt+0x1ba0>
   12b18:	ldrb	r3, [r0, #5]
   12b1c:	cmp	r3, #51	; 0x33
   12b20:	bne	12aa0 <__assert_fail@plt+0x1ba0>
   12b24:	ldrb	r3, [r0, #6]
   12b28:	cmp	r3, #48	; 0x30
   12b2c:	bne	12aa0 <__assert_fail@plt+0x1ba0>
   12b30:	ldrb	r3, [r0, #7]
   12b34:	cmp	r3, #0
   12b38:	bne	12aa0 <__assert_fail@plt+0x1ba0>
   12b3c:	ldrb	r2, [r4]
   12b40:	movw	r4, #27264	; 0x6a80
   12b44:	movt	r4, #1
   12b48:	movw	r3, #27260	; 0x6a7c
   12b4c:	movt	r3, #1
   12b50:	cmp	r2, #96	; 0x60
   12b54:	movne	r4, r3
   12b58:	b	12a34 <__assert_fail@plt+0x1b34>
   12b5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12b60:	strd	r6, [sp, #8]
   12b64:	strd	r8, [sp, #16]
   12b68:	strd	sl, [sp, #24]
   12b6c:	str	lr, [sp, #32]
   12b70:	sub	sp, sp, #116	; 0x74
   12b74:	str	r0, [sp, #64]	; 0x40
   12b78:	mov	r8, r1
   12b7c:	str	r2, [sp, #48]	; 0x30
   12b80:	str	r3, [sp, #24]
   12b84:	ldr	r7, [sp, #152]	; 0x98
   12b88:	bl	10d80 <__ctype_get_mb_cur_max@plt>
   12b8c:	str	r0, [sp, #76]	; 0x4c
   12b90:	ldr	r3, [sp, #156]	; 0x9c
   12b94:	ubfx	r3, r3, #1, #1
   12b98:	str	r3, [sp, #32]
   12b9c:	mov	r3, #1
   12ba0:	str	r3, [sp, #40]	; 0x28
   12ba4:	mov	r3, #0
   12ba8:	str	r3, [sp, #68]	; 0x44
   12bac:	str	r3, [sp, #36]	; 0x24
   12bb0:	str	r3, [sp, #28]
   12bb4:	str	r3, [sp, #52]	; 0x34
   12bb8:	str	r3, [sp, #60]	; 0x3c
   12bbc:	str	r3, [sp, #72]	; 0x48
   12bc0:	movw	r3, #27276	; 0x6a8c
   12bc4:	movt	r3, #1
   12bc8:	str	r3, [sp, #80]	; 0x50
   12bcc:	mov	r9, r8
   12bd0:	mov	sl, r7
   12bd4:	cmp	sl, #10
   12bd8:	ldrls	pc, [pc, sl, lsl #2]
   12bdc:	b	12da0 <__assert_fail@plt+0x1ea0>
   12be0:	andeq	r2, r1, r0, asr #24
   12be4:	andeq	r2, r1, r4, lsl ip
   12be8:	andeq	r2, r1, r8, ror sp
   12bec:	andeq	r2, r1, ip, lsl #24
   12bf0:	andeq	r2, r1, ip, lsr #26
   12bf4:	andeq	r2, r1, r0, asr ip
   12bf8:	andeq	r4, r1, ip, lsl r0
   12bfc:	andeq	r2, r1, r4, lsr #27
   12c00:	andeq	r2, r1, ip, lsl #25
   12c04:	andeq	r2, r1, ip, lsl #25
   12c08:	andeq	r2, r1, ip, lsl #25
   12c0c:	mov	r3, #1
   12c10:	str	r3, [sp, #28]
   12c14:	mov	r3, #1
   12c18:	str	r3, [sp, #32]
   12c1c:	str	r3, [sp, #52]	; 0x34
   12c20:	movw	r3, #27272	; 0x6a88
   12c24:	movt	r3, #1
   12c28:	str	r3, [sp, #60]	; 0x3c
   12c2c:	mov	fp, #0
   12c30:	mov	sl, #2
   12c34:	mov	r6, #0
   12c38:	ldr	r8, [sp, #64]	; 0x40
   12c3c:	b	134b4 <__assert_fail@plt+0x25b4>
   12c40:	mov	fp, sl
   12c44:	mov	r3, #0
   12c48:	str	r3, [sp, #32]
   12c4c:	b	12c34 <__assert_fail@plt+0x1d34>
   12c50:	ldr	r3, [sp, #32]
   12c54:	cmp	r3, #0
   12c58:	bne	12db8 <__assert_fail@plt+0x1eb8>
   12c5c:	cmp	r9, #0
   12c60:	beq	12ddc <__assert_fail@plt+0x1edc>
   12c64:	mov	r3, #34	; 0x22
   12c68:	ldr	r2, [sp, #64]	; 0x40
   12c6c:	strb	r3, [r2]
   12c70:	mov	fp, #1
   12c74:	str	fp, [sp, #28]
   12c78:	str	fp, [sp, #52]	; 0x34
   12c7c:	movw	r3, #27252	; 0x6a74
   12c80:	movt	r3, #1
   12c84:	str	r3, [sp, #60]	; 0x3c
   12c88:	b	12c34 <__assert_fail@plt+0x1d34>
   12c8c:	cmp	sl, #10
   12c90:	bne	12cc4 <__assert_fail@plt+0x1dc4>
   12c94:	ldr	r3, [sp, #32]
   12c98:	cmp	r3, #0
   12c9c:	movne	fp, #0
   12ca0:	beq	12cec <__assert_fail@plt+0x1dec>
   12ca4:	ldr	r0, [sp, #168]	; 0xa8
   12ca8:	bl	10e04 <strlen@plt>
   12cac:	str	r0, [sp, #52]	; 0x34
   12cb0:	ldr	r3, [sp, #168]	; 0xa8
   12cb4:	str	r3, [sp, #60]	; 0x3c
   12cb8:	mov	r3, #1
   12cbc:	str	r3, [sp, #28]
   12cc0:	b	12c34 <__assert_fail@plt+0x1d34>
   12cc4:	mov	r1, sl
   12cc8:	ldr	r0, [sp, #80]	; 0x50
   12ccc:	bl	12a04 <__assert_fail@plt+0x1b04>
   12cd0:	str	r0, [sp, #164]	; 0xa4
   12cd4:	mov	r1, sl
   12cd8:	movw	r0, #27272	; 0x6a88
   12cdc:	movt	r0, #1
   12ce0:	bl	12a04 <__assert_fail@plt+0x1b04>
   12ce4:	str	r0, [sp, #168]	; 0xa8
   12ce8:	b	12c94 <__assert_fail@plt+0x1d94>
   12cec:	ldr	r3, [sp, #164]	; 0xa4
   12cf0:	ldrb	r3, [r3]
   12cf4:	cmp	r3, #0
   12cf8:	beq	12d24 <__assert_fail@plt+0x1e24>
   12cfc:	ldr	r2, [sp, #164]	; 0xa4
   12d00:	mov	fp, #0
   12d04:	ldr	r1, [sp, #64]	; 0x40
   12d08:	cmp	r9, fp
   12d0c:	strbhi	r3, [r1, fp]
   12d10:	add	fp, fp, #1
   12d14:	ldrb	r3, [r2, #1]!
   12d18:	cmp	r3, #0
   12d1c:	bne	12d08 <__assert_fail@plt+0x1e08>
   12d20:	b	12ca4 <__assert_fail@plt+0x1da4>
   12d24:	mov	fp, #0
   12d28:	b	12ca4 <__assert_fail@plt+0x1da4>
   12d2c:	ldr	r3, [sp, #32]
   12d30:	cmp	r3, #0
   12d34:	bne	12c14 <__assert_fail@plt+0x1d14>
   12d38:	mov	r3, #1
   12d3c:	str	r3, [sp, #28]
   12d40:	cmp	r9, #0
   12d44:	beq	12df8 <__assert_fail@plt+0x1ef8>
   12d48:	mov	r3, #39	; 0x27
   12d4c:	ldr	r2, [sp, #64]	; 0x40
   12d50:	strb	r3, [r2]
   12d54:	mov	r3, #0
   12d58:	str	r3, [sp, #32]
   12d5c:	mov	fp, #1
   12d60:	str	fp, [sp, #52]	; 0x34
   12d64:	movw	r3, #27272	; 0x6a88
   12d68:	movt	r3, #1
   12d6c:	str	r3, [sp, #60]	; 0x3c
   12d70:	mov	sl, #2
   12d74:	b	12c34 <__assert_fail@plt+0x1d34>
   12d78:	ldr	r3, [sp, #32]
   12d7c:	cmp	r3, #0
   12d80:	beq	12d40 <__assert_fail@plt+0x1e40>
   12d84:	mov	r3, #1
   12d88:	str	r3, [sp, #52]	; 0x34
   12d8c:	movw	r3, #27272	; 0x6a88
   12d90:	movt	r3, #1
   12d94:	str	r3, [sp, #60]	; 0x3c
   12d98:	mov	fp, #0
   12d9c:	b	12c34 <__assert_fail@plt+0x1d34>
   12da0:	bl	10ef4 <abort@plt>
   12da4:	mov	fp, #0
   12da8:	str	fp, [sp, #32]
   12dac:	mov	r3, #1
   12db0:	str	r3, [sp, #28]
   12db4:	b	12c34 <__assert_fail@plt+0x1d34>
   12db8:	ldr	r3, [sp, #32]
   12dbc:	str	r3, [sp, #28]
   12dc0:	mov	r3, #1
   12dc4:	str	r3, [sp, #52]	; 0x34
   12dc8:	movw	r3, #27252	; 0x6a74
   12dcc:	movt	r3, #1
   12dd0:	str	r3, [sp, #60]	; 0x3c
   12dd4:	mov	fp, #0
   12dd8:	b	12c34 <__assert_fail@plt+0x1d34>
   12ddc:	mov	fp, #1
   12de0:	str	fp, [sp, #28]
   12de4:	str	fp, [sp, #52]	; 0x34
   12de8:	movw	r3, #27252	; 0x6a74
   12dec:	movt	r3, #1
   12df0:	str	r3, [sp, #60]	; 0x3c
   12df4:	b	12c34 <__assert_fail@plt+0x1d34>
   12df8:	mov	r3, #0
   12dfc:	str	r3, [sp, #32]
   12e00:	mov	fp, #1
   12e04:	str	fp, [sp, #52]	; 0x34
   12e08:	movw	r3, #27272	; 0x6a88
   12e0c:	movt	r3, #1
   12e10:	str	r3, [sp, #60]	; 0x3c
   12e14:	mov	sl, #2
   12e18:	b	12c34 <__assert_fail@plt+0x1d34>
   12e1c:	mov	r3, r2
   12e20:	add	r4, r6, r2
   12e24:	ldr	r2, [sp, #24]
   12e28:	cmp	r3, #1
   12e2c:	movls	r3, #0
   12e30:	movhi	r3, #1
   12e34:	cmn	r2, #1
   12e38:	movne	r3, #0
   12e3c:	cmp	r3, #0
   12e40:	beq	12e50 <__assert_fail@plt+0x1f50>
   12e44:	ldr	r0, [sp, #48]	; 0x30
   12e48:	bl	10e04 <strlen@plt>
   12e4c:	str	r0, [sp, #24]
   12e50:	ldr	r3, [sp, #24]
   12e54:	cmp	r4, r3
   12e58:	bhi	14044 <__assert_fail@plt+0x3144>
   12e5c:	ldr	r3, [sp, #48]	; 0x30
   12e60:	add	r4, r3, r6
   12e64:	ldr	r2, [sp, #52]	; 0x34
   12e68:	ldr	r1, [sp, #60]	; 0x3c
   12e6c:	mov	r0, r4
   12e70:	bl	10d20 <memcmp@plt>
   12e74:	cmp	r0, #0
   12e78:	bne	14044 <__assert_fail@plt+0x3144>
   12e7c:	ldr	r3, [sp, #32]
   12e80:	cmp	r3, #0
   12e84:	bne	13094 <__assert_fail@plt+0x2194>
   12e88:	ldrb	r4, [r4]
   12e8c:	cmp	r4, #126	; 0x7e
   12e90:	ldrls	pc, [pc, r4, lsl #2]
   12e94:	b	13948 <__assert_fail@plt+0x2a48>
   12e98:	ldrdeq	r3, [r1], -r8
   12e9c:	andeq	r3, r1, r8, asr #18
   12ea0:	andeq	r3, r1, r8, asr #18
   12ea4:	andeq	r3, r1, r8, asr #18
   12ea8:	andeq	r3, r1, r8, asr #18
   12eac:	andeq	r3, r1, r8, asr #18
   12eb0:	andeq	r3, r1, r8, asr #18
   12eb4:	strdeq	r3, [r1], -r0
   12eb8:	andeq	r3, r1, r4, ror r3
   12ebc:	andeq	r3, r1, r8, lsl r7
   12ec0:	andeq	r3, r1, r4, asr #15
   12ec4:	andeq	r3, r1, ip, lsr #14
   12ec8:	andeq	r3, r1, r8, lsl #7
   12ecc:	muleq	r1, ip, r3
   12ed0:	andeq	r3, r1, r8, asr #18
   12ed4:	andeq	r3, r1, r8, asr #18
   12ed8:	andeq	r3, r1, r8, asr #18
   12edc:	andeq	r3, r1, r8, asr #18
   12ee0:	andeq	r3, r1, r8, asr #18
   12ee4:	andeq	r3, r1, r8, asr #18
   12ee8:	andeq	r3, r1, r8, asr #18
   12eec:	andeq	r3, r1, r8, asr #18
   12ef0:	andeq	r3, r1, r8, asr #18
   12ef4:	andeq	r3, r1, r8, asr #18
   12ef8:	andeq	r3, r1, r8, asr #18
   12efc:	andeq	r3, r1, r8, asr #18
   12f00:	andeq	r3, r1, r8, asr #18
   12f04:	andeq	r3, r1, r8, asr #18
   12f08:	andeq	r3, r1, r8, asr #18
   12f0c:	andeq	r3, r1, r8, asr #18
   12f10:	andeq	r3, r1, r8, asr #18
   12f14:	andeq	r3, r1, r8, asr #18
   12f18:	andeq	r3, r1, r4, ror #16
   12f1c:	andeq	r3, r1, r8, lsl #17
   12f20:	andeq	r3, r1, r8, lsl #17
   12f24:	andeq	r3, r1, r0, lsr #16
   12f28:	andeq	r3, r1, r8, lsl #17
   12f2c:	andeq	r3, r1, r8, lsr #27
   12f30:	andeq	r3, r1, r8, lsl #17
   12f34:	andeq	r3, r1, r8, lsr #17
   12f38:	andeq	r3, r1, r8, lsl #17
   12f3c:	andeq	r3, r1, r8, lsl #17
   12f40:	andeq	r3, r1, r8, lsl #17
   12f44:	andeq	r3, r1, r8, lsr #27
   12f48:	andeq	r3, r1, r8, lsr #27
   12f4c:	andeq	r3, r1, r8, lsr #27
   12f50:	andeq	r3, r1, r8, lsr #27
   12f54:	andeq	r3, r1, r8, lsr #27
   12f58:	andeq	r3, r1, r8, lsr #27
   12f5c:	andeq	r3, r1, r8, lsr #27
   12f60:	andeq	r3, r1, r8, lsr #27
   12f64:	andeq	r3, r1, r8, lsr #27
   12f68:	andeq	r3, r1, r8, lsr #27
   12f6c:	andeq	r3, r1, r8, lsr #27
   12f70:	andeq	r3, r1, r8, lsr #27
   12f74:	andeq	r3, r1, r8, lsr #27
   12f78:	andeq	r3, r1, r8, lsr #27
   12f7c:	andeq	r3, r1, r8, lsr #27
   12f80:	andeq	r3, r1, r8, lsr #27
   12f84:	andeq	r3, r1, r8, lsl #17
   12f88:	andeq	r3, r1, r8, lsl #17
   12f8c:	andeq	r3, r1, r8, lsl #17
   12f90:	andeq	r3, r1, r8, lsl #17
   12f94:	andeq	r3, r1, r8, lsl #4
   12f98:	andeq	r3, r1, r8, asr #18
   12f9c:	andeq	r3, r1, r8, lsr #27
   12fa0:	andeq	r3, r1, r8, lsr #27
   12fa4:	andeq	r3, r1, r8, lsr #27
   12fa8:	andeq	r3, r1, r8, lsr #27
   12fac:	andeq	r3, r1, r8, lsr #27
   12fb0:	andeq	r3, r1, r8, lsr #27
   12fb4:	andeq	r3, r1, r8, lsr #27
   12fb8:	andeq	r3, r1, r8, lsr #27
   12fbc:	andeq	r3, r1, r8, lsr #27
   12fc0:	andeq	r3, r1, r8, lsr #27
   12fc4:	andeq	r3, r1, r8, lsr #27
   12fc8:	andeq	r3, r1, r8, lsr #27
   12fcc:	andeq	r3, r1, r8, lsr #27
   12fd0:	andeq	r3, r1, r8, lsr #27
   12fd4:	andeq	r3, r1, r8, lsr #27
   12fd8:	andeq	r3, r1, r8, lsr #27
   12fdc:	andeq	r3, r1, r8, lsr #27
   12fe0:	andeq	r3, r1, r8, lsr #27
   12fe4:	andeq	r3, r1, r8, lsr #27
   12fe8:	andeq	r3, r1, r8, lsr #27
   12fec:	andeq	r3, r1, r8, lsr #27
   12ff0:	andeq	r3, r1, r8, lsr #27
   12ff4:	andeq	r3, r1, r8, lsr #27
   12ff8:	andeq	r3, r1, r8, lsr #27
   12ffc:	andeq	r3, r1, r8, lsr #27
   13000:	andeq	r3, r1, r8, lsr #27
   13004:	andeq	r3, r1, r8, lsl #17
   13008:	andeq	r3, r1, r0, asr #14
   1300c:	andeq	r3, r1, r8, lsr #27
   13010:	andeq	r3, r1, r8, lsl #17
   13014:	andeq	r3, r1, r8, lsr #27
   13018:	andeq	r3, r1, r8, lsl #17
   1301c:	andeq	r3, r1, r8, lsr #27
   13020:	andeq	r3, r1, r8, lsr #27
   13024:	andeq	r3, r1, r8, lsr #27
   13028:	andeq	r3, r1, r8, lsr #27
   1302c:	andeq	r3, r1, r8, lsr #27
   13030:	andeq	r3, r1, r8, lsr #27
   13034:	andeq	r3, r1, r8, lsr #27
   13038:	andeq	r3, r1, r8, lsr #27
   1303c:	andeq	r3, r1, r8, lsr #27
   13040:	andeq	r3, r1, r8, lsr #27
   13044:	andeq	r3, r1, r8, lsr #27
   13048:	andeq	r3, r1, r8, lsr #27
   1304c:	andeq	r3, r1, r8, lsr #27
   13050:	andeq	r3, r1, r8, lsr #27
   13054:	andeq	r3, r1, r8, lsr #27
   13058:	andeq	r3, r1, r8, lsr #27
   1305c:	andeq	r3, r1, r8, lsr #27
   13060:	andeq	r3, r1, r8, lsr #27
   13064:	andeq	r3, r1, r8, lsr #27
   13068:	andeq	r3, r1, r8, lsr #27
   1306c:	andeq	r3, r1, r8, lsr #27
   13070:	andeq	r3, r1, r8, lsr #27
   13074:	andeq	r3, r1, r8, lsr #27
   13078:	andeq	r3, r1, r8, lsr #27
   1307c:	andeq	r3, r1, r8, lsr #27
   13080:	andeq	r3, r1, r8, lsr #27
   13084:	andeq	r3, r1, r0, lsl #16
   13088:	andeq	r3, r1, r8, lsl #17
   1308c:	andeq	r3, r1, r0, lsl #16
   13090:	andeq	r3, r1, r0, lsr #16
   13094:	mov	r8, r9
   13098:	mov	r7, sl
   1309c:	b	13f9c <__assert_fail@plt+0x309c>
   130a0:	ldr	r3, [sp, #28]
   130a4:	cmp	r3, #0
   130a8:	bne	130c8 <__assert_fail@plt+0x21c8>
   130ac:	ldr	r3, [sp, #156]	; 0x9c
   130b0:	tst	r3, #1
   130b4:	bne	134b0 <__assert_fail@plt+0x25b0>
   130b8:	ldr	r3, [sp, #28]
   130bc:	str	r3, [sp, #44]	; 0x2c
   130c0:	mov	r5, r3
   130c4:	b	133d0 <__assert_fail@plt+0x24d0>
   130c8:	ldr	r3, [sp, #32]
   130cc:	cmp	r3, #0
   130d0:	bne	13f4c <__assert_fail@plt+0x304c>
   130d4:	str	r3, [sp, #44]	; 0x2c
   130d8:	ldr	r3, [sp, #36]	; 0x24
   130dc:	eor	r3, r3, #1
   130e0:	cmp	sl, #2
   130e4:	movne	r3, #0
   130e8:	andeq	r3, r3, #1
   130ec:	cmp	r3, #0
   130f0:	beq	13148 <__assert_fail@plt+0x2248>
   130f4:	cmp	r9, fp
   130f8:	movhi	r2, #39	; 0x27
   130fc:	strbhi	r2, [r8, fp]
   13100:	add	r2, fp, #1
   13104:	cmp	r9, r2
   13108:	movhi	r1, #36	; 0x24
   1310c:	strbhi	r1, [r8, r2]
   13110:	add	r2, fp, #2
   13114:	cmp	r9, r2
   13118:	movhi	r1, #39	; 0x27
   1311c:	strbhi	r1, [r8, r2]
   13120:	add	r2, fp, #3
   13124:	cmp	r9, r2
   13128:	bls	14008 <__assert_fail@plt+0x3108>
   1312c:	mov	r1, #92	; 0x5c
   13130:	strb	r1, [r8, r2]
   13134:	add	fp, fp, #4
   13138:	str	r3, [sp, #36]	; 0x24
   1313c:	mov	r5, #0
   13140:	mov	r4, #48	; 0x30
   13144:	b	1341c <__assert_fail@plt+0x251c>
   13148:	cmp	r9, fp
   1314c:	bhi	13174 <__assert_fail@plt+0x2274>
   13150:	add	r1, fp, #1
   13154:	ldr	r2, [sp, #56]	; 0x38
   13158:	cmp	r2, #0
   1315c:	bne	1319c <__assert_fail@plt+0x229c>
   13160:	mov	r3, r5
   13164:	ldr	r5, [sp, #56]	; 0x38
   13168:	mov	fp, r1
   1316c:	mov	r4, #48	; 0x30
   13170:	b	133d0 <__assert_fail@plt+0x24d0>
   13174:	mov	r2, #92	; 0x5c
   13178:	strb	r2, [r8, fp]
   1317c:	add	r1, fp, #1
   13180:	ldr	r2, [sp, #56]	; 0x38
   13184:	cmp	r2, #0
   13188:	moveq	r3, r5
   1318c:	moveq	r5, r2
   13190:	moveq	fp, r1
   13194:	moveq	r4, #48	; 0x30
   13198:	beq	1341c <__assert_fail@plt+0x251c>
   1319c:	add	r2, r6, #1
   131a0:	ldr	r0, [sp, #24]
   131a4:	cmp	r2, r0
   131a8:	bcs	131c4 <__assert_fail@plt+0x22c4>
   131ac:	ldr	r0, [sp, #48]	; 0x30
   131b0:	ldrb	r2, [r0, r2]
   131b4:	sub	r2, r2, #48	; 0x30
   131b8:	uxtb	r2, r2
   131bc:	cmp	r2, #9
   131c0:	bls	131dc <__assert_fail@plt+0x22dc>
   131c4:	mov	r2, r3
   131c8:	mov	r3, r5
   131cc:	mov	r5, r2
   131d0:	mov	fp, r1
   131d4:	mov	r4, #48	; 0x30
   131d8:	b	133f4 <__assert_fail@plt+0x24f4>
   131dc:	cmp	r9, r1
   131e0:	movhi	r2, #48	; 0x30
   131e4:	strbhi	r2, [r8, r1]
   131e8:	add	r2, fp, #2
   131ec:	cmp	r9, r2
   131f0:	movhi	r1, #48	; 0x30
   131f4:	strbhi	r1, [r8, r2]
   131f8:	add	r1, fp, #3
   131fc:	b	131c4 <__assert_fail@plt+0x22c4>
   13200:	mov	r3, #0
   13204:	str	r3, [sp, #44]	; 0x2c
   13208:	cmp	sl, #2
   1320c:	beq	13228 <__assert_fail@plt+0x2328>
   13210:	cmp	sl, #5
   13214:	beq	13240 <__assert_fail@plt+0x2340>
   13218:	mov	r5, #0
   1321c:	mov	r3, r5
   13220:	mov	r4, #63	; 0x3f
   13224:	b	133d0 <__assert_fail@plt+0x24d0>
   13228:	ldr	r3, [sp, #32]
   1322c:	cmp	r3, #0
   13230:	bne	13f58 <__assert_fail@plt+0x3058>
   13234:	mov	r5, r3
   13238:	mov	r4, #63	; 0x3f
   1323c:	b	13938 <__assert_fail@plt+0x2a38>
   13240:	ldr	r3, [sp, #156]	; 0x9c
   13244:	tst	r3, #4
   13248:	beq	13d70 <__assert_fail@plt+0x2e70>
   1324c:	add	r2, r6, #2
   13250:	ldr	r3, [sp, #24]
   13254:	cmp	r2, r3
   13258:	bcs	13d80 <__assert_fail@plt+0x2e80>
   1325c:	ldr	r3, [sp, #48]	; 0x30
   13260:	add	r3, r3, r6
   13264:	ldrb	r4, [r3, #1]
   13268:	cmp	r4, #63	; 0x3f
   1326c:	movne	r5, #0
   13270:	movne	r3, r5
   13274:	movne	r4, #63	; 0x3f
   13278:	bne	133d0 <__assert_fail@plt+0x24d0>
   1327c:	ldr	r3, [sp, #48]	; 0x30
   13280:	ldrb	r1, [r3, r2]
   13284:	sub	r3, r1, #33	; 0x21
   13288:	cmp	r3, #29
   1328c:	ldrls	pc, [pc, r3, lsl #2]
   13290:	b	13d90 <__assert_fail@plt+0x2e90>
   13294:	andeq	r3, r1, ip, lsl #6
   13298:	muleq	r1, r0, sp
   1329c:	muleq	r1, r0, sp
   132a0:	muleq	r1, r0, sp
   132a4:	muleq	r1, r0, sp
   132a8:	muleq	r1, r0, sp
   132ac:	andeq	r3, r1, ip, lsl #6
   132b0:	andeq	r3, r1, ip, lsl #6
   132b4:	andeq	r3, r1, ip, lsl #6
   132b8:	muleq	r1, r0, sp
   132bc:	muleq	r1, r0, sp
   132c0:	muleq	r1, r0, sp
   132c4:	andeq	r3, r1, ip, lsl #6
   132c8:	muleq	r1, r0, sp
   132cc:	andeq	r3, r1, ip, lsl #6
   132d0:	muleq	r1, r0, sp
   132d4:	muleq	r1, r0, sp
   132d8:	muleq	r1, r0, sp
   132dc:	muleq	r1, r0, sp
   132e0:	muleq	r1, r0, sp
   132e4:	muleq	r1, r0, sp
   132e8:	muleq	r1, r0, sp
   132ec:	muleq	r1, r0, sp
   132f0:	muleq	r1, r0, sp
   132f4:	muleq	r1, r0, sp
   132f8:	muleq	r1, r0, sp
   132fc:	muleq	r1, r0, sp
   13300:	andeq	r3, r1, ip, lsl #6
   13304:	andeq	r3, r1, ip, lsl #6
   13308:	andeq	r3, r1, ip, lsl #6
   1330c:	ldr	r3, [sp, #32]
   13310:	cmp	r3, #0
   13314:	bne	13ffc <__assert_fail@plt+0x30fc>
   13318:	cmp	r9, fp
   1331c:	movhi	r3, #63	; 0x3f
   13320:	strbhi	r3, [r8, fp]
   13324:	add	r3, fp, #1
   13328:	cmp	r9, r3
   1332c:	movhi	r0, #34	; 0x22
   13330:	strbhi	r0, [r8, r3]
   13334:	add	r3, fp, #2
   13338:	cmp	r9, r3
   1333c:	movhi	r0, #34	; 0x22
   13340:	strbhi	r0, [r8, r3]
   13344:	add	r3, fp, #3
   13348:	cmp	r9, r3
   1334c:	movhi	r0, #63	; 0x3f
   13350:	strbhi	r0, [r8, r3]
   13354:	add	fp, fp, #4
   13358:	ldr	r3, [sp, #32]
   1335c:	mov	r5, r3
   13360:	mov	r4, r1
   13364:	mov	r6, r2
   13368:	b	133d0 <__assert_fail@plt+0x24d0>
   1336c:	mov	r3, #0
   13370:	str	r3, [sp, #44]	; 0x2c
   13374:	mov	r4, #8
   13378:	mov	r3, #98	; 0x62
   1337c:	b	133bc <__assert_fail@plt+0x24bc>
   13380:	mov	r3, #0
   13384:	str	r3, [sp, #44]	; 0x2c
   13388:	mov	r4, #12
   1338c:	mov	r3, #102	; 0x66
   13390:	b	133bc <__assert_fail@plt+0x24bc>
   13394:	mov	r3, #0
   13398:	str	r3, [sp, #44]	; 0x2c
   1339c:	mov	r4, #13
   133a0:	mov	r3, #114	; 0x72
   133a4:	ldr	r2, [sp, #32]
   133a8:	cmp	sl, #2
   133ac:	movne	r2, #0
   133b0:	andeq	r2, r2, #1
   133b4:	cmp	r2, #0
   133b8:	bne	137dc <__assert_fail@plt+0x28dc>
   133bc:	ldr	r2, [sp, #28]
   133c0:	cmp	r2, #0
   133c4:	bne	13dc4 <__assert_fail@plt+0x2ec4>
   133c8:	mov	r5, r2
   133cc:	mov	r3, r2
   133d0:	ldr	r2, [sp, #28]
   133d4:	eor	r2, r2, #1
   133d8:	cmp	sl, #2
   133dc:	orreq	r2, r2, #1
   133e0:	eor	r2, r2, #1
   133e4:	ldr	r1, [sp, #32]
   133e8:	orr	r2, r1, r2
   133ec:	tst	r2, #255	; 0xff
   133f0:	beq	1341c <__assert_fail@plt+0x251c>
   133f4:	ldr	r2, [sp, #160]	; 0xa0
   133f8:	cmp	r2, #0
   133fc:	beq	1341c <__assert_fail@plt+0x251c>
   13400:	ubfx	r1, r4, #5, #8
   13404:	and	r2, r4, #31
   13408:	ldr	r0, [sp, #160]	; 0xa0
   1340c:	ldr	r1, [r0, r1, lsl #2]
   13410:	lsr	r2, r1, r2
   13414:	tst	r2, #1
   13418:	bne	13428 <__assert_fail@plt+0x2528>
   1341c:	ldr	r2, [sp, #44]	; 0x2c
   13420:	cmp	r2, #0
   13424:	beq	1377c <__assert_fail@plt+0x287c>
   13428:	ldr	r3, [sp, #32]
   1342c:	cmp	r3, #0
   13430:	bne	13f7c <__assert_fail@plt+0x307c>
   13434:	ldr	r3, [sp, #36]	; 0x24
   13438:	eor	r3, r3, #1
   1343c:	cmp	sl, #2
   13440:	movne	r3, #0
   13444:	andeq	r3, r3, #1
   13448:	cmp	r3, #0
   1344c:	beq	13484 <__assert_fail@plt+0x2584>
   13450:	cmp	r9, fp
   13454:	movhi	r2, #39	; 0x27
   13458:	strbhi	r2, [r8, fp]
   1345c:	add	r2, fp, #1
   13460:	cmp	r9, r2
   13464:	movhi	r1, #36	; 0x24
   13468:	strbhi	r1, [r8, r2]
   1346c:	add	r2, fp, #2
   13470:	cmp	r9, r2
   13474:	movhi	r1, #39	; 0x27
   13478:	strbhi	r1, [r8, r2]
   1347c:	add	fp, fp, #3
   13480:	str	r3, [sp, #36]	; 0x24
   13484:	cmp	r9, fp
   13488:	movhi	r3, #92	; 0x5c
   1348c:	strbhi	r3, [r8, fp]
   13490:	add	fp, fp, #1
   13494:	cmp	fp, r9
   13498:	strbcc	r4, [r8, fp]
   1349c:	add	fp, fp, #1
   134a0:	cmp	r5, #0
   134a4:	ldr	r3, [sp, #40]	; 0x28
   134a8:	moveq	r3, r5
   134ac:	str	r3, [sp, #40]	; 0x28
   134b0:	add	r6, r6, #1
   134b4:	ldr	r3, [sp, #24]
   134b8:	cmn	r3, #1
   134bc:	beq	13dec <__assert_fail@plt+0x2eec>
   134c0:	ldr	r3, [sp, #24]
   134c4:	subs	r5, r3, r6
   134c8:	movne	r5, #1
   134cc:	cmp	r5, #0
   134d0:	beq	13e00 <__assert_fail@plt+0x2f00>
   134d4:	ldr	r3, [sp, #28]
   134d8:	cmp	sl, #2
   134dc:	moveq	r3, #0
   134e0:	andne	r3, r3, #1
   134e4:	str	r3, [sp, #56]	; 0x38
   134e8:	ldr	r2, [sp, #52]	; 0x34
   134ec:	adds	r7, r2, #0
   134f0:	movne	r7, #1
   134f4:	ands	r3, r3, r7
   134f8:	str	r3, [sp, #44]	; 0x2c
   134fc:	bne	12e1c <__assert_fail@plt+0x1f1c>
   13500:	ldr	r3, [sp, #48]	; 0x30
   13504:	ldrb	r4, [r3, r6]
   13508:	cmp	r4, #126	; 0x7e
   1350c:	ldrls	pc, [pc, r4, lsl #2]
   13510:	b	13948 <__assert_fail@plt+0x2a48>
   13514:	andeq	r3, r1, r0, lsr #1
   13518:	andeq	r3, r1, r8, asr #18
   1351c:	andeq	r3, r1, r8, asr #18
   13520:	andeq	r3, r1, r8, asr #18
   13524:	andeq	r3, r1, r8, asr #18
   13528:	andeq	r3, r1, r8, asr #18
   1352c:	andeq	r3, r1, r8, asr #18
   13530:	andeq	r3, r1, r8, ror #15
   13534:	andeq	r3, r1, r4, ror r3
   13538:	andeq	r3, r1, r8, lsl r7
   1353c:			; <UNDEFINED> instruction: 0x000137bc
   13540:	andeq	r3, r1, ip, lsr #14
   13544:	andeq	r3, r1, r8, lsl #7
   13548:	muleq	r1, ip, r3
   1354c:	andeq	r3, r1, r8, asr #18
   13550:	andeq	r3, r1, r8, asr #18
   13554:	andeq	r3, r1, r8, asr #18
   13558:	andeq	r3, r1, r8, asr #18
   1355c:	andeq	r3, r1, r8, asr #18
   13560:	andeq	r3, r1, r8, asr #18
   13564:	andeq	r3, r1, r8, asr #18
   13568:	andeq	r3, r1, r8, asr #18
   1356c:	andeq	r3, r1, r8, asr #18
   13570:	andeq	r3, r1, r8, asr #18
   13574:	andeq	r3, r1, r8, asr #18
   13578:	andeq	r3, r1, r8, asr #18
   1357c:	andeq	r3, r1, r8, asr #18
   13580:	andeq	r3, r1, r8, asr #18
   13584:	andeq	r3, r1, r8, asr #18
   13588:	andeq	r3, r1, r8, asr #18
   1358c:	andeq	r3, r1, r8, asr #18
   13590:	andeq	r3, r1, r8, asr #18
   13594:	andeq	r3, r1, r4, ror #16
   13598:	andeq	r3, r1, r0, ror #16
   1359c:	andeq	r3, r1, r0, ror #16
   135a0:	andeq	r3, r1, r0, lsr #16
   135a4:	andeq	r3, r1, r0, ror #16
   135a8:	andeq	r3, r1, r8, ror #26
   135ac:	andeq	r3, r1, r0, ror #16
   135b0:	andeq	r3, r1, r8, lsr #17
   135b4:	andeq	r3, r1, r0, ror #16
   135b8:	andeq	r3, r1, r0, ror #16
   135bc:	andeq	r3, r1, r0, ror #16
   135c0:	andeq	r3, r1, r8, ror #26
   135c4:	andeq	r3, r1, r8, ror #26
   135c8:	andeq	r3, r1, r8, ror #26
   135cc:	andeq	r3, r1, r8, ror #26
   135d0:	andeq	r3, r1, r8, ror #26
   135d4:	andeq	r3, r1, r8, ror #26
   135d8:	andeq	r3, r1, r8, ror #26
   135dc:	andeq	r3, r1, r8, ror #26
   135e0:	andeq	r3, r1, r8, ror #26
   135e4:	andeq	r3, r1, r8, ror #26
   135e8:	andeq	r3, r1, r8, ror #26
   135ec:	andeq	r3, r1, r8, ror #26
   135f0:	andeq	r3, r1, r8, ror #26
   135f4:	andeq	r3, r1, r8, ror #26
   135f8:	andeq	r3, r1, r8, ror #26
   135fc:	andeq	r3, r1, r8, ror #26
   13600:	andeq	r3, r1, r0, ror #16
   13604:	andeq	r3, r1, r0, ror #16
   13608:	andeq	r3, r1, r0, ror #16
   1360c:	andeq	r3, r1, r0, ror #16
   13610:	andeq	r3, r1, r8, lsl #4
   13614:	andeq	r3, r1, r8, asr #18
   13618:	andeq	r3, r1, r8, ror #26
   1361c:	andeq	r3, r1, r8, ror #26
   13620:	andeq	r3, r1, r8, ror #26
   13624:	andeq	r3, r1, r8, ror #26
   13628:	andeq	r3, r1, r8, ror #26
   1362c:	andeq	r3, r1, r8, ror #26
   13630:	andeq	r3, r1, r8, ror #26
   13634:	andeq	r3, r1, r8, ror #26
   13638:	andeq	r3, r1, r8, ror #26
   1363c:	andeq	r3, r1, r8, ror #26
   13640:	andeq	r3, r1, r8, ror #26
   13644:	andeq	r3, r1, r8, ror #26
   13648:	andeq	r3, r1, r8, ror #26
   1364c:	andeq	r3, r1, r8, ror #26
   13650:	andeq	r3, r1, r8, ror #26
   13654:	andeq	r3, r1, r8, ror #26
   13658:	andeq	r3, r1, r8, ror #26
   1365c:	andeq	r3, r1, r8, ror #26
   13660:	andeq	r3, r1, r8, ror #26
   13664:	andeq	r3, r1, r8, ror #26
   13668:	andeq	r3, r1, r8, ror #26
   1366c:	andeq	r3, r1, r8, ror #26
   13670:	andeq	r3, r1, r8, ror #26
   13674:	andeq	r3, r1, r8, ror #26
   13678:	andeq	r3, r1, r8, ror #26
   1367c:	andeq	r3, r1, r8, ror #26
   13680:	andeq	r3, r1, r0, ror #16
   13684:	andeq	r3, r1, r0, asr #14
   13688:	andeq	r3, r1, r8, ror #26
   1368c:	andeq	r3, r1, r0, ror #16
   13690:	andeq	r3, r1, r8, ror #26
   13694:	andeq	r3, r1, r0, ror #16
   13698:	andeq	r3, r1, r8, ror #26
   1369c:	andeq	r3, r1, r8, ror #26
   136a0:	andeq	r3, r1, r8, ror #26
   136a4:	andeq	r3, r1, r8, ror #26
   136a8:	andeq	r3, r1, r8, ror #26
   136ac:	andeq	r3, r1, r8, ror #26
   136b0:	andeq	r3, r1, r8, ror #26
   136b4:	andeq	r3, r1, r8, ror #26
   136b8:	andeq	r3, r1, r8, ror #26
   136bc:	andeq	r3, r1, r8, ror #26
   136c0:	andeq	r3, r1, r8, ror #26
   136c4:	andeq	r3, r1, r8, ror #26
   136c8:	andeq	r3, r1, r8, ror #26
   136cc:	andeq	r3, r1, r8, ror #26
   136d0:	andeq	r3, r1, r8, ror #26
   136d4:	andeq	r3, r1, r8, ror #26
   136d8:	andeq	r3, r1, r8, ror #26
   136dc:	andeq	r3, r1, r8, ror #26
   136e0:	andeq	r3, r1, r8, ror #26
   136e4:	andeq	r3, r1, r8, ror #26
   136e8:	andeq	r3, r1, r8, ror #26
   136ec:	andeq	r3, r1, r8, ror #26
   136f0:	andeq	r3, r1, r8, ror #26
   136f4:	andeq	r3, r1, r8, ror #26
   136f8:	andeq	r3, r1, r8, ror #26
   136fc:	andeq	r3, r1, r8, ror #26
   13700:	andeq	r3, r1, r0, lsl #16
   13704:	andeq	r3, r1, r0, ror #16
   13708:	andeq	r3, r1, r0, lsl #16
   1370c:	andeq	r3, r1, r0, lsr #16
   13710:	mov	r3, #0
   13714:	str	r3, [sp, #44]	; 0x2c
   13718:	mov	r4, #9
   1371c:	mov	r3, #116	; 0x74
   13720:	b	133a4 <__assert_fail@plt+0x24a4>
   13724:	mov	r3, #0
   13728:	str	r3, [sp, #44]	; 0x2c
   1372c:	mov	r4, #11
   13730:	mov	r3, #118	; 0x76
   13734:	b	133bc <__assert_fail@plt+0x24bc>
   13738:	mov	r3, #0
   1373c:	str	r3, [sp, #44]	; 0x2c
   13740:	cmp	sl, #2
   13744:	beq	13768 <__assert_fail@plt+0x2868>
   13748:	ldr	r3, [sp, #28]
   1374c:	ldr	r2, [sp, #32]
   13750:	and	r3, r3, r2
   13754:	tst	r7, r3
   13758:	bne	13ddc <__assert_fail@plt+0x2edc>
   1375c:	mov	r4, #92	; 0x5c
   13760:	mov	r3, r4
   13764:	b	133bc <__assert_fail@plt+0x24bc>
   13768:	ldr	r3, [sp, #32]
   1376c:	cmp	r3, #0
   13770:	bne	13f64 <__assert_fail@plt+0x3064>
   13774:	mov	r5, r3
   13778:	mov	r4, #92	; 0x5c
   1377c:	eor	r3, r3, #1
   13780:	ldr	r2, [sp, #36]	; 0x24
   13784:	and	r3, r3, r2
   13788:	tst	r3, #255	; 0xff
   1378c:	beq	13494 <__assert_fail@plt+0x2594>
   13790:	cmp	r9, fp
   13794:	movhi	r3, #39	; 0x27
   13798:	strbhi	r3, [r8, fp]
   1379c:	add	r3, fp, #1
   137a0:	cmp	r9, r3
   137a4:	movhi	r2, #39	; 0x27
   137a8:	strbhi	r2, [r8, r3]
   137ac:	add	fp, fp, #2
   137b0:	mov	r3, #0
   137b4:	str	r3, [sp, #36]	; 0x24
   137b8:	b	13494 <__assert_fail@plt+0x2594>
   137bc:	mov	r3, #110	; 0x6e
   137c0:	b	133a4 <__assert_fail@plt+0x24a4>
   137c4:	mov	r3, #110	; 0x6e
   137c8:	b	133a4 <__assert_fail@plt+0x24a4>
   137cc:	mov	r3, #0
   137d0:	str	r3, [sp, #44]	; 0x2c
   137d4:	mov	r3, #110	; 0x6e
   137d8:	b	133a4 <__assert_fail@plt+0x24a4>
   137dc:	mov	r8, r9
   137e0:	mov	r7, #2
   137e4:	b	13f84 <__assert_fail@plt+0x3084>
   137e8:	mov	r3, #97	; 0x61
   137ec:	b	133bc <__assert_fail@plt+0x24bc>
   137f0:	mov	r3, #97	; 0x61
   137f4:	b	133bc <__assert_fail@plt+0x24bc>
   137f8:	mov	r3, #0
   137fc:	str	r3, [sp, #44]	; 0x2c
   13800:	ldr	r3, [sp, #24]
   13804:	cmn	r3, #1
   13808:	beq	13834 <__assert_fail@plt+0x2934>
   1380c:	ldr	r3, [sp, #24]
   13810:	subs	r3, r3, #1
   13814:	movne	r3, #1
   13818:	cmp	r3, #0
   1381c:	bne	13d9c <__assert_fail@plt+0x2e9c>
   13820:	cmp	r6, #0
   13824:	beq	13864 <__assert_fail@plt+0x2964>
   13828:	mov	r5, #0
   1382c:	mov	r3, r5
   13830:	b	133d0 <__assert_fail@plt+0x24d0>
   13834:	ldr	r3, [sp, #48]	; 0x30
   13838:	ldrb	r3, [r3, #1]
   1383c:	adds	r3, r3, #0
   13840:	movne	r3, #1
   13844:	b	13818 <__assert_fail@plt+0x2918>
   13848:	mov	r3, #0
   1384c:	str	r3, [sp, #44]	; 0x2c
   13850:	b	13820 <__assert_fail@plt+0x2920>
   13854:	mov	r3, #0
   13858:	str	r3, [sp, #44]	; 0x2c
   1385c:	b	13864 <__assert_fail@plt+0x2964>
   13860:	ldr	r5, [sp, #44]	; 0x2c
   13864:	ldr	r3, [sp, #32]
   13868:	cmp	sl, #2
   1386c:	movne	r3, #0
   13870:	andeq	r3, r3, #1
   13874:	cmp	r3, #0
   13878:	beq	133d0 <__assert_fail@plt+0x24d0>
   1387c:	mov	r8, r9
   13880:	mov	r7, #2
   13884:	b	13f84 <__assert_fail@plt+0x3084>
   13888:	ldr	r5, [sp, #32]
   1388c:	b	13864 <__assert_fail@plt+0x2964>
   13890:	mov	r3, #0
   13894:	str	r3, [sp, #44]	; 0x2c
   13898:	mov	r5, r3
   1389c:	b	13864 <__assert_fail@plt+0x2964>
   138a0:	mov	r3, #0
   138a4:	str	r3, [sp, #44]	; 0x2c
   138a8:	cmp	sl, #2
   138ac:	strne	r5, [sp, #68]	; 0x44
   138b0:	movne	r3, #0
   138b4:	movne	r4, #39	; 0x27
   138b8:	bne	133d0 <__assert_fail@plt+0x24d0>
   138bc:	ldr	r3, [sp, #32]
   138c0:	cmp	r3, #0
   138c4:	bne	13f70 <__assert_fail@plt+0x3070>
   138c8:	ldr	r3, [sp, #72]	; 0x48
   138cc:	clz	r3, r3
   138d0:	lsr	r3, r3, #5
   138d4:	cmp	r9, #0
   138d8:	moveq	r3, #0
   138dc:	cmp	r3, #0
   138e0:	movne	r3, #0
   138e4:	bne	1390c <__assert_fail@plt+0x2a0c>
   138e8:	cmp	r9, fp
   138ec:	movhi	r3, #39	; 0x27
   138f0:	strbhi	r3, [r8, fp]
   138f4:	add	r3, fp, #1
   138f8:	cmp	r9, r3
   138fc:	movhi	r2, #92	; 0x5c
   13900:	strbhi	r2, [r8, r3]
   13904:	mov	r3, r9
   13908:	ldr	r9, [sp, #72]	; 0x48
   1390c:	add	r2, fp, #2
   13910:	cmp	r2, r3
   13914:	movcc	r1, #39	; 0x27
   13918:	strbcc	r1, [r8, r2]
   1391c:	add	fp, fp, #3
   13920:	str	r5, [sp, #68]	; 0x44
   13924:	ldr	r2, [sp, #32]
   13928:	str	r2, [sp, #36]	; 0x24
   1392c:	str	r9, [sp, #72]	; 0x48
   13930:	mov	r9, r3
   13934:	mov	r4, #39	; 0x27
   13938:	mov	r3, #0
   1393c:	b	1341c <__assert_fail@plt+0x251c>
   13940:	mov	r3, #0
   13944:	str	r3, [sp, #44]	; 0x2c
   13948:	ldr	r7, [sp, #76]	; 0x4c
   1394c:	cmp	r7, #1
   13950:	bne	13988 <__assert_fail@plt+0x2a88>
   13954:	bl	10dec <__ctype_b_loc@plt>
   13958:	ldr	r2, [r0]
   1395c:	lsl	r3, r4, #1
   13960:	ldrh	r5, [r2, r3]
   13964:	ubfx	r5, r5, #14, #1
   13968:	mov	ip, r7
   1396c:	eor	r3, r5, #1
   13970:	ldr	r2, [sp, #28]
   13974:	and	r3, r3, r2
   13978:	ands	r3, r3, #255	; 0xff
   1397c:	beq	133d0 <__assert_fail@plt+0x24d0>
   13980:	mov	r5, #0
   13984:	b	13be4 <__assert_fail@plt+0x2ce4>
   13988:	mov	r2, #0
   1398c:	mov	r3, #0
   13990:	strd	r2, [sp, #104]	; 0x68
   13994:	ldr	r3, [sp, #24]
   13998:	cmn	r3, #1
   1399c:	beq	139c0 <__assert_fail@plt+0x2ac0>
   139a0:	mov	r3, #0
   139a4:	str	r4, [sp, #88]	; 0x58
   139a8:	str	fp, [sp, #92]	; 0x5c
   139ac:	str	r8, [sp, #56]	; 0x38
   139b0:	mov	r8, r3
   139b4:	str	r9, [sp, #84]	; 0x54
   139b8:	ldr	r9, [sp, #48]	; 0x30
   139bc:	b	13b0c <__assert_fail@plt+0x2c0c>
   139c0:	ldr	r0, [sp, #48]	; 0x30
   139c4:	bl	10e04 <strlen@plt>
   139c8:	str	r0, [sp, #24]
   139cc:	b	139a0 <__assert_fail@plt+0x2aa0>
   139d0:	mov	r1, fp
   139d4:	ldr	r4, [sp, #88]	; 0x58
   139d8:	mov	r2, r8
   139dc:	mov	ip, r8
   139e0:	ldr	fp, [sp, #92]	; 0x5c
   139e4:	ldr	r8, [sp, #56]	; 0x38
   139e8:	ldr	r9, [sp, #84]	; 0x54
   139ec:	ldr	r0, [sp, #24]
   139f0:	cmp	r7, r0
   139f4:	bcs	13bac <__assert_fail@plt+0x2cac>
   139f8:	ldrb	r3, [r1]
   139fc:	cmp	r3, #0
   13a00:	beq	13bb4 <__assert_fail@plt+0x2cb4>
   13a04:	mov	r3, r1
   13a08:	add	r2, r2, #1
   13a0c:	add	r1, r6, r2
   13a10:	cmp	r0, r1
   13a14:	bls	13bbc <__assert_fail@plt+0x2cbc>
   13a18:	ldrb	r1, [r3, #1]!
   13a1c:	cmp	r1, #0
   13a20:	bne	13a08 <__assert_fail@plt+0x2b08>
   13a24:	mov	ip, r2
   13a28:	mov	r5, #0
   13a2c:	b	13bdc <__assert_fail@plt+0x2cdc>
   13a30:	ldr	r3, [sp, #56]	; 0x38
   13a34:	str	r3, [sp, #64]	; 0x40
   13a38:	ldr	r8, [sp, #84]	; 0x54
   13a3c:	mov	r7, #2
   13a40:	b	13f84 <__assert_fail@plt+0x3084>
   13a44:	cmp	r2, r7
   13a48:	beq	13ae8 <__assert_fail@plt+0x2be8>
   13a4c:	ldrb	r3, [r2], #1
   13a50:	sub	r3, r3, #91	; 0x5b
   13a54:	cmp	r3, #33	; 0x21
   13a58:	ldrls	pc, [pc, r3, lsl #2]
   13a5c:	b	13a44 <__assert_fail@plt+0x2b44>
   13a60:	andeq	r3, r1, r0, lsr sl
   13a64:	andeq	r3, r1, r0, lsr sl
   13a68:	andeq	r3, r1, r4, asr #20
   13a6c:	andeq	r3, r1, r0, lsr sl
   13a70:	andeq	r3, r1, r4, asr #20
   13a74:	andeq	r3, r1, r0, lsr sl
   13a78:	andeq	r3, r1, r4, asr #20
   13a7c:	andeq	r3, r1, r4, asr #20
   13a80:	andeq	r3, r1, r4, asr #20
   13a84:	andeq	r3, r1, r4, asr #20
   13a88:	andeq	r3, r1, r4, asr #20
   13a8c:	andeq	r3, r1, r4, asr #20
   13a90:	andeq	r3, r1, r4, asr #20
   13a94:	andeq	r3, r1, r4, asr #20
   13a98:	andeq	r3, r1, r4, asr #20
   13a9c:	andeq	r3, r1, r4, asr #20
   13aa0:	andeq	r3, r1, r4, asr #20
   13aa4:	andeq	r3, r1, r4, asr #20
   13aa8:	andeq	r3, r1, r4, asr #20
   13aac:	andeq	r3, r1, r4, asr #20
   13ab0:	andeq	r3, r1, r4, asr #20
   13ab4:	andeq	r3, r1, r4, asr #20
   13ab8:	andeq	r3, r1, r4, asr #20
   13abc:	andeq	r3, r1, r4, asr #20
   13ac0:	andeq	r3, r1, r4, asr #20
   13ac4:	andeq	r3, r1, r4, asr #20
   13ac8:	andeq	r3, r1, r4, asr #20
   13acc:	andeq	r3, r1, r4, asr #20
   13ad0:	andeq	r3, r1, r4, asr #20
   13ad4:	andeq	r3, r1, r4, asr #20
   13ad8:	andeq	r3, r1, r4, asr #20
   13adc:	andeq	r3, r1, r4, asr #20
   13ae0:	andeq	r3, r1, r4, asr #20
   13ae4:	andeq	r3, r1, r0, lsr sl
   13ae8:	ldr	r0, [sp, #100]	; 0x64
   13aec:	bl	10d5c <iswprint@plt>
   13af0:	cmp	r0, #0
   13af4:	moveq	r5, #0
   13af8:	add	r8, r8, r4
   13afc:	add	r0, sp, #104	; 0x68
   13b00:	bl	10d08 <mbsinit@plt>
   13b04:	cmp	r0, #0
   13b08:	bne	13b78 <__assert_fail@plt+0x2c78>
   13b0c:	add	r7, r6, r8
   13b10:	add	fp, r9, r7
   13b14:	add	r3, sp, #104	; 0x68
   13b18:	ldr	r2, [sp, #24]
   13b1c:	sub	r2, r2, r7
   13b20:	mov	r1, fp
   13b24:	add	r0, sp, #100	; 0x64
   13b28:	bl	16010 <__assert_fail@plt+0x5110>
   13b2c:	subs	r4, r0, #0
   13b30:	beq	13bc8 <__assert_fail@plt+0x2cc8>
   13b34:	cmn	r4, #1
   13b38:	beq	13b90 <__assert_fail@plt+0x2c90>
   13b3c:	cmn	r4, #2
   13b40:	beq	139d0 <__assert_fail@plt+0x2ad0>
   13b44:	ldr	r3, [sp, #32]
   13b48:	cmp	sl, #2
   13b4c:	movne	r3, #0
   13b50:	andeq	r3, r3, #1
   13b54:	cmp	r3, #0
   13b58:	beq	13ae8 <__assert_fail@plt+0x2be8>
   13b5c:	cmp	r4, #1
   13b60:	bls	13ae8 <__assert_fail@plt+0x2be8>
   13b64:	add	r2, r7, #1
   13b68:	add	r2, r9, r2
   13b6c:	add	r3, r9, r4
   13b70:	add	r7, r3, r7
   13b74:	b	13a4c <__assert_fail@plt+0x2b4c>
   13b78:	ldr	r4, [sp, #88]	; 0x58
   13b7c:	mov	ip, r8
   13b80:	ldr	fp, [sp, #92]	; 0x5c
   13b84:	ldr	r8, [sp, #56]	; 0x38
   13b88:	ldr	r9, [sp, #84]	; 0x54
   13b8c:	b	13bdc <__assert_fail@plt+0x2cdc>
   13b90:	ldr	r4, [sp, #88]	; 0x58
   13b94:	mov	ip, r8
   13b98:	ldr	fp, [sp, #92]	; 0x5c
   13b9c:	ldr	r8, [sp, #56]	; 0x38
   13ba0:	ldr	r9, [sp, #84]	; 0x54
   13ba4:	mov	r5, #0
   13ba8:	b	13bdc <__assert_fail@plt+0x2cdc>
   13bac:	mov	r5, #0
   13bb0:	b	13bdc <__assert_fail@plt+0x2cdc>
   13bb4:	mov	r5, #0
   13bb8:	b	13bdc <__assert_fail@plt+0x2cdc>
   13bbc:	mov	ip, r2
   13bc0:	mov	r5, #0
   13bc4:	b	13bdc <__assert_fail@plt+0x2cdc>
   13bc8:	ldr	r4, [sp, #88]	; 0x58
   13bcc:	mov	ip, r8
   13bd0:	ldr	fp, [sp, #92]	; 0x5c
   13bd4:	ldr	r8, [sp, #56]	; 0x38
   13bd8:	ldr	r9, [sp, #84]	; 0x54
   13bdc:	cmp	ip, #1
   13be0:	bls	1396c <__assert_fail@plt+0x2a6c>
   13be4:	add	lr, r6, ip
   13be8:	ldr	r3, [sp, #48]	; 0x30
   13bec:	add	r1, r3, r6
   13bf0:	mov	r3, #0
   13bf4:	eor	r0, r5, #1
   13bf8:	ldr	r2, [sp, #28]
   13bfc:	and	r0, r0, r2
   13c00:	uxtb	r0, r0
   13c04:	str	r0, [sp, #56]	; 0x38
   13c08:	mov	r7, #92	; 0x5c
   13c0c:	ldr	ip, [sp, #36]	; 0x24
   13c10:	str	r5, [sp, #84]	; 0x54
   13c14:	ldr	r2, [sp, #44]	; 0x2c
   13c18:	b	13c88 <__assert_fail@plt+0x2d88>
   13c1c:	cmp	r2, #0
   13c20:	beq	13c30 <__assert_fail@plt+0x2d30>
   13c24:	cmp	r9, fp
   13c28:	strbhi	r7, [r8, fp]
   13c2c:	add	fp, fp, #1
   13c30:	add	r5, r6, #1
   13c34:	cmp	r5, lr
   13c38:	bcs	13d44 <__assert_fail@plt+0x2e44>
   13c3c:	eor	r2, r3, #1
   13c40:	and	r2, r2, ip
   13c44:	ands	r2, r2, #255	; 0xff
   13c48:	beq	13d60 <__assert_fail@plt+0x2e60>
   13c4c:	cmp	r9, fp
   13c50:	movhi	r2, #39	; 0x27
   13c54:	strbhi	r2, [r8, fp]
   13c58:	add	r2, fp, #1
   13c5c:	cmp	r9, r2
   13c60:	movhi	ip, #39	; 0x27
   13c64:	strbhi	ip, [r8, r2]
   13c68:	add	fp, fp, #2
   13c6c:	ldr	ip, [sp, #56]	; 0x38
   13c70:	mov	r2, ip
   13c74:	mov	r6, r5
   13c78:	cmp	r9, fp
   13c7c:	strbhi	r4, [r8, fp]
   13c80:	add	fp, fp, #1
   13c84:	ldrb	r4, [r1, #1]!
   13c88:	cmp	r0, #0
   13c8c:	beq	13c1c <__assert_fail@plt+0x2d1c>
   13c90:	ldr	r3, [sp, #32]
   13c94:	cmp	r3, #0
   13c98:	bne	13f2c <__assert_fail@plt+0x302c>
   13c9c:	eor	r3, ip, #1
   13ca0:	cmp	sl, #2
   13ca4:	movne	r3, #0
   13ca8:	andeq	r3, r3, #1
   13cac:	cmp	r3, #0
   13cb0:	beq	13ce8 <__assert_fail@plt+0x2de8>
   13cb4:	cmp	r9, fp
   13cb8:	movhi	ip, #39	; 0x27
   13cbc:	strbhi	ip, [r8, fp]
   13cc0:	add	ip, fp, #1
   13cc4:	cmp	r9, ip
   13cc8:	movhi	r5, #36	; 0x24
   13ccc:	strbhi	r5, [r8, ip]
   13cd0:	add	ip, fp, #2
   13cd4:	cmp	r9, ip
   13cd8:	movhi	r5, #39	; 0x27
   13cdc:	strbhi	r5, [r8, ip]
   13ce0:	add	fp, fp, #3
   13ce4:	mov	ip, r3
   13ce8:	cmp	r9, fp
   13cec:	strbhi	r7, [r8, fp]
   13cf0:	add	r3, fp, #1
   13cf4:	cmp	r9, r3
   13cf8:	bls	13d08 <__assert_fail@plt+0x2e08>
   13cfc:	lsr	r5, r4, #6
   13d00:	add	r5, r5, #48	; 0x30
   13d04:	strb	r5, [r8, r3]
   13d08:	add	r3, fp, #2
   13d0c:	cmp	r9, r3
   13d10:	bls	13d20 <__assert_fail@plt+0x2e20>
   13d14:	ubfx	r5, r4, #3, #3
   13d18:	add	r5, r5, #48	; 0x30
   13d1c:	strb	r5, [r8, r3]
   13d20:	add	fp, fp, #3
   13d24:	and	r4, r4, #7
   13d28:	add	r4, r4, #48	; 0x30
   13d2c:	add	r5, r6, #1
   13d30:	cmp	r5, lr
   13d34:	bcs	13d50 <__assert_fail@plt+0x2e50>
   13d38:	ldr	r3, [sp, #56]	; 0x38
   13d3c:	mov	r6, r5
   13d40:	b	13c78 <__assert_fail@plt+0x2d78>
   13d44:	str	ip, [sp, #36]	; 0x24
   13d48:	ldr	r5, [sp, #84]	; 0x54
   13d4c:	b	1377c <__assert_fail@plt+0x287c>
   13d50:	str	ip, [sp, #36]	; 0x24
   13d54:	ldr	r5, [sp, #84]	; 0x54
   13d58:	mov	r3, r0
   13d5c:	b	1377c <__assert_fail@plt+0x287c>
   13d60:	mov	r6, r5
   13d64:	b	13c78 <__assert_fail@plt+0x2d78>
   13d68:	ldr	r3, [sp, #44]	; 0x2c
   13d6c:	b	133d0 <__assert_fail@plt+0x24d0>
   13d70:	mov	r5, #0
   13d74:	mov	r3, r5
   13d78:	mov	r4, #63	; 0x3f
   13d7c:	b	133d0 <__assert_fail@plt+0x24d0>
   13d80:	mov	r5, #0
   13d84:	mov	r3, r5
   13d88:	mov	r4, #63	; 0x3f
   13d8c:	b	133d0 <__assert_fail@plt+0x24d0>
   13d90:	mov	r5, #0
   13d94:	mov	r3, r5
   13d98:	b	133d0 <__assert_fail@plt+0x24d0>
   13d9c:	mov	r5, #0
   13da0:	mov	r3, r5
   13da4:	b	133d0 <__assert_fail@plt+0x24d0>
   13da8:	ldr	r5, [sp, #44]	; 0x2c
   13dac:	ldr	r3, [sp, #32]
   13db0:	b	133d0 <__assert_fail@plt+0x24d0>
   13db4:	ldr	r5, [sp, #44]	; 0x2c
   13db8:	mov	r3, #0
   13dbc:	str	r3, [sp, #44]	; 0x2c
   13dc0:	b	133d0 <__assert_fail@plt+0x24d0>
   13dc4:	mov	r4, r3
   13dc8:	mov	r5, #0
   13dcc:	b	13428 <__assert_fail@plt+0x2528>
   13dd0:	mov	r5, #0
   13dd4:	mov	r4, #97	; 0x61
   13dd8:	b	13428 <__assert_fail@plt+0x2528>
   13ddc:	mov	r5, #0
   13de0:	mov	r3, r5
   13de4:	mov	r4, #92	; 0x5c
   13de8:	b	1377c <__assert_fail@plt+0x287c>
   13dec:	ldr	r3, [sp, #48]	; 0x30
   13df0:	ldrb	r5, [r3, r6]
   13df4:	adds	r5, r5, #0
   13df8:	movne	r5, #1
   13dfc:	b	134cc <__assert_fail@plt+0x25cc>
   13e00:	cmp	sl, #2
   13e04:	movne	r3, #0
   13e08:	moveq	r3, #1
   13e0c:	ldr	r1, [sp, #32]
   13e10:	cmp	fp, #0
   13e14:	andeq	r2, r3, r1
   13e18:	movne	r2, #0
   13e1c:	cmp	r2, #0
   13e20:	bne	13f40 <__assert_fail@plt+0x3040>
   13e24:	eor	r2, r1, #1
   13e28:	uxtb	r2, r2
   13e2c:	and	r3, r3, r2
   13e30:	ldr	r1, [sp, #68]	; 0x44
   13e34:	ands	r3, r1, r3
   13e38:	beq	13ecc <__assert_fail@plt+0x2fcc>
   13e3c:	ldr	r2, [sp, #40]	; 0x28
   13e40:	cmp	r2, #0
   13e44:	bne	13e7c <__assert_fail@plt+0x2f7c>
   13e48:	ldr	r2, [sp, #72]	; 0x48
   13e4c:	adds	r2, r2, #0
   13e50:	movne	r2, #1
   13e54:	cmp	r9, #0
   13e58:	movne	r2, #0
   13e5c:	str	r2, [sp, #68]	; 0x44
   13e60:	mov	sl, #2
   13e64:	ldr	r1, [sp, #40]	; 0x28
   13e68:	str	r1, [sp, #32]
   13e6c:	cmp	r2, #0
   13e70:	beq	13ec0 <__assert_fail@plt+0x2fc0>
   13e74:	ldr	r9, [sp, #72]	; 0x48
   13e78:	b	12bd4 <__assert_fail@plt+0x1cd4>
   13e7c:	ldr	r3, [sp, #168]	; 0xa8
   13e80:	str	r3, [sp, #16]
   13e84:	ldr	r3, [sp, #164]	; 0xa4
   13e88:	str	r3, [sp, #12]
   13e8c:	ldr	r3, [sp, #160]	; 0xa0
   13e90:	str	r3, [sp, #8]
   13e94:	ldr	r3, [sp, #156]	; 0x9c
   13e98:	str	r3, [sp, #4]
   13e9c:	mov	r3, #5
   13ea0:	str	r3, [sp]
   13ea4:	ldr	r3, [sp, #24]
   13ea8:	ldr	r2, [sp, #48]	; 0x30
   13eac:	ldr	r1, [sp, #72]	; 0x48
   13eb0:	ldr	r0, [sp, #64]	; 0x40
   13eb4:	bl	12b5c <__assert_fail@plt+0x1c5c>
   13eb8:	mov	fp, r0
   13ebc:	b	13fdc <__assert_fail@plt+0x30dc>
   13ec0:	mov	r8, r9
   13ec4:	mov	r2, r3
   13ec8:	b	13ed0 <__assert_fail@plt+0x2fd0>
   13ecc:	mov	r8, r9
   13ed0:	ldr	r3, [sp, #60]	; 0x3c
   13ed4:	cmp	r3, #0
   13ed8:	moveq	r2, #0
   13edc:	andne	r2, r2, #1
   13ee0:	cmp	r2, #0
   13ee4:	beq	13f14 <__assert_fail@plt+0x3014>
   13ee8:	mov	r2, r3
   13eec:	ldrb	r3, [r3]
   13ef0:	cmp	r3, #0
   13ef4:	beq	13f14 <__assert_fail@plt+0x3014>
   13ef8:	ldr	r1, [sp, #64]	; 0x40
   13efc:	cmp	r8, fp
   13f00:	strbhi	r3, [r1, fp]
   13f04:	add	fp, fp, #1
   13f08:	ldrb	r3, [r2, #1]!
   13f0c:	cmp	r3, #0
   13f10:	bne	13efc <__assert_fail@plt+0x2ffc>
   13f14:	cmp	r8, fp
   13f18:	bls	13fdc <__assert_fail@plt+0x30dc>
   13f1c:	mov	r3, #0
   13f20:	ldr	r2, [sp, #64]	; 0x40
   13f24:	strb	r3, [r2, fp]
   13f28:	b	13fdc <__assert_fail@plt+0x30dc>
   13f2c:	mov	r8, r9
   13f30:	mov	r7, sl
   13f34:	ldr	r3, [sp, #32]
   13f38:	str	r3, [sp, #28]
   13f3c:	b	13f84 <__assert_fail@plt+0x3084>
   13f40:	mov	r8, r9
   13f44:	mov	r7, #2
   13f48:	b	13f84 <__assert_fail@plt+0x3084>
   13f4c:	mov	r8, r9
   13f50:	mov	r7, sl
   13f54:	b	13f84 <__assert_fail@plt+0x3084>
   13f58:	mov	r8, r9
   13f5c:	mov	r7, sl
   13f60:	b	13f84 <__assert_fail@plt+0x3084>
   13f64:	mov	r8, r9
   13f68:	mov	r7, sl
   13f6c:	b	13f84 <__assert_fail@plt+0x3084>
   13f70:	mov	r8, r9
   13f74:	mov	r7, sl
   13f78:	b	13f84 <__assert_fail@plt+0x3084>
   13f7c:	mov	r8, r9
   13f80:	mov	r7, sl
   13f84:	ldr	r3, [sp, #28]
   13f88:	cmp	r7, #2
   13f8c:	movne	r3, #0
   13f90:	andeq	r3, r3, #1
   13f94:	cmp	r3, #0
   13f98:	movne	r7, #4
   13f9c:	ldr	r3, [sp, #168]	; 0xa8
   13fa0:	str	r3, [sp, #16]
   13fa4:	ldr	r3, [sp, #164]	; 0xa4
   13fa8:	str	r3, [sp, #12]
   13fac:	mov	r3, #0
   13fb0:	str	r3, [sp, #8]
   13fb4:	ldr	r3, [sp, #156]	; 0x9c
   13fb8:	bic	r3, r3, #2
   13fbc:	str	r3, [sp, #4]
   13fc0:	str	r7, [sp]
   13fc4:	ldr	r3, [sp, #24]
   13fc8:	ldr	r2, [sp, #48]	; 0x30
   13fcc:	mov	r1, r8
   13fd0:	ldr	r0, [sp, #64]	; 0x40
   13fd4:	bl	12b5c <__assert_fail@plt+0x1c5c>
   13fd8:	mov	fp, r0
   13fdc:	mov	r0, fp
   13fe0:	add	sp, sp, #116	; 0x74
   13fe4:	ldrd	r4, [sp]
   13fe8:	ldrd	r6, [sp, #8]
   13fec:	ldrd	r8, [sp, #16]
   13ff0:	ldrd	sl, [sp, #24]
   13ff4:	add	sp, sp, #32
   13ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   13ffc:	mov	r8, r9
   14000:	mov	r7, sl
   14004:	b	13f9c <__assert_fail@plt+0x309c>
   14008:	add	fp, fp, #4
   1400c:	str	r3, [sp, #36]	; 0x24
   14010:	mov	r5, #0
   14014:	mov	r4, #48	; 0x30
   14018:	b	133d0 <__assert_fail@plt+0x24d0>
   1401c:	mov	r3, #1
   14020:	str	r3, [sp, #32]
   14024:	str	r3, [sp, #28]
   14028:	str	r3, [sp, #52]	; 0x34
   1402c:	movw	r3, #27252	; 0x6a74
   14030:	movt	r3, #1
   14034:	str	r3, [sp, #60]	; 0x3c
   14038:	mov	fp, #0
   1403c:	mov	sl, #5
   14040:	b	12c34 <__assert_fail@plt+0x1d34>
   14044:	ldr	r3, [sp, #48]	; 0x30
   14048:	ldrb	r4, [r3, r6]
   1404c:	cmp	r4, #126	; 0x7e
   14050:	ldrls	pc, [pc, r4, lsl #2]
   14054:	b	13940 <__assert_fail@plt+0x2a40>
   14058:	andeq	r3, r1, r8, asr #1
   1405c:	andeq	r3, r1, r0, asr #18
   14060:	andeq	r3, r1, r0, asr #18
   14064:	andeq	r3, r1, r0, asr #18
   14068:	andeq	r3, r1, r0, asr #18
   1406c:	andeq	r3, r1, r0, asr #18
   14070:	andeq	r3, r1, r0, asr #18
   14074:	ldrdeq	r3, [r1], -r0
   14078:	andeq	r3, r1, ip, ror #6
   1407c:	andeq	r3, r1, r0, lsl r7
   14080:	andeq	r3, r1, ip, asr #15
   14084:	andeq	r3, r1, r4, lsr #14
   14088:	andeq	r3, r1, r0, lsl #7
   1408c:	muleq	r1, r4, r3
   14090:	andeq	r3, r1, r0, asr #18
   14094:	andeq	r3, r1, r0, asr #18
   14098:	andeq	r3, r1, r0, asr #18
   1409c:	andeq	r3, r1, r0, asr #18
   140a0:	andeq	r3, r1, r0, asr #18
   140a4:	andeq	r3, r1, r0, asr #18
   140a8:	andeq	r3, r1, r0, asr #18
   140ac:	andeq	r3, r1, r0, asr #18
   140b0:	andeq	r3, r1, r0, asr #18
   140b4:	andeq	r3, r1, r0, asr #18
   140b8:	andeq	r3, r1, r0, asr #18
   140bc:	andeq	r3, r1, r0, asr #18
   140c0:	andeq	r3, r1, r0, asr #18
   140c4:	andeq	r3, r1, r0, asr #18
   140c8:	andeq	r3, r1, r0, asr #18
   140cc:	andeq	r3, r1, r0, asr #18
   140d0:	andeq	r3, r1, r0, asr #18
   140d4:	andeq	r3, r1, r0, asr #18
   140d8:	andeq	r3, r1, r4, asr r8
   140dc:	muleq	r1, r0, r8
   140e0:	muleq	r1, r0, r8
   140e4:	andeq	r3, r1, r8, asr #16
   140e8:	muleq	r1, r0, r8
   140ec:			; <UNDEFINED> instruction: 0x00013db4
   140f0:	muleq	r1, r0, r8
   140f4:	andeq	r3, r1, r0, lsr #17
   140f8:	muleq	r1, r0, r8
   140fc:	muleq	r1, r0, r8
   14100:	muleq	r1, r0, r8
   14104:			; <UNDEFINED> instruction: 0x00013db4
   14108:			; <UNDEFINED> instruction: 0x00013db4
   1410c:			; <UNDEFINED> instruction: 0x00013db4
   14110:			; <UNDEFINED> instruction: 0x00013db4
   14114:			; <UNDEFINED> instruction: 0x00013db4
   14118:			; <UNDEFINED> instruction: 0x00013db4
   1411c:			; <UNDEFINED> instruction: 0x00013db4
   14120:			; <UNDEFINED> instruction: 0x00013db4
   14124:			; <UNDEFINED> instruction: 0x00013db4
   14128:			; <UNDEFINED> instruction: 0x00013db4
   1412c:			; <UNDEFINED> instruction: 0x00013db4
   14130:			; <UNDEFINED> instruction: 0x00013db4
   14134:			; <UNDEFINED> instruction: 0x00013db4
   14138:			; <UNDEFINED> instruction: 0x00013db4
   1413c:			; <UNDEFINED> instruction: 0x00013db4
   14140:			; <UNDEFINED> instruction: 0x00013db4
   14144:	muleq	r1, r0, r8
   14148:	muleq	r1, r0, r8
   1414c:	muleq	r1, r0, r8
   14150:	muleq	r1, r0, r8
   14154:	andeq	r3, r1, r0, lsl #4
   14158:	andeq	r3, r1, r0, asr #18
   1415c:			; <UNDEFINED> instruction: 0x00013db4
   14160:			; <UNDEFINED> instruction: 0x00013db4
   14164:			; <UNDEFINED> instruction: 0x00013db4
   14168:			; <UNDEFINED> instruction: 0x00013db4
   1416c:			; <UNDEFINED> instruction: 0x00013db4
   14170:			; <UNDEFINED> instruction: 0x00013db4
   14174:			; <UNDEFINED> instruction: 0x00013db4
   14178:			; <UNDEFINED> instruction: 0x00013db4
   1417c:			; <UNDEFINED> instruction: 0x00013db4
   14180:			; <UNDEFINED> instruction: 0x00013db4
   14184:			; <UNDEFINED> instruction: 0x00013db4
   14188:			; <UNDEFINED> instruction: 0x00013db4
   1418c:			; <UNDEFINED> instruction: 0x00013db4
   14190:			; <UNDEFINED> instruction: 0x00013db4
   14194:			; <UNDEFINED> instruction: 0x00013db4
   14198:			; <UNDEFINED> instruction: 0x00013db4
   1419c:			; <UNDEFINED> instruction: 0x00013db4
   141a0:			; <UNDEFINED> instruction: 0x00013db4
   141a4:			; <UNDEFINED> instruction: 0x00013db4
   141a8:			; <UNDEFINED> instruction: 0x00013db4
   141ac:			; <UNDEFINED> instruction: 0x00013db4
   141b0:			; <UNDEFINED> instruction: 0x00013db4
   141b4:			; <UNDEFINED> instruction: 0x00013db4
   141b8:			; <UNDEFINED> instruction: 0x00013db4
   141bc:			; <UNDEFINED> instruction: 0x00013db4
   141c0:			; <UNDEFINED> instruction: 0x00013db4
   141c4:	muleq	r1, r0, r8
   141c8:	andeq	r3, r1, r8, lsr r7
   141cc:			; <UNDEFINED> instruction: 0x00013db4
   141d0:	muleq	r1, r0, r8
   141d4:			; <UNDEFINED> instruction: 0x00013db4
   141d8:	muleq	r1, r0, r8
   141dc:			; <UNDEFINED> instruction: 0x00013db4
   141e0:			; <UNDEFINED> instruction: 0x00013db4
   141e4:			; <UNDEFINED> instruction: 0x00013db4
   141e8:			; <UNDEFINED> instruction: 0x00013db4
   141ec:			; <UNDEFINED> instruction: 0x00013db4
   141f0:			; <UNDEFINED> instruction: 0x00013db4
   141f4:			; <UNDEFINED> instruction: 0x00013db4
   141f8:			; <UNDEFINED> instruction: 0x00013db4
   141fc:			; <UNDEFINED> instruction: 0x00013db4
   14200:			; <UNDEFINED> instruction: 0x00013db4
   14204:			; <UNDEFINED> instruction: 0x00013db4
   14208:			; <UNDEFINED> instruction: 0x00013db4
   1420c:			; <UNDEFINED> instruction: 0x00013db4
   14210:			; <UNDEFINED> instruction: 0x00013db4
   14214:			; <UNDEFINED> instruction: 0x00013db4
   14218:			; <UNDEFINED> instruction: 0x00013db4
   1421c:			; <UNDEFINED> instruction: 0x00013db4
   14220:			; <UNDEFINED> instruction: 0x00013db4
   14224:			; <UNDEFINED> instruction: 0x00013db4
   14228:			; <UNDEFINED> instruction: 0x00013db4
   1422c:			; <UNDEFINED> instruction: 0x00013db4
   14230:			; <UNDEFINED> instruction: 0x00013db4
   14234:			; <UNDEFINED> instruction: 0x00013db4
   14238:			; <UNDEFINED> instruction: 0x00013db4
   1423c:			; <UNDEFINED> instruction: 0x00013db4
   14240:			; <UNDEFINED> instruction: 0x00013db4
   14244:	strdeq	r3, [r1], -r8
   14248:	muleq	r1, r0, r8
   1424c:	strdeq	r3, [r1], -r8
   14250:	andeq	r3, r1, r8, asr #16
   14254:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14258:	strd	r6, [sp, #8]
   1425c:	strd	r8, [sp, #16]
   14260:	strd	sl, [sp, #24]
   14264:	str	lr, [sp, #32]
   14268:	sub	sp, sp, #52	; 0x34
   1426c:	mov	r5, r0
   14270:	str	r1, [sp, #24]
   14274:	str	r2, [sp, #28]
   14278:	mov	r4, r3
   1427c:	bl	10e1c <__errno_location@plt>
   14280:	str	r0, [sp, #32]
   14284:	ldr	r3, [r0]
   14288:	str	r3, [sp, #36]	; 0x24
   1428c:	movw	r3, #28912	; 0x70f0
   14290:	movt	r3, #2
   14294:	ldr	r6, [r3]
   14298:	cmn	r5, #-2147483647	; 0x80000001
   1429c:	movne	r3, #0
   142a0:	moveq	r3, #1
   142a4:	orrs	r3, r3, r5, lsr #31
   142a8:	bne	1440c <__assert_fail@plt+0x350c>
   142ac:	movw	r3, #28912	; 0x70f0
   142b0:	movt	r3, #2
   142b4:	ldr	r2, [r3, #4]
   142b8:	cmp	r2, r5
   142bc:	bgt	1432c <__assert_fail@plt+0x342c>
   142c0:	str	r2, [sp, #44]	; 0x2c
   142c4:	add	r3, r3, #8
   142c8:	cmp	r6, r3
   142cc:	beq	14410 <__assert_fail@plt+0x3510>
   142d0:	sub	r2, r5, r2
   142d4:	mov	r3, #8
   142d8:	str	r3, [sp]
   142dc:	mvn	r3, #-2147483648	; 0x80000000
   142e0:	add	r2, r2, #1
   142e4:	add	r1, sp, #44	; 0x2c
   142e8:	mov	r0, r6
   142ec:	bl	15414 <__assert_fail@plt+0x4514>
   142f0:	mov	r6, r0
   142f4:	movw	r3, #28912	; 0x70f0
   142f8:	movt	r3, #2
   142fc:	str	r0, [r3]
   14300:	movw	r7, #28912	; 0x70f0
   14304:	movt	r7, #2
   14308:	ldr	r0, [r7, #4]
   1430c:	ldr	r2, [sp, #44]	; 0x2c
   14310:	sub	r2, r2, r0
   14314:	lsl	r2, r2, #3
   14318:	mov	r1, #0
   1431c:	add	r0, r6, r0, lsl #3
   14320:	bl	10e34 <memset@plt>
   14324:	ldr	r3, [sp, #44]	; 0x2c
   14328:	str	r3, [r7, #4]
   1432c:	add	fp, r6, r5, lsl #3
   14330:	ldr	r8, [r6, r5, lsl #3]
   14334:	ldr	r7, [fp, #4]
   14338:	ldr	r3, [r4, #4]
   1433c:	orr	r9, r3, #1
   14340:	add	sl, r4, #8
   14344:	ldr	r3, [r4, #44]	; 0x2c
   14348:	str	r3, [sp, #16]
   1434c:	ldr	r3, [r4, #40]	; 0x28
   14350:	str	r3, [sp, #12]
   14354:	str	sl, [sp, #8]
   14358:	str	r9, [sp, #4]
   1435c:	ldr	r3, [r4]
   14360:	str	r3, [sp]
   14364:	ldr	r3, [sp, #28]
   14368:	ldr	r2, [sp, #24]
   1436c:	mov	r1, r8
   14370:	mov	r0, r7
   14374:	bl	12b5c <__assert_fail@plt+0x1c5c>
   14378:	cmp	r8, r0
   1437c:	bhi	143e0 <__assert_fail@plt+0x34e0>
   14380:	add	r8, r0, #1
   14384:	str	r8, [r6, r5, lsl #3]
   14388:	movw	r3, #29028	; 0x7164
   1438c:	movt	r3, #2
   14390:	cmp	r7, r3
   14394:	beq	143a0 <__assert_fail@plt+0x34a0>
   14398:	mov	r0, r7
   1439c:	bl	127d8 <__assert_fail@plt+0x18d8>
   143a0:	mov	r0, r8
   143a4:	bl	15210 <__assert_fail@plt+0x4310>
   143a8:	mov	r7, r0
   143ac:	str	r0, [fp, #4]
   143b0:	ldr	r3, [r4, #44]	; 0x2c
   143b4:	str	r3, [sp, #16]
   143b8:	ldr	r3, [r4, #40]	; 0x28
   143bc:	str	r3, [sp, #12]
   143c0:	str	sl, [sp, #8]
   143c4:	str	r9, [sp, #4]
   143c8:	ldr	r3, [r4]
   143cc:	str	r3, [sp]
   143d0:	ldr	r3, [sp, #28]
   143d4:	ldr	r2, [sp, #24]
   143d8:	mov	r1, r8
   143dc:	bl	12b5c <__assert_fail@plt+0x1c5c>
   143e0:	ldr	r3, [sp, #32]
   143e4:	ldr	r2, [sp, #36]	; 0x24
   143e8:	str	r2, [r3]
   143ec:	mov	r0, r7
   143f0:	add	sp, sp, #52	; 0x34
   143f4:	ldrd	r4, [sp]
   143f8:	ldrd	r6, [sp, #8]
   143fc:	ldrd	r8, [sp, #16]
   14400:	ldrd	sl, [sp, #24]
   14404:	add	sp, sp, #32
   14408:	pop	{pc}		; (ldr pc, [sp], #4)
   1440c:	bl	10ef4 <abort@plt>
   14410:	sub	r2, r5, r2
   14414:	mov	r3, #8
   14418:	str	r3, [sp]
   1441c:	mvn	r3, #-2147483648	; 0x80000000
   14420:	add	r2, r2, #1
   14424:	add	r1, sp, #44	; 0x2c
   14428:	mov	r0, #0
   1442c:	bl	15414 <__assert_fail@plt+0x4514>
   14430:	mov	r6, r0
   14434:	movw	r3, #28912	; 0x70f0
   14438:	movt	r3, #2
   1443c:	str	r0, [r3]
   14440:	ldrd	r2, [r3, #8]
   14444:	strd	r2, [r0]
   14448:	b	14300 <__assert_fail@plt+0x3400>
   1444c:	strd	r4, [sp, #-16]!
   14450:	str	r6, [sp, #8]
   14454:	str	lr, [sp, #12]
   14458:	mov	r4, r0
   1445c:	bl	10e1c <__errno_location@plt>
   14460:	mov	r5, r0
   14464:	ldr	r6, [r0]
   14468:	cmp	r4, #0
   1446c:	ldr	r3, [pc, #32]	; 14494 <__assert_fail@plt+0x3594>
   14470:	moveq	r4, r3
   14474:	mov	r1, #48	; 0x30
   14478:	mov	r0, r4
   1447c:	bl	15584 <__assert_fail@plt+0x4684>
   14480:	str	r6, [r5]
   14484:	ldrd	r4, [sp]
   14488:	ldr	r6, [sp, #8]
   1448c:	add	sp, sp, #12
   14490:	pop	{pc}		; (ldr pc, [sp], #4)
   14494:	andeq	r7, r2, r4, ror #4
   14498:	subs	r3, r0, #0
   1449c:	ldr	r2, [pc, #8]	; 144ac <__assert_fail@plt+0x35ac>
   144a0:	moveq	r3, r2
   144a4:	ldr	r0, [r3]
   144a8:	bx	lr
   144ac:	andeq	r7, r2, r4, ror #4
   144b0:	subs	r3, r0, #0
   144b4:	ldr	r2, [pc, #8]	; 144c4 <__assert_fail@plt+0x35c4>
   144b8:	moveq	r3, r2
   144bc:	str	r1, [r3]
   144c0:	bx	lr
   144c4:	andeq	r7, r2, r4, ror #4
   144c8:	push	{lr}		; (str lr, [sp, #-4]!)
   144cc:	subs	r3, r0, #0
   144d0:	ldr	r0, [pc, #44]	; 14504 <__assert_fail@plt+0x3604>
   144d4:	moveq	r3, r0
   144d8:	add	r3, r3, #8
   144dc:	lsr	lr, r1, #5
   144e0:	and	r1, r1, #31
   144e4:	ldr	ip, [r3, lr, lsl #2]
   144e8:	lsr	r0, ip, r1
   144ec:	eor	r2, r2, r0
   144f0:	and	r2, r2, #1
   144f4:	eor	r1, ip, r2, lsl r1
   144f8:	str	r1, [r3, lr, lsl #2]
   144fc:	and	r0, r0, #1
   14500:	pop	{pc}		; (ldr pc, [sp], #4)
   14504:	andeq	r7, r2, r4, ror #4
   14508:	subs	r3, r0, #0
   1450c:	ldr	r2, [pc, #12]	; 14520 <__assert_fail@plt+0x3620>
   14510:	moveq	r3, r2
   14514:	ldr	r0, [r3, #4]
   14518:	str	r1, [r3, #4]
   1451c:	bx	lr
   14520:	andeq	r7, r2, r4, ror #4
   14524:	subs	r3, r0, #0
   14528:	ldr	r0, [pc, #44]	; 1455c <__assert_fail@plt+0x365c>
   1452c:	moveq	r3, r0
   14530:	mov	r0, #10
   14534:	str	r0, [r3]
   14538:	cmp	r2, #0
   1453c:	cmpne	r1, #0
   14540:	beq	14550 <__assert_fail@plt+0x3650>
   14544:	str	r1, [r3, #40]	; 0x28
   14548:	str	r2, [r3, #44]	; 0x2c
   1454c:	bx	lr
   14550:	str	r4, [sp, #-8]!
   14554:	str	lr, [sp, #4]
   14558:	bl	10ef4 <abort@plt>
   1455c:	andeq	r7, r2, r4, ror #4
   14560:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14564:	strd	r6, [sp, #8]
   14568:	strd	r8, [sp, #16]
   1456c:	str	sl, [sp, #24]
   14570:	str	lr, [sp, #28]
   14574:	sub	sp, sp, #24
   14578:	mov	r7, r0
   1457c:	mov	r8, r1
   14580:	mov	r9, r2
   14584:	mov	sl, r3
   14588:	ldr	r4, [sp, #56]	; 0x38
   1458c:	cmp	r4, #0
   14590:	ldr	r3, [pc, #104]	; 14600 <__assert_fail@plt+0x3700>
   14594:	moveq	r4, r3
   14598:	bl	10e1c <__errno_location@plt>
   1459c:	mov	r5, r0
   145a0:	ldr	r6, [r0]
   145a4:	ldr	r3, [r4, #44]	; 0x2c
   145a8:	str	r3, [sp, #16]
   145ac:	ldr	r3, [r4, #40]	; 0x28
   145b0:	str	r3, [sp, #12]
   145b4:	add	r3, r4, #8
   145b8:	str	r3, [sp, #8]
   145bc:	ldr	r3, [r4, #4]
   145c0:	str	r3, [sp, #4]
   145c4:	ldr	r3, [r4]
   145c8:	str	r3, [sp]
   145cc:	mov	r3, sl
   145d0:	mov	r2, r9
   145d4:	mov	r1, r8
   145d8:	mov	r0, r7
   145dc:	bl	12b5c <__assert_fail@plt+0x1c5c>
   145e0:	str	r6, [r5]
   145e4:	add	sp, sp, #24
   145e8:	ldrd	r4, [sp]
   145ec:	ldrd	r6, [sp, #8]
   145f0:	ldrd	r8, [sp, #16]
   145f4:	ldr	sl, [sp, #24]
   145f8:	add	sp, sp, #28
   145fc:	pop	{pc}		; (ldr pc, [sp], #4)
   14600:	andeq	r7, r2, r4, ror #4
   14604:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14608:	strd	r6, [sp, #8]
   1460c:	strd	r8, [sp, #16]
   14610:	strd	sl, [sp, #24]
   14614:	str	lr, [sp, #32]
   14618:	sub	sp, sp, #44	; 0x2c
   1461c:	mov	r8, r0
   14620:	mov	sl, r1
   14624:	mov	r6, r2
   14628:	subs	r4, r3, #0
   1462c:	ldr	r3, [pc, #200]	; 146fc <__assert_fail@plt+0x37fc>
   14630:	moveq	r4, r3
   14634:	bl	10e1c <__errno_location@plt>
   14638:	mov	r7, r0
   1463c:	ldr	fp, [r0]
   14640:	ldr	r5, [r4, #4]
   14644:	cmp	r6, #0
   14648:	orreq	r5, r5, #1
   1464c:	add	r9, r4, #8
   14650:	ldr	r3, [r4, #44]	; 0x2c
   14654:	str	r3, [sp, #16]
   14658:	ldr	r3, [r4, #40]	; 0x28
   1465c:	str	r3, [sp, #12]
   14660:	str	r9, [sp, #8]
   14664:	str	r5, [sp, #4]
   14668:	ldr	r3, [r4]
   1466c:	str	r3, [sp]
   14670:	str	sl, [sp, #36]	; 0x24
   14674:	mov	r3, sl
   14678:	str	r8, [sp, #32]
   1467c:	mov	r2, r8
   14680:	mov	r1, #0
   14684:	mov	r0, r1
   14688:	bl	12b5c <__assert_fail@plt+0x1c5c>
   1468c:	mov	sl, r0
   14690:	add	r8, r0, #1
   14694:	mov	r0, r8
   14698:	bl	15210 <__assert_fail@plt+0x4310>
   1469c:	str	r0, [sp, #28]
   146a0:	ldr	r3, [r4, #44]	; 0x2c
   146a4:	str	r3, [sp, #16]
   146a8:	ldr	r3, [r4, #40]	; 0x28
   146ac:	str	r3, [sp, #12]
   146b0:	str	r9, [sp, #8]
   146b4:	str	r5, [sp, #4]
   146b8:	ldr	r3, [r4]
   146bc:	str	r3, [sp]
   146c0:	ldr	r3, [sp, #36]	; 0x24
   146c4:	ldr	r2, [sp, #32]
   146c8:	mov	r1, r8
   146cc:	bl	12b5c <__assert_fail@plt+0x1c5c>
   146d0:	str	fp, [r7]
   146d4:	cmp	r6, #0
   146d8:	strne	sl, [r6]
   146dc:	ldr	r0, [sp, #28]
   146e0:	add	sp, sp, #44	; 0x2c
   146e4:	ldrd	r4, [sp]
   146e8:	ldrd	r6, [sp, #8]
   146ec:	ldrd	r8, [sp, #16]
   146f0:	ldrd	sl, [sp, #24]
   146f4:	add	sp, sp, #32
   146f8:	pop	{pc}		; (ldr pc, [sp], #4)
   146fc:	andeq	r7, r2, r4, ror #4
   14700:	str	r4, [sp, #-8]!
   14704:	str	lr, [sp, #4]
   14708:	mov	r3, r2
   1470c:	mov	r2, #0
   14710:	bl	14604 <__assert_fail@plt+0x3704>
   14714:	ldr	r4, [sp]
   14718:	add	sp, sp, #4
   1471c:	pop	{pc}		; (ldr pc, [sp], #4)
   14720:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14724:	strd	r6, [sp, #8]
   14728:	str	r8, [sp, #16]
   1472c:	str	lr, [sp, #20]
   14730:	movw	r3, #28912	; 0x70f0
   14734:	movt	r3, #2
   14738:	ldr	r7, [r3]
   1473c:	ldr	r3, [r3, #4]
   14740:	cmp	r3, #1
   14744:	ble	14770 <__assert_fail@plt+0x3870>
   14748:	mov	r4, #1
   1474c:	add	r6, r7, #4
   14750:	movw	r5, #28912	; 0x70f0
   14754:	movt	r5, #2
   14758:	ldr	r0, [r6, r4, lsl #3]
   1475c:	bl	127d8 <__assert_fail@plt+0x18d8>
   14760:	add	r4, r4, #1
   14764:	ldr	r3, [r5, #4]
   14768:	cmp	r3, r4
   1476c:	bgt	14758 <__assert_fail@plt+0x3858>
   14770:	ldr	r0, [r7, #4]
   14774:	movw	r3, #29028	; 0x7164
   14778:	movt	r3, #2
   1477c:	cmp	r0, r3
   14780:	beq	147a4 <__assert_fail@plt+0x38a4>
   14784:	bl	127d8 <__assert_fail@plt+0x18d8>
   14788:	movw	r3, #28912	; 0x70f0
   1478c:	movt	r3, #2
   14790:	mov	r2, #256	; 0x100
   14794:	str	r2, [r3, #8]
   14798:	movw	r2, #29028	; 0x7164
   1479c:	movt	r2, #2
   147a0:	str	r2, [r3, #12]
   147a4:	ldr	r3, [pc, #64]	; 147ec <__assert_fail@plt+0x38ec>
   147a8:	cmp	r7, r3
   147ac:	beq	147c8 <__assert_fail@plt+0x38c8>
   147b0:	mov	r0, r7
   147b4:	bl	127d8 <__assert_fail@plt+0x18d8>
   147b8:	movw	r3, #28912	; 0x70f0
   147bc:	movt	r3, #2
   147c0:	add	r2, r3, #8
   147c4:	str	r2, [r3]
   147c8:	movw	r3, #28912	; 0x70f0
   147cc:	movt	r3, #2
   147d0:	mov	r2, #1
   147d4:	str	r2, [r3, #4]
   147d8:	ldrd	r4, [sp]
   147dc:	ldrd	r6, [sp, #8]
   147e0:	ldr	r8, [sp, #16]
   147e4:	add	sp, sp, #20
   147e8:	pop	{pc}		; (ldr pc, [sp], #4)
   147ec:	strdeq	r7, [r2], -r8
   147f0:	str	r4, [sp, #-8]!
   147f4:	str	lr, [sp, #4]
   147f8:	ldr	r3, [pc, #16]	; 14810 <__assert_fail@plt+0x3910>
   147fc:	mvn	r2, #0
   14800:	bl	14254 <__assert_fail@plt+0x3354>
   14804:	ldr	r4, [sp]
   14808:	add	sp, sp, #4
   1480c:	pop	{pc}		; (ldr pc, [sp], #4)
   14810:	andeq	r7, r2, r4, ror #4
   14814:	str	r4, [sp, #-8]!
   14818:	str	lr, [sp, #4]
   1481c:	ldr	r3, [pc, #12]	; 14830 <__assert_fail@plt+0x3930>
   14820:	bl	14254 <__assert_fail@plt+0x3354>
   14824:	ldr	r4, [sp]
   14828:	add	sp, sp, #4
   1482c:	pop	{pc}		; (ldr pc, [sp], #4)
   14830:	andeq	r7, r2, r4, ror #4
   14834:	str	r4, [sp, #-8]!
   14838:	str	lr, [sp, #4]
   1483c:	mov	r1, r0
   14840:	mov	r0, #0
   14844:	bl	147f0 <__assert_fail@plt+0x38f0>
   14848:	ldr	r4, [sp]
   1484c:	add	sp, sp, #4
   14850:	pop	{pc}		; (ldr pc, [sp], #4)
   14854:	str	r4, [sp, #-8]!
   14858:	str	lr, [sp, #4]
   1485c:	mov	r2, r1
   14860:	mov	r1, r0
   14864:	mov	r0, #0
   14868:	bl	14814 <__assert_fail@plt+0x3914>
   1486c:	ldr	r4, [sp]
   14870:	add	sp, sp, #4
   14874:	pop	{pc}		; (ldr pc, [sp], #4)
   14878:	strd	r4, [sp, #-12]!
   1487c:	str	lr, [sp, #8]
   14880:	sub	sp, sp, #52	; 0x34
   14884:	mov	r4, r0
   14888:	mov	r5, r2
   1488c:	mov	r0, sp
   14890:	bl	129c8 <__assert_fail@plt+0x1ac8>
   14894:	mov	r3, sp
   14898:	mvn	r2, #0
   1489c:	mov	r1, r5
   148a0:	mov	r0, r4
   148a4:	bl	14254 <__assert_fail@plt+0x3354>
   148a8:	add	sp, sp, #52	; 0x34
   148ac:	ldrd	r4, [sp]
   148b0:	add	sp, sp, #8
   148b4:	pop	{pc}		; (ldr pc, [sp], #4)
   148b8:	strd	r4, [sp, #-16]!
   148bc:	str	r6, [sp, #8]
   148c0:	str	lr, [sp, #12]
   148c4:	sub	sp, sp, #48	; 0x30
   148c8:	mov	r4, r0
   148cc:	mov	r5, r2
   148d0:	mov	r6, r3
   148d4:	mov	r0, sp
   148d8:	bl	129c8 <__assert_fail@plt+0x1ac8>
   148dc:	mov	r3, sp
   148e0:	mov	r2, r6
   148e4:	mov	r1, r5
   148e8:	mov	r0, r4
   148ec:	bl	14254 <__assert_fail@plt+0x3354>
   148f0:	add	sp, sp, #48	; 0x30
   148f4:	ldrd	r4, [sp]
   148f8:	ldr	r6, [sp, #8]
   148fc:	add	sp, sp, #12
   14900:	pop	{pc}		; (ldr pc, [sp], #4)
   14904:	str	r4, [sp, #-8]!
   14908:	str	lr, [sp, #4]
   1490c:	mov	r2, r1
   14910:	mov	r1, r0
   14914:	mov	r0, #0
   14918:	bl	14878 <__assert_fail@plt+0x3978>
   1491c:	ldr	r4, [sp]
   14920:	add	sp, sp, #4
   14924:	pop	{pc}		; (ldr pc, [sp], #4)
   14928:	str	r4, [sp, #-8]!
   1492c:	str	lr, [sp, #4]
   14930:	mov	r3, r2
   14934:	mov	r2, r1
   14938:	mov	r1, r0
   1493c:	mov	r0, #0
   14940:	bl	148b8 <__assert_fail@plt+0x39b8>
   14944:	ldr	r4, [sp]
   14948:	add	sp, sp, #4
   1494c:	pop	{pc}		; (ldr pc, [sp], #4)
   14950:	strd	r4, [sp, #-12]!
   14954:	str	lr, [sp, #8]
   14958:	sub	sp, sp, #52	; 0x34
   1495c:	mov	r4, r0
   14960:	mov	r5, r1
   14964:	mov	r1, r2
   14968:	ldr	r0, [pc, #92]	; 149cc <__assert_fail@plt+0x3acc>
   1496c:	ldrd	r2, [r0]
   14970:	strd	r2, [sp]
   14974:	ldrd	r2, [r0, #8]
   14978:	strd	r2, [sp, #8]
   1497c:	ldrd	r2, [r0, #16]
   14980:	strd	r2, [sp, #16]
   14984:	ldrd	r2, [r0, #24]
   14988:	strd	r2, [sp, #24]
   1498c:	ldrd	r2, [r0, #32]
   14990:	strd	r2, [sp, #32]
   14994:	ldrd	r2, [r0, #40]	; 0x28
   14998:	strd	r2, [sp, #40]	; 0x28
   1499c:	mov	r2, #1
   149a0:	mov	r0, sp
   149a4:	bl	144c8 <__assert_fail@plt+0x35c8>
   149a8:	mov	r3, sp
   149ac:	mov	r2, r5
   149b0:	mov	r1, r4
   149b4:	mov	r0, #0
   149b8:	bl	14254 <__assert_fail@plt+0x3354>
   149bc:	add	sp, sp, #52	; 0x34
   149c0:	ldrd	r4, [sp]
   149c4:	add	sp, sp, #8
   149c8:	pop	{pc}		; (ldr pc, [sp], #4)
   149cc:	andeq	r7, r2, r4, ror #4
   149d0:	str	r4, [sp, #-8]!
   149d4:	str	lr, [sp, #4]
   149d8:	mov	r2, r1
   149dc:	mvn	r1, #0
   149e0:	bl	14950 <__assert_fail@plt+0x3a50>
   149e4:	ldr	r4, [sp]
   149e8:	add	sp, sp, #4
   149ec:	pop	{pc}		; (ldr pc, [sp], #4)
   149f0:	str	r4, [sp, #-8]!
   149f4:	str	lr, [sp, #4]
   149f8:	mov	r1, #58	; 0x3a
   149fc:	bl	149d0 <__assert_fail@plt+0x3ad0>
   14a00:	ldr	r4, [sp]
   14a04:	add	sp, sp, #4
   14a08:	pop	{pc}		; (ldr pc, [sp], #4)
   14a0c:	str	r4, [sp, #-8]!
   14a10:	str	lr, [sp, #4]
   14a14:	mov	r2, #58	; 0x3a
   14a18:	bl	14950 <__assert_fail@plt+0x3a50>
   14a1c:	ldr	r4, [sp]
   14a20:	add	sp, sp, #4
   14a24:	pop	{pc}		; (ldr pc, [sp], #4)
   14a28:	strd	r4, [sp, #-12]!
   14a2c:	str	lr, [sp, #8]
   14a30:	sub	sp, sp, #100	; 0x64
   14a34:	mov	r4, r0
   14a38:	mov	r5, r2
   14a3c:	mov	r0, sp
   14a40:	bl	129c8 <__assert_fail@plt+0x1ac8>
   14a44:	ldrd	r2, [sp]
   14a48:	strd	r2, [sp, #48]	; 0x30
   14a4c:	ldrd	r2, [sp, #8]
   14a50:	strd	r2, [sp, #56]	; 0x38
   14a54:	ldrd	r2, [sp, #16]
   14a58:	strd	r2, [sp, #64]	; 0x40
   14a5c:	ldrd	r2, [sp, #24]
   14a60:	strd	r2, [sp, #72]	; 0x48
   14a64:	ldrd	r2, [sp, #32]
   14a68:	strd	r2, [sp, #80]	; 0x50
   14a6c:	ldrd	r2, [sp, #40]	; 0x28
   14a70:	strd	r2, [sp, #88]	; 0x58
   14a74:	mov	r2, #1
   14a78:	mov	r1, #58	; 0x3a
   14a7c:	add	r0, sp, #48	; 0x30
   14a80:	bl	144c8 <__assert_fail@plt+0x35c8>
   14a84:	add	r3, sp, #48	; 0x30
   14a88:	mvn	r2, #0
   14a8c:	mov	r1, r5
   14a90:	mov	r0, r4
   14a94:	bl	14254 <__assert_fail@plt+0x3354>
   14a98:	add	sp, sp, #100	; 0x64
   14a9c:	ldrd	r4, [sp]
   14aa0:	add	sp, sp, #8
   14aa4:	pop	{pc}		; (ldr pc, [sp], #4)
   14aa8:	strd	r4, [sp, #-20]!	; 0xffffffec
   14aac:	strd	r6, [sp, #8]
   14ab0:	str	lr, [sp, #16]
   14ab4:	sub	sp, sp, #52	; 0x34
   14ab8:	mov	r4, r0
   14abc:	mov	r5, r3
   14ac0:	ldr	r3, [pc, #92]	; 14b24 <__assert_fail@plt+0x3c24>
   14ac4:	ldrd	r6, [r3]
   14ac8:	strd	r6, [sp]
   14acc:	ldrd	r6, [r3, #8]
   14ad0:	strd	r6, [sp, #8]
   14ad4:	ldrd	r6, [r3, #16]
   14ad8:	strd	r6, [sp, #16]
   14adc:	ldrd	r6, [r3, #24]
   14ae0:	strd	r6, [sp, #24]
   14ae4:	ldrd	r6, [r3, #32]
   14ae8:	strd	r6, [sp, #32]
   14aec:	ldrd	r6, [r3, #40]	; 0x28
   14af0:	strd	r6, [sp, #40]	; 0x28
   14af4:	mov	r0, sp
   14af8:	bl	14524 <__assert_fail@plt+0x3624>
   14afc:	mov	r3, sp
   14b00:	ldr	r2, [sp, #72]	; 0x48
   14b04:	mov	r1, r5
   14b08:	mov	r0, r4
   14b0c:	bl	14254 <__assert_fail@plt+0x3354>
   14b10:	add	sp, sp, #52	; 0x34
   14b14:	ldrd	r4, [sp]
   14b18:	ldrd	r6, [sp, #8]
   14b1c:	add	sp, sp, #16
   14b20:	pop	{pc}		; (ldr pc, [sp], #4)
   14b24:	andeq	r7, r2, r4, ror #4
   14b28:	push	{lr}		; (str lr, [sp, #-4]!)
   14b2c:	sub	sp, sp, #12
   14b30:	mvn	ip, #0
   14b34:	str	ip, [sp]
   14b38:	bl	14aa8 <__assert_fail@plt+0x3ba8>
   14b3c:	add	sp, sp, #12
   14b40:	pop	{pc}		; (ldr pc, [sp], #4)
   14b44:	str	r4, [sp, #-8]!
   14b48:	str	lr, [sp, #4]
   14b4c:	mov	r3, r2
   14b50:	mov	r2, r1
   14b54:	mov	r1, r0
   14b58:	mov	r0, #0
   14b5c:	bl	14b28 <__assert_fail@plt+0x3c28>
   14b60:	ldr	r4, [sp]
   14b64:	add	sp, sp, #4
   14b68:	pop	{pc}		; (ldr pc, [sp], #4)
   14b6c:	push	{lr}		; (str lr, [sp, #-4]!)
   14b70:	sub	sp, sp, #12
   14b74:	str	r3, [sp]
   14b78:	mov	r3, r2
   14b7c:	mov	r2, r1
   14b80:	mov	r1, r0
   14b84:	mov	r0, #0
   14b88:	bl	14aa8 <__assert_fail@plt+0x3ba8>
   14b8c:	add	sp, sp, #12
   14b90:	pop	{pc}		; (ldr pc, [sp], #4)
   14b94:	str	r4, [sp, #-8]!
   14b98:	str	lr, [sp, #4]
   14b9c:	ldr	r3, [pc, #12]	; 14bb0 <__assert_fail@plt+0x3cb0>
   14ba0:	bl	14254 <__assert_fail@plt+0x3354>
   14ba4:	ldr	r4, [sp]
   14ba8:	add	sp, sp, #4
   14bac:	pop	{pc}		; (ldr pc, [sp], #4)
   14bb0:	andeq	r7, r2, r0, lsl #2
   14bb4:	str	r4, [sp, #-8]!
   14bb8:	str	lr, [sp, #4]
   14bbc:	mov	r2, r1
   14bc0:	mov	r1, r0
   14bc4:	mov	r0, #0
   14bc8:	bl	14b94 <__assert_fail@plt+0x3c94>
   14bcc:	ldr	r4, [sp]
   14bd0:	add	sp, sp, #4
   14bd4:	pop	{pc}		; (ldr pc, [sp], #4)
   14bd8:	str	r4, [sp, #-8]!
   14bdc:	str	lr, [sp, #4]
   14be0:	mvn	r2, #0
   14be4:	bl	14b94 <__assert_fail@plt+0x3c94>
   14be8:	ldr	r4, [sp]
   14bec:	add	sp, sp, #4
   14bf0:	pop	{pc}		; (ldr pc, [sp], #4)
   14bf4:	str	r4, [sp, #-8]!
   14bf8:	str	lr, [sp, #4]
   14bfc:	mov	r1, r0
   14c00:	mov	r0, #0
   14c04:	bl	14bd8 <__assert_fail@plt+0x3cd8>
   14c08:	ldr	r4, [sp]
   14c0c:	add	sp, sp, #4
   14c10:	pop	{pc}		; (ldr pc, [sp], #4)
   14c14:	strd	r4, [sp, #-16]!
   14c18:	str	r6, [sp, #8]
   14c1c:	str	lr, [sp, #12]
   14c20:	sub	sp, sp, #32
   14c24:	mov	r4, r0
   14c28:	ldr	r5, [sp, #48]	; 0x30
   14c2c:	ldr	r6, [sp, #52]	; 0x34
   14c30:	cmp	r1, #0
   14c34:	beq	14d00 <__assert_fail@plt+0x3e00>
   14c38:	str	r3, [sp, #4]
   14c3c:	str	r2, [sp]
   14c40:	mov	r3, r1
   14c44:	movw	r2, #27380	; 0x6af4
   14c48:	movt	r2, #1
   14c4c:	mov	r1, #1
   14c50:	bl	10e58 <__fprintf_chk@plt>
   14c54:	mov	r2, #5
   14c58:	movw	r1, #27400	; 0x6b08
   14c5c:	movt	r1, #1
   14c60:	mov	r0, #0
   14c64:	bl	10d38 <dcgettext@plt>
   14c68:	movw	r3, #2022	; 0x7e6
   14c6c:	str	r3, [sp]
   14c70:	mov	r3, r0
   14c74:	movw	r2, #28128	; 0x6de0
   14c78:	movt	r2, #1
   14c7c:	mov	r1, #1
   14c80:	mov	r0, r4
   14c84:	bl	10e58 <__fprintf_chk@plt>
   14c88:	mov	r1, r4
   14c8c:	mov	r0, #10
   14c90:	bl	10d2c <fputc_unlocked@plt>
   14c94:	mov	r2, #5
   14c98:	movw	r1, #27404	; 0x6b0c
   14c9c:	movt	r1, #1
   14ca0:	mov	r0, #0
   14ca4:	bl	10d38 <dcgettext@plt>
   14ca8:	movw	r3, #27576	; 0x6bb8
   14cac:	movt	r3, #1
   14cb0:	mov	r2, r0
   14cb4:	mov	r1, #1
   14cb8:	mov	r0, r4
   14cbc:	bl	10e58 <__fprintf_chk@plt>
   14cc0:	mov	r1, r4
   14cc4:	mov	r0, #10
   14cc8:	bl	10d2c <fputc_unlocked@plt>
   14ccc:	cmp	r6, #9
   14cd0:	ldrls	pc, [pc, r6, lsl #2]
   14cd4:	b	14fd8 <__assert_fail@plt+0x40d8>
   14cd8:	andeq	r4, r1, r4, asr #26
   14cdc:	andeq	r4, r1, ip, lsl sp
   14ce0:	andeq	r4, r1, r8, asr sp
   14ce4:	andeq	r4, r1, ip, lsl #27
   14ce8:	andeq	r4, r1, r8, asr #27
   14cec:	andeq	r4, r1, ip, lsl #28
   14cf0:	andeq	r4, r1, r8, asr lr
   14cf4:	andeq	r4, r1, ip, lsr #29
   14cf8:	andeq	r4, r1, r8, lsl #30
   14cfc:	andeq	r4, r1, ip, ror #30
   14d00:	str	r3, [sp]
   14d04:	mov	r3, r2
   14d08:	movw	r2, #27392	; 0x6b00
   14d0c:	movt	r2, #1
   14d10:	mov	r1, #1
   14d14:	bl	10e58 <__fprintf_chk@plt>
   14d18:	b	14c54 <__assert_fail@plt+0x3d54>
   14d1c:	mov	r2, #5
   14d20:	movw	r1, #27612	; 0x6bdc
   14d24:	movt	r1, #1
   14d28:	mov	r0, #0
   14d2c:	bl	10d38 <dcgettext@plt>
   14d30:	ldr	r3, [r5]
   14d34:	mov	r2, r0
   14d38:	mov	r1, #1
   14d3c:	mov	r0, r4
   14d40:	bl	10e58 <__fprintf_chk@plt>
   14d44:	add	sp, sp, #32
   14d48:	ldrd	r4, [sp]
   14d4c:	ldr	r6, [sp, #8]
   14d50:	add	sp, sp, #12
   14d54:	pop	{pc}		; (ldr pc, [sp], #4)
   14d58:	mov	r2, #5
   14d5c:	movw	r1, #27628	; 0x6bec
   14d60:	movt	r1, #1
   14d64:	mov	r0, #0
   14d68:	bl	10d38 <dcgettext@plt>
   14d6c:	ldr	r3, [r5, #4]
   14d70:	str	r3, [sp]
   14d74:	ldr	r3, [r5]
   14d78:	mov	r2, r0
   14d7c:	mov	r1, #1
   14d80:	mov	r0, r4
   14d84:	bl	10e58 <__fprintf_chk@plt>
   14d88:	b	14d44 <__assert_fail@plt+0x3e44>
   14d8c:	mov	r2, #5
   14d90:	movw	r1, #27652	; 0x6c04
   14d94:	movt	r1, #1
   14d98:	mov	r0, #0
   14d9c:	bl	10d38 <dcgettext@plt>
   14da0:	ldr	r3, [r5, #8]
   14da4:	str	r3, [sp, #4]
   14da8:	ldr	r3, [r5, #4]
   14dac:	str	r3, [sp]
   14db0:	ldr	r3, [r5]
   14db4:	mov	r2, r0
   14db8:	mov	r1, #1
   14dbc:	mov	r0, r4
   14dc0:	bl	10e58 <__fprintf_chk@plt>
   14dc4:	b	14d44 <__assert_fail@plt+0x3e44>
   14dc8:	mov	r2, #5
   14dcc:	movw	r1, #27680	; 0x6c20
   14dd0:	movt	r1, #1
   14dd4:	mov	r0, #0
   14dd8:	bl	10d38 <dcgettext@plt>
   14ddc:	ldr	r3, [r5, #12]
   14de0:	str	r3, [sp, #8]
   14de4:	ldr	r3, [r5, #8]
   14de8:	str	r3, [sp, #4]
   14dec:	ldr	r3, [r5, #4]
   14df0:	str	r3, [sp]
   14df4:	ldr	r3, [r5]
   14df8:	mov	r2, r0
   14dfc:	mov	r1, #1
   14e00:	mov	r0, r4
   14e04:	bl	10e58 <__fprintf_chk@plt>
   14e08:	b	14d44 <__assert_fail@plt+0x3e44>
   14e0c:	mov	r2, #5
   14e10:	movw	r1, #27712	; 0x6c40
   14e14:	movt	r1, #1
   14e18:	mov	r0, #0
   14e1c:	bl	10d38 <dcgettext@plt>
   14e20:	ldr	r3, [r5, #16]
   14e24:	str	r3, [sp, #12]
   14e28:	ldr	r3, [r5, #12]
   14e2c:	str	r3, [sp, #8]
   14e30:	ldr	r3, [r5, #8]
   14e34:	str	r3, [sp, #4]
   14e38:	ldr	r3, [r5, #4]
   14e3c:	str	r3, [sp]
   14e40:	ldr	r3, [r5]
   14e44:	mov	r2, r0
   14e48:	mov	r1, #1
   14e4c:	mov	r0, r4
   14e50:	bl	10e58 <__fprintf_chk@plt>
   14e54:	b	14d44 <__assert_fail@plt+0x3e44>
   14e58:	mov	r2, #5
   14e5c:	movw	r1, #27748	; 0x6c64
   14e60:	movt	r1, #1
   14e64:	mov	r0, #0
   14e68:	bl	10d38 <dcgettext@plt>
   14e6c:	ldr	r3, [r5, #20]
   14e70:	str	r3, [sp, #16]
   14e74:	ldr	r3, [r5, #16]
   14e78:	str	r3, [sp, #12]
   14e7c:	ldr	r3, [r5, #12]
   14e80:	str	r3, [sp, #8]
   14e84:	ldr	r3, [r5, #8]
   14e88:	str	r3, [sp, #4]
   14e8c:	ldr	r3, [r5, #4]
   14e90:	str	r3, [sp]
   14e94:	ldr	r3, [r5]
   14e98:	mov	r2, r0
   14e9c:	mov	r1, #1
   14ea0:	mov	r0, r4
   14ea4:	bl	10e58 <__fprintf_chk@plt>
   14ea8:	b	14d44 <__assert_fail@plt+0x3e44>
   14eac:	mov	r2, #5
   14eb0:	movw	r1, #27788	; 0x6c8c
   14eb4:	movt	r1, #1
   14eb8:	mov	r0, #0
   14ebc:	bl	10d38 <dcgettext@plt>
   14ec0:	ldr	r3, [r5, #24]
   14ec4:	str	r3, [sp, #20]
   14ec8:	ldr	r3, [r5, #20]
   14ecc:	str	r3, [sp, #16]
   14ed0:	ldr	r3, [r5, #16]
   14ed4:	str	r3, [sp, #12]
   14ed8:	ldr	r3, [r5, #12]
   14edc:	str	r3, [sp, #8]
   14ee0:	ldr	r3, [r5, #8]
   14ee4:	str	r3, [sp, #4]
   14ee8:	ldr	r3, [r5, #4]
   14eec:	str	r3, [sp]
   14ef0:	ldr	r3, [r5]
   14ef4:	mov	r2, r0
   14ef8:	mov	r1, #1
   14efc:	mov	r0, r4
   14f00:	bl	10e58 <__fprintf_chk@plt>
   14f04:	b	14d44 <__assert_fail@plt+0x3e44>
   14f08:	mov	r2, #5
   14f0c:	movw	r1, #27832	; 0x6cb8
   14f10:	movt	r1, #1
   14f14:	mov	r0, #0
   14f18:	bl	10d38 <dcgettext@plt>
   14f1c:	ldr	r3, [r5, #28]
   14f20:	str	r3, [sp, #24]
   14f24:	ldr	r3, [r5, #24]
   14f28:	str	r3, [sp, #20]
   14f2c:	ldr	r3, [r5, #20]
   14f30:	str	r3, [sp, #16]
   14f34:	ldr	r3, [r5, #16]
   14f38:	str	r3, [sp, #12]
   14f3c:	ldr	r3, [r5, #12]
   14f40:	str	r3, [sp, #8]
   14f44:	ldr	r3, [r5, #8]
   14f48:	str	r3, [sp, #4]
   14f4c:	ldr	r3, [r5, #4]
   14f50:	str	r3, [sp]
   14f54:	ldr	r3, [r5]
   14f58:	mov	r2, r0
   14f5c:	mov	r1, #1
   14f60:	mov	r0, r4
   14f64:	bl	10e58 <__fprintf_chk@plt>
   14f68:	b	14d44 <__assert_fail@plt+0x3e44>
   14f6c:	mov	r2, #5
   14f70:	movw	r1, #27880	; 0x6ce8
   14f74:	movt	r1, #1
   14f78:	mov	r0, #0
   14f7c:	bl	10d38 <dcgettext@plt>
   14f80:	ldr	r3, [r5, #32]
   14f84:	str	r3, [sp, #28]
   14f88:	ldr	r3, [r5, #28]
   14f8c:	str	r3, [sp, #24]
   14f90:	ldr	r3, [r5, #24]
   14f94:	str	r3, [sp, #20]
   14f98:	ldr	r3, [r5, #20]
   14f9c:	str	r3, [sp, #16]
   14fa0:	ldr	r3, [r5, #16]
   14fa4:	str	r3, [sp, #12]
   14fa8:	ldr	r3, [r5, #12]
   14fac:	str	r3, [sp, #8]
   14fb0:	ldr	r3, [r5, #8]
   14fb4:	str	r3, [sp, #4]
   14fb8:	ldr	r3, [r5, #4]
   14fbc:	str	r3, [sp]
   14fc0:	ldr	r3, [r5]
   14fc4:	mov	r2, r0
   14fc8:	mov	r1, #1
   14fcc:	mov	r0, r4
   14fd0:	bl	10e58 <__fprintf_chk@plt>
   14fd4:	b	14d44 <__assert_fail@plt+0x3e44>
   14fd8:	mov	r2, #5
   14fdc:	movw	r1, #27932	; 0x6d1c
   14fe0:	movt	r1, #1
   14fe4:	mov	r0, #0
   14fe8:	bl	10d38 <dcgettext@plt>
   14fec:	ldr	r3, [r5, #32]
   14ff0:	str	r3, [sp, #28]
   14ff4:	ldr	r3, [r5, #28]
   14ff8:	str	r3, [sp, #24]
   14ffc:	ldr	r3, [r5, #24]
   15000:	str	r3, [sp, #20]
   15004:	ldr	r3, [r5, #20]
   15008:	str	r3, [sp, #16]
   1500c:	ldr	r3, [r5, #16]
   15010:	str	r3, [sp, #12]
   15014:	ldr	r3, [r5, #12]
   15018:	str	r3, [sp, #8]
   1501c:	ldr	r3, [r5, #8]
   15020:	str	r3, [sp, #4]
   15024:	ldr	r3, [r5, #4]
   15028:	str	r3, [sp]
   1502c:	ldr	r3, [r5]
   15030:	mov	r2, r0
   15034:	mov	r1, #1
   15038:	mov	r0, r4
   1503c:	bl	10e58 <__fprintf_chk@plt>
   15040:	b	14d44 <__assert_fail@plt+0x3e44>
   15044:	strd	r4, [sp, #-12]!
   15048:	str	lr, [sp, #8]
   1504c:	sub	sp, sp, #12
   15050:	ldr	r5, [sp, #24]
   15054:	ldr	ip, [r5]
   15058:	cmp	ip, #0
   1505c:	beq	15094 <__assert_fail@plt+0x4194>
   15060:	mov	lr, r5
   15064:	mov	ip, #0
   15068:	add	ip, ip, #1
   1506c:	ldr	r4, [lr, #4]!
   15070:	cmp	r4, #0
   15074:	bne	15068 <__assert_fail@plt+0x4168>
   15078:	str	ip, [sp, #4]
   1507c:	str	r5, [sp]
   15080:	bl	14c14 <__assert_fail@plt+0x3d14>
   15084:	add	sp, sp, #12
   15088:	ldrd	r4, [sp]
   1508c:	add	sp, sp, #8
   15090:	pop	{pc}		; (ldr pc, [sp], #4)
   15094:	mov	ip, #0
   15098:	b	15078 <__assert_fail@plt+0x4178>
   1509c:	strd	r4, [sp, #-12]!
   150a0:	str	lr, [sp, #8]
   150a4:	sub	sp, sp, #52	; 0x34
   150a8:	ldr	r5, [sp, #64]	; 0x40
   150ac:	add	r4, sp, #8
   150b0:	mov	ip, #0
   150b4:	ldr	lr, [r5], #4
   150b8:	str	lr, [r4], #4
   150bc:	cmp	lr, #0
   150c0:	beq	150d0 <__assert_fail@plt+0x41d0>
   150c4:	add	ip, ip, #1
   150c8:	cmp	ip, #10
   150cc:	bne	150b4 <__assert_fail@plt+0x41b4>
   150d0:	str	ip, [sp, #4]
   150d4:	add	ip, sp, #8
   150d8:	str	ip, [sp]
   150dc:	bl	14c14 <__assert_fail@plt+0x3d14>
   150e0:	add	sp, sp, #52	; 0x34
   150e4:	ldrd	r4, [sp]
   150e8:	add	sp, sp, #8
   150ec:	pop	{pc}		; (ldr pc, [sp], #4)
   150f0:	push	{r3}		; (str r3, [sp, #-4]!)
   150f4:	push	{lr}		; (str lr, [sp, #-4]!)
   150f8:	sub	sp, sp, #16
   150fc:	add	r3, sp, #24
   15100:	str	r3, [sp, #12]
   15104:	str	r3, [sp]
   15108:	ldr	r3, [sp, #20]
   1510c:	bl	1509c <__assert_fail@plt+0x419c>
   15110:	add	sp, sp, #16
   15114:	pop	{lr}		; (ldr lr, [sp], #4)
   15118:	add	sp, sp, #4
   1511c:	bx	lr
   15120:	str	r4, [sp, #-8]!
   15124:	str	lr, [sp, #4]
   15128:	movw	r3, #29004	; 0x714c
   1512c:	movt	r3, #2
   15130:	ldr	r1, [r3]
   15134:	mov	r0, #10
   15138:	bl	10d2c <fputc_unlocked@plt>
   1513c:	mov	r2, #5
   15140:	movw	r1, #27992	; 0x6d58
   15144:	movt	r1, #1
   15148:	mov	r0, #0
   1514c:	bl	10d38 <dcgettext@plt>
   15150:	movw	r2, #28012	; 0x6d6c
   15154:	movt	r2, #1
   15158:	mov	r1, r0
   1515c:	mov	r0, #1
   15160:	bl	10e40 <__printf_chk@plt>
   15164:	mov	r2, #5
   15168:	movw	r1, #28036	; 0x6d84
   1516c:	movt	r1, #1
   15170:	mov	r0, #0
   15174:	bl	10d38 <dcgettext@plt>
   15178:	movw	r3, #26288	; 0x66b0
   1517c:	movt	r3, #1
   15180:	movw	r2, #26328	; 0x66d8
   15184:	movt	r2, #1
   15188:	mov	r1, r0
   1518c:	mov	r0, #1
   15190:	bl	10e40 <__printf_chk@plt>
   15194:	mov	r2, #5
   15198:	movw	r1, #28056	; 0x6d98
   1519c:	movt	r1, #1
   151a0:	mov	r0, #0
   151a4:	bl	10d38 <dcgettext@plt>
   151a8:	movw	r2, #28096	; 0x6dc0
   151ac:	movt	r2, #1
   151b0:	mov	r1, r0
   151b4:	mov	r0, #1
   151b8:	bl	10e40 <__printf_chk@plt>
   151bc:	ldr	r4, [sp]
   151c0:	add	sp, sp, #4
   151c4:	pop	{pc}		; (ldr pc, [sp], #4)
   151c8:	str	r4, [sp, #-8]!
   151cc:	str	lr, [sp, #4]
   151d0:	bl	15ea8 <__assert_fail@plt+0x4fa8>
   151d4:	cmp	r0, #0
   151d8:	beq	151e8 <__assert_fail@plt+0x42e8>
   151dc:	ldr	r4, [sp]
   151e0:	add	sp, sp, #4
   151e4:	pop	{pc}		; (ldr pc, [sp], #4)
   151e8:	bl	1565c <__assert_fail@plt+0x475c>
   151ec:	str	r4, [sp, #-8]!
   151f0:	str	lr, [sp, #4]
   151f4:	bl	15ea8 <__assert_fail@plt+0x4fa8>
   151f8:	cmp	r0, #0
   151fc:	beq	1520c <__assert_fail@plt+0x430c>
   15200:	ldr	r4, [sp]
   15204:	add	sp, sp, #4
   15208:	pop	{pc}		; (ldr pc, [sp], #4)
   1520c:	bl	1565c <__assert_fail@plt+0x475c>
   15210:	str	r4, [sp, #-8]!
   15214:	str	lr, [sp, #4]
   15218:	bl	151c8 <__assert_fail@plt+0x42c8>
   1521c:	ldr	r4, [sp]
   15220:	add	sp, sp, #4
   15224:	pop	{pc}		; (ldr pc, [sp], #4)
   15228:	strd	r4, [sp, #-16]!
   1522c:	str	r6, [sp, #8]
   15230:	str	lr, [sp, #12]
   15234:	mov	r5, r0
   15238:	mov	r4, r1
   1523c:	bl	15ee4 <__assert_fail@plt+0x4fe4>
   15240:	cmp	r0, #0
   15244:	beq	15258 <__assert_fail@plt+0x4358>
   15248:	ldrd	r4, [sp]
   1524c:	ldr	r6, [sp, #8]
   15250:	add	sp, sp, #12
   15254:	pop	{pc}		; (ldr pc, [sp], #4)
   15258:	adds	r4, r4, #0
   1525c:	movne	r4, #1
   15260:	cmp	r5, #0
   15264:	moveq	r4, #1
   15268:	cmp	r4, #0
   1526c:	beq	15248 <__assert_fail@plt+0x4348>
   15270:	bl	1565c <__assert_fail@plt+0x475c>
   15274:	str	r4, [sp, #-8]!
   15278:	str	lr, [sp, #4]
   1527c:	cmp	r1, #0
   15280:	orreq	r1, r1, #1
   15284:	bl	15ee4 <__assert_fail@plt+0x4fe4>
   15288:	cmp	r0, #0
   1528c:	beq	1529c <__assert_fail@plt+0x439c>
   15290:	ldr	r4, [sp]
   15294:	add	sp, sp, #4
   15298:	pop	{pc}		; (ldr pc, [sp], #4)
   1529c:	bl	1565c <__assert_fail@plt+0x475c>
   152a0:	strd	r4, [sp, #-16]!
   152a4:	str	r6, [sp, #8]
   152a8:	str	lr, [sp, #12]
   152ac:	mov	r4, r0
   152b0:	mov	r6, r1
   152b4:	mov	r5, r2
   152b8:	bl	16080 <__assert_fail@plt+0x5180>
   152bc:	cmp	r0, #0
   152c0:	beq	152d4 <__assert_fail@plt+0x43d4>
   152c4:	ldrd	r4, [sp]
   152c8:	ldr	r6, [sp, #8]
   152cc:	add	sp, sp, #12
   152d0:	pop	{pc}		; (ldr pc, [sp], #4)
   152d4:	cmp	r4, #0
   152d8:	beq	152e8 <__assert_fail@plt+0x43e8>
   152dc:	cmp	r6, #0
   152e0:	cmpne	r5, #0
   152e4:	beq	152c4 <__assert_fail@plt+0x43c4>
   152e8:	bl	1565c <__assert_fail@plt+0x475c>
   152ec:	str	r4, [sp, #-8]!
   152f0:	str	lr, [sp, #4]
   152f4:	bl	152a0 <__assert_fail@plt+0x43a0>
   152f8:	ldr	r4, [sp]
   152fc:	add	sp, sp, #4
   15300:	pop	{pc}		; (ldr pc, [sp], #4)
   15304:	str	r4, [sp, #-8]!
   15308:	str	lr, [sp, #4]
   1530c:	mov	ip, r1
   15310:	mov	r3, r2
   15314:	cmp	r2, #0
   15318:	cmpne	r1, #0
   1531c:	moveq	r3, #1
   15320:	moveq	ip, r3
   15324:	mov	r2, r3
   15328:	mov	r1, ip
   1532c:	bl	16080 <__assert_fail@plt+0x5180>
   15330:	cmp	r0, #0
   15334:	beq	15344 <__assert_fail@plt+0x4444>
   15338:	ldr	r4, [sp]
   1533c:	add	sp, sp, #4
   15340:	pop	{pc}		; (ldr pc, [sp], #4)
   15344:	bl	1565c <__assert_fail@plt+0x475c>
   15348:	str	r4, [sp, #-8]!
   1534c:	str	lr, [sp, #4]
   15350:	mov	r2, r1
   15354:	mov	r1, r0
   15358:	mov	r0, #0
   1535c:	bl	152a0 <__assert_fail@plt+0x43a0>
   15360:	ldr	r4, [sp]
   15364:	add	sp, sp, #4
   15368:	pop	{pc}		; (ldr pc, [sp], #4)
   1536c:	str	r4, [sp, #-8]!
   15370:	str	lr, [sp, #4]
   15374:	mov	r2, r1
   15378:	mov	r1, r0
   1537c:	mov	r0, #0
   15380:	bl	15304 <__assert_fail@plt+0x4404>
   15384:	ldr	r4, [sp]
   15388:	add	sp, sp, #4
   1538c:	pop	{pc}		; (ldr pc, [sp], #4)
   15390:	strd	r4, [sp, #-16]!
   15394:	str	r6, [sp, #8]
   15398:	str	lr, [sp, #12]
   1539c:	mov	r5, r1
   153a0:	ldr	r4, [r1]
   153a4:	cmp	r0, #0
   153a8:	beq	153d8 <__assert_fail@plt+0x44d8>
   153ac:	lsr	r3, r4, #1
   153b0:	add	r3, r3, #1
   153b4:	adds	r4, r4, r3
   153b8:	bcs	153f4 <__assert_fail@plt+0x44f4>
   153bc:	mov	r1, r4
   153c0:	bl	152a0 <__assert_fail@plt+0x43a0>
   153c4:	str	r4, [r5]
   153c8:	ldrd	r4, [sp]
   153cc:	ldr	r6, [sp, #8]
   153d0:	add	sp, sp, #12
   153d4:	pop	{pc}		; (ldr pc, [sp], #4)
   153d8:	cmp	r4, #0
   153dc:	bne	153bc <__assert_fail@plt+0x44bc>
   153e0:	mov	r4, #64	; 0x40
   153e4:	udiv	r4, r4, r2
   153e8:	cmp	r2, #64	; 0x40
   153ec:	addhi	r4, r4, #1
   153f0:	b	153bc <__assert_fail@plt+0x44bc>
   153f4:	bl	1565c <__assert_fail@plt+0x475c>
   153f8:	str	r4, [sp, #-8]!
   153fc:	str	lr, [sp, #4]
   15400:	mov	r2, #1
   15404:	bl	15390 <__assert_fail@plt+0x4490>
   15408:	ldr	r4, [sp]
   1540c:	add	sp, sp, #4
   15410:	pop	{pc}		; (ldr pc, [sp], #4)
   15414:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15418:	strd	r6, [sp, #8]
   1541c:	str	r8, [sp, #16]
   15420:	str	lr, [sp, #20]
   15424:	mov	r5, r1
   15428:	ldr	lr, [sp, #24]
   1542c:	ldr	ip, [r1]
   15430:	asr	r4, ip, #1
   15434:	adds	r4, ip, r4
   15438:	movvs	r1, #1
   1543c:	movvc	r1, #0
   15440:	cmp	r1, #0
   15444:	mvnne	r4, #-2147483648	; 0x80000000
   15448:	mvn	r8, r3
   1544c:	lsr	r8, r8, #31
   15450:	cmp	r3, r4
   15454:	movge	r1, #0
   15458:	andlt	r1, r8, #1
   1545c:	cmp	r1, #0
   15460:	movne	r4, r3
   15464:	smull	r6, r7, r4, lr
   15468:	asr	r1, r6, #31
   1546c:	cmp	r1, r7
   15470:	bne	15488 <__assert_fail@plt+0x4588>
   15474:	mov	r1, r6
   15478:	cmp	r6, #63	; 0x3f
   1547c:	movle	r1, #64	; 0x40
   15480:	ble	1548c <__assert_fail@plt+0x458c>
   15484:	b	15498 <__assert_fail@plt+0x4598>
   15488:	mvn	r1, #-2147483648	; 0x80000000
   1548c:	sdiv	r4, r1, lr
   15490:	mls	r6, lr, r4, r1
   15494:	sub	r1, r1, r6
   15498:	cmp	r0, #0
   1549c:	moveq	r6, #0
   154a0:	streq	r6, [r5]
   154a4:	sub	r6, r4, ip
   154a8:	cmp	r6, r2
   154ac:	bge	154e4 <__assert_fail@plt+0x45e4>
   154b0:	adds	r2, ip, r2
   154b4:	mov	r4, r2
   154b8:	bvs	15500 <__assert_fail@plt+0x4600>
   154bc:	cmp	r2, r3
   154c0:	movle	r3, #0
   154c4:	andgt	r3, r8, #1
   154c8:	cmp	r3, #0
   154cc:	bne	15500 <__assert_fail@plt+0x4600>
   154d0:	smull	r2, r3, r2, lr
   154d4:	asr	ip, r2, #31
   154d8:	mov	r1, r2
   154dc:	cmp	ip, r3
   154e0:	bne	15500 <__assert_fail@plt+0x4600>
   154e4:	bl	15228 <__assert_fail@plt+0x4328>
   154e8:	str	r4, [r5]
   154ec:	ldrd	r4, [sp]
   154f0:	ldrd	r6, [sp, #8]
   154f4:	ldr	r8, [sp, #16]
   154f8:	add	sp, sp, #20
   154fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15500:	bl	1565c <__assert_fail@plt+0x475c>
   15504:	str	r4, [sp, #-8]!
   15508:	str	lr, [sp, #4]
   1550c:	bl	15e34 <__assert_fail@plt+0x4f34>
   15510:	cmp	r0, #0
   15514:	beq	15524 <__assert_fail@plt+0x4624>
   15518:	ldr	r4, [sp]
   1551c:	add	sp, sp, #4
   15520:	pop	{pc}		; (ldr pc, [sp], #4)
   15524:	bl	1565c <__assert_fail@plt+0x475c>
   15528:	str	r4, [sp, #-8]!
   1552c:	str	lr, [sp, #4]
   15530:	mov	r1, #1
   15534:	bl	15504 <__assert_fail@plt+0x4604>
   15538:	ldr	r4, [sp]
   1553c:	add	sp, sp, #4
   15540:	pop	{pc}		; (ldr pc, [sp], #4)
   15544:	str	r4, [sp, #-8]!
   15548:	str	lr, [sp, #4]
   1554c:	bl	15e34 <__assert_fail@plt+0x4f34>
   15550:	cmp	r0, #0
   15554:	beq	15564 <__assert_fail@plt+0x4664>
   15558:	ldr	r4, [sp]
   1555c:	add	sp, sp, #4
   15560:	pop	{pc}		; (ldr pc, [sp], #4)
   15564:	bl	1565c <__assert_fail@plt+0x475c>
   15568:	str	r4, [sp, #-8]!
   1556c:	str	lr, [sp, #4]
   15570:	mov	r1, #1
   15574:	bl	15544 <__assert_fail@plt+0x4644>
   15578:	ldr	r4, [sp]
   1557c:	add	sp, sp, #4
   15580:	pop	{pc}		; (ldr pc, [sp], #4)
   15584:	strd	r4, [sp, #-16]!
   15588:	str	r6, [sp, #8]
   1558c:	str	lr, [sp, #12]
   15590:	mov	r5, r0
   15594:	mov	r4, r1
   15598:	mov	r0, r1
   1559c:	bl	151c8 <__assert_fail@plt+0x42c8>
   155a0:	mov	r2, r4
   155a4:	mov	r1, r5
   155a8:	bl	10cfc <memcpy@plt>
   155ac:	ldrd	r4, [sp]
   155b0:	ldr	r6, [sp, #8]
   155b4:	add	sp, sp, #12
   155b8:	pop	{pc}		; (ldr pc, [sp], #4)
   155bc:	strd	r4, [sp, #-16]!
   155c0:	str	r6, [sp, #8]
   155c4:	str	lr, [sp, #12]
   155c8:	mov	r5, r0
   155cc:	mov	r4, r1
   155d0:	mov	r0, r1
   155d4:	bl	151ec <__assert_fail@plt+0x42ec>
   155d8:	mov	r2, r4
   155dc:	mov	r1, r5
   155e0:	bl	10cfc <memcpy@plt>
   155e4:	ldrd	r4, [sp]
   155e8:	ldr	r6, [sp, #8]
   155ec:	add	sp, sp, #12
   155f0:	pop	{pc}		; (ldr pc, [sp], #4)
   155f4:	strd	r4, [sp, #-16]!
   155f8:	str	r6, [sp, #8]
   155fc:	str	lr, [sp, #12]
   15600:	mov	r5, r0
   15604:	mov	r4, r1
   15608:	add	r0, r1, #1
   1560c:	bl	151ec <__assert_fail@plt+0x42ec>
   15610:	mov	r2, #0
   15614:	strb	r2, [r0, r4]
   15618:	mov	r2, r4
   1561c:	mov	r1, r5
   15620:	bl	10cfc <memcpy@plt>
   15624:	ldrd	r4, [sp]
   15628:	ldr	r6, [sp, #8]
   1562c:	add	sp, sp, #12
   15630:	pop	{pc}		; (ldr pc, [sp], #4)
   15634:	str	r4, [sp, #-8]!
   15638:	str	lr, [sp, #4]
   1563c:	mov	r4, r0
   15640:	bl	10e04 <strlen@plt>
   15644:	add	r1, r0, #1
   15648:	mov	r0, r4
   1564c:	bl	15584 <__assert_fail@plt+0x4684>
   15650:	ldr	r4, [sp]
   15654:	add	sp, sp, #4
   15658:	pop	{pc}		; (ldr pc, [sp], #4)
   1565c:	str	r4, [sp, #-8]!
   15660:	str	lr, [sp, #4]
   15664:	movw	r3, #28908	; 0x70ec
   15668:	movt	r3, #2
   1566c:	ldr	r4, [r3]
   15670:	mov	r2, #5
   15674:	movw	r1, #28176	; 0x6e10
   15678:	movt	r1, #1
   1567c:	mov	r0, #0
   15680:	bl	10d38 <dcgettext@plt>
   15684:	mov	r3, r0
   15688:	movw	r2, #26548	; 0x67b4
   1568c:	movt	r2, #1
   15690:	mov	r1, #0
   15694:	mov	r0, r4
   15698:	bl	10da4 <error@plt>
   1569c:	bl	10ef4 <abort@plt>
   156a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   156a4:	strd	r6, [sp, #8]
   156a8:	strd	r8, [sp, #16]
   156ac:	strd	sl, [sp, #24]
   156b0:	str	lr, [sp, #32]
   156b4:	sub	sp, sp, #20
   156b8:	cmp	r2, #0
   156bc:	beq	157d4 <__assert_fail@plt+0x48d4>
   156c0:	sub	ip, r2, #1
   156c4:	mov	lr, #0
   156c8:	mov	r2, r1
   156cc:	asr	r3, r1, #31
   156d0:	strd	r2, [sp, #8]
   156d4:	mov	r8, lr
   156d8:	b	1577c <__assert_fail@plt+0x487c>
   156dc:	umull	r4, r5, r2, r1
   156e0:	umull	r6, r7, r1, r3
   156e4:	strd	r6, [sp]
   156e8:	cmp	r3, #0
   156ec:	bge	15708 <__assert_fail@plt+0x4808>
   156f0:	mov	sl, #0
   156f4:	subs	r6, r6, sl
   156f8:	str	r6, [sp]
   156fc:	ldr	r6, [sp, #4]
   15700:	sbc	r6, r6, r1
   15704:	str	r6, [sp, #4]
   15708:	cmp	r1, #0
   1570c:	bge	15728 <__assert_fail@plt+0x4828>
   15710:	ldr	r6, [sp]
   15714:	subs	r6, r6, r2
   15718:	str	r6, [sp]
   1571c:	ldr	r6, [sp, #4]
   15720:	sbc	r6, r6, r3
   15724:	str	r6, [sp, #4]
   15728:	mov	sl, #0
   1572c:	ldr	r6, [sp]
   15730:	adds	r6, r6, r5
   15734:	ldr	r7, [sp, #4]
   15738:	adc	sl, r7, sl
   1573c:	cmp	sl, r6, asr #31
   15740:	bne	1574c <__assert_fail@plt+0x484c>
   15744:	mov	r5, r6
   15748:	b	15798 <__assert_fail@plt+0x4898>
   1574c:	ldr	r4, [sp, #12]
   15750:	mul	r5, r2, r4
   15754:	mla	r6, r1, r3, r5
   15758:	umull	sl, fp, r2, r1
   1575c:	add	r5, r6, fp
   15760:	mov	r4, sl
   15764:	mov	r9, #1
   15768:	b	15798 <__assert_fail@plt+0x4898>
   1576c:	orr	lr, lr, r3
   15770:	sub	ip, ip, #1
   15774:	cmn	ip, #1
   15778:	beq	157d8 <__assert_fail@plt+0x48d8>
   1577c:	ldrd	r2, [r0]
   15780:	mov	r9, r8
   15784:	cmp	r3, r2, asr #31
   15788:	bne	156dc <__assert_fail@plt+0x47dc>
   1578c:	smull	r6, r7, r2, r1
   15790:	mov	r4, r6
   15794:	mov	r5, r7
   15798:	cmp	r9, #0
   1579c:	streq	r4, [r0]
   157a0:	streq	r5, [r0, #4]
   157a4:	moveq	r3, r8
   157a8:	beq	1576c <__assert_fail@plt+0x486c>
   157ac:	cmp	r2, #0
   157b0:	sbcs	r3, r3, #0
   157b4:	mvnge	r2, #0
   157b8:	mvnge	r3, #-2147483648	; 0x80000000
   157bc:	movlt	r2, #0
   157c0:	movlt	r3, #-2147483648	; 0x80000000
   157c4:	str	r2, [r0]
   157c8:	str	r3, [r0, #4]
   157cc:	mov	r3, #1
   157d0:	b	1576c <__assert_fail@plt+0x486c>
   157d4:	mov	lr, #0
   157d8:	mov	r0, lr
   157dc:	add	sp, sp, #20
   157e0:	ldrd	r4, [sp]
   157e4:	ldrd	r6, [sp, #8]
   157e8:	ldrd	r8, [sp, #16]
   157ec:	ldrd	sl, [sp, #24]
   157f0:	add	sp, sp, #32
   157f4:	pop	{pc}		; (ldr pc, [sp], #4)
   157f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   157fc:	strd	r6, [sp, #8]
   15800:	strd	r8, [sp, #16]
   15804:	strd	sl, [sp, #24]
   15808:	str	lr, [sp, #32]
   1580c:	sub	sp, sp, #20
   15810:	cmp	r2, #36	; 0x24
   15814:	bhi	15880 <__assert_fail@plt+0x4980>
   15818:	mov	r5, r0
   1581c:	mov	r4, r1
   15820:	mov	r6, r2
   15824:	mov	r8, r3
   15828:	cmp	r1, #0
   1582c:	addeq	r4, sp, #12
   15830:	bl	10e1c <__errno_location@plt>
   15834:	mov	r7, r0
   15838:	mov	r3, #0
   1583c:	str	r3, [r0]
   15840:	mov	r2, r6
   15844:	mov	r1, r4
   15848:	mov	r0, r5
   1584c:	bl	10eb8 <__strtoll_internal@plt>
   15850:	strd	r0, [sp]
   15854:	ldr	r6, [r4]
   15858:	cmp	r6, r5
   1585c:	beq	158a0 <__assert_fail@plt+0x49a0>
   15860:	ldr	r3, [r7]
   15864:	cmp	r3, #0
   15868:	beq	159c4 <__assert_fail@plt+0x4ac4>
   1586c:	cmp	r3, #34	; 0x22
   15870:	moveq	r5, #1
   15874:	beq	159c8 <__assert_fail@plt+0x4ac8>
   15878:	mov	r5, #4
   1587c:	b	159ec <__assert_fail@plt+0x4aec>
   15880:	movw	r3, #28196	; 0x6e24
   15884:	movt	r3, #1
   15888:	mov	r2, #85	; 0x55
   1588c:	movw	r1, #28208	; 0x6e30
   15890:	movt	r1, #1
   15894:	movw	r0, #28224	; 0x6e40
   15898:	movt	r0, #1
   1589c:	bl	10f00 <__assert_fail@plt>
   158a0:	ldr	r3, [sp, #56]	; 0x38
   158a4:	cmp	r3, #0
   158a8:	beq	15e24 <__assert_fail@plt+0x4f24>
   158ac:	ldrb	r1, [r5]
   158b0:	cmp	r1, #0
   158b4:	moveq	r5, #4
   158b8:	beq	159ec <__assert_fail@plt+0x4aec>
   158bc:	mov	r0, r3
   158c0:	bl	10e10 <strchr@plt>
   158c4:	cmp	r0, #0
   158c8:	beq	15e2c <__assert_fail@plt+0x4f2c>
   158cc:	mov	r2, #1
   158d0:	mov	r3, #0
   158d4:	strd	r2, [sp]
   158d8:	ldrb	r7, [r6]
   158dc:	mov	r5, #0
   158e0:	mov	r1, r7
   158e4:	ldr	r0, [sp, #56]	; 0x38
   158e8:	bl	10e10 <strchr@plt>
   158ec:	cmp	r0, #0
   158f0:	beq	15a0c <__assert_fail@plt+0x4b0c>
   158f4:	sub	r3, r7, #69	; 0x45
   158f8:	cmp	r3, #47	; 0x2f
   158fc:	ldrls	pc, [pc, r3, lsl #2]
   15900:	b	15b58 <__assert_fail@plt+0x4c58>
   15904:	andeq	r5, r1, ip, lsl sl
   15908:	andeq	r5, r1, r8, asr fp
   1590c:	andeq	r5, r1, ip, lsl sl
   15910:	andeq	r5, r1, r8, asr fp
   15914:	andeq	r5, r1, r8, asr fp
   15918:	andeq	r5, r1, r8, asr fp
   1591c:	andeq	r5, r1, ip, lsl sl
   15920:	andeq	r5, r1, r8, asr fp
   15924:	andeq	r5, r1, ip, lsl sl
   15928:	andeq	r5, r1, r8, asr fp
   1592c:	andeq	r5, r1, r8, asr fp
   15930:	andeq	r5, r1, ip, lsl sl
   15934:	andeq	r5, r1, r8, asr fp
   15938:	andeq	r5, r1, r8, asr fp
   1593c:	andeq	r5, r1, r8, asr fp
   15940:	andeq	r5, r1, ip, lsl sl
   15944:	andeq	r5, r1, r8, asr fp
   15948:	andeq	r5, r1, r8, asr fp
   1594c:	andeq	r5, r1, r8, asr fp
   15950:	andeq	r5, r1, r8, asr fp
   15954:	andeq	r5, r1, ip, lsl sl
   15958:	andeq	r5, r1, ip, lsl sl
   1595c:	andeq	r5, r1, r8, asr fp
   15960:	andeq	r5, r1, r8, asr fp
   15964:	andeq	r5, r1, r8, asr fp
   15968:	andeq	r5, r1, r8, asr fp
   1596c:	andeq	r5, r1, r8, asr fp
   15970:	andeq	r5, r1, r8, asr fp
   15974:	andeq	r5, r1, r8, asr fp
   15978:	andeq	r5, r1, r8, asr fp
   1597c:	andeq	r5, r1, r8, asr fp
   15980:	andeq	r5, r1, r8, asr fp
   15984:	andeq	r5, r1, r8, asr fp
   15988:	andeq	r5, r1, r8, asr fp
   1598c:	andeq	r5, r1, ip, lsl sl
   15990:	andeq	r5, r1, r8, asr fp
   15994:	andeq	r5, r1, r8, asr fp
   15998:	andeq	r5, r1, r8, asr fp
   1599c:	andeq	r5, r1, ip, lsl sl
   159a0:	andeq	r5, r1, r8, asr fp
   159a4:	andeq	r5, r1, ip, lsl sl
   159a8:	andeq	r5, r1, r8, asr fp
   159ac:	andeq	r5, r1, r8, asr fp
   159b0:	andeq	r5, r1, r8, asr fp
   159b4:	andeq	r5, r1, r8, asr fp
   159b8:	andeq	r5, r1, r8, asr fp
   159bc:	andeq	r5, r1, r8, asr fp
   159c0:	andeq	r5, r1, ip, lsl sl
   159c4:	mov	r5, #0
   159c8:	ldr	r3, [sp, #56]	; 0x38
   159cc:	cmp	r3, #0
   159d0:	strdeq	r0, [r8]
   159d4:	beq	159ec <__assert_fail@plt+0x4aec>
   159d8:	ldrb	r7, [r6]
   159dc:	cmp	r7, #0
   159e0:	bne	158e0 <__assert_fail@plt+0x49e0>
   159e4:	ldrd	r2, [sp]
   159e8:	strd	r2, [r8]
   159ec:	mov	r0, r5
   159f0:	add	sp, sp, #20
   159f4:	ldrd	r4, [sp]
   159f8:	ldrd	r6, [sp, #8]
   159fc:	ldrd	r8, [sp, #16]
   15a00:	ldrd	sl, [sp, #24]
   15a04:	add	sp, sp, #32
   15a08:	pop	{pc}		; (ldr pc, [sp], #4)
   15a0c:	ldrd	r2, [sp]
   15a10:	strd	r2, [r8]
   15a14:	orr	r5, r5, #2
   15a18:	b	159ec <__assert_fail@plt+0x4aec>
   15a1c:	mov	r1, #48	; 0x30
   15a20:	ldr	r0, [sp, #56]	; 0x38
   15a24:	bl	10e10 <strchr@plt>
   15a28:	cmp	r0, #0
   15a2c:	beq	15b64 <__assert_fail@plt+0x4c64>
   15a30:	ldrb	r3, [r6, #1]
   15a34:	cmp	r3, #68	; 0x44
   15a38:	beq	15b70 <__assert_fail@plt+0x4c70>
   15a3c:	cmp	r3, #105	; 0x69
   15a40:	beq	15b40 <__assert_fail@plt+0x4c40>
   15a44:	cmp	r3, #66	; 0x42
   15a48:	moveq	r6, #2
   15a4c:	movne	r6, #1
   15a50:	moveq	r1, #1000	; 0x3e8
   15a54:	movne	r1, #1024	; 0x400
   15a58:	sub	r7, r7, #66	; 0x42
   15a5c:	cmp	r7, #53	; 0x35
   15a60:	ldrls	pc, [pc, r7, lsl #2]
   15a64:	b	15df0 <__assert_fail@plt+0x4ef0>
   15a68:	andeq	r5, r1, r0, lsr #24
   15a6c:	strdeq	r5, [r1], -r0
   15a70:	strdeq	r5, [r1], -r0
   15a74:	andeq	r5, r1, r4, asr #25
   15a78:	strdeq	r5, [r1], -r0
   15a7c:	ldrdeq	r5, [r1], -r4
   15a80:	strdeq	r5, [r1], -r0
   15a84:	strdeq	r5, [r1], -r0
   15a88:	strdeq	r5, [r1], -r0
   15a8c:	andeq	r5, r1, r4, ror #25
   15a90:	strdeq	r5, [r1], -r0
   15a94:	strdeq	r5, [r1], -r4
   15a98:	strdeq	r5, [r1], -r0
   15a9c:	strdeq	r5, [r1], -r0
   15aa0:	andeq	r5, r1, r4, lsl #26
   15aa4:	strdeq	r5, [r1], -r0
   15aa8:	strdeq	r5, [r1], -r0
   15aac:	strdeq	r5, [r1], -r0
   15ab0:	andeq	r5, r1, r4, lsl sp
   15ab4:	strdeq	r5, [r1], -r0
   15ab8:	strdeq	r5, [r1], -r0
   15abc:	strdeq	r5, [r1], -r0
   15ac0:	strdeq	r5, [r1], -r0
   15ac4:	ldrdeq	r5, [r1], -r0
   15ac8:	andeq	r5, r1, r0, ror #27
   15acc:	strdeq	r5, [r1], -r0
   15ad0:	strdeq	r5, [r1], -r0
   15ad4:	strdeq	r5, [r1], -r0
   15ad8:	strdeq	r5, [r1], -r0
   15adc:	strdeq	r5, [r1], -r0
   15ae0:	strdeq	r5, [r1], -r0
   15ae4:	strdeq	r5, [r1], -r0
   15ae8:	andeq	r5, r1, ip, ror fp
   15aec:	andeq	r5, r1, r0, lsl #28
   15af0:	strdeq	r5, [r1], -r0
   15af4:	strdeq	r5, [r1], -r0
   15af8:	strdeq	r5, [r1], -r0
   15afc:	ldrdeq	r5, [r1], -r4
   15b00:	strdeq	r5, [r1], -r0
   15b04:	strdeq	r5, [r1], -r0
   15b08:	strdeq	r5, [r1], -r0
   15b0c:	andeq	r5, r1, r4, ror #25
   15b10:	strdeq	r5, [r1], -r0
   15b14:	strdeq	r5, [r1], -r4
   15b18:	strdeq	r5, [r1], -r0
   15b1c:	strdeq	r5, [r1], -r0
   15b20:	strdeq	r5, [r1], -r0
   15b24:	strdeq	r5, [r1], -r0
   15b28:	strdeq	r5, [r1], -r0
   15b2c:	strdeq	r5, [r1], -r0
   15b30:	andeq	r5, r1, r4, lsl sp
   15b34:	strdeq	r5, [r1], -r0
   15b38:	strdeq	r5, [r1], -r0
   15b3c:	andeq	r5, r1, r4, lsr #26
   15b40:	ldrb	r3, [r6, #2]
   15b44:	cmp	r3, #66	; 0x42
   15b48:	movne	r6, #1
   15b4c:	moveq	r6, #3
   15b50:	mov	r1, #1024	; 0x400
   15b54:	b	15a58 <__assert_fail@plt+0x4b58>
   15b58:	mov	r6, #1
   15b5c:	mov	r1, #1024	; 0x400
   15b60:	b	15a58 <__assert_fail@plt+0x4b58>
   15b64:	mov	r6, #1
   15b68:	mov	r1, #1024	; 0x400
   15b6c:	b	15a58 <__assert_fail@plt+0x4b58>
   15b70:	mov	r6, #2
   15b74:	mov	r1, #1000	; 0x3e8
   15b78:	b	15a58 <__assert_fail@plt+0x4b58>
   15b7c:	ldrd	r2, [sp]
   15b80:	mov	ip, #0
   15b84:	cmp	r3, r2, asr #31
   15b88:	bne	15bd0 <__assert_fail@plt+0x4cd0>
   15b8c:	lsl	r1, r3, #9
   15b90:	lsl	r0, r2, #9
   15b94:	orr	r1, r1, r2, lsr #23
   15b98:	cmp	ip, #0
   15b9c:	streq	r0, [sp]
   15ba0:	streq	r1, [sp, #4]
   15ba4:	moveq	r0, #0
   15ba8:	beq	15e04 <__assert_fail@plt+0x4f04>
   15bac:	cmp	r2, #0
   15bb0:	sbcs	r3, r3, #0
   15bb4:	mvnge	r2, #0
   15bb8:	mvnge	r3, #-2147483648	; 0x80000000
   15bbc:	movlt	r2, #0
   15bc0:	movlt	r3, #-2147483648	; 0x80000000
   15bc4:	strd	r2, [sp]
   15bc8:	mov	r0, #1
   15bcc:	b	15e04 <__assert_fail@plt+0x4f04>
   15bd0:	mov	lr, #512	; 0x200
   15bd4:	lsr	r7, r2, #23
   15bd8:	lsl	r0, r2, #9
   15bdc:	umull	sl, fp, lr, r3
   15be0:	cmp	r3, #0
   15be4:	bge	15bf4 <__assert_fail@plt+0x4cf4>
   15be8:	mov	r1, #0
   15bec:	subs	sl, sl, r1
   15bf0:	sbc	fp, fp, lr
   15bf4:	mov	r1, #0
   15bf8:	mov	lr, r1
   15bfc:	adds	r1, sl, r7
   15c00:	adc	lr, fp, lr
   15c04:	cmp	lr, r1, asr #31
   15c08:	beq	15b98 <__assert_fail@plt+0x4c98>
   15c0c:	lsl	r1, r3, #9
   15c10:	lsl	r0, r2, #9
   15c14:	orr	r1, r1, r2, lsr #23
   15c18:	mov	ip, #1
   15c1c:	b	15b98 <__assert_fail@plt+0x4c98>
   15c20:	ldrd	r2, [sp]
   15c24:	mov	ip, #0
   15c28:	cmp	r3, r2, asr #31
   15c2c:	bne	15c74 <__assert_fail@plt+0x4d74>
   15c30:	lsl	r1, r3, #10
   15c34:	lsl	r0, r2, #10
   15c38:	orr	r1, r1, r2, lsr #22
   15c3c:	cmp	ip, #0
   15c40:	streq	r0, [sp]
   15c44:	streq	r1, [sp, #4]
   15c48:	moveq	r0, #0
   15c4c:	beq	15e04 <__assert_fail@plt+0x4f04>
   15c50:	cmp	r2, #0
   15c54:	sbcs	r3, r3, #0
   15c58:	mvnge	r2, #0
   15c5c:	mvnge	r3, #-2147483648	; 0x80000000
   15c60:	movlt	r2, #0
   15c64:	movlt	r3, #-2147483648	; 0x80000000
   15c68:	strd	r2, [sp]
   15c6c:	mov	r0, #1
   15c70:	b	15e04 <__assert_fail@plt+0x4f04>
   15c74:	mov	lr, #1024	; 0x400
   15c78:	lsr	r7, r2, #22
   15c7c:	lsl	r0, r2, #10
   15c80:	umull	sl, fp, lr, r3
   15c84:	cmp	r3, #0
   15c88:	bge	15c98 <__assert_fail@plt+0x4d98>
   15c8c:	mov	r1, #0
   15c90:	subs	sl, sl, r1
   15c94:	sbc	fp, fp, lr
   15c98:	mov	r1, #0
   15c9c:	mov	lr, r1
   15ca0:	adds	r1, sl, r7
   15ca4:	adc	lr, fp, lr
   15ca8:	cmp	lr, r1, asr #31
   15cac:	beq	15c3c <__assert_fail@plt+0x4d3c>
   15cb0:	lsl	r1, r3, #10
   15cb4:	lsl	r0, r2, #10
   15cb8:	orr	r1, r1, r2, lsr #22
   15cbc:	mov	ip, #1
   15cc0:	b	15c3c <__assert_fail@plt+0x4d3c>
   15cc4:	mov	r2, #6
   15cc8:	mov	r0, sp
   15ccc:	bl	156a0 <__assert_fail@plt+0x47a0>
   15cd0:	b	15e04 <__assert_fail@plt+0x4f04>
   15cd4:	mov	r2, #3
   15cd8:	mov	r0, sp
   15cdc:	bl	156a0 <__assert_fail@plt+0x47a0>
   15ce0:	b	15e04 <__assert_fail@plt+0x4f04>
   15ce4:	mov	r2, #1
   15ce8:	mov	r0, sp
   15cec:	bl	156a0 <__assert_fail@plt+0x47a0>
   15cf0:	b	15e04 <__assert_fail@plt+0x4f04>
   15cf4:	mov	r2, #2
   15cf8:	mov	r0, sp
   15cfc:	bl	156a0 <__assert_fail@plt+0x47a0>
   15d00:	b	15e04 <__assert_fail@plt+0x4f04>
   15d04:	mov	r2, #5
   15d08:	mov	r0, sp
   15d0c:	bl	156a0 <__assert_fail@plt+0x47a0>
   15d10:	b	15e04 <__assert_fail@plt+0x4f04>
   15d14:	mov	r2, #4
   15d18:	mov	r0, sp
   15d1c:	bl	156a0 <__assert_fail@plt+0x47a0>
   15d20:	b	15e04 <__assert_fail@plt+0x4f04>
   15d24:	ldrd	r2, [sp]
   15d28:	mov	lr, #0
   15d2c:	cmp	r3, r2, asr #31
   15d30:	bne	15d74 <__assert_fail@plt+0x4e74>
   15d34:	adds	r0, r2, r2
   15d38:	adc	r1, r3, r3
   15d3c:	cmp	lr, #0
   15d40:	streq	r0, [sp]
   15d44:	streq	r1, [sp, #4]
   15d48:	moveq	r0, #0
   15d4c:	beq	15e04 <__assert_fail@plt+0x4f04>
   15d50:	cmp	r2, #0
   15d54:	sbcs	r3, r3, #0
   15d58:	mvnge	r2, #0
   15d5c:	mvnge	r3, #-2147483648	; 0x80000000
   15d60:	movlt	r2, #0
   15d64:	movlt	r3, #-2147483648	; 0x80000000
   15d68:	strd	r2, [sp]
   15d6c:	mov	r0, #1
   15d70:	b	15e04 <__assert_fail@plt+0x4f04>
   15d74:	mov	ip, #2
   15d78:	mov	r1, #0
   15d7c:	adds	r7, r2, r2
   15d80:	adc	sl, r1, r1
   15d84:	umull	r0, r1, ip, r3
   15d88:	cmp	r3, #0
   15d8c:	bge	15d9c <__assert_fail@plt+0x4e9c>
   15d90:	mov	r9, #0
   15d94:	subs	r0, r0, r9
   15d98:	sbc	r1, r1, ip
   15d9c:	mov	ip, #0
   15da0:	mov	r9, ip
   15da4:	adds	ip, r0, sl
   15da8:	adc	r9, r1, r9
   15dac:	cmp	r9, ip, asr #31
   15db0:	bne	15dc0 <__assert_fail@plt+0x4ec0>
   15db4:	mov	r0, r7
   15db8:	mov	r1, ip
   15dbc:	b	15d3c <__assert_fail@plt+0x4e3c>
   15dc0:	adds	r0, r2, r2
   15dc4:	adc	r1, r3, r3
   15dc8:	mov	lr, #1
   15dcc:	b	15d3c <__assert_fail@plt+0x4e3c>
   15dd0:	mov	r2, #8
   15dd4:	mov	r0, sp
   15dd8:	bl	156a0 <__assert_fail@plt+0x47a0>
   15ddc:	b	15e04 <__assert_fail@plt+0x4f04>
   15de0:	mov	r2, #7
   15de4:	mov	r0, sp
   15de8:	bl	156a0 <__assert_fail@plt+0x47a0>
   15dec:	b	15e04 <__assert_fail@plt+0x4f04>
   15df0:	ldrd	r2, [sp]
   15df4:	strd	r2, [r8]
   15df8:	orr	r5, r5, #2
   15dfc:	b	159ec <__assert_fail@plt+0x4aec>
   15e00:	mov	r0, #0
   15e04:	orr	r5, r5, r0
   15e08:	ldr	r3, [r4]
   15e0c:	add	r2, r3, r6
   15e10:	str	r2, [r4]
   15e14:	ldrb	r3, [r3, r6]
   15e18:	cmp	r3, #0
   15e1c:	orrne	r5, r5, #2
   15e20:	b	159e4 <__assert_fail@plt+0x4ae4>
   15e24:	mov	r5, #4
   15e28:	b	159ec <__assert_fail@plt+0x4aec>
   15e2c:	mov	r5, #4
   15e30:	b	159ec <__assert_fail@plt+0x4aec>
   15e34:	strd	r4, [sp, #-16]!
   15e38:	str	r6, [sp, #8]
   15e3c:	str	lr, [sp, #12]
   15e40:	cmp	r1, #0
   15e44:	cmpne	r0, #0
   15e48:	beq	15e84 <__assert_fail@plt+0x4f84>
   15e4c:	mov	r2, r0
   15e50:	mov	r3, r1
   15e54:	umull	r4, r5, r0, r1
   15e58:	adds	r1, r5, #0
   15e5c:	movne	r1, #1
   15e60:	cmp	r4, #0
   15e64:	movlt	r1, #1
   15e68:	cmp	r1, #0
   15e6c:	beq	15e8c <__assert_fail@plt+0x4f8c>
   15e70:	bl	10e1c <__errno_location@plt>
   15e74:	mov	r3, #12
   15e78:	str	r3, [r0]
   15e7c:	mov	r0, #0
   15e80:	b	15e98 <__assert_fail@plt+0x4f98>
   15e84:	mov	r3, #1
   15e88:	mov	r2, r3
   15e8c:	mov	r1, r3
   15e90:	mov	r0, r2
   15e94:	bl	10c9c <calloc@plt>
   15e98:	ldrd	r4, [sp]
   15e9c:	ldr	r6, [sp, #8]
   15ea0:	add	sp, sp, #12
   15ea4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ea8:	str	r4, [sp, #-8]!
   15eac:	str	lr, [sp, #4]
   15eb0:	cmp	r0, #0
   15eb4:	beq	15ed0 <__assert_fail@plt+0x4fd0>
   15eb8:	bge	15ed4 <__assert_fail@plt+0x4fd4>
   15ebc:	bl	10e1c <__errno_location@plt>
   15ec0:	mov	r3, #12
   15ec4:	str	r3, [r0]
   15ec8:	mov	r0, #0
   15ecc:	b	15ed8 <__assert_fail@plt+0x4fd8>
   15ed0:	mov	r0, #1
   15ed4:	bl	10db0 <malloc@plt>
   15ed8:	ldr	r4, [sp]
   15edc:	add	sp, sp, #4
   15ee0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ee4:	str	r4, [sp, #-8]!
   15ee8:	str	lr, [sp, #4]
   15eec:	cmp	r0, #0
   15ef0:	beq	15f14 <__assert_fail@plt+0x5014>
   15ef4:	cmp	r1, #0
   15ef8:	beq	15f20 <__assert_fail@plt+0x5020>
   15efc:	cmp	r1, #0
   15f00:	blt	15f2c <__assert_fail@plt+0x502c>
   15f04:	bl	10d44 <realloc@plt>
   15f08:	ldr	r4, [sp]
   15f0c:	add	sp, sp, #4
   15f10:	pop	{pc}		; (ldr pc, [sp], #4)
   15f14:	mov	r0, r1
   15f18:	bl	15ea8 <__assert_fail@plt+0x4fa8>
   15f1c:	b	15f08 <__assert_fail@plt+0x5008>
   15f20:	bl	127d8 <__assert_fail@plt+0x18d8>
   15f24:	mov	r0, #0
   15f28:	b	15f08 <__assert_fail@plt+0x5008>
   15f2c:	bl	10e1c <__errno_location@plt>
   15f30:	mov	r3, #12
   15f34:	str	r3, [r0]
   15f38:	mov	r0, #0
   15f3c:	b	15f08 <__assert_fail@plt+0x5008>
   15f40:	strd	r4, [sp, #-16]!
   15f44:	str	r6, [sp, #8]
   15f48:	str	lr, [sp, #12]
   15f4c:	mov	r5, r0
   15f50:	bl	10d8c <__fpending@plt>
   15f54:	mov	r6, r0
   15f58:	ldr	r4, [r5]
   15f5c:	and	r4, r4, #32
   15f60:	mov	r0, r5
   15f64:	bl	126ac <__assert_fail@plt+0x17ac>
   15f68:	cmp	r4, #0
   15f6c:	bne	15fa0 <__assert_fail@plt+0x50a0>
   15f70:	cmp	r0, #0
   15f74:	beq	15f90 <__assert_fail@plt+0x5090>
   15f78:	cmp	r6, #0
   15f7c:	bne	15fbc <__assert_fail@plt+0x50bc>
   15f80:	bl	10e1c <__errno_location@plt>
   15f84:	ldr	r0, [r0]
   15f88:	subs	r0, r0, #9
   15f8c:	mvnne	r0, #0
   15f90:	ldrd	r4, [sp]
   15f94:	ldr	r6, [sp, #8]
   15f98:	add	sp, sp, #12
   15f9c:	pop	{pc}		; (ldr pc, [sp], #4)
   15fa0:	cmp	r0, #0
   15fa4:	bne	15fc4 <__assert_fail@plt+0x50c4>
   15fa8:	bl	10e1c <__errno_location@plt>
   15fac:	mov	r3, #0
   15fb0:	str	r3, [r0]
   15fb4:	mvn	r0, #0
   15fb8:	b	15f90 <__assert_fail@plt+0x5090>
   15fbc:	mvn	r0, #0
   15fc0:	b	15f90 <__assert_fail@plt+0x5090>
   15fc4:	mvn	r0, #0
   15fc8:	b	15f90 <__assert_fail@plt+0x5090>
   15fcc:	str	r4, [sp, #-8]!
   15fd0:	str	lr, [sp, #4]
   15fd4:	mov	r0, #14
   15fd8:	bl	10eac <nl_langinfo@plt>
   15fdc:	cmp	r0, #0
   15fe0:	beq	16004 <__assert_fail@plt+0x5104>
   15fe4:	ldrb	r2, [r0]
   15fe8:	movw	r3, #28264	; 0x6e68
   15fec:	movt	r3, #1
   15ff0:	cmp	r2, #0
   15ff4:	moveq	r0, r3
   15ff8:	ldr	r4, [sp]
   15ffc:	add	sp, sp, #4
   16000:	pop	{pc}		; (ldr pc, [sp], #4)
   16004:	movw	r0, #28264	; 0x6e68
   16008:	movt	r0, #1
   1600c:	b	15ff8 <__assert_fail@plt+0x50f8>
   16010:	strd	r4, [sp, #-20]!	; 0xffffffec
   16014:	strd	r6, [sp, #8]
   16018:	str	lr, [sp, #16]
   1601c:	sub	sp, sp, #12
   16020:	mov	r7, r1
   16024:	mov	r5, r2
   16028:	subs	r6, r0, #0
   1602c:	addeq	r6, sp, #4
   16030:	mov	r0, r6
   16034:	bl	10d98 <mbrtowc@plt>
   16038:	mov	r4, r0
   1603c:	cmp	r5, #0
   16040:	cmnne	r0, #3
   16044:	bhi	16060 <__assert_fail@plt+0x5160>
   16048:	mov	r0, r4
   1604c:	add	sp, sp, #12
   16050:	ldrd	r4, [sp]
   16054:	ldrd	r6, [sp, #8]
   16058:	add	sp, sp, #16
   1605c:	pop	{pc}		; (ldr pc, [sp], #4)
   16060:	mov	r0, #0
   16064:	bl	160bc <__assert_fail@plt+0x51bc>
   16068:	cmp	r0, #0
   1606c:	bne	16048 <__assert_fail@plt+0x5148>
   16070:	ldrb	r3, [r7]
   16074:	str	r3, [r6]
   16078:	mov	r4, #1
   1607c:	b	16048 <__assert_fail@plt+0x5148>
   16080:	str	r4, [sp, #-8]!
   16084:	str	lr, [sp, #4]
   16088:	umull	r2, r3, r1, r2
   1608c:	cmp	r3, #0
   16090:	bne	160a8 <__assert_fail@plt+0x51a8>
   16094:	mov	r1, r2
   16098:	bl	15ee4 <__assert_fail@plt+0x4fe4>
   1609c:	ldr	r4, [sp]
   160a0:	add	sp, sp, #4
   160a4:	pop	{pc}		; (ldr pc, [sp], #4)
   160a8:	bl	10e1c <__errno_location@plt>
   160ac:	mov	r3, #12
   160b0:	str	r3, [r0]
   160b4:	mov	r0, #0
   160b8:	b	1609c <__assert_fail@plt+0x519c>
   160bc:	push	{lr}		; (str lr, [sp, #-4]!)
   160c0:	sub	sp, sp, #268	; 0x10c
   160c4:	movw	r2, #257	; 0x101
   160c8:	add	r1, sp, #4
   160cc:	bl	16118 <__assert_fail@plt+0x5218>
   160d0:	cmp	r0, #0
   160d4:	movne	r0, #0
   160d8:	bne	16110 <__assert_fail@plt+0x5210>
   160dc:	movw	r1, #28272	; 0x6e70
   160e0:	movt	r1, #1
   160e4:	add	r0, sp, #4
   160e8:	bl	10cb4 <strcmp@plt>
   160ec:	cmp	r0, #0
   160f0:	beq	1610c <__assert_fail@plt+0x520c>
   160f4:	movw	r1, #28276	; 0x6e74
   160f8:	movt	r1, #1
   160fc:	add	r0, sp, #4
   16100:	bl	10cb4 <strcmp@plt>
   16104:	adds	r0, r0, #0
   16108:	movne	r0, #1
   1610c:	and	r0, r0, #1
   16110:	add	sp, sp, #268	; 0x10c
   16114:	pop	{pc}		; (ldr pc, [sp], #4)
   16118:	strd	r4, [sp, #-16]!
   1611c:	str	r6, [sp, #8]
   16120:	str	lr, [sp, #12]
   16124:	mov	r6, r1
   16128:	mov	r4, r2
   1612c:	mov	r1, #0
   16130:	bl	10e94 <setlocale@plt>
   16134:	subs	r5, r0, #0
   16138:	beq	1617c <__assert_fail@plt+0x527c>
   1613c:	mov	r0, r5
   16140:	bl	10e04 <strlen@plt>
   16144:	cmp	r4, r0
   16148:	bhi	16198 <__assert_fail@plt+0x5298>
   1614c:	cmp	r4, #0
   16150:	moveq	r0, #34	; 0x22
   16154:	beq	161ac <__assert_fail@plt+0x52ac>
   16158:	sub	r4, r4, #1
   1615c:	mov	r2, r4
   16160:	mov	r1, r5
   16164:	mov	r0, r6
   16168:	bl	10cfc <memcpy@plt>
   1616c:	mov	r3, #0
   16170:	strb	r3, [r6, r4]
   16174:	mov	r0, #34	; 0x22
   16178:	b	161ac <__assert_fail@plt+0x52ac>
   1617c:	cmp	r4, #0
   16180:	moveq	r0, #22
   16184:	beq	161ac <__assert_fail@plt+0x52ac>
   16188:	mov	r3, #0
   1618c:	strb	r3, [r6]
   16190:	mov	r0, #22
   16194:	b	161ac <__assert_fail@plt+0x52ac>
   16198:	add	r2, r0, #1
   1619c:	mov	r1, r5
   161a0:	mov	r0, r6
   161a4:	bl	10cfc <memcpy@plt>
   161a8:	mov	r0, #0
   161ac:	ldrd	r4, [sp]
   161b0:	ldr	r6, [sp, #8]
   161b4:	add	sp, sp, #12
   161b8:	pop	{pc}		; (ldr pc, [sp], #4)
   161bc:	str	r4, [sp, #-8]!
   161c0:	str	lr, [sp, #4]
   161c4:	mov	r1, #0
   161c8:	bl	10e94 <setlocale@plt>
   161cc:	ldr	r4, [sp]
   161d0:	add	sp, sp, #4
   161d4:	pop	{pc}		; (ldr pc, [sp], #4)
   161d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   161dc:	mov	r7, r0
   161e0:	ldr	r6, [pc, #72]	; 16230 <__assert_fail@plt+0x5330>
   161e4:	ldr	r5, [pc, #72]	; 16234 <__assert_fail@plt+0x5334>
   161e8:	add	r6, pc, r6
   161ec:	add	r5, pc, r5
   161f0:	sub	r6, r6, r5
   161f4:	mov	r8, r1
   161f8:	mov	r9, r2
   161fc:	bl	10c7c <calloc@plt-0x20>
   16200:	asrs	r6, r6, #2
   16204:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16208:	mov	r4, #0
   1620c:	add	r4, r4, #1
   16210:	ldr	r3, [r5], #4
   16214:	mov	r2, r9
   16218:	mov	r1, r8
   1621c:	mov	r0, r7
   16220:	blx	r3
   16224:	cmp	r6, r4
   16228:	bne	1620c <__assert_fail@plt+0x530c>
   1622c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16230:	andeq	r0, r1, r4, lsr #26
   16234:	andeq	r0, r1, ip, lsl sp
   16238:	bx	lr
   1623c:	ldr	r3, [pc, #12]	; 16250 <__assert_fail@plt+0x5350>
   16240:	mov	r1, #0
   16244:	add	r3, pc, r3
   16248:	ldr	r2, [r3]
   1624c:	b	10e28 <__cxa_atexit@plt>
   16250:	muleq	r1, r8, lr

Disassembly of section .fini:

00016254 <.fini>:
   16254:	push	{r3, lr}
   16258:	pop	{r3, pc}
