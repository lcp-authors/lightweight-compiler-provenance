
../repos/coreutils/src/shred:     file format elf32-littlearm


Disassembly of section .init:

00011334 <.init>:
   11334:	push	{r3, lr}
   11338:	bl	1172c <__assert_fail@plt+0x48>
   1133c:	pop	{r3, pc}

Disassembly of section .plt:

00011340 <fdopen@plt-0x14>:
   11340:	push	{lr}		; (str lr, [sp, #-4]!)
   11344:	ldr	lr, [pc, #4]	; 11350 <fdopen@plt-0x4>
   11348:	add	lr, pc, lr
   1134c:	ldr	pc, [lr, #8]!
   11350:			; <UNDEFINED> instruction: 0x0001acb0

00011354 <fdopen@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #106496	; 0x1a000
   1135c:	ldr	pc, [ip, #3248]!	; 0xcb0

00011360 <calloc@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #106496	; 0x1a000
   11368:	ldr	pc, [ip, #3240]!	; 0xca8

0001136c <fputs_unlocked@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #106496	; 0x1a000
   11374:	ldr	pc, [ip, #3232]!	; 0xca0

00011378 <raise@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #106496	; 0x1a000
   11380:	ldr	pc, [ip, #3224]!	; 0xc98

00011384 <fsync@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #106496	; 0x1a000
   1138c:	ldr	pc, [ip, #3216]!	; 0xc90

00011390 <strcmp@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #106496	; 0x1a000
   11398:	ldr	pc, [ip, #3208]!	; 0xc88

0001139c <fflush@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #106496	; 0x1a000
   113a4:	ldr	pc, [ip, #3200]!	; 0xc80

000113a8 <memmove@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #106496	; 0x1a000
   113b0:	ldr	pc, [ip, #3192]!	; 0xc78

000113b4 <free@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #106496	; 0x1a000
   113bc:	ldr	pc, [ip, #3184]!	; 0xc70

000113c0 <_exit@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #106496	; 0x1a000
   113c8:	ldr	pc, [ip, #3176]!	; 0xc68

000113cc <memcpy@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #106496	; 0x1a000
   113d4:	ldr	pc, [ip, #3168]!	; 0xc60

000113d8 <__strtoull_internal@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #106496	; 0x1a000
   113e0:	ldr	pc, [ip, #3160]!	; 0xc58

000113e4 <mbsinit@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #106496	; 0x1a000
   113ec:	ldr	pc, [ip, #3152]!	; 0xc50

000113f0 <time@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #106496	; 0x1a000
   113f8:	ldr	pc, [ip, #3144]!	; 0xc48

000113fc <ftruncate64@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #106496	; 0x1a000
   11404:	ldr	pc, [ip, #3136]!	; 0xc40

00011408 <memcmp@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #106496	; 0x1a000
   11410:	ldr	pc, [ip, #3128]!	; 0xc38

00011414 <dcgettext@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #106496	; 0x1a000
   1141c:	ldr	pc, [ip, #3120]!	; 0xc30

00011420 <unlink@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #106496	; 0x1a000
   11428:	ldr	pc, [ip, #3112]!	; 0xc28

0001142c <realloc@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #106496	; 0x1a000
   11434:	ldr	pc, [ip, #3104]!	; 0xc20

00011438 <textdomain@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #106496	; 0x1a000
   11440:	ldr	pc, [ip, #3096]!	; 0xc18

00011444 <__fxstatat64@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #106496	; 0x1a000
   1144c:	ldr	pc, [ip, #3088]!	; 0xc10

00011450 <iswprint@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #106496	; 0x1a000
   11458:	ldr	pc, [ip, #3080]!	; 0xc08

0001145c <__fxstat64@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #106496	; 0x1a000
   11464:	ldr	pc, [ip, #3072]!	; 0xc00

00011468 <fwrite@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #106496	; 0x1a000
   11470:	ldr	pc, [ip, #3064]!	; 0xbf8

00011474 <ioctl@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #106496	; 0x1a000
   1147c:	ldr	pc, [ip, #3056]!	; 0xbf0

00011480 <lseek64@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #106496	; 0x1a000
   11488:	ldr	pc, [ip, #3048]!	; 0xbe8

0001148c <__ctype_get_mb_cur_max@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #106496	; 0x1a000
   11494:	ldr	pc, [ip, #3040]!	; 0xbe0

00011498 <__strcpy_chk@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #106496	; 0x1a000
   114a0:	ldr	pc, [ip, #3032]!	; 0xbd8

000114a4 <__fpending@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #106496	; 0x1a000
   114ac:	ldr	pc, [ip, #3024]!	; 0xbd0

000114b0 <mbrtowc@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #106496	; 0x1a000
   114b8:	ldr	pc, [ip, #3016]!	; 0xbc8

000114bc <error@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #106496	; 0x1a000
   114c4:	ldr	pc, [ip, #3008]!	; 0xbc0

000114c8 <open64@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #106496	; 0x1a000
   114d0:	ldr	pc, [ip, #3000]!	; 0xbb8

000114d4 <getenv@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #106496	; 0x1a000
   114dc:	ldr	pc, [ip, #2992]!	; 0xbb0

000114e0 <malloc@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #106496	; 0x1a000
   114e8:	ldr	pc, [ip, #2984]!	; 0xba8

000114ec <__libc_start_main@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #106496	; 0x1a000
   114f4:	ldr	pc, [ip, #2976]!	; 0xba0

000114f8 <__freading@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #106496	; 0x1a000
   11500:	ldr	pc, [ip, #2968]!	; 0xb98

00011504 <__gmon_start__@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #106496	; 0x1a000
   1150c:	ldr	pc, [ip, #2960]!	; 0xb90

00011510 <getopt_long@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #106496	; 0x1a000
   11518:	ldr	pc, [ip, #2952]!	; 0xb88

0001151c <__ctype_b_loc@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #106496	; 0x1a000
   11524:	ldr	pc, [ip, #2944]!	; 0xb80

00011528 <exit@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #106496	; 0x1a000
   11530:	ldr	pc, [ip, #2936]!	; 0xb78

00011534 <strlen@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #106496	; 0x1a000
   1153c:	ldr	pc, [ip, #2928]!	; 0xb70

00011540 <strchr@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #106496	; 0x1a000
   11548:	ldr	pc, [ip, #2920]!	; 0xb68

0001154c <getpagesize@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #106496	; 0x1a000
   11554:	ldr	pc, [ip, #2912]!	; 0xb60

00011558 <__errno_location@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #106496	; 0x1a000
   11560:	ldr	pc, [ip, #2904]!	; 0xb58

00011564 <__sprintf_chk@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #106496	; 0x1a000
   1156c:	ldr	pc, [ip, #2896]!	; 0xb50

00011570 <__cxa_atexit@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #106496	; 0x1a000
   11578:	ldr	pc, [ip, #2888]!	; 0xb48

0001157c <setvbuf@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #106496	; 0x1a000
   11584:	ldr	pc, [ip, #2880]!	; 0xb40

00011588 <memset@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #106496	; 0x1a000
   11590:	ldr	pc, [ip, #2872]!	; 0xb38

00011594 <renameat2@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #106496	; 0x1a000
   1159c:	ldr	pc, [ip, #2864]!	; 0xb30

000115a0 <__printf_chk@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #106496	; 0x1a000
   115a8:	ldr	pc, [ip, #2856]!	; 0xb28

000115ac <write@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #106496	; 0x1a000
   115b4:	ldr	pc, [ip, #2848]!	; 0xb20

000115b8 <fileno@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #106496	; 0x1a000
   115c0:	ldr	pc, [ip, #2840]!	; 0xb18

000115c4 <__fprintf_chk@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #106496	; 0x1a000
   115cc:	ldr	pc, [ip, #2832]!	; 0xb10

000115d0 <memchr@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #106496	; 0x1a000
   115d8:	ldr	pc, [ip, #2824]!	; 0xb08

000115dc <fclose@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #106496	; 0x1a000
   115e4:	ldr	pc, [ip, #2816]!	; 0xb00

000115e8 <fseeko64@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #106496	; 0x1a000
   115f0:	ldr	pc, [ip, #2808]!	; 0xaf8

000115f4 <fcntl64@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #106496	; 0x1a000
   115fc:	ldr	pc, [ip, #2800]!	; 0xaf0

00011600 <__overflow@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #106496	; 0x1a000
   11608:	ldr	pc, [ip, #2792]!	; 0xae8

0001160c <setlocale@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #106496	; 0x1a000
   11614:	ldr	pc, [ip, #2784]!	; 0xae0

00011618 <__explicit_bzero_chk@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #106496	; 0x1a000
   11620:	ldr	pc, [ip, #2776]!	; 0xad8

00011624 <strrchr@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #106496	; 0x1a000
   1162c:	ldr	pc, [ip, #2768]!	; 0xad0

00011630 <nl_langinfo@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #106496	; 0x1a000
   11638:	ldr	pc, [ip, #2760]!	; 0xac8

0001163c <localeconv@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #106496	; 0x1a000
   11644:	ldr	pc, [ip, #2752]!	; 0xac0

00011648 <fopen64@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #106496	; 0x1a000
   11650:	ldr	pc, [ip, #2744]!	; 0xab8

00011654 <renameat@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #106496	; 0x1a000
   1165c:	ldr	pc, [ip, #2736]!	; 0xab0

00011660 <bindtextdomain@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #106496	; 0x1a000
   11668:	ldr	pc, [ip, #2728]!	; 0xaa8

0001166c <fread_unlocked@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #106496	; 0x1a000
   11674:	ldr	pc, [ip, #2720]!	; 0xaa0

00011678 <getrandom@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #106496	; 0x1a000
   11680:	ldr	pc, [ip, #2712]!	; 0xa98

00011684 <aligned_alloc@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #106496	; 0x1a000
   1168c:	ldr	pc, [ip, #2704]!	; 0xa90

00011690 <sync@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #106496	; 0x1a000
   11698:	ldr	pc, [ip, #2696]!	; 0xa88

0001169c <chmod@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #106496	; 0x1a000
   116a4:	ldr	pc, [ip, #2688]!	; 0xa80

000116a8 <isatty@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #106496	; 0x1a000
   116b0:	ldr	pc, [ip, #2680]!	; 0xa78

000116b4 <strncmp@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #106496	; 0x1a000
   116bc:	ldr	pc, [ip, #2672]!	; 0xa70

000116c0 <fdatasync@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #106496	; 0x1a000
   116c8:	ldr	pc, [ip, #2664]!	; 0xa68

000116cc <abort@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #106496	; 0x1a000
   116d4:	ldr	pc, [ip, #2656]!	; 0xa60

000116d8 <close@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #106496	; 0x1a000
   116e0:	ldr	pc, [ip, #2648]!	; 0xa58

000116e4 <__assert_fail@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #106496	; 0x1a000
   116ec:	ldr	pc, [ip, #2640]!	; 0xa50

Disassembly of section .text:

000116f0 <.text>:
   116f0:	mov	fp, #0
   116f4:	mov	lr, #0
   116f8:	pop	{r1}		; (ldr r1, [sp], #4)
   116fc:	mov	r2, sp
   11700:	push	{r2}		; (str r2, [sp, #-4]!)
   11704:	push	{r0}		; (str r0, [sp, #-4]!)
   11708:	ldr	ip, [pc, #16]	; 11720 <__assert_fail@plt+0x3c>
   1170c:	push	{ip}		; (str ip, [sp, #-4]!)
   11710:	ldr	r0, [pc, #12]	; 11724 <__assert_fail@plt+0x40>
   11714:	ldr	r3, [pc, #12]	; 11728 <__assert_fail@plt+0x44>
   11718:	bl	114ec <__libc_start_main@plt>
   1171c:	bl	116cc <abort@plt>
   11720:	strdeq	sl, [r1], -r0
   11724:	ldrdeq	r1, [r1], -r4
   11728:	muleq	r1, r0, r2
   1172c:	ldr	r3, [pc, #20]	; 11748 <__assert_fail@plt+0x64>
   11730:	ldr	r2, [pc, #20]	; 1174c <__assert_fail@plt+0x68>
   11734:	add	r3, pc, r3
   11738:	ldr	r2, [r3, r2]
   1173c:	cmp	r2, #0
   11740:	bxeq	lr
   11744:	b	11504 <__gmon_start__@plt>
   11748:	andeq	sl, r1, r4, asr #17
   1174c:	andeq	r0, r0, r0, asr #2
   11750:	ldr	r0, [pc, #24]	; 11770 <__assert_fail@plt+0x8c>
   11754:	ldr	r3, [pc, #24]	; 11774 <__assert_fail@plt+0x90>
   11758:	cmp	r3, r0
   1175c:	bxeq	lr
   11760:	ldr	r3, [pc, #16]	; 11778 <__assert_fail@plt+0x94>
   11764:	cmp	r3, #0
   11768:	bxeq	lr
   1176c:	bx	r3
   11770:	andeq	ip, r2, r0, lsr #3
   11774:	andeq	ip, r2, r0, lsr #3
   11778:	andeq	r0, r0, r0
   1177c:	ldr	r0, [pc, #36]	; 117a8 <__assert_fail@plt+0xc4>
   11780:	ldr	r1, [pc, #36]	; 117ac <__assert_fail@plt+0xc8>
   11784:	sub	r1, r1, r0
   11788:	asr	r1, r1, #2
   1178c:	add	r1, r1, r1, lsr #31
   11790:	asrs	r1, r1, #1
   11794:	bxeq	lr
   11798:	ldr	r3, [pc, #16]	; 117b0 <__assert_fail@plt+0xcc>
   1179c:	cmp	r3, #0
   117a0:	bxeq	lr
   117a4:	bx	r3
   117a8:	andeq	ip, r2, r0, lsr #3
   117ac:	andeq	ip, r2, r0, lsr #3
   117b0:	andeq	r0, r0, r0
   117b4:	push	{r4, lr}
   117b8:	ldr	r4, [pc, #24]	; 117d8 <__assert_fail@plt+0xf4>
   117bc:	ldrb	r3, [r4]
   117c0:	cmp	r3, #0
   117c4:	popne	{r4, pc}
   117c8:	bl	11750 <__assert_fail@plt+0x6c>
   117cc:	mov	r3, #1
   117d0:	strb	r3, [r4]
   117d4:	pop	{r4, pc}
   117d8:			; <UNDEFINED> instruction: 0x0002c1bc
   117dc:	b	1177c <__assert_fail@plt+0x98>
   117e0:	push	{fp, lr}
   117e4:	mov	fp, sp
   117e8:	sub	sp, sp, #56	; 0x38
   117ec:	mov	r4, r0
   117f0:	cmp	r0, #0
   117f4:	bne	11a90 <__assert_fail@plt+0x3ac>
   117f8:	movw	r1, #41795	; 0xa343
   117fc:	mov	r0, #0
   11800:	mov	r2, #5
   11804:	movt	r1, #1
   11808:	bl	11414 <dcgettext@plt>
   1180c:	mov	r1, r0
   11810:	movw	r0, #49616	; 0xc1d0
   11814:	movt	r0, #2
   11818:	ldr	r2, [r0]
   1181c:	mov	r0, #1
   11820:	bl	115a0 <__printf_chk@plt>
   11824:	movw	r1, #41826	; 0xa362
   11828:	mov	r0, #0
   1182c:	mov	r2, #5
   11830:	movt	r1, #1
   11834:	bl	11414 <dcgettext@plt>
   11838:	movw	r7, #49588	; 0xc1b4
   1183c:	movt	r7, #2
   11840:	ldr	r1, [r7]
   11844:	bl	1136c <fputs_unlocked@plt>
   11848:	movw	r1, #41960	; 0xa3e8
   1184c:	mov	r0, #0
   11850:	mov	r2, #5
   11854:	movt	r1, #1
   11858:	bl	11414 <dcgettext@plt>
   1185c:	ldr	r1, [r7]
   11860:	bl	1136c <fputs_unlocked@plt>
   11864:	movw	r1, #43693	; 0xaaad
   11868:	mov	r0, #0
   1186c:	mov	r2, #5
   11870:	movt	r1, #1
   11874:	bl	11414 <dcgettext@plt>
   11878:	ldr	r1, [r7]
   1187c:	bl	1136c <fputs_unlocked@plt>
   11880:	movw	r1, #41999	; 0xa40f
   11884:	mov	r0, #0
   11888:	mov	r2, #5
   1188c:	movt	r1, #1
   11890:	bl	11414 <dcgettext@plt>
   11894:	mov	r1, r0
   11898:	mov	r0, #1
   1189c:	mov	r2, #3
   118a0:	bl	115a0 <__printf_chk@plt>
   118a4:	movw	r1, #42261	; 0xa515
   118a8:	mov	r0, #0
   118ac:	mov	r2, #5
   118b0:	movt	r1, #1
   118b4:	bl	11414 <dcgettext@plt>
   118b8:	ldr	r1, [r7]
   118bc:	bl	1136c <fputs_unlocked@plt>
   118c0:	movw	r1, #42628	; 0xa684
   118c4:	mov	r0, #0
   118c8:	mov	r2, #5
   118cc:	movt	r1, #1
   118d0:	bl	11414 <dcgettext@plt>
   118d4:	ldr	r1, [r7]
   118d8:	bl	1136c <fputs_unlocked@plt>
   118dc:	movw	r1, #42673	; 0xa6b1
   118e0:	mov	r0, #0
   118e4:	mov	r2, #5
   118e8:	movt	r1, #1
   118ec:	bl	11414 <dcgettext@plt>
   118f0:	ldr	r1, [r7]
   118f4:	bl	1136c <fputs_unlocked@plt>
   118f8:	movw	r1, #42727	; 0xa6e7
   118fc:	mov	r0, #0
   11900:	mov	r2, #5
   11904:	movt	r1, #1
   11908:	bl	11414 <dcgettext@plt>
   1190c:	ldr	r1, [r7]
   11910:	bl	1136c <fputs_unlocked@plt>
   11914:	movw	r1, #43208	; 0xa8c8
   11918:	mov	r0, #0
   1191c:	mov	r2, #5
   11920:	movt	r1, #1
   11924:	bl	11414 <dcgettext@plt>
   11928:	ldr	r1, [r7]
   1192c:	bl	1136c <fputs_unlocked@plt>
   11930:	movw	r0, #44904	; 0xaf68
   11934:	mov	r2, #48	; 0x30
   11938:	mov	r6, sp
   1193c:	movw	r5, #43496	; 0xa9e8
   11940:	movt	r0, #1
   11944:	movt	r5, #1
   11948:	add	r1, r0, #32
   1194c:	add	r3, r0, #16
   11950:	vld1.64	{d18-d19}, [r0], r2
   11954:	vld1.64	{d16-d17}, [r1]
   11958:	vld1.64	{d20-d21}, [r3]
   1195c:	add	r1, r6, #32
   11960:	vldr	d22, [r0]
   11964:	add	r0, r6, #16
   11968:	vst1.64	{d16-d17}, [r1]
   1196c:	movw	r1, #43768	; 0xaaf8
   11970:	vst1.64	{d20-d21}, [r0]
   11974:	mov	r0, r6
   11978:	vst1.64	{d18-d19}, [r0], r2
   1197c:	movt	r1, #1
   11980:	vstr	d22, [r0]
   11984:	mov	r0, r5
   11988:	bl	11390 <strcmp@plt>
   1198c:	cmp	r0, #0
   11990:	ldrne	r1, [r6, #8]!
   11994:	cmpne	r1, #0
   11998:	bne	11984 <__assert_fail@plt+0x2a0>
   1199c:	ldr	r6, [r6, #4]
   119a0:	movw	r1, #43863	; 0xab57
   119a4:	mov	r0, #0
   119a8:	mov	r2, #5
   119ac:	movt	r1, #1
   119b0:	bl	11414 <dcgettext@plt>
   119b4:	movw	r2, #43636	; 0xaa74
   119b8:	movw	r3, #43886	; 0xab6e
   119bc:	mov	r1, r0
   119c0:	mov	r0, #1
   119c4:	movt	r2, #1
   119c8:	movt	r3, #1
   119cc:	bl	115a0 <__printf_chk@plt>
   119d0:	cmp	r6, #0
   119d4:	mov	r0, #5
   119d8:	mov	r1, #0
   119dc:	moveq	r6, r5
   119e0:	bl	1160c <setlocale@plt>
   119e4:	cmp	r0, #0
   119e8:	beq	11a20 <__assert_fail@plt+0x33c>
   119ec:	movw	r1, #43926	; 0xab96
   119f0:	mov	r2, #3
   119f4:	movt	r1, #1
   119f8:	bl	116b4 <strncmp@plt>
   119fc:	cmp	r0, #0
   11a00:	beq	11a20 <__assert_fail@plt+0x33c>
   11a04:	movw	r1, #43930	; 0xab9a
   11a08:	mov	r0, #0
   11a0c:	mov	r2, #5
   11a10:	movt	r1, #1
   11a14:	bl	11414 <dcgettext@plt>
   11a18:	ldr	r1, [r7]
   11a1c:	bl	1136c <fputs_unlocked@plt>
   11a20:	movw	r1, #44001	; 0xabe1
   11a24:	mov	r0, #0
   11a28:	mov	r2, #5
   11a2c:	movt	r1, #1
   11a30:	bl	11414 <dcgettext@plt>
   11a34:	movw	r2, #43886	; 0xab6e
   11a38:	mov	r1, r0
   11a3c:	mov	r0, #1
   11a40:	mov	r3, r5
   11a44:	movt	r2, #1
   11a48:	bl	115a0 <__printf_chk@plt>
   11a4c:	movw	r1, #44028	; 0xabfc
   11a50:	mov	r0, #0
   11a54:	mov	r2, #5
   11a58:	movt	r1, #1
   11a5c:	bl	11414 <dcgettext@plt>
   11a60:	movw	r3, #43207	; 0xa8c7
   11a64:	mov	r1, r0
   11a68:	movw	r0, #43796	; 0xab14
   11a6c:	cmp	r6, r5
   11a70:	mov	r2, r6
   11a74:	movt	r0, #1
   11a78:	movt	r3, #1
   11a7c:	moveq	r3, r0
   11a80:	mov	r0, #1
   11a84:	bl	115a0 <__printf_chk@plt>
   11a88:	mov	r0, r4
   11a8c:	bl	11528 <exit@plt>
   11a90:	movw	r0, #49584	; 0xc1b0
   11a94:	movw	r1, #41756	; 0xa31c
   11a98:	mov	r2, #5
   11a9c:	movt	r0, #2
   11aa0:	movt	r1, #1
   11aa4:	ldr	r5, [r0]
   11aa8:	mov	r0, #0
   11aac:	bl	11414 <dcgettext@plt>
   11ab0:	mov	r2, r0
   11ab4:	movw	r0, #49616	; 0xc1d0
   11ab8:	mov	r1, #1
   11abc:	movt	r0, #2
   11ac0:	ldr	r3, [r0]
   11ac4:	mov	r0, r5
   11ac8:	bl	115c4 <__fprintf_chk@plt>
   11acc:	mov	r0, r4
   11ad0:	bl	11528 <exit@plt>
   11ad4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ad8:	add	fp, sp, #28
   11adc:	sub	sp, sp, #116	; 0x74
   11ae0:	sub	r7, fp, #56	; 0x38
   11ae4:	mov	r5, r1
   11ae8:	mov	r9, r0
   11aec:	vmov.i32	q8, #0	; 0x00000000
   11af0:	mov	r0, #20
   11af4:	mov	r4, #0
   11af8:	mov	r1, r7
   11afc:	str	r4, [fp, #-40]	; 0xffffffd8
   11b00:	vst1.64	{d16-d17}, [r1], r0
   11b04:	str	r4, [r1]
   11b08:	ldr	r0, [r5]
   11b0c:	bl	14fa4 <__assert_fail@plt+0x38c0>
   11b10:	movw	r1, #43207	; 0xa8c7
   11b14:	mov	r0, #6
   11b18:	movt	r1, #1
   11b1c:	bl	1160c <setlocale@plt>
   11b20:	movw	r6, #43640	; 0xaa78
   11b24:	movw	r1, #43502	; 0xa9ee
   11b28:	movt	r6, #1
   11b2c:	movt	r1, #1
   11b30:	mov	r0, r6
   11b34:	bl	11660 <bindtextdomain@plt>
   11b38:	mov	r0, r6
   11b3c:	bl	11438 <textdomain@plt>
   11b40:	movw	r0, #16284	; 0x3f9c
   11b44:	movt	r0, #1
   11b48:	bl	1a2f4 <__assert_fail@plt+0x8c10>
   11b4c:	mvn	r0, #0
   11b50:	mov	r1, #3
   11b54:	movw	r6, #43526	; 0xaa06
   11b58:	mov	sl, #0
   11b5c:	str	r5, [fp, #-60]	; 0xffffffc4
   11b60:	str	r0, [fp, #-44]	; 0xffffffd4
   11b64:	str	r0, [fp, #-48]	; 0xffffffd0
   11b68:	str	r1, [fp, #-52]	; 0xffffffcc
   11b6c:	mov	r1, #0
   11b70:	mov	r0, #3
   11b74:	movt	r6, #1
   11b78:	str	r1, [sp, #60]	; 0x3c
   11b7c:	mvn	r1, #0
   11b80:	str	r0, [fp, #-64]	; 0xffffffc0
   11b84:	add	r0, r7, #8
   11b88:	str	r1, [sp, #68]	; 0x44
   11b8c:	mvn	r1, #0
   11b90:	str	r0, [sp, #56]	; 0x38
   11b94:	mov	r0, #0
   11b98:	str	r1, [sp, #64]	; 0x40
   11b9c:	mov	r1, #0
   11ba0:	str	r1, [sp, #40]	; 0x28
   11ba4:	mov	r1, #0
   11ba8:	str	r1, [fp, #-68]	; 0xffffffbc
   11bac:	mov	r1, #0
   11bb0:	str	r1, [sp, #72]	; 0x48
   11bb4:	b	11bc0 <__assert_fail@plt+0x4dc>
   11bb8:	mov	r0, r7
   11bbc:	mov	sl, r8
   11bc0:	movw	r3, #44696	; 0xae98
   11bc4:	mov	r7, r0
   11bc8:	mov	r0, r9
   11bcc:	mov	r1, r5
   11bd0:	mov	r2, r6
   11bd4:	mov	r8, sl
   11bd8:	str	r4, [sp]
   11bdc:	movt	r3, #1
   11be0:	bl	11510 <getopt_long@plt>
   11be4:	cmp	r0, #101	; 0x65
   11be8:	ble	11e14 <__assert_fail@plt+0x730>
   11bec:	sub	r1, r0, #102	; 0x66
   11bf0:	cmp	r1, #20
   11bf4:	bhi	11ccc <__assert_fail@plt+0x5e8>
   11bf8:	add	r2, pc, #8
   11bfc:	mov	r0, #1
   11c00:	mov	sl, r8
   11c04:	ldr	pc, [r2, r1, lsl #2]
   11c08:	andeq	r1, r1, r0, asr #23
   11c0c:	andeq	r2, r1, r4, lsl r8
   11c10:	andeq	r2, r1, r4, lsl r8
   11c14:	andeq	r2, r1, r4, lsl r8
   11c18:	andeq	r2, r1, r4, lsl r8
   11c1c:	andeq	r2, r1, r4, lsl r8
   11c20:	andeq	r2, r1, r4, lsl r8
   11c24:	andeq	r2, r1, r4, lsl r8
   11c28:	andeq	r1, r1, ip, asr ip
   11c2c:	andeq	r2, r1, r4, lsl r8
   11c30:	andeq	r2, r1, r4, lsl r8
   11c34:	andeq	r2, r1, r4, lsl r8
   11c38:	andeq	r2, r1, r4, lsl r8
   11c3c:	andeq	r1, r1, r8, ror sp
   11c40:	andeq	r2, r1, r4, lsl r8
   11c44:	andeq	r1, r1, r8, lsl #26
   11c48:	andeq	r1, r1, r0, asr #25
   11c4c:	andeq	r2, r1, r4, lsl r8
   11c50:	andeq	r1, r1, r8, lsl #28
   11c54:	andeq	r2, r1, r4, lsl r8
   11c58:	strdeq	r1, [r1], -ip
   11c5c:	movw	r0, #49592	; 0xc1b8
   11c60:	mov	r4, r6
   11c64:	mov	r6, r7
   11c68:	movw	r1, #43536	; 0xaa10
   11c6c:	mov	r2, #5
   11c70:	mov	r5, #0
   11c74:	movt	r0, #2
   11c78:	movt	r1, #1
   11c7c:	ldr	r7, [r0]
   11c80:	mov	r0, #0
   11c84:	bl	11414 <dcgettext@plt>
   11c88:	mvn	r1, #-1073741824	; 0xc0000000
   11c8c:	mov	r2, #0
   11c90:	mov	r3, #0
   11c94:	stm	sp, {r1, r5}
   11c98:	str	r5, [sp, #16]
   11c9c:	movw	r1, #43207	; 0xa8c7
   11ca0:	str	r0, [sp, #12]
   11ca4:	mov	r0, r7
   11ca8:	ldr	r5, [fp, #-60]	; 0xffffffc4
   11cac:	movt	r1, #1
   11cb0:	str	r1, [sp, #8]
   11cb4:	bl	189ec <__assert_fail@plt+0x7308>
   11cb8:	str	r0, [fp, #-64]	; 0xffffffc0
   11cbc:	b	11de8 <__assert_fail@plt+0x704>
   11cc0:	mov	r0, #1
   11cc4:	str	r0, [sp, #40]	; 0x28
   11cc8:	b	11bb8 <__assert_fail@plt+0x4d4>
   11ccc:	cmp	r0, #256	; 0x100
   11cd0:	bne	12814 <__assert_fail@plt+0x1130>
   11cd4:	movw	r0, #49592	; 0xc1b8
   11cd8:	cmp	r8, #0
   11cdc:	movt	r0, #2
   11ce0:	ldr	sl, [r0]
   11ce4:	mov	r0, r7
   11ce8:	beq	11bc0 <__assert_fail@plt+0x4dc>
   11cec:	mov	r0, r8
   11cf0:	mov	r1, sl
   11cf4:	bl	11390 <strcmp@plt>
   11cf8:	cmp	r0, #0
   11cfc:	mov	r0, r7
   11d00:	beq	11bc0 <__assert_fail@plt+0x4dc>
   11d04:	b	1281c <__assert_fail@plt+0x1138>
   11d08:	movw	r0, #49592	; 0xc1b8
   11d0c:	mov	sl, r8
   11d10:	movt	r0, #2
   11d14:	ldr	r1, [r0]
   11d18:	mov	r0, #3
   11d1c:	str	r0, [sp, #60]	; 0x3c
   11d20:	mov	r0, r7
   11d24:	cmp	r1, #0
   11d28:	beq	11bc0 <__assert_fail@plt+0x4dc>
   11d2c:	movw	r0, #49492	; 0xc154
   11d30:	movw	sl, #44872	; 0xaf48
   11d34:	mov	r2, #4
   11d38:	movt	r0, #2
   11d3c:	str	r2, [sp]
   11d40:	movw	r2, #44884	; 0xaf54
   11d44:	movt	sl, #1
   11d48:	ldr	r0, [r0]
   11d4c:	movt	r2, #1
   11d50:	mov	r3, sl
   11d54:	str	r0, [sp, #4]
   11d58:	mov	r0, #1
   11d5c:	str	r0, [sp, #8]
   11d60:	movw	r0, #43595	; 0xaa4b
   11d64:	movt	r0, #1
   11d68:	bl	13d30 <__assert_fail@plt+0x264c>
   11d6c:	ldr	r0, [sl, r0, lsl #2]
   11d70:	str	r0, [sp, #60]	; 0x3c
   11d74:	b	11bb8 <__assert_fail@plt+0x4d4>
   11d78:	movw	r0, #49592	; 0xc1b8
   11d7c:	mov	r4, r6
   11d80:	mov	r6, r7
   11d84:	movw	r1, #43618	; 0xaa62
   11d88:	mov	r2, #5
   11d8c:	mov	r5, #0
   11d90:	movt	r0, #2
   11d94:	movt	r1, #1
   11d98:	ldr	r7, [r0]
   11d9c:	mov	r0, #0
   11da0:	bl	11414 <dcgettext@plt>
   11da4:	mvn	r1, #0
   11da8:	str	r5, [sp, #16]
   11dac:	ldr	r5, [fp, #-60]	; 0xffffffc4
   11db0:	str	r0, [sp, #12]
   11db4:	mov	r0, r7
   11db8:	mov	r2, #0
   11dbc:	mov	r3, #0
   11dc0:	str	r1, [sp]
   11dc4:	mvn	r1, #-2147483648	; 0x80000000
   11dc8:	str	r1, [sp, #4]
   11dcc:	movw	r1, #43604	; 0xaa54
   11dd0:	movt	r1, #1
   11dd4:	str	r1, [sp, #8]
   11dd8:	mov	r1, #0
   11ddc:	bl	188f8 <__assert_fail@plt+0x7214>
   11de0:	str	r0, [sp, #68]	; 0x44
   11de4:	str	r1, [sp, #64]	; 0x40
   11de8:	mov	r0, r6
   11dec:	mov	r6, r4
   11df0:	mov	r4, #0
   11df4:	mov	sl, r8
   11df8:	b	11bc0 <__assert_fail@plt+0x4dc>
   11dfc:	mov	r0, #1
   11e00:	str	r0, [sp, #72]	; 0x48
   11e04:	b	11bb8 <__assert_fail@plt+0x4d4>
   11e08:	mov	r0, #1
   11e0c:	str	r0, [fp, #-68]	; 0xffffffbc
   11e10:	b	11bb8 <__assert_fail@plt+0x4d4>
   11e14:	cmn	r0, #1
   11e18:	bne	127b4 <__assert_fail@plt+0x10d0>
   11e1c:	ldr	r0, [sp, #40]	; 0x28
   11e20:	ldr	r1, [sp, #68]	; 0x44
   11e24:	ldr	r2, [sp, #64]	; 0x40
   11e28:	strb	r0, [fp, #-36]	; 0xffffffdc
   11e2c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   11e30:	strb	r0, [fp, #-35]	; 0xffffffdd
   11e34:	ldr	r0, [sp, #72]	; 0x48
   11e38:	strb	r0, [fp, #-34]	; 0xffffffde
   11e3c:	ldr	r0, [sp, #56]	; 0x38
   11e40:	stm	r0, {r1, r2}
   11e44:	strb	r7, [fp, #-56]	; 0xffffffc8
   11e48:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11e4c:	str	r0, [fp, #-52]	; 0xffffffcc
   11e50:	ldr	r0, [sp, #60]	; 0x3c
   11e54:	str	r0, [fp, #-40]	; 0xffffffd8
   11e58:	movw	r0, #49576	; 0xc1a8
   11e5c:	movt	r0, #2
   11e60:	ldr	r6, [r0]
   11e64:	subs	r0, r9, r6
   11e68:	str	r0, [sp, #24]
   11e6c:	beq	12840 <__assert_fail@plt+0x115c>
   11e70:	mov	r0, r8
   11e74:	mvn	r1, #0
   11e78:	bl	16f60 <__assert_fail@plt+0x587c>
   11e7c:	movw	r1, #49600	; 0xc1c0
   11e80:	cmp	r0, #0
   11e84:	movt	r1, #2
   11e88:	str	r0, [r1]
   11e8c:	beq	1286c <__assert_fail@plt+0x1188>
   11e90:	movw	r0, #10412	; 0x28ac
   11e94:	movt	r0, #1
   11e98:	bl	1a2f4 <__assert_fail@plt+0x8c10>
   11e9c:	ldr	r5, [sp, #24]
   11ea0:	cmp	r5, #1
   11ea4:	movlt	r0, #0
   11ea8:	sublt	sp, fp, #28
   11eac:	poplt	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11eb0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11eb4:	movw	r9, #45180	; 0xb07c
   11eb8:	str	r7, [sp, #32]
   11ebc:	mov	sl, #0
   11ec0:	mov	r7, #1
   11ec4:	movt	r9, #1
   11ec8:	add	r0, r0, r6, lsl #2
   11ecc:	str	r0, [sp, #64]	; 0x40
   11ed0:	ldr	r4, [sp, #64]	; 0x40
   11ed4:	mov	r0, #0
   11ed8:	mov	r1, #3
   11edc:	ldr	r2, [r4, sl, lsl #2]
   11ee0:	bl	16c74 <__assert_fail@plt+0x5590>
   11ee4:	bl	18874 <__assert_fail@plt+0x7190>
   11ee8:	ldr	r4, [r4, sl, lsl #2]
   11eec:	movw	r1, #45554	; 0xb1f2
   11ef0:	str	r0, [fp, #-60]	; 0xffffffc4
   11ef4:	movt	r1, #1
   11ef8:	mov	r0, r4
   11efc:	bl	11390 <strcmp@plt>
   11f00:	movw	r1, #49600	; 0xc1c0
   11f04:	cmp	r0, #0
   11f08:	movt	r1, #2
   11f0c:	ldr	r8, [r1]
   11f10:	beq	11f90 <__assert_fail@plt+0x8ac>
   11f14:	mov	r0, r4
   11f18:	movw	r1, #257	; 0x101
   11f1c:	str	r7, [sp, #72]	; 0x48
   11f20:	bl	1435c <__assert_fail@plt+0x2c78>
   11f24:	mov	r7, r0
   11f28:	cmn	r0, #1
   11f2c:	ble	11fcc <__assert_fail@plt+0x8e8>
   11f30:	str	r4, [fp, #-64]	; 0xffffffc0
   11f34:	ldr	r4, [fp, #-60]	; 0xffffffc4
   11f38:	mov	r0, r7
   11f3c:	mov	r2, r8
   11f40:	sub	r3, fp, #56	; 0x38
   11f44:	mov	r1, r4
   11f48:	bl	128bc <__assert_fail@plt+0x11d8>
   11f4c:	mov	r6, r0
   11f50:	mov	r0, r7
   11f54:	bl	116d8 <close@plt>
   11f58:	cmp	r0, #0
   11f5c:	beq	1203c <__assert_fail@plt+0x958>
   11f60:	bl	11558 <__errno_location@plt>
   11f64:	ldr	r7, [r0]
   11f68:	movw	r1, #44566	; 0xae16
   11f6c:	mov	r0, #0
   11f70:	mov	r2, #5
   11f74:	mov	r6, #0
   11f78:	movt	r1, #1
   11f7c:	bl	11414 <dcgettext@plt>
   11f80:	mov	r2, r0
   11f84:	mov	r0, #0
   11f88:	mov	r1, r7
   11f8c:	b	1202c <__assert_fail@plt+0x948>
   11f90:	mov	r0, #1
   11f94:	mov	r1, #3
   11f98:	bl	1417c <__assert_fail@plt+0x2a98>
   11f9c:	cmn	r0, #1
   11fa0:	ble	1229c <__assert_fail@plt+0xbb8>
   11fa4:	tst	r0, #1024	; 0x400
   11fa8:	bne	122cc <__assert_fail@plt+0xbe8>
   11fac:	ldr	r4, [fp, #-60]	; 0xffffffc4
   11fb0:	mov	r0, #1
   11fb4:	mov	r2, r8
   11fb8:	sub	r3, fp, #56	; 0x38
   11fbc:	mov	r1, r4
   11fc0:	bl	128bc <__assert_fail@plt+0x11d8>
   11fc4:	mov	r6, r0
   11fc8:	b	12770 <__assert_fail@plt+0x108c>
   11fcc:	bl	11558 <__errno_location@plt>
   11fd0:	mov	r6, r0
   11fd4:	ldr	r0, [r0]
   11fd8:	cmp	r0, #13
   11fdc:	bne	12000 <__assert_fail@plt+0x91c>
   11fe0:	ldr	r0, [sp, #32]
   11fe4:	tst	r0, #255	; 0xff
   11fe8:	beq	12000 <__assert_fail@plt+0x91c>
   11fec:	mov	r0, r4
   11ff0:	mov	r1, #128	; 0x80
   11ff4:	bl	1169c <chmod@plt>
   11ff8:	cmp	r0, #0
   11ffc:	beq	12300 <__assert_fail@plt+0xc1c>
   12000:	ldr	r4, [r6]
   12004:	movw	r1, #44535	; 0xadf7
   12008:	mov	r0, #0
   1200c:	mov	r2, #5
   12010:	mov	r6, #0
   12014:	movt	r1, #1
   12018:	bl	11414 <dcgettext@plt>
   1201c:	mov	r1, r4
   12020:	ldr	r4, [fp, #-60]	; 0xffffffc4
   12024:	mov	r2, r0
   12028:	mov	r0, #0
   1202c:	mov	r3, r4
   12030:	bl	114bc <error@plt>
   12034:	ldr	r7, [sp, #72]	; 0x48
   12038:	b	12770 <__assert_fail@plt+0x108c>
   1203c:	ldr	r0, [sp, #60]	; 0x3c
   12040:	ldr	r7, [sp, #72]	; 0x48
   12044:	cmp	r0, #0
   12048:	beq	1231c <__assert_fail@plt+0xc38>
   1204c:	ldr	r4, [fp, #-60]	; 0xffffffc4
   12050:	eors	r0, r6, #1
   12054:	bne	12770 <__assert_fail@plt+0x108c>
   12058:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1205c:	bl	18874 <__assert_fail@plt+0x7190>
   12060:	mov	r6, r0
   12064:	bl	13ee4 <__assert_fail@plt+0x2800>
   12068:	str	r0, [sp, #68]	; 0x44
   1206c:	mov	r0, r6
   12070:	str	r6, [fp, #-68]	; 0xffffffbc
   12074:	bl	14088 <__assert_fail@plt+0x29a4>
   12078:	mov	r8, r0
   1207c:	mov	r0, #0
   12080:	mov	r1, #3
   12084:	mov	r2, r8
   12088:	bl	16c74 <__assert_fail@plt+0x5590>
   1208c:	bl	18874 <__assert_fail@plt+0x7190>
   12090:	ldr	r1, [sp, #60]	; 0x3c
   12094:	mov	r6, r0
   12098:	mvn	r0, #0
   1209c:	cmp	r1, #3
   120a0:	bne	120b0 <__assert_fail@plt+0x9cc>
   120a4:	mov	r0, r8
   120a8:	mov	r1, #18688	; 0x4900
   120ac:	bl	1435c <__assert_fail@plt+0x2c78>
   120b0:	str	r0, [sp, #52]	; 0x34
   120b4:	ldr	r0, [sp, #40]	; 0x28
   120b8:	str	r6, [sp, #48]	; 0x30
   120bc:	tst	r0, #255	; 0xff
   120c0:	beq	120ec <__assert_fail@plt+0xa08>
   120c4:	movw	r1, #44586	; 0xae2a
   120c8:	mov	r0, #0
   120cc:	mov	r2, #5
   120d0:	movt	r1, #1
   120d4:	bl	11414 <dcgettext@plt>
   120d8:	mov	r2, r0
   120dc:	mov	r0, #0
   120e0:	mov	r1, #0
   120e4:	mov	r3, r4
   120e8:	bl	114bc <error@plt>
   120ec:	ldr	r0, [sp, #60]	; 0x3c
   120f0:	mov	r6, #1
   120f4:	str	r8, [sp, #28]
   120f8:	cmp	r0, #1
   120fc:	beq	1265c <__assert_fail@plt+0xf78>
   12100:	ldr	r4, [sp, #68]	; 0x44
   12104:	mov	r0, r4
   12108:	bl	13f44 <__assert_fail@plt+0x2860>
   1210c:	cmp	r0, #0
   12110:	beq	12458 <__assert_fail@plt+0xd74>
   12114:	mov	r6, r0
   12118:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1211c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12120:	sub	r0, r4, r0
   12124:	add	r0, r1, r0
   12128:	str	r0, [sp, #44]	; 0x2c
   1212c:	ldr	r0, [sp, #52]	; 0x34
   12130:	cmn	r0, #1
   12134:	ble	12324 <__assert_fail@plt+0xc40>
   12138:	ldr	r0, [sp, #40]	; 0x28
   1213c:	sub	r4, r4, #1
   12140:	tst	r0, #255	; 0xff
   12144:	beq	12464 <__assert_fail@plt+0xd80>
   12148:	mov	r0, #1
   1214c:	rsb	r8, r6, #0
   12150:	str	r0, [sp, #36]	; 0x24
   12154:	mov	r0, #1
   12158:	str	r0, [sp, #56]	; 0x38
   1215c:	ldr	r5, [sp, #68]	; 0x44
   12160:	mov	r1, #48	; 0x30
   12164:	mov	r2, r6
   12168:	mov	r0, r5
   1216c:	bl	11588 <memset@plt>
   12170:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12174:	ldr	r3, [fp, #-68]	; 0xffffffbc
   12178:	mov	r0, #0
   1217c:	mvn	r2, #99	; 0x63
   12180:	strb	r0, [r5, r6]
   12184:	mov	r0, #1
   12188:	str	r0, [sp]
   1218c:	mvn	r0, #99	; 0x63
   12190:	bl	17a24 <__assert_fail@plt+0x6340>
   12194:	cmp	r0, #0
   12198:	beq	12210 <__assert_fail@plt+0xb2c>
   1219c:	bl	11558 <__errno_location@plt>
   121a0:	mov	r7, r0
   121a4:	ldr	r0, [r7]
   121a8:	cmp	r0, #17
   121ac:	bne	1228c <__assert_fail@plt+0xba8>
   121b0:	mov	r5, r8
   121b4:	cmp	r5, #0
   121b8:	beq	1228c <__assert_fail@plt+0xba8>
   121bc:	ldrb	r1, [r4, -r5]
   121c0:	mov	r0, r9
   121c4:	mov	r2, #65	; 0x41
   121c8:	bl	115d0 <memchr@plt>
   121cc:	cmp	r0, #0
   121d0:	beq	12794 <__assert_fail@plt+0x10b0>
   121d4:	ldrb	r0, [r0, #1]
   121d8:	cmp	r0, #0
   121dc:	movweq	r0, #48	; 0x30
   121e0:	strb	r0, [r4, -r5]
   121e4:	add	r5, r5, #1
   121e8:	beq	121b4 <__assert_fail@plt+0xad0>
   121ec:	ldr	r1, [fp, #-64]	; 0xffffffc0
   121f0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   121f4:	mov	r0, #1
   121f8:	mvn	r2, #99	; 0x63
   121fc:	str	r0, [sp]
   12200:	mvn	r0, #99	; 0x63
   12204:	bl	17a24 <__assert_fail@plt+0x6340>
   12208:	cmp	r0, #0
   1220c:	bne	121a4 <__assert_fail@plt+0xac0>
   12210:	ldr	r0, [sp, #52]	; 0x34
   12214:	ldr	r1, [sp, #48]	; 0x30
   12218:	bl	13918 <__assert_fail@plt+0x2234>
   1221c:	movw	r1, #44599	; 0xae37
   12220:	mov	r7, r0
   12224:	mov	r0, #0
   12228:	mov	r2, #5
   1222c:	mov	r5, #0
   12230:	movt	r1, #1
   12234:	bl	11414 <dcgettext@plt>
   12238:	mov	r2, r0
   1223c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12240:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12244:	mov	r1, #0
   12248:	str	r0, [sp]
   1224c:	ldr	r0, [sp, #36]	; 0x24
   12250:	tst	r0, #1
   12254:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12258:	movne	r3, r0
   1225c:	mov	r0, #0
   12260:	bl	114bc <error@plt>
   12264:	ldr	r0, [sp, #44]	; 0x2c
   12268:	ldr	r1, [sp, #68]	; 0x44
   1226c:	add	r2, r6, #1
   12270:	bl	113cc <memcpy@plt>
   12274:	ldr	r0, [sp, #56]	; 0x38
   12278:	cmp	r7, #0
   1227c:	movne	r0, r5
   12280:	str	r0, [sp, #56]	; 0x38
   12284:	mov	r0, #0
   12288:	str	r0, [sp, #36]	; 0x24
   1228c:	add	r8, r8, #1
   12290:	subs	r6, r6, #1
   12294:	bne	1215c <__assert_fail@plt+0xa78>
   12298:	b	12648 <__assert_fail@plt+0xf64>
   1229c:	bl	11558 <__errno_location@plt>
   122a0:	ldr	r4, [r0]
   122a4:	movw	r1, #44163	; 0xac83
   122a8:	mov	r0, #0
   122ac:	mov	r2, #5
   122b0:	mov	r6, #0
   122b4:	movt	r1, #1
   122b8:	bl	11414 <dcgettext@plt>
   122bc:	mov	r2, r0
   122c0:	mov	r0, #0
   122c4:	mov	r1, r4
   122c8:	b	122f0 <__assert_fail@plt+0xc0c>
   122cc:	movw	r1, #44180	; 0xac94
   122d0:	mov	r0, #0
   122d4:	mov	r2, #5
   122d8:	mov	r6, #0
   122dc:	movt	r1, #1
   122e0:	bl	11414 <dcgettext@plt>
   122e4:	mov	r2, r0
   122e8:	mov	r0, #0
   122ec:	mov	r1, #0
   122f0:	ldr	r4, [fp, #-60]	; 0xffffffc4
   122f4:	mov	r3, r4
   122f8:	bl	114bc <error@plt>
   122fc:	b	12770 <__assert_fail@plt+0x108c>
   12300:	mov	r0, r4
   12304:	movw	r1, #257	; 0x101
   12308:	bl	1435c <__assert_fail@plt+0x2c78>
   1230c:	mov	r7, r0
   12310:	cmn	r0, #1
   12314:	bgt	11f30 <__assert_fail@plt+0x84c>
   12318:	b	12000 <__assert_fail@plt+0x91c>
   1231c:	ldr	r4, [fp, #-60]	; 0xffffffc4
   12320:	b	12770 <__assert_fail@plt+0x108c>
   12324:	ldr	r0, [sp, #40]	; 0x28
   12328:	tst	r0, #255	; 0xff
   1232c:	beq	12568 <__assert_fail@plt+0xe84>
   12330:	mov	r0, #1
   12334:	sub	r4, r4, #1
   12338:	rsb	r7, r6, #0
   1233c:	str	r0, [sp, #56]	; 0x38
   12340:	ldr	r5, [sp, #68]	; 0x44
   12344:	mov	r1, #48	; 0x30
   12348:	mov	r2, r6
   1234c:	mov	r0, r5
   12350:	bl	11588 <memset@plt>
   12354:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12358:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1235c:	mov	r0, #0
   12360:	mvn	r2, #99	; 0x63
   12364:	strb	r0, [r5, r6]
   12368:	mov	r0, #1
   1236c:	str	r0, [sp]
   12370:	mvn	r0, #99	; 0x63
   12374:	bl	17a24 <__assert_fail@plt+0x6340>
   12378:	cmp	r0, #0
   1237c:	beq	123f4 <__assert_fail@plt+0xd10>
   12380:	bl	11558 <__errno_location@plt>
   12384:	mov	r8, r0
   12388:	ldr	r1, [r8]
   1238c:	cmp	r1, #17
   12390:	bne	1244c <__assert_fail@plt+0xd68>
   12394:	mov	r5, r7
   12398:	cmp	r5, #0
   1239c:	beq	1244c <__assert_fail@plt+0xd68>
   123a0:	ldrb	r1, [r4, -r5]
   123a4:	mov	r0, r9
   123a8:	mov	r2, #65	; 0x41
   123ac:	bl	115d0 <memchr@plt>
   123b0:	cmp	r0, #0
   123b4:	beq	12794 <__assert_fail@plt+0x10b0>
   123b8:	ldrb	r0, [r0, #1]
   123bc:	cmp	r0, #0
   123c0:	movweq	r0, #48	; 0x30
   123c4:	strb	r0, [r4, -r5]
   123c8:	add	r5, r5, #1
   123cc:	beq	12398 <__assert_fail@plt+0xcb4>
   123d0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   123d4:	ldr	r3, [fp, #-68]	; 0xffffffbc
   123d8:	mov	r0, #1
   123dc:	mvn	r2, #99	; 0x63
   123e0:	str	r0, [sp]
   123e4:	mvn	r0, #99	; 0x63
   123e8:	bl	17a24 <__assert_fail@plt+0x6340>
   123ec:	cmp	r0, #0
   123f0:	bne	12388 <__assert_fail@plt+0xca4>
   123f4:	movw	r1, #44599	; 0xae37
   123f8:	mov	r0, #0
   123fc:	mov	r2, #5
   12400:	movt	r1, #1
   12404:	bl	11414 <dcgettext@plt>
   12408:	mov	r2, r0
   1240c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12410:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12414:	mov	r1, #0
   12418:	str	r0, [sp]
   1241c:	ldr	r0, [sp, #56]	; 0x38
   12420:	tst	r0, #1
   12424:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12428:	movne	r3, r0
   1242c:	mov	r0, #0
   12430:	bl	114bc <error@plt>
   12434:	ldr	r0, [sp, #44]	; 0x2c
   12438:	ldr	r1, [sp, #68]	; 0x44
   1243c:	add	r2, r6, #1
   12440:	bl	113cc <memcpy@plt>
   12444:	mov	r0, #0
   12448:	str	r0, [sp, #56]	; 0x38
   1244c:	add	r7, r7, #1
   12450:	subs	r6, r6, #1
   12454:	bne	12340 <__assert_fail@plt+0xc5c>
   12458:	mov	r0, #1
   1245c:	str	r0, [sp, #56]	; 0x38
   12460:	b	12648 <__assert_fail@plt+0xf64>
   12464:	rsb	r7, r6, #0
   12468:	mov	r0, #1
   1246c:	str	r0, [sp, #56]	; 0x38
   12470:	ldr	r5, [sp, #68]	; 0x44
   12474:	mov	r1, #48	; 0x30
   12478:	mov	r2, r6
   1247c:	mov	r0, r5
   12480:	bl	11588 <memset@plt>
   12484:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12488:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1248c:	mov	r0, #0
   12490:	mvn	r2, #99	; 0x63
   12494:	strb	r0, [r5, r6]
   12498:	mov	r0, #1
   1249c:	str	r0, [sp]
   124a0:	mvn	r0, #99	; 0x63
   124a4:	bl	17a24 <__assert_fail@plt+0x6340>
   124a8:	cmp	r0, #0
   124ac:	beq	12524 <__assert_fail@plt+0xe40>
   124b0:	bl	11558 <__errno_location@plt>
   124b4:	mov	r8, r0
   124b8:	ldr	r0, [r8]
   124bc:	cmp	r0, #17
   124c0:	bne	12558 <__assert_fail@plt+0xe74>
   124c4:	mov	r5, r7
   124c8:	cmp	r5, #0
   124cc:	beq	12558 <__assert_fail@plt+0xe74>
   124d0:	ldrb	r1, [r4, -r5]
   124d4:	mov	r0, r9
   124d8:	mov	r2, #65	; 0x41
   124dc:	bl	115d0 <memchr@plt>
   124e0:	cmp	r0, #0
   124e4:	beq	12794 <__assert_fail@plt+0x10b0>
   124e8:	ldrb	r0, [r0, #1]
   124ec:	cmp	r0, #0
   124f0:	movweq	r0, #48	; 0x30
   124f4:	strb	r0, [r4, -r5]
   124f8:	add	r5, r5, #1
   124fc:	beq	124c8 <__assert_fail@plt+0xde4>
   12500:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12504:	ldr	r3, [fp, #-68]	; 0xffffffbc
   12508:	mov	r0, #1
   1250c:	mvn	r2, #99	; 0x63
   12510:	str	r0, [sp]
   12514:	mvn	r0, #99	; 0x63
   12518:	bl	17a24 <__assert_fail@plt+0x6340>
   1251c:	cmp	r0, #0
   12520:	bne	124b8 <__assert_fail@plt+0xdd4>
   12524:	ldr	r0, [sp, #52]	; 0x34
   12528:	ldr	r1, [sp, #48]	; 0x30
   1252c:	bl	13918 <__assert_fail@plt+0x2234>
   12530:	mov	r5, r0
   12534:	ldr	r0, [sp, #44]	; 0x2c
   12538:	ldr	r1, [sp, #68]	; 0x44
   1253c:	add	r2, r6, #1
   12540:	bl	113cc <memcpy@plt>
   12544:	ldr	r1, [sp, #56]	; 0x38
   12548:	cmp	r5, #0
   1254c:	mov	r0, #0
   12550:	movne	r1, r0
   12554:	str	r1, [sp, #56]	; 0x38
   12558:	add	r7, r7, #1
   1255c:	subs	r6, r6, #1
   12560:	bne	12470 <__assert_fail@plt+0xd8c>
   12564:	b	12648 <__assert_fail@plt+0xf64>
   12568:	mov	r0, #1
   1256c:	sub	r4, r4, #1
   12570:	rsb	r7, r6, #0
   12574:	str	r0, [sp, #56]	; 0x38
   12578:	ldr	r5, [sp, #68]	; 0x44
   1257c:	mov	r1, #48	; 0x30
   12580:	mov	r2, r6
   12584:	mov	r0, r5
   12588:	bl	11588 <memset@plt>
   1258c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12590:	ldr	r3, [fp, #-68]	; 0xffffffbc
   12594:	mov	r0, #0
   12598:	mvn	r2, #99	; 0x63
   1259c:	strb	r0, [r5, r6]
   125a0:	mov	r0, #1
   125a4:	str	r0, [sp]
   125a8:	mvn	r0, #99	; 0x63
   125ac:	bl	17a24 <__assert_fail@plt+0x6340>
   125b0:	cmp	r0, #0
   125b4:	beq	1262c <__assert_fail@plt+0xf48>
   125b8:	bl	11558 <__errno_location@plt>
   125bc:	mov	r8, r0
   125c0:	ldr	r0, [r8]
   125c4:	cmp	r0, #17
   125c8:	bne	1263c <__assert_fail@plt+0xf58>
   125cc:	mov	r5, r7
   125d0:	cmp	r5, #0
   125d4:	beq	1263c <__assert_fail@plt+0xf58>
   125d8:	ldrb	r1, [r4, -r5]
   125dc:	mov	r0, r9
   125e0:	mov	r2, #65	; 0x41
   125e4:	bl	115d0 <memchr@plt>
   125e8:	cmp	r0, #0
   125ec:	beq	12794 <__assert_fail@plt+0x10b0>
   125f0:	ldrb	r0, [r0, #1]
   125f4:	cmp	r0, #0
   125f8:	movweq	r0, #48	; 0x30
   125fc:	strb	r0, [r4, -r5]
   12600:	add	r5, r5, #1
   12604:	beq	125d0 <__assert_fail@plt+0xeec>
   12608:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1260c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   12610:	mov	r0, #1
   12614:	mvn	r2, #99	; 0x63
   12618:	str	r0, [sp]
   1261c:	mvn	r0, #99	; 0x63
   12620:	bl	17a24 <__assert_fail@plt+0x6340>
   12624:	cmp	r0, #0
   12628:	bne	125c0 <__assert_fail@plt+0xedc>
   1262c:	ldr	r0, [sp, #44]	; 0x2c
   12630:	ldr	r1, [sp, #68]	; 0x44
   12634:	add	r2, r6, #1
   12638:	bl	113cc <memcpy@plt>
   1263c:	add	r7, r7, #1
   12640:	subs	r6, r6, #1
   12644:	bne	12578 <__assert_fail@plt+0xe94>
   12648:	ldr	r0, [sp, #56]	; 0x38
   1264c:	ldr	r5, [sp, #24]
   12650:	ldr	r7, [sp, #72]	; 0x48
   12654:	ldr	r4, [fp, #-60]	; 0xffffffc4
   12658:	and	r6, r0, #1
   1265c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12660:	bl	11420 <unlink@plt>
   12664:	cmp	r0, #0
   12668:	beq	126a0 <__assert_fail@plt+0xfbc>
   1266c:	bl	11558 <__errno_location@plt>
   12670:	ldr	r4, [r0]
   12674:	movw	r1, #44617	; 0xae49
   12678:	mov	r0, #0
   1267c:	mov	r2, #5
   12680:	mov	r6, #0
   12684:	movt	r1, #1
   12688:	bl	11414 <dcgettext@plt>
   1268c:	mov	r1, r4
   12690:	ldr	r4, [fp, #-60]	; 0xffffffc4
   12694:	mov	r2, r0
   12698:	mov	r0, #0
   1269c:	b	126cc <__assert_fail@plt+0xfe8>
   126a0:	ldr	r0, [sp, #40]	; 0x28
   126a4:	tst	r0, #255	; 0xff
   126a8:	beq	126d4 <__assert_fail@plt+0xff0>
   126ac:	movw	r1, #44638	; 0xae5e
   126b0:	mov	r0, #0
   126b4:	mov	r2, #5
   126b8:	movt	r1, #1
   126bc:	bl	11414 <dcgettext@plt>
   126c0:	mov	r2, r0
   126c4:	mov	r0, #0
   126c8:	mov	r1, #0
   126cc:	mov	r3, r4
   126d0:	bl	114bc <error@plt>
   126d4:	ldr	r0, [sp, #52]	; 0x34
   126d8:	cmp	r0, #0
   126dc:	blt	1273c <__assert_fail@plt+0x1058>
   126e0:	ldr	r8, [sp, #48]	; 0x30
   126e4:	mov	r4, r0
   126e8:	mov	r1, r8
   126ec:	bl	13918 <__assert_fail@plt+0x2234>
   126f0:	str	r0, [fp, #-64]	; 0xffffffc0
   126f4:	mov	r0, r4
   126f8:	bl	116d8 <close@plt>
   126fc:	cmp	r0, #0
   12700:	beq	12744 <__assert_fail@plt+0x1060>
   12704:	bl	11558 <__errno_location@plt>
   12708:	ldr	r4, [r0]
   1270c:	movw	r1, #44566	; 0xae16
   12710:	mov	r0, #0
   12714:	mov	r2, #5
   12718:	mov	r6, #0
   1271c:	movt	r1, #1
   12720:	bl	11414 <dcgettext@plt>
   12724:	mov	r2, r0
   12728:	mov	r0, #0
   1272c:	mov	r1, r4
   12730:	mov	r3, r8
   12734:	bl	114bc <error@plt>
   12738:	b	12754 <__assert_fail@plt+0x1070>
   1273c:	ldr	r8, [sp, #48]	; 0x30
   12740:	b	12758 <__assert_fail@plt+0x1074>
   12744:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12748:	clz	r0, r0
   1274c:	lsr	r0, r0, #5
   12750:	and	r6, r6, r0
   12754:	ldr	r4, [fp, #-60]	; 0xffffffc4
   12758:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1275c:	bl	143a4 <__assert_fail@plt+0x2cc0>
   12760:	ldr	r0, [sp, #28]
   12764:	bl	143a4 <__assert_fail@plt+0x2cc0>
   12768:	mov	r0, r8
   1276c:	bl	143a4 <__assert_fail@plt+0x2cc0>
   12770:	mov	r0, r4
   12774:	bl	143a4 <__assert_fail@plt+0x2cc0>
   12778:	add	sl, sl, #1
   1277c:	and	r7, r7, r6
   12780:	cmp	sl, r5
   12784:	blt	11ed0 <__assert_fail@plt+0x7ec>
   12788:	eor	r0, r7, #1
   1278c:	sub	sp, fp, #28
   12790:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12794:	movw	r0, #44132	; 0xac64
   12798:	movw	r1, #44650	; 0xae6a
   1279c:	movw	r3, #44662	; 0xae76
   127a0:	mov	r2, #1000	; 0x3e8
   127a4:	movt	r0, #1
   127a8:	movt	r1, #1
   127ac:	movt	r3, #1
   127b0:	bl	116e4 <__assert_fail@plt>
   127b4:	cmn	r0, #3
   127b8:	bne	12804 <__assert_fail@plt+0x1120>
   127bc:	movw	r0, #49488	; 0xc150
   127c0:	movw	r2, #43650	; 0xaa82
   127c4:	mov	r1, #0
   127c8:	movt	r0, #2
   127cc:	movt	r2, #1
   127d0:	str	r1, [sp, #4]
   127d4:	movw	r1, #43496	; 0xa9e8
   127d8:	ldr	r3, [r0]
   127dc:	movw	r0, #49588	; 0xc1b4
   127e0:	str	r2, [sp]
   127e4:	movw	r2, #43636	; 0xaa74
   127e8:	movt	r1, #1
   127ec:	movt	r0, #2
   127f0:	movt	r2, #1
   127f4:	ldr	r0, [r0]
   127f8:	bl	18108 <__assert_fail@plt+0x6a24>
   127fc:	mov	r0, #0
   12800:	bl	11528 <exit@plt>
   12804:	cmn	r0, #2
   12808:	bne	12814 <__assert_fail@plt+0x1130>
   1280c:	mov	r0, #0
   12810:	bl	117e0 <__assert_fail@plt+0xfc>
   12814:	mov	r0, #1
   12818:	bl	117e0 <__assert_fail@plt+0xfc>
   1281c:	movw	r1, #43561	; 0xaa29
   12820:	mov	r0, #0
   12824:	mov	r2, #5
   12828:	movt	r1, #1
   1282c:	bl	11414 <dcgettext@plt>
   12830:	mov	r2, r0
   12834:	mov	r0, #1
   12838:	mov	r1, #0
   1283c:	bl	114bc <error@plt>
   12840:	movw	r1, #43662	; 0xaa8e
   12844:	mov	r0, #0
   12848:	mov	r2, #5
   1284c:	movt	r1, #1
   12850:	bl	11414 <dcgettext@plt>
   12854:	mov	r2, r0
   12858:	mov	r0, #0
   1285c:	mov	r1, #0
   12860:	bl	114bc <error@plt>
   12864:	mov	r0, #1
   12868:	bl	117e0 <__assert_fail@plt+0xfc>
   1286c:	movw	r4, #43683	; 0xaaa3
   12870:	cmp	r8, #0
   12874:	movt	r4, #1
   12878:	movne	r4, r8
   1287c:	bl	11558 <__errno_location@plt>
   12880:	ldr	r5, [r0]
   12884:	mov	r0, #0
   12888:	mov	r1, #3
   1288c:	mov	r2, r4
   12890:	bl	16c74 <__assert_fail@plt+0x5590>
   12894:	movw	r2, #45347	; 0xb123
   12898:	mov	r3, r0
   1289c:	mov	r0, #1
   128a0:	mov	r1, r5
   128a4:	movt	r2, #1
   128a8:	bl	114bc <error@plt>
   128ac:	movw	r0, #49600	; 0xc1c0
   128b0:	movt	r0, #2
   128b4:	ldr	r0, [r0]
   128b8:	b	1718c <__assert_fail@plt+0x5aa8>
   128bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128c0:	add	fp, sp, #28
   128c4:	sub	sp, sp, #148	; 0x94
   128c8:	sub	sp, sp, #2048	; 0x800
   128cc:	mov	r4, r0
   128d0:	ldrb	r0, [r3, #20]
   128d4:	mov	r6, r3
   128d8:	mov	r5, r1
   128dc:	str	r2, [sp, #116]	; 0x74
   128e0:	cmp	r0, #0
   128e4:	beq	128f8 <__assert_fail@plt+0x1214>
   128e8:	ldrb	r0, [r6, #22]
   128ec:	ldr	r1, [r6, #4]
   128f0:	add	r7, r1, r0
   128f4:	b	128fc <__assert_fail@plt+0x1218>
   128f8:	mov	r7, #0
   128fc:	add	r2, sp, #120	; 0x78
   12900:	mov	r0, #3
   12904:	mov	r1, r4
   12908:	bl	1145c <__fxstat64@plt>
   1290c:	cmp	r0, #0
   12910:	beq	12944 <__assert_fail@plt+0x1260>
   12914:	bl	11558 <__errno_location@plt>
   12918:	ldr	r4, [r0]
   1291c:	movw	r1, #44225	; 0xacc1
   12920:	mov	r0, #0
   12924:	mov	r2, #5
   12928:	mov	sl, #0
   1292c:	movt	r1, #1
   12930:	bl	11414 <dcgettext@plt>
   12934:	mov	r2, r0
   12938:	mov	r0, #0
   1293c:	mov	r1, r4
   12940:	b	129a8 <__assert_fail@plt+0x12c4>
   12944:	ldr	r0, [sp, #136]	; 0x88
   12948:	and	r1, r0, #61440	; 0xf000
   1294c:	cmp	r1, #8192	; 0x2000
   12950:	bne	12968 <__assert_fail@plt+0x1284>
   12954:	mov	r0, r4
   12958:	bl	116a8 <isatty@plt>
   1295c:	cmp	r0, #0
   12960:	bne	12984 <__assert_fail@plt+0x12a0>
   12964:	ldr	r0, [sp, #136]	; 0x88
   12968:	and	r0, r0, #61440	; 0xf000
   1296c:	cmp	r0, #49152	; 0xc000
   12970:	beq	12984 <__assert_fail@plt+0x12a0>
   12974:	cmp	r0, #32768	; 0x8000
   12978:	beq	129bc <__assert_fail@plt+0x12d8>
   1297c:	cmp	r0, #4096	; 0x1000
   12980:	bne	129c8 <__assert_fail@plt+0x12e4>
   12984:	movw	r1, #44242	; 0xacd2
   12988:	mov	sl, #0
   1298c:	movt	r1, #1
   12990:	mov	r0, #0
   12994:	mov	r2, #5
   12998:	bl	11414 <dcgettext@plt>
   1299c:	mov	r2, r0
   129a0:	mov	r0, #0
   129a4:	mov	r1, #0
   129a8:	mov	r3, r5
   129ac:	bl	114bc <error@plt>
   129b0:	and	r0, sl, #1
   129b4:	sub	sp, fp, #28
   129b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129bc:	ldr	r0, [sp, #172]	; 0xac
   129c0:	cmn	r0, #1
   129c4:	ble	12bb8 <__assert_fail@plt+0x14d4>
   129c8:	ldr	r0, [r6, #4]
   129cc:	mov	r1, #4
   129d0:	bl	18424 <__assert_fail@plt+0x6d40>
   129d4:	str	r0, [sp, #112]	; 0x70
   129d8:	ldr	r0, [sp, #136]	; 0x88
   129dc:	ldr	ip, [r6, #8]
   129e0:	ldr	lr, [r6, #12]
   129e4:	str	r4, [sp, #92]	; 0x5c
   129e8:	str	r7, [sp, #52]	; 0x34
   129ec:	str	r5, [sp, #84]	; 0x54
   129f0:	and	r0, r0, #61440	; 0xf000
   129f4:	and	r1, ip, lr
   129f8:	cmn	r1, #1
   129fc:	bne	12a2c <__assert_fail@plt+0x1348>
   12a00:	cmp	r0, #32768	; 0x8000
   12a04:	bne	12adc <__assert_fail@plt+0x13f8>
   12a08:	ldrb	r0, [r6, #21]
   12a0c:	ldr	r9, [sp, #168]	; 0xa8
   12a10:	ldr	sl, [sp, #172]	; 0xac
   12a14:	mov	r7, #0
   12a18:	cmp	r0, #0
   12a1c:	beq	12bc8 <__assert_fail@plt+0x14e4>
   12a20:	str	sl, [sp, #64]	; 0x40
   12a24:	str	r9, [sp, #68]	; 0x44
   12a28:	b	12ac4 <__assert_fail@plt+0x13e0>
   12a2c:	mov	r7, #0
   12a30:	cmp	r0, #32768	; 0x8000
   12a34:	str	ip, [sp, #68]	; 0x44
   12a38:	str	lr, [sp, #64]	; 0x40
   12a3c:	bne	12ac4 <__assert_fail@plt+0x13e0>
   12a40:	ldr	r1, [sp, #176]	; 0xb0
   12a44:	mov	r7, #0
   12a48:	ldr	r0, [sp, #168]	; 0xa8
   12a4c:	ldr	r5, [sp, #172]	; 0xac
   12a50:	subs	r2, r1, #536870913	; 0x20000001
   12a54:	rscs	r2, r7, r1, asr #31
   12a58:	mov	r2, #0
   12a5c:	movwcc	r2, #1
   12a60:	rsbs	r3, r1, #0
   12a64:	sbcs	r3, r7, r1, asr #31
   12a68:	mov	r3, #0
   12a6c:	movwlt	r3, #1
   12a70:	ands	r2, r3, r2
   12a74:	asrne	r2, r1, #31
   12a78:	moveq	r1, #512	; 0x200
   12a7c:	subs	r3, r1, ip
   12a80:	sbcs	r3, r2, lr
   12a84:	mov	r3, #0
   12a88:	movwlt	r3, #1
   12a8c:	cmp	r3, #0
   12a90:	moveq	r1, ip
   12a94:	moveq	r2, lr
   12a98:	subs	r1, r0, r1
   12a9c:	sbcs	r1, r5, r2
   12aa0:	movwlt	r7, #1
   12aa4:	cmp	r7, #0
   12aa8:	moveq	r5, r7
   12aac:	movne	r7, r0
   12ab0:	ldr	r2, [r6, #4]
   12ab4:	str	r6, [sp, #56]	; 0x38
   12ab8:	cmp	r2, #0
   12abc:	bne	12b34 <__assert_fail@plt+0x1450>
   12ac0:	b	12d80 <__assert_fail@plt+0x169c>
   12ac4:	mov	r5, #0
   12ac8:	ldr	r2, [r6, #4]
   12acc:	str	r6, [sp, #56]	; 0x38
   12ad0:	cmp	r2, #0
   12ad4:	bne	12b34 <__assert_fail@plt+0x1450>
   12ad8:	b	12d80 <__assert_fail@plt+0x169c>
   12adc:	mov	r0, #2
   12ae0:	mov	r2, #0
   12ae4:	mov	r3, #0
   12ae8:	mov	r7, #0
   12aec:	str	r0, [sp]
   12af0:	mov	r0, r4
   12af4:	bl	11480 <lseek64@plt>
   12af8:	subs	r2, r0, #1
   12afc:	mov	r5, #0
   12b00:	sbcs	r2, r1, #0
   12b04:	mov	r2, #0
   12b08:	movwlt	r2, #1
   12b0c:	cmp	r2, #0
   12b10:	mvn	r2, #0
   12b14:	movne	r1, r2
   12b18:	movne	r0, r2
   12b1c:	str	r1, [sp, #64]	; 0x40
   12b20:	str	r0, [sp, #68]	; 0x44
   12b24:	ldr	r2, [r6, #4]
   12b28:	str	r6, [sp, #56]	; 0x38
   12b2c:	cmp	r2, #0
   12b30:	beq	12d80 <__assert_fail@plt+0x169c>
   12b34:	ldr	r1, [sp, #112]	; 0x70
   12b38:	movw	r9, #44960	; 0xafa0
   12b3c:	mov	r6, #0
   12b40:	mov	sl, r2
   12b44:	str	r2, [sp, #108]	; 0x6c
   12b48:	movt	r9, #1
   12b4c:	mov	r4, r9
   12b50:	b	12b5c <__assert_fail@plt+0x1478>
   12b54:	add	sl, r8, sl
   12b58:	sub	r6, r6, r8
   12b5c:	ldr	r8, [r4], #4
   12b60:	cmp	r8, #0
   12b64:	mvneq	r8, #1
   12b68:	addeq	r4, r9, #4
   12b6c:	cmn	r8, #1
   12b70:	bgt	12b84 <__assert_fail@plt+0x14a0>
   12b74:	rsb	r0, r8, #0
   12b78:	cmp	sl, r0
   12b7c:	bhi	12b54 <__assert_fail@plt+0x1470>
   12b80:	b	12cec <__assert_fail@plt+0x1608>
   12b84:	cmp	sl, r8
   12b88:	bcc	12cdc <__assert_fail@plt+0x15f8>
   12b8c:	lsl	r2, r8, #2
   12b90:	mov	r0, r1
   12b94:	str	r1, [sp, #104]	; 0x68
   12b98:	mov	r1, r4
   12b9c:	bl	113cc <memcpy@plt>
   12ba0:	ldr	r1, [sp, #104]	; 0x68
   12ba4:	ldr	r2, [sp, #108]	; 0x6c
   12ba8:	sub	sl, sl, r8
   12bac:	add	r4, r4, r8, lsl #2
   12bb0:	add	r1, r1, r8, lsl #2
   12bb4:	b	12b5c <__assert_fail@plt+0x1478>
   12bb8:	movw	r1, #44264	; 0xace8
   12bbc:	mov	sl, #0
   12bc0:	movt	r1, #1
   12bc4:	b	12990 <__assert_fail@plt+0x12ac>
   12bc8:	ldr	r0, [sp, #176]	; 0xb0
   12bcc:	mov	r7, #0
   12bd0:	subs	r1, r0, #536870913	; 0x20000001
   12bd4:	mov	r4, r0
   12bd8:	rscs	r1, r7, r0, asr #31
   12bdc:	mov	r1, #0
   12be0:	movwcc	r1, #1
   12be4:	rsbs	r2, r0, #0
   12be8:	sbcs	r2, r7, r0, asr #31
   12bec:	mov	r2, #0
   12bf0:	movwlt	r2, #1
   12bf4:	ands	r8, r2, r1
   12bf8:	mov	r1, sl
   12bfc:	asrne	r8, r0, #31
   12c00:	moveq	r4, #512	; 0x200
   12c04:	mov	r0, r9
   12c08:	mov	r2, r4
   12c0c:	mov	r3, r8
   12c10:	bl	1a008 <__assert_fail@plt+0x8924>
   12c14:	orrs	r0, r9, sl
   12c18:	beq	12c98 <__assert_fail@plt+0x15b4>
   12c1c:	subs	r1, r9, r4
   12c20:	mov	r7, #0
   12c24:	mov	r0, #0
   12c28:	sbcs	r1, sl, r8
   12c2c:	movwlt	r7, #1
   12c30:	cmp	r7, #0
   12c34:	mov	r5, r7
   12c38:	movne	r5, sl
   12c3c:	movne	r7, r9
   12c40:	orrs	r1, r2, r3
   12c44:	beq	12cc0 <__assert_fail@plt+0x15dc>
   12c48:	subs	ip, r4, r2
   12c4c:	mvn	r1, r9
   12c50:	sbc	r2, r8, r3
   12c54:	mvn	r3, #-2147483648	; 0x80000000
   12c58:	subs	r4, ip, r1
   12c5c:	sub	r3, r3, sl
   12c60:	sbcs	r4, r2, r3
   12c64:	movwlt	r0, #1
   12c68:	cmp	r0, #0
   12c6c:	movne	r1, ip
   12c70:	movne	r3, r2
   12c74:	adds	r9, r1, r9
   12c78:	adc	sl, r3, sl
   12c7c:	str	r9, [sp, #68]	; 0x44
   12c80:	str	sl, [sp, #64]	; 0x40
   12c84:	ldr	r2, [r6, #4]
   12c88:	str	r6, [sp, #56]	; 0x38
   12c8c:	cmp	r2, #0
   12c90:	bne	12b34 <__assert_fail@plt+0x1450>
   12c94:	b	12d80 <__assert_fail@plt+0x169c>
   12c98:	mov	r0, #0
   12c9c:	mov	r5, #0
   12ca0:	str	r0, [sp, #68]	; 0x44
   12ca4:	mov	r0, #0
   12ca8:	str	r0, [sp, #64]	; 0x40
   12cac:	ldr	r2, [r6, #4]
   12cb0:	str	r6, [sp, #56]	; 0x38
   12cb4:	cmp	r2, #0
   12cb8:	bne	12b34 <__assert_fail@plt+0x1450>
   12cbc:	b	12d80 <__assert_fail@plt+0x169c>
   12cc0:	str	sl, [sp, #64]	; 0x40
   12cc4:	str	r9, [sp, #68]	; 0x44
   12cc8:	ldr	r2, [r6, #4]
   12ccc:	str	r6, [sp, #56]	; 0x38
   12cd0:	cmp	r2, #0
   12cd4:	bne	12b34 <__assert_fail@plt+0x1450>
   12cd8:	b	12d80 <__assert_fail@plt+0x169c>
   12cdc:	cmp	sl, #2
   12ce0:	addcs	r0, sl, sl, lsl #1
   12ce4:	cmpcs	r0, r8
   12ce8:	bcs	12da8 <__assert_fail@plt+0x16c4>
   12cec:	add	r6, r6, sl
   12cf0:	sub	r9, r6, #1
   12cf4:	sub	r4, r2, r6
   12cf8:	sub	r8, r2, #1
   12cfc:	mov	sl, #0
   12d00:	mov	r6, r9
   12d04:	cmp	r6, r9
   12d08:	bls	12d54 <__assert_fail@plt+0x1670>
   12d0c:	sub	r0, r4, sl
   12d10:	subs	r2, r0, #1
   12d14:	mov	r0, #0
   12d18:	sbc	r3, r0, #0
   12d1c:	ldr	r0, [sp, #116]	; 0x74
   12d20:	bl	16fa0 <__assert_fail@plt+0x58bc>
   12d24:	ldr	r3, [sp, #112]	; 0x70
   12d28:	add	r0, sl, r0
   12d2c:	ldr	r1, [r3, r0, lsl #2]
   12d30:	ldr	r2, [r3, sl, lsl #2]
   12d34:	str	r1, [r3, sl, lsl #2]
   12d38:	str	r2, [r3, r0, lsl #2]
   12d3c:	ldr	r2, [sp, #108]	; 0x6c
   12d40:	add	sl, sl, #1
   12d44:	sub	r6, r6, r9
   12d48:	cmp	sl, r2
   12d4c:	bne	12d04 <__assert_fail@plt+0x1620>
   12d50:	b	12d80 <__assert_fail@plt+0x169c>
   12d54:	ldr	r1, [sp, #112]	; 0x70
   12d58:	add	r6, r8, r6
   12d5c:	ldr	r0, [r1, sl, lsl #2]
   12d60:	str	r0, [r1, r4, lsl #2]
   12d64:	mvn	r0, #0
   12d68:	add	r4, r4, #1
   12d6c:	str	r0, [r1, sl, lsl #2]
   12d70:	add	sl, sl, #1
   12d74:	sub	r6, r6, r9
   12d78:	cmp	sl, r2
   12d7c:	bne	12d04 <__assert_fail@plt+0x1620>
   12d80:	ldr	r0, [sp, #116]	; 0x74
   12d84:	bl	16f98 <__assert_fail@plt+0x58b4>
   12d88:	ldr	r9, [sp, #92]	; 0x5c
   12d8c:	ldr	r2, [sp, #56]	; 0x38
   12d90:	ldr	r3, [sp, #52]	; 0x34
   12d94:	ldr	r4, [sp, #68]	; 0x44
   12d98:	ldr	r6, [sp, #64]	; 0x40
   12d9c:	mov	sl, #1
   12da0:	str	r0, [sp, #60]	; 0x3c
   12da4:	b	12e00 <__assert_fail@plt+0x171c>
   12da8:	cmp	r8, sl
   12dac:	beq	12ddc <__assert_fail@plt+0x16f8>
   12db0:	asr	r0, r8, #31
   12db4:	subs	r2, r8, #1
   12db8:	mov	r9, r1
   12dbc:	sbc	r3, r0, #0
   12dc0:	ldr	r0, [sp, #116]	; 0x74
   12dc4:	bl	16fa0 <__assert_fail@plt+0x58bc>
   12dc8:	ldr	r2, [sp, #108]	; 0x6c
   12dcc:	subs	r0, r0, sl
   12dd0:	sbcs	r0, r1, #0
   12dd4:	mov	r1, r9
   12dd8:	bcs	12de8 <__assert_fail@plt+0x1704>
   12ddc:	ldr	r0, [r4]
   12de0:	sub	sl, sl, #1
   12de4:	str	r0, [r1], #4
   12de8:	sub	r8, r8, #1
   12dec:	add	r4, r4, #4
   12df0:	cmp	sl, #0
   12df4:	bne	12da8 <__assert_fail@plt+0x16c4>
   12df8:	b	12cf0 <__assert_fail@plt+0x160c>
   12dfc:	mov	r5, #0
   12e00:	orrs	r0, r7, r5
   12e04:	mov	r8, #0
   12e08:	bne	12e2c <__assert_fail@plt+0x1748>
   12e0c:	orrs	r0, r4, r6
   12e10:	mov	r7, r4
   12e14:	str	r6, [sp, #108]	; 0x6c
   12e18:	mov	r4, #0
   12e1c:	mov	r6, #0
   12e20:	mov	r8, r3
   12e24:	bne	12e30 <__assert_fail@plt+0x174c>
   12e28:	b	137a8 <__assert_fail@plt+0x20c4>
   12e2c:	str	r5, [sp, #108]	; 0x6c
   12e30:	ldr	r0, [r2, #4]
   12e34:	ldrb	r1, [r2, #22]
   12e38:	str	r7, [sp, #104]	; 0x68
   12e3c:	mov	r7, #0
   12e40:	mov	r5, #0
   12e44:	cmn	r0, r1
   12e48:	beq	12e00 <__assert_fail@plt+0x171c>
   12e4c:	mov	r1, #0
   12e50:	str	r4, [sp, #68]	; 0x44
   12e54:	str	r6, [sp, #64]	; 0x40
   12e58:	cmp	r1, r0
   12e5c:	str	sl, [sp, #36]	; 0x24
   12e60:	bcs	12eb8 <__assert_fail@plt+0x17d4>
   12e64:	ldr	r0, [sp, #112]	; 0x70
   12e68:	ldr	r7, [r0, r1, lsl #2]
   12e6c:	add	r1, r1, #1
   12e70:	str	r1, [sp, #48]	; 0x30
   12e74:	bl	1154c <getpagesize@plt>
   12e78:	ldr	r5, [sp, #104]	; 0x68
   12e7c:	cmp	r7, #1
   12e80:	str	r7, [sp, #80]	; 0x50
   12e84:	blt	12ed8 <__assert_fail@plt+0x17f4>
   12e88:	mov	r2, r7
   12e8c:	lsr	r1, r7, #4
   12e90:	bfc	r2, #12, #20
   12e94:	orr	r2, r2, r2, lsl #12
   12e98:	eor	r1, r1, r2, lsr #8
   12e9c:	eor	r2, r7, r7, lsr #4
   12ea0:	orr	r1, r2, r1
   12ea4:	tst	r1, #255	; 0xff
   12ea8:	mov	r1, #65536	; 0x10000
   12eac:	movwne	r1, #61440	; 0xf000
   12eb0:	mov	r7, r1
   12eb4:	b	12edc <__assert_fail@plt+0x17f8>
   12eb8:	add	r1, r1, #1
   12ebc:	mov	r0, #0
   12ec0:	mov	r7, #65536	; 0x10000
   12ec4:	str	r1, [sp, #48]	; 0x30
   12ec8:	str	r0, [sp, #80]	; 0x50
   12ecc:	bl	1154c <getpagesize@plt>
   12ed0:	ldr	r5, [sp, #104]	; 0x68
   12ed4:	b	12edc <__assert_fail@plt+0x17f8>
   12ed8:	mov	r7, #65536	; 0x10000
   12edc:	ldr	r3, [sp, #108]	; 0x6c
   12ee0:	subs	r1, r5, r7
   12ee4:	sbcs	r1, r3, #0
   12ee8:	mov	r1, #0
   12eec:	movwlt	r1, #1
   12ef0:	rsbs	r2, r5, #0
   12ef4:	rscs	r2, r3, #0
   12ef8:	mov	r2, #0
   12efc:	movwlt	r2, #1
   12f00:	and	r6, r2, r1
   12f04:	movw	r2, #43691	; 0xaaab
   12f08:	orr	r1, r7, #2
   12f0c:	movt	r2, #43690	; 0xaaaa
   12f10:	umull	r1, r2, r1, r2
   12f14:	lsr	r1, r2, #1
   12f18:	add	sl, r1, r1, lsl #1
   12f1c:	mov	r1, sl
   12f20:	bl	182c4 <__assert_fail@plt+0x6be0>
   12f24:	cmp	r6, #0
   12f28:	str	r0, [sp, #116]	; 0x74
   12f2c:	str	r6, [sp, #100]	; 0x64
   12f30:	bne	12f60 <__assert_fail@plt+0x187c>
   12f34:	mov	r0, r9
   12f38:	mov	r1, #3
   12f3c:	bl	1417c <__assert_fail@plt+0x2a98>
   12f40:	cmp	r0, #1
   12f44:	blt	12f60 <__assert_fail@plt+0x187c>
   12f48:	orr	r2, r0, #65536	; 0x10000
   12f4c:	cmp	r2, r0
   12f50:	beq	12f60 <__assert_fail@plt+0x187c>
   12f54:	mov	r0, r9
   12f58:	mov	r1, #4
   12f5c:	bl	1417c <__assert_fail@plt+0x2a98>
   12f60:	ldr	r0, [sp, #136]	; 0x88
   12f64:	ldr	r6, [sp, #80]	; 0x50
   12f68:	and	r0, r0, #61440	; 0xf000
   12f6c:	cmp	r0, #8192	; 0x2000
   12f70:	bne	12fa4 <__assert_fail@plt+0x18c0>
   12f74:	mov	r0, #1
   12f78:	movw	r1, #27905	; 0x6d01
   12f7c:	add	lr, sp, #768	; 0x300
   12f80:	add	r2, sp, #880	; 0x370
   12f84:	str	r0, [sp, #884]	; 0x374
   12f88:	mov	r0, #6
   12f8c:	movt	r1, #16392	; 0x4008
   12f90:	strh	r0, [lr, #112]	; 0x70
   12f94:	mov	r0, r9
   12f98:	bl	11474 <ioctl@plt>
   12f9c:	cmp	r0, #0
   12fa0:	beq	12fd0 <__assert_fail@plt+0x18ec>
   12fa4:	mov	r0, #0
   12fa8:	mov	r2, #0
   12fac:	mov	r3, #0
   12fb0:	str	r0, [sp]
   12fb4:	mov	r0, r9
   12fb8:	bl	11480 <lseek64@plt>
   12fbc:	subs	r2, r0, #1
   12fc0:	sbcs	r2, r1, #0
   12fc4:	bge	138cc <__assert_fail@plt+0x21e8>
   12fc8:	orrs	r0, r0, r1
   12fcc:	bne	138dc <__assert_fail@plt+0x21f8>
   12fd0:	cmp	r6, #0
   12fd4:	str	r7, [sp, #72]	; 0x48
   12fd8:	blt	130b4 <__assert_fail@plt+0x19d0>
   12fdc:	mov	r0, r6
   12fe0:	ldr	r6, [sp, #116]	; 0x74
   12fe4:	mov	r2, #3
   12fe8:	lsr	r9, r0, #4
   12fec:	strb	r0, [r6, #2]
   12ff0:	bfc	r0, #12, #20
   12ff4:	strb	r9, [r6]
   12ff8:	orr	r0, r0, r0, lsl #12
   12ffc:	lsr	r0, r0, #8
   13000:	strb	r0, [r6, #1]
   13004:	subs	r0, r5, sl
   13008:	ldr	r0, [sp, #108]	; 0x6c
   1300c:	sbcs	r0, r0, #0
   13010:	movcc	sl, r5
   13014:	cmp	sl, #6
   13018:	bcc	13044 <__assert_fail@plt+0x1960>
   1301c:	lsr	r7, sl, #1
   13020:	mov	r5, #3
   13024:	add	r0, r6, r5
   13028:	mov	r1, r6
   1302c:	mov	r2, r5
   13030:	bl	113cc <memcpy@plt>
   13034:	lsl	r2, r5, #1
   13038:	cmp	r7, r5, lsl #1
   1303c:	mov	r5, r2
   13040:	bcs	13024 <__assert_fail@plt+0x1940>
   13044:	cmp	sl, r2
   13048:	bls	1305c <__assert_fail@plt+0x1978>
   1304c:	ldr	r1, [sp, #116]	; 0x74
   13050:	add	r0, r1, r2
   13054:	sub	r2, sl, r2
   13058:	bl	113cc <memcpy@plt>
   1305c:	ldr	r6, [sp, #80]	; 0x50
   13060:	tst	r6, #4096	; 0x1000
   13064:	beq	130dc <__assert_fail@plt+0x19f8>
   13068:	ldr	r5, [sp, #104]	; 0x68
   1306c:	cmp	sl, #0
   13070:	beq	130e0 <__assert_fail@plt+0x19fc>
   13074:	mvn	r0, #127	; 0x7f
   13078:	cmp	sl, #512	; 0x200
   1307c:	eor	r9, r9, r0
   13080:	ldr	r0, [sp, #116]	; 0x74
   13084:	strb	r9, [r0]
   13088:	bls	130e0 <__assert_fail@plt+0x19fc>
   1308c:	ldr	r2, [sp, #116]	; 0x74
   13090:	mov	r0, #512	; 0x200
   13094:	ldrb	r1, [r2, r0]
   13098:	eor	r1, r1, #128	; 0x80
   1309c:	strb	r1, [r2, r0]
   130a0:	add	r0, r0, #512	; 0x200
   130a4:	cmp	r0, sl
   130a8:	bcc	13094 <__assert_fail@plt+0x19b0>
   130ac:	ldrb	r9, [r2]
   130b0:	b	130e0 <__assert_fail@plt+0x19fc>
   130b4:	mov	r0, #0
   130b8:	strb	r0, [fp, #-34]	; 0xffffffde
   130bc:	movw	r0, #28015	; 0x6d6f
   130c0:	strh	r0, [fp, #-36]	; 0xffffffdc
   130c4:	movw	r0, #24946	; 0x6172
   130c8:	movt	r0, #25710	; 0x646e
   130cc:	str	r0, [fp, #-40]	; 0xffffffd8
   130d0:	cmp	r8, #0
   130d4:	bne	1311c <__assert_fail@plt+0x1a38>
   130d8:	b	13160 <__assert_fail@plt+0x1a7c>
   130dc:	ldr	r5, [sp, #104]	; 0x68
   130e0:	ldr	r1, [sp, #116]	; 0x74
   130e4:	movw	r3, #44484	; 0xadc4
   130e8:	uxtb	r2, r9
   130ec:	str	r2, [sp]
   130f0:	mov	r2, #7
   130f4:	movt	r3, #1
   130f8:	ldrb	r0, [r1, #1]
   130fc:	ldrb	r1, [r1, #2]
   13100:	stmib	sp, {r0, r1}
   13104:	sub	r0, fp, #40	; 0x28
   13108:	mov	r1, #1
   1310c:	bl	11564 <__sprintf_chk@plt>
   13110:	ldr	r9, [sp, #92]	; 0x5c
   13114:	cmp	r8, #0
   13118:	beq	13160 <__assert_fail@plt+0x1a7c>
   1311c:	movw	r1, #44330	; 0xad2a
   13120:	mov	r0, #0
   13124:	mov	r2, #5
   13128:	movt	r1, #1
   1312c:	bl	11414 <dcgettext@plt>
   13130:	mov	r2, r0
   13134:	ldr	r0, [sp, #48]	; 0x30
   13138:	mov	r1, #0
   1313c:	stm	sp, {r0, r8}
   13140:	sub	r0, fp, #40	; 0x28
   13144:	ldr	r3, [sp, #84]	; 0x54
   13148:	str	r0, [sp, #8]
   1314c:	mov	r0, #0
   13150:	bl	114bc <error@plt>
   13154:	mov	r0, #0
   13158:	bl	113f0 <time@plt>
   1315c:	add	r0, r0, #5
   13160:	str	r0, [sp, #40]	; 0x28
   13164:	movw	r0, #43207	; 0xa8c7
   13168:	str	r5, [sp, #76]	; 0x4c
   1316c:	ldr	r5, [sp, #116]	; 0x74
   13170:	str	r6, [sp, #80]	; 0x50
   13174:	mov	sl, #0
   13178:	mov	r4, #0
   1317c:	mov	r6, #0
   13180:	movt	r0, #1
   13184:	str	r0, [sp, #32]
   13188:	mov	r0, #0
   1318c:	str	r0, [sp, #44]	; 0x2c
   13190:	ldr	r0, [sp, #108]	; 0x6c
   13194:	str	r0, [sp, #88]	; 0x58
   13198:	b	131b4 <__assert_fail@plt+0x1ad0>
   1319c:	ldr	r4, [sp, #28]
   131a0:	ldr	r6, [sp, #96]	; 0x60
   131a4:	b	131b4 <__assert_fail@plt+0x1ad0>
   131a8:	ldr	r5, [sp, #116]	; 0x74
   131ac:	str	r7, [sp, #32]
   131b0:	b	1319c <__assert_fail@plt+0x1ab8>
   131b4:	ldr	r7, [sp, #76]	; 0x4c
   131b8:	mvn	r1, #0
   131bc:	ldr	r3, [sp, #72]	; 0x48
   131c0:	str	r6, [sp, #96]	; 0x60
   131c4:	mov	r6, r4
   131c8:	subs	r0, r1, r7
   131cc:	mov	r4, r3
   131d0:	ldr	r0, [sp, #88]	; 0x58
   131d4:	sbcs	r0, r1, r0
   131d8:	bge	1321c <__assert_fail@plt+0x1b38>
   131dc:	ldr	r1, [sp, #96]	; 0x60
   131e0:	ldr	r2, [sp, #88]	; 0x58
   131e4:	subs	r0, r7, r6
   131e8:	mov	r4, r3
   131ec:	sbc	r1, r2, r1
   131f0:	subs	r2, r0, r3
   131f4:	sbcs	r1, r1, #0
   131f8:	bge	1321c <__assert_fail@plt+0x1b38>
   131fc:	subs	r1, r7, r6
   13200:	ldr	r2, [sp, #88]	; 0x58
   13204:	ldr	r1, [sp, #96]	; 0x60
   13208:	sbcs	r1, r2, r1
   1320c:	blt	1372c <__assert_fail@plt+0x2048>
   13210:	cmp	r0, #0
   13214:	mov	r4, r0
   13218:	beq	1372c <__assert_fail@plt+0x2048>
   1321c:	ldr	r0, [sp, #80]	; 0x50
   13220:	cmn	r0, #1
   13224:	ble	1341c <__assert_fail@plt+0x1d38>
   13228:	cmp	r4, #0
   1322c:	beq	13434 <__assert_fail@plt+0x1d50>
   13230:	mvn	r1, #0
   13234:	subs	r0, r1, r7
   13238:	mov	r7, #0
   1323c:	ldr	r0, [sp, #88]	; 0x58
   13240:	sbcs	r0, r1, r0
   13244:	bge	1337c <__assert_fail@plt+0x1c98>
   13248:	add	r1, r5, r7
   1324c:	sub	r2, r4, r7
   13250:	mov	r0, r9
   13254:	bl	115ac <write@plt>
   13258:	cmp	r0, #0
   1325c:	ble	13268 <__assert_fail@plt+0x1b84>
   13260:	mov	r5, r0
   13264:	b	13368 <__assert_fail@plt+0x1c84>
   13268:	bl	11558 <__errno_location@plt>
   1326c:	ldr	r5, [r0]
   13270:	mov	r9, r0
   13274:	cmp	r5, #22
   13278:	bne	132cc <__assert_fail@plt+0x1be8>
   1327c:	ldr	r0, [sp, #100]	; 0x64
   13280:	eor	r0, r0, #1
   13284:	tst	r0, #1
   13288:	beq	132cc <__assert_fail@plt+0x1be8>
   1328c:	ldr	r9, [sp, #92]	; 0x5c
   13290:	mov	r1, #3
   13294:	mov	r0, r9
   13298:	bl	1417c <__assert_fail@plt+0x2a98>
   1329c:	mov	r1, #1
   132a0:	mov	r5, #0
   132a4:	cmp	r0, #1
   132a8:	str	r1, [sp, #100]	; 0x64
   132ac:	blt	13368 <__assert_fail@plt+0x1c84>
   132b0:	bic	r2, r0, #65536	; 0x10000
   132b4:	cmp	r2, r0
   132b8:	beq	13368 <__assert_fail@plt+0x1c84>
   132bc:	mov	r0, r9
   132c0:	mov	r1, #4
   132c4:	bl	1417c <__assert_fail@plt+0x2a98>
   132c8:	b	13368 <__assert_fail@plt+0x1c84>
   132cc:	movw	r1, #44355	; 0xad43
   132d0:	mov	r0, #0
   132d4:	mov	r2, #5
   132d8:	movt	r1, #1
   132dc:	bl	11414 <dcgettext@plt>
   132e0:	ldr	r1, [sp, #96]	; 0x60
   132e4:	mov	sl, r0
   132e8:	adds	r0, r6, r7
   132ec:	add	r2, sp, #880	; 0x370
   132f0:	adc	r1, r1, #0
   132f4:	bl	14f48 <__assert_fail@plt+0x3864>
   132f8:	ldr	r3, [sp, #84]	; 0x54
   132fc:	str	r0, [sp]
   13300:	mov	r0, #0
   13304:	mov	r1, r5
   13308:	mov	r2, sl
   1330c:	bl	114bc <error@plt>
   13310:	cmp	r5, #5
   13314:	bne	13880 <__assert_fail@plt+0x219c>
   13318:	movw	r0, #511	; 0x1ff
   1331c:	orr	r0, r7, r0
   13320:	cmp	r0, r4
   13324:	bcs	13880 <__assert_fail@plt+0x219c>
   13328:	add	r5, r0, #1
   1332c:	ldr	r0, [sp, #96]	; 0x60
   13330:	mov	r1, #0
   13334:	adds	r2, r6, r5
   13338:	str	r1, [sp]
   1333c:	adc	r3, r0, #0
   13340:	ldr	r0, [sp, #92]	; 0x5c
   13344:	bl	11480 <lseek64@plt>
   13348:	mvn	r2, #0
   1334c:	eor	r1, r1, r2
   13350:	eor	r0, r0, r2
   13354:	orrs	r0, r0, r1
   13358:	beq	13854 <__assert_fail@plt+0x2170>
   1335c:	ldr	r9, [sp, #92]	; 0x5c
   13360:	sub	r5, r5, r7
   13364:	mov	sl, #1
   13368:	add	r7, r5, r7
   1336c:	ldr	r5, [sp, #116]	; 0x74
   13370:	cmp	r4, r7
   13374:	bhi	13248 <__assert_fail@plt+0x1b64>
   13378:	b	13438 <__assert_fail@plt+0x1d54>
   1337c:	add	r1, r5, r7
   13380:	sub	r2, r4, r7
   13384:	mov	r0, r9
   13388:	bl	115ac <write@plt>
   1338c:	cmp	r0, #0
   13390:	ble	133a4 <__assert_fail@plt+0x1cc0>
   13394:	add	r7, r0, r7
   13398:	cmp	r4, r7
   1339c:	bhi	1337c <__assert_fail@plt+0x1c98>
   133a0:	b	13438 <__assert_fail@plt+0x1d54>
   133a4:	beq	13560 <__assert_fail@plt+0x1e7c>
   133a8:	bl	11558 <__errno_location@plt>
   133ac:	ldr	r5, [r0]
   133b0:	cmp	r5, #28
   133b4:	beq	13560 <__assert_fail@plt+0x1e7c>
   133b8:	cmp	r5, #22
   133bc:	bne	13814 <__assert_fail@plt+0x2130>
   133c0:	ldr	r0, [sp, #100]	; 0x64
   133c4:	eor	r0, r0, #1
   133c8:	tst	r0, #1
   133cc:	beq	13814 <__assert_fail@plt+0x2130>
   133d0:	mov	r0, r9
   133d4:	mov	r1, #3
   133d8:	bl	1417c <__assert_fail@plt+0x2a98>
   133dc:	cmp	r0, #1
   133e0:	blt	133fc <__assert_fail@plt+0x1d18>
   133e4:	bic	r2, r0, #65536	; 0x10000
   133e8:	cmp	r2, r0
   133ec:	beq	133fc <__assert_fail@plt+0x1d18>
   133f0:	mov	r0, r9
   133f4:	mov	r1, #4
   133f8:	bl	1417c <__assert_fail@plt+0x2a98>
   133fc:	ldr	r5, [sp, #116]	; 0x74
   13400:	mov	r0, #1
   13404:	str	r0, [sp, #100]	; 0x64
   13408:	mov	r0, #0
   1340c:	add	r7, r0, r7
   13410:	cmp	r4, r7
   13414:	bhi	1337c <__assert_fail@plt+0x1c98>
   13418:	b	13438 <__assert_fail@plt+0x1d54>
   1341c:	ldr	r0, [sp, #60]	; 0x3c
   13420:	mov	r1, r5
   13424:	mov	r2, r4
   13428:	bl	17358 <__assert_fail@plt+0x5c74>
   1342c:	cmp	r4, #0
   13430:	bne	13230 <__assert_fail@plt+0x1b4c>
   13434:	mov	r7, #0
   13438:	mov	r4, r6
   1343c:	ldr	r6, [sp, #96]	; 0x60
   13440:	mvn	r0, #-2147483648	; 0x80000000
   13444:	mvn	r1, r4
   13448:	eor	r0, r6, r0
   1344c:	subs	r1, r1, r7
   13450:	sbcs	r0, r0, #0
   13454:	bcc	138a0 <__assert_fail@plt+0x21bc>
   13458:	adds	r4, r4, r7
   1345c:	adc	r6, r6, #0
   13460:	cmp	r8, #0
   13464:	beq	131b4 <__assert_fail@plt+0x1ad0>
   13468:	ldr	r0, [sp, #76]	; 0x4c
   1346c:	ldr	r1, [sp, #88]	; 0x58
   13470:	eor	r0, r4, r0
   13474:	eor	r1, r6, r1
   13478:	orrs	r7, r0, r1
   1347c:	bne	13490 <__assert_fail@plt+0x1dac>
   13480:	ldr	r0, [sp, #32]
   13484:	ldrb	r0, [r0]
   13488:	cmp	r0, #0
   1348c:	bne	134a8 <__assert_fail@plt+0x1dc4>
   13490:	mov	r0, #0
   13494:	bl	113f0 <time@plt>
   13498:	ldr	r1, [sp, #40]	; 0x28
   1349c:	str	r0, [sp, #44]	; 0x2c
   134a0:	cmp	r1, r0
   134a4:	bgt	131b4 <__assert_fail@plt+0x1ad0>
   134a8:	mov	r0, #1
   134ac:	mov	r1, #0
   134b0:	add	r2, sp, #880	; 0x370
   134b4:	movw	r3, #434	; 0x1b2
   134b8:	str	r4, [sp, #28]
   134bc:	str	r6, [sp, #96]	; 0x60
   134c0:	str	r0, [sp]
   134c4:	str	r0, [sp, #8]
   134c8:	str	r1, [sp, #4]
   134cc:	str	r1, [sp, #12]
   134d0:	mov	r1, r6
   134d4:	mov	r0, r4
   134d8:	bl	143d0 <__assert_fail@plt+0x2cec>
   134dc:	mov	r4, r0
   134e0:	cmp	r7, #0
   134e4:	beq	134fc <__assert_fail@plt+0x1e18>
   134e8:	ldr	r0, [sp, #32]
   134ec:	mov	r1, r4
   134f0:	bl	11390 <strcmp@plt>
   134f4:	cmp	r0, #0
   134f8:	beq	1319c <__assert_fail@plt+0x1ab8>
   134fc:	ldr	r2, [sp, #76]	; 0x4c
   13500:	ldr	r3, [sp, #88]	; 0x58
   13504:	mvn	r1, #0
   13508:	subs	r0, r1, r2
   1350c:	sbcs	r0, r1, r3
   13510:	bge	135cc <__assert_fail@plt+0x1ee8>
   13514:	orrs	r0, r2, r3
   13518:	beq	13610 <__assert_fail@plt+0x1f2c>
   1351c:	ldr	r5, [sp, #28]
   13520:	movw	r0, #36700	; 0x8f5c
   13524:	ldr	r6, [sp, #96]	; 0x60
   13528:	movt	r0, #62914	; 0xf5c2
   1352c:	subs	r0, r0, r5
   13530:	movw	r0, #23592	; 0x5c28
   13534:	movt	r0, #655	; 0x28f
   13538:	sbcs	r0, r0, r6
   1353c:	bcc	13620 <__assert_fail@plt+0x1f3c>
   13540:	mov	r2, #100	; 0x64
   13544:	ldr	r9, [sp, #76]	; 0x4c
   13548:	umull	r0, r1, r5, r2
   1354c:	ldr	r5, [sp, #88]	; 0x58
   13550:	mla	r1, r6, r2, r1
   13554:	mov	r2, r9
   13558:	mov	r3, r5
   1355c:	b	1364c <__assert_fail@plt+0x1f68>
   13560:	ldr	r1, [sp, #96]	; 0x60
   13564:	mvn	r0, #-2147483648	; 0x80000000
   13568:	mov	r4, r6
   1356c:	ldr	r5, [sp, #116]	; 0x74
   13570:	mov	r6, r1
   13574:	eor	r0, r1, r0
   13578:	mvn	r1, r4
   1357c:	subs	r1, r1, r7
   13580:	sbcs	r0, r0, #0
   13584:	mov	r0, #0
   13588:	movwcc	r0, #1
   1358c:	adds	r1, r4, r7
   13590:	adc	r2, r6, #0
   13594:	cmp	r0, #0
   13598:	ldr	r0, [sp, #88]	; 0x58
   1359c:	moveq	r0, r2
   135a0:	str	r0, [sp, #88]	; 0x58
   135a4:	ldr	r0, [sp, #76]	; 0x4c
   135a8:	moveq	r0, r1
   135ac:	str	r0, [sp, #76]	; 0x4c
   135b0:	ldr	r0, [sp, #108]	; 0x6c
   135b4:	moveq	r0, r2
   135b8:	str	r0, [sp, #108]	; 0x6c
   135bc:	ldr	r0, [sp, #104]	; 0x68
   135c0:	moveq	r0, r1
   135c4:	str	r0, [sp, #104]	; 0x68
   135c8:	b	13440 <__assert_fail@plt+0x1d5c>
   135cc:	movw	r1, #44422	; 0xad86
   135d0:	mov	r0, #0
   135d4:	mov	r2, #5
   135d8:	movt	r1, #1
   135dc:	bl	11414 <dcgettext@plt>
   135e0:	mov	r2, r0
   135e4:	ldr	r0, [sp, #48]	; 0x30
   135e8:	mov	r1, #0
   135ec:	stm	sp, {r0, r8}
   135f0:	sub	r0, fp, #40	; 0x28
   135f4:	str	r4, [sp, #12]
   135f8:	ldr	r5, [sp, #84]	; 0x54
   135fc:	str	r0, [sp, #8]
   13600:	mov	r0, #0
   13604:	mov	r3, r5
   13608:	bl	114bc <error@plt>
   1360c:	b	136d0 <__assert_fail@plt+0x1fec>
   13610:	ldr	r9, [sp, #76]	; 0x4c
   13614:	ldr	r5, [sp, #88]	; 0x58
   13618:	mov	r6, #100	; 0x64
   1361c:	b	13654 <__assert_fail@plt+0x1f70>
   13620:	ldr	r9, [sp, #76]	; 0x4c
   13624:	ldr	r1, [sp, #88]	; 0x58
   13628:	mov	r2, #100	; 0x64
   1362c:	mov	r3, #0
   13630:	mov	r0, r9
   13634:	bl	1a0dc <__assert_fail@plt+0x89f8>
   13638:	mov	r2, r0
   1363c:	mov	r0, r5
   13640:	ldr	r5, [sp, #88]	; 0x58
   13644:	mov	r3, r1
   13648:	mov	r1, r6
   1364c:	bl	1a0dc <__assert_fail@plt+0x89f8>
   13650:	mov	r6, r0
   13654:	mov	r0, #1
   13658:	mov	r1, #0
   1365c:	add	r2, sp, #228	; 0xe4
   13660:	mov	r3, #432	; 0x1b0
   13664:	str	r0, [sp]
   13668:	str	r0, [sp, #8]
   1366c:	str	r1, [sp, #4]
   13670:	str	r1, [sp, #12]
   13674:	mov	r0, r9
   13678:	mov	r1, r5
   1367c:	bl	143d0 <__assert_fail@plt+0x2cec>
   13680:	movw	r1, #44449	; 0xada1
   13684:	mov	r5, r0
   13688:	mov	r0, #0
   1368c:	mov	r2, #5
   13690:	movt	r1, #1
   13694:	bl	11414 <dcgettext@plt>
   13698:	mov	r2, r0
   1369c:	ldr	r0, [sp, #48]	; 0x30
   136a0:	cmp	r7, #0
   136a4:	add	r1, sp, #8
   136a8:	moveq	r4, r5
   136ac:	stm	sp, {r0, r8}
   136b0:	sub	r0, fp, #40	; 0x28
   136b4:	stm	r1, {r0, r4, r5, r6}
   136b8:	mov	r0, #0
   136bc:	mov	r1, #0
   136c0:	ldr	r5, [sp, #84]	; 0x54
   136c4:	mov	r3, r5
   136c8:	bl	114bc <error@plt>
   136cc:	ldr	r9, [sp, #92]	; 0x5c
   136d0:	sub	r7, fp, #692	; 0x2b4
   136d4:	mov	r1, r4
   136d8:	mov	r2, #652	; 0x28c
   136dc:	mov	r0, r7
   136e0:	bl	11498 <__strcpy_chk@plt>
   136e4:	mov	r0, r9
   136e8:	mov	r1, r5
   136ec:	bl	13918 <__assert_fail@plt+0x2234>
   136f0:	ldr	r1, [sp, #44]	; 0x2c
   136f4:	cmp	r0, #0
   136f8:	add	r1, r1, #5
   136fc:	str	r1, [sp, #40]	; 0x28
   13700:	beq	131a8 <__assert_fail@plt+0x1ac4>
   13704:	bl	11558 <__errno_location@plt>
   13708:	ldr	r0, [r0]
   1370c:	ldr	r5, [sp, #116]	; 0x74
   13710:	ldr	r4, [sp, #28]
   13714:	mov	sl, #1
   13718:	str	r7, [sp, #32]
   1371c:	cmp	r0, #5
   13720:	bne	13910 <__assert_fail@plt+0x222c>
   13724:	ldr	r6, [sp, #96]	; 0x60
   13728:	b	131b4 <__assert_fail@plt+0x1ad0>
   1372c:	ldr	r1, [sp, #84]	; 0x54
   13730:	mov	r0, r9
   13734:	bl	13918 <__assert_fail@plt+0x2234>
   13738:	cmp	r0, #0
   1373c:	beq	13760 <__assert_fail@plt+0x207c>
   13740:	bl	11558 <__errno_location@plt>
   13744:	ldr	r0, [r0]
   13748:	cmp	r0, #5
   1374c:	bne	13910 <__assert_fail@plt+0x222c>
   13750:	mov	r0, r5
   13754:	bl	143a4 <__assert_fail@plt+0x2cc0>
   13758:	mov	sl, #0
   1375c:	b	13778 <__assert_fail@plt+0x2094>
   13760:	mov	r0, r5
   13764:	bl	143a4 <__assert_fail@plt+0x2cc0>
   13768:	mov	r0, #1
   1376c:	bic	r0, r0, sl
   13770:	ldr	sl, [sp, #36]	; 0x24
   13774:	and	sl, sl, r0
   13778:	ldr	r2, [sp, #56]	; 0x38
   1377c:	ldr	r3, [sp, #52]	; 0x34
   13780:	ldr	r4, [sp, #68]	; 0x44
   13784:	ldr	r6, [sp, #64]	; 0x40
   13788:	mov	r7, #0
   1378c:	ldrb	r1, [r2, #22]
   13790:	ldr	r0, [r2, #4]
   13794:	add	r5, r0, r1
   13798:	ldr	r1, [sp, #48]	; 0x30
   1379c:	cmp	r1, r5
   137a0:	bcc	12e58 <__assert_fail@plt+0x1774>
   137a4:	b	12dfc <__assert_fail@plt+0x1718>
   137a8:	ldr	r0, [r2, #16]
   137ac:	cmp	r0, #0
   137b0:	beq	1388c <__assert_fail@plt+0x21a8>
   137b4:	mov	r0, r9
   137b8:	mov	r2, #0
   137bc:	mov	r3, #0
   137c0:	bl	113fc <ftruncate64@plt>
   137c4:	cmp	r0, #0
   137c8:	beq	1388c <__assert_fail@plt+0x21a8>
   137cc:	ldr	r0, [sp, #136]	; 0x88
   137d0:	and	r0, r0, #61440	; 0xf000
   137d4:	cmp	r0, #32768	; 0x8000
   137d8:	bne	1388c <__assert_fail@plt+0x21a8>
   137dc:	bl	11558 <__errno_location@plt>
   137e0:	ldr	r4, [r0]
   137e4:	movw	r1, #44291	; 0xad03
   137e8:	mov	r0, #0
   137ec:	mov	r2, #5
   137f0:	mov	sl, #0
   137f4:	movt	r1, #1
   137f8:	bl	11414 <dcgettext@plt>
   137fc:	ldr	r3, [sp, #84]	; 0x54
   13800:	mov	r2, r0
   13804:	mov	r0, #0
   13808:	mov	r1, r4
   1380c:	bl	114bc <error@plt>
   13810:	b	1388c <__assert_fail@plt+0x21a8>
   13814:	movw	r1, #44355	; 0xad43
   13818:	mov	r0, #0
   1381c:	mov	r2, #5
   13820:	movt	r1, #1
   13824:	bl	11414 <dcgettext@plt>
   13828:	ldr	r1, [sp, #96]	; 0x60
   1382c:	mov	r4, r0
   13830:	adds	r0, r6, r7
   13834:	add	r2, sp, #880	; 0x370
   13838:	adc	r1, r1, #0
   1383c:	bl	14f48 <__assert_fail@plt+0x3864>
   13840:	str	r0, [sp]
   13844:	mov	r0, #0
   13848:	mov	r1, r5
   1384c:	mov	r2, r4
   13850:	b	13878 <__assert_fail@plt+0x2194>
   13854:	ldr	r4, [r9]
   13858:	movw	r1, #44386	; 0xad62
   1385c:	mov	r0, #0
   13860:	mov	r2, #5
   13864:	movt	r1, #1
   13868:	bl	11414 <dcgettext@plt>
   1386c:	mov	r2, r0
   13870:	mov	r0, #0
   13874:	mov	r1, r4
   13878:	ldr	r3, [sp, #84]	; 0x54
   1387c:	bl	114bc <error@plt>
   13880:	ldr	r0, [sp, #116]	; 0x74
   13884:	bl	143a4 <__assert_fail@plt+0x2cc0>
   13888:	mov	sl, #0
   1388c:	ldr	r0, [sp, #112]	; 0x70
   13890:	bl	143a4 <__assert_fail@plt+0x2cc0>
   13894:	and	r0, sl, #1
   13898:	sub	sp, fp, #28
   1389c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138a0:	movw	r1, #44403	; 0xad73
   138a4:	mov	r0, #0
   138a8:	mov	r2, #5
   138ac:	movt	r1, #1
   138b0:	bl	11414 <dcgettext@plt>
   138b4:	ldr	r3, [sp, #84]	; 0x54
   138b8:	mov	r2, r0
   138bc:	mov	r0, #0
   138c0:	mov	r1, #0
   138c4:	bl	114bc <error@plt>
   138c8:	b	13910 <__assert_fail@plt+0x222c>
   138cc:	bl	11558 <__errno_location@plt>
   138d0:	mov	r4, #22
   138d4:	str	r4, [r0]
   138d8:	b	138e4 <__assert_fail@plt+0x2200>
   138dc:	bl	11558 <__errno_location@plt>
   138e0:	ldr	r4, [r0]
   138e4:	movw	r1, #44312	; 0xad18
   138e8:	mov	r0, #0
   138ec:	mov	r2, #5
   138f0:	movt	r1, #1
   138f4:	bl	11414 <dcgettext@plt>
   138f8:	ldr	r3, [sp, #84]	; 0x54
   138fc:	mov	r2, r0
   13900:	mov	r0, #0
   13904:	mov	r1, r4
   13908:	bl	114bc <error@plt>
   1390c:	ldr	r5, [sp, #116]	; 0x74
   13910:	mov	r0, r5
   13914:	b	13884 <__assert_fail@plt+0x21a0>
   13918:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1391c:	add	fp, sp, #24
   13920:	mov	r8, r1
   13924:	mov	r4, r0
   13928:	bl	116c0 <fdatasync@plt>
   1392c:	mov	r6, #0
   13930:	cmp	r0, #0
   13934:	beq	1398c <__assert_fail@plt+0x22a8>
   13938:	bl	11558 <__errno_location@plt>
   1393c:	ldr	r7, [r0]
   13940:	mov	r5, r0
   13944:	cmp	r7, #22
   13948:	bhi	13994 <__assert_fail@plt+0x22b0>
   1394c:	movw	r9, #512	; 0x200
   13950:	mov	r0, #1
   13954:	movt	r9, #96	; 0x60
   13958:	tst	r9, r0, lsl r7
   1395c:	beq	13994 <__assert_fail@plt+0x22b0>
   13960:	mov	r0, r4
   13964:	bl	11384 <fsync@plt>
   13968:	cmp	r0, #0
   1396c:	beq	1398c <__assert_fail@plt+0x22a8>
   13970:	ldr	r7, [r5]
   13974:	cmp	r7, #22
   13978:	bhi	139a0 <__assert_fail@plt+0x22bc>
   1397c:	mov	r0, #1
   13980:	tst	r9, r0, lsl r7
   13984:	beq	139a0 <__assert_fail@plt+0x22bc>
   13988:	bl	11690 <sync@plt>
   1398c:	mov	r0, r6
   13990:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13994:	movw	r1, #44497	; 0xadd1
   13998:	movt	r1, #1
   1399c:	b	139a8 <__assert_fail@plt+0x22c4>
   139a0:	movw	r1, #44518	; 0xade6
   139a4:	movt	r1, #1
   139a8:	mov	r0, #0
   139ac:	mov	r2, #5
   139b0:	bl	11414 <dcgettext@plt>
   139b4:	mov	r2, r0
   139b8:	mov	r0, #0
   139bc:	mov	r1, r7
   139c0:	mov	r3, r8
   139c4:	bl	114bc <error@plt>
   139c8:	mvn	r6, #0
   139cc:	str	r7, [r5]
   139d0:	mov	r0, r6
   139d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   139d8:	mov	r0, #1
   139dc:	b	117e0 <__assert_fail@plt+0xfc>
   139e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139e4:	add	fp, sp, #28
   139e8:	sub	sp, sp, #12
   139ec:	mov	r4, r3
   139f0:	mov	r9, r2
   139f4:	mov	r7, r1
   139f8:	mov	r8, r0
   139fc:	bl	11534 <strlen@plt>
   13a00:	ldr	r6, [r7]
   13a04:	cmp	r6, #0
   13a08:	beq	13ab4 <__assert_fail@plt+0x23d0>
   13a0c:	mov	r5, r0
   13a10:	cmp	r9, #0
   13a14:	beq	13ac4 <__assert_fail@plt+0x23e0>
   13a18:	add	r0, r7, #4
   13a1c:	mvn	sl, #0
   13a20:	mov	r7, #0
   13a24:	str	r9, [sp]
   13a28:	str	r0, [sp, #8]
   13a2c:	mov	r0, #0
   13a30:	str	r0, [sp, #4]
   13a34:	mov	r0, r9
   13a38:	mov	r0, r6
   13a3c:	mov	r1, r8
   13a40:	mov	r2, r5
   13a44:	bl	116b4 <strncmp@plt>
   13a48:	cmp	r0, #0
   13a4c:	bne	13a98 <__assert_fail@plt+0x23b4>
   13a50:	mov	r0, r6
   13a54:	bl	11534 <strlen@plt>
   13a58:	cmp	r0, r5
   13a5c:	beq	13ab8 <__assert_fail@plt+0x23d4>
   13a60:	cmn	sl, #1
   13a64:	beq	13a94 <__assert_fail@plt+0x23b0>
   13a68:	ldr	r0, [sp]
   13a6c:	mov	r1, r9
   13a70:	mov	r2, r4
   13a74:	mla	r0, sl, r4, r0
   13a78:	bl	11408 <memcmp@plt>
   13a7c:	ldr	r1, [sp, #4]
   13a80:	cmp	r0, #0
   13a84:	movwne	r0, #1
   13a88:	orr	r1, r1, r0
   13a8c:	str	r1, [sp, #4]
   13a90:	b	13a98 <__assert_fail@plt+0x23b4>
   13a94:	mov	sl, r7
   13a98:	ldr	r0, [sp, #8]
   13a9c:	add	r9, r9, r4
   13aa0:	ldr	r6, [r0, r7, lsl #2]
   13aa4:	add	r7, r7, #1
   13aa8:	cmp	r6, #0
   13aac:	bne	13a38 <__assert_fail@plt+0x2354>
   13ab0:	b	13b2c <__assert_fail@plt+0x2448>
   13ab4:	mvn	r7, #0
   13ab8:	mov	r0, r7
   13abc:	sub	sp, fp, #28
   13ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ac4:	add	r4, r7, #4
   13ac8:	mov	r0, #0
   13acc:	mvn	sl, #0
   13ad0:	mov	r7, #0
   13ad4:	str	r0, [sp, #4]
   13ad8:	mov	r0, r6
   13adc:	mov	r1, r8
   13ae0:	mov	r2, r5
   13ae4:	bl	116b4 <strncmp@plt>
   13ae8:	cmp	r0, #0
   13aec:	bne	13b1c <__assert_fail@plt+0x2438>
   13af0:	mov	r0, r6
   13af4:	bl	11534 <strlen@plt>
   13af8:	cmp	r0, r5
   13afc:	beq	13ab8 <__assert_fail@plt+0x23d4>
   13b00:	ldr	r1, [sp, #4]
   13b04:	cmn	sl, #1
   13b08:	add	r0, sl, #1
   13b0c:	movwne	r0, #1
   13b10:	moveq	sl, r7
   13b14:	orr	r1, r1, r0
   13b18:	str	r1, [sp, #4]
   13b1c:	ldr	r6, [r4, r7, lsl #2]
   13b20:	add	r7, r7, #1
   13b24:	cmp	r6, #0
   13b28:	bne	13ad8 <__assert_fail@plt+0x23f4>
   13b2c:	ldr	r0, [sp, #4]
   13b30:	tst	r0, #1
   13b34:	mvnne	sl, #1
   13b38:	mov	r0, sl
   13b3c:	sub	sp, fp, #28
   13b40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b44:	push	{r4, r5, r6, r7, fp, lr}
   13b48:	add	fp, sp, #16
   13b4c:	mov	r5, r0
   13b50:	ldr	r0, [r1]
   13b54:	mvn	r4, #0
   13b58:	cmp	r0, #0
   13b5c:	beq	13b8c <__assert_fail@plt+0x24a8>
   13b60:	add	r7, r1, #4
   13b64:	mov	r6, #0
   13b68:	mov	r1, r5
   13b6c:	bl	11390 <strcmp@plt>
   13b70:	cmp	r0, #0
   13b74:	moveq	r0, r6
   13b78:	popeq	{r4, r5, r6, r7, fp, pc}
   13b7c:	ldr	r0, [r7, r6, lsl #2]
   13b80:	add	r6, r6, #1
   13b84:	cmp	r0, #0
   13b88:	bne	13b68 <__assert_fail@plt+0x2484>
   13b8c:	mov	r0, r4
   13b90:	pop	{r4, r5, r6, r7, fp, pc}
   13b94:	push	{r4, r5, r6, sl, fp, lr}
   13b98:	add	fp, sp, #16
   13b9c:	sub	sp, sp, #8
   13ba0:	mov	r4, r1
   13ba4:	movw	r1, #45287	; 0xb0e7
   13ba8:	mov	r5, r0
   13bac:	movw	r0, #45260	; 0xb0cc
   13bb0:	cmn	r2, #1
   13bb4:	mov	r2, #5
   13bb8:	movt	r0, #1
   13bbc:	movt	r1, #1
   13bc0:	moveq	r1, r0
   13bc4:	mov	r0, #0
   13bc8:	bl	11414 <dcgettext@plt>
   13bcc:	mov	r6, r0
   13bd0:	mov	r0, #0
   13bd4:	mov	r1, #8
   13bd8:	mov	r2, r4
   13bdc:	bl	16950 <__assert_fail@plt+0x526c>
   13be0:	mov	r4, r0
   13be4:	mov	r0, #1
   13be8:	mov	r1, r5
   13bec:	bl	16f10 <__assert_fail@plt+0x582c>
   13bf0:	str	r0, [sp]
   13bf4:	mov	r0, #0
   13bf8:	mov	r1, #0
   13bfc:	mov	r2, r6
   13c00:	mov	r3, r4
   13c04:	bl	114bc <error@plt>
   13c08:	sub	sp, fp, #16
   13c0c:	pop	{r4, r5, r6, sl, fp, pc}
   13c10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c14:	add	fp, sp, #28
   13c18:	sub	sp, sp, #4
   13c1c:	mov	r5, r1
   13c20:	movw	r1, #45316	; 0xb104
   13c24:	mov	sl, r2
   13c28:	mov	r7, r0
   13c2c:	mov	r0, #0
   13c30:	mov	r2, #5
   13c34:	mov	r8, #0
   13c38:	movt	r1, #1
   13c3c:	bl	11414 <dcgettext@plt>
   13c40:	movw	r4, #49584	; 0xc1b0
   13c44:	movt	r4, #2
   13c48:	ldr	r1, [r4]
   13c4c:	bl	1136c <fputs_unlocked@plt>
   13c50:	ldr	r6, [r7]
   13c54:	cmp	r6, #0
   13c58:	beq	13cf8 <__assert_fail@plt+0x2614>
   13c5c:	add	r9, r7, #4
   13c60:	mov	r7, #0
   13c64:	str	sl, [sp]
   13c68:	cmp	r8, #0
   13c6c:	beq	13c88 <__assert_fail@plt+0x25a4>
   13c70:	mov	r0, r7
   13c74:	mov	r1, r5
   13c78:	mov	r2, sl
   13c7c:	bl	11408 <memcmp@plt>
   13c80:	cmp	r0, #0
   13c84:	beq	13cb4 <__assert_fail@plt+0x25d0>
   13c88:	ldr	r7, [r4]
   13c8c:	mov	r0, r6
   13c90:	bl	16f20 <__assert_fail@plt+0x583c>
   13c94:	movw	r2, #45337	; 0xb119
   13c98:	mov	r3, r0
   13c9c:	mov	r0, r7
   13ca0:	mov	r1, #1
   13ca4:	movt	r2, #1
   13ca8:	bl	115c4 <__fprintf_chk@plt>
   13cac:	mov	r7, r5
   13cb0:	b	13ce4 <__assert_fail@plt+0x2600>
   13cb4:	mov	sl, r9
   13cb8:	ldr	r9, [r4]
   13cbc:	mov	r0, r6
   13cc0:	bl	16f20 <__assert_fail@plt+0x583c>
   13cc4:	mov	r3, r0
   13cc8:	mov	r0, r9
   13ccc:	mov	r9, sl
   13cd0:	ldr	sl, [sp]
   13cd4:	movw	r2, #45345	; 0xb121
   13cd8:	mov	r1, #1
   13cdc:	movt	r2, #1
   13ce0:	bl	115c4 <__fprintf_chk@plt>
   13ce4:	ldr	r6, [r9, -r8, lsl #2]
   13ce8:	add	r5, r5, sl
   13cec:	sub	r8, r8, #1
   13cf0:	cmp	r6, #0
   13cf4:	bne	13c68 <__assert_fail@plt+0x2584>
   13cf8:	ldr	r0, [r4]
   13cfc:	ldr	r1, [r0, #20]
   13d00:	ldr	r2, [r0, #24]
   13d04:	cmp	r1, r2
   13d08:	addcc	r2, r1, #1
   13d0c:	strcc	r2, [r0, #20]
   13d10:	movcc	r0, #10
   13d14:	strbcc	r0, [r1]
   13d18:	subcc	sp, fp, #28
   13d1c:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d20:	mov	r1, #10
   13d24:	sub	sp, fp, #28
   13d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d2c:	b	11600 <__overflow@plt>
   13d30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d34:	add	fp, sp, #28
   13d38:	sub	sp, sp, #12
   13d3c:	mov	sl, r0
   13d40:	ldr	r0, [fp, #16]
   13d44:	ldr	r9, [fp, #8]
   13d48:	mov	r5, r3
   13d4c:	mov	r8, r2
   13d50:	mov	r6, r1
   13d54:	cmp	r0, #0
   13d58:	beq	13d88 <__assert_fail@plt+0x26a4>
   13d5c:	mov	r0, r6
   13d60:	mov	r1, r8
   13d64:	mov	r2, r5
   13d68:	mov	r3, r9
   13d6c:	bl	139e0 <__assert_fail@plt+0x22fc>
   13d70:	mov	r4, r0
   13d74:	cmn	r4, #1
   13d78:	ble	13dd8 <__assert_fail@plt+0x26f4>
   13d7c:	mov	r0, r4
   13d80:	sub	sp, fp, #28
   13d84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d88:	ldr	r0, [r8]
   13d8c:	movw	r7, #45260	; 0xb0cc
   13d90:	str	r5, [sp, #8]
   13d94:	movt	r7, #1
   13d98:	cmp	r0, #0
   13d9c:	beq	13df0 <__assert_fail@plt+0x270c>
   13da0:	add	r5, r8, #4
   13da4:	mov	r4, #0
   13da8:	mov	r1, r6
   13dac:	bl	11390 <strcmp@plt>
   13db0:	cmp	r0, #0
   13db4:	beq	13dcc <__assert_fail@plt+0x26e8>
   13db8:	ldr	r0, [r5, r4, lsl #2]
   13dbc:	add	r4, r4, #1
   13dc0:	cmp	r0, #0
   13dc4:	bne	13da8 <__assert_fail@plt+0x26c4>
   13dc8:	b	13df0 <__assert_fail@plt+0x270c>
   13dcc:	ldr	r5, [sp, #8]
   13dd0:	cmn	r4, #1
   13dd4:	bgt	13d7c <__assert_fail@plt+0x2698>
   13dd8:	movw	r0, #45260	; 0xb0cc
   13ddc:	movw	r7, #45287	; 0xb0e7
   13de0:	str	r5, [sp, #8]
   13de4:	movt	r0, #1
   13de8:	movt	r7, #1
   13dec:	moveq	r7, r0
   13df0:	ldr	r5, [fp, #12]
   13df4:	mov	r0, #0
   13df8:	mov	r1, r7
   13dfc:	mov	r2, #5
   13e00:	bl	11414 <dcgettext@plt>
   13e04:	mov	r4, r0
   13e08:	mov	r0, #0
   13e0c:	mov	r1, #8
   13e10:	mov	r2, r6
   13e14:	bl	16950 <__assert_fail@plt+0x526c>
   13e18:	mov	r6, r0
   13e1c:	mov	r0, #1
   13e20:	mov	r1, sl
   13e24:	bl	16f10 <__assert_fail@plt+0x582c>
   13e28:	str	r0, [sp]
   13e2c:	mov	r0, #0
   13e30:	mov	r1, #0
   13e34:	mov	r2, r4
   13e38:	mov	r3, r6
   13e3c:	bl	114bc <error@plt>
   13e40:	ldr	r1, [sp, #8]
   13e44:	mov	r0, r8
   13e48:	mov	r2, r9
   13e4c:	bl	13c10 <__assert_fail@plt+0x252c>
   13e50:	blx	r5
   13e54:	mvn	r4, #0
   13e58:	mov	r0, r4
   13e5c:	sub	sp, fp, #28
   13e60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e64:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13e68:	add	fp, sp, #24
   13e6c:	ldr	r6, [r1]
   13e70:	cmp	r6, #0
   13e74:	beq	13ed8 <__assert_fail@plt+0x27f4>
   13e78:	mov	r8, r1
   13e7c:	mov	r7, r2
   13e80:	mov	r1, r2
   13e84:	mov	r2, r3
   13e88:	mov	r4, r3
   13e8c:	mov	r9, r0
   13e90:	bl	11408 <memcmp@plt>
   13e94:	cmp	r0, #0
   13e98:	beq	13ed0 <__assert_fail@plt+0x27ec>
   13e9c:	add	r7, r7, r4
   13ea0:	add	r5, r8, #4
   13ea4:	ldr	r6, [r5]
   13ea8:	cmp	r6, #0
   13eac:	beq	13ed8 <__assert_fail@plt+0x27f4>
   13eb0:	mov	r0, r9
   13eb4:	mov	r1, r7
   13eb8:	mov	r2, r4
   13ebc:	bl	11408 <memcmp@plt>
   13ec0:	add	r7, r7, r4
   13ec4:	add	r5, r5, #4
   13ec8:	cmp	r0, #0
   13ecc:	bne	13ea4 <__assert_fail@plt+0x27c0>
   13ed0:	mov	r0, r6
   13ed4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13ed8:	mov	r6, #0
   13edc:	mov	r0, r6
   13ee0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13ee4:	sub	r0, r0, #1
   13ee8:	ldrb	r3, [r0, #1]!
   13eec:	cmp	r3, #47	; 0x2f
   13ef0:	beq	13ee8 <__assert_fail@plt+0x2804>
   13ef4:	mov	r2, #0
   13ef8:	mov	r1, r0
   13efc:	uxtb	r3, r3
   13f00:	cmp	r3, #47	; 0x2f
   13f04:	beq	13f2c <__assert_fail@plt+0x2848>
   13f08:	cmp	r3, #0
   13f0c:	bxeq	lr
   13f10:	tst	r2, #1
   13f14:	mov	r2, #0
   13f18:	movne	r0, r1
   13f1c:	ldrb	r3, [r1, #1]!
   13f20:	uxtb	r3, r3
   13f24:	cmp	r3, #47	; 0x2f
   13f28:	bne	13f08 <__assert_fail@plt+0x2824>
   13f2c:	ldrb	r3, [r1, #1]!
   13f30:	mov	r2, #1
   13f34:	uxtb	r3, r3
   13f38:	cmp	r3, #47	; 0x2f
   13f3c:	bne	13f08 <__assert_fail@plt+0x2824>
   13f40:	b	13f2c <__assert_fail@plt+0x2848>
   13f44:	push	{r4, sl, fp, lr}
   13f48:	add	fp, sp, #8
   13f4c:	mov	r4, r0
   13f50:	bl	11534 <strlen@plt>
   13f54:	mov	r1, r0
   13f58:	sub	r2, r4, #1
   13f5c:	mov	r0, r1
   13f60:	cmp	r1, #2
   13f64:	popcc	{r4, sl, fp, pc}
   13f68:	ldrb	r3, [r2, r0]
   13f6c:	sub	r1, r0, #1
   13f70:	cmp	r3, #47	; 0x2f
   13f74:	beq	13f5c <__assert_fail@plt+0x2878>
   13f78:	pop	{r4, sl, fp, pc}
   13f7c:	movw	r1, #49604	; 0xc1c4
   13f80:	movt	r1, #2
   13f84:	str	r0, [r1, #4]
   13f88:	bx	lr
   13f8c:	movw	r1, #49604	; 0xc1c4
   13f90:	movt	r1, #2
   13f94:	strb	r0, [r1]
   13f98:	bx	lr
   13f9c:	push	{r4, r5, r6, sl, fp, lr}
   13fa0:	add	fp, sp, #16
   13fa4:	sub	sp, sp, #8
   13fa8:	movw	r0, #49588	; 0xc1b4
   13fac:	movt	r0, #2
   13fb0:	ldr	r0, [r0]
   13fb4:	bl	19780 <__assert_fail@plt+0x809c>
   13fb8:	cmp	r0, #0
   13fbc:	beq	13fe4 <__assert_fail@plt+0x2900>
   13fc0:	movw	r5, #49604	; 0xc1c4
   13fc4:	movt	r5, #2
   13fc8:	ldrb	r0, [r5]
   13fcc:	cmp	r0, #0
   13fd0:	beq	14010 <__assert_fail@plt+0x292c>
   13fd4:	bl	11558 <__errno_location@plt>
   13fd8:	ldr	r0, [r0]
   13fdc:	cmp	r0, #32
   13fe0:	bne	14010 <__assert_fail@plt+0x292c>
   13fe4:	movw	r0, #49584	; 0xc1b0
   13fe8:	movt	r0, #2
   13fec:	ldr	r0, [r0]
   13ff0:	bl	19780 <__assert_fail@plt+0x809c>
   13ff4:	cmp	r0, #0
   13ff8:	subeq	sp, fp, #16
   13ffc:	popeq	{r4, r5, r6, sl, fp, pc}
   14000:	movw	r0, #49496	; 0xc158
   14004:	movt	r0, #2
   14008:	ldr	r0, [r0]
   1400c:	bl	113c0 <_exit@plt>
   14010:	movw	r1, #45350	; 0xb126
   14014:	mov	r0, #0
   14018:	mov	r2, #5
   1401c:	movt	r1, #1
   14020:	bl	11414 <dcgettext@plt>
   14024:	ldr	r6, [r5, #4]
   14028:	mov	r4, r0
   1402c:	bl	11558 <__errno_location@plt>
   14030:	ldr	r5, [r0]
   14034:	cmp	r6, #0
   14038:	bne	14054 <__assert_fail@plt+0x2970>
   1403c:	movw	r2, #45347	; 0xb123
   14040:	mov	r0, #0
   14044:	mov	r1, r5
   14048:	mov	r3, r4
   1404c:	movt	r2, #1
   14050:	b	14074 <__assert_fail@plt+0x2990>
   14054:	mov	r0, r6
   14058:	bl	16b98 <__assert_fail@plt+0x54b4>
   1405c:	movw	r2, #45362	; 0xb132
   14060:	mov	r3, r0
   14064:	str	r4, [sp]
   14068:	mov	r0, #0
   1406c:	mov	r1, r5
   14070:	movt	r2, #1
   14074:	bl	114bc <error@plt>
   14078:	movw	r0, #49496	; 0xc158
   1407c:	movt	r0, #2
   14080:	ldr	r0, [r0]
   14084:	bl	113c0 <_exit@plt>
   14088:	push	{fp, lr}
   1408c:	mov	fp, sp
   14090:	bl	140e8 <__assert_fail@plt+0x2a04>
   14094:	cmp	r0, #0
   14098:	popne	{fp, pc}
   1409c:	bl	188b4 <__assert_fail@plt+0x71d0>
   140a0:	push	{r4, r5, r6, sl, fp, lr}
   140a4:	add	fp, sp, #16
   140a8:	mov	r5, r0
   140ac:	mov	r4, r0
   140b0:	ldrb	r6, [r5], #-1
   140b4:	bl	13ee4 <__assert_fail@plt+0x2800>
   140b8:	sub	r2, r0, r4
   140bc:	sub	r0, r6, #47	; 0x2f
   140c0:	clz	r0, r0
   140c4:	lsr	r1, r0, #5
   140c8:	mov	r0, r2
   140cc:	cmp	r2, r1
   140d0:	popls	{r4, r5, r6, sl, fp, pc}
   140d4:	ldrb	r3, [r5, r0]
   140d8:	sub	r2, r0, #1
   140dc:	cmp	r3, #47	; 0x2f
   140e0:	beq	140c8 <__assert_fail@plt+0x29e4>
   140e4:	pop	{r4, r5, r6, sl, fp, pc}
   140e8:	push	{r4, r5, r6, sl, fp, lr}
   140ec:	add	fp, sp, #16
   140f0:	mov	r6, r0
   140f4:	mov	r4, r0
   140f8:	ldrb	r5, [r6], #-1
   140fc:	bl	13ee4 <__assert_fail@plt+0x2800>
   14100:	sub	r1, r0, r4
   14104:	sub	r0, r5, #47	; 0x2f
   14108:	clz	r0, r0
   1410c:	lsr	r0, r0, #5
   14110:	mov	r5, r1
   14114:	cmp	r1, r0
   14118:	bls	1412c <__assert_fail@plt+0x2a48>
   1411c:	ldrb	r2, [r6, r5]
   14120:	sub	r1, r5, #1
   14124:	cmp	r2, #47	; 0x2f
   14128:	beq	14110 <__assert_fail@plt+0x2a2c>
   1412c:	cmp	r5, #0
   14130:	mov	r0, r5
   14134:	addeq	r0, r0, #1
   14138:	add	r0, r0, #1
   1413c:	bl	196fc <__assert_fail@plt+0x8018>
   14140:	mov	r6, r0
   14144:	cmp	r0, #0
   14148:	beq	14174 <__assert_fail@plt+0x2a90>
   1414c:	mov	r0, r6
   14150:	mov	r1, r4
   14154:	mov	r2, r5
   14158:	bl	113cc <memcpy@plt>
   1415c:	cmp	r5, #0
   14160:	moveq	r0, #46	; 0x2e
   14164:	moveq	r5, #1
   14168:	strbeq	r0, [r6]
   1416c:	mov	r0, #0
   14170:	strb	r0, [r6, r5]
   14174:	mov	r0, r6
   14178:	pop	{r4, r5, r6, sl, fp, pc}
   1417c:	sub	sp, sp, #8
   14180:	push	{r4, r5, r6, r7, fp, lr}
   14184:	add	fp, sp, #16
   14188:	sub	sp, sp, #8
   1418c:	mov	r5, r0
   14190:	add	r0, fp, #8
   14194:	cmp	r1, #11
   14198:	str	r3, [fp, #12]
   1419c:	str	r2, [fp, #8]
   141a0:	str	r0, [sp, #4]
   141a4:	bhi	141e0 <__assert_fail@plt+0x2afc>
   141a8:	mov	r0, #1
   141ac:	movw	r2, #1300	; 0x514
   141b0:	tst	r2, r0, lsl r1
   141b4:	bne	142a0 <__assert_fail@plt+0x2bbc>
   141b8:	movw	r2, #2570	; 0xa0a
   141bc:	tst	r2, r0, lsl r1
   141c0:	bne	14208 <__assert_fail@plt+0x2b24>
   141c4:	cmp	r1, #0
   141c8:	bne	141e0 <__assert_fail@plt+0x2afc>
   141cc:	ldr	r0, [sp, #4]
   141d0:	add	r1, r0, #4
   141d4:	str	r1, [sp, #4]
   141d8:	mov	r1, #0
   141dc:	b	142ac <__assert_fail@plt+0x2bc8>
   141e0:	sub	r0, r1, #1024	; 0x400
   141e4:	cmp	r0, #10
   141e8:	bhi	142a0 <__assert_fail@plt+0x2bbc>
   141ec:	mov	r2, #1
   141f0:	movw	r3, #645	; 0x285
   141f4:	tst	r3, r2, lsl r0
   141f8:	bne	142a0 <__assert_fail@plt+0x2bbc>
   141fc:	movw	r3, #1282	; 0x502
   14200:	tst	r3, r2, lsl r0
   14204:	beq	14214 <__assert_fail@plt+0x2b30>
   14208:	mov	r0, r5
   1420c:	bl	115f4 <fcntl64@plt>
   14210:	b	142b8 <__assert_fail@plt+0x2bd4>
   14214:	cmp	r0, #6
   14218:	bne	142a0 <__assert_fail@plt+0x2bbc>
   1421c:	ldr	r0, [sp, #4]
   14220:	movw	r7, #49612	; 0xc1cc
   14224:	movt	r7, #2
   14228:	add	r1, r0, #4
   1422c:	str	r1, [sp, #4]
   14230:	ldr	r6, [r0]
   14234:	ldr	r0, [r7]
   14238:	cmp	r0, #0
   1423c:	blt	142dc <__assert_fail@plt+0x2bf8>
   14240:	mov	r0, r5
   14244:	movw	r1, #1030	; 0x406
   14248:	mov	r2, r6
   1424c:	bl	115f4 <fcntl64@plt>
   14250:	mov	r4, r0
   14254:	cmn	r0, #1
   14258:	bgt	142d0 <__assert_fail@plt+0x2bec>
   1425c:	bl	11558 <__errno_location@plt>
   14260:	ldr	r0, [r0]
   14264:	cmp	r0, #22
   14268:	bne	142d0 <__assert_fail@plt+0x2bec>
   1426c:	mov	r0, r5
   14270:	mov	r1, #0
   14274:	mov	r2, r6
   14278:	bl	115f4 <fcntl64@plt>
   1427c:	mov	r4, r0
   14280:	cmp	r0, #0
   14284:	blt	142bc <__assert_fail@plt+0x2bd8>
   14288:	mvn	r0, #0
   1428c:	str	r0, [r7]
   14290:	mov	r0, #1
   14294:	cmp	r0, #0
   14298:	bne	14308 <__assert_fail@plt+0x2c24>
   1429c:	b	142bc <__assert_fail@plt+0x2bd8>
   142a0:	ldr	r0, [sp, #4]
   142a4:	add	r2, r0, #4
   142a8:	str	r2, [sp, #4]
   142ac:	ldr	r2, [r0]
   142b0:	mov	r0, r5
   142b4:	bl	115f4 <fcntl64@plt>
   142b8:	mov	r4, r0
   142bc:	mov	r0, r4
   142c0:	sub	sp, fp, #16
   142c4:	pop	{r4, r5, r6, r7, fp, lr}
   142c8:	add	sp, sp, #8
   142cc:	bx	lr
   142d0:	mov	r0, #1
   142d4:	str	r0, [r7]
   142d8:	b	142bc <__assert_fail@plt+0x2bd8>
   142dc:	mov	r0, r5
   142e0:	mov	r1, #0
   142e4:	mov	r2, r6
   142e8:	bl	115f4 <fcntl64@plt>
   142ec:	mov	r4, r0
   142f0:	ldr	r0, [r7]
   142f4:	add	r0, r0, #1
   142f8:	clz	r0, r0
   142fc:	lsr	r0, r0, #5
   14300:	cmp	r0, #0
   14304:	beq	142bc <__assert_fail@plt+0x2bd8>
   14308:	cmp	r4, #0
   1430c:	blt	142bc <__assert_fail@plt+0x2bd8>
   14310:	mov	r0, r4
   14314:	mov	r1, #1
   14318:	bl	115f4 <fcntl64@plt>
   1431c:	cmp	r0, #0
   14320:	blt	1433c <__assert_fail@plt+0x2c58>
   14324:	orr	r2, r0, #1
   14328:	mov	r0, r4
   1432c:	mov	r1, #2
   14330:	bl	115f4 <fcntl64@plt>
   14334:	cmn	r0, #1
   14338:	bne	142bc <__assert_fail@plt+0x2bd8>
   1433c:	bl	11558 <__errno_location@plt>
   14340:	ldr	r6, [r0]
   14344:	mov	r5, r0
   14348:	mov	r0, r4
   1434c:	bl	116d8 <close@plt>
   14350:	str	r6, [r5]
   14354:	mvn	r4, #0
   14358:	b	142bc <__assert_fail@plt+0x2bd8>
   1435c:	sub	sp, sp, #8
   14360:	push	{fp, lr}
   14364:	mov	fp, sp
   14368:	sub	sp, sp, #8
   1436c:	str	r2, [fp, #8]
   14370:	mov	r2, #0
   14374:	tst	r1, #64	; 0x40
   14378:	str	r3, [fp, #12]
   1437c:	addne	r2, fp, #8
   14380:	orrne	r2, r2, #4
   14384:	strne	r2, [sp, #4]
   14388:	ldrne	r2, [fp, #8]
   1438c:	bl	114c8 <open64@plt>
   14390:	bl	17c38 <__assert_fail@plt+0x6554>
   14394:	mov	sp, fp
   14398:	pop	{fp, lr}
   1439c:	add	sp, sp, #8
   143a0:	bx	lr
   143a4:	push	{r4, r5, r6, sl, fp, lr}
   143a8:	add	fp, sp, #16
   143ac:	mov	r4, r0
   143b0:	bl	11558 <__errno_location@plt>
   143b4:	ldr	r6, [r0]
   143b8:	mov	r5, r0
   143bc:	mov	r0, r4
   143c0:	bl	113b4 <free@plt>
   143c4:	str	r6, [r5]
   143c8:	pop	{r4, r5, r6, sl, fp, pc}
   143cc:	andeq	r0, r0, r0
   143d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143d4:	add	fp, sp, #28
   143d8:	sub	sp, sp, #4
   143dc:	vpush	{d8-d9}
   143e0:	sub	sp, sp, #104	; 0x68
   143e4:	mov	r7, r3
   143e8:	mov	r6, r2
   143ec:	mov	r9, r1
   143f0:	str	r0, [sp, #44]	; 0x2c
   143f4:	bl	1163c <localeconv@plt>
   143f8:	ldr	r5, [r0]
   143fc:	mov	r4, r0
   14400:	mov	r0, r5
   14404:	bl	11534 <strlen@plt>
   14408:	movw	r2, #44353	; 0xad41
   1440c:	sub	r1, r0, #1
   14410:	cmp	r1, #16
   14414:	movt	r2, #1
   14418:	movcc	r2, r5
   1441c:	ldr	r5, [r4, #4]
   14420:	ldr	r4, [r4, #8]
   14424:	movcs	r0, #1
   14428:	str	r0, [sp, #16]
   1442c:	str	r2, [sp, #12]
   14430:	mov	r0, r5
   14434:	bl	11534 <strlen@plt>
   14438:	movw	r3, #43207	; 0xa8c7
   1443c:	cmp	r0, #17
   14440:	movw	r0, #647	; 0x287
   14444:	ldr	r2, [fp, #16]
   14448:	ldr	sl, [fp, #8]
   1444c:	ldr	r8, [fp, #12]
   14450:	str	r6, [sp, #28]
   14454:	str	r7, [sp, #36]	; 0x24
   14458:	str	r4, [sp, #20]
   1445c:	movt	r3, #1
   14460:	add	r1, r6, r0
   14464:	movcc	r3, r5
   14468:	ands	r0, r7, #32
   1446c:	ldr	r5, [fp, #20]
   14470:	str	r1, [sp, #32]
   14474:	str	r0, [sp, #24]
   14478:	mov	r0, #1000	; 0x3e8
   1447c:	str	r3, [sp, #52]	; 0x34
   14480:	movwne	r0, #1024	; 0x400
   14484:	str	r0, [sp, #40]	; 0x28
   14488:	and	r0, r7, #3
   1448c:	str	r0, [sp, #48]	; 0x30
   14490:	subs	r0, sl, r2
   14494:	sbcs	r0, r8, r5
   14498:	bcs	1458c <__assert_fail@plt+0x2ea8>
   1449c:	orrs	r0, sl, r8
   144a0:	mov	r4, r9
   144a4:	beq	14674 <__assert_fail@plt+0x2f90>
   144a8:	ldr	r5, [fp, #20]
   144ac:	mov	r0, r2
   144b0:	mov	r2, sl
   144b4:	mov	r3, r8
   144b8:	mov	r1, r5
   144bc:	bl	1a0dc <__assert_fail@plt+0x89f8>
   144c0:	ldr	r2, [fp, #16]
   144c4:	mov	r6, r0
   144c8:	mov	r3, r1
   144cc:	umull	r0, r1, r0, sl
   144d0:	mla	r1, r6, r8, r1
   144d4:	mla	r1, r3, sl, r1
   144d8:	subs	r0, r2, r0
   144dc:	sbc	r1, r5, r1
   144e0:	orrs	r0, r0, r1
   144e4:	bne	14674 <__assert_fail@plt+0x2f90>
   144e8:	ldr	r5, [sp, #44]	; 0x2c
   144ec:	mov	r1, r4
   144f0:	mov	r2, r6
   144f4:	mov	r8, r3
   144f8:	mov	r0, r5
   144fc:	bl	1a0dc <__assert_fail@plt+0x89f8>
   14500:	mov	r7, r0
   14504:	mov	r9, r1
   14508:	umull	r0, r1, r0, r6
   1450c:	mov	r2, #10
   14510:	mov	r3, r8
   14514:	mla	r1, r7, r8, r1
   14518:	subs	r0, r5, r0
   1451c:	mla	r1, r9, r6, r1
   14520:	umull	sl, r0, r0, r2
   14524:	mov	r2, r6
   14528:	sbc	r1, r4, r1
   1452c:	add	r1, r1, r1, lsl #2
   14530:	add	r5, r0, r1, lsl #1
   14534:	mov	r0, sl
   14538:	mov	r1, r5
   1453c:	bl	1a0dc <__assert_fail@plt+0x89f8>
   14540:	mov	r4, r0
   14544:	umull	r0, r2, r0, r6
   14548:	mla	r2, r4, r8, r2
   1454c:	subs	r0, sl, r0
   14550:	mla	r1, r1, r6, r2
   14554:	mov	r2, #2
   14558:	sbc	r1, r5, r1
   1455c:	subs	r3, r6, r0, lsl #1
   14560:	lsl	r1, r1, #1
   14564:	orr	r1, r1, r0, lsr #31
   14568:	sbcs	r3, r8, r1
   1456c:	orr	r5, r1, r0, lsl #1
   14570:	movwcc	r2, #3
   14574:	cmp	r5, #0
   14578:	movwne	r5, #1
   1457c:	rsbs	r0, r6, r0, lsl #1
   14580:	sbcs	r0, r1, r8
   14584:	movcs	r5, r2
   14588:	b	14604 <__assert_fail@plt+0x2f20>
   1458c:	mov	r0, sl
   14590:	mov	r1, r8
   14594:	mov	r3, r5
   14598:	bl	1a0dc <__assert_fail@plt+0x89f8>
   1459c:	ldr	r2, [fp, #16]
   145a0:	mov	r6, r0
   145a4:	mov	r3, r1
   145a8:	mov	r4, r9
   145ac:	umull	r0, r1, r0, r2
   145b0:	mla	r1, r6, r5, r1
   145b4:	subs	r0, sl, r0
   145b8:	mla	r1, r3, r2, r1
   145bc:	sbc	r1, r8, r1
   145c0:	orrs	r0, r0, r1
   145c4:	bne	14674 <__assert_fail@plt+0x2f90>
   145c8:	ldr	r5, [sp, #44]	; 0x2c
   145cc:	mov	r2, r6
   145d0:	umull	r7, r0, r6, r5
   145d4:	mla	r0, r6, r4, r0
   145d8:	mla	r9, r3, r5, r0
   145dc:	mov	r0, r7
   145e0:	mov	r1, r9
   145e4:	bl	1a0dc <__assert_fail@plt+0x89f8>
   145e8:	ldr	r2, [fp, #16]
   145ec:	eor	r1, r1, r4
   145f0:	eor	r0, r0, r5
   145f4:	orrs	r0, r0, r1
   145f8:	bne	14674 <__assert_fail@plt+0x2f90>
   145fc:	mov	r5, #0
   14600:	mov	r4, #0
   14604:	ldr	r0, [sp, #36]	; 0x24
   14608:	ldr	r2, [sp, #40]	; 0x28
   1460c:	mvn	r6, #0
   14610:	ands	r8, r0, #16
   14614:	beq	14628 <__assert_fail@plt+0x2f44>
   14618:	subs	r0, r7, r2
   1461c:	mov	r6, #0
   14620:	sbcs	r0, r9, #0
   14624:	bcs	14970 <__assert_fail@plt+0x328c>
   14628:	ldr	r0, [sp, #32]
   1462c:	mov	sl, r7
   14630:	str	r0, [sp, #44]	; 0x2c
   14634:	ldr	r0, [sp, #48]	; 0x30
   14638:	cmp	r0, #0
   1463c:	beq	14abc <__assert_fail@plt+0x33d8>
   14640:	cmp	r0, #1
   14644:	bne	14964 <__assert_fail@plt+0x3280>
   14648:	rsbs	r1, r5, #0
   1464c:	mov	r0, #0
   14650:	and	r3, sl, #1
   14654:	ldr	r5, [sp, #44]	; 0x2c
   14658:	sbc	r0, r0, #0
   1465c:	eor	r1, r3, r1
   14660:	orrs	r0, r1, r0
   14664:	addne	r4, r4, #1
   14668:	cmp	r4, #5
   1466c:	bgt	14acc <__assert_fail@plt+0x33e8>
   14670:	b	14b20 <__assert_fail@plt+0x343c>
   14674:	ldr	r9, [fp, #20]
   14678:	mov	r0, r2
   1467c:	mov	r1, r9
   14680:	bl	19f94 <__assert_fail@plt+0x88b0>
   14684:	vmov	d8, r0, r1
   14688:	ldr	r0, [sp, #44]	; 0x2c
   1468c:	mov	r1, r4
   14690:	bl	19f94 <__assert_fail@plt+0x88b0>
   14694:	mov	r6, r0
   14698:	mov	r7, r1
   1469c:	mov	r0, sl
   146a0:	mov	r1, r8
   146a4:	bl	19f94 <__assert_fail@plt+0x88b0>
   146a8:	vmov	d17, r6, r7
   146ac:	ldr	r7, [sp, #36]	; 0x24
   146b0:	vmov	d16, r0, r1
   146b4:	vdiv.f64	d16, d16, d8
   146b8:	vmul.f64	d8, d16, d17
   146bc:	tst	r7, #16
   146c0:	bne	14734 <__assert_fail@plt+0x3050>
   146c4:	ldr	r0, [sp, #48]	; 0x30
   146c8:	ldr	sl, [sp, #28]
   146cc:	cmp	r0, #1
   146d0:	beq	148bc <__assert_fail@plt+0x31d8>
   146d4:	vldr	d16, [pc, #964]	; 14aa0 <__assert_fail@plt+0x33bc>
   146d8:	ldr	r8, [sp, #32]
   146dc:	vcmpe.f64	d8, d16
   146e0:	vmrs	APSR_nzcv, fpscr
   146e4:	bpl	148c0 <__assert_fail@plt+0x31dc>
   146e8:	mov	r6, r0
   146ec:	vmov	r0, r1, d8
   146f0:	bl	1a128 <__assert_fail@plt+0x8a44>
   146f4:	mov	r4, r0
   146f8:	mov	r5, r1
   146fc:	bl	19f94 <__assert_fail@plt+0x88b0>
   14700:	vmov	d16, r0, r1
   14704:	clz	r0, r6
   14708:	mov	r2, #0
   1470c:	vcmp.f64	d8, d16
   14710:	lsr	r0, r0, #5
   14714:	vmrs	APSR_nzcv, fpscr
   14718:	movwne	r2, #1
   1471c:	and	r0, r0, r2
   14720:	adds	r0, r0, r4
   14724:	adc	r1, r5, #0
   14728:	bl	19f94 <__assert_fail@plt+0x88b0>
   1472c:	vmov	d8, r0, r1
   14730:	b	148c0 <__assert_fail@plt+0x31dc>
   14734:	ldr	r0, [sp, #40]	; 0x28
   14738:	vmov.f64	d16, #112	; 0x3f800000  1.0
   1473c:	mov	r6, #0
   14740:	vmov	s0, r0
   14744:	vcvt.f64.u32	d17, s0
   14748:	ldr	sl, [sp, #28]
   1474c:	add	r6, r6, #1
   14750:	vmul.f64	d16, d16, d17
   14754:	cmp	r6, #7
   14758:	vmulls.f64	d18, d16, d17
   1475c:	vcmpels.f64	d18, d8
   14760:	vmrsls	APSR_nzcv, fpscr
   14764:	bls	1474c <__assert_fail@plt+0x3068>
   14768:	ldr	r0, [sp, #48]	; 0x30
   1476c:	ldr	r8, [sp, #32]
   14770:	ldr	r5, [sp, #16]
   14774:	vdiv.f64	d8, d8, d16
   14778:	vmov.f64	d16, d8
   1477c:	cmp	r0, #1
   14780:	beq	147e4 <__assert_fail@plt+0x3100>
   14784:	vldr	d16, [pc, #788]	; 14aa0 <__assert_fail@plt+0x33bc>
   14788:	vcmpe.f64	d8, d16
   1478c:	vmov.f64	d16, d8
   14790:	vmrs	APSR_nzcv, fpscr
   14794:	bpl	147e4 <__assert_fail@plt+0x3100>
   14798:	vmov	r0, r1, d8
   1479c:	bl	1a128 <__assert_fail@plt+0x8a44>
   147a0:	mov	r4, r0
   147a4:	mov	r5, r1
   147a8:	bl	19f94 <__assert_fail@plt+0x88b0>
   147ac:	vmov	d16, r0, r1
   147b0:	ldr	r0, [sp, #48]	; 0x30
   147b4:	mov	r2, #0
   147b8:	vcmp.f64	d8, d16
   147bc:	vmrs	APSR_nzcv, fpscr
   147c0:	movwne	r2, #1
   147c4:	clz	r0, r0
   147c8:	lsr	r0, r0, #5
   147cc:	and	r0, r0, r2
   147d0:	adds	r0, r0, r4
   147d4:	adc	r1, r5, #0
   147d8:	ldr	r5, [sp, #16]
   147dc:	bl	19f94 <__assert_fail@plt+0x88b0>
   147e0:	vmov	d16, r0, r1
   147e4:	movw	r3, #45375	; 0xb13f
   147e8:	mov	r0, sl
   147ec:	mov	r1, #1
   147f0:	mvn	r2, #0
   147f4:	vstr	d16, [sp]
   147f8:	movt	r3, #1
   147fc:	bl	11564 <__sprintf_chk@plt>
   14800:	ldr	r1, [sp, #24]
   14804:	mov	r0, #3
   14808:	cmp	r1, #0
   1480c:	movwne	r0, #2
   14810:	add	r4, r0, r5
   14814:	mov	r0, sl
   14818:	bl	11534 <strlen@plt>
   1481c:	cmp	r4, r0
   14820:	bcc	14844 <__assert_fail@plt+0x3160>
   14824:	mov	r2, r0
   14828:	add	r5, r5, #1
   1482c:	tst	r7, #8
   14830:	beq	148f0 <__assert_fail@plt+0x320c>
   14834:	add	r0, sl, r2
   14838:	ldrb	r0, [r0, #-1]
   1483c:	cmp	r0, #48	; 0x30
   14840:	bne	148f0 <__assert_fail@plt+0x320c>
   14844:	ldr	r0, [sp, #48]	; 0x30
   14848:	vmov.f64	d9, #36	; 0x41200000  10.0
   1484c:	vmul.f64	d8, d8, d9
   14850:	cmp	r0, #1
   14854:	beq	148b0 <__assert_fail@plt+0x31cc>
   14858:	vldr	d16, [pc, #576]	; 14aa0 <__assert_fail@plt+0x33bc>
   1485c:	vcmpe.f64	d8, d16
   14860:	vmrs	APSR_nzcv, fpscr
   14864:	bpl	148b0 <__assert_fail@plt+0x31cc>
   14868:	vmov	r0, r1, d8
   1486c:	bl	1a128 <__assert_fail@plt+0x8a44>
   14870:	mov	r4, r0
   14874:	mov	r5, r1
   14878:	bl	19f94 <__assert_fail@plt+0x88b0>
   1487c:	vmov	d16, r0, r1
   14880:	ldr	r0, [sp, #48]	; 0x30
   14884:	mov	r2, #0
   14888:	vcmp.f64	d8, d16
   1488c:	vmrs	APSR_nzcv, fpscr
   14890:	movwne	r2, #1
   14894:	clz	r0, r0
   14898:	lsr	r0, r0, #5
   1489c:	and	r0, r0, r2
   148a0:	adds	r0, r0, r4
   148a4:	adc	r1, r5, #0
   148a8:	bl	19f94 <__assert_fail@plt+0x88b0>
   148ac:	vmov	d8, r0, r1
   148b0:	vdiv.f64	d16, d8, d9
   148b4:	vstr	d16, [sp]
   148b8:	b	148c8 <__assert_fail@plt+0x31e4>
   148bc:	ldr	r8, [sp, #32]
   148c0:	mvn	r6, #0
   148c4:	vstr	d8, [sp]
   148c8:	movw	r3, #45369	; 0xb139
   148cc:	mov	r0, sl
   148d0:	mov	r1, #1
   148d4:	mvn	r2, #0
   148d8:	movt	r3, #1
   148dc:	bl	11564 <__sprintf_chk@plt>
   148e0:	mov	r0, sl
   148e4:	bl	11534 <strlen@plt>
   148e8:	mov	r2, r0
   148ec:	mov	r5, #0
   148f0:	sub	r4, r8, r2
   148f4:	mov	r1, sl
   148f8:	mov	r0, r4
   148fc:	bl	113a8 <memmove@plt>
   14900:	sub	r5, r8, r5
   14904:	tst	r7, #4
   14908:	bne	14b74 <__assert_fail@plt+0x3490>
   1490c:	ldr	r3, [sp, #40]	; 0x28
   14910:	ldr	r5, [fp, #16]
   14914:	tst	r7, #128	; 0x80
   14918:	beq	14c90 <__assert_fail@plt+0x35ac>
   1491c:	cmn	r6, #1
   14920:	bgt	14a30 <__assert_fail@plt+0x334c>
   14924:	subs	r0, r5, #2
   14928:	mov	r6, #0
   1492c:	sbcs	r0, r9, #0
   14930:	bcc	14a30 <__assert_fail@plt+0x334c>
   14934:	mov	r0, #0
   14938:	mov	r1, #1
   1493c:	mov	r6, #0
   14940:	cmp	r6, #7
   14944:	beq	14a2c <__assert_fail@plt+0x3348>
   14948:	umull	r1, r2, r1, r3
   1494c:	add	r6, r6, #1
   14950:	mla	r0, r0, r3, r2
   14954:	subs	r2, r1, r5
   14958:	sbcs	r2, r0, r9
   1495c:	bcc	14940 <__assert_fail@plt+0x325c>
   14960:	b	14a30 <__assert_fail@plt+0x334c>
   14964:	ldr	r8, [sp, #32]
   14968:	ldr	r5, [sp, #44]	; 0x2c
   1496c:	b	14b24 <__assert_fail@plt+0x3440>
   14970:	mov	r6, #0
   14974:	mov	r0, r7
   14978:	mov	r1, r9
   1497c:	mov	r3, #0
   14980:	bl	1a0dc <__assert_fail@plt+0x89f8>
   14984:	ldr	r2, [sp, #40]	; 0x28
   14988:	mov	sl, r0
   1498c:	mov	r9, r1
   14990:	mls	r0, r0, r2, r7
   14994:	add	r0, r0, r0, lsl #2
   14998:	add	r0, r4, r0, lsl #1
   1499c:	udiv	r4, r0, r2
   149a0:	mls	r0, r4, r2, r0
   149a4:	lsl	r0, r0, #1
   149a8:	add	r0, r0, r5, lsr #1
   149ac:	cmp	r0, r2
   149b0:	bcs	149d4 <__assert_fail@plt+0x32f0>
   149b4:	add	r1, r0, r5
   149b8:	cmn	r0, r5
   149bc:	movwne	r1, #1
   149c0:	mov	r5, r1
   149c4:	add	r6, r6, #1
   149c8:	cmp	r6, #7
   149cc:	bls	149f0 <__assert_fail@plt+0x330c>
   149d0:	b	14a00 <__assert_fail@plt+0x331c>
   149d4:	add	r0, r0, r5
   149d8:	mov	r5, #2
   149dc:	cmp	r2, r0
   149e0:	movwcc	r5, #3
   149e4:	add	r6, r6, #1
   149e8:	cmp	r6, #7
   149ec:	bhi	14a00 <__assert_fail@plt+0x331c>
   149f0:	subs	r0, sl, r2
   149f4:	mov	r7, sl
   149f8:	sbcs	r0, r9, #0
   149fc:	bcs	14974 <__assert_fail@plt+0x3290>
   14a00:	rsbs	r0, sl, #9
   14a04:	rscs	r0, r9, #0
   14a08:	bcc	14aa8 <__assert_fail@plt+0x33c4>
   14a0c:	ldr	r0, [sp, #48]	; 0x30
   14a10:	cmp	r0, #1
   14a14:	bne	14cac <__assert_fail@plt+0x35c8>
   14a18:	and	r0, r4, #1
   14a1c:	add	r0, r5, r0
   14a20:	cmp	r0, #2
   14a24:	bhi	14cbc <__assert_fail@plt+0x35d8>
   14a28:	b	14cf0 <__assert_fail@plt+0x360c>
   14a2c:	mov	r6, #8
   14a30:	and	r0, r7, #256	; 0x100
   14a34:	tst	r7, #64	; 0x40
   14a38:	orrsne	r1, r6, r0
   14a3c:	movne	r1, #32
   14a40:	addne	r8, sl, #648	; 0x288
   14a44:	strbne	r1, [sl, #647]	; 0x287
   14a48:	cmp	r6, #0
   14a4c:	beq	14a74 <__assert_fail@plt+0x3390>
   14a50:	ldr	r1, [sp, #24]
   14a54:	cmp	r1, #0
   14a58:	moveq	r1, #107	; 0x6b
   14a5c:	cmpeq	r6, #1
   14a60:	beq	14a70 <__assert_fail@plt+0x338c>
   14a64:	movw	r1, #45456	; 0xb190
   14a68:	movt	r1, #1
   14a6c:	ldrb	r1, [r1, r6]
   14a70:	strb	r1, [r8], #1
   14a74:	cmp	r0, #0
   14a78:	beq	14c90 <__assert_fail@plt+0x35ac>
   14a7c:	ldr	r0, [sp, #24]
   14a80:	cmp	r0, #0
   14a84:	cmpne	r6, #0
   14a88:	movne	r0, #105	; 0x69
   14a8c:	strbne	r0, [r8], #1
   14a90:	mov	r0, #66	; 0x42
   14a94:	strb	r0, [r8], #1
   14a98:	b	14c90 <__assert_fail@plt+0x35ac>
   14a9c:	nop	{0}
   14aa0:	andeq	r0, r0, r0
   14aa4:	mvnsmi	r0, #0
   14aa8:	ldr	r0, [sp, #32]
   14aac:	str	r0, [sp, #44]	; 0x2c
   14ab0:	ldr	r0, [sp, #48]	; 0x30
   14ab4:	cmp	r0, #0
   14ab8:	bne	14640 <__assert_fail@plt+0x2f5c>
   14abc:	add	r0, r4, r5
   14ac0:	ldr	r5, [sp, #44]	; 0x2c
   14ac4:	cmp	r0, #1
   14ac8:	blt	14b20 <__assert_fail@plt+0x343c>
   14acc:	adds	sl, sl, #1
   14ad0:	adc	r9, r9, #0
   14ad4:	cmp	r6, #7
   14ad8:	bgt	14b20 <__assert_fail@plt+0x343c>
   14adc:	cmp	r8, #0
   14ae0:	beq	14b20 <__assert_fail@plt+0x343c>
   14ae4:	eor	r0, sl, r2
   14ae8:	orrs	r0, r0, r9
   14aec:	ldreq	r0, [sp, #36]	; 0x24
   14af0:	addeq	r6, r6, #1
   14af4:	moveq	r9, #0
   14af8:	moveq	sl, #1
   14afc:	tsteq	r0, #8
   14b00:	bne	14b20 <__assert_fail@plt+0x343c>
   14b04:	ldr	r2, [sp, #16]
   14b08:	mov	r0, #48	; 0x30
   14b0c:	ldr	r1, [sp, #12]
   14b10:	strb	r0, [r5, #-1]!
   14b14:	sub	r5, r5, r2
   14b18:	mov	r0, r5
   14b1c:	bl	113cc <memcpy@plt>
   14b20:	ldr	r8, [sp, #32]
   14b24:	mov	r4, r5
   14b28:	mov	r0, sl
   14b2c:	mov	r1, r9
   14b30:	mov	r2, #10
   14b34:	mov	r3, #0
   14b38:	bl	1a0dc <__assert_fail@plt+0x89f8>
   14b3c:	add	r2, r0, r0, lsl #2
   14b40:	sub	r2, sl, r2, lsl #1
   14b44:	orr	r2, r2, #48	; 0x30
   14b48:	strb	r2, [r4, #-1]!
   14b4c:	rsbs	r2, sl, #9
   14b50:	mov	sl, r0
   14b54:	rscs	r2, r9, #0
   14b58:	mov	r9, r1
   14b5c:	bcc	14b28 <__assert_fail@plt+0x3444>
   14b60:	ldr	r7, [sp, #36]	; 0x24
   14b64:	ldr	r9, [fp, #20]
   14b68:	ldr	sl, [sp, #28]
   14b6c:	tst	r7, #4
   14b70:	beq	1490c <__assert_fail@plt+0x3228>
   14b74:	ldr	r0, [sp, #52]	; 0x34
   14b78:	mov	r7, r5
   14b7c:	str	r6, [sp, #16]
   14b80:	sub	r5, r5, r4
   14b84:	bl	11534 <strlen@plt>
   14b88:	add	r8, sp, #56	; 0x38
   14b8c:	str	r0, [sp, #48]	; 0x30
   14b90:	mov	r1, r4
   14b94:	mov	r2, r5
   14b98:	mov	r0, r8
   14b9c:	bl	113cc <memcpy@plt>
   14ba0:	ldr	r0, [sp, #20]
   14ba4:	ldrb	r6, [r0]
   14ba8:	cmp	r6, #255	; 0xff
   14bac:	mov	r9, r6
   14bb0:	moveq	r9, r5
   14bb4:	cmp	r6, #0
   14bb8:	mvneq	r9, #0
   14bbc:	cmp	r9, r5
   14bc0:	movhi	r9, r5
   14bc4:	sub	r4, r7, r9
   14bc8:	sub	r7, r5, r9
   14bcc:	mov	r2, r9
   14bd0:	add	r1, r8, r7
   14bd4:	mov	r0, r4
   14bd8:	bl	113cc <memcpy@plt>
   14bdc:	cmp	r7, #0
   14be0:	beq	14c6c <__assert_fail@plt+0x3588>
   14be4:	clz	r0, r6
   14be8:	ldr	r8, [sp, #20]
   14bec:	lsr	sl, r0, #5
   14bf0:	ldr	r0, [sp, #48]	; 0x30
   14bf4:	rsb	r0, r0, #0
   14bf8:	str	r0, [sp, #44]	; 0x2c
   14bfc:	ldr	r0, [sp, #44]	; 0x2c
   14c00:	ldr	r1, [sp, #52]	; 0x34
   14c04:	ldr	r2, [sp, #48]	; 0x30
   14c08:	add	r4, r4, r0
   14c0c:	mov	r0, r4
   14c10:	bl	113cc <memcpy@plt>
   14c14:	tst	sl, #1
   14c18:	add	r0, sp, #56	; 0x38
   14c1c:	addeq	r8, r8, #1
   14c20:	ldrb	r6, [r8]
   14c24:	cmp	r6, #255	; 0xff
   14c28:	mov	r5, r6
   14c2c:	moveq	r5, r7
   14c30:	cmp	r6, #0
   14c34:	moveq	r5, r9
   14c38:	cmp	r7, r5
   14c3c:	movcc	r5, r7
   14c40:	sub	r7, r7, r5
   14c44:	sub	r4, r4, r5
   14c48:	mov	r2, r5
   14c4c:	add	r1, r0, r7
   14c50:	mov	r0, r4
   14c54:	bl	113cc <memcpy@plt>
   14c58:	clz	r0, r6
   14c5c:	cmp	r7, #0
   14c60:	mov	r9, r5
   14c64:	lsr	sl, r0, #5
   14c68:	bne	14bfc <__assert_fail@plt+0x3518>
   14c6c:	ldr	r8, [sp, #32]
   14c70:	ldr	sl, [sp, #28]
   14c74:	ldr	r7, [sp, #36]	; 0x24
   14c78:	ldr	r3, [sp, #40]	; 0x28
   14c7c:	ldr	r9, [fp, #20]
   14c80:	ldr	r5, [fp, #16]
   14c84:	ldr	r6, [sp, #16]
   14c88:	tst	r7, #128	; 0x80
   14c8c:	bne	1491c <__assert_fail@plt+0x3238>
   14c90:	mov	r0, #0
   14c94:	strb	r0, [r8]
   14c98:	mov	r0, r4
   14c9c:	sub	sp, fp, #48	; 0x30
   14ca0:	vpop	{d8-d9}
   14ca4:	add	sp, sp, #4
   14ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cac:	cmp	r0, #0
   14cb0:	bne	14cf0 <__assert_fail@plt+0x360c>
   14cb4:	cmp	r5, #0
   14cb8:	beq	14cf0 <__assert_fail@plt+0x360c>
   14cbc:	adds	r0, sl, #1
   14cc0:	add	r4, r4, #1
   14cc4:	mov	r5, #0
   14cc8:	adc	r1, r9, #0
   14ccc:	cmp	r4, #10
   14cd0:	bne	14cf0 <__assert_fail@plt+0x360c>
   14cd4:	rsbs	r3, r0, #9
   14cd8:	mov	r4, #0
   14cdc:	mov	sl, r0
   14ce0:	mov	r9, r1
   14ce4:	mov	r5, #0
   14ce8:	rscs	r3, r1, #0
   14cec:	bcc	14d5c <__assert_fail@plt+0x3678>
   14cf0:	ldr	r0, [sp, #36]	; 0x24
   14cf4:	tst	r0, #8
   14cf8:	beq	14d20 <__assert_fail@plt+0x363c>
   14cfc:	cmp	r4, #0
   14d00:	bne	14d20 <__assert_fail@plt+0x363c>
   14d04:	ldr	r0, [sp, #32]
   14d08:	str	r0, [sp, #44]	; 0x2c
   14d0c:	mov	r4, #0
   14d10:	ldr	r0, [sp, #48]	; 0x30
   14d14:	cmp	r0, #0
   14d18:	bne	14640 <__assert_fail@plt+0x2f5c>
   14d1c:	b	14abc <__assert_fail@plt+0x33d8>
   14d20:	ldr	r1, [sp, #28]
   14d24:	ldr	r2, [sp, #16]
   14d28:	add	r0, r4, #48	; 0x30
   14d2c:	strb	r0, [r1, #646]!	; 0x286
   14d30:	sub	r0, r1, r2
   14d34:	ldr	r1, [sp, #12]
   14d38:	str	r0, [sp, #44]	; 0x2c
   14d3c:	bl	113cc <memcpy@plt>
   14d40:	ldr	r2, [sp, #40]	; 0x28
   14d44:	mov	r5, #0
   14d48:	mov	r4, #0
   14d4c:	ldr	r0, [sp, #48]	; 0x30
   14d50:	cmp	r0, #0
   14d54:	bne	14640 <__assert_fail@plt+0x2f5c>
   14d58:	b	14abc <__assert_fail@plt+0x33d8>
   14d5c:	ldr	r0, [sp, #32]
   14d60:	mov	r5, #0
   14d64:	mov	sl, #10
   14d68:	mov	r9, #0
   14d6c:	str	r0, [sp, #44]	; 0x2c
   14d70:	ldr	r0, [sp, #48]	; 0x30
   14d74:	cmp	r0, #0
   14d78:	bne	14640 <__assert_fail@plt+0x2f5c>
   14d7c:	b	14abc <__assert_fail@plt+0x33d8>
   14d80:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d84:	add	fp, sp, #24
   14d88:	sub	sp, sp, #8
   14d8c:	mov	r4, r2
   14d90:	mov	r8, r1
   14d94:	cmp	r0, #0
   14d98:	bne	14dc4 <__assert_fail@plt+0x36e0>
   14d9c:	movw	r0, #45381	; 0xb145
   14da0:	movt	r0, #1
   14da4:	bl	114d4 <getenv@plt>
   14da8:	cmp	r0, #0
   14dac:	bne	14dc4 <__assert_fail@plt+0x36e0>
   14db0:	movw	r0, #45392	; 0xb150
   14db4:	movt	r0, #1
   14db8:	bl	114d4 <getenv@plt>
   14dbc:	cmp	r0, #0
   14dc0:	beq	14ef0 <__assert_fail@plt+0x380c>
   14dc4:	mov	r6, r0
   14dc8:	movw	r7, #45480	; 0xb1a8
   14dcc:	movw	r1, #45468	; 0xb19c
   14dd0:	mov	r3, #4
   14dd4:	ldrb	r5, [r6], #1
   14dd8:	movt	r7, #1
   14ddc:	movt	r1, #1
   14de0:	mov	r2, r7
   14de4:	cmp	r5, #39	; 0x27
   14de8:	movne	r6, r0
   14dec:	mov	r0, r6
   14df0:	bl	139e0 <__assert_fail@plt+0x22fc>
   14df4:	sub	r1, r5, #39	; 0x27
   14df8:	cmp	r0, #0
   14dfc:	clz	r1, r1
   14e00:	lsr	r1, r1, #5
   14e04:	lsl	r5, r1, #2
   14e08:	blt	14e40 <__assert_fail@plt+0x375c>
   14e0c:	ldr	r0, [r7, r0, lsl #2]
   14e10:	mov	r2, #1
   14e14:	mov	r1, #0
   14e18:	str	r2, [r4]
   14e1c:	str	r1, [r4, #4]
   14e20:	orr	r1, r0, r5
   14e24:	mov	r0, #0
   14e28:	str	r1, [r8]
   14e2c:	ldrd	r2, [r4]
   14e30:	orrs	r1, r2, r3
   14e34:	beq	14e7c <__assert_fail@plt+0x3798>
   14e38:	sub	sp, fp, #24
   14e3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e40:	movw	r0, #45402	; 0xb15a
   14e44:	add	r1, sp, #4
   14e48:	mov	r2, #0
   14e4c:	mov	r3, r4
   14e50:	mov	r7, #0
   14e54:	movt	r0, #1
   14e58:	str	r0, [sp]
   14e5c:	mov	r0, r6
   14e60:	bl	189f4 <__assert_fail@plt+0x7310>
   14e64:	cmp	r0, #0
   14e68:	beq	14eac <__assert_fail@plt+0x37c8>
   14e6c:	str	r7, [r8]
   14e70:	ldrd	r2, [r4]
   14e74:	orrs	r1, r2, r3
   14e78:	bne	14e38 <__assert_fail@plt+0x3754>
   14e7c:	movw	r0, #45438	; 0xb17e
   14e80:	movt	r0, #1
   14e84:	bl	114d4 <getenv@plt>
   14e88:	cmp	r0, #0
   14e8c:	mov	r2, #512	; 0x200
   14e90:	mov	r0, #4
   14e94:	mov	r1, #0
   14e98:	movweq	r2, #1024	; 0x400
   14e9c:	str	r2, [r4]
   14ea0:	str	r1, [r4, #4]
   14ea4:	sub	sp, fp, #24
   14ea8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14eac:	ldrb	r0, [r6]
   14eb0:	sub	r0, r0, #48	; 0x30
   14eb4:	uxtb	r0, r0
   14eb8:	cmp	r0, #10
   14ebc:	bcc	14ee8 <__assert_fail@plt+0x3804>
   14ec0:	ldr	r0, [sp, #4]
   14ec4:	cmp	r0, r6
   14ec8:	beq	14f18 <__assert_fail@plt+0x3834>
   14ecc:	ldrb	r2, [r6, #1]
   14ed0:	add	r1, r6, #1
   14ed4:	mov	r6, r1
   14ed8:	sub	r2, r2, #48	; 0x30
   14edc:	uxtb	r2, r2
   14ee0:	cmp	r2, #10
   14ee4:	bcs	14ec4 <__assert_fail@plt+0x37e0>
   14ee8:	mov	r1, r5
   14eec:	b	14e24 <__assert_fail@plt+0x3740>
   14ef0:	movw	r0, #45438	; 0xb17e
   14ef4:	movt	r0, #1
   14ef8:	bl	114d4 <getenv@plt>
   14efc:	mov	r2, #512	; 0x200
   14f00:	cmp	r0, #0
   14f04:	mov	r1, #0
   14f08:	movweq	r2, #1024	; 0x400
   14f0c:	str	r2, [r4]
   14f10:	str	r1, [r4, #4]
   14f14:	b	14e24 <__assert_fail@plt+0x3740>
   14f18:	ldrb	r2, [r0, #-1]
   14f1c:	orr	r1, r5, #384	; 0x180
   14f20:	cmp	r2, #66	; 0x42
   14f24:	mov	r2, r1
   14f28:	orrne	r2, r5, #128	; 0x80
   14f2c:	bne	14f40 <__assert_fail@plt+0x385c>
   14f30:	ldrb	r0, [r0, #-2]
   14f34:	cmp	r0, #105	; 0x69
   14f38:	orreq	r1, r2, #32
   14f3c:	b	14e24 <__assert_fail@plt+0x3740>
   14f40:	orr	r1, r2, #32
   14f44:	b	14e24 <__assert_fail@plt+0x3740>
   14f48:	push	{r4, r5, r6, sl, fp, lr}
   14f4c:	add	fp, sp, #16
   14f50:	mov	r5, r0
   14f54:	mov	r0, #0
   14f58:	mov	r4, r1
   14f5c:	add	r6, r2, #19
   14f60:	strb	r0, [r2, #20]
   14f64:	mov	r0, r5
   14f68:	mov	r1, r4
   14f6c:	mov	r2, #10
   14f70:	mov	r3, #0
   14f74:	bl	1a0dc <__assert_fail@plt+0x89f8>
   14f78:	add	r2, r0, r0, lsl #2
   14f7c:	sub	r2, r5, r2, lsl #1
   14f80:	orr	r2, r2, #48	; 0x30
   14f84:	strb	r2, [r6], #-1
   14f88:	rsbs	r2, r5, #9
   14f8c:	mov	r5, r0
   14f90:	rscs	r2, r4, #0
   14f94:	mov	r4, r1
   14f98:	bcc	14f64 <__assert_fail@plt+0x3880>
   14f9c:	add	r0, r6, #1
   14fa0:	pop	{r4, r5, r6, sl, fp, pc}
   14fa4:	push	{r4, r5, fp, lr}
   14fa8:	add	fp, sp, #8
   14fac:	cmp	r0, #0
   14fb0:	beq	15044 <__assert_fail@plt+0x3960>
   14fb4:	mov	r1, #47	; 0x2f
   14fb8:	mov	r4, r0
   14fbc:	bl	11624 <strrchr@plt>
   14fc0:	cmp	r0, #0
   14fc4:	mov	r5, r4
   14fc8:	addne	r5, r0, #1
   14fcc:	sub	r0, r5, r4
   14fd0:	cmp	r0, #7
   14fd4:	blt	15028 <__assert_fail@plt+0x3944>
   14fd8:	movw	r1, #45544	; 0xb1e8
   14fdc:	sub	r0, r5, #7
   14fe0:	mov	r2, #7
   14fe4:	movt	r1, #1
   14fe8:	bl	116b4 <strncmp@plt>
   14fec:	cmp	r0, #0
   14ff0:	bne	15028 <__assert_fail@plt+0x3944>
   14ff4:	movw	r1, #45552	; 0xb1f0
   14ff8:	mov	r0, r5
   14ffc:	mov	r2, #3
   15000:	movt	r1, #1
   15004:	bl	116b4 <strncmp@plt>
   15008:	cmp	r0, #0
   1500c:	beq	15018 <__assert_fail@plt+0x3934>
   15010:	mov	r4, r5
   15014:	b	15028 <__assert_fail@plt+0x3944>
   15018:	movw	r0, #49568	; 0xc1a0
   1501c:	add	r4, r5, #3
   15020:	movt	r0, #2
   15024:	str	r4, [r0]
   15028:	movw	r0, #49572	; 0xc1a4
   1502c:	movt	r0, #2
   15030:	str	r4, [r0]
   15034:	movw	r0, #49616	; 0xc1d0
   15038:	movt	r0, #2
   1503c:	str	r4, [r0]
   15040:	pop	{r4, r5, fp, pc}
   15044:	movw	r0, #49584	; 0xc1b0
   15048:	mov	r1, #55	; 0x37
   1504c:	mov	r2, #1
   15050:	movt	r0, #2
   15054:	ldr	r3, [r0]
   15058:	movw	r0, #45488	; 0xb1b0
   1505c:	movt	r0, #1
   15060:	bl	11468 <fwrite@plt>
   15064:	bl	116cc <abort@plt>
   15068:	push	{r4, r5, r6, sl, fp, lr}
   1506c:	add	fp, sp, #16
   15070:	mov	r4, r0
   15074:	movw	r0, #49624	; 0xc1d8
   15078:	movt	r0, #2
   1507c:	cmp	r4, #0
   15080:	moveq	r4, r0
   15084:	bl	11558 <__errno_location@plt>
   15088:	ldr	r6, [r0]
   1508c:	mov	r5, r0
   15090:	mov	r0, r4
   15094:	mov	r1, #48	; 0x30
   15098:	bl	187b4 <__assert_fail@plt+0x70d0>
   1509c:	str	r6, [r5]
   150a0:	pop	{r4, r5, r6, sl, fp, pc}
   150a4:	movw	r1, #49624	; 0xc1d8
   150a8:	cmp	r0, #0
   150ac:	movt	r1, #2
   150b0:	movne	r1, r0
   150b4:	ldr	r0, [r1]
   150b8:	bx	lr
   150bc:	movw	r2, #49624	; 0xc1d8
   150c0:	cmp	r0, #0
   150c4:	movt	r2, #2
   150c8:	movne	r2, r0
   150cc:	str	r1, [r2]
   150d0:	bx	lr
   150d4:	movw	r3, #49624	; 0xc1d8
   150d8:	cmp	r0, #0
   150dc:	movt	r3, #2
   150e0:	movne	r3, r0
   150e4:	ubfx	r0, r1, #5, #3
   150e8:	and	r1, r1, #31
   150ec:	add	r0, r3, r0, lsl #2
   150f0:	ldr	r3, [r0, #8]
   150f4:	eor	r2, r2, r3, lsr r1
   150f8:	and	r2, r2, #1
   150fc:	eor	r2, r3, r2, lsl r1
   15100:	str	r2, [r0, #8]
   15104:	mov	r0, #1
   15108:	and	r0, r0, r3, lsr r1
   1510c:	bx	lr
   15110:	movw	r2, #49624	; 0xc1d8
   15114:	cmp	r0, #0
   15118:	movt	r2, #2
   1511c:	movne	r2, r0
   15120:	ldr	r0, [r2, #4]
   15124:	str	r1, [r2, #4]
   15128:	bx	lr
   1512c:	movw	r3, #49624	; 0xc1d8
   15130:	cmp	r0, #0
   15134:	movt	r3, #2
   15138:	movne	r3, r0
   1513c:	cmp	r1, #0
   15140:	mov	r0, #10
   15144:	cmpne	r2, #0
   15148:	str	r0, [r3]
   1514c:	bne	1515c <__assert_fail@plt+0x3a78>
   15150:	push	{fp, lr}
   15154:	mov	fp, sp
   15158:	bl	116cc <abort@plt>
   1515c:	str	r1, [r3, #40]	; 0x28
   15160:	str	r2, [r3, #44]	; 0x2c
   15164:	bx	lr
   15168:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1516c:	add	fp, sp, #28
   15170:	sub	sp, sp, #20
   15174:	mov	r7, r0
   15178:	ldr	r0, [fp, #8]
   1517c:	movw	r5, #49624	; 0xc1d8
   15180:	mov	r8, r3
   15184:	mov	r9, r2
   15188:	mov	sl, r1
   1518c:	movt	r5, #2
   15190:	cmp	r0, #0
   15194:	movne	r5, r0
   15198:	bl	11558 <__errno_location@plt>
   1519c:	mov	r4, r0
   151a0:	ldm	r5, {r0, r1}
   151a4:	ldr	r2, [r5, #40]	; 0x28
   151a8:	ldr	r3, [r5, #44]	; 0x2c
   151ac:	add	r5, r5, #8
   151b0:	ldr	r6, [r4]
   151b4:	stm	sp, {r0, r1, r5}
   151b8:	str	r2, [sp, #12]
   151bc:	str	r3, [sp, #16]
   151c0:	mov	r0, r7
   151c4:	mov	r1, sl
   151c8:	mov	r2, r9
   151cc:	mov	r3, r8
   151d0:	bl	151e0 <__assert_fail@plt+0x3afc>
   151d4:	str	r6, [r4]
   151d8:	sub	sp, fp, #28
   151dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151e4:	add	fp, sp, #28
   151e8:	sub	sp, sp, #156	; 0x9c
   151ec:	str	r0, [sp, #76]	; 0x4c
   151f0:	ldr	r0, [fp, #12]
   151f4:	mov	r6, r1
   151f8:	str	r3, [sp, #84]	; 0x54
   151fc:	str	r2, [fp, #-84]	; 0xffffffac
   15200:	and	r1, r0, #4
   15204:	str	r1, [sp, #24]
   15208:	and	r1, r0, #1
   1520c:	str	r1, [sp, #28]
   15210:	ubfx	r8, r0, #1, #1
   15214:	bl	1148c <__ctype_get_mb_cur_max@plt>
   15218:	str	r0, [sp, #32]
   1521c:	ldr	r0, [fp, #24]
   15220:	ldr	r7, [fp, #8]
   15224:	mov	r1, #0
   15228:	mov	r2, #0
   1522c:	mov	r4, #1
   15230:	str	r1, [sp, #52]	; 0x34
   15234:	str	r0, [sp, #72]	; 0x48
   15238:	ldr	r0, [fp, #20]
   1523c:	str	r0, [sp, #68]	; 0x44
   15240:	mov	r0, #0
   15244:	str	r0, [sp, #48]	; 0x30
   15248:	mov	r0, #0
   1524c:	str	r0, [sp, #92]	; 0x5c
   15250:	mov	r0, #0
   15254:	str	r0, [fp, #-76]	; 0xffffffb4
   15258:	mov	r0, #0
   1525c:	cmp	r7, #10
   15260:	bhi	16548 <__assert_fail@plt+0x4e64>
   15264:	add	r1, pc, #28
   15268:	mov	sl, r6
   1526c:	ldr	r6, [sp, #76]	; 0x4c
   15270:	ldr	ip, [fp, #-84]	; 0xffffffac
   15274:	ldr	lr, [sp, #84]	; 0x54
   15278:	mov	r9, #0
   1527c:	mov	r3, #1
   15280:	mov	r5, #0
   15284:	ldr	pc, [r1, r7, lsl #2]
   15288:	andeq	r5, r1, r8, asr r3
   1528c:	muleq	r1, r4, r3
   15290:	andeq	r5, r1, r8, ror #6
   15294:	andeq	r5, r1, r0, asr r3
   15298:	andeq	r5, r1, r8, lsl #7
   1529c:			; <UNDEFINED> instruction: 0x000153bc
   152a0:	andeq	r5, r1, r8, ror r3
   152a4:	andeq	r5, r1, r8, asr #11
   152a8:			; <UNDEFINED> instruction: 0x000152b4
   152ac:			; <UNDEFINED> instruction: 0x000152b4
   152b0:	andeq	r5, r1, ip, asr r5
   152b4:	mov	r9, r4
   152b8:	movw	r4, #45634	; 0xb242
   152bc:	mov	r5, r8
   152c0:	mov	r8, r2
   152c4:	mov	r0, #0
   152c8:	mov	r2, #5
   152cc:	movt	r4, #1
   152d0:	mov	r1, r4
   152d4:	bl	11414 <dcgettext@plt>
   152d8:	cmp	r0, r4
   152dc:	str	r0, [sp, #68]	; 0x44
   152e0:	bne	15470 <__assert_fail@plt+0x3d8c>
   152e4:	bl	19a60 <__assert_fail@plt+0x837c>
   152e8:	ldrb	r1, [r0]
   152ec:	and	r1, r1, #223	; 0xdf
   152f0:	cmp	r1, #71	; 0x47
   152f4:	beq	1543c <__assert_fail@plt+0x3d58>
   152f8:	cmp	r1, #85	; 0x55
   152fc:	bne	15454 <__assert_fail@plt+0x3d70>
   15300:	ldrb	r1, [r0, #1]
   15304:	and	r1, r1, #223	; 0xdf
   15308:	cmp	r1, #84	; 0x54
   1530c:	bne	15454 <__assert_fail@plt+0x3d70>
   15310:	ldrb	r1, [r0, #2]
   15314:	and	r1, r1, #223	; 0xdf
   15318:	cmp	r1, #70	; 0x46
   1531c:	bne	15454 <__assert_fail@plt+0x3d70>
   15320:	ldrb	r1, [r0, #3]
   15324:	cmp	r1, #45	; 0x2d
   15328:	ldrbeq	r1, [r0, #4]
   1532c:	cmpeq	r1, #56	; 0x38
   15330:	bne	15454 <__assert_fail@plt+0x3d70>
   15334:	ldrb	r0, [r0, #5]
   15338:	cmp	r0, #0
   1533c:	movw	r0, #45638	; 0xb246
   15340:	movt	r0, #1
   15344:	str	r0, [sp, #68]	; 0x44
   15348:	bne	15454 <__assert_fail@plt+0x3d70>
   1534c:	b	15470 <__assert_fail@plt+0x3d8c>
   15350:	mov	r0, #1
   15354:	b	15394 <__assert_fail@plt+0x3cb0>
   15358:	mov	r7, #0
   1535c:	mov	r9, #0
   15360:	mov	r3, r0
   15364:	b	15434 <__assert_fail@plt+0x3d50>
   15368:	tst	r8, #1
   1536c:	bne	15394 <__assert_fail@plt+0x3cb0>
   15370:	mov	r3, r0
   15374:	b	153ec <__assert_fail@plt+0x3d08>
   15378:	mov	r0, #1
   1537c:	mov	r9, #0
   15380:	mov	r7, #5
   15384:	b	153d0 <__assert_fail@plt+0x3cec>
   15388:	mov	r3, #1
   1538c:	tst	r8, #1
   15390:	beq	153ec <__assert_fail@plt+0x3d08>
   15394:	mov	r1, #1
   15398:	mov	r9, #0
   1539c:	mov	r7, #2
   153a0:	mov	r3, r0
   153a4:	mov	r5, #1
   153a8:	str	r1, [fp, #-76]	; 0xffffffb4
   153ac:	movw	r1, #45636	; 0xb244
   153b0:	movt	r1, #1
   153b4:	str	r1, [sp, #92]	; 0x5c
   153b8:	b	155c8 <__assert_fail@plt+0x3ee4>
   153bc:	mov	r7, #5
   153c0:	tst	r8, #1
   153c4:	beq	1540c <__assert_fail@plt+0x3d28>
   153c8:	mov	r0, #1
   153cc:	mov	r9, #0
   153d0:	str	r0, [fp, #-76]	; 0xffffffb4
   153d4:	movw	r0, #45632	; 0xb240
   153d8:	mov	r3, #1
   153dc:	mov	r5, #1
   153e0:	movt	r0, #1
   153e4:	str	r0, [sp, #92]	; 0x5c
   153e8:	b	155c8 <__assert_fail@plt+0x3ee4>
   153ec:	cmp	sl, #0
   153f0:	mov	r9, #1
   153f4:	mov	r7, #2
   153f8:	movne	r0, #39	; 0x27
   153fc:	strbne	r0, [r6]
   15400:	movw	r0, #45636	; 0xb244
   15404:	movt	r0, #1
   15408:	b	15428 <__assert_fail@plt+0x3d44>
   1540c:	cmp	sl, #0
   15410:	mov	r9, #1
   15414:	mov	r3, #1
   15418:	movne	r0, #34	; 0x22
   1541c:	strbne	r0, [r6]
   15420:	movw	r0, #45632	; 0xb240
   15424:	movt	r0, #1
   15428:	str	r0, [sp, #92]	; 0x5c
   1542c:	mov	r0, #1
   15430:	str	r0, [fp, #-76]	; 0xffffffb4
   15434:	mov	r5, #0
   15438:	b	155c8 <__assert_fail@plt+0x3ee4>
   1543c:	ldrb	r1, [r0, #1]
   15440:	and	r1, r1, #223	; 0xdf
   15444:	cmp	r1, #66	; 0x42
   15448:	ldrbeq	r1, [r0, #2]
   1544c:	cmpeq	r1, #49	; 0x31
   15450:	beq	16370 <__assert_fail@plt+0x4c8c>
   15454:	movw	r0, #45636	; 0xb244
   15458:	movw	r1, #45632	; 0xb240
   1545c:	cmp	r7, #9
   15460:	movt	r0, #1
   15464:	movt	r1, #1
   15468:	moveq	r0, r1
   1546c:	str	r0, [sp, #68]	; 0x44
   15470:	movw	r4, #45636	; 0xb244
   15474:	mov	r0, #0
   15478:	mov	r2, #5
   1547c:	movt	r4, #1
   15480:	mov	r1, r4
   15484:	bl	11414 <dcgettext@plt>
   15488:	cmp	r0, r4
   1548c:	str	r0, [sp, #72]	; 0x48
   15490:	beq	154a0 <__assert_fail@plt+0x3dbc>
   15494:	mov	r4, r9
   15498:	mov	r2, r8
   1549c:	b	15558 <__assert_fail@plt+0x3e74>
   154a0:	bl	19a60 <__assert_fail@plt+0x837c>
   154a4:	ldrb	r1, [r0]
   154a8:	mov	r4, r9
   154ac:	and	r1, r1, #223	; 0xdf
   154b0:	cmp	r1, #71	; 0x47
   154b4:	beq	15510 <__assert_fail@plt+0x3e2c>
   154b8:	cmp	r1, #85	; 0x55
   154bc:	mov	r2, r8
   154c0:	bne	15538 <__assert_fail@plt+0x3e54>
   154c4:	ldrb	r1, [r0, #1]
   154c8:	and	r1, r1, #223	; 0xdf
   154cc:	cmp	r1, #84	; 0x54
   154d0:	bne	15538 <__assert_fail@plt+0x3e54>
   154d4:	ldrb	r1, [r0, #2]
   154d8:	and	r1, r1, #223	; 0xdf
   154dc:	cmp	r1, #70	; 0x46
   154e0:	ldrbeq	r1, [r0, #3]
   154e4:	cmpeq	r1, #45	; 0x2d
   154e8:	bne	15538 <__assert_fail@plt+0x3e54>
   154ec:	ldrb	r1, [r0, #4]
   154f0:	cmp	r1, #56	; 0x38
   154f4:	ldrbeq	r0, [r0, #5]
   154f8:	cmpeq	r0, #0
   154fc:	bne	15538 <__assert_fail@plt+0x3e54>
   15500:	movw	r0, #45642	; 0xb24a
   15504:	movt	r0, #1
   15508:	str	r0, [sp, #72]	; 0x48
   1550c:	b	15558 <__assert_fail@plt+0x3e74>
   15510:	ldrb	r1, [r0, #1]
   15514:	mov	r2, r8
   15518:	and	r1, r1, #223	; 0xdf
   1551c:	cmp	r1, #66	; 0x42
   15520:	bne	15538 <__assert_fail@plt+0x3e54>
   15524:	ldrb	r1, [r0, #2]
   15528:	cmp	r1, #49	; 0x31
   1552c:	ldrbeq	r1, [r0, #3]
   15530:	cmpeq	r1, #56	; 0x38
   15534:	beq	163b4 <__assert_fail@plt+0x4cd0>
   15538:	movw	r0, #45636	; 0xb244
   1553c:	cmp	r7, #9
   15540:	movt	r0, #1
   15544:	mov	r1, r0
   15548:	movw	r0, #45632	; 0xb240
   1554c:	movt	r0, #1
   15550:	moveq	r1, r0
   15554:	str	r1, [sp, #72]	; 0x48
   15558:	mov	r8, r5
   1555c:	mov	r9, #0
   15560:	tst	r8, #1
   15564:	mov	r5, r8
   15568:	str	r2, [fp, #-48]	; 0xffffffd0
   1556c:	bne	155a4 <__assert_fail@plt+0x3ec0>
   15570:	ldr	r0, [sp, #68]	; 0x44
   15574:	ldrb	r0, [r0]
   15578:	cmp	r0, #0
   1557c:	beq	155a4 <__assert_fail@plt+0x3ec0>
   15580:	ldr	r1, [sp, #68]	; 0x44
   15584:	mov	r9, #0
   15588:	add	r1, r1, #1
   1558c:	cmp	r9, sl
   15590:	strbcc	r0, [r6, r9]
   15594:	ldrb	r0, [r1, r9]
   15598:	add	r9, r9, #1
   1559c:	cmp	r0, #0
   155a0:	bne	1558c <__assert_fail@plt+0x3ea8>
   155a4:	ldr	r8, [sp, #72]	; 0x48
   155a8:	mov	r0, r8
   155ac:	bl	11534 <strlen@plt>
   155b0:	ldr	ip, [fp, #-84]	; 0xffffffac
   155b4:	ldr	lr, [sp, #84]	; 0x54
   155b8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   155bc:	str	r0, [fp, #-76]	; 0xffffffb4
   155c0:	str	r8, [sp, #92]	; 0x5c
   155c4:	mov	r3, #1
   155c8:	ldr	r0, [fp, #16]
   155cc:	str	r7, [fp, #-64]	; 0xffffffc0
   155d0:	str	r5, [fp, #-72]	; 0xffffffb8
   155d4:	str	r3, [sp, #80]	; 0x50
   155d8:	cmp	r0, #0
   155dc:	movwne	r0, #1
   155e0:	and	r0, r0, r5
   155e4:	str	r0, [fp, #-88]	; 0xffffffa8
   155e8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   155ec:	cmp	r0, #0
   155f0:	movwne	r0, #1
   155f4:	subs	r7, r7, #2
   155f8:	and	r1, r0, r5
   155fc:	str	r7, [fp, #-80]	; 0xffffffb0
   15600:	and	r1, r3, r1
   15604:	str	r1, [sp, #40]	; 0x28
   15608:	clz	r1, r7
   1560c:	lsr	r1, r1, #5
   15610:	and	r1, r1, r5
   15614:	eor	r5, r5, #1
   15618:	str	r1, [sp, #36]	; 0x24
   1561c:	mov	r1, r7
   15620:	str	r5, [sp, #88]	; 0x58
   15624:	mov	r7, #0
   15628:	movwne	r1, #1
   1562c:	orr	r5, r1, r5
   15630:	and	r1, r1, r3
   15634:	and	r0, r0, r1
   15638:	str	r5, [sp, #60]	; 0x3c
   1563c:	str	r1, [fp, #-68]	; 0xffffffbc
   15640:	str	r0, [fp, #-60]	; 0xffffffc4
   15644:	eor	r0, r3, #1
   15648:	str	r0, [sp, #44]	; 0x2c
   1564c:	cmn	lr, #1
   15650:	beq	15660 <__assert_fail@plt+0x3f7c>
   15654:	cmp	r7, lr
   15658:	bne	1566c <__assert_fail@plt+0x3f88>
   1565c:	b	162e4 <__assert_fail@plt+0x4c00>
   15660:	ldrb	r0, [ip, r7]
   15664:	cmp	r0, #0
   15668:	beq	162ec <__assert_fail@plt+0x4c08>
   1566c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   15670:	mov	r8, #0
   15674:	str	r4, [fp, #-52]	; 0xffffffcc
   15678:	str	r2, [fp, #-48]	; 0xffffffd0
   1567c:	cmp	r0, #0
   15680:	beq	156b4 <__assert_fail@plt+0x3fd0>
   15684:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15688:	add	r4, r7, r0
   1568c:	cmp	r0, #2
   15690:	bcc	156ac <__assert_fail@plt+0x3fc8>
   15694:	cmn	lr, #1
   15698:	bne	156ac <__assert_fail@plt+0x3fc8>
   1569c:	mov	r0, ip
   156a0:	bl	11534 <strlen@plt>
   156a4:	ldr	ip, [fp, #-84]	; 0xffffffac
   156a8:	mov	lr, r0
   156ac:	cmp	r4, lr
   156b0:	bls	156cc <__assert_fail@plt+0x3fe8>
   156b4:	mov	r0, #0
   156b8:	str	r0, [fp, #-56]	; 0xffffffc8
   156bc:	ldrb	r5, [ip, r7]
   156c0:	cmp	r5, #126	; 0x7e
   156c4:	bls	1571c <__assert_fail@plt+0x4038>
   156c8:	b	15b24 <__assert_fail@plt+0x4440>
   156cc:	ldr	r1, [sp, #92]	; 0x5c
   156d0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   156d4:	add	r0, ip, r7
   156d8:	mov	r4, lr
   156dc:	bl	11408 <memcmp@plt>
   156e0:	ldr	r2, [sp, #88]	; 0x58
   156e4:	cmp	r0, #0
   156e8:	mov	r1, r0
   156ec:	movwne	r1, #1
   156f0:	orr	r1, r1, r2
   156f4:	tst	r1, #1
   156f8:	beq	163f8 <__assert_fail@plt+0x4d14>
   156fc:	ldr	ip, [fp, #-84]	; 0xffffffac
   15700:	clz	r0, r0
   15704:	mov	lr, r4
   15708:	lsr	r0, r0, #5
   1570c:	str	r0, [fp, #-56]	; 0xffffffc8
   15710:	ldrb	r5, [ip, r7]
   15714:	cmp	r5, #126	; 0x7e
   15718:	bhi	15b24 <__assert_fail@plt+0x4440>
   1571c:	add	r3, pc, #16
   15720:	mov	r4, #1
   15724:	mov	r2, #110	; 0x6e
   15728:	mov	r0, #97	; 0x61
   1572c:	mov	r1, #0
   15730:	ldr	pc, [r3, r5, lsl #2]
   15734:	andeq	r5, r1, r4, lsl #20
   15738:	andeq	r5, r1, r4, lsr #22
   1573c:	andeq	r5, r1, r4, lsr #22
   15740:	andeq	r5, r1, r4, lsr #22
   15744:	andeq	r5, r1, r4, lsr #22
   15748:	andeq	r5, r1, r4, lsr #22
   1574c:	andeq	r5, r1, r4, lsr #22
   15750:	andeq	r5, r1, r0, lsl #24
   15754:	andeq	r5, r1, r4, ror #19
   15758:	andeq	r5, r1, ip, asr #19
   1575c:	strdeq	r5, [r1], -r0
   15760:	andeq	r5, r1, r0, lsl #21
   15764:	andeq	r5, r1, r4, asr #19
   15768:	andeq	r5, r1, ip, ror #19
   1576c:	andeq	r5, r1, r4, lsr #22
   15770:	andeq	r5, r1, r4, lsr #22
   15774:	andeq	r5, r1, r4, lsr #22
   15778:	andeq	r5, r1, r4, lsr #22
   1577c:	andeq	r5, r1, r4, lsr #22
   15780:	andeq	r5, r1, r4, lsr #22
   15784:	andeq	r5, r1, r4, lsr #22
   15788:	andeq	r5, r1, r4, lsr #22
   1578c:	andeq	r5, r1, r4, lsr #22
   15790:	andeq	r5, r1, r4, lsr #22
   15794:	andeq	r5, r1, r4, lsr #22
   15798:	andeq	r5, r1, r4, lsr #22
   1579c:	andeq	r5, r1, r4, lsr #22
   157a0:	andeq	r5, r1, r4, lsr #22
   157a4:	andeq	r5, r1, r4, lsr #22
   157a8:	andeq	r5, r1, r4, lsr #22
   157ac:	andeq	r5, r1, r4, lsr #22
   157b0:	andeq	r5, r1, r4, lsr #22
   157b4:	andeq	r5, r1, ip, ror fp
   157b8:	andeq	r5, r1, r0, lsl #23
   157bc:	andeq	r5, r1, r0, lsl #23
   157c0:	andeq	r5, r1, r0, asr r9
   157c4:	andeq	r5, r1, r0, lsl #23
   157c8:	andeq	r5, r1, r0, lsr r9
   157cc:	andeq	r5, r1, r0, lsl #23
   157d0:	andeq	r5, r1, r8, lsl #21
   157d4:	andeq	r5, r1, r0, lsl #23
   157d8:	andeq	r5, r1, r0, lsl #23
   157dc:	andeq	r5, r1, r0, lsl #23
   157e0:	andeq	r5, r1, r0, lsr r9
   157e4:	andeq	r5, r1, r0, lsr r9
   157e8:	andeq	r5, r1, r0, lsr r9
   157ec:	andeq	r5, r1, r0, lsr r9
   157f0:	andeq	r5, r1, r0, lsr r9
   157f4:	andeq	r5, r1, r0, lsr r9
   157f8:	andeq	r5, r1, r0, lsr r9
   157fc:	andeq	r5, r1, r0, lsr r9
   15800:	andeq	r5, r1, r0, lsr r9
   15804:	andeq	r5, r1, r0, lsr r9
   15808:	andeq	r5, r1, r0, lsr r9
   1580c:	andeq	r5, r1, r0, lsr r9
   15810:	andeq	r5, r1, r0, lsr r9
   15814:	andeq	r5, r1, r0, lsr r9
   15818:	andeq	r5, r1, r0, lsr r9
   1581c:	andeq	r5, r1, r0, lsr r9
   15820:	andeq	r5, r1, r0, lsl #23
   15824:	andeq	r5, r1, r0, lsl #23
   15828:	andeq	r5, r1, r0, lsl #23
   1582c:	andeq	r5, r1, r0, lsl #23
   15830:	andeq	r5, r1, r4, asr #20
   15834:	andeq	r5, r1, r4, lsr #22
   15838:	andeq	r5, r1, r0, lsr r9
   1583c:	andeq	r5, r1, r0, lsr r9
   15840:	andeq	r5, r1, r0, lsr r9
   15844:	andeq	r5, r1, r0, lsr r9
   15848:	andeq	r5, r1, r0, lsr r9
   1584c:	andeq	r5, r1, r0, lsr r9
   15850:	andeq	r5, r1, r0, lsr r9
   15854:	andeq	r5, r1, r0, lsr r9
   15858:	andeq	r5, r1, r0, lsr r9
   1585c:	andeq	r5, r1, r0, lsr r9
   15860:	andeq	r5, r1, r0, lsr r9
   15864:	andeq	r5, r1, r0, lsr r9
   15868:	andeq	r5, r1, r0, lsr r9
   1586c:	andeq	r5, r1, r0, lsr r9
   15870:	andeq	r5, r1, r0, lsr r9
   15874:	andeq	r5, r1, r0, lsr r9
   15878:	andeq	r5, r1, r0, lsr r9
   1587c:	andeq	r5, r1, r0, lsr r9
   15880:	andeq	r5, r1, r0, lsr r9
   15884:	andeq	r5, r1, r0, lsr r9
   15888:	andeq	r5, r1, r0, lsr r9
   1588c:	andeq	r5, r1, r0, lsr r9
   15890:	andeq	r5, r1, r0, lsr r9
   15894:	andeq	r5, r1, r0, lsr r9
   15898:	andeq	r5, r1, r0, lsr r9
   1589c:	andeq	r5, r1, r0, lsr r9
   158a0:	andeq	r5, r1, r0, lsl #23
   158a4:	muleq	r1, r0, r9
   158a8:	andeq	r5, r1, r0, lsr r9
   158ac:	andeq	r5, r1, r0, lsl #23
   158b0:	andeq	r5, r1, r0, lsr r9
   158b4:	andeq	r5, r1, r0, lsl #23
   158b8:	andeq	r5, r1, r0, lsr r9
   158bc:	andeq	r5, r1, r0, lsr r9
   158c0:	andeq	r5, r1, r0, lsr r9
   158c4:	andeq	r5, r1, r0, lsr r9
   158c8:	andeq	r5, r1, r0, lsr r9
   158cc:	andeq	r5, r1, r0, lsr r9
   158d0:	andeq	r5, r1, r0, lsr r9
   158d4:	andeq	r5, r1, r0, lsr r9
   158d8:	andeq	r5, r1, r0, lsr r9
   158dc:	andeq	r5, r1, r0, lsr r9
   158e0:	andeq	r5, r1, r0, lsr r9
   158e4:	andeq	r5, r1, r0, lsr r9
   158e8:	andeq	r5, r1, r0, lsr r9
   158ec:	andeq	r5, r1, r0, lsr r9
   158f0:	andeq	r5, r1, r0, lsr r9
   158f4:	andeq	r5, r1, r0, lsr r9
   158f8:	andeq	r5, r1, r0, lsr r9
   158fc:	andeq	r5, r1, r0, lsr r9
   15900:	andeq	r5, r1, r0, lsr r9
   15904:	andeq	r5, r1, r0, lsr r9
   15908:	andeq	r5, r1, r0, lsr r9
   1590c:	andeq	r5, r1, r0, lsr r9
   15910:	andeq	r5, r1, r0, lsr r9
   15914:	andeq	r5, r1, r0, lsr r9
   15918:	andeq	r5, r1, r0, lsr r9
   1591c:	andeq	r5, r1, r0, lsr r9
   15920:	andeq	r5, r1, r0, ror r9
   15924:	andeq	r5, r1, r0, lsl #23
   15928:	andeq	r5, r1, r0, ror r9
   1592c:	andeq	r5, r1, r0, asr r9
   15930:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15934:	cmp	r0, #0
   15938:	beq	15c14 <__assert_fail@plt+0x4530>
   1593c:	ldr	r0, [fp, #16]
   15940:	cmp	r0, #0
   15944:	mov	r0, r5
   15948:	bne	15c24 <__assert_fail@plt+0x4540>
   1594c:	b	15c44 <__assert_fail@plt+0x4560>
   15950:	mov	r4, #0
   15954:	cmp	r7, #0
   15958:	beq	15b7c <__assert_fail@plt+0x4498>
   1595c:	mov	r8, #0
   15960:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15964:	cmp	r0, #0
   15968:	bne	1593c <__assert_fail@plt+0x4258>
   1596c:	b	15c14 <__assert_fail@plt+0x4530>
   15970:	mov	r4, #0
   15974:	cmn	lr, #1
   15978:	beq	15b54 <__assert_fail@plt+0x4470>
   1597c:	cmp	r7, #0
   15980:	bne	1595c <__assert_fail@plt+0x4278>
   15984:	cmp	lr, #1
   15988:	beq	15b7c <__assert_fail@plt+0x4498>
   1598c:	b	1595c <__assert_fail@plt+0x4278>
   15990:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15994:	cmp	r0, #2
   15998:	bne	15bac <__assert_fail@plt+0x44c8>
   1599c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   159a0:	tst	r0, #1
   159a4:	bne	1640c <__assert_fail@plt+0x4d28>
   159a8:	mov	r8, #0
   159ac:	mov	r0, #92	; 0x5c
   159b0:	mov	r4, #0
   159b4:	cmp	r8, #0
   159b8:	beq	15bcc <__assert_fail@plt+0x44e8>
   159bc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   159c0:	b	15cc0 <__assert_fail@plt+0x45dc>
   159c4:	mov	r0, #102	; 0x66
   159c8:	b	15c00 <__assert_fail@plt+0x451c>
   159cc:	mov	r2, #116	; 0x74
   159d0:	ldr	r0, [sp, #60]	; 0x3c
   159d4:	tst	r0, #1
   159d8:	mov	r0, r2
   159dc:	bne	15c00 <__assert_fail@plt+0x451c>
   159e0:	b	1640c <__assert_fail@plt+0x4d28>
   159e4:	mov	r0, #98	; 0x62
   159e8:	b	15c00 <__assert_fail@plt+0x451c>
   159ec:	mov	r2, #114	; 0x72
   159f0:	ldr	r0, [sp, #60]	; 0x3c
   159f4:	tst	r0, #1
   159f8:	mov	r0, r2
   159fc:	bne	15c00 <__assert_fail@plt+0x451c>
   15a00:	b	1640c <__assert_fail@plt+0x4d28>
   15a04:	ldr	r0, [sp, #80]	; 0x50
   15a08:	tst	r0, #1
   15a0c:	beq	15ce8 <__assert_fail@plt+0x4604>
   15a10:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15a14:	tst	r0, #1
   15a18:	bne	16534 <__assert_fail@plt+0x4e50>
   15a1c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15a20:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15a24:	cmp	r0, #2
   15a28:	ldr	r0, [fp, #-80]	; 0xffffffb0
   15a2c:	movwne	r0, #1
   15a30:	orr	r0, r0, r2
   15a34:	tst	r0, #1
   15a38:	beq	15fe0 <__assert_fail@plt+0x48fc>
   15a3c:	mov	r0, r9
   15a40:	b	16014 <__assert_fail@plt+0x4930>
   15a44:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15a48:	mov	r8, #0
   15a4c:	mov	r5, #63	; 0x3f
   15a50:	cmp	r0, #5
   15a54:	beq	15e9c <__assert_fail@plt+0x47b8>
   15a58:	cmp	r0, #2
   15a5c:	bne	15f4c <__assert_fail@plt+0x4868>
   15a60:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15a64:	tst	r0, #1
   15a68:	bne	1640c <__assert_fail@plt+0x4d28>
   15a6c:	mov	r4, #0
   15a70:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15a74:	cmp	r0, #0
   15a78:	bne	1593c <__assert_fail@plt+0x4258>
   15a7c:	b	15c14 <__assert_fail@plt+0x4530>
   15a80:	mov	r0, #118	; 0x76
   15a84:	b	15c00 <__assert_fail@plt+0x451c>
   15a88:	mov	r0, #1
   15a8c:	mov	r5, #39	; 0x27
   15a90:	str	r0, [sp, #52]	; 0x34
   15a94:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15a98:	cmp	r0, #2
   15a9c:	bne	15b10 <__assert_fail@plt+0x442c>
   15aa0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15aa4:	tst	r0, #1
   15aa8:	bne	1640c <__assert_fail@plt+0x4d28>
   15aac:	ldr	r2, [sp, #48]	; 0x30
   15ab0:	clz	r1, sl
   15ab4:	mov	r8, #0
   15ab8:	lsr	r1, r1, #5
   15abc:	cmp	r2, #0
   15ac0:	mov	r0, r2
   15ac4:	movwne	r0, #1
   15ac8:	orrs	r0, r0, r1
   15acc:	moveq	r2, sl
   15ad0:	moveq	sl, r0
   15ad4:	cmp	r9, sl
   15ad8:	str	r2, [sp, #48]	; 0x30
   15adc:	movcc	r0, #39	; 0x27
   15ae0:	strbcc	r0, [r6, r9]
   15ae4:	add	r0, r9, #1
   15ae8:	cmp	r0, sl
   15aec:	movcc	r1, #92	; 0x5c
   15af0:	strbcc	r1, [r6, r0]
   15af4:	add	r0, r9, #2
   15af8:	add	r9, r9, #3
   15afc:	cmp	r0, sl
   15b00:	movcc	r1, #39	; 0x27
   15b04:	strbcc	r1, [r6, r0]
   15b08:	mov	r0, #0
   15b0c:	str	r0, [fp, #-48]	; 0xffffffd0
   15b10:	mov	r4, #1
   15b14:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15b18:	cmp	r0, #0
   15b1c:	bne	1593c <__assert_fail@plt+0x4258>
   15b20:	b	15c14 <__assert_fail@plt+0x4530>
   15b24:	ldr	r0, [sp, #32]
   15b28:	cmp	r0, #1
   15b2c:	bne	15d18 <__assert_fail@plt+0x4634>
   15b30:	str	lr, [sp, #84]	; 0x54
   15b34:	bl	1151c <__ctype_b_loc@plt>
   15b38:	ldr	r0, [r0]
   15b3c:	ldr	ip, [fp, #-84]	; 0xffffffac
   15b40:	mov	r1, #1
   15b44:	add	r0, r0, r5, lsl #1
   15b48:	ldrb	r0, [r0, #1]
   15b4c:	ubfx	r4, r0, #6, #1
   15b50:	b	16110 <__assert_fail@plt+0x4a2c>
   15b54:	cmp	r7, #0
   15b58:	ldrbeq	r0, [ip, #1]
   15b5c:	cmpeq	r0, #0
   15b60:	beq	15b7c <__assert_fail@plt+0x4498>
   15b64:	mvn	lr, #0
   15b68:	mov	r8, #0
   15b6c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15b70:	cmp	r0, #0
   15b74:	bne	1593c <__assert_fail@plt+0x4258>
   15b78:	b	15c14 <__assert_fail@plt+0x4530>
   15b7c:	mov	r1, #1
   15b80:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15b84:	cmp	r0, #2
   15b88:	bne	15b98 <__assert_fail@plt+0x44b4>
   15b8c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15b90:	tst	r0, #1
   15b94:	bne	1640c <__assert_fail@plt+0x4d28>
   15b98:	mov	r4, r1
   15b9c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15ba0:	cmp	r0, #0
   15ba4:	bne	1593c <__assert_fail@plt+0x4258>
   15ba8:	b	15c14 <__assert_fail@plt+0x4530>
   15bac:	ldr	r1, [sp, #40]	; 0x28
   15bb0:	mov	r8, #0
   15bb4:	mov	r0, #92	; 0x5c
   15bb8:	cmp	r1, #0
   15bbc:	beq	15c00 <__assert_fail@plt+0x451c>
   15bc0:	mov	r4, #0
   15bc4:	cmp	r8, #0
   15bc8:	bne	159bc <__assert_fail@plt+0x42d8>
   15bcc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15bd0:	tst	r2, #1
   15bd4:	beq	15cc0 <__assert_fail@plt+0x45dc>
   15bd8:	cmp	r9, sl
   15bdc:	movcc	r1, #39	; 0x27
   15be0:	strbcc	r1, [r6, r9]
   15be4:	add	r1, r9, #1
   15be8:	add	r9, r9, #2
   15bec:	cmp	r1, sl
   15bf0:	movcc	r2, #39	; 0x27
   15bf4:	strbcc	r2, [r6, r1]
   15bf8:	mov	r2, #0
   15bfc:	b	15cc0 <__assert_fail@plt+0x45dc>
   15c00:	ldr	r1, [sp, #80]	; 0x50
   15c04:	mov	r4, #0
   15c08:	mov	r8, #0
   15c0c:	tst	r1, #1
   15c10:	bne	15c50 <__assert_fail@plt+0x456c>
   15c14:	ldr	r0, [fp, #-88]	; 0xffffffa8
   15c18:	cmp	r0, #0
   15c1c:	mov	r0, r5
   15c20:	beq	15c44 <__assert_fail@plt+0x4560>
   15c24:	ldr	r1, [fp, #16]
   15c28:	ubfx	r0, r5, #5, #3
   15c2c:	mov	r2, #1
   15c30:	ldr	r0, [r1, r0, lsl #2]
   15c34:	and	r1, r5, #31
   15c38:	tst	r0, r2, lsl r1
   15c3c:	mov	r0, r5
   15c40:	bne	15c50 <__assert_fail@plt+0x456c>
   15c44:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15c48:	cmp	r1, #0
   15c4c:	beq	160a8 <__assert_fail@plt+0x49c4>
   15c50:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15c54:	tst	r1, #1
   15c58:	bne	163ec <__assert_fail@plt+0x4d08>
   15c5c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   15c60:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15c64:	cmp	r1, #2
   15c68:	ldr	r1, [fp, #-80]	; 0xffffffb0
   15c6c:	movwne	r1, #1
   15c70:	orr	r1, r1, r2
   15c74:	tst	r1, #1
   15c78:	bne	15cb0 <__assert_fail@plt+0x45cc>
   15c7c:	cmp	r9, sl
   15c80:	movcc	r1, #39	; 0x27
   15c84:	strbcc	r1, [r6, r9]
   15c88:	add	r1, r9, #1
   15c8c:	cmp	r1, sl
   15c90:	movcc	r2, #36	; 0x24
   15c94:	strbcc	r2, [r6, r1]
   15c98:	add	r1, r9, #2
   15c9c:	add	r9, r9, #3
   15ca0:	cmp	r1, sl
   15ca4:	movcc	r2, #39	; 0x27
   15ca8:	strbcc	r2, [r6, r1]
   15cac:	mov	r2, #1
   15cb0:	cmp	r9, sl
   15cb4:	movcc	r1, #92	; 0x5c
   15cb8:	strbcc	r1, [r6, r9]
   15cbc:	add	r9, r9, #1
   15cc0:	cmp	r9, sl
   15cc4:	add	r7, r7, #1
   15cc8:	strbcc	r0, [r6, r9]
   15ccc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15cd0:	add	r9, r9, #1
   15cd4:	and	r0, r0, r4
   15cd8:	mov	r4, r0
   15cdc:	cmn	lr, #1
   15ce0:	bne	15654 <__assert_fail@plt+0x3f70>
   15ce4:	b	15660 <__assert_fail@plt+0x3f7c>
   15ce8:	ldr	r0, [sp, #28]
   15cec:	mov	r4, #0
   15cf0:	mov	r8, #0
   15cf4:	mov	r5, #0
   15cf8:	cmp	r0, #0
   15cfc:	beq	15c14 <__assert_fail@plt+0x4530>
   15d00:	ldr	r4, [fp, #-52]	; 0xffffffcc
   15d04:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15d08:	add	r7, r7, #1
   15d0c:	cmn	lr, #1
   15d10:	bne	15654 <__assert_fail@plt+0x3f70>
   15d14:	b	15660 <__assert_fail@plt+0x3f7c>
   15d18:	mov	r0, #0
   15d1c:	cmn	lr, #1
   15d20:	str	r0, [fp, #-36]	; 0xffffffdc
   15d24:	str	r0, [fp, #-40]	; 0xffffffd8
   15d28:	bne	15d3c <__assert_fail@plt+0x4658>
   15d2c:	mov	r0, ip
   15d30:	bl	11534 <strlen@plt>
   15d34:	ldr	ip, [fp, #-84]	; 0xffffffac
   15d38:	mov	lr, r0
   15d3c:	ldr	r0, [sp, #36]	; 0x24
   15d40:	str	sl, [sp, #56]	; 0x38
   15d44:	str	lr, [sp, #84]	; 0x54
   15d48:	cmp	r0, #0
   15d4c:	beq	15f64 <__assert_fail@plt+0x4880>
   15d50:	add	r0, ip, r7
   15d54:	mov	r4, #1
   15d58:	mov	r6, #0
   15d5c:	sub	sl, fp, #40	; 0x28
   15d60:	str	r0, [sp, #20]
   15d64:	str	r6, [sp, #64]	; 0x40
   15d68:	add	r6, r6, r7
   15d6c:	sub	r0, fp, #44	; 0x2c
   15d70:	mov	r3, sl
   15d74:	add	r1, ip, r6
   15d78:	sub	r2, lr, r6
   15d7c:	bl	19a98 <__assert_fail@plt+0x83b4>
   15d80:	cmn	r0, #2
   15d84:	beq	160c0 <__assert_fail@plt+0x49dc>
   15d88:	ldr	sl, [sp, #56]	; 0x38
   15d8c:	cmn	r0, #1
   15d90:	beq	160b4 <__assert_fail@plt+0x49d0>
   15d94:	cmp	r0, #0
   15d98:	beq	160b8 <__assert_fail@plt+0x49d4>
   15d9c:	cmp	r0, #2
   15da0:	bcc	15e60 <__assert_fail@plt+0x477c>
   15da4:	ldr	r1, [sp, #64]	; 0x40
   15da8:	ldr	r2, [sp, #20]
   15dac:	add	r1, r2, r1
   15db0:	mov	r2, #1
   15db4:	ldrb	r3, [r1, r2]
   15db8:	sub	r3, r3, #91	; 0x5b
   15dbc:	cmp	r3, #33	; 0x21
   15dc0:	bhi	15e54 <__assert_fail@plt+0x4770>
   15dc4:	add	r6, pc, #0
   15dc8:	ldr	pc, [r6, r3, lsl #2]
   15dcc:	andeq	r6, r1, r8, lsl r4
   15dd0:	andeq	r6, r1, r8, lsl r4
   15dd4:	andeq	r5, r1, r4, asr lr
   15dd8:	andeq	r6, r1, r8, lsl r4
   15ddc:	andeq	r5, r1, r4, asr lr
   15de0:	andeq	r6, r1, r8, lsl r4
   15de4:	andeq	r5, r1, r4, asr lr
   15de8:	andeq	r5, r1, r4, asr lr
   15dec:	andeq	r5, r1, r4, asr lr
   15df0:	andeq	r5, r1, r4, asr lr
   15df4:	andeq	r5, r1, r4, asr lr
   15df8:	andeq	r5, r1, r4, asr lr
   15dfc:	andeq	r5, r1, r4, asr lr
   15e00:	andeq	r5, r1, r4, asr lr
   15e04:	andeq	r5, r1, r4, asr lr
   15e08:	andeq	r5, r1, r4, asr lr
   15e0c:	andeq	r5, r1, r4, asr lr
   15e10:	andeq	r5, r1, r4, asr lr
   15e14:	andeq	r5, r1, r4, asr lr
   15e18:	andeq	r5, r1, r4, asr lr
   15e1c:	andeq	r5, r1, r4, asr lr
   15e20:	andeq	r5, r1, r4, asr lr
   15e24:	andeq	r5, r1, r4, asr lr
   15e28:	andeq	r5, r1, r4, asr lr
   15e2c:	andeq	r5, r1, r4, asr lr
   15e30:	andeq	r5, r1, r4, asr lr
   15e34:	andeq	r5, r1, r4, asr lr
   15e38:	andeq	r5, r1, r4, asr lr
   15e3c:	andeq	r5, r1, r4, asr lr
   15e40:	andeq	r5, r1, r4, asr lr
   15e44:	andeq	r5, r1, r4, asr lr
   15e48:	andeq	r5, r1, r4, asr lr
   15e4c:	andeq	r5, r1, r4, asr lr
   15e50:	andeq	r6, r1, r8, lsl r4
   15e54:	add	r2, r2, #1
   15e58:	cmp	r2, r0
   15e5c:	bcc	15db4 <__assert_fail@plt+0x46d0>
   15e60:	ldr	r6, [sp, #64]	; 0x40
   15e64:	add	r6, r0, r6
   15e68:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15e6c:	bl	11450 <iswprint@plt>
   15e70:	cmp	r0, #0
   15e74:	sub	sl, fp, #40	; 0x28
   15e78:	movwne	r0, #1
   15e7c:	and	r4, r4, r0
   15e80:	mov	r0, sl
   15e84:	bl	113e4 <mbsinit@plt>
   15e88:	ldr	ip, [fp, #-84]	; 0xffffffac
   15e8c:	ldr	lr, [sp, #84]	; 0x54
   15e90:	cmp	r0, #0
   15e94:	beq	15d64 <__assert_fail@plt+0x4680>
   15e98:	b	16104 <__assert_fail@plt+0x4a20>
   15e9c:	ldr	r0, [sp, #24]
   15ea0:	cmp	r0, #0
   15ea4:	beq	15f4c <__assert_fail@plt+0x4868>
   15ea8:	add	r0, r7, #2
   15eac:	cmp	r0, lr
   15eb0:	bcs	15f4c <__assert_fail@plt+0x4868>
   15eb4:	add	r1, ip, r7
   15eb8:	ldrb	r1, [r1, #1]
   15ebc:	cmp	r1, #63	; 0x3f
   15ec0:	bne	15f4c <__assert_fail@plt+0x4868>
   15ec4:	ldrb	r5, [ip, r0]
   15ec8:	sub	r1, r5, #33	; 0x21
   15ecc:	cmp	r1, #29
   15ed0:	bhi	15f4c <__assert_fail@plt+0x4868>
   15ed4:	movw	r3, #20929	; 0x51c1
   15ed8:	mov	r2, #1
   15edc:	movt	r3, #14336	; 0x3800
   15ee0:	tst	r3, r2, lsl r1
   15ee4:	beq	15f4c <__assert_fail@plt+0x4868>
   15ee8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15eec:	tst	r1, #1
   15ef0:	bne	1653c <__assert_fail@plt+0x4e58>
   15ef4:	cmp	r9, sl
   15ef8:	mov	r7, r0
   15efc:	mov	r4, #0
   15f00:	movcc	r1, #63	; 0x3f
   15f04:	strbcc	r1, [r6, r9]
   15f08:	add	r1, r9, #1
   15f0c:	cmp	r1, sl
   15f10:	movcc	r2, #34	; 0x22
   15f14:	strbcc	r2, [r6, r1]
   15f18:	add	r1, r9, #2
   15f1c:	cmp	r1, sl
   15f20:	movcc	r2, #34	; 0x22
   15f24:	strbcc	r2, [r6, r1]
   15f28:	add	r1, r9, #3
   15f2c:	add	r9, r9, #4
   15f30:	cmp	r1, sl
   15f34:	movcc	r2, #63	; 0x3f
   15f38:	strbcc	r2, [r6, r1]
   15f3c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15f40:	cmp	r0, #0
   15f44:	bne	1593c <__assert_fail@plt+0x4258>
   15f48:	b	15c14 <__assert_fail@plt+0x4530>
   15f4c:	mov	r5, #63	; 0x3f
   15f50:	mov	r4, #0
   15f54:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15f58:	cmp	r0, #0
   15f5c:	bne	1593c <__assert_fail@plt+0x4258>
   15f60:	b	15c14 <__assert_fail@plt+0x4530>
   15f64:	mov	r4, #1
   15f68:	mov	r6, #0
   15f6c:	sub	sl, fp, #40	; 0x28
   15f70:	str	r6, [sp, #64]	; 0x40
   15f74:	add	r6, r6, r7
   15f78:	sub	r0, fp, #44	; 0x2c
   15f7c:	mov	r3, sl
   15f80:	add	r1, ip, r6
   15f84:	sub	r2, lr, r6
   15f88:	bl	19a98 <__assert_fail@plt+0x83b4>
   15f8c:	cmn	r0, #2
   15f90:	beq	160c0 <__assert_fail@plt+0x49dc>
   15f94:	cmn	r0, #1
   15f98:	beq	160b4 <__assert_fail@plt+0x49d0>
   15f9c:	ldr	r6, [sp, #64]	; 0x40
   15fa0:	cmp	r0, #0
   15fa4:	beq	16100 <__assert_fail@plt+0x4a1c>
   15fa8:	add	r6, r0, r6
   15fac:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15fb0:	bl	11450 <iswprint@plt>
   15fb4:	cmp	r0, #0
   15fb8:	sub	sl, fp, #40	; 0x28
   15fbc:	movwne	r0, #1
   15fc0:	and	r4, r4, r0
   15fc4:	mov	r0, sl
   15fc8:	bl	113e4 <mbsinit@plt>
   15fcc:	ldr	ip, [fp, #-84]	; 0xffffffac
   15fd0:	ldr	lr, [sp, #84]	; 0x54
   15fd4:	cmp	r0, #0
   15fd8:	beq	15f70 <__assert_fail@plt+0x488c>
   15fdc:	b	16104 <__assert_fail@plt+0x4a20>
   15fe0:	cmp	r9, sl
   15fe4:	mov	r2, #1
   15fe8:	movcc	r0, #39	; 0x27
   15fec:	strbcc	r0, [r6, r9]
   15ff0:	add	r0, r9, #1
   15ff4:	cmp	r0, sl
   15ff8:	movcc	r1, #36	; 0x24
   15ffc:	strbcc	r1, [r6, r0]
   16000:	add	r0, r9, #2
   16004:	cmp	r0, sl
   16008:	movcc	r1, #39	; 0x27
   1600c:	strbcc	r1, [r6, r0]
   16010:	add	r0, r9, #3
   16014:	cmp	r0, sl
   16018:	add	r9, r0, #1
   1601c:	str	r2, [fp, #-48]	; 0xffffffd0
   16020:	movcc	r1, #92	; 0x5c
   16024:	strbcc	r1, [r6, r0]
   16028:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1602c:	cmp	r1, #2
   16030:	beq	16090 <__assert_fail@plt+0x49ac>
   16034:	add	r1, r7, #1
   16038:	mov	r4, #0
   1603c:	mov	r8, #1
   16040:	mov	r5, #48	; 0x30
   16044:	cmp	r1, lr
   16048:	bcs	15930 <__assert_fail@plt+0x424c>
   1604c:	ldrb	r1, [ip, r1]
   16050:	sub	r1, r1, #48	; 0x30
   16054:	uxtb	r1, r1
   16058:	cmp	r1, #9
   1605c:	bhi	15930 <__assert_fail@plt+0x424c>
   16060:	cmp	r9, sl
   16064:	movcc	r1, #48	; 0x30
   16068:	strbcc	r1, [r6, r9]
   1606c:	add	r1, r0, #2
   16070:	add	r9, r0, #3
   16074:	cmp	r1, sl
   16078:	movcc	r2, #48	; 0x30
   1607c:	strbcc	r2, [r6, r1]
   16080:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16084:	cmp	r0, #0
   16088:	bne	1593c <__assert_fail@plt+0x4258>
   1608c:	b	15c14 <__assert_fail@plt+0x4530>
   16090:	mov	r0, #48	; 0x30
   16094:	mov	r8, #1
   16098:	mov	r4, #0
   1609c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   160a0:	cmp	r1, #0
   160a4:	bne	15c50 <__assert_fail@plt+0x456c>
   160a8:	cmp	r8, #0
   160ac:	beq	15bcc <__assert_fail@plt+0x44e8>
   160b0:	b	159bc <__assert_fail@plt+0x42d8>
   160b4:	mov	r4, #0
   160b8:	ldr	ip, [fp, #-84]	; 0xffffffac
   160bc:	b	160f8 <__assert_fail@plt+0x4a14>
   160c0:	ldr	r1, [sp, #84]	; 0x54
   160c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   160c8:	mov	r4, #0
   160cc:	cmp	r6, r1
   160d0:	bcs	160f8 <__assert_fail@plt+0x4a14>
   160d4:	ldrb	r0, [ip, r6]
   160d8:	cmp	r0, #0
   160dc:	beq	160f8 <__assert_fail@plt+0x4a14>
   160e0:	ldr	r0, [sp, #64]	; 0x40
   160e4:	add	r0, r0, #1
   160e8:	add	r6, r0, r7
   160ec:	str	r0, [sp, #64]	; 0x40
   160f0:	cmp	r6, r1
   160f4:	bcc	160d4 <__assert_fail@plt+0x49f0>
   160f8:	ldr	r6, [sp, #64]	; 0x40
   160fc:	b	16104 <__assert_fail@plt+0x4a20>
   16100:	ldr	ip, [fp, #-84]	; 0xffffffac
   16104:	mov	r1, r6
   16108:	ldr	r6, [sp, #76]	; 0x4c
   1610c:	ldr	sl, [sp, #56]	; 0x38
   16110:	ldr	r0, [sp, #44]	; 0x2c
   16114:	cmp	r1, #1
   16118:	orr	r2, r4, r0
   1611c:	mov	r0, r1
   16120:	bhi	16140 <__assert_fail@plt+0x4a5c>
   16124:	tst	r2, #1
   16128:	beq	16140 <__assert_fail@plt+0x4a5c>
   1612c:	ldr	lr, [sp, #84]	; 0x54
   16130:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16134:	cmp	r0, #0
   16138:	bne	1593c <__assert_fail@plt+0x4258>
   1613c:	b	15c14 <__assert_fail@plt+0x4530>
   16140:	str	r2, [sp, #64]	; 0x40
   16144:	add	r0, r0, r7
   16148:	add	r1, r7, #1
   1614c:	ldr	lr, [sp, #84]	; 0x54
   16150:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16154:	ldr	r2, [fp, #-48]	; 0xffffffd0
   16158:	mov	r3, #0
   1615c:	str	r0, [sp, #56]	; 0x38
   16160:	ldr	r0, [sp, #64]	; 0x40
   16164:	tst	r0, #1
   16168:	bne	16250 <__assert_fail@plt+0x4b6c>
   1616c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16170:	tst	r0, #1
   16174:	bne	163f0 <__assert_fail@plt+0x4d0c>
   16178:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1617c:	cmp	r7, #2
   16180:	movwne	r3, #1
   16184:	orr	r3, r3, r2
   16188:	tst	r3, #1
   1618c:	bne	161c4 <__assert_fail@plt+0x4ae0>
   16190:	cmp	r9, sl
   16194:	add	r3, r9, #1
   16198:	movcc	r2, #39	; 0x27
   1619c:	strbcc	r2, [r6, r9]
   161a0:	cmp	r3, sl
   161a4:	movcc	r2, #36	; 0x24
   161a8:	strbcc	r2, [r6, r3]
   161ac:	add	r3, r9, #2
   161b0:	add	r9, r9, #3
   161b4:	cmp	r3, sl
   161b8:	movcc	r2, #39	; 0x27
   161bc:	strbcc	r2, [r6, r3]
   161c0:	mov	r2, #1
   161c4:	cmp	r9, sl
   161c8:	mov	r0, r2
   161cc:	movcc	r3, #92	; 0x5c
   161d0:	strbcc	r3, [r6, r9]
   161d4:	add	r3, r9, #1
   161d8:	cmp	r3, sl
   161dc:	andcc	r7, r5, #192	; 0xc0
   161e0:	movcc	r2, #48	; 0x30
   161e4:	orrcc	r7, r2, r7, lsr #6
   161e8:	strbcc	r7, [r6, r3]
   161ec:	add	r3, r9, #2
   161f0:	add	r9, r9, #3
   161f4:	cmp	r3, sl
   161f8:	lsrcc	r7, r5, #3
   161fc:	movcc	r2, #6
   16200:	bficc	r7, r2, #3, #29
   16204:	mov	r2, #6
   16208:	strbcc	r7, [r6, r3]
   1620c:	bfi	r5, r2, #3, #29
   16210:	mov	r3, #1
   16214:	mov	r2, r0
   16218:	ldr	r0, [sp, #56]	; 0x38
   1621c:	and	r8, r3, #1
   16220:	cmp	r0, r1
   16224:	bhi	16284 <__assert_fail@plt+0x4ba0>
   16228:	b	162c4 <__assert_fail@plt+0x4be0>
   1622c:	cmp	r9, sl
   16230:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16234:	strbcc	r5, [r6, r9]
   16238:	add	r9, r9, #1
   1623c:	ldrb	r5, [ip, r1]
   16240:	add	r1, r1, #1
   16244:	ldr	r0, [sp, #64]	; 0x40
   16248:	tst	r0, #1
   1624c:	beq	1616c <__assert_fail@plt+0x4a88>
   16250:	ldr	r7, [fp, #-56]	; 0xffffffc8
   16254:	tst	r7, #1
   16258:	beq	1626c <__assert_fail@plt+0x4b88>
   1625c:	cmp	r9, sl
   16260:	movcc	r7, #92	; 0x5c
   16264:	strbcc	r7, [r6, r9]
   16268:	add	r9, r9, #1
   1626c:	mov	r7, #0
   16270:	str	r7, [fp, #-56]	; 0xffffffc8
   16274:	ldr	r0, [sp, #56]	; 0x38
   16278:	and	r8, r3, #1
   1627c:	cmp	r0, r1
   16280:	bls	162c4 <__assert_fail@plt+0x4be0>
   16284:	cmp	r8, #0
   16288:	mvn	r7, r2
   1628c:	movwne	r8, #1
   16290:	orr	r7, r7, r8
   16294:	tst	r7, #1
   16298:	bne	1622c <__assert_fail@plt+0x4b48>
   1629c:	cmp	r9, sl
   162a0:	movcc	r7, #39	; 0x27
   162a4:	strbcc	r7, [r6, r9]
   162a8:	add	r7, r9, #1
   162ac:	add	r9, r9, #2
   162b0:	cmp	r7, sl
   162b4:	movcc	r2, #39	; 0x27
   162b8:	strbcc	r2, [r6, r7]
   162bc:	mov	r2, #0
   162c0:	b	1622c <__assert_fail@plt+0x4b48>
   162c4:	cmp	r8, #0
   162c8:	sub	r7, r1, #1
   162cc:	mov	r0, r5
   162d0:	str	r2, [fp, #-48]	; 0xffffffd0
   162d4:	movwne	r8, #1
   162d8:	cmp	r8, #0
   162dc:	beq	15bcc <__assert_fail@plt+0x44e8>
   162e0:	b	159bc <__assert_fail@plt+0x42d8>
   162e4:	mov	lr, r7
   162e8:	b	162f0 <__assert_fail@plt+0x4c0c>
   162ec:	mvn	lr, #0
   162f0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   162f4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   162f8:	eor	r0, r7, #2
   162fc:	orr	r0, r0, r9
   16300:	clz	r0, r0
   16304:	lsr	r0, r0, #5
   16308:	tst	r1, r0
   1630c:	bne	1640c <__assert_fail@plt+0x4d28>
   16310:	mov	r0, r1
   16314:	ldr	r1, [fp, #-80]	; 0xffffffb0
   16318:	cmp	r7, #2
   1631c:	movwne	r1, #1
   16320:	orr	r0, r0, r1
   16324:	tst	r0, #1
   16328:	ldreq	r0, [sp, #52]	; 0x34
   1632c:	streq	lr, [sp, #84]	; 0x54
   16330:	eoreq	r0, r0, #1
   16334:	tsteq	r0, #1
   16338:	bne	164d0 <__assert_fail@plt+0x4dec>
   1633c:	tst	r4, #1
   16340:	bne	1648c <__assert_fail@plt+0x4da8>
   16344:	ldr	r6, [sp, #48]	; 0x30
   16348:	mov	r8, #0
   1634c:	cmp	r6, #0
   16350:	beq	164c8 <__assert_fail@plt+0x4de4>
   16354:	ldr	r0, [sp, #80]	; 0x50
   16358:	mov	r1, #0
   1635c:	cmp	sl, #0
   16360:	mov	r4, #0
   16364:	str	r1, [fp, #-72]	; 0xffffffb8
   16368:	beq	1525c <__assert_fail@plt+0x3b78>
   1636c:	b	164d0 <__assert_fail@plt+0x4dec>
   16370:	ldrb	r1, [r0, #3]
   16374:	cmp	r1, #56	; 0x38
   16378:	ldrbeq	r1, [r0, #4]
   1637c:	cmpeq	r1, #48	; 0x30
   16380:	bne	15454 <__assert_fail@plt+0x3d70>
   16384:	ldrb	r1, [r0, #5]
   16388:	cmp	r1, #51	; 0x33
   1638c:	ldrbeq	r1, [r0, #6]
   16390:	cmpeq	r1, #48	; 0x30
   16394:	bne	15454 <__assert_fail@plt+0x3d70>
   16398:	ldrb	r0, [r0, #7]
   1639c:	cmp	r0, #0
   163a0:	movw	r0, #45646	; 0xb24e
   163a4:	movt	r0, #1
   163a8:	str	r0, [sp, #68]	; 0x44
   163ac:	bne	15454 <__assert_fail@plt+0x3d70>
   163b0:	b	15470 <__assert_fail@plt+0x3d8c>
   163b4:	ldrb	r1, [r0, #4]
   163b8:	cmp	r1, #48	; 0x30
   163bc:	ldrbeq	r1, [r0, #5]
   163c0:	cmpeq	r1, #51	; 0x33
   163c4:	bne	15538 <__assert_fail@plt+0x3e54>
   163c8:	ldrb	r1, [r0, #6]
   163cc:	cmp	r1, #48	; 0x30
   163d0:	ldrbeq	r0, [r0, #7]
   163d4:	cmpeq	r0, #0
   163d8:	bne	15538 <__assert_fail@plt+0x3e54>
   163dc:	movw	r0, #45650	; 0xb252
   163e0:	movt	r0, #1
   163e4:	str	r0, [sp, #72]	; 0x48
   163e8:	b	15558 <__assert_fail@plt+0x3e74>
   163ec:	ldr	r7, [fp, #-64]	; 0xffffffc0
   163f0:	ldr	r2, [sp, #80]	; 0x50
   163f4:	b	1642c <__assert_fail@plt+0x4d48>
   163f8:	ldr	ip, [fp, #-84]	; 0xffffffac
   163fc:	mov	r2, #1
   16400:	mov	lr, r4
   16404:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16408:	b	1642c <__assert_fail@plt+0x4d48>
   1640c:	ldr	r2, [sp, #80]	; 0x50
   16410:	mov	r7, #2
   16414:	b	1642c <__assert_fail@plt+0x4d48>
   16418:	ldr	r6, [sp, #76]	; 0x4c
   1641c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16420:	ldr	lr, [sp, #84]	; 0x54
   16424:	ldr	r2, [sp, #80]	; 0x50
   16428:	mov	r7, #2
   1642c:	mov	r0, #0
   16430:	ldr	r1, [fp, #12]
   16434:	tst	r2, #1
   16438:	mov	r2, r7
   1643c:	mov	r3, lr
   16440:	str	r0, [sp, #8]
   16444:	ldr	r0, [sp, #68]	; 0x44
   16448:	movwne	r2, #4
   1644c:	cmp	r7, #2
   16450:	movne	r2, r7
   16454:	str	r2, [sp]
   16458:	mov	r2, ip
   1645c:	bic	r1, r1, #2
   16460:	str	r0, [sp, #12]
   16464:	ldr	r0, [sp, #72]	; 0x48
   16468:	str	r1, [sp, #4]
   1646c:	mov	r1, sl
   16470:	str	r0, [sp, #16]
   16474:	mov	r0, r6
   16478:	bl	151e0 <__assert_fail@plt+0x3afc>
   1647c:	mov	r9, r0
   16480:	mov	r0, r9
   16484:	sub	sp, fp, #28
   16488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1648c:	mov	r0, #5
   16490:	ldr	r1, [sp, #48]	; 0x30
   16494:	ldr	r2, [fp, #-84]	; 0xffffffac
   16498:	ldr	r3, [sp, #84]	; 0x54
   1649c:	str	r0, [sp]
   164a0:	ldr	r0, [fp, #12]
   164a4:	str	r0, [sp, #4]
   164a8:	ldr	r0, [fp, #16]
   164ac:	str	r0, [sp, #8]
   164b0:	ldr	r0, [sp, #68]	; 0x44
   164b4:	str	r0, [sp, #12]
   164b8:	ldr	r0, [sp, #72]	; 0x48
   164bc:	str	r0, [sp, #16]
   164c0:	ldr	r0, [sp, #76]	; 0x4c
   164c4:	b	16478 <__assert_fail@plt+0x4d94>
   164c8:	mov	r0, #0
   164cc:	str	r0, [fp, #-72]	; 0xffffffb8
   164d0:	ldr	r1, [sp, #92]	; 0x5c
   164d4:	cmp	r1, #0
   164d8:	beq	16518 <__assert_fail@plt+0x4e34>
   164dc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   164e0:	ldr	r2, [sp, #76]	; 0x4c
   164e4:	tst	r0, #1
   164e8:	bne	1651c <__assert_fail@plt+0x4e38>
   164ec:	ldrb	r0, [r1]
   164f0:	cmp	r0, #0
   164f4:	beq	1651c <__assert_fail@plt+0x4e38>
   164f8:	add	r1, r1, #1
   164fc:	cmp	r9, sl
   16500:	strbcc	r0, [r2, r9]
   16504:	add	r9, r9, #1
   16508:	ldrb	r0, [r1], #1
   1650c:	cmp	r0, #0
   16510:	bne	164fc <__assert_fail@plt+0x4e18>
   16514:	b	1651c <__assert_fail@plt+0x4e38>
   16518:	ldr	r2, [sp, #76]	; 0x4c
   1651c:	cmp	r9, sl
   16520:	movcc	r0, #0
   16524:	strbcc	r0, [r2, r9]
   16528:	mov	r0, r9
   1652c:	sub	sp, fp, #28
   16530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16534:	mov	r2, #1
   16538:	b	16404 <__assert_fail@plt+0x4d20>
   1653c:	ldr	r2, [sp, #80]	; 0x50
   16540:	mov	r7, #5
   16544:	b	1642c <__assert_fail@plt+0x4d48>
   16548:	bl	116cc <abort@plt>
   1654c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16550:	add	fp, sp, #28
   16554:	sub	sp, sp, #28
   16558:	movw	r5, #49624	; 0xc1d8
   1655c:	cmp	r2, #0
   16560:	mov	r4, r1
   16564:	mov	r7, r0
   16568:	str	r0, [sp, #20]
   1656c:	movt	r5, #2
   16570:	movne	r5, r2
   16574:	bl	11558 <__errno_location@plt>
   16578:	mov	sl, r0
   1657c:	ldm	r5, {r0, r1}
   16580:	ldr	r2, [r5, #40]	; 0x28
   16584:	ldr	r3, [r5, #44]	; 0x2c
   16588:	add	r9, r5, #8
   1658c:	ldr	r6, [sl]
   16590:	orr	r8, r1, #1
   16594:	mov	r1, #0
   16598:	str	r6, [sp, #24]
   1659c:	stm	sp, {r0, r8, r9}
   165a0:	str	r2, [sp, #12]
   165a4:	str	r3, [sp, #16]
   165a8:	mov	r0, #0
   165ac:	mov	r2, r7
   165b0:	mov	r3, r4
   165b4:	mov	r6, r4
   165b8:	bl	151e0 <__assert_fail@plt+0x3afc>
   165bc:	add	r7, r0, #1
   165c0:	mov	r0, r7
   165c4:	bl	18384 <__assert_fail@plt+0x6ca0>
   165c8:	mov	r4, r0
   165cc:	ldr	r0, [r5]
   165d0:	ldr	r2, [r5, #44]	; 0x2c
   165d4:	ldr	r1, [r5, #40]	; 0x28
   165d8:	mov	r3, r6
   165dc:	stm	sp, {r0, r8, r9}
   165e0:	str	r2, [sp, #16]
   165e4:	str	r1, [sp, #12]
   165e8:	mov	r0, r4
   165ec:	mov	r1, r7
   165f0:	ldr	r2, [sp, #20]
   165f4:	bl	151e0 <__assert_fail@plt+0x3afc>
   165f8:	ldr	r0, [sp, #24]
   165fc:	str	r0, [sl]
   16600:	mov	r0, r4
   16604:	sub	sp, fp, #28
   16608:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1660c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16610:	add	fp, sp, #28
   16614:	sub	sp, sp, #36	; 0x24
   16618:	movw	r8, #49624	; 0xc1d8
   1661c:	cmp	r3, #0
   16620:	mov	r4, r2
   16624:	str	r2, [sp, #24]
   16628:	mov	r5, r1
   1662c:	mov	r6, r0
   16630:	str	r0, [sp, #20]
   16634:	movt	r8, #2
   16638:	movne	r8, r3
   1663c:	bl	11558 <__errno_location@plt>
   16640:	str	r0, [sp, #28]
   16644:	cmp	r4, #0
   16648:	add	sl, r8, #8
   1664c:	ldm	r8, {r3, r9}
   16650:	ldr	r7, [r0]
   16654:	ldr	r1, [r8, #40]	; 0x28
   16658:	ldr	r2, [r8, #44]	; 0x2c
   1665c:	mov	r0, #0
   16660:	orreq	r9, r9, #1
   16664:	str	r7, [sp, #32]
   16668:	mov	r7, r5
   1666c:	stm	sp, {r3, r9, sl}
   16670:	str	r1, [sp, #12]
   16674:	str	r2, [sp, #16]
   16678:	mov	r1, #0
   1667c:	mov	r2, r6
   16680:	mov	r3, r5
   16684:	bl	151e0 <__assert_fail@plt+0x3afc>
   16688:	add	r4, r0, #1
   1668c:	mov	r5, r0
   16690:	mov	r0, r4
   16694:	bl	18384 <__assert_fail@plt+0x6ca0>
   16698:	mov	r6, r0
   1669c:	ldr	r0, [r8]
   166a0:	ldr	r2, [r8, #44]	; 0x2c
   166a4:	ldr	r1, [r8, #40]	; 0x28
   166a8:	mov	r3, r7
   166ac:	stm	sp, {r0, r9, sl}
   166b0:	str	r2, [sp, #16]
   166b4:	str	r1, [sp, #12]
   166b8:	mov	r0, r6
   166bc:	mov	r1, r4
   166c0:	ldr	r2, [sp, #20]
   166c4:	bl	151e0 <__assert_fail@plt+0x3afc>
   166c8:	ldr	r0, [sp, #24]
   166cc:	ldr	r1, [sp, #32]
   166d0:	ldr	r2, [sp, #28]
   166d4:	cmp	r0, #0
   166d8:	str	r1, [r2]
   166dc:	strne	r5, [r0]
   166e0:	mov	r0, r6
   166e4:	sub	sp, fp, #28
   166e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166ec:	push	{r4, r5, r6, r7, fp, lr}
   166f0:	add	fp, sp, #16
   166f4:	movw	r4, #49552	; 0xc190
   166f8:	movt	r4, #2
   166fc:	ldrd	r6, [r4]
   16700:	cmp	r7, #2
   16704:	blt	16730 <__assert_fail@plt+0x504c>
   16708:	add	r5, r6, #12
   1670c:	mov	r7, #0
   16710:	ldr	r0, [r5, r7, lsl #3]
   16714:	bl	143a4 <__assert_fail@plt+0x2cc0>
   16718:	ldr	r1, [r4, #4]
   1671c:	add	r2, r7, #2
   16720:	add	r0, r7, #1
   16724:	mov	r7, r0
   16728:	cmp	r2, r1
   1672c:	blt	16710 <__assert_fail@plt+0x502c>
   16730:	ldr	r0, [r6, #4]
   16734:	movw	r5, #49672	; 0xc208
   16738:	movt	r5, #2
   1673c:	cmp	r0, r5
   16740:	beq	16754 <__assert_fail@plt+0x5070>
   16744:	bl	143a4 <__assert_fail@plt+0x2cc0>
   16748:	mov	r0, #256	; 0x100
   1674c:	str	r0, [r4, #8]
   16750:	str	r5, [r4, #12]
   16754:	add	r5, r4, #8
   16758:	cmp	r6, r5
   1675c:	beq	1676c <__assert_fail@plt+0x5088>
   16760:	mov	r0, r6
   16764:	bl	143a4 <__assert_fail@plt+0x2cc0>
   16768:	str	r5, [r4]
   1676c:	mov	r0, #1
   16770:	str	r0, [r4, #4]
   16774:	pop	{r4, r5, r6, r7, fp, pc}
   16778:	movw	r3, #49624	; 0xc1d8
   1677c:	mvn	r2, #0
   16780:	movt	r3, #2
   16784:	b	16788 <__assert_fail@plt+0x50a4>
   16788:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1678c:	add	fp, sp, #28
   16790:	sub	sp, sp, #44	; 0x2c
   16794:	mov	r7, r3
   16798:	str	r2, [sp, #36]	; 0x24
   1679c:	str	r1, [sp, #32]
   167a0:	mov	r5, r0
   167a4:	bl	11558 <__errno_location@plt>
   167a8:	cmp	r5, #0
   167ac:	blt	16910 <__assert_fail@plt+0x522c>
   167b0:	cmn	r5, #-2147483647	; 0x80000001
   167b4:	beq	16910 <__assert_fail@plt+0x522c>
   167b8:	movw	r8, #49552	; 0xc190
   167bc:	mov	r4, r0
   167c0:	movt	r8, #2
   167c4:	ldr	r6, [r8]
   167c8:	ldr	r1, [r8, #4]
   167cc:	ldr	r0, [r0]
   167d0:	str	r4, [sp, #28]
   167d4:	cmp	r1, r5
   167d8:	str	r0, [sp, #24]
   167dc:	ble	167e8 <__assert_fail@plt+0x5104>
   167e0:	mov	sl, r6
   167e4:	b	1684c <__assert_fail@plt+0x5168>
   167e8:	mov	r0, #8
   167ec:	add	r9, r8, #8
   167f0:	add	r2, r5, #1
   167f4:	str	r1, [fp, #-32]	; 0xffffffe0
   167f8:	mvn	r3, #-2147483648	; 0x80000000
   167fc:	str	r0, [sp]
   16800:	subs	r0, r6, r9
   16804:	sub	r2, r2, r1
   16808:	sub	r1, fp, #32
   1680c:	movne	r0, r6
   16810:	bl	18584 <__assert_fail@plt+0x6ea0>
   16814:	str	r0, [r8]
   16818:	cmp	r6, r9
   1681c:	mov	sl, r0
   16820:	ldrdeq	r0, [r8, #8]
   16824:	stmeq	sl, {r0, r1}
   16828:	ldr	r1, [r8, #4]
   1682c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16830:	add	r0, sl, r1, lsl #3
   16834:	sub	r1, r2, r1
   16838:	lsl	r2, r1, #3
   1683c:	mov	r1, #0
   16840:	bl	11588 <memset@plt>
   16844:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16848:	str	r0, [r8, #4]
   1684c:	mov	r9, sl
   16850:	ldr	r6, [r9, r5, lsl #3]!
   16854:	ldr	r4, [r9, #4]!
   16858:	ldm	r7, {r0, r1}
   1685c:	ldr	r2, [r7, #40]	; 0x28
   16860:	ldr	r3, [r7, #44]	; 0x2c
   16864:	orr	r8, r1, #1
   16868:	add	r1, r7, #8
   1686c:	stm	sp, {r0, r8}
   16870:	add	r0, sp, #8
   16874:	str	r1, [sp, #20]
   16878:	stm	r0, {r1, r2, r3}
   1687c:	mov	r0, r4
   16880:	mov	r1, r6
   16884:	ldr	r2, [sp, #32]
   16888:	ldr	r3, [sp, #36]	; 0x24
   1688c:	bl	151e0 <__assert_fail@plt+0x3afc>
   16890:	cmp	r6, r0
   16894:	bhi	168f8 <__assert_fail@plt+0x5214>
   16898:	add	r6, r0, #1
   1689c:	movw	r0, #49672	; 0xc208
   168a0:	movt	r0, #2
   168a4:	str	r6, [sl, r5, lsl #3]
   168a8:	cmp	r4, r0
   168ac:	beq	168b8 <__assert_fail@plt+0x51d4>
   168b0:	mov	r0, r4
   168b4:	bl	143a4 <__assert_fail@plt+0x2cc0>
   168b8:	mov	r0, r6
   168bc:	bl	18384 <__assert_fail@plt+0x6ca0>
   168c0:	str	r0, [r9]
   168c4:	mov	r4, r0
   168c8:	add	r3, sp, #8
   168cc:	ldr	r0, [r7]
   168d0:	ldr	r1, [r7, #40]	; 0x28
   168d4:	ldr	r2, [r7, #44]	; 0x2c
   168d8:	stm	sp, {r0, r8}
   168dc:	ldr	r0, [sp, #20]
   168e0:	stm	r3, {r0, r1, r2}
   168e4:	mov	r0, r4
   168e8:	mov	r1, r6
   168ec:	ldr	r2, [sp, #32]
   168f0:	ldr	r3, [sp, #36]	; 0x24
   168f4:	bl	151e0 <__assert_fail@plt+0x3afc>
   168f8:	ldr	r1, [sp, #24]
   168fc:	ldr	r0, [sp, #28]
   16900:	str	r1, [r0]
   16904:	mov	r0, r4
   16908:	sub	sp, fp, #28
   1690c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16910:	bl	116cc <abort@plt>
   16914:	movw	r3, #49624	; 0xc1d8
   16918:	movt	r3, #2
   1691c:	b	16788 <__assert_fail@plt+0x50a4>
   16920:	movw	r3, #49624	; 0xc1d8
   16924:	mov	r1, r0
   16928:	mov	r0, #0
   1692c:	mvn	r2, #0
   16930:	movt	r3, #2
   16934:	b	16788 <__assert_fail@plt+0x50a4>
   16938:	movw	r3, #49624	; 0xc1d8
   1693c:	mov	r2, r1
   16940:	mov	r1, r0
   16944:	mov	r0, #0
   16948:	movt	r3, #2
   1694c:	b	16788 <__assert_fail@plt+0x50a4>
   16950:	push	{fp, lr}
   16954:	mov	fp, sp
   16958:	sub	sp, sp, #48	; 0x30
   1695c:	vmov.i32	q8, #0	; 0x00000000
   16960:	mov	ip, #32
   16964:	mov	r3, sp
   16968:	mov	lr, r2
   1696c:	cmp	r1, #10
   16970:	add	r2, r3, #16
   16974:	vst1.64	{d16-d17}, [r3], ip
   16978:	vst1.64	{d16-d17}, [r3]
   1697c:	vst1.64	{d16-d17}, [r2]
   16980:	beq	169a0 <__assert_fail@plt+0x52bc>
   16984:	str	r1, [sp]
   16988:	mov	r3, sp
   1698c:	mov	r1, lr
   16990:	mvn	r2, #0
   16994:	bl	16788 <__assert_fail@plt+0x50a4>
   16998:	mov	sp, fp
   1699c:	pop	{fp, pc}
   169a0:	bl	116cc <abort@plt>
   169a4:	push	{r4, sl, fp, lr}
   169a8:	add	fp, sp, #8
   169ac:	sub	sp, sp, #48	; 0x30
   169b0:	mov	ip, r3
   169b4:	mov	r3, sp
   169b8:	vmov.i32	q8, #0	; 0x00000000
   169bc:	mov	lr, #32
   169c0:	cmp	r1, #10
   169c4:	add	r4, r3, #16
   169c8:	vst1.64	{d16-d17}, [r3], lr
   169cc:	vst1.64	{d16-d17}, [r3]
   169d0:	vst1.64	{d16-d17}, [r4]
   169d4:	beq	169f4 <__assert_fail@plt+0x5310>
   169d8:	str	r1, [sp]
   169dc:	mov	r1, r2
   169e0:	mov	r3, sp
   169e4:	mov	r2, ip
   169e8:	bl	16788 <__assert_fail@plt+0x50a4>
   169ec:	sub	sp, fp, #8
   169f0:	pop	{r4, sl, fp, pc}
   169f4:	bl	116cc <abort@plt>
   169f8:	push	{fp, lr}
   169fc:	mov	fp, sp
   16a00:	sub	sp, sp, #48	; 0x30
   16a04:	mov	r3, sp
   16a08:	vmov.i32	q8, #0	; 0x00000000
   16a0c:	mov	ip, #32
   16a10:	cmp	r0, #10
   16a14:	add	r2, r3, #16
   16a18:	vst1.64	{d16-d17}, [r3], ip
   16a1c:	vst1.64	{d16-d17}, [r3]
   16a20:	vst1.64	{d16-d17}, [r2]
   16a24:	beq	16a44 <__assert_fail@plt+0x5360>
   16a28:	str	r0, [sp]
   16a2c:	mov	r3, sp
   16a30:	mov	r0, #0
   16a34:	mvn	r2, #0
   16a38:	bl	16788 <__assert_fail@plt+0x50a4>
   16a3c:	mov	sp, fp
   16a40:	pop	{fp, pc}
   16a44:	bl	116cc <abort@plt>
   16a48:	push	{fp, lr}
   16a4c:	mov	fp, sp
   16a50:	sub	sp, sp, #48	; 0x30
   16a54:	mov	r3, sp
   16a58:	vmov.i32	q8, #0	; 0x00000000
   16a5c:	mov	ip, #32
   16a60:	cmp	r0, #10
   16a64:	add	lr, r3, #16
   16a68:	vst1.64	{d16-d17}, [r3], ip
   16a6c:	vst1.64	{d16-d17}, [r3]
   16a70:	vst1.64	{d16-d17}, [lr]
   16a74:	beq	16a90 <__assert_fail@plt+0x53ac>
   16a78:	str	r0, [sp]
   16a7c:	mov	r3, sp
   16a80:	mov	r0, #0
   16a84:	bl	16788 <__assert_fail@plt+0x50a4>
   16a88:	mov	sp, fp
   16a8c:	pop	{fp, pc}
   16a90:	bl	116cc <abort@plt>
   16a94:	push	{r4, sl, fp, lr}
   16a98:	add	fp, sp, #8
   16a9c:	sub	sp, sp, #48	; 0x30
   16aa0:	mov	lr, r0
   16aa4:	movw	r0, #49624	; 0xc1d8
   16aa8:	mov	r3, #32
   16aac:	mov	ip, r1
   16ab0:	mov	r4, #1
   16ab4:	movt	r0, #2
   16ab8:	add	r1, r0, #16
   16abc:	vld1.64	{d16-d17}, [r0], r3
   16ac0:	mov	r3, sp
   16ac4:	vld1.64	{d18-d19}, [r1]
   16ac8:	add	r1, r3, #16
   16acc:	vld1.64	{d20-d21}, [r0]
   16ad0:	add	r0, r3, #32
   16ad4:	vst1.64	{d18-d19}, [r1]
   16ad8:	mov	r1, r3
   16adc:	vst1.64	{d20-d21}, [r0]
   16ae0:	mov	r0, #28
   16ae4:	and	r0, r0, r2, lsr #3
   16ae8:	and	r2, r2, #31
   16aec:	vst1.64	{d16-d17}, [r1], r0
   16af0:	ldr	r0, [r1, #8]
   16af4:	bic	r4, r4, r0, lsr r2
   16af8:	eor	r0, r0, r4, lsl r2
   16afc:	mov	r2, ip
   16b00:	str	r0, [r1, #8]
   16b04:	mov	r0, #0
   16b08:	mov	r1, lr
   16b0c:	bl	16788 <__assert_fail@plt+0x50a4>
   16b10:	sub	sp, fp, #8
   16b14:	pop	{r4, sl, fp, pc}
   16b18:	push	{fp, lr}
   16b1c:	mov	fp, sp
   16b20:	sub	sp, sp, #48	; 0x30
   16b24:	mov	ip, r0
   16b28:	movw	r0, #49624	; 0xc1d8
   16b2c:	mov	r3, #32
   16b30:	movt	r0, #2
   16b34:	add	r2, r0, #16
   16b38:	vld1.64	{d16-d17}, [r0], r3
   16b3c:	mov	r3, sp
   16b40:	vld1.64	{d18-d19}, [r2]
   16b44:	add	r2, r3, #16
   16b48:	vld1.64	{d20-d21}, [r0]
   16b4c:	add	r0, r3, #32
   16b50:	vst1.64	{d18-d19}, [r2]
   16b54:	mov	r2, r3
   16b58:	vst1.64	{d20-d21}, [r0]
   16b5c:	mov	r0, #28
   16b60:	and	r0, r0, r1, lsr #3
   16b64:	and	r1, r1, #31
   16b68:	vst1.64	{d16-d17}, [r2], r0
   16b6c:	mov	r0, #1
   16b70:	ldr	lr, [r2, #8]
   16b74:	bic	r0, r0, lr, lsr r1
   16b78:	eor	r0, lr, r0, lsl r1
   16b7c:	mov	r1, ip
   16b80:	str	r0, [r2, #8]
   16b84:	mov	r0, #0
   16b88:	mvn	r2, #0
   16b8c:	bl	16788 <__assert_fail@plt+0x50a4>
   16b90:	mov	sp, fp
   16b94:	pop	{fp, pc}
   16b98:	push	{fp, lr}
   16b9c:	mov	fp, sp
   16ba0:	sub	sp, sp, #48	; 0x30
   16ba4:	movw	r2, #49624	; 0xc1d8
   16ba8:	mov	r3, #32
   16bac:	mov	r1, r0
   16bb0:	movt	r2, #2
   16bb4:	add	r0, r2, #16
   16bb8:	vld1.64	{d16-d17}, [r2], r3
   16bbc:	mov	r3, sp
   16bc0:	vld1.64	{d18-d19}, [r0]
   16bc4:	add	r0, r3, #16
   16bc8:	vld1.64	{d20-d21}, [r2]
   16bcc:	mov	r2, r3
   16bd0:	vst1.64	{d18-d19}, [r0]
   16bd4:	add	r0, r3, #32
   16bd8:	vst1.64	{d20-d21}, [r0]
   16bdc:	mov	r0, #12
   16be0:	vst1.64	{d16-d17}, [r2], r0
   16be4:	ldr	r0, [r2]
   16be8:	orr	r0, r0, #67108864	; 0x4000000
   16bec:	str	r0, [r2]
   16bf0:	mov	r0, #0
   16bf4:	mvn	r2, #0
   16bf8:	bl	16788 <__assert_fail@plt+0x50a4>
   16bfc:	mov	sp, fp
   16c00:	pop	{fp, pc}
   16c04:	push	{fp, lr}
   16c08:	mov	fp, sp
   16c0c:	sub	sp, sp, #48	; 0x30
   16c10:	mov	ip, r1
   16c14:	mov	r1, r0
   16c18:	movw	r0, #49624	; 0xc1d8
   16c1c:	mov	r3, #32
   16c20:	movt	r0, #2
   16c24:	add	r2, r0, #16
   16c28:	vld1.64	{d16-d17}, [r0], r3
   16c2c:	mov	r3, sp
   16c30:	vld1.64	{d18-d19}, [r2]
   16c34:	add	r2, r3, #16
   16c38:	vld1.64	{d20-d21}, [r0]
   16c3c:	add	r0, r3, #32
   16c40:	vst1.64	{d18-d19}, [r2]
   16c44:	mov	r2, r3
   16c48:	vst1.64	{d20-d21}, [r0]
   16c4c:	mov	r0, #12
   16c50:	vst1.64	{d16-d17}, [r2], r0
   16c54:	ldr	r0, [r2]
   16c58:	orr	r0, r0, #67108864	; 0x4000000
   16c5c:	str	r0, [r2]
   16c60:	mov	r0, #0
   16c64:	mov	r2, ip
   16c68:	bl	16788 <__assert_fail@plt+0x50a4>
   16c6c:	mov	sp, fp
   16c70:	pop	{fp, pc}
   16c74:	push	{r4, sl, fp, lr}
   16c78:	add	fp, sp, #8
   16c7c:	sub	sp, sp, #96	; 0x60
   16c80:	mov	ip, r2
   16c84:	mov	r2, sp
   16c88:	vmov.i32	q8, #0	; 0x00000000
   16c8c:	mov	r4, #28
   16c90:	cmp	r1, #10
   16c94:	mov	r3, r2
   16c98:	add	lr, r2, #16
   16c9c:	vst1.64	{d16-d17}, [r3], r4
   16ca0:	vst1.64	{d16-d17}, [lr]
   16ca4:	vst1.32	{d16-d17}, [r3]
   16ca8:	beq	16cf8 <__assert_fail@plt+0x5614>
   16cac:	vld1.64	{d16-d17}, [r2], r4
   16cb0:	vld1.64	{d18-d19}, [lr]
   16cb4:	add	r3, sp, #48	; 0x30
   16cb8:	add	r4, r3, #4
   16cbc:	vld1.32	{d20-d21}, [r2]
   16cc0:	add	r2, r3, #20
   16cc4:	vst1.32	{d16-d17}, [r4]
   16cc8:	vst1.32	{d18-d19}, [r2]
   16ccc:	add	r2, r3, #32
   16cd0:	vst1.32	{d20-d21}, [r2]
   16cd4:	str	r1, [sp, #48]	; 0x30
   16cd8:	mvn	r2, #0
   16cdc:	ldr	r1, [sp, #60]	; 0x3c
   16ce0:	orr	r1, r1, #67108864	; 0x4000000
   16ce4:	str	r1, [sp, #60]	; 0x3c
   16ce8:	mov	r1, ip
   16cec:	bl	16788 <__assert_fail@plt+0x50a4>
   16cf0:	sub	sp, fp, #8
   16cf4:	pop	{r4, sl, fp, pc}
   16cf8:	bl	116cc <abort@plt>
   16cfc:	push	{r4, r5, fp, lr}
   16d00:	add	fp, sp, #8
   16d04:	sub	sp, sp, #48	; 0x30
   16d08:	mov	ip, r3
   16d0c:	movw	r3, #49624	; 0xc1d8
   16d10:	mov	lr, #32
   16d14:	cmp	r1, #0
   16d18:	mov	r5, sp
   16d1c:	movt	r3, #2
   16d20:	cmpne	r2, #0
   16d24:	add	r4, r3, #16
   16d28:	vld1.64	{d16-d17}, [r3], lr
   16d2c:	vld1.64	{d18-d19}, [r4]
   16d30:	add	r4, r5, #16
   16d34:	vld1.64	{d20-d21}, [r3]
   16d38:	vst1.64	{d16-d17}, [r5], lr
   16d3c:	mov	r3, #10
   16d40:	vst1.64	{d18-d19}, [r4]
   16d44:	vst1.64	{d20-d21}, [r5]
   16d48:	str	r3, [sp]
   16d4c:	bne	16d54 <__assert_fail@plt+0x5670>
   16d50:	bl	116cc <abort@plt>
   16d54:	str	r2, [sp, #44]	; 0x2c
   16d58:	str	r1, [sp, #40]	; 0x28
   16d5c:	mov	r3, sp
   16d60:	mov	r1, ip
   16d64:	mvn	r2, #0
   16d68:	bl	16788 <__assert_fail@plt+0x50a4>
   16d6c:	sub	sp, fp, #8
   16d70:	pop	{r4, r5, fp, pc}
   16d74:	push	{r4, r5, fp, lr}
   16d78:	add	fp, sp, #8
   16d7c:	sub	sp, sp, #48	; 0x30
   16d80:	mov	lr, r3
   16d84:	movw	r3, #49624	; 0xc1d8
   16d88:	mov	ip, #32
   16d8c:	cmp	r1, #0
   16d90:	mov	r5, sp
   16d94:	movt	r3, #2
   16d98:	cmpne	r2, #0
   16d9c:	add	r4, r3, #16
   16da0:	vld1.64	{d16-d17}, [r3], ip
   16da4:	vld1.64	{d18-d19}, [r4]
   16da8:	add	r4, r5, #16
   16dac:	vld1.64	{d20-d21}, [r3]
   16db0:	vst1.64	{d16-d17}, [r5], ip
   16db4:	mov	r3, #10
   16db8:	vst1.64	{d18-d19}, [r4]
   16dbc:	vst1.64	{d20-d21}, [r5]
   16dc0:	str	r3, [sp]
   16dc4:	bne	16dcc <__assert_fail@plt+0x56e8>
   16dc8:	bl	116cc <abort@plt>
   16dcc:	ldr	ip, [fp, #8]
   16dd0:	str	r2, [sp, #44]	; 0x2c
   16dd4:	str	r1, [sp, #40]	; 0x28
   16dd8:	mov	r3, sp
   16ddc:	mov	r1, lr
   16de0:	mov	r2, ip
   16de4:	bl	16788 <__assert_fail@plt+0x50a4>
   16de8:	sub	sp, fp, #8
   16dec:	pop	{r4, r5, fp, pc}
   16df0:	push	{r4, sl, fp, lr}
   16df4:	add	fp, sp, #8
   16df8:	sub	sp, sp, #48	; 0x30
   16dfc:	mov	ip, r2
   16e00:	movw	r2, #49624	; 0xc1d8
   16e04:	mov	lr, #32
   16e08:	cmp	r0, #0
   16e0c:	mov	r4, sp
   16e10:	movt	r2, #2
   16e14:	cmpne	r1, #0
   16e18:	add	r3, r2, #16
   16e1c:	vld1.64	{d16-d17}, [r2], lr
   16e20:	vld1.64	{d18-d19}, [r3]
   16e24:	add	r3, r4, #16
   16e28:	vld1.64	{d20-d21}, [r2]
   16e2c:	vst1.64	{d16-d17}, [r4], lr
   16e30:	mov	r2, #10
   16e34:	vst1.64	{d18-d19}, [r3]
   16e38:	vst1.64	{d20-d21}, [r4]
   16e3c:	str	r2, [sp]
   16e40:	bne	16e48 <__assert_fail@plt+0x5764>
   16e44:	bl	116cc <abort@plt>
   16e48:	str	r1, [sp, #44]	; 0x2c
   16e4c:	str	r0, [sp, #40]	; 0x28
   16e50:	mov	r3, sp
   16e54:	mov	r0, #0
   16e58:	mov	r1, ip
   16e5c:	mvn	r2, #0
   16e60:	bl	16788 <__assert_fail@plt+0x50a4>
   16e64:	sub	sp, fp, #8
   16e68:	pop	{r4, sl, fp, pc}
   16e6c:	push	{r4, r5, fp, lr}
   16e70:	add	fp, sp, #8
   16e74:	sub	sp, sp, #48	; 0x30
   16e78:	mov	lr, r2
   16e7c:	movw	r2, #49624	; 0xc1d8
   16e80:	mov	ip, r3
   16e84:	mov	r3, #32
   16e88:	cmp	r0, #0
   16e8c:	mov	r5, sp
   16e90:	movt	r2, #2
   16e94:	cmpne	r1, #0
   16e98:	add	r4, r2, #16
   16e9c:	vld1.64	{d16-d17}, [r2], r3
   16ea0:	vld1.64	{d18-d19}, [r4]
   16ea4:	add	r4, r5, #16
   16ea8:	vld1.64	{d20-d21}, [r2]
   16eac:	vst1.64	{d16-d17}, [r5], r3
   16eb0:	mov	r2, #10
   16eb4:	vst1.64	{d18-d19}, [r4]
   16eb8:	vst1.64	{d20-d21}, [r5]
   16ebc:	str	r2, [sp]
   16ec0:	bne	16ec8 <__assert_fail@plt+0x57e4>
   16ec4:	bl	116cc <abort@plt>
   16ec8:	str	r1, [sp, #44]	; 0x2c
   16ecc:	str	r0, [sp, #40]	; 0x28
   16ed0:	mov	r3, sp
   16ed4:	mov	r0, #0
   16ed8:	mov	r1, lr
   16edc:	mov	r2, ip
   16ee0:	bl	16788 <__assert_fail@plt+0x50a4>
   16ee4:	sub	sp, fp, #8
   16ee8:	pop	{r4, r5, fp, pc}
   16eec:	movw	r3, #49504	; 0xc160
   16ef0:	movt	r3, #2
   16ef4:	b	16788 <__assert_fail@plt+0x50a4>
   16ef8:	movw	r3, #49504	; 0xc160
   16efc:	mov	r2, r1
   16f00:	mov	r1, r0
   16f04:	mov	r0, #0
   16f08:	movt	r3, #2
   16f0c:	b	16788 <__assert_fail@plt+0x50a4>
   16f10:	movw	r3, #49504	; 0xc160
   16f14:	mvn	r2, #0
   16f18:	movt	r3, #2
   16f1c:	b	16788 <__assert_fail@plt+0x50a4>
   16f20:	movw	r3, #49504	; 0xc160
   16f24:	mov	r1, r0
   16f28:	mov	r0, #0
   16f2c:	mvn	r2, #0
   16f30:	movt	r3, #2
   16f34:	b	16788 <__assert_fail@plt+0x50a4>
   16f38:	push	{r4, sl, fp, lr}
   16f3c:	add	fp, sp, #8
   16f40:	mov	r4, r0
   16f44:	mov	r0, #24
   16f48:	bl	18354 <__assert_fail@plt+0x6c70>
   16f4c:	mov	r1, r0
   16f50:	vmov.i32	q8, #0	; 0x00000000
   16f54:	str	r4, [r1], #8
   16f58:	vst1.64	{d16-d17}, [r1]
   16f5c:	pop	{r4, sl, fp, pc}
   16f60:	push	{r4, sl, fp, lr}
   16f64:	add	fp, sp, #8
   16f68:	bl	171d4 <__assert_fail@plt+0x5af0>
   16f6c:	cmp	r0, #0
   16f70:	moveq	r0, #0
   16f74:	popeq	{r4, sl, fp, pc}
   16f78:	mov	r4, r0
   16f7c:	mov	r0, #24
   16f80:	bl	18354 <__assert_fail@plt+0x6c70>
   16f84:	mov	r1, r0
   16f88:	vmov.i32	q8, #0	; 0x00000000
   16f8c:	str	r4, [r1], #8
   16f90:	vst1.64	{d16-d17}, [r1]
   16f94:	pop	{r4, sl, fp, pc}
   16f98:	ldr	r0, [r0]
   16f9c:	bx	lr
   16fa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fa4:	add	fp, sp, #28
   16fa8:	sub	sp, sp, #60	; 0x3c
   16fac:	ldr	r1, [r0]
   16fb0:	ldr	r9, [r0, #12]
   16fb4:	ldr	r7, [r0, #20]
   16fb8:	mov	r5, r3
   16fbc:	mov	r6, r2
   16fc0:	mov	sl, #255	; 0xff
   16fc4:	str	r1, [sp, #8]
   16fc8:	mov	r1, r0
   16fcc:	ldr	r8, [r0, #8]!
   16fd0:	ldr	r4, [r1, #16]!
   16fd4:	str	r0, [sp, #4]
   16fd8:	adds	r0, r2, #1
   16fdc:	str	r0, [sp, #24]
   16fe0:	adc	r0, r3, #0
   16fe4:	str	r1, [sp]
   16fe8:	str	r0, [sp, #20]
   16fec:	subs	r0, r4, r6
   16ff0:	sbcs	r0, r7, r5
   16ff4:	bcs	17058 <__assert_fail@plt+0x5974>
   16ff8:	mov	r2, #0
   16ffc:	mov	r0, r4
   17000:	mov	r1, r7
   17004:	lsl	r1, r1, #8
   17008:	add	r2, r2, #1
   1700c:	orr	r1, r1, r0, lsr #24
   17010:	orr	r0, sl, r0, lsl #8
   17014:	subs	r3, r0, r6
   17018:	sbcs	r3, r1, r5
   1701c:	bcc	17004 <__assert_fail@plt+0x5920>
   17020:	ldr	r0, [sp, #8]
   17024:	sub	r1, fp, #36	; 0x24
   17028:	bl	17358 <__assert_fail@plt+0x5c74>
   1702c:	sub	r0, fp, #36	; 0x24
   17030:	lsl	r1, r9, #8
   17034:	orr	r9, r1, r8, lsr #24
   17038:	ldrb	r1, [r0], #1
   1703c:	orr	r8, r1, r8, lsl #8
   17040:	lsl	r1, r7, #8
   17044:	orr	r7, r1, r4, lsr #24
   17048:	orr	r4, sl, r4, lsl #8
   1704c:	subs	r1, r4, r6
   17050:	sbcs	r1, r7, r5
   17054:	bcc	17030 <__assert_fail@plt+0x594c>
   17058:	eor	r0, r4, r6
   1705c:	eor	r1, r7, r5
   17060:	orrs	r0, r0, r1
   17064:	beq	1714c <__assert_fail@plt+0x5a68>
   17068:	str	r4, [fp, #-40]	; 0xffffffd8
   1706c:	ldr	r4, [sp, #24]
   17070:	str	r7, [sp, #44]	; 0x2c
   17074:	ldr	r7, [sp, #20]
   17078:	mov	r0, r8
   1707c:	mov	r1, r9
   17080:	mov	r2, r4
   17084:	mov	r3, r7
   17088:	bl	1a0dc <__assert_fail@plt+0x89f8>
   1708c:	umull	r2, r3, r0, r4
   17090:	str	r0, [sp, #16]
   17094:	str	r1, [sp, #12]
   17098:	str	r8, [sp, #40]	; 0x28
   1709c:	str	r9, [sp, #36]	; 0x24
   170a0:	mla	r0, r0, r7, r3
   170a4:	subs	r8, r8, r2
   170a8:	mov	r3, r7
   170ac:	mla	r1, r1, r4, r0
   170b0:	ldr	r0, [fp, #-40]	; 0xffffffd8
   170b4:	sbc	r9, r9, r1
   170b8:	subs	r2, r0, r6
   170bc:	ldr	r0, [sp, #44]	; 0x2c
   170c0:	str	r2, [sp, #32]
   170c4:	sbc	r1, r0, r5
   170c8:	mov	r0, r2
   170cc:	mov	r2, r4
   170d0:	str	r1, [sp, #28]
   170d4:	bl	1a0dc <__assert_fail@plt+0x89f8>
   170d8:	umull	r2, r3, r0, r4
   170dc:	mov	ip, r1
   170e0:	mla	r3, r0, r7, r3
   170e4:	mla	r3, r1, r4, r3
   170e8:	ldr	r1, [sp, #32]
   170ec:	subs	r2, r1, r2
   170f0:	ldr	r1, [sp, #28]
   170f4:	sbc	r3, r1, r3
   170f8:	ldr	r1, [fp, #-40]	; 0xffffffd8
   170fc:	subs	r4, r2, #1
   17100:	sbc	r7, r3, #0
   17104:	subs	r2, r1, r2
   17108:	ldr	r1, [sp, #44]	; 0x2c
   1710c:	sbc	r3, r1, r3
   17110:	ldr	r1, [sp, #40]	; 0x28
   17114:	subs	r2, r2, r1
   17118:	ldr	r1, [sp, #36]	; 0x24
   1711c:	sbcs	r2, r3, r1
   17120:	bcc	16fec <__assert_fail@plt+0x5908>
   17124:	ldr	r2, [sp, #4]
   17128:	ldr	r3, [sp, #16]
   1712c:	ldr	r7, [sp, #12]
   17130:	stm	r2, {r3, r7}
   17134:	ldr	r2, [sp]
   17138:	stm	r2, {r0, ip}
   1713c:	mov	r0, r8
   17140:	mov	r1, r9
   17144:	sub	sp, fp, #28
   17148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1714c:	ldr	r0, [sp, #4]
   17150:	vmov.i32	q8, #0	; 0x00000000
   17154:	vst1.64	{d16-d17}, [r0]
   17158:	mov	r0, r8
   1715c:	mov	r1, r9
   17160:	sub	sp, fp, #28
   17164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17168:	push	{r4, sl, fp, lr}
   1716c:	add	fp, sp, #8
   17170:	mov	r1, #24
   17174:	mvn	r2, #0
   17178:	mov	r4, r0
   1717c:	bl	11618 <__explicit_bzero_chk@plt>
   17180:	mov	r0, r4
   17184:	pop	{r4, sl, fp, lr}
   17188:	b	143a4 <__assert_fail@plt+0x2cc0>
   1718c:	push	{r4, r5, r6, r7, fp, lr}
   17190:	add	fp, sp, #16
   17194:	mov	r4, r0
   17198:	ldr	r0, [r0]
   1719c:	bl	174b8 <__assert_fail@plt+0x5dd4>
   171a0:	mov	r5, r0
   171a4:	bl	11558 <__errno_location@plt>
   171a8:	ldr	r7, [r0]
   171ac:	mov	r6, r0
   171b0:	mov	r0, r4
   171b4:	mov	r1, #24
   171b8:	mvn	r2, #0
   171bc:	bl	11618 <__explicit_bzero_chk@plt>
   171c0:	mov	r0, r4
   171c4:	bl	143a4 <__assert_fail@plt+0x2cc0>
   171c8:	mov	r0, r5
   171cc:	str	r7, [r6]
   171d0:	pop	{r4, r5, r6, r7, fp, pc}
   171d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   171d8:	add	fp, sp, #24
   171dc:	cmp	r1, #0
   171e0:	beq	17250 <__assert_fail@plt+0x5b6c>
   171e4:	mov	r5, r1
   171e8:	mov	r6, r0
   171ec:	cmp	r0, #0
   171f0:	beq	17278 <__assert_fail@plt+0x5b94>
   171f4:	movw	r1, #45740	; 0xb2ac
   171f8:	mov	r0, r6
   171fc:	movt	r1, #1
   17200:	bl	19908 <__assert_fail@plt+0x8224>
   17204:	cmp	r0, #0
   17208:	beq	1733c <__assert_fail@plt+0x5c58>
   1720c:	mov	r7, r0
   17210:	movw	r0, #2076	; 0x81c
   17214:	bl	18354 <__assert_fail@plt+0x6c70>
   17218:	mov	r9, r0
   1721c:	movw	r0, #29940	; 0x74f4
   17220:	cmp	r5, #2048	; 0x800
   17224:	mov	r2, #0
   17228:	movcs	r5, #2048	; 0x800
   1722c:	movt	r0, #1
   17230:	str	r7, [r9]
   17234:	add	r1, r9, #12
   17238:	stmib	r9, {r0, r6}
   1723c:	mov	r0, r7
   17240:	mov	r3, r5
   17244:	bl	1157c <setvbuf@plt>
   17248:	mov	r0, r9
   1724c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17250:	movw	r0, #2076	; 0x81c
   17254:	bl	18354 <__assert_fail@plt+0x6c70>
   17258:	movw	r1, #29940	; 0x74f4
   1725c:	mov	r9, r0
   17260:	mov	r0, #0
   17264:	movt	r1, #1
   17268:	stm	r9, {r0, r1}
   1726c:	str	r0, [r9, #8]
   17270:	mov	r0, r9
   17274:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17278:	movw	r0, #2076	; 0x81c
   1727c:	bl	18354 <__assert_fail@plt+0x6c70>
   17280:	cmp	r5, #1024	; 0x400
   17284:	mov	r9, r0
   17288:	movw	r1, #29940	; 0x74f4
   1728c:	mov	r0, #0
   17290:	movcs	r5, #1024	; 0x400
   17294:	movt	r1, #1
   17298:	add	r8, r9, #16
   1729c:	cmp	r5, #1
   172a0:	stm	r9, {r0, r1}
   172a4:	str	r0, [r9, #8]
   172a8:	str	r0, [r9, #12]
   172ac:	blt	172f8 <__assert_fail@plt+0x5c14>
   172b0:	add	r6, r8, r5
   172b4:	mov	r5, r8
   172b8:	sub	r1, r6, r5
   172bc:	mov	r0, r5
   172c0:	mov	r2, #0
   172c4:	bl	11678 <getrandom@plt>
   172c8:	cmp	r0, #0
   172cc:	blt	172e0 <__assert_fail@plt+0x5bfc>
   172d0:	add	r5, r5, r0
   172d4:	cmp	r5, r6
   172d8:	bcc	172b8 <__assert_fail@plt+0x5bd4>
   172dc:	b	172f8 <__assert_fail@plt+0x5c14>
   172e0:	bl	11558 <__errno_location@plt>
   172e4:	ldr	r4, [r0]
   172e8:	cmp	r4, #4
   172ec:	bne	17308 <__assert_fail@plt+0x5c24>
   172f0:	cmp	r5, r6
   172f4:	bcc	172b8 <__assert_fail@plt+0x5bd4>
   172f8:	mov	r0, r8
   172fc:	bl	17794 <__assert_fail@plt+0x60b0>
   17300:	mov	r0, r9
   17304:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17308:	ldr	r5, [r9]
   1730c:	mov	r7, r0
   17310:	mov	r0, r9
   17314:	movw	r1, #2076	; 0x81c
   17318:	movw	r2, #2076	; 0x81c
   1731c:	bl	11618 <__explicit_bzero_chk@plt>
   17320:	mov	r0, r9
   17324:	bl	143a4 <__assert_fail@plt+0x2cc0>
   17328:	cmp	r5, #0
   1732c:	beq	17338 <__assert_fail@plt+0x5c54>
   17330:	mov	r0, r5
   17334:	bl	19804 <__assert_fail@plt+0x8120>
   17338:	str	r4, [r7]
   1733c:	mov	r9, #0
   17340:	mov	r0, r9
   17344:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17348:	str	r1, [r0, #4]
   1734c:	bx	lr
   17350:	str	r1, [r0, #8]
   17354:	bx	lr
   17358:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1735c:	add	fp, sp, #28
   17360:	sub	sp, sp, #4
   17364:	ldr	r3, [r0]
   17368:	mov	r6, r2
   1736c:	mov	r5, r1
   17370:	mov	sl, r0
   17374:	cmp	r3, #0
   17378:	beq	173f4 <__assert_fail@plt+0x5d10>
   1737c:	mov	r0, r5
   17380:	mov	r1, #1
   17384:	mov	r2, r6
   17388:	bl	1166c <fread_unlocked@plt>
   1738c:	mov	r4, r0
   17390:	sub	r6, r6, r0
   17394:	bl	11558 <__errno_location@plt>
   17398:	cmp	r6, #0
   1739c:	beq	173ec <__assert_fail@plt+0x5d08>
   173a0:	mov	r7, r0
   173a4:	ldr	r1, [sl]
   173a8:	ldr	r0, [r7]
   173ac:	ldr	r1, [r1]
   173b0:	lsl	r1, r1, #26
   173b4:	and	r0, r0, r1, asr #31
   173b8:	str	r0, [r7]
   173bc:	ldr	r1, [sl, #4]
   173c0:	ldr	r0, [sl, #8]
   173c4:	blx	r1
   173c8:	ldr	r3, [sl]
   173cc:	add	r5, r5, r4
   173d0:	mov	r1, #1
   173d4:	mov	r2, r6
   173d8:	mov	r0, r5
   173dc:	bl	1166c <fread_unlocked@plt>
   173e0:	mov	r4, r0
   173e4:	subs	r6, r6, r0
   173e8:	bne	173a4 <__assert_fail@plt+0x5cc0>
   173ec:	sub	sp, fp, #28
   173f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173f4:	ldr	r7, [sl, #12]
   173f8:	movw	r0, #1052	; 0x41c
   173fc:	add	r9, sl, r0
   17400:	sub	r0, r9, r7
   17404:	cmp	r7, r6
   17408:	add	r1, r0, #1024	; 0x400
   1740c:	bcs	17480 <__assert_fail@plt+0x5d9c>
   17410:	add	r8, sl, #16
   17414:	mov	r0, r5
   17418:	mov	r2, r7
   1741c:	bl	113cc <memcpy@plt>
   17420:	add	r5, r5, r7
   17424:	sub	r6, r6, r7
   17428:	tst	r5, #3
   1742c:	beq	17450 <__assert_fail@plt+0x5d6c>
   17430:	mov	r0, r8
   17434:	mov	r1, r9
   17438:	bl	17564 <__assert_fail@plt+0x5e80>
   1743c:	mov	r7, #1024	; 0x400
   17440:	cmp	r6, #1024	; 0x400
   17444:	mov	r1, r9
   17448:	bhi	17414 <__assert_fail@plt+0x5d30>
   1744c:	b	17498 <__assert_fail@plt+0x5db4>
   17450:	cmp	r6, #1024	; 0x400
   17454:	bcc	17488 <__assert_fail@plt+0x5da4>
   17458:	mov	r0, r8
   1745c:	mov	r1, r5
   17460:	bl	17564 <__assert_fail@plt+0x5e80>
   17464:	subs	r6, r6, #1024	; 0x400
   17468:	add	r5, r5, #1024	; 0x400
   1746c:	bne	17450 <__assert_fail@plt+0x5d6c>
   17470:	mov	r0, #0
   17474:	str	r0, [sl, #12]
   17478:	sub	sp, fp, #28
   1747c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17480:	mov	r9, r1
   17484:	b	17498 <__assert_fail@plt+0x5db4>
   17488:	mov	r0, r8
   1748c:	mov	r1, r9
   17490:	bl	17564 <__assert_fail@plt+0x5e80>
   17494:	mov	r7, #1024	; 0x400
   17498:	mov	r0, r5
   1749c:	mov	r1, r9
   174a0:	mov	r2, r6
   174a4:	bl	113cc <memcpy@plt>
   174a8:	sub	r0, r7, r6
   174ac:	str	r0, [sl, #12]
   174b0:	sub	sp, fp, #28
   174b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174b8:	push	{r4, r5, fp, lr}
   174bc:	add	fp, sp, #8
   174c0:	ldr	r4, [r0]
   174c4:	movw	r1, #2076	; 0x81c
   174c8:	mvn	r2, #0
   174cc:	mov	r5, r0
   174d0:	bl	11618 <__explicit_bzero_chk@plt>
   174d4:	mov	r0, r5
   174d8:	bl	143a4 <__assert_fail@plt+0x2cc0>
   174dc:	cmp	r4, #0
   174e0:	moveq	r0, #0
   174e4:	popeq	{r4, r5, fp, pc}
   174e8:	mov	r0, r4
   174ec:	pop	{r4, r5, fp, lr}
   174f0:	b	19804 <__assert_fail@plt+0x8120>
   174f4:	push	{fp, lr}
   174f8:	mov	fp, sp
   174fc:	cmp	r0, #0
   17500:	beq	17560 <__assert_fail@plt+0x5e7c>
   17504:	mov	r4, r0
   17508:	movw	r0, #49496	; 0xc158
   1750c:	movt	r0, #2
   17510:	ldr	r5, [r0]
   17514:	bl	11558 <__errno_location@plt>
   17518:	ldr	r6, [r0]
   1751c:	movw	r0, #45743	; 0xb2af
   17520:	movw	r1, #45759	; 0xb2bf
   17524:	mov	r2, #5
   17528:	movt	r0, #1
   1752c:	movt	r1, #1
   17530:	cmp	r6, #0
   17534:	moveq	r1, r0
   17538:	mov	r0, #0
   1753c:	bl	11414 <dcgettext@plt>
   17540:	mov	r7, r0
   17544:	mov	r0, r4
   17548:	bl	16f20 <__assert_fail@plt+0x583c>
   1754c:	mov	r3, r0
   17550:	mov	r0, r5
   17554:	mov	r1, r6
   17558:	mov	r2, r7
   1755c:	bl	114bc <error@plt>
   17560:	bl	116cc <abort@plt>
   17564:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17568:	add	fp, sp, #24
   1756c:	add	r6, r0, #1024	; 0x400
   17570:	add	lr, r0, #512	; 0x200
   17574:	ldm	r6, {r2, r3, r6}
   17578:	add	r6, r6, #1
   1757c:	add	r4, r6, r3
   17580:	add	r3, r0, #16
   17584:	str	r6, [r0, #1032]	; 0x408
   17588:	mvn	r6, r0
   1758c:	cmp	lr, r3
   17590:	movhi	r3, lr
   17594:	add	r3, r3, r6
   17598:	lsr	ip, r3, #4
   1759c:	mov	r3, #0
   175a0:	mov	r5, r0
   175a4:	eor	r2, r2, r2, lsl #13
   175a8:	ldr	r6, [r5, r3]!
   175ac:	and	r7, r6, #1020	; 0x3fc
   175b0:	ldr	r8, [r0, r7]
   175b4:	ldr	r7, [r5, #512]	; 0x200
   175b8:	add	r2, r2, r7
   175bc:	add	r4, r2, r4
   175c0:	add	r4, r4, r8
   175c4:	eor	r8, r2, r2, lsr #6
   175c8:	str	r4, [r5]
   175cc:	ubfx	r4, r4, #10, #8
   175d0:	ldr	r4, [r0, r4, lsl #2]
   175d4:	add	r4, r4, r6
   175d8:	mov	r6, r1
   175dc:	str	r4, [r6, r3]!
   175e0:	add	r3, r3, #16
   175e4:	ldr	r2, [r5, #516]	; 0x204
   175e8:	ldr	r7, [r5, #4]
   175ec:	add	r2, r2, r8
   175f0:	add	r8, r2, r4
   175f4:	and	r4, r7, #1020	; 0x3fc
   175f8:	ldr	r4, [r0, r4]
   175fc:	add	r4, r8, r4
   17600:	eor	r8, r2, r2, lsl #2
   17604:	str	r4, [r5, #4]
   17608:	ubfx	r4, r4, #10, #8
   1760c:	ldr	r4, [r0, r4, lsl #2]
   17610:	add	r4, r4, r7
   17614:	str	r4, [r6, #4]
   17618:	ldr	r2, [r5, #520]	; 0x208
   1761c:	ldr	r7, [r5, #8]
   17620:	add	r2, r2, r8
   17624:	add	r8, r2, r4
   17628:	and	r4, r7, #1020	; 0x3fc
   1762c:	ldr	r4, [r0, r4]
   17630:	add	r4, r8, r4
   17634:	eor	r8, r2, r2, lsr #16
   17638:	str	r4, [r5, #8]
   1763c:	ubfx	r4, r4, #10, #8
   17640:	ldr	r4, [r0, r4, lsl #2]
   17644:	add	r4, r4, r7
   17648:	str	r4, [r6, #8]
   1764c:	ldr	r2, [r5, #524]	; 0x20c
   17650:	ldr	r7, [r5, #12]
   17654:	add	r2, r2, r8
   17658:	add	r8, r2, r4
   1765c:	and	r4, r7, #1020	; 0x3fc
   17660:	ldr	r4, [r0, r4]
   17664:	add	r4, r8, r4
   17668:	str	r4, [r5, #12]
   1766c:	ubfx	r4, r4, #10, #8
   17670:	add	r5, r0, r3
   17674:	ldr	r4, [r0, r4, lsl #2]
   17678:	cmp	r5, lr
   1767c:	add	r4, r4, r7
   17680:	str	r4, [r6, #12]
   17684:	bcc	175a0 <__assert_fail@plt+0x5ebc>
   17688:	lsl	lr, ip, #4
   1768c:	add	r9, r1, #16
   17690:	add	ip, r0, #1024	; 0x400
   17694:	mov	r3, r0
   17698:	add	r5, r3, lr
   1769c:	eor	r2, r2, r2, lsl #13
   176a0:	add	r3, r3, #16
   176a4:	ldr	r7, [r5, #16]
   176a8:	ldr	r8, [r5, #-496]	; 0xfffffe10
   176ac:	and	r6, r7, #1020	; 0x3fc
   176b0:	add	r2, r2, r8
   176b4:	ldr	r6, [r0, r6]
   176b8:	add	r4, r2, r4
   176bc:	eor	r8, r2, r2, lsr #6
   176c0:	add	r4, r4, r6
   176c4:	mov	r6, r9
   176c8:	add	r9, r9, #16
   176cc:	str	r4, [r5, #16]
   176d0:	ubfx	r4, r4, #10, #8
   176d4:	ldr	r4, [r0, r4, lsl #2]
   176d8:	add	r4, r4, r7
   176dc:	str	r4, [r6, lr]!
   176e0:	ldr	r2, [r5, #20]
   176e4:	ldr	r7, [r5, #-492]	; 0xfffffe14
   176e8:	and	r1, r2, #1020	; 0x3fc
   176ec:	add	r7, r7, r8
   176f0:	ldr	r1, [r0, r1]
   176f4:	add	r4, r7, r4
   176f8:	add	r1, r4, r1
   176fc:	str	r1, [r5, #20]
   17700:	ubfx	r1, r1, #10, #8
   17704:	ldr	r1, [r0, r1, lsl #2]
   17708:	add	r1, r1, r2
   1770c:	eor	r2, r7, r7, lsl #2
   17710:	str	r1, [r6, #4]
   17714:	ldr	r4, [r5, #-488]	; 0xfffffe18
   17718:	ldr	r7, [r5, #24]
   1771c:	add	r2, r4, r2
   17720:	and	r4, r7, #1020	; 0x3fc
   17724:	ldr	r4, [r0, r4]
   17728:	add	r1, r2, r1
   1772c:	eor	r2, r2, r2, lsr #16
   17730:	add	r1, r1, r4
   17734:	str	r1, [r5, #24]
   17738:	ubfx	r1, r1, #10, #8
   1773c:	ldr	r1, [r0, r1, lsl #2]
   17740:	add	r1, r1, r7
   17744:	str	r1, [r6, #8]
   17748:	ldr	r4, [r5, #-484]	; 0xfffffe1c
   1774c:	ldr	r7, [r5, #28]
   17750:	add	r2, r4, r2
   17754:	and	r4, r7, #1020	; 0x3fc
   17758:	ldr	r4, [r0, r4]
   1775c:	add	r1, r2, r1
   17760:	add	r1, r1, r4
   17764:	str	r1, [r5, #28]
   17768:	ubfx	r1, r1, #10, #8
   1776c:	ldr	r1, [r0, r1, lsl #2]
   17770:	add	r4, r1, r7
   17774:	add	r1, r3, lr
   17778:	add	r1, r1, #16
   1777c:	str	r4, [r6, #12]
   17780:	cmp	r1, ip
   17784:	bcc	17698 <__assert_fail@plt+0x5fb4>
   17788:	str	r2, [r0, #1024]	; 0x400
   1778c:	str	r4, [r0, #1028]	; 0x404
   17790:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17794:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17798:	add	fp, sp, #28
   1779c:	sub	sp, sp, #28
   177a0:	str	r0, [sp, #20]
   177a4:	add	r7, r0, #28
   177a8:	movw	r0, #19064	; 0x4a78
   177ac:	movw	r6, #57178	; 0xdf5a
   177b0:	movw	r5, #89	; 0x59
   177b4:	movw	r1, #15947	; 0x3e4b
   177b8:	movw	sl, #6872	; 0x1ad8
   177bc:	movw	r8, #15433	; 0x3c49
   177c0:	movw	lr, #37145	; 0x9119
   177c4:	mov	r9, #0
   177c8:	movt	r0, #55594	; 0xd92a
   177cc:	movt	r6, #4967	; 0x1367
   177d0:	movt	r5, #38361	; 0x95d9
   177d4:	movt	r1, #49942	; 0xc316
   177d8:	movt	sl, #3906	; 0xf42
   177dc:	movt	r8, #42266	; 0xa51a
   177e0:	movt	lr, #12384	; 0x3060
   177e4:	str	r0, [sp, #16]
   177e8:	movw	r0, #59931	; 0xea1b
   177ec:	movt	r0, #50415	; 0xc4ef
   177f0:	ldr	r3, [r7, #-28]	; 0xffffffe4
   177f4:	str	r0, [sp, #24]
   177f8:	ldr	r0, [r7]
   177fc:	str	lr, [sp, #4]
   17800:	add	r6, r3, r6
   17804:	ldr	r3, [sp, #20]
   17808:	str	r0, [sp, #12]
   1780c:	add	r3, r3, r9, lsl #2
   17810:	add	r9, r9, #8
   17814:	ldmib	r3, {r2, lr}
   17818:	ldr	r0, [r3, #12]
   1781c:	ldr	ip, [r3, #16]
   17820:	cmp	r9, #256	; 0x100
   17824:	add	r5, r2, r5
   17828:	add	r2, r0, sl
   1782c:	add	r4, lr, r1
   17830:	eor	r6, r6, r5, lsl #11
   17834:	add	r5, r4, r5
   17838:	add	r2, r2, r6
   1783c:	str	r6, [sp, #8]
   17840:	add	r6, r2, r4
   17844:	eor	r4, r5, r4, lsr #2
   17848:	eor	r0, r6, r2, lsl #8
   1784c:	ldr	r6, [r3, #20]
   17850:	str	r4, [sp]
   17854:	add	r1, r6, r8
   17858:	ldr	r6, [sp, #16]
   1785c:	add	r1, r1, r0
   17860:	add	r5, ip, r6
   17864:	add	r5, r5, r4
   17868:	ldr	r4, [sp, #4]
   1786c:	add	r2, r5, r2
   17870:	add	r6, r1, r5
   17874:	eor	sl, r2, r5, lsr #16
   17878:	ldr	r5, [r3, #24]
   1787c:	ldr	r2, [sp, #24]
   17880:	eor	ip, r6, r1, lsl #10
   17884:	ldr	r6, [sp, #12]
   17888:	str	ip, [sp, #16]
   1788c:	add	r5, r5, r2
   17890:	add	r6, r6, r4
   17894:	ldr	r2, [sp]
   17898:	add	r5, r5, sl
   1789c:	add	r6, r6, ip
   178a0:	add	r1, r5, r1
   178a4:	eor	r8, r1, r5, lsr #4
   178a8:	ldr	r1, [sp, #8]
   178ac:	add	r5, r6, r5
   178b0:	add	r4, r8, r1
   178b4:	add	r1, r4, r6
   178b8:	eor	lr, r1, r4, lsr #9
   178bc:	add	r1, lr, r0
   178c0:	eor	r0, r5, r6, lsl #8
   178c4:	add	r5, r0, r2
   178c8:	add	r6, r5, r4
   178cc:	str	r6, [r7, #-28]	; 0xffffffe4
   178d0:	str	r5, [r3, #4]
   178d4:	str	r1, [r3, #8]
   178d8:	str	sl, [r3, #12]
   178dc:	str	ip, [r3, #16]
   178e0:	str	r8, [r3, #20]
   178e4:	str	r0, [r3, #24]
   178e8:	str	lr, [r7]
   178ec:	add	r7, r7, #32
   178f0:	bcc	177f0 <__assert_fail@plt+0x610c>
   178f4:	ldr	r3, [sp, #20]
   178f8:	ldr	r9, [sp, #16]
   178fc:	mov	r4, #0
   17900:	add	r7, r3, #28
   17904:	str	r0, [sp, #24]
   17908:	ldr	r0, [r7]
   1790c:	ldr	r3, [r7, #-28]	; 0xffffffe4
   17910:	str	r0, [sp, #16]
   17914:	add	r0, r3, r6
   17918:	str	r0, [sp, #12]
   1791c:	ldr	r0, [sp, #20]
   17920:	add	r3, r0, r4, lsl #2
   17924:	add	r4, r4, #8
   17928:	ldmib	r3, {r6, ip}
   1792c:	ldr	r2, [r3, #16]
   17930:	ldr	r0, [r3, #12]
   17934:	cmp	r4, #256	; 0x100
   17938:	str	r2, [sp, #8]
   1793c:	ldr	r2, [sp, #12]
   17940:	add	r5, r6, r5
   17944:	add	r0, r0, sl
   17948:	add	r1, ip, r1
   1794c:	eor	r2, r2, r5, lsl #11
   17950:	add	r0, r0, r2
   17954:	str	r2, [sp, #12]
   17958:	add	r2, r0, r1
   1795c:	eor	ip, r2, r0, lsl #8
   17960:	ldr	r2, [r3, #20]
   17964:	add	r2, r2, r8
   17968:	add	r6, r2, ip
   1796c:	add	r2, r1, r5
   17970:	eor	r5, r2, r1, lsr #2
   17974:	ldr	r1, [sp, #8]
   17978:	add	r1, r1, r9
   1797c:	add	r1, r1, r5
   17980:	add	r0, r1, r0
   17984:	add	r2, r6, r1
   17988:	eor	sl, r0, r1, lsr #16
   1798c:	ldr	r0, [r3, #24]
   17990:	ldr	r1, [sp, #24]
   17994:	eor	r9, r2, r6, lsl #10
   17998:	ldr	r2, [sp, #16]
   1799c:	add	r0, r0, r1
   179a0:	add	r2, r2, lr
   179a4:	add	r0, r0, sl
   179a8:	add	lr, r2, r9
   179ac:	add	r1, r0, r6
   179b0:	eor	r8, r1, r0, lsr #4
   179b4:	ldr	r1, [sp, #12]
   179b8:	add	r0, lr, r0
   179bc:	eor	r0, r0, lr, lsl #8
   179c0:	add	r5, r0, r5
   179c4:	add	r6, r8, r1
   179c8:	add	r1, r6, lr
   179cc:	eor	r1, r1, r6, lsr #9
   179d0:	add	r6, r5, r6
   179d4:	add	r2, r1, ip
   179d8:	mov	lr, r1
   179dc:	str	r6, [r7, #-28]	; 0xffffffe4
   179e0:	str	r5, [r3, #4]
   179e4:	str	r2, [r3, #8]
   179e8:	str	sl, [r3, #12]
   179ec:	str	r9, [r3, #16]
   179f0:	str	r8, [r3, #20]
   179f4:	str	r0, [r3, #24]
   179f8:	str	lr, [r7]
   179fc:	mov	r1, r2
   17a00:	add	r7, r7, #32
   17a04:	bcc	17904 <__assert_fail@plt+0x6220>
   17a08:	ldr	r0, [sp, #20]
   17a0c:	mov	r1, #0
   17a10:	str	r1, [r0, #1024]	; 0x400
   17a14:	str	r1, [r0, #1028]	; 0x404
   17a18:	str	r1, [r0, #1032]	; 0x408
   17a1c:	sub	sp, fp, #28
   17a20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a28:	add	fp, sp, #28
   17a2c:	sub	sp, sp, #220	; 0xdc
   17a30:	ldr	r7, [fp, #8]
   17a34:	mov	r4, r3
   17a38:	mov	r9, r2
   17a3c:	mov	r6, r1
   17a40:	mov	sl, r0
   17a44:	str	r7, [sp]
   17a48:	bl	11594 <renameat2@plt>
   17a4c:	mov	r5, r0
   17a50:	bl	11558 <__errno_location@plt>
   17a54:	cmn	r5, #1
   17a58:	bgt	17b24 <__assert_fail@plt+0x6440>
   17a5c:	mov	r8, r0
   17a60:	ldr	r0, [r0]
   17a64:	cmp	r0, #22
   17a68:	cmpne	r0, #95	; 0x5f
   17a6c:	bne	17ac4 <__assert_fail@plt+0x63e0>
   17a70:	cmp	r7, #0
   17a74:	beq	17ad0 <__assert_fail@plt+0x63ec>
   17a78:	cmp	r7, #1
   17a7c:	bne	17b18 <__assert_fail@plt+0x6434>
   17a80:	mov	r0, #256	; 0x100
   17a84:	add	r3, sp, #8
   17a88:	mov	r1, r9
   17a8c:	mov	r2, r4
   17a90:	str	r0, [sp]
   17a94:	mov	r0, #3
   17a98:	bl	11444 <__fxstatat64@plt>
   17a9c:	cmp	r0, #0
   17aa0:	beq	17abc <__assert_fail@plt+0x63d8>
   17aa4:	ldr	r0, [r8]
   17aa8:	cmp	r0, #2
   17aac:	beq	17ba4 <__assert_fail@plt+0x64c0>
   17ab0:	mvn	r5, #0
   17ab4:	cmp	r0, #75	; 0x4b
   17ab8:	bne	17b24 <__assert_fail@plt+0x6440>
   17abc:	mov	r0, #17
   17ac0:	b	17b1c <__assert_fail@plt+0x6438>
   17ac4:	cmp	r0, #38	; 0x26
   17ac8:	beq	17a70 <__assert_fail@plt+0x638c>
   17acc:	b	17b24 <__assert_fail@plt+0x6440>
   17ad0:	mov	r7, #0
   17ad4:	mov	r0, r6
   17ad8:	bl	11534 <strlen@plt>
   17adc:	mov	r5, r0
   17ae0:	mov	r0, r4
   17ae4:	bl	11534 <strlen@plt>
   17ae8:	cmp	r5, #0
   17aec:	cmpne	r0, #0
   17af0:	bne	17b30 <__assert_fail@plt+0x644c>
   17af4:	mov	r0, sl
   17af8:	mov	r1, r6
   17afc:	mov	r2, r9
   17b00:	mov	r3, r4
   17b04:	bl	11654 <renameat@plt>
   17b08:	mov	r5, r0
   17b0c:	mov	r0, r5
   17b10:	sub	sp, fp, #28
   17b14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b18:	mov	r0, #95	; 0x5f
   17b1c:	str	r0, [r8]
   17b20:	mvn	r5, #0
   17b24:	mov	r0, r5
   17b28:	sub	sp, fp, #28
   17b2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b30:	add	r1, r6, r5
   17b34:	ldrb	r1, [r1, #-1]
   17b38:	cmp	r1, #47	; 0x2f
   17b3c:	beq	17b50 <__assert_fail@plt+0x646c>
   17b40:	add	r0, r4, r0
   17b44:	ldrb	r0, [r0, #-1]
   17b48:	cmp	r0, #47	; 0x2f
   17b4c:	bne	17af4 <__assert_fail@plt+0x6410>
   17b50:	mov	r0, #256	; 0x100
   17b54:	add	r3, sp, #112	; 0x70
   17b58:	mov	r1, sl
   17b5c:	mov	r2, r6
   17b60:	str	r0, [sp]
   17b64:	mov	r0, #3
   17b68:	bl	11444 <__fxstatat64@plt>
   17b6c:	mvn	r5, #0
   17b70:	cmp	r0, #0
   17b74:	bne	17b24 <__assert_fail@plt+0x6440>
   17b78:	cmp	r7, #0
   17b7c:	beq	17bac <__assert_fail@plt+0x64c8>
   17b80:	ldr	r0, [sp, #128]	; 0x80
   17b84:	and	r0, r0, #61440	; 0xf000
   17b88:	cmp	r0, #16384	; 0x4000
   17b8c:	beq	17af4 <__assert_fail@plt+0x6410>
   17b90:	mov	r0, #2
   17b94:	str	r0, [r8]
   17b98:	mov	r0, r5
   17b9c:	sub	sp, fp, #28
   17ba0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ba4:	mov	r7, #1
   17ba8:	b	17ad4 <__assert_fail@plt+0x63f0>
   17bac:	mov	r0, #256	; 0x100
   17bb0:	add	r3, sp, #8
   17bb4:	mov	r1, r9
   17bb8:	mov	r2, r4
   17bbc:	str	r0, [sp]
   17bc0:	mov	r0, #3
   17bc4:	bl	11444 <__fxstatat64@plt>
   17bc8:	cmp	r0, #0
   17bcc:	beq	17bf0 <__assert_fail@plt+0x650c>
   17bd0:	ldr	r0, [r8]
   17bd4:	cmp	r0, #2
   17bd8:	bne	17b24 <__assert_fail@plt+0x6440>
   17bdc:	ldr	r0, [sp, #128]	; 0x80
   17be0:	and	r0, r0, #61440	; 0xf000
   17be4:	cmp	r0, #16384	; 0x4000
   17be8:	beq	17af4 <__assert_fail@plt+0x6410>
   17bec:	b	17b24 <__assert_fail@plt+0x6440>
   17bf0:	ldr	r0, [sp, #24]
   17bf4:	and	r0, r0, #61440	; 0xf000
   17bf8:	cmp	r0, #16384	; 0x4000
   17bfc:	bne	17c24 <__assert_fail@plt+0x6540>
   17c00:	ldr	r0, [sp, #128]	; 0x80
   17c04:	and	r0, r0, #61440	; 0xf000
   17c08:	cmp	r0, #16384	; 0x4000
   17c0c:	beq	17af4 <__assert_fail@plt+0x6410>
   17c10:	mov	r0, #21
   17c14:	str	r0, [r8]
   17c18:	mov	r0, r5
   17c1c:	sub	sp, fp, #28
   17c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c24:	mov	r0, #20
   17c28:	str	r0, [r8]
   17c2c:	mov	r0, r5
   17c30:	sub	sp, fp, #28
   17c34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c38:	push	{r4, r5, r6, r7, fp, lr}
   17c3c:	add	fp, sp, #16
   17c40:	mov	r4, r0
   17c44:	cmp	r0, #2
   17c48:	movhi	r0, r4
   17c4c:	pophi	{r4, r5, r6, r7, fp, pc}
   17c50:	mov	r0, r4
   17c54:	bl	19b34 <__assert_fail@plt+0x8450>
   17c58:	mov	r5, r0
   17c5c:	bl	11558 <__errno_location@plt>
   17c60:	ldr	r7, [r0]
   17c64:	mov	r6, r0
   17c68:	mov	r0, r4
   17c6c:	bl	116d8 <close@plt>
   17c70:	mov	r0, r5
   17c74:	str	r7, [r6]
   17c78:	pop	{r4, r5, r6, r7, fp, pc}
   17c7c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17c80:	add	fp, sp, #24
   17c84:	sub	sp, sp, #32
   17c88:	ldr	r6, [fp, #12]
   17c8c:	ldr	r7, [fp, #8]
   17c90:	mov	r4, r2
   17c94:	mov	r8, r0
   17c98:	cmp	r1, #0
   17c9c:	beq	17cc4 <__assert_fail@plt+0x65e0>
   17ca0:	movw	r2, #45774	; 0xb2ce
   17ca4:	mov	r5, r1
   17ca8:	str	r3, [sp, #4]
   17cac:	str	r4, [sp]
   17cb0:	mov	r0, r8
   17cb4:	mov	r1, #1
   17cb8:	movt	r2, #1
   17cbc:	mov	r3, r5
   17cc0:	b	17cdc <__assert_fail@plt+0x65f8>
   17cc4:	movw	r2, #45786	; 0xb2da
   17cc8:	str	r3, [sp]
   17ccc:	mov	r0, r8
   17cd0:	mov	r1, #1
   17cd4:	mov	r3, r4
   17cd8:	movt	r2, #1
   17cdc:	bl	115c4 <__fprintf_chk@plt>
   17ce0:	movw	r1, #45793	; 0xb2e1
   17ce4:	mov	r0, #0
   17ce8:	mov	r2, #5
   17cec:	movt	r1, #1
   17cf0:	bl	11414 <dcgettext@plt>
   17cf4:	movw	r2, #46511	; 0xb5af
   17cf8:	mov	r3, r0
   17cfc:	movw	r0, #2022	; 0x7e6
   17d00:	mov	r1, #1
   17d04:	str	r0, [sp]
   17d08:	movt	r2, #1
   17d0c:	mov	r0, r8
   17d10:	bl	115c4 <__fprintf_chk@plt>
   17d14:	movw	r4, #43206	; 0xa8c6
   17d18:	mov	r1, r8
   17d1c:	movt	r4, #1
   17d20:	mov	r0, r4
   17d24:	bl	1136c <fputs_unlocked@plt>
   17d28:	movw	r1, #45797	; 0xb2e5
   17d2c:	mov	r0, #0
   17d30:	mov	r2, #5
   17d34:	movt	r1, #1
   17d38:	bl	11414 <dcgettext@plt>
   17d3c:	movw	r3, #45968	; 0xb390
   17d40:	mov	r2, r0
   17d44:	mov	r0, r8
   17d48:	mov	r1, #1
   17d4c:	movt	r3, #1
   17d50:	bl	115c4 <__fprintf_chk@plt>
   17d54:	mov	r0, r4
   17d58:	mov	r1, r8
   17d5c:	bl	1136c <fputs_unlocked@plt>
   17d60:	cmp	r6, #9
   17d64:	bhi	17da0 <__assert_fail@plt+0x66bc>
   17d68:	add	r0, pc, #0
   17d6c:	ldr	pc, [r0, r6, lsl #2]
   17d70:	muleq	r1, r8, sp
   17d74:	andeq	r7, r1, ip, lsr #27
   17d78:	ldrdeq	r7, [r1], -ip
   17d7c:	andeq	r7, r1, r4, lsl #28
   17d80:	andeq	r7, r1, ip, lsr #28
   17d84:	andeq	r7, r1, r4, asr lr
   17d88:	andeq	r7, r1, ip, ror lr
   17d8c:			; <UNDEFINED> instruction: 0x00017eb4
   17d90:	andeq	r7, r1, ip, asr pc
   17d94:	andeq	r7, r1, r4, lsl #30
   17d98:	sub	sp, fp, #24
   17d9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17da0:	movw	r1, #46321	; 0xb4f1
   17da4:	movt	r1, #1
   17da8:	b	17f0c <__assert_fail@plt+0x6828>
   17dac:	movw	r1, #46002	; 0xb3b2
   17db0:	mov	r0, #0
   17db4:	mov	r2, #5
   17db8:	movt	r1, #1
   17dbc:	bl	11414 <dcgettext@plt>
   17dc0:	ldr	r3, [r7]
   17dc4:	mov	r2, r0
   17dc8:	mov	r0, r8
   17dcc:	mov	r1, #1
   17dd0:	sub	sp, fp, #24
   17dd4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   17dd8:	b	115c4 <__fprintf_chk@plt>
   17ddc:	movw	r1, #46018	; 0xb3c2
   17de0:	mov	r0, #0
   17de4:	mov	r2, #5
   17de8:	movt	r1, #1
   17dec:	bl	11414 <dcgettext@plt>
   17df0:	mov	r2, r0
   17df4:	ldr	r3, [r7]
   17df8:	ldr	r0, [r7, #4]
   17dfc:	str	r0, [sp]
   17e00:	b	17ef0 <__assert_fail@plt+0x680c>
   17e04:	movw	r1, #46041	; 0xb3d9
   17e08:	mov	r0, #0
   17e0c:	mov	r2, #5
   17e10:	movt	r1, #1
   17e14:	bl	11414 <dcgettext@plt>
   17e18:	ldr	r3, [r7]
   17e1c:	mov	r2, r0
   17e20:	ldmib	r7, {r0, r1}
   17e24:	stm	sp, {r0, r1}
   17e28:	b	17ef0 <__assert_fail@plt+0x680c>
   17e2c:	movw	r1, #46069	; 0xb3f5
   17e30:	mov	r0, #0
   17e34:	mov	r2, #5
   17e38:	movt	r1, #1
   17e3c:	bl	11414 <dcgettext@plt>
   17e40:	ldr	r3, [r7]
   17e44:	mov	r2, r0
   17e48:	ldmib	r7, {r0, r1, r7}
   17e4c:	stm	sp, {r0, r1, r7}
   17e50:	b	17ef0 <__assert_fail@plt+0x680c>
   17e54:	movw	r1, #46101	; 0xb415
   17e58:	mov	r0, #0
   17e5c:	mov	r2, #5
   17e60:	movt	r1, #1
   17e64:	bl	11414 <dcgettext@plt>
   17e68:	ldr	r3, [r7]
   17e6c:	mov	r2, r0
   17e70:	ldmib	r7, {r0, r1, r6, r7}
   17e74:	stm	sp, {r0, r1, r6, r7}
   17e78:	b	17ef0 <__assert_fail@plt+0x680c>
   17e7c:	movw	r1, #46137	; 0xb439
   17e80:	mov	r0, #0
   17e84:	mov	r2, #5
   17e88:	movt	r1, #1
   17e8c:	bl	11414 <dcgettext@plt>
   17e90:	ldr	r3, [r7]
   17e94:	mov	r2, r0
   17e98:	ldmib	r7, {r0, r1, r6}
   17e9c:	ldr	r5, [r7, #16]
   17ea0:	ldr	r7, [r7, #20]
   17ea4:	stm	sp, {r0, r1, r6}
   17ea8:	str	r5, [sp, #12]
   17eac:	str	r7, [sp, #16]
   17eb0:	b	17ef0 <__assert_fail@plt+0x680c>
   17eb4:	movw	r1, #46177	; 0xb461
   17eb8:	mov	r0, #0
   17ebc:	mov	r2, #5
   17ec0:	movt	r1, #1
   17ec4:	bl	11414 <dcgettext@plt>
   17ec8:	ldr	r3, [r7]
   17ecc:	mov	r2, r0
   17ed0:	ldmib	r7, {r0, r1, r6}
   17ed4:	ldr	r5, [r7, #16]
   17ed8:	ldr	r4, [r7, #20]
   17edc:	ldr	r7, [r7, #24]
   17ee0:	stm	sp, {r0, r1, r6}
   17ee4:	str	r5, [sp, #12]
   17ee8:	str	r4, [sp, #16]
   17eec:	str	r7, [sp, #20]
   17ef0:	mov	r0, r8
   17ef4:	mov	r1, #1
   17ef8:	bl	115c4 <__fprintf_chk@plt>
   17efc:	sub	sp, fp, #24
   17f00:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17f04:	movw	r1, #46269	; 0xb4bd
   17f08:	movt	r1, #1
   17f0c:	mov	r0, #0
   17f10:	mov	r2, #5
   17f14:	bl	11414 <dcgettext@plt>
   17f18:	mov	ip, r0
   17f1c:	ldr	r3, [r7]
   17f20:	ldr	r0, [r7, #4]
   17f24:	ldr	r1, [r7, #8]
   17f28:	ldr	r6, [r7, #12]
   17f2c:	ldr	r5, [r7, #16]
   17f30:	ldr	r4, [r7, #20]
   17f34:	ldr	r2, [r7, #24]
   17f38:	ldr	lr, [r7, #28]
   17f3c:	ldr	r7, [r7, #32]
   17f40:	stm	sp, {r0, r1, r6}
   17f44:	str	r5, [sp, #12]
   17f48:	str	r4, [sp, #16]
   17f4c:	str	r2, [sp, #20]
   17f50:	str	lr, [sp, #24]
   17f54:	str	r7, [sp, #28]
   17f58:	b	17fa0 <__assert_fail@plt+0x68bc>
   17f5c:	movw	r1, #46221	; 0xb48d
   17f60:	mov	r0, #0
   17f64:	mov	r2, #5
   17f68:	movt	r1, #1
   17f6c:	bl	11414 <dcgettext@plt>
   17f70:	mov	ip, r0
   17f74:	ldr	r3, [r7]
   17f78:	ldmib	r7, {r0, r1, r6}
   17f7c:	ldr	r5, [r7, #16]
   17f80:	ldr	r4, [r7, #20]
   17f84:	ldr	r2, [r7, #24]
   17f88:	ldr	r7, [r7, #28]
   17f8c:	stm	sp, {r0, r1, r6}
   17f90:	str	r5, [sp, #12]
   17f94:	str	r4, [sp, #16]
   17f98:	str	r2, [sp, #20]
   17f9c:	str	r7, [sp, #24]
   17fa0:	mov	r0, r8
   17fa4:	mov	r1, #1
   17fa8:	mov	r2, ip
   17fac:	bl	115c4 <__fprintf_chk@plt>
   17fb0:	sub	sp, fp, #24
   17fb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17fb8:	push	{r4, sl, fp, lr}
   17fbc:	add	fp, sp, #8
   17fc0:	sub	sp, sp, #8
   17fc4:	ldr	ip, [fp, #8]
   17fc8:	mov	lr, #0
   17fcc:	ldr	r4, [ip, lr, lsl #2]
   17fd0:	add	lr, lr, #1
   17fd4:	cmp	r4, #0
   17fd8:	bne	17fcc <__assert_fail@plt+0x68e8>
   17fdc:	sub	r4, lr, #1
   17fe0:	str	ip, [sp]
   17fe4:	str	r4, [sp, #4]
   17fe8:	bl	17c7c <__assert_fail@plt+0x6598>
   17fec:	sub	sp, fp, #8
   17ff0:	pop	{r4, sl, fp, pc}
   17ff4:	push	{fp, lr}
   17ff8:	mov	fp, sp
   17ffc:	sub	sp, sp, #48	; 0x30
   18000:	ldr	ip, [fp, #8]
   18004:	ldr	lr, [ip]
   18008:	cmp	lr, #0
   1800c:	str	lr, [sp, #8]
   18010:	beq	180ac <__assert_fail@plt+0x69c8>
   18014:	ldr	lr, [ip, #4]
   18018:	cmp	lr, #0
   1801c:	str	lr, [sp, #12]
   18020:	beq	180b4 <__assert_fail@plt+0x69d0>
   18024:	ldr	lr, [ip, #8]
   18028:	cmp	lr, #0
   1802c:	str	lr, [sp, #16]
   18030:	beq	180bc <__assert_fail@plt+0x69d8>
   18034:	ldr	lr, [ip, #12]
   18038:	cmp	lr, #0
   1803c:	str	lr, [sp, #20]
   18040:	beq	180c4 <__assert_fail@plt+0x69e0>
   18044:	ldr	lr, [ip, #16]
   18048:	cmp	lr, #0
   1804c:	str	lr, [sp, #24]
   18050:	beq	180cc <__assert_fail@plt+0x69e8>
   18054:	ldr	lr, [ip, #20]
   18058:	cmp	lr, #0
   1805c:	str	lr, [sp, #28]
   18060:	beq	180d4 <__assert_fail@plt+0x69f0>
   18064:	ldr	lr, [ip, #24]
   18068:	cmp	lr, #0
   1806c:	str	lr, [sp, #32]
   18070:	beq	180dc <__assert_fail@plt+0x69f8>
   18074:	ldr	lr, [ip, #28]
   18078:	cmp	lr, #0
   1807c:	str	lr, [sp, #36]	; 0x24
   18080:	beq	180e4 <__assert_fail@plt+0x6a00>
   18084:	ldr	lr, [ip, #32]
   18088:	cmp	lr, #0
   1808c:	str	lr, [sp, #40]	; 0x28
   18090:	beq	180ec <__assert_fail@plt+0x6a08>
   18094:	ldr	lr, [ip, #36]	; 0x24
   18098:	mov	ip, #10
   1809c:	cmp	lr, #0
   180a0:	str	lr, [sp, #44]	; 0x2c
   180a4:	movweq	ip, #9
   180a8:	b	180f0 <__assert_fail@plt+0x6a0c>
   180ac:	mov	ip, #0
   180b0:	b	180f0 <__assert_fail@plt+0x6a0c>
   180b4:	mov	ip, #1
   180b8:	b	180f0 <__assert_fail@plt+0x6a0c>
   180bc:	mov	ip, #2
   180c0:	b	180f0 <__assert_fail@plt+0x6a0c>
   180c4:	mov	ip, #3
   180c8:	b	180f0 <__assert_fail@plt+0x6a0c>
   180cc:	mov	ip, #4
   180d0:	b	180f0 <__assert_fail@plt+0x6a0c>
   180d4:	mov	ip, #5
   180d8:	b	180f0 <__assert_fail@plt+0x6a0c>
   180dc:	mov	ip, #6
   180e0:	b	180f0 <__assert_fail@plt+0x6a0c>
   180e4:	mov	ip, #7
   180e8:	b	180f0 <__assert_fail@plt+0x6a0c>
   180ec:	mov	ip, #8
   180f0:	add	lr, sp, #8
   180f4:	str	ip, [sp, #4]
   180f8:	str	lr, [sp]
   180fc:	bl	17c7c <__assert_fail@plt+0x6598>
   18100:	mov	sp, fp
   18104:	pop	{fp, pc}
   18108:	push	{fp, lr}
   1810c:	mov	fp, sp
   18110:	sub	sp, sp, #56	; 0x38
   18114:	add	ip, fp, #8
   18118:	str	ip, [sp, #12]
   1811c:	ldr	lr, [fp, #8]
   18120:	cmp	lr, #0
   18124:	str	lr, [sp, #16]
   18128:	beq	181c4 <__assert_fail@plt+0x6ae0>
   1812c:	ldr	lr, [ip, #4]
   18130:	cmp	lr, #0
   18134:	str	lr, [sp, #20]
   18138:	beq	181cc <__assert_fail@plt+0x6ae8>
   1813c:	ldr	lr, [ip, #8]
   18140:	cmp	lr, #0
   18144:	str	lr, [sp, #24]
   18148:	beq	181d4 <__assert_fail@plt+0x6af0>
   1814c:	ldr	lr, [ip, #12]
   18150:	cmp	lr, #0
   18154:	str	lr, [sp, #28]
   18158:	beq	181dc <__assert_fail@plt+0x6af8>
   1815c:	ldr	lr, [ip, #16]
   18160:	cmp	lr, #0
   18164:	str	lr, [sp, #32]
   18168:	beq	181e4 <__assert_fail@plt+0x6b00>
   1816c:	ldr	lr, [ip, #20]
   18170:	cmp	lr, #0
   18174:	str	lr, [sp, #36]	; 0x24
   18178:	beq	181ec <__assert_fail@plt+0x6b08>
   1817c:	ldr	lr, [ip, #24]
   18180:	cmp	lr, #0
   18184:	str	lr, [sp, #40]	; 0x28
   18188:	beq	181f4 <__assert_fail@plt+0x6b10>
   1818c:	ldr	lr, [ip, #28]
   18190:	cmp	lr, #0
   18194:	str	lr, [sp, #44]	; 0x2c
   18198:	beq	181fc <__assert_fail@plt+0x6b18>
   1819c:	ldr	lr, [ip, #32]
   181a0:	cmp	lr, #0
   181a4:	str	lr, [sp, #48]	; 0x30
   181a8:	beq	18204 <__assert_fail@plt+0x6b20>
   181ac:	ldr	lr, [ip, #36]	; 0x24
   181b0:	mov	ip, #10
   181b4:	cmp	lr, #0
   181b8:	str	lr, [sp, #52]	; 0x34
   181bc:	movweq	ip, #9
   181c0:	b	18208 <__assert_fail@plt+0x6b24>
   181c4:	mov	ip, #0
   181c8:	b	18208 <__assert_fail@plt+0x6b24>
   181cc:	mov	ip, #1
   181d0:	b	18208 <__assert_fail@plt+0x6b24>
   181d4:	mov	ip, #2
   181d8:	b	18208 <__assert_fail@plt+0x6b24>
   181dc:	mov	ip, #3
   181e0:	b	18208 <__assert_fail@plt+0x6b24>
   181e4:	mov	ip, #4
   181e8:	b	18208 <__assert_fail@plt+0x6b24>
   181ec:	mov	ip, #5
   181f0:	b	18208 <__assert_fail@plt+0x6b24>
   181f4:	mov	ip, #6
   181f8:	b	18208 <__assert_fail@plt+0x6b24>
   181fc:	mov	ip, #7
   18200:	b	18208 <__assert_fail@plt+0x6b24>
   18204:	mov	ip, #8
   18208:	add	lr, sp, #16
   1820c:	str	ip, [sp, #4]
   18210:	str	lr, [sp]
   18214:	bl	17c7c <__assert_fail@plt+0x6598>
   18218:	mov	sp, fp
   1821c:	pop	{fp, pc}
   18220:	push	{fp, lr}
   18224:	mov	fp, sp
   18228:	movw	r0, #49588	; 0xc1b4
   1822c:	movt	r0, #2
   18230:	ldr	r1, [r0]
   18234:	movw	r0, #43206	; 0xa8c6
   18238:	movt	r0, #1
   1823c:	bl	1136c <fputs_unlocked@plt>
   18240:	movw	r1, #46381	; 0xb52d
   18244:	mov	r0, #0
   18248:	mov	r2, #5
   1824c:	movt	r1, #1
   18250:	bl	11414 <dcgettext@plt>
   18254:	movw	r2, #46401	; 0xb541
   18258:	mov	r1, r0
   1825c:	mov	r0, #1
   18260:	movt	r2, #1
   18264:	bl	115a0 <__printf_chk@plt>
   18268:	movw	r1, #46423	; 0xb557
   1826c:	mov	r0, #0
   18270:	mov	r2, #5
   18274:	movt	r1, #1
   18278:	bl	11414 <dcgettext@plt>
   1827c:	movw	r2, #43636	; 0xaa74
   18280:	movw	r3, #43886	; 0xab6e
   18284:	mov	r1, r0
   18288:	mov	r0, #1
   1828c:	movt	r2, #1
   18290:	movt	r3, #1
   18294:	bl	115a0 <__printf_chk@plt>
   18298:	movw	r1, #46443	; 0xb56b
   1829c:	mov	r0, #0
   182a0:	mov	r2, #5
   182a4:	movt	r1, #1
   182a8:	bl	11414 <dcgettext@plt>
   182ac:	movw	r2, #46482	; 0xb592
   182b0:	mov	r1, r0
   182b4:	mov	r0, #1
   182b8:	movt	r2, #1
   182bc:	pop	{fp, lr}
   182c0:	b	115a0 <__printf_chk@plt>
   182c4:	push	{fp, lr}
   182c8:	mov	fp, sp
   182cc:	bl	11684 <aligned_alloc@plt>
   182d0:	cmp	r0, #0
   182d4:	popne	{fp, pc}
   182d8:	bl	188b4 <__assert_fail@plt+0x71d0>
   182dc:	push	{r4, r5, r6, sl, fp, lr}
   182e0:	add	fp, sp, #16
   182e4:	mov	r4, r2
   182e8:	mov	r5, r1
   182ec:	mov	r6, r0
   182f0:	bl	19af8 <__assert_fail@plt+0x8414>
   182f4:	cmp	r0, #0
   182f8:	popne	{r4, r5, r6, sl, fp, pc}
   182fc:	cmp	r6, #0
   18300:	beq	18314 <__assert_fail@plt+0x6c30>
   18304:	cmp	r5, #0
   18308:	cmpne	r4, #0
   1830c:	bne	18314 <__assert_fail@plt+0x6c30>
   18310:	pop	{r4, r5, r6, sl, fp, pc}
   18314:	bl	188b4 <__assert_fail@plt+0x71d0>
   18318:	push	{r4, r5, r6, sl, fp, lr}
   1831c:	add	fp, sp, #16
   18320:	mov	r4, r2
   18324:	mov	r5, r1
   18328:	mov	r6, r0
   1832c:	bl	19af8 <__assert_fail@plt+0x8414>
   18330:	cmp	r0, #0
   18334:	popne	{r4, r5, r6, sl, fp, pc}
   18338:	cmp	r6, #0
   1833c:	beq	18350 <__assert_fail@plt+0x6c6c>
   18340:	cmp	r5, #0
   18344:	cmpne	r4, #0
   18348:	bne	18350 <__assert_fail@plt+0x6c6c>
   1834c:	pop	{r4, r5, r6, sl, fp, pc}
   18350:	bl	188b4 <__assert_fail@plt+0x71d0>
   18354:	push	{fp, lr}
   18358:	mov	fp, sp
   1835c:	bl	196fc <__assert_fail@plt+0x8018>
   18360:	cmp	r0, #0
   18364:	popne	{fp, pc}
   18368:	bl	188b4 <__assert_fail@plt+0x71d0>
   1836c:	push	{fp, lr}
   18370:	mov	fp, sp
   18374:	bl	196fc <__assert_fail@plt+0x8018>
   18378:	cmp	r0, #0
   1837c:	popne	{fp, pc}
   18380:	bl	188b4 <__assert_fail@plt+0x71d0>
   18384:	push	{fp, lr}
   18388:	mov	fp, sp
   1838c:	bl	196fc <__assert_fail@plt+0x8018>
   18390:	cmp	r0, #0
   18394:	popne	{fp, pc}
   18398:	bl	188b4 <__assert_fail@plt+0x71d0>
   1839c:	push	{r4, r5, fp, lr}
   183a0:	add	fp, sp, #8
   183a4:	mov	r4, r1
   183a8:	mov	r5, r0
   183ac:	bl	1972c <__assert_fail@plt+0x8048>
   183b0:	cmp	r0, #0
   183b4:	popne	{r4, r5, fp, pc}
   183b8:	cmp	r5, #0
   183bc:	beq	183cc <__assert_fail@plt+0x6ce8>
   183c0:	cmp	r4, #0
   183c4:	bne	183cc <__assert_fail@plt+0x6ce8>
   183c8:	pop	{r4, r5, fp, pc}
   183cc:	bl	188b4 <__assert_fail@plt+0x71d0>
   183d0:	push	{fp, lr}
   183d4:	mov	fp, sp
   183d8:	cmp	r1, #0
   183dc:	orreq	r1, r1, #1
   183e0:	bl	1972c <__assert_fail@plt+0x8048>
   183e4:	cmp	r0, #0
   183e8:	popne	{fp, pc}
   183ec:	bl	188b4 <__assert_fail@plt+0x71d0>
   183f0:	push	{fp, lr}
   183f4:	mov	fp, sp
   183f8:	clz	r3, r2
   183fc:	lsr	ip, r3, #5
   18400:	clz	r3, r1
   18404:	lsr	r3, r3, #5
   18408:	orrs	r3, r3, ip
   1840c:	movwne	r1, #1
   18410:	movwne	r2, #1
   18414:	bl	19af8 <__assert_fail@plt+0x8414>
   18418:	cmp	r0, #0
   1841c:	popne	{fp, pc}
   18420:	bl	188b4 <__assert_fail@plt+0x71d0>
   18424:	push	{fp, lr}
   18428:	mov	fp, sp
   1842c:	mov	r2, r1
   18430:	mov	r1, r0
   18434:	mov	r0, #0
   18438:	bl	19af8 <__assert_fail@plt+0x8414>
   1843c:	cmp	r0, #0
   18440:	popne	{fp, pc}
   18444:	bl	188b4 <__assert_fail@plt+0x71d0>
   18448:	push	{fp, lr}
   1844c:	mov	fp, sp
   18450:	mov	r2, r1
   18454:	mov	r1, r0
   18458:	clz	r0, r2
   1845c:	clz	r3, r1
   18460:	lsr	r0, r0, #5
   18464:	lsr	r3, r3, #5
   18468:	orrs	r0, r3, r0
   1846c:	movwne	r1, #1
   18470:	movwne	r2, #1
   18474:	mov	r0, #0
   18478:	bl	19af8 <__assert_fail@plt+0x8414>
   1847c:	cmp	r0, #0
   18480:	popne	{fp, pc}
   18484:	bl	188b4 <__assert_fail@plt+0x71d0>
   18488:	push	{r4, r5, r6, sl, fp, lr}
   1848c:	add	fp, sp, #16
   18490:	ldr	r5, [r1]
   18494:	mov	r4, r1
   18498:	mov	r6, r0
   1849c:	cmp	r0, #0
   184a0:	beq	184b8 <__assert_fail@plt+0x6dd4>
   184a4:	mov	r0, #1
   184a8:	add	r0, r0, r5, lsr #1
   184ac:	adds	r5, r5, r0
   184b0:	bcc	184c0 <__assert_fail@plt+0x6ddc>
   184b4:	b	184fc <__assert_fail@plt+0x6e18>
   184b8:	cmp	r5, #0
   184bc:	movweq	r5, #64	; 0x40
   184c0:	mov	r0, r6
   184c4:	mov	r1, r5
   184c8:	mov	r2, #1
   184cc:	bl	19af8 <__assert_fail@plt+0x8414>
   184d0:	cmp	r5, #0
   184d4:	mov	r1, r5
   184d8:	movwne	r1, #1
   184dc:	cmp	r0, #0
   184e0:	bne	184f4 <__assert_fail@plt+0x6e10>
   184e4:	clz	r2, r6
   184e8:	lsr	r2, r2, #5
   184ec:	orrs	r1, r2, r1
   184f0:	bne	184fc <__assert_fail@plt+0x6e18>
   184f4:	str	r5, [r4]
   184f8:	pop	{r4, r5, r6, sl, fp, pc}
   184fc:	bl	188b4 <__assert_fail@plt+0x71d0>
   18500:	push	{r4, r5, r6, r7, fp, lr}
   18504:	add	fp, sp, #16
   18508:	ldr	r5, [r1]
   1850c:	mov	r6, r2
   18510:	mov	r4, r1
   18514:	mov	r7, r0
   18518:	cmp	r0, #0
   1851c:	beq	18534 <__assert_fail@plt+0x6e50>
   18520:	mov	r0, #1
   18524:	add	r0, r0, r5, lsr #1
   18528:	adds	r5, r5, r0
   1852c:	bcc	1854c <__assert_fail@plt+0x6e68>
   18530:	b	18580 <__assert_fail@plt+0x6e9c>
   18534:	cmp	r5, #0
   18538:	bne	1854c <__assert_fail@plt+0x6e68>
   1853c:	mov	r0, #64	; 0x40
   18540:	cmp	r6, #64	; 0x40
   18544:	udiv	r5, r0, r6
   18548:	addhi	r5, r5, #1
   1854c:	mov	r0, r7
   18550:	mov	r1, r5
   18554:	mov	r2, r6
   18558:	bl	19af8 <__assert_fail@plt+0x8414>
   1855c:	cmp	r0, #0
   18560:	bne	18578 <__assert_fail@plt+0x6e94>
   18564:	cmp	r7, #0
   18568:	beq	18580 <__assert_fail@plt+0x6e9c>
   1856c:	cmp	r6, #0
   18570:	cmpne	r5, #0
   18574:	bne	18580 <__assert_fail@plt+0x6e9c>
   18578:	str	r5, [r4]
   1857c:	pop	{r4, r5, r6, r7, fp, pc}
   18580:	bl	188b4 <__assert_fail@plt+0x71d0>
   18584:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18588:	add	fp, sp, #24
   1858c:	mov	r8, r1
   18590:	ldr	r1, [r1]
   18594:	mov	r5, r0
   18598:	add	r0, r1, r1, asr #1
   1859c:	cmp	r0, r1
   185a0:	mvnvs	r0, #-2147483648	; 0x80000000
   185a4:	cmp	r0, r3
   185a8:	mov	r7, r0
   185ac:	movgt	r7, r3
   185b0:	cmn	r3, #1
   185b4:	movle	r7, r0
   185b8:	ldr	r0, [fp, #8]
   185bc:	cmn	r0, #1
   185c0:	ble	185e8 <__assert_fail@plt+0x6f04>
   185c4:	cmp	r0, #0
   185c8:	beq	1863c <__assert_fail@plt+0x6f58>
   185cc:	cmn	r7, #1
   185d0:	ble	18610 <__assert_fail@plt+0x6f2c>
   185d4:	mvn	r4, #-2147483648	; 0x80000000
   185d8:	udiv	r6, r4, r0
   185dc:	cmp	r6, r7
   185e0:	bge	1863c <__assert_fail@plt+0x6f58>
   185e4:	b	1864c <__assert_fail@plt+0x6f68>
   185e8:	cmn	r7, #1
   185ec:	ble	1862c <__assert_fail@plt+0x6f48>
   185f0:	cmn	r0, #1
   185f4:	beq	1863c <__assert_fail@plt+0x6f58>
   185f8:	mov	r6, #-2147483648	; 0x80000000
   185fc:	mvn	r4, #-2147483648	; 0x80000000
   18600:	sdiv	r6, r6, r0
   18604:	cmp	r6, r7
   18608:	bge	1863c <__assert_fail@plt+0x6f58>
   1860c:	b	1864c <__assert_fail@plt+0x6f68>
   18610:	beq	1863c <__assert_fail@plt+0x6f58>
   18614:	mov	r6, #-2147483648	; 0x80000000
   18618:	mvn	r4, #-2147483648	; 0x80000000
   1861c:	sdiv	r6, r6, r7
   18620:	cmp	r6, r0
   18624:	bge	1863c <__assert_fail@plt+0x6f58>
   18628:	b	1864c <__assert_fail@plt+0x6f68>
   1862c:	mvn	r4, #-2147483648	; 0x80000000
   18630:	sdiv	r6, r4, r0
   18634:	cmp	r7, r6
   18638:	blt	1864c <__assert_fail@plt+0x6f68>
   1863c:	mul	r6, r7, r0
   18640:	mov	r4, #64	; 0x40
   18644:	cmp	r6, #63	; 0x3f
   18648:	bgt	18654 <__assert_fail@plt+0x6f70>
   1864c:	sdiv	r7, r4, r0
   18650:	mul	r6, r7, r0
   18654:	cmp	r5, #0
   18658:	moveq	r4, #0
   1865c:	streq	r4, [r8]
   18660:	sub	r4, r7, r1
   18664:	cmp	r4, r2
   18668:	bge	18714 <__assert_fail@plt+0x7030>
   1866c:	add	r7, r1, r2
   18670:	mov	r6, #0
   18674:	mov	r2, #0
   18678:	cmp	r7, r3
   1867c:	movwgt	r6, #1
   18680:	cmn	r3, #1
   18684:	movwgt	r2, #1
   18688:	cmp	r7, r1
   1868c:	bvs	18748 <__assert_fail@plt+0x7064>
   18690:	ands	r1, r2, r6
   18694:	bne	18748 <__assert_fail@plt+0x7064>
   18698:	cmn	r0, #1
   1869c:	ble	186c4 <__assert_fail@plt+0x6fe0>
   186a0:	cmp	r0, #0
   186a4:	beq	18710 <__assert_fail@plt+0x702c>
   186a8:	cmn	r7, #1
   186ac:	ble	186e8 <__assert_fail@plt+0x7004>
   186b0:	mvn	r1, #-2147483648	; 0x80000000
   186b4:	udiv	r1, r1, r0
   186b8:	cmp	r1, r7
   186bc:	bge	18710 <__assert_fail@plt+0x702c>
   186c0:	b	18748 <__assert_fail@plt+0x7064>
   186c4:	cmn	r7, #1
   186c8:	ble	18700 <__assert_fail@plt+0x701c>
   186cc:	cmn	r0, #1
   186d0:	beq	18710 <__assert_fail@plt+0x702c>
   186d4:	mov	r1, #-2147483648	; 0x80000000
   186d8:	sdiv	r1, r1, r0
   186dc:	cmp	r1, r7
   186e0:	bge	18710 <__assert_fail@plt+0x702c>
   186e4:	b	18748 <__assert_fail@plt+0x7064>
   186e8:	beq	18710 <__assert_fail@plt+0x702c>
   186ec:	mov	r1, #-2147483648	; 0x80000000
   186f0:	sdiv	r1, r1, r7
   186f4:	cmp	r1, r0
   186f8:	bge	18710 <__assert_fail@plt+0x702c>
   186fc:	b	18748 <__assert_fail@plt+0x7064>
   18700:	mvn	r1, #-2147483648	; 0x80000000
   18704:	sdiv	r1, r1, r0
   18708:	cmp	r7, r1
   1870c:	blt	18748 <__assert_fail@plt+0x7064>
   18710:	mul	r6, r7, r0
   18714:	mov	r0, r5
   18718:	mov	r1, r6
   1871c:	bl	1972c <__assert_fail@plt+0x8048>
   18720:	cmp	r6, #0
   18724:	movwne	r6, #1
   18728:	cmp	r0, #0
   1872c:	bne	18740 <__assert_fail@plt+0x705c>
   18730:	clz	r1, r5
   18734:	lsr	r1, r1, #5
   18738:	orrs	r1, r1, r6
   1873c:	bne	18748 <__assert_fail@plt+0x7064>
   18740:	str	r7, [r8]
   18744:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18748:	bl	188b4 <__assert_fail@plt+0x71d0>
   1874c:	push	{fp, lr}
   18750:	mov	fp, sp
   18754:	mov	r1, #1
   18758:	bl	196a8 <__assert_fail@plt+0x7fc4>
   1875c:	cmp	r0, #0
   18760:	popne	{fp, pc}
   18764:	bl	188b4 <__assert_fail@plt+0x71d0>
   18768:	push	{fp, lr}
   1876c:	mov	fp, sp
   18770:	bl	196a8 <__assert_fail@plt+0x7fc4>
   18774:	cmp	r0, #0
   18778:	popne	{fp, pc}
   1877c:	bl	188b4 <__assert_fail@plt+0x71d0>
   18780:	push	{fp, lr}
   18784:	mov	fp, sp
   18788:	mov	r1, #1
   1878c:	bl	196a8 <__assert_fail@plt+0x7fc4>
   18790:	cmp	r0, #0
   18794:	popne	{fp, pc}
   18798:	bl	188b4 <__assert_fail@plt+0x71d0>
   1879c:	push	{fp, lr}
   187a0:	mov	fp, sp
   187a4:	bl	196a8 <__assert_fail@plt+0x7fc4>
   187a8:	cmp	r0, #0
   187ac:	popne	{fp, pc}
   187b0:	bl	188b4 <__assert_fail@plt+0x71d0>
   187b4:	push	{r4, r5, r6, sl, fp, lr}
   187b8:	add	fp, sp, #16
   187bc:	mov	r5, r0
   187c0:	mov	r0, r1
   187c4:	mov	r4, r1
   187c8:	bl	196fc <__assert_fail@plt+0x8018>
   187cc:	cmp	r0, #0
   187d0:	beq	187ec <__assert_fail@plt+0x7108>
   187d4:	mov	r1, r5
   187d8:	mov	r2, r4
   187dc:	mov	r6, r0
   187e0:	bl	113cc <memcpy@plt>
   187e4:	mov	r0, r6
   187e8:	pop	{r4, r5, r6, sl, fp, pc}
   187ec:	bl	188b4 <__assert_fail@plt+0x71d0>
   187f0:	push	{r4, r5, r6, sl, fp, lr}
   187f4:	add	fp, sp, #16
   187f8:	mov	r5, r0
   187fc:	mov	r0, r1
   18800:	mov	r4, r1
   18804:	bl	196fc <__assert_fail@plt+0x8018>
   18808:	cmp	r0, #0
   1880c:	beq	18828 <__assert_fail@plt+0x7144>
   18810:	mov	r1, r5
   18814:	mov	r2, r4
   18818:	mov	r6, r0
   1881c:	bl	113cc <memcpy@plt>
   18820:	mov	r0, r6
   18824:	pop	{r4, r5, r6, sl, fp, pc}
   18828:	bl	188b4 <__assert_fail@plt+0x71d0>
   1882c:	push	{r4, r5, r6, sl, fp, lr}
   18830:	add	fp, sp, #16
   18834:	mov	r5, r0
   18838:	add	r0, r1, #1
   1883c:	mov	r4, r1
   18840:	bl	196fc <__assert_fail@plt+0x8018>
   18844:	cmp	r0, #0
   18848:	beq	18870 <__assert_fail@plt+0x718c>
   1884c:	mov	r6, r0
   18850:	mov	r0, #0
   18854:	mov	r1, r5
   18858:	mov	r2, r4
   1885c:	strb	r0, [r6, r4]
   18860:	mov	r0, r6
   18864:	bl	113cc <memcpy@plt>
   18868:	mov	r0, r6
   1886c:	pop	{r4, r5, r6, sl, fp, pc}
   18870:	bl	188b4 <__assert_fail@plt+0x71d0>
   18874:	push	{r4, r5, r6, sl, fp, lr}
   18878:	add	fp, sp, #16
   1887c:	mov	r4, r0
   18880:	bl	11534 <strlen@plt>
   18884:	add	r5, r0, #1
   18888:	mov	r0, r5
   1888c:	bl	196fc <__assert_fail@plt+0x8018>
   18890:	cmp	r0, #0
   18894:	beq	188b0 <__assert_fail@plt+0x71cc>
   18898:	mov	r1, r4
   1889c:	mov	r2, r5
   188a0:	mov	r6, r0
   188a4:	bl	113cc <memcpy@plt>
   188a8:	mov	r0, r6
   188ac:	pop	{r4, r5, r6, sl, fp, pc}
   188b0:	bl	188b4 <__assert_fail@plt+0x71d0>
   188b4:	push	{fp, lr}
   188b8:	mov	fp, sp
   188bc:	movw	r0, #49496	; 0xc158
   188c0:	movw	r1, #46558	; 0xb5de
   188c4:	mov	r2, #5
   188c8:	movt	r0, #2
   188cc:	movt	r1, #1
   188d0:	ldr	r4, [r0]
   188d4:	mov	r0, #0
   188d8:	bl	11414 <dcgettext@plt>
   188dc:	movw	r2, #45347	; 0xb123
   188e0:	mov	r3, r0
   188e4:	mov	r0, r4
   188e8:	mov	r1, #0
   188ec:	movt	r2, #1
   188f0:	bl	114bc <error@plt>
   188f4:	bl	116cc <abort@plt>
   188f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   188fc:	add	fp, sp, #24
   18900:	sub	sp, sp, #16
   18904:	mov	r8, r0
   18908:	ldr	r0, [fp, #16]
   1890c:	mov	r5, r3
   18910:	mov	r6, r2
   18914:	mov	r2, r1
   18918:	add	r3, sp, #8
   1891c:	mov	r1, #0
   18920:	str	r0, [sp]
   18924:	mov	r0, r8
   18928:	bl	189f4 <__assert_fail@plt+0x7310>
   1892c:	cmp	r0, #0
   18930:	bne	189bc <__assert_fail@plt+0x72d8>
   18934:	ldr	r4, [sp, #8]
   18938:	ldr	r7, [sp, #12]
   1893c:	subs	r0, r4, r6
   18940:	sbcs	r0, r7, r5
   18944:	bcc	18968 <__assert_fail@plt+0x7284>
   18948:	ldr	r1, [fp, #8]
   1894c:	ldr	r0, [fp, #12]
   18950:	subs	r1, r1, r4
   18954:	sbcs	r0, r0, r7
   18958:	movcs	r0, r4
   1895c:	movcs	r1, r7
   18960:	subcs	sp, fp, #24
   18964:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   18968:	bl	11558 <__errno_location@plt>
   1896c:	subs	r1, r4, #1073741824	; 0x40000000
   18970:	sbcs	r1, r7, #0
   18974:	movcc	r1, #34	; 0x22
   18978:	movcs	r1, #75	; 0x4b
   1897c:	str	r1, [r0]
   18980:	ldr	r6, [r0]
   18984:	ldr	r4, [fp, #24]
   18988:	ldr	r5, [fp, #20]
   1898c:	mov	r0, r8
   18990:	bl	16f20 <__assert_fail@plt+0x583c>
   18994:	subs	r1, r6, #22
   18998:	movw	r2, #45362	; 0xb132
   1899c:	str	r0, [sp]
   189a0:	mov	r3, r5
   189a4:	movne	r1, r6
   189a8:	cmp	r4, #0
   189ac:	movt	r2, #1
   189b0:	movweq	r4, #1
   189b4:	mov	r0, r4
   189b8:	bl	114bc <error@plt>
   189bc:	cmp	r0, #1
   189c0:	beq	189d8 <__assert_fail@plt+0x72f4>
   189c4:	cmp	r0, #3
   189c8:	bne	189e4 <__assert_fail@plt+0x7300>
   189cc:	bl	11558 <__errno_location@plt>
   189d0:	mov	r1, #0
   189d4:	b	1897c <__assert_fail@plt+0x7298>
   189d8:	bl	11558 <__errno_location@plt>
   189dc:	mov	r1, #75	; 0x4b
   189e0:	b	1897c <__assert_fail@plt+0x7298>
   189e4:	bl	11558 <__errno_location@plt>
   189e8:	b	18980 <__assert_fail@plt+0x729c>
   189ec:	mov	r1, #10
   189f0:	b	188f8 <__assert_fail@plt+0x7214>
   189f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189f8:	add	fp, sp, #28
   189fc:	sub	sp, sp, #44	; 0x2c
   18a00:	cmp	r2, #37	; 0x25
   18a04:	bcs	19688 <__assert_fail@plt+0x7fa4>
   18a08:	ldr	sl, [fp, #8]
   18a0c:	mov	r6, r2
   18a10:	mov	r7, r1
   18a14:	mov	r4, r0
   18a18:	str	r3, [sp, #36]	; 0x24
   18a1c:	bl	11558 <__errno_location@plt>
   18a20:	mov	r5, r0
   18a24:	mov	r0, #0
   18a28:	str	r0, [r5]
   18a2c:	bl	1151c <__ctype_b_loc@plt>
   18a30:	ldr	r1, [r0]
   18a34:	mov	r2, r4
   18a38:	ldrb	r0, [r2], #1
   18a3c:	add	r3, r1, r0, lsl #1
   18a40:	ldrb	r3, [r3, #1]
   18a44:	tst	r3, #32
   18a48:	bne	18a38 <__assert_fail@plt+0x7354>
   18a4c:	sub	r9, fp, #32
   18a50:	cmp	r7, #0
   18a54:	mov	r8, #4
   18a58:	movne	r9, r7
   18a5c:	cmp	r0, #45	; 0x2d
   18a60:	beq	18e20 <__assert_fail@plt+0x773c>
   18a64:	mov	r0, r4
   18a68:	mov	r1, r9
   18a6c:	mov	r2, r6
   18a70:	mov	r3, #0
   18a74:	bl	113d8 <__strtoull_internal@plt>
   18a78:	mov	r7, r1
   18a7c:	ldr	r1, [r9]
   18a80:	cmp	r1, r4
   18a84:	beq	18abc <__assert_fail@plt+0x73d8>
   18a88:	mov	r6, r0
   18a8c:	ldr	r0, [r5]
   18a90:	cmp	r0, #0
   18a94:	beq	18dd8 <__assert_fail@plt+0x76f4>
   18a98:	cmp	r0, #34	; 0x22
   18a9c:	bne	18e20 <__assert_fail@plt+0x773c>
   18aa0:	mov	r8, #1
   18aa4:	cmp	sl, #0
   18aa8:	beq	19674 <__assert_fail@plt+0x7f90>
   18aac:	ldrb	r4, [r1]
   18ab0:	cmp	r4, #0
   18ab4:	bne	18b00 <__assert_fail@plt+0x741c>
   18ab8:	b	19674 <__assert_fail@plt+0x7f90>
   18abc:	cmp	sl, #0
   18ac0:	beq	18e20 <__assert_fail@plt+0x773c>
   18ac4:	mov	r5, r1
   18ac8:	ldrb	r1, [r4]
   18acc:	cmp	r1, #0
   18ad0:	beq	18e20 <__assert_fail@plt+0x773c>
   18ad4:	mov	r0, sl
   18ad8:	bl	11540 <strchr@plt>
   18adc:	cmp	r0, #0
   18ae0:	beq	18e20 <__assert_fail@plt+0x773c>
   18ae4:	mov	r1, r5
   18ae8:	mov	r8, #0
   18aec:	mov	r6, #1
   18af0:	mov	r7, #0
   18af4:	ldrb	r4, [r1]
   18af8:	cmp	r4, #0
   18afc:	beq	19674 <__assert_fail@plt+0x7f90>
   18b00:	str	r1, [sp, #32]
   18b04:	mov	r0, sl
   18b08:	mov	r1, r4
   18b0c:	bl	11540 <strchr@plt>
   18b10:	cmp	r0, #0
   18b14:	beq	18e14 <__assert_fail@plt+0x7730>
   18b18:	sub	r0, r4, #69	; 0x45
   18b1c:	mov	r1, #1
   18b20:	mov	r3, #0
   18b24:	mov	r5, #1024	; 0x400
   18b28:	cmp	r0, #47	; 0x2f
   18b2c:	str	r1, [sp, #28]
   18b30:	bhi	18c34 <__assert_fail@plt+0x7550>
   18b34:	add	r1, pc, #0
   18b38:	ldr	pc, [r1, r0, lsl #2]
   18b3c:	strdeq	r8, [r1], -ip
   18b40:	andeq	r8, r1, r4, lsr ip
   18b44:	strdeq	r8, [r1], -ip
   18b48:	andeq	r8, r1, r4, lsr ip
   18b4c:	andeq	r8, r1, r4, lsr ip
   18b50:	andeq	r8, r1, r4, lsr ip
   18b54:	strdeq	r8, [r1], -ip
   18b58:	andeq	r8, r1, r4, lsr ip
   18b5c:	strdeq	r8, [r1], -ip
   18b60:	andeq	r8, r1, r4, lsr ip
   18b64:	andeq	r8, r1, r4, lsr ip
   18b68:	strdeq	r8, [r1], -ip
   18b6c:	andeq	r8, r1, r4, lsr ip
   18b70:	andeq	r8, r1, r4, lsr ip
   18b74:	andeq	r8, r1, r4, lsr ip
   18b78:	strdeq	r8, [r1], -ip
   18b7c:	andeq	r8, r1, r4, lsr ip
   18b80:	andeq	r8, r1, r4, lsr ip
   18b84:	andeq	r8, r1, r4, lsr ip
   18b88:	andeq	r8, r1, r4, lsr ip
   18b8c:	strdeq	r8, [r1], -ip
   18b90:	strdeq	r8, [r1], -ip
   18b94:	andeq	r8, r1, r4, lsr ip
   18b98:	andeq	r8, r1, r4, lsr ip
   18b9c:	andeq	r8, r1, r4, lsr ip
   18ba0:	andeq	r8, r1, r4, lsr ip
   18ba4:	andeq	r8, r1, r4, lsr ip
   18ba8:	andeq	r8, r1, r4, lsr ip
   18bac:	andeq	r8, r1, r4, lsr ip
   18bb0:	andeq	r8, r1, r4, lsr ip
   18bb4:	andeq	r8, r1, r4, lsr ip
   18bb8:	andeq	r8, r1, r4, lsr ip
   18bbc:	andeq	r8, r1, r4, lsr ip
   18bc0:	andeq	r8, r1, r4, lsr ip
   18bc4:	strdeq	r8, [r1], -ip
   18bc8:	andeq	r8, r1, r4, lsr ip
   18bcc:	andeq	r8, r1, r4, lsr ip
   18bd0:	andeq	r8, r1, r4, lsr ip
   18bd4:	strdeq	r8, [r1], -ip
   18bd8:	andeq	r8, r1, r4, lsr ip
   18bdc:	strdeq	r8, [r1], -ip
   18be0:	andeq	r8, r1, r4, lsr ip
   18be4:	andeq	r8, r1, r4, lsr ip
   18be8:	andeq	r8, r1, r4, lsr ip
   18bec:	andeq	r8, r1, r4, lsr ip
   18bf0:	andeq	r8, r1, r4, lsr ip
   18bf4:	andeq	r8, r1, r4, lsr ip
   18bf8:	strdeq	r8, [r1], -ip
   18bfc:	mov	r0, sl
   18c00:	mov	r1, #48	; 0x30
   18c04:	bl	11540 <strchr@plt>
   18c08:	cmp	r0, #0
   18c0c:	beq	18c30 <__assert_fail@plt+0x754c>
   18c10:	ldr	r1, [sp, #32]
   18c14:	ldrb	r0, [r1, #1]
   18c18:	cmp	r0, #66	; 0x42
   18c1c:	cmpne	r0, #68	; 0x44
   18c20:	bne	18de8 <__assert_fail@plt+0x7704>
   18c24:	mov	r5, #1000	; 0x3e8
   18c28:	mov	r0, #2
   18c2c:	str	r0, [sp, #28]
   18c30:	mov	r3, #0
   18c34:	sub	r0, r4, #66	; 0x42
   18c38:	cmp	r0, #53	; 0x35
   18c3c:	bhi	18e14 <__assert_fail@plt+0x7730>
   18c40:	add	r1, pc, #0
   18c44:	ldr	pc, [r1, r0, lsl #2]
   18c48:	andeq	r9, r1, r4, lsl #3
   18c4c:	andeq	r8, r1, r4, lsl lr
   18c50:	andeq	r8, r1, r4, lsl lr
   18c54:	andeq	r9, r1, ip, lsr #3
   18c58:	andeq	r8, r1, r4, lsl lr
   18c5c:	andeq	r8, r1, r0, lsr #26
   18c60:	andeq	r8, r1, r4, lsl lr
   18c64:	andeq	r8, r1, r4, lsl lr
   18c68:	andeq	r8, r1, r4, lsl lr
   18c6c:	andeq	r8, r1, ip, lsr #28
   18c70:	andeq	r8, r1, r4, lsl lr
   18c74:	andeq	r8, r1, r4, ror lr
   18c78:	andeq	r8, r1, r4, lsl lr
   18c7c:	andeq	r8, r1, r4, lsl lr
   18c80:	andeq	r9, r1, r0, lsl #6
   18c84:	andeq	r8, r1, r4, lsl lr
   18c88:	andeq	r8, r1, r4, lsl lr
   18c8c:	andeq	r8, r1, r4, lsl lr
   18c90:	andeq	r8, r1, r0, lsl #30
   18c94:	andeq	r8, r1, r4, lsl lr
   18c98:	andeq	r8, r1, r4, lsl lr
   18c9c:	andeq	r8, r1, r4, lsl lr
   18ca0:	andeq	r8, r1, r4, lsl lr
   18ca4:	andeq	r9, r1, r8, lsr #8
   18ca8:	andeq	r8, r1, r8, ror #31
   18cac:	andeq	r8, r1, r4, lsl lr
   18cb0:	andeq	r8, r1, r4, lsl lr
   18cb4:	andeq	r8, r1, r4, lsl lr
   18cb8:	andeq	r8, r1, r4, lsl lr
   18cbc:	andeq	r8, r1, r4, lsl lr
   18cc0:	andeq	r8, r1, r4, lsl lr
   18cc4:	andeq	r8, r1, r4, lsl lr
   18cc8:	strdeq	r9, [r1], -ip
   18ccc:	andeq	r9, r1, r4, asr r6
   18cd0:	andeq	r8, r1, r4, lsl lr
   18cd4:	andeq	r8, r1, r4, lsl lr
   18cd8:	andeq	r8, r1, r4, lsl lr
   18cdc:	andeq	r8, r1, r0, lsr #26
   18ce0:	andeq	r8, r1, r4, lsl lr
   18ce4:	andeq	r8, r1, r4, lsl lr
   18ce8:	andeq	r8, r1, r4, lsl lr
   18cec:	andeq	r8, r1, ip, lsr #28
   18cf0:	andeq	r8, r1, r4, lsl lr
   18cf4:	andeq	r8, r1, r4, ror lr
   18cf8:	andeq	r8, r1, r4, lsl lr
   18cfc:	andeq	r8, r1, r4, lsl lr
   18d00:	andeq	r8, r1, r4, lsl lr
   18d04:	andeq	r8, r1, r4, lsl lr
   18d08:	andeq	r8, r1, r4, lsl lr
   18d0c:	andeq	r8, r1, r4, lsl lr
   18d10:	andeq	r8, r1, r0, lsl #30
   18d14:	andeq	r8, r1, r4, lsl lr
   18d18:	andeq	r8, r1, r4, lsl lr
   18d1c:	andeq	r9, r1, r0, lsr r6
   18d20:	mvn	r0, #0
   18d24:	mvn	r1, #0
   18d28:	mov	r2, r5
   18d2c:	mov	sl, r3
   18d30:	bl	1a0dc <__assert_fail@plt+0x89f8>
   18d34:	subs	r3, r0, r6
   18d38:	mov	lr, #0
   18d3c:	umull	r4, r2, r6, r5
   18d40:	str	r1, [sp, #20]
   18d44:	sbcs	r3, r1, r7
   18d48:	mla	ip, r6, sl, r2
   18d4c:	mov	r2, r1
   18d50:	movwcc	lr, #1
   18d54:	mla	r7, r7, r5, ip
   18d58:	mov	r2, #0
   18d5c:	cmp	lr, #0
   18d60:	mvnne	r4, #0
   18d64:	mvnne	r7, #0
   18d68:	subs	r6, r0, r4
   18d6c:	sbcs	r6, r1, r7
   18d70:	movwcc	r2, #1
   18d74:	umull	r3, r6, r4, r5
   18d78:	cmp	r2, #0
   18d7c:	str	r6, [sp, #16]
   18d80:	mvnne	r3, #0
   18d84:	cmp	r2, #0
   18d88:	umull	r6, ip, r3, r5
   18d8c:	mla	r1, r3, sl, ip
   18d90:	ldr	ip, [sp, #16]
   18d94:	str	r1, [sp, #12]
   18d98:	mla	r4, r4, sl, ip
   18d9c:	mla	r4, r7, r5, r4
   18da0:	ldr	r7, [sp, #12]
   18da4:	mvnne	r4, #0
   18da8:	subs	r0, r0, r3
   18dac:	ldr	r0, [sp, #20]
   18db0:	mla	r7, r4, r5, r7
   18db4:	sbcs	r0, r0, r4
   18db8:	mov	r0, #0
   18dbc:	movwcc	r0, #1
   18dc0:	cmp	r0, #0
   18dc4:	mov	r1, r0
   18dc8:	orr	r0, lr, r2
   18dcc:	mvnne	r7, #0
   18dd0:	mvnne	r6, #0
   18dd4:	b	19420 <__assert_fail@plt+0x7d3c>
   18dd8:	mov	r8, r0
   18ddc:	cmp	sl, #0
   18de0:	bne	18aac <__assert_fail@plt+0x73c8>
   18de4:	b	19674 <__assert_fail@plt+0x7f90>
   18de8:	cmp	r0, #105	; 0x69
   18dec:	mov	r3, #0
   18df0:	bne	18c34 <__assert_fail@plt+0x7550>
   18df4:	ldrb	r0, [r1, #2]
   18df8:	mov	r1, #1
   18dfc:	cmp	r0, #66	; 0x42
   18e00:	movweq	r1, #3
   18e04:	str	r1, [sp, #28]
   18e08:	sub	r0, r4, #66	; 0x42
   18e0c:	cmp	r0, #53	; 0x35
   18e10:	bls	18c40 <__assert_fail@plt+0x755c>
   18e14:	ldr	r0, [sp, #36]	; 0x24
   18e18:	orr	r8, r8, #2
   18e1c:	strd	r6, [r0]
   18e20:	mov	r0, r8
   18e24:	sub	sp, fp, #28
   18e28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e2c:	mvn	r0, #0
   18e30:	mvn	r1, #0
   18e34:	mov	r2, r5
   18e38:	mov	r4, r3
   18e3c:	bl	1a0dc <__assert_fail@plt+0x89f8>
   18e40:	subs	r0, r0, r6
   18e44:	mov	r2, #0
   18e48:	sbcs	r0, r1, r7
   18e4c:	movwcc	r2, #1
   18e50:	umull	r0, r1, r6, r5
   18e54:	mla	r1, r6, r4, r1
   18e58:	cmp	r2, #0
   18e5c:	mov	r3, r2
   18e60:	mla	r7, r7, r5, r1
   18e64:	mvnne	r0, #0
   18e68:	mvnne	r7, #0
   18e6c:	mov	r6, r0
   18e70:	b	19654 <__assert_fail@plt+0x7f70>
   18e74:	mvn	r0, #0
   18e78:	mvn	r1, #0
   18e7c:	mov	r2, r5
   18e80:	str	r3, [sp, #24]
   18e84:	bl	1a0dc <__assert_fail@plt+0x89f8>
   18e88:	subs	r3, r0, r6
   18e8c:	mov	ip, r0
   18e90:	umull	r4, r0, r6, r5
   18e94:	mov	sl, #0
   18e98:	sbcs	r3, r1, r7
   18e9c:	str	r0, [sp, #20]
   18ea0:	ldr	r0, [sp, #24]
   18ea4:	mov	r3, #0
   18ea8:	movwcc	r3, #1
   18eac:	cmp	r3, #0
   18eb0:	mvnne	r4, #0
   18eb4:	cmp	r3, #0
   18eb8:	umull	lr, r2, r4, r5
   18ebc:	mla	r2, r4, r0, r2
   18ec0:	str	r2, [sp, #16]
   18ec4:	ldr	r2, [sp, #20]
   18ec8:	mla	r6, r6, r0, r2
   18ecc:	ldr	r0, [sp, #16]
   18ed0:	mla	r6, r7, r5, r6
   18ed4:	mvnne	r6, #0
   18ed8:	mla	r7, r6, r5, r0
   18edc:	subs	r0, ip, r4
   18ee0:	sbcs	r0, r1, r6
   18ee4:	movwcc	sl, #1
   18ee8:	cmp	sl, #0
   18eec:	orr	r3, r3, sl
   18ef0:	mvnne	lr, #0
   18ef4:	mvnne	r7, #0
   18ef8:	mov	r6, lr
   18efc:	b	19654 <__assert_fail@plt+0x7f70>
   18f00:	mvn	r0, #0
   18f04:	mvn	r1, #0
   18f08:	mov	r2, r5
   18f0c:	mov	sl, r3
   18f10:	bl	1a0dc <__assert_fail@plt+0x89f8>
   18f14:	subs	r3, r0, r6
   18f18:	mov	ip, r1
   18f1c:	umull	r2, lr, r6, r5
   18f20:	str	r0, [sp, #20]
   18f24:	sbcs	r3, r1, r7
   18f28:	mov	r1, #0
   18f2c:	mla	r6, r6, sl, lr
   18f30:	mov	lr, #0
   18f34:	str	ip, [sp, #16]
   18f38:	movwcc	r1, #1
   18f3c:	mla	r7, r7, r5, r6
   18f40:	cmp	r1, #0
   18f44:	mvnne	r2, #0
   18f48:	cmp	r1, #0
   18f4c:	umull	r3, r4, r2, r5
   18f50:	mvnne	r7, #0
   18f54:	mla	r4, r2, sl, r4
   18f58:	subs	r2, r0, r2
   18f5c:	sbcs	r2, ip, r7
   18f60:	mla	r4, r7, r5, r4
   18f64:	movwcc	lr, #1
   18f68:	mov	r2, #0
   18f6c:	cmp	lr, #0
   18f70:	mvnne	r3, #0
   18f74:	mvnne	r4, #0
   18f78:	subs	r7, r0, r3
   18f7c:	mov	r0, r5
   18f80:	sbcs	r7, ip, r4
   18f84:	movwcc	r2, #1
   18f88:	umull	r5, r7, r3, r5
   18f8c:	cmp	r2, #0
   18f90:	mla	r3, r3, sl, r7
   18f94:	mvnne	r5, #0
   18f98:	mla	r3, r4, r0, r3
   18f9c:	cmp	r2, #0
   18fa0:	umull	r6, ip, r5, r0
   18fa4:	mvnne	r3, #0
   18fa8:	mla	ip, r5, sl, ip
   18fac:	mla	r7, r3, r0, ip
   18fb0:	ldr	r0, [sp, #20]
   18fb4:	subs	r0, r0, r5
   18fb8:	ldr	r0, [sp, #16]
   18fbc:	sbcs	r0, r0, r3
   18fc0:	mov	r0, #0
   18fc4:	movwcc	r0, #1
   18fc8:	cmp	r0, #0
   18fcc:	mov	r3, r0
   18fd0:	orr	r0, r1, lr
   18fd4:	orr	r0, r0, r2
   18fd8:	mvnne	r7, #0
   18fdc:	mvnne	r6, #0
   18fe0:	orr	r3, r0, r3
   18fe4:	b	19654 <__assert_fail@plt+0x7f70>
   18fe8:	mvn	r0, #0
   18fec:	mvn	r1, #0
   18ff0:	mov	r2, r5
   18ff4:	mov	r4, r3
   18ff8:	str	r3, [sp, #24]
   18ffc:	bl	1a0dc <__assert_fail@plt+0x89f8>
   19000:	umull	r3, r2, r6, r5
   19004:	mla	r2, r6, r4, r2
   19008:	subs	r6, r0, r6
   1900c:	sbcs	r6, r1, r7
   19010:	mla	r2, r7, r5, r2
   19014:	mov	r7, #0
   19018:	mov	r6, #0
   1901c:	movwcc	r6, #1
   19020:	cmp	r6, #0
   19024:	str	r6, [sp, #20]
   19028:	mvnne	r3, #0
   1902c:	mvnne	r2, #0
   19030:	subs	r4, r0, r3
   19034:	umull	r6, ip, r3, r5
   19038:	sbcs	r4, r1, r2
   1903c:	ldr	r4, [sp, #24]
   19040:	movwcc	r7, #1
   19044:	cmp	r7, #0
   19048:	mov	lr, r7
   1904c:	str	r7, [sp, #16]
   19050:	mvnne	r6, #0
   19054:	cmp	lr, #0
   19058:	mov	lr, #0
   1905c:	umull	sl, r7, r6, r5
   19060:	mla	r3, r3, r4, ip
   19064:	mla	r7, r6, r4, r7
   19068:	mov	r4, r0
   1906c:	mla	r2, r2, r5, r3
   19070:	mvnne	r2, #0
   19074:	subs	r3, r0, r6
   19078:	mov	r0, #0
   1907c:	mla	r7, r2, r5, r7
   19080:	sbcs	r2, r1, r2
   19084:	mov	r3, r4
   19088:	movwcc	r0, #1
   1908c:	str	r3, [sp, #4]
   19090:	cmp	r0, #0
   19094:	str	r0, [sp, #12]
   19098:	mov	r0, r1
   1909c:	mvnne	sl, #0
   190a0:	mvnne	r7, #0
   190a4:	str	r0, [sp, #8]
   190a8:	subs	r2, r4, sl
   190ac:	ldr	r4, [sp, #24]
   190b0:	sbcs	r2, r1, r7
   190b4:	movwcc	lr, #1
   190b8:	umull	r6, r2, sl, r5
   190bc:	cmp	lr, #0
   190c0:	mvnne	r6, #0
   190c4:	mla	r2, sl, r4, r2
   190c8:	cmp	lr, #0
   190cc:	umull	r1, ip, r6, r5
   190d0:	mla	r2, r7, r5, r2
   190d4:	mla	ip, r6, r4, ip
   190d8:	mvnne	r2, #0
   190dc:	subs	r6, r3, r6
   190e0:	mla	r7, r2, r5, ip
   190e4:	sbcs	r2, r0, r2
   190e8:	mov	ip, #0
   190ec:	movwcc	ip, #1
   190f0:	mov	r2, #0
   190f4:	cmp	ip, #0
   190f8:	mvnne	r1, #0
   190fc:	mvnne	r7, #0
   19100:	subs	r6, r3, r1
   19104:	ldr	r3, [sp, #24]
   19108:	sbcs	r6, r0, r7
   1910c:	umull	r0, sl, r1, r5
   19110:	movwcc	r2, #1
   19114:	cmp	r2, #0
   19118:	mvnne	r0, #0
   1911c:	mla	r1, r1, r3, sl
   19120:	cmp	r2, #0
   19124:	umull	r6, r4, r0, r5
   19128:	mla	r1, r7, r5, r1
   1912c:	mla	r4, r0, r3, r4
   19130:	ldr	r3, [sp, #4]
   19134:	mvnne	r1, #0
   19138:	mla	r7, r1, r5, r4
   1913c:	ldr	r5, [sp, #16]
   19140:	subs	r0, r3, r0
   19144:	ldr	r0, [sp, #8]
   19148:	sbcs	r0, r0, r1
   1914c:	mov	r0, #0
   19150:	movwcc	r0, #1
   19154:	cmp	r0, #0
   19158:	mov	r1, r0
   1915c:	ldr	r0, [sp, #20]
   19160:	mvnne	r7, #0
   19164:	mvnne	r6, #0
   19168:	orr	r0, r0, r5
   1916c:	ldr	r5, [sp, #12]
   19170:	orr	r0, r0, r5
   19174:	orr	r0, r0, lr
   19178:	orr	r0, r0, ip
   1917c:	orr	r0, r0, r2
   19180:	b	195f0 <__assert_fail@plt+0x7f0c>
   19184:	mov	r1, #0
   19188:	lsl	r2, r7, #10
   1918c:	lsl	r0, r6, #10
   19190:	lsr	r3, r7, #22
   19194:	cmp	r1, r7, lsr #22
   19198:	orr	r2, r2, r6, lsr #22
   1919c:	mvnne	r0, #0
   191a0:	movwne	r3, #1
   191a4:	cmp	r1, r7, lsr #22
   191a8:	b	19620 <__assert_fail@plt+0x7f3c>
   191ac:	mvn	r0, #0
   191b0:	mvn	r1, #0
   191b4:	mov	r2, r5
   191b8:	mov	sl, r3
   191bc:	bl	1a0dc <__assert_fail@plt+0x89f8>
   191c0:	subs	r2, r0, r6
   191c4:	mov	ip, r0
   191c8:	mov	r0, #0
   191cc:	sbcs	r2, r1, r7
   191d0:	movwcc	r0, #1
   191d4:	umull	r4, r2, r6, r5
   191d8:	cmp	r0, #0
   191dc:	mla	r2, r6, sl, r2
   191e0:	str	r0, [sp, #20]
   191e4:	mvnne	r4, #0
   191e8:	cmp	r0, #0
   191ec:	mla	r2, r7, r5, r2
   191f0:	mov	r0, #0
   191f4:	umull	lr, r3, r4, r5
   191f8:	mvnne	r2, #0
   191fc:	mla	r3, r4, sl, r3
   19200:	mla	r6, r2, r5, r3
   19204:	subs	r3, ip, r4
   19208:	sbcs	r2, r1, r2
   1920c:	mov	r3, r1
   19210:	movwcc	r0, #1
   19214:	str	r3, [sp, #8]
   19218:	cmp	r0, #0
   1921c:	str	r0, [sp, #16]
   19220:	mov	r0, ip
   19224:	mvnne	lr, #0
   19228:	mvnne	r6, #0
   1922c:	str	r0, [sp, #12]
   19230:	subs	r2, ip, lr
   19234:	umull	r7, r4, lr, r5
   19238:	sbcs	r2, r1, r6
   1923c:	mla	r4, lr, sl, r4
   19240:	mov	r2, #0
   19244:	mla	r6, r6, r5, r4
   19248:	mov	r4, #0
   1924c:	movwcc	r2, #1
   19250:	cmp	r2, #0
   19254:	mvnne	r7, #0
   19258:	cmp	r2, #0
   1925c:	umull	r1, ip, r7, r5
   19260:	mvnne	r6, #0
   19264:	mla	ip, r7, sl, ip
   19268:	subs	r7, r0, r7
   1926c:	mla	lr, r6, r5, ip
   19270:	sbcs	r7, r3, r6
   19274:	mov	ip, #0
   19278:	movwcc	ip, #1
   1927c:	cmp	ip, #0
   19280:	mvnne	r1, #0
   19284:	mvnne	lr, #0
   19288:	subs	r7, r0, r1
   1928c:	sbcs	r7, r3, lr
   19290:	movwcc	r4, #1
   19294:	umull	r0, r7, r1, r5
   19298:	cmp	r4, #0
   1929c:	mla	r1, r1, sl, r7
   192a0:	mvnne	r0, #0
   192a4:	mla	r1, lr, r5, r1
   192a8:	cmp	r4, #0
   192ac:	umull	r6, r3, r0, r5
   192b0:	mvnne	r1, #0
   192b4:	mla	r3, r0, sl, r3
   192b8:	mla	r7, r1, r5, r3
   192bc:	ldr	r3, [sp, #12]
   192c0:	subs	r0, r3, r0
   192c4:	ldr	r3, [sp, #16]
   192c8:	ldr	r0, [sp, #8]
   192cc:	sbcs	r0, r0, r1
   192d0:	mov	r0, #0
   192d4:	movwcc	r0, #1
   192d8:	cmp	r0, #0
   192dc:	mov	r1, r0
   192e0:	ldr	r0, [sp, #20]
   192e4:	mvnne	r7, #0
   192e8:	mvnne	r6, #0
   192ec:	orr	r0, r0, r3
   192f0:	orr	r0, r0, r2
   192f4:	orr	r0, r0, ip
   192f8:	orr	r0, r0, r4
   192fc:	b	19420 <__assert_fail@plt+0x7d3c>
   19300:	mvn	r0, #0
   19304:	mvn	r1, #0
   19308:	mov	r2, r5
   1930c:	mov	sl, r3
   19310:	bl	1a0dc <__assert_fail@plt+0x89f8>
   19314:	umull	r3, r2, r6, r5
   19318:	mov	lr, r1
   1931c:	mov	r1, r0
   19320:	mla	r2, r6, sl, r2
   19324:	subs	r6, r0, r6
   19328:	mov	r0, #0
   1932c:	sbcs	r6, lr, r7
   19330:	mla	r2, r7, r5, r2
   19334:	movwcc	r0, #1
   19338:	cmp	r0, #0
   1933c:	str	r0, [sp, #20]
   19340:	mov	r0, r1
   19344:	mvnne	r3, #0
   19348:	mvnne	r2, #0
   1934c:	str	r0, [sp, #16]
   19350:	subs	r4, r1, r3
   19354:	umull	r7, ip, r3, r5
   19358:	sbcs	r4, lr, r2
   1935c:	mla	r3, r3, sl, ip
   19360:	mov	ip, #0
   19364:	mov	r4, #0
   19368:	mla	r2, r2, r5, r3
   1936c:	movwcc	r4, #1
   19370:	cmp	r4, #0
   19374:	mvnne	r7, #0
   19378:	cmp	r4, #0
   1937c:	umull	r1, r6, r7, r5
   19380:	mvnne	r2, #0
   19384:	mla	r6, r7, sl, r6
   19388:	mla	r3, r2, r5, r6
   1938c:	subs	r6, r0, r7
   19390:	sbcs	r2, lr, r2
   19394:	movwcc	ip, #1
   19398:	mov	r2, #0
   1939c:	cmp	ip, #0
   193a0:	mvnne	r1, #0
   193a4:	mvnne	r3, #0
   193a8:	subs	r6, r0, r1
   193ac:	sbcs	r6, lr, r3
   193b0:	movwcc	r2, #1
   193b4:	umull	r0, r6, r1, r5
   193b8:	cmp	r2, #0
   193bc:	str	r6, [sp, #12]
   193c0:	mvnne	r0, #0
   193c4:	cmp	r2, #0
   193c8:	umull	r6, r7, r0, r5
   193cc:	mla	r7, r0, sl, r7
   193d0:	str	r7, [sp, #8]
   193d4:	ldr	r7, [sp, #12]
   193d8:	mla	r1, r1, sl, r7
   193dc:	mla	r1, r3, r5, r1
   193e0:	ldr	r3, [sp, #8]
   193e4:	mvnne	r1, #0
   193e8:	mla	r7, r1, r5, r3
   193ec:	ldr	r3, [sp, #16]
   193f0:	subs	r0, r3, r0
   193f4:	sbcs	r0, lr, r1
   193f8:	mov	r0, #0
   193fc:	movwcc	r0, #1
   19400:	cmp	r0, #0
   19404:	mov	r1, r0
   19408:	ldr	r0, [sp, #20]
   1940c:	mvnne	r7, #0
   19410:	mvnne	r6, #0
   19414:	orr	r0, r0, r4
   19418:	orr	r0, r0, ip
   1941c:	orr	r0, r0, r2
   19420:	orr	r3, r0, r1
   19424:	b	19654 <__assert_fail@plt+0x7f70>
   19428:	mvn	r0, #0
   1942c:	mvn	r1, #0
   19430:	mov	r2, r5
   19434:	mov	sl, r3
   19438:	bl	1a0dc <__assert_fail@plt+0x89f8>
   1943c:	mov	ip, r1
   19440:	subs	r1, r0, r6
   19444:	umull	r3, lr, r6, r5
   19448:	mov	r2, r5
   1944c:	sbcs	r1, ip, r7
   19450:	mla	r6, r6, sl, lr
   19454:	str	ip, [sp, #4]
   19458:	mov	r1, #0
   1945c:	mla	r7, r7, r2, r6
   19460:	movwcc	r1, #1
   19464:	cmp	r1, #0
   19468:	str	r1, [sp, #20]
   1946c:	mvnne	r3, #0
   19470:	cmp	r1, #0
   19474:	mov	r1, r0
   19478:	umull	r4, r5, r3, r5
   1947c:	mvnne	r7, #0
   19480:	mov	lr, r1
   19484:	mla	r5, r3, sl, r5
   19488:	subs	r3, r0, r3
   1948c:	sbcs	r0, ip, r7
   19490:	mla	r5, r7, r2, r5
   19494:	mov	r0, #0
   19498:	movwcc	r0, #1
   1949c:	cmp	r0, #0
   194a0:	str	r0, [sp, #16]
   194a4:	mvnne	r4, #0
   194a8:	mvnne	r5, #0
   194ac:	subs	r0, r1, r4
   194b0:	mov	r1, #0
   194b4:	sbcs	r0, ip, r5
   194b8:	movwcc	r1, #1
   194bc:	umull	r3, r0, r4, r2
   194c0:	cmp	r1, #0
   194c4:	mla	r0, r4, sl, r0
   194c8:	mov	r4, lr
   194cc:	str	r1, [sp, #12]
   194d0:	mvnne	r3, #0
   194d4:	mla	r0, r5, r2, r0
   194d8:	cmp	r1, #0
   194dc:	str	r4, [sp]
   194e0:	umull	r7, r6, r3, r2
   194e4:	mvnne	r0, #0
   194e8:	mla	r6, r3, sl, r6
   194ec:	subs	r3, lr, r3
   194f0:	mla	r5, r0, r2, r6
   194f4:	sbcs	r0, ip, r0
   194f8:	mov	r3, #0
   194fc:	mov	r0, #0
   19500:	movwcc	r0, #1
   19504:	cmp	r0, #0
   19508:	str	r0, [sp, #8]
   1950c:	mvnne	r7, #0
   19510:	mvnne	r5, #0
   19514:	subs	r0, lr, r7
   19518:	sbcs	r0, ip, r5
   1951c:	movwcc	r3, #1
   19520:	umull	r6, r0, r7, r2
   19524:	cmp	r3, #0
   19528:	mla	r7, r7, sl, r0
   1952c:	mov	r0, ip
   19530:	mvnne	r6, #0
   19534:	mla	r7, r5, r2, r7
   19538:	cmp	r3, #0
   1953c:	mov	r5, #0
   19540:	umull	r1, lr, r6, r2
   19544:	mvnne	r7, #0
   19548:	mla	lr, r6, sl, lr
   1954c:	subs	r6, r4, r6
   19550:	mla	lr, r7, r2, lr
   19554:	sbcs	r7, ip, r7
   19558:	mov	ip, #0
   1955c:	movwcc	ip, #1
   19560:	cmp	ip, #0
   19564:	mvnne	r1, #0
   19568:	mvnne	lr, #0
   1956c:	subs	r7, r4, r1
   19570:	sbcs	r7, r0, lr
   19574:	movwcc	r5, #1
   19578:	umull	r0, r7, r1, r2
   1957c:	cmp	r5, #0
   19580:	mla	r1, r1, sl, r7
   19584:	mvnne	r0, #0
   19588:	mla	r1, lr, r2, r1
   1958c:	cmp	r5, #0
   19590:	umull	r6, r4, r0, r2
   19594:	mvnne	r1, #0
   19598:	mla	r4, r0, sl, r4
   1959c:	mla	r7, r1, r2, r4
   195a0:	ldr	r2, [sp]
   195a4:	subs	r0, r2, r0
   195a8:	ldr	r2, [sp, #16]
   195ac:	ldr	r0, [sp, #4]
   195b0:	sbcs	r0, r0, r1
   195b4:	mov	r0, #0
   195b8:	movwcc	r0, #1
   195bc:	cmp	r0, #0
   195c0:	mov	r1, r0
   195c4:	ldr	r0, [sp, #20]
   195c8:	mvnne	r7, #0
   195cc:	mvnne	r6, #0
   195d0:	orr	r0, r0, r2
   195d4:	ldr	r2, [sp, #12]
   195d8:	orr	r0, r0, r2
   195dc:	ldr	r2, [sp, #8]
   195e0:	orr	r0, r0, r2
   195e4:	orr	r0, r0, r3
   195e8:	orr	r0, r0, ip
   195ec:	orr	r0, r0, r5
   195f0:	orr	r0, r0, r1
   195f4:	and	r3, r0, #1
   195f8:	b	19654 <__assert_fail@plt+0x7f70>
   195fc:	mov	r1, #0
   19600:	lsl	r2, r7, #9
   19604:	lsl	r0, r6, #9
   19608:	lsr	r3, r7, #23
   1960c:	cmp	r1, r7, lsr #23
   19610:	orr	r2, r2, r6, lsr #23
   19614:	mvnne	r0, #0
   19618:	movwne	r3, #1
   1961c:	cmp	r1, r7, lsr #23
   19620:	mvnne	r2, #0
   19624:	mov	r6, r0
   19628:	mov	r7, r2
   1962c:	b	19654 <__assert_fail@plt+0x7f70>
   19630:	lsl	r1, r7, #1
   19634:	lsl	r0, r6, #1
   19638:	cmp	r7, #0
   1963c:	lsr	r3, r7, #31
   19640:	orr	r1, r1, r6, lsr #31
   19644:	mvnlt	r0, #0
   19648:	mvnlt	r1, #0
   1964c:	mov	r6, r0
   19650:	mov	r7, r1
   19654:	ldr	r1, [sp, #32]
   19658:	ldr	r2, [sp, #28]
   1965c:	orr	r8, r3, r8
   19660:	add	r0, r1, r2
   19664:	str	r0, [r9]
   19668:	ldrb	r0, [r1, r2]
   1966c:	cmp	r0, #0
   19670:	orrne	r8, r8, #2
   19674:	ldr	r0, [sp, #36]	; 0x24
   19678:	strd	r6, [r0]
   1967c:	mov	r0, r8
   19680:	sub	sp, fp, #28
   19684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19688:	movw	r0, #46575	; 0xb5ef
   1968c:	movw	r1, #46613	; 0xb615
   19690:	movw	r3, #46629	; 0xb625
   19694:	mov	r2, #85	; 0x55
   19698:	movt	r0, #1
   1969c:	movt	r1, #1
   196a0:	movt	r3, #1
   196a4:	bl	116e4 <__assert_fail@plt>
   196a8:	clz	r2, r1
   196ac:	clz	r3, r0
   196b0:	lsr	r2, r2, #5
   196b4:	lsr	r3, r3, #5
   196b8:	orrs	r2, r3, r2
   196bc:	movwne	r1, #1
   196c0:	movwne	r0, #1
   196c4:	cmp	r1, #0
   196c8:	beq	196f8 <__assert_fail@plt+0x8014>
   196cc:	mvn	r2, #-2147483648	; 0x80000000
   196d0:	udiv	r2, r2, r1
   196d4:	cmp	r2, r0
   196d8:	bcs	196f8 <__assert_fail@plt+0x8014>
   196dc:	push	{fp, lr}
   196e0:	mov	fp, sp
   196e4:	bl	11558 <__errno_location@plt>
   196e8:	mov	r1, #12
   196ec:	str	r1, [r0]
   196f0:	mov	r0, #0
   196f4:	pop	{fp, pc}
   196f8:	b	11360 <calloc@plt>
   196fc:	cmp	r0, #0
   19700:	movweq	r0, #1
   19704:	cmn	r0, #1
   19708:	ble	19710 <__assert_fail@plt+0x802c>
   1970c:	b	114e0 <malloc@plt>
   19710:	push	{fp, lr}
   19714:	mov	fp, sp
   19718:	bl	11558 <__errno_location@plt>
   1971c:	mov	r1, #12
   19720:	str	r1, [r0]
   19724:	mov	r0, #0
   19728:	pop	{fp, pc}
   1972c:	push	{fp, lr}
   19730:	mov	fp, sp
   19734:	cmp	r0, #0
   19738:	beq	19754 <__assert_fail@plt+0x8070>
   1973c:	cmp	r1, #0
   19740:	beq	19760 <__assert_fail@plt+0x807c>
   19744:	cmn	r1, #1
   19748:	ble	1976c <__assert_fail@plt+0x8088>
   1974c:	pop	{fp, lr}
   19750:	b	1142c <realloc@plt>
   19754:	mov	r0, r1
   19758:	pop	{fp, lr}
   1975c:	b	196fc <__assert_fail@plt+0x8018>
   19760:	bl	143a4 <__assert_fail@plt+0x2cc0>
   19764:	mov	r0, #0
   19768:	pop	{fp, pc}
   1976c:	bl	11558 <__errno_location@plt>
   19770:	mov	r1, #12
   19774:	str	r1, [r0]
   19778:	mov	r0, #0
   1977c:	pop	{fp, pc}
   19780:	push	{r4, r5, r6, sl, fp, lr}
   19784:	add	fp, sp, #16
   19788:	mov	r4, r0
   1978c:	bl	114a4 <__fpending@plt>
   19790:	ldr	r6, [r4]
   19794:	mov	r5, r0
   19798:	mov	r0, r4
   1979c:	bl	19804 <__assert_fail@plt+0x8120>
   197a0:	tst	r6, #32
   197a4:	bne	197dc <__assert_fail@plt+0x80f8>
   197a8:	cmp	r0, #0
   197ac:	mov	r4, r0
   197b0:	mvnne	r4, #0
   197b4:	cmp	r5, #0
   197b8:	bne	197e8 <__assert_fail@plt+0x8104>
   197bc:	cmp	r0, #0
   197c0:	beq	197e8 <__assert_fail@plt+0x8104>
   197c4:	bl	11558 <__errno_location@plt>
   197c8:	ldr	r0, [r0]
   197cc:	subs	r4, r0, #9
   197d0:	mvnne	r4, #0
   197d4:	mov	r0, r4
   197d8:	pop	{r4, r5, r6, sl, fp, pc}
   197dc:	mvn	r4, #0
   197e0:	cmp	r0, #0
   197e4:	beq	197f0 <__assert_fail@plt+0x810c>
   197e8:	mov	r0, r4
   197ec:	pop	{r4, r5, r6, sl, fp, pc}
   197f0:	bl	11558 <__errno_location@plt>
   197f4:	mov	r1, #0
   197f8:	str	r1, [r0]
   197fc:	mov	r0, r4
   19800:	pop	{r4, r5, r6, sl, fp, pc}
   19804:	push	{r4, r5, r6, sl, fp, lr}
   19808:	add	fp, sp, #16
   1980c:	sub	sp, sp, #8
   19810:	mov	r4, r0
   19814:	bl	115b8 <fileno@plt>
   19818:	cmn	r0, #1
   1981c:	ble	19890 <__assert_fail@plt+0x81ac>
   19820:	mov	r0, r4
   19824:	bl	114f8 <__freading@plt>
   19828:	cmp	r0, #0
   1982c:	beq	19858 <__assert_fail@plt+0x8174>
   19830:	mov	r0, r4
   19834:	bl	115b8 <fileno@plt>
   19838:	mov	r1, #1
   1983c:	mov	r2, #0
   19840:	mov	r3, #0
   19844:	str	r1, [sp]
   19848:	bl	11480 <lseek64@plt>
   1984c:	and	r0, r0, r1
   19850:	cmn	r0, #1
   19854:	beq	19890 <__assert_fail@plt+0x81ac>
   19858:	mov	r0, r4
   1985c:	bl	198a0 <__assert_fail@plt+0x81bc>
   19860:	cmp	r0, #0
   19864:	beq	19890 <__assert_fail@plt+0x81ac>
   19868:	bl	11558 <__errno_location@plt>
   1986c:	ldr	r6, [r0]
   19870:	mov	r5, r0
   19874:	mov	r0, r4
   19878:	bl	115dc <fclose@plt>
   1987c:	cmp	r6, #0
   19880:	strne	r6, [r5]
   19884:	mvnne	r0, #0
   19888:	sub	sp, fp, #16
   1988c:	pop	{r4, r5, r6, sl, fp, pc}
   19890:	mov	r0, r4
   19894:	sub	sp, fp, #16
   19898:	pop	{r4, r5, r6, sl, fp, lr}
   1989c:	b	115dc <fclose@plt>
   198a0:	push	{r4, sl, fp, lr}
   198a4:	add	fp, sp, #8
   198a8:	sub	sp, sp, #8
   198ac:	mov	r4, r0
   198b0:	cmp	r0, #0
   198b4:	beq	198d0 <__assert_fail@plt+0x81ec>
   198b8:	mov	r0, r4
   198bc:	bl	114f8 <__freading@plt>
   198c0:	cmp	r0, #0
   198c4:	ldrbne	r0, [r4, #1]
   198c8:	tstne	r0, #1
   198cc:	bne	198e0 <__assert_fail@plt+0x81fc>
   198d0:	mov	r0, r4
   198d4:	sub	sp, fp, #8
   198d8:	pop	{r4, sl, fp, lr}
   198dc:	b	1139c <fflush@plt>
   198e0:	mov	r0, #1
   198e4:	mov	r2, #0
   198e8:	mov	r3, #0
   198ec:	str	r0, [sp]
   198f0:	mov	r0, r4
   198f4:	bl	199bc <__assert_fail@plt+0x82d8>
   198f8:	mov	r0, r4
   198fc:	sub	sp, fp, #8
   19900:	pop	{r4, sl, fp, lr}
   19904:	b	1139c <fflush@plt>
   19908:	push	{r4, r5, r6, r7, fp, lr}
   1990c:	add	fp, sp, #16
   19910:	mov	r5, r1
   19914:	bl	11648 <fopen64@plt>
   19918:	mov	r4, #0
   1991c:	cmp	r0, #0
   19920:	beq	19970 <__assert_fail@plt+0x828c>
   19924:	mov	r6, r0
   19928:	bl	115b8 <fileno@plt>
   1992c:	cmp	r0, #2
   19930:	movhi	r0, r6
   19934:	pophi	{r4, r5, r6, r7, fp, pc}
   19938:	bl	19b34 <__assert_fail@plt+0x8450>
   1993c:	cmn	r0, #1
   19940:	ble	1999c <__assert_fail@plt+0x82b8>
   19944:	mov	r7, r0
   19948:	mov	r0, r6
   1994c:	bl	19804 <__assert_fail@plt+0x8120>
   19950:	cmp	r0, #0
   19954:	bne	19978 <__assert_fail@plt+0x8294>
   19958:	mov	r0, r7
   1995c:	mov	r1, r5
   19960:	bl	11354 <fdopen@plt>
   19964:	mov	r4, r0
   19968:	cmp	r0, #0
   1996c:	beq	19978 <__assert_fail@plt+0x8294>
   19970:	mov	r0, r4
   19974:	pop	{r4, r5, r6, r7, fp, pc}
   19978:	bl	11558 <__errno_location@plt>
   1997c:	ldr	r5, [r0]
   19980:	mov	r4, r0
   19984:	mov	r0, r7
   19988:	bl	116d8 <close@plt>
   1998c:	str	r5, [r4]
   19990:	mov	r4, #0
   19994:	mov	r0, r4
   19998:	pop	{r4, r5, r6, r7, fp, pc}
   1999c:	bl	11558 <__errno_location@plt>
   199a0:	ldr	r7, [r0]
   199a4:	mov	r5, r0
   199a8:	mov	r0, r6
   199ac:	bl	19804 <__assert_fail@plt+0x8120>
   199b0:	mov	r0, r4
   199b4:	str	r7, [r5]
   199b8:	pop	{r4, r5, r6, r7, fp, pc}
   199bc:	push	{r4, r5, r6, r7, fp, lr}
   199c0:	add	fp, sp, #16
   199c4:	sub	sp, sp, #8
   199c8:	mov	r4, r0
   199cc:	ldr	r0, [r0, #4]
   199d0:	mov	r5, r3
   199d4:	mov	r6, r2
   199d8:	ldr	r1, [r4, #8]
   199dc:	cmp	r1, r0
   199e0:	bne	199fc <__assert_fail@plt+0x8318>
   199e4:	ldrd	r0, [r4, #16]
   199e8:	cmp	r1, r0
   199ec:	bne	199fc <__assert_fail@plt+0x8318>
   199f0:	ldr	r0, [r4, #36]	; 0x24
   199f4:	cmp	r0, #0
   199f8:	beq	19a14 <__assert_fail@plt+0x8330>
   199fc:	mov	r0, r4
   19a00:	mov	r2, r6
   19a04:	mov	r3, r5
   19a08:	sub	sp, fp, #16
   19a0c:	pop	{r4, r5, r6, r7, fp, lr}
   19a10:	b	115e8 <fseeko64@plt>
   19a14:	ldr	r7, [fp, #8]
   19a18:	mov	r0, r4
   19a1c:	bl	115b8 <fileno@plt>
   19a20:	mov	r2, r6
   19a24:	mov	r3, r5
   19a28:	str	r7, [sp]
   19a2c:	bl	11480 <lseek64@plt>
   19a30:	and	r2, r0, r1
   19a34:	cmn	r2, #1
   19a38:	mvneq	r0, #0
   19a3c:	subeq	sp, fp, #16
   19a40:	popeq	{r4, r5, r6, r7, fp, pc}
   19a44:	strd	r0, [r4, #80]	; 0x50
   19a48:	ldr	r0, [r4]
   19a4c:	bic	r0, r0, #16
   19a50:	str	r0, [r4]
   19a54:	mov	r0, #0
   19a58:	sub	sp, fp, #16
   19a5c:	pop	{r4, r5, r6, r7, fp, pc}
   19a60:	push	{fp, lr}
   19a64:	mov	fp, sp
   19a68:	mov	r0, #14
   19a6c:	bl	11630 <nl_langinfo@plt>
   19a70:	movw	r1, #43207	; 0xa8c7
   19a74:	cmp	r0, #0
   19a78:	movt	r1, #1
   19a7c:	movne	r1, r0
   19a80:	movw	r0, #46708	; 0xb674
   19a84:	ldrb	r2, [r1]
   19a88:	movt	r0, #1
   19a8c:	cmp	r2, #0
   19a90:	movne	r0, r1
   19a94:	pop	{fp, pc}
   19a98:	push	{r4, r5, r6, r7, fp, lr}
   19a9c:	add	fp, sp, #16
   19aa0:	sub	sp, sp, #8
   19aa4:	add	r5, sp, #4
   19aa8:	cmp	r0, #0
   19aac:	mov	r7, r2
   19ab0:	mov	r4, r1
   19ab4:	movne	r5, r0
   19ab8:	mov	r0, r5
   19abc:	bl	114b0 <mbrtowc@plt>
   19ac0:	mov	r6, r0
   19ac4:	cmp	r7, #0
   19ac8:	beq	19aec <__assert_fail@plt+0x8408>
   19acc:	cmn	r6, #2
   19ad0:	bcc	19aec <__assert_fail@plt+0x8408>
   19ad4:	mov	r0, #0
   19ad8:	bl	19b40 <__assert_fail@plt+0x845c>
   19adc:	cmp	r0, #0
   19ae0:	ldrbeq	r0, [r4]
   19ae4:	moveq	r6, #1
   19ae8:	streq	r0, [r5]
   19aec:	mov	r0, r6
   19af0:	sub	sp, fp, #16
   19af4:	pop	{r4, r5, r6, r7, fp, pc}
   19af8:	cmp	r2, #0
   19afc:	beq	19b2c <__assert_fail@plt+0x8448>
   19b00:	mvn	r3, #0
   19b04:	udiv	r3, r3, r2
   19b08:	cmp	r3, r1
   19b0c:	bcs	19b2c <__assert_fail@plt+0x8448>
   19b10:	push	{fp, lr}
   19b14:	mov	fp, sp
   19b18:	bl	11558 <__errno_location@plt>
   19b1c:	mov	r1, #12
   19b20:	str	r1, [r0]
   19b24:	mov	r0, #0
   19b28:	pop	{fp, pc}
   19b2c:	mul	r1, r2, r1
   19b30:	b	1972c <__assert_fail@plt+0x8048>
   19b34:	mov	r1, #0
   19b38:	mov	r2, #3
   19b3c:	b	1417c <__assert_fail@plt+0x2a98>
   19b40:	push	{r4, sl, fp, lr}
   19b44:	add	fp, sp, #8
   19b48:	sub	sp, sp, #264	; 0x108
   19b4c:	add	r1, sp, #7
   19b50:	movw	r2, #257	; 0x101
   19b54:	bl	19ba4 <__assert_fail@plt+0x84c0>
   19b58:	mov	r4, #0
   19b5c:	cmp	r0, #0
   19b60:	bne	19b98 <__assert_fail@plt+0x84b4>
   19b64:	movw	r1, #46714	; 0xb67a
   19b68:	add	r0, sp, #7
   19b6c:	movt	r1, #1
   19b70:	bl	11390 <strcmp@plt>
   19b74:	cmp	r0, #0
   19b78:	beq	19b98 <__assert_fail@plt+0x84b4>
   19b7c:	movw	r1, #46716	; 0xb67c
   19b80:	add	r0, sp, #7
   19b84:	movt	r1, #1
   19b88:	bl	11390 <strcmp@plt>
   19b8c:	mov	r4, r0
   19b90:	cmp	r0, #0
   19b94:	movwne	r4, #1
   19b98:	mov	r0, r4
   19b9c:	sub	sp, fp, #8
   19ba0:	pop	{r4, sl, fp, pc}
   19ba4:	push	{r4, r5, r6, r7, fp, lr}
   19ba8:	add	fp, sp, #16
   19bac:	mov	r4, r1
   19bb0:	mov	r1, #0
   19bb4:	mov	r6, r2
   19bb8:	bl	1160c <setlocale@plt>
   19bbc:	cmp	r0, #0
   19bc0:	beq	19bf0 <__assert_fail@plt+0x850c>
   19bc4:	mov	r7, r0
   19bc8:	bl	11534 <strlen@plt>
   19bcc:	cmp	r0, r6
   19bd0:	bcs	19c10 <__assert_fail@plt+0x852c>
   19bd4:	add	r2, r0, #1
   19bd8:	mov	r0, r4
   19bdc:	mov	r1, r7
   19be0:	bl	113cc <memcpy@plt>
   19be4:	mov	r5, #0
   19be8:	mov	r0, r5
   19bec:	pop	{r4, r5, r6, r7, fp, pc}
   19bf0:	cmp	r6, #0
   19bf4:	mov	r5, #22
   19bf8:	movne	r0, #0
   19bfc:	strbne	r0, [r4]
   19c00:	movne	r0, r5
   19c04:	popne	{r4, r5, r6, r7, fp, pc}
   19c08:	mov	r0, r5
   19c0c:	pop	{r4, r5, r6, r7, fp, pc}
   19c10:	mov	r5, #34	; 0x22
   19c14:	cmp	r6, #0
   19c18:	beq	19c38 <__assert_fail@plt+0x8554>
   19c1c:	sub	r6, r6, #1
   19c20:	mov	r0, r4
   19c24:	mov	r1, r7
   19c28:	mov	r2, r6
   19c2c:	bl	113cc <memcpy@plt>
   19c30:	mov	r0, #0
   19c34:	strb	r0, [r4, r6]
   19c38:	mov	r0, r5
   19c3c:	pop	{r4, r5, r6, r7, fp, pc}
   19c40:	mov	r1, #0
   19c44:	b	1160c <setlocale@plt>
   19c48:	eor	r1, r1, #-2147483648	; 0x80000000
   19c4c:	b	19c54 <__assert_fail@plt+0x8570>
   19c50:	eor	r3, r3, #-2147483648	; 0x80000000
   19c54:	push	{r4, r5, lr}
   19c58:	lsl	r4, r1, #1
   19c5c:	lsl	r5, r3, #1
   19c60:	teq	r4, r5
   19c64:	teqeq	r0, r2
   19c68:	orrsne	ip, r4, r0
   19c6c:	orrsne	ip, r5, r2
   19c70:	mvnsne	ip, r4, asr #21
   19c74:	mvnsne	ip, r5, asr #21
   19c78:	beq	19e64 <__assert_fail@plt+0x8780>
   19c7c:	lsr	r4, r4, #21
   19c80:	rsbs	r5, r4, r5, lsr #21
   19c84:	rsblt	r5, r5, #0
   19c88:	ble	19ca8 <__assert_fail@plt+0x85c4>
   19c8c:	add	r4, r4, r5
   19c90:	eor	r2, r0, r2
   19c94:	eor	r3, r1, r3
   19c98:	eor	r0, r2, r0
   19c9c:	eor	r1, r3, r1
   19ca0:	eor	r2, r0, r2
   19ca4:	eor	r3, r1, r3
   19ca8:	cmp	r5, #54	; 0x36
   19cac:	pophi	{r4, r5, pc}
   19cb0:	tst	r1, #-2147483648	; 0x80000000
   19cb4:	lsl	r1, r1, #12
   19cb8:	mov	ip, #1048576	; 0x100000
   19cbc:	orr	r1, ip, r1, lsr #12
   19cc0:	beq	19ccc <__assert_fail@plt+0x85e8>
   19cc4:	rsbs	r0, r0, #0
   19cc8:	rsc	r1, r1, #0
   19ccc:	tst	r3, #-2147483648	; 0x80000000
   19cd0:	lsl	r3, r3, #12
   19cd4:	orr	r3, ip, r3, lsr #12
   19cd8:	beq	19ce4 <__assert_fail@plt+0x8600>
   19cdc:	rsbs	r2, r2, #0
   19ce0:	rsc	r3, r3, #0
   19ce4:	teq	r4, r5
   19ce8:	beq	19e4c <__assert_fail@plt+0x8768>
   19cec:	sub	r4, r4, #1
   19cf0:	rsbs	lr, r5, #32
   19cf4:	blt	19d10 <__assert_fail@plt+0x862c>
   19cf8:	lsl	ip, r2, lr
   19cfc:	adds	r0, r0, r2, lsr r5
   19d00:	adc	r1, r1, #0
   19d04:	adds	r0, r0, r3, lsl lr
   19d08:	adcs	r1, r1, r3, asr r5
   19d0c:	b	19d2c <__assert_fail@plt+0x8648>
   19d10:	sub	r5, r5, #32
   19d14:	add	lr, lr, #32
   19d18:	cmp	r2, #1
   19d1c:	lsl	ip, r3, lr
   19d20:	orrcs	ip, ip, #2
   19d24:	adds	r0, r0, r3, asr r5
   19d28:	adcs	r1, r1, r3, asr #31
   19d2c:	and	r5, r1, #-2147483648	; 0x80000000
   19d30:	bpl	19d40 <__assert_fail@plt+0x865c>
   19d34:	rsbs	ip, ip, #0
   19d38:	rscs	r0, r0, #0
   19d3c:	rsc	r1, r1, #0
   19d40:	cmp	r1, #1048576	; 0x100000
   19d44:	bcc	19d84 <__assert_fail@plt+0x86a0>
   19d48:	cmp	r1, #2097152	; 0x200000
   19d4c:	bcc	19d6c <__assert_fail@plt+0x8688>
   19d50:	lsrs	r1, r1, #1
   19d54:	rrxs	r0, r0
   19d58:	rrx	ip, ip
   19d5c:	add	r4, r4, #1
   19d60:	lsl	r2, r4, #21
   19d64:	cmn	r2, #4194304	; 0x400000
   19d68:	bcs	19ec4 <__assert_fail@plt+0x87e0>
   19d6c:	cmp	ip, #-2147483648	; 0x80000000
   19d70:	lsrseq	ip, r0, #1
   19d74:	adcs	r0, r0, #0
   19d78:	adc	r1, r1, r4, lsl #20
   19d7c:	orr	r1, r1, r5
   19d80:	pop	{r4, r5, pc}
   19d84:	lsls	ip, ip, #1
   19d88:	adcs	r0, r0, r0
   19d8c:	adc	r1, r1, r1
   19d90:	tst	r1, #1048576	; 0x100000
   19d94:	sub	r4, r4, #1
   19d98:	bne	19d6c <__assert_fail@plt+0x8688>
   19d9c:	teq	r1, #0
   19da0:	moveq	r1, r0
   19da4:	moveq	r0, #0
   19da8:	clz	r3, r1
   19dac:	addeq	r3, r3, #32
   19db0:	sub	r3, r3, #11
   19db4:	subs	r2, r3, #32
   19db8:	bge	19ddc <__assert_fail@plt+0x86f8>
   19dbc:	adds	r2, r2, #12
   19dc0:	ble	19dd8 <__assert_fail@plt+0x86f4>
   19dc4:	add	ip, r2, #20
   19dc8:	rsb	r2, r2, #12
   19dcc:	lsl	r0, r1, ip
   19dd0:	lsr	r1, r1, r2
   19dd4:	b	19dec <__assert_fail@plt+0x8708>
   19dd8:	add	r2, r2, #20
   19ddc:	rsble	ip, r2, #32
   19de0:	lsl	r1, r1, r2
   19de4:	orrle	r1, r1, r0, lsr ip
   19de8:	lslle	r0, r0, r2
   19dec:	subs	r4, r4, r3
   19df0:	addge	r1, r1, r4, lsl #20
   19df4:	orrge	r1, r1, r5
   19df8:	popge	{r4, r5, pc}
   19dfc:	mvn	r4, r4
   19e00:	subs	r4, r4, #31
   19e04:	bge	19e40 <__assert_fail@plt+0x875c>
   19e08:	adds	r4, r4, #12
   19e0c:	bgt	19e28 <__assert_fail@plt+0x8744>
   19e10:	add	r4, r4, #20
   19e14:	rsb	r2, r4, #32
   19e18:	lsr	r0, r0, r4
   19e1c:	orr	r0, r0, r1, lsl r2
   19e20:	orr	r1, r5, r1, lsr r4
   19e24:	pop	{r4, r5, pc}
   19e28:	rsb	r4, r4, #12
   19e2c:	rsb	r2, r4, #32
   19e30:	lsr	r0, r0, r2
   19e34:	orr	r0, r0, r1, lsl r4
   19e38:	mov	r1, r5
   19e3c:	pop	{r4, r5, pc}
   19e40:	lsr	r0, r1, r4
   19e44:	mov	r1, r5
   19e48:	pop	{r4, r5, pc}
   19e4c:	teq	r4, #0
   19e50:	eor	r3, r3, #1048576	; 0x100000
   19e54:	eoreq	r1, r1, #1048576	; 0x100000
   19e58:	addeq	r4, r4, #1
   19e5c:	subne	r5, r5, #1
   19e60:	b	19cec <__assert_fail@plt+0x8608>
   19e64:	mvns	ip, r4, asr #21
   19e68:	mvnsne	ip, r5, asr #21
   19e6c:	beq	19ed4 <__assert_fail@plt+0x87f0>
   19e70:	teq	r4, r5
   19e74:	teqeq	r0, r2
   19e78:	beq	19e8c <__assert_fail@plt+0x87a8>
   19e7c:	orrs	ip, r4, r0
   19e80:	moveq	r1, r3
   19e84:	moveq	r0, r2
   19e88:	pop	{r4, r5, pc}
   19e8c:	teq	r1, r3
   19e90:	movne	r1, #0
   19e94:	movne	r0, #0
   19e98:	popne	{r4, r5, pc}
   19e9c:	lsrs	ip, r4, #21
   19ea0:	bne	19eb4 <__assert_fail@plt+0x87d0>
   19ea4:	lsls	r0, r0, #1
   19ea8:	adcs	r1, r1, r1
   19eac:	orrcs	r1, r1, #-2147483648	; 0x80000000
   19eb0:	pop	{r4, r5, pc}
   19eb4:	adds	r4, r4, #4194304	; 0x400000
   19eb8:	addcc	r1, r1, #1048576	; 0x100000
   19ebc:	popcc	{r4, r5, pc}
   19ec0:	and	r5, r1, #-2147483648	; 0x80000000
   19ec4:	orr	r1, r5, #2130706432	; 0x7f000000
   19ec8:	orr	r1, r1, #15728640	; 0xf00000
   19ecc:	mov	r0, #0
   19ed0:	pop	{r4, r5, pc}
   19ed4:	mvns	ip, r4, asr #21
   19ed8:	movne	r1, r3
   19edc:	movne	r0, r2
   19ee0:	mvnseq	ip, r5, asr #21
   19ee4:	movne	r3, r1
   19ee8:	movne	r2, r0
   19eec:	orrs	r4, r0, r1, lsl #12
   19ef0:	orrseq	r5, r2, r3, lsl #12
   19ef4:	teqeq	r1, r3
   19ef8:	orrne	r1, r1, #524288	; 0x80000
   19efc:	pop	{r4, r5, pc}
   19f00:	teq	r0, #0
   19f04:	moveq	r1, #0
   19f08:	bxeq	lr
   19f0c:	push	{r4, r5, lr}
   19f10:	mov	r4, #1024	; 0x400
   19f14:	add	r4, r4, #50	; 0x32
   19f18:	mov	r5, #0
   19f1c:	mov	r1, #0
   19f20:	b	19d9c <__assert_fail@plt+0x86b8>
   19f24:	teq	r0, #0
   19f28:	moveq	r1, #0
   19f2c:	bxeq	lr
   19f30:	push	{r4, r5, lr}
   19f34:	mov	r4, #1024	; 0x400
   19f38:	add	r4, r4, #50	; 0x32
   19f3c:	ands	r5, r0, #-2147483648	; 0x80000000
   19f40:	rsbmi	r0, r0, #0
   19f44:	mov	r1, #0
   19f48:	b	19d9c <__assert_fail@plt+0x86b8>
   19f4c:	lsls	r2, r0, #1
   19f50:	asr	r1, r2, #3
   19f54:	rrx	r1, r1
   19f58:	lsl	r0, r2, #28
   19f5c:	andsne	r3, r2, #-16777216	; 0xff000000
   19f60:	teqne	r3, #-16777216	; 0xff000000
   19f64:	eorne	r1, r1, #939524096	; 0x38000000
   19f68:	bxne	lr
   19f6c:	bics	r2, r2, #-16777216	; 0xff000000
   19f70:	bxeq	lr
   19f74:	teq	r3, #-16777216	; 0xff000000
   19f78:	orreq	r1, r1, #524288	; 0x80000
   19f7c:	bxeq	lr
   19f80:	push	{r4, r5, lr}
   19f84:	mov	r4, #896	; 0x380
   19f88:	and	r5, r1, #-2147483648	; 0x80000000
   19f8c:	bic	r1, r1, #-2147483648	; 0x80000000
   19f90:	b	19d9c <__assert_fail@plt+0x86b8>
   19f94:	orrs	r2, r0, r1
   19f98:	bxeq	lr
   19f9c:	push	{r4, r5, lr}
   19fa0:	mov	r5, #0
   19fa4:	b	19fc4 <__assert_fail@plt+0x88e0>
   19fa8:	orrs	r2, r0, r1
   19fac:	bxeq	lr
   19fb0:	push	{r4, r5, lr}
   19fb4:	ands	r5, r1, #-2147483648	; 0x80000000
   19fb8:	bpl	19fc4 <__assert_fail@plt+0x88e0>
   19fbc:	rsbs	r0, r0, #0
   19fc0:	rsc	r1, r1, #0
   19fc4:	mov	r4, #1024	; 0x400
   19fc8:	add	r4, r4, #50	; 0x32
   19fcc:	lsrs	ip, r1, #22
   19fd0:	beq	19d40 <__assert_fail@plt+0x865c>
   19fd4:	mov	r2, #3
   19fd8:	lsrs	ip, ip, #3
   19fdc:	addne	r2, r2, #3
   19fe0:	lsrs	ip, ip, #3
   19fe4:	addne	r2, r2, #3
   19fe8:	add	r2, r2, ip, lsr #3
   19fec:	rsb	r3, r2, #32
   19ff0:	lsl	ip, r0, r3
   19ff4:	lsr	r0, r0, r2
   19ff8:	orr	r0, r0, r1, lsl r3
   19ffc:	lsr	r1, r1, r2
   1a000:	add	r4, r4, r2
   1a004:	b	19d40 <__assert_fail@plt+0x865c>
   1a008:	cmp	r3, #0
   1a00c:	cmpeq	r2, #0
   1a010:	bne	1a034 <__assert_fail@plt+0x8950>
   1a014:	cmp	r1, #0
   1a018:	movlt	r1, #-2147483648	; 0x80000000
   1a01c:	movlt	r0, #0
   1a020:	blt	1a030 <__assert_fail@plt+0x894c>
   1a024:	cmpeq	r0, #0
   1a028:	mvnne	r1, #-2147483648	; 0x80000000
   1a02c:	mvnne	r0, #0
   1a030:	b	1a118 <__assert_fail@plt+0x8a34>
   1a034:	sub	sp, sp, #8
   1a038:	push	{sp, lr}
   1a03c:	cmp	r1, #0
   1a040:	blt	1a060 <__assert_fail@plt+0x897c>
   1a044:	cmp	r3, #0
   1a048:	blt	1a094 <__assert_fail@plt+0x89b0>
   1a04c:	bl	1a168 <__assert_fail@plt+0x8a84>
   1a050:	ldr	lr, [sp, #4]
   1a054:	add	sp, sp, #8
   1a058:	pop	{r2, r3}
   1a05c:	bx	lr
   1a060:	rsbs	r0, r0, #0
   1a064:	sbc	r1, r1, r1, lsl #1
   1a068:	cmp	r3, #0
   1a06c:	blt	1a0b8 <__assert_fail@plt+0x89d4>
   1a070:	bl	1a168 <__assert_fail@plt+0x8a84>
   1a074:	ldr	lr, [sp, #4]
   1a078:	add	sp, sp, #8
   1a07c:	pop	{r2, r3}
   1a080:	rsbs	r0, r0, #0
   1a084:	sbc	r1, r1, r1, lsl #1
   1a088:	rsbs	r2, r2, #0
   1a08c:	sbc	r3, r3, r3, lsl #1
   1a090:	bx	lr
   1a094:	rsbs	r2, r2, #0
   1a098:	sbc	r3, r3, r3, lsl #1
   1a09c:	bl	1a168 <__assert_fail@plt+0x8a84>
   1a0a0:	ldr	lr, [sp, #4]
   1a0a4:	add	sp, sp, #8
   1a0a8:	pop	{r2, r3}
   1a0ac:	rsbs	r0, r0, #0
   1a0b0:	sbc	r1, r1, r1, lsl #1
   1a0b4:	bx	lr
   1a0b8:	rsbs	r2, r2, #0
   1a0bc:	sbc	r3, r3, r3, lsl #1
   1a0c0:	bl	1a168 <__assert_fail@plt+0x8a84>
   1a0c4:	ldr	lr, [sp, #4]
   1a0c8:	add	sp, sp, #8
   1a0cc:	pop	{r2, r3}
   1a0d0:	rsbs	r2, r2, #0
   1a0d4:	sbc	r3, r3, r3, lsl #1
   1a0d8:	bx	lr
   1a0dc:	cmp	r3, #0
   1a0e0:	cmpeq	r2, #0
   1a0e4:	bne	1a0fc <__assert_fail@plt+0x8a18>
   1a0e8:	cmp	r1, #0
   1a0ec:	cmpeq	r0, #0
   1a0f0:	mvnne	r1, #0
   1a0f4:	mvnne	r0, #0
   1a0f8:	b	1a118 <__assert_fail@plt+0x8a34>
   1a0fc:	sub	sp, sp, #8
   1a100:	push	{sp, lr}
   1a104:	bl	1a168 <__assert_fail@plt+0x8a84>
   1a108:	ldr	lr, [sp, #4]
   1a10c:	add	sp, sp, #8
   1a110:	pop	{r2, r3}
   1a114:	bx	lr
   1a118:	push	{r1, lr}
   1a11c:	mov	r0, #8
   1a120:	bl	11378 <raise@plt>
   1a124:	pop	{r1, pc}
   1a128:	vmov	d6, r0, r1
   1a12c:	vldr	d7, [pc, #36]	; 1a158 <__assert_fail@plt+0x8a74>
   1a130:	vldr	d5, [pc, #40]	; 1a160 <__assert_fail@plt+0x8a7c>
   1a134:	vmul.f64	d7, d6, d7
   1a138:	vcvt.u32.f64	s14, d7
   1a13c:	vcvt.f64.u32	d4, s14
   1a140:	vmov	r1, s14
   1a144:	vmls.f64	d6, d4, d5
   1a148:	vcvt.u32.f64	s15, d6
   1a14c:	vmov	r0, s15
   1a150:	bx	lr
   1a154:	nop			; (mov r0, r0)
   1a158:	andeq	r0, r0, r0
   1a15c:	ldclcc	0, cr0, [r0]
   1a160:	andeq	r0, r0, r0
   1a164:	mvnsmi	r0, r0
   1a168:	cmp	r1, r3
   1a16c:	cmpeq	r0, r2
   1a170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a174:	mov	r4, r0
   1a178:	movcc	r0, #0
   1a17c:	mov	r5, r1
   1a180:	ldr	lr, [sp, #36]	; 0x24
   1a184:	movcc	r1, r0
   1a188:	bcc	1a284 <__assert_fail@plt+0x8ba0>
   1a18c:	cmp	r3, #0
   1a190:	clzeq	ip, r2
   1a194:	clzne	ip, r3
   1a198:	addeq	ip, ip, #32
   1a19c:	cmp	r5, #0
   1a1a0:	clzeq	r1, r4
   1a1a4:	addeq	r1, r1, #32
   1a1a8:	clzne	r1, r5
   1a1ac:	sub	ip, ip, r1
   1a1b0:	sub	sl, ip, #32
   1a1b4:	lsl	r9, r3, ip
   1a1b8:	rsb	fp, ip, #32
   1a1bc:	orr	r9, r9, r2, lsl sl
   1a1c0:	orr	r9, r9, r2, lsr fp
   1a1c4:	lsl	r8, r2, ip
   1a1c8:	cmp	r5, r9
   1a1cc:	cmpeq	r4, r8
   1a1d0:	movcc	r0, #0
   1a1d4:	movcc	r1, r0
   1a1d8:	bcc	1a1f4 <__assert_fail@plt+0x8b10>
   1a1dc:	mov	r0, #1
   1a1e0:	subs	r4, r4, r8
   1a1e4:	lsl	r1, r0, sl
   1a1e8:	orr	r1, r1, r0, lsr fp
   1a1ec:	lsl	r0, r0, ip
   1a1f0:	sbc	r5, r5, r9
   1a1f4:	cmp	ip, #0
   1a1f8:	beq	1a284 <__assert_fail@plt+0x8ba0>
   1a1fc:	lsr	r6, r8, #1
   1a200:	orr	r6, r6, r9, lsl #31
   1a204:	lsr	r7, r9, #1
   1a208:	mov	r2, ip
   1a20c:	b	1a230 <__assert_fail@plt+0x8b4c>
   1a210:	subs	r3, r4, r6
   1a214:	sbc	r8, r5, r7
   1a218:	adds	r3, r3, r3
   1a21c:	adc	r8, r8, r8
   1a220:	adds	r4, r3, #1
   1a224:	adc	r5, r8, #0
   1a228:	subs	r2, r2, #1
   1a22c:	beq	1a24c <__assert_fail@plt+0x8b68>
   1a230:	cmp	r5, r7
   1a234:	cmpeq	r4, r6
   1a238:	bcs	1a210 <__assert_fail@plt+0x8b2c>
   1a23c:	adds	r4, r4, r4
   1a240:	adc	r5, r5, r5
   1a244:	subs	r2, r2, #1
   1a248:	bne	1a230 <__assert_fail@plt+0x8b4c>
   1a24c:	lsr	r3, r4, ip
   1a250:	orr	r3, r3, r5, lsl fp
   1a254:	lsr	r2, r5, ip
   1a258:	orr	r3, r3, r5, lsr sl
   1a25c:	adds	r0, r0, r4
   1a260:	mov	r4, r3
   1a264:	lsl	r3, r2, ip
   1a268:	orr	r3, r3, r4, lsl sl
   1a26c:	lsl	ip, r4, ip
   1a270:	orr	r3, r3, r4, lsr fp
   1a274:	adc	r1, r1, r5
   1a278:	subs	r0, r0, ip
   1a27c:	mov	r5, r2
   1a280:	sbc	r1, r1, r3
   1a284:	cmp	lr, #0
   1a288:	strdne	r4, [lr]
   1a28c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a290:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a294:	mov	r7, r0
   1a298:	ldr	r6, [pc, #72]	; 1a2e8 <__assert_fail@plt+0x8c04>
   1a29c:	ldr	r5, [pc, #72]	; 1a2ec <__assert_fail@plt+0x8c08>
   1a2a0:	add	r6, pc, r6
   1a2a4:	add	r5, pc, r5
   1a2a8:	sub	r6, r6, r5
   1a2ac:	mov	r8, r1
   1a2b0:	mov	r9, r2
   1a2b4:	bl	11334 <fdopen@plt-0x20>
   1a2b8:	asrs	r6, r6, #2
   1a2bc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a2c0:	mov	r4, #0
   1a2c4:	add	r4, r4, #1
   1a2c8:	ldr	r3, [r5], #4
   1a2cc:	mov	r2, r9
   1a2d0:	mov	r1, r8
   1a2d4:	mov	r0, r7
   1a2d8:	blx	r3
   1a2dc:	cmp	r6, r4
   1a2e0:	bne	1a2c4 <__assert_fail@plt+0x8be0>
   1a2e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a2e8:	andeq	r1, r1, r4, ror #24
   1a2ec:	andeq	r1, r1, ip, asr ip
   1a2f0:	bx	lr
   1a2f4:	ldr	r3, [pc, #12]	; 1a308 <__assert_fail@plt+0x8c24>
   1a2f8:	mov	r1, #0
   1a2fc:	add	r3, pc, r3
   1a300:	ldr	r2, [r3]
   1a304:	b	11570 <__cxa_atexit@plt>
   1a308:	andeq	r1, r1, r8, asr #28

Disassembly of section .fini:

0001a30c <.fini>:
   1a30c:	push	{r3, lr}
   1a310:	pop	{r3, pc}
