
../repos/coreutils/src/dd:     file format elf32-littlearm


Disassembly of section .init:

0001112c <.init>:
   1112c:	push	{r3, lr}
   11130:	bl	1340c <__assert_fail@plt+0x1f30>
   11134:	pop	{r3, pc}

Disassembly of section .plt:

00011138 <calloc@plt-0x14>:
   11138:	push	{lr}		; (str lr, [sp, #-4]!)
   1113c:	ldr	lr, [pc, #4]	; 11148 <calloc@plt-0x4>
   11140:	add	lr, pc, lr
   11144:	ldr	pc, [lr, #8]!
   11148:			; <UNDEFINED> instruction: 0x0001feb8

0001114c <calloc@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #126976	; 0x1f000
   11154:	ldr	pc, [ip, #3768]!	; 0xeb8

00011158 <fputs_unlocked@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #126976	; 0x1f000
   11160:	ldr	pc, [ip, #3760]!	; 0xeb0

00011164 <raise@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #126976	; 0x1f000
   1116c:	ldr	pc, [ip, #3752]!	; 0xea8

00011170 <fsync@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #126976	; 0x1f000
   11178:	ldr	pc, [ip, #3744]!	; 0xea0

0001117c <strcmp@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #126976	; 0x1f000
   11184:	ldr	pc, [ip, #3736]!	; 0xe98

00011188 <posix_fadvise64@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #126976	; 0x1f000
   11190:	ldr	pc, [ip, #3728]!	; 0xe90

00011194 <read@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #126976	; 0x1f000
   1119c:	ldr	pc, [ip, #3720]!	; 0xe88

000111a0 <fflush@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #126976	; 0x1f000
   111a8:	ldr	pc, [ip, #3712]!	; 0xe80

000111ac <sigprocmask@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #126976	; 0x1f000
   111b4:	ldr	pc, [ip, #3704]!	; 0xe78

000111b8 <memmove@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #126976	; 0x1f000
   111c0:	ldr	pc, [ip, #3696]!	; 0xe70

000111c4 <free@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #126976	; 0x1f000
   111cc:	ldr	pc, [ip, #3688]!	; 0xe68

000111d0 <clock_gettime@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #126976	; 0x1f000
   111d8:	ldr	pc, [ip, #3680]!	; 0xe60

000111dc <_exit@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #126976	; 0x1f000
   111e4:	ldr	pc, [ip, #3672]!	; 0xe58

000111e8 <memcpy@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #126976	; 0x1f000
   111f0:	ldr	pc, [ip, #3664]!	; 0xe50

000111f4 <__strtoull_internal@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #126976	; 0x1f000
   111fc:	ldr	pc, [ip, #3656]!	; 0xe48

00011200 <mbsinit@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #126976	; 0x1f000
   11208:	ldr	pc, [ip, #3648]!	; 0xe40

0001120c <ftruncate64@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #126976	; 0x1f000
   11214:	ldr	pc, [ip, #3640]!	; 0xe38

00011218 <memcmp@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #126976	; 0x1f000
   11220:	ldr	pc, [ip, #3632]!	; 0xe30

00011224 <fputc_unlocked@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #126976	; 0x1f000
   1122c:	ldr	pc, [ip, #3624]!	; 0xe28

00011230 <dcgettext@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #126976	; 0x1f000
   11238:	ldr	pc, [ip, #3616]!	; 0xe20

0001123c <dup2@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #126976	; 0x1f000
   11244:	ldr	pc, [ip, #3608]!	; 0xe18

00011248 <realloc@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #126976	; 0x1f000
   11250:	ldr	pc, [ip, #3600]!	; 0xe10

00011254 <sigismember@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #126976	; 0x1f000
   1125c:	ldr	pc, [ip, #3592]!	; 0xe08

00011260 <textdomain@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #126976	; 0x1f000
   11268:	ldr	pc, [ip, #3584]!	; 0xe00

0001126c <iswprint@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #126976	; 0x1f000
   11274:	ldr	pc, [ip, #3576]!	; 0xdf8

00011278 <__fxstat64@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #126976	; 0x1f000
   11280:	ldr	pc, [ip, #3568]!	; 0xdf0

00011284 <sigaction@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #126976	; 0x1f000
   1128c:	ldr	pc, [ip, #3560]!	; 0xde8

00011290 <__memcpy_chk@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #126976	; 0x1f000
   11298:	ldr	pc, [ip, #3552]!	; 0xde0

0001129c <fwrite@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #126976	; 0x1f000
   112a4:	ldr	pc, [ip, #3544]!	; 0xdd8

000112a8 <lseek64@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #126976	; 0x1f000
   112b0:	ldr	pc, [ip, #3536]!	; 0xdd0

000112b4 <__ctype_get_mb_cur_max@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #126976	; 0x1f000
   112bc:	ldr	pc, [ip, #3528]!	; 0xdc8

000112c0 <__fpending@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #126976	; 0x1f000
   112c8:	ldr	pc, [ip, #3520]!	; 0xdc0

000112cc <mbrtowc@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #126976	; 0x1f000
   112d4:	ldr	pc, [ip, #3512]!	; 0xdb8

000112d8 <error@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #126976	; 0x1f000
   112e0:	ldr	pc, [ip, #3504]!	; 0xdb0

000112e4 <open64@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #126976	; 0x1f000
   112ec:	ldr	pc, [ip, #3496]!	; 0xda8

000112f0 <getenv@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #126976	; 0x1f000
   112f8:	ldr	pc, [ip, #3488]!	; 0xda0

000112fc <malloc@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #126976	; 0x1f000
   11304:	ldr	pc, [ip, #3480]!	; 0xd98

00011308 <error_at_line@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #126976	; 0x1f000
   11310:	ldr	pc, [ip, #3472]!	; 0xd90

00011314 <sigaddset@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #126976	; 0x1f000
   1131c:	ldr	pc, [ip, #3464]!	; 0xd88

00011320 <__libc_start_main@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #126976	; 0x1f000
   11328:	ldr	pc, [ip, #3456]!	; 0xd80

0001132c <__freading@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #126976	; 0x1f000
   11334:	ldr	pc, [ip, #3448]!	; 0xd78

00011338 <__ctype_tolower_loc@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #126976	; 0x1f000
   11340:	ldr	pc, [ip, #3440]!	; 0xd70

00011344 <__ctype_toupper_loc@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #126976	; 0x1f000
   1134c:	ldr	pc, [ip, #3432]!	; 0xd68

00011350 <__gmon_start__@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #126976	; 0x1f000
   11358:	ldr	pc, [ip, #3424]!	; 0xd60

0001135c <getopt_long@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #126976	; 0x1f000
   11364:	ldr	pc, [ip, #3416]!	; 0xd58

00011368 <__ctype_b_loc@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #126976	; 0x1f000
   11370:	ldr	pc, [ip, #3408]!	; 0xd50

00011374 <exit@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #126976	; 0x1f000
   1137c:	ldr	pc, [ip, #3400]!	; 0xd48

00011380 <strlen@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #126976	; 0x1f000
   11388:	ldr	pc, [ip, #3392]!	; 0xd40

0001138c <strchr@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #126976	; 0x1f000
   11394:	ldr	pc, [ip, #3384]!	; 0xd38

00011398 <getpagesize@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #126976	; 0x1f000
   113a0:	ldr	pc, [ip, #3376]!	; 0xd30

000113a4 <__errno_location@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #126976	; 0x1f000
   113ac:	ldr	pc, [ip, #3368]!	; 0xd28

000113b0 <__sprintf_chk@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #126976	; 0x1f000
   113b8:	ldr	pc, [ip, #3360]!	; 0xd20

000113bc <__cxa_atexit@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #126976	; 0x1f000
   113c4:	ldr	pc, [ip, #3352]!	; 0xd18

000113c8 <__vasprintf_chk@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #126976	; 0x1f000
   113d0:	ldr	pc, [ip, #3344]!	; 0xd10

000113d4 <memset@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #126976	; 0x1f000
   113dc:	ldr	pc, [ip, #3336]!	; 0xd08

000113e0 <__printf_chk@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #126976	; 0x1f000
   113e8:	ldr	pc, [ip, #3328]!	; 0xd00

000113ec <write@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #126976	; 0x1f000
   113f4:	ldr	pc, [ip, #3320]!	; 0xcf8

000113f8 <fileno@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #126976	; 0x1f000
   11400:	ldr	pc, [ip, #3312]!	; 0xcf0

00011404 <__fprintf_chk@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #126976	; 0x1f000
   1140c:	ldr	pc, [ip, #3304]!	; 0xce8

00011410 <fclose@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #126976	; 0x1f000
   11418:	ldr	pc, [ip, #3296]!	; 0xce0

0001141c <fseeko64@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #126976	; 0x1f000
   11424:	ldr	pc, [ip, #3288]!	; 0xcd8

00011428 <fcntl64@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #126976	; 0x1f000
   11430:	ldr	pc, [ip, #3280]!	; 0xcd0

00011434 <__overflow@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #126976	; 0x1f000
   1143c:	ldr	pc, [ip, #3272]!	; 0xcc8

00011440 <setlocale@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #126976	; 0x1f000
   11448:	ldr	pc, [ip, #3264]!	; 0xcc0

0001144c <sigemptyset@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #126976	; 0x1f000
   11454:	ldr	pc, [ip, #3256]!	; 0xcb8

00011458 <strrchr@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #126976	; 0x1f000
   11460:	ldr	pc, [ip, #3248]!	; 0xcb0

00011464 <nl_langinfo@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #126976	; 0x1f000
   1146c:	ldr	pc, [ip, #3240]!	; 0xca8

00011470 <localeconv@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #126976	; 0x1f000
   11478:	ldr	pc, [ip, #3232]!	; 0xca0

0001147c <bindtextdomain@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #126976	; 0x1f000
   11484:	ldr	pc, [ip, #3224]!	; 0xc98

00011488 <aligned_alloc@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #126976	; 0x1f000
   11490:	ldr	pc, [ip, #3216]!	; 0xc90

00011494 <strncmp@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #126976	; 0x1f000
   1149c:	ldr	pc, [ip, #3208]!	; 0xc88

000114a0 <fdatasync@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #126976	; 0x1f000
   114a8:	ldr	pc, [ip, #3200]!	; 0xc80

000114ac <abort@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #126976	; 0x1f000
   114b4:	ldr	pc, [ip, #3192]!	; 0xc78

000114b8 <close@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #126976	; 0x1f000
   114c0:	ldr	pc, [ip, #3184]!	; 0xc70

000114c4 <dcngettext@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #126976	; 0x1f000
   114cc:	ldr	pc, [ip, #3176]!	; 0xc68

000114d0 <__snprintf_chk@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #126976	; 0x1f000
   114d8:	ldr	pc, [ip, #3168]!	; 0xc60

000114dc <__assert_fail@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #126976	; 0x1f000
   114e4:	ldr	pc, [ip, #3160]!	; 0xc58

Disassembly of section .text:

000114e8 <.text>:
   114e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   114ec:	strd	r6, [sp, #8]
   114f0:	mov	r7, r1
   114f4:	strd	r8, [sp, #16]
   114f8:	mov	r9, r0
   114fc:	movw	r0, #63000	; 0xf618
   11500:	movt	r0, #1
   11504:	strd	sl, [sp, #24]
   11508:	str	lr, [sp, #32]
   1150c:	sub	sp, sp, #244	; 0xf4
   11510:	bl	112f0 <getenv@plt>
   11514:	mov	r4, r0
   11518:	ldr	r0, [pc, #4072]	; 12508 <__assert_fail@plt+0x102c>
   1151c:	bl	1144c <sigemptyset@plt>
   11520:	cmp	r4, #0
   11524:	beq	12b9c <__assert_fail@plt+0x16c0>
   11528:	mov	r1, #0
   1152c:	add	r2, sp, #96	; 0x60
   11530:	mov	r0, #2
   11534:	bl	11284 <sigaction@plt>
   11538:	ldr	r3, [sp, #96]	; 0x60
   1153c:	cmp	r3, #1
   11540:	beq	11550 <__assert_fail@plt+0x74>
   11544:	mov	r1, #2
   11548:	ldr	r0, [pc, #4024]	; 12508 <__assert_fail@plt+0x102c>
   1154c:	bl	11314 <sigaddset@plt>
   11550:	mov	r2, #128	; 0x80
   11554:	ldr	r1, [pc, #4012]	; 12508 <__assert_fail@plt+0x102c>
   11558:	add	r0, sp, #100	; 0x64
   1155c:	bl	111e8 <memcpy@plt>
   11560:	mov	r1, #10
   11564:	ldr	r0, [pc, #3996]	; 12508 <__assert_fail@plt+0x102c>
   11568:	bl	11254 <sigismember@plt>
   1156c:	cmp	r0, #0
   11570:	bne	127dc <__assert_fail@plt+0x1300>
   11574:	mov	r1, #2
   11578:	ldr	r0, [pc, #3976]	; 12508 <__assert_fail@plt+0x102c>
   1157c:	bl	11254 <sigismember@plt>
   11580:	cmp	r0, #0
   11584:	bne	12804 <__assert_fail@plt+0x1328>
   11588:	ldr	r0, [r7]
   1158c:	mov	r6, #0
   11590:	movw	r4, #4584	; 0x11e8
   11594:	movt	r4, #3
   11598:	movw	fp, #4432	; 0x1150
   1159c:	movt	fp, #3
   115a0:	bl	1771c <__assert_fail@plt+0x6240>
   115a4:	movw	r1, #62008	; 0xf238
   115a8:	movt	r1, #1
   115ac:	mov	r0, #6
   115b0:	bl	11440 <setlocale@plt>
   115b4:	movw	r1, #63016	; 0xf628
   115b8:	movt	r1, #1
   115bc:	movw	r0, #62448	; 0xf3f0
   115c0:	movt	r0, #1
   115c4:	bl	1147c <bindtextdomain@plt>
   115c8:	movw	r0, #62448	; 0xf3f0
   115cc:	movt	r0, #1
   115d0:	bl	11260 <textdomain@plt>
   115d4:	movw	r0, #15800	; 0x3db8
   115d8:	movt	r0, #1
   115dc:	bl	1defc <__assert_fail@plt+0xca20>
   115e0:	bl	11398 <getpagesize@plt>
   115e4:	movw	r3, #4472	; 0x1178
   115e8:	movt	r3, #3
   115ec:	str	r6, [sp, #24]
   115f0:	ldr	r1, [r3]
   115f4:	movw	ip, #63040	; 0xf640
   115f8:	movt	ip, #1
   115fc:	movw	r2, #63052	; 0xf64c
   11600:	movt	r2, #1
   11604:	str	r0, [r4, #104]	; 0x68
   11608:	movw	r3, #63068	; 0xf65c
   1160c:	movt	r3, #1
   11610:	movw	r0, #17076	; 0x42b4
   11614:	movt	r0, #1
   11618:	str	ip, [sp, #20]
   1161c:	mov	ip, #1
   11620:	str	r1, [sp]
   11624:	mov	r1, r7
   11628:	str	ip, [sp, #4]
   1162c:	str	r0, [sp, #8]
   11630:	mov	r0, r9
   11634:	str	r3, [sp, #12]
   11638:	movw	r3, #62448	; 0xf3f0
   1163c:	movt	r3, #1
   11640:	str	r2, [sp, #16]
   11644:	movw	r2, #59044	; 0xe6a4
   11648:	movt	r2, #1
   1164c:	bl	17634 <__assert_fail@plt+0x6158>
   11650:	add	r3, r4, #304	; 0x130
   11654:	strb	r6, [fp, #24]
   11658:	sub	r5, r3, #1
   1165c:	mov	r3, r6
   11660:	mov	r2, r5
   11664:	strb	r3, [r2, #1]!
   11668:	add	r3, r3, #1
   1166c:	cmp	r3, #256	; 0x100
   11670:	bne	11664 <__assert_fail@plt+0x188>
   11674:	movw	r3, #4560	; 0x11d0
   11678:	movt	r3, #3
   1167c:	ldr	r6, [r3]
   11680:	mov	r3, #0
   11684:	str	r3, [sp, #92]	; 0x5c
   11688:	cmp	r9, r6
   1168c:	ble	1202c <__assert_fail@plt+0xb50>
   11690:	mov	r2, #0
   11694:	mov	r3, #0
   11698:	add	r7, r7, r6, lsl #2
   1169c:	strd	r2, [sp, #48]	; 0x30
   116a0:	strd	r2, [sp, #56]	; 0x38
   116a4:	mvn	r2, #0
   116a8:	mvn	r3, #-2147483648	; 0x80000000
   116ac:	strd	r2, [sp, #40]	; 0x28
   116b0:	ldr	sl, [r7], #4
   116b4:	mov	r1, #61	; 0x3d
   116b8:	mov	r0, sl
   116bc:	bl	1138c <strchr@plt>
   116c0:	subs	r8, r0, #0
   116c4:	beq	130b0 <__assert_fail@plt+0x1bd4>
   116c8:	movw	r2, #63104	; 0xf680
   116cc:	movt	r2, #1
   116d0:	add	r8, r8, #1
   116d4:	mov	r1, sl
   116d8:	mov	r3, #105	; 0x69
   116dc:	ldrb	r0, [r1], #1
   116e0:	cmp	r0, r3
   116e4:	bne	11ea4 <__assert_fail@plt+0x9c8>
   116e8:	ldrb	r3, [r2, #1]!
   116ec:	cmp	r3, #0
   116f0:	bne	116dc <__assert_fail@plt+0x200>
   116f4:	ldrb	r3, [r1]
   116f8:	cmp	r3, #61	; 0x3d
   116fc:	cmpne	r3, #0
   11700:	bne	11ea4 <__assert_fail@plt+0x9c8>
   11704:	str	r8, [r4, #260]	; 0x104
   11708:	add	r6, r6, #1
   1170c:	cmp	r9, r6
   11710:	bne	116b0 <__assert_fail@plt+0x1d4>
   11714:	ldr	r3, [sp, #92]	; 0x5c
   11718:	cmp	r3, #0
   1171c:	strne	r3, [r4, #108]	; 0x6c
   11720:	strne	r3, [r4, #120]	; 0x78
   11724:	beq	12048 <__assert_fail@plt+0xb6c>
   11728:	ldr	r3, [r4, #284]	; 0x11c
   1172c:	cmp	r3, #0
   11730:	beq	1201c <__assert_fail@plt+0xb40>
   11734:	ldr	r7, [r4, #268]	; 0x10c
   11738:	mov	r3, #4096	; 0x1000
   1173c:	movt	r3, #16
   11740:	ldr	r6, [r4, #296]	; 0x128
   11744:	tst	r6, r3
   11748:	orrne	r6, r6, r3
   1174c:	strne	r6, [r4, #296]	; 0x128
   11750:	ands	r9, r7, #1
   11754:	bne	1318c <__assert_fail@plt+0x1cb0>
   11758:	ands	r8, r6, #16
   1175c:	bne	132b4 <__assert_fail@plt+0x1dd8>
   11760:	tst	r7, #12
   11764:	bne	1325c <__assert_fail@plt+0x1d80>
   11768:	tst	r6, #8
   1176c:	ldrd	r0, [sp, #48]	; 0x30
   11770:	bne	11ff8 <__assert_fail@plt+0xb1c>
   11774:	orrs	r3, r0, r1
   11778:	ldrne	r3, [pc, #3432]	; 124e8 <__assert_fail@plt+0x100c>
   1177c:	strdne	r0, [r3]
   11780:	tst	r6, #4
   11784:	mvn	r2, #0
   11788:	ldrd	r0, [sp, #40]	; 0x28
   1178c:	mvn	r3, #-2147483648	; 0x80000000
   11790:	beq	12724 <__assert_fail@plt+0x1248>
   11794:	cmp	r1, r3
   11798:	cmpeq	r0, r2
   1179c:	beq	117b4 <__assert_fail@plt+0x2d8>
   117a0:	ldr	r2, [r4, #108]	; 0x6c
   117a4:	asr	r3, r2, #31
   117a8:	bl	1dc0c <__assert_fail@plt+0xc730>
   117ac:	strd	r0, [fp, #32]
   117b0:	str	r2, [r4, #572]	; 0x23c
   117b4:	tst	r7, #16
   117b8:	beq	12710 <__assert_fail@plt+0x1234>
   117bc:	ldrd	r0, [sp, #56]	; 0x38
   117c0:	orrs	r3, r0, r1
   117c4:	beq	117e0 <__assert_fail@plt+0x304>
   117c8:	ldr	r2, [r4, #120]	; 0x78
   117cc:	asr	r3, r2, #31
   117d0:	bl	1dc0c <__assert_fail@plt+0xc730>
   117d4:	ldr	ip, [pc, #3368]	; 12504 <__assert_fail@plt+0x1028>
   117d8:	strd	r0, [ip], #16
   117dc:	strd	r2, [ip, #-8]
   117e0:	ldr	sl, [r4, #116]	; 0x74
   117e4:	and	r1, r6, #1
   117e8:	and	r3, sl, #2048	; 0x800
   117ec:	orrs	r3, r3, r1
   117f0:	bne	125f4 <__assert_fail@plt+0x1118>
   117f4:	ldr	r3, [pc, #3308]	; 124e8 <__assert_fail@plt+0x100c>
   117f8:	ldrd	r2, [r3]
   117fc:	orrs	r3, r2, r3
   11800:	beq	128e8 <__assert_fail@plt+0x140c>
   11804:	mov	r2, #1
   11808:	movw	r3, #23352	; 0x5b38
   1180c:	movt	r3, #1
   11810:	strb	r2, [r4, #300]	; 0x12c
   11814:	and	r9, sl, #7
   11818:	bic	r2, r6, #1
   1181c:	str	r3, [r4, #264]	; 0x108
   11820:	mov	r3, r9
   11824:	sub	r9, r9, #1
   11828:	ands	r9, r9, r3
   1182c:	str	r2, [r4, #296]	; 0x128
   11830:	bne	131d4 <__assert_fail@plt+0x1cf8>
   11834:	and	r3, sl, #24
   11838:	sub	r8, r3, #1
   1183c:	ands	r8, r8, r3
   11840:	movwne	r1, #63344	; 0xf770
   11844:	movtne	r1, #1
   11848:	bne	131dc <__assert_fail@plt+0x1d00>
   1184c:	and	r3, sl, #96	; 0x60
   11850:	sub	r9, r3, #1
   11854:	ands	r9, r9, r3
   11858:	movwne	r1, #63380	; 0xf794
   1185c:	movtne	r1, #1
   11860:	bne	131dc <__assert_fail@plt+0x1d00>
   11864:	and	r3, sl, #12288	; 0x3000
   11868:	sub	r8, r3, #1
   1186c:	ands	r8, r8, r3
   11870:	movwne	r1, #63412	; 0xf7b4
   11874:	movtne	r1, #1
   11878:	bne	131dc <__assert_fail@plt+0x1d00>
   1187c:	mov	r2, #2
   11880:	movt	r2, #1
   11884:	and	r0, r6, r2
   11888:	and	r2, r2, r7
   1188c:	sub	r1, r2, #1
   11890:	sub	r3, r0, #1
   11894:	and	r3, r3, r0
   11898:	and	r2, r2, r1
   1189c:	orrs	r1, r3, r2
   118a0:	movwne	r1, #63444	; 0xf7d4
   118a4:	movtne	r1, #1
   118a8:	bne	131dc <__assert_fail@plt+0x1d00>
   118ac:	tst	r6, #2
   118b0:	beq	118e0 <__assert_fail@plt+0x404>
   118b4:	ldrd	r2, [fp, #32]
   118b8:	mov	r0, #1
   118bc:	bic	r6, r6, #3
   118c0:	str	r6, [r4, #296]	; 0x128
   118c4:	strb	r0, [r4, #592]	; 0x250
   118c8:	orrs	r3, r2, r3
   118cc:	ldreq	r3, [r4, #572]	; 0x23c
   118d0:	movne	r3, r1
   118d4:	clzeq	r3, r3
   118d8:	lsreq	r3, r3, #5
   118dc:	strb	r3, [r4, #88]	; 0x58
   118e0:	tst	r7, #2
   118e4:	beq	11914 <__assert_fail@plt+0x438>
   118e8:	ldrd	r2, [fp, #32]
   118ec:	mov	r1, #1
   118f0:	bic	r7, r7, #2
   118f4:	str	r7, [r4, #268]	; 0x10c
   118f8:	strb	r1, [r4, #273]	; 0x111
   118fc:	orrs	r3, r2, r3
   11900:	ldreq	r3, [r4, #572]	; 0x23c
   11904:	movne	r3, #0
   11908:	clzeq	r3, r3
   1190c:	lsreq	r3, r3, #5
   11910:	strb	r3, [r4, #89]	; 0x59
   11914:	tst	sl, #1
   11918:	beq	11950 <__assert_fail@plt+0x474>
   1191c:	ldr	r3, [pc, #3032]	; 124fc <__assert_fail@plt+0x1020>
   11920:	movw	r1, #57120	; 0xdf20
   11924:	movt	r1, #1
   11928:	add	r0, r3, #255	; 0xff
   1192c:	mov	r3, r5
   11930:	ldrb	r2, [r3, #1]!
   11934:	add	r2, r1, r2
   11938:	cmp	r0, r3
   1193c:	ldrb	r2, [r2, #696]	; 0x2b8
   11940:	strb	r2, [r3]
   11944:	bne	11930 <__assert_fail@plt+0x454>
   11948:	mov	r3, #1
   1194c:	strb	r3, [r4, #593]	; 0x251
   11950:	tst	sl, #64	; 0x40
   11954:	beq	126dc <__assert_fail@plt+0x1200>
   11958:	bl	11344 <__ctype_toupper_loc@plt>
   1195c:	ldr	r3, [pc, #2968]	; 124fc <__assert_fail@plt+0x1020>
   11960:	ldr	r0, [r0]
   11964:	add	r1, r3, #255	; 0xff
   11968:	mov	r3, r5
   1196c:	ldrb	r2, [r3, #1]!
   11970:	ldr	r2, [r0, r2, lsl #2]
   11974:	cmp	r1, r3
   11978:	strb	r2, [r3]
   1197c:	bne	1196c <__assert_fail@plt+0x490>
   11980:	mov	r3, #1
   11984:	strb	r3, [r4, #593]	; 0x251
   11988:	tst	sl, #2
   1198c:	beq	126a8 <__assert_fail@plt+0x11cc>
   11990:	ldr	r3, [pc, #2916]	; 124fc <__assert_fail@plt+0x1020>
   11994:	movw	r1, #57120	; 0xdf20
   11998:	movt	r1, #1
   1199c:	add	r2, r3, #255	; 0xff
   119a0:	ldrb	r3, [r5, #1]!
   119a4:	add	r3, r1, r3
   119a8:	cmp	r2, r5
   119ac:	ldrb	r3, [r3, #952]	; 0x3b8
   119b0:	strb	r3, [r5]
   119b4:	bne	119a0 <__assert_fail@plt+0x4c4>
   119b8:	mov	r3, #1
   119bc:	mov	r1, #37	; 0x25
   119c0:	mov	r2, #64	; 0x40
   119c4:	strb	r1, [fp, #25]
   119c8:	strb	r2, [fp, #26]
   119cc:	strb	r3, [r4, #593]	; 0x251
   119d0:	bl	113a4 <__errno_location@plt>
   119d4:	ldr	r5, [r4, #260]	; 0x104
   119d8:	mov	r9, r0
   119dc:	ldr	r6, [r4, #296]	; 0x128
   119e0:	cmp	r5, #0
   119e4:	beq	1282c <__assert_fail@plt+0x1350>
   119e8:	mov	r3, #0
   119ec:	mov	r2, r6
   119f0:	mov	r1, r5
   119f4:	mov	r0, r3
   119f8:	bl	153a0 <__assert_fail@plt+0x3ec4>
   119fc:	cmp	r0, #0
   11a00:	blt	131f8 <__assert_fail@plt+0x1d1c>
   11a04:	mov	r1, #1
   11a08:	mov	r2, #0
   11a0c:	mov	r3, #0
   11a10:	mov	r0, #0
   11a14:	str	r1, [sp]
   11a18:	bl	112a8 <lseek64@plt>
   11a1c:	mov	r2, r0
   11a20:	mov	r3, r1
   11a24:	ldr	sl, [r4, #256]	; 0x100
   11a28:	cmp	r2, #0
   11a2c:	mvn	r1, r1
   11a30:	sbcs	r0, r3, #0
   11a34:	lsr	r1, r1, #31
   11a38:	ldr	r5, [r4, #268]	; 0x10c
   11a3c:	movlt	r3, #0
   11a40:	movlt	r2, #0
   11a44:	cmp	sl, #0
   11a48:	strb	r1, [r4, #90]	; 0x5a
   11a4c:	strd	r2, [r4, #96]	; 0x60
   11a50:	ldr	r3, [r9]
   11a54:	str	r3, [r4, #596]	; 0x254
   11a58:	beq	12b68 <__assert_fail@plt+0x168c>
   11a5c:	ldr	r8, [pc, #2720]	; 12504 <__assert_fail@plt+0x1028>
   11a60:	ldr	ip, [r4, #116]	; 0x74
   11a64:	ldr	r2, [r4, #120]	; 0x78
   11a68:	ldrd	r6, [r8]
   11a6c:	asr	r3, ip, #6
   11a70:	tst	ip, #4096	; 0x1000
   11a74:	and	r3, r3, #128	; 0x80
   11a78:	orr	r5, r3, r5
   11a7c:	movne	r3, #0
   11a80:	moveq	r3, #64	; 0x40
   11a84:	orrs	r1, r6, r7
   11a88:	strd	r6, [sp, #40]	; 0x28
   11a8c:	orr	r5, r5, r3
   11a90:	bne	1275c <__assert_fail@plt+0x1280>
   11a94:	ldrd	r6, [r8, #8]
   11a98:	tst	ip, #512	; 0x200
   11a9c:	moveq	r3, #512	; 0x200
   11aa0:	movne	r3, #0
   11aa4:	orr	r5, r5, r3
   11aa8:	orr	r2, r5, #1
   11aac:	movw	r3, #438	; 0x1b6
   11ab0:	ldr	r1, [r4, #256]	; 0x100
   11ab4:	mov	r0, #1
   11ab8:	bl	153a0 <__assert_fail@plt+0x3ec4>
   11abc:	cmp	r0, #0
   11ac0:	blt	13234 <__assert_fail@plt+0x1d58>
   11ac4:	ldrd	r2, [r8]
   11ac8:	orrs	r3, r2, r3
   11acc:	beq	11adc <__assert_fail@plt+0x600>
   11ad0:	ldr	r3, [r4, #116]	; 0x74
   11ad4:	tst	r3, #512	; 0x200
   11ad8:	beq	12084 <__assert_fail@plt+0xba8>
   11adc:	bl	163f8 <__assert_fail@plt+0x4f1c>
   11ae0:	ldr	ip, [pc, #2564]	; 124ec <__assert_fail@plt+0x1010>
   11ae4:	mov	r2, #51712	; 0xca00
   11ae8:	movt	r2, #15258	; 0x3b9a
   11aec:	mov	r3, #0
   11af0:	strd	r0, [r4, #16]
   11af4:	adds	r0, r0, r2
   11af8:	adc	r1, r1, r3
   11afc:	ldrd	r6, [ip, #-48]	; 0xffffffd0
   11b00:	strd	r0, [ip, #-8]
   11b04:	orrs	r3, r6, r7
   11b08:	strd	r6, [sp, #40]	; 0x28
   11b0c:	bne	12668 <__assert_fail@plt+0x118c>
   11b10:	ldr	r3, [r4, #568]	; 0x238
   11b14:	cmp	r3, #0
   11b18:	beq	11bd4 <__assert_fail@plt+0x6f8>
   11b1c:	ldrd	r2, [sp, #40]	; 0x28
   11b20:	ldr	ip, [r4, #108]	; 0x6c
   11b24:	strd	r2, [sp, #48]	; 0x30
   11b28:	ldr	r2, [r4, #568]	; 0x238
   11b2c:	ldrd	r6, [sp, #48]	; 0x30
   11b30:	asr	r3, r2, #31
   11b34:	adds	r0, r2, r6
   11b38:	adcs	r1, r3, r7
   11b3c:	movvs	sl, #1
   11b40:	movvc	sl, #0
   11b44:	strd	r0, [sp, #48]	; 0x30
   11b48:	ldr	lr, [pc, #2464]	; 124f0 <__assert_fail@plt+0x1014>
   11b4c:	mov	r0, #0
   11b50:	str	ip, [sp]
   11b54:	ldrd	r2, [sp, #40]	; 0x28
   11b58:	ldr	r5, [r4, #96]	; 0x60
   11b5c:	ldr	r1, [r4, #260]	; 0x104
   11b60:	str	lr, [sp, #4]
   11b64:	ldr	r6, [r4, #100]	; 0x64
   11b68:	bl	14f00 <__assert_fail@plt+0x3a24>
   11b6c:	orrs	r3, r0, r1
   11b70:	bne	11b8c <__assert_fail@plt+0x6b0>
   11b74:	ldrd	r2, [r4, #96]	; 0x60
   11b78:	cmp	r2, #0
   11b7c:	sbcs	r1, r3, #0
   11b80:	blt	11bd4 <__assert_fail@plt+0x6f8>
   11b84:	cmp	sl, #0
   11b88:	beq	12934 <__assert_fail@plt+0x1458>
   11b8c:	ldr	r3, [fp, #8]
   11b90:	cmp	r3, #1
   11b94:	beq	11bd4 <__assert_fail@plt+0x6f8>
   11b98:	mov	r2, #5
   11b9c:	movw	r1, #63664	; 0xf8b0
   11ba0:	movt	r1, #1
   11ba4:	mov	r0, #0
   11ba8:	bl	11230 <dcgettext@plt>
   11bac:	mov	r5, r0
   11bb0:	mov	r1, #3
   11bb4:	ldr	r2, [r4, #260]	; 0x104
   11bb8:	mov	r0, #0
   11bbc:	bl	1a8e0 <__assert_fail@plt+0x9404>
   11bc0:	mov	r1, #0
   11bc4:	mov	r3, r0
   11bc8:	mov	r2, r5
   11bcc:	mov	r0, r1
   11bd0:	bl	13a94 <__assert_fail@plt+0x25b8>
   11bd4:	ldr	lr, [pc, #2364]	; 12518 <__assert_fail@plt+0x103c>
   11bd8:	ldr	r3, [r8, #4]
   11bdc:	ldr	r2, [r4, #576]	; 0x240
   11be0:	ldmdb	lr, {ip, lr}
   11be4:	orr	r0, r2, ip
   11be8:	orr	r1, r3, lr
   11bec:	orrs	r1, r0, r1
   11bf0:	beq	11c7c <__assert_fail@plt+0x7a0>
   11bf4:	ldr	lr, [r4, #120]	; 0x78
   11bf8:	add	r1, sp, #96	; 0x60
   11bfc:	mov	r0, #1
   11c00:	str	r1, [sp, #4]
   11c04:	ldr	r1, [r4, #256]	; 0x100
   11c08:	str	ip, [sp, #96]	; 0x60
   11c0c:	str	lr, [sp]
   11c10:	bl	14f00 <__assert_fail@plt+0x3a24>
   11c14:	mov	r6, r0
   11c18:	mov	r7, r1
   11c1c:	orrs	r3, r6, r7
   11c20:	beq	127bc <__assert_fail@plt+0x12e0>
   11c24:	mov	r1, #0
   11c28:	ldr	r2, [r4, #120]	; 0x78
   11c2c:	ldr	r0, [r4, #124]	; 0x7c
   11c30:	bl	113d4 <memset@plt>
   11c34:	ldr	r5, [r4, #120]	; 0x78
   11c38:	ldr	r0, [r4, #124]	; 0x7c
   11c3c:	mov	r1, r5
   11c40:	bl	15490 <__assert_fail@plt+0x3fb4>
   11c44:	cmp	r5, r0
   11c48:	bne	130e8 <__assert_fail@plt+0x1c0c>
   11c4c:	subs	r6, r6, #1
   11c50:	sbc	r7, r7, #0
   11c54:	orrs	r3, r6, r7
   11c58:	bne	11c34 <__assert_fail@plt+0x758>
   11c5c:	ldr	r5, [sp, #96]	; 0x60
   11c60:	cmp	r5, #0
   11c64:	beq	11c7c <__assert_fail@plt+0x7a0>
   11c68:	mov	r1, r5
   11c6c:	ldr	r0, [r4, #124]	; 0x7c
   11c70:	bl	15490 <__assert_fail@plt+0x3fb4>
   11c74:	cmp	r0, r5
   11c78:	bne	130e8 <__assert_fail@plt+0x1c0c>
   11c7c:	ldrd	r2, [fp, #32]
   11c80:	orrs	r3, r2, r3
   11c84:	bne	11c98 <__assert_fail@plt+0x7bc>
   11c88:	ldr	r3, [r4, #572]	; 0x23c
   11c8c:	cmp	r3, #0
   11c90:	str	r3, [sp, #48]	; 0x30
   11c94:	beq	122dc <__assert_fail@plt+0xe00>
   11c98:	movw	r3, #62788	; 0xf544
   11c9c:	movt	r3, #1
   11ca0:	mov	sl, #0
   11ca4:	str	r3, [sp, #64]	; 0x40
   11ca8:	movw	r3, #62772	; 0xf534
   11cac:	movt	r3, #1
   11cb0:	str	sl, [sp, #48]	; 0x30
   11cb4:	str	r3, [sp, #72]	; 0x48
   11cb8:	mvn	r3, #0
   11cbc:	str	r3, [sp, #56]	; 0x38
   11cc0:	bl	13e6c <__assert_fail@plt+0x2990>
   11cc4:	bl	13f20 <__assert_fail@plt+0x2a44>
   11cc8:	str	r9, [sp, #40]	; 0x28
   11ccc:	ldr	r3, [fp, #8]
   11cd0:	cmp	r3, #4
   11cd4:	beq	11e60 <__assert_fail@plt+0x984>
   11cd8:	ldr	r3, [r4, #48]	; 0x30
   11cdc:	ldr	r0, [r4, #52]	; 0x34
   11ce0:	ldr	r2, [r4, #56]	; 0x38
   11ce4:	ldr	r1, [r4, #60]	; 0x3c
   11ce8:	ldr	r5, [r4, #572]	; 0x23c
   11cec:	adds	r3, r3, r2
   11cf0:	ldrd	r6, [fp, #32]
   11cf4:	str	r3, [sp, #32]
   11cf8:	adc	r3, r0, r1
   11cfc:	ldr	r1, [r4, #116]	; 0x74
   11d00:	str	r3, [sp, #36]	; 0x24
   11d04:	adds	r0, r5, #0
   11d08:	ldrd	r8, [sp, #32]
   11d0c:	movne	r0, #1
   11d10:	adds	r2, r6, r0
   11d14:	adc	r3, r7, #0
   11d18:	cmp	r8, r2
   11d1c:	sbcs	r3, r9, r3
   11d20:	bge	12a10 <__assert_fail@plt+0x1534>
   11d24:	and	r2, r1, #1280	; 0x500
   11d28:	ldr	r3, [r4, #112]	; 0x70
   11d2c:	cmp	r2, #1280	; 0x500
   11d30:	bne	11d4c <__assert_fail@plt+0x870>
   11d34:	ands	r1, r1, #24
   11d38:	mov	r0, r3
   11d3c:	ldr	r2, [r4, #108]	; 0x6c
   11d40:	movne	r1, #32
   11d44:	bl	113d4 <memset@plt>
   11d48:	mov	r3, r0
   11d4c:	ldrd	r0, [sp, #32]
   11d50:	cmp	r0, r6
   11d54:	ldr	r6, [r4, #264]	; 0x108
   11d58:	sbcs	r2, r1, r7
   11d5c:	blt	12110 <__assert_fail@plt+0xc34>
   11d60:	mov	r2, r5
   11d64:	mov	r1, r3
   11d68:	mov	r0, #0
   11d6c:	blx	r6
   11d70:	mov	r5, r0
   11d74:	cmp	r5, #0
   11d78:	ble	1212c <__assert_fail@plt+0xc50>
   11d7c:	ldrd	r0, [r4, #96]	; 0x60
   11d80:	mov	r2, r5
   11d84:	asr	r3, r5, #31
   11d88:	cmp	r0, #0
   11d8c:	sbcs	ip, r1, #0
   11d90:	blt	11dac <__assert_fail@plt+0x8d0>
   11d94:	adds	r6, r0, r5
   11d98:	adcs	r7, r1, r3
   11d9c:	mvnvs	r0, #0
   11da0:	mvnvs	r1, #0
   11da4:	strdvc	r6, [r4, #96]	; 0x60
   11da8:	strdvs	r0, [r4, #96]	; 0x60
   11dac:	ldrb	r1, [r4, #592]	; 0x250
   11db0:	cmp	r1, #0
   11db4:	bne	12424 <__assert_fail@plt+0xf48>
   11db8:	ldr	r2, [r4, #108]	; 0x6c
   11dbc:	ldr	r8, [r4, #112]	; 0x70
   11dc0:	cmp	r5, r2
   11dc4:	bge	12248 <__assert_fail@plt+0xd6c>
   11dc8:	ldr	r3, [r4, #48]	; 0x30
   11dcc:	ldr	r1, [r4, #52]	; 0x34
   11dd0:	ldr	r0, [r4, #116]	; 0x74
   11dd4:	adds	r3, r3, #1
   11dd8:	adc	r1, r1, #0
   11ddc:	str	r3, [r4, #48]	; 0x30
   11de0:	tst	r0, #1024	; 0x400
   11de4:	str	r1, [r4, #52]	; 0x34
   11de8:	moveq	sl, r5
   11dec:	beq	11e14 <__assert_fail@plt+0x938>
   11df0:	tst	r0, #256	; 0x100
   11df4:	bne	11e0c <__assert_fail@plt+0x930>
   11df8:	ands	r1, r0, #24
   11dfc:	sub	r2, r2, r5
   11e00:	movne	r1, #32
   11e04:	add	r0, r8, r5
   11e08:	bl	113d4 <memset@plt>
   11e0c:	mov	sl, r5
   11e10:	ldr	r5, [r4, #108]	; 0x6c
   11e14:	ldr	r0, [r4, #124]	; 0x7c
   11e18:	cmp	r0, r8
   11e1c:	beq	12270 <__assert_fail@plt+0xd94>
   11e20:	ldrb	r3, [r4, #593]	; 0x251
   11e24:	cmp	r3, #0
   11e28:	bne	12430 <__assert_fail@plt+0xf54>
   11e2c:	ldr	r2, [r4, #116]	; 0x74
   11e30:	tst	r2, #128	; 0x80
   11e34:	bne	124d8 <__assert_fail@plt+0xffc>
   11e38:	tst	r2, #8
   11e3c:	bne	1239c <__assert_fail@plt+0xec0>
   11e40:	tst	r2, #16
   11e44:	beq	12334 <__assert_fail@plt+0xe58>
   11e48:	mov	r1, r5
   11e4c:	mov	r0, r8
   11e50:	bl	15934 <__assert_fail@plt+0x4458>
   11e54:	ldr	r3, [fp, #8]
   11e58:	cmp	r3, #4
   11e5c:	bne	11cd8 <__assert_fail@plt+0x7fc>
   11e60:	bl	163f8 <__assert_fail@plt+0x4f1c>
   11e64:	ldr	r3, [pc, #1664]	; 124ec <__assert_fail@plt+0x1010>
   11e68:	ldrd	r2, [r3, #-8]
   11e6c:	cmp	r0, r2
   11e70:	sbcs	r3, r1, r3
   11e74:	blt	11cd8 <__assert_fail@plt+0x7fc>
   11e78:	bl	134e8 <__assert_fail@plt+0x200c>
   11e7c:	ldr	r1, [pc, #1640]	; 124ec <__assert_fail@plt+0x1010>
   11e80:	mov	r0, #51712	; 0xca00
   11e84:	movt	r0, #15258	; 0x3b9a
   11e88:	ldr	r3, [r1, #-8]
   11e8c:	ldr	r2, [r1, #-4]
   11e90:	adds	r3, r3, r0
   11e94:	adc	r2, r2, #0
   11e98:	str	r3, [r1, #-8]
   11e9c:	str	r2, [r1, #-4]
   11ea0:	b	11cd8 <__assert_fail@plt+0x7fc>
   11ea4:	movw	r2, #63108	; 0xf684
   11ea8:	movt	r2, #1
   11eac:	mov	r1, sl
   11eb0:	mov	r3, #111	; 0x6f
   11eb4:	ldrb	r0, [r1], #1
   11eb8:	cmp	r0, r3
   11ebc:	bne	11ee4 <__assert_fail@plt+0xa08>
   11ec0:	ldrb	r3, [r2, #1]!
   11ec4:	cmp	r3, #0
   11ec8:	bne	11eb4 <__assert_fail@plt+0x9d8>
   11ecc:	ldrb	r3, [r1]
   11ed0:	cmp	r3, #61	; 0x3d
   11ed4:	cmpne	r3, #0
   11ed8:	bne	11ee4 <__assert_fail@plt+0xa08>
   11edc:	str	r8, [r4, #256]	; 0x100
   11ee0:	b	11708 <__assert_fail@plt+0x22c>
   11ee4:	movw	r3, #63112	; 0xf688
   11ee8:	movt	r3, #1
   11eec:	mov	r1, sl
   11ef0:	mov	r2, #99	; 0x63
   11ef4:	ldrb	r0, [r1], #1
   11ef8:	cmp	r0, r2
   11efc:	bne	11f40 <__assert_fail@plt+0xa64>
   11f00:	ldrb	r2, [r3, #1]!
   11f04:	cmp	r2, #0
   11f08:	bne	11ef4 <__assert_fail@plt+0xa18>
   11f0c:	ldrb	r3, [r1]
   11f10:	cmp	r3, #61	; 0x3d
   11f14:	cmpne	r3, #0
   11f18:	bne	11f40 <__assert_fail@plt+0xa64>
   11f1c:	mov	r0, r8
   11f20:	ldr	r1, [pc, #1484]	; 124f4 <__assert_fail@plt+0x1018>
   11f24:	movw	r3, #63120	; 0xf690
   11f28:	movt	r3, #1
   11f2c:	bl	147f0 <__assert_fail@plt+0x3314>
   11f30:	ldr	r3, [r4, #116]	; 0x74
   11f34:	orr	r3, r3, r0
   11f38:	str	r3, [r4, #116]	; 0x74
   11f3c:	b	11708 <__assert_fail@plt+0x22c>
   11f40:	movw	r3, #63140	; 0xf6a4
   11f44:	movt	r3, #1
   11f48:	mov	r1, sl
   11f4c:	mov	r2, #105	; 0x69
   11f50:	ldrb	r0, [r1], #1
   11f54:	cmp	r0, r2
   11f58:	bne	11f9c <__assert_fail@plt+0xac0>
   11f5c:	ldrb	r2, [r3, #1]!
   11f60:	cmp	r2, #0
   11f64:	bne	11f50 <__assert_fail@plt+0xa74>
   11f68:	ldrb	r3, [r1]
   11f6c:	cmp	r3, #61	; 0x3d
   11f70:	cmpne	r3, #0
   11f74:	bne	11f9c <__assert_fail@plt+0xac0>
   11f78:	mov	r0, r8
   11f7c:	ldr	r1, [pc, #1396]	; 124f8 <__assert_fail@plt+0x101c>
   11f80:	movw	r3, #63148	; 0xf6ac
   11f84:	movt	r3, #1
   11f88:	bl	147f0 <__assert_fail@plt+0x3314>
   11f8c:	ldr	r3, [r4, #296]	; 0x128
   11f90:	orr	r3, r3, r0
   11f94:	str	r3, [r4, #296]	; 0x128
   11f98:	b	11708 <__assert_fail@plt+0x22c>
   11f9c:	movw	r3, #63168	; 0xf6c0
   11fa0:	movt	r3, #1
   11fa4:	mov	r1, sl
   11fa8:	mov	r2, #111	; 0x6f
   11fac:	ldrb	r0, [r1], #1
   11fb0:	cmp	r0, r2
   11fb4:	bne	1285c <__assert_fail@plt+0x1380>
   11fb8:	ldrb	r2, [r3, #1]!
   11fbc:	cmp	r2, #0
   11fc0:	bne	11fac <__assert_fail@plt+0xad0>
   11fc4:	ldrb	r3, [r1]
   11fc8:	cmp	r3, #61	; 0x3d
   11fcc:	cmpne	r3, #0
   11fd0:	bne	1285c <__assert_fail@plt+0x1380>
   11fd4:	mov	r0, r8
   11fd8:	ldr	r1, [pc, #1304]	; 124f8 <__assert_fail@plt+0x101c>
   11fdc:	movw	r3, #63176	; 0xf6c8
   11fe0:	movt	r3, #1
   11fe4:	bl	147f0 <__assert_fail@plt+0x3314>
   11fe8:	ldr	r3, [r4, #268]	; 0x10c
   11fec:	orr	r3, r3, r0
   11ff0:	str	r3, [r4, #268]	; 0x10c
   11ff4:	b	11708 <__assert_fail@plt+0x22c>
   11ff8:	orrs	r3, r0, r1
   11ffc:	beq	11780 <__assert_fail@plt+0x2a4>
   12000:	ldr	r2, [r4, #108]	; 0x6c
   12004:	asr	r3, r2, #31
   12008:	bl	1dc0c <__assert_fail@plt+0xc730>
   1200c:	ldr	r3, [pc, #1236]	; 124e8 <__assert_fail@plt+0x100c>
   12010:	str	r2, [r4, #568]	; 0x238
   12014:	strd	r0, [r3]
   12018:	b	11780 <__assert_fail@plt+0x2a4>
   1201c:	ldr	r3, [r4, #116]	; 0x74
   12020:	bic	r3, r3, #24
   12024:	str	r3, [r4, #116]	; 0x74
   12028:	b	11734 <__assert_fail@plt+0x258>
   1202c:	mov	r2, #0
   12030:	mov	r3, #0
   12034:	mvn	r0, #0
   12038:	mvn	r1, #-2147483648	; 0x80000000
   1203c:	strd	r0, [sp, #40]	; 0x28
   12040:	strd	r2, [sp, #48]	; 0x30
   12044:	strd	r2, [sp, #56]	; 0x38
   12048:	ldr	r2, [r4, #108]	; 0x6c
   1204c:	ldr	r3, [r4, #116]	; 0x74
   12050:	cmp	r2, #0
   12054:	orr	r3, r3, #2048	; 0x800
   12058:	str	r3, [r4, #116]	; 0x74
   1205c:	moveq	r3, #512	; 0x200
   12060:	streq	r3, [r4, #108]	; 0x6c
   12064:	ldr	r3, [r4, #120]	; 0x78
   12068:	cmp	r3, #0
   1206c:	moveq	r3, #512	; 0x200
   12070:	streq	r3, [r4, #120]	; 0x78
   12074:	b	11728 <__assert_fail@plt+0x24c>
   12078:	ldr	r5, [r9]
   1207c:	cmp	r5, #4
   12080:	bne	120a8 <__assert_fail@plt+0xbcc>
   12084:	bl	14c70 <__assert_fail@plt+0x3794>
   12088:	mov	r2, r6
   1208c:	mov	r3, r7
   12090:	mov	r0, #1
   12094:	bl	1120c <ftruncate64@plt>
   12098:	cmp	r0, #0
   1209c:	blt	12078 <__assert_fail@plt+0xb9c>
   120a0:	beq	11adc <__assert_fail@plt+0x600>
   120a4:	ldr	r5, [r9]
   120a8:	add	r1, sp, #96	; 0x60
   120ac:	mov	r0, #1
   120b0:	bl	14d2c <__assert_fail@plt+0x3850>
   120b4:	cmp	r0, #0
   120b8:	bne	13070 <__assert_fail@plt+0x1b94>
   120bc:	ldr	r3, [sp, #112]	; 0x70
   120c0:	and	r3, r3, #61440	; 0xf000
   120c4:	sub	r3, r3, #16384	; 0x4000
   120c8:	bics	sl, r3, #16384	; 0x4000
   120cc:	bne	11adc <__assert_fail@plt+0x600>
   120d0:	mov	r2, #5
   120d4:	movw	r1, #63612	; 0xf87c
   120d8:	movt	r1, #1
   120dc:	bl	11230 <dcgettext@plt>
   120e0:	mov	r2, r0
   120e4:	mov	r0, #4
   120e8:	ldr	r1, [r4, #256]	; 0x100
   120ec:	str	r2, [sp, #40]	; 0x28
   120f0:	bl	19d60 <__assert_fail@plt+0x8884>
   120f4:	mov	r1, r5
   120f8:	strd	r6, [sp]
   120fc:	str	r0, [sp, #8]
   12100:	mov	r0, sl
   12104:	ldr	r2, [sp, #40]	; 0x28
   12108:	bl	13a94 <__assert_fail@plt+0x25b8>
   1210c:	b	11adc <__assert_fail@plt+0x600>
   12110:	mov	r1, r3
   12114:	mov	r0, #0
   12118:	ldr	r2, [r4, #108]	; 0x6c
   1211c:	blx	r6
   12120:	mov	r5, r0
   12124:	cmp	r5, #0
   12128:	bgt	11d7c <__assert_fail@plt+0x8a0>
   1212c:	ldr	r3, [r4, #116]	; 0x74
   12130:	beq	12d88 <__assert_fail@plt+0x18ac>
   12134:	tst	r3, #256	; 0x100
   12138:	beq	12148 <__assert_fail@plt+0xc6c>
   1213c:	ldr	r3, [fp, #8]
   12140:	cmp	r3, #1
   12144:	beq	12190 <__assert_fail@plt+0xcb4>
   12148:	ldr	r3, [sp, #40]	; 0x28
   1214c:	mov	r2, #5
   12150:	mov	r0, #0
   12154:	ldr	r1, [sp, #64]	; 0x40
   12158:	ldr	r5, [r3]
   1215c:	bl	11230 <dcgettext@plt>
   12160:	mov	r6, r0
   12164:	mov	r0, #4
   12168:	ldr	r1, [r4, #260]	; 0x104
   1216c:	bl	19d60 <__assert_fail@plt+0x8884>
   12170:	mov	r3, r0
   12174:	mov	r2, r6
   12178:	mov	r1, r5
   1217c:	mov	r0, #0
   12180:	bl	13a94 <__assert_fail@plt+0x25b8>
   12184:	ldr	r3, [r4, #116]	; 0x74
   12188:	tst	r3, #256	; 0x100
   1218c:	beq	12d78 <__assert_fail@plt+0x189c>
   12190:	bl	138e8 <__assert_fail@plt+0x240c>
   12194:	ldr	r6, [r4, #108]	; 0x6c
   12198:	mov	r0, #0
   1219c:	sub	r6, r6, sl
   121a0:	asr	r7, r6, #31
   121a4:	mov	r2, r6
   121a8:	mov	r3, r7
   121ac:	bl	13b3c <__assert_fail@plt+0x2660>
   121b0:	ldrb	r3, [r4, #90]	; 0x5a
   121b4:	cmp	r3, #0
   121b8:	bne	123ac <__assert_fail@plt+0xed0>
   121bc:	ldr	r5, [r4, #596]	; 0x254
   121c0:	cmp	r5, #29
   121c4:	beq	12220 <__assert_fail@plt+0xd44>
   121c8:	ldr	r3, [sp, #40]	; 0x28
   121cc:	str	r5, [r3]
   121d0:	mov	r2, #5
   121d4:	mov	r0, #0
   121d8:	ldr	r1, [sp, #72]	; 0x48
   121dc:	bl	11230 <dcgettext@plt>
   121e0:	mov	r6, r0
   121e4:	mov	r1, #3
   121e8:	ldr	r2, [r4, #260]	; 0x104
   121ec:	mov	r0, #0
   121f0:	bl	1a8e0 <__assert_fail@plt+0x9404>
   121f4:	mov	r3, r0
   121f8:	mov	r2, r6
   121fc:	mov	r1, r5
   12200:	mov	r0, #0
   12204:	bl	13a94 <__assert_fail@plt+0x25b8>
   12208:	mov	r2, #0
   1220c:	mov	r3, #29
   12210:	mov	r1, #1
   12214:	strb	r2, [r4, #90]	; 0x5a
   12218:	str	r1, [sp, #48]	; 0x30
   1221c:	str	r3, [r4, #596]	; 0x254
   12220:	ldr	r2, [r4, #116]	; 0x74
   12224:	clz	r3, sl
   12228:	lsr	r3, r3, #5
   1222c:	ands	r3, r3, r2, lsr #10
   12230:	beq	11ccc <__assert_fail@plt+0x7f0>
   12234:	ldr	r2, [r4, #108]	; 0x6c
   12238:	mov	r5, #0
   1223c:	ldr	r8, [r4, #112]	; 0x70
   12240:	cmp	r5, r2
   12244:	blt	11dc8 <__assert_fail@plt+0x8ec>
   12248:	ldr	r3, [r4, #56]	; 0x38
   1224c:	mov	sl, #0
   12250:	ldr	r2, [r4, #60]	; 0x3c
   12254:	ldr	r0, [r4, #124]	; 0x7c
   12258:	adds	r3, r3, #1
   1225c:	adc	r2, r2, sl
   12260:	str	r3, [r4, #56]	; 0x38
   12264:	cmp	r0, r8
   12268:	str	r2, [r4, #60]	; 0x3c
   1226c:	bne	11e20 <__assert_fail@plt+0x944>
   12270:	mov	r0, r8
   12274:	mov	r1, r5
   12278:	bl	15490 <__assert_fail@plt+0x3fb4>
   1227c:	ldrd	r2, [r4, #8]
   12280:	adds	r6, r2, r0
   12284:	adc	r7, r3, r0, asr #31
   12288:	cmp	r0, r5
   1228c:	strd	r6, [r4, #8]
   12290:	beq	12734 <__assert_fail@plt+0x1258>
   12294:	ldr	r9, [sp, #40]	; 0x28
   12298:	mov	r2, #5
   1229c:	movw	r1, #63788	; 0xf92c
   122a0:	movt	r1, #1
   122a4:	ldr	r5, [r9]
   122a8:	mov	r0, #0
   122ac:	bl	11230 <dcgettext@plt>
   122b0:	mov	r6, r0
   122b4:	mov	r0, #4
   122b8:	ldr	r1, [r4, #256]	; 0x100
   122bc:	bl	19d60 <__assert_fail@plt+0x8884>
   122c0:	mov	r3, r0
   122c4:	mov	r2, r6
   122c8:	mov	r1, r5
   122cc:	mov	r0, #0
   122d0:	bl	13a94 <__assert_fail@plt+0x25b8>
   122d4:	mov	r3, #1
   122d8:	str	r3, [sp, #48]	; 0x30
   122dc:	bl	14918 <__assert_fail@plt+0x343c>
   122e0:	ldrd	r2, [fp, #32]
   122e4:	cmp	r0, #0
   122e8:	ldr	r1, [sp, #48]	; 0x30
   122ec:	movne	r1, r0
   122f0:	orrs	r0, r2, r3
   122f4:	str	r1, [sp, #48]	; 0x30
   122f8:	ldrb	r1, [r4, #592]	; 0x250
   122fc:	bne	12618 <__assert_fail@plt+0x113c>
   12300:	ldr	r0, [r4, #572]	; 0x23c
   12304:	cmp	r0, #0
   12308:	bne	12618 <__assert_fail@plt+0x113c>
   1230c:	cmp	r1, #0
   12310:	bne	129bc <__assert_fail@plt+0x14e0>
   12314:	ldrb	r3, [r4, #273]	; 0x111
   12318:	cmp	r3, #0
   1231c:	bne	1295c <__assert_fail@plt+0x1480>
   12320:	bl	14c70 <__assert_fail@plt+0x3794>
   12324:	bl	14b3c <__assert_fail@plt+0x3660>
   12328:	bl	138e8 <__assert_fail@plt+0x240c>
   1232c:	ldr	r0, [sp, #48]	; 0x30
   12330:	bl	11374 <exit@plt>
   12334:	ldr	r9, [sp, #40]	; 0x28
   12338:	b	12348 <__assert_fail@plt+0xe6c>
   1233c:	cmp	r5, #0
   12340:	beq	12394 <__assert_fail@plt+0xeb8>
   12344:	ldr	r0, [r4, #124]	; 0x7c
   12348:	mov	r1, r8
   1234c:	ldr	r6, [r4, #120]	; 0x78
   12350:	ldr	r7, [r4, #276]	; 0x114
   12354:	sub	r6, r6, r7
   12358:	add	r0, r0, r7
   1235c:	cmp	r6, r5
   12360:	movge	r6, r5
   12364:	mov	r2, r6
   12368:	sub	r5, r5, r6
   1236c:	bl	111e8 <memcpy@plt>
   12370:	ldr	r2, [r4, #120]	; 0x78
   12374:	add	r3, r7, r6
   12378:	add	r8, r8, r6
   1237c:	str	r3, [r4, #276]	; 0x114
   12380:	cmp	r3, r2
   12384:	blt	1233c <__assert_fail@plt+0xe60>
   12388:	bl	15724 <__assert_fail@plt+0x4248>
   1238c:	cmp	r5, #0
   12390:	bne	12344 <__assert_fail@plt+0xe68>
   12394:	str	r9, [sp, #40]	; 0x28
   12398:	b	11ccc <__assert_fail@plt+0x7f0>
   1239c:	mov	r1, r5
   123a0:	mov	r0, r8
   123a4:	bl	15800 <__assert_fail@plt+0x4324>
   123a8:	b	11ccc <__assert_fail@plt+0x7f0>
   123ac:	ldrd	r2, [r4, #96]	; 0x60
   123b0:	cmp	r2, #0
   123b4:	sbcs	r1, r3, #0
   123b8:	blt	123e8 <__assert_fail@plt+0xf0c>
   123bc:	adds	r0, r2, r6
   123c0:	adcs	r1, r3, r7
   123c4:	mov	r8, r0
   123c8:	mov	r9, r1
   123cc:	movvs	r5, #1
   123d0:	movvc	r5, #0
   123d4:	strd	r0, [r4, #96]	; 0x60
   123d8:	bvc	1251c <__assert_fail@plt+0x1040>
   123dc:	mvn	r2, #0
   123e0:	mvn	r3, #0
   123e4:	strd	r2, [r4, #96]	; 0x60
   123e8:	mov	r2, #5
   123ec:	movw	r1, #63840	; 0xf960
   123f0:	movt	r1, #1
   123f4:	mov	r0, #0
   123f8:	bl	11230 <dcgettext@plt>
   123fc:	mov	r5, r0
   12400:	mov	r0, #4
   12404:	ldr	r1, [r4, #260]	; 0x104
   12408:	bl	19d60 <__assert_fail@plt+0x8884>
   1240c:	mov	r1, #0
   12410:	mov	r3, r0
   12414:	mov	r2, r5
   12418:	mov	r0, r1
   1241c:	bl	13a94 <__assert_fail@plt+0x25b8>
   12420:	b	12208 <__assert_fail@plt+0xd2c>
   12424:	mov	r0, #0
   12428:	bl	13b3c <__assert_fail@plt+0x2660>
   1242c:	b	11db8 <__assert_fail@plt+0x8dc>
   12430:	cmp	r5, #0
   12434:	beq	12bc8 <__assert_fail@plt+0x16ec>
   12438:	ldr	r9, [sp, #40]	; 0x28
   1243c:	add	r1, r8, r5
   12440:	mov	r3, r8
   12444:	ldrb	r2, [r3]
   12448:	add	r2, r4, r2
   1244c:	ldrb	r2, [r2, #304]	; 0x130
   12450:	strb	r2, [r3], #1
   12454:	cmp	r3, r1
   12458:	bne	12444 <__assert_fail@plt+0xf68>
   1245c:	ldr	r2, [r4, #116]	; 0x74
   12460:	str	r9, [sp, #40]	; 0x28
   12464:	tst	r2, #128	; 0x80
   12468:	beq	11e38 <__assert_fail@plt+0x95c>
   1246c:	ldr	r3, [sp, #56]	; 0x38
   12470:	mvn	r1, r3
   12474:	and	r3, r5, #1
   12478:	lsr	r1, r1, #31
   1247c:	cmp	r1, r3
   12480:	subne	r5, r5, #1
   12484:	mvneq	lr, #0
   12488:	ldrbne	lr, [r8, r5]
   1248c:	cmp	r5, #1
   12490:	ble	124b8 <__assert_fail@plt+0xfdc>
   12494:	ldr	r9, [sp, #40]	; 0x28
   12498:	mov	r3, r5
   1249c:	sub	ip, r8, #2
   124a0:	ldrb	r1, [ip, r3]
   124a4:	strb	r1, [r8, r3]
   124a8:	sub	r3, r3, #2
   124ac:	cmp	r3, #1
   124b0:	bgt	124a0 <__assert_fail@plt+0xfc4>
   124b4:	str	r9, [sp, #40]	; 0x28
   124b8:	ldr	r3, [sp, #56]	; 0x38
   124bc:	cmn	r3, #1
   124c0:	beq	128b4 <__assert_fail@plt+0x13d8>
   124c4:	ldr	r3, [sp, #56]	; 0x38
   124c8:	add	r5, r5, #1
   124cc:	str	lr, [sp, #56]	; 0x38
   124d0:	strb	r3, [r8, #1]
   124d4:	b	11e38 <__assert_fail@plt+0x95c>
   124d8:	cmp	r5, #0
   124dc:	bne	1246c <__assert_fail@plt+0xf90>
   124e0:	mov	r5, #0
   124e4:	b	11e38 <__assert_fail@plt+0x95c>
   124e8:	andeq	r1, r3, r8, lsl r4
   124ec:	andeq	r1, r3, r8, asr #8
   124f0:	andeq	r1, r3, r0, lsr #8
   124f4:	andeq	sp, r1, r8, asr pc
   124f8:	andeq	lr, r1, r8, rrx
   124fc:	andeq	r1, r3, r8, lsl r3
   12500:	muleq	r1, r8, r1
   12504:	andeq	r1, r3, r8, lsr #8
   12508:	andeq	r1, r3, r8, ror #4
   1250c:	andeq	r1, r3, r4, asr r2
   12510:	andeq	r1, r3, r0, ror #4
   12514:	andeq	r1, r3, r4, lsl #6
   12518:	andeq	r1, r3, r8, lsr r4
   1251c:	mov	r3, r1
   12520:	cmp	r0, #0
   12524:	sbcs	r3, r3, #0
   12528:	blt	123e8 <__assert_fail@plt+0xf0c>
   1252c:	mov	r1, #1
   12530:	mov	r3, #0
   12534:	mov	r2, #0
   12538:	mov	r0, r5
   1253c:	str	r1, [sp]
   12540:	bl	112a8 <lseek64@plt>
   12544:	cmp	r0, #0
   12548:	sbcs	r3, r1, #0
   1254c:	blt	125e8 <__assert_fail@plt+0x110c>
   12550:	cmp	r9, r1
   12554:	cmpeq	r8, r0
   12558:	beq	12220 <__assert_fail@plt+0xd44>
   1255c:	subs	ip, r8, r0
   12560:	sbc	r3, r9, r1
   12564:	str	ip, [sp, #80]	; 0x50
   12568:	str	r3, [sp, #84]	; 0x54
   1256c:	ldrd	r0, [sp, #80]	; 0x50
   12570:	cmp	r6, r0
   12574:	sbcs	r3, r7, r1
   12578:	movlt	r3, #1
   1257c:	movge	r3, #0
   12580:	orrs	r3, r3, r1, lsr #31
   12584:	beq	12594 <__assert_fail@plt+0x10b8>
   12588:	ldr	r3, [fp, #8]
   1258c:	cmp	r3, #1
   12590:	bne	128c0 <__assert_fail@plt+0x13e4>
   12594:	mov	r1, #1
   12598:	mov	r0, #0
   1259c:	ldrd	r2, [sp, #80]	; 0x50
   125a0:	str	r1, [sp]
   125a4:	bl	112a8 <lseek64@plt>
   125a8:	cmp	r0, #0
   125ac:	sbcs	r3, r1, #0
   125b0:	bge	12220 <__assert_fail@plt+0xd44>
   125b4:	ldr	r3, [sp, #40]	; 0x28
   125b8:	ldr	r5, [r3]
   125bc:	cmp	r5, #0
   125c0:	bne	121d0 <__assert_fail@plt+0xcf4>
   125c4:	mov	r2, #5
   125c8:	movw	r1, #63748	; 0xf904
   125cc:	movt	r1, #1
   125d0:	mov	r0, r5
   125d4:	bl	11230 <dcgettext@plt>
   125d8:	mov	r2, r0
   125dc:	mov	r1, r5
   125e0:	mov	r0, r5
   125e4:	bl	13a94 <__assert_fail@plt+0x25b8>
   125e8:	ldr	r3, [sp, #40]	; 0x28
   125ec:	ldr	r5, [r3]
   125f0:	b	121d0 <__assert_fail@plt+0xcf4>
   125f4:	movw	r2, #23352	; 0x5b38
   125f8:	movt	r2, #1
   125fc:	cmp	r1, #0
   12600:	movw	r3, #23960	; 0x5d98
   12604:	movt	r3, #1
   12608:	moveq	r3, r2
   1260c:	mov	r2, #0
   12610:	strb	r2, [r4, #300]	; 0x12c
   12614:	b	11814 <__assert_fail@plt+0x338>
   12618:	cmp	r1, #0
   1261c:	bne	1262c <__assert_fail@plt+0x1150>
   12620:	ldrb	r3, [r4, #88]	; 0x58
   12624:	cmp	r3, #0
   12628:	beq	1263c <__assert_fail@plt+0x1160>
   1262c:	mov	r2, #0
   12630:	mov	r3, #0
   12634:	mov	r0, #0
   12638:	bl	13b3c <__assert_fail@plt+0x2660>
   1263c:	ldrb	r3, [r4, #273]	; 0x111
   12640:	cmp	r3, #0
   12644:	bne	12654 <__assert_fail@plt+0x1178>
   12648:	ldrb	r3, [r4, #89]	; 0x59
   1264c:	cmp	r3, #0
   12650:	beq	12320 <__assert_fail@plt+0xe44>
   12654:	mov	r2, #0
   12658:	mov	r3, #0
   1265c:	mov	r0, #1
   12660:	bl	13b3c <__assert_fail@plt+0x2660>
   12664:	b	12320 <__assert_fail@plt+0xe44>
   12668:	ldr	ip, [r4, #108]	; 0x6c
   1266c:	mov	lr, #0
   12670:	ldrd	r0, [sp, #40]	; 0x28
   12674:	asr	r3, ip, #31
   12678:	mov	r2, ip
   1267c:	cmp	r1, r0, asr #31
   12680:	strd	r2, [sp, #48]	; 0x30
   12684:	bne	12cf4 <__assert_fail@plt+0x1818>
   12688:	smull	r2, r3, r0, ip
   1268c:	mov	r0, r2
   12690:	cmp	lr, #0
   12694:	str	r0, [sp, #48]	; 0x30
   12698:	movne	sl, #1
   1269c:	str	r3, [sp, #52]	; 0x34
   126a0:	bne	11b48 <__assert_fail@plt+0x66c>
   126a4:	b	11b28 <__assert_fail@plt+0x64c>
   126a8:	tst	sl, #4
   126ac:	beq	119d0 <__assert_fail@plt+0x4f4>
   126b0:	ldr	r3, [pc, #-444]	; 124fc <__assert_fail@plt+0x1020>
   126b4:	movw	r1, #57120	; 0xdf20
   126b8:	movt	r1, #1
   126bc:	add	r2, r3, #255	; 0xff
   126c0:	ldrb	r3, [r5, #1]!
   126c4:	add	r3, r1, r3
   126c8:	cmp	r2, r5
   126cc:	ldrb	r3, [r3, #1208]	; 0x4b8
   126d0:	strb	r3, [r5]
   126d4:	bne	126c0 <__assert_fail@plt+0x11e4>
   126d8:	b	119b8 <__assert_fail@plt+0x4dc>
   126dc:	tst	sl, #32
   126e0:	beq	11988 <__assert_fail@plt+0x4ac>
   126e4:	bl	11338 <__ctype_tolower_loc@plt>
   126e8:	ldr	r3, [pc, #-500]	; 124fc <__assert_fail@plt+0x1020>
   126ec:	ldr	r0, [r0]
   126f0:	add	r1, r3, #255	; 0xff
   126f4:	mov	r3, r5
   126f8:	ldrb	r2, [r3, #1]!
   126fc:	ldr	r2, [r0, r2, lsl #2]
   12700:	cmp	r1, r3
   12704:	strb	r2, [r3]
   12708:	bne	126f8 <__assert_fail@plt+0x121c>
   1270c:	b	11980 <__assert_fail@plt+0x4a4>
   12710:	ldrd	r2, [sp, #56]	; 0x38
   12714:	orrs	r1, r2, r3
   12718:	ldrne	r8, [pc, #-540]	; 12504 <__assert_fail@plt+0x1028>
   1271c:	strdne	r2, [r8]
   12720:	b	117e0 <__assert_fail@plt+0x304>
   12724:	cmp	r1, r3
   12728:	cmpeq	r0, r2
   1272c:	strdne	r0, [fp, #32]
   12730:	b	117b4 <__assert_fail@plt+0x2d8>
   12734:	ldr	r3, [r4, #108]	; 0x6c
   12738:	cmp	r3, r5
   1273c:	beq	12bac <__assert_fail@plt+0x16d0>
   12740:	ldr	r3, [r4, #32]
   12744:	ldr	r2, [r4, #36]	; 0x24
   12748:	adds	r3, r3, #1
   1274c:	adc	r2, r2, #0
   12750:	str	r3, [r4, #32]
   12754:	str	r2, [r4, #36]	; 0x24
   12758:	b	11ccc <__assert_fail@plt+0x7f0>
   1275c:	ldrd	r6, [sp, #40]	; 0x28
   12760:	mov	r0, #0
   12764:	cmp	r7, r6, asr #31
   12768:	mov	r6, r2
   1276c:	asr	r7, r2, #31
   12770:	strd	r6, [sp, #48]	; 0x30
   12774:	bne	12d34 <__assert_fail@plt+0x1858>
   12778:	ldr	r3, [sp, #40]	; 0x28
   1277c:	smull	r2, r3, r3, r2
   12780:	mov	lr, r2
   12784:	cmp	r0, #0
   12788:	mov	r6, lr
   1278c:	mov	r7, r3
   12790:	beq	132ec <__assert_fail@plt+0x1e10>
   12794:	tst	ip, #512	; 0x200
   12798:	beq	1330c <__assert_fail@plt+0x1e30>
   1279c:	mov	r1, sl
   127a0:	movw	r3, #438	; 0x1b6
   127a4:	orr	r2, r5, #2
   127a8:	mov	r0, #1
   127ac:	bl	153a0 <__assert_fail@plt+0x3ec4>
   127b0:	cmp	r0, #0
   127b4:	bge	11ac4 <__assert_fail@plt+0x5e8>
   127b8:	b	11aa8 <__assert_fail@plt+0x5cc>
   127bc:	ldr	r2, [sp, #96]	; 0x60
   127c0:	cmp	r2, #0
   127c4:	beq	11c7c <__assert_fail@plt+0x7a0>
   127c8:	mov	r1, #0
   127cc:	ldr	r0, [r4, #124]	; 0x7c
   127d0:	bl	113d4 <memset@plt>
   127d4:	ldr	r5, [sp, #96]	; 0x60
   127d8:	b	11c68 <__assert_fail@plt+0x78c>
   127dc:	mov	ip, #0
   127e0:	movw	r3, #13520	; 0x34d0
   127e4:	movt	r3, #1
   127e8:	add	r1, sp, #96	; 0x60
   127ec:	mov	r2, ip
   127f0:	mov	r0, #10
   127f4:	str	r3, [sp, #96]	; 0x60
   127f8:	str	ip, [sp, #228]	; 0xe4
   127fc:	bl	11284 <sigaction@plt>
   12800:	b	11574 <__assert_fail@plt+0x98>
   12804:	mov	ip, #-1073741824	; 0xc0000000
   12808:	movw	r3, #13504	; 0x34c0
   1280c:	movt	r3, #1
   12810:	mov	r2, #0
   12814:	add	r1, sp, #96	; 0x60
   12818:	mov	r0, #2
   1281c:	str	r3, [sp, #96]	; 0x60
   12820:	str	ip, [sp, #228]	; 0xe4
   12824:	bl	11284 <sigaction@plt>
   12828:	b	11588 <__assert_fail@plt+0xac>
   1282c:	mov	r2, #5
   12830:	mov	r0, r5
   12834:	movw	r1, #63480	; 0xf7f8
   12838:	movt	r1, #1
   1283c:	bl	11230 <dcgettext@plt>
   12840:	mov	r3, r0
   12844:	mov	r2, r0
   12848:	mov	r1, r6
   1284c:	mov	r0, r5
   12850:	str	r3, [r4, #260]	; 0x104
   12854:	bl	14e08 <__assert_fail@plt+0x392c>
   12858:	b	11a04 <__assert_fail@plt+0x528>
   1285c:	movw	r2, #63196	; 0xf6dc
   12860:	movt	r2, #1
   12864:	mov	r1, sl
   12868:	mov	r3, #115	; 0x73
   1286c:	ldrb	r0, [r1], #1
   12870:	cmp	r0, r3
   12874:	bne	12dd8 <__assert_fail@plt+0x18fc>
   12878:	ldrb	r3, [r2, #1]!
   1287c:	cmp	r3, #0
   12880:	bne	1286c <__assert_fail@plt+0x1390>
   12884:	ldrb	r3, [r1]
   12888:	cmp	r3, #0
   1288c:	cmpne	r3, #61	; 0x3d
   12890:	bne	12dd8 <__assert_fail@plt+0x18fc>
   12894:	mov	r0, r8
   12898:	movw	r3, #63204	; 0xf6e4
   1289c:	movt	r3, #1
   128a0:	mov	r2, #1
   128a4:	ldr	r1, [pc, #-940]	; 12500 <__assert_fail@plt+0x1024>
   128a8:	bl	147f0 <__assert_fail@plt+0x3314>
   128ac:	str	r0, [fp, #8]
   128b0:	b	11708 <__assert_fail@plt+0x22c>
   128b4:	add	r8, r8, #1
   128b8:	str	lr, [sp, #56]	; 0x38
   128bc:	b	11e38 <__assert_fail@plt+0x95c>
   128c0:	mov	r2, #5
   128c4:	mov	r0, r5
   128c8:	movw	r1, #63700	; 0xf8d4
   128cc:	movt	r1, #1
   128d0:	bl	11230 <dcgettext@plt>
   128d4:	mov	r2, r0
   128d8:	mov	r1, r5
   128dc:	mov	r0, r5
   128e0:	bl	13a94 <__assert_fail@plt+0x25b8>
   128e4:	b	12594 <__assert_fail@plt+0x10b8>
   128e8:	ldr	r1, [fp, #32]
   128ec:	mvn	r3, #-2147483648	; 0x80000000
   128f0:	mvn	r2, #2
   128f4:	ldr	r0, [fp, #36]	; 0x24
   128f8:	subs	r1, r1, #1
   128fc:	str	r1, [sp, #64]	; 0x40
   12900:	sbc	r1, r0, #0
   12904:	str	r1, [sp, #68]	; 0x44
   12908:	ldrd	r0, [sp, #64]	; 0x40
   1290c:	cmp	r1, r3
   12910:	cmpeq	r0, r2
   12914:	bls	11804 <__assert_fail@plt+0x328>
   12918:	orr	r3, r7, r6
   1291c:	ands	r3, r3, #65536	; 0x10000
   12920:	bne	11804 <__assert_fail@plt+0x328>
   12924:	strb	r3, [r4, #300]	; 0x12c
   12928:	movw	r3, #23352	; 0x5b38
   1292c:	movt	r3, #1
   12930:	b	11814 <__assert_fail@plt+0x338>
   12934:	subs	r1, r2, r5
   12938:	sbc	r3, r3, r6
   1293c:	str	r1, [sp, #72]	; 0x48
   12940:	str	r3, [sp, #76]	; 0x4c
   12944:	ldrd	r0, [sp, #48]	; 0x30
   12948:	ldrd	r2, [sp, #72]	; 0x48
   1294c:	cmp	r3, r1
   12950:	cmpeq	r2, r0
   12954:	bne	11b8c <__assert_fail@plt+0x6b0>
   12958:	b	11bd4 <__assert_fail@plt+0x6f8>
   1295c:	mov	r2, #0
   12960:	mov	r3, #0
   12964:	mov	r0, #1
   12968:	bl	13b3c <__assert_fail@plt+0x2660>
   1296c:	subs	r5, r0, #0
   12970:	bne	12320 <__assert_fail@plt+0xe44>
   12974:	mov	r3, #1
   12978:	ldr	r6, [r9]
   1297c:	mov	r2, #5
   12980:	movw	r1, #63808	; 0xf940
   12984:	movt	r1, #1
   12988:	str	r3, [sp, #48]	; 0x30
   1298c:	bl	11230 <dcgettext@plt>
   12990:	mov	r7, r0
   12994:	mov	r1, #3
   12998:	ldr	r2, [r4, #256]	; 0x100
   1299c:	mov	r0, r5
   129a0:	bl	1a8e0 <__assert_fail@plt+0x9404>
   129a4:	mov	r3, r0
   129a8:	mov	r2, r7
   129ac:	mov	r1, r6
   129b0:	mov	r0, r5
   129b4:	bl	13a94 <__assert_fail@plt+0x25b8>
   129b8:	b	12320 <__assert_fail@plt+0xe44>
   129bc:	bl	13b3c <__assert_fail@plt+0x2660>
   129c0:	subs	r5, r0, #0
   129c4:	bne	12314 <__assert_fail@plt+0xe38>
   129c8:	mov	r3, #1
   129cc:	ldr	r6, [r9]
   129d0:	mov	r2, #5
   129d4:	movw	r1, #63808	; 0xf940
   129d8:	movt	r1, #1
   129dc:	str	r3, [sp, #48]	; 0x30
   129e0:	bl	11230 <dcgettext@plt>
   129e4:	mov	r7, r0
   129e8:	mov	r1, #3
   129ec:	ldr	r2, [r4, #260]	; 0x104
   129f0:	mov	r0, r5
   129f4:	bl	1a8e0 <__assert_fail@plt+0x9404>
   129f8:	mov	r3, r0
   129fc:	mov	r2, r7
   12a00:	mov	r1, r6
   12a04:	mov	r0, r5
   12a08:	bl	13a94 <__assert_fail@plt+0x25b8>
   12a0c:	b	12314 <__assert_fail@plt+0xe38>
   12a10:	ldr	r9, [sp, #40]	; 0x28
   12a14:	ldr	r3, [sp, #56]	; 0x38
   12a18:	cmn	r3, #1
   12a1c:	beq	12a5c <__assert_fail@plt+0x1580>
   12a20:	ldr	r2, [r4, #116]	; 0x74
   12a24:	uxtb	r3, r3
   12a28:	strb	r3, [sp, #96]	; 0x60
   12a2c:	tst	r2, #8
   12a30:	bne	12dc8 <__assert_fail@plt+0x18ec>
   12a34:	tst	r2, #16
   12a38:	bne	12ecc <__assert_fail@plt+0x19f0>
   12a3c:	ldr	r1, [r4, #124]	; 0x7c
   12a40:	ldr	r2, [r4, #276]	; 0x114
   12a44:	strb	r3, [r1, r2]
   12a48:	add	r3, r2, #1
   12a4c:	ldr	r2, [r4, #120]	; 0x78
   12a50:	str	r3, [r4, #276]	; 0x114
   12a54:	cmp	r3, r2
   12a58:	bge	13020 <__assert_fail@plt+0x1b44>
   12a5c:	ldr	r3, [r4, #116]	; 0x74
   12a60:	tst	r3, #8
   12a64:	beq	12ab4 <__assert_fail@plt+0x15d8>
   12a68:	ldr	r5, [r4, #280]	; 0x118
   12a6c:	cmp	r5, #0
   12a70:	ble	12ab4 <__assert_fail@plt+0x15d8>
   12a74:	ldr	r3, [r4, #284]	; 0x11c
   12a78:	cmp	r3, r5
   12a7c:	ble	12ac0 <__assert_fail@plt+0x15e4>
   12a80:	ldrb	r1, [fp, #26]
   12a84:	ldr	r2, [r4, #124]	; 0x7c
   12a88:	ldr	r3, [r4, #276]	; 0x114
   12a8c:	strb	r1, [r2, r3]
   12a90:	add	r3, r3, #1
   12a94:	ldr	r2, [r4, #120]	; 0x78
   12a98:	str	r3, [r4, #276]	; 0x114
   12a9c:	cmp	r3, r2
   12aa0:	bge	12b50 <__assert_fail@plt+0x1674>
   12aa4:	ldr	r3, [r4, #284]	; 0x11c
   12aa8:	add	r5, r5, #1
   12aac:	cmp	r5, r3
   12ab0:	blt	12a80 <__assert_fail@plt+0x15a4>
   12ab4:	ldr	r3, [r4, #280]	; 0x118
   12ab8:	cmp	r3, #0
   12abc:	beq	12af0 <__assert_fail@plt+0x1614>
   12ac0:	ldr	r3, [r4, #116]	; 0x74
   12ac4:	tst	r3, #16
   12ac8:	beq	12af0 <__assert_fail@plt+0x1614>
   12acc:	ldrb	r1, [fp, #25]
   12ad0:	ldr	r2, [r4, #124]	; 0x7c
   12ad4:	ldr	r3, [r4, #276]	; 0x114
   12ad8:	strb	r1, [r2, r3]
   12adc:	add	r3, r3, #1
   12ae0:	ldr	r2, [r4, #120]	; 0x78
   12ae4:	str	r3, [r4, #276]	; 0x114
   12ae8:	cmp	r3, r2
   12aec:	bge	12ef4 <__assert_fail@plt+0x1a18>
   12af0:	ldr	r1, [r4, #276]	; 0x114
   12af4:	cmp	r1, #0
   12af8:	bne	12bd8 <__assert_fail@plt+0x16fc>
   12afc:	ldrb	r3, [r4, #272]	; 0x110
   12b00:	cmp	r3, #0
   12b04:	bne	12c20 <__assert_fail@plt+0x1744>
   12b08:	ldr	r3, [r4, #116]	; 0x74
   12b0c:	tst	r3, #49152	; 0xc000
   12b10:	beq	122dc <__assert_fail@plt+0xe00>
   12b14:	ldr	r3, [fp, #8]
   12b18:	cmp	r3, #4
   12b1c:	bne	122dc <__assert_fail@plt+0xe00>
   12b20:	ldrd	r0, [fp]
   12b24:	cmp	r0, #0
   12b28:	sbcs	r3, r1, #0
   12b2c:	blt	122dc <__assert_fail@plt+0xe00>
   12b30:	ldrd	r2, [r4, #8]
   12b34:	cmp	r0, r2
   12b38:	sbcs	r3, r1, r3
   12b3c:	bge	122dc <__assert_fail@plt+0xe00>
   12b40:	mov	r0, #0
   12b44:	mov	r1, #0
   12b48:	bl	134e8 <__assert_fail@plt+0x200c>
   12b4c:	b	122dc <__assert_fail@plt+0xe00>
   12b50:	bl	15724 <__assert_fail@plt+0x4248>
   12b54:	ldr	r3, [r4, #284]	; 0x11c
   12b58:	add	r5, r5, #1
   12b5c:	cmp	r3, r5
   12b60:	bgt	12a80 <__assert_fail@plt+0x15a4>
   12b64:	b	12ab4 <__assert_fail@plt+0x15d8>
   12b68:	mov	r0, sl
   12b6c:	mov	r2, #5
   12b70:	ldr	r8, [pc, #-1652]	; 12504 <__assert_fail@plt+0x1028>
   12b74:	movw	r1, #63516	; 0xf81c
   12b78:	movt	r1, #1
   12b7c:	bl	11230 <dcgettext@plt>
   12b80:	mov	r3, r0
   12b84:	mov	r2, r0
   12b88:	mov	r1, r5
   12b8c:	mov	r0, #1
   12b90:	str	r3, [r4, #256]	; 0x100
   12b94:	bl	14e08 <__assert_fail@plt+0x392c>
   12b98:	b	11adc <__assert_fail@plt+0x600>
   12b9c:	mov	r1, #10
   12ba0:	ldr	r0, [pc, #-1696]	; 12508 <__assert_fail@plt+0x102c>
   12ba4:	bl	11314 <sigaddset@plt>
   12ba8:	b	11528 <__assert_fail@plt+0x4c>
   12bac:	ldr	r3, [r4, #40]	; 0x28
   12bb0:	ldr	r2, [r4, #44]	; 0x2c
   12bb4:	adds	r3, r3, #1
   12bb8:	adc	r2, r2, #0
   12bbc:	str	r3, [r4, #40]	; 0x28
   12bc0:	str	r2, [r4, #44]	; 0x2c
   12bc4:	b	11ccc <__assert_fail@plt+0x7f0>
   12bc8:	ldr	r2, [r4, #116]	; 0x74
   12bcc:	tst	r2, #128	; 0x80
   12bd0:	beq	11e38 <__assert_fail@plt+0x95c>
   12bd4:	b	124e0 <__assert_fail@plt+0x1004>
   12bd8:	ldr	r0, [r4, #124]	; 0x7c
   12bdc:	bl	15490 <__assert_fail@plt+0x3fb4>
   12be0:	ldrd	r2, [r4, #8]
   12be4:	adds	r6, r2, r0
   12be8:	adc	r7, r3, r0, asr #31
   12bec:	cmp	r0, #0
   12bf0:	strd	r6, [r4, #8]
   12bf4:	beq	12c10 <__assert_fail@plt+0x1734>
   12bf8:	ldr	r3, [r4, #32]
   12bfc:	ldr	r2, [r4, #36]	; 0x24
   12c00:	adds	r3, r3, #1
   12c04:	adc	r2, r2, #0
   12c08:	str	r3, [r4, #32]
   12c0c:	str	r2, [r4, #36]	; 0x24
   12c10:	ldr	r3, [r4, #276]	; 0x114
   12c14:	cmp	r0, r3
   12c18:	beq	12afc <__assert_fail@plt+0x1620>
   12c1c:	b	12298 <__assert_fail@plt+0xdbc>
   12c20:	add	r1, sp, #96	; 0x60
   12c24:	mov	r0, #1
   12c28:	bl	14d2c <__assert_fail@plt+0x3850>
   12c2c:	cmp	r0, #0
   12c30:	bne	13028 <__assert_fail@plt+0x1b4c>
   12c34:	ldr	r3, [sp, #112]	; 0x70
   12c38:	and	r3, r3, #61440	; 0xf000
   12c3c:	cmp	r3, #32768	; 0x8000
   12c40:	bne	12b08 <__assert_fail@plt+0x162c>
   12c44:	mov	r1, #1
   12c48:	mov	r3, #0
   12c4c:	mov	r2, #0
   12c50:	mov	r0, r1
   12c54:	str	r1, [sp]
   12c58:	bl	112a8 <lseek64@plt>
   12c5c:	cmp	r0, #0
   12c60:	mov	r6, r0
   12c64:	sbcs	r3, r1, #0
   12c68:	mov	r7, r1
   12c6c:	blt	12b08 <__assert_fail@plt+0x162c>
   12c70:	ldrd	r2, [sp, #144]	; 0x90
   12c74:	cmp	r2, r0
   12c78:	sbcs	r3, r3, r1
   12c7c:	bge	12b08 <__assert_fail@plt+0x162c>
   12c80:	b	12c90 <__assert_fail@plt+0x17b4>
   12c84:	ldr	r5, [r9]
   12c88:	cmp	r5, #4
   12c8c:	bne	12cb4 <__assert_fail@plt+0x17d8>
   12c90:	bl	14c70 <__assert_fail@plt+0x3794>
   12c94:	mov	r2, r6
   12c98:	mov	r3, r7
   12c9c:	mov	r0, #1
   12ca0:	bl	1120c <ftruncate64@plt>
   12ca4:	cmp	r0, #0
   12ca8:	blt	12c84 <__assert_fail@plt+0x17a8>
   12cac:	beq	12b08 <__assert_fail@plt+0x162c>
   12cb0:	ldr	r5, [r9]
   12cb4:	mov	r2, #5
   12cb8:	movw	r1, #63612	; 0xf87c
   12cbc:	movt	r1, #1
   12cc0:	mov	r0, #0
   12cc4:	bl	11230 <dcgettext@plt>
   12cc8:	mov	r8, r0
   12ccc:	mov	r0, #4
   12cd0:	ldr	r1, [r4, #256]	; 0x100
   12cd4:	bl	19d60 <__assert_fail@plt+0x8884>
   12cd8:	mov	r2, r8
   12cdc:	mov	r1, r5
   12ce0:	strd	r6, [sp]
   12ce4:	str	r0, [sp, #8]
   12ce8:	mov	r0, #0
   12cec:	bl	13a94 <__assert_fail@plt+0x25b8>
   12cf0:	b	13064 <__assert_fail@plt+0x1b88>
   12cf4:	ldrd	r0, [sp, #40]	; 0x28
   12cf8:	umull	r2, r3, r0, ip
   12cfc:	cmp	r1, #0
   12d00:	umull	r0, r1, ip, r1
   12d04:	mov	r6, r2
   12d08:	mov	r7, r3
   12d0c:	blt	12ea0 <__assert_fail@plt+0x19c4>
   12d10:	cmp	ip, #0
   12d14:	blt	12e90 <__assert_fail@plt+0x19b4>
   12d18:	adds	r3, r0, r7
   12d1c:	mov	r2, #0
   12d20:	adc	r2, r1, r2
   12d24:	cmp	r2, r3, asr #31
   12d28:	bne	13164 <__assert_fail@plt+0x1c88>
   12d2c:	mov	r0, r6
   12d30:	b	12690 <__assert_fail@plt+0x11b4>
   12d34:	ldrd	r6, [sp, #40]	; 0x28
   12d38:	ldr	r3, [sp, #44]	; 0x2c
   12d3c:	cmp	r7, #0
   12d40:	umull	r6, r7, r6, r2
   12d44:	strd	r6, [sp, #56]	; 0x38
   12d48:	umull	r6, r7, r2, r3
   12d4c:	blt	12ec0 <__assert_fail@plt+0x19e4>
   12d50:	cmp	r2, #0
   12d54:	blt	12eac <__assert_fail@plt+0x19d0>
   12d58:	ldr	r3, [sp, #60]	; 0x3c
   12d5c:	mov	lr, #0
   12d60:	adds	r3, r6, r3
   12d64:	adc	lr, r7, lr
   12d68:	cmp	lr, r3, asr #31
   12d6c:	bne	1313c <__assert_fail@plt+0x1c60>
   12d70:	ldr	lr, [sp, #56]	; 0x38
   12d74:	b	12784 <__assert_fail@plt+0x12a8>
   12d78:	mov	r3, #1
   12d7c:	ldr	r9, [sp, #40]	; 0x28
   12d80:	str	r3, [sp, #48]	; 0x30
   12d84:	b	12a14 <__assert_fail@plt+0x1538>
   12d88:	ldrb	r1, [r4, #88]	; 0x58
   12d8c:	ldrb	r2, [r4, #592]	; 0x250
   12d90:	ldrb	r0, [r4, #273]	; 0x111
   12d94:	ldr	r9, [sp, #40]	; 0x28
   12d98:	orr	r1, r1, r2
   12d9c:	ldrb	r2, [r4, #89]	; 0x59
   12da0:	cmp	r0, #0
   12da4:	strb	r1, [r4, #88]	; 0x58
   12da8:	beq	12db8 <__assert_fail@plt+0x18dc>
   12dac:	tst	r3, #512	; 0x200
   12db0:	moveq	r5, #1
   12db4:	movne	r5, #0
   12db8:	orr	r3, r2, r5
   12dbc:	and	r3, r3, #1
   12dc0:	strb	r3, [r4, #89]	; 0x59
   12dc4:	b	12a14 <__assert_fail@plt+0x1538>
   12dc8:	mov	r1, #1
   12dcc:	add	r0, sp, #96	; 0x60
   12dd0:	bl	15800 <__assert_fail@plt+0x4324>
   12dd4:	b	12a5c <__assert_fail@plt+0x1580>
   12dd8:	mov	r3, #0
   12ddc:	add	r1, sp, #96	; 0x60
   12de0:	mov	r0, r8
   12de4:	str	r3, [sp, #96]	; 0x60
   12de8:	bl	13f80 <__assert_fail@plt+0x2aa4>
   12dec:	movw	r2, #63228	; 0xf6fc
   12df0:	movt	r2, #1
   12df4:	mov	ip, sl
   12df8:	mov	r3, #105	; 0x69
   12dfc:	ldrb	lr, [ip], #1
   12e00:	cmp	lr, r3
   12e04:	bne	12efc <__assert_fail@plt+0x1a20>
   12e08:	ldrb	r3, [r2, #1]!
   12e0c:	cmp	r3, #0
   12e10:	bne	12dfc <__assert_fail@plt+0x1920>
   12e14:	ldrb	r3, [ip]
   12e18:	cmp	r3, #0
   12e1c:	cmpne	r3, #61	; 0x3d
   12e20:	ldreq	ip, [pc, #-2332]	; 1250c <__assert_fail@plt+0x1030>
   12e24:	mvneq	r2, #-2147483647	; 0x80000001
   12e28:	moveq	r3, #0
   12e2c:	bne	12efc <__assert_fail@plt+0x1a20>
   12e30:	cmp	r0, #1
   12e34:	sbcs	lr, r1, #0
   12e38:	bge	12edc <__assert_fail@plt+0x1a00>
   12e3c:	mov	r3, #4
   12e40:	str	r3, [sp, #96]	; 0x60
   12e44:	ldr	r3, [sp, #96]	; 0x60
   12e48:	cmp	r3, #1
   12e4c:	mov	r2, #5
   12e50:	mov	r0, #0
   12e54:	movw	r1, #63268	; 0xf724
   12e58:	movt	r1, #1
   12e5c:	moveq	r5, #75	; 0x4b
   12e60:	movne	r5, r0
   12e64:	bl	11230 <dcgettext@plt>
   12e68:	mov	r4, r0
   12e6c:	mov	r0, r8
   12e70:	bl	1b08c <__assert_fail@plt+0x9bb0>
   12e74:	movw	r2, #62616	; 0xf498
   12e78:	movt	r2, #1
   12e7c:	str	r0, [sp]
   12e80:	mov	r1, r5
   12e84:	mov	r3, r4
   12e88:	mov	r0, #1
   12e8c:	bl	13a94 <__assert_fail@plt+0x25b8>
   12e90:	ldrd	r2, [sp, #40]	; 0x28
   12e94:	subs	r0, r0, r2
   12e98:	sbc	r1, r1, r3
   12e9c:	b	12d18 <__assert_fail@plt+0x183c>
   12ea0:	subs	r0, r0, lr
   12ea4:	sbc	r1, r1, ip
   12ea8:	b	12d10 <__assert_fail@plt+0x1834>
   12eac:	ldr	r3, [sp, #40]	; 0x28
   12eb0:	subs	r6, r6, r3
   12eb4:	ldr	r3, [sp, #44]	; 0x2c
   12eb8:	sbc	r7, r7, r3
   12ebc:	b	12d58 <__assert_fail@plt+0x187c>
   12ec0:	subs	r6, r6, r0
   12ec4:	sbc	r7, r7, r2
   12ec8:	b	12d50 <__assert_fail@plt+0x1874>
   12ecc:	mov	r1, #1
   12ed0:	add	r0, sp, #96	; 0x60
   12ed4:	bl	15934 <__assert_fail@plt+0x4458>
   12ed8:	b	12a5c <__assert_fail@plt+0x1580>
   12edc:	cmp	r2, r0
   12ee0:	sbcs	r3, r3, r1
   12ee4:	bge	13128 <__assert_fail@plt+0x1c4c>
   12ee8:	mov	r3, #1
   12eec:	str	r3, [sp, #96]	; 0x60
   12ef0:	b	12e44 <__assert_fail@plt+0x1968>
   12ef4:	bl	15724 <__assert_fail@plt+0x4248>
   12ef8:	b	12af0 <__assert_fail@plt+0x1614>
   12efc:	movw	r3, #63232	; 0xf700
   12f00:	movt	r3, #1
   12f04:	mov	r2, sl
   12f08:	mov	ip, #111	; 0x6f
   12f0c:	ldrb	lr, [r2], #1
   12f10:	cmp	lr, ip
   12f14:	bne	12f40 <__assert_fail@plt+0x1a64>
   12f18:	ldrb	ip, [r3, #1]!
   12f1c:	cmp	ip, #0
   12f20:	bne	12f0c <__assert_fail@plt+0x1a30>
   12f24:	ldrb	r3, [r2]
   12f28:	cmp	r3, #0
   12f2c:	cmpne	r3, #61	; 0x3d
   12f30:	ldreq	ip, [pc, #-2600]	; 12510 <__assert_fail@plt+0x1034>
   12f34:	mvneq	r2, #-2147483647	; 0x80000001
   12f38:	moveq	r3, #0
   12f3c:	beq	12e30 <__assert_fail@plt+0x1954>
   12f40:	movw	r3, #63236	; 0xf704
   12f44:	movt	r3, #1
   12f48:	mov	r2, sl
   12f4c:	mov	ip, #98	; 0x62
   12f50:	ldrb	lr, [r2], #1
   12f54:	cmp	lr, ip
   12f58:	bne	12f84 <__assert_fail@plt+0x1aa8>
   12f5c:	ldrb	ip, [r3, #1]!
   12f60:	cmp	ip, #0
   12f64:	bne	12f50 <__assert_fail@plt+0x1a74>
   12f68:	ldrb	r3, [r2]
   12f6c:	cmp	r3, #0
   12f70:	cmpne	r3, #61	; 0x3d
   12f74:	addeq	ip, sp, #92	; 0x5c
   12f78:	mvneq	r2, #-2147483647	; 0x80000001
   12f7c:	moveq	r3, #0
   12f80:	beq	12e30 <__assert_fail@plt+0x1954>
   12f84:	movw	r3, #63240	; 0xf708
   12f88:	movt	r3, #1
   12f8c:	mov	r2, sl
   12f90:	mov	ip, #99	; 0x63
   12f94:	ldrb	lr, [r2], #1
   12f98:	cmp	lr, ip
   12f9c:	bne	12fc8 <__assert_fail@plt+0x1aec>
   12fa0:	ldrb	ip, [r3, #1]!
   12fa4:	cmp	ip, #0
   12fa8:	bne	12f94 <__assert_fail@plt+0x1ab8>
   12fac:	ldrb	r3, [r2]
   12fb0:	cmp	r3, #0
   12fb4:	cmpne	r3, #61	; 0x3d
   12fb8:	ldreq	ip, [pc, #-2732]	; 12514 <__assert_fail@plt+0x1038>
   12fbc:	mvneq	r2, #-2147483648	; 0x80000000
   12fc0:	moveq	r3, #0
   12fc4:	beq	12e30 <__assert_fail@plt+0x1954>
   12fc8:	movw	r3, #63244	; 0xf70c
   12fcc:	movt	r3, #1
   12fd0:	mov	r2, sl
   12fd4:	mov	ip, #115	; 0x73
   12fd8:	ldrb	lr, [r2], #1
   12fdc:	cmp	lr, ip
   12fe0:	bne	13340 <__assert_fail@plt+0x1e64>
   12fe4:	ldrb	ip, [r3, #1]!
   12fe8:	cmp	ip, #0
   12fec:	bne	12fd8 <__assert_fail@plt+0x1afc>
   12ff0:	ldrb	r3, [r2]
   12ff4:	cmp	r3, #61	; 0x3d
   12ff8:	cmpne	r3, #0
   12ffc:	strdeq	r0, [sp, #48]	; 0x30
   13000:	bne	13340 <__assert_fail@plt+0x1e64>
   13004:	cmp	r0, #0
   13008:	sbcs	r3, r1, #0
   1300c:	blt	12e3c <__assert_fail@plt+0x1960>
   13010:	ldr	r3, [sp, #96]	; 0x60
   13014:	cmp	r3, #0
   13018:	beq	11708 <__assert_fail@plt+0x22c>
   1301c:	b	12e48 <__assert_fail@plt+0x196c>
   13020:	bl	15724 <__assert_fail@plt+0x4248>
   13024:	b	12a5c <__assert_fail@plt+0x1580>
   13028:	ldr	r5, [r9]
   1302c:	mov	r2, #5
   13030:	movw	r1, #62740	; 0xf514
   13034:	movt	r1, #1
   13038:	mov	r0, #0
   1303c:	bl	11230 <dcgettext@plt>
   13040:	mov	r6, r0
   13044:	mov	r0, #4
   13048:	ldr	r1, [r4, #256]	; 0x100
   1304c:	bl	19d60 <__assert_fail@plt+0x8884>
   13050:	mov	r3, r0
   13054:	mov	r2, r6
   13058:	mov	r1, r5
   1305c:	mov	r0, #0
   13060:	bl	13a94 <__assert_fail@plt+0x25b8>
   13064:	mov	r3, #1
   13068:	str	r3, [sp, #48]	; 0x30
   1306c:	b	122dc <__assert_fail@plt+0xe00>
   13070:	ldr	r5, [r9]
   13074:	mov	r2, #5
   13078:	movw	r1, #62740	; 0xf514
   1307c:	movt	r1, #1
   13080:	mov	r0, #0
   13084:	bl	11230 <dcgettext@plt>
   13088:	mov	r6, r0
   1308c:	mov	r0, #4
   13090:	ldr	r1, [r4, #256]	; 0x100
   13094:	bl	19d60 <__assert_fail@plt+0x8884>
   13098:	mov	r3, r0
   1309c:	mov	r2, r6
   130a0:	mov	r1, r5
   130a4:	mov	r0, #0
   130a8:	bl	13a94 <__assert_fail@plt+0x25b8>
   130ac:	b	11adc <__assert_fail@plt+0x600>
   130b0:	movw	r1, #63080	; 0xf668
   130b4:	movt	r1, #1
   130b8:	mov	r2, #5
   130bc:	bl	11230 <dcgettext@plt>
   130c0:	mov	r4, r0
   130c4:	mov	r0, sl
   130c8:	bl	1b08c <__assert_fail@plt+0x9bb0>
   130cc:	mov	r1, #0
   130d0:	mov	r3, r0
   130d4:	mov	r2, r4
   130d8:	mov	r0, r1
   130dc:	bl	13a94 <__assert_fail@plt+0x25b8>
   130e0:	mov	r0, #1
   130e4:	bl	142b4 <__assert_fail@plt+0x2dd8>
   130e8:	ldr	r5, [r9]
   130ec:	mov	r2, #5
   130f0:	movw	r1, #62840	; 0xf578
   130f4:	movt	r1, #1
   130f8:	mov	r0, #0
   130fc:	bl	11230 <dcgettext@plt>
   13100:	mov	r6, r0
   13104:	mov	r0, #4
   13108:	ldr	r1, [r4, #256]	; 0x100
   1310c:	bl	19d60 <__assert_fail@plt+0x8884>
   13110:	mov	r3, r0
   13114:	mov	r2, r6
   13118:	mov	r1, r5
   1311c:	mov	r0, #0
   13120:	bl	13a94 <__assert_fail@plt+0x25b8>
   13124:	bl	14d10 <__assert_fail@plt+0x3834>
   13128:	ldr	r3, [sp, #96]	; 0x60
   1312c:	cmp	r3, #0
   13130:	bne	12e48 <__assert_fail@plt+0x196c>
   13134:	str	r0, [ip]
   13138:	b	11708 <__assert_fail@plt+0x22c>
   1313c:	ldr	r3, [sp, #40]	; 0x28
   13140:	mov	r0, #1
   13144:	ldr	r1, [sp, #52]	; 0x34
   13148:	ldrd	r6, [sp, #56]	; 0x38
   1314c:	mul	r3, r3, r1
   13150:	ldr	r1, [sp, #44]	; 0x2c
   13154:	mov	lr, r6
   13158:	mla	r2, r2, r1, r3
   1315c:	add	r3, r2, r7
   13160:	b	12784 <__assert_fail@plt+0x12a8>
   13164:	ldr	r2, [sp, #40]	; 0x28
   13168:	mov	lr, #1
   1316c:	ldr	r5, [sp, #44]	; 0x2c
   13170:	ldrd	r6, [sp, #48]	; 0x30
   13174:	mul	r1, r2, r7
   13178:	umull	r2, r3, r2, r6
   1317c:	mla	r1, r6, r5, r1
   13180:	mov	r0, r2
   13184:	add	r3, r1, r3
   13188:	b	12690 <__assert_fail@plt+0x11b4>
   1318c:	mov	r2, #5
   13190:	movw	r1, #63176	; 0xf6c8
   13194:	movt	r1, #1
   13198:	mov	r0, #0
   1319c:	bl	11230 <dcgettext@plt>
   131a0:	mov	r4, r0
   131a4:	movw	r0, #62964	; 0xf5f4
   131a8:	movt	r0, #1
   131ac:	bl	1b08c <__assert_fail@plt+0x9bb0>
   131b0:	mov	r1, #0
   131b4:	mov	r3, r4
   131b8:	str	r0, [sp]
   131bc:	movw	r2, #62616	; 0xf498
   131c0:	movt	r2, #1
   131c4:	mov	r0, r1
   131c8:	bl	13a94 <__assert_fail@plt+0x25b8>
   131cc:	mov	r0, #1
   131d0:	bl	142b4 <__assert_fail@plt+0x2dd8>
   131d4:	movw	r1, #63296	; 0xf740
   131d8:	movt	r1, #1
   131dc:	mov	r2, #5
   131e0:	mov	r0, #0
   131e4:	bl	11230 <dcgettext@plt>
   131e8:	mov	r2, r0
   131ec:	mov	r1, #0
   131f0:	mov	r0, #1
   131f4:	bl	13a94 <__assert_fail@plt+0x25b8>
   131f8:	movw	r1, #63496	; 0xf808
   131fc:	movt	r1, #1
   13200:	ldr	r5, [r9]
   13204:	mov	r2, #5
   13208:	mov	r0, #0
   1320c:	bl	11230 <dcgettext@plt>
   13210:	ldr	r1, [r4, #260]	; 0x104
   13214:	mov	r6, r0
   13218:	mov	r0, #4
   1321c:	bl	19d60 <__assert_fail@plt+0x8884>
   13220:	mov	r3, r0
   13224:	mov	r2, r6
   13228:	mov	r1, r5
   1322c:	mov	r0, #1
   13230:	bl	13a94 <__assert_fail@plt+0x25b8>
   13234:	movw	r1, #63496	; 0xf808
   13238:	movt	r1, #1
   1323c:	ldr	r5, [r9]
   13240:	mov	r2, #5
   13244:	mov	r0, #0
   13248:	bl	11230 <dcgettext@plt>
   1324c:	mov	r6, r0
   13250:	mov	r0, #4
   13254:	ldr	r1, [r4, #256]	; 0x100
   13258:	b	1321c <__assert_fail@plt+0x1d40>
   1325c:	mov	r2, #5
   13260:	movw	r1, #63176	; 0xf6c8
   13264:	movt	r1, #1
   13268:	mov	r0, r8
   1326c:	bl	11230 <dcgettext@plt>
   13270:	tst	r7, #4
   13274:	movw	r2, #62988	; 0xf60c
   13278:	movt	r2, #1
   1327c:	mov	r4, r0
   13280:	movw	r0, #62976	; 0xf600
   13284:	movt	r0, #1
   13288:	moveq	r0, r2
   1328c:	bl	1b08c <__assert_fail@plt+0x9bb0>
   13290:	movw	r2, #62616	; 0xf498
   13294:	movt	r2, #1
   13298:	mov	r3, r4
   1329c:	mov	r1, r8
   132a0:	str	r0, [sp]
   132a4:	mov	r0, r1
   132a8:	bl	13a94 <__assert_fail@plt+0x25b8>
   132ac:	mov	r0, #1
   132b0:	bl	142b4 <__assert_fail@plt+0x2dd8>
   132b4:	mov	r2, #5
   132b8:	movw	r1, #63148	; 0xf6ac
   132bc:	movt	r1, #1
   132c0:	mov	r0, r9
   132c4:	bl	11230 <dcgettext@plt>
   132c8:	mov	r4, r0
   132cc:	movw	r0, #63284	; 0xf734
   132d0:	movt	r0, #1
   132d4:	bl	1b08c <__assert_fail@plt+0x9bb0>
   132d8:	movw	r2, #62616	; 0xf498
   132dc:	movt	r2, #1
   132e0:	mov	r3, r4
   132e4:	mov	r1, r9
   132e8:	b	132a0 <__assert_fail@plt+0x1dc4>
   132ec:	ldr	r3, [pc, #-3548]	; 12518 <__assert_fail@plt+0x103c>
   132f0:	ldrd	r2, [r3, #-8]
   132f4:	adds	r0, r2, lr
   132f8:	adcs	r1, r3, r7
   132fc:	mov	r6, r0
   13300:	mov	r7, r1
   13304:	bvs	12794 <__assert_fail@plt+0x12b8>
   13308:	b	1279c <__assert_fail@plt+0x12c0>
   1330c:	mov	r2, #5
   13310:	movw	r1, #63532	; 0xf82c
   13314:	movt	r1, #1
   13318:	mov	r0, #0
   1331c:	bl	11230 <dcgettext@plt>
   13320:	ldr	r3, [r4, #120]	; 0x78
   13324:	mov	r2, r0
   13328:	mov	r1, #0
   1332c:	mov	r0, #1
   13330:	ldrd	r4, [sp, #40]	; 0x28
   13334:	strd	r4, [sp]
   13338:	str	r3, [sp, #8]
   1333c:	bl	13a94 <__assert_fail@plt+0x25b8>
   13340:	movw	r3, #63252	; 0xf714
   13344:	movt	r3, #1
   13348:	mov	r2, sl
   1334c:	mov	ip, #115	; 0x73
   13350:	ldrb	lr, [r2], #1
   13354:	cmp	lr, ip
   13358:	bne	1337c <__assert_fail@plt+0x1ea0>
   1335c:	ldrb	ip, [r3, #1]!
   13360:	cmp	ip, #0
   13364:	bne	13350 <__assert_fail@plt+0x1e74>
   13368:	ldrb	r3, [r2]
   1336c:	cmp	r3, #61	; 0x3d
   13370:	cmpne	r3, #0
   13374:	strdeq	r0, [sp, #56]	; 0x38
   13378:	beq	13004 <__assert_fail@plt+0x1b28>
   1337c:	movw	r3, #63260	; 0xf71c
   13380:	movt	r3, #1
   13384:	mov	r2, sl
   13388:	mov	ip, #99	; 0x63
   1338c:	ldrb	lr, [r2], #1
   13390:	cmp	lr, ip
   13394:	bne	133bc <__assert_fail@plt+0x1ee0>
   13398:	ldrb	ip, [r3, #1]!
   1339c:	cmp	ip, #0
   133a0:	bne	1338c <__assert_fail@plt+0x1eb0>
   133a4:	ldrb	r3, [r2]
   133a8:	cmp	r3, #61	; 0x3d
   133ac:	cmpne	r3, #0
   133b0:	bne	133bc <__assert_fail@plt+0x1ee0>
   133b4:	strd	r0, [sp, #40]	; 0x28
   133b8:	b	13004 <__assert_fail@plt+0x1b28>
   133bc:	movw	r1, #63080	; 0xf668
   133c0:	movt	r1, #1
   133c4:	mov	r2, #5
   133c8:	mov	r0, #0
   133cc:	b	130bc <__assert_fail@plt+0x1be0>
   133d0:	mov	fp, #0
   133d4:	mov	lr, #0
   133d8:	pop	{r1}		; (ldr r1, [sp], #4)
   133dc:	mov	r2, sp
   133e0:	push	{r2}		; (str r2, [sp, #-4]!)
   133e4:	push	{r0}		; (str r0, [sp, #-4]!)
   133e8:	ldr	ip, [pc, #16]	; 13400 <__assert_fail@plt+0x1f24>
   133ec:	push	{ip}		; (str ip, [sp, #-4]!)
   133f0:	ldr	r0, [pc, #12]	; 13404 <__assert_fail@plt+0x1f28>
   133f4:	ldr	r3, [pc, #12]	; 13408 <__assert_fail@plt+0x1f2c>
   133f8:	bl	11320 <__libc_start_main@plt>
   133fc:	bl	114ac <abort@plt>
   13400:	strdeq	sp, [r1], -r8
   13404:	andeq	r1, r1, r8, ror #9
   13408:	muleq	r1, r8, lr
   1340c:	ldr	r3, [pc, #20]	; 13428 <__assert_fail@plt+0x1f4c>
   13410:	ldr	r2, [pc, #20]	; 1342c <__assert_fail@plt+0x1f50>
   13414:	add	r3, pc, r3
   13418:	ldr	r2, [r3, r2]
   1341c:	cmp	r2, #0
   13420:	bxeq	lr
   13424:	b	11350 <__gmon_start__@plt>
   13428:	andeq	sp, r1, r4, ror #23
   1342c:	andeq	r0, r0, r0, asr #2
   13430:	ldr	r0, [pc, #24]	; 13450 <__assert_fail@plt+0x1f74>
   13434:	ldr	r3, [pc, #24]	; 13454 <__assert_fail@plt+0x1f78>
   13438:	cmp	r3, r0
   1343c:	bxeq	lr
   13440:	ldr	r3, [pc, #16]	; 13458 <__assert_fail@plt+0x1f7c>
   13444:	cmp	r3, #0
   13448:	bxeq	lr
   1344c:	bx	r3
   13450:	andeq	r1, r3, r4, asr #3
   13454:	andeq	r1, r3, r4, asr #3
   13458:	andeq	r0, r0, r0
   1345c:	ldr	r0, [pc, #36]	; 13488 <__assert_fail@plt+0x1fac>
   13460:	ldr	r1, [pc, #36]	; 1348c <__assert_fail@plt+0x1fb0>
   13464:	sub	r1, r1, r0
   13468:	asr	r1, r1, #2
   1346c:	add	r1, r1, r1, lsr #31
   13470:	asrs	r1, r1, #1
   13474:	bxeq	lr
   13478:	ldr	r3, [pc, #16]	; 13490 <__assert_fail@plt+0x1fb4>
   1347c:	cmp	r3, #0
   13480:	bxeq	lr
   13484:	bx	r3
   13488:	andeq	r1, r3, r4, asr #3
   1348c:	andeq	r1, r3, r4, asr #3
   13490:	andeq	r0, r0, r0
   13494:	push	{r4, lr}
   13498:	ldr	r4, [pc, #24]	; 134b8 <__assert_fail@plt+0x1fdc>
   1349c:	ldrb	r3, [r4]
   134a0:	cmp	r3, #0
   134a4:	popne	{r4, pc}
   134a8:	bl	13430 <__assert_fail@plt+0x1f54>
   134ac:	mov	r3, #1
   134b0:	strb	r3, [r4]
   134b4:	pop	{r4, pc}
   134b8:	andeq	r1, r3, r4, ror #3
   134bc:	b	1345c <__assert_fail@plt+0x1f80>
   134c0:	movw	r3, #4584	; 0x11e8
   134c4:	movt	r3, #3
   134c8:	str	r0, [r3]
   134cc:	bx	lr
   134d0:	movw	r3, #4584	; 0x11e8
   134d4:	movt	r3, #3
   134d8:	ldr	r2, [r3, #4]
   134dc:	add	r2, r2, #1
   134e0:	str	r2, [r3, #4]
   134e4:	bx	lr
   134e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   134ec:	strd	r6, [sp, #8]
   134f0:	strd	sl, [sp, #24]
   134f4:	mov	sl, r0
   134f8:	mov	fp, r1
   134fc:	orrs	r3, sl, fp
   13500:	strd	r8, [sp, #16]
   13504:	str	lr, [sp, #32]
   13508:	movne	r8, r0
   1350c:	movne	r9, r1
   13510:	vpush	{d8}
   13514:	sub	sp, sp, #2016	; 0x7e0
   13518:	sub	sp, sp, #12
   1351c:	beq	13884 <__assert_fail@plt+0x23a8>
   13520:	mov	r6, #1
   13524:	mov	r7, #0
   13528:	movw	r4, #4584	; 0x11e8
   1352c:	movt	r4, #3
   13530:	add	r2, sp, #60	; 0x3c
   13534:	movw	r3, #465	; 0x1d1
   13538:	strd	r6, [sp]
   1353c:	strd	r6, [sp, #8]
   13540:	ldrd	r0, [r4, #8]
   13544:	bl	16480 <__assert_fail@plt+0x4fa4>
   13548:	add	r2, sp, #712	; 0x2c8
   1354c:	movw	r3, #497	; 0x1f1
   13550:	strd	r6, [sp]
   13554:	add	r2, r2, #2
   13558:	mov	r5, r0
   1355c:	strd	r6, [sp, #8]
   13560:	ldrd	r0, [r4, #8]
   13564:	bl	16480 <__assert_fail@plt+0x4fa4>
   13568:	ldrd	r2, [r4, #16]
   1356c:	mov	r6, r0
   13570:	cmp	r2, r8
   13574:	sbcs	r1, r3, r9
   13578:	bge	137ac <__assert_fail@plt+0x22d0>
   1357c:	subs	r8, r8, r2
   13580:	sbc	r7, r9, r3
   13584:	mov	r0, r8
   13588:	mov	r1, r7
   1358c:	bl	1dbac <__assert_fail@plt+0xc6d0>
   13590:	vmov	d6, r0, r1
   13594:	add	r2, sp, #1360	; 0x550
   13598:	movw	r3, #465	; 0x1d1
   1359c:	vldr	d7, [pc, #812]	; 138d0 <__assert_fail@plt+0x23f4>
   135a0:	add	r2, r2, #8
   135a4:	str	r8, [sp, #8]
   135a8:	add	r9, pc, #808	; 0x328
   135ac:	ldrd	r8, [r9]
   135b0:	ldrd	r0, [r4, #8]
   135b4:	strd	r8, [sp]
   135b8:	str	r7, [sp, #12]
   135bc:	vdiv.f64	d8, d6, d7
   135c0:	bl	16480 <__assert_fail@plt+0x4fa4>
   135c4:	mov	r7, r0
   135c8:	str	r0, [sp, #24]
   135cc:	bl	11380 <strlen@plt>
   135d0:	movw	r3, #58616	; 0xe4f8
   135d4:	movt	r3, #1
   135d8:	ldrh	r1, [r3]
   135dc:	add	r2, r7, r0
   135e0:	ldrb	r3, [r3, #2]
   135e4:	strh	r1, [r7, r0]
   135e8:	strb	r3, [r2, #2]
   135ec:	orrs	r3, sl, fp
   135f0:	beq	1362c <__assert_fail@plt+0x2150>
   135f4:	movw	r7, #4568	; 0x11d8
   135f8:	movt	r7, #3
   135fc:	ldr	r0, [r7]
   13600:	ldr	r3, [r0, #20]
   13604:	ldr	r2, [r0, #24]
   13608:	cmp	r3, r2
   1360c:	bcs	138bc <__assert_fail@plt+0x23e0>
   13610:	add	r2, r3, #1
   13614:	mov	r1, #13
   13618:	str	r2, [r0, #20]
   1361c:	movw	r2, #58584	; 0xe4d8
   13620:	movt	r2, #1
   13624:	strb	r1, [r3]
   13628:	b	1363c <__assert_fail@plt+0x2160>
   1362c:	movw	r2, #58592	; 0xe4e0
   13630:	movt	r2, #1
   13634:	movw	r7, #4568	; 0x11d8
   13638:	movt	r7, #3
   1363c:	mov	r3, #24
   13640:	add	r0, sp, #36	; 0x24
   13644:	str	r2, [sp]
   13648:	mov	r1, r3
   1364c:	mov	r2, #1
   13650:	vstr	d8, [sp, #8]
   13654:	bl	114d0 <__snprintf_chk@plt>
   13658:	mov	r0, r5
   1365c:	bl	11380 <strlen@plt>
   13660:	add	r0, r5, r0
   13664:	ldrb	r3, [r0, #-2]
   13668:	cmp	r3, #32
   1366c:	beq	137f4 <__assert_fail@plt+0x2318>
   13670:	mov	r0, r6
   13674:	bl	11380 <strlen@plt>
   13678:	ldr	r3, [r7]
   1367c:	add	r0, r6, r0
   13680:	str	r3, [sp, #28]
   13684:	ldrb	r3, [r0, #-2]
   13688:	ldrd	r0, [r4, #8]
   1368c:	cmp	r3, #32
   13690:	mov	r8, r0
   13694:	mov	r9, r1
   13698:	beq	13734 <__assert_fail@plt+0x2258>
   1369c:	mov	r2, #5
   136a0:	movw	r1, #58708	; 0xe554
   136a4:	movt	r1, #1
   136a8:	mov	r0, #0
   136ac:	bl	11230 <dcgettext@plt>
   136b0:	add	r3, sp, #36	; 0x24
   136b4:	mov	r2, r0
   136b8:	strd	r8, [sp]
   136bc:	mov	r1, #1
   136c0:	str	r5, [sp, #8]
   136c4:	str	r6, [sp, #12]
   136c8:	str	r3, [sp, #16]
   136cc:	ldr	r3, [sp, #24]
   136d0:	ldr	r0, [sp, #28]
   136d4:	str	r3, [sp, #20]
   136d8:	bl	11404 <__fprintf_chk@plt>
   136dc:	mov	r5, r0
   136e0:	orrs	r3, sl, fp
   136e4:	beq	1377c <__assert_fail@plt+0x22a0>
   136e8:	cmp	r5, #0
   136ec:	blt	136fc <__assert_fail@plt+0x2220>
   136f0:	ldr	r3, [r4, #24]
   136f4:	cmp	r3, r5
   136f8:	bgt	13894 <__assert_fail@plt+0x23b8>
   136fc:	str	r5, [r4, #24]
   13700:	ldrd	r0, [r4, #8]
   13704:	movw	r3, #4432	; 0x1150
   13708:	movt	r3, #3
   1370c:	strd	r0, [r3]
   13710:	add	sp, sp, #2016	; 0x7e0
   13714:	add	sp, sp, #12
   13718:	vpop	{d8}
   1371c:	ldrd	r4, [sp]
   13720:	ldrd	r6, [sp, #8]
   13724:	ldrd	r8, [sp, #16]
   13728:	ldrd	sl, [sp, #24]
   1372c:	add	sp, sp, #32
   13730:	pop	{pc}		; (ldr pc, [sp], #4)
   13734:	mov	r2, #5
   13738:	movw	r1, #58676	; 0xe534
   1373c:	movt	r1, #1
   13740:	mov	r0, #0
   13744:	bl	11230 <dcgettext@plt>
   13748:	add	r3, sp, #36	; 0x24
   1374c:	mov	r2, r0
   13750:	strd	r8, [sp]
   13754:	mov	r1, #1
   13758:	str	r5, [sp, #8]
   1375c:	str	r3, [sp, #12]
   13760:	ldr	r3, [sp, #24]
   13764:	ldr	r0, [sp, #28]
   13768:	str	r3, [sp, #16]
   1376c:	bl	11404 <__fprintf_chk@plt>
   13770:	orrs	r3, sl, fp
   13774:	mov	r5, r0
   13778:	bne	136e8 <__assert_fail@plt+0x220c>
   1377c:	ldr	r0, [r7]
   13780:	ldr	r3, [r0, #20]
   13784:	ldr	r2, [r0, #24]
   13788:	cmp	r3, r2
   1378c:	addcc	r1, r3, #1
   13790:	movcc	r2, #10
   13794:	strcc	r1, [r0, #20]
   13798:	strbcc	r2, [r3]
   1379c:	bcc	13700 <__assert_fail@plt+0x2224>
   137a0:	mov	r1, #10
   137a4:	bl	11434 <__overflow@plt>
   137a8:	b	13700 <__assert_fail@plt+0x2224>
   137ac:	mov	r2, #5
   137b0:	movw	r1, #58600	; 0xe4e8
   137b4:	movt	r1, #1
   137b8:	mov	r0, #0
   137bc:	vldr	d8, [pc, #284]	; 138e0 <__assert_fail@plt+0x2404>
   137c0:	bl	11230 <dcgettext@plt>
   137c4:	movw	r2, #58612	; 0xe4f4
   137c8:	movt	r2, #1
   137cc:	movw	r3, #654	; 0x28e
   137d0:	str	r0, [sp, #4]
   137d4:	add	r0, sp, #1360	; 0x550
   137d8:	mov	r1, r3
   137dc:	add	r0, r0, #8
   137e0:	str	r2, [sp]
   137e4:	mov	r2, #1
   137e8:	str	r0, [sp, #24]
   137ec:	bl	114d0 <__snprintf_chk@plt>
   137f0:	b	135ec <__assert_fail@plt+0x2110>
   137f4:	ldr	r5, [r4, #8]
   137f8:	mov	r3, #0
   137fc:	mvn	r2, #0
   13800:	ldr	r6, [r4, #12]
   13804:	ldr	r9, [r7]
   13808:	mov	r0, r5
   1380c:	cmp	r6, r3
   13810:	mov	r1, r6
   13814:	cmpeq	r5, r2
   13818:	movls	r3, r5
   1381c:	bls	13838 <__assert_fail@plt+0x235c>
   13820:	movw	r2, #16960	; 0x4240
   13824:	movt	r2, #15
   13828:	mov	r3, #0
   1382c:	bl	1dce0 <__assert_fail@plt+0xc804>
   13830:	add	r3, r2, #999424	; 0xf4000
   13834:	add	r3, r3, #576	; 0x240
   13838:	mov	r0, #5
   1383c:	movw	r2, #58620	; 0xe4fc
   13840:	movt	r2, #1
   13844:	movw	r1, #58648	; 0xe518
   13848:	movt	r1, #1
   1384c:	str	r0, [sp]
   13850:	mov	r0, #0
   13854:	bl	114c4 <dcngettext@plt>
   13858:	add	r3, sp, #36	; 0x24
   1385c:	mov	r2, r0
   13860:	stm	sp, {r5, r6}
   13864:	mov	r1, #1
   13868:	mov	r0, r9
   1386c:	str	r3, [sp, #8]
   13870:	ldr	r3, [sp, #24]
   13874:	str	r3, [sp, #12]
   13878:	bl	11404 <__fprintf_chk@plt>
   1387c:	mov	r5, r0
   13880:	b	136e0 <__assert_fail@plt+0x2204>
   13884:	bl	163f8 <__assert_fail@plt+0x4f1c>
   13888:	mov	r8, r0
   1388c:	mov	r9, r1
   13890:	b	13520 <__assert_fail@plt+0x2044>
   13894:	movw	r1, #62008	; 0xf238
   13898:	movt	r1, #1
   1389c:	ldr	r0, [r7]
   138a0:	sub	r3, r3, r5
   138a4:	movw	r2, #58744	; 0xe578
   138a8:	movt	r2, #1
   138ac:	str	r1, [sp]
   138b0:	mov	r1, #1
   138b4:	bl	11404 <__fprintf_chk@plt>
   138b8:	b	136fc <__assert_fail@plt+0x2220>
   138bc:	mov	r1, #13
   138c0:	bl	11434 <__overflow@plt>
   138c4:	movw	r2, #58584	; 0xe4d8
   138c8:	movt	r2, #1
   138cc:	b	1363c <__assert_fail@plt+0x2160>
   138d0:	andeq	r0, r0, r0
   138d4:	bicmi	ip, sp, r5, ror #26
   138d8:	blcc	fe6c60e0 <opterr@@GLIBC_2.4+0xfe694f00>
	...
   138e8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   138ec:	str	r6, [sp, #8]
   138f0:	strd	sl, [sp, #20]
   138f4:	movw	fp, #4432	; 0x1150
   138f8:	movt	fp, #3
   138fc:	ldr	r3, [fp, #8]
   13900:	strd	r8, [sp, #12]
   13904:	str	lr, [sp, #28]
   13908:	sub	sp, sp, #40	; 0x28
   1390c:	cmp	r3, #1
   13910:	beq	13a68 <__assert_fail@plt+0x258c>
   13914:	movw	sl, #4584	; 0x11e8
   13918:	movt	sl, #3
   1391c:	ldr	r2, [sl, #24]
   13920:	movw	r6, #4568	; 0x11d8
   13924:	movt	r6, #3
   13928:	ldr	r4, [r6]
   1392c:	cmp	r2, #0
   13930:	ble	13960 <__assert_fail@plt+0x2484>
   13934:	ldr	r2, [r4, #20]
   13938:	ldr	r1, [r4, #24]
   1393c:	cmp	r2, r1
   13940:	addcc	r0, r2, #1
   13944:	movcc	r1, #10
   13948:	strcc	r0, [r4, #20]
   1394c:	strbcc	r1, [r2]
   13950:	bcs	13a84 <__assert_fail@plt+0x25a8>
   13954:	ldr	r4, [r6]
   13958:	mov	r2, #0
   1395c:	str	r2, [sl, #24]
   13960:	mov	r2, #5
   13964:	movw	r1, #58748	; 0xe57c
   13968:	movt	r1, #1
   1396c:	mov	r0, #0
   13970:	bl	11230 <dcgettext@plt>
   13974:	mov	r2, r0
   13978:	mov	r0, r4
   1397c:	ldrd	r4, [sl, #40]	; 0x28
   13980:	mov	r1, #1
   13984:	ldrd	r8, [sl, #48]	; 0x30
   13988:	strd	r4, [sp, #32]
   1398c:	ldrd	r4, [sl, #32]
   13990:	strd	r8, [sp, #8]
   13994:	strd	r4, [sp, #24]
   13998:	ldrd	r4, [sp, #32]
   1399c:	strd	r4, [sp, #16]
   139a0:	ldrd	r4, [sl, #56]	; 0x38
   139a4:	strd	r4, [sp]
   139a8:	bl	11404 <__fprintf_chk@plt>
   139ac:	ldrd	r4, [sl, #64]	; 0x40
   139b0:	orrs	r3, r4, r5
   139b4:	bne	139ec <__assert_fail@plt+0x2510>
   139b8:	ldr	r3, [fp, #8]
   139bc:	cmp	r3, #2
   139c0:	beq	13a68 <__assert_fail@plt+0x258c>
   139c4:	mov	r0, #0
   139c8:	mov	r1, #0
   139cc:	add	sp, sp, #40	; 0x28
   139d0:	ldrd	r4, [sp]
   139d4:	ldr	r6, [sp, #8]
   139d8:	ldrd	r8, [sp, #12]
   139dc:	ldrd	sl, [sp, #20]
   139e0:	ldr	lr, [sp, #28]
   139e4:	add	sp, sp, #32
   139e8:	b	134e8 <__assert_fail@plt+0x200c>
   139ec:	mov	r1, #0
   139f0:	mvn	r0, #0
   139f4:	ldr	r6, [r6]
   139f8:	cmp	r5, r1
   139fc:	cmpeq	r4, r0
   13a00:	movls	r3, r4
   13a04:	bls	13a28 <__assert_fail@plt+0x254c>
   13a08:	movw	r2, #16960	; 0x4240
   13a0c:	movt	r2, #15
   13a10:	mov	r3, #0
   13a14:	mov	r0, r4
   13a18:	mov	r1, r5
   13a1c:	bl	1dce0 <__assert_fail@plt+0xc804>
   13a20:	add	r3, r2, #999424	; 0xf4000
   13a24:	add	r3, r3, #576	; 0x240
   13a28:	mov	r0, #5
   13a2c:	movw	r2, #58792	; 0xe5a8
   13a30:	movt	r2, #1
   13a34:	movw	r1, #58816	; 0xe5c0
   13a38:	movt	r1, #1
   13a3c:	str	r0, [sp]
   13a40:	mov	r0, #0
   13a44:	bl	114c4 <dcngettext@plt>
   13a48:	mov	r2, r0
   13a4c:	mov	r1, #1
   13a50:	strd	r4, [sp]
   13a54:	mov	r0, r6
   13a58:	bl	11404 <__fprintf_chk@plt>
   13a5c:	ldr	r3, [fp, #8]
   13a60:	cmp	r3, #2
   13a64:	bne	139c4 <__assert_fail@plt+0x24e8>
   13a68:	add	sp, sp, #40	; 0x28
   13a6c:	ldrd	r4, [sp]
   13a70:	ldr	r6, [sp, #8]
   13a74:	ldrd	r8, [sp, #12]
   13a78:	ldrd	sl, [sp, #20]
   13a7c:	add	sp, sp, #28
   13a80:	pop	{pc}		; (ldr pc, [sp], #4)
   13a84:	mov	r0, r4
   13a88:	mov	r1, #10
   13a8c:	bl	11434 <__overflow@plt>
   13a90:	b	13954 <__assert_fail@plt+0x2478>
   13a94:	push	{r2, r3}
   13a98:	strd	r4, [sp, #-16]!
   13a9c:	movw	r4, #4584	; 0x11e8
   13aa0:	movt	r4, #3
   13aa4:	ldr	r3, [r4, #24]
   13aa8:	mov	r5, r0
   13aac:	str	r6, [sp, #8]
   13ab0:	mov	r6, r1
   13ab4:	str	lr, [sp, #12]
   13ab8:	sub	sp, sp, #8
   13abc:	cmp	r3, #0
   13ac0:	ble	13af8 <__assert_fail@plt+0x261c>
   13ac4:	movw	r3, #4568	; 0x11d8
   13ac8:	movt	r3, #3
   13acc:	ldr	r0, [r3]
   13ad0:	ldr	r3, [r0, #20]
   13ad4:	ldr	r2, [r0, #24]
   13ad8:	cmp	r3, r2
   13adc:	addcc	r1, r3, #1
   13ae0:	movcc	r2, #10
   13ae4:	strcc	r1, [r0, #20]
   13ae8:	strbcc	r2, [r3]
   13aec:	bcs	13b30 <__assert_fail@plt+0x2654>
   13af0:	mov	r3, #0
   13af4:	str	r3, [r4, #24]
   13af8:	ldr	r2, [sp, #24]
   13afc:	add	ip, sp, #28
   13b00:	mov	r1, r6
   13b04:	mov	r0, r5
   13b08:	mov	r3, ip
   13b0c:	str	ip, [sp, #4]
   13b10:	bl	1b220 <__assert_fail@plt+0x9d44>
   13b14:	add	sp, sp, #8
   13b18:	ldrd	r4, [sp]
   13b1c:	ldr	r6, [sp, #8]
   13b20:	ldr	lr, [sp, #12]
   13b24:	add	sp, sp, #16
   13b28:	add	sp, sp, #8
   13b2c:	bx	lr
   13b30:	mov	r1, #10
   13b34:	bl	11434 <__overflow@plt>
   13b38:	b	13af0 <__assert_fail@plt+0x2614>
   13b3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13b40:	subs	r5, r0, #0
   13b44:	movw	r4, #4584	; 0x11e8
   13b48:	movt	r4, #3
   13b4c:	strd	r6, [sp, #8]
   13b50:	strd	r8, [sp, #16]
   13b54:	strd	sl, [sp, #24]
   13b58:	str	lr, [sp, #32]
   13b5c:	sub	sp, sp, #44	; 0x2c
   13b60:	bne	13d20 <__assert_fail@plt+0x2844>
   13b64:	ldrb	r1, [r4, #88]	; 0x58
   13b68:	str	r1, [sp, #28]
   13b6c:	add	r1, r4, #80	; 0x50
   13b70:	orrs	r0, r2, r3
   13b74:	ldrd	r6, [r1]
   13b78:	beq	13c34 <__assert_fail@plt+0x2758>
   13b7c:	adds	r8, r6, r2
   13b80:	adcs	r9, r7, r3
   13b84:	bvc	13bcc <__assert_fail@plt+0x26f0>
   13b88:	mov	ip, #0
   13b8c:	movw	r0, #65535	; 0xffff
   13b90:	movt	r0, #1
   13b94:	mov	r6, #0
   13b98:	movt	r6, #65534	; 0xfffe
   13b9c:	mvn	r7, #-2147483648	; 0x80000000
   13ba0:	stm	r1, {r0, ip}
   13ba4:	str	r0, [sp, #16]
   13ba8:	str	ip, [sp, #20]
   13bac:	cmp	r5, #0
   13bb0:	strd	r2, [sp, #32]
   13bb4:	bne	13c58 <__assert_fail@plt+0x277c>
   13bb8:	ldrb	r8, [r4, #90]	; 0x5a
   13bbc:	cmp	r8, #0
   13bc0:	beq	13d30 <__assert_fail@plt+0x2854>
   13bc4:	ldrd	r0, [r4, #96]	; 0x60
   13bc8:	b	13ca8 <__assert_fail@plt+0x27cc>
   13bcc:	asr	ip, r9, #31
   13bd0:	mov	r0, r8
   13bd4:	eor	r0, r0, ip
   13bd8:	asr	fp, ip, #31
   13bdc:	subs	r0, r0, ip
   13be0:	ubfx	r0, r0, #0, #17
   13be4:	mov	lr, fp
   13be8:	eor	r0, r0, ip
   13bec:	subs	r0, r0, ip
   13bf0:	str	r0, [sp, #16]
   13bf4:	sbc	r0, fp, fp
   13bf8:	str	r0, [sp, #20]
   13bfc:	ldrd	sl, [sp, #16]
   13c00:	cmp	sl, r8
   13c04:	strd	sl, [r1]
   13c08:	sbcs	r0, fp, r9
   13c0c:	blt	13da4 <__assert_fail@plt+0x28c8>
   13c10:	mov	r8, #1
   13c14:	mov	r0, r8
   13c18:	add	sp, sp, #44	; 0x2c
   13c1c:	ldrd	r4, [sp]
   13c20:	ldrd	r6, [sp, #8]
   13c24:	ldrd	r8, [sp, #16]
   13c28:	ldrd	sl, [sp, #24]
   13c2c:	add	sp, sp, #32
   13c30:	pop	{pc}		; (ldr pc, [sp], #4)
   13c34:	orrs	r1, r6, r7
   13c38:	bne	13c48 <__assert_fail@plt+0x276c>
   13c3c:	ldr	r1, [sp, #28]
   13c40:	cmp	r1, #0
   13c44:	beq	13c10 <__assert_fail@plt+0x2734>
   13c48:	cmp	r5, #0
   13c4c:	strd	r2, [sp, #16]
   13c50:	strd	r2, [sp, #32]
   13c54:	beq	13bb8 <__assert_fail@plt+0x26dc>
   13c58:	movw	r8, #4432	; 0x1150
   13c5c:	movt	r8, #3
   13c60:	ldrd	r0, [r8, #16]
   13c64:	mvn	r3, #0
   13c68:	mvn	r2, #0
   13c6c:	cmp	r1, r3
   13c70:	cmpeq	r0, r2
   13c74:	beq	13d40 <__assert_fail@plt+0x2864>
   13c78:	cmp	r0, #0
   13c7c:	sbcs	r3, r1, #0
   13c80:	blt	13d84 <__assert_fail@plt+0x28a8>
   13c84:	ldrd	r2, [sp, #32]
   13c88:	orrs	r3, r2, r3
   13c8c:	beq	13cb4 <__assert_fail@plt+0x27d8>
   13c90:	ldrd	sl, [sp, #16]
   13c94:	adds	r3, sl, r6
   13c98:	adc	r2, fp, r7
   13c9c:	adds	r0, r0, r3
   13ca0:	adc	r1, r1, r2
   13ca4:	strd	r0, [r8, #16]
   13ca8:	cmp	r0, #0
   13cac:	sbcs	r3, r1, #0
   13cb0:	blt	13d40 <__assert_fail@plt+0x2864>
   13cb4:	ldrd	r2, [sp, #32]
   13cb8:	subs	r8, r0, r6
   13cbc:	sbc	sl, r1, r7
   13cc0:	mov	r1, r2
   13cc4:	orrs	r3, r1, r3
   13cc8:	moveq	r3, #1
   13ccc:	movne	r3, #0
   13cd0:	orrs	r2, r6, r7
   13cd4:	moveq	r3, #0
   13cd8:	cmp	r3, #0
   13cdc:	beq	13d48 <__assert_fail@plt+0x286c>
   13ce0:	ldr	r3, [sp, #28]
   13ce4:	cmp	r3, #0
   13ce8:	bne	13d5c <__assert_fail@plt+0x2880>
   13cec:	ldrd	r2, [sp, #16]
   13cf0:	subs	r8, r8, r2
   13cf4:	sbc	sl, sl, r3
   13cf8:	mov	r1, #4
   13cfc:	mov	r2, r8
   13d00:	strd	r6, [sp]
   13d04:	mov	r3, sl
   13d08:	mov	r0, r5
   13d0c:	str	r1, [sp, #8]
   13d10:	bl	11188 <posix_fadvise64@plt>
   13d14:	adds	r8, r0, #1
   13d18:	movne	r8, #1
   13d1c:	b	13c14 <__assert_fail@plt+0x2738>
   13d20:	ldrb	r1, [r4, #89]	; 0x59
   13d24:	str	r1, [sp, #28]
   13d28:	add	r1, r4, #72	; 0x48
   13d2c:	b	13b70 <__assert_fail@plt+0x2694>
   13d30:	bl	113a4 <__errno_location@plt>
   13d34:	mov	r3, #29
   13d38:	str	r3, [r0]
   13d3c:	b	13c14 <__assert_fail@plt+0x2738>
   13d40:	mov	r8, #0
   13d44:	b	13c14 <__assert_fail@plt+0x2738>
   13d48:	ldrd	r2, [sp, #16]
   13d4c:	subs	r8, r8, r2
   13d50:	sbc	sl, sl, r3
   13d54:	orrs	r3, r6, r7
   13d58:	bne	13cf8 <__assert_fail@plt+0x281c>
   13d5c:	ldr	r2, [r4, #104]	; 0x68
   13d60:	mov	r0, r8
   13d64:	mov	r1, sl
   13d68:	mov	r6, #0
   13d6c:	mov	r7, #0
   13d70:	asr	r3, r2, #31
   13d74:	bl	1dc0c <__assert_fail@plt+0xc730>
   13d78:	subs	r8, r8, r2
   13d7c:	sbc	sl, sl, r3
   13d80:	b	13cf8 <__assert_fail@plt+0x281c>
   13d84:	mov	r1, #1
   13d88:	mov	r2, #0
   13d8c:	mov	r3, #0
   13d90:	mov	r0, r1
   13d94:	str	r1, [sp]
   13d98:	bl	112a8 <lseek64@plt>
   13d9c:	strd	r0, [r8, #16]
   13da0:	b	13ca8 <__assert_fail@plt+0x27cc>
   13da4:	ldrd	r0, [sp, #16]
   13da8:	mov	lr, r8
   13dac:	subs	r6, r8, r0
   13db0:	sbc	r7, r9, r1
   13db4:	b	13bac <__assert_fail@plt+0x26d0>
   13db8:	movw	r3, #4432	; 0x1150
   13dbc:	movt	r3, #3
   13dc0:	ldrb	r3, [r3, #24]
   13dc4:	cmp	r3, #0
   13dc8:	beq	13dd0 <__assert_fail@plt+0x28f4>
   13dcc:	b	15ebc <__assert_fail@plt+0x49e0>
   13dd0:	movw	r3, #4568	; 0x11d8
   13dd4:	movt	r3, #3
   13dd8:	str	r4, [sp, #-8]!
   13ddc:	ldr	r0, [r3]
   13de0:	str	lr, [sp, #4]
   13de4:	bl	15e14 <__assert_fail@plt+0x4938>
   13de8:	cmp	r0, #0
   13dec:	bne	13dfc <__assert_fail@plt+0x2920>
   13df0:	ldr	r4, [sp]
   13df4:	add	sp, sp, #4
   13df8:	pop	{pc}		; (ldr pc, [sp], #4)
   13dfc:	mov	r0, #1
   13e00:	bl	111dc <_exit@plt>
   13e04:	mov	r2, #5
   13e08:	movw	r1, #58840	; 0xe5d8
   13e0c:	movt	r1, #1
   13e10:	mov	r0, #0
   13e14:	push	{lr}		; (str lr, [sp, #-4]!)
   13e18:	sub	sp, sp, #676	; 0x2a4
   13e1c:	bl	11230 <dcgettext@plt>
   13e20:	movw	r3, #4584	; 0x11e8
   13e24:	movt	r3, #3
   13e28:	ldr	r4, [r3, #108]	; 0x6c
   13e2c:	mov	r1, #0
   13e30:	mov	r5, r0
   13e34:	mov	r0, #1
   13e38:	add	r2, sp, #20
   13e3c:	movw	r3, #497	; 0x1f1
   13e40:	strd	r0, [sp]
   13e44:	strd	r0, [sp, #8]
   13e48:	asr	r1, r4, #31
   13e4c:	mov	r0, r4
   13e50:	bl	16480 <__assert_fail@plt+0x4fa4>
   13e54:	mov	r3, r4
   13e58:	mov	r2, r5
   13e5c:	str	r0, [sp]
   13e60:	mov	r1, #0
   13e64:	mov	r0, #1
   13e68:	bl	13a94 <__assert_fail@plt+0x25b8>
   13e6c:	str	r4, [sp, #-8]!
   13e70:	movw	r4, #4584	; 0x11e8
   13e74:	movt	r4, #3
   13e78:	ldr	r3, [r4, #112]	; 0x70
   13e7c:	str	lr, [sp, #4]
   13e80:	cmp	r3, #0
   13e84:	beq	13e94 <__assert_fail@plt+0x29b8>
   13e88:	ldr	r4, [sp]
   13e8c:	add	sp, sp, #4
   13e90:	pop	{pc}		; (ldr pc, [sp], #4)
   13e94:	ldrd	r0, [r4, #104]	; 0x68
   13e98:	ldr	r3, [r4, #116]	; 0x74
   13e9c:	ubfx	r3, r3, #7, #1
   13ea0:	add	r1, r3, r1
   13ea4:	bl	11488 <aligned_alloc@plt>
   13ea8:	cmp	r0, #0
   13eac:	str	r0, [r4, #112]	; 0x70
   13eb0:	bne	13e88 <__assert_fail@plt+0x29ac>
   13eb4:	bl	13e04 <__assert_fail@plt+0x2928>
   13eb8:	mov	r2, #5
   13ebc:	movw	r1, #58896	; 0xe610
   13ec0:	movt	r1, #1
   13ec4:	mov	r0, #0
   13ec8:	push	{lr}		; (str lr, [sp, #-4]!)
   13ecc:	sub	sp, sp, #676	; 0x2a4
   13ed0:	bl	11230 <dcgettext@plt>
   13ed4:	movw	r3, #4584	; 0x11e8
   13ed8:	movt	r3, #3
   13edc:	ldr	r4, [r3, #120]	; 0x78
   13ee0:	mov	r1, #0
   13ee4:	mov	r5, r0
   13ee8:	mov	r0, #1
   13eec:	add	r2, sp, #20
   13ef0:	movw	r3, #497	; 0x1f1
   13ef4:	strd	r0, [sp]
   13ef8:	strd	r0, [sp, #8]
   13efc:	asr	r1, r4, #31
   13f00:	mov	r0, r4
   13f04:	bl	16480 <__assert_fail@plt+0x4fa4>
   13f08:	mov	r3, r4
   13f0c:	mov	r2, r5
   13f10:	str	r0, [sp]
   13f14:	mov	r1, #0
   13f18:	mov	r0, #1
   13f1c:	bl	13a94 <__assert_fail@plt+0x25b8>
   13f20:	str	r4, [sp, #-8]!
   13f24:	movw	r4, #4584	; 0x11e8
   13f28:	movt	r4, #3
   13f2c:	ldr	r3, [r4, #124]	; 0x7c
   13f30:	str	lr, [sp, #4]
   13f34:	cmp	r3, #0
   13f38:	beq	13f48 <__assert_fail@plt+0x2a6c>
   13f3c:	ldr	r4, [sp]
   13f40:	add	sp, sp, #4
   13f44:	pop	{pc}		; (ldr pc, [sp], #4)
   13f48:	ldr	r3, [r4, #116]	; 0x74
   13f4c:	tst	r3, #2048	; 0x800
   13f50:	beq	13f70 <__assert_fail@plt+0x2a94>
   13f54:	ldr	r0, [r4, #104]	; 0x68
   13f58:	ldr	r1, [r4, #120]	; 0x78
   13f5c:	bl	11488 <aligned_alloc@plt>
   13f60:	cmp	r0, #0
   13f64:	str	r0, [r4, #124]	; 0x7c
   13f68:	bne	13f3c <__assert_fail@plt+0x2a60>
   13f6c:	bl	13eb8 <__assert_fail@plt+0x29dc>
   13f70:	bl	13e6c <__assert_fail@plt+0x2990>
   13f74:	ldr	r3, [r4, #112]	; 0x70
   13f78:	str	r3, [r4, #124]	; 0x7c
   13f7c:	b	13f3c <__assert_fail@plt+0x2a60>
   13f80:	movw	r2, #58956	; 0xe64c
   13f84:	movt	r2, #1
   13f88:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13f8c:	strd	r6, [sp, #8]
   13f90:	mov	r4, #0
   13f94:	mov	r5, #0
   13f98:	strd	r8, [sp, #16]
   13f9c:	mov	r6, r1
   13fa0:	mov	r7, r0
   13fa4:	strd	sl, [sp, #24]
   13fa8:	str	lr, [sp, #32]
   13fac:	sub	sp, sp, #52	; 0x34
   13fb0:	add	r3, sp, #40	; 0x28
   13fb4:	add	r1, sp, #32
   13fb8:	str	r2, [sp]
   13fbc:	mov	r2, #10
   13fc0:	strd	r4, [sp, #40]	; 0x28
   13fc4:	bl	1c0b0 <__assert_fail@plt+0xabd4>
   13fc8:	bic	r3, r0, #1
   13fcc:	mov	r8, r0
   13fd0:	cmp	r3, #2
   13fd4:	beq	14014 <__assert_fail@plt+0x2b38>
   13fd8:	ldrd	r4, [sp, #40]	; 0x28
   13fdc:	cmp	r4, #0
   13fe0:	sbcs	r3, r5, #0
   13fe4:	blt	140b8 <__assert_fail@plt+0x2bdc>
   13fe8:	cmp	r8, #0
   13fec:	strne	r8, [r6]
   13ff0:	mov	r0, r4
   13ff4:	mov	r1, r5
   13ff8:	add	sp, sp, #52	; 0x34
   13ffc:	ldrd	r4, [sp]
   14000:	ldrd	r6, [sp, #8]
   14004:	ldrd	r8, [sp, #16]
   14008:	ldrd	sl, [sp, #24]
   1400c:	add	sp, sp, #32
   14010:	pop	{pc}		; (ldr pc, [sp], #4)
   14014:	ldr	r0, [sp, #32]
   14018:	ldrb	r3, [r0]
   1401c:	cmp	r3, #120	; 0x78
   14020:	bne	13fd8 <__assert_fail@plt+0x2afc>
   14024:	mov	r3, #0
   14028:	add	r0, r0, #1
   1402c:	add	r1, sp, #36	; 0x24
   14030:	str	r3, [sp, #36]	; 0x24
   14034:	bl	13f80 <__assert_fail@plt+0x2aa4>
   14038:	ldr	ip, [sp, #36]	; 0x24
   1403c:	mov	r4, r0
   14040:	mov	r5, r1
   14044:	bics	lr, ip, #1
   14048:	strne	ip, [r6]
   1404c:	bne	13ff0 <__assert_fail@plt+0x2b14>
   14050:	ldr	r2, [sp, #40]	; 0x28
   14054:	cmp	r1, r0, asr #31
   14058:	ldr	r9, [sp, #44]	; 0x2c
   1405c:	asr	r3, r2, #31
   14060:	bne	1413c <__assert_fail@plt+0x2c60>
   14064:	cmp	r3, r9
   14068:	bne	141dc <__assert_fail@plt+0x2d00>
   1406c:	ldrd	sl, [sp, #40]	; 0x28
   14070:	smull	r2, r3, r2, r0
   14074:	cmp	sl, #0
   14078:	sbcs	r1, fp, #0
   1407c:	blt	14260 <__assert_fail@plt+0x2d84>
   14080:	cmp	lr, #0
   14084:	bne	140a4 <__assert_fail@plt+0x2bc8>
   14088:	mov	r4, r2
   1408c:	mov	r5, r3
   14090:	orrs	r3, r4, r5
   14094:	beq	140cc <__assert_fail@plt+0x2bf0>
   14098:	orr	r8, r8, ip
   1409c:	cmp	r8, #2
   140a0:	beq	13ff0 <__assert_fail@plt+0x2b14>
   140a4:	mov	r3, #1
   140a8:	mvn	r4, #0
   140ac:	mvn	r5, #-2147483648	; 0x80000000
   140b0:	str	r3, [r6]
   140b4:	b	13ff0 <__assert_fail@plt+0x2b14>
   140b8:	orr	r8, r8, #1
   140bc:	mvn	r4, #0
   140c0:	mvn	r5, #-2147483648	; 0x80000000
   140c4:	str	r8, [r6]
   140c8:	b	13ff0 <__assert_fail@plt+0x2b14>
   140cc:	mov	r0, r7
   140d0:	movw	r1, #58972	; 0xe65c
   140d4:	movt	r1, #1
   140d8:	mov	r2, #2
   140dc:	bl	11494 <strncmp@plt>
   140e0:	subs	r6, r0, #0
   140e4:	bne	13ff0 <__assert_fail@plt+0x2b14>
   140e8:	mov	r2, #5
   140ec:	movw	r1, #58976	; 0xe660
   140f0:	movt	r1, #1
   140f4:	bl	11230 <dcgettext@plt>
   140f8:	mov	r7, r0
   140fc:	movw	r1, #58972	; 0xe65c
   14100:	movt	r1, #1
   14104:	mov	r0, r6
   14108:	bl	1b07c <__assert_fail@plt+0x9ba0>
   1410c:	mov	r8, r0
   14110:	movw	r1, #59040	; 0xe6a0
   14114:	movt	r1, #1
   14118:	mov	r0, #1
   1411c:	bl	1b07c <__assert_fail@plt+0x9ba0>
   14120:	mov	r3, r8
   14124:	mov	r2, r7
   14128:	str	r0, [sp]
   1412c:	mov	r1, r6
   14130:	mov	r0, r6
   14134:	bl	13a94 <__assert_fail@plt+0x25b8>
   14138:	b	13ff0 <__assert_fail@plt+0x2b14>
   1413c:	cmp	r3, r9
   14140:	bne	141f4 <__assert_fail@plt+0x2d18>
   14144:	ldrd	sl, [sp, #40]	; 0x28
   14148:	mov	r3, r2
   1414c:	str	r1, [sp, #8]
   14150:	strd	r4, [sp, #24]
   14154:	cmp	r1, #0
   14158:	umull	r0, r1, r2, r4
   1415c:	strd	r0, [sp, #16]
   14160:	ldr	r1, [sp, #8]
   14164:	umull	r0, r1, r3, r1
   14168:	strd	r0, [sp, #8]
   1416c:	bge	1418c <__assert_fail@plt+0x2cb0>
   14170:	ldr	r0, [sp, #8]
   14174:	mov	r1, #0
   14178:	subs	r1, r0, r1
   1417c:	ldr	r0, [sp, #12]
   14180:	str	r1, [sp, #8]
   14184:	sbc	r1, r0, r3
   14188:	str	r1, [sp, #12]
   1418c:	cmp	r3, #0
   14190:	bge	141b4 <__assert_fail@plt+0x2cd8>
   14194:	ldr	r1, [sp, #8]
   14198:	ldr	r3, [sp, #24]
   1419c:	subs	r3, r1, r3
   141a0:	ldr	r1, [sp, #12]
   141a4:	str	r3, [sp, #8]
   141a8:	ldr	r3, [sp, #28]
   141ac:	sbc	r3, r1, r3
   141b0:	str	r3, [sp, #12]
   141b4:	ldr	r1, [sp, #8]
   141b8:	ldr	r3, [sp, #20]
   141bc:	adds	r0, r1, r3
   141c0:	ldr	r3, [sp, #12]
   141c4:	adc	r3, r3, #0
   141c8:	cmp	r3, r0, asr #31
   141cc:	bne	14274 <__assert_fail@plt+0x2d98>
   141d0:	mov	r3, r0
   141d4:	ldr	r2, [sp, #16]
   141d8:	b	14074 <__assert_fail@plt+0x2b98>
   141dc:	ldrd	sl, [sp, #40]	; 0x28
   141e0:	mov	r3, r0
   141e4:	mov	r1, r9
   141e8:	str	r9, [sp, #8]
   141ec:	strd	sl, [sp, #24]
   141f0:	b	14154 <__assert_fail@plt+0x2c78>
   141f4:	mul	r3, r9, r0
   141f8:	add	fp, r1, #1
   141fc:	umull	r0, r1, r2, r0
   14200:	cmp	fp, #1
   14204:	mla	r2, r2, r5, r3
   14208:	add	r1, r2, r1
   1420c:	mov	r2, r0
   14210:	mov	r3, r1
   14214:	bhi	14258 <__assert_fail@plt+0x2d7c>
   14218:	add	r1, r9, #1
   1421c:	cmp	r1, #1
   14220:	bhi	14258 <__assert_fail@plt+0x2d7c>
   14224:	cmp	r5, r9
   14228:	bne	14244 <__assert_fail@plt+0x2d68>
   1422c:	cmp	r0, #1
   14230:	ldrd	sl, [sp, #40]	; 0x28
   14234:	sbcs	r1, r3, #0
   14238:	bge	14074 <__assert_fail@plt+0x2b98>
   1423c:	mov	lr, #1
   14240:	b	14074 <__assert_fail@plt+0x2b98>
   14244:	cmp	r0, #0
   14248:	ldrd	sl, [sp, #40]	; 0x28
   1424c:	sbcs	r1, r3, #0
   14250:	blt	14074 <__assert_fail@plt+0x2b98>
   14254:	b	1423c <__assert_fail@plt+0x2d60>
   14258:	ldrd	sl, [sp, #40]	; 0x28
   1425c:	b	1423c <__assert_fail@plt+0x2d60>
   14260:	orrs	r1, r4, r5
   14264:	mov	lr, #1
   14268:	bne	14290 <__assert_fail@plt+0x2db4>
   1426c:	mov	lr, #0
   14270:	b	14080 <__assert_fail@plt+0x2ba4>
   14274:	mul	r9, r9, r4
   14278:	umull	r0, r1, r2, r4
   1427c:	mla	r2, r2, r5, r9
   14280:	add	r1, r2, r1
   14284:	mov	r2, r0
   14288:	mov	r3, r1
   1428c:	b	1423c <__assert_fail@plt+0x2d60>
   14290:	mvn	r1, #0
   14294:	mvn	r0, #0
   14298:	cmp	r5, r1
   1429c:	cmpeq	r4, r0
   142a0:	bne	14080 <__assert_fail@plt+0x2ba4>
   142a4:	cmp	fp, r3
   142a8:	cmpeq	sl, r2
   142ac:	beq	1426c <__assert_fail@plt+0x2d90>
   142b0:	b	14080 <__assert_fail@plt+0x2ba4>
   142b4:	subs	r6, r0, #0
   142b8:	str	r7, [sp, #-8]!
   142bc:	str	lr, [sp, #4]
   142c0:	sub	sp, sp, #56	; 0x38
   142c4:	beq	1430c <__assert_fail@plt+0x2e30>
   142c8:	movw	r3, #4568	; 0x11d8
   142cc:	movt	r3, #3
   142d0:	ldr	r4, [r3]
   142d4:	mov	r2, #5
   142d8:	movw	r1, #59048	; 0xe6a8
   142dc:	movt	r1, #1
   142e0:	mov	r0, #0
   142e4:	bl	11230 <dcgettext@plt>
   142e8:	movw	r3, #5204	; 0x1454
   142ec:	movt	r3, #3
   142f0:	mov	r2, r0
   142f4:	mov	r1, #1
   142f8:	ldr	r3, [r3]
   142fc:	mov	r0, r4
   14300:	bl	11404 <__fprintf_chk@plt>
   14304:	mov	r0, r6
   14308:	bl	11374 <exit@plt>
   1430c:	mov	r2, #5
   14310:	movw	r1, #59088	; 0xe6d0
   14314:	movt	r1, #1
   14318:	movw	r7, #4572	; 0x11dc
   1431c:	movt	r7, #3
   14320:	bl	11230 <dcgettext@plt>
   14324:	movw	r3, #5204	; 0x1454
   14328:	movt	r3, #3
   1432c:	ldr	r3, [r3]
   14330:	mov	r1, r0
   14334:	mov	r0, #1
   14338:	mov	r2, r3
   1433c:	bl	113e0 <__printf_chk@plt>
   14340:	mov	r2, #5
   14344:	movw	r1, #59132	; 0xe6fc
   14348:	movt	r1, #1
   1434c:	mov	r0, r6
   14350:	bl	11230 <dcgettext@plt>
   14354:	ldr	r1, [r7]
   14358:	bl	11158 <fputs_unlocked@plt>
   1435c:	mov	r2, #5
   14360:	movw	r1, #59548	; 0xe89c
   14364:	movt	r1, #1
   14368:	mov	r0, r6
   1436c:	bl	11230 <dcgettext@plt>
   14370:	ldr	r1, [r7]
   14374:	bl	11158 <fputs_unlocked@plt>
   14378:	mov	r2, #5
   1437c:	movw	r1, #60220	; 0xeb3c
   14380:	movt	r1, #1
   14384:	mov	r0, r6
   14388:	bl	11230 <dcgettext@plt>
   1438c:	ldr	r1, [r7]
   14390:	bl	11158 <fputs_unlocked@plt>
   14394:	mov	r2, #5
   14398:	movw	r1, #60512	; 0xec60
   1439c:	movt	r1, #1
   143a0:	mov	r0, r6
   143a4:	bl	11230 <dcgettext@plt>
   143a8:	ldr	r1, [r7]
   143ac:	bl	11158 <fputs_unlocked@plt>
   143b0:	mov	r2, #5
   143b4:	movw	r1, #61088	; 0xeea0
   143b8:	movt	r1, #1
   143bc:	mov	r0, r6
   143c0:	bl	11230 <dcgettext@plt>
   143c4:	ldr	r1, [r7]
   143c8:	bl	11158 <fputs_unlocked@plt>
   143cc:	mov	r2, #5
   143d0:	movw	r1, #61376	; 0xefc0
   143d4:	movt	r1, #1
   143d8:	mov	r0, r6
   143dc:	bl	11230 <dcgettext@plt>
   143e0:	ldr	r1, [r7]
   143e4:	bl	11158 <fputs_unlocked@plt>
   143e8:	mov	r2, #5
   143ec:	movw	r1, #61484	; 0xf02c
   143f0:	movt	r1, #1
   143f4:	mov	r0, r6
   143f8:	bl	11230 <dcgettext@plt>
   143fc:	ldr	r1, [r7]
   14400:	bl	11158 <fputs_unlocked@plt>
   14404:	mov	r2, #5
   14408:	movw	r1, #61524	; 0xf054
   1440c:	movt	r1, #1
   14410:	mov	r0, r6
   14414:	bl	11230 <dcgettext@plt>
   14418:	ldr	r1, [r7]
   1441c:	bl	11158 <fputs_unlocked@plt>
   14420:	mov	r2, #5
   14424:	movw	r1, #61564	; 0xf07c
   14428:	movt	r1, #1
   1442c:	mov	r0, r6
   14430:	bl	11230 <dcgettext@plt>
   14434:	ldr	r1, [r7]
   14438:	bl	11158 <fputs_unlocked@plt>
   1443c:	mov	r2, #5
   14440:	movw	r1, #61608	; 0xf0a8
   14444:	movt	r1, #1
   14448:	mov	r0, r6
   1444c:	bl	11230 <dcgettext@plt>
   14450:	ldr	r1, [r7]
   14454:	bl	11158 <fputs_unlocked@plt>
   14458:	mov	r2, #5
   1445c:	movw	r1, #61656	; 0xf0d8
   14460:	movt	r1, #1
   14464:	mov	r0, r6
   14468:	bl	11230 <dcgettext@plt>
   1446c:	ldr	r1, [r7]
   14470:	bl	11158 <fputs_unlocked@plt>
   14474:	mov	r2, #5
   14478:	movw	r1, #61716	; 0xf114
   1447c:	movt	r1, #1
   14480:	mov	r0, r6
   14484:	bl	11230 <dcgettext@plt>
   14488:	ldr	r1, [r7]
   1448c:	bl	11158 <fputs_unlocked@plt>
   14490:	mov	r2, #5
   14494:	movw	r1, #61752	; 0xf138
   14498:	movt	r1, #1
   1449c:	mov	r0, r6
   144a0:	bl	11230 <dcgettext@plt>
   144a4:	ldr	r1, [r7]
   144a8:	bl	11158 <fputs_unlocked@plt>
   144ac:	mov	r2, #5
   144b0:	movw	r1, #61792	; 0xf160
   144b4:	movt	r1, #1
   144b8:	mov	r0, r6
   144bc:	bl	11230 <dcgettext@plt>
   144c0:	ldr	r1, [r7]
   144c4:	bl	11158 <fputs_unlocked@plt>
   144c8:	mov	r2, #5
   144cc:	movw	r1, #61852	; 0xf19c
   144d0:	movt	r1, #1
   144d4:	mov	r0, r6
   144d8:	bl	11230 <dcgettext@plt>
   144dc:	ldr	r1, [r7]
   144e0:	bl	11158 <fputs_unlocked@plt>
   144e4:	mov	r2, #5
   144e8:	movw	r1, #61912	; 0xf1d8
   144ec:	movt	r1, #1
   144f0:	mov	r0, r6
   144f4:	bl	11230 <dcgettext@plt>
   144f8:	ldr	r1, [r7]
   144fc:	bl	11158 <fputs_unlocked@plt>
   14500:	mov	r2, #5
   14504:	movw	r1, #61948	; 0xf1fc
   14508:	movt	r1, #1
   1450c:	mov	r0, r6
   14510:	bl	11230 <dcgettext@plt>
   14514:	ldr	r1, [r7]
   14518:	bl	11158 <fputs_unlocked@plt>
   1451c:	mov	r2, #5
   14520:	movw	r1, #62012	; 0xf23c
   14524:	movt	r1, #1
   14528:	mov	r0, r6
   1452c:	bl	11230 <dcgettext@plt>
   14530:	ldr	r1, [r7]
   14534:	bl	11158 <fputs_unlocked@plt>
   14538:	mov	r2, #5
   1453c:	movw	r1, #62072	; 0xf278
   14540:	movt	r1, #1
   14544:	mov	r0, r6
   14548:	bl	11230 <dcgettext@plt>
   1454c:	ldr	r1, [r7]
   14550:	bl	11158 <fputs_unlocked@plt>
   14554:	mov	r2, #5
   14558:	movw	r1, #62132	; 0xf2b4
   1455c:	movt	r1, #1
   14560:	mov	r0, r6
   14564:	bl	11230 <dcgettext@plt>
   14568:	mov	r1, r0
   1456c:	movw	r2, #62268	; 0xf33c
   14570:	movt	r2, #1
   14574:	mov	r0, #1
   14578:	bl	113e0 <__printf_chk@plt>
   1457c:	mov	r2, #5
   14580:	movw	r1, #62276	; 0xf344
   14584:	movt	r1, #1
   14588:	mov	r0, r6
   1458c:	bl	11230 <dcgettext@plt>
   14590:	ldr	r1, [r7]
   14594:	bl	11158 <fputs_unlocked@plt>
   14598:	mov	r2, #5
   1459c:	movw	r1, #62324	; 0xf374
   145a0:	movt	r1, #1
   145a4:	mov	r0, r6
   145a8:	bl	11230 <dcgettext@plt>
   145ac:	ldr	r1, [r7]
   145b0:	bl	11158 <fputs_unlocked@plt>
   145b4:	movw	lr, #57120	; 0xdf20
   145b8:	movt	lr, #1
   145bc:	ldr	ip, [lr]
   145c0:	ldr	r4, [lr, #4]
   145c4:	ldrd	r8, [lr, #8]
   145c8:	subs	r1, ip, #0
   145cc:	str	ip, [sp]
   145d0:	ldrd	r2, [lr, #16]
   145d4:	str	r4, [sp, #4]
   145d8:	ldrd	r4, [lr, #24]
   145dc:	strd	r8, [sp, #8]
   145e0:	ldrd	r8, [lr, #32]
   145e4:	strd	r2, [sp, #16]
   145e8:	ldrd	r2, [lr, #40]	; 0x28
   145ec:	strd	r4, [sp, #24]
   145f0:	ldrd	r4, [lr, #48]	; 0x30
   145f4:	strd	r8, [sp, #32]
   145f8:	strd	r2, [sp, #40]	; 0x28
   145fc:	strd	r4, [sp, #48]	; 0x30
   14600:	movwne	r5, #59044	; 0xe6a4
   14604:	mov	r4, sp
   14608:	movtne	r5, #1
   1460c:	bne	14704 <__assert_fail@plt+0x3228>
   14610:	ldr	r4, [r4, #4]
   14614:	movw	r1, #62380	; 0xf3ac
   14618:	movt	r1, #1
   1461c:	mov	r2, #5
   14620:	cmp	r4, #0
   14624:	beq	14718 <__assert_fail@plt+0x323c>
   14628:	mov	r0, #0
   1462c:	bl	11230 <dcgettext@plt>
   14630:	mov	r1, r0
   14634:	movw	r3, #62404	; 0xf3c4
   14638:	movt	r3, #1
   1463c:	movw	r2, #62444	; 0xf3ec
   14640:	movt	r2, #1
   14644:	mov	r0, #1
   14648:	bl	113e0 <__printf_chk@plt>
   1464c:	mov	r1, #0
   14650:	mov	r0, #5
   14654:	bl	11440 <setlocale@plt>
   14658:	cmp	r0, #0
   1465c:	movweq	r5, #59044	; 0xe6a4
   14660:	movteq	r5, #1
   14664:	beq	14688 <__assert_fail@plt+0x31ac>
   14668:	movw	r1, #62460	; 0xf3fc
   1466c:	movt	r1, #1
   14670:	mov	r2, #3
   14674:	movw	r5, #59044	; 0xe6a4
   14678:	movt	r5, #1
   1467c:	bl	11494 <strncmp@plt>
   14680:	cmp	r0, #0
   14684:	bne	147d0 <__assert_fail@plt+0x32f4>
   14688:	mov	r2, #5
   1468c:	movw	r1, #62536	; 0xf448
   14690:	movt	r1, #1
   14694:	mov	r0, #0
   14698:	bl	11230 <dcgettext@plt>
   1469c:	mov	r1, r0
   146a0:	movw	r3, #59044	; 0xe6a4
   146a4:	movt	r3, #1
   146a8:	movw	r2, #62404	; 0xf3c4
   146ac:	movt	r2, #1
   146b0:	mov	r0, #1
   146b4:	bl	113e0 <__printf_chk@plt>
   146b8:	mov	r2, #5
   146bc:	movw	r1, #62564	; 0xf464
   146c0:	movt	r1, #1
   146c4:	mov	r0, #0
   146c8:	bl	11230 <dcgettext@plt>
   146cc:	movw	r2, #63888	; 0xf990
   146d0:	movt	r2, #1
   146d4:	cmp	r4, r5
   146d8:	movw	r3, #62008	; 0xf238
   146dc:	movt	r3, #1
   146e0:	mov	r1, r0
   146e4:	moveq	r3, r2
   146e8:	mov	r2, r4
   146ec:	mov	r0, #1
   146f0:	bl	113e0 <__printf_chk@plt>
   146f4:	b	14304 <__assert_fail@plt+0x2e28>
   146f8:	ldr	r1, [r4, #8]!
   146fc:	cmp	r1, #0
   14700:	beq	14610 <__assert_fail@plt+0x3134>
   14704:	mov	r0, r5
   14708:	bl	1117c <strcmp@plt>
   1470c:	cmp	r0, #0
   14710:	bne	146f8 <__assert_fail@plt+0x321c>
   14714:	b	14610 <__assert_fail@plt+0x3134>
   14718:	mov	r0, r4
   1471c:	bl	11230 <dcgettext@plt>
   14720:	mov	r1, r0
   14724:	movw	r3, #62404	; 0xf3c4
   14728:	movt	r3, #1
   1472c:	movw	r2, #62444	; 0xf3ec
   14730:	movt	r2, #1
   14734:	mov	r0, #1
   14738:	bl	113e0 <__printf_chk@plt>
   1473c:	mov	r1, r4
   14740:	mov	r0, #5
   14744:	bl	11440 <setlocale@plt>
   14748:	cmp	r0, #0
   1474c:	beq	14768 <__assert_fail@plt+0x328c>
   14750:	movw	r1, #62460	; 0xf3fc
   14754:	movt	r1, #1
   14758:	mov	r2, #3
   1475c:	bl	11494 <strncmp@plt>
   14760:	cmp	r0, #0
   14764:	bne	147c4 <__assert_fail@plt+0x32e8>
   14768:	mov	r2, #5
   1476c:	movw	r1, #62536	; 0xf448
   14770:	movt	r1, #1
   14774:	mov	r0, #0
   14778:	bl	11230 <dcgettext@plt>
   1477c:	mov	r1, r0
   14780:	movw	r3, #59044	; 0xe6a4
   14784:	movt	r3, #1
   14788:	movw	r2, #62404	; 0xf3c4
   1478c:	movt	r2, #1
   14790:	mov	r0, #1
   14794:	bl	113e0 <__printf_chk@plt>
   14798:	movw	r1, #62564	; 0xf464
   1479c:	movt	r1, #1
   147a0:	mov	r2, #5
   147a4:	mov	r0, #0
   147a8:	bl	11230 <dcgettext@plt>
   147ac:	movw	r4, #59044	; 0xe6a4
   147b0:	movt	r4, #1
   147b4:	movw	r3, #63888	; 0xf990
   147b8:	movt	r3, #1
   147bc:	mov	r1, r0
   147c0:	b	146e8 <__assert_fail@plt+0x320c>
   147c4:	movw	r5, #59044	; 0xe6a4
   147c8:	movt	r5, #1
   147cc:	mov	r4, r5
   147d0:	mov	r2, #5
   147d4:	movw	r1, #62464	; 0xf400
   147d8:	movt	r1, #1
   147dc:	mov	r0, #0
   147e0:	bl	11230 <dcgettext@plt>
   147e4:	ldr	r1, [r7]
   147e8:	bl	11158 <fputs_unlocked@plt>
   147ec:	b	14688 <__assert_fail@plt+0x31ac>
   147f0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   147f4:	mov	r4, r0
   147f8:	mov	r5, #0
   147fc:	strd	r6, [sp, #8]
   14800:	mov	r7, r2
   14804:	sub	r6, r1, #1
   14808:	strd	r8, [sp, #16]
   1480c:	mov	r8, r3
   14810:	str	lr, [sp, #24]
   14814:	sub	sp, sp, #12
   14818:	mov	r1, #44	; 0x2c
   1481c:	mov	r0, r4
   14820:	bl	1138c <strchr@plt>
   14824:	sub	r9, r4, #1
   14828:	mov	lr, r6
   1482c:	mov	r1, r9
   14830:	mov	r2, lr
   14834:	b	14840 <__assert_fail@plt+0x3364>
   14838:	cmp	r3, ip
   1483c:	bne	14868 <__assert_fail@plt+0x338c>
   14840:	ldrb	r3, [r2, #1]!
   14844:	ldrb	ip, [r1, #1]!
   14848:	cmp	r3, #0
   1484c:	bne	14838 <__assert_fail@plt+0x335c>
   14850:	cmp	ip, #0
   14854:	cmpne	ip, #44	; 0x2c
   14858:	bne	14868 <__assert_fail@plt+0x338c>
   1485c:	ldr	r3, [lr, #13]
   14860:	cmp	r3, #0
   14864:	bne	148d0 <__assert_fail@plt+0x33f4>
   14868:	add	lr, lr, #16
   1486c:	ldrb	r3, [lr, #-15]
   14870:	cmp	r3, #0
   14874:	bne	1482c <__assert_fail@plt+0x3350>
   14878:	cmp	r0, #0
   1487c:	subne	r5, r0, r4
   14880:	beq	14908 <__assert_fail@plt+0x342c>
   14884:	mov	r1, r8
   14888:	mov	r2, #5
   1488c:	mov	r0, #0
   14890:	bl	11230 <dcgettext@plt>
   14894:	mov	r6, r0
   14898:	mov	r3, r5
   1489c:	mov	r2, r4
   148a0:	mov	r1, #8
   148a4:	mov	r0, #0
   148a8:	bl	19cf0 <__assert_fail@plt+0x8814>
   148ac:	mov	r1, #0
   148b0:	mov	r3, r6
   148b4:	str	r0, [sp]
   148b8:	movw	r2, #62616	; 0xf498
   148bc:	movt	r2, #1
   148c0:	mov	r0, r1
   148c4:	bl	13a94 <__assert_fail@plt+0x25b8>
   148c8:	mov	r0, #1
   148cc:	bl	142b4 <__assert_fail@plt+0x2dd8>
   148d0:	cmp	r7, #0
   148d4:	orreq	r3, r3, r5
   148d8:	cmp	r0, #0
   148dc:	beq	148ec <__assert_fail@plt+0x3410>
   148e0:	add	r4, r0, #1
   148e4:	mov	r5, r3
   148e8:	b	14818 <__assert_fail@plt+0x333c>
   148ec:	mov	r0, r3
   148f0:	add	sp, sp, #12
   148f4:	ldrd	r4, [sp]
   148f8:	ldrd	r6, [sp, #8]
   148fc:	ldrd	r8, [sp, #16]
   14900:	add	sp, sp, #24
   14904:	pop	{pc}		; (ldr pc, [sp], #4)
   14908:	mov	r0, r4
   1490c:	bl	11380 <strlen@plt>
   14910:	mov	r5, r0
   14914:	b	14884 <__assert_fail@plt+0x33a8>
   14918:	strd	r4, [sp, #-20]!	; 0xffffffec
   1491c:	movw	r4, #4584	; 0x11e8
   14920:	movt	r4, #3
   14924:	ldr	r5, [r4, #116]	; 0x74
   14928:	strd	r6, [sp, #8]
   1492c:	str	lr, [sp, #16]
   14930:	sub	sp, sp, #132	; 0x84
   14934:	bic	r3, r5, #49152	; 0xc000
   14938:	tst	r5, #16384	; 0x4000
   1493c:	addne	r7, r4, #128	; 0x80
   14940:	str	r3, [r4, #116]	; 0x74
   14944:	bne	14978 <__assert_fail@plt+0x349c>
   14948:	ands	r5, r5, #32768	; 0x8000
   1494c:	bne	14a40 <__assert_fail@plt+0x3564>
   14950:	mov	r0, r5
   14954:	add	sp, sp, #132	; 0x84
   14958:	ldrd	r4, [sp]
   1495c:	ldrd	r6, [sp, #8]
   14960:	add	sp, sp, #16
   14964:	pop	{pc}		; (ldr pc, [sp], #4)
   14968:	bl	14b3c <__assert_fail@plt+0x3660>
   1496c:	bl	138e8 <__assert_fail@plt+0x240c>
   14970:	mov	r0, r6
   14974:	bl	11164 <raise@plt>
   14978:	ldr	r3, [r4]
   1497c:	mov	r0, #0
   14980:	mov	r2, sp
   14984:	mov	r1, r7
   14988:	cmp	r3, r0
   1498c:	bne	1499c <__assert_fail@plt+0x34c0>
   14990:	ldr	r3, [r4, #4]
   14994:	cmp	r3, r0
   14998:	beq	149d4 <__assert_fail@plt+0x34f8>
   1499c:	bl	111ac <sigprocmask@plt>
   149a0:	ldr	r6, [r4]
   149a4:	mov	r2, #0
   149a8:	mov	r1, sp
   149ac:	mov	r0, #2
   149b0:	ldr	r3, [r4, #4]
   149b4:	cmp	r3, r2
   149b8:	sub	ip, r3, #1
   149bc:	strne	ip, [r4, #4]
   149c0:	bl	111ac <sigprocmask@plt>
   149c4:	cmp	r6, #0
   149c8:	bne	14968 <__assert_fail@plt+0x348c>
   149cc:	bl	138e8 <__assert_fail@plt+0x240c>
   149d0:	b	14978 <__assert_fail@plt+0x349c>
   149d4:	mov	r0, #1
   149d8:	bl	114a0 <fdatasync@plt>
   149dc:	cmp	r0, #0
   149e0:	bge	14b28 <__assert_fail@plt+0x364c>
   149e4:	bl	113a4 <__errno_location@plt>
   149e8:	ldr	r6, [r0]
   149ec:	cmp	r6, #4
   149f0:	beq	14978 <__assert_fail@plt+0x349c>
   149f4:	sub	r3, r6, #22
   149f8:	bics	r3, r3, #16
   149fc:	beq	14a40 <__assert_fail@plt+0x3564>
   14a00:	mov	r2, #5
   14a04:	movw	r1, #62624	; 0xf4a0
   14a08:	movt	r1, #1
   14a0c:	mov	r0, #0
   14a10:	bl	11230 <dcgettext@plt>
   14a14:	mov	r5, r0
   14a18:	mov	r0, #4
   14a1c:	ldr	r1, [r4, #256]	; 0x100
   14a20:	bl	19d60 <__assert_fail@plt+0x8884>
   14a24:	mov	r3, r0
   14a28:	mov	r2, r5
   14a2c:	mov	r1, r6
   14a30:	mov	r0, #0
   14a34:	bl	13a94 <__assert_fail@plt+0x25b8>
   14a38:	mov	r5, #1
   14a3c:	b	14a44 <__assert_fail@plt+0x3568>
   14a40:	mov	r5, #0
   14a44:	ldr	r7, [pc, #236]	; 14b38 <__assert_fail@plt+0x365c>
   14a48:	mov	r0, #0
   14a4c:	mov	r2, sp
   14a50:	ldr	r3, [r4]
   14a54:	mov	r1, r7
   14a58:	cmp	r3, r0
   14a5c:	bne	14a6c <__assert_fail@plt+0x3590>
   14a60:	ldr	r3, [r4, #4]
   14a64:	cmp	r3, r0
   14a68:	beq	14aa4 <__assert_fail@plt+0x35c8>
   14a6c:	bl	111ac <sigprocmask@plt>
   14a70:	ldr	r6, [r4]
   14a74:	mov	r2, #0
   14a78:	mov	r1, sp
   14a7c:	mov	r0, #2
   14a80:	ldr	r3, [r4, #4]
   14a84:	cmp	r3, r2
   14a88:	sub	ip, r3, #1
   14a8c:	strne	ip, [r4, #4]
   14a90:	bl	111ac <sigprocmask@plt>
   14a94:	cmp	r6, #0
   14a98:	bne	14b04 <__assert_fail@plt+0x3628>
   14a9c:	bl	138e8 <__assert_fail@plt+0x240c>
   14aa0:	b	14a48 <__assert_fail@plt+0x356c>
   14aa4:	mov	r0, #1
   14aa8:	bl	11170 <fsync@plt>
   14aac:	cmp	r0, #0
   14ab0:	bge	14b18 <__assert_fail@plt+0x363c>
   14ab4:	bl	113a4 <__errno_location@plt>
   14ab8:	ldr	r6, [r0]
   14abc:	cmp	r6, #4
   14ac0:	beq	14a48 <__assert_fail@plt+0x356c>
   14ac4:	mov	r2, #5
   14ac8:	movw	r1, #62648	; 0xf4b8
   14acc:	movt	r1, #1
   14ad0:	mov	r0, #0
   14ad4:	bl	11230 <dcgettext@plt>
   14ad8:	mov	r5, r0
   14adc:	mov	r0, #4
   14ae0:	ldr	r1, [r4, #256]	; 0x100
   14ae4:	bl	19d60 <__assert_fail@plt+0x8884>
   14ae8:	mov	r3, r0
   14aec:	mov	r2, r5
   14af0:	mov	r1, r6
   14af4:	mov	r0, #0
   14af8:	bl	13a94 <__assert_fail@plt+0x25b8>
   14afc:	mov	r5, #1
   14b00:	b	14950 <__assert_fail@plt+0x3474>
   14b04:	bl	14b3c <__assert_fail@plt+0x3660>
   14b08:	bl	138e8 <__assert_fail@plt+0x240c>
   14b0c:	mov	r0, r6
   14b10:	bl	11164 <raise@plt>
   14b14:	b	14a48 <__assert_fail@plt+0x356c>
   14b18:	beq	14950 <__assert_fail@plt+0x3474>
   14b1c:	bl	113a4 <__errno_location@plt>
   14b20:	ldr	r6, [r0]
   14b24:	b	14ac4 <__assert_fail@plt+0x35e8>
   14b28:	beq	14948 <__assert_fail@plt+0x346c>
   14b2c:	bl	113a4 <__errno_location@plt>
   14b30:	ldr	r6, [r0]
   14b34:	b	149f4 <__assert_fail@plt+0x3518>
   14b38:	andeq	r1, r3, r8, ror #4
   14b3c:	strd	r4, [sp, #-16]!
   14b40:	movw	r4, #4584	; 0x11e8
   14b44:	movt	r4, #3
   14b48:	ldr	r3, [r4]
   14b4c:	str	r6, [sp, #8]
   14b50:	str	lr, [sp, #12]
   14b54:	cmp	r3, #0
   14b58:	bne	14b68 <__assert_fail@plt+0x368c>
   14b5c:	bl	14918 <__assert_fail@plt+0x343c>
   14b60:	cmp	r0, #0
   14b64:	bne	14c10 <__assert_fail@plt+0x3734>
   14b68:	mov	r0, #0
   14b6c:	bl	114b8 <close@plt>
   14b70:	cmp	r0, #0
   14b74:	beq	14bb4 <__assert_fail@plt+0x36d8>
   14b78:	bl	113a4 <__errno_location@plt>
   14b7c:	ldr	r5, [r0]
   14b80:	mov	r6, r0
   14b84:	cmp	r5, #4
   14b88:	beq	14ba4 <__assert_fail@plt+0x36c8>
   14b8c:	b	14c14 <__assert_fail@plt+0x3738>
   14b90:	ldr	r5, [r6]
   14b94:	cmp	r5, #9
   14b98:	beq	14bb4 <__assert_fail@plt+0x36d8>
   14b9c:	cmp	r5, #4
   14ba0:	bne	14c14 <__assert_fail@plt+0x3738>
   14ba4:	mov	r0, #0
   14ba8:	bl	114b8 <close@plt>
   14bac:	cmp	r0, #0
   14bb0:	bne	14b90 <__assert_fail@plt+0x36b4>
   14bb4:	mov	r0, #1
   14bb8:	bl	114b8 <close@plt>
   14bbc:	cmp	r0, #0
   14bc0:	beq	14c00 <__assert_fail@plt+0x3724>
   14bc4:	bl	113a4 <__errno_location@plt>
   14bc8:	ldr	r5, [r0]
   14bcc:	mov	r6, r0
   14bd0:	cmp	r5, #4
   14bd4:	beq	14bf0 <__assert_fail@plt+0x3714>
   14bd8:	b	14c4c <__assert_fail@plt+0x3770>
   14bdc:	ldr	r5, [r6]
   14be0:	cmp	r5, #9
   14be4:	beq	14c00 <__assert_fail@plt+0x3724>
   14be8:	cmp	r5, #4
   14bec:	bne	14c4c <__assert_fail@plt+0x3770>
   14bf0:	mov	r0, #1
   14bf4:	bl	114b8 <close@plt>
   14bf8:	cmp	r0, #0
   14bfc:	bne	14bdc <__assert_fail@plt+0x3700>
   14c00:	ldrd	r4, [sp]
   14c04:	ldr	r6, [sp, #8]
   14c08:	add	sp, sp, #12
   14c0c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c10:	bl	11374 <exit@plt>
   14c14:	movw	r1, #62692	; 0xf4e4
   14c18:	movt	r1, #1
   14c1c:	mov	r2, #5
   14c20:	mov	r0, #0
   14c24:	bl	11230 <dcgettext@plt>
   14c28:	ldr	r1, [r4, #260]	; 0x104
   14c2c:	mov	r6, r0
   14c30:	mov	r0, #4
   14c34:	bl	19d60 <__assert_fail@plt+0x8884>
   14c38:	mov	r3, r0
   14c3c:	mov	r2, r6
   14c40:	mov	r1, r5
   14c44:	mov	r0, #1
   14c48:	bl	13a94 <__assert_fail@plt+0x25b8>
   14c4c:	movw	r1, #62668	; 0xf4cc
   14c50:	movt	r1, #1
   14c54:	mov	r2, #5
   14c58:	mov	r0, #0
   14c5c:	bl	11230 <dcgettext@plt>
   14c60:	mov	r6, r0
   14c64:	mov	r0, #4
   14c68:	ldr	r1, [r4, #256]	; 0x100
   14c6c:	b	14c34 <__assert_fail@plt+0x3758>
   14c70:	strd	r4, [sp, #-16]!
   14c74:	movw	r4, #4584	; 0x11e8
   14c78:	movt	r4, #3
   14c7c:	str	r6, [sp, #8]
   14c80:	add	r6, r4, #128	; 0x80
   14c84:	str	lr, [sp, #12]
   14c88:	sub	sp, sp, #128	; 0x80
   14c8c:	ldr	r3, [r4]
   14c90:	mov	r0, #0
   14c94:	mov	r2, sp
   14c98:	mov	r1, r6
   14c9c:	cmp	r3, r0
   14ca0:	bne	14cb0 <__assert_fail@plt+0x37d4>
   14ca4:	ldr	r3, [r4, #4]
   14ca8:	cmp	r3, r0
   14cac:	beq	14cfc <__assert_fail@plt+0x3820>
   14cb0:	bl	111ac <sigprocmask@plt>
   14cb4:	ldr	r5, [r4]
   14cb8:	mov	r2, #0
   14cbc:	mov	r1, sp
   14cc0:	mov	r0, #2
   14cc4:	ldr	r3, [r4, #4]
   14cc8:	cmp	r3, r2
   14ccc:	sub	ip, r3, #1
   14cd0:	strne	ip, [r4, #4]
   14cd4:	bl	111ac <sigprocmask@plt>
   14cd8:	cmp	r5, #0
   14cdc:	bne	14ce8 <__assert_fail@plt+0x380c>
   14ce0:	bl	138e8 <__assert_fail@plt+0x240c>
   14ce4:	b	14c8c <__assert_fail@plt+0x37b0>
   14ce8:	bl	14b3c <__assert_fail@plt+0x3660>
   14cec:	bl	138e8 <__assert_fail@plt+0x240c>
   14cf0:	mov	r0, r5
   14cf4:	bl	11164 <raise@plt>
   14cf8:	b	14c8c <__assert_fail@plt+0x37b0>
   14cfc:	add	sp, sp, #128	; 0x80
   14d00:	ldrd	r4, [sp]
   14d04:	ldr	r6, [sp, #8]
   14d08:	add	sp, sp, #12
   14d0c:	pop	{pc}		; (ldr pc, [sp], #4)
   14d10:	str	r4, [sp, #-8]!
   14d14:	str	lr, [sp, #4]
   14d18:	bl	14c70 <__assert_fail@plt+0x3794>
   14d1c:	bl	14b3c <__assert_fail@plt+0x3660>
   14d20:	bl	138e8 <__assert_fail@plt+0x240c>
   14d24:	mov	r0, #1
   14d28:	bl	11374 <exit@plt>
   14d2c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14d30:	movw	r4, #4584	; 0x11e8
   14d34:	movt	r4, #3
   14d38:	strd	r6, [sp, #8]
   14d3c:	mov	r7, r1
   14d40:	add	r6, r4, #128	; 0x80
   14d44:	str	r8, [sp, #16]
   14d48:	mov	r8, r0
   14d4c:	str	lr, [sp, #20]
   14d50:	sub	sp, sp, #128	; 0x80
   14d54:	ldr	r3, [r4]
   14d58:	mov	r0, #0
   14d5c:	mov	r2, sp
   14d60:	mov	r1, r6
   14d64:	cmp	r3, r0
   14d68:	bne	14d78 <__assert_fail@plt+0x389c>
   14d6c:	ldr	r3, [r4, #4]
   14d70:	cmp	r3, r0
   14d74:	beq	14db0 <__assert_fail@plt+0x38d4>
   14d78:	bl	111ac <sigprocmask@plt>
   14d7c:	ldr	r5, [r4]
   14d80:	mov	r2, #0
   14d84:	mov	r1, sp
   14d88:	mov	r0, #2
   14d8c:	ldr	r3, [r4, #4]
   14d90:	cmp	r3, r2
   14d94:	sub	ip, r3, #1
   14d98:	strne	ip, [r4, #4]
   14d9c:	bl	111ac <sigprocmask@plt>
   14da0:	cmp	r5, #0
   14da4:	bne	14df4 <__assert_fail@plt+0x3918>
   14da8:	bl	138e8 <__assert_fail@plt+0x240c>
   14dac:	b	14d54 <__assert_fail@plt+0x3878>
   14db0:	mov	r2, r7
   14db4:	mov	r1, r8
   14db8:	mov	r0, #3
   14dbc:	bl	11278 <__fxstat64@plt>
   14dc0:	subs	r5, r0, #0
   14dc4:	bge	14dd8 <__assert_fail@plt+0x38fc>
   14dc8:	bl	113a4 <__errno_location@plt>
   14dcc:	ldr	r3, [r0]
   14dd0:	cmp	r3, #4
   14dd4:	beq	14d54 <__assert_fail@plt+0x3878>
   14dd8:	mov	r0, r5
   14ddc:	add	sp, sp, #128	; 0x80
   14de0:	ldrd	r4, [sp]
   14de4:	ldrd	r6, [sp, #8]
   14de8:	ldr	r8, [sp, #16]
   14dec:	add	sp, sp, #20
   14df0:	pop	{pc}		; (ldr pc, [sp], #4)
   14df4:	bl	14b3c <__assert_fail@plt+0x3660>
   14df8:	bl	138e8 <__assert_fail@plt+0x240c>
   14dfc:	mov	r0, r5
   14e00:	bl	11164 <raise@plt>
   14e04:	b	14d54 <__assert_fail@plt+0x3878>
   14e08:	strd	r4, [sp, #-20]!	; 0xffffffec
   14e0c:	bics	r4, r1, #33024	; 0x8100
   14e10:	strd	r6, [sp, #8]
   14e14:	str	lr, [sp, #16]
   14e18:	sub	sp, sp, #108	; 0x6c
   14e1c:	bne	14e34 <__assert_fail@plt+0x3958>
   14e20:	add	sp, sp, #108	; 0x6c
   14e24:	ldrd	r4, [sp]
   14e28:	ldrd	r6, [sp, #8]
   14e2c:	add	sp, sp, #16
   14e30:	pop	{pc}		; (ldr pc, [sp], #4)
   14e34:	mov	r1, #3
   14e38:	mov	r5, r0
   14e3c:	mov	r7, r2
   14e40:	bl	1605c <__assert_fail@plt+0x4b80>
   14e44:	cmp	r0, #0
   14e48:	mov	r6, r0
   14e4c:	orr	r4, r4, r0
   14e50:	blt	14eb0 <__assert_fail@plt+0x39d4>
   14e54:	cmp	r0, r4
   14e58:	beq	14e20 <__assert_fail@plt+0x3944>
   14e5c:	tst	r4, #16384	; 0x4000
   14e60:	bne	14e80 <__assert_fail@plt+0x39a4>
   14e64:	mov	r2, r4
   14e68:	mov	r0, r5
   14e6c:	mov	r1, #4
   14e70:	bl	1605c <__assert_fail@plt+0x4b80>
   14e74:	cmn	r0, #1
   14e78:	bne	14e20 <__assert_fail@plt+0x3944>
   14e7c:	b	14eb0 <__assert_fail@plt+0x39d4>
   14e80:	mov	r1, sp
   14e84:	mov	r0, r5
   14e88:	bl	14d2c <__assert_fail@plt+0x3850>
   14e8c:	cmp	r0, #0
   14e90:	bne	14eb0 <__assert_fail@plt+0x39d4>
   14e94:	ldr	r3, [sp, #16]
   14e98:	and	r3, r3, #61440	; 0xf000
   14e9c:	cmp	r3, #16384	; 0x4000
   14ea0:	beq	14ef0 <__assert_fail@plt+0x3a14>
   14ea4:	bl	113a4 <__errno_location@plt>
   14ea8:	mov	r3, #20
   14eac:	str	r3, [r0]
   14eb0:	bl	113a4 <__errno_location@plt>
   14eb4:	ldr	r4, [r0]
   14eb8:	mov	r2, #5
   14ebc:	movw	r1, #62716	; 0xf4fc
   14ec0:	movt	r1, #1
   14ec4:	mov	r0, #0
   14ec8:	bl	11230 <dcgettext@plt>
   14ecc:	mov	r5, r0
   14ed0:	mov	r1, r7
   14ed4:	mov	r0, #4
   14ed8:	bl	19d60 <__assert_fail@plt+0x8884>
   14edc:	mov	r3, r0
   14ee0:	mov	r2, r5
   14ee4:	mov	r1, r4
   14ee8:	mov	r0, #1
   14eec:	bl	13a94 <__assert_fail@plt+0x25b8>
   14ef0:	bic	r4, r4, #16384	; 0x4000
   14ef4:	cmp	r4, r6
   14ef8:	beq	14e20 <__assert_fail@plt+0x3944>
   14efc:	b	14e64 <__assert_fail@plt+0x3988>
   14f00:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14f04:	mov	r4, r0
   14f08:	strd	r6, [sp, #8]
   14f0c:	strd	r8, [sp, #16]
   14f10:	strd	sl, [sp, #24]
   14f14:	mov	sl, r2
   14f18:	mov	fp, r3
   14f1c:	str	lr, [sp, #32]
   14f20:	sub	sp, sp, #140	; 0x8c
   14f24:	ldr	r9, [sp, #176]	; 0xb0
   14f28:	str	r1, [sp, #12]
   14f2c:	bl	113a4 <__errno_location@plt>
   14f30:	mov	r3, #0
   14f34:	cmp	fp, sl, asr #31
   14f38:	str	r0, [sp, #8]
   14f3c:	mov	ip, r3
   14f40:	ldr	r8, [sp, #180]	; 0xb4
   14f44:	str	r3, [r0]
   14f48:	asr	r3, r9, #31
   14f4c:	mov	r2, r9
   14f50:	strd	r2, [sp, #16]
   14f54:	bne	151a8 <__assert_fail@plt+0x3ccc>
   14f58:	smull	r2, r3, sl, r9
   14f5c:	mov	r6, r2
   14f60:	mov	r1, r3
   14f64:	cmp	ip, #0
   14f68:	mov	r3, r1
   14f6c:	bne	14f84 <__assert_fail@plt+0x3aa8>
   14f70:	ldr	r0, [r8]
   14f74:	asr	r1, r0, #31
   14f78:	adds	r6, r6, r0
   14f7c:	adcs	r7, r3, r1
   14f80:	bvc	150b0 <__assert_fail@plt+0x3bd4>
   14f84:	mov	r1, #2
   14f88:	mov	r3, #0
   14f8c:	mov	r2, #0
   14f90:	mov	r0, r4
   14f94:	str	r1, [sp]
   14f98:	bl	112a8 <lseek64@plt>
   14f9c:	cmp	r0, #0
   14fa0:	sbcs	r3, r1, #0
   14fa4:	bge	15230 <__assert_fail@plt+0x3d54>
   14fa8:	mov	r5, #0
   14fac:	cmp	r4, #0
   14fb0:	movw	r4, #4584	; 0x11e8
   14fb4:	movt	r4, #3
   14fb8:	bne	1504c <__assert_fail@plt+0x3b70>
   14fbc:	bl	13e6c <__assert_fail@plt+0x2990>
   14fc0:	ldr	r5, [r4, #112]	; 0x70
   14fc4:	orrs	r3, sl, fp
   14fc8:	movne	r2, r9
   14fcc:	ldr	r3, [r4, #264]	; 0x108
   14fd0:	beq	15194 <__assert_fail@plt+0x3cb8>
   14fd4:	mov	r1, r5
   14fd8:	mov	r0, #0
   14fdc:	blx	r3
   14fe0:	cmp	r0, #0
   14fe4:	blt	152f4 <__assert_fail@plt+0x3e18>
   14fe8:	beq	1519c <__assert_fail@plt+0x3cc0>
   14fec:	ldrd	r2, [r4, #96]	; 0x60
   14ff0:	cmp	r2, #0
   14ff4:	sbcs	r1, r3, #0
   14ff8:	blt	15018 <__assert_fail@plt+0x3b3c>
   14ffc:	asr	r1, r0, #31
   15000:	adds	r6, r2, r0
   15004:	adcs	r7, r3, r1
   15008:	mvnvs	r2, #0
   1500c:	mvnvs	r3, #0
   15010:	strdvc	r6, [r4, #96]	; 0x60
   15014:	strdvs	r2, [r4, #96]	; 0x60
   15018:	orrs	r3, sl, fp
   1501c:	beq	15160 <__assert_fail@plt+0x3c84>
   15020:	subs	sl, sl, #1
   15024:	sbc	fp, fp, #0
   15028:	orrs	r3, sl, fp
   1502c:	bne	14fc4 <__assert_fail@plt+0x3ae8>
   15030:	ldr	r2, [r8]
   15034:	cmp	r2, #0
   15038:	beq	152a8 <__assert_fail@plt+0x3dcc>
   1503c:	ldr	r3, [r4, #264]	; 0x108
   15040:	mov	sl, #0
   15044:	mov	fp, #0
   15048:	b	14fd4 <__assert_fail@plt+0x3af8>
   1504c:	bl	13f20 <__assert_fail@plt+0x2a44>
   15050:	ldr	r6, [r4, #124]	; 0x7c
   15054:	orrs	r3, sl, fp
   15058:	movne	r2, r9
   1505c:	ldr	r3, [r4, #264]	; 0x108
   15060:	beq	1518c <__assert_fail@plt+0x3cb0>
   15064:	mov	r1, r6
   15068:	mov	r0, #1
   1506c:	blx	r3
   15070:	cmp	r0, #0
   15074:	blt	152b4 <__assert_fail@plt+0x3dd8>
   15078:	beq	1519c <__assert_fail@plt+0x3cc0>
   1507c:	orrs	r3, sl, fp
   15080:	beq	15160 <__assert_fail@plt+0x3c84>
   15084:	subs	sl, sl, #1
   15088:	sbc	fp, fp, #0
   1508c:	orrs	r3, sl, fp
   15090:	bne	15054 <__assert_fail@plt+0x3b78>
   15094:	ldr	r2, [r8]
   15098:	cmp	r2, #0
   1509c:	beq	152a8 <__assert_fail@plt+0x3dcc>
   150a0:	ldr	r3, [r4, #264]	; 0x108
   150a4:	mov	sl, #0
   150a8:	mov	fp, #0
   150ac:	b	15064 <__assert_fail@plt+0x3b88>
   150b0:	mov	r5, #1
   150b4:	mov	r3, r7
   150b8:	mov	r2, r6
   150bc:	mov	r0, r4
   150c0:	str	r5, [sp]
   150c4:	bl	112a8 <lseek64@plt>
   150c8:	cmp	r0, #0
   150cc:	sbcs	r3, r1, #0
   150d0:	blt	151fc <__assert_fail@plt+0x3d20>
   150d4:	cmp	r4, #0
   150d8:	bne	15160 <__assert_fail@plt+0x3c84>
   150dc:	add	r1, sp, #32
   150e0:	mov	r0, r4
   150e4:	bl	14d2c <__assert_fail@plt+0x3850>
   150e8:	cmp	r0, #0
   150ec:	bne	15360 <__assert_fail@plt+0x3e84>
   150f0:	ldr	r3, [sp, #48]	; 0x30
   150f4:	movw	r4, #4584	; 0x11e8
   150f8:	movt	r4, #3
   150fc:	ldrd	r8, [r4, #96]	; 0x60
   15100:	and	r3, r3, #53248	; 0xd000
   15104:	cmp	r3, #32768	; 0x8000
   15108:	bne	1527c <__assert_fail@plt+0x3da0>
   1510c:	cmp	r8, #0
   15110:	sbcs	r3, r9, #0
   15114:	blt	152a8 <__assert_fail@plt+0x3dcc>
   15118:	ldrd	r0, [sp, #80]	; 0x50
   1511c:	subs	r3, r0, r8
   15120:	str	r3, [sp, #24]
   15124:	sbc	r3, r1, r9
   15128:	str	r3, [sp, #28]
   1512c:	ldrd	sl, [sp, #24]
   15130:	cmp	sl, r6
   15134:	sbcs	r3, fp, r7
   15138:	movge	r0, #0
   1513c:	movge	r1, r0
   15140:	bge	15290 <__assert_fail@plt+0x3db4>
   15144:	subs	r0, r6, r0
   15148:	ldrd	r2, [sp, #16]
   1514c:	mov	r6, sl
   15150:	sbc	r1, r7, r1
   15154:	mov	r7, fp
   15158:	bl	1dc0c <__assert_fail@plt+0xc730>
   1515c:	b	15290 <__assert_fail@plt+0x3db4>
   15160:	mov	r3, #0
   15164:	mov	r0, r3
   15168:	mov	r1, r3
   1516c:	str	r3, [r8]
   15170:	add	sp, sp, #140	; 0x8c
   15174:	ldrd	r4, [sp]
   15178:	ldrd	r6, [sp, #8]
   1517c:	ldrd	r8, [sp, #16]
   15180:	ldrd	sl, [sp, #24]
   15184:	add	sp, sp, #32
   15188:	pop	{pc}		; (ldr pc, [sp], #4)
   1518c:	ldr	r2, [r8]
   15190:	b	150a4 <__assert_fail@plt+0x3bc8>
   15194:	ldr	r2, [r8]
   15198:	b	15040 <__assert_fail@plt+0x3b64>
   1519c:	mov	r0, sl
   151a0:	mov	r1, fp
   151a4:	b	15170 <__assert_fail@plt+0x3c94>
   151a8:	umull	r2, r3, sl, r9
   151ac:	cmp	fp, #0
   151b0:	umull	r0, r1, r9, fp
   151b4:	mov	r6, r2
   151b8:	mov	r7, r3
   151bc:	blt	151f0 <__assert_fail@plt+0x3d14>
   151c0:	cmp	r9, #0
   151c4:	blt	151e4 <__assert_fail@plt+0x3d08>
   151c8:	adds	r3, r0, r7
   151cc:	mov	r2, #0
   151d0:	adc	r2, r1, r2
   151d4:	cmp	r2, r3, asr #31
   151d8:	bne	15348 <__assert_fail@plt+0x3e6c>
   151dc:	mov	r1, r3
   151e0:	b	14f64 <__assert_fail@plt+0x3a88>
   151e4:	subs	r0, r0, sl
   151e8:	sbc	r1, r1, fp
   151ec:	b	151c8 <__assert_fail@plt+0x3cec>
   151f0:	subs	r0, r0, ip
   151f4:	sbc	r1, r1, r9
   151f8:	b	151c0 <__assert_fail@plt+0x3ce4>
   151fc:	ldr	r0, [sp, #8]
   15200:	mov	r1, #2
   15204:	mov	r3, #0
   15208:	mov	r2, #0
   1520c:	ldr	r5, [r0]
   15210:	mov	r0, r4
   15214:	str	r1, [sp]
   15218:	bl	112a8 <lseek64@plt>
   1521c:	cmp	r0, #0
   15220:	sbcs	r3, r1, #0
   15224:	blt	14fac <__assert_fail@plt+0x3ad0>
   15228:	cmp	r5, #0
   1522c:	bne	15234 <__assert_fail@plt+0x3d58>
   15230:	mov	r5, #75	; 0x4b
   15234:	cmp	r4, #0
   15238:	bne	152b4 <__assert_fail@plt+0x3dd8>
   1523c:	mov	r2, #5
   15240:	mov	r0, r4
   15244:	movw	r1, #62756	; 0xf524
   15248:	movt	r1, #1
   1524c:	bl	11230 <dcgettext@plt>
   15250:	mov	r6, r0
   15254:	mov	r1, #3
   15258:	ldr	r2, [sp, #12]
   1525c:	mov	r0, r4
   15260:	bl	1a8e0 <__assert_fail@plt+0x9404>
   15264:	mov	r3, r0
   15268:	mov	r2, r6
   1526c:	mov	r1, r5
   15270:	mov	r0, r4
   15274:	bl	13a94 <__assert_fail@plt+0x25b8>
   15278:	b	152f0 <__assert_fail@plt+0x3e14>
   1527c:	cmp	r8, #0
   15280:	mov	r0, #0
   15284:	sbcs	r3, r9, #0
   15288:	mov	r1, r0
   1528c:	blt	15170 <__assert_fail@plt+0x3c94>
   15290:	adds	r2, r8, r6
   15294:	adcs	r3, r9, r7
   15298:	mvnvs	r2, #0
   1529c:	mvnvs	r3, #0
   152a0:	strd	r2, [r4, #96]	; 0x60
   152a4:	b	15170 <__assert_fail@plt+0x3c94>
   152a8:	mov	r0, #0
   152ac:	mov	r1, r0
   152b0:	b	15170 <__assert_fail@plt+0x3c94>
   152b4:	mov	r2, #5
   152b8:	movw	r1, #62772	; 0xf534
   152bc:	movt	r1, #1
   152c0:	mov	r0, #0
   152c4:	bl	11230 <dcgettext@plt>
   152c8:	mov	r4, r0
   152cc:	mov	r1, #3
   152d0:	ldr	r2, [sp, #12]
   152d4:	mov	r0, #0
   152d8:	bl	1a8e0 <__assert_fail@plt+0x9404>
   152dc:	mov	r3, r0
   152e0:	mov	r2, r4
   152e4:	mov	r1, r5
   152e8:	mov	r0, #0
   152ec:	bl	13a94 <__assert_fail@plt+0x25b8>
   152f0:	bl	14d10 <__assert_fail@plt+0x3834>
   152f4:	ldr	r3, [sp, #8]
   152f8:	mov	r2, #5
   152fc:	movw	r1, #62788	; 0xf544
   15300:	movt	r1, #1
   15304:	mov	r0, #0
   15308:	ldr	r5, [r3]
   1530c:	bl	11230 <dcgettext@plt>
   15310:	mov	r6, r0
   15314:	mov	r0, #4
   15318:	ldr	r1, [sp, #12]
   1531c:	bl	19d60 <__assert_fail@plt+0x8884>
   15320:	mov	r3, r0
   15324:	mov	r2, r6
   15328:	mov	r1, r5
   1532c:	mov	r0, #0
   15330:	bl	13a94 <__assert_fail@plt+0x25b8>
   15334:	ldr	r3, [r4, #116]	; 0x74
   15338:	tst	r3, #256	; 0x100
   1533c:	beq	152f0 <__assert_fail@plt+0x3e14>
   15340:	bl	138e8 <__assert_fail@plt+0x240c>
   15344:	b	152f0 <__assert_fail@plt+0x3e14>
   15348:	ldr	r3, [sp, #20]
   1534c:	mov	ip, #1
   15350:	mul	r3, sl, r3
   15354:	mla	r3, r9, fp, r3
   15358:	add	r3, r3, r7
   1535c:	b	151dc <__assert_fail@plt+0x3d00>
   15360:	ldr	r3, [sp, #8]
   15364:	mov	r0, r4
   15368:	mov	r2, #5
   1536c:	movw	r1, #62740	; 0xf514
   15370:	movt	r1, #1
   15374:	ldr	r4, [r3]
   15378:	bl	11230 <dcgettext@plt>
   1537c:	mov	r6, r0
   15380:	mov	r0, #4
   15384:	ldr	r1, [sp, #12]
   15388:	bl	19d60 <__assert_fail@plt+0x8884>
   1538c:	mov	r3, r0
   15390:	mov	r2, r6
   15394:	mov	r1, r4
   15398:	mov	r0, r5
   1539c:	bl	13a94 <__assert_fail@plt+0x25b8>
   153a0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   153a4:	movw	r4, #4584	; 0x11e8
   153a8:	movt	r4, #3
   153ac:	strd	r6, [sp, #8]
   153b0:	mov	r7, r3
   153b4:	add	r6, r4, #128	; 0x80
   153b8:	strd	r8, [sp, #16]
   153bc:	mov	r9, r1
   153c0:	mov	r8, r2
   153c4:	str	sl, [sp, #24]
   153c8:	mov	sl, r0
   153cc:	str	lr, [sp, #28]
   153d0:	sub	sp, sp, #128	; 0x80
   153d4:	ldr	r3, [r4]
   153d8:	mov	r0, #0
   153dc:	mov	r2, sp
   153e0:	mov	r1, r6
   153e4:	cmp	r3, r0
   153e8:	bne	153f8 <__assert_fail@plt+0x3f1c>
   153ec:	ldr	r3, [r4, #4]
   153f0:	cmp	r3, r0
   153f4:	beq	15430 <__assert_fail@plt+0x3f54>
   153f8:	bl	111ac <sigprocmask@plt>
   153fc:	ldr	r5, [r4]
   15400:	mov	r2, #0
   15404:	mov	r1, sp
   15408:	mov	r0, #2
   1540c:	ldr	r3, [r4, #4]
   15410:	cmp	r3, r2
   15414:	sub	ip, r3, #1
   15418:	strne	ip, [r4, #4]
   1541c:	bl	111ac <sigprocmask@plt>
   15420:	cmp	r5, #0
   15424:	bne	1547c <__assert_fail@plt+0x3fa0>
   15428:	bl	138e8 <__assert_fail@plt+0x240c>
   1542c:	b	153d4 <__assert_fail@plt+0x3ef8>
   15430:	mov	r3, r7
   15434:	mov	r2, r8
   15438:	mov	r1, r9
   1543c:	mov	r0, sl
   15440:	bl	16244 <__assert_fail@plt+0x4d68>
   15444:	subs	r5, r0, #0
   15448:	bge	1545c <__assert_fail@plt+0x3f80>
   1544c:	bl	113a4 <__errno_location@plt>
   15450:	ldr	r3, [r0]
   15454:	cmp	r3, #4
   15458:	beq	153d4 <__assert_fail@plt+0x3ef8>
   1545c:	mov	r0, r5
   15460:	add	sp, sp, #128	; 0x80
   15464:	ldrd	r4, [sp]
   15468:	ldrd	r6, [sp, #8]
   1546c:	ldrd	r8, [sp, #16]
   15470:	ldr	sl, [sp, #24]
   15474:	add	sp, sp, #28
   15478:	pop	{pc}		; (ldr pc, [sp], #4)
   1547c:	bl	14b3c <__assert_fail@plt+0x3660>
   15480:	bl	138e8 <__assert_fail@plt+0x240c>
   15484:	mov	r0, r5
   15488:	bl	11164 <raise@plt>
   1548c:	b	153d4 <__assert_fail@plt+0x3ef8>
   15490:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15494:	movw	r4, #4584	; 0x11e8
   15498:	movt	r4, #3
   1549c:	ldr	r3, [r4, #268]	; 0x10c
   154a0:	strd	r6, [sp, #8]
   154a4:	mov	r7, r1
   154a8:	strd	r8, [sp, #16]
   154ac:	mov	r8, r0
   154b0:	str	sl, [sp, #24]
   154b4:	str	lr, [sp, #28]
   154b8:	sub	sp, sp, #136	; 0x88
   154bc:	tst	r3, #65536	; 0x10000
   154c0:	beq	154d0 <__assert_fail@plt+0x3ff4>
   154c4:	ldr	r3, [r4, #120]	; 0x78
   154c8:	cmp	r3, r1
   154cc:	bgt	15664 <__assert_fail@plt+0x4188>
   154d0:	cmp	r7, #0
   154d4:	mov	r5, #0
   154d8:	ldrgt	r9, [pc, #576]	; 15720 <__assert_fail@plt+0x4244>
   154dc:	ble	155d4 <__assert_fail@plt+0x40f8>
   154e0:	ldr	r3, [r4]
   154e4:	cmp	r3, #0
   154e8:	bne	154f8 <__assert_fail@plt+0x401c>
   154ec:	ldr	r3, [r4, #4]
   154f0:	cmp	r3, #0
   154f4:	beq	15550 <__assert_fail@plt+0x4074>
   154f8:	add	r2, sp, #8
   154fc:	mov	r1, r9
   15500:	mov	r0, #0
   15504:	bl	111ac <sigprocmask@plt>
   15508:	ldr	r6, [r4]
   1550c:	mov	r2, #0
   15510:	add	r1, sp, #8
   15514:	mov	r0, #2
   15518:	ldr	r3, [r4, #4]
   1551c:	cmp	r3, #0
   15520:	subne	r3, r3, #1
   15524:	strne	r3, [r4, #4]
   15528:	bl	111ac <sigprocmask@plt>
   1552c:	cmp	r6, #0
   15530:	bne	155f4 <__assert_fail@plt+0x4118>
   15534:	bl	138e8 <__assert_fail@plt+0x240c>
   15538:	ldr	r3, [r4]
   1553c:	cmp	r3, #0
   15540:	bne	154f8 <__assert_fail@plt+0x401c>
   15544:	ldr	r3, [r4, #4]
   15548:	cmp	r3, #0
   1554c:	bne	154f8 <__assert_fail@plt+0x401c>
   15550:	ldr	r6, [r4, #116]	; 0x74
   15554:	strb	r3, [r4, #272]	; 0x110
   15558:	tst	r6, #65536	; 0x10000
   1555c:	beq	15594 <__assert_fail@plt+0x40b8>
   15560:	mov	r2, r7
   15564:	mov	r1, r8
   15568:	ldrb	r3, [r1], #1
   1556c:	cmp	r3, #0
   15570:	bne	15594 <__assert_fail@plt+0x40b8>
   15574:	subs	r2, r2, #1
   15578:	beq	1561c <__assert_fail@plt+0x4140>
   1557c:	tst	r2, #15
   15580:	bne	15568 <__assert_fail@plt+0x408c>
   15584:	mov	r0, r8
   15588:	bl	11218 <memcmp@plt>
   1558c:	cmp	r0, #0
   15590:	beq	1561c <__assert_fail@plt+0x4140>
   15594:	sub	r2, r7, r5
   15598:	add	r1, r8, r5
   1559c:	mov	r0, #1
   155a0:	bl	113ec <write@plt>
   155a4:	cmp	r0, #0
   155a8:	blt	15608 <__assert_fail@plt+0x412c>
   155ac:	beq	15654 <__assert_fail@plt+0x4178>
   155b0:	add	r5, r5, r0
   155b4:	cmp	r7, r5
   155b8:	bgt	154e0 <__assert_fail@plt+0x4004>
   155bc:	ldrb	r3, [r4, #273]	; 0x111
   155c0:	cmp	r5, #0
   155c4:	moveq	r3, #0
   155c8:	andne	r3, r3, #1
   155cc:	cmp	r3, #0
   155d0:	bne	156c4 <__assert_fail@plt+0x41e8>
   155d4:	mov	r0, r5
   155d8:	add	sp, sp, #136	; 0x88
   155dc:	ldrd	r4, [sp]
   155e0:	ldrd	r6, [sp, #8]
   155e4:	ldrd	r8, [sp, #16]
   155e8:	ldr	sl, [sp, #24]
   155ec:	add	sp, sp, #28
   155f0:	pop	{pc}		; (ldr pc, [sp], #4)
   155f4:	bl	14b3c <__assert_fail@plt+0x3660>
   155f8:	bl	138e8 <__assert_fail@plt+0x240c>
   155fc:	mov	r0, r6
   15600:	bl	11164 <raise@plt>
   15604:	b	154e0 <__assert_fail@plt+0x4004>
   15608:	bl	113a4 <__errno_location@plt>
   1560c:	ldr	r3, [r0]
   15610:	cmp	r3, #4
   15614:	beq	155b4 <__assert_fail@plt+0x40d8>
   15618:	b	155bc <__assert_fail@plt+0x40e0>
   1561c:	mov	sl, #1
   15620:	asr	r3, r7, #31
   15624:	mov	r2, r7
   15628:	mov	r0, sl
   1562c:	str	sl, [sp]
   15630:	bl	112a8 <lseek64@plt>
   15634:	cmp	r0, #0
   15638:	sbcs	r3, r1, #0
   1563c:	biclt	r6, r6, #65536	; 0x10000
   15640:	strlt	r6, [r4, #116]	; 0x74
   15644:	blt	15594 <__assert_fail@plt+0x40b8>
   15648:	mov	r0, r7
   1564c:	strb	sl, [r4, #272]	; 0x110
   15650:	b	155b0 <__assert_fail@plt+0x40d4>
   15654:	bl	113a4 <__errno_location@plt>
   15658:	mov	r3, #28
   1565c:	str	r3, [r0]
   15660:	b	155bc <__assert_fail@plt+0x40e0>
   15664:	mov	r1, #3
   15668:	mov	r0, #1
   1566c:	bl	1605c <__assert_fail@plt+0x4b80>
   15670:	bic	r2, r0, #65536	; 0x10000
   15674:	mov	r1, #4
   15678:	mov	r0, #1
   1567c:	bl	1605c <__assert_fail@plt+0x4b80>
   15680:	cmp	r0, #0
   15684:	beq	1569c <__assert_fail@plt+0x41c0>
   15688:	movw	r3, #4432	; 0x1150
   1568c:	movt	r3, #3
   15690:	ldr	r3, [r3, #8]
   15694:	cmp	r3, #1
   15698:	bne	156d8 <__assert_fail@plt+0x41fc>
   1569c:	mov	r1, #1
   156a0:	mov	r3, #0
   156a4:	mov	r2, #0
   156a8:	mov	r0, r1
   156ac:	strb	r1, [r4, #89]	; 0x59
   156b0:	bl	13b3c <__assert_fail@plt+0x2660>
   156b4:	ldr	r3, [r4, #116]	; 0x74
   156b8:	orr	r3, r3, #32768	; 0x8000
   156bc:	str	r3, [r4, #116]	; 0x74
   156c0:	b	154d0 <__assert_fail@plt+0x3ff4>
   156c4:	mov	r2, r5
   156c8:	asr	r3, r5, #31
   156cc:	mov	r0, #1
   156d0:	bl	13b3c <__assert_fail@plt+0x2660>
   156d4:	b	155d4 <__assert_fail@plt+0x40f8>
   156d8:	bl	113a4 <__errno_location@plt>
   156dc:	ldr	r5, [r0]
   156e0:	mov	r2, #5
   156e4:	movw	r1, #62808	; 0xf558
   156e8:	movt	r1, #1
   156ec:	mov	r0, #0
   156f0:	bl	11230 <dcgettext@plt>
   156f4:	mov	r6, r0
   156f8:	mov	r1, #3
   156fc:	ldr	r2, [r4, #256]	; 0x100
   15700:	mov	r0, #0
   15704:	bl	1a8e0 <__assert_fail@plt+0x9404>
   15708:	mov	r3, r0
   1570c:	mov	r2, r6
   15710:	mov	r1, r5
   15714:	mov	r0, #0
   15718:	bl	13a94 <__assert_fail@plt+0x25b8>
   1571c:	b	1569c <__assert_fail@plt+0x41c0>
   15720:	andeq	r1, r3, r8, ror #4
   15724:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15728:	movw	r4, #4584	; 0x11e8
   1572c:	movt	r4, #3
   15730:	ldr	r1, [r4, #120]	; 0x78
   15734:	strd	r6, [sp, #8]
   15738:	ldr	r0, [r4, #124]	; 0x7c
   1573c:	str	r8, [sp, #16]
   15740:	str	lr, [sp, #20]
   15744:	bl	15490 <__assert_fail@plt+0x3fb4>
   15748:	ldrd	r2, [r4, #8]
   1574c:	ldr	r1, [r4, #120]	; 0x78
   15750:	adds	r6, r2, r0
   15754:	adc	r7, r3, r0, asr #31
   15758:	cmp	r1, r0
   1575c:	strd	r6, [r4, #8]
   15760:	bne	15798 <__assert_fail@plt+0x42bc>
   15764:	ldr	r3, [r4, #40]	; 0x28
   15768:	mov	r1, #0
   1576c:	ldr	r2, [r4, #44]	; 0x2c
   15770:	str	r1, [r4, #276]	; 0x114
   15774:	ldrd	r6, [sp, #8]
   15778:	adds	r3, r3, #1
   1577c:	ldr	r8, [sp, #16]
   15780:	adc	r2, r2, r1
   15784:	str	r3, [r4, #40]	; 0x28
   15788:	str	r2, [r4, #44]	; 0x2c
   1578c:	ldrd	r4, [sp]
   15790:	add	sp, sp, #20
   15794:	pop	{pc}		; (ldr pc, [sp], #4)
   15798:	mov	r5, r0
   1579c:	bl	113a4 <__errno_location@plt>
   157a0:	ldr	r6, [r0]
   157a4:	mov	r2, #5
   157a8:	movw	r1, #62840	; 0xf578
   157ac:	movt	r1, #1
   157b0:	mov	r0, #0
   157b4:	bl	11230 <dcgettext@plt>
   157b8:	mov	r7, r0
   157bc:	mov	r0, #4
   157c0:	ldr	r1, [r4, #256]	; 0x100
   157c4:	bl	19d60 <__assert_fail@plt+0x8884>
   157c8:	mov	r3, r0
   157cc:	mov	r2, r7
   157d0:	mov	r1, r6
   157d4:	mov	r0, #0
   157d8:	bl	13a94 <__assert_fail@plt+0x25b8>
   157dc:	cmp	r5, #0
   157e0:	beq	157fc <__assert_fail@plt+0x4320>
   157e4:	ldr	r3, [r4, #32]
   157e8:	ldr	r2, [r4, #36]	; 0x24
   157ec:	adds	r3, r3, #1
   157f0:	adc	r2, r2, #0
   157f4:	str	r3, [r4, #32]
   157f8:	str	r2, [r4, #36]	; 0x24
   157fc:	bl	14d10 <__assert_fail@plt+0x3834>
   15800:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15804:	strd	r6, [sp, #8]
   15808:	strd	r8, [sp, #16]
   1580c:	subs	r9, r1, #0
   15810:	str	sl, [sp, #24]
   15814:	str	lr, [sp, #28]
   15818:	beq	158a8 <__assert_fail@plt+0x43cc>
   1581c:	movw	r4, #4584	; 0x11e8
   15820:	movt	r4, #3
   15824:	sub	r6, r0, #1
   15828:	movw	r7, #4432	; 0x1150
   1582c:	movt	r7, #3
   15830:	add	r9, r6, r9
   15834:	ldr	r5, [r4, #280]	; 0x118
   15838:	mov	r8, #0
   1583c:	b	1587c <__assert_fail@plt+0x43a0>
   15840:	cmp	r1, r5
   15844:	beq	1590c <__assert_fail@plt+0x4430>
   15848:	ble	1586c <__assert_fail@plt+0x4390>
   1584c:	ldr	r1, [r4, #124]	; 0x7c
   15850:	ldr	r2, [r4, #276]	; 0x114
   15854:	strb	r3, [r1, r2]
   15858:	add	r3, r2, #1
   1585c:	ldr	r2, [r4, #120]	; 0x78
   15860:	str	r3, [r4, #276]	; 0x114
   15864:	cmp	r3, r2
   15868:	bge	15928 <__assert_fail@plt+0x444c>
   1586c:	add	r5, r5, #1
   15870:	cmp	r6, r9
   15874:	str	r5, [r4, #280]	; 0x118
   15878:	beq	158a8 <__assert_fail@plt+0x43cc>
   1587c:	ldrb	r3, [r6, #1]!
   15880:	ldrb	r2, [r7, #25]
   15884:	ldr	r1, [r4, #284]	; 0x11c
   15888:	cmp	r2, r3
   1588c:	bne	15840 <__assert_fail@plt+0x4364>
   15890:	cmp	r1, r5
   15894:	bgt	158d4 <__assert_fail@plt+0x43f8>
   15898:	cmp	r6, r9
   1589c:	mov	r5, #0
   158a0:	str	r8, [r4, #280]	; 0x118
   158a4:	bne	1587c <__assert_fail@plt+0x43a0>
   158a8:	ldrd	r4, [sp]
   158ac:	ldrd	r6, [sp, #8]
   158b0:	ldrd	r8, [sp, #16]
   158b4:	ldr	sl, [sp, #24]
   158b8:	add	sp, sp, #28
   158bc:	pop	{pc}		; (ldr pc, [sp], #4)
   158c0:	bl	15724 <__assert_fail@plt+0x4248>
   158c4:	ldr	r3, [r4, #284]	; 0x11c
   158c8:	add	r5, r5, #1
   158cc:	cmp	r3, r5
   158d0:	ble	15898 <__assert_fail@plt+0x43bc>
   158d4:	ldrb	r1, [r7, #26]
   158d8:	ldr	r2, [r4, #124]	; 0x7c
   158dc:	ldr	r3, [r4, #276]	; 0x114
   158e0:	strb	r1, [r2, r3]
   158e4:	add	r3, r3, #1
   158e8:	ldr	r2, [r4, #120]	; 0x78
   158ec:	str	r3, [r4, #276]	; 0x114
   158f0:	cmp	r3, r2
   158f4:	bge	158c0 <__assert_fail@plt+0x43e4>
   158f8:	ldr	r3, [r4, #284]	; 0x11c
   158fc:	add	r5, r5, #1
   15900:	cmp	r3, r5
   15904:	bgt	158d4 <__assert_fail@plt+0x43f8>
   15908:	b	15898 <__assert_fail@plt+0x43bc>
   1590c:	ldr	r3, [r4, #64]	; 0x40
   15910:	ldr	r2, [r4, #68]	; 0x44
   15914:	adds	r3, r3, #1
   15918:	adc	r2, r2, #0
   1591c:	str	r3, [r4, #64]	; 0x40
   15920:	str	r2, [r4, #68]	; 0x44
   15924:	b	1586c <__assert_fail@plt+0x4390>
   15928:	bl	15724 <__assert_fail@plt+0x4248>
   1592c:	ldr	r5, [r4, #280]	; 0x118
   15930:	b	1586c <__assert_fail@plt+0x4390>
   15934:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15938:	subs	r5, r1, #0
   1593c:	strd	r6, [sp, #8]
   15940:	strd	r8, [sp, #16]
   15944:	strd	sl, [sp, #24]
   15948:	str	lr, [sp, #32]
   1594c:	sub	sp, sp, #4
   15950:	ble	159e8 <__assert_fail@plt+0x450c>
   15954:	mov	r8, #0
   15958:	movw	r4, #4584	; 0x11e8
   1595c:	movt	r4, #3
   15960:	movw	r9, #4432	; 0x1150
   15964:	movt	r9, #3
   15968:	mov	r6, r0
   1596c:	mov	r7, r8
   15970:	b	159a8 <__assert_fail@plt+0x44cc>
   15974:	ldrb	r1, [r9, #25]
   15978:	str	r7, [r4, #280]	; 0x118
   1597c:	ldr	r2, [r4, #124]	; 0x7c
   15980:	str	r7, [r4, #288]	; 0x120
   15984:	ldr	r3, [r4, #276]	; 0x114
   15988:	strb	r1, [r2, r3]
   1598c:	add	r3, r3, #1
   15990:	ldr	r2, [r4, #120]	; 0x78
   15994:	str	r3, [r4, #276]	; 0x114
   15998:	cmp	r3, r2
   1599c:	bge	15a24 <__assert_fail@plt+0x4548>
   159a0:	cmp	r5, r8
   159a4:	ble	159e8 <__assert_fail@plt+0x450c>
   159a8:	ldr	r3, [r4, #280]	; 0x118
   159ac:	ldr	r1, [r4, #284]	; 0x11c
   159b0:	ldrb	sl, [r6, r8]
   159b4:	add	r2, r3, #1
   159b8:	cmp	r3, r1
   159bc:	str	r2, [r4, #280]	; 0x118
   159c0:	bge	15974 <__assert_fail@plt+0x4498>
   159c4:	ldrb	r2, [r9, #26]
   159c8:	ldr	r3, [r4, #288]	; 0x120
   159cc:	cmp	r2, sl
   159d0:	bne	15a2c <__assert_fail@plt+0x4550>
   159d4:	add	r3, r3, #1
   159d8:	add	r8, r8, #1
   159dc:	cmp	r5, r8
   159e0:	str	r3, [r4, #288]	; 0x120
   159e4:	bgt	159a8 <__assert_fail@plt+0x44cc>
   159e8:	add	sp, sp, #4
   159ec:	ldrd	r4, [sp]
   159f0:	ldrd	r6, [sp, #8]
   159f4:	ldrd	r8, [sp, #16]
   159f8:	ldrd	sl, [sp, #24]
   159fc:	add	sp, sp, #32
   15a00:	pop	{pc}		; (ldr pc, [sp], #4)
   15a04:	add	fp, r0, ip
   15a08:	add	r1, ip, #1
   15a0c:	strb	sl, [fp]
   15a10:	add	r8, r8, #1
   15a14:	ldr	r3, [r4, #120]	; 0x78
   15a18:	str	r1, [r4, #276]	; 0x114
   15a1c:	cmp	r3, r1
   15a20:	bgt	159a0 <__assert_fail@plt+0x44c4>
   15a24:	bl	15724 <__assert_fail@plt+0x4248>
   15a28:	b	159a0 <__assert_fail@plt+0x44c4>
   15a2c:	cmp	r3, #0
   15a30:	ldr	r0, [r4, #124]	; 0x7c
   15a34:	ldr	ip, [r4, #276]	; 0x114
   15a38:	bne	15a60 <__assert_fail@plt+0x4584>
   15a3c:	b	15a04 <__assert_fail@plt+0x4528>
   15a40:	add	r1, ip, #2
   15a44:	add	fp, r0, r2
   15a48:	mov	ip, r2
   15a4c:	sub	r3, r3, #1
   15a50:	cmp	r3, #0
   15a54:	str	r3, [r4, #288]	; 0x120
   15a58:	beq	15a0c <__assert_fail@plt+0x4530>
   15a5c:	ldrb	r2, [r9, #26]
   15a60:	strb	r2, [r0, ip]
   15a64:	add	r2, ip, #1
   15a68:	ldr	r1, [r4, #120]	; 0x78
   15a6c:	str	r2, [r4, #276]	; 0x114
   15a70:	cmp	r2, r1
   15a74:	blt	15a40 <__assert_fail@plt+0x4564>
   15a78:	bl	15490 <__assert_fail@plt+0x3fb4>
   15a7c:	ldrd	r2, [r4, #8]
   15a80:	mov	fp, r0
   15a84:	ldr	ip, [r4, #120]	; 0x78
   15a88:	adds	r0, r2, r0
   15a8c:	adc	r1, r3, fp, asr #31
   15a90:	mov	r2, r0
   15a94:	cmp	fp, ip
   15a98:	mov	r3, r1
   15a9c:	strd	r2, [r4, #8]
   15aa0:	bne	15ad4 <__assert_fail@plt+0x45f8>
   15aa4:	ldr	r3, [r4, #40]	; 0x28
   15aa8:	mov	r1, #1
   15aac:	mov	ip, #0
   15ab0:	ldr	lr, [r4, #44]	; 0x2c
   15ab4:	ldr	r0, [r4, #124]	; 0x7c
   15ab8:	adds	r2, r3, r1
   15abc:	ldr	r3, [r4, #288]	; 0x120
   15ac0:	adc	lr, lr, ip
   15ac4:	str	r2, [r4, #40]	; 0x28
   15ac8:	mov	fp, r0
   15acc:	str	lr, [r4, #44]	; 0x2c
   15ad0:	b	15a4c <__assert_fail@plt+0x4570>
   15ad4:	bl	113a4 <__errno_location@plt>
   15ad8:	ldr	r5, [r0]
   15adc:	mov	r2, #5
   15ae0:	movw	r1, #62840	; 0xf578
   15ae4:	movt	r1, #1
   15ae8:	mov	r0, #0
   15aec:	bl	11230 <dcgettext@plt>
   15af0:	mov	r6, r0
   15af4:	mov	r0, #4
   15af8:	ldr	r1, [r4, #256]	; 0x100
   15afc:	bl	19d60 <__assert_fail@plt+0x8884>
   15b00:	mov	r3, r0
   15b04:	mov	r2, r6
   15b08:	mov	r1, r5
   15b0c:	mov	r0, #0
   15b10:	bl	13a94 <__assert_fail@plt+0x25b8>
   15b14:	cmp	fp, #0
   15b18:	beq	15b34 <__assert_fail@plt+0x4658>
   15b1c:	ldr	r3, [r4, #32]
   15b20:	ldr	r2, [r4, #36]	; 0x24
   15b24:	adds	r3, r3, #1
   15b28:	adc	r2, r2, #0
   15b2c:	str	r3, [r4, #32]
   15b30:	str	r2, [r4, #36]	; 0x24
   15b34:	bl	14d10 <__assert_fail@plt+0x3834>
   15b38:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15b3c:	movw	r4, #4584	; 0x11e8
   15b40:	movt	r4, #3
   15b44:	strd	r6, [sp, #8]
   15b48:	add	r7, r4, #128	; 0x80
   15b4c:	strd	r8, [sp, #16]
   15b50:	mov	r9, r0
   15b54:	mov	r8, r1
   15b58:	strd	sl, [sp, #24]
   15b5c:	mov	fp, r2
   15b60:	str	lr, [sp, #32]
   15b64:	sub	sp, sp, #140	; 0x8c
   15b68:	ldr	r3, [r4]
   15b6c:	cmp	r3, #0
   15b70:	bne	15b80 <__assert_fail@plt+0x46a4>
   15b74:	ldr	sl, [r4, #4]
   15b78:	cmp	sl, #0
   15b7c:	beq	15bd8 <__assert_fail@plt+0x46fc>
   15b80:	add	r2, sp, #8
   15b84:	mov	r1, r7
   15b88:	mov	r0, #0
   15b8c:	bl	111ac <sigprocmask@plt>
   15b90:	ldr	r5, [r4]
   15b94:	mov	r2, #0
   15b98:	add	r1, sp, #8
   15b9c:	mov	r0, #2
   15ba0:	ldr	r3, [r4, #4]
   15ba4:	cmp	r3, #0
   15ba8:	subne	r3, r3, #1
   15bac:	strne	r3, [r4, #4]
   15bb0:	bl	111ac <sigprocmask@plt>
   15bb4:	cmp	r5, #0
   15bb8:	bne	15c78 <__assert_fail@plt+0x479c>
   15bbc:	bl	138e8 <__assert_fail@plt+0x240c>
   15bc0:	ldr	r3, [r4]
   15bc4:	cmp	r3, #0
   15bc8:	bne	15b80 <__assert_fail@plt+0x46a4>
   15bcc:	ldr	sl, [r4, #4]
   15bd0:	cmp	sl, #0
   15bd4:	bne	15b80 <__assert_fail@plt+0x46a4>
   15bd8:	mov	r2, fp
   15bdc:	mov	r1, r8
   15be0:	mov	r0, r9
   15be4:	bl	11194 <read@plt>
   15be8:	cmn	r0, #1
   15bec:	mov	r5, r0
   15bf0:	beq	15c8c <__assert_fail@plt+0x47b0>
   15bf4:	cmp	r0, #0
   15bf8:	bge	15c0c <__assert_fail@plt+0x4730>
   15bfc:	bl	113a4 <__errno_location@plt>
   15c00:	ldr	r3, [r0]
   15c04:	cmp	r3, #4
   15c08:	beq	15b68 <__assert_fail@plt+0x468c>
   15c0c:	cmp	r5, #0
   15c10:	cmpgt	fp, r5
   15c14:	ldrgt	r8, [pc, #376]	; 15d94 <__assert_fail@plt+0x48b8>
   15c18:	ble	15cf4 <__assert_fail@plt+0x4818>
   15c1c:	mov	r0, #0
   15c20:	add	r2, sp, #8
   15c24:	ldr	r3, [r4]
   15c28:	mov	r1, r8
   15c2c:	cmp	r3, r0
   15c30:	bne	15c40 <__assert_fail@plt+0x4764>
   15c34:	ldr	r3, [r4, #4]
   15c38:	cmp	r3, r0
   15c3c:	beq	15cfc <__assert_fail@plt+0x4820>
   15c40:	bl	111ac <sigprocmask@plt>
   15c44:	ldr	r7, [r4]
   15c48:	mov	r2, #0
   15c4c:	add	r1, sp, #8
   15c50:	mov	r0, #2
   15c54:	ldr	r3, [r4, #4]
   15c58:	cmp	r3, r2
   15c5c:	sub	ip, r3, #1
   15c60:	strne	ip, [r4, #4]
   15c64:	bl	111ac <sigprocmask@plt>
   15c68:	cmp	r7, #0
   15c6c:	bne	15ce0 <__assert_fail@plt+0x4804>
   15c70:	bl	138e8 <__assert_fail@plt+0x240c>
   15c74:	b	15c1c <__assert_fail@plt+0x4740>
   15c78:	bl	14b3c <__assert_fail@plt+0x3660>
   15c7c:	bl	138e8 <__assert_fail@plt+0x240c>
   15c80:	mov	r0, r5
   15c84:	bl	11164 <raise@plt>
   15c88:	b	15b68 <__assert_fail@plt+0x468c>
   15c8c:	bl	113a4 <__errno_location@plt>
   15c90:	ldr	r3, [r0]
   15c94:	cmp	r3, #22
   15c98:	bne	15c04 <__assert_fail@plt+0x4728>
   15c9c:	ldr	r3, [r4, #292]	; 0x124
   15ca0:	cmp	r3, #0
   15ca4:	movle	r2, #0
   15ca8:	movgt	r2, #1
   15cac:	cmp	r3, fp
   15cb0:	movge	r2, #0
   15cb4:	cmp	r2, #0
   15cb8:	bne	15d80 <__assert_fail@plt+0x48a4>
   15cbc:	mov	r0, r5
   15cc0:	str	r5, [r4, #292]	; 0x124
   15cc4:	add	sp, sp, #140	; 0x8c
   15cc8:	ldrd	r4, [sp]
   15ccc:	ldrd	r6, [sp, #8]
   15cd0:	ldrd	r8, [sp, #16]
   15cd4:	ldrd	sl, [sp, #24]
   15cd8:	add	sp, sp, #32
   15cdc:	pop	{pc}		; (ldr pc, [sp], #4)
   15ce0:	bl	14b3c <__assert_fail@plt+0x3660>
   15ce4:	bl	138e8 <__assert_fail@plt+0x240c>
   15ce8:	mov	r0, r7
   15cec:	bl	11164 <raise@plt>
   15cf0:	b	15c1c <__assert_fail@plt+0x4740>
   15cf4:	cmp	r5, #0
   15cf8:	ble	15cbc <__assert_fail@plt+0x47e0>
   15cfc:	ldrb	r3, [r4, #300]	; 0x12c
   15d00:	cmp	r3, #0
   15d04:	beq	15cbc <__assert_fail@plt+0x47e0>
   15d08:	ldr	r7, [r4, #292]	; 0x124
   15d0c:	cmp	r7, fp
   15d10:	movge	r6, #0
   15d14:	movlt	r6, #1
   15d18:	cmp	r7, #0
   15d1c:	movle	r6, #0
   15d20:	cmp	r6, #0
   15d24:	beq	15cbc <__assert_fail@plt+0x47e0>
   15d28:	movw	r3, #4432	; 0x1150
   15d2c:	movt	r3, #3
   15d30:	ldr	r3, [r3, #8]
   15d34:	cmp	r3, #1
   15d38:	beq	15d74 <__assert_fail@plt+0x4898>
   15d3c:	mov	r0, #5
   15d40:	mov	r3, r7
   15d44:	movw	r2, #62856	; 0xf588
   15d48:	movt	r2, #1
   15d4c:	movw	r1, #62916	; 0xf5c4
   15d50:	movt	r1, #1
   15d54:	str	r0, [sp]
   15d58:	mov	r0, #0
   15d5c:	bl	114c4 <dcngettext@plt>
   15d60:	mov	r1, #0
   15d64:	mov	r2, r0
   15d68:	mov	r3, r7
   15d6c:	mov	r0, r1
   15d70:	bl	13a94 <__assert_fail@plt+0x25b8>
   15d74:	mov	r3, #0
   15d78:	strb	r3, [r4, #300]	; 0x12c
   15d7c:	b	15cbc <__assert_fail@plt+0x47e0>
   15d80:	ldr	r3, [r4, #296]	; 0x128
   15d84:	tst	r3, #65536	; 0x10000
   15d88:	movne	r5, sl
   15d8c:	strne	sl, [r0]
   15d90:	b	15cbc <__assert_fail@plt+0x47e0>
   15d94:	andeq	r1, r3, r8, ror #4
   15d98:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15d9c:	subs	r4, r2, #0
   15da0:	strd	r6, [sp, #8]
   15da4:	str	r8, [sp, #16]
   15da8:	str	lr, [sp, #20]
   15dac:	ble	15e0c <__assert_fail@plt+0x4930>
   15db0:	mov	r7, r0
   15db4:	mov	r5, r1
   15db8:	mov	r6, #0
   15dbc:	b	15dd4 <__assert_fail@plt+0x48f8>
   15dc0:	beq	15e04 <__assert_fail@plt+0x4928>
   15dc4:	cmp	r4, #0
   15dc8:	add	r6, r6, r0
   15dcc:	add	r5, r5, r0
   15dd0:	ble	15e04 <__assert_fail@plt+0x4928>
   15dd4:	mov	r2, r4
   15dd8:	mov	r1, r5
   15ddc:	mov	r0, r7
   15de0:	bl	15b38 <__assert_fail@plt+0x465c>
   15de4:	cmp	r0, #0
   15de8:	sub	r4, r4, r0
   15dec:	bge	15dc0 <__assert_fail@plt+0x48e4>
   15df0:	ldrd	r4, [sp]
   15df4:	ldrd	r6, [sp, #8]
   15df8:	ldr	r8, [sp, #16]
   15dfc:	add	sp, sp, #20
   15e00:	pop	{pc}		; (ldr pc, [sp], #4)
   15e04:	mov	r0, r6
   15e08:	b	15df0 <__assert_fail@plt+0x4914>
   15e0c:	mov	r0, #0
   15e10:	b	15df0 <__assert_fail@plt+0x4914>
   15e14:	strd	r4, [sp, #-16]!
   15e18:	mov	r4, r0
   15e1c:	str	r6, [sp, #8]
   15e20:	str	lr, [sp, #12]
   15e24:	bl	112c0 <__fpending@plt>
   15e28:	ldr	r5, [r4]
   15e2c:	mov	r6, r0
   15e30:	mov	r0, r4
   15e34:	bl	15fa8 <__assert_fail@plt+0x4acc>
   15e38:	mov	r4, r0
   15e3c:	and	r5, r5, #32
   15e40:	cmp	r5, #0
   15e44:	bne	15e7c <__assert_fail@plt+0x49a0>
   15e48:	cmp	r0, #0
   15e4c:	beq	15e68 <__assert_fail@plt+0x498c>
   15e50:	cmp	r6, #0
   15e54:	bne	15e94 <__assert_fail@plt+0x49b8>
   15e58:	bl	113a4 <__errno_location@plt>
   15e5c:	ldr	r4, [r0]
   15e60:	subs	r4, r4, #9
   15e64:	mvnne	r4, #0
   15e68:	mov	r0, r4
   15e6c:	ldrd	r4, [sp]
   15e70:	ldr	r6, [sp, #8]
   15e74:	add	sp, sp, #12
   15e78:	pop	{pc}		; (ldr pc, [sp], #4)
   15e7c:	cmp	r0, #0
   15e80:	bne	15e94 <__assert_fail@plt+0x49b8>
   15e84:	bl	113a4 <__errno_location@plt>
   15e88:	str	r4, [r0]
   15e8c:	mvn	r4, #0
   15e90:	b	15e68 <__assert_fail@plt+0x498c>
   15e94:	mvn	r4, #0
   15e98:	b	15e68 <__assert_fail@plt+0x498c>
   15e9c:	movw	r3, #5192	; 0x1448
   15ea0:	movt	r3, #3
   15ea4:	str	r0, [r3]
   15ea8:	bx	lr
   15eac:	movw	r3, #5192	; 0x1448
   15eb0:	movt	r3, #3
   15eb4:	strb	r0, [r3, #4]
   15eb8:	bx	lr
   15ebc:	movw	r3, #4572	; 0x11dc
   15ec0:	movt	r3, #3
   15ec4:	strd	r4, [sp, #-16]!
   15ec8:	ldr	r0, [r3]
   15ecc:	str	r6, [sp, #8]
   15ed0:	str	lr, [sp, #12]
   15ed4:	sub	sp, sp, #8
   15ed8:	bl	15e14 <__assert_fail@plt+0x4938>
   15edc:	cmp	r0, #0
   15ee0:	beq	15f0c <__assert_fail@plt+0x4a30>
   15ee4:	movw	r4, #5192	; 0x1448
   15ee8:	movt	r4, #3
   15eec:	ldrb	r6, [r4, #4]
   15ef0:	bl	113a4 <__errno_location@plt>
   15ef4:	mov	r5, r0
   15ef8:	cmp	r6, #0
   15efc:	beq	15f38 <__assert_fail@plt+0x4a5c>
   15f00:	ldr	r3, [r0]
   15f04:	cmp	r3, #32
   15f08:	bne	15f38 <__assert_fail@plt+0x4a5c>
   15f0c:	movw	r3, #4568	; 0x11d8
   15f10:	movt	r3, #3
   15f14:	ldr	r0, [r3]
   15f18:	bl	15e14 <__assert_fail@plt+0x4938>
   15f1c:	cmp	r0, #0
   15f20:	bne	15f80 <__assert_fail@plt+0x4aa4>
   15f24:	add	sp, sp, #8
   15f28:	ldrd	r4, [sp]
   15f2c:	ldr	r6, [sp, #8]
   15f30:	add	sp, sp, #12
   15f34:	pop	{pc}		; (ldr pc, [sp], #4)
   15f38:	movw	r1, #64004	; 0xfa04
   15f3c:	movt	r1, #1
   15f40:	mov	r2, #5
   15f44:	mov	r0, #0
   15f48:	bl	11230 <dcgettext@plt>
   15f4c:	mov	r6, r0
   15f50:	ldr	r0, [r4]
   15f54:	cmp	r0, #0
   15f58:	beq	15f90 <__assert_fail@plt+0x4ab4>
   15f5c:	ldr	r4, [r5]
   15f60:	bl	1a510 <__assert_fail@plt+0x9034>
   15f64:	mov	r3, r0
   15f68:	movw	r2, #62616	; 0xf498
   15f6c:	movt	r2, #1
   15f70:	mov	r0, #0
   15f74:	str	r6, [sp]
   15f78:	mov	r1, r4
   15f7c:	bl	112d8 <error@plt>
   15f80:	movw	r3, #4476	; 0x117c
   15f84:	movt	r3, #3
   15f88:	ldr	r0, [r3]
   15f8c:	bl	111dc <_exit@plt>
   15f90:	mov	r3, r6
   15f94:	movw	r2, #58740	; 0xe574
   15f98:	movt	r2, #1
   15f9c:	ldr	r1, [r5]
   15fa0:	bl	112d8 <error@plt>
   15fa4:	b	15f80 <__assert_fail@plt+0x4aa4>
   15fa8:	strd	r4, [sp, #-12]!
   15fac:	mov	r4, r0
   15fb0:	str	lr, [sp, #8]
   15fb4:	sub	sp, sp, #12
   15fb8:	bl	113f8 <fileno@plt>
   15fbc:	cmp	r0, #0
   15fc0:	mov	r0, r4
   15fc4:	blt	16048 <__assert_fail@plt+0x4b6c>
   15fc8:	bl	1132c <__freading@plt>
   15fcc:	cmp	r0, #0
   15fd0:	bne	16014 <__assert_fail@plt+0x4b38>
   15fd4:	mov	r0, r4
   15fd8:	bl	162c8 <__assert_fail@plt+0x4dec>
   15fdc:	cmp	r0, #0
   15fe0:	beq	16044 <__assert_fail@plt+0x4b68>
   15fe4:	bl	113a4 <__errno_location@plt>
   15fe8:	mov	r5, r0
   15fec:	mov	r0, r4
   15ff0:	ldr	r4, [r5]
   15ff4:	bl	11410 <fclose@plt>
   15ff8:	cmp	r4, #0
   15ffc:	mvnne	r0, #0
   16000:	strne	r4, [r5]
   16004:	add	sp, sp, #12
   16008:	ldrd	r4, [sp]
   1600c:	add	sp, sp, #8
   16010:	pop	{pc}		; (ldr pc, [sp], #4)
   16014:	mov	r0, r4
   16018:	bl	113f8 <fileno@plt>
   1601c:	mov	r1, #1
   16020:	mov	r2, #0
   16024:	mov	r3, #0
   16028:	str	r1, [sp]
   1602c:	bl	112a8 <lseek64@plt>
   16030:	mvn	r3, #0
   16034:	mvn	r2, #0
   16038:	cmp	r1, r3
   1603c:	cmpeq	r0, r2
   16040:	bne	15fd4 <__assert_fail@plt+0x4af8>
   16044:	mov	r0, r4
   16048:	add	sp, sp, #12
   1604c:	ldrd	r4, [sp]
   16050:	ldr	lr, [sp, #8]
   16054:	add	sp, sp, #12
   16058:	b	11410 <fclose@plt>
   1605c:	push	{r1, r2, r3}
   16060:	strd	r4, [sp, #-20]!	; 0xffffffec
   16064:	strd	r6, [sp, #8]
   16068:	str	lr, [sp, #16]
   1606c:	sub	sp, sp, #8
   16070:	ldr	r1, [sp, #28]
   16074:	add	r2, sp, #32
   16078:	str	r2, [sp, #4]
   1607c:	cmp	r1, #0
   16080:	beq	1615c <__assert_fail@plt+0x4c80>
   16084:	movw	r3, #1030	; 0x406
   16088:	mov	r6, r0
   1608c:	cmp	r1, r3
   16090:	beq	1616c <__assert_fail@plt+0x4c90>
   16094:	cmp	r1, #11
   16098:	beq	16114 <__assert_fail@plt+0x4c38>
   1609c:	ble	160f4 <__assert_fail@plt+0x4c18>
   160a0:	movw	r2, #1031	; 0x407
   160a4:	cmp	r1, r2
   160a8:	bgt	16130 <__assert_fail@plt+0x4c54>
   160ac:	cmp	r1, r3
   160b0:	bge	160c0 <__assert_fail@plt+0x4be4>
   160b4:	movw	r3, #1025	; 0x401
   160b8:	cmp	r1, r3
   160bc:	beq	16114 <__assert_fail@plt+0x4c38>
   160c0:	ldr	r3, [sp, #4]
   160c4:	mov	r0, r6
   160c8:	ldr	r2, [r3]
   160cc:	bl	11428 <fcntl64@plt>
   160d0:	mov	r4, r0
   160d4:	mov	r0, r4
   160d8:	add	sp, sp, #8
   160dc:	ldrd	r4, [sp]
   160e0:	ldrd	r6, [sp, #8]
   160e4:	ldr	lr, [sp, #16]
   160e8:	add	sp, sp, #20
   160ec:	add	sp, sp, #12
   160f0:	bx	lr
   160f4:	cmp	r1, #4
   160f8:	beq	160c0 <__assert_fail@plt+0x4be4>
   160fc:	bgt	16124 <__assert_fail@plt+0x4c48>
   16100:	cmp	r1, #2
   16104:	beq	160c0 <__assert_fail@plt+0x4be4>
   16108:	bgt	16114 <__assert_fail@plt+0x4c38>
   1610c:	cmp	r1, #1
   16110:	bne	160c0 <__assert_fail@plt+0x4be4>
   16114:	mov	r0, r6
   16118:	bl	11428 <fcntl64@plt>
   1611c:	mov	r4, r0
   16120:	b	160d4 <__assert_fail@plt+0x4bf8>
   16124:	cmp	r1, #9
   16128:	bne	160c0 <__assert_fail@plt+0x4be4>
   1612c:	b	16114 <__assert_fail@plt+0x4c38>
   16130:	movw	r3, #1033	; 0x409
   16134:	cmp	r1, r3
   16138:	beq	160c0 <__assert_fail@plt+0x4be4>
   1613c:	blt	16114 <__assert_fail@plt+0x4c38>
   16140:	movw	r3, #1034	; 0x40a
   16144:	cmp	r1, r3
   16148:	bne	160c0 <__assert_fail@plt+0x4be4>
   1614c:	mov	r0, r6
   16150:	bl	11428 <fcntl64@plt>
   16154:	mov	r4, r0
   16158:	b	160d4 <__assert_fail@plt+0x4bf8>
   1615c:	ldr	r2, [sp, #32]
   16160:	bl	11428 <fcntl64@plt>
   16164:	mov	r4, r0
   16168:	b	160d4 <__assert_fail@plt+0x4bf8>
   1616c:	movw	r5, #5200	; 0x1450
   16170:	movt	r5, #3
   16174:	ldr	r7, [r2]
   16178:	add	r2, sp, #36	; 0x24
   1617c:	ldr	r3, [r5]
   16180:	str	r2, [sp, #4]
   16184:	mov	r2, r7
   16188:	cmp	r3, #0
   1618c:	blt	161a8 <__assert_fail@plt+0x4ccc>
   16190:	bl	11428 <fcntl64@plt>
   16194:	subs	r4, r0, #0
   16198:	blt	16210 <__assert_fail@plt+0x4d34>
   1619c:	mov	r3, #1
   161a0:	str	r3, [r5]
   161a4:	b	160d4 <__assert_fail@plt+0x4bf8>
   161a8:	mov	r1, #0
   161ac:	bl	11428 <fcntl64@plt>
   161b0:	subs	r4, r0, #0
   161b4:	blt	160d4 <__assert_fail@plt+0x4bf8>
   161b8:	ldr	r3, [r5]
   161bc:	cmn	r3, #1
   161c0:	bne	160d4 <__assert_fail@plt+0x4bf8>
   161c4:	mov	r1, #1
   161c8:	mov	r0, r4
   161cc:	bl	11428 <fcntl64@plt>
   161d0:	subs	r2, r0, #0
   161d4:	blt	161f0 <__assert_fail@plt+0x4d14>
   161d8:	orr	r2, r2, #1
   161dc:	mov	r1, #2
   161e0:	mov	r0, r4
   161e4:	bl	11428 <fcntl64@plt>
   161e8:	cmn	r0, #1
   161ec:	bne	160d4 <__assert_fail@plt+0x4bf8>
   161f0:	bl	113a4 <__errno_location@plt>
   161f4:	mov	r5, r0
   161f8:	mov	r0, r4
   161fc:	ldr	r6, [r5]
   16200:	mvn	r4, #0
   16204:	bl	114b8 <close@plt>
   16208:	str	r6, [r5]
   1620c:	b	160d4 <__assert_fail@plt+0x4bf8>
   16210:	bl	113a4 <__errno_location@plt>
   16214:	ldr	r3, [r0]
   16218:	cmp	r3, #22
   1621c:	bne	1619c <__assert_fail@plt+0x4cc0>
   16220:	mov	r2, r7
   16224:	mov	r0, r6
   16228:	mov	r1, #0
   1622c:	bl	11428 <fcntl64@plt>
   16230:	subs	r4, r0, #0
   16234:	mvnge	r3, #0
   16238:	strge	r3, [r5]
   1623c:	bge	161c4 <__assert_fail@plt+0x4ce8>
   16240:	b	160d4 <__assert_fail@plt+0x4bf8>
   16244:	mov	ip, r1
   16248:	mov	r1, r2
   1624c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16250:	mov	r2, r3
   16254:	mov	r5, r0
   16258:	strd	r6, [sp, #8]
   1625c:	mov	r0, ip
   16260:	str	r8, [sp, #16]
   16264:	str	lr, [sp, #20]
   16268:	bl	112e4 <open64@plt>
   1626c:	sub	r3, r5, r0
   16270:	mov	r4, r0
   16274:	clz	r3, r3
   16278:	lsr	r3, r3, #5
   1627c:	orrs	r3, r3, r0, lsr #31
   16280:	beq	1629c <__assert_fail@plt+0x4dc0>
   16284:	mov	r0, r4
   16288:	ldrd	r4, [sp]
   1628c:	ldrd	r6, [sp, #8]
   16290:	ldr	r8, [sp, #16]
   16294:	add	sp, sp, #20
   16298:	pop	{pc}		; (ldr pc, [sp], #4)
   1629c:	mov	r1, r5
   162a0:	bl	1123c <dup2@plt>
   162a4:	mov	r7, r0
   162a8:	bl	113a4 <__errno_location@plt>
   162ac:	mov	r5, r0
   162b0:	mov	r0, r4
   162b4:	ldr	r6, [r5]
   162b8:	mov	r4, r7
   162bc:	bl	114b8 <close@plt>
   162c0:	str	r6, [r5]
   162c4:	b	16284 <__assert_fail@plt+0x4da8>
   162c8:	str	r4, [sp, #-8]!
   162cc:	subs	r4, r0, #0
   162d0:	str	lr, [sp, #4]
   162d4:	sub	sp, sp, #8
   162d8:	beq	162f4 <__assert_fail@plt+0x4e18>
   162dc:	bl	1132c <__freading@plt>
   162e0:	cmp	r0, #0
   162e4:	beq	162f4 <__assert_fail@plt+0x4e18>
   162e8:	ldr	r3, [r4]
   162ec:	tst	r3, #256	; 0x100
   162f0:	bne	1630c <__assert_fail@plt+0x4e30>
   162f4:	mov	r0, r4
   162f8:	add	sp, sp, #8
   162fc:	ldr	r4, [sp]
   16300:	ldr	lr, [sp, #4]
   16304:	add	sp, sp, #8
   16308:	b	111a0 <fflush@plt>
   1630c:	mov	r1, #1
   16310:	mov	r2, #0
   16314:	mov	r3, #0
   16318:	mov	r0, r4
   1631c:	str	r1, [sp]
   16320:	bl	16328 <__assert_fail@plt+0x4e4c>
   16324:	b	162f4 <__assert_fail@plt+0x4e18>
   16328:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1632c:	mov	r4, r0
   16330:	ldr	ip, [r0, #4]
   16334:	strd	r6, [sp, #8]
   16338:	str	lr, [sp, #20]
   1633c:	ldr	lr, [r0, #8]
   16340:	str	r8, [sp, #16]
   16344:	sub	sp, sp, #8
   16348:	ldr	r5, [sp, #32]
   1634c:	cmp	lr, ip
   16350:	beq	16378 <__assert_fail@plt+0x4e9c>
   16354:	mov	r0, r4
   16358:	str	r5, [sp, #32]
   1635c:	add	sp, sp, #8
   16360:	ldrd	r4, [sp]
   16364:	ldrd	r6, [sp, #8]
   16368:	ldr	r8, [sp, #16]
   1636c:	ldr	lr, [sp, #20]
   16370:	add	sp, sp, #24
   16374:	b	1141c <fseeko64@plt>
   16378:	ldr	ip, [r0, #16]
   1637c:	ldr	lr, [r0, #20]
   16380:	cmp	lr, ip
   16384:	bne	16354 <__assert_fail@plt+0x4e78>
   16388:	ldr	r8, [r0, #36]	; 0x24
   1638c:	cmp	r8, #0
   16390:	bne	16354 <__assert_fail@plt+0x4e78>
   16394:	mov	r6, r2
   16398:	mov	r7, r3
   1639c:	bl	113f8 <fileno@plt>
   163a0:	mov	r2, r6
   163a4:	mov	r3, r7
   163a8:	str	r5, [sp]
   163ac:	bl	112a8 <lseek64@plt>
   163b0:	mvn	r3, #0
   163b4:	mvn	r2, #0
   163b8:	cmp	r1, r3
   163bc:	cmpeq	r0, r2
   163c0:	beq	163f0 <__assert_fail@plt+0x4f14>
   163c4:	ldr	r3, [r4]
   163c8:	strd	r0, [r4, #80]	; 0x50
   163cc:	bic	r3, r3, #16
   163d0:	str	r3, [r4]
   163d4:	mov	r0, r8
   163d8:	add	sp, sp, #8
   163dc:	ldrd	r4, [sp]
   163e0:	ldrd	r6, [sp, #8]
   163e4:	ldr	r8, [sp, #16]
   163e8:	add	sp, sp, #20
   163ec:	pop	{pc}		; (ldr pc, [sp], #4)
   163f0:	mvn	r8, #0
   163f4:	b	163d4 <__assert_fail@plt+0x4ef8>
   163f8:	push	{lr}		; (str lr, [sp, #-4]!)
   163fc:	sub	sp, sp, #12
   16400:	mov	r0, #1
   16404:	mov	r1, sp
   16408:	bl	111d0 <clock_gettime@plt>
   1640c:	cmp	r0, #0
   16410:	beq	1641c <__assert_fail@plt+0x4f40>
   16414:	mov	r0, sp
   16418:	bl	1643c <__assert_fail@plt+0x4f60>
   1641c:	ldr	r2, [sp]
   16420:	mov	r3, #51712	; 0xca00
   16424:	movt	r3, #15258	; 0x3b9a
   16428:	ldr	r0, [sp, #4]
   1642c:	asr	r1, r0, #31
   16430:	smlal	r0, r1, r3, r2
   16434:	add	sp, sp, #12
   16438:	pop	{pc}		; (ldr pc, [sp], #4)
   1643c:	mov	r1, r0
   16440:	mov	r0, #0
   16444:	b	111d0 <clock_gettime@plt>
   16448:	str	r4, [sp, #-8]!
   1644c:	mov	r4, r0
   16450:	mov	r0, #0
   16454:	str	lr, [sp, #4]
   16458:	sub	sp, sp, #8
   1645c:	mov	r1, sp
   16460:	bl	111d0 <clock_gettime@plt>
   16464:	ldrd	r2, [sp]
   16468:	mov	r0, r4
   1646c:	strd	r2, [r4]
   16470:	add	sp, sp, #8
   16474:	ldr	r4, [sp]
   16478:	add	sp, sp, #4
   1647c:	pop	{pc}		; (ldr pc, [sp], #4)
   16480:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16484:	strd	r6, [sp, #8]
   16488:	mov	r6, r3
   1648c:	ands	r3, r3, #32
   16490:	strd	r8, [sp, #16]
   16494:	mov	r9, r1
   16498:	moveq	r1, #1000	; 0x3e8
   1649c:	strd	sl, [sp, #24]
   164a0:	movne	r1, #1024	; 0x400
   164a4:	mov	r8, r0
   164a8:	str	lr, [sp, #32]
   164ac:	vpush	{d8-d9}
   164b0:	sub	sp, sp, #108	; 0x6c
   164b4:	str	r2, [sp, #12]
   164b8:	moveq	r2, #1000	; 0x3e8
   164bc:	movne	r2, #1024	; 0x400
   164c0:	str	r3, [sp, #40]	; 0x28
   164c4:	and	r3, r6, #3
   164c8:	str	r1, [sp, #16]
   164cc:	str	r3, [sp, #32]
   164d0:	mov	r3, #0
   164d4:	strd	r2, [sp, #24]
   164d8:	str	r1, [sp, #36]	; 0x24
   164dc:	bl	11470 <localeconv@plt>
   164e0:	ldr	r3, [sp, #12]
   164e4:	mov	r4, r0
   164e8:	add	r2, r3, #644	; 0x284
   164ec:	ldr	r3, [r0]
   164f0:	add	r2, r2, #3
   164f4:	str	r2, [sp, #32]
   164f8:	mov	r0, r3
   164fc:	mov	r5, r3
   16500:	bl	11380 <strlen@plt>
   16504:	ldmib	r4, {r7, sl}
   16508:	sub	r2, r0, #1
   1650c:	movw	r3, #64048	; 0xfa30
   16510:	movt	r3, #1
   16514:	cmp	r2, #16
   16518:	movcc	r3, r5
   1651c:	mov	fp, r0
   16520:	movcs	fp, #1
   16524:	str	r3, [sp, #44]	; 0x2c
   16528:	mov	r0, r7
   1652c:	bl	11380 <strlen@plt>
   16530:	cmp	r0, #16
   16534:	movw	r3, #62008	; 0xf238
   16538:	movt	r3, #1
   1653c:	ldrd	r0, [sp, #160]	; 0xa0
   16540:	movhi	r7, r3
   16544:	ldrd	r2, [sp, #168]	; 0xa8
   16548:	cmp	r3, r1
   1654c:	cmpeq	r2, r0
   16550:	bhi	16868 <__assert_fail@plt+0x538c>
   16554:	bl	1dce0 <__assert_fail@plt+0xc804>
   16558:	orrs	r3, r2, r3
   1655c:	bne	16590 <__assert_fail@plt+0x50b4>
   16560:	mul	ip, r0, r9
   16564:	mov	r3, r1
   16568:	mov	r2, r0
   1656c:	umull	r4, r5, r0, r8
   16570:	mla	r1, r8, r1, ip
   16574:	mov	r0, r4
   16578:	add	r5, r1, r5
   1657c:	mov	r1, r5
   16580:	bl	1dce0 <__assert_fail@plt+0xc804>
   16584:	cmp	r1, r9
   16588:	cmpeq	r0, r8
   1658c:	beq	16e68 <__assert_fail@plt+0x598c>
   16590:	ldrd	r0, [sp, #160]	; 0xa0
   16594:	bl	1db98 <__assert_fail@plt+0xc6bc>
   16598:	vmov	d9, r0, r1
   1659c:	ldrd	r0, [sp, #168]	; 0xa8
   165a0:	bl	1db98 <__assert_fail@plt+0xc6bc>
   165a4:	vmov	d7, r0, r1
   165a8:	mov	r0, r8
   165ac:	mov	r1, r9
   165b0:	vdiv.f64	d8, d9, d7
   165b4:	bl	1db98 <__assert_fail@plt+0xc6bc>
   165b8:	vmov	d7, r0, r1
   165bc:	tst	r6, #16
   165c0:	vmul.f64	d8, d8, d7
   165c4:	beq	16790 <__assert_fail@plt+0x52b4>
   165c8:	vldr	s15, [sp, #16]
   165cc:	vcvt.f64.s32	d7, s15
   165d0:	vmul.f64	d6, d7, d7
   165d4:	vcmpe.f64	d8, d6
   165d8:	vmrs	APSR_nzcv, fpscr
   165dc:	blt	170c4 <__assert_fail@plt+0x5be8>
   165e0:	vmul.f64	d5, d7, d6
   165e4:	vcmpe.f64	d8, d5
   165e8:	vmrs	APSR_nzcv, fpscr
   165ec:	blt	170d0 <__assert_fail@plt+0x5bf4>
   165f0:	vmul.f64	d6, d7, d5
   165f4:	vcmpe.f64	d8, d6
   165f8:	vmrs	APSR_nzcv, fpscr
   165fc:	blt	170e0 <__assert_fail@plt+0x5c04>
   16600:	vmul.f64	d5, d7, d6
   16604:	vcmpe.f64	d8, d5
   16608:	vmrs	APSR_nzcv, fpscr
   1660c:	blt	17104 <__assert_fail@plt+0x5c28>
   16610:	vmul.f64	d6, d7, d5
   16614:	vcmpe.f64	d8, d6
   16618:	vmrs	APSR_nzcv, fpscr
   1661c:	blt	17114 <__assert_fail@plt+0x5c38>
   16620:	vmul.f64	d5, d7, d6
   16624:	vcmpe.f64	d8, d5
   16628:	vmrs	APSR_nzcv, fpscr
   1662c:	blt	17124 <__assert_fail@plt+0x5c48>
   16630:	vmul.f64	d7, d7, d5
   16634:	vcmpe.f64	d8, d7
   16638:	vmrs	APSR_nzcv, fpscr
   1663c:	movlt	r3, #7
   16640:	vmovlt.f64	d7, d5
   16644:	strlt	r3, [sp, #16]
   16648:	blt	16654 <__assert_fail@plt+0x5178>
   1664c:	mov	r3, #8
   16650:	str	r3, [sp, #16]
   16654:	ands	r3, r6, #32
   16658:	and	r9, r6, #3
   1665c:	vdiv.f64	d9, d8, d7
   16660:	clz	r4, r3
   16664:	add	fp, fp, #1
   16668:	lsr	r4, r4, #5
   1666c:	cmp	r9, #1
   16670:	add	r4, r4, #1
   16674:	add	r4, r4, fp
   16678:	beq	16f20 <__assert_fail@plt+0x5a44>
   1667c:	vldr	d7, [pc, #468]	; 16858 <__assert_fail@plt+0x537c>
   16680:	vcmpe.f64	d9, d7
   16684:	vmrs	APSR_nzcv, fpscr
   16688:	vmovpl.f64	d7, d9
   1668c:	bpl	166cc <__assert_fail@plt+0x51f0>
   16690:	vmov	r0, r1, d9
   16694:	bl	1dd30 <__assert_fail@plt+0xc854>
   16698:	mov	r5, r0
   1669c:	mov	r8, r1
   166a0:	bl	1db98 <__assert_fail@plt+0xc6bc>
   166a4:	cmp	r9, #0
   166a8:	vmov	d7, r0, r1
   166ac:	bne	166cc <__assert_fail@plt+0x51f0>
   166b0:	vcmp.f64	d9, d7
   166b4:	vmrs	APSR_nzcv, fpscr
   166b8:	beq	166cc <__assert_fail@plt+0x51f0>
   166bc:	adds	r0, r5, #1
   166c0:	adc	r1, r8, #0
   166c4:	bl	1db98 <__assert_fail@plt+0xc6bc>
   166c8:	vmov	d7, r0, r1
   166cc:	ldr	r5, [sp, #12]
   166d0:	mvn	r2, #0
   166d4:	mov	r1, #1
   166d8:	movw	r3, #64060	; 0xfa3c
   166dc:	movt	r3, #1
   166e0:	vstr	d7, [sp]
   166e4:	mov	r0, r5
   166e8:	bl	113b0 <__sprintf_chk@plt>
   166ec:	mov	r0, r5
   166f0:	bl	11380 <strlen@plt>
   166f4:	cmp	r0, r4
   166f8:	bls	16e00 <__assert_fail@plt+0x5924>
   166fc:	vldr	d7, [pc, #348]	; 16860 <__assert_fail@plt+0x5384>
   16700:	vmul.f64	d9, d9, d7
   16704:	vldr	d7, [pc, #332]	; 16858 <__assert_fail@plt+0x537c>
   16708:	vcmpe.f64	d9, d7
   1670c:	vmrs	APSR_nzcv, fpscr
   16710:	bpl	16758 <__assert_fail@plt+0x527c>
   16714:	vmov	r0, r1, d9
   16718:	bl	1dd30 <__assert_fail@plt+0xc854>
   1671c:	mov	r4, r0
   16720:	mov	r5, r1
   16724:	bl	1db98 <__assert_fail@plt+0xc6bc>
   16728:	and	r3, r6, #3
   1672c:	vmov	d7, r0, r1
   16730:	cmp	r3, #0
   16734:	bne	16754 <__assert_fail@plt+0x5278>
   16738:	vcmp.f64	d9, d7
   1673c:	vmrs	APSR_nzcv, fpscr
   16740:	beq	16754 <__assert_fail@plt+0x5278>
   16744:	adds	r0, r4, #1
   16748:	adc	r1, r5, #0
   1674c:	bl	1db98 <__assert_fail@plt+0xc6bc>
   16750:	vmov	d7, r0, r1
   16754:	vmov.f64	d9, d7
   16758:	vldr	d6, [pc, #256]	; 16860 <__assert_fail@plt+0x5384>
   1675c:	mvn	r2, #0
   16760:	mov	r1, #1
   16764:	movw	r3, #64052	; 0xfa34
   16768:	movt	r3, #1
   1676c:	ldr	r4, [sp, #12]
   16770:	vdiv.f64	d7, d9, d6
   16774:	mov	r0, r4
   16778:	vstr	d7, [sp]
   1677c:	bl	113b0 <__sprintf_chk@plt>
   16780:	mov	r0, r4
   16784:	bl	11380 <strlen@plt>
   16788:	mov	r9, r0
   1678c:	b	167dc <__assert_fail@plt+0x5300>
   16790:	and	r8, r6, #3
   16794:	cmp	r8, #1
   16798:	beq	167ac <__assert_fail@plt+0x52d0>
   1679c:	vldr	d7, [pc, #180]	; 16858 <__assert_fail@plt+0x537c>
   167a0:	vcmpe.f64	d8, d7
   167a4:	vmrs	APSR_nzcv, fpscr
   167a8:	bmi	16e24 <__assert_fail@plt+0x5948>
   167ac:	ldr	r4, [sp, #12]
   167b0:	mvn	r2, #0
   167b4:	mov	r1, #1
   167b8:	movw	r3, #64052	; 0xfa34
   167bc:	movt	r3, #1
   167c0:	vstr	d8, [sp]
   167c4:	str	r2, [sp, #16]
   167c8:	mov	r0, r4
   167cc:	bl	113b0 <__sprintf_chk@plt>
   167d0:	mov	r0, r4
   167d4:	bl	11380 <strlen@plt>
   167d8:	mov	r9, r0
   167dc:	mov	r2, r0
   167e0:	ldr	r1, [sp, #12]
   167e4:	ldr	r3, [sp, #32]
   167e8:	sub	r8, r3, r0
   167ec:	mov	r0, r8
   167f0:	add	r9, r8, r9
   167f4:	bl	111b8 <memmove@plt>
   167f8:	tst	r6, #4
   167fc:	bne	16bf4 <__assert_fail@plt+0x5718>
   16800:	tst	r6, #128	; 0x80
   16804:	beq	16824 <__assert_fail@plt+0x5348>
   16808:	ldr	r3, [sp, #16]
   1680c:	cmn	r3, #1
   16810:	beq	16c94 <__assert_fail@plt+0x57b8>
   16814:	ldr	r2, [sp, #16]
   16818:	and	r3, r6, #256	; 0x100
   1681c:	orrs	r2, r3, r2
   16820:	bne	16f98 <__assert_fail@plt+0x5abc>
   16824:	ldr	r2, [sp, #32]
   16828:	mov	r3, #0
   1682c:	mov	r0, r8
   16830:	strb	r3, [r2]
   16834:	add	sp, sp, #108	; 0x6c
   16838:	vpop	{d8-d9}
   1683c:	ldrd	r4, [sp]
   16840:	ldrd	r6, [sp, #8]
   16844:	ldrd	r8, [sp, #16]
   16848:	ldrd	sl, [sp, #24]
   1684c:	add	sp, sp, #32
   16850:	pop	{pc}		; (ldr pc, [sp], #4)
   16854:	nop	{0}
   16858:	andeq	r0, r0, r0
   1685c:	mvnsmi	r0, #0
   16860:	andeq	r0, r0, r0
   16864:	eormi	r0, r4, r0
   16868:	mov	r2, r0
   1686c:	mov	r3, r1
   16870:	orrs	r3, r2, r3
   16874:	beq	16590 <__assert_fail@plt+0x50b4>
   16878:	ldrd	r2, [sp, #160]	; 0xa0
   1687c:	ldrd	r0, [sp, #168]	; 0xa8
   16880:	bl	1dce0 <__assert_fail@plt+0xc804>
   16884:	orrs	r3, r2, r3
   16888:	mov	r4, r0
   1688c:	mov	r5, r1
   16890:	bne	16590 <__assert_fail@plt+0x50b4>
   16894:	mov	r0, r8
   16898:	mov	r1, r9
   1689c:	mov	r2, r4
   168a0:	mov	r3, r5
   168a4:	bl	1dce0 <__assert_fail@plt+0xc804>
   168a8:	mov	lr, r2
   168ac:	mov	r8, r1
   168b0:	lsl	r1, r3, #2
   168b4:	mov	r9, r0
   168b8:	lsl	r0, lr, #2
   168bc:	mov	ip, r3
   168c0:	orr	r1, r1, lr, lsr #30
   168c4:	mov	r2, r4
   168c8:	mov	r3, r5
   168cc:	adds	r0, r0, lr
   168d0:	strd	r4, [sp, #16]
   168d4:	mov	r4, r9
   168d8:	adc	r1, r1, ip
   168dc:	adds	r0, r0, r0
   168e0:	adc	r1, r1, r1
   168e4:	mov	r5, r8
   168e8:	bl	1dce0 <__assert_fail@plt+0xc804>
   168ec:	adds	r1, r2, r2
   168f0:	adc	r3, r3, r3
   168f4:	str	r1, [sp, #48]	; 0x30
   168f8:	str	r3, [sp, #52]	; 0x34
   168fc:	ldrd	r2, [sp, #16]
   16900:	ldrd	r8, [sp, #48]	; 0x30
   16904:	str	r0, [sp, #48]	; 0x30
   16908:	cmp	r3, r9
   1690c:	cmpeq	r2, r8
   16910:	bls	16f8c <__assert_fail@plt+0x5ab0>
   16914:	mov	r3, r8
   16918:	orrs	r3, r3, r9
   1691c:	movne	r8, #1
   16920:	moveq	r8, #0
   16924:	ands	r3, r6, #16
   16928:	str	r3, [sp, #16]
   1692c:	beq	16e7c <__assert_fail@plt+0x59a0>
   16930:	ldrd	r2, [sp, #24]
   16934:	cmp	r5, r3
   16938:	cmpeq	r4, r2
   1693c:	bcc	16fe4 <__assert_fail@plt+0x5b08>
   16940:	mov	r0, r4
   16944:	mov	r1, r5
   16948:	bl	1dce0 <__assert_fail@plt+0xc804>
   1694c:	ldr	ip, [sp, #48]	; 0x30
   16950:	add	r2, r2, r2, lsl #2
   16954:	mov	r4, r0
   16958:	asr	r3, r8, #1
   1695c:	mov	r5, r1
   16960:	add	r2, ip, r2, lsl #1
   16964:	ldr	ip, [sp, #36]	; 0x24
   16968:	udiv	r9, r2, ip
   1696c:	mls	r2, ip, r9, r2
   16970:	str	r9, [sp, #48]	; 0x30
   16974:	add	r2, r3, r2, lsl #1
   16978:	cmp	ip, r2
   1697c:	add	r2, r8, r2
   16980:	bhi	1701c <__assert_fail@plt+0x5b40>
   16984:	cmp	ip, r2
   16988:	mov	ip, #1
   1698c:	movcc	r8, #3
   16990:	movcs	r8, #2
   16994:	ldrd	r2, [sp, #24]
   16998:	cmp	r1, r3
   1699c:	cmpeq	r0, r2
   169a0:	bcc	17268 <__assert_fail@plt+0x5d8c>
   169a4:	bl	1dce0 <__assert_fail@plt+0xc804>
   169a8:	add	r2, r2, r2, lsl #2
   169ac:	ldr	ip, [sp, #36]	; 0x24
   169b0:	mov	r4, r0
   169b4:	asr	r3, r8, #1
   169b8:	mov	r5, r1
   169bc:	add	r2, r9, r2, lsl #1
   169c0:	udiv	r9, r2, ip
   169c4:	mls	r2, ip, r9, r2
   169c8:	str	r9, [sp, #48]	; 0x30
   169cc:	add	r3, r3, r2, lsl #1
   169d0:	cmp	ip, r3
   169d4:	add	r3, r8, r3
   169d8:	bhi	1705c <__assert_fail@plt+0x5b80>
   169dc:	cmp	ip, r3
   169e0:	mov	ip, #1
   169e4:	movcc	r8, #3
   169e8:	movcs	r8, #2
   169ec:	ldrd	r2, [sp, #24]
   169f0:	cmp	r1, r3
   169f4:	cmpeq	r0, r2
   169f8:	bcc	17280 <__assert_fail@plt+0x5da4>
   169fc:	bl	1dce0 <__assert_fail@plt+0xc804>
   16a00:	add	r2, r2, r2, lsl #2
   16a04:	mov	r4, r0
   16a08:	mov	r5, r1
   16a0c:	asr	r3, r8, #1
   16a10:	add	r9, r9, r2, lsl #1
   16a14:	ldr	r2, [sp, #36]	; 0x24
   16a18:	udiv	ip, r9, r2
   16a1c:	mls	r9, r2, ip, r9
   16a20:	str	ip, [sp, #16]
   16a24:	str	ip, [sp, #48]	; 0x30
   16a28:	add	r3, r3, r9, lsl #1
   16a2c:	cmp	r2, r3
   16a30:	add	r3, r8, r3
   16a34:	bhi	1706c <__assert_fail@plt+0x5b90>
   16a38:	cmp	r2, r3
   16a3c:	mov	ip, #1
   16a40:	movcc	r8, #3
   16a44:	movcs	r8, #2
   16a48:	ldrd	r2, [sp, #24]
   16a4c:	cmp	r1, r3
   16a50:	cmpeq	r0, r2
   16a54:	bcc	17274 <__assert_fail@plt+0x5d98>
   16a58:	bl	1dce0 <__assert_fail@plt+0xc804>
   16a5c:	ldr	ip, [sp, #16]
   16a60:	add	r2, r2, r2, lsl #2
   16a64:	mov	r4, r0
   16a68:	asr	r3, r8, #1
   16a6c:	mov	r5, r1
   16a70:	add	r2, ip, r2, lsl #1
   16a74:	ldr	ip, [sp, #36]	; 0x24
   16a78:	udiv	r9, r2, ip
   16a7c:	mls	r2, ip, r9, r2
   16a80:	str	r9, [sp, #48]	; 0x30
   16a84:	add	r3, r3, r2, lsl #1
   16a88:	cmp	ip, r3
   16a8c:	add	r3, r8, r3
   16a90:	bhi	17094 <__assert_fail@plt+0x5bb8>
   16a94:	cmp	r3, ip
   16a98:	mov	ip, #1
   16a9c:	movhi	r8, #3
   16aa0:	movls	r8, #2
   16aa4:	ldrd	r2, [sp, #24]
   16aa8:	cmp	r1, r3
   16aac:	cmpeq	r0, r2
   16ab0:	bcc	1728c <__assert_fail@plt+0x5db0>
   16ab4:	bl	1dce0 <__assert_fail@plt+0xc804>
   16ab8:	add	r2, r2, r2, lsl #2
   16abc:	mov	r4, r0
   16ac0:	mov	r5, r1
   16ac4:	asr	r3, r8, #1
   16ac8:	add	r9, r9, r2, lsl #1
   16acc:	ldr	r2, [sp, #36]	; 0x24
   16ad0:	udiv	ip, r9, r2
   16ad4:	mls	r9, r2, ip, r9
   16ad8:	str	ip, [sp, #16]
   16adc:	str	ip, [sp, #48]	; 0x30
   16ae0:	add	r3, r3, r9, lsl #1
   16ae4:	cmp	r2, r3
   16ae8:	add	r3, r8, r3
   16aec:	bhi	170a4 <__assert_fail@plt+0x5bc8>
   16af0:	cmp	r2, r3
   16af4:	mov	ip, #1
   16af8:	movcc	r8, #3
   16afc:	movcs	r8, #2
   16b00:	ldrd	r2, [sp, #24]
   16b04:	cmp	r1, r3
   16b08:	cmpeq	r0, r2
   16b0c:	bcc	172a4 <__assert_fail@plt+0x5dc8>
   16b10:	bl	1dce0 <__assert_fail@plt+0xc804>
   16b14:	mov	r5, r1
   16b18:	ldr	r1, [sp, #16]
   16b1c:	add	r2, r2, r2, lsl #2
   16b20:	mov	r4, r0
   16b24:	asr	r3, r8, #1
   16b28:	ldr	r0, [sp, #36]	; 0x24
   16b2c:	add	r1, r1, r2, lsl #1
   16b30:	udiv	r2, r1, r0
   16b34:	mls	r1, r0, r2, r1
   16b38:	str	r2, [sp, #48]	; 0x30
   16b3c:	add	r3, r3, r1, lsl #1
   16b40:	cmp	r0, r3
   16b44:	add	r3, r8, r3
   16b48:	bhi	170b4 <__assert_fail@plt+0x5bd8>
   16b4c:	cmp	r0, r3
   16b50:	mov	ip, #1
   16b54:	movcs	r8, #2
   16b58:	movcc	r8, #3
   16b5c:	mov	r3, #6
   16b60:	str	r3, [sp, #16]
   16b64:	cmp	r5, #0
   16b68:	cmpeq	r4, #9
   16b6c:	bhi	16e84 <__assert_fail@plt+0x59a8>
   16b70:	and	r3, r6, #3
   16b74:	cmp	r3, #1
   16b78:	beq	17134 <__assert_fail@plt+0x5c58>
   16b7c:	and	r3, r6, #3
   16b80:	cmp	r3, #0
   16b84:	moveq	r3, ip
   16b88:	movne	r3, #0
   16b8c:	cmp	r3, #0
   16b90:	ldr	r3, [sp, #48]	; 0x30
   16b94:	bne	170f0 <__assert_fail@plt+0x5c14>
   16b98:	cmp	r3, #0
   16b9c:	addne	r3, r3, #48	; 0x30
   16ba0:	uxtbne	r3, r3
   16ba4:	bne	16bb4 <__assert_fail@plt+0x56d8>
   16ba8:	tst	r6, #8
   16bac:	bne	1723c <__assert_fail@plt+0x5d60>
   16bb0:	mov	r3, #48	; 0x30
   16bb4:	ldr	r1, [sp, #12]
   16bb8:	mov	r2, fp
   16bbc:	mov	r8, #0
   16bc0:	add	r9, r1, #644	; 0x284
   16bc4:	strb	r3, [r1, #646]	; 0x286
   16bc8:	add	r9, r9, #2
   16bcc:	ldr	r1, [sp, #44]	; 0x2c
   16bd0:	sub	r9, r9, fp
   16bd4:	mov	r0, r9
   16bd8:	bl	111e8 <memcpy@plt>
   16bdc:	and	r3, r6, #3
   16be0:	cmp	r3, #1
   16be4:	beq	16ed4 <__assert_fail@plt+0x59f8>
   16be8:	mov	r3, #0
   16bec:	str	r3, [sp, #48]	; 0x30
   16bf0:	b	16e94 <__assert_fail@plt+0x59b8>
   16bf4:	mov	r0, r7
   16bf8:	sub	r4, r9, r8
   16bfc:	bl	11380 <strlen@plt>
   16c00:	mov	fp, r0
   16c04:	mov	r1, r8
   16c08:	mov	r2, r4
   16c0c:	add	r0, sp, #60	; 0x3c
   16c10:	mov	r3, #41	; 0x29
   16c14:	mvn	r5, #0
   16c18:	bl	11290 <__memcpy_chk@plt>
   16c1c:	ldrb	r3, [sl]
   16c20:	cmp	r3, #0
   16c24:	beq	16c38 <__assert_fail@plt+0x575c>
   16c28:	cmp	r3, #255	; 0xff
   16c2c:	add	sl, sl, #1
   16c30:	movne	r5, r3
   16c34:	moveq	r5, r4
   16c38:	sub	r8, r9, r5
   16c3c:	cmp	r5, r4
   16c40:	mov	r2, r5
   16c44:	mov	r0, r8
   16c48:	bls	16c64 <__assert_fail@plt+0x5788>
   16c4c:	sub	r8, r9, r4
   16c50:	mov	r2, r4
   16c54:	add	r1, sp, #60	; 0x3c
   16c58:	mov	r0, r8
   16c5c:	bl	111e8 <memcpy@plt>
   16c60:	b	16800 <__assert_fail@plt+0x5324>
   16c64:	sub	r4, r4, r5
   16c68:	add	r3, sp, #60	; 0x3c
   16c6c:	add	r1, r3, r4
   16c70:	sub	r9, r8, fp
   16c74:	bl	111e8 <memcpy@plt>
   16c78:	cmp	r4, #0
   16c7c:	mov	r2, fp
   16c80:	mov	r1, r7
   16c84:	mov	r0, r9
   16c88:	beq	16800 <__assert_fail@plt+0x5324>
   16c8c:	bl	111e8 <memcpy@plt>
   16c90:	b	16c1c <__assert_fail@plt+0x5740>
   16c94:	ldrd	r2, [sp, #168]	; 0xa8
   16c98:	cmp	r3, #0
   16c9c:	cmpeq	r2, #1
   16ca0:	bls	17050 <__assert_fail@plt+0x5b74>
   16ca4:	mov	r0, r2
   16ca8:	mov	r1, r3
   16cac:	ldrd	r2, [sp, #24]
   16cb0:	cmp	r1, r3
   16cb4:	cmpeq	r0, r2
   16cb8:	bls	172e4 <__assert_fail@plt+0x5e08>
   16cbc:	mul	r1, r2, r3
   16cc0:	mov	r4, r2
   16cc4:	mov	r5, r3
   16cc8:	umull	sl, fp, r2, r2
   16ccc:	add	fp, fp, r1, lsl #1
   16cd0:	ldrd	r0, [sp, #168]	; 0xa8
   16cd4:	cmp	r1, fp
   16cd8:	cmpeq	r0, sl
   16cdc:	bls	17150 <__assert_fail@plt+0x5c74>
   16ce0:	mul	r3, r2, fp
   16ce4:	umull	r0, r1, r4, sl
   16ce8:	mla	r2, sl, r5, r3
   16cec:	strd	r0, [sp, #16]
   16cf0:	add	r3, r2, r1
   16cf4:	str	r3, [sp, #20]
   16cf8:	ldrd	sl, [sp, #16]
   16cfc:	ldrd	r2, [sp, #168]	; 0xa8
   16d00:	cmp	r3, fp
   16d04:	cmpeq	r2, sl
   16d08:	bls	17184 <__assert_fail@plt+0x5ca8>
   16d0c:	ldr	r2, [sp, #16]
   16d10:	mul	r1, r4, fp
   16d14:	umull	sl, fp, r4, sl
   16d18:	mla	r0, r2, r5, r1
   16d1c:	ldrd	r2, [sp, #168]	; 0xa8
   16d20:	add	fp, r0, fp
   16d24:	cmp	r3, fp
   16d28:	cmpeq	r2, sl
   16d2c:	bls	172b0 <__assert_fail@plt+0x5dd4>
   16d30:	mul	r3, r4, fp
   16d34:	umull	r0, r1, r4, sl
   16d38:	mla	r2, sl, r5, r3
   16d3c:	add	r1, r2, r1
   16d40:	ldrd	r2, [sp, #168]	; 0xa8
   16d44:	cmp	r3, r1
   16d48:	cmpeq	r2, r0
   16d4c:	bls	171b8 <__assert_fail@plt+0x5cdc>
   16d50:	mul	ip, r0, r5
   16d54:	mov	lr, r4
   16d58:	umull	r2, r3, r0, r4
   16d5c:	mla	r1, r4, r1, ip
   16d60:	add	r3, r1, r3
   16d64:	ldrd	r0, [sp, #168]	; 0xa8
   16d68:	cmp	r1, r3
   16d6c:	cmpeq	r0, r2
   16d70:	bls	171ec <__assert_fail@plt+0x5d10>
   16d74:	mul	ip, r2, r5
   16d78:	umull	r0, r1, r2, r4
   16d7c:	mla	r3, r4, r3, ip
   16d80:	add	r1, r3, r1
   16d84:	ldrd	r2, [sp, #168]	; 0xa8
   16d88:	cmp	r3, r1
   16d8c:	cmpeq	r2, r0
   16d90:	bls	17330 <__assert_fail@plt+0x5e54>
   16d94:	tst	r6, #64	; 0x40
   16d98:	and	r3, r6, #256	; 0x100
   16d9c:	beq	16db4 <__assert_fail@plt+0x58d8>
   16da0:	ldr	r1, [sp, #12]
   16da4:	mov	r2, #32
   16da8:	add	r0, r1, #648	; 0x288
   16dac:	strb	r2, [r1, #647]	; 0x287
   16db0:	str	r0, [sp, #32]
   16db4:	mov	r2, #8
   16db8:	str	r2, [sp, #16]
   16dbc:	ldr	r2, [sp, #40]	; 0x28
   16dc0:	adds	r1, r2, #0
   16dc4:	movne	r1, #1
   16dc8:	ldr	r0, [sp, #16]
   16dcc:	movw	r2, #64016	; 0xfa10
   16dd0:	movt	r2, #1
   16dd4:	cmp	r3, #0
   16dd8:	ldrb	r0, [r2, r0]
   16ddc:	ldr	r2, [sp, #32]
   16de0:	strb	r0, [r2], #1
   16de4:	beq	16fdc <__assert_fail@plt+0x5b00>
   16de8:	cmp	r1, #0
   16dec:	bne	16ff0 <__assert_fail@plt+0x5b14>
   16df0:	mov	r3, #66	; 0x42
   16df4:	strb	r3, [r2], #1
   16df8:	str	r2, [sp, #32]
   16dfc:	b	16824 <__assert_fail@plt+0x5348>
   16e00:	tst	r6, #8
   16e04:	beq	16e1c <__assert_fail@plt+0x5940>
   16e08:	ldr	r3, [sp, #12]
   16e0c:	add	r3, r3, r0
   16e10:	ldrb	r3, [r3, #-1]
   16e14:	cmp	r3, #48	; 0x30
   16e18:	beq	1707c <__assert_fail@plt+0x5ba0>
   16e1c:	sub	r9, r0, fp
   16e20:	b	167dc <__assert_fail@plt+0x5300>
   16e24:	vmov	r0, r1, d8
   16e28:	bl	1dd30 <__assert_fail@plt+0xc854>
   16e2c:	mov	r4, r0
   16e30:	mov	r5, r1
   16e34:	bl	1db98 <__assert_fail@plt+0xc6bc>
   16e38:	cmp	r8, #0
   16e3c:	vmov	d7, r0, r1
   16e40:	bne	16e60 <__assert_fail@plt+0x5984>
   16e44:	vcmp.f64	d8, d7
   16e48:	vmrs	APSR_nzcv, fpscr
   16e4c:	beq	16e60 <__assert_fail@plt+0x5984>
   16e50:	adds	r0, r4, #1
   16e54:	adc	r1, r5, #0
   16e58:	bl	1db98 <__assert_fail@plt+0xc6bc>
   16e5c:	vmov	d7, r0, r1
   16e60:	vmov.f64	d8, d7
   16e64:	b	167ac <__assert_fail@plt+0x52d0>
   16e68:	mov	r8, #0
   16e6c:	ands	r3, r6, #16
   16e70:	str	r3, [sp, #16]
   16e74:	str	r8, [sp, #48]	; 0x30
   16e78:	bne	16930 <__assert_fail@plt+0x5454>
   16e7c:	mvn	r3, #0
   16e80:	str	r3, [sp, #16]
   16e84:	and	r3, r6, #3
   16e88:	cmp	r3, #1
   16e8c:	beq	16f5c <__assert_fail@plt+0x5a80>
   16e90:	ldr	r9, [sp, #32]
   16e94:	and	r3, r6, #3
   16e98:	cmp	r3, #0
   16e9c:	bne	16ed4 <__assert_fail@plt+0x59f8>
   16ea0:	ldr	r3, [sp, #48]	; 0x30
   16ea4:	add	r3, r8, r3
   16ea8:	cmp	r3, #0
   16eac:	ble	16ed4 <__assert_fail@plt+0x59f8>
   16eb0:	adds	r4, r4, #1
   16eb4:	adc	r5, r5, #0
   16eb8:	ands	r3, r6, #16
   16ebc:	cmp	r3, #0
   16ec0:	beq	16ed4 <__assert_fail@plt+0x59f8>
   16ec4:	ldrd	r2, [sp, #24]
   16ec8:	cmp	r5, r3
   16ecc:	cmpeq	r4, r2
   16ed0:	beq	1702c <__assert_fail@plt+0x5b50>
   16ed4:	mov	r8, r9
   16ed8:	mov	r0, r4
   16edc:	mov	r1, r5
   16ee0:	mov	r2, #10
   16ee4:	mov	r3, #0
   16ee8:	bl	1dce0 <__assert_fail@plt+0xc804>
   16eec:	add	r2, r2, #48	; 0x30
   16ef0:	mov	r0, r4
   16ef4:	mov	r1, r5
   16ef8:	mov	r3, #0
   16efc:	strb	r2, [r8, #-1]!
   16f00:	mov	r2, #10
   16f04:	bl	1dce0 <__assert_fail@plt+0xc804>
   16f08:	cmp	r5, #0
   16f0c:	mov	r5, r1
   16f10:	cmpeq	r4, #9
   16f14:	mov	r4, r0
   16f18:	bhi	16ed8 <__assert_fail@plt+0x59fc>
   16f1c:	b	167f8 <__assert_fail@plt+0x531c>
   16f20:	ldr	r5, [sp, #12]
   16f24:	mvn	r2, #0
   16f28:	and	r1, r6, #3
   16f2c:	movw	r3, #64060	; 0xfa3c
   16f30:	movt	r3, #1
   16f34:	vstr	d9, [sp]
   16f38:	mov	r0, r5
   16f3c:	bl	113b0 <__sprintf_chk@plt>
   16f40:	mov	r0, r5
   16f44:	bl	11380 <strlen@plt>
   16f48:	cmp	r0, r4
   16f4c:	bls	16e00 <__assert_fail@plt+0x5924>
   16f50:	vldr	d7, [pc, #976]	; 17328 <__assert_fail@plt+0x5e4c>
   16f54:	vmul.f64	d9, d9, d7
   16f58:	b	16758 <__assert_fail@plt+0x527c>
   16f5c:	and	r0, r4, #1
   16f60:	mov	r1, #0
   16f64:	ldr	r9, [sp, #32]
   16f68:	adds	r2, r0, r8
   16f6c:	adc	r3, r1, r8, asr #31
   16f70:	orr	r2, r2, r3
   16f74:	ldr	r3, [sp, #48]	; 0x30
   16f78:	cmp	r2, r1
   16f7c:	addne	r3, r3, #1
   16f80:	cmp	r3, #5
   16f84:	bgt	16eb0 <__assert_fail@plt+0x59d4>
   16f88:	b	16ed4 <__assert_fail@plt+0x59f8>
   16f8c:	movcs	r8, #2
   16f90:	movcc	r8, #3
   16f94:	b	16924 <__assert_fail@plt+0x5448>
   16f98:	tst	r6, #64	; 0x40
   16f9c:	bne	17004 <__assert_fail@plt+0x5b28>
   16fa0:	ldr	r2, [sp, #16]
   16fa4:	cmp	r2, #0
   16fa8:	beq	17318 <__assert_fail@plt+0x5e3c>
   16fac:	ldr	r0, [sp, #16]
   16fb0:	ldr	r2, [sp, #40]	; 0x28
   16fb4:	adds	r1, r2, #0
   16fb8:	movne	r1, #1
   16fbc:	cmp	r2, #0
   16fc0:	cmpeq	r0, #1
   16fc4:	bne	16dc8 <__assert_fail@plt+0x58ec>
   16fc8:	ldr	r2, [sp, #32]
   16fcc:	mov	r1, #107	; 0x6b
   16fd0:	cmp	r3, #0
   16fd4:	strb	r1, [r2], #1
   16fd8:	bne	16df0 <__assert_fail@plt+0x5914>
   16fdc:	str	r2, [sp, #32]
   16fe0:	b	16824 <__assert_fail@plt+0x5348>
   16fe4:	mov	r3, #0
   16fe8:	str	r3, [sp, #16]
   16fec:	b	16e84 <__assert_fail@plt+0x59a8>
   16ff0:	ldr	r1, [sp, #32]
   16ff4:	mov	r3, #105	; 0x69
   16ff8:	add	r2, r1, #2
   16ffc:	strb	r3, [r1, #1]
   17000:	b	16df0 <__assert_fail@plt+0x5914>
   17004:	ldr	r1, [sp, #12]
   17008:	mov	r2, #32
   1700c:	add	r0, r1, #648	; 0x288
   17010:	strb	r2, [r1, #647]	; 0x287
   17014:	str	r0, [sp, #32]
   17018:	b	16fa0 <__assert_fail@plt+0x5ac4>
   1701c:	adds	r8, r2, #0
   17020:	movne	r8, #1
   17024:	mov	ip, r8
   17028:	b	16994 <__assert_fail@plt+0x54b8>
   1702c:	ldr	r3, [sp, #16]
   17030:	tst	r6, #8
   17034:	add	r3, r3, #1
   17038:	str	r3, [sp, #16]
   1703c:	beq	17244 <__assert_fail@plt+0x5d68>
   17040:	mov	r3, #49	; 0x31
   17044:	sub	r8, r9, #1
   17048:	strb	r3, [r9, #-1]
   1704c:	b	167f8 <__assert_fail@plt+0x531c>
   17050:	mov	r3, #0
   17054:	str	r3, [sp, #16]
   17058:	b	16814 <__assert_fail@plt+0x5338>
   1705c:	adds	ip, r3, #0
   17060:	movne	ip, #1
   17064:	mov	r8, ip
   17068:	b	169ec <__assert_fail@plt+0x5510>
   1706c:	adds	ip, r3, #0
   17070:	movne	ip, #1
   17074:	mov	r8, ip
   17078:	b	16a48 <__assert_fail@plt+0x556c>
   1707c:	vldr	d7, [pc, #676]	; 17328 <__assert_fail@plt+0x5e4c>
   17080:	and	r3, r6, #3
   17084:	cmp	r3, #1
   17088:	vmul.f64	d9, d9, d7
   1708c:	bne	16704 <__assert_fail@plt+0x5228>
   17090:	b	16758 <__assert_fail@plt+0x527c>
   17094:	adds	ip, r3, #0
   17098:	movne	ip, #1
   1709c:	mov	r8, ip
   170a0:	b	16aa4 <__assert_fail@plt+0x55c8>
   170a4:	adds	ip, r3, #0
   170a8:	movne	ip, #1
   170ac:	mov	r8, ip
   170b0:	b	16b00 <__assert_fail@plt+0x5624>
   170b4:	adds	ip, r3, #0
   170b8:	movne	ip, #1
   170bc:	mov	r8, ip
   170c0:	b	16b5c <__assert_fail@plt+0x5680>
   170c4:	mov	r3, #1
   170c8:	str	r3, [sp, #16]
   170cc:	b	16654 <__assert_fail@plt+0x5178>
   170d0:	mov	r3, #2
   170d4:	vmov.f64	d7, d6
   170d8:	str	r3, [sp, #16]
   170dc:	b	16654 <__assert_fail@plt+0x5178>
   170e0:	mov	r3, #3
   170e4:	vmov.f64	d7, d5
   170e8:	str	r3, [sp, #16]
   170ec:	b	16654 <__assert_fail@plt+0x5178>
   170f0:	cmp	r3, #9
   170f4:	beq	17220 <__assert_fail@plt+0x5d44>
   170f8:	add	r3, r3, #49	; 0x31
   170fc:	uxtb	r3, r3
   17100:	b	16bb4 <__assert_fail@plt+0x56d8>
   17104:	mov	r3, #4
   17108:	vmov.f64	d7, d6
   1710c:	str	r3, [sp, #16]
   17110:	b	16654 <__assert_fail@plt+0x5178>
   17114:	mov	r3, #5
   17118:	vmov.f64	d7, d5
   1711c:	str	r3, [sp, #16]
   17120:	b	16654 <__assert_fail@plt+0x5178>
   17124:	mov	r3, #6
   17128:	vmov.f64	d7, d6
   1712c:	str	r3, [sp, #16]
   17130:	b	16654 <__assert_fail@plt+0x5178>
   17134:	ldr	r3, [sp, #48]	; 0x30
   17138:	and	r3, r3, #1
   1713c:	add	r3, r3, r8
   17140:	cmp	r3, #2
   17144:	movle	r3, #0
   17148:	movgt	r3, #1
   1714c:	b	16b8c <__assert_fail@plt+0x56b0>
   17150:	tst	r6, #64	; 0x40
   17154:	and	r3, r6, #256	; 0x100
   17158:	moveq	r2, #2
   1715c:	streq	r2, [sp, #16]
   17160:	beq	16dbc <__assert_fail@plt+0x58e0>
   17164:	ldr	r1, [sp, #12]
   17168:	mov	r2, #32
   1716c:	add	r0, r1, #648	; 0x288
   17170:	strb	r2, [r1, #647]	; 0x287
   17174:	mov	r2, #2
   17178:	str	r2, [sp, #16]
   1717c:	str	r0, [sp, #32]
   17180:	b	16dbc <__assert_fail@plt+0x58e0>
   17184:	tst	r6, #64	; 0x40
   17188:	and	r3, r6, #256	; 0x100
   1718c:	moveq	r2, #3
   17190:	streq	r2, [sp, #16]
   17194:	beq	16dbc <__assert_fail@plt+0x58e0>
   17198:	ldr	r1, [sp, #12]
   1719c:	mov	r2, #32
   171a0:	add	r0, r1, #648	; 0x288
   171a4:	strb	r2, [r1, #647]	; 0x287
   171a8:	mov	r2, #3
   171ac:	str	r2, [sp, #16]
   171b0:	str	r0, [sp, #32]
   171b4:	b	16dbc <__assert_fail@plt+0x58e0>
   171b8:	tst	r6, #64	; 0x40
   171bc:	and	r3, r6, #256	; 0x100
   171c0:	moveq	r2, #5
   171c4:	streq	r2, [sp, #16]
   171c8:	beq	16dbc <__assert_fail@plt+0x58e0>
   171cc:	ldr	r1, [sp, #12]
   171d0:	mov	r2, #32
   171d4:	add	r0, r1, #648	; 0x288
   171d8:	strb	r2, [r1, #647]	; 0x287
   171dc:	mov	r2, #5
   171e0:	str	r2, [sp, #16]
   171e4:	str	r0, [sp, #32]
   171e8:	b	16dbc <__assert_fail@plt+0x58e0>
   171ec:	tst	r6, #64	; 0x40
   171f0:	and	r3, r6, #256	; 0x100
   171f4:	moveq	r2, #6
   171f8:	streq	r2, [sp, #16]
   171fc:	beq	16dbc <__assert_fail@plt+0x58e0>
   17200:	ldr	r1, [sp, #12]
   17204:	mov	r2, #32
   17208:	add	r0, r1, #648	; 0x288
   1720c:	strb	r2, [r1, #647]	; 0x287
   17210:	mov	r2, #6
   17214:	str	r2, [sp, #16]
   17218:	str	r0, [sp, #32]
   1721c:	b	16dbc <__assert_fail@plt+0x58e0>
   17220:	adds	r4, r4, #1
   17224:	adc	r5, r5, #0
   17228:	cmp	r5, #0
   1722c:	cmpeq	r4, #10
   17230:	beq	17298 <__assert_fail@plt+0x5dbc>
   17234:	mov	r8, #0
   17238:	b	16ba8 <__assert_fail@plt+0x56cc>
   1723c:	ldr	r9, [sp, #32]
   17240:	b	16bdc <__assert_fail@plt+0x5700>
   17244:	mov	r0, #48	; 0x30
   17248:	mvn	r3, fp
   1724c:	ldr	r1, [sp, #44]	; 0x2c
   17250:	mov	r2, fp
   17254:	strb	r0, [r9, #-1]
   17258:	add	r9, r9, r3
   1725c:	mov	r0, r9
   17260:	bl	111e8 <memcpy@plt>
   17264:	b	17040 <__assert_fail@plt+0x5b64>
   17268:	mov	r3, #1
   1726c:	str	r3, [sp, #16]
   17270:	b	16b64 <__assert_fail@plt+0x5688>
   17274:	mov	r3, #3
   17278:	str	r3, [sp, #16]
   1727c:	b	16b64 <__assert_fail@plt+0x5688>
   17280:	mov	r3, #2
   17284:	str	r3, [sp, #16]
   17288:	b	16b64 <__assert_fail@plt+0x5688>
   1728c:	mov	r3, #4
   17290:	str	r3, [sp, #16]
   17294:	b	16b64 <__assert_fail@plt+0x5688>
   17298:	mov	r8, #0
   1729c:	ldr	r9, [sp, #32]
   172a0:	b	16bdc <__assert_fail@plt+0x5700>
   172a4:	mov	r3, #5
   172a8:	str	r3, [sp, #16]
   172ac:	b	16b64 <__assert_fail@plt+0x5688>
   172b0:	tst	r6, #64	; 0x40
   172b4:	and	r3, r6, #256	; 0x100
   172b8:	moveq	r2, #4
   172bc:	streq	r2, [sp, #16]
   172c0:	beq	16dbc <__assert_fail@plt+0x58e0>
   172c4:	ldr	r1, [sp, #12]
   172c8:	mov	r2, #32
   172cc:	add	r0, r1, #648	; 0x288
   172d0:	strb	r2, [r1, #647]	; 0x287
   172d4:	mov	r2, #4
   172d8:	str	r2, [sp, #16]
   172dc:	str	r0, [sp, #32]
   172e0:	b	16dbc <__assert_fail@plt+0x58e0>
   172e4:	tst	r6, #64	; 0x40
   172e8:	and	r3, r6, #256	; 0x100
   172ec:	moveq	r2, #1
   172f0:	streq	r2, [sp, #16]
   172f4:	beq	16fac <__assert_fail@plt+0x5ad0>
   172f8:	ldr	r1, [sp, #12]
   172fc:	mov	r2, #32
   17300:	add	r0, r1, #648	; 0x288
   17304:	strb	r2, [r1, #647]	; 0x287
   17308:	mov	r2, #1
   1730c:	str	r2, [sp, #16]
   17310:	str	r0, [sp, #32]
   17314:	b	16fac <__assert_fail@plt+0x5ad0>
   17318:	cmp	r3, #0
   1731c:	ldrne	r2, [sp, #32]
   17320:	bne	16df0 <__assert_fail@plt+0x5914>
   17324:	b	16824 <__assert_fail@plt+0x5348>
   17328:	andeq	r0, r0, r0
   1732c:	eormi	r0, r4, r0
   17330:	tst	r6, #64	; 0x40
   17334:	and	r3, r6, #256	; 0x100
   17338:	moveq	r2, #7
   1733c:	streq	r2, [sp, #16]
   17340:	beq	16dbc <__assert_fail@plt+0x58e0>
   17344:	ldr	r1, [sp, #12]
   17348:	mov	r2, #32
   1734c:	add	r0, r1, #648	; 0x288
   17350:	strb	r2, [r1, #647]	; 0x287
   17354:	mov	r2, #7
   17358:	str	r2, [sp, #16]
   1735c:	str	r0, [sp, #32]
   17360:	b	16dbc <__assert_fail@plt+0x58e0>
   17364:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17368:	subs	r4, r0, #0
   1736c:	strd	r6, [sp, #8]
   17370:	mov	r7, r1
   17374:	mov	r6, r2
   17378:	strd	r8, [sp, #16]
   1737c:	strd	sl, [sp, #24]
   17380:	str	lr, [sp, #32]
   17384:	sub	sp, sp, #20
   17388:	beq	174c8 <__assert_fail@plt+0x5fec>
   1738c:	ldrb	r3, [r4]
   17390:	cmp	r3, #39	; 0x27
   17394:	beq	17408 <__assert_fail@plt+0x5f2c>
   17398:	mov	r9, #160	; 0xa0
   1739c:	mov	fp, #416	; 0x1a0
   173a0:	mov	sl, #384	; 0x180
   173a4:	mov	r8, #0
   173a8:	movw	r5, #64016	; 0xfa10
   173ac:	movt	r5, #1
   173b0:	add	r2, r5, #12
   173b4:	add	r1, r5, #20
   173b8:	mov	r3, #4
   173bc:	mov	r0, r4
   173c0:	bl	1d0a0 <__assert_fail@plt+0xbbc4>
   173c4:	cmp	r0, #0
   173c8:	blt	17420 <__assert_fail@plt+0x5f44>
   173cc:	add	r5, r5, r0, lsl #2
   173d0:	mov	r2, #1
   173d4:	mov	r3, #0
   173d8:	mov	r0, #0
   173dc:	ldr	r1, [r5, #12]
   173e0:	strd	r2, [r6]
   173e4:	orr	r8, r8, r1
   173e8:	str	r8, [r7]
   173ec:	add	sp, sp, #20
   173f0:	ldrd	r4, [sp]
   173f4:	ldrd	r6, [sp, #8]
   173f8:	ldrd	r8, [sp, #16]
   173fc:	ldrd	sl, [sp, #24]
   17400:	add	sp, sp, #32
   17404:	pop	{pc}		; (ldr pc, [sp], #4)
   17408:	add	r4, r4, #1
   1740c:	mov	r9, #164	; 0xa4
   17410:	mov	fp, #420	; 0x1a4
   17414:	mov	sl, #388	; 0x184
   17418:	mov	r8, #4
   1741c:	b	173a8 <__assert_fail@plt+0x5ecc>
   17420:	movw	r0, #64092	; 0xfa5c
   17424:	movt	r0, #1
   17428:	mov	r3, r6
   1742c:	mov	r2, #0
   17430:	add	r1, sp, #12
   17434:	str	r0, [sp]
   17438:	mov	r0, r4
   1743c:	bl	1c0b0 <__assert_fail@plt+0xabd4>
   17440:	cmp	r0, #0
   17444:	bne	1748c <__assert_fail@plt+0x5fb0>
   17448:	ldrb	r3, [r4]
   1744c:	sub	r3, r3, #48	; 0x30
   17450:	cmp	r3, #9
   17454:	bls	17480 <__assert_fail@plt+0x5fa4>
   17458:	ldr	r2, [sp, #12]
   1745c:	cmp	r4, r2
   17460:	bne	17470 <__assert_fail@plt+0x5f94>
   17464:	b	1751c <__assert_fail@plt+0x6040>
   17468:	cmp	r2, r4
   1746c:	beq	1751c <__assert_fail@plt+0x6040>
   17470:	ldrb	r3, [r4, #1]!
   17474:	sub	r3, r3, #48	; 0x30
   17478:	cmp	r3, #9
   1747c:	bhi	17468 <__assert_fail@plt+0x5f8c>
   17480:	ldrd	r2, [r6]
   17484:	str	r8, [r7]
   17488:	b	17498 <__assert_fail@plt+0x5fbc>
   1748c:	mov	r1, #0
   17490:	ldrd	r2, [r6]
   17494:	str	r1, [r7]
   17498:	orrs	r3, r2, r3
   1749c:	bne	173ec <__assert_fail@plt+0x5f10>
   174a0:	movw	r0, #63000	; 0xf618
   174a4:	movt	r0, #1
   174a8:	bl	112f0 <getenv@plt>
   174ac:	cmp	r0, #0
   174b0:	mov	r3, #0
   174b4:	moveq	r2, #1024	; 0x400
   174b8:	movne	r2, #512	; 0x200
   174bc:	mov	r0, #4
   174c0:	strd	r2, [r6]
   174c4:	b	173ec <__assert_fail@plt+0x5f10>
   174c8:	movw	r0, #64068	; 0xfa44
   174cc:	movt	r0, #1
   174d0:	bl	112f0 <getenv@plt>
   174d4:	subs	r4, r0, #0
   174d8:	bne	1738c <__assert_fail@plt+0x5eb0>
   174dc:	movw	r0, #64080	; 0xfa50
   174e0:	movt	r0, #1
   174e4:	bl	112f0 <getenv@plt>
   174e8:	subs	r4, r0, #0
   174ec:	bne	1738c <__assert_fail@plt+0x5eb0>
   174f0:	movw	r0, #63000	; 0xf618
   174f4:	movt	r0, #1
   174f8:	bl	112f0 <getenv@plt>
   174fc:	subs	r3, r0, #0
   17500:	beq	17548 <__assert_fail@plt+0x606c>
   17504:	mov	r2, #512	; 0x200
   17508:	mov	r3, #0
   1750c:	mov	r0, r4
   17510:	strd	r2, [r6]
   17514:	str	r4, [r7]
   17518:	b	173ec <__assert_fail@plt+0x5f10>
   1751c:	ldrb	r3, [r2, #-1]
   17520:	cmp	r3, #66	; 0x42
   17524:	beq	17530 <__assert_fail@plt+0x6054>
   17528:	mov	r8, r9
   1752c:	b	17480 <__assert_fail@plt+0x5fa4>
   17530:	ldrb	r3, [r2, #-2]
   17534:	cmp	r3, #105	; 0x69
   17538:	movne	r8, sl
   1753c:	bne	17480 <__assert_fail@plt+0x5fa4>
   17540:	mov	r9, fp
   17544:	b	17528 <__assert_fail@plt+0x604c>
   17548:	mov	r4, #1024	; 0x400
   1754c:	mov	r5, #0
   17550:	mov	r0, r3
   17554:	strd	r4, [r6]
   17558:	str	r3, [r7]
   1755c:	b	173ec <__assert_fail@plt+0x5f10>
   17560:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17564:	movw	r4, #4576	; 0x11e0
   17568:	movt	r4, #3
   1756c:	mov	r5, #0
   17570:	cmp	r0, #2
   17574:	strd	r6, [sp, #8]
   17578:	str	r8, [sp, #16]
   1757c:	str	lr, [sp, #20]
   17580:	sub	sp, sp, #16
   17584:	ldr	r6, [r4]
   17588:	str	r5, [r4]
   1758c:	beq	175bc <__assert_fail@plt+0x60e0>
   17590:	mov	r2, #0
   17594:	movw	r3, #4560	; 0x11d0
   17598:	movt	r3, #3
   1759c:	str	r6, [r4]
   175a0:	str	r2, [r3]
   175a4:	add	sp, sp, #16
   175a8:	ldrd	r4, [sp]
   175ac:	ldrd	r6, [sp, #8]
   175b0:	ldr	r8, [sp, #16]
   175b4:	add	sp, sp, #20
   175b8:	pop	{pc}		; (ldr pc, [sp], #4)
   175bc:	mov	r8, r3
   175c0:	mov	r7, r2
   175c4:	str	r5, [sp]
   175c8:	movw	r3, #64132	; 0xfa84
   175cc:	movt	r3, #1
   175d0:	movw	r2, #64180	; 0xfab4
   175d4:	movt	r2, #1
   175d8:	bl	1135c <getopt_long@plt>
   175dc:	cmn	r0, #1
   175e0:	beq	17590 <__assert_fail@plt+0x60b4>
   175e4:	cmp	r0, #104	; 0x68
   175e8:	beq	17624 <__assert_fail@plt+0x6148>
   175ec:	cmp	r0, #118	; 0x76
   175f0:	bne	17590 <__assert_fail@plt+0x60b4>
   175f4:	add	ip, sp, #48	; 0x30
   175f8:	movw	r0, #4572	; 0x11dc
   175fc:	movt	r0, #3
   17600:	mov	r2, r8
   17604:	ldr	r3, [sp, #40]	; 0x28
   17608:	mov	r1, r7
   1760c:	str	ip, [sp]
   17610:	ldr	r0, [r0]
   17614:	str	ip, [sp, #12]
   17618:	bl	1b7a0 <__assert_fail@plt+0xa2c4>
   1761c:	mov	r0, r5
   17620:	bl	11374 <exit@plt>
   17624:	mov	r0, r5
   17628:	ldr	r3, [sp, #44]	; 0x2c
   1762c:	blx	r3
   17630:	b	17590 <__assert_fail@plt+0x60b4>
   17634:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17638:	mov	r5, #0
   1763c:	movw	r4, #4576	; 0x11e0
   17640:	movt	r4, #3
   17644:	strd	r6, [sp, #8]
   17648:	movw	ip, #62008	; 0xf238
   1764c:	movt	ip, #1
   17650:	strd	r8, [sp, #16]
   17654:	mov	r9, #1
   17658:	str	lr, [sp, #24]
   1765c:	sub	sp, sp, #20
   17660:	mov	r8, r3
   17664:	ldrb	lr, [sp, #52]	; 0x34
   17668:	mov	r7, r2
   1766c:	movw	r3, #64132	; 0xfa84
   17670:	movt	r3, #1
   17674:	movw	r2, #64180	; 0xfab4
   17678:	movt	r2, #1
   1767c:	str	r5, [sp]
   17680:	ldr	r6, [r4]
   17684:	str	r9, [r4]
   17688:	cmp	lr, r5
   1768c:	movne	r2, ip
   17690:	bl	1135c <getopt_long@plt>
   17694:	cmn	r0, #1
   17698:	beq	176c0 <__assert_fail@plt+0x61e4>
   1769c:	cmp	r0, #104	; 0x68
   176a0:	beq	1770c <__assert_fail@plt+0x6230>
   176a4:	cmp	r0, #118	; 0x76
   176a8:	beq	176dc <__assert_fail@plt+0x6200>
   176ac:	movw	r3, #4476	; 0x117c
   176b0:	movt	r3, #3
   176b4:	ldr	r0, [r3]
   176b8:	ldr	r3, [sp, #56]	; 0x38
   176bc:	blx	r3
   176c0:	str	r6, [r4]
   176c4:	add	sp, sp, #20
   176c8:	ldrd	r4, [sp]
   176cc:	ldrd	r6, [sp, #8]
   176d0:	ldrd	r8, [sp, #16]
   176d4:	add	sp, sp, #24
   176d8:	pop	{pc}		; (ldr pc, [sp], #4)
   176dc:	add	ip, sp, #60	; 0x3c
   176e0:	movw	r0, #4572	; 0x11dc
   176e4:	movt	r0, #3
   176e8:	mov	r2, r8
   176ec:	ldr	r3, [sp, #48]	; 0x30
   176f0:	mov	r1, r7
   176f4:	str	ip, [sp]
   176f8:	ldr	r0, [r0]
   176fc:	str	ip, [sp, #12]
   17700:	bl	1b7a0 <__assert_fail@plt+0xa2c4>
   17704:	mov	r0, r5
   17708:	bl	11374 <exit@plt>
   1770c:	mov	r0, r5
   17710:	ldr	r3, [sp, #56]	; 0x38
   17714:	blx	r3
   17718:	b	176c0 <__assert_fail@plt+0x61e4>
   1771c:	strd	r4, [sp, #-16]!
   17720:	subs	r4, r0, #0
   17724:	str	r6, [sp, #8]
   17728:	str	lr, [sp, #12]
   1772c:	beq	177c4 <__assert_fail@plt+0x62e8>
   17730:	mov	r1, #47	; 0x2f
   17734:	bl	11458 <strrchr@plt>
   17738:	subs	r5, r0, #0
   1773c:	beq	1779c <__assert_fail@plt+0x62c0>
   17740:	add	r6, r5, #1
   17744:	sub	r3, r6, r4
   17748:	cmp	r3, #6
   1774c:	ble	1779c <__assert_fail@plt+0x62c0>
   17750:	movw	r1, #64256	; 0xfb00
   17754:	movt	r1, #1
   17758:	mov	r2, #7
   1775c:	sub	r0, r5, #6
   17760:	bl	11494 <strncmp@plt>
   17764:	cmp	r0, #0
   17768:	bne	1779c <__assert_fail@plt+0x62c0>
   1776c:	movw	r1, #64264	; 0xfb08
   17770:	movt	r1, #1
   17774:	mov	r2, #3
   17778:	mov	r0, r6
   1777c:	bl	11494 <strncmp@plt>
   17780:	cmp	r0, #0
   17784:	movne	r4, r6
   17788:	bne	1779c <__assert_fail@plt+0x62c0>
   1778c:	add	r4, r5, #4
   17790:	movw	r3, #4552	; 0x11c8
   17794:	movt	r3, #3
   17798:	str	r4, [r3]
   1779c:	movw	r2, #5204	; 0x1454
   177a0:	movt	r2, #3
   177a4:	ldr	r6, [sp, #8]
   177a8:	movw	r3, #4556	; 0x11cc
   177ac:	movt	r3, #3
   177b0:	str	r4, [r2]
   177b4:	str	r4, [r3]
   177b8:	ldrd	r4, [sp]
   177bc:	add	sp, sp, #12
   177c0:	pop	{pc}		; (ldr pc, [sp], #4)
   177c4:	movw	r3, #4568	; 0x11d8
   177c8:	movt	r3, #3
   177cc:	movw	r0, #64200	; 0xfac8
   177d0:	movt	r0, #1
   177d4:	ldr	r3, [r3]
   177d8:	mov	r2, #55	; 0x37
   177dc:	mov	r1, #1
   177e0:	bl	1129c <fwrite@plt>
   177e4:	bl	114ac <abort@plt>
   177e8:	mov	r2, #5
   177ec:	strd	r4, [sp, #-16]!
   177f0:	mov	r5, r0
   177f4:	str	r6, [sp, #8]
   177f8:	mov	r6, r1
   177fc:	mov	r1, r0
   17800:	mov	r0, #0
   17804:	str	lr, [sp, #12]
   17808:	bl	11230 <dcgettext@plt>
   1780c:	cmp	r5, r0
   17810:	mov	r4, r0
   17814:	beq	1782c <__assert_fail@plt+0x6350>
   17818:	mov	r0, r4
   1781c:	ldrd	r4, [sp]
   17820:	ldr	r6, [sp, #8]
   17824:	add	sp, sp, #12
   17828:	pop	{pc}		; (ldr pc, [sp], #4)
   1782c:	bl	1d63c <__assert_fail@plt+0xc160>
   17830:	ldrb	r3, [r0]
   17834:	bic	r3, r3, #32
   17838:	cmp	r3, #85	; 0x55
   1783c:	bne	178a4 <__assert_fail@plt+0x63c8>
   17840:	ldrb	r3, [r0, #1]
   17844:	bic	r3, r3, #32
   17848:	cmp	r3, #84	; 0x54
   1784c:	bne	17924 <__assert_fail@plt+0x6448>
   17850:	ldrb	r3, [r0, #2]
   17854:	bic	r3, r3, #32
   17858:	cmp	r3, #70	; 0x46
   1785c:	bne	17924 <__assert_fail@plt+0x6448>
   17860:	ldrb	r3, [r0, #3]
   17864:	cmp	r3, #45	; 0x2d
   17868:	bne	17924 <__assert_fail@plt+0x6448>
   1786c:	ldrb	r3, [r0, #4]
   17870:	cmp	r3, #56	; 0x38
   17874:	bne	17924 <__assert_fail@plt+0x6448>
   17878:	ldrb	r3, [r0, #5]
   1787c:	cmp	r3, #0
   17880:	bne	17924 <__assert_fail@plt+0x6448>
   17884:	ldrb	r2, [r4]
   17888:	movw	r3, #64356	; 0xfb64
   1788c:	movt	r3, #1
   17890:	movw	r4, #64368	; 0xfb70
   17894:	movt	r4, #1
   17898:	cmp	r2, #96	; 0x60
   1789c:	movne	r4, r3
   178a0:	b	17818 <__assert_fail@plt+0x633c>
   178a4:	cmp	r3, #71	; 0x47
   178a8:	bne	17924 <__assert_fail@plt+0x6448>
   178ac:	ldrb	r3, [r0, #1]
   178b0:	bic	r3, r3, #32
   178b4:	cmp	r3, #66	; 0x42
   178b8:	bne	17924 <__assert_fail@plt+0x6448>
   178bc:	ldrb	r3, [r0, #2]
   178c0:	cmp	r3, #49	; 0x31
   178c4:	bne	17924 <__assert_fail@plt+0x6448>
   178c8:	ldrb	r3, [r0, #3]
   178cc:	cmp	r3, #56	; 0x38
   178d0:	bne	17924 <__assert_fail@plt+0x6448>
   178d4:	ldrb	r3, [r0, #4]
   178d8:	cmp	r3, #48	; 0x30
   178dc:	bne	17924 <__assert_fail@plt+0x6448>
   178e0:	ldrb	r3, [r0, #5]
   178e4:	cmp	r3, #51	; 0x33
   178e8:	bne	17924 <__assert_fail@plt+0x6448>
   178ec:	ldrb	r3, [r0, #6]
   178f0:	cmp	r3, #48	; 0x30
   178f4:	bne	17924 <__assert_fail@plt+0x6448>
   178f8:	ldrb	r3, [r0, #7]
   178fc:	cmp	r3, #0
   17900:	bne	17924 <__assert_fail@plt+0x6448>
   17904:	ldrb	r2, [r4]
   17908:	movw	r3, #64360	; 0xfb68
   1790c:	movt	r3, #1
   17910:	movw	r4, #64364	; 0xfb6c
   17914:	movt	r4, #1
   17918:	cmp	r2, #96	; 0x60
   1791c:	movne	r4, r3
   17920:	b	17818 <__assert_fail@plt+0x633c>
   17924:	movw	r3, #64372	; 0xfb74
   17928:	movt	r3, #1
   1792c:	cmp	r6, #9
   17930:	movw	r4, #64352	; 0xfb60
   17934:	movt	r4, #1
   17938:	movne	r4, r3
   1793c:	b	17818 <__assert_fail@plt+0x633c>
   17940:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17944:	strd	r6, [sp, #8]
   17948:	strd	r8, [sp, #16]
   1794c:	mov	r8, r3
   17950:	strd	sl, [sp, #24]
   17954:	mov	fp, r0
   17958:	mov	sl, r1
   1795c:	str	lr, [sp, #32]
   17960:	sub	sp, sp, #140	; 0x8c
   17964:	ldr	r3, [sp, #180]	; 0xb4
   17968:	str	r2, [sp, #28]
   1796c:	and	r4, r3, #2
   17970:	ubfx	r3, r3, #1, #1
   17974:	str	r3, [sp, #44]	; 0x2c
   17978:	bl	112b4 <__ctype_get_mb_cur_max@plt>
   1797c:	ldr	r3, [sp, #176]	; 0xb0
   17980:	str	r0, [sp, #76]	; 0x4c
   17984:	cmp	r3, #10
   17988:	ldrls	pc, [pc, r3, lsl #2]
   1798c:	b	19328 <__assert_fail@plt+0x7e4c>
   17990:	andeq	r7, r1, r0, lsl lr
   17994:	andeq	r7, r1, ip, lsr #30
   17998:	andeq	r8, r1, r8, lsr #9
   1799c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   179a0:	andeq	r7, r1, r8, lsl sp
   179a4:	muleq	r1, r4, sp
   179a8:	andeq	r7, r1, ip, ror #28
   179ac:	ldrdeq	r7, [r1], -r4
   179b0:			; <UNDEFINED> instruction: 0x000179bc
   179b4:			; <UNDEFINED> instruction: 0x000179bc
   179b8:			; <UNDEFINED> instruction: 0x000179bc
   179bc:	ldr	r3, [sp, #176]	; 0xb0
   179c0:	cmp	r3, #10
   179c4:	beq	179f0 <__assert_fail@plt+0x6514>
   179c8:	mov	r1, r3
   179cc:	movw	r0, #64376	; 0xfb78
   179d0:	movt	r0, #1
   179d4:	bl	177e8 <__assert_fail@plt+0x630c>
   179d8:	str	r0, [sp, #188]	; 0xbc
   179dc:	movw	r0, #64372	; 0xfb74
   179e0:	movt	r0, #1
   179e4:	ldr	r1, [sp, #176]	; 0xb0
   179e8:	bl	177e8 <__assert_fail@plt+0x630c>
   179ec:	str	r0, [sp, #192]	; 0xc0
   179f0:	cmp	r4, #0
   179f4:	movne	r4, #0
   179f8:	beq	190b4 <__assert_fail@plt+0x7bd8>
   179fc:	mov	r5, #0
   17a00:	ldr	r0, [sp, #192]	; 0xc0
   17a04:	mov	r9, r5
   17a08:	str	r5, [sp, #64]	; 0x40
   17a0c:	bl	11380 <strlen@plt>
   17a10:	mov	r3, #1
   17a14:	ldr	r2, [sp, #44]	; 0x2c
   17a18:	cmp	r0, r5
   17a1c:	moveq	r2, r5
   17a20:	str	r3, [sp, #32]
   17a24:	str	r3, [sp, #48]	; 0x30
   17a28:	str	r5, [sp, #52]	; 0x34
   17a2c:	str	r3, [sp, #60]	; 0x3c
   17a30:	ldr	r3, [sp, #180]	; 0xb4
   17a34:	str	r0, [sp, #56]	; 0x38
   17a38:	str	r5, [sp, #68]	; 0x44
   17a3c:	str	r5, [sp, #80]	; 0x50
   17a40:	str	r5, [sp, #84]	; 0x54
   17a44:	and	r3, r3, #1
   17a48:	str	r2, [sp, #88]	; 0x58
   17a4c:	str	r3, [sp, #92]	; 0x5c
   17a50:	ldr	r3, [sp, #180]	; 0xb4
   17a54:	and	r3, r3, #4
   17a58:	str	r3, [sp, #96]	; 0x60
   17a5c:	ldr	r3, [sp, #192]	; 0xc0
   17a60:	str	r3, [sp, #72]	; 0x48
   17a64:	mov	r3, fp
   17a68:	mov	r7, #0
   17a6c:	mov	fp, r9
   17a70:	mov	r9, r3
   17a74:	cmn	r8, #1
   17a78:	beq	1807c <__assert_fail@plt+0x6ba0>
   17a7c:	subs	r6, r8, r7
   17a80:	movne	r6, #1
   17a84:	cmp	r6, #0
   17a88:	beq	18094 <__assert_fail@plt+0x6bb8>
   17a8c:	ldr	r0, [sp, #28]
   17a90:	ldr	r3, [sp, #48]	; 0x30
   17a94:	cmp	r3, #0
   17a98:	add	r3, r0, r7
   17a9c:	str	r3, [sp, #36]	; 0x24
   17aa0:	beq	18520 <__assert_fail@plt+0x7044>
   17aa4:	ldr	r2, [sp, #56]	; 0x38
   17aa8:	cmp	r2, #0
   17aac:	beq	18a20 <__assert_fail@plt+0x7544>
   17ab0:	cmp	r2, #1
   17ab4:	mov	r3, r2
   17ab8:	movls	r3, #0
   17abc:	movhi	r3, #1
   17ac0:	cmn	r8, #1
   17ac4:	add	r5, r7, r2
   17ac8:	movne	r3, #0
   17acc:	cmp	r3, #0
   17ad0:	beq	17adc <__assert_fail@plt+0x6600>
   17ad4:	bl	11380 <strlen@plt>
   17ad8:	mov	r8, r0
   17adc:	cmp	r5, r8
   17ae0:	bhi	18a20 <__assert_fail@plt+0x7544>
   17ae4:	ldr	r0, [sp, #36]	; 0x24
   17ae8:	ldr	r2, [sp, #56]	; 0x38
   17aec:	ldr	r1, [sp, #72]	; 0x48
   17af0:	bl	11218 <memcmp@plt>
   17af4:	cmp	r0, #0
   17af8:	bne	18a20 <__assert_fail@plt+0x7544>
   17afc:	ldr	r3, [sp, #44]	; 0x2c
   17b00:	cmp	r3, #0
   17b04:	bne	191cc <__assert_fail@plt+0x7cf0>
   17b08:	ldr	r3, [sp, #36]	; 0x24
   17b0c:	ldrb	r5, [r3]
   17b10:	cmp	r5, #126	; 0x7e
   17b14:	ldrls	pc, [pc, r5, lsl #2]
   17b18:	b	18fb4 <__assert_fail@plt+0x7ad8>
   17b1c:	strdeq	r8, [r1], -r0
   17b20:			; <UNDEFINED> instruction: 0x00018fb4
   17b24:			; <UNDEFINED> instruction: 0x00018fb4
   17b28:			; <UNDEFINED> instruction: 0x00018fb4
   17b2c:			; <UNDEFINED> instruction: 0x00018fb4
   17b30:			; <UNDEFINED> instruction: 0x00018fb4
   17b34:			; <UNDEFINED> instruction: 0x00018fb4
   17b38:	andeq	r8, r1, r8, asr #2
   17b3c:	andeq	r8, r1, r0, asr #2
   17b40:	andeq	r8, r1, r0, asr r1
   17b44:	ldrdeq	r8, [r1], -r4
   17b48:	andeq	r8, r1, r4, asr #5
   17b4c:	andeq	r7, r1, ip, ror #31
   17b50:	andeq	r8, r1, r0, lsr #5
   17b54:			; <UNDEFINED> instruction: 0x00018fb4
   17b58:			; <UNDEFINED> instruction: 0x00018fb4
   17b5c:			; <UNDEFINED> instruction: 0x00018fb4
   17b60:			; <UNDEFINED> instruction: 0x00018fb4
   17b64:			; <UNDEFINED> instruction: 0x00018fb4
   17b68:			; <UNDEFINED> instruction: 0x00018fb4
   17b6c:			; <UNDEFINED> instruction: 0x00018fb4
   17b70:			; <UNDEFINED> instruction: 0x00018fb4
   17b74:			; <UNDEFINED> instruction: 0x00018fb4
   17b78:			; <UNDEFINED> instruction: 0x00018fb4
   17b7c:			; <UNDEFINED> instruction: 0x00018fb4
   17b80:			; <UNDEFINED> instruction: 0x00018fb4
   17b84:			; <UNDEFINED> instruction: 0x00018fb4
   17b88:			; <UNDEFINED> instruction: 0x00018fb4
   17b8c:			; <UNDEFINED> instruction: 0x00018fb4
   17b90:			; <UNDEFINED> instruction: 0x00018fb4
   17b94:			; <UNDEFINED> instruction: 0x00018fb4
   17b98:			; <UNDEFINED> instruction: 0x00018fb4
   17b9c:	andeq	r8, r1, ip, asr #6
   17ba0:	andeq	r8, r1, r0, asr #6
   17ba4:	andeq	r8, r1, r0, asr #6
   17ba8:	andeq	r8, r1, r4, lsr r3
   17bac:	andeq	r8, r1, r0, asr #6
   17bb0:	andeq	r8, r1, r8, lsl r4
   17bb4:	andeq	r8, r1, r0, asr #6
   17bb8:	andeq	r8, r1, r8, lsl #9
   17bbc:	andeq	r8, r1, r0, asr #6
   17bc0:	andeq	r8, r1, r0, asr #6
   17bc4:	andeq	r8, r1, r0, asr #6
   17bc8:	andeq	r8, r1, r8, lsl r4
   17bcc:	andeq	r8, r1, r8, lsl r4
   17bd0:	andeq	r8, r1, r8, lsl r4
   17bd4:	andeq	r8, r1, r8, lsl r4
   17bd8:	andeq	r8, r1, r8, lsl r4
   17bdc:	andeq	r8, r1, r8, lsl r4
   17be0:	andeq	r8, r1, r8, lsl r4
   17be4:	andeq	r8, r1, r8, lsl r4
   17be8:	andeq	r8, r1, r8, lsl r4
   17bec:	andeq	r8, r1, r8, lsl r4
   17bf0:	andeq	r8, r1, r8, lsl r4
   17bf4:	andeq	r8, r1, r8, lsl r4
   17bf8:	andeq	r8, r1, r8, lsl r4
   17bfc:	andeq	r8, r1, r8, lsl r4
   17c00:	andeq	r8, r1, r8, lsl r4
   17c04:	andeq	r8, r1, r8, lsl r4
   17c08:	andeq	r8, r1, r0, asr #6
   17c0c:	andeq	r8, r1, r0, asr #6
   17c10:	andeq	r8, r1, r0, asr #6
   17c14:	andeq	r8, r1, r0, asr #6
   17c18:	andeq	r8, r1, r8, lsr r4
   17c1c:			; <UNDEFINED> instruction: 0x00018fb4
   17c20:	andeq	r8, r1, r8, lsl r4
   17c24:	andeq	r8, r1, r8, lsl r4
   17c28:	andeq	r8, r1, r8, lsl r4
   17c2c:	andeq	r8, r1, r8, lsl r4
   17c30:	andeq	r8, r1, r8, lsl r4
   17c34:	andeq	r8, r1, r8, lsl r4
   17c38:	andeq	r8, r1, r8, lsl r4
   17c3c:	andeq	r8, r1, r8, lsl r4
   17c40:	andeq	r8, r1, r8, lsl r4
   17c44:	andeq	r8, r1, r8, lsl r4
   17c48:	andeq	r8, r1, r8, lsl r4
   17c4c:	andeq	r8, r1, r8, lsl r4
   17c50:	andeq	r8, r1, r8, lsl r4
   17c54:	andeq	r8, r1, r8, lsl r4
   17c58:	andeq	r8, r1, r8, lsl r4
   17c5c:	andeq	r8, r1, r8, lsl r4
   17c60:	andeq	r8, r1, r8, lsl r4
   17c64:	andeq	r8, r1, r8, lsl r4
   17c68:	andeq	r8, r1, r8, lsl r4
   17c6c:	andeq	r8, r1, r8, lsl r4
   17c70:	andeq	r8, r1, r8, lsl r4
   17c74:	andeq	r8, r1, r8, lsl r4
   17c78:	andeq	r8, r1, r8, lsl r4
   17c7c:	andeq	r8, r1, r8, lsl r4
   17c80:	andeq	r8, r1, r8, lsl r4
   17c84:	andeq	r8, r1, r8, lsl r4
   17c88:	andeq	r8, r1, r0, asr #6
   17c8c:	ldrdeq	r8, [r1], -ip
   17c90:	andeq	r8, r1, r8, lsl r4
   17c94:	andeq	r8, r1, r0, asr #6
   17c98:	andeq	r8, r1, r8, lsl r4
   17c9c:	andeq	r8, r1, r0, asr #6
   17ca0:	andeq	r8, r1, r8, lsl r4
   17ca4:	andeq	r8, r1, r8, lsl r4
   17ca8:	andeq	r8, r1, r8, lsl r4
   17cac:	andeq	r8, r1, r8, lsl r4
   17cb0:	andeq	r8, r1, r8, lsl r4
   17cb4:	andeq	r8, r1, r8, lsl r4
   17cb8:	andeq	r8, r1, r8, lsl r4
   17cbc:	andeq	r8, r1, r8, lsl r4
   17cc0:	andeq	r8, r1, r8, lsl r4
   17cc4:	andeq	r8, r1, r8, lsl r4
   17cc8:	andeq	r8, r1, r8, lsl r4
   17ccc:	andeq	r8, r1, r8, lsl r4
   17cd0:	andeq	r8, r1, r8, lsl r4
   17cd4:	andeq	r8, r1, r8, lsl r4
   17cd8:	andeq	r8, r1, r8, lsl r4
   17cdc:	andeq	r8, r1, r8, lsl r4
   17ce0:	andeq	r8, r1, r8, lsl r4
   17ce4:	andeq	r8, r1, r8, lsl r4
   17ce8:	andeq	r8, r1, r8, lsl r4
   17cec:	andeq	r8, r1, r8, lsl r4
   17cf0:	andeq	r8, r1, r8, lsl r4
   17cf4:	andeq	r8, r1, r8, lsl r4
   17cf8:	andeq	r8, r1, r8, lsl r4
   17cfc:	andeq	r8, r1, r8, lsl r4
   17d00:	andeq	r8, r1, r8, lsl r4
   17d04:	andeq	r8, r1, r8, lsl r4
   17d08:	andeq	r8, r1, r8, ror #5
   17d0c:	andeq	r8, r1, r0, asr #6
   17d10:	andeq	r8, r1, r8, ror #5
   17d14:	andeq	r8, r1, r4, lsr r3
   17d18:	ldr	r3, [sp, #180]	; 0xb4
   17d1c:	cmp	r4, #0
   17d20:	and	r3, r3, #1
   17d24:	str	r3, [sp, #92]	; 0x5c
   17d28:	ldr	r3, [sp, #180]	; 0xb4
   17d2c:	and	r3, r3, #4
   17d30:	str	r3, [sp, #96]	; 0x60
   17d34:	moveq	r3, #1
   17d38:	streq	r3, [sp, #60]	; 0x3c
   17d3c:	beq	184cc <__assert_fail@plt+0x6ff0>
   17d40:	mov	r3, #0
   17d44:	mov	r2, #1
   17d48:	mov	r4, r3
   17d4c:	mov	r9, r3
   17d50:	str	r2, [sp, #32]
   17d54:	str	r2, [sp, #44]	; 0x2c
   17d58:	str	r3, [sp, #48]	; 0x30
   17d5c:	str	r2, [sp, #52]	; 0x34
   17d60:	str	r2, [sp, #56]	; 0x38
   17d64:	str	r3, [sp, #60]	; 0x3c
   17d68:	str	r2, [sp, #64]	; 0x40
   17d6c:	str	r2, [sp, #68]	; 0x44
   17d70:	str	r3, [sp, #80]	; 0x50
   17d74:	str	r3, [sp, #84]	; 0x54
   17d78:	str	r3, [sp, #88]	; 0x58
   17d7c:	movw	r3, #64372	; 0xfb74
   17d80:	movt	r3, #1
   17d84:	str	r3, [sp, #72]	; 0x48
   17d88:	mov	r3, #2
   17d8c:	str	r3, [sp, #176]	; 0xb0
   17d90:	b	17a64 <__assert_fail@plt+0x6588>
   17d94:	ldr	r3, [sp, #180]	; 0xb4
   17d98:	cmp	r4, #0
   17d9c:	and	r3, r3, #1
   17da0:	str	r3, [sp, #92]	; 0x5c
   17da4:	ldr	r3, [sp, #180]	; 0xb4
   17da8:	and	r3, r3, #4
   17dac:	str	r3, [sp, #96]	; 0x60
   17db0:	bne	19184 <__assert_fail@plt+0x7ca8>
   17db4:	cmp	sl, #0
   17db8:	beq	18f30 <__assert_fail@plt+0x7a54>
   17dbc:	mov	r3, #34	; 0x22
   17dc0:	mov	r2, r4
   17dc4:	mov	r1, #1
   17dc8:	mov	r9, r2
   17dcc:	strb	r3, [fp]
   17dd0:	movw	r3, #64352	; 0xfb60
   17dd4:	movt	r3, #1
   17dd8:	mov	r4, r1
   17ddc:	str	r1, [sp, #32]
   17de0:	str	r2, [sp, #44]	; 0x2c
   17de4:	str	r1, [sp, #48]	; 0x30
   17de8:	str	r2, [sp, #52]	; 0x34
   17dec:	str	r1, [sp, #56]	; 0x38
   17df0:	str	r1, [sp, #60]	; 0x3c
   17df4:	str	r2, [sp, #64]	; 0x40
   17df8:	str	r2, [sp, #68]	; 0x44
   17dfc:	str	r3, [sp, #72]	; 0x48
   17e00:	str	r2, [sp, #80]	; 0x50
   17e04:	str	r2, [sp, #84]	; 0x54
   17e08:	str	r2, [sp, #88]	; 0x58
   17e0c:	b	17a64 <__assert_fail@plt+0x6588>
   17e10:	mov	r3, #0
   17e14:	mov	r2, #1
   17e18:	mov	r9, r3
   17e1c:	str	r2, [sp, #32]
   17e20:	str	r3, [sp, #44]	; 0x2c
   17e24:	str	r3, [sp, #48]	; 0x30
   17e28:	str	r3, [sp, #52]	; 0x34
   17e2c:	str	r3, [sp, #60]	; 0x3c
   17e30:	strd	r2, [sp, #64]	; 0x40
   17e34:	str	r3, [sp, #72]	; 0x48
   17e38:	str	r3, [sp, #80]	; 0x50
   17e3c:	str	r3, [sp, #88]	; 0x58
   17e40:	ldr	r3, [sp, #180]	; 0xb4
   17e44:	and	r3, r3, r2
   17e48:	str	r3, [sp, #92]	; 0x5c
   17e4c:	ldr	r3, [sp, #180]	; 0xb4
   17e50:	and	r3, r3, #4
   17e54:	str	r3, [sp, #96]	; 0x60
   17e58:	ldr	r3, [sp, #176]	; 0xb0
   17e5c:	mov	r4, r3
   17e60:	str	r3, [sp, #56]	; 0x38
   17e64:	str	r3, [sp, #84]	; 0x54
   17e68:	b	17a64 <__assert_fail@plt+0x6588>
   17e6c:	mov	r3, #1
   17e70:	mov	r4, #0
   17e74:	mov	r9, r4
   17e78:	str	r3, [sp, #32]
   17e7c:	str	r3, [sp, #44]	; 0x2c
   17e80:	str	r3, [sp, #48]	; 0x30
   17e84:	str	r4, [sp, #52]	; 0x34
   17e88:	str	r3, [sp, #56]	; 0x38
   17e8c:	str	r3, [sp, #60]	; 0x3c
   17e90:	str	r3, [sp, #88]	; 0x58
   17e94:	movw	r3, #64352	; 0xfb60
   17e98:	movt	r3, #1
   17e9c:	str	r4, [sp, #64]	; 0x40
   17ea0:	str	r4, [sp, #68]	; 0x44
   17ea4:	str	r3, [sp, #72]	; 0x48
   17ea8:	ldr	r3, [sp, #180]	; 0xb4
   17eac:	str	r4, [sp, #80]	; 0x50
   17eb0:	str	r4, [sp, #84]	; 0x54
   17eb4:	and	r3, r3, #1
   17eb8:	str	r3, [sp, #92]	; 0x5c
   17ebc:	ldr	r3, [sp, #180]	; 0xb4
   17ec0:	and	r3, r3, #4
   17ec4:	str	r3, [sp, #96]	; 0x60
   17ec8:	mov	r3, #5
   17ecc:	str	r3, [sp, #176]	; 0xb0
   17ed0:	b	17a64 <__assert_fail@plt+0x6588>
   17ed4:	mov	r3, #1
   17ed8:	mov	r4, #0
   17edc:	mov	r9, r4
   17ee0:	str	r3, [sp, #32]
   17ee4:	str	r4, [sp, #44]	; 0x2c
   17ee8:	str	r3, [sp, #48]	; 0x30
   17eec:	str	r3, [sp, #60]	; 0x3c
   17ef0:	ldr	r3, [sp, #180]	; 0xb4
   17ef4:	str	r4, [sp, #52]	; 0x34
   17ef8:	str	r4, [sp, #56]	; 0x38
   17efc:	str	r4, [sp, #64]	; 0x40
   17f00:	str	r4, [sp, #68]	; 0x44
   17f04:	and	r3, r3, #1
   17f08:	str	r4, [sp, #72]	; 0x48
   17f0c:	str	r4, [sp, #80]	; 0x50
   17f10:	str	r4, [sp, #84]	; 0x54
   17f14:	str	r3, [sp, #92]	; 0x5c
   17f18:	ldr	r3, [sp, #180]	; 0xb4
   17f1c:	str	r4, [sp, #88]	; 0x58
   17f20:	and	r3, r3, #4
   17f24:	str	r3, [sp, #96]	; 0x60
   17f28:	b	17a64 <__assert_fail@plt+0x6588>
   17f2c:	mov	r3, #0
   17f30:	mov	r2, #1
   17f34:	ldr	r1, [sp, #176]	; 0xb0
   17f38:	mov	r4, r3
   17f3c:	mov	r9, r3
   17f40:	movw	r3, #64372	; 0xfb74
   17f44:	movt	r3, #1
   17f48:	str	r2, [sp, #32]
   17f4c:	str	r2, [sp, #44]	; 0x2c
   17f50:	str	r4, [sp, #48]	; 0x30
   17f54:	strd	r2, [sp, #68]	; 0x44
   17f58:	ldr	r3, [sp, #180]	; 0xb4
   17f5c:	str	r2, [sp, #52]	; 0x34
   17f60:	str	r1, [sp, #56]	; 0x38
   17f64:	str	r4, [sp, #60]	; 0x3c
   17f68:	str	r2, [sp, #64]	; 0x40
   17f6c:	and	r3, r3, r2
   17f70:	str	r4, [sp, #80]	; 0x50
   17f74:	str	r4, [sp, #84]	; 0x54
   17f78:	str	r4, [sp, #88]	; 0x58
   17f7c:	str	r3, [sp, #92]	; 0x5c
   17f80:	ldr	r3, [sp, #180]	; 0xb4
   17f84:	and	r3, r3, #4
   17f88:	str	r3, [sp, #96]	; 0x60
   17f8c:	mov	r3, #2
   17f90:	str	r3, [sp, #176]	; 0xb0
   17f94:	b	17a64 <__assert_fail@plt+0x6588>
   17f98:	mov	r3, #1
   17f9c:	mov	r2, #0
   17fa0:	mov	r4, r2
   17fa4:	mov	r9, r2
   17fa8:	str	r3, [sp, #32]
   17fac:	str	r3, [sp, #44]	; 0x2c
   17fb0:	str	r2, [sp, #48]	; 0x30
   17fb4:	str	r3, [sp, #52]	; 0x34
   17fb8:	str	r3, [sp, #56]	; 0x38
   17fbc:	str	r3, [sp, #60]	; 0x3c
   17fc0:	str	r3, [sp, #64]	; 0x40
   17fc4:	str	r3, [sp, #68]	; 0x44
   17fc8:	str	r3, [sp, #88]	; 0x58
   17fcc:	movw	r3, #64372	; 0xfb74
   17fd0:	movt	r3, #1
   17fd4:	str	r3, [sp, #72]	; 0x48
   17fd8:	ldr	r3, [sp, #180]	; 0xb4
   17fdc:	str	r2, [sp, #80]	; 0x50
   17fe0:	str	r2, [sp, #84]	; 0x54
   17fe4:	and	r3, r3, #1
   17fe8:	b	17f7c <__assert_fail@plt+0x6aa0>
   17fec:	mov	r5, #102	; 0x66
   17ff0:	mov	r6, #0
   17ff4:	ldr	r3, [sp, #44]	; 0x2c
   17ff8:	cmp	r3, #0
   17ffc:	bne	18eac <__assert_fail@plt+0x79d0>
   18000:	ldr	r2, [sp, #52]	; 0x34
   18004:	eor	r3, fp, #1
   18008:	ands	r3, r2, r3
   1800c:	beq	18044 <__assert_fail@plt+0x6b68>
   18010:	cmp	sl, r4
   18014:	mov	fp, r3
   18018:	movhi	r2, #39	; 0x27
   1801c:	strbhi	r2, [r9, r4]
   18020:	add	r2, r4, #1
   18024:	cmp	sl, r2
   18028:	movhi	r1, #36	; 0x24
   1802c:	strbhi	r1, [r9, r2]
   18030:	add	r2, r4, #2
   18034:	add	r4, r4, #3
   18038:	cmp	sl, r2
   1803c:	movhi	r1, #39	; 0x27
   18040:	strbhi	r1, [r9, r2]
   18044:	cmp	sl, r4
   18048:	add	r7, r7, #1
   1804c:	movhi	r3, #92	; 0x5c
   18050:	strbhi	r3, [r9, r4]
   18054:	add	r4, r4, #1
   18058:	cmp	r4, sl
   1805c:	ldr	r3, [sp, #32]
   18060:	strbcc	r5, [r9, r4]
   18064:	cmp	r6, #0
   18068:	add	r4, r4, #1
   1806c:	moveq	r3, #0
   18070:	cmn	r8, #1
   18074:	str	r3, [sp, #32]
   18078:	bne	17a7c <__assert_fail@plt+0x65a0>
   1807c:	ldr	r3, [sp, #28]
   18080:	ldrb	r6, [r3, r7]
   18084:	adds	r6, r6, #0
   18088:	movne	r6, #1
   1808c:	cmp	r6, #0
   18090:	bne	17a8c <__assert_fail@plt+0x65b0>
   18094:	mov	r3, r9
   18098:	mov	r9, fp
   1809c:	mov	fp, r3
   180a0:	ldr	r3, [sp, #68]	; 0x44
   180a4:	cmp	r4, #0
   180a8:	movne	r3, #0
   180ac:	cmp	r3, #0
   180b0:	bne	192a4 <__assert_fail@plt+0x7dc8>
   180b4:	ldr	r3, [sp, #44]	; 0x2c
   180b8:	ldr	r2, [sp, #52]	; 0x34
   180bc:	eor	r3, r3, #1
   180c0:	ands	r2, r3, r2
   180c4:	beq	191dc <__assert_fail@plt+0x7d00>
   180c8:	ldr	r3, [sp, #80]	; 0x50
   180cc:	cmp	r3, #0
   180d0:	beq	191e0 <__assert_fail@plt+0x7d04>
   180d4:	ldr	r3, [sp, #32]
   180d8:	cmp	r3, #0
   180dc:	bne	19254 <__assert_fail@plt+0x7d78>
   180e0:	ldr	r3, [sp, #84]	; 0x54
   180e4:	adds	r3, r3, #0
   180e8:	movne	r3, #1
   180ec:	cmp	sl, #0
   180f0:	movne	r3, #0
   180f4:	cmp	r3, #0
   180f8:	ldreq	r2, [sp, #80]	; 0x50
   180fc:	beq	191e0 <__assert_fail@plt+0x7d04>
   18100:	ldr	r2, [sp, #84]	; 0x54
   18104:	mov	sl, r2
   18108:	mov	r0, #0
   1810c:	mov	r4, #1
   18110:	mov	r1, #39	; 0x27
   18114:	str	r0, [sp, #44]	; 0x2c
   18118:	strb	r1, [fp]
   1811c:	str	r0, [sp, #48]	; 0x30
   18120:	str	r4, [sp, #52]	; 0x34
   18124:	str	r4, [sp, #56]	; 0x38
   18128:	str	r4, [sp, #64]	; 0x40
   1812c:	str	r0, [sp, #68]	; 0x44
   18130:	str	r3, [sp, #80]	; 0x50
   18134:	str	r2, [sp, #84]	; 0x54
   18138:	str	r0, [sp, #88]	; 0x58
   1813c:	b	17d7c <__assert_fail@plt+0x68a0>
   18140:	mov	r5, #98	; 0x62
   18144:	b	17ff0 <__assert_fail@plt+0x6b14>
   18148:	mov	r5, #97	; 0x61
   1814c:	b	17ff0 <__assert_fail@plt+0x6b14>
   18150:	ldr	r3, [sp, #48]	; 0x30
   18154:	str	r3, [sp, #40]	; 0x28
   18158:	mov	r3, #116	; 0x74
   1815c:	ldr	r2, [sp, #68]	; 0x44
   18160:	cmp	r2, #0
   18164:	bne	18360 <__assert_fail@plt+0x6e84>
   18168:	ldr	r2, [sp, #60]	; 0x3c
   1816c:	cmp	r2, #0
   18170:	bne	182bc <__assert_fail@plt+0x6de0>
   18174:	ldr	r3, [sp, #44]	; 0x2c
   18178:	mov	r6, #0
   1817c:	cmp	r3, #0
   18180:	beq	1832c <__assert_fail@plt+0x6e50>
   18184:	mov	r3, fp
   18188:	ldr	r2, [sp, #184]	; 0xb8
   1818c:	cmp	r2, #0
   18190:	beq	181b0 <__assert_fail@plt+0x6cd4>
   18194:	ubfx	r1, r5, #5, #8
   18198:	mov	r0, r2
   1819c:	and	r2, r5, #31
   181a0:	ldr	r1, [r0, r1, lsl #2]
   181a4:	lsr	r2, r1, r2
   181a8:	tst	r2, #1
   181ac:	bne	17ff4 <__assert_fail@plt+0x6b18>
   181b0:	ldr	r2, [sp, #40]	; 0x28
   181b4:	cmp	r2, #0
   181b8:	addeq	r7, r7, #1
   181bc:	bne	17ff4 <__assert_fail@plt+0x6b18>
   181c0:	cmp	r3, #0
   181c4:	beq	18058 <__assert_fail@plt+0x6b7c>
   181c8:	cmp	sl, r4
   181cc:	mov	fp, #0
   181d0:	movhi	r3, #39	; 0x27
   181d4:	strbhi	r3, [r9, r4]
   181d8:	add	r3, r4, #1
   181dc:	add	r4, r4, #2
   181e0:	cmp	sl, r3
   181e4:	movhi	r2, #39	; 0x27
   181e8:	strbhi	r2, [r9, r3]
   181ec:	b	18058 <__assert_fail@plt+0x6b7c>
   181f0:	ldr	r3, [sp, #48]	; 0x30
   181f4:	str	r3, [sp, #40]	; 0x28
   181f8:	eor	r3, fp, #1
   181fc:	ldr	r2, [sp, #52]	; 0x34
   18200:	ands	r2, r2, r3
   18204:	beq	18ec4 <__assert_fail@plt+0x79e8>
   18208:	cmp	sl, r4
   1820c:	movhi	r3, #39	; 0x27
   18210:	strbhi	r3, [r9, r4]
   18214:	add	r3, r4, #1
   18218:	cmp	sl, r3
   1821c:	movhi	r1, #36	; 0x24
   18220:	strbhi	r1, [r9, r3]
   18224:	add	r3, r4, #2
   18228:	cmp	sl, r3
   1822c:	movhi	r1, #39	; 0x27
   18230:	strbhi	r1, [r9, r3]
   18234:	add	r3, r4, #3
   18238:	cmp	sl, r3
   1823c:	bls	18f10 <__assert_fail@plt+0x7a34>
   18240:	mov	r4, r3
   18244:	mov	r3, #92	; 0x5c
   18248:	mov	fp, r2
   1824c:	mov	r2, r4
   18250:	strb	r3, [r9, r4]
   18254:	ldr	r3, [sp, #176]	; 0xb0
   18258:	add	r4, r4, #1
   1825c:	cmp	r3, #2
   18260:	beq	18f78 <__assert_fail@plt+0x7a9c>
   18264:	add	r3, r7, #1
   18268:	cmp	r3, r8
   1826c:	bcs	18284 <__assert_fail@plt+0x6da8>
   18270:	ldr	r1, [sp, #28]
   18274:	ldrb	r3, [r1, r3]
   18278:	sub	r3, r3, #48	; 0x30
   1827c:	cmp	r3, #9
   18280:	bls	18f88 <__assert_fail@plt+0x7aac>
   18284:	mov	r3, #0
   18288:	mov	r5, #48	; 0x30
   1828c:	ldr	r6, [sp, #64]	; 0x40
   18290:	cmp	r6, #0
   18294:	beq	18188 <__assert_fail@plt+0x6cac>
   18298:	mov	r6, #0
   1829c:	b	181b0 <__assert_fail@plt+0x6cd4>
   182a0:	ldr	r3, [sp, #48]	; 0x30
   182a4:	str	r3, [sp, #40]	; 0x28
   182a8:	ldr	r2, [sp, #60]	; 0x3c
   182ac:	mov	r5, #13
   182b0:	mov	r3, #114	; 0x72
   182b4:	cmp	r2, #0
   182b8:	beq	18174 <__assert_fail@plt+0x6c98>
   182bc:	mov	r5, r3
   182c0:	b	17ff0 <__assert_fail@plt+0x6b14>
   182c4:	ldr	r3, [sp, #48]	; 0x30
   182c8:	str	r3, [sp, #40]	; 0x28
   182cc:	mov	r3, #118	; 0x76
   182d0:	b	18168 <__assert_fail@plt+0x6c8c>
   182d4:	ldr	r3, [sp, #48]	; 0x30
   182d8:	str	r3, [sp, #40]	; 0x28
   182dc:	mov	r5, #10
   182e0:	mov	r3, #110	; 0x6e
   182e4:	b	18168 <__assert_fail@plt+0x6c8c>
   182e8:	ldr	r3, [sp, #48]	; 0x30
   182ec:	cmn	r8, #1
   182f0:	str	r3, [sp, #40]	; 0x28
   182f4:	beq	1873c <__assert_fail@plt+0x7260>
   182f8:	subs	r3, r8, #1
   182fc:	movne	r3, #1
   18300:	cmp	r3, #0
   18304:	bne	18310 <__assert_fail@plt+0x6e34>
   18308:	cmp	r7, #0
   1830c:	beq	18354 <__assert_fail@plt+0x6e78>
   18310:	mov	r6, #0
   18314:	ldr	r3, [sp, #64]	; 0x40
   18318:	cmp	r3, #0
   1831c:	beq	18184 <__assert_fail@plt+0x6ca8>
   18320:	ldr	r3, [sp, #44]	; 0x2c
   18324:	cmp	r3, #0
   18328:	bne	18184 <__assert_fail@plt+0x6ca8>
   1832c:	mov	r3, fp
   18330:	b	181b0 <__assert_fail@plt+0x6cd4>
   18334:	ldr	r3, [sp, #48]	; 0x30
   18338:	str	r3, [sp, #40]	; 0x28
   1833c:	b	18308 <__assert_fail@plt+0x6e2c>
   18340:	ldr	r3, [sp, #48]	; 0x30
   18344:	str	r3, [sp, #40]	; 0x28
   18348:	b	18310 <__assert_fail@plt+0x6e34>
   1834c:	ldr	r6, [sp, #48]	; 0x30
   18350:	str	r6, [sp, #40]	; 0x28
   18354:	ldr	r3, [sp, #68]	; 0x44
   18358:	cmp	r3, #0
   1835c:	beq	18314 <__assert_fail@plt+0x6e38>
   18360:	mov	r3, #2
   18364:	mov	fp, r9
   18368:	str	r3, [sp, #176]	; 0xb0
   1836c:	ldr	r3, [sp, #60]	; 0x3c
   18370:	cmp	r3, #0
   18374:	ldr	r3, [sp, #176]	; 0xb0
   18378:	movne	r3, #4
   1837c:	str	r3, [sp, #176]	; 0xb0
   18380:	mov	lr, #0
   18384:	mov	r0, fp
   18388:	ldr	r2, [sp, #28]
   1838c:	ldr	r3, [sp, #180]	; 0xb4
   18390:	ldr	r1, [sp, #188]	; 0xbc
   18394:	bic	ip, r3, #2
   18398:	ldr	r3, [sp, #176]	; 0xb0
   1839c:	stm	sp, {r3, ip, lr}
   183a0:	mov	r3, r8
   183a4:	ldr	ip, [sp, #192]	; 0xc0
   183a8:	str	r1, [sp, #12]
   183ac:	mov	r1, sl
   183b0:	str	ip, [sp, #16]
   183b4:	bl	17940 <__assert_fail@plt+0x6464>
   183b8:	mov	r4, r0
   183bc:	mov	r0, r4
   183c0:	add	sp, sp, #140	; 0x8c
   183c4:	ldrd	r4, [sp]
   183c8:	ldrd	r6, [sp, #8]
   183cc:	ldrd	r8, [sp, #16]
   183d0:	ldrd	sl, [sp, #24]
   183d4:	add	sp, sp, #32
   183d8:	pop	{pc}		; (ldr pc, [sp], #4)
   183dc:	ldr	r3, [sp, #48]	; 0x30
   183e0:	str	r3, [sp, #40]	; 0x28
   183e4:	ldr	r3, [sp, #176]	; 0xb0
   183e8:	cmp	r3, #2
   183ec:	beq	18764 <__assert_fail@plt+0x7288>
   183f0:	ldr	r3, [sp, #88]	; 0x58
   183f4:	cmp	r3, #0
   183f8:	moveq	r5, #92	; 0x5c
   183fc:	moveq	r3, r5
   18400:	beq	18168 <__assert_fail@plt+0x6c8c>
   18404:	add	r7, r7, #1
   18408:	mov	r3, fp
   1840c:	mov	r6, #0
   18410:	mov	r5, #92	; 0x5c
   18414:	b	181c0 <__assert_fail@plt+0x6ce4>
   18418:	ldr	r3, [sp, #64]	; 0x40
   1841c:	cmp	r3, #0
   18420:	bne	19298 <__assert_fail@plt+0x7dbc>
   18424:	ldr	r2, [sp, #48]	; 0x30
   18428:	mov	r3, fp
   1842c:	mov	r6, r2
   18430:	str	r2, [sp, #40]	; 0x28
   18434:	b	18188 <__assert_fail@plt+0x6cac>
   18438:	ldr	r3, [sp, #176]	; 0xb0
   1843c:	cmp	r3, #2
   18440:	beq	191d4 <__assert_fail@plt+0x7cf8>
   18444:	cmp	r3, #5
   18448:	ldr	r3, [sp, #48]	; 0x30
   1844c:	str	r3, [sp, #40]	; 0x28
   18450:	bne	1847c <__assert_fail@plt+0x6fa0>
   18454:	ldr	r3, [sp, #96]	; 0x60
   18458:	cmp	r3, #0
   1845c:	beq	18ed8 <__assert_fail@plt+0x79fc>
   18460:	add	r3, r7, #2
   18464:	cmp	r3, r8
   18468:	bcs	1847c <__assert_fail@plt+0x6fa0>
   1846c:	ldr	r2, [sp, #36]	; 0x24
   18470:	ldrb	r5, [r2, #1]
   18474:	cmp	r5, #63	; 0x3f
   18478:	beq	18fc0 <__assert_fail@plt+0x7ae4>
   1847c:	mov	r6, #0
   18480:	mov	r5, #63	; 0x3f
   18484:	b	18314 <__assert_fail@plt+0x6e38>
   18488:	ldr	r3, [sp, #176]	; 0xb0
   1848c:	cmp	r3, #2
   18490:	ldr	r3, [sp, #48]	; 0x30
   18494:	beq	18c7c <__assert_fail@plt+0x77a0>
   18498:	mov	r5, #39	; 0x27
   1849c:	str	r3, [sp, #40]	; 0x28
   184a0:	str	r6, [sp, #80]	; 0x50
   184a4:	b	18314 <__assert_fail@plt+0x6e38>
   184a8:	ldr	r3, [sp, #180]	; 0xb4
   184ac:	cmp	r4, #0
   184b0:	and	r3, r3, #1
   184b4:	str	r3, [sp, #92]	; 0x5c
   184b8:	ldr	r3, [sp, #180]	; 0xb4
   184bc:	and	r3, r3, #4
   184c0:	str	r3, [sp, #96]	; 0x60
   184c4:	bne	192e4 <__assert_fail@plt+0x7e08>
   184c8:	str	r4, [sp, #60]	; 0x3c
   184cc:	cmp	sl, #0
   184d0:	bne	192c8 <__assert_fail@plt+0x7dec>
   184d4:	mov	r3, #1
   184d8:	movw	r2, #64372	; 0xfb74
   184dc:	movt	r2, #1
   184e0:	mov	r4, r3
   184e4:	mov	r3, #2
   184e8:	mov	r9, sl
   184ec:	str	r4, [sp, #32]
   184f0:	str	sl, [sp, #44]	; 0x2c
   184f4:	str	sl, [sp, #48]	; 0x30
   184f8:	str	r4, [sp, #52]	; 0x34
   184fc:	str	r4, [sp, #56]	; 0x38
   18500:	str	r4, [sp, #64]	; 0x40
   18504:	str	sl, [sp, #68]	; 0x44
   18508:	str	r2, [sp, #72]	; 0x48
   1850c:	str	sl, [sp, #80]	; 0x50
   18510:	str	sl, [sp, #84]	; 0x54
   18514:	str	sl, [sp, #88]	; 0x58
   18518:	str	r3, [sp, #176]	; 0xb0
   1851c:	b	17a64 <__assert_fail@plt+0x6588>
   18520:	ldrb	r5, [r0, r7]
   18524:	cmp	r5, #126	; 0x7e
   18528:	ldrls	pc, [pc, r5, lsl #2]
   1852c:	b	18890 <__assert_fail@plt+0x73b4>
   18530:	andeq	r8, r1, ip, asr r8
   18534:	muleq	r1, r0, r8
   18538:	muleq	r1, r0, r8
   1853c:	muleq	r1, r0, r8
   18540:	muleq	r1, r0, r8
   18544:	muleq	r1, r0, r8
   18548:	muleq	r1, r0, r8
   1854c:	andeq	r8, r1, ip, asr #16
   18550:	andeq	r8, r1, ip, lsr r8
   18554:	andeq	r8, r1, r0, asr #15
   18558:	andeq	r8, r1, ip, lsr #16
   1855c:	andeq	r8, r1, r0, lsr #15
   18560:	andeq	r8, r1, r0, lsl #17
   18564:	andeq	r8, r1, ip, lsl #16
   18568:	muleq	r1, r0, r8
   1856c:	muleq	r1, r0, r8
   18570:	muleq	r1, r0, r8
   18574:	muleq	r1, r0, r8
   18578:	muleq	r1, r0, r8
   1857c:	muleq	r1, r0, r8
   18580:	muleq	r1, r0, r8
   18584:	muleq	r1, r0, r8
   18588:	muleq	r1, r0, r8
   1858c:	muleq	r1, r0, r8
   18590:	muleq	r1, r0, r8
   18594:	muleq	r1, r0, r8
   18598:	muleq	r1, r0, r8
   1859c:	muleq	r1, r0, r8
   185a0:	muleq	r1, r0, r8
   185a4:	muleq	r1, r0, r8
   185a8:	muleq	r1, r0, r8
   185ac:	muleq	r1, r0, r8
   185b0:			; <UNDEFINED> instruction: 0x000187b4
   185b4:	andeq	r8, r1, ip, lsl r8
   185b8:	andeq	r8, r1, ip, lsl r8
   185bc:	muleq	r1, r4, r7
   185c0:	andeq	r8, r1, ip, lsl r8
   185c4:	andeq	r8, r1, r8, lsl #15
   185c8:	andeq	r8, r1, ip, lsl r8
   185cc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185d0:	andeq	r8, r1, ip, lsl r8
   185d4:	andeq	r8, r1, ip, lsl r8
   185d8:	andeq	r8, r1, ip, lsl r8
   185dc:	andeq	r8, r1, r8, lsl #15
   185e0:	andeq	r8, r1, r8, lsl #15
   185e4:	andeq	r8, r1, r8, lsl #15
   185e8:	andeq	r8, r1, r8, lsl #15
   185ec:	andeq	r8, r1, r8, lsl #15
   185f0:	andeq	r8, r1, r8, lsl #15
   185f4:	andeq	r8, r1, r8, lsl #15
   185f8:	andeq	r8, r1, r8, lsl #15
   185fc:	andeq	r8, r1, r8, lsl #15
   18600:	andeq	r8, r1, r8, lsl #15
   18604:	andeq	r8, r1, r8, lsl #15
   18608:	andeq	r8, r1, r8, lsl #15
   1860c:	andeq	r8, r1, r8, lsl #15
   18610:	andeq	r8, r1, r8, lsl #15
   18614:	andeq	r8, r1, r8, lsl #15
   18618:	andeq	r8, r1, r8, lsl #15
   1861c:	andeq	r8, r1, ip, lsl r8
   18620:	andeq	r8, r1, ip, lsl r8
   18624:	andeq	r8, r1, ip, lsl r8
   18628:	andeq	r8, r1, ip, lsl r8
   1862c:	ldrdeq	r8, [r1], -r0
   18630:	muleq	r1, r0, r8
   18634:	andeq	r8, r1, r8, lsl #15
   18638:	andeq	r8, r1, r8, lsl #15
   1863c:	andeq	r8, r1, r8, lsl #15
   18640:	andeq	r8, r1, r8, lsl #15
   18644:	andeq	r8, r1, r8, lsl #15
   18648:	andeq	r8, r1, r8, lsl #15
   1864c:	andeq	r8, r1, r8, lsl #15
   18650:	andeq	r8, r1, r8, lsl #15
   18654:	andeq	r8, r1, r8, lsl #15
   18658:	andeq	r8, r1, r8, lsl #15
   1865c:	andeq	r8, r1, r8, lsl #15
   18660:	andeq	r8, r1, r8, lsl #15
   18664:	andeq	r8, r1, r8, lsl #15
   18668:	andeq	r8, r1, r8, lsl #15
   1866c:	andeq	r8, r1, r8, lsl #15
   18670:	andeq	r8, r1, r8, lsl #15
   18674:	andeq	r8, r1, r8, lsl #15
   18678:	andeq	r8, r1, r8, lsl #15
   1867c:	andeq	r8, r1, r8, lsl #15
   18680:	andeq	r8, r1, r8, lsl #15
   18684:	andeq	r8, r1, r8, lsl #15
   18688:	andeq	r8, r1, r8, lsl #15
   1868c:	andeq	r8, r1, r8, lsl #15
   18690:	andeq	r8, r1, r8, lsl #15
   18694:	andeq	r8, r1, r8, lsl #15
   18698:	andeq	r8, r1, r8, lsl #15
   1869c:	andeq	r8, r1, ip, lsl r8
   186a0:	andeq	r8, r1, r0, asr r7
   186a4:	andeq	r8, r1, r8, lsl #15
   186a8:	andeq	r8, r1, ip, lsl r8
   186ac:	andeq	r8, r1, r8, lsl #15
   186b0:	andeq	r8, r1, ip, lsl r8
   186b4:	andeq	r8, r1, r8, lsl #15
   186b8:	andeq	r8, r1, r8, lsl #15
   186bc:	andeq	r8, r1, r8, lsl #15
   186c0:	andeq	r8, r1, r8, lsl #15
   186c4:	andeq	r8, r1, r8, lsl #15
   186c8:	andeq	r8, r1, r8, lsl #15
   186cc:	andeq	r8, r1, r8, lsl #15
   186d0:	andeq	r8, r1, r8, lsl #15
   186d4:	andeq	r8, r1, r8, lsl #15
   186d8:	andeq	r8, r1, r8, lsl #15
   186dc:	andeq	r8, r1, r8, lsl #15
   186e0:	andeq	r8, r1, r8, lsl #15
   186e4:	andeq	r8, r1, r8, lsl #15
   186e8:	andeq	r8, r1, r8, lsl #15
   186ec:	andeq	r8, r1, r8, lsl #15
   186f0:	andeq	r8, r1, r8, lsl #15
   186f4:	andeq	r8, r1, r8, lsl #15
   186f8:	andeq	r8, r1, r8, lsl #15
   186fc:	andeq	r8, r1, r8, lsl #15
   18700:	andeq	r8, r1, r8, lsl #15
   18704:	andeq	r8, r1, r8, lsl #15
   18708:	andeq	r8, r1, r8, lsl #15
   1870c:	andeq	r8, r1, r8, lsl #15
   18710:	andeq	r8, r1, r8, lsl #15
   18714:	andeq	r8, r1, r8, lsl #15
   18718:	andeq	r8, r1, r8, lsl #15
   1871c:	andeq	r8, r1, ip, lsr #14
   18720:	andeq	r8, r1, ip, lsl r8
   18724:	andeq	r8, r1, ip, lsr #14
   18728:	muleq	r1, r4, r7
   1872c:	mov	r3, #0
   18730:	cmn	r8, #1
   18734:	str	r3, [sp, #40]	; 0x28
   18738:	bne	182f8 <__assert_fail@plt+0x6e1c>
   1873c:	ldr	r3, [sp, #28]
   18740:	ldrb	r3, [r3, #1]
   18744:	adds	r3, r3, #0
   18748:	movne	r3, #1
   1874c:	b	18300 <__assert_fail@plt+0x6e24>
   18750:	mov	r3, #0
   18754:	str	r3, [sp, #40]	; 0x28
   18758:	ldr	r3, [sp, #176]	; 0xb0
   1875c:	cmp	r3, #2
   18760:	bne	183f0 <__assert_fail@plt+0x6f14>
   18764:	ldr	r3, [sp, #44]	; 0x2c
   18768:	cmp	r3, #0
   1876c:	bne	190ac <__assert_fail@plt+0x7bd0>
   18770:	mov	r6, r3
   18774:	add	r7, r7, #1
   18778:	mov	r3, fp
   1877c:	mov	r5, #92	; 0x5c
   18780:	b	181c0 <__assert_fail@plt+0x6ce4>
   18784:	ldr	r6, [sp, #48]	; 0x30
   18788:	mov	r3, #0
   1878c:	str	r3, [sp, #40]	; 0x28
   18790:	b	18314 <__assert_fail@plt+0x6e38>
   18794:	mov	r3, #0
   18798:	str	r3, [sp, #40]	; 0x28
   1879c:	b	18308 <__assert_fail@plt+0x6e2c>
   187a0:	mov	r3, #0
   187a4:	str	r3, [sp, #40]	; 0x28
   187a8:	mov	r3, #118	; 0x76
   187ac:	b	18168 <__assert_fail@plt+0x6c8c>
   187b0:	ldr	r6, [sp, #48]	; 0x30
   187b4:	mov	r3, #0
   187b8:	str	r3, [sp, #40]	; 0x28
   187bc:	b	18354 <__assert_fail@plt+0x6e78>
   187c0:	mov	r3, #0
   187c4:	str	r3, [sp, #40]	; 0x28
   187c8:	mov	r3, #116	; 0x74
   187cc:	b	1815c <__assert_fail@plt+0x6c80>
   187d0:	ldr	r3, [sp, #176]	; 0xb0
   187d4:	cmp	r3, #2
   187d8:	beq	18ce8 <__assert_fail@plt+0x780c>
   187dc:	cmp	r3, #5
   187e0:	mov	r3, #0
   187e4:	str	r3, [sp, #40]	; 0x28
   187e8:	beq	18454 <__assert_fail@plt+0x6f78>
   187ec:	mov	r6, #0
   187f0:	mov	r5, #63	; 0x3f
   187f4:	b	18314 <__assert_fail@plt+0x6e38>
   187f8:	ldr	r3, [sp, #176]	; 0xb0
   187fc:	cmp	r3, #2
   18800:	beq	18c70 <__assert_fail@plt+0x7794>
   18804:	mov	r3, #0
   18808:	b	18498 <__assert_fail@plt+0x6fbc>
   1880c:	mov	r3, #0
   18810:	str	r3, [sp, #40]	; 0x28
   18814:	mov	r3, #114	; 0x72
   18818:	b	1815c <__assert_fail@plt+0x6c80>
   1881c:	mov	r3, #0
   18820:	mov	r6, r3
   18824:	str	r3, [sp, #40]	; 0x28
   18828:	b	18354 <__assert_fail@plt+0x6e78>
   1882c:	mov	r3, #0
   18830:	str	r3, [sp, #40]	; 0x28
   18834:	mov	r3, #110	; 0x6e
   18838:	b	1815c <__assert_fail@plt+0x6c80>
   1883c:	mov	r3, #0
   18840:	str	r3, [sp, #40]	; 0x28
   18844:	mov	r3, #98	; 0x62
   18848:	b	18168 <__assert_fail@plt+0x6c8c>
   1884c:	mov	r3, #0
   18850:	str	r3, [sp, #40]	; 0x28
   18854:	mov	r3, #97	; 0x61
   18858:	b	18168 <__assert_fail@plt+0x6c8c>
   1885c:	ldr	r3, [sp, #60]	; 0x3c
   18860:	cmp	r3, #0
   18864:	bne	18c54 <__assert_fail@plt+0x7778>
   18868:	ldr	r3, [sp, #92]	; 0x5c
   1886c:	cmp	r3, #0
   18870:	addne	r7, r7, #1
   18874:	bne	17a74 <__assert_fail@plt+0x6598>
   18878:	str	r3, [sp, #40]	; 0x28
   1887c:	b	18174 <__assert_fail@plt+0x6c98>
   18880:	mov	r3, #0
   18884:	str	r3, [sp, #40]	; 0x28
   18888:	mov	r3, #102	; 0x66
   1888c:	b	18168 <__assert_fail@plt+0x6c8c>
   18890:	mov	r3, #0
   18894:	str	r3, [sp, #40]	; 0x28
   18898:	ldr	r3, [sp, #76]	; 0x4c
   1889c:	cmp	r3, #1
   188a0:	bne	18d08 <__assert_fail@plt+0x782c>
   188a4:	bl	11368 <__ctype_b_loc@plt>
   188a8:	ldr	r2, [r0]
   188ac:	sxth	r3, r5
   188b0:	lsl	r3, r3, #1
   188b4:	ldr	r1, [sp, #76]	; 0x4c
   188b8:	ldrh	r3, [r2, r3]
   188bc:	mov	r0, r1
   188c0:	and	r3, r3, #16384	; 0x4000
   188c4:	cmp	r3, #0
   188c8:	ldr	r3, [sp, #60]	; 0x3c
   188cc:	movne	r6, #1
   188d0:	moveq	r6, #0
   188d4:	movne	r2, #0
   188d8:	andeq	r2, r3, #1
   188dc:	cmp	r2, #0
   188e0:	beq	18314 <__assert_fail@plt+0x6e38>
   188e4:	ldr	r2, [sp, #60]	; 0x3c
   188e8:	mov	r6, #0
   188ec:	add	r1, r0, r7
   188f0:	mov	ip, #39	; 0x27
   188f4:	str	r6, [sp, #100]	; 0x64
   188f8:	mov	r0, #0
   188fc:	ldr	lr, [sp, #36]	; 0x24
   18900:	str	r8, [sp, #36]	; 0x24
   18904:	ldr	r6, [sp, #40]	; 0x28
   18908:	ldr	r8, [sp, #44]	; 0x2c
   1890c:	b	189bc <__assert_fail@plt+0x74e0>
   18910:	cmp	r8, #0
   18914:	bne	18ef0 <__assert_fail@plt+0x7a14>
   18918:	ldr	r0, [sp, #52]	; 0x34
   1891c:	eor	r3, fp, #1
   18920:	ands	r3, r0, r3
   18924:	beq	18954 <__assert_fail@plt+0x7478>
   18928:	cmp	sl, r4
   1892c:	add	r0, r4, #1
   18930:	strbhi	ip, [r9, r4]
   18934:	cmp	sl, r0
   18938:	movhi	fp, #36	; 0x24
   1893c:	strbhi	fp, [r9, r0]
   18940:	add	r0, r4, #2
   18944:	mov	fp, r3
   18948:	cmp	sl, r0
   1894c:	add	r4, r4, #3
   18950:	strbhi	ip, [r9, r0]
   18954:	cmp	sl, r4
   18958:	movhi	r3, #92	; 0x5c
   1895c:	strbhi	r3, [r9, r4]
   18960:	add	r3, r4, #1
   18964:	cmp	sl, r3
   18968:	bls	18978 <__assert_fail@plt+0x749c>
   1896c:	lsr	r0, r5, #6
   18970:	add	r0, r0, #48	; 0x30
   18974:	strb	r0, [r9, r3]
   18978:	add	r3, r4, #2
   1897c:	cmp	sl, r3
   18980:	bls	18990 <__assert_fail@plt+0x74b4>
   18984:	ubfx	r0, r5, #3, #3
   18988:	add	r0, r0, #48	; 0x30
   1898c:	strb	r0, [r9, r3]
   18990:	add	r7, r7, #1
   18994:	and	r5, r5, #7
   18998:	cmp	r1, r7
   1899c:	add	r5, r5, #48	; 0x30
   189a0:	add	r4, r4, #3
   189a4:	bls	18f04 <__assert_fail@plt+0x7a28>
   189a8:	mov	r0, r2
   189ac:	cmp	sl, r4
   189b0:	strbhi	r5, [r9, r4]
   189b4:	add	r4, r4, #1
   189b8:	ldrb	r5, [lr, #1]!
   189bc:	cmp	r2, #0
   189c0:	bne	18910 <__assert_fail@plt+0x7434>
   189c4:	eor	r3, r0, #1
   189c8:	cmp	r6, #0
   189cc:	and	r3, r3, fp
   189d0:	uxtb	r3, r3
   189d4:	beq	189e8 <__assert_fail@plt+0x750c>
   189d8:	cmp	sl, r4
   189dc:	movhi	r6, #92	; 0x5c
   189e0:	strbhi	r6, [r9, r4]
   189e4:	add	r4, r4, #1
   189e8:	add	r7, r7, #1
   189ec:	cmp	r7, r1
   189f0:	bcs	18ee4 <__assert_fail@plt+0x7a08>
   189f4:	cmp	r3, #0
   189f8:	beq	18f28 <__assert_fail@plt+0x7a4c>
   189fc:	cmp	sl, r4
   18a00:	add	r3, r4, #1
   18a04:	mov	r6, #0
   18a08:	strbhi	ip, [r9, r4]
   18a0c:	cmp	sl, r3
   18a10:	add	r4, r4, #2
   18a14:	mov	fp, r6
   18a18:	strbhi	ip, [r9, r3]
   18a1c:	b	189ac <__assert_fail@plt+0x74d0>
   18a20:	ldr	r3, [sp, #36]	; 0x24
   18a24:	ldrb	r5, [r3]
   18a28:	cmp	r5, #126	; 0x7e
   18a2c:	ldrls	pc, [pc, r5, lsl #2]
   18a30:	b	18890 <__assert_fail@plt+0x73b4>
   18a34:	andeq	r8, r1, r4, asr ip
   18a38:	muleq	r1, r0, r8
   18a3c:	muleq	r1, r0, r8
   18a40:	muleq	r1, r0, r8
   18a44:	muleq	r1, r0, r8
   18a48:	muleq	r1, r0, r8
   18a4c:	muleq	r1, r0, r8
   18a50:	andeq	r8, r1, r8, asr #2
   18a54:	andeq	r8, r1, r0, asr #2
   18a58:	andeq	r8, r1, r0, asr #15
   18a5c:	andeq	r8, r1, r8, asr #24
   18a60:	andeq	r8, r1, r0, lsr #15
   18a64:	andeq	r7, r1, ip, ror #31
   18a68:	andeq	r8, r1, ip, lsr ip
   18a6c:	muleq	r1, r0, r8
   18a70:	muleq	r1, r0, r8
   18a74:	muleq	r1, r0, r8
   18a78:	muleq	r1, r0, r8
   18a7c:	muleq	r1, r0, r8
   18a80:	muleq	r1, r0, r8
   18a84:	muleq	r1, r0, r8
   18a88:	muleq	r1, r0, r8
   18a8c:	muleq	r1, r0, r8
   18a90:	muleq	r1, r0, r8
   18a94:	muleq	r1, r0, r8
   18a98:	muleq	r1, r0, r8
   18a9c:	muleq	r1, r0, r8
   18aa0:	muleq	r1, r0, r8
   18aa4:	muleq	r1, r0, r8
   18aa8:	muleq	r1, r0, r8
   18aac:	muleq	r1, r0, r8
   18ab0:	muleq	r1, r0, r8
   18ab4:			; <UNDEFINED> instruction: 0x000187b0
   18ab8:	andeq	r8, r1, r0, lsr ip
   18abc:	andeq	r8, r1, r0, lsr ip
   18ac0:	muleq	r1, r4, r7
   18ac4:	andeq	r8, r1, r0, lsr ip
   18ac8:	andeq	r8, r1, r4, lsl #15
   18acc:	andeq	r8, r1, r0, lsr ip
   18ad0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ad4:	andeq	r8, r1, r0, lsr ip
   18ad8:	andeq	r8, r1, r0, lsr ip
   18adc:	andeq	r8, r1, r0, lsr ip
   18ae0:	andeq	r8, r1, r4, lsl #15
   18ae4:	andeq	r8, r1, r4, lsl #15
   18ae8:	andeq	r8, r1, r4, lsl #15
   18aec:	andeq	r8, r1, r4, lsl #15
   18af0:	andeq	r8, r1, r4, lsl #15
   18af4:	andeq	r8, r1, r4, lsl #15
   18af8:	andeq	r8, r1, r4, lsl #15
   18afc:	andeq	r8, r1, r4, lsl #15
   18b00:	andeq	r8, r1, r4, lsl #15
   18b04:	andeq	r8, r1, r4, lsl #15
   18b08:	andeq	r8, r1, r4, lsl #15
   18b0c:	andeq	r8, r1, r4, lsl #15
   18b10:	andeq	r8, r1, r4, lsl #15
   18b14:	andeq	r8, r1, r4, lsl #15
   18b18:	andeq	r8, r1, r4, lsl #15
   18b1c:	andeq	r8, r1, r4, lsl #15
   18b20:	andeq	r8, r1, r0, lsr ip
   18b24:	andeq	r8, r1, r0, lsr ip
   18b28:	andeq	r8, r1, r0, lsr ip
   18b2c:	andeq	r8, r1, r0, lsr ip
   18b30:	ldrdeq	r8, [r1], -r0
   18b34:	muleq	r1, r0, r8
   18b38:	andeq	r8, r1, r4, lsl #15
   18b3c:	andeq	r8, r1, r4, lsl #15
   18b40:	andeq	r8, r1, r4, lsl #15
   18b44:	andeq	r8, r1, r4, lsl #15
   18b48:	andeq	r8, r1, r4, lsl #15
   18b4c:	andeq	r8, r1, r4, lsl #15
   18b50:	andeq	r8, r1, r4, lsl #15
   18b54:	andeq	r8, r1, r4, lsl #15
   18b58:	andeq	r8, r1, r4, lsl #15
   18b5c:	andeq	r8, r1, r4, lsl #15
   18b60:	andeq	r8, r1, r4, lsl #15
   18b64:	andeq	r8, r1, r4, lsl #15
   18b68:	andeq	r8, r1, r4, lsl #15
   18b6c:	andeq	r8, r1, r4, lsl #15
   18b70:	andeq	r8, r1, r4, lsl #15
   18b74:	andeq	r8, r1, r4, lsl #15
   18b78:	andeq	r8, r1, r4, lsl #15
   18b7c:	andeq	r8, r1, r4, lsl #15
   18b80:	andeq	r8, r1, r4, lsl #15
   18b84:	andeq	r8, r1, r4, lsl #15
   18b88:	andeq	r8, r1, r4, lsl #15
   18b8c:	andeq	r8, r1, r4, lsl #15
   18b90:	andeq	r8, r1, r4, lsl #15
   18b94:	andeq	r8, r1, r4, lsl #15
   18b98:	andeq	r8, r1, r4, lsl #15
   18b9c:	andeq	r8, r1, r4, lsl #15
   18ba0:	andeq	r8, r1, r0, lsr ip
   18ba4:	andeq	r8, r1, r0, asr r7
   18ba8:	andeq	r8, r1, r4, lsl #15
   18bac:	andeq	r8, r1, r0, lsr ip
   18bb0:	andeq	r8, r1, r4, lsl #15
   18bb4:	andeq	r8, r1, r0, lsr ip
   18bb8:	andeq	r8, r1, r4, lsl #15
   18bbc:	andeq	r8, r1, r4, lsl #15
   18bc0:	andeq	r8, r1, r4, lsl #15
   18bc4:	andeq	r8, r1, r4, lsl #15
   18bc8:	andeq	r8, r1, r4, lsl #15
   18bcc:	andeq	r8, r1, r4, lsl #15
   18bd0:	andeq	r8, r1, r4, lsl #15
   18bd4:	andeq	r8, r1, r4, lsl #15
   18bd8:	andeq	r8, r1, r4, lsl #15
   18bdc:	andeq	r8, r1, r4, lsl #15
   18be0:	andeq	r8, r1, r4, lsl #15
   18be4:	andeq	r8, r1, r4, lsl #15
   18be8:	andeq	r8, r1, r4, lsl #15
   18bec:	andeq	r8, r1, r4, lsl #15
   18bf0:	andeq	r8, r1, r4, lsl #15
   18bf4:	andeq	r8, r1, r4, lsl #15
   18bf8:	andeq	r8, r1, r4, lsl #15
   18bfc:	andeq	r8, r1, r4, lsl #15
   18c00:	andeq	r8, r1, r4, lsl #15
   18c04:	andeq	r8, r1, r4, lsl #15
   18c08:	andeq	r8, r1, r4, lsl #15
   18c0c:	andeq	r8, r1, r4, lsl #15
   18c10:	andeq	r8, r1, r4, lsl #15
   18c14:	andeq	r8, r1, r4, lsl #15
   18c18:	andeq	r8, r1, r4, lsl #15
   18c1c:	andeq	r8, r1, r4, lsl #15
   18c20:	andeq	r8, r1, ip, lsr #14
   18c24:	andeq	r8, r1, r0, lsr ip
   18c28:	andeq	r8, r1, ip, lsr #14
   18c2c:	muleq	r1, r4, r7
   18c30:	mov	r3, #0
   18c34:	str	r3, [sp, #40]	; 0x28
   18c38:	b	18310 <__assert_fail@plt+0x6e34>
   18c3c:	mov	r3, #0
   18c40:	str	r3, [sp, #40]	; 0x28
   18c44:	b	182a8 <__assert_fail@plt+0x6dcc>
   18c48:	mov	r3, #0
   18c4c:	str	r3, [sp, #40]	; 0x28
   18c50:	b	182dc <__assert_fail@plt+0x6e00>
   18c54:	ldr	r3, [sp, #44]	; 0x2c
   18c58:	cmp	r3, #0
   18c5c:	beq	181f4 <__assert_fail@plt+0x6d18>
   18c60:	ldr	r3, [sp, #52]	; 0x34
   18c64:	mov	fp, r9
   18c68:	str	r3, [sp, #60]	; 0x3c
   18c6c:	b	1836c <__assert_fail@plt+0x6e90>
   18c70:	ldr	r3, [sp, #44]	; 0x2c
   18c74:	cmp	r3, #0
   18c78:	bne	190ac <__assert_fail@plt+0x7bd0>
   18c7c:	str	r3, [sp, #40]	; 0x28
   18c80:	cmp	sl, #0
   18c84:	ldr	r3, [sp, #84]	; 0x54
   18c88:	clz	r3, r3
   18c8c:	lsr	r3, r3, #5
   18c90:	moveq	r3, #0
   18c94:	cmp	r3, #0
   18c98:	strne	sl, [sp, #84]	; 0x54
   18c9c:	movne	sl, #0
   18ca0:	bne	18cd0 <__assert_fail@plt+0x77f4>
   18ca4:	cmp	sl, r4
   18ca8:	movhi	r3, #39	; 0x27
   18cac:	strbhi	r3, [r9, r4]
   18cb0:	add	r3, r4, #1
   18cb4:	cmp	sl, r3
   18cb8:	movhi	r2, #92	; 0x5c
   18cbc:	strbhi	r2, [r9, r3]
   18cc0:	add	r3, r4, #2
   18cc4:	cmp	sl, r3
   18cc8:	movhi	r2, #39	; 0x27
   18ccc:	strbhi	r2, [r9, r3]
   18cd0:	mov	r3, #0
   18cd4:	add	r4, r4, #3
   18cd8:	str	r6, [sp, #80]	; 0x50
   18cdc:	mov	fp, r3
   18ce0:	mov	r5, #39	; 0x27
   18ce4:	b	181b0 <__assert_fail@plt+0x6cd4>
   18ce8:	ldr	r3, [sp, #44]	; 0x2c
   18cec:	cmp	r3, #0
   18cf0:	bne	190ac <__assert_fail@plt+0x7bd0>
   18cf4:	mov	r6, #0
   18cf8:	mov	r5, #63	; 0x3f
   18cfc:	str	r3, [sp, #40]	; 0x28
   18d00:	mov	r3, fp
   18d04:	b	181b0 <__assert_fail@plt+0x6cd4>
   18d08:	mov	r2, #0
   18d0c:	mov	r3, #0
   18d10:	cmn	r8, #1
   18d14:	strd	r2, [sp, #128]	; 0x80
   18d18:	bne	18d28 <__assert_fail@plt+0x784c>
   18d1c:	ldr	r0, [sp, #28]
   18d20:	bl	11380 <strlen@plt>
   18d24:	mov	r8, r0
   18d28:	str	r9, [sp, #100]	; 0x64
   18d2c:	mov	r3, #0
   18d30:	strd	sl, [sp, #104]	; 0x68
   18d34:	ldr	sl, [sp, #28]
   18d38:	str	r5, [sp, #112]	; 0x70
   18d3c:	mov	r5, r3
   18d40:	ldr	r9, [sp, #68]	; 0x44
   18d44:	str	r4, [sp, #116]	; 0x74
   18d48:	add	r4, r7, r5
   18d4c:	add	r3, sp, #128	; 0x80
   18d50:	add	fp, sl, r4
   18d54:	sub	r2, r8, r4
   18d58:	mov	r1, fp
   18d5c:	add	r0, sp, #124	; 0x7c
   18d60:	bl	1d688 <__assert_fail@plt+0xc1ac>
   18d64:	subs	r1, r0, #0
   18d68:	beq	18da8 <__assert_fail@plt+0x78cc>
   18d6c:	cmn	r1, #1
   18d70:	beq	19100 <__assert_fail@plt+0x7c24>
   18d74:	cmn	r1, #2
   18d78:	beq	19120 <__assert_fail@plt+0x7c44>
   18d7c:	cmp	r9, #0
   18d80:	bne	18dd8 <__assert_fail@plt+0x78fc>
   18d84:	ldr	r0, [sp, #124]	; 0x7c
   18d88:	add	r5, r5, r1
   18d8c:	bl	1126c <iswprint@plt>
   18d90:	cmp	r0, #0
   18d94:	add	r0, sp, #128	; 0x80
   18d98:	moveq	r6, #0
   18d9c:	bl	11200 <mbsinit@plt>
   18da0:	cmp	r0, #0
   18da4:	beq	18d48 <__assert_fail@plt+0x786c>
   18da8:	ldr	r3, [sp, #60]	; 0x3c
   18dac:	add	r9, sp, #100	; 0x64
   18db0:	mov	r0, r5
   18db4:	ldm	r9, {r9, sl, fp}
   18db8:	eor	r2, r6, #1
   18dbc:	ldr	r5, [sp, #112]	; 0x70
   18dc0:	and	r2, r2, r3
   18dc4:	uxtb	r2, r2
   18dc8:	ldr	r4, [sp, #116]	; 0x74
   18dcc:	cmp	r0, #1
   18dd0:	bhi	188ec <__assert_fail@plt+0x7410>
   18dd4:	b	188dc <__assert_fail@plt+0x7400>
   18dd8:	cmp	r1, #1
   18ddc:	beq	18d84 <__assert_fail@plt+0x78a8>
   18de0:	add	r2, r4, #1
   18de4:	add	r3, sl, r1
   18de8:	add	r2, sl, r2
   18dec:	add	r4, r3, r4
   18df0:	ldrb	r3, [r2], #1
   18df4:	sub	r3, r3, #91	; 0x5b
   18df8:	cmp	r3, #33	; 0x21
   18dfc:	ldrls	pc, [pc, r3, lsl #2]
   18e00:	b	18e8c <__assert_fail@plt+0x79b0>
   18e04:	muleq	r1, r8, lr
   18e08:	muleq	r1, r8, lr
   18e0c:	andeq	r8, r1, ip, lsl #29
   18e10:	muleq	r1, r8, lr
   18e14:	andeq	r8, r1, ip, lsl #29
   18e18:	muleq	r1, r8, lr
   18e1c:	andeq	r8, r1, ip, lsl #29
   18e20:	andeq	r8, r1, ip, lsl #29
   18e24:	andeq	r8, r1, ip, lsl #29
   18e28:	andeq	r8, r1, ip, lsl #29
   18e2c:	andeq	r8, r1, ip, lsl #29
   18e30:	andeq	r8, r1, ip, lsl #29
   18e34:	andeq	r8, r1, ip, lsl #29
   18e38:	andeq	r8, r1, ip, lsl #29
   18e3c:	andeq	r8, r1, ip, lsl #29
   18e40:	andeq	r8, r1, ip, lsl #29
   18e44:	andeq	r8, r1, ip, lsl #29
   18e48:	andeq	r8, r1, ip, lsl #29
   18e4c:	andeq	r8, r1, ip, lsl #29
   18e50:	andeq	r8, r1, ip, lsl #29
   18e54:	andeq	r8, r1, ip, lsl #29
   18e58:	andeq	r8, r1, ip, lsl #29
   18e5c:	andeq	r8, r1, ip, lsl #29
   18e60:	andeq	r8, r1, ip, lsl #29
   18e64:	andeq	r8, r1, ip, lsl #29
   18e68:	andeq	r8, r1, ip, lsl #29
   18e6c:	andeq	r8, r1, ip, lsl #29
   18e70:	andeq	r8, r1, ip, lsl #29
   18e74:	andeq	r8, r1, ip, lsl #29
   18e78:	andeq	r8, r1, ip, lsl #29
   18e7c:	andeq	r8, r1, ip, lsl #29
   18e80:	andeq	r8, r1, ip, lsl #29
   18e84:	andeq	r8, r1, ip, lsl #29
   18e88:	muleq	r1, r8, lr
   18e8c:	cmp	r4, r2
   18e90:	bne	18df0 <__assert_fail@plt+0x7914>
   18e94:	b	18d84 <__assert_fail@plt+0x78a8>
   18e98:	mov	r3, #2
   18e9c:	ldr	fp, [sp, #100]	; 0x64
   18ea0:	str	r3, [sp, #176]	; 0xb0
   18ea4:	ldr	sl, [sp, #104]	; 0x68
   18ea8:	b	1836c <__assert_fail@plt+0x6e90>
   18eac:	ldr	r2, [sp, #52]	; 0x34
   18eb0:	mov	fp, r9
   18eb4:	ldr	r3, [sp, #60]	; 0x3c
   18eb8:	and	r3, r3, r2
   18ebc:	str	r3, [sp, #60]	; 0x3c
   18ec0:	b	1836c <__assert_fail@plt+0x6e90>
   18ec4:	cmp	sl, r4
   18ec8:	movhi	r2, fp
   18ecc:	bhi	18244 <__assert_fail@plt+0x6d68>
   18ed0:	mov	r2, r4
   18ed4:	b	18254 <__assert_fail@plt+0x6d78>
   18ed8:	mov	r6, r3
   18edc:	mov	r5, #63	; 0x3f
   18ee0:	b	18314 <__assert_fail@plt+0x6e38>
   18ee4:	ldr	r8, [sp, #36]	; 0x24
   18ee8:	ldr	r6, [sp, #100]	; 0x64
   18eec:	b	181c0 <__assert_fail@plt+0x6ce4>
   18ef0:	mov	fp, r9
   18ef4:	ldr	r8, [sp, #36]	; 0x24
   18ef8:	ldr	r3, [sp, #52]	; 0x34
   18efc:	str	r3, [sp, #60]	; 0x3c
   18f00:	b	1836c <__assert_fail@plt+0x6e90>
   18f04:	ldr	r8, [sp, #36]	; 0x24
   18f08:	ldr	r6, [sp, #100]	; 0x64
   18f0c:	b	18058 <__assert_fail@plt+0x6b7c>
   18f10:	mov	r3, #0
   18f14:	add	r4, r4, #4
   18f18:	mov	fp, r2
   18f1c:	mov	r6, r3
   18f20:	mov	r5, #48	; 0x30
   18f24:	b	181b0 <__assert_fail@plt+0x6cd4>
   18f28:	mov	r6, r3
   18f2c:	b	189ac <__assert_fail@plt+0x74d0>
   18f30:	mov	r3, #1
   18f34:	movw	r2, #64352	; 0xfb60
   18f38:	movt	r2, #1
   18f3c:	mov	r4, r3
   18f40:	mov	r9, sl
   18f44:	str	r3, [sp, #32]
   18f48:	str	sl, [sp, #44]	; 0x2c
   18f4c:	str	r3, [sp, #48]	; 0x30
   18f50:	str	sl, [sp, #52]	; 0x34
   18f54:	str	r3, [sp, #56]	; 0x38
   18f58:	str	r3, [sp, #60]	; 0x3c
   18f5c:	str	sl, [sp, #64]	; 0x40
   18f60:	str	sl, [sp, #68]	; 0x44
   18f64:	str	r2, [sp, #72]	; 0x48
   18f68:	str	sl, [sp, #80]	; 0x50
   18f6c:	str	sl, [sp, #84]	; 0x54
   18f70:	str	sl, [sp, #88]	; 0x58
   18f74:	b	17a64 <__assert_fail@plt+0x6588>
   18f78:	mov	r3, #0
   18f7c:	mov	r5, #48	; 0x30
   18f80:	mov	r6, r3
   18f84:	b	181b0 <__assert_fail@plt+0x6cd4>
   18f88:	cmp	sl, r4
   18f8c:	mov	r5, #48	; 0x30
   18f90:	movhi	r3, #48	; 0x30
   18f94:	strbhi	r3, [r9, r4]
   18f98:	add	r3, r2, #2
   18f9c:	add	r4, r2, #3
   18fa0:	cmp	sl, r3
   18fa4:	movhi	r1, #48	; 0x30
   18fa8:	strbhi	r1, [r9, r3]
   18fac:	mov	r3, #0
   18fb0:	b	1828c <__assert_fail@plt+0x6db0>
   18fb4:	ldr	r3, [sp, #48]	; 0x30
   18fb8:	str	r3, [sp, #40]	; 0x28
   18fbc:	b	18898 <__assert_fail@plt+0x73bc>
   18fc0:	ldr	r2, [sp, #28]
   18fc4:	ldrb	r2, [r2, r3]
   18fc8:	sub	r1, r2, #33	; 0x21
   18fcc:	cmp	r1, #29
   18fd0:	ldrls	pc, [pc, r1, lsl #2]
   18fd4:	b	18310 <__assert_fail@plt+0x6e34>
   18fd8:	andeq	r9, r1, r0, asr r0
   18fdc:	andeq	r8, r1, r0, lsl r3
   18fe0:	andeq	r8, r1, r0, lsl r3
   18fe4:	andeq	r8, r1, r0, lsl r3
   18fe8:	andeq	r8, r1, r0, lsl r3
   18fec:	andeq	r8, r1, r0, lsl r3
   18ff0:	andeq	r9, r1, r0, asr r0
   18ff4:	andeq	r9, r1, r0, asr r0
   18ff8:	andeq	r9, r1, r0, asr r0
   18ffc:	andeq	r8, r1, r0, lsl r3
   19000:	andeq	r8, r1, r0, lsl r3
   19004:	andeq	r8, r1, r0, lsl r3
   19008:	andeq	r9, r1, r0, asr r0
   1900c:	andeq	r8, r1, r0, lsl r3
   19010:	andeq	r9, r1, r0, asr r0
   19014:	andeq	r8, r1, r0, lsl r3
   19018:	andeq	r8, r1, r0, lsl r3
   1901c:	andeq	r8, r1, r0, lsl r3
   19020:	andeq	r8, r1, r0, lsl r3
   19024:	andeq	r8, r1, r0, lsl r3
   19028:	andeq	r8, r1, r0, lsl r3
   1902c:	andeq	r8, r1, r0, lsl r3
   19030:	andeq	r8, r1, r0, lsl r3
   19034:	andeq	r8, r1, r0, lsl r3
   19038:	andeq	r8, r1, r0, lsl r3
   1903c:	andeq	r8, r1, r0, lsl r3
   19040:	andeq	r8, r1, r0, lsl r3
   19044:	andeq	r9, r1, r0, asr r0
   19048:	andeq	r9, r1, r0, asr r0
   1904c:	andeq	r9, r1, r0, asr r0
   19050:	ldr	r1, [sp, #44]	; 0x2c
   19054:	cmp	r1, #0
   19058:	bne	192b8 <__assert_fail@plt+0x7ddc>
   1905c:	cmp	sl, r4
   19060:	mov	r7, r3
   19064:	movhi	r1, #63	; 0x3f
   19068:	mov	r5, r2
   1906c:	mov	r3, fp
   19070:	strbhi	r1, [r9, r4]
   19074:	add	r1, r4, #1
   19078:	cmp	sl, r1
   1907c:	movhi	r0, #34	; 0x22
   19080:	strbhi	r0, [r9, r1]
   19084:	add	r1, r4, #2
   19088:	cmp	sl, r1
   1908c:	movhi	r0, #34	; 0x22
   19090:	strbhi	r0, [r9, r1]
   19094:	add	r1, r4, #3
   19098:	add	r4, r4, #4
   1909c:	cmp	sl, r1
   190a0:	movhi	r0, #63	; 0x3f
   190a4:	strbhi	r0, [r9, r1]
   190a8:	b	1828c <__assert_fail@plt+0x6db0>
   190ac:	mov	fp, r9
   190b0:	b	1836c <__assert_fail@plt+0x6e90>
   190b4:	ldr	r3, [sp, #188]	; 0xbc
   190b8:	ldrb	r3, [r3]
   190bc:	cmp	r3, #0
   190c0:	beq	179fc <__assert_fail@plt+0x6520>
   190c4:	ldr	r2, [sp, #188]	; 0xbc
   190c8:	cmp	sl, r4
   190cc:	bls	190ec <__assert_fail@plt+0x7c10>
   190d0:	strb	r3, [fp, r4]
   190d4:	add	r4, r4, #1
   190d8:	ldrb	r3, [r2, #1]!
   190dc:	cmp	r3, #0
   190e0:	beq	179fc <__assert_fail@plt+0x6520>
   190e4:	cmp	sl, r4
   190e8:	bhi	190d0 <__assert_fail@plt+0x7bf4>
   190ec:	ldrb	r3, [r2, #1]!
   190f0:	add	r4, r4, #1
   190f4:	cmp	r3, #0
   190f8:	bne	190c8 <__assert_fail@plt+0x7bec>
   190fc:	b	179fc <__assert_fail@plt+0x6520>
   19100:	add	r9, sp, #100	; 0x64
   19104:	mov	r0, r5
   19108:	ldr	r2, [sp, #60]	; 0x3c
   1910c:	mov	r6, #0
   19110:	ldm	r9, {r9, sl, fp}
   19114:	ldr	r5, [sp, #112]	; 0x70
   19118:	ldr	r4, [sp, #116]	; 0x74
   1911c:	b	18dcc <__assert_fail@plt+0x78f0>
   19120:	cmp	r4, r8
   19124:	add	r9, sp, #100	; 0x64
   19128:	mov	r1, r4
   1912c:	mov	r2, fp
   19130:	ldm	r9, {r9, sl, fp}
   19134:	mov	r3, r5
   19138:	mov	r0, r5
   1913c:	ldr	r5, [sp, #112]	; 0x70
   19140:	ldr	r4, [sp, #116]	; 0x74
   19144:	bcs	19178 <__assert_fail@plt+0x7c9c>
   19148:	ldrb	r6, [r2]
   1914c:	cmp	r6, #0
   19150:	bne	19164 <__assert_fail@plt+0x7c88>
   19154:	b	192b0 <__assert_fail@plt+0x7dd4>
   19158:	ldrb	r6, [r2, #1]!
   1915c:	cmp	r6, #0
   19160:	beq	19248 <__assert_fail@plt+0x7d6c>
   19164:	add	r3, r3, #1
   19168:	add	r1, r7, r3
   1916c:	cmp	r8, r1
   19170:	bhi	19158 <__assert_fail@plt+0x7c7c>
   19174:	mov	r0, r3
   19178:	mov	r6, #0
   1917c:	ldr	r2, [sp, #60]	; 0x3c
   19180:	b	18dcc <__assert_fail@plt+0x78f0>
   19184:	mov	r3, #1
   19188:	mov	r4, #0
   1918c:	mov	r9, r4
   19190:	str	r3, [sp, #32]
   19194:	str	r3, [sp, #44]	; 0x2c
   19198:	str	r3, [sp, #48]	; 0x30
   1919c:	str	r4, [sp, #52]	; 0x34
   191a0:	str	r3, [sp, #56]	; 0x38
   191a4:	str	r3, [sp, #60]	; 0x3c
   191a8:	str	r3, [sp, #88]	; 0x58
   191ac:	movw	r3, #64352	; 0xfb60
   191b0:	movt	r3, #1
   191b4:	str	r4, [sp, #64]	; 0x40
   191b8:	str	r4, [sp, #68]	; 0x44
   191bc:	str	r3, [sp, #72]	; 0x48
   191c0:	str	r4, [sp, #80]	; 0x50
   191c4:	str	r4, [sp, #84]	; 0x54
   191c8:	b	17a64 <__assert_fail@plt+0x6588>
   191cc:	mov	fp, r9
   191d0:	b	18380 <__assert_fail@plt+0x6ea4>
   191d4:	ldr	r3, [sp, #48]	; 0x30
   191d8:	b	18cf4 <__assert_fail@plt+0x7818>
   191dc:	mov	r2, r3
   191e0:	ldr	r3, [sp, #72]	; 0x48
   191e4:	cmp	r3, #0
   191e8:	moveq	r2, #0
   191ec:	andne	r2, r2, #1
   191f0:	cmp	r2, #0
   191f4:	beq	19224 <__assert_fail@plt+0x7d48>
   191f8:	mov	r2, r3
   191fc:	ldrb	r3, [r3]
   19200:	cmp	r3, #0
   19204:	beq	19224 <__assert_fail@plt+0x7d48>
   19208:	cmp	sl, r4
   1920c:	bls	19234 <__assert_fail@plt+0x7d58>
   19210:	strb	r3, [fp, r4]
   19214:	add	r4, r4, #1
   19218:	ldrb	r3, [r2, #1]!
   1921c:	cmp	r3, #0
   19220:	bne	19208 <__assert_fail@plt+0x7d2c>
   19224:	cmp	sl, r4
   19228:	movhi	r3, #0
   1922c:	strbhi	r3, [fp, r4]
   19230:	b	183bc <__assert_fail@plt+0x6ee0>
   19234:	ldrb	r3, [r2, #1]!
   19238:	add	r4, r4, #1
   1923c:	cmp	r3, #0
   19240:	bne	19208 <__assert_fail@plt+0x7d2c>
   19244:	b	19224 <__assert_fail@plt+0x7d48>
   19248:	mov	r0, r3
   1924c:	ldr	r2, [sp, #60]	; 0x3c
   19250:	b	18dcc <__assert_fail@plt+0x78f0>
   19254:	mov	ip, #5
   19258:	mov	r3, r8
   1925c:	ldr	r1, [sp, #84]	; 0x54
   19260:	str	ip, [sp]
   19264:	ldr	r2, [sp, #180]	; 0xb4
   19268:	ldr	ip, [sp, #188]	; 0xbc
   1926c:	ldr	r0, [sp, #184]	; 0xb8
   19270:	str	r2, [sp, #4]
   19274:	ldr	r2, [sp, #28]
   19278:	str	ip, [sp, #12]
   1927c:	ldr	ip, [sp, #192]	; 0xc0
   19280:	str	r0, [sp, #8]
   19284:	mov	r0, fp
   19288:	str	ip, [sp, #16]
   1928c:	bl	17940 <__assert_fail@plt+0x6464>
   19290:	mov	r4, r0
   19294:	b	183bc <__assert_fail@plt+0x6ee0>
   19298:	mov	r6, r3
   1929c:	str	r3, [sp, #40]	; 0x28
   192a0:	b	1832c <__assert_fail@plt+0x6e50>
   192a4:	mov	r3, #2
   192a8:	str	r3, [sp, #176]	; 0xb0
   192ac:	b	1836c <__assert_fail@plt+0x6e90>
   192b0:	ldr	r2, [sp, #60]	; 0x3c
   192b4:	b	18dcc <__assert_fail@plt+0x78f0>
   192b8:	mov	r3, #5
   192bc:	mov	fp, r9
   192c0:	str	r3, [sp, #176]	; 0xb0
   192c4:	b	18380 <__assert_fail@plt+0x6ea4>
   192c8:	mov	r1, #1
   192cc:	mov	r9, #0
   192d0:	mov	r3, r9
   192d4:	mov	r2, r9
   192d8:	str	r1, [sp, #32]
   192dc:	str	sl, [sp, #84]	; 0x54
   192e0:	b	18108 <__assert_fail@plt+0x6c2c>
   192e4:	mov	r3, #0
   192e8:	mov	r2, #1
   192ec:	mov	r9, r3
   192f0:	mov	r4, r3
   192f4:	str	r2, [sp, #32]
   192f8:	strd	r2, [sp, #44]	; 0x2c
   192fc:	strd	r2, [sp, #56]	; 0x38
   19300:	str	r3, [sp, #80]	; 0x50
   19304:	str	r3, [sp, #84]	; 0x54
   19308:	str	r3, [sp, #88]	; 0x58
   1930c:	movw	r3, #64372	; 0xfb74
   19310:	movt	r3, #1
   19314:	str	r2, [sp, #52]	; 0x34
   19318:	str	r2, [sp, #64]	; 0x40
   1931c:	str	r2, [sp, #68]	; 0x44
   19320:	str	r3, [sp, #72]	; 0x48
   19324:	b	17a64 <__assert_fail@plt+0x6588>
   19328:	bl	114ac <abort@plt>
   1932c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19330:	mov	r4, r0
   19334:	mov	r5, r3
   19338:	strd	r6, [sp, #8]
   1933c:	movw	r7, #4480	; 0x1180
   19340:	movt	r7, #3
   19344:	strd	r8, [sp, #16]
   19348:	strd	sl, [sp, #24]
   1934c:	mov	sl, r1
   19350:	mov	fp, r2
   19354:	str	lr, [sp, #32]
   19358:	sub	sp, sp, #60	; 0x3c
   1935c:	bl	113a4 <__errno_location@plt>
   19360:	mov	r8, r0
   19364:	cmn	r4, #-2147483647	; 0x80000001
   19368:	ldr	r6, [r7]
   1936c:	movne	r0, #0
   19370:	moveq	r0, #1
   19374:	ldr	r3, [r8]
   19378:	orrs	r0, r0, r4, lsr #31
   1937c:	str	r3, [sp, #28]
   19380:	bne	19510 <__assert_fail@plt+0x8034>
   19384:	ldr	r3, [r7, #4]
   19388:	cmp	r3, r4
   1938c:	bgt	193ec <__assert_fail@plt+0x7f10>
   19390:	add	r1, r7, #8
   19394:	sub	r2, r4, r3
   19398:	str	r3, [sp, #52]	; 0x34
   1939c:	cmp	r6, r1
   193a0:	add	r2, r2, #1
   193a4:	beq	194e8 <__assert_fail@plt+0x800c>
   193a8:	mov	r1, #8
   193ac:	mov	r0, r6
   193b0:	mvn	r3, #-2147483648	; 0x80000000
   193b4:	str	r1, [sp]
   193b8:	add	r1, sp, #52	; 0x34
   193bc:	bl	1bda0 <__assert_fail@plt+0xa8c4>
   193c0:	mov	r6, r0
   193c4:	str	r0, [r7]
   193c8:	ldr	r0, [r7, #4]
   193cc:	mov	r1, #0
   193d0:	ldr	r2, [sp, #52]	; 0x34
   193d4:	sub	r2, r2, r0
   193d8:	add	r0, r6, r0, lsl #3
   193dc:	lsl	r2, r2, #3
   193e0:	bl	113d4 <memset@plt>
   193e4:	ldr	r3, [sp, #52]	; 0x34
   193e8:	str	r3, [r7, #4]
   193ec:	ldr	r1, [r5, #4]
   193f0:	add	r0, r6, r4, lsl #3
   193f4:	add	ip, r5, #8
   193f8:	mov	r3, fp
   193fc:	mov	r2, sl
   19400:	ldr	r7, [r0, #4]
   19404:	str	r0, [sp, #36]	; 0x24
   19408:	str	ip, [sp, #40]	; 0x28
   1940c:	orr	r0, r1, #1
   19410:	ldr	r9, [r6, r4, lsl #3]
   19414:	str	ip, [sp, #8]
   19418:	ldr	lr, [r5, #44]	; 0x2c
   1941c:	str	r0, [sp, #4]
   19420:	ldr	ip, [r5]
   19424:	mov	r1, r9
   19428:	str	ip, [sp, #32]
   1942c:	ldr	ip, [r5, #40]	; 0x28
   19430:	str	ip, [sp, #12]
   19434:	ldr	ip, [sp, #32]
   19438:	str	lr, [sp, #16]
   1943c:	str	r0, [sp, #44]	; 0x2c
   19440:	mov	r0, r7
   19444:	str	ip, [sp]
   19448:	bl	17940 <__assert_fail@plt+0x6464>
   1944c:	cmp	r9, r0
   19450:	bhi	194c0 <__assert_fail@plt+0x7fe4>
   19454:	add	r9, r0, #1
   19458:	movw	r3, #5208	; 0x1458
   1945c:	movt	r3, #3
   19460:	cmp	r7, r3
   19464:	str	r9, [r6, r4, lsl #3]
   19468:	beq	19474 <__assert_fail@plt+0x7f98>
   1946c:	mov	r0, r7
   19470:	bl	1d5dc <__assert_fail@plt+0xc100>
   19474:	mov	r0, r9
   19478:	bl	1bafc <__assert_fail@plt+0xa620>
   1947c:	ldr	ip, [r5]
   19480:	mov	r3, fp
   19484:	mov	r2, sl
   19488:	mov	r1, r9
   1948c:	mov	r7, r0
   19490:	ldr	lr, [sp, #36]	; 0x24
   19494:	ldr	r4, [r5, #40]	; 0x28
   19498:	str	r0, [lr, #4]
   1949c:	ldr	lr, [r5, #44]	; 0x2c
   194a0:	str	ip, [sp]
   194a4:	ldr	ip, [sp, #44]	; 0x2c
   194a8:	str	ip, [sp, #4]
   194ac:	ldr	ip, [sp, #40]	; 0x28
   194b0:	str	r4, [sp, #12]
   194b4:	str	lr, [sp, #16]
   194b8:	str	ip, [sp, #8]
   194bc:	bl	17940 <__assert_fail@plt+0x6464>
   194c0:	ldr	r3, [sp, #28]
   194c4:	mov	r0, r7
   194c8:	str	r3, [r8]
   194cc:	add	sp, sp, #60	; 0x3c
   194d0:	ldrd	r4, [sp]
   194d4:	ldrd	r6, [sp, #8]
   194d8:	ldrd	r8, [sp, #16]
   194dc:	ldrd	sl, [sp, #24]
   194e0:	add	sp, sp, #32
   194e4:	pop	{pc}		; (ldr pc, [sp], #4)
   194e8:	mov	r1, #8
   194ec:	mvn	r3, #-2147483648	; 0x80000000
   194f0:	str	r1, [sp]
   194f4:	add	r1, sp, #52	; 0x34
   194f8:	bl	1bda0 <__assert_fail@plt+0xa8c4>
   194fc:	ldrd	r2, [r7, #8]
   19500:	mov	r6, r0
   19504:	str	r0, [r7]
   19508:	strd	r2, [r0]
   1950c:	b	193c8 <__assert_fail@plt+0x7eec>
   19510:	bl	114ac <abort@plt>
   19514:	strd	r4, [sp, #-16]!
   19518:	mov	r5, r0
   1951c:	str	r6, [sp, #8]
   19520:	str	lr, [sp, #12]
   19524:	bl	113a4 <__errno_location@plt>
   19528:	mov	r4, r0
   1952c:	cmp	r5, #0
   19530:	ldr	r0, [pc, #32]	; 19558 <__assert_fail@plt+0x807c>
   19534:	mov	r1, #48	; 0x30
   19538:	movne	r0, r5
   1953c:	ldr	r6, [r4]
   19540:	bl	1bf40 <__assert_fail@plt+0xaa64>
   19544:	str	r6, [r4]
   19548:	ldrd	r4, [sp]
   1954c:	ldr	r6, [sp, #8]
   19550:	add	sp, sp, #12
   19554:	pop	{pc}		; (ldr pc, [sp], #4)
   19558:	andeq	r1, r3, r8, asr r5
   1955c:	ldr	r3, [pc, #12]	; 19570 <__assert_fail@plt+0x8094>
   19560:	cmp	r0, #0
   19564:	moveq	r0, r3
   19568:	ldr	r0, [r0]
   1956c:	bx	lr
   19570:	andeq	r1, r3, r8, asr r5
   19574:	ldr	r3, [pc, #12]	; 19588 <__assert_fail@plt+0x80ac>
   19578:	cmp	r0, #0
   1957c:	moveq	r0, r3
   19580:	str	r1, [r0]
   19584:	bx	lr
   19588:	andeq	r1, r3, r8, asr r5
   1958c:	ldr	r3, [pc, #52]	; 195c8 <__assert_fail@plt+0x80ec>
   19590:	cmp	r0, #0
   19594:	push	{lr}		; (str lr, [sp, #-4]!)
   19598:	lsr	lr, r1, #5
   1959c:	and	r1, r1, #31
   195a0:	moveq	r0, r3
   195a4:	add	r3, r0, #8
   195a8:	ldr	ip, [r3, lr, lsl #2]
   195ac:	lsr	r0, ip, r1
   195b0:	eor	r2, r2, r0
   195b4:	and	r0, r0, #1
   195b8:	and	r2, r2, #1
   195bc:	eor	r1, ip, r2, lsl r1
   195c0:	str	r1, [r3, lr, lsl #2]
   195c4:	pop	{pc}		; (ldr pc, [sp], #4)
   195c8:	andeq	r1, r3, r8, asr r5
   195cc:	ldr	r3, [pc, #16]	; 195e4 <__assert_fail@plt+0x8108>
   195d0:	cmp	r0, #0
   195d4:	movne	r3, r0
   195d8:	ldr	r0, [r3, #4]
   195dc:	str	r1, [r3, #4]
   195e0:	bx	lr
   195e4:	andeq	r1, r3, r8, asr r5
   195e8:	ldr	r3, [pc, #48]	; 19620 <__assert_fail@plt+0x8144>
   195ec:	cmp	r0, #0
   195f0:	mov	ip, #10
   195f4:	moveq	r0, r3
   195f8:	cmp	r2, #0
   195fc:	cmpne	r1, #0
   19600:	str	ip, [r0]
   19604:	beq	19614 <__assert_fail@plt+0x8138>
   19608:	str	r1, [r0, #40]	; 0x28
   1960c:	str	r2, [r0, #44]	; 0x2c
   19610:	bx	lr
   19614:	str	r4, [sp, #-8]!
   19618:	str	lr, [sp, #4]
   1961c:	bl	114ac <abort@plt>
   19620:	andeq	r1, r3, r8, asr r5
   19624:	strd	r4, [sp, #-28]!	; 0xffffffe4
   19628:	strd	r6, [sp, #8]
   1962c:	mov	r7, r0
   19630:	mov	r6, r1
   19634:	strd	r8, [sp, #16]
   19638:	mov	r8, r2
   1963c:	mov	r9, r3
   19640:	str	lr, [sp, #24]
   19644:	sub	sp, sp, #28
   19648:	ldr	r4, [sp, #56]	; 0x38
   1964c:	ldr	ip, [pc, #104]	; 196bc <__assert_fail@plt+0x81e0>
   19650:	cmp	r4, #0
   19654:	moveq	r4, ip
   19658:	bl	113a4 <__errno_location@plt>
   1965c:	ldr	ip, [r4, #44]	; 0x2c
   19660:	mov	r5, r0
   19664:	mov	r1, r6
   19668:	add	lr, r4, #8
   1966c:	mov	r3, r9
   19670:	ldr	r6, [r5]
   19674:	mov	r2, r8
   19678:	mov	r0, r7
   1967c:	str	ip, [sp, #16]
   19680:	ldr	ip, [r4, #40]	; 0x28
   19684:	str	lr, [sp, #8]
   19688:	str	ip, [sp, #12]
   1968c:	ldr	ip, [r4, #4]
   19690:	str	ip, [sp, #4]
   19694:	ldr	ip, [r4]
   19698:	str	ip, [sp]
   1969c:	bl	17940 <__assert_fail@plt+0x6464>
   196a0:	str	r6, [r5]
   196a4:	add	sp, sp, #28
   196a8:	ldrd	r4, [sp]
   196ac:	ldrd	r6, [sp, #8]
   196b0:	ldrd	r8, [sp, #16]
   196b4:	add	sp, sp, #24
   196b8:	pop	{pc}		; (ldr pc, [sp], #4)
   196bc:	andeq	r1, r3, r8, asr r5
   196c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   196c4:	cmp	r2, #0
   196c8:	ldr	r4, [pc, #192]	; 19790 <__assert_fail@plt+0x82b4>
   196cc:	movne	r4, r2
   196d0:	strd	r6, [sp, #8]
   196d4:	strd	r8, [sp, #16]
   196d8:	mov	r9, r1
   196dc:	mov	r8, r0
   196e0:	strd	sl, [sp, #24]
   196e4:	str	lr, [sp, #32]
   196e8:	sub	sp, sp, #36	; 0x24
   196ec:	bl	113a4 <__errno_location@plt>
   196f0:	ldr	r5, [r4, #4]
   196f4:	mov	r6, r0
   196f8:	add	r7, r4, #8
   196fc:	mov	r1, #0
   19700:	mov	r3, r9
   19704:	ldr	ip, [r4, #44]	; 0x2c
   19708:	mov	r2, r8
   1970c:	mov	r0, r1
   19710:	ldr	sl, [r6]
   19714:	orr	r5, r5, #1
   19718:	str	ip, [sp, #16]
   1971c:	ldr	ip, [r4, #40]	; 0x28
   19720:	stmib	sp, {r5, r7, ip}
   19724:	ldr	ip, [r4]
   19728:	str	ip, [sp]
   1972c:	bl	17940 <__assert_fail@plt+0x6464>
   19730:	add	r1, r0, #1
   19734:	mov	r0, r1
   19738:	str	r1, [sp, #28]
   1973c:	bl	1bafc <__assert_fail@plt+0xa620>
   19740:	ldr	ip, [r4, #44]	; 0x2c
   19744:	mov	fp, r0
   19748:	mov	r3, r9
   1974c:	mov	r2, r8
   19750:	ldr	r1, [sp, #28]
   19754:	str	ip, [sp, #16]
   19758:	ldr	ip, [r4, #40]	; 0x28
   1975c:	stmib	sp, {r5, r7, ip}
   19760:	ldr	ip, [r4]
   19764:	str	ip, [sp]
   19768:	bl	17940 <__assert_fail@plt+0x6464>
   1976c:	mov	r0, fp
   19770:	str	sl, [r6]
   19774:	add	sp, sp, #36	; 0x24
   19778:	ldrd	r4, [sp]
   1977c:	ldrd	r6, [sp, #8]
   19780:	ldrd	r8, [sp, #16]
   19784:	ldrd	sl, [sp, #24]
   19788:	add	sp, sp, #32
   1978c:	pop	{pc}		; (ldr pc, [sp], #4)
   19790:	andeq	r1, r3, r8, asr r5
   19794:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19798:	cmp	r3, #0
   1979c:	ldr	r4, [pc, #220]	; 19880 <__assert_fail@plt+0x83a4>
   197a0:	movne	r4, r3
   197a4:	strd	r6, [sp, #8]
   197a8:	mov	r6, r2
   197ac:	strd	r8, [sp, #16]
   197b0:	mov	r9, r0
   197b4:	strd	sl, [sp, #24]
   197b8:	mov	sl, r1
   197bc:	str	lr, [sp, #32]
   197c0:	sub	sp, sp, #44	; 0x2c
   197c4:	bl	113a4 <__errno_location@plt>
   197c8:	ldr	r5, [r4, #4]
   197cc:	mov	r7, r0
   197d0:	mov	r1, #0
   197d4:	add	r8, r4, #8
   197d8:	mov	r3, sl
   197dc:	ldr	ip, [r4, #44]	; 0x2c
   197e0:	mov	r2, r9
   197e4:	mov	r0, r1
   197e8:	ldr	lr, [r7]
   197ec:	cmp	r6, r1
   197f0:	orreq	r5, r5, #1
   197f4:	str	ip, [sp, #16]
   197f8:	ldr	ip, [r4, #40]	; 0x28
   197fc:	stmib	sp, {r5, r8, ip}
   19800:	ldr	ip, [r4]
   19804:	str	lr, [sp, #28]
   19808:	str	ip, [sp]
   1980c:	bl	17940 <__assert_fail@plt+0x6464>
   19810:	add	r1, r0, #1
   19814:	mov	fp, r0
   19818:	mov	r0, r1
   1981c:	str	r1, [sp, #36]	; 0x24
   19820:	bl	1bafc <__assert_fail@plt+0xa620>
   19824:	ldr	ip, [r4, #44]	; 0x2c
   19828:	mov	r3, sl
   1982c:	mov	r2, r9
   19830:	ldr	r1, [sp, #36]	; 0x24
   19834:	str	ip, [sp, #16]
   19838:	ldr	ip, [r4, #40]	; 0x28
   1983c:	str	r0, [sp, #32]
   19840:	stmib	sp, {r5, r8, ip}
   19844:	ldr	ip, [r4]
   19848:	str	ip, [sp]
   1984c:	bl	17940 <__assert_fail@plt+0x6464>
   19850:	ldr	lr, [sp, #28]
   19854:	cmp	r6, #0
   19858:	ldr	r0, [sp, #32]
   1985c:	str	lr, [r7]
   19860:	strne	fp, [r6]
   19864:	add	sp, sp, #44	; 0x2c
   19868:	ldrd	r4, [sp]
   1986c:	ldrd	r6, [sp, #8]
   19870:	ldrd	r8, [sp, #16]
   19874:	ldrd	sl, [sp, #24]
   19878:	add	sp, sp, #32
   1987c:	pop	{pc}		; (ldr pc, [sp], #4)
   19880:	andeq	r1, r3, r8, asr r5
   19884:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19888:	movw	r5, #4480	; 0x1180
   1988c:	movt	r5, #3
   19890:	ldr	r3, [r5, #4]
   19894:	strd	r6, [sp, #8]
   19898:	str	r8, [sp, #16]
   1989c:	str	lr, [sp, #20]
   198a0:	ldr	r7, [r5]
   198a4:	cmp	r3, #1
   198a8:	ble	198cc <__assert_fail@plt+0x83f0>
   198ac:	mov	r4, #1
   198b0:	add	r6, r7, #4
   198b4:	ldr	r0, [r6, r4, lsl #3]
   198b8:	add	r4, r4, #1
   198bc:	bl	1d5dc <__assert_fail@plt+0xc100>
   198c0:	ldr	r3, [r5, #4]
   198c4:	cmp	r3, r4
   198c8:	bgt	198b4 <__assert_fail@plt+0x83d8>
   198cc:	ldr	r0, [r7, #4]
   198d0:	movw	r4, #5208	; 0x1458
   198d4:	movt	r4, #3
   198d8:	cmp	r0, r4
   198dc:	beq	198f0 <__assert_fail@plt+0x8414>
   198e0:	bl	1d5dc <__assert_fail@plt+0xc100>
   198e4:	mov	r3, #256	; 0x100
   198e8:	str	r3, [r5, #8]
   198ec:	str	r4, [r5, #12]
   198f0:	ldr	r4, [pc, #44]	; 19924 <__assert_fail@plt+0x8448>
   198f4:	cmp	r7, r4
   198f8:	beq	19908 <__assert_fail@plt+0x842c>
   198fc:	mov	r0, r7
   19900:	bl	1d5dc <__assert_fail@plt+0xc100>
   19904:	str	r4, [r5]
   19908:	mov	r3, #1
   1990c:	ldrd	r6, [sp, #8]
   19910:	str	r3, [r5, #4]
   19914:	ldrd	r4, [sp]
   19918:	ldr	r8, [sp, #16]
   1991c:	add	sp, sp, #20
   19920:	pop	{pc}		; (ldr pc, [sp], #4)
   19924:	andeq	r1, r3, r8, lsl #3
   19928:	ldr	r3, [pc, #4]	; 19934 <__assert_fail@plt+0x8458>
   1992c:	mvn	r2, #0
   19930:	b	1932c <__assert_fail@plt+0x7e50>
   19934:	andeq	r1, r3, r8, asr r5
   19938:	ldr	r3, [pc]	; 19940 <__assert_fail@plt+0x8464>
   1993c:	b	1932c <__assert_fail@plt+0x7e50>
   19940:	andeq	r1, r3, r8, asr r5
   19944:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19948:	movw	r4, #4480	; 0x1180
   1994c:	movt	r4, #3
   19950:	strd	r6, [sp, #8]
   19954:	strd	r8, [sp, #16]
   19958:	strd	sl, [sp, #24]
   1995c:	mov	sl, r0
   19960:	str	lr, [sp, #32]
   19964:	sub	sp, sp, #44	; 0x2c
   19968:	bl	113a4 <__errno_location@plt>
   1996c:	ldr	r3, [r0]
   19970:	mov	r8, r0
   19974:	ldr	r2, [r4, #4]
   19978:	ldr	r5, [r4]
   1997c:	str	r3, [sp, #28]
   19980:	cmp	r2, #0
   19984:	bgt	199e0 <__assert_fail@plt+0x8504>
   19988:	add	r3, r4, #8
   1998c:	str	r2, [sp, #36]	; 0x24
   19990:	rsb	r2, r2, #1
   19994:	cmp	r5, r3
   19998:	beq	19aac <__assert_fail@plt+0x85d0>
   1999c:	mov	r1, #8
   199a0:	mov	r0, r5
   199a4:	mvn	r3, #-2147483648	; 0x80000000
   199a8:	str	r1, [sp]
   199ac:	add	r1, sp, #36	; 0x24
   199b0:	bl	1bda0 <__assert_fail@plt+0xa8c4>
   199b4:	mov	r5, r0
   199b8:	str	r0, [r4]
   199bc:	ldr	r0, [r4, #4]
   199c0:	mov	r1, #0
   199c4:	ldr	r2, [sp, #36]	; 0x24
   199c8:	sub	r2, r2, r0
   199cc:	add	r0, r5, r0, lsl #3
   199d0:	lsl	r2, r2, #3
   199d4:	bl	113d4 <memset@plt>
   199d8:	ldr	r3, [sp, #36]	; 0x24
   199dc:	str	r3, [r4, #4]
   199e0:	movw	r4, #5208	; 0x1458
   199e4:	movt	r4, #3
   199e8:	ldr	r9, [r5]
   199ec:	add	fp, r4, #264	; 0x108
   199f0:	mvn	r3, #0
   199f4:	ldr	r7, [r4, #260]	; 0x104
   199f8:	mov	r2, sl
   199fc:	ldr	r6, [r5, #4]
   19a00:	str	fp, [sp, #8]
   19a04:	mov	r1, r9
   19a08:	ldr	ip, [r4, #256]	; 0x100
   19a0c:	orr	r7, r7, #1
   19a10:	ldr	lr, [r4, #300]	; 0x12c
   19a14:	mov	r0, r6
   19a18:	str	ip, [sp]
   19a1c:	str	r7, [sp, #4]
   19a20:	str	lr, [sp, #16]
   19a24:	ldr	ip, [r4, #296]	; 0x128
   19a28:	str	ip, [sp, #12]
   19a2c:	bl	17940 <__assert_fail@plt+0x6464>
   19a30:	cmp	r9, r0
   19a34:	bhi	19a84 <__assert_fail@plt+0x85a8>
   19a38:	add	r9, r0, #1
   19a3c:	cmp	r6, r4
   19a40:	str	r9, [r5]
   19a44:	beq	19a50 <__assert_fail@plt+0x8574>
   19a48:	mov	r0, r6
   19a4c:	bl	1d5dc <__assert_fail@plt+0xc100>
   19a50:	mov	r0, r9
   19a54:	bl	1bafc <__assert_fail@plt+0xa620>
   19a58:	ldr	r3, [r4, #256]	; 0x100
   19a5c:	mov	r2, sl
   19a60:	mov	r1, r9
   19a64:	mov	r6, r0
   19a68:	ldr	lr, [r4, #296]	; 0x128
   19a6c:	ldr	ip, [r4, #300]	; 0x12c
   19a70:	str	r0, [r5, #4]
   19a74:	stm	sp, {r3, r7, fp, lr}
   19a78:	mvn	r3, #0
   19a7c:	str	ip, [sp, #16]
   19a80:	bl	17940 <__assert_fail@plt+0x6464>
   19a84:	ldr	r3, [sp, #28]
   19a88:	mov	r0, r6
   19a8c:	str	r3, [r8]
   19a90:	add	sp, sp, #44	; 0x2c
   19a94:	ldrd	r4, [sp]
   19a98:	ldrd	r6, [sp, #8]
   19a9c:	ldrd	r8, [sp, #16]
   19aa0:	ldrd	sl, [sp, #24]
   19aa4:	add	sp, sp, #32
   19aa8:	pop	{pc}		; (ldr pc, [sp], #4)
   19aac:	mov	r0, #8
   19ab0:	mvn	r3, #-2147483648	; 0x80000000
   19ab4:	add	r1, sp, #36	; 0x24
   19ab8:	str	r0, [sp]
   19abc:	mov	r0, #0
   19ac0:	bl	1bda0 <__assert_fail@plt+0xa8c4>
   19ac4:	ldrd	r2, [r4, #8]
   19ac8:	mov	r5, r0
   19acc:	str	r0, [r4]
   19ad0:	strd	r2, [r0]
   19ad4:	b	199bc <__assert_fail@plt+0x84e0>
   19ad8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19adc:	movw	r4, #4480	; 0x1180
   19ae0:	movt	r4, #3
   19ae4:	strd	r6, [sp, #8]
   19ae8:	strd	r8, [sp, #16]
   19aec:	strd	sl, [sp, #24]
   19af0:	mov	sl, r0
   19af4:	mov	fp, r1
   19af8:	str	lr, [sp, #32]
   19afc:	sub	sp, sp, #44	; 0x2c
   19b00:	bl	113a4 <__errno_location@plt>
   19b04:	ldr	r3, [r0]
   19b08:	mov	r8, r0
   19b0c:	ldr	r2, [r4, #4]
   19b10:	ldr	r5, [r4]
   19b14:	str	r3, [sp, #28]
   19b18:	cmp	r2, #0
   19b1c:	bgt	19b78 <__assert_fail@plt+0x869c>
   19b20:	add	r3, r4, #8
   19b24:	str	r2, [sp, #36]	; 0x24
   19b28:	rsb	r2, r2, #1
   19b2c:	cmp	r5, r3
   19b30:	beq	19c54 <__assert_fail@plt+0x8778>
   19b34:	mov	r1, #8
   19b38:	mov	r0, r5
   19b3c:	mvn	r3, #-2147483648	; 0x80000000
   19b40:	str	r1, [sp]
   19b44:	add	r1, sp, #36	; 0x24
   19b48:	bl	1bda0 <__assert_fail@plt+0xa8c4>
   19b4c:	mov	r5, r0
   19b50:	str	r0, [r4]
   19b54:	ldr	r0, [r4, #4]
   19b58:	mov	r1, #0
   19b5c:	ldr	r2, [sp, #36]	; 0x24
   19b60:	sub	r2, r2, r0
   19b64:	add	r0, r5, r0, lsl #3
   19b68:	lsl	r2, r2, #3
   19b6c:	bl	113d4 <memset@plt>
   19b70:	ldr	r3, [sp, #36]	; 0x24
   19b74:	str	r3, [r4, #4]
   19b78:	movw	r4, #5208	; 0x1458
   19b7c:	movt	r4, #3
   19b80:	ldr	r9, [r5]
   19b84:	add	r0, r4, #264	; 0x108
   19b88:	mov	r3, fp
   19b8c:	ldr	r7, [r4, #260]	; 0x104
   19b90:	mov	r2, sl
   19b94:	ldr	r6, [r5, #4]
   19b98:	str	r0, [sp, #8]
   19b9c:	mov	r1, r9
   19ba0:	ldr	ip, [r4, #256]	; 0x100
   19ba4:	orr	r7, r7, #1
   19ba8:	ldr	lr, [r4, #300]	; 0x12c
   19bac:	mov	r0, r6
   19bb0:	str	ip, [sp]
   19bb4:	str	r7, [sp, #4]
   19bb8:	str	lr, [sp, #16]
   19bbc:	ldr	ip, [r4, #296]	; 0x128
   19bc0:	str	ip, [sp, #12]
   19bc4:	bl	17940 <__assert_fail@plt+0x6464>
   19bc8:	cmp	r9, r0
   19bcc:	bhi	19c2c <__assert_fail@plt+0x8750>
   19bd0:	add	r9, r0, #1
   19bd4:	cmp	r6, r4
   19bd8:	str	r9, [r5]
   19bdc:	beq	19be8 <__assert_fail@plt+0x870c>
   19be0:	mov	r0, r6
   19be4:	bl	1d5dc <__assert_fail@plt+0xc100>
   19be8:	mov	r0, r9
   19bec:	bl	1bafc <__assert_fail@plt+0xa620>
   19bf0:	ldr	ip, [r4, #256]	; 0x100
   19bf4:	mov	r1, r9
   19bf8:	mov	r3, fp
   19bfc:	mov	r2, sl
   19c00:	mov	r6, r0
   19c04:	ldr	r9, [r4, #296]	; 0x128
   19c08:	ldr	lr, [r4, #300]	; 0x12c
   19c0c:	str	r0, [r5, #4]
   19c10:	str	ip, [sp]
   19c14:	ldr	ip, [pc, #100]	; 19c80 <__assert_fail@plt+0x87a4>
   19c18:	str	r7, [sp, #4]
   19c1c:	str	ip, [sp, #8]
   19c20:	str	r9, [sp, #12]
   19c24:	str	lr, [sp, #16]
   19c28:	bl	17940 <__assert_fail@plt+0x6464>
   19c2c:	ldr	r3, [sp, #28]
   19c30:	mov	r0, r6
   19c34:	str	r3, [r8]
   19c38:	add	sp, sp, #44	; 0x2c
   19c3c:	ldrd	r4, [sp]
   19c40:	ldrd	r6, [sp, #8]
   19c44:	ldrd	r8, [sp, #16]
   19c48:	ldrd	sl, [sp, #24]
   19c4c:	add	sp, sp, #32
   19c50:	pop	{pc}		; (ldr pc, [sp], #4)
   19c54:	mov	r0, #8
   19c58:	mvn	r3, #-2147483648	; 0x80000000
   19c5c:	add	r1, sp, #36	; 0x24
   19c60:	str	r0, [sp]
   19c64:	mov	r0, #0
   19c68:	bl	1bda0 <__assert_fail@plt+0xa8c4>
   19c6c:	ldrd	r2, [r4, #8]
   19c70:	mov	r5, r0
   19c74:	str	r0, [r4]
   19c78:	strd	r2, [r0]
   19c7c:	b	19b54 <__assert_fail@plt+0x8678>
   19c80:	andeq	r1, r3, r0, ror #10
   19c84:	strd	r4, [sp, #-20]!	; 0xffffffec
   19c88:	mov	r4, #0
   19c8c:	mov	r5, #0
   19c90:	strd	r6, [sp, #8]
   19c94:	cmp	r1, #10
   19c98:	str	lr, [sp, #16]
   19c9c:	sub	sp, sp, #100	; 0x64
   19ca0:	strd	r4, [sp, #48]	; 0x30
   19ca4:	beq	19cec <__assert_fail@plt+0x8810>
   19ca8:	mov	r3, sp
   19cac:	strd	r4, [sp, #8]
   19cb0:	str	r1, [sp, #48]	; 0x30
   19cb4:	mov	r1, r2
   19cb8:	mvn	r2, #0
   19cbc:	ldrd	r6, [sp, #48]	; 0x30
   19cc0:	strd	r6, [sp]
   19cc4:	strd	r4, [sp, #16]
   19cc8:	strd	r4, [sp, #24]
   19ccc:	strd	r4, [sp, #32]
   19cd0:	strd	r4, [sp, #40]	; 0x28
   19cd4:	bl	1932c <__assert_fail@plt+0x7e50>
   19cd8:	add	sp, sp, #100	; 0x64
   19cdc:	ldrd	r4, [sp]
   19ce0:	ldrd	r6, [sp, #8]
   19ce4:	add	sp, sp, #16
   19ce8:	pop	{pc}		; (ldr pc, [sp], #4)
   19cec:	bl	114ac <abort@plt>
   19cf0:	strd	r4, [sp, #-20]!	; 0xffffffec
   19cf4:	mov	r4, #0
   19cf8:	mov	r5, #0
   19cfc:	strd	r6, [sp, #8]
   19d00:	cmp	r1, #10
   19d04:	str	lr, [sp, #16]
   19d08:	sub	sp, sp, #100	; 0x64
   19d0c:	strd	r4, [sp, #48]	; 0x30
   19d10:	beq	19d5c <__assert_fail@plt+0x8880>
   19d14:	mov	ip, r2
   19d18:	mov	r2, r3
   19d1c:	strd	r4, [sp, #8]
   19d20:	str	r1, [sp, #48]	; 0x30
   19d24:	mov	r3, sp
   19d28:	mov	r1, ip
   19d2c:	ldrd	r6, [sp, #48]	; 0x30
   19d30:	strd	r6, [sp]
   19d34:	strd	r4, [sp, #16]
   19d38:	strd	r4, [sp, #24]
   19d3c:	strd	r4, [sp, #32]
   19d40:	strd	r4, [sp, #40]	; 0x28
   19d44:	bl	1932c <__assert_fail@plt+0x7e50>
   19d48:	add	sp, sp, #100	; 0x64
   19d4c:	ldrd	r4, [sp]
   19d50:	ldrd	r6, [sp, #8]
   19d54:	add	sp, sp, #16
   19d58:	pop	{pc}		; (ldr pc, [sp], #4)
   19d5c:	bl	114ac <abort@plt>
   19d60:	mov	r2, #0
   19d64:	mov	r3, #0
   19d68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19d6c:	strd	r6, [sp, #8]
   19d70:	cmp	r0, #10
   19d74:	strd	r8, [sp, #16]
   19d78:	strd	sl, [sp, #24]
   19d7c:	str	lr, [sp, #32]
   19d80:	sub	sp, sp, #124	; 0x7c
   19d84:	strd	r2, [sp, #72]	; 0x48
   19d88:	strd	r2, [sp, #80]	; 0x50
   19d8c:	strd	r2, [sp, #88]	; 0x58
   19d90:	strd	r2, [sp, #96]	; 0x60
   19d94:	strd	r2, [sp, #104]	; 0x68
   19d98:	strd	r2, [sp, #112]	; 0x70
   19d9c:	beq	19f40 <__assert_fail@plt+0x8a64>
   19da0:	mov	r6, r1
   19da4:	movw	r4, #4480	; 0x1180
   19da8:	movt	r4, #3
   19dac:	str	r0, [sp, #72]	; 0x48
   19db0:	ldrd	r0, [sp, #72]	; 0x48
   19db4:	strd	r0, [sp, #24]
   19db8:	strd	r2, [sp, #32]
   19dbc:	strd	r2, [sp, #40]	; 0x28
   19dc0:	strd	r2, [sp, #48]	; 0x30
   19dc4:	strd	r2, [sp, #56]	; 0x38
   19dc8:	strd	r2, [sp, #64]	; 0x40
   19dcc:	bl	113a4 <__errno_location@plt>
   19dd0:	mov	r8, r0
   19dd4:	ldr	r5, [r4]
   19dd8:	ldr	r2, [r4, #4]
   19ddc:	ldr	r9, [r0]
   19de0:	cmp	r2, #0
   19de4:	bgt	19e40 <__assert_fail@plt+0x8964>
   19de8:	add	r3, r4, #8
   19dec:	str	r2, [sp, #72]	; 0x48
   19df0:	rsb	r2, r2, #1
   19df4:	cmp	r5, r3
   19df8:	beq	19f14 <__assert_fail@plt+0x8a38>
   19dfc:	mov	r3, #8
   19e00:	mov	r0, r5
   19e04:	add	r1, sp, #72	; 0x48
   19e08:	str	r3, [sp]
   19e0c:	mvn	r3, #-2147483648	; 0x80000000
   19e10:	bl	1bda0 <__assert_fail@plt+0xa8c4>
   19e14:	mov	r5, r0
   19e18:	str	r0, [r4]
   19e1c:	ldr	r0, [r4, #4]
   19e20:	mov	r1, #0
   19e24:	ldr	r2, [sp, #72]	; 0x48
   19e28:	sub	r2, r2, r0
   19e2c:	add	r0, r5, r0, lsl #3
   19e30:	lsl	r2, r2, #3
   19e34:	bl	113d4 <memset@plt>
   19e38:	ldr	r3, [sp, #72]	; 0x48
   19e3c:	str	r3, [r4, #4]
   19e40:	ldr	sl, [r5]
   19e44:	add	r0, sp, #32
   19e48:	mvn	r3, #0
   19e4c:	mov	r2, r6
   19e50:	ldr	r7, [sp, #28]
   19e54:	ldr	r4, [r5, #4]
   19e58:	mov	r1, sl
   19e5c:	str	r0, [sp, #8]
   19e60:	ldr	lr, [sp, #24]
   19e64:	orr	r7, r7, #1
   19e68:	ldr	ip, [sp, #64]	; 0x40
   19e6c:	mov	r0, r4
   19e70:	ldr	fp, [sp, #68]	; 0x44
   19e74:	str	lr, [sp]
   19e78:	str	r7, [sp, #4]
   19e7c:	str	ip, [sp, #12]
   19e80:	str	fp, [sp, #16]
   19e84:	bl	17940 <__assert_fail@plt+0x6464>
   19e88:	cmp	sl, r0
   19e8c:	bhi	19ef0 <__assert_fail@plt+0x8a14>
   19e90:	add	sl, r0, #1
   19e94:	movw	r3, #5208	; 0x1458
   19e98:	movt	r3, #3
   19e9c:	cmp	r4, r3
   19ea0:	str	sl, [r5]
   19ea4:	beq	19eb0 <__assert_fail@plt+0x89d4>
   19ea8:	mov	r0, r4
   19eac:	bl	1d5dc <__assert_fail@plt+0xc100>
   19eb0:	mov	r0, sl
   19eb4:	bl	1bafc <__assert_fail@plt+0xa620>
   19eb8:	ldr	r3, [sp, #24]
   19ebc:	mov	r2, r6
   19ec0:	mov	r1, sl
   19ec4:	mov	r4, r0
   19ec8:	ldr	lr, [sp, #64]	; 0x40
   19ecc:	ldr	ip, [sp, #68]	; 0x44
   19ed0:	str	r0, [r5, #4]
   19ed4:	add	r5, sp, #32
   19ed8:	stm	sp, {r3, r7}
   19edc:	mvn	r3, #0
   19ee0:	str	r5, [sp, #8]
   19ee4:	str	lr, [sp, #12]
   19ee8:	str	ip, [sp, #16]
   19eec:	bl	17940 <__assert_fail@plt+0x6464>
   19ef0:	mov	r0, r4
   19ef4:	str	r9, [r8]
   19ef8:	add	sp, sp, #124	; 0x7c
   19efc:	ldrd	r4, [sp]
   19f00:	ldrd	r6, [sp, #8]
   19f04:	ldrd	r8, [sp, #16]
   19f08:	ldrd	sl, [sp, #24]
   19f0c:	add	sp, sp, #32
   19f10:	pop	{pc}		; (ldr pc, [sp], #4)
   19f14:	mov	r0, #8
   19f18:	mvn	r3, #-2147483648	; 0x80000000
   19f1c:	add	r1, sp, #72	; 0x48
   19f20:	str	r0, [sp]
   19f24:	mov	r0, #0
   19f28:	bl	1bda0 <__assert_fail@plt+0xa8c4>
   19f2c:	ldrd	r2, [r4, #8]
   19f30:	mov	r5, r0
   19f34:	str	r0, [r4]
   19f38:	strd	r2, [r0]
   19f3c:	b	19e1c <__assert_fail@plt+0x8940>
   19f40:	bl	114ac <abort@plt>
   19f44:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19f48:	cmp	r0, #10
   19f4c:	strd	r6, [sp, #8]
   19f50:	mov	r6, #0
   19f54:	mov	r7, #0
   19f58:	strd	r8, [sp, #16]
   19f5c:	strd	sl, [sp, #24]
   19f60:	str	lr, [sp, #32]
   19f64:	sub	sp, sp, #124	; 0x7c
   19f68:	strd	r6, [sp, #72]	; 0x48
   19f6c:	strd	r6, [sp, #80]	; 0x50
   19f70:	strd	r6, [sp, #88]	; 0x58
   19f74:	strd	r6, [sp, #96]	; 0x60
   19f78:	strd	r6, [sp, #104]	; 0x68
   19f7c:	strd	r6, [sp, #112]	; 0x70
   19f80:	beq	1a12c <__assert_fail@plt+0x8c50>
   19f84:	mov	sl, r2
   19f88:	movw	r5, #4480	; 0x1180
   19f8c:	movt	r5, #3
   19f90:	str	r0, [sp, #72]	; 0x48
   19f94:	mov	r9, r1
   19f98:	ldrd	r2, [sp, #72]	; 0x48
   19f9c:	strd	r2, [sp, #24]
   19fa0:	strd	r6, [sp, #32]
   19fa4:	strd	r6, [sp, #40]	; 0x28
   19fa8:	strd	r6, [sp, #48]	; 0x30
   19fac:	strd	r6, [sp, #56]	; 0x38
   19fb0:	strd	r6, [sp, #64]	; 0x40
   19fb4:	bl	113a4 <__errno_location@plt>
   19fb8:	mov	r7, r0
   19fbc:	ldr	r4, [r5]
   19fc0:	ldr	r2, [r5, #4]
   19fc4:	ldr	fp, [r0]
   19fc8:	cmp	r2, #0
   19fcc:	bgt	1a028 <__assert_fail@plt+0x8b4c>
   19fd0:	add	r3, r5, #8
   19fd4:	str	r2, [sp, #72]	; 0x48
   19fd8:	rsb	r2, r2, #1
   19fdc:	cmp	r4, r3
   19fe0:	beq	1a100 <__assert_fail@plt+0x8c24>
   19fe4:	mov	r3, #8
   19fe8:	mov	r0, r4
   19fec:	add	r1, sp, #72	; 0x48
   19ff0:	str	r3, [sp]
   19ff4:	mvn	r3, #-2147483648	; 0x80000000
   19ff8:	bl	1bda0 <__assert_fail@plt+0xa8c4>
   19ffc:	mov	r4, r0
   1a000:	str	r0, [r5]
   1a004:	ldr	r0, [r5, #4]
   1a008:	mov	r1, #0
   1a00c:	ldr	r2, [sp, #72]	; 0x48
   1a010:	sub	r2, r2, r0
   1a014:	add	r0, r4, r0, lsl #3
   1a018:	lsl	r2, r2, #3
   1a01c:	bl	113d4 <memset@plt>
   1a020:	ldr	r3, [sp, #72]	; 0x48
   1a024:	str	r3, [r5, #4]
   1a028:	ldr	ip, [sp, #24]
   1a02c:	add	r0, sp, #32
   1a030:	mov	r3, sl
   1a034:	mov	r2, r9
   1a038:	ldr	r6, [sp, #28]
   1a03c:	ldr	r8, [r4]
   1a040:	ldr	r5, [r4, #4]
   1a044:	str	ip, [sp]
   1a048:	orr	r6, r6, #1
   1a04c:	ldr	ip, [sp, #64]	; 0x40
   1a050:	mov	r1, r8
   1a054:	str	r6, [sp, #4]
   1a058:	ldr	lr, [sp, #68]	; 0x44
   1a05c:	str	r0, [sp, #8]
   1a060:	mov	r0, r5
   1a064:	str	ip, [sp, #12]
   1a068:	str	lr, [sp, #16]
   1a06c:	bl	17940 <__assert_fail@plt+0x6464>
   1a070:	cmp	r8, r0
   1a074:	bhi	1a0dc <__assert_fail@plt+0x8c00>
   1a078:	add	r8, r0, #1
   1a07c:	movw	r3, #5208	; 0x1458
   1a080:	movt	r3, #3
   1a084:	cmp	r5, r3
   1a088:	str	r8, [r4]
   1a08c:	beq	1a098 <__assert_fail@plt+0x8bbc>
   1a090:	mov	r0, r5
   1a094:	bl	1d5dc <__assert_fail@plt+0xc100>
   1a098:	mov	r0, r8
   1a09c:	bl	1bafc <__assert_fail@plt+0xa620>
   1a0a0:	ldr	lr, [sp, #24]
   1a0a4:	mov	r1, r8
   1a0a8:	mov	r3, sl
   1a0ac:	mov	r2, r9
   1a0b0:	mov	r5, r0
   1a0b4:	ldr	r8, [sp, #64]	; 0x40
   1a0b8:	ldr	ip, [sp, #68]	; 0x44
   1a0bc:	str	r0, [r4, #4]
   1a0c0:	str	lr, [sp]
   1a0c4:	add	lr, sp, #32
   1a0c8:	str	r6, [sp, #4]
   1a0cc:	str	lr, [sp, #8]
   1a0d0:	str	r8, [sp, #12]
   1a0d4:	str	ip, [sp, #16]
   1a0d8:	bl	17940 <__assert_fail@plt+0x6464>
   1a0dc:	mov	r0, r5
   1a0e0:	str	fp, [r7]
   1a0e4:	add	sp, sp, #124	; 0x7c
   1a0e8:	ldrd	r4, [sp]
   1a0ec:	ldrd	r6, [sp, #8]
   1a0f0:	ldrd	r8, [sp, #16]
   1a0f4:	ldrd	sl, [sp, #24]
   1a0f8:	add	sp, sp, #32
   1a0fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a100:	mov	r0, #8
   1a104:	mvn	r3, #-2147483648	; 0x80000000
   1a108:	add	r1, sp, #72	; 0x48
   1a10c:	str	r0, [sp]
   1a110:	mov	r0, #0
   1a114:	bl	1bda0 <__assert_fail@plt+0xa8c4>
   1a118:	ldrd	r2, [r5, #8]
   1a11c:	mov	r4, r0
   1a120:	str	r0, [r5]
   1a124:	strd	r2, [r0]
   1a128:	b	1a004 <__assert_fail@plt+0x8b28>
   1a12c:	bl	114ac <abort@plt>
   1a130:	ldr	r3, [pc, #492]	; 1a324 <__assert_fail@plt+0x8e48>
   1a134:	lsr	ip, r2, #5
   1a138:	and	r2, r2, #31
   1a13c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a140:	movw	r5, #4480	; 0x1180
   1a144:	movt	r5, #3
   1a148:	strd	r6, [sp, #8]
   1a14c:	strd	r8, [sp, #16]
   1a150:	strd	sl, [sp, #24]
   1a154:	mov	sl, r0
   1a158:	mov	fp, r1
   1a15c:	ldrd	r0, [r3]
   1a160:	str	lr, [sp, #32]
   1a164:	sub	sp, sp, #92	; 0x5c
   1a168:	ldrd	r8, [r3, #8]
   1a16c:	add	r6, sp, #48	; 0x30
   1a170:	strd	r0, [sp, #40]	; 0x28
   1a174:	ldrd	r0, [r3, #16]
   1a178:	strd	r8, [sp, #48]	; 0x30
   1a17c:	ldrd	r8, [r3, #24]
   1a180:	strd	r0, [sp, #56]	; 0x38
   1a184:	ldrd	r0, [r3, #32]
   1a188:	strd	r8, [sp, #64]	; 0x40
   1a18c:	ldrd	r8, [r3, #40]	; 0x28
   1a190:	strd	r0, [sp, #72]	; 0x48
   1a194:	strd	r8, [sp, #80]	; 0x50
   1a198:	ldr	r3, [r6, ip, lsl #2]
   1a19c:	mvn	r1, r3, lsr r2
   1a1a0:	and	r1, r1, #1
   1a1a4:	eor	r2, r3, r1, lsl r2
   1a1a8:	str	r2, [r6, ip, lsl #2]
   1a1ac:	bl	113a4 <__errno_location@plt>
   1a1b0:	ldr	r3, [r0]
   1a1b4:	mov	r8, r0
   1a1b8:	ldr	r2, [r5, #4]
   1a1bc:	ldr	r4, [r5]
   1a1c0:	str	r3, [sp, #28]
   1a1c4:	cmp	r2, #0
   1a1c8:	bgt	1a224 <__assert_fail@plt+0x8d48>
   1a1cc:	add	r3, r5, #8
   1a1d0:	str	r2, [sp, #36]	; 0x24
   1a1d4:	rsb	r2, r2, #1
   1a1d8:	cmp	r4, r3
   1a1dc:	beq	1a2f8 <__assert_fail@plt+0x8e1c>
   1a1e0:	mov	r1, #8
   1a1e4:	mov	r0, r4
   1a1e8:	mvn	r3, #-2147483648	; 0x80000000
   1a1ec:	str	r1, [sp]
   1a1f0:	add	r1, sp, #36	; 0x24
   1a1f4:	bl	1bda0 <__assert_fail@plt+0xa8c4>
   1a1f8:	mov	r4, r0
   1a1fc:	str	r0, [r5]
   1a200:	ldr	r0, [r5, #4]
   1a204:	mov	r1, #0
   1a208:	ldr	r2, [sp, #36]	; 0x24
   1a20c:	sub	r2, r2, r0
   1a210:	add	r0, r4, r0, lsl #3
   1a214:	lsl	r2, r2, #3
   1a218:	bl	113d4 <memset@plt>
   1a21c:	ldr	r3, [sp, #36]	; 0x24
   1a220:	str	r3, [r5, #4]
   1a224:	ldr	ip, [sp, #40]	; 0x28
   1a228:	mov	r3, fp
   1a22c:	mov	r2, sl
   1a230:	ldr	r7, [sp, #44]	; 0x2c
   1a234:	ldr	r9, [r4]
   1a238:	ldr	r5, [r4, #4]
   1a23c:	str	ip, [sp]
   1a240:	orr	r7, r7, #1
   1a244:	ldr	ip, [sp, #80]	; 0x50
   1a248:	mov	r1, r9
   1a24c:	str	r7, [sp, #4]
   1a250:	ldr	lr, [sp, #84]	; 0x54
   1a254:	mov	r0, r5
   1a258:	str	r6, [sp, #8]
   1a25c:	str	ip, [sp, #12]
   1a260:	str	lr, [sp, #16]
   1a264:	bl	17940 <__assert_fail@plt+0x6464>
   1a268:	cmp	r9, r0
   1a26c:	bhi	1a2d0 <__assert_fail@plt+0x8df4>
   1a270:	add	r9, r0, #1
   1a274:	movw	r3, #5208	; 0x1458
   1a278:	movt	r3, #3
   1a27c:	cmp	r5, r3
   1a280:	str	r9, [r4]
   1a284:	beq	1a290 <__assert_fail@plt+0x8db4>
   1a288:	mov	r0, r5
   1a28c:	bl	1d5dc <__assert_fail@plt+0xc100>
   1a290:	mov	r0, r9
   1a294:	bl	1bafc <__assert_fail@plt+0xa620>
   1a298:	mov	r1, r9
   1a29c:	ldr	ip, [sp, #40]	; 0x28
   1a2a0:	mov	r3, fp
   1a2a4:	mov	r2, sl
   1a2a8:	mov	r5, r0
   1a2ac:	ldr	r9, [sp, #80]	; 0x50
   1a2b0:	ldr	lr, [sp, #84]	; 0x54
   1a2b4:	str	r0, [r4, #4]
   1a2b8:	str	ip, [sp]
   1a2bc:	str	r7, [sp, #4]
   1a2c0:	str	r6, [sp, #8]
   1a2c4:	str	r9, [sp, #12]
   1a2c8:	str	lr, [sp, #16]
   1a2cc:	bl	17940 <__assert_fail@plt+0x6464>
   1a2d0:	ldr	r3, [sp, #28]
   1a2d4:	mov	r0, r5
   1a2d8:	str	r3, [r8]
   1a2dc:	add	sp, sp, #92	; 0x5c
   1a2e0:	ldrd	r4, [sp]
   1a2e4:	ldrd	r6, [sp, #8]
   1a2e8:	ldrd	r8, [sp, #16]
   1a2ec:	ldrd	sl, [sp, #24]
   1a2f0:	add	sp, sp, #32
   1a2f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2f8:	mov	r0, #8
   1a2fc:	mvn	r3, #-2147483648	; 0x80000000
   1a300:	add	r1, sp, #36	; 0x24
   1a304:	str	r0, [sp]
   1a308:	mov	r0, #0
   1a30c:	bl	1bda0 <__assert_fail@plt+0xa8c4>
   1a310:	ldrd	r2, [r5, #8]
   1a314:	mov	r4, r0
   1a318:	str	r0, [r5]
   1a31c:	strd	r2, [r0]
   1a320:	b	1a200 <__assert_fail@plt+0x8d24>
   1a324:	andeq	r1, r3, r8, asr r5
   1a328:	ldr	ip, [pc, #476]	; 1a50c <__assert_fail@plt+0x9030>
   1a32c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a330:	movw	r4, #4480	; 0x1180
   1a334:	movt	r4, #3
   1a338:	ldrd	r2, [ip, #8]
   1a33c:	strd	r6, [sp, #8]
   1a340:	lsr	r7, r1, #5
   1a344:	mov	r6, r0
   1a348:	strd	r8, [sp, #16]
   1a34c:	str	lr, [sp, #32]
   1a350:	and	lr, r1, #31
   1a354:	ldrd	r0, [ip]
   1a358:	strd	sl, [sp, #24]
   1a35c:	sub	sp, sp, #84	; 0x54
   1a360:	add	r5, sp, #40	; 0x28
   1a364:	strd	r0, [sp, #32]
   1a368:	strd	r2, [sp, #40]	; 0x28
   1a36c:	ldrd	r0, [ip, #16]
   1a370:	ldrd	r2, [ip, #24]
   1a374:	strd	r0, [sp, #48]	; 0x30
   1a378:	ldrd	r0, [ip, #32]
   1a37c:	strd	r2, [sp, #56]	; 0x38
   1a380:	ldrd	r2, [ip, #40]	; 0x28
   1a384:	strd	r0, [sp, #64]	; 0x40
   1a388:	strd	r2, [sp, #72]	; 0x48
   1a38c:	ldr	r1, [r5, r7, lsl #2]
   1a390:	mvn	r3, r1, lsr lr
   1a394:	and	r3, r3, #1
   1a398:	eor	r1, r1, r3, lsl lr
   1a39c:	str	r1, [r5, r7, lsl #2]
   1a3a0:	bl	113a4 <__errno_location@plt>
   1a3a4:	mov	r9, r0
   1a3a8:	ldr	sl, [r0]
   1a3ac:	ldr	r2, [r4, #4]
   1a3b0:	ldr	r7, [r4]
   1a3b4:	cmp	r2, #0
   1a3b8:	bgt	1a414 <__assert_fail@plt+0x8f38>
   1a3bc:	add	r3, r4, #8
   1a3c0:	str	r2, [sp, #28]
   1a3c4:	rsb	r2, r2, #1
   1a3c8:	cmp	r7, r3
   1a3cc:	beq	1a4e0 <__assert_fail@plt+0x9004>
   1a3d0:	mov	r1, #8
   1a3d4:	mov	r0, r7
   1a3d8:	mvn	r3, #-2147483648	; 0x80000000
   1a3dc:	str	r1, [sp]
   1a3e0:	add	r1, sp, #28
   1a3e4:	bl	1bda0 <__assert_fail@plt+0xa8c4>
   1a3e8:	mov	r7, r0
   1a3ec:	str	r0, [r4]
   1a3f0:	ldr	r0, [r4, #4]
   1a3f4:	mov	r1, #0
   1a3f8:	ldr	r2, [sp, #28]
   1a3fc:	sub	r2, r2, r0
   1a400:	add	r0, r7, r0, lsl #3
   1a404:	lsl	r2, r2, #3
   1a408:	bl	113d4 <memset@plt>
   1a40c:	ldr	r3, [sp, #28]
   1a410:	str	r3, [r4, #4]
   1a414:	ldr	ip, [sp, #32]
   1a418:	mvn	r3, #0
   1a41c:	mov	r2, r6
   1a420:	ldr	r8, [sp, #36]	; 0x24
   1a424:	ldr	fp, [r7]
   1a428:	ldr	r4, [r7, #4]
   1a42c:	str	ip, [sp]
   1a430:	orr	r8, r8, #1
   1a434:	ldr	ip, [sp, #72]	; 0x48
   1a438:	mov	r1, fp
   1a43c:	str	r8, [sp, #4]
   1a440:	ldr	lr, [sp, #76]	; 0x4c
   1a444:	mov	r0, r4
   1a448:	str	r5, [sp, #8]
   1a44c:	str	ip, [sp, #12]
   1a450:	str	lr, [sp, #16]
   1a454:	bl	17940 <__assert_fail@plt+0x6464>
   1a458:	cmp	fp, r0
   1a45c:	bhi	1a4bc <__assert_fail@plt+0x8fe0>
   1a460:	add	fp, r0, #1
   1a464:	movw	r3, #5208	; 0x1458
   1a468:	movt	r3, #3
   1a46c:	cmp	r4, r3
   1a470:	str	fp, [r7]
   1a474:	beq	1a480 <__assert_fail@plt+0x8fa4>
   1a478:	mov	r0, r4
   1a47c:	bl	1d5dc <__assert_fail@plt+0xc100>
   1a480:	mov	r0, fp
   1a484:	bl	1bafc <__assert_fail@plt+0xa620>
   1a488:	ldr	r3, [sp, #32]
   1a48c:	mov	r2, r6
   1a490:	mov	r1, fp
   1a494:	mov	r4, r0
   1a498:	ldr	lr, [sp, #72]	; 0x48
   1a49c:	ldr	ip, [sp, #76]	; 0x4c
   1a4a0:	str	r0, [r7, #4]
   1a4a4:	stm	sp, {r3, r8}
   1a4a8:	mvn	r3, #0
   1a4ac:	str	r5, [sp, #8]
   1a4b0:	str	lr, [sp, #12]
   1a4b4:	str	ip, [sp, #16]
   1a4b8:	bl	17940 <__assert_fail@plt+0x6464>
   1a4bc:	mov	r0, r4
   1a4c0:	str	sl, [r9]
   1a4c4:	add	sp, sp, #84	; 0x54
   1a4c8:	ldrd	r4, [sp]
   1a4cc:	ldrd	r6, [sp, #8]
   1a4d0:	ldrd	r8, [sp, #16]
   1a4d4:	ldrd	sl, [sp, #24]
   1a4d8:	add	sp, sp, #32
   1a4dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4e0:	mov	r0, #8
   1a4e4:	mvn	r3, #-2147483648	; 0x80000000
   1a4e8:	add	r1, sp, #28
   1a4ec:	str	r0, [sp]
   1a4f0:	mov	r0, #0
   1a4f4:	bl	1bda0 <__assert_fail@plt+0xa8c4>
   1a4f8:	ldrd	r2, [r4, #8]
   1a4fc:	mov	r7, r0
   1a500:	str	r0, [r4]
   1a504:	strd	r2, [r0]
   1a508:	b	1a3f0 <__assert_fail@plt+0x8f14>
   1a50c:	andeq	r1, r3, r8, asr r5
   1a510:	ldr	ip, [pc, #472]	; 1a6f0 <__assert_fail@plt+0x9214>
   1a514:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a518:	mov	r5, r0
   1a51c:	movw	r4, #4480	; 0x1180
   1a520:	movt	r4, #3
   1a524:	ldrd	r2, [ip]
   1a528:	ldrd	r0, [ip, #8]
   1a52c:	strd	r6, [sp, #8]
   1a530:	strd	r8, [sp, #16]
   1a534:	strd	sl, [sp, #24]
   1a538:	str	lr, [sp, #32]
   1a53c:	sub	sp, sp, #84	; 0x54
   1a540:	strd	r2, [sp, #32]
   1a544:	strd	r0, [sp, #40]	; 0x28
   1a548:	ldr	r6, [sp, #44]	; 0x2c
   1a54c:	ldrd	r2, [ip, #16]
   1a550:	ldrd	r0, [ip, #24]
   1a554:	mvn	lr, r6
   1a558:	and	lr, lr, #67108864	; 0x4000000
   1a55c:	eor	lr, lr, r6
   1a560:	ldrd	r6, [ip, #40]	; 0x28
   1a564:	strd	r2, [sp, #48]	; 0x30
   1a568:	ldrd	r2, [ip, #32]
   1a56c:	str	lr, [sp, #44]	; 0x2c
   1a570:	strd	r0, [sp, #56]	; 0x38
   1a574:	strd	r2, [sp, #64]	; 0x40
   1a578:	strd	r6, [sp, #72]	; 0x48
   1a57c:	bl	113a4 <__errno_location@plt>
   1a580:	mov	r8, r0
   1a584:	ldr	r9, [r0]
   1a588:	ldr	r2, [r4, #4]
   1a58c:	ldr	r6, [r4]
   1a590:	cmp	r2, #0
   1a594:	bgt	1a5f0 <__assert_fail@plt+0x9114>
   1a598:	add	r3, r4, #8
   1a59c:	str	r2, [sp, #28]
   1a5a0:	rsb	r2, r2, #1
   1a5a4:	cmp	r6, r3
   1a5a8:	beq	1a6c4 <__assert_fail@plt+0x91e8>
   1a5ac:	mov	r1, #8
   1a5b0:	mov	r0, r6
   1a5b4:	mvn	r3, #-2147483648	; 0x80000000
   1a5b8:	str	r1, [sp]
   1a5bc:	add	r1, sp, #28
   1a5c0:	bl	1bda0 <__assert_fail@plt+0xa8c4>
   1a5c4:	mov	r6, r0
   1a5c8:	str	r0, [r4]
   1a5cc:	ldr	r0, [r4, #4]
   1a5d0:	mov	r1, #0
   1a5d4:	ldr	r2, [sp, #28]
   1a5d8:	sub	r2, r2, r0
   1a5dc:	add	r0, r6, r0, lsl #3
   1a5e0:	lsl	r2, r2, #3
   1a5e4:	bl	113d4 <memset@plt>
   1a5e8:	ldr	r3, [sp, #28]
   1a5ec:	str	r3, [r4, #4]
   1a5f0:	ldr	sl, [r6]
   1a5f4:	add	r0, sp, #40	; 0x28
   1a5f8:	mvn	r3, #0
   1a5fc:	mov	r2, r5
   1a600:	ldr	r7, [sp, #36]	; 0x24
   1a604:	ldr	r4, [r6, #4]
   1a608:	mov	r1, sl
   1a60c:	str	r0, [sp, #8]
   1a610:	ldr	lr, [sp, #32]
   1a614:	orr	r7, r7, #1
   1a618:	ldr	ip, [sp, #72]	; 0x48
   1a61c:	mov	r0, r4
   1a620:	ldr	fp, [sp, #76]	; 0x4c
   1a624:	str	lr, [sp]
   1a628:	str	r7, [sp, #4]
   1a62c:	str	ip, [sp, #12]
   1a630:	str	fp, [sp, #16]
   1a634:	bl	17940 <__assert_fail@plt+0x6464>
   1a638:	cmp	sl, r0
   1a63c:	bhi	1a6a0 <__assert_fail@plt+0x91c4>
   1a640:	add	sl, r0, #1
   1a644:	movw	r3, #5208	; 0x1458
   1a648:	movt	r3, #3
   1a64c:	cmp	r4, r3
   1a650:	str	sl, [r6]
   1a654:	beq	1a660 <__assert_fail@plt+0x9184>
   1a658:	mov	r0, r4
   1a65c:	bl	1d5dc <__assert_fail@plt+0xc100>
   1a660:	mov	r0, sl
   1a664:	bl	1bafc <__assert_fail@plt+0xa620>
   1a668:	ldr	r3, [sp, #32]
   1a66c:	mov	r2, r5
   1a670:	add	r5, sp, #40	; 0x28
   1a674:	mov	r1, sl
   1a678:	mov	r4, r0
   1a67c:	ldr	lr, [sp, #72]	; 0x48
   1a680:	ldr	ip, [sp, #76]	; 0x4c
   1a684:	str	r0, [r6, #4]
   1a688:	stm	sp, {r3, r7}
   1a68c:	mvn	r3, #0
   1a690:	str	r5, [sp, #8]
   1a694:	str	lr, [sp, #12]
   1a698:	str	ip, [sp, #16]
   1a69c:	bl	17940 <__assert_fail@plt+0x6464>
   1a6a0:	mov	r0, r4
   1a6a4:	str	r9, [r8]
   1a6a8:	add	sp, sp, #84	; 0x54
   1a6ac:	ldrd	r4, [sp]
   1a6b0:	ldrd	r6, [sp, #8]
   1a6b4:	ldrd	r8, [sp, #16]
   1a6b8:	ldrd	sl, [sp, #24]
   1a6bc:	add	sp, sp, #32
   1a6c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6c4:	mov	r0, #8
   1a6c8:	mvn	r3, #-2147483648	; 0x80000000
   1a6cc:	add	r1, sp, #28
   1a6d0:	str	r0, [sp]
   1a6d4:	mov	r0, #0
   1a6d8:	bl	1bda0 <__assert_fail@plt+0xa8c4>
   1a6dc:	ldrd	r2, [r4, #8]
   1a6e0:	mov	r6, r0
   1a6e4:	str	r0, [r4]
   1a6e8:	strd	r2, [r0]
   1a6ec:	b	1a5cc <__assert_fail@plt+0x90f0>
   1a6f0:	andeq	r1, r3, r8, asr r5
   1a6f4:	ldr	ip, [pc, #480]	; 1a8dc <__assert_fail@plt+0x9400>
   1a6f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a6fc:	mov	r5, r0
   1a700:	movw	r4, #4480	; 0x1180
   1a704:	movt	r4, #3
   1a708:	ldrd	r2, [ip]
   1a70c:	strd	r6, [sp, #8]
   1a710:	mov	r6, r1
   1a714:	ldrd	r0, [ip, #8]
   1a718:	strd	r8, [sp, #16]
   1a71c:	strd	sl, [sp, #24]
   1a720:	str	lr, [sp, #32]
   1a724:	sub	sp, sp, #84	; 0x54
   1a728:	ldrd	r8, [ip, #40]	; 0x28
   1a72c:	strd	r2, [sp, #32]
   1a730:	strd	r0, [sp, #40]	; 0x28
   1a734:	ldrd	r2, [ip, #16]
   1a738:	ldr	r7, [sp, #44]	; 0x2c
   1a73c:	ldrd	r0, [ip, #24]
   1a740:	strd	r2, [sp, #48]	; 0x30
   1a744:	ldrd	r2, [ip, #32]
   1a748:	mvn	lr, r7
   1a74c:	and	lr, lr, #67108864	; 0x4000000
   1a750:	eor	lr, lr, r7
   1a754:	str	lr, [sp, #44]	; 0x2c
   1a758:	strd	r0, [sp, #56]	; 0x38
   1a75c:	strd	r2, [sp, #64]	; 0x40
   1a760:	strd	r8, [sp, #72]	; 0x48
   1a764:	bl	113a4 <__errno_location@plt>
   1a768:	mov	r9, r0
   1a76c:	ldr	sl, [r0]
   1a770:	ldr	r2, [r4, #4]
   1a774:	ldr	r7, [r4]
   1a778:	cmp	r2, #0
   1a77c:	bgt	1a7d8 <__assert_fail@plt+0x92fc>
   1a780:	add	r3, r4, #8
   1a784:	str	r2, [sp, #28]
   1a788:	rsb	r2, r2, #1
   1a78c:	cmp	r7, r3
   1a790:	beq	1a8b0 <__assert_fail@plt+0x93d4>
   1a794:	mov	r1, #8
   1a798:	mov	r0, r7
   1a79c:	mvn	r3, #-2147483648	; 0x80000000
   1a7a0:	str	r1, [sp]
   1a7a4:	add	r1, sp, #28
   1a7a8:	bl	1bda0 <__assert_fail@plt+0xa8c4>
   1a7ac:	mov	r7, r0
   1a7b0:	str	r0, [r4]
   1a7b4:	ldr	r0, [r4, #4]
   1a7b8:	mov	r1, #0
   1a7bc:	ldr	r2, [sp, #28]
   1a7c0:	sub	r2, r2, r0
   1a7c4:	add	r0, r7, r0, lsl #3
   1a7c8:	lsl	r2, r2, #3
   1a7cc:	bl	113d4 <memset@plt>
   1a7d0:	ldr	r3, [sp, #28]
   1a7d4:	str	r3, [r4, #4]
   1a7d8:	ldr	ip, [sp, #32]
   1a7dc:	add	r0, sp, #40	; 0x28
   1a7e0:	mov	r3, r6
   1a7e4:	mov	r2, r5
   1a7e8:	ldr	r8, [sp, #36]	; 0x24
   1a7ec:	ldr	fp, [r7]
   1a7f0:	ldr	r4, [r7, #4]
   1a7f4:	str	ip, [sp]
   1a7f8:	orr	r8, r8, #1
   1a7fc:	ldr	ip, [sp, #72]	; 0x48
   1a800:	mov	r1, fp
   1a804:	str	r8, [sp, #4]
   1a808:	ldr	lr, [sp, #76]	; 0x4c
   1a80c:	str	r0, [sp, #8]
   1a810:	mov	r0, r4
   1a814:	str	ip, [sp, #12]
   1a818:	str	lr, [sp, #16]
   1a81c:	bl	17940 <__assert_fail@plt+0x6464>
   1a820:	cmp	fp, r0
   1a824:	bhi	1a88c <__assert_fail@plt+0x93b0>
   1a828:	add	fp, r0, #1
   1a82c:	movw	r3, #5208	; 0x1458
   1a830:	movt	r3, #3
   1a834:	cmp	r4, r3
   1a838:	str	fp, [r7]
   1a83c:	beq	1a848 <__assert_fail@plt+0x936c>
   1a840:	mov	r0, r4
   1a844:	bl	1d5dc <__assert_fail@plt+0xc100>
   1a848:	mov	r0, fp
   1a84c:	bl	1bafc <__assert_fail@plt+0xa620>
   1a850:	ldr	lr, [sp, #32]
   1a854:	mov	r2, r5
   1a858:	mov	r3, r6
   1a85c:	mov	r1, fp
   1a860:	mov	r4, r0
   1a864:	ldr	r5, [sp, #72]	; 0x48
   1a868:	ldr	ip, [sp, #76]	; 0x4c
   1a86c:	str	r0, [r7, #4]
   1a870:	str	lr, [sp]
   1a874:	add	lr, sp, #40	; 0x28
   1a878:	str	r8, [sp, #4]
   1a87c:	str	lr, [sp, #8]
   1a880:	str	r5, [sp, #12]
   1a884:	str	ip, [sp, #16]
   1a888:	bl	17940 <__assert_fail@plt+0x6464>
   1a88c:	mov	r0, r4
   1a890:	str	sl, [r9]
   1a894:	add	sp, sp, #84	; 0x54
   1a898:	ldrd	r4, [sp]
   1a89c:	ldrd	r6, [sp, #8]
   1a8a0:	ldrd	r8, [sp, #16]
   1a8a4:	ldrd	sl, [sp, #24]
   1a8a8:	add	sp, sp, #32
   1a8ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8b0:	mov	r0, #8
   1a8b4:	mvn	r3, #-2147483648	; 0x80000000
   1a8b8:	add	r1, sp, #28
   1a8bc:	str	r0, [sp]
   1a8c0:	mov	r0, #0
   1a8c4:	bl	1bda0 <__assert_fail@plt+0xa8c4>
   1a8c8:	ldrd	r2, [r4, #8]
   1a8cc:	mov	r7, r0
   1a8d0:	str	r0, [r4]
   1a8d4:	strd	r2, [r0]
   1a8d8:	b	1a7b4 <__assert_fail@plt+0x92d8>
   1a8dc:	andeq	r1, r3, r8, asr r5
   1a8e0:	strd	r4, [sp, #-12]!
   1a8e4:	mov	r4, #0
   1a8e8:	mov	r5, #0
   1a8ec:	str	lr, [sp, #8]
   1a8f0:	sub	sp, sp, #100	; 0x64
   1a8f4:	cmp	r1, #10
   1a8f8:	strd	r4, [sp]
   1a8fc:	strd	r4, [sp, #8]
   1a900:	strd	r4, [sp, #16]
   1a904:	strd	r4, [sp, #24]
   1a908:	strd	r4, [sp, #32]
   1a90c:	strd	r4, [sp, #40]	; 0x28
   1a910:	beq	1a940 <__assert_fail@plt+0x9464>
   1a914:	mov	ip, #67108864	; 0x4000000
   1a918:	mov	r3, sp
   1a91c:	str	r1, [sp]
   1a920:	mov	r1, r2
   1a924:	mvn	r2, #0
   1a928:	str	ip, [sp, #12]
   1a92c:	bl	1932c <__assert_fail@plt+0x7e50>
   1a930:	add	sp, sp, #100	; 0x64
   1a934:	ldrd	r4, [sp]
   1a938:	add	sp, sp, #8
   1a93c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a940:	bl	114ac <abort@plt>
   1a944:	ldr	ip, [pc, #156]	; 1a9e8 <__assert_fail@plt+0x950c>
   1a948:	cmp	r2, #0
   1a94c:	cmpne	r1, #0
   1a950:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a954:	strd	r6, [sp, #8]
   1a958:	mov	r6, r2
   1a95c:	str	r8, [sp, #16]
   1a960:	mov	r8, r3
   1a964:	strd	sl, [sp, #20]
   1a968:	ldrd	r4, [ip]
   1a96c:	str	lr, [sp, #28]
   1a970:	sub	sp, sp, #48	; 0x30
   1a974:	mov	lr, #10
   1a978:	ldrd	r2, [ip, #8]
   1a97c:	ldrd	sl, [ip, #16]
   1a980:	strd	r4, [sp]
   1a984:	ldrd	r4, [ip, #32]
   1a988:	str	lr, [sp]
   1a98c:	strd	r2, [sp, #8]
   1a990:	strd	sl, [sp, #16]
   1a994:	ldrd	r2, [ip, #24]
   1a998:	ldrd	sl, [ip, #40]	; 0x28
   1a99c:	strd	r2, [sp, #24]
   1a9a0:	strd	r4, [sp, #32]
   1a9a4:	strd	sl, [sp, #40]	; 0x28
   1a9a8:	beq	1a9e4 <__assert_fail@plt+0x9508>
   1a9ac:	mov	r7, r1
   1a9b0:	mov	r3, sp
   1a9b4:	mov	r1, r8
   1a9b8:	mvn	r2, #0
   1a9bc:	str	r7, [sp, #40]	; 0x28
   1a9c0:	str	r6, [sp, #44]	; 0x2c
   1a9c4:	bl	1932c <__assert_fail@plt+0x7e50>
   1a9c8:	add	sp, sp, #48	; 0x30
   1a9cc:	ldrd	r4, [sp]
   1a9d0:	ldrd	r6, [sp, #8]
   1a9d4:	ldr	r8, [sp, #16]
   1a9d8:	ldrd	sl, [sp, #20]
   1a9dc:	add	sp, sp, #28
   1a9e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9e4:	bl	114ac <abort@plt>
   1a9e8:	andeq	r1, r3, r8, asr r5
   1a9ec:	ldr	ip, [pc, #156]	; 1aa90 <__assert_fail@plt+0x95b4>
   1a9f0:	cmp	r2, #0
   1a9f4:	cmpne	r1, #0
   1a9f8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a9fc:	strd	r6, [sp, #8]
   1aa00:	mov	r6, r2
   1aa04:	str	r8, [sp, #16]
   1aa08:	mov	r8, r3
   1aa0c:	strd	sl, [sp, #20]
   1aa10:	ldrd	r4, [ip]
   1aa14:	str	lr, [sp, #28]
   1aa18:	sub	sp, sp, #48	; 0x30
   1aa1c:	mov	lr, #10
   1aa20:	ldrd	r2, [ip, #8]
   1aa24:	ldrd	sl, [ip, #16]
   1aa28:	strd	r4, [sp]
   1aa2c:	ldrd	r4, [ip, #32]
   1aa30:	str	lr, [sp]
   1aa34:	strd	r2, [sp, #8]
   1aa38:	strd	sl, [sp, #16]
   1aa3c:	ldrd	r2, [ip, #24]
   1aa40:	ldrd	sl, [ip, #40]	; 0x28
   1aa44:	strd	r2, [sp, #24]
   1aa48:	strd	r4, [sp, #32]
   1aa4c:	strd	sl, [sp, #40]	; 0x28
   1aa50:	beq	1aa8c <__assert_fail@plt+0x95b0>
   1aa54:	ldr	r2, [sp, #80]	; 0x50
   1aa58:	mov	r7, r1
   1aa5c:	mov	r3, sp
   1aa60:	mov	r1, r8
   1aa64:	str	r7, [sp, #40]	; 0x28
   1aa68:	str	r6, [sp, #44]	; 0x2c
   1aa6c:	bl	1932c <__assert_fail@plt+0x7e50>
   1aa70:	add	sp, sp, #48	; 0x30
   1aa74:	ldrd	r4, [sp]
   1aa78:	ldrd	r6, [sp, #8]
   1aa7c:	ldr	r8, [sp, #16]
   1aa80:	ldrd	sl, [sp, #20]
   1aa84:	add	sp, sp, #28
   1aa88:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa8c:	bl	114ac <abort@plt>
   1aa90:	andeq	r1, r3, r8, asr r5
   1aa94:	ldr	ip, [pc, #512]	; 1ac9c <__assert_fail@plt+0x97c0>
   1aa98:	cmp	r0, #0
   1aa9c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1aaa0:	ldrd	r4, [ip, #16]
   1aaa4:	strd	r6, [sp, #8]
   1aaa8:	clz	r6, r1
   1aaac:	mov	r7, r1
   1aab0:	strd	r8, [sp, #16]
   1aab4:	mov	r8, r0
   1aab8:	lsr	r6, r6, #5
   1aabc:	strd	sl, [sp, #24]
   1aac0:	mov	fp, r2
   1aac4:	mov	sl, #10
   1aac8:	ldrd	r2, [ip]
   1aacc:	moveq	r6, #1
   1aad0:	str	lr, [sp, #32]
   1aad4:	sub	sp, sp, #92	; 0x5c
   1aad8:	cmp	r6, #0
   1aadc:	ldrd	r0, [ip, #8]
   1aae0:	strd	r2, [sp, #40]	; 0x28
   1aae4:	strd	r4, [sp, #56]	; 0x38
   1aae8:	ldrd	r2, [ip, #24]
   1aaec:	strd	r0, [sp, #48]	; 0x30
   1aaf0:	ldrd	r0, [ip, #32]
   1aaf4:	str	sl, [sp, #40]	; 0x28
   1aaf8:	ldrd	r4, [ip, #40]	; 0x28
   1aafc:	strd	r2, [sp, #64]	; 0x40
   1ab00:	strd	r0, [sp, #72]	; 0x48
   1ab04:	strd	r4, [sp, #80]	; 0x50
   1ab08:	bne	1ac98 <__assert_fail@plt+0x97bc>
   1ab0c:	movw	r5, #4480	; 0x1180
   1ab10:	movt	r5, #3
   1ab14:	str	r8, [sp, #80]	; 0x50
   1ab18:	str	r7, [sp, #84]	; 0x54
   1ab1c:	bl	113a4 <__errno_location@plt>
   1ab20:	ldr	r3, [r0]
   1ab24:	mov	r9, r0
   1ab28:	ldr	r2, [r5, #4]
   1ab2c:	ldr	r4, [r5]
   1ab30:	str	r3, [sp, #28]
   1ab34:	cmp	r2, #0
   1ab38:	movgt	r1, sl
   1ab3c:	bgt	1aba4 <__assert_fail@plt+0x96c8>
   1ab40:	add	r3, r5, #8
   1ab44:	str	r2, [sp, #36]	; 0x24
   1ab48:	rsb	r2, r2, #1
   1ab4c:	cmp	r4, r3
   1ab50:	beq	1ac6c <__assert_fail@plt+0x9790>
   1ab54:	mov	r1, #8
   1ab58:	mov	r0, r4
   1ab5c:	mvn	r3, #-2147483648	; 0x80000000
   1ab60:	str	r1, [sp]
   1ab64:	add	r1, sp, #36	; 0x24
   1ab68:	bl	1bda0 <__assert_fail@plt+0xa8c4>
   1ab6c:	mov	r4, r0
   1ab70:	str	r0, [r5]
   1ab74:	ldr	r0, [r5, #4]
   1ab78:	mov	r1, #0
   1ab7c:	ldr	r2, [sp, #36]	; 0x24
   1ab80:	sub	r2, r2, r0
   1ab84:	add	r0, r4, r0, lsl #3
   1ab88:	lsl	r2, r2, #3
   1ab8c:	bl	113d4 <memset@plt>
   1ab90:	ldr	r3, [sp, #36]	; 0x24
   1ab94:	ldr	r1, [sp, #40]	; 0x28
   1ab98:	ldr	r8, [sp, #80]	; 0x50
   1ab9c:	str	r3, [r5, #4]
   1aba0:	ldr	r7, [sp, #84]	; 0x54
   1aba4:	mvn	r3, #0
   1aba8:	mov	r2, fp
   1abac:	ldr	r6, [sp, #44]	; 0x2c
   1abb0:	ldr	sl, [r4]
   1abb4:	ldr	r5, [r4, #4]
   1abb8:	orr	r6, r6, #1
   1abbc:	stm	sp, {r1, r6}
   1abc0:	add	r1, sp, #48	; 0x30
   1abc4:	str	r8, [sp, #12]
   1abc8:	mov	r0, r5
   1abcc:	str	r1, [sp, #8]
   1abd0:	mov	r1, sl
   1abd4:	str	r7, [sp, #16]
   1abd8:	bl	17940 <__assert_fail@plt+0x6464>
   1abdc:	cmp	sl, r0
   1abe0:	bhi	1ac44 <__assert_fail@plt+0x9768>
   1abe4:	add	r7, r0, #1
   1abe8:	movw	r3, #5208	; 0x1458
   1abec:	movt	r3, #3
   1abf0:	cmp	r5, r3
   1abf4:	str	r7, [r4]
   1abf8:	beq	1ac04 <__assert_fail@plt+0x9728>
   1abfc:	mov	r0, r5
   1ac00:	bl	1d5dc <__assert_fail@plt+0xc100>
   1ac04:	mov	r0, r7
   1ac08:	bl	1bafc <__assert_fail@plt+0xa620>
   1ac0c:	ldr	r3, [sp, #40]	; 0x28
   1ac10:	mov	r2, fp
   1ac14:	mov	r1, r7
   1ac18:	mov	r5, r0
   1ac1c:	ldr	lr, [sp, #80]	; 0x50
   1ac20:	ldr	ip, [sp, #84]	; 0x54
   1ac24:	str	r0, [r4, #4]
   1ac28:	add	r4, sp, #48	; 0x30
   1ac2c:	stm	sp, {r3, r6}
   1ac30:	mvn	r3, #0
   1ac34:	str	r4, [sp, #8]
   1ac38:	str	lr, [sp, #12]
   1ac3c:	str	ip, [sp, #16]
   1ac40:	bl	17940 <__assert_fail@plt+0x6464>
   1ac44:	ldr	r3, [sp, #28]
   1ac48:	mov	r0, r5
   1ac4c:	str	r3, [r9]
   1ac50:	add	sp, sp, #92	; 0x5c
   1ac54:	ldrd	r4, [sp]
   1ac58:	ldrd	r6, [sp, #8]
   1ac5c:	ldrd	r8, [sp, #16]
   1ac60:	ldrd	sl, [sp, #24]
   1ac64:	add	sp, sp, #32
   1ac68:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac6c:	mov	r1, #8
   1ac70:	mvn	r3, #-2147483648	; 0x80000000
   1ac74:	mov	r0, r6
   1ac78:	str	r1, [sp]
   1ac7c:	add	r1, sp, #36	; 0x24
   1ac80:	bl	1bda0 <__assert_fail@plt+0xa8c4>
   1ac84:	ldrd	r2, [r5, #8]
   1ac88:	mov	r4, r0
   1ac8c:	str	r0, [r5]
   1ac90:	strd	r2, [r0]
   1ac94:	b	1ab74 <__assert_fail@plt+0x9698>
   1ac98:	bl	114ac <abort@plt>
   1ac9c:	andeq	r1, r3, r8, asr r5
   1aca0:	ldr	ip, [pc, #536]	; 1aec0 <__assert_fail@plt+0x99e4>
   1aca4:	cmp	r0, #0
   1aca8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1acac:	ldrd	r4, [ip, #16]
   1acb0:	strd	r6, [sp, #8]
   1acb4:	mov	r6, r1
   1acb8:	mov	r7, r0
   1acbc:	strd	r8, [sp, #16]
   1acc0:	mov	r9, #10
   1acc4:	strd	sl, [sp, #24]
   1acc8:	mov	sl, r2
   1accc:	mov	fp, r3
   1acd0:	str	lr, [sp, #32]
   1acd4:	clz	lr, r1
   1acd8:	sub	sp, sp, #92	; 0x5c
   1acdc:	ldrd	r2, [ip]
   1ace0:	lsr	lr, lr, #5
   1ace4:	moveq	lr, #1
   1ace8:	ldrd	r0, [ip, #8]
   1acec:	cmp	lr, #0
   1acf0:	strd	r4, [sp, #56]	; 0x38
   1acf4:	ldrd	r4, [ip, #40]	; 0x28
   1acf8:	str	lr, [sp, #28]
   1acfc:	strd	r2, [sp, #40]	; 0x28
   1ad00:	ldrd	r2, [ip, #24]
   1ad04:	strd	r0, [sp, #48]	; 0x30
   1ad08:	ldrd	r0, [ip, #32]
   1ad0c:	str	r9, [sp, #40]	; 0x28
   1ad10:	strd	r2, [sp, #64]	; 0x40
   1ad14:	strd	r4, [sp, #80]	; 0x50
   1ad18:	strd	r0, [sp, #72]	; 0x48
   1ad1c:	bne	1aebc <__assert_fail@plt+0x99e0>
   1ad20:	movw	r5, #4480	; 0x1180
   1ad24:	movt	r5, #3
   1ad28:	str	r7, [sp, #80]	; 0x50
   1ad2c:	str	r6, [sp, #84]	; 0x54
   1ad30:	bl	113a4 <__errno_location@plt>
   1ad34:	ldr	r3, [r0]
   1ad38:	mov	r8, r0
   1ad3c:	ldr	r2, [r5, #4]
   1ad40:	ldr	r4, [r5]
   1ad44:	str	r3, [sp, #24]
   1ad48:	cmp	r2, #0
   1ad4c:	movgt	r1, r9
   1ad50:	bgt	1adb8 <__assert_fail@plt+0x98dc>
   1ad54:	add	r3, r5, #8
   1ad58:	str	r2, [sp, #36]	; 0x24
   1ad5c:	rsb	r2, r2, #1
   1ad60:	cmp	r4, r3
   1ad64:	beq	1ae90 <__assert_fail@plt+0x99b4>
   1ad68:	mov	r1, #8
   1ad6c:	mov	r0, r4
   1ad70:	mvn	r3, #-2147483648	; 0x80000000
   1ad74:	str	r1, [sp]
   1ad78:	add	r1, sp, #36	; 0x24
   1ad7c:	bl	1bda0 <__assert_fail@plt+0xa8c4>
   1ad80:	mov	r4, r0
   1ad84:	str	r0, [r5]
   1ad88:	ldr	r0, [r5, #4]
   1ad8c:	mov	r1, #0
   1ad90:	ldr	r2, [sp, #36]	; 0x24
   1ad94:	sub	r2, r2, r0
   1ad98:	add	r0, r4, r0, lsl #3
   1ad9c:	lsl	r2, r2, #3
   1ada0:	bl	113d4 <memset@plt>
   1ada4:	ldr	r3, [sp, #36]	; 0x24
   1ada8:	ldr	r1, [sp, #40]	; 0x28
   1adac:	ldr	r7, [sp, #80]	; 0x50
   1adb0:	str	r3, [r5, #4]
   1adb4:	ldr	r6, [sp, #84]	; 0x54
   1adb8:	mov	r3, fp
   1adbc:	mov	r2, sl
   1adc0:	ldr	r0, [sp, #44]	; 0x2c
   1adc4:	ldr	r9, [r4]
   1adc8:	ldr	r5, [r4, #4]
   1adcc:	orr	r0, r0, #1
   1add0:	str	r1, [sp]
   1add4:	add	r1, sp, #48	; 0x30
   1add8:	str	r0, [sp, #4]
   1addc:	str	r1, [sp, #8]
   1ade0:	mov	r1, r9
   1ade4:	str	r7, [sp, #12]
   1ade8:	str	r6, [sp, #16]
   1adec:	str	r0, [sp, #28]
   1adf0:	mov	r0, r5
   1adf4:	bl	17940 <__assert_fail@plt+0x6464>
   1adf8:	cmp	r9, r0
   1adfc:	bhi	1ae68 <__assert_fail@plt+0x998c>
   1ae00:	add	r6, r0, #1
   1ae04:	movw	r3, #5208	; 0x1458
   1ae08:	movt	r3, #3
   1ae0c:	cmp	r5, r3
   1ae10:	str	r6, [r4]
   1ae14:	beq	1ae20 <__assert_fail@plt+0x9944>
   1ae18:	mov	r0, r5
   1ae1c:	bl	1d5dc <__assert_fail@plt+0xc100>
   1ae20:	mov	r0, r6
   1ae24:	bl	1bafc <__assert_fail@plt+0xa620>
   1ae28:	ldr	lr, [sp, #40]	; 0x28
   1ae2c:	mov	r1, r6
   1ae30:	mov	r3, fp
   1ae34:	mov	r2, sl
   1ae38:	mov	r5, r0
   1ae3c:	ldr	r6, [sp, #80]	; 0x50
   1ae40:	ldr	ip, [sp, #84]	; 0x54
   1ae44:	str	r0, [r4, #4]
   1ae48:	str	lr, [sp]
   1ae4c:	ldr	lr, [sp, #28]
   1ae50:	str	lr, [sp, #4]
   1ae54:	add	lr, sp, #48	; 0x30
   1ae58:	str	r6, [sp, #12]
   1ae5c:	str	lr, [sp, #8]
   1ae60:	str	ip, [sp, #16]
   1ae64:	bl	17940 <__assert_fail@plt+0x6464>
   1ae68:	ldr	r3, [sp, #24]
   1ae6c:	mov	r0, r5
   1ae70:	str	r3, [r8]
   1ae74:	add	sp, sp, #92	; 0x5c
   1ae78:	ldrd	r4, [sp]
   1ae7c:	ldrd	r6, [sp, #8]
   1ae80:	ldrd	r8, [sp, #16]
   1ae84:	ldrd	sl, [sp, #24]
   1ae88:	add	sp, sp, #32
   1ae8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae90:	mov	r1, #8
   1ae94:	mvn	r3, #-2147483648	; 0x80000000
   1ae98:	ldr	r0, [sp, #28]
   1ae9c:	str	r1, [sp]
   1aea0:	add	r1, sp, #36	; 0x24
   1aea4:	bl	1bda0 <__assert_fail@plt+0xa8c4>
   1aea8:	ldrd	r2, [r5, #8]
   1aeac:	mov	r4, r0
   1aeb0:	str	r0, [r5]
   1aeb4:	strd	r2, [r0]
   1aeb8:	b	1ad88 <__assert_fail@plt+0x98ac>
   1aebc:	bl	114ac <abort@plt>
   1aec0:	andeq	r1, r3, r8, asr r5
   1aec4:	ldr	r3, [pc]	; 1aecc <__assert_fail@plt+0x99f0>
   1aec8:	b	1932c <__assert_fail@plt+0x7e50>
   1aecc:	muleq	r3, r0, r1
   1aed0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1aed4:	movw	r4, #4480	; 0x1180
   1aed8:	movt	r4, #3
   1aedc:	strd	r6, [sp, #8]
   1aee0:	strd	r8, [sp, #16]
   1aee4:	strd	sl, [sp, #24]
   1aee8:	mov	sl, r0
   1aeec:	mov	fp, r1
   1aef0:	str	lr, [sp, #32]
   1aef4:	sub	sp, sp, #44	; 0x2c
   1aef8:	bl	113a4 <__errno_location@plt>
   1aefc:	ldr	r3, [r0]
   1af00:	mov	r8, r0
   1af04:	ldr	r2, [r4, #4]
   1af08:	ldr	r5, [r4]
   1af0c:	str	r3, [sp, #28]
   1af10:	cmp	r2, #0
   1af14:	bgt	1af70 <__assert_fail@plt+0x9a94>
   1af18:	add	r3, r4, #8
   1af1c:	str	r2, [sp, #36]	; 0x24
   1af20:	rsb	r2, r2, #1
   1af24:	cmp	r5, r3
   1af28:	beq	1b04c <__assert_fail@plt+0x9b70>
   1af2c:	mov	r1, #8
   1af30:	mov	r0, r5
   1af34:	mvn	r3, #-2147483648	; 0x80000000
   1af38:	str	r1, [sp]
   1af3c:	add	r1, sp, #36	; 0x24
   1af40:	bl	1bda0 <__assert_fail@plt+0xa8c4>
   1af44:	mov	r5, r0
   1af48:	str	r0, [r4]
   1af4c:	ldr	r0, [r4, #4]
   1af50:	mov	r1, #0
   1af54:	ldr	r2, [sp, #36]	; 0x24
   1af58:	sub	r2, r2, r0
   1af5c:	add	r0, r5, r0, lsl #3
   1af60:	lsl	r2, r2, #3
   1af64:	bl	113d4 <memset@plt>
   1af68:	ldr	r3, [sp, #36]	; 0x24
   1af6c:	str	r3, [r4, #4]
   1af70:	ldr	ip, [r4, #16]
   1af74:	mov	r3, fp
   1af78:	mov	r2, sl
   1af7c:	ldr	r7, [r4, #20]
   1af80:	ldr	r0, [pc, #240]	; 1b078 <__assert_fail@plt+0x9b9c>
   1af84:	ldr	r9, [r5]
   1af88:	orr	r7, r7, #1
   1af8c:	ldr	r6, [r5, #4]
   1af90:	str	ip, [sp]
   1af94:	ldr	ip, [r4, #56]	; 0x38
   1af98:	mov	r1, r9
   1af9c:	str	r7, [sp, #4]
   1afa0:	ldr	lr, [r4, #60]	; 0x3c
   1afa4:	str	r0, [sp, #8]
   1afa8:	mov	r0, r6
   1afac:	str	ip, [sp, #12]
   1afb0:	str	lr, [sp, #16]
   1afb4:	bl	17940 <__assert_fail@plt+0x6464>
   1afb8:	cmp	r9, r0
   1afbc:	bhi	1b024 <__assert_fail@plt+0x9b48>
   1afc0:	add	r9, r0, #1
   1afc4:	movw	r3, #5208	; 0x1458
   1afc8:	movt	r3, #3
   1afcc:	cmp	r6, r3
   1afd0:	str	r9, [r5]
   1afd4:	beq	1afe0 <__assert_fail@plt+0x9b04>
   1afd8:	mov	r0, r6
   1afdc:	bl	1d5dc <__assert_fail@plt+0xc100>
   1afe0:	mov	r0, r9
   1afe4:	bl	1bafc <__assert_fail@plt+0xa620>
   1afe8:	ldr	ip, [r4, #16]
   1afec:	mov	r1, r9
   1aff0:	mov	r3, fp
   1aff4:	mov	r2, sl
   1aff8:	mov	r6, r0
   1affc:	ldr	r9, [r4, #56]	; 0x38
   1b000:	ldr	lr, [r4, #60]	; 0x3c
   1b004:	str	r0, [r5, #4]
   1b008:	str	ip, [sp]
   1b00c:	ldr	ip, [pc, #100]	; 1b078 <__assert_fail@plt+0x9b9c>
   1b010:	str	r7, [sp, #4]
   1b014:	str	ip, [sp, #8]
   1b018:	str	r9, [sp, #12]
   1b01c:	str	lr, [sp, #16]
   1b020:	bl	17940 <__assert_fail@plt+0x6464>
   1b024:	ldr	r3, [sp, #28]
   1b028:	mov	r0, r6
   1b02c:	str	r3, [r8]
   1b030:	add	sp, sp, #44	; 0x2c
   1b034:	ldrd	r4, [sp]
   1b038:	ldrd	r6, [sp, #8]
   1b03c:	ldrd	r8, [sp, #16]
   1b040:	ldrd	sl, [sp, #24]
   1b044:	add	sp, sp, #32
   1b048:	pop	{pc}		; (ldr pc, [sp], #4)
   1b04c:	mov	r0, #8
   1b050:	mvn	r3, #-2147483648	; 0x80000000
   1b054:	add	r1, sp, #36	; 0x24
   1b058:	str	r0, [sp]
   1b05c:	mov	r0, #0
   1b060:	bl	1bda0 <__assert_fail@plt+0xa8c4>
   1b064:	ldrd	r2, [r4, #8]
   1b068:	mov	r5, r0
   1b06c:	str	r0, [r4]
   1b070:	strd	r2, [r0]
   1b074:	b	1af4c <__assert_fail@plt+0x9a70>
   1b078:	muleq	r3, r8, r1
   1b07c:	ldr	r3, [pc, #4]	; 1b088 <__assert_fail@plt+0x9bac>
   1b080:	mvn	r2, #0
   1b084:	b	1932c <__assert_fail@plt+0x7e50>
   1b088:	muleq	r3, r0, r1
   1b08c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b090:	movw	r4, #4480	; 0x1180
   1b094:	movt	r4, #3
   1b098:	strd	r6, [sp, #8]
   1b09c:	strd	r8, [sp, #16]
   1b0a0:	strd	sl, [sp, #24]
   1b0a4:	mov	sl, r0
   1b0a8:	str	lr, [sp, #32]
   1b0ac:	sub	sp, sp, #44	; 0x2c
   1b0b0:	bl	113a4 <__errno_location@plt>
   1b0b4:	ldr	r3, [r0]
   1b0b8:	mov	r8, r0
   1b0bc:	ldr	r2, [r4, #4]
   1b0c0:	ldr	r5, [r4]
   1b0c4:	str	r3, [sp, #28]
   1b0c8:	cmp	r2, #0
   1b0cc:	bgt	1b128 <__assert_fail@plt+0x9c4c>
   1b0d0:	add	r3, r4, #8
   1b0d4:	str	r2, [sp, #36]	; 0x24
   1b0d8:	rsb	r2, r2, #1
   1b0dc:	cmp	r5, r3
   1b0e0:	beq	1b1f0 <__assert_fail@plt+0x9d14>
   1b0e4:	mov	r1, #8
   1b0e8:	mov	r0, r5
   1b0ec:	mvn	r3, #-2147483648	; 0x80000000
   1b0f0:	str	r1, [sp]
   1b0f4:	add	r1, sp, #36	; 0x24
   1b0f8:	bl	1bda0 <__assert_fail@plt+0xa8c4>
   1b0fc:	mov	r5, r0
   1b100:	str	r0, [r4]
   1b104:	ldr	r0, [r4, #4]
   1b108:	mov	r1, #0
   1b10c:	ldr	r2, [sp, #36]	; 0x24
   1b110:	sub	r2, r2, r0
   1b114:	add	r0, r5, r0, lsl #3
   1b118:	lsl	r2, r2, #3
   1b11c:	bl	113d4 <memset@plt>
   1b120:	ldr	r3, [sp, #36]	; 0x24
   1b124:	str	r3, [r4, #4]
   1b128:	ldr	ip, [r4, #16]
   1b12c:	mvn	r3, #0
   1b130:	mov	r2, sl
   1b134:	ldr	r7, [r4, #20]
   1b138:	ldr	fp, [pc, #220]	; 1b21c <__assert_fail@plt+0x9d40>
   1b13c:	ldr	r9, [r5]
   1b140:	orr	r7, r7, #1
   1b144:	ldr	r6, [r5, #4]
   1b148:	str	ip, [sp]
   1b14c:	ldr	ip, [r4, #56]	; 0x38
   1b150:	mov	r1, r9
   1b154:	stmib	sp, {r7, fp}
   1b158:	ldr	lr, [r4, #60]	; 0x3c
   1b15c:	mov	r0, r6
   1b160:	str	ip, [sp, #12]
   1b164:	str	lr, [sp, #16]
   1b168:	bl	17940 <__assert_fail@plt+0x6464>
   1b16c:	cmp	r9, r0
   1b170:	bhi	1b1c8 <__assert_fail@plt+0x9cec>
   1b174:	add	r9, r0, #1
   1b178:	movw	r3, #5208	; 0x1458
   1b17c:	movt	r3, #3
   1b180:	cmp	r6, r3
   1b184:	str	r9, [r5]
   1b188:	beq	1b194 <__assert_fail@plt+0x9cb8>
   1b18c:	mov	r0, r6
   1b190:	bl	1d5dc <__assert_fail@plt+0xc100>
   1b194:	mov	r0, r9
   1b198:	bl	1bafc <__assert_fail@plt+0xa620>
   1b19c:	ldr	r3, [r4, #16]
   1b1a0:	mov	r2, sl
   1b1a4:	mov	r1, r9
   1b1a8:	mov	r6, r0
   1b1ac:	ldr	lr, [r4, #56]	; 0x38
   1b1b0:	ldr	ip, [r4, #60]	; 0x3c
   1b1b4:	str	r0, [r5, #4]
   1b1b8:	stm	sp, {r3, r7, fp, lr}
   1b1bc:	mvn	r3, #0
   1b1c0:	str	ip, [sp, #16]
   1b1c4:	bl	17940 <__assert_fail@plt+0x6464>
   1b1c8:	ldr	r3, [sp, #28]
   1b1cc:	mov	r0, r6
   1b1d0:	str	r3, [r8]
   1b1d4:	add	sp, sp, #44	; 0x2c
   1b1d8:	ldrd	r4, [sp]
   1b1dc:	ldrd	r6, [sp, #8]
   1b1e0:	ldrd	r8, [sp, #16]
   1b1e4:	ldrd	sl, [sp, #24]
   1b1e8:	add	sp, sp, #32
   1b1ec:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1f0:	mov	r0, #8
   1b1f4:	mvn	r3, #-2147483648	; 0x80000000
   1b1f8:	add	r1, sp, #36	; 0x24
   1b1fc:	str	r0, [sp]
   1b200:	mov	r0, #0
   1b204:	bl	1bda0 <__assert_fail@plt+0xa8c4>
   1b208:	ldrd	r2, [r4, #8]
   1b20c:	mov	r5, r0
   1b210:	str	r0, [r4]
   1b214:	strd	r2, [r0]
   1b218:	b	1b104 <__assert_fail@plt+0x9c28>
   1b21c:	muleq	r3, r8, r1
   1b220:	strd	r4, [sp, #-16]!
   1b224:	mov	r5, r0
   1b228:	mov	r0, r2
   1b22c:	str	r6, [sp, #8]
   1b230:	mov	r6, r1
   1b234:	mov	r1, r3
   1b238:	str	lr, [sp, #12]
   1b23c:	bl	1cee8 <__assert_fail@plt+0xba0c>
   1b240:	subs	r4, r0, #0
   1b244:	beq	1b278 <__assert_fail@plt+0x9d9c>
   1b248:	mov	r0, r5
   1b24c:	mov	r1, r6
   1b250:	mov	r3, r4
   1b254:	movw	r2, #58740	; 0xe574
   1b258:	movt	r2, #1
   1b25c:	bl	112d8 <error@plt>
   1b260:	mov	r0, r4
   1b264:	ldrd	r4, [sp]
   1b268:	ldr	r6, [sp, #8]
   1b26c:	ldr	lr, [sp, #12]
   1b270:	add	sp, sp, #16
   1b274:	b	1d5dc <__assert_fail@plt+0xc100>
   1b278:	bl	113a4 <__errno_location@plt>
   1b27c:	ldr	r5, [r0]
   1b280:	mov	r2, #5
   1b284:	movw	r1, #64480	; 0xfbe0
   1b288:	movt	r1, #1
   1b28c:	mov	r0, r4
   1b290:	bl	11230 <dcgettext@plt>
   1b294:	mov	r2, r0
   1b298:	mov	r0, r4
   1b29c:	mov	r1, r5
   1b2a0:	bl	112d8 <error@plt>
   1b2a4:	bl	114ac <abort@plt>
   1b2a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b2ac:	mov	r5, r2
   1b2b0:	strd	r6, [sp, #8]
   1b2b4:	mov	r6, r0
   1b2b8:	mov	r7, r1
   1b2bc:	str	r8, [sp, #16]
   1b2c0:	mov	r8, r3
   1b2c4:	str	lr, [sp, #20]
   1b2c8:	sub	sp, sp, #8
   1b2cc:	ldrd	r0, [sp, #32]
   1b2d0:	bl	1cee8 <__assert_fail@plt+0xba0c>
   1b2d4:	subs	r4, r0, #0
   1b2d8:	beq	1b344 <__assert_fail@plt+0x9e68>
   1b2dc:	cmp	r5, #0
   1b2e0:	beq	1b328 <__assert_fail@plt+0x9e4c>
   1b2e4:	movw	ip, #58740	; 0xe574
   1b2e8:	movt	ip, #1
   1b2ec:	mov	r3, r8
   1b2f0:	mov	r2, r5
   1b2f4:	mov	r1, r7
   1b2f8:	mov	r0, r6
   1b2fc:	str	ip, [sp]
   1b300:	str	r4, [sp, #4]
   1b304:	bl	11308 <error_at_line@plt>
   1b308:	mov	r0, r4
   1b30c:	add	sp, sp, #8
   1b310:	ldrd	r4, [sp]
   1b314:	ldrd	r6, [sp, #8]
   1b318:	ldr	r8, [sp, #16]
   1b31c:	ldr	lr, [sp, #20]
   1b320:	add	sp, sp, #24
   1b324:	b	1d5dc <__assert_fail@plt+0xc100>
   1b328:	mov	r1, r7
   1b32c:	mov	r0, r6
   1b330:	movw	r2, #58740	; 0xe574
   1b334:	movt	r2, #1
   1b338:	mov	r3, r4
   1b33c:	bl	112d8 <error@plt>
   1b340:	b	1b308 <__assert_fail@plt+0x9e2c>
   1b344:	bl	113a4 <__errno_location@plt>
   1b348:	ldr	r5, [r0]
   1b34c:	mov	r2, #5
   1b350:	movw	r1, #64480	; 0xfbe0
   1b354:	movt	r1, #1
   1b358:	mov	r0, r4
   1b35c:	bl	11230 <dcgettext@plt>
   1b360:	mov	r2, r0
   1b364:	mov	r0, r4
   1b368:	mov	r1, r5
   1b36c:	bl	112d8 <error@plt>
   1b370:	bl	114ac <abort@plt>
   1b374:	cmp	r1, #0
   1b378:	strd	r4, [sp, #-16]!
   1b37c:	mov	ip, r3
   1b380:	str	r6, [sp, #8]
   1b384:	mov	r4, r0
   1b388:	str	lr, [sp, #12]
   1b38c:	sub	sp, sp, #32
   1b390:	ldr	r5, [sp, #48]	; 0x30
   1b394:	ldr	r6, [sp, #52]	; 0x34
   1b398:	beq	1b4dc <__assert_fail@plt+0xa000>
   1b39c:	mov	r3, r1
   1b3a0:	mov	r1, #1
   1b3a4:	stm	sp, {r2, ip}
   1b3a8:	movw	r2, #64512	; 0xfc00
   1b3ac:	movt	r2, #1
   1b3b0:	bl	11404 <__fprintf_chk@plt>
   1b3b4:	mov	r2, #5
   1b3b8:	movw	r1, #64532	; 0xfc14
   1b3bc:	movt	r1, #1
   1b3c0:	mov	r0, #0
   1b3c4:	bl	11230 <dcgettext@plt>
   1b3c8:	movw	ip, #2022	; 0x7e6
   1b3cc:	mov	r3, r0
   1b3d0:	mov	r1, #1
   1b3d4:	movw	r2, #65260	; 0xfeec
   1b3d8:	movt	r2, #1
   1b3dc:	mov	r0, r4
   1b3e0:	str	ip, [sp]
   1b3e4:	bl	11404 <__fprintf_chk@plt>
   1b3e8:	mov	r1, r4
   1b3ec:	mov	r0, #10
   1b3f0:	bl	11224 <fputc_unlocked@plt>
   1b3f4:	mov	r2, #5
   1b3f8:	movw	r1, #64536	; 0xfc18
   1b3fc:	movt	r1, #1
   1b400:	mov	r0, #0
   1b404:	bl	11230 <dcgettext@plt>
   1b408:	mov	r2, r0
   1b40c:	mov	r1, #1
   1b410:	movw	r3, #64708	; 0xfcc4
   1b414:	movt	r3, #1
   1b418:	mov	r0, r4
   1b41c:	bl	11404 <__fprintf_chk@plt>
   1b420:	mov	r1, r4
   1b424:	mov	r0, #10
   1b428:	bl	11224 <fputc_unlocked@plt>
   1b42c:	cmp	r6, #9
   1b430:	ldrls	pc, [pc, r6, lsl #2]
   1b434:	b	1b748 <__assert_fail@plt+0xa26c>
   1b438:	andeq	fp, r1, r8, asr #9
   1b43c:	strdeq	fp, [r1], -r8
   1b440:	andeq	fp, r1, r4, lsr r5
   1b444:	andeq	fp, r1, r4, ror r5
   1b448:			; <UNDEFINED> instruction: 0x0001b5bc
   1b44c:	strdeq	fp, [r1], -r4
   1b450:	andeq	fp, r1, ip, lsr r6
   1b454:	muleq	r1, r0, r6
   1b458:	andeq	fp, r1, r8, ror #13
   1b45c:	andeq	fp, r1, r0, ror #8
   1b460:	movw	r1, #65012	; 0xfdf4
   1b464:	movt	r1, #1
   1b468:	mov	r2, #5
   1b46c:	mov	r0, #0
   1b470:	bl	11230 <dcgettext@plt>
   1b474:	ldr	lr, [r5, #4]
   1b478:	mov	r2, r0
   1b47c:	mov	r1, #1
   1b480:	mov	r0, r4
   1b484:	ldr	r3, [r5, #8]
   1b488:	ldr	ip, [r5, #32]
   1b48c:	str	lr, [sp]
   1b490:	ldr	lr, [r5, #12]
   1b494:	str	ip, [sp, #28]
   1b498:	ldr	ip, [r5, #28]
   1b49c:	str	r3, [sp, #4]
   1b4a0:	ldr	r3, [r5, #16]
   1b4a4:	str	lr, [sp, #8]
   1b4a8:	ldr	lr, [r5, #20]
   1b4ac:	str	ip, [sp, #24]
   1b4b0:	ldr	ip, [r5, #24]
   1b4b4:	str	r3, [sp, #12]
   1b4b8:	ldr	r3, [r5]
   1b4bc:	str	lr, [sp, #16]
   1b4c0:	str	ip, [sp, #20]
   1b4c4:	bl	11404 <__fprintf_chk@plt>
   1b4c8:	add	sp, sp, #32
   1b4cc:	ldrd	r4, [sp]
   1b4d0:	ldr	r6, [sp, #8]
   1b4d4:	add	sp, sp, #12
   1b4d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b4dc:	mov	r3, r2
   1b4e0:	mov	r1, #1
   1b4e4:	str	ip, [sp]
   1b4e8:	movw	r2, #64524	; 0xfc0c
   1b4ec:	movt	r2, #1
   1b4f0:	bl	11404 <__fprintf_chk@plt>
   1b4f4:	b	1b3b4 <__assert_fail@plt+0x9ed8>
   1b4f8:	mov	r2, #5
   1b4fc:	movw	r1, #64744	; 0xfce8
   1b500:	movt	r1, #1
   1b504:	mov	r0, #0
   1b508:	bl	11230 <dcgettext@plt>
   1b50c:	ldr	r3, [r5]
   1b510:	mov	r2, r0
   1b514:	mov	r1, #1
   1b518:	mov	r0, r4
   1b51c:	add	sp, sp, #32
   1b520:	ldrd	r4, [sp]
   1b524:	ldr	r6, [sp, #8]
   1b528:	ldr	lr, [sp, #12]
   1b52c:	add	sp, sp, #16
   1b530:	b	11404 <__fprintf_chk@plt>
   1b534:	mov	r2, #5
   1b538:	movw	r1, #64760	; 0xfcf8
   1b53c:	movt	r1, #1
   1b540:	mov	r0, #0
   1b544:	bl	11230 <dcgettext@plt>
   1b548:	ldm	r5, {r3, ip}
   1b54c:	mov	r2, r0
   1b550:	mov	r1, #1
   1b554:	mov	r0, r4
   1b558:	str	ip, [sp, #48]	; 0x30
   1b55c:	add	sp, sp, #32
   1b560:	ldrd	r4, [sp]
   1b564:	ldr	r6, [sp, #8]
   1b568:	ldr	lr, [sp, #12]
   1b56c:	add	sp, sp, #16
   1b570:	b	11404 <__fprintf_chk@plt>
   1b574:	mov	r2, #5
   1b578:	movw	r1, #64784	; 0xfd10
   1b57c:	movt	r1, #1
   1b580:	mov	r0, #0
   1b584:	bl	11230 <dcgettext@plt>
   1b588:	ldm	r5, {r3, lr}
   1b58c:	mov	r2, r0
   1b590:	mov	r1, #1
   1b594:	mov	r0, r4
   1b598:	ldr	ip, [r5, #8]
   1b59c:	str	lr, [sp, #48]	; 0x30
   1b5a0:	str	ip, [sp, #52]	; 0x34
   1b5a4:	add	sp, sp, #32
   1b5a8:	ldrd	r4, [sp]
   1b5ac:	ldr	r6, [sp, #8]
   1b5b0:	ldr	lr, [sp, #12]
   1b5b4:	add	sp, sp, #16
   1b5b8:	b	11404 <__fprintf_chk@plt>
   1b5bc:	mov	r2, #5
   1b5c0:	movw	r1, #64812	; 0xfd2c
   1b5c4:	movt	r1, #1
   1b5c8:	mov	r0, #0
   1b5cc:	bl	11230 <dcgettext@plt>
   1b5d0:	ldmib	r5, {r3, ip, lr}
   1b5d4:	mov	r2, r0
   1b5d8:	mov	r1, #1
   1b5dc:	mov	r0, r4
   1b5e0:	str	r3, [sp]
   1b5e4:	ldr	r3, [r5]
   1b5e8:	stmib	sp, {ip, lr}
   1b5ec:	bl	11404 <__fprintf_chk@plt>
   1b5f0:	b	1b4c8 <__assert_fail@plt+0x9fec>
   1b5f4:	mov	r2, #5
   1b5f8:	movw	r1, #64844	; 0xfd4c
   1b5fc:	movt	r1, #1
   1b600:	mov	r0, #0
   1b604:	bl	11230 <dcgettext@plt>
   1b608:	ldmib	r5, {ip, lr}
   1b60c:	mov	r2, r0
   1b610:	mov	r1, #1
   1b614:	mov	r0, r4
   1b618:	ldr	r3, [r5, #16]
   1b61c:	str	ip, [sp]
   1b620:	ldr	ip, [r5, #12]
   1b624:	str	r3, [sp, #12]
   1b628:	ldr	r3, [r5]
   1b62c:	str	lr, [sp, #4]
   1b630:	str	ip, [sp, #8]
   1b634:	bl	11404 <__fprintf_chk@plt>
   1b638:	b	1b4c8 <__assert_fail@plt+0x9fec>
   1b63c:	mov	r2, #5
   1b640:	movw	r1, #64880	; 0xfd70
   1b644:	movt	r1, #1
   1b648:	mov	r0, #0
   1b64c:	bl	11230 <dcgettext@plt>
   1b650:	ldr	lr, [r5, #4]
   1b654:	mov	r2, r0
   1b658:	mov	r1, #1
   1b65c:	mov	r0, r4
   1b660:	ldr	r3, [r5, #8]
   1b664:	ldr	ip, [r5, #20]
   1b668:	str	lr, [sp]
   1b66c:	ldr	lr, [r5, #12]
   1b670:	str	ip, [sp, #16]
   1b674:	ldr	ip, [r5, #16]
   1b678:	str	r3, [sp, #4]
   1b67c:	ldr	r3, [r5]
   1b680:	str	lr, [sp, #8]
   1b684:	str	ip, [sp, #12]
   1b688:	bl	11404 <__fprintf_chk@plt>
   1b68c:	b	1b4c8 <__assert_fail@plt+0x9fec>
   1b690:	mov	r2, #5
   1b694:	movw	r1, #64920	; 0xfd98
   1b698:	movt	r1, #1
   1b69c:	mov	r0, #0
   1b6a0:	bl	11230 <dcgettext@plt>
   1b6a4:	ldmib	r5, {r3, ip}
   1b6a8:	mov	r2, r0
   1b6ac:	mov	r1, #1
   1b6b0:	mov	r0, r4
   1b6b4:	ldr	lr, [r5, #24]
   1b6b8:	str	r3, [sp]
   1b6bc:	ldr	r3, [r5, #12]
   1b6c0:	str	lr, [sp, #20]
   1b6c4:	ldr	lr, [r5, #20]
   1b6c8:	str	ip, [sp, #4]
   1b6cc:	ldr	ip, [r5, #16]
   1b6d0:	str	r3, [sp, #8]
   1b6d4:	ldr	r3, [r5]
   1b6d8:	str	ip, [sp, #12]
   1b6dc:	str	lr, [sp, #16]
   1b6e0:	bl	11404 <__fprintf_chk@plt>
   1b6e4:	b	1b4c8 <__assert_fail@plt+0x9fec>
   1b6e8:	mov	r2, #5
   1b6ec:	movw	r1, #64964	; 0xfdc4
   1b6f0:	movt	r1, #1
   1b6f4:	mov	r0, #0
   1b6f8:	bl	11230 <dcgettext@plt>
   1b6fc:	ldmib	r5, {ip, lr}
   1b700:	mov	r2, r0
   1b704:	mov	r1, #1
   1b708:	mov	r0, r4
   1b70c:	ldr	r3, [r5, #28]
   1b710:	str	ip, [sp]
   1b714:	ldr	ip, [r5, #12]
   1b718:	str	r3, [sp, #24]
   1b71c:	ldr	r3, [r5, #24]
   1b720:	str	lr, [sp, #4]
   1b724:	ldr	lr, [r5, #16]
   1b728:	str	ip, [sp, #8]
   1b72c:	ldr	ip, [r5, #20]
   1b730:	str	r3, [sp, #20]
   1b734:	ldr	r3, [r5]
   1b738:	str	lr, [sp, #12]
   1b73c:	str	ip, [sp, #16]
   1b740:	bl	11404 <__fprintf_chk@plt>
   1b744:	b	1b4c8 <__assert_fail@plt+0x9fec>
   1b748:	movw	r1, #65064	; 0xfe28
   1b74c:	movt	r1, #1
   1b750:	b	1b468 <__assert_fail@plt+0x9f8c>
   1b754:	strd	r4, [sp, #-12]!
   1b758:	str	lr, [sp, #8]
   1b75c:	sub	sp, sp, #12
   1b760:	ldr	r5, [sp, #24]
   1b764:	ldr	ip, [r5]
   1b768:	cmp	ip, #0
   1b76c:	beq	1b788 <__assert_fail@plt+0xa2ac>
   1b770:	mov	lr, r5
   1b774:	mov	ip, #0
   1b778:	ldr	r4, [lr, #4]!
   1b77c:	add	ip, ip, #1
   1b780:	cmp	r4, #0
   1b784:	bne	1b778 <__assert_fail@plt+0xa29c>
   1b788:	stm	sp, {r5, ip}
   1b78c:	bl	1b374 <__assert_fail@plt+0x9e98>
   1b790:	add	sp, sp, #12
   1b794:	ldrd	r4, [sp]
   1b798:	add	sp, sp, #8
   1b79c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b7a0:	push	{lr}		; (str lr, [sp, #-4]!)
   1b7a4:	sub	sp, sp, #52	; 0x34
   1b7a8:	ldr	ip, [sp, #56]	; 0x38
   1b7ac:	ldr	lr, [ip]
   1b7b0:	cmp	lr, #0
   1b7b4:	str	lr, [sp, #8]
   1b7b8:	beq	1b850 <__assert_fail@plt+0xa374>
   1b7bc:	ldr	lr, [ip, #4]
   1b7c0:	cmp	lr, #0
   1b7c4:	str	lr, [sp, #12]
   1b7c8:	beq	1b864 <__assert_fail@plt+0xa388>
   1b7cc:	ldr	lr, [ip, #8]
   1b7d0:	cmp	lr, #0
   1b7d4:	str	lr, [sp, #16]
   1b7d8:	beq	1b86c <__assert_fail@plt+0xa390>
   1b7dc:	ldr	lr, [ip, #12]
   1b7e0:	cmp	lr, #0
   1b7e4:	str	lr, [sp, #20]
   1b7e8:	beq	1b874 <__assert_fail@plt+0xa398>
   1b7ec:	ldr	lr, [ip, #16]
   1b7f0:	cmp	lr, #0
   1b7f4:	str	lr, [sp, #24]
   1b7f8:	beq	1b87c <__assert_fail@plt+0xa3a0>
   1b7fc:	ldr	lr, [ip, #20]
   1b800:	cmp	lr, #0
   1b804:	str	lr, [sp, #28]
   1b808:	beq	1b884 <__assert_fail@plt+0xa3a8>
   1b80c:	ldr	lr, [ip, #24]
   1b810:	cmp	lr, #0
   1b814:	str	lr, [sp, #32]
   1b818:	beq	1b88c <__assert_fail@plt+0xa3b0>
   1b81c:	ldr	lr, [ip, #28]
   1b820:	cmp	lr, #0
   1b824:	str	lr, [sp, #36]	; 0x24
   1b828:	beq	1b894 <__assert_fail@plt+0xa3b8>
   1b82c:	ldr	lr, [ip, #32]
   1b830:	cmp	lr, #0
   1b834:	str	lr, [sp, #40]	; 0x28
   1b838:	beq	1b89c <__assert_fail@plt+0xa3c0>
   1b83c:	ldr	ip, [ip, #36]	; 0x24
   1b840:	cmp	ip, #0
   1b844:	str	ip, [sp, #44]	; 0x2c
   1b848:	movne	lr, #10
   1b84c:	moveq	lr, #9
   1b850:	add	ip, sp, #8
   1b854:	stm	sp, {ip, lr}
   1b858:	bl	1b374 <__assert_fail@plt+0x9e98>
   1b85c:	add	sp, sp, #52	; 0x34
   1b860:	pop	{pc}		; (ldr pc, [sp], #4)
   1b864:	mov	lr, #1
   1b868:	b	1b850 <__assert_fail@plt+0xa374>
   1b86c:	mov	lr, #2
   1b870:	b	1b850 <__assert_fail@plt+0xa374>
   1b874:	mov	lr, #3
   1b878:	b	1b850 <__assert_fail@plt+0xa374>
   1b87c:	mov	lr, #4
   1b880:	b	1b850 <__assert_fail@plt+0xa374>
   1b884:	mov	lr, #5
   1b888:	b	1b850 <__assert_fail@plt+0xa374>
   1b88c:	mov	lr, #6
   1b890:	b	1b850 <__assert_fail@plt+0xa374>
   1b894:	mov	lr, #7
   1b898:	b	1b850 <__assert_fail@plt+0xa374>
   1b89c:	mov	lr, #8
   1b8a0:	b	1b850 <__assert_fail@plt+0xa374>
   1b8a4:	push	{r3}		; (str r3, [sp, #-4]!)
   1b8a8:	push	{lr}		; (str lr, [sp, #-4]!)
   1b8ac:	sub	sp, sp, #56	; 0x38
   1b8b0:	ldr	ip, [sp, #64]	; 0x40
   1b8b4:	add	r3, sp, #64	; 0x40
   1b8b8:	str	r3, [sp, #12]
   1b8bc:	cmp	ip, #0
   1b8c0:	str	ip, [sp, #16]
   1b8c4:	beq	1b95c <__assert_fail@plt+0xa480>
   1b8c8:	ldr	ip, [sp, #68]	; 0x44
   1b8cc:	cmp	ip, #0
   1b8d0:	str	ip, [sp, #20]
   1b8d4:	beq	1b980 <__assert_fail@plt+0xa4a4>
   1b8d8:	ldr	ip, [sp, #72]	; 0x48
   1b8dc:	cmp	ip, #0
   1b8e0:	str	ip, [sp, #24]
   1b8e4:	beq	1b988 <__assert_fail@plt+0xa4ac>
   1b8e8:	ldr	ip, [sp, #76]	; 0x4c
   1b8ec:	cmp	ip, #0
   1b8f0:	str	ip, [sp, #28]
   1b8f4:	beq	1b990 <__assert_fail@plt+0xa4b4>
   1b8f8:	ldr	ip, [sp, #80]	; 0x50
   1b8fc:	cmp	ip, #0
   1b900:	str	ip, [sp, #32]
   1b904:	beq	1b998 <__assert_fail@plt+0xa4bc>
   1b908:	ldr	ip, [sp, #84]	; 0x54
   1b90c:	cmp	ip, #0
   1b910:	str	ip, [sp, #36]	; 0x24
   1b914:	beq	1b9a0 <__assert_fail@plt+0xa4c4>
   1b918:	ldr	ip, [sp, #88]	; 0x58
   1b91c:	cmp	ip, #0
   1b920:	str	ip, [sp, #40]	; 0x28
   1b924:	beq	1b9a8 <__assert_fail@plt+0xa4cc>
   1b928:	ldr	ip, [sp, #92]	; 0x5c
   1b92c:	cmp	ip, #0
   1b930:	str	ip, [sp, #44]	; 0x2c
   1b934:	beq	1b9b0 <__assert_fail@plt+0xa4d4>
   1b938:	ldr	ip, [sp, #96]	; 0x60
   1b93c:	cmp	ip, #0
   1b940:	str	ip, [sp, #48]	; 0x30
   1b944:	beq	1b9b8 <__assert_fail@plt+0xa4dc>
   1b948:	ldr	r3, [sp, #100]	; 0x64
   1b94c:	cmp	r3, #0
   1b950:	str	r3, [sp, #52]	; 0x34
   1b954:	movne	ip, #10
   1b958:	moveq	ip, #9
   1b95c:	ldr	r3, [sp, #60]	; 0x3c
   1b960:	add	lr, sp, #16
   1b964:	str	lr, [sp]
   1b968:	str	ip, [sp, #4]
   1b96c:	bl	1b374 <__assert_fail@plt+0x9e98>
   1b970:	add	sp, sp, #56	; 0x38
   1b974:	pop	{lr}		; (ldr lr, [sp], #4)
   1b978:	add	sp, sp, #4
   1b97c:	bx	lr
   1b980:	mov	ip, #1
   1b984:	b	1b95c <__assert_fail@plt+0xa480>
   1b988:	mov	ip, #2
   1b98c:	b	1b95c <__assert_fail@plt+0xa480>
   1b990:	mov	ip, #3
   1b994:	b	1b95c <__assert_fail@plt+0xa480>
   1b998:	mov	ip, #4
   1b99c:	b	1b95c <__assert_fail@plt+0xa480>
   1b9a0:	mov	ip, #5
   1b9a4:	b	1b95c <__assert_fail@plt+0xa480>
   1b9a8:	mov	ip, #6
   1b9ac:	b	1b95c <__assert_fail@plt+0xa480>
   1b9b0:	mov	ip, #7
   1b9b4:	b	1b95c <__assert_fail@plt+0xa480>
   1b9b8:	mov	ip, #8
   1b9bc:	b	1b95c <__assert_fail@plt+0xa480>
   1b9c0:	movw	r3, #4572	; 0x11dc
   1b9c4:	movt	r3, #3
   1b9c8:	str	r4, [sp, #-8]!
   1b9cc:	mov	r0, #10
   1b9d0:	ldr	r1, [r3]
   1b9d4:	str	lr, [sp, #4]
   1b9d8:	bl	11224 <fputc_unlocked@plt>
   1b9dc:	mov	r2, #5
   1b9e0:	movw	r1, #65124	; 0xfe64
   1b9e4:	movt	r1, #1
   1b9e8:	mov	r0, #0
   1b9ec:	bl	11230 <dcgettext@plt>
   1b9f0:	mov	r1, r0
   1b9f4:	movw	r2, #65144	; 0xfe78
   1b9f8:	movt	r2, #1
   1b9fc:	mov	r0, #1
   1ba00:	bl	113e0 <__printf_chk@plt>
   1ba04:	mov	r2, #5
   1ba08:	movw	r1, #65168	; 0xfe90
   1ba0c:	movt	r1, #1
   1ba10:	mov	r0, #0
   1ba14:	bl	11230 <dcgettext@plt>
   1ba18:	mov	r1, r0
   1ba1c:	movw	r3, #62404	; 0xf3c4
   1ba20:	movt	r3, #1
   1ba24:	movw	r2, #62444	; 0xf3ec
   1ba28:	movt	r2, #1
   1ba2c:	mov	r0, #1
   1ba30:	bl	113e0 <__printf_chk@plt>
   1ba34:	mov	r2, #5
   1ba38:	movw	r1, #65188	; 0xfea4
   1ba3c:	movt	r1, #1
   1ba40:	mov	r0, #0
   1ba44:	bl	11230 <dcgettext@plt>
   1ba48:	mov	r1, r0
   1ba4c:	movw	r2, #65228	; 0xfecc
   1ba50:	movt	r2, #1
   1ba54:	mov	r0, #1
   1ba58:	ldr	r4, [sp]
   1ba5c:	ldr	lr, [sp, #4]
   1ba60:	add	sp, sp, #8
   1ba64:	b	113e0 <__printf_chk@plt>
   1ba68:	strd	r4, [sp, #-16]!
   1ba6c:	mov	r4, r0
   1ba70:	mov	r5, r2
   1ba74:	str	r6, [sp, #8]
   1ba78:	mov	r6, r1
   1ba7c:	str	lr, [sp, #12]
   1ba80:	bl	1d6f8 <__assert_fail@plt+0xc21c>
   1ba84:	cmp	r0, #0
   1ba88:	beq	1ba9c <__assert_fail@plt+0xa5c0>
   1ba8c:	ldrd	r4, [sp]
   1ba90:	ldr	r6, [sp, #8]
   1ba94:	add	sp, sp, #12
   1ba98:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba9c:	cmp	r4, #0
   1baa0:	beq	1bab0 <__assert_fail@plt+0xa5d4>
   1baa4:	cmp	r6, #0
   1baa8:	cmpne	r5, #0
   1baac:	beq	1ba8c <__assert_fail@plt+0xa5b0>
   1bab0:	bl	1c06c <__assert_fail@plt+0xab90>
   1bab4:	str	r4, [sp, #-8]!
   1bab8:	str	lr, [sp, #4]
   1babc:	bl	1d004 <__assert_fail@plt+0xbb28>
   1bac0:	cmp	r0, #0
   1bac4:	beq	1bad4 <__assert_fail@plt+0xa5f8>
   1bac8:	ldr	r4, [sp]
   1bacc:	add	sp, sp, #4
   1bad0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bad4:	bl	1c06c <__assert_fail@plt+0xab90>
   1bad8:	str	r4, [sp, #-8]!
   1badc:	str	lr, [sp, #4]
   1bae0:	bl	1d004 <__assert_fail@plt+0xbb28>
   1bae4:	cmp	r0, #0
   1bae8:	beq	1baf8 <__assert_fail@plt+0xa61c>
   1baec:	ldr	r4, [sp]
   1baf0:	add	sp, sp, #4
   1baf4:	pop	{pc}		; (ldr pc, [sp], #4)
   1baf8:	bl	1c06c <__assert_fail@plt+0xab90>
   1bafc:	str	r4, [sp, #-8]!
   1bb00:	str	lr, [sp, #4]
   1bb04:	bl	1d004 <__assert_fail@plt+0xbb28>
   1bb08:	cmp	r0, #0
   1bb0c:	beq	1bb1c <__assert_fail@plt+0xa640>
   1bb10:	ldr	r4, [sp]
   1bb14:	add	sp, sp, #4
   1bb18:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb1c:	bl	1c06c <__assert_fail@plt+0xab90>
   1bb20:	strd	r4, [sp, #-16]!
   1bb24:	mov	r5, r0
   1bb28:	mov	r4, r1
   1bb2c:	str	r6, [sp, #8]
   1bb30:	str	lr, [sp, #12]
   1bb34:	bl	1d040 <__assert_fail@plt+0xbb64>
   1bb38:	cmp	r0, #0
   1bb3c:	beq	1bb50 <__assert_fail@plt+0xa674>
   1bb40:	ldrd	r4, [sp]
   1bb44:	ldr	r6, [sp, #8]
   1bb48:	add	sp, sp, #12
   1bb4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb50:	adds	r4, r4, #0
   1bb54:	movne	r4, #1
   1bb58:	cmp	r5, #0
   1bb5c:	moveq	r4, #1
   1bb60:	cmp	r4, #0
   1bb64:	beq	1bb40 <__assert_fail@plt+0xa664>
   1bb68:	bl	1c06c <__assert_fail@plt+0xab90>
   1bb6c:	cmp	r1, #0
   1bb70:	orreq	r1, r1, #1
   1bb74:	str	r4, [sp, #-8]!
   1bb78:	str	lr, [sp, #4]
   1bb7c:	bl	1d040 <__assert_fail@plt+0xbb64>
   1bb80:	cmp	r0, #0
   1bb84:	beq	1bb94 <__assert_fail@plt+0xa6b8>
   1bb88:	ldr	r4, [sp]
   1bb8c:	add	sp, sp, #4
   1bb90:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb94:	bl	1c06c <__assert_fail@plt+0xab90>
   1bb98:	strd	r4, [sp, #-16]!
   1bb9c:	mov	r4, r0
   1bba0:	mov	r5, r2
   1bba4:	str	r6, [sp, #8]
   1bba8:	mov	r6, r1
   1bbac:	str	lr, [sp, #12]
   1bbb0:	bl	1d6f8 <__assert_fail@plt+0xc21c>
   1bbb4:	cmp	r0, #0
   1bbb8:	beq	1bbcc <__assert_fail@plt+0xa6f0>
   1bbbc:	ldrd	r4, [sp]
   1bbc0:	ldr	r6, [sp, #8]
   1bbc4:	add	sp, sp, #12
   1bbc8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bbcc:	cmp	r4, #0
   1bbd0:	beq	1bbe0 <__assert_fail@plt+0xa704>
   1bbd4:	cmp	r6, #0
   1bbd8:	cmpne	r5, #0
   1bbdc:	beq	1bbbc <__assert_fail@plt+0xa6e0>
   1bbe0:	bl	1c06c <__assert_fail@plt+0xab90>
   1bbe4:	cmp	r2, #0
   1bbe8:	cmpne	r1, #0
   1bbec:	str	r4, [sp, #-8]!
   1bbf0:	moveq	r2, #1
   1bbf4:	str	lr, [sp, #4]
   1bbf8:	moveq	r1, r2
   1bbfc:	bl	1d6f8 <__assert_fail@plt+0xc21c>
   1bc00:	cmp	r0, #0
   1bc04:	beq	1bc14 <__assert_fail@plt+0xa738>
   1bc08:	ldr	r4, [sp]
   1bc0c:	add	sp, sp, #4
   1bc10:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc14:	bl	1c06c <__assert_fail@plt+0xab90>
   1bc18:	mov	r2, r1
   1bc1c:	mov	r1, r0
   1bc20:	str	r4, [sp, #-8]!
   1bc24:	mov	r0, #0
   1bc28:	str	lr, [sp, #4]
   1bc2c:	bl	1d6f8 <__assert_fail@plt+0xc21c>
   1bc30:	cmp	r0, #0
   1bc34:	beq	1bc44 <__assert_fail@plt+0xa768>
   1bc38:	ldr	r4, [sp]
   1bc3c:	add	sp, sp, #4
   1bc40:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc44:	bl	1c06c <__assert_fail@plt+0xab90>
   1bc48:	cmp	r1, #0
   1bc4c:	cmpne	r0, #0
   1bc50:	str	r4, [sp, #-8]!
   1bc54:	moveq	r2, #1
   1bc58:	movne	r2, r1
   1bc5c:	str	lr, [sp, #4]
   1bc60:	movne	r1, r0
   1bc64:	moveq	r1, r2
   1bc68:	mov	r0, #0
   1bc6c:	bl	1d6f8 <__assert_fail@plt+0xc21c>
   1bc70:	cmp	r0, #0
   1bc74:	beq	1bc84 <__assert_fail@plt+0xa7a8>
   1bc78:	ldr	r4, [sp]
   1bc7c:	add	sp, sp, #4
   1bc80:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc84:	bl	1c06c <__assert_fail@plt+0xab90>
   1bc88:	cmp	r0, #0
   1bc8c:	strd	r4, [sp, #-16]!
   1bc90:	mov	r5, r1
   1bc94:	ldr	r4, [r1]
   1bc98:	str	r6, [sp, #8]
   1bc9c:	str	lr, [sp, #12]
   1bca0:	beq	1bce8 <__assert_fail@plt+0xa80c>
   1bca4:	lsr	r3, r4, #1
   1bca8:	add	r3, r3, #1
   1bcac:	adds	r4, r4, r3
   1bcb0:	bcs	1bce4 <__assert_fail@plt+0xa808>
   1bcb4:	mov	r2, #1
   1bcb8:	mov	r1, r4
   1bcbc:	bl	1d6f8 <__assert_fail@plt+0xc21c>
   1bcc0:	cmp	r0, #0
   1bcc4:	beq	1bcdc <__assert_fail@plt+0xa800>
   1bcc8:	ldr	r6, [sp, #8]
   1bccc:	str	r4, [r5]
   1bcd0:	ldrd	r4, [sp]
   1bcd4:	add	sp, sp, #12
   1bcd8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bcdc:	cmp	r4, #0
   1bce0:	beq	1bcc8 <__assert_fail@plt+0xa7ec>
   1bce4:	bl	1c06c <__assert_fail@plt+0xab90>
   1bce8:	cmp	r4, #0
   1bcec:	mov	r2, #1
   1bcf0:	moveq	r4, #64	; 0x40
   1bcf4:	mov	r1, r4
   1bcf8:	bl	1d6f8 <__assert_fail@plt+0xc21c>
   1bcfc:	cmp	r0, #0
   1bd00:	bne	1bcc8 <__assert_fail@plt+0xa7ec>
   1bd04:	b	1bce4 <__assert_fail@plt+0xa808>
   1bd08:	cmp	r0, #0
   1bd0c:	strd	r4, [sp, #-16]!
   1bd10:	mov	r5, r1
   1bd14:	ldr	r4, [r1]
   1bd18:	str	r6, [sp, #8]
   1bd1c:	mov	r6, r2
   1bd20:	str	lr, [sp, #12]
   1bd24:	beq	1bd6c <__assert_fail@plt+0xa890>
   1bd28:	lsr	r3, r4, #1
   1bd2c:	add	r3, r3, #1
   1bd30:	adds	r4, r4, r3
   1bd34:	bcs	1bd68 <__assert_fail@plt+0xa88c>
   1bd38:	mov	r1, r4
   1bd3c:	bl	1d6f8 <__assert_fail@plt+0xc21c>
   1bd40:	cmp	r0, #0
   1bd44:	beq	1bd5c <__assert_fail@plt+0xa880>
   1bd48:	ldr	r6, [sp, #8]
   1bd4c:	str	r4, [r5]
   1bd50:	ldrd	r4, [sp]
   1bd54:	add	sp, sp, #12
   1bd58:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd5c:	cmp	r4, #0
   1bd60:	cmpne	r6, #0
   1bd64:	beq	1bd48 <__assert_fail@plt+0xa86c>
   1bd68:	bl	1c06c <__assert_fail@plt+0xab90>
   1bd6c:	cmp	r4, #0
   1bd70:	bne	1bd84 <__assert_fail@plt+0xa8a8>
   1bd74:	mov	r4, #64	; 0x40
   1bd78:	udiv	r4, r4, r2
   1bd7c:	cmp	r2, #64	; 0x40
   1bd80:	addhi	r4, r4, #1
   1bd84:	mov	r2, r6
   1bd88:	mov	r1, r4
   1bd8c:	mov	r0, #0
   1bd90:	bl	1d6f8 <__assert_fail@plt+0xc21c>
   1bd94:	cmp	r0, #0
   1bd98:	bne	1bd48 <__assert_fail@plt+0xa86c>
   1bd9c:	b	1bd68 <__assert_fail@plt+0xa88c>
   1bda0:	ldr	ip, [r1]
   1bda4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1bda8:	strd	r6, [sp, #8]
   1bdac:	mov	r7, r1
   1bdb0:	mov	r6, r0
   1bdb4:	str	r8, [sp, #16]
   1bdb8:	mvn	r8, r3
   1bdbc:	lsr	r8, r8, #31
   1bdc0:	str	lr, [sp, #20]
   1bdc4:	asr	r1, ip, #1
   1bdc8:	ldr	lr, [sp, #24]
   1bdcc:	adds	r4, ip, r1
   1bdd0:	mvnvs	r4, #-2147483648	; 0x80000000
   1bdd4:	cmp	r3, r4
   1bdd8:	movge	r1, #0
   1bddc:	andlt	r1, r8, #1
   1bde0:	cmp	r1, #0
   1bde4:	movne	r4, r3
   1bde8:	smull	r0, r1, r4, lr
   1bdec:	cmp	r1, r0, asr #31
   1bdf0:	bne	1bea0 <__assert_fail@plt+0xa9c4>
   1bdf4:	cmp	r0, #63	; 0x3f
   1bdf8:	mov	r5, r0
   1bdfc:	ble	1be6c <__assert_fail@plt+0xa990>
   1be00:	cmp	r6, #0
   1be04:	sub	r1, r4, ip
   1be08:	streq	r6, [r7]
   1be0c:	cmp	r1, r2
   1be10:	bge	1be40 <__assert_fail@plt+0xa964>
   1be14:	adds	r4, ip, r2
   1be18:	bvs	1be9c <__assert_fail@plt+0xa9c0>
   1be1c:	cmp	r4, r3
   1be20:	movle	r3, #0
   1be24:	andgt	r3, r8, #1
   1be28:	cmp	r3, #0
   1be2c:	bne	1be9c <__assert_fail@plt+0xa9c0>
   1be30:	smull	r0, r1, r4, lr
   1be34:	cmp	r1, r0, asr #31
   1be38:	mov	r5, r0
   1be3c:	bne	1be9c <__assert_fail@plt+0xa9c0>
   1be40:	mov	r1, r5
   1be44:	mov	r0, r6
   1be48:	bl	1d040 <__assert_fail@plt+0xbb64>
   1be4c:	cmp	r0, #0
   1be50:	beq	1be80 <__assert_fail@plt+0xa9a4>
   1be54:	ldr	r8, [sp, #16]
   1be58:	str	r4, [r7]
   1be5c:	ldrd	r4, [sp]
   1be60:	ldrd	r6, [sp, #8]
   1be64:	add	sp, sp, #20
   1be68:	pop	{pc}		; (ldr pc, [sp], #4)
   1be6c:	mov	r0, #64	; 0x40
   1be70:	sdiv	r4, r0, lr
   1be74:	mls	r5, lr, r4, r0
   1be78:	sub	r5, r0, r5
   1be7c:	b	1be00 <__assert_fail@plt+0xa924>
   1be80:	adds	r5, r5, #0
   1be84:	movne	r5, #1
   1be88:	cmp	r6, #0
   1be8c:	movne	r6, r5
   1be90:	moveq	r6, #1
   1be94:	cmp	r6, #0
   1be98:	beq	1be54 <__assert_fail@plt+0xa978>
   1be9c:	bl	1c06c <__assert_fail@plt+0xab90>
   1bea0:	mvn	r0, #-2147483648	; 0x80000000
   1bea4:	b	1be70 <__assert_fail@plt+0xa994>
   1bea8:	mov	r1, #1
   1beac:	str	r4, [sp, #-8]!
   1beb0:	str	lr, [sp, #4]
   1beb4:	bl	1cf90 <__assert_fail@plt+0xbab4>
   1beb8:	cmp	r0, #0
   1bebc:	beq	1becc <__assert_fail@plt+0xa9f0>
   1bec0:	ldr	r4, [sp]
   1bec4:	add	sp, sp, #4
   1bec8:	pop	{pc}		; (ldr pc, [sp], #4)
   1becc:	bl	1c06c <__assert_fail@plt+0xab90>
   1bed0:	mov	r1, #1
   1bed4:	str	r4, [sp, #-8]!
   1bed8:	str	lr, [sp, #4]
   1bedc:	bl	1cf90 <__assert_fail@plt+0xbab4>
   1bee0:	cmp	r0, #0
   1bee4:	beq	1bef4 <__assert_fail@plt+0xaa18>
   1bee8:	ldr	r4, [sp]
   1beec:	add	sp, sp, #4
   1bef0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bef4:	bl	1c06c <__assert_fail@plt+0xab90>
   1bef8:	str	r4, [sp, #-8]!
   1befc:	str	lr, [sp, #4]
   1bf00:	bl	1cf90 <__assert_fail@plt+0xbab4>
   1bf04:	cmp	r0, #0
   1bf08:	beq	1bf18 <__assert_fail@plt+0xaa3c>
   1bf0c:	ldr	r4, [sp]
   1bf10:	add	sp, sp, #4
   1bf14:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf18:	bl	1c06c <__assert_fail@plt+0xab90>
   1bf1c:	str	r4, [sp, #-8]!
   1bf20:	str	lr, [sp, #4]
   1bf24:	bl	1cf90 <__assert_fail@plt+0xbab4>
   1bf28:	cmp	r0, #0
   1bf2c:	beq	1bf3c <__assert_fail@plt+0xaa60>
   1bf30:	ldr	r4, [sp]
   1bf34:	add	sp, sp, #4
   1bf38:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf3c:	bl	1c06c <__assert_fail@plt+0xab90>
   1bf40:	strd	r4, [sp, #-16]!
   1bf44:	mov	r4, r1
   1bf48:	str	r6, [sp, #8]
   1bf4c:	mov	r6, r0
   1bf50:	mov	r0, r1
   1bf54:	str	lr, [sp, #12]
   1bf58:	bl	1d004 <__assert_fail@plt+0xbb28>
   1bf5c:	subs	r5, r0, #0
   1bf60:	beq	1bf84 <__assert_fail@plt+0xaaa8>
   1bf64:	mov	r2, r4
   1bf68:	mov	r1, r6
   1bf6c:	bl	111e8 <memcpy@plt>
   1bf70:	mov	r0, r5
   1bf74:	ldrd	r4, [sp]
   1bf78:	ldr	r6, [sp, #8]
   1bf7c:	add	sp, sp, #12
   1bf80:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf84:	bl	1c06c <__assert_fail@plt+0xab90>
   1bf88:	strd	r4, [sp, #-16]!
   1bf8c:	mov	r4, r1
   1bf90:	str	r6, [sp, #8]
   1bf94:	mov	r6, r0
   1bf98:	mov	r0, r1
   1bf9c:	str	lr, [sp, #12]
   1bfa0:	bl	1d004 <__assert_fail@plt+0xbb28>
   1bfa4:	subs	r5, r0, #0
   1bfa8:	beq	1bfcc <__assert_fail@plt+0xaaf0>
   1bfac:	mov	r2, r4
   1bfb0:	mov	r1, r6
   1bfb4:	bl	111e8 <memcpy@plt>
   1bfb8:	mov	r0, r5
   1bfbc:	ldrd	r4, [sp]
   1bfc0:	ldr	r6, [sp, #8]
   1bfc4:	add	sp, sp, #12
   1bfc8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bfcc:	bl	1c06c <__assert_fail@plt+0xab90>
   1bfd0:	strd	r4, [sp, #-16]!
   1bfd4:	mov	r4, r1
   1bfd8:	str	r6, [sp, #8]
   1bfdc:	mov	r6, r0
   1bfe0:	add	r0, r1, #1
   1bfe4:	str	lr, [sp, #12]
   1bfe8:	bl	1d004 <__assert_fail@plt+0xbb28>
   1bfec:	subs	r5, r0, #0
   1bff0:	beq	1c01c <__assert_fail@plt+0xab40>
   1bff4:	mov	r3, #0
   1bff8:	mov	r1, r6
   1bffc:	mov	r2, r4
   1c000:	strb	r3, [r5, r4]
   1c004:	bl	111e8 <memcpy@plt>
   1c008:	mov	r0, r5
   1c00c:	ldrd	r4, [sp]
   1c010:	ldr	r6, [sp, #8]
   1c014:	add	sp, sp, #12
   1c018:	pop	{pc}		; (ldr pc, [sp], #4)
   1c01c:	bl	1c06c <__assert_fail@plt+0xab90>
   1c020:	strd	r4, [sp, #-16]!
   1c024:	str	r6, [sp, #8]
   1c028:	mov	r6, r0
   1c02c:	str	lr, [sp, #12]
   1c030:	bl	11380 <strlen@plt>
   1c034:	add	r4, r0, #1
   1c038:	mov	r0, r4
   1c03c:	bl	1d004 <__assert_fail@plt+0xbb28>
   1c040:	subs	r5, r0, #0
   1c044:	beq	1c068 <__assert_fail@plt+0xab8c>
   1c048:	mov	r2, r4
   1c04c:	mov	r1, r6
   1c050:	bl	111e8 <memcpy@plt>
   1c054:	mov	r0, r5
   1c058:	ldrd	r4, [sp]
   1c05c:	ldr	r6, [sp, #8]
   1c060:	add	sp, sp, #12
   1c064:	pop	{pc}		; (ldr pc, [sp], #4)
   1c068:	bl	1c06c <__assert_fail@plt+0xab90>
   1c06c:	movw	r3, #4476	; 0x117c
   1c070:	movt	r3, #3
   1c074:	str	r4, [sp, #-8]!
   1c078:	ldr	r4, [r3]
   1c07c:	mov	r2, #5
   1c080:	movw	r1, #65308	; 0xff1c
   1c084:	movt	r1, #1
   1c088:	mov	r0, #0
   1c08c:	str	lr, [sp, #4]
   1c090:	bl	11230 <dcgettext@plt>
   1c094:	mov	r3, r0
   1c098:	movw	r2, #58740	; 0xe574
   1c09c:	movt	r2, #1
   1c0a0:	mov	r1, #0
   1c0a4:	mov	r0, r4
   1c0a8:	bl	112d8 <error@plt>
   1c0ac:	bl	114ac <abort@plt>
   1c0b0:	cmp	r2, #36	; 0x24
   1c0b4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c0b8:	strd	r6, [sp, #8]
   1c0bc:	strd	r8, [sp, #16]
   1c0c0:	strd	sl, [sp, #24]
   1c0c4:	str	lr, [sp, #32]
   1c0c8:	sub	sp, sp, #36	; 0x24
   1c0cc:	bhi	1cd44 <__assert_fail@plt+0xb868>
   1c0d0:	cmp	r1, #0
   1c0d4:	mov	r6, r2
   1c0d8:	mov	r5, r1
   1c0dc:	mov	sl, r0
   1c0e0:	addeq	r5, sp, #28
   1c0e4:	mov	r9, r3
   1c0e8:	bl	113a4 <__errno_location@plt>
   1c0ec:	mov	r3, #0
   1c0f0:	mov	fp, r0
   1c0f4:	str	r3, [r0]
   1c0f8:	ldrb	r4, [sl]
   1c0fc:	bl	11368 <__ctype_b_loc@plt>
   1c100:	ldr	r2, [r0]
   1c104:	lsl	r3, r4, #1
   1c108:	ldrh	r3, [r2, r3]
   1c10c:	tst	r3, #8192	; 0x2000
   1c110:	beq	1c12c <__assert_fail@plt+0xac50>
   1c114:	mov	r3, sl
   1c118:	ldrb	r4, [r3, #1]!
   1c11c:	lsl	r1, r4, #1
   1c120:	ldrh	r1, [r2, r1]
   1c124:	tst	r1, #8192	; 0x2000
   1c128:	bne	1c118 <__assert_fail@plt+0xac3c>
   1c12c:	cmp	r4, #45	; 0x2d
   1c130:	beq	1c1cc <__assert_fail@plt+0xacf0>
   1c134:	mov	r2, r6
   1c138:	mov	r3, #0
   1c13c:	mov	r1, r5
   1c140:	mov	r0, sl
   1c144:	bl	111f4 <__strtoull_internal@plt>
   1c148:	ldr	r8, [r5]
   1c14c:	mov	r6, r0
   1c150:	mov	r7, r1
   1c154:	cmp	r8, sl
   1c158:	beq	1c1b4 <__assert_fail@plt+0xacd8>
   1c15c:	ldr	r4, [fp]
   1c160:	cmp	r4, #0
   1c164:	bne	1c1a4 <__assert_fail@plt+0xacc8>
   1c168:	ldr	r3, [sp, #72]	; 0x48
   1c16c:	cmp	r3, #0
   1c170:	beq	1c180 <__assert_fail@plt+0xaca4>
   1c174:	ldrb	sl, [r8]
   1c178:	cmp	sl, #0
   1c17c:	bne	1c538 <__assert_fail@plt+0xb05c>
   1c180:	strd	r6, [r9]
   1c184:	mov	r0, r4
   1c188:	add	sp, sp, #36	; 0x24
   1c18c:	ldrd	r4, [sp]
   1c190:	ldrd	r6, [sp, #8]
   1c194:	ldrd	r8, [sp, #16]
   1c198:	ldrd	sl, [sp, #24]
   1c19c:	add	sp, sp, #32
   1c1a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c1a4:	cmp	r4, #34	; 0x22
   1c1a8:	bne	1c1cc <__assert_fail@plt+0xacf0>
   1c1ac:	mov	r4, #1
   1c1b0:	b	1c168 <__assert_fail@plt+0xac8c>
   1c1b4:	ldr	r3, [sp, #72]	; 0x48
   1c1b8:	cmp	r3, #0
   1c1bc:	beq	1c1cc <__assert_fail@plt+0xacf0>
   1c1c0:	ldrb	sl, [sl]
   1c1c4:	cmp	sl, #0
   1c1c8:	bne	1c1d4 <__assert_fail@plt+0xacf8>
   1c1cc:	mov	r4, #4
   1c1d0:	b	1c184 <__assert_fail@plt+0xaca8>
   1c1d4:	mov	r1, sl
   1c1d8:	mov	r0, r3
   1c1dc:	bl	1138c <strchr@plt>
   1c1e0:	cmp	r0, #0
   1c1e4:	movne	r4, #0
   1c1e8:	movne	r6, #1
   1c1ec:	movne	r7, r4
   1c1f0:	beq	1c1cc <__assert_fail@plt+0xacf0>
   1c1f4:	sub	r3, sl, #69	; 0x45
   1c1f8:	cmp	r3, #47	; 0x2f
   1c1fc:	ldrls	pc, [pc, r3, lsl #2]
   1c200:	b	1c308 <__assert_fail@plt+0xae2c>
   1c204:	andeq	ip, r1, r4, asr #5
   1c208:	andeq	ip, r1, r8, lsl #6
   1c20c:	andeq	ip, r1, r4, asr #5
   1c210:	andeq	ip, r1, r8, lsl #6
   1c214:	andeq	ip, r1, r8, lsl #6
   1c218:	andeq	ip, r1, r8, lsl #6
   1c21c:	andeq	ip, r1, r4, asr #5
   1c220:	andeq	ip, r1, r8, lsl #6
   1c224:	andeq	ip, r1, r4, asr #5
   1c228:	andeq	ip, r1, r8, lsl #6
   1c22c:	andeq	ip, r1, r8, lsl #6
   1c230:	andeq	ip, r1, r4, asr #5
   1c234:	andeq	ip, r1, r8, lsl #6
   1c238:	andeq	ip, r1, r8, lsl #6
   1c23c:	andeq	ip, r1, r8, lsl #6
   1c240:	andeq	ip, r1, r4, asr #5
   1c244:	andeq	ip, r1, r8, lsl #6
   1c248:	andeq	ip, r1, r8, lsl #6
   1c24c:	andeq	ip, r1, r8, lsl #6
   1c250:	andeq	ip, r1, r8, lsl #6
   1c254:	andeq	ip, r1, r4, asr #5
   1c258:	andeq	ip, r1, r4, asr #5
   1c25c:	andeq	ip, r1, r8, lsl #6
   1c260:	andeq	ip, r1, r8, lsl #6
   1c264:	andeq	ip, r1, r8, lsl #6
   1c268:	andeq	ip, r1, r8, lsl #6
   1c26c:	andeq	ip, r1, r8, lsl #6
   1c270:	andeq	ip, r1, r8, lsl #6
   1c274:	andeq	ip, r1, r8, lsl #6
   1c278:	andeq	ip, r1, r8, lsl #6
   1c27c:	andeq	ip, r1, r8, lsl #6
   1c280:	andeq	ip, r1, r8, lsl #6
   1c284:	andeq	ip, r1, r8, lsl #6
   1c288:	andeq	ip, r1, r8, lsl #6
   1c28c:	andeq	ip, r1, r4, asr #5
   1c290:	andeq	ip, r1, r8, lsl #6
   1c294:	andeq	ip, r1, r8, lsl #6
   1c298:	andeq	ip, r1, r8, lsl #6
   1c29c:	andeq	ip, r1, r4, asr #5
   1c2a0:	andeq	ip, r1, r8, lsl #6
   1c2a4:	andeq	ip, r1, r4, asr #5
   1c2a8:	andeq	ip, r1, r8, lsl #6
   1c2ac:	andeq	ip, r1, r8, lsl #6
   1c2b0:	andeq	ip, r1, r8, lsl #6
   1c2b4:	andeq	ip, r1, r8, lsl #6
   1c2b8:	andeq	ip, r1, r8, lsl #6
   1c2bc:	andeq	ip, r1, r8, lsl #6
   1c2c0:	andeq	ip, r1, r4, asr #5
   1c2c4:	mov	r1, #48	; 0x30
   1c2c8:	ldr	r0, [sp, #72]	; 0x48
   1c2cc:	bl	1138c <strchr@plt>
   1c2d0:	cmp	r0, #0
   1c2d4:	beq	1c308 <__assert_fail@plt+0xae2c>
   1c2d8:	ldrb	r3, [r8, #1]
   1c2dc:	cmp	r3, #68	; 0x44
   1c2e0:	beq	1c898 <__assert_fail@plt+0xb3bc>
   1c2e4:	cmp	r3, #105	; 0x69
   1c2e8:	beq	1c550 <__assert_fail@plt+0xb074>
   1c2ec:	cmp	r3, #66	; 0x42
   1c2f0:	moveq	r3, #2
   1c2f4:	movne	r3, #1
   1c2f8:	moveq	ip, #1000	; 0x3e8
   1c2fc:	movne	ip, #1024	; 0x400
   1c300:	str	r3, [sp, #12]
   1c304:	b	1c314 <__assert_fail@plt+0xae38>
   1c308:	mov	r3, #1
   1c30c:	mov	ip, #1024	; 0x400
   1c310:	str	r3, [sp, #12]
   1c314:	sub	sl, sl, #66	; 0x42
   1c318:	cmp	sl, #53	; 0x35
   1c31c:	ldrls	pc, [pc, sl, lsl #2]
   1c320:	b	1c4fc <__assert_fail@plt+0xb020>
   1c324:	andeq	ip, r1, r4, ror #15
   1c328:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c32c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c330:	andeq	ip, r1, r4, lsl #15
   1c334:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c338:	andeq	ip, r1, r0, lsl #16
   1c33c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c340:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c344:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c348:	andeq	ip, r1, r4, lsl #10
   1c34c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c350:	andeq	ip, r1, ip, lsr #14
   1c354:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c358:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c35c:	ldrdeq	ip, [r1], -r0
   1c360:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c364:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c368:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c36c:	andeq	ip, r1, r0, ror r6
   1c370:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c374:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c378:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c37c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c380:	andeq	ip, r1, r4, lsr #11
   1c384:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c388:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c38c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c390:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c394:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c398:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c39c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c3a0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c3a4:	andeq	ip, r1, r4, lsl #11
   1c3a8:	andeq	ip, r1, r4, ror #9
   1c3ac:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c3b0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c3b4:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c3b8:	andeq	ip, r1, r0, lsl #16
   1c3bc:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c3c0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c3c4:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c3c8:	andeq	ip, r1, r4, lsl #10
   1c3cc:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c3d0:	andeq	ip, r1, ip, lsr #14
   1c3d4:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c3d8:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c3dc:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c3e0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c3e4:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c3e8:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c3ec:	andeq	ip, r1, r0, ror r6
   1c3f0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c3f4:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c3f8:	andeq	ip, r1, ip, ror #10
   1c3fc:	asr	r3, ip, #31
   1c400:	mov	r2, ip
   1c404:	cmp	r7, #0
   1c408:	mov	r1, #0
   1c40c:	strd	r2, [sp]
   1c410:	bne	1c950 <__assert_fail@plt+0xb474>
   1c414:	umull	r6, r7, r6, ip
   1c418:	mov	r2, r6
   1c41c:	mov	r3, r7
   1c420:	cmp	r1, #0
   1c424:	bne	1c864 <__assert_fail@plt+0xb388>
   1c428:	cmp	r3, #0
   1c42c:	mov	lr, r1
   1c430:	bne	1ca7c <__assert_fail@plt+0xb5a0>
   1c434:	umull	r2, r3, r2, ip
   1c438:	mov	r0, r2
   1c43c:	mov	r1, r3
   1c440:	cmp	lr, #0
   1c444:	bne	1c864 <__assert_fail@plt+0xb388>
   1c448:	cmp	r1, #0
   1c44c:	bne	1ca58 <__assert_fail@plt+0xb57c>
   1c450:	umull	r0, r1, r0, ip
   1c454:	mov	r2, r0
   1c458:	mov	r3, r1
   1c45c:	cmp	lr, #0
   1c460:	bne	1c864 <__assert_fail@plt+0xb388>
   1c464:	cmp	r3, #0
   1c468:	bne	1c708 <__assert_fail@plt+0xb22c>
   1c46c:	umull	r2, r3, r2, ip
   1c470:	mov	r0, r2
   1c474:	mov	r1, r3
   1c478:	cmp	lr, #0
   1c47c:	bne	1c864 <__assert_fail@plt+0xb388>
   1c480:	cmp	r1, #0
   1c484:	bne	1c908 <__assert_fail@plt+0xb42c>
   1c488:	umull	r0, r1, r0, ip
   1c48c:	mov	r2, r0
   1c490:	mov	r3, r1
   1c494:	cmp	lr, #0
   1c498:	bne	1c864 <__assert_fail@plt+0xb388>
   1c49c:	cmp	r3, #0
   1c4a0:	mov	r7, lr
   1c4a4:	bne	1c8e4 <__assert_fail@plt+0xb408>
   1c4a8:	umull	r2, r3, r2, ip
   1c4ac:	mov	r6, r2
   1c4b0:	mov	lr, r3
   1c4b4:	cmp	r7, #0
   1c4b8:	bne	1c864 <__assert_fail@plt+0xb388>
   1c4bc:	cmp	lr, #0
   1c4c0:	bne	1c8a8 <__assert_fail@plt+0xb3cc>
   1c4c4:	umull	r2, r3, r6, ip
   1c4c8:	mov	r0, r2
   1c4cc:	mov	r2, r3
   1c4d0:	subs	r3, r7, #0
   1c4d4:	bne	1c864 <__assert_fail@plt+0xb388>
   1c4d8:	mov	r6, r0
   1c4dc:	mov	r7, r2
   1c4e0:	orr	r4, r4, r3
   1c4e4:	ldr	r2, [sp, #12]
   1c4e8:	add	r3, r8, r2
   1c4ec:	str	r3, [r5]
   1c4f0:	ldrb	r3, [r8, r2]
   1c4f4:	cmp	r3, #0
   1c4f8:	beq	1c180 <__assert_fail@plt+0xaca4>
   1c4fc:	orr	r4, r4, #2
   1c500:	b	1c180 <__assert_fail@plt+0xaca4>
   1c504:	cmp	r7, #0
   1c508:	asr	r1, ip, #31
   1c50c:	mov	lr, #0
   1c510:	bne	1c874 <__assert_fail@plt+0xb398>
   1c514:	umull	r2, r3, r6, ip
   1c518:	mov	r6, r2
   1c51c:	mov	r7, r3
   1c520:	cmp	lr, #0
   1c524:	beq	1c4e4 <__assert_fail@plt+0xb008>
   1c528:	mvn	r6, #0
   1c52c:	mov	r4, #1
   1c530:	mov	r7, r6
   1c534:	b	1c4e4 <__assert_fail@plt+0xb008>
   1c538:	mov	r0, r3
   1c53c:	mov	r1, sl
   1c540:	bl	1138c <strchr@plt>
   1c544:	cmp	r0, #0
   1c548:	bne	1c1f4 <__assert_fail@plt+0xad18>
   1c54c:	b	1c4fc <__assert_fail@plt+0xb020>
   1c550:	ldrb	r3, [r8, #2]
   1c554:	mov	ip, #1024	; 0x400
   1c558:	cmp	r3, #66	; 0x42
   1c55c:	movne	r3, #1
   1c560:	moveq	r3, #3
   1c564:	str	r3, [sp, #12]
   1c568:	b	1c314 <__assert_fail@plt+0xae38>
   1c56c:	lsr	r3, r7, #31
   1c570:	adds	r6, r6, r6
   1c574:	adc	r7, r7, r7
   1c578:	cmp	r3, #0
   1c57c:	beq	1c4e4 <__assert_fail@plt+0xb008>
   1c580:	b	1c528 <__assert_fail@plt+0xb04c>
   1c584:	lsr	r3, r7, #23
   1c588:	lsl	r7, r7, #9
   1c58c:	cmp	r3, #0
   1c590:	lsl	r3, r6, #9
   1c594:	orr	r7, r7, r6, lsr #23
   1c598:	bne	1c528 <__assert_fail@plt+0xb04c>
   1c59c:	mov	r6, r3
   1c5a0:	b	1c4e4 <__assert_fail@plt+0xb008>
   1c5a4:	asr	r3, ip, #31
   1c5a8:	mov	r2, ip
   1c5ac:	cmp	r7, #0
   1c5b0:	mov	r1, #0
   1c5b4:	strd	r2, [sp]
   1c5b8:	bne	1c9c4 <__assert_fail@plt+0xb4e8>
   1c5bc:	umull	r6, r7, r6, ip
   1c5c0:	mov	r0, r6
   1c5c4:	mov	fp, r7
   1c5c8:	cmp	r1, #0
   1c5cc:	bne	1c864 <__assert_fail@plt+0xb388>
   1c5d0:	cmp	fp, #0
   1c5d4:	mov	lr, r1
   1c5d8:	bne	1cb54 <__assert_fail@plt+0xb678>
   1c5dc:	umull	r0, r1, r0, ip
   1c5e0:	mov	r2, r0
   1c5e4:	mov	r3, r1
   1c5e8:	cmp	lr, #0
   1c5ec:	bne	1c864 <__assert_fail@plt+0xb388>
   1c5f0:	cmp	r3, #0
   1c5f4:	bne	1cb7c <__assert_fail@plt+0xb6a0>
   1c5f8:	umull	r2, r3, r2, ip
   1c5fc:	mov	r0, r2
   1c600:	mov	r1, r3
   1c604:	cmp	lr, #0
   1c608:	bne	1c864 <__assert_fail@plt+0xb388>
   1c60c:	cmp	r1, #0
   1c610:	bne	1cafc <__assert_fail@plt+0xb620>
   1c614:	umull	r0, r1, r0, ip
   1c618:	mov	r2, r0
   1c61c:	mov	r3, r1
   1c620:	cmp	lr, #0
   1c624:	bne	1c864 <__assert_fail@plt+0xb388>
   1c628:	cmp	r3, #0
   1c62c:	bne	1c92c <__assert_fail@plt+0xb450>
   1c630:	umull	r2, r3, r2, ip
   1c634:	mov	r0, r2
   1c638:	mov	r1, r3
   1c63c:	cmp	lr, #0
   1c640:	bne	1c864 <__assert_fail@plt+0xb388>
   1c644:	cmp	r1, #0
   1c648:	beq	1c488 <__assert_fail@plt+0xafac>
   1c64c:	umull	r6, r7, r0, ip
   1c650:	mov	fp, lr
   1c654:	mov	sl, r7
   1c658:	umlal	sl, fp, r1, ip
   1c65c:	cmp	fp, #0
   1c660:	bne	1cd64 <__assert_fail@plt+0xb888>
   1c664:	mov	r2, r6
   1c668:	mov	r3, sl
   1c66c:	b	1c494 <__assert_fail@plt+0xafb8>
   1c670:	asr	r3, ip, #31
   1c674:	mov	r2, ip
   1c678:	cmp	r7, #0
   1c67c:	mov	r1, #0
   1c680:	strd	r2, [sp]
   1c684:	bne	1c9e8 <__assert_fail@plt+0xb50c>
   1c688:	umull	r6, r7, r6, ip
   1c68c:	mov	r0, r6
   1c690:	mov	fp, r7
   1c694:	cmp	r1, #0
   1c698:	bne	1c864 <__assert_fail@plt+0xb388>
   1c69c:	cmp	fp, #0
   1c6a0:	mov	lr, r1
   1c6a4:	beq	1c488 <__assert_fail@plt+0xafac>
   1c6a8:	umull	r6, r7, r0, ip
   1c6ac:	mov	r3, r1
   1c6b0:	mov	r2, r7
   1c6b4:	umlal	r2, r3, fp, ip
   1c6b8:	cmp	r3, #0
   1c6bc:	strd	r2, [sp, #16]
   1c6c0:	bne	1cc48 <__assert_fail@plt+0xb76c>
   1c6c4:	mov	r2, r6
   1c6c8:	ldr	r3, [sp, #16]
   1c6cc:	b	1c494 <__assert_fail@plt+0xafb8>
   1c6d0:	asr	r3, ip, #31
   1c6d4:	mov	r2, ip
   1c6d8:	cmp	r7, #0
   1c6dc:	mov	r1, #0
   1c6e0:	strd	r2, [sp]
   1c6e4:	bne	1ca30 <__assert_fail@plt+0xb554>
   1c6e8:	umull	r6, r7, r6, ip
   1c6ec:	mov	r2, r6
   1c6f0:	mov	r3, r7
   1c6f4:	cmp	r1, #0
   1c6f8:	bne	1c864 <__assert_fail@plt+0xb388>
   1c6fc:	cmp	r3, #0
   1c700:	mov	lr, r1
   1c704:	beq	1c46c <__assert_fail@plt+0xaf90>
   1c708:	umull	r6, r7, r2, ip
   1c70c:	mov	fp, lr
   1c710:	mov	sl, r7
   1c714:	umlal	sl, fp, r3, ip
   1c718:	cmp	fp, #0
   1c71c:	bne	1cd28 <__assert_fail@plt+0xb84c>
   1c720:	mov	r0, r6
   1c724:	mov	r1, sl
   1c728:	b	1c478 <__assert_fail@plt+0xaf9c>
   1c72c:	asr	r3, ip, #31
   1c730:	mov	r2, ip
   1c734:	cmp	r7, #0
   1c738:	mov	r1, #0
   1c73c:	strd	r2, [sp]
   1c740:	bne	1ca0c <__assert_fail@plt+0xb530>
   1c744:	umull	r6, r7, r6, ip
   1c748:	mov	sl, r6
   1c74c:	mov	lr, r7
   1c750:	cmp	r1, #0
   1c754:	bne	1c528 <__assert_fail@plt+0xb04c>
   1c758:	cmp	lr, #0
   1c75c:	mov	r7, r1
   1c760:	bne	1cb20 <__assert_fail@plt+0xb644>
   1c764:	umull	sl, fp, sl, ip
   1c768:	mov	r0, sl
   1c76c:	mov	r2, fp
   1c770:	cmp	r7, #0
   1c774:	mov	r6, r0
   1c778:	mov	r7, r2
   1c77c:	beq	1c4e4 <__assert_fail@plt+0xb008>
   1c780:	b	1c528 <__assert_fail@plt+0xb04c>
   1c784:	asr	r3, ip, #31
   1c788:	mov	r2, ip
   1c78c:	cmp	r7, #0
   1c790:	mov	r1, #0
   1c794:	strd	r2, [sp]
   1c798:	bne	1c9a0 <__assert_fail@plt+0xb4c4>
   1c79c:	umull	r6, r7, r6, ip
   1c7a0:	mov	r0, r6
   1c7a4:	mov	fp, r7
   1c7a8:	cmp	r1, #0
   1c7ac:	bne	1c864 <__assert_fail@plt+0xb388>
   1c7b0:	cmp	fp, #0
   1c7b4:	mov	lr, r1
   1c7b8:	beq	1c614 <__assert_fail@plt+0xb138>
   1c7bc:	umull	r6, r7, r0, ip
   1c7c0:	mov	r3, r1
   1c7c4:	mov	r2, r7
   1c7c8:	umlal	r2, r3, fp, ip
   1c7cc:	cmp	r3, #0
   1c7d0:	strd	r2, [sp, #16]
   1c7d4:	bne	1ccb8 <__assert_fail@plt+0xb7dc>
   1c7d8:	mov	r2, r6
   1c7dc:	ldr	r3, [sp, #16]
   1c7e0:	b	1c620 <__assert_fail@plt+0xb144>
   1c7e4:	lsr	r3, r7, #22
   1c7e8:	lsl	r7, r7, #10
   1c7ec:	cmp	r3, #0
   1c7f0:	lsl	r3, r6, #10
   1c7f4:	orr	r7, r7, r6, lsr #22
   1c7f8:	beq	1c59c <__assert_fail@plt+0xb0c0>
   1c7fc:	b	1c528 <__assert_fail@plt+0xb04c>
   1c800:	asr	r3, ip, #31
   1c804:	mov	r2, ip
   1c808:	cmp	r7, #0
   1c80c:	mov	r1, #0
   1c810:	strd	r2, [sp]
   1c814:	bne	1c978 <__assert_fail@plt+0xb49c>
   1c818:	umull	r6, r7, r6, ip
   1c81c:	mov	r2, r6
   1c820:	mov	r3, r7
   1c824:	cmp	r1, #0
   1c828:	bne	1c528 <__assert_fail@plt+0xb04c>
   1c82c:	cmp	r3, #0
   1c830:	mov	r7, r1
   1c834:	bne	1cadc <__assert_fail@plt+0xb600>
   1c838:	umull	r2, r3, r2, ip
   1c83c:	mov	r6, r2
   1c840:	mov	lr, r3
   1c844:	cmp	r7, #0
   1c848:	bne	1c528 <__assert_fail@plt+0xb04c>
   1c84c:	cmp	lr, #0
   1c850:	bne	1caa0 <__assert_fail@plt+0xb5c4>
   1c854:	umull	r2, r3, r6, ip
   1c858:	mov	r0, r2
   1c85c:	mov	r2, r3
   1c860:	b	1c770 <__assert_fail@plt+0xb294>
   1c864:	mvn	r6, #0
   1c868:	mov	r3, #1
   1c86c:	mov	r7, r6
   1c870:	b	1c4e0 <__assert_fail@plt+0xb004>
   1c874:	umull	sl, fp, r6, ip
   1c878:	mov	r3, lr
   1c87c:	mov	r2, fp
   1c880:	umlal	r2, r3, r7, ip
   1c884:	cmp	r3, #0
   1c888:	bne	1cc80 <__assert_fail@plt+0xb7a4>
   1c88c:	mov	r6, sl
   1c890:	mov	r7, r2
   1c894:	b	1c520 <__assert_fail@plt+0xb044>
   1c898:	mov	r3, #2
   1c89c:	mov	ip, #1000	; 0x3e8
   1c8a0:	str	r3, [sp, #12]
   1c8a4:	b	1c314 <__assert_fail@plt+0xae38>
   1c8a8:	umull	r0, r1, r6, ip
   1c8ac:	mov	r3, r7
   1c8b0:	mov	r2, r1
   1c8b4:	strd	r0, [sp, #16]
   1c8b8:	umlal	r2, r3, lr, ip
   1c8bc:	cmp	r3, #0
   1c8c0:	beq	1c4d0 <__assert_fail@plt+0xaff4>
   1c8c4:	ldrd	sl, [sp]
   1c8c8:	mov	r7, #1
   1c8cc:	ldr	r0, [sp, #16]
   1c8d0:	ldr	r3, [sp, #20]
   1c8d4:	mul	r2, r6, fp
   1c8d8:	mla	r2, lr, sl, r2
   1c8dc:	add	r2, r2, r3
   1c8e0:	b	1c4d0 <__assert_fail@plt+0xaff4>
   1c8e4:	umull	sl, fp, r2, ip
   1c8e8:	mov	r1, lr
   1c8ec:	mov	r0, fp
   1c8f0:	umlal	r0, r1, r3, ip
   1c8f4:	cmp	r1, #0
   1c8f8:	bne	1cbd8 <__assert_fail@plt+0xb6fc>
   1c8fc:	mov	r6, sl
   1c900:	mov	lr, r0
   1c904:	b	1c4b4 <__assert_fail@plt+0xafd8>
   1c908:	umull	sl, fp, r0, ip
   1c90c:	mov	r7, lr
   1c910:	mov	r6, fp
   1c914:	umlal	r6, r7, r1, ip
   1c918:	cmp	r7, #0
   1c91c:	bne	1cd80 <__assert_fail@plt+0xb8a4>
   1c920:	mov	r2, sl
   1c924:	mov	r3, r6
   1c928:	b	1c494 <__assert_fail@plt+0xafb8>
   1c92c:	umull	sl, fp, r2, ip
   1c930:	mov	r7, lr
   1c934:	mov	r6, fp
   1c938:	umlal	r6, r7, r3, ip
   1c93c:	cmp	r7, #0
   1c940:	bne	1cc10 <__assert_fail@plt+0xb734>
   1c944:	mov	r0, sl
   1c948:	mov	r1, r6
   1c94c:	b	1c63c <__assert_fail@plt+0xb160>
   1c950:	umull	sl, fp, r6, ip
   1c954:	mov	r3, r1
   1c958:	mov	r2, fp
   1c95c:	umlal	r2, r3, r7, ip
   1c960:	cmp	r3, #0
   1c964:	strd	r2, [sp, #16]
   1c968:	bne	1cbf4 <__assert_fail@plt+0xb718>
   1c96c:	mov	r2, sl
   1c970:	ldr	r3, [sp, #16]
   1c974:	b	1c420 <__assert_fail@plt+0xaf44>
   1c978:	umull	sl, fp, r6, ip
   1c97c:	mov	r3, r1
   1c980:	mov	r2, fp
   1c984:	umlal	r2, r3, r7, ip
   1c988:	cmp	r3, #0
   1c98c:	strd	r2, [sp, #16]
   1c990:	bne	1ccd4 <__assert_fail@plt+0xb7f8>
   1c994:	mov	r2, sl
   1c998:	ldr	r3, [sp, #16]
   1c99c:	b	1c824 <__assert_fail@plt+0xb348>
   1c9a0:	umull	sl, fp, r6, ip
   1c9a4:	mov	r3, r1
   1c9a8:	mov	r2, fp
   1c9ac:	umlal	r2, r3, r7, ip
   1c9b0:	cmp	r3, #0
   1c9b4:	bne	1cba0 <__assert_fail@plt+0xb6c4>
   1c9b8:	mov	r0, sl
   1c9bc:	mov	fp, r2
   1c9c0:	b	1c7a8 <__assert_fail@plt+0xb2cc>
   1c9c4:	umull	sl, fp, r6, ip
   1c9c8:	mov	r3, r1
   1c9cc:	mov	r2, fp
   1c9d0:	umlal	r2, r3, r7, ip
   1c9d4:	cmp	r3, #0
   1c9d8:	bne	1cc64 <__assert_fail@plt+0xb788>
   1c9dc:	mov	r0, sl
   1c9e0:	mov	fp, r2
   1c9e4:	b	1c5c8 <__assert_fail@plt+0xb0ec>
   1c9e8:	umull	sl, fp, r6, ip
   1c9ec:	mov	r3, r1
   1c9f0:	mov	r2, fp
   1c9f4:	umlal	r2, r3, r7, ip
   1c9f8:	cmp	r3, #0
   1c9fc:	bne	1ccf0 <__assert_fail@plt+0xb814>
   1ca00:	mov	r0, sl
   1ca04:	mov	fp, r2
   1ca08:	b	1c694 <__assert_fail@plt+0xb1b8>
   1ca0c:	umull	sl, fp, r6, ip
   1ca10:	mov	r3, r1
   1ca14:	mov	r2, fp
   1ca18:	strd	sl, [sp, #16]
   1ca1c:	umlal	r2, r3, r7, ip
   1ca20:	cmp	r3, #0
   1ca24:	bne	1cc98 <__assert_fail@plt+0xb7bc>
   1ca28:	mov	lr, r2
   1ca2c:	b	1c750 <__assert_fail@plt+0xb274>
   1ca30:	umull	sl, fp, r6, ip
   1ca34:	mov	r3, r1
   1ca38:	mov	r2, fp
   1ca3c:	umlal	r2, r3, r7, ip
   1ca40:	cmp	r3, #0
   1ca44:	strd	r2, [sp, #16]
   1ca48:	bne	1cd9c <__assert_fail@plt+0xb8c0>
   1ca4c:	mov	r2, sl
   1ca50:	ldr	r3, [sp, #16]
   1ca54:	b	1c6f4 <__assert_fail@plt+0xb218>
   1ca58:	umull	sl, fp, r0, ip
   1ca5c:	mov	r7, lr
   1ca60:	mov	r6, fp
   1ca64:	umlal	r6, r7, r1, ip
   1ca68:	cmp	r7, #0
   1ca6c:	bne	1cdb8 <__assert_fail@plt+0xb8dc>
   1ca70:	mov	r2, sl
   1ca74:	mov	r3, r6
   1ca78:	b	1c45c <__assert_fail@plt+0xaf80>
   1ca7c:	umull	r6, r7, r2, ip
   1ca80:	mov	fp, r1
   1ca84:	mov	sl, r7
   1ca88:	umlal	sl, fp, r3, ip
   1ca8c:	cmp	fp, #0
   1ca90:	bne	1cc2c <__assert_fail@plt+0xb750>
   1ca94:	mov	r0, r6
   1ca98:	mov	r1, sl
   1ca9c:	b	1c440 <__assert_fail@plt+0xaf64>
   1caa0:	umull	r0, r1, r6, ip
   1caa4:	mov	r3, r7
   1caa8:	mov	r2, r1
   1caac:	strd	r0, [sp, #16]
   1cab0:	umlal	r2, r3, lr, ip
   1cab4:	cmp	r3, #0
   1cab8:	beq	1c770 <__assert_fail@plt+0xb294>
   1cabc:	ldrd	sl, [sp]
   1cac0:	mov	r7, #1
   1cac4:	ldr	r0, [sp, #16]
   1cac8:	ldr	r3, [sp, #20]
   1cacc:	mul	r2, r6, fp
   1cad0:	mla	r2, lr, sl, r2
   1cad4:	add	r2, r2, r3
   1cad8:	b	1c770 <__assert_fail@plt+0xb294>
   1cadc:	umull	sl, fp, r2, ip
   1cae0:	mov	r0, fp
   1cae4:	umlal	r0, r1, r3, ip
   1cae8:	cmp	r1, #0
   1caec:	bne	1cdd4 <__assert_fail@plt+0xb8f8>
   1caf0:	mov	r6, sl
   1caf4:	mov	lr, r0
   1caf8:	b	1c844 <__assert_fail@plt+0xb368>
   1cafc:	umull	r6, r7, r0, ip
   1cb00:	mov	fp, lr
   1cb04:	mov	sl, r7
   1cb08:	umlal	sl, fp, r1, ip
   1cb0c:	cmp	fp, #0
   1cb10:	bne	1cd0c <__assert_fail@plt+0xb830>
   1cb14:	mov	r2, r6
   1cb18:	mov	r3, sl
   1cb1c:	b	1c620 <__assert_fail@plt+0xb144>
   1cb20:	umull	r0, r1, sl, ip
   1cb24:	mov	r3, r7
   1cb28:	mov	r2, r1
   1cb2c:	umlal	r2, r3, lr, ip
   1cb30:	cmp	r3, #0
   1cb34:	beq	1c770 <__assert_fail@plt+0xb294>
   1cb38:	ldr	r3, [sp, #4]
   1cb3c:	mov	r7, #1
   1cb40:	mul	r2, sl, r3
   1cb44:	ldr	r3, [sp]
   1cb48:	mla	r2, lr, r3, r2
   1cb4c:	add	r2, r2, r1
   1cb50:	b	1c770 <__assert_fail@plt+0xb294>
   1cb54:	umull	r6, r7, r0, ip
   1cb58:	mov	r3, r1
   1cb5c:	mov	r2, r7
   1cb60:	umlal	r2, r3, fp, ip
   1cb64:	cmp	r3, #0
   1cb68:	strd	r2, [sp, #16]
   1cb6c:	bne	1cdf0 <__assert_fail@plt+0xb914>
   1cb70:	mov	r2, r6
   1cb74:	ldr	r3, [sp, #16]
   1cb78:	b	1c5e8 <__assert_fail@plt+0xb10c>
   1cb7c:	umull	sl, fp, r2, ip
   1cb80:	mov	r7, lr
   1cb84:	mov	r6, fp
   1cb88:	umlal	r6, r7, r3, ip
   1cb8c:	cmp	r7, #0
   1cb90:	bne	1cbbc <__assert_fail@plt+0xb6e0>
   1cb94:	mov	r0, sl
   1cb98:	mov	r1, r6
   1cb9c:	b	1c604 <__assert_fail@plt+0xb128>
   1cba0:	ldrd	r2, [sp]
   1cba4:	mov	r0, sl
   1cba8:	mov	r1, #1
   1cbac:	mul	r6, r6, r3
   1cbb0:	mla	r7, r2, r7, r6
   1cbb4:	add	fp, r7, fp
   1cbb8:	b	1c7a8 <__assert_fail@plt+0xb2cc>
   1cbbc:	ldrd	r6, [sp]
   1cbc0:	mov	r0, sl
   1cbc4:	mov	lr, #1
   1cbc8:	mul	r2, r2, r7
   1cbcc:	mla	r1, r3, r6, r2
   1cbd0:	add	r1, r1, fp
   1cbd4:	b	1c604 <__assert_fail@plt+0xb128>
   1cbd8:	ldrd	r0, [sp]
   1cbdc:	mov	r6, sl
   1cbe0:	mov	r7, #1
   1cbe4:	mul	r2, r2, r1
   1cbe8:	mla	lr, r3, r0, r2
   1cbec:	add	lr, lr, fp
   1cbf0:	b	1c4b4 <__assert_fail@plt+0xafd8>
   1cbf4:	ldm	sp, {r0, r3}
   1cbf8:	mov	r2, sl
   1cbfc:	mov	r1, #1
   1cc00:	mul	r3, r6, r3
   1cc04:	mla	r3, r0, r7, r3
   1cc08:	add	r3, r3, fp
   1cc0c:	b	1c420 <__assert_fail@plt+0xaf44>
   1cc10:	ldrd	r6, [sp]
   1cc14:	mov	r0, sl
   1cc18:	mov	lr, #1
   1cc1c:	mul	r2, r2, r7
   1cc20:	mla	r1, r3, r6, r2
   1cc24:	add	r1, r1, fp
   1cc28:	b	1c63c <__assert_fail@plt+0xb160>
   1cc2c:	ldrd	sl, [sp]
   1cc30:	mov	r0, r6
   1cc34:	mov	lr, #1
   1cc38:	mul	r2, r2, fp
   1cc3c:	mla	r1, r3, sl, r2
   1cc40:	add	r1, r1, r7
   1cc44:	b	1c440 <__assert_fail@plt+0xaf64>
   1cc48:	ldm	sp, {r1, r3}
   1cc4c:	mov	r2, r6
   1cc50:	mov	lr, #1
   1cc54:	mul	r3, r0, r3
   1cc58:	mla	r3, fp, r1, r3
   1cc5c:	add	r3, r3, r7
   1cc60:	b	1c494 <__assert_fail@plt+0xafb8>
   1cc64:	ldrd	r2, [sp]
   1cc68:	mov	r0, sl
   1cc6c:	mov	r1, #1
   1cc70:	mul	r6, r6, r3
   1cc74:	mla	r7, r2, r7, r6
   1cc78:	add	fp, r7, fp
   1cc7c:	b	1c5c8 <__assert_fail@plt+0xb0ec>
   1cc80:	mul	r3, r6, r1
   1cc84:	mov	lr, #1
   1cc88:	mov	r6, sl
   1cc8c:	mla	r7, ip, r7, r3
   1cc90:	add	r7, r7, fp
   1cc94:	b	1c520 <__assert_fail@plt+0xb044>
   1cc98:	ldrd	r2, [sp]
   1cc9c:	mov	r1, #1
   1cca0:	ldr	sl, [sp, #16]
   1cca4:	mul	lr, r6, r3
   1cca8:	ldr	r3, [sp, #20]
   1ccac:	mla	lr, r2, r7, lr
   1ccb0:	add	lr, lr, r3
   1ccb4:	b	1c750 <__assert_fail@plt+0xb274>
   1ccb8:	ldm	sp, {r1, r3}
   1ccbc:	mov	r2, r6
   1ccc0:	mov	lr, #1
   1ccc4:	mul	r3, r0, r3
   1ccc8:	mla	r3, fp, r1, r3
   1cccc:	add	r3, r3, r7
   1ccd0:	b	1c620 <__assert_fail@plt+0xb144>
   1ccd4:	ldm	sp, {r0, r3}
   1ccd8:	mov	r2, sl
   1ccdc:	mov	r1, #1
   1cce0:	mul	r3, r6, r3
   1cce4:	mla	r3, r0, r7, r3
   1cce8:	add	r3, r3, fp
   1ccec:	b	1c824 <__assert_fail@plt+0xb348>
   1ccf0:	ldrd	r2, [sp]
   1ccf4:	mov	r0, sl
   1ccf8:	mov	r1, #1
   1ccfc:	mul	r6, r6, r3
   1cd00:	mla	r7, r2, r7, r6
   1cd04:	add	fp, r7, fp
   1cd08:	b	1c694 <__assert_fail@plt+0xb1b8>
   1cd0c:	ldrd	sl, [sp]
   1cd10:	mov	r2, r6
   1cd14:	mov	lr, #1
   1cd18:	mul	r3, r0, fp
   1cd1c:	mla	r3, r1, sl, r3
   1cd20:	add	r3, r3, r7
   1cd24:	b	1c620 <__assert_fail@plt+0xb144>
   1cd28:	ldrd	sl, [sp]
   1cd2c:	mov	r0, r6
   1cd30:	mov	lr, #1
   1cd34:	mul	r2, r2, fp
   1cd38:	mla	r1, r3, sl, r2
   1cd3c:	add	r1, r1, r7
   1cd40:	b	1c478 <__assert_fail@plt+0xaf9c>
   1cd44:	movw	r3, #65328	; 0xff30
   1cd48:	movt	r3, #1
   1cd4c:	movw	r1, #65340	; 0xff3c
   1cd50:	movt	r1, #1
   1cd54:	movw	r0, #65356	; 0xff4c
   1cd58:	movt	r0, #1
   1cd5c:	mov	r2, #85	; 0x55
   1cd60:	bl	114dc <__assert_fail@plt>
   1cd64:	ldrd	sl, [sp]
   1cd68:	mov	r2, r6
   1cd6c:	mov	lr, #1
   1cd70:	mul	r3, r0, fp
   1cd74:	mla	r3, r1, sl, r3
   1cd78:	add	r3, r3, r7
   1cd7c:	b	1c494 <__assert_fail@plt+0xafb8>
   1cd80:	ldrd	r6, [sp]
   1cd84:	mov	r2, sl
   1cd88:	mov	lr, #1
   1cd8c:	mul	r3, r0, r7
   1cd90:	mla	r3, r1, r6, r3
   1cd94:	add	r3, r3, fp
   1cd98:	b	1c494 <__assert_fail@plt+0xafb8>
   1cd9c:	ldm	sp, {r0, r3}
   1cda0:	mov	r2, sl
   1cda4:	mov	r1, #1
   1cda8:	mul	r3, r6, r3
   1cdac:	mla	r3, r0, r7, r3
   1cdb0:	add	r3, r3, fp
   1cdb4:	b	1c6f4 <__assert_fail@plt+0xb218>
   1cdb8:	ldrd	r6, [sp]
   1cdbc:	mov	r2, sl
   1cdc0:	mov	lr, #1
   1cdc4:	mul	r3, r0, r7
   1cdc8:	mla	r3, r1, r6, r3
   1cdcc:	add	r3, r3, fp
   1cdd0:	b	1c45c <__assert_fail@plt+0xaf80>
   1cdd4:	ldrd	r0, [sp]
   1cdd8:	mov	r6, sl
   1cddc:	mov	r7, #1
   1cde0:	mul	r2, r2, r1
   1cde4:	mla	lr, r3, r0, r2
   1cde8:	add	lr, lr, fp
   1cdec:	b	1c844 <__assert_fail@plt+0xb368>
   1cdf0:	ldm	sp, {r1, r3}
   1cdf4:	mov	r2, r6
   1cdf8:	mov	lr, #1
   1cdfc:	mul	r3, r0, r3
   1ce00:	mla	r3, fp, r1, r3
   1ce04:	add	r3, r3, r7
   1ce08:	b	1c5e8 <__assert_fail@plt+0xb10c>
   1ce0c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1ce10:	strd	r6, [sp, #8]
   1ce14:	subs	r7, r0, #0
   1ce18:	strd	r8, [sp, #16]
   1ce1c:	str	lr, [sp, #24]
   1ce20:	sub	sp, sp, #12
   1ce24:	str	r1, [sp, #4]
   1ce28:	beq	1ced4 <__assert_fail@plt+0xb9f8>
   1ce2c:	mov	r8, r1
   1ce30:	mov	r5, r1
   1ce34:	mov	r6, r7
   1ce38:	mov	r4, #0
   1ce3c:	add	r5, r5, #4
   1ce40:	ldr	r0, [r5, #-4]
   1ce44:	str	r5, [sp, #4]
   1ce48:	bl	11380 <strlen@plt>
   1ce4c:	adds	r4, r0, r4
   1ce50:	mvncs	r4, #0
   1ce54:	subs	r6, r6, #1
   1ce58:	bne	1ce3c <__assert_fail@plt+0xb960>
   1ce5c:	cmp	r4, #0
   1ce60:	blt	1cec4 <__assert_fail@plt+0xb9e8>
   1ce64:	add	r0, r4, #1
   1ce68:	bl	1bab4 <__assert_fail@plt+0xa5d8>
   1ce6c:	mov	r6, r0
   1ce70:	mov	r4, r0
   1ce74:	ldr	r9, [r8], #4
   1ce78:	mov	r0, r9
   1ce7c:	bl	11380 <strlen@plt>
   1ce80:	mov	r5, r0
   1ce84:	mov	r2, r0
   1ce88:	mov	r1, r9
   1ce8c:	mov	r0, r4
   1ce90:	bl	111e8 <memcpy@plt>
   1ce94:	subs	r7, r7, #1
   1ce98:	add	r4, r4, r5
   1ce9c:	bne	1ce74 <__assert_fail@plt+0xb998>
   1cea0:	mov	r3, #0
   1cea4:	strb	r3, [r4]
   1cea8:	mov	r0, r6
   1ceac:	add	sp, sp, #12
   1ceb0:	ldrd	r4, [sp]
   1ceb4:	ldrd	r6, [sp, #8]
   1ceb8:	ldrd	r8, [sp, #16]
   1cebc:	add	sp, sp, #24
   1cec0:	pop	{pc}		; (ldr pc, [sp], #4)
   1cec4:	bl	113a4 <__errno_location@plt>
   1cec8:	mov	r3, #75	; 0x4b
   1cecc:	str	r3, [r0]
   1ced0:	b	1cea8 <__assert_fail@plt+0xb9cc>
   1ced4:	mov	r0, #1
   1ced8:	bl	1bab4 <__assert_fail@plt+0xa5d8>
   1cedc:	mov	r4, r0
   1cee0:	mov	r6, r0
   1cee4:	b	1cea0 <__assert_fail@plt+0xb9c4>
   1cee8:	push	{lr}		; (str lr, [sp, #-4]!)
   1ceec:	sub	sp, sp, #12
   1cef0:	ldrb	ip, [r0]
   1cef4:	cmp	ip, #0
   1cef8:	beq	1cf40 <__assert_fail@plt+0xba64>
   1cefc:	cmp	ip, #37	; 0x25
   1cf00:	bne	1cf50 <__assert_fail@plt+0xba74>
   1cf04:	ldrb	r3, [r0, #1]
   1cf08:	cmp	r3, #115	; 0x73
   1cf0c:	bne	1cf50 <__assert_fail@plt+0xba74>
   1cf10:	mov	ip, #0
   1cf14:	add	r2, r0, #1
   1cf18:	b	1cf30 <__assert_fail@plt+0xba54>
   1cf1c:	cmp	lr, #37	; 0x25
   1cf20:	bne	1cf50 <__assert_fail@plt+0xba74>
   1cf24:	ldrb	lr, [r2, ip, lsl #1]
   1cf28:	cmp	lr, #115	; 0x73
   1cf2c:	bne	1cf50 <__assert_fail@plt+0xba74>
   1cf30:	add	ip, ip, #1
   1cf34:	ldrb	lr, [r0, ip, lsl #1]
   1cf38:	cmp	lr, #0
   1cf3c:	bne	1cf1c <__assert_fail@plt+0xba40>
   1cf40:	mov	r0, ip
   1cf44:	bl	1ce0c <__assert_fail@plt+0xb930>
   1cf48:	add	sp, sp, #12
   1cf4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf50:	mov	r3, r1
   1cf54:	mov	r2, r0
   1cf58:	mov	r1, #1
   1cf5c:	add	r0, sp, #4
   1cf60:	bl	113c8 <__vasprintf_chk@plt>
   1cf64:	cmp	r0, #0
   1cf68:	blt	1cf78 <__assert_fail@plt+0xba9c>
   1cf6c:	ldr	r0, [sp, #4]
   1cf70:	add	sp, sp, #12
   1cf74:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf78:	bl	113a4 <__errno_location@plt>
   1cf7c:	ldr	r3, [r0]
   1cf80:	cmp	r3, #12
   1cf84:	movne	r0, #0
   1cf88:	bne	1cf70 <__assert_fail@plt+0xba94>
   1cf8c:	bl	1c06c <__assert_fail@plt+0xab90>
   1cf90:	cmp	r1, #0
   1cf94:	cmpne	r0, #0
   1cf98:	beq	1cfe4 <__assert_fail@plt+0xbb08>
   1cf9c:	strd	r4, [sp, #-16]!
   1cfa0:	umull	r4, r5, r0, r1
   1cfa4:	str	r6, [sp, #8]
   1cfa8:	str	lr, [sp, #12]
   1cfac:	adds	r3, r5, #0
   1cfb0:	movne	r3, #1
   1cfb4:	cmp	r4, #0
   1cfb8:	blt	1cfc4 <__assert_fail@plt+0xbae8>
   1cfbc:	cmp	r3, #0
   1cfc0:	beq	1cff0 <__assert_fail@plt+0xbb14>
   1cfc4:	bl	113a4 <__errno_location@plt>
   1cfc8:	mov	r3, #12
   1cfcc:	ldrd	r4, [sp]
   1cfd0:	ldr	r6, [sp, #8]
   1cfd4:	add	sp, sp, #12
   1cfd8:	str	r3, [r0]
   1cfdc:	mov	r0, #0
   1cfe0:	pop	{pc}		; (ldr pc, [sp], #4)
   1cfe4:	mov	r1, #1
   1cfe8:	mov	r0, r1
   1cfec:	b	1114c <calloc@plt>
   1cff0:	ldrd	r4, [sp]
   1cff4:	ldr	r6, [sp, #8]
   1cff8:	ldr	lr, [sp, #12]
   1cffc:	add	sp, sp, #16
   1d000:	b	1114c <calloc@plt>
   1d004:	cmp	r0, #0
   1d008:	beq	1d014 <__assert_fail@plt+0xbb38>
   1d00c:	blt	1d01c <__assert_fail@plt+0xbb40>
   1d010:	b	112fc <malloc@plt>
   1d014:	mov	r0, #1
   1d018:	b	112fc <malloc@plt>
   1d01c:	str	r4, [sp, #-8]!
   1d020:	str	lr, [sp, #4]
   1d024:	bl	113a4 <__errno_location@plt>
   1d028:	mov	r3, #12
   1d02c:	ldr	r4, [sp]
   1d030:	add	sp, sp, #4
   1d034:	str	r3, [r0]
   1d038:	mov	r0, #0
   1d03c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d040:	cmp	r0, #0
   1d044:	beq	1d06c <__assert_fail@plt+0xbb90>
   1d048:	cmp	r1, #0
   1d04c:	str	r4, [sp, #-8]!
   1d050:	str	lr, [sp, #4]
   1d054:	beq	1d074 <__assert_fail@plt+0xbb98>
   1d058:	blt	1d088 <__assert_fail@plt+0xbbac>
   1d05c:	ldr	r4, [sp]
   1d060:	ldr	lr, [sp, #4]
   1d064:	add	sp, sp, #8
   1d068:	b	11248 <realloc@plt>
   1d06c:	mov	r0, r1
   1d070:	b	1d004 <__assert_fail@plt+0xbb28>
   1d074:	bl	1d5dc <__assert_fail@plt+0xc100>
   1d078:	ldr	r4, [sp]
   1d07c:	add	sp, sp, #4
   1d080:	mov	r0, #0
   1d084:	pop	{pc}		; (ldr pc, [sp], #4)
   1d088:	bl	113a4 <__errno_location@plt>
   1d08c:	mov	r3, #12
   1d090:	str	r3, [r0]
   1d094:	b	1d078 <__assert_fail@plt+0xbb9c>
   1d098:	mov	r0, #1
   1d09c:	b	142b4 <__assert_fail@plt+0x2dd8>
   1d0a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d0a4:	mov	r4, r1
   1d0a8:	strd	r6, [sp, #8]
   1d0ac:	mov	r6, r2
   1d0b0:	strd	r8, [sp, #16]
   1d0b4:	mov	r8, r3
   1d0b8:	strd	sl, [sp, #24]
   1d0bc:	mov	sl, r0
   1d0c0:	str	lr, [sp, #32]
   1d0c4:	sub	sp, sp, #12
   1d0c8:	str	r2, [sp]
   1d0cc:	bl	11380 <strlen@plt>
   1d0d0:	ldr	fp, [r4]
   1d0d4:	cmp	fp, #0
   1d0d8:	beq	1d1e8 <__assert_fail@plt+0xbd0c>
   1d0dc:	cmp	r6, #0
   1d0e0:	mov	r7, r0
   1d0e4:	beq	1d194 <__assert_fail@plt+0xbcb8>
   1d0e8:	mov	r5, #0
   1d0ec:	mvn	r9, #0
   1d0f0:	str	r5, [sp, #4]
   1d0f4:	mov	r2, r7
   1d0f8:	mov	r1, sl
   1d0fc:	mov	r0, fp
   1d100:	bl	11494 <strncmp@plt>
   1d104:	cmp	r0, #0
   1d108:	mov	r0, fp
   1d10c:	bne	1d14c <__assert_fail@plt+0xbc70>
   1d110:	bl	11380 <strlen@plt>
   1d114:	ldr	r3, [sp]
   1d118:	cmp	r0, r7
   1d11c:	mov	r2, r8
   1d120:	mov	r1, r6
   1d124:	mla	r0, r8, r9, r3
   1d128:	beq	1d18c <__assert_fail@plt+0xbcb0>
   1d12c:	cmn	r9, #1
   1d130:	moveq	r9, r5
   1d134:	beq	1d14c <__assert_fail@plt+0xbc70>
   1d138:	bl	11218 <memcmp@plt>
   1d13c:	ldr	r3, [sp, #4]
   1d140:	cmp	r0, #0
   1d144:	movne	r3, #1
   1d148:	str	r3, [sp, #4]
   1d14c:	ldr	fp, [r4, #4]!
   1d150:	add	r5, r5, #1
   1d154:	add	r6, r6, r8
   1d158:	cmp	fp, #0
   1d15c:	bne	1d0f4 <__assert_fail@plt+0xbc18>
   1d160:	ldr	r3, [sp, #4]
   1d164:	cmp	r3, #0
   1d168:	mvnne	r9, #1
   1d16c:	mov	r0, r9
   1d170:	add	sp, sp, #12
   1d174:	ldrd	r4, [sp]
   1d178:	ldrd	r6, [sp, #8]
   1d17c:	ldrd	r8, [sp, #16]
   1d180:	ldrd	sl, [sp, #24]
   1d184:	add	sp, sp, #32
   1d188:	pop	{pc}		; (ldr pc, [sp], #4)
   1d18c:	mov	r9, r5
   1d190:	b	1d16c <__assert_fail@plt+0xbc90>
   1d194:	mov	r5, r6
   1d198:	mvn	r9, #0
   1d19c:	mov	r2, r7
   1d1a0:	mov	r1, sl
   1d1a4:	mov	r0, fp
   1d1a8:	bl	11494 <strncmp@plt>
   1d1ac:	cmp	r0, #0
   1d1b0:	mov	r0, fp
   1d1b4:	bne	1d1d0 <__assert_fail@plt+0xbcf4>
   1d1b8:	bl	11380 <strlen@plt>
   1d1bc:	cmp	r0, r7
   1d1c0:	beq	1d18c <__assert_fail@plt+0xbcb0>
   1d1c4:	cmn	r9, #1
   1d1c8:	moveq	r9, r5
   1d1cc:	movne	r6, #1
   1d1d0:	ldr	fp, [r4, #4]!
   1d1d4:	add	r5, r5, #1
   1d1d8:	cmp	fp, #0
   1d1dc:	bne	1d19c <__assert_fail@plt+0xbcc0>
   1d1e0:	str	r6, [sp, #4]
   1d1e4:	b	1d160 <__assert_fail@plt+0xbc84>
   1d1e8:	mvn	r9, #0
   1d1ec:	b	1d16c <__assert_fail@plt+0xbc90>
   1d1f0:	strd	r4, [sp, #-16]!
   1d1f4:	str	r6, [sp, #8]
   1d1f8:	mov	r6, r0
   1d1fc:	ldr	r0, [r1]
   1d200:	str	lr, [sp, #12]
   1d204:	cmp	r0, #0
   1d208:	beq	1d24c <__assert_fail@plt+0xbd70>
   1d20c:	mov	r4, r1
   1d210:	mov	r5, #0
   1d214:	b	1d228 <__assert_fail@plt+0xbd4c>
   1d218:	ldr	r0, [r4, #4]!
   1d21c:	add	r5, r5, #1
   1d220:	cmp	r0, #0
   1d224:	beq	1d24c <__assert_fail@plt+0xbd70>
   1d228:	mov	r1, r6
   1d22c:	bl	1117c <strcmp@plt>
   1d230:	cmp	r0, #0
   1d234:	bne	1d218 <__assert_fail@plt+0xbd3c>
   1d238:	mov	r0, r5
   1d23c:	ldrd	r4, [sp]
   1d240:	ldr	r6, [sp, #8]
   1d244:	add	sp, sp, #12
   1d248:	pop	{pc}		; (ldr pc, [sp], #4)
   1d24c:	ldrd	r4, [sp]
   1d250:	mvn	r0, #0
   1d254:	ldr	r6, [sp, #8]
   1d258:	add	sp, sp, #12
   1d25c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d260:	cmn	r2, #1
   1d264:	strd	r4, [sp, #-16]!
   1d268:	mov	r5, r1
   1d26c:	movweq	r1, #65396	; 0xff74
   1d270:	movwne	r1, #65424	; 0xff90
   1d274:	str	r6, [sp, #8]
   1d278:	movteq	r1, #1
   1d27c:	movtne	r1, #1
   1d280:	str	lr, [sp, #12]
   1d284:	mov	r6, r0
   1d288:	sub	sp, sp, #8
   1d28c:	mov	r2, #5
   1d290:	mov	r0, #0
   1d294:	bl	11230 <dcgettext@plt>
   1d298:	mov	r4, r0
   1d29c:	mov	r2, r5
   1d2a0:	mov	r1, #8
   1d2a4:	mov	r0, #0
   1d2a8:	bl	19c84 <__assert_fail@plt+0x87a8>
   1d2ac:	mov	r5, r0
   1d2b0:	mov	r1, r6
   1d2b4:	mov	r0, #1
   1d2b8:	bl	1b07c <__assert_fail@plt+0x9ba0>
   1d2bc:	mov	r1, #0
   1d2c0:	mov	r3, r5
   1d2c4:	str	r0, [sp]
   1d2c8:	mov	r2, r4
   1d2cc:	mov	r0, r1
   1d2d0:	bl	112d8 <error@plt>
   1d2d4:	add	sp, sp, #8
   1d2d8:	ldrd	r4, [sp]
   1d2dc:	ldr	r6, [sp, #8]
   1d2e0:	add	sp, sp, #12
   1d2e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d2e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d2ec:	mov	r4, r1
   1d2f0:	movw	r1, #65456	; 0xffb0
   1d2f4:	movt	r1, #1
   1d2f8:	strd	r6, [sp, #8]
   1d2fc:	mov	r6, r0
   1d300:	mov	r7, r2
   1d304:	mov	r0, #0
   1d308:	strd	r8, [sp, #16]
   1d30c:	mov	r2, #5
   1d310:	strd	sl, [sp, #24]
   1d314:	movw	sl, #4568	; 0x11d8
   1d318:	movt	sl, #3
   1d31c:	str	lr, [sp, #32]
   1d320:	sub	sp, sp, #12
   1d324:	bl	11230 <dcgettext@plt>
   1d328:	ldr	r1, [sl]
   1d32c:	bl	11158 <fputs_unlocked@plt>
   1d330:	ldr	fp, [r6]
   1d334:	cmp	fp, #0
   1d338:	beq	1d3d8 <__assert_fail@plt+0xbefc>
   1d33c:	movw	r3, #65480	; 0xffc8
   1d340:	movt	r3, #1
   1d344:	mov	r9, #0
   1d348:	str	r3, [sp]
   1d34c:	movw	r3, #58668	; 0xe52c
   1d350:	movt	r3, #1
   1d354:	mov	r5, r9
   1d358:	str	r3, [sp, #4]
   1d35c:	b	1d394 <__assert_fail@plt+0xbeb8>
   1d360:	mov	r0, fp
   1d364:	mov	r9, r4
   1d368:	bl	1b08c <__assert_fail@plt+0x9bb0>
   1d36c:	mov	r3, r0
   1d370:	mov	r1, #1
   1d374:	ldr	r2, [sp]
   1d378:	mov	r0, r8
   1d37c:	bl	11404 <__fprintf_chk@plt>
   1d380:	ldr	fp, [r6, #4]!
   1d384:	add	r5, r5, #1
   1d388:	add	r4, r4, r7
   1d38c:	cmp	fp, #0
   1d390:	beq	1d3d8 <__assert_fail@plt+0xbefc>
   1d394:	cmp	r5, #0
   1d398:	mov	r1, r4
   1d39c:	ldr	r8, [sl]
   1d3a0:	mov	r2, r7
   1d3a4:	mov	r0, r9
   1d3a8:	beq	1d360 <__assert_fail@plt+0xbe84>
   1d3ac:	bl	11218 <memcmp@plt>
   1d3b0:	cmp	r0, #0
   1d3b4:	bne	1d360 <__assert_fail@plt+0xbe84>
   1d3b8:	mov	r0, fp
   1d3bc:	bl	1b08c <__assert_fail@plt+0x9bb0>
   1d3c0:	mov	r3, r0
   1d3c4:	mov	r1, #1
   1d3c8:	ldr	r2, [sp, #4]
   1d3cc:	mov	r0, r8
   1d3d0:	bl	11404 <__fprintf_chk@plt>
   1d3d4:	b	1d380 <__assert_fail@plt+0xbea4>
   1d3d8:	ldr	r0, [sl]
   1d3dc:	ldr	r3, [r0, #20]
   1d3e0:	ldr	r2, [r0, #24]
   1d3e4:	cmp	r3, r2
   1d3e8:	bcs	1d418 <__assert_fail@plt+0xbf3c>
   1d3ec:	add	r1, r3, #1
   1d3f0:	mov	r2, #10
   1d3f4:	str	r1, [r0, #20]
   1d3f8:	strb	r2, [r3]
   1d3fc:	add	sp, sp, #12
   1d400:	ldrd	r4, [sp]
   1d404:	ldrd	r6, [sp, #8]
   1d408:	ldrd	r8, [sp, #16]
   1d40c:	ldrd	sl, [sp, #24]
   1d410:	add	sp, sp, #32
   1d414:	pop	{pc}		; (ldr pc, [sp], #4)
   1d418:	mov	r1, #10
   1d41c:	add	sp, sp, #12
   1d420:	ldrd	r4, [sp]
   1d424:	ldrd	r6, [sp, #8]
   1d428:	ldrd	r8, [sp, #16]
   1d42c:	ldrd	sl, [sp, #24]
   1d430:	ldr	lr, [sp, #32]
   1d434:	add	sp, sp, #36	; 0x24
   1d438:	b	11434 <__overflow@plt>
   1d43c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1d440:	mov	r5, r1
   1d444:	strd	r6, [sp, #8]
   1d448:	mov	r6, r2
   1d44c:	mov	r7, r3
   1d450:	strd	r8, [sp, #16]
   1d454:	mov	r8, r0
   1d458:	str	lr, [sp, #24]
   1d45c:	sub	sp, sp, #12
   1d460:	ldrb	r4, [sp, #48]	; 0x30
   1d464:	cmp	r4, #0
   1d468:	bne	1d514 <__assert_fail@plt+0xc038>
   1d46c:	ldr	r0, [r2]
   1d470:	cmp	r0, #0
   1d474:	movne	r9, r2
   1d478:	bne	1d4fc <__assert_fail@plt+0xc020>
   1d47c:	movw	r1, #65396	; 0xff74
   1d480:	movt	r1, #1
   1d484:	mov	r2, #5
   1d488:	mov	r0, #0
   1d48c:	bl	11230 <dcgettext@plt>
   1d490:	mov	r9, r0
   1d494:	mov	r2, r5
   1d498:	mov	r1, #8
   1d49c:	mov	r0, #0
   1d4a0:	bl	19c84 <__assert_fail@plt+0x87a8>
   1d4a4:	mov	r4, r0
   1d4a8:	mov	r1, r8
   1d4ac:	mov	r0, #1
   1d4b0:	bl	1b07c <__assert_fail@plt+0x9ba0>
   1d4b4:	mov	r1, #0
   1d4b8:	mov	r3, r4
   1d4bc:	str	r0, [sp]
   1d4c0:	mov	r2, r9
   1d4c4:	mov	r0, r1
   1d4c8:	bl	112d8 <error@plt>
   1d4cc:	mov	r0, r6
   1d4d0:	mov	r1, r7
   1d4d4:	ldr	r2, [sp, #40]	; 0x28
   1d4d8:	bl	1d2e8 <__assert_fail@plt+0xbe0c>
   1d4dc:	ldr	r3, [sp, #44]	; 0x2c
   1d4e0:	blx	r3
   1d4e4:	mvn	r0, #0
   1d4e8:	b	1d530 <__assert_fail@plt+0xc054>
   1d4ec:	ldr	r0, [r9, #4]!
   1d4f0:	add	r4, r4, #1
   1d4f4:	cmp	r0, #0
   1d4f8:	beq	1d47c <__assert_fail@plt+0xbfa0>
   1d4fc:	mov	r1, r5
   1d500:	bl	1117c <strcmp@plt>
   1d504:	cmp	r0, #0
   1d508:	bne	1d4ec <__assert_fail@plt+0xc010>
   1d50c:	mov	r0, r4
   1d510:	b	1d530 <__assert_fail@plt+0xc054>
   1d514:	mov	r2, r3
   1d518:	mov	r1, r6
   1d51c:	ldr	r3, [sp, #40]	; 0x28
   1d520:	mov	r0, r5
   1d524:	bl	1d0a0 <__assert_fail@plt+0xbbc4>
   1d528:	cmp	r0, #0
   1d52c:	blt	1d548 <__assert_fail@plt+0xc06c>
   1d530:	add	sp, sp, #12
   1d534:	ldrd	r4, [sp]
   1d538:	ldrd	r6, [sp, #8]
   1d53c:	ldrd	r8, [sp, #16]
   1d540:	add	sp, sp, #24
   1d544:	pop	{pc}		; (ldr pc, [sp], #4)
   1d548:	cmn	r0, #1
   1d54c:	beq	1d47c <__assert_fail@plt+0xbfa0>
   1d550:	movw	r1, #65424	; 0xff90
   1d554:	movt	r1, #1
   1d558:	mov	r2, #5
   1d55c:	mov	r0, #0
   1d560:	bl	11230 <dcgettext@plt>
   1d564:	mov	r9, r0
   1d568:	b	1d494 <__assert_fail@plt+0xbfb8>
   1d56c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d570:	strd	r6, [sp, #8]
   1d574:	ldr	r7, [r1]
   1d578:	str	r8, [sp, #16]
   1d57c:	str	lr, [sp, #20]
   1d580:	cmp	r7, #0
   1d584:	beq	1d5c4 <__assert_fail@plt+0xc0e8>
   1d588:	mov	r6, r3
   1d58c:	mov	r8, r0
   1d590:	mov	r4, r2
   1d594:	mov	r5, r1
   1d598:	b	1d5a8 <__assert_fail@plt+0xc0cc>
   1d59c:	ldr	r7, [r5, #4]!
   1d5a0:	cmp	r7, #0
   1d5a4:	beq	1d5c4 <__assert_fail@plt+0xc0e8>
   1d5a8:	mov	r1, r4
   1d5ac:	mov	r2, r6
   1d5b0:	mov	r0, r8
   1d5b4:	add	r4, r4, r6
   1d5b8:	bl	11218 <memcmp@plt>
   1d5bc:	cmp	r0, #0
   1d5c0:	bne	1d59c <__assert_fail@plt+0xc0c0>
   1d5c4:	mov	r0, r7
   1d5c8:	ldrd	r4, [sp]
   1d5cc:	ldrd	r6, [sp, #8]
   1d5d0:	ldr	r8, [sp, #16]
   1d5d4:	add	sp, sp, #20
   1d5d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d5dc:	strd	r4, [sp, #-12]!
   1d5e0:	mov	r5, r0
   1d5e4:	str	lr, [sp, #8]
   1d5e8:	sub	sp, sp, #12
   1d5ec:	bl	113a4 <__errno_location@plt>
   1d5f0:	mov	r4, r0
   1d5f4:	mov	r2, #0
   1d5f8:	ldr	r3, [r4]
   1d5fc:	mov	r0, r5
   1d600:	str	r2, [r4]
   1d604:	str	r3, [sp]
   1d608:	str	r3, [sp, #4]
   1d60c:	bl	111c4 <free@plt>
   1d610:	ldr	r3, [r4]
   1d614:	add	r2, sp, #8
   1d618:	clz	r3, r3
   1d61c:	lsr	r3, r3, #5
   1d620:	add	r3, r2, r3, lsl #2
   1d624:	ldr	r3, [r3, #-8]
   1d628:	str	r3, [r4]
   1d62c:	add	sp, sp, #12
   1d630:	ldrd	r4, [sp]
   1d634:	add	sp, sp, #8
   1d638:	pop	{pc}		; (ldr pc, [sp], #4)
   1d63c:	mov	r0, #14
   1d640:	str	r4, [sp, #-8]!
   1d644:	str	lr, [sp, #4]
   1d648:	bl	11464 <nl_langinfo@plt>
   1d64c:	cmp	r0, #0
   1d650:	beq	1d674 <__assert_fail@plt+0xc198>
   1d654:	ldrb	r2, [r0]
   1d658:	movw	r3, #65488	; 0xffd0
   1d65c:	movt	r3, #1
   1d660:	ldr	r4, [sp]
   1d664:	add	sp, sp, #4
   1d668:	cmp	r2, #0
   1d66c:	moveq	r0, r3
   1d670:	pop	{pc}		; (ldr pc, [sp], #4)
   1d674:	ldr	r4, [sp]
   1d678:	add	sp, sp, #4
   1d67c:	movw	r0, #65488	; 0xffd0
   1d680:	movt	r0, #1
   1d684:	pop	{pc}		; (ldr pc, [sp], #4)
   1d688:	strd	r4, [sp, #-20]!	; 0xffffffec
   1d68c:	mov	r5, r2
   1d690:	strd	r6, [sp, #8]
   1d694:	subs	r6, r0, #0
   1d698:	mov	r7, r1
   1d69c:	str	lr, [sp, #16]
   1d6a0:	sub	sp, sp, #12
   1d6a4:	addeq	r6, sp, #4
   1d6a8:	mov	r0, r6
   1d6ac:	bl	112cc <mbrtowc@plt>
   1d6b0:	cmp	r5, #0
   1d6b4:	cmnne	r0, #3
   1d6b8:	mov	r4, r0
   1d6bc:	bhi	1d6d8 <__assert_fail@plt+0xc1fc>
   1d6c0:	mov	r0, r4
   1d6c4:	add	sp, sp, #12
   1d6c8:	ldrd	r4, [sp]
   1d6cc:	ldrd	r6, [sp, #8]
   1d6d0:	add	sp, sp, #16
   1d6d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d6d8:	mov	r0, #0
   1d6dc:	bl	1d730 <__assert_fail@plt+0xc254>
   1d6e0:	cmp	r0, #0
   1d6e4:	bne	1d6c0 <__assert_fail@plt+0xc1e4>
   1d6e8:	ldrb	r3, [r7]
   1d6ec:	mov	r4, #1
   1d6f0:	str	r3, [r6]
   1d6f4:	b	1d6c0 <__assert_fail@plt+0xc1e4>
   1d6f8:	umull	r2, r3, r1, r2
   1d6fc:	cmp	r3, #0
   1d700:	bne	1d70c <__assert_fail@plt+0xc230>
   1d704:	mov	r1, r2
   1d708:	b	1d040 <__assert_fail@plt+0xbb64>
   1d70c:	str	r4, [sp, #-8]!
   1d710:	str	lr, [sp, #4]
   1d714:	bl	113a4 <__errno_location@plt>
   1d718:	mov	r3, #12
   1d71c:	ldr	r4, [sp]
   1d720:	add	sp, sp, #4
   1d724:	str	r3, [r0]
   1d728:	mov	r0, #0
   1d72c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d730:	push	{lr}		; (str lr, [sp, #-4]!)
   1d734:	sub	sp, sp, #268	; 0x10c
   1d738:	movw	r2, #257	; 0x101
   1d73c:	add	r1, sp, #4
   1d740:	bl	1d788 <__assert_fail@plt+0xc2ac>
   1d744:	cmp	r0, #0
   1d748:	movne	r0, #0
   1d74c:	bne	1d780 <__assert_fail@plt+0xc2a4>
   1d750:	movw	r1, #65496	; 0xffd8
   1d754:	movt	r1, #1
   1d758:	add	r0, sp, #4
   1d75c:	bl	1117c <strcmp@plt>
   1d760:	cmp	r0, #0
   1d764:	beq	1d780 <__assert_fail@plt+0xc2a4>
   1d768:	add	r0, sp, #4
   1d76c:	movw	r1, #65500	; 0xffdc
   1d770:	movt	r1, #1
   1d774:	bl	1117c <strcmp@plt>
   1d778:	adds	r0, r0, #0
   1d77c:	movne	r0, #1
   1d780:	add	sp, sp, #268	; 0x10c
   1d784:	pop	{pc}		; (ldr pc, [sp], #4)
   1d788:	strd	r4, [sp, #-16]!
   1d78c:	mov	r5, r1
   1d790:	mov	r1, #0
   1d794:	mov	r4, r2
   1d798:	str	r6, [sp, #8]
   1d79c:	str	lr, [sp, #12]
   1d7a0:	bl	11440 <setlocale@plt>
   1d7a4:	subs	r6, r0, #0
   1d7a8:	beq	1d828 <__assert_fail@plt+0xc34c>
   1d7ac:	bl	11380 <strlen@plt>
   1d7b0:	cmp	r4, r0
   1d7b4:	bhi	1d7d4 <__assert_fail@plt+0xc2f8>
   1d7b8:	cmp	r4, #0
   1d7bc:	moveq	r0, #34	; 0x22
   1d7c0:	bne	1d7f8 <__assert_fail@plt+0xc31c>
   1d7c4:	ldrd	r4, [sp]
   1d7c8:	ldr	r6, [sp, #8]
   1d7cc:	add	sp, sp, #12
   1d7d0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d7d4:	add	r2, r0, #1
   1d7d8:	mov	r1, r6
   1d7dc:	mov	r0, r5
   1d7e0:	bl	111e8 <memcpy@plt>
   1d7e4:	ldrd	r4, [sp]
   1d7e8:	mov	r0, #0
   1d7ec:	ldr	r6, [sp, #8]
   1d7f0:	add	sp, sp, #12
   1d7f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d7f8:	sub	r4, r4, #1
   1d7fc:	mov	r1, r6
   1d800:	mov	r2, r4
   1d804:	mov	r0, r5
   1d808:	bl	111e8 <memcpy@plt>
   1d80c:	mov	r3, #0
   1d810:	mov	r0, #34	; 0x22
   1d814:	strb	r3, [r5, r4]
   1d818:	ldrd	r4, [sp]
   1d81c:	ldr	r6, [sp, #8]
   1d820:	add	sp, sp, #12
   1d824:	pop	{pc}		; (ldr pc, [sp], #4)
   1d828:	cmp	r4, #0
   1d82c:	mov	r0, #22
   1d830:	strbne	r6, [r5]
   1d834:	ldrd	r4, [sp]
   1d838:	ldr	r6, [sp, #8]
   1d83c:	add	sp, sp, #12
   1d840:	pop	{pc}		; (ldr pc, [sp], #4)
   1d844:	mov	r1, #0
   1d848:	b	11440 <setlocale@plt>
   1d84c:	eor	r1, r1, #-2147483648	; 0x80000000
   1d850:	b	1d858 <__assert_fail@plt+0xc37c>
   1d854:	eor	r3, r3, #-2147483648	; 0x80000000
   1d858:	push	{r4, r5, lr}
   1d85c:	lsl	r4, r1, #1
   1d860:	lsl	r5, r3, #1
   1d864:	teq	r4, r5
   1d868:	teqeq	r0, r2
   1d86c:	orrsne	ip, r4, r0
   1d870:	orrsne	ip, r5, r2
   1d874:	mvnsne	ip, r4, asr #21
   1d878:	mvnsne	ip, r5, asr #21
   1d87c:	beq	1da68 <__assert_fail@plt+0xc58c>
   1d880:	lsr	r4, r4, #21
   1d884:	rsbs	r5, r4, r5, lsr #21
   1d888:	rsblt	r5, r5, #0
   1d88c:	ble	1d8ac <__assert_fail@plt+0xc3d0>
   1d890:	add	r4, r4, r5
   1d894:	eor	r2, r0, r2
   1d898:	eor	r3, r1, r3
   1d89c:	eor	r0, r2, r0
   1d8a0:	eor	r1, r3, r1
   1d8a4:	eor	r2, r0, r2
   1d8a8:	eor	r3, r1, r3
   1d8ac:	cmp	r5, #54	; 0x36
   1d8b0:	pophi	{r4, r5, pc}
   1d8b4:	tst	r1, #-2147483648	; 0x80000000
   1d8b8:	lsl	r1, r1, #12
   1d8bc:	mov	ip, #1048576	; 0x100000
   1d8c0:	orr	r1, ip, r1, lsr #12
   1d8c4:	beq	1d8d0 <__assert_fail@plt+0xc3f4>
   1d8c8:	rsbs	r0, r0, #0
   1d8cc:	rsc	r1, r1, #0
   1d8d0:	tst	r3, #-2147483648	; 0x80000000
   1d8d4:	lsl	r3, r3, #12
   1d8d8:	orr	r3, ip, r3, lsr #12
   1d8dc:	beq	1d8e8 <__assert_fail@plt+0xc40c>
   1d8e0:	rsbs	r2, r2, #0
   1d8e4:	rsc	r3, r3, #0
   1d8e8:	teq	r4, r5
   1d8ec:	beq	1da50 <__assert_fail@plt+0xc574>
   1d8f0:	sub	r4, r4, #1
   1d8f4:	rsbs	lr, r5, #32
   1d8f8:	blt	1d914 <__assert_fail@plt+0xc438>
   1d8fc:	lsl	ip, r2, lr
   1d900:	adds	r0, r0, r2, lsr r5
   1d904:	adc	r1, r1, #0
   1d908:	adds	r0, r0, r3, lsl lr
   1d90c:	adcs	r1, r1, r3, asr r5
   1d910:	b	1d930 <__assert_fail@plt+0xc454>
   1d914:	sub	r5, r5, #32
   1d918:	add	lr, lr, #32
   1d91c:	cmp	r2, #1
   1d920:	lsl	ip, r3, lr
   1d924:	orrcs	ip, ip, #2
   1d928:	adds	r0, r0, r3, asr r5
   1d92c:	adcs	r1, r1, r3, asr #31
   1d930:	and	r5, r1, #-2147483648	; 0x80000000
   1d934:	bpl	1d944 <__assert_fail@plt+0xc468>
   1d938:	rsbs	ip, ip, #0
   1d93c:	rscs	r0, r0, #0
   1d940:	rsc	r1, r1, #0
   1d944:	cmp	r1, #1048576	; 0x100000
   1d948:	bcc	1d988 <__assert_fail@plt+0xc4ac>
   1d94c:	cmp	r1, #2097152	; 0x200000
   1d950:	bcc	1d970 <__assert_fail@plt+0xc494>
   1d954:	lsrs	r1, r1, #1
   1d958:	rrxs	r0, r0
   1d95c:	rrx	ip, ip
   1d960:	add	r4, r4, #1
   1d964:	lsl	r2, r4, #21
   1d968:	cmn	r2, #4194304	; 0x400000
   1d96c:	bcs	1dac8 <__assert_fail@plt+0xc5ec>
   1d970:	cmp	ip, #-2147483648	; 0x80000000
   1d974:	lsrseq	ip, r0, #1
   1d978:	adcs	r0, r0, #0
   1d97c:	adc	r1, r1, r4, lsl #20
   1d980:	orr	r1, r1, r5
   1d984:	pop	{r4, r5, pc}
   1d988:	lsls	ip, ip, #1
   1d98c:	adcs	r0, r0, r0
   1d990:	adc	r1, r1, r1
   1d994:	tst	r1, #1048576	; 0x100000
   1d998:	sub	r4, r4, #1
   1d99c:	bne	1d970 <__assert_fail@plt+0xc494>
   1d9a0:	teq	r1, #0
   1d9a4:	moveq	r1, r0
   1d9a8:	moveq	r0, #0
   1d9ac:	clz	r3, r1
   1d9b0:	addeq	r3, r3, #32
   1d9b4:	sub	r3, r3, #11
   1d9b8:	subs	r2, r3, #32
   1d9bc:	bge	1d9e0 <__assert_fail@plt+0xc504>
   1d9c0:	adds	r2, r2, #12
   1d9c4:	ble	1d9dc <__assert_fail@plt+0xc500>
   1d9c8:	add	ip, r2, #20
   1d9cc:	rsb	r2, r2, #12
   1d9d0:	lsl	r0, r1, ip
   1d9d4:	lsr	r1, r1, r2
   1d9d8:	b	1d9f0 <__assert_fail@plt+0xc514>
   1d9dc:	add	r2, r2, #20
   1d9e0:	rsble	ip, r2, #32
   1d9e4:	lsl	r1, r1, r2
   1d9e8:	orrle	r1, r1, r0, lsr ip
   1d9ec:	lslle	r0, r0, r2
   1d9f0:	subs	r4, r4, r3
   1d9f4:	addge	r1, r1, r4, lsl #20
   1d9f8:	orrge	r1, r1, r5
   1d9fc:	popge	{r4, r5, pc}
   1da00:	mvn	r4, r4
   1da04:	subs	r4, r4, #31
   1da08:	bge	1da44 <__assert_fail@plt+0xc568>
   1da0c:	adds	r4, r4, #12
   1da10:	bgt	1da2c <__assert_fail@plt+0xc550>
   1da14:	add	r4, r4, #20
   1da18:	rsb	r2, r4, #32
   1da1c:	lsr	r0, r0, r4
   1da20:	orr	r0, r0, r1, lsl r2
   1da24:	orr	r1, r5, r1, lsr r4
   1da28:	pop	{r4, r5, pc}
   1da2c:	rsb	r4, r4, #12
   1da30:	rsb	r2, r4, #32
   1da34:	lsr	r0, r0, r2
   1da38:	orr	r0, r0, r1, lsl r4
   1da3c:	mov	r1, r5
   1da40:	pop	{r4, r5, pc}
   1da44:	lsr	r0, r1, r4
   1da48:	mov	r1, r5
   1da4c:	pop	{r4, r5, pc}
   1da50:	teq	r4, #0
   1da54:	eor	r3, r3, #1048576	; 0x100000
   1da58:	eoreq	r1, r1, #1048576	; 0x100000
   1da5c:	addeq	r4, r4, #1
   1da60:	subne	r5, r5, #1
   1da64:	b	1d8f0 <__assert_fail@plt+0xc414>
   1da68:	mvns	ip, r4, asr #21
   1da6c:	mvnsne	ip, r5, asr #21
   1da70:	beq	1dad8 <__assert_fail@plt+0xc5fc>
   1da74:	teq	r4, r5
   1da78:	teqeq	r0, r2
   1da7c:	beq	1da90 <__assert_fail@plt+0xc5b4>
   1da80:	orrs	ip, r4, r0
   1da84:	moveq	r1, r3
   1da88:	moveq	r0, r2
   1da8c:	pop	{r4, r5, pc}
   1da90:	teq	r1, r3
   1da94:	movne	r1, #0
   1da98:	movne	r0, #0
   1da9c:	popne	{r4, r5, pc}
   1daa0:	lsrs	ip, r4, #21
   1daa4:	bne	1dab8 <__assert_fail@plt+0xc5dc>
   1daa8:	lsls	r0, r0, #1
   1daac:	adcs	r1, r1, r1
   1dab0:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1dab4:	pop	{r4, r5, pc}
   1dab8:	adds	r4, r4, #4194304	; 0x400000
   1dabc:	addcc	r1, r1, #1048576	; 0x100000
   1dac0:	popcc	{r4, r5, pc}
   1dac4:	and	r5, r1, #-2147483648	; 0x80000000
   1dac8:	orr	r1, r5, #2130706432	; 0x7f000000
   1dacc:	orr	r1, r1, #15728640	; 0xf00000
   1dad0:	mov	r0, #0
   1dad4:	pop	{r4, r5, pc}
   1dad8:	mvns	ip, r4, asr #21
   1dadc:	movne	r1, r3
   1dae0:	movne	r0, r2
   1dae4:	mvnseq	ip, r5, asr #21
   1dae8:	movne	r3, r1
   1daec:	movne	r2, r0
   1daf0:	orrs	r4, r0, r1, lsl #12
   1daf4:	orrseq	r5, r2, r3, lsl #12
   1daf8:	teqeq	r1, r3
   1dafc:	orrne	r1, r1, #524288	; 0x80000
   1db00:	pop	{r4, r5, pc}
   1db04:	teq	r0, #0
   1db08:	moveq	r1, #0
   1db0c:	bxeq	lr
   1db10:	push	{r4, r5, lr}
   1db14:	mov	r4, #1024	; 0x400
   1db18:	add	r4, r4, #50	; 0x32
   1db1c:	mov	r5, #0
   1db20:	mov	r1, #0
   1db24:	b	1d9a0 <__assert_fail@plt+0xc4c4>
   1db28:	teq	r0, #0
   1db2c:	moveq	r1, #0
   1db30:	bxeq	lr
   1db34:	push	{r4, r5, lr}
   1db38:	mov	r4, #1024	; 0x400
   1db3c:	add	r4, r4, #50	; 0x32
   1db40:	ands	r5, r0, #-2147483648	; 0x80000000
   1db44:	rsbmi	r0, r0, #0
   1db48:	mov	r1, #0
   1db4c:	b	1d9a0 <__assert_fail@plt+0xc4c4>
   1db50:	lsls	r2, r0, #1
   1db54:	asr	r1, r2, #3
   1db58:	rrx	r1, r1
   1db5c:	lsl	r0, r2, #28
   1db60:	andsne	r3, r2, #-16777216	; 0xff000000
   1db64:	teqne	r3, #-16777216	; 0xff000000
   1db68:	eorne	r1, r1, #939524096	; 0x38000000
   1db6c:	bxne	lr
   1db70:	bics	r2, r2, #-16777216	; 0xff000000
   1db74:	bxeq	lr
   1db78:	teq	r3, #-16777216	; 0xff000000
   1db7c:	orreq	r1, r1, #524288	; 0x80000
   1db80:	bxeq	lr
   1db84:	push	{r4, r5, lr}
   1db88:	mov	r4, #896	; 0x380
   1db8c:	and	r5, r1, #-2147483648	; 0x80000000
   1db90:	bic	r1, r1, #-2147483648	; 0x80000000
   1db94:	b	1d9a0 <__assert_fail@plt+0xc4c4>
   1db98:	orrs	r2, r0, r1
   1db9c:	bxeq	lr
   1dba0:	push	{r4, r5, lr}
   1dba4:	mov	r5, #0
   1dba8:	b	1dbc8 <__assert_fail@plt+0xc6ec>
   1dbac:	orrs	r2, r0, r1
   1dbb0:	bxeq	lr
   1dbb4:	push	{r4, r5, lr}
   1dbb8:	ands	r5, r1, #-2147483648	; 0x80000000
   1dbbc:	bpl	1dbc8 <__assert_fail@plt+0xc6ec>
   1dbc0:	rsbs	r0, r0, #0
   1dbc4:	rsc	r1, r1, #0
   1dbc8:	mov	r4, #1024	; 0x400
   1dbcc:	add	r4, r4, #50	; 0x32
   1dbd0:	lsrs	ip, r1, #22
   1dbd4:	beq	1d944 <__assert_fail@plt+0xc468>
   1dbd8:	mov	r2, #3
   1dbdc:	lsrs	ip, ip, #3
   1dbe0:	addne	r2, r2, #3
   1dbe4:	lsrs	ip, ip, #3
   1dbe8:	addne	r2, r2, #3
   1dbec:	add	r2, r2, ip, lsr #3
   1dbf0:	rsb	r3, r2, #32
   1dbf4:	lsl	ip, r0, r3
   1dbf8:	lsr	r0, r0, r2
   1dbfc:	orr	r0, r0, r1, lsl r3
   1dc00:	lsr	r1, r1, r2
   1dc04:	add	r4, r4, r2
   1dc08:	b	1d944 <__assert_fail@plt+0xc468>
   1dc0c:	cmp	r3, #0
   1dc10:	cmpeq	r2, #0
   1dc14:	bne	1dc38 <__assert_fail@plt+0xc75c>
   1dc18:	cmp	r1, #0
   1dc1c:	movlt	r1, #-2147483648	; 0x80000000
   1dc20:	movlt	r0, #0
   1dc24:	blt	1dc34 <__assert_fail@plt+0xc758>
   1dc28:	cmpeq	r0, #0
   1dc2c:	mvnne	r1, #-2147483648	; 0x80000000
   1dc30:	mvnne	r0, #0
   1dc34:	b	1dd1c <__assert_fail@plt+0xc840>
   1dc38:	sub	sp, sp, #8
   1dc3c:	push	{sp, lr}
   1dc40:	cmp	r1, #0
   1dc44:	blt	1dc64 <__assert_fail@plt+0xc788>
   1dc48:	cmp	r3, #0
   1dc4c:	blt	1dc98 <__assert_fail@plt+0xc7bc>
   1dc50:	bl	1dd70 <__assert_fail@plt+0xc894>
   1dc54:	ldr	lr, [sp, #4]
   1dc58:	add	sp, sp, #8
   1dc5c:	pop	{r2, r3}
   1dc60:	bx	lr
   1dc64:	rsbs	r0, r0, #0
   1dc68:	sbc	r1, r1, r1, lsl #1
   1dc6c:	cmp	r3, #0
   1dc70:	blt	1dcbc <__assert_fail@plt+0xc7e0>
   1dc74:	bl	1dd70 <__assert_fail@plt+0xc894>
   1dc78:	ldr	lr, [sp, #4]
   1dc7c:	add	sp, sp, #8
   1dc80:	pop	{r2, r3}
   1dc84:	rsbs	r0, r0, #0
   1dc88:	sbc	r1, r1, r1, lsl #1
   1dc8c:	rsbs	r2, r2, #0
   1dc90:	sbc	r3, r3, r3, lsl #1
   1dc94:	bx	lr
   1dc98:	rsbs	r2, r2, #0
   1dc9c:	sbc	r3, r3, r3, lsl #1
   1dca0:	bl	1dd70 <__assert_fail@plt+0xc894>
   1dca4:	ldr	lr, [sp, #4]
   1dca8:	add	sp, sp, #8
   1dcac:	pop	{r2, r3}
   1dcb0:	rsbs	r0, r0, #0
   1dcb4:	sbc	r1, r1, r1, lsl #1
   1dcb8:	bx	lr
   1dcbc:	rsbs	r2, r2, #0
   1dcc0:	sbc	r3, r3, r3, lsl #1
   1dcc4:	bl	1dd70 <__assert_fail@plt+0xc894>
   1dcc8:	ldr	lr, [sp, #4]
   1dccc:	add	sp, sp, #8
   1dcd0:	pop	{r2, r3}
   1dcd4:	rsbs	r2, r2, #0
   1dcd8:	sbc	r3, r3, r3, lsl #1
   1dcdc:	bx	lr
   1dce0:	cmp	r3, #0
   1dce4:	cmpeq	r2, #0
   1dce8:	bne	1dd00 <__assert_fail@plt+0xc824>
   1dcec:	cmp	r1, #0
   1dcf0:	cmpeq	r0, #0
   1dcf4:	mvnne	r1, #0
   1dcf8:	mvnne	r0, #0
   1dcfc:	b	1dd1c <__assert_fail@plt+0xc840>
   1dd00:	sub	sp, sp, #8
   1dd04:	push	{sp, lr}
   1dd08:	bl	1dd70 <__assert_fail@plt+0xc894>
   1dd0c:	ldr	lr, [sp, #4]
   1dd10:	add	sp, sp, #8
   1dd14:	pop	{r2, r3}
   1dd18:	bx	lr
   1dd1c:	push	{r1, lr}
   1dd20:	mov	r0, #8
   1dd24:	bl	11164 <raise@plt>
   1dd28:	pop	{r1, pc}
   1dd2c:	andeq	r0, r0, r0
   1dd30:	vmov	d6, r0, r1
   1dd34:	vldr	d7, [pc, #36]	; 1dd60 <__assert_fail@plt+0xc884>
   1dd38:	vldr	d5, [pc, #40]	; 1dd68 <__assert_fail@plt+0xc88c>
   1dd3c:	vmul.f64	d7, d6, d7
   1dd40:	vcvt.u32.f64	s14, d7
   1dd44:	vcvt.f64.u32	d4, s14
   1dd48:	vmov	r1, s14
   1dd4c:	vmls.f64	d6, d4, d5
   1dd50:	vcvt.u32.f64	s15, d6
   1dd54:	vmov	r0, s15
   1dd58:	bx	lr
   1dd5c:	nop			; (mov r0, r0)
   1dd60:	andeq	r0, r0, r0
   1dd64:	ldclcc	0, cr0, [r0]
   1dd68:	andeq	r0, r0, r0
   1dd6c:	mvnsmi	r0, r0
   1dd70:	cmp	r1, r3
   1dd74:	cmpeq	r0, r2
   1dd78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd7c:	mov	r4, r0
   1dd80:	movcc	r0, #0
   1dd84:	mov	r5, r1
   1dd88:	ldr	lr, [sp, #36]	; 0x24
   1dd8c:	movcc	r1, r0
   1dd90:	bcc	1de8c <__assert_fail@plt+0xc9b0>
   1dd94:	cmp	r3, #0
   1dd98:	clzeq	ip, r2
   1dd9c:	clzne	ip, r3
   1dda0:	addeq	ip, ip, #32
   1dda4:	cmp	r5, #0
   1dda8:	clzeq	r1, r4
   1ddac:	addeq	r1, r1, #32
   1ddb0:	clzne	r1, r5
   1ddb4:	sub	ip, ip, r1
   1ddb8:	sub	sl, ip, #32
   1ddbc:	lsl	r9, r3, ip
   1ddc0:	rsb	fp, ip, #32
   1ddc4:	orr	r9, r9, r2, lsl sl
   1ddc8:	orr	r9, r9, r2, lsr fp
   1ddcc:	lsl	r8, r2, ip
   1ddd0:	cmp	r5, r9
   1ddd4:	cmpeq	r4, r8
   1ddd8:	movcc	r0, #0
   1dddc:	movcc	r1, r0
   1dde0:	bcc	1ddfc <__assert_fail@plt+0xc920>
   1dde4:	mov	r0, #1
   1dde8:	subs	r4, r4, r8
   1ddec:	lsl	r1, r0, sl
   1ddf0:	orr	r1, r1, r0, lsr fp
   1ddf4:	lsl	r0, r0, ip
   1ddf8:	sbc	r5, r5, r9
   1ddfc:	cmp	ip, #0
   1de00:	beq	1de8c <__assert_fail@plt+0xc9b0>
   1de04:	lsr	r6, r8, #1
   1de08:	orr	r6, r6, r9, lsl #31
   1de0c:	lsr	r7, r9, #1
   1de10:	mov	r2, ip
   1de14:	b	1de38 <__assert_fail@plt+0xc95c>
   1de18:	subs	r3, r4, r6
   1de1c:	sbc	r8, r5, r7
   1de20:	adds	r3, r3, r3
   1de24:	adc	r8, r8, r8
   1de28:	adds	r4, r3, #1
   1de2c:	adc	r5, r8, #0
   1de30:	subs	r2, r2, #1
   1de34:	beq	1de54 <__assert_fail@plt+0xc978>
   1de38:	cmp	r5, r7
   1de3c:	cmpeq	r4, r6
   1de40:	bcs	1de18 <__assert_fail@plt+0xc93c>
   1de44:	adds	r4, r4, r4
   1de48:	adc	r5, r5, r5
   1de4c:	subs	r2, r2, #1
   1de50:	bne	1de38 <__assert_fail@plt+0xc95c>
   1de54:	lsr	r3, r4, ip
   1de58:	orr	r3, r3, r5, lsl fp
   1de5c:	lsr	r2, r5, ip
   1de60:	orr	r3, r3, r5, lsr sl
   1de64:	adds	r0, r0, r4
   1de68:	mov	r4, r3
   1de6c:	lsl	r3, r2, ip
   1de70:	orr	r3, r3, r4, lsl sl
   1de74:	lsl	ip, r4, ip
   1de78:	orr	r3, r3, r4, lsr fp
   1de7c:	adc	r1, r1, r5
   1de80:	subs	r0, r0, ip
   1de84:	mov	r5, r2
   1de88:	sbc	r1, r1, r3
   1de8c:	cmp	lr, #0
   1de90:	strdne	r4, [lr]
   1de94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1de9c:	mov	r7, r0
   1dea0:	ldr	r6, [pc, #72]	; 1def0 <__assert_fail@plt+0xca14>
   1dea4:	ldr	r5, [pc, #72]	; 1def4 <__assert_fail@plt+0xca18>
   1dea8:	add	r6, pc, r6
   1deac:	add	r5, pc, r5
   1deb0:	sub	r6, r6, r5
   1deb4:	mov	r8, r1
   1deb8:	mov	r9, r2
   1debc:	bl	1112c <calloc@plt-0x20>
   1dec0:	asrs	r6, r6, #2
   1dec4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dec8:	mov	r4, #0
   1decc:	add	r4, r4, #1
   1ded0:	ldr	r3, [r5], #4
   1ded4:	mov	r2, r9
   1ded8:	mov	r1, r8
   1dedc:	mov	r0, r7
   1dee0:	blx	r3
   1dee4:	cmp	r6, r4
   1dee8:	bne	1decc <__assert_fail@plt+0xc9f0>
   1deec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1def0:	andeq	r3, r1, r4, rrx
   1def4:	andeq	r3, r1, ip, asr r0
   1def8:	bx	lr
   1defc:	ldr	r3, [pc, #12]	; 1df10 <__assert_fail@plt+0xca34>
   1df00:	mov	r1, #0
   1df04:	add	r3, pc, r3
   1df08:	ldr	r2, [r3]
   1df0c:	b	113bc <__cxa_atexit@plt>
   1df10:	andeq	r3, r1, r0, asr #4

Disassembly of section .fini:

0001df14 <.fini>:
   1df14:	push	{r3, lr}
   1df18:	pop	{r3, pc}
