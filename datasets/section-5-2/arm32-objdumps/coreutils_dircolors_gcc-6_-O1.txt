
../repos/coreutils/src/dircolors:     file format elf32-littlearm


Disassembly of section .init:

00010d3c <.init>:
   10d3c:	push	{r3, lr}
   10d40:	bl	11008 <close@plt+0x48>
   10d44:	pop	{r3, pc}

Disassembly of section .plt:

00010d48 <calloc@plt-0x14>:
   10d48:	push	{lr}		; (str lr, [sp, #-4]!)
   10d4c:	ldr	lr, [pc, #4]	; 10d58 <calloc@plt-0x4>
   10d50:	add	lr, pc, lr
   10d54:	ldr	pc, [lr, #8]!
   10d58:	andeq	r7, r1, r8, lsr #5

00010d5c <calloc@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #94208	; 0x17000
   10d64:	ldr	pc, [ip, #680]!	; 0x2a8

00010d68 <fputs_unlocked@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #94208	; 0x17000
   10d70:	ldr	pc, [ip, #672]!	; 0x2a0

00010d74 <raise@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #94208	; 0x17000
   10d7c:	ldr	pc, [ip, #664]!	; 0x298

00010d80 <__getdelim@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #94208	; 0x17000
   10d88:	ldr	pc, [ip, #656]!	; 0x290

00010d8c <strcmp@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #94208	; 0x17000
   10d94:	ldr	pc, [ip, #648]!	; 0x288

00010d98 <fflush@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #94208	; 0x17000
   10da0:	ldr	pc, [ip, #640]!	; 0x280

00010da4 <free@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #94208	; 0x17000
   10dac:	ldr	pc, [ip, #632]!	; 0x278

00010db0 <_exit@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #94208	; 0x17000
   10db8:	ldr	pc, [ip, #624]!	; 0x270

00010dbc <memcpy@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #94208	; 0x17000
   10dc4:	ldr	pc, [ip, #616]!	; 0x268

00010dc8 <mbsinit@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #94208	; 0x17000
   10dd0:	ldr	pc, [ip, #608]!	; 0x260

00010dd4 <fwrite_unlocked@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #94208	; 0x17000
   10ddc:	ldr	pc, [ip, #600]!	; 0x258

00010de0 <memcmp@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #94208	; 0x17000
   10de8:	ldr	pc, [ip, #592]!	; 0x250

00010dec <fputc_unlocked@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #94208	; 0x17000
   10df4:	ldr	pc, [ip, #584]!	; 0x248

00010df8 <dcgettext@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #94208	; 0x17000
   10e00:	ldr	pc, [ip, #576]!	; 0x240

00010e04 <dup2@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #94208	; 0x17000
   10e0c:	ldr	pc, [ip, #568]!	; 0x238

00010e10 <realloc@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #94208	; 0x17000
   10e18:	ldr	pc, [ip, #560]!	; 0x230

00010e1c <textdomain@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #94208	; 0x17000
   10e24:	ldr	pc, [ip, #552]!	; 0x228

00010e28 <iswprint@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #94208	; 0x17000
   10e30:	ldr	pc, [ip, #544]!	; 0x220

00010e34 <fwrite@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #94208	; 0x17000
   10e3c:	ldr	pc, [ip, #536]!	; 0x218

00010e40 <lseek64@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #94208	; 0x17000
   10e48:	ldr	pc, [ip, #528]!	; 0x210

00010e4c <__ctype_get_mb_cur_max@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #94208	; 0x17000
   10e54:	ldr	pc, [ip, #520]!	; 0x208

00010e58 <__fpending@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #94208	; 0x17000
   10e60:	ldr	pc, [ip, #512]!	; 0x200

00010e64 <mbrtowc@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #94208	; 0x17000
   10e6c:	ldr	pc, [ip, #504]!	; 0x1f8

00010e70 <error@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #94208	; 0x17000
   10e78:	ldr	pc, [ip, #496]!	; 0x1f0

00010e7c <fnmatch@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #94208	; 0x17000
   10e84:	ldr	pc, [ip, #488]!	; 0x1e8

00010e88 <open64@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #94208	; 0x17000
   10e90:	ldr	pc, [ip, #480]!	; 0x1e0

00010e94 <getenv@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #94208	; 0x17000
   10e9c:	ldr	pc, [ip, #472]!	; 0x1d8

00010ea0 <puts@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #94208	; 0x17000
   10ea8:	ldr	pc, [ip, #464]!	; 0x1d0

00010eac <malloc@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #94208	; 0x17000
   10eb4:	ldr	pc, [ip, #456]!	; 0x1c8

00010eb8 <__libc_start_main@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #448]!	; 0x1c0

00010ec4 <__freading@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #440]!	; 0x1b8

00010ed0 <__gmon_start__@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #432]!	; 0x1b0

00010edc <freopen64@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #424]!	; 0x1a8

00010ee8 <getopt_long@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #416]!	; 0x1a0

00010ef4 <__ctype_b_loc@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #408]!	; 0x198

00010f00 <exit@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #400]!	; 0x190

00010f0c <strlen@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #392]!	; 0x188

00010f18 <__errno_location@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #384]!	; 0x180

00010f24 <__cxa_atexit@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #376]!	; 0x178

00010f30 <memset@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #368]!	; 0x170

00010f3c <__printf_chk@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #360]!	; 0x168

00010f48 <fileno@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #352]!	; 0x160

00010f54 <__fprintf_chk@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #344]!	; 0x158

00010f60 <fclose@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #94208	; 0x17000
   10f68:	ldr	pc, [ip, #336]!	; 0x150

00010f6c <fseeko64@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #94208	; 0x17000
   10f74:	ldr	pc, [ip, #328]!	; 0x148

00010f78 <setlocale@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #94208	; 0x17000
   10f80:	ldr	pc, [ip, #320]!	; 0x140

00010f84 <strrchr@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #94208	; 0x17000
   10f8c:	ldr	pc, [ip, #312]!	; 0x138

00010f90 <nl_langinfo@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #94208	; 0x17000
   10f98:	ldr	pc, [ip, #304]!	; 0x130

00010f9c <bindtextdomain@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #94208	; 0x17000
   10fa4:	ldr	pc, [ip, #296]!	; 0x128

00010fa8 <strncmp@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #94208	; 0x17000
   10fb0:	ldr	pc, [ip, #288]!	; 0x120

00010fb4 <abort@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #94208	; 0x17000
   10fbc:	ldr	pc, [ip, #280]!	; 0x118

00010fc0 <close@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #94208	; 0x17000
   10fc8:	ldr	pc, [ip, #272]!	; 0x110

Disassembly of section .text:

00010fcc <_obstack_begin@@Base-0x1858>:
   10fcc:	mov	fp, #0
   10fd0:	mov	lr, #0
   10fd4:	pop	{r1}		; (ldr r1, [sp], #4)
   10fd8:	mov	r2, sp
   10fdc:	push	{r2}		; (str r2, [sp, #-4]!)
   10fe0:	push	{r0}		; (str r0, [sp, #-4]!)
   10fe4:	ldr	ip, [pc, #16]	; 10ffc <close@plt+0x3c>
   10fe8:	push	{ip}		; (str ip, [sp, #-4]!)
   10fec:	ldr	r0, [pc, #12]	; 11000 <close@plt+0x40>
   10ff0:	ldr	r3, [pc, #12]	; 11004 <close@plt+0x44>
   10ff4:	bl	10eb8 <__libc_start_main@plt>
   10ff8:	bl	10fb4 <abort@plt>
   10ffc:	andeq	r5, r1, r0, lsr #18
   11000:	strdeq	r1, [r1], -r4
   11004:	andeq	r5, r1, r0, asr #17
   11008:	ldr	r3, [pc, #20]	; 11024 <close@plt+0x64>
   1100c:	ldr	r2, [pc, #20]	; 11028 <close@plt+0x68>
   11010:	add	r3, pc, r3
   11014:	ldr	r2, [r3, r2]
   11018:	cmp	r2, #0
   1101c:	bxeq	lr
   11020:	b	10ed0 <__gmon_start__@plt>
   11024:	andeq	r6, r1, r8, ror #31
   11028:	ldrdeq	r0, [r0], -ip
   1102c:	ldr	r3, [pc, #28]	; 11050 <close@plt+0x90>
   11030:	ldr	r0, [pc, #28]	; 11054 <close@plt+0x94>
   11034:	sub	r3, r3, r0
   11038:	cmp	r3, #6
   1103c:	bxls	lr
   11040:	ldr	r3, [pc, #16]	; 11058 <close@plt+0x98>
   11044:	cmp	r3, #0
   11048:	bxeq	lr
   1104c:	bx	r3
   11050:	andeq	r8, r2, r7, lsr r1
   11054:	andeq	r8, r2, r4, lsr r1
   11058:	andeq	r0, r0, r0
   1105c:	ldr	r1, [pc, #36]	; 11088 <close@plt+0xc8>
   11060:	ldr	r0, [pc, #36]	; 1108c <close@plt+0xcc>
   11064:	sub	r1, r1, r0
   11068:	asr	r1, r1, #2
   1106c:	add	r1, r1, r1, lsr #31
   11070:	asrs	r1, r1, #1
   11074:	bxeq	lr
   11078:	ldr	r3, [pc, #16]	; 11090 <close@plt+0xd0>
   1107c:	cmp	r3, #0
   11080:	bxeq	lr
   11084:	bx	r3
   11088:	andeq	r8, r2, r4, lsr r1
   1108c:	andeq	r8, r2, r4, lsr r1
   11090:	andeq	r0, r0, r0
   11094:	push	{r4, lr}
   11098:	ldr	r4, [pc, #24]	; 110b8 <close@plt+0xf8>
   1109c:	ldrb	r3, [r4]
   110a0:	cmp	r3, #0
   110a4:	popne	{r4, pc}
   110a8:	bl	1102c <close@plt+0x6c>
   110ac:	mov	r3, #1
   110b0:	strb	r3, [r4]
   110b4:	pop	{r4, pc}
   110b8:	andeq	r8, r2, r8, asr r1
   110bc:	ldr	r0, [pc, #40]	; 110ec <close@plt+0x12c>
   110c0:	ldr	r3, [r0]
   110c4:	cmp	r3, #0
   110c8:	bne	110d0 <close@plt+0x110>
   110cc:	b	1105c <close@plt+0x9c>
   110d0:	ldr	r3, [pc, #24]	; 110f0 <close@plt+0x130>
   110d4:	cmp	r3, #0
   110d8:	beq	110cc <close@plt+0x10c>
   110dc:	push	{r4, lr}
   110e0:	blx	r3
   110e4:	pop	{r4, lr}
   110e8:	b	1105c <close@plt+0x9c>
   110ec:	andeq	r7, r2, r4, lsl pc
   110f0:	andeq	r0, r0, r0
   110f4:	ldrb	r3, [r0]
   110f8:	cmp	r3, #0
   110fc:	bxeq	lr
   11100:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11104:	mov	r5, r0
   11108:	mov	r6, #1
   1110c:	mov	r7, r6
   11110:	ldr	r4, [pc, #348]	; 11274 <close@plt+0x2b4>
   11114:	mov	r9, #92	; 0x5c
   11118:	mov	r8, #39	; 0x27
   1111c:	b	111cc <close@plt+0x20c>
   11120:	cmp	r3, #92	; 0x5c
   11124:	beq	11130 <close@plt+0x170>
   11128:	cmp	r3, #94	; 0x5e
   1112c:	bne	111e8 <close@plt+0x228>
   11130:	eor	r6, r6, #1
   11134:	b	1119c <close@plt+0x1dc>
   11138:	ldr	r2, [r4, #16]
   1113c:	ldr	r3, [r4, #12]
   11140:	cmp	r2, r3
   11144:	beq	111f0 <close@plt+0x230>
   11148:	ldr	r3, [r4, #12]
   1114c:	add	r2, r3, #1
   11150:	str	r2, [r4, #12]
   11154:	strb	r8, [r3]
   11158:	ldr	r2, [r4, #16]
   1115c:	ldr	r3, [r4, #12]
   11160:	cmp	r2, r3
   11164:	beq	11200 <close@plt+0x240>
   11168:	ldr	r3, [r4, #12]
   1116c:	add	r2, r3, #1
   11170:	str	r2, [r4, #12]
   11174:	strb	r9, [r3]
   11178:	ldr	r2, [r4, #16]
   1117c:	ldr	r3, [r4, #12]
   11180:	cmp	r2, r3
   11184:	beq	11210 <close@plt+0x250>
   11188:	ldr	r3, [r4, #12]
   1118c:	add	r2, r3, #1
   11190:	str	r2, [r4, #12]
   11194:	strb	r8, [r3]
   11198:	mov	r6, r7
   1119c:	ldr	r2, [r4, #16]
   111a0:	ldr	r3, [r4, #12]
   111a4:	cmp	r2, r3
   111a8:	beq	11260 <close@plt+0x2a0>
   111ac:	ldr	r3, [r4, #12]
   111b0:	add	r2, r3, #1
   111b4:	str	r2, [r4, #12]
   111b8:	ldrb	r2, [r5]
   111bc:	strb	r2, [r3]
   111c0:	ldrb	r3, [r5, #1]!
   111c4:	cmp	r3, #0
   111c8:	beq	11270 <close@plt+0x2b0>
   111cc:	cmp	r3, #61	; 0x3d
   111d0:	beq	11220 <close@plt+0x260>
   111d4:	bhi	11120 <close@plt+0x160>
   111d8:	cmp	r3, #39	; 0x27
   111dc:	beq	11138 <close@plt+0x178>
   111e0:	cmp	r3, #58	; 0x3a
   111e4:	beq	11220 <close@plt+0x260>
   111e8:	mov	r6, r7
   111ec:	b	1119c <close@plt+0x1dc>
   111f0:	mov	r1, r7
   111f4:	mov	r0, r4
   111f8:	bl	12874 <_obstack_newchunk@@Base>
   111fc:	b	11148 <close@plt+0x188>
   11200:	mov	r1, r7
   11204:	mov	r0, r4
   11208:	bl	12874 <_obstack_newchunk@@Base>
   1120c:	b	11168 <close@plt+0x1a8>
   11210:	mov	r1, r7
   11214:	mov	r0, r4
   11218:	bl	12874 <_obstack_newchunk@@Base>
   1121c:	b	11188 <close@plt+0x1c8>
   11220:	cmp	r6, #0
   11224:	moveq	r6, r7
   11228:	beq	1119c <close@plt+0x1dc>
   1122c:	ldr	r2, [r4, #16]
   11230:	ldr	r3, [r4, #12]
   11234:	cmp	r2, r3
   11238:	beq	11250 <close@plt+0x290>
   1123c:	ldr	r3, [r4, #12]
   11240:	add	r2, r3, #1
   11244:	str	r2, [r4, #12]
   11248:	strb	r9, [r3]
   1124c:	b	1119c <close@plt+0x1dc>
   11250:	mov	r1, r7
   11254:	mov	r0, r4
   11258:	bl	12874 <_obstack_newchunk@@Base>
   1125c:	b	1123c <close@plt+0x27c>
   11260:	mov	r1, r7
   11264:	mov	r0, r4
   11268:	bl	12874 <_obstack_newchunk@@Base>
   1126c:	b	111ac <close@plt+0x1ec>
   11270:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11274:	andeq	r8, r2, ip, asr r1
   11278:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1127c:	sub	sp, sp, #44	; 0x2c
   11280:	mov	sl, r0
   11284:	str	r1, [sp, #24]
   11288:	mov	r3, #0
   1128c:	str	r3, [sp, #36]	; 0x24
   11290:	str	r3, [sp, #32]
   11294:	ldr	r0, [pc, #1528]	; 11894 <close@plt+0x8d4>
   11298:	bl	10e94 <getenv@plt>
   1129c:	subs	r3, r0, #0
   112a0:	beq	112d4 <close@plt+0x314>
   112a4:	mov	r1, r3
   112a8:	ldrb	r2, [r3]
   112ac:	ldr	r3, [pc, #1508]	; 11898 <close@plt+0x8d8>
   112b0:	cmp	r2, #0
   112b4:	moveq	r1, r3
   112b8:	str	r1, [sp, #16]
   112bc:	mov	r7, #3
   112c0:	mov	r3, #1
   112c4:	str	r3, [sp, #20]
   112c8:	ldr	fp, [pc, #1484]	; 1189c <close@plt+0x8dc>
   112cc:	mov	r5, #0
   112d0:	b	11388 <close@plt+0x3c8>
   112d4:	ldr	r3, [pc, #1468]	; 11898 <close@plt+0x8d8>
   112d8:	str	r3, [sp, #16]
   112dc:	b	112bc <close@plt+0x2fc>
   112e0:	ldr	r0, [sp, #36]	; 0x24
   112e4:	bl	12418 <close@plt+0x1458>
   112e8:	ldr	r0, [sp, #20]
   112ec:	add	sp, sp, #44	; 0x2c
   112f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   112f4:	ldr	r3, [pc, #1444]	; 118a0 <close@plt+0x8e0>
   112f8:	cmp	fp, r3
   112fc:	beq	112e8 <close@plt+0x328>
   11300:	mov	r0, fp
   11304:	bl	10f0c <strlen@plt>
   11308:	add	r0, r0, #1
   1130c:	mov	r4, fp
   11310:	add	fp, fp, r0
   11314:	b	113b4 <close@plt+0x3f4>
   11318:	mov	r4, r2
   1131c:	b	113c0 <close@plt+0x400>
   11320:	mov	r8, r4
   11324:	b	11424 <close@plt+0x464>
   11328:	mov	r2, r8
   1132c:	b	1148c <close@plt+0x4cc>
   11330:	add	r1, r3, #1
   11334:	sub	r1, r1, r8
   11338:	mov	r0, r8
   1133c:	bl	150b4 <_obstack_memory_used@@Base+0x2678>
   11340:	mov	r9, r0
   11344:	cmp	r4, #0
   11348:	beq	11388 <close@plt+0x3c8>
   1134c:	cmp	r0, #0
   11350:	beq	11848 <close@plt+0x888>
   11354:	ldr	r1, [pc, #1336]	; 11894 <close@plt+0x8d4>
   11358:	mov	r0, r4
   1135c:	bl	12194 <close@plt+0x11d4>
   11360:	cmp	r0, #0
   11364:	beq	114bc <close@plt+0x4fc>
   11368:	cmp	r7, #2
   1136c:	beq	114e4 <close@plt+0x524>
   11370:	cmp	r7, #0
   11374:	bne	114e8 <close@plt+0x528>
   11378:	mov	r0, r4
   1137c:	bl	12418 <close@plt+0x1458>
   11380:	mov	r0, r9
   11384:	bl	12418 <close@plt+0x1458>
   11388:	add	r5, r5, #1
   1138c:	cmp	sl, #0
   11390:	beq	112f4 <close@plt+0x334>
   11394:	mov	r3, sl
   11398:	mov	r2, #10
   1139c:	add	r1, sp, #32
   113a0:	add	r0, sp, #36	; 0x24
   113a4:	bl	10d80 <__getdelim@plt>
   113a8:	cmp	r0, #0
   113ac:	ble	112e0 <close@plt+0x320>
   113b0:	ldr	r4, [sp, #36]	; 0x24
   113b4:	bl	10ef4 <__ctype_b_loc@plt>
   113b8:	mov	r9, r0
   113bc:	ldr	ip, [r0]
   113c0:	mov	r0, r4
   113c4:	mov	r2, r4
   113c8:	ldrb	r3, [r2], #1
   113cc:	lsl	r1, r3, #1
   113d0:	ldrh	r1, [ip, r1]
   113d4:	tst	r1, #8192	; 0x2000
   113d8:	bne	11318 <close@plt+0x358>
   113dc:	cmp	r3, #35	; 0x23
   113e0:	cmpne	r3, #0
   113e4:	moveq	r6, #1
   113e8:	movne	r6, #0
   113ec:	beq	11388 <close@plt+0x3c8>
   113f0:	cmp	r3, #0
   113f4:	beq	11320 <close@plt+0x360>
   113f8:	mov	r8, r4
   113fc:	ldrb	r2, [r8, #1]!
   11400:	lsl	r3, r2, #1
   11404:	ldrh	r3, [ip, r3]
   11408:	lsr	r3, r3, #13
   1140c:	eor	r3, r3, #1
   11410:	cmp	r2, #0
   11414:	moveq	r3, #0
   11418:	andne	r3, r3, #1
   1141c:	cmp	r3, #0
   11420:	bne	113fc <close@plt+0x43c>
   11424:	sub	r1, r8, r4
   11428:	bl	150b4 <_obstack_memory_used@@Base+0x2678>
   1142c:	mov	r4, r0
   11430:	ldrb	r3, [r8]
   11434:	cmp	r3, #0
   11438:	beq	11840 <close@plt+0x880>
   1143c:	ldr	r1, [r9]
   11440:	ldrb	r3, [r8, #1]!
   11444:	lsl	r2, r3, #1
   11448:	ldrh	r2, [r1, r2]
   1144c:	tst	r2, #8192	; 0x2000
   11450:	bne	11440 <close@plt+0x480>
   11454:	cmp	r3, #35	; 0x23
   11458:	cmpne	r3, #0
   1145c:	moveq	r2, #1
   11460:	movne	r2, #0
   11464:	str	r2, [sp, #12]
   11468:	beq	11840 <close@plt+0x880>
   1146c:	cmp	r3, #0
   11470:	cmpne	r3, #35	; 0x23
   11474:	beq	11328 <close@plt+0x368>
   11478:	mov	r2, r8
   1147c:	ldrb	r3, [r2, #1]!
   11480:	cmp	r3, #0
   11484:	cmpne	r3, #35	; 0x23
   11488:	bne	1147c <close@plt+0x4bc>
   1148c:	sub	r3, r2, #1
   11490:	ldrb	r2, [r2, #-1]
   11494:	lsl	r2, r2, #1
   11498:	ldrh	r2, [r1, r2]
   1149c:	tst	r2, #8192	; 0x2000
   114a0:	beq	11330 <close@plt+0x370>
   114a4:	ldrb	r2, [r3, #-1]!
   114a8:	lsl	r2, r2, #1
   114ac:	ldrh	r2, [r1, r2]
   114b0:	tst	r2, #8192	; 0x2000
   114b4:	bne	114a4 <close@plt+0x4e4>
   114b8:	b	11330 <close@plt+0x370>
   114bc:	mov	r2, #0
   114c0:	ldr	r1, [sp, #16]
   114c4:	mov	r0, r9
   114c8:	bl	10e7c <fnmatch@plt>
   114cc:	cmp	r0, #0
   114d0:	moveq	r7, #2
   114d4:	beq	11378 <close@plt+0x3b8>
   114d8:	cmp	r7, #2
   114dc:	movne	r7, #0
   114e0:	b	11378 <close@plt+0x3b8>
   114e4:	mov	r7, #1
   114e8:	ldrb	r3, [r4]
   114ec:	cmp	r3, #46	; 0x2e
   114f0:	beq	115d8 <close@plt+0x618>
   114f4:	cmp	r3, #42	; 0x2a
   114f8:	beq	11698 <close@plt+0x6d8>
   114fc:	ldr	r1, [pc, #928]	; 118a4 <close@plt+0x8e4>
   11500:	mov	r0, r4
   11504:	bl	12194 <close@plt+0x11d4>
   11508:	cmp	r0, #0
   1150c:	beq	11378 <close@plt+0x3b8>
   11510:	ldr	r1, [pc, #912]	; 118a8 <close@plt+0x8e8>
   11514:	mov	r0, r4
   11518:	bl	12194 <close@plt+0x11d4>
   1151c:	cmp	r0, #0
   11520:	beq	11378 <close@plt+0x3b8>
   11524:	ldr	r1, [pc, #896]	; 118ac <close@plt+0x8ec>
   11528:	mov	r0, r4
   1152c:	bl	12194 <close@plt+0x11d4>
   11530:	cmp	r0, #0
   11534:	beq	11378 <close@plt+0x3b8>
   11538:	ldr	r3, [pc, #880]	; 118b0 <close@plt+0x8f0>
   1153c:	ldr	r6, [pc, #880]	; 118b4 <close@plt+0x8f4>
   11540:	mov	r8, #0
   11544:	str	r5, [sp, #28]
   11548:	mov	r5, r3
   1154c:	mov	r1, r6
   11550:	mov	r0, r4
   11554:	bl	12194 <close@plt+0x11d4>
   11558:	cmp	r0, #0
   1155c:	beq	11720 <close@plt+0x760>
   11560:	add	r8, r8, #1
   11564:	ldr	r6, [r5, #4]!
   11568:	cmp	r6, #0
   1156c:	bne	1154c <close@plt+0x58c>
   11570:	ldr	r5, [sp, #28]
   11574:	sub	r3, r7, #1
   11578:	cmp	r3, #1
   1157c:	bhi	11378 <close@plt+0x3b8>
   11580:	mov	r2, #5
   11584:	ldr	r1, [pc, #812]	; 118b8 <close@plt+0x8f8>
   11588:	mov	r0, #0
   1158c:	bl	10df8 <dcgettext@plt>
   11590:	mov	r6, r0
   11594:	ldr	r3, [sp, #24]
   11598:	cmp	r3, #0
   1159c:	beq	11828 <close@plt+0x868>
   115a0:	mov	r2, r3
   115a4:	mov	r1, #3
   115a8:	mov	r0, #0
   115ac:	bl	14458 <_obstack_memory_used@@Base+0x1a1c>
   115b0:	mov	r3, r0
   115b4:	str	r4, [sp, #4]
   115b8:	str	r5, [sp]
   115bc:	mov	r2, r6
   115c0:	mov	r1, #0
   115c4:	mov	r0, r1
   115c8:	bl	10e70 <error@plt>
   115cc:	ldr	r3, [sp, #12]
   115d0:	str	r3, [sp, #20]
   115d4:	b	11378 <close@plt+0x3b8>
   115d8:	ldr	r3, [pc, #732]	; 118bc <close@plt+0x8fc>
   115dc:	ldr	r2, [r3, #16]
   115e0:	ldr	r3, [r3, #12]
   115e4:	cmp	r2, r3
   115e8:	beq	11668 <close@plt+0x6a8>
   115ec:	ldr	r6, [pc, #712]	; 118bc <close@plt+0x8fc>
   115f0:	ldr	r3, [r6, #12]
   115f4:	add	r2, r3, #1
   115f8:	str	r2, [r6, #12]
   115fc:	mov	r2, #42	; 0x2a
   11600:	strb	r2, [r3]
   11604:	mov	r0, r4
   11608:	bl	110f4 <close@plt+0x134>
   1160c:	ldr	r2, [r6, #16]
   11610:	ldr	r3, [r6, #12]
   11614:	cmp	r2, r3
   11618:	beq	11678 <close@plt+0x6b8>
   1161c:	ldr	r6, [pc, #664]	; 118bc <close@plt+0x8fc>
   11620:	ldr	r3, [r6, #12]
   11624:	add	r2, r3, #1
   11628:	str	r2, [r6, #12]
   1162c:	mov	r2, #61	; 0x3d
   11630:	strb	r2, [r3]
   11634:	mov	r0, r9
   11638:	bl	110f4 <close@plt+0x134>
   1163c:	ldr	r2, [r6, #16]
   11640:	ldr	r3, [r6, #12]
   11644:	cmp	r2, r3
   11648:	beq	11688 <close@plt+0x6c8>
   1164c:	ldr	r2, [pc, #616]	; 118bc <close@plt+0x8fc>
   11650:	ldr	r3, [r2, #12]
   11654:	add	r1, r3, #1
   11658:	str	r1, [r2, #12]
   1165c:	mov	r2, #58	; 0x3a
   11660:	strb	r2, [r3]
   11664:	b	11378 <close@plt+0x3b8>
   11668:	mov	r1, #1
   1166c:	ldr	r0, [pc, #584]	; 118bc <close@plt+0x8fc>
   11670:	bl	12874 <_obstack_newchunk@@Base>
   11674:	b	115ec <close@plt+0x62c>
   11678:	mov	r1, #1
   1167c:	mov	r0, r6
   11680:	bl	12874 <_obstack_newchunk@@Base>
   11684:	b	1161c <close@plt+0x65c>
   11688:	mov	r1, #1
   1168c:	mov	r0, r6
   11690:	bl	12874 <_obstack_newchunk@@Base>
   11694:	b	1164c <close@plt+0x68c>
   11698:	mov	r0, r4
   1169c:	bl	110f4 <close@plt+0x134>
   116a0:	ldr	r3, [pc, #532]	; 118bc <close@plt+0x8fc>
   116a4:	ldr	r2, [r3, #16]
   116a8:	ldr	r3, [r3, #12]
   116ac:	cmp	r2, r3
   116b0:	beq	11700 <close@plt+0x740>
   116b4:	ldr	r6, [pc, #512]	; 118bc <close@plt+0x8fc>
   116b8:	ldr	r3, [r6, #12]
   116bc:	add	r2, r3, #1
   116c0:	str	r2, [r6, #12]
   116c4:	mov	r2, #61	; 0x3d
   116c8:	strb	r2, [r3]
   116cc:	mov	r0, r9
   116d0:	bl	110f4 <close@plt+0x134>
   116d4:	ldr	r2, [r6, #16]
   116d8:	ldr	r3, [r6, #12]
   116dc:	cmp	r2, r3
   116e0:	beq	11710 <close@plt+0x750>
   116e4:	ldr	r2, [pc, #464]	; 118bc <close@plt+0x8fc>
   116e8:	ldr	r3, [r2, #12]
   116ec:	add	r1, r3, #1
   116f0:	str	r1, [r2, #12]
   116f4:	mov	r2, #58	; 0x3a
   116f8:	strb	r2, [r3]
   116fc:	b	11378 <close@plt+0x3b8>
   11700:	mov	r1, #1
   11704:	ldr	r0, [pc, #432]	; 118bc <close@plt+0x8fc>
   11708:	bl	12874 <_obstack_newchunk@@Base>
   1170c:	b	116b4 <close@plt+0x6f4>
   11710:	mov	r1, #1
   11714:	mov	r0, r6
   11718:	bl	12874 <_obstack_newchunk@@Base>
   1171c:	b	116e4 <close@plt+0x724>
   11720:	ldr	r5, [sp, #28]
   11724:	cmp	r6, #0
   11728:	beq	11574 <close@plt+0x5b4>
   1172c:	ldr	r3, [pc, #392]	; 118bc <close@plt+0x8fc>
   11730:	ldr	r2, [r3, #16]
   11734:	ldr	r3, [r3, #12]
   11738:	cmp	r2, r3
   1173c:	beq	117e8 <close@plt+0x828>
   11740:	ldr	r3, [pc, #372]	; 118bc <close@plt+0x8fc>
   11744:	ldr	r1, [r3, #12]
   11748:	add	r2, r1, #1
   1174c:	str	r2, [r3, #12]
   11750:	ldr	r2, [pc, #360]	; 118c0 <close@plt+0x900>
   11754:	add	r8, r2, r8, lsl #2
   11758:	ldr	r6, [r8, #-3720]	; 0xfffff178
   1175c:	ldrb	r2, [r6]
   11760:	strb	r2, [r1]
   11764:	ldr	r2, [r3, #16]
   11768:	ldr	r3, [r3, #12]
   1176c:	cmp	r2, r3
   11770:	beq	117f8 <close@plt+0x838>
   11774:	ldr	r3, [pc, #320]	; 118bc <close@plt+0x8fc>
   11778:	ldr	r2, [r3, #12]
   1177c:	add	r1, r2, #1
   11780:	str	r1, [r3, #12]
   11784:	ldrb	r1, [r6, #1]
   11788:	strb	r1, [r2]
   1178c:	ldr	r2, [r3, #16]
   11790:	ldr	r3, [r3, #12]
   11794:	cmp	r2, r3
   11798:	beq	11808 <close@plt+0x848>
   1179c:	ldr	r6, [pc, #280]	; 118bc <close@plt+0x8fc>
   117a0:	ldr	r3, [r6, #12]
   117a4:	add	r2, r3, #1
   117a8:	str	r2, [r6, #12]
   117ac:	mov	r2, #61	; 0x3d
   117b0:	strb	r2, [r3]
   117b4:	mov	r0, r9
   117b8:	bl	110f4 <close@plt+0x134>
   117bc:	ldr	r2, [r6, #16]
   117c0:	ldr	r3, [r6, #12]
   117c4:	cmp	r2, r3
   117c8:	beq	11818 <close@plt+0x858>
   117cc:	ldr	r2, [pc, #232]	; 118bc <close@plt+0x8fc>
   117d0:	ldr	r3, [r2, #12]
   117d4:	add	r1, r3, #1
   117d8:	str	r1, [r2, #12]
   117dc:	mov	r2, #58	; 0x3a
   117e0:	strb	r2, [r3]
   117e4:	b	11378 <close@plt+0x3b8>
   117e8:	mov	r1, #1
   117ec:	ldr	r0, [pc, #200]	; 118bc <close@plt+0x8fc>
   117f0:	bl	12874 <_obstack_newchunk@@Base>
   117f4:	b	11740 <close@plt+0x780>
   117f8:	mov	r1, #1
   117fc:	ldr	r0, [pc, #184]	; 118bc <close@plt+0x8fc>
   11800:	bl	12874 <_obstack_newchunk@@Base>
   11804:	b	11774 <close@plt+0x7b4>
   11808:	mov	r1, #1
   1180c:	ldr	r0, [pc, #168]	; 118bc <close@plt+0x8fc>
   11810:	bl	12874 <_obstack_newchunk@@Base>
   11814:	b	1179c <close@plt+0x7dc>
   11818:	mov	r1, #1
   1181c:	mov	r0, r6
   11820:	bl	12874 <_obstack_newchunk@@Base>
   11824:	b	117cc <close@plt+0x80c>
   11828:	mov	r2, #5
   1182c:	ldr	r1, [pc, #144]	; 118c4 <close@plt+0x904>
   11830:	mov	r0, #0
   11834:	bl	10df8 <dcgettext@plt>
   11838:	mov	r3, r0
   1183c:	b	115b4 <close@plt+0x5f4>
   11840:	cmp	r4, #0
   11844:	beq	11388 <close@plt+0x3c8>
   11848:	mov	r2, #5
   1184c:	ldr	r1, [pc, #116]	; 118c8 <close@plt+0x908>
   11850:	mov	r0, #0
   11854:	bl	10df8 <dcgettext@plt>
   11858:	mov	r8, r0
   1185c:	ldr	r2, [sp, #24]
   11860:	mov	r1, #3
   11864:	mov	r0, #0
   11868:	bl	14458 <_obstack_memory_used@@Base+0x1a1c>
   1186c:	str	r5, [sp]
   11870:	mov	r3, r0
   11874:	mov	r2, r8
   11878:	mov	r1, #0
   1187c:	mov	r0, r1
   11880:	bl	10e70 <error@plt>
   11884:	mov	r0, r4
   11888:	bl	12418 <close@plt+0x1458>
   1188c:	str	r6, [sp, #20]
   11890:	b	11388 <close@plt+0x3c8>
   11894:	andeq	r6, r1, r8, lsl ip
   11898:	andeq	r6, r1, r8, lsl #24
   1189c:	andeq	r5, r1, r8, asr #18
   118a0:	andeq	r6, r1, lr, lsl sl
   118a4:	andeq	r6, r1, ip, asr #24
   118a8:	andeq	r6, r1, r4, asr ip
   118ac:	andeq	r6, r1, ip, asr ip
   118b0:	andeq	r6, r1, r0, lsr #20
   118b4:	andeq	r6, r1, r0, lsl ip
   118b8:	andeq	r6, r1, r8, ror #24
   118bc:	andeq	r8, r2, ip, asr r1
   118c0:	andeq	r7, r1, r0, asr #18
   118c4:	andeq	r6, r1, r8, lsl #25
   118c8:	andeq	r6, r1, r0, lsr #24
   118cc:	push	{lr}		; (str lr, [sp, #-4]!)
   118d0:	sub	sp, sp, #60	; 0x3c
   118d4:	subs	r6, r0, #0
   118d8:	beq	11914 <close@plt+0x954>
   118dc:	ldr	r3, [pc, #704]	; 11ba4 <close@plt+0xbe4>
   118e0:	ldr	r4, [r3]
   118e4:	mov	r2, #5
   118e8:	ldr	r1, [pc, #696]	; 11ba8 <close@plt+0xbe8>
   118ec:	mov	r0, #0
   118f0:	bl	10df8 <dcgettext@plt>
   118f4:	ldr	r3, [pc, #688]	; 11bac <close@plt+0xbec>
   118f8:	ldr	r3, [r3]
   118fc:	mov	r2, r0
   11900:	mov	r1, #1
   11904:	mov	r0, r4
   11908:	bl	10f54 <__fprintf_chk@plt>
   1190c:	mov	r0, r6
   11910:	bl	10f00 <exit@plt>
   11914:	mov	r2, #5
   11918:	ldr	r1, [pc, #656]	; 11bb0 <close@plt+0xbf0>
   1191c:	mov	r0, #0
   11920:	bl	10df8 <dcgettext@plt>
   11924:	ldr	r3, [pc, #640]	; 11bac <close@plt+0xbec>
   11928:	ldr	r2, [r3]
   1192c:	mov	r1, r0
   11930:	mov	r0, #1
   11934:	bl	10f3c <__printf_chk@plt>
   11938:	mov	r2, #5
   1193c:	ldr	r1, [pc, #624]	; 11bb4 <close@plt+0xbf4>
   11940:	mov	r0, #0
   11944:	bl	10df8 <dcgettext@plt>
   11948:	ldr	r4, [pc, #616]	; 11bb8 <close@plt+0xbf8>
   1194c:	ldr	r1, [r4]
   11950:	bl	10d68 <fputs_unlocked@plt>
   11954:	mov	r2, #5
   11958:	ldr	r1, [pc, #604]	; 11bbc <close@plt+0xbfc>
   1195c:	mov	r0, #0
   11960:	bl	10df8 <dcgettext@plt>
   11964:	ldr	r1, [r4]
   11968:	bl	10d68 <fputs_unlocked@plt>
   1196c:	mov	r2, #5
   11970:	ldr	r1, [pc, #584]	; 11bc0 <close@plt+0xc00>
   11974:	mov	r0, #0
   11978:	bl	10df8 <dcgettext@plt>
   1197c:	ldr	r1, [r4]
   11980:	bl	10d68 <fputs_unlocked@plt>
   11984:	mov	r2, #5
   11988:	ldr	r1, [pc, #564]	; 11bc4 <close@plt+0xc04>
   1198c:	mov	r0, #0
   11990:	bl	10df8 <dcgettext@plt>
   11994:	ldr	r1, [r4]
   11998:	bl	10d68 <fputs_unlocked@plt>
   1199c:	mov	ip, sp
   119a0:	ldr	lr, [pc, #544]	; 11bc8 <close@plt+0xc08>
   119a4:	ldm	lr!, {r0, r1, r2, r3}
   119a8:	stmia	ip!, {r0, r1, r2, r3}
   119ac:	ldm	lr!, {r0, r1, r2, r3}
   119b0:	stmia	ip!, {r0, r1, r2, r3}
   119b4:	ldm	lr!, {r0, r1, r2, r3}
   119b8:	stmia	ip!, {r0, r1, r2, r3}
   119bc:	ldm	lr, {r0, r1}
   119c0:	stm	ip, {r0, r1}
   119c4:	ldr	r1, [sp]
   119c8:	cmp	r1, #0
   119cc:	moveq	r4, sp
   119d0:	beq	119f8 <close@plt+0xa38>
   119d4:	mov	r4, sp
   119d8:	ldr	r5, [pc, #492]	; 11bcc <close@plt+0xc0c>
   119dc:	mov	r0, r5
   119e0:	bl	10d8c <strcmp@plt>
   119e4:	cmp	r0, #0
   119e8:	beq	119f8 <close@plt+0xa38>
   119ec:	ldr	r1, [r4, #8]!
   119f0:	cmp	r1, #0
   119f4:	bne	119dc <close@plt+0xa1c>
   119f8:	ldr	r4, [r4, #4]
   119fc:	cmp	r4, #0
   11a00:	beq	11b14 <close@plt+0xb54>
   11a04:	mov	r2, #5
   11a08:	ldr	r1, [pc, #448]	; 11bd0 <close@plt+0xc10>
   11a0c:	mov	r0, #0
   11a10:	bl	10df8 <dcgettext@plt>
   11a14:	ldr	r3, [pc, #440]	; 11bd4 <close@plt+0xc14>
   11a18:	ldr	r2, [pc, #440]	; 11bd8 <close@plt+0xc18>
   11a1c:	mov	r1, r0
   11a20:	mov	r0, #1
   11a24:	bl	10f3c <__printf_chk@plt>
   11a28:	mov	r1, #0
   11a2c:	mov	r0, #5
   11a30:	bl	10f78 <setlocale@plt>
   11a34:	cmp	r0, #0
   11a38:	beq	11a50 <close@plt+0xa90>
   11a3c:	mov	r2, #3
   11a40:	ldr	r1, [pc, #404]	; 11bdc <close@plt+0xc1c>
   11a44:	bl	10fa8 <strncmp@plt>
   11a48:	cmp	r0, #0
   11a4c:	bne	11ab0 <close@plt+0xaf0>
   11a50:	mov	r2, #5
   11a54:	ldr	r1, [pc, #388]	; 11be0 <close@plt+0xc20>
   11a58:	mov	r0, #0
   11a5c:	bl	10df8 <dcgettext@plt>
   11a60:	ldr	r5, [pc, #356]	; 11bcc <close@plt+0xc0c>
   11a64:	mov	r3, r5
   11a68:	ldr	r2, [pc, #356]	; 11bd4 <close@plt+0xc14>
   11a6c:	mov	r1, r0
   11a70:	mov	r0, #1
   11a74:	bl	10f3c <__printf_chk@plt>
   11a78:	mov	r2, #5
   11a7c:	ldr	r1, [pc, #352]	; 11be4 <close@plt+0xc24>
   11a80:	mov	r0, #0
   11a84:	bl	10df8 <dcgettext@plt>
   11a88:	mov	r1, r0
   11a8c:	ldr	r2, [pc, #340]	; 11be8 <close@plt+0xc28>
   11a90:	ldr	r3, [pc, #340]	; 11bec <close@plt+0xc2c>
   11a94:	cmp	r4, r5
   11a98:	movne	r3, r2
   11a9c:	mov	r2, r4
   11aa0:	mov	r0, #1
   11aa4:	bl	10f3c <__printf_chk@plt>
   11aa8:	b	1190c <close@plt+0x94c>
   11aac:	ldr	r4, [pc, #280]	; 11bcc <close@plt+0xc0c>
   11ab0:	mov	r2, #5
   11ab4:	ldr	r1, [pc, #308]	; 11bf0 <close@plt+0xc30>
   11ab8:	mov	r0, #0
   11abc:	bl	10df8 <dcgettext@plt>
   11ac0:	ldr	r3, [pc, #240]	; 11bb8 <close@plt+0xbf8>
   11ac4:	ldr	r1, [r3]
   11ac8:	bl	10d68 <fputs_unlocked@plt>
   11acc:	b	11a50 <close@plt+0xa90>
   11ad0:	mov	r2, #5
   11ad4:	ldr	r1, [pc, #260]	; 11be0 <close@plt+0xc20>
   11ad8:	mov	r0, #0
   11adc:	bl	10df8 <dcgettext@plt>
   11ae0:	ldr	r4, [pc, #228]	; 11bcc <close@plt+0xc0c>
   11ae4:	mov	r3, r4
   11ae8:	ldr	r2, [pc, #228]	; 11bd4 <close@plt+0xc14>
   11aec:	mov	r1, r0
   11af0:	mov	r0, #1
   11af4:	bl	10f3c <__printf_chk@plt>
   11af8:	mov	r2, #5
   11afc:	ldr	r1, [pc, #224]	; 11be4 <close@plt+0xc24>
   11b00:	mov	r0, #0
   11b04:	bl	10df8 <dcgettext@plt>
   11b08:	mov	r1, r0
   11b0c:	ldr	r3, [pc, #216]	; 11bec <close@plt+0xc2c>
   11b10:	b	11a9c <close@plt+0xadc>
   11b14:	mov	r2, #5
   11b18:	ldr	r1, [pc, #176]	; 11bd0 <close@plt+0xc10>
   11b1c:	mov	r0, #0
   11b20:	bl	10df8 <dcgettext@plt>
   11b24:	ldr	r3, [pc, #168]	; 11bd4 <close@plt+0xc14>
   11b28:	ldr	r2, [pc, #168]	; 11bd8 <close@plt+0xc18>
   11b2c:	mov	r1, r0
   11b30:	mov	r0, #1
   11b34:	bl	10f3c <__printf_chk@plt>
   11b38:	mov	r1, #0
   11b3c:	mov	r0, #5
   11b40:	bl	10f78 <setlocale@plt>
   11b44:	cmp	r0, #0
   11b48:	beq	11ad0 <close@plt+0xb10>
   11b4c:	mov	r2, #3
   11b50:	ldr	r1, [pc, #132]	; 11bdc <close@plt+0xc1c>
   11b54:	bl	10fa8 <strncmp@plt>
   11b58:	cmp	r0, #0
   11b5c:	bne	11aac <close@plt+0xaec>
   11b60:	mov	r2, #5
   11b64:	ldr	r1, [pc, #116]	; 11be0 <close@plt+0xc20>
   11b68:	mov	r0, #0
   11b6c:	bl	10df8 <dcgettext@plt>
   11b70:	ldr	r4, [pc, #84]	; 11bcc <close@plt+0xc0c>
   11b74:	mov	r3, r4
   11b78:	ldr	r2, [pc, #84]	; 11bd4 <close@plt+0xc14>
   11b7c:	mov	r1, r0
   11b80:	mov	r0, #1
   11b84:	bl	10f3c <__printf_chk@plt>
   11b88:	mov	r2, #5
   11b8c:	ldr	r1, [pc, #80]	; 11be4 <close@plt+0xc24>
   11b90:	mov	r0, #0
   11b94:	bl	10df8 <dcgettext@plt>
   11b98:	mov	r1, r0
   11b9c:	ldr	r3, [pc, #72]	; 11bec <close@plt+0xc2c>
   11ba0:	b	11a9c <close@plt+0xadc>
   11ba4:	andeq	r8, r2, r8, asr #2
   11ba8:	andeq	r6, r1, r0, lsr #25
   11bac:	muleq	r2, r0, r1
   11bb0:	andeq	r6, r1, r8, asr #25
   11bb4:	andeq	r6, r1, r8, ror #25
   11bb8:	andeq	r8, r2, r4, asr r1
   11bbc:	strdeq	r6, [r1], -ip
   11bc0:	andeq	r6, r1, ip, lsr #28
   11bc4:	andeq	r6, r1, r4, ror #28
   11bc8:	andeq	r6, r1, r0, asr fp
   11bcc:	muleq	r1, r4, ip
   11bd0:	andeq	r6, r1, r4, asr #30
   11bd4:	andeq	r6, r1, ip, asr pc
   11bd8:	andeq	r6, r1, r4, lsl #31
   11bdc:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11be0:	andeq	r6, r1, r0, ror #31
   11be4:	strdeq	r6, [r1], -ip
   11be8:	andeq	r7, r1, r4, asr #32
   11bec:			; <UNDEFINED> instruction: 0x000171b0
   11bf0:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   11bf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bf8:	sub	sp, sp, #12
   11bfc:	mov	r6, r0
   11c00:	mov	r4, r1
   11c04:	ldr	r0, [r1]
   11c08:	bl	12a70 <_obstack_memory_used@@Base+0x34>
   11c0c:	ldr	r1, [pc, #1080]	; 1204c <close@plt+0x108c>
   11c10:	mov	r0, #6
   11c14:	bl	10f78 <setlocale@plt>
   11c18:	ldr	r5, [pc, #1072]	; 12050 <close@plt+0x1090>
   11c1c:	ldr	r1, [pc, #1072]	; 12054 <close@plt+0x1094>
   11c20:	mov	r0, r5
   11c24:	bl	10f9c <bindtextdomain@plt>
   11c28:	mov	r0, r5
   11c2c:	bl	10e1c <textdomain@plt>
   11c30:	ldr	r0, [pc, #1056]	; 12058 <close@plt+0x1098>
   11c34:	bl	15924 <_obstack_memory_used@@Base+0x2ee8>
   11c38:	mov	r9, #0
   11c3c:	mov	sl, #2
   11c40:	ldr	r8, [pc, #1044]	; 1205c <close@plt+0x109c>
   11c44:	ldr	r7, [pc, #1044]	; 12060 <close@plt+0x10a0>
   11c48:	mov	r5, r9
   11c4c:	mov	fp, #1
   11c50:	str	r5, [sp]
   11c54:	mov	r3, r8
   11c58:	mov	r2, r7
   11c5c:	mov	r1, r4
   11c60:	mov	r0, r6
   11c64:	bl	10ee8 <getopt_long@plt>
   11c68:	cmn	r0, #1
   11c6c:	beq	11cf8 <close@plt+0xd38>
   11c70:	cmp	r0, #98	; 0x62
   11c74:	beq	11cf0 <close@plt+0xd30>
   11c78:	bgt	11c94 <close@plt+0xcd4>
   11c7c:	cmn	r0, #3
   11c80:	beq	11cb4 <close@plt+0xcf4>
   11c84:	cmn	r0, #2
   11c88:	bne	11ce8 <close@plt+0xd28>
   11c8c:	mov	r0, #0
   11c90:	bl	118cc <close@plt+0x90c>
   11c94:	cmp	r0, #99	; 0x63
   11c98:	beq	11cac <close@plt+0xcec>
   11c9c:	cmp	r0, #112	; 0x70
   11ca0:	bne	11ce8 <close@plt+0xd28>
   11ca4:	mov	r9, fp
   11ca8:	b	11c50 <close@plt+0xc90>
   11cac:	mov	sl, fp
   11cb0:	b	11c50 <close@plt+0xc90>
   11cb4:	mov	r4, #0
   11cb8:	str	r4, [sp, #4]
   11cbc:	ldr	r3, [pc, #928]	; 12064 <close@plt+0x10a4>
   11cc0:	str	r3, [sp]
   11cc4:	ldr	r3, [pc, #924]	; 12068 <close@plt+0x10a8>
   11cc8:	ldr	r3, [r3]
   11ccc:	ldr	r2, [pc, #920]	; 1206c <close@plt+0x10ac>
   11cd0:	ldr	r1, [pc, #920]	; 12070 <close@plt+0x10b0>
   11cd4:	ldr	r0, [pc, #920]	; 12074 <close@plt+0x10b4>
   11cd8:	ldr	r0, [r0]
   11cdc:	bl	14a8c <_obstack_memory_used@@Base+0x2050>
   11ce0:	mov	r0, r4
   11ce4:	bl	10f00 <exit@plt>
   11ce8:	mov	r0, #1
   11cec:	bl	118cc <close@plt+0x90c>
   11cf0:	mov	sl, r5
   11cf4:	b	11c50 <close@plt+0xc90>
   11cf8:	ldr	r3, [pc, #888]	; 12078 <close@plt+0x10b8>
   11cfc:	ldr	r5, [r3]
   11d00:	sub	r6, r6, r5
   11d04:	add	r7, r4, r5, lsl #2
   11d08:	cmp	sl, #2
   11d0c:	moveq	r3, #0
   11d10:	andne	r3, r9, #1
   11d14:	cmp	r3, #0
   11d18:	bne	11e28 <close@plt+0xe68>
   11d1c:	eor	r3, r9, #1
   11d20:	uxtb	r3, r3
   11d24:	cmp	r6, r3
   11d28:	bgt	11e50 <close@plt+0xe90>
   11d2c:	cmp	r9, #0
   11d30:	bne	11ec0 <close@plt+0xf00>
   11d34:	cmp	sl, #2
   11d38:	beq	11ed0 <close@plt+0xf10>
   11d3c:	ldr	r3, [pc, #824]	; 1207c <close@plt+0x10bc>
   11d40:	str	r3, [sp]
   11d44:	ldr	r3, [pc, #820]	; 12080 <close@plt+0x10c0>
   11d48:	mov	r2, #0
   11d4c:	mov	r1, r2
   11d50:	ldr	r0, [pc, #812]	; 12084 <close@plt+0x10c4>
   11d54:	bl	12824 <_obstack_begin@@Base>
   11d58:	cmp	r6, #0
   11d5c:	bne	11f40 <close@plt+0xf80>
   11d60:	mov	r1, #0
   11d64:	mov	r0, r1
   11d68:	bl	11278 <close@plt+0x2b8>
   11d6c:	mov	r9, r0
   11d70:	cmp	r9, #0
   11d74:	beq	11eb0 <close@plt+0xef0>
   11d78:	ldr	r2, [pc, #772]	; 12084 <close@plt+0x10c4>
   11d7c:	ldr	r3, [r2, #12]
   11d80:	ldr	r4, [r2, #8]
   11d84:	sub	r5, r3, r4
   11d88:	cmp	r3, r4
   11d8c:	moveq	r1, r2
   11d90:	ldrbeq	r2, [r1, #40]	; 0x28
   11d94:	orreq	r2, r2, #2
   11d98:	strbeq	r2, [r1, #40]	; 0x28
   11d9c:	ldr	r1, [pc, #736]	; 12084 <close@plt+0x10c4>
   11da0:	ldr	r2, [r1, #24]
   11da4:	add	r3, r3, r2
   11da8:	bic	r3, r3, r2
   11dac:	str	r3, [r1, #12]
   11db0:	ldr	r2, [r1, #4]
   11db4:	ldr	r1, [r1, #16]
   11db8:	sub	r3, r3, r2
   11dbc:	sub	r2, r1, r2
   11dc0:	cmp	r3, r2
   11dc4:	ldrhi	r3, [pc, #696]	; 12084 <close@plt+0x10c4>
   11dc8:	strhi	r1, [r3, #12]
   11dcc:	ldr	r3, [pc, #688]	; 12084 <close@plt+0x10c4>
   11dd0:	ldr	r2, [r3, #12]
   11dd4:	str	r2, [r3, #8]
   11dd8:	ldr	r3, [pc, #680]	; 12088 <close@plt+0x10c8>
   11ddc:	ldr	r6, [pc, #680]	; 1208c <close@plt+0x10cc>
   11de0:	cmp	sl, #0
   11de4:	movne	r6, r3
   11de8:	ldr	r7, [pc, #644]	; 12074 <close@plt+0x10b4>
   11dec:	ldr	r1, [r7]
   11df0:	ldr	r3, [pc, #664]	; 12090 <close@plt+0x10d0>
   11df4:	ldr	r0, [pc, #664]	; 12094 <close@plt+0x10d4>
   11df8:	cmp	sl, #0
   11dfc:	movne	r0, r3
   11e00:	bl	10d68 <fputs_unlocked@plt>
   11e04:	ldr	r3, [r7]
   11e08:	mov	r2, r5
   11e0c:	mov	r1, #1
   11e10:	mov	r0, r4
   11e14:	bl	10dd4 <fwrite_unlocked@plt>
   11e18:	ldr	r1, [r7]
   11e1c:	mov	r0, r6
   11e20:	bl	10d68 <fputs_unlocked@plt>
   11e24:	b	11eb0 <close@plt+0xef0>
   11e28:	mov	r2, #5
   11e2c:	ldr	r1, [pc, #612]	; 12098 <close@plt+0x10d8>
   11e30:	mov	r0, #0
   11e34:	bl	10df8 <dcgettext@plt>
   11e38:	mov	r2, r0
   11e3c:	mov	r1, #0
   11e40:	mov	r0, r1
   11e44:	bl	10e70 <error@plt>
   11e48:	mov	r0, #1
   11e4c:	bl	118cc <close@plt+0x90c>
   11e50:	mov	r2, #5
   11e54:	ldr	r1, [pc, #576]	; 1209c <close@plt+0x10dc>
   11e58:	mov	r0, #0
   11e5c:	bl	10df8 <dcgettext@plt>
   11e60:	mov	r6, r0
   11e64:	cmp	r9, #0
   11e68:	bne	11ffc <close@plt+0x103c>
   11e6c:	ldr	r0, [r7, #4]
   11e70:	bl	145c0 <_obstack_memory_used@@Base+0x1b84>
   11e74:	mov	r3, r0
   11e78:	mov	r2, r6
   11e7c:	mov	r1, #0
   11e80:	mov	r0, r1
   11e84:	bl	10e70 <error@plt>
   11e88:	b	12044 <close@plt+0x1084>
   11e8c:	mov	r0, r4
   11e90:	bl	10ea0 <puts@plt>
   11e94:	mov	r0, r4
   11e98:	bl	10f0c <strlen@plt>
   11e9c:	add	r0, r0, #1
   11ea0:	add	r4, r4, r0
   11ea4:	sub	r3, r4, r6
   11ea8:	cmp	r3, r5
   11eac:	bls	11e8c <close@plt+0xecc>
   11eb0:	eor	r0, r9, #1
   11eb4:	uxtb	r0, r0
   11eb8:	add	sp, sp, #12
   11ebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ec0:	ldr	r4, [pc, #472]	; 120a0 <close@plt+0x10e0>
   11ec4:	mov	r6, r4
   11ec8:	ldr	r5, [pc, #468]	; 120a4 <close@plt+0x10e4>
   11ecc:	b	11ea4 <close@plt+0xee4>
   11ed0:	ldr	r0, [pc, #464]	; 120a8 <close@plt+0x10e8>
   11ed4:	bl	10e94 <getenv@plt>
   11ed8:	cmp	r0, #0
   11edc:	beq	11eec <close@plt+0xf2c>
   11ee0:	ldrb	r3, [r0]
   11ee4:	cmp	r3, #0
   11ee8:	bne	11f0c <close@plt+0xf4c>
   11eec:	mov	r2, #5
   11ef0:	ldr	r1, [pc, #436]	; 120ac <close@plt+0x10ec>
   11ef4:	mov	r0, #0
   11ef8:	bl	10df8 <dcgettext@plt>
   11efc:	mov	r2, r0
   11f00:	mov	r1, #0
   11f04:	mov	r0, #1
   11f08:	bl	10e70 <error@plt>
   11f0c:	bl	120d4 <close@plt+0x1114>
   11f10:	mov	r7, r0
   11f14:	ldr	r1, [pc, #404]	; 120b0 <close@plt+0x10f0>
   11f18:	bl	10d8c <strcmp@plt>
   11f1c:	cmp	r0, #0
   11f20:	moveq	sl, #1
   11f24:	beq	11d3c <close@plt+0xd7c>
   11f28:	ldr	r1, [pc, #388]	; 120b4 <close@plt+0x10f4>
   11f2c:	mov	r0, r7
   11f30:	bl	10d8c <strcmp@plt>
   11f34:	clz	sl, r0
   11f38:	lsr	sl, sl, #5
   11f3c:	b	11d3c <close@plt+0xd7c>
   11f40:	ldr	r4, [r4, r5, lsl #2]
   11f44:	ldr	r1, [pc, #364]	; 120b8 <close@plt+0x10f8>
   11f48:	mov	r0, r4
   11f4c:	bl	10d8c <strcmp@plt>
   11f50:	cmp	r0, #0
   11f54:	beq	11f74 <close@plt+0xfb4>
   11f58:	ldr	r3, [pc, #348]	; 120bc <close@plt+0x10fc>
   11f5c:	ldr	r2, [r3]
   11f60:	ldr	r1, [pc, #344]	; 120c0 <close@plt+0x1100>
   11f64:	mov	r0, r4
   11f68:	bl	124c0 <close@plt+0x1500>
   11f6c:	cmp	r0, #0
   11f70:	beq	11fcc <close@plt+0x100c>
   11f74:	ldr	r5, [pc, #320]	; 120bc <close@plt+0x10fc>
   11f78:	mov	r1, r4
   11f7c:	ldr	r0, [r5]
   11f80:	bl	11278 <close@plt+0x2b8>
   11f84:	mov	r6, r0
   11f88:	ldr	r0, [r5]
   11f8c:	bl	1230c <close@plt+0x134c>
   11f90:	cmp	r0, #0
   11f94:	moveq	r9, r6
   11f98:	beq	11d70 <close@plt+0xdb0>
   11f9c:	bl	10f18 <__errno_location@plt>
   11fa0:	ldr	r5, [r0]
   11fa4:	mov	r2, r4
   11fa8:	mov	r1, #3
   11fac:	mov	r0, #0
   11fb0:	bl	14458 <_obstack_memory_used@@Base+0x1a1c>
   11fb4:	mov	r3, r0
   11fb8:	ldr	r2, [pc, #260]	; 120c4 <close@plt+0x1104>
   11fbc:	mov	r1, r5
   11fc0:	mov	r0, #0
   11fc4:	bl	10e70 <error@plt>
   11fc8:	b	11eb0 <close@plt+0xef0>
   11fcc:	bl	10f18 <__errno_location@plt>
   11fd0:	ldr	r5, [r0]
   11fd4:	mov	r2, r4
   11fd8:	mov	r1, #3
   11fdc:	mov	r0, #0
   11fe0:	bl	14458 <_obstack_memory_used@@Base+0x1a1c>
   11fe4:	mov	r3, r0
   11fe8:	ldr	r2, [pc, #212]	; 120c4 <close@plt+0x1104>
   11fec:	mov	r1, r5
   11ff0:	mov	r0, #0
   11ff4:	bl	10e70 <error@plt>
   11ff8:	b	11eb0 <close@plt+0xef0>
   11ffc:	ldr	r0, [r4, r5, lsl #2]
   12000:	bl	145c0 <_obstack_memory_used@@Base+0x1b84>
   12004:	mov	r3, r0
   12008:	mov	r2, r6
   1200c:	mov	r1, #0
   12010:	mov	r0, r1
   12014:	bl	10e70 <error@plt>
   12018:	ldr	r3, [pc, #168]	; 120c8 <close@plt+0x1108>
   1201c:	ldr	r4, [r3]
   12020:	mov	r2, #5
   12024:	ldr	r1, [pc, #160]	; 120cc <close@plt+0x110c>
   12028:	mov	r0, #0
   1202c:	bl	10df8 <dcgettext@plt>
   12030:	mov	r3, r0
   12034:	ldr	r2, [pc, #148]	; 120d0 <close@plt+0x1110>
   12038:	mov	r1, #1
   1203c:	mov	r0, r4
   12040:	bl	10f54 <__fprintf_chk@plt>
   12044:	mov	r0, #1
   12048:	bl	118cc <close@plt+0x90c>
   1204c:	andeq	r7, r1, r4, asr #32
   12050:	andeq	r6, r1, r8, lsl #31
   12054:	andeq	r7, r1, r8, rrx
   12058:	andeq	r2, r1, r8, lsl r2
   1205c:	andeq	r6, r1, r8, lsl #23
   12060:	muleq	r1, r0, r0
   12064:	andeq	r7, r1, r0, lsl #1
   12068:	andeq	r8, r2, r8, ror #1
   1206c:	andeq	r6, r1, r4, lsl #31
   12070:	muleq	r1, r4, ip
   12074:	andeq	r8, r2, r4, asr r1
   12078:	andeq	r8, r2, r0, asr #2
   1207c:	andeq	r2, r1, r8, lsl r4
   12080:	andeq	r5, r1, ip, lsl #3
   12084:	andeq	r8, r2, ip, asr r1
   12088:	andeq	r7, r1, ip, lsr #32
   1208c:	andeq	r7, r1, r0, lsr r0
   12090:	andeq	r7, r1, r4, asr r0
   12094:	andeq	r7, r1, r8, asr #32
   12098:	muleq	r1, r4, r0
   1209c:	strdeq	r7, [r1], -ip
   120a0:	andeq	r5, r1, r8, asr #18
   120a4:	ldrdeq	r1, [r0], -r5
   120a8:	andeq	r7, r1, r0, lsl r1
   120ac:	andeq	r7, r1, r4, lsr #2
   120b0:	andeq	r7, r1, r8, lsl r1
   120b4:	andeq	r7, r1, ip, lsl r1
   120b8:	andeq	r7, r1, r4, ror #2
   120bc:	andeq	r8, r2, r0, asr r1
   120c0:	andeq	r7, r1, r8, ror #2
   120c4:	andeq	r7, r1, r4, lsl #8
   120c8:	andeq	r8, r2, r8, asr #2
   120cc:	andeq	r7, r1, ip, ror #2
   120d0:	andeq	r7, r1, ip, asr #10
   120d4:	ldrb	r3, [r0]
   120d8:	cmp	r3, #47	; 0x2f
   120dc:	bne	120ec <close@plt+0x112c>
   120e0:	ldrb	r3, [r0, #1]!
   120e4:	cmp	r3, #47	; 0x2f
   120e8:	beq	120e0 <close@plt+0x1120>
   120ec:	ldrb	r2, [r0]
   120f0:	cmp	r2, #0
   120f4:	bxeq	lr
   120f8:	push	{lr}		; (str lr, [sp, #-4]!)
   120fc:	mov	r1, r0
   12100:	mov	r3, #0
   12104:	mov	lr, #1
   12108:	mov	ip, r3
   1210c:	b	1211c <close@plt+0x115c>
   12110:	ldrb	r2, [r1, #1]!
   12114:	cmp	r2, #0
   12118:	beq	12138 <close@plt+0x1178>
   1211c:	cmp	r2, #47	; 0x2f
   12120:	moveq	r3, lr
   12124:	beq	12110 <close@plt+0x1150>
   12128:	cmp	r3, #0
   1212c:	movne	r0, r1
   12130:	movne	r3, ip
   12134:	b	12110 <close@plt+0x1150>
   12138:	pop	{pc}		; (ldr pc, [sp], #4)
   1213c:	push	{r4, lr}
   12140:	mov	r4, r0
   12144:	bl	10f0c <strlen@plt>
   12148:	cmp	r0, #1
   1214c:	popls	{r4, pc}
   12150:	sub	r3, r0, #1
   12154:	add	r2, r4, r3
   12158:	ldrb	r1, [r4, r3]
   1215c:	cmp	r1, #47	; 0x2f
   12160:	popne	{r4, pc}
   12164:	cmp	r3, #1
   12168:	beq	1218c <close@plt+0x11cc>
   1216c:	sub	r0, r3, #1
   12170:	ldrb	r1, [r2, #-1]!
   12174:	cmp	r1, #47	; 0x2f
   12178:	beq	12184 <close@plt+0x11c4>
   1217c:	mov	r0, r3
   12180:	pop	{r4, pc}
   12184:	mov	r3, r0
   12188:	b	12164 <close@plt+0x11a4>
   1218c:	mov	r0, #1
   12190:	pop	{r4, pc}
   12194:	cmp	r0, r1
   12198:	beq	121f0 <close@plt+0x1230>
   1219c:	push	{lr}		; (str lr, [sp, #-4]!)
   121a0:	sub	ip, r0, #1
   121a4:	sub	r1, r1, #1
   121a8:	ldrb	r3, [ip, #1]!
   121ac:	sub	r2, r3, #65	; 0x41
   121b0:	cmp	r2, #25
   121b4:	addls	r3, r3, #32
   121b8:	uxtb	r2, r3
   121bc:	ldrb	r0, [r1, #1]!
   121c0:	sub	lr, r0, #65	; 0x41
   121c4:	cmp	lr, #25
   121c8:	addls	r0, r0, #32
   121cc:	uxtb	lr, r0
   121d0:	cmp	r2, #0
   121d4:	beq	121e0 <close@plt+0x1220>
   121d8:	cmp	r2, lr
   121dc:	beq	121a8 <close@plt+0x11e8>
   121e0:	uxtb	r3, r3
   121e4:	uxtb	r0, r0
   121e8:	sub	r0, r3, r0
   121ec:	pop	{pc}		; (ldr pc, [sp], #4)
   121f0:	mov	r0, #0
   121f4:	bx	lr
   121f8:	ldr	r3, [pc, #4]	; 12204 <close@plt+0x1244>
   121fc:	str	r0, [r3]
   12200:	bx	lr
   12204:	andeq	r8, r2, r8, lsl #3
   12208:	ldr	r3, [pc, #4]	; 12214 <close@plt+0x1254>
   1220c:	strb	r0, [r3, #4]
   12210:	bx	lr
   12214:	andeq	r8, r2, r8, lsl #3
   12218:	push	{r4, r5, r6, lr}
   1221c:	sub	sp, sp, #8
   12220:	ldr	r3, [pc, #200]	; 122f0 <close@plt+0x1330>
   12224:	ldr	r0, [r3]
   12228:	bl	1520c <_obstack_memory_used@@Base+0x27d0>
   1222c:	cmp	r0, #0
   12230:	beq	12254 <close@plt+0x1294>
   12234:	ldr	r3, [pc, #184]	; 122f4 <close@plt+0x1334>
   12238:	ldrb	r3, [r3, #4]
   1223c:	cmp	r3, #0
   12240:	beq	12270 <close@plt+0x12b0>
   12244:	bl	10f18 <__errno_location@plt>
   12248:	ldr	r3, [r0]
   1224c:	cmp	r3, #32
   12250:	bne	12270 <close@plt+0x12b0>
   12254:	ldr	r3, [pc, #156]	; 122f8 <close@plt+0x1338>
   12258:	ldr	r0, [r3]
   1225c:	bl	1520c <_obstack_memory_used@@Base+0x27d0>
   12260:	cmp	r0, #0
   12264:	bne	122e4 <close@plt+0x1324>
   12268:	add	sp, sp, #8
   1226c:	pop	{r4, r5, r6, pc}
   12270:	mov	r2, #5
   12274:	ldr	r1, [pc, #128]	; 122fc <close@plt+0x133c>
   12278:	mov	r0, #0
   1227c:	bl	10df8 <dcgettext@plt>
   12280:	mov	r4, r0
   12284:	ldr	r3, [pc, #104]	; 122f4 <close@plt+0x1334>
   12288:	ldr	r5, [r3]
   1228c:	cmp	r5, #0
   12290:	beq	122c8 <close@plt+0x1308>
   12294:	bl	10f18 <__errno_location@plt>
   12298:	ldr	r6, [r0]
   1229c:	mov	r0, r5
   122a0:	bl	14438 <_obstack_memory_used@@Base+0x19fc>
   122a4:	str	r4, [sp]
   122a8:	mov	r3, r0
   122ac:	ldr	r2, [pc, #76]	; 12300 <close@plt+0x1340>
   122b0:	mov	r1, r6
   122b4:	mov	r0, #0
   122b8:	bl	10e70 <error@plt>
   122bc:	ldr	r3, [pc, #64]	; 12304 <close@plt+0x1344>
   122c0:	ldr	r0, [r3]
   122c4:	bl	10db0 <_exit@plt>
   122c8:	bl	10f18 <__errno_location@plt>
   122cc:	mov	r3, r4
   122d0:	ldr	r2, [pc, #48]	; 12308 <close@plt+0x1348>
   122d4:	ldr	r1, [r0]
   122d8:	mov	r0, #0
   122dc:	bl	10e70 <error@plt>
   122e0:	b	122bc <close@plt+0x12fc>
   122e4:	ldr	r3, [pc, #24]	; 12304 <close@plt+0x1344>
   122e8:	ldr	r0, [r3]
   122ec:	bl	10db0 <_exit@plt>
   122f0:	andeq	r8, r2, r4, asr r1
   122f4:	andeq	r8, r2, r8, lsl #3
   122f8:	andeq	r8, r2, r8, asr #2
   122fc:	strdeq	r7, [r1], -r4
   12300:	andeq	r7, r1, r0, lsl #8
   12304:	andeq	r8, r2, ip, ror #1
   12308:	andeq	r7, r1, r4, lsl #8
   1230c:	push	{r4, r5, r6, lr}
   12310:	sub	sp, sp, #8
   12314:	mov	r4, r0
   12318:	bl	10f48 <fileno@plt>
   1231c:	cmp	r0, #0
   12320:	blt	12398 <close@plt+0x13d8>
   12324:	mov	r0, r4
   12328:	bl	10ec4 <__freading@plt>
   1232c:	cmp	r0, #0
   12330:	beq	12364 <close@plt+0x13a4>
   12334:	mov	r0, r4
   12338:	bl	10f48 <fileno@plt>
   1233c:	mov	r3, #1
   12340:	str	r3, [sp]
   12344:	mov	r2, #0
   12348:	mov	r3, #0
   1234c:	bl	10e40 <lseek64@plt>
   12350:	mvn	r2, #0
   12354:	mvn	r3, #0
   12358:	cmp	r1, r3
   1235c:	cmpeq	r0, r2
   12360:	beq	123a4 <close@plt+0x13e4>
   12364:	mov	r0, r4
   12368:	bl	123b4 <close@plt+0x13f4>
   1236c:	cmp	r0, #0
   12370:	beq	123a4 <close@plt+0x13e4>
   12374:	bl	10f18 <__errno_location@plt>
   12378:	mov	r5, r0
   1237c:	ldr	r6, [r0]
   12380:	mov	r0, r4
   12384:	bl	10f60 <fclose@plt>
   12388:	cmp	r6, #0
   1238c:	strne	r6, [r5]
   12390:	mvnne	r0, #0
   12394:	b	123ac <close@plt+0x13ec>
   12398:	mov	r0, r4
   1239c:	bl	10f60 <fclose@plt>
   123a0:	b	123ac <close@plt+0x13ec>
   123a4:	mov	r0, r4
   123a8:	bl	10f60 <fclose@plt>
   123ac:	add	sp, sp, #8
   123b0:	pop	{r4, r5, r6, pc}
   123b4:	push	{r4, lr}
   123b8:	sub	sp, sp, #8
   123bc:	subs	r4, r0, #0
   123c0:	beq	123d4 <close@plt+0x1414>
   123c4:	mov	r0, r4
   123c8:	bl	10ec4 <__freading@plt>
   123cc:	cmp	r0, #0
   123d0:	bne	123e4 <close@plt+0x1424>
   123d4:	mov	r0, r4
   123d8:	bl	10d98 <fflush@plt>
   123dc:	add	sp, sp, #8
   123e0:	pop	{r4, pc}
   123e4:	ldr	r3, [r4]
   123e8:	tst	r3, #256	; 0x100
   123ec:	bne	123fc <close@plt+0x143c>
   123f0:	mov	r0, r4
   123f4:	bl	10d98 <fflush@plt>
   123f8:	b	123dc <close@plt+0x141c>
   123fc:	mov	r3, #1
   12400:	str	r3, [sp]
   12404:	mov	r2, #0
   12408:	mov	r3, #0
   1240c:	mov	r0, r4
   12410:	bl	1263c <close@plt+0x167c>
   12414:	b	123f0 <close@plt+0x1430>
   12418:	push	{r4, r5, lr}
   1241c:	sub	sp, sp, #12
   12420:	mov	r5, r0
   12424:	bl	10f18 <__errno_location@plt>
   12428:	mov	r4, r0
   1242c:	ldr	r3, [r0]
   12430:	str	r3, [sp]
   12434:	str	r3, [sp, #4]
   12438:	mov	r3, #0
   1243c:	str	r3, [r0]
   12440:	mov	r0, r5
   12444:	bl	10da4 <free@plt>
   12448:	ldr	r3, [r4]
   1244c:	cmp	r3, #0
   12450:	moveq	r3, #4
   12454:	movne	r3, #0
   12458:	add	r2, sp, #8
   1245c:	add	r3, r2, r3
   12460:	ldr	r3, [r3, #-8]
   12464:	str	r3, [r4]
   12468:	add	sp, sp, #12
   1246c:	pop	{r4, r5, pc}
   12470:	push	{r4, lr}
   12474:	mov	r4, r0
   12478:	mov	r1, #0
   1247c:	ldr	r0, [pc, #56]	; 124bc <close@plt+0x14fc>
   12480:	bl	10e88 <open64@plt>
   12484:	cmp	r4, r0
   12488:	beq	124ac <close@plt+0x14ec>
   1248c:	cmp	r0, #0
   12490:	blt	124b4 <close@plt+0x14f4>
   12494:	bl	10fc0 <close@plt>
   12498:	bl	10f18 <__errno_location@plt>
   1249c:	mov	r3, #9
   124a0:	str	r3, [r0]
   124a4:	mov	r0, #0
   124a8:	pop	{r4, pc}
   124ac:	mov	r0, #1
   124b0:	pop	{r4, pc}
   124b4:	mov	r0, #0
   124b8:	pop	{r4, pc}
   124bc:	andeq	r7, r1, r8, lsl #8
   124c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   124c4:	mov	r8, r0
   124c8:	mov	r9, r1
   124cc:	mov	r6, r2
   124d0:	mov	r0, r2
   124d4:	bl	10f48 <fileno@plt>
   124d8:	cmp	r0, #1
   124dc:	beq	125a4 <close@plt+0x15e4>
   124e0:	cmp	r0, #2
   124e4:	beq	1259c <close@plt+0x15dc>
   124e8:	cmp	r0, #0
   124ec:	beq	125b0 <close@plt+0x15f0>
   124f0:	mov	r1, #2
   124f4:	mov	r0, r1
   124f8:	bl	10e04 <dup2@plt>
   124fc:	subs	r4, r0, #2
   12500:	movne	r4, #1
   12504:	mov	r1, #1
   12508:	mov	r0, r1
   1250c:	bl	10e04 <dup2@plt>
   12510:	subs	r7, r0, #1
   12514:	movne	r7, #1
   12518:	mov	r1, #0
   1251c:	mov	r0, r1
   12520:	bl	10e04 <dup2@plt>
   12524:	adds	r5, r0, #0
   12528:	movne	r5, #1
   1252c:	cmp	r5, #0
   12530:	bne	125c0 <close@plt+0x1600>
   12534:	cmp	r7, #0
   12538:	bne	125d8 <close@plt+0x1618>
   1253c:	cmp	r4, #0
   12540:	beq	12554 <close@plt+0x1594>
   12544:	mov	r0, #2
   12548:	bl	12470 <close@plt+0x14b0>
   1254c:	cmp	r0, #0
   12550:	beq	12620 <close@plt+0x1660>
   12554:	mov	r2, r6
   12558:	mov	r1, r9
   1255c:	mov	r0, r8
   12560:	bl	10edc <freopen64@plt>
   12564:	mov	r6, r0
   12568:	bl	10f18 <__errno_location@plt>
   1256c:	mov	r8, r0
   12570:	ldr	r9, [r0]
   12574:	cmp	r4, #0
   12578:	bne	12630 <close@plt+0x1670>
   1257c:	cmp	r7, #0
   12580:	bne	12600 <close@plt+0x1640>
   12584:	cmp	r5, #0
   12588:	bne	12614 <close@plt+0x1654>
   1258c:	cmp	r6, #0
   12590:	streq	r9, [r8]
   12594:	mov	r0, r6
   12598:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1259c:	mov	r4, #0
   125a0:	b	12504 <close@plt+0x1544>
   125a4:	mov	r4, #0
   125a8:	mov	r7, r4
   125ac:	b	12518 <close@plt+0x1558>
   125b0:	mov	r4, #0
   125b4:	mov	r7, r4
   125b8:	mov	r5, r4
   125bc:	b	1252c <close@plt+0x156c>
   125c0:	mov	r0, #0
   125c4:	bl	12470 <close@plt+0x14b0>
   125c8:	cmp	r0, #0
   125cc:	bne	12534 <close@plt+0x1574>
   125d0:	mov	r6, #0
   125d4:	b	12568 <close@plt+0x15a8>
   125d8:	mov	r0, #1
   125dc:	bl	12470 <close@plt+0x14b0>
   125e0:	cmp	r0, #0
   125e4:	bne	1253c <close@plt+0x157c>
   125e8:	bl	10f18 <__errno_location@plt>
   125ec:	mov	r8, r0
   125f0:	ldr	r9, [r0]
   125f4:	cmp	r4, #0
   125f8:	moveq	r6, #0
   125fc:	bne	1260c <close@plt+0x164c>
   12600:	mov	r0, #1
   12604:	bl	10fc0 <close@plt>
   12608:	b	12584 <close@plt+0x15c4>
   1260c:	mov	r6, #0
   12610:	b	12630 <close@plt+0x1670>
   12614:	mov	r0, #0
   12618:	bl	10fc0 <close@plt>
   1261c:	b	1258c <close@plt+0x15cc>
   12620:	bl	10f18 <__errno_location@plt>
   12624:	mov	r8, r0
   12628:	ldr	r9, [r0]
   1262c:	mov	r6, #0
   12630:	mov	r0, #2
   12634:	bl	10fc0 <close@plt>
   12638:	b	1257c <close@plt+0x15bc>
   1263c:	push	{r4, r5, r6, r7, lr}
   12640:	sub	sp, sp, #12
   12644:	mov	r4, r0
   12648:	mov	r6, r2
   1264c:	mov	r7, r3
   12650:	ldr	r5, [sp, #32]
   12654:	ldr	r2, [r0, #8]
   12658:	ldr	r3, [r0, #4]
   1265c:	cmp	r2, r3
   12660:	beq	12680 <close@plt+0x16c0>
   12664:	str	r5, [sp]
   12668:	mov	r2, r6
   1266c:	mov	r3, r7
   12670:	mov	r0, r4
   12674:	bl	10f6c <fseeko64@plt>
   12678:	add	sp, sp, #12
   1267c:	pop	{r4, r5, r6, r7, pc}
   12680:	ldr	r2, [r0, #20]
   12684:	ldr	r3, [r0, #16]
   12688:	cmp	r2, r3
   1268c:	bne	12664 <close@plt+0x16a4>
   12690:	ldr	r3, [r0, #36]	; 0x24
   12694:	cmp	r3, #0
   12698:	bne	12664 <close@plt+0x16a4>
   1269c:	bl	10f48 <fileno@plt>
   126a0:	str	r5, [sp]
   126a4:	mov	r2, r6
   126a8:	mov	r3, r7
   126ac:	bl	10e40 <lseek64@plt>
   126b0:	mvn	r2, #0
   126b4:	mvn	r3, #0
   126b8:	cmp	r1, r3
   126bc:	cmpeq	r0, r2
   126c0:	beq	126dc <close@plt+0x171c>
   126c4:	ldr	r3, [r4]
   126c8:	bic	r3, r3, #16
   126cc:	str	r3, [r4]
   126d0:	strd	r0, [r4, #80]	; 0x50
   126d4:	mov	r0, #0
   126d8:	b	12678 <close@plt+0x16b8>
   126dc:	mvn	r0, #0
   126e0:	b	12678 <close@plt+0x16b8>
   126e4:	push	{r4, lr}
   126e8:	ldrb	r3, [r0, #40]	; 0x28
   126ec:	tst	r3, #1
   126f0:	bne	12704 <close@plt+0x1744>
   126f4:	ldr	r3, [r0, #28]
   126f8:	mov	r0, r1
   126fc:	blx	r3
   12700:	pop	{r4, pc}
   12704:	ldr	r3, [r0, #28]
   12708:	ldr	r0, [r0, #36]	; 0x24
   1270c:	blx	r3
   12710:	pop	{r4, pc}
   12714:	push	{r4, lr}
   12718:	ldrb	r3, [r0, #40]	; 0x28
   1271c:	tst	r3, #1
   12720:	bne	12734 <close@plt+0x1774>
   12724:	ldr	r3, [r0, #32]
   12728:	mov	r0, r1
   1272c:	blx	r3
   12730:	pop	{r4, pc}
   12734:	ldr	r3, [r0, #32]
   12738:	ldr	r0, [r0, #36]	; 0x24
   1273c:	blx	r3
   12740:	pop	{r4, pc}
   12744:	push	{r4, r5, r6, lr}
   12748:	mov	r4, r0
   1274c:	subs	r5, r2, #0
   12750:	cmp	r2, #0
   12754:	moveq	r5, #8
   12758:	ldr	r3, [pc, #112]	; 127d0 <close@plt+0x1810>
   1275c:	cmp	r1, #0
   12760:	moveq	r1, r3
   12764:	str	r1, [r0]
   12768:	sub	r6, r5, #1
   1276c:	str	r6, [r0, #24]
   12770:	bl	126e4 <close@plt+0x1724>
   12774:	str	r0, [r4, #4]
   12778:	cmp	r0, #0
   1277c:	beq	127c4 <close@plt+0x1804>
   12780:	add	r3, r0, #8
   12784:	add	r3, r3, r6
   12788:	rsb	r5, r5, #0
   1278c:	and	r5, r5, r3
   12790:	str	r5, [r4, #8]
   12794:	str	r5, [r4, #12]
   12798:	ldr	r3, [r4]
   1279c:	add	r3, r0, r3
   127a0:	str	r3, [r0]
   127a4:	str	r3, [r4, #16]
   127a8:	mov	r3, #0
   127ac:	str	r3, [r0, #4]
   127b0:	ldrb	r3, [r4, #40]	; 0x28
   127b4:	and	r3, r3, #249	; 0xf9
   127b8:	strb	r3, [r4, #40]	; 0x28
   127bc:	mov	r0, #1
   127c0:	pop	{r4, r5, r6, pc}
   127c4:	ldr	r3, [pc, #8]	; 127d4 <close@plt+0x1814>
   127c8:	ldr	r3, [r3]
   127cc:	blx	r3
   127d0:	andeq	r0, r0, r8, ror #31
   127d4:	strdeq	r8, [r2], -r0
   127d8:	push	{r4, lr}
   127dc:	ldr	r3, [pc, #48]	; 12814 <close@plt+0x1854>
   127e0:	ldr	r4, [r3]
   127e4:	mov	r2, #5
   127e8:	ldr	r1, [pc, #40]	; 12818 <close@plt+0x1858>
   127ec:	mov	r0, #0
   127f0:	bl	10df8 <dcgettext@plt>
   127f4:	mov	r3, r0
   127f8:	ldr	r2, [pc, #28]	; 1281c <close@plt+0x185c>
   127fc:	mov	r1, #1
   12800:	mov	r0, r4
   12804:	bl	10f54 <__fprintf_chk@plt>
   12808:	ldr	r3, [pc, #16]	; 12820 <close@plt+0x1860>
   1280c:	ldr	r0, [r3]
   12810:	bl	10f00 <exit@plt>
   12814:	andeq	r8, r2, r8, asr #2
   12818:	andeq	r7, r1, r4, lsl r4
   1281c:	andeq	r7, r1, ip, asr #10
   12820:	andeq	r8, r2, ip, ror #1

00012824 <_obstack_begin@@Base>:
   12824:	push	{r4, lr}
   12828:	str	r3, [r0, #28]
   1282c:	ldr	r3, [sp, #8]
   12830:	str	r3, [r0, #32]
   12834:	ldrb	r3, [r0, #40]	; 0x28
   12838:	bic	r3, r3, #1
   1283c:	strb	r3, [r0, #40]	; 0x28
   12840:	bl	12744 <close@plt+0x1784>
   12844:	pop	{r4, pc}

00012848 <_obstack_begin_1@@Base>:
   12848:	push	{r4, lr}
   1284c:	str	r3, [r0, #28]
   12850:	ldr	r3, [sp, #8]
   12854:	str	r3, [r0, #32]
   12858:	ldr	r3, [sp, #12]
   1285c:	str	r3, [r0, #36]	; 0x24
   12860:	ldrb	r3, [r0, #40]	; 0x28
   12864:	orr	r3, r3, #1
   12868:	strb	r3, [r0, #40]	; 0x28
   1286c:	bl	12744 <close@plt+0x1784>
   12870:	pop	{r4, pc}

00012874 <_obstack_newchunk@@Base>:
   12874:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12878:	ldr	r5, [r0, #12]
   1287c:	ldr	r3, [r0, #8]
   12880:	sub	r7, r5, r3
   12884:	add	r1, r7, r1
   12888:	ldr	r3, [r0, #24]
   1288c:	adds	r3, r1, r3
   12890:	movcc	r2, #1
   12894:	movcs	r2, #0
   12898:	cmp	r7, r1
   1289c:	movhi	r1, #0
   128a0:	andls	r1, r2, #1
   128a4:	cmp	r1, #0
   128a8:	bne	128b8 <_obstack_newchunk@@Base+0x44>
   128ac:	ldr	r3, [pc, #204]	; 12980 <_obstack_newchunk@@Base+0x10c>
   128b0:	ldr	r3, [r3]
   128b4:	blx	r3
   128b8:	mov	r4, r0
   128bc:	ldr	r8, [r0, #4]
   128c0:	add	r1, r3, r7, lsr #3
   128c4:	add	r1, r1, #100	; 0x64
   128c8:	ldr	r6, [r0]
   128cc:	cmp	r3, r6
   128d0:	movcc	r3, r6
   128d4:	cmp	r3, r1
   128d8:	movcs	r6, r3
   128dc:	movcc	r6, r1
   128e0:	mov	r1, r6
   128e4:	bl	126e4 <close@plt+0x1724>
   128e8:	subs	r9, r0, #0
   128ec:	beq	128ac <_obstack_newchunk@@Base+0x38>
   128f0:	str	r9, [r4, #4]
   128f4:	str	r8, [r9, #4]
   128f8:	add	r1, r9, r6
   128fc:	str	r1, [r4, #16]
   12900:	mov	r5, r9
   12904:	str	r1, [r5], #8
   12908:	ldr	r3, [r4, #24]
   1290c:	add	r5, r5, r3
   12910:	bic	r5, r5, r3
   12914:	mov	r2, r7
   12918:	ldr	r1, [r4, #8]
   1291c:	mov	r0, r5
   12920:	bl	10dbc <memcpy@plt>
   12924:	ldrb	r3, [r4, #40]	; 0x28
   12928:	tst	r3, #2
   1292c:	bne	1294c <_obstack_newchunk@@Base+0xd8>
   12930:	ldr	r2, [r4, #24]
   12934:	add	r3, r8, #8
   12938:	add	r3, r3, r2
   1293c:	bic	r3, r3, r2
   12940:	ldr	r2, [r4, #8]
   12944:	cmp	r2, r3
   12948:	beq	12968 <_obstack_newchunk@@Base+0xf4>
   1294c:	str	r5, [r4, #8]
   12950:	add	r5, r5, r7
   12954:	str	r5, [r4, #12]
   12958:	ldrb	r3, [r4, #40]	; 0x28
   1295c:	bic	r3, r3, #2
   12960:	strb	r3, [r4, #40]	; 0x28
   12964:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12968:	ldr	r3, [r8, #4]
   1296c:	str	r3, [r9, #4]
   12970:	mov	r1, r8
   12974:	mov	r0, r4
   12978:	bl	12714 <close@plt+0x1754>
   1297c:	b	1294c <_obstack_newchunk@@Base+0xd8>
   12980:	strdeq	r8, [r2], -r0

00012984 <_obstack_allocated_p@@Base>:
   12984:	ldr	r0, [r0, #4]
   12988:	cmp	r0, #0
   1298c:	bne	129a0 <_obstack_allocated_p@@Base+0x1c>
   12990:	b	129b4 <_obstack_allocated_p@@Base+0x30>
   12994:	ldr	r0, [r0, #4]
   12998:	cmp	r0, #0
   1299c:	beq	129b4 <_obstack_allocated_p@@Base+0x30>
   129a0:	cmp	r1, r0
   129a4:	bls	12994 <_obstack_allocated_p@@Base+0x10>
   129a8:	ldr	r3, [r0]
   129ac:	cmp	r1, r3
   129b0:	bhi	12994 <_obstack_allocated_p@@Base+0x10>
   129b4:	adds	r0, r0, #0
   129b8:	movne	r0, #1
   129bc:	bx	lr

000129c0 <_obstack_free@@Base>:
   129c0:	push	{r4, r5, r6, lr}
   129c4:	mov	r4, r0
   129c8:	mov	r6, r1
   129cc:	ldr	r1, [r0, #4]
   129d0:	cmp	r1, #0
   129d4:	bne	12a08 <_obstack_free@@Base+0x48>
   129d8:	cmp	r6, #0
   129dc:	popeq	{r4, r5, r6, pc}
   129e0:	bl	10fb4 <abort@plt>
   129e4:	ldr	r5, [r1, #4]
   129e8:	mov	r0, r4
   129ec:	bl	12714 <close@plt+0x1754>
   129f0:	ldrb	r3, [r4, #40]	; 0x28
   129f4:	orr	r3, r3, #2
   129f8:	strb	r3, [r4, #40]	; 0x28
   129fc:	mov	r1, r5
   12a00:	cmp	r5, #0
   12a04:	beq	129d8 <_obstack_free@@Base+0x18>
   12a08:	cmp	r6, r1
   12a0c:	bls	129e4 <_obstack_free@@Base+0x24>
   12a10:	ldr	r3, [r1]
   12a14:	cmp	r6, r3
   12a18:	bhi	129e4 <_obstack_free@@Base+0x24>
   12a1c:	cmp	r1, #0
   12a20:	beq	129d8 <_obstack_free@@Base+0x18>
   12a24:	str	r6, [r4, #12]
   12a28:	str	r6, [r4, #8]
   12a2c:	ldr	r3, [r1]
   12a30:	str	r3, [r4, #16]
   12a34:	str	r1, [r4, #4]
   12a38:	pop	{r4, r5, r6, pc}

00012a3c <_obstack_memory_used@@Base>:
   12a3c:	ldr	r3, [r0, #4]
   12a40:	cmp	r3, #0
   12a44:	beq	12a68 <_obstack_memory_used@@Base+0x2c>
   12a48:	mov	r0, #0
   12a4c:	ldr	r2, [r3]
   12a50:	sub	r2, r2, r3
   12a54:	add	r0, r0, r2
   12a58:	ldr	r3, [r3, #4]
   12a5c:	cmp	r3, #0
   12a60:	bne	12a4c <_obstack_memory_used@@Base+0x10>
   12a64:	bx	lr
   12a68:	mov	r0, #0
   12a6c:	bx	lr
   12a70:	push	{r4, r5, r6, lr}
   12a74:	subs	r4, r0, #0
   12a78:	beq	12af0 <_obstack_memory_used@@Base+0xb4>
   12a7c:	mov	r1, #47	; 0x2f
   12a80:	mov	r0, r4
   12a84:	bl	10f84 <strrchr@plt>
   12a88:	cmp	r0, #0
   12a8c:	addne	r5, r0, #1
   12a90:	moveq	r5, r4
   12a94:	sub	r3, r5, r4
   12a98:	cmp	r3, #6
   12a9c:	ble	12adc <_obstack_memory_used@@Base+0xa0>
   12aa0:	mov	r2, #7
   12aa4:	ldr	r1, [pc, #96]	; 12b0c <_obstack_memory_used@@Base+0xd0>
   12aa8:	sub	r0, r5, #7
   12aac:	bl	10fa8 <strncmp@plt>
   12ab0:	cmp	r0, #0
   12ab4:	bne	12adc <_obstack_memory_used@@Base+0xa0>
   12ab8:	mov	r2, #3
   12abc:	ldr	r1, [pc, #76]	; 12b10 <_obstack_memory_used@@Base+0xd4>
   12ac0:	mov	r0, r5
   12ac4:	bl	10fa8 <strncmp@plt>
   12ac8:	cmp	r0, #0
   12acc:	addeq	r4, r5, #3
   12ad0:	ldreq	r3, [pc, #60]	; 12b14 <_obstack_memory_used@@Base+0xd8>
   12ad4:	streq	r4, [r3]
   12ad8:	movne	r4, r5
   12adc:	ldr	r3, [pc, #52]	; 12b18 <_obstack_memory_used@@Base+0xdc>
   12ae0:	str	r4, [r3]
   12ae4:	ldr	r3, [pc, #48]	; 12b1c <_obstack_memory_used@@Base+0xe0>
   12ae8:	str	r4, [r3]
   12aec:	pop	{r4, r5, r6, pc}
   12af0:	ldr	r3, [pc, #40]	; 12b20 <_obstack_memory_used@@Base+0xe4>
   12af4:	ldr	r3, [r3]
   12af8:	mov	r2, #55	; 0x37
   12afc:	mov	r1, #1
   12b00:	ldr	r0, [pc, #28]	; 12b24 <_obstack_memory_used@@Base+0xe8>
   12b04:	bl	10e34 <fwrite@plt>
   12b08:	bl	10fb4 <abort@plt>
   12b0c:	andeq	r7, r1, r0, ror #8
   12b10:	andeq	r7, r1, r8, ror #8
   12b14:	andeq	r8, r2, r8, lsr r1
   12b18:	muleq	r2, r0, r1
   12b1c:	andeq	r8, r2, ip, lsr r1
   12b20:	andeq	r8, r2, r8, asr #2
   12b24:	andeq	r7, r1, r8, lsr #8
   12b28:	push	{r4, r5, r6, lr}
   12b2c:	mov	r5, r0
   12b30:	mov	r4, r1
   12b34:	mov	r2, #48	; 0x30
   12b38:	mov	r1, #0
   12b3c:	bl	10f30 <memset@plt>
   12b40:	cmp	r4, #10
   12b44:	beq	12b54 <_obstack_memory_used@@Base+0x118>
   12b48:	str	r4, [r5]
   12b4c:	mov	r0, r5
   12b50:	pop	{r4, r5, r6, pc}
   12b54:	bl	10fb4 <abort@plt>
   12b58:	push	{r4, r5, r6, lr}
   12b5c:	mov	r4, r0
   12b60:	mov	r5, r1
   12b64:	mov	r2, #5
   12b68:	mov	r1, r0
   12b6c:	mov	r0, #0
   12b70:	bl	10df8 <dcgettext@plt>
   12b74:	cmp	r4, r0
   12b78:	popne	{r4, r5, r6, pc}
   12b7c:	bl	15284 <_obstack_memory_used@@Base+0x2848>
   12b80:	ldrb	r3, [r0]
   12b84:	bic	r3, r3, #32
   12b88:	cmp	r3, #85	; 0x55
   12b8c:	beq	12c08 <_obstack_memory_used@@Base+0x1cc>
   12b90:	cmp	r3, #71	; 0x47
   12b94:	bne	12c64 <_obstack_memory_used@@Base+0x228>
   12b98:	ldrb	r3, [r0, #1]
   12b9c:	bic	r3, r3, #32
   12ba0:	cmp	r3, #66	; 0x42
   12ba4:	bne	12c64 <_obstack_memory_used@@Base+0x228>
   12ba8:	ldrb	r3, [r0, #2]
   12bac:	cmp	r3, #49	; 0x31
   12bb0:	bne	12c64 <_obstack_memory_used@@Base+0x228>
   12bb4:	ldrb	r3, [r0, #3]
   12bb8:	cmp	r3, #56	; 0x38
   12bbc:	bne	12c64 <_obstack_memory_used@@Base+0x228>
   12bc0:	ldrb	r3, [r0, #4]
   12bc4:	cmp	r3, #48	; 0x30
   12bc8:	bne	12c64 <_obstack_memory_used@@Base+0x228>
   12bcc:	ldrb	r3, [r0, #5]
   12bd0:	cmp	r3, #51	; 0x33
   12bd4:	bne	12c64 <_obstack_memory_used@@Base+0x228>
   12bd8:	ldrb	r3, [r0, #6]
   12bdc:	cmp	r3, #48	; 0x30
   12be0:	bne	12c64 <_obstack_memory_used@@Base+0x228>
   12be4:	ldrb	r3, [r0, #7]
   12be8:	cmp	r3, #0
   12bec:	bne	12c64 <_obstack_memory_used@@Base+0x228>
   12bf0:	ldrb	r2, [r4]
   12bf4:	ldr	r3, [pc, #124]	; 12c78 <_obstack_memory_used@@Base+0x23c>
   12bf8:	ldr	r0, [pc, #124]	; 12c7c <_obstack_memory_used@@Base+0x240>
   12bfc:	cmp	r2, #96	; 0x60
   12c00:	movne	r0, r3
   12c04:	pop	{r4, r5, r6, pc}
   12c08:	ldrb	r3, [r0, #1]
   12c0c:	bic	r3, r3, #32
   12c10:	cmp	r3, #84	; 0x54
   12c14:	bne	12c64 <_obstack_memory_used@@Base+0x228>
   12c18:	ldrb	r3, [r0, #2]
   12c1c:	bic	r3, r3, #32
   12c20:	cmp	r3, #70	; 0x46
   12c24:	bne	12c64 <_obstack_memory_used@@Base+0x228>
   12c28:	ldrb	r3, [r0, #3]
   12c2c:	cmp	r3, #45	; 0x2d
   12c30:	bne	12c64 <_obstack_memory_used@@Base+0x228>
   12c34:	ldrb	r3, [r0, #4]
   12c38:	cmp	r3, #56	; 0x38
   12c3c:	bne	12c64 <_obstack_memory_used@@Base+0x228>
   12c40:	ldrb	r3, [r0, #5]
   12c44:	cmp	r3, #0
   12c48:	bne	12c64 <_obstack_memory_used@@Base+0x228>
   12c4c:	ldrb	r2, [r4]
   12c50:	ldr	r3, [pc, #40]	; 12c80 <_obstack_memory_used@@Base+0x244>
   12c54:	ldr	r0, [pc, #40]	; 12c84 <_obstack_memory_used@@Base+0x248>
   12c58:	cmp	r2, #96	; 0x60
   12c5c:	movne	r0, r3
   12c60:	pop	{r4, r5, r6, pc}
   12c64:	ldr	r3, [pc, #28]	; 12c88 <_obstack_memory_used@@Base+0x24c>
   12c68:	ldr	r0, [pc, #28]	; 12c8c <_obstack_memory_used@@Base+0x250>
   12c6c:	cmp	r5, #9
   12c70:	movne	r0, r3
   12c74:	pop	{r4, r5, r6, pc}
   12c78:	andeq	r7, r1, r4, asr #9
   12c7c:	ldrdeq	r7, [r1], -r0
   12c80:	andeq	r7, r1, r0, asr #9
   12c84:	ldrdeq	r7, [r1], -r4
   12c88:	andeq	r7, r1, r8, asr #9
   12c8c:	andeq	r7, r1, ip, asr #9
   12c90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c94:	sub	sp, sp, #116	; 0x74
   12c98:	str	r0, [sp, #36]	; 0x24
   12c9c:	mov	sl, r1
   12ca0:	str	r2, [sp, #52]	; 0x34
   12ca4:	str	r3, [sp, #28]
   12ca8:	ldr	r8, [sp, #152]	; 0x98
   12cac:	bl	10e4c <__ctype_get_mb_cur_max@plt>
   12cb0:	str	r0, [sp, #84]	; 0x54
   12cb4:	ldr	r3, [sp, #156]	; 0x9c
   12cb8:	lsr	r3, r3, #1
   12cbc:	and	r3, r3, #1
   12cc0:	str	r3, [sp, #32]
   12cc4:	mov	r3, #1
   12cc8:	str	r3, [sp, #40]	; 0x28
   12ccc:	mov	r3, #0
   12cd0:	str	r3, [sp, #80]	; 0x50
   12cd4:	str	r3, [sp, #44]	; 0x2c
   12cd8:	str	r3, [sp, #48]	; 0x30
   12cdc:	str	r3, [sp, #60]	; 0x3c
   12ce0:	str	r3, [sp, #72]	; 0x48
   12ce4:	str	r3, [sp, #76]	; 0x4c
   12ce8:	mov	r7, sl
   12cec:	mov	sl, r8
   12cf0:	cmp	sl, #10
   12cf4:	ldrls	pc, [pc, sl, lsl #2]
   12cf8:	b	12eb0 <_obstack_memory_used@@Base+0x474>
   12cfc:	andeq	r2, r1, r0, ror #26
   12d00:	andeq	r2, r1, r0, lsr sp
   12d04:	andeq	r2, r1, ip, lsl #29
   12d08:	andeq	r2, r1, r8, lsr #26
   12d0c:	andeq	r2, r1, r0, asr #28
   12d10:	andeq	r2, r1, r0, ror sp
   12d14:	ldrdeq	r3, [r1], -ip
   12d18:			; <UNDEFINED> instruction: 0x00012eb4
   12d1c:	andeq	r2, r1, ip, lsr #27
   12d20:	andeq	r2, r1, ip, lsr #27
   12d24:	andeq	r2, r1, ip, lsr #27
   12d28:	mov	r3, #1
   12d2c:	str	r3, [sp, #48]	; 0x30
   12d30:	mov	r3, #1
   12d34:	str	r3, [sp, #32]
   12d38:	str	r3, [sp, #60]	; 0x3c
   12d3c:	ldr	r3, [pc, #4068]	; 13d28 <_obstack_memory_used@@Base+0x12ec>
   12d40:	str	r3, [sp, #72]	; 0x48
   12d44:	mov	fp, #0
   12d48:	mov	sl, #2
   12d4c:	mov	r6, #0
   12d50:	ldr	r3, [sp, #48]	; 0x30
   12d54:	eor	r3, r3, #1
   12d58:	str	r3, [sp, #68]	; 0x44
   12d5c:	b	13644 <_obstack_memory_used@@Base+0xc08>
   12d60:	mov	r3, #0
   12d64:	str	r3, [sp, #32]
   12d68:	mov	fp, r3
   12d6c:	b	12d4c <_obstack_memory_used@@Base+0x310>
   12d70:	ldr	r3, [sp, #32]
   12d74:	cmp	r3, #0
   12d78:	bne	12ecc <_obstack_memory_used@@Base+0x490>
   12d7c:	cmp	r7, #0
   12d80:	beq	12eec <_obstack_memory_used@@Base+0x4b0>
   12d84:	ldr	r3, [sp, #36]	; 0x24
   12d88:	mov	r2, #34	; 0x22
   12d8c:	strb	r2, [r3]
   12d90:	mov	r3, #1
   12d94:	str	r3, [sp, #48]	; 0x30
   12d98:	str	r3, [sp, #60]	; 0x3c
   12d9c:	ldr	r3, [pc, #3980]	; 13d30 <_obstack_memory_used@@Base+0x12f4>
   12da0:	str	r3, [sp, #72]	; 0x48
   12da4:	mov	fp, #1
   12da8:	b	12d4c <_obstack_memory_used@@Base+0x310>
   12dac:	cmp	sl, #10
   12db0:	beq	12dd4 <_obstack_memory_used@@Base+0x398>
   12db4:	mov	r1, sl
   12db8:	ldr	r0, [pc, #3948]	; 13d2c <_obstack_memory_used@@Base+0x12f0>
   12dbc:	bl	12b58 <_obstack_memory_used@@Base+0x11c>
   12dc0:	str	r0, [sp, #164]	; 0xa4
   12dc4:	mov	r1, sl
   12dc8:	ldr	r0, [pc, #3928]	; 13d28 <_obstack_memory_used@@Base+0x12ec>
   12dcc:	bl	12b58 <_obstack_memory_used@@Base+0x11c>
   12dd0:	str	r0, [sp, #168]	; 0xa8
   12dd4:	ldr	r3, [sp, #32]
   12dd8:	cmp	r3, #0
   12ddc:	movne	fp, #0
   12de0:	bne	12e18 <_obstack_memory_used@@Base+0x3dc>
   12de4:	ldr	r3, [sp, #164]	; 0xa4
   12de8:	ldrb	r3, [r3]
   12dec:	cmp	r3, #0
   12df0:	beq	12e38 <_obstack_memory_used@@Base+0x3fc>
   12df4:	ldr	r2, [sp, #164]	; 0xa4
   12df8:	mov	fp, #0
   12dfc:	ldr	r1, [sp, #36]	; 0x24
   12e00:	cmp	r7, fp
   12e04:	strbhi	r3, [r1, fp]
   12e08:	add	fp, fp, #1
   12e0c:	ldrb	r3, [r2, #1]!
   12e10:	cmp	r3, #0
   12e14:	bne	12e00 <_obstack_memory_used@@Base+0x3c4>
   12e18:	ldr	r0, [sp, #168]	; 0xa8
   12e1c:	bl	10f0c <strlen@plt>
   12e20:	str	r0, [sp, #60]	; 0x3c
   12e24:	ldr	r3, [sp, #168]	; 0xa8
   12e28:	str	r3, [sp, #72]	; 0x48
   12e2c:	mov	r3, #1
   12e30:	str	r3, [sp, #48]	; 0x30
   12e34:	b	12d4c <_obstack_memory_used@@Base+0x310>
   12e38:	mov	fp, #0
   12e3c:	b	12e18 <_obstack_memory_used@@Base+0x3dc>
   12e40:	ldr	r3, [sp, #32]
   12e44:	cmp	r3, #0
   12e48:	bne	12f08 <_obstack_memory_used@@Base+0x4cc>
   12e4c:	mov	r3, #1
   12e50:	str	r3, [sp, #48]	; 0x30
   12e54:	cmp	r7, #0
   12e58:	beq	12f24 <_obstack_memory_used@@Base+0x4e8>
   12e5c:	ldr	r3, [sp, #36]	; 0x24
   12e60:	mov	r2, #39	; 0x27
   12e64:	strb	r2, [r3]
   12e68:	mov	r3, #0
   12e6c:	str	r3, [sp, #32]
   12e70:	mov	r3, #1
   12e74:	str	r3, [sp, #60]	; 0x3c
   12e78:	ldr	r3, [pc, #3752]	; 13d28 <_obstack_memory_used@@Base+0x12ec>
   12e7c:	str	r3, [sp, #72]	; 0x48
   12e80:	mov	fp, #1
   12e84:	mov	sl, #2
   12e88:	b	12d4c <_obstack_memory_used@@Base+0x310>
   12e8c:	ldr	r3, [sp, #32]
   12e90:	cmp	r3, #0
   12e94:	beq	12e54 <_obstack_memory_used@@Base+0x418>
   12e98:	mov	r3, #1
   12e9c:	str	r3, [sp, #60]	; 0x3c
   12ea0:	ldr	r3, [pc, #3712]	; 13d28 <_obstack_memory_used@@Base+0x12ec>
   12ea4:	str	r3, [sp, #72]	; 0x48
   12ea8:	mov	fp, #0
   12eac:	b	12d4c <_obstack_memory_used@@Base+0x310>
   12eb0:	bl	10fb4 <abort@plt>
   12eb4:	mov	r3, #0
   12eb8:	str	r3, [sp, #32]
   12ebc:	mov	r3, #1
   12ec0:	str	r3, [sp, #48]	; 0x30
   12ec4:	mov	fp, #0
   12ec8:	b	12d4c <_obstack_memory_used@@Base+0x310>
   12ecc:	ldr	r3, [sp, #32]
   12ed0:	str	r3, [sp, #48]	; 0x30
   12ed4:	mov	r3, #1
   12ed8:	str	r3, [sp, #60]	; 0x3c
   12edc:	ldr	r3, [pc, #3660]	; 13d30 <_obstack_memory_used@@Base+0x12f4>
   12ee0:	str	r3, [sp, #72]	; 0x48
   12ee4:	mov	fp, #0
   12ee8:	b	12d4c <_obstack_memory_used@@Base+0x310>
   12eec:	mov	r3, #1
   12ef0:	str	r3, [sp, #48]	; 0x30
   12ef4:	str	r3, [sp, #60]	; 0x3c
   12ef8:	ldr	r3, [pc, #3632]	; 13d30 <_obstack_memory_used@@Base+0x12f4>
   12efc:	str	r3, [sp, #72]	; 0x48
   12f00:	mov	fp, #1
   12f04:	b	12d4c <_obstack_memory_used@@Base+0x310>
   12f08:	mov	r3, #1
   12f0c:	str	r3, [sp, #60]	; 0x3c
   12f10:	ldr	r3, [pc, #3600]	; 13d28 <_obstack_memory_used@@Base+0x12ec>
   12f14:	str	r3, [sp, #72]	; 0x48
   12f18:	mov	fp, #0
   12f1c:	mov	sl, #2
   12f20:	b	12d4c <_obstack_memory_used@@Base+0x310>
   12f24:	mov	r3, #0
   12f28:	str	r3, [sp, #32]
   12f2c:	mov	r3, #1
   12f30:	str	r3, [sp, #60]	; 0x3c
   12f34:	ldr	r3, [pc, #3564]	; 13d28 <_obstack_memory_used@@Base+0x12ec>
   12f38:	str	r3, [sp, #72]	; 0x48
   12f3c:	mov	fp, #1
   12f40:	mov	sl, #2
   12f44:	b	12d4c <_obstack_memory_used@@Base+0x310>
   12f48:	mov	r3, #0
   12f4c:	str	r3, [sp, #56]	; 0x38
   12f50:	ldr	r3, [sp, #52]	; 0x34
   12f54:	add	r2, r3, r6
   12f58:	str	r2, [sp, #64]	; 0x40
   12f5c:	ldrb	r4, [r3, r6]
   12f60:	cmp	r4, #126	; 0x7e
   12f64:	ldrls	pc, [pc, r4, lsl #2]
   12f68:	b	137a4 <_obstack_memory_used@@Base+0xd68>
   12f6c:	andeq	r3, r1, r4, lsl #3
   12f70:	andeq	r3, r1, r4, lsr #15
   12f74:	andeq	r3, r1, r4, lsr #15
   12f78:	andeq	r3, r1, r4, lsr #15
   12f7c:	andeq	r3, r1, r4, lsr #15
   12f80:	andeq	r3, r1, r4, lsr #15
   12f84:	andeq	r3, r1, r4, lsr #15
   12f88:	andeq	r3, r1, r0, ror #9
   12f8c:	andeq	r3, r1, ip, ror r1
   12f90:	muleq	r1, r8, r4
   12f94:	muleq	r1, r0, r4
   12f98:	andeq	r3, r1, r0, lsl #8
   12f9c:	strdeq	r3, [r1], -r8
   12fa0:	andeq	r3, r1, r4, ror r1
   12fa4:	andeq	r3, r1, r4, lsr #15
   12fa8:	andeq	r3, r1, r4, lsr #15
   12fac:	andeq	r3, r1, r4, lsr #15
   12fb0:	andeq	r3, r1, r4, lsr #15
   12fb4:	andeq	r3, r1, r4, lsr #15
   12fb8:	andeq	r3, r1, r4, lsr #15
   12fbc:	andeq	r3, r1, r4, lsr #15
   12fc0:	andeq	r3, r1, r4, lsr #15
   12fc4:	andeq	r3, r1, r4, lsr #15
   12fc8:	andeq	r3, r1, r4, lsr #15
   12fcc:	andeq	r3, r1, r4, lsr #15
   12fd0:	andeq	r3, r1, r4, lsr #15
   12fd4:	andeq	r3, r1, r4, lsr #15
   12fd8:	andeq	r3, r1, r4, lsr #15
   12fdc:	andeq	r3, r1, r4, lsr #15
   12fe0:	andeq	r3, r1, r4, lsr #15
   12fe4:	andeq	r3, r1, r4, lsr #15
   12fe8:	andeq	r3, r1, r4, lsr #15
   12fec:	andeq	r3, r1, r4, lsr r5
   12ff0:	andeq	r3, r1, r0, lsr r5
   12ff4:	andeq	r3, r1, r0, lsr r5
   12ff8:	andeq	r3, r1, r8, lsl #10
   12ffc:	andeq	r3, r1, r0, lsr r5
   13000:	andeq	r3, r1, r8, ror fp
   13004:	andeq	r3, r1, r0, lsr r5
   13008:	andeq	r3, r1, r8, lsl #14
   1300c:	andeq	r3, r1, r0, lsr r5
   13010:	andeq	r3, r1, r0, lsr r5
   13014:	andeq	r3, r1, r0, lsr r5
   13018:	andeq	r3, r1, r8, ror fp
   1301c:	andeq	r3, r1, r8, ror fp
   13020:	andeq	r3, r1, r8, ror fp
   13024:	andeq	r3, r1, r8, ror fp
   13028:	andeq	r3, r1, r8, ror fp
   1302c:	andeq	r3, r1, r8, ror fp
   13030:	andeq	r3, r1, r8, ror fp
   13034:	andeq	r3, r1, r8, ror fp
   13038:	andeq	r3, r1, r8, ror fp
   1303c:	andeq	r3, r1, r8, ror fp
   13040:	andeq	r3, r1, r8, ror fp
   13044:	andeq	r3, r1, r8, ror fp
   13048:	andeq	r3, r1, r8, ror fp
   1304c:	andeq	r3, r1, r8, ror fp
   13050:	andeq	r3, r1, r8, ror fp
   13054:	andeq	r3, r1, r8, ror fp
   13058:	andeq	r3, r1, r0, lsr r5
   1305c:	andeq	r3, r1, r0, lsr r5
   13060:	andeq	r3, r1, r0, lsr r5
   13064:	andeq	r3, r1, r0, lsr r5
   13068:	andeq	r3, r1, ip, lsl #5
   1306c:	andeq	r3, r1, r4, lsr #15
   13070:	andeq	r3, r1, r8, ror fp
   13074:	andeq	r3, r1, r8, ror fp
   13078:	andeq	r3, r1, r8, ror fp
   1307c:	andeq	r3, r1, r8, ror fp
   13080:	andeq	r3, r1, r8, ror fp
   13084:	andeq	r3, r1, r8, ror fp
   13088:	andeq	r3, r1, r8, ror fp
   1308c:	andeq	r3, r1, r8, ror fp
   13090:	andeq	r3, r1, r8, ror fp
   13094:	andeq	r3, r1, r8, ror fp
   13098:	andeq	r3, r1, r8, ror fp
   1309c:	andeq	r3, r1, r8, ror fp
   130a0:	andeq	r3, r1, r8, ror fp
   130a4:	andeq	r3, r1, r8, ror fp
   130a8:	andeq	r3, r1, r8, ror fp
   130ac:	andeq	r3, r1, r8, ror fp
   130b0:	andeq	r3, r1, r8, ror fp
   130b4:	andeq	r3, r1, r8, ror fp
   130b8:	andeq	r3, r1, r8, ror fp
   130bc:	andeq	r3, r1, r8, ror fp
   130c0:	andeq	r3, r1, r8, ror fp
   130c4:	andeq	r3, r1, r8, ror fp
   130c8:	andeq	r3, r1, r8, ror fp
   130cc:	andeq	r3, r1, r8, ror fp
   130d0:	andeq	r3, r1, r8, ror fp
   130d4:	andeq	r3, r1, r8, ror fp
   130d8:	andeq	r3, r1, r0, lsr r5
   130dc:	andeq	r3, r1, r8, lsl #8
   130e0:	andeq	r3, r1, r8, ror fp
   130e4:	andeq	r3, r1, r0, lsr r5
   130e8:	andeq	r3, r1, r8, ror fp
   130ec:	andeq	r3, r1, r0, lsr r5
   130f0:	andeq	r3, r1, r8, ror fp
   130f4:	andeq	r3, r1, r8, ror fp
   130f8:	andeq	r3, r1, r8, ror fp
   130fc:	andeq	r3, r1, r8, ror fp
   13100:	andeq	r3, r1, r8, ror fp
   13104:	andeq	r3, r1, r8, ror fp
   13108:	andeq	r3, r1, r8, ror fp
   1310c:	andeq	r3, r1, r8, ror fp
   13110:	andeq	r3, r1, r8, ror fp
   13114:	andeq	r3, r1, r8, ror fp
   13118:	andeq	r3, r1, r8, ror fp
   1311c:	andeq	r3, r1, r8, ror fp
   13120:	andeq	r3, r1, r8, ror fp
   13124:	andeq	r3, r1, r8, ror fp
   13128:	andeq	r3, r1, r8, ror fp
   1312c:	andeq	r3, r1, r8, ror fp
   13130:	andeq	r3, r1, r8, ror fp
   13134:	andeq	r3, r1, r8, ror fp
   13138:	andeq	r3, r1, r8, ror fp
   1313c:	andeq	r3, r1, r8, ror fp
   13140:	andeq	r3, r1, r8, ror fp
   13144:	andeq	r3, r1, r8, ror fp
   13148:	andeq	r3, r1, r8, ror fp
   1314c:	andeq	r3, r1, r8, ror fp
   13150:	andeq	r3, r1, r8, ror fp
   13154:	andeq	r3, r1, r8, ror fp
   13158:	andeq	r3, r1, r8, ror #9
   1315c:	andeq	r3, r1, r0, lsr r5
   13160:	andeq	r3, r1, r8, ror #9
   13164:	andeq	r3, r1, r8, lsl #10
   13168:	mov	r3, #0
   1316c:	str	r3, [sp, #56]	; 0x38
   13170:	b	12f50 <_obstack_memory_used@@Base+0x514>
   13174:	mov	r3, #114	; 0x72
   13178:	b	1349c <_obstack_memory_used@@Base+0xa60>
   1317c:	mov	r3, #98	; 0x62
   13180:	b	134b4 <_obstack_memory_used@@Base+0xa78>
   13184:	ldr	r3, [sp, #48]	; 0x30
   13188:	cmp	r3, #0
   1318c:	beq	13274 <_obstack_memory_used@@Base+0x838>
   13190:	ldr	r3, [sp, #32]
   13194:	cmp	r3, #0
   13198:	bne	13cfc <_obstack_memory_used@@Base+0x12c0>
   1319c:	ldr	r3, [sp, #44]	; 0x2c
   131a0:	eor	r3, r3, #1
   131a4:	cmp	sl, #2
   131a8:	movne	r3, #0
   131ac:	andeq	r3, r3, #1
   131b0:	cmp	r3, #0
   131b4:	moveq	r2, fp
   131b8:	beq	131fc <_obstack_memory_used@@Base+0x7c0>
   131bc:	cmp	r7, fp
   131c0:	ldrhi	r2, [sp, #36]	; 0x24
   131c4:	movhi	r1, #39	; 0x27
   131c8:	strbhi	r1, [r2, fp]
   131cc:	add	r2, fp, #1
   131d0:	cmp	r7, r2
   131d4:	ldrhi	r1, [sp, #36]	; 0x24
   131d8:	movhi	r0, #36	; 0x24
   131dc:	strbhi	r0, [r1, r2]
   131e0:	add	r2, fp, #2
   131e4:	cmp	r7, r2
   131e8:	ldrhi	r1, [sp, #36]	; 0x24
   131ec:	movhi	r0, #39	; 0x27
   131f0:	strbhi	r0, [r1, r2]
   131f4:	add	r2, fp, #3
   131f8:	str	r3, [sp, #44]	; 0x2c
   131fc:	cmp	r7, r2
   13200:	ldrhi	r3, [sp, #36]	; 0x24
   13204:	movhi	r1, #92	; 0x5c
   13208:	strbhi	r1, [r3, r2]
   1320c:	add	fp, r2, #1
   13210:	cmp	r5, #0
   13214:	beq	13b80 <_obstack_memory_used@@Base+0x1144>
   13218:	add	r3, r6, #1
   1321c:	ldr	r1, [sp, #28]
   13220:	cmp	r1, r3
   13224:	bls	13b90 <_obstack_memory_used@@Base+0x1154>
   13228:	ldr	r1, [sp, #52]	; 0x34
   1322c:	ldrb	r3, [r1, r3]
   13230:	sub	r3, r3, #48	; 0x30
   13234:	uxtb	r3, r3
   13238:	cmp	r3, #9
   1323c:	bhi	13b9c <_obstack_memory_used@@Base+0x1160>
   13240:	cmp	r7, fp
   13244:	movhi	r3, #48	; 0x30
   13248:	ldrhi	r1, [sp, #36]	; 0x24
   1324c:	strbhi	r3, [r1, fp]
   13250:	add	r3, r2, #2
   13254:	cmp	r7, r3
   13258:	movhi	r1, #48	; 0x30
   1325c:	ldrhi	r0, [sp, #36]	; 0x24
   13260:	strbhi	r1, [r0, r3]
   13264:	add	fp, r2, #3
   13268:	ldr	r8, [sp, #32]
   1326c:	mov	r4, #48	; 0x30
   13270:	b	1354c <_obstack_memory_used@@Base+0xb10>
   13274:	ldr	r3, [sp, #156]	; 0x9c
   13278:	tst	r3, #1
   1327c:	bne	13640 <_obstack_memory_used@@Base+0xc04>
   13280:	ldr	r5, [sp, #48]	; 0x30
   13284:	mov	r8, r5
   13288:	b	1354c <_obstack_memory_used@@Base+0xb10>
   1328c:	cmp	sl, #2
   13290:	beq	132a8 <_obstack_memory_used@@Base+0x86c>
   13294:	cmp	sl, #5
   13298:	beq	132c0 <_obstack_memory_used@@Base+0x884>
   1329c:	mov	r8, #0
   132a0:	mov	r5, r8
   132a4:	b	1354c <_obstack_memory_used@@Base+0xb10>
   132a8:	ldr	r3, [sp, #32]
   132ac:	cmp	r3, #0
   132b0:	bne	13d10 <_obstack_memory_used@@Base+0x12d4>
   132b4:	mov	r8, r3
   132b8:	mov	r5, r3
   132bc:	b	1354c <_obstack_memory_used@@Base+0xb10>
   132c0:	ldr	r3, [sp, #156]	; 0x9c
   132c4:	tst	r3, #4
   132c8:	beq	13ba8 <_obstack_memory_used@@Base+0x116c>
   132cc:	add	r3, r6, #2
   132d0:	ldr	r2, [sp, #28]
   132d4:	cmp	r2, r3
   132d8:	bls	13bb4 <_obstack_memory_used@@Base+0x1178>
   132dc:	ldr	r2, [sp, #52]	; 0x34
   132e0:	add	r2, r2, r6
   132e4:	ldrb	r2, [r2, #1]
   132e8:	cmp	r2, #63	; 0x3f
   132ec:	movne	r8, #0
   132f0:	movne	r5, r8
   132f4:	bne	1354c <_obstack_memory_used@@Base+0xb10>
   132f8:	ldr	r2, [sp, #52]	; 0x34
   132fc:	ldrb	r2, [r2, r3]
   13300:	sub	r1, r2, #33	; 0x21
   13304:	cmp	r1, #29
   13308:	ldrls	pc, [pc, r1, lsl #2]
   1330c:	b	13bc0 <_obstack_memory_used@@Base+0x1184>
   13310:	andeq	r3, r1, r8, lsl #7
   13314:	andeq	r3, r1, r0, asr #23
   13318:	andeq	r3, r1, r0, asr #23
   1331c:	andeq	r3, r1, r0, asr #23
   13320:	andeq	r3, r1, r0, asr #23
   13324:	andeq	r3, r1, r0, asr #23
   13328:	andeq	r3, r1, r8, lsl #7
   1332c:	andeq	r3, r1, r8, lsl #7
   13330:	andeq	r3, r1, r8, lsl #7
   13334:	andeq	r3, r1, r0, asr #23
   13338:	andeq	r3, r1, r0, asr #23
   1333c:	andeq	r3, r1, r0, asr #23
   13340:	andeq	r3, r1, r8, lsl #7
   13344:	andeq	r3, r1, r0, asr #23
   13348:	andeq	r3, r1, r8, lsl #7
   1334c:	andeq	r3, r1, r0, asr #23
   13350:	andeq	r3, r1, r0, asr #23
   13354:	andeq	r3, r1, r0, asr #23
   13358:	andeq	r3, r1, r0, asr #23
   1335c:	andeq	r3, r1, r0, asr #23
   13360:	andeq	r3, r1, r0, asr #23
   13364:	andeq	r3, r1, r0, asr #23
   13368:	andeq	r3, r1, r0, asr #23
   1336c:	andeq	r3, r1, r0, asr #23
   13370:	andeq	r3, r1, r0, asr #23
   13374:	andeq	r3, r1, r0, asr #23
   13378:	andeq	r3, r1, r0, asr #23
   1337c:	andeq	r3, r1, r8, lsl #7
   13380:	andeq	r3, r1, r8, lsl #7
   13384:	andeq	r3, r1, r8, lsl #7
   13388:	ldr	r1, [sp, #32]
   1338c:	cmp	r1, #0
   13390:	bne	13dd0 <_obstack_memory_used@@Base+0x1394>
   13394:	cmp	r7, fp
   13398:	movhi	r1, #63	; 0x3f
   1339c:	ldrhi	r0, [sp, #36]	; 0x24
   133a0:	strbhi	r1, [r0, fp]
   133a4:	add	r1, fp, #1
   133a8:	cmp	r7, r1
   133ac:	ldrhi	r0, [sp, #36]	; 0x24
   133b0:	movhi	ip, #34	; 0x22
   133b4:	strbhi	ip, [r0, r1]
   133b8:	add	r1, fp, #2
   133bc:	cmp	r7, r1
   133c0:	ldrhi	r0, [sp, #36]	; 0x24
   133c4:	movhi	ip, #34	; 0x22
   133c8:	strbhi	ip, [r0, r1]
   133cc:	add	r1, fp, #3
   133d0:	cmp	r7, r1
   133d4:	movhi	r0, #63	; 0x3f
   133d8:	ldrhi	ip, [sp, #36]	; 0x24
   133dc:	strbhi	r0, [ip, r1]
   133e0:	add	fp, fp, #4
   133e4:	ldr	r5, [sp, #32]
   133e8:	mov	r8, r5
   133ec:	mov	r4, r2
   133f0:	mov	r6, r3
   133f4:	b	1354c <_obstack_memory_used@@Base+0xb10>
   133f8:	mov	r3, #102	; 0x66
   133fc:	b	134b4 <_obstack_memory_used@@Base+0xa78>
   13400:	mov	r3, #118	; 0x76
   13404:	b	134b4 <_obstack_memory_used@@Base+0xa78>
   13408:	cmp	sl, #2
   1340c:	beq	13478 <_obstack_memory_used@@Base+0xa3c>
   13410:	ldr	r3, [sp, #48]	; 0x30
   13414:	ldr	r2, [sp, #32]
   13418:	and	r3, r3, r2
   1341c:	tst	r9, r3
   13420:	moveq	r3, r4
   13424:	beq	134b4 <_obstack_memory_used@@Base+0xa78>
   13428:	mov	r8, #0
   1342c:	mov	r5, r8
   13430:	eor	r5, r5, #1
   13434:	ldr	r3, [sp, #44]	; 0x2c
   13438:	and	r5, r5, r3
   1343c:	tst	r5, #255	; 0xff
   13440:	beq	13620 <_obstack_memory_used@@Base+0xbe4>
   13444:	cmp	r7, fp
   13448:	ldrhi	r3, [sp, #36]	; 0x24
   1344c:	movhi	r2, #39	; 0x27
   13450:	strbhi	r2, [r3, fp]
   13454:	add	r3, fp, #1
   13458:	cmp	r7, r3
   1345c:	ldrhi	r2, [sp, #36]	; 0x24
   13460:	movhi	r1, #39	; 0x27
   13464:	strbhi	r1, [r2, r3]
   13468:	add	fp, fp, #2
   1346c:	mov	r3, #0
   13470:	str	r3, [sp, #44]	; 0x2c
   13474:	b	13620 <_obstack_memory_used@@Base+0xbe4>
   13478:	ldr	r3, [sp, #32]
   1347c:	cmp	r3, #0
   13480:	bne	13d1c <_obstack_memory_used@@Base+0x12e0>
   13484:	mov	r8, r3
   13488:	mov	r5, r3
   1348c:	b	13430 <_obstack_memory_used@@Base+0x9f4>
   13490:	mov	r3, #110	; 0x6e
   13494:	b	1349c <_obstack_memory_used@@Base+0xa60>
   13498:	mov	r3, #116	; 0x74
   1349c:	ldr	r2, [sp, #32]
   134a0:	cmp	sl, #2
   134a4:	movne	r2, #0
   134a8:	andeq	r2, r2, #1
   134ac:	cmp	r2, #0
   134b0:	bne	134d4 <_obstack_memory_used@@Base+0xa98>
   134b4:	ldr	r2, [sp, #48]	; 0x30
   134b8:	cmp	r2, #0
   134bc:	moveq	r8, r2
   134c0:	moveq	r5, r2
   134c4:	beq	1354c <_obstack_memory_used@@Base+0xb10>
   134c8:	mov	r4, r3
   134cc:	mov	r8, #0
   134d0:	b	135a4 <_obstack_memory_used@@Base+0xb68>
   134d4:	mov	r8, sl
   134d8:	mov	sl, r7
   134dc:	b	13d48 <_obstack_memory_used@@Base+0x130c>
   134e0:	mov	r3, #97	; 0x61
   134e4:	b	134b4 <_obstack_memory_used@@Base+0xa78>
   134e8:	ldr	r3, [sp, #28]
   134ec:	cmn	r3, #1
   134f0:	beq	1351c <_obstack_memory_used@@Base+0xae0>
   134f4:	ldr	r3, [sp, #28]
   134f8:	subs	r3, r3, #1
   134fc:	movne	r3, #1
   13500:	cmp	r3, #0
   13504:	bne	13bcc <_obstack_memory_used@@Base+0x1190>
   13508:	cmp	r6, #0
   1350c:	beq	13534 <_obstack_memory_used@@Base+0xaf8>
   13510:	mov	r8, #0
   13514:	mov	r5, r8
   13518:	b	1354c <_obstack_memory_used@@Base+0xb10>
   1351c:	ldr	r3, [sp, #52]	; 0x34
   13520:	ldrb	r3, [r3, #1]
   13524:	adds	r3, r3, #0
   13528:	movne	r3, #1
   1352c:	b	13500 <_obstack_memory_used@@Base+0xac4>
   13530:	mov	r8, #0
   13534:	ldr	r5, [sp, #32]
   13538:	cmp	sl, #2
   1353c:	movne	r5, #0
   13540:	andeq	r5, r5, #1
   13544:	cmp	r5, #0
   13548:	bne	136fc <_obstack_memory_used@@Base+0xcc0>
   1354c:	ldr	r3, [sp, #68]	; 0x44
   13550:	cmp	sl, #2
   13554:	orreq	r3, r3, #1
   13558:	eor	r3, r3, #1
   1355c:	ldr	r2, [sp, #32]
   13560:	orr	r3, r2, r3
   13564:	tst	r3, #255	; 0xff
   13568:	beq	13598 <_obstack_memory_used@@Base+0xb5c>
   1356c:	ldr	r3, [sp, #160]	; 0xa0
   13570:	cmp	r3, #0
   13574:	beq	13598 <_obstack_memory_used@@Base+0xb5c>
   13578:	lsr	r2, r4, #5
   1357c:	uxtb	r2, r2
   13580:	and	r3, r4, #31
   13584:	ldr	r1, [sp, #160]	; 0xa0
   13588:	ldr	r2, [r1, r2, lsl #2]
   1358c:	lsr	r3, r2, r3
   13590:	tst	r3, #1
   13594:	bne	135a4 <_obstack_memory_used@@Base+0xb68>
   13598:	ldr	r3, [sp, #56]	; 0x38
   1359c:	cmp	r3, #0
   135a0:	beq	13430 <_obstack_memory_used@@Base+0x9f4>
   135a4:	ldr	r3, [sp, #32]
   135a8:	cmp	r3, #0
   135ac:	bne	13db8 <_obstack_memory_used@@Base+0x137c>
   135b0:	ldr	r3, [sp, #44]	; 0x2c
   135b4:	eor	r3, r3, #1
   135b8:	cmp	sl, #2
   135bc:	movne	r3, #0
   135c0:	andeq	r3, r3, #1
   135c4:	cmp	r3, #0
   135c8:	beq	1360c <_obstack_memory_used@@Base+0xbd0>
   135cc:	cmp	r7, fp
   135d0:	ldrhi	r2, [sp, #36]	; 0x24
   135d4:	movhi	r1, #39	; 0x27
   135d8:	strbhi	r1, [r2, fp]
   135dc:	add	r2, fp, #1
   135e0:	cmp	r7, r2
   135e4:	ldrhi	r1, [sp, #36]	; 0x24
   135e8:	movhi	r0, #36	; 0x24
   135ec:	strbhi	r0, [r1, r2]
   135f0:	add	r2, fp, #2
   135f4:	cmp	r7, r2
   135f8:	ldrhi	r1, [sp, #36]	; 0x24
   135fc:	movhi	r0, #39	; 0x27
   13600:	strbhi	r0, [r1, r2]
   13604:	add	fp, fp, #3
   13608:	str	r3, [sp, #44]	; 0x2c
   1360c:	cmp	r7, fp
   13610:	ldrhi	r3, [sp, #36]	; 0x24
   13614:	movhi	r2, #92	; 0x5c
   13618:	strbhi	r2, [r3, fp]
   1361c:	add	fp, fp, #1
   13620:	cmp	fp, r7
   13624:	ldrcc	r3, [sp, #36]	; 0x24
   13628:	strbcc	r4, [r3, fp]
   1362c:	add	fp, fp, #1
   13630:	ldr	r3, [sp, #40]	; 0x28
   13634:	cmp	r8, #0
   13638:	moveq	r3, #0
   1363c:	str	r3, [sp, #40]	; 0x28
   13640:	add	r6, r6, #1
   13644:	ldr	r3, [sp, #28]
   13648:	cmn	r3, #1
   1364c:	beq	13bd8 <_obstack_memory_used@@Base+0x119c>
   13650:	ldr	r3, [sp, #28]
   13654:	subs	r8, r3, r6
   13658:	movne	r8, #1
   1365c:	cmp	r8, #0
   13660:	beq	13bec <_obstack_memory_used@@Base+0x11b0>
   13664:	ldr	r5, [sp, #48]	; 0x30
   13668:	cmp	sl, #2
   1366c:	moveq	r5, #0
   13670:	andne	r5, r5, #1
   13674:	ldr	r3, [sp, #60]	; 0x3c
   13678:	adds	r9, r3, #0
   1367c:	movne	r9, #1
   13680:	ands	r2, r5, r9
   13684:	str	r2, [sp, #56]	; 0x38
   13688:	beq	12f50 <_obstack_memory_used@@Base+0x514>
   1368c:	add	r4, r6, r3
   13690:	ldr	r2, [sp, #28]
   13694:	cmp	r3, #1
   13698:	movls	r3, #0
   1369c:	movhi	r3, #1
   136a0:	cmn	r2, #1
   136a4:	movne	r3, #0
   136a8:	cmp	r3, #0
   136ac:	beq	136bc <_obstack_memory_used@@Base+0xc80>
   136b0:	ldr	r0, [sp, #52]	; 0x34
   136b4:	bl	10f0c <strlen@plt>
   136b8:	str	r0, [sp, #28]
   136bc:	ldr	r3, [sp, #28]
   136c0:	cmp	r3, r4
   136c4:	bcc	12f48 <_obstack_memory_used@@Base+0x50c>
   136c8:	ldr	r2, [sp, #60]	; 0x3c
   136cc:	ldr	r1, [sp, #72]	; 0x48
   136d0:	ldr	r3, [sp, #52]	; 0x34
   136d4:	add	r0, r3, r6
   136d8:	bl	10de0 <memcmp@plt>
   136dc:	cmp	r0, #0
   136e0:	bne	13168 <_obstack_memory_used@@Base+0x72c>
   136e4:	ldr	r3, [sp, #32]
   136e8:	cmp	r3, #0
   136ec:	beq	12f50 <_obstack_memory_used@@Base+0x514>
   136f0:	mov	r8, sl
   136f4:	mov	sl, r7
   136f8:	b	13d48 <_obstack_memory_used@@Base+0x130c>
   136fc:	mov	r8, sl
   13700:	mov	sl, r7
   13704:	b	13d48 <_obstack_memory_used@@Base+0x130c>
   13708:	cmp	sl, #2
   1370c:	strne	r8, [sp, #80]	; 0x50
   13710:	movne	r5, #0
   13714:	bne	1354c <_obstack_memory_used@@Base+0xb10>
   13718:	ldr	r3, [sp, #32]
   1371c:	cmp	r3, #0
   13720:	bne	13d34 <_obstack_memory_used@@Base+0x12f8>
   13724:	ldr	r2, [sp, #76]	; 0x4c
   13728:	adds	r3, r7, #0
   1372c:	movne	r3, #1
   13730:	cmp	r2, #0
   13734:	movne	r3, #0
   13738:	cmp	r3, #0
   1373c:	movne	r3, #0
   13740:	bne	13770 <_obstack_memory_used@@Base+0xd34>
   13744:	cmp	r7, fp
   13748:	ldrhi	r3, [sp, #36]	; 0x24
   1374c:	movhi	r2, #39	; 0x27
   13750:	strbhi	r2, [r3, fp]
   13754:	add	r3, fp, #1
   13758:	cmp	r7, r3
   1375c:	ldrhi	r2, [sp, #36]	; 0x24
   13760:	movhi	r1, #92	; 0x5c
   13764:	strbhi	r1, [r2, r3]
   13768:	mov	r3, r7
   1376c:	ldr	r7, [sp, #76]	; 0x4c
   13770:	add	r2, fp, #2
   13774:	cmp	r2, r3
   13778:	ldrcc	r1, [sp, #36]	; 0x24
   1377c:	movcc	r0, #39	; 0x27
   13780:	strbcc	r0, [r1, r2]
   13784:	add	fp, fp, #3
   13788:	ldr	r2, [sp, #32]
   1378c:	mov	r5, r2
   13790:	str	r8, [sp, #80]	; 0x50
   13794:	str	r2, [sp, #44]	; 0x2c
   13798:	str	r7, [sp, #76]	; 0x4c
   1379c:	mov	r7, r3
   137a0:	b	1354c <_obstack_memory_used@@Base+0xb10>
   137a4:	ldr	r5, [sp, #84]	; 0x54
   137a8:	cmp	r5, #1
   137ac:	beq	137dc <_obstack_memory_used@@Base+0xda0>
   137b0:	mov	r3, #0
   137b4:	str	r3, [sp, #104]	; 0x68
   137b8:	str	r3, [sp, #108]	; 0x6c
   137bc:	ldr	r3, [sp, #28]
   137c0:	cmn	r3, #1
   137c4:	beq	13810 <_obstack_memory_used@@Base+0xdd4>
   137c8:	mov	r3, #0
   137cc:	str	r4, [sp, #88]	; 0x58
   137d0:	str	fp, [sp, #92]	; 0x5c
   137d4:	mov	fp, r3
   137d8:	b	13938 <_obstack_memory_used@@Base+0xefc>
   137dc:	bl	10ef4 <__ctype_b_loc@plt>
   137e0:	ldr	r2, [r0]
   137e4:	lsl	r3, r4, #1
   137e8:	ldrh	r8, [r2, r3]
   137ec:	lsr	r8, r8, #14
   137f0:	and	r8, r8, #1
   137f4:	mov	r2, r5
   137f8:	eor	r5, r8, #1
   137fc:	ldr	r3, [sp, #48]	; 0x30
   13800:	and	r5, r5, r3
   13804:	ands	r5, r5, #255	; 0xff
   13808:	beq	1354c <_obstack_memory_used@@Base+0xb10>
   1380c:	b	139d0 <_obstack_memory_used@@Base+0xf94>
   13810:	ldr	r0, [sp, #52]	; 0x34
   13814:	bl	10f0c <strlen@plt>
   13818:	str	r0, [sp, #28]
   1381c:	b	137c8 <_obstack_memory_used@@Base+0xd8c>
   13820:	mov	r2, fp
   13824:	mov	r1, r4
   13828:	ldr	r4, [sp, #88]	; 0x58
   1382c:	ldr	fp, [sp, #92]	; 0x5c
   13830:	ldr	r0, [sp, #28]
   13834:	cmp	r0, r5
   13838:	bls	13a04 <_obstack_memory_used@@Base+0xfc8>
   1383c:	ldrb	r3, [r1]
   13840:	cmp	r3, #0
   13844:	beq	13a0c <_obstack_memory_used@@Base+0xfd0>
   13848:	mov	r3, r1
   1384c:	add	r2, r2, #1
   13850:	add	r1, r6, r2
   13854:	cmp	r0, r1
   13858:	bls	13a14 <_obstack_memory_used@@Base+0xfd8>
   1385c:	ldrb	r1, [r3, #1]!
   13860:	cmp	r1, #0
   13864:	bne	1384c <_obstack_memory_used@@Base+0xe10>
   13868:	mov	r8, #0
   1386c:	b	139c8 <_obstack_memory_used@@Base+0xf8c>
   13870:	cmp	r4, r5
   13874:	beq	13914 <_obstack_memory_used@@Base+0xed8>
   13878:	ldrb	r3, [r4, #1]!
   1387c:	sub	r3, r3, #91	; 0x5b
   13880:	cmp	r3, #33	; 0x21
   13884:	ldrls	pc, [pc, r3, lsl #2]
   13888:	b	13870 <_obstack_memory_used@@Base+0xe34>
   1388c:	andeq	r3, r1, r0, asr #26
   13890:	andeq	r3, r1, r0, asr #26
   13894:	andeq	r3, r1, r0, ror r8
   13898:	andeq	r3, r1, r0, asr #26
   1389c:	andeq	r3, r1, r0, ror r8
   138a0:	andeq	r3, r1, r0, asr #26
   138a4:	andeq	r3, r1, r0, ror r8
   138a8:	andeq	r3, r1, r0, ror r8
   138ac:	andeq	r3, r1, r0, ror r8
   138b0:	andeq	r3, r1, r0, ror r8
   138b4:	andeq	r3, r1, r0, ror r8
   138b8:	andeq	r3, r1, r0, ror r8
   138bc:	andeq	r3, r1, r0, ror r8
   138c0:	andeq	r3, r1, r0, ror r8
   138c4:	andeq	r3, r1, r0, ror r8
   138c8:	andeq	r3, r1, r0, ror r8
   138cc:	andeq	r3, r1, r0, ror r8
   138d0:	andeq	r3, r1, r0, ror r8
   138d4:	andeq	r3, r1, r0, ror r8
   138d8:	andeq	r3, r1, r0, ror r8
   138dc:	andeq	r3, r1, r0, ror r8
   138e0:	andeq	r3, r1, r0, ror r8
   138e4:	andeq	r3, r1, r0, ror r8
   138e8:	andeq	r3, r1, r0, ror r8
   138ec:	andeq	r3, r1, r0, ror r8
   138f0:	andeq	r3, r1, r0, ror r8
   138f4:	andeq	r3, r1, r0, ror r8
   138f8:	andeq	r3, r1, r0, ror r8
   138fc:	andeq	r3, r1, r0, ror r8
   13900:	andeq	r3, r1, r0, ror r8
   13904:	andeq	r3, r1, r0, ror r8
   13908:	andeq	r3, r1, r0, ror r8
   1390c:	andeq	r3, r1, r0, ror r8
   13910:	andeq	r3, r1, r0, asr #26
   13914:	ldr	r0, [sp, #100]	; 0x64
   13918:	bl	10e28 <iswprint@plt>
   1391c:	cmp	r0, #0
   13920:	moveq	r8, #0
   13924:	add	fp, fp, r9
   13928:	add	r0, sp, #104	; 0x68
   1392c:	bl	10dc8 <mbsinit@plt>
   13930:	cmp	r0, #0
   13934:	bne	139a8 <_obstack_memory_used@@Base+0xf6c>
   13938:	add	r5, r6, fp
   1393c:	ldr	r3, [sp, #52]	; 0x34
   13940:	add	r4, r3, r5
   13944:	add	r3, sp, #104	; 0x68
   13948:	ldr	r2, [sp, #28]
   1394c:	sub	r2, r2, r5
   13950:	mov	r1, r4
   13954:	add	r0, sp, #100	; 0x64
   13958:	bl	152b8 <_obstack_memory_used@@Base+0x287c>
   1395c:	subs	r9, r0, #0
   13960:	beq	13a1c <_obstack_memory_used@@Base+0xfe0>
   13964:	cmn	r9, #1
   13968:	beq	139b8 <_obstack_memory_used@@Base+0xf7c>
   1396c:	cmn	r9, #2
   13970:	beq	13820 <_obstack_memory_used@@Base+0xde4>
   13974:	ldr	r3, [sp, #32]
   13978:	cmp	sl, #2
   1397c:	movne	r3, #0
   13980:	andeq	r3, r3, #1
   13984:	cmp	r3, #0
   13988:	beq	13914 <_obstack_memory_used@@Base+0xed8>
   1398c:	cmp	r9, #1
   13990:	bls	13914 <_obstack_memory_used@@Base+0xed8>
   13994:	sub	r3, r9, #1
   13998:	add	r5, r3, r5
   1399c:	ldr	r3, [sp, #52]	; 0x34
   139a0:	add	r5, r3, r5
   139a4:	b	13878 <_obstack_memory_used@@Base+0xe3c>
   139a8:	ldr	r4, [sp, #88]	; 0x58
   139ac:	mov	r2, fp
   139b0:	ldr	fp, [sp, #92]	; 0x5c
   139b4:	b	139c8 <_obstack_memory_used@@Base+0xf8c>
   139b8:	ldr	r4, [sp, #88]	; 0x58
   139bc:	mov	r2, fp
   139c0:	ldr	fp, [sp, #92]	; 0x5c
   139c4:	mov	r8, #0
   139c8:	cmp	r2, #1
   139cc:	bls	137f8 <_obstack_memory_used@@Base+0xdbc>
   139d0:	add	r1, r6, r2
   139d4:	ldr	ip, [sp, #64]	; 0x40
   139d8:	mov	r5, #0
   139dc:	eor	r3, r8, #1
   139e0:	ldr	r2, [sp, #48]	; 0x30
   139e4:	and	r3, r3, r2
   139e8:	uxtb	r3, r3
   139ec:	ldr	r9, [sp, #32]
   139f0:	ldr	lr, [sp, #44]	; 0x2c
   139f4:	ldr	r2, [sp, #56]	; 0x38
   139f8:	str	r8, [sp, #56]	; 0x38
   139fc:	ldr	r0, [sp, #36]	; 0x24
   13a00:	b	13a9c <_obstack_memory_used@@Base+0x1060>
   13a04:	mov	r8, #0
   13a08:	b	139c8 <_obstack_memory_used@@Base+0xf8c>
   13a0c:	mov	r8, #0
   13a10:	b	139c8 <_obstack_memory_used@@Base+0xf8c>
   13a14:	mov	r8, #0
   13a18:	b	139c8 <_obstack_memory_used@@Base+0xf8c>
   13a1c:	ldr	r4, [sp, #88]	; 0x58
   13a20:	mov	r2, fp
   13a24:	ldr	fp, [sp, #92]	; 0x5c
   13a28:	b	139c8 <_obstack_memory_used@@Base+0xf8c>
   13a2c:	cmp	r2, #0
   13a30:	beq	13a44 <_obstack_memory_used@@Base+0x1008>
   13a34:	cmp	r7, fp
   13a38:	movhi	r2, #92	; 0x5c
   13a3c:	strbhi	r2, [r0, fp]
   13a40:	add	fp, fp, #1
   13a44:	add	r8, r6, #1
   13a48:	cmp	r1, r8
   13a4c:	bls	13b54 <_obstack_memory_used@@Base+0x1118>
   13a50:	eor	r2, r5, #1
   13a54:	and	r2, r2, lr
   13a58:	ands	r2, r2, #255	; 0xff
   13a5c:	beq	13b70 <_obstack_memory_used@@Base+0x1134>
   13a60:	cmp	r7, fp
   13a64:	movhi	r2, #39	; 0x27
   13a68:	strbhi	r2, [r0, fp]
   13a6c:	add	r2, fp, #1
   13a70:	cmp	r7, r2
   13a74:	movhi	lr, #39	; 0x27
   13a78:	strbhi	lr, [r0, r2]
   13a7c:	add	fp, fp, #2
   13a80:	mov	r6, r8
   13a84:	mov	r2, r3
   13a88:	mov	lr, r3
   13a8c:	cmp	r7, fp
   13a90:	strbhi	r4, [r0, fp]
   13a94:	add	fp, fp, #1
   13a98:	ldrb	r4, [ip, #1]!
   13a9c:	cmp	r3, #0
   13aa0:	beq	13a2c <_obstack_memory_used@@Base+0xff0>
   13aa4:	cmp	r9, #0
   13aa8:	bne	13dac <_obstack_memory_used@@Base+0x1370>
   13aac:	eor	r5, lr, #1
   13ab0:	cmp	sl, #2
   13ab4:	movne	r5, #0
   13ab8:	andeq	r5, r5, #1
   13abc:	cmp	r5, #0
   13ac0:	beq	13af8 <_obstack_memory_used@@Base+0x10bc>
   13ac4:	cmp	r7, fp
   13ac8:	movhi	lr, #39	; 0x27
   13acc:	strbhi	lr, [r0, fp]
   13ad0:	add	lr, fp, #1
   13ad4:	cmp	r7, lr
   13ad8:	movhi	r8, #36	; 0x24
   13adc:	strbhi	r8, [r0, lr]
   13ae0:	add	lr, fp, #2
   13ae4:	cmp	r7, lr
   13ae8:	movhi	r8, #39	; 0x27
   13aec:	strbhi	r8, [r0, lr]
   13af0:	add	fp, fp, #3
   13af4:	mov	lr, r5
   13af8:	cmp	r7, fp
   13afc:	movhi	r5, #92	; 0x5c
   13b00:	strbhi	r5, [r0, fp]
   13b04:	add	r5, fp, #1
   13b08:	cmp	r7, r5
   13b0c:	lsrhi	r8, r4, #6
   13b10:	addhi	r8, r8, #48	; 0x30
   13b14:	strbhi	r8, [r0, r5]
   13b18:	add	r8, fp, #2
   13b1c:	cmp	r7, r8
   13b20:	lsrhi	r5, r4, #3
   13b24:	andhi	r5, r5, #7
   13b28:	addhi	r5, r5, #48	; 0x30
   13b2c:	strbhi	r5, [r0, r8]
   13b30:	add	fp, fp, #3
   13b34:	and	r4, r4, #7
   13b38:	add	r4, r4, #48	; 0x30
   13b3c:	add	r5, r6, #1
   13b40:	cmp	r1, r5
   13b44:	bls	13b60 <_obstack_memory_used@@Base+0x1124>
   13b48:	mov	r6, r5
   13b4c:	mov	r5, r3
   13b50:	b	13a8c <_obstack_memory_used@@Base+0x1050>
   13b54:	str	lr, [sp, #44]	; 0x2c
   13b58:	ldr	r8, [sp, #56]	; 0x38
   13b5c:	b	13430 <_obstack_memory_used@@Base+0x9f4>
   13b60:	str	lr, [sp, #44]	; 0x2c
   13b64:	ldr	r8, [sp, #56]	; 0x38
   13b68:	mov	r5, r3
   13b6c:	b	13430 <_obstack_memory_used@@Base+0x9f4>
   13b70:	mov	r6, r8
   13b74:	b	13a8c <_obstack_memory_used@@Base+0x1050>
   13b78:	mov	r5, #0
   13b7c:	b	1354c <_obstack_memory_used@@Base+0xb10>
   13b80:	mov	r8, r5
   13b84:	ldr	r5, [sp, #48]	; 0x30
   13b88:	mov	r4, #48	; 0x30
   13b8c:	b	1354c <_obstack_memory_used@@Base+0xb10>
   13b90:	ldr	r8, [sp, #32]
   13b94:	mov	r4, #48	; 0x30
   13b98:	b	1354c <_obstack_memory_used@@Base+0xb10>
   13b9c:	ldr	r8, [sp, #32]
   13ba0:	mov	r4, #48	; 0x30
   13ba4:	b	1354c <_obstack_memory_used@@Base+0xb10>
   13ba8:	mov	r8, #0
   13bac:	mov	r5, r8
   13bb0:	b	1354c <_obstack_memory_used@@Base+0xb10>
   13bb4:	mov	r8, #0
   13bb8:	mov	r5, r8
   13bbc:	b	1354c <_obstack_memory_used@@Base+0xb10>
   13bc0:	mov	r8, #0
   13bc4:	mov	r5, r8
   13bc8:	b	1354c <_obstack_memory_used@@Base+0xb10>
   13bcc:	mov	r8, #0
   13bd0:	mov	r5, r8
   13bd4:	b	1354c <_obstack_memory_used@@Base+0xb10>
   13bd8:	ldr	r3, [sp, #52]	; 0x34
   13bdc:	ldrb	r8, [r3, r6]
   13be0:	adds	r8, r8, #0
   13be4:	movne	r8, #1
   13be8:	b	1365c <_obstack_memory_used@@Base+0xc20>
   13bec:	cmp	sl, #2
   13bf0:	movne	r3, #0
   13bf4:	moveq	r3, #1
   13bf8:	ldr	r1, [sp, #32]
   13bfc:	mov	r2, r1
   13c00:	and	r2, r2, r3
   13c04:	cmp	fp, #0
   13c08:	movne	r2, #0
   13c0c:	andeq	r2, r2, #1
   13c10:	cmp	r2, #0
   13c14:	bne	13dc4 <_obstack_memory_used@@Base+0x1388>
   13c18:	eor	r2, r1, #1
   13c1c:	and	r3, r3, r2
   13c20:	ldr	r1, [sp, #80]	; 0x50
   13c24:	tst	r1, r3
   13c28:	beq	13ca0 <_obstack_memory_used@@Base+0x1264>
   13c2c:	ldr	r3, [sp, #40]	; 0x28
   13c30:	cmp	r3, #0
   13c34:	bne	13c5c <_obstack_memory_used@@Base+0x1220>
   13c38:	ldr	r1, [sp, #76]	; 0x4c
   13c3c:	clz	r3, r7
   13c40:	lsr	r3, r3, #5
   13c44:	cmp	r1, #0
   13c48:	moveq	r3, #0
   13c4c:	cmp	r3, #0
   13c50:	beq	13ca0 <_obstack_memory_used@@Base+0x1264>
   13c54:	ldr	r7, [sp, #76]	; 0x4c
   13c58:	b	12cf0 <_obstack_memory_used@@Base+0x2b4>
   13c5c:	ldr	r3, [sp, #168]	; 0xa8
   13c60:	str	r3, [sp, #16]
   13c64:	ldr	r3, [sp, #164]	; 0xa4
   13c68:	str	r3, [sp, #12]
   13c6c:	ldr	r3, [sp, #160]	; 0xa0
   13c70:	str	r3, [sp, #8]
   13c74:	ldr	r3, [sp, #156]	; 0x9c
   13c78:	str	r3, [sp, #4]
   13c7c:	mov	r3, #5
   13c80:	str	r3, [sp]
   13c84:	ldr	r3, [sp, #28]
   13c88:	ldr	r2, [sp, #52]	; 0x34
   13c8c:	ldr	r1, [sp, #76]	; 0x4c
   13c90:	ldr	r0, [sp, #36]	; 0x24
   13c94:	bl	12c90 <_obstack_memory_used@@Base+0x254>
   13c98:	mov	fp, r0
   13c9c:	b	13da0 <_obstack_memory_used@@Base+0x1364>
   13ca0:	mov	sl, r7
   13ca4:	ldr	r3, [sp, #72]	; 0x48
   13ca8:	cmp	r3, #0
   13cac:	moveq	r2, #0
   13cb0:	andne	r2, r2, #1
   13cb4:	cmp	r2, #0
   13cb8:	beq	13ce8 <_obstack_memory_used@@Base+0x12ac>
   13cbc:	mov	r2, r3
   13cc0:	ldrb	r3, [r3]
   13cc4:	cmp	r3, #0
   13cc8:	beq	13ce8 <_obstack_memory_used@@Base+0x12ac>
   13ccc:	ldr	r1, [sp, #36]	; 0x24
   13cd0:	cmp	sl, fp
   13cd4:	strbhi	r3, [r1, fp]
   13cd8:	add	fp, fp, #1
   13cdc:	ldrb	r3, [r2, #1]!
   13ce0:	cmp	r3, #0
   13ce4:	bne	13cd0 <_obstack_memory_used@@Base+0x1294>
   13ce8:	cmp	sl, fp
   13cec:	movhi	r3, #0
   13cf0:	ldrhi	r2, [sp, #36]	; 0x24
   13cf4:	strbhi	r3, [r2, fp]
   13cf8:	b	13da0 <_obstack_memory_used@@Base+0x1364>
   13cfc:	mov	r8, sl
   13d00:	mov	sl, r7
   13d04:	ldr	r3, [sp, #32]
   13d08:	str	r3, [sp, #48]	; 0x30
   13d0c:	b	13d48 <_obstack_memory_used@@Base+0x130c>
   13d10:	mov	r8, sl
   13d14:	mov	sl, r7
   13d18:	b	13d48 <_obstack_memory_used@@Base+0x130c>
   13d1c:	mov	r8, sl
   13d20:	mov	sl, r7
   13d24:	b	13d48 <_obstack_memory_used@@Base+0x130c>
   13d28:	andeq	r7, r1, r8, asr #9
   13d2c:	ldrdeq	r7, [r1], -r8
   13d30:	andeq	r7, r1, ip, asr #9
   13d34:	mov	r8, sl
   13d38:	mov	sl, r7
   13d3c:	b	13d48 <_obstack_memory_used@@Base+0x130c>
   13d40:	mov	r8, sl
   13d44:	mov	sl, r7
   13d48:	ldr	r3, [sp, #48]	; 0x30
   13d4c:	cmp	r8, #2
   13d50:	movne	r3, #0
   13d54:	andeq	r3, r3, #1
   13d58:	cmp	r3, #0
   13d5c:	movne	r8, #4
   13d60:	ldr	r3, [sp, #168]	; 0xa8
   13d64:	str	r3, [sp, #16]
   13d68:	ldr	r3, [sp, #164]	; 0xa4
   13d6c:	str	r3, [sp, #12]
   13d70:	mov	r3, #0
   13d74:	str	r3, [sp, #8]
   13d78:	ldr	r3, [sp, #156]	; 0x9c
   13d7c:	bic	r3, r3, #2
   13d80:	str	r3, [sp, #4]
   13d84:	str	r8, [sp]
   13d88:	ldr	r3, [sp, #28]
   13d8c:	ldr	r2, [sp, #52]	; 0x34
   13d90:	mov	r1, sl
   13d94:	ldr	r0, [sp, #36]	; 0x24
   13d98:	bl	12c90 <_obstack_memory_used@@Base+0x254>
   13d9c:	mov	fp, r0
   13da0:	mov	r0, fp
   13da4:	add	sp, sp, #116	; 0x74
   13da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dac:	mov	r8, sl
   13db0:	mov	sl, r7
   13db4:	b	13d48 <_obstack_memory_used@@Base+0x130c>
   13db8:	mov	r8, sl
   13dbc:	mov	sl, r7
   13dc0:	b	13d48 <_obstack_memory_used@@Base+0x130c>
   13dc4:	mov	r8, sl
   13dc8:	mov	sl, r7
   13dcc:	b	13d48 <_obstack_memory_used@@Base+0x130c>
   13dd0:	mov	r8, sl
   13dd4:	mov	sl, r7
   13dd8:	b	13d60 <_obstack_memory_used@@Base+0x1324>
   13ddc:	mov	r3, #1
   13de0:	str	r3, [sp, #32]
   13de4:	str	r3, [sp, #48]	; 0x30
   13de8:	str	r3, [sp, #60]	; 0x3c
   13dec:	ldr	r3, [pc, #-196]	; 13d30 <_obstack_memory_used@@Base+0x12f4>
   13df0:	str	r3, [sp, #72]	; 0x48
   13df4:	mov	fp, #0
   13df8:	mov	sl, #5
   13dfc:	b	12d4c <_obstack_memory_used@@Base+0x310>
   13e00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e04:	sub	sp, sp, #52	; 0x34
   13e08:	mov	r5, r0
   13e0c:	str	r1, [sp, #24]
   13e10:	str	r2, [sp, #28]
   13e14:	mov	r4, r3
   13e18:	bl	10f18 <__errno_location@plt>
   13e1c:	str	r0, [sp, #32]
   13e20:	ldr	r3, [r0]
   13e24:	str	r3, [sp, #36]	; 0x24
   13e28:	ldr	r3, [pc, #396]	; 13fbc <_obstack_memory_used@@Base+0x1580>
   13e2c:	ldr	r6, [r3]
   13e30:	cmn	r5, #-2147483647	; 0x80000001
   13e34:	movne	r3, #0
   13e38:	moveq	r3, #1
   13e3c:	orrs	r3, r3, r5, lsr #31
   13e40:	bne	13f80 <_obstack_memory_used@@Base+0x1544>
   13e44:	ldr	r3, [pc, #368]	; 13fbc <_obstack_memory_used@@Base+0x1580>
   13e48:	ldr	r2, [r3, #4]
   13e4c:	cmp	r5, r2
   13e50:	blt	13eb8 <_obstack_memory_used@@Base+0x147c>
   13e54:	str	r2, [sp, #44]	; 0x2c
   13e58:	add	r3, r3, #8
   13e5c:	cmp	r6, r3
   13e60:	beq	13f84 <_obstack_memory_used@@Base+0x1548>
   13e64:	sub	r2, r5, r2
   13e68:	mov	r3, #8
   13e6c:	str	r3, [sp]
   13e70:	mvn	r3, #-2147483648	; 0x80000000
   13e74:	add	r2, r2, #1
   13e78:	add	r1, sp, #44	; 0x2c
   13e7c:	mov	r0, r6
   13e80:	bl	14d04 <_obstack_memory_used@@Base+0x22c8>
   13e84:	mov	r6, r0
   13e88:	ldr	r3, [pc, #300]	; 13fbc <_obstack_memory_used@@Base+0x1580>
   13e8c:	str	r0, [r3]
   13e90:	ldr	r7, [pc, #292]	; 13fbc <_obstack_memory_used@@Base+0x1580>
   13e94:	ldr	r0, [r7, #4]
   13e98:	ldr	r2, [sp, #44]	; 0x2c
   13e9c:	sub	r2, r2, r0
   13ea0:	lsl	r2, r2, #3
   13ea4:	mov	r1, #0
   13ea8:	add	r0, r6, r0, lsl #3
   13eac:	bl	10f30 <memset@plt>
   13eb0:	ldr	r3, [sp, #44]	; 0x2c
   13eb4:	str	r3, [r7, #4]
   13eb8:	add	fp, r6, r5, lsl #3
   13ebc:	ldr	r8, [r6, r5, lsl #3]
   13ec0:	ldr	r7, [fp, #4]
   13ec4:	ldr	r9, [r4, #4]
   13ec8:	orr	r9, r9, #1
   13ecc:	add	sl, r4, #8
   13ed0:	ldr	r3, [r4, #44]	; 0x2c
   13ed4:	str	r3, [sp, #16]
   13ed8:	ldr	r3, [r4, #40]	; 0x28
   13edc:	str	r3, [sp, #12]
   13ee0:	str	sl, [sp, #8]
   13ee4:	str	r9, [sp, #4]
   13ee8:	ldr	r3, [r4]
   13eec:	str	r3, [sp]
   13ef0:	ldr	r3, [sp, #28]
   13ef4:	ldr	r2, [sp, #24]
   13ef8:	mov	r1, r8
   13efc:	mov	r0, r7
   13f00:	bl	12c90 <_obstack_memory_used@@Base+0x254>
   13f04:	cmp	r8, r0
   13f08:	bhi	13f68 <_obstack_memory_used@@Base+0x152c>
   13f0c:	add	r8, r0, #1
   13f10:	str	r8, [r6, r5, lsl #3]
   13f14:	ldr	r3, [pc, #164]	; 13fc0 <_obstack_memory_used@@Base+0x1584>
   13f18:	cmp	r7, r3
   13f1c:	beq	13f28 <_obstack_memory_used@@Base+0x14ec>
   13f20:	mov	r0, r7
   13f24:	bl	12418 <close@plt+0x1458>
   13f28:	mov	r0, r8
   13f2c:	bl	14b80 <_obstack_memory_used@@Base+0x2144>
   13f30:	mov	r7, r0
   13f34:	str	r0, [fp, #4]
   13f38:	ldr	r3, [r4, #44]	; 0x2c
   13f3c:	str	r3, [sp, #16]
   13f40:	ldr	r3, [r4, #40]	; 0x28
   13f44:	str	r3, [sp, #12]
   13f48:	str	sl, [sp, #8]
   13f4c:	str	r9, [sp, #4]
   13f50:	ldr	r3, [r4]
   13f54:	str	r3, [sp]
   13f58:	ldr	r3, [sp, #28]
   13f5c:	ldr	r2, [sp, #24]
   13f60:	mov	r1, r8
   13f64:	bl	12c90 <_obstack_memory_used@@Base+0x254>
   13f68:	ldr	r3, [sp, #32]
   13f6c:	ldr	r2, [sp, #36]	; 0x24
   13f70:	str	r2, [r3]
   13f74:	mov	r0, r7
   13f78:	add	sp, sp, #52	; 0x34
   13f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f80:	bl	10fb4 <abort@plt>
   13f84:	sub	r2, r5, r2
   13f88:	mov	r3, #8
   13f8c:	str	r3, [sp]
   13f90:	mvn	r3, #-2147483648	; 0x80000000
   13f94:	add	r2, r2, #1
   13f98:	add	r1, sp, #44	; 0x2c
   13f9c:	mov	r0, #0
   13fa0:	bl	14d04 <_obstack_memory_used@@Base+0x22c8>
   13fa4:	mov	r6, r0
   13fa8:	ldr	r3, [pc, #12]	; 13fbc <_obstack_memory_used@@Base+0x1580>
   13fac:	str	r0, [r3], #8
   13fb0:	ldm	r3, {r0, r1}
   13fb4:	stm	r6, {r0, r1}
   13fb8:	b	13e90 <_obstack_memory_used@@Base+0x1454>
   13fbc:	strdeq	r8, [r2], -r4
   13fc0:	muleq	r2, r4, r1
   13fc4:	push	{r4, r5, r6, lr}
   13fc8:	mov	r4, r0
   13fcc:	bl	10f18 <__errno_location@plt>
   13fd0:	mov	r5, r0
   13fd4:	ldr	r6, [r0]
   13fd8:	cmp	r4, #0
   13fdc:	ldr	r3, [pc, #20]	; 13ff8 <_obstack_memory_used@@Base+0x15bc>
   13fe0:	moveq	r4, r3
   13fe4:	mov	r1, #48	; 0x30
   13fe8:	mov	r0, r4
   13fec:	bl	1506c <_obstack_memory_used@@Base+0x2630>
   13ff0:	str	r6, [r5]
   13ff4:	pop	{r4, r5, r6, pc}
   13ff8:	muleq	r2, r4, r2
   13ffc:	subs	r3, r0, #0
   14000:	ldr	r2, [pc, #8]	; 14010 <_obstack_memory_used@@Base+0x15d4>
   14004:	moveq	r3, r2
   14008:	ldr	r0, [r3]
   1400c:	bx	lr
   14010:	muleq	r2, r4, r2
   14014:	subs	r3, r0, #0
   14018:	ldr	r2, [pc, #8]	; 14028 <_obstack_memory_used@@Base+0x15ec>
   1401c:	moveq	r3, r2
   14020:	str	r1, [r3]
   14024:	bx	lr
   14028:	muleq	r2, r4, r2
   1402c:	push	{lr}		; (str lr, [sp, #-4]!)
   14030:	subs	r3, r0, #0
   14034:	ldr	r0, [pc, #44]	; 14068 <_obstack_memory_used@@Base+0x162c>
   14038:	moveq	r3, r0
   1403c:	add	r3, r3, #8
   14040:	lsr	lr, r1, #5
   14044:	and	r1, r1, #31
   14048:	ldr	ip, [r3, lr, lsl #2]
   1404c:	lsr	r0, ip, r1
   14050:	eor	r2, r2, r0
   14054:	and	r2, r2, #1
   14058:	eor	r1, ip, r2, lsl r1
   1405c:	str	r1, [r3, lr, lsl #2]
   14060:	and	r0, r0, #1
   14064:	pop	{pc}		; (ldr pc, [sp], #4)
   14068:	muleq	r2, r4, r2
   1406c:	subs	r3, r0, #0
   14070:	ldr	r2, [pc, #12]	; 14084 <_obstack_memory_used@@Base+0x1648>
   14074:	moveq	r3, r2
   14078:	ldr	r0, [r3, #4]
   1407c:	str	r1, [r3, #4]
   14080:	bx	lr
   14084:	muleq	r2, r4, r2
   14088:	subs	r3, r0, #0
   1408c:	ldr	r0, [pc, #40]	; 140bc <_obstack_memory_used@@Base+0x1680>
   14090:	moveq	r3, r0
   14094:	mov	r0, #10
   14098:	str	r0, [r3]
   1409c:	cmp	r2, #0
   140a0:	cmpne	r1, #0
   140a4:	beq	140b4 <_obstack_memory_used@@Base+0x1678>
   140a8:	str	r1, [r3, #40]	; 0x28
   140ac:	str	r2, [r3, #44]	; 0x2c
   140b0:	bx	lr
   140b4:	push	{r4, lr}
   140b8:	bl	10fb4 <abort@plt>
   140bc:	muleq	r2, r4, r2
   140c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   140c4:	sub	sp, sp, #24
   140c8:	mov	r7, r0
   140cc:	mov	r8, r1
   140d0:	mov	r9, r2
   140d4:	mov	sl, r3
   140d8:	ldr	r4, [sp, #56]	; 0x38
   140dc:	cmp	r4, #0
   140e0:	ldr	r3, [pc, #84]	; 1413c <_obstack_memory_used@@Base+0x1700>
   140e4:	moveq	r4, r3
   140e8:	bl	10f18 <__errno_location@plt>
   140ec:	mov	r5, r0
   140f0:	ldr	r6, [r0]
   140f4:	ldr	r3, [r4, #44]	; 0x2c
   140f8:	str	r3, [sp, #16]
   140fc:	ldr	r3, [r4, #40]	; 0x28
   14100:	str	r3, [sp, #12]
   14104:	add	r3, r4, #8
   14108:	str	r3, [sp, #8]
   1410c:	ldr	r3, [r4, #4]
   14110:	str	r3, [sp, #4]
   14114:	ldr	r3, [r4]
   14118:	str	r3, [sp]
   1411c:	mov	r3, sl
   14120:	mov	r2, r9
   14124:	mov	r1, r8
   14128:	mov	r0, r7
   1412c:	bl	12c90 <_obstack_memory_used@@Base+0x254>
   14130:	str	r6, [r5]
   14134:	add	sp, sp, #24
   14138:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1413c:	muleq	r2, r4, r2
   14140:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14144:	sub	sp, sp, #44	; 0x2c
   14148:	str	r0, [sp, #28]
   1414c:	str	r1, [sp, #32]
   14150:	mov	r6, r2
   14154:	subs	r4, r3, #0
   14158:	ldr	r3, [pc, #172]	; 1420c <_obstack_memory_used@@Base+0x17d0>
   1415c:	moveq	r4, r3
   14160:	bl	10f18 <__errno_location@plt>
   14164:	mov	r7, r0
   14168:	ldr	fp, [r0]
   1416c:	ldr	r5, [r4, #4]
   14170:	cmp	r6, #0
   14174:	orreq	r5, r5, #1
   14178:	add	r9, r4, #8
   1417c:	ldr	r3, [r4, #44]	; 0x2c
   14180:	str	r3, [sp, #16]
   14184:	ldr	r3, [r4, #40]	; 0x28
   14188:	str	r3, [sp, #12]
   1418c:	str	r9, [sp, #8]
   14190:	str	r5, [sp, #4]
   14194:	ldr	r3, [r4]
   14198:	str	r3, [sp]
   1419c:	ldr	r3, [sp, #32]
   141a0:	ldr	r2, [sp, #28]
   141a4:	mov	r1, #0
   141a8:	mov	r0, r1
   141ac:	bl	12c90 <_obstack_memory_used@@Base+0x254>
   141b0:	mov	sl, r0
   141b4:	add	r8, r0, #1
   141b8:	mov	r0, r8
   141bc:	bl	14b80 <_obstack_memory_used@@Base+0x2144>
   141c0:	str	r0, [sp, #36]	; 0x24
   141c4:	ldr	r3, [r4, #44]	; 0x2c
   141c8:	str	r3, [sp, #16]
   141cc:	ldr	r3, [r4, #40]	; 0x28
   141d0:	str	r3, [sp, #12]
   141d4:	str	r9, [sp, #8]
   141d8:	str	r5, [sp, #4]
   141dc:	ldr	r3, [r4]
   141e0:	str	r3, [sp]
   141e4:	ldr	r3, [sp, #32]
   141e8:	ldr	r2, [sp, #28]
   141ec:	mov	r1, r8
   141f0:	bl	12c90 <_obstack_memory_used@@Base+0x254>
   141f4:	str	fp, [r7]
   141f8:	cmp	r6, #0
   141fc:	strne	sl, [r6]
   14200:	ldr	r0, [sp, #36]	; 0x24
   14204:	add	sp, sp, #44	; 0x2c
   14208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1420c:	muleq	r2, r4, r2
   14210:	push	{r4, lr}
   14214:	mov	r3, r2
   14218:	mov	r2, #0
   1421c:	bl	14140 <_obstack_memory_used@@Base+0x1704>
   14220:	pop	{r4, pc}
   14224:	push	{r4, r5, r6, r7, r8, lr}
   14228:	ldr	r3, [pc, #140]	; 142bc <_obstack_memory_used@@Base+0x1880>
   1422c:	ldr	r7, [r3]
   14230:	ldr	r3, [r3, #4]
   14234:	cmp	r3, #1
   14238:	ble	14264 <_obstack_memory_used@@Base+0x1828>
   1423c:	mov	r5, r7
   14240:	mov	r4, #1
   14244:	ldr	r6, [pc, #112]	; 142bc <_obstack_memory_used@@Base+0x1880>
   14248:	ldr	r0, [r5, #12]
   1424c:	bl	12418 <close@plt+0x1458>
   14250:	add	r4, r4, #1
   14254:	add	r5, r5, #8
   14258:	ldr	r3, [r6, #4]
   1425c:	cmp	r3, r4
   14260:	bgt	14248 <_obstack_memory_used@@Base+0x180c>
   14264:	ldr	r0, [r7, #4]
   14268:	ldr	r3, [pc, #80]	; 142c0 <_obstack_memory_used@@Base+0x1884>
   1426c:	cmp	r0, r3
   14270:	beq	1428c <_obstack_memory_used@@Base+0x1850>
   14274:	bl	12418 <close@plt+0x1458>
   14278:	ldr	r3, [pc, #60]	; 142bc <_obstack_memory_used@@Base+0x1880>
   1427c:	mov	r2, #256	; 0x100
   14280:	str	r2, [r3, #8]
   14284:	ldr	r2, [pc, #52]	; 142c0 <_obstack_memory_used@@Base+0x1884>
   14288:	str	r2, [r3, #12]
   1428c:	ldr	r3, [pc, #48]	; 142c4 <_obstack_memory_used@@Base+0x1888>
   14290:	cmp	r7, r3
   14294:	beq	142ac <_obstack_memory_used@@Base+0x1870>
   14298:	mov	r0, r7
   1429c:	bl	12418 <close@plt+0x1458>
   142a0:	ldr	r3, [pc, #20]	; 142bc <_obstack_memory_used@@Base+0x1880>
   142a4:	add	r2, r3, #8
   142a8:	str	r2, [r3]
   142ac:	mov	r2, #1
   142b0:	ldr	r3, [pc, #4]	; 142bc <_obstack_memory_used@@Base+0x1880>
   142b4:	str	r2, [r3, #4]
   142b8:	pop	{r4, r5, r6, r7, r8, pc}
   142bc:	strdeq	r8, [r2], -r4
   142c0:	muleq	r2, r4, r1
   142c4:	strdeq	r8, [r2], -ip
   142c8:	push	{r4, lr}
   142cc:	ldr	r3, [pc, #8]	; 142dc <_obstack_memory_used@@Base+0x18a0>
   142d0:	mvn	r2, #0
   142d4:	bl	13e00 <_obstack_memory_used@@Base+0x13c4>
   142d8:	pop	{r4, pc}
   142dc:	muleq	r2, r4, r2
   142e0:	push	{r4, lr}
   142e4:	ldr	r3, [pc, #4]	; 142f0 <_obstack_memory_used@@Base+0x18b4>
   142e8:	bl	13e00 <_obstack_memory_used@@Base+0x13c4>
   142ec:	pop	{r4, pc}
   142f0:	muleq	r2, r4, r2
   142f4:	push	{r4, lr}
   142f8:	mov	r1, r0
   142fc:	mov	r0, #0
   14300:	bl	142c8 <_obstack_memory_used@@Base+0x188c>
   14304:	pop	{r4, pc}
   14308:	push	{r4, lr}
   1430c:	mov	r2, r1
   14310:	mov	r1, r0
   14314:	mov	r0, #0
   14318:	bl	142e0 <_obstack_memory_used@@Base+0x18a4>
   1431c:	pop	{r4, pc}
   14320:	push	{r4, r5, lr}
   14324:	sub	sp, sp, #52	; 0x34
   14328:	mov	r4, r0
   1432c:	mov	r5, r2
   14330:	mov	r0, sp
   14334:	bl	12b28 <_obstack_memory_used@@Base+0xec>
   14338:	mov	r3, sp
   1433c:	mvn	r2, #0
   14340:	mov	r1, r5
   14344:	mov	r0, r4
   14348:	bl	13e00 <_obstack_memory_used@@Base+0x13c4>
   1434c:	add	sp, sp, #52	; 0x34
   14350:	pop	{r4, r5, pc}
   14354:	push	{r4, r5, r6, lr}
   14358:	sub	sp, sp, #48	; 0x30
   1435c:	mov	r4, r0
   14360:	mov	r5, r2
   14364:	mov	r6, r3
   14368:	mov	r0, sp
   1436c:	bl	12b28 <_obstack_memory_used@@Base+0xec>
   14370:	mov	r3, sp
   14374:	mov	r2, r6
   14378:	mov	r1, r5
   1437c:	mov	r0, r4
   14380:	bl	13e00 <_obstack_memory_used@@Base+0x13c4>
   14384:	add	sp, sp, #48	; 0x30
   14388:	pop	{r4, r5, r6, pc}
   1438c:	push	{r4, lr}
   14390:	mov	r2, r1
   14394:	mov	r1, r0
   14398:	mov	r0, #0
   1439c:	bl	14320 <_obstack_memory_used@@Base+0x18e4>
   143a0:	pop	{r4, pc}
   143a4:	push	{r4, lr}
   143a8:	mov	r3, r2
   143ac:	mov	r2, r1
   143b0:	mov	r1, r0
   143b4:	mov	r0, #0
   143b8:	bl	14354 <_obstack_memory_used@@Base+0x1918>
   143bc:	pop	{r4, pc}
   143c0:	push	{r4, r5, r6, lr}
   143c4:	sub	sp, sp, #48	; 0x30
   143c8:	mov	r4, r0
   143cc:	mov	r5, r1
   143d0:	mov	r6, r2
   143d4:	mov	ip, sp
   143d8:	ldr	lr, [pc, #64]	; 14420 <_obstack_memory_used@@Base+0x19e4>
   143dc:	ldm	lr!, {r0, r1, r2, r3}
   143e0:	stmia	ip!, {r0, r1, r2, r3}
   143e4:	ldm	lr!, {r0, r1, r2, r3}
   143e8:	stmia	ip!, {r0, r1, r2, r3}
   143ec:	ldm	lr, {r0, r1, r2, r3}
   143f0:	stm	ip, {r0, r1, r2, r3}
   143f4:	mov	r2, #1
   143f8:	mov	r1, r6
   143fc:	mov	r0, sp
   14400:	bl	1402c <_obstack_memory_used@@Base+0x15f0>
   14404:	mov	r3, sp
   14408:	mov	r2, r5
   1440c:	mov	r1, r4
   14410:	mov	r0, #0
   14414:	bl	13e00 <_obstack_memory_used@@Base+0x13c4>
   14418:	add	sp, sp, #48	; 0x30
   1441c:	pop	{r4, r5, r6, pc}
   14420:	muleq	r2, r4, r2
   14424:	push	{r4, lr}
   14428:	mov	r2, r1
   1442c:	mvn	r1, #0
   14430:	bl	143c0 <_obstack_memory_used@@Base+0x1984>
   14434:	pop	{r4, pc}
   14438:	push	{r4, lr}
   1443c:	mov	r1, #58	; 0x3a
   14440:	bl	14424 <_obstack_memory_used@@Base+0x19e8>
   14444:	pop	{r4, pc}
   14448:	push	{r4, lr}
   1444c:	mov	r2, #58	; 0x3a
   14450:	bl	143c0 <_obstack_memory_used@@Base+0x1984>
   14454:	pop	{r4, pc}
   14458:	push	{r4, r5, lr}
   1445c:	sub	sp, sp, #100	; 0x64
   14460:	mov	r4, r0
   14464:	mov	r5, r2
   14468:	mov	r0, sp
   1446c:	bl	12b28 <_obstack_memory_used@@Base+0xec>
   14470:	add	lr, sp, #48	; 0x30
   14474:	mov	ip, sp
   14478:	ldm	ip!, {r0, r1, r2, r3}
   1447c:	stmia	lr!, {r0, r1, r2, r3}
   14480:	ldm	ip!, {r0, r1, r2, r3}
   14484:	stmia	lr!, {r0, r1, r2, r3}
   14488:	ldm	ip, {r0, r1, r2, r3}
   1448c:	stm	lr, {r0, r1, r2, r3}
   14490:	mov	r2, #1
   14494:	mov	r1, #58	; 0x3a
   14498:	add	r0, sp, #48	; 0x30
   1449c:	bl	1402c <_obstack_memory_used@@Base+0x15f0>
   144a0:	add	r3, sp, #48	; 0x30
   144a4:	mvn	r2, #0
   144a8:	mov	r1, r5
   144ac:	mov	r0, r4
   144b0:	bl	13e00 <_obstack_memory_used@@Base+0x13c4>
   144b4:	add	sp, sp, #100	; 0x64
   144b8:	pop	{r4, r5, pc}
   144bc:	push	{r4, r5, r6, r7, lr}
   144c0:	sub	sp, sp, #52	; 0x34
   144c4:	mov	r4, r0
   144c8:	mov	r6, r1
   144cc:	mov	r7, r2
   144d0:	mov	r5, r3
   144d4:	mov	ip, sp
   144d8:	ldr	lr, [pc, #64]	; 14520 <_obstack_memory_used@@Base+0x1ae4>
   144dc:	ldm	lr!, {r0, r1, r2, r3}
   144e0:	stmia	ip!, {r0, r1, r2, r3}
   144e4:	ldm	lr!, {r0, r1, r2, r3}
   144e8:	stmia	ip!, {r0, r1, r2, r3}
   144ec:	ldm	lr, {r0, r1, r2, r3}
   144f0:	stm	ip, {r0, r1, r2, r3}
   144f4:	mov	r2, r7
   144f8:	mov	r1, r6
   144fc:	mov	r0, sp
   14500:	bl	14088 <_obstack_memory_used@@Base+0x164c>
   14504:	mov	r3, sp
   14508:	ldr	r2, [sp, #72]	; 0x48
   1450c:	mov	r1, r5
   14510:	mov	r0, r4
   14514:	bl	13e00 <_obstack_memory_used@@Base+0x13c4>
   14518:	add	sp, sp, #52	; 0x34
   1451c:	pop	{r4, r5, r6, r7, pc}
   14520:	muleq	r2, r4, r2
   14524:	push	{lr}		; (str lr, [sp, #-4]!)
   14528:	sub	sp, sp, #12
   1452c:	mvn	ip, #0
   14530:	str	ip, [sp]
   14534:	bl	144bc <_obstack_memory_used@@Base+0x1a80>
   14538:	add	sp, sp, #12
   1453c:	pop	{pc}		; (ldr pc, [sp], #4)
   14540:	push	{r4, lr}
   14544:	mov	r3, r2
   14548:	mov	r2, r1
   1454c:	mov	r1, r0
   14550:	mov	r0, #0
   14554:	bl	14524 <_obstack_memory_used@@Base+0x1ae8>
   14558:	pop	{r4, pc}
   1455c:	push	{lr}		; (str lr, [sp, #-4]!)
   14560:	sub	sp, sp, #12
   14564:	str	r3, [sp]
   14568:	mov	r3, r2
   1456c:	mov	r2, r1
   14570:	mov	r1, r0
   14574:	mov	r0, #0
   14578:	bl	144bc <_obstack_memory_used@@Base+0x1a80>
   1457c:	add	sp, sp, #12
   14580:	pop	{pc}		; (ldr pc, [sp], #4)
   14584:	push	{r4, lr}
   14588:	ldr	r3, [pc, #4]	; 14594 <_obstack_memory_used@@Base+0x1b58>
   1458c:	bl	13e00 <_obstack_memory_used@@Base+0x13c4>
   14590:	pop	{r4, pc}
   14594:	andeq	r8, r2, r4, lsl #2
   14598:	push	{r4, lr}
   1459c:	mov	r2, r1
   145a0:	mov	r1, r0
   145a4:	mov	r0, #0
   145a8:	bl	14584 <_obstack_memory_used@@Base+0x1b48>
   145ac:	pop	{r4, pc}
   145b0:	push	{r4, lr}
   145b4:	mvn	r2, #0
   145b8:	bl	14584 <_obstack_memory_used@@Base+0x1b48>
   145bc:	pop	{r4, pc}
   145c0:	push	{r4, lr}
   145c4:	mov	r1, r0
   145c8:	mov	r0, #0
   145cc:	bl	145b0 <_obstack_memory_used@@Base+0x1b74>
   145d0:	pop	{r4, pc}
   145d4:	push	{r4, r5, r6, lr}
   145d8:	sub	sp, sp, #32
   145dc:	mov	r4, r0
   145e0:	ldr	r5, [sp, #48]	; 0x30
   145e4:	ldr	r6, [sp, #52]	; 0x34
   145e8:	cmp	r1, #0
   145ec:	beq	146a4 <_obstack_memory_used@@Base+0x1c68>
   145f0:	str	r3, [sp, #4]
   145f4:	str	r2, [sp]
   145f8:	mov	r3, r1
   145fc:	ldr	r2, [pc, #940]	; 149b0 <_obstack_memory_used@@Base+0x1f74>
   14600:	mov	r1, #1
   14604:	bl	10f54 <__fprintf_chk@plt>
   14608:	mov	r2, #5
   1460c:	ldr	r1, [pc, #928]	; 149b4 <_obstack_memory_used@@Base+0x1f78>
   14610:	mov	r0, #0
   14614:	bl	10df8 <dcgettext@plt>
   14618:	ldr	r3, [pc, #920]	; 149b8 <_obstack_memory_used@@Base+0x1f7c>
   1461c:	str	r3, [sp]
   14620:	mov	r3, r0
   14624:	ldr	r2, [pc, #912]	; 149bc <_obstack_memory_used@@Base+0x1f80>
   14628:	mov	r1, #1
   1462c:	mov	r0, r4
   14630:	bl	10f54 <__fprintf_chk@plt>
   14634:	mov	r1, r4
   14638:	mov	r0, #10
   1463c:	bl	10dec <fputc_unlocked@plt>
   14640:	mov	r2, #5
   14644:	ldr	r1, [pc, #884]	; 149c0 <_obstack_memory_used@@Base+0x1f84>
   14648:	mov	r0, #0
   1464c:	bl	10df8 <dcgettext@plt>
   14650:	ldr	r3, [pc, #876]	; 149c4 <_obstack_memory_used@@Base+0x1f88>
   14654:	mov	r2, r0
   14658:	mov	r1, #1
   1465c:	mov	r0, r4
   14660:	bl	10f54 <__fprintf_chk@plt>
   14664:	mov	r1, r4
   14668:	mov	r0, #10
   1466c:	bl	10dec <fputc_unlocked@plt>
   14670:	cmp	r6, #9
   14674:	ldrls	pc, [pc, r6, lsl #2]
   14678:	b	14948 <_obstack_memory_used@@Base+0x1f0c>
   1467c:	andeq	r4, r1, r0, ror #13
   14680:			; <UNDEFINED> instruction: 0x000146bc
   14684:	andeq	r4, r1, r8, ror #13
   14688:	andeq	r4, r1, r8, lsl r7
   1468c:	andeq	r4, r1, r0, asr r7
   14690:	muleq	r1, r0, r7
   14694:	ldrdeq	r4, [r1], -r8
   14698:	andeq	r4, r1, r8, lsr #16
   1469c:	andeq	r4, r1, r0, lsl #17
   146a0:	andeq	r4, r1, r0, ror #17
   146a4:	str	r3, [sp]
   146a8:	mov	r3, r2
   146ac:	ldr	r2, [pc, #788]	; 149c8 <_obstack_memory_used@@Base+0x1f8c>
   146b0:	mov	r1, #1
   146b4:	bl	10f54 <__fprintf_chk@plt>
   146b8:	b	14608 <_obstack_memory_used@@Base+0x1bcc>
   146bc:	mov	r2, #5
   146c0:	ldr	r1, [pc, #772]	; 149cc <_obstack_memory_used@@Base+0x1f90>
   146c4:	mov	r0, #0
   146c8:	bl	10df8 <dcgettext@plt>
   146cc:	ldr	r3, [r5]
   146d0:	mov	r2, r0
   146d4:	mov	r1, #1
   146d8:	mov	r0, r4
   146dc:	bl	10f54 <__fprintf_chk@plt>
   146e0:	add	sp, sp, #32
   146e4:	pop	{r4, r5, r6, pc}
   146e8:	mov	r2, #5
   146ec:	ldr	r1, [pc, #732]	; 149d0 <_obstack_memory_used@@Base+0x1f94>
   146f0:	mov	r0, #0
   146f4:	bl	10df8 <dcgettext@plt>
   146f8:	ldr	r3, [r5]
   146fc:	ldr	r2, [r5, #4]
   14700:	str	r2, [sp]
   14704:	mov	r2, r0
   14708:	mov	r1, #1
   1470c:	mov	r0, r4
   14710:	bl	10f54 <__fprintf_chk@plt>
   14714:	b	146e0 <_obstack_memory_used@@Base+0x1ca4>
   14718:	mov	r2, #5
   1471c:	ldr	r1, [pc, #688]	; 149d4 <_obstack_memory_used@@Base+0x1f98>
   14720:	mov	r0, #0
   14724:	bl	10df8 <dcgettext@plt>
   14728:	ldr	r3, [r5]
   1472c:	ldr	r2, [r5, #8]
   14730:	str	r2, [sp, #4]
   14734:	ldr	r2, [r5, #4]
   14738:	str	r2, [sp]
   1473c:	mov	r2, r0
   14740:	mov	r1, #1
   14744:	mov	r0, r4
   14748:	bl	10f54 <__fprintf_chk@plt>
   1474c:	b	146e0 <_obstack_memory_used@@Base+0x1ca4>
   14750:	mov	r2, #5
   14754:	ldr	r1, [pc, #636]	; 149d8 <_obstack_memory_used@@Base+0x1f9c>
   14758:	mov	r0, #0
   1475c:	bl	10df8 <dcgettext@plt>
   14760:	ldr	r3, [r5]
   14764:	ldr	r2, [r5, #12]
   14768:	str	r2, [sp, #8]
   1476c:	ldr	r2, [r5, #8]
   14770:	str	r2, [sp, #4]
   14774:	ldr	r2, [r5, #4]
   14778:	str	r2, [sp]
   1477c:	mov	r2, r0
   14780:	mov	r1, #1
   14784:	mov	r0, r4
   14788:	bl	10f54 <__fprintf_chk@plt>
   1478c:	b	146e0 <_obstack_memory_used@@Base+0x1ca4>
   14790:	mov	r2, #5
   14794:	ldr	r1, [pc, #576]	; 149dc <_obstack_memory_used@@Base+0x1fa0>
   14798:	mov	r0, #0
   1479c:	bl	10df8 <dcgettext@plt>
   147a0:	ldr	r3, [r5]
   147a4:	ldr	r2, [r5, #16]
   147a8:	str	r2, [sp, #12]
   147ac:	ldr	r2, [r5, #12]
   147b0:	str	r2, [sp, #8]
   147b4:	ldr	r2, [r5, #8]
   147b8:	str	r2, [sp, #4]
   147bc:	ldr	r2, [r5, #4]
   147c0:	str	r2, [sp]
   147c4:	mov	r2, r0
   147c8:	mov	r1, #1
   147cc:	mov	r0, r4
   147d0:	bl	10f54 <__fprintf_chk@plt>
   147d4:	b	146e0 <_obstack_memory_used@@Base+0x1ca4>
   147d8:	mov	r2, #5
   147dc:	ldr	r1, [pc, #508]	; 149e0 <_obstack_memory_used@@Base+0x1fa4>
   147e0:	mov	r0, #0
   147e4:	bl	10df8 <dcgettext@plt>
   147e8:	ldr	r3, [r5]
   147ec:	ldr	r2, [r5, #20]
   147f0:	str	r2, [sp, #16]
   147f4:	ldr	r2, [r5, #16]
   147f8:	str	r2, [sp, #12]
   147fc:	ldr	r2, [r5, #12]
   14800:	str	r2, [sp, #8]
   14804:	ldr	r2, [r5, #8]
   14808:	str	r2, [sp, #4]
   1480c:	ldr	r2, [r5, #4]
   14810:	str	r2, [sp]
   14814:	mov	r2, r0
   14818:	mov	r1, #1
   1481c:	mov	r0, r4
   14820:	bl	10f54 <__fprintf_chk@plt>
   14824:	b	146e0 <_obstack_memory_used@@Base+0x1ca4>
   14828:	mov	r2, #5
   1482c:	ldr	r1, [pc, #432]	; 149e4 <_obstack_memory_used@@Base+0x1fa8>
   14830:	mov	r0, #0
   14834:	bl	10df8 <dcgettext@plt>
   14838:	ldr	r3, [r5]
   1483c:	ldr	r2, [r5, #24]
   14840:	str	r2, [sp, #20]
   14844:	ldr	r2, [r5, #20]
   14848:	str	r2, [sp, #16]
   1484c:	ldr	r2, [r5, #16]
   14850:	str	r2, [sp, #12]
   14854:	ldr	r2, [r5, #12]
   14858:	str	r2, [sp, #8]
   1485c:	ldr	r2, [r5, #8]
   14860:	str	r2, [sp, #4]
   14864:	ldr	r2, [r5, #4]
   14868:	str	r2, [sp]
   1486c:	mov	r2, r0
   14870:	mov	r1, #1
   14874:	mov	r0, r4
   14878:	bl	10f54 <__fprintf_chk@plt>
   1487c:	b	146e0 <_obstack_memory_used@@Base+0x1ca4>
   14880:	mov	r2, #5
   14884:	ldr	r1, [pc, #348]	; 149e8 <_obstack_memory_used@@Base+0x1fac>
   14888:	mov	r0, #0
   1488c:	bl	10df8 <dcgettext@plt>
   14890:	ldr	r3, [r5]
   14894:	ldr	r2, [r5, #28]
   14898:	str	r2, [sp, #24]
   1489c:	ldr	r2, [r5, #24]
   148a0:	str	r2, [sp, #20]
   148a4:	ldr	r2, [r5, #20]
   148a8:	str	r2, [sp, #16]
   148ac:	ldr	r2, [r5, #16]
   148b0:	str	r2, [sp, #12]
   148b4:	ldr	r2, [r5, #12]
   148b8:	str	r2, [sp, #8]
   148bc:	ldr	r2, [r5, #8]
   148c0:	str	r2, [sp, #4]
   148c4:	ldr	r2, [r5, #4]
   148c8:	str	r2, [sp]
   148cc:	mov	r2, r0
   148d0:	mov	r1, #1
   148d4:	mov	r0, r4
   148d8:	bl	10f54 <__fprintf_chk@plt>
   148dc:	b	146e0 <_obstack_memory_used@@Base+0x1ca4>
   148e0:	mov	r2, #5
   148e4:	ldr	r1, [pc, #256]	; 149ec <_obstack_memory_used@@Base+0x1fb0>
   148e8:	mov	r0, #0
   148ec:	bl	10df8 <dcgettext@plt>
   148f0:	ldr	r3, [r5]
   148f4:	ldr	r2, [r5, #32]
   148f8:	str	r2, [sp, #28]
   148fc:	ldr	r2, [r5, #28]
   14900:	str	r2, [sp, #24]
   14904:	ldr	r2, [r5, #24]
   14908:	str	r2, [sp, #20]
   1490c:	ldr	r2, [r5, #20]
   14910:	str	r2, [sp, #16]
   14914:	ldr	r2, [r5, #16]
   14918:	str	r2, [sp, #12]
   1491c:	ldr	r2, [r5, #12]
   14920:	str	r2, [sp, #8]
   14924:	ldr	r2, [r5, #8]
   14928:	str	r2, [sp, #4]
   1492c:	ldr	r2, [r5, #4]
   14930:	str	r2, [sp]
   14934:	mov	r2, r0
   14938:	mov	r1, #1
   1493c:	mov	r0, r4
   14940:	bl	10f54 <__fprintf_chk@plt>
   14944:	b	146e0 <_obstack_memory_used@@Base+0x1ca4>
   14948:	mov	r2, #5
   1494c:	ldr	r1, [pc, #156]	; 149f0 <_obstack_memory_used@@Base+0x1fb4>
   14950:	mov	r0, #0
   14954:	bl	10df8 <dcgettext@plt>
   14958:	ldr	r3, [r5]
   1495c:	ldr	r2, [r5, #32]
   14960:	str	r2, [sp, #28]
   14964:	ldr	r2, [r5, #28]
   14968:	str	r2, [sp, #24]
   1496c:	ldr	r2, [r5, #24]
   14970:	str	r2, [sp, #20]
   14974:	ldr	r2, [r5, #20]
   14978:	str	r2, [sp, #16]
   1497c:	ldr	r2, [r5, #16]
   14980:	str	r2, [sp, #12]
   14984:	ldr	r2, [r5, #12]
   14988:	str	r2, [sp, #8]
   1498c:	ldr	r2, [r5, #8]
   14990:	str	r2, [sp, #4]
   14994:	ldr	r2, [r5, #4]
   14998:	str	r2, [sp]
   1499c:	mov	r2, r0
   149a0:	mov	r1, #1
   149a4:	mov	r0, r4
   149a8:	bl	10f54 <__fprintf_chk@plt>
   149ac:	b	146e0 <_obstack_memory_used@@Base+0x1ca4>
   149b0:	andeq	r7, r1, r4, asr #10
   149b4:	andeq	r7, r1, r8, asr r5
   149b8:	andeq	r0, r0, r6, ror #15
   149bc:	andeq	r7, r1, r0, lsr r8
   149c0:	andeq	r7, r1, ip, asr r5
   149c4:	andeq	r7, r1, r8, lsl #12
   149c8:	andeq	r7, r1, r0, asr r5
   149cc:	andeq	r7, r1, ip, lsr #12
   149d0:	andeq	r7, r1, ip, lsr r6
   149d4:	andeq	r7, r1, r4, asr r6
   149d8:	andeq	r7, r1, r0, ror r6
   149dc:	muleq	r1, r0, r6
   149e0:			; <UNDEFINED> instruction: 0x000176b4
   149e4:	ldrdeq	r7, [r1], -ip
   149e8:	andeq	r7, r1, r8, lsl #14
   149ec:	andeq	r7, r1, r8, lsr r7
   149f0:	andeq	r7, r1, ip, ror #14
   149f4:	push	{r4, r5, lr}
   149f8:	sub	sp, sp, #12
   149fc:	ldr	r5, [sp, #24]
   14a00:	ldr	ip, [r5]
   14a04:	cmp	ip, #0
   14a08:	beq	14a38 <_obstack_memory_used@@Base+0x1ffc>
   14a0c:	mov	lr, r5
   14a10:	mov	ip, #0
   14a14:	add	ip, ip, #1
   14a18:	ldr	r4, [lr, #4]!
   14a1c:	cmp	r4, #0
   14a20:	bne	14a14 <_obstack_memory_used@@Base+0x1fd8>
   14a24:	str	ip, [sp, #4]
   14a28:	str	r5, [sp]
   14a2c:	bl	145d4 <_obstack_memory_used@@Base+0x1b98>
   14a30:	add	sp, sp, #12
   14a34:	pop	{r4, r5, pc}
   14a38:	mov	ip, #0
   14a3c:	b	14a24 <_obstack_memory_used@@Base+0x1fe8>
   14a40:	push	{r4, r5, lr}
   14a44:	sub	sp, sp, #52	; 0x34
   14a48:	ldr	r4, [sp, #64]	; 0x40
   14a4c:	sub	r4, r4, #4
   14a50:	add	r5, sp, #4
   14a54:	mov	ip, #0
   14a58:	ldr	lr, [r4, #4]!
   14a5c:	str	lr, [r5, #4]!
   14a60:	cmp	lr, #0
   14a64:	beq	14a74 <_obstack_memory_used@@Base+0x2038>
   14a68:	add	ip, ip, #1
   14a6c:	cmp	ip, #10
   14a70:	bne	14a58 <_obstack_memory_used@@Base+0x201c>
   14a74:	str	ip, [sp, #4]
   14a78:	add	ip, sp, #8
   14a7c:	str	ip, [sp]
   14a80:	bl	145d4 <_obstack_memory_used@@Base+0x1b98>
   14a84:	add	sp, sp, #52	; 0x34
   14a88:	pop	{r4, r5, pc}
   14a8c:	push	{r3}		; (str r3, [sp, #-4]!)
   14a90:	push	{lr}		; (str lr, [sp, #-4]!)
   14a94:	sub	sp, sp, #16
   14a98:	add	r3, sp, #24
   14a9c:	str	r3, [sp, #12]
   14aa0:	str	r3, [sp]
   14aa4:	ldr	r3, [sp, #20]
   14aa8:	bl	14a40 <_obstack_memory_used@@Base+0x2004>
   14aac:	add	sp, sp, #16
   14ab0:	pop	{lr}		; (ldr lr, [sp], #4)
   14ab4:	add	sp, sp, #4
   14ab8:	bx	lr
   14abc:	push	{r4, lr}
   14ac0:	ldr	r3, [pc, #112]	; 14b38 <_obstack_memory_used@@Base+0x20fc>
   14ac4:	ldr	r1, [r3]
   14ac8:	mov	r0, #10
   14acc:	bl	10dec <fputc_unlocked@plt>
   14ad0:	mov	r2, #5
   14ad4:	ldr	r1, [pc, #96]	; 14b3c <_obstack_memory_used@@Base+0x2100>
   14ad8:	mov	r0, #0
   14adc:	bl	10df8 <dcgettext@plt>
   14ae0:	ldr	r2, [pc, #88]	; 14b40 <_obstack_memory_used@@Base+0x2104>
   14ae4:	mov	r1, r0
   14ae8:	mov	r0, #1
   14aec:	bl	10f3c <__printf_chk@plt>
   14af0:	mov	r2, #5
   14af4:	ldr	r1, [pc, #72]	; 14b44 <_obstack_memory_used@@Base+0x2108>
   14af8:	mov	r0, #0
   14afc:	bl	10df8 <dcgettext@plt>
   14b00:	ldr	r3, [pc, #64]	; 14b48 <_obstack_memory_used@@Base+0x210c>
   14b04:	ldr	r2, [pc, #64]	; 14b4c <_obstack_memory_used@@Base+0x2110>
   14b08:	mov	r1, r0
   14b0c:	mov	r0, #1
   14b10:	bl	10f3c <__printf_chk@plt>
   14b14:	mov	r2, #5
   14b18:	ldr	r1, [pc, #48]	; 14b50 <_obstack_memory_used@@Base+0x2114>
   14b1c:	mov	r0, #0
   14b20:	bl	10df8 <dcgettext@plt>
   14b24:	ldr	r2, [pc, #40]	; 14b54 <_obstack_memory_used@@Base+0x2118>
   14b28:	mov	r1, r0
   14b2c:	mov	r0, #1
   14b30:	bl	10f3c <__printf_chk@plt>
   14b34:	pop	{r4, pc}
   14b38:	andeq	r8, r2, r4, asr r1
   14b3c:	andeq	r7, r1, r8, lsr #15
   14b40:			; <UNDEFINED> instruction: 0x000177bc
   14b44:	ldrdeq	r7, [r1], -r4
   14b48:	andeq	r6, r1, ip, asr pc
   14b4c:	andeq	r6, r1, r4, lsl #31
   14b50:	andeq	r7, r1, r8, ror #15
   14b54:	andeq	r7, r1, r0, lsl r8
   14b58:	push	{r4, lr}
   14b5c:	bl	1518c <_obstack_memory_used@@Base+0x2750>
   14b60:	cmp	r0, #0
   14b64:	popne	{r4, pc}
   14b68:	bl	150fc <_obstack_memory_used@@Base+0x26c0>
   14b6c:	push	{r4, lr}
   14b70:	bl	1518c <_obstack_memory_used@@Base+0x2750>
   14b74:	cmp	r0, #0
   14b78:	popne	{r4, pc}
   14b7c:	bl	150fc <_obstack_memory_used@@Base+0x26c0>
   14b80:	push	{r4, lr}
   14b84:	bl	14b58 <_obstack_memory_used@@Base+0x211c>
   14b88:	pop	{r4, pc}
   14b8c:	push	{r4, r5, r6, lr}
   14b90:	mov	r5, r0
   14b94:	mov	r4, r1
   14b98:	bl	151bc <_obstack_memory_used@@Base+0x2780>
   14b9c:	cmp	r0, #0
   14ba0:	popne	{r4, r5, r6, pc}
   14ba4:	adds	r4, r4, #0
   14ba8:	movne	r4, #1
   14bac:	cmp	r5, #0
   14bb0:	orreq	r4, r4, #1
   14bb4:	cmp	r4, #0
   14bb8:	popeq	{r4, r5, r6, pc}
   14bbc:	bl	150fc <_obstack_memory_used@@Base+0x26c0>
   14bc0:	push	{r4, lr}
   14bc4:	cmp	r1, #0
   14bc8:	orreq	r1, r1, #1
   14bcc:	bl	151bc <_obstack_memory_used@@Base+0x2780>
   14bd0:	cmp	r0, #0
   14bd4:	popne	{r4, pc}
   14bd8:	bl	150fc <_obstack_memory_used@@Base+0x26c0>
   14bdc:	push	{r4, r5, r6, lr}
   14be0:	mov	r6, r0
   14be4:	mov	r5, r1
   14be8:	mov	r4, r2
   14bec:	bl	15310 <_obstack_memory_used@@Base+0x28d4>
   14bf0:	cmp	r0, #0
   14bf4:	popne	{r4, r5, r6, pc}
   14bf8:	cmp	r6, #0
   14bfc:	beq	14c0c <_obstack_memory_used@@Base+0x21d0>
   14c00:	cmp	r5, #0
   14c04:	cmpne	r4, #0
   14c08:	popeq	{r4, r5, r6, pc}
   14c0c:	bl	150fc <_obstack_memory_used@@Base+0x26c0>
   14c10:	push	{r4, lr}
   14c14:	bl	14bdc <_obstack_memory_used@@Base+0x21a0>
   14c18:	pop	{r4, pc}
   14c1c:	push	{r4, lr}
   14c20:	mov	ip, r1
   14c24:	mov	r3, r2
   14c28:	cmp	r2, #0
   14c2c:	cmpne	r1, #0
   14c30:	moveq	r3, #1
   14c34:	moveq	ip, r3
   14c38:	mov	r2, r3
   14c3c:	mov	r1, ip
   14c40:	bl	15310 <_obstack_memory_used@@Base+0x28d4>
   14c44:	cmp	r0, #0
   14c48:	popne	{r4, pc}
   14c4c:	bl	150fc <_obstack_memory_used@@Base+0x26c0>
   14c50:	push	{r4, lr}
   14c54:	mov	r2, r1
   14c58:	mov	r1, r0
   14c5c:	mov	r0, #0
   14c60:	bl	14bdc <_obstack_memory_used@@Base+0x21a0>
   14c64:	pop	{r4, pc}
   14c68:	push	{r4, lr}
   14c6c:	mov	r2, r1
   14c70:	mov	r1, r0
   14c74:	mov	r0, #0
   14c78:	bl	14c1c <_obstack_memory_used@@Base+0x21e0>
   14c7c:	pop	{r4, pc}
   14c80:	push	{r4, r5, r6, r7, r8, lr}
   14c84:	mov	r5, r1
   14c88:	mov	r6, r2
   14c8c:	ldr	r4, [r1]
   14c90:	subs	r7, r0, #0
   14c94:	beq	14cb0 <_obstack_memory_used@@Base+0x2274>
   14c98:	lsr	r2, r4, #1
   14c9c:	add	r3, r2, #1
   14ca0:	mvn	r3, r3
   14ca4:	cmp	r4, r3
   14ca8:	bls	14cd4 <_obstack_memory_used@@Base+0x2298>
   14cac:	bl	150fc <_obstack_memory_used@@Base+0x26c0>
   14cb0:	cmp	r4, #0
   14cb4:	bne	14cdc <_obstack_memory_used@@Base+0x22a0>
   14cb8:	mov	r1, r2
   14cbc:	mov	r0, #64	; 0x40
   14cc0:	bl	15464 <_obstack_memory_used@@Base+0x2a28>
   14cc4:	cmp	r0, #0
   14cc8:	movne	r4, r0
   14ccc:	addeq	r4, r0, #1
   14cd0:	b	14cdc <_obstack_memory_used@@Base+0x22a0>
   14cd4:	add	r4, r4, #1
   14cd8:	add	r4, r4, r2
   14cdc:	mov	r2, r6
   14ce0:	mov	r1, r4
   14ce4:	mov	r0, r7
   14ce8:	bl	14bdc <_obstack_memory_used@@Base+0x21a0>
   14cec:	str	r4, [r5]
   14cf0:	pop	{r4, r5, r6, r7, r8, pc}
   14cf4:	push	{r4, lr}
   14cf8:	mov	r2, #1
   14cfc:	bl	14c80 <_obstack_memory_used@@Base+0x2244>
   14d00:	pop	{r4, pc}
   14d04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d08:	sub	sp, sp, #12
   14d0c:	mov	fp, r0
   14d10:	mov	sl, r1
   14d14:	mov	r9, r2
   14d18:	mov	r7, r3
   14d1c:	ldr	r6, [sp, #48]	; 0x30
   14d20:	ldr	r5, [r1]
   14d24:	asrs	r4, r5, #1
   14d28:	bmi	14e84 <_obstack_memory_used@@Base+0x2448>
   14d2c:	cmp	r5, #0
   14d30:	blt	14e98 <_obstack_memory_used@@Base+0x245c>
   14d34:	mvn	r3, #-2147483648	; 0x80000000
   14d38:	sub	r3, r3, r4
   14d3c:	cmp	r5, r3
   14d40:	movle	r3, #0
   14d44:	movgt	r3, #1
   14d48:	cmp	r3, #0
   14d4c:	addeq	r4, r4, r5
   14d50:	mvnne	r4, #-2147483648	; 0x80000000
   14d54:	mvn	r8, r7
   14d58:	lsr	r8, r8, #31
   14d5c:	cmp	r7, r4
   14d60:	movge	r3, #0
   14d64:	andlt	r3, r8, #1
   14d68:	cmp	r3, #0
   14d6c:	movne	r4, r7
   14d70:	cmp	r6, #0
   14d74:	blt	14eac <_obstack_memory_used@@Base+0x2470>
   14d78:	cmp	r6, #0
   14d7c:	beq	14f58 <_obstack_memory_used@@Base+0x251c>
   14d80:	cmp	r4, #0
   14d84:	blt	14f08 <_obstack_memory_used@@Base+0x24cc>
   14d88:	mov	r1, r6
   14d8c:	mvn	r0, #-2147483648	; 0x80000000
   14d90:	bl	15670 <_obstack_memory_used@@Base+0x2c34>
   14d94:	cmp	r0, r4
   14d98:	movge	r0, #0
   14d9c:	movlt	r0, #1
   14da0:	cmp	r0, #0
   14da4:	mvnne	r3, #-2147483648	; 0x80000000
   14da8:	strne	r3, [sp, #4]
   14dac:	beq	14f40 <_obstack_memory_used@@Base+0x2504>
   14db0:	mov	r1, r6
   14db4:	ldr	r0, [sp, #4]
   14db8:	bl	15670 <_obstack_memory_used@@Base+0x2c34>
   14dbc:	mov	r4, r0
   14dc0:	mov	r1, r6
   14dc4:	ldr	r0, [sp, #4]
   14dc8:	bl	15890 <_obstack_memory_used@@Base+0x2e54>
   14dcc:	ldr	r3, [sp, #4]
   14dd0:	sub	r1, r3, r1
   14dd4:	cmp	fp, #0
   14dd8:	moveq	r3, #0
   14ddc:	streq	r3, [sl]
   14de0:	sub	r3, r4, r5
   14de4:	cmp	r3, r9
   14de8:	bge	14e70 <_obstack_memory_used@@Base+0x2434>
   14dec:	cmp	r9, #0
   14df0:	blt	14f64 <_obstack_memory_used@@Base+0x2528>
   14df4:	cmp	r5, #0
   14df8:	blt	14f78 <_obstack_memory_used@@Base+0x253c>
   14dfc:	mvn	r3, #-2147483648	; 0x80000000
   14e00:	sub	r3, r3, r9
   14e04:	cmp	r5, r3
   14e08:	movle	r3, #0
   14e0c:	movgt	r3, #1
   14e10:	cmp	r3, #0
   14e14:	bne	15020 <_obstack_memory_used@@Base+0x25e4>
   14e18:	add	r5, r5, r9
   14e1c:	mov	r4, r5
   14e20:	cmp	r7, r5
   14e24:	movge	r7, #0
   14e28:	andlt	r7, r8, #1
   14e2c:	cmp	r7, #0
   14e30:	bne	15020 <_obstack_memory_used@@Base+0x25e4>
   14e34:	cmp	r6, #0
   14e38:	blt	14f8c <_obstack_memory_used@@Base+0x2550>
   14e3c:	cmp	r6, #0
   14e40:	beq	14e6c <_obstack_memory_used@@Base+0x2430>
   14e44:	cmp	r5, #0
   14e48:	blt	14fe8 <_obstack_memory_used@@Base+0x25ac>
   14e4c:	mov	r1, r6
   14e50:	mvn	r0, #-2147483648	; 0x80000000
   14e54:	bl	15670 <_obstack_memory_used@@Base+0x2c34>
   14e58:	cmp	r5, r0
   14e5c:	movle	r0, #0
   14e60:	movgt	r0, #1
   14e64:	cmp	r0, #0
   14e68:	bne	15020 <_obstack_memory_used@@Base+0x25e4>
   14e6c:	mul	r1, r5, r6
   14e70:	mov	r0, fp
   14e74:	bl	14b8c <_obstack_memory_used@@Base+0x2150>
   14e78:	str	r4, [sl]
   14e7c:	add	sp, sp, #12
   14e80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e84:	rsb	r3, r4, #-2147483648	; 0x80000000
   14e88:	cmp	r5, r3
   14e8c:	movge	r3, #0
   14e90:	movlt	r3, #1
   14e94:	b	14d48 <_obstack_memory_used@@Base+0x230c>
   14e98:	rsb	r3, r5, #-2147483648	; 0x80000000
   14e9c:	cmp	r4, r3
   14ea0:	movge	r3, #0
   14ea4:	movlt	r3, #1
   14ea8:	b	14d48 <_obstack_memory_used@@Base+0x230c>
   14eac:	cmp	r4, #0
   14eb0:	blt	14ed8 <_obstack_memory_used@@Base+0x249c>
   14eb4:	cmn	r6, #1
   14eb8:	beq	14ef4 <_obstack_memory_used@@Base+0x24b8>
   14ebc:	mov	r1, r6
   14ec0:	mov	r0, #-2147483648	; 0x80000000
   14ec4:	bl	15670 <_obstack_memory_used@@Base+0x2c34>
   14ec8:	cmp	r0, r4
   14ecc:	movge	r0, #0
   14ed0:	movlt	r0, #1
   14ed4:	b	14da0 <_obstack_memory_used@@Base+0x2364>
   14ed8:	mov	r1, r6
   14edc:	mvn	r0, #-2147483648	; 0x80000000
   14ee0:	bl	15670 <_obstack_memory_used@@Base+0x2c34>
   14ee4:	cmp	r0, r4
   14ee8:	movle	r0, #0
   14eec:	movgt	r0, #1
   14ef0:	b	14da0 <_obstack_memory_used@@Base+0x2364>
   14ef4:	add	r0, r4, #-2147483648	; 0x80000000
   14ef8:	cmp	r0, #0
   14efc:	movle	r0, #0
   14f00:	movgt	r0, #1
   14f04:	b	14da0 <_obstack_memory_used@@Base+0x2364>
   14f08:	cmn	r4, #1
   14f0c:	beq	14f2c <_obstack_memory_used@@Base+0x24f0>
   14f10:	mov	r1, r4
   14f14:	mov	r0, #-2147483648	; 0x80000000
   14f18:	bl	15670 <_obstack_memory_used@@Base+0x2c34>
   14f1c:	cmp	r6, r0
   14f20:	movle	r0, #0
   14f24:	movgt	r0, #1
   14f28:	b	14da0 <_obstack_memory_used@@Base+0x2364>
   14f2c:	add	r0, r6, #-2147483648	; 0x80000000
   14f30:	cmp	r0, #0
   14f34:	movle	r0, #0
   14f38:	movgt	r0, #1
   14f3c:	b	14da0 <_obstack_memory_used@@Base+0x2364>
   14f40:	mul	r1, r6, r4
   14f44:	cmp	r1, #63	; 0x3f
   14f48:	movle	r3, #64	; 0x40
   14f4c:	strle	r3, [sp, #4]
   14f50:	bgt	14dd4 <_obstack_memory_used@@Base+0x2398>
   14f54:	b	14db0 <_obstack_memory_used@@Base+0x2374>
   14f58:	mov	r3, #64	; 0x40
   14f5c:	str	r3, [sp, #4]
   14f60:	b	14db0 <_obstack_memory_used@@Base+0x2374>
   14f64:	rsb	r3, r9, #-2147483648	; 0x80000000
   14f68:	cmp	r5, r3
   14f6c:	movge	r3, #0
   14f70:	movlt	r3, #1
   14f74:	b	14e10 <_obstack_memory_used@@Base+0x23d4>
   14f78:	rsb	r3, r5, #-2147483648	; 0x80000000
   14f7c:	cmp	r9, r3
   14f80:	movge	r3, #0
   14f84:	movlt	r3, #1
   14f88:	b	14e10 <_obstack_memory_used@@Base+0x23d4>
   14f8c:	cmp	r5, #0
   14f90:	blt	14fb8 <_obstack_memory_used@@Base+0x257c>
   14f94:	cmn	r6, #1
   14f98:	beq	14fd4 <_obstack_memory_used@@Base+0x2598>
   14f9c:	mov	r1, r6
   14fa0:	mov	r0, #-2147483648	; 0x80000000
   14fa4:	bl	15670 <_obstack_memory_used@@Base+0x2c34>
   14fa8:	cmp	r5, r0
   14fac:	movle	r0, #0
   14fb0:	movgt	r0, #1
   14fb4:	b	14e64 <_obstack_memory_used@@Base+0x2428>
   14fb8:	mov	r1, r6
   14fbc:	mvn	r0, #-2147483648	; 0x80000000
   14fc0:	bl	15670 <_obstack_memory_used@@Base+0x2c34>
   14fc4:	cmp	r5, r0
   14fc8:	movge	r0, #0
   14fcc:	movlt	r0, #1
   14fd0:	b	14e64 <_obstack_memory_used@@Base+0x2428>
   14fd4:	add	r0, r5, #-2147483648	; 0x80000000
   14fd8:	cmp	r0, #0
   14fdc:	movle	r0, #0
   14fe0:	movgt	r0, #1
   14fe4:	b	14e64 <_obstack_memory_used@@Base+0x2428>
   14fe8:	cmn	r5, #1
   14fec:	beq	1500c <_obstack_memory_used@@Base+0x25d0>
   14ff0:	mov	r1, r5
   14ff4:	mov	r0, #-2147483648	; 0x80000000
   14ff8:	bl	15670 <_obstack_memory_used@@Base+0x2c34>
   14ffc:	cmp	r6, r0
   15000:	movle	r0, #0
   15004:	movgt	r0, #1
   15008:	b	14e64 <_obstack_memory_used@@Base+0x2428>
   1500c:	add	r0, r6, #-2147483648	; 0x80000000
   15010:	cmp	r0, #0
   15014:	movle	r0, #0
   15018:	movgt	r0, #1
   1501c:	b	14e64 <_obstack_memory_used@@Base+0x2428>
   15020:	bl	150fc <_obstack_memory_used@@Base+0x26c0>
   15024:	push	{r4, lr}
   15028:	bl	1513c <_obstack_memory_used@@Base+0x2700>
   1502c:	cmp	r0, #0
   15030:	popne	{r4, pc}
   15034:	bl	150fc <_obstack_memory_used@@Base+0x26c0>
   15038:	push	{r4, lr}
   1503c:	mov	r1, #1
   15040:	bl	15024 <_obstack_memory_used@@Base+0x25e8>
   15044:	pop	{r4, pc}
   15048:	push	{r4, lr}
   1504c:	bl	1513c <_obstack_memory_used@@Base+0x2700>
   15050:	cmp	r0, #0
   15054:	popne	{r4, pc}
   15058:	bl	150fc <_obstack_memory_used@@Base+0x26c0>
   1505c:	push	{r4, lr}
   15060:	mov	r1, #1
   15064:	bl	15048 <_obstack_memory_used@@Base+0x260c>
   15068:	pop	{r4, pc}
   1506c:	push	{r4, r5, r6, lr}
   15070:	mov	r5, r0
   15074:	mov	r4, r1
   15078:	mov	r0, r1
   1507c:	bl	14b58 <_obstack_memory_used@@Base+0x211c>
   15080:	mov	r2, r4
   15084:	mov	r1, r5
   15088:	bl	10dbc <memcpy@plt>
   1508c:	pop	{r4, r5, r6, pc}
   15090:	push	{r4, r5, r6, lr}
   15094:	mov	r5, r0
   15098:	mov	r4, r1
   1509c:	mov	r0, r1
   150a0:	bl	14b6c <_obstack_memory_used@@Base+0x2130>
   150a4:	mov	r2, r4
   150a8:	mov	r1, r5
   150ac:	bl	10dbc <memcpy@plt>
   150b0:	pop	{r4, r5, r6, pc}
   150b4:	push	{r4, r5, r6, lr}
   150b8:	mov	r5, r0
   150bc:	mov	r4, r1
   150c0:	add	r0, r1, #1
   150c4:	bl	14b6c <_obstack_memory_used@@Base+0x2130>
   150c8:	mov	r2, #0
   150cc:	strb	r2, [r0, r4]
   150d0:	mov	r2, r4
   150d4:	mov	r1, r5
   150d8:	bl	10dbc <memcpy@plt>
   150dc:	pop	{r4, r5, r6, pc}
   150e0:	push	{r4, lr}
   150e4:	mov	r4, r0
   150e8:	bl	10f0c <strlen@plt>
   150ec:	add	r1, r0, #1
   150f0:	mov	r0, r4
   150f4:	bl	1506c <_obstack_memory_used@@Base+0x2630>
   150f8:	pop	{r4, pc}
   150fc:	push	{r4, lr}
   15100:	ldr	r3, [pc, #40]	; 15130 <_obstack_memory_used@@Base+0x26f4>
   15104:	ldr	r4, [r3]
   15108:	mov	r2, #5
   1510c:	ldr	r1, [pc, #32]	; 15134 <_obstack_memory_used@@Base+0x26f8>
   15110:	mov	r0, #0
   15114:	bl	10df8 <dcgettext@plt>
   15118:	mov	r3, r0
   1511c:	ldr	r2, [pc, #20]	; 15138 <_obstack_memory_used@@Base+0x26fc>
   15120:	mov	r1, #0
   15124:	mov	r0, r4
   15128:	bl	10e70 <error@plt>
   1512c:	bl	10fb4 <abort@plt>
   15130:	andeq	r8, r2, ip, ror #1
   15134:	andeq	r7, r1, r4, lsl r4
   15138:	andeq	r7, r1, r4, lsl #8
   1513c:	push	{r4, lr}
   15140:	mov	r2, r0
   15144:	mov	r3, r1
   15148:	cmp	r1, #0
   1514c:	cmpne	r0, #0
   15150:	moveq	r3, #1
   15154:	moveq	r2, r3
   15158:	umull	r0, r1, r2, r3
   1515c:	cmp	r0, #0
   15160:	cmpge	r1, #0
   15164:	bne	15178 <_obstack_memory_used@@Base+0x273c>
   15168:	mov	r1, r3
   1516c:	mov	r0, r2
   15170:	bl	10d5c <calloc@plt>
   15174:	pop	{r4, pc}
   15178:	bl	10f18 <__errno_location@plt>
   1517c:	mov	r3, #12
   15180:	str	r3, [r0]
   15184:	mov	r0, #0
   15188:	pop	{r4, pc}
   1518c:	push	{r4, lr}
   15190:	cmp	r0, #0
   15194:	moveq	r0, #1
   15198:	cmp	r0, #0
   1519c:	blt	151a8 <_obstack_memory_used@@Base+0x276c>
   151a0:	bl	10eac <malloc@plt>
   151a4:	pop	{r4, pc}
   151a8:	bl	10f18 <__errno_location@plt>
   151ac:	mov	r3, #12
   151b0:	str	r3, [r0]
   151b4:	mov	r0, #0
   151b8:	pop	{r4, pc}
   151bc:	push	{r4, lr}
   151c0:	cmp	r0, #0
   151c4:	beq	151e0 <_obstack_memory_used@@Base+0x27a4>
   151c8:	cmp	r1, #0
   151cc:	beq	151ec <_obstack_memory_used@@Base+0x27b0>
   151d0:	cmp	r1, #0
   151d4:	blt	151f8 <_obstack_memory_used@@Base+0x27bc>
   151d8:	bl	10e10 <realloc@plt>
   151dc:	pop	{r4, pc}
   151e0:	mov	r0, r1
   151e4:	bl	1518c <_obstack_memory_used@@Base+0x2750>
   151e8:	pop	{r4, pc}
   151ec:	bl	12418 <close@plt+0x1458>
   151f0:	mov	r0, #0
   151f4:	pop	{r4, pc}
   151f8:	bl	10f18 <__errno_location@plt>
   151fc:	mov	r3, #12
   15200:	str	r3, [r0]
   15204:	mov	r0, #0
   15208:	pop	{r4, pc}
   1520c:	push	{r4, r5, r6, lr}
   15210:	mov	r5, r0
   15214:	bl	10e58 <__fpending@plt>
   15218:	mov	r6, r0
   1521c:	ldr	r4, [r5]
   15220:	and	r4, r4, #32
   15224:	mov	r0, r5
   15228:	bl	1230c <close@plt+0x134c>
   1522c:	cmp	r4, #0
   15230:	bne	15258 <_obstack_memory_used@@Base+0x281c>
   15234:	cmp	r0, #0
   15238:	popeq	{r4, r5, r6, pc}
   1523c:	cmp	r6, #0
   15240:	bne	15274 <_obstack_memory_used@@Base+0x2838>
   15244:	bl	10f18 <__errno_location@plt>
   15248:	ldr	r0, [r0]
   1524c:	subs	r0, r0, #9
   15250:	mvnne	r0, #0
   15254:	pop	{r4, r5, r6, pc}
   15258:	cmp	r0, #0
   1525c:	bne	1527c <_obstack_memory_used@@Base+0x2840>
   15260:	bl	10f18 <__errno_location@plt>
   15264:	mov	r3, #0
   15268:	str	r3, [r0]
   1526c:	mvn	r0, #0
   15270:	pop	{r4, r5, r6, pc}
   15274:	mvn	r0, #0
   15278:	pop	{r4, r5, r6, pc}
   1527c:	mvn	r0, #0
   15280:	pop	{r4, r5, r6, pc}
   15284:	push	{r4, lr}
   15288:	mov	r0, #14
   1528c:	bl	10f90 <nl_langinfo@plt>
   15290:	cmp	r0, #0
   15294:	beq	152ac <_obstack_memory_used@@Base+0x2870>
   15298:	ldrb	r2, [r0]
   1529c:	ldr	r3, [pc, #16]	; 152b4 <_obstack_memory_used@@Base+0x2878>
   152a0:	cmp	r2, #0
   152a4:	moveq	r0, r3
   152a8:	pop	{r4, pc}
   152ac:	ldr	r0, [pc]	; 152b4 <_obstack_memory_used@@Base+0x2878>
   152b0:	pop	{r4, pc}
   152b4:	andeq	r7, r1, r0, ror #16
   152b8:	push	{r4, r5, r6, r7, lr}
   152bc:	sub	sp, sp, #12
   152c0:	mov	r7, r1
   152c4:	mov	r5, r2
   152c8:	subs	r6, r0, #0
   152cc:	addeq	r6, sp, #4
   152d0:	mov	r0, r6
   152d4:	bl	10e64 <mbrtowc@plt>
   152d8:	mov	r4, r0
   152dc:	cmp	r5, #0
   152e0:	cmnne	r0, #3
   152e4:	bhi	152f4 <_obstack_memory_used@@Base+0x28b8>
   152e8:	mov	r0, r4
   152ec:	add	sp, sp, #12
   152f0:	pop	{r4, r5, r6, r7, pc}
   152f4:	mov	r0, #0
   152f8:	bl	1535c <_obstack_memory_used@@Base+0x2920>
   152fc:	cmp	r0, #0
   15300:	ldrbeq	r3, [r7]
   15304:	streq	r3, [r6]
   15308:	moveq	r4, #1
   1530c:	b	152e8 <_obstack_memory_used@@Base+0x28ac>
   15310:	push	{r4, r5, r6, lr}
   15314:	mov	r6, r0
   15318:	mov	r5, r1
   1531c:	subs	r4, r2, #0
   15320:	beq	1534c <_obstack_memory_used@@Base+0x2910>
   15324:	mov	r1, r4
   15328:	mvn	r0, #0
   1532c:	bl	15464 <_obstack_memory_used@@Base+0x2a28>
   15330:	cmp	r0, r5
   15334:	bcs	1534c <_obstack_memory_used@@Base+0x2910>
   15338:	bl	10f18 <__errno_location@plt>
   1533c:	mov	r3, #12
   15340:	str	r3, [r0]
   15344:	mov	r0, #0
   15348:	pop	{r4, r5, r6, pc}
   1534c:	mul	r1, r5, r4
   15350:	mov	r0, r6
   15354:	bl	151bc <_obstack_memory_used@@Base+0x2780>
   15358:	pop	{r4, r5, r6, pc}
   1535c:	push	{lr}		; (str lr, [sp, #-4]!)
   15360:	sub	sp, sp, #268	; 0x10c
   15364:	ldr	r2, [pc, #68]	; 153b0 <_obstack_memory_used@@Base+0x2974>
   15368:	add	r1, sp, #4
   1536c:	bl	153bc <_obstack_memory_used@@Base+0x2980>
   15370:	cmp	r0, #0
   15374:	movne	r0, #0
   15378:	bne	153a8 <_obstack_memory_used@@Base+0x296c>
   1537c:	ldr	r1, [pc, #48]	; 153b4 <_obstack_memory_used@@Base+0x2978>
   15380:	add	r0, sp, #4
   15384:	bl	10d8c <strcmp@plt>
   15388:	cmp	r0, #0
   1538c:	moveq	r0, #0
   15390:	beq	153a8 <_obstack_memory_used@@Base+0x296c>
   15394:	ldr	r1, [pc, #28]	; 153b8 <_obstack_memory_used@@Base+0x297c>
   15398:	add	r0, sp, #4
   1539c:	bl	10d8c <strcmp@plt>
   153a0:	adds	r0, r0, #0
   153a4:	movne	r0, #1
   153a8:	add	sp, sp, #268	; 0x10c
   153ac:	pop	{pc}		; (ldr pc, [sp], #4)
   153b0:	andeq	r0, r0, r1, lsl #2
   153b4:	andeq	r7, r1, r8, ror #16
   153b8:	andeq	r7, r1, ip, ror #16
   153bc:	push	{r4, r5, r6, lr}
   153c0:	mov	r6, r1
   153c4:	mov	r4, r2
   153c8:	mov	r1, #0
   153cc:	bl	10f78 <setlocale@plt>
   153d0:	subs	r5, r0, #0
   153d4:	beq	153f8 <_obstack_memory_used@@Base+0x29bc>
   153d8:	mov	r0, r5
   153dc:	bl	10f0c <strlen@plt>
   153e0:	cmp	r4, r0
   153e4:	bhi	15410 <_obstack_memory_used@@Base+0x29d4>
   153e8:	cmp	r4, #0
   153ec:	bne	15428 <_obstack_memory_used@@Base+0x29ec>
   153f0:	mov	r0, #34	; 0x22
   153f4:	pop	{r4, r5, r6, pc}
   153f8:	cmp	r4, #0
   153fc:	beq	1544c <_obstack_memory_used@@Base+0x2a10>
   15400:	mov	r3, #0
   15404:	strb	r3, [r6]
   15408:	mov	r0, #22
   1540c:	pop	{r4, r5, r6, pc}
   15410:	add	r2, r0, #1
   15414:	mov	r1, r5
   15418:	mov	r0, r6
   1541c:	bl	10dbc <memcpy@plt>
   15420:	mov	r0, #0
   15424:	pop	{r4, r5, r6, pc}
   15428:	sub	r4, r4, #1
   1542c:	mov	r2, r4
   15430:	mov	r1, r5
   15434:	mov	r0, r6
   15438:	bl	10dbc <memcpy@plt>
   1543c:	mov	r3, #0
   15440:	strb	r3, [r6, r4]
   15444:	mov	r0, #34	; 0x22
   15448:	pop	{r4, r5, r6, pc}
   1544c:	mov	r0, #22
   15450:	pop	{r4, r5, r6, pc}
   15454:	push	{r4, lr}
   15458:	mov	r1, #0
   1545c:	bl	10f78 <setlocale@plt>
   15460:	pop	{r4, pc}
   15464:	subs	r2, r1, #1
   15468:	bxeq	lr
   1546c:	bcc	15644 <_obstack_memory_used@@Base+0x2c08>
   15470:	cmp	r0, r1
   15474:	bls	15628 <_obstack_memory_used@@Base+0x2bec>
   15478:	tst	r1, r2
   1547c:	beq	15634 <_obstack_memory_used@@Base+0x2bf8>
   15480:	clz	r3, r0
   15484:	clz	r2, r1
   15488:	sub	r3, r2, r3
   1548c:	rsbs	r3, r3, #31
   15490:	addne	r3, r3, r3, lsl #1
   15494:	mov	r2, #0
   15498:	addne	pc, pc, r3, lsl #2
   1549c:	nop			; (mov r0, r0)
   154a0:	cmp	r0, r1, lsl #31
   154a4:	adc	r2, r2, r2
   154a8:	subcs	r0, r0, r1, lsl #31
   154ac:	cmp	r0, r1, lsl #30
   154b0:	adc	r2, r2, r2
   154b4:	subcs	r0, r0, r1, lsl #30
   154b8:	cmp	r0, r1, lsl #29
   154bc:	adc	r2, r2, r2
   154c0:	subcs	r0, r0, r1, lsl #29
   154c4:	cmp	r0, r1, lsl #28
   154c8:	adc	r2, r2, r2
   154cc:	subcs	r0, r0, r1, lsl #28
   154d0:	cmp	r0, r1, lsl #27
   154d4:	adc	r2, r2, r2
   154d8:	subcs	r0, r0, r1, lsl #27
   154dc:	cmp	r0, r1, lsl #26
   154e0:	adc	r2, r2, r2
   154e4:	subcs	r0, r0, r1, lsl #26
   154e8:	cmp	r0, r1, lsl #25
   154ec:	adc	r2, r2, r2
   154f0:	subcs	r0, r0, r1, lsl #25
   154f4:	cmp	r0, r1, lsl #24
   154f8:	adc	r2, r2, r2
   154fc:	subcs	r0, r0, r1, lsl #24
   15500:	cmp	r0, r1, lsl #23
   15504:	adc	r2, r2, r2
   15508:	subcs	r0, r0, r1, lsl #23
   1550c:	cmp	r0, r1, lsl #22
   15510:	adc	r2, r2, r2
   15514:	subcs	r0, r0, r1, lsl #22
   15518:	cmp	r0, r1, lsl #21
   1551c:	adc	r2, r2, r2
   15520:	subcs	r0, r0, r1, lsl #21
   15524:	cmp	r0, r1, lsl #20
   15528:	adc	r2, r2, r2
   1552c:	subcs	r0, r0, r1, lsl #20
   15530:	cmp	r0, r1, lsl #19
   15534:	adc	r2, r2, r2
   15538:	subcs	r0, r0, r1, lsl #19
   1553c:	cmp	r0, r1, lsl #18
   15540:	adc	r2, r2, r2
   15544:	subcs	r0, r0, r1, lsl #18
   15548:	cmp	r0, r1, lsl #17
   1554c:	adc	r2, r2, r2
   15550:	subcs	r0, r0, r1, lsl #17
   15554:	cmp	r0, r1, lsl #16
   15558:	adc	r2, r2, r2
   1555c:	subcs	r0, r0, r1, lsl #16
   15560:	cmp	r0, r1, lsl #15
   15564:	adc	r2, r2, r2
   15568:	subcs	r0, r0, r1, lsl #15
   1556c:	cmp	r0, r1, lsl #14
   15570:	adc	r2, r2, r2
   15574:	subcs	r0, r0, r1, lsl #14
   15578:	cmp	r0, r1, lsl #13
   1557c:	adc	r2, r2, r2
   15580:	subcs	r0, r0, r1, lsl #13
   15584:	cmp	r0, r1, lsl #12
   15588:	adc	r2, r2, r2
   1558c:	subcs	r0, r0, r1, lsl #12
   15590:	cmp	r0, r1, lsl #11
   15594:	adc	r2, r2, r2
   15598:	subcs	r0, r0, r1, lsl #11
   1559c:	cmp	r0, r1, lsl #10
   155a0:	adc	r2, r2, r2
   155a4:	subcs	r0, r0, r1, lsl #10
   155a8:	cmp	r0, r1, lsl #9
   155ac:	adc	r2, r2, r2
   155b0:	subcs	r0, r0, r1, lsl #9
   155b4:	cmp	r0, r1, lsl #8
   155b8:	adc	r2, r2, r2
   155bc:	subcs	r0, r0, r1, lsl #8
   155c0:	cmp	r0, r1, lsl #7
   155c4:	adc	r2, r2, r2
   155c8:	subcs	r0, r0, r1, lsl #7
   155cc:	cmp	r0, r1, lsl #6
   155d0:	adc	r2, r2, r2
   155d4:	subcs	r0, r0, r1, lsl #6
   155d8:	cmp	r0, r1, lsl #5
   155dc:	adc	r2, r2, r2
   155e0:	subcs	r0, r0, r1, lsl #5
   155e4:	cmp	r0, r1, lsl #4
   155e8:	adc	r2, r2, r2
   155ec:	subcs	r0, r0, r1, lsl #4
   155f0:	cmp	r0, r1, lsl #3
   155f4:	adc	r2, r2, r2
   155f8:	subcs	r0, r0, r1, lsl #3
   155fc:	cmp	r0, r1, lsl #2
   15600:	adc	r2, r2, r2
   15604:	subcs	r0, r0, r1, lsl #2
   15608:	cmp	r0, r1, lsl #1
   1560c:	adc	r2, r2, r2
   15610:	subcs	r0, r0, r1, lsl #1
   15614:	cmp	r0, r1
   15618:	adc	r2, r2, r2
   1561c:	subcs	r0, r0, r1
   15620:	mov	r0, r2
   15624:	bx	lr
   15628:	moveq	r0, #1
   1562c:	movne	r0, #0
   15630:	bx	lr
   15634:	clz	r2, r1
   15638:	rsb	r2, r2, #31
   1563c:	lsr	r0, r0, r2
   15640:	bx	lr
   15644:	cmp	r0, #0
   15648:	mvnne	r0, #0
   1564c:	b	158b0 <_obstack_memory_used@@Base+0x2e74>
   15650:	cmp	r1, #0
   15654:	beq	15644 <_obstack_memory_used@@Base+0x2c08>
   15658:	push	{r0, r1, lr}
   1565c:	bl	15464 <_obstack_memory_used@@Base+0x2a28>
   15660:	pop	{r1, r2, lr}
   15664:	mul	r3, r2, r0
   15668:	sub	r1, r1, r3
   1566c:	bx	lr
   15670:	cmp	r1, #0
   15674:	beq	15880 <_obstack_memory_used@@Base+0x2e44>
   15678:	eor	ip, r0, r1
   1567c:	rsbmi	r1, r1, #0
   15680:	subs	r2, r1, #1
   15684:	beq	1584c <_obstack_memory_used@@Base+0x2e10>
   15688:	movs	r3, r0
   1568c:	rsbmi	r3, r0, #0
   15690:	cmp	r3, r1
   15694:	bls	15858 <_obstack_memory_used@@Base+0x2e1c>
   15698:	tst	r1, r2
   1569c:	beq	15868 <_obstack_memory_used@@Base+0x2e2c>
   156a0:	clz	r2, r3
   156a4:	clz	r0, r1
   156a8:	sub	r2, r0, r2
   156ac:	rsbs	r2, r2, #31
   156b0:	addne	r2, r2, r2, lsl #1
   156b4:	mov	r0, #0
   156b8:	addne	pc, pc, r2, lsl #2
   156bc:	nop			; (mov r0, r0)
   156c0:	cmp	r3, r1, lsl #31
   156c4:	adc	r0, r0, r0
   156c8:	subcs	r3, r3, r1, lsl #31
   156cc:	cmp	r3, r1, lsl #30
   156d0:	adc	r0, r0, r0
   156d4:	subcs	r3, r3, r1, lsl #30
   156d8:	cmp	r3, r1, lsl #29
   156dc:	adc	r0, r0, r0
   156e0:	subcs	r3, r3, r1, lsl #29
   156e4:	cmp	r3, r1, lsl #28
   156e8:	adc	r0, r0, r0
   156ec:	subcs	r3, r3, r1, lsl #28
   156f0:	cmp	r3, r1, lsl #27
   156f4:	adc	r0, r0, r0
   156f8:	subcs	r3, r3, r1, lsl #27
   156fc:	cmp	r3, r1, lsl #26
   15700:	adc	r0, r0, r0
   15704:	subcs	r3, r3, r1, lsl #26
   15708:	cmp	r3, r1, lsl #25
   1570c:	adc	r0, r0, r0
   15710:	subcs	r3, r3, r1, lsl #25
   15714:	cmp	r3, r1, lsl #24
   15718:	adc	r0, r0, r0
   1571c:	subcs	r3, r3, r1, lsl #24
   15720:	cmp	r3, r1, lsl #23
   15724:	adc	r0, r0, r0
   15728:	subcs	r3, r3, r1, lsl #23
   1572c:	cmp	r3, r1, lsl #22
   15730:	adc	r0, r0, r0
   15734:	subcs	r3, r3, r1, lsl #22
   15738:	cmp	r3, r1, lsl #21
   1573c:	adc	r0, r0, r0
   15740:	subcs	r3, r3, r1, lsl #21
   15744:	cmp	r3, r1, lsl #20
   15748:	adc	r0, r0, r0
   1574c:	subcs	r3, r3, r1, lsl #20
   15750:	cmp	r3, r1, lsl #19
   15754:	adc	r0, r0, r0
   15758:	subcs	r3, r3, r1, lsl #19
   1575c:	cmp	r3, r1, lsl #18
   15760:	adc	r0, r0, r0
   15764:	subcs	r3, r3, r1, lsl #18
   15768:	cmp	r3, r1, lsl #17
   1576c:	adc	r0, r0, r0
   15770:	subcs	r3, r3, r1, lsl #17
   15774:	cmp	r3, r1, lsl #16
   15778:	adc	r0, r0, r0
   1577c:	subcs	r3, r3, r1, lsl #16
   15780:	cmp	r3, r1, lsl #15
   15784:	adc	r0, r0, r0
   15788:	subcs	r3, r3, r1, lsl #15
   1578c:	cmp	r3, r1, lsl #14
   15790:	adc	r0, r0, r0
   15794:	subcs	r3, r3, r1, lsl #14
   15798:	cmp	r3, r1, lsl #13
   1579c:	adc	r0, r0, r0
   157a0:	subcs	r3, r3, r1, lsl #13
   157a4:	cmp	r3, r1, lsl #12
   157a8:	adc	r0, r0, r0
   157ac:	subcs	r3, r3, r1, lsl #12
   157b0:	cmp	r3, r1, lsl #11
   157b4:	adc	r0, r0, r0
   157b8:	subcs	r3, r3, r1, lsl #11
   157bc:	cmp	r3, r1, lsl #10
   157c0:	adc	r0, r0, r0
   157c4:	subcs	r3, r3, r1, lsl #10
   157c8:	cmp	r3, r1, lsl #9
   157cc:	adc	r0, r0, r0
   157d0:	subcs	r3, r3, r1, lsl #9
   157d4:	cmp	r3, r1, lsl #8
   157d8:	adc	r0, r0, r0
   157dc:	subcs	r3, r3, r1, lsl #8
   157e0:	cmp	r3, r1, lsl #7
   157e4:	adc	r0, r0, r0
   157e8:	subcs	r3, r3, r1, lsl #7
   157ec:	cmp	r3, r1, lsl #6
   157f0:	adc	r0, r0, r0
   157f4:	subcs	r3, r3, r1, lsl #6
   157f8:	cmp	r3, r1, lsl #5
   157fc:	adc	r0, r0, r0
   15800:	subcs	r3, r3, r1, lsl #5
   15804:	cmp	r3, r1, lsl #4
   15808:	adc	r0, r0, r0
   1580c:	subcs	r3, r3, r1, lsl #4
   15810:	cmp	r3, r1, lsl #3
   15814:	adc	r0, r0, r0
   15818:	subcs	r3, r3, r1, lsl #3
   1581c:	cmp	r3, r1, lsl #2
   15820:	adc	r0, r0, r0
   15824:	subcs	r3, r3, r1, lsl #2
   15828:	cmp	r3, r1, lsl #1
   1582c:	adc	r0, r0, r0
   15830:	subcs	r3, r3, r1, lsl #1
   15834:	cmp	r3, r1
   15838:	adc	r0, r0, r0
   1583c:	subcs	r3, r3, r1
   15840:	cmp	ip, #0
   15844:	rsbmi	r0, r0, #0
   15848:	bx	lr
   1584c:	teq	ip, r0
   15850:	rsbmi	r0, r0, #0
   15854:	bx	lr
   15858:	movcc	r0, #0
   1585c:	asreq	r0, ip, #31
   15860:	orreq	r0, r0, #1
   15864:	bx	lr
   15868:	clz	r2, r1
   1586c:	rsb	r2, r2, #31
   15870:	cmp	ip, #0
   15874:	lsr	r0, r3, r2
   15878:	rsbmi	r0, r0, #0
   1587c:	bx	lr
   15880:	cmp	r0, #0
   15884:	mvngt	r0, #-2147483648	; 0x80000000
   15888:	movlt	r0, #-2147483648	; 0x80000000
   1588c:	b	158b0 <_obstack_memory_used@@Base+0x2e74>
   15890:	cmp	r1, #0
   15894:	beq	15880 <_obstack_memory_used@@Base+0x2e44>
   15898:	push	{r0, r1, lr}
   1589c:	bl	15678 <_obstack_memory_used@@Base+0x2c3c>
   158a0:	pop	{r1, r2, lr}
   158a4:	mul	r3, r2, r0
   158a8:	sub	r1, r1, r3
   158ac:	bx	lr
   158b0:	push	{r1, lr}
   158b4:	mov	r0, #8
   158b8:	bl	10d74 <raise@plt>
   158bc:	pop	{r1, pc}
   158c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   158c4:	mov	r7, r0
   158c8:	ldr	r6, [pc, #72]	; 15918 <_obstack_memory_used@@Base+0x2edc>
   158cc:	ldr	r5, [pc, #72]	; 1591c <_obstack_memory_used@@Base+0x2ee0>
   158d0:	add	r6, pc, r6
   158d4:	add	r5, pc, r5
   158d8:	sub	r6, r6, r5
   158dc:	mov	r8, r1
   158e0:	mov	r9, r2
   158e4:	bl	10d3c <calloc@plt-0x20>
   158e8:	asrs	r6, r6, #2
   158ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   158f0:	mov	r4, #0
   158f4:	add	r4, r4, #1
   158f8:	ldr	r3, [r5], #4
   158fc:	mov	r2, r9
   15900:	mov	r1, r8
   15904:	mov	r0, r7
   15908:	blx	r3
   1590c:	cmp	r6, r4
   15910:	bne	158f4 <_obstack_memory_used@@Base+0x2eb8>
   15914:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15918:	andeq	r2, r1, r8, lsr r6
   1591c:	andeq	r2, r1, r0, lsr r6
   15920:	bx	lr
   15924:	ldr	r3, [pc, #12]	; 15938 <_obstack_memory_used@@Base+0x2efc>
   15928:	mov	r1, #0
   1592c:	add	r3, pc, r3
   15930:	ldr	r2, [r3]
   15934:	b	10f24 <__cxa_atexit@plt>
   15938:			; <UNDEFINED> instruction: 0x000127b0

Disassembly of section .fini:

0001593c <.fini>:
   1593c:	push	{r3, lr}
   15940:	pop	{r3, pc}
