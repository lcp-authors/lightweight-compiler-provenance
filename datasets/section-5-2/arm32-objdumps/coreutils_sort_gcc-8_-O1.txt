
../repos/coreutils/src/sort:     file format elf32-littlearm


Disassembly of section .init:

000119d0 <.init>:
   119d0:	push	{r3, lr}
   119d4:	bl	11f94 <__assert_fail@plt+0x4c>
   119d8:	pop	{r3, pc}

Disassembly of section .plt:

000119dc <pthread_mutex_unlock@plt-0x14>:
   119dc:	push	{lr}		; (str lr, [sp, #-4]!)
   119e0:	ldr	lr, [pc, #4]	; 119ec <pthread_mutex_unlock@plt-0x4>
   119e4:	add	lr, pc, lr
   119e8:	ldr	pc, [lr, #8]!
   119ec:	andeq	r4, r2, r4, lsl r6

000119f0 <pthread_mutex_unlock@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #36, 20	; 0x24000
   119f8:	ldr	pc, [ip, #1556]!	; 0x614

000119fc <fdopen@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #36, 20	; 0x24000
   11a04:	ldr	pc, [ip, #1548]!	; 0x60c

00011a08 <calloc@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #36, 20	; 0x24000
   11a10:	ldr	pc, [ip, #1540]!	; 0x604

00011a14 <fputs_unlocked@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #36, 20	; 0x24000
   11a1c:	ldr	pc, [ip, #1532]!	; 0x5fc

00011a20 <raise@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #36, 20	; 0x24000
   11a28:	ldr	pc, [ip, #1524]!	; 0x5f4

00011a2c <strcmp@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #36, 20	; 0x24000
   11a34:	ldr	pc, [ip, #1516]!	; 0x5ec

00011a38 <strtol@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #36, 20	; 0x24000
   11a40:	ldr	pc, [ip, #1508]!	; 0x5e4

00011a44 <posix_fadvise64@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #36, 20	; 0x24000
   11a4c:	ldr	pc, [ip, #1500]!	; 0x5dc

00011a50 <pause@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #36, 20	; 0x24000
   11a58:	ldr	pc, [ip, #1492]!	; 0x5d4

00011a5c <pthread_mutex_destroy@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #36, 20	; 0x24000
   11a64:	ldr	pc, [ip, #1484]!	; 0x5cc

00011a68 <fflush@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #36, 20	; 0x24000
   11a70:	ldr	pc, [ip, #1476]!	; 0x5c4

00011a74 <wcwidth@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #36, 20	; 0x24000
   11a7c:	ldr	pc, [ip, #1468]!	; 0x5bc

00011a80 <memmove@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #36, 20	; 0x24000
   11a88:	ldr	pc, [ip, #1460]!	; 0x5b4

00011a8c <free@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #36, 20	; 0x24000
   11a94:	ldr	pc, [ip, #1452]!	; 0x5ac

00011a98 <pthread_mutex_lock@plt>:
   11a98:	add	ip, pc, #0, 12
   11a9c:	add	ip, ip, #36, 20	; 0x24000
   11aa0:	ldr	pc, [ip, #1444]!	; 0x5a4

00011aa4 <nanosleep@plt>:
   11aa4:	add	ip, pc, #0, 12
   11aa8:	add	ip, ip, #36, 20	; 0x24000
   11aac:	ldr	pc, [ip, #1436]!	; 0x59c

00011ab0 <ferror@plt>:
   11ab0:	add	ip, pc, #0, 12
   11ab4:	add	ip, ip, #36, 20	; 0x24000
   11ab8:	ldr	pc, [ip, #1428]!	; 0x594

00011abc <_exit@plt>:
   11abc:	add	ip, pc, #0, 12
   11ac0:	add	ip, ip, #36, 20	; 0x24000
   11ac4:	ldr	pc, [ip, #1420]!	; 0x58c

00011ac8 <memcpy@plt>:
   11ac8:	add	ip, pc, #0, 12
   11acc:	add	ip, ip, #36, 20	; 0x24000
   11ad0:	ldr	pc, [ip, #1412]!	; 0x584

00011ad4 <execlp@plt>:
   11ad4:	add	ip, pc, #0, 12
   11ad8:	add	ip, ip, #36, 20	; 0x24000
   11adc:	ldr	pc, [ip, #1404]!	; 0x57c

00011ae0 <pthread_mutex_init@plt>:
   11ae0:	add	ip, pc, #0, 12
   11ae4:	add	ip, ip, #36, 20	; 0x24000
   11ae8:	ldr	pc, [ip, #1396]!	; 0x574

00011aec <__strtoull_internal@plt>:
   11aec:	add	ip, pc, #0, 12
   11af0:	add	ip, ip, #36, 20	; 0x24000
   11af4:	ldr	pc, [ip, #1388]!	; 0x56c

00011af8 <mbsinit@plt>:
   11af8:	add	ip, pc, #0, 12
   11afc:	add	ip, ip, #36, 20	; 0x24000
   11b00:	ldr	pc, [ip, #1380]!	; 0x564

00011b04 <signal@plt>:
   11b04:	add	ip, pc, #0, 12
   11b08:	add	ip, ip, #36, 20	; 0x24000
   11b0c:	ldr	pc, [ip, #1372]!	; 0x55c

00011b10 <__sched_cpucount@plt>:
   11b10:	add	ip, pc, #0, 12
   11b14:	add	ip, ip, #36, 20	; 0x24000
   11b18:	ldr	pc, [ip, #1364]!	; 0x554

00011b1c <strtold@plt>:
   11b1c:	add	ip, pc, #0, 12
   11b20:	add	ip, ip, #36, 20	; 0x24000
   11b24:	ldr	pc, [ip, #1356]!	; 0x54c

00011b28 <ftruncate64@plt>:
   11b28:	add	ip, pc, #0, 12
   11b2c:	add	ip, ip, #36, 20	; 0x24000
   11b30:	ldr	pc, [ip, #1348]!	; 0x544

00011b34 <fwrite_unlocked@plt>:
   11b34:	add	ip, pc, #0, 12
   11b38:	add	ip, ip, #36, 20	; 0x24000
   11b3c:	ldr	pc, [ip, #1340]!	; 0x53c

00011b40 <memcmp@plt>:
   11b40:	add	ip, pc, #0, 12
   11b44:	add	ip, ip, #36, 20	; 0x24000
   11b48:	ldr	pc, [ip, #1332]!	; 0x534

00011b4c <fputc_unlocked@plt>:
   11b4c:	add	ip, pc, #0, 12
   11b50:	add	ip, ip, #36, 20	; 0x24000
   11b54:	ldr	pc, [ip, #1324]!	; 0x52c

00011b58 <dcgettext@plt>:
   11b58:	add	ip, pc, #0, 12
   11b5c:	add	ip, ip, #36, 20	; 0x24000
   11b60:	ldr	pc, [ip, #1316]!	; 0x524

00011b64 <pthread_cond_init@plt>:
   11b64:	add	ip, pc, #0, 12
   11b68:	add	ip, ip, #36, 20	; 0x24000
   11b6c:	ldr	pc, [ip, #1308]!	; 0x51c

00011b70 <sysconf@plt>:
   11b70:	add	ip, pc, #0, 12
   11b74:	add	ip, ip, #36, 20	; 0x24000
   11b78:	ldr	pc, [ip, #1300]!	; 0x514

00011b7c <unlink@plt>:
   11b7c:	add	ip, pc, #0, 12
   11b80:	add	ip, ip, #36, 20	; 0x24000
   11b84:	ldr	pc, [ip, #1292]!	; 0x50c

00011b88 <dup2@plt>:
   11b88:	add	ip, pc, #0, 12
   11b8c:	add	ip, ip, #36, 20	; 0x24000
   11b90:	ldr	pc, [ip, #1284]!	; 0x504

00011b94 <getrlimit64@plt>:
   11b94:	add	ip, pc, #0, 12
   11b98:	add	ip, ip, #36, 20	; 0x24000
   11b9c:	ldr	pc, [ip, #1276]!	; 0x4fc

00011ba0 <realloc@plt>:
   11ba0:	add	ip, pc, #0, 12
   11ba4:	add	ip, ip, #36, 20	; 0x24000
   11ba8:	ldr	pc, [ip, #1268]!	; 0x4f4

00011bac <sigismember@plt>:
   11bac:	add	ip, pc, #0, 12
   11bb0:	add	ip, ip, #36, 20	; 0x24000
   11bb4:	ldr	pc, [ip, #1260]!	; 0x4ec

00011bb8 <textdomain@plt>:
   11bb8:	add	ip, pc, #0, 12
   11bbc:	add	ip, ip, #36, 20	; 0x24000
   11bc0:	ldr	pc, [ip, #1252]!	; 0x4e4

00011bc4 <iswcntrl@plt>:
   11bc4:	add	ip, pc, #0, 12
   11bc8:	add	ip, ip, #36, 20	; 0x24000
   11bcc:	ldr	pc, [ip, #1244]!	; 0x4dc

00011bd0 <pthread_cond_destroy@plt>:
   11bd0:	add	ip, pc, #0, 12
   11bd4:	add	ip, ip, #36, 20	; 0x24000
   11bd8:	ldr	pc, [ip, #1236]!	; 0x4d4

00011bdc <fflush_unlocked@plt>:
   11bdc:	add	ip, pc, #0, 12
   11be0:	add	ip, ip, #36, 20	; 0x24000
   11be4:	ldr	pc, [ip, #1228]!	; 0x4cc

00011be8 <iswprint@plt>:
   11be8:	add	ip, pc, #0, 12
   11bec:	add	ip, ip, #36, 20	; 0x24000
   11bf0:	ldr	pc, [ip, #1220]!	; 0x4c4

00011bf4 <__fxstat64@plt>:
   11bf4:	add	ip, pc, #0, 12
   11bf8:	add	ip, ip, #36, 20	; 0x24000
   11bfc:	ldr	pc, [ip, #1212]!	; 0x4bc

00011c00 <sigaction@plt>:
   11c00:	add	ip, pc, #0, 12
   11c04:	add	ip, ip, #36, 20	; 0x24000
   11c08:	ldr	pc, [ip, #1204]!	; 0x4b4

00011c0c <mkostemp64@plt>:
   11c0c:	add	ip, pc, #0, 12
   11c10:	add	ip, ip, #36, 20	; 0x24000
   11c14:	ldr	pc, [ip, #1196]!	; 0x4ac

00011c18 <fwrite@plt>:
   11c18:	add	ip, pc, #0, 12
   11c1c:	add	ip, ip, #36, 20	; 0x24000
   11c20:	ldr	pc, [ip, #1188]!	; 0x4a4

00011c24 <lseek64@plt>:
   11c24:	add	ip, pc, #0, 12
   11c28:	add	ip, ip, #36, 20	; 0x24000
   11c2c:	ldr	pc, [ip, #1180]!	; 0x49c

00011c30 <__stpcpy_chk@plt>:
   11c30:	add	ip, pc, #0, 12
   11c34:	add	ip, ip, #36, 20	; 0x24000
   11c38:	ldr	pc, [ip, #1172]!	; 0x494

00011c3c <waitpid@plt>:
   11c3c:	add	ip, pc, #0, 12
   11c40:	add	ip, ip, #36, 20	; 0x24000
   11c44:	ldr	pc, [ip, #1164]!	; 0x48c

00011c48 <__ctype_get_mb_cur_max@plt>:
   11c48:	add	ip, pc, #0, 12
   11c4c:	add	ip, ip, #36, 20	; 0x24000
   11c50:	ldr	pc, [ip, #1156]!	; 0x484

00011c54 <strcpy@plt>:
   11c54:	add	ip, pc, #0, 12
   11c58:	add	ip, ip, #36, 20	; 0x24000
   11c5c:	ldr	pc, [ip, #1148]!	; 0x47c

00011c60 <pthread_sigmask@plt>:
   11c60:	add	ip, pc, #0, 12
   11c64:	add	ip, ip, #36, 20	; 0x24000
   11c68:	ldr	pc, [ip, #1140]!	; 0x474

00011c6c <pthread_create@plt>:
   11c6c:	add	ip, pc, #0, 12
   11c70:	add	ip, ip, #36, 20	; 0x24000
   11c74:	ldr	pc, [ip, #1132]!	; 0x46c

00011c78 <__fpending@plt>:
   11c78:	add	ip, pc, #0, 12
   11c7c:	add	ip, ip, #36, 20	; 0x24000
   11c80:	ldr	pc, [ip, #1124]!	; 0x464

00011c84 <mbrtowc@plt>:
   11c84:	add	ip, pc, #0, 12
   11c88:	add	ip, ip, #36, 20	; 0x24000
   11c8c:	ldr	pc, [ip, #1116]!	; 0x45c

00011c90 <error@plt>:
   11c90:	add	ip, pc, #0, 12
   11c94:	add	ip, ip, #36, 20	; 0x24000
   11c98:	ldr	pc, [ip, #1108]!	; 0x454

00011c9c <open64@plt>:
   11c9c:	add	ip, pc, #0, 12
   11ca0:	add	ip, ip, #36, 20	; 0x24000
   11ca4:	ldr	pc, [ip, #1100]!	; 0x44c

00011ca8 <strcoll@plt>:
   11ca8:	add	ip, pc, #0, 12
   11cac:	add	ip, ip, #36, 20	; 0x24000
   11cb0:	ldr	pc, [ip, #1092]!	; 0x444

00011cb4 <getenv@plt>:
   11cb4:	add	ip, pc, #0, 12
   11cb8:	add	ip, ip, #36, 20	; 0x24000
   11cbc:	ldr	pc, [ip, #1084]!	; 0x43c

00011cc0 <mkstemp64@plt>:
   11cc0:	add	ip, pc, #0, 12
   11cc4:	add	ip, ip, #36, 20	; 0x24000
   11cc8:	ldr	pc, [ip, #1076]!	; 0x434

00011ccc <sysinfo@plt>:
   11ccc:	add	ip, pc, #0, 12
   11cd0:	add	ip, ip, #36, 20	; 0x24000
   11cd4:	ldr	pc, [ip, #1068]!	; 0x42c

00011cd8 <malloc@plt>:
   11cd8:	add	ip, pc, #0, 12
   11cdc:	add	ip, ip, #36, 20	; 0x24000
   11ce0:	ldr	pc, [ip, #1060]!	; 0x424

00011ce4 <sigaddset@plt>:
   11ce4:	add	ip, pc, #0, 12
   11ce8:	add	ip, ip, #36, 20	; 0x24000
   11cec:	ldr	pc, [ip, #1052]!	; 0x41c

00011cf0 <__libc_start_main@plt>:
   11cf0:	add	ip, pc, #0, 12
   11cf4:	add	ip, ip, #36, 20	; 0x24000
   11cf8:	ldr	pc, [ip, #1044]!	; 0x414

00011cfc <__freading@plt>:
   11cfc:	add	ip, pc, #0, 12
   11d00:	add	ip, ip, #36, 20	; 0x24000
   11d04:	ldr	pc, [ip, #1036]!	; 0x40c

00011d08 <__ctype_toupper_loc@plt>:
   11d08:	add	ip, pc, #0, 12
   11d0c:	add	ip, ip, #36, 20	; 0x24000
   11d10:	ldr	pc, [ip, #1028]!	; 0x404

00011d14 <__gmon_start__@plt>:
   11d14:	add	ip, pc, #0, 12
   11d18:	add	ip, ip, #36, 20	; 0x24000
   11d1c:	ldr	pc, [ip, #1020]!	; 0x3fc

00011d20 <getopt_long@plt>:
   11d20:	add	ip, pc, #0, 12
   11d24:	add	ip, ip, #36, 20	; 0x24000
   11d28:	ldr	pc, [ip, #1012]!	; 0x3f4

00011d2c <__ctype_b_loc@plt>:
   11d2c:	add	ip, pc, #0, 12
   11d30:	add	ip, ip, #36, 20	; 0x24000
   11d34:	ldr	pc, [ip, #1004]!	; 0x3ec

00011d38 <exit@plt>:
   11d38:	add	ip, pc, #0, 12
   11d3c:	add	ip, ip, #36, 20	; 0x24000
   11d40:	ldr	pc, [ip, #996]!	; 0x3e4

00011d44 <strtoul@plt>:
   11d44:	add	ip, pc, #0, 12
   11d48:	add	ip, ip, #36, 20	; 0x24000
   11d4c:	ldr	pc, [ip, #988]!	; 0x3dc

00011d50 <strlen@plt>:
   11d50:	add	ip, pc, #0, 12
   11d54:	add	ip, ip, #36, 20	; 0x24000
   11d58:	ldr	pc, [ip, #980]!	; 0x3d4

00011d5c <strchr@plt>:
   11d5c:	add	ip, pc, #0, 12
   11d60:	add	ip, ip, #36, 20	; 0x24000
   11d64:	ldr	pc, [ip, #972]!	; 0x3cc

00011d68 <strxfrm@plt>:
   11d68:	add	ip, pc, #0, 12
   11d6c:	add	ip, ip, #36, 20	; 0x24000
   11d70:	ldr	pc, [ip, #964]!	; 0x3c4

00011d74 <__errno_location@plt>:
   11d74:	add	ip, pc, #0, 12
   11d78:	add	ip, ip, #36, 20	; 0x24000
   11d7c:	ldr	pc, [ip, #956]!	; 0x3bc

00011d80 <__cxa_atexit@plt>:
   11d80:	add	ip, pc, #0, 12
   11d84:	add	ip, ip, #36, 20	; 0x24000
   11d88:	ldr	pc, [ip, #948]!	; 0x3b4

00011d8c <setvbuf@plt>:
   11d8c:	add	ip, pc, #0, 12
   11d90:	add	ip, ip, #36, 20	; 0x24000
   11d94:	ldr	pc, [ip, #940]!	; 0x3ac

00011d98 <memset@plt>:
   11d98:	add	ip, pc, #0, 12
   11d9c:	add	ip, ip, #36, 20	; 0x24000
   11da0:	ldr	pc, [ip, #932]!	; 0x3a4

00011da4 <fgetc@plt>:
   11da4:	add	ip, pc, #0, 12
   11da8:	add	ip, ip, #36, 20	; 0x24000
   11dac:	ldr	pc, [ip, #924]!	; 0x39c

00011db0 <__printf_chk@plt>:
   11db0:	add	ip, pc, #0, 12
   11db4:	add	ip, ip, #36, 20	; 0x24000
   11db8:	ldr	pc, [ip, #916]!	; 0x394

00011dbc <write@plt>:
   11dbc:	add	ip, pc, #0, 12
   11dc0:	add	ip, ip, #36, 20	; 0x24000
   11dc4:	ldr	pc, [ip, #908]!	; 0x38c

00011dc8 <fileno@plt>:
   11dc8:	add	ip, pc, #0, 12
   11dcc:	add	ip, ip, #36, 20	; 0x24000
   11dd0:	ldr	pc, [ip, #900]!	; 0x384

00011dd4 <__fprintf_chk@plt>:
   11dd4:	add	ip, pc, #0, 12
   11dd8:	add	ip, ip, #36, 20	; 0x24000
   11ddc:	ldr	pc, [ip, #892]!	; 0x37c

00011de0 <memchr@plt>:
   11de0:	add	ip, pc, #0, 12
   11de4:	add	ip, ip, #36, 20	; 0x24000
   11de8:	ldr	pc, [ip, #884]!	; 0x374

00011dec <fclose@plt>:
   11dec:	add	ip, pc, #0, 12
   11df0:	add	ip, ip, #36, 20	; 0x24000
   11df4:	ldr	pc, [ip, #876]!	; 0x36c

00011df8 <pipe@plt>:
   11df8:	add	ip, pc, #0, 12
   11dfc:	add	ip, ip, #36, 20	; 0x24000
   11e00:	ldr	pc, [ip, #868]!	; 0x364

00011e04 <fseeko64@plt>:
   11e04:	add	ip, pc, #0, 12
   11e08:	add	ip, ip, #36, 20	; 0x24000
   11e0c:	ldr	pc, [ip, #860]!	; 0x35c

00011e10 <fcntl64@plt>:
   11e10:	add	ip, pc, #0, 12
   11e14:	add	ip, ip, #36, 20	; 0x24000
   11e18:	ldr	pc, [ip, #852]!	; 0x354

00011e1c <__overflow@plt>:
   11e1c:	add	ip, pc, #0, 12
   11e20:	add	ip, ip, #36, 20	; 0x24000
   11e24:	ldr	pc, [ip, #844]!	; 0x34c

00011e28 <setlocale@plt>:
   11e28:	add	ip, pc, #0, 12
   11e2c:	add	ip, ip, #36, 20	; 0x24000
   11e30:	ldr	pc, [ip, #836]!	; 0x344

00011e34 <sigemptyset@plt>:
   11e34:	add	ip, pc, #0, 12
   11e38:	add	ip, ip, #36, 20	; 0x24000
   11e3c:	ldr	pc, [ip, #828]!	; 0x33c

00011e40 <fork@plt>:
   11e40:	add	ip, pc, #0, 12
   11e44:	add	ip, ip, #36, 20	; 0x24000
   11e48:	ldr	pc, [ip, #820]!	; 0x334

00011e4c <__explicit_bzero_chk@plt>:
   11e4c:	add	ip, pc, #0, 12
   11e50:	add	ip, ip, #36, 20	; 0x24000
   11e54:	ldr	pc, [ip, #812]!	; 0x32c

00011e58 <strrchr@plt>:
   11e58:	add	ip, pc, #0, 12
   11e5c:	add	ip, ip, #36, 20	; 0x24000
   11e60:	ldr	pc, [ip, #804]!	; 0x324

00011e64 <pthread_join@plt>:
   11e64:	add	ip, pc, #0, 12
   11e68:	add	ip, ip, #36, 20	; 0x24000
   11e6c:	ldr	pc, [ip, #796]!	; 0x31c

00011e70 <nl_langinfo@plt>:
   11e70:	add	ip, pc, #0, 12
   11e74:	add	ip, ip, #36, 20	; 0x24000
   11e78:	ldr	pc, [ip, #788]!	; 0x314

00011e7c <localeconv@plt>:
   11e7c:	add	ip, pc, #0, 12
   11e80:	add	ip, ip, #36, 20	; 0x24000
   11e84:	ldr	pc, [ip, #780]!	; 0x30c

00011e88 <clearerr_unlocked@plt>:
   11e88:	add	ip, pc, #0, 12
   11e8c:	add	ip, ip, #36, 20	; 0x24000
   11e90:	ldr	pc, [ip, #772]!	; 0x304

00011e94 <fopen64@plt>:
   11e94:	add	ip, pc, #0, 12
   11e98:	add	ip, ip, #36, 20	; 0x24000
   11e9c:	ldr	pc, [ip, #764]!	; 0x2fc

00011ea0 <qsort@plt>:
   11ea0:	add	ip, pc, #0, 12
   11ea4:	add	ip, ip, #36, 20	; 0x24000
   11ea8:	ldr	pc, [ip, #756]!	; 0x2f4

00011eac <pipe2@plt>:
   11eac:	add	ip, pc, #0, 12
   11eb0:	add	ip, ip, #36, 20	; 0x24000
   11eb4:	ldr	pc, [ip, #748]!	; 0x2ec

00011eb8 <pthread_cond_wait@plt>:
   11eb8:	add	ip, pc, #0, 12
   11ebc:	add	ip, ip, #36, 20	; 0x24000
   11ec0:	ldr	pc, [ip, #740]!	; 0x2e4

00011ec4 <euidaccess@plt>:
   11ec4:	add	ip, pc, #0, 12
   11ec8:	add	ip, ip, #36, 20	; 0x24000
   11ecc:	ldr	pc, [ip, #732]!	; 0x2dc

00011ed0 <sched_getaffinity@plt>:
   11ed0:	add	ip, pc, #0, 12
   11ed4:	add	ip, ip, #36, 20	; 0x24000
   11ed8:	ldr	pc, [ip, #724]!	; 0x2d4

00011edc <bindtextdomain@plt>:
   11edc:	add	ip, pc, #0, 12
   11ee0:	add	ip, ip, #36, 20	; 0x24000
   11ee4:	ldr	pc, [ip, #716]!	; 0x2cc

00011ee8 <fread_unlocked@plt>:
   11ee8:	add	ip, pc, #0, 12
   11eec:	add	ip, ip, #36, 20	; 0x24000
   11ef0:	ldr	pc, [ip, #708]!	; 0x2c4

00011ef4 <getrandom@plt>:
   11ef4:	add	ip, pc, #0, 12
   11ef8:	add	ip, ip, #36, 20	; 0x24000
   11efc:	ldr	pc, [ip, #700]!	; 0x2bc

00011f00 <__xstat64@plt>:
   11f00:	add	ip, pc, #0, 12
   11f04:	add	ip, ip, #36, 20	; 0x24000
   11f08:	ldr	pc, [ip, #692]!	; 0x2b4

00011f0c <strncmp@plt>:
   11f0c:	add	ip, pc, #0, 12
   11f10:	add	ip, ip, #36, 20	; 0x24000
   11f14:	ldr	pc, [ip, #684]!	; 0x2ac

00011f18 <pthread_cond_signal@plt>:
   11f18:	add	ip, pc, #0, 12
   11f1c:	add	ip, ip, #36, 20	; 0x24000
   11f20:	ldr	pc, [ip, #676]!	; 0x2a4

00011f24 <abort@plt>:
   11f24:	add	ip, pc, #0, 12
   11f28:	add	ip, ip, #36, 20	; 0x24000
   11f2c:	ldr	pc, [ip, #668]!	; 0x29c

00011f30 <close@plt>:
   11f30:	add	ip, pc, #0, 12
   11f34:	add	ip, ip, #36, 20	; 0x24000
   11f38:	ldr	pc, [ip, #660]!	; 0x294

00011f3c <dcngettext@plt>:
   11f3c:	add	ip, pc, #0, 12
   11f40:	add	ip, ip, #36, 20	; 0x24000
   11f44:	ldr	pc, [ip, #652]!	; 0x28c

00011f48 <__assert_fail@plt>:
   11f48:	add	ip, pc, #0, 12
   11f4c:	add	ip, ip, #36, 20	; 0x24000
   11f50:	ldr	pc, [ip, #644]!	; 0x284

Disassembly of section .text:

00011f58 <_obstack_begin@@Base-0x10998>:
   11f58:	mov	fp, #0
   11f5c:	mov	lr, #0
   11f60:	pop	{r1}		; (ldr r1, [sp], #4)
   11f64:	mov	r2, sp
   11f68:	push	{r2}		; (str r2, [sp, #-4]!)
   11f6c:	push	{r0}		; (str r0, [sp, #-4]!)
   11f70:	ldr	ip, [pc, #16]	; 11f88 <__assert_fail@plt+0x40>
   11f74:	push	{ip}		; (str ip, [sp, #-4]!)
   11f78:	ldr	r0, [pc, #12]	; 11f8c <__assert_fail@plt+0x44>
   11f7c:	ldr	r3, [pc, #12]	; 11f90 <__assert_fail@plt+0x48>
   11f80:	bl	11cf0 <__libc_start_main@plt>
   11f84:	bl	11f24 <abort@plt>
   11f88:	muleq	r2, r8, r1
   11f8c:	strdeq	r6, [r1], -r0
   11f90:	andeq	r3, r2, r8, lsr r1
   11f94:	ldr	r3, [pc, #20]	; 11fb0 <__assert_fail@plt+0x68>
   11f98:	ldr	r2, [pc, #20]	; 11fb4 <__assert_fail@plt+0x6c>
   11f9c:	add	r3, pc, r3
   11fa0:	ldr	r2, [r3, r2]
   11fa4:	cmp	r2, #0
   11fa8:	bxeq	lr
   11fac:	b	11d14 <__gmon_start__@plt>
   11fb0:	andeq	r4, r2, ip, asr r0
   11fb4:	ldrdeq	r0, [r0], -r8
   11fb8:	ldr	r0, [pc, #24]	; 11fd8 <__assert_fail@plt+0x90>
   11fbc:	ldr	r3, [pc, #24]	; 11fdc <__assert_fail@plt+0x94>
   11fc0:	cmp	r3, r0
   11fc4:	bxeq	lr
   11fc8:	ldr	r3, [pc, #16]	; 11fe0 <__assert_fail@plt+0x98>
   11fcc:	cmp	r3, #0
   11fd0:	bxeq	lr
   11fd4:	bx	r3
   11fd8:			; <UNDEFINED> instruction: 0x000362b8
   11fdc:			; <UNDEFINED> instruction: 0x000362b8
   11fe0:	andeq	r0, r0, r0
   11fe4:	ldr	r0, [pc, #36]	; 12010 <__assert_fail@plt+0xc8>
   11fe8:	ldr	r1, [pc, #36]	; 12014 <__assert_fail@plt+0xcc>
   11fec:	sub	r1, r1, r0
   11ff0:	asr	r1, r1, #2
   11ff4:	add	r1, r1, r1, lsr #31
   11ff8:	asrs	r1, r1, #1
   11ffc:	bxeq	lr
   12000:	ldr	r3, [pc, #16]	; 12018 <__assert_fail@plt+0xd0>
   12004:	cmp	r3, #0
   12008:	bxeq	lr
   1200c:	bx	r3
   12010:			; <UNDEFINED> instruction: 0x000362b8
   12014:			; <UNDEFINED> instruction: 0x000362b8
   12018:	andeq	r0, r0, r0
   1201c:	push	{r4, lr}
   12020:	ldr	r4, [pc, #24]	; 12040 <__assert_fail@plt+0xf8>
   12024:	ldrb	r3, [r4]
   12028:	cmp	r3, #0
   1202c:	popne	{r4, pc}
   12030:	bl	11fb8 <__assert_fail@plt+0x70>
   12034:	mov	r3, #1
   12038:	strb	r3, [r4]
   1203c:	pop	{r4, pc}
   12040:	ldrdeq	r6, [r3], -ip
   12044:	b	11fe4 <__assert_fail@plt+0x9c>
   12048:	ldr	r3, [r0, #4]
   1204c:	udiv	r0, r3, r1
   12050:	mls	r0, r0, r1, r3
   12054:	bx	lr
   12058:	ldr	r0, [r0, #4]
   1205c:	ldr	r3, [r1, #4]
   12060:	cmp	r0, r3
   12064:	movne	r0, #0
   12068:	moveq	r0, #1
   1206c:	bx	lr
   12070:	strd	r4, [sp, #-16]!
   12074:	str	r6, [sp, #8]
   12078:	str	lr, [sp, #12]
   1207c:	ldr	r3, [r0]
   12080:	ldr	r0, [r0, #4]
   12084:	sub	r0, r0, #1
   12088:	add	r0, r3, r0
   1208c:	ldr	ip, [r1]
   12090:	ldr	r5, [r1, #4]
   12094:	movw	r2, #25060	; 0x61e4
   12098:	movt	r2, #3
   1209c:	ldr	lr, [r2]
   120a0:	cmp	lr, #256	; 0x100
   120a4:	beq	120c4 <__assert_fail@plt+0x17c>
   120a8:	cmp	r3, r0
   120ac:	bcs	1220c <__assert_fail@plt+0x2c4>
   120b0:	sub	r6, ip, #1
   120b4:	cmp	ip, #0
   120b8:	beq	121bc <__assert_fail@plt+0x274>
   120bc:	mov	r4, r0
   120c0:	b	120fc <__assert_fail@plt+0x1b4>
   120c4:	cmp	r3, r0
   120c8:	bcs	1220c <__assert_fail@plt+0x2c4>
   120cc:	sub	r4, ip, #1
   120d0:	cmp	ip, #0
   120d4:	beq	121bc <__assert_fail@plt+0x274>
   120d8:	movw	ip, #25312	; 0x62e0
   120dc:	movt	ip, #3
   120e0:	b	12148 <__assert_fail@plt+0x200>
   120e4:	add	r3, r3, #1
   120e8:	cmp	r3, r0
   120ec:	bcs	1220c <__assert_fail@plt+0x2c4>
   120f0:	sub	r6, r6, #1
   120f4:	cmn	r6, #1
   120f8:	beq	121bc <__assert_fail@plt+0x274>
   120fc:	cmp	r0, r3
   12100:	bls	120e8 <__assert_fail@plt+0x1a0>
   12104:	ldrb	r2, [r3]
   12108:	cmp	lr, r2
   1210c:	addne	r2, r3, #1
   12110:	beq	120e4 <__assert_fail@plt+0x19c>
   12114:	mov	r3, r2
   12118:	cmp	r4, r2
   1211c:	beq	120e8 <__assert_fail@plt+0x1a0>
   12120:	add	r2, r2, #1
   12124:	ldrb	ip, [r3]
   12128:	cmp	lr, ip
   1212c:	bne	12114 <__assert_fail@plt+0x1cc>
   12130:	b	120e4 <__assert_fail@plt+0x19c>
   12134:	sub	r4, r4, #1
   12138:	cmn	r4, #1
   1213c:	beq	121bc <__assert_fail@plt+0x274>
   12140:	cmp	r0, r3
   12144:	bls	12228 <__assert_fail@plt+0x2e0>
   12148:	ldrb	r2, [r3]
   1214c:	ldrb	r2, [ip, r2]
   12150:	cmp	r2, #0
   12154:	addne	r2, r3, #1
   12158:	beq	1218c <__assert_fail@plt+0x244>
   1215c:	mov	r3, r2
   12160:	cmp	r0, r2
   12164:	bls	12228 <__assert_fail@plt+0x2e0>
   12168:	add	r2, r2, #1
   1216c:	ldrb	lr, [r3]
   12170:	ldrb	lr, [ip, lr]
   12174:	cmp	lr, #0
   12178:	bne	1215c <__assert_fail@plt+0x214>
   1217c:	ldrb	r2, [r3]
   12180:	ldrb	r2, [ip, r2]
   12184:	cmp	r2, #0
   12188:	bne	12134 <__assert_fail@plt+0x1ec>
   1218c:	add	r2, r3, #1
   12190:	mov	r3, r2
   12194:	cmp	r0, r2
   12198:	bls	12228 <__assert_fail@plt+0x2e0>
   1219c:	add	r2, r2, #1
   121a0:	ldrb	lr, [r3]
   121a4:	ldrb	lr, [ip, lr]
   121a8:	cmp	lr, #0
   121ac:	beq	12190 <__assert_fail@plt+0x248>
   121b0:	sub	r4, r4, #1
   121b4:	cmn	r4, #1
   121b8:	bne	12148 <__assert_fail@plt+0x200>
   121bc:	ldrb	r2, [r1, #24]
   121c0:	cmp	r2, #0
   121c4:	beq	1220c <__assert_fail@plt+0x2c4>
   121c8:	movw	r2, #25312	; 0x62e0
   121cc:	movt	r2, #3
   121d0:	ldrb	r1, [r3]
   121d4:	ldrb	r2, [r2, r1]
   121d8:	cmp	r2, #0
   121dc:	beq	1220c <__assert_fail@plt+0x2c4>
   121e0:	add	r2, r3, #1
   121e4:	movw	ip, #25312	; 0x62e0
   121e8:	movt	ip, #3
   121ec:	mov	r3, r2
   121f0:	cmp	r0, r2
   121f4:	bls	1220c <__assert_fail@plt+0x2c4>
   121f8:	add	r2, r2, #1
   121fc:	ldrb	r1, [r3]
   12200:	ldrb	r1, [ip, r1]
   12204:	cmp	r1, #0
   12208:	bne	121ec <__assert_fail@plt+0x2a4>
   1220c:	add	r3, r3, r5
   12210:	cmp	r3, r0
   12214:	movcc	r0, r3
   12218:	ldrd	r4, [sp]
   1221c:	ldr	r6, [sp, #8]
   12220:	add	sp, sp, #12
   12224:	pop	{pc}		; (ldr pc, [sp], #4)
   12228:	ldrb	r2, [r1, #24]
   1222c:	cmp	r2, #0
   12230:	beq	1220c <__assert_fail@plt+0x2c4>
   12234:	cmp	r3, r0
   12238:	bcc	121c8 <__assert_fail@plt+0x280>
   1223c:	b	1220c <__assert_fail@plt+0x2c4>
   12240:	strd	r4, [sp, #-16]!
   12244:	str	r6, [sp, #8]
   12248:	str	lr, [sp, #12]
   1224c:	ldr	r3, [r0]
   12250:	ldr	ip, [r0, #4]
   12254:	sub	ip, ip, #1
   12258:	add	ip, r3, ip
   1225c:	ldr	r0, [r1, #8]
   12260:	ldr	r5, [r1, #12]
   12264:	cmp	r5, #0
   12268:	addeq	r0, r0, #1
   1226c:	movw	r2, #25060	; 0x61e4
   12270:	movt	r2, #3
   12274:	ldr	lr, [r2]
   12278:	cmp	lr, #256	; 0x100
   1227c:	beq	1229c <__assert_fail@plt+0x354>
   12280:	cmp	r3, ip
   12284:	bcs	123ac <__assert_fail@plt+0x464>
   12288:	sub	r6, r0, #1
   1228c:	cmp	r0, #0
   12290:	beq	123ac <__assert_fail@plt+0x464>
   12294:	mov	r4, ip
   12298:	b	122dc <__assert_fail@plt+0x394>
   1229c:	cmp	r3, ip
   122a0:	bcs	123ac <__assert_fail@plt+0x464>
   122a4:	sub	r4, r0, #1
   122a8:	cmp	r0, #0
   122ac:	beq	123ac <__assert_fail@plt+0x464>
   122b0:	movw	r0, #25312	; 0x62e0
   122b4:	movt	r0, #3
   122b8:	b	12338 <__assert_fail@plt+0x3f0>
   122bc:	add	r3, r3, #1
   122c0:	cmp	r3, ip
   122c4:	bcs	123ac <__assert_fail@plt+0x464>
   122c8:	sub	r6, r6, #1
   122cc:	cmn	r6, #1
   122d0:	beq	123ac <__assert_fail@plt+0x464>
   122d4:	cmp	r3, ip
   122d8:	bcs	123ac <__assert_fail@plt+0x464>
   122dc:	ldrb	r2, [r3]
   122e0:	cmp	lr, r2
   122e4:	addne	r2, r3, #1
   122e8:	beq	12308 <__assert_fail@plt+0x3c0>
   122ec:	mov	r3, r2
   122f0:	cmp	r2, r4
   122f4:	beq	122c0 <__assert_fail@plt+0x378>
   122f8:	add	r2, r2, #1
   122fc:	ldrb	r0, [r3]
   12300:	cmp	lr, r0
   12304:	bne	122ec <__assert_fail@plt+0x3a4>
   12308:	orrs	r2, r5, r6
   1230c:	bne	122bc <__assert_fail@plt+0x374>
   12310:	mov	r0, r3
   12314:	ldrd	r4, [sp]
   12318:	ldr	r6, [sp, #8]
   1231c:	add	sp, sp, #12
   12320:	pop	{pc}		; (ldr pc, [sp], #4)
   12324:	sub	r4, r4, #1
   12328:	cmn	r4, #1
   1232c:	beq	123ac <__assert_fail@plt+0x464>
   12330:	cmp	ip, r3
   12334:	bls	123ac <__assert_fail@plt+0x464>
   12338:	ldrb	r2, [r3]
   1233c:	ldrb	r2, [r0, r2]
   12340:	cmp	r2, #0
   12344:	addne	r2, r3, #1
   12348:	beq	1237c <__assert_fail@plt+0x434>
   1234c:	mov	r3, r2
   12350:	cmp	ip, r2
   12354:	bls	123ac <__assert_fail@plt+0x464>
   12358:	add	r2, r2, #1
   1235c:	ldrb	lr, [r3]
   12360:	ldrb	lr, [r0, lr]
   12364:	cmp	lr, #0
   12368:	bne	1234c <__assert_fail@plt+0x404>
   1236c:	ldrb	r2, [r3]
   12370:	ldrb	r2, [r0, r2]
   12374:	cmp	r2, #0
   12378:	bne	12324 <__assert_fail@plt+0x3dc>
   1237c:	add	r2, r3, #1
   12380:	mov	r3, r2
   12384:	cmp	ip, r2
   12388:	bls	123ac <__assert_fail@plt+0x464>
   1238c:	add	r2, r2, #1
   12390:	ldrb	lr, [r3]
   12394:	ldrb	lr, [r0, lr]
   12398:	cmp	lr, #0
   1239c:	beq	12380 <__assert_fail@plt+0x438>
   123a0:	sub	r4, r4, #1
   123a4:	cmn	r4, #1
   123a8:	bne	12338 <__assert_fail@plt+0x3f0>
   123ac:	cmp	r5, #0
   123b0:	beq	12310 <__assert_fail@plt+0x3c8>
   123b4:	ldrb	r2, [r1, #25]
   123b8:	cmp	r2, #0
   123bc:	beq	12410 <__assert_fail@plt+0x4c8>
   123c0:	cmp	r3, ip
   123c4:	bcs	12410 <__assert_fail@plt+0x4c8>
   123c8:	movw	r2, #25312	; 0x62e0
   123cc:	movt	r2, #3
   123d0:	ldrb	r1, [r3]
   123d4:	ldrb	r2, [r2, r1]
   123d8:	cmp	r2, #0
   123dc:	beq	12410 <__assert_fail@plt+0x4c8>
   123e0:	add	r2, r3, #1
   123e4:	mov	lr, ip
   123e8:	movw	r0, #25312	; 0x62e0
   123ec:	movt	r0, #3
   123f0:	mov	r3, r2
   123f4:	cmp	r2, lr
   123f8:	beq	12410 <__assert_fail@plt+0x4c8>
   123fc:	add	r2, r2, #1
   12400:	ldrb	r1, [r3]
   12404:	ldrb	r1, [r0, r1]
   12408:	cmp	r1, #0
   1240c:	bne	123f0 <__assert_fail@plt+0x4a8>
   12410:	add	r3, r3, r5
   12414:	cmp	r3, ip
   12418:	movcs	r3, ip
   1241c:	b	12310 <__assert_fail@plt+0x3c8>
   12420:	strd	r4, [sp, #-20]!	; 0xffffffec
   12424:	strd	r6, [sp, #8]
   12428:	str	lr, [sp, #16]
   1242c:	ldr	ip, [r0]
   12430:	movw	r3, #25312	; 0x62e0
   12434:	movt	r3, #3
   12438:	ldr	r5, [r3, #256]	; 0x100
   1243c:	mov	r4, #0
   12440:	mov	r1, r4
   12444:	mov	r6, r4
   12448:	mov	r7, #1
   1244c:	mov	r3, ip
   12450:	ldrb	r2, [r3], #1
   12454:	sub	lr, r2, #48	; 0x30
   12458:	cmp	lr, #9
   1245c:	bhi	12484 <__assert_fail@plt+0x53c>
   12460:	cmp	r1, r2
   12464:	movcc	r1, r2
   12468:	ldrb	r2, [ip, #1]
   1246c:	cmp	r2, r5
   12470:	addeq	r3, ip, #2
   12474:	moveq	r4, r7
   12478:	movne	r4, r6
   1247c:	mov	ip, r3
   12480:	b	1244c <__assert_fail@plt+0x504>
   12484:	cmp	r4, #0
   12488:	subne	ip, ip, #1
   1248c:	strne	ip, [r0]
   12490:	bne	124b0 <__assert_fail@plt+0x568>
   12494:	movw	lr, #25312	; 0x62e0
   12498:	movt	lr, #3
   1249c:	ldrb	lr, [lr, #260]	; 0x104
   124a0:	cmp	lr, r2
   124a4:	beq	124c4 <__assert_fail@plt+0x57c>
   124a8:	sub	r3, r3, #1
   124ac:	str	r3, [r0]
   124b0:	mov	r0, r1
   124b4:	ldrd	r4, [sp]
   124b8:	ldrd	r6, [sp, #8]
   124bc:	add	sp, sp, #16
   124c0:	pop	{pc}		; (ldr pc, [sp], #4)
   124c4:	add	r3, ip, #2
   124c8:	ldrb	r2, [ip, #1]
   124cc:	sub	ip, r2, #48	; 0x30
   124d0:	cmp	ip, #9
   124d4:	bhi	124a8 <__assert_fail@plt+0x560>
   124d8:	cmp	r1, r2
   124dc:	movcc	r1, r2
   124e0:	ldrb	r2, [r3], #1
   124e4:	sub	ip, r2, #48	; 0x30
   124e8:	cmp	ip, #9
   124ec:	bls	124d8 <__assert_fail@plt+0x590>
   124f0:	b	124a8 <__assert_fail@plt+0x560>
   124f4:	str	r4, [sp, #-8]!
   124f8:	str	lr, [sp, #4]
   124fc:	sub	sp, sp, #8
   12500:	ldrb	r4, [r0]
   12504:	cmp	r4, #45	; 0x2d
   12508:	addeq	r0, r0, #1
   1250c:	str	r0, [sp, #4]
   12510:	add	r0, sp, #4
   12514:	bl	12420 <__assert_fail@plt+0x4d8>
   12518:	cmp	r0, #48	; 0x30
   1251c:	movls	r0, #0
   12520:	bls	12540 <__assert_fail@plt+0x5f8>
   12524:	movw	r3, #12736	; 0x31c0
   12528:	movt	r3, #2
   1252c:	ldr	r2, [sp, #4]
   12530:	ldrb	r2, [r2]
   12534:	ldrb	r0, [r3, r2]
   12538:	cmp	r4, #45	; 0x2d
   1253c:	rsbeq	r0, r0, #0
   12540:	add	sp, sp, #8
   12544:	ldr	r4, [sp]
   12548:	add	sp, sp, #4
   1254c:	pop	{pc}		; (ldr pc, [sp], #4)
   12550:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12554:	strd	r6, [sp, #8]
   12558:	str	r8, [sp, #16]
   1255c:	str	lr, [sp, #20]
   12560:	movw	r3, #25312	; 0x62e0
   12564:	movt	r3, #3
   12568:	ldrb	r2, [r0]
   1256c:	ldrb	r3, [r3, r2]
   12570:	cmp	r3, #0
   12574:	beq	12590 <__assert_fail@plt+0x648>
   12578:	movw	r2, #25312	; 0x62e0
   1257c:	movt	r2, #3
   12580:	ldrb	r3, [r0, #1]!
   12584:	ldrb	r3, [r2, r3]
   12588:	cmp	r3, #0
   1258c:	bne	12580 <__assert_fail@plt+0x638>
   12590:	mov	r7, #12
   12594:	mov	r6, #0
   12598:	movw	r8, #25060	; 0x61e4
   1259c:	movt	r8, #3
   125a0:	movw	r4, #25312	; 0x62e0
   125a4:	movt	r4, #3
   125a8:	b	125e8 <__assert_fail@plt+0x6a0>
   125ac:	mov	r2, r0
   125b0:	cmp	r1, #0
   125b4:	strne	r2, [r1]
   125b8:	movw	r3, #25060	; 0x61e4
   125bc:	movt	r3, #3
   125c0:	add	r5, r3, r5, lsl #3
   125c4:	ldr	r0, [r5, #8]
   125c8:	ldrd	r4, [sp]
   125cc:	ldrd	r6, [sp, #8]
   125d0:	ldr	r8, [sp, #16]
   125d4:	add	sp, sp, #20
   125d8:	pop	{pc}		; (ldr pc, [sp], #4)
   125dc:	add	r6, r5, #1
   125e0:	cmp	r6, r7
   125e4:	bcs	12660 <__assert_fail@plt+0x718>
   125e8:	add	r5, r6, r7
   125ec:	lsr	r5, r5, #1
   125f0:	add	r3, r8, r5, lsl #3
   125f4:	ldr	lr, [r3, #4]
   125f8:	ldrb	r3, [lr]
   125fc:	cmp	r3, #0
   12600:	beq	125ac <__assert_fail@plt+0x664>
   12604:	ldrb	r2, [r0]
   12608:	add	r2, r4, r2
   1260c:	ldrb	r2, [r2, #264]	; 0x108
   12610:	cmp	r3, r2
   12614:	bhi	12650 <__assert_fail@plt+0x708>
   12618:	addcs	ip, r0, #1
   1261c:	bcc	125dc <__assert_fail@plt+0x694>
   12620:	mov	r2, ip
   12624:	ldrb	r3, [lr, #1]!
   12628:	cmp	r3, #0
   1262c:	beq	125b0 <__assert_fail@plt+0x668>
   12630:	add	ip, ip, #1
   12634:	ldrb	r2, [r2]
   12638:	add	r2, r4, r2
   1263c:	ldrb	r2, [r2, #264]	; 0x108
   12640:	cmp	r3, r2
   12644:	bhi	12658 <__assert_fail@plt+0x710>
   12648:	bcs	12620 <__assert_fail@plt+0x6d8>
   1264c:	b	125dc <__assert_fail@plt+0x694>
   12650:	mov	r7, r5
   12654:	b	125e0 <__assert_fail@plt+0x698>
   12658:	mov	r7, r5
   1265c:	b	125e0 <__assert_fail@plt+0x698>
   12660:	mov	r0, #0
   12664:	b	125c8 <__assert_fail@plt+0x680>
   12668:	ldr	r3, [r0, #16]
   1266c:	cmp	r3, #0
   12670:	movne	r0, #0
   12674:	beq	12680 <__assert_fail@plt+0x738>
   12678:	and	r0, r0, #1
   1267c:	bx	lr
   12680:	ldr	r3, [r0, #20]
   12684:	cmp	r3, #0
   12688:	movne	r0, #0
   1268c:	bne	12678 <__assert_fail@plt+0x730>
   12690:	ldrb	r3, [r0, #24]
   12694:	cmp	r3, #0
   12698:	movne	r0, #0
   1269c:	bne	12678 <__assert_fail@plt+0x730>
   126a0:	ldrb	r3, [r0, #25]
   126a4:	cmp	r3, #0
   126a8:	movne	r0, #0
   126ac:	bne	12678 <__assert_fail@plt+0x730>
   126b0:	ldrb	r3, [r0, #26]
   126b4:	cmp	r3, #0
   126b8:	movne	r0, #0
   126bc:	bne	12678 <__assert_fail@plt+0x730>
   126c0:	ldrh	r3, [r0, #28]
   126c4:	cmp	r3, #0
   126c8:	bne	126f8 <__assert_fail@plt+0x7b0>
   126cc:	ldrb	r3, [r0, #30]
   126d0:	cmp	r3, #0
   126d4:	movne	r0, #0
   126d8:	bne	12678 <__assert_fail@plt+0x730>
   126dc:	ldrb	r3, [r0, #32]
   126e0:	cmp	r3, #0
   126e4:	movne	r0, #0
   126e8:	bne	12678 <__assert_fail@plt+0x730>
   126ec:	ldrb	r0, [r0, #27]
   126f0:	eor	r0, r0, #1
   126f4:	b	12678 <__assert_fail@plt+0x730>
   126f8:	mov	r0, #0
   126fc:	b	12678 <__assert_fail@plt+0x730>
   12700:	ldrh	r3, [r0, #24]
   12704:	cmp	r3, #0
   12708:	movne	r3, #98	; 0x62
   1270c:	strbne	r3, [r1], #1
   12710:	ldr	r2, [r0, #16]
   12714:	ldr	r3, [pc, #168]	; 127c4 <__assert_fail@plt+0x87c>
   12718:	cmp	r2, r3
   1271c:	moveq	r3, #100	; 0x64
   12720:	strbeq	r3, [r1], #1
   12724:	ldr	r3, [r0, #20]
   12728:	cmp	r3, #0
   1272c:	movne	r3, #102	; 0x66
   12730:	strbne	r3, [r1], #1
   12734:	ldrb	r3, [r0, #28]
   12738:	cmp	r3, #0
   1273c:	movne	r3, #103	; 0x67
   12740:	strbne	r3, [r1], #1
   12744:	ldrb	r3, [r0, #29]
   12748:	cmp	r3, #0
   1274c:	movne	r3, #104	; 0x68
   12750:	strbne	r3, [r1], #1
   12754:	ldr	r2, [r0, #16]
   12758:	ldr	r3, [pc, #104]	; 127c8 <__assert_fail@plt+0x880>
   1275c:	cmp	r2, r3
   12760:	moveq	r3, #105	; 0x69
   12764:	strbeq	r3, [r1], #1
   12768:	ldrb	r3, [r0, #30]
   1276c:	cmp	r3, #0
   12770:	movne	r3, #77	; 0x4d
   12774:	strbne	r3, [r1], #1
   12778:	ldrb	r3, [r0, #26]
   1277c:	cmp	r3, #0
   12780:	movne	r3, #110	; 0x6e
   12784:	strbne	r3, [r1], #1
   12788:	ldrb	r3, [r0, #27]
   1278c:	cmp	r3, #0
   12790:	movne	r3, #82	; 0x52
   12794:	strbne	r3, [r1], #1
   12798:	ldrb	r3, [r0, #31]
   1279c:	cmp	r3, #0
   127a0:	movne	r3, #114	; 0x72
   127a4:	strbne	r3, [r1], #1
   127a8:	ldrb	r3, [r0, #32]
   127ac:	cmp	r3, #0
   127b0:	movne	r3, #86	; 0x56
   127b4:	strbne	r3, [r1], #1
   127b8:	mov	r3, #0
   127bc:	strb	r3, [r1]
   127c0:	bx	lr
   127c4:	andeq	r6, r3, r8, ror #9
   127c8:	andeq	r6, r3, r8, ror #11
   127cc:	ldr	r3, [r0, #40]	; 0x28
   127d0:	ldr	r2, [r1, #40]	; 0x28
   127d4:	cmp	r3, r2
   127d8:	beq	127ec <__assert_fail@plt+0x8a4>
   127dc:	cmp	r3, r2
   127e0:	movcs	r0, #0
   127e4:	movcc	r0, #1
   127e8:	bx	lr
   127ec:	ldr	r3, [r0, #20]
   127f0:	ldr	r0, [r0, #24]
   127f4:	add	r3, r3, r0
   127f8:	ldr	r0, [r1, #20]
   127fc:	ldr	r2, [r1, #24]
   12800:	add	r0, r0, r2
   12804:	cmp	r3, r0
   12808:	movcs	r0, #0
   1280c:	movcc	r0, #1
   12810:	bx	lr
   12814:	ldrb	r3, [r0]
   12818:	cmp	r3, #0
   1281c:	bxeq	lr
   12820:	strd	r4, [sp, #-16]!
   12824:	str	r6, [sp, #8]
   12828:	str	lr, [sp, #12]
   1282c:	mov	lr, #1
   12830:	movw	ip, #25312	; 0x62e0
   12834:	movt	ip, #3
   12838:	add	r6, ip, #776	; 0x308
   1283c:	add	r5, ip, #264	; 0x108
   12840:	add	ip, ip, #520	; 0x208
   12844:	bic	r4, r2, #2
   12848:	sub	r2, r2, #1
   1284c:	b	1286c <__assert_fail@plt+0x924>
   12850:	cmp	r4, #0
   12854:	strbeq	lr, [r1, #24]
   12858:	cmp	r2, #1
   1285c:	strbls	lr, [r1, #25]
   12860:	ldrb	r3, [r0, #1]!
   12864:	cmp	r3, #0
   12868:	beq	1296c <__assert_fail@plt+0xa24>
   1286c:	sub	r3, r3, #77	; 0x4d
   12870:	cmp	r3, #37	; 0x25
   12874:	ldrls	pc, [pc, r3, lsl #2]
   12878:	b	1296c <__assert_fail@plt+0xa24>
   1287c:	andeq	r2, r1, r4, asr #18
   12880:	andeq	r2, r1, ip, ror #18
   12884:	andeq	r2, r1, ip, ror #18
   12888:	andeq	r2, r1, ip, ror #18
   1288c:	andeq	r2, r1, ip, ror #18
   12890:	andeq	r2, r1, r4, asr r9
   12894:	andeq	r2, r1, ip, ror #18
   12898:	andeq	r2, r1, ip, ror #18
   1289c:	andeq	r2, r1, ip, ror #18
   128a0:	andeq	r2, r1, r4, ror #18
   128a4:	andeq	r2, r1, ip, ror #18
   128a8:	andeq	r2, r1, ip, ror #18
   128ac:	andeq	r2, r1, ip, ror #18
   128b0:	andeq	r2, r1, ip, ror #18
   128b4:	andeq	r2, r1, ip, ror #18
   128b8:	andeq	r2, r1, ip, ror #18
   128bc:	andeq	r2, r1, ip, ror #18
   128c0:	andeq	r2, r1, ip, ror #18
   128c4:	andeq	r2, r1, ip, ror #18
   128c8:	andeq	r2, r1, ip, ror #18
   128cc:	andeq	r2, r1, ip, ror #18
   128d0:	andeq	r2, r1, r0, asr r8
   128d4:	andeq	r2, r1, ip, ror #18
   128d8:	andeq	r2, r1, r4, lsl r9
   128dc:	andeq	r2, r1, ip, ror #18
   128e0:	andeq	r2, r1, ip, lsl r9
   128e4:	andeq	r2, r1, r4, lsr #18
   128e8:	andeq	r2, r1, ip, lsr #18
   128ec:	andeq	r2, r1, r4, lsr r9
   128f0:	andeq	r2, r1, ip, ror #18
   128f4:	andeq	r2, r1, ip, ror #18
   128f8:	andeq	r2, r1, ip, ror #18
   128fc:	andeq	r2, r1, ip, ror #18
   12900:	andeq	r2, r1, ip, asr #18
   12904:	andeq	r2, r1, ip, ror #18
   12908:	andeq	r2, r1, ip, ror #18
   1290c:	andeq	r2, r1, ip, ror #18
   12910:	andeq	r2, r1, ip, asr r9
   12914:	str	ip, [r1, #16]
   12918:	b	12860 <__assert_fail@plt+0x918>
   1291c:	str	r5, [r1, #20]
   12920:	b	12860 <__assert_fail@plt+0x918>
   12924:	strb	lr, [r1, #28]
   12928:	b	12860 <__assert_fail@plt+0x918>
   1292c:	strb	lr, [r1, #29]
   12930:	b	12860 <__assert_fail@plt+0x918>
   12934:	ldr	r3, [r1, #16]
   12938:	cmp	r3, #0
   1293c:	streq	r6, [r1, #16]
   12940:	b	12860 <__assert_fail@plt+0x918>
   12944:	strb	lr, [r1, #30]
   12948:	b	12860 <__assert_fail@plt+0x918>
   1294c:	strb	lr, [r1, #26]
   12950:	b	12860 <__assert_fail@plt+0x918>
   12954:	strb	lr, [r1, #27]
   12958:	b	12860 <__assert_fail@plt+0x918>
   1295c:	strb	lr, [r1, #31]
   12960:	b	12860 <__assert_fail@plt+0x918>
   12964:	strb	lr, [r1, #32]
   12968:	b	12860 <__assert_fail@plt+0x918>
   1296c:	ldrd	r4, [sp]
   12970:	ldr	r6, [sp, #8]
   12974:	add	sp, sp, #12
   12978:	pop	{pc}		; (ldr pc, [sp], #4)
   1297c:	str	r4, [sp, #-8]!
   12980:	str	lr, [sp, #4]
   12984:	ldr	r1, [r1]
   12988:	ldr	r0, [r0]
   1298c:	bl	11a2c <strcmp@plt>
   12990:	ldr	r4, [sp]
   12994:	add	sp, sp, #4
   12998:	pop	{pc}		; (ldr pc, [sp], #4)
   1299c:	str	r4, [sp, #-8]!
   129a0:	str	lr, [sp, #4]
   129a4:	mov	r4, r0
   129a8:	mov	r2, #5
   129ac:	movw	r1, #13696	; 0x3580
   129b0:	movt	r1, #2
   129b4:	mov	r0, #0
   129b8:	bl	11b58 <dcgettext@plt>
   129bc:	mov	r3, r4
   129c0:	mov	r2, r0
   129c4:	mov	r1, #0
   129c8:	mov	r0, #2
   129cc:	bl	11c90 <error@plt>
   129d0:	push	{lr}		; (str lr, [sp, #-4]!)
   129d4:	sub	sp, sp, #12
   129d8:	mov	r6, r0
   129dc:	mov	r5, r1
   129e0:	mov	r2, #5
   129e4:	movw	r1, #13728	; 0x35a0
   129e8:	movt	r1, #2
   129ec:	mov	r0, #0
   129f0:	bl	11b58 <dcgettext@plt>
   129f4:	mov	r4, r0
   129f8:	mov	r2, #5
   129fc:	mov	r1, r5
   12a00:	mov	r0, #0
   12a04:	bl	11b58 <dcgettext@plt>
   12a08:	mov	r5, r0
   12a0c:	mov	r0, r6
   12a10:	bl	1f870 <__assert_fail@plt+0xd928>
   12a14:	str	r0, [sp]
   12a18:	mov	r3, r5
   12a1c:	mov	r2, r4
   12a20:	mov	r1, #0
   12a24:	mov	r0, #2
   12a28:	bl	11c90 <error@plt>
   12a2c:	str	r4, [sp, #-8]!
   12a30:	str	lr, [sp, #4]
   12a34:	mov	r4, r0
   12a38:	add	r2, r0, #4
   12a3c:	ldr	r1, [pc, #28]	; 12a60 <__assert_fail@plt+0xb18>
   12a40:	mov	r0, #0
   12a44:	bl	11c60 <pthread_sigmask@plt>
   12a48:	clz	r0, r0
   12a4c:	lsr	r0, r0, #5
   12a50:	strb	r0, [r4]
   12a54:	ldr	r4, [sp]
   12a58:	add	sp, sp, #4
   12a5c:	pop	{pc}		; (ldr pc, [sp], #4)
   12a60:	andeq	r6, r3, r8, ror #13
   12a64:	ldrb	r3, [r0]
   12a68:	cmp	r3, #0
   12a6c:	bxeq	lr
   12a70:	str	r4, [sp, #-8]!
   12a74:	str	lr, [sp, #4]
   12a78:	mov	r2, #0
   12a7c:	add	r1, r0, #4
   12a80:	mov	r0, #2
   12a84:	bl	11c60 <pthread_sigmask@plt>
   12a88:	ldr	r4, [sp]
   12a8c:	add	sp, sp, #4
   12a90:	pop	{pc}		; (ldr pc, [sp], #4)
   12a94:	str	r4, [sp, #-8]!
   12a98:	str	lr, [sp, #4]
   12a9c:	movw	r3, #25312	; 0x62e0
   12aa0:	movt	r3, #3
   12aa4:	ldr	r4, [r3, #1160]	; 0x488
   12aa8:	cmp	r4, #0
   12aac:	beq	12ac4 <__assert_fail@plt+0xb7c>
   12ab0:	add	r0, r4, #9
   12ab4:	bl	11b7c <unlink@plt>
   12ab8:	ldr	r4, [r4]
   12abc:	cmp	r4, #0
   12ac0:	bne	12ab0 <__assert_fail@plt+0xb68>
   12ac4:	movw	r3, #25312	; 0x62e0
   12ac8:	movt	r3, #3
   12acc:	mov	r2, #0
   12ad0:	str	r2, [r3, #1160]	; 0x488
   12ad4:	ldr	r4, [sp]
   12ad8:	add	sp, sp, #4
   12adc:	pop	{pc}		; (ldr pc, [sp], #4)
   12ae0:	push	{lr}		; (str lr, [sp, #-4]!)
   12ae4:	sub	sp, sp, #140	; 0x8c
   12ae8:	movw	r3, #25312	; 0x62e0
   12aec:	movt	r3, #3
   12af0:	ldr	r3, [r3, #1160]	; 0x488
   12af4:	cmp	r3, #0
   12af8:	beq	12b10 <__assert_fail@plt+0xbc8>
   12afc:	add	r0, sp, #4
   12b00:	bl	12a2c <__assert_fail@plt+0xae4>
   12b04:	bl	12a94 <__assert_fail@plt+0xb4c>
   12b08:	add	r0, sp, #4
   12b0c:	bl	12a64 <__assert_fail@plt+0xb1c>
   12b10:	bl	1a1d4 <__assert_fail@plt+0x828c>
   12b14:	add	sp, sp, #140	; 0x8c
   12b18:	pop	{pc}		; (ldr pc, [sp], #4)
   12b1c:	str	r4, [sp, #-8]!
   12b20:	str	lr, [sp, #4]
   12b24:	mov	r4, r0
   12b28:	bl	12a94 <__assert_fail@plt+0xb4c>
   12b2c:	mov	r1, #0
   12b30:	mov	r0, r4
   12b34:	bl	11b04 <signal@plt>
   12b38:	mov	r0, r4
   12b3c:	bl	11a20 <raise@plt>
   12b40:	ldr	r4, [sp]
   12b44:	add	sp, sp, #4
   12b48:	pop	{pc}		; (ldr pc, [sp], #4)
   12b4c:	str	r4, [sp, #-8]!
   12b50:	str	lr, [sp, #4]
   12b54:	mov	r4, r0
   12b58:	mov	r2, #40	; 0x28
   12b5c:	mov	r1, #0
   12b60:	bl	11d98 <memset@plt>
   12b64:	mvn	r3, #0
   12b68:	str	r3, [r4, #8]
   12b6c:	mov	r0, r4
   12b70:	ldr	r4, [sp]
   12b74:	add	sp, sp, #4
   12b78:	pop	{pc}		; (ldr pc, [sp], #4)
   12b7c:	strd	r4, [sp, #-16]!
   12b80:	str	r6, [sp, #8]
   12b84:	str	lr, [sp, #12]
   12b88:	sub	sp, sp, #24
   12b8c:	mov	r6, r0
   12b90:	mov	r5, r1
   12b94:	mov	r4, r2
   12b98:	movw	r3, #15800	; 0x3db8
   12b9c:	movt	r3, #2
   12ba0:	str	r3, [sp]
   12ba4:	add	r3, sp, #8
   12ba8:	mov	r2, #10
   12bac:	add	r1, sp, #20
   12bb0:	bl	21994 <__assert_fail@plt+0xfa4c>
   12bb4:	cmp	r0, #4
   12bb8:	ldrls	pc, [pc, r0, lsl #2]
   12bbc:	b	12bf4 <__assert_fail@plt+0xcac>
   12bc0:	ldrdeq	r2, [r1], -r4
   12bc4:	andeq	r2, r1, ip, ror #23
   12bc8:	ldrdeq	r2, [r1], -r4
   12bcc:	andeq	r2, r1, ip, ror #23
   12bd0:	andeq	r2, r1, ip, lsl #24
   12bd4:	ldrd	r0, [sp, #8]
   12bd8:	str	r0, [r5]
   12bdc:	mov	r3, #0
   12be0:	cmp	r1, r3
   12be4:	cmpeq	r0, r0
   12be8:	beq	12bf4 <__assert_fail@plt+0xcac>
   12bec:	mvn	r3, #0
   12bf0:	str	r3, [r5]
   12bf4:	ldr	r0, [sp, #20]
   12bf8:	add	sp, sp, #24
   12bfc:	ldrd	r4, [sp]
   12c00:	ldr	r6, [sp, #8]
   12c04:	add	sp, sp, #12
   12c08:	pop	{pc}		; (ldr pc, [sp], #4)
   12c0c:	cmp	r4, #0
   12c10:	moveq	r0, r4
   12c14:	beq	12bf8 <__assert_fail@plt+0xcb0>
   12c18:	mov	r2, #5
   12c1c:	movw	r1, #13764	; 0x35c4
   12c20:	movt	r1, #2
   12c24:	mov	r0, #0
   12c28:	bl	11b58 <dcgettext@plt>
   12c2c:	mov	r5, r0
   12c30:	mov	r2, #5
   12c34:	mov	r1, r4
   12c38:	mov	r0, #0
   12c3c:	bl	11b58 <dcgettext@plt>
   12c40:	mov	r4, r0
   12c44:	mov	r0, r6
   12c48:	bl	1f870 <__assert_fail@plt+0xd928>
   12c4c:	str	r0, [sp]
   12c50:	mov	r3, r4
   12c54:	mov	r2, r5
   12c58:	mov	r1, #0
   12c5c:	mov	r0, #2
   12c60:	bl	11c90 <error@plt>
   12c64:	push	{lr}		; (str lr, [sp, #-4]!)
   12c68:	sub	sp, sp, #12
   12c6c:	mov	r6, r0
   12c70:	mov	r4, r1
   12c74:	bl	11d74 <__errno_location@plt>
   12c78:	ldr	r5, [r0]
   12c7c:	cmp	r4, #0
   12c80:	beq	12cb0 <__assert_fail@plt+0xd68>
   12c84:	mov	r2, r4
   12c88:	mov	r1, #3
   12c8c:	mov	r0, #0
   12c90:	bl	1f6a4 <__assert_fail@plt+0xd75c>
   12c94:	str	r0, [sp]
   12c98:	mov	r3, r6
   12c9c:	movw	r2, #13816	; 0x35f8
   12ca0:	movt	r2, #2
   12ca4:	mov	r1, r5
   12ca8:	mov	r0, #2
   12cac:	bl	11c90 <error@plt>
   12cb0:	mov	r2, #5
   12cb4:	movw	r1, #13800	; 0x35e8
   12cb8:	movt	r1, #2
   12cbc:	mov	r0, #0
   12cc0:	bl	11b58 <dcgettext@plt>
   12cc4:	mov	r4, r0
   12cc8:	b	12c84 <__assert_fail@plt+0xd3c>
   12ccc:	str	r4, [sp, #-8]!
   12cd0:	str	lr, [sp, #4]
   12cd4:	movw	r3, #25312	; 0x62e0
   12cd8:	movt	r3, #3
   12cdc:	ldr	r3, [r3, #1272]	; 0x4f8
   12ce0:	cmp	r3, #0
   12ce4:	beq	12d0c <__assert_fail@plt+0xdc4>
   12ce8:	movw	r3, #25312	; 0x62e0
   12cec:	movt	r3, #3
   12cf0:	ldr	r3, [r3, #1272]	; 0x4f8
   12cf4:	cmp	r3, #0
   12cf8:	ldr	r0, [pc, #64]	; 12d40 <__assert_fail@plt+0xdf8>
   12cfc:	movge	r0, #0
   12d00:	ldr	r4, [sp]
   12d04:	add	sp, sp, #4
   12d08:	pop	{pc}		; (ldr pc, [sp], #4)
   12d0c:	ldr	r2, [pc, #44]	; 12d40 <__assert_fail@plt+0xdf8>
   12d10:	mov	r1, #1
   12d14:	mov	r0, #3
   12d18:	bl	11bf4 <__fxstat64@plt>
   12d1c:	cmp	r0, #0
   12d20:	mvneq	r2, #0
   12d24:	beq	12d30 <__assert_fail@plt+0xde8>
   12d28:	bl	11d74 <__errno_location@plt>
   12d2c:	ldr	r2, [r0]
   12d30:	movw	r3, #25312	; 0x62e0
   12d34:	movt	r3, #3
   12d38:	str	r2, [r3, #1272]	; 0x4f8
   12d3c:	b	12ce8 <__assert_fail@plt+0xda0>
   12d40:	andeq	r6, r3, r0, ror r7
   12d44:	strd	r4, [sp, #-16]!
   12d48:	str	r6, [sp, #8]
   12d4c:	str	lr, [sp, #12]
   12d50:	mov	r4, r0
   12d54:	ldrb	r3, [r1]
   12d58:	cmp	r3, #114	; 0x72
   12d5c:	beq	12da8 <__assert_fail@plt+0xe60>
   12d60:	cmp	r3, #119	; 0x77
   12d64:	bne	12e74 <__assert_fail@plt+0xf2c>
   12d68:	cmp	r0, #0
   12d6c:	beq	12d88 <__assert_fail@plt+0xe40>
   12d70:	mov	r2, #0
   12d74:	mov	r3, #0
   12d78:	mov	r0, #1
   12d7c:	bl	11b28 <ftruncate64@plt>
   12d80:	cmp	r0, #0
   12d84:	bne	12e14 <__assert_fail@plt+0xecc>
   12d88:	movw	r3, #25300	; 0x62d4
   12d8c:	movt	r3, #3
   12d90:	ldr	r4, [r3]
   12d94:	mov	r0, r4
   12d98:	ldrd	r4, [sp]
   12d9c:	ldr	r6, [sp, #8]
   12da0:	add	sp, sp, #12
   12da4:	pop	{pc}		; (ldr pc, [sp], #4)
   12da8:	mov	r5, r1
   12dac:	movw	r1, #13824	; 0x3600
   12db0:	movt	r1, #2
   12db4:	bl	11a2c <strcmp@plt>
   12db8:	cmp	r0, #0
   12dbc:	bne	12dec <__assert_fail@plt+0xea4>
   12dc0:	movw	r3, #25312	; 0x62e0
   12dc4:	movt	r3, #3
   12dc8:	mov	r2, #1
   12dcc:	strb	r2, [r3, #1276]	; 0x4fc
   12dd0:	movw	r3, #25296	; 0x62d0
   12dd4:	movt	r3, #3
   12dd8:	ldr	r4, [r3]
   12ddc:	mov	r1, #2
   12de0:	mov	r0, r4
   12de4:	bl	1b10c <__assert_fail@plt+0x91c4>
   12de8:	b	12d94 <__assert_fail@plt+0xe4c>
   12dec:	mov	r1, #524288	; 0x80000
   12df0:	mov	r0, r4
   12df4:	bl	11c9c <open64@plt>
   12df8:	cmp	r0, #0
   12dfc:	movlt	r4, #0
   12e00:	blt	12ddc <__assert_fail@plt+0xe94>
   12e04:	mov	r1, r5
   12e08:	bl	119fc <fdopen@plt>
   12e0c:	mov	r4, r0
   12e10:	b	12ddc <__assert_fail@plt+0xe94>
   12e14:	bl	11d74 <__errno_location@plt>
   12e18:	ldr	r5, [r0]
   12e1c:	bl	12ccc <__assert_fail@plt+0xd84>
   12e20:	cmp	r0, #0
   12e24:	beq	12e38 <__assert_fail@plt+0xef0>
   12e28:	ldr	r3, [r0, #16]
   12e2c:	and	r3, r3, #61440	; 0xf000
   12e30:	cmp	r3, #32768	; 0x8000
   12e34:	bne	12d88 <__assert_fail@plt+0xe40>
   12e38:	mov	r2, #5
   12e3c:	movw	r1, #13828	; 0x3604
   12e40:	movt	r1, #2
   12e44:	mov	r0, #0
   12e48:	bl	11b58 <dcgettext@plt>
   12e4c:	mov	r6, r0
   12e50:	mov	r2, r4
   12e54:	mov	r1, #3
   12e58:	mov	r0, #0
   12e5c:	bl	1f6a4 <__assert_fail@plt+0xd75c>
   12e60:	mov	r3, r0
   12e64:	mov	r2, r6
   12e68:	mov	r1, r5
   12e6c:	mov	r0, #2
   12e70:	bl	11c90 <error@plt>
   12e74:	ldr	r3, [pc, #20]	; 12e90 <__assert_fail@plt+0xf48>
   12e78:	movw	r2, #981	; 0x3d5
   12e7c:	movw	r1, #13852	; 0x361c
   12e80:	movt	r1, #2
   12e84:	movw	r0, #13864	; 0x3628
   12e88:	movt	r0, #2
   12e8c:	bl	11f48 <__assert_fail@plt>
   12e90:	andeq	r3, r2, r0, asr #5
   12e94:	str	r4, [sp, #-8]!
   12e98:	str	lr, [sp, #4]
   12e9c:	mov	r4, r0
   12ea0:	bl	12d44 <__assert_fail@plt+0xdfc>
   12ea4:	cmp	r0, #0
   12ea8:	beq	12eb8 <__assert_fail@plt+0xf70>
   12eac:	ldr	r4, [sp]
   12eb0:	add	sp, sp, #4
   12eb4:	pop	{pc}		; (ldr pc, [sp], #4)
   12eb8:	mov	r2, #5
   12ebc:	movw	r1, #13908	; 0x3654
   12ec0:	movt	r1, #2
   12ec4:	mov	r0, #0
   12ec8:	bl	11b58 <dcgettext@plt>
   12ecc:	mov	r1, r4
   12ed0:	bl	12c64 <__assert_fail@plt+0xd1c>
   12ed4:	strd	r4, [sp, #-16]!
   12ed8:	str	r6, [sp, #8]
   12edc:	str	lr, [sp, #12]
   12ee0:	mov	r4, r0
   12ee4:	mov	r5, r1
   12ee8:	bl	11dc8 <fileno@plt>
   12eec:	cmp	r0, #0
   12ef0:	beq	12f28 <__assert_fail@plt+0xfe0>
   12ef4:	cmp	r0, #1
   12ef8:	beq	12f40 <__assert_fail@plt+0xff8>
   12efc:	mov	r0, r4
   12f00:	bl	1b14c <__assert_fail@plt+0x9204>
   12f04:	cmp	r0, #0
   12f08:	beq	12f30 <__assert_fail@plt+0xfe8>
   12f0c:	mov	r2, #5
   12f10:	movw	r1, #13936	; 0x3670
   12f14:	movt	r1, #2
   12f18:	mov	r0, #0
   12f1c:	bl	11b58 <dcgettext@plt>
   12f20:	mov	r1, r5
   12f24:	bl	12c64 <__assert_fail@plt+0xd1c>
   12f28:	mov	r0, r4
   12f2c:	bl	11e88 <clearerr_unlocked@plt>
   12f30:	ldrd	r4, [sp]
   12f34:	ldr	r6, [sp, #8]
   12f38:	add	sp, sp, #12
   12f3c:	pop	{pc}		; (ldr pc, [sp], #4)
   12f40:	mov	r0, r4
   12f44:	bl	11bdc <fflush_unlocked@plt>
   12f48:	cmp	r0, #0
   12f4c:	beq	12f30 <__assert_fail@plt+0xfe8>
   12f50:	mov	r2, #5
   12f54:	movw	r1, #13920	; 0x3660
   12f58:	movt	r1, #2
   12f5c:	mov	r0, #0
   12f60:	bl	11b58 <dcgettext@plt>
   12f64:	mov	r1, r5
   12f68:	bl	12c64 <__assert_fail@plt+0xd1c>
   12f6c:	str	r4, [sp, #-8]!
   12f70:	str	lr, [sp, #4]
   12f74:	mov	r1, #40	; 0x28
   12f78:	bl	2142c <__assert_fail@plt+0xf4e4>
   12f7c:	movw	r3, #25312	; 0x62e0
   12f80:	movt	r3, #3
   12f84:	ldr	r3, [r3, #1280]	; 0x500
   12f88:	cmp	r3, #0
   12f8c:	bne	12f9c <__assert_fail@plt+0x1054>
   12f90:	ldr	r3, [pc, #44]	; 12fc4 <__assert_fail@plt+0x107c>
   12f94:	b	12fac <__assert_fail@plt+0x1064>
   12f98:	mov	r3, r2
   12f9c:	ldr	r2, [r3, #36]	; 0x24
   12fa0:	cmp	r2, #0
   12fa4:	bne	12f98 <__assert_fail@plt+0x1050>
   12fa8:	add	r3, r3, #36	; 0x24
   12fac:	str	r0, [r3]
   12fb0:	mov	r3, #0
   12fb4:	str	r3, [r0, #36]	; 0x24
   12fb8:	ldr	r4, [sp]
   12fbc:	add	sp, sp, #4
   12fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   12fc4:	andeq	r6, r3, r0, ror #15
   12fc8:	strd	r4, [sp, #-16]!
   12fcc:	str	r6, [sp, #8]
   12fd0:	str	lr, [sp, #12]
   12fd4:	mov	r4, r0
   12fd8:	movw	r3, #25312	; 0x62e0
   12fdc:	movt	r3, #3
   12fe0:	ldr	r2, [r3, #1284]	; 0x504
   12fe4:	ldr	r3, [r3, #1288]	; 0x508
   12fe8:	cmp	r2, r3
   12fec:	beq	1301c <__assert_fail@plt+0x10d4>
   12ff0:	movw	r3, #25312	; 0x62e0
   12ff4:	movt	r3, #3
   12ff8:	ldr	r1, [r3, #1292]	; 0x50c
   12ffc:	ldr	r2, [r3, #1284]	; 0x504
   13000:	add	r0, r2, #1
   13004:	str	r0, [r3, #1284]	; 0x504
   13008:	str	r4, [r1, r2, lsl #2]
   1300c:	ldrd	r4, [sp]
   13010:	ldr	r6, [sp, #8]
   13014:	add	sp, sp, #12
   13018:	pop	{pc}		; (ldr pc, [sp], #4)
   1301c:	movw	r5, #25312	; 0x62e0
   13020:	movt	r5, #3
   13024:	mov	r2, #4
   13028:	add	r1, r5, #1280	; 0x500
   1302c:	add	r1, r1, #8
   13030:	ldr	r0, [r5, #1292]	; 0x50c
   13034:	bl	21238 <__assert_fail@plt+0xf2f0>
   13038:	str	r0, [r5, #1292]	; 0x50c
   1303c:	b	12ff0 <__assert_fail@plt+0x10a8>
   13040:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13044:	strd	r6, [sp, #8]
   13048:	str	r8, [sp, #16]
   1304c:	str	lr, [sp, #20]
   13050:	mov	r5, r0
   13054:	mov	r7, r1
   13058:	mov	r4, r2
   1305c:	add	r6, r1, #1
   13060:	bic	r4, r4, #15
   13064:	add	r4, r4, #16
   13068:	mov	r0, r4
   1306c:	bl	21f58 <__assert_fail@plt+0x10010>
   13070:	str	r0, [r5]
   13074:	cmp	r0, #0
   13078:	bne	1308c <__assert_fail@plt+0x1144>
   1307c:	lsr	r4, r4, #1
   13080:	cmp	r6, r4
   13084:	bcc	13060 <__assert_fail@plt+0x1118>
   13088:	bl	21504 <__assert_fail@plt+0xf5bc>
   1308c:	str	r7, [r5, #20]
   13090:	str	r4, [r5, #12]
   13094:	mov	r3, #0
   13098:	str	r3, [r5, #8]
   1309c:	str	r3, [r5, #16]
   130a0:	str	r3, [r5, #4]
   130a4:	strb	r3, [r5, #24]
   130a8:	ldrd	r4, [sp]
   130ac:	ldrd	r6, [sp, #8]
   130b0:	ldr	r8, [sp, #16]
   130b4:	add	sp, sp, #20
   130b8:	pop	{pc}		; (ldr pc, [sp], #4)
   130bc:	strd	r4, [sp, #-16]!
   130c0:	str	r6, [sp, #8]
   130c4:	str	lr, [sp, #12]
   130c8:	mov	r4, r0
   130cc:	mov	r5, r1
   130d0:	mov	r2, #0
   130d4:	sub	r1, r1, r0
   130d8:	bl	1cdac <__assert_fail@plt+0xae64>
   130dc:	cmp	r5, r4
   130e0:	bls	130f8 <__assert_fail@plt+0x11b0>
   130e4:	ldrb	r3, [r4], #1
   130e8:	cmp	r3, #9
   130ec:	addeq	r0, r0, #1
   130f0:	cmp	r5, r4
   130f4:	bne	130e4 <__assert_fail@plt+0x119c>
   130f8:	ldrd	r4, [sp]
   130fc:	ldr	r6, [sp, #8]
   13100:	add	sp, sp, #12
   13104:	pop	{pc}		; (ldr pc, [sp], #4)
   13108:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1310c:	strd	r6, [sp, #8]
   13110:	strd	r8, [sp, #16]
   13114:	strd	sl, [sp, #24]
   13118:	str	lr, [sp, #32]
   1311c:	sub	sp, sp, #12
   13120:	mov	r5, r1
   13124:	ldr	r4, [r0]
   13128:	ldr	r7, [r0, #4]
   1312c:	add	r6, r4, r7
   13130:	subs	r9, r2, #0
   13134:	beq	13188 <__assert_fail@plt+0x1240>
   13138:	movw	r3, #25060	; 0x61e4
   1313c:	movt	r3, #3
   13140:	ldrb	r3, [r3, #100]	; 0x64
   13144:	strb	r3, [r6, #-1]
   13148:	mov	r3, r5
   1314c:	mov	r2, r7
   13150:	mov	r1, #1
   13154:	mov	r0, r4
   13158:	bl	11b34 <fwrite_unlocked@plt>
   1315c:	cmp	r7, r0
   13160:	moveq	r3, #0
   13164:	strbeq	r3, [r6, #-1]
   13168:	bne	134f8 <__assert_fail@plt+0x15b0>
   1316c:	add	sp, sp, #12
   13170:	ldrd	r4, [sp]
   13174:	ldrd	r6, [sp, #8]
   13178:	ldrd	r8, [sp, #16]
   1317c:	ldrd	sl, [sp, #24]
   13180:	add	sp, sp, #32
   13184:	pop	{pc}		; (ldr pc, [sp], #4)
   13188:	mov	r8, r0
   1318c:	movw	r3, #25312	; 0x62e0
   13190:	movt	r3, #3
   13194:	ldrb	r3, [r3, #1296]	; 0x510
   13198:	cmp	r3, #0
   1319c:	beq	13138 <__assert_fail@plt+0x11f0>
   131a0:	cmp	r4, r6
   131a4:	bcc	131f0 <__assert_fail@plt+0x12a8>
   131a8:	movw	r3, #25312	; 0x62e0
   131ac:	movt	r3, #3
   131b0:	ldr	r5, [r3, #1280]	; 0x500
   131b4:	mov	sl, r3
   131b8:	movw	r9, #25300	; 0x62d4
   131bc:	movt	r9, #3
   131c0:	b	13334 <__assert_fail@plt+0x13ec>
   131c4:	cmp	r6, r4
   131c8:	moveq	r1, #10
   131cc:	ldr	r3, [r5, #20]
   131d0:	ldr	r2, [r5, #24]
   131d4:	cmp	r3, r2
   131d8:	addcc	r2, r3, #1
   131dc:	strcc	r2, [r5, #20]
   131e0:	strbcc	r1, [r3]
   131e4:	bcs	13204 <__assert_fail@plt+0x12bc>
   131e8:	cmp	r6, r4
   131ec:	beq	131a8 <__assert_fail@plt+0x1260>
   131f0:	ldrb	r1, [r4], #1
   131f4:	cmp	r1, #9
   131f8:	moveq	r1, #62	; 0x3e
   131fc:	bne	131c4 <__assert_fail@plt+0x127c>
   13200:	b	131cc <__assert_fail@plt+0x1284>
   13204:	mov	r0, r5
   13208:	bl	11e1c <__overflow@plt>
   1320c:	cmn	r0, #1
   13210:	bne	131e8 <__assert_fail@plt+0x12a0>
   13214:	mov	r2, #5
   13218:	movw	r1, #13952	; 0x3680
   1321c:	movt	r1, #2
   13220:	mov	r0, #0
   13224:	bl	11b58 <dcgettext@plt>
   13228:	mov	r1, #0
   1322c:	bl	12c64 <__assert_fail@plt+0xd1c>
   13230:	ldr	r3, [r5, #8]
   13234:	cmn	r3, #1
   13238:	moveq	r6, r7
   1323c:	beq	13388 <__assert_fail@plt+0x1440>
   13240:	mov	r6, r7
   13244:	b	13378 <__assert_fail@plt+0x1430>
   13248:	mov	r1, sp
   1324c:	mov	r0, r6
   13250:	bl	12550 <__assert_fail@plt+0x608>
   13254:	strb	fp, [r4]
   13258:	ldr	r4, [sp]
   1325c:	mov	r1, r6
   13260:	mov	r0, r7
   13264:	bl	130bc <__assert_fail@plt+0x1174>
   13268:	mov	r7, r0
   1326c:	mov	r1, r4
   13270:	mov	r0, r6
   13274:	bl	130bc <__assert_fail@plt+0x1174>
   13278:	mov	r4, r0
   1327c:	mov	r6, #32
   13280:	sub	r7, r7, #1
   13284:	cmn	r7, #1
   13288:	beq	132c8 <__assert_fail@plt+0x1380>
   1328c:	ldr	r0, [r9]
   13290:	ldr	r3, [r0, #20]
   13294:	ldr	r2, [r0, #24]
   13298:	cmp	r3, r2
   1329c:	addcc	r2, r3, #1
   132a0:	strcc	r2, [r0, #20]
   132a4:	strbcc	r6, [r3]
   132a8:	bcc	13280 <__assert_fail@plt+0x1338>
   132ac:	mov	r1, r6
   132b0:	bl	11e1c <__overflow@plt>
   132b4:	b	13280 <__assert_fail@plt+0x1338>
   132b8:	mov	r1, sp
   132bc:	mov	r0, r6
   132c0:	bl	11b1c <strtold@plt>
   132c4:	b	13254 <__assert_fail@plt+0x130c>
   132c8:	cmp	r4, #0
   132cc:	movne	r6, #95	; 0x5f
   132d0:	beq	134a0 <__assert_fail@plt+0x1558>
   132d4:	ldr	r0, [r9]
   132d8:	ldr	r3, [r0, #20]
   132dc:	ldr	r2, [r0, #24]
   132e0:	cmp	r3, r2
   132e4:	addcc	r2, r3, #1
   132e8:	strcc	r2, [r0, #20]
   132ec:	strbcc	r6, [r3]
   132f0:	bcs	134c4 <__assert_fail@plt+0x157c>
   132f4:	subs	r4, r4, #1
   132f8:	bne	132d4 <__assert_fail@plt+0x138c>
   132fc:	ldr	r0, [r9]
   13300:	ldr	r3, [r0, #20]
   13304:	ldr	r2, [r0, #24]
   13308:	cmp	r3, r2
   1330c:	addcc	r2, r3, #1
   13310:	strcc	r2, [r0, #20]
   13314:	movcc	r2, #10
   13318:	strbcc	r2, [r3]
   1331c:	bcs	134d0 <__assert_fail@plt+0x1588>
   13320:	cmp	r5, #0
   13324:	beq	1316c <__assert_fail@plt+0x1224>
   13328:	ldr	r5, [r5, #36]	; 0x24
   1332c:	cmp	r5, #0
   13330:	beq	134dc <__assert_fail@plt+0x1594>
   13334:	ldr	r7, [r8]
   13338:	ldr	r4, [r8, #4]
   1333c:	sub	r4, r4, #1
   13340:	add	r4, r7, r4
   13344:	cmp	r5, #0
   13348:	moveq	r6, r7
   1334c:	beq	1325c <__assert_fail@plt+0x1314>
   13350:	ldr	fp, [r5]
   13354:	cmn	fp, #1
   13358:	beq	13230 <__assert_fail@plt+0x12e8>
   1335c:	mov	r1, r5
   13360:	mov	r0, r8
   13364:	bl	12070 <__assert_fail@plt+0x128>
   13368:	mov	r6, r0
   1336c:	ldr	r3, [r5, #8]
   13370:	cmn	r3, #1
   13374:	beq	133a0 <__assert_fail@plt+0x1458>
   13378:	mov	r1, r5
   1337c:	mov	r0, r8
   13380:	bl	12240 <__assert_fail@plt+0x2f8>
   13384:	mov	r4, r0
   13388:	cmn	fp, #1
   1338c:	movne	fp, #0
   13390:	moveq	fp, #1
   13394:	ldrb	r3, [r5, #24]
   13398:	tst	fp, r3
   1339c:	bne	133c4 <__assert_fail@plt+0x147c>
   133a0:	ldrb	r3, [r5, #30]
   133a4:	cmp	r3, #0
   133a8:	bne	133c4 <__assert_fail@plt+0x147c>
   133ac:	ldrb	r3, [r5, #26]
   133b0:	cmp	r3, #0
   133b4:	bne	133c4 <__assert_fail@plt+0x147c>
   133b8:	ldrh	r3, [r5, #28]
   133bc:	cmp	r3, #0
   133c0:	beq	1325c <__assert_fail@plt+0x1314>
   133c4:	ldrb	fp, [r4]
   133c8:	mov	r3, #0
   133cc:	strb	r3, [r4]
   133d0:	ldrb	r3, [r6]
   133d4:	ldrb	r3, [sl, r3]
   133d8:	cmp	r3, #0
   133dc:	beq	133f0 <__assert_fail@plt+0x14a8>
   133e0:	ldrb	r3, [r6, #1]!
   133e4:	ldrb	r3, [sl, r3]
   133e8:	cmp	r3, #0
   133ec:	bne	133e0 <__assert_fail@plt+0x1498>
   133f0:	str	r6, [sp]
   133f4:	cmp	r6, r4
   133f8:	strhi	r4, [sp]
   133fc:	bhi	13254 <__assert_fail@plt+0x130c>
   13400:	ldrb	r3, [r5, #30]
   13404:	cmp	r3, #0
   13408:	bne	13248 <__assert_fail@plt+0x1300>
   1340c:	ldrb	r3, [r5, #28]
   13410:	cmp	r3, #0
   13414:	bne	132b8 <__assert_fail@plt+0x1370>
   13418:	ldrb	r3, [r5, #26]
   1341c:	cmp	r3, #0
   13420:	bne	13434 <__assert_fail@plt+0x14ec>
   13424:	ldrb	r3, [r5, #29]
   13428:	cmp	r3, #0
   1342c:	streq	r4, [sp]
   13430:	beq	13254 <__assert_fail@plt+0x130c>
   13434:	cmp	r6, r4
   13438:	movcs	r3, #0
   1343c:	bcs	13450 <__assert_fail@plt+0x1508>
   13440:	ldrb	r3, [r6]
   13444:	cmp	r3, #45	; 0x2d
   13448:	movne	r3, #0
   1344c:	moveq	r3, #1
   13450:	add	r3, r6, r3
   13454:	str	r3, [sp, #4]
   13458:	add	r0, sp, #4
   1345c:	bl	12420 <__assert_fail@plt+0x4d8>
   13460:	cmp	r0, #47	; 0x2f
   13464:	bls	13254 <__assert_fail@plt+0x130c>
   13468:	ldr	r3, [sp, #4]
   1346c:	ldrb	r2, [r5, #29]
   13470:	cmp	r2, #0
   13474:	moveq	r2, #0
   13478:	beq	13494 <__assert_fail@plt+0x154c>
   1347c:	movw	r2, #12736	; 0x31c0
   13480:	movt	r2, #2
   13484:	ldrb	r1, [r3]
   13488:	ldrb	r2, [r2, r1]
   1348c:	adds	r2, r2, #0
   13490:	movne	r2, #1
   13494:	add	r3, r3, r2
   13498:	str	r3, [sp]
   1349c:	b	13254 <__assert_fail@plt+0x130c>
   134a0:	mov	r2, #5
   134a4:	movw	r1, #13968	; 0x3690
   134a8:	movt	r1, #2
   134ac:	mov	r0, #0
   134b0:	bl	11b58 <dcgettext@plt>
   134b4:	mov	r1, r0
   134b8:	mov	r0, #1
   134bc:	bl	11db0 <__printf_chk@plt>
   134c0:	b	13320 <__assert_fail@plt+0x13d8>
   134c4:	mov	r1, r6
   134c8:	bl	11e1c <__overflow@plt>
   134cc:	b	132f4 <__assert_fail@plt+0x13ac>
   134d0:	mov	r1, #10
   134d4:	bl	11e1c <__overflow@plt>
   134d8:	b	13320 <__assert_fail@plt+0x13d8>
   134dc:	ldrb	r3, [sl, #1297]	; 0x511
   134e0:	cmp	r3, #0
   134e4:	bne	1316c <__assert_fail@plt+0x1224>
   134e8:	ldrb	r3, [sl, #1298]	; 0x512
   134ec:	cmp	r3, #0
   134f0:	beq	13334 <__assert_fail@plt+0x13ec>
   134f4:	b	1316c <__assert_fail@plt+0x1224>
   134f8:	mov	r2, #5
   134fc:	movw	r1, #13952	; 0x3680
   13500:	movt	r1, #2
   13504:	mov	r0, #0
   13508:	bl	11b58 <dcgettext@plt>
   1350c:	mov	r1, r9
   13510:	bl	12c64 <__assert_fail@plt+0xd1c>
   13514:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13518:	strd	r6, [sp, #8]
   1351c:	str	r8, [sp, #16]
   13520:	str	lr, [sp, #20]
   13524:	mov	r6, r0
   13528:	mov	r5, r1
   1352c:	mov	r7, r2
   13530:	bl	11d74 <__errno_location@plt>
   13534:	mov	r4, r0
   13538:	mov	r3, #0
   1353c:	str	r3, [r0]
   13540:	mov	r2, r7
   13544:	mov	r1, r5
   13548:	mov	r0, r6
   1354c:	bl	11d68 <strxfrm@plt>
   13550:	ldr	r4, [r4]
   13554:	cmp	r4, #0
   13558:	bne	13570 <__assert_fail@plt+0x1628>
   1355c:	ldrd	r4, [sp]
   13560:	ldrd	r6, [sp, #8]
   13564:	ldr	r8, [sp, #16]
   13568:	add	sp, sp, #20
   1356c:	pop	{pc}		; (ldr pc, [sp], #4)
   13570:	mov	r2, #5
   13574:	movw	r1, #13988	; 0x36a4
   13578:	movt	r1, #2
   1357c:	mov	r0, #0
   13580:	bl	11b58 <dcgettext@plt>
   13584:	mov	r2, r0
   13588:	mov	r1, r4
   1358c:	mov	r0, #0
   13590:	bl	11c90 <error@plt>
   13594:	mov	r2, #5
   13598:	movw	r1, #14020	; 0x36c4
   1359c:	movt	r1, #2
   135a0:	mov	r0, #0
   135a4:	bl	11b58 <dcgettext@plt>
   135a8:	mov	r2, r0
   135ac:	mov	r1, #0
   135b0:	mov	r0, r1
   135b4:	bl	11c90 <error@plt>
   135b8:	mov	r2, #5
   135bc:	movw	r1, #14064	; 0x36f0
   135c0:	movt	r1, #2
   135c4:	mov	r0, #0
   135c8:	bl	11b58 <dcgettext@plt>
   135cc:	mov	r4, r0
   135d0:	mov	r2, r5
   135d4:	mov	r1, #8
   135d8:	mov	r0, #0
   135dc:	bl	1f4f4 <__assert_fail@plt+0xd5ac>
   135e0:	mov	r3, r0
   135e4:	mov	r2, r4
   135e8:	mov	r1, #0
   135ec:	mov	r0, #2
   135f0:	bl	11c90 <error@plt>
   135f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   135f8:	strd	r6, [sp, #8]
   135fc:	strd	r8, [sp, #16]
   13600:	strd	sl, [sp, #24]
   13604:	str	lr, [sp, #32]
   13608:	vpush	{d8}
   1360c:	sub	sp, sp, #8384	; 0x20c0
   13610:	sub	sp, sp, #44	; 0x2c
   13614:	str	r0, [sp, #8]
   13618:	str	r1, [sp, #12]
   1361c:	mov	r3, #0
   13620:	str	r3, [sp, #20]
   13624:	str	r3, [sp, #24]
   13628:	movw	r3, #25312	; 0x62e0
   1362c:	movt	r3, #3
   13630:	ldr	sl, [r3, #1280]	; 0x500
   13634:	ldr	r9, [r0, #8]
   13638:	ldr	r6, [r1, #8]
   1363c:	ldr	r4, [r0, #12]
   13640:	ldr	r5, [r1, #12]
   13644:	mov	fp, r3
   13648:	movw	r3, #21844	; 0x5554
   1364c:	movt	r3, #21845	; 0x5555
   13650:	str	r3, [sp, #48]	; 0x30
   13654:	mov	r7, r4
   13658:	b	13778 <__assert_fail@plt+0x1830>
   1365c:	orrs	r3, r4, r8
   13660:	str	r3, [sp, #16]
   13664:	bne	13804 <__assert_fail@plt+0x18bc>
   13668:	ldrb	r3, [r2]
   1366c:	str	r3, [sp, #20]
   13670:	mov	r3, #0
   13674:	strb	r3, [r2]
   13678:	ldrb	r2, [r5]
   1367c:	str	r2, [sp, #24]
   13680:	strb	r3, [r5]
   13684:	ldrb	r3, [sl, #26]
   13688:	cmp	r3, #0
   1368c:	beq	13928 <__assert_fail@plt+0x19e0>
   13690:	ldrb	r3, [r9]
   13694:	ldrb	r3, [fp, r3]
   13698:	cmp	r3, #0
   1369c:	beq	13918 <__assert_fail@plt+0x19d0>
   136a0:	mov	r0, r9
   136a4:	ldrb	r3, [r0, #1]!
   136a8:	ldrb	r3, [fp, r3]
   136ac:	cmp	r3, #0
   136b0:	bne	136a4 <__assert_fail@plt+0x175c>
   136b4:	ldrb	r3, [r6]
   136b8:	ldrb	r3, [fp, r3]
   136bc:	cmp	r3, #0
   136c0:	beq	13920 <__assert_fail@plt+0x19d8>
   136c4:	mov	r1, r6
   136c8:	ldrb	r3, [r1, #1]!
   136cc:	ldrb	r3, [fp, r3]
   136d0:	cmp	r3, #0
   136d4:	bne	136c8 <__assert_fail@plt+0x1780>
   136d8:	ldr	r3, [fp, #256]	; 0x100
   136dc:	ldrb	r2, [fp, #260]	; 0x104
   136e0:	bl	20514 <__assert_fail@plt+0xe5cc>
   136e4:	str	r0, [sp, #4]
   136e8:	ldr	r3, [sp, #16]
   136ec:	cmp	r3, #0
   136f0:	bne	13e38 <__assert_fail@plt+0x1ef0>
   136f4:	ldr	r3, [sp, #20]
   136f8:	strb	r3, [r9, r7]
   136fc:	ldr	r3, [sp]
   13700:	ldr	r2, [sp, #24]
   13704:	strb	r2, [r6, r3]
   13708:	ldr	r3, [sp, #4]
   1370c:	cmp	r3, #0
   13710:	bne	14138 <__assert_fail@plt+0x21f0>
   13714:	ldr	sl, [sl, #36]	; 0x24
   13718:	cmp	sl, #0
   1371c:	beq	14150 <__assert_fail@plt+0x2208>
   13720:	ldr	r3, [sl, #8]
   13724:	cmn	r3, #1
   13728:	beq	14050 <__assert_fail@plt+0x2108>
   1372c:	mov	r1, sl
   13730:	ldr	r0, [sp, #8]
   13734:	bl	12240 <__assert_fail@plt+0x2f8>
   13738:	mov	r7, r0
   1373c:	mov	r1, sl
   13740:	ldr	r0, [sp, #12]
   13744:	bl	12240 <__assert_fail@plt+0x2f8>
   13748:	mov	r5, r0
   1374c:	ldr	r3, [sl]
   13750:	cmn	r3, #1
   13754:	beq	1407c <__assert_fail@plt+0x2134>
   13758:	mov	r1, sl
   1375c:	ldr	r0, [sp, #8]
   13760:	bl	12070 <__assert_fail@plt+0x128>
   13764:	mov	r9, r0
   13768:	mov	r1, sl
   1376c:	ldr	r0, [sp, #12]
   13770:	bl	12070 <__assert_fail@plt+0x128>
   13774:	mov	r6, r0
   13778:	ldr	r4, [sl, #20]
   1377c:	ldr	r8, [sl, #16]
   13780:	cmp	r9, r7
   13784:	movcs	r2, r9
   13788:	movcc	r2, r7
   1378c:	cmp	r6, r5
   13790:	movcs	r5, r6
   13794:	sub	r7, r2, r9
   13798:	sub	r3, r5, r6
   1379c:	str	r3, [sp]
   137a0:	ldrb	r3, [fp, #1299]	; 0x513
   137a4:	cmp	r3, #0
   137a8:	bne	1365c <__assert_fail@plt+0x1714>
   137ac:	ldrb	r3, [sl, #26]
   137b0:	cmp	r3, #0
   137b4:	bne	1365c <__assert_fail@plt+0x1714>
   137b8:	ldrh	r3, [sl, #28]
   137bc:	cmp	r3, #0
   137c0:	bne	1365c <__assert_fail@plt+0x1714>
   137c4:	ldrb	r3, [sl, #30]
   137c8:	cmp	r3, #0
   137cc:	bne	1365c <__assert_fail@plt+0x1714>
   137d0:	ldrb	r3, [sl, #27]
   137d4:	cmp	r3, #0
   137d8:	bne	1365c <__assert_fail@plt+0x1714>
   137dc:	ldrb	r3, [sl, #32]
   137e0:	cmp	r3, #0
   137e4:	bne	1365c <__assert_fail@plt+0x1714>
   137e8:	cmp	r8, #0
   137ec:	beq	13fac <__assert_fail@plt+0x2064>
   137f0:	cmp	r4, #0
   137f4:	moveq	r0, r5
   137f8:	movne	r0, r5
   137fc:	bne	13e80 <__assert_fail@plt+0x1f38>
   13800:	b	13f30 <__assert_fail@plt+0x1fe8>
   13804:	ldr	r3, [sp]
   13808:	add	r0, r7, r3
   1380c:	add	r0, r0, #2
   13810:	cmp	r0, #4000	; 0xfa0
   13814:	movls	r3, #0
   13818:	strls	r3, [sp, #32]
   1381c:	addls	r0, sp, #424	; 0x1a8
   13820:	bhi	13844 <__assert_fail@plt+0x18fc>
   13824:	add	r1, r7, #1
   13828:	add	r1, r0, r1
   1382c:	cmp	r7, #0
   13830:	beq	13894 <__assert_fail@plt+0x194c>
   13834:	mov	r3, r9
   13838:	add	r9, r9, r7
   1383c:	mov	r7, #0
   13840:	b	1386c <__assert_fail@plt+0x1924>
   13844:	bl	21070 <__assert_fail@plt+0xf128>
   13848:	str	r0, [sp, #32]
   1384c:	b	13824 <__assert_fail@plt+0x18dc>
   13850:	ldrb	r2, [r3]
   13854:	ldrb	r2, [r4, r2]
   13858:	strb	r2, [r0, r7]
   1385c:	add	r7, r7, #1
   13860:	add	r3, r3, #1
   13864:	cmp	r9, r3
   13868:	beq	13894 <__assert_fail@plt+0x194c>
   1386c:	cmp	r8, #0
   13870:	beq	13850 <__assert_fail@plt+0x1908>
   13874:	ldrb	r2, [r3]
   13878:	ldrb	r2, [r8, r2]
   1387c:	cmp	r2, #0
   13880:	bne	13860 <__assert_fail@plt+0x1918>
   13884:	cmp	r4, #0
   13888:	bne	13850 <__assert_fail@plt+0x1908>
   1388c:	ldrb	r2, [r3]
   13890:	b	13858 <__assert_fail@plt+0x1910>
   13894:	mov	r3, #0
   13898:	strb	r3, [r0, r7]
   1389c:	ldr	r2, [sp]
   138a0:	cmp	r2, r3
   138a4:	beq	13900 <__assert_fail@plt+0x19b8>
   138a8:	mov	r3, r6
   138ac:	add	r6, r6, r2
   138b0:	mov	r2, #0
   138b4:	b	138d4 <__assert_fail@plt+0x198c>
   138b8:	ldrb	ip, [r3]
   138bc:	ldrb	ip, [r4, ip]
   138c0:	strb	ip, [r1, r2]
   138c4:	add	r2, r2, #1
   138c8:	add	r3, r3, #1
   138cc:	cmp	r6, r3
   138d0:	beq	138fc <__assert_fail@plt+0x19b4>
   138d4:	cmp	r8, #0
   138d8:	beq	138b8 <__assert_fail@plt+0x1970>
   138dc:	ldrb	ip, [r3]
   138e0:	ldrb	ip, [r8, ip]
   138e4:	cmp	ip, #0
   138e8:	bne	138c8 <__assert_fail@plt+0x1980>
   138ec:	cmp	r4, #0
   138f0:	bne	138b8 <__assert_fail@plt+0x1970>
   138f4:	ldrb	ip, [r3]
   138f8:	b	138c0 <__assert_fail@plt+0x1978>
   138fc:	str	r2, [sp]
   13900:	mov	r3, #0
   13904:	ldr	r2, [sp]
   13908:	strb	r3, [r1, r2]
   1390c:	mov	r6, r1
   13910:	mov	r9, r0
   13914:	b	13684 <__assert_fail@plt+0x173c>
   13918:	mov	r0, r9
   1391c:	b	136b4 <__assert_fail@plt+0x176c>
   13920:	mov	r1, r6
   13924:	b	136d8 <__assert_fail@plt+0x1790>
   13928:	ldrb	r3, [sl, #28]
   1392c:	cmp	r3, #0
   13930:	bne	139c4 <__assert_fail@plt+0x1a7c>
   13934:	ldrb	r3, [sl, #29]
   13938:	cmp	r3, #0
   1393c:	beq	13ac8 <__assert_fail@plt+0x1b80>
   13940:	ldrb	r3, [r9]
   13944:	ldrb	r3, [fp, r3]
   13948:	cmp	r3, #0
   1394c:	beq	13ab8 <__assert_fail@plt+0x1b70>
   13950:	mov	r4, r9
   13954:	ldrb	r3, [r4, #1]!
   13958:	ldrb	r3, [fp, r3]
   1395c:	cmp	r3, #0
   13960:	bne	13954 <__assert_fail@plt+0x1a0c>
   13964:	ldrb	r3, [r6]
   13968:	ldrb	r3, [fp, r3]
   1396c:	cmp	r3, #0
   13970:	beq	13ac0 <__assert_fail@plt+0x1b78>
   13974:	mov	r5, r6
   13978:	ldrb	r3, [r5, #1]!
   1397c:	ldrb	r3, [fp, r3]
   13980:	cmp	r3, #0
   13984:	bne	13978 <__assert_fail@plt+0x1a30>
   13988:	mov	r0, r4
   1398c:	bl	124f4 <__assert_fail@plt+0x5ac>
   13990:	mov	r8, r0
   13994:	mov	r0, r5
   13998:	bl	124f4 <__assert_fail@plt+0x5ac>
   1399c:	subs	r3, r8, r0
   139a0:	str	r3, [sp, #4]
   139a4:	bne	136e8 <__assert_fail@plt+0x17a0>
   139a8:	ldr	r3, [fp, #256]	; 0x100
   139ac:	ldrb	r2, [fp, #260]	; 0x104
   139b0:	mov	r1, r5
   139b4:	mov	r0, r4
   139b8:	bl	20514 <__assert_fail@plt+0xe5cc>
   139bc:	str	r0, [sp, #4]
   139c0:	b	136e8 <__assert_fail@plt+0x17a0>
   139c4:	add	r1, sp, #76	; 0x4c
   139c8:	mov	r0, r9
   139cc:	bl	11b1c <strtold@plt>
   139d0:	vmov.f64	d8, d0
   139d4:	add	r1, sp, #80	; 0x50
   139d8:	mov	r0, r6
   139dc:	bl	11b1c <strtold@plt>
   139e0:	ldr	r3, [sp, #76]	; 0x4c
   139e4:	cmp	r9, r3
   139e8:	beq	13a80 <__assert_fail@plt+0x1b38>
   139ec:	ldr	r3, [sp, #80]	; 0x50
   139f0:	cmp	r6, r3
   139f4:	beq	13a94 <__assert_fail@plt+0x1b4c>
   139f8:	vcmpe.f64	d8, d0
   139fc:	vmrs	APSR_nzcv, fpscr
   13a00:	bmi	13aa0 <__assert_fail@plt+0x1b58>
   13a04:	movgt	r3, #1
   13a08:	strgt	r3, [sp, #4]
   13a0c:	bgt	136e8 <__assert_fail@plt+0x17a0>
   13a10:	vcmp.f64	d8, d0
   13a14:	vmrs	APSR_nzcv, fpscr
   13a18:	moveq	r3, #0
   13a1c:	streq	r3, [sp, #4]
   13a20:	beq	136e8 <__assert_fail@plt+0x17a0>
   13a24:	vcmp.f64	d0, d0
   13a28:	vmrs	APSR_nzcv, fpscr
   13a2c:	beq	13aac <__assert_fail@plt+0x1b64>
   13a30:	vcmp.f64	d8, d8
   13a34:	vmrs	APSR_nzcv, fpscr
   13a38:	moveq	r3, #1
   13a3c:	streq	r3, [sp, #4]
   13a40:	beq	136e8 <__assert_fail@plt+0x17a0>
   13a44:	mov	r1, #0
   13a48:	mov	r0, r9
   13a4c:	bl	11b1c <strtold@plt>
   13a50:	vstr	d0, [sp, #112]	; 0x70
   13a54:	mov	r1, #0
   13a58:	mov	r0, r6
   13a5c:	bl	11b1c <strtold@plt>
   13a60:	add	r1, sp, #4416	; 0x1140
   13a64:	add	r1, r1, #8
   13a68:	vstr	d0, [r1]
   13a6c:	mov	r2, #8
   13a70:	add	r0, sp, #112	; 0x70
   13a74:	bl	11b40 <memcmp@plt>
   13a78:	str	r0, [sp, #4]
   13a7c:	b	136e8 <__assert_fail@plt+0x17a0>
   13a80:	ldr	r8, [sp, #80]	; 0x50
   13a84:	subs	r3, r8, r6
   13a88:	mvnne	r3, #0
   13a8c:	str	r3, [sp, #4]
   13a90:	b	136e8 <__assert_fail@plt+0x17a0>
   13a94:	mov	r3, #1
   13a98:	str	r3, [sp, #4]
   13a9c:	b	136e8 <__assert_fail@plt+0x17a0>
   13aa0:	mvn	r3, #0
   13aa4:	str	r3, [sp, #4]
   13aa8:	b	136e8 <__assert_fail@plt+0x17a0>
   13aac:	mvn	r3, #0
   13ab0:	str	r3, [sp, #4]
   13ab4:	b	136e8 <__assert_fail@plt+0x17a0>
   13ab8:	mov	r4, r9
   13abc:	b	13964 <__assert_fail@plt+0x1a1c>
   13ac0:	mov	r5, r6
   13ac4:	b	13988 <__assert_fail@plt+0x1a40>
   13ac8:	ldrb	r3, [sl, #30]
   13acc:	cmp	r3, #0
   13ad0:	bne	13b00 <__assert_fail@plt+0x1bb8>
   13ad4:	ldrb	r3, [sl, #27]
   13ad8:	cmp	r3, #0
   13adc:	bne	13b28 <__assert_fail@plt+0x1be0>
   13ae0:	ldrb	r3, [sl, #32]
   13ae4:	cmp	r3, #0
   13ae8:	beq	13de8 <__assert_fail@plt+0x1ea0>
   13aec:	mov	r1, r6
   13af0:	mov	r0, r9
   13af4:	bl	1b3b8 <__assert_fail@plt+0x9470>
   13af8:	str	r0, [sp, #4]
   13afc:	b	136e8 <__assert_fail@plt+0x17a0>
   13b00:	mov	r1, #0
   13b04:	mov	r0, r9
   13b08:	bl	12550 <__assert_fail@plt+0x608>
   13b0c:	mov	r8, r0
   13b10:	mov	r1, #0
   13b14:	mov	r0, r6
   13b18:	bl	12550 <__assert_fail@plt+0x608>
   13b1c:	sub	r3, r8, r0
   13b20:	str	r3, [sp, #4]
   13b24:	b	136e8 <__assert_fail@plt+0x17a0>
   13b28:	add	r4, sp, #268	; 0x10c
   13b2c:	mov	r5, #156	; 0x9c
   13b30:	mov	r2, r5
   13b34:	add	r1, fp, #1296	; 0x510
   13b38:	add	r1, r1, #4
   13b3c:	mov	r0, r4
   13b40:	bl	11ac8 <memcpy@plt>
   13b44:	mov	r2, r5
   13b48:	mov	r1, r4
   13b4c:	add	r0, sp, #112	; 0x70
   13b50:	bl	11ac8 <memcpy@plt>
   13b54:	ldrb	r3, [fp, #1299]	; 0x513
   13b58:	cmp	r3, #0
   13b5c:	beq	14180 <__assert_fail@plt+0x2238>
   13b60:	add	r2, r9, r7
   13b64:	ldr	r3, [sp]
   13b68:	add	r1, r6, r3
   13b6c:	add	r3, r7, r3
   13b70:	add	r3, r3, r3, lsl #1
   13b74:	add	r3, r3, #2
   13b78:	str	r3, [sp, #40]	; 0x28
   13b7c:	mov	r4, r9
   13b80:	mov	r3, #0
   13b84:	str	r3, [sp, #36]	; 0x24
   13b88:	mov	r5, #4000	; 0xfa0
   13b8c:	add	r0, sp, #4416	; 0x1140
   13b90:	add	r0, r0, #8
   13b94:	str	r0, [sp, #28]
   13b98:	str	r3, [sp, #4]
   13b9c:	str	r3, [sp, #52]	; 0x34
   13ba0:	str	sl, [sp, #56]	; 0x38
   13ba4:	str	r9, [sp, #60]	; 0x3c
   13ba8:	str	r6, [sp, #64]	; 0x40
   13bac:	str	r7, [sp, #68]	; 0x44
   13bb0:	mov	r7, r2
   13bb4:	mov	sl, r1
   13bb8:	b	13d50 <__assert_fail@plt+0x1e08>
   13bbc:	add	r5, r5, r5, lsl #1
   13bc0:	lsr	r5, r5, #1
   13bc4:	cmp	r3, r5
   13bc8:	movcs	r5, r3
   13bcc:	ldr	r0, [sp, #36]	; 0x24
   13bd0:	bl	1b778 <__assert_fail@plt+0x9830>
   13bd4:	mov	r0, r5
   13bd8:	bl	21f58 <__assert_fail@plt+0x10010>
   13bdc:	subs	r3, r0, #0
   13be0:	str	r3, [sp, #36]	; 0x24
   13be4:	moveq	r5, #4000	; 0xfa0
   13be8:	addeq	r3, sp, #4416	; 0x1140
   13bec:	addeq	r3, r3, #8
   13bf0:	ldrne	r3, [sp, #36]	; 0x24
   13bf4:	str	r3, [sp, #28]
   13bf8:	b	13d5c <__assert_fail@plt+0x1e14>
   13bfc:	mov	r2, r5
   13c00:	mov	r1, r4
   13c04:	ldr	r0, [sp, #28]
   13c08:	bl	13514 <__assert_fail@plt+0x15cc>
   13c0c:	add	r8, r0, #1
   13c10:	cmp	sl, r6
   13c14:	bls	14310 <__assert_fail@plt+0x23c8>
   13c18:	cmp	r5, r8
   13c1c:	bcs	13c3c <__assert_fail@plt+0x1cf4>
   13c20:	mov	r2, #0
   13c24:	mov	r1, r6
   13c28:	mov	r0, r2
   13c2c:	bl	13514 <__assert_fail@plt+0x15cc>
   13c30:	add	r9, r0, #1
   13c34:	b	13c68 <__assert_fail@plt+0x1d20>
   13c38:	mov	r8, #0
   13c3c:	sub	r2, r5, r8
   13c40:	mov	r1, r6
   13c44:	ldr	r3, [sp, #28]
   13c48:	add	r0, r3, r8
   13c4c:	bl	13514 <__assert_fail@plt+0x15cc>
   13c50:	add	r9, r0, #1
   13c54:	cmp	r5, r8
   13c58:	bcc	13c68 <__assert_fail@plt+0x1d20>
   13c5c:	add	r3, r9, r8
   13c60:	cmp	r5, r3
   13c64:	bcs	13d74 <__assert_fail@plt+0x1e2c>
   13c68:	add	r5, r8, r9
   13c6c:	ldr	r3, [sp, #48]	; 0x30
   13c70:	cmp	r5, r3
   13c74:	addls	r5, r5, r5, lsl #1
   13c78:	lsrls	r5, r5, #1
   13c7c:	ldr	r0, [sp, #36]	; 0x24
   13c80:	bl	1b778 <__assert_fail@plt+0x9830>
   13c84:	mov	r0, r5
   13c88:	bl	21070 <__assert_fail@plt+0xf128>
   13c8c:	str	r0, [sp, #28]
   13c90:	cmp	r7, r4
   13c94:	bhi	13d98 <__assert_fail@plt+0x1e50>
   13c98:	cmp	sl, r6
   13c9c:	bhi	13da8 <__assert_fail@plt+0x1e60>
   13ca0:	cmp	r7, r4
   13ca4:	bhi	142f4 <__assert_fail@plt+0x23ac>
   13ca8:	ldr	r3, [sp, #28]
   13cac:	str	r3, [sp, #36]	; 0x24
   13cb0:	cmp	sl, r6
   13cb4:	bls	14248 <__assert_fail@plt+0x2300>
   13cb8:	mov	r0, r6
   13cbc:	bl	11d50 <strlen@plt>
   13cc0:	add	r0, r0, #1
   13cc4:	add	r6, r6, r0
   13cc8:	cmp	r7, r4
   13ccc:	cmpls	sl, r6
   13cd0:	bls	13dd0 <__assert_fail@plt+0x1e88>
   13cd4:	add	r2, sp, #112	; 0x70
   13cd8:	mov	r1, r8
   13cdc:	ldr	r0, [sp, #28]
   13ce0:	bl	1aeb8 <__assert_fail@plt+0x8f70>
   13ce4:	ldr	r3, [sp, #28]
   13ce8:	add	r2, r3, r8
   13cec:	mov	ip, r2
   13cf0:	add	r2, sp, #268	; 0x10c
   13cf4:	mov	r1, r9
   13cf8:	str	ip, [sp, #44]	; 0x2c
   13cfc:	mov	r0, ip
   13d00:	bl	1aeb8 <__assert_fail@plt+0x8f70>
   13d04:	ldr	r2, [sp, #4]
   13d08:	cmp	r2, #0
   13d0c:	bne	13d50 <__assert_fail@plt+0x1e08>
   13d10:	cmp	r8, r9
   13d14:	movcc	r2, r8
   13d18:	movcs	r2, r9
   13d1c:	ldr	r1, [sp, #44]	; 0x2c
   13d20:	ldr	r0, [sp, #28]
   13d24:	bl	11b40 <memcmp@plt>
   13d28:	subs	r3, r0, #0
   13d2c:	str	r3, [sp, #4]
   13d30:	bne	13d50 <__assert_fail@plt+0x1e08>
   13d34:	cmp	r8, r9
   13d38:	movhi	r2, #1
   13d3c:	movls	r2, #0
   13d40:	movcc	r3, #1
   13d44:	movcs	r3, #0
   13d48:	sub	r3, r2, r3
   13d4c:	str	r3, [sp, #4]
   13d50:	ldr	r3, [sp, #40]	; 0x28
   13d54:	cmp	r3, r5
   13d58:	bhi	13bbc <__assert_fail@plt+0x1c74>
   13d5c:	cmp	r7, r4
   13d60:	bhi	13bfc <__assert_fail@plt+0x1cb4>
   13d64:	cmp	sl, r6
   13d68:	bhi	13c38 <__assert_fail@plt+0x1cf0>
   13d6c:	mov	r9, #0
   13d70:	ldr	r8, [sp, #52]	; 0x34
   13d74:	cmp	r7, r4
   13d78:	bls	13cb0 <__assert_fail@plt+0x1d68>
   13d7c:	mov	r0, r4
   13d80:	bl	11d50 <strlen@plt>
   13d84:	add	r0, r0, #1
   13d88:	add	r4, r4, r0
   13d8c:	cmp	sl, r6
   13d90:	bls	13cc8 <__assert_fail@plt+0x1d80>
   13d94:	b	13cb8 <__assert_fail@plt+0x1d70>
   13d98:	mov	r2, r8
   13d9c:	mov	r1, r4
   13da0:	bl	11d68 <strxfrm@plt>
   13da4:	b	13c98 <__assert_fail@plt+0x1d50>
   13da8:	mov	r2, r9
   13dac:	mov	r1, r6
   13db0:	ldr	r3, [sp, #28]
   13db4:	add	r0, r3, r8
   13db8:	bl	11d68 <strxfrm@plt>
   13dbc:	cmp	r7, r4
   13dc0:	bhi	142d8 <__assert_fail@plt+0x2390>
   13dc4:	ldr	r3, [sp, #28]
   13dc8:	str	r3, [sp, #36]	; 0x24
   13dcc:	b	13cb0 <__assert_fail@plt+0x1d68>
   13dd0:	ldr	sl, [sp, #56]	; 0x38
   13dd4:	ldr	r6, [sp, #64]	; 0x40
   13dd8:	ldr	r7, [sp, #68]	; 0x44
   13ddc:	str	r9, [sp, #40]	; 0x28
   13de0:	ldr	r9, [sp, #60]	; 0x3c
   13de4:	b	1425c <__assert_fail@plt+0x2314>
   13de8:	cmp	r7, #0
   13dec:	bne	13e08 <__assert_fail@plt+0x1ec0>
   13df0:	ldr	r3, [sp]
   13df4:	adds	r8, r3, #0
   13df8:	movne	r8, #1
   13dfc:	rsb	r3, r8, #0
   13e00:	str	r3, [sp, #4]
   13e04:	b	136e8 <__assert_fail@plt+0x17a0>
   13e08:	ldr	r3, [sp]
   13e0c:	cmp	r3, #0
   13e10:	moveq	r3, #1
   13e14:	streq	r3, [sp, #4]
   13e18:	beq	136e8 <__assert_fail@plt+0x17a0>
   13e1c:	add	r3, r3, #1
   13e20:	mov	r2, r6
   13e24:	add	r1, r7, #1
   13e28:	mov	r0, r9
   13e2c:	bl	216a4 <__assert_fail@plt+0xf75c>
   13e30:	str	r0, [sp, #4]
   13e34:	b	136e8 <__assert_fail@plt+0x17a0>
   13e38:	ldr	r0, [sp, #32]
   13e3c:	bl	1b778 <__assert_fail@plt+0x9830>
   13e40:	b	13708 <__assert_fail@plt+0x17c0>
   13e44:	cmp	r5, r6
   13e48:	movhi	r3, #0
   13e4c:	movls	r3, #1
   13e50:	cmp	ip, r2
   13e54:	orrcs	r3, r3, #1
   13e58:	cmp	r3, #0
   13e5c:	bne	13edc <__assert_fail@plt+0x1f94>
   13e60:	ldrb	r3, [ip]
   13e64:	ldrb	r3, [r4, r3]
   13e68:	ldrb	r1, [r6]
   13e6c:	ldrb	r1, [r4, r1]
   13e70:	subs	r3, r3, r1
   13e74:	bne	14134 <__assert_fail@plt+0x21ec>
   13e78:	add	r6, r6, #1
   13e7c:	add	r9, r9, #1
   13e80:	mov	ip, r9
   13e84:	cmp	r9, r2
   13e88:	bcs	13e9c <__assert_fail@plt+0x1f54>
   13e8c:	ldrb	r3, [r9]
   13e90:	ldrb	r3, [r8, r3]
   13e94:	cmp	r3, #0
   13e98:	bne	13e7c <__assert_fail@plt+0x1f34>
   13e9c:	cmp	r6, r5
   13ea0:	bcs	13edc <__assert_fail@plt+0x1f94>
   13ea4:	ldrb	r3, [r6]
   13ea8:	ldrb	r3, [r8, r3]
   13eac:	cmp	r3, #0
   13eb0:	addne	r3, r6, #1
   13eb4:	beq	13e44 <__assert_fail@plt+0x1efc>
   13eb8:	mov	r6, r3
   13ebc:	cmp	r0, r3
   13ec0:	beq	13e44 <__assert_fail@plt+0x1efc>
   13ec4:	add	r3, r3, #1
   13ec8:	ldrb	r1, [r6]
   13ecc:	ldrb	r1, [r8, r1]
   13ed0:	cmp	r1, #0
   13ed4:	bne	13eb8 <__assert_fail@plt+0x1f70>
   13ed8:	b	13e44 <__assert_fail@plt+0x1efc>
   13edc:	cmp	r5, r6
   13ee0:	movls	r5, #0
   13ee4:	movhi	r5, #1
   13ee8:	cmp	ip, r2
   13eec:	rsbcs	r5, r5, #0
   13ef0:	rsbcc	r5, r5, #1
   13ef4:	str	r5, [sp, #4]
   13ef8:	b	13708 <__assert_fail@plt+0x17c0>
   13efc:	cmp	r5, r6
   13f00:	movhi	r3, #0
   13f04:	movls	r3, #1
   13f08:	cmp	ip, r2
   13f0c:	orrcs	r3, r3, #1
   13f10:	cmp	r3, #0
   13f14:	bne	13f8c <__assert_fail@plt+0x2044>
   13f18:	ldrb	r3, [ip]
   13f1c:	ldrb	r1, [r6]
   13f20:	subs	r3, r3, r1
   13f24:	bne	14178 <__assert_fail@plt+0x2230>
   13f28:	add	r6, r6, #1
   13f2c:	add	r9, r9, #1
   13f30:	mov	ip, r9
   13f34:	cmp	r9, r2
   13f38:	bcs	13f4c <__assert_fail@plt+0x2004>
   13f3c:	ldrb	r3, [r9]
   13f40:	ldrb	r3, [r8, r3]
   13f44:	cmp	r3, #0
   13f48:	bne	13f2c <__assert_fail@plt+0x1fe4>
   13f4c:	cmp	r6, r5
   13f50:	bcs	13f8c <__assert_fail@plt+0x2044>
   13f54:	ldrb	r3, [r6]
   13f58:	ldrb	r3, [r8, r3]
   13f5c:	cmp	r3, #0
   13f60:	addne	r3, r6, #1
   13f64:	beq	13efc <__assert_fail@plt+0x1fb4>
   13f68:	mov	r6, r3
   13f6c:	cmp	r3, r0
   13f70:	beq	13efc <__assert_fail@plt+0x1fb4>
   13f74:	add	r3, r3, #1
   13f78:	ldrb	r1, [r6]
   13f7c:	ldrb	r1, [r8, r1]
   13f80:	cmp	r1, #0
   13f84:	bne	13f68 <__assert_fail@plt+0x2020>
   13f88:	b	13efc <__assert_fail@plt+0x1fb4>
   13f8c:	cmp	r5, r6
   13f90:	movls	r5, #0
   13f94:	movhi	r5, #1
   13f98:	cmp	ip, r2
   13f9c:	rsbcs	r5, r5, #0
   13fa0:	rsbcc	r5, r5, #1
   13fa4:	str	r5, [sp, #4]
   13fa8:	b	13708 <__assert_fail@plt+0x17c0>
   13fac:	cmp	r7, #0
   13fb0:	bne	13fcc <__assert_fail@plt+0x2084>
   13fb4:	ldr	r3, [sp]
   13fb8:	adds	r8, r3, #0
   13fbc:	movne	r8, #1
   13fc0:	rsb	r3, r8, #0
   13fc4:	str	r3, [sp, #4]
   13fc8:	b	13708 <__assert_fail@plt+0x17c0>
   13fcc:	ldr	r3, [sp]
   13fd0:	cmp	r3, #0
   13fd4:	beq	1411c <__assert_fail@plt+0x21d4>
   13fd8:	cmp	r4, #0
   13fdc:	bne	14024 <__assert_fail@plt+0x20dc>
   13fe0:	ldr	r3, [sp]
   13fe4:	cmp	r7, r3
   13fe8:	movcc	r2, r7
   13fec:	movcs	r2, r3
   13ff0:	mov	r1, r6
   13ff4:	mov	r0, r9
   13ff8:	bl	11b40 <memcmp@plt>
   13ffc:	subs	r3, r0, #0
   14000:	str	r3, [sp, #4]
   14004:	bne	14138 <__assert_fail@plt+0x21f0>
   14008:	ldr	r3, [sp]
   1400c:	cmp	r7, r3
   14010:	bcc	14128 <__assert_fail@plt+0x21e0>
   14014:	subs	r3, r7, r3
   14018:	movne	r3, #1
   1401c:	str	r3, [sp, #4]
   14020:	b	13708 <__assert_fail@plt+0x17c0>
   14024:	cmp	r9, r2
   14028:	cmpcc	r6, r5
   1402c:	bcs	14008 <__assert_fail@plt+0x20c0>
   14030:	ldrb	r3, [r9], #1
   14034:	ldrb	r3, [r4, r3]
   14038:	ldrb	r1, [r6], #1
   1403c:	ldrb	r1, [r4, r1]
   14040:	subs	r3, r3, r1
   14044:	beq	14024 <__assert_fail@plt+0x20dc>
   14048:	str	r3, [sp, #4]
   1404c:	b	14138 <__assert_fail@plt+0x21f0>
   14050:	ldr	r2, [sp, #8]
   14054:	ldr	r7, [r2, #4]
   14058:	sub	r3, r7, #1
   1405c:	ldr	r7, [r2]
   14060:	add	r7, r7, r3
   14064:	ldr	r2, [sp, #12]
   14068:	ldr	r5, [r2, #4]
   1406c:	sub	r3, r5, #1
   14070:	ldr	r5, [r2]
   14074:	add	r5, r5, r3
   14078:	b	1374c <__assert_fail@plt+0x1804>
   1407c:	ldr	r3, [sp, #8]
   14080:	ldr	r9, [r3]
   14084:	ldr	r3, [sp, #12]
   14088:	ldr	r6, [r3]
   1408c:	ldrb	r3, [sl, #24]
   14090:	cmp	r3, #0
   14094:	beq	13778 <__assert_fail@plt+0x1830>
   14098:	cmp	r7, r9
   1409c:	bls	140d8 <__assert_fail@plt+0x2190>
   140a0:	ldrb	r3, [r9]
   140a4:	ldrb	r3, [fp, r3]
   140a8:	cmp	r3, #0
   140ac:	beq	140d8 <__assert_fail@plt+0x2190>
   140b0:	add	r3, r9, #1
   140b4:	mov	r1, r7
   140b8:	mov	r9, r3
   140bc:	cmp	r1, r3
   140c0:	beq	140d8 <__assert_fail@plt+0x2190>
   140c4:	add	r3, r3, #1
   140c8:	ldrb	r2, [r9]
   140cc:	ldrb	r2, [fp, r2]
   140d0:	cmp	r2, #0
   140d4:	bne	140b8 <__assert_fail@plt+0x2170>
   140d8:	cmp	r5, r6
   140dc:	bls	13778 <__assert_fail@plt+0x1830>
   140e0:	ldrb	r3, [r6]
   140e4:	ldrb	r3, [fp, r3]
   140e8:	cmp	r3, #0
   140ec:	addne	r3, r6, #1
   140f0:	movne	r1, r5
   140f4:	beq	13778 <__assert_fail@plt+0x1830>
   140f8:	mov	r6, r3
   140fc:	cmp	r1, r3
   14100:	beq	13778 <__assert_fail@plt+0x1830>
   14104:	add	r3, r3, #1
   14108:	ldrb	r2, [r6]
   1410c:	ldrb	r2, [fp, r2]
   14110:	cmp	r2, #0
   14114:	bne	140f8 <__assert_fail@plt+0x21b0>
   14118:	b	13778 <__assert_fail@plt+0x1830>
   1411c:	mov	r3, #1
   14120:	str	r3, [sp, #4]
   14124:	b	14138 <__assert_fail@plt+0x21f0>
   14128:	mvn	r3, #0
   1412c:	str	r3, [sp, #4]
   14130:	b	14138 <__assert_fail@plt+0x21f0>
   14134:	str	r3, [sp, #4]
   14138:	ldrb	r3, [sl, #31]
   1413c:	cmp	r3, #0
   14140:	beq	14150 <__assert_fail@plt+0x2208>
   14144:	ldr	r3, [sp, #4]
   14148:	rsb	r3, r3, #0
   1414c:	str	r3, [sp, #4]
   14150:	ldr	r0, [sp, #4]
   14154:	add	sp, sp, #8384	; 0x20c0
   14158:	add	sp, sp, #44	; 0x2c
   1415c:	vpop	{d8}
   14160:	ldrd	r4, [sp]
   14164:	ldrd	r6, [sp, #8]
   14168:	ldrd	r8, [sp, #16]
   1416c:	ldrd	sl, [sp, #24]
   14170:	add	sp, sp, #32
   14174:	pop	{pc}		; (ldr pc, [sp], #4)
   14178:	str	r3, [sp, #4]
   1417c:	b	14138 <__assert_fail@plt+0x21f0>
   14180:	add	r2, sp, #112	; 0x70
   14184:	mov	r1, r7
   14188:	mov	r0, r9
   1418c:	bl	1aeb8 <__assert_fail@plt+0x8f70>
   14190:	add	r1, sp, #80	; 0x50
   14194:	add	r0, sp, #112	; 0x70
   14198:	bl	1ae04 <__assert_fail@plt+0x8ebc>
   1419c:	add	r5, sp, #268	; 0x10c
   141a0:	mov	r2, r5
   141a4:	ldr	r1, [sp]
   141a8:	mov	r0, r6
   141ac:	bl	1aeb8 <__assert_fail@plt+0x8f70>
   141b0:	add	r4, sp, #96	; 0x60
   141b4:	mov	r1, r4
   141b8:	mov	r0, r5
   141bc:	bl	1ae04 <__assert_fail@plt+0x8ebc>
   141c0:	mov	r2, #16
   141c4:	mov	r1, r4
   141c8:	add	r0, sp, #80	; 0x50
   141cc:	bl	11b40 <memcmp@plt>
   141d0:	subs	r3, r0, #0
   141d4:	str	r3, [sp, #4]
   141d8:	movne	r3, #0
   141dc:	strne	r3, [sp, #36]	; 0x24
   141e0:	bne	142cc <__assert_fail@plt+0x2384>
   141e4:	ldr	r3, [sp]
   141e8:	str	r3, [sp, #40]	; 0x28
   141ec:	str	r6, [sp, #44]	; 0x2c
   141f0:	mov	r8, r7
   141f4:	str	r9, [sp, #28]
   141f8:	mov	r3, #0
   141fc:	str	r3, [sp, #36]	; 0x24
   14200:	ldr	r4, [sp, #40]	; 0x28
   14204:	cmp	r8, r4
   14208:	movcc	r2, r8
   1420c:	movcs	r2, r4
   14210:	ldr	r1, [sp, #44]	; 0x2c
   14214:	ldr	r0, [sp, #28]
   14218:	bl	11b40 <memcmp@plt>
   1421c:	subs	r3, r0, #0
   14220:	str	r3, [sp, #4]
   14224:	bne	142cc <__assert_fail@plt+0x2384>
   14228:	cmp	r8, r4
   1422c:	movhi	r3, #1
   14230:	movls	r3, #0
   14234:	movcc	r8, #1
   14238:	movcs	r8, #0
   1423c:	sub	r3, r3, r8
   14240:	str	r3, [sp, #4]
   14244:	b	142cc <__assert_fail@plt+0x2384>
   14248:	ldr	sl, [sp, #56]	; 0x38
   1424c:	ldr	r6, [sp, #64]	; 0x40
   14250:	ldr	r7, [sp, #68]	; 0x44
   14254:	str	r9, [sp, #40]	; 0x28
   14258:	ldr	r9, [sp, #60]	; 0x3c
   1425c:	ldr	r0, [sp, #28]
   14260:	add	r4, r0, r8
   14264:	str	r4, [sp, #44]	; 0x2c
   14268:	add	r2, sp, #112	; 0x70
   1426c:	mov	r1, r8
   14270:	bl	1aeb8 <__assert_fail@plt+0x8f70>
   14274:	add	r1, sp, #80	; 0x50
   14278:	add	r0, sp, #112	; 0x70
   1427c:	bl	1ae04 <__assert_fail@plt+0x8ebc>
   14280:	add	r5, sp, #268	; 0x10c
   14284:	mov	r2, r5
   14288:	ldr	r1, [sp, #40]	; 0x28
   1428c:	mov	r0, r4
   14290:	bl	1aeb8 <__assert_fail@plt+0x8f70>
   14294:	add	r4, sp, #96	; 0x60
   14298:	mov	r1, r4
   1429c:	mov	r0, r5
   142a0:	bl	1ae04 <__assert_fail@plt+0x8ebc>
   142a4:	mov	r2, #16
   142a8:	mov	r1, r4
   142ac:	add	r0, sp, #80	; 0x50
   142b0:	bl	11b40 <memcmp@plt>
   142b4:	cmp	r0, #0
   142b8:	strne	r0, [sp, #4]
   142bc:	bne	142cc <__assert_fail@plt+0x2384>
   142c0:	ldr	r3, [sp, #4]
   142c4:	cmp	r3, #0
   142c8:	beq	14200 <__assert_fail@plt+0x22b8>
   142cc:	ldr	r0, [sp, #36]	; 0x24
   142d0:	bl	1b778 <__assert_fail@plt+0x9830>
   142d4:	b	136e8 <__assert_fail@plt+0x17a0>
   142d8:	mov	r0, r4
   142dc:	bl	11d50 <strlen@plt>
   142e0:	add	r0, r0, #1
   142e4:	add	r4, r4, r0
   142e8:	ldr	r3, [sp, #28]
   142ec:	str	r3, [sp, #36]	; 0x24
   142f0:	b	13cb8 <__assert_fail@plt+0x1d70>
   142f4:	mov	r0, r4
   142f8:	bl	11d50 <strlen@plt>
   142fc:	add	r0, r0, #1
   14300:	add	r4, r4, r0
   14304:	ldr	r3, [sp, #28]
   14308:	str	r3, [sp, #36]	; 0x24
   1430c:	b	13cc8 <__assert_fail@plt+0x1d80>
   14310:	cmp	r5, r8
   14314:	movcs	r9, #0
   14318:	bcs	13d7c <__assert_fail@plt+0x1e34>
   1431c:	mov	r9, #0
   14320:	b	13c68 <__assert_fail@plt+0x1d20>
   14324:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14328:	strd	r6, [sp, #8]
   1432c:	strd	r8, [sp, #16]
   14330:	str	sl, [sp, #24]
   14334:	str	lr, [sp, #28]
   14338:	mov	r4, r0
   1433c:	mov	r5, r1
   14340:	movw	r3, #25312	; 0x62e0
   14344:	movt	r3, #3
   14348:	ldr	r3, [r3, #1280]	; 0x500
   1434c:	cmp	r3, #0
   14350:	beq	14388 <__assert_fail@plt+0x2440>
   14354:	bl	135f4 <__assert_fail@plt+0x16ac>
   14358:	cmp	r0, #0
   1435c:	bne	143bc <__assert_fail@plt+0x2474>
   14360:	movw	r3, #25312	; 0x62e0
   14364:	movt	r3, #3
   14368:	ldrb	r3, [r3, #1297]	; 0x511
   1436c:	cmp	r3, #0
   14370:	bne	143bc <__assert_fail@plt+0x2474>
   14374:	movw	r3, #25312	; 0x62e0
   14378:	movt	r3, #3
   1437c:	ldrb	r3, [r3, #1298]	; 0x512
   14380:	cmp	r3, #0
   14384:	bne	143bc <__assert_fail@plt+0x2474>
   14388:	ldr	r6, [r4, #4]
   1438c:	ldr	r8, [r5, #4]
   14390:	sub	r7, r8, #1
   14394:	subs	r9, r6, #1
   14398:	bne	143d4 <__assert_fail@plt+0x248c>
   1439c:	adds	r0, r7, #0
   143a0:	movne	r0, #1
   143a4:	rsb	r0, r0, #0
   143a8:	movw	r3, #25312	; 0x62e0
   143ac:	movt	r3, #3
   143b0:	ldrb	r3, [r3, #1456]	; 0x5b0
   143b4:	cmp	r3, #0
   143b8:	rsbne	r0, r0, #0
   143bc:	ldrd	r4, [sp]
   143c0:	ldrd	r6, [sp, #8]
   143c4:	ldrd	r8, [sp, #16]
   143c8:	ldr	sl, [sp, #24]
   143cc:	add	sp, sp, #28
   143d0:	pop	{pc}		; (ldr pc, [sp], #4)
   143d4:	cmp	r7, #0
   143d8:	moveq	r0, #1
   143dc:	beq	143a8 <__assert_fail@plt+0x2460>
   143e0:	movw	r3, #25312	; 0x62e0
   143e4:	movt	r3, #3
   143e8:	ldrb	r3, [r3, #1299]	; 0x513
   143ec:	cmp	r3, #0
   143f0:	bne	1442c <__assert_fail@plt+0x24e4>
   143f4:	cmp	r9, r7
   143f8:	movcc	r2, r9
   143fc:	movcs	r2, r7
   14400:	ldr	r1, [r5]
   14404:	ldr	r0, [r4]
   14408:	bl	11b40 <memcmp@plt>
   1440c:	cmp	r0, #0
   14410:	bne	143a8 <__assert_fail@plt+0x2460>
   14414:	cmp	r9, r7
   14418:	mvncc	r0, #0
   1441c:	bcc	143a8 <__assert_fail@plt+0x2460>
   14420:	subs	r0, r6, r8
   14424:	movne	r0, #1
   14428:	b	143a8 <__assert_fail@plt+0x2460>
   1442c:	mov	r3, r8
   14430:	ldr	r2, [r5]
   14434:	mov	r1, r6
   14438:	ldr	r0, [r4]
   1443c:	bl	216a4 <__assert_fail@plt+0xf75c>
   14440:	b	143a8 <__assert_fail@plt+0x2460>
   14444:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14448:	strd	r6, [sp, #8]
   1444c:	strd	r8, [sp, #16]
   14450:	str	sl, [sp, #24]
   14454:	str	lr, [sp, #28]
   14458:	mov	r4, r0
   1445c:	mov	r5, r2
   14460:	mov	sl, r3
   14464:	cmp	r1, #2
   14468:	beq	144b0 <__assert_fail@plt+0x2568>
   1446c:	mov	r8, r1
   14470:	lsr	r6, r1, #1
   14474:	sub	r9, r1, r6
   14478:	lsl	r7, r6, #4
   1447c:	rsb	r7, r7, #0
   14480:	add	r0, r0, r7
   14484:	cmp	r3, #0
   14488:	beq	145f0 <__assert_fail@plt+0x26a8>
   1448c:	mov	r3, #1
   14490:	add	r2, r2, r7
   14494:	mov	r1, r9
   14498:	bl	14444 <__assert_fail@plt+0x24fc>
   1449c:	cmp	r8, #3
   144a0:	bhi	14648 <__assert_fail@plt+0x2700>
   144a4:	add	r7, r5, r7
   144a8:	sub	r5, r5, #16
   144ac:	b	1454c <__assert_fail@plt+0x2604>
   144b0:	sub	r1, r0, #32
   144b4:	sub	r0, r0, #16
   144b8:	bl	14324 <__assert_fail@plt+0x23dc>
   144bc:	cmp	sl, #0
   144c0:	beq	1450c <__assert_fail@plt+0x25c4>
   144c4:	cmp	r0, #0
   144c8:	movle	r0, #0
   144cc:	movgt	r0, #1
   144d0:	mvn	r3, r0
   144d4:	lsl	r3, r3, #4
   144d8:	add	r1, r4, r3
   144dc:	ldrd	r2, [r3, r4]
   144e0:	strd	r2, [r5, #-16]
   144e4:	ldrd	r2, [r1, #8]
   144e8:	strd	r2, [r5, #-8]
   144ec:	sub	r0, r0, #2
   144f0:	lsl	r0, r0, #4
   144f4:	add	r3, r4, r0
   144f8:	ldrd	r0, [r0, r4]
   144fc:	strd	r0, [r5, #-32]	; 0xffffffe0
   14500:	ldrd	r2, [r3, #8]
   14504:	strd	r2, [r5, #-24]	; 0xffffffe8
   14508:	b	145b8 <__assert_fail@plt+0x2670>
   1450c:	cmp	r0, #0
   14510:	ble	145b8 <__assert_fail@plt+0x2670>
   14514:	sub	lr, r4, #16
   14518:	ldrd	r6, [r4, #-16]
   1451c:	strd	r6, [r5, #-16]
   14520:	ldrd	r2, [r4, #-8]
   14524:	strd	r2, [r5, #-8]
   14528:	ldrd	r0, [r4, #-32]	; 0xffffffe0
   1452c:	strd	r0, [r4, #-16]
   14530:	ldrd	r0, [r4, #-24]	; 0xffffffe8
   14534:	strd	r0, [r4, #-8]
   14538:	strd	r6, [r4, #-32]	; 0xffffffe0
   1453c:	strd	r2, [r4, #-24]	; 0xffffffe8
   14540:	b	145b8 <__assert_fail@plt+0x2670>
   14544:	mov	r7, r8
   14548:	sub	r5, r5, #16
   1454c:	sub	sl, r4, #16
   14550:	sub	r8, r7, #16
   14554:	mov	r1, r8
   14558:	mov	r0, sl
   1455c:	bl	14324 <__assert_fail@plt+0x23dc>
   14560:	cmp	r0, #0
   14564:	ble	145d0 <__assert_fail@plt+0x2688>
   14568:	ldrd	r0, [r7, #-16]
   1456c:	strd	r0, [r5]
   14570:	ldrd	r0, [r7, #-8]
   14574:	strd	r0, [r5, #8]
   14578:	subs	r9, r9, #1
   1457c:	bne	14544 <__assert_fail@plt+0x25fc>
   14580:	lsl	r3, r6, #4
   14584:	rsb	r3, r3, #0
   14588:	sub	r3, r3, #16
   1458c:	add	r4, r4, r3
   14590:	add	r2, r5, r3
   14594:	lsl	r3, r6, #4
   14598:	add	ip, r2, r3
   1459c:	add	lr, r4, r3
   145a0:	ldrd	r0, [r4, r3]
   145a4:	strd	r0, [r2, r3]
   145a8:	ldrd	r0, [lr, #8]
   145ac:	strd	r0, [ip, #8]
   145b0:	subs	r6, r6, #1
   145b4:	bne	14594 <__assert_fail@plt+0x264c>
   145b8:	ldrd	r4, [sp]
   145bc:	ldrd	r6, [sp, #8]
   145c0:	ldrd	r8, [sp, #16]
   145c4:	ldr	sl, [sp, #24]
   145c8:	add	sp, sp, #28
   145cc:	pop	{pc}		; (ldr pc, [sp], #4)
   145d0:	ldrd	r2, [r4, #-16]
   145d4:	strd	r2, [r5]
   145d8:	ldrd	r2, [r4, #-8]
   145dc:	strd	r2, [r5, #8]
   145e0:	subs	r6, r6, #1
   145e4:	beq	145b8 <__assert_fail@plt+0x2670>
   145e8:	mov	r4, sl
   145ec:	b	14548 <__assert_fail@plt+0x2600>
   145f0:	mov	r3, #0
   145f4:	mov	r1, r9
   145f8:	bl	14444 <__assert_fail@plt+0x24fc>
   145fc:	cmp	r8, #3
   14600:	bhi	14624 <__assert_fail@plt+0x26dc>
   14604:	ldrd	r2, [r4, #-16]
   14608:	strd	r2, [r5, #-16]
   1460c:	ldrd	r2, [r4, #-8]
   14610:	strd	r2, [r5, #-8]
   14614:	mov	r3, r5
   14618:	mov	r5, r4
   1461c:	mov	r4, r3
   14620:	b	144a4 <__assert_fail@plt+0x255c>
   14624:	eor	r3, sl, #1
   14628:	mov	r2, r5
   1462c:	mov	r1, r6
   14630:	mov	r0, r4
   14634:	bl	14444 <__assert_fail@plt+0x24fc>
   14638:	mov	r3, r5
   1463c:	mov	r5, r4
   14640:	mov	r4, r3
   14644:	b	144a4 <__assert_fail@plt+0x255c>
   14648:	eor	r3, sl, #1
   1464c:	mov	r2, r5
   14650:	mov	r1, r6
   14654:	mov	r0, r4
   14658:	bl	14444 <__assert_fail@plt+0x24fc>
   1465c:	b	144a4 <__assert_fail@plt+0x255c>
   14660:	strd	r4, [sp, #-16]!
   14664:	str	r6, [sp, #8]
   14668:	str	lr, [sp, #12]
   1466c:	mov	r4, r0
   14670:	mov	r5, r1
   14674:	mov	r6, r2
   14678:	movw	r3, #25312	; 0x62e0
   1467c:	movt	r3, #3
   14680:	ldrb	r3, [r3, #1297]	; 0x511
   14684:	cmp	r3, #0
   14688:	beq	146d0 <__assert_fail@plt+0x2788>
   1468c:	movw	r3, #25312	; 0x62e0
   14690:	movt	r3, #3
   14694:	ldr	r3, [r3, #1460]	; 0x5b4
   14698:	cmp	r3, #0
   1469c:	beq	146b0 <__assert_fail@plt+0x2768>
   146a0:	ldr	r1, [pc, #72]	; 146f0 <__assert_fail@plt+0x27a8>
   146a4:	bl	14324 <__assert_fail@plt+0x23dc>
   146a8:	cmp	r0, #0
   146ac:	beq	146e0 <__assert_fail@plt+0x2798>
   146b0:	movw	r3, #25312	; 0x62e0
   146b4:	movt	r3, #3
   146b8:	movw	r2, #1460	; 0x5b4
   146bc:	add	ip, r3, r2
   146c0:	ldrd	r0, [r4]
   146c4:	strd	r0, [r3, r2]
   146c8:	ldrd	r2, [r4, #8]
   146cc:	strd	r2, [ip, #8]
   146d0:	mov	r2, r6
   146d4:	mov	r1, r5
   146d8:	mov	r0, r4
   146dc:	bl	13108 <__assert_fail@plt+0x11c0>
   146e0:	ldrd	r4, [sp]
   146e4:	ldr	r6, [sp, #8]
   146e8:	add	sp, sp, #12
   146ec:	pop	{pc}		; (ldr pc, [sp], #4)
   146f0:	muleq	r3, r4, r8
   146f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   146f8:	strd	r6, [sp, #8]
   146fc:	strd	r8, [sp, #16]
   14700:	strd	sl, [sp, #24]
   14704:	str	lr, [sp, #32]
   14708:	sub	sp, sp, #44	; 0x2c
   1470c:	ldrb	r3, [r0, #24]
   14710:	str	r3, [sp, #24]
   14714:	cmp	r3, #0
   14718:	bne	149dc <__assert_fail@plt+0x2a94>
   1471c:	str	r2, [sp, #28]
   14720:	str	r1, [sp, #12]
   14724:	mov	r4, r0
   14728:	str	r0, [sp, #16]
   1472c:	movw	r3, #25312	; 0x62e0
   14730:	movt	r3, #3
   14734:	ldr	r7, [r3, #1280]	; 0x500
   14738:	movw	r3, #25060	; 0x61e4
   1473c:	movt	r3, #3
   14740:	ldrb	r1, [r3, #100]	; 0x64
   14744:	str	r1, [sp]
   14748:	ldr	r1, [r0, #20]
   1474c:	str	r1, [sp, #4]
   14750:	ldr	fp, [r3, #104]	; 0x68
   14754:	ldr	r3, [r0, #4]
   14758:	ldr	r2, [r0, #16]
   1475c:	cmp	r3, r2
   14760:	bne	14778 <__assert_fail@plt+0x2830>
   14764:	sub	fp, fp, #18
   14768:	movw	r3, #25312	; 0x62e0
   1476c:	movt	r3, #3
   14770:	str	r3, [sp, #20]
   14774:	b	14968 <__assert_fail@plt+0x2a20>
   14778:	ldr	r0, [r0]
   1477c:	sub	r3, r3, r2
   14780:	add	r1, r0, r3
   14784:	bl	11a80 <memmove@plt>
   14788:	ldr	r3, [r4, #16]
   1478c:	str	r3, [r4, #4]
   14790:	mov	r3, #0
   14794:	str	r3, [r4, #8]
   14798:	b	14764 <__assert_fail@plt+0x281c>
   1479c:	mov	r2, #5
   147a0:	movw	r1, #14096	; 0x3710
   147a4:	movt	r1, #2
   147a8:	mov	r0, #0
   147ac:	bl	11b58 <dcgettext@plt>
   147b0:	ldr	r1, [sp, #28]
   147b4:	bl	12c64 <__assert_fail@plt+0xd1c>
   147b8:	mov	r1, r7
   147bc:	mov	r0, r5
   147c0:	bl	12070 <__assert_fail@plt+0x128>
   147c4:	str	r0, [r5, #8]
   147c8:	mov	r6, r4
   147cc:	sub	r2, r9, r4
   147d0:	ldr	r1, [sp]
   147d4:	mov	r0, r4
   147d8:	bl	11de0 <memchr@plt>
   147dc:	cmp	r0, #0
   147e0:	beq	14874 <__assert_fail@plt+0x292c>
   147e4:	mov	r4, r0
   147e8:	strb	sl, [r4], #1
   147ec:	str	r6, [r5, #-16]!
   147f0:	sub	r3, r4, r6
   147f4:	str	r3, [r5, #4]
   147f8:	cmp	fp, r3
   147fc:	movcc	fp, r3
   14800:	ldr	r3, [sp, #4]
   14804:	sub	r8, r8, r3
   14808:	cmp	r7, #0
   1480c:	beq	147c8 <__assert_fail@plt+0x2880>
   14810:	ldr	r3, [r7, #8]
   14814:	cmn	r3, #1
   14818:	beq	14828 <__assert_fail@plt+0x28e0>
   1481c:	mov	r1, r7
   14820:	mov	r0, r5
   14824:	bl	12240 <__assert_fail@plt+0x2f8>
   14828:	str	r0, [r5, #12]
   1482c:	ldr	r3, [r7]
   14830:	cmn	r3, #1
   14834:	bne	147b8 <__assert_fail@plt+0x2870>
   14838:	ldrb	r3, [r7, #24]
   1483c:	cmp	r3, #0
   14840:	bne	1484c <__assert_fail@plt+0x2904>
   14844:	str	r6, [r5, #8]
   14848:	b	147c8 <__assert_fail@plt+0x2880>
   1484c:	ldrb	r3, [r6]
   14850:	ldr	r2, [sp, #20]
   14854:	ldrb	r3, [r2, r3]
   14858:	cmp	r3, #0
   1485c:	beq	14844 <__assert_fail@plt+0x28fc>
   14860:	ldrb	r3, [r6, #1]!
   14864:	ldrb	r3, [r2, r3]
   14868:	cmp	r3, #0
   1486c:	bne	14860 <__assert_fail@plt+0x2918>
   14870:	b	14844 <__assert_fail@plt+0x28fc>
   14874:	mov	r4, r9
   14878:	ldr	r3, [sp, #16]
   1487c:	ldrb	r3, [r3, #24]
   14880:	cmp	r3, #0
   14884:	bne	14914 <__assert_fail@plt+0x29cc>
   14888:	ldr	r3, [sp, #8]
   1488c:	cmp	r3, r8
   14890:	bcs	14914 <__assert_fail@plt+0x29cc>
   14894:	sub	sl, r8, #1
   14898:	ldr	r3, [sp, #8]
   1489c:	udiv	sl, sl, r3
   148a0:	ldr	r3, [sp, #12]
   148a4:	mov	r2, sl
   148a8:	mov	r1, #1
   148ac:	mov	r0, r4
   148b0:	bl	11ee8 <fread_unlocked@plt>
   148b4:	add	r9, r4, r0
   148b8:	sub	r8, r8, r0
   148bc:	cmp	sl, r0
   148c0:	beq	1490c <__assert_fail@plt+0x29c4>
   148c4:	ldr	r3, [sp, #12]
   148c8:	ldr	r3, [r3]
   148cc:	tst	r3, #32
   148d0:	bne	1479c <__assert_fail@plt+0x2854>
   148d4:	tst	r3, #16
   148d8:	beq	1490c <__assert_fail@plt+0x29c4>
   148dc:	mov	r3, #1
   148e0:	ldr	r2, [sp, #16]
   148e4:	strb	r3, [r2, #24]
   148e8:	ldr	r3, [r2]
   148ec:	cmp	r3, r9
   148f0:	beq	149e4 <__assert_fail@plt+0x2a9c>
   148f4:	cmp	r6, r9
   148f8:	beq	1490c <__assert_fail@plt+0x29c4>
   148fc:	ldrb	r3, [r9, #-1]
   14900:	ldr	r2, [sp]
   14904:	cmp	r3, r2
   14908:	strbne	r2, [r9], #1
   1490c:	mov	sl, #0
   14910:	b	147cc <__assert_fail@plt+0x2884>
   14914:	ldr	r1, [sp, #16]
   14918:	ldr	r0, [r1]
   1491c:	sub	r3, r4, r0
   14920:	str	r3, [r1, #4]
   14924:	ldr	r2, [r1, #12]
   14928:	add	r3, r0, r2
   1492c:	sub	r3, r3, r5
   14930:	asr	r3, r3, #4
   14934:	str	r3, [r1, #8]
   14938:	cmp	r3, #0
   1493c:	bne	149b8 <__assert_fail@plt+0x2a70>
   14940:	lsr	r2, r2, #4
   14944:	str	r2, [sp, #36]	; 0x24
   14948:	mov	r2, #16
   1494c:	add	r1, sp, #36	; 0x24
   14950:	bl	21238 <__assert_fail@plt+0xf2f0>
   14954:	ldr	r2, [sp, #16]
   14958:	str	r0, [r2]
   1495c:	ldr	r3, [sp, #36]	; 0x24
   14960:	lsl	r3, r3, #4
   14964:	str	r3, [r2, #12]
   14968:	ldr	r2, [sp, #16]
   1496c:	ldr	r6, [r2]
   14970:	ldr	r4, [r2, #4]
   14974:	add	r4, r6, r4
   14978:	ldr	r3, [r2, #12]
   1497c:	add	r3, r6, r3
   14980:	ldr	r2, [r2, #8]
   14984:	sub	r5, r3, r2, lsl #4
   14988:	ldr	r1, [sp, #4]
   1498c:	mls	r3, r1, r2, r3
   14990:	sub	r8, r3, r4
   14994:	cmp	r2, #0
   14998:	beq	149a8 <__assert_fail@plt+0x2a60>
   1499c:	ldr	r6, [r5]
   149a0:	ldr	r3, [r5, #4]
   149a4:	add	r6, r6, r3
   149a8:	ldr	r3, [sp, #4]
   149ac:	add	r3, r3, #1
   149b0:	str	r3, [sp, #8]
   149b4:	b	14888 <__assert_fail@plt+0x2940>
   149b8:	sub	r4, r4, r6
   149bc:	str	r4, [r1, #16]
   149c0:	movw	r2, #25060	; 0x61e4
   149c4:	movt	r2, #3
   149c8:	add	r3, fp, #18
   149cc:	str	r3, [r2, #104]	; 0x68
   149d0:	mov	r3, #1
   149d4:	str	r3, [sp, #24]
   149d8:	b	149e4 <__assert_fail@plt+0x2a9c>
   149dc:	mov	r3, #0
   149e0:	str	r3, [sp, #24]
   149e4:	ldr	r0, [sp, #24]
   149e8:	add	sp, sp, #44	; 0x2c
   149ec:	ldrd	r4, [sp]
   149f0:	ldrd	r6, [sp, #8]
   149f4:	ldrd	r8, [sp, #16]
   149f8:	ldrd	sl, [sp, #24]
   149fc:	add	sp, sp, #32
   14a00:	pop	{pc}		; (ldr pc, [sp], #4)
   14a04:	cmp	r0, r1
   14a08:	bxeq	lr
   14a0c:	str	r4, [sp, #-8]!
   14a10:	str	lr, [sp, #4]
   14a14:	mov	r4, r0
   14a18:	bl	11b88 <dup2@plt>
   14a1c:	mov	r0, r4
   14a20:	bl	11f30 <close@plt>
   14a24:	ldr	r4, [sp]
   14a28:	add	sp, sp, #4
   14a2c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a30:	push	{lr}		; (str lr, [sp, #-4]!)
   14a34:	sub	sp, sp, #20
   14a38:	str	r0, [sp, #8]
   14a3c:	movw	r3, #25312	; 0x62e0
   14a40:	movt	r3, #3
   14a44:	add	r1, sp, #4
   14a48:	ldr	r0, [r3, #1476]	; 0x5c4
   14a4c:	bl	1c8c8 <__assert_fail@plt+0xa980>
   14a50:	cmp	r0, #0
   14a54:	movne	r3, #2
   14a58:	strbne	r3, [r0, #8]
   14a5c:	movne	r0, #1
   14a60:	moveq	r0, #0
   14a64:	add	sp, sp, #20
   14a68:	pop	{pc}		; (ldr pc, [sp], #4)
   14a6c:	strd	r4, [sp, #-12]!
   14a70:	str	lr, [sp, #8]
   14a74:	sub	sp, sp, #12
   14a78:	subs	r4, r0, #0
   14a7c:	movne	r0, r4
   14a80:	mvneq	r0, #0
   14a84:	clz	r2, r4
   14a88:	lsr	r2, r2, #5
   14a8c:	add	r1, sp, #4
   14a90:	bl	11c3c <waitpid@plt>
   14a94:	subs	r5, r0, #0
   14a98:	blt	14ae8 <__assert_fail@plt+0x2ba0>
   14a9c:	cmp	r5, #0
   14aa0:	ble	14ad4 <__assert_fail@plt+0x2b8c>
   14aa4:	cmp	r4, #0
   14aa8:	ble	14b30 <__assert_fail@plt+0x2be8>
   14aac:	ldr	r3, [sp, #4]
   14ab0:	ubfx	r2, r3, #8, #8
   14ab4:	and	r3, r3, #127	; 0x7f
   14ab8:	orrs	r3, r2, r3
   14abc:	bne	14b44 <__assert_fail@plt+0x2bfc>
   14ac0:	movw	r3, #25312	; 0x62e0
   14ac4:	movt	r3, #3
   14ac8:	ldr	r2, [r3, #1484]	; 0x5cc
   14acc:	sub	r2, r2, #1
   14ad0:	str	r2, [r3, #1484]	; 0x5cc
   14ad4:	mov	r0, r5
   14ad8:	add	sp, sp, #12
   14adc:	ldrd	r4, [sp]
   14ae0:	add	sp, sp, #8
   14ae4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ae8:	bl	11d74 <__errno_location@plt>
   14aec:	ldr	r4, [r0]
   14af0:	mov	r2, #5
   14af4:	movw	r1, #14108	; 0x371c
   14af8:	movt	r1, #2
   14afc:	mov	r0, #0
   14b00:	bl	11b58 <dcgettext@plt>
   14b04:	mov	r5, r0
   14b08:	movw	r3, #25312	; 0x62e0
   14b0c:	movt	r3, #3
   14b10:	ldr	r1, [r3, #1480]	; 0x5c8
   14b14:	mov	r0, #4
   14b18:	bl	1f580 <__assert_fail@plt+0xd638>
   14b1c:	mov	r3, r0
   14b20:	mov	r2, r5
   14b24:	mov	r1, r4
   14b28:	mov	r0, #2
   14b2c:	bl	11c90 <error@plt>
   14b30:	mov	r0, r5
   14b34:	bl	14a30 <__assert_fail@plt+0x2ae8>
   14b38:	cmp	r0, #0
   14b3c:	beq	14ad4 <__assert_fail@plt+0x2b8c>
   14b40:	b	14aac <__assert_fail@plt+0x2b64>
   14b44:	mov	r2, #5
   14b48:	movw	r1, #14128	; 0x3730
   14b4c:	movt	r1, #2
   14b50:	mov	r0, #0
   14b54:	bl	11b58 <dcgettext@plt>
   14b58:	mov	r4, r0
   14b5c:	movw	r3, #25312	; 0x62e0
   14b60:	movt	r3, #3
   14b64:	ldr	r1, [r3, #1480]	; 0x5c8
   14b68:	mov	r0, #4
   14b6c:	bl	1f580 <__assert_fail@plt+0xd638>
   14b70:	mov	r3, r0
   14b74:	mov	r2, r4
   14b78:	mov	r1, #0
   14b7c:	mov	r0, #2
   14b80:	bl	11c90 <error@plt>
   14b84:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14b88:	strd	r6, [sp, #8]
   14b8c:	strd	r8, [sp, #16]
   14b90:	str	lr, [sp, #24]
   14b94:	sub	sp, sp, #140	; 0x8c
   14b98:	mov	r5, r0
   14b9c:	movw	r3, #25312	; 0x62e0
   14ba0:	movt	r3, #3
   14ba4:	ldr	r4, [r3, #1160]	; 0x488
   14ba8:	add	r3, r4, #9
   14bac:	cmp	r0, r3
   14bb0:	bne	14bc0 <__assert_fail@plt+0x2c78>
   14bb4:	ldr	r7, [pc, #244]	; 14cb0 <__assert_fail@plt+0x2d68>
   14bb8:	b	14bd8 <__assert_fail@plt+0x2c90>
   14bbc:	mov	r4, r3
   14bc0:	ldr	r3, [r4]
   14bc4:	add	r2, r3, #9
   14bc8:	cmp	r2, r5
   14bcc:	bne	14bbc <__assert_fail@plt+0x2c74>
   14bd0:	mov	r7, r4
   14bd4:	mov	r4, r3
   14bd8:	ldrb	r3, [r4, #8]
   14bdc:	cmp	r3, #1
   14be0:	beq	14c40 <__assert_fail@plt+0x2cf8>
   14be4:	ldr	r6, [r4]
   14be8:	add	r0, sp, #4
   14bec:	bl	12a2c <__assert_fail@plt+0xae4>
   14bf0:	mov	r0, r5
   14bf4:	bl	11b7c <unlink@plt>
   14bf8:	mov	r8, r0
   14bfc:	bl	11d74 <__errno_location@plt>
   14c00:	ldr	r9, [r0]
   14c04:	str	r6, [r7]
   14c08:	add	r0, sp, #4
   14c0c:	bl	12a64 <__assert_fail@plt+0xb1c>
   14c10:	cmp	r8, #0
   14c14:	bne	14c60 <__assert_fail@plt+0x2d18>
   14c18:	cmp	r6, #0
   14c1c:	beq	14ca0 <__assert_fail@plt+0x2d58>
   14c20:	mov	r0, r4
   14c24:	bl	1b778 <__assert_fail@plt+0x9830>
   14c28:	add	sp, sp, #140	; 0x8c
   14c2c:	ldrd	r4, [sp]
   14c30:	ldrd	r6, [sp, #8]
   14c34:	ldrd	r8, [sp, #16]
   14c38:	add	sp, sp, #24
   14c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c40:	ldr	r6, [r4, #4]
   14c44:	mov	r0, r6
   14c48:	bl	14a30 <__assert_fail@plt+0x2ae8>
   14c4c:	cmp	r0, #0
   14c50:	beq	14be4 <__assert_fail@plt+0x2c9c>
   14c54:	mov	r0, r6
   14c58:	bl	14a6c <__assert_fail@plt+0x2b24>
   14c5c:	b	14be4 <__assert_fail@plt+0x2c9c>
   14c60:	mov	r2, #5
   14c64:	movw	r1, #14160	; 0x3750
   14c68:	movt	r1, #2
   14c6c:	mov	r0, #0
   14c70:	bl	11b58 <dcgettext@plt>
   14c74:	mov	r8, r0
   14c78:	mov	r2, r5
   14c7c:	mov	r1, #3
   14c80:	mov	r0, #0
   14c84:	bl	1f6a4 <__assert_fail@plt+0xd75c>
   14c88:	mov	r3, r0
   14c8c:	mov	r2, r8
   14c90:	mov	r1, r9
   14c94:	mov	r0, #0
   14c98:	bl	11c90 <error@plt>
   14c9c:	b	14c18 <__assert_fail@plt+0x2cd0>
   14ca0:	movw	r3, #25060	; 0x61e4
   14ca4:	movt	r3, #3
   14ca8:	str	r7, [r3, #108]	; 0x6c
   14cac:	b	14c20 <__assert_fail@plt+0x2cd8>
   14cb0:	andeq	r6, r3, r8, ror #14
   14cb4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14cb8:	strd	r6, [sp, #8]
   14cbc:	strd	r8, [sp, #16]
   14cc0:	strd	sl, [sp, #24]
   14cc4:	str	lr, [sp, #32]
   14cc8:	sub	sp, sp, #68	; 0x44
   14ccc:	mov	sl, r0
   14cd0:	str	r1, [sp, #36]	; 0x24
   14cd4:	mov	r5, r2
   14cd8:	str	r3, [sp, #32]
   14cdc:	mov	r1, #28
   14ce0:	mov	r0, r2
   14ce4:	bl	211f0 <__assert_fail@plt+0xf2a8>
   14ce8:	str	r0, [sp, #8]
   14cec:	mov	r1, #4
   14cf0:	mov	r0, r5
   14cf4:	bl	211f0 <__assert_fail@plt+0xf2a8>
   14cf8:	mov	fp, r0
   14cfc:	mov	r1, #4
   14d00:	mov	r0, r5
   14d04:	bl	211f0 <__assert_fail@plt+0xf2a8>
   14d08:	str	r0, [sp, #12]
   14d0c:	mov	r1, #4
   14d10:	mov	r0, r5
   14d14:	bl	211f0 <__assert_fail@plt+0xf2a8>
   14d18:	mov	r4, r0
   14d1c:	movw	r3, #25312	; 0x62e0
   14d20:	movt	r3, #3
   14d24:	ldr	r3, [r3, #1280]	; 0x500
   14d28:	str	r3, [sp, #44]	; 0x2c
   14d2c:	mov	r3, #0
   14d30:	str	r3, [sp, #48]	; 0x30
   14d34:	cmp	r5, #0
   14d38:	beq	152d0 <__assert_fail@plt+0x3388>
   14d3c:	mov	r3, r5
   14d40:	mov	r5, #0
   14d44:	movw	r2, #25312	; 0x62e0
   14d48:	movt	r2, #3
   14d4c:	str	r2, [sp, #4]
   14d50:	movw	r9, #25060	; 0x61e4
   14d54:	movt	r9, #3
   14d58:	str	fp, [sp, #20]
   14d5c:	str	r0, [sp, #16]
   14d60:	mov	fp, r3
   14d64:	b	14dc4 <__assert_fail@plt+0x2e7c>
   14d68:	ldr	r1, [sl, r5, lsl #3]
   14d6c:	ldr	r3, [sp, #108]	; 0x6c
   14d70:	ldr	r0, [r3, r5, lsl #2]
   14d74:	bl	12ed4 <__assert_fail@plt+0xf8c>
   14d78:	ldr	r3, [sp, #36]	; 0x24
   14d7c:	cmp	r3, r5
   14d80:	bhi	14e98 <__assert_fail@plt+0x2f50>
   14d84:	ldr	r3, [sp, #8]
   14d88:	ldr	r0, [r3, r7, lsl #2]
   14d8c:	bl	1b778 <__assert_fail@plt+0x9830>
   14d90:	sub	fp, fp, #1
   14d94:	cmp	fp, r5
   14d98:	bls	14eac <__assert_fail@plt+0x2f64>
   14d9c:	mov	r1, r5
   14da0:	sub	ip, sl, #8
   14da4:	add	r1, r1, #1
   14da8:	lsl	r0, r1, #3
   14dac:	ldrd	r2, [sl, r0]
   14db0:	strd	r2, [r0, ip]
   14db4:	ldr	r3, [r4, #4]
   14db8:	str	r3, [r4], #4
   14dbc:	cmp	r1, fp
   14dc0:	bne	14da4 <__assert_fail@plt+0x2e5c>
   14dc4:	lsl	r8, r5, #3
   14dc8:	sub	r7, r8, r5
   14dcc:	ldr	r3, [sp, #8]
   14dd0:	add	r6, r3, r7, lsl #2
   14dd4:	ldr	r2, [sp, #4]
   14dd8:	ldr	r3, [r2, #1488]	; 0x5d0
   14ddc:	udiv	r3, r3, fp
   14de0:	ldr	r2, [r9, #104]	; 0x68
   14de4:	cmp	r3, r2
   14de8:	movcs	r2, r3
   14dec:	mov	r1, #16
   14df0:	mov	r0, r6
   14df4:	bl	13040 <__assert_fail@plt+0x10f8>
   14df8:	ldr	r2, [sp, #108]	; 0x6c
   14dfc:	add	r4, r2, r5, lsl #2
   14e00:	ldr	r2, [sl, r5, lsl #3]
   14e04:	ldr	r1, [sp, #108]	; 0x6c
   14e08:	ldr	r1, [r1, r5, lsl #2]
   14e0c:	mov	r0, r6
   14e10:	bl	146f4 <__assert_fail@plt+0x27ac>
   14e14:	cmp	r0, #0
   14e18:	beq	14d68 <__assert_fail@plt+0x2e20>
   14e1c:	ldr	r3, [sp, #8]
   14e20:	ldr	r3, [r3, r7, lsl #2]
   14e24:	ldr	r2, [r6, #12]
   14e28:	add	r3, r3, r2
   14e2c:	sub	r2, r3, #16
   14e30:	ldr	r1, [sp, #20]
   14e34:	str	r2, [r1, r5, lsl #2]
   14e38:	ldr	r2, [r6, #8]
   14e3c:	sub	r3, r3, r2, lsl #4
   14e40:	ldr	r2, [sp, #12]
   14e44:	str	r3, [r2, r5, lsl #2]
   14e48:	add	r5, r5, #1
   14e4c:	cmp	r5, fp
   14e50:	bcc	14dc4 <__assert_fail@plt+0x2e7c>
   14e54:	ldr	r4, [sp, #16]
   14e58:	str	fp, [sp, #16]
   14e5c:	mov	fp, r1
   14e60:	ldr	r1, [sp, #16]
   14e64:	cmp	r1, #0
   14e68:	beq	152d0 <__assert_fail@plt+0x3388>
   14e6c:	sub	r2, r4, #4
   14e70:	mov	r3, #0
   14e74:	str	r3, [r2, #4]!
   14e78:	add	r3, r3, #1
   14e7c:	cmp	r3, r1
   14e80:	bne	14e74 <__assert_fail@plt+0x2f2c>
   14e84:	ldr	r3, [sp, #16]
   14e88:	cmp	r3, #1
   14e8c:	bls	14f08 <__assert_fail@plt+0x2fc0>
   14e90:	mov	r5, #1
   14e94:	b	14ecc <__assert_fail@plt+0x2f84>
   14e98:	sub	r3, r3, #1
   14e9c:	str	r3, [sp, #36]	; 0x24
   14ea0:	ldr	r0, [sl, r8]
   14ea4:	bl	14b84 <__assert_fail@plt+0x2c3c>
   14ea8:	b	14d84 <__assert_fail@plt+0x2e3c>
   14eac:	ldr	r4, [sp, #16]
   14eb0:	str	fp, [sp, #16]
   14eb4:	ldr	fp, [sp, #20]
   14eb8:	b	14e60 <__assert_fail@plt+0x2f18>
   14ebc:	add	r5, r5, #1
   14ec0:	ldr	r3, [sp, #16]
   14ec4:	cmp	r5, r3
   14ec8:	bcs	14f08 <__assert_fail@plt+0x2fc0>
   14ecc:	sub	r7, r5, #-1073741823	; 0xc0000001
   14ed0:	lsl	r6, r5, #2
   14ed4:	ldr	r2, [r4, r6]
   14ed8:	ldr	r3, [r4, r7, lsl #2]
   14edc:	ldr	r1, [fp, r2, lsl #2]
   14ee0:	ldr	r0, [fp, r3, lsl #2]
   14ee4:	bl	14324 <__assert_fail@plt+0x23dc>
   14ee8:	cmp	r0, #0
   14eec:	ble	14ebc <__assert_fail@plt+0x2f74>
   14ef0:	ldr	r3, [r4, r7, lsl #2]
   14ef4:	ldr	r2, [r4, r6]
   14ef8:	str	r2, [r4, r7, lsl #2]
   14efc:	str	r3, [r4, r6]
   14f00:	mov	r5, #1
   14f04:	b	14ecc <__assert_fail@plt+0x2f84>
   14f08:	mov	r3, #0
   14f0c:	str	r3, [sp, #40]	; 0x28
   14f10:	str	r3, [sp, #20]
   14f14:	movw	r3, #25312	; 0x62e0
   14f18:	movt	r3, #3
   14f1c:	str	r3, [sp, #24]
   14f20:	mov	r3, #1
   14f24:	str	r3, [sp, #28]
   14f28:	b	151e8 <__assert_fail@plt+0x32a0>
   14f2c:	cmp	r3, #0
   14f30:	beq	14f5c <__assert_fail@plt+0x3014>
   14f34:	lsl	r3, r3, #1
   14f38:	cmp	r6, r3
   14f3c:	movls	r6, r3
   14f40:	bls	14f5c <__assert_fail@plt+0x3014>
   14f44:	cmp	r3, #0
   14f48:	beq	14f5c <__assert_fail@plt+0x3014>
   14f4c:	lsl	r3, r3, #1
   14f50:	cmp	r6, r3
   14f54:	bhi	14f44 <__assert_fail@plt+0x2ffc>
   14f58:	mov	r6, r3
   14f5c:	ldr	r0, [sp, #48]	; 0x30
   14f60:	bl	1b778 <__assert_fail@plt+0x9830>
   14f64:	mov	r0, r6
   14f68:	bl	21070 <__assert_fail@plt+0xf128>
   14f6c:	str	r0, [sp, #48]	; 0x30
   14f70:	str	r6, [sp, #40]	; 0x28
   14f74:	b	15240 <__assert_fail@plt+0x32f8>
   14f78:	ldr	r2, [sp, #104]	; 0x68
   14f7c:	ldr	r1, [sp, #32]
   14f80:	mov	r0, r5
   14f84:	bl	13108 <__assert_fail@plt+0x11c0>
   14f88:	ldr	r3, [r4]
   14f8c:	ldr	r2, [sp, #12]
   14f90:	ldr	r2, [r2, r3, lsl #2]
   14f94:	cmp	r2, r5
   14f98:	subcc	r5, r5, #16
   14f9c:	strcc	r5, [fp, r3, lsl #2]
   14fa0:	bcc	14ffc <__assert_fail@plt+0x30b4>
   14fa4:	rsb	r0, r3, r3, lsl #3
   14fa8:	ldr	r2, [sl, r3, lsl #3]
   14fac:	ldr	r1, [sp, #108]	; 0x6c
   14fb0:	ldr	r1, [r1, r3, lsl #2]
   14fb4:	ldr	r3, [sp, #8]
   14fb8:	add	r0, r3, r0, lsl #2
   14fbc:	bl	146f4 <__assert_fail@plt+0x27ac>
   14fc0:	cmp	r0, #0
   14fc4:	beq	1502c <__assert_fail@plt+0x30e4>
   14fc8:	ldr	r2, [r4]
   14fcc:	rsb	r3, r2, r2, lsl #3
   14fd0:	ldr	r0, [sp, #8]
   14fd4:	add	r1, r0, r3, lsl #2
   14fd8:	ldr	r3, [r0, r3, lsl #2]
   14fdc:	ldr	r0, [r1, #12]
   14fe0:	add	r3, r3, r0
   14fe4:	sub	r0, r3, #16
   14fe8:	str	r0, [fp, r2, lsl #2]
   14fec:	ldr	r1, [r1, #8]
   14ff0:	sub	r3, r3, r1, lsl #4
   14ff4:	ldr	r1, [sp, #12]
   14ff8:	str	r3, [r1, r2, lsl #2]
   14ffc:	ldr	r3, [r4]
   15000:	str	r3, [sp, #4]
   15004:	ldr	r7, [sp, #16]
   15008:	cmp	r7, #1
   1500c:	bls	15298 <__assert_fail@plt+0x3350>
   15010:	add	r9, fp, r3, lsl #2
   15014:	mov	r5, #1
   15018:	ldr	r6, [sp, #28]
   1501c:	b	15180 <__assert_fail@plt+0x3238>
   15020:	add	r3, sp, #48	; 0x30
   15024:	str	r3, [sp, #20]
   15028:	b	14f88 <__assert_fail@plt+0x3040>
   1502c:	ldr	r3, [sp, #16]
   15030:	cmp	r3, #1
   15034:	bls	15060 <__assert_fail@plt+0x3118>
   15038:	add	r3, r4, #4
   1503c:	ldr	r2, [sp, #16]
   15040:	add	r0, r4, r2, lsl #2
   15044:	ldr	r2, [r3], #4
   15048:	ldr	r1, [r4]
   1504c:	cmp	r2, r1
   15050:	subhi	r2, r2, #1
   15054:	strhi	r2, [r3, #-4]
   15058:	cmp	r3, r0
   1505c:	bne	15044 <__assert_fail@plt+0x30fc>
   15060:	ldr	r3, [sp, #16]
   15064:	sub	r5, r3, #1
   15068:	ldr	r3, [r4]
   1506c:	ldr	r1, [sl, r3, lsl #3]
   15070:	ldr	r2, [sp, #108]	; 0x6c
   15074:	ldr	r0, [r2, r3, lsl #2]
   15078:	bl	12ed4 <__assert_fail@plt+0xf8c>
   1507c:	ldr	r3, [r4]
   15080:	ldr	r2, [sp, #36]	; 0x24
   15084:	cmp	r3, r2
   15088:	bcc	15158 <__assert_fail@plt+0x3210>
   1508c:	ldr	r3, [r4]
   15090:	rsb	r3, r3, r3, lsl #3
   15094:	ldr	r7, [sp, #8]
   15098:	ldr	r0, [r7, r3, lsl #2]
   1509c:	bl	1b778 <__assert_fail@plt+0x9830>
   150a0:	ldr	r0, [r4]
   150a4:	cmp	r5, r0
   150a8:	bls	15128 <__assert_fail@plt+0x31e0>
   150ac:	lsl	ip, r0, #2
   150b0:	ldr	r3, [sp, #108]	; 0x6c
   150b4:	add	r6, r3, ip
   150b8:	rsb	r1, r0, r0, lsl #3
   150bc:	add	r1, r7, r1, lsl #2
   150c0:	add	lr, fp, ip
   150c4:	ldr	r3, [sp, #12]
   150c8:	add	ip, r3, ip
   150cc:	sub	r7, sl, #8
   150d0:	add	r0, r0, #1
   150d4:	ldr	r3, [r6, #4]
   150d8:	str	r3, [r6], #4
   150dc:	lsl	r8, r0, #3
   150e0:	ldrd	r2, [sl, r8]
   150e4:	strd	r2, [r8, r7]
   150e8:	add	r8, r1, #28
   150ec:	ldrd	r2, [r1, #28]
   150f0:	strd	r2, [r1]
   150f4:	ldrd	r2, [r1, #36]	; 0x24
   150f8:	strd	r2, [r1, #8]
   150fc:	ldrd	r2, [r1, #44]	; 0x2c
   15100:	strd	r2, [r1, #16]
   15104:	ldr	r3, [r1, #52]	; 0x34
   15108:	str	r3, [r1, #24]
   1510c:	ldr	r3, [lr, #4]
   15110:	str	r3, [lr], #4
   15114:	ldr	r3, [ip, #4]
   15118:	str	r3, [ip], #4
   1511c:	mov	r1, r8
   15120:	cmp	r0, r5
   15124:	bne	150d0 <__assert_fail@plt+0x3188>
   15128:	cmp	r5, #0
   1512c:	beq	152ac <__assert_fail@plt+0x3364>
   15130:	mov	r3, r4
   15134:	sub	r1, r4, #4
   15138:	ldr	r2, [sp, #16]
   1513c:	add	r1, r1, r2, lsl #2
   15140:	ldr	r2, [r3, #4]
   15144:	str	r2, [r3], #4
   15148:	cmp	r3, r1
   1514c:	bne	15140 <__assert_fail@plt+0x31f8>
   15150:	str	r5, [sp, #16]
   15154:	b	151e8 <__assert_fail@plt+0x32a0>
   15158:	sub	r2, r2, #1
   1515c:	str	r2, [sp, #36]	; 0x24
   15160:	ldr	r0, [sl, r3, lsl #3]
   15164:	bl	14b84 <__assert_fail@plt+0x2c3c>
   15168:	b	1508c <__assert_fail@plt+0x3144>
   1516c:	add	r6, r5, #1
   15170:	add	r5, r6, r7
   15174:	lsr	r5, r5, #1
   15178:	cmp	r6, r7
   1517c:	bcs	151bc <__assert_fail@plt+0x3274>
   15180:	lsl	r8, r5, #2
   15184:	ldr	r3, [r4, r5, lsl #2]
   15188:	ldr	r1, [fp, r3, lsl #2]
   1518c:	ldr	r0, [r9]
   15190:	bl	14324 <__assert_fail@plt+0x23dc>
   15194:	cmp	r0, #0
   15198:	movlt	r7, r5
   1519c:	blt	15170 <__assert_fail@plt+0x3228>
   151a0:	bne	1516c <__assert_fail@plt+0x3224>
   151a4:	ldr	r3, [r4, r8]
   151a8:	ldr	r2, [sp, #4]
   151ac:	cmp	r3, r2
   151b0:	movhi	r7, r5
   151b4:	bhi	15170 <__assert_fail@plt+0x3228>
   151b8:	b	1516c <__assert_fail@plt+0x3224>
   151bc:	subs	r1, r6, #1
   151c0:	beq	151e0 <__assert_fail@plt+0x3298>
   151c4:	mov	r3, r4
   151c8:	sub	r2, r4, #4
   151cc:	add	r6, r2, r6, lsl #2
   151d0:	ldr	r2, [r3, #4]
   151d4:	str	r2, [r3], #4
   151d8:	cmp	r6, r3
   151dc:	bne	151d0 <__assert_fail@plt+0x3288>
   151e0:	ldr	r3, [sp, #4]
   151e4:	str	r3, [r4, r1, lsl #2]
   151e8:	ldr	r3, [r4]
   151ec:	ldr	r5, [fp, r3, lsl #2]
   151f0:	ldr	r3, [sp, #24]
   151f4:	ldrb	r3, [r3, #1297]	; 0x511
   151f8:	cmp	r3, #0
   151fc:	beq	14f78 <__assert_fail@plt+0x3030>
   15200:	ldr	r3, [sp, #20]
   15204:	cmp	r3, #0
   15208:	beq	15230 <__assert_fail@plt+0x32e8>
   1520c:	mov	r1, r5
   15210:	mov	r0, r3
   15214:	bl	14324 <__assert_fail@plt+0x23dc>
   15218:	cmp	r0, #0
   1521c:	beq	14f88 <__assert_fail@plt+0x3040>
   15220:	ldr	r2, [sp, #104]	; 0x68
   15224:	ldr	r1, [sp, #32]
   15228:	add	r0, sp, #48	; 0x30
   1522c:	bl	13108 <__assert_fail@plt+0x11c0>
   15230:	ldr	r6, [r5, #4]
   15234:	ldr	r3, [sp, #40]	; 0x28
   15238:	cmp	r6, r3
   1523c:	bhi	14f2c <__assert_fail@plt+0x2fe4>
   15240:	ldr	r2, [r5, #4]
   15244:	str	r2, [sp, #52]	; 0x34
   15248:	ldr	r1, [r5]
   1524c:	ldr	r0, [sp, #48]	; 0x30
   15250:	bl	11ac8 <memcpy@plt>
   15254:	ldr	r3, [sp, #44]	; 0x2c
   15258:	cmp	r3, #0
   1525c:	beq	15020 <__assert_fail@plt+0x30d8>
   15260:	ldr	r2, [sp, #48]	; 0x30
   15264:	ldr	r3, [r5, #8]
   15268:	ldr	r1, [r5]
   1526c:	sub	r3, r3, r1
   15270:	add	r3, r2, r3
   15274:	str	r3, [sp, #56]	; 0x38
   15278:	ldr	r3, [r5, #12]
   1527c:	ldr	r1, [r5]
   15280:	sub	r3, r3, r1
   15284:	add	r2, r2, r3
   15288:	str	r2, [sp, #60]	; 0x3c
   1528c:	add	r3, sp, #48	; 0x30
   15290:	str	r3, [sp, #20]
   15294:	b	14f88 <__assert_fail@plt+0x3040>
   15298:	ldr	r3, [sp, #4]
   1529c:	str	r3, [r4]
   152a0:	ldr	r3, [sp, #16]
   152a4:	cmp	r3, #0
   152a8:	bne	151e8 <__assert_fail@plt+0x32a0>
   152ac:	movw	r3, #25312	; 0x62e0
   152b0:	movt	r3, #3
   152b4:	ldrb	r3, [r3, #1297]	; 0x511
   152b8:	ldr	r2, [sp, #20]
   152bc:	cmp	r2, #0
   152c0:	moveq	r3, #0
   152c4:	andne	r3, r3, #1
   152c8:	cmp	r3, #0
   152cc:	bne	15320 <__assert_fail@plt+0x33d8>
   152d0:	ldr	r1, [sp, #104]	; 0x68
   152d4:	ldr	r0, [sp, #32]
   152d8:	bl	12ed4 <__assert_fail@plt+0xf8c>
   152dc:	ldr	r0, [sp, #108]	; 0x6c
   152e0:	bl	1b778 <__assert_fail@plt+0x9830>
   152e4:	ldr	r0, [sp, #8]
   152e8:	bl	1b778 <__assert_fail@plt+0x9830>
   152ec:	mov	r0, r4
   152f0:	bl	1b778 <__assert_fail@plt+0x9830>
   152f4:	ldr	r0, [sp, #12]
   152f8:	bl	1b778 <__assert_fail@plt+0x9830>
   152fc:	mov	r0, fp
   15300:	bl	1b778 <__assert_fail@plt+0x9830>
   15304:	add	sp, sp, #68	; 0x44
   15308:	ldrd	r4, [sp]
   1530c:	ldrd	r6, [sp, #8]
   15310:	ldrd	r8, [sp, #16]
   15314:	ldrd	sl, [sp, #24]
   15318:	add	sp, sp, #32
   1531c:	pop	{pc}		; (ldr pc, [sp], #4)
   15320:	ldr	r2, [sp, #104]	; 0x68
   15324:	ldr	r1, [sp, #32]
   15328:	add	r0, sp, #48	; 0x30
   1532c:	bl	13108 <__assert_fail@plt+0x11c0>
   15330:	ldr	r0, [sp, #48]	; 0x30
   15334:	bl	1b778 <__assert_fail@plt+0x9830>
   15338:	b	152d0 <__assert_fail@plt+0x3388>
   1533c:	strd	r4, [sp, #-16]!
   15340:	str	r6, [sp, #8]
   15344:	str	lr, [sp, #12]
   15348:	movw	r4, #25312	; 0x62e0
   1534c:	movt	r4, #3
   15350:	mov	r5, #0
   15354:	ldr	r3, [r4, #1484]	; 0x5cc
   15358:	cmp	r3, #0
   1535c:	ble	15370 <__assert_fail@plt+0x3428>
   15360:	mov	r0, r5
   15364:	bl	14a6c <__assert_fail@plt+0x2b24>
   15368:	cmp	r0, #0
   1536c:	bne	15354 <__assert_fail@plt+0x340c>
   15370:	ldrd	r4, [sp]
   15374:	ldr	r6, [sp, #8]
   15378:	add	sp, sp, #12
   1537c:	pop	{pc}		; (ldr pc, [sp], #4)
   15380:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15384:	strd	r6, [sp, #8]
   15388:	strd	r8, [sp, #16]
   1538c:	strd	sl, [sp, #24]
   15390:	str	lr, [sp, #32]
   15394:	vpush	{d8}
   15398:	sub	sp, sp, #140	; 0x8c
   1539c:	mov	r9, r0
   153a0:	mov	r4, r1
   153a4:	mov	r1, #524288	; 0x80000
   153a8:	bl	1d328 <__assert_fail@plt+0xb3e0>
   153ac:	cmp	r0, #0
   153b0:	blt	15500 <__assert_fail@plt+0x35b8>
   153b4:	movw	r3, #25060	; 0x61e4
   153b8:	movt	r3, #3
   153bc:	ldr	r3, [r3, #112]	; 0x70
   153c0:	add	r3, r3, #1
   153c4:	movw	r2, #25312	; 0x62e0
   153c8:	movt	r2, #3
   153cc:	ldr	r2, [r2, #1484]	; 0x5cc
   153d0:	cmp	r3, r2
   153d4:	bcc	153f8 <__assert_fail@plt+0x34b0>
   153d8:	sub	r7, r4, #1
   153dc:	cmp	r4, #0
   153e0:	beq	15484 <__assert_fail@plt+0x353c>
   153e4:	vldr	d8, [pc, #284]	; 15508 <__assert_fail@plt+0x35c0>
   153e8:	movw	r4, #25312	; 0x62e0
   153ec:	movt	r4, #3
   153f0:	mov	r8, #0
   153f4:	b	1544c <__assert_fail@plt+0x3504>
   153f8:	mvn	r0, #0
   153fc:	bl	14a6c <__assert_fail@plt+0x2b24>
   15400:	bl	1533c <__assert_fail@plt+0x33f4>
   15404:	b	153d8 <__assert_fail@plt+0x3490>
   15408:	str	fp, [r4, #1160]	; 0x488
   1540c:	add	r0, sp, #4
   15410:	bl	12a64 <__assert_fail@plt+0xb1c>
   15414:	str	sl, [r6]
   15418:	mvn	r3, r5
   1541c:	lsr	r3, r3, #31
   15420:	cmp	sl, #11
   15424:	orrne	r3, r3, #1
   15428:	cmp	r3, #0
   1542c:	bne	1549c <__assert_fail@plt+0x3554>
   15430:	vmov.f64	d0, d8
   15434:	bl	21718 <__assert_fail@plt+0xf7d0>
   15438:	vadd.f64	d8, d8, d8
   1543c:	bl	1533c <__assert_fail@plt+0x33f4>
   15440:	sub	r7, r7, #1
   15444:	cmn	r7, #1
   15448:	beq	154a4 <__assert_fail@plt+0x355c>
   1544c:	add	r0, sp, #4
   15450:	bl	12a2c <__assert_fail@plt+0xae4>
   15454:	ldr	fp, [r4, #1160]	; 0x488
   15458:	str	r8, [r4, #1160]	; 0x488
   1545c:	bl	11e40 <fork@plt>
   15460:	mov	r5, r0
   15464:	bl	11d74 <__errno_location@plt>
   15468:	mov	r6, r0
   1546c:	ldr	sl, [r0]
   15470:	cmp	r5, #0
   15474:	bne	15408 <__assert_fail@plt+0x34c0>
   15478:	add	r0, sp, #4
   1547c:	bl	12a64 <__assert_fail@plt+0xb1c>
   15480:	str	sl, [r6]
   15484:	mov	r0, #0
   15488:	bl	11f30 <close@plt>
   1548c:	mov	r0, #1
   15490:	bl	11f30 <close@plt>
   15494:	mov	r5, #0
   15498:	b	154dc <__assert_fail@plt+0x3594>
   1549c:	cmp	r5, #0
   154a0:	bge	154c8 <__assert_fail@plt+0x3580>
   154a4:	bl	11d74 <__errno_location@plt>
   154a8:	mov	r4, r0
   154ac:	ldr	r6, [r0]
   154b0:	ldr	r0, [r9]
   154b4:	bl	11f30 <close@plt>
   154b8:	ldr	r0, [r9, #4]
   154bc:	bl	11f30 <close@plt>
   154c0:	str	r6, [r4]
   154c4:	b	154dc <__assert_fail@plt+0x3594>
   154c8:	movw	r3, #25312	; 0x62e0
   154cc:	movt	r3, #3
   154d0:	ldr	r2, [r3, #1484]	; 0x5cc
   154d4:	add	r2, r2, #1
   154d8:	str	r2, [r3, #1484]	; 0x5cc
   154dc:	mov	r0, r5
   154e0:	add	sp, sp, #140	; 0x8c
   154e4:	vpop	{d8}
   154e8:	ldrd	r4, [sp]
   154ec:	ldrd	r6, [sp, #8]
   154f0:	ldrd	r8, [sp, #16]
   154f4:	ldrd	sl, [sp, #24]
   154f8:	add	sp, sp, #32
   154fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15500:	mvn	r5, #0
   15504:	b	154dc <__assert_fail@plt+0x3594>
   15508:	andeq	r0, r0, r0
   1550c:	svccc	0x00d00000
   15510:	push	{lr}		; (str lr, [sp, #-4]!)
   15514:	sub	sp, sp, #20
   15518:	mov	r5, r0
   1551c:	mov	r4, r1
   15520:	mov	r0, r1
   15524:	bl	11d50 <strlen@plt>
   15528:	mov	r2, r0
   1552c:	mov	r1, r4
   15530:	mov	r0, #2
   15534:	bl	11dbc <write@plt>
   15538:	cmp	r5, #0
   1553c:	bne	1555c <__assert_fail@plt+0x3614>
   15540:	mov	r2, #1
   15544:	movw	r1, #15780	; 0x3da4
   15548:	movt	r1, #2
   1554c:	mov	r0, #2
   15550:	bl	11dbc <write@plt>
   15554:	mov	r0, #2
   15558:	bl	11abc <_exit@plt>
   1555c:	add	r1, sp, #4
   15560:	mov	r0, r5
   15564:	bl	1cc3c <__assert_fail@plt+0xacf4>
   15568:	mov	r4, r0
   1556c:	mov	r2, #8
   15570:	movw	r1, #14188	; 0x376c
   15574:	movt	r1, #2
   15578:	mov	r0, #2
   1557c:	bl	11dbc <write@plt>
   15580:	mov	r0, r4
   15584:	bl	11d50 <strlen@plt>
   15588:	mov	r2, r0
   1558c:	mov	r1, r4
   15590:	mov	r0, #2
   15594:	bl	11dbc <write@plt>
   15598:	b	15540 <__assert_fail@plt+0x35f8>
   1559c:	str	r4, [sp, #-8]!
   155a0:	str	lr, [sp, #4]
   155a4:	sub	sp, sp, #8
   155a8:	mov	r4, r0
   155ac:	movw	r3, #25312	; 0x62e0
   155b0:	movt	r3, #3
   155b4:	ldr	r3, [r3, #1476]	; 0x5c4
   155b8:	cmp	r3, #0
   155bc:	beq	155f4 <__assert_fail@plt+0x36ac>
   155c0:	mov	r3, #1
   155c4:	strb	r3, [r4, #8]
   155c8:	movw	r3, #25312	; 0x62e0
   155cc:	movt	r3, #3
   155d0:	mov	r1, r4
   155d4:	ldr	r0, [r3, #1476]	; 0x5c4
   155d8:	bl	1c888 <__assert_fail@plt+0xa940>
   155dc:	cmp	r0, #0
   155e0:	beq	1562c <__assert_fail@plt+0x36e4>
   155e4:	add	sp, sp, #8
   155e8:	ldr	r4, [sp]
   155ec:	add	sp, sp, #4
   155f0:	pop	{pc}		; (ldr pc, [sp], #4)
   155f4:	mov	r1, #0
   155f8:	str	r1, [sp]
   155fc:	movw	r3, #8280	; 0x2058
   15600:	movt	r3, #1
   15604:	movw	r2, #8264	; 0x2048
   15608:	movt	r2, #1
   1560c:	mov	r0, #47	; 0x2f
   15610:	bl	1c2d4 <__assert_fail@plt+0xa38c>
   15614:	movw	r3, #25312	; 0x62e0
   15618:	movt	r3, #3
   1561c:	str	r0, [r3, #1476]	; 0x5c4
   15620:	cmp	r0, #0
   15624:	bne	155c0 <__assert_fail@plt+0x3678>
   15628:	bl	21504 <__assert_fail@plt+0xf5bc>
   1562c:	bl	21504 <__assert_fail@plt+0xf5bc>
   15630:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15634:	strd	r6, [sp, #8]
   15638:	strd	r8, [sp, #16]
   1563c:	str	sl, [sp, #24]
   15640:	str	lr, [sp, #28]
   15644:	sub	sp, sp, #136	; 0x88
   15648:	mov	r9, r0
   1564c:	mov	r7, r1
   15650:	movw	r5, #25312	; 0x62e0
   15654:	movt	r5, #3
   15658:	ldr	r2, [r5, #1492]	; 0x5d4
   1565c:	ldr	r3, [r5, #1292]	; 0x50c
   15660:	ldr	r8, [r3, r2, lsl #2]
   15664:	mov	r0, r8
   15668:	bl	11d50 <strlen@plt>
   1566c:	mov	sl, r0
   15670:	add	r0, r0, #24
   15674:	bic	r0, r0, #3
   15678:	bl	21070 <__assert_fail@plt+0xf128>
   1567c:	mov	r4, r0
   15680:	add	r6, r0, #9
   15684:	mov	r2, sl
   15688:	mov	r1, r8
   1568c:	mov	r0, r6
   15690:	bl	11ac8 <memcpy@plt>
   15694:	movw	r3, #14308	; 0x37e4
   15698:	movt	r3, #2
   1569c:	add	r2, r6, sl
   156a0:	ldr	r0, [r3]
   156a4:	ldr	r1, [r3, #4]
   156a8:	str	r0, [r6, sl]
   156ac:	str	r1, [r2, #4]
   156b0:	ldr	r3, [r3, #8]
   156b4:	str	r3, [r2, #8]
   156b8:	mov	r3, #0
   156bc:	str	r3, [r4]
   156c0:	ldr	r3, [r5, #1492]	; 0x5d4
   156c4:	add	r3, r3, #1
   156c8:	str	r3, [r5, #1492]	; 0x5d4
   156cc:	ldr	r2, [r5, #1284]	; 0x504
   156d0:	cmp	r3, r2
   156d4:	beq	15798 <__assert_fail@plt+0x3850>
   156d8:	add	r0, sp, #4
   156dc:	bl	12a2c <__assert_fail@plt+0xae4>
   156e0:	mov	r1, #524288	; 0x80000
   156e4:	mov	r0, r6
   156e8:	bl	204f0 <__assert_fail@plt+0xe5a8>
   156ec:	subs	r5, r0, #0
   156f0:	blt	1585c <__assert_fail@plt+0x3914>
   156f4:	movw	r3, #25060	; 0x61e4
   156f8:	movt	r3, #3
   156fc:	ldr	r2, [r3, #108]	; 0x6c
   15700:	str	r4, [r2]
   15704:	str	r4, [r3, #108]	; 0x6c
   15708:	bl	11d74 <__errno_location@plt>
   1570c:	mov	r7, r0
   15710:	ldr	r8, [r0]
   15714:	add	r0, sp, #4
   15718:	bl	12a64 <__assert_fail@plt+0xb1c>
   1571c:	str	r8, [r7]
   15720:	mov	r3, #0
   15724:	strb	r3, [r4, #8]
   15728:	movw	r3, #25312	; 0x62e0
   1572c:	movt	r3, #3
   15730:	ldr	r3, [r3, #1480]	; 0x5c8
   15734:	cmp	r3, #0
   15738:	beq	1575c <__assert_fail@plt+0x3814>
   1573c:	mov	r1, #4
   15740:	add	r0, sp, r1
   15744:	bl	15380 <__assert_fail@plt+0x3438>
   15748:	str	r0, [r4, #4]
   1574c:	cmp	r0, #0
   15750:	bgt	157dc <__assert_fail@plt+0x3894>
   15754:	cmp	r0, #0
   15758:	beq	157fc <__assert_fail@plt+0x38b4>
   1575c:	movw	r1, #14272	; 0x37c0
   15760:	movt	r1, #2
   15764:	mov	r0, r5
   15768:	bl	119fc <fdopen@plt>
   1576c:	str	r0, [r9]
   15770:	cmp	r0, #0
   15774:	beq	15844 <__assert_fail@plt+0x38fc>
   15778:	mov	r0, r4
   1577c:	add	sp, sp, #136	; 0x88
   15780:	ldrd	r4, [sp]
   15784:	ldrd	r6, [sp, #8]
   15788:	ldrd	r8, [sp, #16]
   1578c:	ldr	sl, [sp, #24]
   15790:	add	sp, sp, #28
   15794:	pop	{pc}		; (ldr pc, [sp], #4)
   15798:	mov	r2, #0
   1579c:	str	r2, [r5, #1492]	; 0x5d4
   157a0:	b	156d8 <__assert_fail@plt+0x3790>
   157a4:	mov	r2, #5
   157a8:	movw	r1, #14200	; 0x3778
   157ac:	movt	r1, #2
   157b0:	mov	r0, #0
   157b4:	bl	11b58 <dcgettext@plt>
   157b8:	mov	r4, r0
   157bc:	mov	r1, r8
   157c0:	mov	r0, #4
   157c4:	bl	1f580 <__assert_fail@plt+0xd638>
   157c8:	mov	r3, r0
   157cc:	mov	r2, r4
   157d0:	mov	r1, r5
   157d4:	mov	r0, #2
   157d8:	bl	11c90 <error@plt>
   157dc:	mov	r0, r5
   157e0:	bl	11f30 <close@plt>
   157e4:	ldr	r0, [sp, #4]
   157e8:	bl	11f30 <close@plt>
   157ec:	ldr	r5, [sp, #8]
   157f0:	mov	r0, r4
   157f4:	bl	1559c <__assert_fail@plt+0x3654>
   157f8:	b	1575c <__assert_fail@plt+0x3814>
   157fc:	ldr	r0, [sp, #8]
   15800:	bl	11f30 <close@plt>
   15804:	mov	r1, #1
   15808:	mov	r0, r5
   1580c:	bl	14a04 <__assert_fail@plt+0x2abc>
   15810:	mov	r1, #0
   15814:	ldr	r0, [sp, #4]
   15818:	bl	14a04 <__assert_fail@plt+0x2abc>
   1581c:	movw	r3, #25312	; 0x62e0
   15820:	movt	r3, #3
   15824:	ldr	r0, [r3, #1480]	; 0x5c8
   15828:	mov	r2, #0
   1582c:	mov	r1, r0
   15830:	bl	11ad4 <execlp@plt>
   15834:	movw	r1, #14236	; 0x379c
   15838:	movt	r1, #2
   1583c:	ldr	r0, [r7]
   15840:	bl	15510 <__assert_fail@plt+0x35c8>
   15844:	mov	r2, #5
   15848:	movw	r1, #14276	; 0x37c4
   1584c:	movt	r1, #2
   15850:	bl	11b58 <dcgettext@plt>
   15854:	mov	r1, r6
   15858:	bl	12c64 <__assert_fail@plt+0xd1c>
   1585c:	bl	11d74 <__errno_location@plt>
   15860:	mov	r6, r0
   15864:	ldr	r5, [r0]
   15868:	add	r0, sp, #4
   1586c:	bl	12a64 <__assert_fail@plt+0xb1c>
   15870:	str	r5, [r6]
   15874:	eor	r7, r7, #1
   15878:	cmp	r5, #24
   1587c:	orrne	r7, r7, #1
   15880:	cmp	r7, #0
   15884:	bne	157a4 <__assert_fail@plt+0x385c>
   15888:	mov	r0, r4
   1588c:	bl	1b778 <__assert_fail@plt+0x9830>
   15890:	mov	r4, #0
   15894:	b	15778 <__assert_fail@plt+0x3830>
   15898:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1589c:	strd	r6, [sp, #8]
   158a0:	strd	r8, [sp, #16]
   158a4:	str	lr, [sp, #24]
   158a8:	sub	sp, sp, #12
   158ac:	mov	r4, r1
   158b0:	mov	r6, r3
   158b4:	ldr	r7, [sp, #40]	; 0x28
   158b8:	ldrb	r3, [sp, #44]	; 0x2c
   158bc:	cmp	r3, #0
   158c0:	beq	1594c <__assert_fail@plt+0x3a04>
   158c4:	ldr	r1, [r0, #20]
   158c8:	lsr	r3, r1, #1
   158cc:	sub	r1, r1, r3
   158d0:	sub	r5, r2, r7, lsl #4
   158d4:	sub	r8, r5, r3, lsl #4
   158d8:	add	r2, r0, #8
   158dc:	add	r9, r4, #72	; 0x48
   158e0:	str	r5, [r4, #8]
   158e4:	str	r5, [r4]
   158e8:	str	r8, [r4, #12]
   158ec:	str	r8, [r4, #4]
   158f0:	str	r2, [r4, #16]
   158f4:	str	r3, [r4, #20]
   158f8:	str	r1, [r4, #24]
   158fc:	str	r0, [r4, #28]
   15900:	ldr	r3, [r0, #40]	; 0x28
   15904:	add	r3, r3, #1
   15908:	str	r3, [r4, #40]	; 0x28
   1590c:	mov	r1, #0
   15910:	strb	r1, [r4, #44]	; 0x2c
   15914:	add	r0, r4, #48	; 0x30
   15918:	bl	11ae0 <pthread_mutex_init@plt>
   1591c:	cmp	r6, #1
   15920:	bhi	15968 <__assert_fail@plt+0x3a20>
   15924:	mov	r3, #0
   15928:	str	r3, [r4, #32]
   1592c:	str	r3, [r4, #36]	; 0x24
   15930:	mov	r0, r9
   15934:	add	sp, sp, #12
   15938:	ldrd	r4, [sp]
   1593c:	ldrd	r6, [sp, #8]
   15940:	ldrd	r8, [sp, #16]
   15944:	add	sp, sp, #24
   15948:	pop	{pc}		; (ldr pc, [sp], #4)
   1594c:	ldr	r1, [r0, #24]
   15950:	lsr	r3, r1, #1
   15954:	sub	r1, r1, r3
   15958:	sub	r5, r2, r7, lsl #4
   1595c:	sub	r8, r5, r3, lsl #4
   15960:	add	r2, r0, #12
   15964:	b	158dc <__assert_fail@plt+0x3994>
   15968:	lsr	r3, r6, #1
   1596c:	sub	r6, r6, r3
   15970:	str	r9, [r4, #32]
   15974:	mov	r2, #1
   15978:	str	r2, [sp, #4]
   1597c:	str	r7, [sp]
   15980:	mov	r2, r5
   15984:	mov	r1, r9
   15988:	mov	r0, r4
   1598c:	bl	15898 <__assert_fail@plt+0x3950>
   15990:	mov	r1, r0
   15994:	str	r0, [r4, #36]	; 0x24
   15998:	mov	r3, #0
   1599c:	str	r3, [sp, #4]
   159a0:	str	r7, [sp]
   159a4:	mov	r3, r6
   159a8:	mov	r2, r8
   159ac:	mov	r0, r4
   159b0:	bl	15898 <__assert_fail@plt+0x3950>
   159b4:	mov	r9, r0
   159b8:	b	15930 <__assert_fail@plt+0x39e8>
   159bc:	strd	r4, [sp, #-16]!
   159c0:	str	r6, [sp, #8]
   159c4:	str	lr, [sp, #12]
   159c8:	mov	r4, r0
   159cc:	mov	r6, r1
   159d0:	add	r5, r0, #4
   159d4:	mov	r0, r5
   159d8:	bl	11a98 <pthread_mutex_lock@plt>
   159dc:	mov	r1, r6
   159e0:	ldr	r0, [r4], #32
   159e4:	bl	1ca9c <__assert_fail@plt+0xab54>
   159e8:	mov	r3, #1
   159ec:	strb	r3, [r6, #44]	; 0x2c
   159f0:	mov	r0, r4
   159f4:	bl	11f18 <pthread_cond_signal@plt>
   159f8:	mov	r0, r5
   159fc:	bl	119f0 <pthread_mutex_unlock@plt>
   15a00:	ldrd	r4, [sp]
   15a04:	ldr	r6, [sp, #8]
   15a08:	add	sp, sp, #12
   15a0c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a10:	ldrb	r3, [r1, #44]	; 0x2c
   15a14:	cmp	r3, #0
   15a18:	bxne	lr
   15a1c:	str	r4, [sp, #-8]!
   15a20:	str	lr, [sp, #4]
   15a24:	ldr	r2, [r1, #4]
   15a28:	ldr	r3, [r1, #12]
   15a2c:	ldr	lr, [r1]
   15a30:	ldr	ip, [r1, #8]
   15a34:	cmp	lr, ip
   15a38:	beq	15a64 <__assert_fail@plt+0x3b1c>
   15a3c:	cmp	r2, r3
   15a40:	ldreq	r3, [r1, #24]
   15a44:	clzeq	r3, r3
   15a48:	lsreq	r3, r3, #5
   15a4c:	movne	r3, #1
   15a50:	cmp	r3, #0
   15a54:	bne	15a7c <__assert_fail@plt+0x3b34>
   15a58:	ldr	r4, [sp]
   15a5c:	add	sp, sp, #4
   15a60:	pop	{pc}		; (ldr pc, [sp], #4)
   15a64:	cmp	r2, r3
   15a68:	ldrne	r3, [r1, #20]
   15a6c:	clzne	r3, r3
   15a70:	lsrne	r3, r3, #5
   15a74:	moveq	r3, #0
   15a78:	b	15a50 <__assert_fail@plt+0x3b08>
   15a7c:	bl	159bc <__assert_fail@plt+0x3a74>
   15a80:	b	15a58 <__assert_fail@plt+0x3b10>
   15a84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15a88:	strd	r6, [sp, #8]
   15a8c:	strd	r8, [sp, #16]
   15a90:	strd	sl, [sp, #24]
   15a94:	str	lr, [sp, #32]
   15a98:	sub	sp, sp, #68	; 0x44
   15a9c:	mov	r7, r0
   15aa0:	mov	sl, r2
   15aa4:	mov	r4, r3
   15aa8:	ldr	r6, [sp, #104]	; 0x68
   15aac:	ldr	r3, [r3, #20]
   15ab0:	ldr	r2, [r4, #24]
   15ab4:	add	r3, r3, r2
   15ab8:	lsr	r8, r1, #1
   15abc:	str	r0, [sp, #32]
   15ac0:	str	r8, [sp, #36]	; 0x24
   15ac4:	str	sl, [sp, #40]	; 0x28
   15ac8:	ldr	r2, [r4, #32]
   15acc:	str	r2, [sp, #44]	; 0x2c
   15ad0:	str	r6, [sp, #48]	; 0x30
   15ad4:	ldr	r2, [sp, #108]	; 0x6c
   15ad8:	str	r2, [sp, #52]	; 0x34
   15adc:	ldr	r2, [sp, #112]	; 0x70
   15ae0:	str	r2, [sp, #56]	; 0x38
   15ae4:	cmp	r3, #131072	; 0x20000
   15ae8:	cmpcs	r1, #1
   15aec:	bhi	15b50 <__assert_fail@plt+0x3c08>
   15af0:	ldr	r5, [r4, #20]
   15af4:	ldr	r8, [r4, #24]
   15af8:	sub	r9, r7, sl, lsl #4
   15afc:	cmp	r8, #1
   15b00:	bhi	15bb0 <__assert_fail@plt+0x3c68>
   15b04:	cmp	r5, #1
   15b08:	bhi	15bcc <__assert_fail@plt+0x3c84>
   15b0c:	str	r7, [r4]
   15b10:	lsl	r5, r5, #4
   15b14:	rsb	r5, r5, #0
   15b18:	add	r3, r7, r5
   15b1c:	str	r3, [r4, #4]
   15b20:	str	r3, [r4, #8]
   15b24:	sub	r5, r5, r8, lsl #4
   15b28:	add	r5, r7, r5
   15b2c:	str	r5, [r4, #12]
   15b30:	mov	r1, r4
   15b34:	mov	r0, r6
   15b38:	bl	159bc <__assert_fail@plt+0x3a74>
   15b3c:	add	r3, r6, #4
   15b40:	str	r3, [sp, #20]
   15b44:	add	r3, r6, #32
   15b48:	str	r3, [sp, #28]
   15b4c:	b	15e9c <__assert_fail@plt+0x3f54>
   15b50:	mov	r5, r1
   15b54:	add	r3, sp, #32
   15b58:	movw	r2, #24608	; 0x6020
   15b5c:	movt	r2, #1
   15b60:	mov	r1, #0
   15b64:	add	r0, sp, #60	; 0x3c
   15b68:	bl	11c6c <pthread_create@plt>
   15b6c:	cmp	r0, #0
   15b70:	bne	15af0 <__assert_fail@plt+0x3ba8>
   15b74:	ldr	r0, [r4, #20]
   15b78:	ldr	r3, [sp, #112]	; 0x70
   15b7c:	str	r3, [sp, #8]
   15b80:	ldr	r3, [sp, #108]	; 0x6c
   15b84:	str	r3, [sp, #4]
   15b88:	str	r6, [sp]
   15b8c:	ldr	r3, [r4, #36]	; 0x24
   15b90:	mov	r2, sl
   15b94:	sub	r1, r5, r8
   15b98:	sub	r0, r7, r0, lsl #4
   15b9c:	bl	15a84 <__assert_fail@plt+0x3b3c>
   15ba0:	mov	r1, #0
   15ba4:	ldr	r0, [sp, #60]	; 0x3c
   15ba8:	bl	11e64 <pthread_join@plt>
   15bac:	b	15c50 <__assert_fail@plt+0x3d08>
   15bb0:	lsr	r2, r5, #1
   15bb4:	mov	r3, #0
   15bb8:	sub	r2, r9, r2, lsl #4
   15bbc:	mov	r1, r8
   15bc0:	sub	r0, r7, r5, lsl #4
   15bc4:	bl	14444 <__assert_fail@plt+0x24fc>
   15bc8:	b	15b04 <__assert_fail@plt+0x3bbc>
   15bcc:	mov	r3, #0
   15bd0:	mov	r2, r9
   15bd4:	mov	r1, r5
   15bd8:	mov	r0, r7
   15bdc:	bl	14444 <__assert_fail@plt+0x24fc>
   15be0:	b	15b0c <__assert_fail@plt+0x3bc4>
   15be4:	mov	r4, r0
   15be8:	ldr	r0, [sp, #20]
   15bec:	bl	119f0 <pthread_mutex_unlock@plt>
   15bf0:	add	fp, r4, #48	; 0x30
   15bf4:	mov	r0, fp
   15bf8:	bl	11a98 <pthread_mutex_lock@plt>
   15bfc:	mov	r3, #0
   15c00:	strb	r3, [r4, #44]	; 0x2c
   15c04:	ldr	r3, [r4, #40]	; 0x28
   15c08:	cmp	r3, #0
   15c0c:	beq	15c3c <__assert_fail@plt+0x3cf4>
   15c10:	ldr	r8, [r4]
   15c14:	ldr	r7, [r4, #4]
   15c18:	add	r2, r3, #1
   15c1c:	lsl	r2, r2, #1
   15c20:	lsr	r2, sl, r2
   15c24:	add	r2, r2, #1
   15c28:	cmp	r3, #1
   15c2c:	bls	15dc8 <__assert_fail@plt+0x3e80>
   15c30:	ldr	r3, [r4, #16]
   15c34:	ldr	r9, [r3]
   15c38:	b	15c90 <__assert_fail@plt+0x3d48>
   15c3c:	mov	r0, fp
   15c40:	bl	119f0 <pthread_mutex_unlock@plt>
   15c44:	mov	r1, r4
   15c48:	mov	r0, r6
   15c4c:	bl	159bc <__assert_fail@plt+0x3a74>
   15c50:	add	sp, sp, #68	; 0x44
   15c54:	ldrd	r4, [sp]
   15c58:	ldrd	r6, [sp, #8]
   15c5c:	ldrd	r8, [sp, #16]
   15c60:	ldrd	sl, [sp, #24]
   15c64:	add	sp, sp, #32
   15c68:	pop	{pc}		; (ldr pc, [sp], #4)
   15c6c:	ldr	r3, [r4]
   15c70:	sub	r1, r3, #16
   15c74:	str	r1, [r4]
   15c78:	ldrd	r2, [r3, #-16]
   15c7c:	strd	r2, [r5, #-16]
   15c80:	ldrd	r2, [r1, #8]
   15c84:	strd	r2, [r5, #-8]
   15c88:	sub	r9, r9, #16
   15c8c:	ldr	r2, [sp, #24]
   15c90:	mov	r5, r9
   15c94:	ldr	r0, [r4]
   15c98:	ldr	r3, [r4, #8]
   15c9c:	cmp	r0, r3
   15ca0:	beq	15f60 <__assert_fail@plt+0x4018>
   15ca4:	ldr	r1, [r4, #4]
   15ca8:	ldr	ip, [r4, #12]
   15cac:	cmp	r1, ip
   15cb0:	beq	15ed4 <__assert_fail@plt+0x3f8c>
   15cb4:	sub	ip, r2, #1
   15cb8:	str	ip, [sp, #24]
   15cbc:	cmp	r2, #0
   15cc0:	beq	15cf8 <__assert_fail@plt+0x3db0>
   15cc4:	sub	r1, r1, #16
   15cc8:	sub	r0, r0, #16
   15ccc:	bl	14324 <__assert_fail@plt+0x23dc>
   15cd0:	cmp	r0, #0
   15cd4:	ble	15c6c <__assert_fail@plt+0x3d24>
   15cd8:	ldr	r3, [r4, #4]
   15cdc:	sub	r1, r3, #16
   15ce0:	str	r1, [r4, #4]
   15ce4:	ldrd	r2, [r3, #-16]
   15ce8:	strd	r2, [r5, #-16]
   15cec:	ldrd	r2, [r1, #8]
   15cf0:	strd	r2, [r5, #-8]
   15cf4:	b	15c88 <__assert_fail@plt+0x3d40>
   15cf8:	sub	r2, r7, r1
   15cfc:	ldr	ip, [r4, #24]
   15d00:	cmp	ip, r2, asr #4
   15d04:	mvnne	r2, #0
   15d08:	bne	15ee4 <__assert_fail@plt+0x3f9c>
   15d0c:	mvn	r2, #0
   15d10:	mvn	ip, #1
   15d14:	sub	lr, r0, #16
   15d18:	sub	r2, r0, r2, lsl #4
   15d1c:	str	lr, [r4]
   15d20:	lsl	r1, ip, #4
   15d24:	add	r9, r2, r1
   15d28:	ldrd	r0, [r1, r2]
   15d2c:	strd	r0, [r5, #-16]!
   15d30:	ldrd	r0, [r9, #8]
   15d34:	strd	r0, [r5, #8]
   15d38:	cmp	r3, lr
   15d3c:	beq	15ef8 <__assert_fail@plt+0x3fb0>
   15d40:	sub	ip, ip, #1
   15d44:	sub	lr, lr, #16
   15d48:	cmn	ip, #1
   15d4c:	bne	15d1c <__assert_fail@plt+0x3dd4>
   15d50:	b	15ef8 <__assert_fail@plt+0x3fb0>
   15d54:	ldr	lr, [r4, #12]
   15d58:	cmp	lr, r1
   15d5c:	beq	15ef8 <__assert_fail@plt+0x3fb0>
   15d60:	sub	r3, r2, #1
   15d64:	cmp	r2, #0
   15d68:	beq	15ef8 <__assert_fail@plt+0x3fb0>
   15d6c:	sub	ip, r1, #16
   15d70:	sub	r2, r1, r2, lsl #4
   15d74:	str	ip, [r4, #4]
   15d78:	lsl	r1, r3, #4
   15d7c:	add	r9, r2, r1
   15d80:	ldrd	r0, [r1, r2]
   15d84:	strd	r0, [r5, #-16]!
   15d88:	ldrd	r0, [r9, #8]
   15d8c:	strd	r0, [r5, #8]
   15d90:	cmp	ip, lr
   15d94:	beq	15ef8 <__assert_fail@plt+0x3fb0>
   15d98:	sub	r3, r3, #1
   15d9c:	sub	ip, ip, #16
   15da0:	cmn	r3, #1
   15da4:	bne	15d74 <__assert_fail@plt+0x3e2c>
   15da8:	b	15ef8 <__assert_fail@plt+0x3fb0>
   15dac:	ldr	r0, [r4]
   15db0:	sub	r0, r0, #16
   15db4:	str	r0, [r4]
   15db8:	ldr	r2, [sp, #112]	; 0x70
   15dbc:	ldr	r1, [sp, #108]	; 0x6c
   15dc0:	bl	14660 <__assert_fail@plt+0x2718>
   15dc4:	mov	r2, r5
   15dc8:	ldr	r0, [r4]
   15dcc:	ldr	r3, [r4, #8]
   15dd0:	cmp	r0, r3
   15dd4:	beq	16000 <__assert_fail@plt+0x40b8>
   15dd8:	ldr	r1, [r4, #4]
   15ddc:	ldr	r3, [r4, #12]
   15de0:	cmp	r1, r3
   15de4:	beq	15f90 <__assert_fail@plt+0x4048>
   15de8:	sub	r5, r2, #1
   15dec:	cmp	r2, #0
   15df0:	beq	15e24 <__assert_fail@plt+0x3edc>
   15df4:	sub	r1, r1, #16
   15df8:	sub	r0, r0, #16
   15dfc:	bl	14324 <__assert_fail@plt+0x23dc>
   15e00:	cmp	r0, #0
   15e04:	ble	15dac <__assert_fail@plt+0x3e64>
   15e08:	ldr	r0, [r4, #4]
   15e0c:	sub	r0, r0, #16
   15e10:	str	r0, [r4, #4]
   15e14:	ldr	r2, [sp, #112]	; 0x70
   15e18:	ldr	r1, [sp, #108]	; 0x6c
   15e1c:	bl	14660 <__assert_fail@plt+0x2718>
   15e20:	b	15dc4 <__assert_fail@plt+0x3e7c>
   15e24:	sub	r3, r7, r1
   15e28:	ldr	r2, [r4, #24]
   15e2c:	cmp	r2, r3, asr #4
   15e30:	mvnne	r2, #0
   15e34:	bne	15fa0 <__assert_fail@plt+0x4058>
   15e38:	mvn	r5, #1
   15e3c:	sub	r0, r0, #16
   15e40:	str	r0, [r4]
   15e44:	ldr	r2, [sp, #112]	; 0x70
   15e48:	ldr	r1, [sp, #108]	; 0x6c
   15e4c:	bl	14660 <__assert_fail@plt+0x2718>
   15e50:	ldr	r0, [r4]
   15e54:	ldr	r3, [r4, #8]
   15e58:	cmp	r0, r3
   15e5c:	beq	15f00 <__assert_fail@plt+0x3fb8>
   15e60:	sub	r5, r5, #1
   15e64:	cmn	r5, #1
   15e68:	bne	15e3c <__assert_fail@plt+0x3ef4>
   15e6c:	b	15f00 <__assert_fail@plt+0x3fb8>
   15e70:	ldr	r0, [r4, #28]
   15e74:	add	r0, r0, #48	; 0x30
   15e78:	bl	11a98 <pthread_mutex_lock@plt>
   15e7c:	ldr	r1, [r4, #28]
   15e80:	mov	r0, r6
   15e84:	bl	15a10 <__assert_fail@plt+0x3ac8>
   15e88:	ldr	r0, [r4, #28]
   15e8c:	add	r0, r0, #48	; 0x30
   15e90:	bl	119f0 <pthread_mutex_unlock@plt>
   15e94:	mov	r0, fp
   15e98:	bl	119f0 <pthread_mutex_unlock@plt>
   15e9c:	ldr	r0, [sp, #20]
   15ea0:	bl	11a98 <pthread_mutex_lock@plt>
   15ea4:	ldr	r0, [r6]
   15ea8:	bl	1cb54 <__assert_fail@plt+0xac0c>
   15eac:	cmp	r0, #0
   15eb0:	bne	15be4 <__assert_fail@plt+0x3c9c>
   15eb4:	ldr	r1, [sp, #20]
   15eb8:	ldr	r0, [sp, #28]
   15ebc:	bl	11eb8 <pthread_cond_wait@plt>
   15ec0:	b	15ea4 <__assert_fail@plt+0x3f5c>
   15ec4:	sub	ip, r2, #1
   15ec8:	cmp	r2, #0
   15ecc:	bne	15d14 <__assert_fail@plt+0x3dcc>
   15ed0:	b	15ef8 <__assert_fail@plt+0x3fb0>
   15ed4:	sub	ip, r7, r1
   15ed8:	ldr	lr, [r4, #24]
   15edc:	cmp	lr, ip, asr #4
   15ee0:	beq	15ec4 <__assert_fail@plt+0x3f7c>
   15ee4:	sub	r0, r8, r0
   15ee8:	asr	r0, r0, #4
   15eec:	ldr	r3, [r4, #20]
   15ef0:	cmp	r3, r0
   15ef4:	beq	15d54 <__assert_fail@plt+0x3e0c>
   15ef8:	ldr	r3, [r4, #16]
   15efc:	str	r5, [r3]
   15f00:	ldr	r3, [r4, #4]
   15f04:	sub	r3, r7, r3
   15f08:	ldr	r2, [r4]
   15f0c:	sub	r2, r8, r2
   15f10:	ldr	r8, [r4, #20]
   15f14:	sub	r8, r8, r2, asr #4
   15f18:	str	r8, [r4, #20]
   15f1c:	ldr	r7, [r4, #24]
   15f20:	sub	r7, r7, r3, asr #4
   15f24:	str	r7, [r4, #24]
   15f28:	mov	r1, r4
   15f2c:	mov	r0, r6
   15f30:	bl	15a10 <__assert_fail@plt+0x3ac8>
   15f34:	ldr	r3, [r4, #40]	; 0x28
   15f38:	cmp	r3, #1
   15f3c:	bhi	15e70 <__assert_fail@plt+0x3f28>
   15f40:	ldr	r3, [r4, #20]
   15f44:	ldr	r2, [r4, #24]
   15f48:	cmn	r3, r2
   15f4c:	bne	15e94 <__assert_fail@plt+0x3f4c>
   15f50:	ldr	r1, [r4, #28]
   15f54:	mov	r0, r6
   15f58:	bl	159bc <__assert_fail@plt+0x3a74>
   15f5c:	b	15e94 <__assert_fail@plt+0x3f4c>
   15f60:	sub	r0, r8, r3
   15f64:	asr	r0, r0, #4
   15f68:	ldr	r1, [r4, #4]
   15f6c:	sub	ip, r7, r1
   15f70:	ldr	r3, [r4, #24]
   15f74:	cmp	r3, ip, asr #4
   15f78:	bne	15eec <__assert_fail@plt+0x3fa4>
   15f7c:	b	15ef8 <__assert_fail@plt+0x3fb0>
   15f80:	sub	r5, r2, #1
   15f84:	cmp	r2, #0
   15f88:	bne	15e3c <__assert_fail@plt+0x3ef4>
   15f8c:	b	15f00 <__assert_fail@plt+0x3fb8>
   15f90:	sub	r3, r7, r1
   15f94:	ldr	ip, [r4, #24]
   15f98:	cmp	ip, r3, asr #4
   15f9c:	beq	15f80 <__assert_fail@plt+0x4038>
   15fa0:	sub	r0, r8, r0
   15fa4:	asr	r3, r0, #4
   15fa8:	ldr	r0, [r4, #20]
   15fac:	cmp	r0, r3
   15fb0:	bne	15f00 <__assert_fail@plt+0x3fb8>
   15fb4:	ldr	r3, [r4, #12]
   15fb8:	cmp	r3, r1
   15fbc:	beq	15f00 <__assert_fail@plt+0x3fb8>
   15fc0:	sub	r5, r2, #1
   15fc4:	cmp	r2, #0
   15fc8:	beq	15f00 <__assert_fail@plt+0x3fb8>
   15fcc:	sub	r0, r1, #16
   15fd0:	str	r0, [r4, #4]
   15fd4:	ldr	r2, [sp, #112]	; 0x70
   15fd8:	ldr	r1, [sp, #108]	; 0x6c
   15fdc:	bl	14660 <__assert_fail@plt+0x2718>
   15fe0:	ldr	r1, [r4, #4]
   15fe4:	ldr	r3, [r4, #12]
   15fe8:	cmp	r1, r3
   15fec:	beq	15f00 <__assert_fail@plt+0x3fb8>
   15ff0:	sub	r5, r5, #1
   15ff4:	cmn	r5, #1
   15ff8:	bne	15fcc <__assert_fail@plt+0x4084>
   15ffc:	b	15f00 <__assert_fail@plt+0x3fb8>
   16000:	sub	r3, r8, r3
   16004:	asr	r3, r3, #4
   16008:	ldr	r1, [r4, #4]
   1600c:	sub	ip, r7, r1
   16010:	ldr	r0, [r4, #24]
   16014:	cmp	r0, ip, asr #4
   16018:	bne	15fa8 <__assert_fail@plt+0x4060>
   1601c:	b	15f00 <__assert_fail@plt+0x3fb8>
   16020:	push	{lr}		; (str lr, [sp, #-4]!)
   16024:	sub	sp, sp, #20
   16028:	ldr	r3, [r0, #24]
   1602c:	str	r3, [sp, #8]
   16030:	ldr	r3, [r0, #20]
   16034:	str	r3, [sp, #4]
   16038:	ldr	r3, [r0, #16]
   1603c:	str	r3, [sp]
   16040:	ldr	r3, [r0, #12]
   16044:	ldr	r2, [r0, #8]
   16048:	ldr	r1, [r0, #4]
   1604c:	ldr	r0, [r0]
   16050:	bl	15a84 <__assert_fail@plt+0x3b3c>
   16054:	mov	r0, #0
   16058:	add	sp, sp, #20
   1605c:	pop	{pc}		; (ldr pc, [sp], #4)
   16060:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16064:	strd	r6, [sp, #8]
   16068:	strd	r8, [sp, #16]
   1606c:	strd	sl, [sp, #24]
   16070:	str	lr, [sp, #32]
   16074:	sub	sp, sp, #20
   16078:	mov	r5, r0
   1607c:	mov	r8, r1
   16080:	mov	r4, r2
   16084:	mov	r1, #4
   16088:	mov	r0, r8
   1608c:	bl	211f0 <__assert_fail@plt+0xf2a8>
   16090:	str	r0, [r4]
   16094:	cmp	r8, #0
   16098:	beq	1626c <__assert_fail@plt+0x4324>
   1609c:	sub	r6, r0, #4
   160a0:	mov	r4, #0
   160a4:	movw	r9, #14404	; 0x3844
   160a8:	movt	r9, #2
   160ac:	b	161c8 <__assert_fail@plt+0x4280>
   160b0:	ldr	sl, [fp, #4]
   160b4:	mov	r0, sl
   160b8:	bl	14a30 <__assert_fail@plt+0x2ae8>
   160bc:	cmp	r0, #0
   160c0:	beq	161f0 <__assert_fail@plt+0x42a8>
   160c4:	mov	r0, sl
   160c8:	bl	14a6c <__assert_fail@plt+0x2b24>
   160cc:	b	161f0 <__assert_fail@plt+0x42a8>
   160d0:	bl	11d74 <__errno_location@plt>
   160d4:	mov	fp, r0
   160d8:	ldr	r7, [r0]
   160dc:	cmp	r7, #24
   160e0:	bne	160fc <__assert_fail@plt+0x41b4>
   160e4:	mov	r0, sl
   160e8:	bl	11f30 <close@plt>
   160ec:	mov	r3, #24
   160f0:	str	r3, [fp]
   160f4:	mov	sl, #0
   160f8:	b	161a8 <__assert_fail@plt+0x4260>
   160fc:	mov	r2, #5
   16100:	movw	r1, #14320	; 0x37f0
   16104:	movt	r1, #2
   16108:	mov	r0, #0
   1610c:	bl	11b58 <dcgettext@plt>
   16110:	mov	r4, r0
   16114:	movw	r3, #25312	; 0x62e0
   16118:	movt	r3, #3
   1611c:	ldr	r1, [r3, #1480]	; 0x5c8
   16120:	mov	r0, #4
   16124:	bl	1f580 <__assert_fail@plt+0xd638>
   16128:	mov	r3, r0
   1612c:	mov	r2, r4
   16130:	mov	r1, r7
   16134:	mov	r0, #2
   16138:	bl	11c90 <error@plt>
   1613c:	ldr	r0, [sp, #8]
   16140:	bl	11f30 <close@plt>
   16144:	mov	r1, #0
   16148:	mov	r0, sl
   1614c:	bl	14a04 <__assert_fail@plt+0x2abc>
   16150:	mov	r1, #1
   16154:	ldr	r0, [sp, #12]
   16158:	bl	14a04 <__assert_fail@plt+0x2abc>
   1615c:	movw	r3, #25312	; 0x62e0
   16160:	movt	r3, #3
   16164:	ldr	r0, [r3, #1480]	; 0x5c8
   16168:	mov	r3, #0
   1616c:	movw	r2, #14356	; 0x3814
   16170:	movt	r2, #2
   16174:	mov	r1, r0
   16178:	bl	11ad4 <execlp@plt>
   1617c:	bl	11d74 <__errno_location@plt>
   16180:	movw	r1, #14360	; 0x3818
   16184:	movt	r1, #2
   16188:	ldr	r0, [r0]
   1618c:	bl	15510 <__assert_fail@plt+0x35c8>
   16190:	mov	sl, #0
   16194:	b	161a8 <__assert_fail@plt+0x4260>
   16198:	mov	r1, r9
   1619c:	ldr	r0, [r2]
   161a0:	bl	12d44 <__assert_fail@plt+0xdfc>
   161a4:	mov	sl, r0
   161a8:	str	sl, [r6, #4]!
   161ac:	cmp	sl, #0
   161b0:	beq	16270 <__assert_fail@plt+0x4328>
   161b4:	add	r4, r4, #1
   161b8:	str	r4, [sp, #4]
   161bc:	add	r5, r5, #8
   161c0:	cmp	r4, r8
   161c4:	beq	16270 <__assert_fail@plt+0x4328>
   161c8:	str	r4, [sp, #4]
   161cc:	mov	r2, r5
   161d0:	ldr	fp, [r5, #4]
   161d4:	cmp	fp, #0
   161d8:	beq	16198 <__assert_fail@plt+0x4250>
   161dc:	ldrb	r3, [fp, #8]
   161e0:	cmp	r3, #0
   161e4:	beq	16198 <__assert_fail@plt+0x4250>
   161e8:	cmp	r3, #1
   161ec:	beq	160b0 <__assert_fail@plt+0x4168>
   161f0:	mov	r1, #0
   161f4:	add	r0, fp, #9
   161f8:	bl	11c9c <open64@plt>
   161fc:	subs	sl, r0, #0
   16200:	blt	16190 <__assert_fail@plt+0x4248>
   16204:	mov	r1, #9
   16208:	add	r0, sp, #8
   1620c:	bl	15380 <__assert_fail@plt+0x3438>
   16210:	cmn	r0, #1
   16214:	beq	160d0 <__assert_fail@plt+0x4188>
   16218:	cmp	r0, #0
   1621c:	beq	1613c <__assert_fail@plt+0x41f4>
   16220:	str	r0, [fp, #4]
   16224:	mov	r0, fp
   16228:	bl	1559c <__assert_fail@plt+0x3654>
   1622c:	mov	r0, sl
   16230:	bl	11f30 <close@plt>
   16234:	ldr	r0, [sp, #12]
   16238:	bl	11f30 <close@plt>
   1623c:	mov	r1, r9
   16240:	ldr	r0, [sp, #8]
   16244:	bl	119fc <fdopen@plt>
   16248:	subs	sl, r0, #0
   1624c:	bne	161a8 <__assert_fail@plt+0x4260>
   16250:	bl	11d74 <__errno_location@plt>
   16254:	mov	fp, r0
   16258:	ldr	r7, [r0]
   1625c:	ldr	r0, [sp, #8]
   16260:	bl	11f30 <close@plt>
   16264:	str	r7, [fp]
   16268:	b	161a8 <__assert_fail@plt+0x4260>
   1626c:	str	r8, [sp, #4]
   16270:	ldr	r0, [sp, #4]
   16274:	add	sp, sp, #20
   16278:	ldrd	r4, [sp]
   1627c:	ldrd	r6, [sp, #8]
   16280:	ldrd	r8, [sp, #16]
   16284:	ldrd	sl, [sp, #24]
   16288:	add	sp, sp, #32
   1628c:	pop	{pc}		; (ldr pc, [sp], #4)
   16290:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16294:	strd	r6, [sp, #8]
   16298:	strd	r8, [sp, #16]
   1629c:	str	lr, [sp, #24]
   162a0:	sub	sp, sp, #20
   162a4:	mov	r6, r0
   162a8:	mov	r7, r1
   162ac:	mov	r9, r2
   162b0:	mov	r8, r3
   162b4:	add	r2, sp, #12
   162b8:	mov	r1, r9
   162bc:	bl	16060 <__assert_fail@plt+0x4118>
   162c0:	mov	r5, r0
   162c4:	cmp	r9, r0
   162c8:	movls	r4, #0
   162cc:	movhi	r4, #1
   162d0:	cmp	r0, #1
   162d4:	movhi	r4, #0
   162d8:	cmp	r4, #0
   162dc:	bne	16320 <__assert_fail@plt+0x43d8>
   162e0:	ldr	r3, [sp, #12]
   162e4:	str	r3, [sp, #4]
   162e8:	ldr	r3, [sp, #48]	; 0x30
   162ec:	str	r3, [sp]
   162f0:	mov	r3, r8
   162f4:	mov	r2, r0
   162f8:	mov	r1, r7
   162fc:	mov	r0, r6
   16300:	bl	14cb4 <__assert_fail@plt+0x2d6c>
   16304:	mov	r0, r5
   16308:	add	sp, sp, #20
   1630c:	ldrd	r4, [sp]
   16310:	ldrd	r6, [sp, #8]
   16314:	ldrd	r8, [sp, #16]
   16318:	add	sp, sp, #24
   1631c:	pop	{pc}		; (ldr pc, [sp], #4)
   16320:	mov	r2, #5
   16324:	movw	r1, #13908	; 0x3654
   16328:	movt	r1, #2
   1632c:	mov	r0, #0
   16330:	bl	11b58 <dcgettext@plt>
   16334:	ldr	r1, [r6, r5, lsl #3]
   16338:	bl	12c64 <__assert_fail@plt+0xd1c>
   1633c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16340:	strd	r6, [sp, #8]
   16344:	strd	r8, [sp, #16]
   16348:	strd	sl, [sp, #24]
   1634c:	str	lr, [sp, #32]
   16350:	sub	sp, sp, #140	; 0x8c
   16354:	mov	r5, r0
   16358:	mov	r6, r1
   1635c:	mov	r4, r2
   16360:	str	r3, [sp, #8]
   16364:	movw	r3, #25060	; 0x61e4
   16368:	movt	r3, #3
   1636c:	ldr	r3, [r3, #112]	; 0x70
   16370:	cmp	r2, r3
   16374:	bls	164b0 <__assert_fail@plt+0x4568>
   16378:	movw	sl, #25060	; 0x61e4
   1637c:	movt	sl, #3
   16380:	b	163b0 <__assert_fail@plt+0x4468>
   16384:	sub	r2, r4, r8
   16388:	lsl	r2, r2, #3
   1638c:	add	r1, r5, r8, lsl #3
   16390:	add	r0, r5, r7, lsl #3
   16394:	bl	11a80 <memmove@plt>
   16398:	add	r6, r6, r7
   1639c:	sub	r7, r7, r8
   163a0:	add	r4, r4, r7
   163a4:	ldr	r3, [sl, #112]	; 0x70
   163a8:	cmp	r3, r4
   163ac:	bcs	164b0 <__assert_fail@plt+0x4568>
   163b0:	ldr	r9, [sl, #112]	; 0x70
   163b4:	cmp	r9, r4
   163b8:	movhi	r3, r4
   163bc:	movhi	r7, #0
   163c0:	movhi	r8, r7
   163c4:	bhi	16434 <__assert_fail@plt+0x44ec>
   163c8:	mov	r7, #0
   163cc:	mov	r8, r7
   163d0:	mov	r1, #0
   163d4:	add	r0, sp, #32
   163d8:	bl	15630 <__assert_fail@plt+0x36e8>
   163dc:	mov	r9, r0
   163e0:	ldr	r1, [sl, #112]	; 0x70
   163e4:	add	fp, r0, #9
   163e8:	str	fp, [sp]
   163ec:	ldr	r3, [sp, #32]
   163f0:	mov	r2, r1
   163f4:	cmp	r1, r6
   163f8:	movcs	r1, r6
   163fc:	add	r0, r5, r8, lsl #3
   16400:	bl	16290 <__assert_fail@plt+0x4348>
   16404:	cmp	r0, r6
   16408:	subls	r6, r6, r0
   1640c:	subhi	r6, r6, r6
   16410:	str	fp, [r5, r7, lsl #3]
   16414:	add	r3, r5, #4
   16418:	str	r9, [r3, r7, lsl #3]
   1641c:	add	r8, r8, r0
   16420:	add	r7, r7, #1
   16424:	sub	r3, r4, r8
   16428:	ldr	r9, [sl, #112]	; 0x70
   1642c:	cmp	r3, r9
   16430:	bcs	163d0 <__assert_fail@plt+0x4488>
   16434:	udiv	r2, r7, r9
   16438:	mls	r2, r9, r2, r7
   1643c:	sub	r1, r9, r2
   16440:	cmp	r1, r3
   16444:	bcs	16384 <__assert_fail@plt+0x443c>
   16448:	add	r3, r3, #1
   1644c:	add	r3, r3, r2
   16450:	sub	r9, r3, r9
   16454:	mov	r1, #0
   16458:	add	r0, sp, #32
   1645c:	bl	15630 <__assert_fail@plt+0x36e8>
   16460:	str	r0, [sp, #12]
   16464:	add	fp, r0, #9
   16468:	str	fp, [sp]
   1646c:	ldr	r3, [sp, #32]
   16470:	mov	r2, r9
   16474:	cmp	r9, r6
   16478:	movcc	r1, r9
   1647c:	movcs	r1, r6
   16480:	add	r0, r5, r8, lsl #3
   16484:	bl	16290 <__assert_fail@plt+0x4348>
   16488:	cmp	r0, r6
   1648c:	subls	r6, r6, r0
   16490:	subhi	r6, r6, r6
   16494:	add	r3, r5, r7, lsl #3
   16498:	str	fp, [r5, r7, lsl #3]
   1649c:	ldr	r2, [sp, #12]
   164a0:	str	r2, [r3, #4]
   164a4:	add	r7, r7, #1
   164a8:	add	r8, r8, r0
   164ac:	b	16384 <__assert_fail@plt+0x443c>
   164b0:	cmp	r6, r4
   164b4:	bcs	165f8 <__assert_fail@plt+0x46b0>
   164b8:	add	sl, r5, r6, lsl #3
   164bc:	mov	r9, r6
   164c0:	mov	r8, #0
   164c4:	movw	r3, #13824	; 0x3600
   164c8:	movt	r3, #2
   164cc:	str	r3, [sp, #16]
   164d0:	str	r6, [sp, #20]
   164d4:	mov	r6, r4
   164d8:	ldr	r7, [sp, #8]
   164dc:	b	16538 <__assert_fail@plt+0x45f0>
   164e0:	add	r2, sp, #32
   164e4:	ldr	r1, [r5, r9, lsl #3]
   164e8:	mov	r0, #3
   164ec:	bl	11f00 <__xstat64@plt>
   164f0:	cmp	r0, #0
   164f4:	bne	16528 <__assert_fail@plt+0x45e0>
   164f8:	b	165a8 <__assert_fail@plt+0x4660>
   164fc:	ldrd	r0, [r4]
   16500:	ldrd	r2, [sp, #32]
   16504:	cmp	r3, r1
   16508:	cmpeq	r2, r0
   1650c:	bne	16528 <__assert_fail@plt+0x45e0>
   16510:	cmp	r8, #0
   16514:	beq	165c0 <__assert_fail@plt+0x4678>
   16518:	add	r3, r8, #9
   1651c:	str	r3, [r5, r9, lsl #3]
   16520:	ldr	r3, [sp, #12]
   16524:	str	r8, [r3, #4]
   16528:	add	r9, r9, #1
   1652c:	add	sl, sl, #8
   16530:	cmp	r9, r6
   16534:	beq	165f0 <__assert_fail@plt+0x46a8>
   16538:	str	sl, [sp, #12]
   1653c:	ldr	r4, [r5, r9, lsl #3]
   16540:	ldr	r1, [sp, #16]
   16544:	mov	r0, r4
   16548:	bl	11a2c <strcmp@plt>
   1654c:	mov	fp, r0
   16550:	cmp	r7, #0
   16554:	beq	1657c <__assert_fail@plt+0x4634>
   16558:	mov	r1, r4
   1655c:	mov	r0, r7
   16560:	bl	11a2c <strcmp@plt>
   16564:	adds	r3, fp, #0
   16568:	movne	r3, #1
   1656c:	cmp	r0, #0
   16570:	movne	r3, #0
   16574:	cmp	r3, #0
   16578:	bne	16510 <__assert_fail@plt+0x45c8>
   1657c:	bl	12ccc <__assert_fail@plt+0xd84>
   16580:	subs	r4, r0, #0
   16584:	beq	16608 <__assert_fail@plt+0x46c0>
   16588:	cmp	fp, #0
   1658c:	bne	164e0 <__assert_fail@plt+0x4598>
   16590:	add	r2, sp, #32
   16594:	mov	r1, #0
   16598:	mov	r0, #3
   1659c:	bl	11bf4 <__fxstat64@plt>
   165a0:	cmp	r0, #0
   165a4:	bne	16528 <__assert_fail@plt+0x45e0>
   165a8:	ldrd	r2, [r4, #96]	; 0x60
   165ac:	ldrd	r0, [sp, #128]	; 0x80
   165b0:	cmp	r1, r3
   165b4:	cmpeq	r0, r2
   165b8:	bne	16528 <__assert_fail@plt+0x45e0>
   165bc:	b	164fc <__assert_fail@plt+0x45b4>
   165c0:	mov	r1, #0
   165c4:	add	r0, sp, #28
   165c8:	bl	15630 <__assert_fail@plt+0x36e8>
   165cc:	mov	r8, r0
   165d0:	add	r3, r0, #9
   165d4:	str	r3, [sp]
   165d8:	ldr	r3, [sp, #28]
   165dc:	mov	r2, #1
   165e0:	mov	r1, #0
   165e4:	ldr	r0, [sp, #12]
   165e8:	bl	16290 <__assert_fail@plt+0x4348>
   165ec:	b	16518 <__assert_fail@plt+0x45d0>
   165f0:	mov	r4, r6
   165f4:	ldr	r6, [sp, #20]
   165f8:	movw	r3, #14272	; 0x37c0
   165fc:	movt	r3, #2
   16600:	str	r3, [sp, #12]
   16604:	b	166dc <__assert_fail@plt+0x4794>
   16608:	mov	r4, r6
   1660c:	ldr	r6, [sp, #20]
   16610:	b	165f8 <__assert_fail@plt+0x46b0>
   16614:	ldr	r1, [sp, #12]
   16618:	ldr	r0, [sp, #8]
   1661c:	bl	12d44 <__assert_fail@plt+0xdfc>
   16620:	cmp	r0, #0
   16624:	bne	1671c <__assert_fail@plt+0x47d4>
   16628:	bl	11d74 <__errno_location@plt>
   1662c:	ldr	r2, [r0]
   16630:	cmp	r7, #2
   16634:	movhi	r3, #0
   16638:	movls	r3, #1
   1663c:	cmp	r2, #24
   16640:	orrne	r3, r3, #1
   16644:	cmp	r3, #0
   16648:	bne	1675c <__assert_fail@plt+0x4814>
   1664c:	sub	r7, r7, #1
   16650:	add	r9, r5, r7, lsl #3
   16654:	ldr	r1, [r5, r7, lsl #3]
   16658:	ldr	r3, [sp, #28]
   1665c:	ldr	r0, [r3, r7, lsl #2]
   16660:	bl	12ed4 <__assert_fail@plt+0xf8c>
   16664:	cmp	r7, #2
   16668:	movls	r1, #0
   1666c:	movhi	r1, #1
   16670:	add	r0, sp, #32
   16674:	bl	15630 <__assert_fail@plt+0x36e8>
   16678:	cmp	r0, #0
   1667c:	beq	1664c <__assert_fail@plt+0x4704>
   16680:	mov	r8, r0
   16684:	cmp	r6, r7
   16688:	movcc	sl, r6
   1668c:	movcs	sl, r7
   16690:	add	fp, r0, #9
   16694:	ldr	r3, [sp, #28]
   16698:	str	r3, [sp, #4]
   1669c:	str	fp, [sp]
   166a0:	ldr	r3, [sp, #32]
   166a4:	mov	r2, r7
   166a8:	mov	r1, sl
   166ac:	mov	r0, r5
   166b0:	bl	14cb4 <__assert_fail@plt+0x2d6c>
   166b4:	str	fp, [r5]
   166b8:	str	r8, [r5, #4]
   166bc:	sub	r4, r4, r7
   166c0:	lsl	r2, r4, #3
   166c4:	mov	r1, r9
   166c8:	add	r0, r5, #8
   166cc:	bl	11a80 <memmove@plt>
   166d0:	rsb	sl, sl, #1
   166d4:	add	r6, r6, sl
   166d8:	add	r4, r4, #1
   166dc:	add	r2, sp, #28
   166e0:	mov	r1, r4
   166e4:	mov	r0, r5
   166e8:	bl	16060 <__assert_fail@plt+0x4118>
   166ec:	mov	r7, r0
   166f0:	cmp	r4, r0
   166f4:	beq	16614 <__assert_fail@plt+0x46cc>
   166f8:	cmp	r0, #2
   166fc:	bhi	1664c <__assert_fail@plt+0x4704>
   16700:	mov	r2, #5
   16704:	movw	r1, #13908	; 0x3654
   16708:	movt	r1, #2
   1670c:	mov	r0, #0
   16710:	bl	11b58 <dcgettext@plt>
   16714:	ldr	r1, [r5, r7, lsl #3]
   16718:	bl	12c64 <__assert_fail@plt+0xd1c>
   1671c:	mov	r3, r0
   16720:	ldr	r2, [sp, #28]
   16724:	str	r2, [sp, #4]
   16728:	ldr	r2, [sp, #8]
   1672c:	str	r2, [sp]
   16730:	mov	r2, r7
   16734:	mov	r1, r6
   16738:	mov	r0, r5
   1673c:	bl	14cb4 <__assert_fail@plt+0x2d6c>
   16740:	add	sp, sp, #140	; 0x8c
   16744:	ldrd	r4, [sp]
   16748:	ldrd	r6, [sp, #8]
   1674c:	ldrd	r8, [sp, #16]
   16750:	ldrd	sl, [sp, #24]
   16754:	add	sp, sp, #32
   16758:	pop	{pc}		; (ldr pc, [sp], #4)
   1675c:	mov	r2, #5
   16760:	movw	r1, #13908	; 0x3654
   16764:	movt	r1, #2
   16768:	mov	r0, #0
   1676c:	bl	11b58 <dcgettext@plt>
   16770:	ldr	r1, [sp, #8]
   16774:	bl	12c64 <__assert_fail@plt+0xd1c>
   16778:	push	{lr}		; (str lr, [sp, #-4]!)
   1677c:	sub	sp, sp, #60	; 0x3c
   16780:	subs	r5, r0, #0
   16784:	beq	167cc <__assert_fail@plt+0x4884>
   16788:	movw	r3, #25288	; 0x62c8
   1678c:	movt	r3, #3
   16790:	ldr	r4, [r3]
   16794:	mov	r2, #5
   16798:	movw	r1, #14408	; 0x3848
   1679c:	movt	r1, #2
   167a0:	mov	r0, #0
   167a4:	bl	11b58 <dcgettext@plt>
   167a8:	movw	r3, #26828	; 0x68cc
   167ac:	movt	r3, #3
   167b0:	ldr	r3, [r3]
   167b4:	mov	r2, r0
   167b8:	mov	r1, #1
   167bc:	mov	r0, r4
   167c0:	bl	11dd4 <__fprintf_chk@plt>
   167c4:	mov	r0, r5
   167c8:	bl	11d38 <exit@plt>
   167cc:	mov	r2, #5
   167d0:	movw	r1, #14448	; 0x3870
   167d4:	movt	r1, #2
   167d8:	mov	r0, #0
   167dc:	bl	11b58 <dcgettext@plt>
   167e0:	movw	r3, #26828	; 0x68cc
   167e4:	movt	r3, #3
   167e8:	ldr	r2, [r3]
   167ec:	mov	r3, r2
   167f0:	mov	r1, r0
   167f4:	mov	r0, #1
   167f8:	bl	11db0 <__printf_chk@plt>
   167fc:	mov	r2, #5
   16800:	movw	r1, #14520	; 0x38b8
   16804:	movt	r1, #2
   16808:	mov	r0, #0
   1680c:	bl	11b58 <dcgettext@plt>
   16810:	movw	r4, #25300	; 0x62d4
   16814:	movt	r4, #3
   16818:	ldr	r1, [r4]
   1681c:	bl	11a14 <fputs_unlocked@plt>
   16820:	mov	r2, #5
   16824:	movw	r1, #14584	; 0x38f8
   16828:	movt	r1, #2
   1682c:	mov	r0, #0
   16830:	bl	11b58 <dcgettext@plt>
   16834:	ldr	r1, [r4]
   16838:	bl	11a14 <fputs_unlocked@plt>
   1683c:	mov	r2, #5
   16840:	movw	r1, #14640	; 0x3930
   16844:	movt	r1, #2
   16848:	mov	r0, #0
   1684c:	bl	11b58 <dcgettext@plt>
   16850:	ldr	r1, [r4]
   16854:	bl	11a14 <fputs_unlocked@plt>
   16858:	mov	r2, #5
   1685c:	movw	r1, #14716	; 0x397c
   16860:	movt	r1, #2
   16864:	mov	r0, #0
   16868:	bl	11b58 <dcgettext@plt>
   1686c:	ldr	r1, [r4]
   16870:	bl	11a14 <fputs_unlocked@plt>
   16874:	mov	r2, #5
   16878:	movw	r1, #14736	; 0x3990
   1687c:	movt	r1, #2
   16880:	mov	r0, #0
   16884:	bl	11b58 <dcgettext@plt>
   16888:	ldr	r1, [r4]
   1688c:	bl	11a14 <fputs_unlocked@plt>
   16890:	mov	r2, #5
   16894:	movw	r1, #14940	; 0x3a5c
   16898:	movt	r1, #2
   1689c:	mov	r0, #0
   168a0:	bl	11b58 <dcgettext@plt>
   168a4:	ldr	r1, [r4]
   168a8:	bl	11a14 <fputs_unlocked@plt>
   168ac:	mov	r2, #5
   168b0:	movw	r1, #15152	; 0x3b30
   168b4:	movt	r1, #2
   168b8:	mov	r0, #0
   168bc:	bl	11b58 <dcgettext@plt>
   168c0:	ldr	r1, [r4]
   168c4:	bl	11a14 <fputs_unlocked@plt>
   168c8:	mov	r2, #5
   168cc:	movw	r1, #15228	; 0x3b7c
   168d0:	movt	r1, #2
   168d4:	mov	r0, #0
   168d8:	bl	11b58 <dcgettext@plt>
   168dc:	ldr	r1, [r4]
   168e0:	bl	11a14 <fputs_unlocked@plt>
   168e4:	mov	r2, #5
   168e8:	movw	r1, #15504	; 0x3c90
   168ec:	movt	r1, #2
   168f0:	mov	r0, #0
   168f4:	bl	11b58 <dcgettext@plt>
   168f8:	ldr	r1, [r4]
   168fc:	bl	11a14 <fputs_unlocked@plt>
   16900:	mov	r2, #5
   16904:	movw	r1, #15784	; 0x3da8
   16908:	movt	r1, #2
   1690c:	mov	r0, #0
   16910:	bl	11b58 <dcgettext@plt>
   16914:	ldr	r1, [r4]
   16918:	bl	11a14 <fputs_unlocked@plt>
   1691c:	mov	r2, #5
   16920:	movw	r1, #15804	; 0x3dbc
   16924:	movt	r1, #2
   16928:	mov	r0, #0
   1692c:	bl	11b58 <dcgettext@plt>
   16930:	ldr	r1, [r4]
   16934:	bl	11a14 <fputs_unlocked@plt>
   16938:	mov	r2, #5
   1693c:	movw	r1, #15924	; 0x3e34
   16940:	movt	r1, #2
   16944:	mov	r0, #0
   16948:	bl	11b58 <dcgettext@plt>
   1694c:	ldr	r1, [r4]
   16950:	bl	11a14 <fputs_unlocked@plt>
   16954:	mov	r2, #5
   16958:	movw	r1, #16204	; 0x3f4c
   1695c:	movt	r1, #2
   16960:	mov	r0, #0
   16964:	bl	11b58 <dcgettext@plt>
   16968:	ldr	r1, [r4]
   1696c:	bl	11a14 <fputs_unlocked@plt>
   16970:	mov	r2, #5
   16974:	movw	r1, #16552	; 0x40a8
   16978:	movt	r1, #2
   1697c:	mov	r0, #0
   16980:	bl	11b58 <dcgettext@plt>
   16984:	ldr	r1, [r4]
   16988:	bl	11a14 <fputs_unlocked@plt>
   1698c:	mov	r2, #5
   16990:	movw	r1, #16696	; 0x4138
   16994:	movt	r1, #2
   16998:	mov	r0, #0
   1699c:	bl	11b58 <dcgettext@plt>
   169a0:	ldr	r1, [r4]
   169a4:	bl	11a14 <fputs_unlocked@plt>
   169a8:	mov	r2, #5
   169ac:	movw	r1, #16912	; 0x4210
   169b0:	movt	r1, #2
   169b4:	mov	r0, #0
   169b8:	bl	11b58 <dcgettext@plt>
   169bc:	movw	r2, #17368	; 0x43d8
   169c0:	movt	r2, #2
   169c4:	mov	r1, r0
   169c8:	mov	r0, #1
   169cc:	bl	11db0 <__printf_chk@plt>
   169d0:	mov	r2, #5
   169d4:	movw	r1, #17376	; 0x43e0
   169d8:	movt	r1, #2
   169dc:	mov	r0, #0
   169e0:	bl	11b58 <dcgettext@plt>
   169e4:	ldr	r1, [r4]
   169e8:	bl	11a14 <fputs_unlocked@plt>
   169ec:	mov	r2, #5
   169f0:	movw	r1, #17440	; 0x4420
   169f4:	movt	r1, #2
   169f8:	mov	r0, #0
   169fc:	bl	11b58 <dcgettext@plt>
   16a00:	ldr	r1, [r4]
   16a04:	bl	11a14 <fputs_unlocked@plt>
   16a08:	mov	r2, #5
   16a0c:	movw	r1, #17488	; 0x4450
   16a10:	movt	r1, #2
   16a14:	mov	r0, #0
   16a18:	bl	11b58 <dcgettext@plt>
   16a1c:	ldr	r1, [r4]
   16a20:	bl	11a14 <fputs_unlocked@plt>
   16a24:	mov	r2, #5
   16a28:	movw	r1, #17544	; 0x4488
   16a2c:	movt	r1, #2
   16a30:	mov	r0, #0
   16a34:	bl	11b58 <dcgettext@plt>
   16a38:	ldr	r1, [r4]
   16a3c:	bl	11a14 <fputs_unlocked@plt>
   16a40:	mov	r2, #5
   16a44:	movw	r1, #18148	; 0x46e4
   16a48:	movt	r1, #2
   16a4c:	mov	r0, #0
   16a50:	bl	11b58 <dcgettext@plt>
   16a54:	ldr	r1, [r4]
   16a58:	bl	11a14 <fputs_unlocked@plt>
   16a5c:	ldr	r0, [pc, #648]	; 16cec <__assert_fail@plt+0x4da4>
   16a60:	ldr	r1, [r0]
   16a64:	ldr	r3, [r0, #4]
   16a68:	str	r1, [sp]
   16a6c:	str	r3, [sp, #4]
   16a70:	ldrd	r2, [r0, #8]
   16a74:	strd	r2, [sp, #8]
   16a78:	ldrd	r2, [r0, #16]
   16a7c:	strd	r2, [sp, #16]
   16a80:	ldrd	r2, [r0, #24]
   16a84:	strd	r2, [sp, #24]
   16a88:	ldrd	r2, [r0, #32]
   16a8c:	strd	r2, [sp, #32]
   16a90:	ldrd	r2, [r0, #40]	; 0x28
   16a94:	strd	r2, [sp, #40]	; 0x28
   16a98:	ldrd	r2, [r0, #48]	; 0x30
   16a9c:	strd	r2, [sp, #48]	; 0x30
   16aa0:	cmp	r1, #0
   16aa4:	moveq	r4, sp
   16aa8:	beq	16ad4 <__assert_fail@plt+0x4b8c>
   16aac:	mov	r4, sp
   16ab0:	movw	r6, #20740	; 0x5104
   16ab4:	movt	r6, #2
   16ab8:	mov	r0, r6
   16abc:	bl	11a2c <strcmp@plt>
   16ac0:	cmp	r0, #0
   16ac4:	beq	16ad4 <__assert_fail@plt+0x4b8c>
   16ac8:	ldr	r1, [r4, #8]!
   16acc:	cmp	r1, #0
   16ad0:	bne	16ab8 <__assert_fail@plt+0x4b70>
   16ad4:	ldr	r4, [r4, #4]
   16ad8:	cmp	r4, #0
   16adc:	beq	16c38 <__assert_fail@plt+0x4cf0>
   16ae0:	mov	r2, #5
   16ae4:	movw	r1, #18380	; 0x47cc
   16ae8:	movt	r1, #2
   16aec:	mov	r0, #0
   16af0:	bl	11b58 <dcgettext@plt>
   16af4:	movw	r3, #18404	; 0x47e4
   16af8:	movt	r3, #2
   16afc:	movw	r2, #18444	; 0x480c
   16b00:	movt	r2, #2
   16b04:	mov	r1, r0
   16b08:	mov	r0, #1
   16b0c:	bl	11db0 <__printf_chk@plt>
   16b10:	mov	r1, #0
   16b14:	mov	r0, #5
   16b18:	bl	11e28 <setlocale@plt>
   16b1c:	cmp	r0, #0
   16b20:	beq	16b3c <__assert_fail@plt+0x4bf4>
   16b24:	mov	r2, #3
   16b28:	movw	r1, #18460	; 0x481c
   16b2c:	movt	r1, #2
   16b30:	bl	11f0c <strncmp@plt>
   16b34:	cmp	r0, #0
   16b38:	bne	16bb8 <__assert_fail@plt+0x4c70>
   16b3c:	mov	r2, #5
   16b40:	movw	r1, #18536	; 0x4868
   16b44:	movt	r1, #2
   16b48:	mov	r0, #0
   16b4c:	bl	11b58 <dcgettext@plt>
   16b50:	movw	r6, #20740	; 0x5104
   16b54:	movt	r6, #2
   16b58:	mov	r3, r6
   16b5c:	movw	r2, #18404	; 0x47e4
   16b60:	movt	r2, #2
   16b64:	mov	r1, r0
   16b68:	mov	r0, #1
   16b6c:	bl	11db0 <__printf_chk@plt>
   16b70:	mov	r2, #5
   16b74:	movw	r1, #18564	; 0x4884
   16b78:	movt	r1, #2
   16b7c:	mov	r0, #0
   16b80:	bl	11b58 <dcgettext@plt>
   16b84:	mov	r1, r0
   16b88:	movw	r2, #20444	; 0x4fdc
   16b8c:	movt	r2, #2
   16b90:	movw	r3, #15800	; 0x3db8
   16b94:	movt	r3, #2
   16b98:	cmp	r4, r6
   16b9c:	moveq	r3, r2
   16ba0:	mov	r2, r4
   16ba4:	mov	r0, #1
   16ba8:	bl	11db0 <__printf_chk@plt>
   16bac:	b	167c4 <__assert_fail@plt+0x487c>
   16bb0:	movw	r4, #20740	; 0x5104
   16bb4:	movt	r4, #2
   16bb8:	mov	r2, #5
   16bbc:	movw	r1, #18464	; 0x4820
   16bc0:	movt	r1, #2
   16bc4:	mov	r0, #0
   16bc8:	bl	11b58 <dcgettext@plt>
   16bcc:	movw	r3, #25300	; 0x62d4
   16bd0:	movt	r3, #3
   16bd4:	ldr	r1, [r3]
   16bd8:	bl	11a14 <fputs_unlocked@plt>
   16bdc:	b	16b3c <__assert_fail@plt+0x4bf4>
   16be0:	mov	r2, #5
   16be4:	movw	r1, #18536	; 0x4868
   16be8:	movt	r1, #2
   16bec:	mov	r0, #0
   16bf0:	bl	11b58 <dcgettext@plt>
   16bf4:	movw	r4, #20740	; 0x5104
   16bf8:	movt	r4, #2
   16bfc:	mov	r3, r4
   16c00:	movw	r2, #18404	; 0x47e4
   16c04:	movt	r2, #2
   16c08:	mov	r1, r0
   16c0c:	mov	r0, #1
   16c10:	bl	11db0 <__printf_chk@plt>
   16c14:	mov	r2, #5
   16c18:	movw	r1, #18564	; 0x4884
   16c1c:	movt	r1, #2
   16c20:	mov	r0, #0
   16c24:	bl	11b58 <dcgettext@plt>
   16c28:	mov	r1, r0
   16c2c:	movw	r3, #20444	; 0x4fdc
   16c30:	movt	r3, #2
   16c34:	b	16ba0 <__assert_fail@plt+0x4c58>
   16c38:	mov	r2, #5
   16c3c:	movw	r1, #18380	; 0x47cc
   16c40:	movt	r1, #2
   16c44:	mov	r0, #0
   16c48:	bl	11b58 <dcgettext@plt>
   16c4c:	movw	r3, #18404	; 0x47e4
   16c50:	movt	r3, #2
   16c54:	movw	r2, #18444	; 0x480c
   16c58:	movt	r2, #2
   16c5c:	mov	r1, r0
   16c60:	mov	r0, #1
   16c64:	bl	11db0 <__printf_chk@plt>
   16c68:	mov	r1, #0
   16c6c:	mov	r0, #5
   16c70:	bl	11e28 <setlocale@plt>
   16c74:	cmp	r0, #0
   16c78:	beq	16be0 <__assert_fail@plt+0x4c98>
   16c7c:	mov	r2, #3
   16c80:	movw	r1, #18460	; 0x481c
   16c84:	movt	r1, #2
   16c88:	bl	11f0c <strncmp@plt>
   16c8c:	cmp	r0, #0
   16c90:	bne	16bb0 <__assert_fail@plt+0x4c68>
   16c94:	mov	r2, #5
   16c98:	movw	r1, #18536	; 0x4868
   16c9c:	movt	r1, #2
   16ca0:	mov	r0, #0
   16ca4:	bl	11b58 <dcgettext@plt>
   16ca8:	movw	r4, #20740	; 0x5104
   16cac:	movt	r4, #2
   16cb0:	mov	r3, r4
   16cb4:	movw	r2, #18404	; 0x47e4
   16cb8:	movt	r2, #2
   16cbc:	mov	r1, r0
   16cc0:	mov	r0, #1
   16cc4:	bl	11db0 <__printf_chk@plt>
   16cc8:	mov	r2, #5
   16ccc:	movw	r1, #18564	; 0x4884
   16cd0:	movt	r1, #2
   16cd4:	mov	r0, #0
   16cd8:	bl	11b58 <dcgettext@plt>
   16cdc:	mov	r1, r0
   16ce0:	movw	r3, #20444	; 0x4fdc
   16ce4:	movt	r3, #2
   16ce8:	b	16ba0 <__assert_fail@plt+0x4c58>
   16cec:	andeq	r3, r2, ip, asr #5
   16cf0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16cf4:	strd	r6, [sp, #8]
   16cf8:	strd	r8, [sp, #16]
   16cfc:	strd	sl, [sp, #24]
   16d00:	str	lr, [sp, #32]
   16d04:	vpush	{d8-d10}
   16d08:	sub	sp, sp, #572	; 0x23c
   16d0c:	mov	fp, r0
   16d10:	mov	sl, r1
   16d14:	movw	r0, #18628	; 0x48c4
   16d18:	movt	r0, #2
   16d1c:	bl	11cb4 <getenv@plt>
   16d20:	str	r0, [sp, #56]	; 0x38
   16d24:	adds	r3, r0, #0
   16d28:	movne	r3, #1
   16d2c:	str	r3, [sp, #24]
   16d30:	bl	1d504 <__assert_fail@plt+0xb5bc>
   16d34:	sub	r0, r0, #199680	; 0x30c00
   16d38:	sub	r0, r0, #432	; 0x1b0
   16d3c:	cmp	r0, #696	; 0x2b8
   16d40:	movls	r3, #0
   16d44:	movhi	r3, #1
   16d48:	str	r3, [sp, #28]
   16d4c:	ldr	r0, [sl]
   16d50:	bl	1d574 <__assert_fail@plt+0xb62c>
   16d54:	movw	r1, #15800	; 0x3db8
   16d58:	movt	r1, #2
   16d5c:	mov	r0, #6
   16d60:	bl	11e28 <setlocale@plt>
   16d64:	str	r0, [sp, #60]	; 0x3c
   16d68:	movw	r4, #18448	; 0x4810
   16d6c:	movt	r4, #2
   16d70:	movw	r1, #18644	; 0x48d4
   16d74:	movt	r1, #2
   16d78:	mov	r0, r4
   16d7c:	bl	11edc <bindtextdomain@plt>
   16d80:	mov	r0, r4
   16d84:	bl	11bb8 <textdomain@plt>
   16d88:	movw	r3, #25200	; 0x6270
   16d8c:	movt	r3, #3
   16d90:	mov	r5, #2
   16d94:	str	r5, [r3]
   16d98:	mov	r0, #3
   16d9c:	bl	1b898 <__assert_fail@plt+0x9950>
   16da0:	movw	r4, #25312	; 0x62e0
   16da4:	movt	r4, #3
   16da8:	strb	r0, [r4, #1299]	; 0x513
   16dac:	mov	r0, r5
   16db0:	bl	1b898 <__assert_fail@plt+0x9950>
   16db4:	str	r0, [sp, #20]
   16db8:	strb	r0, [r4, #1496]	; 0x5d8
   16dbc:	bl	11e7c <localeconv@plt>
   16dc0:	ldr	r2, [r0]
   16dc4:	ldrb	r3, [r2]
   16dc8:	strb	r3, [r4, #260]	; 0x104
   16dcc:	cmp	r3, #0
   16dd0:	beq	16de0 <__assert_fail@plt+0x4e98>
   16dd4:	ldrb	r3, [r2, #1]
   16dd8:	cmp	r3, #0
   16ddc:	beq	16df0 <__assert_fail@plt+0x4ea8>
   16de0:	movw	r3, #25312	; 0x62e0
   16de4:	movt	r3, #3
   16de8:	mov	r2, #46	; 0x2e
   16dec:	strb	r2, [r3, #260]	; 0x104
   16df0:	ldr	r1, [r0, #4]
   16df4:	ldrb	r2, [r1]
   16df8:	movw	r3, #25312	; 0x62e0
   16dfc:	movt	r3, #3
   16e00:	str	r2, [r3, #256]	; 0x100
   16e04:	cmp	r2, #0
   16e08:	beq	16e28 <__assert_fail@plt+0x4ee0>
   16e0c:	ldrb	r3, [r1, #1]
   16e10:	cmp	r3, #0
   16e14:	beq	16e38 <__assert_fail@plt+0x4ef0>
   16e18:	movw	r3, #25312	; 0x62e0
   16e1c:	movt	r3, #3
   16e20:	mov	r2, #1
   16e24:	strb	r2, [r3, #1497]	; 0x5d9
   16e28:	movw	r3, #25312	; 0x62e0
   16e2c:	movt	r3, #3
   16e30:	mov	r2, #256	; 0x100
   16e34:	str	r2, [r3, #256]	; 0x100
   16e38:	movw	r6, #25312	; 0x62e0
   16e3c:	movt	r6, #3
   16e40:	mov	r4, #0
   16e44:	strb	r4, [r6, #1276]	; 0x4fc
   16e48:	bl	11d2c <__ctype_b_loc@plt>
   16e4c:	mov	r7, r0
   16e50:	sub	r9, r6, #1
   16e54:	add	r8, r6, #772	; 0x304
   16e58:	add	r8, r8, #3
   16e5c:	add	r5, r6, #260	; 0x104
   16e60:	add	r5, r5, #3
   16e64:	add	r6, r6, #516	; 0x204
   16e68:	add	r6, r6, #3
   16e6c:	ldr	ip, [r7]
   16e70:	uxtb	r3, r4
   16e74:	lsl	r1, r3, #1
   16e78:	cmp	r3, #10
   16e7c:	movne	r3, #0
   16e80:	moveq	r3, #1
   16e84:	ldrh	r2, [ip, r1]
   16e88:	and	r2, r2, #1
   16e8c:	orr	r2, r3, r2
   16e90:	strb	r2, [r9, #1]!
   16e94:	lsl	r0, r4, #1
   16e98:	ldrh	r2, [ip, r0]
   16e9c:	eor	r2, r2, #16384	; 0x4000
   16ea0:	ubfx	r2, r2, #14, #1
   16ea4:	strb	r2, [r8, #1]!
   16ea8:	ldr	r2, [r7]
   16eac:	ldrh	r0, [r2, r0]
   16eb0:	tst	r0, #8
   16eb4:	movne	r3, #0
   16eb8:	bne	16ecc <__assert_fail@plt+0x4f84>
   16ebc:	ldrh	r2, [r2, r1]
   16ec0:	and	r2, r2, #1
   16ec4:	orr	r3, r3, r2
   16ec8:	eor	r3, r3, #1
   16ecc:	strb	r3, [r6, #1]!
   16ed0:	add	r3, r4, #128	; 0x80
   16ed4:	cmp	r3, #384	; 0x180
   16ed8:	strbcs	r4, [r5, #1]!
   16edc:	addcs	r4, r4, #1
   16ee0:	bcs	16e6c <__assert_fail@plt+0x4f24>
   16ee4:	bl	11d08 <__ctype_toupper_loc@plt>
   16ee8:	ldr	r3, [r0]
   16eec:	ldr	r3, [r3, r4, lsl #2]
   16ef0:	strb	r3, [r5, #1]!
   16ef4:	add	r4, r4, #1
   16ef8:	cmp	r4, #256	; 0x100
   16efc:	bne	16e6c <__assert_fail@plt+0x4f24>
   16f00:	ldr	r3, [sp, #20]
   16f04:	cmp	r3, #0
   16f08:	beq	16fc8 <__assert_fail@plt+0x5080>
   16f0c:	mov	r5, #0
   16f10:	ldr	r9, [pc, #512]	; 17118 <__assert_fail@plt+0x51d0>
   16f14:	movw	r6, #25312	; 0x62e0
   16f18:	movt	r6, #3
   16f1c:	b	16f60 <__assert_fail@plt+0x5018>
   16f20:	cmp	r2, r8
   16f24:	beq	16f50 <__assert_fail@plt+0x5008>
   16f28:	ldrb	r3, [r2, #1]!
   16f2c:	lsl	r1, r3, #1
   16f30:	ldrh	r1, [ip, r1]
   16f34:	tst	r1, #1
   16f38:	bne	16f20 <__assert_fail@plt+0x4fd8>
   16f3c:	add	r3, r6, r3
   16f40:	ldrb	r3, [r3, #264]	; 0x108
   16f44:	strb	r3, [r0, r4]
   16f48:	add	r4, r4, #1
   16f4c:	b	16f20 <__assert_fail@plt+0x4fd8>
   16f50:	mov	r3, #0
   16f54:	strb	r3, [r0, r4]
   16f58:	cmp	r5, #12
   16f5c:	beq	16fb0 <__assert_fail@plt+0x5068>
   16f60:	add	r0, r5, #131072	; 0x20000
   16f64:	add	r0, r0, #14
   16f68:	bl	11e70 <nl_langinfo@plt>
   16f6c:	mov	r8, r0
   16f70:	bl	11d50 <strlen@plt>
   16f74:	mov	r4, r0
   16f78:	add	r0, r0, #1
   16f7c:	bl	21070 <__assert_fail@plt+0xf128>
   16f80:	str	r0, [r9, r5, lsl #3]
   16f84:	add	r5, r5, #1
   16f88:	add	r3, r9, r5, lsl #3
   16f8c:	str	r5, [r3, #-4]
   16f90:	cmp	r4, #0
   16f94:	beq	16f50 <__assert_fail@plt+0x5008>
   16f98:	ldr	ip, [r7]
   16f9c:	sub	r2, r8, #1
   16fa0:	sub	r4, r4, #1
   16fa4:	add	r8, r8, r4
   16fa8:	mov	r4, #0
   16fac:	b	16f28 <__assert_fail@plt+0x4fe0>
   16fb0:	movw	r3, #10620	; 0x297c
   16fb4:	movt	r3, #1
   16fb8:	mov	r2, #8
   16fbc:	mov	r1, #12
   16fc0:	ldr	r0, [pc, #336]	; 17118 <__assert_fail@plt+0x51d0>
   16fc4:	bl	11ea0 <qsort@plt>
   16fc8:	ldr	r0, [pc, #332]	; 1711c <__assert_fail@plt+0x51d4>
   16fcc:	bl	11e34 <sigemptyset@plt>
   16fd0:	movw	r6, #12736	; 0x31c0
   16fd4:	movt	r6, #2
   16fd8:	add	r4, r6, #324	; 0x144
   16fdc:	add	r6, r6, #368	; 0x170
   16fe0:	mov	r5, r4
   16fe4:	ldr	r9, [pc, #304]	; 1711c <__assert_fail@plt+0x51d4>
   16fe8:	b	16ff4 <__assert_fail@plt+0x50ac>
   16fec:	cmp	r5, r6
   16ff0:	beq	17024 <__assert_fail@plt+0x50dc>
   16ff4:	ldr	r8, [r5], #4
   16ff8:	add	r2, sp, #184	; 0xb8
   16ffc:	mov	r1, #0
   17000:	mov	r0, r8
   17004:	bl	11c00 <sigaction@plt>
   17008:	ldr	r3, [sp, #184]	; 0xb8
   1700c:	cmp	r3, #1
   17010:	beq	16fec <__assert_fail@plt+0x50a4>
   17014:	mov	r1, r8
   17018:	mov	r0, r9
   1701c:	bl	11ce4 <sigaddset@plt>
   17020:	b	16fec <__assert_fail@plt+0x50a4>
   17024:	movw	r3, #11036	; 0x2b1c
   17028:	movt	r3, #1
   1702c:	str	r3, [sp, #184]	; 0xb8
   17030:	mov	r2, #128	; 0x80
   17034:	ldr	r1, [pc, #224]	; 1711c <__assert_fail@plt+0x51d4>
   17038:	add	r0, sp, #188	; 0xbc
   1703c:	bl	11ac8 <memcpy@plt>
   17040:	mov	r3, #0
   17044:	str	r3, [sp, #316]	; 0x13c
   17048:	ldr	r8, [pc, #204]	; 1711c <__assert_fail@plt+0x51d4>
   1704c:	mov	r9, r3
   17050:	b	1706c <__assert_fail@plt+0x5124>
   17054:	mov	r2, r9
   17058:	add	r1, sp, #184	; 0xb8
   1705c:	mov	r0, r5
   17060:	bl	11c00 <sigaction@plt>
   17064:	cmp	r4, r6
   17068:	beq	17088 <__assert_fail@plt+0x5140>
   1706c:	ldr	r5, [r4], #4
   17070:	mov	r1, r5
   17074:	mov	r0, r8
   17078:	bl	11bac <sigismember@plt>
   1707c:	cmp	r0, #0
   17080:	beq	17064 <__assert_fail@plt+0x511c>
   17084:	b	17054 <__assert_fail@plt+0x510c>
   17088:	mov	r1, #0
   1708c:	mov	r0, #17
   17090:	bl	11b04 <signal@plt>
   17094:	movw	r0, #10976	; 0x2ae0
   17098:	movt	r0, #1
   1709c:	bl	2319c <_obstack_memory_used@@Base+0x668>
   170a0:	add	r0, sp, #468	; 0x1d4
   170a4:	bl	12b4c <__assert_fail@plt+0xc04>
   170a8:	mvn	r3, #0
   170ac:	str	r3, [sp, #468]	; 0x1d4
   170b0:	mov	r1, #4
   170b4:	mov	r0, fp
   170b8:	bl	211f0 <__assert_fail@plt+0xf2a8>
   170bc:	str	r0, [sp, #20]
   170c0:	mov	r3, #0
   170c4:	str	r3, [sp, #44]	; 0x2c
   170c8:	str	r3, [sp, #40]	; 0x28
   170cc:	mov	r4, r3
   170d0:	str	r3, [sp, #52]	; 0x34
   170d4:	str	r3, [sp, #48]	; 0x30
   170d8:	str	r3, [sp, #36]	; 0x24
   170dc:	mov	r9, r3
   170e0:	mov	r6, r3
   170e4:	movw	r5, #25280	; 0x62c0
   170e8:	movt	r5, #3
   170ec:	movw	r8, #12736	; 0x31c0
   170f0:	movt	r8, #2
   170f4:	add	r3, r8, #368	; 0x170
   170f8:	str	r3, [sp, #32]
   170fc:	vldr	d9, [pc, #4]	; 17108 <__assert_fail@plt+0x51c0>
   17100:	vldr	d8, [pc, #8]	; 17110 <__assert_fail@plt+0x51c8>
   17104:	b	1714c <__assert_fail@plt+0x5204>
   17108:	andeq	r0, r0, r0
   1710c:	subsmi	r0, r9, r0
   17110:	andeq	r0, r0, r0
   17114:	mvnsmi	r0, #0
   17118:	andeq	r6, r3, r8, ror #3
   1711c:	andeq	r6, r3, r8, ror #13
   17120:	andeq	r3, r2, r0, asr #10
   17124:	andeq	r3, r2, r0, lsr r3
   17128:	ldr	r3, [r5]
   1712c:	cmp	r3, fp
   17130:	bge	181ec <__assert_fail@plt+0x62a4>
   17134:	add	r2, r3, #1
   17138:	str	r2, [r5]
   1713c:	ldr	r3, [sl, r3, lsl #2]
   17140:	ldr	r2, [sp, #20]
   17144:	str	r3, [r2, r4, lsl #2]
   17148:	add	r4, r4, #1
   1714c:	mvn	r3, #0
   17150:	str	r3, [sp, #96]	; 0x60
   17154:	cmp	r6, r3
   17158:	beq	17128 <__assert_fail@plt+0x51e0>
   1715c:	ldr	r3, [sp, #24]
   17160:	cmp	r4, #0
   17164:	moveq	r3, #0
   17168:	cmp	r3, #0
   1716c:	beq	171c8 <__assert_fail@plt+0x5280>
   17170:	ldr	r3, [sp, #28]
   17174:	eor	r3, r3, #1
   17178:	cmp	r9, #0
   1717c:	orrne	r3, r3, #1
   17180:	cmp	r3, #0
   17184:	bne	17128 <__assert_fail@plt+0x51e0>
   17188:	ldr	r3, [r5]
   1718c:	cmp	r3, fp
   17190:	beq	19cf8 <__assert_fail@plt+0x7db0>
   17194:	ldr	r2, [sl, r3, lsl #2]
   17198:	ldrb	r1, [r2]
   1719c:	cmp	r1, #45	; 0x2d
   171a0:	bne	17128 <__assert_fail@plt+0x51e0>
   171a4:	ldrb	r1, [r2, #1]
   171a8:	cmp	r1, #111	; 0x6f
   171ac:	bne	17128 <__assert_fail@plt+0x51e0>
   171b0:	ldrb	r2, [r2, #2]
   171b4:	cmp	r2, #0
   171b8:	bne	171c8 <__assert_fail@plt+0x5280>
   171bc:	add	r3, r3, #1
   171c0:	cmp	r3, fp
   171c4:	beq	17128 <__assert_fail@plt+0x51e0>
   171c8:	add	r3, sp, #96	; 0x60
   171cc:	str	r3, [sp]
   171d0:	ldr	r3, [sp, #32]
   171d4:	add	r2, r8, #864	; 0x360
   171d8:	mov	r1, sl
   171dc:	mov	r0, fp
   171e0:	bl	11d20 <getopt_long@plt>
   171e4:	mov	r6, r0
   171e8:	cmn	r0, #1
   171ec:	beq	17128 <__assert_fail@plt+0x51e0>
   171f0:	add	r3, r0, #3
   171f4:	movw	r2, #266	; 0x10a
   171f8:	cmp	r3, r2
   171fc:	ldrls	pc, [pc, r3, lsl #2]
   17200:	b	181d8 <__assert_fail@plt+0x6290>
   17204:	andeq	r8, r1, r4, lsl #3
   17208:	andeq	r8, r1, ip, ror r1
   1720c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17210:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17214:	andeq	r7, r1, r0, lsr r6
   17218:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1721c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17220:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17224:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17228:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1722c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17230:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17234:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17238:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1723c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17240:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17244:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17248:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1724c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17250:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17254:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17258:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1725c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17260:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17264:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17268:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1726c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17270:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17274:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17278:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1727c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17280:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17284:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17288:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1728c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17290:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17294:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17298:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1729c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   172a0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   172a4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   172a8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   172ac:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   172b0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   172b4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   172b8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   172bc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   172c0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   172c4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   172c8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   172cc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   172d0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   172d4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   172d8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   172dc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   172e0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   172e4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   172e8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   172ec:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   172f0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   172f4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   172f8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   172fc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17300:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17304:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17308:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1730c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17310:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17314:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17318:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1731c:	strdeq	r7, [r1], -r0
   17320:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17324:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17328:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1732c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17330:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17334:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17338:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1733c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17340:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17344:	andeq	r7, r1, r0, lsl #17
   17348:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1734c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17350:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17354:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17358:	andeq	r7, r1, r0, lsl #17
   1735c:	andeq	r7, r1, r4, lsl #28
   17360:	andeq	r8, r1, r0, asr #32
   17364:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17368:	andeq	r7, r1, r0, lsl #17
   1736c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17370:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17374:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17378:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1737c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17380:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17384:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17388:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1738c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17390:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17394:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17398:	andeq	r7, r1, r0, lsl #17
   1739c:	strdeq	r7, [r1], -r0
   173a0:	andeq	r7, r1, r0, lsl #17
   173a4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   173a8:	andeq	r7, r1, r0, lsl #17
   173ac:	andeq	r7, r1, r0, lsl #17
   173b0:	andeq	r7, r1, r0, lsl #17
   173b4:	andeq	r7, r1, r0, lsl #17
   173b8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   173bc:	andeq	r7, r1, r8, lsr #19
   173c0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   173c4:	andeq	r8, r1, r0, ror #3
   173c8:	andeq	r7, r1, r0, lsl #17
   173cc:	andeq	r7, r1, r8, lsr sp
   173d0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   173d4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   173d8:	andeq	r7, r1, r0, lsl #17
   173dc:	strdeq	r7, [r1], -r0
   173e0:	andeq	r7, r1, r4, asr pc
   173e4:	andeq	r8, r1, r0, lsl r1
   173e8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   173ec:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   173f0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   173f4:	andeq	r8, r1, r4, lsr #2
   173f8:	andeq	r8, r1, r8, ror #2
   173fc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17400:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17404:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17408:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1740c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17410:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17414:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17418:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1741c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17420:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17424:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17428:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1742c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17430:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17434:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17438:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1743c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17440:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17444:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17448:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1744c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17450:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17454:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17458:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1745c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17460:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17464:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17468:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1746c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17470:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17474:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17478:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1747c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17480:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17484:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17488:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1748c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17490:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17494:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17498:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1749c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   174a0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   174a4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   174a8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   174ac:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   174b0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   174b4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   174b8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   174bc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   174c0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   174c4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   174c8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   174cc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   174d0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   174d4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   174d8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   174dc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   174e0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   174e4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   174e8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   174ec:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   174f0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   174f4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   174f8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   174fc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17500:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17504:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17508:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1750c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17510:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17514:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17518:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1751c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17520:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17524:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17528:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1752c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17530:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17534:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17538:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1753c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17540:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17544:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17548:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1754c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17550:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17554:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17558:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1755c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17560:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17564:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17568:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1756c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17570:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17574:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17578:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1757c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17580:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17584:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17588:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1758c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17590:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17594:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17598:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1759c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   175a0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   175a4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   175a8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   175ac:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   175b0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   175b4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   175b8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   175bc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   175c0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   175c4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   175c8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   175cc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   175d0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   175d4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   175d8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   175dc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   175e0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   175e4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   175e8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   175ec:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   175f0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   175f4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   175f8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   175fc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17600:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17604:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17608:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1760c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   17610:	andeq	r7, r1, r0, lsr #17
   17614:	andeq	r7, r1, r4, lsl r9
   17618:	andeq	r7, r1, r0, lsl #19
   1761c:	muleq	r1, r4, r9
   17620:	andeq	r7, r1, r0, asr fp
   17624:	muleq	r1, r4, sp
   17628:	andeq	r7, r1, ip, lsr r8
   1762c:	andeq	r8, r1, r4, asr r0
   17630:	movw	r3, #25304	; 0x62d8
   17634:	movt	r3, #3
   17638:	ldr	r3, [r3]
   1763c:	ldrb	r3, [r3]
   17640:	cmp	r3, #43	; 0x2b
   17644:	beq	17664 <__assert_fail@plt+0x571c>
   17648:	movw	r3, #25304	; 0x62d8
   1764c:	movt	r3, #3
   17650:	ldr	r3, [r3]
   17654:	ldr	r2, [sp, #20]
   17658:	str	r3, [r2, r4, lsl #2]
   1765c:	add	r4, r4, #1
   17660:	b	1714c <__assert_fail@plt+0x5204>
   17664:	ldr	r3, [r5]
   17668:	cmp	r3, fp
   1766c:	moveq	r3, #0
   17670:	beq	17688 <__assert_fail@plt+0x5740>
   17674:	ldr	r3, [sl, r3, lsl #2]
   17678:	ldrb	r2, [r3]
   1767c:	cmp	r2, #45	; 0x2d
   17680:	movne	r3, #0
   17684:	beq	177a8 <__assert_fail@plt+0x5860>
   17688:	str	r3, [sp, #72]	; 0x48
   1768c:	ldr	r2, [sp, #56]	; 0x38
   17690:	cmp	r2, #0
   17694:	movne	r3, #0
   17698:	ldr	r2, [sp, #28]
   1769c:	orrs	r3, r2, r3
   176a0:	str	r3, [sp, #28]
   176a4:	beq	17648 <__assert_fail@plt+0x5700>
   176a8:	add	r0, sp, #508	; 0x1fc
   176ac:	bl	12b4c <__assert_fail@plt+0xc04>
   176b0:	mov	r1, r0
   176b4:	str	r0, [sp, #64]	; 0x40
   176b8:	movw	r3, #25304	; 0x62d8
   176bc:	movt	r3, #3
   176c0:	ldr	r0, [r3]
   176c4:	mov	r2, #0
   176c8:	add	r0, r0, #1
   176cc:	bl	12b7c <__assert_fail@plt+0xc34>
   176d0:	cmp	r0, #0
   176d4:	beq	19950 <__assert_fail@plt+0x7a08>
   176d8:	ldrb	r3, [r0]
   176dc:	cmp	r3, #46	; 0x2e
   176e0:	beq	177c0 <__assert_fail@plt+0x5878>
   176e4:	ldr	r3, [sp, #64]	; 0x40
   176e8:	ldr	r3, [r3]
   176ec:	cmp	r3, #0
   176f0:	beq	19d2c <__assert_fail@plt+0x7de4>
   176f4:	mov	r2, #0
   176f8:	ldr	r1, [sp, #64]	; 0x40
   176fc:	bl	12814 <__assert_fail@plt+0x8cc>
   17700:	ldrb	r3, [r0]
   17704:	cmp	r3, #0
   17708:	bne	17648 <__assert_fail@plt+0x5700>
   1770c:	ldr	r3, [sp, #72]	; 0x48
   17710:	cmp	r3, #0
   17714:	beq	17790 <__assert_fail@plt+0x5848>
   17718:	ldr	r3, [r5]
   1771c:	add	r2, r3, #1
   17720:	str	r2, [r5]
   17724:	ldr	r3, [sl, r3, lsl #2]
   17728:	str	r3, [sp, #72]	; 0x48
   1772c:	movw	r2, #18668	; 0x48ec
   17730:	movt	r2, #2
   17734:	ldr	r1, [sp, #64]	; 0x40
   17738:	add	r1, r1, #8
   1773c:	add	r0, r3, #1
   17740:	bl	12b7c <__assert_fail@plt+0xc34>
   17744:	cmp	r0, #0
   17748:	beq	177f4 <__assert_fail@plt+0x58ac>
   1774c:	ldrb	r3, [r0]
   17750:	cmp	r3, #46	; 0x2e
   17754:	beq	17810 <__assert_fail@plt+0x58c8>
   17758:	ldr	r2, [sp, #64]	; 0x40
   1775c:	ldr	r3, [r2, #12]
   17760:	cmp	r3, #0
   17764:	bne	17778 <__assert_fail@plt+0x5830>
   17768:	ldr	r3, [r2, #8]
   1776c:	cmp	r3, #0
   17770:	subne	r3, r3, #1
   17774:	strne	r3, [r2, #8]
   17778:	mov	r2, #1
   1777c:	ldr	r1, [sp, #64]	; 0x40
   17780:	bl	12814 <__assert_fail@plt+0x8cc>
   17784:	ldrb	r3, [r0]
   17788:	cmp	r3, #0
   1778c:	bne	1782c <__assert_fail@plt+0x58e4>
   17790:	mov	r3, #1
   17794:	ldr	r2, [sp, #64]	; 0x40
   17798:	strb	r3, [r2, #33]	; 0x21
   1779c:	mov	r0, r2
   177a0:	bl	12f6c <__assert_fail@plt+0x1024>
   177a4:	b	1714c <__assert_fail@plt+0x5204>
   177a8:	ldrb	r3, [r3, #1]
   177ac:	sub	r3, r3, #48	; 0x30
   177b0:	cmp	r3, #9
   177b4:	movhi	r3, #0
   177b8:	movls	r3, #1
   177bc:	b	17688 <__assert_fail@plt+0x5740>
   177c0:	mov	r2, #0
   177c4:	ldr	r3, [sp, #64]	; 0x40
   177c8:	add	r1, r3, #4
   177cc:	add	r0, r0, #1
   177d0:	bl	12b7c <__assert_fail@plt+0xc34>
   177d4:	ldr	r2, [sp, #64]	; 0x40
   177d8:	ldr	r3, [r2]
   177dc:	cmp	r3, #0
   177e0:	bne	19d48 <__assert_fail@plt+0x7e00>
   177e4:	ldr	r3, [r2, #4]
   177e8:	cmp	r3, #0
   177ec:	bne	19d48 <__assert_fail@plt+0x7e00>
   177f0:	b	19d3c <__assert_fail@plt+0x7df4>
   177f4:	ldr	r3, [pc, #-1756]	; 17120 <__assert_fail@plt+0x51d8>
   177f8:	movw	r2, #4449	; 0x1161
   177fc:	movw	r1, #13852	; 0x361c
   17800:	movt	r1, #2
   17804:	movw	r0, #19204	; 0x4b04
   17808:	movt	r0, #2
   1780c:	bl	11f48 <__assert_fail@plt>
   17810:	movw	r2, #18696	; 0x4908
   17814:	movt	r2, #2
   17818:	ldr	r3, [sp, #64]	; 0x40
   1781c:	add	r1, r3, #12
   17820:	add	r0, r0, #1
   17824:	bl	12b7c <__assert_fail@plt+0xc34>
   17828:	b	17758 <__assert_fail@plt+0x5810>
   1782c:	movw	r1, #18724	; 0x4924
   17830:	movt	r1, #2
   17834:	ldr	r0, [sp, #72]	; 0x48
   17838:	bl	129d0 <__assert_fail@plt+0xa88>
   1783c:	movw	r1, #25304	; 0x62d8
   17840:	movt	r1, #3
   17844:	mov	r2, #1
   17848:	str	r2, [sp, #8]
   1784c:	movw	r3, #25196	; 0x626c
   17850:	movt	r3, #3
   17854:	ldr	r3, [r3]
   17858:	str	r3, [sp, #4]
   1785c:	str	r2, [sp]
   17860:	add	r3, r8, #904	; 0x388
   17864:	add	r2, r8, #912	; 0x390
   17868:	ldr	r1, [r1]
   1786c:	movw	r0, #18756	; 0x4944
   17870:	movt	r0, #2
   17874:	bl	1a0ac <__assert_fail@plt+0x8164>
   17878:	add	r0, r8, r0
   1787c:	ldrb	r6, [r0, #904]	; 0x388
   17880:	strb	r6, [sp, #184]	; 0xb8
   17884:	mov	r3, #0
   17888:	strb	r3, [sp, #185]	; 0xb9
   1788c:	mov	r2, #2
   17890:	add	r1, sp, #468	; 0x1d4
   17894:	add	r0, sp, #184	; 0xb8
   17898:	bl	12814 <__assert_fail@plt+0x8cc>
   1789c:	b	1714c <__assert_fail@plt+0x5204>
   178a0:	movw	r3, #25304	; 0x62d8
   178a4:	movt	r3, #3
   178a8:	ldr	r1, [r3]
   178ac:	cmp	r1, #0
   178b0:	moveq	r6, #99	; 0x63
   178b4:	beq	178f0 <__assert_fail@plt+0x59a8>
   178b8:	mov	r2, #1
   178bc:	str	r2, [sp, #8]
   178c0:	movw	r3, #25196	; 0x626c
   178c4:	movt	r3, #3
   178c8:	ldr	r3, [r3]
   178cc:	str	r3, [sp, #4]
   178d0:	str	r2, [sp]
   178d4:	add	r3, r8, #940	; 0x3ac
   178d8:	add	r2, r8, #944	; 0x3b0
   178dc:	movw	r0, #18764	; 0x494c
   178e0:	movt	r0, #2
   178e4:	bl	1a0ac <__assert_fail@plt+0x8164>
   178e8:	add	r0, r8, r0
   178ec:	ldrb	r6, [r0, #940]	; 0x3ac
   178f0:	cmp	r9, #0
   178f4:	beq	17900 <__assert_fail@plt+0x59b8>
   178f8:	cmp	r9, r6
   178fc:	bne	17908 <__assert_fail@plt+0x59c0>
   17900:	uxtb	r9, r6
   17904:	b	1714c <__assert_fail@plt+0x5204>
   17908:	movw	r0, #18772	; 0x4954
   1790c:	movt	r0, #2
   17910:	bl	1299c <__assert_fail@plt+0xa54>
   17914:	movw	r3, #25312	; 0x62e0
   17918:	movt	r3, #3
   1791c:	ldr	r0, [r3, #1480]	; 0x5c8
   17920:	cmp	r0, #0
   17924:	beq	17940 <__assert_fail@plt+0x59f8>
   17928:	movw	r3, #25304	; 0x62d8
   1792c:	movt	r3, #3
   17930:	ldr	r1, [r3]
   17934:	bl	11a2c <strcmp@plt>
   17938:	cmp	r0, #0
   1793c:	bne	1795c <__assert_fail@plt+0x5a14>
   17940:	movw	r3, #25312	; 0x62e0
   17944:	movt	r3, #3
   17948:	movw	r2, #25304	; 0x62d8
   1794c:	movt	r2, #3
   17950:	ldr	r2, [r2]
   17954:	str	r2, [r3, #1480]	; 0x5c8
   17958:	b	1714c <__assert_fail@plt+0x5204>
   1795c:	mov	r2, #5
   17960:	movw	r1, #18776	; 0x4958
   17964:	movt	r1, #2
   17968:	mov	r0, #0
   1796c:	bl	11b58 <dcgettext@plt>
   17970:	mov	r2, r0
   17974:	mov	r1, #0
   17978:	mov	r0, #2
   1797c:	bl	11c90 <error@plt>
   17980:	movw	r3, #25312	; 0x62e0
   17984:	movt	r3, #3
   17988:	mov	r2, #1
   1798c:	strb	r2, [r3, #1296]	; 0x510
   17990:	b	1714c <__assert_fail@plt+0x5204>
   17994:	movw	r3, #25304	; 0x62d8
   17998:	movt	r3, #3
   1799c:	ldr	r3, [r3]
   179a0:	str	r3, [sp, #40]	; 0x28
   179a4:	b	1714c <__assert_fail@plt+0x5204>
   179a8:	add	r0, sp, #508	; 0x1fc
   179ac:	bl	12b4c <__assert_fail@plt+0xc04>
   179b0:	movw	r3, #25304	; 0x62d8
   179b4:	movt	r3, #3
   179b8:	movw	r2, #18816	; 0x4980
   179bc:	movt	r2, #2
   179c0:	str	r0, [sp, #64]	; 0x40
   179c4:	mov	r1, r0
   179c8:	ldr	r0, [r3]
   179cc:	bl	12b7c <__assert_fail@plt+0xc34>
   179d0:	ldr	r1, [sp, #64]	; 0x40
   179d4:	ldr	r3, [r1]
   179d8:	sub	r2, r3, #1
   179dc:	str	r2, [r1]
   179e0:	cmp	r3, #0
   179e4:	beq	17a58 <__assert_fail@plt+0x5b10>
   179e8:	ldrb	r3, [r0]
   179ec:	cmp	r3, #46	; 0x2e
   179f0:	beq	17a70 <__assert_fail@plt+0x5b28>
   179f4:	ldr	r2, [sp, #64]	; 0x40
   179f8:	ldr	r3, [r2]
   179fc:	cmp	r3, #0
   17a00:	bne	17a14 <__assert_fail@plt+0x5acc>
   17a04:	ldr	r3, [r2, #4]
   17a08:	cmp	r3, #0
   17a0c:	mvneq	r3, #0
   17a10:	streq	r3, [r2]
   17a14:	mov	r2, #0
   17a18:	ldr	r1, [sp, #64]	; 0x40
   17a1c:	bl	12814 <__assert_fail@plt+0x8cc>
   17a20:	ldrb	r3, [r0]
   17a24:	cmp	r3, #44	; 0x2c
   17a28:	beq	17ab8 <__assert_fail@plt+0x5b70>
   17a2c:	mvn	r3, #0
   17a30:	ldr	r2, [sp, #64]	; 0x40
   17a34:	str	r3, [r2, #8]
   17a38:	mov	r3, #0
   17a3c:	str	r3, [r2, #12]
   17a40:	ldrb	r3, [r0]
   17a44:	cmp	r3, #0
   17a48:	bne	17b38 <__assert_fail@plt+0x5bf0>
   17a4c:	ldr	r0, [sp, #64]	; 0x40
   17a50:	bl	12f6c <__assert_fail@plt+0x1024>
   17a54:	b	1714c <__assert_fail@plt+0x5204>
   17a58:	movw	r3, #25304	; 0x62d8
   17a5c:	movt	r3, #3
   17a60:	movw	r1, #18848	; 0x49a0
   17a64:	movt	r1, #2
   17a68:	ldr	r0, [r3]
   17a6c:	bl	129d0 <__assert_fail@plt+0xa88>
   17a70:	movw	r2, #18696	; 0x4908
   17a74:	movt	r2, #2
   17a78:	ldr	r1, [sp, #64]	; 0x40
   17a7c:	add	r1, r1, #4
   17a80:	add	r0, r0, #1
   17a84:	bl	12b7c <__assert_fail@plt+0xc34>
   17a88:	ldr	r1, [sp, #64]	; 0x40
   17a8c:	ldr	r3, [r1, #4]
   17a90:	sub	r2, r3, #1
   17a94:	str	r2, [r1, #4]
   17a98:	cmp	r3, #0
   17a9c:	bne	179f4 <__assert_fail@plt+0x5aac>
   17aa0:	movw	r3, #25304	; 0x62d8
   17aa4:	movt	r3, #3
   17aa8:	movw	r1, #18872	; 0x49b8
   17aac:	movt	r1, #2
   17ab0:	ldr	r0, [r3]
   17ab4:	bl	129d0 <__assert_fail@plt+0xa88>
   17ab8:	movw	r2, #18900	; 0x49d4
   17abc:	movt	r2, #2
   17ac0:	ldr	r1, [sp, #64]	; 0x40
   17ac4:	add	r1, r1, #8
   17ac8:	add	r0, r0, #1
   17acc:	bl	12b7c <__assert_fail@plt+0xc34>
   17ad0:	ldr	r1, [sp, #64]	; 0x40
   17ad4:	ldr	r3, [r1, #8]
   17ad8:	sub	r2, r3, #1
   17adc:	str	r2, [r1, #8]
   17ae0:	cmp	r3, #0
   17ae4:	beq	17b04 <__assert_fail@plt+0x5bbc>
   17ae8:	ldrb	r3, [r0]
   17aec:	cmp	r3, #46	; 0x2e
   17af0:	beq	17b1c <__assert_fail@plt+0x5bd4>
   17af4:	mov	r2, #1
   17af8:	ldr	r1, [sp, #64]	; 0x40
   17afc:	bl	12814 <__assert_fail@plt+0x8cc>
   17b00:	b	17a40 <__assert_fail@plt+0x5af8>
   17b04:	movw	r3, #25304	; 0x62d8
   17b08:	movt	r3, #3
   17b0c:	movw	r1, #18848	; 0x49a0
   17b10:	movt	r1, #2
   17b14:	ldr	r0, [r3]
   17b18:	bl	129d0 <__assert_fail@plt+0xa88>
   17b1c:	movw	r2, #18696	; 0x4908
   17b20:	movt	r2, #2
   17b24:	ldr	r3, [sp, #64]	; 0x40
   17b28:	add	r1, r3, #12
   17b2c:	add	r0, r0, #1
   17b30:	bl	12b7c <__assert_fail@plt+0xc34>
   17b34:	b	17af4 <__assert_fail@plt+0x5bac>
   17b38:	movw	r3, #25304	; 0x62d8
   17b3c:	movt	r3, #3
   17b40:	movw	r1, #18724	; 0x4924
   17b44:	movt	r1, #2
   17b48:	ldr	r0, [r3]
   17b4c:	bl	129d0 <__assert_fail@plt+0xa88>
   17b50:	ldr	r3, [sp, #96]	; 0x60
   17b54:	str	r3, [sp, #72]	; 0x48
   17b58:	movw	r3, #25304	; 0x62d8
   17b5c:	movt	r3, #3
   17b60:	ldr	r3, [r3]
   17b64:	mov	r0, r3
   17b68:	str	r3, [sp, #76]	; 0x4c
   17b6c:	movw	r3, #15800	; 0x3db8
   17b70:	movt	r3, #2
   17b74:	str	r3, [sp]
   17b78:	add	r3, sp, #120	; 0x78
   17b7c:	mov	r2, #10
   17b80:	mov	r1, #0
   17b84:	bl	21994 <__assert_fail@plt+0xfa4c>
   17b88:	str	r0, [sp, #64]	; 0x40
   17b8c:	add	r1, sp, #184	; 0xb8
   17b90:	mov	r0, #7
   17b94:	bl	11b94 <getrlimit64@plt>
   17b98:	cmp	r0, #0
   17b9c:	ldreq	r1, [sp, #184]	; 0xb8
   17ba0:	subeq	ip, r1, #3
   17ba4:	movne	ip, #17
   17ba8:	ldr	r3, [sp, #64]	; 0x40
   17bac:	cmp	r3, #0
   17bb0:	bne	17c80 <__assert_fail@plt+0x5d38>
   17bb4:	ldrd	r2, [sp, #120]	; 0x78
   17bb8:	movw	r0, #25060	; 0x61e4
   17bbc:	movt	r0, #3
   17bc0:	str	r2, [r0, #112]	; 0x70
   17bc4:	str	r2, [sp, #88]	; 0x58
   17bc8:	mov	r1, #0
   17bcc:	str	r1, [sp, #92]	; 0x5c
   17bd0:	ldrd	r0, [sp, #88]	; 0x58
   17bd4:	cmp	r3, r1
   17bd8:	cmpeq	r2, r0
   17bdc:	bne	17cac <__assert_fail@plt+0x5d64>
   17be0:	cmp	r2, #1
   17be4:	bls	17bf8 <__assert_fail@plt+0x5cb0>
   17be8:	cmp	r2, ip
   17bec:	bls	1714c <__assert_fail@plt+0x5204>
   17bf0:	mov	r6, ip
   17bf4:	b	17cb0 <__assert_fail@plt+0x5d68>
   17bf8:	mov	r2, #5
   17bfc:	movw	r1, #18928	; 0x49f0
   17c00:	movt	r1, #2
   17c04:	mov	r0, #0
   17c08:	bl	11b58 <dcgettext@plt>
   17c0c:	mov	r5, r0
   17c10:	movw	r3, #12736	; 0x31c0
   17c14:	movt	r3, #2
   17c18:	ldr	r2, [sp, #72]	; 0x48
   17c1c:	add	r3, r3, r2, lsl #4
   17c20:	ldr	r4, [r3, #368]	; 0x170
   17c24:	ldr	r0, [sp, #76]	; 0x4c
   17c28:	bl	1f870 <__assert_fail@plt+0xd928>
   17c2c:	str	r0, [sp]
   17c30:	mov	r3, r4
   17c34:	mov	r2, r5
   17c38:	mov	r1, #0
   17c3c:	mov	r0, r1
   17c40:	bl	11c90 <error@plt>
   17c44:	mov	r2, #5
   17c48:	movw	r1, #18956	; 0x4a0c
   17c4c:	movt	r1, #2
   17c50:	mov	r0, #0
   17c54:	bl	11b58 <dcgettext@plt>
   17c58:	mov	r5, r0
   17c5c:	movw	r0, #18984	; 0x4a28
   17c60:	movt	r0, #2
   17c64:	bl	1f870 <__assert_fail@plt+0xd928>
   17c68:	str	r0, [sp]
   17c6c:	mov	r3, r4
   17c70:	mov	r2, r5
   17c74:	mov	r1, #0
   17c78:	mov	r0, #2
   17c7c:	bl	11c90 <error@plt>
   17c80:	mov	r6, ip
   17c84:	ldr	r3, [sp, #64]	; 0x40
   17c88:	cmp	r3, #1
   17c8c:	beq	17cb0 <__assert_fail@plt+0x5d68>
   17c90:	ldr	r3, [sp, #76]	; 0x4c
   17c94:	str	r3, [sp]
   17c98:	ldr	r3, [pc, #-2940]	; 17124 <__assert_fail@plt+0x51dc>
   17c9c:	mov	r2, #4
   17ca0:	ldr	r1, [sp, #72]	; 0x48
   17ca4:	ldr	r0, [sp, #64]	; 0x40
   17ca8:	bl	217b0 <__assert_fail@plt+0xf868>
   17cac:	mov	r6, ip
   17cb0:	mov	r2, #5
   17cb4:	movw	r1, #18988	; 0x4a2c
   17cb8:	movt	r1, #2
   17cbc:	mov	r0, #0
   17cc0:	bl	11b58 <dcgettext@plt>
   17cc4:	mov	r5, r0
   17cc8:	movw	r3, #12736	; 0x31c0
   17ccc:	movt	r3, #2
   17cd0:	ldr	r2, [sp, #72]	; 0x48
   17cd4:	add	r3, r3, r2, lsl #4
   17cd8:	ldr	r4, [r3, #368]	; 0x170
   17cdc:	ldr	r0, [sp, #76]	; 0x4c
   17ce0:	bl	1f870 <__assert_fail@plt+0xd928>
   17ce4:	str	r0, [sp]
   17ce8:	mov	r3, r4
   17cec:	mov	r2, r5
   17cf0:	mov	r1, #0
   17cf4:	mov	r0, r1
   17cf8:	bl	11c90 <error@plt>
   17cfc:	mov	r2, #5
   17d00:	movw	r1, #19016	; 0x4a48
   17d04:	movt	r1, #2
   17d08:	mov	r0, #0
   17d0c:	bl	11b58 <dcgettext@plt>
   17d10:	mov	r5, r0
   17d14:	add	r1, sp, #152	; 0x98
   17d18:	mov	r0, r6
   17d1c:	bl	1ccdc <__assert_fail@plt+0xad94>
   17d20:	str	r0, [sp]
   17d24:	mov	r3, r4
   17d28:	mov	r2, r5
   17d2c:	mov	r1, #0
   17d30:	mov	r0, #2
   17d34:	bl	11c90 <error@plt>
   17d38:	ldr	r0, [sp, #44]	; 0x2c
   17d3c:	cmp	r0, #0
   17d40:	beq	17d5c <__assert_fail@plt+0x5e14>
   17d44:	movw	r3, #25304	; 0x62d8
   17d48:	movt	r3, #3
   17d4c:	ldr	r1, [r3]
   17d50:	bl	11a2c <strcmp@plt>
   17d54:	cmp	r0, #0
   17d58:	bne	17d70 <__assert_fail@plt+0x5e28>
   17d5c:	movw	r3, #25304	; 0x62d8
   17d60:	movt	r3, #3
   17d64:	ldr	r3, [r3]
   17d68:	str	r3, [sp, #44]	; 0x2c
   17d6c:	b	1714c <__assert_fail@plt+0x5204>
   17d70:	mov	r2, #5
   17d74:	movw	r1, #19064	; 0x4a78
   17d78:	movt	r1, #2
   17d7c:	mov	r0, #0
   17d80:	bl	11b58 <dcgettext@plt>
   17d84:	mov	r2, r0
   17d88:	mov	r1, #0
   17d8c:	mov	r0, #2
   17d90:	bl	11c90 <error@plt>
   17d94:	ldr	r0, [sp, #48]	; 0x30
   17d98:	cmp	r0, #0
   17d9c:	beq	17db8 <__assert_fail@plt+0x5e70>
   17da0:	movw	r3, #25304	; 0x62d8
   17da4:	movt	r3, #3
   17da8:	ldr	r1, [r3]
   17dac:	bl	11a2c <strcmp@plt>
   17db0:	cmp	r0, #0
   17db4:	bne	17dcc <__assert_fail@plt+0x5e84>
   17db8:	movw	r3, #25304	; 0x62d8
   17dbc:	movt	r3, #3
   17dc0:	ldr	r3, [r3]
   17dc4:	str	r3, [sp, #48]	; 0x30
   17dc8:	b	1714c <__assert_fail@plt+0x5204>
   17dcc:	mov	r2, #5
   17dd0:	movw	r1, #19096	; 0x4a98
   17dd4:	movt	r1, #2
   17dd8:	mov	r0, #0
   17ddc:	bl	11b58 <dcgettext@plt>
   17de0:	mov	r2, r0
   17de4:	mov	r1, #0
   17de8:	mov	r0, #2
   17dec:	bl	11c90 <error@plt>
   17df0:	movw	r3, #25312	; 0x62e0
   17df4:	movt	r3, #3
   17df8:	mov	r2, #1
   17dfc:	strb	r2, [r3, #1298]	; 0x512
   17e00:	b	1714c <__assert_fail@plt+0x5204>
   17e04:	ldr	r3, [sp, #96]	; 0x60
   17e08:	str	r3, [sp, #72]	; 0x48
   17e0c:	movw	r3, #25304	; 0x62d8
   17e10:	movt	r3, #3
   17e14:	ldr	r3, [r3]
   17e18:	mov	r0, r3
   17e1c:	str	r3, [sp, #76]	; 0x4c
   17e20:	movw	r3, #19132	; 0x4abc
   17e24:	movt	r3, #2
   17e28:	str	r3, [sp]
   17e2c:	add	r3, sp, #184	; 0xb8
   17e30:	mov	r2, #10
   17e34:	add	r1, sp, #152	; 0x98
   17e38:	bl	21994 <__assert_fail@plt+0xfa4c>
   17e3c:	cmp	r0, #0
   17e40:	bne	19990 <__assert_fail@plt+0x7a48>
   17e44:	ldr	r3, [sp, #152]	; 0x98
   17e48:	ldrb	r3, [r3, #-1]
   17e4c:	sub	r3, r3, #48	; 0x30
   17e50:	cmp	r3, #9
   17e54:	bhi	17e88 <__assert_fail@plt+0x5f40>
   17e58:	ldrd	r0, [sp, #184]	; 0xb8
   17e5c:	mvn	r2, #0
   17e60:	movw	r3, #65535	; 0xffff
   17e64:	movt	r3, #63	; 0x3f
   17e68:	cmp	r1, r3
   17e6c:	cmpeq	r0, r2
   17e70:	bhi	19974 <__assert_fail@plt+0x7a2c>
   17e74:	lsl	r3, r1, #10
   17e78:	orr	r3, r3, r0, lsr #22
   17e7c:	lsl	r2, r0, #10
   17e80:	str	r2, [sp, #184]	; 0xb8
   17e84:	str	r3, [sp, #188]	; 0xbc
   17e88:	ldrd	r2, [sp, #184]	; 0xb8
   17e8c:	movw	r1, #25312	; 0x62e0
   17e90:	movt	r1, #3
   17e94:	ldr	r0, [r1, #1488]	; 0x5d0
   17e98:	mov	r1, #0
   17e9c:	cmp	r1, r3
   17ea0:	cmpeq	r0, r2
   17ea4:	bhi	1714c <__assert_fail@plt+0x5204>
   17ea8:	movw	r1, #25312	; 0x62e0
   17eac:	movt	r1, #3
   17eb0:	mov	r0, r2
   17eb4:	str	r2, [r1, #1488]	; 0x5d0
   17eb8:	mov	r1, r3
   17ebc:	str	r2, [sp, #80]	; 0x50
   17ec0:	mov	r3, #0
   17ec4:	str	r3, [sp, #84]	; 0x54
   17ec8:	ldrd	r2, [sp, #80]	; 0x50
   17ecc:	strd	r0, [sp, #64]	; 0x40
   17ed0:	cmp	r3, r1
   17ed4:	cmpeq	r2, r0
   17ed8:	bne	17f4c <__assert_fail@plt+0x6004>
   17edc:	movw	r1, #25312	; 0x62e0
   17ee0:	movt	r1, #3
   17ee4:	movw	r3, #25060	; 0x61e4
   17ee8:	movt	r3, #3
   17eec:	ldr	r0, [r3, #112]	; 0x70
   17ef0:	mov	r3, #18
   17ef4:	mul	r3, r3, r0
   17ef8:	ldr	r2, [sp, #64]	; 0x40
   17efc:	cmp	r3, r2
   17f00:	movcc	r3, r2
   17f04:	str	r3, [r1, #1488]	; 0x5d0
   17f08:	b	1714c <__assert_fail@plt+0x5204>
   17f0c:	bl	1d200 <__assert_fail@plt+0xb2b8>
   17f10:	vmov.f64	d10, d0
   17f14:	ldrd	r0, [sp, #184]	; 0xb8
   17f18:	bl	22f10 <_obstack_memory_used@@Base+0x3dc>
   17f1c:	vmov	d7, r0, r1
   17f20:	vmul.f64	d10, d7, d10
   17f24:	vdiv.f64	d7, d10, d9
   17f28:	vcmpe.f64	d7, d8
   17f2c:	vmrs	APSR_nzcv, fpscr
   17f30:	bpl	17f44 <__assert_fail@plt+0x5ffc>
   17f34:	vmov	r0, r1, d7
   17f38:	bl	22fd0 <_obstack_memory_used@@Base+0x49c>
   17f3c:	strd	r0, [sp, #184]	; 0xb8
   17f40:	b	17e88 <__assert_fail@plt+0x5f40>
   17f44:	mov	r0, #1
   17f48:	b	19978 <__assert_fail@plt+0x7a30>
   17f4c:	mov	r0, #1
   17f50:	b	19978 <__assert_fail@plt+0x7a30>
   17f54:	movw	r3, #25304	; 0x62d8
   17f58:	movt	r3, #3
   17f5c:	ldr	r0, [r3]
   17f60:	ldrb	r2, [r0]
   17f64:	cmp	r2, #0
   17f68:	beq	17fbc <__assert_fail@plt+0x6074>
   17f6c:	ldrb	r3, [r0, #1]
   17f70:	cmp	r3, #0
   17f74:	beq	17f90 <__assert_fail@plt+0x6048>
   17f78:	movw	r1, #19160	; 0x4ad8
   17f7c:	movt	r1, #2
   17f80:	bl	11a2c <strcmp@plt>
   17f84:	cmp	r0, #0
   17f88:	bne	17fe0 <__assert_fail@plt+0x6098>
   17f8c:	mov	r2, #0
   17f90:	movw	r3, #25060	; 0x61e4
   17f94:	movt	r3, #3
   17f98:	ldr	r3, [r3]
   17f9c:	cmp	r3, #256	; 0x100
   17fa0:	beq	17fac <__assert_fail@plt+0x6064>
   17fa4:	cmp	r3, r2
   17fa8:	bne	1801c <__assert_fail@plt+0x60d4>
   17fac:	movw	r3, #25060	; 0x61e4
   17fb0:	movt	r3, #3
   17fb4:	str	r2, [r3]
   17fb8:	b	1714c <__assert_fail@plt+0x5204>
   17fbc:	mov	r2, #5
   17fc0:	movw	r1, #19148	; 0x4acc
   17fc4:	movt	r1, #2
   17fc8:	mov	r0, #0
   17fcc:	bl	11b58 <dcgettext@plt>
   17fd0:	mov	r2, r0
   17fd4:	mov	r1, #0
   17fd8:	mov	r0, #2
   17fdc:	bl	11c90 <error@plt>
   17fe0:	mov	r2, #5
   17fe4:	movw	r1, #19164	; 0x4adc
   17fe8:	movt	r1, #2
   17fec:	mov	r0, #0
   17ff0:	bl	11b58 <dcgettext@plt>
   17ff4:	mov	r4, r0
   17ff8:	movw	r3, #25304	; 0x62d8
   17ffc:	movt	r3, #3
   18000:	ldr	r0, [r3]
   18004:	bl	1f870 <__assert_fail@plt+0xd928>
   18008:	mov	r3, r0
   1800c:	mov	r2, r4
   18010:	mov	r1, #0
   18014:	mov	r0, #2
   18018:	bl	11c90 <error@plt>
   1801c:	mov	r2, #5
   18020:	movw	r1, #19188	; 0x4af4
   18024:	movt	r1, #2
   18028:	mov	r0, #0
   1802c:	bl	11b58 <dcgettext@plt>
   18030:	mov	r2, r0
   18034:	mov	r1, #0
   18038:	mov	r0, #2
   1803c:	bl	11c90 <error@plt>
   18040:	movw	r3, #25304	; 0x62d8
   18044:	movt	r3, #3
   18048:	ldr	r0, [r3]
   1804c:	bl	12fc8 <__assert_fail@plt+0x1080>
   18050:	b	1714c <__assert_fail@plt+0x5204>
   18054:	ldr	r3, [sp, #96]	; 0x60
   18058:	str	r3, [sp, #52]	; 0x34
   1805c:	movw	r3, #25304	; 0x62d8
   18060:	movt	r3, #3
   18064:	ldr	r3, [r3]
   18068:	mov	r0, r3
   1806c:	str	r3, [sp, #64]	; 0x40
   18070:	movw	r3, #15800	; 0x3db8
   18074:	movt	r3, #2
   18078:	str	r3, [sp]
   1807c:	add	r3, sp, #184	; 0xb8
   18080:	mov	r2, #10
   18084:	mov	r1, #0
   18088:	bl	21994 <__assert_fail@plt+0xfa4c>
   1808c:	cmp	r0, #1
   18090:	beq	18104 <__assert_fail@plt+0x61bc>
   18094:	cmp	r0, #0
   18098:	bne	180e0 <__assert_fail@plt+0x6198>
   1809c:	ldrd	r2, [sp, #184]	; 0xb8
   180a0:	mvn	r0, #0
   180a4:	mov	r1, #0
   180a8:	cmp	r3, r1
   180ac:	cmpeq	r2, r0
   180b0:	bhi	180f8 <__assert_fail@plt+0x61b0>
   180b4:	orrs	r1, r2, r3
   180b8:	bne	180fc <__assert_fail@plt+0x61b4>
   180bc:	mov	r2, #5
   180c0:	movw	r1, #19208	; 0x4b08
   180c4:	movt	r1, #2
   180c8:	mov	r0, #0
   180cc:	bl	11b58 <dcgettext@plt>
   180d0:	mov	r2, r0
   180d4:	mov	r1, #0
   180d8:	mov	r0, #2
   180dc:	bl	11c90 <error@plt>
   180e0:	ldr	r3, [sp, #64]	; 0x40
   180e4:	str	r3, [sp]
   180e8:	ldr	r3, [pc, #-4044]	; 17124 <__assert_fail@plt+0x51dc>
   180ec:	mov	r2, #7
   180f0:	ldr	r1, [sp, #52]	; 0x34
   180f4:	bl	217b0 <__assert_fail@plt+0xf868>
   180f8:	mvn	r2, #0
   180fc:	str	r2, [sp, #52]	; 0x34
   18100:	b	1714c <__assert_fail@plt+0x5204>
   18104:	mvn	r3, #0
   18108:	str	r3, [sp, #52]	; 0x34
   1810c:	b	1714c <__assert_fail@plt+0x5204>
   18110:	movw	r3, #25312	; 0x62e0
   18114:	movt	r3, #3
   18118:	mov	r2, #1
   1811c:	strb	r2, [r3, #1297]	; 0x511
   18120:	b	1714c <__assert_fail@plt+0x5204>
   18124:	ldr	r2, [r5]
   18128:	movw	r3, #25304	; 0x62d8
   1812c:	movt	r3, #3
   18130:	ldr	r3, [r3]
   18134:	sub	r1, r2, #-1073741823	; 0xc0000001
   18138:	ldr	r1, [sl, r1, lsl #2]
   1813c:	cmp	r1, r3
   18140:	bne	1714c <__assert_fail@plt+0x5204>
   18144:	sub	r3, r3, #1
   18148:	ldrb	r1, [r3, #1]!
   1814c:	sub	r0, r1, #48	; 0x30
   18150:	cmp	r0, #9
   18154:	bls	18148 <__assert_fail@plt+0x6200>
   18158:	cmp	r1, #0
   1815c:	subne	r2, r2, #1
   18160:	str	r2, [r5]
   18164:	b	1714c <__assert_fail@plt+0x5204>
   18168:	movw	r3, #25060	; 0x61e4
   1816c:	movt	r3, #3
   18170:	mov	r2, #0
   18174:	strb	r2, [r3, #100]	; 0x64
   18178:	b	1714c <__assert_fail@plt+0x5204>
   1817c:	mov	r0, #0
   18180:	bl	16778 <__assert_fail@plt+0x4830>
   18184:	movw	r3, #25192	; 0x6268
   18188:	movt	r3, #3
   1818c:	movw	r0, #25300	; 0x62d4
   18190:	movt	r0, #3
   18194:	mov	r4, #0
   18198:	str	r4, [sp, #8]
   1819c:	movw	r2, #19244	; 0x4b2c
   181a0:	movt	r2, #2
   181a4:	str	r2, [sp, #4]
   181a8:	movw	r2, #19256	; 0x4b38
   181ac:	movt	r2, #2
   181b0:	str	r2, [sp]
   181b4:	ldr	r3, [r3]
   181b8:	movw	r2, #18444	; 0x480c
   181bc:	movt	r2, #2
   181c0:	movw	r1, #20740	; 0x5104
   181c4:	movt	r1, #2
   181c8:	ldr	r0, [r0]
   181cc:	bl	20f98 <__assert_fail@plt+0xf050>
   181d0:	mov	r0, r4
   181d4:	bl	11d38 <exit@plt>
   181d8:	mov	r0, #2
   181dc:	bl	16778 <__assert_fail@plt+0x4830>
   181e0:	mov	r3, #1
   181e4:	str	r3, [sp, #36]	; 0x24
   181e8:	b	1714c <__assert_fail@plt+0x5204>
   181ec:	ldr	r3, [sp, #40]	; 0x28
   181f0:	cmp	r3, #0
   181f4:	beq	18408 <__assert_fail@plt+0x64c0>
   181f8:	cmp	r4, #0
   181fc:	bne	182a8 <__assert_fail@plt+0x6360>
   18200:	movw	r1, #14404	; 0x3844
   18204:	movt	r1, #2
   18208:	ldr	r0, [sp, #40]	; 0x28
   1820c:	bl	12e94 <__assert_fail@plt+0xf4c>
   18210:	mov	r5, r0
   18214:	add	r0, sp, #324	; 0x144
   18218:	bl	20188 <__assert_fail@plt+0xe240>
   1821c:	add	r1, sp, #324	; 0x144
   18220:	mov	r0, r5
   18224:	bl	20254 <__assert_fail@plt+0xe30c>
   18228:	cmp	r0, #0
   1822c:	beq	18324 <__assert_fail@plt+0x63dc>
   18230:	ldr	r1, [sp, #40]	; 0x28
   18234:	mov	r0, r5
   18238:	bl	12ed4 <__assert_fail@plt+0xf8c>
   1823c:	ldr	r3, [sp, #324]	; 0x144
   18240:	cmp	r3, #0
   18244:	beq	183d0 <__assert_fail@plt+0x6488>
   18248:	ldr	r0, [sp, #20]
   1824c:	bl	1b778 <__assert_fail@plt+0x9830>
   18250:	ldr	r3, [sp, #328]	; 0x148
   18254:	str	r3, [sp, #20]
   18258:	ldr	r8, [sp, #324]	; 0x144
   1825c:	cmp	r8, #0
   18260:	beq	19d0c <__assert_fail@plt+0x7dc4>
   18264:	mov	r5, r3
   18268:	movw	sl, #13824	; 0x3600
   1826c:	movt	sl, #2
   18270:	mov	fp, r5
   18274:	ldr	r6, [r5], #4
   18278:	mov	r1, sl
   1827c:	mov	r0, r6
   18280:	bl	11a2c <strcmp@plt>
   18284:	cmp	r0, #0
   18288:	beq	18358 <__assert_fail@plt+0x6410>
   1828c:	ldrb	r3, [r6]
   18290:	cmp	r3, #0
   18294:	beq	1838c <__assert_fail@plt+0x6444>
   18298:	add	r4, r4, #1
   1829c:	cmp	r8, r4
   182a0:	bne	18270 <__assert_fail@plt+0x6328>
   182a4:	b	19d0c <__assert_fail@plt+0x7dc4>
   182a8:	mov	r2, #5
   182ac:	movw	r1, #19272	; 0x4b48
   182b0:	movt	r1, #2
   182b4:	mov	r0, #0
   182b8:	bl	11b58 <dcgettext@plt>
   182bc:	mov	r4, r0
   182c0:	ldr	r3, [sp, #20]
   182c4:	ldr	r1, [r3]
   182c8:	mov	r0, #4
   182cc:	bl	1f580 <__assert_fail@plt+0xd638>
   182d0:	mov	r3, r0
   182d4:	mov	r2, r4
   182d8:	mov	r1, #0
   182dc:	mov	r0, r1
   182e0:	bl	11c90 <error@plt>
   182e4:	movw	r3, #25288	; 0x62c8
   182e8:	movt	r3, #3
   182ec:	ldr	r4, [r3]
   182f0:	mov	r2, #5
   182f4:	movw	r1, #19292	; 0x4b5c
   182f8:	movt	r1, #2
   182fc:	mov	r0, #0
   18300:	bl	11b58 <dcgettext@plt>
   18304:	mov	r3, r0
   18308:	movw	r2, #21740	; 0x54ec
   1830c:	movt	r2, #2
   18310:	mov	r1, #1
   18314:	mov	r0, r4
   18318:	bl	11dd4 <__fprintf_chk@plt>
   1831c:	mov	r0, #2
   18320:	bl	16778 <__assert_fail@plt+0x4830>
   18324:	mov	r2, #5
   18328:	movw	r1, #19344	; 0x4b90
   1832c:	movt	r1, #2
   18330:	bl	11b58 <dcgettext@plt>
   18334:	mov	r4, r0
   18338:	ldr	r1, [sp, #40]	; 0x28
   1833c:	mov	r0, #4
   18340:	bl	1f580 <__assert_fail@plt+0xd638>
   18344:	mov	r3, r0
   18348:	mov	r2, r4
   1834c:	mov	r1, #0
   18350:	mov	r0, #2
   18354:	bl	11c90 <error@plt>
   18358:	mov	r2, #5
   1835c:	movw	r1, #19376	; 0x4bb0
   18360:	movt	r1, #2
   18364:	bl	11b58 <dcgettext@plt>
   18368:	mov	r4, r0
   1836c:	ldr	r1, [fp]
   18370:	mov	r0, #4
   18374:	bl	1f580 <__assert_fail@plt+0xd638>
   18378:	mov	r3, r0
   1837c:	mov	r2, r4
   18380:	mov	r1, #0
   18384:	mov	r0, #2
   18388:	bl	11c90 <error@plt>
   1838c:	mov	r2, #5
   18390:	movw	r1, #19440	; 0x4bf0
   18394:	movt	r1, #2
   18398:	mov	r0, #0
   1839c:	bl	11b58 <dcgettext@plt>
   183a0:	mov	r5, r0
   183a4:	ldr	r2, [sp, #40]	; 0x28
   183a8:	mov	r1, #3
   183ac:	mov	r0, #0
   183b0:	bl	1f6a4 <__assert_fail@plt+0xd75c>
   183b4:	add	r4, r4, #1
   183b8:	str	r4, [sp]
   183bc:	mov	r3, r0
   183c0:	mov	r2, r5
   183c4:	mov	r1, #0
   183c8:	mov	r0, #2
   183cc:	bl	11c90 <error@plt>
   183d0:	mov	r2, #5
   183d4:	movw	r1, #19480	; 0x4c18
   183d8:	movt	r1, #2
   183dc:	mov	r0, #0
   183e0:	bl	11b58 <dcgettext@plt>
   183e4:	mov	r4, r0
   183e8:	ldr	r1, [sp, #40]	; 0x28
   183ec:	mov	r0, #4
   183f0:	bl	1f580 <__assert_fail@plt+0xd638>
   183f4:	mov	r3, r0
   183f8:	mov	r2, r4
   183fc:	mov	r1, #0
   18400:	mov	r0, #2
   18404:	bl	11c90 <error@plt>
   18408:	mov	r8, r4
   1840c:	b	19d0c <__assert_fail@plt+0x7dc4>
   18410:	ldrb	r3, [r5, #27]
   18414:	orr	sl, sl, r3
   18418:	ldr	r5, [r5, #36]	; 0x24
   1841c:	cmp	r5, #0
   18420:	beq	1849c <__assert_fail@plt+0x6554>
   18424:	mov	r0, r5
   18428:	bl	12668 <__assert_fail@plt+0x720>
   1842c:	cmp	r0, #0
   18430:	beq	18410 <__assert_fail@plt+0x64c8>
   18434:	ldrb	r3, [r5, #31]
   18438:	cmp	r3, #0
   1843c:	bne	18410 <__assert_fail@plt+0x64c8>
   18440:	ldr	r3, [sp, #484]	; 0x1e4
   18444:	str	r3, [r5, #16]
   18448:	ldr	r3, [sp, #488]	; 0x1e8
   1844c:	str	r3, [r5, #20]
   18450:	ldrb	r3, [sp, #492]	; 0x1ec
   18454:	strb	r3, [r5, #24]
   18458:	ldrb	r3, [sp, #493]	; 0x1ed
   1845c:	strb	r3, [r5, #25]
   18460:	ldrb	r3, [sp, #498]	; 0x1f2
   18464:	strb	r3, [r5, #30]
   18468:	ldrb	r3, [sp, #494]	; 0x1ee
   1846c:	strb	r3, [r5, #26]
   18470:	ldrb	r3, [sp, #496]	; 0x1f0
   18474:	strb	r3, [r5, #28]
   18478:	ldrb	r3, [sp, #497]	; 0x1f1
   1847c:	strb	r3, [r5, #29]
   18480:	ldrb	r3, [sp, #500]	; 0x1f4
   18484:	strb	r3, [r5, #32]
   18488:	ldrb	r3, [sp, #495]	; 0x1ef
   1848c:	strb	r3, [r5, #27]
   18490:	ldrb	r3, [sp, #499]	; 0x1f3
   18494:	strb	r3, [r5, #31]
   18498:	b	18410 <__assert_fail@plt+0x64c8>
   1849c:	mov	r3, #0
   184a0:	mov	r5, r3
   184a4:	ldrb	r3, [r4, #26]
   184a8:	ldrb	r2, [r4, #28]
   184ac:	add	r3, r3, r2
   184b0:	ldrb	r2, [r4, #29]
   184b4:	add	r3, r3, r2
   184b8:	ldrb	r2, [r4, #30]
   184bc:	add	r3, r3, r2
   184c0:	ldrb	r2, [r4, #27]
   184c4:	ldrb	r1, [r4, #32]
   184c8:	orr	r2, r2, r1
   184cc:	ldr	r1, [r4, #16]
   184d0:	cmp	r1, #0
   184d4:	orrne	r2, r2, #1
   184d8:	add	r3, r3, r2
   184dc:	cmp	r3, #1
   184e0:	bgt	18530 <__assert_fail@plt+0x65e8>
   184e4:	ldr	r4, [r4, #36]	; 0x24
   184e8:	cmp	r4, #0
   184ec:	beq	18588 <__assert_fail@plt+0x6640>
   184f0:	ldrb	r3, [r4, #26]
   184f4:	ldrb	r2, [r4, #28]
   184f8:	add	r3, r3, r2
   184fc:	ldrb	r2, [r4, #29]
   18500:	add	r3, r3, r2
   18504:	ldrb	r2, [r4, #30]
   18508:	add	r3, r3, r2
   1850c:	ldrb	r2, [r4, #32]
   18510:	ldrb	r1, [r4, #27]
   18514:	orr	r2, r2, r1
   18518:	ldr	r1, [r4, #16]
   1851c:	cmp	r1, #0
   18520:	orrne	r2, r2, #1
   18524:	add	r3, r3, r2
   18528:	cmp	r3, #1
   1852c:	ble	184e4 <__assert_fail@plt+0x659c>
   18530:	mov	r3, #0
   18534:	strb	r3, [r4, #31]
   18538:	strb	r3, [r4, #25]
   1853c:	strb	r3, [r4, #24]
   18540:	add	r1, sp, #184	; 0xb8
   18544:	mov	r0, r4
   18548:	bl	12700 <__assert_fail@plt+0x7b8>
   1854c:	add	r0, sp, #184	; 0xb8
   18550:	bl	1299c <__assert_fail@plt+0xa54>
   18554:	add	r0, sp, #468	; 0x1d4
   18558:	bl	12f6c <__assert_fail@plt+0x1024>
   1855c:	ldrb	sl, [sp, #495]	; 0x1ef
   18560:	movw	r3, #25312	; 0x62e0
   18564:	movt	r3, #3
   18568:	ldr	r4, [r3, #1280]	; 0x500
   1856c:	cmp	r4, #0
   18570:	beq	18580 <__assert_fail@plt+0x6638>
   18574:	mov	r3, #1
   18578:	mov	r5, r3
   1857c:	b	184a4 <__assert_fail@plt+0x655c>
   18580:	mov	r3, #1
   18584:	mov	r5, r3
   18588:	movw	r3, #25312	; 0x62e0
   1858c:	movt	r3, #3
   18590:	ldrb	r3, [r3, #1296]	; 0x510
   18594:	cmp	r3, #0
   18598:	beq	18c90 <__assert_fail@plt+0x6d48>
   1859c:	ldr	r3, [sp, #44]	; 0x2c
   185a0:	adds	r3, r3, #0
   185a4:	movne	r3, #1
   185a8:	cmp	r9, #0
   185ac:	movne	r3, #1
   185b0:	str	r3, [sp, #24]
   185b4:	cmp	r3, #0
   185b8:	beq	185e0 <__assert_fail@plt+0x6698>
   185bc:	cmp	r9, #0
   185c0:	moveq	r9, #111	; 0x6f
   185c4:	movw	r0, #25060	; 0x61e4
   185c8:	movt	r0, #3
   185cc:	strb	r9, [r0, #116]!	; 0x74
   185d0:	bl	1299c <__assert_fail@plt+0xa54>
   185d4:	mov	sl, #0
   185d8:	mov	r5, sl
   185dc:	b	1859c <__assert_fail@plt+0x6654>
   185e0:	ldr	r3, [sp, #60]	; 0x3c
   185e4:	cmp	r3, #0
   185e8:	beq	186d0 <__assert_fail@plt+0x6788>
   185ec:	movw	r1, #15800	; 0x3db8
   185f0:	movt	r1, #2
   185f4:	mov	r0, #3
   185f8:	bl	11e28 <setlocale@plt>
   185fc:	cmp	r0, #0
   18600:	beq	186d0 <__assert_fail@plt+0x6788>
   18604:	movw	r3, #25312	; 0x62e0
   18608:	movt	r3, #3
   1860c:	ldrb	r3, [r3, #1299]	; 0x513
   18610:	cmp	r3, #0
   18614:	beq	18700 <__assert_fail@plt+0x67b8>
   18618:	mov	r2, #5
   1861c:	movw	r1, #19524	; 0x4c44
   18620:	movt	r1, #2
   18624:	mov	r0, #0
   18628:	bl	11b58 <dcgettext@plt>
   1862c:	mov	r4, r0
   18630:	mov	r1, #0
   18634:	mov	r0, #3
   18638:	bl	11e28 <setlocale@plt>
   1863c:	bl	1f870 <__assert_fail@plt+0xd928>
   18640:	mov	r3, r0
   18644:	mov	r2, r4
   18648:	mov	r1, #0
   1864c:	mov	r0, r1
   18650:	bl	11c90 <error@plt>
   18654:	add	r1, sp, #468	; 0x1d4
   18658:	ldrd	r2, [r1]
   1865c:	strd	r2, [sp, #184]	; 0xb8
   18660:	ldrd	r2, [r1, #8]
   18664:	strd	r2, [sp, #192]	; 0xc0
   18668:	ldrd	r2, [r1, #16]
   1866c:	strd	r2, [sp, #200]	; 0xc8
   18670:	ldrd	r2, [r1, #24]
   18674:	strd	r2, [sp, #208]	; 0xd0
   18678:	ldrd	r2, [r1, #32]
   1867c:	strd	r2, [sp, #216]	; 0xd8
   18680:	movw	r3, #25312	; 0x62e0
   18684:	movt	r3, #3
   18688:	ldr	r4, [r3, #1280]	; 0x500
   1868c:	ldr	fp, [sp, #24]
   18690:	str	fp, [sp, #60]	; 0x3c
   18694:	str	fp, [sp, #32]
   18698:	mov	r6, #1
   1869c:	add	r2, sp, #120	; 0x78
   186a0:	add	r2, r2, r6
   186a4:	str	r2, [sp, #40]	; 0x28
   186a8:	movw	r2, #27437	; 0x6b2d
   186ac:	movt	r2, #32
   186b0:	str	r2, [sp, #56]	; 0x38
   186b4:	str	r9, [sp, #64]	; 0x40
   186b8:	str	r8, [sp, #72]	; 0x48
   186bc:	str	sl, [sp, #76]	; 0x4c
   186c0:	str	r7, [sp, #80]	; 0x50
   186c4:	mov	sl, fp
   186c8:	mov	r8, r5
   186cc:	b	19ad4 <__assert_fail@plt+0x7b8c>
   186d0:	mov	r2, #5
   186d4:	movw	r1, #19500	; 0x4c2c
   186d8:	movt	r1, #2
   186dc:	mov	r0, #0
   186e0:	bl	11b58 <dcgettext@plt>
   186e4:	mov	r3, r0
   186e8:	movw	r2, #14184	; 0x3768
   186ec:	movt	r2, #2
   186f0:	mov	r1, #0
   186f4:	mov	r0, r1
   186f8:	bl	11c90 <error@plt>
   186fc:	b	18604 <__assert_fail@plt+0x66bc>
   18700:	mov	r2, #5
   18704:	movw	r1, #19572	; 0x4c74
   18708:	movt	r1, #2
   1870c:	mov	r0, #0
   18710:	bl	11b58 <dcgettext@plt>
   18714:	mov	r3, r0
   18718:	movw	r2, #14184	; 0x3768
   1871c:	movt	r2, #2
   18720:	mov	r1, #0
   18724:	mov	r0, r1
   18728:	bl	11c90 <error@plt>
   1872c:	b	18654 <__assert_fail@plt+0x670c>
   18730:	ldrb	r3, [r4, #28]
   18734:	cmp	r3, #0
   18738:	moveq	fp, #1
   1873c:	cmp	r3, #0
   18740:	movne	sl, r3
   18744:	b	19af4 <__assert_fail@plt+0x7bac>
   18748:	movw	r3, #19628	; 0x4cac
   1874c:	movt	r3, #2
   18750:	ldrh	r2, [r3]
   18754:	ldr	r7, [sp, #28]
   18758:	strh	r2, [r7]
   1875c:	ldrb	r3, [r3, #2]
   18760:	strb	r3, [r7, #2]!
   18764:	add	r9, r9, #1
   18768:	add	r2, sp, #96	; 0x60
   1876c:	mov	r0, r9
   18770:	mov	r1, #0
   18774:	bl	1cd20 <__assert_fail@plt+0xadd8>
   18778:	mov	r1, r0
   1877c:	mov	r0, r7
   18780:	bl	11c54 <strcpy@plt>
   18784:	movw	r3, #19632	; 0x4cb0
   18788:	movt	r3, #2
   1878c:	ldrh	r3, [r3]
   18790:	strh	r3, [r5], #1
   18794:	ldr	r0, [r4, #12]
   18798:	cmn	r0, #1
   1879c:	movne	r0, #0
   187a0:	moveq	r0, #1
   187a4:	add	r2, sp, #96	; 0x60
   187a8:	add	r0, r0, r9
   187ac:	mov	r1, #0
   187b0:	bl	1cd20 <__assert_fail@plt+0xadd8>
   187b4:	mov	r1, r0
   187b8:	mov	r0, r5
   187bc:	bl	11c54 <strcpy@plt>
   187c0:	b	19b78 <__assert_fail@plt+0x7c30>
   187c4:	ldrb	r3, [r4, #24]
   187c8:	cmp	r3, #0
   187cc:	bne	187e4 <__assert_fail@plt+0x689c>
   187d0:	tst	r1, #1
   187d4:	beq	187fc <__assert_fail@plt+0x68b4>
   187d8:	ldr	r3, [r4, #4]
   187dc:	cmp	r3, #0
   187e0:	bne	187fc <__assert_fail@plt+0x68b4>
   187e4:	ldrb	r3, [r4, #25]
   187e8:	cmp	r3, #0
   187ec:	bne	19c64 <__assert_fail@plt+0x7d1c>
   187f0:	ldr	r3, [r4, #12]
   187f4:	cmp	r3, #0
   187f8:	beq	19c64 <__assert_fail@plt+0x7d1c>
   187fc:	mov	r2, #5
   18800:	movw	r1, #19684	; 0x4ce4
   18804:	movt	r1, #2
   18808:	mov	r0, #0
   1880c:	bl	11b58 <dcgettext@plt>
   18810:	mov	r3, r6
   18814:	mov	r2, r0
   18818:	mov	r1, #0
   1881c:	mov	r0, r1
   18820:	bl	11c90 <error@plt>
   18824:	b	19c64 <__assert_fail@plt+0x7d1c>
   18828:	ldr	r9, [sp, #64]	; 0x40
   1882c:	ldr	r8, [sp, #72]	; 0x48
   18830:	ldr	r7, [sp, #80]	; 0x50
   18834:	mov	r6, sl
   18838:	ldr	sl, [sp, #76]	; 0x4c
   1883c:	ldr	r3, [sp, #32]
   18840:	cmp	r3, #0
   18844:	beq	18998 <__assert_fail@plt+0x6a50>
   18848:	movw	r3, #25060	; 0x61e4
   1884c:	movt	r3, #3
   18850:	ldr	r2, [r3]
   18854:	cmp	r2, #256	; 0x100
   18858:	beq	18914 <__assert_fail@plt+0x69cc>
   1885c:	movw	r3, #25312	; 0x62e0
   18860:	movt	r3, #3
   18864:	ldr	r3, [r3, #256]	; 0x100
   18868:	cmp	r3, r2
   1886c:	movne	r3, #0
   18870:	moveq	r3, #1
   18874:	str	r3, [sp, #32]
   18878:	ldr	r3, [sp, #32]
   1887c:	cmp	r3, #0
   18880:	bne	18948 <__assert_fail@plt+0x6a00>
   18884:	movw	r3, #25060	; 0x61e4
   18888:	movt	r3, #3
   1888c:	ldr	r3, [r3]
   18890:	cmp	r3, #256	; 0x100
   18894:	beq	18a78 <__assert_fail@plt+0x6b30>
   18898:	movw	r2, #25312	; 0x62e0
   1889c:	movt	r2, #3
   188a0:	ldrb	r2, [r2, #260]	; 0x104
   188a4:	cmp	r3, r2
   188a8:	beq	18aac <__assert_fail@plt+0x6b64>
   188ac:	cmp	r3, #45	; 0x2d
   188b0:	beq	18afc <__assert_fail@plt+0x6bb4>
   188b4:	ldr	r2, [sp, #60]	; 0x3c
   188b8:	cmp	r3, #43	; 0x2b
   188bc:	movne	r2, #0
   188c0:	andeq	r2, r2, #1
   188c4:	cmp	r2, #0
   188c8:	beq	189b0 <__assert_fail@plt+0x6a68>
   188cc:	mov	r2, #5
   188d0:	movw	r1, #19988	; 0x4e14
   188d4:	movt	r1, #2
   188d8:	mov	r0, #0
   188dc:	bl	11b58 <dcgettext@plt>
   188e0:	mov	r5, r0
   188e4:	mov	r3, #43	; 0x2b
   188e8:	strb	r3, [sp, #552]	; 0x228
   188ec:	mov	r4, #0
   188f0:	strb	r4, [sp, #553]	; 0x229
   188f4:	add	r0, sp, #552	; 0x228
   188f8:	bl	1f870 <__assert_fail@plt+0xd928>
   188fc:	mov	r3, r0
   18900:	mov	r2, r5
   18904:	mov	r1, r4
   18908:	mov	r0, r4
   1890c:	bl	11c90 <error@plt>
   18910:	b	189b0 <__assert_fail@plt+0x6a68>
   18914:	movw	r3, #25312	; 0x62e0
   18918:	movt	r3, #3
   1891c:	ldr	r3, [r3, #256]	; 0x100
   18920:	cmp	r3, #256	; 0x100
   18924:	moveq	r3, #0
   18928:	beq	18940 <__assert_fail@plt+0x69f8>
   1892c:	uxtb	r3, r3
   18930:	ldr	r2, [r7]
   18934:	lsl	r3, r3, #1
   18938:	ldrh	r3, [r2, r3]
   1893c:	and	r3, r3, #1
   18940:	str	r3, [sp, #32]
   18944:	b	18878 <__assert_fail@plt+0x6930>
   18948:	mov	r2, #5
   1894c:	movw	r1, #19804	; 0x4d5c
   18950:	movt	r1, #2
   18954:	mov	r0, #0
   18958:	bl	11b58 <dcgettext@plt>
   1895c:	mov	r5, r0
   18960:	movw	r3, #25312	; 0x62e0
   18964:	movt	r3, #3
   18968:	ldr	r3, [r3, #256]	; 0x100
   1896c:	strb	r3, [sp, #564]	; 0x234
   18970:	mov	r4, #0
   18974:	strb	r4, [sp, #565]	; 0x235
   18978:	add	r0, sp, #564	; 0x234
   1897c:	bl	1f870 <__assert_fail@plt+0xd928>
   18980:	mov	r3, r0
   18984:	mov	r2, r5
   18988:	mov	r1, r4
   1898c:	mov	r0, r4
   18990:	bl	11c90 <error@plt>
   18994:	b	18884 <__assert_fail@plt+0x693c>
   18998:	ldr	r3, [sp, #32]
   1899c:	ldr	r2, [sp, #60]	; 0x3c
   189a0:	orr	r3, r3, r2
   189a4:	ands	r3, r3, #255	; 0xff
   189a8:	streq	r3, [sp, #32]
   189ac:	bne	18884 <__assert_fail@plt+0x693c>
   189b0:	orr	r3, fp, r6
   189b4:	eor	r3, r3, #1
   189b8:	ldr	r2, [sp, #32]
   189bc:	orr	r3, r2, r3
   189c0:	tst	r3, #255	; 0xff
   189c4:	beq	18b44 <__assert_fail@plt+0x6bfc>
   189c8:	cmp	fp, #0
   189cc:	beq	189e4 <__assert_fail@plt+0x6a9c>
   189d0:	movw	r3, #25312	; 0x62e0
   189d4:	movt	r3, #3
   189d8:	ldrb	r3, [r3, #1497]	; 0x5d9
   189dc:	cmp	r3, #0
   189e0:	bne	18bd0 <__assert_fail@plt+0x6c88>
   189e4:	add	r0, sp, #184	; 0xb8
   189e8:	bl	12668 <__assert_fail@plt+0x720>
   189ec:	cmp	r0, #0
   189f0:	beq	18bf8 <__assert_fail@plt+0x6cb0>
   189f4:	ldrb	r3, [sp, #215]	; 0xd7
   189f8:	cmp	r3, #0
   189fc:	beq	18c90 <__assert_fail@plt+0x6d48>
   18a00:	movw	r3, #25312	; 0x62e0
   18a04:	movt	r3, #3
   18a08:	ldrb	r4, [r3, #1298]	; 0x512
   18a0c:	cmp	r4, #0
   18a10:	bne	198e8 <__assert_fail@plt+0x79a0>
   18a14:	movw	r3, #25312	; 0x62e0
   18a18:	movt	r3, #3
   18a1c:	ldrb	r4, [r3, #1297]	; 0x511
   18a20:	cmp	r4, #0
   18a24:	bne	19900 <__assert_fail@plt+0x79b8>
   18a28:	movw	r3, #25312	; 0x62e0
   18a2c:	movt	r3, #3
   18a30:	ldrb	r3, [r3, #1297]	; 0x511
   18a34:	cmp	r3, #0
   18a38:	bne	18c90 <__assert_fail@plt+0x6d48>
   18a3c:	movw	r3, #25312	; 0x62e0
   18a40:	movt	r3, #3
   18a44:	ldr	r3, [r3, #1280]	; 0x500
   18a48:	cmp	r3, #0
   18a4c:	beq	18c90 <__assert_fail@plt+0x6d48>
   18a50:	mov	r2, #5
   18a54:	movw	r1, #20228	; 0x4f04
   18a58:	movt	r1, #2
   18a5c:	mov	r0, #0
   18a60:	bl	11b58 <dcgettext@plt>
   18a64:	mov	r2, r0
   18a68:	mov	r1, #0
   18a6c:	mov	r0, r1
   18a70:	bl	11c90 <error@plt>
   18a74:	b	18c90 <__assert_fail@plt+0x6d48>
   18a78:	movw	r3, #25312	; 0x62e0
   18a7c:	movt	r3, #3
   18a80:	ldr	r3, [r3, #256]	; 0x100
   18a84:	cmp	r3, #256	; 0x100
   18a88:	beq	189b0 <__assert_fail@plt+0x6a68>
   18a8c:	movw	r3, #25312	; 0x62e0
   18a90:	movt	r3, #3
   18a94:	ldrb	r3, [r3, #260]	; 0x104
   18a98:	ldr	r2, [r7]
   18a9c:	lsl	r3, r3, #1
   18aa0:	ldrh	r3, [r2, r3]
   18aa4:	tst	r3, #1
   18aa8:	beq	189b0 <__assert_fail@plt+0x6a68>
   18aac:	mov	r2, #5
   18ab0:	movw	r1, #19868	; 0x4d9c
   18ab4:	movt	r1, #2
   18ab8:	mov	r0, #0
   18abc:	bl	11b58 <dcgettext@plt>
   18ac0:	mov	r5, r0
   18ac4:	movw	r3, #25312	; 0x62e0
   18ac8:	movt	r3, #3
   18acc:	ldrb	r3, [r3, #260]	; 0x104
   18ad0:	strb	r3, [sp, #560]	; 0x230
   18ad4:	mov	r4, #0
   18ad8:	strb	r4, [sp, #561]	; 0x231
   18adc:	add	r0, sp, #560	; 0x230
   18ae0:	bl	1f870 <__assert_fail@plt+0xd928>
   18ae4:	mov	r3, r0
   18ae8:	mov	r2, r5
   18aec:	mov	r1, r4
   18af0:	mov	r0, r4
   18af4:	bl	11c90 <error@plt>
   18af8:	b	189c8 <__assert_fail@plt+0x6a80>
   18afc:	mov	r2, #5
   18b00:	movw	r1, #19928	; 0x4dd8
   18b04:	movt	r1, #2
   18b08:	mov	r0, #0
   18b0c:	bl	11b58 <dcgettext@plt>
   18b10:	mov	r5, r0
   18b14:	mov	r3, #45	; 0x2d
   18b18:	strb	r3, [sp, #556]	; 0x22c
   18b1c:	mov	r4, #0
   18b20:	strb	r4, [sp, #557]	; 0x22d
   18b24:	add	r0, sp, #556	; 0x22c
   18b28:	bl	1f870 <__assert_fail@plt+0xd928>
   18b2c:	mov	r3, r0
   18b30:	mov	r2, r5
   18b34:	mov	r1, r4
   18b38:	mov	r0, r4
   18b3c:	bl	11c90 <error@plt>
   18b40:	b	189b0 <__assert_fail@plt+0x6a68>
   18b44:	mov	r2, #5
   18b48:	movw	r1, #20044	; 0x4e4c
   18b4c:	movt	r1, #2
   18b50:	mov	r0, #0
   18b54:	bl	11b58 <dcgettext@plt>
   18b58:	mov	r6, r0
   18b5c:	movw	r3, #25312	; 0x62e0
   18b60:	movt	r3, #3
   18b64:	ldrb	r5, [r3, #260]	; 0x104
   18b68:	movw	r3, #25060	; 0x61e4
   18b6c:	movt	r3, #3
   18b70:	ldr	r3, [r3]
   18b74:	cmp	r5, r3
   18b78:	movweq	r4, #15800	; 0x3db8
   18b7c:	movteq	r4, #2
   18b80:	bne	18bb4 <__assert_fail@plt+0x6c6c>
   18b84:	strb	r5, [sp, #548]	; 0x224
   18b88:	mov	r5, #0
   18b8c:	strb	r5, [sp, #549]	; 0x225
   18b90:	add	r0, sp, #548	; 0x224
   18b94:	bl	1f870 <__assert_fail@plt+0xd928>
   18b98:	str	r0, [sp]
   18b9c:	mov	r3, r4
   18ba0:	mov	r2, r6
   18ba4:	mov	r1, r5
   18ba8:	mov	r0, r5
   18bac:	bl	11c90 <error@plt>
   18bb0:	b	189c8 <__assert_fail@plt+0x6a80>
   18bb4:	mov	r2, #5
   18bb8:	movw	r1, #20096	; 0x4e80
   18bbc:	movt	r1, #2
   18bc0:	mov	r0, #0
   18bc4:	bl	11b58 <dcgettext@plt>
   18bc8:	mov	r4, r0
   18bcc:	b	18b84 <__assert_fail@plt+0x6c3c>
   18bd0:	mov	r2, #5
   18bd4:	movw	r1, #20104	; 0x4e88
   18bd8:	movt	r1, #2
   18bdc:	mov	r0, #0
   18be0:	bl	11b58 <dcgettext@plt>
   18be4:	mov	r2, r0
   18be8:	mov	r1, #0
   18bec:	mov	r0, r1
   18bf0:	bl	11c90 <error@plt>
   18bf4:	b	189e4 <__assert_fail@plt+0x6a9c>
   18bf8:	ldrb	r4, [sp, #215]	; 0xd7
   18bfc:	movw	r3, #25312	; 0x62e0
   18c00:	movt	r3, #3
   18c04:	ldrb	r3, [r3, #1298]	; 0x512
   18c08:	cmp	r3, #0
   18c0c:	bne	18c24 <__assert_fail@plt+0x6cdc>
   18c10:	movw	r3, #25312	; 0x62e0
   18c14:	movt	r3, #3
   18c18:	ldrb	r3, [r3, #1297]	; 0x511
   18c1c:	cmp	r3, #0
   18c20:	strbeq	r3, [sp, #215]	; 0xd7
   18c24:	add	r1, sp, #152	; 0x98
   18c28:	add	r0, sp, #184	; 0xb8
   18c2c:	bl	12700 <__assert_fail@plt+0x7b8>
   18c30:	add	r0, sp, #152	; 0x98
   18c34:	bl	11d50 <strlen@plt>
   18c38:	mov	r3, #5
   18c3c:	str	r3, [sp]
   18c40:	mov	r3, r0
   18c44:	movw	r2, #20176	; 0x4ed0
   18c48:	movt	r2, #2
   18c4c:	movw	r1, #20204	; 0x4eec
   18c50:	movt	r1, #2
   18c54:	mov	r0, #0
   18c58:	bl	11f3c <dcngettext@plt>
   18c5c:	add	r3, sp, #152	; 0x98
   18c60:	mov	r2, r0
   18c64:	mov	r1, #0
   18c68:	mov	r0, r1
   18c6c:	bl	11c90 <error@plt>
   18c70:	strb	r4, [sp, #215]	; 0xd7
   18c74:	cmp	r4, #0
   18c78:	beq	18c90 <__assert_fail@plt+0x6d48>
   18c7c:	movw	r3, #25312	; 0x62e0
   18c80:	movt	r3, #3
   18c84:	ldrb	r3, [r3, #1298]	; 0x512
   18c88:	cmp	r3, #0
   18c8c:	beq	18a28 <__assert_fail@plt+0x6ae0>
   18c90:	movw	r3, #25312	; 0x62e0
   18c94:	movt	r3, #3
   18c98:	ldrb	r2, [sp, #499]	; 0x1f3
   18c9c:	strb	r2, [r3, #1456]	; 0x5b0
   18ca0:	cmp	sl, #0
   18ca4:	bne	18d28 <__assert_fail@plt+0x6de0>
   18ca8:	movw	r3, #25312	; 0x62e0
   18cac:	movt	r3, #3
   18cb0:	ldr	r3, [r3, #1284]	; 0x504
   18cb4:	cmp	r3, #0
   18cb8:	beq	18dc4 <__assert_fail@plt+0x6e7c>
   18cbc:	cmp	r8, #0
   18cc0:	beq	18de8 <__assert_fail@plt+0x6ea0>
   18cc4:	movw	r3, #25312	; 0x62e0
   18cc8:	movt	r3, #3
   18ccc:	ldr	r2, [r3, #1488]	; 0x5d0
   18cd0:	cmp	r2, #0
   18cd4:	beq	18cfc <__assert_fail@plt+0x6db4>
   18cd8:	mov	r1, r3
   18cdc:	movw	r3, #25060	; 0x61e4
   18ce0:	movt	r3, #3
   18ce4:	ldr	r0, [r3, #112]	; 0x70
   18ce8:	mov	r3, #18
   18cec:	mul	r3, r3, r0
   18cf0:	cmp	r3, r2
   18cf4:	movcc	r3, r2
   18cf8:	str	r3, [r1, #1488]	; 0x5d0
   18cfc:	cmp	r9, #0
   18d00:	beq	18e10 <__assert_fail@plt+0x6ec8>
   18d04:	cmp	r8, #1
   18d08:	bhi	18e30 <__assert_fail@plt+0x6ee8>
   18d0c:	ldr	r3, [sp, #44]	; 0x2c
   18d10:	cmp	r3, #0
   18d14:	beq	18e70 <__assert_fail@plt+0x6f28>
   18d18:	movw	r0, #25060	; 0x61e4
   18d1c:	movt	r0, #3
   18d20:	strb	r9, [r0, #128]!	; 0x80
   18d24:	bl	1299c <__assert_fail@plt+0xa54>
   18d28:	mov	r1, #16
   18d2c:	ldr	r0, [sp, #48]	; 0x30
   18d30:	bl	1f944 <__assert_fail@plt+0xd9fc>
   18d34:	subs	r4, r0, #0
   18d38:	beq	18d7c <__assert_fail@plt+0x6e34>
   18d3c:	mov	r2, #16
   18d40:	add	r1, sp, #184	; 0xb8
   18d44:	mov	r0, r4
   18d48:	bl	1fac0 <__assert_fail@plt+0xdb78>
   18d4c:	mov	r0, r4
   18d50:	bl	1fc20 <__assert_fail@plt+0xdcd8>
   18d54:	cmp	r0, #0
   18d58:	bne	18da8 <__assert_fail@plt+0x6e60>
   18d5c:	ldr	r4, [pc, #2012]	; 19540 <__assert_fail@plt+0x75f8>
   18d60:	mov	r0, r4
   18d64:	bl	1a2e4 <__assert_fail@plt+0x839c>
   18d68:	mov	r2, r4
   18d6c:	mov	r1, #16
   18d70:	add	r0, sp, #184	; 0xb8
   18d74:	bl	1aeb8 <__assert_fail@plt+0x8f70>
   18d78:	b	18ca8 <__assert_fail@plt+0x6d60>
   18d7c:	mov	r2, #5
   18d80:	movw	r1, #13908	; 0x3654
   18d84:	movt	r1, #2
   18d88:	bl	11b58 <dcgettext@plt>
   18d8c:	movw	r1, #18616	; 0x48b8
   18d90:	movt	r1, #2
   18d94:	ldr	r3, [sp, #48]	; 0x30
   18d98:	cmp	r3, #0
   18d9c:	moveq	r3, r1
   18da0:	mov	r1, r3
   18da4:	bl	12c64 <__assert_fail@plt+0xd1c>
   18da8:	mov	r2, #5
   18dac:	movw	r1, #13936	; 0x3670
   18db0:	movt	r1, #2
   18db4:	mov	r0, #0
   18db8:	bl	11b58 <dcgettext@plt>
   18dbc:	ldr	r1, [sp, #48]	; 0x30
   18dc0:	bl	12c64 <__assert_fail@plt+0xd1c>
   18dc4:	movw	r0, #20280	; 0x4f38
   18dc8:	movt	r0, #2
   18dcc:	bl	11cb4 <getenv@plt>
   18dd0:	movw	r3, #17368	; 0x43d8
   18dd4:	movt	r3, #2
   18dd8:	cmp	r0, #0
   18ddc:	moveq	r0, r3
   18de0:	bl	12fc8 <__assert_fail@plt+0x1080>
   18de4:	b	18cbc <__assert_fail@plt+0x6d74>
   18de8:	ldr	r0, [sp, #20]
   18dec:	bl	1b778 <__assert_fail@plt+0x9830>
   18df0:	mov	r0, #4
   18df4:	bl	21070 <__assert_fail@plt+0xf128>
   18df8:	str	r0, [sp, #20]
   18dfc:	movw	r3, #13824	; 0x3600
   18e00:	movt	r3, #2
   18e04:	str	r3, [r0]
   18e08:	mov	r8, #1
   18e0c:	b	18cc4 <__assert_fail@plt+0x6d7c>
   18e10:	cmp	r8, #0
   18e14:	beq	19128 <__assert_fail@plt+0x71e0>
   18e18:	ldr	r5, [sp, #20]
   18e1c:	mov	r4, #0
   18e20:	movw	r7, #13824	; 0x3600
   18e24:	movt	r7, #2
   18e28:	mov	r9, #4
   18e2c:	b	190dc <__assert_fail@plt+0x7194>
   18e30:	mov	r2, #5
   18e34:	movw	r1, #20288	; 0x4f40
   18e38:	movt	r1, #2
   18e3c:	mov	r0, #0
   18e40:	bl	11b58 <dcgettext@plt>
   18e44:	mov	r4, r0
   18e48:	ldr	r3, [sp, #20]
   18e4c:	ldr	r1, [r3, #4]
   18e50:	mov	r0, #4
   18e54:	bl	1f580 <__assert_fail@plt+0xd638>
   18e58:	str	r9, [sp]
   18e5c:	mov	r3, r0
   18e60:	mov	r2, r4
   18e64:	mov	r1, #0
   18e68:	mov	r0, #2
   18e6c:	bl	11c90 <error@plt>
   18e70:	ldr	r3, [sp, #20]
   18e74:	ldr	sl, [r3]
   18e78:	movw	r1, #14404	; 0x3844
   18e7c:	movt	r1, #2
   18e80:	mov	r0, sl
   18e84:	bl	12e94 <__assert_fail@plt+0xf4c>
   18e88:	str	r0, [sp, #20]
   18e8c:	movw	r3, #25312	; 0x62e0
   18e90:	movt	r3, #3
   18e94:	ldr	r2, [r3, #1280]	; 0x500
   18e98:	str	r2, [sp, #24]
   18e9c:	ldrb	r8, [r3, #1297]	; 0x511
   18ea0:	eor	r8, r8, #1
   18ea4:	movw	r1, #25060	; 0x61e4
   18ea8:	movt	r1, #3
   18eac:	ldr	r2, [r3, #1488]	; 0x5d0
   18eb0:	ldr	r3, [r1, #104]	; 0x68
   18eb4:	cmp	r2, r3
   18eb8:	movcc	r2, r3
   18ebc:	mov	r1, #16
   18ec0:	add	r0, sp, #184	; 0xb8
   18ec4:	bl	13040 <__assert_fail@plt+0x10f8>
   18ec8:	mov	r3, #0
   18ecc:	str	r3, [sp, #120]	; 0x78
   18ed0:	mov	r0, #0
   18ed4:	mov	r1, #0
   18ed8:	mov	fp, r3
   18edc:	mov	r6, r0
   18ee0:	mov	r7, r1
   18ee4:	mov	r2, sl
   18ee8:	ldr	r1, [sp, #20]
   18eec:	add	r0, sp, #184	; 0xb8
   18ef0:	bl	146f4 <__assert_fail@plt+0x27ac>
   18ef4:	cmp	r0, #0
   18ef8:	beq	190c8 <__assert_fail@plt+0x7180>
   18efc:	ldr	r4, [sp, #184]	; 0xb8
   18f00:	ldr	r3, [sp, #196]	; 0xc4
   18f04:	add	r4, r4, r3
   18f08:	ldr	r5, [sp, #192]	; 0xc0
   18f0c:	sub	r5, r4, r5, lsl #4
   18f10:	cmp	fp, #0
   18f14:	bne	18f68 <__assert_fail@plt+0x7020>
   18f18:	sub	r4, r4, #16
   18f1c:	cmp	r5, r4
   18f20:	bcs	1902c <__assert_fail@plt+0x70e4>
   18f24:	sub	r1, r4, #16
   18f28:	mov	r0, r4
   18f2c:	bl	14324 <__assert_fail@plt+0x23dc>
   18f30:	cmp	r8, r0
   18f34:	bgt	18f18 <__assert_fail@plt+0x6fd0>
   18f38:	cmp	r9, #99	; 0x63
   18f3c:	movne	r4, #0
   18f40:	beq	18f80 <__assert_fail@plt+0x7038>
   18f44:	mov	r1, sl
   18f48:	ldr	r0, [sp, #20]
   18f4c:	bl	12ed4 <__assert_fail@plt+0xf8c>
   18f50:	ldr	r0, [sp, #184]	; 0xb8
   18f54:	bl	1b778 <__assert_fail@plt+0x9830>
   18f58:	ldr	r0, [sp, #120]	; 0x78
   18f5c:	bl	1b778 <__assert_fail@plt+0x9830>
   18f60:	eor	r0, r4, #1
   18f64:	bl	11d38 <exit@plt>
   18f68:	sub	r1, r4, #16
   18f6c:	add	r0, sp, #120	; 0x78
   18f70:	bl	14324 <__assert_fail@plt+0x23dc>
   18f74:	cmp	r8, r0
   18f78:	bgt	18f18 <__assert_fail@plt+0x6fd0>
   18f7c:	b	18f38 <__assert_fail@plt+0x6ff0>
   18f80:	sub	r4, r4, #16
   18f84:	ldr	r3, [sp, #184]	; 0xb8
   18f88:	ldr	r2, [sp, #196]	; 0xc4
   18f8c:	add	r3, r3, r2
   18f90:	sub	r3, r3, r4
   18f94:	asr	r3, r3, #4
   18f98:	adds	r6, r6, r3
   18f9c:	adc	r7, r7, r3, asr #31
   18fa0:	movw	r5, #25288	; 0x62c8
   18fa4:	movt	r5, #3
   18fa8:	ldr	r8, [r5]
   18fac:	mov	r2, #5
   18fb0:	movw	r1, #20328	; 0x4f68
   18fb4:	movt	r1, #2
   18fb8:	mov	r0, #0
   18fbc:	bl	11b58 <dcgettext@plt>
   18fc0:	mov	fp, r0
   18fc4:	movw	r3, #26828	; 0x68cc
   18fc8:	movt	r3, #3
   18fcc:	ldr	r9, [r3]
   18fd0:	add	r2, sp, #152	; 0x98
   18fd4:	mov	r0, r6
   18fd8:	mov	r1, r7
   18fdc:	bl	1cd20 <__assert_fail@plt+0xadd8>
   18fe0:	str	r0, [sp, #4]
   18fe4:	str	sl, [sp]
   18fe8:	mov	r3, r9
   18fec:	mov	r2, fp
   18ff0:	mov	r1, #1
   18ff4:	mov	r0, r8
   18ff8:	bl	11dd4 <__fprintf_chk@plt>
   18ffc:	ldr	r5, [r5]
   19000:	mov	r2, #5
   19004:	movw	r1, #20352	; 0x4f80
   19008:	movt	r1, #2
   1900c:	mov	r0, #0
   19010:	bl	11b58 <dcgettext@plt>
   19014:	mov	r2, r0
   19018:	mov	r1, r5
   1901c:	mov	r0, r4
   19020:	bl	13108 <__assert_fail@plt+0x11c0>
   19024:	mov	r4, #0
   19028:	b	18f44 <__assert_fail@plt+0x6ffc>
   1902c:	ldr	r3, [sp, #192]	; 0xc0
   19030:	adds	r6, r6, r3
   19034:	adc	r7, r7, #0
   19038:	ldr	r5, [r4, #4]
   1903c:	cmp	fp, r5
   19040:	bcc	19098 <__assert_fail@plt+0x7150>
   19044:	ldr	r2, [r4, #4]
   19048:	ldr	r1, [r4]
   1904c:	ldr	r0, [sp, #120]	; 0x78
   19050:	bl	11ac8 <memcpy@plt>
   19054:	ldr	r3, [r4, #4]
   19058:	str	r3, [sp, #124]	; 0x7c
   1905c:	ldr	r3, [sp, #24]
   19060:	cmp	r3, #0
   19064:	beq	18ee4 <__assert_fail@plt+0x6f9c>
   19068:	ldr	r2, [sp, #120]	; 0x78
   1906c:	ldr	r3, [r4, #8]
   19070:	ldr	r1, [r4]
   19074:	sub	r3, r3, r1
   19078:	add	r3, r2, r3
   1907c:	str	r3, [sp, #128]	; 0x80
   19080:	ldr	r3, [r4, #12]
   19084:	ldr	r1, [r4]
   19088:	sub	r3, r3, r1
   1908c:	add	r2, r2, r3
   19090:	str	r2, [sp, #132]	; 0x84
   19094:	b	18ee4 <__assert_fail@plt+0x6f9c>
   19098:	lsls	fp, fp, #1
   1909c:	beq	190ac <__assert_fail@plt+0x7164>
   190a0:	cmp	r5, fp
   190a4:	bhi	19098 <__assert_fail@plt+0x7150>
   190a8:	mov	r5, fp
   190ac:	ldr	r0, [sp, #120]	; 0x78
   190b0:	bl	1b778 <__assert_fail@plt+0x9830>
   190b4:	mov	r0, r5
   190b8:	bl	21070 <__assert_fail@plt+0xf128>
   190bc:	str	r0, [sp, #120]	; 0x78
   190c0:	mov	fp, r5
   190c4:	b	19044 <__assert_fail@plt+0x70fc>
   190c8:	mov	r4, #1
   190cc:	b	18f44 <__assert_fail@plt+0x6ffc>
   190d0:	add	r4, r4, #1
   190d4:	cmp	r8, r4
   190d8:	beq	19128 <__assert_fail@plt+0x71e0>
   190dc:	mov	sl, r5
   190e0:	ldr	r6, [r5], #4
   190e4:	mov	r1, r7
   190e8:	mov	r0, r6
   190ec:	bl	11a2c <strcmp@plt>
   190f0:	cmp	r0, #0
   190f4:	beq	190d0 <__assert_fail@plt+0x7188>
   190f8:	mov	r1, r9
   190fc:	mov	r0, r6
   19100:	bl	11ec4 <euidaccess@plt>
   19104:	cmp	r0, #0
   19108:	beq	190d0 <__assert_fail@plt+0x7188>
   1910c:	mov	r2, #5
   19110:	movw	r1, #20368	; 0x4f90
   19114:	movt	r1, #2
   19118:	mov	r0, #0
   1911c:	bl	11b58 <dcgettext@plt>
   19120:	ldr	r1, [sl]
   19124:	bl	12c64 <__assert_fail@plt+0xd1c>
   19128:	ldr	r3, [sp, #44]	; 0x2c
   1912c:	cmp	r3, #0
   19130:	beq	19158 <__assert_fail@plt+0x7210>
   19134:	movw	r2, #438	; 0x1b6
   19138:	mov	r1, #65	; 0x41
   1913c:	movt	r1, #8
   19140:	mov	r0, r3
   19144:	bl	11c9c <open64@plt>
   19148:	cmp	r0, #0
   1914c:	blt	191d8 <__assert_fail@plt+0x7290>
   19150:	mov	r1, #1
   19154:	bl	14a04 <__assert_fail@plt+0x2abc>
   19158:	ldr	r3, [sp, #36]	; 0x24
   1915c:	cmp	r3, #0
   19160:	bne	191f4 <__assert_fail@plt+0x72ac>
   19164:	ldr	r3, [sp, #52]	; 0x34
   19168:	cmp	r3, #0
   1916c:	beq	19234 <__assert_fail@plt+0x72ec>
   19170:	movw	r3, #7281	; 0x1c71
   19174:	movt	r3, #455	; 0x1c7
   19178:	ldr	r2, [sp, #52]	; 0x34
   1917c:	cmp	r2, r3
   19180:	movcc	r1, r2
   19184:	movcs	r1, r3
   19188:	str	r1, [sp, #48]	; 0x30
   1918c:	mov	r3, #0
   19190:	str	r3, [sp, #164]	; 0xa4
   19194:	lsl	r0, r1, #1
   19198:	str	r0, [sp, #28]
   1919c:	mov	r2, #144	; 0x90
   191a0:	mul	r2, r2, r1
   191a4:	str	r2, [sp, #56]	; 0x38
   191a8:	sub	r2, r0, #1
   191ac:	str	r2, [sp, #60]	; 0x3c
   191b0:	ldr	r2, [sp, #20]
   191b4:	str	r2, [sp, #76]	; 0x4c
   191b8:	mov	sl, r3
   191bc:	movw	r3, #14404	; 0x3844
   191c0:	movt	r3, #2
   191c4:	str	r3, [sp, #88]	; 0x58
   191c8:	vldr	d10, [pc, #864]	; 19530 <__assert_fail@plt+0x75e8>
   191cc:	vldr	d9, [pc, #868]	; 19538 <__assert_fail@plt+0x75f0>
   191d0:	str	r8, [sp, #72]	; 0x48
   191d4:	b	1975c <__assert_fail@plt+0x7814>
   191d8:	mov	r2, #5
   191dc:	movw	r1, #13908	; 0x3654
   191e0:	movt	r1, #2
   191e4:	mov	r0, #0
   191e8:	bl	11b58 <dcgettext@plt>
   191ec:	ldr	r1, [sp, #44]	; 0x2c
   191f0:	bl	12c64 <__assert_fail@plt+0xd1c>
   191f4:	mov	r1, #8
   191f8:	mov	r0, r8
   191fc:	bl	213ac <__assert_fail@plt+0xf464>
   19200:	mov	r3, #0
   19204:	ldr	r1, [sp, #20]
   19208:	b	19218 <__assert_fail@plt+0x72d0>
   1920c:	ldr	r2, [r1, r3, lsl #2]
   19210:	str	r2, [r0, r3, lsl #3]
   19214:	add	r3, r3, #1
   19218:	cmp	r8, r3
   1921c:	bne	1920c <__assert_fail@plt+0x72c4>
   19220:	ldr	r3, [sp, #44]	; 0x2c
   19224:	mov	r2, r8
   19228:	mov	r1, #0
   1922c:	bl	1633c <__assert_fail@plt+0x43f4>
   19230:	b	19894 <__assert_fail@plt+0x794c>
   19234:	mov	r0, #2
   19238:	bl	1d118 <__assert_fail@plt+0xb1d0>
   1923c:	cmp	r0, #8
   19240:	movcc	r3, r0
   19244:	movcs	r3, #8
   19248:	str	r3, [sp, #52]	; 0x34
   1924c:	b	19170 <__assert_fail@plt+0x7228>
   19250:	lsl	r3, r3, #1
   19254:	add	r2, r2, #1
   19258:	cmp	r1, r3
   1925c:	bhi	19250 <__assert_fail@plt+0x7308>
   19260:	lsl	r3, r2, #4
   19264:	str	r3, [sp, #64]	; 0x40
   19268:	b	197a0 <__assert_fail@plt+0x7858>
   1926c:	mov	r2, #1
   19270:	mov	r3, r2
   19274:	ldr	r1, [sp, #48]	; 0x30
   19278:	b	19258 <__assert_fail@plt+0x7310>
   1927c:	ldr	r3, [sp, #64]	; 0x40
   19280:	add	r9, r3, #1
   19284:	add	r7, r3, #2
   19288:	movw	r3, #25060	; 0x61e4
   1928c:	movt	r3, #3
   19290:	str	r3, [sp, #80]	; 0x50
   19294:	movw	r6, #25312	; 0x62e0
   19298:	movt	r6, #3
   1929c:	str	sl, [sp, #40]	; 0x28
   192a0:	ldr	sl, [sp, #72]	; 0x48
   192a4:	ldr	r0, [sp, #20]
   192a8:	bl	11dc8 <fileno@plt>
   192ac:	add	r2, sp, #184	; 0xb8
   192b0:	mov	r1, r0
   192b4:	mov	r0, #3
   192b8:	bl	11bf4 <__fxstat64@plt>
   192bc:	adds	r0, r0, #0
   192c0:	movne	r0, #1
   192c4:	b	192e0 <__assert_fail@plt+0x7398>
   192c8:	add	r2, sp, #184	; 0xb8
   192cc:	mov	r1, #0
   192d0:	mov	r0, #3
   192d4:	bl	11bf4 <__fxstat64@plt>
   192d8:	adds	r0, r0, #0
   192dc:	movne	r0, #1
   192e0:	cmp	r0, #0
   192e4:	bne	19398 <__assert_fail@plt+0x7450>
   192e8:	ldr	r3, [sp, #200]	; 0xc8
   192ec:	and	r3, r3, #61440	; 0xf000
   192f0:	cmp	r3, #32768	; 0x8000
   192f4:	beq	193b8 <__assert_fail@plt+0x7470>
   192f8:	ldr	r3, [r6, #1488]	; 0x5d0
   192fc:	cmp	r3, #0
   19300:	bne	193dc <__assert_fail@plt+0x7494>
   19304:	ldr	r3, [r6, #1500]	; 0x5dc
   19308:	cmp	r3, #0
   1930c:	beq	193e4 <__assert_fail@plt+0x749c>
   19310:	mov	r4, #131072	; 0x20000
   19314:	mov	r5, #0
   19318:	mul	r3, r4, r9
   1931c:	add	r3, r3, #1
   19320:	udiv	r0, r3, r9
   19324:	mov	r1, #0
   19328:	cmp	r1, r5
   1932c:	cmpeq	r0, r4
   19330:	bne	19500 <__assert_fail@plt+0x75b8>
   19334:	ldr	r2, [r6, #1500]	; 0x5dc
   19338:	sub	r2, r2, r7
   1933c:	cmp	r3, r2
   19340:	bcs	19500 <__assert_fail@plt+0x75b8>
   19344:	add	r7, r7, r3
   19348:	add	fp, fp, #1
   1934c:	cmp	sl, fp
   19350:	beq	19528 <__assert_fail@plt+0x75e0>
   19354:	cmp	fp, #0
   19358:	beq	192a4 <__assert_fail@plt+0x735c>
   1935c:	ldr	r3, [sp, #32]
   19360:	ldr	r4, [r3, fp, lsl #2]
   19364:	movw	r1, #13824	; 0x3600
   19368:	movt	r1, #2
   1936c:	mov	r0, r4
   19370:	bl	11a2c <strcmp@plt>
   19374:	cmp	r0, #0
   19378:	beq	192c8 <__assert_fail@plt+0x7380>
   1937c:	add	r2, sp, #184	; 0xb8
   19380:	mov	r1, r4
   19384:	mov	r0, #3
   19388:	bl	11f00 <__xstat64@plt>
   1938c:	adds	r0, r0, #0
   19390:	movne	r0, #1
   19394:	b	192e0 <__assert_fail@plt+0x7398>
   19398:	mov	r2, #5
   1939c:	movw	r1, #20380	; 0x4f9c
   193a0:	movt	r1, #2
   193a4:	mov	r0, #0
   193a8:	bl	11b58 <dcgettext@plt>
   193ac:	ldr	r3, [sp, #32]
   193b0:	ldr	r1, [r3, fp, lsl #2]
   193b4:	bl	12c64 <__assert_fail@plt+0xd1c>
   193b8:	ldrd	r4, [sp, #232]	; 0xe8
   193bc:	ldr	r3, [r6, #1500]	; 0x5dc
   193c0:	cmp	r3, #0
   193c4:	bne	19318 <__assert_fail@plt+0x73d0>
   193c8:	ldr	r3, [r6, #1488]	; 0x5d0
   193cc:	str	r3, [r6, #1500]	; 0x5dc
   193d0:	cmp	r3, #0
   193d4:	bne	19318 <__assert_fail@plt+0x73d0>
   193d8:	b	193ec <__assert_fail@plt+0x74a4>
   193dc:	ldr	sl, [sp, #40]	; 0x28
   193e0:	b	19510 <__assert_fail@plt+0x75c8>
   193e4:	mov	r4, #131072	; 0x20000
   193e8:	mov	r5, #0
   193ec:	add	r1, sp, #120	; 0x78
   193f0:	mov	r0, #2
   193f4:	bl	11b94 <getrlimit64@plt>
   193f8:	cmp	r0, #0
   193fc:	mvnne	r8, #0
   19400:	bne	19420 <__assert_fail@plt+0x74d8>
   19404:	ldrd	r2, [sp, #120]	; 0x78
   19408:	mvn	r0, #1
   1940c:	mov	r1, #0
   19410:	cmp	r3, r1
   19414:	cmpeq	r2, r0
   19418:	movls	r8, r2
   1941c:	mvnhi	r8, #0
   19420:	add	r1, sp, #120	; 0x78
   19424:	mov	r0, #9
   19428:	bl	11b94 <getrlimit64@plt>
   1942c:	cmp	r0, #0
   19430:	bne	19448 <__assert_fail@plt+0x7500>
   19434:	ldrd	r2, [sp, #120]	; 0x78
   19438:	mov	r1, #0
   1943c:	cmp	r3, r1
   19440:	cmpeq	r2, r8
   19444:	movcc	r8, r2
   19448:	lsr	r8, r8, #1
   1944c:	add	r1, sp, #120	; 0x78
   19450:	mov	r0, #5
   19454:	bl	11b94 <getrlimit64@plt>
   19458:	cmp	r0, #0
   1945c:	bne	19490 <__assert_fail@plt+0x7548>
   19460:	ldr	r3, [sp, #124]	; 0x7c
   19464:	ldr	ip, [sp, #120]	; 0x78
   19468:	lsr	ip, ip, #4
   1946c:	orr	ip, ip, r3, lsl #28
   19470:	lsr	r1, r3, #4
   19474:	mov	r0, #15
   19478:	umull	r2, r3, ip, r0
   1947c:	mla	r3, r0, r1, r3
   19480:	mov	r1, #0
   19484:	cmp	r3, r1
   19488:	cmpeq	r2, r8
   1948c:	rsbcc	r8, ip, ip, lsl #4
   19490:	bl	1d288 <__assert_fail@plt+0xb340>
   19494:	vmov.f64	d8, d0
   19498:	bl	1d200 <__assert_fail@plt+0xb2b8>
   1949c:	vmul.f64	d7, d0, d10
   194a0:	vcmpe.f64	d8, d7
   194a4:	vmrs	APSR_nzcv, fpscr
   194a8:	vmovle.f64	d8, d7
   194ac:	vmul.f64	d0, d0, d9
   194b0:	vmov	s15, r8
   194b4:	vcvt.f64.u32	d7, s15
   194b8:	vcmpe.f64	d0, d7
   194bc:	vmrs	APSR_nzcv, fpscr
   194c0:	vcvtmi.u32.f64	s15, d0
   194c4:	vmovmi	r8, s15
   194c8:	vmov	s15, r8
   194cc:	vcvt.f64.u32	d7, s15
   194d0:	vcmpe.f64	d7, d8
   194d4:	vmrs	APSR_nzcv, fpscr
   194d8:	vcvtgt.u32.f64	s15, d8
   194dc:	vmovgt	r8, s15
   194e0:	ldr	r3, [sp, #80]	; 0x50
   194e4:	ldr	r2, [r3, #112]	; 0x70
   194e8:	mov	r3, #18
   194ec:	mul	r3, r3, r2
   194f0:	cmp	r3, r8
   194f4:	movcc	r3, r8
   194f8:	str	r3, [r6, #1500]	; 0x5dc
   194fc:	b	19318 <__assert_fail@plt+0x73d0>
   19500:	ldr	sl, [sp, #40]	; 0x28
   19504:	movw	r3, #25312	; 0x62e0
   19508:	movt	r3, #3
   1950c:	ldr	r3, [r3, #1500]	; 0x5dc
   19510:	mov	r7, r3
   19514:	mov	r2, r7
   19518:	ldr	r1, [sp, #64]	; 0x40
   1951c:	add	r0, sp, #152	; 0x98
   19520:	bl	13040 <__assert_fail@plt+0x10f8>
   19524:	b	197ac <__assert_fail@plt+0x7864>
   19528:	ldr	sl, [sp, #40]	; 0x28
   1952c:	b	19514 <__assert_fail@plt+0x75cc>
   19530:	andeq	r0, r0, r0
   19534:	svccc	0x00c00000
   19538:	andeq	r0, r0, r0
   1953c:	svccc	0x00e80000
   19540:	strdeq	r6, [r3], -r4
   19544:	andeq	r3, r2, r0, lsr r3
   19548:	ldr	r1, [sp, #164]	; 0xa4
   1954c:	ldr	r0, [sp, #156]	; 0x9c
   19550:	ldr	lr, [sp, #64]	; 0x40
   19554:	add	r2, lr, #1
   19558:	sub	ip, r1, r0
   1955c:	ldr	r3, [sp, #160]	; 0xa0
   19560:	mls	r3, r3, lr, ip
   19564:	cmp	r2, r3
   19568:	bcc	1974c <__assert_fail@plt+0x7804>
   1956c:	mov	r3, #0
   19570:	ldr	r2, [sp, #32]
   19574:	str	r3, [r2, #1460]	; 0x5b4
   19578:	ldr	r6, [sp, #152]	; 0x98
   1957c:	add	r6, r6, r1
   19580:	add	sl, sl, #1
   19584:	mov	r1, #0
   19588:	add	r0, sp, #120	; 0x78
   1958c:	bl	15630 <__assert_fail@plt+0x36e8>
   19590:	add	r8, r0, #9
   19594:	ldr	r7, [sp, #36]	; 0x24
   19598:	ldr	r3, [sp, #160]	; 0xa0
   1959c:	cmp	r3, #1
   195a0:	bls	197ec <__assert_fail@plt+0x78a4>
   195a4:	ldr	r1, [sp, #28]
   195a8:	ldr	r0, [sp, #40]	; 0x28
   195ac:	bl	1ca04 <__assert_fail@plt+0xaabc>
   195b0:	str	r0, [sp, #184]	; 0xb8
   195b4:	mov	r1, #0
   195b8:	add	r0, sp, #188	; 0xbc
   195bc:	bl	11ae0 <pthread_mutex_init@plt>
   195c0:	mov	r1, #0
   195c4:	add	r0, sp, #216	; 0xd8
   195c8:	bl	11b64 <pthread_cond_init@plt>
   195cc:	ldr	r9, [sp, #160]	; 0xa0
   195d0:	ldr	r0, [sp, #56]	; 0x38
   195d4:	bl	21070 <__assert_fail@plt+0xf128>
   195d8:	mov	r4, r0
   195dc:	mov	r5, #0
   195e0:	str	r5, [r0, #12]
   195e4:	str	r5, [r0, #8]
   195e8:	str	r5, [r0, #4]
   195ec:	str	r5, [r0]
   195f0:	str	r5, [r0, #16]
   195f4:	str	r9, [r0, #24]
   195f8:	str	r9, [r0, #20]
   195fc:	str	r5, [r0, #28]
   19600:	str	r5, [r0, #40]	; 0x28
   19604:	strb	r5, [r0, #44]	; 0x2c
   19608:	mov	r1, r5
   1960c:	add	r0, r0, #48	; 0x30
   19610:	bl	11ae0 <pthread_mutex_init@plt>
   19614:	add	r0, r4, #72	; 0x48
   19618:	str	r5, [sp, #4]
   1961c:	str	r9, [sp]
   19620:	ldr	r9, [sp, #48]	; 0x30
   19624:	mov	r3, r9
   19628:	mov	r2, r6
   1962c:	mov	r5, r0
   19630:	mov	r1, r0
   19634:	mov	r0, r4
   19638:	bl	15898 <__assert_fail@plt+0x3950>
   1963c:	str	r8, [sp, #8]
   19640:	ldr	r3, [sp, #120]	; 0x78
   19644:	str	r3, [sp, #4]
   19648:	add	r3, sp, #184	; 0xb8
   1964c:	str	r3, [sp]
   19650:	mov	r3, r5
   19654:	ldr	r2, [sp, #160]	; 0xa0
   19658:	mov	r1, r9
   1965c:	mov	r0, r6
   19660:	bl	15a84 <__assert_fail@plt+0x3b3c>
   19664:	ldr	r3, [sp, #28]
   19668:	cmp	r3, #0
   1966c:	beq	19690 <__assert_fail@plt+0x7748>
   19670:	add	r6, r4, #48	; 0x30
   19674:	ldr	r5, [sp, #60]	; 0x3c
   19678:	mov	r0, r6
   1967c:	bl	11a5c <pthread_mutex_destroy@plt>
   19680:	sub	r5, r5, #1
   19684:	add	r6, r6, #72	; 0x48
   19688:	cmn	r5, #1
   1968c:	bne	19678 <__assert_fail@plt+0x7730>
   19690:	mov	r0, r4
   19694:	bl	1b778 <__assert_fail@plt+0x9830>
   19698:	ldr	r0, [sp, #184]	; 0xb8
   1969c:	bl	1ca74 <__assert_fail@plt+0xab2c>
   196a0:	add	r0, sp, #216	; 0xd8
   196a4:	bl	11bd0 <pthread_cond_destroy@plt>
   196a8:	add	r0, sp, #188	; 0xbc
   196ac:	bl	11a5c <pthread_mutex_destroy@plt>
   196b0:	mov	r1, r8
   196b4:	ldr	r0, [sp, #120]	; 0x78
   196b8:	bl	12ed4 <__assert_fail@plt+0xf8c>
   196bc:	cmp	r7, #0
   196c0:	bne	19800 <__assert_fail@plt+0x78b8>
   196c4:	ldr	r2, [sp, #24]
   196c8:	ldr	r1, [sp, #20]
   196cc:	add	r0, sp, #152	; 0x98
   196d0:	bl	146f4 <__assert_fail@plt+0x27ac>
   196d4:	cmp	r0, #0
   196d8:	beq	19750 <__assert_fail@plt+0x7808>
   196dc:	ldrb	r7, [sp, #176]	; 0xb0
   196e0:	cmp	fp, #0
   196e4:	moveq	r3, #0
   196e8:	andne	r3, r7, #1
   196ec:	cmp	r3, #0
   196f0:	bne	19548 <__assert_fail@plt+0x7600>
   196f4:	mov	r3, #0
   196f8:	ldr	r2, [sp, #32]
   196fc:	str	r3, [r2, #1460]	; 0x5b4
   19700:	ldr	r6, [sp, #152]	; 0x98
   19704:	ldr	r3, [sp, #164]	; 0xa4
   19708:	add	r6, r6, r3
   1970c:	cmp	r7, #0
   19710:	beq	19580 <__assert_fail@plt+0x7638>
   19714:	ldr	r4, [sp, #168]	; 0xa8
   19718:	orr	r4, fp, r4
   1971c:	orrs	r4, r4, sl
   19720:	bne	19580 <__assert_fail@plt+0x7638>
   19724:	ldr	r1, [sp, #24]
   19728:	ldr	r0, [sp, #20]
   1972c:	bl	12ed4 <__assert_fail@plt+0xf8c>
   19730:	ldr	r1, [sp, #80]	; 0x50
   19734:	ldr	r8, [sp, #44]	; 0x2c
   19738:	mov	r0, r8
   1973c:	bl	12e94 <__assert_fail@plt+0xf4c>
   19740:	str	r0, [sp, #120]	; 0x78
   19744:	mov	sl, r4
   19748:	b	19598 <__assert_fail@plt+0x7650>
   1974c:	str	r0, [sp, #168]	; 0xa8
   19750:	ldr	r1, [sp, #24]
   19754:	ldr	r0, [sp, #20]
   19758:	bl	12ed4 <__assert_fail@plt+0xf8c>
   1975c:	ldr	r3, [sp, #76]	; 0x4c
   19760:	str	r3, [sp, #32]
   19764:	ldr	r3, [sp, #72]	; 0x48
   19768:	cmp	r3, #0
   1976c:	beq	19818 <__assert_fail@plt+0x78d0>
   19770:	ldr	r3, [sp, #76]	; 0x4c
   19774:	ldr	r0, [r3], #4
   19778:	str	r0, [sp, #24]
   1977c:	str	r3, [sp, #76]	; 0x4c
   19780:	ldr	r1, [sp, #88]	; 0x58
   19784:	bl	12e94 <__assert_fail@plt+0xf4c>
   19788:	str	r0, [sp, #20]
   1978c:	ldr	r3, [sp, #52]	; 0x34
   19790:	cmp	r3, #1
   19794:	bhi	1926c <__assert_fail@plt+0x7324>
   19798:	mov	r3, #24
   1979c:	str	r3, [sp, #64]	; 0x40
   197a0:	ldr	fp, [sp, #164]	; 0xa4
   197a4:	cmp	fp, #0
   197a8:	beq	1927c <__assert_fail@plt+0x7334>
   197ac:	mov	r3, #0
   197b0:	strb	r3, [sp, #176]	; 0xb0
   197b4:	ldr	r3, [sp, #72]	; 0x48
   197b8:	sub	r3, r3, #1
   197bc:	str	r3, [sp, #72]	; 0x48
   197c0:	movw	fp, #25312	; 0x62e0
   197c4:	movt	fp, #3
   197c8:	movw	r2, #14272	; 0x37c0
   197cc:	movt	r2, #2
   197d0:	str	r2, [sp, #80]	; 0x50
   197d4:	movw	r2, #10188	; 0x27cc
   197d8:	movt	r2, #1
   197dc:	str	r2, [sp, #40]	; 0x28
   197e0:	str	fp, [sp, #32]
   197e4:	mov	fp, r3
   197e8:	b	196c4 <__assert_fail@plt+0x777c>
   197ec:	mov	r2, r8
   197f0:	ldr	r1, [sp, #120]	; 0x78
   197f4:	sub	r0, r6, #16
   197f8:	bl	14660 <__assert_fail@plt+0x2718>
   197fc:	b	196b0 <__assert_fail@plt+0x7768>
   19800:	ldr	r0, [sp, #152]	; 0x98
   19804:	bl	1b778 <__assert_fail@plt+0x9830>
   19808:	movw	r4, #25312	; 0x62e0
   1980c:	movt	r4, #3
   19810:	mvn	r5, #0
   19814:	b	19888 <__assert_fail@plt+0x7940>
   19818:	ldr	r0, [sp, #152]	; 0x98
   1981c:	bl	1b778 <__assert_fail@plt+0x9830>
   19820:	movw	r3, #25312	; 0x62e0
   19824:	movt	r3, #3
   19828:	ldr	r4, [r3, #1160]	; 0x488
   1982c:	mov	r1, #8
   19830:	mov	r0, sl
   19834:	bl	211f0 <__assert_fail@plt+0xf2a8>
   19838:	mov	r5, r0
   1983c:	mov	r3, r0
   19840:	b	19854 <__assert_fail@plt+0x790c>
   19844:	add	r2, r4, #9
   19848:	str	r2, [r3, #-8]
   1984c:	str	r4, [r3, #-4]
   19850:	ldr	r4, [r4]
   19854:	add	r3, r3, #8
   19858:	cmp	r4, #0
   1985c:	bne	19844 <__assert_fail@plt+0x78fc>
   19860:	ldr	r3, [sp, #44]	; 0x2c
   19864:	mov	r2, sl
   19868:	mov	r1, sl
   1986c:	mov	r0, r5
   19870:	bl	1633c <__assert_fail@plt+0x43f4>
   19874:	mov	r0, r5
   19878:	bl	1b778 <__assert_fail@plt+0x9830>
   1987c:	b	19808 <__assert_fail@plt+0x78c0>
   19880:	mov	r0, r5
   19884:	bl	14a6c <__assert_fail@plt+0x2b24>
   19888:	ldr	r3, [r4, #1484]	; 0x5cc
   1988c:	cmp	r3, #0
   19890:	bgt	19880 <__assert_fail@plt+0x7938>
   19894:	movw	r3, #25312	; 0x62e0
   19898:	movt	r3, #3
   1989c:	ldrb	r3, [r3, #1276]	; 0x4fc
   198a0:	cmp	r3, #0
   198a4:	beq	198c0 <__assert_fail@plt+0x7978>
   198a8:	movw	r3, #25296	; 0x62d0
   198ac:	movt	r3, #3
   198b0:	ldr	r0, [r3]
   198b4:	bl	1b14c <__assert_fail@plt+0x9204>
   198b8:	cmn	r0, #1
   198bc:	beq	198c8 <__assert_fail@plt+0x7980>
   198c0:	mov	r0, #0
   198c4:	bl	11d38 <exit@plt>
   198c8:	mov	r2, #5
   198cc:	movw	r1, #13936	; 0x3670
   198d0:	movt	r1, #2
   198d4:	mov	r0, #0
   198d8:	bl	11b58 <dcgettext@plt>
   198dc:	movw	r1, #13824	; 0x3600
   198e0:	movt	r1, #2
   198e4:	bl	12c64 <__assert_fail@plt+0xd1c>
   198e8:	movw	r3, #25312	; 0x62e0
   198ec:	movt	r3, #3
   198f0:	ldr	r3, [r3, #1280]	; 0x500
   198f4:	cmp	r3, #0
   198f8:	bne	18c24 <__assert_fail@plt+0x6cdc>
   198fc:	b	18c90 <__assert_fail@plt+0x6d48>
   19900:	movw	r3, #25312	; 0x62e0
   19904:	movt	r3, #3
   19908:	ldr	r3, [r3, #1280]	; 0x500
   1990c:	cmp	r3, #0
   19910:	bne	18c24 <__assert_fail@plt+0x6cdc>
   19914:	b	18a28 <__assert_fail@plt+0x6ae0>
   19918:	add	r0, sp, #468	; 0x1d4
   1991c:	bl	12668 <__assert_fail@plt+0x720>
   19920:	cmp	r0, #0
   19924:	beq	18554 <__assert_fail@plt+0x660c>
   19928:	movw	r3, #25312	; 0x62e0
   1992c:	movt	r3, #3
   19930:	ldrb	r3, [r3, #1296]	; 0x510
   19934:	cmp	r3, #0
   19938:	bne	185d4 <__assert_fail@plt+0x668c>
   1993c:	movw	r3, #25312	; 0x62e0
   19940:	movt	r3, #3
   19944:	ldrb	r2, [sp, #499]	; 0x1f3
   19948:	strb	r2, [r3, #1456]	; 0x5b0
   1994c:	b	18ca8 <__assert_fail@plt+0x6d60>
   19950:	ldr	r3, [sp, #64]	; 0x40
   19954:	ldr	r3, [r3]
   19958:	cmp	r3, #0
   1995c:	bne	17648 <__assert_fail@plt+0x5700>
   19960:	ldr	r3, [sp, #64]	; 0x40
   19964:	ldr	r3, [r3, #4]
   19968:	cmp	r3, #0
   1996c:	beq	19d3c <__assert_fail@plt+0x7df4>
   19970:	b	17648 <__assert_fail@plt+0x5700>
   19974:	mov	r0, #1
   19978:	ldr	r3, [sp, #76]	; 0x4c
   1997c:	str	r3, [sp]
   19980:	ldr	r3, [pc, #-1092]	; 19544 <__assert_fail@plt+0x75fc>
   19984:	mov	r2, #83	; 0x53
   19988:	ldr	r1, [sp, #72]	; 0x48
   1998c:	bl	217b0 <__assert_fail@plt+0xf868>
   19990:	cmp	r0, #2
   19994:	bne	19978 <__assert_fail@plt+0x7a30>
   19998:	ldr	r3, [sp, #152]	; 0x98
   1999c:	ldrb	r2, [r3, #-1]
   199a0:	sub	r2, r2, #48	; 0x30
   199a4:	cmp	r2, #9
   199a8:	bhi	19978 <__assert_fail@plt+0x7a30>
   199ac:	ldrb	r2, [r3, #1]
   199b0:	cmp	r2, #0
   199b4:	bne	19978 <__assert_fail@plt+0x7a30>
   199b8:	ldrb	r3, [r3]
   199bc:	cmp	r3, #37	; 0x25
   199c0:	beq	17f0c <__assert_fail@plt+0x5fc4>
   199c4:	cmp	r3, #98	; 0x62
   199c8:	beq	17e88 <__assert_fail@plt+0x5f40>
   199cc:	b	19978 <__assert_fail@plt+0x7a30>
   199d0:	orrs	r3, r2, r8
   199d4:	beq	19c64 <__assert_fail@plt+0x7d1c>
   199d8:	cmp	r8, #0
   199dc:	beq	19c64 <__assert_fail@plt+0x7d1c>
   199e0:	ldr	r3, [sp, #200]	; 0xc8
   199e4:	cmp	r3, #0
   199e8:	beq	199fc <__assert_fail@plt+0x7ab4>
   199ec:	ldr	r2, [r4, #16]
   199f0:	cmp	r3, r2
   199f4:	moveq	r3, #0
   199f8:	streq	r3, [sp, #200]	; 0xc8
   199fc:	ldr	r3, [sp, #204]	; 0xcc
   19a00:	cmp	r3, #0
   19a04:	beq	19a18 <__assert_fail@plt+0x7ad0>
   19a08:	ldr	r2, [r4, #20]
   19a0c:	cmp	r3, r2
   19a10:	moveq	r3, #0
   19a14:	streq	r3, [sp, #204]	; 0xcc
   19a18:	ldrb	r3, [r4, #24]
   19a1c:	eor	r3, r3, #1
   19a20:	ldrb	r2, [sp, #208]	; 0xd0
   19a24:	and	r3, r3, r2
   19a28:	strb	r3, [sp, #208]	; 0xd0
   19a2c:	ldrb	r3, [r4, #25]
   19a30:	eor	r3, r3, #1
   19a34:	ldrb	r2, [sp, #209]	; 0xd1
   19a38:	and	r3, r3, r2
   19a3c:	strb	r3, [sp, #209]	; 0xd1
   19a40:	ldrb	r3, [r4, #30]
   19a44:	eor	r3, r3, #1
   19a48:	ldrb	r2, [sp, #214]	; 0xd6
   19a4c:	and	r3, r3, r2
   19a50:	strb	r3, [sp, #214]	; 0xd6
   19a54:	ldrb	r3, [r4, #26]
   19a58:	eor	r3, r3, #1
   19a5c:	ldrb	r2, [sp, #210]	; 0xd2
   19a60:	and	r3, r3, r2
   19a64:	strb	r3, [sp, #210]	; 0xd2
   19a68:	ldrb	r3, [r4, #28]
   19a6c:	eor	r3, r3, #1
   19a70:	ldrb	r2, [sp, #212]	; 0xd4
   19a74:	and	r3, r3, r2
   19a78:	strb	r3, [sp, #212]	; 0xd4
   19a7c:	ldrb	r3, [r4, #29]
   19a80:	eor	r3, r3, #1
   19a84:	ldrb	r2, [sp, #213]	; 0xd5
   19a88:	and	r3, r3, r2
   19a8c:	strb	r3, [sp, #213]	; 0xd5
   19a90:	ldrb	r3, [r4, #27]
   19a94:	eor	r3, r3, #1
   19a98:	ldrb	r2, [sp, #211]	; 0xd3
   19a9c:	and	r3, r3, r2
   19aa0:	strb	r3, [sp, #211]	; 0xd3
   19aa4:	ldrb	r3, [r4, #32]
   19aa8:	eor	r3, r3, #1
   19aac:	ldrb	r2, [sp, #216]	; 0xd8
   19ab0:	and	r3, r3, r2
   19ab4:	strb	r3, [sp, #216]	; 0xd8
   19ab8:	ldrb	r3, [r4, #31]
   19abc:	eor	r3, r3, #1
   19ac0:	ldrb	r2, [sp, #215]	; 0xd7
   19ac4:	and	r3, r3, r2
   19ac8:	strb	r3, [sp, #215]	; 0xd7
   19acc:	ldr	r4, [r4, #36]	; 0x24
   19ad0:	add	r6, r6, #1
   19ad4:	cmp	r4, #0
   19ad8:	beq	18828 <__assert_fail@plt+0x68e0>
   19adc:	ldrb	r3, [r4, #26]
   19ae0:	cmp	r3, #0
   19ae4:	bne	18730 <__assert_fail@plt+0x67e8>
   19ae8:	ldrh	r3, [r4, #28]
   19aec:	cmp	r3, #0
   19af0:	bne	18730 <__assert_fail@plt+0x67e8>
   19af4:	ldrb	r3, [r4, #33]	; 0x21
   19af8:	cmp	r3, #0
   19afc:	beq	19bc4 <__assert_fail@plt+0x7c7c>
   19b00:	ldr	r5, [r4]
   19b04:	ldr	r9, [r4, #8]
   19b08:	cmn	r5, #1
   19b0c:	moveq	r5, #0
   19b10:	mov	r3, #43	; 0x2b
   19b14:	strh	r3, [sp, #120]	; 0x78
   19b18:	mov	r7, #0
   19b1c:	add	r2, sp, #96	; 0x60
   19b20:	mov	r0, r5
   19b24:	mov	r1, r7
   19b28:	bl	1cd20 <__assert_fail@plt+0xadd8>
   19b2c:	mov	r2, #25
   19b30:	mov	r1, r0
   19b34:	ldr	r0, [sp, #40]	; 0x28
   19b38:	bl	11c30 <__stpcpy_chk@plt>
   19b3c:	str	r0, [sp, #28]
   19b40:	ldr	r3, [sp, #56]	; 0x38
   19b44:	str	r3, [sp, #152]	; 0x98
   19b48:	add	r2, sp, #96	; 0x60
   19b4c:	add	r0, r5, #1
   19b50:	mov	r1, r7
   19b54:	bl	1cd20 <__assert_fail@plt+0xadd8>
   19b58:	mov	r2, #24
   19b5c:	mov	r1, r0
   19b60:	add	r0, sp, #155	; 0x9b
   19b64:	bl	11c30 <__stpcpy_chk@plt>
   19b68:	mov	r5, r0
   19b6c:	ldr	r3, [r4, #8]
   19b70:	cmn	r3, #1
   19b74:	bne	18748 <__assert_fail@plt+0x6800>
   19b78:	mov	r2, #5
   19b7c:	movw	r1, #19636	; 0x4cb4
   19b80:	movt	r1, #2
   19b84:	mov	r0, #0
   19b88:	bl	11b58 <dcgettext@plt>
   19b8c:	mov	r5, r0
   19b90:	add	r1, sp, #120	; 0x78
   19b94:	mov	r0, #0
   19b98:	bl	1f854 <__assert_fail@plt+0xd90c>
   19b9c:	mov	r7, r0
   19ba0:	add	r1, sp, #152	; 0x98
   19ba4:	mov	r0, #1
   19ba8:	bl	1f854 <__assert_fail@plt+0xd90c>
   19bac:	str	r0, [sp]
   19bb0:	mov	r3, r7
   19bb4:	mov	r2, r5
   19bb8:	mov	r1, #0
   19bbc:	mov	r0, r1
   19bc0:	bl	11c90 <error@plt>
   19bc4:	ldr	r3, [r4]
   19bc8:	cmn	r3, #1
   19bcc:	ldreq	r2, [sp, #24]
   19bd0:	beq	19c10 <__assert_fail@plt+0x7cc8>
   19bd4:	ldr	r2, [r4, #8]
   19bd8:	cmp	r3, r2
   19bdc:	ldrls	r2, [sp, #24]
   19be0:	bls	19c10 <__assert_fail@plt+0x7cc8>
   19be4:	mov	r2, #5
   19be8:	movw	r1, #20392	; 0x4fa8
   19bec:	movt	r1, #2
   19bf0:	mov	r0, #0
   19bf4:	bl	11b58 <dcgettext@plt>
   19bf8:	mov	r3, r6
   19bfc:	mov	r2, r0
   19c00:	mov	r1, #0
   19c04:	mov	r0, r1
   19c08:	bl	11c90 <error@plt>
   19c0c:	mov	r2, #1
   19c10:	ldrb	r3, [r4, #26]
   19c14:	cmp	r3, #0
   19c18:	movne	r1, #1
   19c1c:	bne	19c30 <__assert_fail@plt+0x7ce8>
   19c20:	ldrh	r3, [r4, #28]
   19c24:	cmp	r3, #0
   19c28:	ldrbeq	r1, [r4, #30]
   19c2c:	movne	r1, #1
   19c30:	ldr	r3, [r4, #8]
   19c34:	cmp	r3, #0
   19c38:	bne	19c48 <__assert_fail@plt+0x7d00>
   19c3c:	ldr	r3, [r4, #12]
   19c40:	cmp	r3, #0
   19c44:	bne	199d0 <__assert_fail@plt+0x7a88>
   19c48:	orrs	r3, r2, r8
   19c4c:	bne	199d8 <__assert_fail@plt+0x7a90>
   19c50:	movw	r3, #25060	; 0x61e4
   19c54:	movt	r3, #3
   19c58:	ldr	r3, [r3]
   19c5c:	cmp	r3, #256	; 0x100
   19c60:	beq	187c4 <__assert_fail@plt+0x687c>
   19c64:	ldrb	r3, [r4, #26]
   19c68:	cmp	r3, #0
   19c6c:	bne	19c7c <__assert_fail@plt+0x7d34>
   19c70:	ldrh	r3, [r4, #28]
   19c74:	cmp	r3, #0
   19c78:	beq	199e0 <__assert_fail@plt+0x7a98>
   19c7c:	ldr	r3, [r4]
   19c80:	ldr	r2, [r4, #8]
   19c84:	adds	r3, r3, #1
   19c88:	moveq	r3, #1
   19c8c:	adds	r2, r2, #1
   19c90:	moveq	r5, #1
   19c94:	movne	r5, #0
   19c98:	cmp	r2, r3
   19c9c:	orrhi	r5, r5, #1
   19ca0:	cmp	r5, #0
   19ca4:	beq	199e0 <__assert_fail@plt+0x7a98>
   19ca8:	mov	r2, #5
   19cac:	movw	r1, #19756	; 0x4d2c
   19cb0:	movt	r1, #2
   19cb4:	mov	r0, #0
   19cb8:	bl	11b58 <dcgettext@plt>
   19cbc:	mov	r3, r6
   19cc0:	mov	r2, r0
   19cc4:	mov	r1, #0
   19cc8:	mov	r0, r1
   19ccc:	bl	11c90 <error@plt>
   19cd0:	ldrb	r3, [r4, #28]
   19cd4:	ldr	r2, [sp, #32]
   19cd8:	cmp	r3, #0
   19cdc:	moveq	r2, r5
   19ce0:	str	r2, [sp, #32]
   19ce4:	ldr	r2, [sp, #60]	; 0x3c
   19ce8:	cmp	r3, #0
   19cec:	movne	r2, r3
   19cf0:	str	r2, [sp, #60]	; 0x3c
   19cf4:	b	199e0 <__assert_fail@plt+0x7a98>
   19cf8:	ldr	r3, [sp, #40]	; 0x28
   19cfc:	cmp	r3, #0
   19d00:	bne	182a8 <__assert_fail@plt+0x6360>
   19d04:	mov	r8, r4
   19d08:	mov	r9, #0
   19d0c:	movw	r3, #25312	; 0x62e0
   19d10:	movt	r3, #3
   19d14:	ldr	r4, [r3, #1280]	; 0x500
   19d18:	cmp	r4, #0
   19d1c:	beq	19918 <__assert_fail@plt+0x79d0>
   19d20:	mov	r5, r4
   19d24:	mov	sl, #0
   19d28:	b	18424 <__assert_fail@plt+0x64dc>
   19d2c:	ldr	r3, [sp, #64]	; 0x40
   19d30:	ldr	r3, [r3, #4]
   19d34:	cmp	r3, #0
   19d38:	bne	176f4 <__assert_fail@plt+0x57ac>
   19d3c:	mvn	r3, #0
   19d40:	ldr	r2, [sp, #64]	; 0x40
   19d44:	str	r3, [r2]
   19d48:	cmp	r0, #0
   19d4c:	beq	17648 <__assert_fail@plt+0x5700>
   19d50:	b	176f4 <__assert_fail@plt+0x57ac>
   19d54:	str	r4, [sp, #-8]!
   19d58:	str	lr, [sp, #4]
   19d5c:	mov	r0, #1
   19d60:	bl	16778 <__assert_fail@plt+0x4830>
   19d64:	ldr	r4, [sp]
   19d68:	add	sp, sp, #4
   19d6c:	pop	{pc}		; (ldr pc, [sp], #4)
   19d70:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19d74:	strd	r6, [sp, #8]
   19d78:	strd	r8, [sp, #16]
   19d7c:	strd	sl, [sp, #24]
   19d80:	str	lr, [sp, #32]
   19d84:	sub	sp, sp, #12
   19d88:	str	r0, [sp]
   19d8c:	mov	r5, r1
   19d90:	mov	r6, r2
   19d94:	str	r2, [sp, #4]
   19d98:	mov	r9, r3
   19d9c:	bl	11d50 <strlen@plt>
   19da0:	ldr	r4, [r5]
   19da4:	cmp	r4, #0
   19da8:	beq	19e64 <__assert_fail@plt+0x7f1c>
   19dac:	mov	r8, r0
   19db0:	mov	fp, #0
   19db4:	mvn	sl, #0
   19db8:	mov	r7, fp
   19dbc:	b	19ddc <__assert_fail@plt+0x7e94>
   19dc0:	mov	sl, r7
   19dc4:	b	19e44 <__assert_fail@plt+0x7efc>
   19dc8:	add	r7, r7, #1
   19dcc:	ldr	r4, [r5, #4]!
   19dd0:	add	r6, r6, r9
   19dd4:	cmp	r4, #0
   19dd8:	beq	19e3c <__assert_fail@plt+0x7ef4>
   19ddc:	mov	r2, r8
   19de0:	ldr	r1, [sp]
   19de4:	mov	r0, r4
   19de8:	bl	11f0c <strncmp@plt>
   19dec:	cmp	r0, #0
   19df0:	bne	19dc8 <__assert_fail@plt+0x7e80>
   19df4:	mov	r0, r4
   19df8:	bl	11d50 <strlen@plt>
   19dfc:	cmp	r0, r8
   19e00:	beq	19dc0 <__assert_fail@plt+0x7e78>
   19e04:	cmn	sl, #1
   19e08:	moveq	sl, r7
   19e0c:	beq	19dc8 <__assert_fail@plt+0x7e80>
   19e10:	ldr	r3, [sp, #4]
   19e14:	cmp	r3, #0
   19e18:	moveq	fp, #1
   19e1c:	beq	19dc8 <__assert_fail@plt+0x7e80>
   19e20:	mov	r2, r9
   19e24:	mov	r1, r6
   19e28:	mla	r0, r9, sl, r3
   19e2c:	bl	11b40 <memcmp@plt>
   19e30:	cmp	r0, #0
   19e34:	movne	fp, #1
   19e38:	b	19dc8 <__assert_fail@plt+0x7e80>
   19e3c:	cmp	fp, #0
   19e40:	mvnne	sl, #1
   19e44:	mov	r0, sl
   19e48:	add	sp, sp, #12
   19e4c:	ldrd	r4, [sp]
   19e50:	ldrd	r6, [sp, #8]
   19e54:	ldrd	r8, [sp, #16]
   19e58:	ldrd	sl, [sp, #24]
   19e5c:	add	sp, sp, #32
   19e60:	pop	{pc}		; (ldr pc, [sp], #4)
   19e64:	mvn	sl, #0
   19e68:	b	19e44 <__assert_fail@plt+0x7efc>
   19e6c:	strd	r4, [sp, #-16]!
   19e70:	str	r6, [sp, #8]
   19e74:	str	lr, [sp, #12]
   19e78:	mov	r6, r0
   19e7c:	ldr	r0, [r1]
   19e80:	cmp	r0, #0
   19e84:	beq	19ecc <__assert_fail@plt+0x7f84>
   19e88:	mov	r4, r1
   19e8c:	mov	r5, #0
   19e90:	mov	r1, r6
   19e94:	bl	11a2c <strcmp@plt>
   19e98:	cmp	r0, #0
   19e9c:	beq	19eb8 <__assert_fail@plt+0x7f70>
   19ea0:	add	r5, r5, #1
   19ea4:	ldr	r0, [r4, #4]!
   19ea8:	cmp	r0, #0
   19eac:	bne	19e90 <__assert_fail@plt+0x7f48>
   19eb0:	mvn	r0, #0
   19eb4:	b	19ebc <__assert_fail@plt+0x7f74>
   19eb8:	mov	r0, r5
   19ebc:	ldrd	r4, [sp]
   19ec0:	ldr	r6, [sp, #8]
   19ec4:	add	sp, sp, #12
   19ec8:	pop	{pc}		; (ldr pc, [sp], #4)
   19ecc:	mvn	r0, #0
   19ed0:	b	19ebc <__assert_fail@plt+0x7f74>
   19ed4:	strd	r4, [sp, #-16]!
   19ed8:	str	r6, [sp, #8]
   19edc:	str	lr, [sp, #12]
   19ee0:	sub	sp, sp, #8
   19ee4:	mov	r6, r0
   19ee8:	mov	r5, r1
   19eec:	cmn	r2, #1
   19ef0:	mov	r2, #5
   19ef4:	movweq	r1, #21048	; 0x5238
   19ef8:	movteq	r1, #2
   19efc:	movwne	r1, #21076	; 0x5254
   19f00:	movtne	r1, #2
   19f04:	mov	r0, #0
   19f08:	bl	11b58 <dcgettext@plt>
   19f0c:	mov	r4, r0
   19f10:	mov	r2, r5
   19f14:	mov	r1, #8
   19f18:	mov	r0, #0
   19f1c:	bl	1f4f4 <__assert_fail@plt+0xd5ac>
   19f20:	mov	r5, r0
   19f24:	mov	r1, r6
   19f28:	mov	r0, #1
   19f2c:	bl	1f854 <__assert_fail@plt+0xd90c>
   19f30:	str	r0, [sp]
   19f34:	mov	r3, r5
   19f38:	mov	r2, r4
   19f3c:	mov	r1, #0
   19f40:	mov	r0, r1
   19f44:	bl	11c90 <error@plt>
   19f48:	add	sp, sp, #8
   19f4c:	ldrd	r4, [sp]
   19f50:	ldr	r6, [sp, #8]
   19f54:	add	sp, sp, #12
   19f58:	pop	{pc}		; (ldr pc, [sp], #4)
   19f5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19f60:	strd	r6, [sp, #8]
   19f64:	strd	r8, [sp, #16]
   19f68:	strd	sl, [sp, #24]
   19f6c:	str	lr, [sp, #32]
   19f70:	sub	sp, sp, #12
   19f74:	mov	r7, r0
   19f78:	mov	r4, r1
   19f7c:	mov	r8, r2
   19f80:	mov	r2, #5
   19f84:	movw	r1, #21108	; 0x5274
   19f88:	movt	r1, #2
   19f8c:	mov	r0, #0
   19f90:	bl	11b58 <dcgettext@plt>
   19f94:	movw	r3, #25288	; 0x62c8
   19f98:	movt	r3, #3
   19f9c:	ldr	r1, [r3]
   19fa0:	bl	11a14 <fputs_unlocked@plt>
   19fa4:	ldr	r5, [r7]
   19fa8:	cmp	r5, #0
   19fac:	beq	1a058 <__assert_fail@plt+0x8110>
   19fb0:	mov	r3, #0
   19fb4:	str	r3, [sp]
   19fb8:	mov	r6, r3
   19fbc:	movw	sl, #25288	; 0x62c8
   19fc0:	movt	sl, #3
   19fc4:	movw	fp, #21132	; 0x528c
   19fc8:	movt	fp, #2
   19fcc:	movw	r3, #21140	; 0x5294
   19fd0:	movt	r3, #2
   19fd4:	str	r3, [sp, #4]
   19fd8:	b	1a014 <__assert_fail@plt+0x80cc>
   19fdc:	ldr	r9, [sl]
   19fe0:	mov	r0, r5
   19fe4:	bl	1f870 <__assert_fail@plt+0xd928>
   19fe8:	mov	r3, r0
   19fec:	mov	r2, fp
   19ff0:	mov	r1, #1
   19ff4:	mov	r0, r9
   19ff8:	bl	11dd4 <__fprintf_chk@plt>
   19ffc:	str	r4, [sp]
   1a000:	add	r6, r6, #1
   1a004:	ldr	r5, [r7, #4]!
   1a008:	add	r4, r4, r8
   1a00c:	cmp	r5, #0
   1a010:	beq	1a058 <__assert_fail@plt+0x8110>
   1a014:	cmp	r6, #0
   1a018:	beq	19fdc <__assert_fail@plt+0x8094>
   1a01c:	mov	r2, r8
   1a020:	mov	r1, r4
   1a024:	ldr	r0, [sp]
   1a028:	bl	11b40 <memcmp@plt>
   1a02c:	cmp	r0, #0
   1a030:	bne	19fdc <__assert_fail@plt+0x8094>
   1a034:	ldr	r9, [sl]
   1a038:	mov	r0, r5
   1a03c:	bl	1f870 <__assert_fail@plt+0xd928>
   1a040:	mov	r3, r0
   1a044:	ldr	r2, [sp, #4]
   1a048:	mov	r1, #1
   1a04c:	mov	r0, r9
   1a050:	bl	11dd4 <__fprintf_chk@plt>
   1a054:	b	1a000 <__assert_fail@plt+0x80b8>
   1a058:	movw	r3, #25288	; 0x62c8
   1a05c:	movt	r3, #3
   1a060:	ldr	r0, [r3]
   1a064:	ldr	r3, [r0, #20]
   1a068:	ldr	r2, [r0, #24]
   1a06c:	cmp	r3, r2
   1a070:	addcc	r2, r3, #1
   1a074:	strcc	r2, [r0, #20]
   1a078:	movcc	r2, #10
   1a07c:	strbcc	r2, [r3]
   1a080:	bcs	1a0a0 <__assert_fail@plt+0x8158>
   1a084:	add	sp, sp, #12
   1a088:	ldrd	r4, [sp]
   1a08c:	ldrd	r6, [sp, #8]
   1a090:	ldrd	r8, [sp, #16]
   1a094:	ldrd	sl, [sp, #24]
   1a098:	add	sp, sp, #32
   1a09c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0a0:	mov	r1, #10
   1a0a4:	bl	11e1c <__overflow@plt>
   1a0a8:	b	1a084 <__assert_fail@plt+0x813c>
   1a0ac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a0b0:	strd	r6, [sp, #8]
   1a0b4:	str	r8, [sp, #16]
   1a0b8:	str	lr, [sp, #20]
   1a0bc:	mov	r7, r0
   1a0c0:	mov	r5, r1
   1a0c4:	mov	r4, r2
   1a0c8:	mov	r6, r3
   1a0cc:	ldrb	r3, [sp, #32]
   1a0d0:	cmp	r3, #0
   1a0d4:	beq	1a108 <__assert_fail@plt+0x81c0>
   1a0d8:	ldr	r3, [sp, #24]
   1a0dc:	mov	r2, r6
   1a0e0:	mov	r1, r4
   1a0e4:	mov	r0, r5
   1a0e8:	bl	19d70 <__assert_fail@plt+0x7e28>
   1a0ec:	cmp	r0, #0
   1a0f0:	blt	1a118 <__assert_fail@plt+0x81d0>
   1a0f4:	ldrd	r4, [sp]
   1a0f8:	ldrd	r6, [sp, #8]
   1a0fc:	ldr	r8, [sp, #16]
   1a100:	add	sp, sp, #20
   1a104:	pop	{pc}		; (ldr pc, [sp], #4)
   1a108:	mov	r1, r2
   1a10c:	mov	r0, r5
   1a110:	bl	19e6c <__assert_fail@plt+0x7f24>
   1a114:	b	1a0ec <__assert_fail@plt+0x81a4>
   1a118:	mov	r2, r0
   1a11c:	mov	r1, r5
   1a120:	mov	r0, r7
   1a124:	bl	19ed4 <__assert_fail@plt+0x7f8c>
   1a128:	ldr	r2, [sp, #24]
   1a12c:	mov	r1, r6
   1a130:	mov	r0, r4
   1a134:	bl	19f5c <__assert_fail@plt+0x8014>
   1a138:	ldr	r3, [sp, #28]
   1a13c:	blx	r3
   1a140:	mvn	r0, #0
   1a144:	b	1a0f4 <__assert_fail@plt+0x81ac>
   1a148:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a14c:	strd	r6, [sp, #8]
   1a150:	str	r8, [sp, #16]
   1a154:	str	lr, [sp, #20]
   1a158:	ldr	r7, [r1]
   1a15c:	cmp	r7, #0
   1a160:	beq	1a19c <__assert_fail@plt+0x8254>
   1a164:	mov	r6, r3
   1a168:	mov	r8, r0
   1a16c:	mov	r4, r2
   1a170:	mov	r5, r1
   1a174:	mov	r2, r6
   1a178:	mov	r1, r4
   1a17c:	mov	r0, r8
   1a180:	bl	11b40 <memcmp@plt>
   1a184:	cmp	r0, #0
   1a188:	beq	1a19c <__assert_fail@plt+0x8254>
   1a18c:	ldr	r7, [r5, #4]!
   1a190:	add	r4, r4, r6
   1a194:	cmp	r7, #0
   1a198:	bne	1a174 <__assert_fail@plt+0x822c>
   1a19c:	mov	r0, r7
   1a1a0:	ldrd	r4, [sp]
   1a1a4:	ldrd	r6, [sp, #8]
   1a1a8:	ldr	r8, [sp, #16]
   1a1ac:	add	sp, sp, #20
   1a1b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a1b4:	movw	r3, #26816	; 0x68c0
   1a1b8:	movt	r3, #3
   1a1bc:	str	r0, [r3]
   1a1c0:	bx	lr
   1a1c4:	movw	r3, #26816	; 0x68c0
   1a1c8:	movt	r3, #3
   1a1cc:	strb	r0, [r3, #4]
   1a1d0:	bx	lr
   1a1d4:	strd	r4, [sp, #-16]!
   1a1d8:	str	r6, [sp, #8]
   1a1dc:	str	lr, [sp, #12]
   1a1e0:	sub	sp, sp, #8
   1a1e4:	movw	r3, #25300	; 0x62d4
   1a1e8:	movt	r3, #3
   1a1ec:	ldr	r0, [r3]
   1a1f0:	bl	21ff0 <__assert_fail@plt+0x100a8>
   1a1f4:	cmp	r0, #0
   1a1f8:	beq	1a220 <__assert_fail@plt+0x82d8>
   1a1fc:	movw	r3, #26816	; 0x68c0
   1a200:	movt	r3, #3
   1a204:	ldrb	r3, [r3, #4]
   1a208:	cmp	r3, #0
   1a20c:	beq	1a24c <__assert_fail@plt+0x8304>
   1a210:	bl	11d74 <__errno_location@plt>
   1a214:	ldr	r3, [r0]
   1a218:	cmp	r3, #32
   1a21c:	bne	1a24c <__assert_fail@plt+0x8304>
   1a220:	movw	r3, #25288	; 0x62c8
   1a224:	movt	r3, #3
   1a228:	ldr	r0, [r3]
   1a22c:	bl	21ff0 <__assert_fail@plt+0x100a8>
   1a230:	cmp	r0, #0
   1a234:	bne	1a2d4 <__assert_fail@plt+0x838c>
   1a238:	add	sp, sp, #8
   1a23c:	ldrd	r4, [sp]
   1a240:	ldr	r6, [sp, #8]
   1a244:	add	sp, sp, #12
   1a248:	pop	{pc}		; (ldr pc, [sp], #4)
   1a24c:	mov	r2, #5
   1a250:	movw	r1, #21148	; 0x529c
   1a254:	movt	r1, #2
   1a258:	mov	r0, #0
   1a25c:	bl	11b58 <dcgettext@plt>
   1a260:	mov	r4, r0
   1a264:	movw	r3, #26816	; 0x68c0
   1a268:	movt	r3, #3
   1a26c:	ldr	r5, [r3]
   1a270:	cmp	r5, #0
   1a274:	beq	1a2b4 <__assert_fail@plt+0x836c>
   1a278:	bl	11d74 <__errno_location@plt>
   1a27c:	ldr	r6, [r0]
   1a280:	mov	r0, r5
   1a284:	bl	1f66c <__assert_fail@plt+0xd724>
   1a288:	str	r4, [sp]
   1a28c:	mov	r3, r0
   1a290:	movw	r2, #13816	; 0x35f8
   1a294:	movt	r2, #2
   1a298:	mov	r1, r6
   1a29c:	mov	r0, #0
   1a2a0:	bl	11c90 <error@plt>
   1a2a4:	movw	r3, #25200	; 0x6270
   1a2a8:	movt	r3, #3
   1a2ac:	ldr	r0, [r3]
   1a2b0:	bl	11abc <_exit@plt>
   1a2b4:	bl	11d74 <__errno_location@plt>
   1a2b8:	mov	r3, r4
   1a2bc:	movw	r2, #14184	; 0x3768
   1a2c0:	movt	r2, #2
   1a2c4:	ldr	r1, [r0]
   1a2c8:	mov	r0, #0
   1a2cc:	bl	11c90 <error@plt>
   1a2d0:	b	1a2a4 <__assert_fail@plt+0x835c>
   1a2d4:	movw	r3, #25200	; 0x6270
   1a2d8:	movt	r3, #3
   1a2dc:	ldr	r0, [r3]
   1a2e0:	bl	11abc <_exit@plt>
   1a2e4:	movw	r3, #8961	; 0x2301
   1a2e8:	movt	r3, #26437	; 0x6745
   1a2ec:	str	r3, [r0]
   1a2f0:	movw	r3, #43913	; 0xab89
   1a2f4:	movt	r3, #61389	; 0xefcd
   1a2f8:	str	r3, [r0, #4]
   1a2fc:	movw	r3, #56574	; 0xdcfe
   1a300:	movt	r3, #39098	; 0x98ba
   1a304:	str	r3, [r0, #8]
   1a308:	movw	r3, #21622	; 0x5476
   1a30c:	movt	r3, #4146	; 0x1032
   1a310:	str	r3, [r0, #12]
   1a314:	mov	r3, #0
   1a318:	str	r3, [r0, #20]
   1a31c:	str	r3, [r0, #16]
   1a320:	str	r3, [r0, #24]
   1a324:	bx	lr
   1a328:	ldr	r3, [r0]
   1a32c:	str	r3, [r1]
   1a330:	ldr	r3, [r0, #4]
   1a334:	str	r3, [r1, #4]
   1a338:	ldr	r3, [r0, #8]
   1a33c:	str	r3, [r1, #8]
   1a340:	ldr	r3, [r0, #12]
   1a344:	str	r3, [r1, #12]
   1a348:	mov	r0, r1
   1a34c:	bx	lr
   1a350:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a354:	strd	r6, [sp, #8]
   1a358:	strd	r8, [sp, #16]
   1a35c:	strd	sl, [sp, #24]
   1a360:	str	lr, [sp, #32]
   1a364:	sub	sp, sp, #60	; 0x3c
   1a368:	mov	lr, r2
   1a36c:	str	r2, [sp, #52]	; 0x34
   1a370:	bic	r3, r1, #3
   1a374:	ldr	r8, [r2]
   1a378:	ldr	r7, [r2, #4]
   1a37c:	ldr	r6, [r2, #8]
   1a380:	ldr	r5, [r2, #12]
   1a384:	ldr	r2, [r2, #16]
   1a388:	add	r2, r1, r2
   1a38c:	str	r2, [lr, #16]
   1a390:	ldr	ip, [lr, #20]
   1a394:	cmp	r2, r1
   1a398:	movcs	r2, ip
   1a39c:	addcc	r2, ip, #1
   1a3a0:	str	r2, [lr, #20]
   1a3a4:	add	r2, r0, r3
   1a3a8:	cmp	r0, r2
   1a3ac:	bcs	1add4 <__assert_fail@plt+0x8e8c>
   1a3b0:	add	r9, r0, #64	; 0x40
   1a3b4:	sub	r3, r3, #1
   1a3b8:	bic	r3, r3, #63	; 0x3f
   1a3bc:	add	r0, r0, #128	; 0x80
   1a3c0:	add	r3, r3, r0
   1a3c4:	str	r3, [sp, #12]
   1a3c8:	movw	r3, #42104	; 0xa478
   1a3cc:	movt	r3, #55146	; 0xd76a
   1a3d0:	str	r3, [sp, #16]
   1a3d4:	movw	r3, #46934	; 0xb756
   1a3d8:	movt	r3, #59591	; 0xe8c7
   1a3dc:	str	r3, [sp, #20]
   1a3e0:	movw	r3, #28891	; 0x70db
   1a3e4:	movt	r3, #9248	; 0x2420
   1a3e8:	str	r3, [sp, #24]
   1a3ec:	movw	r3, #52974	; 0xceee
   1a3f0:	movt	r3, #49597	; 0xc1bd
   1a3f4:	str	r3, [sp, #28]
   1a3f8:	movw	r3, #50730	; 0xc62a
   1a3fc:	movt	r3, #18311	; 0x4787
   1a400:	str	r3, [sp, #32]
   1a404:	movw	r3, #17939	; 0x4613
   1a408:	movt	r3, #43056	; 0xa830
   1a40c:	str	r3, [sp, #36]	; 0x24
   1a410:	movw	r3, #38145	; 0x9501
   1a414:	movt	r3, #64838	; 0xfd46
   1a418:	str	r3, [sp, #40]	; 0x28
   1a41c:	movw	r3, #39128	; 0x98d8
   1a420:	movt	r3, #27008	; 0x6980
   1a424:	str	r3, [sp, #44]	; 0x2c
   1a428:	movw	r3, #55230	; 0xd7be
   1a42c:	movt	r3, #35164	; 0x895c
   1a430:	str	r3, [sp, #48]	; 0x30
   1a434:	str	r8, [sp, #4]
   1a438:	ldr	r3, [sp, #4]
   1a43c:	ldr	r2, [sp, #16]
   1a440:	add	r2, r3, r2
   1a444:	ldr	r1, [r9, #-64]	; 0xffffffc0
   1a448:	add	r2, r2, r1
   1a44c:	eor	r3, r6, r5
   1a450:	and	r3, r3, r7
   1a454:	eor	r3, r3, r5
   1a458:	add	r3, r3, r2
   1a45c:	add	r3, r7, r3, ror #25
   1a460:	ldr	r2, [sp, #20]
   1a464:	add	r2, r5, r2
   1a468:	ldr	r1, [r9, #-60]	; 0xffffffc4
   1a46c:	add	r2, r2, r1
   1a470:	eor	r1, r7, r6
   1a474:	and	r1, r1, r3
   1a478:	eor	r1, r1, r6
   1a47c:	add	r1, r1, r2
   1a480:	add	r1, r3, r1, ror #20
   1a484:	ldr	r2, [sp, #24]
   1a488:	add	r2, r6, r2
   1a48c:	ldr	r0, [r9, #-56]	; 0xffffffc8
   1a490:	add	r2, r2, r0
   1a494:	eor	r0, r3, r7
   1a498:	and	r0, r0, r1
   1a49c:	eor	r0, r0, r7
   1a4a0:	add	r0, r0, r2
   1a4a4:	add	r0, r1, r0, ror #15
   1a4a8:	ldr	r2, [sp, #28]
   1a4ac:	add	ip, r7, r2
   1a4b0:	ldr	r2, [r9, #-52]	; 0xffffffcc
   1a4b4:	add	ip, ip, r2
   1a4b8:	eor	r2, r3, r1
   1a4bc:	and	r2, r2, r0
   1a4c0:	eor	r2, r2, r3
   1a4c4:	add	r2, r2, ip
   1a4c8:	add	r2, r0, r2, ror #10
   1a4cc:	movw	ip, #4015	; 0xfaf
   1a4d0:	movt	ip, #62844	; 0xf57c
   1a4d4:	ldr	lr, [r9, #-48]	; 0xffffffd0
   1a4d8:	add	ip, lr, ip
   1a4dc:	add	ip, ip, r3
   1a4e0:	eor	r3, r1, r0
   1a4e4:	and	r3, r3, r2
   1a4e8:	eor	r3, r3, r1
   1a4ec:	add	r3, r3, ip
   1a4f0:	add	r3, r2, r3, ror #25
   1a4f4:	ldr	lr, [r9, #-44]	; 0xffffffd4
   1a4f8:	ldr	r4, [sp, #32]
   1a4fc:	add	ip, lr, r4
   1a500:	add	r1, ip, r1
   1a504:	eor	ip, r0, r2
   1a508:	and	ip, ip, r3
   1a50c:	eor	ip, ip, r0
   1a510:	add	r1, ip, r1
   1a514:	add	r1, r3, r1, ror #20
   1a518:	ldr	lr, [r9, #-40]	; 0xffffffd8
   1a51c:	ldr	r4, [sp, #36]	; 0x24
   1a520:	add	ip, lr, r4
   1a524:	add	r0, ip, r0
   1a528:	eor	ip, r2, r3
   1a52c:	and	ip, ip, r1
   1a530:	eor	ip, ip, r2
   1a534:	add	r0, ip, r0
   1a538:	add	r0, r1, r0, ror #15
   1a53c:	ldr	sl, [r9, #-36]	; 0xffffffdc
   1a540:	ldr	lr, [sp, #40]	; 0x28
   1a544:	add	ip, sl, lr
   1a548:	add	r2, ip, r2
   1a54c:	eor	ip, r3, r1
   1a550:	and	ip, ip, r0
   1a554:	eor	ip, ip, r3
   1a558:	add	r2, ip, r2
   1a55c:	add	r2, r0, r2, ror #10
   1a560:	ldr	lr, [r9, #-32]	; 0xffffffe0
   1a564:	ldr	r4, [sp, #44]	; 0x2c
   1a568:	add	ip, lr, r4
   1a56c:	add	r3, ip, r3
   1a570:	eor	ip, r1, r0
   1a574:	and	ip, ip, r2
   1a578:	eor	ip, ip, r1
   1a57c:	add	r3, ip, r3
   1a580:	add	r3, r2, r3, ror #25
   1a584:	movw	ip, #63407	; 0xf7af
   1a588:	movt	ip, #35652	; 0x8b44
   1a58c:	ldr	lr, [r9, #-28]	; 0xffffffe4
   1a590:	add	ip, lr, ip
   1a594:	add	ip, ip, r1
   1a598:	eor	r1, r0, r2
   1a59c:	and	r1, r1, r3
   1a5a0:	eor	r1, r1, r0
   1a5a4:	add	r1, r1, ip
   1a5a8:	add	r1, r3, r1, ror #20
   1a5ac:	ldr	lr, [r9, #-24]	; 0xffffffe8
   1a5b0:	sub	ip, lr, #41984	; 0xa400
   1a5b4:	sub	ip, ip, #79	; 0x4f
   1a5b8:	add	ip, ip, r0
   1a5bc:	eor	r0, r2, r3
   1a5c0:	and	r0, r0, r1
   1a5c4:	eor	r0, r0, r2
   1a5c8:	add	r0, r0, ip
   1a5cc:	add	r0, r1, r0, ror #15
   1a5d0:	ldr	lr, [r9, #-20]	; 0xffffffec
   1a5d4:	ldr	r4, [sp, #48]	; 0x30
   1a5d8:	add	ip, lr, r4
   1a5dc:	add	r2, ip, r2
   1a5e0:	eor	ip, r3, r1
   1a5e4:	and	ip, ip, r0
   1a5e8:	eor	ip, ip, r3
   1a5ec:	add	r2, ip, r2
   1a5f0:	add	r2, r0, r2, ror #10
   1a5f4:	ldr	r4, [r9, #-16]
   1a5f8:	movw	ip, #4386	; 0x1122
   1a5fc:	movt	ip, #27536	; 0x6b90
   1a600:	add	ip, r4, ip
   1a604:	add	ip, ip, r3
   1a608:	eor	r3, r1, r0
   1a60c:	and	r3, r3, r2
   1a610:	eor	r3, r3, r1
   1a614:	add	r3, r3, ip
   1a618:	add	r3, r2, r3, ror #25
   1a61c:	movw	ip, #29075	; 0x7193
   1a620:	movt	ip, #64920	; 0xfd98
   1a624:	ldr	lr, [r9, #-12]
   1a628:	add	ip, lr, ip
   1a62c:	add	ip, ip, r1
   1a630:	eor	r1, r0, r2
   1a634:	and	r1, r1, r3
   1a638:	eor	r1, r1, r0
   1a63c:	add	r1, r1, ip
   1a640:	add	r1, r3, r1, ror #20
   1a644:	ldr	r8, [r9, #-8]
   1a648:	movw	ip, #17294	; 0x438e
   1a64c:	movt	ip, #42617	; 0xa679
   1a650:	add	ip, r8, ip
   1a654:	add	ip, ip, r0
   1a658:	eor	r0, r2, r3
   1a65c:	and	r0, r0, r1
   1a660:	eor	r0, r0, r2
   1a664:	add	r0, r0, ip
   1a668:	add	r0, r1, r0, ror #15
   1a66c:	ldr	lr, [r9, #-4]
   1a670:	movw	ip, #2081	; 0x821
   1a674:	movt	ip, #18868	; 0x49b4
   1a678:	add	ip, lr, ip
   1a67c:	add	ip, ip, r2
   1a680:	eor	r2, r3, r1
   1a684:	and	r2, r2, r0
   1a688:	eor	r2, r2, r3
   1a68c:	add	r2, r2, ip
   1a690:	add	r2, r0, r2, ror #10
   1a694:	movw	ip, #9570	; 0x2562
   1a698:	movt	ip, #63006	; 0xf61e
   1a69c:	ldr	fp, [r9, #-60]	; 0xffffffc4
   1a6a0:	add	ip, fp, ip
   1a6a4:	add	ip, ip, r3
   1a6a8:	eor	r3, r0, r2
   1a6ac:	and	r3, r3, r1
   1a6b0:	eor	r3, r3, r0
   1a6b4:	add	r3, r3, ip
   1a6b8:	add	r3, r2, r3, ror #27
   1a6bc:	movw	ip, #45888	; 0xb340
   1a6c0:	movt	ip, #49216	; 0xc040
   1a6c4:	ldr	fp, [r9, #-40]	; 0xffffffd8
   1a6c8:	add	ip, fp, ip
   1a6cc:	add	ip, ip, r1
   1a6d0:	eor	r1, r2, r3
   1a6d4:	and	r1, r1, r0
   1a6d8:	eor	r1, r1, r2
   1a6dc:	add	r1, r1, ip
   1a6e0:	add	r1, r3, r1, ror #23
   1a6e4:	movw	ip, #23121	; 0x5a51
   1a6e8:	movt	ip, #9822	; 0x265e
   1a6ec:	ldr	fp, [r9, #-20]	; 0xffffffec
   1a6f0:	add	ip, fp, ip
   1a6f4:	add	ip, ip, r0
   1a6f8:	eor	r0, r3, r1
   1a6fc:	and	r0, r0, r2
   1a700:	eor	r0, r0, r3
   1a704:	add	r0, r0, ip
   1a708:	add	r0, r1, r0, ror #18
   1a70c:	movw	ip, #51114	; 0xc7aa
   1a710:	movt	ip, #59830	; 0xe9b6
   1a714:	ldr	fp, [r9, #-64]	; 0xffffffc0
   1a718:	add	ip, fp, ip
   1a71c:	add	ip, ip, r2
   1a720:	eor	r2, r1, r0
   1a724:	and	r2, r2, r3
   1a728:	eor	r2, r2, r1
   1a72c:	add	r2, r2, ip
   1a730:	add	r2, r0, r2, ror #12
   1a734:	movw	ip, #4189	; 0x105d
   1a738:	movt	ip, #54831	; 0xd62f
   1a73c:	ldr	fp, [r9, #-44]	; 0xffffffd4
   1a740:	add	ip, fp, ip
   1a744:	add	ip, ip, r3
   1a748:	eor	r3, r0, r2
   1a74c:	and	r3, r3, r1
   1a750:	eor	r3, r3, r0
   1a754:	add	r3, r3, ip
   1a758:	add	r3, r2, r3, ror #27
   1a75c:	movw	ip, #5203	; 0x1453
   1a760:	movt	ip, #580	; 0x244
   1a764:	ldr	fp, [r9, #-24]	; 0xffffffe8
   1a768:	add	ip, fp, ip
   1a76c:	add	ip, ip, r1
   1a770:	eor	r1, r2, r3
   1a774:	and	r1, r1, r0
   1a778:	eor	r1, r1, r2
   1a77c:	add	r1, r1, ip
   1a780:	add	r1, r3, r1, ror #23
   1a784:	movw	ip, #59009	; 0xe681
   1a788:	movt	ip, #55457	; 0xd8a1
   1a78c:	add	ip, lr, ip
   1a790:	add	ip, ip, r0
   1a794:	eor	r0, r3, r1
   1a798:	and	r0, r0, r2
   1a79c:	eor	r0, r0, r3
   1a7a0:	add	r0, r0, ip
   1a7a4:	add	r0, r1, r0, ror #18
   1a7a8:	movw	ip, #64456	; 0xfbc8
   1a7ac:	movt	ip, #59347	; 0xe7d3
   1a7b0:	ldr	fp, [r9, #-48]	; 0xffffffd0
   1a7b4:	add	ip, fp, ip
   1a7b8:	add	ip, ip, r2
   1a7bc:	eor	r2, r1, r0
   1a7c0:	and	r2, r2, r3
   1a7c4:	eor	r2, r2, r1
   1a7c8:	add	r2, r2, ip
   1a7cc:	add	r2, r0, r2, ror #12
   1a7d0:	movw	ip, #52710	; 0xcde6
   1a7d4:	movt	ip, #8673	; 0x21e1
   1a7d8:	ldr	fp, [r9, #-28]	; 0xffffffe4
   1a7dc:	add	ip, fp, ip
   1a7e0:	add	ip, ip, r3
   1a7e4:	eor	r3, r0, r2
   1a7e8:	and	r3, r3, r1
   1a7ec:	eor	r3, r3, r0
   1a7f0:	add	r3, r3, ip
   1a7f4:	add	r3, r2, r3, ror #27
   1a7f8:	movw	ip, #2006	; 0x7d6
   1a7fc:	movt	ip, #49975	; 0xc337
   1a800:	add	ip, r8, ip
   1a804:	add	ip, ip, r1
   1a808:	eor	r1, r2, r3
   1a80c:	and	r1, r1, r0
   1a810:	eor	r1, r1, r2
   1a814:	add	r1, r1, ip
   1a818:	add	r1, r3, r1, ror #23
   1a81c:	movw	ip, #3463	; 0xd87
   1a820:	movt	ip, #62677	; 0xf4d5
   1a824:	ldr	fp, [r9, #-52]	; 0xffffffcc
   1a828:	add	ip, fp, ip
   1a82c:	add	r0, ip, r0
   1a830:	eor	ip, r3, r1
   1a834:	and	ip, ip, r2
   1a838:	eor	ip, ip, r3
   1a83c:	add	r0, ip, r0
   1a840:	add	r0, r1, r0, ror #18
   1a844:	movw	ip, #5357	; 0x14ed
   1a848:	movt	ip, #17754	; 0x455a
   1a84c:	ldr	fp, [r9, #-32]	; 0xffffffe0
   1a850:	add	ip, fp, ip
   1a854:	add	r2, ip, r2
   1a858:	eor	ip, r1, r0
   1a85c:	and	ip, ip, r3
   1a860:	eor	ip, ip, r1
   1a864:	add	r2, ip, r2
   1a868:	add	r2, r0, r2, ror #12
   1a86c:	movw	ip, #59653	; 0xe905
   1a870:	movt	ip, #43491	; 0xa9e3
   1a874:	ldr	fp, [r9, #-12]
   1a878:	add	ip, fp, ip
   1a87c:	add	r3, ip, r3
   1a880:	eor	ip, r0, r2
   1a884:	and	ip, ip, r1
   1a888:	eor	ip, ip, r0
   1a88c:	add	r3, ip, r3
   1a890:	add	r3, r2, r3, ror #27
   1a894:	movw	ip, #41976	; 0xa3f8
   1a898:	movt	ip, #64751	; 0xfcef
   1a89c:	ldr	fp, [r9, #-56]	; 0xffffffc8
   1a8a0:	add	ip, fp, ip
   1a8a4:	add	r1, ip, r1
   1a8a8:	eor	ip, r2, r3
   1a8ac:	and	ip, ip, r0
   1a8b0:	eor	ip, ip, r2
   1a8b4:	add	r1, ip, r1
   1a8b8:	add	r1, r3, r1, ror #23
   1a8bc:	movw	ip, #729	; 0x2d9
   1a8c0:	movt	ip, #26479	; 0x676f
   1a8c4:	add	ip, sl, ip
   1a8c8:	add	r0, ip, r0
   1a8cc:	eor	ip, r3, r1
   1a8d0:	and	ip, ip, r2
   1a8d4:	eor	ip, ip, r3
   1a8d8:	add	ip, ip, r0
   1a8dc:	add	ip, r1, ip, ror #18
   1a8e0:	eor	r0, r1, ip
   1a8e4:	movw	fp, #19594	; 0x4c8a
   1a8e8:	movt	fp, #36138	; 0x8d2a
   1a8ec:	add	fp, r4, fp
   1a8f0:	add	fp, fp, r2
   1a8f4:	str	r0, [sp, #8]
   1a8f8:	and	r2, r0, r3
   1a8fc:	eor	r2, r2, r1
   1a900:	add	r2, r2, fp
   1a904:	add	r2, ip, r2, ror #12
   1a908:	movw	fp, #14658	; 0x3942
   1a90c:	movt	fp, #65530	; 0xfffa
   1a910:	ldr	r0, [r9, #-44]	; 0xffffffd4
   1a914:	add	fp, r0, fp
   1a918:	add	r3, fp, r3
   1a91c:	ldr	r0, [sp, #8]
   1a920:	eor	r0, r0, r2
   1a924:	add	r3, r0, r3
   1a928:	add	r3, r2, r3, ror #28
   1a92c:	movw	r0, #63105	; 0xf681
   1a930:	movt	r0, #34673	; 0x8771
   1a934:	ldr	fp, [r9, #-32]	; 0xffffffe0
   1a938:	add	r0, fp, r0
   1a93c:	add	r1, r0, r1
   1a940:	eor	r0, ip, r2
   1a944:	eor	r0, r0, r3
   1a948:	add	r1, r0, r1
   1a94c:	add	r1, r3, r1, ror #21
   1a950:	movw	r0, #24866	; 0x6122
   1a954:	movt	r0, #28061	; 0x6d9d
   1a958:	ldr	fp, [r9, #-20]	; 0xffffffec
   1a95c:	add	r0, fp, r0
   1a960:	add	ip, r0, ip
   1a964:	eor	r0, r2, r3
   1a968:	eor	r0, r0, r1
   1a96c:	add	ip, r0, ip
   1a970:	add	ip, r1, ip, ror #16
   1a974:	movw	r0, #14348	; 0x380c
   1a978:	movt	r0, #64997	; 0xfde5
   1a97c:	add	r0, r8, r0
   1a980:	add	r2, r0, r2
   1a984:	eor	r0, r3, r1
   1a988:	eor	r0, r0, ip
   1a98c:	add	r2, r0, r2
   1a990:	add	r2, ip, r2, ror #9
   1a994:	movw	fp, #59972	; 0xea44
   1a998:	movt	fp, #42174	; 0xa4be
   1a99c:	ldr	r0, [r9, #-60]	; 0xffffffc4
   1a9a0:	add	fp, r0, fp
   1a9a4:	add	r3, fp, r3
   1a9a8:	eor	r0, r1, ip
   1a9ac:	eor	r0, r0, r2
   1a9b0:	add	r3, r0, r3
   1a9b4:	add	r3, r2, r3, ror #28
   1a9b8:	movw	r0, #53161	; 0xcfa9
   1a9bc:	movt	r0, #19422	; 0x4bde
   1a9c0:	ldr	fp, [r9, #-48]	; 0xffffffd0
   1a9c4:	add	r0, fp, r0
   1a9c8:	add	r1, r0, r1
   1a9cc:	eor	r0, ip, r2
   1a9d0:	eor	r0, r0, r3
   1a9d4:	add	r1, r0, r1
   1a9d8:	add	r1, r3, r1, ror #21
   1a9dc:	movw	r0, #19296	; 0x4b60
   1a9e0:	movt	r0, #63163	; 0xf6bb
   1a9e4:	add	r0, sl, r0
   1a9e8:	add	ip, r0, ip
   1a9ec:	eor	r0, r2, r3
   1a9f0:	eor	r0, r0, r1
   1a9f4:	add	ip, r0, ip
   1a9f8:	add	ip, r1, ip, ror #16
   1a9fc:	movw	r0, #48240	; 0xbc70
   1aa00:	movt	r0, #48831	; 0xbebf
   1aa04:	ldr	fp, [r9, #-24]	; 0xffffffe8
   1aa08:	add	r0, fp, r0
   1aa0c:	add	r2, r0, r2
   1aa10:	eor	r0, r3, r1
   1aa14:	eor	r0, r0, ip
   1aa18:	add	r2, r0, r2
   1aa1c:	add	r0, ip, r2, ror #9
   1aa20:	movw	r2, #32454	; 0x7ec6
   1aa24:	movt	r2, #10395	; 0x289b
   1aa28:	ldr	fp, [r9, #-12]
   1aa2c:	add	r2, fp, r2
   1aa30:	add	r3, r2, r3
   1aa34:	eor	r2, r1, ip
   1aa38:	eor	r2, r2, r0
   1aa3c:	add	r3, r2, r3
   1aa40:	add	r3, r0, r3, ror #28
   1aa44:	movw	r2, #10234	; 0x27fa
   1aa48:	movt	r2, #60065	; 0xeaa1
   1aa4c:	ldr	fp, [r9, #-64]	; 0xffffffc0
   1aa50:	add	r2, fp, r2
   1aa54:	add	r1, r2, r1
   1aa58:	eor	r2, ip, r0
   1aa5c:	eor	r2, r2, r3
   1aa60:	add	r1, r2, r1
   1aa64:	add	r2, r3, r1, ror #21
   1aa68:	movw	r1, #12421	; 0x3085
   1aa6c:	movt	r1, #54511	; 0xd4ef
   1aa70:	ldr	fp, [r9, #-52]	; 0xffffffcc
   1aa74:	add	r1, fp, r1
   1aa78:	add	ip, r1, ip
   1aa7c:	eor	r1, r0, r3
   1aa80:	eor	r1, r1, r2
   1aa84:	add	ip, r1, ip
   1aa88:	add	r1, r2, ip, ror #16
   1aa8c:	movw	ip, #7429	; 0x1d05
   1aa90:	movt	ip, #1160	; 0x488
   1aa94:	ldr	fp, [r9, #-40]	; 0xffffffd8
   1aa98:	add	ip, fp, ip
   1aa9c:	add	r0, ip, r0
   1aaa0:	eor	ip, r3, r2
   1aaa4:	eor	ip, ip, r1
   1aaa8:	add	r0, ip, r0
   1aaac:	add	r0, r1, r0, ror #9
   1aab0:	movw	ip, #53305	; 0xd039
   1aab4:	movt	ip, #55764	; 0xd9d4
   1aab8:	ldr	fp, [r9, #-28]	; 0xffffffe4
   1aabc:	add	ip, fp, ip
   1aac0:	add	r3, ip, r3
   1aac4:	eor	ip, r2, r1
   1aac8:	eor	ip, ip, r0
   1aacc:	add	r3, ip, r3
   1aad0:	add	r3, r0, r3, ror #28
   1aad4:	movw	ip, #39397	; 0x99e5
   1aad8:	movt	ip, #59099	; 0xe6db
   1aadc:	add	ip, r4, ip
   1aae0:	add	r2, ip, r2
   1aae4:	eor	ip, r1, r0
   1aae8:	eor	ip, ip, r3
   1aaec:	add	r2, ip, r2
   1aaf0:	add	r2, r3, r2, ror #21
   1aaf4:	movw	ip, #31992	; 0x7cf8
   1aaf8:	movt	ip, #8098	; 0x1fa2
   1aafc:	add	ip, lr, ip
   1ab00:	add	r1, ip, r1
   1ab04:	eor	ip, r0, r3
   1ab08:	eor	ip, ip, r2
   1ab0c:	add	r1, ip, r1
   1ab10:	add	r1, r2, r1, ror #16
   1ab14:	movw	ip, #22117	; 0x5665
   1ab18:	movt	ip, #50348	; 0xc4ac
   1ab1c:	ldr	fp, [r9, #-56]	; 0xffffffc8
   1ab20:	add	ip, fp, ip
   1ab24:	add	r0, ip, r0
   1ab28:	eor	ip, r3, r2
   1ab2c:	eor	ip, ip, r1
   1ab30:	add	r0, ip, r0
   1ab34:	add	r0, r1, r0, ror #9
   1ab38:	movw	ip, #8772	; 0x2244
   1ab3c:	movt	ip, #62505	; 0xf429
   1ab40:	ldr	fp, [r9, #-64]	; 0xffffffc0
   1ab44:	add	ip, fp, ip
   1ab48:	add	r3, ip, r3
   1ab4c:	mvn	ip, r2
   1ab50:	orr	ip, ip, r0
   1ab54:	eor	ip, ip, r1
   1ab58:	add	r3, ip, r3
   1ab5c:	add	r3, r0, r3, ror #26
   1ab60:	movw	ip, #65431	; 0xff97
   1ab64:	movt	ip, #17194	; 0x432a
   1ab68:	add	ip, sl, ip
   1ab6c:	add	r2, ip, r2
   1ab70:	mvn	sl, r1
   1ab74:	orr	sl, sl, r3
   1ab78:	eor	sl, sl, r0
   1ab7c:	add	r2, sl, r2
   1ab80:	add	r2, r3, r2, ror #22
   1ab84:	movw	ip, #9127	; 0x23a7
   1ab88:	movt	ip, #43924	; 0xab94
   1ab8c:	add	ip, r8, ip
   1ab90:	add	r1, ip, r1
   1ab94:	mvn	r8, r0
   1ab98:	orr	r8, r8, r2
   1ab9c:	eor	r8, r8, r3
   1aba0:	add	r1, r8, r1
   1aba4:	add	r1, r2, r1, ror #17
   1aba8:	movw	ip, #41017	; 0xa039
   1abac:	movt	ip, #64659	; 0xfc93
   1abb0:	ldr	r8, [r9, #-44]	; 0xffffffd4
   1abb4:	add	ip, r8, ip
   1abb8:	add	r0, ip, r0
   1abbc:	mvn	r8, r3
   1abc0:	orr	r8, r8, r1
   1abc4:	eor	r8, r8, r2
   1abc8:	add	r0, r8, r0
   1abcc:	add	r0, r1, r0, ror #11
   1abd0:	movw	ip, #22979	; 0x59c3
   1abd4:	movt	ip, #25947	; 0x655b
   1abd8:	add	ip, r4, ip
   1abdc:	add	r3, ip, r3
   1abe0:	mvn	r4, r2
   1abe4:	orr	r4, r4, r0
   1abe8:	eor	r4, r4, r1
   1abec:	add	r3, r4, r3
   1abf0:	add	r3, r0, r3, ror #26
   1abf4:	movw	ip, #52370	; 0xcc92
   1abf8:	movt	ip, #36620	; 0x8f0c
   1abfc:	ldr	r4, [r9, #-52]	; 0xffffffcc
   1ac00:	add	ip, r4, ip
   1ac04:	add	r2, ip, r2
   1ac08:	mvn	r4, r1
   1ac0c:	orr	r4, r4, r3
   1ac10:	eor	r4, r4, r0
   1ac14:	add	r2, r4, r2
   1ac18:	add	r2, r3, r2, ror #22
   1ac1c:	movw	ip, #62589	; 0xf47d
   1ac20:	movt	ip, #65519	; 0xffef
   1ac24:	ldr	r4, [r9, #-24]	; 0xffffffe8
   1ac28:	add	ip, r4, ip
   1ac2c:	add	r1, ip, r1
   1ac30:	mvn	r4, r0
   1ac34:	orr	r4, r4, r2
   1ac38:	eor	r4, r4, r3
   1ac3c:	add	r1, r4, r1
   1ac40:	add	r1, r2, r1, ror #17
   1ac44:	movw	ip, #24017	; 0x5dd1
   1ac48:	movt	ip, #34180	; 0x8584
   1ac4c:	ldr	r4, [r9, #-60]	; 0xffffffc4
   1ac50:	add	ip, r4, ip
   1ac54:	add	r0, ip, r0
   1ac58:	mvn	r4, r3
   1ac5c:	orr	r4, r4, r1
   1ac60:	eor	r4, r4, r2
   1ac64:	add	r0, r4, r0
   1ac68:	add	r0, r1, r0, ror #11
   1ac6c:	movw	ip, #32335	; 0x7e4f
   1ac70:	movt	ip, #28584	; 0x6fa8
   1ac74:	ldr	r4, [r9, #-32]	; 0xffffffe0
   1ac78:	add	ip, r4, ip
   1ac7c:	add	r3, ip, r3
   1ac80:	mvn	r4, r2
   1ac84:	orr	r4, r4, r0
   1ac88:	eor	r4, r4, r1
   1ac8c:	add	r3, r4, r3
   1ac90:	add	r3, r0, r3, ror #26
   1ac94:	movw	ip, #59104	; 0xe6e0
   1ac98:	movt	ip, #65068	; 0xfe2c
   1ac9c:	add	ip, lr, ip
   1aca0:	add	r2, ip, r2
   1aca4:	mvn	lr, r1
   1aca8:	orr	lr, lr, r3
   1acac:	eor	lr, lr, r0
   1acb0:	add	r2, lr, r2
   1acb4:	add	r2, r3, r2, ror #22
   1acb8:	movw	ip, #17172	; 0x4314
   1acbc:	movt	ip, #41729	; 0xa301
   1acc0:	ldr	lr, [r9, #-40]	; 0xffffffd8
   1acc4:	add	ip, lr, ip
   1acc8:	add	r1, ip, r1
   1accc:	mvn	lr, r0
   1acd0:	orr	lr, lr, r2
   1acd4:	eor	lr, lr, r3
   1acd8:	add	r1, lr, r1
   1acdc:	add	r1, r2, r1, ror #17
   1ace0:	movw	ip, #4513	; 0x11a1
   1ace4:	movt	ip, #19976	; 0x4e08
   1ace8:	ldr	lr, [r9, #-12]
   1acec:	add	ip, lr, ip
   1acf0:	add	r0, ip, r0
   1acf4:	mvn	lr, r3
   1acf8:	orr	lr, lr, r1
   1acfc:	eor	lr, lr, r2
   1ad00:	add	r0, lr, r0
   1ad04:	add	r0, r1, r0, ror #11
   1ad08:	movw	ip, #32386	; 0x7e82
   1ad0c:	movt	ip, #63315	; 0xf753
   1ad10:	ldr	lr, [r9, #-48]	; 0xffffffd0
   1ad14:	add	ip, lr, ip
   1ad18:	add	r3, ip, r3
   1ad1c:	mvn	lr, r2
   1ad20:	orr	lr, lr, r0
   1ad24:	eor	lr, lr, r1
   1ad28:	add	r3, lr, r3
   1ad2c:	add	r3, r0, r3, ror #26
   1ad30:	movw	ip, #62005	; 0xf235
   1ad34:	movt	ip, #48442	; 0xbd3a
   1ad38:	ldr	lr, [r9, #-20]	; 0xffffffec
   1ad3c:	add	ip, lr, ip
   1ad40:	add	r2, ip, r2
   1ad44:	mvn	lr, r1
   1ad48:	orr	lr, lr, r3
   1ad4c:	eor	lr, lr, r0
   1ad50:	add	r2, lr, r2
   1ad54:	add	r2, r3, r2, ror #22
   1ad58:	movw	ip, #53947	; 0xd2bb
   1ad5c:	movt	ip, #10967	; 0x2ad7
   1ad60:	ldr	lr, [r9, #-56]	; 0xffffffc8
   1ad64:	add	ip, lr, ip
   1ad68:	add	r1, ip, r1
   1ad6c:	mvn	lr, r0
   1ad70:	orr	lr, lr, r2
   1ad74:	eor	lr, lr, r3
   1ad78:	add	r1, lr, r1
   1ad7c:	add	r1, r2, r1, ror #17
   1ad80:	movw	ip, #54161	; 0xd391
   1ad84:	movt	ip, #60294	; 0xeb86
   1ad88:	ldr	lr, [r9, #-28]	; 0xffffffe4
   1ad8c:	add	ip, lr, ip
   1ad90:	add	r0, ip, r0
   1ad94:	mvn	lr, r3
   1ad98:	orr	lr, lr, r1
   1ad9c:	eor	lr, lr, r2
   1ada0:	add	r0, lr, r0
   1ada4:	add	r0, r1, r0, ror #11
   1ada8:	ldr	ip, [sp, #4]
   1adac:	add	r3, ip, r3
   1adb0:	str	r3, [sp, #4]
   1adb4:	add	r7, r7, r0
   1adb8:	add	r6, r6, r1
   1adbc:	add	r5, r5, r2
   1adc0:	add	r9, r9, #64	; 0x40
   1adc4:	ldr	r3, [sp, #12]
   1adc8:	cmp	r9, r3
   1adcc:	bne	1a438 <__assert_fail@plt+0x84f0>
   1add0:	ldr	r8, [sp, #4]
   1add4:	ldr	r3, [sp, #52]	; 0x34
   1add8:	str	r8, [r3]
   1addc:	str	r7, [r3, #4]
   1ade0:	str	r6, [r3, #8]
   1ade4:	str	r5, [r3, #12]
   1ade8:	add	sp, sp, #60	; 0x3c
   1adec:	ldrd	r4, [sp]
   1adf0:	ldrd	r6, [sp, #8]
   1adf4:	ldrd	r8, [sp, #16]
   1adf8:	ldrd	sl, [sp, #24]
   1adfc:	add	sp, sp, #32
   1ae00:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae04:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ae08:	strd	r6, [sp, #8]
   1ae0c:	str	r8, [sp, #16]
   1ae10:	str	lr, [sp, #20]
   1ae14:	mov	r4, r0
   1ae18:	mov	r6, r1
   1ae1c:	ldr	r0, [r0, #24]
   1ae20:	cmp	r0, #56	; 0x38
   1ae24:	movcc	r5, #16
   1ae28:	movcs	r5, #32
   1ae2c:	ldr	r3, [r4, #16]
   1ae30:	add	r3, r0, r3
   1ae34:	str	r3, [r4, #16]
   1ae38:	cmp	r3, r0
   1ae3c:	bcs	1ae4c <__assert_fail@plt+0x8f04>
   1ae40:	ldr	r2, [r4, #20]
   1ae44:	add	r2, r2, #1
   1ae48:	str	r2, [r4, #20]
   1ae4c:	add	r2, r4, r5, lsl #2
   1ae50:	lsl	r1, r3, #3
   1ae54:	str	r1, [r2, #20]
   1ae58:	ldr	r1, [r4, #20]
   1ae5c:	lsr	r3, r3, #29
   1ae60:	orr	r3, r3, r1, lsl #3
   1ae64:	str	r3, [r2, #24]
   1ae68:	add	r7, r4, #28
   1ae6c:	sub	r5, r5, #-1073741822	; 0xc0000002
   1ae70:	lsl	r5, r5, #2
   1ae74:	sub	r2, r5, r0
   1ae78:	movw	r1, #21160	; 0x52a8
   1ae7c:	movt	r1, #2
   1ae80:	add	r0, r7, r0
   1ae84:	bl	11ac8 <memcpy@plt>
   1ae88:	mov	r2, r4
   1ae8c:	add	r1, r5, #8
   1ae90:	mov	r0, r7
   1ae94:	bl	1a350 <__assert_fail@plt+0x8408>
   1ae98:	mov	r1, r6
   1ae9c:	mov	r0, r4
   1aea0:	bl	1a328 <__assert_fail@plt+0x83e0>
   1aea4:	ldrd	r4, [sp]
   1aea8:	ldrd	r6, [sp, #8]
   1aeac:	ldr	r8, [sp, #16]
   1aeb0:	add	sp, sp, #20
   1aeb4:	pop	{pc}		; (ldr pc, [sp], #4)
   1aeb8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1aebc:	strd	r6, [sp, #8]
   1aec0:	strd	r8, [sp, #16]
   1aec4:	strd	sl, [sp, #24]
   1aec8:	str	lr, [sp, #32]
   1aecc:	sub	sp, sp, #4
   1aed0:	mov	r4, r0
   1aed4:	mov	r6, r1
   1aed8:	mov	r5, r2
   1aedc:	ldr	r7, [r2, #24]
   1aee0:	cmp	r7, #0
   1aee4:	bne	1afa0 <__assert_fail@plt+0x9058>
   1aee8:	cmp	r6, #63	; 0x3f
   1aeec:	bls	1af7c <__assert_fail@plt+0x9034>
   1aef0:	tst	r4, #3
   1aef4:	beq	1b014 <__assert_fail@plt+0x90cc>
   1aef8:	cmp	r6, #64	; 0x40
   1aefc:	bls	1b034 <__assert_fail@plt+0x90ec>
   1af00:	sub	sl, r6, #65	; 0x41
   1af04:	lsr	sl, sl, #6
   1af08:	add	r8, sl, #1
   1af0c:	add	r8, r4, r8, lsl #6
   1af10:	add	r7, r5, #28
   1af14:	mov	r9, #64	; 0x40
   1af18:	mov	r3, r4
   1af1c:	mov	r2, r7
   1af20:	add	fp, r4, #64	; 0x40
   1af24:	ldr	lr, [r3]
   1af28:	ldr	ip, [r3, #4]
   1af2c:	ldr	r0, [r3, #8]
   1af30:	ldr	r1, [r3, #12]
   1af34:	str	lr, [r2]
   1af38:	str	ip, [r2, #4]
   1af3c:	str	r0, [r2, #8]
   1af40:	str	r1, [r2, #12]
   1af44:	add	r3, r3, #16
   1af48:	add	r2, r2, #16
   1af4c:	cmp	r3, fp
   1af50:	bne	1af24 <__assert_fail@plt+0x8fdc>
   1af54:	mov	r2, r5
   1af58:	mov	r1, r9
   1af5c:	mov	r0, r7
   1af60:	bl	1a350 <__assert_fail@plt+0x8408>
   1af64:	add	r4, r4, #64	; 0x40
   1af68:	cmp	r4, r8
   1af6c:	bne	1af18 <__assert_fail@plt+0x8fd0>
   1af70:	sub	r6, r6, #64	; 0x40
   1af74:	sub	r6, r6, sl, lsl #6
   1af78:	mov	r4, r8
   1af7c:	cmp	r6, #0
   1af80:	bne	1b034 <__assert_fail@plt+0x90ec>
   1af84:	add	sp, sp, #4
   1af88:	ldrd	r4, [sp]
   1af8c:	ldrd	r6, [sp, #8]
   1af90:	ldrd	r8, [sp, #16]
   1af94:	ldrd	sl, [sp, #24]
   1af98:	add	sp, sp, #32
   1af9c:	pop	{pc}		; (ldr pc, [sp], #4)
   1afa0:	rsb	r8, r7, #128	; 0x80
   1afa4:	cmp	r8, r1
   1afa8:	movcs	r8, r1
   1afac:	add	r9, r2, #28
   1afb0:	mov	r2, r8
   1afb4:	mov	r1, r0
   1afb8:	add	r0, r9, r7
   1afbc:	bl	11ac8 <memcpy@plt>
   1afc0:	ldr	r1, [r5, #24]
   1afc4:	add	r1, r8, r1
   1afc8:	str	r1, [r5, #24]
   1afcc:	cmp	r1, #64	; 0x40
   1afd0:	bhi	1afe0 <__assert_fail@plt+0x9098>
   1afd4:	add	r4, r4, r8
   1afd8:	sub	r6, r6, r8
   1afdc:	b	1aee8 <__assert_fail@plt+0x8fa0>
   1afe0:	mov	r2, r5
   1afe4:	bic	r1, r1, #63	; 0x3f
   1afe8:	mov	r0, r9
   1afec:	bl	1a350 <__assert_fail@plt+0x8408>
   1aff0:	ldr	r2, [r5, #24]
   1aff4:	and	r2, r2, #63	; 0x3f
   1aff8:	str	r2, [r5, #24]
   1affc:	add	r1, r7, r8
   1b000:	bic	r1, r1, #63	; 0x3f
   1b004:	add	r1, r9, r1
   1b008:	mov	r0, r9
   1b00c:	bl	11ac8 <memcpy@plt>
   1b010:	b	1afd4 <__assert_fail@plt+0x908c>
   1b014:	bic	r7, r6, #63	; 0x3f
   1b018:	mov	r2, r5
   1b01c:	mov	r1, r7
   1b020:	mov	r0, r4
   1b024:	bl	1a350 <__assert_fail@plt+0x8408>
   1b028:	add	r4, r4, r7
   1b02c:	and	r6, r6, #63	; 0x3f
   1b030:	b	1af7c <__assert_fail@plt+0x9034>
   1b034:	ldr	r7, [r5, #24]
   1b038:	add	r8, r5, #28
   1b03c:	mov	r2, r6
   1b040:	mov	r1, r4
   1b044:	add	r0, r8, r7
   1b048:	bl	11ac8 <memcpy@plt>
   1b04c:	add	r6, r7, r6
   1b050:	cmp	r6, #63	; 0x3f
   1b054:	bhi	1b060 <__assert_fail@plt+0x9118>
   1b058:	str	r6, [r5, #24]
   1b05c:	b	1af84 <__assert_fail@plt+0x903c>
   1b060:	mov	r2, r5
   1b064:	mov	r1, #64	; 0x40
   1b068:	mov	r0, r8
   1b06c:	bl	1a350 <__assert_fail@plt+0x8408>
   1b070:	sub	r6, r6, #64	; 0x40
   1b074:	mov	r2, r6
   1b078:	add	r1, r5, #92	; 0x5c
   1b07c:	mov	r0, r8
   1b080:	bl	11ac8 <memcpy@plt>
   1b084:	b	1b058 <__assert_fail@plt+0x9110>
   1b088:	strd	r4, [sp, #-16]!
   1b08c:	str	r6, [sp, #8]
   1b090:	str	lr, [sp, #12]
   1b094:	sub	sp, sp, #160	; 0xa0
   1b098:	mov	r5, r0
   1b09c:	mov	r6, r1
   1b0a0:	mov	r4, r2
   1b0a4:	add	r0, sp, #4
   1b0a8:	bl	1a2e4 <__assert_fail@plt+0x839c>
   1b0ac:	add	r2, sp, #4
   1b0b0:	mov	r1, r6
   1b0b4:	mov	r0, r5
   1b0b8:	bl	1aeb8 <__assert_fail@plt+0x8f70>
   1b0bc:	mov	r1, r4
   1b0c0:	add	r0, sp, #4
   1b0c4:	bl	1ae04 <__assert_fail@plt+0x8ebc>
   1b0c8:	add	sp, sp, #160	; 0xa0
   1b0cc:	ldrd	r4, [sp]
   1b0d0:	ldr	r6, [sp, #8]
   1b0d4:	add	sp, sp, #12
   1b0d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b0dc:	strd	r4, [sp, #-12]!
   1b0e0:	str	lr, [sp, #8]
   1b0e4:	sub	sp, sp, #20
   1b0e8:	ldr	r1, [sp, #40]	; 0x28
   1b0ec:	str	r1, [sp, #8]
   1b0f0:	ldrd	r4, [sp, #32]
   1b0f4:	strd	r4, [sp]
   1b0f8:	bl	11a44 <posix_fadvise64@plt>
   1b0fc:	add	sp, sp, #20
   1b100:	ldrd	r4, [sp]
   1b104:	add	sp, sp, #8
   1b108:	pop	{pc}		; (ldr pc, [sp], #4)
   1b10c:	cmp	r0, #0
   1b110:	bxeq	lr
   1b114:	str	r4, [sp, #-8]!
   1b118:	str	lr, [sp, #4]
   1b11c:	sub	sp, sp, #16
   1b120:	mov	r4, r1
   1b124:	bl	11dc8 <fileno@plt>
   1b128:	str	r4, [sp, #8]
   1b12c:	mov	r2, #0
   1b130:	mov	r3, #0
   1b134:	strd	r2, [sp]
   1b138:	bl	11a44 <posix_fadvise64@plt>
   1b13c:	add	sp, sp, #16
   1b140:	ldr	r4, [sp]
   1b144:	add	sp, sp, #4
   1b148:	pop	{pc}		; (ldr pc, [sp], #4)
   1b14c:	strd	r4, [sp, #-16]!
   1b150:	str	r6, [sp, #8]
   1b154:	str	lr, [sp, #12]
   1b158:	sub	sp, sp, #8
   1b15c:	mov	r4, r0
   1b160:	bl	11dc8 <fileno@plt>
   1b164:	cmp	r0, #0
   1b168:	blt	1b1e0 <__assert_fail@plt+0x9298>
   1b16c:	mov	r0, r4
   1b170:	bl	11cfc <__freading@plt>
   1b174:	cmp	r0, #0
   1b178:	beq	1b1ac <__assert_fail@plt+0x9264>
   1b17c:	mov	r0, r4
   1b180:	bl	11dc8 <fileno@plt>
   1b184:	mov	r3, #1
   1b188:	str	r3, [sp]
   1b18c:	mov	r2, #0
   1b190:	mov	r3, #0
   1b194:	bl	11c24 <lseek64@plt>
   1b198:	mvn	r2, #0
   1b19c:	mvn	r3, #0
   1b1a0:	cmp	r1, r3
   1b1a4:	cmpeq	r0, r2
   1b1a8:	beq	1b1ec <__assert_fail@plt+0x92a4>
   1b1ac:	mov	r0, r4
   1b1b0:	bl	1b208 <__assert_fail@plt+0x92c0>
   1b1b4:	cmp	r0, #0
   1b1b8:	beq	1b1ec <__assert_fail@plt+0x92a4>
   1b1bc:	bl	11d74 <__errno_location@plt>
   1b1c0:	mov	r5, r0
   1b1c4:	ldr	r6, [r0]
   1b1c8:	mov	r0, r4
   1b1cc:	bl	11dec <fclose@plt>
   1b1d0:	cmp	r6, #0
   1b1d4:	strne	r6, [r5]
   1b1d8:	mvnne	r0, #0
   1b1dc:	b	1b1f4 <__assert_fail@plt+0x92ac>
   1b1e0:	mov	r0, r4
   1b1e4:	bl	11dec <fclose@plt>
   1b1e8:	b	1b1f4 <__assert_fail@plt+0x92ac>
   1b1ec:	mov	r0, r4
   1b1f0:	bl	11dec <fclose@plt>
   1b1f4:	add	sp, sp, #8
   1b1f8:	ldrd	r4, [sp]
   1b1fc:	ldr	r6, [sp, #8]
   1b200:	add	sp, sp, #12
   1b204:	pop	{pc}		; (ldr pc, [sp], #4)
   1b208:	str	r4, [sp, #-8]!
   1b20c:	str	lr, [sp, #4]
   1b210:	sub	sp, sp, #8
   1b214:	subs	r4, r0, #0
   1b218:	beq	1b22c <__assert_fail@plt+0x92e4>
   1b21c:	mov	r0, r4
   1b220:	bl	11cfc <__freading@plt>
   1b224:	cmp	r0, #0
   1b228:	bne	1b244 <__assert_fail@plt+0x92fc>
   1b22c:	mov	r0, r4
   1b230:	bl	11a68 <fflush@plt>
   1b234:	add	sp, sp, #8
   1b238:	ldr	r4, [sp]
   1b23c:	add	sp, sp, #4
   1b240:	pop	{pc}		; (ldr pc, [sp], #4)
   1b244:	ldr	r3, [r4]
   1b248:	tst	r3, #256	; 0x100
   1b24c:	bne	1b25c <__assert_fail@plt+0x9314>
   1b250:	mov	r0, r4
   1b254:	bl	11a68 <fflush@plt>
   1b258:	b	1b234 <__assert_fail@plt+0x92ec>
   1b25c:	mov	r3, #1
   1b260:	str	r3, [sp]
   1b264:	mov	r2, #0
   1b268:	mov	r3, #0
   1b26c:	mov	r0, r4
   1b270:	bl	1b7d8 <__assert_fail@plt+0x9890>
   1b274:	b	1b250 <__assert_fail@plt+0x9308>
   1b278:	ldr	r2, [r0]
   1b27c:	ldrb	r3, [r2]
   1b280:	cmp	r3, #0
   1b284:	beq	1b354 <__assert_fail@plt+0x940c>
   1b288:	strd	r4, [sp, #-12]!
   1b28c:	str	lr, [sp, #8]
   1b290:	mov	lr, r0
   1b294:	mov	r1, #0
   1b298:	mov	r0, r1
   1b29c:	mov	r5, #1
   1b2a0:	mov	r4, r1
   1b2a4:	b	1b2ec <__assert_fail@plt+0x93a4>
   1b2a8:	cmp	r3, #46	; 0x2e
   1b2ac:	beq	1b32c <__assert_fail@plt+0x93e4>
   1b2b0:	cmp	r3, #90	; 0x5a
   1b2b4:	bhi	1b340 <__assert_fail@plt+0x93f8>
   1b2b8:	cmp	r3, #65	; 0x41
   1b2bc:	bcs	1b2d8 <__assert_fail@plt+0x9390>
   1b2c0:	sub	ip, r3, #48	; 0x30
   1b2c4:	uxtb	ip, ip
   1b2c8:	cmp	ip, #9
   1b2cc:	bls	1b2d8 <__assert_fail@plt+0x9390>
   1b2d0:	cmp	r3, #126	; 0x7e
   1b2d4:	movne	r0, #0
   1b2d8:	add	r2, r2, #1
   1b2dc:	str	r2, [lr]
   1b2e0:	ldrb	r3, [r2]
   1b2e4:	cmp	r3, #0
   1b2e8:	beq	1b35c <__assert_fail@plt+0x9414>
   1b2ec:	cmp	r1, #0
   1b2f0:	beq	1b2a8 <__assert_fail@plt+0x9360>
   1b2f4:	cmp	r3, #65	; 0x41
   1b2f8:	bcc	1b31c <__assert_fail@plt+0x93d4>
   1b2fc:	cmp	r3, #90	; 0x5a
   1b300:	movls	r1, r4
   1b304:	bls	1b2d8 <__assert_fail@plt+0x9390>
   1b308:	sub	r1, r3, #97	; 0x61
   1b30c:	uxtb	r1, r1
   1b310:	cmp	r1, #25
   1b314:	movls	r1, r4
   1b318:	bls	1b2d8 <__assert_fail@plt+0x9390>
   1b31c:	cmp	r3, #126	; 0x7e
   1b320:	mov	r1, r4
   1b324:	movne	r0, r4
   1b328:	b	1b2d8 <__assert_fail@plt+0x9390>
   1b32c:	cmp	r0, #0
   1b330:	moveq	r0, r2
   1b334:	moveq	r1, r5
   1b338:	movne	r1, r5
   1b33c:	b	1b2d8 <__assert_fail@plt+0x9390>
   1b340:	sub	ip, r3, #97	; 0x61
   1b344:	uxtb	ip, ip
   1b348:	cmp	ip, #25
   1b34c:	bhi	1b2d0 <__assert_fail@plt+0x9388>
   1b350:	b	1b2d8 <__assert_fail@plt+0x9390>
   1b354:	mov	r0, #0
   1b358:	bx	lr
   1b35c:	ldrd	r4, [sp]
   1b360:	add	sp, sp, #8
   1b364:	pop	{pc}		; (ldr pc, [sp], #4)
   1b368:	mov	r3, r0
   1b36c:	sub	r2, r0, #48	; 0x30
   1b370:	cmp	r2, #9
   1b374:	bls	1b3a8 <__assert_fail@plt+0x9460>
   1b378:	cmp	r0, #65	; 0x41
   1b37c:	bcc	1b398 <__assert_fail@plt+0x9450>
   1b380:	cmp	r0, #90	; 0x5a
   1b384:	bls	1b3b4 <__assert_fail@plt+0x946c>
   1b388:	sub	r2, r0, #97	; 0x61
   1b38c:	uxtb	r2, r2
   1b390:	cmp	r2, #25
   1b394:	bls	1b3b4 <__assert_fail@plt+0x946c>
   1b398:	cmp	r3, #126	; 0x7e
   1b39c:	beq	1b3b0 <__assert_fail@plt+0x9468>
   1b3a0:	add	r0, r3, #256	; 0x100
   1b3a4:	bx	lr
   1b3a8:	mov	r0, #0
   1b3ac:	bx	lr
   1b3b0:	mvn	r0, #0
   1b3b4:	bx	lr
   1b3b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b3bc:	strd	r6, [sp, #8]
   1b3c0:	strd	r8, [sp, #16]
   1b3c4:	strd	sl, [sp, #24]
   1b3c8:	str	lr, [sp, #32]
   1b3cc:	sub	sp, sp, #28
   1b3d0:	mov	r4, r0
   1b3d4:	mov	r5, r1
   1b3d8:	bl	11a2c <strcmp@plt>
   1b3dc:	subs	r7, r0, #0
   1b3e0:	beq	1b758 <__assert_fail@plt+0x9810>
   1b3e4:	ldrb	r8, [r4]
   1b3e8:	cmp	r8, #0
   1b3ec:	beq	1b6f8 <__assert_fail@plt+0x97b0>
   1b3f0:	ldrb	r6, [r5]
   1b3f4:	cmp	r6, #0
   1b3f8:	moveq	r7, #1
   1b3fc:	beq	1b758 <__assert_fail@plt+0x9810>
   1b400:	mov	r1, r4
   1b404:	movw	r0, #21224	; 0x52e8
   1b408:	movt	r0, #2
   1b40c:	bl	11a2c <strcmp@plt>
   1b410:	cmp	r0, #0
   1b414:	beq	1b700 <__assert_fail@plt+0x97b8>
   1b418:	mov	r1, r5
   1b41c:	movw	r0, #21224	; 0x52e8
   1b420:	movt	r0, #2
   1b424:	bl	11a2c <strcmp@plt>
   1b428:	cmp	r0, #0
   1b42c:	moveq	r7, #1
   1b430:	beq	1b758 <__assert_fail@plt+0x9810>
   1b434:	mov	r1, r4
   1b438:	movw	r0, #21228	; 0x52ec
   1b43c:	movt	r0, #2
   1b440:	bl	11a2c <strcmp@plt>
   1b444:	cmp	r0, #0
   1b448:	beq	1b708 <__assert_fail@plt+0x97c0>
   1b44c:	mov	r1, r5
   1b450:	movw	r0, #21228	; 0x52ec
   1b454:	movt	r0, #2
   1b458:	bl	11a2c <strcmp@plt>
   1b45c:	cmp	r0, #0
   1b460:	moveq	r7, #1
   1b464:	beq	1b758 <__assert_fail@plt+0x9810>
   1b468:	cmp	r8, #46	; 0x2e
   1b46c:	movne	r3, #0
   1b470:	moveq	r3, #1
   1b474:	cmp	r6, #46	; 0x2e
   1b478:	moveq	r2, #0
   1b47c:	andne	r2, r3, #1
   1b480:	cmp	r2, #0
   1b484:	bne	1b710 <__assert_fail@plt+0x97c8>
   1b488:	cmp	r6, #46	; 0x2e
   1b48c:	movne	r6, #0
   1b490:	moveq	r6, #1
   1b494:	cmp	r8, #46	; 0x2e
   1b498:	moveq	r8, #0
   1b49c:	andne	r8, r6, #1
   1b4a0:	cmp	r8, #0
   1b4a4:	movne	r7, #1
   1b4a8:	bne	1b758 <__assert_fail@plt+0x9810>
   1b4ac:	tst	r3, r6
   1b4b0:	addne	r4, r4, #1
   1b4b4:	addne	r5, r5, #1
   1b4b8:	str	r4, [sp, #20]
   1b4bc:	str	r5, [sp, #16]
   1b4c0:	add	r0, sp, #20
   1b4c4:	bl	1b278 <__assert_fail@plt+0x9330>
   1b4c8:	mov	r6, r0
   1b4cc:	add	r0, sp, #16
   1b4d0:	bl	1b278 <__assert_fail@plt+0x9330>
   1b4d4:	cmp	r6, #0
   1b4d8:	ldreq	r3, [sp, #20]
   1b4dc:	movne	r3, r6
   1b4e0:	sub	fp, r3, r4
   1b4e4:	cmp	r0, #0
   1b4e8:	ldreq	r3, [sp, #16]
   1b4ec:	movne	r3, r0
   1b4f0:	sub	r3, r3, r5
   1b4f4:	str	r3, [sp]
   1b4f8:	orr	r6, r6, r0
   1b4fc:	cmp	fp, r3
   1b500:	movne	r3, #0
   1b504:	moveq	r3, #1
   1b508:	cmp	r6, #0
   1b50c:	moveq	r3, #0
   1b510:	cmp	r3, #0
   1b514:	bne	1b554 <__assert_fail@plt+0x960c>
   1b518:	mov	r6, #0
   1b51c:	mov	r2, r6
   1b520:	str	r6, [sp, #4]
   1b524:	rsb	r9, r4, #1
   1b528:	rsb	sl, r5, #1
   1b52c:	str	r7, [sp, #12]
   1b530:	ldr	r3, [sp]
   1b534:	cmp	r3, r6
   1b538:	cmpls	fp, r2
   1b53c:	bls	1b6f0 <__assert_fail@plt+0x97a8>
   1b540:	mov	r8, r6
   1b544:	mov	r7, r2
   1b548:	sub	r3, r6, r2
   1b54c:	str	r3, [sp, #8]
   1b550:	b	1b5b4 <__assert_fail@plt+0x966c>
   1b554:	mov	r2, fp
   1b558:	mov	r1, r5
   1b55c:	mov	r0, r4
   1b560:	bl	11f0c <strncmp@plt>
   1b564:	cmp	r0, #0
   1b568:	bne	1b518 <__assert_fail@plt+0x95d0>
   1b56c:	ldr	r3, [sp, #20]
   1b570:	sub	fp, r3, r4
   1b574:	ldr	r3, [sp, #16]
   1b578:	sub	r3, r3, r5
   1b57c:	str	r3, [sp]
   1b580:	b	1b518 <__assert_fail@plt+0x95d0>
   1b584:	ldrb	r0, [r4, r7]
   1b588:	bl	1b368 <__assert_fail@plt+0x9420>
   1b58c:	mov	r6, r0
   1b590:	ldr	r3, [sp]
   1b594:	cmp	r3, r8
   1b598:	beq	1b600 <__assert_fail@plt+0x96b8>
   1b59c:	ldrb	r0, [r5, r8]
   1b5a0:	bl	1b368 <__assert_fail@plt+0x9420>
   1b5a4:	cmp	r0, r6
   1b5a8:	bne	1b608 <__assert_fail@plt+0x96c0>
   1b5ac:	add	r7, r7, #1
   1b5b0:	add	r8, r8, #1
   1b5b4:	cmp	fp, r7
   1b5b8:	bls	1b5cc <__assert_fail@plt+0x9684>
   1b5bc:	ldrb	r3, [r4, r7]
   1b5c0:	sub	r3, r3, #48	; 0x30
   1b5c4:	cmp	r3, #9
   1b5c8:	bhi	1b584 <__assert_fail@plt+0x963c>
   1b5cc:	ldr	r3, [sp]
   1b5d0:	cmp	r3, r8
   1b5d4:	bls	1b610 <__assert_fail@plt+0x96c8>
   1b5d8:	ldrb	r3, [r5, r8]
   1b5dc:	sub	r3, r3, #48	; 0x30
   1b5e0:	cmp	r3, #9
   1b5e4:	bls	1b610 <__assert_fail@plt+0x96c8>
   1b5e8:	cmp	fp, r7
   1b5ec:	beq	1b728 <__assert_fail@plt+0x97e0>
   1b5f0:	ldrb	r0, [r4, r7]
   1b5f4:	bl	1b368 <__assert_fail@plt+0x9420>
   1b5f8:	mov	r6, r0
   1b5fc:	b	1b59c <__assert_fail@plt+0x9654>
   1b600:	ldr	r0, [sp, #4]
   1b604:	b	1b5a4 <__assert_fail@plt+0x965c>
   1b608:	sub	r7, r6, r0
   1b60c:	b	1b758 <__assert_fail@plt+0x9810>
   1b610:	add	r3, r4, r7
   1b614:	ldrb	r2, [r4, r7]
   1b618:	cmp	r2, #48	; 0x30
   1b61c:	movne	r2, r7
   1b620:	bne	1b634 <__assert_fail@plt+0x96ec>
   1b624:	add	r2, r9, r3
   1b628:	ldrb	r1, [r3, #1]!
   1b62c:	cmp	r1, #48	; 0x30
   1b630:	beq	1b624 <__assert_fail@plt+0x96dc>
   1b634:	add	r3, r5, r8
   1b638:	ldrb	r1, [r5, r8]
   1b63c:	cmp	r1, #48	; 0x30
   1b640:	bne	1b6c8 <__assert_fail@plt+0x9780>
   1b644:	add	r6, sl, r3
   1b648:	ldrb	r1, [r3, #1]!
   1b64c:	cmp	r1, #48	; 0x30
   1b650:	beq	1b644 <__assert_fail@plt+0x96fc>
   1b654:	add	r0, r4, r2
   1b658:	ldrb	r1, [r4, r2]
   1b65c:	sub	r3, r1, #48	; 0x30
   1b660:	cmp	r3, #9
   1b664:	bhi	1b744 <__assert_fail@plt+0x97fc>
   1b668:	add	ip, r5, r6
   1b66c:	ldrb	r3, [r5, r6]
   1b670:	sub	lr, r3, #48	; 0x30
   1b674:	cmp	lr, #9
   1b678:	bhi	1b718 <__assert_fail@plt+0x97d0>
   1b67c:	mov	r8, #0
   1b680:	add	r2, sl, r2
   1b684:	sub	r6, r2, r6
   1b688:	cmp	r8, #0
   1b68c:	subeq	r8, r1, r3
   1b690:	add	r2, r6, ip
   1b694:	add	r3, sl, ip
   1b698:	ldrb	r1, [r0, #1]!
   1b69c:	sub	lr, r1, #48	; 0x30
   1b6a0:	cmp	lr, #9
   1b6a4:	bls	1b6d0 <__assert_fail@plt+0x9788>
   1b6a8:	ldrb	r1, [r5, r3]
   1b6ac:	sub	r1, r1, #48	; 0x30
   1b6b0:	cmp	r1, #9
   1b6b4:	bls	1b720 <__assert_fail@plt+0x97d8>
   1b6b8:	cmp	r8, #0
   1b6bc:	beq	1b6e8 <__assert_fail@plt+0x97a0>
   1b6c0:	mov	r7, r8
   1b6c4:	b	1b758 <__assert_fail@plt+0x9810>
   1b6c8:	mov	r6, r8
   1b6cc:	b	1b654 <__assert_fail@plt+0x970c>
   1b6d0:	ldrb	r3, [ip, #1]!
   1b6d4:	sub	r2, r3, #48	; 0x30
   1b6d8:	cmp	r2, #9
   1b6dc:	bls	1b688 <__assert_fail@plt+0x9740>
   1b6e0:	mov	r7, #1
   1b6e4:	b	1b758 <__assert_fail@plt+0x9810>
   1b6e8:	mov	r6, r3
   1b6ec:	b	1b530 <__assert_fail@plt+0x95e8>
   1b6f0:	ldr	r7, [sp, #12]
   1b6f4:	b	1b758 <__assert_fail@plt+0x9810>
   1b6f8:	mvn	r7, #0
   1b6fc:	b	1b758 <__assert_fail@plt+0x9810>
   1b700:	mvn	r7, #0
   1b704:	b	1b758 <__assert_fail@plt+0x9810>
   1b708:	mvn	r7, #0
   1b70c:	b	1b758 <__assert_fail@plt+0x9810>
   1b710:	mvn	r7, #0
   1b714:	b	1b758 <__assert_fail@plt+0x9810>
   1b718:	mov	r7, #1
   1b71c:	b	1b758 <__assert_fail@plt+0x9810>
   1b720:	mvn	r7, #0
   1b724:	b	1b758 <__assert_fail@plt+0x9810>
   1b728:	ldr	r3, [sp, #8]
   1b72c:	add	r3, r7, r3
   1b730:	ldr	r2, [sp]
   1b734:	cmp	r2, r3
   1b738:	beq	1b5ac <__assert_fail@plt+0x9664>
   1b73c:	ldr	r6, [sp, #4]
   1b740:	b	1b59c <__assert_fail@plt+0x9654>
   1b744:	ldrb	r3, [r5, r6]
   1b748:	sub	r3, r3, #48	; 0x30
   1b74c:	cmp	r3, #9
   1b750:	bhi	1b530 <__assert_fail@plt+0x95e8>
   1b754:	mvn	r7, #0
   1b758:	mov	r0, r7
   1b75c:	add	sp, sp, #28
   1b760:	ldrd	r4, [sp]
   1b764:	ldrd	r6, [sp, #8]
   1b768:	ldrd	r8, [sp, #16]
   1b76c:	ldrd	sl, [sp, #24]
   1b770:	add	sp, sp, #32
   1b774:	pop	{pc}		; (ldr pc, [sp], #4)
   1b778:	strd	r4, [sp, #-12]!
   1b77c:	str	lr, [sp, #8]
   1b780:	sub	sp, sp, #12
   1b784:	mov	r5, r0
   1b788:	bl	11d74 <__errno_location@plt>
   1b78c:	mov	r4, r0
   1b790:	ldr	r3, [r0]
   1b794:	str	r3, [sp]
   1b798:	str	r3, [sp, #4]
   1b79c:	mov	r3, #0
   1b7a0:	str	r3, [r0]
   1b7a4:	mov	r0, r5
   1b7a8:	bl	11a8c <free@plt>
   1b7ac:	ldr	r3, [r4]
   1b7b0:	clz	r3, r3
   1b7b4:	lsr	r3, r3, #5
   1b7b8:	add	r2, sp, #8
   1b7bc:	add	r3, r2, r3, lsl #2
   1b7c0:	ldr	r3, [r3, #-8]
   1b7c4:	str	r3, [r4]
   1b7c8:	add	sp, sp, #12
   1b7cc:	ldrd	r4, [sp]
   1b7d0:	add	sp, sp, #8
   1b7d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b7d8:	str	r4, [sp, #-16]!
   1b7dc:	strd	r6, [sp, #4]
   1b7e0:	str	lr, [sp, #12]
   1b7e4:	sub	sp, sp, #8
   1b7e8:	mov	r4, r0
   1b7ec:	mov	r6, r2
   1b7f0:	mov	r7, r3
   1b7f4:	ldr	r2, [r0, #8]
   1b7f8:	ldr	r3, [r0, #4]
   1b7fc:	cmp	r2, r3
   1b800:	beq	1b830 <__assert_fail@plt+0x98e8>
   1b804:	ldr	r3, [sp, #24]
   1b808:	str	r3, [sp]
   1b80c:	mov	r2, r6
   1b810:	mov	r3, r7
   1b814:	mov	r0, r4
   1b818:	bl	11e04 <fseeko64@plt>
   1b81c:	add	sp, sp, #8
   1b820:	ldr	r4, [sp]
   1b824:	ldrd	r6, [sp, #4]
   1b828:	add	sp, sp, #12
   1b82c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b830:	ldr	r2, [r0, #20]
   1b834:	ldr	r3, [r0, #16]
   1b838:	cmp	r2, r3
   1b83c:	bne	1b804 <__assert_fail@plt+0x98bc>
   1b840:	ldr	r3, [r0, #36]	; 0x24
   1b844:	cmp	r3, #0
   1b848:	bne	1b804 <__assert_fail@plt+0x98bc>
   1b84c:	bl	11dc8 <fileno@plt>
   1b850:	ldr	r3, [sp, #24]
   1b854:	str	r3, [sp]
   1b858:	mov	r2, r6
   1b85c:	mov	r3, r7
   1b860:	bl	11c24 <lseek64@plt>
   1b864:	mvn	r2, #0
   1b868:	mvn	r3, #0
   1b86c:	cmp	r1, r3
   1b870:	cmpeq	r0, r2
   1b874:	beq	1b890 <__assert_fail@plt+0x9948>
   1b878:	ldr	r3, [r4]
   1b87c:	bic	r3, r3, #16
   1b880:	str	r3, [r4]
   1b884:	strd	r0, [r4, #80]	; 0x50
   1b888:	mov	r0, #0
   1b88c:	b	1b81c <__assert_fail@plt+0x98d4>
   1b890:	mvn	r0, #0
   1b894:	b	1b81c <__assert_fail@plt+0x98d4>
   1b898:	push	{lr}		; (str lr, [sp, #-4]!)
   1b89c:	sub	sp, sp, #268	; 0x10c
   1b8a0:	movw	r2, #257	; 0x101
   1b8a4:	add	r1, sp, #4
   1b8a8:	bl	20414 <__assert_fail@plt+0xe4cc>
   1b8ac:	cmp	r0, #0
   1b8b0:	movne	r0, #0
   1b8b4:	bne	1b8ec <__assert_fail@plt+0x99a4>
   1b8b8:	movw	r1, #21232	; 0x52f0
   1b8bc:	movt	r1, #2
   1b8c0:	add	r0, sp, #4
   1b8c4:	bl	11a2c <strcmp@plt>
   1b8c8:	cmp	r0, #0
   1b8cc:	beq	1b8e8 <__assert_fail@plt+0x99a0>
   1b8d0:	movw	r1, #21236	; 0x52f4
   1b8d4:	movt	r1, #2
   1b8d8:	add	r0, sp, #4
   1b8dc:	bl	11a2c <strcmp@plt>
   1b8e0:	adds	r0, r0, #0
   1b8e4:	movne	r0, #1
   1b8e8:	and	r0, r0, #1
   1b8ec:	add	sp, sp, #268	; 0x10c
   1b8f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b8f4:	andeq	r0, r0, r0
   1b8f8:	ror	r0, r0, #3
   1b8fc:	udiv	r3, r0, r1
   1b900:	mls	r0, r3, r1, r0
   1b904:	bx	lr
   1b908:	cmp	r1, r0
   1b90c:	movne	r0, #0
   1b910:	moveq	r0, #1
   1b914:	bx	lr
   1b918:	ldr	r2, [r0, #20]
   1b91c:	movw	r3, #21244	; 0x52fc
   1b920:	movt	r3, #2
   1b924:	cmp	r2, r3
   1b928:	beq	1b9c4 <__assert_fail@plt+0x9a7c>
   1b92c:	vldr	s15, [r2, #8]
   1b930:	vldr	s14, [pc, #148]	; 1b9cc <__assert_fail@plt+0x9a84>
   1b934:	vcmpe.f32	s15, s14
   1b938:	vmrs	APSR_nzcv, fpscr
   1b93c:	ble	1b99c <__assert_fail@plt+0x9a54>
   1b940:	vldr	s14, [pc, #136]	; 1b9d0 <__assert_fail@plt+0x9a88>
   1b944:	vcmpe.f32	s15, s14
   1b948:	vmrs	APSR_nzcv, fpscr
   1b94c:	bpl	1b99c <__assert_fail@plt+0x9a54>
   1b950:	vldr	s13, [r2, #12]
   1b954:	vldr	s14, [pc, #120]	; 1b9d4 <__assert_fail@plt+0x9a8c>
   1b958:	vcmpe.f32	s13, s14
   1b95c:	vmrs	APSR_nzcv, fpscr
   1b960:	ble	1b99c <__assert_fail@plt+0x9a54>
   1b964:	vldr	s14, [r2]
   1b968:	vcmpe.f32	s14, #0.0
   1b96c:	vmrs	APSR_nzcv, fpscr
   1b970:	blt	1b99c <__assert_fail@plt+0x9a54>
   1b974:	vldr	s13, [pc, #80]	; 1b9cc <__assert_fail@plt+0x9a84>
   1b978:	vadd.f32	s14, s14, s13
   1b97c:	vldr	s13, [r2, #4]
   1b980:	vcmpe.f32	s14, s13
   1b984:	vmrs	APSR_nzcv, fpscr
   1b988:	bpl	1b99c <__assert_fail@plt+0x9a54>
   1b98c:	vldr	s12, [pc, #68]	; 1b9d8 <__assert_fail@plt+0x9a90>
   1b990:	vcmpe.f32	s13, s12
   1b994:	vmrs	APSR_nzcv, fpscr
   1b998:	bls	1b9b0 <__assert_fail@plt+0x9a68>
   1b99c:	movw	r3, #21244	; 0x52fc
   1b9a0:	movt	r3, #2
   1b9a4:	str	r3, [r0, #20]
   1b9a8:	mov	r0, #0
   1b9ac:	bx	lr
   1b9b0:	vcmpe.f32	s15, s14
   1b9b4:	vmrs	APSR_nzcv, fpscr
   1b9b8:	ble	1b99c <__assert_fail@plt+0x9a54>
   1b9bc:	mov	r0, #1
   1b9c0:	bx	lr
   1b9c4:	mov	r0, #1
   1b9c8:	bx	lr
   1b9cc:	stclcc	12, cr12, [ip, #820]	; 0x334
   1b9d0:	svccc	0x00666666
   1b9d4:	svccc	0x008ccccd
   1b9d8:	svccc	0x00800000
   1b9dc:	ldrb	r3, [r1, #16]
   1b9e0:	cmp	r3, #0
   1b9e4:	bne	1ba10 <__assert_fail@plt+0x9ac8>
   1b9e8:	vmov	s15, r0
   1b9ec:	vcvt.f32.u32	s15, s15
   1b9f0:	vldr	s13, [r1, #8]
   1b9f4:	vdiv.f32	s14, s15, s13
   1b9f8:	vldr	s15, [pc, #224]	; 1bae0 <__assert_fail@plt+0x9b98>
   1b9fc:	vcmpe.f32	s14, s15
   1ba00:	vmrs	APSR_nzcv, fpscr
   1ba04:	bge	1bad0 <__assert_fail@plt+0x9b88>
   1ba08:	vcvt.u32.f32	s15, s14
   1ba0c:	vmov	r0, s15
   1ba10:	cmp	r0, #10
   1ba14:	movcc	r0, #10
   1ba18:	orr	r0, r0, #1
   1ba1c:	cmn	r0, #1
   1ba20:	beq	1ba34 <__assert_fail@plt+0x9aec>
   1ba24:	push	{lr}		; (str lr, [sp, #-4]!)
   1ba28:	movw	lr, #43691	; 0xaaab
   1ba2c:	movt	lr, #43690	; 0xaaaa
   1ba30:	b	1ba5c <__assert_fail@plt+0x9b14>
   1ba34:	mov	r0, #0
   1ba38:	bx	lr
   1ba3c:	mov	r3, #3
   1ba40:	udiv	r2, r0, r3
   1ba44:	mls	r3, r3, r2, r0
   1ba48:	cmp	r3, #0
   1ba4c:	bne	1baac <__assert_fail@plt+0x9b64>
   1ba50:	add	r0, r0, #2
   1ba54:	cmn	r0, #1
   1ba58:	beq	1bad8 <__assert_fail@plt+0x9b90>
   1ba5c:	cmp	r0, #9
   1ba60:	bls	1ba3c <__assert_fail@plt+0x9af4>
   1ba64:	umull	r2, r3, lr, r0
   1ba68:	lsr	r3, r3, #1
   1ba6c:	add	r3, r3, r3, lsl #1
   1ba70:	cmp	r0, r3
   1ba74:	beq	1ba50 <__assert_fail@plt+0x9b08>
   1ba78:	mov	r1, #16
   1ba7c:	mov	r2, #9
   1ba80:	mov	r3, #3
   1ba84:	add	r2, r2, r1
   1ba88:	add	r3, r3, #2
   1ba8c:	cmp	r2, r0
   1ba90:	bcs	1ba40 <__assert_fail@plt+0x9af8>
   1ba94:	add	r1, r1, #8
   1ba98:	udiv	ip, r0, r3
   1ba9c:	mls	ip, r3, ip, r0
   1baa0:	cmp	ip, #0
   1baa4:	bne	1ba84 <__assert_fail@plt+0x9b3c>
   1baa8:	b	1ba50 <__assert_fail@plt+0x9b08>
   1baac:	lsl	r2, r0, #2
   1bab0:	lsr	r3, r0, #30
   1bab4:	adds	r3, r3, #0
   1bab8:	movne	r3, #1
   1babc:	cmp	r2, #0
   1bac0:	movlt	r3, #1
   1bac4:	cmp	r3, #0
   1bac8:	movne	r0, #0
   1bacc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bad0:	mov	r0, #0
   1bad4:	bx	lr
   1bad8:	mov	r0, #0
   1badc:	b	1bacc <__assert_fail@plt+0x9b84>
   1bae0:	svcmi	0x00800000
   1bae4:	str	r4, [sp, #-8]!
   1bae8:	str	lr, [sp, #4]
   1baec:	mov	r4, r0
   1baf0:	mov	r0, r1
   1baf4:	ldr	r3, [r4, #24]
   1baf8:	ldr	r1, [r4, #8]
   1bafc:	blx	r3
   1bb00:	ldr	r3, [r4, #8]
   1bb04:	cmp	r3, r0
   1bb08:	bls	1bb20 <__assert_fail@plt+0x9bd8>
   1bb0c:	ldr	r3, [r4]
   1bb10:	add	r0, r3, r0, lsl #3
   1bb14:	ldr	r4, [sp]
   1bb18:	add	sp, sp, #4
   1bb1c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb20:	bl	11f24 <abort@plt>
   1bb24:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bb28:	strd	r6, [sp, #8]
   1bb2c:	strd	r8, [sp, #16]
   1bb30:	strd	sl, [sp, #24]
   1bb34:	str	lr, [sp, #32]
   1bb38:	sub	sp, sp, #4
   1bb3c:	ldr	r7, [r1]
   1bb40:	ldr	r3, [r1, #4]
   1bb44:	cmp	r7, r3
   1bb48:	bcs	1bca0 <__assert_fail@plt+0x9d58>
   1bb4c:	mov	fp, r2
   1bb50:	mov	r9, r1
   1bb54:	mov	r6, r0
   1bb58:	add	r7, r7, #8
   1bb5c:	mov	sl, #0
   1bb60:	b	1bc34 <__assert_fail@plt+0x9cec>
   1bb64:	str	r5, [r0]
   1bb68:	ldr	r2, [r6, #12]
   1bb6c:	add	r2, r2, #1
   1bb70:	str	r2, [r6, #12]
   1bb74:	str	sl, [r4]
   1bb78:	ldr	r2, [r6, #36]	; 0x24
   1bb7c:	str	r2, [r4, #4]
   1bb80:	str	r4, [r6, #36]	; 0x24
   1bb84:	mov	r4, r3
   1bb88:	cmp	r3, #0
   1bb8c:	beq	1bbc0 <__assert_fail@plt+0x9c78>
   1bb90:	ldr	r5, [r4]
   1bb94:	mov	r1, r5
   1bb98:	mov	r0, r6
   1bb9c:	bl	1bae4 <__assert_fail@plt+0x9b9c>
   1bba0:	ldr	r3, [r4, #4]
   1bba4:	ldr	r2, [r0]
   1bba8:	cmp	r2, #0
   1bbac:	beq	1bb64 <__assert_fail@plt+0x9c1c>
   1bbb0:	ldr	r2, [r0, #4]
   1bbb4:	str	r2, [r4, #4]
   1bbb8:	str	r4, [r0, #4]
   1bbbc:	b	1bb84 <__assert_fail@plt+0x9c3c>
   1bbc0:	ldr	r4, [r8, #-8]
   1bbc4:	str	sl, [r8, #-4]
   1bbc8:	cmp	fp, #0
   1bbcc:	bne	1bc20 <__assert_fail@plt+0x9cd8>
   1bbd0:	mov	r1, r4
   1bbd4:	mov	r0, r6
   1bbd8:	bl	1bae4 <__assert_fail@plt+0x9b9c>
   1bbdc:	mov	r5, r0
   1bbe0:	ldr	r3, [r0]
   1bbe4:	cmp	r3, #0
   1bbe8:	beq	1bc6c <__assert_fail@plt+0x9d24>
   1bbec:	ldr	r0, [r6, #36]	; 0x24
   1bbf0:	cmp	r0, #0
   1bbf4:	beq	1bc54 <__assert_fail@plt+0x9d0c>
   1bbf8:	ldr	r3, [r0, #4]
   1bbfc:	str	r3, [r6, #36]	; 0x24
   1bc00:	str	r4, [r0]
   1bc04:	ldr	r3, [r5, #4]
   1bc08:	str	r3, [r0, #4]
   1bc0c:	str	r0, [r5, #4]
   1bc10:	str	sl, [r8, #-8]
   1bc14:	ldr	r3, [r9, #12]
   1bc18:	sub	r3, r3, #1
   1bc1c:	str	r3, [r9, #12]
   1bc20:	add	r2, r7, #8
   1bc24:	ldr	r3, [r9, #4]
   1bc28:	cmp	r3, r7
   1bc2c:	bls	1bc80 <__assert_fail@plt+0x9d38>
   1bc30:	mov	r7, r2
   1bc34:	mov	r8, r7
   1bc38:	ldr	r3, [r7, #-8]
   1bc3c:	cmp	r3, #0
   1bc40:	beq	1bc20 <__assert_fail@plt+0x9cd8>
   1bc44:	ldr	r4, [r7, #-4]
   1bc48:	cmp	r4, #0
   1bc4c:	bne	1bb90 <__assert_fail@plt+0x9c48>
   1bc50:	b	1bbc0 <__assert_fail@plt+0x9c78>
   1bc54:	mov	r0, #8
   1bc58:	bl	21f58 <__assert_fail@plt+0x10010>
   1bc5c:	cmp	r0, #0
   1bc60:	bne	1bc00 <__assert_fail@plt+0x9cb8>
   1bc64:	mov	r0, fp
   1bc68:	b	1bc84 <__assert_fail@plt+0x9d3c>
   1bc6c:	str	r4, [r0]
   1bc70:	ldr	r3, [r6, #12]
   1bc74:	add	r3, r3, #1
   1bc78:	str	r3, [r6, #12]
   1bc7c:	b	1bc10 <__assert_fail@plt+0x9cc8>
   1bc80:	mov	r0, #1
   1bc84:	add	sp, sp, #4
   1bc88:	ldrd	r4, [sp]
   1bc8c:	ldrd	r6, [sp, #8]
   1bc90:	ldrd	r8, [sp, #16]
   1bc94:	ldrd	sl, [sp, #24]
   1bc98:	add	sp, sp, #32
   1bc9c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bca0:	mov	r0, #1
   1bca4:	b	1bc84 <__assert_fail@plt+0x9d3c>
   1bca8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1bcac:	strd	r6, [sp, #8]
   1bcb0:	str	r8, [sp, #16]
   1bcb4:	str	lr, [sp, #20]
   1bcb8:	mov	r6, r0
   1bcbc:	mov	r5, r1
   1bcc0:	mov	r7, r2
   1bcc4:	mov	r8, r3
   1bcc8:	bl	1bae4 <__assert_fail@plt+0x9b9c>
   1bccc:	mov	r4, r0
   1bcd0:	str	r0, [r7]
   1bcd4:	ldr	r0, [r0]
   1bcd8:	cmp	r0, #0
   1bcdc:	beq	1bd58 <__assert_fail@plt+0x9e10>
   1bce0:	cmp	r0, r5
   1bce4:	beq	1bd6c <__assert_fail@plt+0x9e24>
   1bce8:	ldr	r3, [r6, #28]
   1bcec:	mov	r1, r0
   1bcf0:	mov	r0, r5
   1bcf4:	blx	r3
   1bcf8:	cmp	r0, #0
   1bcfc:	bne	1bd6c <__assert_fail@plt+0x9e24>
   1bd00:	ldr	r0, [r4, #4]
   1bd04:	cmp	r0, #0
   1bd08:	beq	1bd58 <__assert_fail@plt+0x9e10>
   1bd0c:	ldr	r1, [r0]
   1bd10:	cmp	r5, r1
   1bd14:	beq	1bd48 <__assert_fail@plt+0x9e00>
   1bd18:	ldr	r3, [r6, #28]
   1bd1c:	mov	r0, r5
   1bd20:	blx	r3
   1bd24:	cmp	r0, #0
   1bd28:	bne	1bd48 <__assert_fail@plt+0x9e00>
   1bd2c:	ldr	r4, [r4, #4]
   1bd30:	ldr	r0, [r4, #4]
   1bd34:	cmp	r0, #0
   1bd38:	beq	1bd58 <__assert_fail@plt+0x9e10>
   1bd3c:	ldr	r1, [r0]
   1bd40:	cmp	r1, r5
   1bd44:	bne	1bd18 <__assert_fail@plt+0x9dd0>
   1bd48:	ldr	r3, [r4, #4]
   1bd4c:	ldr	r0, [r3]
   1bd50:	cmp	r8, #0
   1bd54:	bne	1bdac <__assert_fail@plt+0x9e64>
   1bd58:	ldrd	r4, [sp]
   1bd5c:	ldrd	r6, [sp, #8]
   1bd60:	ldr	r8, [sp, #16]
   1bd64:	add	sp, sp, #20
   1bd68:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd6c:	ldr	r0, [r4]
   1bd70:	cmp	r8, #0
   1bd74:	beq	1bd58 <__assert_fail@plt+0x9e10>
   1bd78:	ldr	r1, [r4, #4]
   1bd7c:	cmp	r1, #0
   1bd80:	moveq	r3, #0
   1bd84:	streq	r3, [r4]
   1bd88:	beq	1bd58 <__assert_fail@plt+0x9e10>
   1bd8c:	ldrd	r2, [r1]
   1bd90:	strd	r2, [r4]
   1bd94:	mov	r3, #0
   1bd98:	str	r3, [r1]
   1bd9c:	ldr	r3, [r6, #36]	; 0x24
   1bda0:	str	r3, [r1, #4]
   1bda4:	str	r1, [r6, #36]	; 0x24
   1bda8:	b	1bd58 <__assert_fail@plt+0x9e10>
   1bdac:	ldr	r2, [r3, #4]
   1bdb0:	str	r2, [r4, #4]
   1bdb4:	mov	r2, #0
   1bdb8:	str	r2, [r3]
   1bdbc:	ldr	r2, [r6, #36]	; 0x24
   1bdc0:	str	r2, [r3, #4]
   1bdc4:	str	r3, [r6, #36]	; 0x24
   1bdc8:	b	1bd58 <__assert_fail@plt+0x9e10>
   1bdcc:	ldr	r0, [r0, #8]
   1bdd0:	bx	lr
   1bdd4:	ldr	r0, [r0, #12]
   1bdd8:	bx	lr
   1bddc:	ldr	r0, [r0, #16]
   1bde0:	bx	lr
   1bde4:	ldr	r2, [r0]
   1bde8:	ldr	r3, [r0, #4]
   1bdec:	cmp	r2, r3
   1bdf0:	bcs	1be60 <__assert_fail@plt+0x9f18>
   1bdf4:	add	r1, r2, #8
   1bdf8:	sub	ip, r3, #1
   1bdfc:	sub	ip, ip, r2
   1be00:	bic	ip, ip, #7
   1be04:	add	r2, r2, #16
   1be08:	add	ip, ip, r2
   1be0c:	mov	r0, #0
   1be10:	b	1be2c <__assert_fail@plt+0x9ee4>
   1be14:	mov	r2, #1
   1be18:	cmp	r0, r2
   1be1c:	movcc	r0, r2
   1be20:	add	r1, r1, #8
   1be24:	cmp	r1, ip
   1be28:	beq	1be5c <__assert_fail@plt+0x9f14>
   1be2c:	ldr	r3, [r1, #-8]
   1be30:	cmp	r3, #0
   1be34:	beq	1be20 <__assert_fail@plt+0x9ed8>
   1be38:	ldr	r3, [r1, #-4]
   1be3c:	cmp	r3, #0
   1be40:	beq	1be14 <__assert_fail@plt+0x9ecc>
   1be44:	mov	r2, #1
   1be48:	add	r2, r2, #1
   1be4c:	ldr	r3, [r3, #4]
   1be50:	cmp	r3, #0
   1be54:	bne	1be48 <__assert_fail@plt+0x9f00>
   1be58:	b	1be18 <__assert_fail@plt+0x9ed0>
   1be5c:	bx	lr
   1be60:	mov	r0, #0
   1be64:	bx	lr
   1be68:	push	{lr}		; (str lr, [sp, #-4]!)
   1be6c:	ldr	r2, [r0]
   1be70:	ldr	r3, [r0, #4]
   1be74:	cmp	r2, r3
   1be78:	bcs	1bee0 <__assert_fail@plt+0x9f98>
   1be7c:	add	r1, r2, #8
   1be80:	sub	ip, r3, #1
   1be84:	sub	ip, ip, r2
   1be88:	bic	ip, ip, #7
   1be8c:	add	r2, r2, #16
   1be90:	add	ip, ip, r2
   1be94:	mov	r2, #0
   1be98:	mov	lr, r2
   1be9c:	b	1beac <__assert_fail@plt+0x9f64>
   1bea0:	add	r1, r1, #8
   1bea4:	cmp	r1, ip
   1bea8:	beq	1bee8 <__assert_fail@plt+0x9fa0>
   1beac:	ldr	r3, [r1, #-8]
   1beb0:	cmp	r3, #0
   1beb4:	beq	1bea0 <__assert_fail@plt+0x9f58>
   1beb8:	add	lr, lr, #1
   1bebc:	add	r2, r2, #1
   1bec0:	ldr	r3, [r1, #-4]
   1bec4:	cmp	r3, #0
   1bec8:	beq	1bea0 <__assert_fail@plt+0x9f58>
   1becc:	add	r2, r2, #1
   1bed0:	ldr	r3, [r3, #4]
   1bed4:	cmp	r3, #0
   1bed8:	bne	1becc <__assert_fail@plt+0x9f84>
   1bedc:	b	1bea0 <__assert_fail@plt+0x9f58>
   1bee0:	mov	r2, #0
   1bee4:	mov	lr, r2
   1bee8:	ldr	r3, [r0, #12]
   1beec:	cmp	r3, lr
   1bef0:	movne	r0, #0
   1bef4:	beq	1befc <__assert_fail@plt+0x9fb4>
   1bef8:	pop	{pc}		; (ldr pc, [sp], #4)
   1befc:	ldr	r0, [r0, #16]
   1bf00:	cmp	r0, r2
   1bf04:	movne	r0, #0
   1bf08:	moveq	r0, #1
   1bf0c:	b	1bef8 <__assert_fail@plt+0x9fb0>
   1bf10:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1bf14:	strd	r6, [sp, #8]
   1bf18:	str	r8, [sp, #16]
   1bf1c:	str	lr, [sp, #20]
   1bf20:	sub	sp, sp, #8
   1bf24:	mov	r6, r0
   1bf28:	mov	r4, r1
   1bf2c:	ldr	r5, [r0, #8]
   1bf30:	ldr	r7, [r0, #12]
   1bf34:	bl	1bde4 <__assert_fail@plt+0x9e9c>
   1bf38:	mov	r8, r0
   1bf3c:	ldr	r3, [r6, #16]
   1bf40:	movw	r2, #21264	; 0x5310
   1bf44:	movt	r2, #2
   1bf48:	mov	r1, #1
   1bf4c:	mov	r0, r4
   1bf50:	bl	11dd4 <__fprintf_chk@plt>
   1bf54:	mov	r3, r5
   1bf58:	movw	r2, #21288	; 0x5328
   1bf5c:	movt	r2, #2
   1bf60:	mov	r1, #1
   1bf64:	mov	r0, r4
   1bf68:	bl	11dd4 <__fprintf_chk@plt>
   1bf6c:	vmov	s15, r7
   1bf70:	vcvt.f64.u32	d6, s15
   1bf74:	vldr	d7, [pc, #92]	; 1bfd8 <__assert_fail@plt+0xa090>
   1bf78:	vmul.f64	d6, d6, d7
   1bf7c:	vmov	s15, r5
   1bf80:	vcvt.f64.u32	d7, s15
   1bf84:	vdiv.f64	d5, d6, d7
   1bf88:	vstr	d5, [sp]
   1bf8c:	mov	r3, r7
   1bf90:	movw	r2, #21312	; 0x5340
   1bf94:	movt	r2, #2
   1bf98:	mov	r1, #1
   1bf9c:	mov	r0, r4
   1bfa0:	bl	11dd4 <__fprintf_chk@plt>
   1bfa4:	mov	r3, r8
   1bfa8:	movw	r2, #21348	; 0x5364
   1bfac:	movt	r2, #2
   1bfb0:	mov	r1, #1
   1bfb4:	mov	r0, r4
   1bfb8:	bl	11dd4 <__fprintf_chk@plt>
   1bfbc:	add	sp, sp, #8
   1bfc0:	ldrd	r4, [sp]
   1bfc4:	ldrd	r6, [sp, #8]
   1bfc8:	ldr	r8, [sp, #16]
   1bfcc:	add	sp, sp, #20
   1bfd0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bfd4:	nop	{0}
   1bfd8:	andeq	r0, r0, r0
   1bfdc:	subsmi	r0, r9, r0
   1bfe0:	strd	r4, [sp, #-16]!
   1bfe4:	str	r6, [sp, #8]
   1bfe8:	str	lr, [sp, #12]
   1bfec:	mov	r6, r0
   1bff0:	mov	r5, r1
   1bff4:	bl	1bae4 <__assert_fail@plt+0x9b9c>
   1bff8:	ldr	r1, [r0]
   1bffc:	cmp	r1, #0
   1c000:	beq	1c054 <__assert_fail@plt+0xa10c>
   1c004:	mov	r4, r0
   1c008:	cmp	r1, r5
   1c00c:	beq	1c03c <__assert_fail@plt+0xa0f4>
   1c010:	ldr	r3, [r6, #28]
   1c014:	mov	r0, r5
   1c018:	blx	r3
   1c01c:	cmp	r0, #0
   1c020:	bne	1c03c <__assert_fail@plt+0xa0f4>
   1c024:	ldr	r4, [r4, #4]
   1c028:	cmp	r4, #0
   1c02c:	beq	1c040 <__assert_fail@plt+0xa0f8>
   1c030:	ldr	r1, [r4]
   1c034:	cmp	r1, r5
   1c038:	bne	1c010 <__assert_fail@plt+0xa0c8>
   1c03c:	ldr	r4, [r4]
   1c040:	mov	r0, r4
   1c044:	ldrd	r4, [sp]
   1c048:	ldr	r6, [sp, #8]
   1c04c:	add	sp, sp, #12
   1c050:	pop	{pc}		; (ldr pc, [sp], #4)
   1c054:	mov	r4, r1
   1c058:	b	1c040 <__assert_fail@plt+0xa0f8>
   1c05c:	ldr	r3, [r0, #16]
   1c060:	cmp	r3, #0
   1c064:	beq	1c0bc <__assert_fail@plt+0xa174>
   1c068:	ldr	r2, [r0]
   1c06c:	ldr	r1, [r0, #4]
   1c070:	cmp	r2, r1
   1c074:	bcs	1c0b0 <__assert_fail@plt+0xa168>
   1c078:	ldr	r0, [r2]
   1c07c:	cmp	r0, #0
   1c080:	bxne	lr
   1c084:	mov	r3, r2
   1c088:	sub	r1, r1, #1
   1c08c:	sub	r1, r1, r2
   1c090:	bic	r1, r1, #7
   1c094:	add	r2, r2, r1
   1c098:	cmp	r3, r2
   1c09c:	beq	1c0b0 <__assert_fail@plt+0xa168>
   1c0a0:	ldr	r0, [r3, #8]!
   1c0a4:	cmp	r0, #0
   1c0a8:	beq	1c098 <__assert_fail@plt+0xa150>
   1c0ac:	bx	lr
   1c0b0:	str	r4, [sp, #-8]!
   1c0b4:	str	lr, [sp, #4]
   1c0b8:	bl	11f24 <abort@plt>
   1c0bc:	mov	r0, #0
   1c0c0:	bx	lr
   1c0c4:	strd	r4, [sp, #-16]!
   1c0c8:	str	r6, [sp, #8]
   1c0cc:	str	lr, [sp, #12]
   1c0d0:	mov	r5, r0
   1c0d4:	mov	r4, r1
   1c0d8:	bl	1bae4 <__assert_fail@plt+0x9b9c>
   1c0dc:	mov	r2, r0
   1c0e0:	mov	r3, r0
   1c0e4:	b	1c0f4 <__assert_fail@plt+0xa1ac>
   1c0e8:	ldr	r3, [r3, #4]
   1c0ec:	cmp	r3, #0
   1c0f0:	beq	1c110 <__assert_fail@plt+0xa1c8>
   1c0f4:	ldr	r1, [r3]
   1c0f8:	cmp	r1, r4
   1c0fc:	bne	1c0e8 <__assert_fail@plt+0xa1a0>
   1c100:	ldr	r3, [r3, #4]
   1c104:	cmp	r3, #0
   1c108:	ldrne	r0, [r3]
   1c10c:	bne	1c134 <__assert_fail@plt+0xa1ec>
   1c110:	ldr	r3, [r5, #4]
   1c114:	add	r2, r2, #8
   1c118:	cmp	r3, r2
   1c11c:	bls	1c130 <__assert_fail@plt+0xa1e8>
   1c120:	ldr	r0, [r2]
   1c124:	cmp	r0, #0
   1c128:	beq	1c114 <__assert_fail@plt+0xa1cc>
   1c12c:	b	1c134 <__assert_fail@plt+0xa1ec>
   1c130:	mov	r0, #0
   1c134:	ldrd	r4, [sp]
   1c138:	ldr	r6, [sp, #8]
   1c13c:	add	sp, sp, #12
   1c140:	pop	{pc}		; (ldr pc, [sp], #4)
   1c144:	strd	r4, [sp, #-12]!
   1c148:	str	lr, [sp, #8]
   1c14c:	ldr	r4, [r0]
   1c150:	ldr	r3, [r0, #4]
   1c154:	cmp	r4, r3
   1c158:	bcs	1c1c0 <__assert_fail@plt+0xa278>
   1c15c:	mov	r5, r0
   1c160:	mov	r0, #0
   1c164:	b	1c178 <__assert_fail@plt+0xa230>
   1c168:	add	r4, r4, #8
   1c16c:	ldr	r3, [r5, #4]
   1c170:	cmp	r3, r4
   1c174:	bls	1c1b4 <__assert_fail@plt+0xa26c>
   1c178:	ldr	r3, [r4]
   1c17c:	cmp	r3, #0
   1c180:	beq	1c168 <__assert_fail@plt+0xa220>
   1c184:	cmp	r2, r0
   1c188:	bls	1c1b4 <__assert_fail@plt+0xa26c>
   1c18c:	add	ip, r1, r0, lsl #2
   1c190:	mov	r3, r4
   1c194:	add	r0, r0, #1
   1c198:	ldr	lr, [r3]
   1c19c:	str	lr, [ip], #4
   1c1a0:	ldr	r3, [r3, #4]
   1c1a4:	cmp	r3, #0
   1c1a8:	beq	1c168 <__assert_fail@plt+0xa220>
   1c1ac:	cmp	r2, r0
   1c1b0:	bne	1c194 <__assert_fail@plt+0xa24c>
   1c1b4:	ldrd	r4, [sp]
   1c1b8:	add	sp, sp, #8
   1c1bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c1c0:	mov	r0, #0
   1c1c4:	b	1c1b4 <__assert_fail@plt+0xa26c>
   1c1c8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1c1cc:	strd	r6, [sp, #8]
   1c1d0:	strd	r8, [sp, #16]
   1c1d4:	str	sl, [sp, #24]
   1c1d8:	str	lr, [sp, #28]
   1c1dc:	ldr	r8, [r0]
   1c1e0:	ldr	r3, [r0, #4]
   1c1e4:	cmp	r8, r3
   1c1e8:	bcs	1c248 <__assert_fail@plt+0xa300>
   1c1ec:	mov	r7, r2
   1c1f0:	mov	r6, r1
   1c1f4:	mov	r9, r0
   1c1f8:	mov	r5, #0
   1c1fc:	b	1c210 <__assert_fail@plt+0xa2c8>
   1c200:	add	r8, r8, #8
   1c204:	ldr	r3, [r9, #4]
   1c208:	cmp	r3, r8
   1c20c:	bls	1c24c <__assert_fail@plt+0xa304>
   1c210:	ldr	r3, [r8]
   1c214:	cmp	r3, #0
   1c218:	beq	1c200 <__assert_fail@plt+0xa2b8>
   1c21c:	mov	r4, r8
   1c220:	mov	r1, r7
   1c224:	ldr	r0, [r4]
   1c228:	blx	r6
   1c22c:	cmp	r0, #0
   1c230:	beq	1c24c <__assert_fail@plt+0xa304>
   1c234:	add	r5, r5, #1
   1c238:	ldr	r4, [r4, #4]
   1c23c:	cmp	r4, #0
   1c240:	bne	1c220 <__assert_fail@plt+0xa2d8>
   1c244:	b	1c200 <__assert_fail@plt+0xa2b8>
   1c248:	mov	r5, #0
   1c24c:	mov	r0, r5
   1c250:	ldrd	r4, [sp]
   1c254:	ldrd	r6, [sp, #8]
   1c258:	ldrd	r8, [sp, #16]
   1c25c:	ldr	sl, [sp, #24]
   1c260:	add	sp, sp, #28
   1c264:	pop	{pc}		; (ldr pc, [sp], #4)
   1c268:	ldrb	r2, [r0]
   1c26c:	cmp	r2, #0
   1c270:	beq	1c29c <__assert_fail@plt+0xa354>
   1c274:	mov	r3, #0
   1c278:	rsb	r3, r3, r3, lsl #5
   1c27c:	add	r3, r3, r2
   1c280:	udiv	r2, r3, r1
   1c284:	mls	r3, r1, r2, r3
   1c288:	ldrb	r2, [r0, #1]!
   1c28c:	cmp	r2, #0
   1c290:	bne	1c278 <__assert_fail@plt+0xa330>
   1c294:	mov	r0, r3
   1c298:	bx	lr
   1c29c:	mov	r3, #0
   1c2a0:	b	1c294 <__assert_fail@plt+0xa34c>
   1c2a4:	strd	r4, [sp, #-8]!
   1c2a8:	movw	r3, #21244	; 0x52fc
   1c2ac:	movt	r3, #2
   1c2b0:	ldrd	r4, [r3]
   1c2b4:	strd	r4, [r0]
   1c2b8:	ldrd	r4, [r3, #8]
   1c2bc:	strd	r4, [r0, #8]
   1c2c0:	ldr	r3, [r3, #16]
   1c2c4:	str	r3, [r0, #16]
   1c2c8:	ldrd	r4, [sp]
   1c2cc:	add	sp, sp, #8
   1c2d0:	bx	lr
   1c2d4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c2d8:	strd	r6, [sp, #8]
   1c2dc:	str	r8, [sp, #16]
   1c2e0:	str	lr, [sp, #20]
   1c2e4:	mov	r8, r0
   1c2e8:	mov	r5, r1
   1c2ec:	subs	r7, r2, #0
   1c2f0:	movw	r2, #47352	; 0xb8f8
   1c2f4:	movt	r2, #1
   1c2f8:	cmp	r7, #0
   1c2fc:	moveq	r7, r2
   1c300:	subs	r6, r3, #0
   1c304:	movw	r3, #47368	; 0xb908
   1c308:	movt	r3, #1
   1c30c:	cmp	r6, #0
   1c310:	moveq	r6, r3
   1c314:	mov	r0, #40	; 0x28
   1c318:	bl	21f58 <__assert_fail@plt+0x10010>
   1c31c:	subs	r4, r0, #0
   1c320:	beq	1c3a0 <__assert_fail@plt+0xa458>
   1c324:	movw	r3, #21244	; 0x52fc
   1c328:	movt	r3, #2
   1c32c:	cmp	r5, #0
   1c330:	moveq	r5, r3
   1c334:	str	r5, [r4, #20]
   1c338:	mov	r0, r4
   1c33c:	bl	1b918 <__assert_fail@plt+0x99d0>
   1c340:	cmp	r0, #0
   1c344:	beq	1c3b8 <__assert_fail@plt+0xa470>
   1c348:	mov	r1, r5
   1c34c:	mov	r0, r8
   1c350:	bl	1b9dc <__assert_fail@plt+0x9a94>
   1c354:	str	r0, [r4, #8]
   1c358:	cmp	r0, #0
   1c35c:	beq	1c3b8 <__assert_fail@plt+0xa470>
   1c360:	mov	r1, #8
   1c364:	bl	21ee4 <__assert_fail@plt+0xff9c>
   1c368:	str	r0, [r4]
   1c36c:	cmp	r0, #0
   1c370:	beq	1c3b8 <__assert_fail@plt+0xa470>
   1c374:	ldr	r3, [r4, #8]
   1c378:	add	r0, r0, r3, lsl #3
   1c37c:	str	r0, [r4, #4]
   1c380:	mov	r3, #0
   1c384:	str	r3, [r4, #12]
   1c388:	str	r3, [r4, #16]
   1c38c:	str	r7, [r4, #24]
   1c390:	str	r6, [r4, #28]
   1c394:	ldr	r2, [sp, #24]
   1c398:	str	r2, [r4, #32]
   1c39c:	str	r3, [r4, #36]	; 0x24
   1c3a0:	mov	r0, r4
   1c3a4:	ldrd	r4, [sp]
   1c3a8:	ldrd	r6, [sp, #8]
   1c3ac:	ldr	r8, [sp, #16]
   1c3b0:	add	sp, sp, #20
   1c3b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c3b8:	mov	r0, r4
   1c3bc:	bl	1b778 <__assert_fail@plt+0x9830>
   1c3c0:	mov	r4, #0
   1c3c4:	b	1c3a0 <__assert_fail@plt+0xa458>
   1c3c8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c3cc:	strd	r6, [sp, #8]
   1c3d0:	str	r8, [sp, #16]
   1c3d4:	str	lr, [sp, #20]
   1c3d8:	mov	r5, r0
   1c3dc:	ldr	r6, [r0]
   1c3e0:	ldr	r3, [r0, #4]
   1c3e4:	cmp	r6, r3
   1c3e8:	bcs	1c480 <__assert_fail@plt+0xa538>
   1c3ec:	add	r6, r6, #8
   1c3f0:	mov	r7, #0
   1c3f4:	b	1c460 <__assert_fail@plt+0xa518>
   1c3f8:	str	r7, [r4]
   1c3fc:	ldr	r3, [r4, #4]
   1c400:	ldr	r2, [r5, #36]	; 0x24
   1c404:	str	r2, [r4, #4]
   1c408:	str	r4, [r5, #36]	; 0x24
   1c40c:	mov	r4, r3
   1c410:	cmp	r3, #0
   1c414:	beq	1c430 <__assert_fail@plt+0xa4e8>
   1c418:	ldr	r3, [r5, #32]
   1c41c:	cmp	r3, #0
   1c420:	beq	1c3f8 <__assert_fail@plt+0xa4b0>
   1c424:	ldr	r0, [r4]
   1c428:	blx	r3
   1c42c:	b	1c3f8 <__assert_fail@plt+0xa4b0>
   1c430:	ldr	r3, [r5, #32]
   1c434:	cmp	r3, #0
   1c438:	beq	1c444 <__assert_fail@plt+0xa4fc>
   1c43c:	ldr	r0, [r8, #-8]
   1c440:	blx	r3
   1c444:	str	r7, [r8, #-8]
   1c448:	str	r7, [r8, #-4]
   1c44c:	add	r2, r6, #8
   1c450:	ldr	r3, [r5, #4]
   1c454:	cmp	r3, r6
   1c458:	bls	1c480 <__assert_fail@plt+0xa538>
   1c45c:	mov	r6, r2
   1c460:	mov	r8, r6
   1c464:	ldr	r3, [r6, #-8]
   1c468:	cmp	r3, #0
   1c46c:	beq	1c44c <__assert_fail@plt+0xa504>
   1c470:	ldr	r4, [r6, #-4]
   1c474:	cmp	r4, #0
   1c478:	bne	1c418 <__assert_fail@plt+0xa4d0>
   1c47c:	b	1c430 <__assert_fail@plt+0xa4e8>
   1c480:	mov	r3, #0
   1c484:	str	r3, [r5, #12]
   1c488:	str	r3, [r5, #16]
   1c48c:	ldrd	r4, [sp]
   1c490:	ldrd	r6, [sp, #8]
   1c494:	ldr	r8, [sp, #16]
   1c498:	add	sp, sp, #20
   1c49c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c4a0:	strd	r4, [sp, #-16]!
   1c4a4:	str	r6, [sp, #8]
   1c4a8:	str	lr, [sp, #12]
   1c4ac:	mov	r6, r0
   1c4b0:	ldr	r3, [r0, #32]
   1c4b4:	cmp	r3, #0
   1c4b8:	beq	1c518 <__assert_fail@plt+0xa5d0>
   1c4bc:	ldr	r3, [r0, #16]
   1c4c0:	cmp	r3, #0
   1c4c4:	beq	1c518 <__assert_fail@plt+0xa5d0>
   1c4c8:	ldr	r5, [r0]
   1c4cc:	ldr	r3, [r0, #4]
   1c4d0:	cmp	r5, r3
   1c4d4:	bcc	1c4ec <__assert_fail@plt+0xa5a4>
   1c4d8:	b	1c528 <__assert_fail@plt+0xa5e0>
   1c4dc:	add	r5, r5, #8
   1c4e0:	ldr	r3, [r6, #4]
   1c4e4:	cmp	r3, r5
   1c4e8:	bls	1c518 <__assert_fail@plt+0xa5d0>
   1c4ec:	ldr	r3, [r5]
   1c4f0:	cmp	r3, #0
   1c4f4:	beq	1c4dc <__assert_fail@plt+0xa594>
   1c4f8:	mov	r4, r5
   1c4fc:	ldr	r3, [r6, #32]
   1c500:	ldr	r0, [r4]
   1c504:	blx	r3
   1c508:	ldr	r4, [r4, #4]
   1c50c:	cmp	r4, #0
   1c510:	bne	1c4fc <__assert_fail@plt+0xa5b4>
   1c514:	b	1c4dc <__assert_fail@plt+0xa594>
   1c518:	ldr	r5, [r6]
   1c51c:	ldr	r3, [r6, #4]
   1c520:	cmp	r5, r3
   1c524:	bcc	1c578 <__assert_fail@plt+0xa630>
   1c528:	ldr	r0, [r6, #36]	; 0x24
   1c52c:	cmp	r0, #0
   1c530:	beq	1c548 <__assert_fail@plt+0xa600>
   1c534:	ldr	r4, [r0, #4]
   1c538:	bl	1b778 <__assert_fail@plt+0x9830>
   1c53c:	mov	r0, r4
   1c540:	cmp	r4, #0
   1c544:	bne	1c534 <__assert_fail@plt+0xa5ec>
   1c548:	ldr	r0, [r6]
   1c54c:	bl	1b778 <__assert_fail@plt+0x9830>
   1c550:	mov	r0, r6
   1c554:	bl	1b778 <__assert_fail@plt+0x9830>
   1c558:	ldrd	r4, [sp]
   1c55c:	ldr	r6, [sp, #8]
   1c560:	add	sp, sp, #12
   1c564:	pop	{pc}		; (ldr pc, [sp], #4)
   1c568:	add	r5, r5, #8
   1c56c:	ldr	r3, [r6, #4]
   1c570:	cmp	r3, r5
   1c574:	bls	1c528 <__assert_fail@plt+0xa5e0>
   1c578:	ldr	r0, [r5, #4]
   1c57c:	cmp	r0, #0
   1c580:	beq	1c568 <__assert_fail@plt+0xa620>
   1c584:	ldr	r4, [r0, #4]
   1c588:	bl	1b778 <__assert_fail@plt+0x9830>
   1c58c:	mov	r0, r4
   1c590:	cmp	r4, #0
   1c594:	bne	1c584 <__assert_fail@plt+0xa63c>
   1c598:	b	1c568 <__assert_fail@plt+0xa620>
   1c59c:	strd	r4, [sp, #-12]!
   1c5a0:	str	lr, [sp, #8]
   1c5a4:	sub	sp, sp, #44	; 0x2c
   1c5a8:	mov	r4, r0
   1c5ac:	mov	r0, r1
   1c5b0:	ldr	r1, [r4, #20]
   1c5b4:	bl	1b9dc <__assert_fail@plt+0x9a94>
   1c5b8:	subs	r5, r0, #0
   1c5bc:	beq	1c6b4 <__assert_fail@plt+0xa76c>
   1c5c0:	ldr	r3, [r4, #8]
   1c5c4:	cmp	r3, r5
   1c5c8:	beq	1c6cc <__assert_fail@plt+0xa784>
   1c5cc:	mov	r1, #8
   1c5d0:	mov	r0, r5
   1c5d4:	bl	21ee4 <__assert_fail@plt+0xff9c>
   1c5d8:	str	r0, [sp]
   1c5dc:	cmp	r0, #0
   1c5e0:	beq	1c6d4 <__assert_fail@plt+0xa78c>
   1c5e4:	str	r5, [sp, #8]
   1c5e8:	add	r0, r0, r5, lsl #3
   1c5ec:	str	r0, [sp, #4]
   1c5f0:	mov	r2, #0
   1c5f4:	str	r2, [sp, #12]
   1c5f8:	str	r2, [sp, #16]
   1c5fc:	ldr	r3, [r4, #20]
   1c600:	str	r3, [sp, #20]
   1c604:	ldr	r3, [r4, #24]
   1c608:	str	r3, [sp, #24]
   1c60c:	ldr	r3, [r4, #28]
   1c610:	str	r3, [sp, #28]
   1c614:	ldr	r3, [r4, #32]
   1c618:	str	r3, [sp, #32]
   1c61c:	ldr	r3, [r4, #36]	; 0x24
   1c620:	str	r3, [sp, #36]	; 0x24
   1c624:	mov	r1, r4
   1c628:	mov	r0, sp
   1c62c:	bl	1bb24 <__assert_fail@plt+0x9bdc>
   1c630:	subs	r5, r0, #0
   1c634:	bne	1c67c <__assert_fail@plt+0xa734>
   1c638:	ldr	r3, [sp, #36]	; 0x24
   1c63c:	str	r3, [r4, #36]	; 0x24
   1c640:	mov	r2, #1
   1c644:	mov	r1, sp
   1c648:	mov	r0, r4
   1c64c:	bl	1bb24 <__assert_fail@plt+0x9bdc>
   1c650:	cmp	r0, #0
   1c654:	beq	1c6b0 <__assert_fail@plt+0xa768>
   1c658:	mov	r2, #0
   1c65c:	mov	r1, sp
   1c660:	mov	r0, r4
   1c664:	bl	1bb24 <__assert_fail@plt+0x9bdc>
   1c668:	cmp	r0, #0
   1c66c:	beq	1c6b0 <__assert_fail@plt+0xa768>
   1c670:	ldr	r0, [sp]
   1c674:	bl	1b778 <__assert_fail@plt+0x9830>
   1c678:	b	1c6b8 <__assert_fail@plt+0xa770>
   1c67c:	ldr	r0, [r4]
   1c680:	bl	1b778 <__assert_fail@plt+0x9830>
   1c684:	ldr	r3, [sp]
   1c688:	str	r3, [r4]
   1c68c:	ldr	r3, [sp, #4]
   1c690:	str	r3, [r4, #4]
   1c694:	ldr	r3, [sp, #8]
   1c698:	str	r3, [r4, #8]
   1c69c:	ldr	r3, [sp, #12]
   1c6a0:	str	r3, [r4, #12]
   1c6a4:	ldr	r3, [sp, #36]	; 0x24
   1c6a8:	str	r3, [r4, #36]	; 0x24
   1c6ac:	b	1c6b8 <__assert_fail@plt+0xa770>
   1c6b0:	bl	11f24 <abort@plt>
   1c6b4:	mov	r5, #0
   1c6b8:	mov	r0, r5
   1c6bc:	add	sp, sp, #44	; 0x2c
   1c6c0:	ldrd	r4, [sp]
   1c6c4:	add	sp, sp, #8
   1c6c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c6cc:	mov	r5, #1
   1c6d0:	b	1c6b8 <__assert_fail@plt+0xa770>
   1c6d4:	mov	r5, #0
   1c6d8:	b	1c6b8 <__assert_fail@plt+0xa770>
   1c6dc:	strd	r4, [sp, #-16]!
   1c6e0:	str	r6, [sp, #8]
   1c6e4:	str	lr, [sp, #12]
   1c6e8:	sub	sp, sp, #8
   1c6ec:	subs	r5, r1, #0
   1c6f0:	beq	1c73c <__assert_fail@plt+0xa7f4>
   1c6f4:	mov	r4, r0
   1c6f8:	mov	r6, r2
   1c6fc:	mov	r3, #0
   1c700:	add	r2, sp, #4
   1c704:	mov	r1, r5
   1c708:	bl	1bca8 <__assert_fail@plt+0x9d60>
   1c70c:	cmp	r0, #0
   1c710:	beq	1c740 <__assert_fail@plt+0xa7f8>
   1c714:	cmp	r6, #0
   1c718:	moveq	r0, #0
   1c71c:	beq	1c728 <__assert_fail@plt+0xa7e0>
   1c720:	str	r0, [r6]
   1c724:	mov	r0, #0
   1c728:	add	sp, sp, #8
   1c72c:	ldrd	r4, [sp]
   1c730:	ldr	r6, [sp, #8]
   1c734:	add	sp, sp, #12
   1c738:	pop	{pc}		; (ldr pc, [sp], #4)
   1c73c:	bl	11f24 <abort@plt>
   1c740:	vldr	s15, [r4, #12]
   1c744:	vcvt.f32.u32	s14, s15
   1c748:	ldr	r3, [r4, #20]
   1c74c:	vldr	s15, [r4, #8]
   1c750:	vcvt.f32.u32	s15, s15
   1c754:	vldr	s13, [r3, #8]
   1c758:	vmul.f32	s15, s15, s13
   1c75c:	vcmpe.f32	s14, s15
   1c760:	vmrs	APSR_nzcv, fpscr
   1c764:	bgt	1c7b4 <__assert_fail@plt+0xa86c>
   1c768:	ldr	r3, [sp, #4]
   1c76c:	ldr	r2, [r3]
   1c770:	cmp	r2, #0
   1c774:	beq	1c860 <__assert_fail@plt+0xa918>
   1c778:	ldr	r0, [r4, #36]	; 0x24
   1c77c:	cmp	r0, #0
   1c780:	beq	1c848 <__assert_fail@plt+0xa900>
   1c784:	ldr	r3, [r0, #4]
   1c788:	str	r3, [r4, #36]	; 0x24
   1c78c:	str	r5, [r0]
   1c790:	ldr	r3, [sp, #4]
   1c794:	ldr	r2, [r3, #4]
   1c798:	str	r2, [r0, #4]
   1c79c:	str	r0, [r3, #4]
   1c7a0:	ldr	r3, [r4, #16]
   1c7a4:	add	r3, r3, #1
   1c7a8:	str	r3, [r4, #16]
   1c7ac:	mov	r0, #1
   1c7b0:	b	1c728 <__assert_fail@plt+0xa7e0>
   1c7b4:	mov	r0, r4
   1c7b8:	bl	1b918 <__assert_fail@plt+0x99d0>
   1c7bc:	ldr	r3, [r4, #20]
   1c7c0:	vldr	s13, [r3, #8]
   1c7c4:	vldr	s15, [r4, #8]
   1c7c8:	vcvt.f32.u32	s15, s15
   1c7cc:	vldr	s14, [r4, #12]
   1c7d0:	vcvt.f32.u32	s14, s14
   1c7d4:	vmul.f32	s12, s13, s15
   1c7d8:	vcmpe.f32	s14, s12
   1c7dc:	vmrs	APSR_nzcv, fpscr
   1c7e0:	ble	1c768 <__assert_fail@plt+0xa820>
   1c7e4:	ldrb	r2, [r3, #16]
   1c7e8:	cmp	r2, #0
   1c7ec:	vldr	s14, [r3, #12]
   1c7f0:	vmul.f32	s15, s15, s14
   1c7f4:	vmuleq.f32	s15, s15, s13
   1c7f8:	vldr	s14, [pc, #132]	; 1c884 <__assert_fail@plt+0xa93c>
   1c7fc:	vcmpe.f32	s15, s14
   1c800:	vmrs	APSR_nzcv, fpscr
   1c804:	mvnge	r0, #0
   1c808:	bge	1c728 <__assert_fail@plt+0xa7e0>
   1c80c:	vcvt.u32.f32	s15, s15
   1c810:	vmov	r1, s15
   1c814:	mov	r0, r4
   1c818:	bl	1c59c <__assert_fail@plt+0xa654>
   1c81c:	cmp	r0, #0
   1c820:	mvneq	r0, #0
   1c824:	beq	1c728 <__assert_fail@plt+0xa7e0>
   1c828:	mov	r3, #0
   1c82c:	add	r2, sp, #4
   1c830:	mov	r1, r5
   1c834:	mov	r0, r4
   1c838:	bl	1bca8 <__assert_fail@plt+0x9d60>
   1c83c:	cmp	r0, #0
   1c840:	beq	1c768 <__assert_fail@plt+0xa820>
   1c844:	bl	11f24 <abort@plt>
   1c848:	mov	r0, #8
   1c84c:	bl	21f58 <__assert_fail@plt+0x10010>
   1c850:	cmp	r0, #0
   1c854:	mvneq	r0, #0
   1c858:	beq	1c728 <__assert_fail@plt+0xa7e0>
   1c85c:	b	1c78c <__assert_fail@plt+0xa844>
   1c860:	str	r5, [r3]
   1c864:	ldr	r3, [r4, #16]
   1c868:	add	r3, r3, #1
   1c86c:	str	r3, [r4, #16]
   1c870:	ldr	r3, [r4, #12]
   1c874:	add	r3, r3, #1
   1c878:	str	r3, [r4, #12]
   1c87c:	mov	r0, #1
   1c880:	b	1c728 <__assert_fail@plt+0xa7e0>
   1c884:	svcmi	0x00800000
   1c888:	str	r4, [sp, #-8]!
   1c88c:	str	lr, [sp, #4]
   1c890:	sub	sp, sp, #8
   1c894:	mov	r4, r1
   1c898:	add	r2, sp, #4
   1c89c:	bl	1c6dc <__assert_fail@plt+0xa794>
   1c8a0:	cmn	r0, #1
   1c8a4:	moveq	r0, #0
   1c8a8:	beq	1c8b8 <__assert_fail@plt+0xa970>
   1c8ac:	cmp	r0, #0
   1c8b0:	ldreq	r0, [sp, #4]
   1c8b4:	movne	r0, r4
   1c8b8:	add	sp, sp, #8
   1c8bc:	ldr	r4, [sp]
   1c8c0:	add	sp, sp, #4
   1c8c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c8c8:	strd	r4, [sp, #-16]!
   1c8cc:	str	r6, [sp, #8]
   1c8d0:	str	lr, [sp, #12]
   1c8d4:	sub	sp, sp, #8
   1c8d8:	mov	r4, r0
   1c8dc:	mov	r3, #1
   1c8e0:	add	r2, sp, #4
   1c8e4:	bl	1bca8 <__assert_fail@plt+0x9d60>
   1c8e8:	subs	r5, r0, #0
   1c8ec:	beq	1c90c <__assert_fail@plt+0xa9c4>
   1c8f0:	ldr	r3, [r4, #16]
   1c8f4:	sub	r3, r3, #1
   1c8f8:	str	r3, [r4, #16]
   1c8fc:	ldr	r3, [sp, #4]
   1c900:	ldr	r3, [r3]
   1c904:	cmp	r3, #0
   1c908:	beq	1c924 <__assert_fail@plt+0xa9dc>
   1c90c:	mov	r0, r5
   1c910:	add	sp, sp, #8
   1c914:	ldrd	r4, [sp]
   1c918:	ldr	r6, [sp, #8]
   1c91c:	add	sp, sp, #12
   1c920:	pop	{pc}		; (ldr pc, [sp], #4)
   1c924:	ldr	r3, [r4, #12]
   1c928:	sub	r3, r3, #1
   1c92c:	str	r3, [r4, #12]
   1c930:	vmov	s15, r3
   1c934:	vcvt.f32.u32	s15, s15
   1c938:	ldr	r3, [r4, #20]
   1c93c:	vldr	s14, [r4, #8]
   1c940:	vcvt.f32.u32	s14, s14
   1c944:	vldr	s13, [r3]
   1c948:	vmul.f32	s14, s14, s13
   1c94c:	vcmpe.f32	s15, s14
   1c950:	vmrs	APSR_nzcv, fpscr
   1c954:	bpl	1c90c <__assert_fail@plt+0xa9c4>
   1c958:	mov	r0, r4
   1c95c:	bl	1b918 <__assert_fail@plt+0x99d0>
   1c960:	ldr	r3, [r4, #20]
   1c964:	vldr	s15, [r4, #8]
   1c968:	vcvt.f32.u32	s15, s15
   1c96c:	vldr	s14, [r4, #12]
   1c970:	vcvt.f32.u32	s13, s14
   1c974:	vldr	s14, [r3]
   1c978:	vmul.f32	s14, s15, s14
   1c97c:	vcmpe.f32	s13, s14
   1c980:	vmrs	APSR_nzcv, fpscr
   1c984:	bpl	1c90c <__assert_fail@plt+0xa9c4>
   1c988:	ldrb	r2, [r3, #16]
   1c98c:	cmp	r2, #0
   1c990:	vldr	s14, [r3, #4]
   1c994:	vmuleq.f32	s15, s15, s14
   1c998:	vldreq	s14, [r3, #8]
   1c99c:	vmul.f32	s15, s15, s14
   1c9a0:	vcvt.u32.f32	s15, s15
   1c9a4:	vmov	r1, s15
   1c9a8:	mov	r0, r4
   1c9ac:	bl	1c59c <__assert_fail@plt+0xa654>
   1c9b0:	cmp	r0, #0
   1c9b4:	bne	1c90c <__assert_fail@plt+0xa9c4>
   1c9b8:	ldr	r0, [r4, #36]	; 0x24
   1c9bc:	cmp	r0, #0
   1c9c0:	beq	1c9d8 <__assert_fail@plt+0xaa90>
   1c9c4:	ldr	r6, [r0, #4]
   1c9c8:	bl	1b778 <__assert_fail@plt+0x9830>
   1c9cc:	mov	r0, r6
   1c9d0:	cmp	r6, #0
   1c9d4:	bne	1c9c4 <__assert_fail@plt+0xaa7c>
   1c9d8:	mov	r3, #0
   1c9dc:	str	r3, [r4, #36]	; 0x24
   1c9e0:	b	1c90c <__assert_fail@plt+0xa9c4>
   1c9e4:	str	r4, [sp, #-8]!
   1c9e8:	str	lr, [sp, #4]
   1c9ec:	bl	1c8c8 <__assert_fail@plt+0xa980>
   1c9f0:	ldr	r4, [sp]
   1c9f4:	add	sp, sp, #4
   1c9f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c9fc:	mov	r0, #0
   1ca00:	bx	lr
   1ca04:	strd	r4, [sp, #-16]!
   1ca08:	str	r6, [sp, #8]
   1ca0c:	str	lr, [sp, #12]
   1ca10:	mov	r6, r0
   1ca14:	mov	r5, r1
   1ca18:	mov	r0, #16
   1ca1c:	bl	21070 <__assert_fail@plt+0xf128>
   1ca20:	mov	r4, r0
   1ca24:	cmp	r5, #0
   1ca28:	moveq	r5, #1
   1ca2c:	mov	r1, #4
   1ca30:	mov	r0, r5
   1ca34:	bl	211f0 <__assert_fail@plt+0xf2a8>
   1ca38:	str	r0, [r4]
   1ca3c:	mov	r3, #0
   1ca40:	str	r3, [r0]
   1ca44:	str	r5, [r4, #4]
   1ca48:	str	r3, [r4, #8]
   1ca4c:	movw	r3, #51708	; 0xc9fc
   1ca50:	movt	r3, #1
   1ca54:	cmp	r6, #0
   1ca58:	moveq	r6, r3
   1ca5c:	str	r6, [r4, #12]
   1ca60:	mov	r0, r4
   1ca64:	ldrd	r4, [sp]
   1ca68:	ldr	r6, [sp, #8]
   1ca6c:	add	sp, sp, #12
   1ca70:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca74:	str	r4, [sp, #-8]!
   1ca78:	str	lr, [sp, #4]
   1ca7c:	mov	r4, r0
   1ca80:	ldr	r0, [r0]
   1ca84:	bl	1b778 <__assert_fail@plt+0x9830>
   1ca88:	mov	r0, r4
   1ca8c:	bl	1b778 <__assert_fail@plt+0x9830>
   1ca90:	ldr	r4, [sp]
   1ca94:	add	sp, sp, #4
   1ca98:	pop	{pc}		; (ldr pc, [sp], #4)
   1ca9c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1caa0:	strd	r6, [sp, #8]
   1caa4:	str	r8, [sp, #16]
   1caa8:	str	lr, [sp, #20]
   1caac:	mov	r4, r0
   1cab0:	mov	r5, r1
   1cab4:	ldr	r3, [r0, #4]
   1cab8:	sub	r3, r3, #1
   1cabc:	ldr	r2, [r0, #8]
   1cac0:	cmp	r3, r2
   1cac4:	bls	1cb3c <__assert_fail@plt+0xabf4>
   1cac8:	ldr	r2, [r4]
   1cacc:	ldr	r3, [r4, #8]
   1cad0:	add	r3, r3, #1
   1cad4:	str	r3, [r4, #8]
   1cad8:	str	r5, [r2, r3, lsl #2]
   1cadc:	ldr	r6, [r4]
   1cae0:	ldr	r5, [r4, #8]
   1cae4:	ldr	r8, [r4, #12]
   1cae8:	ldr	r7, [r6, r5, lsl #2]
   1caec:	cmp	r5, #1
   1caf0:	beq	1cb20 <__assert_fail@plt+0xabd8>
   1caf4:	lsr	r4, r5, #1
   1caf8:	mov	r1, r7
   1cafc:	ldr	r0, [r6, r4, lsl #2]
   1cb00:	blx	r8
   1cb04:	cmp	r0, #0
   1cb08:	bgt	1cb20 <__assert_fail@plt+0xabd8>
   1cb0c:	ldr	r3, [r6, r4, lsl #2]
   1cb10:	str	r3, [r6, r5, lsl #2]
   1cb14:	mov	r5, r4
   1cb18:	cmp	r4, #1
   1cb1c:	bne	1caf4 <__assert_fail@plt+0xabac>
   1cb20:	str	r7, [r6, r5, lsl #2]
   1cb24:	mov	r0, #0
   1cb28:	ldrd	r4, [sp]
   1cb2c:	ldrd	r6, [sp, #8]
   1cb30:	ldr	r8, [sp, #16]
   1cb34:	add	sp, sp, #20
   1cb38:	pop	{pc}		; (ldr pc, [sp], #4)
   1cb3c:	mov	r1, r0
   1cb40:	ldr	r0, [r1], #4
   1cb44:	mov	r2, #4
   1cb48:	bl	21238 <__assert_fail@plt+0xf2f0>
   1cb4c:	str	r0, [r4]
   1cb50:	b	1cac8 <__assert_fail@plt+0xab80>
   1cb54:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1cb58:	strd	r6, [sp, #8]
   1cb5c:	strd	r8, [sp, #16]
   1cb60:	strd	sl, [sp, #24]
   1cb64:	str	lr, [sp, #32]
   1cb68:	sub	sp, sp, #12
   1cb6c:	ldr	r3, [r0, #8]
   1cb70:	cmp	r3, #0
   1cb74:	beq	1cc30 <__assert_fail@plt+0xace8>
   1cb78:	ldr	r2, [r0]
   1cb7c:	ldr	r1, [r2, #4]
   1cb80:	str	r1, [sp, #4]
   1cb84:	sub	r1, r3, #1
   1cb88:	str	r1, [r0, #8]
   1cb8c:	ldr	r3, [r2, r3, lsl #2]
   1cb90:	str	r3, [r2, #4]
   1cb94:	ldr	r5, [r0]
   1cb98:	ldr	r7, [r0, #8]
   1cb9c:	ldr	r9, [r0, #12]
   1cba0:	ldr	sl, [r5, #4]
   1cba4:	lsr	fp, r7, #1
   1cba8:	cmp	r7, #1
   1cbac:	bls	1cc08 <__assert_fail@plt+0xacc0>
   1cbb0:	mov	r6, #1
   1cbb4:	b	1cbe0 <__assert_fail@plt+0xac98>
   1cbb8:	mov	r1, sl
   1cbbc:	ldr	r0, [r5, r4, lsl #2]
   1cbc0:	blx	r9
   1cbc4:	cmp	r0, #0
   1cbc8:	ble	1cc0c <__assert_fail@plt+0xacc4>
   1cbcc:	ldr	r3, [r5, r4, lsl #2]
   1cbd0:	str	r3, [r5, r6, lsl #2]
   1cbd4:	mov	r6, r4
   1cbd8:	cmp	fp, r4
   1cbdc:	bcc	1cc0c <__assert_fail@plt+0xacc4>
   1cbe0:	lsl	r4, r6, #1
   1cbe4:	cmp	r7, r4
   1cbe8:	bls	1cbb8 <__assert_fail@plt+0xac70>
   1cbec:	add	r8, r4, #1
   1cbf0:	ldr	r1, [r5, r8, lsl #2]
   1cbf4:	ldr	r0, [r5, r6, lsl #3]
   1cbf8:	blx	r9
   1cbfc:	cmp	r0, #0
   1cc00:	movlt	r4, r8
   1cc04:	b	1cbb8 <__assert_fail@plt+0xac70>
   1cc08:	mov	r6, #1
   1cc0c:	str	sl, [r5, r6, lsl #2]
   1cc10:	ldr	r0, [sp, #4]
   1cc14:	add	sp, sp, #12
   1cc18:	ldrd	r4, [sp]
   1cc1c:	ldrd	r6, [sp, #8]
   1cc20:	ldrd	r8, [sp, #16]
   1cc24:	ldrd	sl, [sp, #24]
   1cc28:	add	sp, sp, #32
   1cc2c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cc30:	mov	r3, #0
   1cc34:	str	r3, [sp, #4]
   1cc38:	b	1cc10 <__assert_fail@plt+0xacc8>
   1cc3c:	add	r2, r1, #11
   1cc40:	mov	r3, #0
   1cc44:	strb	r3, [r1, #11]
   1cc48:	cmp	r0, #0
   1cc4c:	movwge	ip, #26215	; 0x6667
   1cc50:	movtge	ip, #26214	; 0x6666
   1cc54:	blt	1cc88 <__assert_fail@plt+0xad40>
   1cc58:	smull	r3, r1, ip, r0
   1cc5c:	asr	r3, r0, #31
   1cc60:	rsb	r3, r3, r1, asr #2
   1cc64:	add	r1, r3, r3, lsl #2
   1cc68:	sub	r0, r0, r1, lsl #1
   1cc6c:	add	r0, r0, #48	; 0x30
   1cc70:	strb	r0, [r2, #-1]!
   1cc74:	mov	r0, r3
   1cc78:	cmp	r3, #0
   1cc7c:	bne	1cc58 <__assert_fail@plt+0xad10>
   1cc80:	mov	r0, r2
   1cc84:	bx	lr
   1cc88:	push	{lr}		; (str lr, [sp, #-4]!)
   1cc8c:	movw	lr, #26215	; 0x6667
   1cc90:	movt	lr, #26214	; 0x6666
   1cc94:	b	1cc9c <__assert_fail@plt+0xad54>
   1cc98:	mov	r2, r1
   1cc9c:	sub	r1, r2, #1
   1cca0:	smull	r3, ip, lr, r0
   1cca4:	asr	r3, r0, #31
   1cca8:	rsb	r3, r3, ip, asr #2
   1ccac:	add	ip, r3, r3, lsl #2
   1ccb0:	sub	r0, r0, ip, lsl #1
   1ccb4:	rsb	r0, r0, #48	; 0x30
   1ccb8:	strb	r0, [r2, #-1]
   1ccbc:	mov	r0, r3
   1ccc0:	cmp	r3, #0
   1ccc4:	bne	1cc98 <__assert_fail@plt+0xad50>
   1ccc8:	sub	r2, r2, #2
   1cccc:	mov	r3, #45	; 0x2d
   1ccd0:	strb	r3, [r1, #-1]
   1ccd4:	mov	r0, r2
   1ccd8:	pop	{pc}		; (ldr pc, [sp], #4)
   1ccdc:	add	ip, r1, #10
   1cce0:	mov	r3, #0
   1cce4:	strb	r3, [r1, #10]
   1cce8:	movw	r1, #52429	; 0xcccd
   1ccec:	movt	r1, #52428	; 0xcccc
   1ccf0:	b	1ccf8 <__assert_fail@plt+0xadb0>
   1ccf4:	mov	r0, r2
   1ccf8:	umull	r3, r2, r1, r0
   1ccfc:	lsr	r2, r2, #3
   1cd00:	add	r3, r2, r2, lsl #2
   1cd04:	sub	r3, r0, r3, lsl #1
   1cd08:	add	r3, r3, #48	; 0x30
   1cd0c:	strb	r3, [ip, #-1]!
   1cd10:	cmp	r0, #9
   1cd14:	bhi	1ccf4 <__assert_fail@plt+0xadac>
   1cd18:	mov	r0, ip
   1cd1c:	bx	lr
   1cd20:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1cd24:	str	r6, [sp, #8]
   1cd28:	strd	r8, [sp, #12]
   1cd2c:	str	lr, [sp, #20]
   1cd30:	mov	r4, r0
   1cd34:	mov	r5, r1
   1cd38:	add	r6, r2, #20
   1cd3c:	mov	r3, #0
   1cd40:	strb	r3, [r2, #20]
   1cd44:	mov	r8, #10
   1cd48:	mov	r9, #0
   1cd4c:	b	1cd58 <__assert_fail@plt+0xae10>
   1cd50:	mov	r4, r0
   1cd54:	mov	r5, r1
   1cd58:	mov	r2, r8
   1cd5c:	mov	r3, r9
   1cd60:	mov	r0, r4
   1cd64:	mov	r1, r5
   1cd68:	bl	22f84 <_obstack_memory_used@@Base+0x450>
   1cd6c:	add	r2, r2, #48	; 0x30
   1cd70:	strb	r2, [r6, #-1]!
   1cd74:	mov	r2, r8
   1cd78:	mov	r3, r9
   1cd7c:	mov	r0, r4
   1cd80:	mov	r1, r5
   1cd84:	bl	22f84 <_obstack_memory_used@@Base+0x450>
   1cd88:	cmp	r5, #0
   1cd8c:	cmpeq	r4, #9
   1cd90:	bhi	1cd50 <__assert_fail@plt+0xae08>
   1cd94:	mov	r0, r6
   1cd98:	ldrd	r4, [sp]
   1cd9c:	ldr	r6, [sp, #8]
   1cda0:	ldrd	r8, [sp, #12]
   1cda4:	add	sp, sp, #20
   1cda8:	pop	{pc}		; (ldr pc, [sp], #4)
   1cdac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1cdb0:	strd	r6, [sp, #8]
   1cdb4:	strd	r8, [sp, #16]
   1cdb8:	strd	sl, [sp, #24]
   1cdbc:	str	lr, [sp, #32]
   1cdc0:	sub	sp, sp, #20
   1cdc4:	mov	r4, r0
   1cdc8:	mov	sl, r2
   1cdcc:	add	r8, r0, r1
   1cdd0:	bl	11c48 <__ctype_get_mb_cur_max@plt>
   1cdd4:	cmp	r0, #1
   1cdd8:	bls	1cdf8 <__assert_fail@plt+0xaeb0>
   1cddc:	cmp	r4, r8
   1cde0:	bcs	1cfac <__assert_fail@plt+0xb064>
   1cde4:	mov	r5, #0
   1cde8:	mov	r6, #0
   1cdec:	mov	r7, #0
   1cdf0:	and	r9, sl, #2
   1cdf4:	b	1ce48 <__assert_fail@plt+0xaf00>
   1cdf8:	cmp	r4, r8
   1cdfc:	movcs	r5, #0
   1ce00:	bcs	1cf10 <__assert_fail@plt+0xafc8>
   1ce04:	bl	11d2c <__ctype_b_loc@plt>
   1ce08:	ldr	r2, [r0]
   1ce0c:	mov	r5, #0
   1ce10:	and	sl, sl, #2
   1ce14:	b	1cf6c <__assert_fail@plt+0xb024>
   1ce18:	cmp	r3, #65	; 0x41
   1ce1c:	bcc	1ce6c <__assert_fail@plt+0xaf24>
   1ce20:	cmp	r3, #95	; 0x5f
   1ce24:	bls	1ce38 <__assert_fail@plt+0xaef0>
   1ce28:	sub	r3, r3, #97	; 0x61
   1ce2c:	uxtb	r3, r3
   1ce30:	cmp	r3, #29
   1ce34:	bhi	1ce6c <__assert_fail@plt+0xaf24>
   1ce38:	add	r4, r4, #1
   1ce3c:	add	r5, r5, #1
   1ce40:	cmp	r4, r8
   1ce44:	bcs	1cf10 <__assert_fail@plt+0xafc8>
   1ce48:	ldrb	r3, [r4]
   1ce4c:	cmp	r3, #63	; 0x3f
   1ce50:	bhi	1ce18 <__assert_fail@plt+0xaed0>
   1ce54:	cmp	r3, #37	; 0x25
   1ce58:	bcs	1ce38 <__assert_fail@plt+0xaef0>
   1ce5c:	sub	r3, r3, #32
   1ce60:	uxtb	r3, r3
   1ce64:	cmp	r3, #3
   1ce68:	bls	1ce38 <__assert_fail@plt+0xaef0>
   1ce6c:	strd	r6, [sp, #8]
   1ce70:	b	1ceb4 <__assert_fail@plt+0xaf6c>
   1ce74:	tst	sl, #1
   1ce78:	bne	1cf58 <__assert_fail@plt+0xb010>
   1ce7c:	add	r4, r4, #1
   1ce80:	add	r5, r5, #1
   1ce84:	b	1ce40 <__assert_fail@plt+0xaef8>
   1ce88:	tst	sl, #1
   1ce8c:	bne	1cf58 <__assert_fail@plt+0xb010>
   1ce90:	add	r5, r5, #1
   1ce94:	mov	r4, r8
   1ce98:	b	1ce40 <__assert_fail@plt+0xaef8>
   1ce9c:	add	r5, r5, r0
   1cea0:	add	r4, r4, fp
   1cea4:	add	r0, sp, #8
   1cea8:	bl	11af8 <mbsinit@plt>
   1ceac:	cmp	r0, #0
   1ceb0:	bne	1ce40 <__assert_fail@plt+0xaef8>
   1ceb4:	add	r3, sp, #8
   1ceb8:	sub	r2, r8, r4
   1cebc:	mov	r1, r4
   1cec0:	add	r0, sp, #4
   1cec4:	bl	22550 <__assert_fail@plt+0x10608>
   1cec8:	mov	fp, r0
   1cecc:	cmn	r0, #1
   1ced0:	beq	1ce74 <__assert_fail@plt+0xaf2c>
   1ced4:	cmn	r0, #2
   1ced8:	beq	1ce88 <__assert_fail@plt+0xaf40>
   1cedc:	cmp	r0, #0
   1cee0:	movne	fp, r0
   1cee4:	moveq	fp, #1
   1cee8:	ldr	r0, [sp, #4]
   1ceec:	bl	11a74 <wcwidth@plt>
   1cef0:	cmp	r0, #0
   1cef4:	blt	1cf30 <__assert_fail@plt+0xafe8>
   1cef8:	movw	r3, #65535	; 0xffff
   1cefc:	movt	r3, #32767	; 0x7fff
   1cf00:	sub	r3, r3, r5
   1cf04:	cmp	r3, r0
   1cf08:	bge	1ce9c <__assert_fail@plt+0xaf54>
   1cf0c:	mvn	r5, #-2147483648	; 0x80000000
   1cf10:	mov	r0, r5
   1cf14:	add	sp, sp, #20
   1cf18:	ldrd	r4, [sp]
   1cf1c:	ldrd	r6, [sp, #8]
   1cf20:	ldrd	r8, [sp, #16]
   1cf24:	ldrd	sl, [sp, #24]
   1cf28:	add	sp, sp, #32
   1cf2c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf30:	cmp	r9, #0
   1cf34:	bne	1cf58 <__assert_fail@plt+0xb010>
   1cf38:	ldr	r0, [sp, #4]
   1cf3c:	bl	11bc4 <iswcntrl@plt>
   1cf40:	cmp	r0, #0
   1cf44:	bne	1cea0 <__assert_fail@plt+0xaf58>
   1cf48:	cmn	r5, #-2147483647	; 0x80000001
   1cf4c:	beq	1cf0c <__assert_fail@plt+0xafc4>
   1cf50:	add	r5, r5, #1
   1cf54:	b	1cea0 <__assert_fail@plt+0xaf58>
   1cf58:	mvn	r5, #0
   1cf5c:	b	1cf10 <__assert_fail@plt+0xafc8>
   1cf60:	add	r5, r5, #1
   1cf64:	cmp	r8, r4
   1cf68:	beq	1cf10 <__assert_fail@plt+0xafc8>
   1cf6c:	ldrb	r3, [r4], #1
   1cf70:	lsl	r3, r3, #1
   1cf74:	ldrh	r3, [r2, r3]
   1cf78:	tst	r3, #16384	; 0x4000
   1cf7c:	beq	1cf8c <__assert_fail@plt+0xb044>
   1cf80:	cmn	r5, #-2147483647	; 0x80000001
   1cf84:	bne	1cf60 <__assert_fail@plt+0xb018>
   1cf88:	b	1cf10 <__assert_fail@plt+0xafc8>
   1cf8c:	cmp	sl, #0
   1cf90:	bne	1cfb4 <__assert_fail@plt+0xb06c>
   1cf94:	tst	r3, #2
   1cf98:	bne	1cf64 <__assert_fail@plt+0xb01c>
   1cf9c:	cmn	r5, #-2147483647	; 0x80000001
   1cfa0:	beq	1cf10 <__assert_fail@plt+0xafc8>
   1cfa4:	add	r5, r5, #1
   1cfa8:	b	1cf64 <__assert_fail@plt+0xb01c>
   1cfac:	mov	r5, #0
   1cfb0:	b	1cf10 <__assert_fail@plt+0xafc8>
   1cfb4:	mvn	r5, #0
   1cfb8:	b	1cf10 <__assert_fail@plt+0xafc8>
   1cfbc:	strd	r4, [sp, #-16]!
   1cfc0:	str	r6, [sp, #8]
   1cfc4:	str	lr, [sp, #12]
   1cfc8:	mov	r4, r0
   1cfcc:	mov	r5, r1
   1cfd0:	bl	11d50 <strlen@plt>
   1cfd4:	mov	r2, r5
   1cfd8:	mov	r1, r0
   1cfdc:	mov	r0, r4
   1cfe0:	bl	1cdac <__assert_fail@plt+0xae64>
   1cfe4:	ldrd	r4, [sp]
   1cfe8:	ldr	r6, [sp, #8]
   1cfec:	add	sp, sp, #12
   1cff0:	pop	{pc}		; (ldr pc, [sp], #4)
   1cff4:	cmp	r0, #0
   1cff8:	beq	1d0bc <__assert_fail@plt+0xb174>
   1cffc:	ldrb	r3, [r0]
   1d000:	cmp	r3, #0
   1d004:	beq	1d0c4 <__assert_fail@plt+0xb17c>
   1d008:	cmp	r3, #9
   1d00c:	bcc	1d034 <__assert_fail@plt+0xb0ec>
   1d010:	cmp	r3, #13
   1d014:	bls	1d020 <__assert_fail@plt+0xb0d8>
   1d018:	cmp	r3, #32
   1d01c:	bne	1d034 <__assert_fail@plt+0xb0ec>
   1d020:	ldrb	r3, [r0, #1]!
   1d024:	cmp	r3, #0
   1d028:	bne	1d008 <__assert_fail@plt+0xb0c0>
   1d02c:	mov	r0, #0
   1d030:	bx	lr
   1d034:	sub	r3, r3, #48	; 0x30
   1d038:	cmp	r3, #9
   1d03c:	bhi	1d0cc <__assert_fail@plt+0xb184>
   1d040:	push	{lr}		; (str lr, [sp, #-4]!)
   1d044:	sub	sp, sp, #12
   1d048:	mov	r3, #0
   1d04c:	str	r3, [sp, #4]
   1d050:	mov	r2, #10
   1d054:	add	r1, sp, #4
   1d058:	bl	11d44 <strtoul@plt>
   1d05c:	ldr	r2, [sp, #4]
   1d060:	cmp	r2, #0
   1d064:	beq	1d0b0 <__assert_fail@plt+0xb168>
   1d068:	ldrb	r3, [r2]
   1d06c:	cmp	r3, #0
   1d070:	beq	1d0b4 <__assert_fail@plt+0xb16c>
   1d074:	cmp	r3, #9
   1d078:	bcc	1d0a4 <__assert_fail@plt+0xb15c>
   1d07c:	cmp	r3, #13
   1d080:	bls	1d08c <__assert_fail@plt+0xb144>
   1d084:	cmp	r3, #32
   1d088:	bne	1d0a4 <__assert_fail@plt+0xb15c>
   1d08c:	add	r2, r2, #1
   1d090:	str	r2, [sp, #4]
   1d094:	ldrb	r3, [r2]
   1d098:	cmp	r3, #0
   1d09c:	bne	1d074 <__assert_fail@plt+0xb12c>
   1d0a0:	b	1d0b4 <__assert_fail@plt+0xb16c>
   1d0a4:	cmp	r3, #0
   1d0a8:	cmpne	r3, #44	; 0x2c
   1d0ac:	beq	1d0b4 <__assert_fail@plt+0xb16c>
   1d0b0:	mov	r0, #0
   1d0b4:	add	sp, sp, #12
   1d0b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d0bc:	mov	r0, #0
   1d0c0:	bx	lr
   1d0c4:	mov	r0, #0
   1d0c8:	bx	lr
   1d0cc:	mov	r0, #0
   1d0d0:	bx	lr
   1d0d4:	push	{lr}		; (str lr, [sp, #-4]!)
   1d0d8:	sub	sp, sp, #132	; 0x84
   1d0dc:	mov	r2, sp
   1d0e0:	mov	r1, #128	; 0x80
   1d0e4:	mov	r0, #0
   1d0e8:	bl	11ed0 <sched_getaffinity@plt>
   1d0ec:	cmp	r0, #0
   1d0f0:	beq	1d100 <__assert_fail@plt+0xb1b8>
   1d0f4:	mov	r0, #0
   1d0f8:	add	sp, sp, #132	; 0x84
   1d0fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1d100:	mov	r1, sp
   1d104:	mov	r0, #128	; 0x80
   1d108:	bl	11b10 <__sched_cpucount@plt>
   1d10c:	cmp	r0, #0
   1d110:	beq	1d0f4 <__assert_fail@plt+0xb1ac>
   1d114:	b	1d0f8 <__assert_fail@plt+0xb1b0>
   1d118:	strd	r4, [sp, #-16]!
   1d11c:	str	r6, [sp, #8]
   1d120:	str	lr, [sp, #12]
   1d124:	cmp	r0, #2
   1d128:	beq	1d174 <__assert_fail@plt+0xb22c>
   1d12c:	cmp	r0, #1
   1d130:	beq	1d1d8 <__assert_fail@plt+0xb290>
   1d134:	mov	r0, #83	; 0x53
   1d138:	bl	11b70 <sysconf@plt>
   1d13c:	mov	r4, r0
   1d140:	sub	r3, r0, #1
   1d144:	cmp	r3, #1
   1d148:	bls	1d1e0 <__assert_fail@plt+0xb298>
   1d14c:	cmp	r4, #0
   1d150:	mvnle	r4, #0
   1d154:	movle	r0, #1
   1d158:	bgt	1d1f4 <__assert_fail@plt+0xb2ac>
   1d15c:	cmp	r0, r4
   1d160:	movcs	r0, r4
   1d164:	ldrd	r4, [sp]
   1d168:	ldr	r6, [sp, #8]
   1d16c:	add	sp, sp, #12
   1d170:	pop	{pc}		; (ldr pc, [sp], #4)
   1d174:	movw	r0, #21372	; 0x537c
   1d178:	movt	r0, #2
   1d17c:	bl	11cb4 <getenv@plt>
   1d180:	bl	1cff4 <__assert_fail@plt+0xb0ac>
   1d184:	mov	r5, r0
   1d188:	movw	r0, #21388	; 0x538c
   1d18c:	movt	r0, #2
   1d190:	bl	11cb4 <getenv@plt>
   1d194:	bl	1cff4 <__assert_fail@plt+0xb0ac>
   1d198:	subs	r4, r0, #0
   1d19c:	mvneq	r4, #0
   1d1a0:	cmp	r5, #0
   1d1a4:	bne	1d1c8 <__assert_fail@plt+0xb280>
   1d1a8:	bl	1d0d4 <__assert_fail@plt+0xb18c>
   1d1ac:	cmp	r0, #0
   1d1b0:	bne	1d15c <__assert_fail@plt+0xb214>
   1d1b4:	mov	r0, #84	; 0x54
   1d1b8:	bl	11b70 <sysconf@plt>
   1d1bc:	cmp	r0, #1
   1d1c0:	movlt	r0, #1
   1d1c4:	b	1d15c <__assert_fail@plt+0xb214>
   1d1c8:	cmp	r4, r5
   1d1cc:	movcc	r0, r4
   1d1d0:	movcs	r0, r5
   1d1d4:	b	1d164 <__assert_fail@plt+0xb21c>
   1d1d8:	mvn	r4, #0
   1d1dc:	b	1d1a8 <__assert_fail@plt+0xb260>
   1d1e0:	bl	1d0d4 <__assert_fail@plt+0xb18c>
   1d1e4:	cmp	r4, r0
   1d1e8:	bcs	1d1f4 <__assert_fail@plt+0xb2ac>
   1d1ec:	mov	r4, r0
   1d1f0:	b	1d14c <__assert_fail@plt+0xb204>
   1d1f4:	mov	r0, r4
   1d1f8:	mvn	r4, #0
   1d1fc:	b	1d15c <__assert_fail@plt+0xb214>
   1d200:	str	r4, [sp, #-8]!
   1d204:	str	lr, [sp, #4]
   1d208:	sub	sp, sp, #64	; 0x40
   1d20c:	mov	r0, #85	; 0x55
   1d210:	bl	11b70 <sysconf@plt>
   1d214:	mov	r4, r0
   1d218:	mov	r0, #30
   1d21c:	bl	11b70 <sysconf@plt>
   1d220:	cmp	r0, #0
   1d224:	cmpge	r4, #0
   1d228:	bge	1d250 <__assert_fail@plt+0xb308>
   1d22c:	mov	r0, sp
   1d230:	bl	11ccc <sysinfo@plt>
   1d234:	cmp	r0, #0
   1d238:	beq	1d268 <__assert_fail@plt+0xb320>
   1d23c:	vldr	d0, [pc, #60]	; 1d280 <__assert_fail@plt+0xb338>
   1d240:	add	sp, sp, #64	; 0x40
   1d244:	ldr	r4, [sp]
   1d248:	add	sp, sp, #4
   1d24c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d250:	vmov	s15, r4
   1d254:	vcvt.f64.s32	d0, s15
   1d258:	vmov	s15, r0
   1d25c:	vcvt.f64.s32	d7, s15
   1d260:	vmul.f64	d0, d0, d7
   1d264:	b	1d240 <__assert_fail@plt+0xb2f8>
   1d268:	vldr	s15, [sp, #16]
   1d26c:	vcvt.f64.u32	d0, s15
   1d270:	vldr	s15, [sp, #52]	; 0x34
   1d274:	vcvt.f64.u32	d7, s15
   1d278:	vmul.f64	d0, d0, d7
   1d27c:	b	1d240 <__assert_fail@plt+0xb2f8>
   1d280:	andeq	r0, r0, r0
   1d284:	orrsmi	r0, r0, r0
   1d288:	str	r4, [sp, #-8]!
   1d28c:	str	lr, [sp, #4]
   1d290:	sub	sp, sp, #64	; 0x40
   1d294:	mov	r0, #86	; 0x56
   1d298:	bl	11b70 <sysconf@plt>
   1d29c:	mov	r4, r0
   1d2a0:	mov	r0, #30
   1d2a4:	bl	11b70 <sysconf@plt>
   1d2a8:	cmp	r0, #0
   1d2ac:	cmpge	r4, #0
   1d2b0:	bge	1d2f4 <__assert_fail@plt+0xb3ac>
   1d2b4:	mov	r0, sp
   1d2b8:	bl	11ccc <sysinfo@plt>
   1d2bc:	cmp	r0, #0
   1d2c0:	bne	1d30c <__assert_fail@plt+0xb3c4>
   1d2c4:	vldr	s15, [sp, #20]
   1d2c8:	vcvt.f64.u32	d0, s15
   1d2cc:	vldr	s15, [sp, #28]
   1d2d0:	vcvt.f64.u32	d7, s15
   1d2d4:	vadd.f64	d0, d0, d7
   1d2d8:	vldr	s15, [sp, #52]	; 0x34
   1d2dc:	vcvt.f64.u32	d7, s15
   1d2e0:	vmul.f64	d0, d0, d7
   1d2e4:	add	sp, sp, #64	; 0x40
   1d2e8:	ldr	r4, [sp]
   1d2ec:	add	sp, sp, #4
   1d2f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d2f4:	vmov	s15, r4
   1d2f8:	vcvt.f64.s32	d0, s15
   1d2fc:	vmov	s15, r0
   1d300:	vcvt.f64.s32	d7, s15
   1d304:	vmul.f64	d0, d0, d7
   1d308:	b	1d2e4 <__assert_fail@plt+0xb39c>
   1d30c:	bl	1d200 <__assert_fail@plt+0xb2b8>
   1d310:	vldr	d7, [pc, #8]	; 1d320 <__assert_fail@plt+0xb3d8>
   1d314:	vmul.f64	d0, d0, d7
   1d318:	b	1d2e4 <__assert_fail@plt+0xb39c>
   1d31c:	nop	{0}
   1d320:	andeq	r0, r0, r0
   1d324:	svccc	0x00d00000
   1d328:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1d32c:	strd	r6, [sp, #8]
   1d330:	strd	r8, [sp, #16]
   1d334:	str	sl, [sp, #24]
   1d338:	str	lr, [sp, #28]
   1d33c:	mov	r4, r0
   1d340:	mov	r5, r1
   1d344:	ldr	r9, [r0]
   1d348:	ldr	r8, [r0, #4]
   1d34c:	movw	r3, #26824	; 0x68c8
   1d350:	movt	r3, #3
   1d354:	ldr	r3, [r3]
   1d358:	cmp	r3, #0
   1d35c:	bge	1d3ac <__assert_fail@plt+0xb464>
   1d360:	bic	r6, r5, #524288	; 0x80000
   1d364:	bic	r6, r6, #2048	; 0x800
   1d368:	cmp	r6, #0
   1d36c:	bne	1d3f0 <__assert_fail@plt+0xb4a8>
   1d370:	mov	r0, r4
   1d374:	bl	11df8 <pipe@plt>
   1d378:	cmp	r0, #0
   1d37c:	blt	1d4fc <__assert_fail@plt+0xb5b4>
   1d380:	tst	r5, #2048	; 0x800
   1d384:	bne	1d404 <__assert_fail@plt+0xb4bc>
   1d388:	ands	r7, r5, #524288	; 0x80000
   1d38c:	bne	1d494 <__assert_fail@plt+0xb54c>
   1d390:	mov	r0, r7
   1d394:	ldrd	r4, [sp]
   1d398:	ldrd	r6, [sp, #8]
   1d39c:	ldrd	r8, [sp, #16]
   1d3a0:	ldr	sl, [sp, #24]
   1d3a4:	add	sp, sp, #28
   1d3a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d3ac:	bl	11eac <pipe2@plt>
   1d3b0:	subs	r7, r0, #0
   1d3b4:	bge	1d3c8 <__assert_fail@plt+0xb480>
   1d3b8:	bl	11d74 <__errno_location@plt>
   1d3bc:	ldr	r3, [r0]
   1d3c0:	cmp	r3, #38	; 0x26
   1d3c4:	beq	1d3dc <__assert_fail@plt+0xb494>
   1d3c8:	movw	r3, #26824	; 0x68c8
   1d3cc:	movt	r3, #3
   1d3d0:	mov	r2, #1
   1d3d4:	str	r2, [r3]
   1d3d8:	b	1d390 <__assert_fail@plt+0xb448>
   1d3dc:	movw	r3, #26824	; 0x68c8
   1d3e0:	movt	r3, #3
   1d3e4:	mvn	r2, #0
   1d3e8:	str	r2, [r3]
   1d3ec:	b	1d360 <__assert_fail@plt+0xb418>
   1d3f0:	bl	11d74 <__errno_location@plt>
   1d3f4:	mov	r3, #22
   1d3f8:	str	r3, [r0]
   1d3fc:	mvn	r7, #0
   1d400:	b	1d390 <__assert_fail@plt+0xb448>
   1d404:	mov	r2, #0
   1d408:	mov	r1, #3
   1d40c:	ldr	r0, [r4, #4]
   1d410:	bl	22168 <__assert_fail@plt+0x10220>
   1d414:	cmp	r0, #0
   1d418:	blt	1d464 <__assert_fail@plt+0xb51c>
   1d41c:	orr	r2, r0, #2048	; 0x800
   1d420:	mov	r1, #4
   1d424:	ldr	r0, [r4, #4]
   1d428:	bl	22168 <__assert_fail@plt+0x10220>
   1d42c:	cmn	r0, #1
   1d430:	beq	1d464 <__assert_fail@plt+0xb51c>
   1d434:	mov	r2, #0
   1d438:	mov	r1, #3
   1d43c:	ldr	r0, [r4]
   1d440:	bl	22168 <__assert_fail@plt+0x10220>
   1d444:	subs	r2, r0, #0
   1d448:	blt	1d464 <__assert_fail@plt+0xb51c>
   1d44c:	orr	r2, r2, #2048	; 0x800
   1d450:	mov	r1, #4
   1d454:	ldr	r0, [r4]
   1d458:	bl	22168 <__assert_fail@plt+0x10220>
   1d45c:	cmn	r0, #1
   1d460:	bne	1d388 <__assert_fail@plt+0xb440>
   1d464:	bl	11d74 <__errno_location@plt>
   1d468:	mov	r5, r0
   1d46c:	ldr	r6, [r0]
   1d470:	ldr	r0, [r4]
   1d474:	bl	11f30 <close@plt>
   1d478:	ldr	r0, [r4, #4]
   1d47c:	bl	11f30 <close@plt>
   1d480:	str	r9, [r4]
   1d484:	str	r8, [r4, #4]
   1d488:	str	r6, [r5]
   1d48c:	mvn	r7, #0
   1d490:	b	1d390 <__assert_fail@plt+0xb448>
   1d494:	mov	r2, #0
   1d498:	mov	r1, #1
   1d49c:	ldr	r0, [r4, #4]
   1d4a0:	bl	22168 <__assert_fail@plt+0x10220>
   1d4a4:	subs	r2, r0, #0
   1d4a8:	blt	1d464 <__assert_fail@plt+0xb51c>
   1d4ac:	orr	r2, r2, #1
   1d4b0:	mov	r1, #2
   1d4b4:	ldr	r0, [r4, #4]
   1d4b8:	bl	22168 <__assert_fail@plt+0x10220>
   1d4bc:	cmn	r0, #1
   1d4c0:	beq	1d464 <__assert_fail@plt+0xb51c>
   1d4c4:	mov	r2, #0
   1d4c8:	mov	r1, #1
   1d4cc:	ldr	r0, [r4]
   1d4d0:	bl	22168 <__assert_fail@plt+0x10220>
   1d4d4:	cmp	r0, #0
   1d4d8:	blt	1d464 <__assert_fail@plt+0xb51c>
   1d4dc:	orr	r2, r0, #1
   1d4e0:	mov	r1, #2
   1d4e4:	ldr	r0, [r4]
   1d4e8:	bl	22168 <__assert_fail@plt+0x10220>
   1d4ec:	cmn	r0, #1
   1d4f0:	movne	r7, r6
   1d4f4:	bne	1d390 <__assert_fail@plt+0xb448>
   1d4f8:	b	1d464 <__assert_fail@plt+0xb51c>
   1d4fc:	mvn	r7, #0
   1d500:	b	1d390 <__assert_fail@plt+0xb448>
   1d504:	push	{lr}		; (str lr, [sp, #-4]!)
   1d508:	sub	sp, sp, #12
   1d50c:	movw	r0, #21408	; 0x53a0
   1d510:	movt	r0, #2
   1d514:	bl	11cb4 <getenv@plt>
   1d518:	cmp	r0, #0
   1d51c:	beq	1d568 <__assert_fail@plt+0xb620>
   1d520:	ldrb	r3, [r0]
   1d524:	cmp	r3, #0
   1d528:	movweq	r3, #4201	; 0x1069
   1d52c:	movteq	r3, #3
   1d530:	bne	1d540 <__assert_fail@plt+0xb5f8>
   1d534:	mov	r0, r3
   1d538:	add	sp, sp, #12
   1d53c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d540:	mov	r2, #10
   1d544:	add	r1, sp, #4
   1d548:	bl	11a38 <strtol@plt>
   1d54c:	ldr	r3, [sp, #4]
   1d550:	ldrb	r2, [r3]
   1d554:	cmp	r2, #0
   1d558:	movw	r3, #4201	; 0x1069
   1d55c:	movt	r3, #3
   1d560:	moveq	r3, r0
   1d564:	b	1d534 <__assert_fail@plt+0xb5ec>
   1d568:	movw	r3, #4201	; 0x1069
   1d56c:	movt	r3, #3
   1d570:	b	1d534 <__assert_fail@plt+0xb5ec>
   1d574:	strd	r4, [sp, #-16]!
   1d578:	str	r6, [sp, #8]
   1d57c:	str	lr, [sp, #12]
   1d580:	subs	r4, r0, #0
   1d584:	beq	1d620 <__assert_fail@plt+0xb6d8>
   1d588:	mov	r1, #47	; 0x2f
   1d58c:	mov	r0, r4
   1d590:	bl	11e58 <strrchr@plt>
   1d594:	subs	r5, r0, #0
   1d598:	beq	1d5f8 <__assert_fail@plt+0xb6b0>
   1d59c:	add	r6, r5, #1
   1d5a0:	sub	r3, r6, r4
   1d5a4:	cmp	r3, #6
   1d5a8:	ble	1d5f8 <__assert_fail@plt+0xb6b0>
   1d5ac:	mov	r2, #7
   1d5b0:	movw	r1, #21480	; 0x53e8
   1d5b4:	movt	r1, #2
   1d5b8:	sub	r0, r5, #6
   1d5bc:	bl	11f0c <strncmp@plt>
   1d5c0:	cmp	r0, #0
   1d5c4:	bne	1d5f8 <__assert_fail@plt+0xb6b0>
   1d5c8:	mov	r2, #3
   1d5cc:	movw	r1, #21488	; 0x53f0
   1d5d0:	movt	r1, #2
   1d5d4:	mov	r0, r6
   1d5d8:	bl	11f0c <strncmp@plt>
   1d5dc:	cmp	r0, #0
   1d5e0:	movne	r4, r6
   1d5e4:	bne	1d5f8 <__assert_fail@plt+0xb6b0>
   1d5e8:	add	r4, r5, #4
   1d5ec:	movw	r3, #25272	; 0x62b8
   1d5f0:	movt	r3, #3
   1d5f4:	str	r4, [r3]
   1d5f8:	movw	r3, #26828	; 0x68cc
   1d5fc:	movt	r3, #3
   1d600:	str	r4, [r3]
   1d604:	movw	r3, #25276	; 0x62bc
   1d608:	movt	r3, #3
   1d60c:	str	r4, [r3]
   1d610:	ldrd	r4, [sp]
   1d614:	ldr	r6, [sp, #8]
   1d618:	add	sp, sp, #12
   1d61c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d620:	movw	r3, #25288	; 0x62c8
   1d624:	movt	r3, #3
   1d628:	ldr	r3, [r3]
   1d62c:	mov	r2, #55	; 0x37
   1d630:	mov	r1, #1
   1d634:	movw	r0, #21424	; 0x53b0
   1d638:	movt	r0, #2
   1d63c:	bl	11c18 <fwrite@plt>
   1d640:	bl	11f24 <abort@plt>
   1d644:	mov	r2, #0
   1d648:	mov	r3, #0
   1d64c:	strd	r2, [r0]
   1d650:	strd	r2, [r0, #8]
   1d654:	strd	r2, [r0, #16]
   1d658:	strd	r2, [r0, #24]
   1d65c:	strd	r2, [r0, #32]
   1d660:	strd	r2, [r0, #40]	; 0x28
   1d664:	cmp	r1, #10
   1d668:	beq	1d674 <__assert_fail@plt+0xb72c>
   1d66c:	str	r1, [r0]
   1d670:	bx	lr
   1d674:	str	r4, [sp, #-8]!
   1d678:	str	lr, [sp, #4]
   1d67c:	bl	11f24 <abort@plt>
   1d680:	strd	r4, [sp, #-16]!
   1d684:	str	r6, [sp, #8]
   1d688:	str	lr, [sp, #12]
   1d68c:	mov	r5, r0
   1d690:	mov	r6, r1
   1d694:	mov	r2, #5
   1d698:	mov	r1, r0
   1d69c:	mov	r0, #0
   1d6a0:	bl	11b58 <dcgettext@plt>
   1d6a4:	mov	r4, r0
   1d6a8:	cmp	r5, r0
   1d6ac:	beq	1d6c4 <__assert_fail@plt+0xb77c>
   1d6b0:	mov	r0, r4
   1d6b4:	ldrd	r4, [sp]
   1d6b8:	ldr	r6, [sp, #8]
   1d6bc:	add	sp, sp, #12
   1d6c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d6c4:	bl	2250c <__assert_fail@plt+0x105c4>
   1d6c8:	ldrb	r3, [r0]
   1d6cc:	bic	r3, r3, #32
   1d6d0:	cmp	r3, #85	; 0x55
   1d6d4:	bne	1d758 <__assert_fail@plt+0xb810>
   1d6d8:	ldrb	r3, [r0, #1]
   1d6dc:	bic	r3, r3, #32
   1d6e0:	cmp	r3, #84	; 0x54
   1d6e4:	bne	1d71c <__assert_fail@plt+0xb7d4>
   1d6e8:	ldrb	r3, [r0, #2]
   1d6ec:	bic	r3, r3, #32
   1d6f0:	cmp	r3, #70	; 0x46
   1d6f4:	bne	1d71c <__assert_fail@plt+0xb7d4>
   1d6f8:	ldrb	r3, [r0, #3]
   1d6fc:	cmp	r3, #45	; 0x2d
   1d700:	bne	1d71c <__assert_fail@plt+0xb7d4>
   1d704:	ldrb	r3, [r0, #4]
   1d708:	cmp	r3, #56	; 0x38
   1d70c:	bne	1d71c <__assert_fail@plt+0xb7d4>
   1d710:	ldrb	r3, [r0, #5]
   1d714:	cmp	r3, #0
   1d718:	beq	1d738 <__assert_fail@plt+0xb7f0>
   1d71c:	movw	r4, #21576	; 0x5448
   1d720:	movt	r4, #2
   1d724:	movw	r3, #21596	; 0x545c
   1d728:	movt	r3, #2
   1d72c:	cmp	r6, #9
   1d730:	movne	r4, r3
   1d734:	b	1d6b0 <__assert_fail@plt+0xb768>
   1d738:	ldrb	r2, [r4]
   1d73c:	movw	r4, #21592	; 0x5458
   1d740:	movt	r4, #2
   1d744:	movw	r3, #21580	; 0x544c
   1d748:	movt	r3, #2
   1d74c:	cmp	r2, #96	; 0x60
   1d750:	movne	r4, r3
   1d754:	b	1d6b0 <__assert_fail@plt+0xb768>
   1d758:	cmp	r3, #71	; 0x47
   1d75c:	bne	1d71c <__assert_fail@plt+0xb7d4>
   1d760:	ldrb	r3, [r0, #1]
   1d764:	bic	r3, r3, #32
   1d768:	cmp	r3, #66	; 0x42
   1d76c:	bne	1d71c <__assert_fail@plt+0xb7d4>
   1d770:	ldrb	r3, [r0, #2]
   1d774:	cmp	r3, #49	; 0x31
   1d778:	bne	1d71c <__assert_fail@plt+0xb7d4>
   1d77c:	ldrb	r3, [r0, #3]
   1d780:	cmp	r3, #56	; 0x38
   1d784:	bne	1d71c <__assert_fail@plt+0xb7d4>
   1d788:	ldrb	r3, [r0, #4]
   1d78c:	cmp	r3, #48	; 0x30
   1d790:	bne	1d71c <__assert_fail@plt+0xb7d4>
   1d794:	ldrb	r3, [r0, #5]
   1d798:	cmp	r3, #51	; 0x33
   1d79c:	bne	1d71c <__assert_fail@plt+0xb7d4>
   1d7a0:	ldrb	r3, [r0, #6]
   1d7a4:	cmp	r3, #48	; 0x30
   1d7a8:	bne	1d71c <__assert_fail@plt+0xb7d4>
   1d7ac:	ldrb	r3, [r0, #7]
   1d7b0:	cmp	r3, #0
   1d7b4:	bne	1d71c <__assert_fail@plt+0xb7d4>
   1d7b8:	ldrb	r2, [r4]
   1d7bc:	movw	r4, #21588	; 0x5454
   1d7c0:	movt	r4, #2
   1d7c4:	movw	r3, #21584	; 0x5450
   1d7c8:	movt	r3, #2
   1d7cc:	cmp	r2, #96	; 0x60
   1d7d0:	movne	r4, r3
   1d7d4:	b	1d6b0 <__assert_fail@plt+0xb768>
   1d7d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1d7dc:	strd	r6, [sp, #8]
   1d7e0:	strd	r8, [sp, #16]
   1d7e4:	strd	sl, [sp, #24]
   1d7e8:	str	lr, [sp, #32]
   1d7ec:	sub	sp, sp, #116	; 0x74
   1d7f0:	str	r0, [sp, #64]	; 0x40
   1d7f4:	mov	r8, r1
   1d7f8:	str	r2, [sp, #48]	; 0x30
   1d7fc:	str	r3, [sp, #24]
   1d800:	ldr	r7, [sp, #152]	; 0x98
   1d804:	bl	11c48 <__ctype_get_mb_cur_max@plt>
   1d808:	str	r0, [sp, #76]	; 0x4c
   1d80c:	ldr	r3, [sp, #156]	; 0x9c
   1d810:	ubfx	r3, r3, #1, #1
   1d814:	str	r3, [sp, #32]
   1d818:	mov	r3, #1
   1d81c:	str	r3, [sp, #40]	; 0x28
   1d820:	mov	r3, #0
   1d824:	str	r3, [sp, #68]	; 0x44
   1d828:	str	r3, [sp, #36]	; 0x24
   1d82c:	str	r3, [sp, #28]
   1d830:	str	r3, [sp, #52]	; 0x34
   1d834:	str	r3, [sp, #60]	; 0x3c
   1d838:	str	r3, [sp, #72]	; 0x48
   1d83c:	movw	r3, #21600	; 0x5460
   1d840:	movt	r3, #2
   1d844:	str	r3, [sp, #80]	; 0x50
   1d848:	mov	r9, r8
   1d84c:	mov	sl, r7
   1d850:	cmp	sl, #10
   1d854:	ldrls	pc, [pc, sl, lsl #2]
   1d858:	b	1da1c <__assert_fail@plt+0xbad4>
   1d85c:			; <UNDEFINED> instruction: 0x0001d8bc
   1d860:	muleq	r1, r0, r8
   1d864:	strdeq	sp, [r1], -r4
   1d868:	andeq	sp, r1, r8, lsl #17
   1d86c:	andeq	sp, r1, r8, lsr #19
   1d870:	andeq	sp, r1, ip, asr #17
   1d874:	muleq	r1, r8, ip
   1d878:	andeq	sp, r1, r0, lsr #20
   1d87c:	andeq	sp, r1, r8, lsl #18
   1d880:	andeq	sp, r1, r8, lsl #18
   1d884:	andeq	sp, r1, r8, lsl #18
   1d888:	mov	r3, #1
   1d88c:	str	r3, [sp, #28]
   1d890:	mov	r3, #1
   1d894:	str	r3, [sp, #32]
   1d898:	str	r3, [sp, #52]	; 0x34
   1d89c:	movw	r3, #21596	; 0x545c
   1d8a0:	movt	r3, #2
   1d8a4:	str	r3, [sp, #60]	; 0x3c
   1d8a8:	mov	fp, #0
   1d8ac:	mov	sl, #2
   1d8b0:	mov	r6, #0
   1d8b4:	ldr	r8, [sp, #64]	; 0x40
   1d8b8:	b	1e130 <__assert_fail@plt+0xc1e8>
   1d8bc:	mov	fp, sl
   1d8c0:	mov	r3, #0
   1d8c4:	str	r3, [sp, #32]
   1d8c8:	b	1d8b0 <__assert_fail@plt+0xb968>
   1d8cc:	ldr	r3, [sp, #32]
   1d8d0:	cmp	r3, #0
   1d8d4:	bne	1da34 <__assert_fail@plt+0xbaec>
   1d8d8:	cmp	r9, #0
   1d8dc:	beq	1da58 <__assert_fail@plt+0xbb10>
   1d8e0:	mov	r3, #34	; 0x22
   1d8e4:	ldr	r2, [sp, #64]	; 0x40
   1d8e8:	strb	r3, [r2]
   1d8ec:	mov	fp, #1
   1d8f0:	str	fp, [sp, #28]
   1d8f4:	str	fp, [sp, #52]	; 0x34
   1d8f8:	movw	r3, #21576	; 0x5448
   1d8fc:	movt	r3, #2
   1d900:	str	r3, [sp, #60]	; 0x3c
   1d904:	b	1d8b0 <__assert_fail@plt+0xb968>
   1d908:	cmp	sl, #10
   1d90c:	bne	1d940 <__assert_fail@plt+0xb9f8>
   1d910:	ldr	r3, [sp, #32]
   1d914:	cmp	r3, #0
   1d918:	movne	fp, #0
   1d91c:	beq	1d968 <__assert_fail@plt+0xba20>
   1d920:	ldr	r0, [sp, #168]	; 0xa8
   1d924:	bl	11d50 <strlen@plt>
   1d928:	str	r0, [sp, #52]	; 0x34
   1d92c:	ldr	r3, [sp, #168]	; 0xa8
   1d930:	str	r3, [sp, #60]	; 0x3c
   1d934:	mov	r3, #1
   1d938:	str	r3, [sp, #28]
   1d93c:	b	1d8b0 <__assert_fail@plt+0xb968>
   1d940:	mov	r1, sl
   1d944:	ldr	r0, [sp, #80]	; 0x50
   1d948:	bl	1d680 <__assert_fail@plt+0xb738>
   1d94c:	str	r0, [sp, #164]	; 0xa4
   1d950:	mov	r1, sl
   1d954:	movw	r0, #21596	; 0x545c
   1d958:	movt	r0, #2
   1d95c:	bl	1d680 <__assert_fail@plt+0xb738>
   1d960:	str	r0, [sp, #168]	; 0xa8
   1d964:	b	1d910 <__assert_fail@plt+0xb9c8>
   1d968:	ldr	r3, [sp, #164]	; 0xa4
   1d96c:	ldrb	r3, [r3]
   1d970:	cmp	r3, #0
   1d974:	beq	1d9a0 <__assert_fail@plt+0xba58>
   1d978:	ldr	r2, [sp, #164]	; 0xa4
   1d97c:	mov	fp, #0
   1d980:	ldr	r1, [sp, #64]	; 0x40
   1d984:	cmp	r9, fp
   1d988:	strbhi	r3, [r1, fp]
   1d98c:	add	fp, fp, #1
   1d990:	ldrb	r3, [r2, #1]!
   1d994:	cmp	r3, #0
   1d998:	bne	1d984 <__assert_fail@plt+0xba3c>
   1d99c:	b	1d920 <__assert_fail@plt+0xb9d8>
   1d9a0:	mov	fp, #0
   1d9a4:	b	1d920 <__assert_fail@plt+0xb9d8>
   1d9a8:	ldr	r3, [sp, #32]
   1d9ac:	cmp	r3, #0
   1d9b0:	bne	1d890 <__assert_fail@plt+0xb948>
   1d9b4:	mov	r3, #1
   1d9b8:	str	r3, [sp, #28]
   1d9bc:	cmp	r9, #0
   1d9c0:	beq	1da74 <__assert_fail@plt+0xbb2c>
   1d9c4:	mov	r3, #39	; 0x27
   1d9c8:	ldr	r2, [sp, #64]	; 0x40
   1d9cc:	strb	r3, [r2]
   1d9d0:	mov	r3, #0
   1d9d4:	str	r3, [sp, #32]
   1d9d8:	mov	fp, #1
   1d9dc:	str	fp, [sp, #52]	; 0x34
   1d9e0:	movw	r3, #21596	; 0x545c
   1d9e4:	movt	r3, #2
   1d9e8:	str	r3, [sp, #60]	; 0x3c
   1d9ec:	mov	sl, #2
   1d9f0:	b	1d8b0 <__assert_fail@plt+0xb968>
   1d9f4:	ldr	r3, [sp, #32]
   1d9f8:	cmp	r3, #0
   1d9fc:	beq	1d9bc <__assert_fail@plt+0xba74>
   1da00:	mov	r3, #1
   1da04:	str	r3, [sp, #52]	; 0x34
   1da08:	movw	r3, #21596	; 0x545c
   1da0c:	movt	r3, #2
   1da10:	str	r3, [sp, #60]	; 0x3c
   1da14:	mov	fp, #0
   1da18:	b	1d8b0 <__assert_fail@plt+0xb968>
   1da1c:	bl	11f24 <abort@plt>
   1da20:	mov	fp, #0
   1da24:	str	fp, [sp, #32]
   1da28:	mov	r3, #1
   1da2c:	str	r3, [sp, #28]
   1da30:	b	1d8b0 <__assert_fail@plt+0xb968>
   1da34:	ldr	r3, [sp, #32]
   1da38:	str	r3, [sp, #28]
   1da3c:	mov	r3, #1
   1da40:	str	r3, [sp, #52]	; 0x34
   1da44:	movw	r3, #21576	; 0x5448
   1da48:	movt	r3, #2
   1da4c:	str	r3, [sp, #60]	; 0x3c
   1da50:	mov	fp, #0
   1da54:	b	1d8b0 <__assert_fail@plt+0xb968>
   1da58:	mov	fp, #1
   1da5c:	str	fp, [sp, #28]
   1da60:	str	fp, [sp, #52]	; 0x34
   1da64:	movw	r3, #21576	; 0x5448
   1da68:	movt	r3, #2
   1da6c:	str	r3, [sp, #60]	; 0x3c
   1da70:	b	1d8b0 <__assert_fail@plt+0xb968>
   1da74:	mov	r3, #0
   1da78:	str	r3, [sp, #32]
   1da7c:	mov	fp, #1
   1da80:	str	fp, [sp, #52]	; 0x34
   1da84:	movw	r3, #21596	; 0x545c
   1da88:	movt	r3, #2
   1da8c:	str	r3, [sp, #60]	; 0x3c
   1da90:	mov	sl, #2
   1da94:	b	1d8b0 <__assert_fail@plt+0xb968>
   1da98:	mov	r3, r2
   1da9c:	add	r4, r6, r2
   1daa0:	ldr	r2, [sp, #24]
   1daa4:	cmp	r3, #1
   1daa8:	movls	r3, #0
   1daac:	movhi	r3, #1
   1dab0:	cmn	r2, #1
   1dab4:	movne	r3, #0
   1dab8:	cmp	r3, #0
   1dabc:	beq	1dacc <__assert_fail@plt+0xbb84>
   1dac0:	ldr	r0, [sp, #48]	; 0x30
   1dac4:	bl	11d50 <strlen@plt>
   1dac8:	str	r0, [sp, #24]
   1dacc:	ldr	r3, [sp, #24]
   1dad0:	cmp	r4, r3
   1dad4:	bhi	1ecc0 <__assert_fail@plt+0xcd78>
   1dad8:	ldr	r3, [sp, #48]	; 0x30
   1dadc:	add	r4, r3, r6
   1dae0:	ldr	r2, [sp, #52]	; 0x34
   1dae4:	ldr	r1, [sp, #60]	; 0x3c
   1dae8:	mov	r0, r4
   1daec:	bl	11b40 <memcmp@plt>
   1daf0:	cmp	r0, #0
   1daf4:	bne	1ecc0 <__assert_fail@plt+0xcd78>
   1daf8:	ldr	r3, [sp, #32]
   1dafc:	cmp	r3, #0
   1db00:	bne	1dd10 <__assert_fail@plt+0xbdc8>
   1db04:	ldrb	r4, [r4]
   1db08:	cmp	r4, #126	; 0x7e
   1db0c:	ldrls	pc, [pc, r4, lsl #2]
   1db10:	b	1e5c4 <__assert_fail@plt+0xc67c>
   1db14:	andeq	sp, r1, r4, asr sp
   1db18:	andeq	lr, r1, r4, asr #11
   1db1c:	andeq	lr, r1, r4, asr #11
   1db20:	andeq	lr, r1, r4, asr #11
   1db24:	andeq	lr, r1, r4, asr #11
   1db28:	andeq	lr, r1, r4, asr #11
   1db2c:	andeq	lr, r1, r4, asr #11
   1db30:	andeq	lr, r1, ip, ror #8
   1db34:	strdeq	sp, [r1], -r0
   1db38:	muleq	r1, r4, r3
   1db3c:	andeq	lr, r1, r0, asr #8
   1db40:	andeq	lr, r1, r8, lsr #7
   1db44:	andeq	lr, r1, r4
   1db48:	andeq	lr, r1, r8, lsl r0
   1db4c:	andeq	lr, r1, r4, asr #11
   1db50:	andeq	lr, r1, r4, asr #11
   1db54:	andeq	lr, r1, r4, asr #11
   1db58:	andeq	lr, r1, r4, asr #11
   1db5c:	andeq	lr, r1, r4, asr #11
   1db60:	andeq	lr, r1, r4, asr #11
   1db64:	andeq	lr, r1, r4, asr #11
   1db68:	andeq	lr, r1, r4, asr #11
   1db6c:	andeq	lr, r1, r4, asr #11
   1db70:	andeq	lr, r1, r4, asr #11
   1db74:	andeq	lr, r1, r4, asr #11
   1db78:	andeq	lr, r1, r4, asr #11
   1db7c:	andeq	lr, r1, r4, asr #11
   1db80:	andeq	lr, r1, r4, asr #11
   1db84:	andeq	lr, r1, r4, asr #11
   1db88:	andeq	lr, r1, r4, asr #11
   1db8c:	andeq	lr, r1, r4, asr #11
   1db90:	andeq	lr, r1, r4, asr #11
   1db94:	andeq	lr, r1, r0, ror #9
   1db98:	andeq	lr, r1, r4, lsl #10
   1db9c:	andeq	lr, r1, r4, lsl #10
   1dba0:	muleq	r1, ip, r4
   1dba4:	andeq	lr, r1, r4, lsl #10
   1dba8:	andeq	lr, r1, r4, lsr #20
   1dbac:	andeq	lr, r1, r4, lsl #10
   1dbb0:	andeq	lr, r1, r4, lsr #10
   1dbb4:	andeq	lr, r1, r4, lsl #10
   1dbb8:	andeq	lr, r1, r4, lsl #10
   1dbbc:	andeq	lr, r1, r4, lsl #10
   1dbc0:	andeq	lr, r1, r4, lsr #20
   1dbc4:	andeq	lr, r1, r4, lsr #20
   1dbc8:	andeq	lr, r1, r4, lsr #20
   1dbcc:	andeq	lr, r1, r4, lsr #20
   1dbd0:	andeq	lr, r1, r4, lsr #20
   1dbd4:	andeq	lr, r1, r4, lsr #20
   1dbd8:	andeq	lr, r1, r4, lsr #20
   1dbdc:	andeq	lr, r1, r4, lsr #20
   1dbe0:	andeq	lr, r1, r4, lsr #20
   1dbe4:	andeq	lr, r1, r4, lsr #20
   1dbe8:	andeq	lr, r1, r4, lsr #20
   1dbec:	andeq	lr, r1, r4, lsr #20
   1dbf0:	andeq	lr, r1, r4, lsr #20
   1dbf4:	andeq	lr, r1, r4, lsr #20
   1dbf8:	andeq	lr, r1, r4, lsr #20
   1dbfc:	andeq	lr, r1, r4, lsr #20
   1dc00:	andeq	lr, r1, r4, lsl #10
   1dc04:	andeq	lr, r1, r4, lsl #10
   1dc08:	andeq	lr, r1, r4, lsl #10
   1dc0c:	andeq	lr, r1, r4, lsl #10
   1dc10:	andeq	sp, r1, r4, lsl #29
   1dc14:	andeq	lr, r1, r4, asr #11
   1dc18:	andeq	lr, r1, r4, lsr #20
   1dc1c:	andeq	lr, r1, r4, lsr #20
   1dc20:	andeq	lr, r1, r4, lsr #20
   1dc24:	andeq	lr, r1, r4, lsr #20
   1dc28:	andeq	lr, r1, r4, lsr #20
   1dc2c:	andeq	lr, r1, r4, lsr #20
   1dc30:	andeq	lr, r1, r4, lsr #20
   1dc34:	andeq	lr, r1, r4, lsr #20
   1dc38:	andeq	lr, r1, r4, lsr #20
   1dc3c:	andeq	lr, r1, r4, lsr #20
   1dc40:	andeq	lr, r1, r4, lsr #20
   1dc44:	andeq	lr, r1, r4, lsr #20
   1dc48:	andeq	lr, r1, r4, lsr #20
   1dc4c:	andeq	lr, r1, r4, lsr #20
   1dc50:	andeq	lr, r1, r4, lsr #20
   1dc54:	andeq	lr, r1, r4, lsr #20
   1dc58:	andeq	lr, r1, r4, lsr #20
   1dc5c:	andeq	lr, r1, r4, lsr #20
   1dc60:	andeq	lr, r1, r4, lsr #20
   1dc64:	andeq	lr, r1, r4, lsr #20
   1dc68:	andeq	lr, r1, r4, lsr #20
   1dc6c:	andeq	lr, r1, r4, lsr #20
   1dc70:	andeq	lr, r1, r4, lsr #20
   1dc74:	andeq	lr, r1, r4, lsr #20
   1dc78:	andeq	lr, r1, r4, lsr #20
   1dc7c:	andeq	lr, r1, r4, lsr #20
   1dc80:	andeq	lr, r1, r4, lsl #10
   1dc84:			; <UNDEFINED> instruction: 0x0001e3bc
   1dc88:	andeq	lr, r1, r4, lsr #20
   1dc8c:	andeq	lr, r1, r4, lsl #10
   1dc90:	andeq	lr, r1, r4, lsr #20
   1dc94:	andeq	lr, r1, r4, lsl #10
   1dc98:	andeq	lr, r1, r4, lsr #20
   1dc9c:	andeq	lr, r1, r4, lsr #20
   1dca0:	andeq	lr, r1, r4, lsr #20
   1dca4:	andeq	lr, r1, r4, lsr #20
   1dca8:	andeq	lr, r1, r4, lsr #20
   1dcac:	andeq	lr, r1, r4, lsr #20
   1dcb0:	andeq	lr, r1, r4, lsr #20
   1dcb4:	andeq	lr, r1, r4, lsr #20
   1dcb8:	andeq	lr, r1, r4, lsr #20
   1dcbc:	andeq	lr, r1, r4, lsr #20
   1dcc0:	andeq	lr, r1, r4, lsr #20
   1dcc4:	andeq	lr, r1, r4, lsr #20
   1dcc8:	andeq	lr, r1, r4, lsr #20
   1dccc:	andeq	lr, r1, r4, lsr #20
   1dcd0:	andeq	lr, r1, r4, lsr #20
   1dcd4:	andeq	lr, r1, r4, lsr #20
   1dcd8:	andeq	lr, r1, r4, lsr #20
   1dcdc:	andeq	lr, r1, r4, lsr #20
   1dce0:	andeq	lr, r1, r4, lsr #20
   1dce4:	andeq	lr, r1, r4, lsr #20
   1dce8:	andeq	lr, r1, r4, lsr #20
   1dcec:	andeq	lr, r1, r4, lsr #20
   1dcf0:	andeq	lr, r1, r4, lsr #20
   1dcf4:	andeq	lr, r1, r4, lsr #20
   1dcf8:	andeq	lr, r1, r4, lsr #20
   1dcfc:	andeq	lr, r1, r4, lsr #20
   1dd00:	andeq	lr, r1, ip, ror r4
   1dd04:	andeq	lr, r1, r4, lsl #10
   1dd08:	andeq	lr, r1, ip, ror r4
   1dd0c:	muleq	r1, ip, r4
   1dd10:	mov	r8, r9
   1dd14:	mov	r7, sl
   1dd18:	b	1ec18 <__assert_fail@plt+0xccd0>
   1dd1c:	ldr	r3, [sp, #28]
   1dd20:	cmp	r3, #0
   1dd24:	bne	1dd44 <__assert_fail@plt+0xbdfc>
   1dd28:	ldr	r3, [sp, #156]	; 0x9c
   1dd2c:	tst	r3, #1
   1dd30:	bne	1e12c <__assert_fail@plt+0xc1e4>
   1dd34:	ldr	r3, [sp, #28]
   1dd38:	str	r3, [sp, #44]	; 0x2c
   1dd3c:	mov	r5, r3
   1dd40:	b	1e04c <__assert_fail@plt+0xc104>
   1dd44:	ldr	r3, [sp, #32]
   1dd48:	cmp	r3, #0
   1dd4c:	bne	1ebc8 <__assert_fail@plt+0xcc80>
   1dd50:	str	r3, [sp, #44]	; 0x2c
   1dd54:	ldr	r3, [sp, #36]	; 0x24
   1dd58:	eor	r3, r3, #1
   1dd5c:	cmp	sl, #2
   1dd60:	movne	r3, #0
   1dd64:	andeq	r3, r3, #1
   1dd68:	cmp	r3, #0
   1dd6c:	beq	1ddc4 <__assert_fail@plt+0xbe7c>
   1dd70:	cmp	r9, fp
   1dd74:	movhi	r2, #39	; 0x27
   1dd78:	strbhi	r2, [r8, fp]
   1dd7c:	add	r2, fp, #1
   1dd80:	cmp	r9, r2
   1dd84:	movhi	r1, #36	; 0x24
   1dd88:	strbhi	r1, [r8, r2]
   1dd8c:	add	r2, fp, #2
   1dd90:	cmp	r9, r2
   1dd94:	movhi	r1, #39	; 0x27
   1dd98:	strbhi	r1, [r8, r2]
   1dd9c:	add	r2, fp, #3
   1dda0:	cmp	r9, r2
   1dda4:	bls	1ec84 <__assert_fail@plt+0xcd3c>
   1dda8:	mov	r1, #92	; 0x5c
   1ddac:	strb	r1, [r8, r2]
   1ddb0:	add	fp, fp, #4
   1ddb4:	str	r3, [sp, #36]	; 0x24
   1ddb8:	mov	r5, #0
   1ddbc:	mov	r4, #48	; 0x30
   1ddc0:	b	1e098 <__assert_fail@plt+0xc150>
   1ddc4:	cmp	r9, fp
   1ddc8:	bhi	1ddf0 <__assert_fail@plt+0xbea8>
   1ddcc:	add	r1, fp, #1
   1ddd0:	ldr	r2, [sp, #56]	; 0x38
   1ddd4:	cmp	r2, #0
   1ddd8:	bne	1de18 <__assert_fail@plt+0xbed0>
   1dddc:	mov	r3, r5
   1dde0:	ldr	r5, [sp, #56]	; 0x38
   1dde4:	mov	fp, r1
   1dde8:	mov	r4, #48	; 0x30
   1ddec:	b	1e04c <__assert_fail@plt+0xc104>
   1ddf0:	mov	r2, #92	; 0x5c
   1ddf4:	strb	r2, [r8, fp]
   1ddf8:	add	r1, fp, #1
   1ddfc:	ldr	r2, [sp, #56]	; 0x38
   1de00:	cmp	r2, #0
   1de04:	moveq	r3, r5
   1de08:	moveq	r5, r2
   1de0c:	moveq	fp, r1
   1de10:	moveq	r4, #48	; 0x30
   1de14:	beq	1e098 <__assert_fail@plt+0xc150>
   1de18:	add	r2, r6, #1
   1de1c:	ldr	r0, [sp, #24]
   1de20:	cmp	r2, r0
   1de24:	bcs	1de40 <__assert_fail@plt+0xbef8>
   1de28:	ldr	r0, [sp, #48]	; 0x30
   1de2c:	ldrb	r2, [r0, r2]
   1de30:	sub	r2, r2, #48	; 0x30
   1de34:	uxtb	r2, r2
   1de38:	cmp	r2, #9
   1de3c:	bls	1de58 <__assert_fail@plt+0xbf10>
   1de40:	mov	r2, r3
   1de44:	mov	r3, r5
   1de48:	mov	r5, r2
   1de4c:	mov	fp, r1
   1de50:	mov	r4, #48	; 0x30
   1de54:	b	1e070 <__assert_fail@plt+0xc128>
   1de58:	cmp	r9, r1
   1de5c:	movhi	r2, #48	; 0x30
   1de60:	strbhi	r2, [r8, r1]
   1de64:	add	r2, fp, #2
   1de68:	cmp	r9, r2
   1de6c:	movhi	r1, #48	; 0x30
   1de70:	strbhi	r1, [r8, r2]
   1de74:	add	r1, fp, #3
   1de78:	b	1de40 <__assert_fail@plt+0xbef8>
   1de7c:	mov	r3, #0
   1de80:	str	r3, [sp, #44]	; 0x2c
   1de84:	cmp	sl, #2
   1de88:	beq	1dea4 <__assert_fail@plt+0xbf5c>
   1de8c:	cmp	sl, #5
   1de90:	beq	1debc <__assert_fail@plt+0xbf74>
   1de94:	mov	r5, #0
   1de98:	mov	r3, r5
   1de9c:	mov	r4, #63	; 0x3f
   1dea0:	b	1e04c <__assert_fail@plt+0xc104>
   1dea4:	ldr	r3, [sp, #32]
   1dea8:	cmp	r3, #0
   1deac:	bne	1ebd4 <__assert_fail@plt+0xcc8c>
   1deb0:	mov	r5, r3
   1deb4:	mov	r4, #63	; 0x3f
   1deb8:	b	1e5b4 <__assert_fail@plt+0xc66c>
   1debc:	ldr	r3, [sp, #156]	; 0x9c
   1dec0:	tst	r3, #4
   1dec4:	beq	1e9ec <__assert_fail@plt+0xcaa4>
   1dec8:	add	r2, r6, #2
   1decc:	ldr	r3, [sp, #24]
   1ded0:	cmp	r2, r3
   1ded4:	bcs	1e9fc <__assert_fail@plt+0xcab4>
   1ded8:	ldr	r3, [sp, #48]	; 0x30
   1dedc:	add	r3, r3, r6
   1dee0:	ldrb	r4, [r3, #1]
   1dee4:	cmp	r4, #63	; 0x3f
   1dee8:	movne	r5, #0
   1deec:	movne	r3, r5
   1def0:	movne	r4, #63	; 0x3f
   1def4:	bne	1e04c <__assert_fail@plt+0xc104>
   1def8:	ldr	r3, [sp, #48]	; 0x30
   1defc:	ldrb	r1, [r3, r2]
   1df00:	sub	r3, r1, #33	; 0x21
   1df04:	cmp	r3, #29
   1df08:	ldrls	pc, [pc, r3, lsl #2]
   1df0c:	b	1ea0c <__assert_fail@plt+0xcac4>
   1df10:	andeq	sp, r1, r8, lsl #31
   1df14:	andeq	lr, r1, ip, lsl #20
   1df18:	andeq	lr, r1, ip, lsl #20
   1df1c:	andeq	lr, r1, ip, lsl #20
   1df20:	andeq	lr, r1, ip, lsl #20
   1df24:	andeq	lr, r1, ip, lsl #20
   1df28:	andeq	sp, r1, r8, lsl #31
   1df2c:	andeq	sp, r1, r8, lsl #31
   1df30:	andeq	sp, r1, r8, lsl #31
   1df34:	andeq	lr, r1, ip, lsl #20
   1df38:	andeq	lr, r1, ip, lsl #20
   1df3c:	andeq	lr, r1, ip, lsl #20
   1df40:	andeq	sp, r1, r8, lsl #31
   1df44:	andeq	lr, r1, ip, lsl #20
   1df48:	andeq	sp, r1, r8, lsl #31
   1df4c:	andeq	lr, r1, ip, lsl #20
   1df50:	andeq	lr, r1, ip, lsl #20
   1df54:	andeq	lr, r1, ip, lsl #20
   1df58:	andeq	lr, r1, ip, lsl #20
   1df5c:	andeq	lr, r1, ip, lsl #20
   1df60:	andeq	lr, r1, ip, lsl #20
   1df64:	andeq	lr, r1, ip, lsl #20
   1df68:	andeq	lr, r1, ip, lsl #20
   1df6c:	andeq	lr, r1, ip, lsl #20
   1df70:	andeq	lr, r1, ip, lsl #20
   1df74:	andeq	lr, r1, ip, lsl #20
   1df78:	andeq	lr, r1, ip, lsl #20
   1df7c:	andeq	sp, r1, r8, lsl #31
   1df80:	andeq	sp, r1, r8, lsl #31
   1df84:	andeq	sp, r1, r8, lsl #31
   1df88:	ldr	r3, [sp, #32]
   1df8c:	cmp	r3, #0
   1df90:	bne	1ec78 <__assert_fail@plt+0xcd30>
   1df94:	cmp	r9, fp
   1df98:	movhi	r3, #63	; 0x3f
   1df9c:	strbhi	r3, [r8, fp]
   1dfa0:	add	r3, fp, #1
   1dfa4:	cmp	r9, r3
   1dfa8:	movhi	r0, #34	; 0x22
   1dfac:	strbhi	r0, [r8, r3]
   1dfb0:	add	r3, fp, #2
   1dfb4:	cmp	r9, r3
   1dfb8:	movhi	r0, #34	; 0x22
   1dfbc:	strbhi	r0, [r8, r3]
   1dfc0:	add	r3, fp, #3
   1dfc4:	cmp	r9, r3
   1dfc8:	movhi	r0, #63	; 0x3f
   1dfcc:	strbhi	r0, [r8, r3]
   1dfd0:	add	fp, fp, #4
   1dfd4:	ldr	r3, [sp, #32]
   1dfd8:	mov	r5, r3
   1dfdc:	mov	r4, r1
   1dfe0:	mov	r6, r2
   1dfe4:	b	1e04c <__assert_fail@plt+0xc104>
   1dfe8:	mov	r3, #0
   1dfec:	str	r3, [sp, #44]	; 0x2c
   1dff0:	mov	r4, #8
   1dff4:	mov	r3, #98	; 0x62
   1dff8:	b	1e038 <__assert_fail@plt+0xc0f0>
   1dffc:	mov	r3, #0
   1e000:	str	r3, [sp, #44]	; 0x2c
   1e004:	mov	r4, #12
   1e008:	mov	r3, #102	; 0x66
   1e00c:	b	1e038 <__assert_fail@plt+0xc0f0>
   1e010:	mov	r3, #0
   1e014:	str	r3, [sp, #44]	; 0x2c
   1e018:	mov	r4, #13
   1e01c:	mov	r3, #114	; 0x72
   1e020:	ldr	r2, [sp, #32]
   1e024:	cmp	sl, #2
   1e028:	movne	r2, #0
   1e02c:	andeq	r2, r2, #1
   1e030:	cmp	r2, #0
   1e034:	bne	1e458 <__assert_fail@plt+0xc510>
   1e038:	ldr	r2, [sp, #28]
   1e03c:	cmp	r2, #0
   1e040:	bne	1ea40 <__assert_fail@plt+0xcaf8>
   1e044:	mov	r5, r2
   1e048:	mov	r3, r2
   1e04c:	ldr	r2, [sp, #28]
   1e050:	eor	r2, r2, #1
   1e054:	cmp	sl, #2
   1e058:	orreq	r2, r2, #1
   1e05c:	eor	r2, r2, #1
   1e060:	ldr	r1, [sp, #32]
   1e064:	orr	r2, r1, r2
   1e068:	tst	r2, #255	; 0xff
   1e06c:	beq	1e098 <__assert_fail@plt+0xc150>
   1e070:	ldr	r2, [sp, #160]	; 0xa0
   1e074:	cmp	r2, #0
   1e078:	beq	1e098 <__assert_fail@plt+0xc150>
   1e07c:	ubfx	r1, r4, #5, #8
   1e080:	and	r2, r4, #31
   1e084:	ldr	r0, [sp, #160]	; 0xa0
   1e088:	ldr	r1, [r0, r1, lsl #2]
   1e08c:	lsr	r2, r1, r2
   1e090:	tst	r2, #1
   1e094:	bne	1e0a4 <__assert_fail@plt+0xc15c>
   1e098:	ldr	r2, [sp, #44]	; 0x2c
   1e09c:	cmp	r2, #0
   1e0a0:	beq	1e3f8 <__assert_fail@plt+0xc4b0>
   1e0a4:	ldr	r3, [sp, #32]
   1e0a8:	cmp	r3, #0
   1e0ac:	bne	1ebf8 <__assert_fail@plt+0xccb0>
   1e0b0:	ldr	r3, [sp, #36]	; 0x24
   1e0b4:	eor	r3, r3, #1
   1e0b8:	cmp	sl, #2
   1e0bc:	movne	r3, #0
   1e0c0:	andeq	r3, r3, #1
   1e0c4:	cmp	r3, #0
   1e0c8:	beq	1e100 <__assert_fail@plt+0xc1b8>
   1e0cc:	cmp	r9, fp
   1e0d0:	movhi	r2, #39	; 0x27
   1e0d4:	strbhi	r2, [r8, fp]
   1e0d8:	add	r2, fp, #1
   1e0dc:	cmp	r9, r2
   1e0e0:	movhi	r1, #36	; 0x24
   1e0e4:	strbhi	r1, [r8, r2]
   1e0e8:	add	r2, fp, #2
   1e0ec:	cmp	r9, r2
   1e0f0:	movhi	r1, #39	; 0x27
   1e0f4:	strbhi	r1, [r8, r2]
   1e0f8:	add	fp, fp, #3
   1e0fc:	str	r3, [sp, #36]	; 0x24
   1e100:	cmp	r9, fp
   1e104:	movhi	r3, #92	; 0x5c
   1e108:	strbhi	r3, [r8, fp]
   1e10c:	add	fp, fp, #1
   1e110:	cmp	fp, r9
   1e114:	strbcc	r4, [r8, fp]
   1e118:	add	fp, fp, #1
   1e11c:	cmp	r5, #0
   1e120:	ldr	r3, [sp, #40]	; 0x28
   1e124:	moveq	r3, r5
   1e128:	str	r3, [sp, #40]	; 0x28
   1e12c:	add	r6, r6, #1
   1e130:	ldr	r3, [sp, #24]
   1e134:	cmn	r3, #1
   1e138:	beq	1ea68 <__assert_fail@plt+0xcb20>
   1e13c:	ldr	r3, [sp, #24]
   1e140:	subs	r5, r3, r6
   1e144:	movne	r5, #1
   1e148:	cmp	r5, #0
   1e14c:	beq	1ea7c <__assert_fail@plt+0xcb34>
   1e150:	ldr	r3, [sp, #28]
   1e154:	cmp	sl, #2
   1e158:	moveq	r3, #0
   1e15c:	andne	r3, r3, #1
   1e160:	str	r3, [sp, #56]	; 0x38
   1e164:	ldr	r2, [sp, #52]	; 0x34
   1e168:	adds	r7, r2, #0
   1e16c:	movne	r7, #1
   1e170:	ands	r3, r3, r7
   1e174:	str	r3, [sp, #44]	; 0x2c
   1e178:	bne	1da98 <__assert_fail@plt+0xbb50>
   1e17c:	ldr	r3, [sp, #48]	; 0x30
   1e180:	ldrb	r4, [r3, r6]
   1e184:	cmp	r4, #126	; 0x7e
   1e188:	ldrls	pc, [pc, r4, lsl #2]
   1e18c:	b	1e5c4 <__assert_fail@plt+0xc67c>
   1e190:	andeq	sp, r1, ip, lsl sp
   1e194:	andeq	lr, r1, r4, asr #11
   1e198:	andeq	lr, r1, r4, asr #11
   1e19c:	andeq	lr, r1, r4, asr #11
   1e1a0:	andeq	lr, r1, r4, asr #11
   1e1a4:	andeq	lr, r1, r4, asr #11
   1e1a8:	andeq	lr, r1, r4, asr #11
   1e1ac:	andeq	lr, r1, r4, ror #8
   1e1b0:	strdeq	sp, [r1], -r0
   1e1b4:	muleq	r1, r4, r3
   1e1b8:	andeq	lr, r1, r8, lsr r4
   1e1bc:	andeq	lr, r1, r8, lsr #7
   1e1c0:	andeq	lr, r1, r4
   1e1c4:	andeq	lr, r1, r8, lsl r0
   1e1c8:	andeq	lr, r1, r4, asr #11
   1e1cc:	andeq	lr, r1, r4, asr #11
   1e1d0:	andeq	lr, r1, r4, asr #11
   1e1d4:	andeq	lr, r1, r4, asr #11
   1e1d8:	andeq	lr, r1, r4, asr #11
   1e1dc:	andeq	lr, r1, r4, asr #11
   1e1e0:	andeq	lr, r1, r4, asr #11
   1e1e4:	andeq	lr, r1, r4, asr #11
   1e1e8:	andeq	lr, r1, r4, asr #11
   1e1ec:	andeq	lr, r1, r4, asr #11
   1e1f0:	andeq	lr, r1, r4, asr #11
   1e1f4:	andeq	lr, r1, r4, asr #11
   1e1f8:	andeq	lr, r1, r4, asr #11
   1e1fc:	andeq	lr, r1, r4, asr #11
   1e200:	andeq	lr, r1, r4, asr #11
   1e204:	andeq	lr, r1, r4, asr #11
   1e208:	andeq	lr, r1, r4, asr #11
   1e20c:	andeq	lr, r1, r4, asr #11
   1e210:	andeq	lr, r1, r0, ror #9
   1e214:	ldrdeq	lr, [r1], -ip
   1e218:	ldrdeq	lr, [r1], -ip
   1e21c:	muleq	r1, ip, r4
   1e220:	ldrdeq	lr, [r1], -ip
   1e224:	andeq	lr, r1, r4, ror #19
   1e228:	ldrdeq	lr, [r1], -ip
   1e22c:	andeq	lr, r1, r4, lsr #10
   1e230:	ldrdeq	lr, [r1], -ip
   1e234:	ldrdeq	lr, [r1], -ip
   1e238:	ldrdeq	lr, [r1], -ip
   1e23c:	andeq	lr, r1, r4, ror #19
   1e240:	andeq	lr, r1, r4, ror #19
   1e244:	andeq	lr, r1, r4, ror #19
   1e248:	andeq	lr, r1, r4, ror #19
   1e24c:	andeq	lr, r1, r4, ror #19
   1e250:	andeq	lr, r1, r4, ror #19
   1e254:	andeq	lr, r1, r4, ror #19
   1e258:	andeq	lr, r1, r4, ror #19
   1e25c:	andeq	lr, r1, r4, ror #19
   1e260:	andeq	lr, r1, r4, ror #19
   1e264:	andeq	lr, r1, r4, ror #19
   1e268:	andeq	lr, r1, r4, ror #19
   1e26c:	andeq	lr, r1, r4, ror #19
   1e270:	andeq	lr, r1, r4, ror #19
   1e274:	andeq	lr, r1, r4, ror #19
   1e278:	andeq	lr, r1, r4, ror #19
   1e27c:	ldrdeq	lr, [r1], -ip
   1e280:	ldrdeq	lr, [r1], -ip
   1e284:	ldrdeq	lr, [r1], -ip
   1e288:	ldrdeq	lr, [r1], -ip
   1e28c:	andeq	sp, r1, r4, lsl #29
   1e290:	andeq	lr, r1, r4, asr #11
   1e294:	andeq	lr, r1, r4, ror #19
   1e298:	andeq	lr, r1, r4, ror #19
   1e29c:	andeq	lr, r1, r4, ror #19
   1e2a0:	andeq	lr, r1, r4, ror #19
   1e2a4:	andeq	lr, r1, r4, ror #19
   1e2a8:	andeq	lr, r1, r4, ror #19
   1e2ac:	andeq	lr, r1, r4, ror #19
   1e2b0:	andeq	lr, r1, r4, ror #19
   1e2b4:	andeq	lr, r1, r4, ror #19
   1e2b8:	andeq	lr, r1, r4, ror #19
   1e2bc:	andeq	lr, r1, r4, ror #19
   1e2c0:	andeq	lr, r1, r4, ror #19
   1e2c4:	andeq	lr, r1, r4, ror #19
   1e2c8:	andeq	lr, r1, r4, ror #19
   1e2cc:	andeq	lr, r1, r4, ror #19
   1e2d0:	andeq	lr, r1, r4, ror #19
   1e2d4:	andeq	lr, r1, r4, ror #19
   1e2d8:	andeq	lr, r1, r4, ror #19
   1e2dc:	andeq	lr, r1, r4, ror #19
   1e2e0:	andeq	lr, r1, r4, ror #19
   1e2e4:	andeq	lr, r1, r4, ror #19
   1e2e8:	andeq	lr, r1, r4, ror #19
   1e2ec:	andeq	lr, r1, r4, ror #19
   1e2f0:	andeq	lr, r1, r4, ror #19
   1e2f4:	andeq	lr, r1, r4, ror #19
   1e2f8:	andeq	lr, r1, r4, ror #19
   1e2fc:	ldrdeq	lr, [r1], -ip
   1e300:			; <UNDEFINED> instruction: 0x0001e3bc
   1e304:	andeq	lr, r1, r4, ror #19
   1e308:	ldrdeq	lr, [r1], -ip
   1e30c:	andeq	lr, r1, r4, ror #19
   1e310:	ldrdeq	lr, [r1], -ip
   1e314:	andeq	lr, r1, r4, ror #19
   1e318:	andeq	lr, r1, r4, ror #19
   1e31c:	andeq	lr, r1, r4, ror #19
   1e320:	andeq	lr, r1, r4, ror #19
   1e324:	andeq	lr, r1, r4, ror #19
   1e328:	andeq	lr, r1, r4, ror #19
   1e32c:	andeq	lr, r1, r4, ror #19
   1e330:	andeq	lr, r1, r4, ror #19
   1e334:	andeq	lr, r1, r4, ror #19
   1e338:	andeq	lr, r1, r4, ror #19
   1e33c:	andeq	lr, r1, r4, ror #19
   1e340:	andeq	lr, r1, r4, ror #19
   1e344:	andeq	lr, r1, r4, ror #19
   1e348:	andeq	lr, r1, r4, ror #19
   1e34c:	andeq	lr, r1, r4, ror #19
   1e350:	andeq	lr, r1, r4, ror #19
   1e354:	andeq	lr, r1, r4, ror #19
   1e358:	andeq	lr, r1, r4, ror #19
   1e35c:	andeq	lr, r1, r4, ror #19
   1e360:	andeq	lr, r1, r4, ror #19
   1e364:	andeq	lr, r1, r4, ror #19
   1e368:	andeq	lr, r1, r4, ror #19
   1e36c:	andeq	lr, r1, r4, ror #19
   1e370:	andeq	lr, r1, r4, ror #19
   1e374:	andeq	lr, r1, r4, ror #19
   1e378:	andeq	lr, r1, r4, ror #19
   1e37c:	andeq	lr, r1, ip, ror r4
   1e380:	ldrdeq	lr, [r1], -ip
   1e384:	andeq	lr, r1, ip, ror r4
   1e388:	muleq	r1, ip, r4
   1e38c:	mov	r3, #0
   1e390:	str	r3, [sp, #44]	; 0x2c
   1e394:	mov	r4, #9
   1e398:	mov	r3, #116	; 0x74
   1e39c:	b	1e020 <__assert_fail@plt+0xc0d8>
   1e3a0:	mov	r3, #0
   1e3a4:	str	r3, [sp, #44]	; 0x2c
   1e3a8:	mov	r4, #11
   1e3ac:	mov	r3, #118	; 0x76
   1e3b0:	b	1e038 <__assert_fail@plt+0xc0f0>
   1e3b4:	mov	r3, #0
   1e3b8:	str	r3, [sp, #44]	; 0x2c
   1e3bc:	cmp	sl, #2
   1e3c0:	beq	1e3e4 <__assert_fail@plt+0xc49c>
   1e3c4:	ldr	r3, [sp, #28]
   1e3c8:	ldr	r2, [sp, #32]
   1e3cc:	and	r3, r3, r2
   1e3d0:	tst	r7, r3
   1e3d4:	bne	1ea58 <__assert_fail@plt+0xcb10>
   1e3d8:	mov	r4, #92	; 0x5c
   1e3dc:	mov	r3, r4
   1e3e0:	b	1e038 <__assert_fail@plt+0xc0f0>
   1e3e4:	ldr	r3, [sp, #32]
   1e3e8:	cmp	r3, #0
   1e3ec:	bne	1ebe0 <__assert_fail@plt+0xcc98>
   1e3f0:	mov	r5, r3
   1e3f4:	mov	r4, #92	; 0x5c
   1e3f8:	eor	r3, r3, #1
   1e3fc:	ldr	r2, [sp, #36]	; 0x24
   1e400:	and	r3, r3, r2
   1e404:	tst	r3, #255	; 0xff
   1e408:	beq	1e110 <__assert_fail@plt+0xc1c8>
   1e40c:	cmp	r9, fp
   1e410:	movhi	r3, #39	; 0x27
   1e414:	strbhi	r3, [r8, fp]
   1e418:	add	r3, fp, #1
   1e41c:	cmp	r9, r3
   1e420:	movhi	r2, #39	; 0x27
   1e424:	strbhi	r2, [r8, r3]
   1e428:	add	fp, fp, #2
   1e42c:	mov	r3, #0
   1e430:	str	r3, [sp, #36]	; 0x24
   1e434:	b	1e110 <__assert_fail@plt+0xc1c8>
   1e438:	mov	r3, #110	; 0x6e
   1e43c:	b	1e020 <__assert_fail@plt+0xc0d8>
   1e440:	mov	r3, #110	; 0x6e
   1e444:	b	1e020 <__assert_fail@plt+0xc0d8>
   1e448:	mov	r3, #0
   1e44c:	str	r3, [sp, #44]	; 0x2c
   1e450:	mov	r3, #110	; 0x6e
   1e454:	b	1e020 <__assert_fail@plt+0xc0d8>
   1e458:	mov	r8, r9
   1e45c:	mov	r7, #2
   1e460:	b	1ec00 <__assert_fail@plt+0xccb8>
   1e464:	mov	r3, #97	; 0x61
   1e468:	b	1e038 <__assert_fail@plt+0xc0f0>
   1e46c:	mov	r3, #97	; 0x61
   1e470:	b	1e038 <__assert_fail@plt+0xc0f0>
   1e474:	mov	r3, #0
   1e478:	str	r3, [sp, #44]	; 0x2c
   1e47c:	ldr	r3, [sp, #24]
   1e480:	cmn	r3, #1
   1e484:	beq	1e4b0 <__assert_fail@plt+0xc568>
   1e488:	ldr	r3, [sp, #24]
   1e48c:	subs	r3, r3, #1
   1e490:	movne	r3, #1
   1e494:	cmp	r3, #0
   1e498:	bne	1ea18 <__assert_fail@plt+0xcad0>
   1e49c:	cmp	r6, #0
   1e4a0:	beq	1e4e0 <__assert_fail@plt+0xc598>
   1e4a4:	mov	r5, #0
   1e4a8:	mov	r3, r5
   1e4ac:	b	1e04c <__assert_fail@plt+0xc104>
   1e4b0:	ldr	r3, [sp, #48]	; 0x30
   1e4b4:	ldrb	r3, [r3, #1]
   1e4b8:	adds	r3, r3, #0
   1e4bc:	movne	r3, #1
   1e4c0:	b	1e494 <__assert_fail@plt+0xc54c>
   1e4c4:	mov	r3, #0
   1e4c8:	str	r3, [sp, #44]	; 0x2c
   1e4cc:	b	1e49c <__assert_fail@plt+0xc554>
   1e4d0:	mov	r3, #0
   1e4d4:	str	r3, [sp, #44]	; 0x2c
   1e4d8:	b	1e4e0 <__assert_fail@plt+0xc598>
   1e4dc:	ldr	r5, [sp, #44]	; 0x2c
   1e4e0:	ldr	r3, [sp, #32]
   1e4e4:	cmp	sl, #2
   1e4e8:	movne	r3, #0
   1e4ec:	andeq	r3, r3, #1
   1e4f0:	cmp	r3, #0
   1e4f4:	beq	1e04c <__assert_fail@plt+0xc104>
   1e4f8:	mov	r8, r9
   1e4fc:	mov	r7, #2
   1e500:	b	1ec00 <__assert_fail@plt+0xccb8>
   1e504:	ldr	r5, [sp, #32]
   1e508:	b	1e4e0 <__assert_fail@plt+0xc598>
   1e50c:	mov	r3, #0
   1e510:	str	r3, [sp, #44]	; 0x2c
   1e514:	mov	r5, r3
   1e518:	b	1e4e0 <__assert_fail@plt+0xc598>
   1e51c:	mov	r3, #0
   1e520:	str	r3, [sp, #44]	; 0x2c
   1e524:	cmp	sl, #2
   1e528:	strne	r5, [sp, #68]	; 0x44
   1e52c:	movne	r3, #0
   1e530:	movne	r4, #39	; 0x27
   1e534:	bne	1e04c <__assert_fail@plt+0xc104>
   1e538:	ldr	r3, [sp, #32]
   1e53c:	cmp	r3, #0
   1e540:	bne	1ebec <__assert_fail@plt+0xcca4>
   1e544:	ldr	r3, [sp, #72]	; 0x48
   1e548:	clz	r3, r3
   1e54c:	lsr	r3, r3, #5
   1e550:	cmp	r9, #0
   1e554:	moveq	r3, #0
   1e558:	cmp	r3, #0
   1e55c:	movne	r3, #0
   1e560:	bne	1e588 <__assert_fail@plt+0xc640>
   1e564:	cmp	r9, fp
   1e568:	movhi	r3, #39	; 0x27
   1e56c:	strbhi	r3, [r8, fp]
   1e570:	add	r3, fp, #1
   1e574:	cmp	r9, r3
   1e578:	movhi	r2, #92	; 0x5c
   1e57c:	strbhi	r2, [r8, r3]
   1e580:	mov	r3, r9
   1e584:	ldr	r9, [sp, #72]	; 0x48
   1e588:	add	r2, fp, #2
   1e58c:	cmp	r2, r3
   1e590:	movcc	r1, #39	; 0x27
   1e594:	strbcc	r1, [r8, r2]
   1e598:	add	fp, fp, #3
   1e59c:	str	r5, [sp, #68]	; 0x44
   1e5a0:	ldr	r2, [sp, #32]
   1e5a4:	str	r2, [sp, #36]	; 0x24
   1e5a8:	str	r9, [sp, #72]	; 0x48
   1e5ac:	mov	r9, r3
   1e5b0:	mov	r4, #39	; 0x27
   1e5b4:	mov	r3, #0
   1e5b8:	b	1e098 <__assert_fail@plt+0xc150>
   1e5bc:	mov	r3, #0
   1e5c0:	str	r3, [sp, #44]	; 0x2c
   1e5c4:	ldr	r7, [sp, #76]	; 0x4c
   1e5c8:	cmp	r7, #1
   1e5cc:	bne	1e604 <__assert_fail@plt+0xc6bc>
   1e5d0:	bl	11d2c <__ctype_b_loc@plt>
   1e5d4:	ldr	r2, [r0]
   1e5d8:	lsl	r3, r4, #1
   1e5dc:	ldrh	r5, [r2, r3]
   1e5e0:	ubfx	r5, r5, #14, #1
   1e5e4:	mov	ip, r7
   1e5e8:	eor	r3, r5, #1
   1e5ec:	ldr	r2, [sp, #28]
   1e5f0:	and	r3, r3, r2
   1e5f4:	ands	r3, r3, #255	; 0xff
   1e5f8:	beq	1e04c <__assert_fail@plt+0xc104>
   1e5fc:	mov	r5, #0
   1e600:	b	1e860 <__assert_fail@plt+0xc918>
   1e604:	mov	r2, #0
   1e608:	mov	r3, #0
   1e60c:	strd	r2, [sp, #104]	; 0x68
   1e610:	ldr	r3, [sp, #24]
   1e614:	cmn	r3, #1
   1e618:	beq	1e63c <__assert_fail@plt+0xc6f4>
   1e61c:	mov	r3, #0
   1e620:	str	r4, [sp, #88]	; 0x58
   1e624:	str	fp, [sp, #92]	; 0x5c
   1e628:	str	r8, [sp, #56]	; 0x38
   1e62c:	mov	r8, r3
   1e630:	str	r9, [sp, #84]	; 0x54
   1e634:	ldr	r9, [sp, #48]	; 0x30
   1e638:	b	1e788 <__assert_fail@plt+0xc840>
   1e63c:	ldr	r0, [sp, #48]	; 0x30
   1e640:	bl	11d50 <strlen@plt>
   1e644:	str	r0, [sp, #24]
   1e648:	b	1e61c <__assert_fail@plt+0xc6d4>
   1e64c:	mov	r1, fp
   1e650:	ldr	r4, [sp, #88]	; 0x58
   1e654:	mov	r2, r8
   1e658:	mov	ip, r8
   1e65c:	ldr	fp, [sp, #92]	; 0x5c
   1e660:	ldr	r8, [sp, #56]	; 0x38
   1e664:	ldr	r9, [sp, #84]	; 0x54
   1e668:	ldr	r0, [sp, #24]
   1e66c:	cmp	r7, r0
   1e670:	bcs	1e828 <__assert_fail@plt+0xc8e0>
   1e674:	ldrb	r3, [r1]
   1e678:	cmp	r3, #0
   1e67c:	beq	1e830 <__assert_fail@plt+0xc8e8>
   1e680:	mov	r3, r1
   1e684:	add	r2, r2, #1
   1e688:	add	r1, r6, r2
   1e68c:	cmp	r0, r1
   1e690:	bls	1e838 <__assert_fail@plt+0xc8f0>
   1e694:	ldrb	r1, [r3, #1]!
   1e698:	cmp	r1, #0
   1e69c:	bne	1e684 <__assert_fail@plt+0xc73c>
   1e6a0:	mov	ip, r2
   1e6a4:	mov	r5, #0
   1e6a8:	b	1e858 <__assert_fail@plt+0xc910>
   1e6ac:	ldr	r3, [sp, #56]	; 0x38
   1e6b0:	str	r3, [sp, #64]	; 0x40
   1e6b4:	ldr	r8, [sp, #84]	; 0x54
   1e6b8:	mov	r7, #2
   1e6bc:	b	1ec00 <__assert_fail@plt+0xccb8>
   1e6c0:	cmp	r2, r7
   1e6c4:	beq	1e764 <__assert_fail@plt+0xc81c>
   1e6c8:	ldrb	r3, [r2], #1
   1e6cc:	sub	r3, r3, #91	; 0x5b
   1e6d0:	cmp	r3, #33	; 0x21
   1e6d4:	ldrls	pc, [pc, r3, lsl #2]
   1e6d8:	b	1e6c0 <__assert_fail@plt+0xc778>
   1e6dc:	andeq	lr, r1, ip, lsr #13
   1e6e0:	andeq	lr, r1, ip, lsr #13
   1e6e4:	andeq	lr, r1, r0, asr #13
   1e6e8:	andeq	lr, r1, ip, lsr #13
   1e6ec:	andeq	lr, r1, r0, asr #13
   1e6f0:	andeq	lr, r1, ip, lsr #13
   1e6f4:	andeq	lr, r1, r0, asr #13
   1e6f8:	andeq	lr, r1, r0, asr #13
   1e6fc:	andeq	lr, r1, r0, asr #13
   1e700:	andeq	lr, r1, r0, asr #13
   1e704:	andeq	lr, r1, r0, asr #13
   1e708:	andeq	lr, r1, r0, asr #13
   1e70c:	andeq	lr, r1, r0, asr #13
   1e710:	andeq	lr, r1, r0, asr #13
   1e714:	andeq	lr, r1, r0, asr #13
   1e718:	andeq	lr, r1, r0, asr #13
   1e71c:	andeq	lr, r1, r0, asr #13
   1e720:	andeq	lr, r1, r0, asr #13
   1e724:	andeq	lr, r1, r0, asr #13
   1e728:	andeq	lr, r1, r0, asr #13
   1e72c:	andeq	lr, r1, r0, asr #13
   1e730:	andeq	lr, r1, r0, asr #13
   1e734:	andeq	lr, r1, r0, asr #13
   1e738:	andeq	lr, r1, r0, asr #13
   1e73c:	andeq	lr, r1, r0, asr #13
   1e740:	andeq	lr, r1, r0, asr #13
   1e744:	andeq	lr, r1, r0, asr #13
   1e748:	andeq	lr, r1, r0, asr #13
   1e74c:	andeq	lr, r1, r0, asr #13
   1e750:	andeq	lr, r1, r0, asr #13
   1e754:	andeq	lr, r1, r0, asr #13
   1e758:	andeq	lr, r1, r0, asr #13
   1e75c:	andeq	lr, r1, r0, asr #13
   1e760:	andeq	lr, r1, ip, lsr #13
   1e764:	ldr	r0, [sp, #100]	; 0x64
   1e768:	bl	11be8 <iswprint@plt>
   1e76c:	cmp	r0, #0
   1e770:	moveq	r5, #0
   1e774:	add	r8, r8, r4
   1e778:	add	r0, sp, #104	; 0x68
   1e77c:	bl	11af8 <mbsinit@plt>
   1e780:	cmp	r0, #0
   1e784:	bne	1e7f4 <__assert_fail@plt+0xc8ac>
   1e788:	add	r7, r6, r8
   1e78c:	add	fp, r9, r7
   1e790:	add	r3, sp, #104	; 0x68
   1e794:	ldr	r2, [sp, #24]
   1e798:	sub	r2, r2, r7
   1e79c:	mov	r1, fp
   1e7a0:	add	r0, sp, #100	; 0x64
   1e7a4:	bl	22550 <__assert_fail@plt+0x10608>
   1e7a8:	subs	r4, r0, #0
   1e7ac:	beq	1e844 <__assert_fail@plt+0xc8fc>
   1e7b0:	cmn	r4, #1
   1e7b4:	beq	1e80c <__assert_fail@plt+0xc8c4>
   1e7b8:	cmn	r4, #2
   1e7bc:	beq	1e64c <__assert_fail@plt+0xc704>
   1e7c0:	ldr	r3, [sp, #32]
   1e7c4:	cmp	sl, #2
   1e7c8:	movne	r3, #0
   1e7cc:	andeq	r3, r3, #1
   1e7d0:	cmp	r3, #0
   1e7d4:	beq	1e764 <__assert_fail@plt+0xc81c>
   1e7d8:	cmp	r4, #1
   1e7dc:	bls	1e764 <__assert_fail@plt+0xc81c>
   1e7e0:	add	r2, r7, #1
   1e7e4:	add	r2, r9, r2
   1e7e8:	add	r3, r9, r4
   1e7ec:	add	r7, r3, r7
   1e7f0:	b	1e6c8 <__assert_fail@plt+0xc780>
   1e7f4:	ldr	r4, [sp, #88]	; 0x58
   1e7f8:	mov	ip, r8
   1e7fc:	ldr	fp, [sp, #92]	; 0x5c
   1e800:	ldr	r8, [sp, #56]	; 0x38
   1e804:	ldr	r9, [sp, #84]	; 0x54
   1e808:	b	1e858 <__assert_fail@plt+0xc910>
   1e80c:	ldr	r4, [sp, #88]	; 0x58
   1e810:	mov	ip, r8
   1e814:	ldr	fp, [sp, #92]	; 0x5c
   1e818:	ldr	r8, [sp, #56]	; 0x38
   1e81c:	ldr	r9, [sp, #84]	; 0x54
   1e820:	mov	r5, #0
   1e824:	b	1e858 <__assert_fail@plt+0xc910>
   1e828:	mov	r5, #0
   1e82c:	b	1e858 <__assert_fail@plt+0xc910>
   1e830:	mov	r5, #0
   1e834:	b	1e858 <__assert_fail@plt+0xc910>
   1e838:	mov	ip, r2
   1e83c:	mov	r5, #0
   1e840:	b	1e858 <__assert_fail@plt+0xc910>
   1e844:	ldr	r4, [sp, #88]	; 0x58
   1e848:	mov	ip, r8
   1e84c:	ldr	fp, [sp, #92]	; 0x5c
   1e850:	ldr	r8, [sp, #56]	; 0x38
   1e854:	ldr	r9, [sp, #84]	; 0x54
   1e858:	cmp	ip, #1
   1e85c:	bls	1e5e8 <__assert_fail@plt+0xc6a0>
   1e860:	add	lr, r6, ip
   1e864:	ldr	r3, [sp, #48]	; 0x30
   1e868:	add	r1, r3, r6
   1e86c:	mov	r3, #0
   1e870:	eor	r0, r5, #1
   1e874:	ldr	r2, [sp, #28]
   1e878:	and	r0, r0, r2
   1e87c:	uxtb	r0, r0
   1e880:	str	r0, [sp, #56]	; 0x38
   1e884:	mov	r7, #92	; 0x5c
   1e888:	ldr	ip, [sp, #36]	; 0x24
   1e88c:	str	r5, [sp, #84]	; 0x54
   1e890:	ldr	r2, [sp, #44]	; 0x2c
   1e894:	b	1e904 <__assert_fail@plt+0xc9bc>
   1e898:	cmp	r2, #0
   1e89c:	beq	1e8ac <__assert_fail@plt+0xc964>
   1e8a0:	cmp	r9, fp
   1e8a4:	strbhi	r7, [r8, fp]
   1e8a8:	add	fp, fp, #1
   1e8ac:	add	r5, r6, #1
   1e8b0:	cmp	r5, lr
   1e8b4:	bcs	1e9c0 <__assert_fail@plt+0xca78>
   1e8b8:	eor	r2, r3, #1
   1e8bc:	and	r2, r2, ip
   1e8c0:	ands	r2, r2, #255	; 0xff
   1e8c4:	beq	1e9dc <__assert_fail@plt+0xca94>
   1e8c8:	cmp	r9, fp
   1e8cc:	movhi	r2, #39	; 0x27
   1e8d0:	strbhi	r2, [r8, fp]
   1e8d4:	add	r2, fp, #1
   1e8d8:	cmp	r9, r2
   1e8dc:	movhi	ip, #39	; 0x27
   1e8e0:	strbhi	ip, [r8, r2]
   1e8e4:	add	fp, fp, #2
   1e8e8:	ldr	ip, [sp, #56]	; 0x38
   1e8ec:	mov	r2, ip
   1e8f0:	mov	r6, r5
   1e8f4:	cmp	r9, fp
   1e8f8:	strbhi	r4, [r8, fp]
   1e8fc:	add	fp, fp, #1
   1e900:	ldrb	r4, [r1, #1]!
   1e904:	cmp	r0, #0
   1e908:	beq	1e898 <__assert_fail@plt+0xc950>
   1e90c:	ldr	r3, [sp, #32]
   1e910:	cmp	r3, #0
   1e914:	bne	1eba8 <__assert_fail@plt+0xcc60>
   1e918:	eor	r3, ip, #1
   1e91c:	cmp	sl, #2
   1e920:	movne	r3, #0
   1e924:	andeq	r3, r3, #1
   1e928:	cmp	r3, #0
   1e92c:	beq	1e964 <__assert_fail@plt+0xca1c>
   1e930:	cmp	r9, fp
   1e934:	movhi	ip, #39	; 0x27
   1e938:	strbhi	ip, [r8, fp]
   1e93c:	add	ip, fp, #1
   1e940:	cmp	r9, ip
   1e944:	movhi	r5, #36	; 0x24
   1e948:	strbhi	r5, [r8, ip]
   1e94c:	add	ip, fp, #2
   1e950:	cmp	r9, ip
   1e954:	movhi	r5, #39	; 0x27
   1e958:	strbhi	r5, [r8, ip]
   1e95c:	add	fp, fp, #3
   1e960:	mov	ip, r3
   1e964:	cmp	r9, fp
   1e968:	strbhi	r7, [r8, fp]
   1e96c:	add	r3, fp, #1
   1e970:	cmp	r9, r3
   1e974:	bls	1e984 <__assert_fail@plt+0xca3c>
   1e978:	lsr	r5, r4, #6
   1e97c:	add	r5, r5, #48	; 0x30
   1e980:	strb	r5, [r8, r3]
   1e984:	add	r3, fp, #2
   1e988:	cmp	r9, r3
   1e98c:	bls	1e99c <__assert_fail@plt+0xca54>
   1e990:	ubfx	r5, r4, #3, #3
   1e994:	add	r5, r5, #48	; 0x30
   1e998:	strb	r5, [r8, r3]
   1e99c:	add	fp, fp, #3
   1e9a0:	and	r4, r4, #7
   1e9a4:	add	r4, r4, #48	; 0x30
   1e9a8:	add	r5, r6, #1
   1e9ac:	cmp	r5, lr
   1e9b0:	bcs	1e9cc <__assert_fail@plt+0xca84>
   1e9b4:	ldr	r3, [sp, #56]	; 0x38
   1e9b8:	mov	r6, r5
   1e9bc:	b	1e8f4 <__assert_fail@plt+0xc9ac>
   1e9c0:	str	ip, [sp, #36]	; 0x24
   1e9c4:	ldr	r5, [sp, #84]	; 0x54
   1e9c8:	b	1e3f8 <__assert_fail@plt+0xc4b0>
   1e9cc:	str	ip, [sp, #36]	; 0x24
   1e9d0:	ldr	r5, [sp, #84]	; 0x54
   1e9d4:	mov	r3, r0
   1e9d8:	b	1e3f8 <__assert_fail@plt+0xc4b0>
   1e9dc:	mov	r6, r5
   1e9e0:	b	1e8f4 <__assert_fail@plt+0xc9ac>
   1e9e4:	ldr	r3, [sp, #44]	; 0x2c
   1e9e8:	b	1e04c <__assert_fail@plt+0xc104>
   1e9ec:	mov	r5, #0
   1e9f0:	mov	r3, r5
   1e9f4:	mov	r4, #63	; 0x3f
   1e9f8:	b	1e04c <__assert_fail@plt+0xc104>
   1e9fc:	mov	r5, #0
   1ea00:	mov	r3, r5
   1ea04:	mov	r4, #63	; 0x3f
   1ea08:	b	1e04c <__assert_fail@plt+0xc104>
   1ea0c:	mov	r5, #0
   1ea10:	mov	r3, r5
   1ea14:	b	1e04c <__assert_fail@plt+0xc104>
   1ea18:	mov	r5, #0
   1ea1c:	mov	r3, r5
   1ea20:	b	1e04c <__assert_fail@plt+0xc104>
   1ea24:	ldr	r5, [sp, #44]	; 0x2c
   1ea28:	ldr	r3, [sp, #32]
   1ea2c:	b	1e04c <__assert_fail@plt+0xc104>
   1ea30:	ldr	r5, [sp, #44]	; 0x2c
   1ea34:	mov	r3, #0
   1ea38:	str	r3, [sp, #44]	; 0x2c
   1ea3c:	b	1e04c <__assert_fail@plt+0xc104>
   1ea40:	mov	r4, r3
   1ea44:	mov	r5, #0
   1ea48:	b	1e0a4 <__assert_fail@plt+0xc15c>
   1ea4c:	mov	r5, #0
   1ea50:	mov	r4, #97	; 0x61
   1ea54:	b	1e0a4 <__assert_fail@plt+0xc15c>
   1ea58:	mov	r5, #0
   1ea5c:	mov	r3, r5
   1ea60:	mov	r4, #92	; 0x5c
   1ea64:	b	1e3f8 <__assert_fail@plt+0xc4b0>
   1ea68:	ldr	r3, [sp, #48]	; 0x30
   1ea6c:	ldrb	r5, [r3, r6]
   1ea70:	adds	r5, r5, #0
   1ea74:	movne	r5, #1
   1ea78:	b	1e148 <__assert_fail@plt+0xc200>
   1ea7c:	cmp	sl, #2
   1ea80:	movne	r3, #0
   1ea84:	moveq	r3, #1
   1ea88:	ldr	r1, [sp, #32]
   1ea8c:	cmp	fp, #0
   1ea90:	andeq	r2, r3, r1
   1ea94:	movne	r2, #0
   1ea98:	cmp	r2, #0
   1ea9c:	bne	1ebbc <__assert_fail@plt+0xcc74>
   1eaa0:	eor	r2, r1, #1
   1eaa4:	uxtb	r2, r2
   1eaa8:	and	r3, r3, r2
   1eaac:	ldr	r1, [sp, #68]	; 0x44
   1eab0:	ands	r3, r1, r3
   1eab4:	beq	1eb48 <__assert_fail@plt+0xcc00>
   1eab8:	ldr	r2, [sp, #40]	; 0x28
   1eabc:	cmp	r2, #0
   1eac0:	bne	1eaf8 <__assert_fail@plt+0xcbb0>
   1eac4:	ldr	r2, [sp, #72]	; 0x48
   1eac8:	adds	r2, r2, #0
   1eacc:	movne	r2, #1
   1ead0:	cmp	r9, #0
   1ead4:	movne	r2, #0
   1ead8:	str	r2, [sp, #68]	; 0x44
   1eadc:	mov	sl, #2
   1eae0:	ldr	r1, [sp, #40]	; 0x28
   1eae4:	str	r1, [sp, #32]
   1eae8:	cmp	r2, #0
   1eaec:	beq	1eb3c <__assert_fail@plt+0xcbf4>
   1eaf0:	ldr	r9, [sp, #72]	; 0x48
   1eaf4:	b	1d850 <__assert_fail@plt+0xb908>
   1eaf8:	ldr	r3, [sp, #168]	; 0xa8
   1eafc:	str	r3, [sp, #16]
   1eb00:	ldr	r3, [sp, #164]	; 0xa4
   1eb04:	str	r3, [sp, #12]
   1eb08:	ldr	r3, [sp, #160]	; 0xa0
   1eb0c:	str	r3, [sp, #8]
   1eb10:	ldr	r3, [sp, #156]	; 0x9c
   1eb14:	str	r3, [sp, #4]
   1eb18:	mov	r3, #5
   1eb1c:	str	r3, [sp]
   1eb20:	ldr	r3, [sp, #24]
   1eb24:	ldr	r2, [sp, #48]	; 0x30
   1eb28:	ldr	r1, [sp, #72]	; 0x48
   1eb2c:	ldr	r0, [sp, #64]	; 0x40
   1eb30:	bl	1d7d8 <__assert_fail@plt+0xb890>
   1eb34:	mov	fp, r0
   1eb38:	b	1ec58 <__assert_fail@plt+0xcd10>
   1eb3c:	mov	r8, r9
   1eb40:	mov	r2, r3
   1eb44:	b	1eb4c <__assert_fail@plt+0xcc04>
   1eb48:	mov	r8, r9
   1eb4c:	ldr	r3, [sp, #60]	; 0x3c
   1eb50:	cmp	r3, #0
   1eb54:	moveq	r2, #0
   1eb58:	andne	r2, r2, #1
   1eb5c:	cmp	r2, #0
   1eb60:	beq	1eb90 <__assert_fail@plt+0xcc48>
   1eb64:	mov	r2, r3
   1eb68:	ldrb	r3, [r3]
   1eb6c:	cmp	r3, #0
   1eb70:	beq	1eb90 <__assert_fail@plt+0xcc48>
   1eb74:	ldr	r1, [sp, #64]	; 0x40
   1eb78:	cmp	r8, fp
   1eb7c:	strbhi	r3, [r1, fp]
   1eb80:	add	fp, fp, #1
   1eb84:	ldrb	r3, [r2, #1]!
   1eb88:	cmp	r3, #0
   1eb8c:	bne	1eb78 <__assert_fail@plt+0xcc30>
   1eb90:	cmp	r8, fp
   1eb94:	bls	1ec58 <__assert_fail@plt+0xcd10>
   1eb98:	mov	r3, #0
   1eb9c:	ldr	r2, [sp, #64]	; 0x40
   1eba0:	strb	r3, [r2, fp]
   1eba4:	b	1ec58 <__assert_fail@plt+0xcd10>
   1eba8:	mov	r8, r9
   1ebac:	mov	r7, sl
   1ebb0:	ldr	r3, [sp, #32]
   1ebb4:	str	r3, [sp, #28]
   1ebb8:	b	1ec00 <__assert_fail@plt+0xccb8>
   1ebbc:	mov	r8, r9
   1ebc0:	mov	r7, #2
   1ebc4:	b	1ec00 <__assert_fail@plt+0xccb8>
   1ebc8:	mov	r8, r9
   1ebcc:	mov	r7, sl
   1ebd0:	b	1ec00 <__assert_fail@plt+0xccb8>
   1ebd4:	mov	r8, r9
   1ebd8:	mov	r7, sl
   1ebdc:	b	1ec00 <__assert_fail@plt+0xccb8>
   1ebe0:	mov	r8, r9
   1ebe4:	mov	r7, sl
   1ebe8:	b	1ec00 <__assert_fail@plt+0xccb8>
   1ebec:	mov	r8, r9
   1ebf0:	mov	r7, sl
   1ebf4:	b	1ec00 <__assert_fail@plt+0xccb8>
   1ebf8:	mov	r8, r9
   1ebfc:	mov	r7, sl
   1ec00:	ldr	r3, [sp, #28]
   1ec04:	cmp	r7, #2
   1ec08:	movne	r3, #0
   1ec0c:	andeq	r3, r3, #1
   1ec10:	cmp	r3, #0
   1ec14:	movne	r7, #4
   1ec18:	ldr	r3, [sp, #168]	; 0xa8
   1ec1c:	str	r3, [sp, #16]
   1ec20:	ldr	r3, [sp, #164]	; 0xa4
   1ec24:	str	r3, [sp, #12]
   1ec28:	mov	r3, #0
   1ec2c:	str	r3, [sp, #8]
   1ec30:	ldr	r3, [sp, #156]	; 0x9c
   1ec34:	bic	r3, r3, #2
   1ec38:	str	r3, [sp, #4]
   1ec3c:	str	r7, [sp]
   1ec40:	ldr	r3, [sp, #24]
   1ec44:	ldr	r2, [sp, #48]	; 0x30
   1ec48:	mov	r1, r8
   1ec4c:	ldr	r0, [sp, #64]	; 0x40
   1ec50:	bl	1d7d8 <__assert_fail@plt+0xb890>
   1ec54:	mov	fp, r0
   1ec58:	mov	r0, fp
   1ec5c:	add	sp, sp, #116	; 0x74
   1ec60:	ldrd	r4, [sp]
   1ec64:	ldrd	r6, [sp, #8]
   1ec68:	ldrd	r8, [sp, #16]
   1ec6c:	ldrd	sl, [sp, #24]
   1ec70:	add	sp, sp, #32
   1ec74:	pop	{pc}		; (ldr pc, [sp], #4)
   1ec78:	mov	r8, r9
   1ec7c:	mov	r7, sl
   1ec80:	b	1ec18 <__assert_fail@plt+0xccd0>
   1ec84:	add	fp, fp, #4
   1ec88:	str	r3, [sp, #36]	; 0x24
   1ec8c:	mov	r5, #0
   1ec90:	mov	r4, #48	; 0x30
   1ec94:	b	1e04c <__assert_fail@plt+0xc104>
   1ec98:	mov	r3, #1
   1ec9c:	str	r3, [sp, #32]
   1eca0:	str	r3, [sp, #28]
   1eca4:	str	r3, [sp, #52]	; 0x34
   1eca8:	movw	r3, #21576	; 0x5448
   1ecac:	movt	r3, #2
   1ecb0:	str	r3, [sp, #60]	; 0x3c
   1ecb4:	mov	fp, #0
   1ecb8:	mov	sl, #5
   1ecbc:	b	1d8b0 <__assert_fail@plt+0xb968>
   1ecc0:	ldr	r3, [sp, #48]	; 0x30
   1ecc4:	ldrb	r4, [r3, r6]
   1ecc8:	cmp	r4, #126	; 0x7e
   1eccc:	ldrls	pc, [pc, r4, lsl #2]
   1ecd0:	b	1e5bc <__assert_fail@plt+0xc674>
   1ecd4:	andeq	sp, r1, r4, asr #26
   1ecd8:			; <UNDEFINED> instruction: 0x0001e5bc
   1ecdc:			; <UNDEFINED> instruction: 0x0001e5bc
   1ece0:			; <UNDEFINED> instruction: 0x0001e5bc
   1ece4:			; <UNDEFINED> instruction: 0x0001e5bc
   1ece8:			; <UNDEFINED> instruction: 0x0001e5bc
   1ecec:			; <UNDEFINED> instruction: 0x0001e5bc
   1ecf0:	andeq	lr, r1, ip, asr #20
   1ecf4:	andeq	sp, r1, r8, ror #31
   1ecf8:	andeq	lr, r1, ip, lsl #7
   1ecfc:	andeq	lr, r1, r8, asr #8
   1ed00:	andeq	lr, r1, r0, lsr #7
   1ed04:	strdeq	sp, [r1], -ip
   1ed08:	andeq	lr, r1, r0, lsl r0
   1ed0c:			; <UNDEFINED> instruction: 0x0001e5bc
   1ed10:			; <UNDEFINED> instruction: 0x0001e5bc
   1ed14:			; <UNDEFINED> instruction: 0x0001e5bc
   1ed18:			; <UNDEFINED> instruction: 0x0001e5bc
   1ed1c:			; <UNDEFINED> instruction: 0x0001e5bc
   1ed20:			; <UNDEFINED> instruction: 0x0001e5bc
   1ed24:			; <UNDEFINED> instruction: 0x0001e5bc
   1ed28:			; <UNDEFINED> instruction: 0x0001e5bc
   1ed2c:			; <UNDEFINED> instruction: 0x0001e5bc
   1ed30:			; <UNDEFINED> instruction: 0x0001e5bc
   1ed34:			; <UNDEFINED> instruction: 0x0001e5bc
   1ed38:			; <UNDEFINED> instruction: 0x0001e5bc
   1ed3c:			; <UNDEFINED> instruction: 0x0001e5bc
   1ed40:			; <UNDEFINED> instruction: 0x0001e5bc
   1ed44:			; <UNDEFINED> instruction: 0x0001e5bc
   1ed48:			; <UNDEFINED> instruction: 0x0001e5bc
   1ed4c:			; <UNDEFINED> instruction: 0x0001e5bc
   1ed50:			; <UNDEFINED> instruction: 0x0001e5bc
   1ed54:	ldrdeq	lr, [r1], -r0
   1ed58:	andeq	lr, r1, ip, lsl #10
   1ed5c:	andeq	lr, r1, ip, lsl #10
   1ed60:	andeq	lr, r1, r4, asr #9
   1ed64:	andeq	lr, r1, ip, lsl #10
   1ed68:	andeq	lr, r1, r0, lsr sl
   1ed6c:	andeq	lr, r1, ip, lsl #10
   1ed70:	andeq	lr, r1, ip, lsl r5
   1ed74:	andeq	lr, r1, ip, lsl #10
   1ed78:	andeq	lr, r1, ip, lsl #10
   1ed7c:	andeq	lr, r1, ip, lsl #10
   1ed80:	andeq	lr, r1, r0, lsr sl
   1ed84:	andeq	lr, r1, r0, lsr sl
   1ed88:	andeq	lr, r1, r0, lsr sl
   1ed8c:	andeq	lr, r1, r0, lsr sl
   1ed90:	andeq	lr, r1, r0, lsr sl
   1ed94:	andeq	lr, r1, r0, lsr sl
   1ed98:	andeq	lr, r1, r0, lsr sl
   1ed9c:	andeq	lr, r1, r0, lsr sl
   1eda0:	andeq	lr, r1, r0, lsr sl
   1eda4:	andeq	lr, r1, r0, lsr sl
   1eda8:	andeq	lr, r1, r0, lsr sl
   1edac:	andeq	lr, r1, r0, lsr sl
   1edb0:	andeq	lr, r1, r0, lsr sl
   1edb4:	andeq	lr, r1, r0, lsr sl
   1edb8:	andeq	lr, r1, r0, lsr sl
   1edbc:	andeq	lr, r1, r0, lsr sl
   1edc0:	andeq	lr, r1, ip, lsl #10
   1edc4:	andeq	lr, r1, ip, lsl #10
   1edc8:	andeq	lr, r1, ip, lsl #10
   1edcc:	andeq	lr, r1, ip, lsl #10
   1edd0:	andeq	sp, r1, ip, ror lr
   1edd4:			; <UNDEFINED> instruction: 0x0001e5bc
   1edd8:	andeq	lr, r1, r0, lsr sl
   1eddc:	andeq	lr, r1, r0, lsr sl
   1ede0:	andeq	lr, r1, r0, lsr sl
   1ede4:	andeq	lr, r1, r0, lsr sl
   1ede8:	andeq	lr, r1, r0, lsr sl
   1edec:	andeq	lr, r1, r0, lsr sl
   1edf0:	andeq	lr, r1, r0, lsr sl
   1edf4:	andeq	lr, r1, r0, lsr sl
   1edf8:	andeq	lr, r1, r0, lsr sl
   1edfc:	andeq	lr, r1, r0, lsr sl
   1ee00:	andeq	lr, r1, r0, lsr sl
   1ee04:	andeq	lr, r1, r0, lsr sl
   1ee08:	andeq	lr, r1, r0, lsr sl
   1ee0c:	andeq	lr, r1, r0, lsr sl
   1ee10:	andeq	lr, r1, r0, lsr sl
   1ee14:	andeq	lr, r1, r0, lsr sl
   1ee18:	andeq	lr, r1, r0, lsr sl
   1ee1c:	andeq	lr, r1, r0, lsr sl
   1ee20:	andeq	lr, r1, r0, lsr sl
   1ee24:	andeq	lr, r1, r0, lsr sl
   1ee28:	andeq	lr, r1, r0, lsr sl
   1ee2c:	andeq	lr, r1, r0, lsr sl
   1ee30:	andeq	lr, r1, r0, lsr sl
   1ee34:	andeq	lr, r1, r0, lsr sl
   1ee38:	andeq	lr, r1, r0, lsr sl
   1ee3c:	andeq	lr, r1, r0, lsr sl
   1ee40:	andeq	lr, r1, ip, lsl #10
   1ee44:			; <UNDEFINED> instruction: 0x0001e3b4
   1ee48:	andeq	lr, r1, r0, lsr sl
   1ee4c:	andeq	lr, r1, ip, lsl #10
   1ee50:	andeq	lr, r1, r0, lsr sl
   1ee54:	andeq	lr, r1, ip, lsl #10
   1ee58:	andeq	lr, r1, r0, lsr sl
   1ee5c:	andeq	lr, r1, r0, lsr sl
   1ee60:	andeq	lr, r1, r0, lsr sl
   1ee64:	andeq	lr, r1, r0, lsr sl
   1ee68:	andeq	lr, r1, r0, lsr sl
   1ee6c:	andeq	lr, r1, r0, lsr sl
   1ee70:	andeq	lr, r1, r0, lsr sl
   1ee74:	andeq	lr, r1, r0, lsr sl
   1ee78:	andeq	lr, r1, r0, lsr sl
   1ee7c:	andeq	lr, r1, r0, lsr sl
   1ee80:	andeq	lr, r1, r0, lsr sl
   1ee84:	andeq	lr, r1, r0, lsr sl
   1ee88:	andeq	lr, r1, r0, lsr sl
   1ee8c:	andeq	lr, r1, r0, lsr sl
   1ee90:	andeq	lr, r1, r0, lsr sl
   1ee94:	andeq	lr, r1, r0, lsr sl
   1ee98:	andeq	lr, r1, r0, lsr sl
   1ee9c:	andeq	lr, r1, r0, lsr sl
   1eea0:	andeq	lr, r1, r0, lsr sl
   1eea4:	andeq	lr, r1, r0, lsr sl
   1eea8:	andeq	lr, r1, r0, lsr sl
   1eeac:	andeq	lr, r1, r0, lsr sl
   1eeb0:	andeq	lr, r1, r0, lsr sl
   1eeb4:	andeq	lr, r1, r0, lsr sl
   1eeb8:	andeq	lr, r1, r0, lsr sl
   1eebc:	andeq	lr, r1, r0, lsr sl
   1eec0:	andeq	lr, r1, r4, ror r4
   1eec4:	andeq	lr, r1, ip, lsl #10
   1eec8:	andeq	lr, r1, r4, ror r4
   1eecc:	andeq	lr, r1, r4, asr #9
   1eed0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1eed4:	strd	r6, [sp, #8]
   1eed8:	strd	r8, [sp, #16]
   1eedc:	strd	sl, [sp, #24]
   1eee0:	str	lr, [sp, #32]
   1eee4:	sub	sp, sp, #52	; 0x34
   1eee8:	mov	r5, r0
   1eeec:	str	r1, [sp, #24]
   1eef0:	str	r2, [sp, #28]
   1eef4:	mov	r4, r3
   1eef8:	bl	11d74 <__errno_location@plt>
   1eefc:	str	r0, [sp, #32]
   1ef00:	ldr	r3, [r0]
   1ef04:	str	r3, [sp, #36]	; 0x24
   1ef08:	movw	r3, #25204	; 0x6274
   1ef0c:	movt	r3, #3
   1ef10:	ldr	r6, [r3]
   1ef14:	cmn	r5, #-2147483647	; 0x80000001
   1ef18:	movne	r3, #0
   1ef1c:	moveq	r3, #1
   1ef20:	orrs	r3, r3, r5, lsr #31
   1ef24:	bne	1f088 <__assert_fail@plt+0xd140>
   1ef28:	movw	r3, #25204	; 0x6274
   1ef2c:	movt	r3, #3
   1ef30:	ldr	r2, [r3, #4]
   1ef34:	cmp	r2, r5
   1ef38:	bgt	1efa8 <__assert_fail@plt+0xd060>
   1ef3c:	str	r2, [sp, #44]	; 0x2c
   1ef40:	add	r3, r3, #8
   1ef44:	cmp	r6, r3
   1ef48:	beq	1f08c <__assert_fail@plt+0xd144>
   1ef4c:	sub	r2, r5, r2
   1ef50:	mov	r3, #8
   1ef54:	str	r3, [sp]
   1ef58:	mvn	r3, #-2147483648	; 0x80000000
   1ef5c:	add	r2, r2, #1
   1ef60:	add	r1, sp, #44	; 0x2c
   1ef64:	mov	r0, r6
   1ef68:	bl	212bc <__assert_fail@plt+0xf374>
   1ef6c:	mov	r6, r0
   1ef70:	movw	r3, #25204	; 0x6274
   1ef74:	movt	r3, #3
   1ef78:	str	r0, [r3]
   1ef7c:	movw	r7, #25204	; 0x6274
   1ef80:	movt	r7, #3
   1ef84:	ldr	r0, [r7, #4]
   1ef88:	ldr	r2, [sp, #44]	; 0x2c
   1ef8c:	sub	r2, r2, r0
   1ef90:	lsl	r2, r2, #3
   1ef94:	mov	r1, #0
   1ef98:	add	r0, r6, r0, lsl #3
   1ef9c:	bl	11d98 <memset@plt>
   1efa0:	ldr	r3, [sp, #44]	; 0x2c
   1efa4:	str	r3, [r7, #4]
   1efa8:	add	fp, r6, r5, lsl #3
   1efac:	ldr	r8, [r6, r5, lsl #3]
   1efb0:	ldr	r7, [fp, #4]
   1efb4:	ldr	r3, [r4, #4]
   1efb8:	orr	r9, r3, #1
   1efbc:	add	sl, r4, #8
   1efc0:	ldr	r3, [r4, #44]	; 0x2c
   1efc4:	str	r3, [sp, #16]
   1efc8:	ldr	r3, [r4, #40]	; 0x28
   1efcc:	str	r3, [sp, #12]
   1efd0:	str	sl, [sp, #8]
   1efd4:	str	r9, [sp, #4]
   1efd8:	ldr	r3, [r4]
   1efdc:	str	r3, [sp]
   1efe0:	ldr	r3, [sp, #28]
   1efe4:	ldr	r2, [sp, #24]
   1efe8:	mov	r1, r8
   1efec:	mov	r0, r7
   1eff0:	bl	1d7d8 <__assert_fail@plt+0xb890>
   1eff4:	cmp	r8, r0
   1eff8:	bhi	1f05c <__assert_fail@plt+0xd114>
   1effc:	add	r8, r0, #1
   1f000:	str	r8, [r6, r5, lsl #3]
   1f004:	movw	r3, #26832	; 0x68d0
   1f008:	movt	r3, #3
   1f00c:	cmp	r7, r3
   1f010:	beq	1f01c <__assert_fail@plt+0xd0d4>
   1f014:	mov	r0, r7
   1f018:	bl	1b778 <__assert_fail@plt+0x9830>
   1f01c:	mov	r0, r8
   1f020:	bl	210b8 <__assert_fail@plt+0xf170>
   1f024:	mov	r7, r0
   1f028:	str	r0, [fp, #4]
   1f02c:	ldr	r3, [r4, #44]	; 0x2c
   1f030:	str	r3, [sp, #16]
   1f034:	ldr	r3, [r4, #40]	; 0x28
   1f038:	str	r3, [sp, #12]
   1f03c:	str	sl, [sp, #8]
   1f040:	str	r9, [sp, #4]
   1f044:	ldr	r3, [r4]
   1f048:	str	r3, [sp]
   1f04c:	ldr	r3, [sp, #28]
   1f050:	ldr	r2, [sp, #24]
   1f054:	mov	r1, r8
   1f058:	bl	1d7d8 <__assert_fail@plt+0xb890>
   1f05c:	ldr	r3, [sp, #32]
   1f060:	ldr	r2, [sp, #36]	; 0x24
   1f064:	str	r2, [r3]
   1f068:	mov	r0, r7
   1f06c:	add	sp, sp, #52	; 0x34
   1f070:	ldrd	r4, [sp]
   1f074:	ldrd	r6, [sp, #8]
   1f078:	ldrd	r8, [sp, #16]
   1f07c:	ldrd	sl, [sp, #24]
   1f080:	add	sp, sp, #32
   1f084:	pop	{pc}		; (ldr pc, [sp], #4)
   1f088:	bl	11f24 <abort@plt>
   1f08c:	sub	r2, r5, r2
   1f090:	mov	r3, #8
   1f094:	str	r3, [sp]
   1f098:	mvn	r3, #-2147483648	; 0x80000000
   1f09c:	add	r2, r2, #1
   1f0a0:	add	r1, sp, #44	; 0x2c
   1f0a4:	mov	r0, #0
   1f0a8:	bl	212bc <__assert_fail@plt+0xf374>
   1f0ac:	mov	r6, r0
   1f0b0:	movw	r3, #25204	; 0x6274
   1f0b4:	movt	r3, #3
   1f0b8:	str	r0, [r3]
   1f0bc:	ldrd	r2, [r3, #8]
   1f0c0:	strd	r2, [r0]
   1f0c4:	b	1ef7c <__assert_fail@plt+0xd034>
   1f0c8:	strd	r4, [sp, #-16]!
   1f0cc:	str	r6, [sp, #8]
   1f0d0:	str	lr, [sp, #12]
   1f0d4:	mov	r4, r0
   1f0d8:	bl	11d74 <__errno_location@plt>
   1f0dc:	mov	r5, r0
   1f0e0:	ldr	r6, [r0]
   1f0e4:	cmp	r4, #0
   1f0e8:	ldr	r3, [pc, #32]	; 1f110 <__assert_fail@plt+0xd1c8>
   1f0ec:	moveq	r4, r3
   1f0f0:	mov	r1, #48	; 0x30
   1f0f4:	mov	r0, r4
   1f0f8:	bl	2142c <__assert_fail@plt+0xf4e4>
   1f0fc:	str	r6, [r5]
   1f100:	ldrd	r4, [sp]
   1f104:	ldr	r6, [sp, #8]
   1f108:	add	sp, sp, #12
   1f10c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f110:	ldrdeq	r6, [r3], -r0
   1f114:	subs	r3, r0, #0
   1f118:	ldr	r2, [pc, #8]	; 1f128 <__assert_fail@plt+0xd1e0>
   1f11c:	moveq	r3, r2
   1f120:	ldr	r0, [r3]
   1f124:	bx	lr
   1f128:	ldrdeq	r6, [r3], -r0
   1f12c:	subs	r3, r0, #0
   1f130:	ldr	r2, [pc, #8]	; 1f140 <__assert_fail@plt+0xd1f8>
   1f134:	moveq	r3, r2
   1f138:	str	r1, [r3]
   1f13c:	bx	lr
   1f140:	ldrdeq	r6, [r3], -r0
   1f144:	push	{lr}		; (str lr, [sp, #-4]!)
   1f148:	subs	r3, r0, #0
   1f14c:	ldr	r0, [pc, #44]	; 1f180 <__assert_fail@plt+0xd238>
   1f150:	moveq	r3, r0
   1f154:	add	r3, r3, #8
   1f158:	lsr	lr, r1, #5
   1f15c:	and	r1, r1, #31
   1f160:	ldr	ip, [r3, lr, lsl #2]
   1f164:	lsr	r0, ip, r1
   1f168:	eor	r2, r2, r0
   1f16c:	and	r2, r2, #1
   1f170:	eor	r1, ip, r2, lsl r1
   1f174:	str	r1, [r3, lr, lsl #2]
   1f178:	and	r0, r0, #1
   1f17c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f180:	ldrdeq	r6, [r3], -r0
   1f184:	subs	r3, r0, #0
   1f188:	ldr	r2, [pc, #12]	; 1f19c <__assert_fail@plt+0xd254>
   1f18c:	moveq	r3, r2
   1f190:	ldr	r0, [r3, #4]
   1f194:	str	r1, [r3, #4]
   1f198:	bx	lr
   1f19c:	ldrdeq	r6, [r3], -r0
   1f1a0:	subs	r3, r0, #0
   1f1a4:	ldr	r0, [pc, #44]	; 1f1d8 <__assert_fail@plt+0xd290>
   1f1a8:	moveq	r3, r0
   1f1ac:	mov	r0, #10
   1f1b0:	str	r0, [r3]
   1f1b4:	cmp	r2, #0
   1f1b8:	cmpne	r1, #0
   1f1bc:	beq	1f1cc <__assert_fail@plt+0xd284>
   1f1c0:	str	r1, [r3, #40]	; 0x28
   1f1c4:	str	r2, [r3, #44]	; 0x2c
   1f1c8:	bx	lr
   1f1cc:	str	r4, [sp, #-8]!
   1f1d0:	str	lr, [sp, #4]
   1f1d4:	bl	11f24 <abort@plt>
   1f1d8:	ldrdeq	r6, [r3], -r0
   1f1dc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1f1e0:	strd	r6, [sp, #8]
   1f1e4:	strd	r8, [sp, #16]
   1f1e8:	str	sl, [sp, #24]
   1f1ec:	str	lr, [sp, #28]
   1f1f0:	sub	sp, sp, #24
   1f1f4:	mov	r7, r0
   1f1f8:	mov	r8, r1
   1f1fc:	mov	r9, r2
   1f200:	mov	sl, r3
   1f204:	ldr	r4, [sp, #56]	; 0x38
   1f208:	cmp	r4, #0
   1f20c:	ldr	r3, [pc, #104]	; 1f27c <__assert_fail@plt+0xd334>
   1f210:	moveq	r4, r3
   1f214:	bl	11d74 <__errno_location@plt>
   1f218:	mov	r5, r0
   1f21c:	ldr	r6, [r0]
   1f220:	ldr	r3, [r4, #44]	; 0x2c
   1f224:	str	r3, [sp, #16]
   1f228:	ldr	r3, [r4, #40]	; 0x28
   1f22c:	str	r3, [sp, #12]
   1f230:	add	r3, r4, #8
   1f234:	str	r3, [sp, #8]
   1f238:	ldr	r3, [r4, #4]
   1f23c:	str	r3, [sp, #4]
   1f240:	ldr	r3, [r4]
   1f244:	str	r3, [sp]
   1f248:	mov	r3, sl
   1f24c:	mov	r2, r9
   1f250:	mov	r1, r8
   1f254:	mov	r0, r7
   1f258:	bl	1d7d8 <__assert_fail@plt+0xb890>
   1f25c:	str	r6, [r5]
   1f260:	add	sp, sp, #24
   1f264:	ldrd	r4, [sp]
   1f268:	ldrd	r6, [sp, #8]
   1f26c:	ldrd	r8, [sp, #16]
   1f270:	ldr	sl, [sp, #24]
   1f274:	add	sp, sp, #28
   1f278:	pop	{pc}		; (ldr pc, [sp], #4)
   1f27c:	ldrdeq	r6, [r3], -r0
   1f280:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f284:	strd	r6, [sp, #8]
   1f288:	strd	r8, [sp, #16]
   1f28c:	strd	sl, [sp, #24]
   1f290:	str	lr, [sp, #32]
   1f294:	sub	sp, sp, #44	; 0x2c
   1f298:	mov	r8, r0
   1f29c:	mov	sl, r1
   1f2a0:	mov	r6, r2
   1f2a4:	subs	r4, r3, #0
   1f2a8:	ldr	r3, [pc, #200]	; 1f378 <__assert_fail@plt+0xd430>
   1f2ac:	moveq	r4, r3
   1f2b0:	bl	11d74 <__errno_location@plt>
   1f2b4:	mov	r7, r0
   1f2b8:	ldr	fp, [r0]
   1f2bc:	ldr	r5, [r4, #4]
   1f2c0:	cmp	r6, #0
   1f2c4:	orreq	r5, r5, #1
   1f2c8:	add	r9, r4, #8
   1f2cc:	ldr	r3, [r4, #44]	; 0x2c
   1f2d0:	str	r3, [sp, #16]
   1f2d4:	ldr	r3, [r4, #40]	; 0x28
   1f2d8:	str	r3, [sp, #12]
   1f2dc:	str	r9, [sp, #8]
   1f2e0:	str	r5, [sp, #4]
   1f2e4:	ldr	r3, [r4]
   1f2e8:	str	r3, [sp]
   1f2ec:	str	sl, [sp, #36]	; 0x24
   1f2f0:	mov	r3, sl
   1f2f4:	str	r8, [sp, #32]
   1f2f8:	mov	r2, r8
   1f2fc:	mov	r1, #0
   1f300:	mov	r0, r1
   1f304:	bl	1d7d8 <__assert_fail@plt+0xb890>
   1f308:	mov	sl, r0
   1f30c:	add	r8, r0, #1
   1f310:	mov	r0, r8
   1f314:	bl	210b8 <__assert_fail@plt+0xf170>
   1f318:	str	r0, [sp, #28]
   1f31c:	ldr	r3, [r4, #44]	; 0x2c
   1f320:	str	r3, [sp, #16]
   1f324:	ldr	r3, [r4, #40]	; 0x28
   1f328:	str	r3, [sp, #12]
   1f32c:	str	r9, [sp, #8]
   1f330:	str	r5, [sp, #4]
   1f334:	ldr	r3, [r4]
   1f338:	str	r3, [sp]
   1f33c:	ldr	r3, [sp, #36]	; 0x24
   1f340:	ldr	r2, [sp, #32]
   1f344:	mov	r1, r8
   1f348:	bl	1d7d8 <__assert_fail@plt+0xb890>
   1f34c:	str	fp, [r7]
   1f350:	cmp	r6, #0
   1f354:	strne	sl, [r6]
   1f358:	ldr	r0, [sp, #28]
   1f35c:	add	sp, sp, #44	; 0x2c
   1f360:	ldrd	r4, [sp]
   1f364:	ldrd	r6, [sp, #8]
   1f368:	ldrd	r8, [sp, #16]
   1f36c:	ldrd	sl, [sp, #24]
   1f370:	add	sp, sp, #32
   1f374:	pop	{pc}		; (ldr pc, [sp], #4)
   1f378:	ldrdeq	r6, [r3], -r0
   1f37c:	str	r4, [sp, #-8]!
   1f380:	str	lr, [sp, #4]
   1f384:	mov	r3, r2
   1f388:	mov	r2, #0
   1f38c:	bl	1f280 <__assert_fail@plt+0xd338>
   1f390:	ldr	r4, [sp]
   1f394:	add	sp, sp, #4
   1f398:	pop	{pc}		; (ldr pc, [sp], #4)
   1f39c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1f3a0:	strd	r6, [sp, #8]
   1f3a4:	str	r8, [sp, #16]
   1f3a8:	str	lr, [sp, #20]
   1f3ac:	movw	r3, #25204	; 0x6274
   1f3b0:	movt	r3, #3
   1f3b4:	ldr	r7, [r3]
   1f3b8:	ldr	r3, [r3, #4]
   1f3bc:	cmp	r3, #1
   1f3c0:	ble	1f3ec <__assert_fail@plt+0xd4a4>
   1f3c4:	mov	r4, #1
   1f3c8:	add	r6, r7, #4
   1f3cc:	movw	r5, #25204	; 0x6274
   1f3d0:	movt	r5, #3
   1f3d4:	ldr	r0, [r6, r4, lsl #3]
   1f3d8:	bl	1b778 <__assert_fail@plt+0x9830>
   1f3dc:	add	r4, r4, #1
   1f3e0:	ldr	r3, [r5, #4]
   1f3e4:	cmp	r3, r4
   1f3e8:	bgt	1f3d4 <__assert_fail@plt+0xd48c>
   1f3ec:	ldr	r0, [r7, #4]
   1f3f0:	movw	r3, #26832	; 0x68d0
   1f3f4:	movt	r3, #3
   1f3f8:	cmp	r0, r3
   1f3fc:	beq	1f420 <__assert_fail@plt+0xd4d8>
   1f400:	bl	1b778 <__assert_fail@plt+0x9830>
   1f404:	movw	r3, #25204	; 0x6274
   1f408:	movt	r3, #3
   1f40c:	mov	r2, #256	; 0x100
   1f410:	str	r2, [r3, #8]
   1f414:	movw	r2, #26832	; 0x68d0
   1f418:	movt	r2, #3
   1f41c:	str	r2, [r3, #12]
   1f420:	ldr	r3, [pc, #64]	; 1f468 <__assert_fail@plt+0xd520>
   1f424:	cmp	r7, r3
   1f428:	beq	1f444 <__assert_fail@plt+0xd4fc>
   1f42c:	mov	r0, r7
   1f430:	bl	1b778 <__assert_fail@plt+0x9830>
   1f434:	movw	r3, #25204	; 0x6274
   1f438:	movt	r3, #3
   1f43c:	add	r2, r3, #8
   1f440:	str	r2, [r3]
   1f444:	movw	r3, #25204	; 0x6274
   1f448:	movt	r3, #3
   1f44c:	mov	r2, #1
   1f450:	str	r2, [r3, #4]
   1f454:	ldrd	r4, [sp]
   1f458:	ldrd	r6, [sp, #8]
   1f45c:	ldr	r8, [sp, #16]
   1f460:	add	sp, sp, #20
   1f464:	pop	{pc}		; (ldr pc, [sp], #4)
   1f468:	andeq	r6, r3, ip, ror r2
   1f46c:	str	r4, [sp, #-8]!
   1f470:	str	lr, [sp, #4]
   1f474:	ldr	r3, [pc, #16]	; 1f48c <__assert_fail@plt+0xd544>
   1f478:	mvn	r2, #0
   1f47c:	bl	1eed0 <__assert_fail@plt+0xcf88>
   1f480:	ldr	r4, [sp]
   1f484:	add	sp, sp, #4
   1f488:	pop	{pc}		; (ldr pc, [sp], #4)
   1f48c:	ldrdeq	r6, [r3], -r0
   1f490:	str	r4, [sp, #-8]!
   1f494:	str	lr, [sp, #4]
   1f498:	ldr	r3, [pc, #12]	; 1f4ac <__assert_fail@plt+0xd564>
   1f49c:	bl	1eed0 <__assert_fail@plt+0xcf88>
   1f4a0:	ldr	r4, [sp]
   1f4a4:	add	sp, sp, #4
   1f4a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1f4ac:	ldrdeq	r6, [r3], -r0
   1f4b0:	str	r4, [sp, #-8]!
   1f4b4:	str	lr, [sp, #4]
   1f4b8:	mov	r1, r0
   1f4bc:	mov	r0, #0
   1f4c0:	bl	1f46c <__assert_fail@plt+0xd524>
   1f4c4:	ldr	r4, [sp]
   1f4c8:	add	sp, sp, #4
   1f4cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1f4d0:	str	r4, [sp, #-8]!
   1f4d4:	str	lr, [sp, #4]
   1f4d8:	mov	r2, r1
   1f4dc:	mov	r1, r0
   1f4e0:	mov	r0, #0
   1f4e4:	bl	1f490 <__assert_fail@plt+0xd548>
   1f4e8:	ldr	r4, [sp]
   1f4ec:	add	sp, sp, #4
   1f4f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1f4f4:	strd	r4, [sp, #-12]!
   1f4f8:	str	lr, [sp, #8]
   1f4fc:	sub	sp, sp, #52	; 0x34
   1f500:	mov	r4, r0
   1f504:	mov	r5, r2
   1f508:	mov	r0, sp
   1f50c:	bl	1d644 <__assert_fail@plt+0xb6fc>
   1f510:	mov	r3, sp
   1f514:	mvn	r2, #0
   1f518:	mov	r1, r5
   1f51c:	mov	r0, r4
   1f520:	bl	1eed0 <__assert_fail@plt+0xcf88>
   1f524:	add	sp, sp, #52	; 0x34
   1f528:	ldrd	r4, [sp]
   1f52c:	add	sp, sp, #8
   1f530:	pop	{pc}		; (ldr pc, [sp], #4)
   1f534:	strd	r4, [sp, #-16]!
   1f538:	str	r6, [sp, #8]
   1f53c:	str	lr, [sp, #12]
   1f540:	sub	sp, sp, #48	; 0x30
   1f544:	mov	r4, r0
   1f548:	mov	r5, r2
   1f54c:	mov	r6, r3
   1f550:	mov	r0, sp
   1f554:	bl	1d644 <__assert_fail@plt+0xb6fc>
   1f558:	mov	r3, sp
   1f55c:	mov	r2, r6
   1f560:	mov	r1, r5
   1f564:	mov	r0, r4
   1f568:	bl	1eed0 <__assert_fail@plt+0xcf88>
   1f56c:	add	sp, sp, #48	; 0x30
   1f570:	ldrd	r4, [sp]
   1f574:	ldr	r6, [sp, #8]
   1f578:	add	sp, sp, #12
   1f57c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f580:	str	r4, [sp, #-8]!
   1f584:	str	lr, [sp, #4]
   1f588:	mov	r2, r1
   1f58c:	mov	r1, r0
   1f590:	mov	r0, #0
   1f594:	bl	1f4f4 <__assert_fail@plt+0xd5ac>
   1f598:	ldr	r4, [sp]
   1f59c:	add	sp, sp, #4
   1f5a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1f5a4:	str	r4, [sp, #-8]!
   1f5a8:	str	lr, [sp, #4]
   1f5ac:	mov	r3, r2
   1f5b0:	mov	r2, r1
   1f5b4:	mov	r1, r0
   1f5b8:	mov	r0, #0
   1f5bc:	bl	1f534 <__assert_fail@plt+0xd5ec>
   1f5c0:	ldr	r4, [sp]
   1f5c4:	add	sp, sp, #4
   1f5c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1f5cc:	strd	r4, [sp, #-12]!
   1f5d0:	str	lr, [sp, #8]
   1f5d4:	sub	sp, sp, #52	; 0x34
   1f5d8:	mov	r4, r0
   1f5dc:	mov	r5, r1
   1f5e0:	mov	r1, r2
   1f5e4:	ldr	r0, [pc, #92]	; 1f648 <__assert_fail@plt+0xd700>
   1f5e8:	ldrd	r2, [r0]
   1f5ec:	strd	r2, [sp]
   1f5f0:	ldrd	r2, [r0, #8]
   1f5f4:	strd	r2, [sp, #8]
   1f5f8:	ldrd	r2, [r0, #16]
   1f5fc:	strd	r2, [sp, #16]
   1f600:	ldrd	r2, [r0, #24]
   1f604:	strd	r2, [sp, #24]
   1f608:	ldrd	r2, [r0, #32]
   1f60c:	strd	r2, [sp, #32]
   1f610:	ldrd	r2, [r0, #40]	; 0x28
   1f614:	strd	r2, [sp, #40]	; 0x28
   1f618:	mov	r2, #1
   1f61c:	mov	r0, sp
   1f620:	bl	1f144 <__assert_fail@plt+0xd1fc>
   1f624:	mov	r3, sp
   1f628:	mov	r2, r5
   1f62c:	mov	r1, r4
   1f630:	mov	r0, #0
   1f634:	bl	1eed0 <__assert_fail@plt+0xcf88>
   1f638:	add	sp, sp, #52	; 0x34
   1f63c:	ldrd	r4, [sp]
   1f640:	add	sp, sp, #8
   1f644:	pop	{pc}		; (ldr pc, [sp], #4)
   1f648:	ldrdeq	r6, [r3], -r0
   1f64c:	str	r4, [sp, #-8]!
   1f650:	str	lr, [sp, #4]
   1f654:	mov	r2, r1
   1f658:	mvn	r1, #0
   1f65c:	bl	1f5cc <__assert_fail@plt+0xd684>
   1f660:	ldr	r4, [sp]
   1f664:	add	sp, sp, #4
   1f668:	pop	{pc}		; (ldr pc, [sp], #4)
   1f66c:	str	r4, [sp, #-8]!
   1f670:	str	lr, [sp, #4]
   1f674:	mov	r1, #58	; 0x3a
   1f678:	bl	1f64c <__assert_fail@plt+0xd704>
   1f67c:	ldr	r4, [sp]
   1f680:	add	sp, sp, #4
   1f684:	pop	{pc}		; (ldr pc, [sp], #4)
   1f688:	str	r4, [sp, #-8]!
   1f68c:	str	lr, [sp, #4]
   1f690:	mov	r2, #58	; 0x3a
   1f694:	bl	1f5cc <__assert_fail@plt+0xd684>
   1f698:	ldr	r4, [sp]
   1f69c:	add	sp, sp, #4
   1f6a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1f6a4:	strd	r4, [sp, #-12]!
   1f6a8:	str	lr, [sp, #8]
   1f6ac:	sub	sp, sp, #100	; 0x64
   1f6b0:	mov	r4, r0
   1f6b4:	mov	r5, r2
   1f6b8:	mov	r0, sp
   1f6bc:	bl	1d644 <__assert_fail@plt+0xb6fc>
   1f6c0:	ldrd	r2, [sp]
   1f6c4:	strd	r2, [sp, #48]	; 0x30
   1f6c8:	ldrd	r2, [sp, #8]
   1f6cc:	strd	r2, [sp, #56]	; 0x38
   1f6d0:	ldrd	r2, [sp, #16]
   1f6d4:	strd	r2, [sp, #64]	; 0x40
   1f6d8:	ldrd	r2, [sp, #24]
   1f6dc:	strd	r2, [sp, #72]	; 0x48
   1f6e0:	ldrd	r2, [sp, #32]
   1f6e4:	strd	r2, [sp, #80]	; 0x50
   1f6e8:	ldrd	r2, [sp, #40]	; 0x28
   1f6ec:	strd	r2, [sp, #88]	; 0x58
   1f6f0:	mov	r2, #1
   1f6f4:	mov	r1, #58	; 0x3a
   1f6f8:	add	r0, sp, #48	; 0x30
   1f6fc:	bl	1f144 <__assert_fail@plt+0xd1fc>
   1f700:	add	r3, sp, #48	; 0x30
   1f704:	mvn	r2, #0
   1f708:	mov	r1, r5
   1f70c:	mov	r0, r4
   1f710:	bl	1eed0 <__assert_fail@plt+0xcf88>
   1f714:	add	sp, sp, #100	; 0x64
   1f718:	ldrd	r4, [sp]
   1f71c:	add	sp, sp, #8
   1f720:	pop	{pc}		; (ldr pc, [sp], #4)
   1f724:	strd	r4, [sp, #-20]!	; 0xffffffec
   1f728:	strd	r6, [sp, #8]
   1f72c:	str	lr, [sp, #16]
   1f730:	sub	sp, sp, #52	; 0x34
   1f734:	mov	r4, r0
   1f738:	mov	r5, r3
   1f73c:	ldr	r3, [pc, #92]	; 1f7a0 <__assert_fail@plt+0xd858>
   1f740:	ldrd	r6, [r3]
   1f744:	strd	r6, [sp]
   1f748:	ldrd	r6, [r3, #8]
   1f74c:	strd	r6, [sp, #8]
   1f750:	ldrd	r6, [r3, #16]
   1f754:	strd	r6, [sp, #16]
   1f758:	ldrd	r6, [r3, #24]
   1f75c:	strd	r6, [sp, #24]
   1f760:	ldrd	r6, [r3, #32]
   1f764:	strd	r6, [sp, #32]
   1f768:	ldrd	r6, [r3, #40]	; 0x28
   1f76c:	strd	r6, [sp, #40]	; 0x28
   1f770:	mov	r0, sp
   1f774:	bl	1f1a0 <__assert_fail@plt+0xd258>
   1f778:	mov	r3, sp
   1f77c:	ldr	r2, [sp, #72]	; 0x48
   1f780:	mov	r1, r5
   1f784:	mov	r0, r4
   1f788:	bl	1eed0 <__assert_fail@plt+0xcf88>
   1f78c:	add	sp, sp, #52	; 0x34
   1f790:	ldrd	r4, [sp]
   1f794:	ldrd	r6, [sp, #8]
   1f798:	add	sp, sp, #16
   1f79c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f7a0:	ldrdeq	r6, [r3], -r0
   1f7a4:	push	{lr}		; (str lr, [sp, #-4]!)
   1f7a8:	sub	sp, sp, #12
   1f7ac:	mvn	ip, #0
   1f7b0:	str	ip, [sp]
   1f7b4:	bl	1f724 <__assert_fail@plt+0xd7dc>
   1f7b8:	add	sp, sp, #12
   1f7bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1f7c0:	str	r4, [sp, #-8]!
   1f7c4:	str	lr, [sp, #4]
   1f7c8:	mov	r3, r2
   1f7cc:	mov	r2, r1
   1f7d0:	mov	r1, r0
   1f7d4:	mov	r0, #0
   1f7d8:	bl	1f7a4 <__assert_fail@plt+0xd85c>
   1f7dc:	ldr	r4, [sp]
   1f7e0:	add	sp, sp, #4
   1f7e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1f7e8:	push	{lr}		; (str lr, [sp, #-4]!)
   1f7ec:	sub	sp, sp, #12
   1f7f0:	str	r3, [sp]
   1f7f4:	mov	r3, r2
   1f7f8:	mov	r2, r1
   1f7fc:	mov	r1, r0
   1f800:	mov	r0, #0
   1f804:	bl	1f724 <__assert_fail@plt+0xd7dc>
   1f808:	add	sp, sp, #12
   1f80c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f810:	str	r4, [sp, #-8]!
   1f814:	str	lr, [sp, #4]
   1f818:	ldr	r3, [pc, #12]	; 1f82c <__assert_fail@plt+0xd8e4>
   1f81c:	bl	1eed0 <__assert_fail@plt+0xcf88>
   1f820:	ldr	r4, [sp]
   1f824:	add	sp, sp, #4
   1f828:	pop	{pc}		; (ldr pc, [sp], #4)
   1f82c:	andeq	r6, r3, r4, lsl #5
   1f830:	str	r4, [sp, #-8]!
   1f834:	str	lr, [sp, #4]
   1f838:	mov	r2, r1
   1f83c:	mov	r1, r0
   1f840:	mov	r0, #0
   1f844:	bl	1f810 <__assert_fail@plt+0xd8c8>
   1f848:	ldr	r4, [sp]
   1f84c:	add	sp, sp, #4
   1f850:	pop	{pc}		; (ldr pc, [sp], #4)
   1f854:	str	r4, [sp, #-8]!
   1f858:	str	lr, [sp, #4]
   1f85c:	mvn	r2, #0
   1f860:	bl	1f810 <__assert_fail@plt+0xd8c8>
   1f864:	ldr	r4, [sp]
   1f868:	add	sp, sp, #4
   1f86c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f870:	str	r4, [sp, #-8]!
   1f874:	str	lr, [sp, #4]
   1f878:	mov	r1, r0
   1f87c:	mov	r0, #0
   1f880:	bl	1f854 <__assert_fail@plt+0xd90c>
   1f884:	ldr	r4, [sp]
   1f888:	add	sp, sp, #4
   1f88c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f890:	str	r7, [sp, #-8]!
   1f894:	str	lr, [sp, #4]
   1f898:	subs	r5, r0, #0
   1f89c:	beq	1f8f4 <__assert_fail@plt+0xd9ac>
   1f8a0:	movw	r3, #25200	; 0x6270
   1f8a4:	movt	r3, #3
   1f8a8:	ldr	r6, [r3]
   1f8ac:	bl	11d74 <__errno_location@plt>
   1f8b0:	ldr	r4, [r0]
   1f8b4:	cmp	r4, #0
   1f8b8:	mov	r2, #5
   1f8bc:	movweq	r1, #21696	; 0x54c0
   1f8c0:	movteq	r1, #2
   1f8c4:	movwne	r1, #21712	; 0x54d0
   1f8c8:	movtne	r1, #2
   1f8cc:	mov	r0, #0
   1f8d0:	bl	11b58 <dcgettext@plt>
   1f8d4:	mov	r7, r0
   1f8d8:	mov	r0, r5
   1f8dc:	bl	1f870 <__assert_fail@plt+0xd928>
   1f8e0:	mov	r3, r0
   1f8e4:	mov	r2, r7
   1f8e8:	mov	r1, r4
   1f8ec:	mov	r0, r6
   1f8f0:	bl	11c90 <error@plt>
   1f8f4:	bl	11f24 <abort@plt>
   1f8f8:	strd	r4, [sp, #-16]!
   1f8fc:	str	r6, [sp, #8]
   1f900:	str	lr, [sp, #12]
   1f904:	mov	r4, r0
   1f908:	ldr	r5, [r0]
   1f90c:	mvn	r2, #0
   1f910:	movw	r1, #2076	; 0x81c
   1f914:	bl	11e4c <__explicit_bzero_chk@plt>
   1f918:	mov	r0, r4
   1f91c:	bl	1b778 <__assert_fail@plt+0x9830>
   1f920:	cmp	r5, #0
   1f924:	moveq	r0, #0
   1f928:	beq	1f934 <__assert_fail@plt+0xd9ec>
   1f92c:	mov	r0, r5
   1f930:	bl	1b14c <__assert_fail@plt+0x9204>
   1f934:	ldrd	r4, [sp]
   1f938:	ldr	r6, [sp, #8]
   1f93c:	add	sp, sp, #12
   1f940:	pop	{pc}		; (ldr pc, [sp], #4)
   1f944:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1f948:	strd	r6, [sp, #8]
   1f94c:	strd	r8, [sp, #16]
   1f950:	strd	sl, [sp, #24]
   1f954:	str	lr, [sp, #32]
   1f958:	sub	sp, sp, #4
   1f95c:	subs	r6, r1, #0
   1f960:	beq	1f9e0 <__assert_fail@plt+0xda98>
   1f964:	mov	r7, r0
   1f968:	cmp	r0, #0
   1f96c:	beq	1fa5c <__assert_fail@plt+0xdb14>
   1f970:	movw	r1, #21728	; 0x54e0
   1f974:	movt	r1, #2
   1f978:	bl	2245c <__assert_fail@plt+0x10514>
   1f97c:	subs	r5, r0, #0
   1f980:	beq	1fa54 <__assert_fail@plt+0xdb0c>
   1f984:	movw	r0, #2076	; 0x81c
   1f988:	bl	21070 <__assert_fail@plt+0xf128>
   1f98c:	mov	r4, r0
   1f990:	str	r5, [r0]
   1f994:	movw	r3, #63632	; 0xf890
   1f998:	movt	r3, #1
   1f99c:	str	r3, [r0, #4]
   1f9a0:	str	r7, [r0, #8]
   1f9a4:	cmp	r6, #2048	; 0x800
   1f9a8:	movcc	r3, r6
   1f9ac:	movcs	r3, #2048	; 0x800
   1f9b0:	mov	r2, #0
   1f9b4:	add	r1, r0, #12
   1f9b8:	mov	r0, r5
   1f9bc:	bl	11d8c <setvbuf@plt>
   1f9c0:	mov	r0, r4
   1f9c4:	add	sp, sp, #4
   1f9c8:	ldrd	r4, [sp]
   1f9cc:	ldrd	r6, [sp, #8]
   1f9d0:	ldrd	r8, [sp, #16]
   1f9d4:	ldrd	sl, [sp, #24]
   1f9d8:	add	sp, sp, #32
   1f9dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1f9e0:	movw	r0, #2076	; 0x81c
   1f9e4:	bl	21070 <__assert_fail@plt+0xf128>
   1f9e8:	mov	r4, r0
   1f9ec:	mov	r2, #0
   1f9f0:	str	r2, [r0]
   1f9f4:	movw	r3, #63632	; 0xf890
   1f9f8:	movt	r3, #1
   1f9fc:	str	r3, [r0, #4]
   1fa00:	str	r2, [r0, #8]
   1fa04:	b	1f9c0 <__assert_fail@plt+0xda78>
   1fa08:	cmp	r5, r6
   1fa0c:	bcs	1faa4 <__assert_fail@plt+0xdb5c>
   1fa10:	mov	r2, fp
   1fa14:	sub	r1, r6, r5
   1fa18:	mov	r0, r5
   1fa1c:	bl	11ef4 <getrandom@plt>
   1fa20:	cmp	r0, #0
   1fa24:	addge	r5, r5, r0
   1fa28:	bge	1fa08 <__assert_fail@plt+0xdac0>
   1fa2c:	bl	11d74 <__errno_location@plt>
   1fa30:	mov	r8, r0
   1fa34:	ldr	r9, [r0]
   1fa38:	cmp	r9, #4
   1fa3c:	beq	1fa08 <__assert_fail@plt+0xdac0>
   1fa40:	mov	r0, r4
   1fa44:	bl	1f8f8 <__assert_fail@plt+0xd9b0>
   1fa48:	str	r9, [r8]
   1fa4c:	mov	r4, r7
   1fa50:	b	1f9c0 <__assert_fail@plt+0xda78>
   1fa54:	mov	r4, r5
   1fa58:	b	1f9c0 <__assert_fail@plt+0xda78>
   1fa5c:	movw	r0, #2076	; 0x81c
   1fa60:	bl	21070 <__assert_fail@plt+0xf128>
   1fa64:	mov	r4, r0
   1fa68:	mov	r3, #0
   1fa6c:	str	r3, [r0]
   1fa70:	movw	r2, #63632	; 0xf890
   1fa74:	movt	r2, #1
   1fa78:	str	r2, [r0, #4]
   1fa7c:	str	r3, [r0, #8]
   1fa80:	str	r3, [r0, #12]
   1fa84:	add	sl, r0, #16
   1fa88:	cmp	r6, #1024	; 0x400
   1fa8c:	addls	r6, sl, r6
   1fa90:	addhi	r6, sl, #1024	; 0x400
   1fa94:	cmp	sl, r6
   1fa98:	movcc	r5, sl
   1fa9c:	movcc	fp, #0
   1faa0:	bcc	1fa10 <__assert_fail@plt+0xdac8>
   1faa4:	mov	r0, sl
   1faa8:	bl	1fe78 <__assert_fail@plt+0xdf30>
   1faac:	b	1f9c0 <__assert_fail@plt+0xda78>
   1fab0:	str	r1, [r0, #4]
   1fab4:	bx	lr
   1fab8:	str	r1, [r0, #8]
   1fabc:	bx	lr
   1fac0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1fac4:	strd	r6, [sp, #8]
   1fac8:	strd	r8, [sp, #16]
   1facc:	str	sl, [sp, #24]
   1fad0:	str	lr, [sp, #28]
   1fad4:	mov	r6, r0
   1fad8:	mov	r5, r1
   1fadc:	mov	r4, r2
   1fae0:	ldr	r3, [r0]
   1fae4:	cmp	r3, #0
   1fae8:	beq	1fb44 <__assert_fail@plt+0xdbfc>
   1faec:	mov	r8, #1
   1faf0:	ldr	r3, [r6]
   1faf4:	mov	r2, r4
   1faf8:	mov	r1, r8
   1fafc:	mov	r0, r5
   1fb00:	bl	11ee8 <fread_unlocked@plt>
   1fb04:	mov	r7, r0
   1fb08:	bl	11d74 <__errno_location@plt>
   1fb0c:	ldr	r2, [r0]
   1fb10:	add	r5, r5, r7
   1fb14:	subs	r4, r4, r7
   1fb18:	beq	1fb6c <__assert_fail@plt+0xdc24>
   1fb1c:	ldr	r3, [r6]
   1fb20:	ldr	r3, [r3]
   1fb24:	and	r3, r3, #32
   1fb28:	cmp	r3, #0
   1fb2c:	moveq	r2, r3
   1fb30:	str	r2, [r0]
   1fb34:	ldr	r3, [r6, #4]
   1fb38:	ldr	r0, [r6, #8]
   1fb3c:	blx	r3
   1fb40:	b	1faf0 <__assert_fail@plt+0xdba8>
   1fb44:	ldr	r7, [r0, #12]
   1fb48:	cmp	r2, r7
   1fb4c:	bls	1fbfc <__assert_fail@plt+0xdcb4>
   1fb50:	add	r8, r0, #1040	; 0x410
   1fb54:	add	r8, r8, #12
   1fb58:	add	sl, r0, #16
   1fb5c:	mov	r9, #1024	; 0x400
   1fb60:	b	1fb9c <__assert_fail@plt+0xdc54>
   1fb64:	mov	r3, #0
   1fb68:	str	r3, [r6, #12]
   1fb6c:	ldrd	r4, [sp]
   1fb70:	ldrd	r6, [sp, #8]
   1fb74:	ldrd	r8, [sp, #16]
   1fb78:	ldr	sl, [sp, #24]
   1fb7c:	add	sp, sp, #28
   1fb80:	pop	{pc}		; (ldr pc, [sp], #4)
   1fb84:	mov	r1, r8
   1fb88:	mov	r0, sl
   1fb8c:	bl	1fc38 <__assert_fail@plt+0xdcf0>
   1fb90:	mov	r7, r9
   1fb94:	cmp	r4, #1024	; 0x400
   1fb98:	bls	1fbf8 <__assert_fail@plt+0xdcb0>
   1fb9c:	rsb	r1, r7, #1024	; 0x400
   1fba0:	mov	r2, r7
   1fba4:	add	r1, r8, r1
   1fba8:	mov	r0, r5
   1fbac:	bl	11ac8 <memcpy@plt>
   1fbb0:	add	r5, r5, r7
   1fbb4:	sub	r4, r4, r7
   1fbb8:	tst	r5, #3
   1fbbc:	bne	1fb84 <__assert_fail@plt+0xdc3c>
   1fbc0:	cmp	r4, #1024	; 0x400
   1fbc4:	bcc	1fb84 <__assert_fail@plt+0xdc3c>
   1fbc8:	add	r7, r6, #16
   1fbcc:	mov	r1, r5
   1fbd0:	mov	r0, r7
   1fbd4:	bl	1fc38 <__assert_fail@plt+0xdcf0>
   1fbd8:	add	r5, r5, #1024	; 0x400
   1fbdc:	subs	r4, r4, #1024	; 0x400
   1fbe0:	beq	1fb64 <__assert_fail@plt+0xdc1c>
   1fbe4:	cmp	r4, #1024	; 0x400
   1fbe8:	bcs	1fbcc <__assert_fail@plt+0xdc84>
   1fbec:	mov	r1, r8
   1fbf0:	add	r0, r6, #16
   1fbf4:	bl	1fc38 <__assert_fail@plt+0xdcf0>
   1fbf8:	mov	r7, #1024	; 0x400
   1fbfc:	sub	r1, r6, r7
   1fc00:	mov	r2, r4
   1fc04:	add	r1, r1, #2064	; 0x810
   1fc08:	add	r1, r1, #12
   1fc0c:	mov	r0, r5
   1fc10:	bl	11ac8 <memcpy@plt>
   1fc14:	sub	r4, r7, r4
   1fc18:	str	r4, [r6, #12]
   1fc1c:	b	1fb6c <__assert_fail@plt+0xdc24>
   1fc20:	str	r4, [sp, #-8]!
   1fc24:	str	lr, [sp, #4]
   1fc28:	bl	1f8f8 <__assert_fail@plt+0xd9b0>
   1fc2c:	ldr	r4, [sp]
   1fc30:	add	sp, sp, #4
   1fc34:	pop	{pc}		; (ldr pc, [sp], #4)
   1fc38:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1fc3c:	strd	r6, [sp, #8]
   1fc40:	str	r8, [sp, #16]
   1fc44:	str	lr, [sp, #20]
   1fc48:	ldr	r3, [r0, #1024]	; 0x400
   1fc4c:	ldr	r6, [r0, #1028]	; 0x404
   1fc50:	ldr	r2, [r0, #1032]	; 0x408
   1fc54:	add	r2, r2, #1
   1fc58:	str	r2, [r0, #1032]	; 0x408
   1fc5c:	add	r8, r6, r2
   1fc60:	mov	lr, r0
   1fc64:	add	r4, r1, #16
   1fc68:	add	r2, r0, #16
   1fc6c:	add	r5, r0, #528	; 0x210
   1fc70:	eor	r3, r3, r3, lsl #13
   1fc74:	ldr	ip, [r2, #496]	; 0x1f0
   1fc78:	add	r3, r3, ip
   1fc7c:	ldr	ip, [r2, #-16]
   1fc80:	and	r6, ip, #1020	; 0x3fc
   1fc84:	ldr	r6, [lr, r6]
   1fc88:	add	r6, r3, r6
   1fc8c:	add	r6, r6, r8
   1fc90:	str	r6, [r2, #-16]
   1fc94:	lsr	r6, r6, #8
   1fc98:	and	r6, r6, #1020	; 0x3fc
   1fc9c:	ldr	r7, [lr, r6]
   1fca0:	add	r7, ip, r7
   1fca4:	str	r7, [r4, #-16]
   1fca8:	eor	r3, r3, r3, lsr #6
   1fcac:	ldr	ip, [r2, #500]	; 0x1f4
   1fcb0:	add	r3, r3, ip
   1fcb4:	ldr	r6, [r2, #-12]
   1fcb8:	and	ip, r6, #1020	; 0x3fc
   1fcbc:	ldr	ip, [lr, ip]
   1fcc0:	add	ip, r3, ip
   1fcc4:	add	ip, ip, r7
   1fcc8:	str	ip, [r2, #-12]
   1fccc:	lsr	ip, ip, #8
   1fcd0:	and	ip, ip, #1020	; 0x3fc
   1fcd4:	ldr	r8, [lr, ip]
   1fcd8:	add	r8, r6, r8
   1fcdc:	str	r8, [r4, #-12]
   1fce0:	eor	r3, r3, r3, lsl #2
   1fce4:	ldr	ip, [r2, #504]	; 0x1f8
   1fce8:	add	r3, r3, ip
   1fcec:	ldr	ip, [r2, #-8]
   1fcf0:	and	r6, ip, #1020	; 0x3fc
   1fcf4:	ldr	r6, [lr, r6]
   1fcf8:	add	r6, r3, r6
   1fcfc:	add	r6, r6, r8
   1fd00:	str	r6, [r2, #-8]
   1fd04:	lsr	r6, r6, #8
   1fd08:	and	r6, r6, #1020	; 0x3fc
   1fd0c:	ldr	r7, [lr, r6]
   1fd10:	add	r7, ip, r7
   1fd14:	str	r7, [r4, #-8]
   1fd18:	eor	r3, r3, r3, lsr #16
   1fd1c:	ldr	ip, [r2, #508]	; 0x1fc
   1fd20:	add	r3, r3, ip
   1fd24:	ldr	r6, [r2, #-4]
   1fd28:	and	ip, r6, #1020	; 0x3fc
   1fd2c:	ldr	ip, [lr, ip]
   1fd30:	add	ip, r3, ip
   1fd34:	add	ip, ip, r7
   1fd38:	str	ip, [r2, #-4]
   1fd3c:	lsr	ip, ip, #8
   1fd40:	and	ip, ip, #1020	; 0x3fc
   1fd44:	ldr	r8, [lr, ip]
   1fd48:	add	r8, r6, r8
   1fd4c:	str	r8, [r4, #-4]
   1fd50:	add	r4, r4, #16
   1fd54:	add	r2, r2, #16
   1fd58:	cmp	r2, r5
   1fd5c:	bne	1fc70 <__assert_fail@plt+0xdd28>
   1fd60:	add	r1, r1, #528	; 0x210
   1fd64:	add	r2, r0, #528	; 0x210
   1fd68:	add	r4, r0, #1040	; 0x410
   1fd6c:	eor	r3, r3, r3, lsl #13
   1fd70:	ldr	ip, [r2, #-528]	; 0xfffffdf0
   1fd74:	add	r3, r3, ip
   1fd78:	ldr	ip, [r2, #-16]
   1fd7c:	and	r5, ip, #1020	; 0x3fc
   1fd80:	ldr	r6, [lr, r5]
   1fd84:	add	r6, r3, r6
   1fd88:	add	r6, r6, r8
   1fd8c:	str	r6, [r2, #-16]
   1fd90:	lsr	r6, r6, #8
   1fd94:	and	r6, r6, #1020	; 0x3fc
   1fd98:	ldr	r7, [lr, r6]
   1fd9c:	add	r7, ip, r7
   1fda0:	str	r7, [r1, #-16]
   1fda4:	eor	r3, r3, r3, lsr #6
   1fda8:	ldr	ip, [r2, #-524]	; 0xfffffdf4
   1fdac:	add	r3, r3, ip
   1fdb0:	ldr	r5, [r2, #-12]
   1fdb4:	and	ip, r5, #1020	; 0x3fc
   1fdb8:	ldr	ip, [lr, ip]
   1fdbc:	add	ip, r3, ip
   1fdc0:	add	ip, ip, r7
   1fdc4:	str	ip, [r2, #-12]
   1fdc8:	lsr	ip, ip, #8
   1fdcc:	and	ip, ip, #1020	; 0x3fc
   1fdd0:	ldr	r6, [lr, ip]
   1fdd4:	add	r6, r5, r6
   1fdd8:	str	r6, [r1, #-12]
   1fddc:	eor	r3, r3, r3, lsl #2
   1fde0:	ldr	ip, [r2, #-520]	; 0xfffffdf8
   1fde4:	add	r3, r3, ip
   1fde8:	ldr	ip, [r2, #-8]
   1fdec:	and	r5, ip, #1020	; 0x3fc
   1fdf0:	ldr	r5, [lr, r5]
   1fdf4:	add	r5, r3, r5
   1fdf8:	add	r5, r5, r6
   1fdfc:	str	r5, [r2, #-8]
   1fe00:	lsr	r5, r5, #8
   1fe04:	and	r5, r5, #1020	; 0x3fc
   1fe08:	ldr	r5, [lr, r5]
   1fe0c:	add	r5, ip, r5
   1fe10:	str	r5, [r1, #-8]
   1fe14:	eor	r3, r3, r3, lsr #16
   1fe18:	ldr	ip, [r2, #-516]	; 0xfffffdfc
   1fe1c:	add	r3, r3, ip
   1fe20:	ldr	r6, [r2, #-4]
   1fe24:	and	ip, r6, #1020	; 0x3fc
   1fe28:	ldr	ip, [lr, ip]
   1fe2c:	add	ip, r3, ip
   1fe30:	add	ip, ip, r5
   1fe34:	str	ip, [r2, #-4]
   1fe38:	lsr	ip, ip, #8
   1fe3c:	and	ip, ip, #1020	; 0x3fc
   1fe40:	ldr	r8, [lr, ip]
   1fe44:	add	r8, r6, r8
   1fe48:	str	r8, [r1, #-4]
   1fe4c:	add	r1, r1, #16
   1fe50:	add	r2, r2, #16
   1fe54:	cmp	r2, r4
   1fe58:	bne	1fd6c <__assert_fail@plt+0xde24>
   1fe5c:	str	r3, [r0, #1024]	; 0x400
   1fe60:	str	r8, [r0, #1028]	; 0x404
   1fe64:	ldrd	r4, [sp]
   1fe68:	ldrd	r6, [sp, #8]
   1fe6c:	ldr	r8, [sp, #16]
   1fe70:	add	sp, sp, #20
   1fe74:	pop	{pc}		; (ldr pc, [sp], #4)
   1fe78:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1fe7c:	strd	r6, [sp, #8]
   1fe80:	strd	r8, [sp, #16]
   1fe84:	str	sl, [sp, #24]
   1fe88:	str	lr, [sp, #28]
   1fe8c:	mov	r2, r0
   1fe90:	add	r6, r0, #1024	; 0x400
   1fe94:	mov	r9, r0
   1fe98:	movw	r5, #37145	; 0x9119
   1fe9c:	movt	r5, #12384	; 0x3060
   1fea0:	movw	r4, #59931	; 0xea1b
   1fea4:	movt	r4, #50415	; 0xc4ef
   1fea8:	movw	lr, #15433	; 0x3c49
   1feac:	movt	lr, #42266	; 0xa51a
   1feb0:	movw	ip, #19064	; 0x4a78
   1feb4:	movt	ip, #55594	; 0xd92a
   1feb8:	movw	r1, #6872	; 0x1ad8
   1febc:	movt	r1, #3906	; 0xf42
   1fec0:	movw	r8, #15947	; 0x3e4b
   1fec4:	movt	r8, #49942	; 0xc316
   1fec8:	mov	r7, #89	; 0x59
   1fecc:	movt	r7, #38361	; 0x95d9
   1fed0:	movw	r3, #57178	; 0xdf5a
   1fed4:	movt	r3, #4967	; 0x1367
   1fed8:	ldr	sl, [r9]
   1fedc:	add	r3, r3, sl
   1fee0:	ldr	sl, [r9, #4]
   1fee4:	add	r7, r7, sl
   1fee8:	ldr	sl, [r9, #8]
   1feec:	add	r8, r8, sl
   1fef0:	eor	r3, r3, r7, lsl #11
   1fef4:	ldr	sl, [r9, #12]
   1fef8:	add	sl, r3, sl
   1fefc:	add	r1, sl, r1
   1ff00:	add	r7, r7, r8
   1ff04:	eor	r7, r7, r8, lsr #2
   1ff08:	ldr	sl, [r9, #16]
   1ff0c:	add	sl, r7, sl
   1ff10:	add	ip, sl, ip
   1ff14:	add	r8, r8, r1
   1ff18:	eor	r8, r8, r1, lsl #8
   1ff1c:	ldr	sl, [r9, #20]
   1ff20:	add	sl, r8, sl
   1ff24:	add	lr, sl, lr
   1ff28:	add	r1, r1, ip
   1ff2c:	eor	r1, r1, ip, lsr #16
   1ff30:	ldr	sl, [r9, #24]
   1ff34:	add	sl, r1, sl
   1ff38:	add	r4, sl, r4
   1ff3c:	add	ip, ip, lr
   1ff40:	eor	ip, ip, lr, lsl #10
   1ff44:	ldr	sl, [r9, #28]
   1ff48:	add	sl, ip, sl
   1ff4c:	add	r5, sl, r5
   1ff50:	add	lr, lr, r4
   1ff54:	eor	lr, lr, r4, lsr #4
   1ff58:	add	r3, r3, lr
   1ff5c:	add	r4, r4, r5
   1ff60:	eor	r4, r4, r5, lsl #8
   1ff64:	add	r7, r7, r4
   1ff68:	add	r5, r5, r3
   1ff6c:	eor	r5, r5, r3, lsr #9
   1ff70:	add	r8, r8, r5
   1ff74:	add	r3, r3, r7
   1ff78:	str	r3, [r9]
   1ff7c:	str	r7, [r9, #4]
   1ff80:	str	r8, [r9, #8]
   1ff84:	str	r1, [r9, #12]
   1ff88:	str	ip, [r9, #16]
   1ff8c:	str	lr, [r9, #20]
   1ff90:	str	r4, [r9, #24]
   1ff94:	str	r5, [r9, #28]
   1ff98:	add	r9, r9, #32
   1ff9c:	cmp	r9, r6
   1ffa0:	bne	1fed8 <__assert_fail@plt+0xdf90>
   1ffa4:	ldr	r9, [r2]
   1ffa8:	add	r3, r3, r9
   1ffac:	ldr	r9, [r2, #4]
   1ffb0:	add	r7, r7, r9
   1ffb4:	ldr	r9, [r2, #8]
   1ffb8:	add	r8, r8, r9
   1ffbc:	eor	r3, r3, r7, lsl #11
   1ffc0:	ldr	r9, [r2, #12]
   1ffc4:	add	r9, r3, r9
   1ffc8:	add	r1, r9, r1
   1ffcc:	add	r7, r7, r8
   1ffd0:	eor	r7, r7, r8, lsr #2
   1ffd4:	ldr	r9, [r2, #16]
   1ffd8:	add	r9, r7, r9
   1ffdc:	add	ip, r9, ip
   1ffe0:	add	r8, r8, r1
   1ffe4:	eor	r8, r8, r1, lsl #8
   1ffe8:	ldr	r9, [r2, #20]
   1ffec:	add	r9, r8, r9
   1fff0:	add	lr, r9, lr
   1fff4:	add	r1, r1, ip
   1fff8:	eor	r1, r1, ip, lsr #16
   1fffc:	ldr	r9, [r2, #24]
   20000:	add	r9, r1, r9
   20004:	add	r4, r9, r4
   20008:	add	ip, ip, lr
   2000c:	eor	ip, ip, lr, lsl #10
   20010:	ldr	r9, [r2, #28]
   20014:	add	r9, ip, r9
   20018:	add	r5, r9, r5
   2001c:	add	lr, lr, r4
   20020:	eor	lr, lr, r4, lsr #4
   20024:	add	r3, r3, lr
   20028:	add	r4, r4, r5
   2002c:	eor	r4, r4, r5, lsl #8
   20030:	add	r7, r7, r4
   20034:	add	r5, r5, r3
   20038:	eor	r5, r5, r3, lsr #9
   2003c:	add	r8, r8, r5
   20040:	add	r3, r3, r7
   20044:	str	r3, [r2]
   20048:	str	r7, [r2, #4]
   2004c:	str	r8, [r2, #8]
   20050:	str	r1, [r2, #12]
   20054:	str	ip, [r2, #16]
   20058:	str	lr, [r2, #20]
   2005c:	str	r4, [r2, #24]
   20060:	str	r5, [r2, #28]
   20064:	add	r2, r2, #32
   20068:	cmp	r2, r6
   2006c:	bne	1ffa4 <__assert_fail@plt+0xe05c>
   20070:	mov	r3, #0
   20074:	str	r3, [r0, #1032]	; 0x408
   20078:	str	r3, [r0, #1028]	; 0x404
   2007c:	str	r3, [r0, #1024]	; 0x400
   20080:	ldrd	r4, [sp]
   20084:	ldrd	r6, [sp, #8]
   20088:	ldrd	r8, [sp, #16]
   2008c:	ldr	sl, [sp, #24]
   20090:	add	sp, sp, #28
   20094:	pop	{pc}		; (ldr pc, [sp], #4)
   20098:	strd	r4, [sp, #-16]!
   2009c:	str	r6, [sp, #8]
   200a0:	str	lr, [sp, #12]
   200a4:	mov	r4, r0
   200a8:	ldr	r3, [r0, #24]
   200ac:	ldr	r6, [r0, #20]
   200b0:	sub	r5, r3, r6
   200b4:	sub	r5, r5, #1
   200b8:	cmp	r3, r6
   200bc:	beq	20158 <__assert_fail@plt+0xe210>
   200c0:	ldr	r2, [r4, #36]	; 0x24
   200c4:	add	r3, r3, r2
   200c8:	bic	r3, r3, r2
   200cc:	ldr	r2, [r4, #16]
   200d0:	ldr	r1, [r4, #28]
   200d4:	sub	r0, r3, r2
   200d8:	sub	r2, r1, r2
   200dc:	cmp	r0, r2
   200e0:	movhi	r3, r1
   200e4:	str	r3, [r4, #24]
   200e8:	str	r3, [r4, #20]
   200ec:	ldr	r3, [r4, #72]	; 0x48
   200f0:	ldr	r2, [r4, #68]	; 0x44
   200f4:	sub	r3, r3, r2
   200f8:	cmp	r3, #3
   200fc:	bls	20168 <__assert_fail@plt+0xe220>
   20100:	ldr	r3, [r4, #68]	; 0x44
   20104:	str	r6, [r3]
   20108:	ldr	r3, [r4, #68]	; 0x44
   2010c:	add	r3, r3, #4
   20110:	str	r3, [r4, #68]	; 0x44
   20114:	ldr	r3, [r4, #116]	; 0x74
   20118:	ldr	r2, [r4, #112]	; 0x70
   2011c:	sub	r3, r3, r2
   20120:	cmp	r3, #3
   20124:	bls	20178 <__assert_fail@plt+0xe230>
   20128:	ldr	r3, [r4, #112]	; 0x70
   2012c:	str	r5, [r3]
   20130:	ldr	r3, [r4, #112]	; 0x70
   20134:	add	r3, r3, #4
   20138:	str	r3, [r4, #112]	; 0x70
   2013c:	ldr	r3, [r4]
   20140:	add	r3, r3, #1
   20144:	str	r3, [r4]
   20148:	ldrd	r4, [sp]
   2014c:	ldr	r6, [sp, #8]
   20150:	add	sp, sp, #12
   20154:	pop	{pc}		; (ldr pc, [sp], #4)
   20158:	ldrb	r2, [r0, #52]	; 0x34
   2015c:	orr	r2, r2, #2
   20160:	strb	r2, [r0, #52]	; 0x34
   20164:	b	200c0 <__assert_fail@plt+0xe178>
   20168:	mov	r1, #4
   2016c:	add	r0, r4, #56	; 0x38
   20170:	bl	22958 <_obstack_newchunk@@Base>
   20174:	b	20100 <__assert_fail@plt+0xe1b8>
   20178:	mov	r1, #4
   2017c:	add	r0, r4, #100	; 0x64
   20180:	bl	22958 <_obstack_newchunk@@Base>
   20184:	b	20128 <__assert_fail@plt+0xe1e0>
   20188:	strd	r4, [sp, #-20]!	; 0xffffffec
   2018c:	strd	r6, [sp, #8]
   20190:	str	lr, [sp, #16]
   20194:	sub	sp, sp, #12
   20198:	mov	r5, r0
   2019c:	mov	r4, #0
   201a0:	str	r4, [r0]
   201a4:	str	r4, [r0, #4]
   201a8:	str	r4, [r0, #8]
   201ac:	movw	r6, #8024	; 0x1f58
   201b0:	movt	r6, #2
   201b4:	movw	r7, #46968	; 0xb778
   201b8:	movt	r7, #1
   201bc:	str	r7, [sp]
   201c0:	mov	r3, r6
   201c4:	mov	r2, r4
   201c8:	mov	r1, r4
   201cc:	add	r0, r0, #12
   201d0:	bl	228f0 <_obstack_begin@@Base>
   201d4:	str	r7, [sp]
   201d8:	mov	r3, r6
   201dc:	mov	r2, r4
   201e0:	mov	r1, r4
   201e4:	add	r0, r5, #56	; 0x38
   201e8:	bl	228f0 <_obstack_begin@@Base>
   201ec:	str	r7, [sp]
   201f0:	mov	r3, r6
   201f4:	mov	r2, r4
   201f8:	mov	r1, r4
   201fc:	add	r0, r5, #100	; 0x64
   20200:	bl	228f0 <_obstack_begin@@Base>
   20204:	add	sp, sp, #12
   20208:	ldrd	r4, [sp]
   2020c:	ldrd	r6, [sp, #8]
   20210:	add	sp, sp, #16
   20214:	pop	{pc}		; (ldr pc, [sp], #4)
   20218:	str	r4, [sp, #-8]!
   2021c:	str	lr, [sp, #4]
   20220:	mov	r4, r0
   20224:	mov	r1, #0
   20228:	add	r0, r0, #12
   2022c:	bl	22aac <_obstack_free@@Base>
   20230:	mov	r1, #0
   20234:	add	r0, r4, #56	; 0x38
   20238:	bl	22aac <_obstack_free@@Base>
   2023c:	mov	r1, #0
   20240:	add	r0, r4, #100	; 0x64
   20244:	bl	22aac <_obstack_free@@Base>
   20248:	ldr	r4, [sp]
   2024c:	add	sp, sp, #4
   20250:	pop	{pc}		; (ldr pc, [sp], #4)
   20254:	strd	r4, [sp, #-24]!	; 0xffffffe8
   20258:	strd	r6, [sp, #8]
   2025c:	str	r8, [sp, #16]
   20260:	str	lr, [sp, #20]
   20264:	mov	r6, r0
   20268:	mov	r4, r1
   2026c:	mov	r8, #1
   20270:	add	r7, r1, #12
   20274:	b	203a4 <__assert_fail@plt+0xe45c>
   20278:	ldr	r3, [r4, #24]
   2027c:	ldr	r2, [r4, #20]
   20280:	cmp	r3, r2
   20284:	beq	202b0 <__assert_fail@plt+0xe368>
   20288:	ldr	r2, [r4, #28]
   2028c:	cmp	r3, r2
   20290:	beq	2037c <__assert_fail@plt+0xe434>
   20294:	ldr	r3, [r4, #24]
   20298:	add	r2, r3, #1
   2029c:	str	r2, [r4, #24]
   202a0:	mov	r2, #0
   202a4:	strb	r2, [r3]
   202a8:	mov	r0, r4
   202ac:	bl	20098 <__assert_fail@plt+0xe150>
   202b0:	ldr	r3, [r4, #72]	; 0x48
   202b4:	ldr	r2, [r4, #68]	; 0x44
   202b8:	sub	r3, r3, r2
   202bc:	cmp	r3, #3
   202c0:	bls	203e4 <__assert_fail@plt+0xe49c>
   202c4:	ldr	r3, [r4, #68]	; 0x44
   202c8:	mov	r2, #0
   202cc:	str	r2, [r3]
   202d0:	ldr	r3, [r4, #68]	; 0x44
   202d4:	add	r3, r3, #4
   202d8:	str	r3, [r4, #68]	; 0x44
   202dc:	ldr	r1, [r4, #64]	; 0x40
   202e0:	cmp	r3, r1
   202e4:	beq	203f4 <__assert_fail@plt+0xe4ac>
   202e8:	ldr	r2, [r4, #80]	; 0x50
   202ec:	add	r3, r3, r2
   202f0:	bic	r3, r3, r2
   202f4:	ldr	r2, [r4, #60]	; 0x3c
   202f8:	ldr	r0, [r4, #72]	; 0x48
   202fc:	sub	ip, r3, r2
   20300:	sub	r2, r0, r2
   20304:	cmp	ip, r2
   20308:	movhi	r3, r0
   2030c:	str	r3, [r4, #68]	; 0x44
   20310:	str	r3, [r4, #64]	; 0x40
   20314:	str	r1, [r4, #4]
   20318:	ldr	r1, [r4, #108]	; 0x6c
   2031c:	ldr	r3, [r4, #112]	; 0x70
   20320:	cmp	r3, r1
   20324:	beq	20404 <__assert_fail@plt+0xe4bc>
   20328:	ldr	r2, [r4, #124]	; 0x7c
   2032c:	add	r3, r3, r2
   20330:	bic	r3, r3, r2
   20334:	ldr	r2, [r4, #104]	; 0x68
   20338:	ldr	r0, [r4, #116]	; 0x74
   2033c:	sub	ip, r3, r2
   20340:	sub	r2, r0, r2
   20344:	cmp	ip, r2
   20348:	movhi	r3, r0
   2034c:	str	r3, [r4, #112]	; 0x70
   20350:	str	r3, [r4, #108]	; 0x6c
   20354:	str	r1, [r4, #8]
   20358:	mov	r0, r6
   2035c:	bl	11ab0 <ferror@plt>
   20360:	clz	r0, r0
   20364:	lsr	r0, r0, #5
   20368:	ldrd	r4, [sp]
   2036c:	ldrd	r6, [sp, #8]
   20370:	ldr	r8, [sp, #16]
   20374:	add	sp, sp, #20
   20378:	pop	{pc}		; (ldr pc, [sp], #4)
   2037c:	mov	r1, #1
   20380:	add	r0, r4, #12
   20384:	bl	22958 <_obstack_newchunk@@Base>
   20388:	b	20294 <__assert_fail@plt+0xe34c>
   2038c:	ldr	r3, [r4, #24]
   20390:	add	r2, r3, #1
   20394:	str	r2, [r4, #24]
   20398:	strb	r5, [r3]
   2039c:	cmp	r5, #0
   203a0:	beq	203d8 <__assert_fail@plt+0xe490>
   203a4:	mov	r0, r6
   203a8:	bl	11da4 <fgetc@plt>
   203ac:	mov	r5, r0
   203b0:	cmn	r0, #1
   203b4:	beq	20278 <__assert_fail@plt+0xe330>
   203b8:	ldr	r2, [r4, #28]
   203bc:	ldr	r3, [r4, #24]
   203c0:	cmp	r2, r3
   203c4:	bne	2038c <__assert_fail@plt+0xe444>
   203c8:	mov	r1, r8
   203cc:	mov	r0, r7
   203d0:	bl	22958 <_obstack_newchunk@@Base>
   203d4:	b	2038c <__assert_fail@plt+0xe444>
   203d8:	mov	r0, r4
   203dc:	bl	20098 <__assert_fail@plt+0xe150>
   203e0:	b	203a4 <__assert_fail@plt+0xe45c>
   203e4:	mov	r1, #4
   203e8:	add	r0, r4, #56	; 0x38
   203ec:	bl	22958 <_obstack_newchunk@@Base>
   203f0:	b	202c4 <__assert_fail@plt+0xe37c>
   203f4:	ldrb	r2, [r4, #96]	; 0x60
   203f8:	orr	r2, r2, #2
   203fc:	strb	r2, [r4, #96]	; 0x60
   20400:	b	202e8 <__assert_fail@plt+0xe3a0>
   20404:	ldrb	r2, [r4, #140]	; 0x8c
   20408:	orr	r2, r2, #2
   2040c:	strb	r2, [r4, #140]	; 0x8c
   20410:	b	20328 <__assert_fail@plt+0xe3e0>
   20414:	strd	r4, [sp, #-16]!
   20418:	str	r6, [sp, #8]
   2041c:	str	lr, [sp, #12]
   20420:	mov	r6, r1
   20424:	mov	r4, r2
   20428:	mov	r1, #0
   2042c:	bl	11e28 <setlocale@plt>
   20430:	subs	r5, r0, #0
   20434:	beq	20478 <__assert_fail@plt+0xe530>
   20438:	mov	r0, r5
   2043c:	bl	11d50 <strlen@plt>
   20440:	cmp	r4, r0
   20444:	bhi	20494 <__assert_fail@plt+0xe54c>
   20448:	cmp	r4, #0
   2044c:	moveq	r0, #34	; 0x22
   20450:	beq	204a8 <__assert_fail@plt+0xe560>
   20454:	sub	r4, r4, #1
   20458:	mov	r2, r4
   2045c:	mov	r1, r5
   20460:	mov	r0, r6
   20464:	bl	11ac8 <memcpy@plt>
   20468:	mov	r3, #0
   2046c:	strb	r3, [r6, r4]
   20470:	mov	r0, #34	; 0x22
   20474:	b	204a8 <__assert_fail@plt+0xe560>
   20478:	cmp	r4, #0
   2047c:	moveq	r0, #22
   20480:	beq	204a8 <__assert_fail@plt+0xe560>
   20484:	mov	r3, #0
   20488:	strb	r3, [r6]
   2048c:	mov	r0, #22
   20490:	b	204a8 <__assert_fail@plt+0xe560>
   20494:	add	r2, r0, #1
   20498:	mov	r1, r5
   2049c:	mov	r0, r6
   204a0:	bl	11ac8 <memcpy@plt>
   204a4:	mov	r0, #0
   204a8:	ldrd	r4, [sp]
   204ac:	ldr	r6, [sp, #8]
   204b0:	add	sp, sp, #12
   204b4:	pop	{pc}		; (ldr pc, [sp], #4)
   204b8:	str	r4, [sp, #-8]!
   204bc:	str	lr, [sp, #4]
   204c0:	mov	r1, #0
   204c4:	bl	11e28 <setlocale@plt>
   204c8:	ldr	r4, [sp]
   204cc:	add	sp, sp, #4
   204d0:	pop	{pc}		; (ldr pc, [sp], #4)
   204d4:	str	r4, [sp, #-8]!
   204d8:	str	lr, [sp, #4]
   204dc:	bl	11cc0 <mkstemp64@plt>
   204e0:	bl	20a60 <__assert_fail@plt+0xeb18>
   204e4:	ldr	r4, [sp]
   204e8:	add	sp, sp, #4
   204ec:	pop	{pc}		; (ldr pc, [sp], #4)
   204f0:	str	r4, [sp, #-8]!
   204f4:	str	lr, [sp, #4]
   204f8:	mov	r4, r1
   204fc:	bl	11c0c <mkostemp64@plt>
   20500:	mov	r1, r4
   20504:	bl	223d4 <__assert_fail@plt+0x1048c>
   20508:	ldr	r4, [sp]
   2050c:	add	sp, sp, #4
   20510:	pop	{pc}		; (ldr pc, [sp], #4)
   20514:	strd	r4, [sp, #-16]!
   20518:	str	r6, [sp, #8]
   2051c:	str	lr, [sp, #12]
   20520:	mov	ip, r0
   20524:	ldrb	lr, [r0]
   20528:	ldrb	r4, [r1]
   2052c:	cmp	lr, #45	; 0x2d
   20530:	beq	2056c <__assert_fail@plt+0xe624>
   20534:	cmp	r4, #45	; 0x2d
   20538:	bne	20844 <__assert_fail@plt+0xe8fc>
   2053c:	ldrb	r0, [r1, #1]!
   20540:	cmp	r0, #48	; 0x30
   20544:	beq	2053c <__assert_fail@plt+0xe5f4>
   20548:	cmp	r3, r0
   2054c:	beq	2053c <__assert_fail@plt+0xe5f4>
   20550:	cmp	r2, r0
   20554:	beq	207f0 <__assert_fail@plt+0xe8a8>
   20558:	sub	r0, r0, #48	; 0x30
   2055c:	cmp	r0, #9
   20560:	movls	r0, #1
   20564:	bls	205e0 <__assert_fail@plt+0xe698>
   20568:	b	20804 <__assert_fail@plt+0xe8bc>
   2056c:	ldrb	r5, [ip, #1]!
   20570:	cmp	r5, #48	; 0x30
   20574:	beq	2056c <__assert_fail@plt+0xe624>
   20578:	cmp	r3, r5
   2057c:	beq	2056c <__assert_fail@plt+0xe624>
   20580:	cmp	r4, #45	; 0x2d
   20584:	beq	20600 <__assert_fail@plt+0xe6b8>
   20588:	cmp	r2, r5
   2058c:	beq	205a4 <__assert_fail@plt+0xe65c>
   20590:	sub	r5, r5, #48	; 0x30
   20594:	cmp	r5, #9
   20598:	bhi	205b8 <__assert_fail@plt+0xe670>
   2059c:	mvn	r0, #0
   205a0:	b	205e0 <__assert_fail@plt+0xe698>
   205a4:	ldrb	r5, [ip, #1]!
   205a8:	cmp	r5, #48	; 0x30
   205ac:	beq	205a4 <__assert_fail@plt+0xe65c>
   205b0:	b	20590 <__assert_fail@plt+0xe648>
   205b4:	ldrb	r4, [r1, #1]!
   205b8:	cmp	r4, #48	; 0x30
   205bc:	beq	205b4 <__assert_fail@plt+0xe66c>
   205c0:	cmp	r3, r4
   205c4:	beq	205b4 <__assert_fail@plt+0xe66c>
   205c8:	cmp	r2, r4
   205cc:	beq	205f0 <__assert_fail@plt+0xe6a8>
   205d0:	sub	r0, r4, #48	; 0x30
   205d4:	cmp	r0, #9
   205d8:	movhi	r0, #0
   205dc:	mvnls	r0, #0
   205e0:	ldrd	r4, [sp]
   205e4:	ldr	r6, [sp, #8]
   205e8:	add	sp, sp, #12
   205ec:	pop	{pc}		; (ldr pc, [sp], #4)
   205f0:	ldrb	r4, [r1, #1]!
   205f4:	cmp	r4, #48	; 0x30
   205f8:	beq	205f0 <__assert_fail@plt+0xe6a8>
   205fc:	b	205d0 <__assert_fail@plt+0xe688>
   20600:	ldrb	r6, [r1, #1]!
   20604:	cmp	r6, #48	; 0x30
   20608:	beq	20600 <__assert_fail@plt+0xe6b8>
   2060c:	cmp	r3, r6
   20610:	beq	20600 <__assert_fail@plt+0xe6b8>
   20614:	cmp	r5, r6
   20618:	bne	20654 <__assert_fail@plt+0xe70c>
   2061c:	sub	r0, r5, #48	; 0x30
   20620:	cmp	r0, #9
   20624:	bhi	20654 <__assert_fail@plt+0xe70c>
   20628:	ldrb	r5, [ip, #1]!
   2062c:	cmp	r3, r5
   20630:	beq	20628 <__assert_fail@plt+0xe6e0>
   20634:	ldrb	r6, [r1, #1]!
   20638:	cmp	r3, r6
   2063c:	beq	20634 <__assert_fail@plt+0xe6ec>
   20640:	cmp	r5, r6
   20644:	bne	20654 <__assert_fail@plt+0xe70c>
   20648:	sub	r0, r5, #48	; 0x30
   2064c:	cmp	r0, #9
   20650:	bls	20628 <__assert_fail@plt+0xe6e0>
   20654:	mov	r0, r5
   20658:	cmp	r2, r5
   2065c:	beq	206e0 <__assert_fail@plt+0xe798>
   20660:	mov	lr, r6
   20664:	cmp	r2, r6
   20668:	beq	20714 <__assert_fail@plt+0xe7cc>
   2066c:	sub	r0, r6, r0
   20670:	sub	r5, r5, #48	; 0x30
   20674:	cmp	r5, #9
   20678:	movhi	lr, #0
   2067c:	bhi	206a0 <__assert_fail@plt+0xe758>
   20680:	mov	lr, #0
   20684:	ldrb	r2, [ip, #1]!
   20688:	cmp	r3, r2
   2068c:	beq	20684 <__assert_fail@plt+0xe73c>
   20690:	add	lr, lr, #1
   20694:	sub	r2, r2, #48	; 0x30
   20698:	cmp	r2, #9
   2069c:	bls	20684 <__assert_fail@plt+0xe73c>
   206a0:	sub	r6, r6, #48	; 0x30
   206a4:	cmp	r6, #9
   206a8:	bhi	20a44 <__assert_fail@plt+0xeafc>
   206ac:	mov	ip, #0
   206b0:	ldrb	r2, [r1, #1]!
   206b4:	cmp	r3, r2
   206b8:	beq	206b0 <__assert_fail@plt+0xe768>
   206bc:	add	ip, ip, #1
   206c0:	sub	r2, r2, #48	; 0x30
   206c4:	cmp	r2, #9
   206c8:	bls	206b0 <__assert_fail@plt+0xe768>
   206cc:	cmp	ip, lr
   206d0:	beq	207e4 <__assert_fail@plt+0xe89c>
   206d4:	movhi	r0, #1
   206d8:	mvnls	r0, #0
   206dc:	b	205e0 <__assert_fail@plt+0xe698>
   206e0:	sub	lr, r6, #48	; 0x30
   206e4:	cmp	lr, #9
   206e8:	bls	20660 <__assert_fail@plt+0xe718>
   206ec:	uxtb	r2, r2
   206f0:	ldrb	r3, [r1]
   206f4:	cmp	r2, r3
   206f8:	beq	20728 <__assert_fail@plt+0xe7e0>
   206fc:	ldrb	r3, [ip]
   20700:	cmp	r3, r2
   20704:	addeq	ip, ip, #1
   20708:	beq	207b8 <__assert_fail@plt+0xe870>
   2070c:	mov	r0, #0
   20710:	b	205e0 <__assert_fail@plt+0xe698>
   20714:	sub	r5, r5, #48	; 0x30
   20718:	cmp	r5, #9
   2071c:	subls	r0, r6, r0
   20720:	bls	20680 <__assert_fail@plt+0xe738>
   20724:	b	206ec <__assert_fail@plt+0xe7a4>
   20728:	ldrb	r2, [ip]
   2072c:	cmp	r2, r3
   20730:	addne	r1, r1, #1
   20734:	beq	20764 <__assert_fail@plt+0xe81c>
   20738:	ldrb	r3, [r1]
   2073c:	cmp	r3, #48	; 0x30
   20740:	bne	20750 <__assert_fail@plt+0xe808>
   20744:	ldrb	r3, [r1, #1]!
   20748:	cmp	r3, #48	; 0x30
   2074c:	beq	20744 <__assert_fail@plt+0xe7fc>
   20750:	sub	r3, r3, #48	; 0x30
   20754:	cmp	r3, #9
   20758:	movhi	r0, #0
   2075c:	movls	r0, #1
   20760:	b	205e0 <__assert_fail@plt+0xe698>
   20764:	ldrb	r0, [r1, #1]!
   20768:	ldrb	r3, [ip, #1]!
   2076c:	cmp	r0, r3
   20770:	bne	20788 <__assert_fail@plt+0xe840>
   20774:	sub	r0, r0, #48	; 0x30
   20778:	cmp	r0, #9
   2077c:	bls	20764 <__assert_fail@plt+0xe81c>
   20780:	mov	r0, #0
   20784:	b	205e0 <__assert_fail@plt+0xe698>
   20788:	sub	r2, r0, #48	; 0x30
   2078c:	cmp	r2, #9
   20790:	bhi	207a8 <__assert_fail@plt+0xe860>
   20794:	sub	r2, r3, #48	; 0x30
   20798:	cmp	r2, #9
   2079c:	subls	r0, r0, r3
   207a0:	bhi	20738 <__assert_fail@plt+0xe7f0>
   207a4:	b	205e0 <__assert_fail@plt+0xe698>
   207a8:	sub	r3, r3, #48	; 0x30
   207ac:	cmp	r3, #9
   207b0:	movhi	r0, #0
   207b4:	bhi	205e0 <__assert_fail@plt+0xe698>
   207b8:	ldrb	r3, [ip]
   207bc:	cmp	r3, #48	; 0x30
   207c0:	bne	207d0 <__assert_fail@plt+0xe888>
   207c4:	ldrb	r3, [ip, #1]!
   207c8:	cmp	r3, #48	; 0x30
   207cc:	beq	207c4 <__assert_fail@plt+0xe87c>
   207d0:	sub	r3, r3, #48	; 0x30
   207d4:	cmp	r3, #9
   207d8:	movhi	r0, #0
   207dc:	mvnls	r0, #0
   207e0:	b	205e0 <__assert_fail@plt+0xe698>
   207e4:	cmp	lr, #0
   207e8:	moveq	r0, #0
   207ec:	b	205e0 <__assert_fail@plt+0xe698>
   207f0:	ldrb	r0, [r1, #1]!
   207f4:	cmp	r0, #48	; 0x30
   207f8:	beq	207f0 <__assert_fail@plt+0xe8a8>
   207fc:	b	20558 <__assert_fail@plt+0xe610>
   20800:	ldrb	lr, [ip, #1]!
   20804:	cmp	lr, #48	; 0x30
   20808:	beq	20800 <__assert_fail@plt+0xe8b8>
   2080c:	cmp	r3, lr
   20810:	beq	20800 <__assert_fail@plt+0xe8b8>
   20814:	cmp	r2, lr
   20818:	beq	20830 <__assert_fail@plt+0xe8e8>
   2081c:	sub	r0, lr, #48	; 0x30
   20820:	cmp	r0, #9
   20824:	movhi	r0, #0
   20828:	movls	r0, #1
   2082c:	b	205e0 <__assert_fail@plt+0xe698>
   20830:	ldrb	lr, [ip, #1]!
   20834:	cmp	lr, #48	; 0x30
   20838:	beq	20830 <__assert_fail@plt+0xe8e8>
   2083c:	b	2081c <__assert_fail@plt+0xe8d4>
   20840:	ldrb	lr, [ip, #1]!
   20844:	cmp	lr, #48	; 0x30
   20848:	beq	20840 <__assert_fail@plt+0xe8f8>
   2084c:	cmp	r3, lr
   20850:	beq	20840 <__assert_fail@plt+0xe8f8>
   20854:	b	2085c <__assert_fail@plt+0xe914>
   20858:	ldrb	r4, [r1, #1]!
   2085c:	cmp	r4, #48	; 0x30
   20860:	beq	20858 <__assert_fail@plt+0xe910>
   20864:	cmp	r3, r4
   20868:	beq	20858 <__assert_fail@plt+0xe910>
   2086c:	cmp	lr, r4
   20870:	bne	208ac <__assert_fail@plt+0xe964>
   20874:	sub	r0, lr, #48	; 0x30
   20878:	cmp	r0, #9
   2087c:	bhi	208ac <__assert_fail@plt+0xe964>
   20880:	ldrb	lr, [ip, #1]!
   20884:	cmp	r3, lr
   20888:	beq	20880 <__assert_fail@plt+0xe938>
   2088c:	ldrb	r4, [r1, #1]!
   20890:	cmp	r3, r4
   20894:	beq	2088c <__assert_fail@plt+0xe944>
   20898:	cmp	lr, r4
   2089c:	bne	208ac <__assert_fail@plt+0xe964>
   208a0:	sub	r0, lr, #48	; 0x30
   208a4:	cmp	r0, #9
   208a8:	bls	20880 <__assert_fail@plt+0xe938>
   208ac:	mov	r0, lr
   208b0:	cmp	r2, lr
   208b4:	beq	20934 <__assert_fail@plt+0xe9ec>
   208b8:	cmp	r2, r4
   208bc:	beq	20968 <__assert_fail@plt+0xea20>
   208c0:	sub	r0, r0, r4
   208c4:	sub	lr, lr, #48	; 0x30
   208c8:	cmp	lr, #9
   208cc:	movhi	lr, #0
   208d0:	bhi	208f4 <__assert_fail@plt+0xe9ac>
   208d4:	mov	lr, #0
   208d8:	ldrb	r2, [ip, #1]!
   208dc:	cmp	r3, r2
   208e0:	beq	208d8 <__assert_fail@plt+0xe990>
   208e4:	add	lr, lr, #1
   208e8:	sub	r2, r2, #48	; 0x30
   208ec:	cmp	r2, #9
   208f0:	bls	208d8 <__assert_fail@plt+0xe990>
   208f4:	sub	r4, r4, #48	; 0x30
   208f8:	cmp	r4, #9
   208fc:	bhi	20a54 <__assert_fail@plt+0xeb0c>
   20900:	mov	ip, #0
   20904:	ldrb	r2, [r1, #1]!
   20908:	cmp	r3, r2
   2090c:	beq	20904 <__assert_fail@plt+0xe9bc>
   20910:	add	ip, ip, #1
   20914:	sub	r2, r2, #48	; 0x30
   20918:	cmp	r2, #9
   2091c:	bls	20904 <__assert_fail@plt+0xe9bc>
   20920:	cmp	ip, lr
   20924:	beq	20a38 <__assert_fail@plt+0xeaf0>
   20928:	mvnhi	r0, #0
   2092c:	movls	r0, #1
   20930:	b	205e0 <__assert_fail@plt+0xe698>
   20934:	sub	r5, r4, #48	; 0x30
   20938:	cmp	r5, #9
   2093c:	bls	208b8 <__assert_fail@plt+0xe970>
   20940:	uxtb	r2, r2
   20944:	ldrb	r3, [ip]
   20948:	cmp	r2, r3
   2094c:	beq	2097c <__assert_fail@plt+0xea34>
   20950:	ldrb	r3, [r1]
   20954:	cmp	r3, r2
   20958:	addeq	r1, r1, #1
   2095c:	beq	20a0c <__assert_fail@plt+0xeac4>
   20960:	mov	r0, #0
   20964:	b	205e0 <__assert_fail@plt+0xe698>
   20968:	sub	lr, lr, #48	; 0x30
   2096c:	cmp	lr, #9
   20970:	subls	r0, r0, r4
   20974:	bls	208d4 <__assert_fail@plt+0xe98c>
   20978:	b	20940 <__assert_fail@plt+0xe9f8>
   2097c:	ldrb	r2, [r1]
   20980:	cmp	r2, r3
   20984:	addne	ip, ip, #1
   20988:	beq	209b8 <__assert_fail@plt+0xea70>
   2098c:	ldrb	r0, [ip]
   20990:	cmp	r0, #48	; 0x30
   20994:	bne	209a4 <__assert_fail@plt+0xea5c>
   20998:	ldrb	r0, [ip, #1]!
   2099c:	cmp	r0, #48	; 0x30
   209a0:	beq	20998 <__assert_fail@plt+0xea50>
   209a4:	sub	r0, r0, #48	; 0x30
   209a8:	cmp	r0, #9
   209ac:	movhi	r0, #0
   209b0:	movls	r0, #1
   209b4:	b	205e0 <__assert_fail@plt+0xe698>
   209b8:	ldrb	r0, [ip, #1]!
   209bc:	ldrb	r3, [r1, #1]!
   209c0:	cmp	r0, r3
   209c4:	bne	209dc <__assert_fail@plt+0xea94>
   209c8:	sub	r0, r0, #48	; 0x30
   209cc:	cmp	r0, #9
   209d0:	bls	209b8 <__assert_fail@plt+0xea70>
   209d4:	mov	r0, #0
   209d8:	b	205e0 <__assert_fail@plt+0xe698>
   209dc:	sub	r2, r0, #48	; 0x30
   209e0:	cmp	r2, #9
   209e4:	bhi	209fc <__assert_fail@plt+0xeab4>
   209e8:	sub	r2, r3, #48	; 0x30
   209ec:	cmp	r2, #9
   209f0:	subls	r0, r0, r3
   209f4:	bhi	2098c <__assert_fail@plt+0xea44>
   209f8:	b	205e0 <__assert_fail@plt+0xe698>
   209fc:	sub	r3, r3, #48	; 0x30
   20a00:	cmp	r3, #9
   20a04:	movhi	r0, #0
   20a08:	bhi	205e0 <__assert_fail@plt+0xe698>
   20a0c:	ldrb	r3, [r1]
   20a10:	cmp	r3, #48	; 0x30
   20a14:	bne	20a24 <__assert_fail@plt+0xeadc>
   20a18:	ldrb	r3, [r1, #1]!
   20a1c:	cmp	r3, #48	; 0x30
   20a20:	beq	20a18 <__assert_fail@plt+0xead0>
   20a24:	sub	r3, r3, #48	; 0x30
   20a28:	cmp	r3, #9
   20a2c:	movhi	r0, #0
   20a30:	mvnls	r0, #0
   20a34:	b	205e0 <__assert_fail@plt+0xe698>
   20a38:	cmp	lr, #0
   20a3c:	moveq	r0, #0
   20a40:	b	205e0 <__assert_fail@plt+0xe698>
   20a44:	adds	r0, lr, #0
   20a48:	movne	r0, #1
   20a4c:	rsb	r0, r0, #0
   20a50:	b	205e0 <__assert_fail@plt+0xe698>
   20a54:	adds	r0, lr, #0
   20a58:	movne	r0, #1
   20a5c:	b	205e0 <__assert_fail@plt+0xe698>
   20a60:	strd	r4, [sp, #-24]!	; 0xffffffe8
   20a64:	strd	r6, [sp, #8]
   20a68:	str	r8, [sp, #16]
   20a6c:	str	lr, [sp, #20]
   20a70:	mov	r4, r0
   20a74:	cmp	r0, #2
   20a78:	bls	20a94 <__assert_fail@plt+0xeb4c>
   20a7c:	mov	r0, r4
   20a80:	ldrd	r4, [sp]
   20a84:	ldrd	r6, [sp, #8]
   20a88:	ldr	r8, [sp, #16]
   20a8c:	add	sp, sp, #20
   20a90:	pop	{pc}		; (ldr pc, [sp], #4)
   20a94:	bl	22ba4 <_obstack_memory_used@@Base+0x70>
   20a98:	mov	r6, r0
   20a9c:	bl	11d74 <__errno_location@plt>
   20aa0:	mov	r5, r0
   20aa4:	ldr	r7, [r0]
   20aa8:	mov	r0, r4
   20aac:	bl	11f30 <close@plt>
   20ab0:	str	r7, [r5]
   20ab4:	mov	r4, r6
   20ab8:	b	20a7c <__assert_fail@plt+0xeb34>
   20abc:	strd	r4, [sp, #-16]!
   20ac0:	str	r6, [sp, #8]
   20ac4:	str	lr, [sp, #12]
   20ac8:	sub	sp, sp, #32
   20acc:	mov	r4, r0
   20ad0:	ldr	r5, [sp, #48]	; 0x30
   20ad4:	ldr	r6, [sp, #52]	; 0x34
   20ad8:	cmp	r1, #0
   20adc:	beq	20ba8 <__assert_fail@plt+0xec60>
   20ae0:	str	r3, [sp, #4]
   20ae4:	str	r2, [sp]
   20ae8:	mov	r3, r1
   20aec:	movw	r2, #21732	; 0x54e4
   20af0:	movt	r2, #2
   20af4:	mov	r1, #1
   20af8:	bl	11dd4 <__fprintf_chk@plt>
   20afc:	mov	r2, #5
   20b00:	movw	r1, #21752	; 0x54f8
   20b04:	movt	r1, #2
   20b08:	mov	r0, #0
   20b0c:	bl	11b58 <dcgettext@plt>
   20b10:	movw	r3, #2022	; 0x7e6
   20b14:	str	r3, [sp]
   20b18:	mov	r3, r0
   20b1c:	movw	r2, #22480	; 0x57d0
   20b20:	movt	r2, #2
   20b24:	mov	r1, #1
   20b28:	mov	r0, r4
   20b2c:	bl	11dd4 <__fprintf_chk@plt>
   20b30:	mov	r1, r4
   20b34:	mov	r0, #10
   20b38:	bl	11b4c <fputc_unlocked@plt>
   20b3c:	mov	r2, #5
   20b40:	movw	r1, #21756	; 0x54fc
   20b44:	movt	r1, #2
   20b48:	mov	r0, #0
   20b4c:	bl	11b58 <dcgettext@plt>
   20b50:	movw	r3, #21928	; 0x55a8
   20b54:	movt	r3, #2
   20b58:	mov	r2, r0
   20b5c:	mov	r1, #1
   20b60:	mov	r0, r4
   20b64:	bl	11dd4 <__fprintf_chk@plt>
   20b68:	mov	r1, r4
   20b6c:	mov	r0, #10
   20b70:	bl	11b4c <fputc_unlocked@plt>
   20b74:	cmp	r6, #9
   20b78:	ldrls	pc, [pc, r6, lsl #2]
   20b7c:	b	20e80 <__assert_fail@plt+0xef38>
   20b80:	andeq	r0, r2, ip, ror #23
   20b84:	andeq	r0, r2, r4, asr #23
   20b88:	andeq	r0, r2, r0, lsl #24
   20b8c:	andeq	r0, r2, r4, lsr ip
   20b90:	andeq	r0, r2, r0, ror ip
   20b94:			; <UNDEFINED> instruction: 0x00020cb4
   20b98:	andeq	r0, r2, r0, lsl #26
   20b9c:	andeq	r0, r2, r4, asr sp
   20ba0:			; <UNDEFINED> instruction: 0x00020db0
   20ba4:	andeq	r0, r2, r4, lsl lr
   20ba8:	str	r3, [sp]
   20bac:	mov	r3, r2
   20bb0:	movw	r2, #21744	; 0x54f0
   20bb4:	movt	r2, #2
   20bb8:	mov	r1, #1
   20bbc:	bl	11dd4 <__fprintf_chk@plt>
   20bc0:	b	20afc <__assert_fail@plt+0xebb4>
   20bc4:	mov	r2, #5
   20bc8:	movw	r1, #21964	; 0x55cc
   20bcc:	movt	r1, #2
   20bd0:	mov	r0, #0
   20bd4:	bl	11b58 <dcgettext@plt>
   20bd8:	ldr	r3, [r5]
   20bdc:	mov	r2, r0
   20be0:	mov	r1, #1
   20be4:	mov	r0, r4
   20be8:	bl	11dd4 <__fprintf_chk@plt>
   20bec:	add	sp, sp, #32
   20bf0:	ldrd	r4, [sp]
   20bf4:	ldr	r6, [sp, #8]
   20bf8:	add	sp, sp, #12
   20bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   20c00:	mov	r2, #5
   20c04:	movw	r1, #21980	; 0x55dc
   20c08:	movt	r1, #2
   20c0c:	mov	r0, #0
   20c10:	bl	11b58 <dcgettext@plt>
   20c14:	ldr	r3, [r5, #4]
   20c18:	str	r3, [sp]
   20c1c:	ldr	r3, [r5]
   20c20:	mov	r2, r0
   20c24:	mov	r1, #1
   20c28:	mov	r0, r4
   20c2c:	bl	11dd4 <__fprintf_chk@plt>
   20c30:	b	20bec <__assert_fail@plt+0xeca4>
   20c34:	mov	r2, #5
   20c38:	movw	r1, #22004	; 0x55f4
   20c3c:	movt	r1, #2
   20c40:	mov	r0, #0
   20c44:	bl	11b58 <dcgettext@plt>
   20c48:	ldr	r3, [r5, #8]
   20c4c:	str	r3, [sp, #4]
   20c50:	ldr	r3, [r5, #4]
   20c54:	str	r3, [sp]
   20c58:	ldr	r3, [r5]
   20c5c:	mov	r2, r0
   20c60:	mov	r1, #1
   20c64:	mov	r0, r4
   20c68:	bl	11dd4 <__fprintf_chk@plt>
   20c6c:	b	20bec <__assert_fail@plt+0xeca4>
   20c70:	mov	r2, #5
   20c74:	movw	r1, #22032	; 0x5610
   20c78:	movt	r1, #2
   20c7c:	mov	r0, #0
   20c80:	bl	11b58 <dcgettext@plt>
   20c84:	ldr	r3, [r5, #12]
   20c88:	str	r3, [sp, #8]
   20c8c:	ldr	r3, [r5, #8]
   20c90:	str	r3, [sp, #4]
   20c94:	ldr	r3, [r5, #4]
   20c98:	str	r3, [sp]
   20c9c:	ldr	r3, [r5]
   20ca0:	mov	r2, r0
   20ca4:	mov	r1, #1
   20ca8:	mov	r0, r4
   20cac:	bl	11dd4 <__fprintf_chk@plt>
   20cb0:	b	20bec <__assert_fail@plt+0xeca4>
   20cb4:	mov	r2, #5
   20cb8:	movw	r1, #22064	; 0x5630
   20cbc:	movt	r1, #2
   20cc0:	mov	r0, #0
   20cc4:	bl	11b58 <dcgettext@plt>
   20cc8:	ldr	r3, [r5, #16]
   20ccc:	str	r3, [sp, #12]
   20cd0:	ldr	r3, [r5, #12]
   20cd4:	str	r3, [sp, #8]
   20cd8:	ldr	r3, [r5, #8]
   20cdc:	str	r3, [sp, #4]
   20ce0:	ldr	r3, [r5, #4]
   20ce4:	str	r3, [sp]
   20ce8:	ldr	r3, [r5]
   20cec:	mov	r2, r0
   20cf0:	mov	r1, #1
   20cf4:	mov	r0, r4
   20cf8:	bl	11dd4 <__fprintf_chk@plt>
   20cfc:	b	20bec <__assert_fail@plt+0xeca4>
   20d00:	mov	r2, #5
   20d04:	movw	r1, #22100	; 0x5654
   20d08:	movt	r1, #2
   20d0c:	mov	r0, #0
   20d10:	bl	11b58 <dcgettext@plt>
   20d14:	ldr	r3, [r5, #20]
   20d18:	str	r3, [sp, #16]
   20d1c:	ldr	r3, [r5, #16]
   20d20:	str	r3, [sp, #12]
   20d24:	ldr	r3, [r5, #12]
   20d28:	str	r3, [sp, #8]
   20d2c:	ldr	r3, [r5, #8]
   20d30:	str	r3, [sp, #4]
   20d34:	ldr	r3, [r5, #4]
   20d38:	str	r3, [sp]
   20d3c:	ldr	r3, [r5]
   20d40:	mov	r2, r0
   20d44:	mov	r1, #1
   20d48:	mov	r0, r4
   20d4c:	bl	11dd4 <__fprintf_chk@plt>
   20d50:	b	20bec <__assert_fail@plt+0xeca4>
   20d54:	mov	r2, #5
   20d58:	movw	r1, #22140	; 0x567c
   20d5c:	movt	r1, #2
   20d60:	mov	r0, #0
   20d64:	bl	11b58 <dcgettext@plt>
   20d68:	ldr	r3, [r5, #24]
   20d6c:	str	r3, [sp, #20]
   20d70:	ldr	r3, [r5, #20]
   20d74:	str	r3, [sp, #16]
   20d78:	ldr	r3, [r5, #16]
   20d7c:	str	r3, [sp, #12]
   20d80:	ldr	r3, [r5, #12]
   20d84:	str	r3, [sp, #8]
   20d88:	ldr	r3, [r5, #8]
   20d8c:	str	r3, [sp, #4]
   20d90:	ldr	r3, [r5, #4]
   20d94:	str	r3, [sp]
   20d98:	ldr	r3, [r5]
   20d9c:	mov	r2, r0
   20da0:	mov	r1, #1
   20da4:	mov	r0, r4
   20da8:	bl	11dd4 <__fprintf_chk@plt>
   20dac:	b	20bec <__assert_fail@plt+0xeca4>
   20db0:	mov	r2, #5
   20db4:	movw	r1, #22184	; 0x56a8
   20db8:	movt	r1, #2
   20dbc:	mov	r0, #0
   20dc0:	bl	11b58 <dcgettext@plt>
   20dc4:	ldr	r3, [r5, #28]
   20dc8:	str	r3, [sp, #24]
   20dcc:	ldr	r3, [r5, #24]
   20dd0:	str	r3, [sp, #20]
   20dd4:	ldr	r3, [r5, #20]
   20dd8:	str	r3, [sp, #16]
   20ddc:	ldr	r3, [r5, #16]
   20de0:	str	r3, [sp, #12]
   20de4:	ldr	r3, [r5, #12]
   20de8:	str	r3, [sp, #8]
   20dec:	ldr	r3, [r5, #8]
   20df0:	str	r3, [sp, #4]
   20df4:	ldr	r3, [r5, #4]
   20df8:	str	r3, [sp]
   20dfc:	ldr	r3, [r5]
   20e00:	mov	r2, r0
   20e04:	mov	r1, #1
   20e08:	mov	r0, r4
   20e0c:	bl	11dd4 <__fprintf_chk@plt>
   20e10:	b	20bec <__assert_fail@plt+0xeca4>
   20e14:	mov	r2, #5
   20e18:	movw	r1, #22232	; 0x56d8
   20e1c:	movt	r1, #2
   20e20:	mov	r0, #0
   20e24:	bl	11b58 <dcgettext@plt>
   20e28:	ldr	r3, [r5, #32]
   20e2c:	str	r3, [sp, #28]
   20e30:	ldr	r3, [r5, #28]
   20e34:	str	r3, [sp, #24]
   20e38:	ldr	r3, [r5, #24]
   20e3c:	str	r3, [sp, #20]
   20e40:	ldr	r3, [r5, #20]
   20e44:	str	r3, [sp, #16]
   20e48:	ldr	r3, [r5, #16]
   20e4c:	str	r3, [sp, #12]
   20e50:	ldr	r3, [r5, #12]
   20e54:	str	r3, [sp, #8]
   20e58:	ldr	r3, [r5, #8]
   20e5c:	str	r3, [sp, #4]
   20e60:	ldr	r3, [r5, #4]
   20e64:	str	r3, [sp]
   20e68:	ldr	r3, [r5]
   20e6c:	mov	r2, r0
   20e70:	mov	r1, #1
   20e74:	mov	r0, r4
   20e78:	bl	11dd4 <__fprintf_chk@plt>
   20e7c:	b	20bec <__assert_fail@plt+0xeca4>
   20e80:	mov	r2, #5
   20e84:	movw	r1, #22284	; 0x570c
   20e88:	movt	r1, #2
   20e8c:	mov	r0, #0
   20e90:	bl	11b58 <dcgettext@plt>
   20e94:	ldr	r3, [r5, #32]
   20e98:	str	r3, [sp, #28]
   20e9c:	ldr	r3, [r5, #28]
   20ea0:	str	r3, [sp, #24]
   20ea4:	ldr	r3, [r5, #24]
   20ea8:	str	r3, [sp, #20]
   20eac:	ldr	r3, [r5, #20]
   20eb0:	str	r3, [sp, #16]
   20eb4:	ldr	r3, [r5, #16]
   20eb8:	str	r3, [sp, #12]
   20ebc:	ldr	r3, [r5, #12]
   20ec0:	str	r3, [sp, #8]
   20ec4:	ldr	r3, [r5, #8]
   20ec8:	str	r3, [sp, #4]
   20ecc:	ldr	r3, [r5, #4]
   20ed0:	str	r3, [sp]
   20ed4:	ldr	r3, [r5]
   20ed8:	mov	r2, r0
   20edc:	mov	r1, #1
   20ee0:	mov	r0, r4
   20ee4:	bl	11dd4 <__fprintf_chk@plt>
   20ee8:	b	20bec <__assert_fail@plt+0xeca4>
   20eec:	strd	r4, [sp, #-12]!
   20ef0:	str	lr, [sp, #8]
   20ef4:	sub	sp, sp, #12
   20ef8:	ldr	r5, [sp, #24]
   20efc:	ldr	ip, [r5]
   20f00:	cmp	ip, #0
   20f04:	beq	20f3c <__assert_fail@plt+0xeff4>
   20f08:	mov	lr, r5
   20f0c:	mov	ip, #0
   20f10:	add	ip, ip, #1
   20f14:	ldr	r4, [lr, #4]!
   20f18:	cmp	r4, #0
   20f1c:	bne	20f10 <__assert_fail@plt+0xefc8>
   20f20:	str	ip, [sp, #4]
   20f24:	str	r5, [sp]
   20f28:	bl	20abc <__assert_fail@plt+0xeb74>
   20f2c:	add	sp, sp, #12
   20f30:	ldrd	r4, [sp]
   20f34:	add	sp, sp, #8
   20f38:	pop	{pc}		; (ldr pc, [sp], #4)
   20f3c:	mov	ip, #0
   20f40:	b	20f20 <__assert_fail@plt+0xefd8>
   20f44:	strd	r4, [sp, #-12]!
   20f48:	str	lr, [sp, #8]
   20f4c:	sub	sp, sp, #52	; 0x34
   20f50:	ldr	r5, [sp, #64]	; 0x40
   20f54:	add	r4, sp, #8
   20f58:	mov	ip, #0
   20f5c:	ldr	lr, [r5], #4
   20f60:	str	lr, [r4], #4
   20f64:	cmp	lr, #0
   20f68:	beq	20f78 <__assert_fail@plt+0xf030>
   20f6c:	add	ip, ip, #1
   20f70:	cmp	ip, #10
   20f74:	bne	20f5c <__assert_fail@plt+0xf014>
   20f78:	str	ip, [sp, #4]
   20f7c:	add	ip, sp, #8
   20f80:	str	ip, [sp]
   20f84:	bl	20abc <__assert_fail@plt+0xeb74>
   20f88:	add	sp, sp, #52	; 0x34
   20f8c:	ldrd	r4, [sp]
   20f90:	add	sp, sp, #8
   20f94:	pop	{pc}		; (ldr pc, [sp], #4)
   20f98:	push	{r3}		; (str r3, [sp, #-4]!)
   20f9c:	push	{lr}		; (str lr, [sp, #-4]!)
   20fa0:	sub	sp, sp, #16
   20fa4:	add	r3, sp, #24
   20fa8:	str	r3, [sp, #12]
   20fac:	str	r3, [sp]
   20fb0:	ldr	r3, [sp, #20]
   20fb4:	bl	20f44 <__assert_fail@plt+0xeffc>
   20fb8:	add	sp, sp, #16
   20fbc:	pop	{lr}		; (ldr lr, [sp], #4)
   20fc0:	add	sp, sp, #4
   20fc4:	bx	lr
   20fc8:	str	r4, [sp, #-8]!
   20fcc:	str	lr, [sp, #4]
   20fd0:	movw	r3, #25300	; 0x62d4
   20fd4:	movt	r3, #3
   20fd8:	ldr	r1, [r3]
   20fdc:	mov	r0, #10
   20fe0:	bl	11b4c <fputc_unlocked@plt>
   20fe4:	mov	r2, #5
   20fe8:	movw	r1, #22344	; 0x5748
   20fec:	movt	r1, #2
   20ff0:	mov	r0, #0
   20ff4:	bl	11b58 <dcgettext@plt>
   20ff8:	movw	r2, #22364	; 0x575c
   20ffc:	movt	r2, #2
   21000:	mov	r1, r0
   21004:	mov	r0, #1
   21008:	bl	11db0 <__printf_chk@plt>
   2100c:	mov	r2, #5
   21010:	movw	r1, #22388	; 0x5774
   21014:	movt	r1, #2
   21018:	mov	r0, #0
   2101c:	bl	11b58 <dcgettext@plt>
   21020:	movw	r3, #18404	; 0x47e4
   21024:	movt	r3, #2
   21028:	movw	r2, #18444	; 0x480c
   2102c:	movt	r2, #2
   21030:	mov	r1, r0
   21034:	mov	r0, #1
   21038:	bl	11db0 <__printf_chk@plt>
   2103c:	mov	r2, #5
   21040:	movw	r1, #22408	; 0x5788
   21044:	movt	r1, #2
   21048:	mov	r0, #0
   2104c:	bl	11b58 <dcgettext@plt>
   21050:	movw	r2, #22448	; 0x57b0
   21054:	movt	r2, #2
   21058:	mov	r1, r0
   2105c:	mov	r0, #1
   21060:	bl	11db0 <__printf_chk@plt>
   21064:	ldr	r4, [sp]
   21068:	add	sp, sp, #4
   2106c:	pop	{pc}		; (ldr pc, [sp], #4)
   21070:	str	r4, [sp, #-8]!
   21074:	str	lr, [sp, #4]
   21078:	bl	21f58 <__assert_fail@plt+0x10010>
   2107c:	cmp	r0, #0
   21080:	beq	21090 <__assert_fail@plt+0xf148>
   21084:	ldr	r4, [sp]
   21088:	add	sp, sp, #4
   2108c:	pop	{pc}		; (ldr pc, [sp], #4)
   21090:	bl	21504 <__assert_fail@plt+0xf5bc>
   21094:	str	r4, [sp, #-8]!
   21098:	str	lr, [sp, #4]
   2109c:	bl	21f58 <__assert_fail@plt+0x10010>
   210a0:	cmp	r0, #0
   210a4:	beq	210b4 <__assert_fail@plt+0xf16c>
   210a8:	ldr	r4, [sp]
   210ac:	add	sp, sp, #4
   210b0:	pop	{pc}		; (ldr pc, [sp], #4)
   210b4:	bl	21504 <__assert_fail@plt+0xf5bc>
   210b8:	str	r4, [sp, #-8]!
   210bc:	str	lr, [sp, #4]
   210c0:	bl	21070 <__assert_fail@plt+0xf128>
   210c4:	ldr	r4, [sp]
   210c8:	add	sp, sp, #4
   210cc:	pop	{pc}		; (ldr pc, [sp], #4)
   210d0:	strd	r4, [sp, #-16]!
   210d4:	str	r6, [sp, #8]
   210d8:	str	lr, [sp, #12]
   210dc:	mov	r5, r0
   210e0:	mov	r4, r1
   210e4:	bl	21f94 <__assert_fail@plt+0x1004c>
   210e8:	cmp	r0, #0
   210ec:	beq	21100 <__assert_fail@plt+0xf1b8>
   210f0:	ldrd	r4, [sp]
   210f4:	ldr	r6, [sp, #8]
   210f8:	add	sp, sp, #12
   210fc:	pop	{pc}		; (ldr pc, [sp], #4)
   21100:	adds	r4, r4, #0
   21104:	movne	r4, #1
   21108:	cmp	r5, #0
   2110c:	moveq	r4, #1
   21110:	cmp	r4, #0
   21114:	beq	210f0 <__assert_fail@plt+0xf1a8>
   21118:	bl	21504 <__assert_fail@plt+0xf5bc>
   2111c:	str	r4, [sp, #-8]!
   21120:	str	lr, [sp, #4]
   21124:	cmp	r1, #0
   21128:	orreq	r1, r1, #1
   2112c:	bl	21f94 <__assert_fail@plt+0x1004c>
   21130:	cmp	r0, #0
   21134:	beq	21144 <__assert_fail@plt+0xf1fc>
   21138:	ldr	r4, [sp]
   2113c:	add	sp, sp, #4
   21140:	pop	{pc}		; (ldr pc, [sp], #4)
   21144:	bl	21504 <__assert_fail@plt+0xf5bc>
   21148:	strd	r4, [sp, #-16]!
   2114c:	str	r6, [sp, #8]
   21150:	str	lr, [sp, #12]
   21154:	mov	r4, r0
   21158:	mov	r6, r1
   2115c:	mov	r5, r2
   21160:	bl	22b68 <_obstack_memory_used@@Base+0x34>
   21164:	cmp	r0, #0
   21168:	beq	2117c <__assert_fail@plt+0xf234>
   2116c:	ldrd	r4, [sp]
   21170:	ldr	r6, [sp, #8]
   21174:	add	sp, sp, #12
   21178:	pop	{pc}		; (ldr pc, [sp], #4)
   2117c:	cmp	r4, #0
   21180:	beq	21190 <__assert_fail@plt+0xf248>
   21184:	cmp	r6, #0
   21188:	cmpne	r5, #0
   2118c:	beq	2116c <__assert_fail@plt+0xf224>
   21190:	bl	21504 <__assert_fail@plt+0xf5bc>
   21194:	str	r4, [sp, #-8]!
   21198:	str	lr, [sp, #4]
   2119c:	bl	21148 <__assert_fail@plt+0xf200>
   211a0:	ldr	r4, [sp]
   211a4:	add	sp, sp, #4
   211a8:	pop	{pc}		; (ldr pc, [sp], #4)
   211ac:	str	r4, [sp, #-8]!
   211b0:	str	lr, [sp, #4]
   211b4:	mov	ip, r1
   211b8:	mov	r3, r2
   211bc:	cmp	r2, #0
   211c0:	cmpne	r1, #0
   211c4:	moveq	r3, #1
   211c8:	moveq	ip, r3
   211cc:	mov	r2, r3
   211d0:	mov	r1, ip
   211d4:	bl	22b68 <_obstack_memory_used@@Base+0x34>
   211d8:	cmp	r0, #0
   211dc:	beq	211ec <__assert_fail@plt+0xf2a4>
   211e0:	ldr	r4, [sp]
   211e4:	add	sp, sp, #4
   211e8:	pop	{pc}		; (ldr pc, [sp], #4)
   211ec:	bl	21504 <__assert_fail@plt+0xf5bc>
   211f0:	str	r4, [sp, #-8]!
   211f4:	str	lr, [sp, #4]
   211f8:	mov	r2, r1
   211fc:	mov	r1, r0
   21200:	mov	r0, #0
   21204:	bl	21148 <__assert_fail@plt+0xf200>
   21208:	ldr	r4, [sp]
   2120c:	add	sp, sp, #4
   21210:	pop	{pc}		; (ldr pc, [sp], #4)
   21214:	str	r4, [sp, #-8]!
   21218:	str	lr, [sp, #4]
   2121c:	mov	r2, r1
   21220:	mov	r1, r0
   21224:	mov	r0, #0
   21228:	bl	211ac <__assert_fail@plt+0xf264>
   2122c:	ldr	r4, [sp]
   21230:	add	sp, sp, #4
   21234:	pop	{pc}		; (ldr pc, [sp], #4)
   21238:	strd	r4, [sp, #-16]!
   2123c:	str	r6, [sp, #8]
   21240:	str	lr, [sp, #12]
   21244:	mov	r5, r1
   21248:	ldr	r4, [r1]
   2124c:	cmp	r0, #0
   21250:	beq	21280 <__assert_fail@plt+0xf338>
   21254:	lsr	r3, r4, #1
   21258:	add	r3, r3, #1
   2125c:	adds	r4, r4, r3
   21260:	bcs	2129c <__assert_fail@plt+0xf354>
   21264:	mov	r1, r4
   21268:	bl	21148 <__assert_fail@plt+0xf200>
   2126c:	str	r4, [r5]
   21270:	ldrd	r4, [sp]
   21274:	ldr	r6, [sp, #8]
   21278:	add	sp, sp, #12
   2127c:	pop	{pc}		; (ldr pc, [sp], #4)
   21280:	cmp	r4, #0
   21284:	bne	21264 <__assert_fail@plt+0xf31c>
   21288:	mov	r4, #64	; 0x40
   2128c:	udiv	r4, r4, r2
   21290:	cmp	r2, #64	; 0x40
   21294:	addhi	r4, r4, #1
   21298:	b	21264 <__assert_fail@plt+0xf31c>
   2129c:	bl	21504 <__assert_fail@plt+0xf5bc>
   212a0:	str	r4, [sp, #-8]!
   212a4:	str	lr, [sp, #4]
   212a8:	mov	r2, #1
   212ac:	bl	21238 <__assert_fail@plt+0xf2f0>
   212b0:	ldr	r4, [sp]
   212b4:	add	sp, sp, #4
   212b8:	pop	{pc}		; (ldr pc, [sp], #4)
   212bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   212c0:	strd	r6, [sp, #8]
   212c4:	str	r8, [sp, #16]
   212c8:	str	lr, [sp, #20]
   212cc:	mov	r5, r1
   212d0:	ldr	lr, [sp, #24]
   212d4:	ldr	ip, [r1]
   212d8:	asr	r4, ip, #1
   212dc:	adds	r4, ip, r4
   212e0:	movvs	r1, #1
   212e4:	movvc	r1, #0
   212e8:	cmp	r1, #0
   212ec:	mvnne	r4, #-2147483648	; 0x80000000
   212f0:	mvn	r8, r3
   212f4:	lsr	r8, r8, #31
   212f8:	cmp	r3, r4
   212fc:	movge	r1, #0
   21300:	andlt	r1, r8, #1
   21304:	cmp	r1, #0
   21308:	movne	r4, r3
   2130c:	smull	r6, r7, r4, lr
   21310:	asr	r1, r6, #31
   21314:	cmp	r1, r7
   21318:	bne	21330 <__assert_fail@plt+0xf3e8>
   2131c:	mov	r1, r6
   21320:	cmp	r6, #63	; 0x3f
   21324:	movle	r1, #64	; 0x40
   21328:	ble	21334 <__assert_fail@plt+0xf3ec>
   2132c:	b	21340 <__assert_fail@plt+0xf3f8>
   21330:	mvn	r1, #-2147483648	; 0x80000000
   21334:	sdiv	r4, r1, lr
   21338:	mls	r6, lr, r4, r1
   2133c:	sub	r1, r1, r6
   21340:	cmp	r0, #0
   21344:	moveq	r6, #0
   21348:	streq	r6, [r5]
   2134c:	sub	r6, r4, ip
   21350:	cmp	r6, r2
   21354:	bge	2138c <__assert_fail@plt+0xf444>
   21358:	adds	r2, ip, r2
   2135c:	mov	r4, r2
   21360:	bvs	213a8 <__assert_fail@plt+0xf460>
   21364:	cmp	r2, r3
   21368:	movle	r3, #0
   2136c:	andgt	r3, r8, #1
   21370:	cmp	r3, #0
   21374:	bne	213a8 <__assert_fail@plt+0xf460>
   21378:	smull	r2, r3, r2, lr
   2137c:	asr	ip, r2, #31
   21380:	mov	r1, r2
   21384:	cmp	ip, r3
   21388:	bne	213a8 <__assert_fail@plt+0xf460>
   2138c:	bl	210d0 <__assert_fail@plt+0xf188>
   21390:	str	r4, [r5]
   21394:	ldrd	r4, [sp]
   21398:	ldrd	r6, [sp, #8]
   2139c:	ldr	r8, [sp, #16]
   213a0:	add	sp, sp, #20
   213a4:	pop	{pc}		; (ldr pc, [sp], #4)
   213a8:	bl	21504 <__assert_fail@plt+0xf5bc>
   213ac:	str	r4, [sp, #-8]!
   213b0:	str	lr, [sp, #4]
   213b4:	bl	21ee4 <__assert_fail@plt+0xff9c>
   213b8:	cmp	r0, #0
   213bc:	beq	213cc <__assert_fail@plt+0xf484>
   213c0:	ldr	r4, [sp]
   213c4:	add	sp, sp, #4
   213c8:	pop	{pc}		; (ldr pc, [sp], #4)
   213cc:	bl	21504 <__assert_fail@plt+0xf5bc>
   213d0:	str	r4, [sp, #-8]!
   213d4:	str	lr, [sp, #4]
   213d8:	mov	r1, #1
   213dc:	bl	213ac <__assert_fail@plt+0xf464>
   213e0:	ldr	r4, [sp]
   213e4:	add	sp, sp, #4
   213e8:	pop	{pc}		; (ldr pc, [sp], #4)
   213ec:	str	r4, [sp, #-8]!
   213f0:	str	lr, [sp, #4]
   213f4:	bl	21ee4 <__assert_fail@plt+0xff9c>
   213f8:	cmp	r0, #0
   213fc:	beq	2140c <__assert_fail@plt+0xf4c4>
   21400:	ldr	r4, [sp]
   21404:	add	sp, sp, #4
   21408:	pop	{pc}		; (ldr pc, [sp], #4)
   2140c:	bl	21504 <__assert_fail@plt+0xf5bc>
   21410:	str	r4, [sp, #-8]!
   21414:	str	lr, [sp, #4]
   21418:	mov	r1, #1
   2141c:	bl	213ec <__assert_fail@plt+0xf4a4>
   21420:	ldr	r4, [sp]
   21424:	add	sp, sp, #4
   21428:	pop	{pc}		; (ldr pc, [sp], #4)
   2142c:	strd	r4, [sp, #-16]!
   21430:	str	r6, [sp, #8]
   21434:	str	lr, [sp, #12]
   21438:	mov	r5, r0
   2143c:	mov	r4, r1
   21440:	mov	r0, r1
   21444:	bl	21070 <__assert_fail@plt+0xf128>
   21448:	mov	r2, r4
   2144c:	mov	r1, r5
   21450:	bl	11ac8 <memcpy@plt>
   21454:	ldrd	r4, [sp]
   21458:	ldr	r6, [sp, #8]
   2145c:	add	sp, sp, #12
   21460:	pop	{pc}		; (ldr pc, [sp], #4)
   21464:	strd	r4, [sp, #-16]!
   21468:	str	r6, [sp, #8]
   2146c:	str	lr, [sp, #12]
   21470:	mov	r5, r0
   21474:	mov	r4, r1
   21478:	mov	r0, r1
   2147c:	bl	21094 <__assert_fail@plt+0xf14c>
   21480:	mov	r2, r4
   21484:	mov	r1, r5
   21488:	bl	11ac8 <memcpy@plt>
   2148c:	ldrd	r4, [sp]
   21490:	ldr	r6, [sp, #8]
   21494:	add	sp, sp, #12
   21498:	pop	{pc}		; (ldr pc, [sp], #4)
   2149c:	strd	r4, [sp, #-16]!
   214a0:	str	r6, [sp, #8]
   214a4:	str	lr, [sp, #12]
   214a8:	mov	r5, r0
   214ac:	mov	r4, r1
   214b0:	add	r0, r1, #1
   214b4:	bl	21094 <__assert_fail@plt+0xf14c>
   214b8:	mov	r2, #0
   214bc:	strb	r2, [r0, r4]
   214c0:	mov	r2, r4
   214c4:	mov	r1, r5
   214c8:	bl	11ac8 <memcpy@plt>
   214cc:	ldrd	r4, [sp]
   214d0:	ldr	r6, [sp, #8]
   214d4:	add	sp, sp, #12
   214d8:	pop	{pc}		; (ldr pc, [sp], #4)
   214dc:	str	r4, [sp, #-8]!
   214e0:	str	lr, [sp, #4]
   214e4:	mov	r4, r0
   214e8:	bl	11d50 <strlen@plt>
   214ec:	add	r1, r0, #1
   214f0:	mov	r0, r4
   214f4:	bl	2142c <__assert_fail@plt+0xf4e4>
   214f8:	ldr	r4, [sp]
   214fc:	add	sp, sp, #4
   21500:	pop	{pc}		; (ldr pc, [sp], #4)
   21504:	str	r4, [sp, #-8]!
   21508:	str	lr, [sp, #4]
   2150c:	movw	r3, #25200	; 0x6270
   21510:	movt	r3, #3
   21514:	ldr	r4, [r3]
   21518:	mov	r2, #5
   2151c:	movw	r1, #22528	; 0x5800
   21520:	movt	r1, #2
   21524:	mov	r0, #0
   21528:	bl	11b58 <dcgettext@plt>
   2152c:	mov	r3, r0
   21530:	movw	r2, #14184	; 0x3768
   21534:	movt	r2, #2
   21538:	mov	r1, #0
   2153c:	mov	r0, r4
   21540:	bl	11c90 <error@plt>
   21544:	bl	11f24 <abort@plt>
   21548:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2154c:	strd	r6, [sp, #8]
   21550:	str	r8, [sp, #16]
   21554:	str	lr, [sp, #20]
   21558:	sub	sp, sp, #8
   2155c:	mov	r4, r0
   21560:	mov	r6, r1
   21564:	mov	r8, r2
   21568:	mov	r7, r3
   2156c:	mov	r2, #5
   21570:	movw	r1, #22548	; 0x5814
   21574:	movt	r1, #2
   21578:	mov	r0, #0
   2157c:	bl	11b58 <dcgettext@plt>
   21580:	mov	r2, r0
   21584:	mov	r1, r4
   21588:	mov	r0, #0
   2158c:	bl	11c90 <error@plt>
   21590:	mov	r2, #5
   21594:	movw	r1, #22576	; 0x5830
   21598:	movt	r1, #2
   2159c:	mov	r0, #0
   215a0:	bl	11b58 <dcgettext@plt>
   215a4:	mov	r2, r0
   215a8:	mov	r1, #0
   215ac:	mov	r0, r1
   215b0:	bl	11c90 <error@plt>
   215b4:	movw	r3, #25200	; 0x6270
   215b8:	movt	r3, #3
   215bc:	ldr	r4, [r3]
   215c0:	mov	r2, #5
   215c4:	movw	r1, #22620	; 0x585c
   215c8:	movt	r1, #2
   215cc:	mov	r0, #0
   215d0:	bl	11b58 <dcgettext@plt>
   215d4:	mov	r5, r0
   215d8:	mov	r3, r8
   215dc:	mov	r2, r6
   215e0:	mov	r1, #8
   215e4:	mov	r0, #0
   215e8:	bl	1f534 <__assert_fail@plt+0xd5ec>
   215ec:	mov	r6, r0
   215f0:	ldr	r3, [sp, #32]
   215f4:	mov	r2, r7
   215f8:	mov	r1, #8
   215fc:	mov	r0, #1
   21600:	bl	1f534 <__assert_fail@plt+0xd5ec>
   21604:	str	r0, [sp]
   21608:	mov	r3, r6
   2160c:	mov	r2, r5
   21610:	mov	r1, #0
   21614:	mov	r0, r4
   21618:	bl	11c90 <error@plt>
   2161c:	add	sp, sp, #8
   21620:	ldrd	r4, [sp]
   21624:	ldrd	r6, [sp, #8]
   21628:	ldr	r8, [sp, #16]
   2162c:	add	sp, sp, #20
   21630:	pop	{pc}		; (ldr pc, [sp], #4)
   21634:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21638:	strd	r6, [sp, #8]
   2163c:	str	r8, [sp, #16]
   21640:	str	lr, [sp, #20]
   21644:	sub	sp, sp, #8
   21648:	mov	r5, r0
   2164c:	mov	r6, r1
   21650:	mov	r7, r2
   21654:	mov	r8, r3
   21658:	bl	22668 <__assert_fail@plt+0x10720>
   2165c:	mov	r4, r0
   21660:	bl	11d74 <__errno_location@plt>
   21664:	ldr	r0, [r0]
   21668:	cmp	r0, #0
   2166c:	bne	2168c <__assert_fail@plt+0xf744>
   21670:	mov	r0, r4
   21674:	add	sp, sp, #8
   21678:	ldrd	r4, [sp]
   2167c:	ldrd	r6, [sp, #8]
   21680:	ldr	r8, [sp, #16]
   21684:	add	sp, sp, #20
   21688:	pop	{pc}		; (ldr pc, [sp], #4)
   2168c:	str	r8, [sp]
   21690:	mov	r3, r7
   21694:	mov	r2, r6
   21698:	mov	r1, r5
   2169c:	bl	21548 <__assert_fail@plt+0xf600>
   216a0:	b	21670 <__assert_fail@plt+0xf728>
   216a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   216a8:	strd	r6, [sp, #8]
   216ac:	str	r8, [sp, #16]
   216b0:	str	lr, [sp, #20]
   216b4:	sub	sp, sp, #8
   216b8:	mov	r6, r0
   216bc:	mov	r7, r1
   216c0:	mov	r8, r2
   216c4:	mov	r5, r3
   216c8:	bl	22708 <__assert_fail@plt+0x107c0>
   216cc:	mov	r4, r0
   216d0:	bl	11d74 <__errno_location@plt>
   216d4:	ldr	r0, [r0]
   216d8:	cmp	r0, #0
   216dc:	bne	216fc <__assert_fail@plt+0xf7b4>
   216e0:	mov	r0, r4
   216e4:	add	sp, sp, #8
   216e8:	ldrd	r4, [sp]
   216ec:	ldrd	r6, [sp, #8]
   216f0:	ldr	r8, [sp, #16]
   216f4:	add	sp, sp, #20
   216f8:	pop	{pc}		; (ldr pc, [sp], #4)
   216fc:	sub	r5, r5, #1
   21700:	str	r5, [sp]
   21704:	mov	r3, r8
   21708:	sub	r2, r7, #1
   2170c:	mov	r1, r6
   21710:	bl	21548 <__assert_fail@plt+0xf600>
   21714:	b	216e0 <__assert_fail@plt+0xf798>
   21718:	strd	r4, [sp, #-12]!
   2171c:	str	lr, [sp, #8]
   21720:	vpush	{d8}
   21724:	sub	sp, sp, #12
   21728:	vmov.f64	d8, d0
   2172c:	vldr	d7, [pc, #116]	; 217a8 <__assert_fail@plt+0xf860>
   21730:	vcmpe.f64	d0, d7
   21734:	vmrs	APSR_nzcv, fpscr
   21738:	blt	21750 <__assert_fail@plt+0xf808>
   2173c:	bl	11a50 <pause@plt>
   21740:	bl	11d74 <__errno_location@plt>
   21744:	ldr	r3, [r0]
   21748:	cmp	r3, #4
   2174c:	beq	2173c <__assert_fail@plt+0xf7f4>
   21750:	vmov.f64	d0, d8
   21754:	mov	r0, sp
   21758:	bl	22080 <__assert_fail@plt+0x10138>
   2175c:	bl	11d74 <__errno_location@plt>
   21760:	mov	r4, r0
   21764:	mov	r5, #0
   21768:	str	r5, [r4]
   2176c:	mov	r1, sp
   21770:	mov	r0, sp
   21774:	bl	11aa4 <nanosleep@plt>
   21778:	cmp	r0, #0
   2177c:	beq	21790 <__assert_fail@plt+0xf848>
   21780:	ldr	r3, [r4]
   21784:	bics	r3, r3, #4
   21788:	beq	21768 <__assert_fail@plt+0xf820>
   2178c:	mvn	r0, #0
   21790:	add	sp, sp, #12
   21794:	vpop	{d8}
   21798:	ldrd	r4, [sp]
   2179c:	add	sp, sp, #8
   217a0:	pop	{pc}		; (ldr pc, [sp], #4)
   217a4:	nop	{0}
   217a8:	andeq	r0, r0, r0
   217ac:	mvnmi	r0, r0
   217b0:	push	{lr}		; (str lr, [sp, #-4]!)
   217b4:	sub	sp, sp, #20
   217b8:	movw	ip, #25200	; 0x6270
   217bc:	movt	ip, #3
   217c0:	ldr	r5, [ip]
   217c4:	sub	r0, r0, #1
   217c8:	cmp	r0, #3
   217cc:	ldrls	pc, [pc, r0, lsl #2]
   217d0:	b	217f0 <__assert_fail@plt+0xf8a8>
   217d4:	strdeq	r1, [r2], -r4
   217d8:	andeq	r1, r2, r4, ror #15
   217dc:	andeq	r1, r2, r4, ror #15
   217e0:	andeq	r1, r2, r0, lsl #16
   217e4:	movw	r0, #22720	; 0x58c0
   217e8:	movt	r0, #2
   217ec:	b	21808 <__assert_fail@plt+0xf8c0>
   217f0:	bl	11f24 <abort@plt>
   217f4:	movw	r0, #22660	; 0x5884
   217f8:	movt	r0, #2
   217fc:	b	21808 <__assert_fail@plt+0xf8c0>
   21800:	movw	r0, #22692	; 0x58a4
   21804:	movt	r0, #2
   21808:	cmp	r1, #0
   2180c:	blt	21850 <__assert_fail@plt+0xf908>
   21810:	ldr	r6, [r3, r1, lsl #4]
   21814:	movw	r4, #22760	; 0x58e8
   21818:	movt	r4, #2
   2181c:	mov	r2, #5
   21820:	mov	r1, r0
   21824:	mov	r0, #0
   21828:	bl	11b58 <dcgettext@plt>
   2182c:	ldr	r3, [sp, #24]
   21830:	str	r3, [sp, #4]
   21834:	str	r6, [sp]
   21838:	mov	r3, r4
   2183c:	mov	r2, r0
   21840:	mov	r1, #0
   21844:	mov	r0, r5
   21848:	bl	11c90 <error@plt>
   2184c:	bl	11f24 <abort@plt>
   21850:	movw	r4, #22760	; 0x58e8
   21854:	movt	r4, #2
   21858:	sub	r4, r4, r1
   2185c:	strb	r2, [sp, #12]
   21860:	mov	r3, #0
   21864:	strb	r3, [sp, #13]
   21868:	add	r6, sp, #12
   2186c:	b	2181c <__assert_fail@plt+0xf8d4>
   21870:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21874:	strd	r6, [sp, #8]
   21878:	strd	r8, [sp, #16]
   2187c:	strd	sl, [sp, #24]
   21880:	str	lr, [sp, #32]
   21884:	sub	sp, sp, #12
   21888:	str	r0, [sp, #4]
   2188c:	cmp	r2, #0
   21890:	beq	2198c <__assert_fail@plt+0xfa44>
   21894:	sub	ip, r2, #1
   21898:	ldrd	r2, [r0]
   2189c:	mov	r0, #0
   218a0:	mov	r8, r1
   218a4:	asr	r9, r1, #31
   218a8:	str	r1, [sp]
   218ac:	b	218fc <__assert_fail@plt+0xf9b4>
   218b0:	orrs	r4, r2, r3
   218b4:	movne	lr, #1
   218b8:	b	2190c <__assert_fail@plt+0xf9c4>
   218bc:	mov	sl, r3
   218c0:	ldr	fp, [sp]
   218c4:	umull	r6, r7, r1, r2
   218c8:	mov	r4, r7
   218cc:	mov	r5, #0
   218d0:	umlal	r4, r5, sl, fp
   218d4:	cmp	r5, #0
   218d8:	bne	21940 <__assert_fail@plt+0xf9f8>
   218dc:	cmp	lr, #0
   218e0:	bne	21958 <__assert_fail@plt+0xfa10>
   218e4:	mov	r2, r6
   218e8:	mov	r3, r4
   218ec:	orr	r0, r0, lr
   218f0:	sub	ip, ip, #1
   218f4:	cmn	ip, #1
   218f8:	beq	21968 <__assert_fail@plt+0xfa20>
   218fc:	mov	lr, #0
   21900:	cmp	r8, #0
   21904:	sbcs	r4, r9, #0
   21908:	blt	218b0 <__assert_fail@plt+0xf968>
   2190c:	cmp	r9, #0
   21910:	bne	2192c <__assert_fail@plt+0xf9e4>
   21914:	cmp	r3, #0
   21918:	bne	218bc <__assert_fail@plt+0xf974>
   2191c:	umull	r2, r3, r1, r2
   21920:	mov	r6, r2
   21924:	mov	r4, r3
   21928:	b	218dc <__assert_fail@plt+0xf994>
   2192c:	cmp	r3, #0
   21930:	bne	21940 <__assert_fail@plt+0xf9f8>
   21934:	mov	sl, r9
   21938:	mov	fp, r2
   2193c:	b	218c4 <__assert_fail@plt+0xf97c>
   21940:	mul	r4, r1, r3
   21944:	mla	r4, r2, r9, r4
   21948:	umull	r6, r7, r1, r2
   2194c:	add	r4, r4, r7
   21950:	mov	lr, #1
   21954:	b	218dc <__assert_fail@plt+0xf994>
   21958:	mvn	r2, #0
   2195c:	mvn	r3, #0
   21960:	mov	lr, #1
   21964:	b	218ec <__assert_fail@plt+0xf9a4>
   21968:	ldr	r1, [sp, #4]
   2196c:	strd	r2, [r1]
   21970:	add	sp, sp, #12
   21974:	ldrd	r4, [sp]
   21978:	ldrd	r6, [sp, #8]
   2197c:	ldrd	r8, [sp, #16]
   21980:	ldrd	sl, [sp, #24]
   21984:	add	sp, sp, #32
   21988:	pop	{pc}		; (ldr pc, [sp], #4)
   2198c:	mov	r0, #0
   21990:	b	21970 <__assert_fail@plt+0xfa28>
   21994:	strd	r4, [sp, #-28]!	; 0xffffffe4
   21998:	strd	r6, [sp, #8]
   2199c:	strd	r8, [sp, #16]
   219a0:	str	lr, [sp, #24]
   219a4:	sub	sp, sp, #20
   219a8:	cmp	r2, #36	; 0x24
   219ac:	bhi	21a00 <__assert_fail@plt+0xfab8>
   219b0:	mov	r5, r0
   219b4:	mov	r6, r1
   219b8:	mov	r7, r2
   219bc:	mov	r9, r3
   219c0:	cmp	r1, #0
   219c4:	addeq	r6, sp, #12
   219c8:	bl	11d74 <__errno_location@plt>
   219cc:	mov	r8, r0
   219d0:	mov	r3, #0
   219d4:	str	r3, [r0]
   219d8:	ldrb	r4, [r5]
   219dc:	bl	11d2c <__ctype_b_loc@plt>
   219e0:	ldr	r1, [r0]
   219e4:	mov	r2, r5
   219e8:	lsl	r3, r4, #1
   219ec:	ldrh	r3, [r1, r3]
   219f0:	tst	r3, #8192	; 0x2000
   219f4:	beq	21a20 <__assert_fail@plt+0xfad8>
   219f8:	ldrb	r4, [r2, #1]!
   219fc:	b	219e8 <__assert_fail@plt+0xfaa0>
   21a00:	movw	r3, #22764	; 0x58ec
   21a04:	movt	r3, #2
   21a08:	mov	r2, #85	; 0x55
   21a0c:	movw	r1, #22776	; 0x58f8
   21a10:	movt	r1, #2
   21a14:	movw	r0, #22792	; 0x5908
   21a18:	movt	r0, #2
   21a1c:	bl	11f48 <__assert_fail@plt>
   21a20:	cmp	r4, #45	; 0x2d
   21a24:	moveq	r4, #4
   21a28:	beq	21bbc <__assert_fail@plt+0xfc74>
   21a2c:	mov	r3, #0
   21a30:	mov	r2, r7
   21a34:	mov	r1, r6
   21a38:	mov	r0, r5
   21a3c:	bl	11aec <__strtoull_internal@plt>
   21a40:	strd	r0, [sp]
   21a44:	ldr	r7, [r6]
   21a48:	cmp	r7, r5
   21a4c:	beq	21a70 <__assert_fail@plt+0xfb28>
   21a50:	ldr	r3, [r8]
   21a54:	cmp	r3, #0
   21a58:	beq	21b94 <__assert_fail@plt+0xfc4c>
   21a5c:	cmp	r3, #34	; 0x22
   21a60:	moveq	r4, #1
   21a64:	beq	21b98 <__assert_fail@plt+0xfc50>
   21a68:	mov	r4, #4
   21a6c:	b	21bbc <__assert_fail@plt+0xfc74>
   21a70:	ldr	r3, [sp, #48]	; 0x30
   21a74:	cmp	r3, #0
   21a78:	beq	21ed4 <__assert_fail@plt+0xff8c>
   21a7c:	ldrb	r1, [r5]
   21a80:	cmp	r1, #0
   21a84:	moveq	r4, #4
   21a88:	beq	21bbc <__assert_fail@plt+0xfc74>
   21a8c:	mov	r0, r3
   21a90:	bl	11d5c <strchr@plt>
   21a94:	cmp	r0, #0
   21a98:	beq	21edc <__assert_fail@plt+0xff94>
   21a9c:	mov	r2, #1
   21aa0:	mov	r3, #0
   21aa4:	strd	r2, [sp]
   21aa8:	ldrb	r5, [r7]
   21aac:	mov	r4, #0
   21ab0:	mov	r1, r5
   21ab4:	ldr	r0, [sp, #48]	; 0x30
   21ab8:	bl	11d5c <strchr@plt>
   21abc:	cmp	r0, #0
   21ac0:	beq	21bd8 <__assert_fail@plt+0xfc90>
   21ac4:	sub	r3, r5, #69	; 0x45
   21ac8:	cmp	r3, #47	; 0x2f
   21acc:	ldrls	pc, [pc, r3, lsl #2]
   21ad0:	b	21d24 <__assert_fail@plt+0xfddc>
   21ad4:	andeq	r1, r2, r8, ror #23
   21ad8:	andeq	r1, r2, r4, lsr #26
   21adc:	andeq	r1, r2, r8, ror #23
   21ae0:	andeq	r1, r2, r4, lsr #26
   21ae4:	andeq	r1, r2, r4, lsr #26
   21ae8:	andeq	r1, r2, r4, lsr #26
   21aec:	andeq	r1, r2, r8, ror #23
   21af0:	andeq	r1, r2, r4, lsr #26
   21af4:	andeq	r1, r2, r8, ror #23
   21af8:	andeq	r1, r2, r4, lsr #26
   21afc:	andeq	r1, r2, r4, lsr #26
   21b00:	andeq	r1, r2, r8, ror #23
   21b04:	andeq	r1, r2, r4, lsr #26
   21b08:	andeq	r1, r2, r4, lsr #26
   21b0c:	andeq	r1, r2, r4, lsr #26
   21b10:	andeq	r1, r2, r8, ror #23
   21b14:	andeq	r1, r2, r4, lsr #26
   21b18:	andeq	r1, r2, r4, lsr #26
   21b1c:	andeq	r1, r2, r4, lsr #26
   21b20:	andeq	r1, r2, r4, lsr #26
   21b24:	andeq	r1, r2, r8, ror #23
   21b28:	andeq	r1, r2, r8, ror #23
   21b2c:	andeq	r1, r2, r4, lsr #26
   21b30:	andeq	r1, r2, r4, lsr #26
   21b34:	andeq	r1, r2, r4, lsr #26
   21b38:	andeq	r1, r2, r4, lsr #26
   21b3c:	andeq	r1, r2, r4, lsr #26
   21b40:	andeq	r1, r2, r4, lsr #26
   21b44:	andeq	r1, r2, r4, lsr #26
   21b48:	andeq	r1, r2, r4, lsr #26
   21b4c:	andeq	r1, r2, r4, lsr #26
   21b50:	andeq	r1, r2, r4, lsr #26
   21b54:	andeq	r1, r2, r4, lsr #26
   21b58:	andeq	r1, r2, r4, lsr #26
   21b5c:	andeq	r1, r2, r8, ror #23
   21b60:	andeq	r1, r2, r4, lsr #26
   21b64:	andeq	r1, r2, r4, lsr #26
   21b68:	andeq	r1, r2, r4, lsr #26
   21b6c:	andeq	r1, r2, r8, ror #23
   21b70:	andeq	r1, r2, r4, lsr #26
   21b74:	andeq	r1, r2, r8, ror #23
   21b78:	andeq	r1, r2, r4, lsr #26
   21b7c:	andeq	r1, r2, r4, lsr #26
   21b80:	andeq	r1, r2, r4, lsr #26
   21b84:	andeq	r1, r2, r4, lsr #26
   21b88:	andeq	r1, r2, r4, lsr #26
   21b8c:	andeq	r1, r2, r4, lsr #26
   21b90:	andeq	r1, r2, r8, ror #23
   21b94:	mov	r4, #0
   21b98:	ldr	r3, [sp, #48]	; 0x30
   21b9c:	cmp	r3, #0
   21ba0:	strdeq	r0, [r9]
   21ba4:	beq	21bbc <__assert_fail@plt+0xfc74>
   21ba8:	ldrb	r5, [r7]
   21bac:	cmp	r5, #0
   21bb0:	bne	21ab0 <__assert_fail@plt+0xfb68>
   21bb4:	ldrd	r2, [sp]
   21bb8:	strd	r2, [r9]
   21bbc:	mov	r0, r4
   21bc0:	add	sp, sp, #20
   21bc4:	ldrd	r4, [sp]
   21bc8:	ldrd	r6, [sp, #8]
   21bcc:	ldrd	r8, [sp, #16]
   21bd0:	add	sp, sp, #24
   21bd4:	pop	{pc}		; (ldr pc, [sp], #4)
   21bd8:	ldrd	r2, [sp]
   21bdc:	strd	r2, [r9]
   21be0:	orr	r4, r4, #2
   21be4:	b	21bbc <__assert_fail@plt+0xfc74>
   21be8:	mov	r1, #48	; 0x30
   21bec:	ldr	r0, [sp, #48]	; 0x30
   21bf0:	bl	11d5c <strchr@plt>
   21bf4:	cmp	r0, #0
   21bf8:	beq	21d30 <__assert_fail@plt+0xfde8>
   21bfc:	ldrb	r3, [r7, #1]
   21c00:	cmp	r3, #68	; 0x44
   21c04:	beq	21d3c <__assert_fail@plt+0xfdf4>
   21c08:	cmp	r3, #105	; 0x69
   21c0c:	beq	21d0c <__assert_fail@plt+0xfdc4>
   21c10:	cmp	r3, #66	; 0x42
   21c14:	moveq	r7, #2
   21c18:	movne	r7, #1
   21c1c:	moveq	r1, #1000	; 0x3e8
   21c20:	movne	r1, #1024	; 0x400
   21c24:	sub	r5, r5, #66	; 0x42
   21c28:	cmp	r5, #53	; 0x35
   21c2c:	ldrls	pc, [pc, r5, lsl #2]
   21c30:	b	21ea0 <__assert_fail@plt+0xff58>
   21c34:	muleq	r2, r0, sp
   21c38:	andeq	r1, r2, r0, lsr #29
   21c3c:	andeq	r1, r2, r0, lsr #29
   21c40:	ldrdeq	r1, [r2], -r8
   21c44:	andeq	r1, r2, r0, lsr #29
   21c48:	andeq	r1, r2, r8, ror #27
   21c4c:	andeq	r1, r2, r0, lsr #29
   21c50:	andeq	r1, r2, r0, lsr #29
   21c54:	andeq	r1, r2, r0, lsr #29
   21c58:	strdeq	r1, [r2], -r8
   21c5c:	andeq	r1, r2, r0, lsr #29
   21c60:	andeq	r1, r2, r8, lsl #28
   21c64:	andeq	r1, r2, r0, lsr #29
   21c68:	andeq	r1, r2, r0, lsr #29
   21c6c:	andeq	r1, r2, r8, lsl lr
   21c70:	andeq	r1, r2, r0, lsr #29
   21c74:	andeq	r1, r2, r0, lsr #29
   21c78:	andeq	r1, r2, r0, lsr #29
   21c7c:	andeq	r1, r2, r8, lsr #28
   21c80:	andeq	r1, r2, r0, lsr #29
   21c84:	andeq	r1, r2, r0, lsr #29
   21c88:	andeq	r1, r2, r0, lsr #29
   21c8c:	andeq	r1, r2, r0, lsr #29
   21c90:	andeq	r1, r2, r0, lsl #29
   21c94:	muleq	r2, r0, lr
   21c98:	andeq	r1, r2, r0, lsr #29
   21c9c:	andeq	r1, r2, r0, lsr #29
   21ca0:	andeq	r1, r2, r0, lsr #29
   21ca4:	andeq	r1, r2, r0, lsr #29
   21ca8:	andeq	r1, r2, r0, lsr #29
   21cac:	andeq	r1, r2, r0, lsr #29
   21cb0:	andeq	r1, r2, r0, lsr #29
   21cb4:	andeq	r1, r2, r8, asr #26
   21cb8:			; <UNDEFINED> instruction: 0x00021eb0
   21cbc:	andeq	r1, r2, r0, lsr #29
   21cc0:	andeq	r1, r2, r0, lsr #29
   21cc4:	andeq	r1, r2, r0, lsr #29
   21cc8:	andeq	r1, r2, r8, ror #27
   21ccc:	andeq	r1, r2, r0, lsr #29
   21cd0:	andeq	r1, r2, r0, lsr #29
   21cd4:	andeq	r1, r2, r0, lsr #29
   21cd8:	strdeq	r1, [r2], -r8
   21cdc:	andeq	r1, r2, r0, lsr #29
   21ce0:	andeq	r1, r2, r8, lsl #28
   21ce4:	andeq	r1, r2, r0, lsr #29
   21ce8:	andeq	r1, r2, r0, lsr #29
   21cec:	andeq	r1, r2, r0, lsr #29
   21cf0:	andeq	r1, r2, r0, lsr #29
   21cf4:	andeq	r1, r2, r0, lsr #29
   21cf8:	andeq	r1, r2, r0, lsr #29
   21cfc:	andeq	r1, r2, r8, lsr #28
   21d00:	andeq	r1, r2, r0, lsr #29
   21d04:	andeq	r1, r2, r0, lsr #29
   21d08:	andeq	r1, r2, r8, lsr lr
   21d0c:	ldrb	r3, [r7, #2]
   21d10:	cmp	r3, #66	; 0x42
   21d14:	movne	r7, #1
   21d18:	moveq	r7, #3
   21d1c:	mov	r1, #1024	; 0x400
   21d20:	b	21c24 <__assert_fail@plt+0xfcdc>
   21d24:	mov	r7, #1
   21d28:	mov	r1, #1024	; 0x400
   21d2c:	b	21c24 <__assert_fail@plt+0xfcdc>
   21d30:	mov	r7, #1
   21d34:	mov	r1, #1024	; 0x400
   21d38:	b	21c24 <__assert_fail@plt+0xfcdc>
   21d3c:	mov	r7, #2
   21d40:	mov	r1, #1000	; 0x3e8
   21d44:	b	21c24 <__assert_fail@plt+0xfcdc>
   21d48:	ldr	r3, [sp]
   21d4c:	ldr	ip, [sp, #4]
   21d50:	lsl	r2, ip, #9
   21d54:	orr	r2, r2, r3, lsr #23
   21d58:	lsl	r3, r3, #9
   21d5c:	mov	r0, #0
   21d60:	mov	r1, r0
   21d64:	lsr	r0, ip, #23
   21d68:	orrs	r1, r0, r1
   21d6c:	streq	r3, [sp]
   21d70:	streq	r2, [sp, #4]
   21d74:	moveq	r0, #0
   21d78:	beq	21eb4 <__assert_fail@plt+0xff6c>
   21d7c:	mvn	r2, #0
   21d80:	mvn	r3, #0
   21d84:	strd	r2, [sp]
   21d88:	mov	r0, #1
   21d8c:	b	21eb4 <__assert_fail@plt+0xff6c>
   21d90:	ldr	r3, [sp]
   21d94:	ldr	ip, [sp, #4]
   21d98:	lsl	r2, ip, #10
   21d9c:	orr	r2, r2, r3, lsr #22
   21da0:	lsl	r3, r3, #10
   21da4:	mov	r0, #0
   21da8:	mov	r1, r0
   21dac:	lsr	r0, ip, #22
   21db0:	orrs	r1, r0, r1
   21db4:	streq	r3, [sp]
   21db8:	streq	r2, [sp, #4]
   21dbc:	moveq	r0, #0
   21dc0:	beq	21eb4 <__assert_fail@plt+0xff6c>
   21dc4:	mvn	r2, #0
   21dc8:	mvn	r3, #0
   21dcc:	strd	r2, [sp]
   21dd0:	mov	r0, #1
   21dd4:	b	21eb4 <__assert_fail@plt+0xff6c>
   21dd8:	mov	r2, #6
   21ddc:	mov	r0, sp
   21de0:	bl	21870 <__assert_fail@plt+0xf928>
   21de4:	b	21eb4 <__assert_fail@plt+0xff6c>
   21de8:	mov	r2, #3
   21dec:	mov	r0, sp
   21df0:	bl	21870 <__assert_fail@plt+0xf928>
   21df4:	b	21eb4 <__assert_fail@plt+0xff6c>
   21df8:	mov	r2, #1
   21dfc:	mov	r0, sp
   21e00:	bl	21870 <__assert_fail@plt+0xf928>
   21e04:	b	21eb4 <__assert_fail@plt+0xff6c>
   21e08:	mov	r2, #2
   21e0c:	mov	r0, sp
   21e10:	bl	21870 <__assert_fail@plt+0xf928>
   21e14:	b	21eb4 <__assert_fail@plt+0xff6c>
   21e18:	mov	r2, #5
   21e1c:	mov	r0, sp
   21e20:	bl	21870 <__assert_fail@plt+0xf928>
   21e24:	b	21eb4 <__assert_fail@plt+0xff6c>
   21e28:	mov	r2, #4
   21e2c:	mov	r0, sp
   21e30:	bl	21870 <__assert_fail@plt+0xf928>
   21e34:	b	21eb4 <__assert_fail@plt+0xff6c>
   21e38:	ldr	r3, [sp]
   21e3c:	ldr	r2, [sp, #4]
   21e40:	adds	r3, r3, r3
   21e44:	adc	r2, r2, r2
   21e48:	mov	r1, #0
   21e4c:	mov	r0, r1
   21e50:	ldr	r1, [sp, #4]
   21e54:	lsr	r1, r1, #31
   21e58:	orrs	r1, r1, r0
   21e5c:	streq	r3, [sp]
   21e60:	streq	r2, [sp, #4]
   21e64:	moveq	r0, #0
   21e68:	beq	21eb4 <__assert_fail@plt+0xff6c>
   21e6c:	mvn	r2, #0
   21e70:	mvn	r3, #0
   21e74:	strd	r2, [sp]
   21e78:	mov	r0, #1
   21e7c:	b	21eb4 <__assert_fail@plt+0xff6c>
   21e80:	mov	r2, #8
   21e84:	mov	r0, sp
   21e88:	bl	21870 <__assert_fail@plt+0xf928>
   21e8c:	b	21eb4 <__assert_fail@plt+0xff6c>
   21e90:	mov	r2, #7
   21e94:	mov	r0, sp
   21e98:	bl	21870 <__assert_fail@plt+0xf928>
   21e9c:	b	21eb4 <__assert_fail@plt+0xff6c>
   21ea0:	ldrd	r2, [sp]
   21ea4:	strd	r2, [r9]
   21ea8:	orr	r4, r4, #2
   21eac:	b	21bbc <__assert_fail@plt+0xfc74>
   21eb0:	mov	r0, #0
   21eb4:	orr	r4, r4, r0
   21eb8:	ldr	r3, [r6]
   21ebc:	add	r2, r3, r7
   21ec0:	str	r2, [r6]
   21ec4:	ldrb	r3, [r3, r7]
   21ec8:	cmp	r3, #0
   21ecc:	orrne	r4, r4, #2
   21ed0:	b	21bb4 <__assert_fail@plt+0xfc6c>
   21ed4:	mov	r4, #4
   21ed8:	b	21bbc <__assert_fail@plt+0xfc74>
   21edc:	mov	r4, #4
   21ee0:	b	21bbc <__assert_fail@plt+0xfc74>
   21ee4:	strd	r4, [sp, #-16]!
   21ee8:	str	r6, [sp, #8]
   21eec:	str	lr, [sp, #12]
   21ef0:	cmp	r1, #0
   21ef4:	cmpne	r0, #0
   21ef8:	beq	21f34 <__assert_fail@plt+0xffec>
   21efc:	mov	r2, r0
   21f00:	mov	r3, r1
   21f04:	umull	r4, r5, r0, r1
   21f08:	adds	r1, r5, #0
   21f0c:	movne	r1, #1
   21f10:	cmp	r4, #0
   21f14:	movlt	r1, #1
   21f18:	cmp	r1, #0
   21f1c:	beq	21f3c <__assert_fail@plt+0xfff4>
   21f20:	bl	11d74 <__errno_location@plt>
   21f24:	mov	r3, #12
   21f28:	str	r3, [r0]
   21f2c:	mov	r0, #0
   21f30:	b	21f48 <__assert_fail@plt+0x10000>
   21f34:	mov	r3, #1
   21f38:	mov	r2, r3
   21f3c:	mov	r1, r3
   21f40:	mov	r0, r2
   21f44:	bl	11a08 <calloc@plt>
   21f48:	ldrd	r4, [sp]
   21f4c:	ldr	r6, [sp, #8]
   21f50:	add	sp, sp, #12
   21f54:	pop	{pc}		; (ldr pc, [sp], #4)
   21f58:	str	r4, [sp, #-8]!
   21f5c:	str	lr, [sp, #4]
   21f60:	cmp	r0, #0
   21f64:	beq	21f80 <__assert_fail@plt+0x10038>
   21f68:	bge	21f84 <__assert_fail@plt+0x1003c>
   21f6c:	bl	11d74 <__errno_location@plt>
   21f70:	mov	r3, #12
   21f74:	str	r3, [r0]
   21f78:	mov	r0, #0
   21f7c:	b	21f88 <__assert_fail@plt+0x10040>
   21f80:	mov	r0, #1
   21f84:	bl	11cd8 <malloc@plt>
   21f88:	ldr	r4, [sp]
   21f8c:	add	sp, sp, #4
   21f90:	pop	{pc}		; (ldr pc, [sp], #4)
   21f94:	str	r4, [sp, #-8]!
   21f98:	str	lr, [sp, #4]
   21f9c:	cmp	r0, #0
   21fa0:	beq	21fc4 <__assert_fail@plt+0x1007c>
   21fa4:	cmp	r1, #0
   21fa8:	beq	21fd0 <__assert_fail@plt+0x10088>
   21fac:	cmp	r1, #0
   21fb0:	blt	21fdc <__assert_fail@plt+0x10094>
   21fb4:	bl	11ba0 <realloc@plt>
   21fb8:	ldr	r4, [sp]
   21fbc:	add	sp, sp, #4
   21fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   21fc4:	mov	r0, r1
   21fc8:	bl	21f58 <__assert_fail@plt+0x10010>
   21fcc:	b	21fb8 <__assert_fail@plt+0x10070>
   21fd0:	bl	1b778 <__assert_fail@plt+0x9830>
   21fd4:	mov	r0, #0
   21fd8:	b	21fb8 <__assert_fail@plt+0x10070>
   21fdc:	bl	11d74 <__errno_location@plt>
   21fe0:	mov	r3, #12
   21fe4:	str	r3, [r0]
   21fe8:	mov	r0, #0
   21fec:	b	21fb8 <__assert_fail@plt+0x10070>
   21ff0:	strd	r4, [sp, #-16]!
   21ff4:	str	r6, [sp, #8]
   21ff8:	str	lr, [sp, #12]
   21ffc:	mov	r5, r0
   22000:	bl	11c78 <__fpending@plt>
   22004:	mov	r6, r0
   22008:	ldr	r4, [r5]
   2200c:	and	r4, r4, #32
   22010:	mov	r0, r5
   22014:	bl	1b14c <__assert_fail@plt+0x9204>
   22018:	cmp	r4, #0
   2201c:	bne	22050 <__assert_fail@plt+0x10108>
   22020:	cmp	r0, #0
   22024:	beq	22040 <__assert_fail@plt+0x100f8>
   22028:	cmp	r6, #0
   2202c:	bne	2206c <__assert_fail@plt+0x10124>
   22030:	bl	11d74 <__errno_location@plt>
   22034:	ldr	r0, [r0]
   22038:	subs	r0, r0, #9
   2203c:	mvnne	r0, #0
   22040:	ldrd	r4, [sp]
   22044:	ldr	r6, [sp, #8]
   22048:	add	sp, sp, #12
   2204c:	pop	{pc}		; (ldr pc, [sp], #4)
   22050:	cmp	r0, #0
   22054:	bne	22074 <__assert_fail@plt+0x1012c>
   22058:	bl	11d74 <__errno_location@plt>
   2205c:	mov	r3, #0
   22060:	str	r3, [r0]
   22064:	mvn	r0, #0
   22068:	b	22040 <__assert_fail@plt+0x100f8>
   2206c:	mvn	r0, #0
   22070:	b	22040 <__assert_fail@plt+0x100f8>
   22074:	mvn	r0, #0
   22078:	b	22040 <__assert_fail@plt+0x100f8>
   2207c:	andeq	r0, r0, r0
   22080:	vldr	d7, [pc, #200]	; 22150 <__assert_fail@plt+0x10208>
   22084:	vcmpe.f64	d0, d7
   22088:	vmrs	APSR_nzcv, fpscr
   2208c:	ble	220b8 <__assert_fail@plt+0x10170>
   22090:	vldr	d7, [pc, #192]	; 22158 <__assert_fail@plt+0x10210>
   22094:	vcmpe.f64	d0, d7
   22098:	vmrs	APSR_nzcv, fpscr
   2209c:	bmi	220cc <__assert_fail@plt+0x10184>
   220a0:	mvn	r3, #-2147483648	; 0x80000000
   220a4:	str	r3, [r0]
   220a8:	movw	r3, #51711	; 0xc9ff
   220ac:	movt	r3, #15258	; 0x3b9a
   220b0:	str	r3, [r0, #4]
   220b4:	bx	lr
   220b8:	mov	r3, #-2147483648	; 0x80000000
   220bc:	str	r3, [r0]
   220c0:	mov	r3, #0
   220c4:	str	r3, [r0, #4]
   220c8:	bx	lr
   220cc:	vcvt.s32.f64	s15, d0
   220d0:	vcvt.f64.s32	d6, s15
   220d4:	vsub.f64	d0, d0, d6
   220d8:	vldr	d6, [pc, #128]	; 22160 <__assert_fail@plt+0x10218>
   220dc:	vmul.f64	d0, d0, d6
   220e0:	vcvt.s32.f64	s14, d0
   220e4:	vcvt.f64.s32	d6, s14
   220e8:	vcmpe.f64	d6, d0
   220ec:	vmrs	APSR_nzcv, fpscr
   220f0:	movmi	r3, #1
   220f4:	movpl	r3, #0
   220f8:	vmov	r2, s14
   220fc:	add	r2, r3, r2
   22100:	movw	r3, #12193	; 0x2fa1
   22104:	movt	r3, #17592	; 0x44b8
   22108:	smull	r3, r1, r3, r2
   2210c:	asr	r3, r2, #31
   22110:	rsb	r3, r3, r1, asr #28
   22114:	vmov	r1, s15
   22118:	add	r1, r3, r1
   2211c:	mov	ip, #51712	; 0xca00
   22120:	movt	ip, #15258	; 0x3b9a
   22124:	mls	r3, ip, r3, r2
   22128:	cmp	r3, #0
   2212c:	blt	2213c <__assert_fail@plt+0x101f4>
   22130:	str	r1, [r0]
   22134:	str	r3, [r0, #4]
   22138:	bx	lr
   2213c:	sub	r1, r1, #1
   22140:	add	r3, r3, #998244352	; 0x3b800000
   22144:	add	r3, r3, #1753088	; 0x1ac000
   22148:	add	r3, r3, #2560	; 0xa00
   2214c:	b	22130 <__assert_fail@plt+0x101e8>
   22150:	andeq	r0, r0, r0
   22154:	mvngt	r0, r0
   22158:	andeq	r0, r0, r0
   2215c:	mvnmi	r0, r0
   22160:	andeq	r0, r0, r0
   22164:	bicmi	ip, sp, r5, ror #26
   22168:	push	{r1, r2, r3}
   2216c:	strd	r4, [sp, #-16]!
   22170:	str	r6, [sp, #8]
   22174:	str	lr, [sp, #12]
   22178:	sub	sp, sp, #12
   2217c:	mov	r5, r0
   22180:	ldr	r1, [sp, #28]
   22184:	add	r3, sp, #32
   22188:	str	r3, [sp, #4]
   2218c:	cmp	r1, #0
   22190:	beq	221d8 <__assert_fail@plt+0x10290>
   22194:	movw	r3, #1030	; 0x406
   22198:	cmp	r1, r3
   2219c:	beq	22214 <__assert_fail@plt+0x102cc>
   221a0:	cmp	r1, #11
   221a4:	beq	223c4 <__assert_fail@plt+0x1047c>
   221a8:	bgt	22350 <__assert_fail@plt+0x10408>
   221ac:	cmp	r1, #3
   221b0:	beq	223c4 <__assert_fail@plt+0x1047c>
   221b4:	ble	22310 <__assert_fail@plt+0x103c8>
   221b8:	cmp	r1, #8
   221bc:	beq	22330 <__assert_fail@plt+0x103e8>
   221c0:	ble	22328 <__assert_fail@plt+0x103e0>
   221c4:	cmp	r1, #9
   221c8:	beq	223c4 <__assert_fail@plt+0x1047c>
   221cc:	cmp	r1, #10
   221d0:	bne	22388 <__assert_fail@plt+0x10440>
   221d4:	b	22330 <__assert_fail@plt+0x103e8>
   221d8:	ldr	r3, [sp, #4]
   221dc:	add	r2, r3, #4
   221e0:	str	r2, [sp, #4]
   221e4:	ldr	r2, [r3]
   221e8:	mov	r1, #0
   221ec:	bl	11e10 <fcntl64@plt>
   221f0:	mov	r4, r0
   221f4:	mov	r0, r4
   221f8:	add	sp, sp, #12
   221fc:	ldrd	r4, [sp]
   22200:	ldr	r6, [sp, #8]
   22204:	ldr	lr, [sp, #12]
   22208:	add	sp, sp, #16
   2220c:	add	sp, sp, #12
   22210:	bx	lr
   22214:	ldr	r3, [sp, #4]
   22218:	add	r2, r3, #4
   2221c:	str	r2, [sp, #4]
   22220:	ldr	r6, [r3]
   22224:	movw	r3, #27136	; 0x6a00
   22228:	movt	r3, #3
   2222c:	ldr	r3, [r3]
   22230:	cmp	r3, #0
   22234:	blt	2229c <__assert_fail@plt+0x10354>
   22238:	mov	r2, r6
   2223c:	movw	r1, #1030	; 0x406
   22240:	bl	11e10 <fcntl64@plt>
   22244:	subs	r4, r0, #0
   22248:	blt	22260 <__assert_fail@plt+0x10318>
   2224c:	movw	r3, #27136	; 0x6a00
   22250:	movt	r3, #3
   22254:	mov	r2, #1
   22258:	str	r2, [r3]
   2225c:	b	221f4 <__assert_fail@plt+0x102ac>
   22260:	bl	11d74 <__errno_location@plt>
   22264:	ldr	r3, [r0]
   22268:	cmp	r3, #22
   2226c:	bne	2224c <__assert_fail@plt+0x10304>
   22270:	mov	r2, r6
   22274:	mov	r1, #0
   22278:	mov	r0, r5
   2227c:	bl	11e10 <fcntl64@plt>
   22280:	subs	r4, r0, #0
   22284:	blt	221f4 <__assert_fail@plt+0x102ac>
   22288:	movw	r3, #27136	; 0x6a00
   2228c:	movt	r3, #3
   22290:	mvn	r2, #0
   22294:	str	r2, [r3]
   22298:	b	222c4 <__assert_fail@plt+0x1037c>
   2229c:	mov	r2, r6
   222a0:	mov	r1, #0
   222a4:	bl	11e10 <fcntl64@plt>
   222a8:	subs	r4, r0, #0
   222ac:	blt	221f4 <__assert_fail@plt+0x102ac>
   222b0:	movw	r3, #27136	; 0x6a00
   222b4:	movt	r3, #3
   222b8:	ldr	r3, [r3]
   222bc:	cmn	r3, #1
   222c0:	bne	221f4 <__assert_fail@plt+0x102ac>
   222c4:	mov	r1, #1
   222c8:	mov	r0, r4
   222cc:	bl	11e10 <fcntl64@plt>
   222d0:	subs	r2, r0, #0
   222d4:	blt	222f0 <__assert_fail@plt+0x103a8>
   222d8:	orr	r2, r2, #1
   222dc:	mov	r1, #2
   222e0:	mov	r0, r4
   222e4:	bl	11e10 <fcntl64@plt>
   222e8:	cmn	r0, #1
   222ec:	bne	221f4 <__assert_fail@plt+0x102ac>
   222f0:	bl	11d74 <__errno_location@plt>
   222f4:	mov	r5, r0
   222f8:	ldr	r6, [r0]
   222fc:	mov	r0, r4
   22300:	bl	11f30 <close@plt>
   22304:	str	r6, [r5]
   22308:	mvn	r4, #0
   2230c:	b	221f4 <__assert_fail@plt+0x102ac>
   22310:	cmp	r1, #1
   22314:	beq	223c4 <__assert_fail@plt+0x1047c>
   22318:	bgt	22330 <__assert_fail@plt+0x103e8>
   2231c:	cmp	r1, #0
   22320:	bne	22388 <__assert_fail@plt+0x10440>
   22324:	b	22330 <__assert_fail@plt+0x103e8>
   22328:	cmp	r1, #4
   2232c:	bne	22388 <__assert_fail@plt+0x10440>
   22330:	ldr	r3, [sp, #4]
   22334:	add	r2, r3, #4
   22338:	str	r2, [sp, #4]
   2233c:	ldr	r2, [r3]
   22340:	mov	r0, r5
   22344:	bl	11e10 <fcntl64@plt>
   22348:	mov	r4, r0
   2234c:	b	221f4 <__assert_fail@plt+0x102ac>
   22350:	movw	r3, #1031	; 0x407
   22354:	cmp	r1, r3
   22358:	bgt	223a8 <__assert_fail@plt+0x10460>
   2235c:	movw	r3, #1030	; 0x406
   22360:	cmp	r1, r3
   22364:	bge	22330 <__assert_fail@plt+0x103e8>
   22368:	movw	r3, #1025	; 0x401
   2236c:	cmp	r1, r3
   22370:	beq	223c4 <__assert_fail@plt+0x1047c>
   22374:	movw	r3, #1026	; 0x402
   22378:	cmp	r1, r3
   2237c:	beq	22330 <__assert_fail@plt+0x103e8>
   22380:	cmp	r1, #1024	; 0x400
   22384:	beq	22330 <__assert_fail@plt+0x103e8>
   22388:	ldr	r3, [sp, #4]
   2238c:	add	r2, r3, #4
   22390:	str	r2, [sp, #4]
   22394:	ldr	r2, [r3]
   22398:	mov	r0, r5
   2239c:	bl	11e10 <fcntl64@plt>
   223a0:	mov	r4, r0
   223a4:	b	221f4 <__assert_fail@plt+0x102ac>
   223a8:	movw	r3, #1033	; 0x409
   223ac:	cmp	r1, r3
   223b0:	beq	22330 <__assert_fail@plt+0x103e8>
   223b4:	blt	223c4 <__assert_fail@plt+0x1047c>
   223b8:	movw	r3, #1034	; 0x40a
   223bc:	cmp	r1, r3
   223c0:	bne	22388 <__assert_fail@plt+0x10440>
   223c4:	mov	r0, r5
   223c8:	bl	11e10 <fcntl64@plt>
   223cc:	mov	r4, r0
   223d0:	b	221f4 <__assert_fail@plt+0x102ac>
   223d4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   223d8:	strd	r6, [sp, #8]
   223dc:	str	r8, [sp, #16]
   223e0:	str	lr, [sp, #20]
   223e4:	mov	r4, r0
   223e8:	cmp	r0, #2
   223ec:	bls	22408 <__assert_fail@plt+0x104c0>
   223f0:	mov	r0, r4
   223f4:	ldrd	r4, [sp]
   223f8:	ldrd	r6, [sp, #8]
   223fc:	ldr	r8, [sp, #16]
   22400:	add	sp, sp, #20
   22404:	pop	{pc}		; (ldr pc, [sp], #4)
   22408:	bl	22430 <__assert_fail@plt+0x104e8>
   2240c:	mov	r6, r0
   22410:	bl	11d74 <__errno_location@plt>
   22414:	mov	r5, r0
   22418:	ldr	r7, [r0]
   2241c:	mov	r0, r4
   22420:	bl	11f30 <close@plt>
   22424:	str	r7, [r5]
   22428:	mov	r4, r6
   2242c:	b	223f0 <__assert_fail@plt+0x104a8>
   22430:	str	r4, [sp, #-8]!
   22434:	str	lr, [sp, #4]
   22438:	and	r1, r1, #524288	; 0x80000
   2243c:	cmp	r1, #0
   22440:	mov	r2, #3
   22444:	movw	r3, #1030	; 0x406
   22448:	movne	r1, r3
   2244c:	bl	22168 <__assert_fail@plt+0x10220>
   22450:	ldr	r4, [sp]
   22454:	add	sp, sp, #4
   22458:	pop	{pc}		; (ldr pc, [sp], #4)
   2245c:	strd	r4, [sp, #-16]!
   22460:	str	r6, [sp, #8]
   22464:	str	lr, [sp, #12]
   22468:	mov	r5, r1
   2246c:	bl	11e94 <fopen64@plt>
   22470:	subs	r4, r0, #0
   22474:	beq	22488 <__assert_fail@plt+0x10540>
   22478:	mov	r0, r4
   2247c:	bl	11dc8 <fileno@plt>
   22480:	cmp	r0, #2
   22484:	bls	2249c <__assert_fail@plt+0x10554>
   22488:	mov	r0, r4
   2248c:	ldrd	r4, [sp]
   22490:	ldr	r6, [sp, #8]
   22494:	add	sp, sp, #12
   22498:	pop	{pc}		; (ldr pc, [sp], #4)
   2249c:	bl	22ba4 <_obstack_memory_used@@Base+0x70>
   224a0:	subs	r6, r0, #0
   224a4:	blt	224ec <__assert_fail@plt+0x105a4>
   224a8:	mov	r0, r4
   224ac:	bl	1b14c <__assert_fail@plt+0x9204>
   224b0:	cmp	r0, #0
   224b4:	bne	224cc <__assert_fail@plt+0x10584>
   224b8:	mov	r1, r5
   224bc:	mov	r0, r6
   224c0:	bl	119fc <fdopen@plt>
   224c4:	subs	r4, r0, #0
   224c8:	bne	22488 <__assert_fail@plt+0x10540>
   224cc:	bl	11d74 <__errno_location@plt>
   224d0:	mov	r4, r0
   224d4:	ldr	r5, [r0]
   224d8:	mov	r0, r6
   224dc:	bl	11f30 <close@plt>
   224e0:	str	r5, [r4]
   224e4:	mov	r4, #0
   224e8:	b	22488 <__assert_fail@plt+0x10540>
   224ec:	bl	11d74 <__errno_location@plt>
   224f0:	mov	r5, r0
   224f4:	ldr	r6, [r0]
   224f8:	mov	r0, r4
   224fc:	bl	1b14c <__assert_fail@plt+0x9204>
   22500:	str	r6, [r5]
   22504:	mov	r4, #0
   22508:	b	22488 <__assert_fail@plt+0x10540>
   2250c:	str	r4, [sp, #-8]!
   22510:	str	lr, [sp, #4]
   22514:	mov	r0, #14
   22518:	bl	11e70 <nl_langinfo@plt>
   2251c:	cmp	r0, #0
   22520:	beq	22544 <__assert_fail@plt+0x105fc>
   22524:	ldrb	r2, [r0]
   22528:	movw	r3, #22832	; 0x5930
   2252c:	movt	r3, #2
   22530:	cmp	r2, #0
   22534:	moveq	r0, r3
   22538:	ldr	r4, [sp]
   2253c:	add	sp, sp, #4
   22540:	pop	{pc}		; (ldr pc, [sp], #4)
   22544:	movw	r0, #22832	; 0x5930
   22548:	movt	r0, #2
   2254c:	b	22538 <__assert_fail@plt+0x105f0>
   22550:	strd	r4, [sp, #-20]!	; 0xffffffec
   22554:	strd	r6, [sp, #8]
   22558:	str	lr, [sp, #16]
   2255c:	sub	sp, sp, #12
   22560:	mov	r7, r1
   22564:	mov	r5, r2
   22568:	subs	r6, r0, #0
   2256c:	addeq	r6, sp, #4
   22570:	mov	r0, r6
   22574:	bl	11c84 <mbrtowc@plt>
   22578:	mov	r4, r0
   2257c:	cmp	r5, #0
   22580:	cmnne	r0, #3
   22584:	bhi	225a0 <__assert_fail@plt+0x10658>
   22588:	mov	r0, r4
   2258c:	add	sp, sp, #12
   22590:	ldrd	r4, [sp]
   22594:	ldrd	r6, [sp, #8]
   22598:	add	sp, sp, #16
   2259c:	pop	{pc}		; (ldr pc, [sp], #4)
   225a0:	mov	r0, #0
   225a4:	bl	1b898 <__assert_fail@plt+0x9950>
   225a8:	cmp	r0, #0
   225ac:	bne	22588 <__assert_fail@plt+0x10640>
   225b0:	ldrb	r3, [r7]
   225b4:	str	r3, [r6]
   225b8:	mov	r4, #1
   225bc:	b	22588 <__assert_fail@plt+0x10640>
   225c0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   225c4:	strd	r6, [sp, #8]
   225c8:	strd	r8, [sp, #16]
   225cc:	str	sl, [sp, #24]
   225d0:	str	lr, [sp, #28]
   225d4:	mov	r5, r0
   225d8:	mov	r8, r1
   225dc:	mov	r4, r2
   225e0:	mov	r7, r3
   225e4:	bl	11d74 <__errno_location@plt>
   225e8:	mov	sl, r0
   225ec:	mov	r9, #0
   225f0:	str	r9, [sl]
   225f4:	mov	r1, r4
   225f8:	mov	r0, r5
   225fc:	bl	11ca8 <strcoll@plt>
   22600:	cmp	r0, #0
   22604:	bne	22650 <__assert_fail@plt+0x10708>
   22608:	mov	r0, r5
   2260c:	bl	11d50 <strlen@plt>
   22610:	add	r6, r0, #1
   22614:	mov	r0, r4
   22618:	bl	11d50 <strlen@plt>
   2261c:	add	r0, r0, #1
   22620:	add	r5, r5, r6
   22624:	add	r4, r4, r0
   22628:	sub	r7, r7, r0
   2262c:	subs	r8, r8, r6
   22630:	beq	22644 <__assert_fail@plt+0x106fc>
   22634:	cmp	r7, #0
   22638:	bne	225f0 <__assert_fail@plt+0x106a8>
   2263c:	mov	r0, #1
   22640:	b	22650 <__assert_fail@plt+0x10708>
   22644:	adds	r0, r7, #0
   22648:	movne	r0, #1
   2264c:	rsb	r0, r0, #0
   22650:	ldrd	r4, [sp]
   22654:	ldrd	r6, [sp, #8]
   22658:	ldrd	r8, [sp, #16]
   2265c:	ldr	sl, [sp, #24]
   22660:	add	sp, sp, #28
   22664:	pop	{pc}		; (ldr pc, [sp], #4)
   22668:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2266c:	strd	r6, [sp, #8]
   22670:	strd	r8, [sp, #16]
   22674:	str	sl, [sp, #24]
   22678:	str	lr, [sp, #28]
   2267c:	mov	r7, r0
   22680:	mov	r4, r1
   22684:	mov	r6, r2
   22688:	mov	r5, r3
   2268c:	cmp	r1, r3
   22690:	bne	226b8 <__assert_fail@plt+0x10770>
   22694:	mov	r2, r1
   22698:	mov	r1, r6
   2269c:	bl	11b40 <memcmp@plt>
   226a0:	subs	r8, r0, #0
   226a4:	bne	226b8 <__assert_fail@plt+0x10770>
   226a8:	bl	11d74 <__errno_location@plt>
   226ac:	mov	r3, #0
   226b0:	str	r3, [r0]
   226b4:	b	226ec <__assert_fail@plt+0x107a4>
   226b8:	ldrb	sl, [r7, r4]
   226bc:	ldrb	r9, [r6, r5]
   226c0:	mov	r3, #0
   226c4:	strb	r3, [r7, r4]
   226c8:	strb	r3, [r6, r5]
   226cc:	add	r3, r5, #1
   226d0:	mov	r2, r6
   226d4:	add	r1, r4, #1
   226d8:	mov	r0, r7
   226dc:	bl	225c0 <__assert_fail@plt+0x10678>
   226e0:	mov	r8, r0
   226e4:	strb	sl, [r7, r4]
   226e8:	strb	r9, [r6, r5]
   226ec:	mov	r0, r8
   226f0:	ldrd	r4, [sp]
   226f4:	ldrd	r6, [sp, #8]
   226f8:	ldrd	r8, [sp, #16]
   226fc:	ldr	sl, [sp, #24]
   22700:	add	sp, sp, #28
   22704:	pop	{pc}		; (ldr pc, [sp], #4)
   22708:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2270c:	strd	r6, [sp, #8]
   22710:	str	r8, [sp, #16]
   22714:	str	lr, [sp, #20]
   22718:	mov	r7, r0
   2271c:	mov	r4, r1
   22720:	mov	r8, r2
   22724:	mov	r5, r3
   22728:	cmp	r1, r3
   2272c:	bne	22754 <__assert_fail@plt+0x1080c>
   22730:	mov	r2, r1
   22734:	mov	r1, r8
   22738:	bl	11b40 <memcmp@plt>
   2273c:	subs	r6, r0, #0
   22740:	bne	22754 <__assert_fail@plt+0x1080c>
   22744:	bl	11d74 <__errno_location@plt>
   22748:	mov	r3, #0
   2274c:	str	r3, [r0]
   22750:	b	2276c <__assert_fail@plt+0x10824>
   22754:	mov	r3, r5
   22758:	mov	r2, r8
   2275c:	mov	r1, r4
   22760:	mov	r0, r7
   22764:	bl	225c0 <__assert_fail@plt+0x10678>
   22768:	mov	r6, r0
   2276c:	mov	r0, r6
   22770:	ldrd	r4, [sp]
   22774:	ldrd	r6, [sp, #8]
   22778:	ldr	r8, [sp, #16]
   2277c:	add	sp, sp, #20
   22780:	pop	{pc}		; (ldr pc, [sp], #4)
   22784:	str	r4, [sp, #-8]!
   22788:	str	lr, [sp, #4]
   2278c:	ldrb	r3, [r0, #40]	; 0x28
   22790:	tst	r3, #1
   22794:	beq	227b0 <__assert_fail@plt+0x10868>
   22798:	ldr	r3, [r0, #28]
   2279c:	ldr	r0, [r0, #36]	; 0x24
   227a0:	blx	r3
   227a4:	ldr	r4, [sp]
   227a8:	add	sp, sp, #4
   227ac:	pop	{pc}		; (ldr pc, [sp], #4)
   227b0:	ldr	r3, [r0, #28]
   227b4:	mov	r0, r1
   227b8:	blx	r3
   227bc:	b	227a4 <__assert_fail@plt+0x1085c>
   227c0:	str	r4, [sp, #-8]!
   227c4:	str	lr, [sp, #4]
   227c8:	ldrb	r3, [r0, #40]	; 0x28
   227cc:	tst	r3, #1
   227d0:	beq	227ec <__assert_fail@plt+0x108a4>
   227d4:	ldr	r3, [r0, #32]
   227d8:	ldr	r0, [r0, #36]	; 0x24
   227dc:	blx	r3
   227e0:	ldr	r4, [sp]
   227e4:	add	sp, sp, #4
   227e8:	pop	{pc}		; (ldr pc, [sp], #4)
   227ec:	ldr	r3, [r0, #32]
   227f0:	mov	r0, r1
   227f4:	blx	r3
   227f8:	b	227e0 <__assert_fail@plt+0x10898>
   227fc:	strd	r4, [sp, #-16]!
   22800:	str	r6, [sp, #8]
   22804:	str	lr, [sp, #12]
   22808:	mov	r4, r0
   2280c:	subs	r5, r2, #0
   22810:	moveq	r5, #8
   22814:	movw	r3, #4072	; 0xfe8
   22818:	cmp	r1, #0
   2281c:	moveq	r1, r3
   22820:	str	r1, [r0]
   22824:	sub	r6, r5, #1
   22828:	str	r6, [r0, #24]
   2282c:	bl	22784 <__assert_fail@plt+0x1083c>
   22830:	str	r0, [r4, #4]
   22834:	cmp	r0, #0
   22838:	beq	22890 <__assert_fail@plt+0x10948>
   2283c:	add	r3, r0, #8
   22840:	add	r3, r3, r6
   22844:	rsb	r5, r5, #0
   22848:	and	r5, r5, r3
   2284c:	str	r5, [r4, #8]
   22850:	str	r5, [r4, #12]
   22854:	ldr	r3, [r4]
   22858:	add	r3, r0, r3
   2285c:	str	r3, [r0]
   22860:	str	r3, [r4, #16]
   22864:	mov	r2, #0
   22868:	str	r2, [r0, #4]
   2286c:	ldrb	r3, [r4, #40]	; 0x28
   22870:	and	r3, r3, #253	; 0xfd
   22874:	bfi	r3, r2, #2, #1
   22878:	strb	r3, [r4, #40]	; 0x28
   2287c:	mov	r0, #1
   22880:	ldrd	r4, [sp]
   22884:	ldr	r6, [sp, #8]
   22888:	add	sp, sp, #12
   2288c:	pop	{pc}		; (ldr pc, [sp], #4)
   22890:	movw	r3, #25268	; 0x62b4
   22894:	movt	r3, #3
   22898:	ldr	r3, [r3]
   2289c:	blx	r3
   228a0:	str	r4, [sp, #-8]!
   228a4:	str	lr, [sp, #4]
   228a8:	movw	r3, #25288	; 0x62c8
   228ac:	movt	r3, #3
   228b0:	ldr	r4, [r3]
   228b4:	mov	r2, #5
   228b8:	movw	r1, #22528	; 0x5800
   228bc:	movt	r1, #2
   228c0:	mov	r0, #0
   228c4:	bl	11b58 <dcgettext@plt>
   228c8:	mov	r3, r0
   228cc:	movw	r2, #21740	; 0x54ec
   228d0:	movt	r2, #2
   228d4:	mov	r1, #1
   228d8:	mov	r0, r4
   228dc:	bl	11dd4 <__fprintf_chk@plt>
   228e0:	movw	r3, #25200	; 0x6270
   228e4:	movt	r3, #3
   228e8:	ldr	r0, [r3]
   228ec:	bl	11d38 <exit@plt>

000228f0 <_obstack_begin@@Base>:
   228f0:	str	r4, [sp, #-8]!
   228f4:	str	lr, [sp, #4]
   228f8:	str	r3, [r0, #28]
   228fc:	ldr	r3, [sp, #8]
   22900:	str	r3, [r0, #32]
   22904:	ldrb	r3, [r0, #40]	; 0x28
   22908:	bfc	r3, #0, #1
   2290c:	strb	r3, [r0, #40]	; 0x28
   22910:	bl	227fc <__assert_fail@plt+0x108b4>
   22914:	ldr	r4, [sp]
   22918:	add	sp, sp, #4
   2291c:	pop	{pc}		; (ldr pc, [sp], #4)

00022920 <_obstack_begin_1@@Base>:
   22920:	str	r4, [sp, #-8]!
   22924:	str	lr, [sp, #4]
   22928:	str	r3, [r0, #28]
   2292c:	ldr	r3, [sp, #8]
   22930:	str	r3, [r0, #32]
   22934:	ldr	r3, [sp, #12]
   22938:	str	r3, [r0, #36]	; 0x24
   2293c:	ldrb	r3, [r0, #40]	; 0x28
   22940:	orr	r3, r3, #1
   22944:	strb	r3, [r0, #40]	; 0x28
   22948:	bl	227fc <__assert_fail@plt+0x108b4>
   2294c:	ldr	r4, [sp]
   22950:	add	sp, sp, #4
   22954:	pop	{pc}		; (ldr pc, [sp], #4)

00022958 <_obstack_newchunk@@Base>:
   22958:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2295c:	strd	r6, [sp, #8]
   22960:	str	r8, [sp, #16]
   22964:	str	lr, [sp, #20]
   22968:	ldr	r7, [r0, #4]
   2296c:	ldr	r6, [r0, #12]
   22970:	ldr	r3, [r0, #8]
   22974:	sub	r6, r6, r3
   22978:	add	r1, r6, r1
   2297c:	ldr	r2, [r0, #24]
   22980:	add	r2, r1, r2
   22984:	add	r5, r2, r6, lsr #3
   22988:	add	r5, r5, #100	; 0x64
   2298c:	ldr	r3, [r0]
   22990:	cmp	r2, r3
   22994:	movcs	r3, r2
   22998:	cmp	r3, r5
   2299c:	movcs	r5, r3
   229a0:	cmp	r6, r1
   229a4:	cmpls	r1, r2
   229a8:	bhi	22a48 <_obstack_newchunk@@Base+0xf0>
   229ac:	mov	r4, r0
   229b0:	mov	r1, r5
   229b4:	bl	22784 <__assert_fail@plt+0x1083c>
   229b8:	subs	r8, r0, #0
   229bc:	beq	22a48 <_obstack_newchunk@@Base+0xf0>
   229c0:	str	r8, [r4, #4]
   229c4:	str	r7, [r8, #4]
   229c8:	add	r3, r8, r5
   229cc:	str	r3, [r4, #16]
   229d0:	mov	r5, r8
   229d4:	str	r3, [r5], #8
   229d8:	ldr	r3, [r4, #24]
   229dc:	add	r5, r5, r3
   229e0:	bic	r5, r5, r3
   229e4:	mov	r2, r6
   229e8:	ldr	r1, [r4, #8]
   229ec:	mov	r0, r5
   229f0:	bl	11ac8 <memcpy@plt>
   229f4:	ldrb	r3, [r4, #40]	; 0x28
   229f8:	tst	r3, #2
   229fc:	bne	22a1c <_obstack_newchunk@@Base+0xc4>
   22a00:	ldr	r2, [r4, #24]
   22a04:	add	r3, r7, #8
   22a08:	add	r3, r3, r2
   22a0c:	bic	r3, r3, r2
   22a10:	ldr	r2, [r4, #8]
   22a14:	cmp	r2, r3
   22a18:	beq	22a58 <_obstack_newchunk@@Base+0x100>
   22a1c:	str	r5, [r4, #8]
   22a20:	add	r5, r5, r6
   22a24:	str	r5, [r4, #12]
   22a28:	ldrb	r3, [r4, #40]	; 0x28
   22a2c:	bfc	r3, #1, #1
   22a30:	strb	r3, [r4, #40]	; 0x28
   22a34:	ldrd	r4, [sp]
   22a38:	ldrd	r6, [sp, #8]
   22a3c:	ldr	r8, [sp, #16]
   22a40:	add	sp, sp, #20
   22a44:	pop	{pc}		; (ldr pc, [sp], #4)
   22a48:	movw	r3, #25268	; 0x62b4
   22a4c:	movt	r3, #3
   22a50:	ldr	r3, [r3]
   22a54:	blx	r3
   22a58:	ldr	r3, [r7, #4]
   22a5c:	str	r3, [r8, #4]
   22a60:	mov	r1, r7
   22a64:	mov	r0, r4
   22a68:	bl	227c0 <__assert_fail@plt+0x10878>
   22a6c:	b	22a1c <_obstack_newchunk@@Base+0xc4>

00022a70 <_obstack_allocated_p@@Base>:
   22a70:	ldr	r0, [r0, #4]
   22a74:	cmp	r0, #0
   22a78:	bne	22a8c <_obstack_allocated_p@@Base+0x1c>
   22a7c:	b	22aa0 <_obstack_allocated_p@@Base+0x30>
   22a80:	ldr	r0, [r0, #4]
   22a84:	cmp	r0, #0
   22a88:	beq	22aa0 <_obstack_allocated_p@@Base+0x30>
   22a8c:	cmp	r1, r0
   22a90:	bls	22a80 <_obstack_allocated_p@@Base+0x10>
   22a94:	ldr	r3, [r0]
   22a98:	cmp	r3, r1
   22a9c:	bcc	22a80 <_obstack_allocated_p@@Base+0x10>
   22aa0:	adds	r0, r0, #0
   22aa4:	movne	r0, #1
   22aa8:	bx	lr

00022aac <_obstack_free@@Base>:
   22aac:	strd	r4, [sp, #-16]!
   22ab0:	str	r6, [sp, #8]
   22ab4:	str	lr, [sp, #12]
   22ab8:	mov	r4, r0
   22abc:	mov	r6, r1
   22ac0:	ldr	r1, [r0, #4]
   22ac4:	cmp	r1, #0
   22ac8:	bne	22afc <_obstack_free@@Base+0x50>
   22acc:	cmp	r6, #0
   22ad0:	beq	22b24 <_obstack_free@@Base+0x78>
   22ad4:	bl	11f24 <abort@plt>
   22ad8:	ldr	r5, [r1, #4]
   22adc:	mov	r0, r4
   22ae0:	bl	227c0 <__assert_fail@plt+0x10878>
   22ae4:	ldrb	r3, [r4, #40]	; 0x28
   22ae8:	orr	r3, r3, #2
   22aec:	strb	r3, [r4, #40]	; 0x28
   22af0:	mov	r1, r5
   22af4:	cmp	r5, #0
   22af8:	beq	22acc <_obstack_free@@Base+0x20>
   22afc:	cmp	r6, r1
   22b00:	bls	22ad8 <_obstack_free@@Base+0x2c>
   22b04:	ldr	r3, [r1]
   22b08:	cmp	r3, r6
   22b0c:	bcc	22ad8 <_obstack_free@@Base+0x2c>
   22b10:	str	r6, [r4, #12]
   22b14:	str	r6, [r4, #8]
   22b18:	ldr	r3, [r1]
   22b1c:	str	r3, [r4, #16]
   22b20:	str	r1, [r4, #4]
   22b24:	ldrd	r4, [sp]
   22b28:	ldr	r6, [sp, #8]
   22b2c:	add	sp, sp, #12
   22b30:	pop	{pc}		; (ldr pc, [sp], #4)

00022b34 <_obstack_memory_used@@Base>:
   22b34:	ldr	r3, [r0, #4]
   22b38:	cmp	r3, #0
   22b3c:	beq	22b60 <_obstack_memory_used@@Base+0x2c>
   22b40:	mov	r0, #0
   22b44:	ldr	r2, [r3]
   22b48:	sub	r2, r2, r3
   22b4c:	add	r0, r0, r2
   22b50:	ldr	r3, [r3, #4]
   22b54:	cmp	r3, #0
   22b58:	bne	22b44 <_obstack_memory_used@@Base+0x10>
   22b5c:	bx	lr
   22b60:	mov	r0, #0
   22b64:	bx	lr
   22b68:	str	r4, [sp, #-8]!
   22b6c:	str	lr, [sp, #4]
   22b70:	umull	r2, r3, r1, r2
   22b74:	cmp	r3, #0
   22b78:	bne	22b90 <_obstack_memory_used@@Base+0x5c>
   22b7c:	mov	r1, r2
   22b80:	bl	21f94 <__assert_fail@plt+0x1004c>
   22b84:	ldr	r4, [sp]
   22b88:	add	sp, sp, #4
   22b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   22b90:	bl	11d74 <__errno_location@plt>
   22b94:	mov	r3, #12
   22b98:	str	r3, [r0]
   22b9c:	mov	r0, #0
   22ba0:	b	22b84 <_obstack_memory_used@@Base+0x50>
   22ba4:	str	r4, [sp, #-8]!
   22ba8:	str	lr, [sp, #4]
   22bac:	mov	r2, #3
   22bb0:	mov	r1, #0
   22bb4:	bl	22168 <__assert_fail@plt+0x10220>
   22bb8:	ldr	r4, [sp]
   22bbc:	add	sp, sp, #4
   22bc0:	pop	{pc}		; (ldr pc, [sp], #4)
   22bc4:	eor	r1, r1, #-2147483648	; 0x80000000
   22bc8:	b	22bd0 <_obstack_memory_used@@Base+0x9c>
   22bcc:	eor	r3, r3, #-2147483648	; 0x80000000
   22bd0:	push	{r4, r5, lr}
   22bd4:	lsl	r4, r1, #1
   22bd8:	lsl	r5, r3, #1
   22bdc:	teq	r4, r5
   22be0:	teqeq	r0, r2
   22be4:	orrsne	ip, r4, r0
   22be8:	orrsne	ip, r5, r2
   22bec:	mvnsne	ip, r4, asr #21
   22bf0:	mvnsne	ip, r5, asr #21
   22bf4:	beq	22de0 <_obstack_memory_used@@Base+0x2ac>
   22bf8:	lsr	r4, r4, #21
   22bfc:	rsbs	r5, r4, r5, lsr #21
   22c00:	rsblt	r5, r5, #0
   22c04:	ble	22c24 <_obstack_memory_used@@Base+0xf0>
   22c08:	add	r4, r4, r5
   22c0c:	eor	r2, r0, r2
   22c10:	eor	r3, r1, r3
   22c14:	eor	r0, r2, r0
   22c18:	eor	r1, r3, r1
   22c1c:	eor	r2, r0, r2
   22c20:	eor	r3, r1, r3
   22c24:	cmp	r5, #54	; 0x36
   22c28:	pophi	{r4, r5, pc}
   22c2c:	tst	r1, #-2147483648	; 0x80000000
   22c30:	lsl	r1, r1, #12
   22c34:	mov	ip, #1048576	; 0x100000
   22c38:	orr	r1, ip, r1, lsr #12
   22c3c:	beq	22c48 <_obstack_memory_used@@Base+0x114>
   22c40:	rsbs	r0, r0, #0
   22c44:	rsc	r1, r1, #0
   22c48:	tst	r3, #-2147483648	; 0x80000000
   22c4c:	lsl	r3, r3, #12
   22c50:	orr	r3, ip, r3, lsr #12
   22c54:	beq	22c60 <_obstack_memory_used@@Base+0x12c>
   22c58:	rsbs	r2, r2, #0
   22c5c:	rsc	r3, r3, #0
   22c60:	teq	r4, r5
   22c64:	beq	22dc8 <_obstack_memory_used@@Base+0x294>
   22c68:	sub	r4, r4, #1
   22c6c:	rsbs	lr, r5, #32
   22c70:	blt	22c8c <_obstack_memory_used@@Base+0x158>
   22c74:	lsl	ip, r2, lr
   22c78:	adds	r0, r0, r2, lsr r5
   22c7c:	adc	r1, r1, #0
   22c80:	adds	r0, r0, r3, lsl lr
   22c84:	adcs	r1, r1, r3, asr r5
   22c88:	b	22ca8 <_obstack_memory_used@@Base+0x174>
   22c8c:	sub	r5, r5, #32
   22c90:	add	lr, lr, #32
   22c94:	cmp	r2, #1
   22c98:	lsl	ip, r3, lr
   22c9c:	orrcs	ip, ip, #2
   22ca0:	adds	r0, r0, r3, asr r5
   22ca4:	adcs	r1, r1, r3, asr #31
   22ca8:	and	r5, r1, #-2147483648	; 0x80000000
   22cac:	bpl	22cbc <_obstack_memory_used@@Base+0x188>
   22cb0:	rsbs	ip, ip, #0
   22cb4:	rscs	r0, r0, #0
   22cb8:	rsc	r1, r1, #0
   22cbc:	cmp	r1, #1048576	; 0x100000
   22cc0:	bcc	22d00 <_obstack_memory_used@@Base+0x1cc>
   22cc4:	cmp	r1, #2097152	; 0x200000
   22cc8:	bcc	22ce8 <_obstack_memory_used@@Base+0x1b4>
   22ccc:	lsrs	r1, r1, #1
   22cd0:	rrxs	r0, r0
   22cd4:	rrx	ip, ip
   22cd8:	add	r4, r4, #1
   22cdc:	lsl	r2, r4, #21
   22ce0:	cmn	r2, #4194304	; 0x400000
   22ce4:	bcs	22e40 <_obstack_memory_used@@Base+0x30c>
   22ce8:	cmp	ip, #-2147483648	; 0x80000000
   22cec:	lsrseq	ip, r0, #1
   22cf0:	adcs	r0, r0, #0
   22cf4:	adc	r1, r1, r4, lsl #20
   22cf8:	orr	r1, r1, r5
   22cfc:	pop	{r4, r5, pc}
   22d00:	lsls	ip, ip, #1
   22d04:	adcs	r0, r0, r0
   22d08:	adc	r1, r1, r1
   22d0c:	tst	r1, #1048576	; 0x100000
   22d10:	sub	r4, r4, #1
   22d14:	bne	22ce8 <_obstack_memory_used@@Base+0x1b4>
   22d18:	teq	r1, #0
   22d1c:	moveq	r1, r0
   22d20:	moveq	r0, #0
   22d24:	clz	r3, r1
   22d28:	addeq	r3, r3, #32
   22d2c:	sub	r3, r3, #11
   22d30:	subs	r2, r3, #32
   22d34:	bge	22d58 <_obstack_memory_used@@Base+0x224>
   22d38:	adds	r2, r2, #12
   22d3c:	ble	22d54 <_obstack_memory_used@@Base+0x220>
   22d40:	add	ip, r2, #20
   22d44:	rsb	r2, r2, #12
   22d48:	lsl	r0, r1, ip
   22d4c:	lsr	r1, r1, r2
   22d50:	b	22d68 <_obstack_memory_used@@Base+0x234>
   22d54:	add	r2, r2, #20
   22d58:	rsble	ip, r2, #32
   22d5c:	lsl	r1, r1, r2
   22d60:	orrle	r1, r1, r0, lsr ip
   22d64:	lslle	r0, r0, r2
   22d68:	subs	r4, r4, r3
   22d6c:	addge	r1, r1, r4, lsl #20
   22d70:	orrge	r1, r1, r5
   22d74:	popge	{r4, r5, pc}
   22d78:	mvn	r4, r4
   22d7c:	subs	r4, r4, #31
   22d80:	bge	22dbc <_obstack_memory_used@@Base+0x288>
   22d84:	adds	r4, r4, #12
   22d88:	bgt	22da4 <_obstack_memory_used@@Base+0x270>
   22d8c:	add	r4, r4, #20
   22d90:	rsb	r2, r4, #32
   22d94:	lsr	r0, r0, r4
   22d98:	orr	r0, r0, r1, lsl r2
   22d9c:	orr	r1, r5, r1, lsr r4
   22da0:	pop	{r4, r5, pc}
   22da4:	rsb	r4, r4, #12
   22da8:	rsb	r2, r4, #32
   22dac:	lsr	r0, r0, r2
   22db0:	orr	r0, r0, r1, lsl r4
   22db4:	mov	r1, r5
   22db8:	pop	{r4, r5, pc}
   22dbc:	lsr	r0, r1, r4
   22dc0:	mov	r1, r5
   22dc4:	pop	{r4, r5, pc}
   22dc8:	teq	r4, #0
   22dcc:	eor	r3, r3, #1048576	; 0x100000
   22dd0:	eoreq	r1, r1, #1048576	; 0x100000
   22dd4:	addeq	r4, r4, #1
   22dd8:	subne	r5, r5, #1
   22ddc:	b	22c68 <_obstack_memory_used@@Base+0x134>
   22de0:	mvns	ip, r4, asr #21
   22de4:	mvnsne	ip, r5, asr #21
   22de8:	beq	22e50 <_obstack_memory_used@@Base+0x31c>
   22dec:	teq	r4, r5
   22df0:	teqeq	r0, r2
   22df4:	beq	22e08 <_obstack_memory_used@@Base+0x2d4>
   22df8:	orrs	ip, r4, r0
   22dfc:	moveq	r1, r3
   22e00:	moveq	r0, r2
   22e04:	pop	{r4, r5, pc}
   22e08:	teq	r1, r3
   22e0c:	movne	r1, #0
   22e10:	movne	r0, #0
   22e14:	popne	{r4, r5, pc}
   22e18:	lsrs	ip, r4, #21
   22e1c:	bne	22e30 <_obstack_memory_used@@Base+0x2fc>
   22e20:	lsls	r0, r0, #1
   22e24:	adcs	r1, r1, r1
   22e28:	orrcs	r1, r1, #-2147483648	; 0x80000000
   22e2c:	pop	{r4, r5, pc}
   22e30:	adds	r4, r4, #4194304	; 0x400000
   22e34:	addcc	r1, r1, #1048576	; 0x100000
   22e38:	popcc	{r4, r5, pc}
   22e3c:	and	r5, r1, #-2147483648	; 0x80000000
   22e40:	orr	r1, r5, #2130706432	; 0x7f000000
   22e44:	orr	r1, r1, #15728640	; 0xf00000
   22e48:	mov	r0, #0
   22e4c:	pop	{r4, r5, pc}
   22e50:	mvns	ip, r4, asr #21
   22e54:	movne	r1, r3
   22e58:	movne	r0, r2
   22e5c:	mvnseq	ip, r5, asr #21
   22e60:	movne	r3, r1
   22e64:	movne	r2, r0
   22e68:	orrs	r4, r0, r1, lsl #12
   22e6c:	orrseq	r5, r2, r3, lsl #12
   22e70:	teqeq	r1, r3
   22e74:	orrne	r1, r1, #524288	; 0x80000
   22e78:	pop	{r4, r5, pc}
   22e7c:	teq	r0, #0
   22e80:	moveq	r1, #0
   22e84:	bxeq	lr
   22e88:	push	{r4, r5, lr}
   22e8c:	mov	r4, #1024	; 0x400
   22e90:	add	r4, r4, #50	; 0x32
   22e94:	mov	r5, #0
   22e98:	mov	r1, #0
   22e9c:	b	22d18 <_obstack_memory_used@@Base+0x1e4>
   22ea0:	teq	r0, #0
   22ea4:	moveq	r1, #0
   22ea8:	bxeq	lr
   22eac:	push	{r4, r5, lr}
   22eb0:	mov	r4, #1024	; 0x400
   22eb4:	add	r4, r4, #50	; 0x32
   22eb8:	ands	r5, r0, #-2147483648	; 0x80000000
   22ebc:	rsbmi	r0, r0, #0
   22ec0:	mov	r1, #0
   22ec4:	b	22d18 <_obstack_memory_used@@Base+0x1e4>
   22ec8:	lsls	r2, r0, #1
   22ecc:	asr	r1, r2, #3
   22ed0:	rrx	r1, r1
   22ed4:	lsl	r0, r2, #28
   22ed8:	andsne	r3, r2, #-16777216	; 0xff000000
   22edc:	teqne	r3, #-16777216	; 0xff000000
   22ee0:	eorne	r1, r1, #939524096	; 0x38000000
   22ee4:	bxne	lr
   22ee8:	bics	r2, r2, #-16777216	; 0xff000000
   22eec:	bxeq	lr
   22ef0:	teq	r3, #-16777216	; 0xff000000
   22ef4:	orreq	r1, r1, #524288	; 0x80000
   22ef8:	bxeq	lr
   22efc:	push	{r4, r5, lr}
   22f00:	mov	r4, #896	; 0x380
   22f04:	and	r5, r1, #-2147483648	; 0x80000000
   22f08:	bic	r1, r1, #-2147483648	; 0x80000000
   22f0c:	b	22d18 <_obstack_memory_used@@Base+0x1e4>
   22f10:	orrs	r2, r0, r1
   22f14:	bxeq	lr
   22f18:	push	{r4, r5, lr}
   22f1c:	mov	r5, #0
   22f20:	b	22f40 <_obstack_memory_used@@Base+0x40c>
   22f24:	orrs	r2, r0, r1
   22f28:	bxeq	lr
   22f2c:	push	{r4, r5, lr}
   22f30:	ands	r5, r1, #-2147483648	; 0x80000000
   22f34:	bpl	22f40 <_obstack_memory_used@@Base+0x40c>
   22f38:	rsbs	r0, r0, #0
   22f3c:	rsc	r1, r1, #0
   22f40:	mov	r4, #1024	; 0x400
   22f44:	add	r4, r4, #50	; 0x32
   22f48:	lsrs	ip, r1, #22
   22f4c:	beq	22cbc <_obstack_memory_used@@Base+0x188>
   22f50:	mov	r2, #3
   22f54:	lsrs	ip, ip, #3
   22f58:	addne	r2, r2, #3
   22f5c:	lsrs	ip, ip, #3
   22f60:	addne	r2, r2, #3
   22f64:	add	r2, r2, ip, lsr #3
   22f68:	rsb	r3, r2, #32
   22f6c:	lsl	ip, r0, r3
   22f70:	lsr	r0, r0, r2
   22f74:	orr	r0, r0, r1, lsl r3
   22f78:	lsr	r1, r1, r2
   22f7c:	add	r4, r4, r2
   22f80:	b	22cbc <_obstack_memory_used@@Base+0x188>
   22f84:	cmp	r3, #0
   22f88:	cmpeq	r2, #0
   22f8c:	bne	22fa4 <_obstack_memory_used@@Base+0x470>
   22f90:	cmp	r1, #0
   22f94:	cmpeq	r0, #0
   22f98:	mvnne	r1, #0
   22f9c:	mvnne	r0, #0
   22fa0:	b	22fc0 <_obstack_memory_used@@Base+0x48c>
   22fa4:	sub	sp, sp, #8
   22fa8:	push	{sp, lr}
   22fac:	bl	23010 <_obstack_memory_used@@Base+0x4dc>
   22fb0:	ldr	lr, [sp, #4]
   22fb4:	add	sp, sp, #8
   22fb8:	pop	{r2, r3}
   22fbc:	bx	lr
   22fc0:	push	{r1, lr}
   22fc4:	mov	r0, #8
   22fc8:	bl	11a20 <raise@plt>
   22fcc:	pop	{r1, pc}
   22fd0:	vmov	d6, r0, r1
   22fd4:	vldr	d7, [pc, #36]	; 23000 <_obstack_memory_used@@Base+0x4cc>
   22fd8:	vldr	d5, [pc, #40]	; 23008 <_obstack_memory_used@@Base+0x4d4>
   22fdc:	vmul.f64	d7, d6, d7
   22fe0:	vcvt.u32.f64	s14, d7
   22fe4:	vcvt.f64.u32	d4, s14
   22fe8:	vmov	r1, s14
   22fec:	vmls.f64	d6, d4, d5
   22ff0:	vcvt.u32.f64	s15, d6
   22ff4:	vmov	r0, s15
   22ff8:	bx	lr
   22ffc:	nop			; (mov r0, r0)
   23000:	andeq	r0, r0, r0
   23004:	ldclcc	0, cr0, [r0]
   23008:	andeq	r0, r0, r0
   2300c:	mvnsmi	r0, r0
   23010:	cmp	r1, r3
   23014:	cmpeq	r0, r2
   23018:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2301c:	mov	r4, r0
   23020:	movcc	r0, #0
   23024:	mov	r5, r1
   23028:	ldr	lr, [sp, #36]	; 0x24
   2302c:	movcc	r1, r0
   23030:	bcc	2312c <_obstack_memory_used@@Base+0x5f8>
   23034:	cmp	r3, #0
   23038:	clzeq	ip, r2
   2303c:	clzne	ip, r3
   23040:	addeq	ip, ip, #32
   23044:	cmp	r5, #0
   23048:	clzeq	r1, r4
   2304c:	addeq	r1, r1, #32
   23050:	clzne	r1, r5
   23054:	sub	ip, ip, r1
   23058:	sub	sl, ip, #32
   2305c:	lsl	r9, r3, ip
   23060:	rsb	fp, ip, #32
   23064:	orr	r9, r9, r2, lsl sl
   23068:	orr	r9, r9, r2, lsr fp
   2306c:	lsl	r8, r2, ip
   23070:	cmp	r5, r9
   23074:	cmpeq	r4, r8
   23078:	movcc	r0, #0
   2307c:	movcc	r1, r0
   23080:	bcc	2309c <_obstack_memory_used@@Base+0x568>
   23084:	mov	r0, #1
   23088:	subs	r4, r4, r8
   2308c:	lsl	r1, r0, sl
   23090:	orr	r1, r1, r0, lsr fp
   23094:	lsl	r0, r0, ip
   23098:	sbc	r5, r5, r9
   2309c:	cmp	ip, #0
   230a0:	beq	2312c <_obstack_memory_used@@Base+0x5f8>
   230a4:	lsr	r6, r8, #1
   230a8:	orr	r6, r6, r9, lsl #31
   230ac:	lsr	r7, r9, #1
   230b0:	mov	r2, ip
   230b4:	b	230d8 <_obstack_memory_used@@Base+0x5a4>
   230b8:	subs	r3, r4, r6
   230bc:	sbc	r8, r5, r7
   230c0:	adds	r3, r3, r3
   230c4:	adc	r8, r8, r8
   230c8:	adds	r4, r3, #1
   230cc:	adc	r5, r8, #0
   230d0:	subs	r2, r2, #1
   230d4:	beq	230f4 <_obstack_memory_used@@Base+0x5c0>
   230d8:	cmp	r5, r7
   230dc:	cmpeq	r4, r6
   230e0:	bcs	230b8 <_obstack_memory_used@@Base+0x584>
   230e4:	adds	r4, r4, r4
   230e8:	adc	r5, r5, r5
   230ec:	subs	r2, r2, #1
   230f0:	bne	230d8 <_obstack_memory_used@@Base+0x5a4>
   230f4:	lsr	r3, r4, ip
   230f8:	orr	r3, r3, r5, lsl fp
   230fc:	lsr	r2, r5, ip
   23100:	orr	r3, r3, r5, lsr sl
   23104:	adds	r0, r0, r4
   23108:	mov	r4, r3
   2310c:	lsl	r3, r2, ip
   23110:	orr	r3, r3, r4, lsl sl
   23114:	lsl	ip, r4, ip
   23118:	orr	r3, r3, r4, lsr fp
   2311c:	adc	r1, r1, r5
   23120:	subs	r0, r0, ip
   23124:	mov	r5, r2
   23128:	sbc	r1, r1, r3
   2312c:	cmp	lr, #0
   23130:	strdne	r4, [lr]
   23134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23138:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2313c:	mov	r7, r0
   23140:	ldr	r6, [pc, #72]	; 23190 <_obstack_memory_used@@Base+0x65c>
   23144:	ldr	r5, [pc, #72]	; 23194 <_obstack_memory_used@@Base+0x660>
   23148:	add	r6, pc, r6
   2314c:	add	r5, pc, r5
   23150:	sub	r6, r6, r5
   23154:	mov	r8, r1
   23158:	mov	r9, r2
   2315c:	bl	119d0 <pthread_mutex_unlock@plt-0x20>
   23160:	asrs	r6, r6, #2
   23164:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   23168:	mov	r4, #0
   2316c:	add	r4, r4, #1
   23170:	ldr	r3, [r5], #4
   23174:	mov	r2, r9
   23178:	mov	r1, r8
   2317c:	mov	r0, r7
   23180:	blx	r3
   23184:	cmp	r6, r4
   23188:	bne	2316c <_obstack_memory_used@@Base+0x638>
   2318c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23190:			; <UNDEFINED> instruction: 0x00012dbc
   23194:			; <UNDEFINED> instruction: 0x00012db4
   23198:	bx	lr
   2319c:	ldr	r3, [pc, #12]	; 231b0 <_obstack_memory_used@@Base+0x67c>
   231a0:	mov	r1, #0
   231a4:	add	r3, pc, r3
   231a8:	ldr	r2, [r3]
   231ac:	b	11d80 <__cxa_atexit@plt>
   231b0:	andeq	r3, r1, r4, lsr r0

Disassembly of section .fini:

000231b4 <.fini>:
   231b4:	push	{r3, lr}
   231b8:	pop	{r3, pc}
