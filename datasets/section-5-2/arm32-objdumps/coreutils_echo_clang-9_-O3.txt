
../repos/coreutils/src/echo:     file format elf32-littlearm


Disassembly of section .init:

00010bec <.init>:
   10bec:	push	{r3, lr}
   10bf0:	bl	10e4c <__assert_fail@plt+0x48>
   10bf4:	pop	{r3, pc}

Disassembly of section .plt:

00010bf8 <calloc@plt-0x14>:
   10bf8:	push	{lr}		; (str lr, [sp, #-4]!)
   10bfc:	ldr	lr, [pc, #4]	; 10c08 <calloc@plt-0x4>
   10c00:	add	lr, pc, lr
   10c04:	ldr	pc, [lr, #8]!
   10c08:	strdeq	r5, [r1], -r8

00010c0c <calloc@plt>:
   10c0c:	add	ip, pc, #0, 12
   10c10:	add	ip, ip, #86016	; 0x15000
   10c14:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c18 <fputs_unlocked@plt>:
   10c18:	add	ip, pc, #0, 12
   10c1c:	add	ip, ip, #86016	; 0x15000
   10c20:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c24 <strcmp@plt>:
   10c24:	add	ip, pc, #0, 12
   10c28:	add	ip, ip, #86016	; 0x15000
   10c2c:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c30 <fflush@plt>:
   10c30:	add	ip, pc, #0, 12
   10c34:	add	ip, ip, #86016	; 0x15000
   10c38:	ldr	pc, [ip, #992]!	; 0x3e0

00010c3c <free@plt>:
   10c3c:	add	ip, pc, #0, 12
   10c40:	add	ip, ip, #86016	; 0x15000
   10c44:	ldr	pc, [ip, #984]!	; 0x3d8

00010c48 <_exit@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #86016	; 0x15000
   10c50:	ldr	pc, [ip, #976]!	; 0x3d0

00010c54 <memcpy@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #86016	; 0x15000
   10c5c:	ldr	pc, [ip, #968]!	; 0x3c8

00010c60 <mbsinit@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #86016	; 0x15000
   10c68:	ldr	pc, [ip, #960]!	; 0x3c0

00010c6c <dcgettext@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #86016	; 0x15000
   10c74:	ldr	pc, [ip, #952]!	; 0x3b8

00010c78 <realloc@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #86016	; 0x15000
   10c80:	ldr	pc, [ip, #944]!	; 0x3b0

00010c84 <textdomain@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #86016	; 0x15000
   10c8c:	ldr	pc, [ip, #936]!	; 0x3a8

00010c90 <iswprint@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #86016	; 0x15000
   10c98:	ldr	pc, [ip, #928]!	; 0x3a0

00010c9c <fwrite@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #86016	; 0x15000
   10ca4:	ldr	pc, [ip, #920]!	; 0x398

00010ca8 <lseek64@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #86016	; 0x15000
   10cb0:	ldr	pc, [ip, #912]!	; 0x390

00010cb4 <__ctype_get_mb_cur_max@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #86016	; 0x15000
   10cbc:	ldr	pc, [ip, #904]!	; 0x388

00010cc0 <__fpending@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #86016	; 0x15000
   10cc8:	ldr	pc, [ip, #896]!	; 0x380

00010ccc <mbrtowc@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #86016	; 0x15000
   10cd4:	ldr	pc, [ip, #888]!	; 0x378

00010cd8 <error@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #86016	; 0x15000
   10ce0:	ldr	pc, [ip, #880]!	; 0x370

00010ce4 <getenv@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #86016	; 0x15000
   10cec:	ldr	pc, [ip, #872]!	; 0x368

00010cf0 <malloc@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #86016	; 0x15000
   10cf8:	ldr	pc, [ip, #864]!	; 0x360

00010cfc <__libc_start_main@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #86016	; 0x15000
   10d04:	ldr	pc, [ip, #856]!	; 0x358

00010d08 <__freading@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #86016	; 0x15000
   10d10:	ldr	pc, [ip, #848]!	; 0x350

00010d14 <__gmon_start__@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #86016	; 0x15000
   10d1c:	ldr	pc, [ip, #840]!	; 0x348

00010d20 <__ctype_b_loc@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #86016	; 0x15000
   10d28:	ldr	pc, [ip, #832]!	; 0x340

00010d2c <exit@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #86016	; 0x15000
   10d34:	ldr	pc, [ip, #824]!	; 0x338

00010d38 <bcmp@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #86016	; 0x15000
   10d40:	ldr	pc, [ip, #816]!	; 0x330

00010d44 <strlen@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #86016	; 0x15000
   10d4c:	ldr	pc, [ip, #808]!	; 0x328

00010d50 <__errno_location@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #86016	; 0x15000
   10d58:	ldr	pc, [ip, #800]!	; 0x320

00010d5c <__cxa_atexit@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #86016	; 0x15000
   10d64:	ldr	pc, [ip, #792]!	; 0x318

00010d68 <memset@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #86016	; 0x15000
   10d70:	ldr	pc, [ip, #784]!	; 0x310

00010d74 <__printf_chk@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #86016	; 0x15000
   10d7c:	ldr	pc, [ip, #776]!	; 0x308

00010d80 <fileno@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #86016	; 0x15000
   10d88:	ldr	pc, [ip, #768]!	; 0x300

00010d8c <__fprintf_chk@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #86016	; 0x15000
   10d94:	ldr	pc, [ip, #760]!	; 0x2f8

00010d98 <fclose@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #86016	; 0x15000
   10da0:	ldr	pc, [ip, #752]!	; 0x2f0

00010da4 <fseeko64@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #86016	; 0x15000
   10dac:	ldr	pc, [ip, #744]!	; 0x2e8

00010db0 <__overflow@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #86016	; 0x15000
   10db8:	ldr	pc, [ip, #736]!	; 0x2e0

00010dbc <setlocale@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #86016	; 0x15000
   10dc4:	ldr	pc, [ip, #728]!	; 0x2d8

00010dc8 <strrchr@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #86016	; 0x15000
   10dd0:	ldr	pc, [ip, #720]!	; 0x2d0

00010dd4 <nl_langinfo@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #86016	; 0x15000
   10ddc:	ldr	pc, [ip, #712]!	; 0x2c8

00010de0 <bindtextdomain@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #86016	; 0x15000
   10de8:	ldr	pc, [ip, #704]!	; 0x2c0

00010dec <strncmp@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #86016	; 0x15000
   10df4:	ldr	pc, [ip, #696]!	; 0x2b8

00010df8 <abort@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #86016	; 0x15000
   10e00:	ldr	pc, [ip, #688]!	; 0x2b0

00010e04 <__assert_fail@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #86016	; 0x15000
   10e0c:	ldr	pc, [ip, #680]!	; 0x2a8

Disassembly of section .text:

00010e10 <.text>:
   10e10:	mov	fp, #0
   10e14:	mov	lr, #0
   10e18:	pop	{r1}		; (ldr r1, [sp], #4)
   10e1c:	mov	r2, sp
   10e20:	push	{r2}		; (str r2, [sp, #-4]!)
   10e24:	push	{r0}		; (str r0, [sp, #-4]!)
   10e28:	ldr	ip, [pc, #16]	; 10e40 <__assert_fail@plt+0x3c>
   10e2c:	push	{ip}		; (str ip, [sp, #-4]!)
   10e30:	ldr	r0, [pc, #12]	; 10e44 <__assert_fail@plt+0x40>
   10e34:	ldr	r3, [pc, #12]	; 10e48 <__assert_fail@plt+0x44>
   10e38:	bl	10cfc <__libc_start_main@plt>
   10e3c:	bl	10df8 <abort@plt>
   10e40:			; <UNDEFINED> instruction: 0x00014cb4
   10e44:	strdeq	r1, [r1], -r4
   10e48:	andeq	r4, r1, r4, asr ip
   10e4c:	ldr	r3, [pc, #20]	; 10e68 <__assert_fail@plt+0x64>
   10e50:	ldr	r2, [pc, #20]	; 10e6c <__assert_fail@plt+0x68>
   10e54:	add	r3, pc, r3
   10e58:	ldr	r2, [r3, r2]
   10e5c:	cmp	r2, #0
   10e60:	bxeq	lr
   10e64:	b	10d14 <__gmon_start__@plt>
   10e68:	andeq	r5, r1, r4, lsr #3
   10e6c:	strheq	r0, [r0], -r8
   10e70:	ldr	r0, [pc, #24]	; 10e90 <__assert_fail@plt+0x8c>
   10e74:	ldr	r3, [pc, #24]	; 10e94 <__assert_fail@plt+0x90>
   10e78:	cmp	r3, r0
   10e7c:	bxeq	lr
   10e80:	ldr	r3, [pc, #16]	; 10e98 <__assert_fail@plt+0x94>
   10e84:	cmp	r3, #0
   10e88:	bxeq	lr
   10e8c:	bx	r3
   10e90:	andeq	r6, r2, r0, lsl r1
   10e94:	andeq	r6, r2, r0, lsl r1
   10e98:	andeq	r0, r0, r0
   10e9c:	ldr	r0, [pc, #36]	; 10ec8 <__assert_fail@plt+0xc4>
   10ea0:	ldr	r1, [pc, #36]	; 10ecc <__assert_fail@plt+0xc8>
   10ea4:	sub	r1, r1, r0
   10ea8:	asr	r1, r1, #2
   10eac:	add	r1, r1, r1, lsr #31
   10eb0:	asrs	r1, r1, #1
   10eb4:	bxeq	lr
   10eb8:	ldr	r3, [pc, #16]	; 10ed0 <__assert_fail@plt+0xcc>
   10ebc:	cmp	r3, #0
   10ec0:	bxeq	lr
   10ec4:	bx	r3
   10ec8:	andeq	r6, r2, r0, lsl r1
   10ecc:	andeq	r6, r2, r0, lsl r1
   10ed0:	andeq	r0, r0, r0
   10ed4:	push	{r4, lr}
   10ed8:	ldr	r4, [pc, #24]	; 10ef8 <__assert_fail@plt+0xf4>
   10edc:	ldrb	r3, [r4]
   10ee0:	cmp	r3, #0
   10ee4:	popne	{r4, pc}
   10ee8:	bl	10e70 <__assert_fail@plt+0x6c>
   10eec:	mov	r3, #1
   10ef0:	strb	r3, [r4]
   10ef4:	pop	{r4, pc}
   10ef8:	andeq	r6, r2, r0, lsr #2
   10efc:	b	10e9c <__assert_fail@plt+0x98>
   10f00:	push	{fp, lr}
   10f04:	mov	fp, sp
   10f08:	cmp	r0, #0
   10f0c:	bne	1105c <__assert_fail@plt+0x258>
   10f10:	movw	r1, #19726	; 0x4d0e
   10f14:	mov	r0, #0
   10f18:	mov	r2, #5
   10f1c:	movt	r1, #1
   10f20:	bl	10c6c <dcgettext@plt>
   10f24:	mov	r1, r0
   10f28:	movw	r0, #24876	; 0x612c
   10f2c:	movt	r0, #2
   10f30:	ldr	r2, [r0]
   10f34:	mov	r0, #1
   10f38:	mov	r3, r2
   10f3c:	bl	10d74 <__printf_chk@plt>
   10f40:	movw	r1, #19789	; 0x4d4d
   10f44:	mov	r0, #0
   10f48:	mov	r2, #5
   10f4c:	movt	r1, #1
   10f50:	bl	10c6c <dcgettext@plt>
   10f54:	movw	r4, #24860	; 0x611c
   10f58:	movt	r4, #2
   10f5c:	ldr	r1, [r4]
   10f60:	bl	10c18 <fputs_unlocked@plt>
   10f64:	movw	r1, #19882	; 0x4daa
   10f68:	mov	r0, #0
   10f6c:	mov	r2, #5
   10f70:	movt	r1, #1
   10f74:	bl	10c6c <dcgettext@plt>
   10f78:	ldr	r1, [r4]
   10f7c:	bl	10c18 <fputs_unlocked@plt>
   10f80:	movw	r1, #20014	; 0x4e2e
   10f84:	mov	r0, #0
   10f88:	mov	r2, #5
   10f8c:	movt	r1, #1
   10f90:	bl	10c6c <dcgettext@plt>
   10f94:	ldr	r1, [r4]
   10f98:	bl	10c18 <fputs_unlocked@plt>
   10f9c:	movw	r1, #20059	; 0x4e5b
   10fa0:	mov	r0, #0
   10fa4:	mov	r2, #5
   10fa8:	movt	r1, #1
   10fac:	bl	10c6c <dcgettext@plt>
   10fb0:	ldr	r1, [r4]
   10fb4:	bl	10c18 <fputs_unlocked@plt>
   10fb8:	movw	r1, #20113	; 0x4e91
   10fbc:	mov	r0, #0
   10fc0:	mov	r2, #5
   10fc4:	movt	r1, #1
   10fc8:	bl	10c6c <dcgettext@plt>
   10fcc:	ldr	r1, [r4]
   10fd0:	bl	10c18 <fputs_unlocked@plt>
   10fd4:	movw	r1, #20176	; 0x4ed0
   10fd8:	mov	r0, #0
   10fdc:	mov	r2, #5
   10fe0:	movt	r1, #1
   10fe4:	bl	10c6c <dcgettext@plt>
   10fe8:	ldr	r1, [r4]
   10fec:	bl	10c18 <fputs_unlocked@plt>
   10ff0:	movw	r1, #20405	; 0x4fb5
   10ff4:	mov	r0, #0
   10ff8:	mov	r2, #5
   10ffc:	movt	r1, #1
   11000:	bl	10c6c <dcgettext@plt>
   11004:	ldr	r1, [r4]
   11008:	bl	10c18 <fputs_unlocked@plt>
   1100c:	movw	r1, #20515	; 0x5023
   11010:	mov	r0, #0
   11014:	mov	r2, #5
   11018:	movt	r1, #1
   1101c:	bl	10c6c <dcgettext@plt>
   11020:	movw	r2, #20706	; 0x50e2
   11024:	mov	r1, r0
   11028:	mov	r0, #1
   1102c:	movt	r2, #1
   11030:	bl	10d74 <__printf_chk@plt>
   11034:	movw	r1, #20711	; 0x50e7
   11038:	mov	r0, #0
   1103c:	mov	r2, #5
   11040:	movt	r1, #1
   11044:	bl	10c6c <dcgettext@plt>
   11048:	ldr	r1, [r4]
   1104c:	bl	10c18 <fputs_unlocked@plt>
   11050:	bl	1107c <__assert_fail@plt+0x278>
   11054:	mov	r0, #0
   11058:	bl	10d2c <exit@plt>
   1105c:	movw	r0, #19676	; 0x4cdc
   11060:	movw	r1, #19699	; 0x4cf3
   11064:	movw	r3, #19710	; 0x4cfe
   11068:	mov	r2, #40	; 0x28
   1106c:	movt	r0, #1
   11070:	movt	r1, #1
   11074:	movt	r3, #1
   11078:	bl	10e04 <__assert_fail@plt>
   1107c:	push	{r4, r5, r6, sl, fp, lr}
   11080:	add	fp, sp, #16
   11084:	sub	sp, sp, #56	; 0x38
   11088:	movw	r0, #21224	; 0x52e8
   1108c:	mov	r2, #48	; 0x30
   11090:	mov	r5, sp
   11094:	movw	r4, #20706	; 0x50e2
   11098:	movt	r0, #1
   1109c:	movt	r4, #1
   110a0:	add	r1, r0, #32
   110a4:	add	r3, r0, #16
   110a8:	vld1.64	{d18-d19}, [r0], r2
   110ac:	vld1.64	{d16-d17}, [r1]
   110b0:	vld1.64	{d20-d21}, [r3]
   110b4:	vldr	d22, [r0]
   110b8:	add	r1, r5, #32
   110bc:	add	r0, r5, #16
   110c0:	vst1.64	{d16-d17}, [r1]
   110c4:	movw	r1, #20911	; 0x51af
   110c8:	vst1.64	{d20-d21}, [r0]
   110cc:	mov	r0, r5
   110d0:	movt	r1, #1
   110d4:	vst1.64	{d18-d19}, [r0], r2
   110d8:	vstr	d22, [r0]
   110dc:	mov	r0, r4
   110e0:	bl	10c24 <strcmp@plt>
   110e4:	cmp	r0, #0
   110e8:	ldrne	r1, [r5, #8]!
   110ec:	cmpne	r1, #0
   110f0:	bne	110dc <__assert_fail@plt+0x2d8>
   110f4:	movw	r1, #21006	; 0x520e
   110f8:	ldr	r5, [r5, #4]
   110fc:	mov	r0, #0
   11100:	mov	r2, #5
   11104:	movt	r1, #1
   11108:	bl	10c6c <dcgettext@plt>
   1110c:	movw	r2, #20876	; 0x518c
   11110:	movw	r3, #21029	; 0x5225
   11114:	mov	r1, r0
   11118:	mov	r0, #1
   1111c:	movt	r2, #1
   11120:	movt	r3, #1
   11124:	bl	10d74 <__printf_chk@plt>
   11128:	cmp	r5, #0
   1112c:	mov	r0, #5
   11130:	mov	r1, #0
   11134:	moveq	r5, r4
   11138:	bl	10dbc <setlocale@plt>
   1113c:	cmp	r0, #0
   11140:	beq	11180 <__assert_fail@plt+0x37c>
   11144:	movw	r1, #21069	; 0x524d
   11148:	mov	r2, #3
   1114c:	movt	r1, #1
   11150:	bl	10dec <strncmp@plt>
   11154:	cmp	r0, #0
   11158:	beq	11180 <__assert_fail@plt+0x37c>
   1115c:	movw	r1, #21073	; 0x5251
   11160:	mov	r0, #0
   11164:	mov	r2, #5
   11168:	movt	r1, #1
   1116c:	bl	10c6c <dcgettext@plt>
   11170:	movw	r1, #24860	; 0x611c
   11174:	movt	r1, #2
   11178:	ldr	r1, [r1]
   1117c:	bl	10c18 <fputs_unlocked@plt>
   11180:	movw	r1, #21144	; 0x5298
   11184:	mov	r0, #0
   11188:	mov	r2, #5
   1118c:	movt	r1, #1
   11190:	bl	10c6c <dcgettext@plt>
   11194:	movw	r2, #21029	; 0x5225
   11198:	mov	r1, r0
   1119c:	mov	r0, #1
   111a0:	mov	r3, r4
   111a4:	movt	r2, #1
   111a8:	bl	10d74 <__printf_chk@plt>
   111ac:	movw	r0, #20939	; 0x51cb
   111b0:	movw	r1, #21171	; 0x52b3
   111b4:	movw	r6, #20175	; 0x4ecf
   111b8:	cmp	r5, r4
   111bc:	mov	r2, #5
   111c0:	movt	r0, #1
   111c4:	movt	r1, #1
   111c8:	movt	r6, #1
   111cc:	moveq	r6, r0
   111d0:	mov	r0, #0
   111d4:	bl	10c6c <dcgettext@plt>
   111d8:	mov	r1, r0
   111dc:	mov	r0, #1
   111e0:	mov	r2, r5
   111e4:	mov	r3, r6
   111e8:	sub	sp, fp, #16
   111ec:	pop	{r4, r5, r6, sl, fp, lr}
   111f0:	b	10d74 <__printf_chk@plt>
   111f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111f8:	add	fp, sp, #28
   111fc:	sub	sp, sp, #20
   11200:	mov	r6, r0
   11204:	movw	r0, #20816	; 0x5150
   11208:	mov	r5, r1
   1120c:	movt	r0, #1
   11210:	bl	10ce4 <getenv@plt>
   11214:	mov	r8, r0
   11218:	cmp	r0, #0
   1121c:	beq	11248 <__assert_fail@plt+0x444>
   11220:	mov	r4, #0
   11224:	cmp	r6, #2
   11228:	blt	1124c <__assert_fail@plt+0x448>
   1122c:	ldr	r0, [r5, #4]
   11230:	movw	r1, #20832	; 0x5160
   11234:	movt	r1, #1
   11238:	bl	10c24 <strcmp@plt>
   1123c:	clz	r0, r0
   11240:	lsr	r4, r0, #5
   11244:	b	1124c <__assert_fail@plt+0x448>
   11248:	mov	r4, #1
   1124c:	ldr	r0, [r5]
   11250:	bl	11b30 <__assert_fail@plt+0xd2c>
   11254:	movw	r1, #20175	; 0x4ecf
   11258:	mov	r0, #6
   1125c:	movt	r1, #1
   11260:	bl	10dbc <setlocale@plt>
   11264:	movw	r7, #20880	; 0x5190
   11268:	movw	r1, #20835	; 0x5163
   1126c:	movt	r7, #1
   11270:	movt	r1, #1
   11274:	mov	r0, r7
   11278:	bl	10de0 <bindtextdomain@plt>
   1127c:	mov	r0, r7
   11280:	bl	10c84 <textdomain@plt>
   11284:	movw	r0, #6724	; 0x1a44
   11288:	movt	r0, #1
   1128c:	bl	14cb8 <__assert_fail@plt+0x3eb4>
   11290:	cmp	r6, #2
   11294:	bne	112d4 <__assert_fail@plt+0x4d0>
   11298:	cmp	r4, #0
   1129c:	beq	112d4 <__assert_fail@plt+0x4d0>
   112a0:	ldr	r7, [r5, #4]
   112a4:	movw	r1, #20859	; 0x517b
   112a8:	movt	r1, #1
   112ac:	mov	r0, r7
   112b0:	bl	10c24 <strcmp@plt>
   112b4:	cmp	r0, #0
   112b8:	beq	11a1c <__assert_fail@plt+0xc18>
   112bc:	movw	r1, #20866	; 0x5182
   112c0:	mov	r0, r7
   112c4:	movt	r1, #1
   112c8:	bl	10c24 <strcmp@plt>
   112cc:	cmp	r0, #0
   112d0:	beq	119b0 <__assert_fail@plt+0xbac>
   112d4:	sub	r6, r6, #1
   112d8:	mov	r0, #0
   112dc:	eor	r2, r4, #1
   112e0:	mov	r1, #0
   112e4:	add	r5, r5, #4
   112e8:	mov	r3, #1
   112ec:	cmp	r6, #1
   112f0:	movwlt	r0, #1
   112f4:	orrs	r0, r2, r0
   112f8:	bne	113e4 <__assert_fail@plt+0x5e0>
   112fc:	ldr	r2, [r5]
   11300:	ldrb	r0, [r2]
   11304:	cmp	r0, #45	; 0x2d
   11308:	bne	113e4 <__assert_fail@plt+0x5e0>
   1130c:	mov	r1, #0
   11310:	mov	r0, #1
   11314:	add	r3, r2, #1
   11318:	mov	r7, #0
   1131c:	ldrb	r4, [r3, -r7]
   11320:	cmp	r4, #100	; 0x64
   11324:	ble	11344 <__assert_fail@plt+0x540>
   11328:	cmp	r4, #110	; 0x6e
   1132c:	cmpne	r4, #101	; 0x65
   11330:	bne	113dc <__assert_fail@plt+0x5d8>
   11334:	sub	r7, r7, #1
   11338:	ldrb	r4, [r3, -r7]
   1133c:	cmp	r4, #100	; 0x64
   11340:	bgt	11328 <__assert_fail@plt+0x524>
   11344:	cmp	r4, #69	; 0x45
   11348:	beq	11334 <__assert_fail@plt+0x530>
   1134c:	cmp	r4, #0
   11350:	bne	113dc <__assert_fail@plt+0x5d8>
   11354:	cmp	r7, #0
   11358:	beq	113dc <__assert_fail@plt+0x5d8>
   1135c:	ldrb	r3, [r3]
   11360:	cmp	r3, #0
   11364:	beq	113bc <__assert_fail@plt+0x5b8>
   11368:	add	r2, r2, #2
   1136c:	b	11380 <__assert_fail@plt+0x57c>
   11370:	mov	r0, #0
   11374:	ldrb	r3, [r2], #1
   11378:	cmp	r3, #0
   1137c:	beq	113bc <__assert_fail@plt+0x5b8>
   11380:	uxtb	r3, r3
   11384:	cmp	r3, #69	; 0x45
   11388:	beq	113ac <__assert_fail@plt+0x5a8>
   1138c:	cmp	r3, #110	; 0x6e
   11390:	beq	11370 <__assert_fail@plt+0x56c>
   11394:	cmp	r3, #101	; 0x65
   11398:	moveq	r1, #1
   1139c:	ldrb	r3, [r2], #1
   113a0:	cmp	r3, #0
   113a4:	bne	11380 <__assert_fail@plt+0x57c>
   113a8:	b	113bc <__assert_fail@plt+0x5b8>
   113ac:	mov	r1, #0
   113b0:	ldrb	r3, [r2], #1
   113b4:	cmp	r3, #0
   113b8:	bne	11380 <__assert_fail@plt+0x57c>
   113bc:	sub	r6, r6, #1
   113c0:	add	r5, r5, #4
   113c4:	cmp	r6, #0
   113c8:	ble	113dc <__assert_fail@plt+0x5d8>
   113cc:	ldr	r2, [r5]
   113d0:	ldrb	r3, [r2]
   113d4:	cmp	r3, #45	; 0x2d
   113d8:	beq	11314 <__assert_fail@plt+0x510>
   113dc:	and	r1, r1, #1
   113e0:	and	r3, r0, #1
   113e4:	cmp	r8, #0
   113e8:	str	r3, [sp, #16]
   113ec:	cmpeq	r1, #0
   113f0:	beq	118f4 <__assert_fail@plt+0xaf0>
   113f4:	cmp	r6, #1
   113f8:	blt	1196c <__assert_fail@plt+0xb68>
   113fc:	movw	r4, #24860	; 0x611c
   11400:	mov	ip, #92	; 0x5c
   11404:	mov	lr, #32
   11408:	movt	r4, #2
   1140c:	ldr	r9, [r5]
   11410:	mov	r7, r9
   11414:	ldrb	r8, [r7], #1
   11418:	cmp	r8, #92	; 0x5c
   1141c:	beq	1142c <__assert_fail@plt+0x628>
   11420:	cmp	r8, #0
   11424:	bne	115b0 <__assert_fail@plt+0x7ac>
   11428:	b	118ac <__assert_fail@plt+0xaa8>
   1142c:	ldrb	r8, [r7]
   11430:	cmp	r8, #0
   11434:	beq	115ac <__assert_fail@plt+0x7a8>
   11438:	sub	r0, r8, #48	; 0x30
   1143c:	add	r7, r9, #2
   11440:	cmp	r0, #72	; 0x48
   11444:	bhi	11664 <__assert_fail@plt+0x860>
   11448:	add	r1, pc, #0
   1144c:	ldr	pc, [r1, r0, lsl #2]
   11450:	andeq	r1, r1, r0, lsl r6
   11454:	andeq	r1, r1, r4, ror r5
   11458:	andeq	r1, r1, r4, ror r5
   1145c:	andeq	r1, r1, r4, ror r5
   11460:	andeq	r1, r1, r4, ror r5
   11464:	andeq	r1, r1, r4, ror r5
   11468:	andeq	r1, r1, r4, ror r5
   1146c:	andeq	r1, r1, r4, ror r5
   11470:	andeq	r1, r1, r4, ror #12
   11474:	andeq	r1, r1, r4, ror #12
   11478:	andeq	r1, r1, r4, ror #12
   1147c:	andeq	r1, r1, r4, ror #12
   11480:	andeq	r1, r1, r4, ror #12
   11484:	andeq	r1, r1, r4, ror #12
   11488:	andeq	r1, r1, r4, ror #12
   1148c:	andeq	r1, r1, r4, ror #12
   11490:	andeq	r1, r1, r4, ror #12
   11494:	andeq	r1, r1, r4, ror #12
   11498:	andeq	r1, r1, r4, ror #12
   1149c:	andeq	r1, r1, r4, ror #12
   114a0:	andeq	r1, r1, r4, ror #12
   114a4:	andeq	r1, r1, r4, ror #12
   114a8:	andeq	r1, r1, r4, ror #12
   114ac:	andeq	r1, r1, r4, ror #12
   114b0:	andeq	r1, r1, r4, ror #12
   114b4:	andeq	r1, r1, r4, ror #12
   114b8:	andeq	r1, r1, r4, ror #12
   114bc:	andeq	r1, r1, r4, ror #12
   114c0:	andeq	r1, r1, r4, ror #12
   114c4:	andeq	r1, r1, r4, ror #12
   114c8:	andeq	r1, r1, r4, ror #12
   114cc:	andeq	r1, r1, r4, ror #12
   114d0:	andeq	r1, r1, r4, ror #12
   114d4:	andeq	r1, r1, r4, ror #12
   114d8:	andeq	r1, r1, r4, ror #12
   114dc:	andeq	r1, r1, r4, ror #12
   114e0:	andeq	r1, r1, r4, ror #12
   114e4:	andeq	r1, r1, r4, ror #12
   114e8:	andeq	r1, r1, r4, ror #12
   114ec:	andeq	r1, r1, r4, ror #12
   114f0:	andeq	r1, r1, r4, ror #12
   114f4:	andeq	r1, r1, r4, ror #12
   114f8:	andeq	r1, r1, r4, ror #12
   114fc:	andeq	r1, r1, r4, ror #12
   11500:			; <UNDEFINED> instruction: 0x000115b0
   11504:	andeq	r1, r1, r4, ror #12
   11508:	andeq	r1, r1, r4, ror #12
   1150c:	andeq	r1, r1, r4, ror #12
   11510:	andeq	r1, r1, r4, ror #12
   11514:	andeq	r1, r1, r8, lsr r6
   11518:	andeq	r1, r1, r0, lsl #12
   1151c:	andeq	r1, r1, r4, lsr #19
   11520:	andeq	r1, r1, r4, ror #12
   11524:	strdeq	r1, [r1], -r8
   11528:	strdeq	r1, [r1], -r0
   1152c:	andeq	r1, r1, r4, ror #12
   11530:	andeq	r1, r1, r4, ror #12
   11534:	andeq	r1, r1, r4, ror #12
   11538:	andeq	r1, r1, r4, ror #12
   1153c:	andeq	r1, r1, r4, ror #12
   11540:	andeq	r1, r1, r4, ror #12
   11544:	andeq	r1, r1, r4, ror #12
   11548:	andeq	r1, r1, r8, ror #11
   1154c:	andeq	r1, r1, r4, ror #12
   11550:	andeq	r1, r1, r4, ror #12
   11554:	andeq	r1, r1, r4, ror #12
   11558:	andeq	r1, r1, r8, lsl #13
   1155c:	andeq	r1, r1, r4, ror #12
   11560:	andeq	r1, r1, r0, lsr r6
   11564:	andeq	r1, r1, r4, ror #12
   11568:	andeq	r1, r1, r8, lsl #12
   1156c:	andeq	r1, r1, r4, ror #12
   11570:	andeq	r1, r1, r0, asr #12
   11574:	ldrb	r0, [r7]
   11578:	sub	r8, r8, #48	; 0x30
   1157c:	and	r1, r0, #248	; 0xf8
   11580:	cmp	r1, #48	; 0x30
   11584:	bne	11594 <__assert_fail@plt+0x790>
   11588:	add	r0, r0, r8, lsl #3
   1158c:	sub	r8, r0, #48	; 0x30
   11590:	ldrb	r0, [r7, #1]!
   11594:	and	r1, r0, #248	; 0xf8
   11598:	cmp	r1, #48	; 0x30
   1159c:	addeq	r0, r0, r8, lsl #3
   115a0:	addeq	r7, r7, #1
   115a4:	subeq	r8, r0, #48	; 0x30
   115a8:	b	115b0 <__assert_fail@plt+0x7ac>
   115ac:	mov	r8, #92	; 0x5c
   115b0:	ldr	r0, [r4]
   115b4:	ldr	r1, [r0, #20]
   115b8:	ldr	r2, [r0, #24]
   115bc:	cmp	r1, r2
   115c0:	bcs	11860 <__assert_fail@plt+0xa5c>
   115c4:	add	r2, r1, #1
   115c8:	mov	r9, r7
   115cc:	str	r2, [r0, #20]
   115d0:	strb	r8, [r1]
   115d4:	mov	r7, r9
   115d8:	ldrb	r8, [r7], #1
   115dc:	cmp	r8, #92	; 0x5c
   115e0:	bne	11420 <__assert_fail@plt+0x61c>
   115e4:	b	1142c <__assert_fail@plt+0x628>
   115e8:	mov	r8, #10
   115ec:	b	115b0 <__assert_fail@plt+0x7ac>
   115f0:	mov	r8, #12
   115f4:	b	115b0 <__assert_fail@plt+0x7ac>
   115f8:	mov	r8, #27
   115fc:	b	115b0 <__assert_fail@plt+0x7ac>
   11600:	mov	r8, #8
   11604:	b	115b0 <__assert_fail@plt+0x7ac>
   11608:	mov	r8, #11
   1160c:	b	115b0 <__assert_fail@plt+0x7ac>
   11610:	ldrb	r0, [r7]
   11614:	mov	r8, #0
   11618:	and	r1, r0, #248	; 0xf8
   1161c:	cmp	r1, #48	; 0x30
   11620:	bne	115b0 <__assert_fail@plt+0x7ac>
   11624:	add	r7, r9, #3
   11628:	mov	r8, r0
   1162c:	b	11574 <__assert_fail@plt+0x770>
   11630:	mov	r8, #9
   11634:	b	115b0 <__assert_fail@plt+0x7ac>
   11638:	mov	r8, #7
   1163c:	b	115b0 <__assert_fail@plt+0x7ac>
   11640:	ldrb	sl, [r7]
   11644:	bl	10d20 <__ctype_b_loc@plt>
   11648:	ldr	r0, [r0]
   1164c:	mov	lr, #32
   11650:	mov	ip, #92	; 0x5c
   11654:	add	r1, r0, sl, lsl #1
   11658:	ldrb	r1, [r1, #1]
   1165c:	tst	r1, #16
   11660:	bne	11690 <__assert_fail@plt+0x88c>
   11664:	ldr	r0, [r4]
   11668:	ldr	r1, [r0, #20]
   1166c:	ldr	r2, [r0, #24]
   11670:	cmp	r1, r2
   11674:	bcs	11898 <__assert_fail@plt+0xa94>
   11678:	add	r2, r1, #1
   1167c:	str	r2, [r0, #20]
   11680:	strb	ip, [r1]
   11684:	b	115b0 <__assert_fail@plt+0x7ac>
   11688:	mov	r8, #13
   1168c:	b	115b0 <__assert_fail@plt+0x7ac>
   11690:	sub	r1, sl, #65	; 0x41
   11694:	add	r7, r9, #3
   11698:	cmp	r1, #37	; 0x25
   1169c:	bhi	1176c <__assert_fail@plt+0x968>
   116a0:	add	r2, pc, #4
   116a4:	mov	r8, #10
   116a8:	ldr	pc, [r2, r1, lsl #2]
   116ac:	andeq	r1, r1, r0, ror r7
   116b0:	andeq	r1, r1, r4, asr #14
   116b4:	andeq	r1, r1, r4, asr r7
   116b8:	andeq	r1, r1, ip, asr r7
   116bc:	andeq	r1, r1, r4, ror #14
   116c0:	andeq	r1, r1, ip, asr #14
   116c4:	andeq	r1, r1, ip, ror #14
   116c8:	andeq	r1, r1, ip, ror #14
   116cc:	andeq	r1, r1, ip, ror #14
   116d0:	andeq	r1, r1, ip, ror #14
   116d4:	andeq	r1, r1, ip, ror #14
   116d8:	andeq	r1, r1, ip, ror #14
   116dc:	andeq	r1, r1, ip, ror #14
   116e0:	andeq	r1, r1, ip, ror #14
   116e4:	andeq	r1, r1, ip, ror #14
   116e8:	andeq	r1, r1, ip, ror #14
   116ec:	andeq	r1, r1, ip, ror #14
   116f0:	andeq	r1, r1, ip, ror #14
   116f4:	andeq	r1, r1, ip, ror #14
   116f8:	andeq	r1, r1, ip, ror #14
   116fc:	andeq	r1, r1, ip, ror #14
   11700:	andeq	r1, r1, ip, ror #14
   11704:	andeq	r1, r1, ip, ror #14
   11708:	andeq	r1, r1, ip, ror #14
   1170c:	andeq	r1, r1, ip, ror #14
   11710:	andeq	r1, r1, ip, ror #14
   11714:	andeq	r1, r1, ip, ror #14
   11718:	andeq	r1, r1, ip, ror #14
   1171c:	andeq	r1, r1, ip, ror #14
   11720:	andeq	r1, r1, ip, ror #14
   11724:	andeq	r1, r1, ip, ror #14
   11728:	andeq	r1, r1, ip, ror #14
   1172c:	andeq	r1, r1, r0, ror r7
   11730:	andeq	r1, r1, r4, asr #14
   11734:	andeq	r1, r1, r4, asr r7
   11738:	andeq	r1, r1, ip, asr r7
   1173c:	andeq	r1, r1, r4, ror #14
   11740:	andeq	r1, r1, ip, asr #14
   11744:	mov	r8, #11
   11748:	b	11770 <__assert_fail@plt+0x96c>
   1174c:	mov	r8, #15
   11750:	b	11770 <__assert_fail@plt+0x96c>
   11754:	mov	r8, #12
   11758:	b	11770 <__assert_fail@plt+0x96c>
   1175c:	mov	r8, #13
   11760:	b	11770 <__assert_fail@plt+0x96c>
   11764:	mov	r8, #14
   11768:	b	11770 <__assert_fail@plt+0x96c>
   1176c:	sub	r8, sl, #48	; 0x30
   11770:	ldrb	r2, [r7]
   11774:	add	r0, r0, r2, lsl #1
   11778:	ldrb	r0, [r0, #1]
   1177c:	tst	r0, #16
   11780:	beq	115b0 <__assert_fail@plt+0x7ac>
   11784:	sub	r3, r2, #65	; 0x41
   11788:	lsl	r0, r8, #4
   1178c:	cmp	r3, #37	; 0x25
   11790:	bhi	11888 <__assert_fail@plt+0xa84>
   11794:	add	r7, pc, #4
   11798:	mov	r1, #10
   1179c:	ldr	pc, [r7, r3, lsl #2]
   117a0:	andeq	r1, r1, ip, lsl #17
   117a4:	andeq	r1, r1, r8, lsr r8
   117a8:	andeq	r1, r1, r8, asr #16
   117ac:	andeq	r1, r1, r0, asr r8
   117b0:	andeq	r1, r1, r8, asr r8
   117b4:	andeq	r1, r1, r0, asr #16
   117b8:	andeq	r1, r1, r8, lsl #17
   117bc:	andeq	r1, r1, r8, lsl #17
   117c0:	andeq	r1, r1, r8, lsl #17
   117c4:	andeq	r1, r1, r8, lsl #17
   117c8:	andeq	r1, r1, r8, lsl #17
   117cc:	andeq	r1, r1, r8, lsl #17
   117d0:	andeq	r1, r1, r8, lsl #17
   117d4:	andeq	r1, r1, r8, lsl #17
   117d8:	andeq	r1, r1, r8, lsl #17
   117dc:	andeq	r1, r1, r8, lsl #17
   117e0:	andeq	r1, r1, r8, lsl #17
   117e4:	andeq	r1, r1, r8, lsl #17
   117e8:	andeq	r1, r1, r8, lsl #17
   117ec:	andeq	r1, r1, r8, lsl #17
   117f0:	andeq	r1, r1, r8, lsl #17
   117f4:	andeq	r1, r1, r8, lsl #17
   117f8:	andeq	r1, r1, r8, lsl #17
   117fc:	andeq	r1, r1, r8, lsl #17
   11800:	andeq	r1, r1, r8, lsl #17
   11804:	andeq	r1, r1, r8, lsl #17
   11808:	andeq	r1, r1, r8, lsl #17
   1180c:	andeq	r1, r1, r8, lsl #17
   11810:	andeq	r1, r1, r8, lsl #17
   11814:	andeq	r1, r1, r8, lsl #17
   11818:	andeq	r1, r1, r8, lsl #17
   1181c:	andeq	r1, r1, r8, lsl #17
   11820:	andeq	r1, r1, ip, lsl #17
   11824:	andeq	r1, r1, r8, lsr r8
   11828:	andeq	r1, r1, r8, asr #16
   1182c:	andeq	r1, r1, r0, asr r8
   11830:	andeq	r1, r1, r8, asr r8
   11834:	andeq	r1, r1, r0, asr #16
   11838:	mov	r1, #11
   1183c:	b	1188c <__assert_fail@plt+0xa88>
   11840:	mov	r1, #15
   11844:	b	1188c <__assert_fail@plt+0xa88>
   11848:	mov	r1, #12
   1184c:	b	1188c <__assert_fail@plt+0xa88>
   11850:	mov	r1, #13
   11854:	b	1188c <__assert_fail@plt+0xa88>
   11858:	mov	r1, #14
   1185c:	b	1188c <__assert_fail@plt+0xa88>
   11860:	uxtb	r1, r8
   11864:	bl	10db0 <__overflow@plt>
   11868:	mov	lr, #32
   1186c:	mov	ip, #92	; 0x5c
   11870:	mov	r9, r7
   11874:	mov	r7, r9
   11878:	ldrb	r8, [r7], #1
   1187c:	cmp	r8, #92	; 0x5c
   11880:	bne	11420 <__assert_fail@plt+0x61c>
   11884:	b	1142c <__assert_fail@plt+0x628>
   11888:	sub	r1, r2, #48	; 0x30
   1188c:	add	r7, r9, #4
   11890:	add	r8, r1, r0
   11894:	b	115b0 <__assert_fail@plt+0x7ac>
   11898:	mov	r1, #92	; 0x5c
   1189c:	bl	10db0 <__overflow@plt>
   118a0:	mov	lr, #32
   118a4:	mov	ip, #92	; 0x5c
   118a8:	b	115b0 <__assert_fail@plt+0x7ac>
   118ac:	sub	r6, r6, #1
   118b0:	cmp	r6, #1
   118b4:	blt	1196c <__assert_fail@plt+0xb68>
   118b8:	ldr	r0, [r4]
   118bc:	add	r5, r5, #4
   118c0:	ldr	r1, [r0, #20]
   118c4:	ldr	r2, [r0, #24]
   118c8:	cmp	r1, r2
   118cc:	bcs	118e0 <__assert_fail@plt+0xadc>
   118d0:	add	r2, r1, #1
   118d4:	str	r2, [r0, #20]
   118d8:	strb	lr, [r1]
   118dc:	b	1140c <__assert_fail@plt+0x608>
   118e0:	mov	r1, #32
   118e4:	bl	10db0 <__overflow@plt>
   118e8:	mov	lr, #32
   118ec:	mov	ip, #92	; 0x5c
   118f0:	b	1140c <__assert_fail@plt+0x608>
   118f4:	cmp	r6, #1
   118f8:	blt	1196c <__assert_fail@plt+0xb68>
   118fc:	movw	r4, #24860	; 0x611c
   11900:	ldr	r0, [r5]
   11904:	movt	r4, #2
   11908:	ldr	r1, [r4]
   1190c:	bl	10c18 <fputs_unlocked@plt>
   11910:	sub	r6, r6, #1
   11914:	cmp	r6, #1
   11918:	blt	1196c <__assert_fail@plt+0xb68>
   1191c:	add	r5, r5, #4
   11920:	mov	r7, #32
   11924:	ldr	r0, [r4]
   11928:	ldr	r1, [r0, #20]
   1192c:	ldr	r2, [r0, #24]
   11930:	cmp	r1, r2
   11934:	bcs	11960 <__assert_fail@plt+0xb5c>
   11938:	add	r2, r1, #1
   1193c:	str	r2, [r0, #20]
   11940:	strb	r7, [r1]
   11944:	ldr	r1, [r4]
   11948:	ldr	r0, [r5], #4
   1194c:	bl	10c18 <fputs_unlocked@plt>
   11950:	sub	r6, r6, #1
   11954:	cmp	r6, #0
   11958:	bgt	11924 <__assert_fail@plt+0xb20>
   1195c:	b	1196c <__assert_fail@plt+0xb68>
   11960:	mov	r1, #32
   11964:	bl	10db0 <__overflow@plt>
   11968:	b	11944 <__assert_fail@plt+0xb40>
   1196c:	ldr	r0, [sp, #16]
   11970:	cmp	r0, #0
   11974:	beq	119a4 <__assert_fail@plt+0xba0>
   11978:	movw	r0, #24860	; 0x611c
   1197c:	movt	r0, #2
   11980:	ldr	r0, [r0]
   11984:	ldr	r1, [r0, #20]
   11988:	ldr	r2, [r0, #24]
   1198c:	cmp	r1, r2
   11990:	bcs	11a08 <__assert_fail@plt+0xc04>
   11994:	add	r2, r1, #1
   11998:	str	r2, [r0, #20]
   1199c:	mov	r0, #10
   119a0:	strb	r0, [r1]
   119a4:	mov	r0, #0
   119a8:	sub	sp, fp, #28
   119ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119b0:	movw	r0, #24776	; 0x60c8
   119b4:	movw	r2, #20900	; 0x51a4
   119b8:	mov	r1, #0
   119bc:	movw	r7, #20890	; 0x519a
   119c0:	movt	r0, #2
   119c4:	movt	r2, #1
   119c8:	str	r1, [sp, #8]
   119cc:	movw	r1, #20706	; 0x50e2
   119d0:	movt	r7, #1
   119d4:	movt	r1, #1
   119d8:	ldr	r3, [r0]
   119dc:	movw	r0, #24860	; 0x611c
   119e0:	str	r2, [sp, #4]
   119e4:	movw	r2, #20876	; 0x518c
   119e8:	str	r7, [sp]
   119ec:	movt	r0, #2
   119f0:	movt	r2, #1
   119f4:	ldr	r0, [r0]
   119f8:	bl	13f98 <__assert_fail@plt+0x3194>
   119fc:	mov	r0, #0
   11a00:	sub	sp, fp, #28
   11a04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a08:	mov	r1, #10
   11a0c:	bl	10db0 <__overflow@plt>
   11a10:	mov	r0, #0
   11a14:	sub	sp, fp, #28
   11a18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a1c:	mov	r0, #0
   11a20:	bl	10f00 <__assert_fail@plt+0xfc>
   11a24:	movw	r1, #24868	; 0x6124
   11a28:	movt	r1, #2
   11a2c:	str	r0, [r1, #4]
   11a30:	bx	lr
   11a34:	movw	r1, #24868	; 0x6124
   11a38:	movt	r1, #2
   11a3c:	strb	r0, [r1]
   11a40:	bx	lr
   11a44:	push	{r4, r5, r6, sl, fp, lr}
   11a48:	add	fp, sp, #16
   11a4c:	sub	sp, sp, #8
   11a50:	movw	r0, #24860	; 0x611c
   11a54:	movt	r0, #2
   11a58:	ldr	r0, [r0]
   11a5c:	bl	14824 <__assert_fail@plt+0x3a20>
   11a60:	cmp	r0, #0
   11a64:	beq	11a8c <__assert_fail@plt+0xc88>
   11a68:	movw	r5, #24868	; 0x6124
   11a6c:	movt	r5, #2
   11a70:	ldrb	r0, [r5]
   11a74:	cmp	r0, #0
   11a78:	beq	11ab8 <__assert_fail@plt+0xcb4>
   11a7c:	bl	10d50 <__errno_location@plt>
   11a80:	ldr	r0, [r0]
   11a84:	cmp	r0, #32
   11a88:	bne	11ab8 <__assert_fail@plt+0xcb4>
   11a8c:	movw	r0, #24856	; 0x6118
   11a90:	movt	r0, #2
   11a94:	ldr	r0, [r0]
   11a98:	bl	14824 <__assert_fail@plt+0x3a20>
   11a9c:	cmp	r0, #0
   11aa0:	subeq	sp, fp, #16
   11aa4:	popeq	{r4, r5, r6, sl, fp, pc}
   11aa8:	movw	r0, #24780	; 0x60cc
   11aac:	movt	r0, #2
   11ab0:	ldr	r0, [r0]
   11ab4:	bl	10c48 <_exit@plt>
   11ab8:	movw	r1, #21295	; 0x532f
   11abc:	mov	r0, #0
   11ac0:	mov	r2, #5
   11ac4:	movt	r1, #1
   11ac8:	bl	10c6c <dcgettext@plt>
   11acc:	ldr	r6, [r5, #4]
   11ad0:	mov	r4, r0
   11ad4:	bl	10d50 <__errno_location@plt>
   11ad8:	ldr	r5, [r0]
   11adc:	cmp	r6, #0
   11ae0:	bne	11afc <__assert_fail@plt+0xcf8>
   11ae4:	movw	r2, #21311	; 0x533f
   11ae8:	mov	r0, #0
   11aec:	mov	r1, r5
   11af0:	mov	r3, r4
   11af4:	movt	r2, #1
   11af8:	b	11b1c <__assert_fail@plt+0xd18>
   11afc:	mov	r0, r6
   11b00:	bl	1376c <__assert_fail@plt+0x2968>
   11b04:	movw	r2, #21307	; 0x533b
   11b08:	mov	r3, r0
   11b0c:	str	r4, [sp]
   11b10:	mov	r0, #0
   11b14:	mov	r1, r5
   11b18:	movt	r2, #1
   11b1c:	bl	10cd8 <error@plt>
   11b20:	movw	r0, #24780	; 0x60cc
   11b24:	movt	r0, #2
   11b28:	ldr	r0, [r0]
   11b2c:	bl	10c48 <_exit@plt>
   11b30:	push	{r4, r5, fp, lr}
   11b34:	add	fp, sp, #8
   11b38:	cmp	r0, #0
   11b3c:	beq	11bd0 <__assert_fail@plt+0xdcc>
   11b40:	mov	r1, #47	; 0x2f
   11b44:	mov	r4, r0
   11b48:	bl	10dc8 <strrchr@plt>
   11b4c:	cmp	r0, #0
   11b50:	mov	r5, r4
   11b54:	addne	r5, r0, #1
   11b58:	sub	r0, r5, r4
   11b5c:	cmp	r0, #7
   11b60:	blt	11bb4 <__assert_fail@plt+0xdb0>
   11b64:	movw	r1, #21370	; 0x537a
   11b68:	sub	r0, r5, #7
   11b6c:	mov	r2, #7
   11b70:	movt	r1, #1
   11b74:	bl	10dec <strncmp@plt>
   11b78:	cmp	r0, #0
   11b7c:	bne	11bb4 <__assert_fail@plt+0xdb0>
   11b80:	movw	r1, #21378	; 0x5382
   11b84:	mov	r0, r5
   11b88:	mov	r2, #3
   11b8c:	movt	r1, #1
   11b90:	bl	10dec <strncmp@plt>
   11b94:	cmp	r0, #0
   11b98:	beq	11ba4 <__assert_fail@plt+0xda0>
   11b9c:	mov	r4, r5
   11ba0:	b	11bb4 <__assert_fail@plt+0xdb0>
   11ba4:	movw	r0, #24848	; 0x6110
   11ba8:	add	r4, r5, #3
   11bac:	movt	r0, #2
   11bb0:	str	r4, [r0]
   11bb4:	movw	r0, #24852	; 0x6114
   11bb8:	movt	r0, #2
   11bbc:	str	r4, [r0]
   11bc0:	movw	r0, #24876	; 0x612c
   11bc4:	movt	r0, #2
   11bc8:	str	r4, [r0]
   11bcc:	pop	{r4, r5, fp, pc}
   11bd0:	movw	r0, #24856	; 0x6118
   11bd4:	mov	r1, #55	; 0x37
   11bd8:	mov	r2, #1
   11bdc:	movt	r0, #2
   11be0:	ldr	r3, [r0]
   11be4:	movw	r0, #21314	; 0x5342
   11be8:	movt	r0, #1
   11bec:	bl	10c9c <fwrite@plt>
   11bf0:	bl	10df8 <abort@plt>
   11bf4:	push	{r4, r5, r6, sl, fp, lr}
   11bf8:	add	fp, sp, #16
   11bfc:	mov	r4, r0
   11c00:	movw	r0, #24880	; 0x6130
   11c04:	movt	r0, #2
   11c08:	cmp	r4, #0
   11c0c:	moveq	r4, r0
   11c10:	bl	10d50 <__errno_location@plt>
   11c14:	ldr	r6, [r0]
   11c18:	mov	r5, r0
   11c1c:	mov	r0, r4
   11c20:	mov	r1, #48	; 0x30
   11c24:	bl	1462c <__assert_fail@plt+0x3828>
   11c28:	str	r6, [r5]
   11c2c:	pop	{r4, r5, r6, sl, fp, pc}
   11c30:	movw	r1, #24880	; 0x6130
   11c34:	cmp	r0, #0
   11c38:	movt	r1, #2
   11c3c:	movne	r1, r0
   11c40:	ldr	r0, [r1]
   11c44:	bx	lr
   11c48:	movw	r2, #24880	; 0x6130
   11c4c:	cmp	r0, #0
   11c50:	movt	r2, #2
   11c54:	movne	r2, r0
   11c58:	str	r1, [r2]
   11c5c:	bx	lr
   11c60:	movw	r3, #24880	; 0x6130
   11c64:	cmp	r0, #0
   11c68:	and	r2, r2, #1
   11c6c:	movt	r3, #2
   11c70:	movne	r3, r0
   11c74:	ubfx	r0, r1, #5, #3
   11c78:	and	r1, r1, #31
   11c7c:	add	ip, r3, r0, lsl #2
   11c80:	mov	r0, #1
   11c84:	ldr	r3, [ip, #8]
   11c88:	and	r0, r0, r3, lsr r1
   11c8c:	eor	r2, r0, r2
   11c90:	eor	r1, r3, r2, lsl r1
   11c94:	str	r1, [ip, #8]
   11c98:	bx	lr
   11c9c:	movw	r2, #24880	; 0x6130
   11ca0:	cmp	r0, #0
   11ca4:	movt	r2, #2
   11ca8:	movne	r2, r0
   11cac:	ldr	r0, [r2, #4]
   11cb0:	str	r1, [r2, #4]
   11cb4:	bx	lr
   11cb8:	push	{fp, lr}
   11cbc:	mov	fp, sp
   11cc0:	movw	r3, #24880	; 0x6130
   11cc4:	cmp	r0, #0
   11cc8:	movt	r3, #2
   11ccc:	movne	r3, r0
   11cd0:	cmp	r1, #0
   11cd4:	mov	r0, #10
   11cd8:	cmpne	r2, #0
   11cdc:	str	r0, [r3]
   11ce0:	bne	11ce8 <__assert_fail@plt+0xee4>
   11ce4:	bl	10df8 <abort@plt>
   11ce8:	str	r1, [r3, #40]	; 0x28
   11cec:	str	r2, [r3, #44]	; 0x2c
   11cf0:	pop	{fp, pc}
   11cf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cf8:	add	fp, sp, #28
   11cfc:	sub	sp, sp, #20
   11d00:	mov	r7, r0
   11d04:	ldr	r0, [fp, #8]
   11d08:	movw	r5, #24880	; 0x6130
   11d0c:	mov	r8, r3
   11d10:	mov	r9, r2
   11d14:	mov	sl, r1
   11d18:	movt	r5, #2
   11d1c:	cmp	r0, #0
   11d20:	movne	r5, r0
   11d24:	bl	10d50 <__errno_location@plt>
   11d28:	ldr	r2, [r5, #40]	; 0x28
   11d2c:	ldr	r3, [r5, #44]	; 0x2c
   11d30:	mov	r4, r0
   11d34:	ldm	r5, {r0, r1}
   11d38:	add	r5, r5, #8
   11d3c:	ldr	r6, [r4]
   11d40:	stm	sp, {r0, r1, r5}
   11d44:	mov	r0, r7
   11d48:	mov	r1, sl
   11d4c:	str	r2, [sp, #12]
   11d50:	str	r3, [sp, #16]
   11d54:	mov	r2, r9
   11d58:	mov	r3, r8
   11d5c:	bl	11d6c <__assert_fail@plt+0xf68>
   11d60:	str	r6, [r4]
   11d64:	sub	sp, fp, #28
   11d68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d70:	add	fp, sp, #28
   11d74:	sub	sp, sp, #156	; 0x9c
   11d78:	str	r0, [fp, #-84]	; 0xffffffac
   11d7c:	add	r0, r2, #1
   11d80:	mov	r6, r1
   11d84:	mov	r7, r3
   11d88:	str	r2, [fp, #-80]	; 0xffffffb0
   11d8c:	str	r0, [sp, #80]	; 0x50
   11d90:	ldr	r0, [fp, #12]
   11d94:	and	r1, r0, #1
   11d98:	str	r1, [sp, #36]	; 0x24
   11d9c:	and	r1, r0, #4
   11da0:	str	r1, [sp, #32]
   11da4:	ubfx	r8, r0, #1, #1
   11da8:	bl	10cb4 <__ctype_get_mb_cur_max@plt>
   11dac:	str	r0, [sp, #40]	; 0x28
   11db0:	ldr	r0, [fp, #24]
   11db4:	ldr	r4, [fp, #8]
   11db8:	mov	r1, #0
   11dbc:	str	r1, [fp, #-52]	; 0xffffffcc
   11dc0:	mov	r1, #0
   11dc4:	str	r1, [sp, #60]	; 0x3c
   11dc8:	mov	r1, #1
   11dcc:	str	r1, [sp, #84]	; 0x54
   11dd0:	str	r0, [sp, #76]	; 0x4c
   11dd4:	ldr	r0, [fp, #20]
   11dd8:	str	r0, [sp, #72]	; 0x48
   11ddc:	mov	r0, #0
   11de0:	str	r0, [sp, #56]	; 0x38
   11de4:	mov	r0, #0
   11de8:	str	r0, [fp, #-88]	; 0xffffffa8
   11dec:	mov	r0, #0
   11df0:	str	r0, [fp, #-72]	; 0xffffffb8
   11df4:	mov	r0, #0
   11df8:	cmp	r4, #10
   11dfc:	bhi	13118 <__assert_fail@plt+0x2314>
   11e00:	add	r1, pc, #24
   11e04:	ldr	ip, [fp, #-84]	; 0xffffffac
   11e08:	ldr	lr, [fp, #-80]	; 0xffffffb0
   11e0c:	mov	r5, r6
   11e10:	mov	r9, #0
   11e14:	mov	r2, #1
   11e18:	mov	r3, #0
   11e1c:	ldr	pc, [r1, r4, lsl #2]
   11e20:	andeq	r1, r1, r8, ror #29
   11e24:	andeq	r1, r1, r4, lsr #30
   11e28:	strdeq	r1, [r1], -r8
   11e2c:	andeq	r1, r1, r0, ror #29
   11e30:	andeq	r1, r1, r8, lsl pc
   11e34:	andeq	r1, r1, ip, ror pc
   11e38:	andeq	r1, r1, r8, lsl #30
   11e3c:	strdeq	r2, [r1], -r4
   11e40:	andeq	r1, r1, ip, asr #28
   11e44:	andeq	r1, r1, ip, asr #28
   11e48:	andeq	r2, r1, r4, lsl #1
   11e4c:	movw	r6, #21460	; 0x53d4
   11e50:	mov	r0, #0
   11e54:	mov	r2, #5
   11e58:	movt	r6, #1
   11e5c:	mov	r1, r6
   11e60:	bl	10c6c <dcgettext@plt>
   11e64:	cmp	r0, r6
   11e68:	str	r0, [sp, #72]	; 0x48
   11e6c:	bne	1205c <__assert_fail@plt+0x1258>
   11e70:	bl	14a70 <__assert_fail@plt+0x3c6c>
   11e74:	ldrb	r1, [r0]
   11e78:	and	r1, r1, #223	; 0xdf
   11e7c:	cmp	r1, #71	; 0x47
   11e80:	beq	11fdc <__assert_fail@plt+0x11d8>
   11e84:	cmp	r1, #85	; 0x55
   11e88:	bne	12040 <__assert_fail@plt+0x123c>
   11e8c:	ldrb	r1, [r0, #1]
   11e90:	and	r1, r1, #223	; 0xdf
   11e94:	cmp	r1, #84	; 0x54
   11e98:	bne	12040 <__assert_fail@plt+0x123c>
   11e9c:	ldrb	r1, [r0, #2]
   11ea0:	and	r1, r1, #223	; 0xdf
   11ea4:	cmp	r1, #70	; 0x46
   11ea8:	bne	12040 <__assert_fail@plt+0x123c>
   11eac:	ldrb	r1, [r0, #3]
   11eb0:	cmp	r1, #45	; 0x2d
   11eb4:	bne	12040 <__assert_fail@plt+0x123c>
   11eb8:	ldrb	r1, [r0, #4]
   11ebc:	cmp	r1, #56	; 0x38
   11ec0:	bne	12040 <__assert_fail@plt+0x123c>
   11ec4:	ldrb	r0, [r0, #5]
   11ec8:	cmp	r0, #0
   11ecc:	movw	r0, #21464	; 0x53d8
   11ed0:	movt	r0, #1
   11ed4:	str	r0, [sp, #72]	; 0x48
   11ed8:	bne	12040 <__assert_fail@plt+0x123c>
   11edc:	b	1205c <__assert_fail@plt+0x1258>
   11ee0:	mov	r0, #1
   11ee4:	b	11f24 <__assert_fail@plt+0x1120>
   11ee8:	mov	r4, #0
   11eec:	mov	r9, #0
   11ef0:	mov	r2, r0
   11ef4:	b	11f74 <__assert_fail@plt+0x1170>
   11ef8:	tst	r8, #1
   11efc:	bne	11f24 <__assert_fail@plt+0x1120>
   11f00:	mov	r2, r0
   11f04:	b	11f4c <__assert_fail@plt+0x1148>
   11f08:	mov	r0, #1
   11f0c:	mov	r9, #0
   11f10:	mov	r4, #5
   11f14:	b	11f90 <__assert_fail@plt+0x118c>
   11f18:	mov	r2, #1
   11f1c:	tst	r8, #1
   11f20:	beq	11f4c <__assert_fail@plt+0x1148>
   11f24:	mov	r1, #1
   11f28:	mov	r9, #0
   11f2c:	mov	r4, #2
   11f30:	mov	r2, r0
   11f34:	mov	r3, #1
   11f38:	str	r1, [fp, #-72]	; 0xffffffb8
   11f3c:	movw	r1, #21462	; 0x53d6
   11f40:	movt	r1, #1
   11f44:	str	r1, [fp, #-88]	; 0xffffffa8
   11f48:	b	121f4 <__assert_fail@plt+0x13f0>
   11f4c:	cmp	r5, #0
   11f50:	mov	r9, #1
   11f54:	mov	r4, #2
   11f58:	movne	r0, #39	; 0x27
   11f5c:	strbne	r0, [ip]
   11f60:	movw	r0, #21462	; 0x53d6
   11f64:	movt	r0, #1
   11f68:	str	r0, [fp, #-88]	; 0xffffffa8
   11f6c:	mov	r0, #1
   11f70:	str	r0, [fp, #-72]	; 0xffffffb8
   11f74:	mov	r3, #0
   11f78:	b	121f4 <__assert_fail@plt+0x13f0>
   11f7c:	mov	r4, #5
   11f80:	tst	r8, #1
   11f84:	beq	11fac <__assert_fail@plt+0x11a8>
   11f88:	mov	r0, #1
   11f8c:	mov	r9, #0
   11f90:	str	r0, [fp, #-72]	; 0xffffffb8
   11f94:	movw	r0, #21458	; 0x53d2
   11f98:	mov	r2, #1
   11f9c:	mov	r3, #1
   11fa0:	movt	r0, #1
   11fa4:	str	r0, [fp, #-88]	; 0xffffffa8
   11fa8:	b	121f4 <__assert_fail@plt+0x13f0>
   11fac:	cmp	r5, #0
   11fb0:	mov	r3, #0
   11fb4:	mov	r9, #1
   11fb8:	mov	r2, #1
   11fbc:	movne	r0, #34	; 0x22
   11fc0:	strbne	r0, [ip]
   11fc4:	movw	r0, #21458	; 0x53d2
   11fc8:	movt	r0, #1
   11fcc:	str	r0, [fp, #-88]	; 0xffffffa8
   11fd0:	mov	r0, #1
   11fd4:	str	r0, [fp, #-72]	; 0xffffffb8
   11fd8:	b	121f4 <__assert_fail@plt+0x13f0>
   11fdc:	ldrb	r1, [r0, #1]
   11fe0:	and	r1, r1, #223	; 0xdf
   11fe4:	cmp	r1, #66	; 0x42
   11fe8:	bne	12040 <__assert_fail@plt+0x123c>
   11fec:	ldrb	r1, [r0, #2]
   11ff0:	cmp	r1, #49	; 0x31
   11ff4:	bne	12040 <__assert_fail@plt+0x123c>
   11ff8:	ldrb	r1, [r0, #3]
   11ffc:	cmp	r1, #56	; 0x38
   12000:	bne	12040 <__assert_fail@plt+0x123c>
   12004:	ldrb	r1, [r0, #4]
   12008:	cmp	r1, #48	; 0x30
   1200c:	bne	12040 <__assert_fail@plt+0x123c>
   12010:	ldrb	r1, [r0, #5]
   12014:	cmp	r1, #51	; 0x33
   12018:	bne	12040 <__assert_fail@plt+0x123c>
   1201c:	ldrb	r1, [r0, #6]
   12020:	cmp	r1, #48	; 0x30
   12024:	bne	12040 <__assert_fail@plt+0x123c>
   12028:	ldrb	r0, [r0, #7]
   1202c:	cmp	r0, #0
   12030:	movw	r0, #21472	; 0x53e0
   12034:	movt	r0, #1
   12038:	str	r0, [sp, #72]	; 0x48
   1203c:	beq	1205c <__assert_fail@plt+0x1258>
   12040:	movw	r1, #21458	; 0x53d2
   12044:	movw	r0, #21462	; 0x53d6
   12048:	cmp	r4, #9
   1204c:	movt	r1, #1
   12050:	movt	r0, #1
   12054:	moveq	r0, r1
   12058:	str	r0, [sp, #72]	; 0x48
   1205c:	movw	r6, #21462	; 0x53d6
   12060:	mov	r0, #0
   12064:	mov	r2, #5
   12068:	movt	r6, #1
   1206c:	mov	r1, r6
   12070:	bl	10c6c <dcgettext@plt>
   12074:	cmp	r0, r6
   12078:	str	r0, [sp, #76]	; 0x4c
   1207c:	beq	120c8 <__assert_fail@plt+0x12c4>
   12080:	ldr	ip, [fp, #-84]	; 0xffffffac
   12084:	mov	r9, #0
   12088:	tst	r8, #1
   1208c:	bne	121d0 <__assert_fail@plt+0x13cc>
   12090:	ldr	r0, [sp, #72]	; 0x48
   12094:	ldrb	r0, [r0]
   12098:	cmp	r0, #0
   1209c:	beq	121d0 <__assert_fail@plt+0x13cc>
   120a0:	ldr	r1, [sp, #72]	; 0x48
   120a4:	mov	r9, #0
   120a8:	add	r1, r1, #1
   120ac:	cmp	r9, r5
   120b0:	strbcc	r0, [ip, r9]
   120b4:	ldrb	r0, [r1, r9]
   120b8:	add	r9, r9, #1
   120bc:	cmp	r0, #0
   120c0:	bne	120ac <__assert_fail@plt+0x12a8>
   120c4:	b	121d0 <__assert_fail@plt+0x13cc>
   120c8:	bl	14a70 <__assert_fail@plt+0x3c6c>
   120cc:	ldrb	r1, [r0]
   120d0:	and	r1, r1, #223	; 0xdf
   120d4:	cmp	r1, #71	; 0x47
   120d8:	beq	12148 <__assert_fail@plt+0x1344>
   120dc:	ldr	ip, [fp, #-84]	; 0xffffffac
   120e0:	cmp	r1, #85	; 0x55
   120e4:	bne	121a4 <__assert_fail@plt+0x13a0>
   120e8:	ldrb	r1, [r0, #1]
   120ec:	and	r1, r1, #223	; 0xdf
   120f0:	cmp	r1, #84	; 0x54
   120f4:	bne	121a4 <__assert_fail@plt+0x13a0>
   120f8:	ldrb	r1, [r0, #2]
   120fc:	and	r1, r1, #223	; 0xdf
   12100:	cmp	r1, #70	; 0x46
   12104:	bne	121a4 <__assert_fail@plt+0x13a0>
   12108:	ldrb	r1, [r0, #3]
   1210c:	cmp	r1, #45	; 0x2d
   12110:	bne	121a4 <__assert_fail@plt+0x13a0>
   12114:	ldrb	r1, [r0, #4]
   12118:	cmp	r1, #56	; 0x38
   1211c:	bne	121a4 <__assert_fail@plt+0x13a0>
   12120:	ldrb	r0, [r0, #5]
   12124:	cmp	r0, #0
   12128:	bne	121a4 <__assert_fail@plt+0x13a0>
   1212c:	movw	r0, #21468	; 0x53dc
   12130:	movt	r0, #1
   12134:	str	r0, [sp, #76]	; 0x4c
   12138:	mov	r9, #0
   1213c:	tst	r8, #1
   12140:	beq	12090 <__assert_fail@plt+0x128c>
   12144:	b	121d0 <__assert_fail@plt+0x13cc>
   12148:	ldrb	r1, [r0, #1]
   1214c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12150:	and	r1, r1, #223	; 0xdf
   12154:	cmp	r1, #66	; 0x42
   12158:	bne	121a4 <__assert_fail@plt+0x13a0>
   1215c:	ldrb	r1, [r0, #2]
   12160:	cmp	r1, #49	; 0x31
   12164:	bne	121a4 <__assert_fail@plt+0x13a0>
   12168:	ldrb	r1, [r0, #3]
   1216c:	cmp	r1, #56	; 0x38
   12170:	bne	121a4 <__assert_fail@plt+0x13a0>
   12174:	ldrb	r1, [r0, #4]
   12178:	cmp	r1, #48	; 0x30
   1217c:	bne	121a4 <__assert_fail@plt+0x13a0>
   12180:	ldrb	r1, [r0, #5]
   12184:	cmp	r1, #51	; 0x33
   12188:	bne	121a4 <__assert_fail@plt+0x13a0>
   1218c:	ldrb	r1, [r0, #6]
   12190:	cmp	r1, #48	; 0x30
   12194:	bne	121a4 <__assert_fail@plt+0x13a0>
   12198:	ldrb	r0, [r0, #7]
   1219c:	cmp	r0, #0
   121a0:	beq	12fb8 <__assert_fail@plt+0x21b4>
   121a4:	movw	r0, #21462	; 0x53d6
   121a8:	cmp	r4, #9
   121ac:	movt	r0, #1
   121b0:	mov	r1, r0
   121b4:	movw	r0, #21458	; 0x53d2
   121b8:	movt	r0, #1
   121bc:	moveq	r1, r0
   121c0:	str	r1, [sp, #76]	; 0x4c
   121c4:	mov	r9, #0
   121c8:	tst	r8, #1
   121cc:	beq	12090 <__assert_fail@plt+0x128c>
   121d0:	ldr	r6, [sp, #76]	; 0x4c
   121d4:	mov	r0, r6
   121d8:	bl	10d44 <strlen@plt>
   121dc:	ldr	ip, [fp, #-84]	; 0xffffffac
   121e0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   121e4:	str	r0, [fp, #-72]	; 0xffffffb8
   121e8:	str	r6, [fp, #-88]	; 0xffffffa8
   121ec:	mov	r2, #1
   121f0:	mov	r3, r8
   121f4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   121f8:	str	r4, [fp, #-64]	; 0xffffffc0
   121fc:	mov	sl, #0
   12200:	str	r3, [fp, #-76]	; 0xffffffb4
   12204:	str	r2, [sp, #88]	; 0x58
   12208:	cmp	r0, #0
   1220c:	movwne	r0, #1
   12210:	and	r1, r0, r3
   12214:	and	r1, r2, r1
   12218:	str	r1, [sp, #48]	; 0x30
   1221c:	sub	r1, r4, #2
   12220:	clz	r1, r1
   12224:	lsr	r1, r1, #5
   12228:	and	r1, r1, r3
   1222c:	str	r1, [sp, #44]	; 0x2c
   12230:	subs	r1, r4, #2
   12234:	eor	r4, r3, #1
   12238:	movwne	r1, #1
   1223c:	str	r4, [sp, #92]	; 0x5c
   12240:	orr	r4, r1, r4
   12244:	and	r1, r1, r2
   12248:	and	r0, r0, r1
   1224c:	str	r4, [sp, #64]	; 0x40
   12250:	ldr	r4, [sp, #84]	; 0x54
   12254:	str	r0, [fp, #-60]	; 0xffffffc4
   12258:	orr	r0, r1, r3
   1225c:	ldr	r1, [fp, #16]
   12260:	eor	r0, r0, #1
   12264:	clz	r1, r1
   12268:	lsr	r1, r1, #5
   1226c:	orr	r0, r1, r0
   12270:	str	r0, [fp, #-68]	; 0xffffffbc
   12274:	eor	r0, r2, #1
   12278:	str	r0, [sp, #52]	; 0x34
   1227c:	cmn	r7, #1
   12280:	beq	12290 <__assert_fail@plt+0x148c>
   12284:	cmp	sl, r7
   12288:	bne	1229c <__assert_fail@plt+0x1498>
   1228c:	b	12f30 <__assert_fail@plt+0x212c>
   12290:	ldrb	r0, [lr, sl]
   12294:	cmp	r0, #0
   12298:	beq	12f38 <__assert_fail@plt+0x2134>
   1229c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   122a0:	cmp	r0, #0
   122a4:	beq	12304 <__assert_fail@plt+0x1500>
   122a8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   122ac:	mov	r6, r5
   122b0:	add	r5, sl, r0
   122b4:	cmp	r0, #2
   122b8:	bcc	12324 <__assert_fail@plt+0x1520>
   122bc:	mov	r0, #0
   122c0:	cmn	r7, #1
   122c4:	str	r0, [fp, #-56]	; 0xffffffc8
   122c8:	bne	122e0 <__assert_fail@plt+0x14dc>
   122cc:	mov	r0, lr
   122d0:	bl	10d44 <strlen@plt>
   122d4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   122d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   122dc:	mov	r7, r0
   122e0:	cmp	r5, r7
   122e4:	bls	12334 <__assert_fail@plt+0x1530>
   122e8:	mov	r0, #0
   122ec:	mov	r5, r6
   122f0:	str	r0, [fp, #-48]	; 0xffffffd0
   122f4:	ldrb	r6, [lr, sl]
   122f8:	cmp	r6, #126	; 0x7e
   122fc:	bls	12384 <__assert_fail@plt+0x1580>
   12300:	b	128e0 <__assert_fail@plt+0x1adc>
   12304:	mov	r0, #0
   12308:	str	r0, [fp, #-56]	; 0xffffffc8
   1230c:	mov	r0, #0
   12310:	str	r0, [fp, #-48]	; 0xffffffd0
   12314:	ldrb	r6, [lr, sl]
   12318:	cmp	r6, #126	; 0x7e
   1231c:	bls	12384 <__assert_fail@plt+0x1580>
   12320:	b	128e0 <__assert_fail@plt+0x1adc>
   12324:	mov	r0, #0
   12328:	str	r0, [fp, #-56]	; 0xffffffc8
   1232c:	cmp	r5, r7
   12330:	bhi	122e8 <__assert_fail@plt+0x14e4>
   12334:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12338:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1233c:	add	r0, lr, sl
   12340:	bl	10d38 <bcmp@plt>
   12344:	ldr	r2, [sp, #92]	; 0x5c
   12348:	cmp	r0, #0
   1234c:	mov	r1, r0
   12350:	mov	r5, r6
   12354:	movwne	r1, #1
   12358:	orr	r1, r1, r2
   1235c:	tst	r1, #1
   12360:	beq	12ff8 <__assert_fail@plt+0x21f4>
   12364:	ldr	ip, [fp, #-84]	; 0xffffffac
   12368:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1236c:	clz	r0, r0
   12370:	lsr	r0, r0, #5
   12374:	str	r0, [fp, #-48]	; 0xffffffd0
   12378:	ldrb	r6, [lr, sl]
   1237c:	cmp	r6, #126	; 0x7e
   12380:	bhi	128e0 <__assert_fail@plt+0x1adc>
   12384:	add	r3, pc, #16
   12388:	mov	r8, #1
   1238c:	mov	r2, #110	; 0x6e
   12390:	mov	r0, #97	; 0x61
   12394:	mov	r1, #0
   12398:	ldr	pc, [r3, r6, lsl #2]
   1239c:	muleq	r1, r8, r6
   123a0:	andeq	r2, r1, r0, ror #17
   123a4:	andeq	r2, r1, r0, ror #17
   123a8:	andeq	r2, r1, r0, ror #17
   123ac:	andeq	r2, r1, r0, ror #17
   123b0:	andeq	r2, r1, r0, ror #17
   123b4:	andeq	r2, r1, r0, ror #17
   123b8:	muleq	r1, r4, r9
   123bc:	andeq	r2, r1, r8, ror r6
   123c0:	andeq	r2, r1, r0, ror r6
   123c4:	andeq	r2, r1, r4, lsl #13
   123c8:			; <UNDEFINED> instruction: 0x000127b4
   123cc:	andeq	r2, r1, r8, ror #12
   123d0:	andeq	r2, r1, r0, lsl #13
   123d4:	andeq	r2, r1, r0, ror #17
   123d8:	andeq	r2, r1, r0, ror #17
   123dc:	andeq	r2, r1, r0, ror #17
   123e0:	andeq	r2, r1, r0, ror #17
   123e4:	andeq	r2, r1, r0, ror #17
   123e8:	andeq	r2, r1, r0, ror #17
   123ec:	andeq	r2, r1, r0, ror #17
   123f0:	andeq	r2, r1, r0, ror #17
   123f4:	andeq	r2, r1, r0, ror #17
   123f8:	andeq	r2, r1, r0, ror #17
   123fc:	andeq	r2, r1, r0, ror #17
   12400:	andeq	r2, r1, r0, ror #17
   12404:	andeq	r2, r1, r0, ror #17
   12408:	andeq	r2, r1, r0, ror #17
   1240c:	andeq	r2, r1, r0, ror #17
   12410:	andeq	r2, r1, r0, ror #17
   12414:	andeq	r2, r1, r0, ror #17
   12418:	andeq	r2, r1, r0, ror #17
   1241c:	andeq	r2, r1, ip, lsl #12
   12420:	andeq	r2, r1, r0, lsl r6
   12424:	andeq	r2, r1, r0, lsl r6
   12428:	andeq	r2, r1, r0, lsl #12
   1242c:	andeq	r2, r1, r0, lsl r6
   12430:	muleq	r1, r8, r5
   12434:	andeq	r2, r1, r0, lsl r6
   12438:			; <UNDEFINED> instruction: 0x000127bc
   1243c:	andeq	r2, r1, r0, lsl r6
   12440:	andeq	r2, r1, r0, lsl r6
   12444:	andeq	r2, r1, r0, lsl r6
   12448:	muleq	r1, r8, r5
   1244c:	muleq	r1, r8, r5
   12450:	muleq	r1, r8, r5
   12454:	muleq	r1, r8, r5
   12458:	muleq	r1, r8, r5
   1245c:	muleq	r1, r8, r5
   12460:	muleq	r1, r8, r5
   12464:	muleq	r1, r8, r5
   12468:	muleq	r1, r8, r5
   1246c:	muleq	r1, r8, r5
   12470:	muleq	r1, r8, r5
   12474:	muleq	r1, r8, r5
   12478:	muleq	r1, r8, r5
   1247c:	muleq	r1, r8, r5
   12480:	muleq	r1, r8, r5
   12484:	muleq	r1, r8, r5
   12488:	andeq	r2, r1, r0, lsl r6
   1248c:	andeq	r2, r1, r0, lsl r6
   12490:	andeq	r2, r1, r0, lsl r6
   12494:	andeq	r2, r1, r0, lsl r6
   12498:	andeq	r2, r1, r0, lsl #15
   1249c:	andeq	r2, r1, r0, ror #17
   124a0:	muleq	r1, r8, r5
   124a4:	muleq	r1, r8, r5
   124a8:	muleq	r1, r8, r5
   124ac:	muleq	r1, r8, r5
   124b0:	muleq	r1, r8, r5
   124b4:	muleq	r1, r8, r5
   124b8:	muleq	r1, r8, r5
   124bc:	muleq	r1, r8, r5
   124c0:	muleq	r1, r8, r5
   124c4:	muleq	r1, r8, r5
   124c8:	muleq	r1, r8, r5
   124cc:	muleq	r1, r8, r5
   124d0:	muleq	r1, r8, r5
   124d4:	muleq	r1, r8, r5
   124d8:	muleq	r1, r8, r5
   124dc:	muleq	r1, r8, r5
   124e0:	muleq	r1, r8, r5
   124e4:	muleq	r1, r8, r5
   124e8:	muleq	r1, r8, r5
   124ec:	muleq	r1, r8, r5
   124f0:	muleq	r1, r8, r5
   124f4:	muleq	r1, r8, r5
   124f8:	muleq	r1, r8, r5
   124fc:	muleq	r1, r8, r5
   12500:	muleq	r1, r8, r5
   12504:	muleq	r1, r8, r5
   12508:	andeq	r2, r1, r0, lsl r6
   1250c:	andeq	r2, r1, r4, asr #12
   12510:	muleq	r1, r8, r5
   12514:	andeq	r2, r1, r0, lsl r6
   12518:	muleq	r1, r8, r5
   1251c:	andeq	r2, r1, r0, lsl r6
   12520:	muleq	r1, r8, r5
   12524:	muleq	r1, r8, r5
   12528:	muleq	r1, r8, r5
   1252c:	muleq	r1, r8, r5
   12530:	muleq	r1, r8, r5
   12534:	muleq	r1, r8, r5
   12538:	muleq	r1, r8, r5
   1253c:	muleq	r1, r8, r5
   12540:	muleq	r1, r8, r5
   12544:	muleq	r1, r8, r5
   12548:	muleq	r1, r8, r5
   1254c:	muleq	r1, r8, r5
   12550:	muleq	r1, r8, r5
   12554:	muleq	r1, r8, r5
   12558:	muleq	r1, r8, r5
   1255c:	muleq	r1, r8, r5
   12560:	muleq	r1, r8, r5
   12564:	muleq	r1, r8, r5
   12568:	muleq	r1, r8, r5
   1256c:	muleq	r1, r8, r5
   12570:	muleq	r1, r8, r5
   12574:	muleq	r1, r8, r5
   12578:	muleq	r1, r8, r5
   1257c:	muleq	r1, r8, r5
   12580:	muleq	r1, r8, r5
   12584:	muleq	r1, r8, r5
   12588:	ldrdeq	r2, [r1], -r8
   1258c:	andeq	r2, r1, r0, lsl r6
   12590:	ldrdeq	r2, [r1], -r8
   12594:	andeq	r2, r1, r0, lsl #12
   12598:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1259c:	tst	r0, #1
   125a0:	bne	12858 <__assert_fail@plt+0x1a54>
   125a4:	ldr	r1, [fp, #16]
   125a8:	ubfx	r0, r6, #5, #3
   125ac:	mov	r2, #1
   125b0:	ldr	r0, [r1, r0, lsl #2]
   125b4:	and	r1, r6, #31
   125b8:	tst	r0, r2, lsl r1
   125bc:	beq	12858 <__assert_fail@plt+0x1a54>
   125c0:	mov	r0, r6
   125c4:	mov	r1, r8
   125c8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   125cc:	tst	r2, #1
   125d0:	beq	12878 <__assert_fail@plt+0x1a74>
   125d4:	b	12fd4 <__assert_fail@plt+0x21d0>
   125d8:	cmp	r7, #1
   125dc:	beq	12600 <__assert_fail@plt+0x17fc>
   125e0:	mov	r8, #0
   125e4:	cmn	r7, #1
   125e8:	bne	12844 <__assert_fail@plt+0x1a40>
   125ec:	ldrb	r0, [lr, #1]
   125f0:	cmp	r0, #0
   125f4:	beq	12600 <__assert_fail@plt+0x17fc>
   125f8:	mvn	r7, #0
   125fc:	b	12844 <__assert_fail@plt+0x1a40>
   12600:	mov	r8, #0
   12604:	cmp	sl, #0
   12608:	bne	12844 <__assert_fail@plt+0x1a40>
   1260c:	mov	r1, #1
   12610:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12614:	cmp	r0, #2
   12618:	bne	12630 <__assert_fail@plt+0x182c>
   1261c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12620:	mov	r8, r1
   12624:	tst	r0, #1
   12628:	beq	12598 <__assert_fail@plt+0x1794>
   1262c:	b	12fd4 <__assert_fail@plt+0x21d0>
   12630:	mov	r8, r1
   12634:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12638:	tst	r0, #1
   1263c:	beq	125a4 <__assert_fail@plt+0x17a0>
   12640:	b	12858 <__assert_fail@plt+0x1a54>
   12644:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12648:	cmp	r0, #2
   1264c:	bne	1290c <__assert_fail@plt+0x1b08>
   12650:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12654:	tst	r0, #1
   12658:	bne	12fd4 <__assert_fail@plt+0x21d0>
   1265c:	mov	r0, #0
   12660:	str	r0, [fp, #-56]	; 0xffffffc8
   12664:	b	12924 <__assert_fail@plt+0x1b20>
   12668:	mov	r0, #102	; 0x66
   1266c:	b	12994 <__assert_fail@plt+0x1b90>
   12670:	mov	r2, #116	; 0x74
   12674:	b	12684 <__assert_fail@plt+0x1880>
   12678:	mov	r0, #98	; 0x62
   1267c:	b	12994 <__assert_fail@plt+0x1b90>
   12680:	mov	r2, #114	; 0x72
   12684:	ldr	r0, [sp, #64]	; 0x40
   12688:	tst	r0, #1
   1268c:	mov	r0, r2
   12690:	bne	12994 <__assert_fail@plt+0x1b90>
   12694:	b	12fd4 <__assert_fail@plt+0x21d0>
   12698:	ldr	r0, [sp, #88]	; 0x58
   1269c:	tst	r0, #1
   126a0:	beq	129b4 <__assert_fail@plt+0x1bb0>
   126a4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   126a8:	tst	r0, #1
   126ac:	bne	13110 <__assert_fail@plt+0x230c>
   126b0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   126b4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   126b8:	subs	r0, r0, #2
   126bc:	movwne	r0, #1
   126c0:	orr	r0, r0, r1
   126c4:	tst	r0, #1
   126c8:	bne	12704 <__assert_fail@plt+0x1900>
   126cc:	cmp	r9, r5
   126d0:	movcc	r0, #39	; 0x27
   126d4:	strbcc	r0, [ip, r9]
   126d8:	add	r0, r9, #1
   126dc:	cmp	r0, r5
   126e0:	movcc	r1, #36	; 0x24
   126e4:	strbcc	r1, [ip, r0]
   126e8:	add	r0, r9, #2
   126ec:	add	r9, r9, #3
   126f0:	cmp	r0, r5
   126f4:	movcc	r1, #39	; 0x27
   126f8:	strbcc	r1, [ip, r0]
   126fc:	mov	r0, #1
   12700:	str	r0, [fp, #-52]	; 0xffffffcc
   12704:	mov	r1, #1
   12708:	cmp	r9, r5
   1270c:	mov	r8, #0
   12710:	mov	r6, #48	; 0x30
   12714:	str	r1, [fp, #-56]	; 0xffffffc8
   12718:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1271c:	movcc	r0, #92	; 0x5c
   12720:	strbcc	r0, [ip, r9]
   12724:	add	r0, r9, #1
   12728:	cmp	r1, #2
   1272c:	beq	12b80 <__assert_fail@plt+0x1d7c>
   12730:	add	r1, sl, #1
   12734:	cmp	r1, r7
   12738:	bcs	12b80 <__assert_fail@plt+0x1d7c>
   1273c:	ldrb	r1, [lr, r1]
   12740:	sub	r1, r1, #48	; 0x30
   12744:	uxtb	r1, r1
   12748:	cmp	r1, #9
   1274c:	bhi	12b80 <__assert_fail@plt+0x1d7c>
   12750:	cmp	r0, r5
   12754:	movcc	r1, #48	; 0x30
   12758:	strbcc	r1, [ip, r0]
   1275c:	add	r0, r9, #2
   12760:	add	r9, r9, #3
   12764:	cmp	r0, r5
   12768:	movcc	r1, #48	; 0x30
   1276c:	strbcc	r1, [ip, r0]
   12770:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12774:	tst	r0, #1
   12778:	beq	125a4 <__assert_fail@plt+0x17a0>
   1277c:	b	12858 <__assert_fail@plt+0x1a54>
   12780:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12784:	mov	r6, #63	; 0x3f
   12788:	cmp	r0, #5
   1278c:	beq	12b94 <__assert_fail@plt+0x1d90>
   12790:	mov	r1, #0
   12794:	cmp	r0, #2
   12798:	str	r1, [fp, #-56]	; 0xffffffc8
   1279c:	bne	12c5c <__assert_fail@plt+0x1e58>
   127a0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   127a4:	mov	r8, #0
   127a8:	tst	r0, #1
   127ac:	beq	12598 <__assert_fail@plt+0x1794>
   127b0:	b	12fd4 <__assert_fail@plt+0x21d0>
   127b4:	mov	r0, #118	; 0x76
   127b8:	b	12994 <__assert_fail@plt+0x1b90>
   127bc:	mov	r0, #1
   127c0:	mov	r6, #39	; 0x27
   127c4:	str	r0, [sp, #60]	; 0x3c
   127c8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   127cc:	cmp	r0, #2
   127d0:	bne	129d4 <__assert_fail@plt+0x1bd0>
   127d4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   127d8:	tst	r0, #1
   127dc:	bne	12fd4 <__assert_fail@plt+0x21d0>
   127e0:	ldr	r2, [sp, #56]	; 0x38
   127e4:	clz	r1, r5
   127e8:	mov	r8, #1
   127ec:	lsr	r1, r1, #5
   127f0:	cmp	r2, #0
   127f4:	mov	r0, r2
   127f8:	movwne	r0, #1
   127fc:	orrs	r0, r0, r1
   12800:	moveq	r2, r5
   12804:	moveq	r5, r0
   12808:	cmp	r9, r5
   1280c:	str	r2, [sp, #56]	; 0x38
   12810:	movcc	r0, #39	; 0x27
   12814:	strbcc	r0, [ip, r9]
   12818:	add	r0, r9, #1
   1281c:	cmp	r0, r5
   12820:	movcc	r1, #92	; 0x5c
   12824:	strbcc	r1, [ip, r0]
   12828:	add	r0, r9, #2
   1282c:	add	r9, r9, #3
   12830:	cmp	r0, r5
   12834:	movcc	r1, #39	; 0x27
   12838:	strbcc	r1, [ip, r0]
   1283c:	mov	r0, #0
   12840:	str	r0, [fp, #-52]	; 0xffffffcc
   12844:	mov	r0, #0
   12848:	str	r0, [fp, #-56]	; 0xffffffc8
   1284c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12850:	tst	r0, #1
   12854:	beq	125a4 <__assert_fail@plt+0x17a0>
   12858:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1285c:	mov	r1, r8
   12860:	cmp	r0, #0
   12864:	mov	r0, r6
   12868:	beq	1292c <__assert_fail@plt+0x1b28>
   1286c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12870:	tst	r2, #1
   12874:	bne	12fd4 <__assert_fail@plt+0x21d0>
   12878:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1287c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12880:	subs	r2, r2, #2
   12884:	movwne	r2, #1
   12888:	orr	r2, r2, r3
   1288c:	tst	r2, #1
   12890:	bne	128cc <__assert_fail@plt+0x1ac8>
   12894:	cmp	r9, r5
   12898:	movcc	r2, #39	; 0x27
   1289c:	strbcc	r2, [ip, r9]
   128a0:	add	r2, r9, #1
   128a4:	cmp	r2, r5
   128a8:	movcc	r3, #36	; 0x24
   128ac:	strbcc	r3, [ip, r2]
   128b0:	add	r2, r9, #2
   128b4:	add	r9, r9, #3
   128b8:	cmp	r2, r5
   128bc:	movcc	r3, #39	; 0x27
   128c0:	strbcc	r3, [ip, r2]
   128c4:	mov	r2, #1
   128c8:	str	r2, [fp, #-52]	; 0xffffffcc
   128cc:	cmp	r9, r5
   128d0:	movcc	r2, #92	; 0x5c
   128d4:	strbcc	r2, [ip, r9]
   128d8:	add	r9, r9, #1
   128dc:	b	12974 <__assert_fail@plt+0x1b70>
   128e0:	ldr	r0, [sp, #40]	; 0x28
   128e4:	cmp	r0, #1
   128e8:	bne	129e8 <__assert_fail@plt+0x1be4>
   128ec:	bl	10d20 <__ctype_b_loc@plt>
   128f0:	ldr	r0, [r0]
   128f4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   128f8:	mov	r1, #1
   128fc:	add	r0, r0, r6, lsl #1
   12900:	ldrb	r0, [r0, #1]
   12904:	ubfx	r8, r0, #6, #1
   12908:	b	12d40 <__assert_fail@plt+0x1f3c>
   1290c:	ldr	r1, [sp, #48]	; 0x30
   12910:	mov	r0, #0
   12914:	str	r0, [fp, #-56]	; 0xffffffc8
   12918:	mov	r0, #92	; 0x5c
   1291c:	cmp	r1, #0
   12920:	beq	12994 <__assert_fail@plt+0x1b90>
   12924:	mov	r6, #92	; 0x5c
   12928:	mov	r8, #0
   1292c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12930:	cmp	r0, #0
   12934:	bne	1296c <__assert_fail@plt+0x1b68>
   12938:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1293c:	tst	r0, #1
   12940:	beq	1296c <__assert_fail@plt+0x1b68>
   12944:	cmp	r9, r5
   12948:	movcc	r0, #39	; 0x27
   1294c:	strbcc	r0, [ip, r9]
   12950:	add	r0, r9, #1
   12954:	add	r9, r9, #2
   12958:	cmp	r0, r5
   1295c:	movcc	r1, #39	; 0x27
   12960:	strbcc	r1, [ip, r0]
   12964:	mov	r0, #0
   12968:	str	r0, [fp, #-52]	; 0xffffffcc
   1296c:	mov	r1, r8
   12970:	mov	r0, r6
   12974:	cmp	r9, r5
   12978:	and	r4, r4, r1
   1297c:	strbcc	r0, [ip, r9]
   12980:	add	r9, r9, #1
   12984:	add	sl, sl, #1
   12988:	cmn	r7, #1
   1298c:	bne	12284 <__assert_fail@plt+0x1480>
   12990:	b	12290 <__assert_fail@plt+0x148c>
   12994:	mov	r1, #0
   12998:	mov	r8, #0
   1299c:	str	r1, [fp, #-56]	; 0xffffffc8
   129a0:	ldr	r1, [sp, #88]	; 0x58
   129a4:	tst	r1, #1
   129a8:	mov	r1, #0
   129ac:	beq	12598 <__assert_fail@plt+0x1794>
   129b0:	b	1286c <__assert_fail@plt+0x1a68>
   129b4:	ldr	r0, [sp, #36]	; 0x24
   129b8:	mov	r6, #0
   129bc:	mov	r8, #0
   129c0:	cmp	r0, #0
   129c4:	mov	r0, #0
   129c8:	str	r0, [fp, #-56]	; 0xffffffc8
   129cc:	bne	12984 <__assert_fail@plt+0x1b80>
   129d0:	b	12598 <__assert_fail@plt+0x1794>
   129d4:	mov	r8, #1
   129d8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   129dc:	tst	r0, #1
   129e0:	beq	125a4 <__assert_fail@plt+0x17a0>
   129e4:	b	12858 <__assert_fail@plt+0x1a54>
   129e8:	mov	r0, #0
   129ec:	cmn	r7, #1
   129f0:	str	r0, [fp, #-36]	; 0xffffffdc
   129f4:	str	r0, [fp, #-40]	; 0xffffffd8
   129f8:	bne	12a0c <__assert_fail@plt+0x1c08>
   129fc:	mov	r0, lr
   12a00:	bl	10d44 <strlen@plt>
   12a04:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12a08:	mov	r7, r0
   12a0c:	ldr	r0, [sp, #44]	; 0x2c
   12a10:	str	r4, [sp, #84]	; 0x54
   12a14:	str	r5, [sp, #28]
   12a18:	cmp	r0, #0
   12a1c:	beq	12c70 <__assert_fail@plt+0x1e6c>
   12a20:	ldr	r0, [sp, #80]	; 0x50
   12a24:	mov	r8, #1
   12a28:	mov	r5, #0
   12a2c:	add	r0, r0, sl
   12a30:	str	r0, [sp, #24]
   12a34:	sub	r0, fp, #40	; 0x28
   12a38:	mov	r3, r0
   12a3c:	b	12a78 <__assert_fail@plt+0x1c74>
   12a40:	ldr	r5, [sp, #68]	; 0x44
   12a44:	add	r5, r0, r5
   12a48:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12a4c:	bl	10c90 <iswprint@plt>
   12a50:	cmp	r0, #0
   12a54:	sub	r4, fp, #40	; 0x28
   12a58:	movwne	r0, #1
   12a5c:	and	r8, r8, r0
   12a60:	mov	r0, r4
   12a64:	bl	10c60 <mbsinit@plt>
   12a68:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12a6c:	mov	r3, r4
   12a70:	cmp	r0, #0
   12a74:	bne	12d34 <__assert_fail@plt+0x1f30>
   12a78:	str	r5, [sp, #68]	; 0x44
   12a7c:	add	r5, r5, sl
   12a80:	sub	r0, fp, #44	; 0x2c
   12a84:	add	r1, lr, r5
   12a88:	sub	r2, r7, r5
   12a8c:	bl	14aa8 <__assert_fail@plt+0x3ca4>
   12a90:	cmn	r0, #2
   12a94:	beq	12cf4 <__assert_fail@plt+0x1ef0>
   12a98:	ldr	ip, [fp, #-84]	; 0xffffffac
   12a9c:	cmn	r0, #1
   12aa0:	beq	12ce8 <__assert_fail@plt+0x1ee4>
   12aa4:	cmp	r0, #0
   12aa8:	beq	12cec <__assert_fail@plt+0x1ee8>
   12aac:	cmp	r0, #2
   12ab0:	bcc	12a40 <__assert_fail@plt+0x1c3c>
   12ab4:	ldr	r1, [sp, #68]	; 0x44
   12ab8:	ldr	r2, [sp, #24]
   12abc:	add	r1, r2, r1
   12ac0:	sub	r2, r0, #1
   12ac4:	ldrb	r3, [r1]
   12ac8:	sub	r3, r3, #91	; 0x5b
   12acc:	cmp	r3, #33	; 0x21
   12ad0:	bls	12af0 <__assert_fail@plt+0x1cec>
   12ad4:	add	r1, r1, #1
   12ad8:	subs	r2, r2, #1
   12adc:	beq	12a40 <__assert_fail@plt+0x1c3c>
   12ae0:	ldrb	r3, [r1]
   12ae4:	sub	r3, r3, #91	; 0x5b
   12ae8:	cmp	r3, #33	; 0x21
   12aec:	bhi	12ad4 <__assert_fail@plt+0x1cd0>
   12af0:	add	r5, pc, #0
   12af4:	ldr	pc, [r5, r3, lsl #2]
   12af8:	andeq	r3, r1, ip
   12afc:	andeq	r3, r1, ip
   12b00:	ldrdeq	r2, [r1], -r4
   12b04:	andeq	r3, r1, ip
   12b08:	ldrdeq	r2, [r1], -r4
   12b0c:	andeq	r3, r1, ip
   12b10:	ldrdeq	r2, [r1], -r4
   12b14:	ldrdeq	r2, [r1], -r4
   12b18:	ldrdeq	r2, [r1], -r4
   12b1c:	ldrdeq	r2, [r1], -r4
   12b20:	ldrdeq	r2, [r1], -r4
   12b24:	ldrdeq	r2, [r1], -r4
   12b28:	ldrdeq	r2, [r1], -r4
   12b2c:	ldrdeq	r2, [r1], -r4
   12b30:	ldrdeq	r2, [r1], -r4
   12b34:	ldrdeq	r2, [r1], -r4
   12b38:	ldrdeq	r2, [r1], -r4
   12b3c:	ldrdeq	r2, [r1], -r4
   12b40:	ldrdeq	r2, [r1], -r4
   12b44:	ldrdeq	r2, [r1], -r4
   12b48:	ldrdeq	r2, [r1], -r4
   12b4c:	ldrdeq	r2, [r1], -r4
   12b50:	ldrdeq	r2, [r1], -r4
   12b54:	ldrdeq	r2, [r1], -r4
   12b58:	ldrdeq	r2, [r1], -r4
   12b5c:	ldrdeq	r2, [r1], -r4
   12b60:	ldrdeq	r2, [r1], -r4
   12b64:	ldrdeq	r2, [r1], -r4
   12b68:	ldrdeq	r2, [r1], -r4
   12b6c:	ldrdeq	r2, [r1], -r4
   12b70:	ldrdeq	r2, [r1], -r4
   12b74:	ldrdeq	r2, [r1], -r4
   12b78:	ldrdeq	r2, [r1], -r4
   12b7c:	andeq	r3, r1, ip
   12b80:	mov	r9, r0
   12b84:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12b88:	tst	r0, #1
   12b8c:	beq	125a4 <__assert_fail@plt+0x17a0>
   12b90:	b	12858 <__assert_fail@plt+0x1a54>
   12b94:	mov	r0, #0
   12b98:	str	r0, [fp, #-56]	; 0xffffffc8
   12b9c:	ldr	r0, [sp, #32]
   12ba0:	cmp	r0, #0
   12ba4:	beq	12c5c <__assert_fail@plt+0x1e58>
   12ba8:	add	r0, sl, #2
   12bac:	mov	r1, r7
   12bb0:	cmp	r0, r7
   12bb4:	bcs	12c5c <__assert_fail@plt+0x1e58>
   12bb8:	add	r1, sl, lr
   12bbc:	ldrb	r1, [r1, #1]
   12bc0:	cmp	r1, #63	; 0x3f
   12bc4:	bne	12c5c <__assert_fail@plt+0x1e58>
   12bc8:	ldrb	r8, [lr, r0]
   12bcc:	sub	r2, r8, #33	; 0x21
   12bd0:	cmp	r2, #29
   12bd4:	bhi	12c5c <__assert_fail@plt+0x1e58>
   12bd8:	mov	r1, r4
   12bdc:	movw	r4, #20929	; 0x51c1
   12be0:	mov	r3, #1
   12be4:	movt	r4, #14336	; 0x3800
   12be8:	tst	r4, r3, lsl r2
   12bec:	beq	12f18 <__assert_fail@plt+0x2114>
   12bf0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12bf4:	tst	r2, #1
   12bf8:	bne	12fd4 <__assert_fail@plt+0x21d0>
   12bfc:	cmp	r9, r5
   12c00:	mov	r6, r8
   12c04:	mov	r4, r1
   12c08:	mov	sl, r0
   12c0c:	mov	r8, #0
   12c10:	movcc	r2, #63	; 0x3f
   12c14:	strbcc	r2, [ip, r9]
   12c18:	add	r2, r9, #1
   12c1c:	cmp	r2, r5
   12c20:	movcc	r3, #34	; 0x22
   12c24:	strbcc	r3, [ip, r2]
   12c28:	add	r2, r9, #2
   12c2c:	cmp	r2, r5
   12c30:	movcc	r3, #34	; 0x22
   12c34:	strbcc	r3, [ip, r2]
   12c38:	add	r2, r9, #3
   12c3c:	add	r9, r9, #4
   12c40:	cmp	r2, r5
   12c44:	movcc	r3, #63	; 0x3f
   12c48:	strbcc	r3, [ip, r2]
   12c4c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12c50:	tst	r0, #1
   12c54:	beq	125a4 <__assert_fail@plt+0x17a0>
   12c58:	b	12858 <__assert_fail@plt+0x1a54>
   12c5c:	mov	r8, #0
   12c60:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12c64:	tst	r0, #1
   12c68:	beq	125a4 <__assert_fail@plt+0x17a0>
   12c6c:	b	12858 <__assert_fail@plt+0x1a54>
   12c70:	mov	r8, #1
   12c74:	mov	r5, #0
   12c78:	sub	r4, fp, #40	; 0x28
   12c7c:	str	r5, [sp, #68]	; 0x44
   12c80:	add	r5, r5, sl
   12c84:	sub	r0, fp, #44	; 0x2c
   12c88:	mov	r3, r4
   12c8c:	add	r1, lr, r5
   12c90:	sub	r2, r7, r5
   12c94:	bl	14aa8 <__assert_fail@plt+0x3ca4>
   12c98:	cmn	r0, #2
   12c9c:	beq	12cf4 <__assert_fail@plt+0x1ef0>
   12ca0:	cmn	r0, #1
   12ca4:	beq	12ce8 <__assert_fail@plt+0x1ee4>
   12ca8:	ldr	r5, [sp, #68]	; 0x44
   12cac:	cmp	r0, #0
   12cb0:	beq	12d30 <__assert_fail@plt+0x1f2c>
   12cb4:	add	r5, r0, r5
   12cb8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12cbc:	bl	10c90 <iswprint@plt>
   12cc0:	cmp	r0, #0
   12cc4:	sub	r4, fp, #40	; 0x28
   12cc8:	movwne	r0, #1
   12ccc:	and	r8, r8, r0
   12cd0:	mov	r0, r4
   12cd4:	bl	10c60 <mbsinit@plt>
   12cd8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12cdc:	cmp	r0, #0
   12ce0:	beq	12c7c <__assert_fail@plt+0x1e78>
   12ce4:	b	12d34 <__assert_fail@plt+0x1f30>
   12ce8:	mov	r8, #0
   12cec:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12cf0:	b	12d28 <__assert_fail@plt+0x1f24>
   12cf4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12cf8:	mov	r8, #0
   12cfc:	cmp	r5, r7
   12d00:	bcs	12d28 <__assert_fail@plt+0x1f24>
   12d04:	ldrb	r0, [lr, r5]
   12d08:	cmp	r0, #0
   12d0c:	beq	12d28 <__assert_fail@plt+0x1f24>
   12d10:	ldr	r0, [sp, #68]	; 0x44
   12d14:	add	r0, r0, #1
   12d18:	add	r5, r0, sl
   12d1c:	str	r0, [sp, #68]	; 0x44
   12d20:	cmp	r5, r7
   12d24:	bcc	12d04 <__assert_fail@plt+0x1f00>
   12d28:	ldr	r5, [sp, #68]	; 0x44
   12d2c:	b	12d34 <__assert_fail@plt+0x1f30>
   12d30:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12d34:	mov	r1, r5
   12d38:	ldr	r5, [sp, #28]
   12d3c:	ldr	r4, [sp, #84]	; 0x54
   12d40:	ldr	r0, [sp, #52]	; 0x34
   12d44:	ldr	ip, [fp, #-84]	; 0xffffffac
   12d48:	cmp	r1, #1
   12d4c:	orr	r2, r8, r0
   12d50:	mov	r0, r1
   12d54:	bhi	12d60 <__assert_fail@plt+0x1f5c>
   12d58:	tst	r2, #1
   12d5c:	bne	12598 <__assert_fail@plt+0x1794>
   12d60:	add	r0, r0, sl
   12d64:	str	r2, [sp, #84]	; 0x54
   12d68:	str	r0, [fp, #-56]	; 0xffffffc8
   12d6c:	mov	r0, #0
   12d70:	tst	r2, #1
   12d74:	bne	12e54 <__assert_fail@plt+0x2050>
   12d78:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12d7c:	tst	r1, #1
   12d80:	bne	12fd4 <__assert_fail@plt+0x21d0>
   12d84:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12d88:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12d8c:	subs	r2, r1, #2
   12d90:	movwne	r2, #1
   12d94:	orr	r2, r2, r0
   12d98:	tst	r2, #1
   12d9c:	bne	12dd8 <__assert_fail@plt+0x1fd4>
   12da0:	cmp	r9, r5
   12da4:	add	r2, r9, #1
   12da8:	mov	r0, #1
   12dac:	movcc	r1, #39	; 0x27
   12db0:	str	r0, [fp, #-52]	; 0xffffffcc
   12db4:	strbcc	r1, [ip, r9]
   12db8:	cmp	r2, r5
   12dbc:	movcc	r1, #36	; 0x24
   12dc0:	strbcc	r1, [ip, r2]
   12dc4:	add	r2, r9, #2
   12dc8:	add	r9, r9, #3
   12dcc:	cmp	r2, r5
   12dd0:	movcc	r1, #39	; 0x27
   12dd4:	strbcc	r1, [ip, r2]
   12dd8:	cmp	r9, r5
   12ddc:	add	r2, r9, #1
   12de0:	movcc	r1, #92	; 0x5c
   12de4:	strbcc	r1, [ip, r9]
   12de8:	cmp	r2, r5
   12dec:	bcs	12e00 <__assert_fail@plt+0x1ffc>
   12df0:	uxtb	r3, r6
   12df4:	mov	r1, #48	; 0x30
   12df8:	orr	r3, r1, r3, lsr #6
   12dfc:	strb	r3, [ip, r2]
   12e00:	add	r2, r9, #2
   12e04:	add	r9, r9, #3
   12e08:	cmp	r2, r5
   12e0c:	lsrcc	r3, r6, #3
   12e10:	movcc	r1, #6
   12e14:	bficc	r3, r1, #3, #29
   12e18:	mov	r1, #6
   12e1c:	bfi	r6, r1, #3, #29
   12e20:	strbcc	r3, [ip, r2]
   12e24:	mov	r2, #1
   12e28:	b	12e88 <__assert_fail@plt+0x2084>
   12e2c:	ldr	r1, [sp, #80]	; 0x50
   12e30:	cmp	r9, r2
   12e34:	mov	r5, r2
   12e38:	ldr	r2, [sp, #84]	; 0x54
   12e3c:	strbcc	r6, [ip, r9]
   12e40:	add	r9, r9, #1
   12e44:	ldrb	r6, [r1, sl]
   12e48:	mov	sl, r3
   12e4c:	tst	r2, #1
   12e50:	beq	12d78 <__assert_fail@plt+0x1f74>
   12e54:	ldr	r1, [fp, #-48]	; 0xffffffd0
   12e58:	tst	r1, #1
   12e5c:	beq	12e7c <__assert_fail@plt+0x2078>
   12e60:	cmp	r9, r5
   12e64:	mov	r2, r0
   12e68:	movcc	r1, #92	; 0x5c
   12e6c:	strbcc	r1, [ip, r9]
   12e70:	add	r9, r9, #1
   12e74:	mov	r1, #0
   12e78:	b	12e84 <__assert_fail@plt+0x2080>
   12e7c:	mov	r1, #0
   12e80:	mov	r2, r0
   12e84:	str	r1, [fp, #-48]	; 0xffffffd0
   12e88:	mov	r0, r2
   12e8c:	and	r1, r2, #1
   12e90:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12e94:	add	r3, sl, #1
   12e98:	cmp	r2, r3
   12e9c:	bls	12efc <__assert_fail@plt+0x20f8>
   12ea0:	mov	r2, r5
   12ea4:	ldr	r5, [fp, #-52]	; 0xffffffcc
   12ea8:	cmp	r1, #0
   12eac:	movwne	r1, #1
   12eb0:	mvn	r5, r5
   12eb4:	orr	r5, r5, r1
   12eb8:	tst	r5, #1
   12ebc:	bne	12e2c <__assert_fail@plt+0x2028>
   12ec0:	cmp	r9, r2
   12ec4:	movcc	r5, r4
   12ec8:	movcc	r4, #39	; 0x27
   12ecc:	strbcc	r4, [ip, r9]
   12ed0:	movcc	r4, r5
   12ed4:	add	r5, r9, #1
   12ed8:	add	r9, r9, #2
   12edc:	cmp	r5, r2
   12ee0:	movcc	r1, r4
   12ee4:	movcc	r4, #39	; 0x27
   12ee8:	strbcc	r4, [ip, r5]
   12eec:	movcc	r4, r1
   12ef0:	mov	r1, #0
   12ef4:	str	r1, [fp, #-52]	; 0xffffffcc
   12ef8:	b	12e2c <__assert_fail@plt+0x2028>
   12efc:	cmp	r1, #0
   12f00:	movwne	r1, #1
   12f04:	str	r1, [fp, #-56]	; 0xffffffc8
   12f08:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12f0c:	cmp	r0, #0
   12f10:	beq	12938 <__assert_fail@plt+0x1b34>
   12f14:	b	1296c <__assert_fail@plt+0x1b68>
   12f18:	mov	r8, #0
   12f1c:	mov	r4, r1
   12f20:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12f24:	tst	r0, #1
   12f28:	beq	125a4 <__assert_fail@plt+0x17a0>
   12f2c:	b	12858 <__assert_fail@plt+0x1a54>
   12f30:	mov	r7, sl
   12f34:	b	12f3c <__assert_fail@plt+0x2138>
   12f38:	mvn	r7, #0
   12f3c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12f40:	ldr	r3, [fp, #-76]	; 0xffffffb4
   12f44:	ldr	r2, [sp, #88]	; 0x58
   12f48:	eor	r0, r1, #2
   12f4c:	orr	r0, r0, r9
   12f50:	clz	r0, r0
   12f54:	lsr	r0, r0, #5
   12f58:	tst	r3, r0
   12f5c:	bne	12fd4 <__assert_fail@plt+0x21d0>
   12f60:	subs	r0, r1, #2
   12f64:	movwne	r0, #1
   12f68:	orr	r0, r3, r0
   12f6c:	tst	r0, #1
   12f70:	ldreq	r0, [sp, #60]	; 0x3c
   12f74:	eoreq	r0, r0, #1
   12f78:	tsteq	r0, #1
   12f7c:	bne	130b0 <__assert_fail@plt+0x22ac>
   12f80:	tst	r4, #1
   12f84:	bne	13074 <__assert_fail@plt+0x2270>
   12f88:	ldr	r6, [sp, #56]	; 0x38
   12f8c:	mov	r8, #0
   12f90:	cmp	r6, #0
   12f94:	beq	130ac <__assert_fail@plt+0x22a8>
   12f98:	mov	r1, #0
   12f9c:	mov	r4, #2
   12fa0:	cmp	r5, #0
   12fa4:	mov	r0, r2
   12fa8:	mov	r3, #0
   12fac:	str	r1, [sp, #84]	; 0x54
   12fb0:	beq	11df8 <__assert_fail@plt+0xff4>
   12fb4:	b	130b0 <__assert_fail@plt+0x22ac>
   12fb8:	movw	r0, #21476	; 0x53e4
   12fbc:	movt	r0, #1
   12fc0:	str	r0, [sp, #76]	; 0x4c
   12fc4:	mov	r9, #0
   12fc8:	tst	r8, #1
   12fcc:	beq	12090 <__assert_fail@plt+0x128c>
   12fd0:	b	121d0 <__assert_fail@plt+0x13cc>
   12fd4:	ldr	r1, [sp, #88]	; 0x58
   12fd8:	mov	r0, #2
   12fdc:	tst	r1, #1
   12fe0:	movwne	r0, #4
   12fe4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12fe8:	ldr	r1, [fp, #12]
   12fec:	cmp	r2, #2
   12ff0:	moveq	r2, r0
   12ff4:	b	1302c <__assert_fail@plt+0x2228>
   12ff8:	ldr	ip, [fp, #-84]	; 0xffffffac
   12ffc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13000:	ldr	r1, [fp, #12]
   13004:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13008:	b	1302c <__assert_fail@plt+0x2228>
   1300c:	ldr	r1, [sp, #88]	; 0x58
   13010:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13014:	ldr	r5, [sp, #28]
   13018:	mov	r0, #2
   1301c:	tst	r1, #1
   13020:	ldr	r1, [fp, #12]
   13024:	movwne	r0, #4
   13028:	mov	r2, r0
   1302c:	mov	r0, #0
   13030:	bic	r1, r1, #2
   13034:	str	r2, [sp]
   13038:	mov	r2, lr
   1303c:	str	r0, [sp, #8]
   13040:	ldr	r0, [sp, #72]	; 0x48
   13044:	str	r1, [sp, #4]
   13048:	mov	r1, r5
   1304c:	str	r0, [sp, #12]
   13050:	ldr	r0, [sp, #76]	; 0x4c
   13054:	str	r0, [sp, #16]
   13058:	mov	r0, ip
   1305c:	mov	r3, r7
   13060:	bl	11d6c <__assert_fail@plt+0xf68>
   13064:	mov	r9, r0
   13068:	mov	r0, r9
   1306c:	sub	sp, fp, #28
   13070:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13074:	mov	r0, #5
   13078:	ldr	r1, [sp, #56]	; 0x38
   1307c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13080:	str	r0, [sp]
   13084:	ldr	r0, [fp, #12]
   13088:	str	r0, [sp, #4]
   1308c:	ldr	r0, [fp, #16]
   13090:	str	r0, [sp, #8]
   13094:	ldr	r0, [sp, #72]	; 0x48
   13098:	str	r0, [sp, #12]
   1309c:	ldr	r0, [sp, #76]	; 0x4c
   130a0:	str	r0, [sp, #16]
   130a4:	ldr	r0, [fp, #-84]	; 0xffffffac
   130a8:	b	1305c <__assert_fail@plt+0x2258>
   130ac:	mov	r3, #0
   130b0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   130b4:	cmp	r1, #0
   130b8:	beq	130f4 <__assert_fail@plt+0x22f0>
   130bc:	ldr	r2, [fp, #-84]	; 0xffffffac
   130c0:	tst	r3, #1
   130c4:	bne	130f8 <__assert_fail@plt+0x22f4>
   130c8:	ldrb	r0, [r1]
   130cc:	cmp	r0, #0
   130d0:	beq	130f8 <__assert_fail@plt+0x22f4>
   130d4:	add	r1, r1, #1
   130d8:	cmp	r9, r5
   130dc:	strbcc	r0, [r2, r9]
   130e0:	add	r9, r9, #1
   130e4:	ldrb	r0, [r1], #1
   130e8:	cmp	r0, #0
   130ec:	bne	130d8 <__assert_fail@plt+0x22d4>
   130f0:	b	130f8 <__assert_fail@plt+0x22f4>
   130f4:	ldr	r2, [fp, #-84]	; 0xffffffac
   130f8:	cmp	r9, r5
   130fc:	movcc	r0, #0
   13100:	strbcc	r0, [r2, r9]
   13104:	mov	r0, r9
   13108:	sub	sp, fp, #28
   1310c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13110:	mov	r0, #4
   13114:	b	12fe4 <__assert_fail@plt+0x21e0>
   13118:	bl	10df8 <abort@plt>
   1311c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13120:	add	fp, sp, #28
   13124:	sub	sp, sp, #28
   13128:	movw	r5, #24880	; 0x6130
   1312c:	cmp	r2, #0
   13130:	mov	r4, r1
   13134:	mov	r7, r0
   13138:	str	r0, [sp, #20]
   1313c:	movt	r5, #2
   13140:	movne	r5, r2
   13144:	bl	10d50 <__errno_location@plt>
   13148:	mov	sl, r0
   1314c:	ldr	r2, [r5, #40]	; 0x28
   13150:	ldr	r3, [r5, #44]	; 0x2c
   13154:	ldm	r5, {r0, r1}
   13158:	orr	r8, r1, #1
   1315c:	add	r9, r5, #8
   13160:	mov	r1, #0
   13164:	ldr	r6, [sl]
   13168:	stm	sp, {r0, r8, r9}
   1316c:	mov	r0, #0
   13170:	str	r2, [sp, #12]
   13174:	str	r3, [sp, #16]
   13178:	mov	r2, r7
   1317c:	mov	r3, r4
   13180:	str	r6, [sp, #24]
   13184:	mov	r6, r4
   13188:	bl	11d6c <__assert_fail@plt+0xf68>
   1318c:	add	r7, r0, #1
   13190:	mov	r0, r7
   13194:	bl	141fc <__assert_fail@plt+0x33f8>
   13198:	mov	r4, r0
   1319c:	ldr	r0, [r5]
   131a0:	ldr	r2, [r5, #44]	; 0x2c
   131a4:	ldr	r1, [r5, #40]	; 0x28
   131a8:	mov	r3, r6
   131ac:	stm	sp, {r0, r8, r9}
   131b0:	str	r2, [sp, #16]
   131b4:	ldr	r2, [sp, #20]
   131b8:	str	r1, [sp, #12]
   131bc:	mov	r0, r4
   131c0:	mov	r1, r7
   131c4:	bl	11d6c <__assert_fail@plt+0xf68>
   131c8:	ldr	r0, [sp, #24]
   131cc:	str	r0, [sl]
   131d0:	mov	r0, r4
   131d4:	sub	sp, fp, #28
   131d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131e0:	add	fp, sp, #28
   131e4:	sub	sp, sp, #36	; 0x24
   131e8:	movw	r8, #24880	; 0x6130
   131ec:	cmp	r3, #0
   131f0:	mov	r4, r2
   131f4:	str	r2, [sp, #24]
   131f8:	mov	r5, r1
   131fc:	mov	r6, r0
   13200:	str	r0, [sp, #20]
   13204:	movt	r8, #2
   13208:	movne	r8, r3
   1320c:	bl	10d50 <__errno_location@plt>
   13210:	str	r0, [sp, #28]
   13214:	ldr	r1, [r8, #40]	; 0x28
   13218:	ldr	r2, [r8, #44]	; 0x2c
   1321c:	ldr	r7, [r0]
   13220:	cmp	r4, #0
   13224:	add	sl, r8, #8
   13228:	mov	r0, #0
   1322c:	ldm	r8, {r3, r9}
   13230:	orreq	r9, r9, #1
   13234:	stm	sp, {r3, r9, sl}
   13238:	str	r1, [sp, #12]
   1323c:	str	r2, [sp, #16]
   13240:	mov	r1, #0
   13244:	mov	r2, r6
   13248:	mov	r3, r5
   1324c:	str	r7, [sp, #32]
   13250:	mov	r7, r5
   13254:	bl	11d6c <__assert_fail@plt+0xf68>
   13258:	add	r4, r0, #1
   1325c:	mov	r5, r0
   13260:	mov	r0, r4
   13264:	bl	141fc <__assert_fail@plt+0x33f8>
   13268:	mov	r6, r0
   1326c:	ldr	r0, [r8]
   13270:	ldr	r2, [r8, #44]	; 0x2c
   13274:	ldr	r1, [r8, #40]	; 0x28
   13278:	mov	r3, r7
   1327c:	stm	sp, {r0, r9, sl}
   13280:	str	r2, [sp, #16]
   13284:	ldr	r2, [sp, #20]
   13288:	str	r1, [sp, #12]
   1328c:	mov	r0, r6
   13290:	mov	r1, r4
   13294:	bl	11d6c <__assert_fail@plt+0xf68>
   13298:	ldr	r0, [sp, #24]
   1329c:	ldr	r1, [sp, #32]
   132a0:	ldr	r2, [sp, #28]
   132a4:	cmp	r0, #0
   132a8:	str	r1, [r2]
   132ac:	strne	r5, [r0]
   132b0:	mov	r0, r6
   132b4:	sub	sp, fp, #28
   132b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132bc:	push	{r4, r5, r6, r7, fp, lr}
   132c0:	add	fp, sp, #16
   132c4:	movw	r4, #24832	; 0x6100
   132c8:	movt	r4, #2
   132cc:	ldrd	r6, [r4]
   132d0:	cmp	r7, #2
   132d4:	blt	13300 <__assert_fail@plt+0x24fc>
   132d8:	add	r5, r6, #12
   132dc:	mov	r7, #0
   132e0:	ldr	r0, [r5, r7, lsl #3]
   132e4:	bl	149a0 <__assert_fail@plt+0x3b9c>
   132e8:	ldr	r1, [r4, #4]
   132ec:	add	r2, r7, #2
   132f0:	add	r0, r7, #1
   132f4:	mov	r7, r0
   132f8:	cmp	r2, r1
   132fc:	blt	132e0 <__assert_fail@plt+0x24dc>
   13300:	ldr	r0, [r6, #4]
   13304:	movw	r5, #24928	; 0x6160
   13308:	movt	r5, #2
   1330c:	cmp	r0, r5
   13310:	beq	13324 <__assert_fail@plt+0x2520>
   13314:	bl	149a0 <__assert_fail@plt+0x3b9c>
   13318:	mov	r0, #256	; 0x100
   1331c:	str	r0, [r4, #8]
   13320:	str	r5, [r4, #12]
   13324:	add	r5, r4, #8
   13328:	cmp	r6, r5
   1332c:	beq	1333c <__assert_fail@plt+0x2538>
   13330:	mov	r0, r6
   13334:	bl	149a0 <__assert_fail@plt+0x3b9c>
   13338:	str	r5, [r4]
   1333c:	mov	r0, #1
   13340:	str	r0, [r4, #4]
   13344:	pop	{r4, r5, r6, r7, fp, pc}
   13348:	movw	r3, #24880	; 0x6130
   1334c:	mvn	r2, #0
   13350:	movt	r3, #2
   13354:	b	13358 <__assert_fail@plt+0x2554>
   13358:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1335c:	add	fp, sp, #28
   13360:	sub	sp, sp, #44	; 0x2c
   13364:	mov	r7, r3
   13368:	str	r2, [sp, #36]	; 0x24
   1336c:	str	r1, [sp, #32]
   13370:	mov	r5, r0
   13374:	bl	10d50 <__errno_location@plt>
   13378:	cmp	r5, #0
   1337c:	bmi	134e4 <__assert_fail@plt+0x26e0>
   13380:	cmn	r5, #-2147483647	; 0x80000001
   13384:	beq	134e4 <__assert_fail@plt+0x26e0>
   13388:	movw	r8, #24832	; 0x6100
   1338c:	mov	r4, r0
   13390:	ldr	r0, [r0]
   13394:	movt	r8, #2
   13398:	str	r4, [sp, #28]
   1339c:	ldr	r1, [r8, #4]
   133a0:	ldr	r6, [r8]
   133a4:	str	r0, [sp, #24]
   133a8:	cmp	r1, r5
   133ac:	ble	133b8 <__assert_fail@plt+0x25b4>
   133b0:	mov	sl, r6
   133b4:	b	13420 <__assert_fail@plt+0x261c>
   133b8:	mov	r0, #8
   133bc:	add	r9, r8, #8
   133c0:	str	r1, [fp, #-32]	; 0xffffffe0
   133c4:	sub	r1, r5, r1
   133c8:	mvn	r3, #-2147483648	; 0x80000000
   133cc:	str	r0, [sp]
   133d0:	subs	r0, r6, r9
   133d4:	add	r2, r1, #1
   133d8:	sub	r1, fp, #32
   133dc:	movne	r0, r6
   133e0:	bl	143fc <__assert_fail@plt+0x35f8>
   133e4:	mov	sl, r0
   133e8:	cmp	r6, r9
   133ec:	str	r0, [r8]
   133f0:	bne	133fc <__assert_fail@plt+0x25f8>
   133f4:	ldrd	r0, [r8, #8]
   133f8:	stm	sl, {r0, r1}
   133fc:	ldr	r1, [r8, #4]
   13400:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13404:	add	r0, sl, r1, lsl #3
   13408:	sub	r1, r2, r1
   1340c:	lsl	r2, r1, #3
   13410:	mov	r1, #0
   13414:	bl	10d68 <memset@plt>
   13418:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1341c:	str	r0, [r8, #4]
   13420:	mov	r9, sl
   13424:	ldm	r7, {r0, r1}
   13428:	orr	r8, r1, #1
   1342c:	add	r1, r7, #8
   13430:	ldr	r2, [r7, #40]	; 0x28
   13434:	ldr	r3, [r7, #44]	; 0x2c
   13438:	ldr	r6, [r9, r5, lsl #3]!
   1343c:	str	r1, [sp, #20]
   13440:	ldr	r4, [r9, #4]!
   13444:	stm	sp, {r0, r8}
   13448:	add	r0, sp, #8
   1344c:	stm	r0, {r1, r2, r3}
   13450:	ldr	r2, [sp, #32]
   13454:	ldr	r3, [sp, #36]	; 0x24
   13458:	mov	r1, r6
   1345c:	mov	r0, r4
   13460:	bl	11d6c <__assert_fail@plt+0xf68>
   13464:	cmp	r6, r0
   13468:	bhi	134cc <__assert_fail@plt+0x26c8>
   1346c:	add	r6, r0, #1
   13470:	movw	r0, #24928	; 0x6160
   13474:	movt	r0, #2
   13478:	str	r6, [sl, r5, lsl #3]
   1347c:	cmp	r4, r0
   13480:	beq	1348c <__assert_fail@plt+0x2688>
   13484:	mov	r0, r4
   13488:	bl	149a0 <__assert_fail@plt+0x3b9c>
   1348c:	mov	r0, r6
   13490:	bl	141fc <__assert_fail@plt+0x33f8>
   13494:	str	r0, [r9]
   13498:	mov	r4, r0
   1349c:	add	r3, sp, #8
   134a0:	ldr	r0, [r7]
   134a4:	ldr	r1, [r7, #40]	; 0x28
   134a8:	ldr	r2, [r7, #44]	; 0x2c
   134ac:	stm	sp, {r0, r8}
   134b0:	ldr	r0, [sp, #20]
   134b4:	stm	r3, {r0, r1, r2}
   134b8:	ldr	r2, [sp, #32]
   134bc:	ldr	r3, [sp, #36]	; 0x24
   134c0:	mov	r0, r4
   134c4:	mov	r1, r6
   134c8:	bl	11d6c <__assert_fail@plt+0xf68>
   134cc:	ldr	r1, [sp, #24]
   134d0:	ldr	r0, [sp, #28]
   134d4:	str	r1, [r0]
   134d8:	mov	r0, r4
   134dc:	sub	sp, fp, #28
   134e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134e4:	bl	10df8 <abort@plt>
   134e8:	movw	r3, #24880	; 0x6130
   134ec:	movt	r3, #2
   134f0:	b	13358 <__assert_fail@plt+0x2554>
   134f4:	movw	r3, #24880	; 0x6130
   134f8:	mov	r1, r0
   134fc:	mov	r0, #0
   13500:	mvn	r2, #0
   13504:	movt	r3, #2
   13508:	b	13358 <__assert_fail@plt+0x2554>
   1350c:	movw	r3, #24880	; 0x6130
   13510:	mov	r2, r1
   13514:	mov	r1, r0
   13518:	mov	r0, #0
   1351c:	movt	r3, #2
   13520:	b	13358 <__assert_fail@plt+0x2554>
   13524:	push	{fp, lr}
   13528:	mov	fp, sp
   1352c:	sub	sp, sp, #48	; 0x30
   13530:	vmov.i32	q8, #0	; 0x00000000
   13534:	mov	ip, #32
   13538:	mov	r3, sp
   1353c:	mov	lr, r2
   13540:	cmp	r1, #10
   13544:	add	r2, r3, #16
   13548:	vst1.64	{d16-d17}, [r3], ip
   1354c:	vst1.64	{d16-d17}, [r2]
   13550:	vst1.64	{d16-d17}, [r3]
   13554:	beq	13574 <__assert_fail@plt+0x2770>
   13558:	str	r1, [sp]
   1355c:	mov	r3, sp
   13560:	mov	r1, lr
   13564:	mvn	r2, #0
   13568:	bl	13358 <__assert_fail@plt+0x2554>
   1356c:	mov	sp, fp
   13570:	pop	{fp, pc}
   13574:	bl	10df8 <abort@plt>
   13578:	push	{r4, sl, fp, lr}
   1357c:	add	fp, sp, #8
   13580:	sub	sp, sp, #48	; 0x30
   13584:	vmov.i32	q8, #0	; 0x00000000
   13588:	mov	ip, r3
   1358c:	mov	r3, sp
   13590:	mov	lr, #32
   13594:	cmp	r1, #10
   13598:	add	r4, r3, #16
   1359c:	vst1.64	{d16-d17}, [r3], lr
   135a0:	vst1.64	{d16-d17}, [r4]
   135a4:	vst1.64	{d16-d17}, [r3]
   135a8:	beq	135c8 <__assert_fail@plt+0x27c4>
   135ac:	str	r1, [sp]
   135b0:	mov	r1, r2
   135b4:	mov	r3, sp
   135b8:	mov	r2, ip
   135bc:	bl	13358 <__assert_fail@plt+0x2554>
   135c0:	sub	sp, fp, #8
   135c4:	pop	{r4, sl, fp, pc}
   135c8:	bl	10df8 <abort@plt>
   135cc:	push	{fp, lr}
   135d0:	mov	fp, sp
   135d4:	sub	sp, sp, #48	; 0x30
   135d8:	vmov.i32	q8, #0	; 0x00000000
   135dc:	mov	r3, sp
   135e0:	mov	ip, #32
   135e4:	cmp	r0, #10
   135e8:	add	r2, r3, #16
   135ec:	vst1.64	{d16-d17}, [r3], ip
   135f0:	vst1.64	{d16-d17}, [r2]
   135f4:	vst1.64	{d16-d17}, [r3]
   135f8:	beq	13618 <__assert_fail@plt+0x2814>
   135fc:	str	r0, [sp]
   13600:	mov	r3, sp
   13604:	mov	r0, #0
   13608:	mvn	r2, #0
   1360c:	bl	13358 <__assert_fail@plt+0x2554>
   13610:	mov	sp, fp
   13614:	pop	{fp, pc}
   13618:	bl	10df8 <abort@plt>
   1361c:	push	{fp, lr}
   13620:	mov	fp, sp
   13624:	sub	sp, sp, #48	; 0x30
   13628:	vmov.i32	q8, #0	; 0x00000000
   1362c:	mov	r3, sp
   13630:	mov	ip, #32
   13634:	cmp	r0, #10
   13638:	add	lr, r3, #16
   1363c:	vst1.64	{d16-d17}, [r3], ip
   13640:	vst1.64	{d16-d17}, [lr]
   13644:	vst1.64	{d16-d17}, [r3]
   13648:	beq	13664 <__assert_fail@plt+0x2860>
   1364c:	str	r0, [sp]
   13650:	mov	r3, sp
   13654:	mov	r0, #0
   13658:	bl	13358 <__assert_fail@plt+0x2554>
   1365c:	mov	sp, fp
   13660:	pop	{fp, pc}
   13664:	bl	10df8 <abort@plt>
   13668:	push	{r4, sl, fp, lr}
   1366c:	add	fp, sp, #8
   13670:	sub	sp, sp, #48	; 0x30
   13674:	mov	lr, r0
   13678:	movw	r0, #24880	; 0x6130
   1367c:	mov	ip, r1
   13680:	mov	r1, #32
   13684:	mov	r4, #1
   13688:	movt	r0, #2
   1368c:	add	r3, r0, #16
   13690:	vld1.64	{d16-d17}, [r0], r1
   13694:	vld1.64	{d20-d21}, [r0]
   13698:	vld1.64	{d18-d19}, [r3]
   1369c:	mov	r3, sp
   136a0:	add	r0, r3, #32
   136a4:	add	r1, r3, #16
   136a8:	vst1.64	{d20-d21}, [r0]
   136ac:	mov	r0, #28
   136b0:	vst1.64	{d18-d19}, [r1]
   136b4:	mov	r1, r3
   136b8:	and	r0, r0, r2, lsr #3
   136bc:	and	r2, r2, #31
   136c0:	vst1.64	{d16-d17}, [r1], r0
   136c4:	ldr	r0, [r1, #8]
   136c8:	bic	r4, r4, r0, lsr r2
   136cc:	eor	r0, r0, r4, lsl r2
   136d0:	mov	r2, ip
   136d4:	str	r0, [r1, #8]
   136d8:	mov	r0, #0
   136dc:	mov	r1, lr
   136e0:	bl	13358 <__assert_fail@plt+0x2554>
   136e4:	sub	sp, fp, #8
   136e8:	pop	{r4, sl, fp, pc}
   136ec:	push	{fp, lr}
   136f0:	mov	fp, sp
   136f4:	sub	sp, sp, #48	; 0x30
   136f8:	mov	ip, r0
   136fc:	movw	r0, #24880	; 0x6130
   13700:	mov	r2, #32
   13704:	movt	r0, #2
   13708:	add	r3, r0, #16
   1370c:	vld1.64	{d16-d17}, [r0], r2
   13710:	vld1.64	{d20-d21}, [r0]
   13714:	vld1.64	{d18-d19}, [r3]
   13718:	mov	r3, sp
   1371c:	add	r0, r3, #32
   13720:	add	r2, r3, #16
   13724:	vst1.64	{d20-d21}, [r0]
   13728:	mov	r0, #28
   1372c:	vst1.64	{d18-d19}, [r2]
   13730:	mov	r2, r3
   13734:	and	r0, r0, r1, lsr #3
   13738:	and	r1, r1, #31
   1373c:	vst1.64	{d16-d17}, [r2], r0
   13740:	mov	r0, #1
   13744:	ldr	lr, [r2, #8]
   13748:	bic	r0, r0, lr, lsr r1
   1374c:	eor	r0, lr, r0, lsl r1
   13750:	mov	r1, ip
   13754:	str	r0, [r2, #8]
   13758:	mov	r0, #0
   1375c:	mvn	r2, #0
   13760:	bl	13358 <__assert_fail@plt+0x2554>
   13764:	mov	sp, fp
   13768:	pop	{fp, pc}
   1376c:	push	{fp, lr}
   13770:	mov	fp, sp
   13774:	sub	sp, sp, #48	; 0x30
   13778:	mov	r1, r0
   1377c:	movw	r0, #24880	; 0x6130
   13780:	mov	r3, #32
   13784:	movt	r0, #2
   13788:	add	r2, r0, #16
   1378c:	vld1.64	{d16-d17}, [r0], r3
   13790:	mov	r3, sp
   13794:	vld1.64	{d18-d19}, [r2]
   13798:	vld1.64	{d20-d21}, [r0]
   1379c:	add	r2, r3, #16
   137a0:	add	r0, r3, #32
   137a4:	vst1.64	{d18-d19}, [r2]
   137a8:	vst1.64	{d20-d21}, [r0]
   137ac:	mov	r0, #12
   137b0:	mov	r2, r3
   137b4:	vst1.64	{d16-d17}, [r2], r0
   137b8:	ldr	r0, [r2]
   137bc:	orr	r0, r0, #67108864	; 0x4000000
   137c0:	str	r0, [r2]
   137c4:	mov	r0, #0
   137c8:	mvn	r2, #0
   137cc:	bl	13358 <__assert_fail@plt+0x2554>
   137d0:	mov	sp, fp
   137d4:	pop	{fp, pc}
   137d8:	push	{fp, lr}
   137dc:	mov	fp, sp
   137e0:	sub	sp, sp, #48	; 0x30
   137e4:	mov	ip, r1
   137e8:	mov	r1, r0
   137ec:	movw	r0, #24880	; 0x6130
   137f0:	mov	r2, #32
   137f4:	movt	r0, #2
   137f8:	add	r3, r0, #16
   137fc:	vld1.64	{d16-d17}, [r0], r2
   13800:	vld1.64	{d18-d19}, [r3]
   13804:	vld1.64	{d20-d21}, [r0]
   13808:	mov	r3, sp
   1380c:	add	r2, r3, #16
   13810:	add	r0, r3, #32
   13814:	vst1.64	{d18-d19}, [r2]
   13818:	vst1.64	{d20-d21}, [r0]
   1381c:	mov	r0, #12
   13820:	mov	r2, r3
   13824:	vst1.64	{d16-d17}, [r2], r0
   13828:	ldr	r0, [r2]
   1382c:	orr	r0, r0, #67108864	; 0x4000000
   13830:	str	r0, [r2]
   13834:	mov	r0, #0
   13838:	mov	r2, ip
   1383c:	bl	13358 <__assert_fail@plt+0x2554>
   13840:	mov	sp, fp
   13844:	pop	{fp, pc}
   13848:	push	{r4, sl, fp, lr}
   1384c:	add	fp, sp, #8
   13850:	sub	sp, sp, #96	; 0x60
   13854:	vmov.i32	q8, #0	; 0x00000000
   13858:	mov	ip, r2
   1385c:	mov	r2, sp
   13860:	mov	r4, #28
   13864:	cmp	r1, #10
   13868:	mov	r3, r2
   1386c:	add	lr, r2, #16
   13870:	vst1.64	{d16-d17}, [r3], r4
   13874:	vst1.64	{d16-d17}, [lr]
   13878:	vst1.32	{d16-d17}, [r3]
   1387c:	beq	138cc <__assert_fail@plt+0x2ac8>
   13880:	vld1.64	{d16-d17}, [r2], r4
   13884:	vld1.64	{d18-d19}, [lr]
   13888:	add	r3, sp, #48	; 0x30
   1388c:	vld1.32	{d20-d21}, [r2]
   13890:	add	r2, r3, #20
   13894:	add	r4, r3, #4
   13898:	vst1.32	{d18-d19}, [r2]
   1389c:	add	r2, r3, #32
   138a0:	vst1.32	{d16-d17}, [r4]
   138a4:	vst1.32	{d20-d21}, [r2]
   138a8:	str	r1, [sp, #48]	; 0x30
   138ac:	mvn	r2, #0
   138b0:	ldr	r1, [sp, #60]	; 0x3c
   138b4:	orr	r1, r1, #67108864	; 0x4000000
   138b8:	str	r1, [sp, #60]	; 0x3c
   138bc:	mov	r1, ip
   138c0:	bl	13358 <__assert_fail@plt+0x2554>
   138c4:	sub	sp, fp, #8
   138c8:	pop	{r4, sl, fp, pc}
   138cc:	bl	10df8 <abort@plt>
   138d0:	push	{r4, r5, r6, sl, fp, lr}
   138d4:	add	fp, sp, #16
   138d8:	sub	sp, sp, #48	; 0x30
   138dc:	mov	ip, r3
   138e0:	movw	r3, #24880	; 0x6130
   138e4:	mov	r6, #32
   138e8:	cmp	r1, #0
   138ec:	mov	r4, sp
   138f0:	movt	r3, #2
   138f4:	cmpne	r2, #0
   138f8:	add	r5, r4, #16
   138fc:	add	lr, r3, #16
   13900:	vld1.64	{d16-d17}, [r3], r6
   13904:	vld1.64	{d18-d19}, [lr]
   13908:	vld1.64	{d20-d21}, [r3]
   1390c:	mov	r3, #10
   13910:	vst1.64	{d16-d17}, [r4], r6
   13914:	vst1.64	{d18-d19}, [r5]
   13918:	vst1.64	{d20-d21}, [r4]
   1391c:	str	r3, [sp]
   13920:	bne	13928 <__assert_fail@plt+0x2b24>
   13924:	bl	10df8 <abort@plt>
   13928:	str	r2, [sp, #44]	; 0x2c
   1392c:	str	r1, [sp, #40]	; 0x28
   13930:	mov	r3, sp
   13934:	mov	r1, ip
   13938:	mvn	r2, #0
   1393c:	bl	13358 <__assert_fail@plt+0x2554>
   13940:	sub	sp, fp, #16
   13944:	pop	{r4, r5, r6, sl, fp, pc}
   13948:	push	{r4, r5, r6, sl, fp, lr}
   1394c:	add	fp, sp, #16
   13950:	sub	sp, sp, #48	; 0x30
   13954:	mov	lr, r3
   13958:	movw	r3, #24880	; 0x6130
   1395c:	mov	r6, #32
   13960:	cmp	r1, #0
   13964:	mov	r4, sp
   13968:	movt	r3, #2
   1396c:	cmpne	r2, #0
   13970:	add	r5, r4, #16
   13974:	add	ip, r3, #16
   13978:	vld1.64	{d16-d17}, [r3], r6
   1397c:	vld1.64	{d18-d19}, [ip]
   13980:	vld1.64	{d20-d21}, [r3]
   13984:	mov	r3, #10
   13988:	vst1.64	{d16-d17}, [r4], r6
   1398c:	vst1.64	{d18-d19}, [r5]
   13990:	vst1.64	{d20-d21}, [r4]
   13994:	str	r3, [sp]
   13998:	bne	139a0 <__assert_fail@plt+0x2b9c>
   1399c:	bl	10df8 <abort@plt>
   139a0:	ldr	ip, [fp, #8]
   139a4:	str	r2, [sp, #44]	; 0x2c
   139a8:	str	r1, [sp, #40]	; 0x28
   139ac:	mov	r3, sp
   139b0:	mov	r1, lr
   139b4:	mov	r2, ip
   139b8:	bl	13358 <__assert_fail@plt+0x2554>
   139bc:	sub	sp, fp, #16
   139c0:	pop	{r4, r5, r6, sl, fp, pc}
   139c4:	push	{r4, sl, fp, lr}
   139c8:	add	fp, sp, #8
   139cc:	sub	sp, sp, #48	; 0x30
   139d0:	movw	r3, #24880	; 0x6130
   139d4:	mov	lr, #32
   139d8:	mov	ip, r2
   139dc:	cmp	r0, #0
   139e0:	movt	r3, #2
   139e4:	cmpne	r1, #0
   139e8:	add	r2, r3, #16
   139ec:	vld1.64	{d16-d17}, [r3], lr
   139f0:	vld1.64	{d20-d21}, [r3]
   139f4:	vld1.64	{d18-d19}, [r2]
   139f8:	mov	r2, sp
   139fc:	add	r4, r2, #16
   13a00:	vst1.64	{d16-d17}, [r2], lr
   13a04:	vst1.64	{d20-d21}, [r2]
   13a08:	mov	r2, #10
   13a0c:	vst1.64	{d18-d19}, [r4]
   13a10:	str	r2, [sp]
   13a14:	bne	13a1c <__assert_fail@plt+0x2c18>
   13a18:	bl	10df8 <abort@plt>
   13a1c:	str	r1, [sp, #44]	; 0x2c
   13a20:	str	r0, [sp, #40]	; 0x28
   13a24:	mov	r3, sp
   13a28:	mov	r0, #0
   13a2c:	mov	r1, ip
   13a30:	mvn	r2, #0
   13a34:	bl	13358 <__assert_fail@plt+0x2554>
   13a38:	sub	sp, fp, #8
   13a3c:	pop	{r4, sl, fp, pc}
   13a40:	push	{r4, r5, fp, lr}
   13a44:	add	fp, sp, #8
   13a48:	sub	sp, sp, #48	; 0x30
   13a4c:	mov	ip, r3
   13a50:	movw	r3, #24880	; 0x6130
   13a54:	mov	r4, #32
   13a58:	mov	lr, r2
   13a5c:	cmp	r0, #0
   13a60:	movt	r3, #2
   13a64:	cmpne	r1, #0
   13a68:	add	r2, r3, #16
   13a6c:	vld1.64	{d16-d17}, [r3], r4
   13a70:	vld1.64	{d20-d21}, [r3]
   13a74:	vld1.64	{d18-d19}, [r2]
   13a78:	mov	r2, sp
   13a7c:	add	r5, r2, #16
   13a80:	vst1.64	{d16-d17}, [r2], r4
   13a84:	vst1.64	{d20-d21}, [r2]
   13a88:	mov	r2, #10
   13a8c:	vst1.64	{d18-d19}, [r5]
   13a90:	str	r2, [sp]
   13a94:	bne	13a9c <__assert_fail@plt+0x2c98>
   13a98:	bl	10df8 <abort@plt>
   13a9c:	str	r1, [sp, #44]	; 0x2c
   13aa0:	str	r0, [sp, #40]	; 0x28
   13aa4:	mov	r3, sp
   13aa8:	mov	r0, #0
   13aac:	mov	r1, lr
   13ab0:	mov	r2, ip
   13ab4:	bl	13358 <__assert_fail@plt+0x2554>
   13ab8:	sub	sp, fp, #8
   13abc:	pop	{r4, r5, fp, pc}
   13ac0:	movw	r3, #24784	; 0x60d0
   13ac4:	movt	r3, #2
   13ac8:	b	13358 <__assert_fail@plt+0x2554>
   13acc:	movw	r3, #24784	; 0x60d0
   13ad0:	mov	r2, r1
   13ad4:	mov	r1, r0
   13ad8:	mov	r0, #0
   13adc:	movt	r3, #2
   13ae0:	b	13358 <__assert_fail@plt+0x2554>
   13ae4:	movw	r3, #24784	; 0x60d0
   13ae8:	mvn	r2, #0
   13aec:	movt	r3, #2
   13af0:	b	13358 <__assert_fail@plt+0x2554>
   13af4:	movw	r3, #24784	; 0x60d0
   13af8:	mov	r1, r0
   13afc:	mov	r0, #0
   13b00:	mvn	r2, #0
   13b04:	movt	r3, #2
   13b08:	b	13358 <__assert_fail@plt+0x2554>
   13b0c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b10:	add	fp, sp, #24
   13b14:	sub	sp, sp, #32
   13b18:	ldr	r6, [fp, #12]
   13b1c:	ldr	r7, [fp, #8]
   13b20:	mov	r4, r2
   13b24:	mov	r8, r0
   13b28:	cmp	r1, #0
   13b2c:	beq	13b54 <__assert_fail@plt+0x2d50>
   13b30:	movw	r2, #21564	; 0x543c
   13b34:	mov	r5, r1
   13b38:	str	r3, [sp, #4]
   13b3c:	str	r4, [sp]
   13b40:	mov	r0, r8
   13b44:	mov	r1, #1
   13b48:	movt	r2, #1
   13b4c:	mov	r3, r5
   13b50:	b	13b6c <__assert_fail@plt+0x2d68>
   13b54:	movw	r2, #21576	; 0x5448
   13b58:	str	r3, [sp]
   13b5c:	mov	r0, r8
   13b60:	mov	r1, #1
   13b64:	mov	r3, r4
   13b68:	movt	r2, #1
   13b6c:	bl	10d8c <__fprintf_chk@plt>
   13b70:	movw	r1, #21583	; 0x544f
   13b74:	mov	r0, #0
   13b78:	mov	r2, #5
   13b7c:	movt	r1, #1
   13b80:	bl	10c6c <dcgettext@plt>
   13b84:	movw	r2, #22301	; 0x571d
   13b88:	mov	r3, r0
   13b8c:	movw	r0, #2022	; 0x7e6
   13b90:	mov	r1, #1
   13b94:	movt	r2, #1
   13b98:	str	r0, [sp]
   13b9c:	mov	r0, r8
   13ba0:	bl	10d8c <__fprintf_chk@plt>
   13ba4:	movw	r4, #20174	; 0x4ece
   13ba8:	mov	r1, r8
   13bac:	movt	r4, #1
   13bb0:	mov	r0, r4
   13bb4:	bl	10c18 <fputs_unlocked@plt>
   13bb8:	movw	r1, #21587	; 0x5453
   13bbc:	mov	r0, #0
   13bc0:	mov	r2, #5
   13bc4:	movt	r1, #1
   13bc8:	bl	10c6c <dcgettext@plt>
   13bcc:	movw	r3, #21758	; 0x54fe
   13bd0:	mov	r2, r0
   13bd4:	mov	r0, r8
   13bd8:	mov	r1, #1
   13bdc:	movt	r3, #1
   13be0:	bl	10d8c <__fprintf_chk@plt>
   13be4:	mov	r0, r4
   13be8:	mov	r1, r8
   13bec:	bl	10c18 <fputs_unlocked@plt>
   13bf0:	cmp	r6, #9
   13bf4:	bhi	13c30 <__assert_fail@plt+0x2e2c>
   13bf8:	add	r0, pc, #0
   13bfc:	ldr	pc, [r0, r6, lsl #2]
   13c00:	andeq	r3, r1, r8, lsr #24
   13c04:	andeq	r3, r1, ip, lsr ip
   13c08:	andeq	r3, r1, ip, ror #24
   13c0c:	muleq	r1, r4, ip
   13c10:			; <UNDEFINED> instruction: 0x00013cbc
   13c14:	andeq	r3, r1, r4, ror #25
   13c18:	andeq	r3, r1, ip, lsl #26
   13c1c:	andeq	r3, r1, r4, asr #26
   13c20:	andeq	r3, r1, ip, ror #27
   13c24:	muleq	r1, r4, sp
   13c28:	sub	sp, fp, #24
   13c2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c30:	movw	r1, #22111	; 0x565f
   13c34:	movt	r1, #1
   13c38:	b	13d9c <__assert_fail@plt+0x2f98>
   13c3c:	movw	r1, #21792	; 0x5520
   13c40:	mov	r0, #0
   13c44:	mov	r2, #5
   13c48:	movt	r1, #1
   13c4c:	bl	10c6c <dcgettext@plt>
   13c50:	ldr	r3, [r7]
   13c54:	mov	r2, r0
   13c58:	mov	r0, r8
   13c5c:	mov	r1, #1
   13c60:	sub	sp, fp, #24
   13c64:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13c68:	b	10d8c <__fprintf_chk@plt>
   13c6c:	movw	r1, #21808	; 0x5530
   13c70:	mov	r0, #0
   13c74:	mov	r2, #5
   13c78:	movt	r1, #1
   13c7c:	bl	10c6c <dcgettext@plt>
   13c80:	mov	r2, r0
   13c84:	ldr	r3, [r7]
   13c88:	ldr	r0, [r7, #4]
   13c8c:	str	r0, [sp]
   13c90:	b	13d80 <__assert_fail@plt+0x2f7c>
   13c94:	movw	r1, #21831	; 0x5547
   13c98:	mov	r0, #0
   13c9c:	mov	r2, #5
   13ca0:	movt	r1, #1
   13ca4:	bl	10c6c <dcgettext@plt>
   13ca8:	mov	r2, r0
   13cac:	ldr	r3, [r7]
   13cb0:	ldmib	r7, {r0, r1}
   13cb4:	stm	sp, {r0, r1}
   13cb8:	b	13d80 <__assert_fail@plt+0x2f7c>
   13cbc:	movw	r1, #21859	; 0x5563
   13cc0:	mov	r0, #0
   13cc4:	mov	r2, #5
   13cc8:	movt	r1, #1
   13ccc:	bl	10c6c <dcgettext@plt>
   13cd0:	ldr	r3, [r7]
   13cd4:	mov	r2, r0
   13cd8:	ldmib	r7, {r0, r1, r7}
   13cdc:	stm	sp, {r0, r1, r7}
   13ce0:	b	13d80 <__assert_fail@plt+0x2f7c>
   13ce4:	movw	r1, #21891	; 0x5583
   13ce8:	mov	r0, #0
   13cec:	mov	r2, #5
   13cf0:	movt	r1, #1
   13cf4:	bl	10c6c <dcgettext@plt>
   13cf8:	ldr	r3, [r7]
   13cfc:	mov	r2, r0
   13d00:	ldmib	r7, {r0, r1, r6, r7}
   13d04:	stm	sp, {r0, r1, r6, r7}
   13d08:	b	13d80 <__assert_fail@plt+0x2f7c>
   13d0c:	movw	r1, #21927	; 0x55a7
   13d10:	mov	r0, #0
   13d14:	mov	r2, #5
   13d18:	movt	r1, #1
   13d1c:	bl	10c6c <dcgettext@plt>
   13d20:	mov	r2, r0
   13d24:	ldr	r3, [r7]
   13d28:	ldmib	r7, {r0, r1, r6}
   13d2c:	ldr	r5, [r7, #16]
   13d30:	ldr	r7, [r7, #20]
   13d34:	stm	sp, {r0, r1, r6}
   13d38:	str	r5, [sp, #12]
   13d3c:	str	r7, [sp, #16]
   13d40:	b	13d80 <__assert_fail@plt+0x2f7c>
   13d44:	movw	r1, #21967	; 0x55cf
   13d48:	mov	r0, #0
   13d4c:	mov	r2, #5
   13d50:	movt	r1, #1
   13d54:	bl	10c6c <dcgettext@plt>
   13d58:	mov	r2, r0
   13d5c:	ldr	r3, [r7]
   13d60:	ldmib	r7, {r0, r1, r6}
   13d64:	ldr	r5, [r7, #16]
   13d68:	ldr	r4, [r7, #20]
   13d6c:	ldr	r7, [r7, #24]
   13d70:	stm	sp, {r0, r1, r6}
   13d74:	str	r5, [sp, #12]
   13d78:	str	r4, [sp, #16]
   13d7c:	str	r7, [sp, #20]
   13d80:	mov	r0, r8
   13d84:	mov	r1, #1
   13d88:	bl	10d8c <__fprintf_chk@plt>
   13d8c:	sub	sp, fp, #24
   13d90:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13d94:	movw	r1, #22059	; 0x562b
   13d98:	movt	r1, #1
   13d9c:	mov	r0, #0
   13da0:	mov	r2, #5
   13da4:	bl	10c6c <dcgettext@plt>
   13da8:	mov	ip, r0
   13dac:	ldr	r3, [r7]
   13db0:	ldr	r0, [r7, #4]
   13db4:	ldr	r1, [r7, #8]
   13db8:	ldr	r6, [r7, #12]
   13dbc:	ldr	r5, [r7, #16]
   13dc0:	ldr	r4, [r7, #20]
   13dc4:	ldr	r2, [r7, #24]
   13dc8:	ldr	lr, [r7, #28]
   13dcc:	ldr	r7, [r7, #32]
   13dd0:	stm	sp, {r0, r1, r6}
   13dd4:	str	r5, [sp, #12]
   13dd8:	str	r4, [sp, #16]
   13ddc:	str	r2, [sp, #20]
   13de0:	str	lr, [sp, #24]
   13de4:	str	r7, [sp, #28]
   13de8:	b	13e30 <__assert_fail@plt+0x302c>
   13dec:	movw	r1, #22011	; 0x55fb
   13df0:	mov	r0, #0
   13df4:	mov	r2, #5
   13df8:	movt	r1, #1
   13dfc:	bl	10c6c <dcgettext@plt>
   13e00:	mov	ip, r0
   13e04:	ldr	r3, [r7]
   13e08:	ldmib	r7, {r0, r1, r6}
   13e0c:	ldr	r5, [r7, #16]
   13e10:	ldr	r4, [r7, #20]
   13e14:	ldr	r2, [r7, #24]
   13e18:	ldr	r7, [r7, #28]
   13e1c:	stm	sp, {r0, r1, r6}
   13e20:	str	r5, [sp, #12]
   13e24:	str	r4, [sp, #16]
   13e28:	str	r2, [sp, #20]
   13e2c:	str	r7, [sp, #24]
   13e30:	mov	r0, r8
   13e34:	mov	r1, #1
   13e38:	mov	r2, ip
   13e3c:	bl	10d8c <__fprintf_chk@plt>
   13e40:	sub	sp, fp, #24
   13e44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e48:	push	{r4, sl, fp, lr}
   13e4c:	add	fp, sp, #8
   13e50:	sub	sp, sp, #8
   13e54:	ldr	ip, [fp, #8]
   13e58:	mov	lr, #0
   13e5c:	ldr	r4, [ip, lr, lsl #2]
   13e60:	add	lr, lr, #1
   13e64:	cmp	r4, #0
   13e68:	bne	13e5c <__assert_fail@plt+0x3058>
   13e6c:	sub	r4, lr, #1
   13e70:	str	ip, [sp]
   13e74:	str	r4, [sp, #4]
   13e78:	bl	13b0c <__assert_fail@plt+0x2d08>
   13e7c:	sub	sp, fp, #8
   13e80:	pop	{r4, sl, fp, pc}
   13e84:	push	{fp, lr}
   13e88:	mov	fp, sp
   13e8c:	sub	sp, sp, #48	; 0x30
   13e90:	ldr	ip, [fp, #8]
   13e94:	ldr	lr, [ip]
   13e98:	cmp	lr, #0
   13e9c:	str	lr, [sp, #8]
   13ea0:	beq	13f3c <__assert_fail@plt+0x3138>
   13ea4:	ldr	lr, [ip, #4]
   13ea8:	cmp	lr, #0
   13eac:	str	lr, [sp, #12]
   13eb0:	beq	13f44 <__assert_fail@plt+0x3140>
   13eb4:	ldr	lr, [ip, #8]
   13eb8:	cmp	lr, #0
   13ebc:	str	lr, [sp, #16]
   13ec0:	beq	13f4c <__assert_fail@plt+0x3148>
   13ec4:	ldr	lr, [ip, #12]
   13ec8:	cmp	lr, #0
   13ecc:	str	lr, [sp, #20]
   13ed0:	beq	13f54 <__assert_fail@plt+0x3150>
   13ed4:	ldr	lr, [ip, #16]
   13ed8:	cmp	lr, #0
   13edc:	str	lr, [sp, #24]
   13ee0:	beq	13f5c <__assert_fail@plt+0x3158>
   13ee4:	ldr	lr, [ip, #20]
   13ee8:	cmp	lr, #0
   13eec:	str	lr, [sp, #28]
   13ef0:	beq	13f64 <__assert_fail@plt+0x3160>
   13ef4:	ldr	lr, [ip, #24]
   13ef8:	cmp	lr, #0
   13efc:	str	lr, [sp, #32]
   13f00:	beq	13f6c <__assert_fail@plt+0x3168>
   13f04:	ldr	lr, [ip, #28]
   13f08:	cmp	lr, #0
   13f0c:	str	lr, [sp, #36]	; 0x24
   13f10:	beq	13f74 <__assert_fail@plt+0x3170>
   13f14:	ldr	lr, [ip, #32]
   13f18:	cmp	lr, #0
   13f1c:	str	lr, [sp, #40]	; 0x28
   13f20:	beq	13f7c <__assert_fail@plt+0x3178>
   13f24:	ldr	lr, [ip, #36]	; 0x24
   13f28:	mov	ip, #10
   13f2c:	cmp	lr, #0
   13f30:	str	lr, [sp, #44]	; 0x2c
   13f34:	movweq	ip, #9
   13f38:	b	13f80 <__assert_fail@plt+0x317c>
   13f3c:	mov	ip, #0
   13f40:	b	13f80 <__assert_fail@plt+0x317c>
   13f44:	mov	ip, #1
   13f48:	b	13f80 <__assert_fail@plt+0x317c>
   13f4c:	mov	ip, #2
   13f50:	b	13f80 <__assert_fail@plt+0x317c>
   13f54:	mov	ip, #3
   13f58:	b	13f80 <__assert_fail@plt+0x317c>
   13f5c:	mov	ip, #4
   13f60:	b	13f80 <__assert_fail@plt+0x317c>
   13f64:	mov	ip, #5
   13f68:	b	13f80 <__assert_fail@plt+0x317c>
   13f6c:	mov	ip, #6
   13f70:	b	13f80 <__assert_fail@plt+0x317c>
   13f74:	mov	ip, #7
   13f78:	b	13f80 <__assert_fail@plt+0x317c>
   13f7c:	mov	ip, #8
   13f80:	add	lr, sp, #8
   13f84:	str	ip, [sp, #4]
   13f88:	str	lr, [sp]
   13f8c:	bl	13b0c <__assert_fail@plt+0x2d08>
   13f90:	mov	sp, fp
   13f94:	pop	{fp, pc}
   13f98:	push	{fp, lr}
   13f9c:	mov	fp, sp
   13fa0:	sub	sp, sp, #56	; 0x38
   13fa4:	add	ip, fp, #8
   13fa8:	str	ip, [sp, #12]
   13fac:	ldr	lr, [fp, #8]
   13fb0:	cmp	lr, #0
   13fb4:	str	lr, [sp, #16]
   13fb8:	beq	14054 <__assert_fail@plt+0x3250>
   13fbc:	ldr	lr, [ip, #4]
   13fc0:	cmp	lr, #0
   13fc4:	str	lr, [sp, #20]
   13fc8:	beq	1405c <__assert_fail@plt+0x3258>
   13fcc:	ldr	lr, [ip, #8]
   13fd0:	cmp	lr, #0
   13fd4:	str	lr, [sp, #24]
   13fd8:	beq	14064 <__assert_fail@plt+0x3260>
   13fdc:	ldr	lr, [ip, #12]
   13fe0:	cmp	lr, #0
   13fe4:	str	lr, [sp, #28]
   13fe8:	beq	1406c <__assert_fail@plt+0x3268>
   13fec:	ldr	lr, [ip, #16]
   13ff0:	cmp	lr, #0
   13ff4:	str	lr, [sp, #32]
   13ff8:	beq	14074 <__assert_fail@plt+0x3270>
   13ffc:	ldr	lr, [ip, #20]
   14000:	cmp	lr, #0
   14004:	str	lr, [sp, #36]	; 0x24
   14008:	beq	1407c <__assert_fail@plt+0x3278>
   1400c:	ldr	lr, [ip, #24]
   14010:	cmp	lr, #0
   14014:	str	lr, [sp, #40]	; 0x28
   14018:	beq	14084 <__assert_fail@plt+0x3280>
   1401c:	ldr	lr, [ip, #28]
   14020:	cmp	lr, #0
   14024:	str	lr, [sp, #44]	; 0x2c
   14028:	beq	1408c <__assert_fail@plt+0x3288>
   1402c:	ldr	lr, [ip, #32]
   14030:	cmp	lr, #0
   14034:	str	lr, [sp, #48]	; 0x30
   14038:	beq	14094 <__assert_fail@plt+0x3290>
   1403c:	ldr	lr, [ip, #36]	; 0x24
   14040:	mov	ip, #10
   14044:	cmp	lr, #0
   14048:	str	lr, [sp, #52]	; 0x34
   1404c:	movweq	ip, #9
   14050:	b	14098 <__assert_fail@plt+0x3294>
   14054:	mov	ip, #0
   14058:	b	14098 <__assert_fail@plt+0x3294>
   1405c:	mov	ip, #1
   14060:	b	14098 <__assert_fail@plt+0x3294>
   14064:	mov	ip, #2
   14068:	b	14098 <__assert_fail@plt+0x3294>
   1406c:	mov	ip, #3
   14070:	b	14098 <__assert_fail@plt+0x3294>
   14074:	mov	ip, #4
   14078:	b	14098 <__assert_fail@plt+0x3294>
   1407c:	mov	ip, #5
   14080:	b	14098 <__assert_fail@plt+0x3294>
   14084:	mov	ip, #6
   14088:	b	14098 <__assert_fail@plt+0x3294>
   1408c:	mov	ip, #7
   14090:	b	14098 <__assert_fail@plt+0x3294>
   14094:	mov	ip, #8
   14098:	add	lr, sp, #16
   1409c:	str	ip, [sp, #4]
   140a0:	str	lr, [sp]
   140a4:	bl	13b0c <__assert_fail@plt+0x2d08>
   140a8:	mov	sp, fp
   140ac:	pop	{fp, pc}
   140b0:	push	{fp, lr}
   140b4:	mov	fp, sp
   140b8:	movw	r0, #24860	; 0x611c
   140bc:	movt	r0, #2
   140c0:	ldr	r1, [r0]
   140c4:	movw	r0, #20174	; 0x4ece
   140c8:	movt	r0, #1
   140cc:	bl	10c18 <fputs_unlocked@plt>
   140d0:	movw	r1, #22171	; 0x569b
   140d4:	mov	r0, #0
   140d8:	mov	r2, #5
   140dc:	movt	r1, #1
   140e0:	bl	10c6c <dcgettext@plt>
   140e4:	movw	r2, #22191	; 0x56af
   140e8:	mov	r1, r0
   140ec:	mov	r0, #1
   140f0:	movt	r2, #1
   140f4:	bl	10d74 <__printf_chk@plt>
   140f8:	movw	r1, #22213	; 0x56c5
   140fc:	mov	r0, #0
   14100:	mov	r2, #5
   14104:	movt	r1, #1
   14108:	bl	10c6c <dcgettext@plt>
   1410c:	movw	r2, #20876	; 0x518c
   14110:	movw	r3, #21029	; 0x5225
   14114:	mov	r1, r0
   14118:	mov	r0, #1
   1411c:	movt	r2, #1
   14120:	movt	r3, #1
   14124:	bl	10d74 <__printf_chk@plt>
   14128:	movw	r1, #22233	; 0x56d9
   1412c:	mov	r0, #0
   14130:	mov	r2, #5
   14134:	movt	r1, #1
   14138:	bl	10c6c <dcgettext@plt>
   1413c:	movw	r2, #22272	; 0x5700
   14140:	mov	r1, r0
   14144:	mov	r0, #1
   14148:	movt	r2, #1
   1414c:	pop	{fp, lr}
   14150:	b	10d74 <__printf_chk@plt>
   14154:	push	{r4, r5, r6, sl, fp, lr}
   14158:	add	fp, sp, #16
   1415c:	mov	r4, r2
   14160:	mov	r5, r1
   14164:	mov	r6, r0
   14168:	bl	14b0c <__assert_fail@plt+0x3d08>
   1416c:	cmp	r0, #0
   14170:	popne	{r4, r5, r6, sl, fp, pc}
   14174:	cmp	r6, #0
   14178:	beq	1418c <__assert_fail@plt+0x3388>
   1417c:	cmp	r5, #0
   14180:	cmpne	r4, #0
   14184:	bne	1418c <__assert_fail@plt+0x3388>
   14188:	pop	{r4, r5, r6, sl, fp, pc}
   1418c:	bl	14708 <__assert_fail@plt+0x3904>
   14190:	push	{r4, r5, r6, sl, fp, lr}
   14194:	add	fp, sp, #16
   14198:	mov	r4, r2
   1419c:	mov	r5, r1
   141a0:	mov	r6, r0
   141a4:	bl	14b0c <__assert_fail@plt+0x3d08>
   141a8:	cmp	r0, #0
   141ac:	popne	{r4, r5, r6, sl, fp, pc}
   141b0:	cmp	r6, #0
   141b4:	beq	141c8 <__assert_fail@plt+0x33c4>
   141b8:	cmp	r5, #0
   141bc:	cmpne	r4, #0
   141c0:	bne	141c8 <__assert_fail@plt+0x33c4>
   141c4:	pop	{r4, r5, r6, sl, fp, pc}
   141c8:	bl	14708 <__assert_fail@plt+0x3904>
   141cc:	push	{fp, lr}
   141d0:	mov	fp, sp
   141d4:	bl	147a0 <__assert_fail@plt+0x399c>
   141d8:	cmp	r0, #0
   141dc:	popne	{fp, pc}
   141e0:	bl	14708 <__assert_fail@plt+0x3904>
   141e4:	push	{fp, lr}
   141e8:	mov	fp, sp
   141ec:	bl	147a0 <__assert_fail@plt+0x399c>
   141f0:	cmp	r0, #0
   141f4:	popne	{fp, pc}
   141f8:	bl	14708 <__assert_fail@plt+0x3904>
   141fc:	push	{fp, lr}
   14200:	mov	fp, sp
   14204:	bl	147a0 <__assert_fail@plt+0x399c>
   14208:	cmp	r0, #0
   1420c:	popne	{fp, pc}
   14210:	bl	14708 <__assert_fail@plt+0x3904>
   14214:	push	{r4, r5, fp, lr}
   14218:	add	fp, sp, #8
   1421c:	mov	r4, r1
   14220:	mov	r5, r0
   14224:	bl	147d0 <__assert_fail@plt+0x39cc>
   14228:	cmp	r0, #0
   1422c:	popne	{r4, r5, fp, pc}
   14230:	cmp	r5, #0
   14234:	beq	14244 <__assert_fail@plt+0x3440>
   14238:	cmp	r4, #0
   1423c:	bne	14244 <__assert_fail@plt+0x3440>
   14240:	pop	{r4, r5, fp, pc}
   14244:	bl	14708 <__assert_fail@plt+0x3904>
   14248:	push	{fp, lr}
   1424c:	mov	fp, sp
   14250:	cmp	r1, #0
   14254:	orreq	r1, r1, #1
   14258:	bl	147d0 <__assert_fail@plt+0x39cc>
   1425c:	cmp	r0, #0
   14260:	popne	{fp, pc}
   14264:	bl	14708 <__assert_fail@plt+0x3904>
   14268:	push	{fp, lr}
   1426c:	mov	fp, sp
   14270:	clz	r3, r2
   14274:	lsr	ip, r3, #5
   14278:	clz	r3, r1
   1427c:	lsr	r3, r3, #5
   14280:	orrs	r3, r3, ip
   14284:	movwne	r1, #1
   14288:	movwne	r2, #1
   1428c:	bl	14b0c <__assert_fail@plt+0x3d08>
   14290:	cmp	r0, #0
   14294:	popne	{fp, pc}
   14298:	bl	14708 <__assert_fail@plt+0x3904>
   1429c:	push	{fp, lr}
   142a0:	mov	fp, sp
   142a4:	mov	r2, r1
   142a8:	mov	r1, r0
   142ac:	mov	r0, #0
   142b0:	bl	14b0c <__assert_fail@plt+0x3d08>
   142b4:	cmp	r0, #0
   142b8:	popne	{fp, pc}
   142bc:	bl	14708 <__assert_fail@plt+0x3904>
   142c0:	push	{fp, lr}
   142c4:	mov	fp, sp
   142c8:	mov	r2, r1
   142cc:	mov	r1, r0
   142d0:	clz	r0, r2
   142d4:	clz	r3, r1
   142d8:	lsr	r0, r0, #5
   142dc:	lsr	r3, r3, #5
   142e0:	orrs	r0, r3, r0
   142e4:	mov	r0, #0
   142e8:	movwne	r1, #1
   142ec:	movwne	r2, #1
   142f0:	bl	14b0c <__assert_fail@plt+0x3d08>
   142f4:	cmp	r0, #0
   142f8:	popne	{fp, pc}
   142fc:	bl	14708 <__assert_fail@plt+0x3904>
   14300:	push	{r4, r5, r6, sl, fp, lr}
   14304:	add	fp, sp, #16
   14308:	ldr	r5, [r1]
   1430c:	mov	r4, r1
   14310:	mov	r6, r0
   14314:	cmp	r0, #0
   14318:	beq	14330 <__assert_fail@plt+0x352c>
   1431c:	mov	r0, #1
   14320:	add	r0, r0, r5, lsr #1
   14324:	adds	r5, r5, r0
   14328:	bcc	14338 <__assert_fail@plt+0x3534>
   1432c:	b	14374 <__assert_fail@plt+0x3570>
   14330:	cmp	r5, #0
   14334:	movweq	r5, #64	; 0x40
   14338:	mov	r0, r6
   1433c:	mov	r1, r5
   14340:	mov	r2, #1
   14344:	bl	14b0c <__assert_fail@plt+0x3d08>
   14348:	cmp	r5, #0
   1434c:	mov	r1, r5
   14350:	movwne	r1, #1
   14354:	cmp	r0, #0
   14358:	bne	1436c <__assert_fail@plt+0x3568>
   1435c:	clz	r2, r6
   14360:	lsr	r2, r2, #5
   14364:	orrs	r1, r2, r1
   14368:	bne	14374 <__assert_fail@plt+0x3570>
   1436c:	str	r5, [r4]
   14370:	pop	{r4, r5, r6, sl, fp, pc}
   14374:	bl	14708 <__assert_fail@plt+0x3904>
   14378:	push	{r4, r5, r6, r7, fp, lr}
   1437c:	add	fp, sp, #16
   14380:	ldr	r5, [r1]
   14384:	mov	r6, r2
   14388:	mov	r4, r1
   1438c:	mov	r7, r0
   14390:	cmp	r0, #0
   14394:	beq	143ac <__assert_fail@plt+0x35a8>
   14398:	mov	r0, #1
   1439c:	add	r0, r0, r5, lsr #1
   143a0:	adds	r5, r5, r0
   143a4:	bcc	143c4 <__assert_fail@plt+0x35c0>
   143a8:	b	143f8 <__assert_fail@plt+0x35f4>
   143ac:	cmp	r5, #0
   143b0:	bne	143c4 <__assert_fail@plt+0x35c0>
   143b4:	mov	r0, #64	; 0x40
   143b8:	cmp	r6, #64	; 0x40
   143bc:	udiv	r5, r0, r6
   143c0:	addhi	r5, r5, #1
   143c4:	mov	r0, r7
   143c8:	mov	r1, r5
   143cc:	mov	r2, r6
   143d0:	bl	14b0c <__assert_fail@plt+0x3d08>
   143d4:	cmp	r0, #0
   143d8:	bne	143f0 <__assert_fail@plt+0x35ec>
   143dc:	cmp	r7, #0
   143e0:	beq	143f8 <__assert_fail@plt+0x35f4>
   143e4:	cmp	r6, #0
   143e8:	cmpne	r5, #0
   143ec:	bne	143f8 <__assert_fail@plt+0x35f4>
   143f0:	str	r5, [r4]
   143f4:	pop	{r4, r5, r6, r7, fp, pc}
   143f8:	bl	14708 <__assert_fail@plt+0x3904>
   143fc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14400:	add	fp, sp, #24
   14404:	mov	r8, r1
   14408:	ldr	r1, [r1]
   1440c:	mov	r5, r0
   14410:	add	r0, r1, r1, asr #1
   14414:	cmp	r0, r1
   14418:	mvnvs	r0, #-2147483648	; 0x80000000
   1441c:	cmp	r0, r3
   14420:	mov	r7, r0
   14424:	movgt	r7, r3
   14428:	cmn	r3, #1
   1442c:	movle	r7, r0
   14430:	ldr	r0, [fp, #8]
   14434:	cmn	r0, #1
   14438:	ble	14460 <__assert_fail@plt+0x365c>
   1443c:	cmp	r0, #0
   14440:	beq	144b4 <__assert_fail@plt+0x36b0>
   14444:	cmn	r7, #1
   14448:	ble	14488 <__assert_fail@plt+0x3684>
   1444c:	mvn	r4, #-2147483648	; 0x80000000
   14450:	udiv	r6, r4, r0
   14454:	cmp	r6, r7
   14458:	bge	144b4 <__assert_fail@plt+0x36b0>
   1445c:	b	144c4 <__assert_fail@plt+0x36c0>
   14460:	cmn	r7, #1
   14464:	ble	144a4 <__assert_fail@plt+0x36a0>
   14468:	cmn	r0, #1
   1446c:	beq	144b4 <__assert_fail@plt+0x36b0>
   14470:	mov	r6, #-2147483648	; 0x80000000
   14474:	mvn	r4, #-2147483648	; 0x80000000
   14478:	sdiv	r6, r6, r0
   1447c:	cmp	r6, r7
   14480:	bge	144b4 <__assert_fail@plt+0x36b0>
   14484:	b	144c4 <__assert_fail@plt+0x36c0>
   14488:	beq	144b4 <__assert_fail@plt+0x36b0>
   1448c:	mov	r6, #-2147483648	; 0x80000000
   14490:	mvn	r4, #-2147483648	; 0x80000000
   14494:	sdiv	r6, r6, r7
   14498:	cmp	r6, r0
   1449c:	bge	144b4 <__assert_fail@plt+0x36b0>
   144a0:	b	144c4 <__assert_fail@plt+0x36c0>
   144a4:	mvn	r4, #-2147483648	; 0x80000000
   144a8:	sdiv	r6, r4, r0
   144ac:	cmp	r7, r6
   144b0:	blt	144c4 <__assert_fail@plt+0x36c0>
   144b4:	mul	r6, r7, r0
   144b8:	mov	r4, #64	; 0x40
   144bc:	cmp	r6, #63	; 0x3f
   144c0:	bgt	144cc <__assert_fail@plt+0x36c8>
   144c4:	sdiv	r7, r4, r0
   144c8:	mul	r6, r7, r0
   144cc:	cmp	r5, #0
   144d0:	moveq	r4, #0
   144d4:	streq	r4, [r8]
   144d8:	sub	r4, r7, r1
   144dc:	cmp	r4, r2
   144e0:	bge	1458c <__assert_fail@plt+0x3788>
   144e4:	add	r7, r1, r2
   144e8:	mov	r6, #0
   144ec:	mov	r2, #0
   144f0:	cmp	r7, r3
   144f4:	movwgt	r6, #1
   144f8:	cmn	r3, #1
   144fc:	movwgt	r2, #1
   14500:	cmp	r7, r1
   14504:	bvs	145c0 <__assert_fail@plt+0x37bc>
   14508:	ands	r1, r2, r6
   1450c:	bne	145c0 <__assert_fail@plt+0x37bc>
   14510:	cmn	r0, #1
   14514:	ble	1453c <__assert_fail@plt+0x3738>
   14518:	cmp	r0, #0
   1451c:	beq	14588 <__assert_fail@plt+0x3784>
   14520:	cmn	r7, #1
   14524:	ble	14560 <__assert_fail@plt+0x375c>
   14528:	mvn	r1, #-2147483648	; 0x80000000
   1452c:	udiv	r1, r1, r0
   14530:	cmp	r1, r7
   14534:	bge	14588 <__assert_fail@plt+0x3784>
   14538:	b	145c0 <__assert_fail@plt+0x37bc>
   1453c:	cmn	r7, #1
   14540:	ble	14578 <__assert_fail@plt+0x3774>
   14544:	cmn	r0, #1
   14548:	beq	14588 <__assert_fail@plt+0x3784>
   1454c:	mov	r1, #-2147483648	; 0x80000000
   14550:	sdiv	r1, r1, r0
   14554:	cmp	r1, r7
   14558:	bge	14588 <__assert_fail@plt+0x3784>
   1455c:	b	145c0 <__assert_fail@plt+0x37bc>
   14560:	beq	14588 <__assert_fail@plt+0x3784>
   14564:	mov	r1, #-2147483648	; 0x80000000
   14568:	sdiv	r1, r1, r7
   1456c:	cmp	r1, r0
   14570:	bge	14588 <__assert_fail@plt+0x3784>
   14574:	b	145c0 <__assert_fail@plt+0x37bc>
   14578:	mvn	r1, #-2147483648	; 0x80000000
   1457c:	sdiv	r1, r1, r0
   14580:	cmp	r7, r1
   14584:	blt	145c0 <__assert_fail@plt+0x37bc>
   14588:	mul	r6, r7, r0
   1458c:	mov	r0, r5
   14590:	mov	r1, r6
   14594:	bl	147d0 <__assert_fail@plt+0x39cc>
   14598:	cmp	r6, #0
   1459c:	movwne	r6, #1
   145a0:	cmp	r0, #0
   145a4:	bne	145b8 <__assert_fail@plt+0x37b4>
   145a8:	clz	r1, r5
   145ac:	lsr	r1, r1, #5
   145b0:	orrs	r1, r1, r6
   145b4:	bne	145c0 <__assert_fail@plt+0x37bc>
   145b8:	str	r7, [r8]
   145bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   145c0:	bl	14708 <__assert_fail@plt+0x3904>
   145c4:	push	{fp, lr}
   145c8:	mov	fp, sp
   145cc:	mov	r1, #1
   145d0:	bl	1474c <__assert_fail@plt+0x3948>
   145d4:	cmp	r0, #0
   145d8:	popne	{fp, pc}
   145dc:	bl	14708 <__assert_fail@plt+0x3904>
   145e0:	push	{fp, lr}
   145e4:	mov	fp, sp
   145e8:	bl	1474c <__assert_fail@plt+0x3948>
   145ec:	cmp	r0, #0
   145f0:	popne	{fp, pc}
   145f4:	bl	14708 <__assert_fail@plt+0x3904>
   145f8:	push	{fp, lr}
   145fc:	mov	fp, sp
   14600:	mov	r1, #1
   14604:	bl	1474c <__assert_fail@plt+0x3948>
   14608:	cmp	r0, #0
   1460c:	popne	{fp, pc}
   14610:	bl	14708 <__assert_fail@plt+0x3904>
   14614:	push	{fp, lr}
   14618:	mov	fp, sp
   1461c:	bl	1474c <__assert_fail@plt+0x3948>
   14620:	cmp	r0, #0
   14624:	popne	{fp, pc}
   14628:	bl	14708 <__assert_fail@plt+0x3904>
   1462c:	push	{r4, r5, fp, lr}
   14630:	add	fp, sp, #8
   14634:	mov	r5, r0
   14638:	mov	r0, r1
   1463c:	mov	r4, r1
   14640:	bl	147a0 <__assert_fail@plt+0x399c>
   14644:	cmp	r0, #0
   14648:	beq	1465c <__assert_fail@plt+0x3858>
   1464c:	mov	r1, r5
   14650:	mov	r2, r4
   14654:	pop	{r4, r5, fp, lr}
   14658:	b	10c54 <memcpy@plt>
   1465c:	bl	14708 <__assert_fail@plt+0x3904>
   14660:	push	{r4, r5, fp, lr}
   14664:	add	fp, sp, #8
   14668:	mov	r5, r0
   1466c:	mov	r0, r1
   14670:	mov	r4, r1
   14674:	bl	147a0 <__assert_fail@plt+0x399c>
   14678:	cmp	r0, #0
   1467c:	beq	14690 <__assert_fail@plt+0x388c>
   14680:	mov	r1, r5
   14684:	mov	r2, r4
   14688:	pop	{r4, r5, fp, lr}
   1468c:	b	10c54 <memcpy@plt>
   14690:	bl	14708 <__assert_fail@plt+0x3904>
   14694:	push	{r4, r5, fp, lr}
   14698:	add	fp, sp, #8
   1469c:	mov	r5, r0
   146a0:	add	r0, r1, #1
   146a4:	mov	r4, r1
   146a8:	bl	147a0 <__assert_fail@plt+0x399c>
   146ac:	cmp	r0, #0
   146b0:	beq	146cc <__assert_fail@plt+0x38c8>
   146b4:	mov	r1, #0
   146b8:	mov	r2, r4
   146bc:	strb	r1, [r0, r4]
   146c0:	mov	r1, r5
   146c4:	pop	{r4, r5, fp, lr}
   146c8:	b	10c54 <memcpy@plt>
   146cc:	bl	14708 <__assert_fail@plt+0x3904>
   146d0:	push	{r4, r5, fp, lr}
   146d4:	add	fp, sp, #8
   146d8:	mov	r4, r0
   146dc:	bl	10d44 <strlen@plt>
   146e0:	add	r5, r0, #1
   146e4:	mov	r0, r5
   146e8:	bl	147a0 <__assert_fail@plt+0x399c>
   146ec:	cmp	r0, #0
   146f0:	beq	14704 <__assert_fail@plt+0x3900>
   146f4:	mov	r1, r4
   146f8:	mov	r2, r5
   146fc:	pop	{r4, r5, fp, lr}
   14700:	b	10c54 <memcpy@plt>
   14704:	bl	14708 <__assert_fail@plt+0x3904>
   14708:	push	{fp, lr}
   1470c:	mov	fp, sp
   14710:	movw	r0, #24780	; 0x60cc
   14714:	movw	r1, #22348	; 0x574c
   14718:	mov	r2, #5
   1471c:	movt	r0, #2
   14720:	movt	r1, #1
   14724:	ldr	r4, [r0]
   14728:	mov	r0, #0
   1472c:	bl	10c6c <dcgettext@plt>
   14730:	movw	r2, #21311	; 0x533f
   14734:	mov	r3, r0
   14738:	mov	r0, r4
   1473c:	mov	r1, #0
   14740:	movt	r2, #1
   14744:	bl	10cd8 <error@plt>
   14748:	bl	10df8 <abort@plt>
   1474c:	clz	r2, r1
   14750:	clz	r3, r0
   14754:	lsr	r2, r2, #5
   14758:	lsr	r3, r3, #5
   1475c:	orrs	r2, r3, r2
   14760:	movwne	r1, #1
   14764:	movwne	r0, #1
   14768:	cmp	r1, #0
   1476c:	beq	1479c <__assert_fail@plt+0x3998>
   14770:	mvn	r2, #-2147483648	; 0x80000000
   14774:	udiv	r2, r2, r1
   14778:	cmp	r2, r0
   1477c:	bcs	1479c <__assert_fail@plt+0x3998>
   14780:	push	{fp, lr}
   14784:	mov	fp, sp
   14788:	bl	10d50 <__errno_location@plt>
   1478c:	mov	r1, #12
   14790:	str	r1, [r0]
   14794:	mov	r0, #0
   14798:	pop	{fp, pc}
   1479c:	b	10c0c <calloc@plt>
   147a0:	cmp	r0, #0
   147a4:	movweq	r0, #1
   147a8:	cmn	r0, #1
   147ac:	ble	147b4 <__assert_fail@plt+0x39b0>
   147b0:	b	10cf0 <malloc@plt>
   147b4:	push	{fp, lr}
   147b8:	mov	fp, sp
   147bc:	bl	10d50 <__errno_location@plt>
   147c0:	mov	r1, #12
   147c4:	str	r1, [r0]
   147c8:	mov	r0, #0
   147cc:	pop	{fp, pc}
   147d0:	push	{fp, lr}
   147d4:	mov	fp, sp
   147d8:	cmp	r0, #0
   147dc:	beq	147f8 <__assert_fail@plt+0x39f4>
   147e0:	cmp	r1, #0
   147e4:	beq	14804 <__assert_fail@plt+0x3a00>
   147e8:	cmn	r1, #1
   147ec:	ble	14810 <__assert_fail@plt+0x3a0c>
   147f0:	pop	{fp, lr}
   147f4:	b	10c78 <realloc@plt>
   147f8:	mov	r0, r1
   147fc:	pop	{fp, lr}
   14800:	b	147a0 <__assert_fail@plt+0x399c>
   14804:	bl	149a0 <__assert_fail@plt+0x3b9c>
   14808:	mov	r0, #0
   1480c:	pop	{fp, pc}
   14810:	bl	10d50 <__errno_location@plt>
   14814:	mov	r1, #12
   14818:	str	r1, [r0]
   1481c:	mov	r0, #0
   14820:	pop	{fp, pc}
   14824:	push	{r4, r5, r6, sl, fp, lr}
   14828:	add	fp, sp, #16
   1482c:	mov	r4, r0
   14830:	bl	10cc0 <__fpending@plt>
   14834:	ldr	r6, [r4]
   14838:	mov	r5, r0
   1483c:	mov	r0, r4
   14840:	bl	148a8 <__assert_fail@plt+0x3aa4>
   14844:	tst	r6, #32
   14848:	bne	14880 <__assert_fail@plt+0x3a7c>
   1484c:	cmp	r0, #0
   14850:	mov	r4, r0
   14854:	mvnne	r4, #0
   14858:	cmp	r5, #0
   1485c:	bne	1488c <__assert_fail@plt+0x3a88>
   14860:	cmp	r0, #0
   14864:	beq	1488c <__assert_fail@plt+0x3a88>
   14868:	bl	10d50 <__errno_location@plt>
   1486c:	ldr	r0, [r0]
   14870:	subs	r4, r0, #9
   14874:	mvnne	r4, #0
   14878:	mov	r0, r4
   1487c:	pop	{r4, r5, r6, sl, fp, pc}
   14880:	mvn	r4, #0
   14884:	cmp	r0, #0
   14888:	beq	14894 <__assert_fail@plt+0x3a90>
   1488c:	mov	r0, r4
   14890:	pop	{r4, r5, r6, sl, fp, pc}
   14894:	bl	10d50 <__errno_location@plt>
   14898:	mov	r1, #0
   1489c:	str	r1, [r0]
   148a0:	mov	r0, r4
   148a4:	pop	{r4, r5, r6, sl, fp, pc}
   148a8:	push	{r4, r5, r6, sl, fp, lr}
   148ac:	add	fp, sp, #16
   148b0:	sub	sp, sp, #8
   148b4:	mov	r4, r0
   148b8:	bl	10d80 <fileno@plt>
   148bc:	cmn	r0, #1
   148c0:	ble	14934 <__assert_fail@plt+0x3b30>
   148c4:	mov	r0, r4
   148c8:	bl	10d08 <__freading@plt>
   148cc:	cmp	r0, #0
   148d0:	beq	148fc <__assert_fail@plt+0x3af8>
   148d4:	mov	r0, r4
   148d8:	bl	10d80 <fileno@plt>
   148dc:	mov	r1, #1
   148e0:	mov	r2, #0
   148e4:	mov	r3, #0
   148e8:	str	r1, [sp]
   148ec:	bl	10ca8 <lseek64@plt>
   148f0:	and	r0, r0, r1
   148f4:	cmn	r0, #1
   148f8:	beq	14934 <__assert_fail@plt+0x3b30>
   148fc:	mov	r0, r4
   14900:	bl	14944 <__assert_fail@plt+0x3b40>
   14904:	cmp	r0, #0
   14908:	beq	14934 <__assert_fail@plt+0x3b30>
   1490c:	bl	10d50 <__errno_location@plt>
   14910:	ldr	r6, [r0]
   14914:	mov	r5, r0
   14918:	mov	r0, r4
   1491c:	bl	10d98 <fclose@plt>
   14920:	cmp	r6, #0
   14924:	strne	r6, [r5]
   14928:	mvnne	r0, #0
   1492c:	sub	sp, fp, #16
   14930:	pop	{r4, r5, r6, sl, fp, pc}
   14934:	mov	r0, r4
   14938:	sub	sp, fp, #16
   1493c:	pop	{r4, r5, r6, sl, fp, lr}
   14940:	b	10d98 <fclose@plt>
   14944:	push	{r4, sl, fp, lr}
   14948:	add	fp, sp, #8
   1494c:	sub	sp, sp, #8
   14950:	mov	r4, r0
   14954:	cmp	r0, #0
   14958:	beq	14990 <__assert_fail@plt+0x3b8c>
   1495c:	mov	r0, r4
   14960:	bl	10d08 <__freading@plt>
   14964:	cmp	r0, #0
   14968:	beq	14990 <__assert_fail@plt+0x3b8c>
   1496c:	ldrb	r0, [r4, #1]
   14970:	tst	r0, #1
   14974:	beq	14990 <__assert_fail@plt+0x3b8c>
   14978:	mov	r0, #1
   1497c:	mov	r2, #0
   14980:	mov	r3, #0
   14984:	str	r0, [sp]
   14988:	mov	r0, r4
   1498c:	bl	149c8 <__assert_fail@plt+0x3bc4>
   14990:	mov	r0, r4
   14994:	sub	sp, fp, #8
   14998:	pop	{r4, sl, fp, lr}
   1499c:	b	10c30 <fflush@plt>
   149a0:	push	{r4, r5, r6, sl, fp, lr}
   149a4:	add	fp, sp, #16
   149a8:	mov	r4, r0
   149ac:	bl	10d50 <__errno_location@plt>
   149b0:	ldr	r6, [r0]
   149b4:	mov	r5, r0
   149b8:	mov	r0, r4
   149bc:	bl	10c3c <free@plt>
   149c0:	str	r6, [r5]
   149c4:	pop	{r4, r5, r6, sl, fp, pc}
   149c8:	push	{r4, r5, r6, r7, fp, lr}
   149cc:	add	fp, sp, #16
   149d0:	sub	sp, sp, #8
   149d4:	mov	r4, r0
   149d8:	ldr	r0, [r0, #4]
   149dc:	mov	r5, r3
   149e0:	mov	r6, r2
   149e4:	ldr	r1, [r4, #8]
   149e8:	cmp	r1, r0
   149ec:	bne	14a08 <__assert_fail@plt+0x3c04>
   149f0:	ldrd	r0, [r4, #16]
   149f4:	cmp	r1, r0
   149f8:	bne	14a08 <__assert_fail@plt+0x3c04>
   149fc:	ldr	r0, [r4, #36]	; 0x24
   14a00:	cmp	r0, #0
   14a04:	beq	14a20 <__assert_fail@plt+0x3c1c>
   14a08:	mov	r0, r4
   14a0c:	mov	r2, r6
   14a10:	mov	r3, r5
   14a14:	sub	sp, fp, #16
   14a18:	pop	{r4, r5, r6, r7, fp, lr}
   14a1c:	b	10da4 <fseeko64@plt>
   14a20:	ldr	r7, [fp, #8]
   14a24:	mov	r0, r4
   14a28:	bl	10d80 <fileno@plt>
   14a2c:	mov	r2, r6
   14a30:	mov	r3, r5
   14a34:	str	r7, [sp]
   14a38:	bl	10ca8 <lseek64@plt>
   14a3c:	and	r2, r0, r1
   14a40:	cmn	r2, #1
   14a44:	beq	14a64 <__assert_fail@plt+0x3c60>
   14a48:	strd	r0, [r4, #80]	; 0x50
   14a4c:	ldr	r0, [r4]
   14a50:	bic	r0, r0, #16
   14a54:	str	r0, [r4]
   14a58:	mov	r0, #0
   14a5c:	sub	sp, fp, #16
   14a60:	pop	{r4, r5, r6, r7, fp, pc}
   14a64:	mvn	r0, #0
   14a68:	sub	sp, fp, #16
   14a6c:	pop	{r4, r5, r6, r7, fp, pc}
   14a70:	push	{fp, lr}
   14a74:	mov	fp, sp
   14a78:	mov	r0, #14
   14a7c:	bl	10dd4 <nl_langinfo@plt>
   14a80:	movw	r1, #20175	; 0x4ecf
   14a84:	cmp	r0, #0
   14a88:	movt	r1, #1
   14a8c:	movne	r1, r0
   14a90:	movw	r0, #22365	; 0x575d
   14a94:	ldrb	r2, [r1]
   14a98:	movt	r0, #1
   14a9c:	cmp	r2, #0
   14aa0:	movne	r0, r1
   14aa4:	pop	{fp, pc}
   14aa8:	push	{r4, r5, r6, r7, fp, lr}
   14aac:	add	fp, sp, #16
   14ab0:	sub	sp, sp, #8
   14ab4:	cmp	r0, #0
   14ab8:	add	r5, sp, #4
   14abc:	mov	r7, r2
   14ac0:	mov	r4, r1
   14ac4:	movne	r5, r0
   14ac8:	mov	r0, r5
   14acc:	bl	10ccc <mbrtowc@plt>
   14ad0:	mov	r6, r0
   14ad4:	cmp	r7, #0
   14ad8:	beq	14b00 <__assert_fail@plt+0x3cfc>
   14adc:	cmn	r6, #2
   14ae0:	bcc	14b00 <__assert_fail@plt+0x3cfc>
   14ae4:	mov	r0, #0
   14ae8:	bl	14b48 <__assert_fail@plt+0x3d44>
   14aec:	cmp	r0, #0
   14af0:	bne	14b00 <__assert_fail@plt+0x3cfc>
   14af4:	ldrb	r0, [r4]
   14af8:	mov	r6, #1
   14afc:	str	r0, [r5]
   14b00:	mov	r0, r6
   14b04:	sub	sp, fp, #16
   14b08:	pop	{r4, r5, r6, r7, fp, pc}
   14b0c:	cmp	r2, #0
   14b10:	beq	14b40 <__assert_fail@plt+0x3d3c>
   14b14:	mvn	r3, #0
   14b18:	udiv	r3, r3, r2
   14b1c:	cmp	r3, r1
   14b20:	bcs	14b40 <__assert_fail@plt+0x3d3c>
   14b24:	push	{fp, lr}
   14b28:	mov	fp, sp
   14b2c:	bl	10d50 <__errno_location@plt>
   14b30:	mov	r1, #12
   14b34:	str	r1, [r0]
   14b38:	mov	r0, #0
   14b3c:	pop	{fp, pc}
   14b40:	mul	r1, r2, r1
   14b44:	b	147d0 <__assert_fail@plt+0x39cc>
   14b48:	push	{r4, sl, fp, lr}
   14b4c:	add	fp, sp, #8
   14b50:	sub	sp, sp, #264	; 0x108
   14b54:	add	r1, sp, #7
   14b58:	movw	r2, #257	; 0x101
   14b5c:	bl	14bb4 <__assert_fail@plt+0x3db0>
   14b60:	mov	r4, #0
   14b64:	cmp	r0, #0
   14b68:	bne	14ba8 <__assert_fail@plt+0x3da4>
   14b6c:	movw	r1, #22371	; 0x5763
   14b70:	add	r0, sp, #7
   14b74:	mov	r2, #2
   14b78:	movt	r1, #1
   14b7c:	bl	10d38 <bcmp@plt>
   14b80:	cmp	r0, #0
   14b84:	beq	14ba8 <__assert_fail@plt+0x3da4>
   14b88:	movw	r1, #22373	; 0x5765
   14b8c:	add	r0, sp, #7
   14b90:	mov	r2, #6
   14b94:	movt	r1, #1
   14b98:	bl	10d38 <bcmp@plt>
   14b9c:	cmp	r0, #0
   14ba0:	mov	r4, r0
   14ba4:	movwne	r4, #1
   14ba8:	mov	r0, r4
   14bac:	sub	sp, fp, #8
   14bb0:	pop	{r4, sl, fp, pc}
   14bb4:	push	{r4, r5, r6, r7, fp, lr}
   14bb8:	add	fp, sp, #16
   14bbc:	mov	r4, r1
   14bc0:	mov	r1, #0
   14bc4:	mov	r6, r2
   14bc8:	bl	10dbc <setlocale@plt>
   14bcc:	cmp	r0, #0
   14bd0:	beq	14c00 <__assert_fail@plt+0x3dfc>
   14bd4:	mov	r7, r0
   14bd8:	bl	10d44 <strlen@plt>
   14bdc:	cmp	r0, r6
   14be0:	bcs	14c1c <__assert_fail@plt+0x3e18>
   14be4:	add	r2, r0, #1
   14be8:	mov	r0, r4
   14bec:	mov	r1, r7
   14bf0:	bl	10c54 <memcpy@plt>
   14bf4:	mov	r5, #0
   14bf8:	mov	r0, r5
   14bfc:	pop	{r4, r5, r6, r7, fp, pc}
   14c00:	mov	r5, #22
   14c04:	cmp	r6, #0
   14c08:	beq	14c44 <__assert_fail@plt+0x3e40>
   14c0c:	mov	r0, #0
   14c10:	strb	r0, [r4]
   14c14:	mov	r0, r5
   14c18:	pop	{r4, r5, r6, r7, fp, pc}
   14c1c:	mov	r5, #34	; 0x22
   14c20:	cmp	r6, #0
   14c24:	beq	14c44 <__assert_fail@plt+0x3e40>
   14c28:	sub	r6, r6, #1
   14c2c:	mov	r0, r4
   14c30:	mov	r1, r7
   14c34:	mov	r2, r6
   14c38:	bl	10c54 <memcpy@plt>
   14c3c:	mov	r0, #0
   14c40:	strb	r0, [r4, r6]
   14c44:	mov	r0, r5
   14c48:	pop	{r4, r5, r6, r7, fp, pc}
   14c4c:	mov	r1, #0
   14c50:	b	10dbc <setlocale@plt>
   14c54:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14c58:	mov	r7, r0
   14c5c:	ldr	r6, [pc, #72]	; 14cac <__assert_fail@plt+0x3ea8>
   14c60:	ldr	r5, [pc, #72]	; 14cb0 <__assert_fail@plt+0x3eac>
   14c64:	add	r6, pc, r6
   14c68:	add	r5, pc, r5
   14c6c:	sub	r6, r6, r5
   14c70:	mov	r8, r1
   14c74:	mov	r9, r2
   14c78:	bl	10bec <calloc@plt-0x20>
   14c7c:	asrs	r6, r6, #2
   14c80:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14c84:	mov	r4, #0
   14c88:	add	r4, r4, #1
   14c8c:	ldr	r3, [r5], #4
   14c90:	mov	r2, r9
   14c94:	mov	r1, r8
   14c98:	mov	r0, r7
   14c9c:	blx	r3
   14ca0:	cmp	r6, r4
   14ca4:	bne	14c88 <__assert_fail@plt+0x3e84>
   14ca8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14cac:	andeq	r1, r1, r0, lsr #5
   14cb0:	muleq	r1, r8, r2
   14cb4:	bx	lr
   14cb8:	ldr	r3, [pc, #12]	; 14ccc <__assert_fail@plt+0x3ec8>
   14cbc:	mov	r1, #0
   14cc0:	add	r3, pc, r3
   14cc4:	ldr	r2, [r3]
   14cc8:	b	10d5c <__cxa_atexit@plt>
   14ccc:	strdeq	r1, [r1], -ip

Disassembly of section .fini:

00014cd0 <.fini>:
   14cd0:	push	{r3, lr}
   14cd4:	pop	{r3, pc}
